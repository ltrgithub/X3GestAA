"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var globals = require('streamline/lib/globals');
var _date = require('syracuse-core/lib/types/date');
var jsurl = require('jsurl/lib/jsurl');
var _unloadActionProperties = ["donotuse", "selectedLocale", "selectedRole", "selectedEndpoint"];

function UserProfile() {

}

exports.UserProfile = helpers.defineClass(UserProfile, RawPage, {
	dispose: function() {
		if (!this.saveSiteTimeout) {
			clearTimeout(this.saveSiteTimeout);
		}
		this.saveSiteTimeout = this.formBlock = null;
		RawPage.prototype.dispose.call(this);
	},
	hasDesignRight: function() {
		return !(this.getAuthoringLevel() === "none");
	},
	getLogonUrl: function() {
		var $url = syra_site.$item.$userProfileUrl;
		var profile = syra_site.$prototype.$userprofile;
		if (!profile) {
			var seg = syra_site.urlMaker.parse(syra_site.history.getSdataUrl(document.location.href));
			profile = seg && seg.params && seg.params.profile;
			if (profile) {
				syra_site.$prototype.$userprofile = profile;
			}
		}
		if (profile) {
			$url += "&profile={$userprofile}";
		}
		return $url;
	},
	switchToNewSession: function(onsuccess) {
		var self = this;
		syra_controller.postQuery({
			$url: self.getLogonUrl()
		}, null, null, function($location, data) {
			self.applyChange(data);
			onsuccess();
		});
	},
	getAuthoringLevel: function() {
		return (this.dataset ? this.dataset.authoringLevel : null) || "none";
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$subRecordKey == "user") {
			menuItem.$target = "blank";
		}
		return true;
	},
	getRegionalPreferences: function(success) {
		this.ensureFormBlock();
		var lookup = this.boundFields.selectedLocale[0];
		syra_controller.sendRequest(this, {
			$location: {
				$url: syra_site.expressionMaker.parse(this, lookup.$menus.$lookup.$url)
			}
		}, function(data) {
			success(data && data.$resources);
		});
	},
	ensureFormBlock: function() {
		var self = this;
		if (!self.formBlock) {
			self.formBlock = self.loadNewItem(self.domItem, {
				$category: "section",
				$title: syra_local.userProfile_up_welcome,
				$skin: "s-user-form",
				$layout: {
					$items: [{
						$bind: "$save",
						$category: "link",
						$isHidden: true,
						onServerRequest: function(menu) {
							//this is item menu
							if (menu.$links && menu.$links.$location) {
								if (self.dataset && self.dataset.selectedRole) {
									self.$prototype.$role = self.dataset.selectedRole.$uuid; //important for url 
								}
							}
							return false;
						}
					}, {
						$isEditMode: true,
						$isHidden: syra_site.siteOptions.isUserEndpointChangeDisabled,
						$isTopLabelAlignment: false,
						$isReferenceTitleVisible: false,
						$css: "s-user-profile-selectedRole",
						$bind: "selectedRole",
						$title: syra_local.userProfile_up_role
					}, {
						$isEditMode: true,
						$isTopLabelAlignment: false,
						$isReferenceTitleVisible: false,
						$css: "s-user-profile-selectedEndpoint",
						$bind: "selectedEndpoint",
						$title: syra_local.userProfile_up_endpoint
					}, {
						$isEditMode: true,
						$isTopLabelAlignment: false,
						$isReferenceTitleVisible: false,
						$css: "s-user-profile-selectedLocale",
						$bind: "selectedLocale",
						$title: syra_local.userProfile_up_locale
					}]
				}
			});
			self.isPageLoaded = true;
		}
	},
	loadBox: function(initData) {
		// adding selectedLocale into dom for test purposes
		if (initData && initData.selectedLocale) {
			syra_site.body.setAttribute('data-s-q-local', initData.selectedLocale.$value);
		}
		if (this.$prototype && this.$prototype.$properties) {
			this.$prototype.$properties.$fieldSelectEndPoint = {
				$type: "application/x-choice",
				$value: {
					$type: "application/x-integer",
					$enum: []
				}
			};
			RawPage.prototype.loadBox.call(this, initData);
		} else {
			syra_site.layoutSlot.style.display = "";
			this.showDiagnoses(initData);
			this.hasLogonFailed = true;
		}
	},
	drawBox: function() {
		this.externalAdapter = syra_site.externalAdapter;
		this.domItem = document.createElement("div");
		this.domItem.id = "s-user-profile";
	},
	showDiagnoses: function(message) {
		// display user profile errors in popup ???
		if (message.$diagnoses && Object.keys(message.$diagnoses).length > 0) {
			var options = {};
			var onlyOneDiagnose = message.$diagnoses.length == 1;
			options.$message = syra_local.userProfile_siteMsgboxMsg;
			options.$useLinkAsOk = onlyOneDiagnose && message.$diagnoses[0].$links; //temp hack
			options.$type = "alert";
			options.$buttons = "ok";
			options.$title = syra_local.userProfile_upDiagMsgboxTitle;
			options.$diagnoses = message.$diagnoses;
			options.$origin = onlyOneDiagnose ? message.$diagnoses[0].$origin : "";
			syra_site.showMessage(options);
		}
	},
	notifyDataChange: function(field, value, doNotify) {
		var self = this;
		if (!doNotify && syra_site.fusionGateway) {
			if (["donotuse", "selectedLocale", "selectedRole", "selectedEndpoint"].indexOf(field.$item.$bind)) {
				var oldValue = helpers.object.clone(self.dataset[field.$item.$bind], true);
				syra_site.fusionGateway.onUserActionUnload(function() {
					self.notifyDataChange(field, value, true);
				}, function() {
					oldValue && field.setDataValue(oldValue);
				}, field.$item.$bind);
				return;
			}
		}
		self.notifyActionChange(null, self, {
			$save: {
				$isRequested: true
			}
		}, false);
		RawPage.prototype.notifyDataChange.call(self, field, value);
	},
	saveSitePreferences: function() {
		var self = this;
		if (!self.saveSiteTimeout) {
			self.saveSiteTimeout = setTimeout(function() {
				self.saveSiteTimeout = null;
				self.ensureSendBag().sitePreferences = self.dataset.sitePreferences;
				self.notifyActionChange(null, self, {
					$save: {
						$isRequested: true
					}
				}, true);
			}, 3000);
		}
	},
	applyChange: function(newData) {
		var isRoleChanged, isEndpointChanged, isSelectedLocalChanged;
		var isFusionPage = syra_site.mainPage && syra_site.mainPage.isFusionPage;
		var selectedLocale = this.dataset.selectedLocale;

		if (this.currentLangCode && ((newData.selectedLocale && newData.selectedLocale.code) != this.currentLangCode)) {
			isSelectedLocalChanged = true;
			this.currentLangCode = newData.selectedLocale.code;
		}
		if (!this.currentLangCode) {
			(globals.context = globals.context || {}).localePreferences = newData.selectedLocale;
			this.currentLangCode = (newData.selectedLocale && newData.selectedLocale.code) || "en";
		}

		if (newData && newData.serverETag != null && module.etag != newData.serverETag) {
			isSelectedLocalChanged = true;
		}
		if (this._selectedEndpointUiid !== undefined && newData.selectedEndpoint) {
			isEndpointChanged = this._selectedEndpointUiid != newData.selectedEndpoint.$uuid;
		}
		if (this._selectedRoleUiid !== undefined && this._selectedRoleUiid && newData.selectedRole) {
			isRoleChanged = this._selectedRoleUiid != newData.selectedRole.$uuid;
		}

		RawPage.prototype.applyChange.call(this, newData);
		var urlSegments;
		if (isSelectedLocalChanged || newData.selectedRole !== undefined || newData.selectedEndpoint !== undefined) {
			urlSegments = this._applyNewSecurity(isEndpointChanged && newData.selectedEndpoint);
		}
		if (isSelectedLocalChanged) {
			setTimeout(function() {
				syra_site.isSiteReloading = true;
				syra_site.history.reloadSite();
			}, 10);
		} else {
			if (isRoleChanged) {
				syra_site.history.loadMainPage();
			} else {
				if (isEndpointChanged) {
					syra_site.bookmarksManager && syra_site.bookmarksManager.refresh();
					if (urlSegments && urlSegments.isFusion) {
						syra_site.history.load(urlSegments.$url);
					} else {
						syra_site.gotoNavigationPage();
					}
				}
			}
		}

	},
	_applyNewSecurity: function(newEndpoint) {
		var urlSegments;
		syra_site.$prototype.$role = this._selectedRoleUiid = (this.dataset.selectedRole && this.dataset.selectedRole.$uuid) || null;
		this._selectedEndpointUiid = (this.dataset.selectedEndpoint && this.dataset.selectedEndpoint.$uuid) || null;
		this.setEncodedValue();
		var page = syra_site.mainPage;
		if (page && !page.disposed) {
			urlSegments = page.openerUrlSegments;
			if (urlSegments) {
				(urlSegments.params = urlSegments.params || {}).profile = syra_site.$prototype.$userprofile;
				if (this.dataset.selectedEndpoint !== undefined) {
					syra_site.urlMaker.replaceSegmentEndpoint(urlSegments, this.dataset.selectedEndpoint);
				}
				syra_site.urlMaker.build(urlSegments);
				syra_site.history.update(page, urlSegments.$url);
			}
			syra_site.siteFunctions.refreshMainPageSecurity(page);
		} else {
			if (newEndpoint) {
				var url = syra_site.history.getCurrentSdataUrl();
				urlSegments = syra_site.urlMaker.parse(url);
				if (urlSegments.endpoint) {
					syra_site.urlMaker.replaceSegmentEndpoint(urlSegments, newEndpoint);
				}
			}
		}
		return urlSegments;
	},
	setSecurityToRepresentation: function($representation) {
		if (this.dataset.selectedRole) {
			$representation.$prototype.$role = this.dataset.selectedRole.$uuid; //important for url 
		}
		$representation.$prototype.$userprofile = this.getEncodedValue();
	},
	setEncodedValue: function() {
		var value = {
			loc: this.currentLangCode
		};
		if (this._selectedRoleUiid) {
			value.role = this._selectedRoleUiid;
		}
		if (this._selectedEndpointUiid) {
			value.ep = this._selectedEndpointUiid;
		}
		syra_site.$prototype.$userprofile = jsurl.stringify(value);
	},
	getEncodedValue: function() {
		return syra_site.$prototype.$userprofile || "";
	},
	getSelectedRole: function() {
		return this.dataset.selectedRole;
	},
	getSelectedEndpoint: function() {
		return this.dataset.selectedEndpoint;
	},
	getSelectedLocale: function() {
		return this.dataset.selectedLocale;
	},
	getSelectedEndpointString: function() {
		var endpoint = this.dataset ? this.dataset.selectedEndpoint : null;
		return endpoint ? (endpoint.application + "." + endpoint.contract + "." + endpoint.dataset) : null;
	},
	onLogonSucees: function() {
		syra_site.developpementMode = this.dataset.developpementMode;
		syra_site.enableTestRobot = this.dataset.enableTestRobot;
		this._applyNewSecurity();
		var locale = this.dataset.selectedLocale || {};
		var formatPatterns = _date.resources().formatPatterns || {};
		this.format = {
			date_long: locale.longDate || "dd MMMM yyyy",
			date_short: locale.shortDate || "yyyy-MM-dd",
			time_long: locale.longTime || "HH:mm:ss",
			time_short: locale.shortTime || "HH:mm",
			datetime_sortable: formatPatterns.sortableDateTime || "yyyy-MM-ddTHH:mm:ss",
			datetime_full: locale.longDatetime || formatPatterns.fullDateTime || "dd MMMM yyyy HH:mm:ss",
			datetime_universal: locale.longDatetime || formatPatterns.universalSortableDateTime || "yyyy-MM-dd HH:mm:ssZ",
			datetime_default: locale.shortDatetime || formatPatterns.universalSortableDateTime || "yyyy-MM-dd HH:mm:ssZ",
			twoDigitYearMax: locale.twoDigitYearMax || 2029,
			numberFormat: {
				groupSize: locale.numberGroupSize || "3",
				decimalSeparator: locale.numberDecimalSeparator || ".",
				groupSeparator: locale.numberGroupSeparator || ","
			}
		};

		// numFormat default -> #,##0 (integer) or #,##0.## (decimal)
		var numFormat = "#,";
		var groupSize = this.format.numberFormat.groupSize;
		for (var ii = 0; ii < groupSize; ii++) {
			numFormat += (ii == groupSize - 1) ? "0" : "#";
		}
		this.format.numberFormat.numFormat = numFormat + '.##';
		this.format.numberFormat["application/x-integer"] = numFormat + '';
		this.format.datetime_default = locale.shortDatetime || (this.format.date_short + " " + this.format.time_short);
	},
	getDateFormat: function(code) {
		return code == "DD" ? this.format.date_long : this.format.date_short;
	},
	getTimeFormat: function(code) {
		return code == "TT" ? this.format.time_long : this.format.time_short;
	},
	getDatetimeFormat: function(code) {
		switch (code) {
			case "F":
				return this.format.datetime_sortable;
				break;
			case "FF":
				return this.format.datetime_full;
				break;
			case "U":
				return this.format.datetime_universal;
		}
		return this.format.datetime_default;
	},
	getNumberFormat: function(type) {
		return this.format.numberFormat[type] || this.format.numberFormat.numFormat;
	},
	getNumberFormatObj: function(type) {
		return {
			numFormat: this.getNumberFormat(type),
			decimalSeparator: this.format.numberFormat.decimalSeparator,
			groupSeparator: this.format.numberFormat.groupSeparator,
			groupSize: this.format.numberFormat.groupSize
		};
	},
	getTwoDigitYearMax: function() {
		return this.format.twoDigitYearMax;
	},
	getServerSessionTimeOut: function() {
		return (this.dataset.sessionTimeout || 2) * 60 * 1000; // converting minutes into milliseconds
		//return 186000; // 3.1 minutes for test
	},
	getCurrencyDisplay: function() {
		return this.dataset.currencyDisplay || "symbol";
	},
	getUnitDisplay: function() {
		return this.dataset.unitDisplay || "symbol";
	},
	getCurrencyPosition: function() {
		return this.dataset.currencyPosition || "right";
	},
	buildWCContent: function() {
		var dd = this.dataset || {};
		return ["selectedEndpoint", "selectedRole", "selectedLocale"].reduce(function(prev, item) {
			var val = dd[item];
			prev[item] = (val && val.$uuid) ? {
				$uuid: val.$uuid
			} : null;
			return prev;
		}, {
			$etag: dd.$etag
		});
	}
});