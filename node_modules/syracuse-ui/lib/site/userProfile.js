"use strict";
var _helpers = require('@sage/syracuse-core').helpers;
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;
var _globals = require('streamline-runtime').globals;
var _jsurl = require('jsurl/lib/jsurl');
var List = require('syracuse-ui/lib/scroll/list').List;
var ApplicationConnection = require('syracuse-ui/lib/profile/applicationConnection').ApplicationConnection;

function UserProfile() {}

exports.UserProfile = _helpers.defineClass(UserProfile, DesktopPage, {
	hasDesignRight: function() {
		return !(this.getAuthoringLevel() === "none");
	},
	getLogonUrl: function() {
		var $url = syra_config.$userProfileUrl;
		var profile = syra_site.$prototype.$userprofile;
		if (!profile) {
			var seg = syra_url.history.getUrlSegment();
			profile = seg && seg.params && seg.params.profile;
			if (profile && profile != "{$userprofile}") {
				syra_site.$prototype.$userprofile = profile;
			} else {
				profile = null;
			}
		}
		if (profile) {
			$url += "&profile={$userprofile}";
		}
		return $url;
	},
	switchToNewSession: function(onsuccess) {
		var self = this;
		syra_router.postQuery({
			menu: {
				$url: self.getLogonUrl()
			},
			success: function($url, data) {
				self.applyChange(data);
				onsuccess();
			}
		});
	},

	getAuthoringLevel: function() {
		return (this.dataset ? this.dataset.authoringLevel : null) || "none";
	},
	onMenuClick: function(options) {
		if (options.menu.$subRecordKey == "user") {
			options.menu.$target = "blank";
		}
		return true;
	},
	getRegionalPreferences: function(success) {
		var $lookup = this.$prototype.$properties.selectedLocale.$item.$links.$lookup;
		syra_ajax.get({
			page: this,
			url: syra_expression.parse(this, $lookup.$url),
			success: function(data) {
				success(data && data.$resources);
			}
		});
	},
	onAfterActionMenuExecute: function(menuItem, $menu) {
		if (menuItem.$links && menuItem.$links.$location) {
			delete menuItem.$links.$location;
		}
		if (this.dataset && this.dataset.selectedRole) {
			this.$prototype.$role = this.dataset.selectedRole.$uuid;
		}
		if (menuItem.$diagnoses && menuItem.$diagnoses.length) {
			if (menuItem.$diagnoses[0].$severity == "error") {
				syra_alert.error(menuItem.$diagnoses);
			}
			delete $menu.$diagnoses;
			delete menuItem.$diagnoses;
		}
	},
	load: function(initData) {
		syra_dom.hide(this.applicationConnectionSlot = syra_dom.div("s-profile-application"), true);
		this.diagnosePage = syra_site;
		this.isAutoInsertFieldDisabled = true;
		this.isMenuBarDisabled = true;
		this.applicationConnection = new ApplicationConnection();
		if (this.$prototype && this.$prototype.$properties) {
			delete this.$prototype.$description;
			this.$item = {
				$layout: {
					$items: []
				}
			};
			DesktopPage.prototype.load.call(this, initData);
			this.isPageLoaded = true;
		} else {
			syra_alert.show(initData, this);
			syra_site.hasLogonFailed = true;
		}
	},
	drawPage: function() {
		this.domItem = document.createElement("aside");
		this.domItem.syrainout = this.domItem.syraPage = this.domItem.syraItem = this.id;
		this.addItem(this.domItem, {
			$bind: "$save",
			$category: "link",
			$isHidden: true
		});
	},
	onFormUpdateDelta: function(field, value) {
		var self = this;
		switch (field.$item.$bind) {
			case "donotuse":
			case "selectedLocale":
			case "selectedRole":
			case "selectedEndpoint":
				if (!self._isFusionHandlerDisabled && syra_fusion) {
					var oldValue = _helpers.object.clone(self.dataset[field.$item.$bind], true);
					syra_fusion.onUserActionUnload(function() {
						self._isFusionHandlerDisabled = true;
						syra_form.updateDelta(field, value);
						self._isFusionHandlerDisabled = false;
					}, function() {
						oldValue && field.setValue(oldValue);
					}, field.$item.$bind);
					return false;
				}
		}
		var sendBag = syra_form.getSendBag(self);
		sendBag.$actions = sendBag.$actions || {};
		sendBag.$actions.$save = {
			$isRequested: true
		};
		return true;
	},
	setCurrentLangCode: function(dataset) {
		_globals.context.localePreferences = dataset.selectedLocale;
		this.currentLangCode = (dataset.selectedLocale && dataset.selectedLocale.code) || "en";
	},
	applyChange: function(newData) {
		var isRoleChanged, isEndpointChanged, isSelectedLocalChanged;
		var isFusionPage = syra_site.mainPage && syra_site.mainPage.isFusionPage;
		var selectedLocale = this.dataset.selectedLocale;


		var $resetConnection = newData && newData.$actions && newData.$actions.$resetConnection;
		if ($resetConnection) {
			$resetConnection = $resetConnection.$isRequested;
		}
		if (newData.selectedLocale && this.currentLangCode && (newData.selectedLocale.code != this.currentLangCode)) {
			isSelectedLocalChanged = true;
			this.currentLangCode = newData.selectedLocale.code;
		}
		if (!this.currentLangCode) {
			this.setCurrentLangCode(newData);
		}

		if (newData && newData.serverETag != null && module.etag != newData.serverETag) {
			isSelectedLocalChanged = true;
		}
		if (this.selectedEndpointUiid !== undefined && newData.selectedEndpoint) {
			isEndpointChanged = this.selectedEndpointUiid != newData.selectedEndpoint.$uuid;
		}
		if (this.selectedRoleUiid !== undefined && this.selectedRoleUiid && newData.selectedRole) {
			isRoleChanged = this.selectedRoleUiid != newData.selectedRole.$uuid;
		}
		if (newData.selectedTheme !== undefined) {
			syra_style.applyTheme(newData.selectedTheme);
			this.themeField && this.themeField.setValue(newData.selectedTheme);
			//this._popup && this._popup.close();
		}
		DesktopPage.prototype.applyChange.call(this, newData);
		var urlSeg;
		if (isSelectedLocalChanged || newData.selectedRole !== undefined || newData.selectedEndpoint !== undefined) {
			urlSeg = this._applyNewSecurity(isEndpointChanged && newData.selectedEndpoint);
		}
		if ($resetConnection || isSelectedLocalChanged || isRoleChanged || isEndpointChanged) {
			this.toggle(false);
			if ($resetConnection || isSelectedLocalChanged) {
				setTimeout(function() {
					syra_url.history.reloadSite();
				}, 10);
			} else {
				if (isRoleChanged) {
					syra_url.history.changeMainPage();
				} else {
					if (isEndpointChanged) {
						this.applicationConnection && this.applicationConnection.dispose();
						this.applicationConnection = new ApplicationConnection();
						syra_site.devToolsPanelonChangeEP && syra_site.devToolsPanelonChangeEP(newData.selectedEndpoint);
						syra_site.removeBookmarks();
						if (urlSeg && urlSeg.isFusion) {
							syra_url.history.load({
								$url: urlSeg.$url
							});
						} else {
							syra_menus.click.home();
						}
					}
				}
			}
		}
		if (!this.onLogonProcessing) {
			this.applicationConnection.applyChange(newData);
		}
		newData.selectedEndpoint && this.showNature();
	},
	_applyNewSecurity: function(newEndpoint) {
		var urlSeg;
		syra_site.$prototype.$role = this.selectedRoleUiid = (this.dataset.selectedRole && this.dataset.selectedRole.$uuid) || null;
		this.selectedEndpointUiid = (this.dataset.selectedEndpoint && this.dataset.selectedEndpoint.$uuid) || null;
		this.setEncodedValue();
		syra_quality.logUserProfile();

		var page = syra_site.mainPage;
		if (page && !page.disposed) {
			urlSeg = page.urlSeg;
			if (urlSeg) {
				(urlSeg.params = urlSeg.params || {}).profile = syra_site.$prototype.$userprofile;
				if (newEndpoint) {
					//temp waiting good endpoint update
					if (this.dataset.selectedEndpoint !== undefined) {
						syra_url.replaceSegmentEndpoint(urlSeg, this.dataset.selectedEndpoint);
					}
				}
				syra_url.build(urlSeg);
				syra_url.history.update(page, urlSeg.$url);
			}
			syra_site.refreshMainPageSecurity(page);

		} else {
			if (newEndpoint) {
				urlSeg = syra_url.history.getUrlSegment();
				if (urlSeg.endpoint) {
					syra_url.replaceSegmentEndpoint(urlSeg, newEndpoint);
				}
			}
		}
		return urlSeg;
	},

	setSecurityToRepresentation: function($representation) {
		if (this.dataset.selectedRole) {
			$representation.$prototype.$role = this.dataset.selectedRole.$uuid; //important for url 
		}
		$representation.$prototype.$userprofile = this.getEncodedValue();
	},
	setEncodedValue: function() {
		var value = {
			loc: this.currentLangCode
		};
		if (this.selectedRoleUiid) {
			value.role = this.selectedRoleUiid;
		}
		if (this.selectedEndpointUiid) {
			value.ep = this.selectedEndpointUiid;
		}
		syra_site.$prototype.$userprofile = _jsurl.stringify(value);
	},
	getEncodedValue: function() {
		return syra_site.$prototype.$userprofile || "";
	},
	getSelectedRole: function() {
		return this.dataset.selectedRole;
	},
	getSelectedEndpoint: function() {
		return this.dataset.selectedEndpoint;
	},
	getRetryOnError: function() {
		return this.dataset.retryOnError || 3;
	},
	getServerSessionTimeOut: function() {
		return (this.dataset.sessionTimeout || 2) * 60 * 1000; // converting minutes into milliseconds
		//return 186000; // 3.1 minutes for test
	},
	getCurrencyDisplay: function() {
		return this.dataset.currencyDisplay || "symbol";
	},
	getUnitDisplay: function() {
		return this.dataset.unitDisplay || "symbol";
	},
	getCurrencyPosition: function() {
		return this.dataset.currencyPosition || "right";
	},
	buildWCContent: function() {
		var dd = this.dataset || {};
		return ["selectedEndpoint", "selectedRole", "selectedLocale"].reduce(function(prev, item) {
			var val = dd[item];
			prev[item] = (val && val.$uuid) ? {
				$uuid: val.$uuid
			} : null;
			return prev;
		}, {
			$etag: dd.$etag
		});
	},
	addOpener: function(slot) {
		var self = this;
		self.openerBtn = syra_button.add({
			parent: syra_site,
			slot: slot,
			iconOnly: true,
			text: syra_local.site_btn_opener,
			css: "s-profile-opener",
			click: function() {
				self.toggle(true);
			}
		});
		var roleItem = self.addItem(slot, {
			$summary: {
				$details: syra_local.userProfile_role_details
			},
			$isEditMode: true,
			$contentEditable: true,
			$isReadOnly: true,
			$isPickerHidden: true,
			$coreId: true,
			$inplace: true,
			$isShortcutDisabled: true,
			$isHidden: syra_site.$isUserEndpointChangeDisabled,
			$isReferenceTitleVisible: false,
			$skin: "s-profile-rights",
			$bind: "selectedRole"
		});

		roleItem.input.syraShortCutTitle = syra_local.userProfile_selectedRole;
		roleItem.input.syraShortCutTip = roleItem.picker_$lookup.link.syraShortCutTip;
		roleItem.picker_$lookup.link.title = "";
		roleItem.focus = function() {};

		var endpointItem = self.addItem(slot, {
			$summary: {
				$details: syra_local.userProfile_endpoint_details
			},
			$isEditMode: true,
			$contentEditable: true,
			$isReadOnly: true,
			$isPickerHidden: true,
			$coreId: true,
			$inplace: true,
			$isShortcutDisabled: true,
			$isReferenceTitleVisible: false,
			$skin: "s-profile-rights",
			$bind: "selectedEndpoint"
		});

		endpointItem.input.syraShortCutTitle = syra_local.userProfile_selectedEndpoint;
		endpointItem.input.syraShortCutTip = endpointItem.picker_$lookup.link.syraShortCutTip;
		endpointItem.picker_$lookup.link.title = "";
		endpointItem.focus = function() {};
		this.showNature();
	},
	addTopList: function() {
		var self = this;
		var list = new List({
			css: "s-list-primary",
			parentNode: self.domItem
		});
		list.addButton({
			parent: self,
			text: syra_local.site_btn_profile,
			css: "s-list-primary-btn-primary",
			click: function() {
				syra_router.executeMenu({
					$url: self.dataset.user.$url
				}, syra_site);
			}
		});

		list.addItem(self, {
			$summary: {
				$details: syra_local.userProfile_locale_details
			},
			$openBy: "over",
			$isEditMode: true,
			$setValue: function(value) {
				syra_dom.remove(this._core);
				if (!this.templateValue) {
					this.templateValue = syra_dom.span("s-profile-field-value", this.domItem);
				}
				var value = this.articleParent.dataset.selectedLocale;
				value = value && value.code;
				if (value) {
					syra_dom.hide(this.templateValue, false);
					this.templateValue.textContent = "(" + value + ")";
				} else {
					syra_dom.hide(this.templateValue, true);
				}
				this.picker_$lookup && this.domItem.appendChild(this.picker_$lookup.link);
			},
			$picker: "field",
			$isShortcutDisabled: true,
			$skin: "s-profile-field",
			$bind: "selectedLocale",
			$popupRight: true,
			$title: syra_local.userProfile_locale
		}, "s-list-primary-top-sep");
		self.themeField = new syra_style.Theme(self, list.addLine("s-list-primary-bottom-sep"));
		self.lists.push(list);
	},
	addMiddleList: function() {
		var self = this;
		var list = new List({
			css: "s-list-primary",
			parentNode: self.domItem,
			scroll: true
		});

		syra_site.$prototype.$links = syra_site.$prototype.$links || {};
		syra_site.$menus = syra_site.$menus || {};
		for (var ii = 0, jj = syra_config.$tecnhicalLinks.length; ii < jj; ii++) {
			var $link = syra_config.$tecnhicalLinks[ii];
			if (syra_site.isTabletDevice && !$link.tablet) {
				continue;
			}
			if (!syra_context.developpementMode && $link.developpementMode) {
				continue;
			}
			$link.$title = syra_local["site_tech_link_" + $link.$bind] || $link.$title;
			syra_site.$menus[$link.$bind] = syra_site.$prototype.$links[$link.$bind] = $link;
			list.addItem(syra_site, {
				$category: "link",
				$skin: "s-list-primary-btn-default",
				$bind: $link.$bind
			});
		}
		self.lists.push(list);
	},
	addBottomList: function() {
		var self = this;
		var list = new List({
			css: "s-list-primary",
			parentNode: self.domItem
		});
		self.logoutBtn = list.addButton({
			parent: self,
			text: syra_local.site_btn_logout,
			css: "s-list-primary-btn-primary",
			click: function() {
				syra_site.logout();
			}
		}, "s-list-primary-top-sep");
		self.lists.push(list);
	},

	toggle: function(show, event) {
		var self = this;
		if (self.openerBtn) {
			if (show && !self._popup) {
				if (!self.lists) {
					self.lists = [];
					self.addTopList();
					self.domItem.appendChild(self.applicationConnectionSlot);
					self.addMiddleList();
					self.addBottomList();
				}
				self._popup = syra_over.openPopup(syra_site, {
					slot: self.domItem,
					picker: self.openerBtn.link,
					position: {
						my: "right top",
						at: "right bottom",
						of: self.openerBtn.link
					},
					onresize: function(maxHeight) {
						if (self.lists) {
							var height = self.applicationConnection.resize();
							self.lists[1].resize(maxHeight - self.lists[0].scrollSlot.clientHeight - height - self.lists[2].scrollSlot.clientHeight);

						}
					},
					close: function() {
						setTimeout(function() {
							self._popup = null;
						}, 200);
					}
				});
				self.lists[1].hide(syra_fusion && syra_fusion.activatedBook);
				syra_quality.page_onAfterLoad(self);
				self.resizeItem();
			} else {
				if (self._popup) {
					self._popup.close();
				}
			}
		}
	},
	showIdentity: function() {
		if (this.openerBtn) {
			if (this.dataset.user) {
				syra_dom.empty(this.openerBtn.link);
				if (this.dataset.user.photo) {
					this.addItem(syra_dom.div(), {
						imageArea: syra_dom.span("s-profile-photo", this.openerBtn.link),
						$skin: "s-profile-photo",
						$inplace: true,
						$imageWidth: " ",
						$imageHeight: " ",
						$bind: "photo",
						$category: "field",
						$field: {
							$type: "image"
						}
					}).setValue({
						$url: syra_expression.parse(this, this.dataset.user.photo.$url || "{$shortUrl}/photo", {
							$shortUrl: this.dataset.user.$shortUrl
						})
					});
				} else {
					syra_dom.span("s-profile-photo-no", this.openerBtn.link);
				}
				syra_dom.span("s-profile-name", this.openerBtn.link).textContent = (this.dataset.user.firstName ? this.dataset.user.firstName + " " : "") + (this.dataset.user.lastName ? this.dataset.user.lastName : "");
			}
		}!syra_site.$isSocketIODisabled && _showExtensions(this);
	},
	showNature: function() {
		var endpoint = this.dataset.selectedEndpoint;
		if (this.boundFields.selectedEndpoint) {
			if (endpoint && endpoint.nature) {
				syra_dom.remove(this.natureFlag);
				var field = this.boundFields.selectedEndpoint[0];
				field._core.insertBefore(this.natureFlag = syra_dom.div("s-security-edp-nature s-nature-" + endpoint.nature), field._core.firstChild);
			} else {
				syra_dom.remove(this.natureFlag);
				delete this.natureFlag;
			}
		}
	},
	dispose: function() {
		this.applicationConnection && this.applicationConnection.dispose();
		this.themeField && this.themeField.dispose();
		if (this.lists) {
			for (var ii = 0, jj = this.lists.length; ii < jj; ii++) {
				this.lists[ii].dispose();
			}
		}
		DesktopPage.prototype.dispose.call(this);
	}
});

function _showExtensions(profile) {
	if (profile.dataset.shellWidgets) {
		var index = 0;
		var errors = [];

		function loadRemaining() {
			if (index === profile.dataset.shellWidgets.length) {
				if (errors.length > 0)
					syra_alert.error(errors);
				return;
			}
			var widget = profile.dataset.shellWidgets[index++];
			require.async(widget.module, function(err, api) {
				if (err) {
					errors.push({
						$message: err.message,
						$stackTrace: err.stack
					});
					return loadRemaining();
				}

				var div = document.createElement("div");
				// TODO: review this hack to get calc popup on top of buttons
				$('#s-header').css({
					'z-index': 1
				});
				// TODO: review style and DOM insertion with Daniel
				$(div).css({
					display: 'inline-block',
					padding: '0 10pt',
				}).attr("id", widget.module);
				//this.openerBtn.slot.appendChild(div);
				api.create({
					div: div,
					registerSocket: function(namespace, events) {
						return syra_site.socketHandler.register(namespace, events);
					},
					sessionInfo: {
						user: {
							$uuid: profile.dataset.user.$uuid
						},
						selectedEndpoint: function() {
							var ep = profile.dataset.selectedEndpoint;
							return {
								baseUrl: ["/sdata", ep.application, ep.contract, ep.dataset].join("/")
							};
						}
					},
					menus: profile.$menus
				});
				loadRemaining();
			});
		}
		loadRemaining();
	}
}