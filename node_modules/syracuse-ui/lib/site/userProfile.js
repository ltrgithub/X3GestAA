"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require("syracuse-ui/lib/page/rawPage").RawPage;
var _date = require('syracuse-core/lib/types/date');

var disconnectUtils = require('./disconnectUtils');
var _unloadActionProperties = ["donotuse", "selectedLocale", "selectedRole", "selectedEndpoint"];

function UserProfile() {

}

exports.UserProfile = helpers.defineClass(UserProfile, RawPage, {
	dispose: function() {
		if (!this.saveSiteTimeout) {
			clearTimeout(this.saveSiteTimeout);
		}
		this.saveSiteTimeout = this.formBlock = null;
		RawPage.prototype.dispose.call(this);
	},
	getAuthoringLevel: function() {
		return (this.dataset ? this.dataset.authoringLevel : null) || "none";
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$subRecordKey == "user") {
			menuItem.$target = "blank";
		}
		return true;
	},
	onNotifyDataChange: function(field, value) {
		var self = this;
		if (_unloadActionProperties.indexOf(field.$item.$bind)) {
			disconnectUtils.onUserActionUnload(function() {
				self.notifyDataChange(field, value);
			}, function() {
				if (self.oldValue) {
					field.setDataValue(self.oldValue);
				}

			}, field.$item.$bind);
			return false;
		}
		return true;
	},
	onClickPicker: function(btn, event) {
		var field = syra_site.findField(event.target);
		if (field && field.$item && _unloadActionProperties.indexOf(field.$item.$bind)) {
			this.oldValue = helpers.object.clone(field.currentValue);
		}
		return true;
	},
	getRegionalPreferences: function(success) {
		this.ensureFormBlock();
		syra_controller.sendRequest(this, {
			$location: {
				$url: syra_site.expressionMaker.parse(this, this.boundFields.selectedLocale[0].getLookupSettings().$url)
			}
		}, function(data) {
			success(data && data.$resources);
		});
	},
	ensureFormBlock: function() {
		var self = this;
		if (!self.formBlock) {
			self.formBlock = self.loadNewItem(self.domItem, {
				$category: "section",
				$title: syra_site.localize.userProfile_up_welcome,
				$skin: "s-user-form",
				$layout: {
					$items: [{
						$bind: "$save",
						$category: "link",
						$isHidden: true,
						onServerRequest: function(menu) {
							//this is item menu
							if (menu.$links && menu.$links.$location) {
								var currentPage = menu.boxParent.getArticle();
								if (self.dataset && self.dataset.selectedRole) {
									self.$prototype.$role = self.dataset.selectedRole.$uuid; //important for url 
								}
							}
							return false;
						}
					}, {
						$isEditMode: true,
						$isHidden: syra_site.siteOptions.isUserEndpointChangeDisabled,
						$isTopLabelAlignment: false,
						$isReferenceTitleVisible: false,
						$skin: "s-user-profile-ref",
						$css: "s-user-profile-selectedRole",
						$bind: "selectedRole",
						$title: syra_site.localize.userProfile_up_role
					}, {
						$isEditMode: true,
						$isTopLabelAlignment: false,
						$skin: "s-user-profile-ref",
						$isReferenceTitleVisible: false,
						$css: "s-user-profile-selectedEndpoint",
						$bind: "selectedEndpoint",
						$title: syra_site.localize.userProfile_up_endpoint
					}, {
						$isEditMode: true,
						$isTopLabelAlignment: false,
						$skin: "s-user-profile-ref",
						$isReferenceTitleVisible: false,
						$css: "s-user-profile-selectedLocale",
						$bind: "selectedLocale",
						$title: syra_site.localize.userProfile_up_locale
					}]
				}
			});
			self.isPageLoaded = true;
		}
	},
	loadBox: function(initData, $initDiagnoses) {
		// adding selectedLocale into dom for test purposes
		if (initData && initData.selectedLocale) {
			syra_site.body.setAttribute('data-s-q-local', initData.selectedLocale.$value);
		}
		this.$prototype.$properties.$fieldSelectEndPoint = {
			$type: "application/x-choice",
			$value: {
				$type: "application/x-integer",
				$enum: []
			}
		};
		RawPage.prototype.loadBox.call(this, initData, $initDiagnoses);
	},
	drawBox: function() {
		this.externalAdapter = syra_site.externalAdapter;
		this.domItem = document.createElement("div");
		this.domItem.id = "s-user-profile";
	},
	showDiagnoses: function(message) {
		// display user profile errors in popup ???
		if (message.$diagnoses && Object.keys(message.$diagnoses).length > 0) {
			var options = {};
			var onlyOneDiagnose = message.$diagnoses.length == 1;
			options.$message = syra_site.localize.userProfile_siteMsgboxMsg;
			options.$type = "alert";
			options.$buttons = "ok";
			options.$title = syra_site.localize.userProfile_upDiagMsgboxTitle;
			options.$diagnoses = message.$diagnoses;
			options.$origin = onlyOneDiagnose ? message.$diagnoses[0].$origin : "";
			syra_site.showMessage(options);
		}
	},
	notifyDataChange: function(field, value) {
		this.notifyActionChange(null, this, {
			$save: {
				$isRequested: true
			}
		}, false);
		RawPage.prototype.notifyDataChange.call(this, field, value);
	},
	saveSitePreferences: function() {
		var self = this;
		if (!self.saveSiteTimeout) {
			self.saveSiteTimeout = setTimeout(function() {
				self.saveSiteTimeout = null;
				self.ensureSendBag().sitePreferences = self.dataset.sitePreferences;
				self.notifyActionChange(null, self, {
					$save: {
						$isRequested: true
					}
				}, true);
			}, 3000);
		}
	},
	applyChange: function(newData) {
		var reloadMainPage, changeEndpoint;
		var isFusionPage = syra_site.mainPage && syra_site.mainPage.isFusionPage;
		// refresh page when user changes locale
		var selectedLocale = this.getSelectedLocale();
		var hasLocalizationChanged;
		if (newData && newData.serverETag !== null && module.etag != newData.serverETag) {
			hasLocalizationChanged = true;
		} else {
			if (Object.keys(this.dataset).length > 0) {
				if (selectedLocale && newData.selectedLocale && JSON.stringify(selectedLocale) != JSON.stringify(newData.selectedLocale)) {
					hasLocalizationChanged = true;
				}
			}
		}
		if (hasLocalizationChanged) {
			setTimeout(function() {
				document.location.reload(true);
			}, 10);
		} else {
			if (Object.keys(this.dataset).length > 0) {
				if (this.selectedEndpointUiid && newData.selectedEndpoint) {
					changeEndpoint = this.selectedEndpointUiid != newData.selectedEndpoint.$uuid;
				} else {
					reloadMainPage = this.selectedEndpointUiid || newData.selectedEndpoint;
				}
				if (!reloadMainPage) {
					if (this.selectedRoleUiid && newData.selectedRole) {
						reloadMainPage = this.selectedRoleUiid != newData.selectedRole.$uuid;
					} else {
						reloadMainPage = this.selectedRoleUiid || newData.selectedRole;
					}
				}
			}
			if (newData.selectedRole !== undefined) {
				this.selectedRoleUiid = newData.selectedRole === null ? null : newData.selectedRole.$uuid;
			}
			if (newData.selectedEndpoint !== undefined) {
				this.selectedEndpointUiid = newData.selectedEndpoint === null ? null : newData.selectedEndpoint.$uuid;
			}

			if (newData && newData.selectedRole) {
				syra_site.$prototype.$role = newData.selectedRole.$uuid;
			}

			syra_site.siteFunctions.showUserIdentity(this, newData);


			RawPage.prototype.applyChange.call(this, newData);

			syra_site.onUserProfileChange(reloadMainPage);

			if (changeEndpoint && !reloadMainPage) {
				if (syra_site.bookmarksManager) {
					syra_site.bookmarksManager.refresh();
				}
				var url = syra_site.history.getCurrentSdataUrl();
				if (syra_site.urlMaker.parse(url).isFusion) {
					syra_site.history.updateCurrentEndpoint(newData.selectedEndpoint);
				} else {
					syra_site.gotoNavigationPage();
				}
			}
		}
	},
	getDataset: function() {
		return (this.dataset = this.dataset || {});
	},
	getSelectedLocale: function() {
		return this.getDataset().selectedLocale || {};
	},
	getSelectedEndpointString: function() {
		var endpoint = this.dataset ? this.dataset.selectedEndpoint : null;
		return endpoint ? (endpoint.application + "." + endpoint.contract + "." + endpoint.dataset) : null;
	},
	getDateFormat: function(displayFormat) {
		var selectedLocale = this.getSelectedLocale();
		return displayFormat == "DD" ? (selectedLocale.longDate || "dd MMMM yyyy") : (selectedLocale.shortDate || "yyyy-MM-dd");
	},
	getTimeFormat: function(displayFormat) {
		var selectedLocale = this.getSelectedLocale();
		return displayFormat == "TT" ? (selectedLocale.longTime || "HH:mm:ss") : (selectedLocale.shortTime || "HH:mm");
	},
	getDatetimeFormat: function(displayFormat) {
		var selectedLocale = this.getSelectedLocale();
		var format;
		switch (displayFormat) {
			case "F":
				// sortable datetime format
				format = _date.resources().formatPatterns ? _date.resources().formatPatterns["sortableDateTime"] : "yyyy-MM-ddTHH:mm:ss";
				break;
			case "FF":
				// full datetime format
				format = selectedLocale.selectedLocale.longDatetime || (_date.resources().formatPatterns ? _date.resources().formatPatterns["fullDateTime"] : "dd MMMM yyyy HH:mm:ss");
				break;
			case "U":
				// universal sortable datetime format
				format = _date.resources().formatPatterns ? _date.resources().formatPatterns["universalSortableDateTime"] : "yyyy-MM-dd HH:mm:ssZ";
				break;
			default:
				// datetime default format is dateformat + space + timeformat
				format = selectedLocale.shortDatetime || (this.getDateFormat() + " " + this.getTimeFormat());
		}
		return format;
	},
	getNumberFormatObj: function(type) {
		var selectedLocale = this.getSelectedLocale();
		var f = "#,";
		var numberGroupSize = selectedLocale.numberGroupSize || "3";
		for (var i = 0; i < numberGroupSize; i++) {
			f += (i == numberGroupSize - 1) ? "0" : "#";
		}
		f += type == "application/x-integer" ? '' : '.##';
		// numFormat default -> #,##0 (integer) or #,##0.## (decimal)
		return {
			numFormat: f,
			decimalSeparator: selectedLocale.numberDecimalSeparator || ".",
			groupSeparator: selectedLocale.numberGroupSeparator || ",",
			groupSize: numberGroupSize
		};
	},
	getNumberFormat: function(type) {
		return this.getNumberFormatObj(type).numFormat;
	},
	getTwoDigitYearMax: function() {
		return this.getSelectedLocale().twoDigitYearMax || 2029;
	},
	getServerSessionTimeOut: function() {
		return (this.dataset ? this.dataset.sessionTimeout : 2) * 60 * 1000; // converting minutes into milliseconds
		//return 186000; // 3.1 minutes for test
	},
	getCurrencyDisplay: function() {
		return this.getDataset().currencyDisplay || "symbol";
	},
	getUnitDisplay: function() {
		return this.getDataset().unitDisplay || "symbol";
	},
	getCurrencyPosition: function() {
		return this.getDataset().currencyPosition || "right";
	},
	buildWCContent: function() {
		var dd = this.dataset || {};
		return ["selectedEndpoint", "selectedRole", "selectedLocale"].reduce(function(prev, item) {
			var val = dd[item];
			prev[item] = (val && val.$uuid) ? {
				$uuid: val.$uuid
			} : null;
			return prev;
		}, {
			$etag: dd.$etag
		});
	}
});