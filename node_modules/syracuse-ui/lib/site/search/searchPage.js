"use strict";
var helpers = require("syracuse-core/lib/helpers")
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;


function SearchPage(){
}

exports.SearchPage = helpers.defineClass(SearchPage, DesktopPage, {
    fetch: function(options){
        var self = this;
        
        var $queryFunctionsLink = {
            $url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}&source=functions"
        };
        var $queryDataLink = {
            $url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}&source=data"
        }
        self.dataset.$search = self.$urlParts.params.q;
        
        var options = options || {}
        
        // filtering only for data
        if (!options.jsonParams) {
            self.formatMenuUrl($queryFunctionsLink, self.dataset, function($url, isCanceled){
                options.$location = {
                    $url: $url
                };
                document.controller.sendRequest(self, options, function(data){
                    data.$itemsPerPage = 5;
                    data.$queryFunctions = data.$resources;
                    delete data.$resources;
                    self.applyChange(data);
                });
            });
        }
        
        self.formatMenuUrl($queryDataLink, self.dataset, function($url, isCanceled){
            options.$location = {
                $url: $url
            };
            document.controller.sendRequest(self, options, function(data){
                data.$itemsPerPage = 5;
                data.$queryData = data.$resources;
                delete data.$resources;
                self.applyChange(data);
            });
        });
    },
    bind: function(item, $bind){
        (this.boundFields[$bind] = this.boundFields[$bind] || []).push(item);
        var dataset, fieldMetadata;
        if (this.$syraLoaded) {
            dataset = this.dataset;
            if (dataset.$properties) 
                fieldMetadata = dataset.$properties[$bind];
        }
        else {
            dataset = this.$prototype; //default value
        }
        item.setDataBind(dataset[$bind], dataset, fieldMetadata);
    }
    /*,
     _ensureMenus: function(){
     if (this.$pageCategory == "vignette") {
     if (this.$facet != "$menu") {
     RawPage.prototype.appendArticleMenus.call(this);
     }
     }
     else {
     this.menuBar = new MenuBar();
     this.menuBar.load(this);
     }
     if (this.menuBar && this.menuBar._bar && this.$isSearchFacetEnabled) {
     this.loadNewItem($(this.menuBar._bar), {
     $category: "searchFacets",
     $prototype: {},
     $bind: "$searchFacets"
     });
     }
     }*/
});
