"use strict";
var helpers = require("syracuse-core/lib/helpers");
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var MenuBar = require('syracuse-ui/lib/page/bar/menuBar').MenuBar;

function SearchPage() {}

exports.SearchPage = helpers.defineClass(SearchPage, DesktopPage, {
	fetch: function(options) {
		var $queryFunctionsLink = {
			$url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}&source=functions"
		};
		var $queryDataLink = {
			$url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}&source=data"
		};
		this.dataset.$search = this.$urlParts.params.q;

		// no options. simple request
		if (!options || Object.keys(options).length == 0) {
			var options = {};
			this._sendAllSearchRequests($queryFunctionsLink, $queryDataLink, this.dataset, options);
		}

		// options
		else {
			// filtering /!\ on data result only
			if (options.jsonParams) {
				this._sendOneSearchRequest($queryDataLink, this.dataset, options, true);
			}
			// pager step navigation (pagination)
			else {
				if (options.$location) {
					var isDataSource = options.$location.$url.indexOf("source=data") != -1 ? true : false;
					var $location = isDataSource ? $queryDataLink : $queryFunctionsLink;
					this._sendOneSearchRequest($location, this.dataset, options, isDataSource);
				}
				// others (simple pager navigation) (pagination)
				// get corresponding tab information, update content accordingly
				else {
					if (options.field && options.field.$item && options.field.$item.$bind) {
						options.jsonParams = this.jsonParams;
						var isDataSource = options.field.$item.$bind == "$queryData" ? true : false;
						this._sendOneSearchRequest(isDataSource ? $queryDataLink : $queryFunctionsLink, this.dataset, options, isDataSource);
					} else {
						// in order to handle navigation issues (prev/next) issue #2824
						if (this.$urlParts.params.source) {
							options.params = {
								count: this.$urlParts.params.count,
								startIndex: this.$urlParts.params.startIndex
							};
						}
						this._sendAllSearchRequests($queryFunctionsLink, $queryDataLink, this.dataset, options);
					}
				}
			}
		}
	},
	_sendOneSearchRequest: function($query, dataset, options, isDataSource, selectTab) {
		var self = this;
		self.formatMenuUrl($query, dataset, function($url, isCanceled) {
			options.$location = options.$location || {
				$url: $url
			};
			document.controller.sendRequest(self, options, function(data) {
				data[isDataSource ? "$queryData" : "$queryFunctions"] = data.$resources;
				data.$searchFacets = isDataSource ? data.$searchFacets : self.dataset.$searchFacets; // no search facet for 'functions' results
				delete data.$resources;
				self._updateTabTitle(isDataSource, data.$totalResults, selectTab);
				self.applyChange(data);
				if (selectTab) {
					self.idMap[selectTab == "data" ? "searchDataTab" : "searchFunctionsTab"].tabTitle.click();
				}
				document.site.updateDocumentTitle();
			});
		});
	},
	_sendAllSearchRequests: function($functionsQuery, $dataQuery, dataset, options) {
		var self = this;

		// to handle navigation (prev/next) issues.
		var functionsSourceOptions = helpers.object.clone(options);
		var dataSourceOptions = helpers.object.clone(options);
		// remove params unecessary for appropriate source
		if (self.$urlParts.params.source) {
			if (self.$urlParts.params.source == 'data') {
				delete functionsSourceOptions.params;
			} else {
				delete dataSourceOptions.params;
			}
		}
		self._sendOneSearchRequest($functionsQuery, dataset, functionsSourceOptions, false, self.$urlParts.params.source);
		self._sendOneSearchRequest($dataQuery, dataset, dataSourceOptions, true, self.$urlParts.params.source);
	},
	_updateTabTitle: function(isData, recordsNb) {
		var localize = document.site.localize;
		this.idMap[isData ? "searchDataTab" : "searchFunctionsTab"].setTitle((isData ? localize.searchDataTab : localize.searchFunctionsTab) + " (" + recordsNb + ")");
	},
	updateFilterState: function(options) {
		var self = this;
		self.jsonParams = options.jsonParams;
	},
	drawBox: function() {
		DesktopPage.prototype.drawBox.call(this);
		this._bindEvents(true);
	},
	_bindEvents: function(bind) {
		var self = this;
		if (self.$$item) {
			if (bind) {
				self.$$item.delegate(".s-search-res-carditem-body", "click", function() {
					if (!this.getAttribute("data-s-menu")) {
						var $$menu = $(this).find("a[data-s-menu]");
						// in case there is no "title" property in the record 
						if ($$menu.length == 0) {
							var article = document.controller.findArticle($(this));
							if (article && article.dataset && article.dataset.$url) {
								document.controller.executeMenu({
									$url: article.dataset.$url
								}, article, article);
							}
							//article.dataset && article.dataset.$url && window.open(article.dataset.$url, "_self");
						} else {
							var menu = document.controller.findMenu($$menu);
							if (menu && !menu.$isDisabled) {
								menu.click();
							}
						}
						return false;
					}
				});
			} else {
				self.$$item.undelegate();
			}
		}
	},
	_ensureMenus: function() {
		DesktopPage.prototype._ensureMenus.call(this);
		if (this.menuBar._bar) {
			this.loadNewItem(this.menuBar._bar, {
				$category: "searchFacets",
				$prototype: {},
				$bind: "$searchFacets"
			});
		}
	},
	dispose: function() {
		this._bindEvents(false);
		DesktopPage.prototype.dispose.call(this);
	}
});