"use strict";
var helpers = require("syracuse-core/lib/helpers");
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var MenuBar = require('syracuse-ui/lib/page/bar/menuBar').MenuBar;
var searchUtils = require('./searchUtils');

function SearchPage() {}

exports.SearchPage = helpers.defineClass(SearchPage, DesktopPage, {

	onMenuClick: function(menu) {
		switch (menu.$bind) {
			case "$searchStartingWith":
			case "$searchContaining":
			case "$searchSimilar":
				this.searchMode = menu.$bind;
				this._sendOneSearchRequest(this.dataset, {});
				this._sendOneSearchRequest(this.dataset, {}, true);
				return false;
			default:
				return true;
		}
	},
	fetch: function(options) {
		this.dataset.$search = this.$urlParts.params.q;

		// no options. simple request
		if (!options || Object.keys(options).length == 0) {
			var options = {};
			this._sendAllSearchRequests(this.dataset, options);
		}

		// options
		else {
			// filtering /!\ on data result only
			if (options.jsonParams) {
				this._sendOneSearchRequest(this.dataset, options, true);
			}
			// pager step navigation (pagination)
			else {
				if (options.$location) {
					var isDataSource = options.$location.$url.indexOf("source=data") != -1 ? true : false;
					var $location = isDataSource ? $queryDataLink : $queryFunctionsLink;
					this._sendOneSearchRequest(this.dataset, options, isDataSource);
				}
				// others (simple pager navigation) (pagination)
				// get corresponding tab information, update content accordingly
				else {
					if (options.field && options.field.$item && options.field.$item.$bind) {
						options.jsonParams = this.jsonParams;
						var isDataSource = options.field.$item.$bind == "$queryData" ? true : false;
						this._sendOneSearchRequest(this.dataset, options, isDataSource);
					} else {
						// in order to handle navigation issues (prev/next) issue #2824
						if (this.$urlParts.params.source) {
							options.params = {
								count: this.$urlParts.params.count,
								startIndex: this.$urlParts.params.startIndex
							};
						}
						this._sendAllSearchRequests(this.dataset, options);
					}
				}
			}
		}
	},
	_sendOneSearchRequest: function(dataset, options, isDataSource, selectTab) {
		var self = this;
		var $query = {
			$url: searchUtils.getSearchModeLinks()[this._getSearchMode()].$url + (isDataSource ? "&source=data" : "&source=functions")
		};
		self._updateSearchModeLabels(isDataSource);
		self.formatMenuUrl($query, dataset, function($url, isCanceled) {
			options.$location = options.$location || {
				$url: $url
			};

			if (!self.isMultiQuery) {
				options.$updateHitory = true;
			}

			document.controller.sendRequest(self, options, function(data) {
				// apply search page data
				var searchPageData = {};
				searchPageData.query = data.query;
				self.applyChange({
					query: data.query,
					$searchFacets: isDataSource ? data.$searchFacets : self.dataset.$searchFacets // no search facet for 'functions' results
				});

				// apply vignette pages data (the tabs)
				data[isDataSource ? "$queryData" : "$queryFunctions"] = data.$resources;
				delete data.$resources;

				// update tab title
				self._updateTabTitle(isDataSource, data[isDataSource ? "$queryData" : "$queryFunctions"].length, selectTab);

				// append description data
				self._appendDescriptionData(data[isDataSource ? "$queryData" : "$queryFunctions"]);


				// update search result in each vignette (tab)
				self._updateSearchVignette(self, isDataSource, data);

				// activate appropriate tab if flag set
				if (selectTab) {
					self.idMap[selectTab == "data" ? "searchDataTab" : "searchFunctionsTab"].tabTitle.click();
				}
				self._displaySearchFacetsBar();
			});
		});
	},
	_updateSearchModeLabels: function(isDataSource) {
		var newData = {};

		// search mode description
		var searchMode = this._getSearchMode();
		var query = this.$urlParts.params.q;
		var searchModeDesc = searchUtils.getSearchModeLinks()[searchMode].$title.replace('{$search}', query);
		newData.$searchModeDescription = searchModeDesc;

		// search modes links
		newData.$links = {};
		var linksToUpdate = ["$searchStartingWith", "$searchContaining", "$searchSimilar"];
		for (var ii = 0, jj = linksToUpdate.length; ii < jj; ii++) {
			var mode = linksToUpdate[ii];
			newData.$links[mode] = {
				$title: searchUtils.getSearchModeLinks()[mode].$title.replace('{$search}', query)
			};
			newData.$links[mode].$isHidden = mode == searchMode;
		}

		// update
		this._updateSearchVignette(this, isDataSource, newData);
	},
	_updateSearchVignette: function(page, isDataSource, data) {
		if (isDataSource) {
			page.boundFields.$vignetteData[0].vignette.applyChange(data);
		} else {
			page.boundFields.$vignetteFunctions[0].vignette.applyChange(data);
		}
	},
	_getSearchMode: function() {
		return this.searchMode = this.searchMode || searchUtils.getInitSearchMode();
	},
	_getSearchModeDescription: function(mode, query) {
		return searchUtils.getSearchModeLinks()[mode].$title.replace('{$search}', query);
	},
	_displaySearchFacetsBar: function() {
		this.menuBar.isSlotVisible = true;
		if (!this.menuBar.page.designer) {
			if (this.boundFields.$searchFacets && this.boundFields.$searchFacets[0].hasFacet) {
				this.menuBar.barSlot.style.display = "";
				if (this.menuBar.page.layoutSlot.style.display != "none") {
					document.site.resize();
				}
			}
		}
	},
	_sendAllSearchRequests: function(dataset, options) {
		var self = this;
		self.isMultiQuery = true;
		// to handle navigation (prev/next) issues.
		var functionsSourceOptions = helpers.object.clone(options);
		var dataSourceOptions = helpers.object.clone(options);
		// remove params unecessary for appropriate source
		if (self.$urlParts.params.source) {
			if (self.$urlParts.params.source == 'data') {
				delete functionsSourceOptions.params;
			} else {
				delete dataSourceOptions.params;
			}
		}
		self._sendOneSearchRequest(dataset, functionsSourceOptions, false, self.$urlParts.params.source);
		self._sendOneSearchRequest(dataset, dataSourceOptions, true, self.$urlParts.params.source);
		self.isMultiQuery = false;
	},
	_appendDescriptionData: function($resources) {
		for (var ii = 0, jj = $resources.length; ii < jj; ii++) {
			$resources[ii].$descriptionData = [];
			if ($resources[ii].$properties) {
				this._appendDescription($resources[ii].$properties, $resources[ii], $resources[ii]);
			}
		}
	},
	_appendDescription: function($properties, recordData, parentRecordData) {
		var $binds = Object.keys($properties);
		for (var mm = 0, pp = $binds.length; mm < pp; mm++) {
			var property = $properties[$binds[mm]];
			if ((property.$isHighlight || property.$isSummary) && recordData[$binds[mm]]) {
				var propertyTitle = document.createElement("span");
				propertyTitle.className = 's-search-res-desc-title';
				propertyTitle.textContent = property.$title + ": ";
				var propertyValue = document.createElement("span");
				propertyValue.className = 's-search-res-desc-data';
				propertyValue.innerHTML = recordData[$binds[mm]];
				parentRecordData.$descriptionData.push(propertyTitle.outerHTML + propertyValue.outerHTML);
				//parentRecordData.$descriptionData.push(property.$title + ": " + recordData[$binds[mm]]);
			} else {
				if (property.$isHighlight == undefined) {
					this._appendDescription(property, recordData[$binds[mm]], parentRecordData);
				}
			}
		}
	},
	_updateTabTitle: function(isData, recordsNb) {
		var localize = document.site.localize;
		this.idMap[isData ? "searchDataTab" : "searchFunctionsTab"].setTitle((isData ? localize.searchDataTab : localize.searchFunctionsTab) + " (" + recordsNb + ")");
	},
	updateFilterState: function(options) {
		var self = this;
		self.jsonParams = options.jsonParams;
	},
	drawBox: function() {
		DesktopPage.prototype.drawBox.call(this);
		this._bindEvents(true);
	},
	_bindEvents: function(bind) {
		var self = this;
		if (self.$$item) {
			if (bind) {
				self.$$item.delegate(".s-search-res-carditem-body", "click", function() {
					if (!this.getAttribute("data-s-menu")) {
						var $$menu = $(this).find("a[data-s-menu]");
						// in case there is no "title" property in the record 
						if ($$menu.length == 0) {
							var article = document.site.findArticle(this);
							if (article && article.dataset && article.dataset.$url) {
								document.controller.executeMenu({
									$url: article.dataset.$url
								}, article, article);
							}
							//article.dataset && article.dataset.$url && window.open(article.dataset.$url, "_self");
						} else {
							var menu = document.site.findMenu($$menu[0]);
							if (menu && !menu.$isDisabled) {
								menu.click();
							}
						}
						return false;
					}
				});
			} else {
				self.$$item.undelegate();
			}
		}
	},
	_ensureMenus: function() {
		DesktopPage.prototype._ensureMenus.call(this);
		if (this.menuBar._bar) {
			this.loadNewItem(this.menuBar._bar, {
				$category: "searchFacets",
				$prototype: {},
				$bind: "$searchFacets"
			});
		}
	},
	dispose: function() {
		this._bindEvents(false);
		DesktopPage.prototype.dispose.call(this);
	}
});