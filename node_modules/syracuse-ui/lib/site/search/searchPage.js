"use strict";
var helpers = require("syracuse-core/lib/helpers")
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var MenuBar = require('syracuse-ui/lib/page/menuBar').MenuBar;

function SearchPage(){
}

exports.SearchPage = helpers.defineClass(SearchPage, DesktopPage, {
    fetch: function(options){
        var self = this;
        var $queryFunctionsLink = {
            $url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}&source=functions"
        };
        var $queryDataLink = {
            $url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}&source=data"
        }
        self.dataset.$search = self.$urlParts.params.q;
        
        // no options. simple request
        if (!options || Object.keys(options).length == 0) {
            var options = {};
            self._sendAllSearchRequests($queryFunctionsLink, $queryDataLink, self.dataset, options);
        }
        
        // options
        else {
            // filtering /!\ on data result only
            if (options.jsonParams) {
                self._sendOneSearchRequest($queryDataLink, self.dataset, options);
            }
            // pager step navigation (pagination)
            else {
                if (options.$location) {
                    var isFunctionsQuery = options.$location.$url.indexOf("source=functions") != -1 ? true : false;
                    var $location = isFunctionsQuery ? $queryFunctionsLink : $queryDataLink;
                    self._sendOneSearchRequest($location, self.dataset, options, isFunctionsQuery);
                }
                // others (simple pager navigation) (pagination)
                // get corresponding tab information, update content accordingly
                else {
                
                    if (options.field && options.field.boxParent.tabTitle) {
                        options.jsonParams = self.jsonParams;
                        var isFunctionsQuery = options.field.boxParent.tabTitle.textContent.toLowerCase() == "data" ? false : true;
                        self._sendOneSearchRequest(isFunctionsQuery ? $queryFunctionsLink : $queryDataLink, self.dataset, options, isFunctionsQuery);
                    }
                    else {
                        self._sendAllSearchRequests($queryFunctionsLink, $queryDataLink, self.dataset, options);
                    }
                }
            }
        }
    },
    _sendAllSearchRequests: function($functionsQuery, $dataQuery, dataset, options){
        var self = this;
        self.formatMenuUrl($functionsQuery, dataset, function($url, isCanceled){
            options.$location = {
                $url: $url
            };
            document.controller.sendRequest(self, options, function(data){
                //data.$itemsPerPage = 5;
                data.$queryFunctions = data.$resources;
                data.$searchFacets = null; // no search facet for 'functions' results
                delete data.$resources;
                self.applyChange(data);
            });
        });
        self.formatMenuUrl($dataQuery, dataset, function($url, isCanceled){
            options.$location = {
                $url: $url
            };
            document.controller.sendRequest(self, options, function(data){
                //data.$itemsPerPage = 5;
                data.$queryData = data.$resources;
                data.$searchFacets = data.$searchFacets;
                delete data.$resources;
                self.applyChange(data);
            });
        });
    },
    _sendOneSearchRequest: function($location, dataset, options, isFunctionsQuery){
        var self = this;
        self.isFunctionsQuery = isFunctionsQuery;
        
        self.formatMenuUrl($location, dataset, function($url, isCanceled){
            options.$location = options.$location ||
            {
                $url: $url
            };
            document.controller.sendRequest(self, options, function(data){
                //data.$itemsPerPage = 5;
                data[isFunctionsQuery ? "$queryFunctions" : "$queryData"] = data.$resources;
                data.$searchFacets = self.isFunctionsQuery ? null : data.$searchFacets; // no search facet for 'functions' results
                delete data.$resources;
                self.applyChange(data);
            });
        });
    },
    updateFilterState: function(options){
        var self = this;
        self.jsonParams = options.jsonParams;
    },
    drawBox: function(){
        DesktopPage.prototype.drawBox.call(this);
        this._bindEvents(true);
    },
    _bindEvents: function(bind){
        var self = this;
        if (self.$$item) {
            if (bind) {
                self.$$item.delegate(".s-search-res-record", "click", function(){
                    var $$menu = $(this).find("a[data-s-menu]");
                    var menu = document.controller.findItem($$menu);
                    if (menu && !menu.$isDisabled) {
                        menu.click();
                    }
                    return false;
                });
            }
            else {
                self.$$item.undelegate();
            }
        }
    },
    dispose: function(){
        this._bindEvents(false);
        DesktopPage.prototype.dispose.call(this);
    }
});
