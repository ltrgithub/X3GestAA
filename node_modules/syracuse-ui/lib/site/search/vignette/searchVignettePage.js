"use strict";
var helpers = require("syracuse-core/lib/helpers");
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var sampleData = require('./sampleDataResources');

function SearchVignettePage(){
}

exports.SearchVignettePage = helpers.defineClass(SearchVignettePage, DesktopPage, {
    fetch: function(options){
        if (options && options.isPageLoading) {
            options.method = "POST";
            DesktopPage.prototype.fetch.call(this, options);
        }
        else {
            var self = this;
            options.method = options.method || "GET";
            options.$location = options.$location ||
            {
                $url: this.requestUrlComplete
            };
            this.sendRequest(undefined, undefined, function(data){
                self._updatePage(data, true);
            }, options);
        }
    },
    _openPage: function(openerMenu){
        openerMenu.page.openDialog({
            article: openerMenu.page,
            $url: openerMenu.$url
        });
    },
    onErrorHandler: function(error){
        var $diagnoses;
        if (error.data.indexOf("$diagnoses") != -1) {
            $diagnoses = JSON.parse(error.data).$diagnoses;
        }
        else {
            $diagnoses = [{
                $severity: "error",
                $message: error.data
            }];
        }
        document.site.showDiagnoses({
            $diagnoses: $diagnoses
        });
    },
    sendRequest: function(method, url, onSuccess, options){
        var self = this;
        document.controller.sendRequest(this, options ||
        {
            method: method || "GET",
            $location: {
                $url: url
            }
        }, onSuccess, self.onErrorHandler);
    },
    getPrototype: function(){
        // adding prototype properties for search field and results page
        if (this.$prototype && this.$prototype.$properties) {
            this.$prototype.$properties.$searchVignetteField = {
                $type: "application/x-string",
                $title: "Search vignette"
            };
            this.$prototype.$properties.selectedEndpoint = this.$prototype.$properties.endpoint;
            this.$prototype.$properties.selectedVignettes = {
                $type: "application/x-array",
                $title: "Selected vignettes",
                $item: {
                    $type: "application/x-string"
                }
            };
            this.$prototype.$properties.$searchVignetteResult = {
                $type: "application/x-vignette",
                $format: "$page",
                $prototype: {
                    $properties: {
                        $searchResult: {
                            $type: "application/x-array",
                            $item: {
                                $type: "application/json",
                                $properties: {
                                    title: {
                                        $title: "Description",
                                        $type: "application/x-string",
                                        $format: "$html",
                                        $links: {
                                            $details: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    $article: {
                        $isTitleHidden: true,
                        $layout: {
                            $layoutType: "columns",
                            $widths: "100",
                            $items: [{
                                $items: [{
                                    $bind: "$searchResult",
                                    $isMenuRecordHidden: true,
                                    $noDataText: document.site.localize.search_no_res,
                                    $format: "cards",
                                    $layout: {
                                        $items: [{
                                            $bind: "title",
                                            $isTitleHidden: true,
                                            $skin: "s-sv-search-res-item"
                                        }]
                                    }
                                }]
                            }]
                        }
                    }
                }
            };
        };
        // adding links
        if (this.$prototype && this.$prototype.$links) {
            this.$prototype.$links.$back = {
                $title: "Back"
            };
        }
        
        return this.$prototype;
    },
	_setBackButtonPosition:function(){
		if(!this.isBackButtonPositionSet){
			this.headerCore.insertBefore(this.idMap["s-sv-back-link"].layoutSlot,this.headerCore.firstChild);
			this.isBackButtonPositionSet = true;
		}
	},
    onMenuClick: function(menu){
        /*menu.page.openDialog({
         article: menu.page,
         $url: menu.$url
         });*/
        var self = this;
        switch (menu.$bind) {
            case "requests":
            case "processes":
            case "stats":
            case "representation":
            case "extLink":
                self.selectedCategoryTitle = menu.$title;
                self.requestUrl = menu.$searchUrl || menu.$url;
                self.sendRequest(menu.$method, menu.$url, function(data){
                    self.selectedCategoryTitle = menu.$title;
                    self._updatePage(data);
                    self.idMap["s-sv-endpoint-section"].setState({
                        $isHidden: true
                    });
                    self.idMap["s-sv-category-section"].setState({
                        $isHidden: true
                    });
					self._setBackButtonPosition();
                });
                return false;
            case "$back":
                this.applyChange({
                    $links: {
                        $back: {
                            $isHidden: true
                        }
                    },
                    $properties: {
                        $searchVignetteField: {
                            $isHidden: true
                        },
                        selectedEndpoint: {
                            $isHidden: true
                        }
                    }
                });
                self.idMap["s-sv-endpoint-section"].setState({
                    $isHidden: false
                });
                self.idMap["s-sv-category-section"].setState({
                    $isHidden: false
                });
                self.idMap["s-sv-vignette-section"].setState({
                    $isHidden: true
                });
                self._updateBrowseViewDisplay();
                return false;
            default:
            //TODO complete with other menu cases
        }
        
        if (!menu.$bind && menu.$item && menu.$item.$bind == "$detail") {
            var key = menu.articleParent.dataset.$key;
            if ((this.selectedVignettes = this.selectedVignettes || {})[key]) {
                this._onVignetteRemove(key);
            }
            else {
                this._onVignetteAdd(menu.articleParent.dataset);
            }
        }
        return false;
    },
    onClickPicker: function(picker){
        var $bind = picker.getAttribute("data-s-picker");
        switch ($bind) {
            case "sv-module-picker":
                var modId = picker.getAttribute("sv-module-id");
                if (!this.selectedModId || (this.selectedModId != modId)) {
                    document.site.toggleClass(this.modulesLayoutHeader, "s-active", true);
                    document.site.toggleClass(this.categoriesLayoutHeader, "s-active");
                    document.site.toggleClass(this.vignettesLayoutHeader, "s-active");
                    // update selected css
                    if (this.selectedModId) {
                        document.site.toggleClass(this.selectedModLink, "s-selected");
                    }
                    document.site.toggleClass(picker, "s-selected", true);
                    this.selectedModId = modId;
                    this.selectedModLink = picker;
                    document.site.emptyDom(this.categoriesLayoutBody);
                    document.site.emptyDom(this.vignettesLayoutBody);
                    var categories = this.vignetteData.modules[modId].categories;
                    var catKeys = Object.keys(categories);
                    for (var ii = 0, jj = catKeys.length; ii < jj; ii++) {
                    
                        var categoryItemSlot = document.createElement("div");
                        categoryItemSlot.className = "s-sv-browse-category-item-slot";
                        this.categoriesLayoutBody.appendChild(categoryItemSlot);
                        
                        var categoryItem = document.createElement("a");
                        categoryItem.className = "s-sv-browse-category-item";
                        categoryItem.setAttribute("data-s-picker", "sv-category-picker");
                        categoryItem.setAttribute("sv-category-id", catKeys[ii]);
                        categoryItem.textContent = this.vignetteData.modules[modId].categories[catKeys[ii]].description;
                        categoryItemSlot.appendChild(categoryItem);
                    }
                }
                break;
            case "sv-category-picker":
                var catId = picker.getAttribute("sv-category-id");
                if (!this.selectedCatId || this.selectedCatId != catId) {
                    document.site.toggleClass(this.modulesLayoutHeader, "s-active");
                    document.site.toggleClass(this.categoriesLayoutHeader, "s-active", true);
                    // update selected css
                    if (this.selectedCatId) {
                        document.site.toggleClass(this.selectedCatLink, "s-selected");
                    }
                    document.site.toggleClass(picker, "s-selected", true);
                    this.selectedCatId = catId;
                    this.selectedCatLink = picker;
                    document.site.emptyDom(this.vignettesLayoutBody);
                    var vignettes = this.vignetteData.modules[this.selectedModId].categories[catId].$vignettes;
                    for (var ii = 0, jj = vignettes.length; ii < jj; ii++) {
                        var vignetteItemSlot = document.createElement("div");
                        vignetteItemSlot.className = "s-sv-browse-vignette-item-slot";
                        this.vignettesLayoutBody.appendChild(vignetteItemSlot);
                        
                        var vignetteItem = document.createElement("a");
                        vignetteItem.className = "s-sv-browse-vignette-item";
                        if (this.selectedVignettes && this.selectedVignettes[vignettes[ii].$key || vignettes[ii].$uuid]) {
                            document.site.toggleClass(vignetteItem, "s-selected", true);
                        }
                        vignetteItem.setAttribute("data-s-picker", "sv-vignette-picker");
                        vignetteItem.setAttribute("sv-vignette-id", vignettes[ii].$key || vignettes[ii].$uuid);
                        vignetteItem.textContent = vignettes[ii].title;
                        vignetteItemSlot.appendChild(vignetteItem);
                    }
                }
                break;
            case "sv-vignette-picker":
                document.site.toggleClass(this.modulesLayoutHeader, "s-active");
                document.site.toggleClass(this.categoriesLayoutHeader, "s-active");
                document.site.toggleClass(this.vignettesLayoutHeader, "s-active", true);
                var isSelected = picker.className.indexOf("s-selected") >= 0;
                document.site.toggleClass(picker, "s-selected", !isSelected);
                var vignetteId = picker.getAttribute("sv-vignette-id");
                if (!isSelected) {
                    var vignettes = this.vignetteData.modules[this.selectedModId].categories[this.selectedCatId].$vignettes;
                    for (var ii = 0, jj = vignettes.length; ii < jj; ii++) {
                        if ((vignettes[ii].$key || vignettes[ii].$uuid) == vignetteId) {
                            this._onVignetteAdd(vignettes[ii]);
                            break;
                        }
                    }
                }
                else {
                    this._onVignetteRemove(vignetteId);
                }
                break;
            case "sv-back":
                this.scrollview.removeChild(this.browseView);
                document.site.emptyDom(this.browseView);
                document.site.removeDomChild(this.browseView);
                this.scrollview.appendChild(this.body);
                break;
            default:
                return true;
        }
    },
    _onVignetteAdd: function(vignette){
        (this.selectedVignettes = this.selectedVignettes || {})[vignette.$key || vignette.$uuid] = vignette;
        if (!this.dialogWrapper.$$okBtn) {
            this.dialogWrapper.onValidate = function(page){
                //TODO
                debugger;
            };
            this.dialogWrapper._appendOkButton();
        }
        this._updateSelectedVignetteArray();
    },
    _onVignetteRemove: function(vignetteId){
        delete this.selectedVignettes[vignetteId];
        this._updateSelectedVignetteArray();
        if (this.dialogWrapper.$$okBtn && Object.keys(this.selectedVignettes).length == 0) {
            this.dialogWrapper.$$okBtn.unbind();
            this.dialogWrapper.$$okBtn.remove();
            delete this.dialogWrapper.$$okBtn;
        }
    },
    _updateSelectedVignetteArray: function(){
        var newArray = [];
        var uuids = Object.keys(this.selectedVignettes);
        for (var ii = 0, jj = uuids.length; ii < jj; ii++) {
            newArray.push(this.selectedVignettes[uuids[ii]].title);
        }
        this.applyChange({
            selectedVignettes: newArray
        });
    },
    onNotifyDataChange: function(field, value){
        var self = this;
        switch (field.$item.$bind) {
            case "$searchVignetteField":
                if (value != '') {
                    this.requestUrlComplete = this.requestUrl + ("&search=" + value);
                    this.sendRequest("GET", this.requestUrl + ("&search=" + value), function(data){
                        self._updatePage(data, true);
                    });
                }
                else {
                    this.idMap["s-sv-vignette-section"].setState({
                        $isHidden: true
                    });
                    this.idMap["s-sv-browse-section"].setState({
                        $isHidden: false
                    });
                    this.onWindowResize();
                }
                return false;
            case "endpoint":
                this.selectedEndpoint = value;
                return true;
            default:
                return true;
        }
    },
    _updatePage: function(data, isSearchRequest){
    
        if (isSearchRequest) {
            var newData = {
                $searchResult: data.$resources,
                $searchFacets: data.$searchFacets
            };
            this.boundFields.$searchVignetteResult[0].vignette.applyChange(newData);
            this._displaySearchFacetsBar(this.boundFields.$searchVignetteResult[0].vignette);
        }
        else {
            var newData = {
                $searchVignetteField: "",
                selectedEndpoint: this.selectedEndpoint,
                $links: {
                    $back: {
                        $isHidden: false
                    }
                },
                $properties: {
                    selectedEndpoint: {
                        $isReadOnly: true,
						$isHidden: false
                    },
                    $searchVignetteField: {
                        $isHidden: false
                    }
                }
            };
            this.applyChange(newData);
            this._buildBrowseData(data);
            this.browseView = this._buildBrowseView();
        }
        this._updateBrowseViewDisplay(!isSearchRequest);
        this.idMap["s-sv-vignette-section"].setState({
            $isHidden: !isSearchRequest
        });
        this.onWindowResize();
    },
    updateFilterState: function(options){
        var self = this;
        self.jsonParams = options.jsonParams;
        options.method = "GET";
    },
    _displaySearchFacetsBar: function(page){
        page.menuBar.isSlotVisible = true;
        if (!page.menuBar.page.designer) {
            if (page.boundFields.$searchFacets && page.boundFields.$searchFacets[0].hasFacet) {
                page.menuBar.barSlot.style.display = "";
                document.site.toggleClass(page.menuBar.barSlot, "s-sv-search-menubar", true);
                /*if (page.menuBar.page.layoutSlot.style.display != "none") {
                 document.site.resize();
                 }*/
            }
        }
    },
    _buildBrowseData: function(data){
    
        if (data.$resources && data.$resources.length == 0) {
            data.$resources = sampleData.get();
        }
        
        // build browse data
        this.vignetteData = {
            modules: {}
        };
        
        for (var ii = 0, jj = data.$resources.length; ii < jj; ii++) {
        
            var resource = data.$resources[ii];
            var noCategoryKey = "noCategory";
            var noModuleKey = "noModule";
            var moduleKey = resource.module && resource.module.$uuid || noModuleKey;
            var hasCategories = resource.categories && resource.categories.length > 0;
            
            if (!this.vignetteData.modules[moduleKey]) {
                this.vignetteData.modules[moduleKey] = resource.module ||
                {
                    title: "No Module"
                };
                this.vignetteData.modules[moduleKey].categories = {};
            }
            
            if (!hasCategories) {
                if (!this.vignetteData.modules[moduleKey].categories[noCategoryKey]) {
                    this.vignetteData.modules[moduleKey].categories[noCategoryKey] = {
                        $uuid: noCategoryKey,
                        $vignettes: [],
                        description: "No Category"
                    };
                }
                this.vignetteData.modules[moduleKey].categories[noCategoryKey].$vignettes.push(resource);
            }
            else {
                for (var mm = 0, pp = resource.categories.length; mm < pp; mm++) {
                    var category = resource.categories[mm];
                    if (!this.vignetteData.modules[moduleKey].categories[category.$uuid]) {
                        this.vignetteData.modules[moduleKey].categories[category.$uuid] = category;
                        this.vignetteData.modules[moduleKey].categories[category.$uuid].$vignettes = [];
                    }
                    this.vignetteData.modules[moduleKey].categories[category.$uuid].$vignettes.push(resource);
                }
            }
            
        }
        
        if (data.$totalResults && data.$itemsPerPage && (data.$totalResults > data.$itemsPerPage)) {
            //TODO show info diagnose only $itemPerPage results considered. Use search feature for complete list
        }
    },
    _updateBrowseViewDisplay: function(show){
        document.site.emptyDom(this.idMap["s-sv-browse-section"].body);
        this.idMap["s-sv-browse-section"].body.appendChild(this.browseView);
        this.idMap["s-sv-browse-section"].setTitle(this.selectedCategoryTitle);
        
        
        this.idMap["s-sv-browse-section"].setState({
            $isHidden: !show
        });
        
    },
    _buildBrowseView: function(){
        // dispose values
        this.selectedModId = this.selectedModLink = this.selectedCatId = this.selectedCatLink = null;
        
        // browse content slot
        this.browseLayout = document.createElement("div");
        this.browseLayout.className = "s-sv-browse-layout";
        
        // modules layout
        var modulesLayout = document.createElement("div");
        modulesLayout.className = "s-sv-browse-modules";
        this.browseLayout.appendChild(modulesLayout);
        
        // modules layout header
        this.modulesLayoutHeader = document.createElement("div");
        this.modulesLayoutHeader.className = "s-sv-browse-module-header s-active";
        this.modulesLayoutHeader.textContent = "Modules";
        modulesLayout.appendChild(this.modulesLayoutHeader);
        
        // modules layout body
        var body = document.createElement("div");
        body.className = "s-sv-browse-module-body";
        modulesLayout.appendChild(body);
        
        // append modules
        var modKeys = Object.keys(this.vignetteData.modules);
        for (var ii = 0, jj = modKeys.length; ii < jj; ii++) {
            var modItem = document.createElement("a");
            modItem.className = 's-sv-browse-module-item';
            document.site.toggleClass(modItem, "s-sv-browse-module-item-" + (this.vignetteData.modules[modKeys[ii]].icon || "default"), true);
            modItem.setAttribute("data-s-picker", "sv-module-picker");
            modItem.setAttribute("sv-module-id", modKeys[ii]);
            modItem.textContent = this.vignetteData.modules[modKeys[ii]].title;
            var modItemSlot = document.createElement("div");
            modItemSlot.className = "s-sv-browse-module-slot";
            modItemSlot.appendChild(modItem);
            body.appendChild(modItemSlot);
        }
        
        // categories layout
        this.categoriesLayout = document.createElement("div");
        this.categoriesLayout.className = "s-sv-browse-categories";
        this.categoriesLayoutHeader = document.createElement("div");
        this.categoriesLayoutHeader.className = "s-sv-browse-categories-header";
        this.categoriesLayoutHeader.textContent = "Categories";
        this.categoriesLayout.appendChild(this.categoriesLayoutHeader);
        this.categoriesLayoutBody = document.createElement("div");
        this.categoriesLayoutBody.className = "s-sv-browse-categories-body";
        this.categoriesLayout.appendChild(this.categoriesLayoutBody);
        this.browseLayout.appendChild(this.categoriesLayout);
        
        // vignettes layout
        this.vignettesLayout = document.createElement("div");
        this.vignettesLayout.className = "s-sv-browse-vignettes";
        this.vignettesLayoutHeader = document.createElement("div");
        this.vignettesLayoutHeader.className = "s-sv-browse-vignettes-header";
        this.vignettesLayoutHeader.textContent = "Vignettes";
        this.vignettesLayout.appendChild(this.vignettesLayoutHeader);
        this.vignettesLayoutBody = document.createElement("div");
        this.vignettesLayoutBody.className = "s-sv-browse-vignettes-body";
        this.vignettesLayout.appendChild(this.vignettesLayoutBody);
        this.browseLayout.appendChild(this.vignettesLayout);
        
        return this.browseLayout;
    },
    ensureDefaultArticle: function($article, $prototype){
        function getTypesLayoutInitValue(){
            return {
                $isTitleHidden: true,
                $css: "s-sv-type",
                $layout: {
                    $layoutType: "stack",
                    $items: []
                }
            };
        }
        
        if ($article) {
            return $article;
        }
        else {
        
            // --- in order to have types displayed in rows of three types
            var types = ["requests", "processes", "stats", "representation", "extLink"], typesLayout = [], typesLayoutItem = getTypesLayoutInitValue();
            
            for (var ii = 0, jj = types.length; ii < jj; ii++) {
                typesLayoutItem.$layout.$items.push({
                    $category: "link",
                    $bind: types[ii],
                    $css: "s-sv-type-link s-sv-type-" + types[ii],
                    $skin: "s-sv-type-skin"
                });
                if ((ii + 1) == jj) {
                    typesLayout.push(typesLayoutItem);
                    break;
                }
                if ((ii + 1) % 2 == 0) {
                    typesLayout.push(typesLayoutItem);
                    typesLayoutItem = getTypesLayoutInitValue();
                }
            }
            // ---
            
            return {
                $title: document.site.localize.searchVignettePageTitle,
                $layout: {
                    $items: [{
                        $layoutType: "stack",
                        $items: [{
                            $bind: "$back",
                            $category: "link",
                            $isHidden: true,
							$clientId: "s-sv-back-link"
                        }, {
                            $category: "section",
                            $title: "Select endpoint",
                            $clientId: "s-sv-endpoint-section",
                            $layout: {
                                $layoutType: "stack",
                                $items: [{
                                    $bind: "endpoint",
                                }]
                            }
                        }, {
                            $category: "section",
                            $title: "Select category",
                            $clientId: "s-sv-category-section",
                            $layout: {
                                $layoutType: "row",
                                $items: typesLayout
                            }
                        }, {
                            $bind: "selectedEndpoint",
                            $isHidden: true
                        }, {
                            $bind: "$searchVignetteField",
                            $isHidden: true
                        }, {
                            $category: "field",
                            $bind: "selectedVignettes",
                            $isTitleHidden: false
                        }, {
                            $category: "section",
                            $title: "Search result",
                            $clientId: "s-sv-vignette-section",
                            $isHidden: true,
                            $layout: {
                                $layoutType: "stack",
                                $items: [{
                                    $bind: "$searchVignetteResult"
                                }]
                            }
                        
                        }, {
                            $category: "section",
                            $css: "s-sv-browse-section",
                            $clientId: "s-sv-browse-section"
                        }]
                    }]
                }
            };
        }
    },
    dispose: function(){
        DesktopPage.prototype.dispose.call(this);
    }
});


