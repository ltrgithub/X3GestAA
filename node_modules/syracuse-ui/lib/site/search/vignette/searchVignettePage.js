"use strict";
var helpers = require("syracuse-core/lib/helpers");
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var navLevelLimit = 3;

function SearchVignettePage(){
}

exports.SearchVignettePage = helpers.defineClass(SearchVignettePage, DesktopPage, {
    _isPayloadOk: function(data, openerMenu){
        if (!data.$searchFacets) {
            document.site.showDiagnoses({
                $diagnoses: [{
                    $message: document.site.localize.searchVignetteNoFacet
                }]
            }, openerMenu);
            return false;
        }
        return true;
    },
    fetch: function(options){
        if (options.jsonParams && options.jsonParams.filters) {
            debugger;
        }
    },
    appendHeader: function(){
        DesktopPage.prototype.appendHeader.call(this);
        //TODO
    },
    onNotifyDataChange: function(field, value){
        debugger;
    },
    loadData: function(menu){
        var self = this;
        // getting vignette search results data
        document.controller.sendRequest(null, {
            method: "GET",
            $location: {
                $url: menu.$url
            }
        }, function(data, response, $url){
            self._openPage(data, menu);
        }, function(error, httpquery){
            var $diagnoses;
            if (error.data.indexOf("$diagnoses") != -1) {
                $diagnoses = JSON.parse(error.data).$diagnoses;
            }
            else {
                $diagnoses = [{
                    $severity: "error",
                    $message: error.data
                }];
            }
            document.site.showDiagnoses({
                $diagnoses: $diagnoses
            });
        });
        
    },
    _getCategoriesEnum: function(data){
        var $enum = [];
        for (var ii = 0, jj = data.$searchFacets.length; ii < jj; ii++) {
            var menuCategoryFacet = data.$searchFacets[ii].$facet == "menuCategory" ? data.$searchFacets[ii] : menuCategoryFacet;
            if (menuCategoryFacet && menuCategoryFacet.$members && menuCategoryFacet.$members.length > 0) {
                for (var pp = 0, mm = menuCategoryFacet.$members.length; pp < mm; pp++) {
                    $enum.push({
                        $value: menuCategoryFacet.$members[pp].$value.toLowerCase(),
                        $title: menuCategoryFacet.$members[pp].$title
                    })
                }
                break;
            }
        }
        return $enum;
    },
    _getEnumValues: function(data){
        switch (this.navLevel) {
            case 0:
                return this.$enum = this._getCategoriesEnum(data);
            case 1:
                return this.$enum = this._getModulesEnum(data);
            default:
            //TODO throw error
        }
    },
    _getSectionTitle: function(){
        switch (this.navLevel) {
            case 0:
                return document.site.localize.searchVignettePageChoose;
            case 1:
                //TODO
                return this.selectedCategory.$title
            default:
                return "No title set yet"
            //TODO throw error
        }
    },
    _openPage: function(openerMenu){
    
        var self = this;
        self.navLevel = self.navLevel || 0;
        self.newData = data;
        
        
        if ($itemPage) {
            openerMenu.page.openDialog({
				article: this,
				content: document.site.loadNewPage($itemPage)
			});
        }
        else {
            if (!self._isPayloadOk(data)) {
                return false;
            }
            
            var $enum = self._getEnumValues(data);
            
            // building vignette search page
            var options = {
                $dialogMode: "modal",
                $itemPage: {
                    $category: "searchVignette",
                    $isEditMode: false,
                    $urlParts: {
                        $facet: "$search"
                    },
                    $representation: {
                        $prototype: {
                            $properties: {
                                $selectionContent: {
                                    $type: "application/x-choice",
                                    $value: {
                                        $type: "application/x-string",
                                        $enum: $enum
                                    }
                                },
                                $nodata: {
                                    $type: "application/x-string",
                                    $title: "No data"
                                },
                                $queryData: {
                                    $type: "application/x-array",
                                    $item: {
                                        $type: "application/json",
                                        $prototype: "{$baseUrl}/$prototypes('{$representation}.$search')",
                                        $url: "{$baseUrl}/{$pluralType}('{$key}')",
                                        $value: "{$key}",
                                        $title: "queryResult {$key}",
                                        $key: "{$uuid}",
                                        $description: "queryResult {$key}",
                                        $pluralType: "queryResults",
                                        $representation: "queryResult",
                                        $properties: {
                                            title: {
                                                $title: "Description",
                                                $type: "application/x-string",
                                                $format: "$html",
                                                $capabilities: "sort,filter,alphaTab",
                                                $links: {
                                                    $details: {
                                                        $type: "application/json;vnd.sage=syracuse",
                                                        $url: "{$url}"
                                                    }
                                                }
                                            },
                                            $descriptionData: {
                                                $title: "Resume",
                                                $type: "application/x-array",
                                                $item: {
                                                    $type: "application/x-string",
                                                    $format: "$html",
                                                }
                                            },
                                            $resultTypeTitle: {
                                                $title: "Result type title",
                                                $type: "application/x-string",
                                                $format: "$html",
                                                $capabilities: "sort,filter,alphaTab"
                                            }
                                        },
                                        $defaultOrder: "title"
                                    }
                                }
                            }
                        },
                        $article: {
                            $title: document.site.localize.searchVignettePageTitle,
                            $layout: {
                                $items: [{
                                    $layoutType: "stack",
                                    $items: [{
                                        $category: "section",
                                        $title: self._getSectionTitle(),
                                        $layout: {
                                            $layoutType: "stack",
                                            $items: [{
                                                $bind: "$selectionContent",
                                                $isTitleHidden: true,
                                                $choiceLayout: "3",
                                                $isTopLabelAlignment: false,
                                                $format: "$button",
                                                $icon: {
                                                    $path: "searchvignette/s-searchvignette-"
                                                },
                                                $isEditMode: true,
                                                $skin: "s-searchvignette"
                                            
                                            }, {
                                                $bind: "$nodata",
                                                $isHidden: true
                                            }, {
                                                $bind: "$queryData",
                                                $isHidden: true
                                            }]
                                        }
                                    }]
                                }]
                            }
                        }
                    },
                    onAfterLoadPage: function(page){
                        page.openerMenu = openerMenu;
                        page.navLevel = self.navLevel || 0;
                        self.applyChange(self.newData);
                    }
                },
                onClose: function(validated, dispose){
                    return true;
                }
            };
            openerMenu.page.openDialog(options);
            
        }
    },
    applyChange: function(data){
        switch (this.navLevel) {
            case 0:
            case 1:
                if (this.$enum.length == 0) {
                    data.$nodata = document.site.localize.searchVignetteNoData.replace('{levelType}', this.navLevel == 0 ? "category" : "module");
                    data.$properties = {
                        $selectionContent: {
                            $isHidden: true
                        },
                        $queryData: {
                            $isHidden: true
                        }
                    }
                }
                else {
                    //data.$selectionContent = this.$enum[0].$value;
                    data.$properties = {
                        $queryData: {
                            $isHidden: true
                        },
                        $nodata: {
                            $isHidden: true
                        }
                    };
                }
                break;
            case 2:
                data.$properties = {
                    $queryData: {
                        $isHidden: true
                    }
                };
            case 3:
                break;
            default:
                throw new Error("Navigation level not handled");
            //TODO throw error
        }
    },
    _updateNavLevel: function(back){
        if (back) {
            this.navLevel--;
        }
        else {
            this.navLevel++;
        }
        if (this.navLevel > navLevelLimit) {
            //TODO
        }
    },
    _getLayout: function(data){
        // layout depends on navigation depth
        switch (this.navLevel) {
            case 0:
                return this._getCategoriesLayout(data);
            case 1:
                return this._getModulesLayout(data);
            case 2:
                return this._getVignetteLayout(data);
            case 3:
                break;
            default:
                throw new Error("Navigation level not handled");
            //TODO throw error
        }
    }
});
