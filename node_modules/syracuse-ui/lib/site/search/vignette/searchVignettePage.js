"use strict";
var helpers = require("syracuse-core/lib/helpers");
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var sampleData = require('./sampleDataResources');

function SearchVignettePage(){
}

exports.SearchVignettePage = helpers.defineClass(SearchVignettePage, DesktopPage, {
    fetch: function(options){
        options.method = "POST";
        DesktopPage.prototype.fetch.call(this, options);
    },
    _openPage: function(openerMenu){
        openerMenu.page.openDialog({
            article: openerMenu.page,
            $url: openerMenu.$url
        });
    },
    onErrorHandler: function(error){
        var $diagnoses;
        if (error.data.indexOf("$diagnoses") != -1) {
            $diagnoses = JSON.parse(error.data).$diagnoses;
        }
        else {
            $diagnoses = [{
                $severity: "error",
                $message: error.data
            }];
        }
        document.site.showDiagnoses({
            $diagnoses: $diagnoses
        });
    },
    sendRequest: function(method, url, onSuccess, onError, parent){
        document.controller.sendRequest(null, {
            method: method || "GET",
            $location: {
                $url: url
            }
        }, function(data, response, $url){
            onSuccess(parent, data);
        }, function(error){
            onError(error);
        });
    },
    onMenuClick: function(menu){
        /*menu.page.openDialog({
         article: menu.page,
         $url: menu.$url
         });*/
        var self = this;
        switch (menu.$bind) {
            case "requests":
            case "processes":
            case "stats":
            case "representation":
            case "extLink":
                self.requestUrl = menu.$url;
                self.sendRequest(menu.$method, menu.$url, self._updatePage, self.onErrorHandler, self);
            default:
            //TODO complete with other menu cases
        }
        
        return false;
    },
    onClickPicker: function(picker){
        var $bind = picker.getAttribute("data-s-picker");
        switch ($bind) {
            case "sv-module-picker":
                var modId = picker.getAttribute("sv-module-id");
                if (!this.selectedModId || (this.selectedModId != modId)) {
                    // update selected css
                    if (this.selectedModId) {
                        document.site.toggleClass(this.selectedModLink, "s-selected");
                    }
                    document.site.toggleClass(picker, "s-selected", true);
                    this.selectedModId = modId;
                    this.selectedModLink = picker;
                    document.site.emptyDom(this.categoriesLayout);
                    var categories = this.vignetteData.modules[modId].categories;
                    var catKeys = Object.keys(categories);
                    for (var ii = 0, jj = catKeys.length; ii < jj; ii++) {
                    
                        var categoryItem = document.createElement("div");
                        categoryItem.className = "s-sv-category-item";
                        
                        var categoryHeader = document.createElement("div");
                        categoryHeader.className = "s-sv-category-header";
                        
                        var categoryHeaderTitle = document.createElement("a");
                        categoryHeaderTitle.className = "s-sv-category-header-title";
                        categoryHeaderTitle.className += " s-closed";
                        categoryHeaderTitle.setAttribute("data-s-picker", "sv-category-picker");
                        categoryHeaderTitle.setAttribute("sv-category-id", catKeys[ii]);
                        categoryHeaderTitle.textContent = this.vignetteData.modules[modId].categories[catKeys[ii]].description;
                        categoryHeader.appendChild(categoryHeaderTitle);
                        
                        var categoryBody = document.createElement("div");
                        categoryBody.className = "s-sv-category-body";
                        
                        var vignettes = this.vignetteData.modules[modId].categories[catKeys[ii]].$vignettes;
                        if (vignettes.length > 0) {
                            for (var mm = 0, pp = vignettes.length; mm < pp; mm++) {
                                var vignetteItem = document.createElement("a");
                                vignetteItem.className = "s-sv-vignette-item";
                                vignetteItem.setAttribute("data-s-picker", "sv-vignette-picker");
                                vignetteItem.setAttribute("sv-vignette-index", mm);
                                vignetteItem.textContent = vignettes[mm].title;
                                categoryBody.appendChild(vignetteItem);
                            }
                        }
                        else {
                            var vignetteItem = document.createElement("a");
                            vignetteItem.className = "s-sv-no-vignette-item";
                            vignetteItem.textContent = "No vignette"
                        }
                        categoryItem.appendChild(categoryHeader);
                        categoryItem.appendChild(categoryBody);
                        this.categoriesLayout.appendChild(categoryItem);
                    }
                }
                break;
            case "sv-category-picker":
                var isClosed = picker.className.indexOf("s-closed") >= 0;
                document.site.toggleClass(picker, "s-closed", !isClosed);
                document.site.toggleClass(picker, "s-opened", isClosed);
                picker.parentNode.parentNode.children[1].style.display = isClosed ? "inline-block" : "none";
                break;
            case "sv-vignette-picker":
                break;
            case "sv-back":
                this.scrollview.removeChild(this.browseView);
                document.site.emptyDom(this.browseView);
                document.site.removeDomChild(this.browseView);
                this.scrollview.appendChild(this.body);
                break;
            default:
                return true;
        }
        
    },
    onNotifyDataChange: function(field, value){
        if (field.$item.$bind == "$search") {
            if (value != "") {
                if (!this.resultPage) {
                    this.itemSlot.removeChild(this.browseLayout);
                }
                else {
                    if (!this.resultPage.domItem.parentNode) {
                        this.itemSlot.appendChild(this.resultPage.domItem);
                    }
                }
                this.resultPage = this.resultPage || document.site.loadNewPage(this._getSearchResultItemPage());
                this.sendRequest("GET", this.requestUrl + ("&search=" + value), this.resultPage.applyChange, this.onErrorHandler, this.resultPage);
            }
            else {
                this.itemSlot.removeChild(this.resultPage.domItem);
                this.itemSlot.appendChild(this.browseLayout);
            }
        }
        else {
            return true;
        }
    },
    _getSearchResultItemPage: function(){
        var $itemPage = {};
        $itemPage.layoutSlot = this.itemSlot;
        $itemPage.$category = "searchVignetteResult";
        $itemPage.$urlParts = {
            $facet: "$query"
        };
        $itemPage.$autoFetch = false;
        $itemPage.$representation = {
            $prototype: {
                $properties: {
                    $resources: {
                        $type: "application/x-array",
                        $item: {
                            $type: "application/json",
                            $properties: {
                                title: {
                                    $title: "Description",
                                    $type: "application/x-string",
                                    $format: "$html"
                                }
                            }
                        }
                    }
                },
                $article: {
                    $isTitleHidden: true,
                    $layout: {
                        $layoutType: "columns",
                        $widths: "100",
                        $items: [{
                            $items: [{
                                $bind: "$resources",
                                $isMenuRecordHidden: true,
                                $noDataText: document.site.localize.search_no_res,
                                $format: "cards",
                                $layout: {
                                    $items: [{
                                        $bind: "title",
                                        $isTitleHidden: true
                                    }]
                                }
                            }]
                        }]
                    }
                }
            }
        }
        return $itemPage;
    },
    _updatePage: function(parent, data){
        var self = parent;
        if (data.$resources && data.$resources.length == 0) {
            data.$resources = sampleData.get();
        }
        
        if (data.$resources && data.$resources.length > 0) {
        
            self._buildBrowseData(data);
            
            self.browseView = self._buildBrowseView();
            
            self.scrollview.removeChild(self.body);
            self.scrollview.appendChild(self.browseView);
        }
        else {
            // TODO display text "no data to display"
        }
    },
    _buildBrowseData: function(data){
        // build browse data
        this.vignetteData = {
            modules: {}
        };
        
        for (var ii = 0, jj = data.$resources.length; ii < jj; ii++) {
        
            var resource = data.$resources[ii];
            var noCategoryKey = "noCategory";
            var noModuleKey = "noModule";
            var moduleKey = resource.module && resource.module.$uuid || noModuleKey;
            var hasCategories = resource.categories && resource.categories.length > 0;
            
            if (!this.vignetteData.modules[moduleKey]) {
                this.vignetteData.modules[moduleKey] = resource.module ||
                {
                    title: "No Module"
                };
                this.vignetteData.modules[moduleKey].categories = {};
            }
            
            if (!hasCategories) {
                if (!this.vignetteData.modules[moduleKey].categories[noCategoryKey]) {
                    this.vignetteData.modules[moduleKey].categories[noCategoryKey] = {
                        $uuid: noCategoryKey,
                        $vignettes: [],
                        description: "No Category"
                    };
                }
                this.vignetteData.modules[moduleKey].categories[noCategoryKey].$vignettes.push(resource);
            }
            else {
                for (var mm = 0, pp = resource.categories.length; mm < pp; mm++) {
                    var category = resource.categories[mm];
                    if (!this.vignetteData.modules[moduleKey].categories[category.$uuid]) {
                        this.vignetteData.modules[moduleKey].categories[category.$uuid] = category;
                        this.vignetteData.modules[moduleKey].categories[category.$uuid].$vignettes = [];
                    }
                    this.vignetteData.modules[moduleKey].categories[category.$uuid].$vignettes.push(resource);
                }
            }
            
        }
        
        if (data.$totalResults && data.$itemsPerPage && (data.$totalResults > data.$itemsPerPage)) {
            //TODO show info diagnose only $itemPerPage results considered. Use search feature for complete list
        }
    },
    _buildBrowseView: function(){
        this.itemSlot = document.createElement("div");
        this.itemSlot.className = "s-sv-browse";
        
        
        // append back button
        var backSlot = document.createElement("div");
        backSlot.className = "s-sv-browse-back-slot";
        var back = document.createElement("a");
        back.className = "s-sv-browse-back";
        back.setAttribute("data-s-picker", "sv-back");
        back.textContent = "Back";
        backSlot.appendChild(back);
        this.itemSlot.appendChild(backSlot);
        
        
        // append search field
        var fieldSlot = document.createElement("div");
        fieldSlot.className = "s-sv-browse-field-slot";
        var searchField = this.loadNewItem(fieldSlot, {
            $bind: "$search",
            $category: "field",
            $isEditMode: true,
            $isBorderVisible: true,
            $field: {
                $type: "application/x-string",
                $title: "Search vignette"
            }
            /*,
             $isTitlePlaceHolder: true,
             $isTitleHidden: true*/
        }, this);
        this.itemSlot.appendChild(fieldSlot);
        
        // browse content slot
        this.browseLayout = document.createElement("div");
        this.browseLayout.className = "s-sv-browse-layout";
        this.itemSlot.appendChild(this.browseLayout);
        
        // modules layout
        var modulesLayout = document.createElement("div");
        modulesLayout.className = "s-sv-browse-modules";
        this.browseLayout.appendChild(modulesLayout);
        
        // append modules
        var modKeys = Object.keys(this.vignetteData.modules);
        for (var ii = 0, jj = modKeys.length; ii < jj; ii++) {
            var modItem = document.createElement("a");
            modItem.className = 's-sv-browse-module-item';
            document.site.toggleClass(modItem, "s-sv-browse-module-item-" + (this.vignetteData.modules[modKeys[ii]].icon || "default"), true);
            modItem.setAttribute("data-s-picker", "sv-module-picker");
            modItem.setAttribute("sv-module-id", modKeys[ii]);
            modItem.textContent = this.vignetteData.modules[modKeys].title;
            var modItemSlot = document.createElement("div");
            modItemSlot.className = "s-sv-browse-module-slot";
            modItemSlot.appendChild(modItem);
            modulesLayout.appendChild(modItemSlot);
        }
        
        // categories layout
        this.categoriesLayout = document.createElement("div");
        this.categoriesLayout.className = "s-sv-browse-categories";
        this.browseLayout.appendChild(this.categoriesLayout);
        
        return this.itemSlot;
        
    },
    ensureDefaultArticle: function($article, $prototype){
        function getTypesLayoutInitValue(){
            return {
                $isTitleHidden: true,
                $css: "s-sv-type",
                $layout: {
                    $layoutType: "stack",
                    $items: []
                }
            };
        }
        
        if ($article) {
            return $article;
        }
        else {
        
            // --- in order to have types displayed in rows of three types
            var types = ["requests", "processes", "stats", "representation", "extLink"], typesLayout = [], typesLayoutItem = getTypesLayoutInitValue();
            
            for (var ii = 0, jj = types.length; ii < jj; ii++) {
                typesLayoutItem.$layout.$items.push({
                    $category: "link",
                    $bind: types[ii],
                    $css: "s-sv-type-link s-sv-type-" + types[ii],
                    $skin: "s-sv-type-skin"
                });
                if ((ii + 1) == jj) {
                    typesLayout.push(typesLayoutItem);
                    break;
                }
                if ((ii + 1) % 2 == 0) {
                    typesLayout.push(typesLayoutItem);
                    typesLayoutItem = getTypesLayoutInitValue();
                }
            }
            // ---
            
            return {
                $title: document.site.localize.searchVignettePageTitle,
                $layout: {
                    $items: [{
                        $layoutType: "stack",
                        $items: [{
                            $category: "section",
                            $title: "Select endpoint",
                            $layout: {
                                $layoutType: "stack",
                                $items: [{
                                    $bind: "endpoint",
                                }]
                            }
                        }]
                    }, {
                        $layoutType: "stack",
                        $items: [{
                            $category: "section",
                            $title: "Select category",
                            $layout: {
                                $layoutType: "row",
                                $items: typesLayout
                            }
                        }]
                    }]
                }
            };
        }
    },
    dispose: function(){
        DesktopPage.prototype.dispose.call(this);
    }
});


