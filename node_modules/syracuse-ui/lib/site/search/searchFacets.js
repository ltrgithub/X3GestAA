"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require('syracuse-ui/lib/article/article').Article;
var locale = require('syracuse-core/lib/locale');

function SearchFacets(){
}

exports.SearchFacets = helpers.defineClass(SearchFacets, Article, {
    drawBox: function(){
        this.$$item = $("<aside class='s-search-facets'/>").appendTo($(this.layoutSlot));
        this.articleParent.bind(this, this.$item.$bind);
    },
    onInputMemberChange: function($$check){
        var $$member = $$check.closest(".s-search-facet-member");
        var $$facet = $$member.closest(".s-search-facet'");
        var $facet = this.$searchFacets[$$facet.index()];
        var $member = $facet.$members[$$member.index()];
        
        this._updateFilters($facet.$facet, $member.$value || $member.$title, $$check.is(":checked"));
        this.fetch({
            jsonParams: {
                filters: this.filters
            }
        });
    },
    _updateFilters: function($facet, $title, checked){
        if (checked) {
            (this.filters[$facet] = this.filters[$facet] || []).push($title);
        }
        else {
            var filter = this.filters[$facet];
            if (filter) {
                filter.splice(filter.indexOf($title), 1);
                if (filter.length == 0) {
                    delete this.filters[$facet];
                }
            }
        }
    },
    setDataBind: function($searchFacets, record, metaData){
        var localize = locale.resources(module)();
        var self = this;
        self.$$item.empty();
        self.filters = {};
        if (self.$searchFacets = $searchFacets) {
            $searchFacets.forEach(function($searchFacet){
                var $$facet = $("<div class='s-search-facet'/>");
                var $$body = $("<div class='s-search-facet-body'/>");
                $searchFacet.$members.forEach(function($member){
                    var $$member = $("<div class='s-search-facet-member'/>");
                    var $$checked = $("<input class='s-search-facet-member-check' type='checkbox'/>").appendTo($$member);
                    if ($member.$selected) {
                        $$checked.attr("checked", true);
                        self._updateFilters($searchFacet.$facet, $member.$value || $member.$title, true);
                    }
                    $("<div class='s-search-facet-member-title'/>").text($member.$title).appendTo($$member);
                    $("<div class='s-search-facet-member-count'/>").text("(" + $member.$count + ")").appendTo($$member);
                    if ($member.$links) {
                        var links = self.page.loadNewItem($("<div class='s-search-facet-member-links'/>").appendTo($$member)[0], {
                            $category: "menus",
                            $skin: "s-list-menus",
                            $layout: {
                                $items: Object.keys($member.$links).map(function($bind){
                                    return {
                                        $bind: $bind
                                    };
                                })
                            }
                        }, self);
                        self.page.applyChange({
                            $links: $member.$links
                        });
                    }
                    $$member.appendTo($$body);
                });
                var $$header = $("<header class='s-search-facet-header'/>");
                $$header.append($("<div class='s-search-facet-header-title'/>").text($searchFacet.$title || $searchFacet.$facet));
                if (true || $searchFacet.$missing) {
                    $$header.append($("<div class='s-search-facet-header-missing'/>").text(localize.search_missing + " (" + $searchFacet.$missing + ")"));
                }
                $$facet.append($$header).append($$body).appendTo(self.$$item);
            });
        }
    },
    notifyChange: function($bind, value){
        var data = {
            $actions: {
                $save: {
                    $isRequested: true
                }
            }
        };
        data[$bind] = value;
        this._notifyChangeToParent(data);
    }
});
