"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require('syracuse-ui/lib/page/rawPage').RawPage;
var SearchField = require('syracuse-ui/lib/site/search/searchField').SearchField;
var $queryLink1 = {
	$url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}&source=functions&count=5"
};
var $queryLink2 = {
	$url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}&source=data&count=5"
};

function SearchRequest() {}

exports.SearchRequest = helpers.defineClass(SearchRequest, RawPage, {
	drawBox: function() {
		this.$skin = this.$item.$skin = "s-search-rq";
		this.domItem = document.createElement("article");
		this.domItem.className = this.$skin;
		this.$$item = $(this.layoutSlot.appendChild(this.domItem));

		this.body = document.createElement("div");
		this.domItem.appendChild(this.body);
		this.renderLayoutContent();
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$bind == "$searchLink") {
			return this.boundFields.$search[0].getDataValue() !== "" ? true : false;
		}
		if (menuItem.$bind == "$advancedSearch" || menuItem.$item && menuItem.$item.$bind == "$detail") {
			if (this.searchField && this.searchField._autoCompletePopup) {
				var self = this;
				setTimeout(function() {
					self.searchField._autoCompletePopup.close();
				}, 100);
			}
			return true;
		}
		return true;
	},
	_bindEvents: function(bind) {
		var self = this;
		if (self._autoCompleteList) {
			if (bind) {
				$(self._autoCompleteList).delegate(".s-search-rq-field-carditem", "click", function(event) {
					if (!this.getAttribute("data-s-menu")) {
						var $$menu = $(this).find("a[data-s-menu]");
						var menu = document.site.findMenu($$menu[0]);
						if (menu && !menu.$isDisabled) {
							menu.click(event);
						}
						return false;
					}
				}).delegate(".s-search-rq-field-carditem-slot", "mouseenter", function() {
					$(this).addClass("s-search-rq-field-carditem-hover");
				}).delegate(".s-search-rq-field-carditem-hover", "mouseleave", function() {
					$(this).removeClass("s-search-rq-field-carditem-hover");
				});
			} else {
				$(self._autoCompleteList).undelegate();
			}
		}
	},
	createNewItem: function($item, boxParent) {
		if ($item.$bind == "$search") {
			var searchField = new SearchField();
			searchField.localize = document.site.localize;
			searchField.$field = this.$prototype.$properties[$item.$bind];
			return this.initializeNewItem(searchField, $item, boxParent);
		}
		return RawPage.prototype.createNewItem.call(this, $item, boxParent);
	},
	notifyDataChange: function(field, value) {
		if (field.$item.$bind == "$search") {
			// only if search field not empty
			if (value.replace(/\s+/g, '') !== "") {
				this.dataset[field.$item.$bind] = value;
				this.menuItems["$searchLink"][0].$url = this.$prototype.$links.$searchLink.$url + "";
				document.controller.executeMenu(this.menuItems["$searchLink"][0]);
			}
		}
	},
	loadAutoCompleteList: function(searchField) {
		var self = this;
		var searchRqSkin = searchField.$skin;
		var localize = document.site.localize;

		self.dataset.$search = searchField.getDataValue();
		self.searchField = searchField;


		if (self.dataset.$search == "") {
			//TODO close dialog if empty field
			return;
		}

		self._autoCompleteList = document.createElement("div");
		self._autoCompleteList.className = searchRqSkin + "-autocomplete-list";

		self.searchItem = self.searchItem ||
			self.loadNewItem(self._autoCompleteList, {
				$category: "section",
				$skin: searchRqSkin + "-h1",
				$isTitleHidden: true,
				$categoryId: "s-search-rq-autocomplete-list-id",
				$layout: {
					$items: [{
						$skin: searchRqSkin,
						$css: searchRqSkin,
						$title: localize.searchQueryFunctions,
						$bind: "$query1",
						$noDataText: localize.search_no_res,
						$isPagerHidden: true,
						$isMenuRecordHidden: true,
						$format: "cards",
						$skinCard: searchRqSkin + "-data",
						$layout: {
							$items: [{
								$isEditMode: false,
								$bind: "title",
								$isTitleHidden: true,
								$skin: searchRqSkin
							}]
						}
					}, {
						$skin: searchRqSkin,
						$css: searchRqSkin,
						$title: localize.searchQueryData,
						$bind: "$query2",
						$noDataText: localize.search_no_res,
						$isPagerHidden: true,
						$isMenuRecordHidden: true,
						$format: "cards",
						$layout: {
							$items: [{
								$isEditMode: false,
								$bind: "title",
								$isTitleHidden: true,
								$skin: searchRqSkin
							}, {
								$isEditMode: false,
								$bind: "$resultTypeTitle",
								$isTitleHidden: true,
								$skin: searchRqSkin + "-type"
							}]
						}
					}, {
						$layoutType: "row",
						$css: searchRqSkin + "-more",
						$items: [{
							$category: "link",
							$skin: searchRqSkin + "-arrow",
							$bind: "$arrow"
						}, {
							$category: "link",
							$skin: searchRqSkin + "-advanced",
							$bind: "$advancedSearch"
						}]
					}]
				}
			}, self);


		// /!\ very important ! cleaning records before filling them 
		self.applyChange({
			$query1: [],
			$query2: [],
			$links: {
				$arrow: {
					$isHidden: true
				},
				$advancedSearch: {
					$isHidden: true
				}
			}
		});
		//$arrow: {},
		//$advancedSearch

		document.site.urlMaker.formatMenuUrl(self, $queryLink1, self.dataset, function($url, isCanceled) {
			document.controller.sendRequest(self, {
				$location: {
					$url: $url
				}
			}, function(data) {
				data.$query1 = data.$resources;
				delete data.$resources;

				// display "see more results" if there is data
				// display 'see details' if length <= 5
				// display 'see more results' if length > 5
				if (data.$query1.length > 0) {
					data.$links = {
						$arrow: {
							$isHidden: false
						},
						$advancedSearch: {
							$isHidden: false,
							$title: data.$totalResults > 5 ? localize.searchAdvanceResults : (self.$hasMoreResults ? localize.searchAdvanceResults : localize.searchAdvanceDetails)
						}
					};
					self.$hasMoreResults = data.$totalResults > 5;
				}
				self.applyChange(data);
			});
		});
		document.site.urlMaker.formatMenuUrl(self, $queryLink2, self.dataset, function($url, isCanceled) {
			document.controller.sendRequest(self, {
				$location: {
					$url: $url
				}
			}, function(data) {
				data.$query2 = data.$resources;
				delete data.$resources;
				// display "see more results" if there is data
				// display 'see details' if length <= 5
				// display 'see more results' if length > 5
				if (data.$query2.length > 0) {
					data.$links = {
						$arrow: {
							$isHidden: false
						},
						$advancedSearch: {
							$isHidden: false,
							$title: data.$totalResults > 5 ? localize.searchAdvanceResults : (self.$hasMoreResults ? localize.searchAdvanceResults : localize.searchAdvanceDetails)
						}
					};
					self.$hasMoreResults = data.$totalResults > 5;
				}
				self.applyChange(data);
			});
		});

		this._bindEvents(true);

		return self._autoCompleteList;
	},
	unloadAutoCompleteList: function() {
		if (this._autoCompleteList) {
			this._bindEvents(false);
			document.site.emptyDom(this._autoCompleteList);
			this._autoCompleteList = null;
			this.removeItem(this.boundFields.$query1[0], false, true);
			this.removeItem(this.boundFields.$query2[0], false, true);
			this.removeItem(this.menuItems.$arrow[0]);
			this.removeItem(this.menuItems.$advancedSearch[0]);
			var menus = Object.keys(this.menuItems);
			delete this.menuItems.$arrow; - delete this.menuItems.$advancedSearch;
			this.removeItem(this.searchItem, true);
			this.searchItem = null;
			this.searchField.$isArrowClicked = this.searchField.$isRecordTriggered = null;
		}
	},
	dispose: function() {
		this.unloadAutoCompleteList();
		RawPage.prototype.dispose.call(this);
	}
});


exports.loadRequest = function(layoutSlot) {
	var $url = "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}";
	var localize = document.site.localize;
	var $itemPage = {
		$autoFetch: true,
		$isEditMode: true,
		layoutSlot: layoutSlot,
		$category: "searchRequest",
		openerUrlSegments: document.site.urlMaker.parse($url),
		$pageCategoryClass: SearchRequest,
		$representation: {
			$prototype: {
				"$baseUrl": "/sdata/sprint1/settings/sprint1",
				$properties: {
					$query1: {
						"$type": "application/x-array",
						$item: {
							"$properties": {
								"title": {
									$title: localize.searchDescription,
									"$type": "application/x-string",
									"$format": "$html",
									"$capabilities": "sort,filter,alphaTab",
									"$links": {
										"$details": {
											"$type": "application/json;vnd.sage=syracuse",
											"$url": "{$url}"
										}
									}
								}
							}
						}
					},
					$query2: {
						"$type": "application/x-array",
						$item: {
							"$properties": {
								"title": {
									$title: localize.searchDescription,
									"$type": "application/x-string",
									"$format": "$html",
									"$capabilities": "sort,filter,alphaTab",
									"$links": {
										"$details": {
											"$type": "application/json;vnd.sage=syracuse",
											"$url": "{$url}"
										}
									}
								},
								"$resultTypeTitle": {
									"$title": localize.searchResultType,
									"$type": "application/x-string",
									"$format": "$html",
									"$capabilities": "sort,filter,alphaTab"
								}
							}
						}
					},
					"query": {
						"$type": "application/x-string"
					},
					$search: {
						$type: "application/x-string",
						$title: localize.searchFieldTitle,
						$links: {
							$suggest: {}
						}
					}
				},
				$links: {
					$searchLink: {
						$title: localize.siteSearchLink,
						"$type": "application/json;vnd.sage=syracuse",
						$url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}"
					},
					$arrow: {},
					$advancedSearch: {
						$title: localize.searchAdvanceLabel,
						$url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}"
					}
				}
			},
			$article: {
				$isTitleHidden: true,
				$layout: {
					$items: [{
						$bind: "$search",
						$isTopLabelAlignment: false,
						$category: "field",
						$skin: "s-search-rq-field",
						$inplace: true,
						$isTitlePlaceHolder: true
					}, {
						$bind: "$searchLink",
						$category: "link",
						$skin: "s-site-search-picker",
						$icon: {
							$mode: "icon",
							$path: "site/",
							$value: "s-site-search-picker"
						}
					}]
				}
			}
		}
	};
	return document.site.loadNewPage($itemPage);

};