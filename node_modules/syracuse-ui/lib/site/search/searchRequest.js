"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var RawPage = require('syracuse-ui/lib/page/rawPage').RawPage;
var Field = require('syracuse-ui/lib/field/field').Field;

function SearchRequest() {}

exports.SearchRequest = helpers.defineClass(SearchRequest, RawPage, {
	drawBox: function() {
		this.$skin = this.$item.$skin = "s-search-rq";
		var dom = document.createElement("article");
		dom.className = this.$skin;
		this.$$item = $(this.layoutSlot.appendChild(dom));

		dom = document.createElement("div");
		this.$$body = $(dom).appendTo(this.$$item);

		this.renderLayoutContent();
		this.appendArticleMenus();
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$bind == "$searchLink") {
			return this.boundFields.$search[0].getDataValue() !== "" ? true : false;
		}
		if (menuItem.$bind == "$advancedSearch") {
			return true;
		}
	},
	_bindEvents: function(bind) {
		var self = this;
		if (self._autoCompleteList) {
			if (bind) {
				$(self._autoCompleteList).delegate(".s-search-rq-field-cell-record", "click", function(event) {
					if (!this.getAttribute("data-s-menu")) {
						var $$menu = $(this).find("a[data-s-menu]");
						var menu = document.controller.findMenu($$menu);
						if (menu && !menu.$isDisabled) {
							menu.click(event);
						}
						return false;
					}
				}).delegate(".s-search-rq-field-cell-record-row", "mouseenter", function() {
					$(this).addClass("s-search-rq-field-cell-record-hover");
				}).delegate(".s-search-rq-field-cell-record-hover", "mouseleave", function() {
					$(this).removeClass("s-search-rq-field-cell-record-hover");
				});
			} else {
				$(self._autoCompleteList).undelegate();
			}
		}
	},
	createNewItem: function($item, boxParent) {
		if ($item.$bind == "$search") {
			var searchField = new SearchField();
			searchField.localize = document.site.localize;
			searchField.$field = this.$prototype.$properties[$item.$bind];
			return this.initializeNewItem(searchField, $item, boxParent);
		}
		return RawPage.prototype.createNewItem.call(this, $item, boxParent);
	},
	notifyDataChange: function(field, value) {
		if (field.$item.$bind == "$search") {
			// only if search field not empty
			if (value.replace(/\s+/g, '') !== "") {
				this.dataset[field.$item.$bind] = value;
				this.menuItems["$searchLink"][0].$url = this.$prototype.$links.$searchLink.$url + "";
				document.controller.executeMenu(this.menuItems["$searchLink"][0]);
			}
		}
	},
	loadAutoCompleteList: function(searchField) {
		var self = this;
		var searchRqSkin = searchField.$skin;
		var localize = document.site.localize;

		self.dataset.$search = searchField.getDataValue();
		self.searchField = searchField;


		if (self.dataset.$search == "") {
			//TODO close dialog if empty field
			return;
		}

		self._autoCompleteList = document.createElement("div");
		self._autoCompleteList.className = searchRqSkin + "-autocomplete-list";

		self.searchItem = self.searchItem ||
			self.loadNewItem(self._autoCompleteList, {
				$category: "section",
				$skin: searchRqSkin + "-h1",
				$isTitleHidden: true,
				$layout: {
					$items: [{
						$skin: searchRqSkin,
						$css: searchRqSkin,
						$title: "Data",
						$bind: "$query2",
						$noDataText: localize.search_no_res,
						$isPagerHidden: true,
						$isMenuRecordHidden: true,
						$isQuickDesignerEnabled: false,
						$format: "cards",

						$layout: {
							$items: [{
								$isEditMode: false,
								$bind: "title",
								$isTitleHidden: true,
								$skin: searchRqSkin
							}, {
								$isEditMode: false,
								$bind: "type",
								$isTitleHidden: true,
								$skin: searchRqSkin + "-type"
							}]
						}
					}, {
						$skin: searchRqSkin,
						$css: searchRqSkin,
						$title: "Functions",
						$bind: "$query1",
						$noDataText: localize.search_no_res,
						$isPagerHidden: true,
						$isMenuRecordHidden: true,
						$isQuickDesignerEnabled: false,
						$format: "cards",
						$skinCard: searchRqSkin + "-data",
						$layout: {
							$items: [{
								$isEditMode: false,
								$bind: "title",
								$isTitleHidden: true,
								$skin: searchRqSkin
							}]
						}
					}, {
						$layoutType: "row",
						$css: searchRqSkin + "-more",
						$widths: "25,75",
						$items: [{
							$category: "link",
							$skin: searchRqSkin + "-arrow",
							$bind: "$arrow"
						}, {
							$category: "link",
							$skin: searchRqSkin + "-advanced",
							$bind: "$advancedSearch"
						}]
					}]
				}
			}, self);


		// /!\ very important ! cleaning records before filling them 
		self.applyChange({
			$query1: [],
			$query2: [],
			$links: {
				$arrow: {
					$isHidden: true
				},
				$advancedSearch: {
					$isHidden: true
				}
			}
		});
		//$arrow: {},
		//$advancedSearch
		self.formatMenuUrl(self.$prototype.$links.$queryLink1, self.dataset, function($url, isCanceled) {
			document.controller.sendRequest(self, {
				$location: {
					$url: $url
				}
			}, function(data) {
				data.$query1 = data.$resources;
				delete data.$resources;
				// display "see more results" if there is data
				if (data.$query1.length > 0) {
					data.$links = {
						$arrow: {
							$isHidden: false
						},
						$advancedSearch: {
							$isHidden: false
						}
					};
				}
				self.applyChange(data);
			});
		});
		self.formatMenuUrl(self.$prototype.$links.$queryLink2, self.dataset, function($url, isCanceled) {
			document.controller.sendRequest(self, {
				$location: {
					$url: $url
				}
			}, function(data) {
				data.$query2 = data.$resources;
				delete data.$resources;
				// display "see more results" if there is data
				if (data.$query2.length > 0) {
					data.$links = {
						$arrow: {
							$isHidden: false
						},
						$advancedSearch: {
							$isHidden: false
						}
					};
				}
				self.applyChange(data);
			});
		});

		this._bindEvents(true);

		return self._autoCompleteList;
	},
	unloadAutoCompleteList: function() {
		if (this._autoCompleteList) {
			this._bindEvents(false);
			document.site.emptyDom(this._autoCompleteList);
			this._autoCompleteList = null;
			this.removeItem(this.boundFields.$query1[0], false, true);
			this.removeItem(this.boundFields.$query2[0], false, true);
			this.removeItem(this.menuItems.$arrow[0]);
			this.removeItem(this.menuItems.$advancedSearch[0]);
			delete this.menuItems.$arrow;
			delete this.menuItems.$advancedSearch;
			this.removeItem(this.searchItem, true);
			this.searchItem = null;
			this.searchField.$isArrowClicked = this.searchField.$isRecordTriggered = null;
		}
	},
	dispose: function() {
		this.unloadAutoCompleteList();
		RawPage.prototype.dispose.call(this);
	}
});

function SearchField() {}

exports.SearchField = helpers.defineClass(SearchField, Field, {
	onInputChange: function(input, event) {
		// this.onInputValidate(event);
	},
	onClickPicker: function(btn) {
		// handle clear button behaviour
		if (btn && btn.syraPickerType == "clear") {
			this.setDataValue("");
			btn.style.display = "none";
		}
		this.onInputValidate(); //trigger notification change
	},
	onInputFocusin: function(input, event) {
		// handle clear button behaviour
		if (this.getDataValue() != "") {
			this.picker.style.display = "inline-block";
			this.picker.style.opacity = 1;
		}
		//  Field.prototype.onInputFocusin.call(this, input, event);
	},
	onInputFocusout: function(input, event) {
		// handle clear button behaviour
		if (this.getDataValue() != "") {
			this.picker.style.display = "inline-block";
			this.picker.style.opacity = 0.4;
		}
		//Field.prototype.onInputFocusout.call(this, input, event);
	},
	onKeyUp: function(input, event) {
		this.picker.style.display = this.getDataValue() == "" ? "none" : "inline-block";
		this.picker.style.opacity = 1;
	},
	applyShortCuts: function(shortcurts) {
		if (this._isAutoComplete) {
			// don't run search if 'Enter' button
			if (!shortcurts.enter) {
				//stop any previous ongoing search request
				clearTimeout(this._searching);
				// run search
				this.runAutoCompleteSearch();
				if (this._autoCompletePopup) { // handle navigation in drop down search result list (down(40) and up(38))
					if ((shortcurts.up || shortcurts.down) && this._autoCompletePopup) {
						var searchResRecords = this.page.boundFields.$query1[0].records.concat(this.page.boundFields.$query2[0].records);
						var index = this._getFocusRecIndex(searchResRecords);
						var jj = searchResRecords.length;
						if (index != undefined) {
							searchResRecords[shortcurts.down ? ((index + 1) <= (jj - 1) ? (index + 1) : 0) : ((index - 1) >= 0 ? (index - 1) : jj - 1)].$$item.addClass("s-search-rq-field-cell-record-hover");
						} else {
							searchResRecords[shortcurts.down ? 0 : jj - 1].$$item.addClass("s-search-rq-field-cell-record-hover");
						}
						this.$isArrowClicked = true;
					}
				}
			} else {
				// remove autocomplete list if opened
				if (this._autoCompletePopup) {

					// handle navigation in drop down search result list (enter)
					var searchResRecords = this.page.boundFields.$query1[0].records.concat(this.page.boundFields.$query2[0].records);
					var index = this._getFocusRecIndex(searchResRecords);
					if (index != undefined && this.$isArrowClicked) {
						var record = searchResRecords[index];
						record.$$item.click();
						this.$isRecordTriggered = true;
					} else {
						// run search if field not empty
						if (this.getDataValue() !== '') {
							this.onInputValidate();
						}
						// close popup
						this._autoCompletePopup.close();
					}
				} else {
					if (this.getDataValue() !== '') {
						clearTimeout(this._searching);
						this.notifyFieldChange(this.getDataValue());
					}
				}
			}
		}
	},
	runAutoCompleteSearch: function(event) {
		var self = this;
		self._searching = setTimeout(function() {
			// search doesn't take whitespace into account
			if (self.getDataValue().replace(/\s+/g, '') !== "") {

				// if some research has already been done, proceed with the request if the value has changed
				if (self.searchValue) {

					if (self.searchValue !== self.getDataValue()) {
						self.toggleAutoCompleteList(true);
					} else {
						// if empty field, close incremental search popup
						if (self.searchValue == self.getDataValue() == "") {
							if (self._autoCompletePopup) {
								self._autoCompletePopup.close();
							}
						}
					}
				} else {
					// first research (self.searchValue not set yet)
					self.toggleAutoCompleteList(true);
				}
			} else {
				if (self._autoCompletePopup) {
					self._autoCompletePopup.close();
				}
			}

		}, 1000);
	},
	_onAutoCompleteOpen: function() {
		return this.page.loadAutoCompleteList(this);
	},
	_onAutoCompleteClose: function() {
		this.page.unloadAutoCompleteList();
	},
	toggleAutoCompleteList: function(show) {
		var self = this;

		if (self.getDataValue() !== "") {
			self._domItem.id = self.id;
			self.focus();

			self.searchValue = self.getDataValue();

			if (self._autoCompletePopup) {
				self._onAutoCompleteOpen();
			} else {
				self._autoCompletePopup = self.boxParent.openDialog({
					content: self,
					$dialogMode: "popup",
					$$dialog: $(self._onAutoCompleteOpen()),
					position: {
						my: "right top",
						at: "right bottom",
						of: self.$$input
					},
					onClose: function() {
						self.searchValue = null;
						self._autoCompletePopup = null;
						self._onAutoCompleteClose();
					}
				});
			}
		} else {
			if (self._autoCompletePopup) {
				self._autoCompletePopup.close();
			}
		}
	},
	filterMenu: function($bind) {
		if ($bind == "$suggest") {
			this._isAutoComplete = true;
			return false;
		}
		return Field.prototype.filterMenu.call(this, $bind);
	},
	_appendLinksPicker: function() {
		if (this.$rootLinks.$links && this.$rootLinks.$links.$suggest) {
			this._isAutoComplete = true;
			this.picker = this._appendSpecialPicker("clear");
		}
		return Field.prototype._appendLinksPicker.call(this);
	},
	_getFocusRecIndex: function(records) {
		var index;
		for (var ii = 0, jj = records.length; ii < jj; ii++) {
			var rec = records[ii];
			index = rec.$$item.hasClass("s-search-rq-field-cell-record-hover") ? ii : index;
			if (index != undefined) {
				// remove focus class
				rec.$$item.removeClass("s-search-rq-field-cell-record-hover");
				break;
			}
		}
		return index;
	},
	dispose: function() {
		this.picker = this.$isArrowClicked = this.$isRecordTriggered = null;
		Field.prototype.dispose.call(this);
	}
});

exports.loadRequest = function(layoutSlot) {
	var $url = "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}";
	var httpQuery = document.controller.parseUrl($url);
	var localize = document.site.localize;
	var $itemPage = {
		$autoFetch: true,
		$isEditMode: true,
		layoutSlot: layoutSlot,
		$category: "searchRequest",
		$urlParts: httpQuery.$urlParts,
		$pageCategoryClass: SearchRequest,
		$representation: {
			$prototype: {
				"$baseUrl": "/sdata/sprint1/settings/sprint1",
				$properties: {
					$query1: {
						"$type": "application/x-array",
						$item: {
							"$properties": {
								"title": {
									"$title": "Description",
									"$type": "application/x-string",
									"$capabilities": "sort,filter,alphaTab",
									"$links": {
										"$details": {
											"$type": "application/json;vnd.sage=syracuse",
											"$url": "{$baseUrl}/{$pluralType}('{$key}')?representation={$representation}.$details&role={$role}"
										}
									}
								}
							}
						}
					},
					$query2: {
						"$type": "application/x-array",
						$item: {
							"$properties": {
								"title": {
									"$title": "Description",
									"$type": "application/x-string",
									"$capabilities": "sort,filter,alphaTab",
									"$links": {
										"$details": {
											"$type": "application/json;vnd.sage=syracuse",
											"$url": "{$baseUrl}/{$pluralType}('{$key}')?representation={$representation}.$details&role={$role}"
										}
									}
								},
								"type": {
									"$title": "Type",
									"$type": "application/x-string",
									"$capabilities": "sort,filter,alphaTab"
								}
							}
						}
					},
					"query": {
						"$type": "application/x-string"
					},
					$search: {
						$type: "application/x-string",
						$title: "Search by key words",
						$links: {
							$suggest: {}
						}
					}
				},
				$links: {
					$queryLink1: {
						$url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}&source=functions&count=5"
					},
					$queryLink2: {
						$url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}&source=data&count=5"
					},
					$searchLink: {
						"$type": "application/json;vnd.sage=syracuse",
						$url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}"
					},
					$arrow: {},
					$advancedSearch: {
						$title: localize.advanced_search_label,
						$url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}"
					}
				}
			},
			$article: {
				$isTitleHidden: true,
				$layout: {
					$items: [{
						$bind: "$search",
						$isTopLabelAlignment: false,
						$category: "field",
						$skin: "s-search-rq-field",
						$inplace: true
					}, {
						$bind: "$searchLink",
						$category: "link",
						$noText: true,
						$skin: "s-site-search-picker"
					}]
				}
			}
		}
	};
	return document.site.loadNewPage($itemPage);

};