"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

function SearchField() {}

exports.SearchField = helpers.defineClass(SearchField, Field, {
	onInputChange: function(input, event) {
		// this.onInputValidate(event);
	},
	closeSuggest: function() {
		this.suggestPopup && this.suggestPopup.close();
	},
	_showPicker: function(onOut) {
		var show = this.getDataValue() != "";
		if (show) {
			this.mnPickers.clear.style.opacity = onOut ? 0.4 : 1;
			this.mnPickers.clear.style.display = "";
		} else {
			this.mnPickers.clear.style.display = "none";
		}
	},
	onSearchClick: function() {
		var value = this.getDataValue();
		if (value !== "") {
			this.setDatasetValue(value);
			syra_controller.executeMenu(this.$menus.$search, this.articleParent);
		}
	},
	notifyFieldChange: function(newValue, validated) {
		this.onSearchClick();
	},
	onClearClick: function() {
		this.setDataValue("");
		this._showPicker(false);
		this.closeSuggest();
		this.onInputValidate(); //trigger notification change
	},
	onInputFocusin: function(input, event) {
		this._showPicker();
	},
	onInputFocusout: function(input, event) {
		this._showPicker(true);
	},
	onKeyUp: function(input, event) {
		this._showPicker();
	},
	applyShortCuts: function(shortcurts) {
		var self = this;
		if (this._isAutoComplete) {
			// don't run search if 'Enter' button
			if (!shortcurts.enter) {
				//stop any previous ongoing search request
				clearTimeout(this._searching);
				// run search
				this.runAutoCompleteSearch();
				if (this.suggestPopup) { // handle navigation in drop down search result list (down(40) and up(38))
					if ((shortcurts.up || shortcurts.down) && this.suggestPopup) {
						var searchResRecords = this.page.boundFields.$query1[0].records.concat(this.page.boundFields.$query2[0].records);
						var index = this._getFocusRecIndex(searchResRecords);
						var jj = searchResRecords.length;
						if (index != undefined) {
							index = shortcurts.down ? ((index + 1) <= (jj - 1) ? (index + 1) : 0) : ((index - 1) >= 0 ? (index - 1) : jj - 1);
						} else {
							index = shortcurts.down ? 0 : jj - 1;
						}
						searchResRecords[index].domItem.className += " s-search-rq-field-carditem-hover";
						this.$isArrowClicked = true;
					}
				}
			} else {
				// remove autocomplete list if opened
				if (this.suggestPopup) {
					// handle navigation in drop down search result list (enter)
					var searchResRecords = this.page.boundFields.$query1[0].records.concat(this.page.boundFields.$query2[0].records);
					var index = this._getFocusRecIndex(searchResRecords);
					if (index != undefined && this.$isArrowClicked) {
						var record = searchResRecords[index];
						record.domItem.click();
						this.$isRecordTriggered = true;
					} else {
						// run search if field not empty
						if (this.getDataValue() !== '') {
							this.onInputValidate();
						}
						// close popup
						this.closeSuggest();
					}
				} else {
					if (this.getDataValue() !== '') {
						clearTimeout(this._searching);
						clearTimeout(this._onFieldChangeNotification);
						this._onFieldChangeNotification = setTimeout(function() {
							self.notifyFieldChange(self.getDataValue());
						}, 200);
					}
				}
			}
		}
	},
	runAutoCompleteSearch: function(event) {
		var self = this;
		self._searching = setTimeout(function() {
			// search doesn't take whitespace into account
			if (self.getDataValue().replace(/\s+/g, '') !== "") {

				// if some research has already been done, proceed with the request if the value has changed
				if (self.searchValue) {

					if (self.searchValue !== self.getDataValue()) {
						self.toggleAutoCompleteList(true);
					} else {
						// if empty field, close incremental search popup
						if (self.searchValue == self.getDataValue() == "") {
							self.closeSuggest();
						}
					}
				} else {
					// first research (self.searchValue not set yet)
					self.toggleAutoCompleteList(true);
				}
			} else {
				self.closeSuggest();
			}

		}, 1000);
	},
	_onAutoCompleteOpen: function() {
		return this.page.loadAutoCompleteList(this);
	},
	_onAutoCompleteClose: function() {
		this.page.unloadAutoCompleteList();
	},
	toggleAutoCompleteList: function(show) {
		var self = this;

		if (self.getDataValue() !== "") {
			self.domItem.id = self.id;
			self.focus();

			self.searchValue = self.getDataValue();

			if (self.suggestPopup) {
				self._onAutoCompleteOpen();
			} else {
				self.suggestPopup = syra_site.dialogManager.openPopup(self.boxParent, {
					content: self,
					slot: self._onAutoCompleteOpen(),
					position: {
						my: "right top",
						at: "right bottom",
						of: $(self.domItem)
					},
					onClose: function() {
						self.searchValue = null;
						self.suggestPopup = null;
						self._onAutoCompleteClose();
					}
				});
			}
		} else {
			self.closeSuggest();
		}
	},
	_getFocusRecIndex: function(records) {
		for (var ii = 0, jj = records.length; ii < jj; ii++) {
			var rec = records[ii];
			if (rec.domItem.className.indexOf("s-search-rq-field-carditem-hover") >= 0) {
				syra_site.dom.toggleClass(rec.domItem, "s-search-rq-field-carditem-hover", false);
				return ii;
			}
		}
	},
	dispose: function() {
		this.$isArrowClicked = this.$isRecordTriggered = null;
		Field.prototype.dispose.call(this);
	}
});