"use strict";
var _helpers = require('syracuse-core/lib/helpers');
var MenuItem = require('syracuse-ui/lib/menus/menuItem').MenuItem;
var _sectionBlock = require('syracuse-ui/lib/article/sectionBlock');
var flashWidget = require('syracuse-ui/lib/field/chart/flashWidget');
var highCharts = require('syracuse-ui/lib/field/chart/highCharts');
var orgChart = require('syracuse-ui/lib/field/chart/orgChart');
var timeline = require('syracuse-ui/lib/field/schedule/timeline');
var planningCalendar = require('syracuse-ui/lib/field/chart/planningCalendar');
var alphaNumField = require('syracuse-ui/lib/field/alphaNumField');
var Field = require('syracuse-ui/lib/field/field').Field;
var LazyWidget = require('syracuse-ui/lib/site/lazy/lazyWidget').LazyWidget;
var DateTimeField = require('syracuse-ui/lib/field/datetimeField').DateTimeField;
var NumericField = require('syracuse-ui/lib/field/numericField').NumericField;
var DocumentField = require('syracuse-ui/lib/field/documentField').DocumentField;
var HtmlField = require('syracuse-ui/lib/field/htmlField').HtmlField;
var UnknowField = require('syracuse-ui/lib/field/unknowField').UnknowField;
var widgetFactory = require('syracuse-ui/lib/site/widgetFactory');

var vignetteFormats = {
	"$html": require('syracuse-ui/lib/field/vignette/htmlVignetteField').HTMLVignetteField,
	"$webi": require('syracuse-ui/lib/field/vignette/boWebIVignetteField').BOWebIVignetteField,
	"$page": require('syracuse-ui/lib/field/vignette/pageVignetteField').PageVignetteField,
	"$item": require('syracuse-ui/lib/field/vignette/itemVignetteField').ItemVignetteField
};

var _fieldTypes = {
	"application/x-variant": require('syracuse-ui/lib/field/variantField').VariantField,
	"application/x-icon": require('syracuse-ui/lib/field/iconField').IconField,
	"application/x-choice": require('syracuse-ui/lib/field/choice/choiceField').ChoiceField,
	"application/x-date": DateTimeField,
	"application/x-time": DateTimeField,
	"application/x-datetime": DateTimeField,
	"application/x-boolean": require('syracuse-ui/lib/field/booleanField').BooleanField,
	"application/x-integer": NumericField,
	"application/x-decimal": NumericField,
	"application/x-real": NumericField,
	"application/x-quantity": NumericField,
	"application/x-password": require('syracuse-ui/lib/field/passwordField').PasswordField,
	"application/x-string$html": HtmlField,
	"application/x-string$text": Field,
	"application/x-string$phone": alphaNumField.PhoneField,
	"application/x-string$email": alphaNumField.EmailField,
	"application/x-string$url": alphaNumField.UrlField,
	"application/x-reference": require('syracuse-ui/lib/field/referenceField').ReferenceField,
	"application/x-object": require('syracuse-ui/lib/field/child/childField').ChildField,
	"application/x-graph$d3": require('syracuse-ui/lib/field/chart/d3Graph'),
	"application/x-tag-cloud$d3": require('syracuse-ui/lib/field/chart/d3TagCloud'),
	"application/x-shockwave-flash$safeV1": flashWidget.FlashWidget,
	"application/x-calendar": require('syracuse-ui/lib/field/schedule/calendar').Calendar,
	"application/x-gantt": require('syracuse-ui/lib/field/schedule/gantt').Gantt,
	"application/x-process": require('syracuse-ui/lib/field/process/visualProcess').VisualProcess,
	"text/rtf": require('syracuse-ui/lib/field/editor/htmlEditor').HtmlEditor,
	"text/html": require('syracuse-ui/lib/field/editor/htmlEditor').HtmlEditor,
	"text/plain": require('syracuse-ui/lib/field/textPlainField').TextPlainField,
	"application/x-filter": require('syracuse-ui/lib/field/filter/filterWidget').FilterWidget,
	"application/wid": require('syracuse-ui/lib/field/vignette/boWebIVignetteField').BOWebIVignetteField,
};

var vignettePage = require('syracuse-ui/lib/page/vignettePage').VignettePage;
exports.pageCategories = {
	landing: require('syracuse-ui/lib/page/landing/landingPageMaster').LandingPageMaster,
	navigation: require('syracuse-ui/lib/page/navigation/navigationPage').NavigationPage,
	portlet: vignettePage,
	vignette: vignettePage,
	fusion: require('syracuse-ui/lib/fusion/article/sheetPage').SheetPage,
	search: require('syracuse-ui/lib/search/searchPage').SearchPage,
	landingVignetteSelect: require('syracuse-ui/lib/page/landing/search/landingVignetteSelect').LandingVignetteSelect
};

var MultiArrayField = require("syracuse-ui/lib/field/array/multiArrayField").MultiArrayField;
var SingleArrayField = require("syracuse-ui/lib/field/array/singleArrayField").SingleArrayField;

exports.categories = {
	space: {
		create: function($item) {
			return new _sectionBlock.SpaceBox();
		}
	},
	lazy: {
		create: function($item) {
			return new LazyWidget($item.$path, $item);
		}
	},
	section: {
		create: function($item) {
			return new _sectionBlock.SectionBlock();
		}
	},
	block: {
		create: function($item) {
			return new _sectionBlock.SectionBlock();
		}
	},
	menus: {
		create: function($item) {
			return new _sectionBlock.MenuGroup();
		}
	},
	link: {
		create: function() {
			return new MenuItem();
		}
	},
	tabularChart: {
		decocators: {
			"cube$highCharts": highCharts.TabularChart,
			"cube$flash": flashWidget.CubeChart,
			"agenda": flashWidget.FlashWidget,
			"gantt": flashWidget.FlashWidget,
			"orgview": orgChart.OrgChart,
			"timeline": timeline.Widget,
			"calendar": planningCalendar.PlanningCalendar
		},
		create: function($item, boxParent) {
			var article = boxParent.getArticle(),
				proto = article.$prototype,
				$field = $item.$field || proto.$properties[$item.$bind], // renderer = ($field.$cube && "flash") || $item.$renderer,
				renderer = $item.$renderer || ($field.$cube && "highCharts"),
				$stereotype = ($field.$cube && "cube") || ($field.$decorator && $field.$decorator.$stereotype);

			if ($stereotype) {
				var decocatorClass = this.decocators[$stereotype + (renderer ? "$" + renderer : "")];
				return decocatorClass && new decocatorClass();
			}
			return null;
		}
	},
	field: {
		create: function($item, boxParent) {
			var article = boxParent.getArticle();
			var field;
			if ($item.$field && !$item.$fieldId) {
				$item.$fieldId = _helpers.uuid.generate(); //ensure id for vignette
			}
			if (article && article.reloadingFields) {
				var $key = $item.$bind || $item.$fieldId;
				if ($key) {
					field = article.reloadingFields[$key];
					if (field) {
						field.isReloading = true;
						delete article.reloadingFields[$key];
						if (field) {
							if (field.onReloading) {
								field = field.onReloading($item);
							} else {
								article.page.initializeNewItem(field, $item, boxParent);
								if (field.applyDesignMetaData) {
									field.applyDesignMetaData($item, true);
								}
							}
							if (field) {
								return field;
							}
						}

					}
				}
			}
			if ($item.$bind == "$criteria") {
				//debugger;
			}
			var $field = $item.$field || article.$prototype.$properties[$item.$bind];
			if ($field && $field.$isExcluded) {
				if (!(article.isRecordArticle && article.list && article.list.$prototype && article.list.$prototype.$treeview)) {
					//if (article && article.page.isVignettePage) {
					$field = null;
				}
			}
			if ($field) {
				var $class = $field.$type;
				var fieldClass = $item.$class;
				if (!fieldClass) {
					switch ($class) {
						case "application/x-array":
							if (!$field.$item.$properties || $field.$item.$type == "application/x-reference") {
								fieldClass = SingleArrayField;
							} else {
								fieldClass = MultiArrayField;
							}
							var openerUrlSegments = article.page.openerUrlSegments;
							var view = openerUrlSegments && openerUrlSegments.params && openerUrlSegments.params.view;
							if (view == "calendar") {
								$field.$decorator = $field.$decorator || {};
								$item.$graphPosition = $item.$graphPosition || "front";
								$field.$isListHidden = true;
								if (!$field.$decorator.$stereotype) {
									$field.$decorator.$stereotype = "calendar";
									$field.$decorator.$category = "agenda";
								}
							}
							break;
						case "application/x-portlet":
						case "application/x-vignette":
							if (!$field.$format && $field.$location) {
								$field.$format = $field.$location.$type == "html" ? "$html" : "$page";
							}
							$field.$format = $field.$format || "$html";
							fieldClass = vignetteFormats[$field.$format];
							break;
						case "application/x-tag-cloud":
							var $format = $field.$format || $item.$format || "d3.tagCloud";
							var parts = $format.split(".");
							fieldClass = _fieldTypes[$class + "$" + parts[0]][parts[1]];
							break;
						case "application/x-graph":
							var $format = $field.$format || $item.$format || "d3.nodeChart";
							var parts = $format.split(".");
							fieldClass = _fieldTypes[$class + "$" + parts[0]][parts[1]];
							break;
						case "application/x-string":
							$class += ($field.$format || "$text");
							break;
						case "application/x-shockwave-flash":
							if (!syra_site.isTabletDevice) {
								$class += ($field.$format || "$safeV1");
							}
							break;
					}
				}
				var field = article.page.createField && article.page.createField($field, $item, boxParent, $class);
				if (!field) {
					fieldClass = fieldClass || _fieldTypes[$class];
					if (fieldClass) {
						field = new fieldClass();
					}
				}
				if (!field) {
					switch ($class) {
						case "application/x-binary":
						case "application/x-document":
						case "image":
							field = new DocumentField();
							break;
						default:
							if ($field.$url) {
								$field.$contentType = $field.$type;
								$field.$acceptedTypes = $field.$acceptedTypes || [];
								$field.$acceptedTypes.push($field.$contentType);
								field = new DocumentField();
							}
							break;
					}
				}
				if (!field) {
					field = new UnknowField();
					field.unknowMode = "nowidget";
				}
				if (field) {
					field.isField = true;
					field.$designLevel = "field";
					field.$field = $field;
				}
			} else {
				field = new UnknowField();
				field.unknowMode = "noproto";
				field.$field = {
					$type: "unknow"
				};
				field.isField = true;
				field.$designLevel = "field";
			}
			return field;
		}
	}
};

// media types, without the optional $subtype part
var _mediaTypes = Object.keys(_fieldTypes).reduce(function(r, t) {
	var i = t.indexOf('$');
	r[i >= 0 ? t.substring(0, i) : t] = true;
	return r;
}, {
	// types that are not in the list above but are known to the framework
	'application/json': true,
	'application/x-json': true,
	'application/x-array': true,
	'application/x-pointer': true,
	'application/x-vignette': true,
	'application/x-document': true,
	'image': true,
	'application/x-binary': true,
});

exports.hasWidget = function(type) {
	// hack to avoid problem with $type: {$baseUrl}...
	if (type && type[0] === '{')
		return true; // temporary hack to deal with invalid prototypes
	// hack to avoid problem with $type: application/json; vnd.sage=...
	var semi = type && type.indexOf(';');
	if (semi > 0)
		type = type.substring(0, semi);
	// normal path
	return _mediaTypes[type];
};

exports.registerWidget = function(type, api) {
	_fieldTypes[type] = widgetFactory.makeClass(type, api);
};