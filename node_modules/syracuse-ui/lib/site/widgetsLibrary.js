"use strict";
var MenuItem = require('syracuse-ui/lib/menus/menuItem').MenuItem;
var SectionBlock = require('syracuse-ui/lib/article/sectionBlock').SectionBlock;
var MenuGroup = require('syracuse-ui/lib/menus/menuGroup').MenuGroup;
var SearchFacets = require('syracuse-ui/lib/site/search/searchFacets').SearchFacets;
var VignetteField = require('syracuse-ui/lib/field/vignette/vignetteField').VignetteField;
var flashWidget = require('syracuse-ui/lib/field/chart/flashWidget');
var highCharts = require('syracuse-ui/lib/field/chart/highCharts');
var alphaNumField = require('syracuse-ui/lib/field/alphaNumField');
var Field = require('syracuse-ui/lib/field/field').Field;
var LazyWidget = require('syracuse-ui/lib/site/lazy/lazyWidget').LazyWidget;
var DateTimeField = require('syracuse-ui/lib/field/datetimeField').DateTimeField;
var NumericField = require('syracuse-ui/lib/field/numericField').NumericField;
var SpaceBox = require('syracuse-ui/lib/article/layouts/spaceBox').SpaceBox;
exports.fieldTypes = {
    "application/x-icon": require('syracuse-ui/lib/field/iconField').IconField,
    "application/x-choice": require('syracuse-ui/lib/field/choice/choiceField').ChoiceField,
    "application/x-date": DateTimeField,
    "application/x-time": DateTimeField,
    "application/x-datetime": DateTimeField,
    "application/x-binary": require('syracuse-ui/lib/field/binary/fileField').FileField,
    "image": require('syracuse-ui/lib/field/binary/imageField').ImageField,
    "application/x-boolean": require('syracuse-ui/lib/field/booleanField').BooleanField,
    "application/x-integer": NumericField,
    "application/x-decimal": NumericField,
    "application/x-real": NumericField,
    "application/x-password": require('syracuse-ui/lib/field/passwordField').PasswordField,
    "application/x-string$text": Field,
    "application/x-string$phone": alphaNumField.PhoneField,
    "application/x-string$email": alphaNumField.EmailField,
    "application/x-string$url": alphaNumField.UrlField,
    "application/x-array": require("syracuse-ui/lib/field/array/list").DesktopList,
    "application/x-reference": require('syracuse-ui/lib/field/referenceField').ReferenceField,
    "application/x-object": require('syracuse-ui/lib/field/child/childField').ChildField,
    "application/x-cube": require('syracuse-ui/lib/field/cube/cubeField'),
    "application/x-portlet": VignetteField,
    "application/x-vignette": VignetteField,
    "application/x-graph$d3": require('syracuse-ui/lib/field/chart/d3Graph'),
    "application/x-tag-cloud$d3": require('syracuse-ui/lib/field/chart/d3TagCloud'),
    "application/x-calendar": require('syracuse-ui/lib/field/schedule/calendar').Calendar,
    "application/x-gantt": require('syracuse-ui/lib/field/schedule/gantt').Gantt,
    "application/x-process": require('syracuse-ui/lib/field/process/visualProcess').VisualProcess,
    "text/rtf": require('syracuse-ui/lib/field/editor/htmlEditor').HtmlEditor,
    "text/html": require('syracuse-ui/lib/field/editor/htmlEditor').HtmlEditor,
    "application/x-filter": require('syracuse-ui/lib/field/filter/filterWidget').FilterWidget
};
exports.defaultPageCategory = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
exports.pageCategories = {
    soap: require('syracuse-ui/lib/soap/soapPage').SoapPage,
    fusion: require('syracuse-ui/lib/fusion/article/sheetPage').SheetPage
};

exports.categories = {
    space: {
        create: function($item){
            return new SpaceBox();
        }
    },
    lazy: {
        create: function($item){
            return new LazyWidget($item.$path, $item);
        }
    },
    searchFacets: {
        create: function(){
            return new SearchFacets();
        }
    },
    section: {
        create: function($item){
            var section = new SectionBlock();
            section.initializeSection($item);
            return section;
        }
    },
    block: {
        create: function($item){
            var section = new SectionBlock();
            section.initializeSection($item);
            return section;
        }
    },
    menus: {
        create: function(){
            return new MenuGroup();
        }
    },
    link: {
        create: function(){
            return new MenuItem();
        }
    },
    tabularChart: {
        decocators: {
            "cube$highCharts": highCharts.TabularChart,
            "cube$flash": flashWidget.CubeChart,
            "agenda": flashWidget.FlashWidget,
            "gantt": flashWidget.FlashWidget
        },
        create: function($item, boxParent){
            var article = boxParent.getArticle(), proto = article.$prototype, $field = $item.$field || proto.$properties[$item.$bind], // renderer = ($field.$cube && "flash") || $item.$renderer,
 renderer = $item.$renderer || ($field.$cube && "highCharts"), $stereotype = ($field.$cube && "cube") || ($field.$decorator && $field.$decorator.$stereotype);
            
            if ($stereotype) {
                var decocatorClass = this.decocators[$stereotype + (renderer ? "$" + renderer : "")];
                return decocatorClass && new decocatorClass();
            }
            return null;
        }
    },
    field: {
        create: function($item, boxParent){
            var article = boxParent.getArticle();
            var $field = $item.$field || article.$prototype.$properties[$item.$bind];
            var field;
            if ($field) {
                var $class = $field.$type;
                var fieldClass;
                switch ($class) {
                    case "application/x-tag-cloud":
                        var $format = $field.$format || $item.$format || "d3.tagCloud";
                        var parts = $format.split(".");
                        fieldClass = exports.fieldTypes[$class + "$" + parts[0]][parts[1]];
                        break;
                    case "application/x-graph":
                        var $format = $field.$format || $item.$format || "d3.nodeChart";
                        var parts = $format.split(".");
                        fieldClass = exports.fieldTypes[$class + "$" + parts[0]][parts[1]];
                        break;
                    case "application/x-string":
                        $class += ($field.$format || "$text");
                        break;
                }
                var field = article.page.createField($field, $item, boxParent, $class);
                if (!field) {
                    fieldClass = fieldClass || exports.fieldTypes[$class];
                    if (fieldClass) {
                        (field = new fieldClass()).$field = $field;
                    }
                }
                if (!field) {
                    console.log("Field type unknown: field=" + $item.$bind + ", type=" + ($field.$type || ""));
                }
                else {
                    field.$authoringLevel = "field";
                    field.isField = true;
                }
            }
            else {
                console.log($item.$bind + " is defined in Layout but not in proto");
            }
            return field;
        }
    }
};
