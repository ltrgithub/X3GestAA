"use strict";
var _field = {
	setInfo: function(field) {
		if (field.domItem) {
			field.domItem.setAttribute("data-s-field", field.id);
			field.textArea && field.textArea.setAttribute("data-s-field", field.id);
			field.confirmInput && field.confirmInput.setAttribute("data-s-field", field.id);
			this._setCommon(field, field._dataValue);
			if (field.input) {
				field.input.setAttribute("data-s-field", field.id);
				this._setCommon(field, field.input);
			}
			this._setPickers(field);
			if (field.builder) {
				this._setChoice(field);
			}
		}
	},
	_setCommon: function(field, dom) {
		if (dom) {
			if (field.$isEditMode) {
				if (field.$isMandatory !== undefined) {
					this._setMandatory(field, dom);
				}
			}
			dom.setAttribute("data-s-q-bind", dom.syra_field_bind = field.$item.$bind || "");
			dom.setAttribute("data-s-q-title", dom.syra_field_title = field.getTitle());
			field.$field.$X3Name && dom.setAttribute("data-s-q-x3Name", dom.syra_field_x3Name = field.$field.$X3Name);
		}
	},
	_setMandatory: function(field, dom) {
		if (field.$isMandatory) {
			dom.setAttribute("data-s-q-mandatory", field.$isMandatory);
		} else {
			if (dom.hasAttribute("data-s-q-mandatory")) {
				dom.removeAttribute(_keys.$isMandatory);
			}
		}
	},
	_setPickers: function(field) {
		if (field.mnPickers) {
			var ids = Object.keys(field.mnPickers);
			for (var ii = 0, jj = ids.length; ii < jj; ii++) {
				var picker = field.mnPickers[ids[ii]];
				picker && picker.setAttribute("data-s-picker2", picker.syraPickerType);
			}
		}
	},
	_setChoice: function(field) {
		if (field.builder._choices) {
			switch (field.$item.$format) {
				case "$combo":
					for (var ii = 0, jj = field.builder._choices.length; ii < jj; ii++) {
						var choice = field.builder._choices[ii];
						choice.link && choice.link.setAttribute("data-s-picker2", "field-choice");
					}
					break;
				case "$button":
					for (var ii = 0, jj = field.builder._choices.length; ii < jj; ii++) {
						var btn = field.builder._choices[ii];
						btn.setAttribute("data-s-picker2", field.$item.$icon ? "choice" : "onChoiceClick");
					}
					break;
				case "$radios":
					for (var ii = 0, jj = field.builder._choices.length; ii < jj; ii++) {
						var btn = field.builder._choices[ii];
						btn.checkBox.input.setAttribute("data-s-field", field.id);
					}
					break;
			}

		}
	}
};

function _ensureQualityAside() {
	var aside = syra_site.qualityAside;
	if (!aside) {
		syra_site.qualityAside = aside = document.createElement("aside");
		aside.id = "s-site-quality";
		aside.style.display = "none";
		syra_site.layoutSlot.appendChild(aside);
	}
	return aside;
}

exports.onAfterLogon = function(onAfterLogon) {
	_ensureQualityAside();
	exports.logRequestCount();
	exports.logLock();
	exports.logUserProfile();
	onAfterLogon();
};

exports.openTestPage = function(segments) {
	if (segments && segments.$url && (segments.$url.indexOf("s-uitest") >= 0)) {
		syra_site.loadStyleSheet("uitest.css");
		require.async("syracuse-ui/lib/tests/pages/testPage", function(err, module) {
			try {
				var $itemPage = {
					layoutSlot: document.createElement("div"),
					$category: "page",
					openerUrlSegments: segments,
					$pageCategoryClass: module.TestPage,
					$representation: {
						$prototype: {
							$testName: segments.params.name.replace("_", "/"),
							$testCategory: segments.params.category,
							$properties: {},
							$links: {},
							$actions: {}
						},
						$article: {}
					}
				};
				$itemPage.openerUrlSegments.fullUrl = document.location.href;
				syra_site.onMainPageChange($itemPage);
			} catch (error) {
				console.error(error.message + "\n" + error.stack);
			}
		});
		return true;
	}
};

exports.page_endChange = function(page) {
	if (page.qualityIsLoaded) {
		var map = syra_store.getMap();
		var ids = Object.keys(map);
		for (var ii = 0, jj = ids.length; ii < jj; ii++) {
			var item = map[ids[ii]];
			if (item.page == page) {
				if (page.isNavigationPage) {
					if (item.isField && item.codeMenu && item.codeMenu.domItem) {
						var articleParent = item.articleParent;
						while (articleParent) {
							if (articleParent.isModuleRecord) {
								item.codeMenu.domItem.setAttribute("data-s-module", articleParent.$uuid);
								break;
							}
							articleParent = articleParent.articleParent;
						}
					}
				}
				if (item.isFusionPage) {
					item.domItem.setAttribute("data-s-fusion-page", "1");
					var blocks = item.fusionBar && item.fusionBar.blocks;
					if (blocks) {
						for (var mm = 0, kk = blocks.length; mm < kk; mm++) {
							block.domItem.setAttribute("data-s-block", block.index);
						}
					}
				}
				if (item.isField || item.isList) {
					_field.setInfo(item);
					if (item.isList) {
						if (item.builder.allColumns) {
							for (var mm = 0, kk = item.builder.allColumns.length; mm < kk; mm++) {
								var col = item.builder.allColumns[mm];
								if (col.titleCell) {
									col.titleCell.setAttribute("data-s-q-test-bind", col.$bind);
									col.titleCell.setAttribute("data-s-bind", col.$bind);
								}
							}
						}
					}
				}
				if (item.popupCard) {
					item.popupCard.mnPicker && item.popupCard.mnPicker.setAttribute("data-s-picker2", item.popupCard.mnPicker.syraPickerType);
				}

				if (item.isRecordArticle) {
					item.domItem.setAttribute("data-s-record", item.$uuid);
					item.dataRow && item.dataRow.setAttribute("data-s-record", item.$uuid);
					item.body && item.body.setAttribute("data-s-record", item.$uuid);
					item.freezeRow && item.freezeRow.setAttribute("data-s-record", item.$uuid);
					if (item.treeNode) {
						item.treeNode.item && item.treeNode.item.setAttribute("data-s-record", item.$uuid);
					}
					item.rowCard && item.rowCard.contentSlot && item.rowCard.contentSlot.outCardSlot.setAttribute("data-s-record", item.$uuid);
					item.outCardSlot && item.outCardSlot.setAttribute("data-s-record", item.$uuid);

				}

			}
		}
	}
};
exports.page_onAfterLoad = function(page) {
	page.qualityIsLoaded = true;
	exports.page_endChange(page);
	if (typeof window.callPhantom === 'function') {
		window.callPhantom({
			event: "onAfterLoad",
			autoFetch: true
		});
	}
};

exports.logUserProfile = function() {
	var dataset = syra_site.userProfile.dataset;
	var value = (dataset.selectedLocale && dataset.selectedLocale.$value) || "";
	var aside = _ensureQualityAside();
	aside.setAttribute('data-s-q-local', value);
	aside.setAttribute('data-s-q-role', (dataset.selectedRole && dataset.selectedRole.description) || "");
	aside.setAttribute('data-s-q-endpoint', (dataset.selectedEndpoint && dataset.selectedEndpoint.description) || "");
};

exports.logRequestCount = function(count) {
	_ensureQualityAside().setAttribute("data-s-q-request-count", count || 0);
};
exports.logLock = function(value) {
	_ensureQualityAside().setAttribute("data-s-q-uilock", value || 0);
};