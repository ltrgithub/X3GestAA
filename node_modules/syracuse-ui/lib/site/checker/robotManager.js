"use strict";
var _global;

exports.onAfterLogon = function() {
	//var _global = document.createElement("aside");
	//_global.style.display = "none";
	//syra_site.layoutSlot.appendChild(_global);
	_global = syra_site.layoutSlot;
	exports.logRequestCount();
	exports.logLock();
	exports.logPreferences();
};

//syra_checker.robot.


exports.logPreferences = function() {
	var dataset = syra_site.userProfile.dataset;
	var value = (dataset.selectedLocale && dataset.selectedLocale.$value) || "";
	syra_site.body.setAttribute('data-s-q-local', value);
	_global.setAttribute('data-s-q-local', value);
	_global.setAttribute('data-s-q-role', (dataset.selectedRole && dataset.selectedRole.description) || "");
	_global.setAttribute('data-s-q-endpoint', (dataset.selectedEndpoint && dataset.selectedEndpoint.description) || "");
};

exports.logRequestCount = function(count) {
	_global.setAttribute("data-s-q-request-count", count || 0);
};
exports.logLock = function(value) {
	_global.setAttribute("data-s-q-uilock", value || 0);
};

function _setFieldInfo(field, dom) {
	if (dom) {
		if (field.$isEditMode && field.$isMandatory !== undefined) {
			if (field.$isMandatory) {
				dom.setAttribute("data-s-q-mandatory", field.$isMandatory);
			} else {
				if (dom.hasAttribute("data-s-q-mandatory")) {
					dom.removeAttribute(_keys.$isMandatory);
				}
			}
		}
		dom.setAttribute("data-s-q-bind", dom.syra_field_bind = field.$item.$bind || "");
		dom.setAttribute("data-s-q-title", dom.syra_field_title = field.getTitle());
		field.$field.$X3Name && dom.setAttribute("data-s-q-x3Name", dom.syra_field_x3Name = field.$field.$X3Name);
	}
}

function _setFieldPickers(field) {
	if (field.mnPickers) {
		var ids = Object.keys(field.mnPickers);
		for (var ii = 0, jj = ids.length; ii < jj; ii++) {
			var picker = field.mnPickers[ids[ii]];
			picker && picker.setAttribute("data-s-picker2", picker.syraPickerType);
		}
	}
}

exports.page_onAfterLoad = function(page) {
	var map = syra_store.getMap();
	var ids = Object.keys(map);
	for (var ii = 0, jj = ids.length; ii < jj; ii++) {
		var item = map[ids[ii]];
		if (item.page == page) {
			if (item.isField || item.isList) {
				_setFieldInfo(item, item._dataValue);
				_setFieldInfo(item, item.input);
				_setFieldPickers(item);
				if (item.builder && item.builder.$item && item.builder.$item.$format) {
					if (item.builder._choices) {
						item.builder._choices.forEach(function(choice) {
							choice.link && choice.link.setAttribute("data-s-picker2", "field-choice");
						});
					}
				}
			}
			item.mnPicker && item.mnPicker.setAttribute("data-s-picker2", item.mnPicker.syraPickerType);

		}

	}
};