"use strict";
var _domQuery = require("syracuse-ui/lib/site/quality/domQuery");

var _page = {
	setNavigation: function(page, item) {
		if (item.isField && item.codeMenu && item.codeMenu.domItem) {
			var articleParent = item.articleParent;
			while (articleParent) {
				if (articleParent.isModuleRecord) {
					item.codeMenu.domItem.setAttribute("data-s-module", articleParent.$uuid);
					break;
				}
				articleParent = articleParent.articleParent;
			}
		}
	},
	setFusion: function(page) {
		page.domItem.setAttribute("data-s-fusion-page", "1");
		var blocks = page.fusionBar && page.fusionBar.blocks;
		if (blocks) {
			for (var mm = 0, kk = blocks.length; mm < kk; mm++) {
				var block = blocks[mm];
				block.domItem.setAttribute("data-s-block", block.index);
			}
		}
	}
};

function _setHidden(dom, $isHidden) {
	if ($isHidden) {
		dom.setAttribute("data-s-hidden", "1");
	} else {
		dom.removeAttribute("data-s-hidden");
	}
}

function _setPickers(item) {
	if (item.buttons) {
		for (var ii = 0, jj = item.buttons.length; ii < jj; ii++) {
			var picker = item.buttons[ii];
			picker.pickerId && picker.link.setAttribute("data-s-picker", picker.pickerId);
		}
	}
}

var _field = {
	setTreeInfo: function(list) {
		if (list.treeDecorator) {
			var nodes = list.treeDecorator._nodes;
			if (nodes) {
				var ids = Object.keys(nodes);
				for (var ii = 0, jj = ids.length; ii < jj; ii++) {
					var node = nodes[ids[ii]];
					if (node && node.slot && node.parentUiid !== undefined) {
						node.slot.setAttribute("data-s-tree-parent-node", node.parentUiid);
					}
				}
			}
		}
	},
	_setValue: function(field, target) {
		if (target) {
			field.getDataValue && target.setAttribute("data-s-value", field.getInputValue ? field.getInputValue() : field.getDataValue());
			field.getDisplayText && target.setAttribute("data-s-value-display", field.getDisplayText());
		}
	},
	setInfo: function(field) {
		if (field.domItem) {
			_setHidden(field.domItem, field.$isHidden);
			field.domItem.setAttribute("data-s-field", field.id);
			field.textArea && field.textArea.setAttribute("data-s-field", field.id);
			field.confirmInput && field.confirmInput.setAttribute("data-s-field", field.id);
			if (field.$isMandatory !== undefined) {
				if (field.$isMandatory) {
					field.domItem.setAttribute("data-s-mandatory", 1);
				} else {
					if (field.domItem.hasAttribute("data-s-mandatory")) {
						field.domItem.removeAttribute("data-s-mandatory");
					}
				}
			}

			if (field.getTitle) {
				field.domTitle && field.domTitle.setAttribute("data-s-field-title", field.getTitle());
				field.domItem.setAttribute("data-s-title", field.domItem.syra_field_title = field.getTitle());
			}

			field.domItem.setAttribute("data-s-field-edit-mode", field.$isEditMode ? 1 : 0);
			field.domItem.id = field.id;
			field.domItem.setAttribute("data-s-type", field.$field.$type);

			field.domItem.setAttribute("data-s-field-bind", field.$item.$bind || "");
			field.$field.$X3Name && field.domItem.setAttribute("data-s-field-x3Name", field.$field.$X3Name);



			field.descriptionItem && field.descriptionItem.setAttribute("data-s-description", field.descriptionText);

			this._setValue(field, field.domItem);
			this._setValue(field, field.input || field._dataValue);

			var target = field.$isEditMode ? field.input : field._dataValue;
			if (target) {
				target.setAttribute("data-s-bind", field.$item.$bind || "");
				field.$field.$X3Name && target.setAttribute("data-s-x3Name", field.$field.$X3Name);
			}
			_setPickers(field);
			if (field.choiceFormat) {
				this._setChoice(field);
			}
			if (field.$valueStyle) {
				var target = field.customStyleTarget || (field.input ? field.input : field._dataValue);
				target && target.setAttribute("data-s-value-style", field.$valueStyle);
			}
		}
	},
	_setChoiceItem: function(target, $enum) {
		target.setAttribute("data-s-choice-item-value", $enum.$value);
		target.setAttribute("data-s-choice-item-title", $enum.$title);
	},
	_setChoice: function(field) {
		if (field._choices) {
			field.domItem.setAttribute("data-s-choice-format", field.$item.$format);
			switch (field.$item.$format) {
				case "$combo":
					if (field._list) {
						field._list.setAttribute("data-s-choice-popup", field.id);
					}

					for (var ii = 0, jj = field._choices.length; ii < jj; ii++) {
						var choice = field._choices[ii];
						choice.button && this._setChoiceItem(choice.button.link, field.$enum[choice.$index || ii]);
					}
					break;
				case "$radios":
					for (var ii = 0, jj = field._choices.length; ii < jj; ii++) {
						this._setChoiceItem(field._choices[ii].checkBox.input, field.$enum[ii]);
					}
					break;
			}

		}
	}
};

var _menus = {
	setInfo: function(menuItem) {
		if (menuItem) {
			menuItem.domItem.setAttribute("data-s-menu-bind", menuItem.$bind);
			menuItem.domItem.setAttribute("data-s-menu-title", menuItem.getTitle());
		}
	},
	openPopupMenu: function(group) {
		group.body.setAttribute("data-s-menu-popup", group.contextField.id);
		var items = syra_menus.group.getMenuItems(group);
		for (var ii = 0, jj = items.length; ii < jj; ii++) {
			_menus.setInfo(items[ii]);
		}
	}
};

function _ensureQualityAside() {
	var aside = syra_site.qualityAside;
	if (!aside) {
		syra_site.qualityAside = aside = document.createElement("aside");
		aside.id = "s-site-quality";
		syra_dom.hide(aside, true);
		syra_site.layoutSlot.appendChild(aside);
	}
	return aside;
}

function _openTestPage(segments) {
	syra_site.loadStyleSheet("uitest.css");
	require.async("syracuse-ui/lib/tests/pages/testPage", function(err, module) {
		try {
			var $itemPage = {
				layoutSlot: document.createElement("div"),
				$category: "page",
				openerUrlSegments: segments,
				$pageCategoryClass: module.TestPage,
				$representation: {
					$prototype: {
						$testName: segments.params.name.replace("_", "/"),
						$testCategory: segments.params.category,
						$properties: {},
						$links: {},
						$actions: {}
					},
					$article: {}
				}
			};
			$itemPage.openerUrlSegments.fullUrl = document.location.href;
			syra_site.onMainPageChange($itemPage);
		} catch (error) {
			console.error(error.message + "\n" + error.stack);
		}
	});
}


function _activateController(controller) {
	controller.isActivated = true;
	_ensureQualityAside();

	controller.page_onAfterLoad = function(page) {
		page.qualityIsLoaded = true;
		this.page_endChange(page);
		if (typeof window.callPhantom === 'function') {
			window.callPhantom({
				event: "onAfterLoad",
				autoFetch: true
			});
		}
	};
	controller.logUserProfile = function() {
		var dataset = syra_site.userProfile.dataset;
		var value = (dataset.selectedLocale && dataset.selectedLocale.$value) || "";
		var aside = _ensureQualityAside();
		aside.setAttribute('data-s-local', value);
		aside.setAttribute('data-s-role', (dataset.selectedRole && dataset.selectedRole.description) || "");
		aside.setAttribute('data-s-endpoint', (dataset.selectedEndpoint && dataset.selectedEndpoint.description) || "");
	};
	controller.logRequestCount = function(count) {
		_ensureQualityAside().setAttribute("data-s-request-count", count || 0);
	};
	controller.logLock = function(value) {
		_ensureQualityAside().setAttribute("data-s-uilock", value || 0);
	};
	controller.logFocus = function(field) {
		_ensureQualityAside().setAttribute("data-s-focus", field.id);
	};
	controller.openChoiceComboList = function(field) {
		_field._setChoice(field);
	};
	controller.openPopupMenu = function(menusBox) {
		_menus.openPopupMenu(menusBox);
	};
	controller.page_endChange = function(page) {
		if (page.qualityIsLoaded) {
			if (page.dialogWrapper && page.dialogWrapper.dialogSlot) {
				var mode;
				switch (page.$facet) {
					case "$lookup":
					case "$select":
						mode = "select";
						break;
				}
				page.dialogWrapper.dialogSlot.setAttribute("data-s-dialog", mode || "form");
			}
			var map = syra_store.getMap();
			var ids = Object.keys(map);
			for (var ii = 0, jj = ids.length; ii < jj; ii++) {
				var item = map[ids[ii]];
				if (item == page) {
					page.body && page.body.setAttribute("data-s-body", "1");
				}
				if (item.page == page) {
					page.isNavigationPage && _page.setNavigation(page, item);

					item.isFusionPage && _page.setFusion(item);
					if (item.isArticle && item.domItem) {
						item.domItem.setAttribute("data-s-article", item.id);
					}
					item.isMenuItem && _menus.setInfo(item);

					if (item.isField || item.isArrayField) {
						_field.setInfo(item);
						if (item.isArrayField) {
							if (item.builder.allColumns) {
								for (var mm = 0, kk = item.builder.allColumns.length; mm < kk; mm++) {
									var col = item.builder.allColumns[mm];
									if (col.titleCell) {
										_setHidden(col.titleCell, col.$isHidden);
										col.titleCell.setAttribute("data-s-list-col", mm);
										col.titleCell.setAttribute("data-s-list-col-title", col.titleText);
										if (col.$bind !== undefined) {
											col.titleCell.setAttribute("data-s-list-col-bind", col.$bind);
										}
										if (col.key !== undefined) {
											col.titleCell.setAttribute("data-s-list-col-key", col.key);
										}
									}
								}
							}
							if (item.$item.$format) {
								item.domItem.setAttribute("data-s-list-format", item.$item.$format);
							}
							if (item.treeDecorator) {
								_field.setTreeInfo(item);
							}
						}
					}
					if (item.popupCard) {
						item.popupCard.picker_menus && item.popupCard.picker_menus.link.setAttribute("data-s-picker", "menus");
					}
					if (item.isRecordArticle) {
						_setPickers(item);
						if (item.isFilterArticle) {
							item.domItem.setAttribute("data-s-filter-record", item.$uuid);
						} else {
							item.domItem.setAttribute("data-s-record", item.$uuid);
							item.dataRow && item.dataRow.setAttribute("data-s-record", item.$uuid);
							item.fixedRow && item.fixedRow.setAttribute("data-s-record", item.$uuid);
							if (item.treeNode) {
								item.treeNode.item && item.treeNode.item.setAttribute("data-s-record", item.$uuid);
							}
							item.rowCard && item.rowCard.contentSlot && item.rowCard.contentSlot.outCardSlot.setAttribute("data-s-record", item.$uuid);
							item.outCardSlot && item.outCardSlot.setAttribute("data-s-record", item.$uuid);


							item.getRecordIndex && item.domItem.setAttribute("data-s-record-index", item.getRecordIndex());
						}
					}

				}
			}
		}
	};

	controller.logRequestCount();
	controller.logLock();
	controller.logUserProfile();

}

exports.create = function() {
	return {
		domQuery: _domQuery,
		onAfterLogon: function(onAfterLogon) {
			this.enableTestRobot = syra_site.userProfile.dataset.enableTestRobot || window.callPhantom;
			this.enableTestRobot && _activateController(this);
			onAfterLogon();
		},
		openTestPage: function(segments) {
			if (segments && segments.$url && (segments.$url.indexOf("s-uitest") >= 0)) {
				if (!this.isActivated) {
					_activateController(this);
				}
				_openTestPage(segments);
				return true;
			}
		},
		page_endChange: function(page) {},
		page_onAfterLoad: function(page) {},
		logUserProfile: function() {},
		logRequestCount: function(count) {},
		logLock: function(value) {},
		logFocus: function(field) {},
		openChoiceComboList: function(field) {},
		openPopupMenu: function(menusBox) {}
	};
};