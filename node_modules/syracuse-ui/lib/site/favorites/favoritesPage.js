"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;
var favorites = require("./favorites");
var FavoriteItemList = require('./favoriteItemList').FavoriteItemList;
var FavoriteMenuItem = require('./favoriteMenuItem').FavoriteMenuItem;
/* TODO: var FavoriteMenuBlock = require('./favoriteMenuBlock').FavoriteMenuBlock;*/

function FavoritesPage() {
	this.localize = locale.resources(module)();
}

exports.FavoritesPage = helpers.defineClass(FavoritesPage, DesktopPage, {
	loadBox: function() {
		var self = this;
		if (!this.closed) {
			if (!self.layoutSlot) {
				var $skin = "s-favorites-viewer";
				self.$prototype = favorites.getPrototype();
				self.$item = favorites.getArticle();
				self.layoutSlot = document.createElement("div");
				self.layoutSlot.className = $skin;
				document.site.layoutSlot.appendChild(self.layoutSlot);
				DesktopPage.prototype.loadBox.call(self);
				self._appendAutoClose(true);
			} else {
				DesktopPage.prototype.loadBox.call(self);
				self._appendAutoClose(true);
			}
		} else {
			this.closed = false;
		}
	},
	createField: function($field, $item, boxParent, $class) {
		switch ($item.$bind) {
			case "items":
				return new FavoriteItemList();
			case "$singleField":
				switch ($item.$variantItemKey) {
					case "menuItem":
						return new FavoriteMenuItem();
					case "menuBlock":
						/*TODO : return new FavoriteMenuBlock(); */
				}
				return null;
		}
		return null;
	},
	notifyChangeToServer: function(sendBag, articleSender) {

	},
	notifyDataChange: function(field, value, notifyServerChange) {
		var sendBag = this.ensureSendBag(field.articleParent, field.articleParent);
		sendBag.saveDataChange(field.articleParent, field.getArticle(), field.$item.$bind, field.parentVariantField ? field.parentVariantField.saveVariantValue(value) : value);
		if (notifyServerChange !== false) {
			this.notifyChangeToServer(sendBag, field.articleParent);
		}
		document.site.favoritesProvider.notifyDataChange(field, value);

	},
	_appendAutoClose: function(append) {
		var self = this;
		if (append) {
			self._autoCloseNamespace = self.id;
			document.site.autoCloseDialogs = document.site.autoCloseDialogs || {};
			document.site.autoCloseDialogs[self.id] = self;
			self.$$item[0].setAttribute("id", self._autoCloseNamespace);
			self._autoCloseBoundary = "#" + self._autoCloseNamespace;
			$(document).bind("click." + self._autoCloseNamespace, function(event) {
				if (self.$$item) {
					if (self.$$item.is(":visible")) {
						if (!self.isTargetInBoundary(event)) {
							self.toggle(false);
						}
					}
				}
				return true;
			});

		} else {
			if (self._autoCloseNamespace) {
				if (document.site.autoCloseDialogs) {
					//document.site.emptyDom(site.favorites);
					delete document.site.autoCloseDialogs[self.id];
				}
				$(document).unbind("click." + self._autoCloseNamespace);
			}
			document.site.emptyDom(self.layoutSlot);
			//document.body.removeChild(self.layoutSlot);
			//self.dispose()
		}

	},
	toggle: function(show) {
		if (this.$$item) {
			if (show == undefined) {
				if (this.$$item.is(":visible")) {
					this._appendAutoClose(false);
					this._toggleViewer();
				} else {
					this._appendAutoClose(true);
					this._toggleViewer(true);
				}
			} else {
				if (show) {
					this._appendAutoClose(true);
					this._toggleViewer(true);
				} else {
					this._appendAutoClose(false);
					this._toggleViewer();
				}
			}
		}
	},
	_toggleViewer: function(show) {
		if (show) {
			this.$$item.show();
			document.site.setZIndex(this.$$item[0]);
		}
		/*else {
            this.$$item.hide();
        }*/
	},
	isTargetInBoundary: function(event) {
		if (event && this._autoCloseBoundary) {
			if ($(event.target).closest(this._autoCloseBoundary).length > 0) {
				return true;
			}
		}
		return false;
	},
	close: function() {
		this.closed = true;
		this.toggle(false);
	},
	dispose: function() {
		if (document.site.autoCloseDialogs) {
			delete document.site.autoCloseDialogs[this.id];
		}
		DesktopPage.prototype.dispose.call(this);
	}
});