"use strict";
var helpers = require('syracuse-core/lib/helpers');
var FavoritesPage = require("./favoritesPage").FavoritesPage;

function FavoritesProvider(){
}

exports.FavoritesProvider = helpers.defineClass(FavoritesProvider, null, {
    maxFavorites: 25,
    save: function($url, $title, $description, params){
        if ($url) {
            if (!this.map) {
                this.map = {};
            }
            if (!this.items) {
                this.items = [];
            }
            var start = $url.indexOf("?");
            if (start) {
                $url = $url.slice(start);
            }
            if (!this.map[$url]) {
                this.map[$url] = {};
                var item = {
                    "menuItem": {}
                };
                item.menuItem.$url = $url;
                item.menuItem.description = ($description || "");
                item.menuItem.title = ($title || "");
                if (params) 
                    item.menuItem.params = params;
                this.items.push(item);
                return true;
            }
        }
        else {
            var msg = {
                "$diagnoses": [{
                    "$message": $title + " : no $url found",
                    "$severity": "warning"
                }]
            };
            document.site.showDiagnoses(msg);
        }
        return false;
    },
    onClickPicker: function(target, event){
        if (target.syraMenuItemPath) {
            var field = document.site.findField(target);
            field.isFavorite = !field.isFavorite;
            if (field.isFavorite) {
                if (this.items.length < this.maxFavorites) {
                    field.isFavorite = this.save(field.codeMenu.href, field.codeMenu.$title, field.codeMenu.$description);
                }
                else {
                    field.isFavorite = false;
                }
            }
            else {
                var url = field.codeMenu.href;
                var start = url.indexOf("?");
                if (start) {
                    url = url.slice(start);
                }
                delete this.map[url];
                for (var ii = 0; ii < this.items.length; ii++) {
                    if (this.items[ii].menuItem && this.items[ii].menuItem.$url === url) {
                        this.items.splice(ii, 1);
                        break;
                    }
                }
            }
            document.site.toggleClass(target, "s-favorite-on", field.isFavorite);
            this.updateSiteFavorites();
        }
        else 
            if (target.syraLink && target.syraLink !== "") {
                this.navigate(this._getItem(target.syraLink));
            }
    },
    _getItem: function(url){
        for (var ii = 0; ii < this.items.length; ii++) {
            if (this.items[ii].menuItem && this.items[ii].menuItem.$url === url) {
                return this.items[ii].menuItem;
            }
        }
        return null;
    },
    navigate: function(menuItem){
        var workBook, params, item = (menuItem.$item || menuItem);
        if (document.site.fusionGateway && (workBook = document.site.fusionGateway.activatedBook)) {
            var self = this;
            if (item && item.params) { //x3 fct : open via ackcall
                //how to get current field with best way ?
                var sapController = workBook.fusionSite.controller._sapController;
                document.site.mainPage.externalAdapter.onBlockExRpc({
                    field: sapController.getBoundField(sapController._currCtx.ist),
                    call: {
                        proxy: "EXEFNC1",
                        values: [item.params.f, item.params.transaction],
                        callback: self._navigateRep
                    }
                });
            }
            else { //open in new tab
                window.open(item.$url, "_blank");
            }
            
        }
        else {
            document.controller.changeMainPage(item.$url);
        }
    },
    _navigateRep: function(){
    
    },
    notifyDataChange: function(item, data){
        if (item) {
            switch (item.arrayLevel) {
                case "array":
                    this.items = helpers.object.clone(data, true);
                    //if(this.favoritesPage) this.favoritesPage.applyChange({"items":helpers.object.clone(data, true)});
                    this.updateSiteFavorites();
                    break;
                case "cell":
                    this.items[item.articleParent.$serverIndex][item.$item.$variantItemKey].title = data.title;
                    // if(this.favoritesPage) this.favoritesPage.applyChange({"items":helpers.object.clone(this.items, true)})
                    this.updateSiteFavorites();
                    break;
            }
        }
    },
    onMenuClick: function(menuItem){
        switch (menuItem.$bind) {
            case "$addfavorite":
                var title = menuItem.page.mainPage.getTitle(), params = this._params(menuItem), url = this._url(menuItem, params);
                this.save(url, title, title, params);
                this.updateSiteFavorites();
                return false;
                break;
            case "$morefavorite":
                this.favoritesPage = this.favoritesPage || new FavoritesPage();
                this.favoritesPage.loadBox();
                this.favoritesPage.applyChange({
                    "items": helpers.object.clone(this.items, true)
                });
                return false;
            default:
                if (menuItem.$bind.split("-")[0] === "favorite") {
                    this.navigate(menuItem);
                    return false;
                }
                break;
        }
        return true;
    },
    _url: function(menuItem, params){
        if (!params || !params.transaction) {
            return "?url=" + encodeURIComponent(document.controller._currentUrl);
        }
        else {
            var urlParse = helpers.url.parseUrl(document.controller._currentUrl);
            var af = urlParse.query.f.split("/");
            af[0] = params.f + "~" + params.transaction;
            return "?url=" + encodeURIComponent(urlParse.path + "?f=" + af.join("/"));
        }
    },
    _params: function(menuItem){
        var params = null;
        if (menuItem.page.mainPage && menuItem.page.mainPage.$isFusionPage) {
            var fct = menuItem.page.mainPage.$urlParts.params.f;
            params = {};
            params.f = menuItem.page.mainPage.$urlParts.params.f = fct.split("/")[0];
            if (menuItem.page.mainPage.$item.$transaction && menuItem.page.mainPage.$item.$transaction !== "") {
                params.transaction = menuItem.page.mainPage.$item.$transaction;
            }
        }
        return params;
    },
    addFavoritePicker: function(item){
        if (item.isNavigationMenuItemField) {
            if (item.codeMenu) {
                item.favoritePicker = document.createElement("a");
                item.favoritePicker.setAttribute("data-s-picker", item.favoritePicker.syraPickerType = "favorite");
                item.favoritePicker.syra_field_id = item.id;
                item.favoritePicker.syraMenuItemPath = item.page.getNavigationPath(item);
                item.favoritePicker.className = "s-nav-menu-favorite";
                item.fieldValue.parentNode.insertBefore(item.favoritePicker, item.fieldValue.nextSibling);
                if (item.codeMenu.href) {
                    if (this.map && this.map[item.codeMenu.href]) {
                        document.site.toggleClass(item.favoritePicker, "s-favorite-on", item.isFavorite = true);
                    }
                }
                else {
                    //document.site.toggleClass(item.layoutSlot, "s-favorite-off", true);
                }
            }
        }
    },
    updateSiteFavorites: function(){
        var site = document.site, arrayMap = [], favorite, more = false;
        site.emptyDom(site.favorites);
        this.items = this.items || [];
        for (var ii = 0; ii < this.items.length; ii++) {
            if (this.items[ii].menuItem) {
                favorite = document.createElement("a");
                favorite.setAttribute("data-s-picker", "s-site-favorite-link");
                favorite.setAttribute("href", "#");
                favorite.textContent = this.items[ii].menuItem.title || this.items[ii].menuItem.description || "???";
                if (this.items[ii].menuItem.title) {
                    favorite.setAttribute("title", this.items[ii].menuItem.description);
                }
                favorite.syraLink = this.items[ii].menuItem.$url;
                favorite.className = "s-site-favorite-link";
                site.favorites.appendChild(favorite);
                if (more = (site.favorites.clientWidth != site.favorites.scrollWidth)) {
                    site.favorites.removeChild(favorite);
                    break;
                }
            }
        }
        debugger;
        site.moreItem.mn.style.visibility = (more || this.items.length) ? "visible" : "hidden";
    },
    dispose: function(){
        if (this.favoritesPage) 
            this.favoritesPage.dispose();
        this.map = this.clientMap = this.favoritesPage = null;
    },
    initialize: function(){
        this.items = this._defaultData();
    },
    _defaultData: function(){
        var items = [        /* {
         "menuItem" : {
         "$url" : "?url=%2Ftrans%2Fx3%2Ferp%2FGX3APP%2F%24sessions%3Ff%3DGESPOH~AFF%2F2%2F%2FM%2F",
         "description" : "Supplier orders AFF : Commandes std (tout affiché)",
         "title" : "Supplier orders AFF : Commandes std (tout affiché)",
         "params" : {
         "f" : "GESPOH",
         "transaction" : "AFF"
         },
         "$serverIndex" : 1
         }
         }, {
         "menuItem" : {
         "$url" : "?url=%2Ftrans%2Fx3%2Ferp%2FGX3APP%2F%24sessions%3Ff%3DGESAMK%252F2%252F%252FM%252F",
         "description" : "Screen dictionary",
         "title" : "Screen dictionary",
         "params" : {
         "f" : "GESAMK"
         },
         "$serverIndex" : 2
         }
         },{
         "menuItem": {
         "$url": "?url=%2Fsdata%2Fsyracuse%2Fcollaboration%2Fsyracuse%2Fapplications%3Frepresentation%3Dapplication.%24query",
         "description": "Entity: applications",
         "title": "Applications"
         }
         }*/
        ];
        return items;
    },
    /*
     updateSiteFavorites_Test: function() {
     var site=document.site,arrayMap=[],favorite,more=false;
     this.items=this.items||[];
     var menuItem,id,newItem, meta = {"$links": {}};
     for (var ii = 0; ii < this.items.length; ii++) {
     if(this.items[ii].menuItem){
     id="favorite-"+ii,
     menuItem = {
     $bind: id,
     $category: "link",
     $title: this.items[ii].menuItem.title,
     $url:this.items[ii].menuItem.$url,
     $skin: "s-site-favorite-link",
     };
     if(this.items[ii].menuItem.params){
     menuItem.params= this.items[ii].menuItem.params;
     }
     newItem=document.site.loadNewItem(site.favorites, menuItem);
     this.items[ii].id=newItem.id;
     console.log("New Item " + this.items[ii].id);
     meta.$links[id] = {
     "$isHidden": false,
     "$isDisabled": false,
     "$description": this.items[ii].menuItem.description
     };
     }
     }
     document.site.applyChange(meta);
     site.moreItem.mn.style.visibility=(more || this.items.length)?"visible":"hidden";
     },
     removeSiteItems_test:function(){
     this.items=this.items||[];
     for (var ii = 0; ii < this.items.length; ii++) {
     console.log("remove " + this.items[ii].id);
     document.site.removeItem(document.site.idMap[this.items[ii].id],true)
     delete this.items[ii].id;
     }
     },*/
});
