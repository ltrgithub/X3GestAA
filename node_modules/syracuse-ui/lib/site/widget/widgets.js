"use strict";
var _helpers = require('syracuse-core/lib/helpers');
var MenuItem = require('syracuse-ui/lib/menus/menuItem').MenuItem;
var _sectionBlock = require('syracuse-ui/lib/article/sectionBlock');
var Field = require('syracuse-ui/lib/field/field').Field;
var DateTimeField = require('syracuse-ui/lib/field/datetimeField').DateTimeField;
var NumericField = require('syracuse-ui/lib/field/numericField').NumericField;
var DocumentField = require('syracuse-ui/lib/field/documentField').DocumentField;
var HtmlField = require('syracuse-ui/lib/field/htmlField').HtmlField;
var UnknowField = require('syracuse-ui/lib/field/unknowField').UnknowField;
var Layout = require("syracuse-ui/lib/article/layout/layout").Layout;
var MultiArrayField = require("syracuse-ui/lib/field/array/multiArrayField").MultiArrayField;
var SingleArrayField = require("syracuse-ui/lib/field/array/singleArrayField").SingleArrayField;

var _extendFactory = require('syracuse-ui/lib/site/widget/extendFactory');

var vignetteFormats = {
	"$html": require('syracuse-ui/lib/field/vignette/htmlVignetteField').HTMLVignetteField,
	"$webi": require('syracuse-ui/lib/field/vignette/boWebIVignetteField').BOWebIVignetteField,
	"$page": require('syracuse-ui/lib/field/vignette/pageVignetteField').PageVignetteField,
	"$item": require('syracuse-ui/lib/field/vignette/itemVignetteField').ItemVignetteField
};

var _fieldTypes = {
	"application/x-variant": require('syracuse-ui/lib/field/variantField').VariantField,
	"application/x-icon": require('syracuse-ui/lib/field/iconField').IconField,
	"application/x-choice": require('syracuse-ui/lib/field/choice/choiceField').ChoiceField,
	"application/x-date": DateTimeField,
	"application/x-time": DateTimeField,
	"application/x-datetime": DateTimeField,
	"application/x-boolean": require('syracuse-ui/lib/field/booleanField').BooleanField,
	"application/x-integer": NumericField,
	"application/x-decimal": NumericField,
	"application/x-real": NumericField,
	"application/x-quantity": NumericField,
	"application/x-password": require('syracuse-ui/lib/field/passwordField').PasswordField,
	"application/x-string-$html": HtmlField,
	"application/x-string": Field,
	"application/x-string-$phone": require('syracuse-ui/lib/field/phoneField').PhoneField,
	"application/x-string-$email": require('syracuse-ui/lib/field/emailField').EmailField,
	"application/x-string-$url": require('syracuse-ui/lib/field/urlField').UrlField,
	"application/x-reference": require('syracuse-ui/lib/field/referenceField').ReferenceField,
	"application/x-object": require('syracuse-ui/lib/field/child/childField').ChildField,
	"text/rtf": require('syracuse-ui/lib/field/editor/htmlEditor').HtmlEditor,
	"text/html": require('syracuse-ui/lib/field/editor/htmlEditor').HtmlEditor,
	"text/plain": require('syracuse-ui/lib/field/textPlainField').TextPlainField,
	"application/x-filter": require('syracuse-ui/lib/field/filter/filterWidget').FilterWidget,
	"application/wid": require('syracuse-ui/lib/field/vignette/boWebIVignetteField').BOWebIVignetteField,
};

var vignettePage = require('syracuse-ui/lib/page/vignettePage').VignettePage;
exports.pageCategories = {
	landing: require('syracuse-ui/lib/page/landing/landingPage').LandingPage,
	navigation: require('syracuse-ui/lib/page/navigation/navigationPage').NavigationPage,
	portlet: vignettePage,
	vignette: vignettePage,
	fusion: require('syracuse-ui/lib/fusion/article/sheetPage').SheetPage,
	search: require('syracuse-ui/lib/search/searchPage').SearchPage,
	landingVignetteSelect: require('syracuse-ui/lib/page/landing/select/selectPage').SelectPage
};


var _categories = {
	space: {
		create: function($item) {
			return new _sectionBlock.SpaceBox();
		}
	},
	section: {
		create: function($item) {
			return new _sectionBlock.SectionBlock();
		}
	},
	block: {
		create: function($item) {
			return new _sectionBlock.SectionBlock();
		}
	},
	menus: {
		create: function($item) {
			return new _sectionBlock.MenuGroup();
		}
	},
	link: {
		create: function() {
			return new MenuItem();
		}
	},
	tabularChart: {
		create: function($item, boxParent) {
			var item = null;
			var article = syra_article.getArticle(boxParent);
			var proto = article.$prototype;
			var $field = $item.$field || proto.$properties[$item.$bind];
			if ($field.$decorator && $field.$decorator.$type) {
				item = new _fieldTypes[$field.$decorator.$type](); //for calendar
			} else {
				var renderer = $item.$renderer || ($field.$cube && "highCharts");
				var $stereotype = ($field.$cube && "cube") || ($field.$decorator && $field.$decorator.$stereotype);
				if ($stereotype) {
					var decocatorClass = {
						"cube$highCharts": _fieldTypes["application/x-array-chart-cube"],
						"agenda": _fieldTypes["application/x-array-chart-agenda"],
						"gantt": _fieldTypes["application/x-array-chart-gantt"],
						"orgview": _fieldTypes["application/x-array-chart-org"],
						"timeline": _fieldTypes["application/x-array-chart-timeline"]
					}[$stereotype + (renderer ? "$" + renderer : "")];

					item = decocatorClass && new decocatorClass();
				}
			}
			if (item) {
				item.attachedField = $item.attachedField;
			}
			delete $item.attachedField;
			return item;
		}
	},
	field: {
		create: function($item, boxParent) {
			var article = syra_article.getArticle(boxParent);
			var field;
			if ($item.$field && !$item.$fieldId) {
				$item.$fieldId = _helpers.uuid.generate(); //ensure id for vignette
			}
			if (article && article.reloadingFields) {
				var $key = $item.$bind || $item.$fieldId;
				if ($key) {
					field = article.reloadingFields[$key];
					if (field) {
						field.isReloading = true;
						delete article.reloadingFields[$key];
						if (field) {
							if (field.onReloading) {
								field = field.onReloading($item);
							} else {
								syra_item.initialize(article.page, field, $item, boxParent);
								if (field.applyDesignMetaData) {
									field.applyDesignMetaData($item, true);
								}
							}
							if (field) {
								return field;
							}
						}

					}
				}
			}
			var $field = $item.$field || article.$prototype.$properties[$item.$bind];
			if ($field && $field.$isExcluded) {
				if (!(article.isRecordArticle && article.list && article.list.$prototype && article.list.$prototype.$treeview)) {
					//if (article && article.page.isVignettePage) {
					$field = null;
				}
			}
			if ($field) {
				var $class = ($item.$isDecoratorType && $field.$decoratorType) || $field.$formatType || $field.$type;
				var fieldClass = $item.$class;
				if (!fieldClass) {
					switch ($class) {
						case "application/x-array":
							if (!$field.$item.$properties || $field.$item.$type == "application/x-reference") {
								fieldClass = SingleArrayField;
							} else {
								fieldClass = MultiArrayField;
							}
							break;
						case "application/x-portlet":
						case "application/x-vignette":
							if (!$field.$format && $field.$location) {
								$field.$format = $field.$location.$type == "html" ? "$html" : "$page";
							}
							$field.$format = $field.$format || "$html";
							fieldClass = vignetteFormats[$field.$format];
							break;
					}
				}

				var field = article.page.createField && article.page.createField($field, $item, boxParent, $class);
				if (!field) {
					fieldClass = fieldClass || _fieldTypes[$class];
					if (fieldClass) {
						field = new fieldClass();
					}
				}
				if (!field) {
					switch ($class) {
						case "application/x-binary":
						case "application/x-document":
						case "image":
							field = new DocumentField();
							break;
						default:
							if ($field.$url) {
								$field.$contentType = $field.$type;
								$field.$acceptedTypes = $field.$acceptedTypes || [];
								$field.$acceptedTypes.push($field.$contentType);
								field = new DocumentField();
							}
							break;
					}
				}
				if (!field) {
					field = new UnknowField();
					field.unknowMode = "nowidget";
				}
				if (field) {
					field.isField = true;
					field.$designLevel = "field";
					field.$field = $field;
				}
			} else {
				field = new UnknowField();
				field.unknowMode = "noproto";
				field.$field = {
					$type: "unknow"
				};
				field.isField = true;
				field.$designLevel = "field";
			}

			if ($item.attachedField) {
				field.attachedField = $item.attachedField;
				delete $item.attachedField;
			}
			return field;
		}
	}
};


exports.addItem = function(page, $item, boxParent, newItem) {
	var item = newItem;
	if ($item) {
		if ($item.$items && !$item.$layoutType && !$item.$bind && !$item.$category) {
			$item.$layoutType = "stack";
		}
		if ($item.$layoutType) {
			item = new Layout();
			item.create($item, boxParent);
		} else {
			var $category = $item.$category;
			if (!$category) {
				$category = $item.$bind ? "field" : "section";
			}
			if (!item) {
				item = _categories[$category].create($item, boxParent);
			}
			if (item) {
				syra_item.initialize(page, item, $item, boxParent);
			}
		}
	}
	return item;
};

// media types, without the optional $subtype part
var _mediaTypes = Object.keys(_fieldTypes).reduce(function(r, t) {
	var i = t.indexOf('$');
	r[i >= 0 ? t.substring(0, i) : t] = true;
	return r;
}, {
	// types that are not in the list above but are known to the framework
	"application/x-unknow": true,
	'application/json': true,
	'application/x-json': true,
	'application/x-array': true,
	'application/x-pointer': true,
	'application/x-vignette': true,
	'application/x-document': true,
	'image': true,
	'application/x-binary': true,
});

function _hasWidget(type) {
	// hack to avoid problem with $type: {$baseUrl}...
	if (type && type[0] === '{')
		return true; // temporary hack to deal with invalid prototypes
	// hack to avoid problem with $type: application/json; vnd.sage=...
	var semi = type && type.indexOf(';');
	if (semi > 0)
		type = type.substring(0, semi);
	// normal path
	return _mediaTypes[type];
}

function _walk($prototype, obj, missingTypes, prop) {
	if (obj[prop])
		Object.keys(obj[prop]).forEach(function(k) {
			_collect($prototype, obj[prop][k], missingTypes);
		});
}

function _collect($prototype, obj, missingTypes) {
	if (obj) {
		_walk($prototype, obj, missingTypes, '$properties');
		_walk($prototype, obj, missingTypes, '$variants');
		_collect($prototype, obj.$item, missingTypes);
		if (obj.$type) {
			var $type = obj.$type;
			if ($type == "application/x-array") {
				if ($prototype.$isCalendarView) {
					obj.$decorator = {
						$stereotype: "calendar"
					};
				}
				var $stereotype = obj.$decorator && obj.$decorator.$stereotype;
				switch ($stereotype) {
					case "calendar":
						obj.$decoratorType = $type = "application/x-array-chart-calendar";
						break;
					case "timeline":
						obj.$decoratorType = $type = "application/x-array-chart-timeline";
						break;
					case "orgview":
						obj.$decoratorType = $type = "application/x-array-chart-org";
						break;
					case "agenda":
						obj.$decoratorType = $type = "application/x-array-chart-agenda";
						break;
					case "gantt":
						obj.$decoratorType = $type = "application/x-array-chart-gantt";
						break;
					default:
						if (obj.$cube) {
							obj.$decoratorType = $type = "application/x-array-chart-cube";
						}
						break;
				}
			}
			if (obj.$format) {
				obj.$formatType = $type + "-" + obj.$format;
				if (!_hasWidget(obj.$formatType)) {
					if (!_hasWidget($type)) {
						missingTypes[obj.$formatType] = true;
					} else {
						delete obj.$formatType;
					}
				}
			} else {
				if (!_hasWidget($type)) {
					missingTypes[$type] = true;
				}
			}
		}
	}
}

exports.ensureMediaTypes = function($prototype, finish) {
	var missingTypes = {};
	_collect($prototype, $prototype, missingTypes);
	var keys = Object.keys(missingTypes);
	if (keys.length === 0)
		return finish();

	function error(err) {
		console.error(err);
		alert(err); // very brutal for now!
	}
	$.ajax({
		url: "/widget-registry?types=" + keys.join(','),
		success: function(data) {
			function requireMissing(i) {
				if (i < data.length) {
					if (!data[i].$module)
						return error("widget extension missing for " + data[i].$type);
					require.async(data[i].$module, function(err, api) {
						if (err)
							return error(err);
						var $type = data[i].$type;
						_fieldTypes[$type] = _extendFactory.makeFieldClass($type, api);
						requireMissing(i + 1);
					});
				} else {
					finish();
				}
			}
			requireMissing(0);
		},
		error: function(xhr, msg) {
			error(msg);
		}
	});
};