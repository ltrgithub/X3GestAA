"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

var ExtendField = helpers.defineClass(function() {}, Field, {
	loadBox: function() {
		this.$item.$isTitleHidden = true;
		if (this.api.stylesheets) {
			for (var ii = 0, jj = this.api.stylesheets.length; ii < jj; ii++) {
				syra_site.loadStyleSheet(this.api.stylesheets[ii], true);
			}
		}
		Field.prototype.loadBox.call(this);
	},
	_createValueContainer: function() {
		var css = this._$cssField + (this.$isEditMode ? "-value-edit" : "-value-read");
		this.domItem.className += " " + this._$cssField;
		this._dataValue = this._core = this.domItem;
	},
	render: function() {
		var self = this;
		this.component = this.api.create({
			field: this,
			div: this.domItem,
			facet: this.page.$facet,
			editable: self.$isEditMode,
			setDirty: function() {
				if (self.$isEditMode) {
					self.page.applyChange({
						$actions: {
							$save: {
								$isDisabled: false,
							}
						}
					});
				}
			}
		});
	},
	validateInput: function(errors, value) {
		//if (value && !value.isValid) {
		//	errors.push("Cannot save: uml contains errors");
		//}
	},
	getDataValue: function() {
		return this.component && this.component.getValue && this.component.getValue();
	},
	setDataValue: function(value) {
		if (this.component && this.component.setValue)
			this.component.setValue(value);
	},
	resizeArticle: function() {
		this.component && this.component.resize && this.component.resize();
	},
	dispose: function() {
		this.component && this.component.dispose && this.component.dispose();
		Field.prototype.dispose.call(this);
	}

});

exports.makeClass = function(type, api) {
	return helpers.defineClass(function() {
		ExtendField.call(this);
	}, ExtendField, {
		api: api
	});
};