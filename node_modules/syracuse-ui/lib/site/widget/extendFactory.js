"use strict";
var _helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

var ExtendField = _helpers.defineClass(function() {}, Field, {
	loadBox: function() {
		this.$item.$isTitleHidden = true;
		if (this.api.stylesheets) {
			for (var ii = 0, jj = this.api.stylesheets.length; ii < jj; ii++) {
				syra_site.loadStyleSheet(this.api.stylesheets[ii], true);
			}
		}
		Field.prototype.loadBox.call(this);
	},
	addValueSlot: function() {
		var css = this._$cssField + (this.$isEditMode ? "-value-edit" : "-value-read");
		this.domItem.className += " " + this._$cssField;
		this._core = this.domItem;
		this._dataValue = syra_dom.addDiv("", this.domItem);
	},
	render: function() {
		var self = this;

		self.component = self.api.create({
			field: self,
			$field: self.$field,
			div: self._dataValue,
			facet: self.page.$facet,
			isRTL: syra_site.isRTL,
			isTabletDevice: syra_site.isTabletDevice,
			editable: self.$isEditMode,
			clone: function(obj) {
				return _helpers.object.clone(obj);
			},
			parseExpression: function(expression, record) {
				return syra_expression.parse(self.articleParent, expression, record);
			},
			fetch: function(options, success, error) {
				options = options || {};
				if (options.$url) {
					options.$location = {
						$url: this.parseExpression(options.$url)
					};
					delete options.$url;
				}
				self.page.fetch(options, success, error);
			},
			runLink: function($link, record) {
				$link = _helpers.object.clone($link);
				$link.$url = this.parseExpression($link.$url, record);
				syra_controller.executeMenu($link, self.articleParent);
			},
			showErrors: function(errors, options) {
				self.showErrors(errors);
			},
			showDiagnoses: function($diagnoses) {
				syra_diagnose.showDiagnoses({
					$diagnoses: $diagnoses
				}, self);
			},
			setDirty: function() {
				if (self.$isEditMode) {
					self.page.applyChange({
						$actions: {
							$save: {
								$isDisabled: false,
							}
						}
					});
				}
			}
		});
		if (self.component.resize) {
			if (self.api.isResizable) {
				$(self.domItem).resizable({
					handles: "n,s",
					resize: function(event, ui) {
						self.component.resize(ui);
					}
				});
			}
			self.$item.$isAutoSize = true;
		}
	},
	validateInput: function(errors, value) {
		//if (value && !value.isValid) {
		//	errors.push("Cannot save: uml contains errors");
		//}
	},
	getDataValue: function() {
		if (this.component && this.component.getValue) {
			this.component.getValue();
		} else {
			this.currentValue = value;
		}

	},
	setDataValue: function(value) {
		this.currentValue = value;
		if (this.component && this.component.setValue)
			this.component.setValue(value);
	},
	resizeArticle: function() {
		this.component && this.component.resize && this.component.resize();
	},
	dispose: function() {
		this.component && this.component.dispose && this.component.dispose();
		syra_site.disposeObject(this.component);
		Field.prototype.dispose.call(this);
	}
});

var ExtendArticle = _helpers.defineClass(function() {}, null, {
	loadBox: function(initData) {
		var self = this;
		self.$item.$isTitleHidden = true;
		if (self.api.stylesheets) {
			for (var ii = 0, jj = self.api.stylesheets.length; ii < jj; ii++) {
				syra_site.loadStyleSheet(self.api.stylesheets[ii], true);
			}
		}
		syra_article.beforeDrawBox(self);

		self.component = self.api.create({
			field: self,
			$prototype: self.$prototype,
			div: self.layoutSlot,
			facet: self.page.$facet,
			editable: self.$isEditMode,
			isRTL: syra_site.isRTL,
			isTabletDevice: syra_site.isTabletDevice,
			getLocalizeText: function(text) {
				return syra_localizer.getLocalizeText(self, text);
			},
			clone: function(obj) {
				return _helpers.object.clone(obj);
			},
			parseExpression: function(expression, record) {
				return syra_expression.parse(self.articleParent, expression, record);
			},
			fetch: function(options, success, error) {
				options = options || {};
				if (options.$url) {
					options.$location = {
						$url: this.parseExpression(options.$url)
					};
					delete options.$url;
				}
				self.page.fetch(options, success, error);
			},
			runLink: function($link, record) {
				$link = _helpers.object.clone($link);
				$link.$url = this.parseExpression($link.$url, record);
				syra_controller.executeMenu($link, self.articleParent);
			},
			showErrors: function(errors, options) {
				self.showErrors(errors);
			},
			showDiagnoses: function($diagnoses) {
				syra_diagnose.showDiagnoses({
					$diagnoses: $diagnoses
				}, self);
			},
			setDirty: function() {
				if (self.$isEditMode) {
					self.page.applyChange({
						$actions: {
							$save: {
								$isDisabled: false,
							}
						}
					});
				}
			}
		});
		if (self.component.resize) {
			if (self.api.isResizable) {
				$(self.domItem).resizable({
					handles: "n,s",
					resize: function(event, ui) {
						self.component.resize(ui);
					}
				});
			}
			self.$item.$isAutoSize = true;
		}
		syra_article.endDrawBox(this, initData);
	},
	applyChange: function(newData) {
		syra_article.applyChange(this, newData);
	},
	ensureDataSet: function() {
		return this.dataset = syra_dataset.setFieldValue(this, syra_dataset.getFieldValue(this) || []);
	},
	getTitle: function() {
		return syra_fields.getTitle(this);
	},
	setTitle: function($title) {
		syra_fields.setTitle(this, $title);
		if (this.domTitle) {
			syra_dom.hide(this.domTitle, this.getTitle().length == 0);
		}
	},
	setState: function(state) {
		syra_fields.setState(this, state);
	},
	applyMetaData: function(metaData, options) {
		syra_fields.applyMetaData(this, metaData, options);
	},
	applyDesignMetaData: function(metadata) {
		if (this.component && this.component.applyDesignMetaData)
			this.component.applyDesignMetaData(metadata);
	},
	setDataBind: function(dataRecordSet, parentDataRecord, metaData) {
		if (this.component && this.component.setDataBind)
			this.component.setDataBind(dataRecordSet, parentDataRecord, metaData);
	},
	resizeArticle: function() {
		this.component && this.component.resize && this.component.resize();
	},
	dispose: function() {
		this.component && this.component.dispose && this.component.dispose();
		syra_site.disposeObject(this.component);
		syra_article.dispose(this);
	}
});


exports.makeArticleClass = function(type, api) {
	return _helpers.defineClass(function() {
		ExtendArticle.call(this);
	}, ExtendArticle, {
		api: api
	});
};

exports.makeFieldClass = function(type, api) {
	return _helpers.defineClass(function() {
		ExtendField.call(this);
	}, ExtendField, {
		api: api
	});
};