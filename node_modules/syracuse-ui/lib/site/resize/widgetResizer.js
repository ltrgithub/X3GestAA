"use strict";
var helpers = require('syracuse-core/lib/helpers');

var WidgetResizerDDAgent = require("./widgetResizerDDAgent").WidgetResizerDDAgent;
var WidgetMoveDDAgent = require("./widgetMoveDDAgent").WidgetMoveDDAgent;

function WidgetResizer() {}

exports.WidgetResizer = helpers.defineClass(WidgetResizer, null, {
	isDraggable: function(target, event) {
		if (target) {
			if (target.syraWidgetResizer == this.id) {
				if (this.isEnabled && (this.isLeft || this.isRight || this.isTop || this.isBottom)) {
					document.site.ddManager.dropableItem = this;
					document.site.ddManager.start(this, WidgetResizerDDAgent, $(this.options.slot));
					event.syraRetValue = false;
					return;
				}
			} else {
				if (target.syraWidgetDrag == this.id) {
					document.site.ddManager.dropableItem = this;
					document.site.ddManager.start(this, WidgetMoveDDAgent, $(this.options.slot));
					event.syraRetValue = false;
					return;
				}
			}
		}
		return null;
	},
	onDragMove: function(target, event) {
		if (!document.site.ddManager.ddAgent && this.isEnabled && target && target.syraWidgetResizer == this.id) {
			var offset = this.options.slot.getBoundingClientRect();
			this.left = offset.left;
			this.top = offset.top;
			this.width = offset.width;
			this.height = offset.height;
			this.right = offset.right;
			this.bottom = offset.bottom;
			this.isLeft = this.options.direction.left && ((event.pageX >= this.left) && (event.pageX <= (this.left + 5)));
			this.isRight = this.options.direction.right && ((event.pageX <= this.right) && (event.pageX >= (this.right - 5)));
			this.isTop = this.options.direction.top && ((event.pageY >= this.top) && (event.pageY <= (this.top + 5)));
			this.isBottom = this.options.direction.bottom && ((event.pageY <= this.bottom) && (event.pageY >= (this.bottom - 5)));
			this.cursor = "default";
			if (this.isLeft) {
				this.cursor = (this.isTop) ? "nw-resize" : ((this.isBottom) ? "sw-resize" : "w-resize");
			} else
			if (this.isRight) {
				this.cursor = (this.isTop) ? "ne-resize" : ((this.isBottom) ? "se-resize" : "e-resize");
			} else {
				this.cursor = (this.isTop) ? "n-resize" : ((this.isBottom) ? "s-resize" : "default");
			}
			this.resizerSpot.style.cursor = this.cursor;
		}
		return true;
	},
	setResizable: function(options) {
		this.id = helpers.uuid.generate();
		document.site.ddManager.toggleBarResizerObserver(this, true);
		this.options = options;
		this.isEnabled = true;
		if (this.options.dragSpot) {
			this.options.dragSpot.syraWidgetDrag = this.id;
			document.site.ddManager.setDragSpot(this.options.dragSpot, true);
			this.options.dragSpot.style.cursor = "move";
		}
		if (this.options.isResizingEnabled !== false && this.options.direction !== null) {
			if (this.options.direction === undefined) {
				this.options.direction = {
					top: true,
					left: true,
					right: true,
					bottom: true
				};
			}
			this.resizerSpot = this.options.resizerSpot || this.options.slot;
			this.resizerSpot.syraWidgetResizer = this.id;
			this.resizerSpot.style.cursor = "default";
			document.site.ddManager.setDragSpot(this.resizerSpot, true);
		}
	},
	dispose: function() {
		document.site.ddManager.toggleBarResizerObserver(this, false);
		if (this.options) {
			this.options.onResize = null;
		}
		this.resizerSpot = this.$$dragSpot = this.options = null;
	}
});