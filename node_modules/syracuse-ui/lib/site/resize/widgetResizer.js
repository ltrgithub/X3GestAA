"use strict";
var helpers = require('syracuse-core/lib/helpers');

function WidgetResizerDrop() {

}

exports.WidgetResizerDrop = helpers.defineClass(WidgetResizerDrop, null, {
	start: function(dropItem) {
		this.resizer = dropItem;
		document.site.ddManager.dragDropInstance = this;
		document.site.resizing = true;
		this.prevDocumentCursor = document.site.body.style.cursor;
		document.site.body.style.cursor = this.resizer.cursor;
		if (this.resizer.options.onResize) {
			this.resizer.options.onResize(this.resizer);
		}
	},
	onDragMouseMove: function(target, event) {
		var minHeight = this.resizer.options.minHeight;
		var minWidth = this.resizer.options.minWidth;
		var width, height, isResized;
		var style = this.resizer.options.slot.style;
		var pageX = event.pageX;
		var pageY = event.pageY;
		if (this.resizer.isLeft) {
			width = this.resizer.right - pageX;
			console.log(width);
			if (!this.resizer.maxWidth || width < this.resizer.maxWidth) {
				if (!minWidth || (width >= minWidth) || (pageX < (this.resizer.left - 5))) {
					isResized = true;
					style.left = pageX + "px";
					style.width = width + "px";
				}
			}
		} else {
			if (this.resizer.isRight) {
				width = pageX - this.resizer.left;
				if (!this.resizer.maxWidth || width < this.resizer.maxWidth) {
					if (!minWidth || (width >= minWidth) || (pageX > (this.resizer.right - 5))) {
						isResized = true;
						style.width = width + "px";
					}
				}
			}
		}
		if (this.resizer.isTop) {
			height = this.resizer.bottom - pageY;
			if (!this.resizer.maxHeight || height < this.resizer.maxHeight) {
				if (!minHeight || (height >= minHeight) || (pageY < (this.resizer.top - 5))) {
					isResized = true;
					style.top = pageY + "px";
					style.height = height + "px";
				}
			}
		} else {
			if (this.resizer.isBottom) {
				height = pageY - this.resizer.top;
				if (!this.resizer.maxHeight || height < this.resizer.maxHeight) {
					if (!minHeight || (height >= minHeight) || (pageY > (this.resizer.bottom - 5))) {
						isResized = true;
						style.height = height + "px";
					}
				}
			}
		}
		if (isResized && this.resizer.options.onResize) {
			this.resizer.options.onResize(this.resizer, true);
		}
	},
	onDragMouseUp: function(target, event) {},
	dispose: function() {
		document.site.resizing = false;
		document.site.body.style.cursor = this.prevDocumentCursor;
		if (this.resizer) {
			if (this.resizer.options.onResize) {
				this.resizer.options.onResize(this.resizer);
			}
		}
	}
});


function WidgetResizer() {}

exports.WidgetResizer = helpers.defineClass(WidgetResizer, null, {
	isDraggable: function(target, event) {
		return (target && target.syraWidgetResizer == this.id) ? this : null;
	},
	onDragMove: function(target, event) {
		if (this.isDraggable(target)) {
			if (document.site.ddManager.requestedDDAuthoringItem) {
				if (document.site.ddManager.requestedDDAuthoringItem == this) {
					if (this.isEnabled && (this.isLeft || this.isRight || this.isTop || this.isBottom)) {
						document.site.ddManager.start(this, WidgetResizerDrop, $(this.options.slot));
						return;
					}
				}
			} else {
				if (!document.site.ddManager.dragDropInstance) {
					if (this.isEnabled) {
						var offset = this.$$slot.offset();
						this.left = offset.left;
						this.top = offset.top;
						this.width = this.$$slot.outerWidth();
						this.height = this.$$slot.outerHeight();
						this.right = this.left + this.width;
						this.bottom = this.top + this.height;
						this.isLeft = this.options.direction.left && ((event.pageX >= this.left) && (event.pageX <= (this.left + 5)));
						this.isRight = this.options.direction.right && ((event.pageX <= this.right) && (event.pageX >= (this.right - 5)));
						this.isTop = this.options.direction.top && ((event.pageY >= this.top) && (event.pageY <= (this.top + 5)));
						this.isBottom = this.options.direction.bottom && ((event.pageY <= this.bottom) && (event.pageY >= (this.bottom - 5)));
						this.cursor = "default";
						if (this.isLeft) {
							this.cursor = (this.isTop) ? "nw-resize" : ((this.isBottom) ? "sw-resize" : "w-resize");
						} else
						if (this.isRight) {
							this.cursor = (this.isTop) ? "ne-resize" : ((this.isBottom) ? "se-resize" : "e-resize");
						} else {
							this.cursor = (this.isTop) ? "n-resize" : ((this.isBottom) ? "s-resize" : "default");
						}
						this.resizerSpot.style.cursor = this.cursor;
					}
				}
			}
		}
		return true;
	},
	setResizable: function(options) {
		this.id = helpers.uuid.generate();
		document.site.ddManager.addListener(this);
		this.options = options;
		this.$$slot = $(this.options.slot);
		this.isEnabled = true;
		if (this.options.dragSpot) {
			//this.setDraggable();
		}
		if (this.options.isResizingEnabled !== false && this.options.direction !== null) {
			if (this.options.direction === undefined) {
				this.options.direction = {
					top: true,
					left: true,
					right: true,
					bottom: true
				};
			}
			this.resizerSpot = this.options.resizerSpot || this.options.slot;
			this.resizerSpot.syraWidgetResizer = this.id;
			this.resizerSpot.style.cursor = "default";
			document.site.ddManager.setDragSpot(this.resizerSpot, true);
		}
	},
	setDraggable: function() {
		var self = this;
		(self.$$dragSpot = $(self.options.dragSpot)).bind("mousedown." + self.id, function(event) {
			if (!document.site.ddManager.dragDropInstance && event.target == self.$$dragSpot[0]) {
				var offset = self.$$slot.offset();
				self.startPosition = {
					top: offset.top - event.pageY,
					left: offset.left - event.pageX,
				};
				self.left = offset.left;
				self.top = offset.top;
				self.width = self.$$slot.outerWidth(true);
				self.height = self.$$slot.outerHeight(true);
				var $$boundary = document.site.$$body;
				self.boundary = $$boundary.offset();
				self.boundary.height = $$boundary.height();
				self.boundary.width = $$boundary.width();
				self.boundary.right = self.boundary.left + self.boundary.width;
				self.boundary.bottom = self.boundary.top + self.boundary.height;
				self._startDrag();
				return false;
			}
		});
		self.options.dragSpot.style.cursor = "move";
	},
	_startDrag: function() {
		var self = this;
		document.site.ddManager.setDragDropInstance(self);
		$(document).bind("mouseup." + self.id, function() {
			$(document).unbind("." + self.id);
			document.site.ddManager.setDragDropInstance();
		}).bind("mousemove." + self.id, function(event) {
			var position = {
				top: (self.startPosition.top + event.pageY),
				left: (self.startPosition.left + event.pageX)
			};

			if ((self.boundary.top < (position.top - 10)) && (self.boundary.left < (position.left - 10)) && (self.boundary.bottom > (position.top + self.height + 10)) && (self.boundary.right > (position.left + self.width + 10))) {
				self.options.slot.style.top = position.top + "px";
				self.options.slot.style.left = position.left + "px";
				if (self.options.source) {
					self.options.source.draggedPosition = position;
				}
			}
			event.preventDefault();
			return false;
		});
	},
	stop: function() {
		document.controller.disposeObject(this);
	},
	dispose: function() {
		document.site.ddManager.removeListener(this);
		if (this.$$dragSpot) {
			this.$$dragSpot.unbind("." + this.id);
		}
		$(document).unbind("." + this.id);
		if (this.options) {
			this.options.onResize = null;
		}
		this.$$slot = this.resizerSpot = this.$$dragSpot = this.options = null;
	}
});