"use strict";
var helpers = require('syracuse-core/lib/helpers');

exports.openDialog = function(article, values, $parameters, record, callback) {
	var $itemPage;
	if (!$parameters.$url) {
		var $prototype = helpers.object.clone($parameters);
		if (values) {
			var keys = Object.keys(values);
			for (var ii = keys.length - 1; ii >= 0; ii--) {
				$prototype[keys[ii]] = values[keys[ii]];
			}
		}
		if (article.$prototype && article.$prototype.$localization) {
			$prototype.$localization = article.$prototype.$localization;
		}
		$prototype.$title = $parameters.$title || syra_site.localize.siteParametersTitle;
		$itemPage = {
			$category: "page",
			$facet: "$edit",
			$representation: {
				$prototype: $prototype
			}
		};
	}
	syra_site.dialogManager.openModal(article, {
		isDialogParameter: true,
		$itemPage: $itemPage,
		$url: $parameters.$url,
		$method: $parameters.$method || "GET",
		article: article,
		initData: values,
		onOpened: function(dialogPage) {
			if ($parameters && $parameters.$url) {
				var keys = Object.keys(values);
				for (var ii = 0, jj = keys.length; ii < jj; ii++) {
					var prop = keys[ii];
					var $defaultValue = values[prop];
					if (dialogPage.boundFields && dialogPage.boundFields[prop] && dialogPage.boundFields[prop][0]) {
						var field = dialogPage.boundFields[prop][0];
						field.setDataValue($defaultValue);
						field.notifyFieldChange(field.currentValue);
					}
				}
			}
		},
		onValidate: function(dialogPage) {
			if (dialogPage.validateFields()) {
				var $properties = dialogPage.$prototype && dialogPage.$prototype.$properties;
				var fields = dialogPage.boundFields;
				var keys = Object.keys(dialogPage.dataset);
				for (var ii = 0, jj = keys.length; ii < jj; ii++) {
					var prop = keys[ii];
					if (prop.slice(0, 1) !== "$") {
						var $field = $properties && $properties[prop];
						var field = fields && fields[prop];
						if ($field && field && field[0] && $field.$type === "application/x-reference" && field[0].currentValue && field[0].currentValue.$uuid) {
							values[prop] = dialogPage.boundFields[prop][0].currentValue.$uuid;
						} else {
							values[prop] = dialogPage.dataset[prop];
						}
					}
				}
				callback(values);
				return true;
			}
			return false;
		},
		onClose: function(isCanceled) {
			if (isCanceled) {
				callback(null, true); //input propoerties was canceled 
			}
		}
	});
};

exports.openSelectDialog = function(article, values, $parameters, record, callback) {
	syra_site.dialogManager.openPage(article, {
		article: article,
		$url: ($parameters.$actions.$select || $parameters.$actions.$lookup).$url,
		onValidate: function(page) {
			if (page.selectedRecords) {
				values.$select = page.selectedRecords;
				callback(values);
				return;
			}
			callback(null, true); //input propoerties was canceled
		},
		onClose: function(isCanceled) {
			if (isCanceled) {
				callback(null, true); //input propoerties was canceled 
			}
		},
		onSelectRecord: function(selectedRecords, page) {
			page.selectedRecords = Object.keys(selectedRecords).map(function(rec) {
				return selectedRecords[rec].dataset;
			});
			return false;
		}
	});
};