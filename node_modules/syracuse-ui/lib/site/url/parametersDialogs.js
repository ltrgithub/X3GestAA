"use strict";
var helpers = require('syracuse-core/lib/helpers');

exports.openDialog = function(article, values, $parameters, record, callback) {
	var $itemPage;
	if (!$parameters.$url) {
		var $prototype = helpers.object.clone($parameters);
		if (values) {
			Object.keys(values).forEach(function(prop) {
				$prototype[prop] = values[prop];
			});
		}
		if (article.$prototype && article.$prototype.$localization) {
			$prototype.$localization = article.$prototype.$localization;
		}
		$prototype.$title = $parameters.$title || document.site.localize.siteParametersTitle;
		$itemPage = {
			$category: "page",
			$urlParts: {
				$facet: "$edit"
			},
			$representation: {
				$prototype: $prototype
			}
		};
	}
	document.site.dialogManager.openModal(article, {
		article: article,
		initData: values,
		onOpened: function(dialogPage) {
			if ($parameters && $parameters.$url) {
				Object.keys(values).forEach(function($prop) {
					var $defaultValue = values[$prop];
					if (dialogPage.boundFields && dialogPage.boundFields[$prop] && dialogPage.boundFields[$prop][0]) {
						var field = dialogPage.boundFields[$prop][0];
						field.setDataValue($defaultValue);
						field.notifyFieldChange(field.currentValue);
					}
				});
			}
		},
		onValidate: function(dialogPage) {
			if (dialogPage.validateFields()) {
				Object.keys(dialogPage.dataset).forEach(function($prop) {
					if ($prop.slice(0, 1) !== "$") {
						if (dialogPage.$prototype && dialogPage.$prototype.$properties && dialogPage.$prototype.$properties[$prop] && dialogPage.boundFields && dialogPage.boundFields[$prop] && dialogPage.boundFields[$prop][0] && dialogPage.$prototype.$properties[$prop].$type === "application/x-reference" && dialogPage.boundFields[$prop][0].currentValue && dialogPage.boundFields[$prop][0].currentValue.$uuid) {
							values[$prop] = dialogPage.boundFields[$prop][0].currentValue.$uuid;
						} else {
							values[$prop] = dialogPage.dataset[$prop];
						}
					}
				});
				callback(values);
				return true;
			}
			return false;
		},
		onClose: function(isCanceled) {
			if (isCanceled) {
				callback(null, true); //input propoerties was canceled 
			}
		},
		$itemPage: $itemPage,
		$url: $parameters.$url,
		$method: $parameters.$method || "GET"
	});
};

exports.openSelectDialog = function(article, values, $parameters, record, callback) {
	document.site.dialogManager.openModal(article, {
		article: article,
		$url: ($parameters.$actions.$select || $parameters.$actions.$lookup).$url,
		onValidate: function(page) {
			if (page.selectedRecords) {
				values.$select = page.selectedRecords;
				callback(values);
				return;
			}
			callback(null, true); //input propoerties was canceled
		},
		onClose: function(isCanceled) {
			if (isCanceled) {
				callback(null, true); //input propoerties was canceled 
			}
		},
		onSelectRecord: function(selectedRecords, page) {
			page.selectedRecords = Object.keys(selectedRecords).map(function(rec) {
				return selectedRecords[rec].dataset;
			});
			return false;
		}
	});
};