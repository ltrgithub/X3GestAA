"use strict";
var globals = require('streamline/lib/globals');

var URL_KEY_PARAM = "?url=";

exports.getSdataUrl = function(url){
    var param = url.search(/\?url=/i);
    if (param >= 0) {
        return decodeURIComponent(url).slice(param + (URL_KEY_PARAM).length);
    }
    return url;
};

function _setUrlParameter(url){
    return (url.indexOf(URL_KEY_PARAM) >= 0) ? url : (URL_KEY_PARAM + encodeURIComponent(url));
};


var _updateHitory;

exports.cancelChange = function(){
    _updateHitory = true;
    window.history.forward();
};

exports.start = function(){
    //load representation of url
    exports.reload();
    //listen history change
    window[window.history.pushState ? "onpopstate" : "onhashchange"] = function(event){
        if (_updateHitory) {
            _updateHitory = false;
        }
        else {
            exports.reload(true);
        }
    };
};

exports.update = function(mainPage, $url){
    var param = _setUrlParameter($url);
    if (window.history.pushState) {
        window.history.replaceState("$updateHitory", param, param);
    }
    else {
        _updateHitory = true;
        window.location.hash = "#" + encodeURIComponent(param);
    }
    mainPage.openerUrlSegments = document.site.urlMaker.parse($url);
    document.site.checkMainPageBookmarkStatus();
};

function _changeMainPage($url, $itemPage, onHistoryChange){
    if (!window.history.pushState) {
        var hash = $url.indexOf("#");
        if (hash >= 0) {
            var urlPath = $url.slice(0, hash);
            if (urlPath.indexOf("?") >= 0) {
                urlPath = urlPath.slice(0, urlPath.indexOf("?"));
            }
            $url = urlPath + decodeURIComponent($url.slice(hash + 1));
        }
        else {
            if ($url.indexOf("?") < 0) {
                //add default homepage
            }
        }
    }
    document.controller.changeMainPage(exports.getSdataUrl($url), $itemPage, onHistoryChange);
};

exports.load = function($url, target, $itemPage, isDefaultUrl){
    var param = (isDefaultUrl === false) ? $url : _setUrlParameter($url);
    if (target == "blank") {
        window.open(param, "_blank");
    }
    else {
        if (window.history.pushState) {
            window.history.pushState("", param, param);
            _changeMainPage($url, $itemPage);
        }
        else {
            if ($url.indexOf("#") >= 0) {
                window.location.assign(param);
                _changeMainPage($url, $itemPage);
            }
            else {
                window.location.hash = "#" + encodeURIComponent(param);
            }
        }
    }
};


exports.reload = function(onHistoryChange){
    // handle LTR / RTL switch
    var lp = globals.context && globals.context.localePreferences;
    var rtl = lp && lp.code && /^(ar|iw)/.test(lp.code);
    var href = document.location.href;
    var qm = href.indexOf('?');
    if (rtl && !/rtl=true/.test(href)) {
        href += (qm < 0 ? '?' : '&') + 'rtl=true';
    }
    else {
        if (!rtl) {
            href = href.replace(/(\?|\&)rtl=true/, '');
        }
    }
    // reload page if writing direction changes
    if (href != document.location.href) {
        document.location.href = href;
    }
    else {
        _changeMainPage(href, null, onHistoryChange);
    }
};

exports.getCurrentSdataUrl = function(){
    return exports.getSdataUrl(document.location.href);
};
exports.updateCurrentEndpoint = function(newEndpoint){
    exports.load(document.site.urlMaker.replaceEndpoint(exports.getCurrentSdataUrl(), newEndpoint));
};

exports.setHref = function(menu, record, isExternal){
    if (menu.articleParent) {
        menu.$url = document.site.urlMaker.formatMenuUrl(menu.articleParent, menu, record);
    }
    menu.isNoSyracuseUrl = (menu.$url.indexOf("http") >= 0 && menu.$url.indexOf(window.location.host) < 0);
    menu.domItem.setAttribute("href", menu.href = menu.isNoSyracuseUrl ? menu.$url : _setUrlParameter(menu.$url));
    if (isExternal || menu.isNoSyracuseUrl) {
        menu.domItem.setAttribute("target", menu.$target = "blank");
    }
};


exports.ensureProxy = function($url){
    var lower = $url.toLowerCase();
    if (lower.indexOf(window.location.protocol) == 0 && lower.indexOf(window.location.protocol + "//" + window.location.host) != 0) {
        $url = "/proxy" + _setUrlParameter($url);
    }
    return $url;
};
