"use strict";
var helpers = require('syracuse-core/lib/helpers');
var parametersDialogs = require('./parametersDialogs');

function _getHost($url) {
	var reg = new RegExp('^(?:f|ht)tp(?:s)?\://([^/]+)', 'im');
	var parts = $url.match(reg);
	return parts ? parts[1].toString() : null;
};

exports.addHost = function($url) {
	var host = _getHost($url);
	if (!host) {
		var href = window.location.href;
		$url = href.slice(0, href.indexOf(window.location.host) + window.location.host.length) + $url;
	}
	return $url;
};

exports.replaceSegmentEndpoint = function(segments, newEndpoint, check) {
	if (newEndpoint && segments.endpointSeg) {
		if (!check || (segments.endpointSeg.application === newEndpoint.application && segments.endpointSeg.contract === newEndpoint.contract)) {
			segments.endpoint = [segments.endpointSeg.application = newEndpoint.application || "", segments.endpointSeg.contract = newEndpoint.contract || "", segments.endpointSeg.dataset = newEndpoint.dataset || ""].join(".");
			segments.$url = exports.build(segments);
			return true;
		}
	}
	return false;
};

exports.stringifyUrlEndpoint = function(endpointSeg) {
	return (endpointSeg.application || "") + "/" + (endpointSeg.contract || "") + "/" + (endpointSeg.dataset || "");
};

exports.stringifyEndpoint = function(endpoint) {
	return endpoint ? (endpoint.application + "." + endpoint.contract + "." + endpoint.dataset) : "";
};

exports.getBaseUrl = function(segments) {
	var epStr = exports.stringifyUrlEndpoint(segments.endpointSeg);
	return segments.uri.slice(0, segments.uri.lastIndexOf(epStr) + epStr.length);
};

exports.build = function(segments) {
	if (segments) {
		if (segments.endpointSeg) {
			var parts = segments.uri.split("/");
			for (var ii = 0, jj = parts.length; ii < jj; ii++) {
				switch (parts[ii].toLowerCase()) {
					case "sdata":
					case "trans":
						parts[ii + 1] = segments.endpointSeg.application || "";
						parts[ii + 2] = segments.endpointSeg.contract || "";
						parts[ii + 3] = segments.endpointSeg.dataset || "";
						segments.uri = parts.join("/");
						ii = jj; //end loop
						break;
				}
			}
		}
		if (segments.params) {
			var paramString = "";
			var keys = Object.keys(segments.params);
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				paramString += "&" + keys[ii] + "=" + encodeURIComponent(segments.params[keys[ii]]);
			}
			segments.$url = segments.uri + "?" + paramString.slice(1);
		}
	}
	return segments.$url;
};
exports.replaceFusionCode = function(seg, newCode) {
	if (seg.params && seg.params.f) {
		var parts = seg.params.f.split("/");
		parts[0] = newCode;
		seg.params.f = parts.join("/");
		parts = newCode.split("~");
		seg.fusionParams = {
			fullCode: newCode,
			functionCode: parts[0]
		};
		if (parts.length > 1) {
			seg.fusionParams.transaction = parts[1];
		}
	}
};
exports.parse = function($url, isSyracuse) {
	if (/#$/.test($url)) $url = $url.substring(0, $url.length - 1);
	var limit = $url.indexOf('?');
	var segments = {
		$url: $url,
		uri: limit >= 0 ? $url.slice(0, limit) : $url,
		params: {},
		target: "$page"
	};
	var params = limit >= 0 ? $url.slice(limit + 1).split('&') : [];
	for (var ii = 0, jj = params.length; ii < jj; ii++) {
		var hash = params[ii].split("=");
		segments.params[hash[0]] = decodeURIComponent(hash[1]);
	}
	if (!(segments.endpoint = segments.params.endpoint)) {
		var sdataIndex = $url.search(/\/sdata\//i);
		if (sdataIndex >= 0) {
			segments.endpoint = $url.slice(sdataIndex + ("/sdata/").length).split("/").slice(0, 3).join(".");
		} else {
			var x3Index = $url.search(/\/trans\//i);
			if (x3Index >= 0) {
				segments.endpoint = $url.slice(x3Index + ("/trans/").length).split("/").slice(0, 3).join(".");
				segments.target = "trans";
				segments.isFusion = true;
				if (segments.params && segments.params.f) {
					segments.fusionParams = {};
					segments.fusionParams.fullCode = segments.params.f.split("/")[0];
					var parts = segments.fusionParams.fullCode.split("~");
					segments.fusionParams.functionCode = parts[0];
					if (parts.length > 1) {
						segments.fusionParams.transaction = parts[1];
					}
				}
			} else {
				segments.endpoint = exports.stringifyEndpoint(syra_site.userProfile && syra_site.userProfile.getSelectedEndpoint());
			}
		}
	}
	var endpointSeg = segments.endpoint;
	if (!endpointSeg) {
		segments.hasNoEndpoint = true;
		endpointSeg = "syracuse.collaboration.syracuse";
	}
	endpointSeg = endpointSeg.split(".");
	if (endpointSeg.length == 3) {
		segments.endpointSeg = {
			application: endpointSeg[0],
			contract: endpointSeg[1],
			dataset: endpointSeg[2]
		};
	}

	if (segments.params.representation) {
		var result = segments.params.representation.split(".");
		segments.representationRoot = result[0];
		segments.$facet = result[1];
	}
	if (isSyracuse) {
		segments.host = _getHost($url);
		segments.isSyracuse = segments.host ? segments.host == window.location.host : true; //no host == relative
	}
	return segments;
};

exports.applyParameters = function($url, params) {
	var paramObj = {};
	var paramString, key, ii, jj;
	var paramsStart = $url.lastIndexOf("?");
	if (paramsStart >= 0) {
		var parts = $url.slice(paramsStart + 1).split("&");
		for (ii = 0, jj = parts.length; ii < jj; ii++) {
			var part = parts[ii];
			var valueStart = part.indexOf("=");
			paramObj[part.substring(0, valueStart)] = part.substring(valueStart + 1);
		}
		$url = $url.substring(0, paramsStart);
	}
	var $keys = Object.keys(params);
	for (ii = 0, jj = $keys.length; ii < jj; ii++) {
		key = $keys[ii];
		if (params[key] === null) {
			delete paramObj[key];
		} else {
			if (params[key] !== undefined) {
				paramObj[key] = encodeURIComponent(params[key]);
			}
		}
	}
	paramString = "";
	$keys = Object.keys(paramObj);
	for (ii = 0, jj = $keys.length; ii < jj; ii++) {
		key = $keys[ii];
		paramString += "&" + key + "=" + paramObj[key];
	}
	$url += "?" + paramString.slice(1);
	return $url;
};
/**************************  FORMAT   **********************************************/
exports.formatParameters = function(article, $parameters, record, callback) {
	var values = {};
	var props = Object.keys($parameters);
	var expressionMaker = syra_site.expressionMaker;
	for (var ii = 0, jj = props.length; ii < jj; ii++) {
		var prop = props[ii];
		switch (prop) {
			case "$properties":
			case "$":
			case "$links":
			case "$actions":
				break;
			default:
				var expression = $parameters[prop];
				if (expression && typeof(expression) == "string") {
					expression = prop == "$url" ? expressionMaker.parseUrl(article, expression, record) : expressionMaker.parse(article, expression, record);
				}
				values[prop] = expression;
				break;
		}
	}
	if (callback) {
		if ($parameters.$actions) {
			parametersDialogs.openSelectDialog(article, values, $parameters, record, callback);
			return;
		}
		if ($parameters.$properties) {
			parametersDialogs.openDialog(article, values, $parameters, record, callback);
			return;
		}
		callback(values);
	}
	return values;
};

function _formatMenuUrlWithCallback(article, $menu, record, callback) {
	if ($menu.$parameters) {
		$menu.$parameters.$title = $menu.getTitle ? $menu.getTitle() : null;
		exports.formatParameters(article, $menu.$parameters, record, function(values, isCanceled) {
			if (isCanceled) {
				callback(null, isCanceled);
			} else {
				if ($menu.$sourceType && $menu.$sourceType.indexOf("{") == 0) {
					$menu.$type = syra_site.expressionMaker.parse(article, $menu.$sourceType, record, values);
					var $sourceMenu = article.$menus[$menu.$bind];
					if (($menu.$type.indexOf("{") != 0) && $sourceMenu && !$sourceMenu.$target) {
						$menu.$target = (($menu.$type.indexOf('json') == -1) && ($menu.$type != "html")) ? "blank" : "";
					}
				}
				callback(syra_site.expressionMaker.parseUrl(article, $menu.$sourceUrl || $menu.$url, record, values));
			}
		});
	} else {
		callback(syra_site.expressionMaker.parseUrl(article, $menu.$sourceUrl || $menu.$url, record, undefined, $menu.$subRecordKey, undefined, true));
	}
}

exports.formatVerifyMenuUrl = function(article, $menu, record, callback) {
	var $verifyMenu = helpers.object.clone($menu, true);
	$verifyMenu.$sourceUrl = $verifyMenu.$url = $verifyMenu.$verifyUrl;
	delete $verifyMenu.$verifyUrl;
	return exports.formatMenuUrl(article, $verifyMenu, record, callback);
};

exports.formatMenuUrl = function(article, $menu, record, callback) {
	if (callback) {
		_formatMenuUrlWithCallback(article, $menu, record, callback);
	} else {
		var properties;
		if ($menu.$parameters) {
			properties = exports.formatParameters(article, $menu.$parameters, record);
		}
		return syra_site.expressionMaker.parseUrl(article, $menu.$sourceUrl || $menu.$url, record, properties, $menu.$subRecordKey, undefined, true);
	}
};


exports.notifyParametersActionChange = function(article, menu, record, target, request) {
	menu.$parameters.$title = menu.getTitle ? menu.getTitle() : null;
	exports.formatParameters(article, menu.$parameters, record, function(values, isCanceled) {
		if (!isCanceled) {
			var $bindAction = request[Object.keys(request)[0]];
			$bindAction.$parameters = {};
			delete values.$title;
			var props = Object.keys(values);
			for (var ii = 0, jj = props.length; ii < jj; ii++) {
				$bindAction.$parameters[props[ii]] = values[props[ii]];
			}
			article.page.notifyActionChange(menu, target, request);
		}
	});
};



exports.buildPageCollaborationUrl = function(article, urlSegment) {
	return syra_site.expressionMaker.parse(article, syra_site.getPageTemplateUrl(urlSegment.$url), {
		representation: urlSegment.params.representation,
		endpoint: urlSegment.endpoint,
		target: urlSegment.target,
		pageview: urlSegment.params.pageview,
		variant: urlSegment.params.variant
	});
};