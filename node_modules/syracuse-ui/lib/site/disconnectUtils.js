"use strict";

exports.onWindowUnload = function(site) {
	// handler for session closing in case of page leaving or refresh (triggered before unload, cancelable)
	window.onbeforeunload = function(event) {
		if (site.fusionGateway && site.fusionGateway._books && site.fusionGateway._books.length > 0) {
			// alert message is shown according to the browser
			var alertMsg = site.localize.disconnect_unload_alert.replace("{booksNb}", site.fusionGateway._books.length);
			switch (site.getBrowserName().toLowerCase()) {
				case "firefox":
					// display alert text in diagnoses panel before browser alert box
					site.showDiagnoses({
						$diagnoses: [{
							"severity": "error",
							"message": alertMsg
						}],
						autoHide: {
							"autoHide.autoHideTimeOut": 1000
						}
					});
					return alertMsg;
				case "chrome":
					// display alert text in browser alert box
				case "safari":
				case "msie":
					var ee = event || window.event;
					if (ee) {
						ee.returnValue = alertMsg;
					}
					return alertMsg;
				default:
					// both alert display methods 
					site.showDiagnoses({
						$diagnoses: [{
							"severity": "error",
							"message": alertMsg
						}]
					});
					var ee = event || window.event;
					if (ee) {
						ee.returnValue = alertMsg;
					}
					return alertMsg;
			}
		}
	};
	// handler in case of page leaving or refresh (triggered after onbeforeunload, not cancelable)
	window.onunload = function() {
		if (site.fusionGateway && site.fusionGateway._books && site.fusionGateway._books.length > 0) {
			site.fusionGateway.detachAllBooksPanic();
		}
	};
};

// logout or locale change
exports.onUserActionUnload = function(callback, cancelCallback) {
	function promptUser(diag, client, clientRef, cbck) {
		var options = {};
		options.$message = diag.message || diag.$message || document.site.localize.disconnect_userunload_msg;
		options.$type = "warning";
		options.$buttons = "okcancel";
		options.$isAutoClose = 25000;
		options.$default = "ok";
		options.$title = diag.$title || document.site.localize.disconnect_userunload_title;
		options.callback = function(response, closedBy) {
			var close = closedBy == "ok" || closedBy == "auto";
			if (!close) {
				document.site.toggleTopPanel(false);
				document.site.fusionGateway.activateBook(clientRef);
				if (cancelCallback) {
					cancelCallback();
				}
			}
			setTimeout(function() {
				cbck(close);
			}, 5);
			return true;
		};
		document.site.showMessage(options);
	}

	function notifyHoster(diag, client, clientRef, cbck) {
		if ((diag.severity || diag.$severity) !== "success") {
			promptUser(diag, client, clientRef, cbck);
		} else {
			callback();
		}
	}

	var books = document.site.fusionGateway._books;
	var booksNb = books.length;
	if (booksNb > 0) {
		// check if there is an ongoing dialogue between client and server
		// yes -> can't proceed. show alert message
		// no -> proceed (see below)
		document.site.fusionGateway.detachAllBooks(notifyHoster, false, false, true);
	} else callback();
};

// handling disconnection in case of timeout
exports.updateTimer = function() {
	function notifyHoster(diag, client, clientRef) {
		if ((diag.severity || diag.$severity) !== "success") {
			//debugger; // severity is supposed to be success, cause detach has been forced
		} else {
			setTimeout(function() {
				document.site.showDiagnoses({
					$diagnoses: [{
						$severity: "info",
						$message: document.site.localize.disconnect_timeout_info
					}]
				});
			}, 1000);
		}
	}

	// maintain session by sending a useless request to server
	function callbackConfirm() {

		var options = {};
		options.$location = {
			$url: "/sdata/syracuse/collaboration/syracuse/sessionInfos?representation=sessionInfo.$query&count=1"
		};

		//debugger;
		document.controller.sendRequest(null, options, function(data) {});

	}

	// convergence sessions will be closed and you will head back to syracuse 
	function callbackCancel() {
		//TODO
		document.site.fusionGateway.detachAllBooks(notifyHoster, true, true, false);
	}

	var books = document.site.fusionGateway && document.site.fusionGateway._books;
	var booksNb = books ? books.length : 0;
	if (booksNb > 0) {
		var delay = 180000; // 3 minutes
		var timeout = document.site.userProfile.getServerSessionTimeOut && (document.site.userProfile.getServerSessionTimeOut() - delay) || 120000; // 2 minutes default
		// if negative
		timeout = timeout <= 0 ? 120000 : timeout;

		// clear any previous ongoing timeout
		clearTimeout(document.site.serverTimeOutHandler);

		// run timer
		document.site.serverTimeOutHandler = setTimeout(function() {
			if (document.site.fusionGateway.canDetachBooks()) {
				onServerTimeOut(callbackConfirm, callbackCancel);
			} else {
				callbackConfirm();
			}
		}, timeout);

	} else {
		clearTimeout(document.site.serverTimeOutHandler);
	}
};

// show msgbox on server timeout
function onServerTimeOut(cbckOk, cbckCancel) {
	var options = {};
	options.$message = document.site.localize.disconnect_timeout_msg;
	options.$type = "warning";
	options.$buttons = "yesno";
	options.$isAutoClose = 25000;
	options.$default = "no";
	options.$title = document.site.localize.disconnect_timeout_title;
	options.callback = function(response, closedBy) {
		var close = closedBy == "yes";
		if (!close) {
			cbckCancel();
		} else {
			cbckOk();
		}
		return true;
	};
	document.site.showMessage(options);
}