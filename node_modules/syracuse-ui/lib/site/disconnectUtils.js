"use strict";

exports.onWindowUnload = function(site) {
	// handler for session closing in case of page leaving or refresh (triggered before unload, cancelable)
	window.onbeforeunload = function(event) {
		if (site.fusionGateway && site.fusionGateway._books && site.fusionGateway._books.length > 0) {
			// alert message is shown according to the browser
			var alertMsg = site.localize.disconnect_unload_alert.replace("{booksNb}", site.fusionGateway._books.length);
			switch (site.browser.getIdentity().name) {
				case "firefox":
					// display alert text in diagnoses panel before browser alert box
					site.showDiagnoses({
						$diagnoses: [{
							"severity": "error",
							"message": alertMsg
						}],
						autoHide: {
							"autoHide.autoHideTimeOut": 1000
						}
					});
					return alertMsg;
				case "chrome":
					// display alert text in browser alert box
				case "safari":
				case "msie":
					var ee = event || window.event;
					if (ee) {
						ee.returnValue = alertMsg;
					}
					return alertMsg;
				default:
					// both alert display methods 
					site.showDiagnoses({
						$diagnoses: [{
							"severity": "error",
							"message": alertMsg
						}]
					});
					var ee = event || window.event;
					if (ee) {
						ee.returnValue = alertMsg;
					}
					return alertMsg;
			}
		}
	};
	// handler in case of page leaving or refresh (triggered after onbeforeunload, not cancelable)
	window.onunload = function() {
		if (site.fusionGateway && site.fusionGateway._books && site.fusionGateway._books.length > 0) {
			site.fusionGateway.detachAllBooksPanic();
		}
	};
};

function _promptOnUserProfileChange(reason, cbckContinue, cbckCancel) {
	var mess, options = {}, site = syra_site;
	var prefLocal = "onuserprofilechange_";
	var nbBooks, books = site.fusionGateway._books;
	if ((nbBooks = books.length) > 0) {
		if (reason == "logout") {
			mess = site.localize[prefLocal + reason];
			options.$title = site.localize[prefLocal + "title" + reason];
		} else {
			if (!reason || !(mess = site.localize[prefLocal + reason])) {
				mess = site.localize[prefLocal + "defaultmess"];
			}
			mess += ("\n" + site.localize[prefLocal + "mark"]);
			options.$title = site.localize[prefLocal + "title"];
		}
		mess += ("\n" + String.fromCharCode(1) + "\n" + site.localize[prefLocal + "confirm"]);
		options.$message = mess;
		options.$type = "warning";
		options.$buttons = "yesno";
		options.$isAutoClose = 40000;
		options.$default = "yes";
		options.callback = function(response, closedBy) {
			var close = closedBy == "yes" || closedBy == "auto";
			if (!close) {
				syra_site.siteFunctions.toggleTopPanel(false);
				if (cbckCancel) {
					cbckCancel();
				}
			} else {
				cbckContinue();
			}
			return true;
		};
		site.showMessage(options);
	} else {
		cbckContinue();
	}
}

// logout or locale change
exports.onUserActionUnload = function(callback, cancelCallback, reason, noPrompt) {
	if (!noPrompt) {
		_promptOnUserProfileChange(reason, function() {
			onUserActionUnloadEx(callback, cancelCallback);
		}, cancelCallback);
	} else {
		onUserActionUnloadEx(callback, cancelCallback);
	}
};

function onUserActionUnloadEx(callback, cancelCallback) {
	function promptUser(diag, client, clientRef, cbck) {
		var options = {};
		options.$message = diag.message || diag.$message || syra_site.localize.disconnect_userunload_msg;
		options.$type = "warning";
		options.$buttons = "okcancel";
		options.$isAutoClose = 25000;
		options.$default = "ok";
		options.$title = diag.$title || syra_site.localize.disconnect_userunload_title;
		options.callback = function(response, closedBy) {
			var close = closedBy == "ok" || closedBy == "auto";
			if (!close) {
				syra_site.siteFunctions.toggleTopPanel(false);
				syra_site.fusionGateway.activateBook(clientRef);
				if (cancelCallback) {
					cancelCallback();
				}
			}
			setTimeout(function() {
				cbck(close);
			}, 5);
			return true;
		};
		syra_site.showMessage(options);
	}

	function notifyHoster(diag, client, clientRef, cbck) {
		if ((diag.severity || diag.$severity) !== "success") {
			promptUser(diag, client, clientRef, cbck);
		} else {
			callback();
		}
	}

	var books = syra_site.fusionGateway._books;
	var booksNb = books.length;
	if (booksNb > 0) {
		// check if there is an ongoing dialogue between client and server
		// yes -> can't proceed. show alert message
		// no -> proceed (see below)
		syra_site.fusionGateway.detachAllBooks(notifyHoster, false, false, true);
	} else
		callback();
};

// handling disconnection in case of timeout
exports.updateTimer = function() {
	function notifyHoster(diag, client, clientRef) {
		if ((diag.severity || diag.$severity) !== "success") {
			//debugger; // severity is supposed to be success, cause detach has been forced
		} else {
			setTimeout(function() {
				syra_site.showDiagnoses({
					$diagnoses: [{
						$severity: "info",
						$message: syra_site.localize.disconnect_timeout_info
					}]
				});
			}, 1000);
		}
	}

	// maintain session by sending a useless request to server
	function callbackConfirm() {

		var options = {};
		options.$location = {
			$url: "/sdata/syracuse/collaboration/syracuse/sessionInfos?representation=sessionInfo.$query&count=1"
		};

		//debugger;
		syra_controller.sendRequest(null, options, function(data) {});

	}

	// convergence sessions will be closed and you will head back to syracuse 
	function callbackCancel() {
		//TODO
		syra_site.fusionGateway.detachAllBooks(notifyHoster, true, true, false);
	}

	var books = syra_site.fusionGateway && syra_site.fusionGateway._books;
	var booksNb = books ? books.length : 0;
	if (booksNb > 0) {
		var delay = 180000; // 3 minutes
		var timeout = syra_site.userProfile.getServerSessionTimeOut && (syra_site.userProfile.getServerSessionTimeOut() - delay) || 120000; // 2 minutes default
		// if negative
		timeout = timeout <= 0 ? 120000 : timeout;

		// clear any previous ongoing timeout
		clearTimeout(syra_site.serverTimeOutHandler);

		// run timer
		syra_site.serverTimeOutHandler = setTimeout(function() {
			if (syra_site.fusionGateway.canDetachBooks()) {
				onServerTimeOut(callbackConfirm, callbackCancel);
			} else {
				callbackConfirm();
			}
		}, timeout);

	} else {
		clearTimeout(syra_site.serverTimeOutHandler);
	}
};

// show msgbox on server timeout
function onServerTimeOut(cbckOk, cbckCancel) {
	var options = {};
	options.$message = syra_site.localize.disconnect_timeout_msg;
	options.$type = "warning";
	options.$buttons = "yesno";
	options.$isAutoClose = 25000;
	options.$default = "no";
	options.$title = syra_site.localize.disconnect_timeout_title;
	options.callback = function(response, closedBy) {
		var close = closedBy == "yes";
		if (!close) {
			cbckCancel();
		} else {
			cbckOk();
		}
		return true;
	};
	syra_site.showMessage(options);
}