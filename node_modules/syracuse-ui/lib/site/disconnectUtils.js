"use strict";
var locale = require('syracuse-core/lib/locale');

exports.onBeforeUnload = function(event){
    var site = document.site;
    
    var localize = locale.resources(module)();
    // if some convergence sessions opened, user is warned
    if (document.controller && document.controller.fusionGateway && document.controller.fusionGateway._books) {
        site.books = document.controller.fusionGateway._books;
        var booksNb = site.books.length;
        if (booksNb > 0) {
            // alert message is shown according to the browser
            var alertMsg = localize.d_unload_alert.replace("{booksNb}", booksNb);
            switch (getBrowserName().toLowerCase()) {
                case "firefox": // display alert text in diagnoses panel before browser alert box
                    site.showDiagnoses({
                        $diagnoses: [{
                            "severity": "error",
                            "message": alertMsg
                        }],
                        autoHide: {
                            "autoHide.autoHideTimeOut": 1000
                        }
                    });
                    return alertMsg;
                case "chrome": // display alert text in browser alert box
                case "safari":
                case "msie":
                    var ee = event || window.event;
                    if (ee) {
                        ee.returnValue = alertMsg;
                    }
                    return alertMsg;
                default: // both alert display methods 
                    site.showDiagnoses({
                        $diagnoses: [{
                            "severity": "error",
                            "message": alertMsg
                        }]
                    });
                    var ee = event || window.event;
                    if (ee) {
                        ee.returnValue = alertMsg;
                    }
                    return alertMsg;
            }
        }
    }
}



exports.onUnload = function(){
    //TODO
    //var site = document.site;
    //if (site.books && site.books.length > 0) {
    // send ACK_TERM to all convergence sessions
    //}
}


// logout or locale change
exports.onUserActionUnload = function(opt){

    var localize = locale.resources(module)();
    
    function promptUser(diag, client, clientRef, cbck){
        var options = {};
        options.$message = diag.message || localize.d_userunload_msg;
        options.$type = "warning";
        options.$buttons = "okcancel";
        options.$title = diag.$title || localize.d_userunload_title;
        options.callback = function(response, closedBy){
            setTimeout(function(){
                cbck(closedBy == "ok");
            }, 5);
            return true;
        }
        document.site.showMessage(options);
    }
    
    function doClick(opt){
        if (opt) {
            if (opt.menuItem) {
                document.controller.executeMenu(opt.menuItem);
            }
            else 
                if (opt.fieldData) {
                    var field = opt.fieldData.field;
                    var event = opt.fieldData.event;
                    field.onClickPicker(event.currentTarget);
                }
        }
    }
    
    function notifyHoster(diag, client, clientRef, cbck){
        if (diag.severity !== "success") {
            promptUser(diag, client, clientRef, cbck);
        }
        else {
            doClick(opt);
        }
    }
    
    var books = document.controller.fusionGateway._books;
    var booksNb = books.length;
    if (booksNb > 0) {
        // check if there is an ongoing dialogue between client and server
        // yes -> can't proceed. show alert message
        // no -> proceed (see below)
        document.controller.fusionGateway.detachAllBooks(notifyHoster, false, false, opt && opt.menuItem);
    }
    else 
        return true;
}


function getBrowserName(){
    var N = navigator.appName, ua = navigator.userAgent;
    var M = ua.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
    M = M ? M[1] : N;
    return M;
}
