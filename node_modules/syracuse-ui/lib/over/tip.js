"use strict";
var helpers = require('syracuse-core').helpers;

function Tip() {}

helpers.defineClass(Tip, null, {
	_show: function(config) {
		if (!this._item) {
			this._item = syra_dom.div("s-tip");
		}
		var text = config.text;
		if (config.description) {
			if (text) {
				text += "\r\n" + config.description;
			} else {
				text = config.description;
			}
		}
		if (config.node) {
			syra_dom.empty(this._item);
			this._item.appendChild(config.node);
		} else {
			if (text.indexOf("<em") >= 0) {
				if (!this.em) {
					this.em = "<em class='s-tip-em'>";
				}
				this._item.innerHTML = syra_dom.escape(text.replace(/<em>/g, this.em));
			} else {
				syra_dom.empty(this._item);
				syra_dom.pre("s-pre", exports.utcTip.replaceUTC(text) || config.target.syraShortCutTitle || text, this._item);
			}
			if (config.target.syraShortCutTitle) {
				syra_dom.text("s-title-shortcut", text, this._item);
			}
			if (config.target.syraShortCutTip) {
				syra_dom.text("s-title-shortcut", "(" + config.target.syraShortCutTip + ")", this._item);
			}
		}
		this._item.style.zIndex = syra_dom.getTopZIndex();
		var posX = syra_config.isRTL ? "right" : "left";
		syra_site.layoutSlot.appendChild(this._item);
		$(this._item).position({
			my: posX + " top",
			at: posX + " bottom+15",
			of: $(config.target),
			within: syra_site.layoutSlot
		});
	},
	showNode: function(node, target) {
		var self = this;
		self.clear();
		self.target = target;
		target.syraTipTitle = target.title;
		target.title = "";
		self.showTimeOut = setTimeout(function() {
			self._show({
				node: node,
				target: target
			});
		}, 200);
	},
	show: function(text, target, check, description) {
		this.clear();
		if (text) {
			var self = this;
			self.target = target;
			target.syraTipTitle = target.title;
			target.title = "";
			if (!check || description || (target.syraShortCutTip || target.syraShortCutTitle || target.syraTip == 2 || ((target.scrollWidth - target.clientWidth) > 1)) || exports.utcTip.hasUTC(text)) {
				self.showTimeOut = setTimeout(function() {
					self._show({
						text: text,
						target: target,
						description: description
					});
				}, 800);
			}
		}
	},
	clear: function() {
		if (this.target) {
			if (this.target.syraTipTitle) {
				this.target.title = this.target.syraTipTitle;
			}
			delete this.target;
		}
		this.hide();
	},
	hide: function() {
		this.showTimeOut && clearTimeout(this.showTimeOut);
		syra_dom.remove(this._item);
		this.showTimeOut = null;
	}
});


function FieldTip() {}

helpers.defineClass(FieldTip, Tip, {
	onKeyUp: function(field, event) {
		if (!field.isFieldTipDisabled) {
			var target = event.target;
			var value = target && target.value;
			if (this.hasMaxLengthWarn && field.input && value !== undefined) {
				if (field.$field.$maxLength && !(value && value.length >= field.$field.$maxLength)) {
					this.clear();
					delete this.hasMaxLengthWarn;
				}
			}
		}
	},
	onKeyPress: function(field, event, charCode) {
		if (!field.isFieldTipDisabled) {
			var target = event.target;
			var value = target && target.value;
			if (field.input && target && value !== undefined && field.$field.$type !== "application/x-boolean") {
				if (field.$field.$maxLength) {
					if (charCode && value && value.length >= field.$field.$maxLength) {
						this.hasMaxLengthWarn = true;
						this._show({
							text: syra_local.field_warn_limit_input,
							target: this.target = target
						});
					} else {
						if (this.hasMaxLengthWarn) {
							this.clear();
							delete this.hasMaxLengthWarn;
						}
					}
				}
			}
		}
	},
	onItemInOut: function(field, on) {
		if (!field.isFieldTipDisabled) {
			if (on) {
				var $field, $tooltip;
				var dataset = field.articleParent && field.articleParent.dataset;
				if (dataset) {
					$field = dataset.$properties && dataset.$properties[field.$item.$bind];
					$tooltip = $field && $field.$tooltip;
				}
				if (!$tooltip) {
					$tooltip = field.$field && field.$field.$tooltip;
				}
				if ($tooltip) {
					$tooltip = syra_expression.parse(field.articleParent, $tooltip);
				}
				if (field.input) {
					this.show(field.getInputValue(), field.input, true, $tooltip);
				} else {
					this.show(field.displayText || field._dataValue.textContent, field._dataValue, true, $tooltip);
				}
			} else {
				this.clear();
			}
		}
	}
});

exports.titleTip = new Tip();
exports.fieldTip = new FieldTip();

exports.utcTip = {
	pattern: /(\d{4}-\d{2}-\d{2})[ T](\d{2}:\d{2}:\d{2})(Z|\s*GMT)/, //var _pattern = /\d{4}-\d{2}-\d{2}[ T]\d{2}:\d{2}:\d{2}(Z|\s*GMT)/;
	hasUTC: function(value) {
		if (value && value.length >= 20) {
			if (this.pattern.test(value)) {
				return true;
			}
		}
		return false;
	},
	replaceUTC: function(value, useEmphasis) {
		/*if (useEmphasis && value) {
		 value += "2012-06-23T08:22:45Z"; // " 2014-10-28 13:18:21 GMT";
		 }*/
		if (this.hasUTC(value)) {
			var found = value.match(this.pattern);
			for (var ii = 0, jj = found.length; ii < jj; ii++) {
				if (found[ii].length > 10) {
					if (useEmphasis) {
						value = value.replace(found[ii], "<em class='s-dt-utc'>" + found[ii] + "</em>");
					} else {
						value = value.replace(found[ii], syra_culture.utcToLocal(found[ii]));
					}
				}
			}
			return value;
		}
	},
	emphasis: function(value) {
		return this.replaceUTC(value, true);
	},
	onInout: function(onEnter, event, target) {
		var className = target && target.className;
		var isUTC = className && className.indexOf && className.indexOf("s-dt-utc") >= 0;
		if (isUTC) {
			var field = syra_item.findField(target);
			if (field && onEnter) {
				exports.titleTip.show(target.textContent, target);
			}
		}
	}
};