"use strict";
var Resizer = require("syracuse-ui/lib/scroll/resizer").Resizer;
var Draggable = require('syracuse-ui/lib/scroll/drag').Draggable;

function _resizeOverlay(pn) {
	var siteSize = syra_site.getSize();
	if (pn._content.isFusionPage) {
		pn.overlay.style.top = siteSize.body.top + "px";
		pn.overlay.style.height = siteSize.body.height + "px";
	} else {
		pn.overlay.style.height = siteSize.height + "px";
	}
	pn.overlay.style.width = siteSize.width + "px";
	if (!pn.isDeactivated) {
		if (pn._content.layoutSlot.style.display !== "none") // manage of multiple window under modal
			pn.overlay.style.display = "";
	}
}

function _setAutoFocus(pn) {
	var link = document.createElement("a");
	link.className = "s-dialog-focus-anchor";
	link.setAttribute('href', '#');
	pn.overSlot.appendChild(link);
	link.focus();
}

function _setZIndex(pn) {
	var zIndex = pn.options.$zIndex;
	if (pn.isModal) {
		pn.overlay = syra_dom.div("s-overlay");
		pn.overlay.syraIsOverlay = true;
		syra_dom.setZIndex(pn.overlay, false, zIndex);
		syra_site.layoutSlot.appendChild(pn.overlay);
	}
	syra_dom.setZIndex(pn.overSlot, false, zIndex);
}


function _loadPageRepresentation(pn, onLoaded) {
	if (pn.options.$method && (pn.options.$method != "GET")) {
		syra_router.postQuery({
			menu: pn.options,
			article: pn.options.article,
			success: function($url, data) {
				pn.hasCallback = true; // in order not to dispose the dialog before the callback
				syra_router.loadRepresentation({
					article: pn.options.article,
					segments: $url,
					success: function($itemPage) {
						if (data && syra_form.isFormUrl(pn.options.$url)) {
							$itemPage.initData = data;
						}
						_openPage(pn, $itemPage, onLoaded);
					}

				});
			}
		});
	} else {
		pn.hasCallback = true; // in order not to dispose the dialog before the callback
		syra_router.loadRepresentation({
			article: pn.options.article,
			segments: pn.options.$url,
			success: function($itemPage) {
				_openPage(pn, $itemPage, onLoaded);
			}
		});
	}
}

function _onOkClick() {
	var pn = this.parent;
	if ((pn.options.onValidate && pn.options.onValidate(pn._content, pn) !== false) || (pn.options && pn.options.onServerSaved)) {
		if (pn.options.onServerSaved) {
			syra_menus.applyChange(pn._content, {
				$actions: {
					$save: {
						$isDisabled: false
					}
				}
			});
			syra_menus.click.save(pn._content);
		} else {
			pn.close(true);
		}
	}
}

function _loadPage(pn, page, onLoaded) {
	if (!page.layoutSlot) {
		pn.overSlot = page.layoutSlot = document.createElement("div");
		page.layoutSlot.appendChild(page.domItem);
	}
	page.overPanel = pn;
	pn.page = pn._content = page;
	pn.id = page.id + "-over";
	syra_item.register(pn);
	var $skin = pn.$skin + "-page";
	if (page.scrollview) {
		page.scrollview.className = $skin + "-scrollview";
	}
	pn.overSlot.className = $skin + "-container";
	if (page.header) {
		page.header.className = $skin + "-head";
	}
	page.body.className = $skin + "-body";
	page.domItem.className = $skin;
	if (page.domTitle) {
		page.domTitle.className = $skin + "-title";
	}
	pn.overSlot.setAttribute("tabindex", "2");
	pn.options.$isAutoClose = pn.options.$isAutoClose === true;
	pn.addCloseButton();


	if (pn.options.onValidate || pn.options.onServerSaved) {
		pn.okBtn = syra_button.add({
			parent: pn,
			slot: pn.overSlot,
			text: syra_local.over_ok,
			css: pn.$skin + "-page-ok",
			iconOnly: true,
			fontIcon: "save",
			click: _onOkClick
		});
		pn.options.$isOkHidden && pn.hideOkButton(true);
	}
	if (pn.options.onSelectRecord) {
		page.onSelectRecord = function(selectedRecords) {
			if (pn.options.onSelectRecord(selectedRecords, page) !== false) {
				pn.close();
			}
		};
	}
	_setZIndex(pn);
	pn.overSlot.style.top = "0px";
	syra_site.layoutSlot.appendChild(pn.overSlot);
	pn.addDraggable();
	pn.addResizer();
	pn.isOpened = true;
	pn.options.$autoFocus && _setAutoFocus(pn);
	pn.options.onOpened && pn.options.onOpened(pn);
	pn.resize();
	page.resizeItem(true);
	syra_pageBuilder.activateQueryList(page);
	pn.overSlot.style.visibility = "";
	pn.isOverPage = true;
	delete pn.hasCallback;
	onLoaded && onLoaded(pn);
}

function _openPage(pn, $itemPage, onLoaded) {
	if ($itemPage || pn.options.page) {
		if (pn.options.page) {
			pn.overSlot = pn.options.page.layoutSlot || document.createElement("div");
			_loadPage(pn, pn.options.page, onLoaded);
		} else {
			pn.overSlot = $itemPage.layoutSlot = document.createElement("div");
			$itemPage.overPanel = pn;
			syra_pageBuilder.load({
				$itemPage: $itemPage,
				success: function(page) {
					_loadPage(pn, page, onLoaded);
				}
			});
		}
	} else {
		if (pn.options.$itemPage) {
			_openPage(pn, pn.options.$itemPage, onLoaded);
		} else {
			_loadPageRepresentation(pn, onLoaded);
		}
	}
}

function Panel() {

}

Panel.prototype.addDraggable = function() {
	this.draggable = new Draggable({
		pn: this,
		handle: syra_dom.div("s-modal-drag", this.overSlot),
		start: function(event) {
			syra_dom.getBoundingClientRect(this.pn.overSlot, this);
			this.startX = event.pageX;
			this.startY = event.pageY;
		},
		drag: function(event) {
			this.pn.overSlot.style.left = (Math.max(0, this.left + (event.pageX - this.startX))) + "px";
			this.pn.overSlot.style.top = (Math.max(0, this.top + (event.pageY - this.startY))) + "px";
		},
		stop: function() {}
	});
};
Panel.prototype.addResizer = function() {
	this.resizer = new Resizer({
		item: this,
		body: this.overSlot,
		slot: this.overSlot,
		drag: function(resizing) {
			if (this.$width != undefined) {
				this.item.$width = this.$width;
			}
			if (this.$height != undefined) {
				this.item.$height = this.$height;
			}
			this.item.resizePage(false);
		},
		stop: function(event) {

		}
	});
};

Panel.prototype.resizePage = function(center) {
	var siteSize = syra_site.getSize();
	var page = this._content && this._content.page;
	var pageSize = page.getPageSize();
	var overSize = pageSize.overPanel;
	var scrollTop = page.scrollview.scrollTop;
	if (this.$width) {
		overSize.maxWidth = this.$width;
		this.overSlot.style.minWidth = overSize.maxWidth + "px";
		this.overSlot.style.width = overSize.maxWidth + "px";
	} else {
		this.overSlot.style.minWidth = siteSize.overPanel.minWidth + "px";
	}
	if (this.$height) {
		overSize.maxHeight = this.$height;
		this.overSlot.style.height = overSize.maxHeight + "px";
	}
	pageSize.maxScrollWidth = overSize.maxWidth - overSize.marginWidth;
	pageSize.maxScrollHeight = overSize.maxHeight - overSize.marginHeight;
	page.scrollview.style.maxWidth = pageSize.maxScrollWidth + "px";
	page.scrollview.style.maxHeight = pageSize.maxScrollHeight + "px";

	if (page.$facet == "$lookup" || page.$facet == "$select") {
		if (center !== false) {
			this.overSlot.style.top = "0px";
			this.overSlot.style.left = "0px";
			this.center();
		} else {
			page.resizeItem();
			return;
		}
	}
	var stack = page.resizableList && page.resizableList.stack;
	var list = stack && stack.length == 1 && stack[0];
	if (list.$item && list.$item.$format == "grid") {
		var additionalHeight = pageSize.maxScrollHeight - page.scrollview.scrollHeight;
		var bodySlot = list.builder.scrollTable && list.builder.scrollTable.bodySlot;
		if (bodySlot) {
			var diffH = bodySlot.scrollHeight - (bodySlot.clientHeight + 1);
			additionalHeight = diffH > 0 ? Math.min(diffH, additionalHeight) : 0;
			if (additionalHeight) {
				page.scrollview.style.height = page.scrollview.scrollHeight + additionalHeight + "px";
				list.resizeItem();
			}
		}
	}
	var barH;
	if (page.designer && page.designer.isDesignBarVisible) {
		barH = page.designer.treebarSlot && page.designer.treebarSlot.scrollHeight;
		if (page.designer.settingBar) {
			barH = Math.max(page.designer.settingBar.slot.scrollHeight, barH);
		}
	} else {
		barH = page.menuBar && page.menuBar.body.scrollHeight;
		if (page.fusionBar) {
			barH = Math.max(page.fusionBar.slot.scrollHeight, barH);
		}

	}
	if (barH) {
		var scrollHeight = page.scrollview.clientHeight;
		barH = Math.max(page.scrollview.scrollHeight, barH);
		var prevBarHeight = pageSize.barHeight;
		pageSize.barHeight = barH = Math.min(pageSize.maxScrollHeight, Math.max(scrollHeight, barH));
		if ((barH != scrollHeight) || (prevBarHeight != pageSize.barHeight)) {
			if (barH != scrollHeight) {
				page.scrollview.style.height = (barH - page.diagnoseSlot.scrollHeight) + "px";
			}
			if (page.designer && page.designer.isDesignBarVisible) {
				page.designer.treebarSlot.style.height = pageSize.barHeight + "px";
				page.designer.treesBar && page.designer.treesBar.resizeBar();
				page.designer.settingBar.resizeBar(pageSize.barHeight);
			} else {
				page.fusionBar && page.fusionBar.resizeBar(true);
			}

		}
	}
	(center !== false) && this.center();
	if (scrollTop) {
		page.scrollview.scrollTop = Math.min(scrollTop, page.scrollview.scrollHeight - page.scrollview.clientHeight);
	}
};

Panel.prototype.center = function() {
	var siteSize = syra_site.getSize();
	this.overSlot.style.top = ((siteSize.height - this.overSlot.clientHeight) / 2) + "px";
	this.overSlot.style.left = ((siteSize.width - this.overSlot.clientWidth) / 2) + "px";
};

Panel.prototype.open = function(options) {
	if (options.position && options.position.of) {
		options.position.of = $(options.position.of);
	}
	this.options = options;
	if (options.$itemPage || options.$url || options.page) {
		_openPage(this, undefined, options.onLoaded);
		options.page && options.page.resizeItem(true); //Resize as page already resize on preload
	} else {
		if (!options.content) {
			options.content = {};
		}
		this._content = options.content;
		this.overSlot = options.slot || options.content.domItem;
		syra_dom.toggleClass(this.overSlot, "s-popup-default", true);

		if (this.overSlot.style.position != "fixed") {
			this.overSlot.style.position = "absolute";
		}
		this.id = (this._content.id || (++syra_site._childItemOffset)) + "-over";
		syra_item.register(this);
		_setZIndex(this);
		this.overSlot.style.top = "0px";
		this.overSlot.style.display = '';
		options.$isAutoClose = options.$isAutoClose !== false;
		syra_site.layoutSlot.appendChild(this.overSlot);

		this.isOpened = true;
		options.$autoFocus && _setAutoFocus(this);
		options.onOpened && options.onOpened(this);
		!this._content.isPageLoaded && this.resize(); //content is not page => resize
	}
};

Panel.prototype.close = function(validated, dispose) {
	if (!syra_over.no && !this.disposed && this.options && (this.options.close ? (this.options.close(validated !== true, dispose, this) !== false) : true)) {
		this.dispose();
	}
};

Panel.prototype.setCloseTimer = function(enable) {
	var self = this;
	if (enable) {
		self._autoCloseTimeout = setTimeout(function() {
			self.close();
		}, self.options.autoCloseTimeout || 1000);
	} else {
		if (self._autoCloseTimeout) {
			clearTimeout(self._autoCloseTimeout);
			self._autoCloseTimeout = null;
		}
	}
};

Panel.prototype.hideOkButton = function(hide) {
	syra_button.hide(this.okBtn, hide);
};
Panel.prototype.addCloseButton = function(slot) {
	slot = slot || this.overSlot;
	this.btn_close = syra_button.add({
		parent: this,
		slot: slot,
		text: syra_local.over_close,
		css: this.$skin + "-page-close",
		iconOnly: true,
		fontIcon: "close",
		shortCutTip: syra_shortCuts.tip.close,
		click: function() {
			this.parent.close();
		}
	});
};
Panel.prototype.activate = function(isActivated) {
	this.isDeactivated = !isActivated;
	syra_dom.hide(this.overlay, this.isDeactivated);
	syra_dom.hide(this.overSlot, this.isDeactivated);
};
Panel.prototype.resize = function(resize, onScroll, isResizing) {
	if (!this.isDeactivated && this._content && this.isOpened && !this.disposed) {
		if (!onScroll && this.overlay) {
			_resizeOverlay(this);
		}
		if (syra_site.body) {
			var siteSize = syra_site.getSize();
			var page = this._content && this._content.page;
			var pageSize = page && page.getPageSize();
			if (syra_site.isResizing || !this.isMinMaxInit) {
				this.isMinMaxInit = true;
				var pnSize = (pageSize && pageSize.overPanel) || siteSize.overPanel;
				this.overSlot.style.maxWidth = pnSize.maxWidth + "px";
				this.overSlot.style.maxHeight = pnSize.maxHeight + "px";
			}
			if (this.options.resize) {
				this.options.resize(this, isResizing);
			} else {
				if (this.options.$center) {
					this.center();
				} else {
					if (this.options.position) {
						var slot = this.overSlot;
						var rect = syra_dom.getBoundingClientRect(slot);
						if (rect.width > siteSize.overPanel.maxWidth) {
							slot.style.width = (rect.width = siteSize.overPanel.maxWidth) + "px";
						}
						if (rect.height > siteSize.overPanel.maxHeight) {
							slot.style.height = (rect.height = siteSize.overPanel.maxHeight) + "px";
						}
						var page = this.openerBox && this.openerBox.page;
						var within;
						if (page && page.scrollview && this.options.position.of) {
							if (page.scrollview.contains(this.options.position.of[0])) {
								within = {
									collision: "flipfit",
									within: $(page.scrollview)
								};
							}
						}
						this.setPosition(within);
						if (this.options.onresize) {
							var maxHeight = syra_site.footer ? (syra_site.footer.getBoundingClientRect().top - slot.getBoundingClientRect().top) : syra_site.size.body.height;
							slot.style.maxHeight = maxHeight + "px";
							this.options.onresize(maxHeight);
						}
					} else {
						if (page && page.scrollview) {
							this.resizePage();
						}
					}
				}
			}
		}
	}
};
Panel.prototype.setPosition = function(within) {
	var $position = {
		my: this.options.position.my,
		at: this.options.position.at,
		of: $(this.options.position.of)
	};
	if ($position.at == "right top") {
		$position.at = "right+2 top"; //design margin
	}
	if (syra_context.isRTL) {
		var keys = ["my", "at"];
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			var key = keys[ii];
			if ($position[key]) {
				if ($position[key].indexOf("left") >= 0) {
					$position[key] = $position[key].replace("left", "right");
				} else {
					$position[key] = $position[key].replace("right", "left");
				}
			}
		}
	}
	if (within) {
		$position.collision = within.collision;
		$position.within = within.within;
	}
	$(this.overSlot).position($position);
};
Panel.prototype.dispose = function() {
	this.draggable && this.draggable.dispose();
	this.resizer && this.resizer.dispose();
	syra_over.onClose(this);
	this.overlay && syra_dom.remove(this.overlay);
	if (this._content) {
		delete this._content.overPanel;
	}
	if (this.options) {
		this.options.page = this.options.autoCloseBoundary = null;
		if (this.options.content) {
			delete this.options.content;
		} else {
			this.page && this.page.dispose();
			this.overSlot && syra_dom.empty(this.overSlot);
		}
		this.overSlot && syra_dom.remove(this.overSlot);
	}

	syra_site.disposeObject(this);
};


exports.open = function(openerBox, options, $skin) {
	var pn = new Panel();
	pn.isModal = options.isModal !== false;
	pn.$skin = $skin || "s-modal";
	pn.openerBox = openerBox;
	pn.openerPage = openerBox.page;
	pn.open(options);
	return pn;
};

Panel.prototype.hideCloseButton = function(hide) {
	syra_button.hide(this.btn_close, hide);
};