"use strict";

exports.isDisabled = false;

exports.group = {
	start: function(key) {
		console.groupCollapsed(key);
	},
	end: function() {
		console.groupEnd();
	}
};


exports.object = function(key, object, stringify) {
	if (!exports.isDisabled) {
		try {
			exports.group.start(key);
			if (stringify === false) {
				console.dir(object);
			} else {
				console.log("%c" + JSON.stringify(object, null, 2), "color:blue;");
			}
			exports.group.end();
		} catch (error) {

		}
	}
};

exports.page = {
	data: {
		startChange: function() {
			exports.group.start("page.startChange");
		},
		startApply: function(newData) {
			exports.group.start("page.applyChange");
			newData &&
				exports.object("newData", newData);
		},
		endApply: function() {
			exports.group.end();
		},
		endChange: function() {
			exports.group.end();
		},
	},
	load: {
		start: function(page, $itemPage) {
			exports.group.start("pageBuilder.load " + page.constructor.name);
			var keys = ["$authorUrl", "$facet", "$isEditMode", "$pageCategory", "$pageCollaborationUrl", "$authorUrl"];
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				var key = keys[ii];
				if (page[key] !== undefined) {
					if (typeof page[key] === "object") {
						console.log("%c" + key + ": \t" + JSON.stringify(page[key], null, 2), "color:blue;");
					} else {
						console.log("%c" + key + ": \t" + page[key], "color:blue;");
					}
				}
			}
			exports.object("urlSeg", page.urlSeg, false);
			exports.object("$prototype", page.$prototype, false);
			exports.object("$preferences", page.$preferences);
		},
		end: function() {
			exports.group.end();
		}
	},
	load: {
		start: function(page) {
			exports.group.start("page.load " + page.constructor.name);
		},
		end: function() {
			exports.group.end();
		}
	}
};

exports.item = {
	add: function(item, $item) {
		var key = "item.add";
		if (item) {
			if (item.constructor.name == "MenuBlockField") {
				return;
			}
			key += " " + item.constructor.name;
		}
		if ($item.$bind) {
			key += " $bind: " + $item.$bind;
		}
		try {
			exports.object(key, $item);
		} catch (error) {

		}

	},
	load: function(item) {
		var info = item.constructor.name + ".load";
		switch (item.constructor.name) {
			case "Layout":
				info = " $layoutType:" + item.$item.$layoutType;
				break;
			case "RecordArticle":
				if (item.isFilterArticle) {
					info = " isFilterArticle";
				}
				if (item.list) {
					info = "List " + item.list.$item.$bind + " " + info;
				}
				break;

		}
		exports.group.start(info);
	},
	end: function() {
		exports.group.end();
	}
};