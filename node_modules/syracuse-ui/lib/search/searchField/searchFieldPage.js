"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require('syracuse-ui/lib/page/rawPage').RawPage;
var SearchField = require('./searchField').SearchField;
var _queryLinks = {
	$query1: {
		$url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}&source=functions&count=5"
	},
	$query2: {
		$url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}&source=data&count=5"
	}
};


function _addItems(page, searchField) {
	page.dataset.$search = searchField.getDataValue();
	page.searchField = searchField;
	if (page.dataset.$search == "") {
		//TODO close dialog if empty field
		return;
	}
	page._suggestSlot = document.createElement("div");
	page._suggestSlot.className = "s-search-suggest-slot";
	page.loadNewItem(page._suggestSlot, {
		$skin: "s-search-suggest-query",
		$css: "s-search-suggest-query",
		$title: syra_local.searchQueryFunctions,
		$bind: "$query1",
		$alternateStyle: false,
		$selectMode: "row",
		$noDataText: syra_local.search_no_res,
		$isPagerHidden: true,
		$isMenuRecordHidden: true,
		$format: "cards",
		$skinCard: "s-search-suggest-card",
		$layout: {
			$items: [{
				$isEditMode: false,
				$bind: "$searchItemTitle",
				$isTitleHidden: true,
				$skin: "s-search-suggest-field-title"
			}]
		}
	}, page);
	page.loadNewItem(page._suggestSlot, {
		$skin: "s-search-suggest-query",
		$css: "s-search-suggest-query",
		$title: syra_local.searchQueryData,
		$alternateStyle: false,
		$bind: "$query2",
		$selectMode: "row",
		$noDataText: syra_local.search_no_res,
		$isPagerHidden: true,
		$isMenuRecordHidden: true,
		$format: "cards",
		$layout: {
			$items: [{
				$isEditMode: false,
				$bind: "$searchItemTitle",
				$isTitleHidden: true,
				$skin: "s-search-suggest-field-title"
			}, {
				$isEditMode: false,
				$bind: "$resultTypeTitle",
				$isTitleHidden: true,
				$skin: "s-search-suggest-field-type"
			}]
		}
	}, page);
	page.loadNewItem(page._suggestSlot, {
		$category: "link",
		$skin: "search-suggest-advanced",
		$bind: "$advancedSearch"
	}, page);
	page.applyChange({
		$query1: [],
		$query2: [],
		$links: {
			$advancedSearch: {
				$title: syra_local.searchAdvanceLabel,
				$url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}",
				$isHidden: true
			}
		}
	});
}

function _fillList(page, $bind) {
	syra_site.urlMaker.formatMenuUrl(page, _queryLinks[$bind], page.dataset, function($url, isCanceled) {
		syra_controller.callServer(page, {
			$location: {
				$url: $url
			}
		}, function(data) {
			data[$bind] = data.$resources;
			delete data.$resources;
			// display "see more results" if there is data
			// display 'see details' if length <= 5
			// display 'see more results' if length > 5
			if (data[$bind].length > 0) {
				data.$links = {
					$advancedSearch: {
						$isHidden: false,
						$title: data.$totalResults > 5 ? syra_local.searchAdvanceResults : (page.$hasMoreResults ? syra_local.searchAdvanceResults : syra_local.searchAdvanceDetails)
					}
				};
				page.$hasMoreResults = data.$totalResults > 5;
			}
			page.applyChange(data);
		});
	});
}


function SearchFieldPage() {}

exports.SearchFieldPage = helpers.defineClass(SearchFieldPage, RawPage, {
	setFocusToSearchField: function() {
		if (this.boundFields.$search && this.boundFields.$search.length) {
			this.boundFields.$search[0].focus();
		}
	},
	drawBox: function() {
		this.$skin = this.$item.$skin = "s-search-rq";
		this.domItem = this.body = document.createElement("article");
		this.domItem.className = this.$skin;
		this.layoutSlot.appendChild(this.domItem);
		this.renderLayoutContent();
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$bind == "$advancedSearch" || menuItem.$item && menuItem.$item.$bind == "$detail") {
			if (this.searchField && this.searchField.suggestPopup) {
				var self = this;
				setTimeout(function() {
					self.searchField.closeSuggest();
				}, 100);
			}
			return true;
		}
		return true;
	},
	createNewItem: function($item, boxParent) {
		if ($item.$bind == "$search") {
			var searchField = new SearchField();
			searchField.$field = this.$prototype.$properties[$item.$bind];
			return this.initializeNewItem(searchField, $item, boxParent);
		}
		return RawPage.prototype.createNewItem.call(this, $item, boxParent);
	},
	onSelectRecord: function(records) {
		if (records) {
			var keys = Object.keys(records);
			if (keys.length) {
				var record = records[keys[0]];
				if (record.menuItems.$detail) {
					syra_menus.click.detail(record);
				} else {
					if (record.dataset && record.dataset.$url) {
						syra_controller.executeMenu({
							$url: record.dataset.$url
						}, record);
					}
				}
			}
		}
	},
	loadAutoCompleteList: function(searchField) {
		_addItems(this, searchField);
		_fillList(this, "$query1");
		_fillList(this, "$query2");
		return this._suggestSlot;
	},
	unloadAutoCompleteList: function() {
		if (this._suggestSlot) {
			syra_site.dom.empty(this._suggestSlot);
			this._suggestSlot = null;
			this.removeItem(this.boundFields.$query1[0], false, true);
			this.removeItem(this.boundFields.$query2[0], false, true);
			syra_menus.removeMenu(this, "$advancedSearch");
			this.searchField.$isArrowClicked = this.searchField.$isRecordTriggered = null;
		}
	},
	dispose: function() {
		this.unloadAutoCompleteList();
		RawPage.prototype.dispose.call(this);
	}
});

exports.load = function(layoutSlot) {
	var $url = "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}";
	var $itemPage = {
		$isEditMode: true,
		layoutSlot: layoutSlot,
		$category: "searchRequest",
		openerUrlSegments: syra_site.urlMaker.parse($url),
		$pageCategoryClass: SearchFieldPage,
		$representation: {
			$prototype: {
				$properties: {
					$query1: {
						$type: "application/x-array",
						$item: {
							$properties: {
								$searchItemTitle: {
									$title: syra_local.searchDescription,
									$type: "application/x-string",
									$format: "$html",
									$capabilities: "sort,filter",
									$links: {
										$details: {
											$type: "application/json;vnd.sage=syracuse",
											$url: "{$url}",
											$method: "{$method}"
										}
									}
								}
							}
						}
					},
					$query2: {
						$type: "application/x-array",
						$item: {
							$properties: {
								$searchItemTitle: {
									$title: syra_local.searchDescription,
									$type: "application/x-string",
									$format: "$html",
									$capabilities: "sort,filter",
									$links: {
										$details: {
											$type: "application/json;vnd.sage=syracuse",
											$url: "{$url}",
											$method: "{$method}"
										}
									}
								},
								"$resultTypeTitle": {
									$title: syra_local.searchResultType,
									$type: "application/x-string",
									$format: "$html",
									$capabilities: "sort,filter"
								}
							}
						}
					},
					query: {
						"$type": "application/x-string"
					},
					$search: {
						$type: "application/x-string",
						$title: syra_local.searchFieldTitle,
						$links: {
							$suggest: {},
							$search: {
								$title: syra_local.siteSearchLink,
								"$type": "application/json;vnd.sage=syracuse",
								$url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}"
							}
						}
					}
				},
			},
			$article: {
				$isTitleHidden: true,
				$layout: {
					$items: [{
						$bind: "$search",
						$isTopLabelAlignment: false,
						$category: "field",
						$css: "s-search-rq-field",
						$inplace: true,
						$isTitlePlaceHolder: true
					}]
				}
			}
		}
	};
	return syra_site.pageLoader.load($itemPage);
};