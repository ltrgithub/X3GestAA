"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

function _getFocusRecIndex(records) {
	for (var ii = 0, jj = records.length; ii < jj; ii++) {
		var rec = records[ii];
		if (rec.domItem.className.indexOf("s-search-rq-field-carditem-hover") >= 0) {
			syra_site.dom.toggleClass(rec.domItem, "s-search-rq-field-carditem-hover", false);
			return ii;
		}
	}
}

function _showList(field) {
	if (field.getDataValue() !== "") {
		field.domItem.id = field.id;
		field.focus();
		field.searchValue = field.getDataValue();
		if (field.suggestPopup) {
			field.page.loadAutoCompleteList(field);
		} else {
			field.suggestPopup = syra_site.dialogManager.openPopup(field.boxParent, {
				content: field,
				picker: field.layoutSlot,
				slot: field.page.loadAutoCompleteList(field),
				position: {
					my: "right top",
					at: "right bottom",
					of: $(field.domItem)
				},
				onClose: function() {
					field.searchValue = null;
					field.suggestPopup = null;
					field.page.unloadAutoCompleteList();
				}
			});
		}
	} else {
		field.closeSuggest();
	}
}

function _run(field) {
	field._searching = setTimeout(function() {
		// search doesn't take whitespace into account
		if (field.getDataValue().replace(/\s+/g, '') !== "") {
			// if some research has already been done, proceed with the request if the value has changed
			if (field.searchValue) {
				if (field.searchValue !== field.getDataValue()) {
					_showList(field);
				} else {
					// if empty field, close incremental search popup
					if (field.searchValue == field.getDataValue() == "") {
						field.closeSuggest();
					}
				}
			} else {
				// first research (field.searchValue not set yet)
				_showList(field);
			}
		} else {
			field.closeSuggest();
		}

	}, 1000);
}


function SearchField() {}

exports.SearchField = helpers.defineClass(SearchField, Field, {
	onInputChange: function(input, event) {
		// this.onInputValidate(event);
	},
	closeSuggest: function() {
		this.suggestPopup && this.suggestPopup.close();
	},
	showPicker: function(onOut) {
		var show = this.getDataValue() != "";
		if (show) {
			this.mnPickers.clear.style.opacity = onOut ? 0.4 : 1;
			this.mnPickers.clear.style.display = "";
		} else {
			this.mnPickers.clear.style.display = "none";
		}
	},
	onSearchClick: function() {
		var value = this.getDataValue();
		if (value !== "") {
			this.setDatasetValue(value);
			syra_controller.executeMenu(this.$menus.$search, this.articleParent);
		}
	},
	notifyFieldChange: function(newValue, validated) {
		this.onSearchClick();
	},
	onClearClick: function() {
		this.setDataValue("");
		this.showPicker(false);
		this.closeSuggest();
		this.onInputValidate(); //trigger notification change
	},
	onInputFocusin: function(input, event) {
		this.showPicker();
	},
	onInputFocusout: function(input, event) {
		this.showPicker(true);
	},
	onKeyUp: function(input, event) {
		this.showPicker();
	},
	applyShortCuts: function(shortcuts) {
		var self = this;
		if (self._isAutoComplete) {
			// don't run search if 'Enter' button
			if (!shortcuts.enter) {
				//stop any previous ongoing search request
				clearTimeout(self._searching);
				_run(self);
				if (self.suggestPopup) { // handle navigation in drop down search result list (down(40) and up(38))
					if ((shortcuts.up || shortcuts.down) && self.suggestPopup) {
						var searchResRecords = self.page.boundFields.$query1[0].records.concat(self.page.boundFields.$query2[0].records);
						var index = _getFocusRecIndex(searchResRecords);
						var jj = searchResRecords.length;
						if (index != undefined) {
							index = shortcuts.down ? ((index + 1) <= (jj - 1) ? (index + 1) : 0) : ((index - 1) >= 0 ? (index - 1) : jj - 1);
						} else {
							index = shortcuts.down ? 0 : jj - 1;
						}
						searchResRecords[index].domItem.className += " s-search-rq-field-carditem-hover";
						self.$isArrowClicked = true;
					}
				}
			} else {
				// remove autocomplete list if opened
				if (self.suggestPopup) {
					// handle navigation in drop down search result list (enter)
					var searchResRecords = self.page.boundFields.$query1[0].records.concat(self.page.boundFields.$query2[0].records);
					var index = _getFocusRecIndex(searchResRecords);
					if (index != undefined && self.$isArrowClicked) {
						var record = searchResRecords[index];
						record.domItem.click();
						self.$isRecordTriggered = true;
					} else {
						// run search if field not empty
						if (self.getDataValue() !== '') {
							self.onInputValidate();
						}
						// close popup
						self.closeSuggest();
					}
				} else {
					if (self.getDataValue() !== '') {
						clearTimeout(self._searching);
						clearTimeout(self._onFieldChangeNotification);
						self._onFieldChangeNotification = setTimeout(function() {
							self.notifyFieldChange(self.getDataValue());
						}, 200);
					}
				}
			}
		}
	}
});