"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Article = require('syracuse-ui/lib/article/article').Article;

function SearchFacets() {}

exports.SearchFacets = helpers.defineClass(SearchFacets, Article, {
	drawBox: function() {
		this.domItem = document.createElement("aside");
		this.domItem.className = this.$skin = this.$item && this.$item.$skin || "s-search-facets";
		this.$itemSkin = this.$item && this.$item.$itemSkin || "s-search-facet";
		this.layoutSlot.appendChild(this.domItem);
		this.articleParent.bind(this, this.$item.$bind);
	},
	onFieldInputEvent: function(event) {
		if (event.type == "change") {
			var input = event.target;
			var facet = this.facets[input.syraFacet];
			var member = facet.members[input.syraMember];
			this._updateFilters(facet.dataset.$facet, member.dataset.$value || member.dataset.$title, member.checkBox.input.checked);
			// in case no filtering param, no "filters" param to add to the url
			var options = Object.keys(this.filters).length > 0 ? {
				jsonParams: {
					filters: this.filters
				}
			} : {};
			this.page.updateFilterState(options);
			this.page.fetch(options);
		}
	},
	_updateFilters: function($facet, $title, checked) {
		if (checked) {
			(this.filters[$facet] = this.filters[$facet] || []).push($title);
		} else {
			var filter = this.filters[$facet];
			if (filter) {
				filter.splice(filter.indexOf($title), 1);
				if (filter.length == 0) {
					delete this.filters[$facet];
				}
			}
		}
	},
	addMember: function(facet, index) {
		var id = this.id + "-" + facet.index + "-" + index;
		var member = {
			index: index,
			dataset: facet.dataset.$members[index],
			item: document.createElement("div"),
			title: document.createElement("div"),
			count: document.createElement("div")
		};
		syra_fields.renderCheckBock(member, id, this.$itemSkin + "-member-check");

		member.item.className = this.$itemSkin + "-member";
		member.title.className = this.$itemSkin + "-member-title";
		member.checkBox.input.syraFacet = facet.index;
		member.checkBox.input.syraMember = index;
		member.checkBox.input.syraOnInput = this.id;
		member.checkBox.input.syraItem = this.id;
		member.item.appendChild(member.checkBox.slot);

		if (member.dataset.$selected) {
			syra_fields.setCheckBockValue(member, true);
			this._updateFilters(facet.dataset.$facet, member.dataset.$value || member.dataset.$title, true);
		}

		member.title.textContent = member.dataset.$title;
		member.item.appendChild(member.title);

		member.count.className = this.$itemSkin + "-member-count";
		member.count.textContent = "(" + member.dataset.$count + ")";
		member.item.appendChild(member.count);

		// append member links if any
		if (member.dataset.$links) {
			var links = document.createElement("div");
			links.className = this.$itemSkin + "-member-links";
			member.item.appendChild(links);
			member.linksItem = this.page.loadNewItem(links, {
				$category: "menus",
				$skin: "s-list-menus",
				$layout: {
					$items: Object.keys(member.dataset.$links).map(function($bind) {
						return {
							$bind: $bind
						};
					})
				}
			}, this);
			this.page.applyChange({
				$links: member.dataset.$links
			});
		}
		facet.body.appendChild(member.item);
		return member;
	},
	setDataBind: function($searchFacets, record, metaData) {
		// variables
		this.filters = {};
		this.hasFacet = null;

		if (this.$searchFacets = $searchFacets) {

			syra_site.dom.empty(this.domItem);

			// append "filters" header / title
			var header = document.createElement("div");
			header.className = this.$skin + "-header";
			var title = document.createElement("div");
			title.className = this.$skin + "-header-title";
			title.textContent = syra_local.searchFacetFilters;
			header.appendChild(title);
			this.domItem.appendChild(header);

			// body
			this.searchFacetsBody = document.createElement("div");
			this.searchFacetsBody.className = this.$skin + "-body";
			this.domItem.appendChild(this.searchFacetsBody);

			this.facets = [];
			// appending searchFacets
			for (var ii = 0, jj = $searchFacets.length; ii < jj; ii++) {
				if ($searchFacets[ii].$members && $searchFacets[ii].$members.length > 0) {
					this.hasFacet = true;
					var facet = {
						index: this.facets.length,
						dataset: $searchFacets[ii],
						item: document.createElement("div"),
						body: document.createElement("div"),
						header: document.createElement("header"),
						members: []
					};
					this.facets.push(facet);

					facet.item.className = this.$itemSkin;
					facet.header.className = this.$itemSkin + "-header";
					facet.body.className = this.$itemSkin + "-body";

					// append members for each searchFacet
					for (var mm = 0, pp = facet.dataset.$members.length; mm < pp; mm++) {
						facet.members.push(this.addMember(facet, mm));
					}

					var title = document.createElement("div");
					title.className = this.$itemSkin + "-header-title";
					title.textContent = facet.dataset.$title || facet.dataset.$facet;
					facet.header.appendChild(title);

					// finalize building
					facet.item.appendChild(facet.header);
					facet.item.appendChild(facet.body);
					this.searchFacetsBody.appendChild(facet.item);
				}
			}
		}
	},
	dispose: function() {
		this.hasFacet = this.facets = null;
		Article.prototype.dispose.call(this);
	}
});