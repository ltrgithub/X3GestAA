"use strict";
var BarSplitter = require("syracuse-ui/lib/page/bar/barSplitter").BarSplitter;
var _filters, _facetItems, _map, _$facetSkin, _$criteria, _page, _slot;

function _updateFilters($facet, $title, checked) {
	if (checked) {
		(_filters[$facet] = _filters[$facet] || []).push($title);
	} else {
		var filter = _filters[$facet];
		if (filter) {
			filter.splice(filter.indexOf($title), 1);
			if (filter.length == 0) {
				delete _filters[$facet];
			}
		}
	}
}

function _addMemberLinks(member) {
	var links = document.createElement("div");
	links.className = _$facetSkin + "-member-links";
	member.item.appendChild(links);
	member.linksItem = _page.loadNewItem(links, {
		$category: "menus",
		$skin: "s-list-menus",
		$layout: {
			$items: Object.keys(member.dataset.$links).map(function($bind) {
				return {
					$bind: $bind
				};
			})
		}
	}, _page);
	_page.applyChange({
		$links: member.dataset.$links
	});
}

function _addMember(facet, index) {
	var id = _page.id + "-" + facet.key + "-" + index;
	var member = {
		index: index,
		dataset: facet.dataset.$members[index],
		item: document.createElement("div"),
		title: document.createElement("div"),
		count: document.createElement("div")
	};
	syra_fields.checkbox.render(member, id, _$facetSkin + "-member-check");

	member.item.className = _$facetSkin + "-member";
	member.title.className = _$facetSkin + "-member-title";
	member.checkBox.icon.syraFacet = member.checkBox.input.syraFacet = facet.key;
	member.checkBox.icon.syrainout = _page.id;
	member.checkBox.icon.syraMember = member.checkBox.input.syraMember = index;
	member.checkBox.input.syraOnInput = _page.id;
	member.checkBox.input.syraItem = _page.id;
	member.item.appendChild(member.checkBox.slot);

	if (member.dataset.$selected) {
		syra_fields.checkbox.setValue(member, true);
		_updateFilters(facet.dataset.$facet, member.dataset.$value || member.dataset.$title, true);
	}

	member.title.textContent = member.dataset.$title;
	member.item.appendChild(member.title);

	member.count.className = _$facetSkin + "-member-count";
	member.count.textContent = "(" + member.dataset.$count + ")";
	member.item.appendChild(member.count);

	member.dataset.$links && _addMemberLinks(member);
	facet.body.appendChild(member.item);
	return member;
}

function _addFacet($searchFacet) {
	var facet = {
		key: $searchFacet.$facet,
		dataset: $searchFacet,
		item: document.createElement("div"),
		body: document.createElement("div"),
		header: document.createElement("header"),
		members: []
	};

	facet.item.className = _$facetSkin;
	facet.header.className = _$facetSkin + "-header s-search-facet-type-" + facet.dataset.$facet;
	facet.header.textContent = facet.header.title = facet.displayedTitle = facet.dataset.$title || facet.dataset.$facet;
	facet.header.syraTip = 1;

	facet.body.className = _$facetSkin + "-body";

	for (var ii = 0, jj = facet.dataset.$members.length; ii < jj; ii++) {
		facet.members.push(_addMember(facet, ii));
	}

	facet.item.appendChild(facet.header);
	facet.item.appendChild(facet.body);
	_facetItems.push(_map[facet.key] = facet);
}

function _ensureDisplayOrder(slot) {
	if (_$criteria.$order) {
		var newStack = [];
		for (var ii = 0, jj = _$criteria.$order.length; ii < jj; ii++) {
			var $facet = _$criteria.$order[ii];
			for (var mm = 0, kk = _facetItems.length; mm < kk; mm++) {
				if (_facetItems[mm].dataset.$facet == $facet) {
					newStack.push(_facetItems[mm]);
					_facetItems.splice(mm, 1);
					break;
				}
			}
		}
		_facetItems = newStack.concat(_facetItems);
	}
	for (var ii = 0, jj = _facetItems.length; ii < jj; ii++) {
		slot.appendChild(_facetItems[ii].item);
	}
}

exports.fill = function(facets) {
	if (facets) {
		syra_site.dom.empty(_slot);
		_filters = {};
		_facetItems = [];
		_map = {};
		var header = document.createElement("div");
		header.className = _$facetSkin + "s-header";
		header.textContent = syra_local.searchFacetFilters;
		_slot.appendChild(header);

		var body = document.createElement("div");
		body.className = _$facetSkin + "s-body";
		var $filterCriteria = _$criteria.$filters;
		for (var ii = 0, jj = facets.length; ii < jj; ii++) {
			var facet = facets[ii];
			if (facet.$members && facet.$members.length > 0) {
				if (!$filterCriteria || $filterCriteria.indexOf(facet.$facet) >= 0) {
					_addFacet(facet);
				}
			}
		}
		_ensureDisplayOrder(body);
		_slot.appendChild(body);
	}
};


exports.onFieldInputEvent = function(event) {
	var input = event.target;
	if (input.syraFacet !== undefined) {
		var facet = _map && _map[input.syraFacet];
		if (facet) {
			var member = facet.members[input.syraMember];
			if (member) {
				switch (event.type) {
					case "change":
						_updateFilters(facet.dataset.$facet, member.dataset.$value || member.dataset.$title, member.checkBox.input.checked);
						// in case no filtering param, no "filters" param to add to the url
						var options = Object.keys(_filters).length > 0 ? {
							jsonParams: {
								filters: _filters
							}
						} : {};
						options.event = event;
						_page.setFilterQueryParam(options);
						_page.fetch(options);
						break;
					case "focusin":
					case "focusout":
						syra_site.dom.toggleClass(member.checkBox.icon, "s-focus", event.type == "focusin");
						break;
				}
			}
		}
	}
};

exports.onItemInOut = function(onEnter, event, target) {
	if (event.target.syraFacet !== undefined) {
		var facet = _map && _map[target.syraFacet];
		facet && syra_site.dom.toggleClass(facet.members[target.syraMember].checkBox.icon, "s-enter", onEnter);
	}
};

exports.checkVisibility = function() {
	if (_page.bar) {
		if (_facetItems && _facetItems.length > 0) {
			if (_page.bar.page.layoutSlot.style.display != "none") {
				_page.bar.toggleBar(true);
				_page.bar.resizeSplitter();
			}
		} else {
			_page.bar.toggleBar(false);
		}
	} else {
		_slot.style.display = (_facetItems && _facetItems.length > 0) ? "" : "none";
	}

};

exports.load = function(page, options, $criteria) {
	_$criteria = $criteria || {};
	_$facetSkin = (options.$facetSkin || "") + " s-search-facet";
	_page = page;
	var $skin = "s-search-bar";

	if (options.slot) {
		_slot = options.slot;
		_slot.style.display = "none";
	} else {
		var bar = new BarSplitter();
		bar.preferenceKey = "menuBar";
		bar.options = options;
		bar.options.$viewMode = "dock";
		bar.options.$skin = $skin;
		bar.barSlot = document.createElement("div");
		bar.barSlot.className = $skin + "-slot";
		_slot = bar.barBody = document.createElement("div");
		bar.barBody.className = $skin + "-body";
		_page.domItem.appendChild(bar.barSlot);
		bar.toggleBar(false);
		(_page.bar = bar).load(_page);
	}
};

exports.dispose = function() {
	_page && _page.bar && _page.bar.dispose();
	_filters = _facetItems = _map = _$criteria = _page = _slot = null;
};