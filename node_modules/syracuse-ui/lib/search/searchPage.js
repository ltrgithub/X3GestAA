"use strict";
var helpers = require("syracuse-core/lib/helpers");
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var MenuBar = require('syracuse-ui/lib/page/bar/menuBar').MenuBar;
var searchUtils = require('./searchUtils');

function SearchPage() {}

exports.SearchPage = helpers.defineClass(SearchPage, DesktopPage, {

	onMenuClick: function(menu) {
		switch (menu.$bind) {
			case "$searchStartingWith":
			case "$searchSimilar":
				this.searchMode = menu.$bind;
				this._sendOneSearchRequest(this.dataset, {});
				this._sendOneSearchRequest(this.dataset, {}, true);
				return false;
			default:
				return true;
		}
	},
	fetch: function(options) {
		this.dataset.$search = this.openerUrlSegments.params.q;
		if (!this.searchMode) {
			var searchModeTag = this.openerUrlSegments.params.qt || "startsWith";
			this.searchMode = searchModeTag == "fuzzy" ? "$searchSimilar" : "$searchStartingWith";
		}
		// no options. simple request
		if (!options || Object.keys(options).length == 0) {
			var options = {};
			this._sendAllSearchRequests(this.dataset, options);
		}

		// options
		else {
			// filtering /!\ on data result only
			if (options.jsonParams) {
				this._sendOneSearchRequest(this.dataset, options, true);
			}
			// pager step navigation (pagination)
			else {
				if (options.$location) {
					var isDataSource = options.$location.$url.indexOf("source=data") != -1 ? true : false;
					this._sendOneSearchRequest(this.dataset, options, isDataSource);
				}
				// others (simple pager navigation) (pagination)
				// get corresponding tab information, update content accordingly
				else {
					if (options.field && options.field.$item && options.field.$item.$bind) {
						options.jsonParams = this.jsonParams;
						var isDataSource = options.field.$item.$bind == "$queryData" ? true : false;
						this._sendOneSearchRequest(this.dataset, options, isDataSource);
					} else {
						// in order to handle navigation issues (prev/next) issue #2824
						if (this.openerUrlSegments.params.source) {
							options.params = {
								count: this.openerUrlSegments.params.count,
								startIndex: this.openerUrlSegments.params.startIndex
							};
						}
						this._sendAllSearchRequests(this.dataset, options);
					}
				}
			}
		}
	},
	_sendOneSearchRequest: function(dataset, options, isDataSource, selectTab) {
		var self = this;
		var $query = {
			$url: searchUtils.getSearchModeLinks()[this._getSearchMode()].$url + (isDataSource ? "&source=data" : "&source=functions")
		};
		self._updateSearchModeLabels(isDataSource);
		syra_site.urlMaker.formatMenuUrl(self, $query, dataset, function($url, isCanceled) {
			options.$location = options.$location || {
				$url: $url
			};
			if (!self.isMultiQuery) {
				options.$updateHitory = true;
			}

			syra_controller.sendRequest(self, options, function(data) {

				// apply search page data
				var searchPageData = {};
				searchPageData.query = data.query;
				self.applyChange({
					query: data.query,
					$searchFacets: isDataSource ? data.$searchFacets : self.dataset.$searchFacets // no search facet for 'functions' results
				});

				// apply vignette pages data (the tabs)
				var $bind = isDataSource ? "$queryData" : "$queryFunctions";
				data[$bind] = data.$resources;
				delete data.$resources;

				self._updateTabTitle(isDataSource, data.$totalResults);

				self._appendDescriptionData(data[isDataSource ? "$queryData" : "$queryFunctions"], isDataSource ? "$queryData" : "$queryFunctions");

				self._updateSearchVignette(self, isDataSource, data);

				self._displaySearchFacetsBar();
			});
		});
	},
	_updateSearchModeLabels: function(isDataSource) {
		var newData = {};

		// search modes links
		newData.$links = {};
		var linksToUpdate = ["$searchStartingWith", "$searchSimilar"];
		for (var ii = 0, jj = linksToUpdate.length; ii < jj; ii++) {
			var mode = linksToUpdate[ii];
			newData.$links[mode] = {
				$title: searchUtils.getSearchModeLinks()[mode].$title
			};
			newData.$links[mode].$isHidden = mode == this._getSearchMode();
		}

		newData.query = this.openerUrlSegments.params.q;

		// update page
		this.applyChange(newData);
	},
	_updateSearchVignette: function(page, isDataSource, data) {
		var key = isDataSource ? "Data" : "Functions";
		var resultPage = page.boundFields["$vignette" + key][0].vignette;
		resultPage.applyChange(data);
		/*var list = resultPage.boundFields["$query" + key][0];
         if (list && list.records) {
         for (var ii = 0, jj = list.records.length; ii < jj; ii++) {
         var record= list.records[ii];
         record.domItem.syraOnClickl
         }
         } */
	},
	_getSearchMode: function() {
		return this.searchMode = this.searchMode || "$searchStartingWith";
	},
	_displaySearchFacetsBar: function() {
		this.searchFacets = this.boundFields.$searchFacets && this.boundFields.$searchFacets[0];
		if (!this.menuBar.page.designer) {
			if (this.searchFacets && this.searchFacets.hasFacet) {
				if (this.menuBar.page.layoutSlot.style.display != "none") {
					this.menuBar.isSlotVisible = true;
					this.menuBar.toggleBar(true);
					this.menuBar.ensureState();
					this.ensurePageVisibility();
				}
			}
		}
	},
	_sendAllSearchRequests: function(dataset, options) {
		var self = this;
		self.isMultiQuery = true;
		// to handle navigation (prev/next) issues.
		var functionsSourceOptions = helpers.object.clone(options);
		var dataSourceOptions = helpers.object.clone(options);
		// remove params unecessary for appropriate source
		if (self.openerUrlSegments.params.source) {
			if (self.openerUrlSegments.params.source == 'data') {
				delete functionsSourceOptions.params;
			} else {
				delete dataSourceOptions.params;
			}
		}
		self._sendOneSearchRequest(dataset, functionsSourceOptions, false, self.openerUrlSegments.params.source);
		self._sendOneSearchRequest(dataset, dataSourceOptions, true, self.openerUrlSegments.params.source);
		self.isMultiQuery = false;
	},
	_appendDescriptionData: function($resources, toto) {
		for (var ii = 0, jj = $resources.length; ii < jj; ii++) {
			$resources[ii].$descriptionData = [];
			if ($resources[ii].$properties) {
				this._appendDescription($resources[ii].$properties, $resources[ii], $resources[ii], toto);
			}
		}
	},
	_appendDescription: function($properties, recordData, parentRecordData, toto) {
		var $binds = Object.keys($properties);
		for (var mm = 0, pp = $binds.length; mm < pp; mm++) {
			if (toto == "$queryData") {
				var tt = "";
			}
			if (parentRecordData.$descriptionData) {
				if (parentRecordData.$descriptionData.indexOf("RP-CHIEFACCOUNTA") >= 0) {
					var ii = 0;
				}
			}
			var property = $properties[$binds[mm]];
			if ((property.$isHighlight || property.$isSummary) && recordData[$binds[mm]]) {
				var title = document.createElement("span");
				title.className = 's-search-res-desc-title';
				title.textContent = property.$title + ": ";
				var value = document.createElement("span");
				value.className = 's-search-res-desc-data';
				var data = recordData[$binds[mm]];
				if (data) {
					if (!data.replace && data.join) {
						data = data.join();
					}
					if (data.replace) {
						value.innerHTML = syra_site.formatHTMLText(data.replace(/<em>/g, "<em class='s-search-res-data-em'>"), false);
					}
				}

				parentRecordData.$descriptionData.push(title.outerHTML + value.outerHTML);
			} else {
				if (property.$isHighlight == undefined) {
					this._appendDescription(property, recordData[$binds[mm]], parentRecordData);
				}
			}
		}
	},
	_updateTabTitle: function(isData, recordsNb) {
		if (recordsNb != undefined) {
			this.idMap[isData ? "searchDataTab" : "searchFunctionsTab"].setTitle((isData ? syra_local.searchDataTab : syra_local.searchFunctionsTab) + " (" + recordsNb + ")");
		}
	},
	updateFilterState: function(options) {
		var self = this;
		self.jsonParams = options.jsonParams;
	},
	drawBox: function() {
		DesktopPage.prototype.drawBox.call(this);

		var slot = document.createElement("div");
		slot.className = "s-search-option-slot";
		var label = document.createElement("label");
		label.className = "s-search-option-label";
		label.textContent = syra_local.searchOptionLabel;
		slot.appendChild(label);
		var value = document.createElement("div");
		value.className = "s-search-option-value";
		slot.appendChild(value);
		this.header.appendChild(slot);

		this.loadNewItem(value, {
			$isTitleHidden: true,
			$skin: "s-search-opt-change",
			$layout: {
				$layoutType: "row",
				$autoSize: true,
				$items: [{
					$bind: "$searchStartingWith",
					$category: "link",
					$isHidden: true
				}, {
					$bind: "$searchSimilar",
					$category: "link"
				}]
			}
		});
	},
	loadBox: function(initData) {
		this.isBookmarkEnabled = false;
		DesktopPage.prototype.loadBox.call(this, initData);
	},
	_ensureMenus: function() {
		DesktopPage.prototype._ensureMenus.call(this);
		this.menuBar.barSlot &&
			this.loadNewItem(this.menuBar.barSlot, {
				$category: "searchFacets",
				$prototype: {},
				$bind: "$searchFacets"
			});
	},
	dispose: function() {
		this.searchFacets = null;
		DesktopPage.prototype.dispose.call(this);
	}
});