"use strict";
var helpers = require("syracuse-core/lib/helpers");
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var _facetsBar = require('./facetsBar');

var _$searchLinks = {
	$startWith: {
		$url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}"
	},
	$similar: {
		$url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}&qt=fuzzy"
	}
};

function QueryBox() {}

helpers.defineClass(QueryBox, null, {
	init: function() {
		var self = this;
		var key = self.$bind.slice(1);
		self.slot = self.page.layoutContent.domItem.appendChild(document.createElement("div"));
		self.slot.className = "s-search-query s-search-" + key;
		self.header = document.createElement("header");
		self.header.className = "s-search-query-header";
		self.header.texContent = self.$title = syra_local["search_" + key];
		self.slot.appendChild(self.header);

		self.page.$prototype.$properties[self.$bind] = {
			$type: "application/x-array",
			$item: {
				$type: "application/json",
				$prototype: "{$baseUrl}/$prototypes('{$representation}.$search')",
				$url: "{$baseUrl}/{$pluralType}('{$key}')",
				$value: "{$key}",
				$title: "queryResult {$key}",
				$key: "{$uuid}",
				$description: "queryResult {$key}",
				$pluralType: "queryResults",
				$representation: "queryResult",
				$defaultOrder: "title",
				$properties: {}
			}
		};
		self.field = self.page.loadNewItem(self.slot, {
			$bind: self.$bind,
			$selectMode: "row",
			$isMenuRecordHidden: true,
			$alternateStyle: false,
			$noDataText: syra_local.search_no_res,
			$format: "cards",
			$skin: "s-search-res",
			$css: "s-search-res",
			$addMaximize: true,
			renderRecordContent: function(record) {
				self._addRecordText(record, "$searchItemTitle", "s-search-item-title");
				self.$bind == "$queryData" && self._addRecordText(record, "$resultTypeTitle", "s-search-item-type");
				var list = record.dataset.$descriptionData;
				for (var ii = 0, jj = list.length; ii < jj; ii++) {
					var div = document.createElement("div");
					div.className = "s-search-item-desc";
					div.innerHTML = list[ii];
					record.body.appendChild(div);
				}
			},
			$layout: {
				$items: []
			}
		});
	},
	_addDescription: function($properties, recordData, parentRecordData) {
		var $binds = Object.keys($properties);
		for (var mm = 0, pp = $binds.length; mm < pp; mm++) {
			var property = $properties[$binds[mm]];
			if ((property.$isHighlight || property.$isSummary) && recordData[$binds[mm]]) {
				var span = document.createElement("span");
				span.className = 's-search-res-desc-title';
				span.textContent = property.$title + ": ";
				var value = document.createElement("span");
				value.className = 's-search-res-desc-data';
				var data = recordData[$binds[mm]];
				if (data) {
					if (!data.replace && data.join) {
						data = data.join();
					}
					if (data.replace) {
						value.innerHTML = syra_site.dom.formatHTMLText(data.replace(/<em>/g, "<em class='s-search-res-data-em'>"), false);
					}
				}
				parentRecordData.$descriptionData.push(span.outerHTML + value.outerHTML);
			} else {
				if (property.$isHighlight == undefined) {
					this._addDescription(property, recordData[$binds[mm]], parentRecordData);
				}
			}
		}
	},
	_addRecordText: function(record, $bind, css) {
		var div = document.createElement("div");
		div.className = css;
		var text = syra_site.expressionMaker.parse(record, record.dataset[$bind], record.dataset);
		div.innerHTML = syra_site.dom.formatHTMLText(text.replace(/<em>/g, "<em class='" + css + "-em'>"));
		record.body.appendChild(div);
	},
	_setData: function(data) {
		this.page.applyChange({
			query: data.query,
			$searchFacets: this.isQueryData ? data.$searchFacets : this.page.dataset.$searchFacets // no search facet for 'functions' results
		});
		// apply vignette pages data (the tabs)
		var $records = data.$resources;
		delete data.$resources;
		if (data.$totalResults != undefined) {
			this.header.textContent = this.$title + " (" + data.$totalResults + ")";
		}
		for (var ii = 0, jj = $records.length; ii < jj; ii++) {
			var $record = $records[ii];
			$record.$descriptionData = [];
			$record.$properties && this._addDescription($record.$properties, $record, $record);
		}
		var queryData = {
			$properties: {}
		};
		queryData.$properties[this.$bind] = {
			$links: data.$links,
			$itemsPerPage: data.$itemsPerPage,
			$startIndex: data.$startIndex,
			$totalResults: data.$totalResults
		};
		queryData[this.$bind] = $records;
		this.page.applyChange(queryData);
		_facetsBar.checkVisibility();
	},
	callServer: function(dataset, options) {
		var self = this;
		self.page.applyChange({
			query: self.page.openerUrlSegments.params.q
		});
		syra_site.urlMaker.formatMenuUrl(self.page, {
			$url: _$searchLinks[self.page._modeBtn.syraMode].$url + (self.isQueryData ? "&source=data" : "&source=functions")
		}, dataset, function($url, isCanceled) {
			options.$location = options.$location || {
				$url: $url
			};
			if (!self.page.isMultiQuery) {
				options.$updateHitory = true;
			}
			syra_controller.callServer(self.page, options, function(data) {
				self._setData(data);
			});
		});
	}
});

function SearchPage() {}

exports.SearchPage = helpers.defineClass(SearchPage, DesktopPage, {
	loadBox: function() {
		var self = this;
		self.$prototype = {
			$baseType: "application/json;vnd.sage=syracuse",
			$url: "{$baseUrl}/queryResults",
			$type: "application/json",
			$descriptor: "prototype queryResult.$search",
			$properties: {
				query: {
					$type: "application/x-string"
				}
			}
		};
		self.isMenuBarDisabled = true;
		self.isBookmarkEnabled = false;
		_$searchLinks.$startWith.$title = syra_local.searchSimilar;
		_$searchLinks.$similar.$title = syra_local.searchStartingWith;
		DesktopPage.prototype.loadBox.call(self);
		_facetsBar.load(self, {
			resizeDirection: "right"
		});
		var slot = document.createElement("div");
		slot.className = "s-search-options";
		slot.textContent = syra_local.searchOptionLabel;
		self._modeBtn = syra_menus.addTextButton(syra_local.searchSimilar, "s-search-mode", "onModeClick");
		self._modeBtn.syraMode = "$startWith";
		self._modeBtn.syraItem = self.id;
		slot.appendChild(self._modeBtn);
		self.header.appendChild(slot);

		["$queryFunctions", "$queryData"].forEach(function($bind) {
			var query = self[$bind] = new QueryBox();
			query.$bind = $bind;
			query.isQueryData = $bind == "$queryData";
			query.page = self;
			query.init();
		});
		self.fetch({
			isPageLoading: true
		});
	},
	onSelectRecord: function(records, record, isSelected) {
		if (record && isSelected && record.dataset.$url) {
			syra_controller.executeMenu({
				$url: record.dataset.$url
			}, record);
		}
	},
	onModeClick: function() {
		this._modeBtn.syraMode = this._modeBtn.syraMode == "$startWith" ? "$similar" : "$startWith";
		syra_menus.setButtonTitle(this._modeBtn, _$searchLinks[this._modeBtn.syraMode].$title);
		this.$queryFunctions.callServer(this.dataset, {});
		this.$queryData.callServer(this.dataset, {});
	},
	ensureDefaultArticle: function() {
		return {
			$title: syra_local.searchPageTitle,
			$layout: {
				$items: []
			}
		};
	},
	onFieldInputEvent: function(event) {
		_facetsBar.onFieldInputEvent(event);
	},
	onItemInOut: function(onEnter, event, target) {
		_facetsBar.onItemInOut(onEnter, event, target);
	},
	applyChange: function(newData) {
		DesktopPage.prototype.applyChange.call(this, newData);
		newData && newData.$searchFacets && _facetsBar.fill(this.dataset.$searchFacets);
	},
	_sendAllRequests: function(dataset, options) {
		this.isMultiQuery = true;
		// to handle navigation (prev/next) issues.
		var functionsOptions = helpers.object.clone(options);
		var dataOptions = helpers.object.clone(options);
		// remove params unecessary for appropriate source
		if (this.openerUrlSegments.params.source) {
			if (this.openerUrlSegments.params.source == 'data') {
				delete functionsOptions.params;
			} else {
				delete dataOptions.params;
			}
		}
		this.$queryFunctions.callServer(dataset, functionsOptions);
		this.$queryData.callServer(dataset, dataOptions);
		this.isMultiQuery = false;
	},
	fetch: function(options) {
		this.dataset.$search = this.openerUrlSegments.params.q;
		if (!options || Object.keys(options).length == 0) {
			this._sendAllRequests(this.dataset, {});
		} else {
			// filtering /!\ on data result only
			if (options.jsonParams) {
				this.$queryData.callServer(this.dataset, options);
			}
			// pager step navigation (pagination)
			else {
				if (options.$location) {
					var $bind = options.$location.$url.indexOf("source=data") >= 0 ? "$queryData" : "$queryFunctions";
					this[$bind].callServer(this.dataset, options);
				}
				// others (simple pager navigation) (pagination)
				// get corresponding tab information, update content accordingly
				else {
					if (options.field && options.field.$item && options.field.$item.$bind) {
						options.jsonParams = this.jsonParams;
						this[options.field.$item.$bind].callServer(this.dataset, options);
					} else {
						// in order to handle navigation issues (prev/next) issue #2824
						if (this.openerUrlSegments.params.source) {
							options.params = {
								count: this.openerUrlSegments.params.count,
								startIndex: this.openerUrlSegments.params.startIndex
							};
						}
						this._sendAllRequests(this.dataset, options);
					}
				}
			}
		}
	},
	onFacetFilterChange: function(options) {
		this.jsonParams = options.jsonParams;
		this.fetch(options);
	},
	dispose: function() {
		syra_site.disposeObject(this.$queryFunctions);
		syra_site.disposeObject(this.$queryData);
		_facetsBar.dispose();
		DesktopPage.prototype.dispose.call(this);
	}
});