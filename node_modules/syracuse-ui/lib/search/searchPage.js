"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var _facetsBar = require('./facetsBar');

function _setRecordDescription($properties, dataset, parentData) {
	var $binds = Object.keys($properties);
	for (var ii = 0, pp = $binds.length; ii < pp; ii++) {
		var $bind = $binds[ii];
		var $prop = $properties[$bind];
		if (($prop.$isHighlight || $prop.$isSummary) && dataset[$bind]) {
			var span = document.createElement("span");
			span.className = 's-search-item-desc-title';
			span.textContent = $prop.$title + ": ";
			var value = document.createElement("span");
			value.className = 's-search-item-desc-data';
			var data = dataset[$bind];
			if (data) {
				if (!data.replace && data.join) {
					data = data.join();
				}
				if (data.replace) {
					value.innerHTML = syra_site.dom.formatHTMLText(data.replace(/<em>/g, "<em class='s-search-item-desc-em'>"), false);
				}
			}
			parentData.$descriptionData.push(span.outerHTML + value.outerHTML);
		} else {
			if ($prop.$isHighlight == undefined) {
				_setRecordDescription($prop, dataset[$bind], parentData);
			}
		}
	}
}

function SearchBox() {
	this.load = function(slot) {
		var self = this;
		self.slot = slot.appendChild(document.createElement("div"));
		self.slot.className = "s-search-box s-search-" + self.$source;

		self.header = document.createElement("header");
		self.header.className = "s-search-box-header";
		self.header.texContent = self.$title = syra_local["search_" + self.$source];
		self.slot.appendChild(self.header);

		self.page.$prototype.$properties[self.$bind] = {
			$type: "application/x-array",
			$item: {
				$type: "application/json",
				$properties: {}
			}
		};

		self.field = self.page.loadNewItem(self.slot, {
			$bind: self.$bind,
			$selectMode: "row",
			$isMenuRecordHidden: true,
			$alternateStyle: false,
			$noDataText: syra_local.search_no_res,
			$format: "cards",
			$skin: "s-search-box-item",
			$addMaximize: true,
			renderRecordContent: function(record) {
				record.body.appendChild(self.page.searchField.drawRecordText("s-search-item-title", record.dataset.$searchItemTitle, record.dataset));
				if (self.$source == "data") {
					record.body.appendChild(self.page.searchField.drawRecordText("s-search-item-type", record.dataset.$resultTypeTitle, record.dataset));
				}
				var list = record.dataset.$descriptionData;
				for (var ii = 0, jj = list.length; ii < jj; ii++) {
					var div = document.createElement("div");
					div.className = "s-search-item-desc";
					div.innerHTML = list[ii];
					record.body.appendChild(div);
				}
			},
			$layout: {
				$items: []
			}
		});

		self.field.resizeArticle = function() {
			if (!this.disposed) {
				var maxH = this.page.body.syraMinHeight;
				var rectTable = this.builder.tableSlot.getBoundingClientRect();
				var maxH;
				if (this.isMaximized) {
					var scrollRect = this.page.scrollview.getBoundingClientRect();
					maxH = scrollRect.height - (rectTable.top - scrollRect.top) - 2;
				} else {
					var rect = this.layoutSlot.getBoundingClientRect();
					var rectBody = this.page.body.getBoundingClientRect();
					var diffH = (rect.top - rectBody.top) * 2;
					maxH = maxH - (diffH + (rectTable.top - rect.top)) - 2;
				}
				this.builder.tableSlot.style.maxHeight = maxH + "px";
			}
		};
	};

	this.fetch = function(options, preloadedData) {
		var self = this;
		self.page.setTitle(syra_local.searchPageTitle.replace("{searchCriteria}", self.page.searchCriteria));
		if (preloadedData) {
			self.fill(preloadedData);
		} else {
			options = options || {};
			options.params = options.params || {};
			options.params.count = self.field.pagging.getItemsPerPage();
			self.page.searchField.callServer({
				$source: self.$source,
				options: options,
				value: self.page.searchCriteria,
				filler: function(data) {
					!self.disposed && self.fill(data);
				}
			});
		}

	};
	this.fill = function(dataset) {
		this.page.startChange();
		var $records = dataset.$resources;
		if (dataset.$totalResults != undefined) {
			this.header.textContent = this.$title + " (" + dataset.$totalResults + ")";
		}
		for (var ii = 0, jj = $records.length; ii < jj; ii++) {
			var $record = $records[ii];
			$record.$descriptionData = [];
			$record.$properties && _setRecordDescription($record.$properties, $record, $record);
		}
		var listData = {
			$properties: {}
		};
		listData.$properties[this.$bind] = {
			$links: dataset.$links,
			$itemsPerPage: dataset.$itemsPerPage,
			$startIndex: dataset.$startIndex,
			$totalResults: dataset.$totalResults
		};
		listData[this.$bind] = $records;
		this.page.applyChange(listData);
		if (dataset.$searchFacets && this.$source == "data") {
			_facetsBar.fill(dataset.$searchFacets);
		}
		this.page.endChange();
	};
}

function SearchPage() {}

exports.SearchPage = helpers.defineClass(SearchPage, DesktopPage, {
	loadBox: function() {
		var self = this;
		self.searchField = syra_site.searcher;
		self.$prototype = {
			$properties: {}
		};
		self.isMenuBarDisabled = true;
		self.isBookmarkEnabled = false;
		DesktopPage.prototype.loadBox.call(self);

		self.searchField.setDataValue(self.searchCriteria = self.openerUrlSegments.params.q);
		self.searchField.isFuzzyMode = self.openerUrlSegments.params.qt == "fuzzy";

		_facetsBar.load(self, {
			resizeDirection: "right"
		});
		var slot = document.createElement("div");
		slot.className = "s-search-options";
		slot.textContent = syra_local.searchOptionLabel;
		self._modeBtn = syra_menus.addTextButton(self.searchField.isFuzzyMode ? syra_local.searchStartingWith : syra_local.searchSimilar, "s-search-mode", "onModeClick");
		self._modeBtn.syraItem = self.id;
		slot.appendChild(self._modeBtn);
		self.header.appendChild(slot);

		["functions", "data"].forEach(function($source) {
			var box = new SearchBox();
			box.$bind = (box.$source = $source) + "Box";
			(box.page = self)[box.$bind] = box;
			box.load(self.layoutContent.domItem);
		});

		self.fetch();
	},
	onSelectRecord: function(records, record, isSelected) {
		isSelected && record && this.searchField.executeRecord(record.dataset);
	},
	onModeClick: function() {
		this.searchField.isFuzzyMode = !this.searchField.isFuzzyMode;
		syra_menus.setButtonTitle(this._modeBtn, this.searchField.isFuzzyMode ? syra_local.searchStartingWith : syra_local.searchSimilar);
		syra_site.history.update(this, this.searchField.getUrl(this.searchCriteria));
		this.functionsBox.fetch();
		this.dataBox.fetch();
	},
	ensureDefaultArticle: function() {
		return {
			$title: syra_local.searchPageTitle,
			$layout: {
				$items: []
			}
		};
	},
	onFieldInputEvent: function(event) {
		_facetsBar.onFieldInputEvent(event);
	},
	onItemInOut: function(onEnter, event, target) {
		_facetsBar.onItemInOut(onEnter, event, target);
	},
	ensureArticleVisibility: function(resizeIfNeed, boxParent) {
		_facetsBar.checkVisibility();
		DesktopPage.prototype.ensureArticleVisibility.call(this, resizeIfNeed, boxParent);
	},
	fetch: function(options) {
		options = options || {};
		if (options.$location) {
			var $bind = options.$location.$url.indexOf("source=data") >= 0 ? "dataBox" : "functionsBox";
			this[$bind].fetch(options);
		}
		// others (simple pager navigation) (pagination)
		// get corresponding tab information, update content accordingly
		else {
			if (options.field && options.field.$item && options.field.$item.$bind) {
				options.jsonParams = this.jsonParams;
				this[options.field.$item.$bind].fetch(options);
			} else {
				// in order to handle navigation issues (prev/next) issue #2824
				if (this.openerUrlSegments.params.source) {
					options.params = {
						count: this.openerUrlSegments.params.count,
						startIndex: this.openerUrlSegments.params.startIndex
					};
				}
				// to handle navigation (prev/next) issues.
				var functionsOptions = helpers.object.clone(options);
				var dataOptions = helpers.object.clone(options);
				// remove params unecessary for appropriate source
				if (this.openerUrlSegments.params.source) {
					if (this.openerUrlSegments.params.source == 'data') {
						delete functionsOptions.params;
					} else {
						delete dataOptions.params;
					}
				}
				this.functionsBox.fetch(functionsOptions, syra_site.searcher.results.functions);
				this.dataBox.fetch(dataOptions, syra_site.searcher.results.data);
			}
		}

	},
	onFacetFilterChange: function(options) {
		this.jsonParams = options.jsonParams;
		this.dataBox.fetch(options);
	},
	dispose: function() {
		if (this.searchField) {
			delete this.searchField.isFuzzyMode;
		}
		syra_site.disposeObject(this.functionsBox);
		syra_site.disposeObject(this.dataBox);
		_facetsBar.dispose();
		DesktopPage.prototype.dispose.call(this);
	}
});