"use strict";
var helpers = require("syracuse-core/lib/helpers");
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var _facetsBar = require('./facetsBar');


var _$searchLinks = {
	$searchStartingWith: {
		$url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}"
	},
	$searchSimilar: {
		$url: "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}&qt=fuzzy"
	}
};

function _sendOneSearchRequest(page, dataset, options, isDataSource) {
	page.applyChange({
		$links: {
			$searchStartingWith: {
				$title: syra_local.searchStartingWith,
				$isHidden: "$searchStartingWith" == page.searchMode
			},
			$searchSimilar: {
				$title: syra_local.searchSimilar,
				$isHidden: "$searchSimilar" == page.searchMode
			}
		},
		query: page.openerUrlSegments.params.q
	});

	syra_site.urlMaker.formatMenuUrl(page, {
		$url: _$searchLinks[page.searchMode].$url + (isDataSource ? "&source=data" : "&source=functions")
	}, dataset, function($url, isCanceled) {
		options.$location = options.$location || {
			$url: $url
		};
		if (!page.isMultiQuery) {
			options.$updateHitory = true;
		}

		syra_controller.sendRequest(page, options, function(data) {
			var queryCode = isDataSource ? "$queryData" : "$queryFunctions";
			page.applyChange({
				query: data.query,
				$searchFacets: isDataSource ? data.$searchFacets : page.dataset.$searchFacets // no search facet for 'functions' results
			});
			// apply vignette pages data (the tabs)
			data[queryCode] = data.$resources;
			delete data.$resources;

			if (data.$totalResults != undefined) {
				var key = isDataSource ? "searchDataTab" : "searchFunctionsTab";
				page.idMap[key].setTitle(syra_local[key] + " (" + data.$totalResults + ")");
			}


			var $resources = data[queryCode];
			for (var ii = 0, jj = $resources.length; ii < jj; ii++) {
				$resources[ii].$descriptionData = [];
				if ($resources[ii].$properties) {
					_appendDescription($resources[ii].$properties, $resources[ii], $resources[ii], queryCode);
				}
			}

			var key = isDataSource ? "Data" : "Functions";
			var resultPage = page.boundFields["$vignette" + key][0].vignette;
			resultPage.applyChange(data);

			_facetsBar.checkVisibility();
		});
	});
}

function _sendAllSearchRequests(page, dataset, options) {
	page.isMultiQuery = true;
	// to handle navigation (prev/next) issues.
	var functionsSourceOptions = helpers.object.clone(options);
	var dataSourceOptions = helpers.object.clone(options);
	// remove params unecessary for appropriate source
	if (page.openerUrlSegments.params.source) {
		if (page.openerUrlSegments.params.source == 'data') {
			delete functionsSourceOptions.params;
		} else {
			delete dataSourceOptions.params;
		}
	}
	_sendOneSearchRequest(page, dataset, functionsSourceOptions, false, page.openerUrlSegments.params.source);
	_sendOneSearchRequest(page, dataset, dataSourceOptions, true, page.openerUrlSegments.params.source);
	page.isMultiQuery = false;
}

function _appendDescription($properties, recordData, parentRecordData, queryCode) {
	var $binds = Object.keys($properties);
	for (var mm = 0, pp = $binds.length; mm < pp; mm++) {
		if (parentRecordData.$descriptionData) {
			if (parentRecordData.$descriptionData.indexOf("RP-CHIEFACCOUNTA") >= 0) {
				var ii = 0;
			}
		}
		var property = $properties[$binds[mm]];
		if ((property.$isHighlight || property.$isSummary) && recordData[$binds[mm]]) {
			var title = document.createElement("span");
			title.className = 's-search-res-desc-title';
			title.textContent = property.$title + ": ";
			var value = document.createElement("span");
			value.className = 's-search-res-desc-data';
			var data = recordData[$binds[mm]];
			if (data) {
				if (!data.replace && data.join) {
					data = data.join();
				}
				if (data.replace) {
					value.innerHTML = syra_site.dom.formatHTMLText(data.replace(/<em>/g, "<em class='s-search-res-data-em'>"), false);
				}
			}

			parentRecordData.$descriptionData.push(title.outerHTML + value.outerHTML);
		} else {
			if (property.$isHighlight == undefined) {
				_appendDescription(property, recordData[$binds[mm]], parentRecordData);
			}
		}
	}
}

function _addOptionsLinks(page) {
	var slot = document.createElement("div");
	slot.className = "s-search-options";
	slot.textContent = syra_local.searchOptionLabel;
	page.header.appendChild(slot);
	page.loadNewItem(slot, {
		$category: "link",
		$bind: "$searchStartingWith",
		$skin: "s-search-options-link",
		$isHidden: true
	});
	page.loadNewItem(slot, {
		$category: "link",
		$bind: "$searchSimilar",
		$skin: "s-search-options-link"

	});
}

function _getVignetteProto($bind) {
	var $queryProperties = {
		$descriptionData: {
			$type: "application/x-array",
			$item: {
				$type: "application/x-string",
				$format: "$html",
			}
		},
		$searchItemTitle: {
			$type: "application/x-string",
			$format: "$html",
			$capabilities: "sort,filter",
			$links: {
				"$details": {
					$type: "application/json;vnd.sage=syracuse",
					$url: "{$url}",
					$method: "{$method}"
				}
			}
		}
	};
	if ($bind == "$queryData") {
		$queryProperties.$resultTypeTitle = {
			$type: "application/x-string",
			$format: "$html",
			$capabilities: "sort,filter"
		};

	}
	var $prototype = {
		$properties: {
			$searchModeDescription: {
				$type: "application/x-string"
			}
		},
		$article: _getQueryArticle($bind)
	};
	$prototype.$properties[$bind] = {
		$type: "application/x-array",
		$item: {
			$type: "application/json",
			$prototype: "{$baseUrl}/$prototypes('{$representation}.$search')",
			$url: "{$baseUrl}/{$pluralType}('{$key}')",
			$value: "{$key}",
			$title: "queryResult {$key}",
			$key: "{$uuid}",
			$description: "queryResult {$key}",
			$pluralType: "queryResults",
			$representation: "queryResult",
			$defaultOrder: "title",
			$properties: $queryProperties
		}
	};
	return {
		$type: "application/x-vignette",
		$format: "$page",
		$prototype: $prototype
	};
}

function _getQueryArticle($bind) {
	var $items = [{
		$bind: "$searchItemTitle",
		$skin: "s-search-res",
		$isTitleHidden: true
	}];
	if ($bind == "$queryData") {
		$items.push({
			$bind: "$resultTypeTitle",
			$skin: "s-search-res-type",
			$isTitleHidden: true
		});
	}
	$items.push({
		$bind: "$descriptionData",
		"$noDataText": " ",
		$isTitleHidden: true,
		$skin: "s-search-res-desc",
		$inplaceSkin: "s-search-res-inplace"
	});
	return {
		$layout: {
			$layoutType: "stack",
			$items: [{
				$bind: $bind,
				$selectMode: "row",
				$executeUrl: true,
				$isMenuRecordHidden: true,
				$alternateStyle: false,
				$noDataText: syra_local.search_no_res,
				$format: "cards",
				$skin: "s-search-res",
				$css: "s-search-res",
				$layout: {
					$items: $items
				}
			}]
		}
	};
}

function SearchPage() {}

exports.SearchPage = helpers.defineClass(SearchPage, DesktopPage, {
	loadBox: function(initData) {
		this.isMenuBarDisabled = true;
		this.isBookmarkEnabled = false;
		this.searchMode = "$searchStartingWith";
		DesktopPage.prototype.loadBox.call(this, initData);
		_facetsBar.load(this, {
			resizeDirection: "right"
		});
		_addOptionsLinks(this);
	},
	ensureRepresentation: function() {
		return {
			$prototype: {
				$baseType: "application/json;vnd.sage=syracuse",
				$url: "{$baseUrl}/queryResults",
				$type: "application/json",
				$links: helpers.object.clone(_$searchLinks, true),
				$descriptor: "prototype queryResult.$search",
				$properties: {
					$vignetteFunctions: _getVignetteProto("$queryFunctions"),
					$vignetteData: _getVignetteProto("$queryData"),
					"query": {
						$type: "application/x-string"
					}
				}
			}
		};
	},
	ensureDefaultArticle: function($article) {
		return {
			$title: syra_local.searchPageTitle,
			$layout: {
				$layoutType: "row",
				$items: [{
					$category: "section",
					$title: syra_local.search_functions_tab,
					$clientId: "searchFunctionsTab",
					$layout: {
						$items: [{
							$bind: "$vignetteFunctions"
						}]
					}
				}, {
					$category: "section",
					$clientId: "searchDataTab",
					$title: syra_local.search_data_tab,
					$layout: {
						$items: [{
							$bind: "$vignetteData"
						}]
					}
				}]
			}
		};
	},
	onFieldInputEvent: function(event) {
		_facetsBar.onFieldInputEvent(event);
	},
	onItemInOut: function(onEnter, event, target) {
		_facetsBar.onItemInOut(onEnter, event, target);
	},
	applyChange: function(newData) {
		DesktopPage.prototype.applyChange.call(this, newData);
		newData && newData.$searchFacets && _facetsBar.fill(this.dataset.$searchFacets);
	},
	dispose: function() {
		_facetsBar.dispose();
		DesktopPage.prototype.dispose.call(this);
	},
	onMenuClick: function(menu) {
		switch (menu.$bind) {
			case "$searchStartingWith":
			case "$searchSimilar":
				this.searchMode = menu.$bind;
				_sendOneSearchRequest(this, this.dataset, {});
				_sendOneSearchRequest(this, this.dataset, {}, true);
				return false;
			default:
				return true;
		}
	},
	fetch: function(options) {
		this.dataset.$search = this.openerUrlSegments.params.q;
		if (!this.searchMode) {
			var searchModeTag = this.openerUrlSegments.params.qt || "startsWith";
			this.searchMode = searchModeTag == "fuzzy" ? "$searchSimilar" : "$searchStartingWith";
		}
		// no options. simple request
		if (!options || Object.keys(options).length == 0) {
			_sendAllSearchRequests(this, this.dataset, {});
		}
		// options
		else {
			// filtering /!\ on data result only
			if (options.jsonParams) {
				_sendOneSearchRequest(this, this.dataset, options, true);
			}
			// pager step navigation (pagination)
			else {
				if (options.$location) {
					var isDataSource = options.$location.$url.indexOf("source=data") != -1 ? true : false;
					_sendOneSearchRequest(this, this.dataset, options, isDataSource);
				}
				// others (simple pager navigation) (pagination)
				// get corresponding tab information, update content accordingly
				else {
					if (options.field && options.field.$item && options.field.$item.$bind) {
						options.jsonParams = this.jsonParams;
						var isDataSource = options.field.$item.$bind == "$queryData" ? true : false;
						_sendOneSearchRequest(this, this.dataset, options, isDataSource);
					} else {
						// in order to handle navigation issues (prev/next) issue #2824
						if (this.openerUrlSegments.params.source) {
							options.params = {
								count: this.openerUrlSegments.params.count,
								startIndex: this.openerUrlSegments.params.startIndex
							};
						}
						_sendAllSearchRequests(this, this.dataset, options);
					}
				}
			}
		}
	},
	setFilterQueryParam: function(options) {
		this.jsonParams = options.jsonParams;
	}
});