"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var Field = require('syracuse-ui/lib/field/field').Field;
var _facetsBar = require('./facetsBar');

var _searchUrl = "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search";
var _searchPage, _functionsData;

function _getUrl($seach, isFuzzyMode) {
	return _searchUrl + ("&q=" + $seach) + (isFuzzyMode ? "&qt=fuzzy" : "");
}

function _callServer(context) {
	context.options = context.options || {};
	var $url = _getUrl(context.value, _searchPage && _searchPage.isFuzzyMode) + "&source=" + context.$source;
	if (context.count) {
		$url += "&count=" + context.count;
	}
	syra_site.urlMaker.formatMenuUrl(context.page, {
		$url: $url
	}, {}, function($fullUrl, isCanceled) {
		context.options.$location = context.options.$location || {
			$url: $fullUrl
		};
		syra_controller.callServer(context.page, context.options, context.filler);
	});
}

function _setRecordDescription($properties, dataset, parentData) {
	var $binds = Object.keys($properties);
	for (var ii = 0, pp = $binds.length; ii < pp; ii++) {
		var $bind = $binds[ii];
		var $prop = $properties[$bind];
		if (($prop.$isHighlight || $prop.$isSummary) && dataset[$bind]) {
			var span = document.createElement("span");
			span.className = 's-search-item-desc-title';
			span.textContent = $prop.$title + ": ";
			var value = document.createElement("span");
			value.className = 's-search-item-desc-data';
			var data = dataset[$bind];
			if (data) {
				if (!data.replace && data.join) {
					data = data.join();
				}
				if (data.replace) {
					value.innerHTML = syra_site.dom.formatHTMLText(data.replace(/<em>/g, "<em class='s-search-item-desc-em'>"), false);
				}
			}
			parentData.$descriptionData.push(span.outerHTML + value.outerHTML);
		} else {
			if ($prop.$isHighlight == undefined) {
				_setRecordDescription($prop, dataset[$bind], parentData);
			}
		}
	}
}

function _addRecordText(article, css, data, dataset) {
	var div = document.createElement("div");
	div.className = css;
	var text = syra_site.expressionMaker.parse(article, data, dataset);
	div.innerHTML = syra_site.dom.formatHTMLText(text.replace(/<em>/g, "<em class='" + css + "-em'>"));
	return div;
}

function SuggestBox(field, $source, slot) {
	this.$bind = (this.$source = $source) + "Box";
	(this.field = field)[this.$bind] = this;
	this.isSuggest = true;
	this.$totalResults = 0;

	this.slot = slot.appendChild(document.createElement("div"));
	this.slot.className = "s-search-suggest-box";

	this.header = document.createElement("header");
	this.header.className = "s-search-suggest-box-header";
	this.header.texContent = this.$title = syra_local["search_" + $source];

	this.slot.appendChild(this.header);

	this.body = document.createElement("div");
	this.body.className = "s-search-suggest-box-body";
	this.slot.appendChild(this.body);

	this.setEmptyMessage = function(text) {
		var div = document.createElement("div");
		div.className = "s-search-suggest-box-empty";
		div.textContent = text;
		this.body.appendChild(div);
	};
	this.fetch = function(value) {
		var self = this;
		syra_site.dom.empty(self.body);
		self.rows = [];
		self.setEmptyMessage(syra_local.flWaitingData);
		_callServer({
			page: self.field.page,
			$source: self.$source,
			value: value,
			count: 5,
			filler: function(data) {
				!self.disposed && self.fill(data);
			}
		});
	};
	this.fill = function(data) {
		syra_site.dom.empty(this.body);
		this.rows = [];
		this.$records = data.$resources || [];
		if (data.$totalResults != undefined) {
			this.$totalResults = data.$totalResults;
		}
		if (this.$totalResults) {
			this.header.textContent = this.$title + " (" + this.$totalResults + ")";
			var isData = this.$source == "data";
			for (var ii = 0, jj = this.$records.length; ii < jj; ii++) {
				var $record = this.$records[ii];
				var row = document.createElement("a");
				this.rows.push(row);
				row.setAttribute("href", "#"); //need to improve cancel action otherwiese add # to url
				row.syraOnClick = "onSuggestClick";
				row.syraIndex = ii;
				row.syraBox = this.$bind;
				row.syraItem = row.syrainout = this.field.id;
				row.className = "s-search-suggest-box-item";
				row.appendChild(_addRecordText(this.field.page, "s-search-suggest-box-item-title", $record.$searchItemTitle, $record));
				isData && row.appendChild(_addRecordText(this.field.page, "s-search-suggest-box-item-type", $record.$resultTypeTitle, $record));
				this.body.appendChild(row);
			}
		} else {
			this.header.textContent = this.$title;
			this.setEmptyMessage(syra_local.search_no_res);
		}
		var count = (this.field.functionsBox.$totalResults + this.field.dataBox.$totalResults);
		this.field.suggestMore.style.display = count ? "" : "none";
		syra_menus.updateButtonIcon(this.field.suggestMore, count > 5 ? syra_local.searchAdvanceResults : syra_local.searchAdvanceDetails);
	};
}

function SearchField() {}

helpers.defineClass(SearchField, Field, {
	gotoField: function(page) {
		if (page.isFusionPage) {
			syra_menus.click.menuId(page, "1186");
		} else {
			this.focus();
		}
	},
	loadBox: function() {
		this.results = {};
		Field.prototype.loadBox.call(this);
		this.clearBtn = syra_menus.addIconButton(syra_local.siteSearchClear, "s-search-clear-btn", "onClearClick");
		this.clearBtn.style.display = "none";
		this._dataValue.appendChild(this.clearBtn);

		var btn = syra_menus.addIconButton(syra_local.siteSearchLink, "s-search-run-btn", "onRunClick", null, "lookup");
		this._dataValue.appendChild(btn);
		this.clearBtn.syraItem = btn.syraItem = this.id;
	},
	onInputChange: function() {},
	showPicker: function(onOut) {
		var show = this.getDataValue() != "";
		if (show) {
			this.clearBtn.style.opacity = onOut ? 0.4 : 1;
		}
		this.clearBtn.style.display = show ? "" : "none";
	},
	onKeyUp: function() {
		this.showPicker();
	},
	onInputFocusin: function() {
		this.showPicker();
	},
	onInputFocusout: function() {
		this.showPicker(true);
	},
	onRunClick: function() {
		var value = this.getDataValue();
		if (value !== "") {
			this.setDatasetValue(value);
			this._runSearch(_getUrl(value));
		}
	},
	onSuggestClick: function(event, target) {
		var box = target && this[target.syraBox];
		var $record = box && box.$records[target.syraIndex];
		this._runSearch($record.$url, $record);
	},
	_runSearch: function($url, $record) {
		clearTimeout(this._searchTimer);
		syra_controller.executeMenu({
			$url: syra_site.expressionMaker.parse(this.page, $url, $record)
		}, this.page);
		this.closeSuggest();
	},
	onClearClick: function() {
		this.setDataValue("");
		this.showPicker(false);
		this.closeSuggest();
		this.onInputValidate(); //trigger notification change
	},
	closeSuggest: function() {
		this.suggestPopup && this.suggestPopup.close();
	},
	openSuggest: function() {
		var self = this;
		var value = self.getDataValue();
		if (value !== "") {
			self.page.dataset.$search = value;
			if (self.searchValue !== value) {
				self.focus();
				self.searchValue = value;
				if (!self.suggestPopup) {
					var slot = document.createElement("div");
					slot.className = "s-search-suggest-slot";

					new SuggestBox(self, "functions", slot);
					new SuggestBox(self, "data", slot);

					self.suggestMore = syra_menus.addTextButton(syra_local.searchAdvanceDetails, "search-suggest-more", "onRunClick", null, "left_arrow");
					slot.appendChild(self.suggestMore);
					self.suggestMore.syraItem = self.suggestMore.syrainout = self.id;
					syra_site.layoutSlot.appendChild(slot);

					self.suggestPopup = syra_site.dialogManager.openPopup(self.boxParent, {
						content: self,
						picker: self.layoutSlot,
						slot: slot,
						position: {
							my: "right top",
							at: "right bottom",
							of: $(self.domItem)
						},
						onClose: function() {
							self.searchValue = null;
							syra_site.dom.empty(slot);
							syra_site.disposeObject(self.functionsBox);
							syra_site.disposeObject(self.dataBox);
							slot = self.functionsBox = self.dataBox = self.suggestMore = self.suggestPopup = self.suggestSelected = null;
						}
					});
				}
				self.functionsBox.fetch(value);
				self.dataBox.fetch(value);
			}
		} else {
			self.closeSuggest();
		}
	},
	onItemInOut: function(on, event, target) {
		Field.prototype.onItemInOut.call(this, on, event, target);
		if (this.suggestSelected) {
			syra_site.dom.toggleClass(this.suggestSelected, "s-enter", false);
			this.suggestSelected = null;
		}
		syra_site.dom.toggleClass(target, "s-enter", on);
	},
	applyShortCut: function(shortcuts) {
		var self = this;
		if (!shortcuts.enter) {
			clearTimeout(self._searchTimer);
			self._searchTimer = setTimeout(function() {
				self.openSuggest();
			}, 1000);
			if (self.suggestPopup && (shortcuts.up || shortcuts.down)) {
				var rows = self.functionsBox.rows.concat(self.dataBox.rows).concat(self.suggestMore);
				if (rows.length > 1) {
					var next = 0;
					if (self.suggestSelected) {
						next = rows.indexOf(self.suggestSelected);
						if (next >= 0) {
							next += (shortcuts.down ? 1 : (-1));
						}
						syra_site.dom.toggleClass(self.suggestSelected, "s-enter", false);
						delete self.suggestSelected;
					}
					if (shortcuts.down) {
						self.suggestSelected = rows[(next >= rows.length) ? 0 : next];
					} else {
						self.suggestSelected = rows[(next < 0) ? (rows.length - 1) : next];
					}
					syra_site.dom.toggleClass(self.suggestSelected, "s-enter", true);
				}
			}
		} else {
			clearTimeout(self._searchTimer);
			self.closeSuggest();
			var value = self.getDataValue();
			if (self.suggestPopup) {
				if (self.suggestSelected && self.suggestSelected.parentNode) {
					self.suggestSelected.click();
					return true;
				}
			}
			self.results = {};
			["functions", "data"].forEach(function($source) {
				_callServer({
					page: self.page,
					$source: $source,
					value: value,
					filler: function(data) {
						if (!self.disposed) {
							self.results[$source] = data;
							if (self.results.functions &&
								self.results.data) {
								var $records = self.results.functions.$resources;
								if ($records && $records.length == 1) {
									var $record = $records[0];
									var run = shortcuts.ctrl;
									if (!run) {
										var code = $record.fusionFunction && $record.fusionFunction.replace("<em>", "").replace("</em>", "");
										run = (code && code.toUpperCase() == value.toUpperCase());
									}
									if (run) {
										self._runSearch($record.$url, $record);
										return;
									}
								}
								self.onRunClick();
							}
						}
					}
				});
			});
		}
		return true;
	},
	search: function($source, value) {
		_callServer({
			page: syra_site,
			$source: $source,
			value: value,
			filler: function(data) {
				if (!self.disposed) {
					self.searchRecords[$source] = data && data.$resources;
				}
			}
		});
	},
	dispose: function() {
		this.closeSuggest();
		Field.prototype.dispose.call(this);
	}

});

exports.load = function(slot) {
	syra_site.$prototype.$properties.$search = {
		$type: "application/x-string",
		$title: syra_local.searchFieldTitle
	};
	return syra_site.loadNewItem(slot.appendChild(document.createElement("div")), {
		$bind: "$search",
		$isEditMode: true,
		$class: SearchField,
		$skin: "s-search-field",
		$inplace: true,
		$isTitlePlaceHolder: true
	});
};

function SearchBox(page, $source, slot) {
	this.$bind = (this.$source = $source) + "Box";
	(this.page = page)[this.$bind] = this;

	this.slot = slot.appendChild(document.createElement("div"));
	this.slot.className = "s-search-box s-search-" + $source;

	this.header = document.createElement("header");
	this.header.className = "s-search-box-header";
	this.header.texContent = this.$title = syra_local["search_" + $source];
	this.slot.appendChild(this.header);

	page.$prototype.$properties[this.$bind] = {
		$type: "application/x-array",
		$item: {
			$type: "application/json",
			$properties: {}
		}
	};

	this.field = page.loadNewItem(this.slot, {
		$bind: this.$bind,
		$selectMode: "row",
		$isMenuRecordHidden: true,
		$alternateStyle: false,
		$noDataText: syra_local.search_no_res,
		$format: "cards",
		$skin: "s-search-box-item",
		$addMaximize: true,
		renderRecordContent: function(record) {
			record.body.appendChild(_addRecordText(record, "s-search-item-title", record.dataset.$searchItemTitle, record.dataset));
			if ($source == "data") {
				record.body.appendChild(_addRecordText(record, "s-search-item-type", record.dataset.$resultTypeTitle, record.dataset));
			}
			var list = record.dataset.$descriptionData;
			for (var ii = 0, jj = list.length; ii < jj; ii++) {
				var div = document.createElement("div");
				div.className = "s-search-item-desc";
				div.innerHTML = list[ii];
				record.body.appendChild(div);
			}
		},
		$layout: {
			$items: []
		}
	});

	this.field.resizeArticle = function() {
		if (!this.disposed) {
			var maxH = this.page.body.syraMinHeight;
			var rectTable = this.builder.tableSlot.getBoundingClientRect();
			var maxH;
			if (this.isMaximized) {
				var scrollRect = this.page.scrollview.getBoundingClientRect();
				maxH = scrollRect.height - (rectTable.top - scrollRect.top) - 2;
			} else {
				var rect = this.layoutSlot.getBoundingClientRect();
				var rectBody = this.page.body.getBoundingClientRect();
				var diffH = (rect.top - rectBody.top) * 2;
				maxH = maxH - (diffH + (rectTable.top - rect.top)) - 2;
			}
			this.builder.tableSlot.style.maxHeight = maxH + "px";
		}
	};
	this.fetch = function(options, preloadedData) {
		var self = this;
		if (preloadedData) {
			self.fill(preloadedData);
		} else {
			_callServer({
				page: self.page,
				$source: self.$source,
				options: options,
				value: self.page.dataset.$search,
				filler: function(data) {
					!self.disposed && self.fill(data);
				}
			});
		}

	};
	this.fill = function(dataset) {
		this.page.startChange();
		var $records = dataset.$resources;
		if (dataset.$totalResults != undefined) {
			this.header.textContent = this.$title + " (" + dataset.$totalResults + ")";
		}
		for (var ii = 0, jj = $records.length; ii < jj; ii++) {
			var $record = $records[ii];
			$record.$descriptionData = [];
			$record.$properties && _setRecordDescription($record.$properties, $record, $record);
		}
		var listData = {
			searchCriteria: dataset.query,
			$searchFacets: (this.$source == "data") ? dataset.$searchFacets : page.dataset.$searchFacets, // no search facet for 'functions' results
			$properties: {}
		};
		listData.$properties[this.$bind] = {
			$links: dataset.$links,
			$itemsPerPage: dataset.$itemsPerPage,
			$startIndex: dataset.$startIndex,
			$totalResults: dataset.$totalResults
		};
		listData[this.$bind] = $records;
		this.page.applyChange(listData);
		_facetsBar.checkVisibility();
		this.page.endChange();
	};
}

function SearchPage() {}

exports.SearchPage = helpers.defineClass(SearchPage, DesktopPage, {
	loadBox: function() {
		_searchPage = this;
		this.$prototype = {
			$properties: {
				searchCriteria: {
					$type: "application/x-string"
				}
			}
		};
		this.isMenuBarDisabled = true;
		this.isBookmarkEnabled = false;
		DesktopPage.prototype.loadBox.call(this);

		this.dataset.$search = this.openerUrlSegments.params.q;
		this.isFuzzyMode = this.openerUrlSegments.params.qt == "fuzzy";

		_facetsBar.load(this, {
			resizeDirection: "right"
		});
		var slot = document.createElement("div");
		slot.className = "s-search-options";
		slot.textContent = syra_local.searchOptionLabel;
		this._modeBtn = syra_menus.addTextButton(this.isFuzzyMode ? syra_local.searchStartingWith : syra_local.searchSimilar, "s-search-mode", "onModeClick");
		this._modeBtn.syraItem = this.id;
		slot.appendChild(this._modeBtn);
		this.header.appendChild(slot);

		new SearchBox(this, "functions", this.layoutContent.domItem);
		new SearchBox(this, "data", this.layoutContent.domItem);


		this.fetch();
	},
	onSelectRecord: function(records, record, isSelected) {
		if (record && isSelected && record.dataset.$url) {
			syra_controller.executeMenu({
				$url: syra_site.expressionMaker.parse(this, record.dataset.$url, record.dataset)
			}, record);
		}
	},
	onModeClick: function() {
		this.isFuzzyMode = !this.isFuzzyMode;
		syra_menus.setButtonTitle(this._modeBtn, this.isFuzzyMode ? syra_local.searchStartingWith : syra_local.searchSimilar);
		syra_site.history.update(this, _getUrl(this.dataset.$search, this.isFuzzyMode));
		this.functionsBox.fetch();
		this.dataBox.fetch();
	},
	ensureDefaultArticle: function() {
		return {
			$title: syra_local.searchPageTitle,
			$layout: {
				$items: []
			}
		};
	},
	onFieldInputEvent: function(event) {
		_facetsBar.onFieldInputEvent(event);
	},
	onItemInOut: function(onEnter, event, target) {
		_facetsBar.onItemInOut(onEnter, event, target);
	},
	applyChange: function(newData) {
		DesktopPage.prototype.applyChange.call(this, newData);
		newData && newData.$searchFacets && _facetsBar.fill(this.dataset.$searchFacets);
	},
	fetch: function(options) {
		options = options || {};
		if (options.$location) {
			var $bind = options.$location.$url.indexOf("source=data") >= 0 ? "dataBox" : "functionsBox";
			this[$bind].fetch(options);
		}
		// others (simple pager navigation) (pagination)
		// get corresponding tab information, update content accordingly
		else {
			if (options.field && options.field.$item && options.field.$item.$bind) {
				options.jsonParams = this.jsonParams;
				this[options.field.$item.$bind].fetch(options);
			} else {
				// in order to handle navigation issues (prev/next) issue #2824
				if (this.openerUrlSegments.params.source) {
					options.params = {
						count: this.openerUrlSegments.params.count,
						startIndex: this.openerUrlSegments.params.startIndex
					};
				}
				// to handle navigation (prev/next) issues.
				var functionsOptions = helpers.object.clone(options);
				var dataOptions = helpers.object.clone(options);
				// remove params unecessary for appropriate source
				if (this.openerUrlSegments.params.source) {
					if (this.openerUrlSegments.params.source == 'data') {
						delete functionsOptions.params;
					} else {
						delete dataOptions.params;
					}
				}
				this.functionsBox.fetch(functionsOptions, syra_site.searcher.results.functions);
				this.dataBox.fetch(dataOptions, syra_site.searcher.results.data);
				_functionsData = null;
			}
		}

	},
	onFacetFilterChange: function(options) {
		this.jsonParams = options.jsonParams;
		this.dataBox.fetch(options);
	},
	dispose: function() {
		_searchPage = null;
		syra_site.disposeObject(this.functionsBox);
		syra_site.disposeObject(this.dataBox);
		_facetsBar.dispose();
		DesktopPage.prototype.dispose.call(this);
	}
});