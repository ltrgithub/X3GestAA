"use strict";
var helpers = require('syracuse-core').helpers;
var Field = require('syracuse-ui/lib/field/field').Field;

var _searchUrl = "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search";

function SuggestBox(field, $source, slot) {
	this.$source = $source;
	this.field = field;
	this.isSuggest = true;
	this.$totalResults = 0;

	this.slot = slot.appendChild(document.createElement("div"));
	this.slot.className = "s-search-suggest-box";

	this.header = document.createElement("header");
	this.header.className = "s-search-suggest-box-header";
	this.header.texContent = this.$title = syra_local["search_" + $source];

	this.slot.appendChild(this.header);

	this.body = document.createElement("div");
	this.body.className = "s-search-suggest-box-body";
	this.slot.appendChild(this.body);

	this.fetch = function(value) {
		var self = this;
		syra_dom.empty(self.body);
		self.rows = [];
		self._setEmptyMessage(syra_local.flWaitingData);
		self.field.fetchSearch({
			$source: self.$source,
			value: value,
			count: 5,
			options: {
				success: function(data) {
					!self.disposed && self.fill(data);
				}
			}
		});
	};

	this.fill = function(data) {
		syra_dom.empty(this.body);
		this.rows = [];
		this.$records = data.$resources || [];
		if (data.$totalResults != undefined) {
			this.$totalResults = data.$totalResults;
		}
		if (this.$totalResults) {
			this.header.textContent = this.$title + " (" + this.$totalResults + ")";
			var isData = this.$source == "data";
			for (var ii = 0, jj = this.$records.length; ii < jj; ii++) {
				var $record = this.$records[ii];
				var row = document.createElement("a");
				this.rows.push(row);
				row.setAttribute("href", "#"); //need to improve cancel action otherwiese add # to url
				row.syraOnClick = "onSuggestClick";
				row.syraIndex = ii;
				row.syraBox = this.$source;
				row.syraItem = row.syrainout = this.field.id;
				row.className = "s-search-suggest-box-item";
				row.appendChild(this.field.drawRecordText("s-search-suggest-box-item-title", $record.$searchItemTitle, $record));
				isData && row.appendChild(this.field.drawRecordText("s-search-suggest-box-item-type", $record.$resultTypeTitle, $record));
				this.body.appendChild(row);
			}
		} else {
			this.header.textContent = this.$title;
			this._setEmptyMessage(syra_local.search_no_res);
		}
		var count = (this.field.suggestBox.functions.$totalResults + this.field.suggestBox.data.$totalResults);
		syra_button.hide(this.field.suggestMore, count <= 0);
		syra_button.setText(this.field.suggestMore, count > 5 ? syra_local.searchAdvanceResults : syra_local.searchAdvanceDetails);
	};



	this._setEmptyMessage = function(text) {
		var div = document.createElement("div");
		div.className = "s-search-suggest-box-empty";
		div.textContent = text;
		this.body.appendChild(div);
	};
}


function SearchField() {}

helpers.defineClass(SearchField, Field, {
	getUrl: function($seach) {
		return _searchUrl + ("&q=" + $seach) + (this.isFuzzyMode ? "&qt=fuzzy" : "");
	},
	gotoField: function(page) {
		if (page.isFusionPage) {
			syra_menus.click.fire({
				scope: page,
				$bind: "1186"
			});
		} else {
			this.focus();
		}
	},
	drawRecordText: function(css, data, dataset) {
		var div = document.createElement("div");
		div.className = css;
		var text = syra_expression.parse(this.page, data, dataset);
		div.innerHTML = syra_dom.formatHTMLText(text.replace(/<em>/g, "<em class='" + css + "-em'>"));
		return div;
	},
	load: function() {
		this.results = {};
		Field.prototype.load.call(this);

		this.clearBtn = syra_button.add({
			parent: this,
			slot: this._dataValue,
			text: syra_local.siteSearchClear,
			css: "s-search-clear-btn",
			iconOnly: true,
			isHidden: true,
			click: function() {
				var field = this.parent;
				field.setValue("");
				field.showPicker(false);
				field.closeSuggest();
				syra_form.onInputChange(field);
			}
		});

		syra_button.add({
			parent: this,
			slot: this._dataValue,
			text: syra_local.siteSearchLink,
			css: "s-search-run-btn",
			iconOnly: true,
			fontIcon: "lookup",
			click: function() {
				this.parent.onRunClick();
			}
		});

	},
	showPicker: function(onOut) {
		var show = this.getValue() != "";
		if (show) {
			this.clearBtn.link.style.opacity = onOut ? 0.4 : 1;
		}
		syra_button.hide(this.clearBtn, !show);
	},
	onKeyUp: function() {
		this.showPicker();
	},
	onInputFocusin: function() {
		this.showPicker();
	},
	onInputFocusout: function() {
		this.showPicker(true);
	},
	onRunClick: function(results) {
		this.results = results || {}; //ensure reset of results
		var value = this.getValue();
		if (value !== "") {
			syra_dataset.setFieldValue(this, value);
			this._runSearch(this.getUrl(value));
		}
	},
	onSuggestClick: function(event, target) {
		var box = this.suggestBox && this.suggestBox[target.syraBox];
		this.executeRecord(box && box.$records[target.syraIndex]);
	},
	executeRecord: function($record) {
		$record && $record.$url && this._runSearch($record.$url, $record);
	},
	_runSearch: function($url, $record) {
		clearTimeout(this._searchTimer);
		syra_router.executeMenu({
			$url: syra_expression.parse(this.page, $url, $record)
		}, this.page);
		this.closeSuggest();
	},

	closeSuggest: function() {
		this.suggestPopup && this.suggestPopup.close();
	},
	_openSuggest: function() {
		var self = this;
		var value = self.getValue();
		if (value !== "") {
			self.page.dataset.$search = value;
			if (self.searchValue !== value) {
				self.focus();
				self.searchValue = value;
				if (!self.suggestPopup) {
					var slot = document.createElement("div");
					slot.className = "s-search-suggest-slot";
					self.suggestBox = {
						"functions": new SuggestBox(self, "functions", slot),
						"data": new SuggestBox(self, "data", slot)
					};

					self.suggestMore = syra_button.add({
						parent: self,
						slot: slot,
						text: syra_local.searchAdvanceDetails,
						css: "search-suggest-more",
						fontIcon: "left_arrow",
						click: function() {
							this.parent.onRunClick();
						}
					});
					syra_site.layoutSlot.appendChild(slot);

					self.suggestPopup = syra_over.openPopup(self.boxParent, {
						content: self,
						picker: self.layoutSlot,
						slot: slot,
						position: {
							my: "right top",
							at: "right bottom",
							of: self.domItem
						},
						close: function() {
							self.searchValue = null;
							syra_dom.empty(slot);
							if (self.suggestBox) {
								syra_site.disposeObject(self.suggestBox.functions);
								syra_site.disposeObject(self.suggestBox.data);
							}
							slot = self.suggestBox = self.suggestMore = self.suggestPopup = self.suggestSelected = null;
						}
					});
				}
				self.suggestBox.functions.fetch(value);
				self.suggestBox.data.fetch(value);
			}
		} else {
			self.closeSuggest();
		}
	},
	onItemInOut: function(on, event, target) {
		Field.prototype.onItemInOut.call(this, on, event, target);
		if (this.suggestSelected) {
			syra_dom.toggleClass(this.suggestSelected, "s-enter", false);
			this.suggestSelected = null;
		}
		syra_dom.toggleClass(target, "s-enter", on);
	},
	applyEscape: function(shortcuts) {
		clearTimeout(this._searchTimer);
		if (this.suggestPopup && this.closeSuggest()) {
			return true;
		}
	},
	applyShortCut: function(shortcuts) {
		var self = this;
		var isCtrlPress = shortcuts.ctrl;
		clearTimeout(self._searchTimer);
		if (!shortcuts.enter) {
			self._searchTimer = setTimeout(function() {
				self._openSuggest();
			}, 1000);
			if (self.suggestBox && self.suggestPopup && (shortcuts.up || shortcuts.down)) {
				var rows = self.suggestBox.functions.rows.concat(self.suggestBox.data.rows).concat(self.suggestMore.link);
				if (rows.length > 1) {
					var next = 0;
					if (self.suggestSelected) {
						next = rows.indexOf(self.suggestSelected);
						if (next >= 0) {
							next += (shortcuts.down ? 1 : (-1));
						}
						syra_dom.toggleClass(self.suggestSelected, "s-enter", false);
						delete self.suggestSelected;
					}
					if (shortcuts.down) {
						self.suggestSelected = rows[(next >= rows.length) ? 0 : next];
					} else {
						self.suggestSelected = rows[(next < 0) ? (rows.length - 1) : next];
					}
					syra_dom.toggleClass(self.suggestSelected, "s-enter", true);
				}
			}
		} else {
			if (self.suggestPopup && self.suggestSelected && self.suggestSelected.parentNode) {
				self.suggestSelected.click();
				return true;
			}
			self.closeSuggest();
			self.results = {};
			var value = self.getValue();
			if (value != "") {
				["functions", "data"].forEach(function($source) {
					self.fetchSearch({
						$source: $source,
						value: value,
						options: {
							success: function(data) {
								if (!self.disposed) {
									self.results[$source] = data;
									if (self.results.functions && self.results.data) {
										var $records = self.results.functions.$resources;
										if ($records && $records.length == 1) {
											var $record = $records[0];
											var code = $record.fusionFunction && $record.fusionFunction.replace("<em>", "").replace("</em>", "");
											var run = (code && code.toUpperCase() == value.toUpperCase());
											if (run && (self.results.data.$resources && self.results.data.$resources.length > 0) && !isCtrlPress) {
												run = false;
											}
											if (run) {
												self.results = {}; //reset
												self.executeRecord($record);
												return;
											}
										}
										self.onRunClick(self.results);
									}
								}
							}
						}
					});
				});
			}
		}
		return true;
	},
	fetchSearch: function(context) {
		var self = this;
		context.options = context.options || {};
		context.options.page = self.page;
		var $url = self.getUrl(context.value) + "&source=" + context.$source;
		if (context.count) {
			$url += "&count=" + context.count;
		}
		syra_url.formatMenuUrl(self.page, {
			$url: $url
		}, {}, function($fullUrl, isCanceled) {
			context.options.url = $fullUrl;
			syra_ajax.get(context.options);
		});
	},
	dispose: function() {
		this.closeSuggest();
		Field.prototype.dispose.call(this);
	}

});

exports.load = function(slot) {
	syra_site.$prototype.$properties.$search = {
		$type: "application/x-string",
		$title: syra_local.searchFieldTitle
	};
	return syra_site.addItem(slot.appendChild(document.createElement("div")), {
		$bind: "$search",
		$isEditMode: true,
		$class: SearchField,
		$skin: "s-search-field",
		$inplace: true,
		$isTitlePlaceHolder: true
	});
};