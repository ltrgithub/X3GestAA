"use strict";
var helpers = require('syracuse-core/lib/helpers');
var RawPage = require('syracuse-ui/lib/page/rawPage').RawPage;
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var _facetsBar = require('./facetsBar');

var _queryLinks = "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}";
var _searcherField;

function _getFocusRecIndex(records) {
	for (var ii = 0, jj = records.length; ii < jj; ii++) {
		var rec = records[ii];
		if (rec.domItem.className.indexOf("s-search-rq-field-carditem-hover") >= 0) {
			syra_site.dom.toggleClass(rec.domItem, "s-search-rq-field-carditem-hover", false);
			return ii;
		}
	}
}

var _suggest = {
	load: function(page) {
		var self = this;
		page.dataset.$search = _searcherField.getDataValue();
		if (page.dataset.$search == "") {
			//TODO close dialog if empty field
			return;
		}
		self.slot = document.createElement("div");
		self.slot.className = "s-search-suggest-slot";
		syra_site.layoutSlot.appendChild(self.slot);
		["$queryFunctions", "$queryData"].forEach(function($bind) {
			var query = page[$bind] = new QueryBox();
			query.$bind = $bind;
			query.isQueryData = $bind == "$queryData";
			query.page = page;
			query.css = "s-search-suggest-query";
			query.init(self.slot);
		});
		page.loadNewItem(self.slot, {
			$category: "link",
			$skin: "search-suggest-advanced",
			$bind: "$advancedSearch"
		}, page);
		page.applyChange({
			$queryFunctions: [],
			$queryData: [],
			$links: {
				$advancedSearch: {
					$title: syra_local.searchAdvanceLabel,
					$url: _queryLinks,
					$isHidden: true
				}
			}
		});
		page.$queryFunctions.callServer(page.dataset, {});
		page.$queryData.callServer(page.dataset, {});
		return self.slot;
	},
	show: function() {
		var self = this;
		if (_searcherField.getDataValue() !== "") {
			_searcherField.domItem.id = _searcherField.id;
			_searcherField.focus();
			_searcherField.searchValue = _searcherField.getDataValue();
			if (self.popup) {
				self.load(_searcherField.page);
			} else {
				self.popup = syra_site.dialogManager.openPopup(_searcherField.boxParent, {
					content: _searcherField,
					picker: _searcherField.layoutSlot,
					slot: self.load(_searcherField.page),
					position: {
						my: "right top",
						at: "right bottom",
						of: $(_searcherField.domItem)
					},
					onClose: function() {
						_searcherField.searchValue = null;
						self.popup = null;
						if (self.slot) {
							syra_site.dom.empty(self.slot);
							self.slot = null;
							_searcherField.page.removeItem(_searcherField.page.$queryFunctions.field, false, true);
							_searcherField.page.removeItem(_searcherField.page.$queryData.field, false, true);
							syra_menus.removeMenu(_searcherField.page, "$advancedSearch");
							self.isArrowClicked = null;
						}
					}
				});
			}
		} else {
			self.close();
		}
	},
	applyShortCuts: function(shortcuts) {
		var self = this;
		if (!shortcuts.enter) {
			//stop any previous ongoing search request
			clearTimeout(self._searching);
			self._searching = setTimeout(function() {
				// search doesn't take whitespace into account
				if (_searcherField.getDataValue().replace(/\s+/g, '') !== "") {
					// if some research has already been done, proceed with the request if the value has changed
					if (_searcherField.searchValue) {
						if (_searcherField.searchValue !== _searcherField.getDataValue()) {
							self.show();
						} else {
							// if empty field, close incremental search popup
							if (_searcherField.searchValue == _searcherField.getDataValue() == "") {
								self.close();
							}
						}
					} else {
						// first research (field.searchValue not set yet)
						self.show();
					}
				} else {
					self.close();
				}

			}, 1000);
			if (self.popup) { // handle navigation in drop down search result list (down(40) and up(38))
				if (shortcuts.up || shortcuts.down) {
					var searchResRecords = _searcherField.page.$queryFunctions.field.records.concat(_searcherField.page.$queryData.field.records);
					var index = _getFocusRecIndex(searchResRecords);
					var jj = searchResRecords.length;
					if (index != undefined) {
						index = shortcuts.down ? ((index + 1) <= (jj - 1) ? (index + 1) : 0) : ((index - 1) >= 0 ? (index - 1) : jj - 1);
					} else {
						index = shortcuts.down ? 0 : jj - 1;
					}
					searchResRecords[index].domItem.className += " s-search-rq-field-carditem-hover";
					self.isArrowClicked = true;
				}
			}
		} else {
			// remove autocomplete list if opened
			if (self.popup) {
				// handle navigation in drop down search result list (enter)
				var searchResRecords = _searcherField.page.$queryFunctions.field.records.concat(_searcherField.page.$queryData.field.records);
				var index = _getFocusRecIndex(searchResRecords);
				if (index != undefined && self.isArrowClicked) {
					var record = searchResRecords[index];
					record.domItem.click();
				} else {
					// run search if field not empty
					if (_searcherField.getDataValue() !== '') {
						_searcherField.onInputValidate();
					}
					self.close();
				}
			} else {
				if (_searcherField.getDataValue() !== '') {
					clearTimeout(self._searching);
					clearTimeout(self._onFieldChangeNotification);
					self._onFieldChangeNotification = setTimeout(function() {
						_searcherField.notifyFieldChange(_searcherField.getDataValue());
					}, 200);
				}
			}
		}
	},
	close: function() {
		this.popup && this.popup.close();
	}
};

function _addSearchField(page) {
	page.$prototype.$properties.$search = {
		$type: "application/x-string",
		$title: syra_local.searchFieldTitle
	};
	var field = _searcherField = page.loadNewItem(page.domItem, {
		$bind: "$search",
		$category: "field",
		$skin: "s-search-rq-field",
		$inplace: true,
		$isTitlePlaceHolder: true
	});
	field.isSearchField = true;
	syra_menus.addFieldPicker(field, "clear", syra_local.siteSearchClear);
	field.mnPickers.clear.syraOnClick = "onClearClick";
	field.mnPickers.clear.style.display = "none";

	syra_menus.addFieldPicker(field, "search", syra_local.siteSearchLink);
	field.mnPickers.search.syraOnClick = "onSearchClick";

	field.mnPickers.clear.syraItem = field.mnPickers.search.syraItem = field.id;
	field.mnPickers.clear.syraIsSyraMenuHandler = field.mnPickers.search.syraIsSyraMenuHandler = null;

	field.onInputChange = function() {};
	field.showPicker = function(onOut) {
		var show = _searcherField.getDataValue() != "";
		if (show) {
			_searcherField.mnPickers.clear.style.opacity = onOut ? 0.4 : 1;
			_searcherField.mnPickers.clear.style.display = "";
		} else {
			_searcherField.mnPickers.clear.style.display = "none";
		}
	};
	field.notifyFieldChange = function() {
		_searcherField.onSearchClick();
	};
	field.onKeyUp = field.onInputFocusin = function() {
		_searcherField.showPicker();
	};
	field.onInputFocusout = function() {
		_searcherField.showPicker(true);
	};
	field.onSearchClick = function() {
		var value = _searcherField.getDataValue();
		if (value !== "") {
			_searcherField.setDatasetValue(value);
			syra_controller.executeMenu({
				$url: _queryLinks
			}, _searcherField.articleParent);
		}
	};
	field.onClearClick = function() {
		_searcherField.setDataValue("");
		_searcherField.showPicker(false);
		_suggest.close();
		_searcherField.onInputValidate(); //trigger notification change
	};
}

function SearchFieldPage() {}

helpers.defineClass(SearchFieldPage, RawPage, {
	applyShortCuts: function(shortcuts) {
		_suggest.applyShortCuts(shortcuts);
	},
	goToSearchField: function(page) {
		if (page.isFusionPage) {
			syra_menus.click.menuId(page, "1186");
		} else {
			_searcherField && _searcherField.focus();
		}
	},
	closeSuggest: function() {
		_suggest.close();
	},
	drawBox: function() {
		this.$skin = this.$item.$skin = "s-search-rq";
		this.domItem = this.body = document.createElement("div");
		this.domItem.className = this.$skin;
		this.layoutSlot.appendChild(this.domItem);
		_addSearchField(this);
	},

	onMenuClick: function(menuItem) {
		if (menuItem.$bind == "$advancedSearch" || menuItem.$item && menuItem.$item.$bind == "$detail") {
			setTimeout(function() {
				_suggest.close();
			}, 100);
			return true;
		}
		return true;
	},
	onSelectRecord: function(records, record, isSelected) {
		if (record && isSelected && record.dataset.$url) {
			syra_controller.executeMenu({
				$url: record.dataset.$url
			}, record);
		}
	},
	dispose: function() {
		_suggest.close();
		syra_site.disposeObject(this.$queryFunctions);
		syra_site.disposeObject(this.$queryData);
		RawPage.prototype.dispose.call(this);
	}
});

exports.load = function(layoutSlot) {
	return syra_site.pageLoader.load({
		$isEditMode: true,
		layoutSlot: layoutSlot,
		$category: "searchRequest",
		openerUrlSegments: syra_site.urlMaker.parse(_queryLinks),
		$pageCategoryClass: SearchFieldPage,
		$representation: {
			$prototype: {
				$properties: {
					query: {
						"$type": "application/x-string"
					}
				}
			},
			$article: {
				$isTitleHidden: true,
				$layout: {
					$items: []
				}
			}
		}
	});
};


function _addRecordText(record, $bind, css) {
	var div = document.createElement("div");
	div.className = css;
	var text = syra_site.expressionMaker.parse(record, record.dataset[$bind], record.dataset);
	div.innerHTML = syra_site.dom.formatHTMLText(text.replace(/<em>/g, "<em class='" + css + "-em'>"));
	record.body.appendChild(div);
}

function _addDescription($properties, recordData, parentRecordData) {
	var $binds = Object.keys($properties);
	for (var mm = 0, pp = $binds.length; mm < pp; mm++) {
		var property = $properties[$binds[mm]];
		if ((property.$isHighlight || property.$isSummary) && recordData[$binds[mm]]) {
			var span = document.createElement("span");
			span.className = 's-search-main-query-card-desc-title';
			span.textContent = property.$title + ": ";
			var value = document.createElement("span");
			value.className = 's-search-main-query-card-desc-data';
			var data = recordData[$binds[mm]];
			if (data) {
				if (!data.replace && data.join) {
					data = data.join();
				}
				if (data.replace) {
					value.innerHTML = syra_site.dom.formatHTMLText(data.replace(/<em>/g, "<em class='s-search-main-query-card-data-em'>"), false);
				}
			}
			parentRecordData.$descriptionData.push(span.outerHTML + value.outerHTML);
		} else {
			if (property.$isHighlight == undefined) {
				_addDescription(property, recordData[$binds[mm]], parentRecordData);
			}
		}
	}
}

function QueryBox() {}


//s-search-suggest-query
helpers.defineClass(QueryBox, null, {
	init: function(container) {
		var self = this;
		var key = self.$bind.slice(1);
		self.slot = container.appendChild(document.createElement("div"));
		self.slot.className = self.css + " s-search-" + key;
		self.header = document.createElement("header");
		self.header.className = self.css + "-header";
		self.header.texContent = self.$title = syra_local["search_" + key];
		self.slot.appendChild(self.header);

		self.page.$prototype.$properties[self.$bind] = {
			$type: "application/x-array",
			$item: {
				$type: "application/json",
				$properties: {}
			}
		};
		self.field = self.page.loadNewItem(self.slot, {
			$bind: self.$bind,
			$selectMode: "row",
			$isMenuRecordHidden: true,
			$alternateStyle: false,
			$noDataText: syra_local.search_no_res,
			$format: "cards",
			$skin: self.css + "-item",
			$addMaximize: self.isMainSearch,
			$isPagerHidden: !self.isMainSearch,
			renderRecordContent: function(record) {
				_addRecordText(record, "$searchItemTitle", self.css + "-item-title");
				self.$bind == "$queryData" && _addRecordText(record, "$resultTypeTitle", self.css + "-item-type");
				if (self.isMainSearch) {
					var list = record.dataset.$descriptionData;
					for (var ii = 0, jj = list.length; ii < jj; ii++) {
						var div = document.createElement("div");
						div.className = "s-search-item-desc";
						div.innerHTML = list[ii];
						record.body.appendChild(div);
					}
				}
			},
			$layout: {
				$items: []
			}
		});
	},
	callServer: function(dataset, options) {
		var self = this;
		self.page.applyChange({
			query: self.page.openerUrlSegments.params.q
		});
		var $url = _queryLinks + (self.isQueryData ? "&source=data" : "&source=functions");
		if (self.isMainSearch) {
			if (self.page._modeBtn.syraIsSimilar) {
				$url += "&qt=fuzzy";
			}
		} else {
			$url += "&count=5";
		}
		syra_site.urlMaker.formatMenuUrl(self.page, {
			$url: $url
		}, dataset, function($fullUrl, isCanceled) {
			options.$location = options.$location || {
				$url: $fullUrl
			};
			if (self.isMainSearch && !self.page.isMultiQuery) {
				options.$updateHitory = true;
			}
			syra_controller.callServer(self.page, options, function(data) {
				self.page.startChange();
				self.page.applyChange({
					searchCriteria: data.query,
					$searchFacets: self.isQueryData ? data.$searchFacets : self.page.dataset.$searchFacets // no search facet for 'functions' results
				});
				// apply vignette pages data (the tabs)
				var $records = data.$resources;
				delete data.$resources;
				if (data.$totalResults != undefined) {
					self.header.textContent = self.$title + " (" + data.$totalResults + ")";
				}
				if (self.isMainSearch) {
					for (var ii = 0, jj = $records.length; ii < jj; ii++) {
						var $record = $records[ii];
						$record.$descriptionData = [];
						$record.$properties && _addDescription($record.$properties, $record, $record);
					}
				}
				var queryData = {
					$properties: {}
				};
				queryData.$properties[self.$bind] = {
					$links: data.$links,
					$itemsPerPage: data.$itemsPerPage,
					$startIndex: data.$startIndex,
					$totalResults: data.$totalResults
				};
				queryData[self.$bind] = $records;

				if (!self.isMainSearch) {
					// display "see more results" if there is data
					// display 'see details' if length <= 5
					// display 'see more results' if length > 5
					if ($records && $records.length > 0) {
						queryData.$links = {
							$advancedSearch: {
								$isHidden: false,
								$title: queryData.$totalResults > 5 ? syra_local.searchAdvanceResults : (self.page.$hasMoreResults ? syra_local.searchAdvanceResults : syra_local.searchAdvanceDetails)
							}
						};
						self.page.$hasMoreResults = data.$totalResults > 5;
					}
				}
				self.page.applyChange(queryData);
				self.isMainSearch && _facetsBar.checkVisibility();
				self.page.endChange();
			});
		});
	}
});

function SearchPage() {}

exports.SearchPage = helpers.defineClass(SearchPage, DesktopPage, {
	loadBox: function() {
		var self = this;
		self.$prototype = {
			$baseType: "application/json;vnd.sage=syracuse",
			$url: "{$baseUrl}/queryResults",
			$type: "application/json",
			$descriptor: "prototype queryResult.$search",
			$properties: {
				searchCriteria: {
					$type: "application/x-string"
				}
			}
		};
		self.isMenuBarDisabled = true;
		self.isBookmarkEnabled = false;
		DesktopPage.prototype.loadBox.call(self);
		_facetsBar.load(self, {
			resizeDirection: "right"
		});
		var slot = document.createElement("div");
		slot.className = "s-search-options";
		slot.textContent = syra_local.searchOptionLabel;
		self._modeBtn = syra_menus.addTextButton(syra_local.searchSimilar, "s-search-mode", "onModeClick");
		self._modeBtn.syraIsSimilar = false;
		self._modeBtn.syraItem = self.id;
		slot.appendChild(self._modeBtn);
		self.header.appendChild(slot);

		["$queryFunctions", "$queryData"].forEach(function($bind) {
			var query = self[$bind] = new QueryBox();
			query.$bind = $bind;
			query.isQueryData = $bind == "$queryData";
			query.page = self;
			query.css = "s-search-main-query";
			query.isMainSearch = true;
			query.init(self.page.layoutContent.domItem);
		});
		self.fetch({
			isPageLoading: true
		});
	},
	onSelectRecord: function(records, record, isSelected) {
		if (record && isSelected && record.dataset.$url) {
			syra_controller.executeMenu({
				$url: record.dataset.$url
			}, record);
		}
	},
	onModeClick: function() {
		this._modeBtn.syraIsSimilar = !this._modeBtn.syraIsSimilar;
		syra_menus.setButtonTitle(this._modeBtn, this._modeBtn.syraIsSimilar ? syra_local.searchStartingWith : syra_local.searchSimilar);
		this.$queryFunctions.callServer(this.dataset, {});
		this.$queryData.callServer(this.dataset, {});
	},
	ensureDefaultArticle: function() {
		return {
			$title: syra_local.searchPageTitle,
			$layout: {
				$items: []
			}
		};
	},
	onFieldInputEvent: function(event) {
		_facetsBar.onFieldInputEvent(event);
	},
	onItemInOut: function(onEnter, event, target) {
		_facetsBar.onItemInOut(onEnter, event, target);
	},
	applyChange: function(newData) {
		DesktopPage.prototype.applyChange.call(this, newData);
		newData && newData.$searchFacets && _facetsBar.fill(this.dataset.$searchFacets);
	},
	_sendAllRequests: function(dataset, options) {
		this.isMultiQuery = true;
		// to handle navigation (prev/next) issues.
		var functionsOptions = helpers.object.clone(options);
		var dataOptions = helpers.object.clone(options);
		// remove params unecessary for appropriate source
		if (this.openerUrlSegments.params.source) {
			if (this.openerUrlSegments.params.source == 'data') {
				delete functionsOptions.params;
			} else {
				delete dataOptions.params;
			}
		}
		this.$queryFunctions.callServer(dataset, functionsOptions);
		this.$queryData.callServer(dataset, dataOptions);
		this.isMultiQuery = false;
	},
	fetch: function(options) {
		this.dataset.$search = this.openerUrlSegments.params.q;
		if (!options || Object.keys(options).length == 0) {
			this._sendAllRequests(this.dataset, {});
		} else {
			// filtering /!\ on data result only
			if (options.jsonParams) {
				this.$queryData.callServer(this.dataset, options);
			}
			// pager step navigation (pagination)
			else {
				if (options.$location) {
					var $bind = options.$location.$url.indexOf("source=data") >= 0 ? "$queryData" : "$queryFunctions";
					this[$bind].callServer(this.dataset, options);
				}
				// others (simple pager navigation) (pagination)
				// get corresponding tab information, update content accordingly
				else {
					if (options.field && options.field.$item && options.field.$item.$bind) {
						options.jsonParams = this.jsonParams;
						this[options.field.$item.$bind].callServer(this.dataset, options);
					} else {
						// in order to handle navigation issues (prev/next) issue #2824
						if (this.openerUrlSegments.params.source) {
							options.params = {
								count: this.openerUrlSegments.params.count,
								startIndex: this.openerUrlSegments.params.startIndex
							};
						}
						this._sendAllRequests(this.dataset, options);
					}
				}
			}
		}
	},
	onFacetFilterChange: function(options) {
		this.jsonParams = options.jsonParams;
		this.fetch(options);
	},
	dispose: function() {
		syra_site.disposeObject(this.$queryFunctions);
		syra_site.disposeObject(this.$queryData);
		_facetsBar.dispose();
		DesktopPage.prototype.dispose.call(this);
	}
});