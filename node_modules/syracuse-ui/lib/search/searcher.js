"use strict";
var helpers = require('syracuse-core/lib/helpers');
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var Field = require('syracuse-ui/lib/field/field').Field;
var _facetsBar = require('./facetsBar');

var _queryLinks = "/sdata/syracuse/search/syracuse/$search?representation=queryResult.$search&q={$search}";

function _callServer(page, box, options) {
	options = options || {};
	var self = this;
	/*page.applyChange({
     query: page.openerUrlSegments.params.q
     });*/
	var $url = _queryLinks + "&source=" + box.$source;
	box.onSearch && box.onSearch();
	if (box.isSuggest) {
		$url += "&count=5";
	} else {
		if (page._isSimilarFetch) {
			$url += "&qt=fuzzy";
		}
	}
	syra_site.urlMaker.formatMenuUrl(page, {
		$url: $url
	}, {
		$search: box.$search
	}, function($fullUrl, isCanceled) {
		options.$location = options.$location || {
			$url: $fullUrl
		};
		if (!box.isSuggest && !page.isMultiQuery) {
			options.$updateHitory = true;
		}
		syra_controller.callServer(page, options, function(data) {
			box.fill(data);
		});
	});
}

function _setRecordDescription($properties, dataset, parentData) {
	var $binds = Object.keys($properties);
	for (var ii = 0, pp = $binds.length; ii < pp; ii++) {
		var $bind = $binds[ii];
		var $prop = $properties[$bind];
		if (($prop.$isHighlight || $prop.$isSummary) && dataset[$bind]) {
			var span = document.createElement("span");
			span.className = 's-search-main-query-card-desc-title';
			span.textContent = $prop.$title + ": ";
			var value = document.createElement("span");
			value.className = 's-search-main-query-card-desc-data';
			var data = dataset[$bind];
			if (data) {
				if (!data.replace && data.join) {
					data = data.join();
				}
				if (data.replace) {
					value.innerHTML = syra_site.dom.formatHTMLText(data.replace(/<em>/g, "<em class='s-search-main-query-card-data-em'>"), false);
				}
			}
			parentData.$descriptionData.push(span.outerHTML + value.outerHTML);
		} else {
			if ($prop.$isHighlight == undefined) {
				_setRecordDescription($prop, dataset[$bind], parentData);
			}
		}
	}
}

function _addRecordText(article, css, data, dataset) {
	var div = document.createElement("div");
	div.className = css;
	var text = syra_site.expressionMaker.parse(article, data, dataset);
	div.innerHTML = syra_site.dom.formatHTMLText(text.replace(/<em>/g, "<em class='" + css + "-em'>"));
	return div;
}




function FullBox(page, $source, slot) {
	this.$bind = (this.$source = $source) + "Box";
	(this.page = page)[this.$bind] = this;

	this.slot = slot.appendChild(document.createElement("div"));
	this.slot.className = "s-search-main-query s-search-" + $source;

	this.header = document.createElement("header");
	this.header.className = "s-search-main-query-header";
	this.header.texContent = this.$title = syra_local["search_" + $source];
	this.slot.appendChild(this.header);

	page.$prototype.$properties[this.$bind] = {
		$type: "application/x-array",
		$item: {
			$type: "application/json",
			$properties: {}
		}
	};

	this.field = page.loadNewItem(this.slot, {
		$bind: this.$bind,
		$selectMode: "row",
		$isMenuRecordHidden: true,
		$alternateStyle: false,
		$noDataText: syra_local.search_no_res,
		$format: "cards",
		$skin: "s-search-main-query-item",
		$addMaximize: false,
		$isPagerHidden: true,
		renderRecordContent: function(record) {
			record.body.appendChild(_addRecordText(record, "s-search-main-query-item-title", record.dataset.$searchItemTitle, record.dataset));
			if ($source == "data") {
				record.body.appendChild(_addRecordText(record, "s-search-main-query-item-type", record.dataset.$resultTypeTitle, record.dataset));
			}
			var list = record.dataset.$descriptionData;
			for (var ii = 0, jj = list.length; ii < jj; ii++) {
				var div = document.createElement("div");
				div.className = "s-search-item-desc";
				div.innerHTML = list[ii];
				record.body.appendChild(div);
			}
		},
		$layout: {
			$items: []
		}
	});
	this.fetch = function(options) {
		_callServer(this.page, this, options);
	};
	this.fill = function(dataset) {
		this.page.startChange();
		var $records = dataset.$resources;
		if (dataset.$totalResults != undefined) {
			this.header.textContent = this.$title + " (" + dataset.$totalResults + ")";
		}
		for (var ii = 0, jj = $records.length; ii < jj; ii++) {
			var $record = $records[ii];
			$record.$descriptionData = [];
			$record.$properties && _setRecordDescription($record.$properties, $record, $record);
		}
		var listData = {
			searchCriteria: dataset.query,
			$searchFacets: (this.$source == "data") ? dataset.$searchFacets : page.dataset.$searchFacets, // no search facet for 'functions' results
			$properties: {}
		};
		listData.$properties[this.$bind] = {
			$links: dataset.$links,
			$itemsPerPage: dataset.$itemsPerPage,
			$startIndex: dataset.$startIndex,
			$totalResults: dataset.$totalResults
		};
		listData[this.$bind] = $records;
		this.page.applyChange(listData);
		_facetsBar.checkVisibility();
		this.page.endChange();
	};
}


function SuggestBox(field, $source, slot) {
	this.$bind = (this.$source = $source) + "Box";
	(this.field = field)[this.$bind] = this;
	this.isSuggest = true;
	this.$totalResults = 0;

	this.slot = slot.appendChild(document.createElement("div"));
	this.slot.className = "s-search-suggest-box";

	this.header = document.createElement("header");
	this.header.className = "s-search-suggest-box-header";
	this.header.texContent = this.$title = syra_local["search_" + $source];

	this.slot.appendChild(this.header);

	this.body = document.createElement("div");
	this.body.className = "s-search-suggest-box-body";
	this.slot.appendChild(this.body);

	this.fetch = function(value) {
		syra_site.dom.empty(this.body);
		this.body.textContent = syra_local.flWaitingData;
		this.$search = value;
		_callServer(this.field.page, this);
	};
	this.fill = function(data) {
		syra_site.dom.empty(this.body);
		this.$records = data.$resources || [];
		if (data.$totalResults != undefined) {
			this.$totalResults = data.$totalResults;
		}
		if (this.$totalResults) {
			this.header.textContent = this.$title + " (" + this.$totalResults + ")";
			var isData = this.$source == "data";
			for (var ii = 0, jj = this.$records.length; ii < jj; ii++) {
				var $record = this.$records[ii];
				var row = document.createElement("a");
				row.setAttribute("href", "#"); //need to improve cancel action otherwiese add # to url
				row.syraOnClick = "onSuggestClick";
				row.syraIndex = ii;
				row.syraBox = this.$bind;
				row.syraItem = this.field.id;
				row.className = "s-search-suggest-box-item";
				row.appendChild(_addRecordText(this.field.page, "s-search-suggest-box-item-title", $record.$searchItemTitle, $record));
				isData && row.appendChild(_addRecordText(this.field.page, "s-search-suggest-box-item-type", $record.$resultTypeTitle, $record));
				this.body.appendChild(row);
			}
		} else {
			this.header.textContent = this.$title;
			this.body.textContent = syra_local.search_no_res;
		}
		var count = (this.field.functionsBox.$totalResults + this.field.dataBox.$totalResults);
		this.field.suggestMore.style.display = count ? "" : "none";
		syra_menus.updateButtonIcon(this.field.suggestMore, count > 5 ? syra_local.searchAdvanceResults : syra_local.searchAdvanceDetails);
	};
}

function SearcField() {}

helpers.defineClass(SearcField, Field, {
	gotoField: function(page) {
		if (page.isFusionPage) {
			syra_menus.click.menuId(page, "1186");
		} else {
			this.focus();
		}
	},
	loadBox: function() {
		Field.prototype.loadBox.call(this);
		syra_menus.addFieldPicker(this, "clear", syra_local.siteSearchClear);
		this.mnPickers.clear.syraOnClick = "onClearClick";
		this.mnPickers.clear.style.display = "none";

		syra_menus.addFieldPicker(this, "search", syra_local.siteSearchLink);
		this.mnPickers.search.syraOnClick = "onSearchClick";

		this.mnPickers.clear.syraItem = this.mnPickers.search.syraItem = this.id;
		this.mnPickers.clear.syraIsSyraMenuHandler = this.mnPickers.search.syraIsSyraMenuHandler = null;
	},
	onInputChange: function() {},
	showPicker: function(onOut) {
		var show = this.getDataValue() != "";
		if (show) {
			this.mnPickers.clear.style.opacity = onOut ? 0.4 : 1;
			this.mnPickers.clear.style.display = "";
		} else {
			this.mnPickers.clear.style.display = "none";
		}
	},
	notifyFieldChange: function() {
		this.onSearchClick();
	},
	onKeyUp: function() {
		this.showPicker();
	},
	onInputFocusin: function() {
		this.showPicker();
	},
	onInputFocusout: function() {
		this.showPicker(true);
	},
	onSearchClick: function() {
		var value = this.getDataValue();
		if (value !== "") {
			this.setDatasetValue(value);
			this.onSuggestClick();
		}
	},
	onClearClick: function() {
		this.setDataValue("");
		this.showPicker(false);
		this.closeSuggest();
		this.onInputValidate(); //trigger notification change
	},
	onSuggestClick: function(event, target) {
		var box = target && this[target.syraBox];
		var $record = box && box.$records[target.syraIndex];
		syra_controller.executeMenu({
			$url: $record ? $record.$url : _queryLinks
		}, this.page);
		this.closeSuggest();
	},
	closeSuggest: function() {
		this.suggestPopup && this.suggestPopup.close();
	},
	openSuggest: function() {
		var self = this;
		var value = self.getDataValue().trim();
		if (value !== "") {
			self.page.dataset.$search = value;
			if (self.searchValue !== value) {
				self.focus();
				self.searchValue = value;
				if (!self.suggestPopup) {
					var slot = document.createElement("div");
					slot.className = "s-search-suggest-slot";

					new SuggestBox(self, "functions", slot);
					new SuggestBox(self, "data", slot);

					self.suggestMore = syra_menus.addTextButton(syra_local.searchAdvanceDetails, "search-suggest-more", "onSuggestClick", null, "left_arrow");
					slot.appendChild(self.suggestMore).syraItem = self.id;
					syra_site.layoutSlot.appendChild(slot);

					self.suggestPopup = syra_site.dialogManager.openPopup(self.boxParent, {
						content: self,
						picker: self.layoutSlot,
						slot: slot,
						position: {
							my: "right top",
							at: "right bottom",
							of: $(self.domItem)
						},
						onClose: function() {
							self.searchValue = null;
							syra_site.dom.empty(slot);
							syra_site.disposeObject(self.functionsBox);
							syra_site.disposeObject(self.dataBox);
							slot = self.functionsBox = self.dataBox = self.suggestMore = self.suggestPopup = self.suggestSelected = null;
						}
					});
				}
				self.functionsBox.fetch(value);
				self.dataBox.fetch(value);
			}
		} else {
			self.closeSuggest();
		}
	},

	applyShortCut: function(shortcuts) {
		var self = this;
		if (!shortcuts.enter) {
			clearTimeout(self._searchTimer);
			self._searchTimer = setTimeout(function() {
				self.openSuggest();
			}, 1000);
			if (self.suggestPopup && (shortcuts.up || shortcuts.down)) {
				var searchResRecords = self.page.functionsBox.field.records.concat(self.page.dataBox.field.records);
				var index = _getFocusRecIndex(searchResRecords);
				var jj = searchResRecords.length;
				if (index != undefined) {
					index = shortcuts.down ? ((index + 1) <= (jj - 1) ? (index + 1) : 0) : ((index - 1) >= 0 ? (index - 1) : jj - 1);
				} else {
					index = shortcuts.down ? 0 : jj - 1;
				}
				searchResRecords[index].domItem.className += " s-search-rq-field-carditem-hover";
			}
		} else {
			var value = self.getDataValue().trim();
			if (self.suggestPopup) {
				if (self.suggestSelected && self.suggestSelected.parentNode) {
					self.suggestSelected.click();
				} else {
					value !== '' && self.onInputValidate();
					self.closeSuggest();
				}
			} else {
				if (value !== '') {
					clearTimeout(self._searchTimer);
					clearTimeout(self._changeTimer);
					self._changeTimer = setTimeout(function() {
						self.notifyFieldChange(self.getDataValue());
					}, 200);
				}
			}
		}
		return true;
	},
	dispose: function() {
		this.closeSuggest();
		Field.prototype.dispose.call(this);
	}
});

exports.load = function(layoutSlot) {
	var slot = document.createElement("div");
	slot.className = "s-search-rq";
	layoutSlot.appendChild(slot);

	syra_site.$prototype.$properties.$search = {
		$type: "application/x-string",
		$title: syra_local.searchFieldTitle
	};

	return syra_site.loadNewItem(slot, {
		$bind: "$search",
		$isEditMode: true,
		$class: SearcField,
		$skin: "s-search-rq-field",
		$inplace: true,
		$isTitlePlaceHolder: true
	});
};

function SearchPage() {}

exports.SearchPage = helpers.defineClass(SearchPage, DesktopPage, {
	loadBox: function() {
		this.$prototype = {
			$properties: {
				searchCriteria: {
					$type: "application/x-string"
				}
			}
		};
		this.isMenuBarDisabled = true;
		this.isBookmarkEnabled = false;
		DesktopPage.prototype.loadBox.call(this);
		_facetsBar.load(this, {
			resizeDirection: "right"
		});
		var slot = document.createElement("div");
		slot.className = "s-search-options";
		slot.textContent = syra_local.searchOptionLabel;
		this._modeBtn = syra_menus.addTextButton(syra_local.searchSimilar, "s-search-mode", "onModeClick");
		this._modeBtn.syraItem = this.id;
		slot.appendChild(this._modeBtn);
		this.header.appendChild(slot);

		new FullBox(this, "functions", this.layoutContent.domItem);
		new FullBox(this, "data", this.layoutContent.domItem);
		this.fetch();
	},
	onSelectRecord: function(records, record, isSelected) {
		if (record && isSelected && record.dataset.$url) {
			syra_controller.executeMenu({
				$url: record.dataset.$url
			}, record);
		}
	},
	onModeClick: function() {
		this._isSimilarFetch = !this._isSimilarFetch;
		syra_menus.setButtonTitle(this._modeBtn, this._isSimilarFetch ? syra_local.searchStartingWith : syra_local.searchSimilar);
		this.functionsBox.fetch();
		this.dataBox.fetch();
	},
	ensureDefaultArticle: function() {
		return {
			$title: syra_local.searchPageTitle,
			$layout: {
				$items: []
			}
		};
	},
	onFieldInputEvent: function(event) {
		_facetsBar.onFieldInputEvent(event);
	},
	onItemInOut: function(onEnter, event, target) {
		_facetsBar.onItemInOut(onEnter, event, target);
	},
	applyChange: function(newData) {
		DesktopPage.prototype.applyChange.call(this, newData);
		newData && newData.$searchFacets && _facetsBar.fill(this.dataset.$searchFacets);
	},
	_sendAllRequests: function(options) {
		this.isMultiQuery = true;
		// to handle navigation (prev/next) issues.
		var functionsOptions = helpers.object.clone(options);
		var dataOptions = helpers.object.clone(options);
		// remove params unecessary for appropriate source
		if (this.openerUrlSegments.params.source) {
			if (this.openerUrlSegments.params.source == 'data') {
				delete functionsOptions.params;
			} else {
				delete dataOptions.params;
			}
		}
		this.functionsBox.fetch(functionsOptions);
		this.dataBox.fetch(dataOptions);
		this.isMultiQuery = false;
	},
	fetch: function(options) {
		this.dataset.$search = this.openerUrlSegments.params.q;
		options = options || {};
		if (options.jsonParams) {
			this.dataBox.fetch(options);
		}
		// pager step navigation (pagination)
		else {
			if (options.$location) {
				var $bind = options.$location.$url.indexOf("source=data") >= 0 ? "dataBox" : "functionsBox";
				this[$bind].fetch(options);
			}
			// others (simple pager navigation) (pagination)
			// get corresponding tab information, update content accordingly
			else {
				if (options.field && options.field.$item && options.field.$item.$bind) {
					options.jsonParams = this.jsonParams;
					this[options.field.$item.$bind].fetch(options);
				} else {
					// in order to handle navigation issues (prev/next) issue #2824
					if (this.openerUrlSegments.params.source) {
						options.params = {
							count: this.openerUrlSegments.params.count,
							startIndex: this.openerUrlSegments.params.startIndex
						};
					}
					this._sendAllRequests(options);
				}
			}
		}
	},
	onFacetFilterChange: function(options) {
		this.jsonParams = options.jsonParams;
		this.fetch(options);
	},
	dispose: function() {
		syra_site.disposeObject(this.functionsBox);
		syra_site.disposeObject(this.dataBox);
		_facetsBar.dispose();
		DesktopPage.prototype.dispose.call(this);
	}
});