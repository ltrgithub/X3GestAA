"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Box = require('syracuse-ui/lib/article/box').Box;
var SubMenu = require('./subMenu').SubMenu;

function MenusBox(){

}

exports.MenusBox = helpers.defineClass(MenusBox, Box, {
    drawBox: function(){
        this.$skin = this.$item.$skin || "s-menus";
        this.$$item = $(this._item = document.createElement("nav"));
        this._item.className = this.$skin;
        
        this.$$body = $(this._body = document.createElement("ul"));
        this._body.style.display = "none";
        this._body.className = this.$skin + "-body";
        this._item.appendChild(this._body);
        this.$$container[0].appendChild(this._item);
        this.applyDesignMetaData(this.$item, false);
        if (this.$item.$width) {
            this._item.style.width = this.$item.$width;
        }
        if (this.$item.$css) {
            this._item.className += " " + this.$item.$css;
        }
        this.menuItems = [];
        this.openBox(this.$item.$opened !== false);
    },
    _appendMore: function($$opener){
        var self = this;
        var btn = document.createElement("a");
        btn.className = self.$skin + "-more-btn s-close";
        
        var body = document.createElement("div");
        body.className = self.$skin + "-more-body";
        body.style.display = "none";
        self._item.appendChild(body);
        var $$btn = $(btn);
        $$btn.bind("click", function(){
            if (!self._popupMenus) {
                document.site.toggleClass(btn, "s-close", false);
                body.style.display = "";
                self._popupMenus = self.boxParent.openDialog({
                    $dialogMode: "popup",
                    content: self,
                    $$dialog: $(body),
                    position: {
                        my: "left top",
                        at: "left bottom",
                        of: $$btn
                    },
                    onClose: function(){
                        document.site.toggleClass(btn, "s-close", true);
                        self._popupMenus = null;
                        self.$$item[0].appendChild(body);
                    }
                });
            }
            else {
                self._popupMenus.close();
            }
            return false;
        }).appendTo($$opener).text("more");
        
        var ul = document.createElement("ul");
        ul.className = self.$skin + "-more-nav";
        return $(body.appendChild(ul));
    },
    addMenuItem: function($menu, record, subMenuParent){
        var menuItem;
        if (this.$item.onBeforeAddMenuItem) {
            if ((menuItem = this.$item.onBeforeAddMenuItem($menu)) === false) {
                return null; //cancel used for lazyload
            }
        }
        if (!menuItem) {
            var $$root = this.$$body;
            var $skinItem = this.$skin;
            var $icon = this.$item.$icon;
            if (subMenuParent) {
                $$root = subMenuParent.$$group;
                if (subMenuParent.$subMenus) {
                    $skinItem = subMenuParent.$subMenus.$skin || $skinItem;
                    $icon = subMenuParent.$subMenus.$icon || $icon;
                }
            }
            if (this.$moreLimit < ++this.menuItemsCount) {
                if (!this.$$moreRoot) {
                    var dom = document.createElement("li");
                    dom.className = $skinItem + "-li";
                    this.$$moreRoot = this._appendMore($(dom).appendTo(this.$$body));
                }
                $$root = this.$$moreRoot;
                $skinItem += "-more";
            }
            var menuItem = this.page.createNewItem({
                $bind: $menu.$bind,
                $skin: $skinItem + "-link",
                $category: $menu.$category || "link",
                $icon: $icon
            }, this);
            menuItem.liParent = document.createElement("li");
            menuItem.liParent.className = $skinItem + "-li";
            if (menuItem.$item.$css) {
                menuItem.liParent.className += (" " + (menuItem.$item.$css));
            }
            menuItem.$$container = $($$root[0].appendChild(menuItem.liParent));
        }
        menuItem.loadBox(record);
        menuItem.loaded = true;
        menuItem.subMenuParent = subMenuParent;
        if (!menuItem.$isSetMenuOn) {
            menuItem.setMenu($menu, record);
        }
        this.menuItems.push(menuItem);
        return menuItem;
    },
    clearMenuItems: function(){
        if (this.menuItems) {
            var article = this.getArticle();
            if (article) {
                for (var ii = 0, jj = this.menuItems.length; ii < jj; ii++) {
                    var menuItem = this.menuItems[ii];
                    if (!menuItem.disposed) {
                        article.removeItem(menuItem);
                    }
                }
                this.menuItems = [];
                document.site.emptyDom(this.$$body[0]);
                this.menuItemsCount = 0;
                this.$$moreRoot = null;
            }
        }
    },
    setMenuItems: function($menus, $isAction){
        var article = this.getArticle();
        var $binds = Object.keys($menus);
        for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
            var $bind = $binds[ii];
            var $menu = $menus[$bind];
            $menu.$bind = $bind;
            $menu.$isAction = $isAction;
            var bounds = article.menuItems[$bind];
            if (bounds) {
                for (var kk = 0, mm = bounds.length; kk < mm; kk++) {
                    bounds[kk].setMenu($menu, null);
                }
            }
        }
    },
    addMenuItems: function($menus, $isAction){
        var $binds = Object.keys($menus);
        for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
            var $bind = $binds[ii];
            var $menu = $menus[$bind];
            $menu.$bind = $bind;
            $menu.$isAction = $isAction;
            this.addMenuItem($menu);
        }
    },
    appendPopup: function(){
        var self = this;
        var btn = document.createElement("a");
        btn.className = self.$skin + "-more-btn s-close";
        var $$btn = $(btn);
        
        var body = document.createElement("div");
        body.className = self.$skin + "-more-body";
        body.style.display = "none";
        self.$$item[0].appendChild(body);
        
        $$btn.bind("click", function(){
            if (!self._popupMenus) {
                document.site.toggleClass(btn, "s-close", false);
                body.style.display = "";
                self._popupMenus = self.boxParent.openDialog({
                    $dialogMode: "popup",
                    content: self,
                    $$dialog: $(body),
                    position: {
                        my: "left top",
                        at: "left bottom",
                        of: $$btn
                    },
                    onClose: function(){
                        document.site.toggleClass(btn, "s-close", true);
                        self._popupMenus = null;
                    }
                });
            }
            else {
                self._popupMenus.close();
            }
            return false;
        }).appendTo($$opener);
    },
    _addSubMenu: function($group, subMenuParent){
        var subMenuItem = new SubMenu();
        subMenuItem.load(this, $group, subMenuParent);
        this.menuItems.push(subMenuItem);
        for (var ii = 0, jj = $group.$items.length; ii < jj; ii++) {
            var $item = $group.$items[ii];
            if ($item.$items) {
                this._addSubMenu($item, subMenuItem);
            }
            else {
                this.addMenuItem($item, null, subMenuItem);
            }
        }
    },
    _renderLayoutContent: function(){
        this.menuItemsCount = 0;
        if (!this.$item.$columnLimit) {
            this.$moreLimit = this.$item.$moreLimit || 200;
        }
        if (this.$item.$menus) {
            for (var ii = 0, jj = this.$item.$menus.length; ii < jj; ii++) {
                var $group = this.$item.$menus[ii];
                for (var kk = 0, mm = $group.$items.length; kk < mm; kk++) {
                    var $item = $group.$items[kk];
                    if ($item.$items) {
                        this._addSubMenu($item);
                    }
                    else {
                        this.addMenuItem($item);
                    }
                }
            }
        }
        if (!this.$item.$isBindDisabled) {
            this.getArticle().bindMenuBox(this);
        }
        else {
            if (this.$item.$menus) {
                if (this.$item.$links) {
                    this.setMenuItems(this.$item.$links);
                }
                if (this.$item.$actions) {
                    this.setMenuItems(this.$item.$actions, true);
                }
            }
            else {
                if (this.$item.$links) {
                    this.addMenuItems(this.$item.$links);
                }
                if (this.$item.$actions) {
                    this.addMenuItems(this.$item.$actions, true);
                }
            }
        }
    },
    
    dispose: function(){
        delete this.contextField;
        this.clearMenuItems();
        this.onMenuClick = null;
        Box.prototype.dispose.call(this);
    }
});
