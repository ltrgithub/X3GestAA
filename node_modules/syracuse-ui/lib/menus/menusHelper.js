"use strict";
var helpers = require('syracuse-core/lib/helpers');
var shortcutInvoker = require("syracuse-ui/lib/events/shortCutInvoker");
exports.click = require('./clickHandlers');

exports.btnWidth = 20;

exports.fieldBtnWidth = {
	"application/x-choice": exports.btnWidth,
	"application/x-date": exports.btnWidth,
	"application/x-time": exports.btnWidth,
	"application/x-reference": exports.btnWidth
};

var _fontIcons = {
	escape: "&#xf100;",
	bookmark_off: "&#xf101;",
	menus: "&#xf102;",
	time: "&#xf103;",
	refresh: "&#xf104;",
	role: "&#xf105;",
	date: "&#xf108;",
	menus_open: "&#xf109;", //108
	endpoint: "&#xf10a;",
	external: "&#xf10b;",
	collapse_row: "&#xf10d;",
	email: "&#xf10e;",
	right_arrow: "&#xf110",
	expand_row: "&#xf112;",
	left_arrow: "&#xf113",
	bookmark_on: "&#xf115;",
	maximize: "&#xf116;",
	expand: "&#xf117;",
	cancel: "&#xf118;",
	close: "&#xf118;",
	$tunnel: "&#xf119;",
	upload: "&#xf11a;",
	remove_separator: "&#xf11b;",
	choice: "&#xf11c;",
	$select: "&#xf11d;",
	$lookup: "&#xf11d;",
	$search: "&#xf11d;",
	$delete: "&#xf11f;",
	phone: "&#xf121;",
	$localize: "&#xf122;",
	local: "&#xf123;",
	add_separator: "&#xf125;",
	$create: "&#xf126;",
	minimize: "&#xf127;",
	design: "&#xf128;",
	$edit: "&#xf128;",
	collapse: "&#xf129;"
};

exports.cssFontIconBtn = " s-fonticon-btn ";
var _cssFontIconMn = " s-fonticon-mn ";

if (document.dir === 'rtl') {
	exports.cssFontIconBtn += " s-rtl-img ";
	_cssFontIconMn += " s-rtl-img ";
}

exports.fontIcons = _fontIcons;

var _pagerSteps = ["$first", "$last", "$next", "$previous"];

function _setTitleIconValue(menu, $title, $iconValue) {
	if ($iconValue != undefined) {
		menu.$iconValue = $iconValue;
	}
	var name = menu.$iconValue || menu.value || menu.$item.$icon.$value;
	if (!name) {
		name = menu.$sourceBind || menu.$item.$bind;
	}
	var fontIcon = syra_menus.fontIcons[name];

	if (menu.$item.$icon && !menu.iconValue) {
		menu.cssTitle = null;
		var cssBtn = _cssFontIconMn + "s-btn-" + ((name[0] == "$") ? name.substr(1) : name);
		if (menu.$item.$icon.$mode == "icon") {
			menu.$item.$noText = true;
			menu.iconValue = menu.domItem;
			menu.cssTitle = fontIcon ? cssBtn : " s-mn-icon";
		} else {
			menu.iconValue = document.createElement("div");
			var iconCss = menu.$skin + "-icon " + (fontIcon ? cssBtn : " s-mn-icon");
			if (menu.$item.$css) {
				iconCss += " " + menu.$item.$css;
			}
			menu.iconValue.className = iconCss;
			menu.cssTitle = " s-mn-mode-icontext";
		}
		menu.cssUpdated = true;
	}
	if (fontIcon) {
		menu.iconValue.innerHTML = fontIcon;
	} else {
		var $path;
		if (syra_site.isTabletDevice && _pagerSteps.indexOf(name) >= 0) {
			$path = "/syracuse-ui/themes/tablet/sage/images/" + (menu.$item.$icon.$path || "");
		} else {
			$path = syra_site.$item.$iconPath + (menu.$item.$icon.$path || "");
		}
		if (name.replace) {
			name = name.replace("$", "");
		}
		menu.iconValue.style.backgroundImage = "url('" + $path + name + ".png')";
	}
	if (menu.iconValue != menu.domItem) {
		menu.domItem.insertBefore(menu.iconValue, menu.domItem.firstChild);
	}
}

exports.setMenuItemTitle = function(menu, $title, $iconValue) {
	menu.$title = $title;
	delete menu.domItem.syraTitle;
	var title = menu.getTitle();
	menu.domItem.title = menu.$description || title;

	if (!menu.$item.$noText && !(menu.$item.$icon && menu.$item.$icon.$mode == "icon")) {
		if (title.indexOf("<em") >= 0) {
			menu.domItem.innerHTML = title.replace(/<em>/g, "<em class='" + menu.$skin + "-em'>");
		} else {
			menu.domItem.textContent = title;
		}
	}
	menu.$item.$icon && _setTitleIconValue(menu, $title, $iconValue);

	if (menu.$description && menu.$item.$isDescriptionVisible) {
		if (!menu._description) {
			menu._description = document.createElement("div");
			menu._description.className = menu.$item.$skinDescription || (menu.$skin + "-desc");
		}
		menu._description.textContent = menu.$description;
		menu.domItem.appendChild(menu._description);
	}
	if (menu.$target == "blank") {
		if (!menu.external) {
			menu.external = exports.addFontIconFlag("", "external");
		}
		menu.domItem.appendChild(menu.external);
	}
};

exports.addTextButton = function(text, css, onClick, shortCutTip, fontIcon) {
	var btn = document.createElement("a");
	btn.className = css;
	btn.setAttribute("href", "#"); //oneed to improve cancel action otherwiese add # to url
	btn.syraOnClick = onClick;
	btn.textContent = btn.title = text;
	btn.syraShortCutTip = shortCutTip;
	btn.syraTip = 1;
	fontIcon && btn.insertBefore(exports.addFontIconFlag(css + "-flag", fontIcon), btn.firstChild);
	return btn;
};

function _setFontIconButton(btn, fontIcon) {
	var icon = _fontIcons[fontIcon];
	if (icon) {
		btn.innerHTML = icon;
		btn.className = btn.syraIconCss + exports.cssFontIconBtn + "s-btn-" + ((fontIcon[0] == "$") ? fontIcon.substr(1) : fontIcon);
		return true;
	}
}

exports.addFontIconText = function(text, css, fontIcon) {
	var item = document.createElement("div");
	item.className = css;
	item.textContent = text;
	item.insertBefore(exports.addFontIconFlag(css + "-flag", fontIcon), item.firstChild);
	return item;
};

exports.addFontIconFlag = function(css, fontIcon) {
	var flag = document.createElement("div");
	flag.syraIconCss = css;
	_setFontIconButton(flag, fontIcon);
	return flag;
};

exports.addIconButton = function(text, css, onClick, shortCutTip, fontIcon) {
	var btn = document.createElement("a");
	btn.syraIconCss = css;
	if (!(fontIcon && _setFontIconButton(btn, fontIcon))) {
		btn.className = css;
	}
	btn.setAttribute("href", "#"); //oneed to improve cancel action otherwiese add # to url
	btn.syraOnClick = onClick;
	btn.syraShortCutTip = shortCutTip;
	btn.title = text;
	btn.syraTip = 2;
	return btn;
};

exports.setButtonTitle = function(btn, text) {
	if (btn.syraTipTitle) {
		btn.syraTipTitle = text;
	} else {
		btn.title = text;
	}
	if (btn.syraTip != 2) {
		btn.textContent = text;
	}
};
exports.updateButtonIcon = function(btn, text, fontIcon) {
	exports.setButtonTitle(btn, text);
	_setFontIconButton(btn, fontIcon);
};

exports.onTipItemInOut = function(onEnter, event, target) {
	if (onEnter) {
		target.syraTipTitle = target.title;
		target.title = "";
		if (target.syraShortCutTip || target.syraTip == 2 || target.clientWidth != target.scrollWidth) {
			syra_site.siteFunctions.toggleTitleTip(target.syraTipTitle, target);
		}
	} else {
		if (target.syraTipTitle) {
			target.title = target.syraTipTitle;
		}
		syra_site.siteFunctions.toggleTitleTip();
	}
};

var _timeoutOnEnter;
exports.onItemInOut = function(onEnter, event, target) {
	if (_timeoutOnEnter) {
		clearTimeout(_timeoutOnEnter);
		_timeoutOnEnter = null;
	}
	if (onEnter) {
		if (target.outOfDate) {
			target.setMenu(null, target.articleParent.dataset, target.outOfDate);
			target.outOfDate = false;
		}
		var show = true,
			disableTip;
		if (target.$item && target.$item.$triggerOnEnter) {
			_timeoutOnEnter = setTimeout(function() {
				target.click();
			}, 1000);
			disableTip = true;
		}
		if (target.domItem) {
			if (target.domItem.syraTitle && target.domItem.syraTitle == target.domItem.title) {
				show = target.$item.$noText || target.domItem.clientWidth != target.domItem.scrollWidth;
			}
			target = target.domItem;
		}
		if (target.title) {
			target.syraTipTitle = target.title;
			target.title = "";
			!disableTip && (show || target.syraShortCutTip) && syra_site.siteFunctions.toggleTitleTip(target.syraTipTitle, target);
		}
	} else {
		target = target.domItem ? target.domItem : target;
		if (target.syraTipTitle) {
			target.title = target.syraTipTitle;
		}
		syra_site.siteFunctions.toggleTitleTip();
	}!target.syraPickerType && syra_site.dom.toggleClass(target, "s-enter", onEnter);
};



var _listMenuBinds = ["$create", "$delete", "$details", "$toggleGraph", "$design", "$cancelSort"];

function _getIcon(field, $bind) {
	if (_listMenuBinds.indexOf($bind) >= 0) {
		return {
			$mode: "iconText",
			$path: field.$iconPath
		};
	}
	if ($bind == "$localize" || $bind == "$tunnel") {
		return {
			$mode: "iconText",
			$path: "field/s-field-"
		};
	}
	return null;
}

function _clearMenus(item) {
	var ids = item.mnPickers && Object.keys(item.mnPickers);
	for (var ii = 0, jj = ids.length; ii < jj; ii++) {
		syra_site.dom.removeChild(item.mnPickers[ids[ii]]);
	}
	var $binds = Object.keys(item.menuItems);
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var $bind = $binds[ii];
		var mn, items = item.menuItems[$bind];
		for (var kk = 0, mm = items.length; kk < mm; kk++) {
			mn = items[kk];
			if (mn.detailitemId) {
				var item = syra_store.get(mn.detailitemId);
				item && item.setDataValue(item.currentValue);
			}
			(mn.layoutParent ? mn.layoutParent : item).removeItem(mn, true);
		}
	}
	exports.initialize(item);
	if (item.menusBox) {
		(item.menusBox.layoutParent ? item.menusBox.layoutParent : item).removeItem(item.menusBox, true);
		if (item.menusBag == item.menusBox) {
			delete item.menusBag;
		}
		delete item.menusBox;
	}
	exports.ensureMenuPicker(item, false);
}



exports.removeMenu = function(article, $bind, removeDom) {
	if (article.menuItems) {
		var menuItems = article.menuItems[$bind];
		if (menuItems) {
			for (var ii = 0, jj = menuItems.length; ii < jj; ii++) {
				article.removeItem(menuItems[ii], removeDom);
			}
			delete article.menuItems[$bind];
		}
	}
	delete article.$menus[$bind];
	delete article.$menusPopup[$bind];
};

exports.addFieldPicker = _addFieldPicker;
exports.addPicker = _addPicker;


function _togglePicker(picker, syraDisplay) {
	if (picker && picker.syraDisplay != syraDisplay) {
		picker.style.display = picker.syraDisplay = syraDisplay;
	}
}


function _addEmbeddedFields(field, $bind, $menu) {
	if (field.isDesktopPage) {
		var $properties = field.$prototype.$properties;
		if ($properties) {
			var $vignette = $properties[$bind];
			if (!$vignette) {
				$vignette = $properties[$bind] = {
					$type: "application/x-vignette",
					$title: $menu.$title,
					$location: helpers.object.clone($menu, true)
				};
			} else {
				syra_site.deltaManager.applyObjectDelta(field.page, $vignette.$location, $menu);
			}
			field.layoutContent.loadChildItem(null, {
				$bind: $bind
			});
			return true;
		}
	}
}


function _applyMenusChange(field, $deltaMenu, $isAction, metaData) {
	var binds = Object.keys($deltaMenu);
	for (var ii = 0, jj = binds.length; ii < jj; ii++) {
		var $bind = binds[ii];
		var $menu = $deltaMenu[$bind];
		var created;
		if ($menu === null) {
			exports.removeMenu(field, $bind);
		} else {
			if ($menu.$target == "embedded") {
				_addEmbeddedFields(field, $bind, $menu);
				continue;
			}
			if (metaData && metaData.$diagnosePanelId) {
				$menu.$sourceBind = $menu.$sourceBind || $bind;
				$bind = metaData.$diagnosePanelId + "-" + $bind;
			}
			var $defined = field.$menus[$bind];
			if ($defined) {
				syra_site.deltaManager.applyObjectDelta(field.page, $defined, $menu);
			} else {
				created = true;
				$menu.$isAction = $isAction;
				if (metaData && metaData.$diagnosePanelId) {
					$menu.$isPopup = false;
					field.loadNewItem(metaData.$diagnosesSlot, {
						$bind: $bind,
						$category: "link",
						$skin: "s-diagnose-link"
					});
				} else {
					$menu.$sourceBind = $menu.$sourceBind || $bind;
					$menu.$bind = field.isField ? (field.id + "-" + $bind) : $bind;
				}
				$defined = field.$menus[$bind] = $menu;
				if (field.isPopupMenuItem && !field.isPopupMenuItem($bind, $menu)) {
					$menu.$isPopup = false;
				} else {
					switch ($bind) {
						case "$first":
						case "$previous":
						case "$next":
						case "$last":
							_onAddPagerStepMenu(field, $bind);
							break;
						case "$edit":
						case "$canceledit":
							if (field.onAddMenuItem) {
								$menu.$title = $menu.$title || syra_local.fieldEdit;
								field.onAddMenuItem($bind, $menu);
								$menu.$isPopup = false;
							} else {
								$menu.$isPopup = true;
							}
							break;
						case "$delete":
							if (field.onAddMenuItem && field.$useDeletePicker) {
								$menu.$title = $menu.$title || syra_local.fieldDelete;
								field.onAddMenuItem($bind, $menu);
								$menu.$isPopup = false;
							} else {
								$menu.$isPopup = true;
							}
							break;
						case "remove_separator":
						case "add_separator":
							field.onAddMenuItem && field.onAddMenuItem($bind, $menu);
							$menu.$isPopup = false;
							break;
						case "$create":
						case "$select":
							$menu.$isPopup = !(field.isList && field.onAddMenuItem($bind, $menu));
							break;
						case "$suggest":
							field._isAutoComplete = true;
							$menu.$isPopup = false;
							if (!field.mnPickers.clear) {
								_addFieldPicker(field, "clear", syra_local.siteSearchClear).style.display = "none";
							}
							break;
						case "$details":
							$menu.$isPopup = !field.isField || field.$isDetailLinkDisabled;
							break;
						case "$localize":
							if (field.$item.$useLocalizePicker) {
								$menu.$isHidden = true;
							}
							if (field.$isEditMode && !field.mnPickers.localize && field.$item.$useLocalizePicker) {
								_addFieldPicker(field, $bind, field.$menus.$localize.$title);
							}
							$menu.$isPopup = true;
							break;
						case "$tunnel":
							$menu.$title = syra_local.fieldTunnel;
							$menu.$isPopup = syra_site.isTabletDevice || (field.$isEditMode && field.$item.$inplace && !field.$item.$isFilterMode);
							if (!$menu.$isPopup && !field.mnPickers.$tunnel && !field.$item.$inplace) {
								_addFieldPicker(field, "$tunnel", syra_local.fieldTunnel, "ESC F9");
								if (!field.$isDisabled && field.$isReadOnly) {
									field.mnPickers.$tunnel.style.display = picker.syraDisplay = "";
								}
							}
							break;
						case "$search":
							!field.mnPickers.$search && _addFieldPicker(field, $bind, syra_local.siteSearchLink);
							$menu.$isPopup = false;
							break;
						case "$lookup":
							field.$isEditMode && !field.mnPickers.$lookup && _addFieldPicker(field, $bind, syra_local.fieldLookup, "ESC L, ESC F12");
							$menu.$isPopup = false;
							break;
						default:
							$menu.$isPopup = true;
							break;
					}
				}

			}
			if ($defined.$isPopup && field.$menusPopup) {
				if ($menu.$isHidden) {
					delete field.$menusPopup[$bind];
				} else {
					field.$menusPopup[$bind] = $defined;
				}
			}
			if (field.menuItems) {
				var bounds = field.menuItems[$bind];
				if (bounds) {
					//if create setMenu is already done
					for (var mm = 0, kk = bounds.length; mm < kk; mm++) {
						bounds[mm].setMenu($menu, field.dataset);
					}
				} else {
					if (field.menusBag && !(field.isDashBoard && $menu.$vignettes && !field.isTOCMenu($menu))) {
						field.menusBag.addMenuItem($menu);
					}
				}
			}
		}
	}
}

exports.initialize = function(item) {
	item.$menus = {};
	item.$menusPopup = {};
	item.menuItems = {};
	item.mnPickers = {};
};

exports.setMenus = function(field, metaData) {
	if (metaData) {
		if (field.variantItem) {
			field = field.variantItem;
		}
		if (field.isChildField) {
			exports.setMenus(field.record, {
				$links: metaData.$links,
				$actions: metaData.$actions
			});
			return;
		}
		if (field.renderIcon) {
			metaData.$links !== undefined && field.renderIcon(metaData);
			return;
		}
		// in order not to show menu menu picker for unit ref field        
		if (field.$item && !field.$item.$isMenusHidden && (!field.$item.$isUnitField || field.$isEditMode)) {
			var $menus = (!field.isList && metaData.$item) || metaData;
			if ($menus.$links !== undefined || $menus.$actions !== undefined) {
				if ($menus.$links === null) {
					_clearMenus(field);
				} else {
					$menus.$links && _applyMenusChange(field, $menus.$links, false, metaData);
					$menus.$actions && _applyMenusChange(field, $menus.$actions, true, metaData);
					if (field.mnPickers && !field.mnPickers.menus && !field.$item.$isFilterMode && !field.$item.$isPickerMenuHidden && field.$menusPopup && Object.keys(field.$menusPopup).length) {
						_addFieldPicker(field, "menus", syra_local.flActions, (field.isField && !field.isList) ? "ESC F4,ESC M" : null);
						if (!field.$isDisabled && field.$isReadOnly) {
							field.mnPickers.menus.style.display = field.mnPickers.menus.syraDisplay = "";
						}
					}
				}
			}
		}
	}
};

exports.showPopup = function(field, picker) {
	if (!field.menusPopup) {
		var $item = {
			$isOwner: true,
			$noText: true,
			$title: syra_local.fieldActions,
			$clientId: field.id + "-menu-picker",
			$skin: "s-mn-popus",
			$itemSkin: "s-mn-link",
			$category: "menus",
			$layout: {
				$items: []
			}
		};
		var article = (field.isDesktopPage || field.isRecordArticle) ? field : field.articleParent;
		field.menusBox = field.page.loadNewItem(null, $item, article);
		field.menusBox.contextField = field;
		var binds = Object.keys(field.$menusPopup);
		//setOrder
		var newBinds = [];
		for (var ii = 0, jj = _listMenuBinds.length; ii < jj; ii++) {
			var found = binds.indexOf(_listMenuBinds[ii]);
			if (found >= 0) {
				binds.splice(found, 1);
				newBinds.push(_listMenuBinds[ii]);
			}
		}
		binds = newBinds.concat(binds);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			var $menu = field.$menusPopup[binds[ii]];
			$menu.$icon = $menu.$icon || _getIcon(field, $menu.$sourceBind);
			var menuItem = field.menusBox.addMenuItem($menu);
			article.$menus[$menu.$bind] = $menu;
			menuItem.setMenu($menu, article.dataset);
		}
		_showPicketOpen(picker, true);
		field.menusPopup = syra_site.dialogManager.openPopup(field, {
			content: field.menusBox,
			slot: field.menusBox.body,
			position: {
				my: "right top",
				at: "right bottom",
				of: $(picker)
			},
			onClose: function() {
				_showPicketOpen(picker, false);
				field.menusBox.unload();
				field.menusBox = field.menusPopup = null;
			}
		});
	} else {
		field.menusPopup.close();
	}
};

exports.applyState = function(field) {
	if (field.mnPickers) {
		var keys = Object.keys(field.mnPickers);
		var display = (field.$isDisabled || field.$isReadOnly) ? "none" : "";
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			switch (keys[ii]) {
				case "$tunnel":
				case "menus":
					_togglePicker(field.mnPickers[keys[ii]], field.$isDisabled ? "none" : "");
					break;
				default:
					_togglePicker(field.mnPickers[keys[ii]], display);
					break;
			}
		}
	}
};
exports.highlight = function(field, on) {
	if (field.mnPickers) {
		var keys = Object.keys(field.mnPickers);
		for (var ii = 0, jj = keys.length; ii < jj; ii++) {
			syra_site.dom.toggleClass(field.mnPickers[keys[ii]], "s-enter", on);
		}
	}
};

exports.ensureMenuPicker = function(field, show) {
	if (field.mnPickers.menus) {
		if (show !== false) {
			show = field.$isEditMode || field.hasValue();
		}
		_togglePicker(field.mnPickers.menus, show ? "" : "none");
	}
};

exports.diagnose = {
	add: function(field, message) {
		if (!field.mnPickers.diagnose && !syra_site.isTabletDevice) {
			field.mnPickers.diagnose = document.createElement("a");
			field.mnPickers.diagnose.className = "s-field-diagnose-flag-" + message.$diagnoses[0].$severity;
			field._dataValue.appendChild(field.mnPickers.diagnose);
		}
	},
	remove: function(field) {
		if (field.mnPickers.diagnose) {
			field.mnPickers.diagnose.parentNode.removeChild(field.mnPickers.diagnose);
			delete field.mnPickers.diagnose;
		}
	}
};


function _showPicketOpen(picker, open) {
	var fontIcon = _fontIcons[picker.syraPickerType];
	if (fontIcon) {
		picker.innerHTML = open ? _fontIcons[picker.syraPickerType + "_open"] : fontIcon;
	} else {
		syra_site.dom.toggleClass(picker, "s-open", open);
	}

}

function _addFieldPicker(field, type, title, shortCutTip) {
	var css = field.$mnPickersCss;
	if (field.$item.$css) {
		css += " " + field.$item.$css;
	}
	var picker = field.mnPickers[type] = _addPicker(type, title, css, shortCutTip);
	if (field.$isDisabled || field.$isReadOnly) {
		picker.style.display = picker.syraDisplay = "none";
	}
	field.onAddMenuPicker && field.onAddMenuPicker(picker);
	return picker;
}


function _addPicker(type, title, css, shortCutTip) {
	var picker = document.createElement("a");
	css += " s-btn-" + ((type[0] == "$") ? type.substr(1) : type);
	var fontIcon = _fontIcons[type];
	if (fontIcon) {
		css += exports.cssFontIconBtn;
		picker.innerHTML = fontIcon;
	}
	picker.className = css;
	picker.syraOnClick = "onPickerClick";
	picker.syrainout = picker.syraIsSyraMenuHandler = true;
	picker.syraPickerType = type;
	picker.syraShortCutTip = shortCutTip;
	picker.syraDisplay = "";
	if (title) {
		picker.title = picker.syraTitle = title;
	}
	if (syra_site.enableTestRobot) {
		picker.setAttribute("data-s-picker2", type);
	}
	return picker;
}

exports.onPickerClick = function(event, picker, field) {
	if (!field.authoringNode && !field.$isDisabled) {
		field.page.externalAdapter.onFieldClickPicker({
			field: field,
			pickerType: picker.syraPickerType,
			doEvent: function(options) {
				switch (picker.syraPickerType) {
					case "escape":
						shortcutInvoker.applyEscape(field, null, event);
						field.focus();
						break;
					case "menus":
						syra_site.siteFunctions.onBeforeClick(field.menusBox, event);
						exports.showPopup(field, picker);
						break;
					case "$lookup":
						if ((field.articleParent && field.articleParent.onLookupClick) ? field.articleParent.onLookupClick(field, field.mnPickers.$lookup) : true) {
							field.focus && field.focus();
							var $lookup = field.$menus.$lookup;
							if (field.isChildFieldRecord) {
								field.articleParent.currentSelectRecords = null;
							}
							syra_site.dialogManager.openLookup(field.boxParent, {
								article: field.articleParent,
								$url: $lookup.$url,
								onSelectRecord: function(selectedRecords) {
									if (!field.$isDisabled && !field.$isReadOnly) {
										if (field.isChildFieldRecord) {
											var record = selectedRecords[Object.keys(selectedRecords)[0]];
											field.articleParent.setDataBind(record.dataset);
											field.page.notifyDataChange(field.articleParent, record.dataset);
										} else {
											var record = selectedRecords[Object.keys(selectedRecords)[0]]; //single selection
											field.setDataValue($lookup.$result ? record.dataset[$lookup.$result] : record.dataset);
											field.focus();
											field.notifyFieldChange(field.currentValue);
										}

									}
								}
							});
						}
						break;
					case "choice":
						field.onChoiceClick(null, field.mnPickers.choice);
						break;
					case "$localize":
						syra_site.localizer.onMenuClick(field, field.$menus.$localize);
						break;
					case "date":
						!field.$isReadOnly && field.onDateTimePickerClick(picker, options);
						break;
					case "time":
						!field.$isReadOnly && field.onDateTimePickerClick(picker, options);
						break;
					case "clear":
						field.onClearClick();
						break;
					case "$search":
						field.onSearchClick();
						break;
					default:
						syra_controller.executeMenu(field.$menus[picker.syraPickerType], field.isRecordArticle ? field : field.articleParent);
						break;

				}
			}
		});
	}
};

function _addMenuItemsToGroup(group, $menus, $isAction) {
	var $binds = Object.keys($menus);
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var $bind = $binds[ii];
		group.addMenuItem({
			$bind: $bind,
			$icon: $menus[$bind].$icon,
			$isAction: $isAction
		});
	}
}

exports.addMenuItemsToGroup = function(article, $menus, groupId) {
	if (groupId) {
		var group = article.idMap[groupId];
		if (group) {
			$menus.$links && _addMenuItemsToGroup(group, $menus.$links);
			$menus.$actions && _addMenuItemsToGroup(group, $menus.$actions, true);
			exports.setMenus(article, $menus);
		}
	}
};

var _pagers = {
	$steps: [{
		$bind: "$first",
		$title: "dskpFirstRecord",
		$shortCut: "ESC SHIFT J",
		$shortCutList: "SHIFT PAGEUP"
	}, {
		$bind: "$previous",
		$title: "dskpPreviousRecord",
		$shortCut: "ESC J",
		$shortCutList: "PAGEUP"
	}, {
		$bind: "$next",
		$title: "dskpNextRecord",
		$shortCut: "ESC K",
		$shortCutList: "PAGEDOWN"
	}, {
		$bind: "$last",
		$title: "dskpLastRecord",
		$shortCut: "ESC SHIFT K",
		$shortCutList: "SHIFT PAGEDOWN"
	}]
};
var _pagerPageFacets = ["$details", "$edit", "$modal2"];

function _onAddPagerStepMenu(field, $bind) {
	if (field.isDesktopPage) {
		if (_pagerPageFacets.indexOf(field.$facet) >= 0) {
			if (!field.pageSteps) {
				var slot = document.createElement("div");
				slot.className = "s-page-pager-slot";
				field.pageSteps = exports.addPagerStepLinks(field, slot);
				field.header.appendChild(slot);
			}
		}
	}
}

exports.addPagerStepLinks = function(parent, slot, article) {
	var steps = {};
	for (var ii = 0, jj = _pagers.$steps.length; ii < jj; ii++) {
		var $step = _pagers.$steps[ii];
		steps[$step.$bind] = parent.page.loadNewItem(slot, {
			$category: "link",
			$skin: (parent.isList ? "s-pager-link-" : "s-page-pager-link-") + $step.$bind.replace("$", ""),
			$shortCutTip: parent.isList ? $step.$shortCutList : $step.$shortCut,
			$ownerId: parent.id,
			$isPreloaded: true,
			$bind: $step.$bind,
			$noText: true,
			$title: syra_local[$step.$title],
		}, article || parent);
	}
	return steps;
};

exports.dispose = function(parent) {
	parent.menusPopup && parent.menusPopup.close();
	parent.mnPickers = parent.menusPopup = parent.$menus = parent.$menusPopup = parent.menuItems = parent.pageSteps = null;
	exports.click.dispose();
};