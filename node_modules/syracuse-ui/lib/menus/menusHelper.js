"use strict";

exports.addTextButton = function(text, css, onClick) {
	var btn = document.createElement("a");
	btn.className = css;
	//btn.setAttribute("href", "#"); //oneed to improve cancel action otherwiese add # to url
	btn.syraOnClick = onClick;
	btn.textContent = btn.title = text;
	btn.syraTip = 1;
	return btn;
};
exports.addIconButton = function(text, css, onClick) {
	var btn = document.createElement("a");
	btn.className = css;
	//btn.setAttribute("href", "#"); //oneed to improve cancel action otherwiese add # to url 
	btn.syraOnClick = onClick;
	btn.title = text;
	btn.syraTip = 2;
	return btn;
};

exports.setButtonTitle = function(btn, text) {
	if (btn.syraTipTitle) {
		btn.syraTipTitle = text;
	} else {
		btn.title = text;
	}
	if (btn.syraTip != 2) {
		btn.textContent = text;
	}
};
exports.onTipItemInOut = function(onEnter, event, target) {
	if (onEnter) {
		target.syraTipTitle = target.title;
		target.title = "";
		if (target.syraTip == 2 || target.clientWidth != target.scrollWidth) {
			syra_site.siteFunctions.toggleTitleTip(target.syraTipTitle, target);
		}
	} else {
		if (target.syraTipTitle) {
			target.title = target.syraTipTitle;
		}
		syra_site.siteFunctions.toggleTitleTip();
	}
};


var _listMenuBinds = ["$create", "$delete", "$details", "$toggleGraph", "$design", "$cancelSort"];

function _getIcon(field, $bind) {
	if (_listMenuBinds.indexOf($bind) >= 0) {
		return {
			$mode: "iconText",
			$path: field.$iconPath
		};
	}
	if ($bind == "$localize" || $bind == "$tunnel") {
		return {
			$mode: "iconText",
			$path: "field/s-field-"
		};
	}
	return null;
}

function _clearMenus(item) {
	var ids = item.mnPickers && Object.keys(item.mnPickers);
	for (var ii = 0, jj = ids.length; ii < jj; ii++) {
		syra_site.dom.removeChild(item.mnPickers[ids[ii]]);
	}
	var $binds = Object.keys(item.menuItems);
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var $bind = $binds[ii];
		var mn, items = item.menuItems[$bind];
		for (var kk = 0, mm = items.length; kk < mm; kk++) {
			mn = items[kk];
			if (mn.detailitemId) {
				var item = syra_map[mn.detailitemId];
				item && item.setDataValue(item.currentValue);
			}
			(mn.layoutParent ? mn.layoutParent : item).removeItem(mn, true);
		}
	}
	exports.initialize(item);
	if (item.menusBox) {
		(item.menusBox.layoutParent ? item.menusBox.layoutParent : item).removeItem(item.menusBox, true);
		if (item.menusBag == item.menusBox) {
			delete item.menusBag;
		}
		delete item.menusBox;
	}
	exports.ensureMenuPicker(item, false);
}


exports.onItemInOut = function(onEnter, event, target) {
	if (onEnter) {
		if (target.outOfDate) {
			target.setMenu(null, target.articleParent.dataset);
			target.outOfDate = false;
		}
		var show = true;
		if (target.domItem) {
			if (target.domItem.syraTitle && target.domItem.syraTitle == target.domItem.title) {
				show = target.$item.$noText || target.domItem.clientWidth != target.domItem.scrollWidth;
			}
			target = target.domItem;
		}
		if (target.title) {
			target.syraTipTitle = target.title;
			target.title = "";
			show && syra_site.siteFunctions.toggleTitleTip(target.syraTipTitle, target);
		}
		target.classList.add("s-enter");
	} else {
		target = target.domItem ? target.domItem : target;
		if (target.syraTipTitle) {
			target.title = target.syraTipTitle;
		}
		syra_site.siteFunctions.toggleTitleTip();
		target.classList && target.classList.remove("s-enter");
	}
};

exports.removeMenu = function(article, $bind, removeDom) {
	if (article.menuItems) {
		var menuItems = article.menuItems[$bind];
		if (menuItems) {
			for (var ii = 0, jj = menuItems.length; ii < jj; ii++) {
				article.removeItem(menuItems[ii], removeDom);
			}
			delete article.menuItems[$bind];
		}
	}
	delete article.$menus[$bind];
};

exports.addPicker = _addPicker;


function _togglePicker(picker, syraDisplay) {
	if (picker && picker.syraDisplay != syraDisplay) {
		picker.style.display = picker.syraDisplay = syraDisplay;
	}
}

function _isPopupMenuItem(field, $bind, $menu) {
	if (field.isPopupMenuItem && !field.isPopupMenuItem($bind, $menu)) {
		return false;
	}
	switch ($bind) {
		case "$edit":
			if (field.onAddMenuItem) {
				$menu.$title = $menu.$title || syra_local.fieldEdit;
				field.onAddMenuItem($bind, $menu);
				return false;
			}
			return true;
		case "$delete":
			if (field.$item.$useDeletePicker) {
				$menu.$title = $menu.$title || syra_local.fieldDelete;
				field.onAddMenuItem($bind, $menu);
				return false;
			}
			return true;
		case "$create":
		case "$select":
		case "addSeparator":
			return !(field.isList && field.onAddMenuItem($bind, $menu));
		case "$suggest":
			field._isAutoComplete = true;
			return false;
		case "$details":
			if (!field.$isDetailLinkDisabled) {
				return false;
			}
			break;
		case "$localize":
			if (field.$item.$useLocalizePicker) {
				$menu.$isHidden = true;
			}
			break;
		case "$tunnel":
			$menu.$title = syra_local.fieldTunnel;
			return field.$item.$inplace && !field.$item.$isFilterMode;
		case "$lookup":
		case "$select":
			return false;
	}
	return true;
}

function _applyMenusChange(field, $deltaMenu, $isAction) {
	var binds = Object.keys($deltaMenu);
	for (var ii = 0, jj = binds.length; ii < jj; ii++) {
		var $bind = binds[ii];
		var $menu = $deltaMenu[$bind];
		if ($menu === null) {
			exports.removeMenu(field, $bind);
		} else {
			var $defined = field.$menus[$bind];
			if ($defined) {
				syra_site.deltaManager.applyObjectDelta(field.page, $defined, $menu);
			} else {
				$menu.$isAction = $isAction;
				$menu.$isPopup = _isPopupMenuItem(field, $bind, $menu);
				$menu.$sourceBind = $menu.$sourceBind || $bind;
				$menu.$bind = field.isField ? (field.id + "-" + $bind) : $bind;
				$defined = field.$menus[$bind] = $menu;
			}
			if ($defined.$isPopup && field.$menusPopup) {
				if ($menu.$isHidden) {
					delete field.$menusPopup[$bind];
				} else {
					field.$menusPopup[$bind] = $defined;
				}
			}
			if (field.menuItems) {
				var bounds = field.menuItems[$bind];
				if (bounds) {
					for (var mm = 0, kk = bounds.length; mm < kk; mm++) {
						bounds[mm].setMenu($menu, field.dataset);
					}
				} else {
					if (field.menusBag && !(field.isDashBoard && $menu.$vignettes && !field.isTOCMenu($menu))) {
						field.menusBag.addMenuItem($menu);
					}
				}
			}
		}
	}
}

exports.initialize = function(item) {
	item.$menus = {};
	item.$menusPopup = {};
	item.menuItems = {};
	item.mnPickers = {};
};

exports.setMenus = function(field, metaData) {
	if (metaData) {
		if (field.variantItem) {
			field = field.variantItem;
		}
		if (field.isChildField) {
			exports.setMenus(field.record, {
				$links: metaData.$links,
				$actions: metaData.$actions
			});
			return;
		}
		if (field.renderIcon) {
			metaData.$links !== undefined && field.renderIcon(metaData);
			return;
		}
		// in order not to show menu menu picker for unit ref field        
		if (!field.$item.$isMenusHidden && (!field.$item.$isUnitField || field.$isEditMode)) {
			var $menus = (!field.isList && metaData.$item) || metaData;
			if ($menus.$links !== undefined || $menus.$actions !== undefined) {
				if ($menus.$links === null) {
					_clearMenus(field);
				} else {
					if ($menus.$links) {
						_applyMenusChange(field, $menus.$links);
						if (field.$isEditMode) {
							if ($menus.$links.$suggest && !field.mnPickers.clear) {
								field._isAutoComplete = true;
								if (!field.mnPickers.clear) {
									_addPicker(field, "clear").style.display = "none";
								}
							}
							if ($menus.$links.$lookup && !field.mnPickers.lookup) {
								if (!field.mnPickers.lookup) {
									_addPicker(field, "lookup", syra_local.fieldLookup);
								}
							}
							if ($menus.$links.$tunnel && !field.mnPickers.tunnel && !field.$item.$inplace) {
								if (!field.mnPickers.tunnel) {
									_addPicker(field, "tunnel", syra_local.fieldTunnel);
									if (!field.$isDisabled && field.$isReadOnly) {
										field.mnPickers.tunnel.style.display = picker.syraDisplay = "";
									}
								}
							}
							if ($menus.$links.$localize && !field.mnPickers.localize && field.$item.$useLocalizePicker) {
								if (!field.mnPickers.localize) {
									_addPicker(field, "localize", field.$menus.$localize.$title);
								}
							}
						}
					}
					$menus.$actions && _applyMenusChange(field, $menus.$actions, true);
					if (field.mnPickers && !field.mnPickers.menus && !field.$item.$isPickerMenuHidden && field.$menusPopup && Object.keys(field.$menusPopup).length) {
						_addPicker(field, "menus", syra_local.flActions);
					}
				}
			}
		}
	}
};

exports.showPopup = function(field, picker) {
	if (!field.menusPopup) {
		var $item = {
			$isOwner: true,
			$noText: true,
			$title: syra_local.fieldActions,
			$clientId: field.id + "-menu-picker",
			$skin: "s-mn-popus",
			$itemSkin: "s-mn-link",
			$category: "menus",
			$layout: {
				$items: []
			}
		};
		var article = field.isRecordArticle ? field : field.articleParent;
		var slot = document.createElement("div");
		field.menusBox = field.page.loadNewItem(slot, $item, article);
		field.menusBox.contextField = field;
		var binds = Object.keys(field.$menusPopup);
		//setOrder
		var newBinds = [];
		for (var ii = 0, jj = _listMenuBinds.length; ii < jj; ii++) {
			var found = binds.indexOf(_listMenuBinds[ii]);
			if (found >= 0) {
				binds.splice(found, 1);
				newBinds.push(_listMenuBinds[ii]);
			}
		}
		binds = newBinds.concat(binds);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			var $menu = field.$menusPopup[binds[ii]];
			$menu.$icon = _getIcon(field, $menu.$sourceBind);
			var menuItem = field.menusBox.addMenuItem($menu);
			article.$menus[$menu.$bind] = $menu;
			menuItem.setMenu($menu, article.dataset);
		}
		syra_site.dom.toggleClass(picker, "s-open", true);
		field.menusPopup = syra_site.dialogManager.openPopup(self, {
			content: field.menusBox,
			slot: slot,
			position: {
				my: "right top",
				at: "right bottom",
				of: $(picker)
			},
			onClose: function() {
				syra_site.dom.toggleClass(picker, "s-open", false);
				field.menusBox.unload();
				field.menusBox = field.menusPopup = null;
			}
		});
	} else {
		field.menusPopup.close();
	}
};

exports.applyState = function(field) {
	var syraDisplay = (field.$isDisabled || field.$isReadOnly) ? "none" : "";
	field.mnPickers.date && _togglePicker(field.mnPickers.date, syraDisplay);
	field.mnPickers.time && _togglePicker(field.mnPickers.time, syraDisplay);
	field.mnPickers.choice && _togglePicker(field.mnPickers.choice, syraDisplay);
	field.mnPickers.lookup && _togglePicker(field.mnPickers.lookup, syraDisplay);
	field.mnPickers.localize && _togglePicker(field.mnPickers.localize, syraDisplay);
	field.mnPickers.menus && _togglePicker(field.mnPickers.menus, syraDisplay);
	if (field.mnPickers.tunnel) {
		if (field.$isReadOnly) {
			syraDisplay = "";
		}
		_togglePicker(field.mnPickers.tunnel, syraDisplay);
	}
};
exports.highlight = function(field, on) {
	var pickers = field.mnPickers;
	if (pickers) {
		pickers.date && syra_site.dom.toggleClass(pickers.date, "s-enter", on);
		pickers.time && syra_site.dom.toggleClass(pickers.time, "s-enter", on);
		pickers.choice && syra_site.dom.toggleClass(pickers.choice, "s-enter", on);
		pickers.lookup && syra_site.dom.toggleClass(pickers.lookup, "s-enter", on);
		pickers.localize && syra_site.dom.toggleClass(pickers.localize, "s-enter", on);
		pickers.menus && syra_site.dom.toggleClass(pickers.menus, "s-enter", on);
	}
};

1;
exports.ensureMenuPicker = function(field, show) {
	if (field.mnPickers.menus) {
		if (show !== false) {
			show = field.$isEditMode || field.hasValue();
		}
		_togglePicker(field.mnPickers.menus, show ? "" : "none");
	}
};

exports.diagnose = {
	add: function(field, message) {
		if (!field.mnPickers.diagnose && !syra_site.isTabletDevice) {
			field.mnPickers.diagnose = document.createElement("a");
			field.mnPickers.diagnose.className = "s-field-diagnose-flag-" + message.$diagnoses[0].$severity;
			if (field.input) {
				field.fieldValue.appendChild(field.mnPickers.diagnose);
			} else {
				field._dataValue.appendChild(field.mnPickers.diagnose);
			}
		}
	},
	remove: function(field) {
		if (field.mnPickers.diagnose) {
			field.mnPickers.diagnose.parentNode.removeChild(field.mnPickers.diagnose);
			delete field.mnPickers.diagnose;
		}
	}
};

function _addPicker(field, type, title) {
	var picker = field.mnPickers[type] = document.createElement("a");
	var css = " s-picker-" + type;
	if (field.$item.$css) {
		css += " " + field.$item.$css;
	}
	picker.className = field.$mnPickersCss + css;
	picker.syraOnClick = "onPickerClick";
	picker.syrainout = picker.syraIsSyraMenuHandler = true;
	picker.syraPickerType = type;
	if (title) {
		picker.title = picker.syraTitle = title;
	}
	if (field.$isDisabled || field.$isReadOnly) {
		picker.style.display = picker.syraDisplay = "none";
	} else {
		picker.syraDisplay = "";
	}
	field.onAddMenuPicker && field.onAddMenuPicker(picker);
	return picker;
}

exports.onPickerClick = function(event, picker, field) {
	if (!field.authoringNode && !field.$isDisabled) {
		field.page.externalAdapter.onFieldClickPicker({
			field: field,
			pickerType: picker.syraPickerType,
			doEvent: function(options) {
				switch (picker.syraPickerType) {
					case "menus":
						syra_site.siteFunctions.onBeforeClick(field.menusBox, event);
						syra_menus.showPopup(field, picker);
						break;
					case "lookup":
						if (field.articleParent.onLookupClick ? field.articleParent.onLookupClick(field, field.mnPickers.lookup) : true) {
							field.focus();
							var $lookup = field.$menus.$lookup;
							syra_site.dialogManager.openLookup(field.boxParent, {
								article: field.articleParent,
								$url: $lookup.$url,
								onSelectRecord: function(selectedRecords) {
									if (!field.$isDisabled && !field.$isReadOnly) {
										var record = selectedRecords[Object.keys(selectedRecords)[0]]; //single selection
										field.setDataValue($lookup.$result ? record.dataset[$lookup.$result] : record.dataset);
										field.focus();
										field.notifyFieldChange(field.currentValue);
									}
								}
							});
						}
						break;
					case "tunnel":
						if (field.mnPickers.tunnel) {
							field.mnPickers.tunnel.click();
						} else {
							field.menusBox && syra_menus.clickMenu(field.articleParent, field.menusBox.id + "-" + "$tunnel");
						}
						break;
					case "choice":
						field.onChoiceClick(null, field.mnPickers.choice);
						break;
					case "localize":
						field.menusBox && syra_menus.clickMenu(field.articleParent, field.menusBox.id + "-" + "$localize");
						break;
					case "date":
						!field.$isReadOnly && field.onDateTimePickerClick(picker, options);
						break;
					case "time":
						!field.$isReadOnly && field.onDateTimePickerClick(picker, options);
						break;
					case "clear":
						field.onClearClick();
						break;
					default:
						syra_controller.executeMenu(field.$menus[picker.syraPickerType], field.isRecordArticle ? field : field.articleParent);
						break;

				}
			}
		});
	}
};

/*list    onAddMenuItem: function($menu){
 switch ($menu.$bind) {
 case "$first":
 case "$previous":
 case "$next":
 case "$last":
 return false;
 }
 return true;
 },*/
exports.addMenuItem = function(article, $menus, groupId) {
	if (groupId) {
		var group = article.idMap[groupId];
		if (group) {
			if ($menus.$links) {
				var $bind, $binds = Object.keys($menus.$links);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					$bind = $binds[ii];
					group.addMenuItem({
						$bind: $bind,
						$icon: $menus.$links[$bind].$icon
					});
				}
			}
			if ($menus.$actions) {
				var $bind, $binds = Object.keys($menus.$actions);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					$bind = $binds[ii];
					group.addMenuItem({
						$bind: $bind,
						$isAction: true
					}, true);
				}
			}
		}
	}
};


exports.clickMenu = function(article, $bind) {
	var menus = article.menuItems[$bind];
	if (menus && menus.length) {
		setTimeout(function() {
			exports.click(menus[0]);
		}, 20);
	}
};



function _onClick(menu, event) {
	var doClick = true;
	if (doClick && menu.contextField) {
		doClick = menu.contextField.onMenuClick ? menu.contextField.onMenuClick(menu, event) : true;
	}
	if (doClick && menu.$item.$ownerId) {
		var owner = syra_map[menu.$item.$ownerId];
		doClick = owner && owner.onMenuClick ? owner.onMenuClick(menu, event) : true;
	}

	if (doClick && menu.boxParent) {
		doClick = menu.boxParent.onMenuClick ? menu.boxParent.onMenuClick(menu, event) : true;
		if (doClick) {
			doClick = menu.articleParent.onMenuClick ? menu.articleParent.onMenuClick(menu, event) : true;
		}
	}

	if (doClick) {
		if (menu.articleParent != menu.page) {
			doClick = menu.page.onMenuClick ? menu.page.onMenuClick(menu, event) : true;
		}
		if (doClick && (menu.onMenuClick ? menu.onMenuClick(event) : true)) {
			syra_controller.executeMenu(menu);
		}
	}
	setTimeout(function() {
		if (menu) {
			var parent = menu.boxParent;
			while (parent && !parent.disposed) {
				if (parent.menusPopup) {
					parent.menusPopup.close();
					break;
				}
				parent = parent.boxParent;
			}
		}
	}, 10);
}

exports.click = function(menu, event) {
	if (!menu.$isDisabled) {
		if (menu.page) {
			if (menu.isNoSyracuseUrl) {
				event.syraRetValue = true;
				return;
			}
			if (menu.page.checkMenuDesignValidaty(menu)) {
				var isValidated = true;
				if (menu.$bind == "$save" || menu.$bind == "$saveAs") {
					isValidated = menu.page.validateFields();
				}
				if (isValidated) {
					var field;
					if (menu.boxParent && menu.boxParent.contextField) {
						//boxParent is menubox of contextMenu
						menu.contextField = field = menu.boxParent.contextField;
						if (menu.contextField && menu.contextField.$item && !menu.$subRecordKey) {
							menu.$subRecordKey = menu.contextField.$item.$bind;
						}
					}
					var page = menu.page.mainPage,
						dialog = syra_site.dialogManager.getTopDialogPage();
					if (dialog && dialog._content && !dialog._content.disposed) {
						page = dialog._content;
					}
					if (!page || page.disposed) {
						page = menu.page;
					}
					if (page && !page.disposed && page.externalAdapter) {
						page.externalAdapter.onMenuItemClick({
							menuItem: menu,
							field: field,
							doEvent: function() {
								_onClick(menu, event);
							}
						});
					}
				}
			}
		} else {
			_onClick(menu, event);
		}
	}
};




exports.dispose = function(item) {
	item.menusPopup && item.menusPopup.close();
	item.mnPickers = item.menusPopup = item.$menus = item.$menusPopup = item.menuItems = null;
};