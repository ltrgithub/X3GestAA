"use strict";
exports.click = require('./clickHandlers');
var _quickEditBuilder = require("syracuse-ui/lib/field/array/gridMode/tools/quickEditBuilder");
var _paging = require("syracuse-ui/lib/field/array/tools/paging");


exports.onItemInOut = function(onEnter, event, target) {
	if (onEnter) {
		if (target.outOfDate) {
			target.setMenu(null, target.articleParent.dataset, target.outOfDate);
			target.outOfDate = false;
		}

		var showAlways;
		if (target.domItem) {
			showAlways = target.domItem.syraTitle && ((target.domItem.title && target.domItem.title != target.domItem.syraTitle) || target.$item.$noText);
			target = target.domItem;
		}
		syra_tip.titleTip.show(target.title, target, !showAlways); // if no show always => check tip visibility
	}
	target = target.domItem ? target.domItem : target;
};



var _listMenuBinds = ["$edit", "$create", "$delete", "$details", "$design"];

exports.pickers = {
	menus: {
		add: function(field) {
			return syra_button.addFieldPicker({
				parent: field,
				pickerId: "menus",
				fontIcon: "menus",
				text: syra_local.flActions,
				shortCutTip: (field.isField && !field.isArrayField) ? syra_shortCuts.tip.contextMenu : null,
				click: this.onClick
			});
		},
		onClick: function() {
			exports.pickers.menus.showPopup({
				field: this.parent,
				picker: this
			});
		},
		show: function(field) {
			if (field.picker_menus) {
				var show = field.$isEditMode || field.hasValue();
				syra_button.hide(field.picker_menus, !show);
				if (!field.picker_menus.link.parentNode && field.onAddMenuPicker) {
					field.onAddMenuPicker(field.picker_menus);
				}
			}
		},
		showPopup: function(options) {
			if (options.field) {
				if (!options.field.menusPopup) {
					var $item = {
						$noText: true,
						$title: syra_local.fieldActions,
						$clientId: options.field.id + "-menu-picker",
						$skin: "s-mn-popup",
						$itemSkin: "s-mn-link",
						$category: "menus",
						$layout: {
							$items: []
						}
					};
					var article = (options.field.isDesktopPage || options.field.isRecordArticle) ? options.field : options.field.articleParent;
					if (options.field.menusBox && article.menuItems) {
						//clear previous popup menus 
						var items = options.field.menusBox.boxChildItems;
						for (var ii = 0, jj = items.length; ii < jj; ii++) {
							delete article.menuItems[items[ii].$bind];
							syra_item.remove(items[ii]);
						}
						syra_item.remove(options.field.menusBox, true, true);
					}
					options.field.menusBox = options.field.page.addItem(null, $item, article);
					options.field.menusBox.contextField = options.field;
					if (options.onMenuClick) {
						options.field.menusBox.onMenuClick = options.onMenuClick;
					}
					var binds = Object.keys(options.field.$menusPopup);
					//setOrder
					var newBinds = [];
					for (var ii = 0, jj = _listMenuBinds.length; ii < jj; ii++) {
						var found = binds.indexOf(_listMenuBinds[ii]);
						if (found >= 0) {
							binds.splice(found, 1);
							newBinds.push(_listMenuBinds[ii]);
						}
					}
					binds = newBinds.concat(binds);
					for (var ii = 0, jj = binds.length; ii < jj; ii++) {
						var $menu = options.field.$menusPopup[binds[ii]];
						if (!$menu.$icon) {
							if (_listMenuBinds.indexOf($menu.$sourceBind) >= 0) {
								$menu.$icon = {
									$mode: "iconText",
									$path: options.field.$iconPath
								};
							}
						}
						var menuItem = exports.group.addMenuItem(options.field.menusBox, $menu);
						article.$menus[$menu.$bind] = $menu;
						menuItem.setMenu($menu, article.dataset);
					}
					exports.menus._disableItems(options.field, options.field.menuItems);
					var picker = options.picker;
					if (picker.pickerId) {
						syra_button.setText(picker, undefined, "menus_open");
						picker = picker.link;
					} else {
						if (picker.className && picker.className.indexOf) {
							syra_dom.toggleClass(picker, "s-open", true);
						}
					}
					syra_quality.openPopupMenu(options.field.menusBox);
					syra_site.activePopupMenu = options.field.menusPopup = syra_over.openPopup(options.field, {
						content: options.field.menusBox,
						slot: options.field.menusBox.body,
						picker: picker,
						$isAutoCloseTimeoutDisabled: true,
						position: {
							my: "right top",
							at: "right bottom",
							of: picker
						},
						close: function() {
							if (options.field.menusPopup == syra_site.activePopupMenu) {
								delete syra_site.activePopupMenu;
							}
							if (picker.pickerId) {
								syra_button.setText(picker, undefined, "menus");
							} else {
								if (picker.className && picker.className.indexOf) {
									//prevent from svg picker
									syra_dom.toggleClass(picker, "s-open", false);
								}
							}
							options.field.menusPopup = null;
						}
					});
				} else {
					options.field.menusPopup.close();
				}
			}
		}
	},
	$localize: {
		add: function(field, $menu) {
			if (field.$item.$useLocalizePicker) {
				$menu.$isHidden = true;
			}
			if (field.$isEditMode && !field.picker_localize && field.$item.$useLocalizePicker) {
				syra_button.addFieldPicker({
					parent: field,
					pickerId: "$localize",
					fontIcon: "localize",
					text: field.$menus.$localize.$title,
					click: this.onClick
				});
			}
			$menu.$isPopup = true;
		},
		onClick: function() {
			syra_localizer.onMenuClick(this.parent, this.parent.$menus.$localize);
		}
	},
	$tunnel: {
		add: function(field, $menu) {
			$menu.$title = syra_local.fieldTunnel;
			$menu.$isPopup = syra_site.isTabletDevice || (field.$isEditMode && field.$item.$inplace && !field.$item.$isFilterMode);
			if (!$menu.$isPopup && !field.picker_$tunnel && !field.$item.$inplace) {
				syra_button.addFieldPicker({
					parent: field,
					pickerId: "$tunnel",
					fontIcon: "tunnel",
					text: syra_local.fieldTunnel,
					shortCutTip: syra_shortCuts.tip.openTunnel,
					click: this.onClick
				});
				if (!field.$isDisabled && field.$isReadOnly) {
					syra_button.hide(field.picker_$tunnel, false);
				}
			}
		},
		onClick: function() {
			var field = this.parent;
			syra_router.executeMenu(field.$menus.$tunnel, field.isRecordArticle ? field : field.articleParent);
		}
	},
	$lookup: {
		add: function(field, $menu) {
			if (field.$isEditMode && !field.picker_$lookup) {
				syra_button.addFieldPicker({
					parent: field,
					pickerId: "$lookup",
					fontIcon: "lookup",
					text: syra_local.fieldLookup,
					shortCutTip: syra_shortCuts.tip.openLookup,
					click: this.onClick
				});
			}
			$menu.$isPopup = false;
		},
		onClick: function() {
			var field = this.parent;
			if ((field.articleParent && field.articleParent.onLookupClick) ? field.articleParent.onLookupClick(field) : true) {
				field.focus && field.focus();
				var $lookup = field.$menus.$lookup;
				if (field.isChildFieldRecord) {
					field.articleParent.currentSelectRecords = null;
				}
				syra_over.openModal(field.boxParent, {
					article: field.articleParent,
					$url: $lookup.$url,
					onSelectRecord: function(selectedRecords) {
						if (!field.$isDisabled && !field.$isReadOnly) {
							if (field.isChildFieldRecord) {
								var record = selectedRecords[Object.keys(selectedRecords)[0]];
								field.articleParent.setValue(record.dataset);
								syra_form.updateDelta(field.articleParent, record.dataset);
							} else {
								var record = selectedRecords[Object.keys(selectedRecords)[0]]; //single selection
								field.setValue($lookup.$result ? record.dataset[$lookup.$result] : record.dataset);
								field.focus();
								syra_form.update(field, field.currentValue);
							}
						}
					}
				});
			}
		}
	}
};
exports.menus = {
	initialize: function(field) {
		field.$menus = {};
		field.$menusPopup = {};
		field.menuItems = {};
	},
	_applyMenusChange: function(field, $deltaMenu, $isAction, metaData) {
		var binds = Object.keys($deltaMenu);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			var $bind = binds[ii];
			var $menu = $deltaMenu[$bind];
			var created;
			if ($menu === null) {
				if (field.menuItems) {
					var menuItems = field.menuItems[$bind];
					if (menuItems) {
						for (var mm = 0, kk = menuItems.length; mm < kk; mm++) {
							syra_item.remove(menuItems[mm]);
						}
						delete field.menuItems[$bind];
					}
				}
				delete field.$menus[$bind];
				delete field.$menusPopup[$bind];
			} else {
				if ($menu.$target == "embedded") {
					syra_fields.embedded.addEmbeddedLink(field, $bind, $menu);
					continue;
				}
				if (metaData && metaData.$diagnosePanelId) {
					$menu.$sourceBind = $menu.$sourceBind || $bind;
					$bind = metaData.$diagnosePanelId + "-" + $bind;
				}
				var $defined = field.$menus[$bind];
				if ($defined) {
					syra_dataset.applyDelta(field.page, $defined, $menu);
				} else {
					created = true;
					$menu.$isAction = $isAction;
					if (metaData && metaData.$diagnosePanelId) {
						$menu.$isPopup = false;
						field.addItem(metaData.$diagnosesSlot, {
							$bind: $bind,
							$category: "link",
							$skin: "s-diagnose-link"
						});
					} else {
						$menu.$sourceBind = $menu.$sourceBind || $bind;
						$menu.$bind = field.isField ? (field.id + "-" + $bind) : $bind;
					}
					$defined = field.$menus[$bind] = $menu;
					if (field.isPopupMenuItem && !field.isPopupMenuItem($bind, $menu)) {
						$menu.$isPopup = false;
					} else {
						switch ($bind) {
							case "$first":
							case "$previous":
							case "$next":
							case "$last":
								field.isDesktopPage && _paging.addPagerLinksToPage(field, $bind);
								break;
							case "$edit":
								if (field.onAddMenuItem) {
									if (field.articleParent.$capability && field.articleParent.$capability.quickedit) {
										_quickEditBuilder.addPicker(field, $menu);
										$menu.$title = syra_local.fieldTunnel;
										$menu.$iconValue = "$tunnel";
										$menu.$isPopup = true;
									} else {
										$menu.$title = $menu.$title || syra_local.fieldEdit;
										field.onAddMenuItem($bind, $menu);
										$menu.$isPopup = false;
									}
								} else {
									$menu.$isPopup = true;
								}
								break;
							case "$canceledit":
								if (field.onAddMenuItem) {
									$menu.$title = $menu.$title || syra_local.fieldEdit;
									field.onAddMenuItem($bind, $menu);
									$menu.$isPopup = false;
								} else {
									$menu.$isPopup = true;
								}
								break;
							case "$delete":
								if (field.onAddMenuItem && field.$useDeletePicker) {
									$menu.$title = $menu.$title || syra_local.fieldDelete;
									field.onAddMenuItem($bind, $menu);
									$menu.$isPopup = false;
								} else {
									$menu.$isPopup = true;
								}
								break;
							case "remove_separator":
							case "add_separator":
								field.onAddMenuItem && field.onAddMenuItem($bind, $menu);
								$menu.$isPopup = false;
								break;
							case "$refresh":
								$menu.$isPopup = !field.page.isVignettePage;
								break;
							case "$create":
							case "$select":
								$menu.$isPopup = !(field.isArrayField && field.onAddMenuItem($bind, $menu));
								break;
							case "$details":
								$menu.$isPopup = !field.isField || field.$isDetailLinkDisabled;
								break;
							default:
								var picker = exports.pickers[$bind];
								if (picker) {
									picker.add(field, $menu);
								} else {
									$menu.$isPopup = true;
								}
								break;
						}
					}

				}
				if ($defined.$isPopup && field.$menusPopup) {
					if ($menu.$isHidden) {
						delete field.$menusPopup[$bind];
					} else {
						field.$menusPopup[$bind] = $defined;
					}
				}
				if (field.menuItems) {
					var bounds = field.menuItems[$bind];
					if (bounds) {
						//if create setMenu is already done
						for (var mm = 0, kk = bounds.length; mm < kk; mm++) {
							bounds[mm].setMenu($menu, field.dataset);
						}
					} else {
						exports.group.addMenuItem(field.menusBag, $menu);
					}
				}
			}
		}
	},

	applyChange: function(field, metaData) {
		if (metaData) {
			if (field.variantItem) {
				field = field.variantItem;
			}
			if (field.isChildField) {
				this.applyChange(field.record, {
					$links: metaData.$links,
					$actions: metaData.$actions
				});
				return;
			}
			if (field.renderIcon) {
				metaData.$links !== undefined && field.renderIcon(metaData);
				return;
			}
			// in order not to show menu menu picker for unit ref field        
			if (field.$item && !field.$item.$isMenusHidden && (!field.$item.$isUnitField || field.$isEditMode)) {
				var $menus = (!field.isArrayField && metaData.$item) || metaData;
				if ($menus.$links !== undefined || $menus.$actions !== undefined) {
					if ($menus.$links === null) {
						this._clear(field);
					} else {
						$menus.$links && this._applyMenusChange(field, $menus.$links, false, metaData);
						$menus.$actions && this._applyMenusChange(field, $menus.$actions, true, metaData);
						if (!field.disposed && field.$item) {
							//!!check disposed as field can be disposed during apply ( field is page and menu is save, closing dlg)
							if (!field.picker_menus && !field.$item.$isFilterMode && !field.$item.$isPickerMenuHidden && field.$menusPopup && Object.keys(field.$menusPopup).length) {
								exports.pickers.menus.add(field);
								if (!field.$isDisabled && field.$isReadOnly) {
									syra_button.hide(field.picker_menus, false);
								}
							}
						}
					}
				}
			}
		}
	},
	_clear: function(item) {
		if (item.buttons) {
			for (var ii = 0, jj = item.buttons.length; ii < jj; ii++) {
				var btn = item.buttons[ii];
				btn.pickerId && syra_button.remove(btn);
			}
		}
		var $binds = Object.keys(item.menuItems);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var mn, items = item.menuItems[$bind];
			for (var kk = 0, mm = items.length; kk < mm; kk++) {
				mn = items[kk];
				if (mn.detailitemId) {
					var item = syra_item.get(mn.detailitemId);
					item && item.setValue(item.currentValue);
				}
				if (mn.layoutParent) {
					mn.layoutParent.removeItem(mn, true);
				} else {
					syra_item.remove(mn, true);
				}
			}
		}
		this.initialize(item);
		if (item.menusBox) {
			if (item.menusBox.layoutParent) {
				item.menusBox.layoutParent.removeItem(item.menusBox, true);
			} else {
				syra_item.remove(item.menusBox, true);
			}
			if (item.menusBag == item.menusBox) {
				delete item.menusBag;
			}
			delete item.menusBox;
		}
		syra_button.hide(item.picker_menus, true);
	},
	_disableItem: function(menuItem, isDisable) {
		menuItem && menuItem.disable(isDisable);
	},
	_disableItems: function(article, menuItems) {
		if (menuItems) {
			var isDisable = article.isPickersDisabled = article.$isReadOnly || article.$isDisabled;
			menuItems.$quickEdit && this._disableItem(menuItems.$quickEdit[0], isDisable);
			menuItems.$edit && this._disableItem(menuItems.$edit[0], isDisable);
			menuItems.$delete && this._disableItem(menuItems.$delete[0], isDisable);
			menuItems.$create && this._disableItem(menuItems.$create[0], isDisable);
		}
	}
};

exports.group = {
	//listMenuItem
	getMenuItems: function(group) {
		var items = [];
		for (var ii = 0; ii < group.boxChildItems.length; ii++) {
			if (group.boxChildItems[ii].$sourceBind != "$lazyload") { //(???)
				items.push(group.boxChildItems[ii]);
			}
		}
		return items;
	},
	_loadMenuItem: function(group, $menuItem, slot) {
		$menuItem.$category = "link";
		switch ($menuItem.$skin) {
			case "s-page-menus-link":
				$menuItem.$skin = "s-mn-main-link";
				break;
		}

		if (!$menuItem.$ownerId && group.$item.$ownerId) {
			$menuItem.$ownerId = group.$item.$ownerId;
		}
		if (!$menuItem.$skin) {
			if (group.$item.$isPopupContent) {
				$menuItem.$skin = "s-mn-link";
			} else {
				$menuItem.$skin = group.$item.$itemSkin || (group.$skin + "-link");
			}
		}
		if (group.$item.$itemIcon) {
			if ($menuItem.$icon === undefined) {
				$menuItem.$icon = {};
			}
			if (!$menuItem.$icon.$mode) {
				$menuItem.$icon.$mode = group.$item.$itemIcon.$mode;
			}
			if (!$menuItem.$icon.$path) {
				$menuItem.$icon.$path = group.$item.$itemIcon.$path;
			}
		}
		return group.page.addItem(slot, $menuItem, group);
	},
	addMenuItem: function(group, $menu) {
		if (group) {
			var $item = group.$childMenus[$menu.$bind];
			if (!$item) {
				group.$childMenus[$menu.$bind] = $item = {
					$bind: $menu.$bind,
					$isAction: $menu.$isAction,
					$icon: $menu.$icon
				};
			}
			return this._loadMenuItem(group, $item, group.body, group);
		}
	},
	onBoxToggle: function(group) {
		if (group.$item) {
			var page = group.page;
			if (page.menuBar && !page.isVignettePage) {
				if (page.isInMenuBar(group) && !group.$item.$isPopupContent) {
					var pref = syra_preference.page.get(page, "$menuBarGroup") || {};
					pref[group.id] = group.$opened;
					syra_preference.page.save(page, "$menuBarGroup", pref);
				}
			}
			group.openBox(group.$opened);
			if (group.$item.$isPopupContent) {
				if (!group.menusPopup) {
					group.body.className = "s-mn-popup-body";
					group.menusPopup = syra_over.openPopup(group, {
						content: group,
						slot: group.body,
						position: {
							my: "right top",
							at: "right bottom",
							of: group.domTitle
						},
						close: function() {
							group.domTitle && syra_dom.toggleClass(group.domTitle, "s-close", true);
							group.$opened = false;
							group.menusPopup = null;
						}
					});
				} else {
					group.menusPopup.close();
				}
			}
		}
	},
	renderLayoutContent: function(group, $layout, slot) {
		if (!$layout) {
			//init
			group.childItems = [];
			$layout = group.$item.$layout;
			slot = group.body;
		}
		var cssRow, width;
		var newItem;
		for (var ii = 0, jj = $layout.$items.length; ii < jj; ii++) {
			var $child = $layout.$items[ii];
			newItem = null;
			if ($child.$bind) {
				if (!$child.$category || $child.$category == "link") {
					group.childItems.push(newItem = this._loadMenuItem(group, $child, slot));
				}
			} else {
				if ($child.$layout || $child.$category == "menus") {
					$child.$category = "menus";
					if ($child.$skin === undefined) {
						$child.$skin = group.$skin;
					}
					if (group.$item.$itemSkin && $child.$itemSkin === undefined) {
						$child.$itemSkin = group.$item.$itemSkin;
					}
					if (group.$item.$isBoxCollapsable && $child.$isBoxCollapsable === undefined) {
						$child.$isBoxCollapsable = group.$item.$isBoxCollapsable;
					}
					group.childItems.push(newItem = group.page.addItem(slot, $child, group));
				} else
				if ($child.$layoutType) {
					newItem = document.createElement("div");
					group.renderLayoutContent($child, newItem);
					slot.appendChild(newItem);
				}
			}
			if (cssRow && newItem) {
				newItem = newItem.domItem || newItem;
				syra_dom.toggleClass(newItem, cssRow, true);
				if (width) {
					newItem.style.width = width;
				}
			}
		}
	},
	applyShortCut: function(group, shortcuts, event) {
		var current, items;
		if (shortcuts.enter && group._$selectedListIndex != undefined) {
			var menuItem = this.getMenuItems(group)[group._$selectedListIndex];
			if (menuItem) {
				menuItem.domItem.click();
				return true;
			}
		}
		if (shortcuts.up || shortcuts.down) {
			current = (group._$selectedListIndex != undefined) ? group._$selectedListIndex : -1;
			items = this.getMenuItems(group);
			if (shortcuts.down) {
				current++;
				if (current >= items.length) {
					current = 0;
				}
			} else {
				current--;
				if (current < 0) {
					current = items.length - 1;
				}
			}
			group._$selectedListIndex = Math.max(current, 0);
			for (var ii = 0, jj = items.length; ii < jj; ii++) {
				var menuItem = items[ii];
				if (menuItem.domItem) {
					syra_dom.toggleClass(menuItem.domItem, "s-selected", ii == menuGroup._$selectedListIndex);
				}
			}
			event.preventDefault();
			event.stopPropagation();
			return true;
		}
		return false;
	}
};

exports.applyFieldState = function(field) {
	if (field.buttons) {
		for (var ii = 0, jj = field.buttons.length; ii < jj; ii++) {
			var btn = field.buttons[ii];
			if (btn.pickerId) {
				if (btn.pickerId == "$tunnel" || btn.pickerId == "menus") {
					syra_button.hide(btn, field.$isDisabled);
				} else {
					syra_button.hide(btn, field.$isDisabled || field.$isReadOnly);
				}
			}
		}
	}
	exports.menus._disableItems(field, field.menuItems);
};

exports.dispose = function(parent) {
	parent.menusPopup && parent.menusPopup.close();
	parent.menusPopup = parent.$menus = parent.$menusPopup = parent.menuItems = parent.pageSteps = null;
	exports.click.dispose(parent);
};