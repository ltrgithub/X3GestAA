"use strict";
exports.click = require('./clickHandlers');
var _quickEditBuilder = require("syracuse-ui/lib/field/array/gridMode/tools/quickEditBuilder");
var _paging = require("syracuse-ui/lib/field/array/tools/paging");

function _clear(item) {
	if (item.buttons) {
		for (var ii = 0, jj = item.buttons.length; ii < jj; ii++) {
			var btn = item.buttons[ii];
			btn.pickerId && syra_button.remove(btn);
		}
	}
	var $binds = Object.keys(item.menuItems);
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var $bind = $binds[ii];
		var mn, items = item.menuItems[$bind];
		for (var kk = 0, mm = items.length; kk < mm; kk++) {
			mn = items[kk];
			if (mn.detailitemId) {
				var item = syra_item.get(mn.detailitemId);
				item && item.setValue(item.currentValue);
			}
			if (mn.layoutParent) {
				mn.layoutParent.removeItem(mn, true);
			} else {
				syra_item.remove(mn, true);
			}
		}
	}
	exports.initializeScope(item);
	if (item.menusBox) {
		if (item.menusBox.layoutParent) {
			item.menusBox.layoutParent.removeItem(item.menusBox, true);
		} else {
			syra_item.remove(item.menusBox, true);
		}
		if (item.menusBag == item.menusBox) {
			delete item.menusBag;
		}
		delete item.menusBox;
	}
	syra_button.hide(item.picker_menus, true);
}

function _applyMenusChange(field, $deltaMenu, $isAction, metaData) {
	var binds = Object.keys($deltaMenu);
	for (var ii = 0, jj = binds.length; ii < jj; ii++) {
		var $bind = binds[ii];
		var $menu = $deltaMenu[$bind];
		var created;
		if ($menu === null) {
			if (field.menuItems) {
				var menuItems = field.menuItems[$bind];
				if (menuItems) {
					for (var mm = 0, kk = menuItems.length; mm < kk; mm++) {
						syra_item.remove(menuItems[mm]);
					}
					delete field.menuItems[$bind];
				}
			}
			delete field.$menus[$bind];
			delete field.$menusPopup[$bind];
		} else {
			if ($menu.$target == "embedded") {
				syra_fields.embedded.addEmbeddedLink(field, $bind, $menu);
				continue;
			}
			if (metaData && metaData.$diagnosePanelId) {
				$menu.$sourceBind = $menu.$sourceBind || $bind;
				$bind = metaData.$diagnosePanelId + "-" + $bind;
			}
			var $defined = field.$menus[$bind];
			if ($defined) {
				syra_dataset.applyDelta(field.page, $defined, $menu);
			} else {
				created = true;
				$menu.$isAction = $isAction;
				if (metaData && metaData.$diagnosePanelId) {
					$menu.$isPopup = false;
					field.addItem(metaData.$diagnosesSlot, {
						$bind: $bind,
						$category: "link",
						$skin: "s-diagnose-link"
					});
				} else {
					$menu.$sourceBind = $menu.$sourceBind || $bind;
					$menu.$bind = field.isField ? (field.id + "-" + $bind) : $bind;
				}
				$defined = field.$menus[$bind] = $menu;
				if (field.isPopupMenuItem && !field.isPopupMenuItem($bind, $menu)) {
					$menu.$isPopup = false;
				} else {
					switch ($bind) {
						case "$first":
						case "$previous":
						case "$next":
						case "$last":
							field.isDesktopPage && _paging.addPagerLinksToPage(field, $bind);
							break;
						case "$edit":
							if (field.onAddMenuItem) {
								if (field.articleParent.$capability && field.articleParent.$capability.quickedit) {
									_quickEditBuilder.addPicker(field, $menu);
									$menu.$title = syra_local.fieldTunnel;
									$menu.$iconValue = "$tunnel";
									$menu.$isPopup = true;
								} else {
									$menu.$title = $menu.$title || syra_local.fieldEdit;
									field.onAddMenuItem($bind, $menu);
									$menu.$isPopup = false;
								}
							} else {
								$menu.$isPopup = true;
							}
							break;
						case "$canceledit":
							if (field.onAddMenuItem) {
								$menu.$title = $menu.$title || syra_local.fieldEdit;
								field.onAddMenuItem($bind, $menu);
								$menu.$isPopup = false;
							} else {
								$menu.$isPopup = true;
							}
							break;
						case "$delete":
							if (field.onAddMenuItem && field.$useDeletePicker) {
								$menu.$title = $menu.$title || syra_local.fieldDelete;
								field.onAddMenuItem($bind, $menu);
								$menu.$isPopup = false;
							} else {
								$menu.$isPopup = true;
							}
							break;
						case "remove_separator":
						case "add_separator":
							field.onAddMenuItem && field.onAddMenuItem($bind, $menu);
							$menu.$isPopup = false;
							break;
						case "$refresh":
							$menu.$isPopup = !field.page.isVignettePage;
							break;
						case "$create":
						case "$select":
							$menu.$isPopup = !(field.isArrayField && field.onAddMenuItem($bind, $menu));
							break;
						case "$details":
							$menu.$isPopup = !field.isField || field.$isDetailLinkDisabled;
							break;
						default:
							var picker = syra_picker[$bind];
							if (picker) {
								picker.add(field, $menu);
							} else {
								$menu.$isPopup = true;
							}
							break;
					}
				}

			}
			if ($defined.$isPopup && field.$menusPopup) {
				if ($menu.$isHidden) {
					delete field.$menusPopup[$bind];
				} else {
					field.$menusPopup[$bind] = $defined;
				}
			}
			if (field.menuItems) {
				var bounds = field.menuItems[$bind];
				if (bounds) {
					//if create setMenu is already done
					for (var mm = 0, kk = bounds.length; mm < kk; mm++) {
						bounds[mm].setMenu($menu, field.dataset);
					}
				} else {
					field.menusBag && field.menusBag.addMenuItem($menu);
				}
			}
		}
	}
}


exports.initializeScope = function(scope) {
	scope.$menus = {};
	scope.$menusPopup = {};
	scope.menuItems = {};
};

exports.applyChange = function(field, metaData) {
	if (metaData) {
		if (field.variantItem) {
			field = field.variantItem;
		}
		if (field.isChildField) {
			exports.applyChange(field.record, {
				$links: metaData.$links,
				$actions: metaData.$actions
			});
			return;
		}
		if (field.renderIcon) {
			metaData.$links !== undefined && field.renderIcon(metaData);
			return;
		}
		// in order not to show menu menu picker for unit ref field        
		if (field.$item && !field.$item.$isMenusHidden && (!field.$item.$isUnitField || field.$isEditMode)) {
			var $menus = (!field.isArrayField && metaData.$item) || metaData;
			if ($menus.$links !== undefined || $menus.$actions !== undefined) {
				if ($menus.$links === null) {
					_clear(field);
				} else {
					$menus.$links && _applyMenusChange(field, $menus.$links, false, metaData);
					$menus.$actions && _applyMenusChange(field, $menus.$actions, true, metaData);
					if (!field.disposed && field.$item) {
						//!!check disposed as field can be disposed during apply ( field is page and menu is save, closing dlg)
						if (!field.picker_menus && !field.$item.$isFilterMode && !field.$item.$isPickerMenuHidden && field.$menusPopup && Object.keys(field.$menusPopup).length) {
							syra_picker.menus.add(field);
							if (!field.$isDisabled && field.$isReadOnly) {
								syra_button.hide(field.picker_menus, false);
							}
						}
					}
				}
			}
		}
	}
};


function _disableItem(menuItem, isDisable) {
	menuItem && menuItem.disable(isDisable);
}

exports.disableItems = function(article, menuItems) {
	if (menuItems) {
		var isDisable = article.isPickersDisabled = article.$isReadOnly || article.$isDisabled;
		menuItems.$quickEdit && _disableItem(menuItems.$quickEdit[0], isDisable);
		menuItems.$edit && _disableItem(menuItems.$edit[0], isDisable);
		menuItems.$delete && _disableItem(menuItems.$delete[0], isDisable);
		menuItems.$create && _disableItem(menuItems.$create[0], isDisable);
	}
};

exports.applyFieldState = function(field) {
	if (field.buttons) {
		for (var ii = 0, jj = field.buttons.length; ii < jj; ii++) {
			var btn = field.buttons[ii];
			if (btn.pickerId) {
				if (btn.pickerId == "$tunnel" || btn.pickerId == "menus") {
					syra_button.hide(btn, field.$isDisabled);
				} else {
					syra_button.hide(btn, field.$isDisabled || field.$isReadOnly);
				}
			}
		}
	}
	exports.disableItems(field, field.menuItems);
};

exports.disposeScope = function(scope) {
	scope.menusPopup && scope.menusPopup.close();
	exports.click.dispose(scope);
};