"use strict";
var helpers = require('syracuse-core/lib/helpers');
var _embeddedHelper = require('syracuse-ui/lib/field/helpers/embeddedHelper');
exports.click = require('./clickHandlers');
var _paging = require("syracuse-ui/lib/field/array/tools/paging");

exports.btnWidth = 20;

exports.getDocumentIcon = function(mediaType) {
	mediaType = mediaType.toLowerCase();
	if (mediaType.indexOf("image") >= 0) {
		return "image";
	}
	if (mediaType.indexOf("pdf") >= 0) {
		return "pdf";
	}
	if (mediaType.indexOf("excel") >= 0 || mediaType.indexOf("officedocument.spreadsheet") >= 0) {
		return "excel";
	}
	if (mediaType.indexOf("mailmerge") >= 0) {
		return "mailmerge";
	}
	if (mediaType.indexOf("word") >= 0) {
		return "msword";
	}
	if (mediaType.indexOf("ms-powerpoint") >= 0 || mediaType.indexOf("officedocument.presentationml") >= 0 || mediaType.indexOf("ppt") >= 0) {
		return "powerpoint";
	}
	if (mediaType.indexOf("xml") >= 0) {
		return "xml";
	}
	if (mediaType.indexOf("html") >= 0) {
		return "html";
	}
	if (mediaType.indexOf("json") >= 0) {
		return "json";
	}
	if (mediaType.indexOf("text") >= 0) {
		return "text";
	}
	mediaType = mediaType.replace("application/", "");
	return (mediaType.indexOf("image") >= 0) ? "image" : mediaType.replace("/", "-");
};

var _fontIcons = {
	clear_filter: "&#xf142;",
	filter_empty: "&#xf100;",
	details: "&#xf101;",
	escape: "&#xf103;",
	bookmark_off: "&#xf104;",
	menus: "&#xf105;",
	previous: "&#xf106;",
	info: "&#xf107;",
	filter_gt: "&#xf109;",
	field_time: "&#xf10a;",
	time: "&#xf10a;",
	select: "&#xf102;",
	field_choice: "&#xf10b;",
	refresh: "&#xf10d;",
	resume: "&#xf10e;",
	next: "&#xf10e;",
	role: "&#xf110;",
	checkbox_off: "&#xf111;",
	help: "&#xf11e;",
	checkbox_on: "&#xf113;",
	field_boolean: "&#xf113;",
	field_datetime: "&#xf114;",
	field_date: "&#xf114;",
	date: "&#xf114;",
	menus_open: "&#xf115;",
	endpoint: "&#xf116;",
	theme: "&#xf117;",
	show_advanced: "&#xf118;",
	external: "&#xf11a;",
	radio_on: "&#xf11b;",
	collapse_row: "&#xf11c;",
	email: "&#xf11f;",
	hide_advanced: "&#xf122;",
	field_number: "&#xf123;",
	node_expanded: "&#xf125;",
	node_collapsed: "&#xf127;",
	right_arrow: "&#xf127;",
	next_step: "&#xf127;",
	radio_off: "&#xf128;",
	expand_row: "&#xf129;",
	left_arrow: "&#xf12d;",
	prev_step: "&#xf12d;",
	quickEdit: "&#xf12e;",
	field_graph: "&#xf12f;",
	bookmark_on: "&#xf130;",
	maximize: "&#xf131;",
	expand: "&#xf132;",
	reload_next: "&#xf133;",
	settings: "&#xf134;",
	design: "&#xf134;",
	abort: "&#xf135;",
	cancel: "&#xf135;",
	close: "&#xf135;",
	boolean_off: "&#xf135;",
	tunnel: "&#xf137;",
	diagnose: "&#xf139;",
	last_step: "&#xf13b;",
	download: "&#xf13c;",
	upload: "&#xf13c;",
	first_step: "&#xf13d;",
	field_image: "&#xf13e;",
	remove_separator: "&#xf13f;",
	reload_back: "&#xf141;",
	filter_flag: "&#xf142;",
	filter_none: "&#xf142;",
	field_text: "&#xf143;",
	choice: "&#xf144;",
	lookup: "&#xf145;",
	search: "&#xf145;",
	first: "&#xf146;",
	"delete": "&#xf147;",
	last: "&#xf148;",
	query: "&#xf14a",
	field_array: "&#xf14a",
	phone: "&#xf14b;",
	localize: "&#xf14c;",
	unsort: "&#xf14d;",
	locale: "&#xf14e;",
	save: "&#xf14f;",
	boolean_on: "&#xf14f;",
	suspend: "&#xf151;",
	add_separator: "&#xf151;",
	mandatory: "&#xf152;",
	field_string: "&#xf153;",
	create: "&#xf157;",
	minimize: "&#xf159;",
	edit: "&#xf15a;",
	collapse: "&#xf15b;",
	filter_like: "&#xf119;",
	filter_like_s: "&#xf120;",
	filter_between: "&#xf121;",
	filter_ge: "&#xf12b;",
	filter_lt: "&#xf138;",
	filter_notempty: "&#xf140;",
	filter_le: "&#xf156;",
	filter_eq: "&#xf13a;",
	filter_ne: "&#xf158;"
};


var _cssFontIconBtn = " s-fonticon-btn ";

if (document.dir === 'rtl') {
	_cssFontIconBtn += " s-rtl-img ";
}

exports.fontIcons = _fontIcons;

function _setTitleIconValue(menu, $title, $iconValue) {
	if ($iconValue != undefined) {
		menu.$iconValue = $iconValue;
	}
	var name = menu.$iconValue || menu.value || menu.$item.$icon.$value;
	if (!name) {
		name = menu.$sourceBind || menu.$item.$bind;
	}
	name = (name[0] == "$") ? name.substr(1) : name;
	var fontIcon = syra_menus.fontIcons[name];

	if (menu.$item.$icon && !menu.iconValue) {
		menu.cssTitle = null;
		var cssBtn = _cssFontIconBtn + "s-btn-" + name;
		if (menu.$item.$icon.$mode == "icon") {
			menu.$item.$noText = true;
			menu.iconValue = menu.domItem;
			menu.cssTitle = fontIcon ? cssBtn : " s-mn-icon";
		} else {
			menu.iconValue = document.createElement("div");
			var iconCss = menu.$skin + "-icon s-mn-icontext" + (fontIcon ? cssBtn : " s-mn-icon");
			if (menu.$item.$css) {
				iconCss += " " + menu.$item.$css;
			}
			menu.iconValue.className = iconCss;
			menu.cssTitle = " s-mn-mode-icontext";
		}
		menu.cssUpdated = true;
	}
	if (fontIcon) {
		menu.iconValue.innerHTML = fontIcon;
	} else {
		var $path = syra_site.$iconPath + (menu.$item.$icon.$path || "");
		menu.iconValue.style.backgroundImage = "url('" + $path + name + ".png')";
	}
	if (menu.iconValue != menu.domItem) {
		menu.domItem.insertBefore(menu.iconValue, menu.domItem.firstChild);
	}
}

exports.setMenuItemTitle = function(menu, $title, $iconValue) {
	menu.$title = ($title || "") + ""; //ensure title is string
	delete menu.domItem.syraTitle;
	var title = menu.getTitle();
	menu.domItem.title = menu.$description || title;

	if (!menu.$item.$noText && !(menu.$item.$icon && menu.$item.$icon.$mode == "icon")) {
		if (title.indexOf("<em") >= 0) {
			menu.domItem.innerHTML = title.replace(/<em>/g, "<em class='" + menu.$skin + "-em'>");
		} else {
			menu.domItem.textContent = title;
		}
	}
	menu.$item.$icon && _setTitleIconValue(menu, $title, $iconValue);

	if (menu.$description && menu.$item.$isDescriptionVisible) {
		if (!menu.descriptionItem) {
			menu.descriptionItem = document.createElement("div");
			menu.descriptionItem.className = menu.$item.$skinDescription || (menu.$skin + "-desc");
		}
		menu.descriptionItem.textContent = menu.$description;
		menu.domItem.appendChild(menu.descriptionItem);
	}
	if (menu.$target == "blank") {
		if (!menu.external) {
			menu.external = _addFontIconFlag("", "external");
		}
		menu.domItem.appendChild(menu.external);
	}
};

var _index = 0;
var _buttons = {};

function _onPickerClick(event) {
	var self = this;
	var field = self.parent;
	if (!field.authoringNode && !field.$isDisabled) {
		if (syra_site.currentQuickEdit &&
			syra_site.currentQuickEdit.needCloseConfirm(field.page, function() {
				self.btnclick(event);
			})) {
			return;
		}
		field.page.externalAdapter.onFieldClickPicker({
			field: field,
			pickerType: self.pickerId,
			doEvent: function(options) {
				self.pickerclick(options);
			}
		});
	}
}

exports.button = {
	getButton: function(id) {
		return _buttons[id];
	},
	addFieldPicker: function(btn) {
		btn.css = btn.parent.$mnPickersCss;
		if (btn.parent.$item.$css) {
			btn.css += " " + btn.parent.$item.$css;
		}
		btn.fontIcon = btn.fontIcon || btn.pickerId;
		btn.isHidden = btn.parent.$isDisabled || btn.parent.$isReadOnly;
		this.add(btn);
		btn.parent.mnPickers.push(btn);
		btn.parent.onAddMenuPicker && btn.parent.onAddMenuPicker(btn);
		return btn;
	},
	addIndicator: function(btn) {
		btn.link = document.createElement("div");
		return this.add(btn);
	},
	add: function(btn) {
		if (btn.pickerId) {
			btn.iconOnly = true;
			btn.pickerclick = btn.btnclick;
			btn.btnclick = _onPickerClick;
			btn.parent["picker_" + btn.pickerId] = btn;
		}
		btn.id = ++_index;
		if (!btn.link) {
			btn.link = document.createElement("a");
			btn.link.setAttribute("href", "#");
		}
		var link = btn.link;
		if (btn.btnclick) {
			link.syraBtnclick = btn.id;
		}
		_buttons[link.syraBtn = btn.id] = btn;
		if (btn.shortCutTip) {
			link.syraShortCutTip = btn.shortCutTip;
		}
		if (btn.text === undefined) {
			btn.text = "";
		}
		if (btn.iconOnly) {
			link.title = btn.text;
			link.syraTip = 2;
			link.syraIconCss = btn.css;
			if (!(btn.fontIcon && _setFontIconButton(link, btn.fontIcon))) {
				link.className = btn.css;
				if (btn.imageName) {
					link.className += " s-mn-icon";
					link.style.backgroundImage = "url('" + syra_site.$iconPath + btn.imageName + "')";
				}
			}
		} else {
			link.className = btn.css;
			link.syraTip = 1;
			link.title = btn.title || btn.text;
			link.textContent = btn.text;
			if (btn.fontIcon || btn.imageName) {
				if (btn.fontIcon) {
					btn.iconflag = _addFontIconFlag(btn.css + "-flag s-mn-icontext", btn.fontIcon), link.firstChild;
				} else {
					btn.iconflag = document.createElement("div");
					btn.iconflag.className = btn.css + "-img s-mn-icontext";
					btn.iconflag.style.backgroundImage = "url('" + syra_site.$iconPath + btn.imageName + "')";
				}
				link.insertBefore(btn.iconflag, link.firstChild);
			}
		}
		btn.isHidden && this.display(btn, false);
		btn.slot && btn.slot.appendChild(link);
		(btn.parent.buttons = btn.parent.buttons || []).push(btn);
		return btn;
	},
	setText: function(btn, text, icon) {
		btn.iconflag && btn.link.removeChild(btn.iconflag);
		if (text != undefined) {
			btn.text = text;
			if (btn.syraTipTitle) {
				btn.syraTipTitle = text;
			} else {
				btn.link.title = text;
			}
			if (!btn.iconOnly) {
				btn.link.textContent = text;
			}
		}
		btn.iconflag && btn.link.insertBefore(btn.iconflag, btn.link.firstChild);
		if (icon) {
			if (btn.imageName) {
				btn.imageName = icon;
				(btn.iconflag || btn.link).style.backgroundImage = "url('" + syra_site.$iconPath + btn.imageName + "')";
			} else {
				_setFontIconButton(btn.iconflag || btn.link, icon);
			}
		}
	},
	display: function(btn, show) {
		if (btn) {
			if (show == btn.isHidden) {
				btn.isHidden = !show;
				syra_site.dom.display(btn.link, show);
			}
		}

	},
	visibility: function(btn, visible) {
		if (btn) {
			btn.link.style.visibility = visible ? "visible" : "hidden";
		}
	},
	disable: function(btn, disabled) {
		btn && syra_site.dom.disableItem(btn.link, btn.$isDisabled = disabled);
	},
	remove: function(btn) {
		if (btn) {
			if (btn.pickerId) {
				delete btn.parent["picker_" + btn.pickerId];
			}
			syra_site.dom.removeChild(btn.link);
			this.dispose(btn);
		}
	},
	onItemInOut: function(syraBtn, on) {
		var btn = _buttons[syraBtn];
		if (btn && !btn.$isDisabled && !btn.parent.$isDisabled) {
			syra_site.dom.toggleClass(btn.link, "s-enter", on);
			if (on) {
				var showAlways = btn.iconOnly;
				syra_site.dialogManager.titleTip.show(btn.link.title, btn.link, !showAlways); // if no show always => check tip visibility
			}
		}
	},
	dispose: function(btn) {
		if (btn) {
			delete _buttons[btn.id];
		}
	}
};

function _setFontIconButton(btn, fontIcon) {
	if (fontIcon[0] == "$") {
		fontIcon = fontIcon.substr(1);
	}
	var icon = _fontIcons[fontIcon];
	if (icon) {
		btn.innerHTML = icon;
		btn.className = btn.syraIconCss + _cssFontIconBtn + "s-btn-" + fontIcon;
		return true;
	}
}

exports.setFontIconButton = _setFontIconButton;

function _addFontIconFlag(css, fontIcon) {
	var flag = document.createElement("div");
	flag.syraIconCss = css;
	_setFontIconButton(flag, fontIcon);
	return flag;
}

exports.onItemInOut = function(onEnter, event, target) {
	if (onEnter) {
		if (target.outOfDate) {
			target.setMenu(null, target.articleParent.dataset, target.outOfDate);
			target.outOfDate = false;
		}

		var showAlways;
		if (target.domItem) {
			showAlways = target.domItem.syraTitle && ((target.domItem.title && target.domItem.title != target.domItem.syraTitle) || target.$item.$noText);
			target = target.domItem;
		}
		syra_site.dialogManager.titleTip.show(target.title, target, !showAlways); // if no show always => check tip visibility
	}
	target = target.domItem ? target.domItem : target;
};



var _listMenuBinds = ["$edit", "$create", "$delete", "$details", "$design"];

function _getIcon(field, $bind) {

	return null;
}

function _clearMenus(item) {
	for (var ii = 0, jj = item.mnPickers.length; ii < jj; ii++) {
		exports.button.remove(item.mnPickers[ii]);
	}
	var $binds = Object.keys(item.menuItems);
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var $bind = $binds[ii];
		var mn, items = item.menuItems[$bind];
		for (var kk = 0, mm = items.length; kk < mm; kk++) {
			mn = items[kk];
			if (mn.detailitemId) {
				var item = syra_store.get(mn.detailitemId);
				item && item.setDataValue(item.currentValue);
			}
			(mn.layoutParent ? mn.layoutParent : item).removeItem(mn, true);
		}
	}
	exports.initialize(item);
	if (item.menusBox) {
		(item.menusBox.layoutParent ? item.menusBox.layoutParent : item).removeItem(item.menusBox, true);
		if (item.menusBag == item.menusBox) {
			delete item.menusBag;
		}
		delete item.menusBox;
	}
	exports.button.display(item.picker_menus, false);
}



exports.removeMenu = function(article, $bind, removeDom) {
	if (article.menuItems) {
		var menuItems = article.menuItems[$bind];
		if (menuItems) {
			for (var ii = 0, jj = menuItems.length; ii < jj; ii++) {
				article.removeItem(menuItems[ii], removeDom);
			}
			delete article.menuItems[$bind];
		}
	}
	delete article.$menus[$bind];
	delete article.$menusPopup[$bind];
};

exports.pickers = {
	menus: {
		add: function(field) {
			return syra_menus.button.addFieldPicker({
				parent: field,
				pickerId: "menus",
				fontIcon: "menus",
				text: syra_local.flActions,
				shortCutTip: (field.isField && !field.isArrayField) ? "ESC F4,ESC M" : null,
				btnclick: this.onClick
			});
		},
		onClick: function() {
			exports.showPopup(this.parent, this);
		}
	},
	$quickEdit: {
		add: function(field, $menu) {
			syra_menus.button.addFieldPicker({
				parent: field,
				pickerId: "$quickEdit",
				fontIcon: "quickEdit",
				text: syra_local.fieldQuickEdit,
				btnclick: this.onClick
			});
		},
		onClick: function() {
			this.parent.list.builder.toggleQuickEdit(this.parent);
		}
	},
	$localize: {
		add: function(field, $menu) {
			if (field.$item.$useLocalizePicker) {
				$menu.$isHidden = true;
			}
			if (field.$isEditMode && !field.picker_localize && field.$item.$useLocalizePicker) {
				syra_menus.button.addFieldPicker({
					parent: field,
					pickerId: "$localize",
					fontIcon: "localize",
					text: field.$menus.$localize.$title,
					btnclick: this.onClick
				});
			}
			$menu.$isPopup = true;
		},
		onClick: function() {
			syra_site.localizer.onMenuClick(this.parent, this.parent.$menus.$localize);
		}
	},
	$tunnel: {
		add: function(field, $menu) {
			$menu.$title = syra_local.fieldTunnel;
			$menu.$isPopup = syra_site.isTabletDevice || (field.$isEditMode && field.$item.$inplace && !field.$item.$isFilterMode);
			if (!$menu.$isPopup && !field.picker_$tunnel && !field.$item.$inplace) {
				syra_menus.button.addFieldPicker({
					parent: field,
					pickerId: "$tunnel",
					fontIcon: "tunnel",
					text: syra_local.fieldTunnel,
					shortCutTip: "ESC F9",
					btnclick: this.onClick
				});
				if (!field.$isDisabled && field.$isReadOnly) {
					exports.button.display(field.picker_$tunnel, true);
				}
			}
		},
		onClick: function() {
			var field = this.parent;
			syra_controller.executeMenu(field.$menus.$tunnel, field.isRecordArticle ? field : field.articleParent);
		}
	},
	$lookup: {
		add: function(field, $menu) {
			if (field.$isEditMode && !field.picker_$lookup) {
				syra_menus.button.addFieldPicker({
					parent: field,
					pickerId: "$lookup",
					fontIcon: "lookup",
					text: syra_local.fieldLookup,
					shortCutTip: "ESC L, ESC F12",
					btnclick: this.onClick
				});
			}
			$menu.$isPopup = false;
		},
		onClick: function() {
			var field = this.parent;
			if ((field.articleParent && field.articleParent.onLookupClick) ? field.articleParent.onLookupClick(field) : true) {
				field.focus && field.focus();
				var $lookup = field.$menus.$lookup;
				if (field.isChildFieldRecord) {
					field.articleParent.currentSelectRecords = null;
				}
				syra_site.dialogManager.openLookup(field.boxParent, {
					article: field.articleParent,
					$url: $lookup.$url,
					onSelectRecord: function(selectedRecords) {
						if (!field.$isDisabled && !field.$isReadOnly) {
							if (field.isChildFieldRecord) {
								var record = selectedRecords[Object.keys(selectedRecords)[0]];
								field.articleParent.setDataBind(record.dataset);
								field.page.notifyDataChange(field.articleParent, record.dataset);
							} else {
								var record = selectedRecords[Object.keys(selectedRecords)[0]]; //single selection
								field.setDataValue($lookup.$result ? record.dataset[$lookup.$result] : record.dataset);
								field.focus();
								syra_workingCopy.notifyFieldChange(field, field.currentValue);
							}
						}
					}
				});
			}
		}
	}
};

function _applyMenusChange(field, $deltaMenu, $isAction, metaData) {
	var binds = Object.keys($deltaMenu);
	for (var ii = 0, jj = binds.length; ii < jj; ii++) {
		var $bind = binds[ii];
		var $menu = $deltaMenu[$bind];
		var created;
		if ($menu === null) {
			exports.removeMenu(field, $bind);
		} else {
			if ($menu.$target == "embedded") {
				_embeddedHelper.addEmbeddedLink(field, $bind, $menu);
				continue;
			}
			if (metaData && metaData.$diagnosePanelId) {
				$menu.$sourceBind = $menu.$sourceBind || $bind;
				$bind = metaData.$diagnosePanelId + "-" + $bind;
			}
			var $defined = field.$menus[$bind];
			if ($defined) {
				syra_site.deltaManager.applyObjectDelta(field.page, $defined, $menu);
			} else {
				created = true;
				$menu.$isAction = $isAction;
				if (metaData && metaData.$diagnosePanelId) {
					$menu.$isPopup = false;
					field.loadNewItem(metaData.$diagnosesSlot, {
						$bind: $bind,
						$category: "link",
						$skin: "s-diagnose-link"
					});
				} else {
					$menu.$sourceBind = $menu.$sourceBind || $bind;
					$menu.$bind = field.isField ? (field.id + "-" + $bind) : $bind;
				}
				$defined = field.$menus[$bind] = $menu;
				if (field.isPopupMenuItem && !field.isPopupMenuItem($bind, $menu)) {
					$menu.$isPopup = false;
				} else {
					switch ($bind) {
						case "$first":
						case "$previous":
						case "$next":
						case "$last":
							field.isDesktopPage && _paging.addPagerLinksToPage(field, $bind);
							break;
						case "$edit":
							if (field.onAddMenuItem) {
								if (field.articleParent.$capability && field.articleParent.$capability.quickedit) {
									exports.pickers.$quickEdit.add(field, $menu);
									$menu.$title = syra_local.fieldTunnel;
									$menu.$iconValue = "$tunnel";
									$menu.$isPopup = true;
								} else {
									$menu.$title = $menu.$title || syra_local.fieldEdit;
									field.onAddMenuItem($bind, $menu);
									$menu.$isPopup = false;
								}
							} else {
								$menu.$isPopup = true;
							}
							break;
						case "$canceledit":
							if (field.onAddMenuItem) {
								$menu.$title = $menu.$title || syra_local.fieldEdit;
								field.onAddMenuItem($bind, $menu);
								$menu.$isPopup = false;
							} else {
								$menu.$isPopup = true;
							}
							break;
						case "$delete":
							if (field.onAddMenuItem && field.$useDeletePicker) {
								$menu.$title = $menu.$title || syra_local.fieldDelete;
								field.onAddMenuItem($bind, $menu);
								$menu.$isPopup = false;
							} else {
								$menu.$isPopup = true;
							}
							break;
						case "remove_separator":
						case "add_separator":
							field.onAddMenuItem && field.onAddMenuItem($bind, $menu);
							$menu.$isPopup = false;
							break;
						case "$create":
						case "$select":
							$menu.$isPopup = !(field.isArrayField && field.onAddMenuItem($bind, $menu));
							break;
						case "$details":
							$menu.$isPopup = !field.isField || field.$isDetailLinkDisabled;
							break;
						default:
							var picker = exports.pickers[$bind];
							if (picker) {
								picker.add(field, $menu);
							} else {
								$menu.$isPopup = true;
							}
							break;
					}
				}

			}
			if ($defined.$isPopup && field.$menusPopup) {
				if ($menu.$isHidden) {
					delete field.$menusPopup[$bind];
				} else {
					field.$menusPopup[$bind] = $defined;
				}
			}
			if (field.menuItems) {
				var bounds = field.menuItems[$bind];
				if (bounds) {
					//if create setMenu is already done
					for (var mm = 0, kk = bounds.length; mm < kk; mm++) {
						bounds[mm].setMenu($menu, field.dataset);
					}
				} else {
					field.menusBag && field.menusBag.addMenuItem($menu);
				}
			}
		}
	}
}

exports.initialize = function(item) {
	item.$menus = {};
	item.$menusPopup = {};
	item.menuItems = {};
	item.mnPickers = [];
};

exports.setMenus = function(field, metaData) {
	if (metaData) {
		if (field.variantItem) {
			field = field.variantItem;
		}
		if (field.isChildField) {
			exports.setMenus(field.record, {
				$links: metaData.$links,
				$actions: metaData.$actions
			});
			return;
		}
		if (field.renderIcon) {
			metaData.$links !== undefined && field.renderIcon(metaData);
			return;
		}
		// in order not to show menu menu picker for unit ref field        
		if (field.$item && !field.$item.$isMenusHidden && (!field.$item.$isUnitField || field.$isEditMode)) {
			var $menus = (!field.isArrayField && metaData.$item) || metaData;
			if ($menus.$links !== undefined || $menus.$actions !== undefined) {
				if ($menus.$links === null) {
					_clearMenus(field);
				} else {
					$menus.$links && _applyMenusChange(field, $menus.$links, false, metaData);
					$menus.$actions && _applyMenusChange(field, $menus.$actions, true, metaData);
					if (field.mnPickers && !field.picker_menus && !field.$item.$isFilterMode && !field.$item.$isPickerMenuHidden && field.$menusPopup && Object.keys(field.$menusPopup).length) {
						exports.pickers.menus.add(field);
						if (!field.$isDisabled && field.$isReadOnly) {
							exports.button.display(field.picker_menus, true);
						}
					}
				}
			}
		}
	}
};

exports.showPopup = function(field, picker, isChart) {
	if (!field.menusPopup) {
		var $item = {
			$noText: true,
			$title: syra_local.fieldActions,
			$clientId: field.id + "-menu-picker",
			$skin: "s-mn-popup",
			$itemSkin: "s-mn-link",
			$category: "menus",
			$layout: {
				$items: []
			}
		};
		var article = (field.isDesktopPage || field.isRecordArticle) ? field : field.articleParent;
		if (field.menusBox && article.menuItems) {
			//clear previous popup menus 
			var items = field.menusBox.boxChildItems;
			for (var ii = 0, jj = items.length; ii < jj; ii++) {
				delete article.menuItems[items[ii].$bind];
				article.removeItem(items[ii]);
			}
			article.removeItem(field.menusBox, true, true);
		}
		field.menusBox = field.page.loadNewItem(null, $item, article);
		field.menusBox.contextField = field;
		var binds = Object.keys(field.$menusPopup);
		//setOrder
		var newBinds = [];
		for (var ii = 0, jj = _listMenuBinds.length; ii < jj; ii++) {
			var found = binds.indexOf(_listMenuBinds[ii]);
			if (found >= 0) {
				binds.splice(found, 1);
				newBinds.push(_listMenuBinds[ii]);
			}
		}
		binds = newBinds.concat(binds);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			var $menu = field.$menusPopup[binds[ii]];
			if (!$menu.$icon) {
				if (_listMenuBinds.indexOf($menu.$sourceBind) >= 0) {
					$menu.$icon = {
						$mode: "iconText",
						$path: field.$iconPath
					};
				}
			}
			var menuItem = field.menusBox.addMenuItem($menu);
			article.$menus[$menu.$bind] = $menu;
			menuItem.setMenu($menu, article.dataset);
		}
		_disableMenuItems(field);
		var btnLink;
		if (isChart) {
			if (picker.className && picker.className.indexOf) {
				//prevent from svg picker
				syra_site.dom.toggleClass(picker, "s-open", true);
			}
			btnLink = picker;
		} else {
			exports.button.setText(picker, undefined, "menus_open");
			btnLink = picker.link;
		}
		syra_site.activePopupMenu = field.menusPopup = syra_site.dialogManager.openPopup(field, {
			content: field.menusBox,
			slot: field.menusBox.body,
			picker: btnLink,
			$isAutoCloseTimeoutDisabled: true,
			position: {
				my: "right top",
				at: "right bottom",
				of: $(btnLink)
			},
			onClose: function() {
				if (field.menusPopup == syra_site.activePopupMenu) {
					delete syra_site.activePopupMenu;
				}
				if (isChart) {
					if (picker.className && picker.className.indexOf) {
						//prevent from svg picker
						syra_site.dom.toggleClass(picker, "s-open", false);
					}
				} else {
					exports.button.setText(picker, undefined, "menus");
				}
				field.menusPopup = null;
			}
		});
	} else {
		field.menusPopup.close();
	}
};

exports.applyArticleState = function(field) {
	var disabled = field.$isReadOnly || field.$isDisabled;
	if (field.isPickersDisabled != disabled) {
		field.isPickersDisabled = disabled;
		exports.button.disable(field.picker_$quickEdit, field.isPickersDisabled);
		exports.button.disable(field.picker_$edit, field.isPickersDisabled);
		if (!field.page.isFusionPage) {
			exports.button.disable(field.picker_$delete, field.isPickersDisabled);
			exports.button.disable(field.picker_$create, field.isPickersDisabled);
		}
		if (field.isSingleRecord) {
			var menuItems = field.menuItems;
			if (menuItems) {
				menuItems.$delete && menuItems.$delete[0] && menuItems.$delete[0].disable(field.isPickersDisabled);
			}
		}
	}
	exports.button.disable(field.picker_menus, field.$isDisabled);
};

function _disableItem(menuItem, isDisable) {
	menuItem && menuItem.disable(isDisable);
}

function _disableMenuItems(article) {
	var menus = article.menuItems;
	if (menus) {
		var isDisable = article.isPickersDisabled = article.$isReadOnly || article.$isDisabled;
		menus.$quickEdit && _disableItem(menus.$quickEdit[0], isDisable);
		menus.$edit && _disableItem(menus.$edit[0], isDisable);
		menus.$delete && _disableItem(menus.$delete[0], isDisable);
		menus.$create && _disableItem(menus.$create[0], isDisable);
	}
}


exports.applyFieldState = function(field) {
	if (field.mnPickers) {
		for (var ii = 0, jj = field.mnPickers.length; ii < jj; ii++) {
			var picker = field.mnPickers[ii];
			if (picker.pickerId) {
				if (picker.pickerId == "$tunnel" || picker.pickerId == "menus") {
					exports.button.display(picker, !field.$isDisabled);
				} else {
					exports.button.display(picker, !field.$isDisabled && !field.$isReadOnly);
				}
			}
		}
	}
	_disableMenuItems(field);
};

exports.highlight = function(field, on) {
	if (field.mnPickers) {
		for (var ii = 0, jj = field.mnPickers.length; ii < jj; ii++) {
			var picker = field.mnPickers[ii];
			picker.link && syra_site.dom.toggleClass(picker.link, "s-enter", on);
		}
	}
};

exports.showMenuPicker = function(field) {
	if (field.picker_menus) {
		var show = field.$isEditMode || field.hasValue();
		exports.button.display(field.picker_menus, show);
		if (!field.picker_menus.link.parentNode && field.onAddMenuPicker) {
			field.onAddMenuPicker(field.picker_menus);
		}
	}
};

function _addMenuItemsToGroup(group, $menus, $isAction) {
	var $binds = Object.keys($menus);
	for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
		var $bind = $binds[ii];
		group.addMenuItem({
			$bind: $bind,
			$icon: $menus[$bind].$icon,
			$isAction: $isAction
		});
	}
}

exports.addMenuItemsToGroup = function(article, $menus, groupId) {
	if (groupId) {
		var group = article.idMap[groupId];
		if (group) {
			$menus.$links && _addMenuItemsToGroup(group, $menus.$links);
			$menus.$actions && _addMenuItemsToGroup(group, $menus.$actions, true);
			exports.setMenus(article, $menus);
		}
	}
};
exports.selectMenuItem = function(menuGroup) {
	var list = syra_menus.listMenuItem(menuGroup);
	for (var ii = 0, jj = list.length; ii < jj; ii++) {
		var menuItem = list[ii];
		if (menuItem.domItem) {
			syra_site.dom.toggleClass(menuItem.domItem, "s-selected", ii == menuGroup._$selectedListIndex);
		}
	}
};
exports.listMenuItem = function(menuGroup) {
	var listMenuItem = [];
	for (var i = 0; i < menuGroup.boxChildItems.length; i++) {
		if (menuGroup.boxChildItems[i].$sourceBind != "$lazyload") { //(???)
			listMenuItem.push(menuGroup.boxChildItems[i]);
		}
	}
	return listMenuItem;
};
exports.dispose = function(parent) {
	parent.menusPopup && parent.menusPopup.close();
	parent.mnPickers = parent.menusPopup = parent.$menus = parent.$menusPopup = parent.menuItems = parent.pageSteps = null;
	exports.click.dispose();
};