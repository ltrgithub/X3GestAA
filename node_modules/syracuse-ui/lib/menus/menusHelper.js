"use strict";

exports.onItemInOut = function(onEnter, event, target) {
	if (onEnter) {
		if (target.syraIsSyraMenuHandler && target.syraTitle) {
			target.title = "";
			syra_site.siteFunctions.showTitleTip(target.syraTitle, target);
		} else {
			if (target.outOfDate) {
				target.setMenu(null, target.articleParent.dataset);
				target.outOfDate = false;
			}
			if (target.titleText && target._label) {
				target.domItem.title = "";
				if (target.$item.$noText || target._label.clientWidth != target._label.scrollWidth) {
					syra_site.siteFunctions.showTitleTip(target.titleText, target.domItem);
				}
			}
		}
	} else {
		if (target.syraIsSyraMenuHandler && target.syraTitle) {
			target.title = target.syraTitle;
		} else {
			if (target.domItem && target.titleText) {
				target.domItem.title = target.titleText;
			}
		}
		syra_site.siteFunctions.showTitleTip();
	}
};

exports.parseTitle = function(box, $title) {
	if ($title && $title.length > 0 && $title[1] == "@") {
		$title = syra_site.expressionMaker.render(box, $title);
	}
	return $title || "";
};


exports.addPicker = _addPicker;

function _getArticle(field) {
	return field.isRecordArticle ? field : field.articleParent;
}

function _togglePicker(picker, syraDisplay) {
	if (picker && picker.syraDisplay != syraDisplay) {
		picker.style.display = picker.syraDisplay = syraDisplay;
	}
}

function _isPopupMenuItem(field, $bind, $link) {
	if (field.isPopupMenuItem && !field.isPopupMenuItem($bind, $link)) {
		return false;
	}
	switch ($bind) {
		case "$edit":
			_addPicker(field, $bind.slice(1), syra_local.fieldEdit).syraBind = $bind;
			return false;
		case "$delete":
			if (field.$item.$useDeletePicker) {
				_addPicker(field, $bind.slice(1), syra_local.fieldDelete).syraBind = $bind;
				return false;
			}
			return true;
		case "$create":
		case "$select":
			if (field.isList) {
				_addPicker(field, $bind.slice(1), exports.parseTitle(field, $link.$title)).syraBind = $bind;
			}
			return !field.isList;
		case "$suggest":
			field._isAutoComplete = true;
			return false;
		case "$details":
			if (!field.$isDetailLinkDisabled) {
				return false;
			}
			break;
		case "$localize":
			if (field.$item.$useLocalizePicker) {
				$link.$isHidden = true;
			}
			break;
		case "$tunnel":
			$link.$title = syra_local.fieldTunnel;
			return field.$item.$inplace && !field.$item.$isFilterMode;
		case "$lookup":
		case "$select":
			return false;
	}
	return true;
}

function _applyMenusChange(field, $deltaMenu, $isAction) {
	var binds = Object.keys($deltaMenu);
	if (!field.$menus) {
		field.$menus = {};
		field.$popupMenus = {};
	}
	if (!field.$popupMenus) {
		field.$popupMenus = {};
	}
	for (var ii = 0, jj = binds.length; ii < jj; ii++) {
		var $bind = binds[ii];
		var $menu = $deltaMenu[$bind];
		if ($menu === null) {
			exports.removeMenu(field, $bind);
		} else {
			var $defined = field.$menus[$bind];
			if ($defined) {
				syra_site.deltaManager.applyObjectDelta(field.page, $defined, $menu);
			} else {
				$menu.$isAction = $isAction;
				$menu.$isPopup = _isPopupMenuItem(field, $bind, $menu);
				$menu.$sourceBind = $bind;
				$menu.$bind = field.isField ? (field.id + "-" + $bind) : $bind;
				$defined = field.$menus[$bind] = $menu;
			}
			if ($defined.$isPopup && field.$popupMenus) {
				if ($menu.$isHidden) {
					delete field.$popupMenus[$bind];
				} else {
					field.$popupMenus[$bind] = $defined;
				}
			}
			if (field.menuItems) {
				var bounds = field.menuItems[$bind];
				if (bounds) {
					for (var mm = 0, kk = bounds.length; mm < kk; mm++) {
						bounds[mm].setMenu($menu, field.dataset);
					}
				} else {
					if (field.isDashBoard && $menu.$vignettes && !field.isTOCMenu($menu)) {
						return;
					}
					for (var mm = 0, kk = field.menusBags.length; mm < kk; mm++) {
						field.menusBags[mm].addMenuItem($menu, field.dataset);
					}
				}
			}

		}
	}
}


function applyActionLinkChange(resources) {
	if (resources) {
		if (resources.$links === null) {
			var $binds = Object.keys(this.menuItems);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var mn, items = this.menuItems[$bind];
				for (var kk = 0, mm = items.length; kk < mm; kk++) {
					mn = items[kk];
					if (mn.detailField) {
						mn.detailField.setDataValue(mn.detailField.currentValue);
						mn.detailField = null;
					}
					(mn.layoutParent ? mn.layoutParent : this).removeItem(mn, true);
				}
			}
			this.menuItems = {};
			this.$menus = {};
		}
	}
}

exports.removeMenu = function(article, $bind, removeDom) {
	if (article.menuItems) {
		var menuItems = article.menuItems[$bind];
		if (menuItems) {
			for (var ii = 0, jj = menuItems.length; ii < jj; ii++) {
				article.removeItem(menuItems[ii], removeDom);
			}
			delete article.menuItems[$bind];
		}
	}
	delete article.$menus[$bind];
};


function _removePickers(field) {
	var ids = field.mnPickers && Object.keys(field.mnPickers);
	for (var ii = 0, jj = ids.length; ii < jj; ii++) {
		syra_site.dom.removeChild(field.mnPickers[ids[ii]]);
	}
	field.mnPickers = {};
}

exports.setMenus = function(field, metaData) {
	if (field.variantItem) {
		field = field.variantItem;
	}
	if (field.isChildField) {
		if (metaData) {
			exports.setMenus(field.record, {
				$links: metaData.$links,
				$actions: metaData.$actions
			});
		}
		return;
	}
	if (field.renderIcon) {
		metaData.$links !== undefined && field.renderIcon(metaData);
		return;
	}

	// in order not to show menu menu picker for unit ref field        
	if (!field.$item.$isMenusHidden && (!field.$item.$isUnitField || field.$isEditMode)) {
		var $menus = (!field.isList && metaData.$item) || metaData;
		if ($menus.$links !== undefined || $menus.$actions !== undefined) {
			if ($menus.$links === null) {
				_removePickers(field);
				field.$menus = {};
				field.$popupMenus = {};
				field.menuItems = {};
				if (field.menusBox) {
					(field.menusBox.layoutParent ? this.menusBox.layoutParent : this).removeItem(this.menusBox, true);
					if (field.menusBags) {
						var found = field.menusBags.indexOf(field.menusBox);
						if (found >= 0) {
							field.menusBags.splice(found, 1);
						}
					}
					delete field.menusBox;
				}
				exports.ensureMenuPicker(field, false);
			} else {
				if ($menus.$links) {
					_applyMenusChange(field, $menus.$links);
					if (field.$isEditMode) {
						if ($menus.$links.$suggest && !field.mnPickers.clear) {
							field._isAutoComplete = true;
							if (!field.mnPickers.clear) {
								_addPicker(field, "clear").style.display = "none";
							}
						}
						if ($menus.$links.$lookup && !field.mnPickers.lookup) {
							if (!field.mnPickers.lookup) {
								_addPicker(field, "lookup", syra_local.fieldLookup);
							}
						}
						if ($menus.$links.$tunnel && !field.mnPickers.tunnel && !field.$item.$inplace) {
							if (!field.mnPickers.tunnel) {
								_addPicker(field, "tunnel", syra_local.fieldTunnel);
								if (!field.$isDisabled && field.$isReadOnly) {
									field.mnPickers.tunnel.style.display = picker.syraDisplay = "";
								}
							}
						}
						if ($menus.$links.$localize && !field.mnPickers.localize && field.$item.$useLocalizePicker) {
							if (!field.mnPickers.localize) {
								_addPicker(field, "localize", field.$menus.$localize.$title);
							}
						}
					}
				}
				$menus.$actions && _applyMenusChange(field, $menus.$actions, true);
				if (!field.mnPickers.menus && !field.$item.$isPickerMenuHidden && field.$popupMenus && Object.keys(field.$popupMenus).length) {
					_addPicker(field, "menus", syra_local.flActions);
				}
			}
		}
	}
};

exports.applyState = function(field) {
	if (field.$menus && field.$menus.$localize) {
		field.$menus.$localize.$isHidden = field.$isReadOnly == true;
	}
};

var _listMenuBinds = ["$create", "$delete", "$details", "$toggleGraph", "$design", "$cancelSort"];

function _getIcon(field, $bind) {
	if (_listMenuBinds.indexOf($bind) >= 0) {
		return {
			$mode: "iconText",
			$path: field.$iconPath
		};
	}
	if ($bind == "$localize" || $bind == "$tunnel") {
		return {
			$mode: "iconText",
			$path: "field/s-field-"
		};
	}
	return $items;
}

exports.showPopup = function(field) {
	if (!field._popupMenus) {
		var $item = {
			$isOwner: true,
			$noText: true,
			$title: syra_local.fieldActions,
			$clientId: field.id + "-menu-picker",
			$skin: field.$skin + "-menus s-field-context-menus",
			$itemSkin: "s-list-menus-record-menus-link",
			$category: "menus",
			$layout: {
				$items: []
			}
		};
		var article = _getArticle(field);
		var slot = document.createElement("div");
		field.menusBox = field.page.loadNewItem(slot, $item, article);
		field.menusBox.contextField = field;
		var binds = Object.keys(field.$popupMenus);
		//setOrder
		var newBinds = [];
		for (var ii = 0, jj = _listMenuBinds.length; ii < jj; ii++) {
			var found = binds.indexOf(_listMenuBinds[ii]);
			if (found >= 0) {
				binds.splice(found, 1);
				newBinds.push(_listMenuBinds[ii]);
			}
		}
		binds = newBinds.concat(binds);
		for (var ii = 0, jj = binds.length; ii < jj; ii++) {
			var $menu = field.$popupMenus[binds[ii]];
			var menuItem = field.menusBox._loadNewMenuItem($menu.$bind, $menu.$isAction, _getIcon(field, $menu.$sourceBind));
			article.$menus[$menu.$bind] = $menu;
			menuItem.setMenu($menu, article.dataset);
		}
		syra_site.dom.toggleClass(field.mnPickers.menus, "s-open", true);
		field._popupMenus = syra_site.dialogManager.openPopup(self, {
			content: field.menusBox,
			slot: slot,
			position: {
				my: "right top",
				at: "right bottom",
				of: $(field.mnPickers.menus)
			},
			onClose: function() {
				syra_site.dom.toggleClass(field.mnPickers.menus, "s-open", false);
				field.menusBox.unload();
				field.menusBox = field._popupMenus = null;
			}
		});
	} else {
		field._popupMenus.close();
	}
};


exports.applyState = function(field) {
	var syraDisplay = (field.$isDisabled || field.$isReadOnly) ? "none" : "";
	field.mnPickers.date && _togglePicker(field.mnPickers.date, syraDisplay);
	field.mnPickers.time && _togglePicker(field.mnPickers.time, syraDisplay);
	field.mnPickers.choice && _togglePicker(field.mnPickers.choice, syraDisplay);
	field.mnPickers.lookup && _togglePicker(field.mnPickers.lookup, syraDisplay);
	field.mnPickers.localize && _togglePicker(field.mnPickers.localize, syraDisplay);
	field.mnPickers.menus && _togglePicker(field.mnPickers.menus, syraDisplay);
	if (field.mnPickers.tunnel) {
		if (field.$isReadOnly) {
			syraDisplay = "";
		}
		_togglePicker(field.mnPickers.choice, syraDisplay);
	}
};
exports.highlight = function(field, on) {
	var pickers = field.mnPickers;
	if (pickers) {
		pickers.date && syra_site.dom.toggleClass(pickers.date, "s-enter", on);
		pickers.time && syra_site.dom.toggleClass(pickers.time, "s-enter", on);
		pickers.choice && syra_site.dom.toggleClass(pickers.choice, "s-enter", on);
		pickers.lookup && syra_site.dom.toggleClass(pickers.lookup, "s-enter", on);
		pickers.localize && syra_site.dom.toggleClass(pickers.localize, "s-enter", on);
		pickers.menus && syra_site.dom.toggleClass(pickers.menus, "s-enter", on);
	}
};

1;
exports.ensureMenuPicker = function(field, show) {
	if (field.mnPickers.menus) {
		if (show !== false) {
			show = field.$isEditMode || field.hasValue();
		}
		_togglePicker(field.mnPickers.menus, show ? "" : "none");
	}
};

exports.diagnose = {
	add: function(field, message) {
		if (!field.mnPickers.diagnose && !syra_site.isTabletDevice) {
			field.mnPickers.diagnose = document.createElement("a");
			field.mnPickers.diagnose.className = "s-field-diagnose-flag-" + message.$diagnoses[0].$severity;
			if (field.input) {
				field.fieldValue.appendChild(field.mnPickers.diagnose);
			} else {
				field._dataValue.appendChild(field.mnPickers.diagnose);
			}
		}
	},
	remove: function(field) {
		if (field.mnPickers.diagnose) {
			field.mnPickers.diagnose.parentNode.removeChild(field.mnPickers.diagnose);
			delete field.mnPickers.diagnose;
		}
	}
};

function _addPicker(field, type, title) {
	var picker = field.mnPickers[type] = document.createElement("a");
	var css = (field.$item.$css ? (field.$item.$css + "-") : " s-picker-") + type;
	picker.className = field.mnPickersCss + css;
	picker.syraOnClick = "onPickerClick";
	picker.syrainout = picker.syraIsSyraMenuHandler = true;
	picker.syraPickerType = type;
	if (title) {
		picker.title = picker.syraTitle = title;
	}
	if (field.$isDisabled || field.$isReadOnly) {
		picker.style.display = picker.syraDisplay = "none";
	} else {
		picker.syraDisplay = "";
	}
	if (field.onAddMenuPicker) {
		field.onAddMenuPicker(picker);
	} else {
		if (field.isField) {
			if (field.input) {
				field.fieldValue.appendChild(picker);
			} else {
				field._dataValue.appendChild(picker);
			}
		}
	}
	return picker;
}

exports.onPickerClick = function(event, picker, field) {
	if (!field.authoringNode && !field.$isDisabled) {
		field.page.externalAdapter.onFieldClickPicker({
			field: field,
			pickerType: picker.syraPickerType,
			doEvent: function(options) {
				switch (picker.syraPickerType) {
					case "menus":
						syra_site.onBeforeClick(field, event);
						syra_menus.showPopup(field);
						break;
					case "lookup":
						if (field.articleParent.onLookupClick ? field.articleParent.onLookupClick(field, field.mnPickers.lookup) : true) {
							field.focus();
							var $lookup = field.$menus.$lookup;
							syra_site.dialogManager.openLookup(field.boxParent, {
								article: field.articleParent,
								$url: $lookup.$url,
								onSelectRecord: function(selectedRecords) {
									if (!field.$isDisabled && !field.$isReadOnly) {
										var record = selectedRecords[Object.keys(selectedRecords)[0]]; //single selection
										field.setDataValue($lookup.$result ? record.dataset[$lookup.$result] : record.dataset);
										field.focus();
										field.notifyFieldChange(field.currentValue);
									}
								}
							});
						}
						break;
					case "tunnel":
						if (field.mnPickers.tunnel) {
							field.mnPickers.tunnel.click();
						} else {
							field.menusBox && syra_menus.clickMenu(field.articleParent, field.menusBox.id + "-" + "$tunnel");
						}
						break;
					case "choice":
						field.onChoiceClick(null, field.mnPickers.choice);
						break;
					case "localize":
						field.menusBox && syra_menus.clickMenu(field.articleParent, field.menusBox.id + "-" + "$localize");
						break;
					case "date":
						!field.$isReadOnly && field.onDateTimePickerClick(picker, options);
						break;
					case "time":
						!field.$isReadOnly && field.onDateTimePickerClick(picker, options);
						break;
					case "clear":
						field.onClearClick();
						break;
					default:
						syra_controller.executeMenu(field.$menus[picker.syraBind || picker.syraPickerType], _getArticle(field));
						break;

				}
			}
		});
	}
};

exports.clickMenu = function(article, $bind) {
	var menus = article.menuItems[$bind];
	if (menus && menus.length) {
		setTimeout(function() {
			menus[0].click();
		}, 20);
	}
};
exports.dispose = function(field) {
	field._popupMenus && field._popupMenus.close();
	field.mnPickers = field._popupMenus = null;
};