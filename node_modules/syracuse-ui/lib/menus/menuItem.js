"use strict";
var helpers = require('syracuse-core/lib/helpers');

function _showDiagnoses(menu, $delta){
    var article = menu.getArticle();
    var $menu = article.$menus[menu.$item.$bind];
    if ($menu && $menu.$links) {
        var $links = $menu.$links || {};
        if ($delta.$links) {
            Object.keys($delta.$links).forEach(function($bind){
                var $source = $delta.$links[$bind];
                var $target = $links[$bind] = $links[$bind] || {};
                Object.keys($source).forEach(function($prop){
                    $target[$prop] = $source[$prop];
                });
            });
        }
        Object.keys($links).forEach(function($bind){
            var $link = $links[$bind];
            $link.$bind = $bind + "-" + menu.id;
            $link.$url = article.formatMenuUrl($link);
        });
        document.site.showDiagnoses({
            $links: $links,
            $diagnoses: $delta.$diagnoses
        }, article);
    }
}

function _onMenuItemClick(menuItem){
    var doClick = true;
    if (menuItem.boxParent) {
        doClick = menuItem.boxParent.onMenuClick ? menuItem.boxParent.onMenuClick(menuItem) : true;
        if (doClick) {
            var article = menuItem.getArticle();
            doClick = article.onMenuClick ? article.onMenuClick(menuItem) : true;
        }
    }
    if (doClick) {
        if (menuItem.onMenuClick ? menuItem.onMenuClick() : true) {
            document.controller.executeMenu(menuItem);
        }
    }
    if (menuItem.subMenuParent) {
        menuItem.subMenuParent.onChildMenuItemClick(menuItem);
    }
}

function MenuItem(){

}

exports.MenuItem = helpers.defineClass(MenuItem, null, {
    loadBox: function(record){
        this.$skin = this.$item.$skin || "s-link";
        if (this.$item.$bind) {
            this.getArticle().bindMenuItem(this, record);
        }
        else 
            if (this.$item.$link) {
                this.setMenu(this.$item.$link);
            }
    },
    getArticle: function(){
        if (!this.article) {
            this.article = this.boxParent ? this.boxParent.getArticle() : null;
        }
        return this.article;
    },
    getPage: function(){
        if (!this.page) {
            this.page = this.getArticle().getPage();
        }
        return this.page;
    },
    getTitle: function(){
        return this.$title;
    },
    setTitle: function($value){
        this.$title = $value;
        if (this.$$label) {
            if ($value.indexOf("{") < 0) {
                this.$$label.text($value);
            }
            else {
                this.boxParent._renderExpression($value, this.$$label);
            }
        }
        else {
            this.mn.title = $value;
        }
    },
    setDescription: function($value){
        this.$description = $value;
        if (this._description) {
            this._description.textContent = $value;
        }
        else {
            this.mn.title = $value;
        }
    },
    hide: function($value){
        this.$item.$isHidden = $value;
        this.mn.style.display = !$value ? "" : "none"
        if (this.liParent) {
            this.liParent.style.display = !$value ? "" : "none";
        }
    },
    disable: function($value){
        document.site.disableItem(this.$$item[0], this.$isDisabled = $value || false);
    },
    click: function(){
        var self = this;
        document.site.onBeforClick();
        if (!self.$isDisabled) {
            var page = self.getPage();
            if (page) {
                var options = {
                    menuItem: self,
                    doEvent: function(){
                        _onMenuItemClick(self);
                    }
                };
                if (self.boxParent && self.boxParent.contextField) {
                    //boxParent is menubox of contextMenu
                    self.contextField = options.field = self.boxParent.contextField;
                }
                page.externalAdapter.onMenuItemClick(options);
            }
            else {
                _onMenuItemClick(self);
            }
        }
    },
    _setIconMenu: function(){
        this.$icon = this.$item.$icon || {};
        this.iconValue = document.createElement("div");
        this.iconValue.className = this.mn.className + "-icon";
        var iconHeight = parseInt((this.iconValue.style.height = this.$icon.$height || "32px").replace("px", ""));
        this.iconValue.style.width = this.$icon.$width || "32px";
        this.$$item.prepend(this.iconValue);
        this._setIconValue();
        if (this.$icon.$mode != "icon") {
            var div = document.createElement("div");
            div.className = this.mn.className + "-label";
            this.$$label = $(this.$$item[0].appendChild(div));
        }
    },
    _setIconValue: function(){
        var $path = document.site.$item.$iconPath + (this.$icon.$path || "");
        this.iconValue.style.backgroundImage = "url('" + $path + (this.value || this.$item.$bind.replace("$", "")) + ".png')";
    },
    _createMenu: function(article, $menu){
        this.mn = document.createElement("a");
        this.mn.className = this.$skin + ((this.$item.$css) ? (" " + this.$item.$css) : "");
        this.mn.setAttribute("data-s-menu", this.id);
        this.mn.setAttribute("data-s-article", article.id);
        this.$$item = $(this.$$container[0].appendChild(this.mn));
        if (this.$item.$isDescriptionVisible) {
            this._description = document.createElement("div");
            this._description.className = this.$item.$skinDescription || (this.$skin + "-desc");
            this.$$container[0].appendChild(this._description);
        }
        if (this.$item.$isHidden) {
            this.hide(true);
        }
        if (!$menu.$title && this.$item.$title) {
            $menu.$title = this.$item.$title; //use for pager (next prev) currently
        }
        if (this.$item.$value) {
            this.value = this.$item.$value;
        }
        if (this.$item.$icon) {
            this._setIconMenu();
        }
        else {
            if (!this.$item.$noText) {
                this.$$label = this.$$item;
            }
        }
    },
    setValue: function(newValue){
        this.value = newValue;
        if (this.iconValue) {
            this._setIconValue();
        }
    },
    setMenu: function($menu, record){
        var self = this;
        self.$isSetMenuOn = true; //hack for menus.loadbox, avoid calling unnecessary setMenu 
        var article = self.getArticle();
        if ($menu) {
            if (!self.$$item) {
                self._createMenu(article, $menu);
            }
            if ($menu.$title !== undefined) {
                self.setTitle($menu.$title);
            }
            if ($menu.$description !== undefined) {
                self.setDescription($menu.$description);
            }
            if ($menu.$isHidden !== undefined) {
                self.hide($menu.$isHidden);
            }
            if ($menu.$isDisabled !== undefined) {
                self.disable($menu.$isDisabled);
            }
            Object.keys($menu).forEach(function($property){
                self[$property] = $menu[$property];
            });
            if (self.$isDisabled && $menu.$isRequested === false) {
                if (self.$item.onServerRequest ? self.$item.onServerRequest(self) : true) {
                    if ($menu.$diagnoses) {
                        _showDiagnoses(self, $menu);
                    }
                    if ($menu.$clientAgent) {
                        var agent = document.site.agents[$menu.$clientAgent.$id];
                        if (agent) {
                            agent[$menu.$clientAgent.$action](self, $menu, record);
                        }
                    }
                    if ($menu.$links && $menu.$links.$location) {
                        var $url = $menu.$links.$location.$url;
                        setTimeout(function(){
                            document.site.unload();
                            window.open($url, "_self");
                        }, 100);
                    }
                }
                $menu.$isRequested = true; //avoid procsessing action for other menu bound to $menu (create menu for sample)
            }
        }
        if (self.$type && self.$type.indexOf('json') == -1) {
            if (self.$url && (self.$url.indexOf("format=") < 0)) { // TODO: improve this hack
                self.$url += "&format=" +
                self.article.formatMenuUrl({
                    $url: self.$type,
                    $parameters: self.$parameters
                }, record);
            }
            self.mn.setAttribute("target", self.$target = "blank");
            self.mn.setAttribute("href", self.$url = self.article.formatMenuUrl(self, record));
            self.mn.className += " " + self.$skin + "-" + self.$type.replace("application/", "");
        }
        else {
            if (self.mn) {
                if (self.$url) {
                    self.mn.setAttribute("href", "?url=" + encodeURIComponent(self.$url = self.article.formatMenuUrl(self, record)));
                }
                else {
                    self.mn.setAttribute("href", "#");
                }
            }
        }
    },
    dispose: function(){
        delete this.contextField;
        if (this.article) {
            this.article.unbindMenuItem(this, false);
            delete this.article;
        }
        delete this.page;
        delete this.onMenuClick;
    }
});
