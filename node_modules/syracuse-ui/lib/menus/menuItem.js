"use strict";
var helpers = require('syracuse-core/lib/helpers');
var menuBuilder = require('./menuBuilder');


function MenuItem() {

}

exports.MenuItem = helpers.defineClass(MenuItem, null, {
	highlight: function(show) {
		syra_site.dom.toggleClass(this.domItem, "s-highlight", show);
	},
	ensureLayoutMode: function() {
		if (this.layoutParent) {
			this.layoutParent.ensureLayoutSlot(this);
		}
	},
	loadBox: function(record) {
		this.menuBuilder = menuBuilder;
		this.$designLevel = "field";
		this.isMenuItem = true;
		this.domItem = document.createElement("a");
		this.domItem.syraOnClick = "onMenuItemClick";
		repository[this.domItem.syraItem = this.domItem.syrainout = this.id] = this;

		this.articleParent.setArticleId(this.domItem);
		if (this.$item.$skin == "s-mn-h2-link") {
			delete this.$item.$skin;
		}

		this.$skin = this.$item.$skin;
		if (this.$skin == "s-page-menus-link") {
			this.$skin = "s-mn-bar-main-link";
		} else {
			if (!this.$skin) {
				this.$skin = this.page.isDashBoard ? "s-dash-h2-link" : "s-page-link";
			}
		}
		this.layoutSlot.appendChild(this.domItem);
		this.showItem(false);

		this.domItem.className = this.$skin;
		if (this.$item.$css) {
			this.domItem.className += " " + this.$item.$css;
		}
		this._label = document.createElement("div");
		this._label.className = this.$skin + "-label";
		if (!(this.$subRecordKey = this.$item.$subRecordKey)) {
			if (this.boxParent && this.boxParent.contextField) {
				this.contextField = this.boxParent.contextField;
				if (this.contextField.$item) {
					this.$subRecordKey = this.contextField.$item.$bind;
				}
			}
		}
		if (this.boxParent.isMenuGroup) {
			if (this.boxParent.$item.$style) {
				var $style = "s-menus-sty-" + this.boxParent.$item.$style;
				syra_site.dom.toggleClass(this._label, $style, true);
				syra_site.dom.toggleClass(this.domItem, $style, true);
			}
		}
		this.domItem.appendChild(this._label);
		if (this.$item.$isDescriptionVisible) {
			this._description = document.createElement("div");
			this._description.className = this.$item.$skinDescription || (this.$skin + "-desc");
			// this.layoutSlot.appendChild(this._description);
			this.domItem.appendChild(this._description);
		}

		if (this.$item.$bind) {
			var bounds = this.articleParent.menuItems[this.$item.$bind];
			if (!bounds) {
				bounds = this.articleParent.menuItems[this.$item.$bind] = [];
			}
			bounds.push(this);
			var $menu = this.articleParent.$menus[this.$item.$bind];
			if ($menu) {
				this.setMenu($menu, record);
			}
		} else {
			if (this.$item.$link) {
				this.setMenu(this.$item.$link);
			}
		}
		this.ensureLayoutMode();
	},
	onItemInOut: function(onEnter) {
		menuBuilder.onItemInOut(this, onEnter);
	},
	getArticle: function() {
		if (!this.articleParent) {
			this.articleParent = this.boxParent ? this.boxParent.getArticle() : null;
		}
		return this.articleParent;
	},
	getTitle: function() {
		if (this.titleText == null && this.$title) {
			this.titleText = this.$title || "";
			if (this.titleText.length > 0 && this.titleText[1] == "@") {
				this.titleText = syra_site.expressionMaker.render(this.boxParent, this.titleText);
			}
		}
		return this.titleText || "";
	},

	setDescription: function($description) {
		this.$description = $description;
		if (this._description) {
			this._description.textContent = $description;
		} else {
			this.domItem.title = $description;
		}
	},
	setState: function(state) {
		if (state.$isHidden !== undefined) {
			this.showItem(!(this.$isHidden = state.$isHidden));
		}
	},
	showItem: function(show) {
		this.domItem.style.display = show ? "" : "none";
		this.isInvisible = !show;
		if (this.layoutParent) {
			this.layoutParent.ensureItemVisibility(this, !show);
		}
	},
	disable: function($value) {
		syra_site.dom.disableItem(this.domItem, this.$isDisabled = $value || false);
	},
	onMenuItemClick: function(picker, event) {
		this.click(event);
	},
	click: function(event) {
		menuBuilder.click(this, event);
	},
	setMenu: function($menu, record) {
		menuBuilder.setMenu(this, $menu, record);
	},
	isRepresentationUrl: function() {
		return !(this.$sourceType && (this.$sourceType.indexOf('json') == -1));
	},
	dispose: function() {
		this.onItemInOut();
		delete repository[this.id];
		this.contextField = this.detailField = this.$vignettes = this.rowSeparator = this._description = this.delta = null;
		this.article = this.onMenuClick = this.$item = this.layoutSlot = null;
		this.$url = this.domItem = this._label = this.$title = this.$icon = this.iconValue = null;
		this.layoutParent = this.boxParent = this.articleParent = this.page = this.childVariants = null;
		this.popupTitle = this.titleTip = this.menuBuilder = null;
	}
});