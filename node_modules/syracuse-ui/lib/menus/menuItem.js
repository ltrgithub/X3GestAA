"use strict";
var helpers = require('syracuse-core/lib/helpers');

function _setVariants(menu, $variants) {
	if (!menu.childVariants) {
		menu.childVariants = {};
	}
	if (menu.layoutSlot) {
		var $keys = Object.keys($variants);
		for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
			if (!menu.childVariants[$keys[ii]]) {
				var $newItem = helpers.object.clone(menu.$item, true);
				$newItem.$variantItemKey = $keys[ii];
				var $variant = $variants[$keys[ii]];
				$newItem.$title = menu.$title;
				if (!$variant.$title) {
					$variant.$title = menu.$title;
					if (menu.articleParent.$field) {
						if (menu.articleParent.$field.$item && menu.articleParent.$field.$item.$variants) {
							var $field = menu.articleParent.$field.$item.$variants[$newItem.$variantItemKey];
							if ($field && $field.$title) {
								$variant.$title += " " + $field.$title;
							}
						}
					}
				}
				menu.childVariants[$keys[ii]] = menu.page.loadNewItem(menu.layoutSlot, $newItem, menu.articleParent);
			}
		}
	}
	menu.showItem(false);
}

function _ensureCss(menu, $style, $value) {
	if (menu._isLoaded) {
		if ($style !== undefined) {
			menu.cssStyle = (menu.$style = $style) ? (" s-cst-sty-" + $style) : null;
			menu.cssUpdated = true;
		}
		if (menu.cssUpdated) {
			var css = menu.$skin;
			if (menu.cssStyle) {
				css += menu.cssStyle;
			}
			if (menu.cssValue) {
				css += menu.cssValue;
			}
			if (menu.domItem.syraIsDisabled) {
				css += " s-disabled";
			}
			if (menu.$item.$css) {
				css += " " + menu.$item.$css;
			}
			if (menu.cssTitle) {
				css += menu.cssTitle;
			}
			menu.domItem.className = css;
			menu.cssUpdated = false;
		}
	}
}


function _isHrefEnabled(menuItem) {
	return !menuItem.$isAction && !(menuItem.$parameters && (menuItem.$parameters.$actions || menuItem.$parameters.$properties)) && !(menuItem.$method && menuItem.$method != "GET");
}

function _initMenu(menu, $menu) {
	menu.isInvisible = false; //important
	menu.articleParent.onMenuDataFilled && menu.articleParent.onMenuDataFilled(menu);
	menu.$isHidden = $menu.$isHidden;
	if (menu.$isHidden == undefined) {
		menu.$isHidden = menu.$item.$isHidden;
	}
	if (menu.$isHidden) {
		menu.isInvisible = true;
		menu.domItem.style.display = "none";
	} else {
		if (menu.$item.$showIfSet) { //used by job
			menu.isInvisible = false;
			menu.domItem.style.display = "";
		}
	}
	menu.layoutParent && menu.layoutParent.ensureItemVisibility(menu, menu.$isHidden);
	if (!$menu.$title && menu.$item.$title) {
		$menu.$title = menu.$item.$title; //use for pager (next prev) currently
	}
	if (menu.$item.$value) {
		menu.value = menu.$item.$value;
	}
	menu._isInit = true;
}


function _onNotRequested(menu, $menu) {
	if (menu.$item.onServerRequest ? menu.$item.onServerRequest(menu) : true) {
		if (menu.articleParent.onAfterActionMenuExecute) {
			if (menu.articleParent.onAfterActionMenuExecute(menu, $menu) === false) {
				$menu.$isRequested = true;
				return false;
			}
		}
		if ($menu.$diagnoses) {
			_showDiagnoses(menu, $menu);
		}
		if ($menu.$clientAgent) {
			var agent = syra_site.agents[$menu.$clientAgent.$clientId];
			if (agent) {
				agent[$menu.$clientAgent.$action](menu, $menu, record);
			}
		}
		if ($menu.$links && $menu.$links.$location) {
			var $url = $menu.$links.$location.$url;
			setTimeout(function() {
				syra_site.unload();
				window.open($url, "_self");
			}, 100);
		}

		// TODO
		// job tracking ui
		if ($menu.$location && $menu.$state) {
			syra_jobs.registerJob($menu.$location, $menu.$state, menu.$title, $menu.$location.split(/'/)[1]);
		}
	}
	$menu.$isRequested = true; //avoid processing action for other menu bound to $menu (create menu for sample)
	return true;
}

function _setMenu(menu, $menu, record, outOfDate) {
	if ($menu) {
		if ($menu.$type) {
			menu.$sourceType = $menu.$type;
			menu.isRepresentationUrl = !(menu.$sourceType && (menu.$sourceType.indexOf('json') == -1));
		}

		if (!menu._isInit) {
			_initMenu(menu, $menu);
		}

		var props = Object.keys($menu);
		for (var ii = 0, jj = props.length; ii < jj; ii++) {
			var prop = props[ii];
			menu[prop] = $menu[prop];
		}
		var $iconValue = $menu.$iconValue;
		if ($iconValue === undefined) {
			$iconValue = $menu.$icon && $menu.$icon.$value;
		}
		if ($menu.$title !== undefined || $iconValue !== undefined) {
			syra_menus.setMenuItemTitle(menu, $menu.$title, $iconValue);
		}

		menu.setState($menu);
		if ($menu.$isDisabled !== undefined) {
			menu.disable($menu.$isDisabled);
		}

		if ((menu.$sourceBind || menu.$item.$bind) == "$lazyload") {
			if (menu.domItem.parentNode) {
				menu.domItem.parentNode.removeChild(menu.domItem);
			}
		}
		if ($menu.$isDisabled && $menu.$isRequested === false) {
			if (!_onNotRequested(menu, $menu)) {
				return;
			}
		}
		if ($menu.$variants) {
			if (menu.$item.$variantItemKey) {
				_setMenu(menu, $menu.$variants[menu.$item.$variantItemKey], record);

			} else {
				_setVariants(menu, $menu.$variants);
			}
		}

	}
	if (!menu.$sourceUrl || ($menu && $menu.$url)) {
		menu.$sourceUrl = menu.$url;
		if (menu.$type && (menu.$type.indexOf('json') == -1) && (menu.$type != "html")) {
			if (menu.$sourceUrl && (menu.$sourceUrl.indexOf("format=") < 0)) { // TODO: improve menu hack
				menu.$sourceUrl += (menu.$sourceUrl.indexOf("?") >= 0 ? "&" : "?") + "format=" +
					syra_site.urlMaker.formatMenuUrl(menu.articleParent, {
						$url: menu.$type,
						$parameters: menu.$parameters
					}, record);
			}
		}
	}
	menu.$url = menu.$sourceUrl;
	if ($menu || outOfDate) {
		$menu = $menu || menu; //id outOfDate, $menu can be empty
		if (!menu.isRepresentationUrl && ($menu.$type || $menu.$title) && (menu.$sourceType.indexOf("html") < 0)) {
			if ($menu.$url && _isHrefEnabled(menu)) {
				syra_site.history.setHref(menu, record, true);
			} else {
				menu.domItem.setAttribute("href", "#");
			}
			menu.value = syra_site.siteFunctions.getDocumentIcon(menu.$sourceType); //  menu.$sourceType.replace("application/", "").replace("/", "-");
			if (!menu.$item.$icon) {
				menu.$item.$icon = {
					$path: "file/s-link-"
				};
			}
			if (menu.$title !== undefined) {
				syra_menus.setMenuItemTitle(menu, menu.$title);
			}
		} else {
			if (menu.domItem) {
				if ($menu.$url && _isHrefEnabled(menu)) {
					syra_site.history.setHref(menu, record);
				} else {
					menu.domItem.setAttribute("href", "#");
				}
			}
		}
		_ensureCss(menu, $menu.$style, $menu.$value);
	}
	if (menu.isHiddenOnPreload) {
		menu.domItem.style.display = "";
		menu.isHiddenOnPreload = false;
	}
}

function _load(menu, record) {
	menu.isRepresentationUrl = true;
	menu.$designLevel = "field";
	menu.isMenuItem = true;
	menu.domItem = document.createElement("a");
	if (menu.$item.$shortCutTip) {
		menu.domItem.syraShortCutTip = menu.$item.$shortCutTip;
	}
	menu.domItem.syraOnClick = "click";
	menu.domItem.syraItem = menu.domItem.syrainout = menu.domItem.syrafocusinout = menu.id;
	syra_store.add(menu);

	menu.articleParent.setArticleId(menu.domItem);
	menu.$skin = menu.$item.$skin;

	if (!menu.$skin) {
		menu.$skin = menu.page.isDashBoard ? "s-nav-menu-link" : "s-mn-extra-link";
	}
	var $menu = menu.$item.$menu;
	if (!($menu && !$menu.$isHidden)) {
		if (menu.$item.$showIfSet) {
			//used by job
			menu.isInvisible = true;
			menu.domItem.style.display = "none";
		} else {
			menu.showItem(false);
		}
	} else {
		menu.isInvisible = false;
		menu.layoutParent && menu.layoutParent.ensureItemVisibility(menu, menu.isInvisible);
	}
	if (!(menu.$subRecordKey = menu.$item.$subRecordKey)) {
		if (menu.boxParent && menu.boxParent.contextField) {
			menu.contextField = menu.boxParent.contextField;
			if (menu.contextField.$item) {
				menu.$subRecordKey = menu.contextField.$item.$bind;
			}
		}
	}
	var $menu;
	if (menu.$item.$bind) {
		var bounds = menu.articleParent.menuItems[menu.$item.$bind];
		if (!bounds) {
			bounds = menu.articleParent.menuItems[menu.$item.$bind] = [];
		}
		bounds.push(menu);
		$menu = menu.articleParent.$menus[menu.$item.$bind];
	} else {
		$menu = menu.$item.$link;
	}
	menu._isLoaded = menu.cssUpdated = true;
	_ensureCss(menu, menu.$item.$style);
	if ($menu) {
		_setMenu(menu, $menu, record);
	} else {
		if (menu.$item.$isPreloaded) {
			menu.isHiddenOnPreload = true;
			menu.domItem.style.display = "none";
		}
	}
	menu.layoutSlot && menu.layoutSlot.appendChild(menu.domItem);
	menu.ensureLayoutMode();
};

function _showDiagnoses(menu, $delta) {
	var $menu = menu.articleParent.$menus[menu.$item.$bind];
	if ($menu) {
		if ($menu.$links) {
			var $binds;
			var $links = $menu.$links || {};
			if ($delta.$links) {
				$binds = Object.keys($delta.$links);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					var $source = $delta.$links[$bind];
					var $target = $links[$bind] = $links[$bind] || {};
					var $props = Object.keys($source);
					for (var kk = 0, mm = $props.length; kk < mm; kk++) {
						var $prop = $props[kk];
						$target[$prop] = $source[$prop];
					}
				}
			}
			$binds = Object.keys($links);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var $link = $links[$bind];
				$link.$bind = $bind + "-" + menu.id;
				$link.$url = syra_site.urlMaker.formatMenuUrl(menu.articleParent, $link);
			}
			syra_site.showDiagnoses({
				$links: $links,
				$diagnoses: $delta.$diagnoses
			}, menu.articleParent, {
				menu: menu
			});
		} else {
			if ($delta.$diagnoses) {
				syra_site.showDiagnoses({
					$diagnoses: $delta.$diagnoses
				}, menu.articleParent, {
					menu: menu
				});
			}
		}
	}
}

function MenuItem() {

}

exports.MenuItem = helpers.defineClass(MenuItem, null, {
	ensureLayoutMode: function() {
		this.layoutParent && this.layoutParent.ensureLayoutSlot(this);
	},
	loadBox: function(record) {
		this.isMenusItem = true;
		this.$isAuthoringEnabled = false;
		if (syra_site.isTabletDevice) {
			this.isInvisible = !this._hideItemOnTablet();
		}
		_load(this, record);
	},
	onFocusInOut: function(onEnter, event) {
		this.onItemInOut(onEnter, event);
	},
	onItemInOut: function(onEnter, event) {
		syra_menus.onItemInOut(onEnter, event, this);
	},
	getTitle: function() {
		if (this.domItem.syraTitle == null && this.$title) {
			if (this.$title && this.$title.length > 0 && this.$title[1] == "@") {
				this.domItem.syraTitle = syra_site.expressionMaker.render(this.boxParent, this.$title) + "";
			} else {
				this.domItem.syraTitle = this.$title;
			}
		}
		return this.domItem.syraTitle || "";
	},
	click: function(event) {
		syra_menus.click.menuItem(this, event);
	},
	showItem: function(show) {
		if (this.isInvisible == show) {
			this.domItem.style.display = show ? "" : "none";
			this.isInvisible = !show;
			this.layoutParent && this.layoutParent.ensureItemVisibility(this, !show);
		}
	},
	_hideItemOnTablet: function() {
		var hidden = false;
		if (this.$item.$bind && typeof this.$item.$bind === "string" &&
			(this.$item.$bind.indexOf("$word") === 0 ||
				this.$item.$bind.indexOf("$excel") === 0 ||
				this.$item.$bind.indexOf("$pptslide") === 0)) {
			hidden = true;
		}
		// cvg by type
		else
		if (this.$type && typeof this.$type === "string" &&
			(this.$type.indexOf("application/syracuse-excel-worksheet") >= 0 ||
				this.$type.indexOf("application/syracuse-word-report") >= 0 ||
				this.$type.indexOf("application/syracuse-word-mailmerge") >= 0 ||
				this.$type.indexOf("application/syracuse-ppt-slide") >= 0)) {
			hidden = true;
		}
		// cvg by special name
		else
		if (this.$item.$bind && typeof this.$bind === "string" &&
			(this.$item.$bind.indexOf("cvgOffice") === 0)) {
			hidden = true;
		}
		return hidden;
	},
	setState: function(state) {
		if (state.$isHidden !== undefined) {
			this.showItem(!(this.$isHidden = state.$isHidden));
		}
	},
	disable: function($value) {
		syra_site.dom.disableItem(this.domItem, this.$isDisabled = $value || false);
	},
	setMenu: function($menu, record, outOfDate) {
		_setMenu(this, $menu, record, outOfDate);
	},
	dispose: function() {
		this.onItemInOut();
		syra_store.remove(this);
		syra_site.disposeObject(this);
	}
});