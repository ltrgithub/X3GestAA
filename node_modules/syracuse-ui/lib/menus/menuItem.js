"use strict";
var helpers = require('syracuse-core/lib/helpers');

function _showDiagnoses(menu, $delta){
    var $menu = menu.articleParent.$menus[menu.$item.$bind];
    if ($menu && $menu.$links) {
        var $binds;
        var $links = $menu.$links || {};
        if ($delta.$links) {
            $binds = Object.keys($delta.$links);
            for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                var $bind = $binds[ii];
                var $source = $delta.$links[$bind];
                var $target = $links[$bind] = $links[$bind] || {};
                var $props = Object.keys($source);
                for (var kk = 0, mm = $props.length; kk < mm; kk++) {
                    var $prop = $props[kk];
                    $target[$prop] = $source[$prop];
                }
            }
        }
        $binds = Object.keys($links);
        for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
            var $bind = $binds[ii];
            var $link = $links[$bind];
            $link.$bind = $bind + "-" + menu.id;
            $link.$url = menu.articleParent.formatMenuUrl($link);
        }
        var options = {};
        options.menu = menu;
        document.site.showDiagnoses({
            $links: $links,
            $diagnoses: $delta.$diagnoses
        }, menu.articleParent, options);
    }
}

function _onMenuItemClick(menuItem){
    var doClick = true;
    if (menuItem.boxParent) {
        doClick = menuItem.boxParent.onMenuClick ? menuItem.boxParent.onMenuClick(menuItem) : true;
        if (doClick) {
            doClick = menuItem.articleParent.onMenuClick ? menuItem.articleParent.onMenuClick(menuItem) : true;
        }
    }
    if (doClick) {
        if (menuItem.onMenuClick ? menuItem.onMenuClick() : true) {
            document.controller.executeMenu(menuItem);
        }
    }
    if (menuItem.subMenuParent) {
        menuItem.subMenuParent.onChildMenuItemClick(menuItem);
    }
}

function MenuItem(){

}

exports.MenuItem = helpers.defineClass(MenuItem, null, {
    loadBox: function(record){
        this.$skin = this.$item.$skin || "s-link";
        this.mn = document.createElement("a");
        this.mn.style.display = "none";
        this.mn.className = this.$skin + ((this.$item.$css) ? (" " + this.$item.$css) : "");
        this.mn.setAttribute("data-s-menu", this.id);
        this.mn.setAttribute("data-s-article", this.articleParent.id);
        var container = this.$$container[0];
        if (this.boxParent.isMenuGroup) {
            this.liParent = document.createElement("div");
            this.liParent.className = this.$skin + "-slot";
            this.liParent.style.display = "none";
            container = container.appendChild(this.liParent);
        }
        this.$$item = $(container.appendChild(this.mn));
        if (this.$item.$isDescriptionVisible) {
            this._description = document.createElement("div");
            this._description.className = this.$item.$skinDescription || (this.$skin + "-desc");
            this.$$container[0].appendChild(this._description);
        }
        
        if (this.$item.$bind) {
            this.articleParent.bindMenuItem(this, record);
        }
        else 
            if (this.$item.$link) {
                this.setMenu(this.$item.$link);
            }
    },
    getArticle: function(){
        if (!this.articleParent) {
            this.articleParent = this.boxParent ? this.boxParent.getArticle() : null;
        }
        return this.articleParent;
    },
    getTitle: function(){
        return this.$title;
    },
    setTitle: function($value){
        this.$title = $value;
        if (this.$$label) {
            if ($value.indexOf("{") < 0) {
                this.$$label.text($value);
            }
            else {
                this.boxParent._renderExpression($value, this.$$label);
            }
        }
        else {
            this.mn.title = $value;
        }
    },
    setDescription: function($value){
        this.$description = $value;
        if (this._description) {
            this._description.textContent = $value;
        }
        else {
            this.mn.title = $value;
        }
    },
    hide: function($value){
        this.$item.$isHidden = $value;
        this.mn.style.display = !$value ? "" : "none"
        if (this.liParent) {
            this.liParent.style.display = !$value ? "" : "none";
        }
    },
    disable: function($value){
        document.site.disableItem(this.$$item[0], this.$isDisabled = $value || false);
    },
    click: function(){
        var self = this;
        document.site.onBeforClick();
        if (!self.$isDisabled) {
            if (self.page) {
                var options = {
                    menuItem: self,
                    doEvent: function(){
                        _onMenuItemClick(self);
                    }
                };
                if (self.boxParent && self.boxParent.contextField) {
                    //boxParent is menubox of contextMenu
                    self.contextField = options.field = self.boxParent.contextField;
                }
                self.page.externalAdapter.onMenuItemClick(options);
            }
            else {
                _onMenuItemClick(self);
            }
        }
    },
    _setIconMenu: function(){
        this.$icon = this.$item.$icon || {};
        if (!this.iconValue) {
            this.iconValue = document.createElement("div");
            this.iconValue.className = this.mn.className + "-icon";
            this.$$item.empty().prepend(this.iconValue);
            if (this.$icon.$mode != "icon") {
                var div = document.createElement("div");
                div.className = this.mn.className + "-label";
                this.$$label = $(this.$$item[0].appendChild(div));
            }
        }
        this._setIconValue();
    },
    _setIconValue: function(){
        var name = this.value || this.$item.$bind.replace("$", "");
        if (this.$icon.$useCss) {
            this.iconValue.className += " " + this.iconValue.className + "-" + name;
        }
        else {
            var $path = document.site.$item.$iconPath + (this.$icon.$path || "");
            this.iconValue.style.backgroundImage = "url('" + $path + name + ".png')";
        }
    },
    setValue: function(newValue){
        this.value = newValue;
        if (this.iconValue) {
            this._setIconValue();
        }
    },
    setMenu: function($menu, record){
        var self = this;
        this.$isSetMenuOn = true; //hack for menus.loadbox, avoid calling unnecessary setMenu 
        var article = this.articleParent;
        if ($menu) {
            if (!this._init) {
                this.articleParent.onMenuDataFilled();
                if (this.$item.$isHidden) {
                    this.hide(true);
                }
                else {
                    this.mn.style.display = "";
                    if (this.liParent) {
                        this.liParent.style.display = "";
                    }
                }
                if (!$menu.$title && this.$item.$title) {
                    $menu.$title = this.$item.$title; //use for pager (next prev) currently
                }
                if (this.$item.$value) {
                    this.value = this.$item.$value;
                }
                if (this.$item.$icon) {
                    this._setIconMenu();
                }
                else {
                    if (!this.$item.$noText) {
                        this.$$label = this.$$item;
                    }
                }
                this._init = true;
            }
            if ($menu.$title !== undefined) {
                this.setTitle($menu.$title);
            }
            if ($menu.$description !== undefined) {
                this.setDescription($menu.$description);
            }
            if ($menu.$isHidden !== undefined) {
                this.hide($menu.$isHidden);
            }
            if ($menu.$isDisabled !== undefined) {
                this.disable($menu.$isDisabled);
            }
            var props = Object.keys($menu);
            for (var ii = 0, jj = props.length; ii < jj; ii++) {
                var prop = props[ii];
                this[prop] = $menu[prop];
            }
            if (this.$isDisabled && $menu.$isRequested === false) {
                if (this.$item.onServerRequest ? this.$item.onServerRequest(this) : true) {
                    if ($menu.$diagnoses) {
                        _showDiagnoses(this, $menu);
                    }
                    if ($menu.$clientAgent) {
                        var agent = document.site.agents[$menu.$clientAgent.$id];
                        if (agent) {
                            agent[$menu.$clientAgent.$action](this, $menu, record);
                        }
                    }
                    if ($menu.$links && $menu.$links.$location) {
                        var $url = $menu.$links.$location.$url;
                        setTimeout(function(){
                            document.site.unload();
                            window.open($url, "_self");
                        }, 100);
                    }
                }
                $menu.$isRequested = true; //avoid procsessing action for other menu bound to $menu (create menu for sample)
            }
        }
        if (this.$type && this.$type.indexOf('json') == -1) {
            if (this.$url && (this.$url.indexOf("format=") < 0)) { // TODO: improve this hack
                this.$url += "&format=" +
                this.articleParent.formatMenuUrl({
                    $url: this.$type,
                    $parameters: this.$parameters
                }, record);
            }
            this.mn.setAttribute("target", this.$target = "blank");
            this.mn.setAttribute("href", this.$url = this.articleParent.formatMenuUrl(this, record));
            this.value = this.$type.replace("application/", "");
            if (!this.$item.$icon) {
                this.$item.$icon = {
                    $path: "file/s-link-"
                };
            }
            this._setIconMenu();
            if (this.$title !== undefined) {
                this.setTitle(this.$title);
            }
        }
        else {
            if (this.mn) {
                if (this.$url) {
                    this.mn.setAttribute("href", "?url=" + encodeURIComponent(this.$url = this.articleParent.formatMenuUrl(this, record)));
                    if (this.$url.indexOf("http") >= 0 && this.$url.indexOf(window.location.host) < 0) {
                        this.mn.setAttribute("target", this.$target = "blank");
                    }
                }
                else {
                    this.mn.setAttribute("href", "#");
                }
            }
        }
        if (this.$target == "blank") {
            this.mn.className += " s-external-link";
        }
    },
    dispose: function(){
        delete this.contextField;
        if (this.articleParent) {
            this.articleParent.unbindMenuItem(this, false);
        }
        this.article = this.articleParent = this.page = this.onMenuClick = this.$item = this.liParent = null;
        this.$$container = this.mn = this.$$item = this.$$label = this.$title = null;
        this.$url = this.subMenuParent = null;
    }
});
