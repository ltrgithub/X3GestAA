"use strict";
var helpers = require('syracuse-core/lib/helpers');

function _showDiagnoses(menu, $delta) {
	var $menu = menu.articleParent.$menus[menu.$item.$bind];
	if ($menu) {
		if ($menu.$links) {
			var $binds;
			var $links = $menu.$links || {};
			if ($delta.$links) {
				$binds = Object.keys($delta.$links);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					var $source = $delta.$links[$bind];
					var $target = $links[$bind] = $links[$bind] || {};
					var $props = Object.keys($source);
					for (var kk = 0, mm = $props.length; kk < mm; kk++) {
						var $prop = $props[kk];
						$target[$prop] = $source[$prop];
					}
				}
			}
			$binds = Object.keys($links);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var $link = $links[$bind];
				$link.$bind = $bind + "-" + menu.id;
				$link.$url = document.site.urlMaker.formatMenuUrl(menu.articleParent, $link);
			}
			document.site.showDiagnoses({
				$links: $links,
				$diagnoses: $delta.$diagnoses
			}, menu.articleParent, {
				menu: menu
			});
		} else {
			if ($delta.$diagnoses) {
				document.site.showDiagnoses({
					$diagnoses: $delta.$diagnoses
				}, menu.articleParent, {
					menu: menu
				});
			}
		}
	}
}

function MenuItem() {

}

exports.MenuItem = helpers.defineClass(MenuItem, null, {
	highlight: function(show) {
		document.site.dom.toggleClass(this.domItem, "s-highlight", show);
	},
	ensureLayoutMode: function() {
		if (this.layoutParent) {
			this.layoutParent.ensureLayoutSlot(this);
		}
	},
	setStyle: function($style) {
		if ($style === null) {
			if (this.$style) {
				document.site.dom.toggleClass(this._label, this.$style, false);
				document.site.dom.toggleClass(this.domItem, this.$style, false);
			}
			this.$style = null;
		} else {
			this.$style = "s-cst-sty-" + $style;
			document.site.dom.toggleClass(this._label, this.$style, true);
			document.site.dom.toggleClass(this.domItem, this.$style, true);
		}
	},
	loadBox: function(record) {
		this.$designLevel = "field";
		this.isMenuItem = true;
		this.domItem = document.createElement("a");

		this.domItem.setAttribute("data-s-menu", this.id);
		this.domItem.setAttribute("data-s-inout", this.id);
		this.articleParent.setArticleId(this.domItem);
		if (this.$item.$skin == "s-mn-h2-link") {
			delete this.$item.$skin;
		}

		this.$skin = this.$item.$skin;
		if (this.$skin == "s-page-menus-link") {
			this.$skin = "s-mn-bar-main-link";
		} else {
			if (!this.$skin) {
				this.$skin = this.page.isDashBoard ? "s-dash-h2-link" : "s-page-link";
			}
		}
		this.layoutSlot.appendChild(this.domItem);
		this.showItem(false);

		this.domItem.className = this.$skin;
		if (this.$item.$css) {
			this.domItem.className += " " + this.$item.$css;
		}
		this.$$item = $(this.domItem);
		this._label = document.createElement("div");
		this._label.className = this.$skin + "-label";
		if (!(this.$subRecordKey = this.$item.$subRecordKey)) {
			if (this.boxParent && this.boxParent.contextField) {
				this.contextField = this.boxParent.contextField;
				if (this.contextField.$item) {
					this.$subRecordKey = this.contextField.$item.$bind;
				}
			}
		}
		if (this.$item.$style) {
			this.setStyle(this.$item.$style);
		}
		if (this.boxParent.isMenuGroup) {
			if (this.boxParent.$item.$style) {
				var $style = "s-menus-sty-" + this.boxParent.$item.$style;
				document.site.dom.toggleClass(this._label, $style, true);
				document.site.dom.toggleClass(this.domItem, $style, true);
			}
		}
		this.domItem.appendChild(this._label);
		if (this.$item.$isDescriptionVisible) {
			this._description = document.createElement("div");
			this._description.className = this.$item.$skinDescription || (this.$skin + "-desc");
			// this.layoutSlot.appendChild(this._description);
			this.domItem.appendChild(this._description);
		}

		if (this.$item.$bind) {
			var bounds = this.articleParent.menuItems[this.$item.$bind];
			if (!bounds) {
				bounds = this.articleParent.menuItems[this.$item.$bind] = [];
			}
			bounds.push(this);
			var $menu = this.articleParent.$menus[this.$item.$bind];
			if ($menu) {
				this.setMenu($menu, record);
			}
		} else {
			if (this.$item.$link) {
				this.setMenu(this.$item.$link);
			}
		}
		this.ensureLayoutMode();
	},
	onItemEnterLeave: function(event) {
		switch (event.type) {
			case "mouseenter":
				if (!this.domItem.title && this.domItem.children.length > 0 && document.site.isEllipsisActive(this.domItem.children[0])) {
					this.domItem.title = this.getTitle();
				}
				break;
		}
	},
	getArticle: function() {
		if (!this.articleParent) {
			this.articleParent = this.boxParent ? this.boxParent.getArticle() : null;
		}
		return this.articleParent;
	},
	getTitle: function() {
		if (this.titleText == null && this.$title) {
			this.titleText = this.$title || "";
			if (this.titleText.length > 0 && this.titleText[1] == "@") {
				this.titleText = document.site.expressionMaker.render(this.boxParent, this.titleText);
			}
		}
		return this.titleText || "";
	},
	setTitle: function($value) {
		this.$title = $value;
		delete this.titleText;
		var title = this.getTitle();
		if (this._label) {
			if (this.$item.$format == '$html') {
				this._label.innerHTML = title;
			} else {
				this._label.textContent = title;
			}
			if (this.$item.$icon) {
				this.domItem.title = title;
			}
		} else {
			this.domItem.title = title;
		}
	},
	setDescription: function($value) {
		this.$description = $value;
		if (this._description) {
			this._description.textContent = $value;
		} else {
			this.domItem.title = $value;
		}
	},
	setState: function(state) {
		if (state.$isHidden !== undefined) {
			this.showItem(!(this.$isHidden = state.$isHidden));
		}
	},
	showItem: function(show) {
		this.domItem.style.display = show ? "" : "none";
		this.isInvisible = !show;
		if (this.layoutParent) {
			this.layoutParent.ensureItemVisibility(this, !show);
		}
	},
	disable: function($value) {
		document.site.dom.disableItem(this.domItem, this.$isDisabled = $value || false);
	},
	click: function(event) {
		var self = this;
		document.site.onBeforClick(undefined, event);
		if (!self.$isDisabled) {
			if (self.page) {
				if (self.isNoSyracuseUrl) {
					event.syraRetValue = true;
					return;
				}
				if (self.page.checkMenuDesignValidaty(self)) {
					var options = {
						isSiteMenu: (self.page == document.site),
						menuItem: self,
						doEvent: function() {
							self._onMenuItemClick(event);
						}
					};
					if (self.boxParent && self.boxParent.contextField) {
						//boxParent is menubox of contextMenu
						self.contextField = options.field = self.boxParent.contextField;
						if (self.contextField && self.contextField.$item && !self.$subRecordKey) {
							self.$subRecordKey = self.contextField.$item.$bind;
						}
					}
					var page = self.page.mainPage,
						dialog = document.site.dialogManager.getTopDialogPage();
					if (dialog && dialog._content && !dialog._content.disposed) {
						page = dialog._content;
					}
					if (!page || page.disposed) {
						page = self.page;
					}
					if (page && !page.disposed && page.externalAdapter) {
						page.externalAdapter.onMenuItemClick(options);
					}
				}
			} else {
				self._onMenuItemClick(event);
			}
		}
	},
	_onMenuItemClick: function(event) {
		var doClick = true;
		var self = this;
		if (doClick && self.contextField) {
			doClick = self.contextField.onMenuClick ? self.contextField.onMenuClick(self, event) : true;
		}
		if (doClick && self.boxParent) {
			doClick = self.boxParent.onMenuClick ? self.boxParent.onMenuClick(self, event) : true;
			if (doClick) {
				doClick = self.articleParent.onMenuClick ? self.articleParent.onMenuClick(self, event) : true;
			}
		}

		if (doClick) {
			if (self.articleParent != self.page) {
				doClick = self.page.onMenuClick ? self.page.onMenuClick(self, event) : true;
			}
			if (doClick && (self.onMenuClick ? self.onMenuClick(event) : true)) {
				document.controller.executeMenu(self);
			}
		}
		setTimeout(function() {
			if (self) {
				var parent = self.boxParent;
				while (parent && !parent.disposed) {
					if (parent._popupMenus) {
						parent._popupMenus.close();
						break;
					}
					parent = parent.boxParent;
				}
			}
		}, 10);
	},
	_setIconMenu: function() {
		this.$icon = this.$item.$icon || {};
		if (!this.iconValue) {
			this.iconValue = document.createElement("div");
			this.iconValue.className = this.$skin + "-icon";
			if (this.$item.$css) {
				this.iconValue.className += " " + this.$item.$css;
			}
			this.domItem.insertBefore(this.iconValue, this._label);
			if (this.$icon.$mode == "icon") {
				this._label.style.display = "none";
				this.domItem.className += " s-icon";
			} else {
				this.domItem.className += " s-icon-label";
				this.iconValue.className += " s-label";
			}
			this._label.className += " s-icon";
		}
		this._setIconValue();
	},
	_setIconValue: function() {
		var name = this.$iconValue || this.value || this.$icon.$value;
		if (!name) {
			name = this.$item.$sourceBind || this.$item.$bind;
			name = name.replace("$", "");
		}
		var $path = document.site.$item.$iconPath + (this.$icon.$path || "");
		this.iconValue.style.backgroundImage = "url('" + $path + name + ".png')";
	},
	setValue: function(newValue) {
		this.value = newValue;
		if (this.iconValue) {
			this._setIconValue();
		}
	},
	isHrefEnabled: function() {
		return !this.$isAction && !(this.$parameters && (this.$parameters.$actions || this.$parameters.$properties)) && !(this.$method && this.$method != "GET");
	},
	setVariants: function($variants) {
		if (!this.childVariants) {
			this.childVariants = {};
		}
		var $keys = Object.keys($variants);
		var $startIndex = this.layoutParent.$item.$items.indexOf(this.$item);
		for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
			if (!this.childVariants[$keys[ii]]) {
				var $newItem = helpers.object.clone(this.$item, true);
				$newItem.$variantItemKey = $keys[ii];
				var $variant = $variants[$keys[ii]];
				$newItem.$title = this.$title;
				if (!$variant.$title) {
					$variant.$title = this.$title;
					if (this.articleParent.$field) {
						if (this.articleParent.$field.$item && this.articleParent.$field.$item.$variants) {
							var $field = this.articleParent.$field.$item.$variants[$newItem.$variantItemKey];
							if ($field && $field.$title) {
								$variant.$title += " " + $field.$title;
							}
						}
					}
				}
				(this.childVariants[$keys[ii]] = this.layoutParent.createChildItem($newItem, null, ++$startIndex)).$isAction = this.$isAction;
			}
		}
		this.showItem(false);
	},
	setMenu: function($menu, record) {
		if ($menu) {
			if ($menu.$type) {
				this.$sourceType = $menu.$type;
			}
			if (!this._isInit) {
				this.articleParent.onMenuDataFilled && this.articleParent.onMenuDataFilled(this);
				this.showItem(true);
				this.setState(this.$item);
				if (!$menu.$title && this.$item.$title) {
					$menu.$title = this.$item.$title; //use for pager (next prev) currently
				}
				if (this.$item.$value) {
					this.value = this.$item.$value;
				}
				if (this.$item.$icon) {
					this._setIconMenu();
				} else {
					if (this.$item.$noText) {
						this._label.style.display = "none";
					}
				}
				this._isInit = true;
			}
			if ($menu.$isSeparator || $menu.$title == "-") {
				this.domItem.className = this.$skin + "-separator";
			} else {
				if ($menu.$title !== undefined) {
					this.setTitle($menu.$title);
				}
				if ($menu.$iconValue !== undefined) {
					this.$iconValue = $menu.$iconValue;
					this._setIconValue();
				}
				if ($menu.$description !== undefined) {
					this.setDescription($menu.$description);
				}
				this.setState($menu);

				if ($menu.$isDisabled !== undefined) {
					this.disable($menu.$isDisabled);
				}
				if ($menu.$style !== undefined) {
					this.setStyle($menu.$style);
				}
				var props = Object.keys($menu);
				for (var ii = 0, jj = props.length; ii < jj; ii++) {
					var prop = props[ii];
					this[prop] = $menu[prop];
				}
				if ((this.$sourceBind || this.$item.$bind) == "$lazyload") {
					if (this.domItem.parentNode) {
						this.domItem.parentNode.removeChild(this.domItem);
					}
				}
				if ($menu.$isDisabled && $menu.$isRequested === false) {
					if (this.$item.onServerRequest ? this.$item.onServerRequest(this) : true) {
						if (this.articleParent.onAfterActionMenuExecute) {
							if (this.articleParent.onAfterActionMenuExecute(this, $menu) === false) {
								$menu.$isRequested = true;
								return;
							}
						}
						if ($menu.$diagnoses) {
							_showDiagnoses(this, $menu);
						}
						if ($menu.$clientAgent) {
							var agent = document.site.agents[$menu.$clientAgent.$clientId];
							if (agent) {
								agent[$menu.$clientAgent.$action](this, $menu, record);
							}
						}
						if ($menu.$links && $menu.$links.$location) {
							var $url = $menu.$links.$location.$url;
							setTimeout(function() {
								document.site.unload();
								window.open($url, "_self");
							}, 100);
						}

						// TODO
						// job tracking ui
						if ($menu.$location && $menu.$state) {
							document.site.registerJobSyra($menu.$location, $menu.$state, this.$title, $menu.$location.split(/'/)[1]);
						}


					}
					$menu.$isRequested = true; //avoid processing action for other menu bound to $menu (create menu for sample)
				}
				if ($menu.$variants) {
					if (this.$item.$variantItemKey) {
						this.setMenu($menu.$variants[this.$item.$variantItemKey], record);

					} else {
						this.setVariants($menu.$variants);
					}
				}
			}
		}
		if (!this.$sourceUrl || ($menu && $menu.$url)) {
			this.$sourceUrl = this.$url;
			if (this.$type && (this.$type.indexOf('json') == -1) && (this.$type != "html")) {
				if (this.$sourceUrl && (this.$sourceUrl.indexOf("format=") < 0)) { // TODO: improve this hack
					this.$sourceUrl += (this.$sourceUrl.indexOf("?") >= 0 ? "&" : "?") + "format=" +
						document.site.urlMaker.formatMenuUrl(this.articleParent, {
							$url: this.$type,
							$parameters: this.$parameters
						}, record);
				}
			}
		}
		this.$url = this.$sourceUrl;

		if (this.$sourceType && (this.$sourceType.indexOf('json') == -1) && (this.$sourceType != "html")) {
			if (this.isHrefEnabled()) {
				document.site.history.setHref(this, record, true);
			}
			this.value = this.$sourceType.replace("application/", "").replace("/", "-");
			if (!this.$item.$icon) {
				this.$item.$icon = {
					$path: "file/s-link-"
				};
			}
			this._setIconMenu();
			if (this.$title !== undefined) {
				this.setTitle(this.$title);
			}
		} else {
			if (this.domItem && this.$url && this.isHrefEnabled()) {
				document.site.history.setHref(this, record);
			}
		}
		if (this.$target == "blank") {
			this._label.className += " s-external-link";
		}
	},
	isRepresentationUrl: function() {
		return !(this.$sourceType && (this.$sourceType.indexOf('json') == -1));
	},
	dispose: function() {
		this.contextField = this.detailField = this.$vignettes = this.rowSeparator = this._description = this.delta = null;
		this.article = this.onMenuClick = this.$item = this.layoutSlot = null;
		this.$url = this.domItem = this.$$item = this._label = this.$title = this.$icon = this.iconValue = null;
		this.layoutParent = this.boxParent = this.articleParent = this.page = this.childVariants = null;
	}
});