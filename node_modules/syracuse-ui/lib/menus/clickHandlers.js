"use strict";
var _dynamicMenu;

function _clearDynamicMenu(parent) {
	if (_dynamicMenu) {
		if (parent && _dynamicMenu.contextField != parent) {
			return;
		}
		_dynamicMenu.articleParent && syra_item.remove(_dynamicMenu, true, true);
		_dynamicMenu = null;
	}
}

function _fireBind(scope, $bind) {
	var options = {
		scope: scope,
		$bind: $bind
	};
	exports.fire(options);
	return options.fired;
}


exports.save = function(scope) {
	return _fireBind(scope, "$save");
};
exports.prev = function(scope, toFirst) {
	return _fireBind(scope, toFirst ? "$first" : "$previous");
};

exports.next = function(scope, toLast) {
	return _fireBind(scope, toLast ? "$last" : "$next");
};

exports.navigation = function() {
	var menu = syra_site.menuItems && syra_site.menuItems.$navigation;
	menu = menu && menu[0];
	menu &&
		exports.fire({
			menu: menu
		});
};

exports.home = function() {
	return _fireBind(syra_site, "$home");
};

exports.detail = function(scope) {
	return _fireBind(scope, "$detail");
};


exports.create = function(scope) {
	return _fireBind(scope, scope.isFusionPage ? "1115" : "$create");
};

exports.contextualMenu = function(field) {
	if (field.picker_menus) {
		setTimeout(function() {
			field.picker_menus.link.click();
		}, 10);
		return true;
	}
};


exports.selector = function(field, dateTimeOnly) {
	if (!field.$isDisabled && !field.$isReadOnly) {
		var picker = (!dateTimeOnly && (field.picker_$lookup || field.picker_choice)) || field.picker_date || field.picker_time;
		if (picker) {
			setTimeout(function() {
				picker.link.click();
			}, 10);
			return true;
		}
	}
};
exports.tunnel = function(field) {
	if (field.picker_$tunnel) {
		setTimeout(function() {
			field.picker_$tunnel.link.click();
		}, 10);
	} else {
		if (field.$menusPopup && field.$menusPopup.$tunnel) {
			field.page.externalAdapter.onFieldClickPicker({
				field: field,
				pickerType: "$tunnel"
			});
		}
	}
};

exports.print = function(scope) {
	return _fireBind(scope, $print);
};

exports.deleteItem = function(scope) {
	return _fireBind(scope, "$delete");
};
exports.recordCard = function(scope) {
	return _fireBind(scope, "$recordCard");
};
exports.refreshPageData = function(page) {
	if (page.isFusionPage) {
		exports.fire({
			scope: page,
			$bind: "2823"
		});
	} else {
		if (page.isLandingPage) {
			page.refreshBtn.link.click();
		} else {
			page.$autoFetch &&
				page.fetch({}, function(data, response, requestUrl) {
					if (!page || !page.disposed) {
						page.startChange();
						page.applyChange(data, response, requestUrl);
						page.endChange();
					}
				});
		}
	}
};

exports.showFieldProperty = function(scope) {
	if (scope.page.isFusionPage) {
		return _fireBind(scope.page, "1172");
	} else {

	}
};


exports.fire = function(options) {
	var menu;
	if (!options.menu) {
		if (!options.scope) {
			if (options.$scope) {
				options.scope = syra_item.addRecord(options.$scope);
			} else {
				options.scope = syra_site.mainPage;
			}
		}
		if (options.scope) {
			var scope = options.scope;
			if (options.$link) {
				options.$bind = scope.id + "-syra-dynamic-menu";
				scope.$menus[options.$bind] = null;
				var $links = {};
				$links[options.$bind] = options.$link;
				scope.applyChange({
					$links: $links
				});
			}
			if (options.$bind) {
				options.menu = scope.menuItems && scope.menuItems[options.$bind];
				options.menu = options.menu && options.menu[0];
				if (!options.menu) {
					var $menu = scope.$menus && scope.$menus[options.$bind];
					if ($menu) {
						var article = (scope.isDesktopPage || scope.isRecordArticle) ? scope : scope.articleParent;
						_clearDynamicMenu();
						options.menu = _dynamicMenu = scope.page.addItem(null, {
							$category: "link",
							$bind: $menu.$bind,
							$isAction: $menu.$isAction
						}, article);
						options.menu.contextField = scope;
					}
				}
				if (options.menu) {
					options.fired = true;
					options.menu.$url = syra_url.formatMenuUrl(options.menu.articleParent, options.menu);
				}
			}
		}
	}
	if (!options.menu.$isDisabled) {
		var page = options.menu.page;
		if (page) {
			if (options.menu.isNoSyracuseUrl) {
				syra_url.history.setHref(options.menu);
				if (options.event) {
					options.event.syraRetValue = true;
				} else {
					window.open(options.menu.$url, "_blank");
				}
				return;
			}
			var isValidated = true;
			if (options.menu.$bind == "$save" || options.menu.$bind == "$saveAs") {
				isValidated = syra_form.validate(page);
			}
			if (isValidated) {
				var scope;
				if (options.menu.boxParent && options.menu.boxParent.contextField) {
					options.menu.contextField = scope = options.menu.boxParent.contextField;
					if (scope && scope.$item && !options.menu.$subRecordKey) {
						options.menu.$subRecordKey = scope.$item.$bind;
					}
				}
				if (page == syra_site) {
					if (page.mainPage && !page.mainPage.disposed && page.mainPage.isFusionPage) {
						page = page.mainPage;
					}
				}
				if (page && !page.disposed && page.externalAdapter) {
					page.externalAdapter.onMenuItemClick({
						menuItem: options.menu,
						field: scope,
						doEvent: function() {
							_runFire(options);
						}
					});
				}
			}
		} else {
			_runFire(options);
		}
	}
};

function _runFire(options) {
	var doClick = true;
	var field = options.menu.contextField;
	if (field && field.onMenuClick) {
		doClick = field.onMenuClick(options);
	}
	if (doClick && options.menu.$item.$ownerId) {
		var owner = syra_item.get(options.menu.$item.$ownerId);
		if (owner && owner.onMenuClick) {
			doClick = owner.onMenuClick(options);
		}
	}

	if (doClick && options.menu.boxParent) {
		doClick = options.menu.boxParent.onMenuClick ? options.menu.boxParent.onMenuClick(options) : true;
		if (doClick && (options.menu.boxParent != options.menu.articleParent)) {
			doClick = options.menu.articleParent.onMenuClick ? options.menu.articleParent.onMenuClick(options) : true;
		}
	}

	if (doClick) {
		if (options.menu.articleParent != options.menu.page) {
			doClick = options.menu.page.onMenuClick ? options.menu.page.onMenuClick(options) : true;
		}
		if (doClick && (options.menu.onMenuClick ? options.menu.onMenuClick(options) : true)) {
			//click on middle button of mousewheel open link in new tab
			var $prevTarget = undefined;
			var isMiddleButton = (options.event && options.event.which) == 2;
			if (isMiddleButton) {
				$prevTarget = options.menu.$target;
				options.menu.$target = "blank";
			}
			syra_router.executeMenu(options.menu);
			if (isMiddleButton) {
				if (!$prevTarget) {
					delete options.menu.$target;
				} else {
					options.menu.$target = $prevTarget;
				}
			}
		}
	}
	setTimeout(function() {
		if (options.menu) {
			var parent = options.menu.boxParent;
			while (parent && !parent.disposed) {
				if (parent.menusPopup) {
					parent.menusPopup.close();
					break;
				}
				parent = parent.boxParent;
			}
		}
	}, 10);
}


exports.dispose = function(parent) {
	_clearDynamicMenu(parent);
};