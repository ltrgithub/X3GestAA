"use strict";
var helpers = require('syracuse-core/lib/helpers');
var SectionBlock = require('syracuse-ui/lib/article/sectionBlock').SectionBlock;

function MenuGroup(){
}

exports.MenuGroup = helpers.defineClass(MenuGroup, SectionBlock, {
    initializeSection: function($item){
        if (!$item.$skin) {
            $item.$skin = "s-mn-h2";
        }
        SectionBlock.prototype.initializeSection.call(this, $item);
    },
    loadBox: function(){
        if (this.isMenuGroupRoot = (!this.boxParent.isMenuGroup)) {
            this.ensureLinkSettings(this.$item, this.$item.$isCollapsable);
            this.menuGroupRoot = this;
        }
        else {
            var parent = this.boxParent;
            while (parent) {
                if (parent.menuGroupRoot) {
                    this.menuGroupRoot = parent.menuGroupRoot;
                    break;
                }
            }
        }
        this.isMenuGroup = true;
        if (this.$item.$isHidden === undefined) {
            this.$item.$isHidden = true;
        }
        this.$item.$isContentLoaded = true;
        
        this._$registeredMenus = {};
        
        this.$item.$name = this.$item.$name || this.$id; //used for authoring
        this.drawBox();
        if (this.$item.$isMenusBag) {
            this.articleParent.menuBoxes.push(this);
        }
    },
    ensureLayoutMode: function(){
        SectionBlock.prototype.ensureLayoutMode.call(this);
        if (this._item && this.boxParent.isMenuGroup && !this.boxParent.isMenuGroupRoot) {
            if (this.layoutParent.$layout.$layoutType != "row") {
                this._item.className += " s-menu-sub";
            }
        }
    },
    ensureSkin: function(){
        this.$authoringLevel = "block";
        this.$skin = this.$skin || this.$item.$skin;
    },
    ensureVisibility: function($bind, menuItem){
        if (this.$item.$isHidden) {
            this.setState({
                $isHidden: false
            });
            if (this.boxParent.isMenuGroup) {
                this.boxParent.ensureVisibility($bind, menuItem);
            }
            if (this.$item.onEnsureVisibility) {
                this.$item.onEnsureVisibility(this, $bind, menuItem);
            }
        }
        else {
            if (this.$item.onEnsureVisibility) {
                this.$item.onEnsureVisibility(this, $bind, menuItem);
            }
        }
    },
    ensureLinkSettings: function($item, $isCollapsable, $layoutItems){
        var $skinLink = $item.$itemSkin || $item.$skin + "-link";
        var $items = $layoutItems || $item.$layout.$items;
        if ($items) {
            for (var ii = 0, jj = $items.length; ii < jj; ii++) {
                var $child = $items[ii];
                if ($child.$bind) {
                    if (!$child.$category || $child.$category == "link") {
                        $child.$category = "link";
                        if (!$child.$skin) {
                            $child.$skin = $skinLink;
                        }
                        if ($item.$itemIcon && $child.$icon === undefined) {
                            $child.$icon = $item.$itemIcon;
                        }
                        if ($item.$isDescriptionVisible && $child.$isDescriptionVisible === undefined) {
                            $child.$isDescriptionVisible = true;
                        }
                    }
                }
                else {
                    if ($child.$layout || $child.$category == "menus") {
                        $child.$skin = $child.$skin || $item.$skin;
                        $child.$itemSkin = $child.$itemSkin || $item.$itemSkin
                        $child.$category = $child.$category || "menus";
                        if (!$child.$layout) {
                            $child.$layout = {};
                        }
                        if (!$child.$layout.$items) {
                            $child.$layout.$items = [];
                        }
                        if ($child.$isBoxCollapsable === undefined) {
                            $child.$isBoxCollapsable = $isCollapsable;
                        }
                        this.ensureLinkSettings($child, $child.$isBoxCollapsable);
                    }
                    else 
                        if ($child.$layoutType) {
                            this.ensureLinkSettings($item, $isCollapsable, $child.$items); //$item is the box parent
                        }
                }
            }
        }
        
    },
    _registerMenuItem: function($bind, $isAction, $icon){
        if (!this._$registeredMenus[$bind]) {
            this.$item.$layout.$items.push(this._$registeredMenus[$bind] = {
                $category: "link",
                $bind: $bind,
                $skin: this.$item.$itemSkin || (this.$skin + "-link"),
                $isAction: $isAction,
                $icon: $icon || this.$itemIcon,
                $isDescriptionVisible: this.$isDescriptionVisible
            });
        }
        return this._$registeredMenus[$bind];
    },
    _loadNewMenuItem: function($bind, $isAction, $icon){
        var newItem;
        var $menu = this._registerMenuItem($bind, $isAction, $icon);
        if (this.layoutContent) {
            //no layoutContent if popup
            this.layoutContent.isItemRegisterDisable = true;
            newItem = this.layoutContent.createChildItem($menu);
            this.layoutContent.isItemRegisterDisable = false;
        }
        else {
            this.ensureVisibility($bind);
        }
        return newItem;
    },
    _ensurePrivateMenus: function($menus, $menuType, $isAction){
        var $links = $menus[$menuType];
        if ($links) {
            var ids = Object.keys($links);
            for (var ii = 0, jj = ids.length; ii < jj; ii++) {
                var id = ids[ii];
                var prefixId = id;
                var isValidate = true;
                if (this.menuGroupRoot.contextField) {
                    isValidate = this.menuGroupRoot.contextField.filterMenu(id);
                }
                if (isValidate) {
                    prefixId = this.id + "-" + prefixId;
                    var $menu = $links[id];
                    if (!this.articleParent.menuItems[prefixId]) {
                        //a revoir avec le nouveau chargement ditem dans layout                    
                        var newItem = this._loadNewMenuItem(prefixId, $isAction);
                        $menu.$isAction = $isAction;
                        $menu.$menuType = $menuType;
                        $menu.$bind = prefixId;
                        $menu.$sourceBind = id;
                        $menu.$ownerGroupId = this.id;
                        this.articleParent.$menus[prefixId] = $menu;
                        if (newItem) {
                            newItem.setMenu($menu, this.articleParent.dataset);
                        }
                    }
                }
            }
        }
    },
    ensurePrivateMenus: function($menus){
        this._ensurePrivateMenus($menus, "$links");
        this._ensurePrivateMenus($menus, "$actions", true);
    },
    _renderLayoutContent: function(){
        if (this.$item.$isMenusBag && this.articleParent.$menus) {
            var $binds = Object.keys(this.articleParent.$menus);
            for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
                var $bind = $binds[ii];
                var $menu = this.articleParent.$menus[$bind];
                if (!($menu.$ownerGroupId && $menu.$ownerGroupId != this.id)) {
                    var item = this.articleParent.menuItems[$bind];
                    if (!item || (item.length == 0)) {
                        this._registerMenuItem($bind, $menu.$isAction);
                        //push only item load is done box renderLayoutContent
                    }
                }
            }
        }
        SectionBlock.prototype._renderLayoutContent.call(this);
    },
    addMenuItem: function($menu, record){
        this._loadNewMenuItem($menu.$bind, $menu.$isAction, $menu.$icon);
    },
    unload: function(){
        if (this.$item.$isOwner) {
            for (var ii = 0, jj = this.$item.$layout.$items.length; ii < jj; ii++) {
                var $item = this.$item.$layout.$items[ii];
                var menuItems = this.articleParent.menuItems[$item.$bind];
                if (menuItems) {
                    for (var mm = 0, kk = menuItems.length; mm < kk; mm++) {
                        this.articleParent.removeItem(menuItems[mm]);
                    }
                    delete this.articleParent.menuItems[$item.$bind];
                }
                delete this.articleParent.$menus[$item.$bind];
            }
        }
        this.articleParent.removeItem(this, true, true);//remove dom
    },
    dispose: function(){
        if (this.$item.onEnsureVisibility) {
            this.$item.onEnsureVisibility = null;
        }
        this.menuGroupRoot = this.contextField = this._$registeredMenus = null;
        SectionBlock.prototype.dispose.call(this);
    }
});
