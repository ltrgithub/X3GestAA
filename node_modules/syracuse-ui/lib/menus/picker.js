"use strict";

var _listMenuBinds = ["$edit", "$create", "$delete", "$details", "$design"];

exports.menus = {
	add: function(field) {
		return syra_button.addFieldPicker({
			parent: field,
			pickerId: "menus",
			fontIcon: "menus",
			text: syra_local.flActions,
			shortCutTip: (field.isField && !field.isArrayField) ? syra_shortCuts.tip.contextMenu : null,
			click: this.onClick
		});
	},
	onClick: function() {
		exports.menus.showPopup({
			field: this.parent,
			picker: this
		});
	},
	show: function(field) {
		if (field.picker_menus) {
			var show = field.$isEditMode || field.hasValue();
			syra_button.hide(field.picker_menus, !show);
			if (!field.picker_menus.link.parentNode && field.onAddMenuPicker) {
				field.onAddMenuPicker(field.picker_menus);
			}
		}
	},
	showPopup: function(options) {
		if (options.field) {
			if (!options.field.menusPopup) {
				var $item = {
					$noText: true,
					$title: syra_local.fieldActions,
					$id: options.field.id + "-menu-picker",
					$skin: "s-mn-popup",
					$itemSkin: "s-mn-link",
					$category: "menus",
					$layout: {
						$items: []
					}
				};
				var article = (options.field.isDesktopPage || options.field.isRecordArticle) ? options.field : options.field.articleParent;
				if (options.field.menusBox && article.menuItems) {
					//clear previous popup menus 
					var items = options.field.menusBox.boxChildItems;
					for (var ii = 0, jj = items.length; ii < jj; ii++) {
						delete article.menuItems[items[ii].$bind];
						syra_item.remove(items[ii]);
					}
					syra_item.remove(options.field.menusBox, true, true);
				}
				options.field.menusBox = options.field.page.addItem(null, $item, article);
				options.field.menusBox.contextField = options.field;
				if (options.onMenuClick) {
					options.field.menusBox.onMenuClick = options.onMenuClick;
				}
				var binds = Object.keys(options.field.$menusPopup);
				//setOrder
				var newBinds = [];
				for (var ii = 0, jj = _listMenuBinds.length; ii < jj; ii++) {
					var found = binds.indexOf(_listMenuBinds[ii]);
					if (found >= 0) {
						binds.splice(found, 1);
						newBinds.push(_listMenuBinds[ii]);
					}
				}
				binds = newBinds.concat(binds);
				for (var ii = 0, jj = binds.length; ii < jj; ii++) {
					var $menu = options.field.$menusPopup[binds[ii]];
					if (!$menu.$icon) {
						if (_listMenuBinds.indexOf($menu.$sourceBind) >= 0) {
							$menu.$icon = {
								$mode: "iconText",
								$path: options.field.$iconPath
							};
						}
					}
					var menuItem = options.field.menusBox.addMenuItem($menu);
					article.$menus[$menu.$bind] = $menu;
					menuItem.setMenu($menu, article.dataset);
				}
				syra_menus.disableItems(options.field, options.field.menuItems);
				var picker = options.picker;
				if (picker.pickerId) {
					syra_button.setText(picker, undefined, "menus_open");
					picker = picker.link;
				} else {
					if (picker.className && picker.className.indexOf) {
						syra_dom.toggleClass(picker, "s-open", true);
					}
				}
				syra_quality.openPopupMenu(options.field.menusBox);
				syra_site.activePopupMenu = options.field.menusPopup = syra_over.openPopup(options.field, {
					content: options.field.menusBox,
					slot: options.field.menusBox.body,
					picker: picker,
					$isAutoCloseTimeoutDisabled: true,
					position: {
						my: "right top",
						at: "right bottom",
						of: picker
					},
					close: function() {
						if (options.field.menusPopup == syra_site.activePopupMenu) {
							delete syra_site.activePopupMenu;
						}
						if (picker.pickerId) {
							syra_button.setText(picker, undefined, "menus");
						} else {
							if (picker.className && picker.className.indexOf) {
								//prevent from svg picker
								syra_dom.toggleClass(picker, "s-open", false);
							}
						}
						options.field.menusPopup = null;
					}
				});
			} else {
				options.field.menusPopup.close();
			}
		}
	}
};

exports.$localize = {
	add: function(field, $menu) {
		if (field.$item.$useLocalizePicker) {
			$menu.$isHidden = true;
		}
		if (field.$isEditMode && !field.picker_localize && field.$item.$useLocalizePicker) {
			syra_button.addFieldPicker({
				parent: field,
				pickerId: "$localize",
				fontIcon: "localize",
				text: field.$menus.$localize.$title,
				click: this.onClick
			});
		}
		$menu.$isPopup = true;
	},
	onClick: function() {
		syra_localizer.onMenuClick({
			scope: this.parent,
			menu: this.parent.$menus.$localize
		});
	}
};

exports.$tunnel = {
	add: function(field, $menu) {
		$menu.$title = syra_local.fieldTunnel;
		$menu.$isPopup = syra_site.isTabletDevice || (field.$isEditMode && field.$item.$inplace && !field.$item.$isFilterMode);
		if (!$menu.$isPopup && !field.picker_$tunnel && !field.$item.$inplace) {
			syra_button.addFieldPicker({
				parent: field,
				pickerId: "$tunnel",
				fontIcon: "tunnel",
				text: syra_local.fieldTunnel,
				shortCutTip: syra_shortCuts.tip.openTunnel,
				click: this.onClick
			});
			if (!field.$isDisabled && field.$isReadOnly) {
				syra_button.hide(field.picker_$tunnel, false);
			}
		}
	},
	onClick: function() {
		var field = this.parent;
		syra_router.executeMenu(field.$menus.$tunnel, field.isRecordArticle ? field : field.articleParent);
	}
};

exports.$lookup = {
	add: function(field, $menu) {
		if (field.$isEditMode && !field.picker_$lookup) {
			syra_button.addFieldPicker({
				parent: field,
				pickerId: "$lookup",
				fontIcon: "lookup",
				text: syra_local.fieldLookup,
				shortCutTip: syra_shortCuts.tip.openLookup,
				click: this.onClick
			});
		}
		$menu.$isPopup = false;
	},
	onClick: function() {
		var field = this.parent;
		if ((field.articleParent && field.articleParent.onLookupClick) ? field.articleParent.onLookupClick(field) : true) {
			field.focus && field.focus();
			var $lookup = field.$menus.$lookup;
			if (field.isChildFieldRecord) {
				field.articleParent.currentSelectRecords = null;
			}
			syra_over.openModal(field.boxParent, {
				article: field.articleParent,
				$url: $lookup.$url,
				onSelectRecord: function(selectedRecords) {
					if (!field.$isDisabled && !field.$isReadOnly) {
						if (field.isChildFieldRecord) {
							var record = selectedRecords[Object.keys(selectedRecords)[0]];
							field.articleParent.setValue(record.dataset);
							syra_form.updateDelta(field.articleParent, record.dataset);
						} else {
							var record = selectedRecords[Object.keys(selectedRecords)[0]]; //single selection
							field.setValue($lookup.$result ? record.dataset[$lookup.$result] : record.dataset);
							field.focus();
							syra_form.update(field, field.currentValue);
						}
					}
				}
			});
		}
	}
};