"use strict";

var _menuImgs = ["$first", "$last", "$next", "$previous"];

function _setIconValue(menu) {
	var name = menu.$iconValue || menu.value || menu.$icon.$value;
	if (!name) {
		name = menu.$item.$sourceBind || menu.$item.$bind;
	}
	var $path;
	if (syra_site.isTabletDevice && _menuImgs.indexOf(name) >= 0) {
		$path = "/syracuse-ui/themes/tablet/sage/images/" + (menu.$icon.$path || "");
	} else {
		$path = syra_site.$item.$iconPath + (menu.$icon.$path || "");
	}
	name = name.replace("$", "");
	menu.iconValue.style.backgroundImage = "url('" + $path + name + ".png')";
}

function _setIconMenu(menu) {
	menu.$icon = menu.$item.$icon || {};
	if (!menu.iconValue) {
		menu.iconValue = document.createElement("div");
		var iconCss = menu.$skin + "-icon";
		if (menu.$item.$css) {
			iconCss += " " + menu.$item.$css;
		}
		if (menu.$icon.$mode == "icon") {
			menu._label.style.display = "none";
			menu.domItem.className += " s-icon";
		} else {
			menu.domItem.className += " s-icon-label";
			iconCss += " s-label";
		}
		menu._label.className += " s-icon";
		menu.iconValue.className = iconCss;
		menu.domItem.insertBefore(menu.iconValue, menu._label);
	}
	_setIconValue(menu);
}

function _setTitle(menu, $title) {
	menu.$title = $title;
	delete menu.titleText;
	var title = menu.getTitle();
	if (menu._label) {
		if (menu.$item.$format == '$html') {
			menu._label.innerHTML = title;
		} else {
			menu._label.textContent = title;
		}
		if (menu.$item.$icon) {
			menu.domItem.title = title;
		}
	} else {
		menu.domItem.title = title;
	}
}


exports.setStyle = function(menuItem, $style) {
	if ($style === null) {
		if (menuItem.$style) {
			syra_site.dom.toggleClass(menuItem._label, menuItem.$style, false);
			syra_site.dom.toggleClass(menuItem.domItem, menuItem.$style, false);
		}
		menuItem.$style = null;
	} else {
		menuItem.$style = "s-cst-sty-" + $style;
		syra_site.dom.toggleClass(menuItem._label, menuItem.$style, true);
		syra_site.dom.toggleClass(menuItem.domItem, menuItem.$style, true);
	}
};

function _setCssValue(menu, $value) {
	if (menu.$cssValue != $value) {
		if (menu.$cssValue) {
			var css = menu.$item.$prefixValue + menu.$cssValue;
			syra_site.dom.toggleClass(menu._label, css, false);
			syra_site.dom.toggleClass(menu.domItem, css, false);
		}
	}
	menu.$cssValue = $value;
	if (menu.$cssValue) {
		var css = menu.$item.$prefixValue + menu.$cssValue;
		syra_site.dom.toggleClass(menu._label, css, true);
		syra_site.dom.toggleClass(menu.domItem, css, true);
	}
}


function _setVariants(menu, $variants) {
	if (!menu.childVariants) {
		menu.childVariants = {};
	}
	var $keys = Object.keys($variants);
	var $startIndex = menu.layoutParent.$item.$items.indexOf(menu.$item);
	for (var ii = 0, jj = $keys.length; ii < jj; ii++) {
		if (!menu.childVariants[$keys[ii]]) {
			var $newItem = helpers.object.clone(menu.$item, true);
			$newItem.$variantItemKey = $keys[ii];
			var $variant = $variants[$keys[ii]];
			$newItem.$title = menu.$title;
			if (!$variant.$title) {
				$variant.$title = menu.$title;
				if (menu.articleParent.$field) {
					if (menu.articleParent.$field.$item && menu.articleParent.$field.$item.$variants) {
						var $field = menu.articleParent.$field.$item.$variants[$newItem.$variantItemKey];
						if ($field && $field.$title) {
							$variant.$title += " " + $field.$title;
						}
					}
				}
			}
			(menu.childVariants[$keys[ii]] = menu.layoutParent.createChildItem($newItem, null, ++$startIndex)).$isAction = menu.$isAction;
		}
	}
	menu.showItem(false);
}

function _onMenuItemClick(menu, event) {
	var doClick = true;
	if (doClick && menu.contextField) {
		doClick = menu.contextField.onMenuClick ? menu.contextField.onMenuClick(menu, event) : true;
	}
	if (doClick && menu.boxParent) {
		doClick = menu.boxParent.onMenuClick ? menu.boxParent.onMenuClick(menu, event) : true;
		if (doClick) {
			doClick = menu.articleParent.onMenuClick ? menu.articleParent.onMenuClick(menu, event) : true;
		}
	}

	if (doClick) {
		if (menu.articleParent != menu.page) {
			doClick = menu.page.onMenuClick ? menu.page.onMenuClick(menu, event) : true;
		}
		if (doClick && (menu.onMenuClick ? menu.onMenuClick(event) : true)) {
			syra_controller.executeMenu(menu);
		}
	}
	setTimeout(function() {
		if (menu) {
			var parent = menu.boxParent;
			while (parent && !parent.disposed) {
				if (parent._popupMenus) {
					parent._popupMenus.close();
					break;
				}
				parent = parent.boxParent;
			}
		}
	}, 10);
}


exports.click = function(menu, event) {
	if (!menu.$isDisabled) {
		if (menu.page) {
			if (menu.isNoSyracuseUrl) {
				event.syraRetValue = true;
				return;
			}
			if (menu.page.checkMenuDesignValidaty(menu)) {
				var isValidated = true;
				if (menu.$bind == "$save" || menu.$bind == "$saveAs") {
					isValidated = menu.page.validateFields();
				}
				if (isValidated) {
					var options = {
						isSiteMenu: (menu.page == syra_site),
						menuItem: menu,
						doEvent: function() {
							_onMenuItemClick(menu, event);
						}
					};
					if (menu.boxParent && menu.boxParent.contextField) {
						//boxParent is menubox of contextMenu
						menu.contextField = options.field = menu.boxParent.contextField;
						if (menu.contextField && menu.contextField.$item && !menu.$subRecordKey) {
							menu.$subRecordKey = menu.contextField.$item.$bind;
						}
					}
					var page = menu.page.mainPage,
						dialog = syra_site.dialogManager.getTopDialogPage();
					if (dialog && dialog._content && !dialog._content.disposed) {
						page = dialog._content;
					}
					if (!page || page.disposed) {
						page = menu.page;
					}
					if (page && !page.disposed && page.externalAdapter) {
						page.externalAdapter.onMenuItemClick(options);
					}
				}
			}
		} else {
			_onMenuItemClick(menu, event);
		}
	}
};



function _isHrefEnabled(menuItem) {
	return !menuItem.$isAction && !(menuItem.$parameters && (menuItem.$parameters.$actions || menuItem.$parameters.$properties)) && !(menuItem.$method && menuItem.$method != "GET");
}

exports.setMenu = function(menuItem, $menu, record) {
	if ($menu) {
		if ($menu.$type) {
			menuItem.$sourceType = $menu.$type;
		}
		if (!menuItem._isInit) {
			menuItem.articleParent.onMenuDataFilled && menuItem.articleParent.onMenuDataFilled(menuItem);
			menuItem.showItem(true);
			menuItem.setState(menuItem.$item);
			if (!$menu.$title && menuItem.$item.$title) {
				$menu.$title = menuItem.$item.$title; //use for pager (next prev) currently
			}
			if (menuItem.$item.$value) {
				menuItem.value = menuItem.$item.$value;
			}
			if (menuItem.$item.$icon) {
				_setIconMenu(menuItem);
			} else {
				if (menuItem.$item.$noText) {
					menuItem._label.style.display = "none";
				}
			}
			menuItem._isInit = true;
		}
		if ($menu.$isSeparator || $menu.$title == "-") {
			menuItem.domItem.className = menuItem.$skin + "-separator";
		} else {
			if ($menu.$title !== undefined) {
				_setTitle(menuItem, $menu.$title);
			}
			if ($menu.$iconValue !== undefined) {
				menuItem.$iconValue = $menu.$iconValue;
				_setIconValue(menuItem);
			}
			if ($menu.$description !== undefined) {
				menuItem.setDescription($menu.$description);
			}
			menuItem.setState($menu);

			if ($menu.$isDisabled !== undefined) {
				menuItem.disable($menu.$isDisabled);
			}
			$menu.$style !== undefined && exports.setStyle(menuItem, $menu.$style);
			if ($menu.$value !== undefined && menuItem.$item.$prefixValue) {
				_setCssValue(menuItem, $menu.$value);
			}
			var props = Object.keys($menu);
			for (var ii = 0, jj = props.length; ii < jj; ii++) {
				var prop = props[ii];
				menuItem[prop] = $menu[prop];
			}
			if ((menuItem.$sourceBind || menuItem.$item.$bind) == "$lazyload") {
				if (menuItem.domItem.parentNode) {
					menuItem.domItem.parentNode.removeChild(menuItem.domItem);
				}
			}
			if ($menu.$isDisabled && $menu.$isRequested === false) {
				if (menuItem.$item.onServerRequest ? menuItem.$item.onServerRequest(menuItem) : true) {
					if (menuItem.articleParent.onAfterActionMenuExecute) {
						if (menuItem.articleParent.onAfterActionMenuExecute(menuItem, $menu) === false) {
							$menu.$isRequested = true;
							return;
						}
					}
					if ($menu.$diagnoses) {
						_showDiagnoses(menuItem, $menu);
					}
					if ($menu.$clientAgent) {
						var agent = syra_site.agents[$menu.$clientAgent.$clientId];
						if (agent) {
							agent[$menu.$clientAgent.$action](menuItem, $menu, record);
						}
					}
					if ($menu.$links && $menu.$links.$location) {
						var $url = $menu.$links.$location.$url;
						setTimeout(function() {
							syra_site.unload();
							window.open($url, "_self");
						}, 100);
					}

					// TODO
					// job tracking ui
					if ($menu.$location && $menu.$state) {
						syra_site.registerJobSyra($menu.$location, $menu.$state, menuItem.$title, $menu.$location.split(/'/)[1]);
					}


				}
				$menu.$isRequested = true; //avoid processing action for other menu bound to $menu (create menu for sample)
			}
			if ($menu.$variants) {
				if (menuItem.$item.$variantItemKey) {
					menuItem.setMenu($menu.$variants[menuItem.$item.$variantItemKey], record);

				} else {
					_setVariants(menuItem, $menu.$variants);
				}
			}
		}
	}
	if (!menuItem.$sourceUrl || ($menu && $menu.$url)) {
		menuItem.$sourceUrl = menuItem.$url;
		if (menuItem.$type && (menuItem.$type.indexOf('json') == -1) && (menuItem.$type != "html")) {
			if (menuItem.$sourceUrl && (menuItem.$sourceUrl.indexOf("format=") < 0)) { // TODO: improve menuItem hack
				menuItem.$sourceUrl += (menuItem.$sourceUrl.indexOf("?") >= 0 ? "&" : "?") + "format=" +
					syra_site.urlMaker.formatMenuUrl(menuItem.articleParent, {
						$url: menuItem.$type,
						$parameters: menuItem.$parameters
					}, record);
			}
		}
	}
	menuItem.$url = menuItem.$sourceUrl;

	if (menuItem.$sourceType && (menuItem.$sourceType.indexOf('json') == -1) && (menuItem.$sourceType != "html")) {
		if (_isHrefEnabled(menuItem)) {
			syra_site.history.setHref(menuItem, record, true);
		}
		menuItem.value = menuItem.$sourceType.replace("application/", "").replace("/", "-");
		if (!menuItem.$item.$icon) {
			menuItem.$item.$icon = {
				$path: "file/s-link-"
			};
		}
		_setIconMenu(menuItem);
		if (menuItem.$title !== undefined) {
			_setTitle(menuItem, menuItem.$title);
		}
	} else {
		if (menuItem.domItem && menuItem.$url && _isHrefEnabled(menuItem)) {
			syra_site.history.setHref(menuItem, record);
		}
	}
	if (menuItem.$target == "blank") {
		menuItem._label.className += " s-external-link";
	}
};




function _showDiagnoses(menu, $delta) {
	var $menu = menu.articleParent.$menus[menu.$item.$bind];
	if ($menu) {
		if ($menu.$links) {
			var $binds;
			var $links = $menu.$links || {};
			if ($delta.$links) {
				$binds = Object.keys($delta.$links);
				for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
					var $bind = $binds[ii];
					var $source = $delta.$links[$bind];
					var $target = $links[$bind] = $links[$bind] || {};
					var $props = Object.keys($source);
					for (var kk = 0, mm = $props.length; kk < mm; kk++) {
						var $prop = $props[kk];
						$target[$prop] = $source[$prop];
					}
				}
			}
			$binds = Object.keys($links);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var $link = $links[$bind];
				$link.$bind = $bind + "-" + menu.id;
				$link.$url = syra_site.urlMaker.formatMenuUrl(menu.articleParent, $link);
			}
			syra_site.showDiagnoses({
				$links: $links,
				$diagnoses: $delta.$diagnoses
			}, menu.articleParent, {
				menu: menu
			});
		} else {
			if ($delta.$diagnoses) {
				syra_site.showDiagnoses({
					$diagnoses: $delta.$diagnoses
				}, menu.articleParent, {
					menu: menu
				});
			}
		}
	}
}