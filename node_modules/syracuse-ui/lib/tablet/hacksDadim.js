"use strict";
var helpers = require('syracuse-core/lib/helpers');
// !! Put the required in the functions by class instead of header because required could be buggy
var util = require('syracuse-ui/lib/fusion/core/client/sap/util');
var keys = require('syracuse-ui/lib/fusion/tools/constant').keybordKey;
var tabletUtil = require('./helpers');

function WorkBook() {

	var sdataHost = (window.location.protocol.toLowerCase() === "file:") ? "" : (window.location.protocol + "//" + window.location.host);

	function logOnServer(msg, sync) {
		$.ajax({
			type: "GET",
			async: (sync !== true),
			url: sdataHost + "/sdata/syracuse/collaboration/syracuse/clientLogs/$service/log?text=" + encodeURIComponent(msg),
			success: function(xhr) { /* fire and forget */ }
		});
	};

	var WorkBook = require('syracuse-ui/lib/fusion/workBook').WorkBook;
	var _onFieldEvent = WorkBook.prototype.onFieldEvent;

	WorkBook.prototype.onFieldEvent = function(options, redirect) {
		//var fieldId=this.fusionSite._hoster.controller.findField[options.event.target] ;
		var inputs = $('.s-field-input, .s-inplace-input').get();

		tabletUtil.logOnServer("event type=" + options.event.type);


		if (options.event.type === "focusin")
			tabletUtil.logOnServer("focusin context: " + options.field.context + " field id=" + options.field.id);

		//if (options && options.event && options.event.type === "focusin" && options.event.isSimulated && options.event.relatedTarget ) {
		if (options && options.event && options.event.type === "focusin" && options.event.relatedTarget && !options.field.context /*&& !options.field.context1*/ ) {
			//alert("focusin context " + options.field.context + "focusin context1 " + options.field.context1 +" button prev/next");
			// simulate tabulation for the "next " button on tablet
			//alert("simulated" + options.event.isSimulated+ " releted target: "+inputs.indexOf(options.event.relatedTarget)) ;
			//var fieldId=this.fusionSite._hoster.controller.findField[options.event.relatedTarget] ;//.syraFieldId
			var backward = (inputs.indexOf(options.event.target) < inputs.indexOf(options.event.relatedTarget));
			tabletUtil.logOnServer("focusin becomes tabulation with target " + options.event.relatedTarget.value + " -- " + options.event.relatedTarget.id);

			var e = jQuery.extend(new jQuery.Event(), {
				type: "keydown",
				target: options.event.relatedTarget,
				keyCode: keys["VK_TAB"],
				isSimulated: true,
				shiftKey: (backward) ? true : false,
				originalEvent: {},

			});
			var articleParent = options.field.articleParent;
			var map = articleParent.idMap;
			var srcField = map[options.event.relatedTarget.syra_field_id];
			if (srcField)
				srcField.context = 0;
			else {
				if (articleParent)
					var articleGrandParent = articleParent.articleParent;
				if (articleGrandParent)
					var map = articleGrandParent.idMap;
				srcField = map[options.event.relatedTarget.syra_field_id];
				if (srcField)
					srcField.context = 0;
			}

			options.event = e;
			tabletUtil.logOnServer("focusin context  " + options.field.context + " field id=" + options.field.id);

			/*var tg = options.event.relatedTarget ;
			var evt = document.createEvent('Event');
			evt.initEvent('keydown', true, true);
			evt.keyCode=keys["VK_TAB"] ;
			//evt.shiftKey=(backward) ? true : false;
			tg.dispatchEvent(evt);
			//options.event = evt;*/

		} else if (options && options.event && options.event.type === "keydown" && options.event.keyCode == keys["VK_TAB"]) {
			//options.field.context1=1 ;
			console.log("keydown " + options.event.keyCode);

		} else {

			if (options && options.event && options.event.type === "mousedown") {
				tabletUtil.logOnServer("mousedown context " + options.field.context + " field id=" + options.field.id);
				options.field.context = 1;

				tabletUtil.logOnServer("mousedown context set to " + options.field.context + " field id=" + options.field.id);
			}


			tabletUtil.logOnServer("event:  " + options.event.type + "context: " + options.field.context + " field id=" + options.field.id);




		}
		return _onFieldEvent.call(this, options, redirect);
	};
}


exports.init = function() {
	WorkBook();
};