"use strict";
var helpers = require('syracuse-core/lib/helpers');
// !! Put the required in the functions by class instead of header because required could be buggy
var util = require('syracuse-ui/lib/fusion/core/client/sap/util');
var sapUtil = util.Fusion;
var syraUtil = util.Syra;




function WorkBook() {
	/*
	var WorkBook = require('syracuse-ui/lib/fusion/workBook').WorkBook;

	WorkBook.prototype.onFieldEvent = function(options, redirect) {
	var doEvt = true,
		logger;
	var listner, aListner = ["wdgt", "", options.event.type],
		currIstEdit;
	if (!document.site.authorPage) {
		logger = this.fusionSite && this.fusionSite._session && this.fusionSite._session.logger;
		if (logger) {
			logger.trace({}, "**onFieldEvent : [" + options.event.type + "] on target [" + (syraUtil.getMetaFromObject(options.field)).$bind + " " + (options.field && options.field.arrayLevel ? options.field.arrayLevel : "field") + "]");
		} else {
			logger = {
				"trace": function() {
					return null;
				}
			};
		}
		//Hack lv : for cardview popup waitting fix in field.js (arrayLevel=cell on field cardview)
		// TODO : best solution for arraylevel popupview fields
		if (!options.field.arrayLevel && (options.field.getArticle().arrayLevel == "record")) {
			options.field.arrayLevel = "cell";
		}
		switch (options.event.type) {
			case "click":
			case "keyup":
			case "keydown":
			case "mousedown":
			case "focusin":
				if (options.event.type ==="focusin" && !options.event.isSimulated){
					alert(options.event.isSimulated) ;
					break ;
				}
				
				aListner[1] = "field";
				if (!redirect && options.field.arrayLevel) {
					if (!sapUtil.isListScreen(syraUtil.getMetaFromObject(options.field).$bind)) {
						aListner[1] = options.field.arrayLevel;
					} else {
						aListner[1] = "list";
					}
				}
				logger.trace({}, " -----> Call listner : [" + aListner.join(".") + "] field type : [" + syraUtil.getFieldType(options.field) + "]");
				doEvt = this.fusionSite.controller.triggerAdx(aListner.join("."), {
					"target": options.field,
					"type": options.event.type,
					"data": {
						"nativeEvt": options.event,
						"nativeOpt": options
					}
				});
				if (!doEvt) {
					options.event.stopImmediatePropagation();
				}
				break;
			case "change":
				listner = "wdgt." + (options.field && options.field.arrayLevel && !sapUtil.isListScreen(syraUtil.getMetaFromObject(options.field).$bind) && syraUtil.getFieldType(options.field) == syraUtil.dataTypes.booleanType ? options.field.arrayLevel : "field") + "." + options.event.type;
				logger.trace({}, " -----> Call listner : [" + listner + "] field type : [" + syraUtil.getFieldType(options.field) + "] Edit :[" + this.fusionSite.controller._sapController.getCurrInst().edit + "]");
				doEvt = this.fusionSite.controller.triggerAdx(listner, {
					"target": options.field,
					"type": options.event.type,
					"data": {
						"nativeEvt": options.event
					}
				});
				if (!doEvt) {
					options.event.stopImmediatePropagation();
				}
				break;
			
				
			case "focusout":
				break;
			case "input":
				doEvt = this.fusionSite.controller.triggerAdx("wdgt.field.input", {
					"target": options.field,
					"type": options.event.type,
				});
				if (!doEvt) {
					options.event.stopImmediatePropagation();
				}
				break;
		}
	}
	if (doEvt) {
		options.doEvent();
	} else
	if (doEvt === false) {
		options.event.preventDefault();
		options.event.stopPropagation();
		options.event.stopImmediatePropagation();
	}
	return doEvt;
}*/
}






exports.init = function() {
	WorkBook();
};