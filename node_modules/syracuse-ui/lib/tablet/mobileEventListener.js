"use strict";
var helpers = require('syracuse-core/lib/helpers');
var EventListener = require("syracuse-ui/lib/site/aside/eventListener").EventListener;
var tabletUtil = require('./helpers');

function MobileEventListener() {}

exports.MobileEventListener = helpers.defineClass(MobileEventListener, null, {
	load: function() {
		/*var supportTouch = $.mobile.support.touch,
		scrollEvent = "touchmove scroll",
		touchStartEvent = supportTouch ? "touchstart" : "mousedown",
		touchStopEvent = supportTouch ? "touchend" : "mouseup",
		touchMoveEvent = supportTouch ? "touchmove" : "mousemove";
		var selector= ".s-dash-menubar-resizer" ;*/
		// swipe (and variants ) event trigerring
		$.event.special.swipe = {
			scrollSupressionThreshold: 30, // More than this horizontal displacement, and we will suppress scrolling.
			durationThreshold: 1000, // More time than this, and it isn't a swipe.
			horizontalDistanceThreshold: 10, // Swipe horizontal displacement must be more than this.
			verticalDistanceThreshold: 75, // Swipe vertical displacement must be less than this.
			start: function(event) {
				var data = event.originalEvent.touches ?
					event.originalEvent.touches[0] : event;
				return {
					time: (new Date()).getTime(),
					coords: [data.pageX, data.pageY],
					origin: $(event.target)
				};
			},
			stop: function(event) {
				var data = event.originalEvent.touches ?
					event.originalEvent.touches[0] : event;
				return {
					time: (new Date()).getTime(),
					coords: [data.pageX, data.pageY]
				};
			},
			handleSwipe: function(start, stop) {
				// tabletUtil.logOnServer("handle swipe start:" + start.coords[0] + " stop: " + stop.coords[0]);
				if (stop.time - start.time < $.event.special.swipe.durationThreshold &&
					Math.abs(start.coords[0] - stop.coords[0]) > $.event.special.swipe.horizontalDistanceThreshold &&
					Math.abs(start.coords[1] - stop.coords[1]) < $.event.special.swipe.verticalDistanceThreshold) {
					// tabletUtil.logOnServer("trigger swipe:");
					// start.origin.trigger("swipe")
					start.origin.trigger(start.coords[0] > stop.coords[0] ? "swipeleft" : "swiperight");
				}
			},
			setup: function(handleObj) {
				//tabletUtil.logOnServer("add " + this.id);
				var thisObject = this,
					$this = $(thisObject);
				$this.bind("touchstart", function(event) {
					//$this.bind("mousedown", function(event) {
					//tabletUtil.logOnServer("add bind touchstart " + this.id);
					var start = $.event.special.swipe.start(event),
						stop;

					function moveHandler(event) {
						//tabletUtil.logOnServer("move handler " + this.id);
						if (!start) {
							return;
						}
						stop = $.event.special.swipe.stop(event);
						// prevent scrolling
						if (Math.abs(start.coords[0] - stop.coords[0]) > $.event.special.swipe.scrollSupressionThreshold) {
							event.preventDefault();
						}
					}
					$this.bind("touchmove", moveHandler).one("touchend", function() {
						//$this.bind("mousemove", moveHandler).one("mouseup", function() {
						//tabletUtil.logOnServer("add bind touchend " + this.id);
						$this.unbind("touchmove", moveHandler);
						// $this.unbind("mousemove", moveHandler);
						if (start && stop) {
							$.event.special.swipe.handleSwipe(start, stop);
						}
						start = stop = undefined;
					});
				});
			}
		};



		$.each({
			swipeleft: "swipe",
			swiperight: "swipe"
		}, function(event, sourceEvent) {

			$.event.special[event] = {
				setup: function() {
					$(this).bind(sourceEvent, $.noop);
				}
			};
		});





		try {

			$(window).bind("orientationchange", function() {
				var landscape = window.orientation && (window.orientation == 90 || window.orientation == -90);
				//tabletUtil.logOnServer("orientation change landscape: " + landscape);
				//var panels = $(".s-dash-menubar, .s-vignette-menubar, .s-fusion-bar, .s-page-menubar");
				var swipeObservers = document.site.ddManager._observers.barSwiper.filter(function(obsrv) {
					if (obsrv.preferenceKey == "convergenceBar" || obsrv.preferenceKey == "dash-menubar") return false;
					else return true;
				});
				swipeObservers.forEach(function(panel) {
					//var panels =$(".s-dash-menubar");
					//panels.each(function(idx,panel){

					if (landscape) {
						if (panel.$isCollapsed) {
							panel.collapse();
						}

					} else {
						if (!panel.$isCollapsed) {
							panel.collapse();
						}
					}
				});
				return false;
			});
			//this._bindSwipeEvents();
		} catch (e) {
			// Temporarily to not propagate errors to  desktop client
			console.log("mobileEventListener error\n" + e.stack);
		}


		//EventListener.prototype.load.call();
	},
	_bindSwipePanel: function(swipeSpot) {
		swipeSpot.bind("swipeleft", function(event, data) {
			//alert ("swipeleft") ; 
			var swipeObservers = document.site.ddManager._observers.barSwiper;
			var observer = null;

			if (event.currentTarget === event.target) {
				for (var i = 0; i < swipeObservers.length; i++) {

					observer = swipeObservers[i];
					if (observer.swipeBar == event.target) {

						observer.isSwipable(event.currentTarget, event);
						var swipeItem = document.site.ddManager.swipableItem;
						if (swipeItem) {
							var barSplitter = swipeItem.barSplitter;
							barSplitter.onSwipeLeft();
						}
						//tabletUtil.logOnServer("swipeleft");
						event.stopPropagation();
						break;
					}
				}
			}
		});
		swipeSpot.bind("swiperight", function(event, data) {
			//alert ("swiperight") ;
			//var observer = document.site.ddManager._observers.barSwiper[0];
			var swipeObservers = document.site.ddManager._observers.barSwiper;
			var observer = null;
			//var i ;
			if (event.currentTarget === event.target) {
				//for (i=0 ;i<swipeObservers.length && observer!=event.target ; observer=swipeObservers[i++] );
				for (var i = 0; i < swipeObservers.length; i++) {
					observer = swipeObservers[i];
					if (observer.swipeBar == event.target) {
						observer.isSwipable(event.currentTarget, event);
						var swipeItem = document.site.ddManager.swipableItem;
						if (swipeItem) {
							var barSplitter = swipeItem.barSplitter;
							barSplitter.onSwipeRight();
						}
						//tabletUtil.logOnServer("swiperight");
						event.stopPropagation();
						break;
					}
				}
			}
		});
	},


	_bindSwipeEvents: function() {
		var selector = ".s-dash-menubar-resizer";

		document.site.$$layoutSlot.delegate(selector, "swipeleft", function(event, data) {
			var observer = document.site.ddManager._observers.barSwiper[0];

			tabletUtil.logOnServer("observer ");
			if (event.currentTarget === event.target) {
				observer.isSwipable(event.currentTarget, event);
				var swipeItem = document.site.ddManager.swipableItem;
				var barSplitter = swipeItem.barSplitter;
				barSplitter.onSwipeLeft();



				tabletUtil.logOnServer("swipeleft");
				event.stopPropagation();
			}

		});
		document.site.$$layoutSlot.delegate(selector, "swiperight", function(event, data) {
			//event.stopPropagation() ;
			//event.preventDefault();
			/*var observer = document.site.ddManager._observers.barSwiper[0];
			
			tabletUtil.logOnServer("observer " );	
			if (event.currentTarget ===event.target){
				observer.isSwipable(event.currentTarget,event) ;
				var swipeItem=document.site.ddManager.swipableItem ;
				var barSplitter=swipeItem.barSplitter;
				barSplitter.onSwipeRight();
				tabletUtil.logOnServer ("swiperight") ;
			
				
			}*/
			alert("swiperight currentTarget " + event.currentTarget.className + "target: " + event.target.className);
		});


	}

});