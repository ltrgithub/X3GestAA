"use strict";
var helpers = require('syracuse-core/lib/helpers');
var WidgetResizer = require('syracuse-ui/lib/site/resize/widgetResizer').WidgetResizer;

function TabletWidgetResizer() {}

exports.TabletWidgetResizer = helpers.defineClass(TabletWidgetResizer, null, {
	/*setResizable: function(options) {
		var self = this;
		self.id = helpers.uuid.generate();
		self.options = options;
		self.$$slot = $(self.options.slot);
		self.isEnabled = true;
		if (self.options.dragSpot) {

			(self.$$dragSpot = $(self.options.dragSpot)).bind("mousedown." + self.id, function(event) {
				if (!document.site.ddAgent && event.target == self.$$dragSpot[0]) {
					var offset = self.$$slot.offset();
					self.startPosition = {
						top: offset.top - event.pageY,
						left: offset.left - event.pageX,
					};
					self.left = offset.left;
					self.top = offset.top;
					self.width = self.$$slot.outerWidth(true);
					self.height = self.$$slot.outerHeight(true);
					var $$boundary = document.site.$$body;
					self.boundary = $$boundary.offset();
					self.boundary.height = $$boundary.height();
					self.boundary.width = $$boundary.width();
					self.boundary.right = self.boundary.left + self.boundary.width;
					self.boundary.bottom = self.boundary.top + self.boundary.height;
					self._startDrag();
					//return false;
					return true;
				}
			});
			self.options.dragSpot.style.cursor = "move";
		}
		if (self.options.isResizingEnabled !== false && self.options.direction !== null) {
			if (self.options.direction === undefined) {
				self.options.direction = {
					top: true,
					left: true,
					right: true,
					bottom: true
				};
			}
			self.$$resizerSpot = self.options.resizerSpot ? $(self.options.resizerSpot) : self.$$slot;
			self.$$resizerSpot[0].style.cursor = "default";
			self.$$resizerSpot.bind("mousedown." + self.id, function(event) {

				if (!document.site.ddAgent && event.target == self.$$resizerSpot[0]) {
					if (self.isEnabled) {
						//return !self._startResize();
						return true ;
					}
				}
			}).bind("mousemove." + self.id, function(event) {
				if (self.isEnabled) {
					if (document.site.resizing) {
						self.onResize(event);
						return false;
					} else {
						var offset = self.$$slot.offset();
						self.left = offset.left;
						self.top = offset.top;
						self.width = self.$$slot.outerWidth();
						self.height = self.$$slot.outerHeight();
						self.right = self.left + self.width;
						self.bottom = self.top + self.height;
						self.isLeft = self.options.direction.left && ((event.pageX >= self.left) && (event.pageX <= (self.left + 5)));
						self.isRight = self.options.direction.right && ((event.pageX <= self.right) && (event.pageX >= (self.right - 5)));
						self.isTop = self.options.direction.top && ((event.pageY >= self.top) && (event.pageY <= (self.top + 5)));
						self.isBottom = self.options.direction.bottom && ((event.pageY <= self.bottom) && (event.pageY >= (self.bottom - 5)));
						self.cursor = "default";
						if (self.isLeft) {
							self.cursor = (self.isTop) ? "nw-resize" : ((self.isBottom) ? "sw-resize" : "w-resize");
						} else if (self.isRight) {
							self.cursor = (self.isTop) ? "ne-resize" : ((self.isBottom) ? "se-resize" : "e-resize");
						} else {
							self.cursor = (self.isTop) ? "n-resize" : ((self.isBottom) ? "s-resize" : "default");
						}
						self.$$resizerSpot[0].style.cursor = self.cursor;
					}
				} else {
					self.$$resizerSpot[0].style.cursor = "default";
				}
			});
		}

	},
	_startDrag: function() {
		var self = this;
		document.site.setddAgent(self);
		$(document).bind("mouseup." + self.id, function() {
			$(document).unbind("." + self.id);
			document.site.setddAgent();
		}).bind("mousemove." + self.id, function(event) {
			var position = {
				top: (self.startPosition.top + event.pageY),
				left: (self.startPosition.left + event.pageX)
			};

			if ((self.boundary.top < (position.top - 10)) && (self.boundary.left < (position.left - 10)) && (self.boundary.bottom > (position.top + self.height + 10)) && (self.boundary.right > (position.left + self.width + 10))) {
				self.options.slot.style.top = position.top + "px";
				self.options.slot.style.left = position.left + "px";
				if (self.options.source) {
					self.options.source.draggedPosition = position;
				}
			}
			event.preventDefault();
			return false;
		});
	},
	_startResize: function() {
		var self = this;
		if (self.isLeft || self.isRight || self.isTop || self.isBottom) {
			document.site.setddAgent(self);
			document.site.resizing = true;
			self.prevDocumentCursor = document.site.body.style.cursor;
			document.site.body.style.cursor = self.cursor;
			if (self.options.onResize) {
				self.options.onResize(self);
			}
			self.minHeight = self.options.minHeight;
			self.minWidth = self.options.minWidth;

			$(document).bind("mouseup." + self.id, function(event) {
				$(document).unbind("." + self.id);
				document.site.resizing = false;
				document.site.body.style.cursor = self.prevDocumentCursor;
				if (self.options.onResize) {
					self.options.onResize(self);
				}
				document.site.setddAgent();
				event.preventDefault();
				return false;
			}).bind("mousemove." + self.id, function(event) {
				self.onResize(event);
				event.preventDefault();
			});
			//return true;
			return false;
		}
		return false;
	},*/
	stop: function() {
		document.controller.disposeObject(this);
	},
	onResize: function(event) {
		var self = this;

		//    self.resizeTimeOut = setTimeout(function(){
		var width, height, isResized;
		var style = self.options.slot.style;
		var pageX = event.pageX;
		var pageY = event.pageY;

		if (self.isLeft) {
			width = self.right - pageX;
			if (!self.maxWidth || width < self.maxWidth) {
				if (!self.minWidth || (width >= self.minWidth) || (pageX < (self.left - 5))) {
					isResized = true;
					style.left = pageX + "px";
					style.width = width + "px";
				}
			}
		} else {
			if (self.isRight) {
				width = pageX - self.left;
				if (!self.maxWidth || width < self.maxWidth) {
					if (!self.minWidth || (width >= self.minWidth) || (pageX > (self.right - 5))) {
						isResized = true;
						style.width = width + "px";
					}
				}
			}
		}
		if (self.isTop) {
			height = self.bottom - pageY;
			if (!self.maxHeight || height < self.maxHeight) {
				if (!self.minHeight || (height >= self.minHeight) || (pageY < (self.top - 5))) {
					isResized = true;
					style.top = pageY + "px";
					style.height = height + "px";
				}
			}
		} else {
			if (self.isBottom) {
				height = pageY - self.top;
				if (!self.maxHeight || height < self.maxHeight) {
					if (!self.minHeight || (height >= self.minHeight) || (pageY > (self.bottom - 5))) {
						isResized = true;
						style.height = height + "px";
					}
				}
			}
		}
		if (isResized && self.options.onResize) {
			self.options.onResize(self, true);
		}
		clearTimeout(self.resizeTimeOut);
		//      }, 10);
	},
	dispose: function() {
		clearTimeout(this.resizeTimeOut);
		if (this.$$dragSpot) {
			this.$$dragSpot.unbind("." + this.id);
		}
		$(document).unbind("." + this.id);
		if (this.$$resizerSpot) {
			this.$$resizerSpot.unbind("." + this.id);
		}
		if (this.options) {
			this.options.onResize = null;
		}
		this.$$slot = this.$$dragSpot = this.$$resizerSpot = this.options = null;
	}
});