"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Site = require("syracuse-ui/lib/site/site").Site;
var hacks = require("syracuse-ui/lib/tablet/hacks");
var hacksDadim = require("syracuse-ui/lib/tablet/hacksDadim");
var forEachKey = helpers.object.forEachKey;
var MobileEventListener = require("syracuse-ui/lib/tablet/mobileEventListener").MobileEventListener;

// temporarily disabled 
// var MobileEventListener = require('./mobileEventListener').MobileEventListener;
// To enable Add this in main-tablet.htlml  <script src="/syracuse-ui/deps/jquery-mobile/jquery.mobile.custom.js"></script> --!>

function TabletSite() {}

exports.TabletSite = helpers.defineClass(TabletSite, Site, {
	unload: function() {
		Site.prototype.unload.call(this);
		hacks.dispose(this);
	},
	isTablet: true,
	loadBox: function(siteOptions) {
		Site.prototype.loadBox.call(this, siteOptions);
		// Hack event listener
		/*if (siteOptions.mobileEventListener) {
         this.mobileEventListener = new this.siteOptions.mobileEventListener();
         this.mobileEventListener.load();
         }*/
		// Hack desktop classes
		hacks.initAfterLoad(this);
		hacksDadim.init(this);
		return this;
	},
	getFieldWidth: function($field, useSmartMode, $titleLength, isSortable) {
		// We can change the size of the fields here but we don't know if we are in a fusionPgae or not (to early)
		// FDB - I changed the size of the fields in hacks -Add escape picker
		return Site.prototype.getFieldWidth.call(this, $field, useSmartMode, $titleLength, isSortable);
	},
	appendLogo: function() {
		Site.prototype.appendLogo.call(this);
		this.headerTop.insertBefore(this.headerLogo, this.headerTop.firstChild);
	},
	getPageSortedFields: function(page) {
		function _sortFields(props, fieldsOrder) {
			forEachKey(props, function(alphanumId, field) {
				if (field.$type === "application/x-array") {
					_sortFields(field.$item.$properties, fieldsOrder);
				} else {
					var screenId = alphanumId.charCodeAt(0);
					var blockId = alphanumId.charCodeAt(1);
					var toto = alphanumId.substring(2, alphanumId.length);
					var fieldId = parseInt(alphanumId.substring(2, alphanumId.length), 10);
					var numId = (screenId << 24) + (blockId << 16) + (fieldId << 8);
					fieldsOrder[alphanumId] = numId;
				}
			});
		}
		if (page) {
			page.fieldsOrder = {};
			_sortFields(page.$prototype.$properties, page.fieldsOrder);
		}
	}
});


exports.load = function($item, $prototype) {
	return (new TabletSite()).loadBox({
		widgetsLibrary: require('syracuse-ui/lib/site/widgetsLibrary'),
		fusionGatewayClass: require('syracuse-ui/lib/fusion/fusionGateway').FusionGateway,
		userProfileClass: require('syracuse-ui/lib/site/userProfile').UserProfile,
		mobileEventListener: require('syracuse-ui/lib/tablet/mobileEventListener').MobileEventListener,
		// disabled mobileEventListener: require('./mobileEventListener').MobileEventListener,
		$item: $item,
		$prototype: $prototype
	});
};