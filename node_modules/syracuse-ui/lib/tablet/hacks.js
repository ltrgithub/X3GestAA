"use strict";
var helpers = require('syracuse-core/lib/helpers');
var keys = require('syracuse-ui/lib/fusion/tools/constant').keybordKey;
// !! Put the required in the functions by class instead of header because required could be buggy

var _localeData;
var _menuImgs = ["first", "last", "next", "previous"];
var _escapeFields = ["application/x-string", "application/x-date", "application/x-integer", "application/x-decimal"];

function numericField() {
	var NumericField = require('syracuse-ui/lib/field/numericField').NumericField;
	// Display numeric keyboard -> Type should be number
	var render = NumericField.prototype.render;
	NumericField.prototype.render = function() {
		var res = render.call(this);
		this._input && this._input.setAttribute("type", "number");
		return res;
	};
}

function field() {
	var Field = require('syracuse-ui/lib/field/field').Field;
	// Replace <label> by <div> - remove 'for' attribute
	// On a tablet the label is sensitive - click sets focus on attached field
	Field.prototype.appendTitle = function() {
		if (!(this.$item.$inplace || this.$item.$isTitleHidden)) {
			this.domTitle = document.createElement("div");
			this.domTitle.className = this._$cssTopField + "-title";
			this._domItem.appendChild(this.domTitle);
		}
	};
	// Force use table display for field pickers instead of absolute position
	// -> we need to put the pickers out of the input area
	var loadBox = Field.prototype.loadBox;
	Field.prototype.loadBox = function($$item) {
		var self = this;
		loadBox.call(self, $$item);
		if (self._input) {
			// Add escape button at the end of icons list only in fusion page
			if (self.page.$isFusionPage && !self._tabletEscapePicker && (_escapeFields.indexOf(this.$field.$type) >= 0)) {
				self._tabletEscapePicker = document.createElement("div");
				self.fieldValue.appendChild(self._tabletEscapePicker).className = self.$skin + "-escape";
				self._tabletEscapePicker.appendChild(self.createPicker("escape"));
				var s = self.domValueSlot ? self.domValueSlot.style : null;
				if (s && s.maxWidth) {
					// We add 15px to width - maxWidth = 120px - To improve
					var w = s.maxWidth.split(/\D/)[0];
					if (w.length > 0 && !isNaN(w)) {
						s.maxWidth = (parseInt(w) + 15) + "px";
					}
				}
			}
			var parent = $(self._input.parentNode);
			parent.css({
				"display": "table",
				"table-layout": "fixed"
			});
			parent.children().each(function(idx, elmt) {
				var e = $(elmt);
				if (e.hasClass("s-field-context-menus") || e.hasClass("s-field-pickers")) {
					e.css({
						"position": "relative",
						"display": "table-cell",
						"padding-right": "0px",
						"padding-left": "3px"
					});
					e.find("a").css({
						width: "22px"
					});
				} else if (e.hasClass("s-field-input-ref-desc")) {
					// Description in bottom/left
					e.css({
						"position": "absolute",
						"left": "0px",
						"top": "20px"
					});
				}
			});
			// 5PX on right side for input - See also setState if paddingRight is changed
			self._input.style.paddingRight = "5px";
		}
		self.boxPickersPadding = 0;
	};
	// Restore table display style (field class resets display by setting display to empty value)
	var setState = Field.prototype.setState;
	Field.prototype.setState = function(state) {
		var self = this;
		setState.call(self, state);
		var a = [];
		a.push(self.boxPickers);
		a.push(self.menusBox ? self.menusBox._item : null);
		a.push(self._input);
		a.forEach(function(x) {
			if (x && x.style.display != "none") {
				x.style.paddingRight = self._input == x ? "5px" : "0px";
				x.style.display = "table-cell";
			}
		});
	};
	// Restore table display if lost (field class resets display by setting display to empty value)
	var setMenusBox = Field.prototype.setMenusBox;
	Field.prototype.setMenusBox = function(metaData) {
		setMenusBox.call(this, metaData);
		if (this.menusBox && this.menusBox._item) {
			var s = this.menusBox._item.style;
			if (s.display != "none") {
				s.paddingRight = "0px";
				s.display = "table-cell";
			}
		}
	};
	// Switch escape button status
	var onFieldInputEvent = Field.prototype.onFieldInputEvent;
	Field.prototype.onFieldInputEvent = function(event) {
		onFieldInputEvent.call(this, event);
		if (this._tabletEscapePicker) {
			var s = this._tabletEscapePicker.style;
			var hasEscape = this.$isEditMode && !this.$isReadOnly;
			if (event.type == "focusin" && hasEscape) {
				s.display = "table-cell";
				s.opacity = "1";
			} else if (event.type == "focusout") {
				if (hasEscape) {
					s.opacity = "0";
				} else {
					s.display = "none";
				}
			}
		}
	};
	// Disable mouseenter/mouseleave process - no mouse events ona tablet
	var onFieldMouseEvent = Field.prototype.onFieldMouseEvent;
	Field.prototype.onFieldMouseEvent = function(event) {
		return;
	};
	// Send shiftTAB event on "escape button" click
	var onClickPicker = Field.prototype.onClickPicker;
	Field.prototype.onClickPicker = function(btn) {
		var self = this;
		if (self._tabletEscapePicker && (self._tabletEscapePicker.firstChild == btn)) {
			// Simulate a keydown event with escape keycode on input field
			// --> Restore previous valid value
			var e = jQuery.extend(new jQuery.Event(), {
				type: "keydown",
				target: self,
				keyCode: keys["VK_ESCAPE"],
				isSimulated: true,
				originalEvent: {}
			});
			self.page.externalAdapter.onFieldEvent({
				field: self,
				event: e,
				doEvent: function() {
					console.log("\t X3 action sent");
				}
			});
		} else {
			onClickPicker.call(self, btn);
		}
	};
}

function menuItem() {
	var MenuItem = require('syracuse-ui/lib/menus/menuItem').MenuItem;
	// Hide excel and word links in right panel
	var loadBox = MenuItem.prototype.loadBox;
	MenuItem.prototype.loadBox = function() {
		var res = loadBox.call(this);
		if (this.$item.$bind && typeof this.$item.$bind === "string" &&
			(this.$item.$bind.indexOf("$word") === 0 ||
				this.$item.$bind.indexOf("$excel") === 0 ||
				this.$item.$bind.indexOf("$pptslide") === 0)) {

			this._hide(true);
		}
		return res;
	};
	// 
	var setIconValue = MenuItem.prototype._setIconValue;
	MenuItem.prototype._setIconValue = function() {
		var name = this.$iconValue || this.value || this.$icon.$value || this.$item.$bind.replace("$", "");
		if (_menuImgs.indexOf(name) >= 0) {
			var $path = "/syracuse-ui/themes/tablet/sage/images/" + (this.$icon.$path || "");
			this.iconValue.style.backgroundImage = "url('" + $path + name + ".png')";
		} else {
			setIconValue.call(this);
		}
	};
}

function commonEventHandlingTools() {
	var CommonEventHandlingTools = require('syracuse-ui/lib/fusion/core/client/eventhandling/common').CommonEventHandlingTools;
	CommonEventHandlingTools._checkCtxMenuEntry = function(men) {
		if (men && men.id && men.id === "$tabularExport")
			return false;
		return true;
	};
}

function removeFlash() {
	var flashWidget = require('syracuse-ui/lib/field/chart/flashWidget');
	var locale = require('syracuse-core/lib/locale');
	if (!_localeData)
		_localeData = locale.resources(module)();

	flashWidget.FlashWidget.prototype.drawBox = function() {
		var $cnt = $("<div class=\"s-h1-body s-cst-sty-not-sup\">" + _localeData["not_sup"] + "</div>");
		$(this.layoutSlot).append($cnt);
	};
	flashWidget.FlashWidget.prototype.onWindowResize = function() {};
	flashWidget.FlashWidget.prototype.setDataBind = function(dataRecordSet, parentDataRecord, metaData) {};
	flashWidget.FlashWidget.prototype.applyDesignMetaData = function(metadata, designing) {};
	flashWidget.FlashWidget.prototype.dispose = function() {};

	flashWidget.CubeChart.prototype.drawBox = function() {
		var $cnt = $("<div class=\"s-h1-body s-cst-sty-not-sup\">" + _localeData["not_sup"] + "</div>");
		$(this.layoutSlot).append($cnt);
	};
	flashWidget.CubeChart.prototype.onWindowResize = function() {};
	flashWidget.CubeChart.prototype.setDataBind = function(dataRecordSet, parentDataRecord, metaData) {};
	flashWidget.CubeChart.prototype.applyDesignMetaData = function(metadata, designing) {};
	flashWidget.CubeChart.prototype.dispose = function() {};
}

exports.init = function() {
	numericField();
	field();
	menuItem();
	commonEventHandlingTools();
	removeFlash();
};