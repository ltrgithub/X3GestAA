"use strict";
var helpers = require('syracuse-core/lib/helpers');
var keys = require('syracuse-ui/lib/fusion/tools/constant').keybordKey;
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var tabletUtil = require('./helpers');
// !! Put the required in the functions by class instead of header because required could be buggy

var _localeData;
var _menuImgs = ["first", "last", "next", "previous"];
var _escapeFields = ["application/x-string", "application/x-date", "application/x-integer", "application/x-decimal", "application/x-reference"];

function numericField() {
	var NumericField = require('syracuse-ui/lib/field/numericField').NumericField;
	// Display numeric keyboard -> Type should be number
	var render = NumericField.prototype.render;
	NumericField.prototype.render = function() {
		var res = render.call(this);
		this._input && this._input.setAttribute("type", "number");
		return res;
	};
}

// Add new events

function events(site) {
	// Bind click on Escape/Reset button
	site.$$layoutSlot.delegate("[data-m-picker]", "mousedown click", function(event) {
		var attr = $(event.target).attr('data-m-picker') || "";
		if (attr == "escapefield") {
			// Escape from a field
			var field = document.site.findField(this);
			if (field) {
				if (event.type == "mousedown") {
					// Stop to prevent focusOut of input field
					event.stopPropagation();
					event.preventDefault();
				} else if (event.type == "click") {
					var s = field.diagnoseFieldSlot ? field.diagnoseFieldSlot.style : null;
					if (s) {
						// We don't want o display field's error message on click on escape button
						s.display = "none";
					}
					// Simulate escape
					field.mobileEscape(attr, true);
					if (s) {
						window.setTimeout(function() {
							// We restore old display status
							s.display = "";
						}, 200);
					}
				}
			}
		} else if (attr == "escapeline") {
			// Escape from a line in edit mode
			// Retrieve field
			var id = $(this).attr("data-m-id");
			var input = $(this.parentNode).find("#" + id);
			if (input.length > 0) {
				var field = document.site.findField(input[0]);
				if (field) {
					// Simulate escape
					// Escape field before escaping line - SHould be fixed by client team
					field.mobileEscape("escapefield", false);
					window.setTimeout(function() {
						field.mobileEscape(attr, false);
					}, 100);
				}
			}
		}
	});
}

// Escape button on grid fields -> Send ESCAPE to X3

function gridEventHandling() {
	var GridEventHandling = require('syracuse-ui/lib/fusion/core/client/eventhandling/grid').GridEventHandling;
	// Hard to hack....
	var sap = new GridEventHandling.sap();
	// get event listeners by creating a new class 
	var eventListeners = new GridEventHandling.sap().eventListeners();
	// Hack listener for "wdgt.cell.keydown" event
	var keyDownCellTab = null;
	eventListeners.forEach(function(x) {
		if (x[0] == "wdgt.cell.keydown") {
			keyDownCellTab = x[1];
			// Set my function
			x[1] = function(event) {
				var keycode = event.data.nativeEvt.keyCode;
				var typeEscape = event.data.nativeEvt.typeEscape;
				// Hack VK_ESCAPE only if escape from field
				// if escapeline we call the standard method which escape the line
				if ("escapefield" == typeEscape && event.target && !sapUtil.isSpecialKey(keycode) && keycode == keys["VK_ESCAPE"]) {
					// Process field event instead of gridField -> Restore previous value
					// Escape on GridField do not restore the previous value
					event.target.page.externalAdapter.onFieldEvent(event.data.nativeOpt, true);
					// Clear diagnose
					event.data.nativeOpt.field.showErrors([]);
					return true;
				}
				// Call std listener
				return keyDownCellTab(event);
			};
		}
	});
	// create new hack class
	GridEventHandling.sap = function() {
		this.eventListeners = function() {
			// return hacked listener
			return eventListeners;
		};
	};
}

// Remove Error icon and Error message on grid field - Keep just the red border (not enough room)

function restorePickersStyle(self) {
	var a = [];
	a.push(self.boxPickers);
	a.push(self.menusBox ? self.menusBox.domItem : null);
	a.push(self._input);
	a.forEach(function(x) {
		if (x && x.style.display != "none") {
			x.style.paddingRight = self._input == x ? "5px" : "0px";
			x.style.display = "table-cell";
			x.style.position = "relative";
		}
	});
}

function diagnosesPanel() {
	var self = this;
	var DiagnosesPanel = require('syracuse-ui/lib/diagnoses/diagnosesPanel').DiagnosesPanel;
	var drawFieldDiagnose = DiagnosesPanel.prototype.drawFieldDiagnose;
	DiagnosesPanel.prototype.drawFieldDiagnose = function(field, $diagnose, group) {
		var self = this;
		var gridCell = field && field.isGridCell && field.isGridCell() && !field.isDiagnoseDisabled;
		drawFieldDiagnose.call(self, field, $diagnose, group);
		if (gridCell) {
			if (field.diagnoseFlag) {
				// Remove icon
				// --> Disabled because remove the date picker field.removeFromPickerBox(field.diagnoseFlag);
				field._updateBoxPickerPadding(false);
				document.site.removeDomChild(field.diagnoseFlag);
				delete field.diagnoseFlag;
				restorePickersStyle(field);
			}
		}
	};
}

function field() {
	var Field = require('syracuse-ui/lib/field/field').Field;
	// Replace <label> by <div> - remove 'for' attribute
	// On a tablet the label is sensitive - click sets focus on attached field
	Field.prototype.appendTitle = function() {
		if (!(this.$item.$inplace || this.$item.$isTitleHidden)) {
			this.domTitle = document.createElement("div");
			this.domTitle.className = this._$cssTopField + "-title";
			this.domItem.appendChild(this.domTitle);
		}
	};
	// Force use table display for field pickers instead of absolute position
	// -> we need to put the pickers out of the input area
	var loadBox = Field.prototype.loadBox;
	Field.prototype.loadBox = function($$item) {
		var self = this;
		loadBox.call(self, $$item);
		if (self._input) {
			// Add escape button at the end of icons list only in fusion page
			if (self.page.$isFusionPage && !self._tabletEscapePicker && (_escapeFields.indexOf(this.$field.$type) >= 0)) {
				self._tabletEscapePicker = document.createElement("div");
				self.fieldValue.appendChild(self._tabletEscapePicker).className = self.$skin + "-escape";
				// Create my own picker with data-m-picker attribute - See events function above
				var btn = document.createElement("a");
				var css = this.$skin + "-" + "escape";
				if (this.$item.$css) {
					css = this.$item.$css + " " + css;
				}
				btn.className = css + "-picker";
				btn.setAttribute("data-m-picker", "escapefield");
				self._tabletEscapePicker.appendChild(btn);
				var s = self.domValueSlot ? self.domValueSlot.style : null;
				if (s && s.maxWidth) {
					// We add 15px to width - maxWidth = 120px - To improve
					var w = s.maxWidth.split(/\D/)[0];
					if (w.length > 0 && !isNaN(w)) {
						s.maxWidth = (parseInt(w) + 15) + "px";
					}
				}
			}
			var parent = $(self._input.parentNode);
			parent.css({
				"display": "table"
			});
			parent.children().each(function(idx, elmt) {
				var e = $(elmt);
				if (e.hasClass("s-field-context-menus") || e.hasClass("s-field-pickers")) {
					e.css({
						"position": "relative",
						"display": "table-cell",
						"padding-right": "0px",
						"padding-left": idx == 0 ? "3px" : "0px"
					});
					e.find("a").css({
						"width": "22px"
					});
				} else if (e.hasClass("s-field-input-ref-desc")) {
					// Description in bottom/left
					e.css({
						"position": "absolute",
						"left": "0px",
						"top": "20px"
					});
				}
			});
			// 5PX on right side for input - See also setState if paddingRight is changed
			self._input.style.paddingRight = "5px";
		}
		self.boxPickersPadding = 0;
	};
	// Restore table display style (field class resets display by setting display to empty value)
	var setState = Field.prototype.setState;
	Field.prototype.setState = function(state) {
		var self = this;
		setState.call(self, state);
		restorePickersStyle(self);
	};
	// Restore table display if lost (field class resets display by setting display to empty value)
	var setMenusBox = Field.prototype.setMenusBox;
	Field.prototype.setMenusBox = function(metaData) {
		setMenusBox.call(this, metaData);
		if (this.menusBox && this.menusBox.domItem) {
			var s = this.menusBox.domItem.style;
			if (s.display != "none") {
				s.paddingRight = "0px";
				s.display = "table-cell";
				s.position = "relative";
			}
		}
	};
	var showDiagnoses = Field.prototype.showDiagnoses;
	Field.prototype.showDiagnoses = function($diagnoses, options) {
		var self = this;
		showDiagnoses.call(self, $diagnoses, options);
		// Hide contextual menu and display escape/reset button
		if (self._tabletEscapePicker) {
			var ctxMenu = self.menusBox ? self.menusBox.domItem : null;
			if ($diagnoses.length > 0) {
				self._tabletEscapePicker.style.display = "table-cell";
				if (ctxMenu) ctxMenu.style.display = "none";
			} else {
				self._tabletEscapePicker.style.display = "none";
				if (ctxMenu) ctxMenu.style.display = "table-cell";
			}
		}
	};
	// Disable mouseenter/mouseleave process - no mouse events on a tablet
	var onItemEnterLeave = Field.prototype.onFieldMouseEvent;
	Field.prototype.onItemEnterLeave = function(event) {
		return;
	};
	// Send shiftTAB event on "escape button" click
	Field.prototype.mobileEscape = function(type, setFocus) {
		var self = this;
		if (self._tabletEscapePicker) {
			// Simulate a keydown event with escape keycode on input field
			// --> Restore previous valid value
			var e = jQuery.extend(new jQuery.Event(), {
				type: type == "escapefield" ? "keydown" : "keyup",
				target: self,
				keyCode: keys["VK_ESCAPE"],
				isSimulated: true,
				originalEvent: {},
				// We store the type of escape in e.typeEscape - See gridEventHandling
				typeEscape: type
			});
			self.page.externalAdapter.onFieldEvent({
				field: self,
				event: e,
				doEvent: function() {}
			});
			if (this._input && setFocus) {
				// Set focus on input because focus has been lost by click on picker
				$(this._input).focus();
			}
			return true;
		}
		return false;
	};
	var showItem = Field.prototype.showItem;
	Field.prototype.showItem = function(show) {
		var self = this;
		showItem.call(self, show);
		if (self.$item.$inplace && self._dataValue.style.display == "") {
			// restore table display for grid fields
			self._dataValue.style.display = "table";
		}
	};
	// Add this method
	Field.prototype.isGridCell = function() {
		return this.arrayLevel && this.arrayLevel == "cell";
	};

	// Show/Hide an escape line button in the first cell of the grid for cells in focusin/focusout
	// TODO - optimize and test for different type of grids and card view
	var onFieldInputEvent = Field.prototype.onFieldInputEvent;
	Field.prototype.onFieldInputEvent = function(event, shortcuts) {
		var self = this;
		onFieldInputEvent.call(self, event, shortcuts);
		// Only fields on which we need an escape for the line
		if (self.isGridCell() && self.$isEditMode && self._input && (event.type == "focusin" || event.type == "focusout")) {
			var list = self.articleParent;
			var line = list.$$item;
			var cellIdx = line.find(".s-grid-row-index");
			if (cellIdx.length == 0) return;
			cellIdx = cellIdx[0];
			var $cellEsc = line.find(".s-field-escape-picker");
			var cellEsc = $cellEsc.length > 0 ? $cellEsc[0] : null;
			if (event.type == "focusout") {
				// Restore index cell in any cases
				if (cellEsc) cellEsc.style.display = "none";
				if (cellIdx) cellIdx.style.display = "table-cell";
			} else if (cellEsc != null && cellEsc.style.display == "table-cell") {
				// Escape already displayed - Just save field ID
				$cellEsc.attr("data-m-id", $(self._input).attr("id"));
			} else if (self._tabletEscapePicker) {
				var input = $(self._input);
				if (!input.hasClass('s-x3mode-command')) {
					if (cellEsc == null) {
						// create escape cell and attach it to the row
						$cellEsc = $('<td  class="s-grid-cell s-field-escape-picker" data-m-picker="escapeline"></td>');
						line.prepend($cellEsc);
						cellEsc = $cellEsc[0];
					}
					// Switch cell index to cell escape
					cellEsc.style.display = "table-cell";
					cellIdx.style.display = "none";
					// SAve field ID
					$cellEsc.attr("data-m-id", $(self._input).attr("id"));
				}
			}
		}
	};
}

function menuItem() {
	var MenuItem = require('syracuse-ui/lib/menus/menuItem').MenuItem;
	var MenuGroup = require('syracuse-ui/lib/menus/menuGroup').MenuGroup;
	// Hide excel and word links in right panel
	var loadBox = MenuItem.prototype.loadBox;
	MenuItem.prototype.loadBox = function() {
		var res = loadBox.call(this);
		var hidden = false;
		// syracuse
		// console.log(this.$item.$bind + "/" + (this.$type && typeof this.$type));
		if (this.$item.$bind && typeof this.$item.$bind === "string" &&
			(this.$item.$bind.indexOf("$word") === 0 ||
				this.$item.$bind.indexOf("$excel") === 0 ||
				this.$item.$bind.indexOf("$pptslide") === 0)) {
			hidden = true;
		}
		// cvg by type
		else if (this.$type && typeof this.$type === "string" &&
			(this.$type.indexOf("application/syracuse-excel-worksheet") >= 0 ||
				this.$type.indexOf("application/syracuse-word-report") >= 0 ||
				this.$type.indexOf("application/syracuse-word-mailmerge") >= 0 ||
				this.$type.indexOf("application/syracuse-ppt-slide") >= 0)) {
			hidden = true;
		}
		// cvg by special name
		else if (this.$item.$bind && typeof this.$item.$bind === "string" &&
			(this.$item.$bind.indexOf("cvgOffice") === 0)) {
			hidden = true;
		}

		if (hidden === true) {
			this.$isHidden = true;
			this.showItem(!this.$isHidden);
		}
		return res;
	};

	/*
    Hide utilities menu
     */

	function isMenuGroupHidden($item) {
		var ids = [
			"318", // SUBMENU_DIAGNOS_CMN
			"40003", // Global export
			"18000" //Export
		];
		return ($item && $item.$clientId && ids.indexOf($item.$clientId) >= 0) ? true : false;
	}
	var menuGroupLoadBox = MenuGroup.prototype.loadBox;
	var menuGroupHideBox = MenuGroup.prototype.hideBox;
	MenuGroup.prototype.loadBox = function() {
		var res = menuGroupLoadBox.call(this);
		if (isMenuGroupHidden(this.$item)) {
			if (this.$$item) {
				this.$isHidden = true;
				this.hideBox(true);
			}
		}
		return res;
	};
	MenuGroup.prototype.hideBox = function(hidden) {
		if (isMenuGroupHidden(this.$item)) {
			hidden = true;
		}
		var res = menuGroupHideBox.call(this, hidden);
		return res;
	};
	// 
	var setIconValue = MenuItem.prototype._setIconValue;
	MenuItem.prototype._setIconValue = function() {
		var name = this.$iconValue || this.value || this.$icon.$value || this.$item.$bind.replace("$", "");
		if (_menuImgs.indexOf(name) >= 0) {
			var $path = "/syracuse-ui/themes/tablet/sage/images/" + (this.$icon.$path || "");
			this.iconValue.style.backgroundImage = "url('" + $path + name + ".png')";
		} else {
			setIconValue.call(this);
		}
	};
}

function commonEventHandlingTools() {
	var CommonEventHandlingTools = require('syracuse-ui/lib/fusion/core/client/eventhandling/common').CommonEventHandlingTools;
	CommonEventHandlingTools._checkCtxMenuEntry = function(men) {
		if (men && men.id && men.id === "$tabularExport")
			return false;
		return true;
	};
}

function removeFlash() {
	var flashWidget = require('syracuse-ui/lib/field/chart/flashWidget');
	var locale = require('syracuse-core/lib/locale');
	if (!_localeData)
		_localeData = locale.resources(module)();

	flashWidget.FlashWidget.prototype.drawBox = function() {
		var $cnt = $("<div class=\"s-h1-body s-cst-sty-not-sup\">" + _localeData["not_sup"] + "</div>");
		$(this.layoutSlot).append($cnt);
	};
	flashWidget.FlashWidget.prototype.onWindowResize = function() {};
	flashWidget.FlashWidget.prototype.setDataBind = function(dataRecordSet, parentDataRecord, metaData) {};
	flashWidget.FlashWidget.prototype.applyDesignMetaData = function(metadata, designing) {};
	flashWidget.FlashWidget.prototype.dispose = function() {};

	flashWidget.CubeChart.prototype.drawBox = function() {
		var $cnt = $("<div class=\"s-h1-body s-cst-sty-not-sup\">" + _localeData["not_sup"] + "</div>");
		$(this.layoutSlot).append($cnt);
	};
	flashWidget.CubeChart.prototype.onWindowResize = function() {};
	flashWidget.CubeChart.prototype.setDataBind = function(dataRecordSet, parentDataRecord, metaData) {};
	flashWidget.CubeChart.prototype.applyDesignMetaData = function(metadata, designing) {};
	flashWidget.CubeChart.prototype.dispose = function() {};
}

function adjustHighcharts() {
	var highCharts = require('syracuse-ui/lib/field/chart/highCharts');
	highCharts.TabularChart.prototype._printSupported = function() {
		return false;
	};
	highCharts.TabularChart.prototype._exportSupported = function() {
		return false;
	};
}


function BarSplitter() {
	var barSplitter = require("syracuse-ui/lib/page/bar/barSplitter").BarSplitter;
	barSplitter.prototype.isSwipable = function(target, event) {
		if (target == this.swipeBar) {
			document.site.ddManager.swipableItem = {
				barSplitter: this,
				resizeDirection: this.options.resizeDirection,
				swipeDirection: "left" //(event.type == "swiperight") ? "right" : "left"
			};
			return;
		}
		return null;
	};
	barSplitter.prototype.onSwipeRight = function() {
		//tabletUtil.logOnServer('onSwipeRight: onSwipeRight');
		if (($(this._bar).is(".s-dash-menubar , .s-fusion-bar") && this.$isCollapsed) ||
			($(this._bar).is(".s-page-menubar") && !this.$isCollapsed)) {
			this.collapse();
			this._onSwitchBarState();
		}
		return false;
	};
	barSplitter.prototype.onSwipeLeft = function() {
		//tabletUtil.logOnServer('onSwipeLeft');
		if (($(this._bar).is(".s-dash-menubar, .s-fusion-bar") && !this.$isCollapsed) ||
			($(this._bar).is(".s-page-menubar") && this.$isCollapsed)) {
			this.collapse();
			this._onSwitchBarState();
		}
		return false;
	};



	barSplitter.prototype.toggleAutoFloat = function(isAutoFloat) {
		if ((document.site.$item && document.site.$item.$device && document.site.$item.$device == 'tablet' && this.options.resizeDirection.right) ||
			document.site.$item && document.site.$item.$device && document.site.$item.$device != 'tablet') {
			if (isAutoFloat) {
				this.isAutoFloat = isAutoFloat;
				if (this.$viewMode == "dock") {
					this.$viewMode = "float";
					this.$isCollapsed = true;
					this.ensureState();
				}
			} else {
				if (this.isAutoFloat) {
					this.isAutoFloat = isAutoFloat;
					if (this.$viewMode == "float") {
						this.$viewMode = "dock";
						this.$isCollapsed = false;
						this.ensureState();
					}
				}
			}
		}
		this.onWindowResize();
	};











	var load = barSplitter.prototype.load;
	barSplitter.prototype.load = function(page) {
		//var preferences=document.site.getPreferences(this.preferenceKey, null, this);

		var defaultState = {
			$viewMode: "dock",
			$isCollapsed: false
		};
		if (this.preferenceKey) {
			var preferences = document.site.getPreferences(this.preferenceKey, defaultState, this);
		} else {
			document.site.applyValues(this, defaultState);
		}

		this.options.$isResizerDisabled = preferences && preferences.$isResizerDisabled;
		this.options.$swiper = preferences && preferences.$swiper;


		this.page = page;
		this.page.attachToPageResizeListener(true, this);
		this._bar = document.createElement("div");
		this._bar.className = this.options.$skins.bar;

		if (this.options.$swiper) {
			this.swipeBar = document.createElement("div");
			this.swipeBar.className = this.options.$skins.resizeBar;
			this.openerPicker = document.createElement("a");
			this.openerPicker.className = this.options.$skins.openerPicker;
			this.openerPicker.setAttribute("data-s-picker", "s-bar-collapse");
			this.page.setArticleId(this.openerPicker);
			this.openerPicker.style.display = "none";
			this.swipeBar.appendChild(this.openerPicker);
			this._bar.appendChild(this.swipeBar);
			document.site.ddManager.toggleBarSwiperObserver(this, true);
		}

		this._bar.appendChild(this.barBody);
		this.barSlot.appendChild(this._bar);

		this.onBarBodyAdded();

		/* if (page.$pageCategory == "vignette" || page.$pageCategory == "dashboard") {
	            this.page.domItem.insertBefore(this.barSlot, this.page.domItem.firstChild);
	            this.options.swipeDirection.left = true;
	        }*/

		this.ensureState();
	};
	var onWindowResize = barSplitter.prototype.onWindowResize;
	barSplitter.prototype.onWindowResize = function() {
		onWindowResize.call(this);
		if (this.swipeBar) {
			var scrollviewRect = document.site.getBoundingClientRect(this.page.scrollview);
			this.swipeBar.style.height = scrollviewRect.height + "px";
			this.openerPicker.style.display = "";
			this.openerPicker.style.top = ((scrollviewRect.height - this.openerPicker.clientHeight) / 2) + "px";
		}

	};
	var ensureState = barSplitter.prototype.ensureState;
	barSplitter.prototype.ensureState = function() {
		ensureState.call(this);
		if (this.swipeBar) {
			document.site.toggleClass(this.swipeBar, "s-close", this.$isCollapsed);
			document.site.toggleClass(this.openerPicker, "s-close", this.$isCollapsed);
			//if we let the menu bar  on the right for portrait mode we need to uncomment this to have the right opener picker image  
			//if ( (this.preferenceKey == "dash-menubar" || this.preferenceKey == "vignette-menubar") 
			//		/*&& ( document.body.clientHeight >= document.body.clientWidth)*/){
			//	document.site.toggleClass(this.openerPicker, "s-right-aligned", this.$isCollapsed);
			//}

		}
	};

	var dispose = barSplitter.prototype.dispose;
	barSplitter.prototype.dispose = function() {
		if (this.swipeBar) {
			var dd = document.site.ddManager;
			if (!dd._observers.barSwiper) dd._observers.barSwiper = [];
			dd.toggleBarSwiperObserver(this, false);
		}
		dispose.call(this);
	};
}


function dragDropManagerHack() {
	var dragDropManager = require("syracuse-ui/lib/site/tools/dragDropManager").DragDropManager;
	var load = dragDropManager.prototype.load;
	dragDropManager.prototype.load = function(page) {
		load.call(this, page);
		this._observers.barSwiper = [];
	};
	dragDropManager.prototype.toggleBarSwiperObserver = function(observer, add) {
		this._toggleObserver("barSwiper", observer, add);
	};
}


function FusionBar() {
	//var BarSplitter = require("syracuse-ui/lib/page/bar/barSplitter").BarSplitter;
	var fusionBar = require("syracuse-ui/lib/fusion/article/fusionBar").FusionBar;
	var MobileEventListener = require("syracuse-ui/lib/tablet/mobileEventListener").MobileEventListener;
	var load = fusionBar.prototype.load;
	fusionBar.prototype.load = function(page, $fusionBar) {

		var evtListener = new MobileEventListener();
		evtListener.load();
		load.call(this, page, $fusionBar);
		var spotf = $(".s-fusion-bar-resizer");
		evtListener._bindSwipePanel(spotf);

	};
}



exports.initBeforeLoad = function(site) {
	dragDropManagerHack();

};
exports.initAfterLoad = function(site) {

	numericField();
	field();
	menuItem();
	commonEventHandlingTools();
	removeFlash();
	adjustHighcharts();
	diagnosesPanel(site);
	gridEventHandling();
	BarSplitter();
	FusionBar();
	events(site);

};

exports.dispose = function(site) {
	// Dispose event - Perhaps already done by EventListener dispose
	if (site.$$layoutSlot && site.$$layoutSlot.undelegate) {
		site.$$layoutSlot.undelegate();
	}
};