"use strict";
var helpers = require('syracuse-core/lib/helpers');
var keys = require('syracuse-ui/lib/fusion/tools/constant').keybordKey;
var sapUtil = require('syracuse-ui/lib/fusion/core/client/sap/util').Fusion;
var tabletUtil = require('./helpers');

var _escapeFields = ["application/x-string", "application/x-date", "application/x-integer", "application/x-decimal", "application/x-reference"];

// Add new events
function events(site) {
	// Bind click on Escape/Reset button
	$(site.layoutSlot).delegate("[data-m-picker]", "mousedown click", function(event) {
		var attr = $(event.target).attr('data-m-picker') || "";
		if (attr == "escapefield") {
			// Escape from a field
			var field = syra_store.findField(this);
			if (field) {
				if (event.type == "mousedown") {
					// Stop to prevent focusOut of input field
					event.stopPropagation();
					event.preventDefault();
				} else
				if (event.type == "click") {
					var s = field.diagnoseFieldSlot ? field.diagnoseFieldSlot.style : null;
					if (s) {
						// We don't want o display field's error message on click on escape button
						s.display = "none";
					}
					// Simulate escape
					field.mobileEscape(attr, true);
					if (s) {
						window.setTimeout(function() {
							// We restore old display status
							s.display = "";
						}, 200);
					}
				}
			}
		}

	});
}

// Remove Error icon and Error message on grid field - Keep just the red border (not enough room)
function field() {
	var Field = require('syracuse-ui/lib/field/field').Field;
	// Force use table display for field pickers instead of absolute position
	// -> we need to put the pickers out of the input area
	var loadBox = Field.prototype.loadBox;
	Field.prototype.loadBox = function() {
		var self = this;
		loadBox.call(self);
		if (self.input) {
			// Add escape button at the end of icons list only in fusion page
			if (self.page.isFusionPage && !self._tabletEscapePicker && (_escapeFields.indexOf(this.$field.$type) >= 0)) {
				self._tabletEscapePicker = document.createElement("div");
				self.fieldValue.appendChild(self._tabletEscapePicker).className = self.$skin + "-escape";
				// Create my own picker with data-m-picker attribute - See events function above
				var btn = document.createElement("a");
				var css = this.$skin + "-" + "escape";
				if (this.$item.$css) {
					css = this.$item.$css + " " + css;
				}
				btn.className = css + "-picker";
				btn.setAttribute("data-m-picker", "escapefield");
				self._tabletEscapePicker.appendChild(btn);
				var s = self._dataValue ? self._dataValue.style : null;
				if (s && s.maxWidth) {
					// We add 15px to width - maxWidth = 120px - To improve
					var w = s.maxWidth.split(/\D/)[0];
					if (w.length > 0 && !isNaN(w)) {
						s.maxWidth = (parseInt(w) + 15) + "px";
					}
				}
			}
		}
	};
	// Restore table display style (field class resets display by setting display to empty value)
	var showDiagnoses = Field.prototype.showDiagnoses;
	Field.prototype.showDiagnoses = function($diagnoses, options) {
		var self = this;
		showDiagnoses.call(self, $diagnoses, options);
		// Hide contextual menu and display escape/reset button
		if (self._tabletEscapePicker) {
			var ctxMenu = self.menusBox ? self.menusBox.domItem : null;
			if ($diagnoses.length > 0) {
				self._tabletEscapePicker.style.display = "table-cell";
				if (ctxMenu)
					ctxMenu.style.display = "none";
			} else {
				self._tabletEscapePicker.style.display = "none";
				if (ctxMenu)
					ctxMenu.style.display = "table-cell";
			}
		}
	};
	// Disable mouseenter/mouseleave process - no mouse events on a tablet
	var onItemInOut = Field.prototype.onFieldMouseEvent;
	Field.prototype.onItemInOut = function() {
		return;
	};
	// Send shiftTAB event on "escape button" click
	Field.prototype.mobileEscape = function(type, setFocus) {
		var self = this;
		if (self._tabletEscapePicker) {
			// Simulate a keydown event with escape keycode on input field
			// --> Restore previous valid value
			var e = jQuery.extend(new jQuery.Event(), {
				type: type == "escapefield" ? "keydown" : "keyup",
				target: self,
				keyCode: keys["VK_ESCAPE"],
				isSimulated: true,
				originalEvent: {},
				// We store the type of escape in e.typeEscape - See gridEventHandling
				typeEscape: type
			});
			self.page.externalAdapter.onFieldEvent({
				field: self,
				event: e,
				doEvent: function() {}
			});
			if (this.input && setFocus) {
				// Set focus on input because focus has been lost by click on picker
				$(this.input).focus();
			}
			return true;
		}
		return false;
	};
}

function menuItem() {
	var MenuItem = require('syracuse-ui/lib/menus/menuItem').MenuItem;
	var MenuGroup = require('syracuse-ui/lib/menus/menuGroup').MenuGroup;
	// Hide excel and word links in right panel
	var loadBox = MenuItem.prototype.loadBox;
	MenuItem.prototype.loadBox = function() {
		var res = loadBox.call(this);
		var hidden = false;
		// syracuse
		// console.log(this.$item.$bind + "/" + (this.$type && typeof this.$type));
		if (this.$item.$bind && typeof this.$item.$bind === "string" &&
			(this.$item.$bind.indexOf("$word") === 0 ||
				this.$item.$bind.indexOf("$excel") === 0 ||
				this.$item.$bind.indexOf("$pptslide") === 0)) {
			hidden = true;
		}
		// cvg by type
		else
		if (this.$type && typeof this.$type === "string" &&
			(this.$type.indexOf("application/syracuse-excel-worksheet") >= 0 ||
				this.$type.indexOf("application/syracuse-word-report") >= 0 ||
				this.$type.indexOf("application/syracuse-word-mailmerge") >= 0 ||
				this.$type.indexOf("application/syracuse-ppt-slide") >= 0)) {
			hidden = true;
		}
		// cvg by special name
		else
		if (this.$item.$bind && typeof this.$item.$bind === "string" &&
			(this.$item.$bind.indexOf("cvgOffice") === 0)) {
			hidden = true;
		}

		if (hidden === true) {
			this.$isHidden = true;
			this.showItem(!this.$isHidden);
		}
		return res;
	};

	/*
     Hide utilities menu
     */
	function isMenuGroupHidden($item) {
		var ids = ["318", // SUBMENU_DIAGNOS_CMN
			"40003", // Global export
			"18000" //Export
		];
		return ($item && $item.$clientId && ids.indexOf($item.$clientId) >= 0) ? true : false;
	}
	var menuGroupLoadBox = MenuGroup.prototype.loadBox;
	var menuGroupShowItem = MenuGroup.prototype.showItem;
	MenuGroup.prototype.loadBox = function() {
		var res = menuGroupLoadBox.call(this);
		if (isMenuGroupHidden(this.$item)) {
			if (this.domItem) {
				this.$isHidden = true;
				this.showItem(false);
			}
		}
		return res;
	};
	MenuGroup.prototype.showItem = function(show) {
		if (isMenuGroupHidden(this.$item)) {
			show = false;
		}
		var res = menuGroupShowItem.call(this, show);
		return res;
	};
}

function commonEventHandlingTools() {
	var CommonEventHandlingTools = require('syracuse-ui/lib/fusion/core/client/eventhandling/common').CommonEventHandlingTools;
	CommonEventHandlingTools._checkCtxMenuEntry = function(men) {
		if (men && men.id && men.id === "$tabularExport")
			return false;
		return true;
	};
}

function removeFlash() {
	var flashWidget = require('syracuse-ui/lib/field/chart/flashWidget');
	flashWidget.FlashWidget.prototype.drawBox = function() {
		var $cnt = $("<div class=\"s-h1-body s-cst-sty-not-sup\">" + syra_local.table_not_sup + "</div>");
		$(this.layoutSlot).append($cnt);
	};
	flashWidget.FlashWidget.prototype.resizeChart = function() {};
	flashWidget.FlashWidget.prototype.setDataBind = function(dataRecordSet, parentDataRecord, metaData) {};
	flashWidget.FlashWidget.prototype.applyDesignMetaData = function(metadata, designing) {};
	flashWidget.FlashWidget.prototype.dispose = function() {};

	flashWidget.CubeChart.prototype.drawBox = function() {
		var $cnt = $("<div class=\"s-h1-body s-cst-sty-not-sup\">" + syra_local.table_not_sup + "</div>");
		$(this.layoutSlot).append($cnt);
	};
	flashWidget.CubeChart.prototype.resizeChart = function() {};
	flashWidget.CubeChart.prototype.setDataBind = function(dataRecordSet, parentDataRecord, metaData) {};
	flashWidget.CubeChart.prototype.applyDesignMetaData = function(metadata, designing) {};
	flashWidget.CubeChart.prototype.dispose = function() {};
}

function adjustHighcharts() {
	var highCharts = require('syracuse-ui/lib/field/chart/highCharts');
	highCharts.TabularChart.prototype._printSupported = function() {
		return false;
	};
	highCharts.TabularChart.prototype._exportSupported = function() {
		return false;
	};
}

exports.initAfterLoad = function(site) {
	field();
	menuItem();
	commonEventHandlingTools();
	removeFlash();
	adjustHighcharts();
	events(site);
};