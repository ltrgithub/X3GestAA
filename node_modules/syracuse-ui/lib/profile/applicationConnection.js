"use strict";
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var List = require('syracuse-ui/lib/scroll/list').List;

function ApplicationConnection() {
	this.$applicationConnectionUrl = {};
	this.stack = {};
	this.dispose = function() {
		if (this.list) {
			this.list.empty();
			this.list.dispose();
		}
		this.page && this.page.dispose();
		syra_site.diposeObject(this);
	};
	this.applyChange = function(newData) {
		if (newData) {
			var $link = newData.$links && newData.$links.$applicationConnection;
			var data, proto;
			if (newData.applicationConnection) {
				this.$applicationConnectionUrl != $link.$url;
				data = newData.applicationConnection.data && JSON.parse(newData.applicationConnection.data);
				proto = newData.applicationConnection.proto && JSON.parse(newData.applicationConnection.proto);
				if (!this.page) {

				} else {
					this.$applicationConnectionUrl != $link.$url;
					data && this.page.applyChange(data);
					return;
				}
			}

			if ($link && this.$applicationConnectionUrl != $link.$url) {
				$link.$url = $link.$url.replace(/ACHGENVX3/g, "GACCOUNT");
				this.load(this.$applicationConnectionUrl = $link.$url, data);
			}
		}
	};
	this.resize = function() {
		if (this.list) {
			this.list.resize(150);
			return this.list.scrollSlot.clientHeight;
		}
		return 0;
	};

	this.showFields = function(edit) {
		if (this.stack[!edit]) {
			var hideList = this.stack[!edit];
			for (var ii = 0, jj = hideList.length; ii < jj; ii++) {
				syra_dom.hide(hideList[ii].layoutSlot, true);
			}
		}
		var showList = this.stack[edit];
		if (!showList) {
			this.stack[edit] = showList = [];
			var $properties = this.page.$prototype.$properties;
			var $binds = Object.keys($properties);
			var sample = {};
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				var $field = $properties[$bind];
				switch ($field.$type) {
					case "application/x-choice":
					case "application/x-date":
					case "application/x-reference":
					case "application/x-string":
						if (sample[$field.$type]) {
							continue;
						}
						sample[$field.$type] = 1;
						break;
					default:
						continue;
				}
				if (!$field.$isExcluded) {
					var $item = {
						$summary: {},
						$openBy: "over",
						$isEditMode: edit,
						$isShortcutDisabled: true,
						$skin: "s-profile-field",
						$bind: $bind,
						$popupRight: true,
						$title: $properties[$bind].$title,
						$setValue: function(value) {
							syra_dom.remove(this._core);
							if (!this.templateValue) {
								this.templateValue = syra_dom.span("s-profile-field-value", this.domItem);
							}
							var value;
							switch (this.$field.$type) {
								case "application/x-reference":
									value = this.displayText;
									break;
								case "application/x-choice":
									value = this.$selectedEnum && this.$selectedEnum.$title;
									break;
								case "application/x-string":
								case "application/x-date":
									if (this.input) {
										if (this.input.parentNode != this.domItem) {
											this.domItem.appendChild(this.input);
											this.input.style.width = ((this.$field.$displayLength || this.$field.$maxLength) * 6) + "px";
										}
										// value = this.input.value;
									} else {
										value = this.getDisplayText();
									}
									break;
							}
							if (value != null && value != "") {
								syra_dom.hide(this.templateValue, false);
								this.templateValue.textContent = "(" + value + ")";
							} else {
								syra_dom.hide(this.templateValue, true);
							}
							var picker = this.picker_$lookup || this.picker_choice || this.picker_date || this.picker_time;
							picker && this.domItem.appendChild(picker.link);
							if (this.diagsSlot) {
								this.domItem.appendChild(this.diagsSlot);
							}
						},
					};
					switch ($field.$type) {
						case "application/x-string":
							delete $field.$links;
							break;
						case "application/x-reference":
							$item.$picker = "field";
							break;
						case "application/x-choice":
							$item.$format = "$combo";
							$item.$skinList = "s-list-primary";
							$item.$isReadOnly = true;
							$item.$topSelection = true;
							break;
					}
					showList.push(this.list.addItem(this.page, $item));
				}
			}
		} else {
			for (var ii = 0, jj = showList.length; ii < jj; ii++) {
				syra_dom.hide(showList[ii].layoutSlot, false);
			}
		}
	};

	this.activateEdit = function(edit) {
		this.showFields(edit);
		syra_button.hide(this.editBtn, edit);
		syra_button.hide(this.saveBtn, !edit);
		syra_button.hide(this.cancelBtn, !edit);
	};
	this.showList = function(parentNode) {
		if (this.page) {
			if (!this.list) {
				var self = this;
				self.slot = syra_dom.div("s-profile-application", parentNode);
				var actions = syra_dom.div("s-list-primary-line-actions", self.slot);
				self.editBtn = syra_button.add({
					parent: self.page,
					slot: actions,
					test: "save",
					iconOnly: true,
					fontIcon: "edit",
					css: "s-list-primary-line-action",
					click: function() {
						self.activateEdit(true);
					}
				});
				self.saveBtn = syra_button.add({
					parent: self.page,
					slot: actions,
					test: "save",
					iconOnly: true,
					fontIcon: "save",
					isHidden: true,
					css: "s-list-primary-line-action",
					click: function() {
						//  debugger;
						if (syra_form.validate(self.page)) {
							var sendBag = syra_form.getSendBag(syra_site.userProfile);
							delete self.page.sendBag.$etag;
							sendBag.applicationConnection = {
								proto: JSON.stringify(self.$prototype.$properties),
								data: JSON.stringify(self.page.sendBag)
							};
							sendBag.$actions = {
								$save: {
									$isRequested: true
								}
							};
							syra_form.updateWorkingCopy(syra_site.userProfile, sendBag);
							self.activateEdit(false);
						}
						syra_site.userProfile._popup.resize();

					}
				});
				self.cancelBtn = syra_button.add({
					parent: self.page,
					slot: actions,
					test: "save",
					iconOnly: true,
					fontIcon: "cancel",
					isHidden: true,
					css: "s-list-primary-line-action",
					click: function() {
						self.activateEdit(false);
					}
				});
				self.list = new List({
					css: "s-list-primary",
					parentNode: self.slot,
					scroll: true,
				});
				self.activateEdit(false);
			}
		}
	};
	this.load = function($applicationConnection, data) {
		var self = this;
		if (typeof $applicationConnection == "string") {
			syra_router.loadRepresentation({
				article: syra_site,
				segments: $applicationConnection,
				success: function success($itemPage) {
					self._loadPage($itemPage, data);
					/*  $itemPage.$page = new DesktopPage();
					 $itemPage.$page.$autoFetch = false;
					 $itemPage.$page.isServerNotifyDisabled = true;
					 $itemPage.$representation.$prototype.$article = {
					 $layout: {
					 $items: []
					 }
					 };
					 self.$prototype = syra_site.clone($itemPage.$representation.$prototype);
					 syra_pageBuilder.load({
					 $itemPage: $itemPage,
					 success: function(page){
					 self.page = page;
					 }
					 });*/
				},
				error: function(response, ajax, $diagnoses) {
					syra_alert.show($diagnoses, null, {
						silent: true
					});
				}
			});
		}
	};
	this._loadPage = function($itemPage, data) {
		var self = this;
		$itemPage.$page = new DesktopPage();
		$itemPage.$page.$autoFetch = false;
		$itemPage.$page.isServerNotifyDisabled = true;
		$itemPage.$representation.$prototype.$article = {
			$layout: {
				$items: []
			}
		};
		self.$prototype = syra_site.clone($itemPage.$representation.$prototype);
		syra_pageBuilder.load({
			$itemPage: $itemPage,
			success: function(page) {
				self.page = page;
				data && self.page.applyChange(data);
			}
		});
	}
}



exports.ApplicationConnection = ApplicationConnection;