"use strict";
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var List = require('syracuse-ui/lib/scroll/list').List;



function ApplicationConnection() {
	this.$applicationConnectionUrl = null;
	this.stack = {};
	this.dispose = function() {
		if (this.list) {
			this.list.empty();
			this.list.dispose();
		}
		this.page && this.page.dispose();
		syra_site.diposeObject(this);
	};
	this.applyChange = function(newData) {
		if (newData) {
			var $link = newData.$links && newData.$links.$applicationConnection;
			var data, proto;
			if (newData.applicationConnection) {
				this.$applicationConnectionUrl = $link.$url;
				data = newData.applicationConnection.data && JSON.parse(newData.applicationConnection.data);
				proto = newData.applicationConnection.proto && JSON.parse(newData.applicationConnection.proto);
				if (!this.page) {

				} else {
					this.$applicationConnectionUrl = $link.$url;
					data && this.page.applyChange(data);
					return;
				}
			}

			if ($link && this.$applicationConnectionUrl != $link.$url) {
				//$link.$url = $link.$url.replace(/ACHGENVX3/g, "GACCOUNT");
				this.load(this.$applicationConnectionUrl = $link.$url, data);
			}
		}
	};
	this.resize = function() {
		if (this.list) {
			this.list.resize(150);
			return this.list.scrollSlot.clientHeight;
		}
		return 0;
	};
	this._setFieldValue = function(field, value) {
		syra_dom.remove(field._core);
		if (!field.templateValue) {
			field.templateValue = syra_dom.span("s-profile-field-value", field.domItem);
		}
		var value;
		switch (field.$field.$type) {
			case "application/x-reference":
				value = field.displayText;
				break;
			case "application/x-choice":
				value = field.$selectedEnum && field.$selectedEnum.$title;
				break;
			case "application/x-string":
			case "application/x-date":
				if (field.input) {
					if (field.input.parentNode != field.domItem) {
						field.domItem.appendChild(field.input);
						field.input.style.width = ((field.$field.$displayLength || field.$field.$maxLength) * 6) + "px";
					}
					// value = field.input.value;
				} else {
					value = field.getDisplayText();
				}
				break;
		}
		if (!field.$item.$stackEdit) {
			if (!this.statusSlot) {
				this.statusSlot = syra_dom.div("s-profile-status-bar", syra_site.footer);
			}
			if (!field.profileStatusSlot) {
				var slot = field.profileStatusSlot = syra_dom.div("s-profile-status-field", this.statusSlot);
				field.profileStatusTitle = syra_dom.span("s-profile-status-field-title", slot);
				field.profileStatusValue = syra_dom.span("s-profile-status-field-value", slot);
			}
		}
		if (value != null && value != "") {
			syra_dom.hide(field.profileStatusSlot, false);
			syra_dom.hide(field.templateValue, false);
			field.templateValue.textContent = "(" + value + ")";
			if (field.profileStatusTitle) {
				field.profileStatusTitle.textContent = field.getTitle();
				field.profileStatusValue.textContent = "(" + value + ")";
			}
		} else {
			syra_dom.hide(field.templateValue, true);
			syra_dom.hide(field.profileStatusSlot, true);
		}
		var picker = field.picker_$lookup || field.picker_choice || field.picker_date || field.picker_time;
		picker && field.domItem.appendChild(picker.link);
		if (field.diagsSlot) {
			field.domItem.appendChild(field.diagsSlot);
		}

	};
	this._loadFields = function(edit) {
		var self = this;
		var fields = self.stack[edit] = [];
		var $properties = self.page.$prototype.$properties;
		var $binds = Object.keys($properties);
		var sample = {};
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var $field = $properties[$bind];
			switch ($field.$type) {
				case "application/x-choice":
				case "application/x-date":
				case "application/x-reference":
				case "application/x-string":
					if (sample[$field.$type]) {
						continue;
					}
					sample[$field.$type] = 1;
					break;
				default:
					continue;
			}
			if (!$field.$isExcluded) {
				var $item = {
					$stackEdit: edit,
					$summary: {},
					$openBy: "over",
					$isEditMode: edit,
					$isShortcutDisabled: true,
					$skin: "s-profile-field",
					$bind: $bind,
					$popupRight: true,
					$title: $properties[$bind].$title,
					$setValue: function(value) {
						self._setFieldValue(this, value);
					},
				};
				switch ($field.$type) {
					case "application/x-string":
						delete $field.$links;
						break;
					case "application/x-reference":
						$item.$picker = "field";
						break;
					case "application/x-choice":
						$item.$format = "$combo";
						$item.$skinList = "s-list-primary";
						$item.$isReadOnly = true;
						$item.$topSelection = true;
						break;
				}
				var field = self.list.addItem(self.page, $item);
				fields.push(field);
			}
		}
	};
	this.showFields = function(edit) {
		if (this.stack[!edit]) {
			var hideFields = this.stack[!edit];
			for (var ii = 0, jj = hideFields.length; ii < jj; ii++) {
				syra_dom.hide(hideFields[ii].layoutSlot, true);
			}
		}
		var fields = this.stack[edit];
		if (!this.stack[edit]) {
			this._loadFields(edit);
		} else {
			for (var ii = 0, jj = fields.length; ii < jj; ii++) {
				syra_dom.hide(fields[ii].layoutSlot, false);
			}
		}
	};

	this.activateEdit = function(edit) {
		this.showFields(edit);
		syra_button.hide(this.editBtn, edit);
		syra_button.hide(this.saveBtn, !edit);
		syra_button.hide(this.cancelBtn, !edit);
		if (!edit) {
			if (this.page && this.page.sendBag) {
				this.page.sendBag.dispose();
				delete this.page.sendBag;
			}
		}
	};
	this.showList = function(parentNode) {
		if (this.page) {
			if (!this.list) {
				var self = this;
				self.slot = syra_dom.div("s-profile-application", parentNode);
				var actions = syra_dom.div("s-list-primary-line-actions", self.slot);
				self.editBtn = syra_button.add({
					parent: self.page,
					slot: actions,
					test: "save",
					iconOnly: true,
					fontIcon: "edit",
					css: "s-list-primary-line-action",
					click: function() {
						self.page.originalDataset = self.page.dataset ? syra_site.clone(self.page.dataset) : null;
						self.activateEdit(true);
					}
				});
				self.saveBtn = syra_button.add({
					parent: self.page,
					slot: actions,
					test: "save",
					iconOnly: true,
					fontIcon: "save",
					isHidden: true,
					css: "s-list-primary-line-action",
					click: function() {
						if (syra_form.validate(self.page)) {
							var sendBag = syra_form.getSendBag(syra_site.userProfile);
							delete self.page.sendBag.$etag;
							sendBag.applicationConnection = {
								proto: JSON.stringify(self.$prototype.$properties),
								data: JSON.stringify(self.page.sendBag)
							};
							sendBag.$actions = {
								$save: {
									$isRequested: true
								}
							};
							syra_form.updateWorkingCopy(syra_site.userProfile, sendBag);
							self.activateEdit(false);
						}
						syra_site.userProfile._popup.resize();

					}
				});
				self.cancelBtn = syra_button.add({
					parent: self.page,
					slot: actions,
					test: "save",
					iconOnly: true,
					fontIcon: "cancel",
					isHidden: true,
					css: "s-list-primary-line-action",
					click: function() {
						if (self.page.originalDataset) {
							self.page.applyChange(self.page.originalDataset);
							delete self.page.originalDataset;
						}
						self.activateEdit(false);
					}
				});
				self.list = new List({
					css: "s-list-primary",
					parentNode: self.slot,
					scroll: true,
				});
				self.activateEdit(false);
			} else {
				if (parentNode && !this.slot.parentNode) {
					parentNode.appendChild(this.slot);
				}
			}
		}
	};
	this.load = function($applicationConnection, data) {
		var self = this;
		if (typeof $applicationConnection == "string") {
			syra_router.loadRepresentation({
				article: syra_site,
				segments: $applicationConnection,
				success: function success($itemPage) {
					self._loadPage($itemPage, data);
				},
				error: function(response, ajax, $diagnoses) {
					syra_alert.show($diagnoses, null, {
						silent: true
					});
				}
			});
		}
	};
	this._loadPage = function($itemPage, data) {
		var self = this;
		$itemPage.$page = new DesktopPage();
		$itemPage.$page.$autoFetch = false;
		// $itemPage.$page.isServerNotifyDisabled = true;
		var $prototype = $itemPage.$representation.$prototype;
		$prototype.$article = {
			$layout: {
				$items: []
			}
		};
		delete $prototype.$representationUrl;
		self.$prototype = syra_site.clone($prototype);
		syra_pageBuilder.load({
			$itemPage: $itemPage,
			success: function(page) {
				self.page = page;
				if (data) {
					self.showList(); // load list to show info in status bar
					self.page.applyChange(data);
				}
			}
		});
	}
}



exports.ApplicationConnection = ApplicationConnection;