"use strict";
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var List = require('syracuse-ui/lib/scroll/list').List;

function ApplicationConnection() {
	this.$applicationConnection = {};
	this.stack = {};
	this.applyChange = function(newData) {
		if (newData) {
			var $link = newData.$links && newData.$links.$applicationConnection;
			if ($link && this.$applicationConnection.$url != $link.$url) {
				this.load($link);
			}
		}
	};
	this.resize = function() {
		if (this.list) {
			this.list.resize(150);
			return this.list.scrollSlot.clientHeight;
		}
		return 0;
	};

	this.showFields = function(edit) {
		if (this.stack[!edit]) {
			var hideList = this.stack[!edit];
			for (var ii = 0, jj = hideList.length; ii < jj; ii++) {
				syra_dom.hide(hideList[ii].layoutSlot, true);
			}
		}
		var showList = this.stack[edit];
		if (!showList) {
			this.stack[edit] = showList = [];
			var $properties = this.page.$prototype.$properties;
			var $binds = Object.keys($properties);
			for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
				var $bind = $binds[ii];
				showList.push(this.list.addItem(this.page, {
					// $contentEditable: true,
					$isEditMode: edit,
					$isReferenceTitleVisible: false,
					$bind: $bind,
					$isTopLabelAlignment: false,
					$popupRight: true,
					$title: $properties[$bind].$title
				}));
				/* this.list.addItem(this.page, {
				 $useSummary: true,
				 $contentEditable: true,
				 $isReadOnly: true,
				 $isEditMode: true,
				 $inplace: false,
				 $isReferenceTitleVisible: false,
				 $skin: "s-user-profile-lang",
				 $bind: $bind,
				 $popupRight: true,
				 $title: $properties[$bind].$title
				 });*/
			}
		} else {
			for (var ii = 0, jj = showList.length; ii < jj; ii++) {
				syra_dom.hide(showList[ii].layoutSlot, false);
			}
		}
	};

	this.activateEdit = function(edit) {
		this.showFields(edit);
		syra_button.hide(this.editBtn, edit);
		syra_button.hide(this.saveBtn, !edit);
		syra_button.hide(this.cancelBtn, !edit);
	};
	this.showList = function(parentNode) {
		if (this.page) {
			if (!this.list) {
				var self = this;
				self.slot = syra_dom.div("s-profile-application", parentNode);
				var actions = syra_dom.div("s-list-primary-line-actions", self.slot);
				self.editBtn = syra_button.add({
					parent: self.page,
					slot: actions,
					test: "save",
					iconOnly: true,
					fontIcon: "edit",
					css: "s-list-primary-line-action",
					click: function() {
						self.activateEdit(true);
					}
				});
				self.saveBtn = syra_button.add({
					parent: self.page,
					slot: actions,
					test: "save",
					iconOnly: true,
					fontIcon: "save",
					isHidden: true,
					css: "s-list-primary-line-action",
					click: function() {
						var sendBag = syra_form.getSendBag(syra_site.userProfile);
						delete self.page.sendBag.$etag;
						sendBag.applicationConnection = {
							proto: JSON.stringify(self.$prototype.$properties),
							data: JSON.stringify(self.page.sendBag)
						};
						sendBag.$actions = {
							$save: {
								$isRequested: true
							}
						};
						syra_form.updateWorkingCopy(syra_site.userProfile, sendBag);
						self.activateEdit(false);
					}
				});
				self.cancelBtn = syra_button.add({
					parent: self.page,
					slot: actions,
					test: "save",
					iconOnly: true,
					fontIcon: "cancel",
					isHidden: true,
					css: "s-nav-record-btn",
					click: function() {
						self.activateEdit(false);
					}
				});
				self.list = new List({
					css: "s-list-primary",
					parentNode: self.slot,
					scroll: true,
				});
				self.activateEdit(false);
			}
		}
	};
	this.load = function($link) {
		var self = this;
		self.$applicationConnection = $link;
		$link.$url = $link.$url.replace(/ACHGENVX3/g, "GACCOUNT");
		syra_router.loadRepresentation({
			article: syra_site,
			segments: $link.$url,
			success: function success($itemPage) {
				$itemPage.$page = new DesktopPage();
				$itemPage.$page.$autoFetch = false;
				$itemPage.$page.isServerNotifyDisabled = true;
				$itemPage.$representation.$prototype.$article = {
					$layout: {
						$items: []
					}
				};
				self.$prototype = syra_site.clone($itemPage.$representation.$prototype);
				syra_pageBuilder.load({
					$itemPage: $itemPage,
					success: function(page) {
						self.page = page;
					}
				});
			},
			error: function(response, ajax, $diagnoses) {
				syra_alert.show($diagnoses, null, {
					silent: true
				});
			}
		});
	}
}



exports.ApplicationConnection = ApplicationConnection;