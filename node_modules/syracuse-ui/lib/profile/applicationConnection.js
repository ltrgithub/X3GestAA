"use strict";
var DesktopPage = require('syracuse-ui/lib/page/desktopPage').DesktopPage;
var List = require('syracuse-ui/lib/scroll/list').List;


function WorkingCopy(page, $url) {
	this.page = page;
	this.$prototype = syra_site.clone(page.$prototype);
	this.$url = $url;

	this.createWC = function(onCreated) {
		var self = this;
		syra_router.postQuery({
			menu: {
				$url: self.$url
			},
			success: function($url, data, requestUrl) {
				self.dataset = data;
				if (data.$url) {
					self.$url = syra_expression.parse(self, data.$url);
				}
				onCreated();
			}
		});
	};
	this.removeWC = function() {
		this.dispose();
		syra_ajax["delete"]({
			url: this.$url,
			success: function() {

			},
			error: function() {

			}
		});
	}
	this.validate = function(onValidated) {
		var self = this;
		self.createWC(function() {
			var sendBag = syra_site.clone(self.page.dataset);
			sendBag.$uuid = self.dataset.$uuid;
			sendBag.$url = self.$url;
			sendBag.$actions = {
				$save: {
					$isRequested: true
				}
			};
			sendBag.$etag = 1;
			syra_ajax.put({
				page: self.page,
				url: self.$url,
				data: sendBag,
				success: function(data, response, requestUrl) {
					if (!self.page.disposed) {
						if (sendBag) {
							delete sendBag.$actions;
						}
						self.page.onAfterActionMenuExecute = function(menuItem, $menu, isSuccess) {
							if (isSuccess && menuItem.$bind == "$save") {
								onValidated();
							}
						};
						self.page.applyChange(self.page.dataset = data);
						self.removeWC();
					}
				}
			});
		});
	}
	this.dispose = function() {
		if (this.page) {
			delete this.page.onAfterActionMenuExecute;
			this.page = null;
		}
	};
}




function ApplicationConnection() {
	this.$applicationConnectionUrl = null;
	this.stack = {};
	this.dispose = function() {
		if (this.list) {
			this.list.empty();
			this.list.dispose();
		}
		if (syra_site.userProfile) {
			syra_dom.hide(syra_site.userProfile.applicationConnectionSlot, true);
		}
		syra_dom.remove(this.statusSlot);
		this.page && this.page.dispose();
		syra_site.disposeObject(this);
	};
	this.applyChange = function(newData) {
		if (newData) {
			var $link = newData.$links && newData.$links.$applicationConnection;
			var data = newData.applicationConnectionData || (newData.applicationConnection && newData.applicationConnection.data);
			if (data) {
				data = JSON.parse(data);
				if (this.page) {
					this.$applicationConnectionUrl = $link.$url;
					if (data) {
						syra_article.resetFields(this.page);
						this.page.applyChange(data);
					}
					return;
				}
			}

			if ($link && this.$applicationConnectionUrl != $link.$url) {
				//$link.$url = $link.$url.replace(/ACHGENVX3/g, "GACCOUNT");
				this.load(this.$applicationConnectionUrl = $link.$url, data);
			}
		}
	};
	this.resize = function() {
		if (this.list) {
			this.list.resize(150);
			return this.list.scrollSlot.clientHeight;
		}
		return 0;
	};
	this._setFieldValue = function(field, value) {
		syra_dom.remove(field._core);
		if (!field.templateValue) {
			field.templateValue = syra_dom.span("s-profile-field-value", field.domItem);
		}
		var value;
		switch (field.$field.$type) {
			case "application/x-reference":
				value = field.displayText;
				break;
			case "application/x-choice":
				value = field.$selectedEnum && field.$selectedEnum.$title;
				break;
			case "application/x-string":
			case "application/x-date":
				if (field.input) {
					if (field.input.parentNode != field.domItem) {
						field.domItem.appendChild(field.input);
						field.input.style.width = ((field.$field.$displayLength || field.$field.$maxLength) * 6) + "px";
					}
				} else {
					value = field.getDisplayText();
				}
				break;
		}
		if (!field.$item.$stackEdit) {
			if (!this.statusSlot) {
				this.statusSlot = syra_dom.div("s-profile-status-bar", syra_site.footer);
			}
			if (!field.profileStatusSlot) {
				var slot = field.profileStatusSlot = syra_dom.div("s-profile-status-field", this.statusSlot);
				field.profileStatusTitle = syra_dom.span("s-profile-status-field-title", slot);
				field.profileStatusValue = syra_dom.span("s-profile-status-field-value", slot);
			}
		}
		if (value != null && value != "") {
			syra_dom.hide(field.profileStatusSlot, false);
			syra_dom.hide(field.templateValue, false);
			field.templateValue.textContent = "(" + value + ")";
			if (field.profileStatusTitle) {
				field.profileStatusTitle.textContent = field.getTitle();
				field.profileStatusValue.textContent = "(" + value + ")";
			}
		} else {
			syra_dom.hide(field.templateValue, true);
			syra_dom.hide(field.profileStatusSlot, true);
		}
		var picker = field.picker_$lookup || field.picker_choice || field.picker_date || field.picker_time;
		picker && field.domItem.appendChild(picker.link);
		if (field.diagsSlot) {
			field.domItem.appendChild(field.diagsSlot);
		}

	};
	this._loadFields = function(edit) {
		var self = this;
		var fields = self.stack[edit] = [];
		var $properties = self.page.$prototype.$properties;
		var $binds = Object.keys($properties);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var $field = $properties[$bind];
			if (!$field.$isExcluded) {
				var $item = {
					$stackEdit: edit,
					$summary: {},
					$openBy: "over",
					$isEditMode: edit,
					$isShortcutDisabled: true,
					$skin: "s-profile-field",
					$bind: $bind,
					$popupRight: true,
					$title: $properties[$bind].$title,
					$setValue: function(value) {
						self._setFieldValue(this, value);
					},
				};
				switch ($field.$type) {
					case "application/x-string":
						delete $field.$links;
						break;
					case "application/x-reference":
						$item.$picker = "field";
						break;
					case "application/x-choice":
						$item.$format = "$combo";
						$item.$skinList = "s-list-primary";
						$item.$isReadOnly = true;
						$item.$topSelection = true;
						break;
				}
				var field = self.list.addItem(self.page, $item);
				fields.push(field);
			}
		}
	};
	this._showFields = function(edit) {
		if (this.stack[!edit]) {
			var hideFields = this.stack[!edit];
			for (var ii = 0, jj = hideFields.length; ii < jj; ii++) {
				syra_dom.hide(hideFields[ii].layoutSlot, true);
			}
		}
		var fields = this.stack[edit];
		if (!this.stack[edit]) {
			this._loadFields(edit);
		} else {
			for (var ii = 0, jj = fields.length; ii < jj; ii++) {
				var field = fields[ii];
				syra_alert.clear(field);
				syra_dom.hide(field.layoutSlot, false);
			}
		}
	};

	this._activateEdit = function(edit) {
		var popup = syra_site.userProfile._popup;
		if (popup) {
			popup.isCloseDisabled = edit;
		}
		this._showFields(edit);
		syra_button.hide(this.editBtn, edit);
		syra_button.hide(this.saveBtn, !edit);
		syra_button.hide(this.cancelBtn, !edit);
		if (!edit) {
			if (this.page && this.page.sendBag) {
				this.page.sendBag.dispose();
				delete this.page.sendBag;
			}
		}
	};
	this._showList = function(parentNode) {
		if (this.page && !this.list) {
			var self = this;
			var slot = syra_site.userProfile.applicationConnectionSlot;
			syra_dom.hide(syra_dom.empty(slot), false);
			var actions = syra_dom.div("s-list-primary-line-actions", slot);
			self.editBtn = syra_button.add({
				parent: self.page,
				slot: actions,
				test: "save",
				iconOnly: true,
				fontIcon: "edit",
				css: "s-list-primary-line-action",
				click: function() {
					self.page.originalDataset = self.page.dataset ? syra_site.clone(self.page.dataset) : null;
					self._activateEdit(true);
				}
			});
			self.saveBtn = syra_button.add({
				parent: self.page,
				slot: actions,
				test: "save",
				iconOnly: true,
				fontIcon: "save",
				isHidden: true,
				css: "s-list-primary-line-action",
				click: function() {
					if (syra_form.validate(self.page)) {
						var url = self.$applicationConnectionUrl;
						var ii = url.indexOf("?");
						self.$applicationConnectionWCUrl = syra_expression.parse(self.page, url.substr(0, ii) + "/$workingCopies" + url.substr(ii));
						syra_alert.clear(self.page);
						var wc = new WorkingCopy(self.page, self.$applicationConnectionWCUrl);

						var sendBag = syra_form.getSendBag(syra_site.userProfile);
						//delete self.page.sendBag.$etag;                        
						wc.validate(function() {
							sendBag.applicationConnection = {
								data: self.buildSaveData()
							};
							sendBag.$actions = {
								$save: {
									$isRequested: true
								}
							};
							syra_form.updateWorkingCopy(syra_site.userProfile, sendBag);
							self._activateEdit(false);
						});
					}
					syra_site.userProfile._popup.resize();

				}
			});
			self.cancelBtn = syra_button.add({
				parent: self.page,
				slot: actions,
				test: "save",
				iconOnly: true,
				fontIcon: "cancel",
				isHidden: true,
				css: "s-list-primary-line-action",
				click: function() {
					if (self.page.originalDataset) {
						self.page.applyChange(self.page.originalDataset);
						delete self.page.originalDataset;
					}
					self._activateEdit(false);
				}
			});
			self.list = new List({
				css: "s-list-primary",
				parentNode: slot,
				scroll: true,
			});
			self._activateEdit(false);

		}
	};
	this.buildSaveData = function() {
		var $meta;
		var $fields = this.page.$prototype.$properties;
		var $binds = Object.keys($fields);
		for (var ii = 0, jj = $binds.length; ii < jj; ii++) {
			var $bind = $binds[ii];
			var $field = $fields[$bind];
			if ($field.$isPersistent !== undefined) {
				($meta = $meta || {})[$bind] = {
					$isPersistent: $field.$isPersistent
				}
			}
			if ($field.$resetConnection !== undefined) {
				($meta = $meta || {})[$bind] = {
					$resetConnection: $field.$resetConnection
				}
			}
		}
		syra_alert.clear(this.page);
		var data = syra_site.clone(this.page.dataset); // syra_form.getSendBag(self.page);
		delete data.$properties;
		delete data.$etag;
		delete data.$actions;
		delete data.$baseUrl;
		delete data.$prototype;
		delete data.$representation;
		delete data.$trackingId;
		delete data.$type;
		delete data.$url;
		delete data.$uuid;
		if ($meta) {
			data.$properties = $meta;
		}
		delete data.$etag
		return JSON.stringify(data);
	}
	this.load = function($applicationConnection, data) {
		var self = this;
		if (typeof $applicationConnection == "string") {
			syra_router.loadRepresentation({
				article: syra_site,
				segments: $applicationConnection,
				success: function success($itemPage) {
					self._loadPage($itemPage, data);
				},
				error: function(response, ajax, $diagnoses) {
					syra_alert.show($diagnoses, null, {
						silent: true
					});
				}
			});
		}
	};
	this._loadPage = function($itemPage, data) {
		var self = this;
		$itemPage.$page = new DesktopPage();
		$itemPage.$page.$autoFetch = false;
		// $itemPage.$page.isServerNotifyDisabled = true;
		var $prototype = $itemPage.$representation.$prototype;
		$prototype.$article = {
			$layout: {
				$items: []
			}
		};
		delete $prototype.$representationUrl;
		self.$prototype = syra_site.clone($prototype);
		syra_pageBuilder.load({
			$itemPage: $itemPage,
			success: function(page) {
				self.page = page;
				self._showList(); // load list to show info in status bar
				self.page.applyChange(data);
			}
		});
	}
}

exports.ApplicationConnection = ApplicationConnection;