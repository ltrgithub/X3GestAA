"use strict";

var _THUMB_MARGIN = 2;

function Scrollbar(config) {
	this.y_axis = config.axis != "x";
	this.container = config.container;
	this.scrollview = config.scrollview;
	this.onScroll = (typeof(config.scroll) == "function") ? config.scroll : null;
	this.scrollview.className = "s-scrollbar-view " + this.scrollview.className;
	this.container.className = "s-scrollbar-slot " + this.container.className;
	this.track = syra_dom.div("s-scrollbar-track", this.container);
	this.thumb = syra_dom.div("s-scrollbar-thumb", this.track);
	this.resize();
}

exports.Scrollbar = Scrollbar;

Scrollbar.prototype._mousedown = function(bind) {
	var self = this;
	if (self.track) {
		if (bind) {
			if (!self.on_mousedown) {
				self.track.addEventListener("mousedown", self.on_mousedown = function(event) {
					self._startDrag(event);
				}, false);
			}
		} else {
			self.on_mousedown && self.track.removeEventListener("mousedown", self.on_mousedown);
			delete self.on_mousedown;
		}
	}
};

Scrollbar.prototype._startDrag = function(event) {
	var self = this;
	event.preventDefault();
	if (event.target == self.thumb) {
		if (self.y_axis) {
			self.startPos = event.pageY;
			self.startScroll = self.scrollview.scrollTop;
		} else {
			self.startPos = event.pageX;
			self.startScroll = self.scrollview.scrollLeft;
		}
		event.stopPropagation();
		syra_site.layoutSlot.addEventListener("mousemove", self.on_mousemove = function(event) {
			event.preventDefault();
			if (self.y_axis) {
				self.scrollview.scrollTop = self.startScroll + ((event.pageY - self.startPos) / self.ratio);
			} else {
				self.scrollview.scrollLeft = self.startScroll + ((event.pageX - self.startPos) / self.ratio);
			}
		}, false);
		syra_site.layoutSlot.addEventListener("mouseup", self.on_mouseup = function(event) {
			self._endDrag();
			syra_site.ignoreClick = event.target;
		}, false);
	} else {
		var rect = self.track.getBoundingClientRect();
		if (self.y_axis) {
			self.scrollview.scrollTop = (event.pageY - rect.top) / self.ratio;
		} else {
			self.scrollview.scrollLeft = (event.pageX - rect.left) / self.ratio;
		}
	}

};
Scrollbar.prototype._wheel = function(on) {
	var self = this;
	if (self.scrollview) {
		if (on) {
			if (!self.on_wheel) {
				self.on_wheel = self.scrollview.addEventListener("wheel", self.on_wheel = function(event) {
					if (self.y_axis) {
						self.scrollview.scrollTop += event.deltaY;
					} else {
						self.scrollview.scrollLeft += event.deltaX;
					}
				});
			}
		} else {
			self.on_wheel && self.scrollview.removeEventListener("scroll", self.on_wheel);
			delete self.on_wheel;
		}
	}
};
Scrollbar.prototype._moveThumb = function() {
	if (this.ratio) {
		if (this.y_axis) {
			this.thumb.style.top = (Math.round(this.ratio * this.scrollview.scrollTop) + _THUMB_MARGIN) + "px";
		} else {
			this.thumb.style.left = (Math.round(this.ratio * this.scrollview.scrollLeft) + _THUMB_MARGIN) + "px";
		}
	}
};
Scrollbar.prototype.setScrollView = function(scrollview) {
	if (this.scrollview) {
		this.scroll(false);
		syra_dom.toggleClass(this.scrollview, "s-scrollbar-view", false);
	}
	syra_dom.toggleClass(this.scrollview = scrollview, "s-scrollbar-view", true);

};
Scrollbar.prototype.scroll = function(on) {
	var self = this;
	if (self.scrollview) {
		if (on) {
			if (!self._scroll) {
				self._scroll = self.scrollview.addEventListener("scroll", self._scroll = function(event) {
					self._moveThumb();
					self.onScroll && self.onScroll(event);
				});
			}
		} else {
			self._scroll && self.scrollview.removeEventListener("scroll", self._scroll);
			delete self._scroll;
		}
	}
};

Scrollbar.prototype._endDrag = function() {
	this.on_mousemove && syra_site.layoutSlot.removeEventListener("mousemove", this.on_mousemove);
	this.on_mouseup && syra_site.layoutSlot.removeEventListener("mouseup", this.on_mouseup);
	this.on_mousemove = this.on_mouseup = null;
};

Scrollbar.prototype.resize = function() {
	var isHidden = true;
	if (this.y_axis) {
		if (this.scrollview.clientHeight != this.scrollview.scrollHeight) {
			this.track.style.height = this.scrollview.clientHeight + "px";
			this.ratio = this.scrollview.clientHeight / this.scrollview.scrollHeight;
			this._moveThumb();
			this.thumb.style.height = (Math.floor(this.ratio * (this.scrollview.clientHeight - _THUMB_MARGIN)) - _THUMB_MARGIN) + "px";
			isHidden = false;
		}
	} else {
		if (this.scrollview.clientWidth != this.scrollview.scrollWidth) {
			this.ratio = this.scrollview.clientWidth / this.scrollview.scrollWidth;
			this._moveThumb();
			this.thumb.style.width = (Math.floor(ratio * (this.scrollview.clientWidth - _THUMB_MARGIN)) - _THUMB_MARGIN) + "px";
			isHidden = false;
		}
	}
	//if (this.isTrackHidden !== isHidden) {
	syra_dom.hide(this.track, isHidden);
	var rect;
	if (!isHidden) {
		rect = this.track.getBoundingClientRect();
	}
	if (this.y_axis) {
		this.container.style[syra_context.isRTL ? "paddingLet" : "paddingRight"] = (isHidden ? 0 : rect.width) + "px";
	} else {
		this.container.stlyle.paddingBottom = isHidden ? 0 : (rect.height + "px");
	}
	this._mousedown(!isHidden);
	this._wheel(!isHidden);
	this.scroll(!isHidden);
	this.isTrackHidden = isHidden;
	//  }
};

Scrollbar.prototype.dispose = function() {
	this._endDrag();
	this._mousedown(false);
	this._wheel(false);
	this.scroll(false);
	syra_site.disposeObject(this);
};

Scrollbar.prototype.isThumbAtBottom = function() {
	return (this.thumb.offsetTop + this.thumb.clientHeight + _THUMB_MARGIN) > this.track.clientHeight;
};