"use strict";
var _moving;

function Moving(node, options) {
	syra_site.isInoutDisabled = true;
	this.options = options;
	if (!options.start || (options.start(node) !== false)) {
		this.node = node;
		this.boundary = options.root.getBoundingClientRect();
		var scrollview = options.scrollview || options.root;
		this.scrollViewRect = syra_dom.getBoundingClientRect(scrollview);
		this.info = syra_dom.text("s-sortable-info-ok", options.setDraggingText && options.setDraggingText(node) || syra_local.flMoveItem, syra_site.layoutSlot);
		this.cue = syra_dom.div("s-sortable-cue", syra_site.layoutSlot);
		syra_dom.setZIndex(this.info);
		syra_dom.setZIndex(this.cue);
		this.scrollViewRect.item = scrollview;
		this.scrollViewRect.scrollWidth = scrollview.scrollWidth;
		this.scrollViewRect.scrollHeight = scrollview.scrollHeight;

		this.bindMouseEvent(true);
	} else {
		this.dispose();
	}
}

Moving.prototype.moveNode = function(event, targetNode, isOut) {
	var move = targetNode && this.node != targetNode && !this.node.contains(targetNode);
	syra_pageBuilder.autoScroll(this.scrollViewRect, event);
	var top = Math.max(event.pageY, this.boundary.top);
	var left = Math.max(event.pageX, this.boundary.left);
	top = Math.min(top, this.boundary.bottom);
	left = Math.min(left, this.boundary.right);

	this.targetNode = (!isOut && move) ? targetNode : null;
	this.info.className = this.targetNode == null ? "s-sortable-info" : "s-sortable-info-ok";
	this.moveCue(event);

	this.info.style.top = top + 15 + "px";
	this.info.style.left = left + 15 + "px";
};
Moving.prototype.moveCue = function(event) {
	if (event && this.targetNode) {
		this.$drag = syra_dom.getBoundingClientRect(this.targetNode);

		//calculateDropBoundary
		var xmargin = (this.$drag.width * 0.25);
		var ymargin = (this.$drag.height * 0.25);

		var isAfter = false;
		var style = this.cue.style;
		if (this.options.axis != "x") {
			var bottom = this.$drag.top + this.$drag.height - ymargin;
			style.top = ((isAfter = event.pageY > bottom) ? (bottom + ymargin) : this.$drag.top) + "px";
			style.left = this.$drag.left + "px";
			style.height = "2px";
			style.width = this.$drag.width + "px";
		} else {
			var right = this.$drag.left + this.$drag.width - xmargin;
			isAfter = event.pageX > right;
			style.top = (this.$drag.top - 3) + "px";
			style.left = (this.$drag.left + (isAfter ? (this.$drag.width + 3) : (-3))) + "px";
			style.width = "2px";
			style.height = this.$drag.height + 6 + "px";
		}
		this.$drag.insertAfter = isAfter;
		syra_dom.hide(this.cue, false);
	} else {
		syra_dom.hide(this.cue, true);
	}
};

Moving.prototype.bindMouseEvent = function(bind) {
	var self = this;
	if (bind) {
		syra_site.layoutSlot.addEventListener("mousemove", self.on_mousemove = function(event) {
			event.preventDefault();
			if (event.target && self.options.root.contains(event.target)) {
				var targetNode = self.options.getNode(event.target);
				if (targetNode) {
					self.moveNode(event, targetNode);
					event.stopPropagation();
					return;
				}
			}
			if (event.target != self.cue) {
				self.moveNode(event, null, true);
			}
		}, false);
		syra_site.layoutSlot.addEventListener("mouseup", self.on_mouseup = function(event) {
			self.end();
		}, false);
	} else {
		self.on_mousemove && syra_site.layoutSlot.removeEventListener("mousemove", self.on_mousemove);
		self.on_mouseup && syra_site.layoutSlot.removeEventListener("mouseup", self.on_mouseup);
		self.on_mousemove = self.on_mouseup = null;
	}
};

Moving.prototype.end = function() {
	this.bindMouseEvent(false);
	if (this.targetNode) {
		this.targetNode.parentNode.insertBefore(this.node, this.$drag.insertAfter ? this.targetNode.nextSibling : this.targetNode);
		this.targetNode = null;
		this.options.end && this.options.end(this.node);
	}
	this.dispose();
	syra_site.isInoutDisabled = false;
};

Moving.prototype.dispose = function() {
	_moving = null;
	this.bindMouseEvent(false);
	syra_dom.remove(this.info);
	syra_dom.remove(this.cue);
	syra_site.disposeObject(this);
};



function Sortable(options) {
	var self = this;
	self.options = options;
	if (!options.getNode) {
		options.getNode = function(target) {
			return syra_dom.getParentByTag(target, "LI", this.root);
		};
	}
	self.options.root.addEventListener("mousedown", self.on_mousedown = function(event) {
		event.preventDefault();
		if (event.target.syraSortableHandle == self.options.handle) {
			var node = self.options.getNode(event.target);
			if (node) {
				_moving = new Moving(node, self.options);
				event.stopPropagation();
			}
		}
	}, false);

}

Sortable.prototype.setNodeHandle = function(node) {
	node.syraSortableHandle = this.options.handle;
	return node;
};


Sortable.prototype.dispose = function() {
	if (this.options) {
		this.on_mousedown && this.options.root && this.options.root.removeEventListener("mousedown", this.on_mousedown);
		delete this.on_mousedown;
	}
	_moving && _moving.dispose();
	syra_site.disposeObject(this);
};

exports.Sortable = Sortable;