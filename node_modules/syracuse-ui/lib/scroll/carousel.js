"use strict";

function Carousel(context) {
	this.page = context.page || syra_site;
	this.view = context.view;
	this.content = context.content;
	this.y_axis = context.axis != "x";
	syra_item.initialize(this.page, this);
	var axis = this.y_axis ? "top" : "left";
	this.up = syra_button.add({
		parent: this,
		slot: this.view,
		css: context.css + " s-carousel-" + axis,
		axis: axis,
		click: this.click,
		mouseUpDown: this.updown
	});
	var axis = this.y_axis ? "bottom" : "right";
	this.down = syra_button.add({
		parent: this,
		slot: this.view,
		css: context.css + " s-carousel-" + axis,
		axis: axis,
		click: this.click,
		mouseUpDown: this.updown
	});
	this.wheel(true);
}

exports.Carousel = Carousel;

Carousel.prototype.wheel = function(on) {
	var self = this;
	if (self.content) {
		if (on) {
			if (!self.handler_wheel) {
				self.handler_wheel = self.content.addEventListener("wheel", self.handler_wheel = function(event) {
					if (self.y_axis) {
						self.content.scrollTop += event.deltaY;
					} else {
						self.content.scrollLeft += event.deltaX;
					}
					self.checkButtons();
				});
			}
		} else {
			self.handler_wheel && self.content.removeEventListener("scroll", self.handler_wheel);
			delete self.handler_wheel;
		}
	}
};

Carousel.prototype.checkButtons = function() {
	var diff, value;
	if (this.y_axis) {
		diff = this.content.scrollHeight - this.content.clientHeight;
		value = this.content.scrollTop;
	} else {
		diff = this.content.scrollWidth - this.content.clientWidth;
		value = this.content.scrollLeft;
	}
	syra_button.visibility(this.up, diff > 0);
	syra_button.visibility(this.down, diff > 0);
	syra_button.disable(this.up, value == 0);
	syra_button.disable(this.down, (value - diff) >= 0);
};

Carousel.prototype.updown = function(event) {
	var self = this;
	var carousel = this.parent;
	if (carousel.mouseTimer) {
		clearInterval(carousel.mouseTimer);
		delete carousel.mouseTimer;
	}
	if (event.type == "mousedown") {
		carousel._clickCount = 0;
		carousel.mouseTimer = setInterval(function() {
			if (!carousel.disposed) {
				carousel._clickCount++;
				self.click();
			}
		}, 500);
	} else {
		if (carousel._clickCount) {
			carousel._isClickDisabled = true;
		}
	}
};
Carousel.prototype.click = function() {
	var carousel = this.parent;
	if (!carousel._isClickDisabled) {
		switch (this.axis) {
			case "top":
				carousel.content.scrollTop -= carousel.increment;
				break;
			case "left":
				carousel.content.scrollLeft -= carousel.increment;
				break;
			case "bottom":
				carousel.content.scrollTop += carousel.increment;
				break;
			case "right":
				carousel.content.scrollLeft += carousel.increment;
				break;
		}
		carousel.checkButtons();
	}
	delete carousel._isClickDisabled;
};

Carousel.prototype.validate = function(clientHeight) {
	var rect = this.content.childNodes[0].getBoundingClientRect();
	this.increment = this.y_axis ? rect.height : rect.width;
	this.checkButtons();
};
Carousel.prototype.dispose = function() {
	this.wheel(false);
	syra_site.disposeObject(this);
};

exports.add = function(context) {
	return new Carousel(context);
};