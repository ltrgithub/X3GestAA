"use strict";

var _HANDLES = ["n", "ne", "e", "se", "s", "sw", "w", "nw"];
//handles = "n,ne,e,se,s,sw,w,nw


function Resizer(config) {
	var self = this;
	self.config = config;
	self.handles = [];
	config.handles = config.handles || _HANDLES;
	for (var ii = 0, jj = config.handles.length; ii < jj; ii++) {
		self.handles[ii] = syra_dom.div("s-resize-handle s-resize-" + config.handles[ii], config.slot);
	}
	self.config.slot.addEventListener("mousedown", self.on_mousedown = function(event) {
		if (self.handles.indexOf(event.target) >= 0) {
			event.preventDefault();
			self._start(event);
			event.stopPropagation();
		}
	}, false);
}

Resizer.prototype._start = function(event) {
	var self = this;
	self.resizing = {
		handle: event.target,
		dir: self.config.handles[self.handles.indexOf(event.target)],
		startX: event.pageX,
		startY: event.pageY
	};
	self.config.start && self.config.start(self.resizing);
	syra_site.layoutSlot.addEventListener("mousemove", self.on_mousemove = function(event) {
		//self.config.slot.style.height = self.resizing.height + (event.pageY - self.resizing.startY) + "px";
		event.preventDefault();
		self.resizing.event = event;
		delete self.resizing.deltaY;
		delete self.resizing.deltaX;
		switch (self.resizing.dir) {
			case "n":
			case "ne":
			case "s":
			case "se":
			case "sw":
			case "nw":
				self.resizing.deltaY = event.pageY - self.resizing.startY;
				break;
		}
		switch (self.resizing.dir) {
			case "ne":
			case "e":
			case "se":
			case "sw":
			case "w":
			case "nw":
				self.resizing.deltaX = event.pageX - self.resizing.startX;
				break;
		}
		if (self.config.drag) {
			self.config.drag(self.resizing);
		}
	}, false);

	syra_site.layoutSlot.addEventListener("mouseup", self.on_mouseup = function(event) {
		self._unbindMove();
		self.config.stop(self.resizing);
		syra_site.ignoreClick = event.target;
		syra_site.disposeObject(self.resizing);
	}, false);
};

Resizer.prototype._unbindMove = function() {
	this.on_mousemove && syra_site.layoutSlot.removeEventListener("mousemove", this.on_mousemove);
	this.on_mouseup && syra_site.layoutSlot.removeEventListener("mouseup", this.on_mouseup);
}
Resizer.prototype.dispose = function() {
	this._unbindMove();
	syra_site.disposeObject(this.resizing);
	this.on_mousedown && this.config.slot.removeEventListener("mousedown", this.on_mousedown);
	syra_site.disposeObject(this);
};

exports.Resizer = Resizer;