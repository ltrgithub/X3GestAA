"use strict";
var Scrollbar = require('syracuse-ui/lib/scroll/scrollbar').Scrollbar;
var Carousel = require('syracuse-ui/lib/scroll/carousel').Carousel;
var Sortable = require('syracuse-ui/lib/scroll/sortable').Sortable;
var More = require('./more').More;

function List(config) {
	this.config = config || {};
	this.css = (this.config.css || "s-list-default");
	this.cssLine = this.config.cssLine || (this.css + "-li ");
	this._css_ul = "s-list-ul " + this.css + "-ul";
	this._css_li = "s-list-li " + this.cssLine;
	this._css_btn = this.css + "-btn-default";

	this.ul = config.ul || syra_dom.ul(this._css_ul);
	var scrollview = this.ul;
	if (this.config.columns) {
		this.row = scrollview = syra_dom.div(this.css + "-ul-row s-list-row");
		this.ul.className += " s-list-col";
		this.columns = [this.row.appendChild(this.ul)];
		for (var ii = 1; ii < this.config.columns; ii++) {
			this.columns.push(syra_dom.ul(this._css_ul + " s-list-col", this.row));
		}
		this.columnsIndex = 0;
	}
	if (this.config.scroll || this.config.carousel) {
		this.scrollSlot = syra_dom.div(this.css + "-scroll-slot");
		if (this.config.carousel) {
			this.scrollBar = new Carousel({
				container: this.scrollSlot,
				scrollview: scrollview,
				css: this.css + "-carousel"
			});
		} else {
			this.scrollBar = new Scrollbar({
				container: this.scrollSlot,
				scrollview: scrollview,
				scroll: this.config.scroll
			});
		}
		this.scrollSlot.appendChild(scrollview);
	} else {
		this.scrollSlot = scrollview;
	}
	if (config.sortable) {
		config.sortable.root = this.row || this.ul;
		config.sortable.scrollview = scrollview;
		this.sortable = new Sortable(config.sortable);
	}
	if (this.config.more) {
		this.more = new More(this);
	}
	this._addNoChild();
	this.config.parentNode && config.parentNode.appendChild(this.scrollSlot);

}

List.prototype.empty = function() {
	syra_dom.empty(this.ul);
	this.more && this.more.empty();
	this._addNoChild();
};
List.prototype._addNoChild = function() {
	if (this.config.emptyText) {
		this.noChild = syra_dom.li(this._css_li, this.ul);
		this.noChild.textContent = this.config.emptyText;
	}
};
List.prototype.remove = function(line) {
	syra_dom.remove(line);
	if (!this.ul.childNodes.length) {
		this._addNoChild();
	}
};
List.prototype.addLine = function(css) {
	var slot = this.ul;
	if (this.noChild) {
		syra_dom.remove(this.noChild);
		delete this.noChild;
	}
	if (this.columns) {
		slot = this.columns[this.columnsIndex];
		if (this.config.columns <= (++this.columnsIndex)) {
			this.columnsIndex = 0;
		}
	}
	return syra_dom.li(this._css_li + (css || ""), slot);
};
List.prototype.addAnchor = function(css, cssLine) {
	return syra_dom.anchor(css || this._css_btn, this.addLine(cssLine));
};
List.prototype.addReorder = function(line, handle) {
	var reorder = line.insertBefore(syra_dom.div(this.css + "-reorder"), line.firstChild);
	reorder.syraSortableHandle = handle;
	return reorder;
};
List.prototype.addButton = function(btn, cssLine) {
	btn.parent = btn.parent || syra_site;
	btn.slot = this.addLine(cssLine);
	btn.css = btn.css || this._css_btn;
	return syra_button.add(btn);
};
List.prototype.addItem = function(page, $item, cssLine) {
	return page.addItem(this.addLine(cssLine), $item);
};

List.prototype.scrollTo = function(node) {
	syra_site.scrollToItem(node, this.row || this.ul, true);
};
List.prototype.hide = function(hide) {
	syra_dom.hide(this.scrollSlot, hide);
};
List.prototype._applyAutoColumns = function(height) {
	if (!this.row && this.ul.clientHeight != this.ul.scrollHeight) {
		var parentNode = this.ul.parentNode;
		this.row = syra_dom.div(this.css + "-ul-row s-list-row");
		this.ul.className += " s-list-col";
		this.columns = [this.row.appendChild(this.ul)];
		var width = Math.floor(100 / this.config.autoColumns);
		var move = [
			[]
		];
		this.ul.style.width = width + "%";
		for (var ii = 1; ii < this.config.autoColumns; ii++) {
			var ul = syra_dom.ul(this.css + "-ul s-list-col", this.row);
			ul.style.width = width + "%";
			this.columns.push(ul);
			move.push([]);
		}
		var nodes = this.ul.childNodes;
		var columnsIndex = 0;
		for (var ii = 0, jj = nodes.length; ii < jj; ii++) {
			move[columnsIndex].push(nodes[ii]);
			if (this.config.autoColumns <= (++columnsIndex)) {
				columnsIndex = 0;
			}
		}
		for (var ii = 0, jj = move.length; ii < jj; ii++) {
			while (move[ii].length) {
				this.columns[ii].appendChild(move[ii].shift());
			}
		}
		this.scrollBar.setScrollView(this.row);
		parentNode.appendChild(this.row);
	}
};
List.prototype.resize = function(height) {
	this.ul.style.maxHeight = height + "px";
	this.config.autoColumns && this._applyAutoColumns();
	this.scrollBar && this.scrollBar.resize();
	this.more && this.more.resize();
};

List.prototype.dispose = function() {
	this.more && this.more.dispose();
	this.sortable && this.sortable.dispose();
	this.scrollBar && this.scrollBar.dispose();
	syra_site.disposeObject(this);
};

exports.List = List;