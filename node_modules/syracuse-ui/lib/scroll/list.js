"use strict";
var Scrollbar = require('syracuse-ui/lib/scroll/scrollbar').Scrollbar;

function List(config) {
	this.config = config || {};
	this.css = (this.config.css || "s-popup-default");
	this.ul = syra_dom.ul(this.css + "-ul");
	if (this.config.scroll) {
		this.scrollSlot = syra_dom.div(this.css + "-ul-slot");
		this.scrollBar = new Scrollbar({
			container: this.scrollSlot,
			scrollview: this.ul
		});
		this.scrollSlot.appendChild(this.ul);
	} else {
		this.scrollSlot = this.ul;
	}
	this.config.parentNode && config.parentNode.appendChild(this.scrollSlot);
}

List.prototype.addLine = function() {
	return this._lastLine = syra_dom.li(this.css + "-li", this.ul);
};
List.prototype.addAnchor = function(css) {
	return syra_dom.anchor(css || this.css + "-btn-default", this.addLine());
};

List.prototype.addButton = function(btn) {
	btn.parent = btn.parent || syra_site;
	btn.slot = this.addLine();
	btn.css = btn.css || this.css + "-btn-default";
	return syra_button.add(btn);
};
List.prototype.addItem = function(page, $item) {
	return page.addItem(this.addLine(), $item);
};

List.prototype.scrollTo = function(node) {
	syra_site.scrollToItem(node, this.ul, true);
};
List.prototype.addSeparator = function(line, add) {
	if (line) {
		syra_dom.toggleClass(line, this.css + "-sep", add);
	} else {
		if (this._lastLine) {
			this._lastLine.className += " " + this.css + "-sep";
		}
	}

};
List.prototype.hide = function(hide) {
	syra_dom.hide(this.scrollSlot, hide);
};
List.prototype.resize = function(height) {
	this.ul.style.maxHeight = height + "px";
	this.scrollBar && this.scrollBar.resize();
};

List.prototype.dispose = function() {
	this.scrollBar && this.scrollBar.dispose();
	syra_site.disposeObject(this);
};

exports.List = List;