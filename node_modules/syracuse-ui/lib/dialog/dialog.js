"use strict";
var helpers = require('syracuse-core/lib/helpers');
var WidgetResizer = require("syracuse-ui/lib/site/resize/widgetResizer").WidgetResizer;

function _getSiteBodyRect() {
	var size = syra_site.getBodySize();
	var rect = {
		top: size.top,
		width: size.width,
		height: size.height,
		left: size.width * 0.05
	};
	rect.width = rect.width - (rect.left * 2);
	rect.right = rect.left + rect.width;
	rect.top = Math.max(rect.top, 50);
	rect.height = rect.height - rect.top;
	rect.bottom = rect.top + rect.height;
	return rect;
}

function _resizeOverlay(dlg) {
	var rect = syra_site.getLayoutSize();
	if (dlg._content.isFusionPage) {
		var size = syra_site.getBodySize();
		dlg.overlay.style.top = size.top + "px";
		dlg.overlay.style.height = size.height + "px";
	} else {
		dlg.overlay.style.height = rect.height + "px";
	}
	dlg.overlay.style.width = rect.width + "px";
	if (!dlg.isDeactivated) {
		if (dlg._content.layoutSlot.style.display !== "none") // manage of multiple window under modal
			dlg.overlay.style.display = "";
	}
}


function _resizePositioned(dlg, siteBodyRect) {
	var slot = dlg.dialogSlot;
	var rect = syra_site.dom.getBoundingClientRect(slot);
	if (rect.width > siteBodyRect.width) {
		slot.style.width = (rect.width = siteBodyRect.width) + "px";
	}
	if (rect.height > siteBodyRect.height) {
		slot.style.height = (rect.height = siteBodyRect.height) + "px";
	}
	var $position = {
		my: dlg.options.position.my,
		at: dlg.options.position.at,
		of: dlg.options.position.of,
	};
	var page = dlg.openerBox && dlg.openerBox.page;
	if (page && page.scrollview) {
		var isWithIn = true;
		if (dlg.options.position.of) {
			isWithIn = page.scrollview.contains(dlg.options.position.of[0]);
		}
		if (isWithIn) {
			$position.collision = "flipfit";
			$position.within = $(page.scrollview);
		}
	}
	$(slot).position($position);
	if (dlg.options.onresize) {
		dlg.options.onresize(dlg);
	}
}

function Dialog() {}

exports.Dialog = helpers.defineClass(Dialog, null, {
	centerDialog: function() {
		var size = syra_site.getLayoutSize();
		var bodyH = Math.max(size.height - 100, 100);
		var bodyW = Math.max(size.width - 100, 100);
		var slot = this.dialogSlot;
		slot.style.height = slot.style.width = "";
		var slotRect = slot.getBoundingClientRect();
		var height = Math.ceil(Math.min(slotRect.height, bodyH));
		var width = Math.ceil(Math.min(slotRect.width, bodyW));
		slot.style.width = width + "px";
		slot.style.height = height + "px";
		slot.style.top = ((size.height - height) / 2) + "px";
		slot.style.left = ((size.width - width) / 2) + "px";
	},
	open: function(options) {
		if ((this.options = options).content) {
			this._openContent();
		} else {
			this._openDialogPage();
		}
	},
	_openContent: function() {
		this._content = this.options.content;
		this.dialogSlot = this.options.slot || this.options.content.domItem;
		if (this.dialogSlot.style.position != "fixed") {
			this.dialogSlot.style.position = "absolute";
		}
		this.id = this._content.id + "-dlg";
		repository[this.id] = this;
		this.dialogSlot.style.display = '';
		this.options.$isAutoClose = this.options.$isAutoClose !== false;
		this._endOpen();
	},
	_endOpen: function() {
		var self = this;
		if (self.isModal) {
			self.overlay = document.createElement("div");
			self.overlay.className = "s-overlay";
			syra_site.dom.setZIndex(self.overlay);
			syra_site.layoutSlot.appendChild(self.overlay);
		}
		syra_site.dom.setZIndex(self.dialogSlot);
		syra_site.layoutSlot.appendChild(self.dialogSlot);

		if (self.options.dragSpot) {
			self._widgetResizer = new WidgetResizer();
			self._widgetResizer.setResizable({
				source: self,
				slot: self.dialogSlot,
				dragSpot: self.options.dragSpot,
				isResizingEnabled: self.options.isResizingEnabled,
				onResize: function(resizer, moving) {
					if (moving) {
						self.resizeDialog(true, null, true);
					}
				}
			});
		}
		self.isOpened = true;
		self.resizeDialog();
		if (self.options.onOpened) {
			self.options.onOpened(self._content);
		}
		// anchor to set focus on message box (fix issue #3243)
		if (self.options.$autoFocus) {
			var focusAnchor = document.createElement("a");
			focusAnchor.className = "s-dialog-focus-anchor";
			focusAnchor.setAttribute('href', '#');
			self.dialogSlot.appendChild(focusAnchor);
			$(focusAnchor).focus();
		}
	},
	_openDialogPage: function($itemPage) {
		var self = this;
		if ($itemPage || self.options.page) {
			if (self.options.page) {
				self._content = self.options.page;
				self.dialogSlot = self.options.page.layoutSlot || document.createElement("div");
				self._content.dialogWrapper = self;
			} else {
				self.dialogSlot = $itemPage.layoutSlot = document.createElement("div");
				$itemPage.dialogWrapper = self;
				self._content = syra_site.pageLoader.load($itemPage);
				self._content.domItem.style.display = "none";
			}
			self.id = self._content.id + "-dlg";
			repository[self.id] = self;
			self.dialogSlot.className = self.$skin + "-page-container";
			self._content.header.className = self.$skin + "-page-head";
			self._content.body.className = self.$skin + "-page-body";
			self._content.dataSlot.className = self.$skin + "-page-data";
			self._content.domItem.className = self.$skin + "-page";
			self.dialogSlot.setAttribute("tabindex", "2");
			self.options.$isAutoClose = self.options.$isAutoClose === true;
			self.appendCloseButton(self._content.header);

			if (self._content.$facet == "$lookup" || self._content.scrollview) {
				self._content.body.style.overflow = "hidden";
			} else {
				self._content.body.style.overflow = "auto";
			}
			if (self.options.onValidate) {
				this.btn_ok = document.createElement("a");
				this.btn_ok.syraOnClick = "onOkClick";
				this.btn_ok.syraTool = this.id;
				this.btn_ok.className = this.$skin + "-page-ok";
				this.btn_ok.title = syra_site.localize.dlg_ok;
				self._content.header.appendChild(this.btn_ok);
				if (self.options.$isOkHidden) {
					self.hideOkButton(true);
				}
			}
			if (self.options.onSelectRecord) {
				self._content.onSelectRecord = function(selectedRecords) {
					if (self.options.onSelectRecord(selectedRecords, self._content) !== false) {
						self.close();
					}
				};
			}
			self._content.domItem.style.display = "";

			self.options.dragSpot = self._content.header;
			self._endOpen();
			self.isDialogPage = true;
		} else {
			if (self.options.$itemPage) {
				self._openDialogPage(self.options.$itemPage);
			} else {
				if (self.options.$method && (self.options.$method != "GET"))
					syra_controller.postQuery(self.options, null, self.options.article, function($location, data) {
						self.hasCallback = true; // in order not to dispose the dialog before the callback
						syra_controller.loadRepresentation({
							article: self.options.article,
							segments: $location.$url,
							success: function($itemPage) {
								if (data && syra_controller.isWorkingCopyUrl(self.options.$url)) {
									$itemPage.initData = data;
								}
								self._openDialogPage($itemPage);
								self.hasCallback = null;
							}

						});
					});
				else {
					self.hasCallback = true; // in order not to dispose the dialog before the callback
					syra_controller.loadRepresentation({
						article: self.options.article,
						segments: self.options.$url,
						success: function($itemPage) {
							self._openDialogPage($itemPage);
							self.hasCallback = null;
						}
					});
				}
			}
		}
	},
	close: function(validated, dispose) {
		if (!this.disposed) {
			if (this.options && this.options.onClose ? (this.options.onClose(validated !== true, dispose) !== false) : true) {
				this.dispose();
			}
		}
	},
	hideOkButton: function(hide) {
		if (this.btn_ok) {
			this.btn_ok.style.display = hide ? "none" : "";
		}
	},
	onOkClick: function() {
		if (this.options.onValidate(this._content) !== false) {
			this.close(true);
		}
	},
	onCloseClick: function() {
		this.close();
	},
	appendCloseButton: function(slot) {
		this.btn_close = document.createElement("a");
		this.btn_close.syraOnClick = "onCloseClick";
		this.btn_close.syraTool = this.id;
		this.btn_close.className = this.$skin + "-page-close";
		this.btn_close.title = syra_site.localize.dlg_close;
		slot.appendChild(this.btn_close);
	},
	activate: function(isActivated) {
		this.isDeactivated = !isActivated;
		if (this.overlay) {
			this.overlay.style.display = isActivated ? "" : "none";
		}
		this.dialogSlot.style.display = isActivated ? "" : "none";
	},
	resizeDialog: function(resize, onScroll, isDlgResizing) {
		if (this._content) {
			if (!onScroll && this.overlay) {
				_resizeOverlay(this);
			}
			if (!this.disposed && syra_site.body) {
				if (this.options.resizeDialog) {
					this.options.resizeDialog(this, isDlgResizing);
				} else {
					var siteBodyRect = _getSiteBodyRect();
					this._maxHeight = siteBodyRect.height - siteBodyRect.top;
					if (this._widgetResizer) {
						this._widgetResizer.maxHeight = this._maxHeight;
					}
					if (this.options.position) {
						_resizePositioned(this, siteBodyRect);
					} else {
						if (this._content && this._content.page && this._content.page.scrollview) {
							this.setScrollPageSize(this._content, isDlgResizing);
						}
					}
				}
			}
		}
	},
	setScrollPageSize: function(page, isDlgResizing) {
		if (page.scrollview) {
			if (!isDlgResizing) {
				page.scrollview.style.width = page.scrollview.style.height = "";
				if (page.menuBar) {
					page.menuBar.resetHeight();
				}
				if (page.fusionBar) {
					page.fusionBar.resetHeight();
				}
				if (page.designer) {
					if (page.designer.treesBar) {
						page.designer.treesBar.resetHeight();
					}
					page.designer.propertiesBodySlot.style.height = "";
				}
				this.centerDialog();
			}
			var rect = syra_site.dom.getInnerSize(this.dialogSlot);
			if (page.designer) {
				if (page.designer.treebarSlot) {
					rect.width -= page.designer.treebarSlot.clientWidth;
				}
				if (page.designer.propertiesSlot) {
					rect.width -= page.designer.propertiesSlot.clientWidth;
				}
			}
			if (page.menuBar && page.menuBar.barSlot) {
				rect.width -= page.menuBar.barSlot.clientWidth;
			}
			if (page.fusionBar && page.fusionBar.barSlot) {
				rect.width -= page.fusionBar.barSlot.clientWidth;
			}
			rect.width = Math.ceil(rect.width);
			rect.height = Math.ceil(rect.height - this._content.diagnoseSlot.getBoundingClientRect().height);
			page.scrollview.style.width = rect.width + "px";
			page.scrollview.style.height = rect.height + "px";
			delete page.scrollviewSize;

			page.designer && page.designer.resizePage();
			page.menuBar && page.menuBar.resizeBar();
			page.fusionBar && page.fusionBar.resizeBar();

			var center;
			if ((page.scrollview.scrollHeight - page.scrollview.clientHeight) <= 20) {
				page.scrollview.style.height = page.scrollview.scrollHeight + "px";
				center = true;
			}
			if ((page.scrollview.scrollWidth - page.scrollview.clientWidth) <= 20) {
				page.scrollview.style.width = page.scrollview.scrollWidth + "px";
				center = true;
			}
			if (center) {
				delete page.scrollviewSize;
				this.centerDialog();
			}
			if (isDlgResizing) {
				page.resizeChildLists();
				page.resizeAutoSizeFields();
			}
		}
	},
	dispose: function() {
		delete repository[this.id];
		if (this.overlay) {
			syra_site.dom.removeChild(this.overlay);
		}
		if (this._widgetResizer) {
			this._widgetResizer.dispose();
			this._widgetResizer = null;
		}
		if (this._content) {
			delete this._content.dialogWrapper;
		}
		syra_site.dialogManager.close(this);
		if (this.options) {
			this.options.dragSpot = this.options.page = this.options.autoCloseBoundary = null;
			if (this.options.content) {
				delete this.options.content;
			} else {
				this._content.dispose && this._content.dispose();
				if (this.dialogSlot) {
					syra_site.dom.empty(this.dialogSlot);
				}
			}
			if (this.dialogSlot) {
				syra_site.dom.removeChild(this.dialogSlot);
			}
			this.options.article = this.options.onValidate = this.options.onSelectRecord = this.options.onresize = null;
		}
		this.btn_close = this.btn_ok = this.dialogSlot = this.overlay = this._content = this.options = null;
	}
});