"use strict";
var helpers = require('syracuse-core/lib/helpers');

function _resizeOverlay(dlg) {
	if (dlg._content.isFusionPage) {
		var size = syra_site.body.getBoundingClientRect();
		dlg.overlay.style.top = size.top + "px";
		dlg.overlay.style.height = size.height + "px";
	} else {
		dlg.overlay.style.height = syra_site.layoutSlot.clientHeight + "px";
	}
	dlg.overlay.style.width = syra_site.layoutSlot.clientWidth + "px";
	if (!dlg.isDeactivated) {
		if (dlg._content.layoutSlot.style.display !== "none") // manage of multiple window under modal
			dlg.overlay.style.display = "";
	}
}

function _setAutoFocus(dlg) {
	var link = document.createElement("a");
	link.className = "s-dialog-focus-anchor";
	link.setAttribute('href', '#');
	dlg.dialogSlot.appendChild(link);
	link.focus();
}

function _openContent(dlg) {
	dlg._content = dlg.options.content;
	dlg.dialogSlot = dlg.options.slot || dlg.options.content.domItem;
	if (dlg.dialogSlot.style.position != "fixed") {
		dlg.dialogSlot.style.position = "absolute";
	}
	dlg.id = dlg._content.id + "-dlg";
	syra_store.add(dlg);
	_setZIndex(dlg);
	dlg.dialogSlot.style.top = "0px";
	dlg.dialogSlot.style.display = '';
	dlg.dialogSlot.style.visibility = "hidden";
	dlg.options.$isAutoClose = dlg.options.$isAutoClose !== false;
	syra_site.layoutSlot.appendChild(dlg.dialogSlot);

	dlg.isOpened = true;
	dlg.options.$autoFocus && _setAutoFocus(dlg);
	dlg.options.onOpened && dlg.options.onOpened(dlg._content);
	!dlg._content.isPageLoaded && dlg.resizeDialog(); //content is not page => resize
	dlg.dialogSlot.style.visibility = "";
}

function _setZIndex(dlg) {
	var zIndex;
	if (dlg._content && dlg._content.isMessageBox) {
		zIndex = syra_dom.getTopZIndex() + 5000; //ensure MessageBox at top
	}
	if (dlg.isModal) {
		dlg.overlay = document.createElement("div");
		dlg.overlay.syraIsOverlay = true;
		dlg.overlay.className = "s-overlay";
		syra_dom.setZIndex(dlg.overlay, false, zIndex);
		syra_site.layoutSlot.appendChild(dlg.overlay);
	}
	syra_dom.setZIndex(dlg.dialogSlot, false, zIndex);
}


function _loadPageRepresentation(dlg) {
	if (dlg.options.$method && (dlg.options.$method != "GET"))
		syra_controller.postQuery(dlg.options, null, dlg.options.article, function($location, data) {
			dlg.hasCallback = true; // in order not to dispose the dialog before the callback
			syra_controller.loadRepresentation({
				article: dlg.options.article,
				segments: $location.$url,
				success: function($itemPage) {
					if (data && syra_workingCopy.isUrl(dlg.options.$url)) {
						$itemPage.initData = data;
					}
					_openPage(dlg, $itemPage);
					dlg.hasCallback = null;
				}

			});
		});
	else {
		dlg.hasCallback = true; // in order not to dispose the dialog before the callback
		syra_controller.loadRepresentation({
			article: dlg.options.article,
			segments: dlg.options.$url,
			success: function($itemPage) {
				_openPage(dlg, $itemPage);
				dlg.hasCallback = null;
			}
		});
	}
}

function _onOkClick() {
	var dlg = this.parent;
	if ((dlg.options.onValidate && dlg.options.onValidate(dlg._content, dlg) !== false) || (dlg.options && dlg.options.onServerSaved)) {
		if (dlg.options.onServerSaved) {
			syra_menus.menus.applyChange(dlg._content, {
				$actions: {
					$save: {
						$isDisabled: false
					}
				}
			});
			syra_menus.click.save(dlg._content);
		} else {
			dlg.close(true);
		}
	}
}

function _openPage(dlg, $itemPage) {
	if ($itemPage || dlg.options.page) {
		if (dlg.options.page) {
			dlg._content = dlg.options.page;
			dlg.dialogSlot = dlg.options.page.layoutSlot || document.createElement("div");
			dlg._content.dialogWrapper = dlg;
		} else {
			dlg.dialogSlot = $itemPage.layoutSlot = document.createElement("div");
			$itemPage.dialogWrapper = dlg;
			dlg._content = syra_pageBuilder.load($itemPage);
		}
		var page = dlg._content;
		dlg.id = page.id + "-dlg";
		syra_store.add(dlg);
		var $skin = dlg.$skin + "-page";
		page.scrollview.className = $skin + "-scrollview";
		dlg.dialogSlot.className = $skin + "-container";
		page.header.className = $skin + "-head";
		page.body.className = $skin + "-body";
		page.domItem.className = $skin;
		page.domTitle.className = $skin + "-title";
		dlg.dialogSlot.setAttribute("tabindex", "2");
		dlg.options.$isAutoClose = dlg.options.$isAutoClose === true;
		dlg.addCloseButton();


		if (dlg.options.onValidate || dlg.options.onServerSaved) {
			dlg.okBtn = syra_menus.button.add({
				parent: dlg,
				slot: dlg.dialogSlot,
				text: syra_local.dlg_ok,
				css: dlg.$skin + "-page-ok",
				iconOnly: true,
				fontIcon: "save",
				btnclick: _onOkClick
			});
			dlg.options.$isOkHidden && dlg.hideOkButton(true);
		}
		if (dlg.options.onSelectRecord) {
			page.onSelectRecord = function(selectedRecords) {
				if (dlg.options.onSelectRecord(selectedRecords, page) !== false) {
					dlg.close();
				}
			};
		}
		_setZIndex(dlg);
		dlg.dialogSlot.style.top = "0px";
		dlg.dialogSlot.style.visibility = "hidden";
		syra_site.layoutSlot.appendChild(dlg.dialogSlot);
		if (false) {
			$(dlg.dialogSlot).draggable({
				cancel: "article." + $skin
			}).resizable({
				resize: function(event, ui) {},
				start: function(event, ui) {},
				stop: function(event, ui) {}
			});
		}
		dlg.isOpened = true;
		dlg.options.$autoFocus && _setAutoFocus(dlg);
		dlg.options.onOpened && dlg.options.onOpened(page);
		dlg.resizeDialog();
		//!page.$autoFetch && 
		page.resizeArticle(true);
		syra_pageBuilder.activateQueryList(page);
		dlg.dialogSlot.style.visibility = "";
		dlg.isDialogPage = true;
	} else {
		if (dlg.options.$itemPage) {
			_openPage(dlg, dlg.options.$itemPage);
		} else {
			_loadPageRepresentation(dlg);
		}
	}
}

function _resizePage(dlg, page, isDlgResizing) {
	var siteSize = _getSiteSize();
	var style = dlg.dialogSlot.style;
	style.maxWidth = siteSize.dlgMaxW + "px";
	style.maxHeight = siteSize.dlgMaxH + "px";
	if (page.$facet == "$lookup" || page.$facet == "$select") {
		style.left = "0px";
		style.top = "0px";
		dlg.centerDialog();
		return;
	}
	var scrollTop = page.scrollview.scrollTop;

	var slotRect = dlg.dialogSlot.getBoundingClientRect();
	var scrollRect = page.scrollview.getBoundingClientRect();
	var diffH = (scrollRect.top - slotRect.top) * 2;
	var diffW = (scrollRect.left - slotRect.left) * 2;

	page.scrollview.style.maxHeight = (page.maxBarHeight = (siteSize.dlgMaxH - diffH)) + "px";
	page.scrollview.style.maxWidth = (siteSize.dlgMaxW - diffW) + "px";

	var barH;
	if (page.designer && page.designer.isDesignBarVisible) {
		barH = page.designer.treebarSlot && page.designer.treebarSlot.scrollHeight;
		if (page.designer.propertiesBar) {
			barH = Math.max(page.designer.propertiesBar.getScrollHeight(), barH);
		}
	} else {
		barH = page.menuBar && page.menuBar.body.scrollHeight;
		if (page.fusionBar) {
			barH = Math.max(page.fusionBar.slot.scrollHeight, barH);
		}

	}
	if (barH) {
		barH = Math.max(page.scrollview.scrollHeight, barH);
		var prevBarHeight = page.barHeight;
		page.barHeight = barH = Math.min(Math.max(scrollRect.height, barH), page.maxBarHeight);
		if ((barH != scrollRect.height) || (prevBarHeight != page.barHeight)) {
			if (barH != scrollRect.height) {
				page.scrollview.style.height = (barH - page.diagnoseSlot.scrollHeight) + "px";
			}
			if (page.designer && page.designer.isDesignBarVisible) {
				page.designer.treebarSlot.style.height = page.barHeight + "px";
				page.designer.treesBar && page.designer.treesBar.resizeBar();
				page.designer.propertiesBar.setHeight(page.barHeight);
			} else {
				page.menuBar && page.menuBar.resizeBar(true);
				page.fusionBar && page.fusionBar.resizeBar(true);
			}

		}
	}
	slotRect = dlg.dialogSlot.getBoundingClientRect();
	var diffW = (siteSize.width - slotRect.width);
	style.maxWidth = slotRect.width + "px";
	style.top = ((siteSize.height - slotRect.height) / 2) + "px";
	style.left = (diffW / 2) + "px";

	if (scrollTop) {
		page.scrollview.scrollTop = Math.min(scrollTop, page.scrollview.scrollHeight - page.scrollview.clientHeight);
	}
}

function _getSiteSize() {
	var size = {
		height: syra_site.layoutSlot.clientHeight,
		width: syra_site.layoutSlot.clientWidth,
	};
	size.dlgMaxH = Math.max(size.height - 50, 100);
	size.dlgMaxW = Math.max(size.width - 50, 100);
	return size;
}

exports.Dialog = helpers.defineClass(function() {}, null, {
	centerDialog: function() {
		var size = _getSiteSize();
		var style = this.dialogSlot.style;
		style.maxWidth = size.dlgMaxW + "px";
		style.maxHeight = size.dlgMaxH + "px";
		var slotRect = this.dialogSlot.getBoundingClientRect();
		style.top = ((size.height - slotRect.height) / 2) + "px";
		style.left = ((size.width - slotRect.width) / 2) + "px";
	},

	open: function(options) {
		if ((this.options = options).content) {
			_openContent(this);
		} else {
			_openPage(this);
			options.page && options.page.resizeArticle(true); //Resize as page already resize on preload
		}
	},
	close: function(validated, dispose) {
		if (!this.disposed && this.options && this.options.onClose ? (this.options.onClose(validated !== true, dispose) !== false) : true) {
			this.dispose();
		}
	},
	hideOkButton: function(hide) {
		syra_menus.button.hide(this.okBtn, hide);
	},
	addCloseButton: function(slot) {
		slot = slot || this.dialogSlot;
		this.btn_close = syra_menus.button.add({
			parent: this,
			slot: slot,
			text: syra_local.dlg_close,
			css: this.$skin + "-page-close",
			iconOnly: true,
			fontIcon: "close",
			shortCutTip: syra_shortCuts.tip.close,
			btnclick: function() {
				this.parent.close();
			}
		});
	},
	activate: function(isActivated) {
		this.isDeactivated = !isActivated;
		if (this.overlay) {
			this.overlay.style.display = isActivated ? "" : "none";
		}
		this.dialogSlot.style.display = isActivated ? "" : "none";
	},
	resizeDialog: function(resize, onScroll, isDlgResizing) {
		if (!this.isDeactivated && this._content) {
			if (!onScroll && this.overlay) {
				_resizeOverlay(this);
			}
			if (!this.disposed && syra_site.body) {
				var rect = {
					left: 50
				};
				rect.width = syra_site.layoutSlot.clientWidth - (rect.left * 2);
				rect.right = rect.left + rect.width;
				rect.top = 50;
				this._maxHeight = rect.height = syra_site.layoutSlot.clientHeight - (rect.top * 2);
				rect.bottom = rect.top + rect.height;
				if (this.options.resizeDialog) {
					this.options.resizeDialog(this, isDlgResizing);
				} else {
					if (this.options.position) {
						this._resizePositioned(rect);
					} else {
						var page = this._content && this._content.page;
						if (page && page.scrollview) {
							_resizePage(this, page, isDlgResizing);
						}
					}
				}
			}
		}
	},
	_resizePositioned: function(siteBodyRect) {
		var slot = this.dialogSlot;
		var rect = syra_dom.getBoundingClientRect(slot);
		if (rect.width > siteBodyRect.width) {
			slot.style.width = (rect.width = siteBodyRect.width) + "px";
		}
		if (rect.height > siteBodyRect.height) {
			slot.style.height = (rect.height = siteBodyRect.height) + "px";
		}

		var page = this.openerBox && this.openerBox.page;
		var within;
		if (page && page.scrollview && this.options.position.of) {
			if (page.scrollview.contains(this.options.position.of[0])) {
				within = {
					collision: "flipfit",
					within: $(page.scrollview)
				};
			}
		}
		this.setPosition(within);
		this.options.onresize && this.options.onresize(this);
	},
	setPosition: function(within) {
		var $position = {
			my: this.options.position.my,
			at: this.options.position.at,
			of: this.options.position.of,
		};
		if (syra_site.isDocumentRTL) {
			var keys = ["my", "at"];
			for (var ii = 0, jj = keys.length; ii < jj; ii++) {
				var key = keys[ii];
				if ($position[key]) {
					if ($position[key].indexOf("left") >= 0) {
						$position[key] = $position[key].replace("left", "right");
					} else {
						$position[key] = $position[key].replace("right", "left");
					}
				}
			}
		}
		if (within) {
			$position.collision = within.collision;
			$position.within = within.within;
		}
		$(this.dialogSlot).position($position);
	},
	dispose: function() {
		syra_dlg.onClose(this);
		syra_store.remove(this);
		this.overlay && syra_dom.removeChild(this.overlay);
		if (this._content) {
			delete this._content.dialogWrapper;
		}
		if (this.options) {
			this.options.page = this.options.autoCloseBoundary = null;
			if (this.options.content) {
				delete this.options.content;
			} else {
				this._content.dispose && this._content.dispose();
				this.dialogSlot && syra_dom.empty(this.dialogSlot);
			}
			this.dialogSlot && syra_dom.removeChild(this.dialogSlot);
		}

		syra_site.disposeObject(this);
	}
});