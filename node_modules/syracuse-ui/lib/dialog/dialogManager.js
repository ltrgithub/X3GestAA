"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Dialog = require('./dialog').Dialog;

var _autoClosePopup, _autoCloseTimeout;
var _stack = [];

function Tip() {
	this.$css = "s-title-tip";
}

helpers.defineClass(Tip, null, {
	show: function(text, target, check) {
		this.clear();
		if (text) {
			this.target = target;
			target.syraTipTitle = target.title;
			target.title = "";
			if (!check || (target.syraShortCutTip || target.syraTip == 2 || target.scrollWidth > target.clientWidth)) {
				this.showTimeOut = setTimeout(function() {
					exports.titleTip._show(text, target);
				}, 800);
			}
		}
	},
	_show: function(text, target) {
		if (!this._item) {
			this._item = document.createElement("div");
			this._item.className = this.$css;
		}
		if (text.indexOf("<em") >= 0) {
			if (!this.em) {
				this.em = "<em class='" + this.$css + "-em'>";
			}
			this._item.innerHTML = text.replace(/<em>/g, this.em);
		} else {
			this._item.textContent = text;
		}
		this._item.style.zIndex = syra_site.dom.getTopZIndex();
		if (target.syraShortCutTip) {
			var shortCut = document.createElement("div");
			shortCut.className = "s-title-shortcut";
			shortCut.textContent = "(" + target.syraShortCutTip + ")";
			this._item.appendChild(shortCut);
		}
		var posX = syra_site.isDocumentRTL ? "right" : "left";
		syra_site.layoutSlot.appendChild(this._item);
		$(this._item).position({
			my: posX + " top",
			at: posX + " bottom+15",
			of: $(target)
		});
	},
	hide: function() {
		this.showTimeOut && clearTimeout(this.showTimeOut);
		syra_site.dom.removeChild(this._item);
		this.showTimeOut = null;
	},
	clear: function() {
		if (this.target) {
			if (this.target.syraTipTitle) {
				this.target.title = this.target.syraTipTitle;
			}
			delete this.target;
		}
		this.hide();
	}
});

exports.titleTip = new Tip();
exports.fieldTip = new Tip();
exports.fieldTip.$css = "s-field-tip";

function _open(box, options, $skin) {
	var dlg = new Dialog();
	dlg.isModal = options.isModal !== false;
	dlg.$skin = $skin || "s-modal";
	dlg.openerBox = box;
	dlg.openerPage = box.page;
	dlg.open(options);
	_stack.push(dlg);
	return dlg;
};

exports.openModal = function(box, options) {
	return _open(box, options);
};
exports.openPage = function(box, options) {
	return _open(box, options);
};

exports.openPopup = function(box, options) {
	exports.titleTip.hide();
	exports.closePopups();
	options.isModal = false;
	var dlg = _open(box, options, "s-popup");
	if (dlg.options.$isAutoClose && !dlg.options.$isAutoCloseTimeoutDisabled) {
		_autoClosePopup = dlg;
	}
	return dlg;

};
exports.checkPopupDisplay = function(target, onEnter) {
	if (onEnter) {
		if (_autoClosePopup && _autoClosePopup.dialogSlot) {
			var inPopup = (target == _autoClosePopup.dialogSlot) || _autoClosePopup.dialogSlot.contains(target);
			var picker = _autoClosePopup.options.picker;
			if (!inPopup && picker) {
				inPopup = (target == picker) || picker.contains(target);
			}
			if (inPopup) {
				if (_autoCloseTimeout) {
					clearTimeout(_autoCloseTimeout);
					_autoCloseTimeout = null;
				}
			} else {
				if (!_autoCloseTimeout) {
					_autoCloseTimeout = setTimeout(function() {
						_autoClosePopup && _autoClosePopup.close();
						_autoClosePopup = _autoCloseTimeout = null;
					}, 1000);
				}
			}
		}
	} else {
		exports.titleTip.clear();
	}
};


exports.openLookup = function(box, options) {
	return exports.openModal(box, options);
};

exports.onClose = function(dlg) {
	if (_autoClosePopup == dlg) {
		_autoCloseTimeout && clearTimeout(_autoCloseTimeout);
		_autoClosePopup = _autoCloseTimeout = null;
	}
	dlg.openerBox = dlg.openerPage = null;
	var index = _stack.indexOf(dlg);
	index >= 0 && _stack.splice(index, 1);

};
exports.closeAll = function(box, dispose) {
	if (_stack) {
		for (var ii = 0, jj = _stack.length; ii < jj; ii++) {
			var dlg = _stack[ii];
			if (dlg && !dlg.disposed && dlg.openerBox == box) {
				dlg.openerBox = dlg.openerPage = null;
				if (!dlg.hasCallback) {
					_stack.splice(ii, 1);
					ii--;
					jj--;
					dlg.close(undefined, dispose);
				}
			}
		}
	}
};

exports.activateAll = function(box, isActivated) {
	for (var ii = 0, jj = _stack.length; ii < jj; ii++) {
		var dlg = _stack[ii];
		if (!dlg.disposed && dlg.openerBox == box) {
			if (dlg._content) {
				exports.activateAll(dlg._content, isActivated);
			}
			dlg.activate(isActivated);
		}
	}
};

exports.closePopups = function(box, event) {
	var site = syra_site;
	for (var ii = 0, jj = _stack.length; ii < jj; ii++) {
		var dlg = _stack[ii];
		if (dlg && dlg.options && dlg.options.$isAutoClose) {
			if (dlg._content && dlg._content == box) {
				continue;
			}
			if (!event || !(dlg.dialogSlot.contains(event.target) ||
				(dlg.options.autoCloseBoundary && dlg.options.autoCloseBoundary.contains(event.target)))) {
				dlg.close();
			}
		}
	}
};

exports.resizePositionedDialogs = function(page) {
	for (var ii = 0, jj = _stack.length; ii < jj; ii++) {
		var dlg = _stack[ii];
		if (!dlg.disposed && dlg.openerPage == page) {
			dlg.resizeDialog(null, true);
		}
	}
};

exports.getTopDialogPage = function() {
	for (var ii = _stack.length - 1; ii >= 0; ii--) {
		if (_stack[ii].isDialogPage) {
			return _stack[ii];
		}
	}
	return null;
};

exports.dispose = function() {
	exports.titleTip.clear();
	_autoClosePopup = _autoCloseTimeout = _stack = null;
};