"use strict";
var helpers = require('syracuse-core').helpers;
var Dialog = require('./dialog').Dialog;

var _autoClosePopup, _autoCloseTimeout;
var _stack = [];

function _open(box, options, $skin) {
	var dlg = new Dialog();
	dlg.isModal = options.isModal !== false;
	dlg.$skin = $skin || "s-modal";
	dlg.openerBox = box;
	dlg.openerPage = box.page;
	dlg.open(options);
	_stack.push(dlg);
	return dlg;
};

exports.openModal = function(box, options) {
	return _open(box, options);
};
exports.openPage = function(box, options) {
	return _open(box, options);
};

exports.openPopup = function(box, options) {
	syra_tip.titleTip.hide();
	exports.closePopups();
	options.isModal = false;
	var dlg = _open(box, options, "s-popup");
	if (!syra_quality.enableTestRobot && dlg.options.$isAutoClose && !dlg.options.$isAutoCloseTimeoutDisabled) {
		_autoClosePopup = dlg;
	}
	return dlg;

};
exports.checkPopupDisplay = function(target, onEnter) {
	if (onEnter) {
		if (_autoClosePopup && _autoClosePopup.dialogSlot) {
			var inPopup = (target == _autoClosePopup.dialogSlot) || _autoClosePopup.dialogSlot.contains(target);
			var picker = _autoClosePopup.options.picker;
			if (!inPopup && picker) {
				inPopup = (target == picker) || picker.contains(target);
			}
			if (inPopup) {
				if (_autoCloseTimeout) {
					clearTimeout(_autoCloseTimeout);
					_autoCloseTimeout = null;
				}
			} else {
				if (!_autoCloseTimeout) {
					_autoCloseTimeout = setTimeout(function() {
						_autoClosePopup && _autoClosePopup.close();
						_autoClosePopup = _autoCloseTimeout = null;
					}, 1000);
				}
			}
		}
	} else {
		syra_tip.titleTip.clear();
	}
};

exports.openLookup = function(box, options) {
	return exports.openModal(box, options);
};

exports.onClose = function(dlg) {
	if (_stack) {
		if (_autoClosePopup == dlg) {
			_autoCloseTimeout && clearTimeout(_autoCloseTimeout);
			_autoClosePopup = _autoCloseTimeout = null;
		}
		dlg.openerBox = dlg.openerPage = null;
		var index = _stack.indexOf(dlg);
		index >= 0 && _stack.splice(index, 1);
	}
};
exports.closeAll = function(box, dispose) {
	if (_stack) {
		for (var ii = 0, jj = _stack.length; ii < jj; ii++) {
			var dlg = _stack[ii];
			if (dlg && !dlg.disposed && dlg.openerBox == box) {
				dlg.openerBox = dlg.openerPage = null;
				if (!dlg.hasCallback) {
					_stack.splice(ii, 1);
					ii--;
					jj--;
					dlg.close(undefined, dispose);
				}
			}
		}
	}
};

exports.activateAll = function(box, isActivated) {
	if (_stack) {
		for (var ii = 0, jj = _stack.length; ii < jj; ii++) {
			var dlg = _stack[ii];
			if (!dlg.disposed && dlg.openerBox == box) {
				if (dlg._content) {
					exports.activateAll(dlg._content, isActivated);
				}
				dlg.activate(isActivated);
			}
		}
	}
};

exports.closePopups = function(box, event) {
	if (_stack) {
		var site = syra_site;
		for (var ii = 0, jj = _stack.length; ii < jj; ii++) {
			var dlg = _stack[ii];
			if (dlg && dlg.options && dlg.options.$isAutoClose) {
				if (dlg._content && dlg._content == box) {
					continue;
				}
				if (!event || !(dlg.dialogSlot.contains(event.target) ||
					(dlg.options.autoCloseBoundary && dlg.options.autoCloseBoundary.contains(event.target)))) {
					dlg.close();
				}
			}
		}
	}
};

exports.resizePositionedDialogs = function(page) {
	if (_stack) {
		for (var ii = 0, jj = _stack.length; ii < jj; ii++) {
			var dlg = _stack[ii];
			if (!dlg.disposed && dlg.openerPage == page) {
				dlg.resizeDialog(null, true);
			}
		}
	}
};

exports.getTopDialogPage = function() {
	if (_stack) {
		for (var ii = _stack.length - 1; ii >= 0; ii--) {
			if (_stack[ii].isDialogPage) {
				return _stack[ii];
			}
		}
	}
	return null;
};

exports.dispose = function() {
	syra_tip.titleTip.clear();
	_autoClosePopup = _autoCloseTimeout = _stack = null;
};