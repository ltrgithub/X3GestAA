"use strict";
var Dialog = require('./dialog').Dialog;

var _autoCloseDialogs = {};
var _pageDialogs = [];


exports.open = function(options) {
	var dialog = new Dialog();
	dialog.open(options);
	return dialog;
};

exports.openBoxDialog = function(box, options) {
	options.boxParent = box;
	options.openerPage = box.page;
	var dialog = exports.open(options);
	if (!box._dialogs) {
		box._dialogs = [];
	}
	box._dialogs.push(dialog);
	return dialog;
};

exports.closeBoxDialog = function(box, dialog) {
	if (box._dialogs) {
		for (var ii = 0, jj = box._dialogs.length; ii < jj; ii++) {
			if (box._dialogs[ii] == dialog) {
				box._dialogs.splice(ii, 1);
				break;
			}
		}
	}
};

exports.activateBoxDialogs = function(box, isActivated) {
	if (box._dialogs) {
		for (var ii = 0, jj = box._dialogs.length; ii < jj; ii++) {
			if (!box._dialogs[ii].disposed) {
				box._dialogs[ii].activate(isActivated);
			}
		}
	}
};

exports.closeBoxDialogs = function(box, dispose) {
	if (box._dialogs) {
		for (var ii = 0, jj = box._dialogs.length; ii < jj; ii++) {
			if (box._dialogs[ii] && !box._dialogs[ii].hasCallback) {
				box._dialogs[ii].close(undefined, dispose);
				box._dialogs[ii] = null;
			}
		}
		box._dialogs = null;
	}
};

exports.registerAutoClosePopups = function(dialog, register) {
	if (register) {
		_autoCloseDialogs[dialog.id] = dialog;
	} else {
		delete _autoCloseDialogs[dialog.id];
	}
};

exports.closePopups = function(box, event) {
	if (_autoCloseDialogs) {
		var ids = Object.keys(_autoCloseDialogs);
		for (var ii = 0, jj = ids.length; ii < jj; ii++) {
			var dlg = _autoCloseDialogs[ids[ii]];
			if (dlg && !dlg.disposed) {
				if (dlg._content && dlg._content == box) {
					continue;
				}
				if (dlg._content && dlg._content.onBeforeAutoClose && !dlg._content.onBeforeAutoClose(box)) {
					continue;
				}
				if (!event || !dlg.isTargetInBoundary(event)) {
					dlg.close();
					delete _autoCloseDialogs[ids[ii]];
				}
			}
		}
	}
};

exports.registerDialogPage = function(dialog, add) {
	if (add) {
		_pageDialogs.push(dialog);
	} else {
		for (var ii = 0, jj = _pageDialogs.length; ii < jj; ii++) {
			if (_pageDialogs[ii] == dialog) {
				_pageDialogs.splice(ii, 1);
				break;
			}
		}
	}
};

exports.getTopDialogPage = function() {
	if (_pageDialogs.length > 0) {
		return _pageDialogs[_pageDialogs.length - 1];
	}
	return null;
};

exports.dispose = function() {
	_autoCloseDialogs = _pageDialogs = null;
};