"use strict";

function _show(tip, text, target) {
	if (!tip._item) {
		tip._item = document.createElement("div");
		tip._item.className = tip.$css;
	}
	if (text.indexOf("<em") >= 0) {
		if (!tip.em) {
			tip.em = "<em class='" + tip.$css + "-em'>";
		}
		tip._item.innerHTML = text.replace(/<em>/g, tip.em);
	} else {
		tip._item.textContent = text;
	}
	tip._item.style.zIndex = syra_site.dom.getTopZIndex();
	if (target.syraShortCutTip) {
		var shortCut = document.createElement("div");
		shortCut.className = "s-title-shortcut";
		shortCut.textContent = "(" + target.syraShortCutTip + ")";
		tip._item.appendChild(shortCut);
	}
	var posX = syra_site.isDocumentRTL ? "right" : "left";
	syra_site.layoutSlot.appendChild(tip._item);
	$(tip._item).position({
		my: posX + " top",
		at: posX + " bottom+15",
		of: $(target)
	});
}


function _requestShow(tip, text, target, check) {
	_clear(tip);
	if (text) {
		tip.target = target;
		target.syraTipTitle = target.title;
		target.title = "";
		if (!check || (target.syraShortCutTip || target.syraTip == 2 || target.scrollWidth > target.clientWidth)) {
			tip.showTimeOut = setTimeout(function() {
				_show(tip, text, target);
			}, 800);
		}
	}
}

function _clear(tip) {
	if (tip.target) {
		if (tip.target.syraTipTitle) {
			tip.target.title = tip.target.syraTipTitle;
		}
		delete tip.target;
	}
	_hide(tip);
}

function _hide(tip) {
	tip.showTimeOut && clearTimeout(tip.showTimeOut);
	syra_site.dom.removeChild(tip._item);
	tip.showTimeOut = null;
}

exports.titleTip = {
	$css: "s-title-tip",
	show: function(text, target, check) {
		_requestShow(this, text, target, check);
	},
	hide: function() {
		_hide(this);
	},
	clear: function() {
		_clear(this);
	}
};


exports.fieldTip = {
	$css: "s-field-tip",
	show: function(text, target, check) {
		_requestShow(this, text, target, check);
	},
	onKeyUp: function(field, event) {
		var target = event.target;
		if (field.input && target && target.value !== undefined) {
			if (field.$field.$maxLength) {
				var value = target.value;
				if (value && value.length >= field.$field.$maxLength && (target.scrollWidth <= target.clientWidth)) {
					this.hasMaxLengthWarn = true;
					_show(this, syra_local.field_warn_limit_input, this.target = event.target);
				} else {
					if (this.hasMaxLengthWarn) {
						_clear(this);
						delete this.hasMaxLengthWarn;
					}
				}
			}
		}
	},
	onItemInOut: function(field, on) {
		if (on) {
			if (field.input) {
				this.show(field.getInputValue(), field.input, true);
			} else {
				this.show(field.displayText || field._dataValue.textContent, field._dataValue, true);
			}
		} else {
			_clear(this);
		}
	}
};