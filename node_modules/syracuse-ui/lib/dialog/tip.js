"use strict";
var _formatApi = require('syracuse-ui/lib/field/formatApi');

function _show(tip, text, target, description) {
	if (!tip._item) {
		tip._item = syra_dom.addDiv(tip.$css);
	}
	if (description) {
		if (text) {
			text += "\r\n" + description;
		} else {
			text = description;
		}
	}
	if (text.indexOf("<em") >= 0) {
		if (!tip.em) {
			tip.em = "<em class='" + tip.$css + "-em'>";
		}
		tip._item.innerHTML = text.replace(/<em>/g, tip.em);
	} else {
		syra_dom.empty(tip._item);
		syra_dom.pre("s-pre", exports.utcTip.replaceUTC(text) || text, tip._item);
		//tip._item.textContent = text;
	}
	tip._item.style.zIndex = syra_dom.getTopZIndex();
	if (target.syraShortCutTip) {
		syra_dom.addTextInfo("s-title-shortcut", "(" + target.syraShortCutTip + ")", tip._item);
	}
	var posX = syra_site.isDocumentRTL ? "right" : "left";
	syra_site.layoutSlot.appendChild(tip._item);
	$(tip._item).position({
		my: posX + " top",
		at: posX + " bottom+15",
		of: $(target),
		within: syra_site.layoutSlot
	});
}


function _requestShow(tip, text, target, check, description) {
	_clear(tip);
	if (text) {
		tip.target = target;
		target.syraTipTitle = target.title;
		target.title = "";
		if (!check || description || (target.syraShortCutTip || target.syraTip == 2 || ((target.scrollWidth - target.clientWidth) > 1)) || exports.utcTip.hasUTC(text)) {
			tip.showTimeOut = setTimeout(function() {
				_show(tip, text, target, description);
			}, 800);
		}
	}
}

function _clear(tip) {
	if (tip.target) {
		if (tip.target.syraTipTitle) {
			tip.target.title = tip.target.syraTipTitle;
		}
		delete tip.target;
	}
	_hide(tip);
}

function _hide(tip) {
	tip.showTimeOut && clearTimeout(tip.showTimeOut);
	syra_dom.removeChild(tip._item);
	tip.showTimeOut = null;
}

exports.titleTip = {
	$css: "s-title-tip",
	show: function(text, target, check) {
		_requestShow(this, text, target, check);
	},
	hide: function() {
		_hide(this);
	},
	clear: function() {
		_clear(this);
	}
};


exports.fieldTip = {
	$css: "s-field-tip",
	show: function(text, target, check, $tooltip) {
		_requestShow(this, text, target, check, $tooltip);
	},
	onKeyUp: function(field, event) {
		if (!field.isFieldTipDisabled) {
			var target = event.target;
			var value = target && target.value;
			if (this.hasMaxLengthWarn && field.input && value !== undefined) {
				if (field.$field.$maxLength && !(value && value.length >= field.$field.$maxLength)) {
					_clear(this);
					delete this.hasMaxLengthWarn;
				}
			}
		}
	},
	onKeyPress: function(field, event, charCode) {
		if (!field.isFieldTipDisabled) {
			var target = event.target;
			var value = target && target.value;
			if (field.input && target && value !== undefined && field.$field.$type !== "application/x-boolean") {
				if (field.$field.$maxLength) {
					if (charCode && value && value.length >= field.$field.$maxLength) {
						this.hasMaxLengthWarn = true;
						_show(this, syra_local.field_warn_limit_input, this.target = target);
					} else {
						if (this.hasMaxLengthWarn) {
							_clear(this);
							delete this.hasMaxLengthWarn;
						}
					}
				}
			}
		}
	},
	onItemInOut: function(field, on) {
		if (!field.isFieldTipDisabled) {
			if (on) {
				var $field, $tooltip;
				var dataset = field.articleParent && field.articleParent.dataset;
				if (dataset) {
					$field = dataset.$properties && dataset.$properties[field.$item.$bind];
					$tooltip = $field && $field.$tooltip;
				}
				if (!$tooltip) {
					$tooltip = field.$field && field.$field.$tooltip;
				}
				if ($tooltip) {
					$tooltip = syra_expression.parse(field.articleParent, $tooltip);
				}
				if (field.input) {
					this.show(field.getInputValue(), field.input, !$tooltip, $tooltip);
				} else {
					this.show(field.displayText || field._dataValue.textContent, field._dataValue, !$tooltip, $tooltip);
				}
			} else {
				_clear(this);
			}
		}
	}
};

exports.utcTip = {
	pattern: /(\d{4}-\d{2}-\d{2})[ T](\d{2}:\d{2}:\d{2})(Z|\s*GMT)/, //var _pattern = /\d{4}-\d{2}-\d{2}[ T]\d{2}:\d{2}:\d{2}(Z|\s*GMT)/;
	hasUTC: function(value) {
		if (value && value.length >= 20) {
			if (this.pattern.test(value)) {
				return true;
			}
		}
		return false;
	},
	replaceUTC: function(value, useEmphasis) {
		/*if (useEmphasis && value) {
         value += "2012-06-23T08:22:45Z"; // " 2014-10-28 13:18:21 GMT";
         }*/
		if (this.hasUTC(value)) {
			var found = value.match(this.pattern);
			for (var ii = 0, jj = found.length; ii < jj; ii++) {
				if (found[ii].length > 10) {
					if (useEmphasis) {
						value = value.replace(found[ii], "<em class='s-dt-utc'>" + found[ii] + "</em>");
					} else {
						value = value.replace(found[ii], _formatApi.utcToLocal(found[ii]));
					}
				}
			}
			return value;
		}
	},
	emphasis: function(value) {
		return this.replaceUTC(value, true);
	},
	onInout: function(onEnter, event, target) {
		var className = target && target.className;
		var isUTC = className && className.indexOf && className.indexOf("s-dt-utc") >= 0;
		if (isUTC) {
			var field = syra_store.findField(target);
			if (field && onEnter) {
				exports.titleTip.show(target.textContent, target);
			}
		}
	}
};