var helpers = require("syracuse-core/lib/helpers");
var SyraDate = require("syracuse-ui/lib/SyraDate/core-debug").SyraDate;

var INPUT_DEFAULT_HEIGHT = 44;
var INPUT_MAX_HEIGHT = 94;
var TIMEOUT_SHOWLASTMODIFIED = 120000;
var CHATBOX_BLINK_INTERVAL = 500;
var WINDOW_BLINK_INTERVAL = 1000;

function Observable(events) {
	if (!arguments.length)
		return;
	var self = this;
	self._observers = {};
	events = helpers.array.ensureArray(events);
	events.forEach(function(eventName) {
		self[eventName] = function(observer) {
			self._observers[eventName] = self._observers[eventName] || [];
			if (self._observers[eventName].indexOf(observer) == -1)
				self._observers[eventName].push(observer);
		};
	});
}
helpers.defineClass(Observable, null, {
	fire : function(events, value) {
		var self = this;
		events = helpers.array.ensureArray(events);
		events.forEach(function(eventName) {
			var observers = self._observers[eventName] || [];
			observers.forEach(function(observer) {
				observer(value);
			});
		});
	}
});

function Box(options) {
	if (!arguments.length)
		return;
	var self = this;
	Observable.call(self, ["close"]);
	self.id = options.id;
	self.title = options.title;
	self.permanent = options.permanent;
	self._render(options.minimize);
	Box._instances = Box._instances || {};
	Box._instances[self.$$me.attr("id")] = self;
	self._bindEvents();
}

helpers.defineClass(Box, Observable, {
	_render : function(minimize) {
		var self = this;
		$("<div />" ).attr("id", "chatbox_" + self.id)
			.addClass("chatbox")
			.html(self._getHtmlHeader(self.title) + self._getHtmlContent())
			.appendTo($("body"));
		self.$$me = $("#chatbox_" + self.id);
		self.$$me.css("bottom", "0px");
		self.$$me.show();
		if (minimize) {
			self.toggleSize();
		}
	},
	_bindEvents : function() {
		var self = this;
		$(".chatbox_button_close").live("click", function() {
			var $$chatBox = $(this).parents(".chatbox");
			var id = $$chatBox.attr("id").split("chatbox_")[1];
			$$chatBox.remove();
			_getInstance(this).fire("close", id);
			return false;
		});
		function _getId(domObj) {
			return $(domObj).parents(".chatbox")[0].id;
		}
		function _getInstance(domObj) {
			return Box._instances[_getId(domObj)];
		}
		function toggle() {
		 	_getInstance(this).toggleSize();
			return false;
		}
		$(".chatbox_button_tooglegrowth").live("click", toggle);
		$(".chatboxhead").live("click", toggle);
	},
	_getHtmlHeader : function(title) {
		var self = this;
		var html = '<div class="chatboxhead"><div class="chatboxtitle">' + title + '</div>';
		html += '<div class="chatboxoptions"><a class="chatbox_button_tooglegrowth">-</a>';
		if (!self.permanent)
			html += '&nbsp;&nbsp;<a class="chatbox_button_close">X</a>';
		html += '</div>';
		html += '<br clear="all"/></div>';
		return html;
	},
	_getHtmlContent : function () {
		return '<div class="chatboxcontent"></div>';
	},
	toggleSize : function() {
		var self = this;
		var $$content = self.$$me.find(".chatboxcontent");
		if ($$content.css("display") == "none") {
			$$content
				.css("display","block")
				.scrollTop($$content[0].scrollHeight);
			self._stopBlink();
		} else {
			$$content.css('display','none');
		}
	},
	_blink : function() {
		var self = this;
		if (self._blinkInterval) {
			return;
		}
		var $$title = self.$$me.find(".chatboxtitle");
		self._blinkInterval = setInterval(function() {
			if($$title.css("visibility") == "visible") {
				$$title.css('visibility','hidden');
			} else {
				$$title.css('visibility','visible');
			}
		}, CHATBOX_BLINK_INTERVAL);	
	},
	_stopBlink : function() {
		var self = this;
		if (!self._blinkInterval) {
			return;
		}
		var $$title = self.$$me.find(".chatboxtitle");
		clearInterval(self._blinkInterval);
		self._blinkInterval = null;
		$$title.css('visibility','visible');
		self._nbUnreadMessages = 0;
		$$title.text(self.title);
	},
	focus : function() {
		var self = this;
		var $$content = self.$$me.find(".chatboxcontent");
		if($$content.css("display") == "none") {
			self.toggleSize();
		}
	},
	lostFocus : function() {
		
	}
});

function ChatBox(options) {
	if (!arguments.length)
		return;
	var self = this;
	self.users = options.users;
	self.lastModified = null;
	self._nbUnreadMessages = 0;
	
	Box.call(self, options);
}

helpers.defineClass(ChatBox, Box, {
	_render : function(minimize) {
		var self = this;
		Box.prototype._render.call(self, minimize);
		$('<div class="chatboxinput"><textarea class="chatboxtextarea"></textarea></div>').appendTo(self.$$me);
		var $$textArea = self.$$me.find(".chatboxtextarea");
		$$textArea.blur(function() {
			$(this).removeClass("chatboxtextareaselected");
		}).focus(function() {
			self._stopBlink();
			$(this).addClass('chatboxtextareaselected');
		});

		self.$$me.click(function() {
			$$textArea.focus();
		});
	},
	toggleSize : function() {
		var self = this;
		var $$input = self.$$me.find(".chatboxinput");
		if ($$input.css("display") == "none") {
			$$input.css("display","block");
		} else {
			$$input.css('display','none');
		}
		Box.prototype.toggleSize.call(self);
	},
	focus : function() {
		var self = this;
		Box.prototype.focus.call(self);
		var $$textArea = self.$$me.find(".chatboxtextarea");
		$$textArea.focus();
	},
	lostFocus : function() {
		var self = this;
		Box.prototype.lostFocus.call(self);
		var $$textArea = self.$$me.find(".chatboxtextarea");
		$$textArea.removeClass("chatboxtextareaselected");
	},
	addMessage : function(from, message, blink) {
		var self = this;
		var $$content = self.$$me.find(".chatboxcontent");
		$$content.append('<div class="chatboxmessage"><span class="chatboxmessagefrom">' + from + ':&nbsp;&nbsp;</span><span class="chatboxmessagecontent">' + message +'</span></div>');
		$$content.scrollTop($$content[0].scrollHeight);

		self.lastModified = new SyraDate(Date.now());

		function _showLastModified () {
			var diff = Date.now() - self.lastModified.getTime();
			if (diff < TIMEOUT_SHOWLASTMODIFIED) {
				self._lastModifiedTimeOut = setTimeout(_showLastModified, TIMEOUT_SHOWLASTMODIFIED);
			} else {
				self.addInfo("Sent at  " + self.lastModified.toString("HH:mm") + " on " + self.lastModified.toString("dddd"));
			}
		}
		if (self._lastModifiedTimeOut) {
			clearTimeout(self._lastModifiedTimeOut);
		}
		self._lastModifiedTimeOut = setTimeout(_showLastModified, TIMEOUT_SHOWLASTMODIFIED);

		if ($$content.css("display") == "none" || blink) {
			self._nbUnreadMessages++;
			self.$$me.find(".chatboxtitle").text(self.title + " (" + self._nbUnreadMessages + ")");
			self._blink();
		}
	},
	addInfo : function(text) {
		var self = this;
		var $$content = self.$$me.find(".chatboxcontent");
		$$content.append('<div class="chatboxmessage"><span class="chatboxinfo">' + text + '</span></div>');	
	}
});

function UsersBox(options) {
	if (!arguments.length)
		return;
	var self = this;
	options.id = "userbox";
	options.permanent = true;
	Box.call(self, options);
}

helpers.defineClass(UsersBox, Box, {
	setUser : function(user) {
		var self = this;
		var $$userlist = self.$$me.find(".chatboxcontent");
		var $$user = $$userlist.find("#" + user.$key);
		if (!$$user.size()) {
			$$user = $('<div class="chatboxmessage" id="'
				+ user.$key
				+ '"><span class="chatboxuser">'
		 		+ user.fullName
		 		+ '</span></div>');
			$$userlist.append($$user);
		}
		$$user.removeClass("chatboxuseronline");
		$$user.removeClass("chatboxuseroffline");
		$$user.addClass(user.connected ? "chatboxuseronline" : "chatboxuseroffline");
	},
	setUsers : function(users) {
		var self = this;
		users = users || [];
		users.forEach(function(user) {
			self.setUser(user);
		});
	}
});

function Chat (user, users) {
	var self = this;
	
	self.user = user;
	
	self._originalTitle = document.title;
	self._windowFocus = true;
	self.chatBoxes = {};
	self._sendObservers = [];
	self._allMessagesKeys = [];
	self._users = {};
	
	self._userBox = new UsersBox({
		title : "Connected Users"
	});
	self._userBox.setUsers(users);
	
	self.chatBoxes[self._userBox.id] = self._userBox;
	
	$([window, document]).blur(function (){
		self._windowFocus = false;
	}).focus(function(){
		self._windowFocus = true;
		self._stopBlink();
	});
	self._bindEvents();
	self._reorder();
}

Chat.prototype._bindEvents = function() {
	var self = this;

	function keyDown(event) {
		var $$textArea = $(this);
		var $$chatBox = $(this).parents(".chatbox");
		var id = $$chatBox.attr("id").split("chatbox_")[1];
		var chatBox = self.chatBoxes[id];
		if (event.keyCode === 9) { //Tab, should go to next chatBox if one
			var chatBoxesIds = Object.keys(self.chatBoxes);
			if (chatBoxesIds.length > 1) {
				chatBox.lostFocus();
				var pos = chatBoxesIds.indexOf(chatBox.id);
				if (!pos) {
					pos = chatBoxesIds.length;
				}
				pos--;
				var next = self.chatBoxes[chatBoxesIds[pos]];
				if (next instanceof ChatBox) {
					next.focus();
				}
				else {
					if (!pos) {
						pos = chatBoxesIds.length;
					}
					pos--;
					var next = self.chatBoxes[chatBoxesIds[pos]];
					next.focus();
				}
			}
			event.preventDefault();
			return;
		}
		if(event.keyCode == 13 && !event.shiftKey)  {
			var text = $$textArea.val().replace(/^\s+|\s+$/g,"");
			$$textArea.val('')
				.focus()
				.css('height', INPUT_DEFAULT_HEIGHT + 'px');
			if (text != "") {
				var message = {
					$key : helpers.uuid.generate(),
					from : {
						$key : self.user.$key,
						fullName : "me"
					},
					to : chatBox.users,
					message : text
				};
				self.addMessages(message);
				self._notifyObservers(message);
			}
			return false;
		}

		var adjustedHeight = $$textArea.height();
		if (INPUT_MAX_HEIGHT > adjustedHeight) {
			adjustedHeight = Math.max($$textArea[0].scrollHeight, adjustedHeight);
			adjustedHeight = Math.min(INPUT_MAX_HEIGHT, adjustedHeight);
			if (adjustedHeight > $$textArea.height())
				$$textArea.css('height', adjustedHeight + 8 + 'px');
		} else {
			$$textArea.css('overflow','auto');
		}
	}

	$(".chatboxtextarea").live("keydown", keyDown);
	
	$(".chatboxuseronline").live("click", function() {
		self._startNewChat({
			$key : this.id,
			fullName : $(this).text()
		});
		return false;
	});
};

Chat.prototype._parseUsers = function(users) {
	var self = this;
	var sorted = users.sort(function(a, b) {
		return a.$key > b.$key;
	});
	
	var ids = sorted.map(function(u) {
		return u.$key;
	});
	
	var title = sorted.filter(function(u, idx) {
		return ids[idx] !== self.user.$key;
	}).map(function(u) {
		return u.fullName || self._users[u.$key];
	}).join(", ");
	
	var id = ids.join("_");
	
	return {
		id : id,
		title : title
	};
};

Chat.prototype._startNewChat = function(to) {
	var self = this;
	if (!Array.isArray(to)) {
		to = [to];
	}
	to.push(self.user);
	var parsed = self._parseUsers(to);
	self._addChatBox(parsed.id, parsed.title, false, to);
	self.chatBoxes[parsed.id].focus();
};

Chat.prototype._notifyObservers = function(message) {
	var self = this;
	self._sendObservers.forEach(function(callback) {
		callback(message);
	});
};

Chat.prototype._addChatBox = function(id, title, minimize, users) {
	var self = this;
	var chatBox = new ChatBox({
		id : id,
		title : title, 
		minimize : minimize, 
		users : users
	});
	chatBox.close(function(id) {
		delete self.chatBoxes[id];
		self._reorder();
	});
	var nbChatBox = Object.keys(self.chatBoxes).length;
	if (!nbChatBox) {
		chatBox.$$me.css('right', '20px');
	} else {
		var width = (nbChatBox.length) * (225 + 7) + 20;
		chatBox.$$me.css('right', width +'px');
	}
	self.chatBoxes[chatBox.id] = chatBox;
	self._reorder();
};

Chat.prototype._blink = function(from) {
	if (self._blinkInterval) {
		return;
	}
	self._originalTitle = document.title;
	var newTitle = from + " says...";
	self._blinkInterval = setInterval(function() {
		if (document.title == self._originalTitle) {
			document.title = newTitle;
		} else {
			document.title = self._originalTitle;
		}
	}, WINDOW_BLINK_INTERVAL);
};

Chat.prototype._stopBlink = function() {
	if (!self._blinkInterval)
		return;
	clearInterval(self._blinkInterval);
	document.title = self._originalTitle;
	self._blinkInterval = null;
};

Chat.prototype._reorder = function() {
	var self = this;
	var align = 0;
	
	Object.keys(self.chatBoxes).forEach(function(chatBoxId) {
		var chatBox = self.chatBoxes[chatBoxId];
		if (align === 0) {
			chatBox.$$me.css('right', '20px');
		} else {
			var width = (align) * (225 + 7) + 20;
			chatBox.$$me.css('right', width + 'px');
		}
		align++;
	});
};

Chat.prototype.setUsers = function(users) {
	var self = this;
	if (!users)
		return;
	if (!users.$resources)
		return;
	users = users.$resources;
	users.forEach(function(user) {
		self._users[user.$key] = user.fullName;
	});
	self._userBox.setUsers(users);
};

Chat.prototype.addMessages = function(messages) {
	var self = this;
	if (!Array.isArray(messages)) {
		messages = [messages];
	}
	messages.forEach(function(message) {
		if (self._allMessagesKeys.indexOf(message.$key) === -1) {
			var parsed = self._parseUsers(message.to);
			if (!Object.prototype.hasOwnProperty.call(self.chatBoxes, parsed.id)) {
				self._addChatBox(parsed.id, parsed.title, false, message.to);
			}
			var chatBox = self.chatBoxes[parsed.id];
			message.from.fullName = self._users[message.from.$key];
			chatBox.addMessage(message.from.fullName, message.message, !self._windowFocus);
			if (!self._windowFocus) {
				self._blink(message.from.fullName);
			}
			self._allMessagesKeys.push(message.$key);
		}
	});
};

Chat.prototype.send = function(callback) {
	var self = this;
	self._sendObservers.push(callback);
};

exports.Chat = Chat;