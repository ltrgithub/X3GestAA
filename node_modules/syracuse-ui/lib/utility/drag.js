"use strict";

function _unbind(drag) {
	drag.on_mousemove && syra_site.layoutSlot.removeEventListener("mousemove", drag.on_mousemove);
	drag.on_mouseup && syra_site.layoutSlot.removeEventListener("mouseup", drag.on_mouseup);
}

function Drag(context) {
	var self = this;
	syra_site.isInoutDisabled = true;
	(self.context = context).start();
	if (self.context.cursor) {
		syra_site.layoutSlot.style.cursor = self.context.cursor;
	}
	syra_site.layoutSlot.addEventListener("mousemove", self.on_mousemove = function(event) {
		event.preventDefault();
		if (self.context.delay) {
			if (!self.timeout) {
				self.timeout = setTimeout(function() {
					self.timeout = null;
					self.context && self.context.drag(event);
				}, 50);
			}
		} else {
			self.context.drag(event);
		}
	}, false);

	syra_site.layoutSlot.addEventListener("mouseup", self.on_mouseup = function(event) {
		_unbind(self);
		if (self.timeout) {
			clearTimeout(self.timeout);
			self.timeout = null;
			self.context.drag(event);
		}
		var isDragging = self.context.isDragging !== false;
		self.context.stop(event);
		self.dispose();
		if (isDragging) {
			syra_site.ignoreClick = event.target;
		}
	}, false);
}

Drag.prototype.dispose = function() {
	_unbind(this);
	if (this.context && this.context.cursor) {
		syra_site.layoutSlot.style.cursor = "default";
	}
	syra_site.disposeObject(this);
	syra_site.isInoutDisabled = false;
};

function Draggable(context) {
	var self = this;
	self.context = context;
	self.context.handle.addEventListener("mousedown", self.on_mousedown = function(event) {
		if (!self.context.exclude || self.context.exclude.indexOf(event.target) < 0) {
			if (!self.context.mousedown || self.context.mousedown(event)) {
				event.preventDefault();
				self._drag = new Drag(self.context);
				event.stopPropagation();
			}
		}
	}, false);
	if (self.context.mousemove) {
		self.context.handle.addEventListener("mousemove", self.on_mousemove = function(event) {
			self.context.mousemove(event);
		}, false);
	}
}

Draggable.prototype.dispose = function() {
	if (this.context && this.context.handle) {
		this.on_mousedown && this.context.handle.removeEventListener("mousedown", this.on_mousedown);
		this.on_mousemove && this.context.handle.removeEventListener("mousemove", this.on_mousemove);
		syra_site.disposeObject(this.context);
	}
	this._drag && this._drag.dispose();
	syra_site.disposeObject(this);
};

exports.Draggable = Draggable;