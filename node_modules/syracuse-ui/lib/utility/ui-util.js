"use strict";

exports.clone = function(obj) {
	return syra_site.clone(obj);
};

exports.registerFlashWidget = function(context) {
	context.field.layoutSlot.className += " s-field-flash-slot";
	var boxParent = (context.field.attachedField || context.field).boxParent;
	while (boxParent) {
		boxParent.hasFlashChildField = true;
		boxParent = boxParent.boxParent;
	}
};


exports.parseExpression = function(context, expression, dataset) {
	return syra_expression.parse(context.field.articleParent, expression, dataset);
};

exports.fetch = function(context, options, success, error) {
	options = options || {};
	if (options.$url) {
		options.$url = exports.parseExpression(context, options.$url);
	}
	context.field.page.fetch(options, success, error);
};

exports.menu = {
	fire: function(context, $link, dataset) {
		$link = syra_site.clone($link);
		$link.$url = exports.parseExpression(context, $link.$url, dataset);
		syra_router.executeMenu($link, context.field.articleParent);
	}
};

exports.preference = {
	profile: {
		get: function(key) {
			return syra_preference.profile.get(key);
		},
		save: function(key, value) {
			syra_preference.profile.save(key, value);
		}
	},
	page: {
		get: function(context) {
			return syra_preference.page.getField(context.field);
		},
		save: function(context, value) {
			syra_preference.page.saveField(context.field, value);
		}
	}
};

exports.dom = {
	hide: function(node, isHidden) {
		syra_dom.hide(node, isHidden);
	},
	isVisible: function(node) {
		return syra_dom.isVisible(node);
	},
	isParent: function(parent, node) {
		return syra_dom.isParent(parent, node);
	},
	empty: function(node) {
		return syra_dom.empty(node);
	},
	disable: function(node, isDisabled) {
		syra_dom.disable(node, isDisabled);
	},
	toggleClass: function(node, css, show) {
		syra_dom.toggleClass(node, css, show);
	},
	getNodeIndex: function(node) {
		return syra_dom.getNodeIndex(node);
	},
	moveChildNodes: function(source, target) {
		return syra_dom.moveChildNodes(source, target);
	},
	remove: function(node) {
		return syra_dom.remove(node);
	},
	addInput: function(css, parent, type) {
		return syra_dom.addInput(css, parent, type);
	},
	addTextArea: function(css, parent, rows) {
		return syra_dom.addTextArea(css, parent, rows);
	},
	addDiv: function(css, parent) {
		return syra_dom.addDiv(css, parent);
	},
	addText: function(css, text, parent) {
		return syra_dom.addText(css, text, parent);
	}
};
exports.alert = {
	info: function(context, message) {
		syra_diagnose.showDiagnoses({
			$diagnoses: [{
				$message: message,
				$severity: "info"
			}]
		}, context.field);
	},
	warn: function(context, message) {
		syra_diagnose.showDiagnoses({
			$diagnoses: [{
				$message: message,
				$severity: "warning"
			}]
		}, context.field);

	},
	error: function(context, message) {
		syra_diagnose.showDiagnoses({
			$diagnoses: [{
				$message: message,
				$severity: "error"
			}]
		}, context.field);
	}
};


/*
 exports.textToHTML = function(text){
  return (text || "").replace(/\r\n/g, "<br/>").replace(/\n/g, "<br/>").replace(/\s/g, "&nbsp;");
 };


 exports.formatHTMLText = function(message, br){
 return escaper(br ? message.replace(/\n/g, "<BR/>") : message);
  };
   */