"use strict";

var _templatePattern = /(\{.*?\})/g;

function _matchProperty(article, expression, property, record, properties, $subRecordKey) {
	var value = undefined;
	var params = article.page && article.page.urlSeg && article.page.urlSeg.params;
	while (article && value === undefined) {
		value = undefined;
		if (properties) {
			value = properties[property];
		}
		if (value === undefined) {
			if ($subRecordKey) {
				var subRecord = record[$subRecordKey];
				if (subRecord) {
					value = subRecord[property];
				}
			}
			if (value === undefined) {
				value = record[property];
				if (value === undefined || value == expression) {
					value = article.dataset[property];
					if (value === undefined || value == expression) {
						value = params && params[property];
						if (value === undefined || value == expression) {
							value = article.$prototype && article.$prototype[property];
							if (value === undefined || value == expression) {
								article = article.isChildFieldRecord ? article.articleParent.articleParent : article = article.articleParent;
								if (article) {
									record = article.dataset;
								}
							}
						}
					}
				}
			}
		}
	}
	return {
		article: article,
		value: value
	};
}

exports.extractCode = function($expression) {
	$expression = $expression + "";
	if ($expression.indexOf("{") >= 0) {
		return $expression.slice(1, $expression.length - 1);
	}
	return $expression;
};

exports.render = function(box, expression, layoutSlot, $fieldCss, $isEditMode) {
	if (expression[1] == "@") {
		var text = exports.parse(syra_article.getArticle(box), expression);
		if (layoutSlot) { //!important used by expression
			layoutSlot.textContent = text;
		}
		return text;
	} else {
		var article = syra_article.getArticle(box);
		var html = expression;
		var matches = expression.match(/(\{.*?\})/g);
		for (var ii = 0, jj = matches.length; ii < jj; ii++) {
			var match = syra_dom.escape(matches[ii]);
			html = html.replace(match, "<div data-s-match='" + ii + "'>" + match + "</div>");
			matches[ii] = {
				expression: match,
				property: match.substr(1, match.length - 2)
			};
		}
		layoutSlot.innerHTML = html; // safe because matches have been escaped
		var divs = layoutSlot.querySelectorAll("div");
		for (var ii = 0, jj = divs.length; ii < jj; ii++) {
			var domMatch = divs[ii];
			var match = matches[parseInt(domMatch.getAttribute("data-s-match"), 10)];
			if (match.property.charAt(0) == "$") {
				var value = _matchProperty(article, match.expression, match.property, article.dataset).value;
				if (value != null) {
					if (value.indexOf && value.indexOf("{") >= 0) {
						syra_dom.empty(domMatch);
						exports.render(box, value, domMatch, $fieldCss, $isEditMode);
					} else {
						domMatch.textContent = value;
					}
				}
			} else {
				syra_dom.empty(domMatch);
				box.page.addItem(domMatch, {
					$isMenusDisabled: true,
					$isDetailLinkDisabled: true,
					$isMenusHidden: true,
					$isExpressionChild: true,
					$bind: match.property,
					$inplace: true,
					$isEditMode: $isEditMode === undefined ? box.$isEditMode : $isEditMode,
					$css: "s-expression " + $fieldCss,
					$skin: "s-inplace"
				}, article);
			}
		}
	}
};

exports.parseUrl = function(article, expression, record, properties, $subRecordKey, ignoreCurrent, isUrl) {
	return exports.parse(article, expression, record, properties, $subRecordKey, ignoreCurrent, true);
};

function _localize(article, text) {
	var $localization = article.$prototype.$localization || article.page.$prototype.$localization;
	var localized = $localization && $localization[text];
	if (!localized) {
		var $allLocalization = article.$prototype.$allLocalization || article.page.$prototype.$allLocalization;
		if ($allLocalization) {
			$localization = $allLocalization["en-us"];
			localized = $localization && $localization[text];
			if (localized == null) {
				localized = "<??>";
			}
		}
	}
	return localized || text;
}

exports.parse = function(article, expression, record, properties, $subRecordKey, ignoreCurrent, isUrl) {
	if (!record && article.isSingleRecord) {
		var field = article.boundFields.$singleField && article.boundFields.$singleField[0];
		record = field && syra_dataset.getFieldValue(field);
		if (typeof(record) != 'object') {
			record = null;
		}
	}
	var result = expression;
	record = record || article.dataset;
	if (result && result.indexOf("{") >= 0) {
		if (result[1] == "@") {
			return _localize(article, result.slice(1, result.length - 1));
		} else {
			var matches = result.match(_templatePattern);
			var match, property, value;
			for (var ii = 0, jj = matches.length; ii < jj; ii++) {
				match = matches[ii];
				property = match.substr(1, match.length - 2);
				var matchResult;
				if (ignoreCurrent && ignoreCurrent[match]) {
					if (article.articleParent) {
						var articleParent = article.isChildFieldRecord ? article.articleParent.articleParent : article.articleParent;
						matchResult = _matchProperty(articleParent, match, property, articleParent.dataset, properties, $subRecordKey);
					}
				} else {
					matchResult = _matchProperty(article, match, property, record, properties, $subRecordKey);
				}
				if (matchResult && matchResult.value != null) {
					if (matchResult.value.indexOf && matchResult.value.indexOf("{") >= 0) {
						//if (matchResult.value.indexOf(match) >= 0) {
						(ignoreCurrent = ignoreCurrent || {})[match] = match;
						//value = exports.parse(article.articleParent,value, article.articleParent.dataset, properties, $subRecordKey);
						//}
						if (matchResult.article) {
							var startRecord = matchResult.article == article ? record : matchResult.article.dataset;
							matchResult.value = exports.parse(matchResult.article, matchResult.value, startRecord, properties, $subRecordKey, ignoreCurrent);
						}
					} else {
						if (typeof(matchResult.value) == "object") {
							matchResult.value = matchResult.value.$uuid || matchResult.value.$key || matchResult.value[property] || null;
							if (matchResult.value == null) {
								console.log("can not match " + property + " in " + expression);
								matchResult.value = "";
							}
						}
					}
					if (matchResult.value != null) {
						if (isUrl && expression.indexOf(match) > 0 && expression[expression.indexOf(match) - 1] == "=") {
							matchResult.value = encodeURIComponent(matchResult.value);
						}
						result = result.replace(match, matchResult.value);
					} else {
						result = result.replace(match, "");
					}
				} else {
					result = result.replace(match, "");
				}
			}
		}
	}
	return result;
};