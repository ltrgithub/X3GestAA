"use strict";
var _alertField = require('syracuse-ui/lib/alert/alertField');
var _errors = ["fatal", "error", "warning"];

function _onOpenDetail() {
	var item = this.parent;
	item.isExpanded = !item.isExpanded;
	this.link.style.overflow = item.isExpanded ? "auto" : "hidden";
	item._trace && syra_dom.hide(item._trace, !item.isExpanded);
	item.page.resizeItem();
}

function Line() {}

Line.prototype.showMessage = function(show) {
	syra_button.hide(this.msgItem, !show);
	if (show && !this.isDetailChecked) {
		this.isDetailChecked = true;
		if (this.$diagnose.$stackTrace || this.msgItem.link.scrollHeight > this.msgItem.link.clientHeight) {
			syra_button.add({
				parent: this,
				slot: this.msgItem.link,
				text: syra_local.diag_stacktrace,
				css: "s-diagnose-msg-more",
				click: _onOpenDetail
			});
		}
	}
};

Line.prototype.addTopLabel = function() {
	var severity = this.$diagnose.$severity;
	this.msgItem = syra_button.add({
		isIndicator: true,
		parent: this,
		slot: this.panel.body,
		text: this.$diagnose.$message,
		isTextHTML: true,
		css: "s-diagnose-msg",
		fontIcon: severity == "info" ? severity : "diagnose",
		severity: severity
	});
	this.msgItem.iconflag.className += " s-diag-" + severity;

	if (this.$diagnose.$links || this.$diagnose.$actions) {
		this.panel.drawLinks(syra_dom.addDiv("s-diagnose-links " + severity, this.msgItem.link), this.$diagnose, this.page);
	}
	this.$diagnose.$stackTrace = this.$diagnose.$stackTrace || this.$diagnose.stackTrace;
	if (this.$diagnose.$stackTrace) {
		this._trace = syra_dom.addDiv("s-diagnose-stacktrace");
		this._trace.innerHTML = syra_dom.textToHTML(this.$diagnose.$stackTrace, true);
		syra_dom.hide(this._trace, true);
		this.msgItem.link.appendChild(this._trace);
	}
};

Line.prototype.isError = function() {
	return _errors.indexOf(this.$diagnose.$severity) >= 0;
};
Line.prototype.clean = function() {
	if (this.msgItem) {
		syra_dom.remove(this.msgItem.link);
		if (this == this.panel.focused) {
			this.panel.focused = null;
		}
	}
	var stack = this.field ? this.panel.fieldStack : this.panel.stack;
	var index = stack.indexOf(this);
	index >= 0 && stack.splice(index, 1);
	delete this.panel.map[this.id];
};
Line.prototype.focus = function() {
	if (this.panel._focused) {
		syra_button.remove(this.panel._focused.focuseFlag);
		delete this.panel._focused.focuseFlag;
	}
	this.panel._focused = this;
	if (!this.focuseFlag) {
		this.focuseFlag = syra_button.add({
			isIndicator: true,
			parent: this,
			iconOnly: true,
			css: "s-diagnose-msg-focus",
			fontIcon: "right_arrow"
		});
		this.msgItem.link.insertBefore(this.focuseFlag.link, this.msgItem.link.firstChild);
	}
	this.msgItem && syra_site.scrollToItem(this.msgItem.link, this.panel.domItem, true);
};


function Panel(page) {
	this.page = page;
	this._lineIndex = 0;
	this.id = page.id + "diagnosepanel";
	syra_item.register(this);
	this.domItem = syra_dom.addDiv("s-diagnose");
	this.page.diagnoseSlot.className = "s-diagnose-page-slot";
	this.domItem.syraItem = this.id;
	this.body = syra_dom.addDiv("s-diagnose-msg-list", this.domItem);

	this.isCollapsed = true;
	this.clean();
	this.page.diagnoseSlot.appendChild(this.domItem);
	this._closeBtn = syra_button.add({
		parent: this,
		slot: this.page.diagnoseSlot,
		text: syra_local.diag_close,
		iconOnly: true,
		css: "s-diagnose-close",
		click: function() {
			this.parent.close();
		}
	});
}


Panel.prototype.drawLinks = function(slot, message, page) {
	message.$diagnosePanelId = this.id;
	message.$diagnosesSlot = slot;
	syra_menus.menus.applyChange(page || this.page, message, slot);
	delete message.$diagnosePanelId;
	delete message.$diagnosesSlot;
};

Panel.prototype.hasErrors = function(page) {
	for (var ii = this.fieldStack.length - 1; ii >= 0; ii--) {
		if (this.fieldStack[ii].isError()) {
			return true;
		}
	}
	return false;
};
Panel.prototype.onBoxItemInOut = function(box, onEnter) {
	if (box.severitiesCount && box.diagnoseBtn) {
		if (onEnter) {
			if (!box.diagnosePopupSlot) {
				box.diagnosePopupSlot = syra_dom.addDiv("s-diag-field-slot-popup");
				var severities = ["fatal", "error", "warning", "info", "success"];
				for (var ii = 0, jj = severities.length; ii < jj; ii++) {
					var severity = severities[ii];
					if (box.severitiesCount[severity]) {
						syra_button.add({
							isIndicator: true,
							parent: box.page,
							slot: box.diagnosePopupSlot,
							text: box.severitiesCount[severity] + " " + syra_local["box_" + severity],
							css: "s-diag-" + $severity + " s-diag-field",
							fontIcon: severity == "info" ? severity : "diagnose"
						});
					}
				}
				box.diagnosePopupDiag = syra_over.openPopup(box.page, {
					slot: box.diagnosePopupSlot,
					position: {
						my: "right top",
						at: "right bottom",
						of: box.diagnoseBtn.link
					},
					onClose: function() {
						syra_dom.remove(box.diagnosePopupSlot);
						box.diagnosePopupSlot = box.diagnosePopupDiag = null;
					}
				});
			}
		} else {
			box.diagnosePopupDiag && box.diagnosePopupDiag.close();
		}
	}
};
Panel.prototype.clean = function(closing) {
	if (this.domItem) {
		syra_button.hide(this._expandBtn, true);
		syra_button.hide(this._nextBtn, true);
		syra_button.hide(this._closeBtn, true);
		syra_dom.hide(this.domItem, true);
		if (this._menus && !this._menus.disposed) {
			this.removeItem(this._menus, true, true);
		}
		delete this._menus;
		if (closing) {
			while (this.stack.length) {
				this.stack[0].clean();
			}
		} else {
			syra_dom.empty(this.body);
			this.map = {};
			this.fieldStack = [];
			this.stack = [];
			this._focused = null;
		}
	}
};
Panel.prototype.getFieldItems = function(field) {
	var items = [];
	for (var ii = 0, jj = this.fieldStack.length; ii < jj; ii++) {
		if (this.fieldStack[ii].field == field) {
			items.push(this.fieldStack[ii]);
		}
	}
	return items;
};
Panel.prototype.onFieldItemInOut = function(field, onEnter) {
	_alertField.onFieldItemInOut(this, field, onEnter);
};
Panel.prototype.close = function() {
	this.clean(true);
	this.page.resizeItem();
};
Panel.prototype.showAlert = function(message, page) {
	if (!message || (!message.$bind && !message.field && !message.$diagnoses)) {
		this.clean();
	} else {
		if (message.field && message.field.$item.$isExpressionChild) {
			return;
		}
		if (message.$links || message.$actions) {
			if (!this._diagViewLinks) {
				this._diagViewLinks = syra_dom.addDiv("s-diagnose-links-main", this.domItem);
			}
			this.drawLinks(this._diagViewLinks, message, page);
		}
		if (message.field && (message.field.diagsSlot || message.field.diagnoseFlag || (message.$diagnoses === null))) {
			_alertField.clean(this, message.field);
		}
		if (message.$diagnoses) {
			for (var ii = 0, jj = message.$diagnoses.length; ii < jj; ii++) {
				var $diagnose = message.$diagnoses[ii];
				$diagnose.$severity = $diagnose.severity || $diagnose.$severity || "error";
				$diagnose.$message = $diagnose.message || $diagnose.$message;
			}
		}
		if (message.field) {
			_alertField.show(this, message);
		} else {
			if (message.$diagnoses && message.$diagnoses.length > 0) {
				for (var ii = 0, jj = message.$diagnoses.length; ii < jj; ii++) {
					var $diagnose = message.$diagnoses[ii];
					if ($diagnose.$message) {
						this.addLine(page, message.$diagnoses[ii]).addTopLabel();
					}
				}
			}
		}
		if (!message.noViewer) {
			this.autoHide = message.autoHide;
			this.refresh();
		}
		if (syra_site.landingPage && syra_site.landingPage.isPageLoaded && syra_dom.isVisible(this.domItem)) {
			syra_site.landingPage.resizeItem();
		}
	}
};
Panel.prototype.addLine = function(page, $diagnose, field) {
	var line = new Line();
	line.id = this.id + (++this._lineIndex);
	line.panel = this;
	line.page = page;
	line.$diagnose = $diagnose;
	this.map[line.id] = line;
	if (field) {
		line.article = field.articleParent;
		line.field = field;
		this.fieldStack.push(line);
	} else {
		line.article = page;
		this.stack.push(line);
	}
	return line;
};
Panel.prototype.walkToField = function(btn, field) {
	_alertField.walkToField(this, btn, field);
};
Panel.prototype.refresh = function() {
	var self = this;
	if ((self.page == syra_site) || (self.page.isPageLoaded && !self.page._isDataChanging)) {
		var count = self.stack.length + self.fieldStack.length;
		var showNext = self.fieldStack.length > 1;
		if (count) {
			if (showNext && !self._nextBtn) {
				self._nextBtn = syra_button.add({
					parent: self,
					slot: self.page.diagnoseSlot,
					text: syra_local.diag_next,
					title: syra_local.diag_next_tooltip,
					css: "s-diagnose-nav-next",
					click: function() {
						this.parent.walkToField(this.link);
					}
				});
			}

			for (var ii = 0, jj = self.stack.length; ii < jj; ii++) {
				self.stack[ii].showMessage(!self.isCollapsed);
			}
			for (var ii = 0, jj = self.fieldStack.length; ii < jj; ii++) {
				self.fieldStack[ii].showMessage(!self.isCollapsed);
			}
			if (!self._expandBtn) {
				self._expandBtn = syra_button.add({
					parent: self,
					isExpandBtn: true,
					slot: self.page.diagnoseSlot,
					text: syra_local.diag_expand,
					css: "s-diagnose-expander",
					isHidden: true,
					click: function() {
						var panel = this.parent;
						panel.isCollapsed = !panel.isCollapsed;
						panel.refresh();
						panel.page.resizeItem();
					}
				});
			}
			syra_button.hide(self._expandBtn, count <= 1);
			if (self.isCollapsed) {
				var item = self._focused || syra_button.getButton(self.body.lastChild.syraBtn).parent;
				item && item.showMessage(true);
				self._expandBtn.link.textContent = (count - 1) + syra_local.diag_expand;
			}
			self._expandBtn.link.textContent = self.isCollapsed ? ((count - 1) + " " + syra_local.diag_expand) : syra_local.diag_collapse;


			var zIndex = syra_dom.getTopZIndex() - 1;
			self._nextBtn && syra_dom.setZIndex(self._nextBtn.link, false, zIndex);
			self._expandBtn && syra_dom.setZIndex(self._expandBtn.link, false, zIndex);
			self._closeBtn && syra_dom.setZIndex(self._closeBtn.link, false, zIndex);
			syra_dom.setZIndex(self.domItem, false, zIndex);
		} else {
			syra_button.hide(self._expandBtn, true);
		}
		syra_button.hide(self._nextBtn, !showNext);
		syra_button.hide(self._closeBtn, count <= 0);
		syra_dom.hide(self.domItem, count <= 0);
		if (self.autoHide) {
			setTimeout(function() {
				self.clean();
				self.page && self.page.resizeItem();
			}, self.autoHide || 4000);
			delete self.autoHide;
		}
	}
};



exports.add = function(page) {
	return new Panel(page);
};