"use strict";
var helpers = require("syracuse-core/lib/helpers");
var DesktopPage = require("syracuse-ui/lib/page/desktopPage").DesktopPage;

function SoapPage() {}

exports.SoapPage = helpers.defineClass(SoapPage, DesktopPage, {
	loadBox: function(initData) {
		this.$responseCount = 0;
		this.$item.$layout.$layoutType = "tabs";
		this.$item.$layout.$items[0].$title = "Request";
		DesktopPage.prototype.loadBox.call(this, initData);
	},
	onMenuClick: function(menuItem) {
		if (menuItem.$bind == "$invoke") {
			var self = this;
			if (self.validateFields()) {
				var invokeMenu = self.$prototype.$links.$invoke;
				syra_site.urlMaker.formatMenuUrl(self, menuItem, null, function($url) {
					menuItem.$url = $url;
					syra_controller.callServer(self, {
						$location: menuItem,
						data: self.sendBag,
						method: menuItem.$method,
						noDisplayErr: menuItem.noDisplayErr || false
					}, function(data, response) {
						var newTab = self.layoutContent.createChildItem({
							$title: "Response " + (++self.$responseCount),
							$category: "section",
							$isCloseable: true,
							$isEmptyVisible: true,
							$layout: {
								$items: []
							}
						});
						var soapQuery = syra_controller.parseUrl(menuItem.$url);
						var $itemPage = {
							layoutSlot: newTab.body,
							$category: "vignette",
							openerUrlSegments: soapQuery.openerUrlSegments,
							$representation: response.data
						};
						$itemPage.openerUrlSegments.$facet = "$response";
						var initData = $itemPage.$representation.$prototype;
						var databody = initData.body;
						delete initData.body;
						var page = syra_site.pageLoader.load($itemPage);
						page.masterPage = self;
						delete initData.$description;
						initData.body = databody;
						newTab.openBox(true);
						page.applyChange(initData);
						newTab.layoutParent.openTab(newTab);

					}, function(data, response) {
						syra_site.showDiagnoses({
							$diagnoses: data && data.length > 0 ? (data.indexOf("$diagnoses") >= 0 ? JSON.parse(data).$diagnoses : [{
								$message: data ? data : syra_local.http_empty_error
							}]) : [{
								$message: syra_local.default_err_msg
							}]
						});
					});
				});
			}

		}
	}
});