"use strict";
var ez = require('ez-streams');
var globals = require('streamline-runtime').globals;
var ctiServiceManager = require("syracuse-cti/lib/ctiServiceManager").ctiServiceManager;

module.exports = {
	$titleTemplate: "CTI service {name}",
	$valueTemplate: "{name}",
	$summaryTemplate: "CTI service {name}",
	$descriptionTemplate: "CTI service",
	$className: "CtiService",
	$canCreate: true,
	$helpPage: "Administration-reference_CTI-Service",
	$properties: {
		name: {
			$title: "CTI service name",
			$isMandatory: true,
			$isUnique: true,
			$linksToDetails: true
		},
		connector: {
			$title: "Connector",
			$isMandatory: true,
			$default: "isi-com",
			$enum: [{
					$value: "isi-com",
					$title: "ISI-COM"
				}
				// , {
				// 	$value: "asterix",
				// 	$title: "Asterix"
				// }
			],
		},
		host: {
			$title: "CTI server hostname",
			$isHidden: function(_, instance) {
				return instance.connector(_) !== "isi-com";
			}
		},
		port: {
			$title: "CTI server port",
			$type: "integer",
			$isHidden: function(_, instance) {
				return instance.connector(_) !== "isi-com";
			}
		},
		serverUrl: {
			$title: "CTI server URL",
			$isHidden: function(_, instance) {
				return instance.connector(_) !== "asterix";
			}
		},
		defaultCountryCallingCode: {
			$title: "CTI default calling code",
			$type: "integer",
			$isHidden: function(_, instance) {
				return instance.connector(_) !== "isi-com";
			}
		},
		representation: {
			$title: "Representation name",
			$description: "Representation name used for displaying contact information",
			$isHidden: function(_, instance) {
				return instance.connector(_) !== "isi-com";
			}
		},
		lastNameBinding: {
			$title: "Last name binding",
			$isDisabled: function(_, instance) {
				return !instance.representation(_);
			},
			$isHidden: function(_, instance) {
				return instance.connector(_) !== "isi-com";
			}
		},
		firstNameBinding: {
			$title: "First name binding",
			$isDisabled: function(_, instance) {
				return !instance.representation(_);
			},
			$isHidden: function(_, instance) {
				return instance.connector(_) !== "isi-com";
			}
		},
		companyNameBinding: {
			$title: "Company name binding",
			$isDisabled: function(_, instance) {
				return !instance.representation(_);
			},
			$isHidden: function(_, instance) {
				return instance.connector(_) !== "isi-com";
			}
		},
		// username: {
		// 	$title: "CTI username",
		// },
		// password: {
		// 	$title: "CTI password",
		// },
		// phoneExtention: {
		// 	$title: "Phone extension",
		// },
	},
	$relations: {},
	$functions: {
		getConnectionString: function(_) {
			if (this.connector(_) === "isi-com")
				return "socket:" + this.host(_) + ":" + this.port(_);
			if (this.connector(_) === "asterix")
				return this.serverUrl(_);
		},
		getRepresentation: function(_) {
			return this.representation(_) || "VCTKCTIINT";
		},
		getIdentification: function(_, tel, iso2) {
			var data = (this.getContactData(_, tel, iso2) || {})._data || {};
			return {
				lastName: data[this.lastNameBinding(_) || "CALNAM"],
				firstName: data[this.firstNameBinding(_)],
				companyName: data[this.companyNameBinding(_)]
			};
		},
		getContactData: function(_, tel, iso2) {
			var session = globals.context.session;
			var up = session && session.getUserProfile(_);
			var ep = up && up.selectedEndpoint(_);
			var model = ep.getModel(_).getHandle(_);
			var rep = this.getRepresentation(_);
			var contactDetails = model.getEntity(_, rep, "$details");
			return contactDetails && model && model.fetchInstance(_, contactDetails, tel + "~" + iso2);
		},
	},
	$services: {
		// identification: {
		// 	$isHidden: true,
		// 	$method: "GET",
		// 	$title: "Identification",
		// 	$execute: function(_, context, instance, parameters) {
		// 		var ident = ctiServiceManager.getIdentification(_, parameters.tel);
		// 		if (ident)	{
		// 			context.reply(_, 200, {
		// 				lastName: ident.lastName,
		// 				firstName: ident.firstName,
		// 				companyName: ident.companyName
		// 			});
		// 		} else {
		// 			context.reply(_, 404);					
		// 		}
		// 	}
		// },
		showData: {
			$isHidden: true,
			$method: "GET",
			$title: "Show data",
			$execute: function(_, context, instance, parameters) {
				ctiServiceManager.showData(parameters.ctiId, parameters.tel);
				context.reply(_, 200, "ok");
			}
		},
		makeCall: {
			$isHidden: true,
			$method: "GET",
			$title: "Make call",
			$execute: function(_, context, instance, parameters) {
				ctiServiceManager.makeCall(parameters.ctiId, parameters.tel);
				context.reply(_, 200, "ok");
			}
		},
	},
	$searchIndex: {
		$fields: ["name"]
	},
	$defaultOrder: [
		["name", true]
	]
};