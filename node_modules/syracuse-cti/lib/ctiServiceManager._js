"use strict";
var url = require('url');
var ez = require('ez-streams');
var globals = require('streamline/lib/globals');
var helpers = require('syracuse-core').helpers;
var socketHandler = require('syracuse-notification/lib/socketHandler').getSocketHandler();
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var sessionManager = require('syracuse-session/lib/sessionManager').sessionManager;
var jsurl = require("jsurl");
var phoneFormat = require("./phoneFormat");
var IsicomConnector = require("./isi-com/ctiConnector").Connector;

var tracer = require('syracuse-core').getTracer("cti");

function formatPhoneNumber(tel) {
	if (!/^00/.test(tel) && tel[0] === "0") {
		tel = tel.replace(/^0/, "0033");
	}
	return tel.replace(/^00/, "+");
}

function countryForPhoneNumber(tel) {
	return tel && phoneFormat.countryForE164Number(tel);
}

var ctiServiceManager = exports.ctiServiceManager = new CtiServiceManager();

function CtiServiceManager() {
	var serviceMap = {};
	var userSocketsMap = {};

	var self = this;

	function dumpUserSocketMap() {
		if (tracer.debug) {
			Object.keys(userSocketsMap).forEach(function(k) {
				var s = userSocketsMap[k];
				tracer.debug("userSocketsMap[" + k + "]=" + (s && s.map(function(e) {
					return e.id;
				})));
			});
		}
	}

	function getUserId(socket) {
		return socket.$userId;
	}

	function setUserId(socket, userId) {
		if (userId === undefined) {
			delete socket.$userId;
		} else {
			socket.$userId = userId;
		}
	}

	this.setup = function() {
		var self = this;
		socketHandler.register("/sage-cti",

			// connect event
			function(socket, hd) {},

			// disconnect event
			function(socket, hd) {
				var userId = getUserId(socket);
				tracer.debug && tracer.debug("client disconnect: id=" + socket.id + ", userId=" + userId);
				var userSockets = userSocketsMap[userId] || [];
				if (userSockets.indexOf(socket) !== -1)
					userSockets.splice(userSockets.indexOf(socket), 1);
				tracer.debug && dumpUserSocketMap();
				setUserId(socket);
			},

			// custom events
			{
				pair: function(socket, hd, data) {
					var userId = data.user.$uuid;
					tracer.debug && tracer.debug("[SOCKET.IO] pair: userId=" + userId);
					if (!userId) return;
					setUserId(socket, userId);
					var userSockets = userSocketsMap[userId] || (userSocketsMap[userId] = []);
					if (userSockets.indexOf(socket) === -1)
						userSockets.push(socket);

					tracer.debug && dumpUserSocketMap();
				},
				callOut: function(socket, hd, data) {
					tracer.debug && tracer.debug("[SOCKET.IO] callOut: ", data.ctiId, data.tel);
					// socket.emit('callOut', data);
					self.callOut && self.callOut(data.ctiId, data.tel);
				}
			});
	};

	this.getCtiService = function(_) {
		var db = adminHelper.getCollaborationOrm(_);
		var setting = db.fetchInstance(_, db.model.getEntity(_, "setting"), {
			sdataWhere: ""
		});
		return setting.ctiService(_);
	};

	this.connect = function(_) {
		var s = this.getCtiService(_);
		if (!s) return;

		var connector = s.connector(_).toLowerCase();
		var ProviderClass = providers[connector];
		tracer.debug && tracer.debug("CtiServiceManager: connector=" + connector + ", provider=" + (ProviderClass && ProviderClass.name));
		if (!ProviderClass) return;
		var svc = serviceMap[s.$uuid];
		var connectionString = s.getConnectionString(_);
		tracer.debug && tracer.debug("CtiServiceManager: connectionString=" + connectionString);
		var uri = url.parse(connectionString);
		var opt = {
			defaultCountryCallingCode: s.defaultCountryCallingCode(_)
		};
		if (svc != null && uri.href !== svc.uri.href) {
			svc.close();
			svc = null;
		}
		if (svc == null || (svc.isAlive && !svc.isAlive())) {
			svc = serviceMap[s.$uuid] = new ProviderClass(self, connectionString, opt);
			this.provider = svc;
			tracer.info && tracer.info("CtiServiceManager: connecting to " + connectionString);
			svc.listen && svc.listen(!_);
		}
	};

	this.notifyUser = function(user, event, data) {
		tracer.debug && dumpUserSocketMap();

		var userSockets = userSocketsMap[user];
		var socket = userSockets && userSockets[0];
		tracer.debug && tracer.debug("notifying: user=" + user + ", event=" + event + ", socket=" + (socket && socket.id) + ", data=" + JSON.stringify(data));
		socket && socket.emit(event, data);
	};

	this.registerCallOutCallback = function(cb) {
		this.callOut = cb;
	};

	this.isProviderAlive = function() {
		return this.provider && this.provider.isAlive && this.provider.isAlive();
	};

	this.showData = function(ctiId, tel) {
		this.provider && this.provider.showData && this.provider.showData(ctiId, tel);
	};

	this.makeCall = function(ctiId, tel) {
		this.provider && this.provider.makeCall && this.provider.makeCall(ctiId, tel);
	};
}


var providers = {
	"isi-com": IsiComClient,
	// "asterisk:" : AsteriskClient
};

function CtiClient(manager, uri, opt) {
	this.uri = url.parse(uri);
	this.manager = manager;
	this.options = opt || {};
}

helpers.defineClass(CtiClient, null, {
	listen: function(_) {},
	close: function() {},
});

function IsiComClient(manager, uri) {
	CtiClient.apply(this, arguments);
	var self = this;
	var isicom = new IsicomConnector();
	var callIn, callOut;

	function notifyShowData(fields) {
		_notifyShowData(fields, function(err) {
			if (err) throw err;
		});
	}

	function _notifyShowData(fields, _) {
		if (!fields[2] || fields[2].length < 8) {
			tracer.debug && tracer.debug('IsiComClient: skip short number ' + fields[2]);
			return;
		}
		// 1. get user from ctiid
		var db = adminHelper.getCollaborationOrm(_);
		var e = db.getEntity(_, "user");
		// console.error("notifyShowData: entity=" + typeof(e));
		var user = db.fetchInstance(_, e, {
			jsonWhere: {
				ctiId: fields[0],
				active: true
			}
		});
		// console.error("notifyShowData: ctiID=" + fields[0] + ", user=" + typeof(user));
		var login = user && user.login(_);
		if (!login)
			return {};

		var data = {
			tel: formatPhoneNumber(fields[2]),
			user: {
				$uuid: user.$uuid,
				login: login,
				fullName: user.firstName(_) + " " + user.lastName(_)
			}
		};
		data.countryIsoAlpha2 = countryForPhoneNumber(data.tel);
		tracer.debug && tracer.debug("IsiComClient showdata with data=" + JSON.stringify(data));
		// 2. emit callIn on user socket
		manager.notifyUser(data.user.$uuid, "callIn", data);
	}

	function _makeCall(ctiId, tel) {
		// France code by default. It would be better to guess the code depending on the current region
		var def = self.options.defaultCountryCallingCode || 33;
		var re = new RegExp("^\\+" + def);
		isicom.makeCall(ctiId, tel.replace(re, "0"));
	}

	isicom.connect({
		hostname: this.uri.hostname,
		port: this.uri.port
	}, function(opcodeStr, fields) {
		// console.error('IsiComClient - CTIServerDebug', [fields[0], "Received : " + opcodeStr + " : " + fields.join(", ")]);
		switch (opcodeStr) {
			case "IdentificationAsked":
				// field[0]: agent number
				// field[1]: communication ID
				// field[2]: phone number
				tracer.debug && tracer.debug('IsiComClient', [fields[0], "Received : " + opcodeStr + " : " + fields.join(", ")]);
				isicom.sendIdentification(fields[0], fields[1], "nom", "prenom", "société");
				break;
			case "ManuallyShowData":
				tracer.debug && tracer.debug('IsiComClient', [fields[0], "Received : " + opcodeStr + " : " + fields.join(", ")]);
				notifyShowData(fields);
				break;
			case "CstaAlerting":
				tracer.debug && tracer.debug('IsiComClient', [fields[0], "Received : " + opcodeStr + " : " + fields.join(", ")]);
				callIn = fields[1];
				break;
			case "CstaDelivered":
				tracer.debug && tracer.debug('IsiComClient', [fields[0], "Received : " + opcodeStr + " : " + fields.join(", ")]);
				callOut = fields[1];
				break;
			case "CstaEstablished":
				tracer.debug && tracer.debug('IsiComClient', [fields[0], "Received : " + opcodeStr + " : " + fields.join(", ")]);
				// Notification on call in after establishing
				if (fields[1] === callIn) {
					callIn = null;
					notifyShowData(fields);
				}
				// Notification on call out after establishing
				if (fields[1] === callOut) {
					callOut = null;
					notifyShowData(fields);
				}
				break;
			case "CstaTransfered":
				tracer.debug && tracer.debug('IsiComClient', [fields[0], "Received : " + opcodeStr + " : " + fields.join(", ")]);
				notifyShowData(fields);
				break;
		}
	});
	isicom.registerAll();
	manager.registerCallOutCallback(_makeCall);
	// isicom.makeCall("201", "0247324831");
	// isicom.sendIdentification("201", "57", "S1", "S2", "S3");

	this.isAlive = function() {
		return isicom.isAlive();
	};

	this.showData = function(ctiId, tel) {
		notifyShowData([ctiId, "", tel]);
	};

	this.makeCall = _makeCall;
}