"use strict";
var url = require('url');
var ez = require('ez-streams');
var globals = require('streamline/lib/globals');
var helpers = require('syracuse-core').helpers;
var socketHandler = require('syracuse-notification/lib/socketHandler').getSocketHandler();
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var sessionManager = require('syracuse-session/lib/sessionManager').sessionManager;
var phoneFormat = require("./phoneFormat");
var IsicomConnector = require("./isi-com/ctiConnector").Connector;

var tracer = require('syracuse-core').getTracer("cti");

var slice = Array.prototype.slice;

function _f(err) {
	if (err) throw err;
}

function _ferr(err) {
	if (err) console.error(err);
}

function formatPhoneNumber(tel, opt) {
	opt = opt || {};
	opt.defaultCountryCallingCode = opt.defaultCountryCallingCode || 33;
	if (!/^00/.test(tel) && tel[0] === "0") {
		tel = tel.replace(/^0/, "00" + opt.defaultCountryCallingCode);
	}
	return tel.replace(/^00/, "+");
}

function countryForPhoneNumber(tel) {
	return tel && phoneFormat.countryForE164Number(tel);
}

var ctiServiceManager = exports.ctiServiceManager = new CtiServiceManager();

function CtiServiceManager() {
	var serviceMap = {};
	var userSocketsMap = {};

	var self = this;

	var debugEvent, dumpUserSocketMap;
	if (tracer.debug) {
		debugEvent = function(event) {
			tracer.debug && tracer.debug('CtiServiceManager ' + [event.ctiId + " Received : " + event.name + " : " + event.fields.join(", ")]);
		};
		dumpUserSocketMap = function() {
			Object.keys(userSocketsMap).forEach(function(k) {
				var s = userSocketsMap[k];
				tracer.debug && tracer.debug("userSocketsMap[" + k + "]=" + (s && s.map(function(e) {
					return e.id + ":{connected:" + e.connected + "} ";
				})));
			});
		};
	}

	function getUserInfo(socket) {
		return {
			userId: socket.$userId,
			ctiId: socket.$ctiId
		};
	}

	function setUserInfo(socket, userId, ctiId) {
		if (userId === undefined) {
			delete socket.$userId;
		} else {
			socket.$userId = userId;
		}
		if (ctiId === undefined) {
			delete socket.$ctiId;
		} else {
			socket.$ctiId = ctiId;
		}
	}

	function _getUser(ctiId, _) {
		var db = adminHelper.getCollaborationOrm(_);
		var e = db.getEntity(_, "user");
		var user = db.fetchInstance(_, e, {
			jsonWhere: {
				ctiId: ctiId,
				active: true
			}
		});
		return user;
	}

	function _getSession(handshake) {
		var hd = handshake.headers;
		return sessionManager.sessionByCookie(hd.cookie, hd.host && hd.host.split(':')[1]);
	}

	function _call(session, method) {
		if (session && session.cti && session.cti.client && typeof(session.cti.client[method]) == "function") {
			session.cti.client[method].apply(session.cti.client, slice.call(arguments, 2));
		}
	}

	function _pair(socket, session, userId) {
		tracer.debug && tracer.debug("pairing: socket=" + (socket && socket.id) + ", session=" + (session && session.id) + ", userId=" + userId);
		if (!session || !userId || !socket) return;

		// avoid duplicates
		var userSockets = userSocketsMap[userId] = (userSocketsMap[userId] || []).filter(function(s) {
			return s.id !== socket.id;
		});
		userSockets.push(socket);
		dumpUserSocketMap && dumpUserSocketMap();
	}

	this.countryForPhoneNumber = countryForPhoneNumber;

	this.setup = function() {
		var self = this;
		socketHandler.register("/sage-cti",

			// connect event
			function(socket, hd) {},

			// disconnect event
			function(socket, hd) {
				var userInfo = getUserInfo(socket);
				tracer.debug && tracer.debug("client disconnect: id=" + socket.id + ", userId=" + userInfo.userId);
				var userSockets = userSocketsMap[userInfo.userId] || [];
				if (userSockets.indexOf(socket) !== -1)
					userSockets.splice(userSockets.indexOf(socket), 1);
				dumpUserSocketMap && dumpUserSocketMap();
				// self.unregisterAgent(userInfo.ctiId);
				setUserInfo(socket);
			},

			// custom incomming events
			{
				pair: function(socket, handshake, data) {
					var userId = data.user.$uuid;
					tracer.debug && tracer.debug("[SOCKET.IO] " + socket.id + " <<< pair: userId=" + userId);
					if (!userId) return;
					var session = _getSession(handshake);
					_pair(socket, session, userId);


					if (session) {
						(function(_) {
							var user = session.getUserProfile(_).user(_);
							var ctiId = user.ctiId(_);
							if (ctiId) {
								tracer.debug && tracer.debug("Registering CTI client for " + user.login(_) + " with agent ID " + ctiId);
								self.registerAgent(ctiId);
								setUserInfo(socket, userId, ctiId);
								socket.$sessionId = session.id;
							} else {
								tracer.debug && tracer.debug("No CTI agent ID for " + user.login(_));
							}
						})(_f);
					}
				},
				callOut: function(socket, handshake, data) {
					tracer.debug && tracer.debug("[SOCKET.IO] " + socket.id + " <<< callOut: " + data.ctiId + ", " + data.tel);
					// socket.emit('callOut', data);
					self.callOut && self.callOut(data.ctiId, data.tel);
				},
				identification: function(socket, handshake, data) {
					tracer.debug && tracer.debug("[SOCKET.IO] " + socket.id + " <<< identification: " + JSON.stringify(data));
					self.identification && self.identification(data, data.lastName, data.firstName, data.companyName);
				},
			});
	};

	this.getCtiService = function(_) {
		var db = adminHelper.getCollaborationOrm(_);
		var setting = db.fetchInstance(_, db.model.getEntity(_, "setting"), {
			sdataWhere: ""
		});
		return setting.ctiService(_);
	};

	this.connect = function(_) {
		var s = this.getCtiService(_);
		if (!s) return;

		var connector = s.connector(_).toLowerCase();
		var ProviderClass = getProviderClass(connector);
		tracer.debug && tracer.debug("CtiServiceManager: connector=" + connector + ", provider=" + (ProviderClass && ProviderClass.name));
		if (!ProviderClass) return;
		var svc = serviceMap[s.$uuid];
		var connectionString = s.getConnectionString(_);
		tracer.debug && tracer.debug("CtiServiceManager: connectionString=" + connectionString);
		var uri = url.parse(connectionString);
		var opt = {
			defaultCountryCallingCode: s.defaultCountryCallingCode(_)
		};
		if (svc != null && uri.href !== svc.uri.href) {
			svc.close();
			svc = null;
		}
		if (svc == null || (svc.isAlive && !svc.isAlive())) {
			svc = serviceMap[s.$uuid] = startService(ProviderClass, self, uri, opt);
		}
	};

	this.listen = function(svc) {
		this.provider = svc;
		if (svc.listen) {
			// tracer.info && tracer.info("CtiServiceManager: listen to " + svc.uri.href);
			svc.listen();
		}
	};

	function _notifyIdentification(tel, session, cb) {
		globals.withContext(function() {
			(function(_) {
				var s = self.getCtiService(_);
				var itel = formatPhoneNumber(tel, {
					defaultCountryCallingCode: s.defaultCountryCallingCode(_)
				});
				var iso2 = countryForPhoneNumber(itel);
				var ident = s.getIdentification(_, itel, iso2);
				cb(ident);
			})(function(err) {
				if (err) {
					console.error(err.stack);
				}
			});
		}, {
			session: session
		})();
	}

	function _sendIdentification(_, event) {
		var user = _getUser(event.ctiId, _);
		var userSockets = user && userSocketsMap[user.$uuid];
		userSockets && userSockets.forEach(function(socket) {
			var session = socket.$sessionId && sessionManager.sessionById(socket.$sessionId);
			if (!session) {
				tracer.error && tracer.error("CtiServiceManager cannot send identification: No user session found " + socket.id + "/" + socket.$sessionId);
				dumpUserSocketMap && dumpUserSocketMap();
				return false;
			}
			tracer.debug && tracer.debug("CtiServiceManager sending identification: tel=" + event.tel + ", session=" + socket.id + "/" + socket.$sessionId);
			_notifyIdentification(event.tel, session, function(ident) {
				ident && self.identification(event, ident.lastName, ident.firstName, ident.companyName);
			});
			return true;
		});
	}

	this.sendIdentification = function(event) {
		_sendIdentification(_f, event);
	};

	this.notifyUser = function(user, event, data) {
		dumpUserSocketMap && dumpUserSocketMap();

		var userSockets = userSocketsMap[user];
		userSockets && userSockets.forEach(function(socket) {
			tracer.debug && tracer.debug("notifying: user=" + user + ", event=" + event + ", socket=" + (socket && socket.id) + ", data=" + JSON.stringify(data));
			socket && socket.emit(event, data);
		});
	};

	this.registerCallOutCallback = function(cb) {
		this.callOut = cb;
	};

	this.isProviderAlive = function() {
		return this.provider && this.provider.isAlive && this.provider.isAlive();
	};

	this.registerAgent = function(agentNum) {
		return this.provider && this.provider.registerAgent && this.provider.registerAgent(agentNum);
	};

	this.unregisterAgent = function(agentNum) {
		return this.provider && this.provider.unregisterAgent && this.provider.unregisterAgent(agentNum);
	};

	this.identification = function(event, lastName, firstName, companyName) {
		return this.provider && this.provider.identification && this.provider.identification(event, lastName, firstName, companyName);
	};

	this.showData = function(ctiId, tel) {
		this.provider && this.provider.showData && this.provider.showData(ctiId, tel);
	};

	this.makeCall = function(ctiId, tel) {
		this.provider && this.provider.makeCall && this.provider.makeCall(ctiId, tel);
	};
}

function getProviderClass(name) {
	var providers = {
		"isi-com": IsiComClient,
		// "asterisk:" : AsteriskClient
	};
	if (name === "isi-com") {
		if (/^[WB]?\d+$/.test(process.argv[2])) {
			// do not create cti connection for non interactive nodes
			return null;
		}
	}
	return providers[name];
}

function startService(ProviderClass, manager, uri, opt) {
	tracer.debug && tracer.debug("startService: " + (ProviderClass && ProviderClass.name));
	var svc = new ProviderClass(manager, uri, opt);
	manager.listen(svc);
	return svc;
}

function CtiClient(manager, uri, opt) {
	this.uri = typeof(uri) === "string" ? url.parse(uri) : uri;
	this.manager = manager;
	this.options = opt || {};

	this.listen = function() {};
	this.close = function() {};

	this.classname = this.constructor && this.constructor.name || "CtiClient";

	this._updateOptions = function(_) {
		var s = manager.getCtiService(_);
		if (!s) return;

		this.options.defaultCountryCallingCode = s.defaultCountryCallingCode(_);
		return this.options;
	};

	this._notifyShowData = function(event, _) {
		if (!event.tel || event.tel.length < 8) {
			tracer.debug && tracer.debug(this.classname + ': skip short number ' + event.tel);
			return;
		}
		// 1. get user from ctiid
		var db = adminHelper.getCollaborationOrm(_);
		var e = db.getEntity(_, "user");
		// console.error("notifyShowData: entity=" + typeof(e));
		var user = db.fetchInstance(_, e, {
			jsonWhere: {
				ctiId: event.ctiId,
				active: true
			}
		});
		// console.error("notifyShowData: ctiID=" + event.ctiId + ", user=" + typeof(user));
		var login = user && user.login(_);
		if (!login)
			return {};

		var options = this._updateOptions(_);
		var data = {
			tel: formatPhoneNumber(event.tel, options),
			user: {
				$uuid: user.$uuid,
				login: login,
				fullName: user.firstName(_) + " " + user.lastName(_)
			}
		};
		data.countryIsoAlpha2 = countryForPhoneNumber(data.tel);
		tracer.debug && tracer.debug(this.classname + ": showdata with data=" + JSON.stringify(data));
		// 2. emit callIn on user socket
		manager.notifyUser(data.user.$uuid, "callIn", data);
	};

}

function IsiComClient(manager, uri) {
	CtiClient.apply(this, arguments);
	var self = this;
	var isicom;
	var callIn, callOut;

	function notifyShowData(event) {
		self._notifyShowData(event, _f);
	}

	function _makeCall(ctiId, tel) {
		// France code by default. It would be better to guess the code depending on the current region
		self._updateOptions(function(err, options) {
			if (err) throw err;
			var def = options.defaultCountryCallingCode || 33;
			var re = new RegExp("^\\+" + def);
			isicom && isicom.makeCall(ctiId, tel.replace(re, "0"));
		});
	}

	var debugEvent;
	if (tracer.debug) {
		debugEvent = function(event) {
			tracer.debug && tracer.debug('IsiComClient ' + [event.ctiId + " Received : " + event.name + " : " + event.fields.join(", ")]);
		};
	}

	this.listen = function() {
		isicom = new IsicomConnector();
		tracer.info && tracer.info("IsiComClient: connecting to " + this.uri.href);
		isicom.connect({
			hostname: this.uri.hostname,
			port: this.uri.port
		}, function(opcodeStr, fields) {
			var event = {
				name: opcodeStr,
				ctiId: fields[0], // agent number
				comId: fields[1], // communication ID
				tel: fields[2], // phone number
				fields: fields
			};
			switch (opcodeStr) {
				case "IdentificationAsked":
					debugEvent && debugEvent(event);
					manager.sendIdentification(event);
					break;
				case "ManuallyShowData":
					debugEvent && debugEvent(event);
					notifyShowData(event);
					break;
				case "CstaAlerting":
					debugEvent && debugEvent(event);
					callIn = event.comId;
					break;
				case "CstaDelivered":
					debugEvent && debugEvent(event);
					callOut = event.comId;
					break;
				case "CstaEstablished":
					debugEvent && debugEvent(event);
					// Notification on call in after establishing
					if (event.comId === callIn) {
						callIn = null;
						notifyShowData(event);
					}
					// Notification on call out after establishing
					if (event.comId === callOut) {
						callOut = null;
						notifyShowData(event);
					}
					break;
				case "CstaTransfered":
					debugEvent && debugEvent(event);
					notifyShowData(event);
					break;
			}
		});
		manager.registerCallOutCallback(_makeCall);
		// isicom.makeCall("102", "0450193530");
		// isicom.sendIdentification("102", "57", "S1", "S2", "S3");
	};

	this.isAlive = function() {
		return isicom && isicom.isAlive();
	};

	this.showData = function(ctiId, tel) {
		notifyShowData([ctiId, "", tel]);
	};

	this.identification = function(event, lastName, firstName, companyName) {
		isicom && isicom.sendIdentification(event.ctiId, event.comId, lastName, firstName, companyName);
	};

	this.registerAgent = function(agentID) {
		isicom && isicom.registerAgent(agentID);
	};

	this.unregisterAgent = function(agentID) {
		isicom && isicom.unregisterAgent(agentID);
	};

	this.makeCall = _makeCall;
}