"use strict";
var url = require('url');
var ez = require('ez-streams');
var globals = require('streamline/lib/globals');
var helpers = require('@sage/syracuse-core').helpers;
var socketHandler = require('syracuse-notification/lib/socketHandler').getSocketHandler();
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var sessionManager = require('syracuse-session/lib/sessionManager').sessionManager;
var jsurl = require("jsurl");
var phoneFormat = require("./phoneFormat");
var IsicomConnector = require("./isi-com/ctiConnector").Connector;

var tracer = require('@sage/syracuse-core').getTracer("cti");

function _f(err, res) {
	if (err) throw err;
}

function formatPhoneNumber(tel, opt) {
	opt = opt || {};
	opt.defaultCountryCallingCode = opt.defaultCountryCallingCode || 33;
	if (!/^00/.test(tel) && tel[0] === "0") {
		tel = tel.replace(/^0/, "00" + opt.defaultCountryCallingCode);
	}
	return tel.replace(/^00/, "+");
}

function countryForPhoneNumber(tel) {
	return tel && phoneFormat.countryForE164Number(tel);
}

var ctiServiceManager = exports.ctiServiceManager = new CtiServiceManager();

function CtiServiceManager() {
	var serviceMap = {};
	var userSocketsMap = {};

	var self = this;

	function dumpUserSocketMap() {
		if (tracer.debug) {
			Object.keys(userSocketsMap).forEach(function(k) {
				var s = userSocketsMap[k];
				tracer.debug("userSocketsMap[" + k + "]=" + (s && s.map(function(e) {
					return e.id;
				})));
			});
		}
	}

	function getUserId(socket) {
		return socket.$userId;
	}

	function setUserId(socket, userId) {
		if (userId === undefined) {
			delete socket.$userId;
		} else {
			socket.$userId = userId;
		}
	}

	function _getUser(ctiId, _) {
		var db = adminHelper.getCollaborationOrm(_);
		var e = db.getEntity(_, "user");
		var user = db.fetchInstance(_, e, {
			jsonWhere: {
				ctiId: ctiId,
				active: true
			}
		});
		return user;
	}

	this.countryForPhoneNumber = countryForPhoneNumber;

	this.setup = function() {
		var self = this;
		socketHandler.register("/sage-cti",

			// connect event
			function(socket, hd) {},

			// disconnect event
			function(socket, hd) {
				var userId = getUserId(socket);
				tracer.debug && tracer.debug("client disconnect: id=" + socket.id + ", userId=" + userId);
				var userSockets = userSocketsMap[userId] || [];
				if (userSockets.indexOf(socket) !== -1)
					userSockets.splice(userSockets.indexOf(socket), 1);
				tracer.debug && dumpUserSocketMap();
				setUserId(socket);
			},

			// custom incomming events
			{
				pair: function(socket, handshake, data) {
					var userId = data.user.$uuid;
					tracer.debug && tracer.debug("[SOCKET.IO] <<< pair: userId=" + userId);
					if (!userId) return;
					setUserId(socket, userId);
					var userSockets = userSocketsMap[userId] || (userSocketsMap[userId] = []);
					if (userSockets.indexOf(socket) === -1)
						userSockets.push(socket);

					var hd = handshake.headers;
					var session = sessionManager.sessionByCookie(hd.cookie, hd.host && hd.host.split(':')[1]);
					socket.$sessionId = (session && session.id);
					tracer.debug && tracer.debug("[SOCKET.IO] <<< pair: session=" + (session && session.id));
					tracer.debug && dumpUserSocketMap();
				},
				callOut: function(socket, handshake, data) {
					tracer.debug && tracer.debug("[SOCKET.IO] <<< callOut: " + data.ctiId + ", " + data.tel);
					// socket.emit('callOut', data);
					self.callOut && self.callOut(data.ctiId, data.tel);
				},
				identification: function(socket, handshake, data) {
					tracer.debug && tracer.debug("[SOCKET.IO] <<< identification: " + JSON.stringify(data));
					self.identification && self.identification(data, data.lastName, data.firstName, data.companyName);
				}
			});
	};

	this.getCtiService = function(_) {
		var db = adminHelper.getCollaborationOrm(_);
		var setting = db.fetchInstance(_, db.model.getEntity(_, "setting"), {
			sdataWhere: ""
		});
		return setting.ctiService(_);
	};

	this.connect = function(_) {
		var s = this.getCtiService(_);
		if (!s) return;

		var connector = s.connector(_).toLowerCase();
		var ProviderClass = providers[connector];
		tracer.debug && tracer.debug("CtiServiceManager: connector=" + connector + ", provider=" + (ProviderClass && ProviderClass.name));
		if (!ProviderClass) return;
		var svc = serviceMap[s.$uuid];
		var connectionString = s.getConnectionString(_);
		tracer.debug && tracer.debug("CtiServiceManager: connectionString=" + connectionString);
		var uri = url.parse(connectionString);
		var opt = {
			defaultCountryCallingCode: s.defaultCountryCallingCode(_)
		};
		if (svc != null && uri.href !== svc.uri.href) {
			svc.close();
			svc = null;
		}
		if (svc == null || (svc.isAlive && !svc.isAlive())) {
			svc = serviceMap[s.$uuid] = new ProviderClass(self, connectionString, opt);
			this.provider = svc;
			if (svc.listen) {
				tracer.info && tracer.info("CtiServiceManager: listen to " + connectionString);
				svc.listen(!_);
			}
		}
	};

	function _notifyIdentification(tel, session, cb) {
		globals.withContext(function() {
			(function(_) {
				var s = self.getCtiService(_);
				var itel = formatPhoneNumber(tel, {
					defaultCountryCallingCode: s.defaultCountryCallingCode(_)
				});
				var iso2 = countryForPhoneNumber(itel);
				var ident = s.getIdentification(_, itel, iso2);
				cb(ident);
			})(function(err) {
				if (err) {
					console.error(err.stack);
				}
			});
		}, {
			session: session
		})();
	}

	function _sendIdentification(_, event) {
		var user = _getUser(event.ctiId, _);
		var userSockets = user && userSocketsMap[user.$uuid];
		var socket = userSockets && userSockets[0];
		if (socket) {
			var session = socket.$sessionId && sessionManager.sessionById(socket.$sessionId);
			if (!session) {
				tracer.error && tracer.error("CtiServiceManager cannot send identification: No user session found");
				return;
			}
			_notifyIdentification(event.tel, session, function(ident) {
				ident && self.identification(event, ident.lastName, ident.firstName, ident.companyName);
			});
		}
	}

	this.sendIdentification = function(event) {
		_sendIdentification(_f, event);
	};

	this.notifyUser = function(user, event, data) {
		tracer.debug && dumpUserSocketMap();

		var userSockets = userSocketsMap[user];
		var socket = userSockets && userSockets[0];
		tracer.debug && tracer.debug("notifying: user=" + user + ", event=" + event + ", socket=" + (socket && socket.id) + ", data=" + JSON.stringify(data));
		socket && socket.emit(event, data);
	};

	this.registerCallOutCallback = function(cb) {
		this.callOut = cb;
	};

	this.isProviderAlive = function() {
		return this.provider && this.provider.isAlive && this.provider.isAlive();
	};

	this.identification = function(event, lastName, firstName, companyName) {
		return this.provider && this.provider.identification && this.provider.identification(event, lastName, firstName, companyName);
	};

	this.showData = function(ctiId, tel) {
		this.provider && this.provider.showData && this.provider.showData(ctiId, tel);
	};

	this.makeCall = function(ctiId, tel) {
		this.provider && this.provider.makeCall && this.provider.makeCall(ctiId, tel);
	};
}


var providers = {
	"isi-com": IsiComClient,
	// "asterisk:" : AsteriskClient
};

function CtiClient(manager, uri, opt) {
	this.uri = url.parse(uri);
	this.manager = manager;
	this.options = opt || {};
}

helpers.defineClass(CtiClient, null, {
	listen: function(_) {},
	close: function() {},
});

function IsiComClient(manager, uri) {
	CtiClient.apply(this, arguments);
	var self = this;
	var isicom = new IsicomConnector();
	var callIn, callOut;

	function _updateOptions(_) {
		var s = manager.getCtiService(_);
		if (!s) return;

		self.options.defaultCountryCallingCode = s.defaultCountryCallingCode(_);
		return self.options;
	}

	function notifyShowData(event) {
		_notifyShowData(event, _f);
	}

	function _notifyShowData(event, _) {
		if (!event.tel || event.tel.length < 8) {
			tracer.debug && tracer.debug('IsiComClient: skip short number ' + event.tel);
			return;
		}
		// 1. get user from ctiid
		var db = adminHelper.getCollaborationOrm(_);
		var e = db.getEntity(_, "user");
		// console.error("notifyShowData: entity=" + typeof(e));
		var user = db.fetchInstance(_, e, {
			jsonWhere: {
				ctiId: event.ctiId,
				active: true
			}
		});
		// console.error("notifyShowData: ctiID=" + event.ctiId + ", user=" + typeof(user));
		var login = user && user.login(_);
		if (!login)
			return {};

		var options = _updateOptions(_);
		var data = {
			tel: formatPhoneNumber(event.tel, options),
			user: {
				$uuid: user.$uuid,
				login: login,
				fullName: user.firstName(_) + " " + user.lastName(_)
			}
		};
		data.countryIsoAlpha2 = countryForPhoneNumber(data.tel);
		tracer.debug && tracer.debug("IsiComClient showdata with data=" + JSON.stringify(data));
		// 2. emit callIn on user socket
		manager.notifyUser(data.user.$uuid, "callIn", data);
	}

	function _makeCall(ctiId, tel) {
		// France code by default. It would be better to guess the code depending on the current region
		_updateOptions(function(err, options) {
			if (err) throw err;
			var def = options.defaultCountryCallingCode || 33;
			var re = new RegExp("^\\+" + def);
			isicom.makeCall(ctiId, tel.replace(re, "0"));
		});
	}

	var debugEvent;
	if (tracer.debug) {
		debugEvent = function(event) {
			tracer.debug && tracer.debug('IsiComClient ' + [event.ctiId + " Received : " + event.name + " : " + event.fields.join(", ")]);
		}
	}

	tracer.info && tracer.info("IsiComClient: connecting to " + this.uri.href);
	isicom.connect({
		hostname: this.uri.hostname,
		port: this.uri.port
	}, function(opcodeStr, fields) {
		var event = {
			name: opcodeStr,
			ctiId: fields[0], // agent number
			comId: fields[1], // communication ID
			tel: fields[2], // phone number
			fields: fields
		};
		switch (opcodeStr) {
			case "IdentificationAsked":
				debugEvent && debugEvent(event);
				manager.sendIdentification(event);
				break;
			case "ManuallyShowData":
				debugEvent && debugEvent(event);
				notifyShowData(event);
				break;
			case "CstaAlerting":
				debugEvent && debugEvent(event);
				callIn = event.comId;
				break;
			case "CstaDelivered":
				debugEvent && debugEvent(event);
				callOut = event.comId;
				break;
			case "CstaEstablished":
				debugEvent && debugEvent(event);
				// Notification on call in after establishing
				if (event.comId === callIn) {
					callIn = null;
					notifyShowData(event);
				}
				// Notification on call out after establishing
				if (event.comId === callOut) {
					callOut = null;
					notifyShowData(event);
				}
				break;
			case "CstaTransfered":
				debugEvent && debugEvent(event);
				notifyShowData(event);
				break;
		}
	});
	isicom.registerAll();
	manager.registerCallOutCallback(_makeCall);
	// isicom.makeCall("102", "0450193530");
	// isicom.sendIdentification("102", "57", "S1", "S2", "S3");

	this.isAlive = function() {
		return isicom.isAlive();
	};

	this.showData = function(ctiId, tel) {
		notifyShowData([ctiId, "", tel]);
	};

	this.identification = function(event, lastName, firstName, companyName) {
		isicom.sendIdentification(event.ctiId, event.comId, lastName, firstName, companyName);
	};

	this.makeCall = _makeCall;
}