"use strict";
var url = require('url');
var ez = require('ez-streams');
var globals = require('streamline/lib/globals');
var helpers = require('syracuse-core').helpers;
var socketHandler = require('syracuse-notification/lib/socketHandler').getSocketHandler();
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var sessionManager = require('syracuse-session/lib/sessionManager').sessionManager;
var jsurl = require("jsurl");
var phoneFormat = require("./phoneFormat");
var IsicomConnector = require("./isi-com/ctiConnector").Connector;

// TODO: extend the trace system
var tracer = {
	info: console.error,
	warning: console.error,
	error: console.error,
	debug: console.error
};

function formatPhoneNumber(tel) {
	if (!/^00/.test(tel) && tel[0] === "0") {
		tel = tel.replace(/^0/, "0033");
	}
	return tel.replace(/^00/, "+");
}

function countryForPhoneNumber(tel) {
	return tel && phoneFormat.countryForE164Number(tel);
}

var ctiServiceManager = exports.ctiServiceManager = new CtiServiceManager();

function CtiServiceManager() {
	var serviceMap = {};
	var userSocketsMap = {};

	var self = this;

	function getUserId(socket) {
		var request = socket.request;
		var cookie = request.headers.cookie && helpers.http.parseCookie(request.headers.cookie);
		var userProfile = cookie["user.profile." + request.connection.localPort];
		console.error("[CTI] getUserId: userProfile=" + userProfile + ", request.connection.localPort=" + request.connection.localPort + ", request.headers.cookie=" + (cookie && Object.keys(cookie)));
		return (userProfile && jsurl.parse(userProfile) || {}).user;
	}

	this.setup = function() {
		// console.error("CtiServiceManager.setup");

		var self = this;
		socketHandler.register("/sage-cti",

			// connect event
			function(socket, hd) {
				// connect
				// var userId = getUserId(socket);
				// console.error("[CTI] client connect: id=" + socket.id + ", userId=" + userId);
				// if (!userId) return;
				// var userSockets = userSocketsMap[userId] = userSocketsMap[userId] || [];
				// if (userSockets.indexOf(socket) === -1)
				// 	userSockets.push(socket);

				// Object.keys(userSocketsMap).forEach(function(k) {
				// 	var s = userSocketsMap[k];
				// 	console.error("  [CTI] userSocketsMap[" + k + "]=" + (s && s.map(function(e) {
				// 		return e.id;
				// 	})));
				// });
				// console.error("");
			},

			// disconnect event
			function(socket, hd) {
				var userId = getUserId(socket);
				console.error("[CTI] client disconnect: id=" + socket.id + ", userId=" + userId);
				var userSockets = userSocketsMap[userId] || [];
				if (userSockets.indexOf(socket) !== -1)
					userSockets.splice(userSockets.indexOf(socket), 1);
				Object.keys(userSocketsMap).forEach(function(k) {
					var s = userSocketsMap[k];
					console.error("  [CTI] userSocketsMap[" + k + "]=" + (s && s.map(function(e) {
						return e.id;
					})));
				});
				console.error("");
			},

			// custom events
			{
				pair: function(socket, hd, data) {
					var userId = data.user.$uuid;
					tracer.debug && tracer.debug("[SOCKET.IO] pair: userId=" + userId);
					if (!userId) return;
					var userSockets = userSocketsMap[userId] = userSocketsMap[userId] || [];
					if (userSockets.indexOf(socket) === -1)
						userSockets.push(socket);

					Object.keys(userSocketsMap).forEach(function(k) {
						var s = userSocketsMap[k];
						console.error("  [CTI] userSocketsMap[" + k + "]=" + (s && s.map(function(e) {
							return e.id;
						})));
					});
					console.error("");
				},
				callOut: function(socket, hd, data) {
					tracer.debug && tracer.debug("[SOCKET.IO] callOut: ", data.ctiId, data.tel);
					// socket.emit('callOut', data);
					self.callOut && self.callOut(data.ctiId, data.tel);
				}
			});
	};

	this.connect = function(_) {
		var db = adminHelper.getCollaborationOrm(_);
		var setting = db.fetchInstance(_, db.model.getEntity(_, "setting"), {
			sdataWhere: ""
		});
		var s = setting.ctiService(_);
		if (!s) return;

		var connector = s.connector(_).toLowerCase();
		var ProviderClass = providers[connector];
		tracer.debug && tracer.debug("CtiServiceManager: connector=" + connector + ", provider=" + (ProviderClass && ProviderClass.name));
		if (!ProviderClass) return;
		var svc = serviceMap[s.$uuid];
		var connectionString = s.getConnectionString(_);
		tracer.debug && tracer.debug("CtiServiceManager: connectionString=" + connectionString);
		var uri = url.parse(connectionString);
		if (svc != null && uri.href !== svc.uri.href) {
			svc.close();
			svc = null;
		}
		// connectionString = "socket:localhost:8118";
		if (svc == null || !svc.isAlive()) {
			svc = serviceMap[s.$uuid] = new ProviderClass(self, connectionString);
			this.provider = svc;
			tracer.info && tracer.info("CtiServiceManager: connecting to " + connectionString);
			svc.listen && svc.listen(!_);
		}


		// var e = db.getEntity(_, "ctiService");
		// var services = db.fetchInstances(_, e, {});
		// // console.error("CtiServiceManager.connectAll");
		// services.forEach_(_, function(_, s) {
		// 	var connector = s.connector(_).toLowerCase();
		// 	var ProviderClass = providers[connector];
		// 	if (!ProviderClass) return;
		// 	var svc = serviceMap[s.$uuid];
		// 	var connectionString = s.getConnectionString(_);
		// 	var uri = url.parse(connectionString);
		// 	if (svc != null && uri.href !== svc.uri.href) {
		// 		svc.close();
		// 		svc = null;
		// 	}
		// 	// connectionString = "socket:localhost:8118";
		// 	if (svc == null || !svc.isAlive()) {
		// 		svc = serviceMap[s.$uuid] = new ProviderClass(self, connectionString);
		// 		console.error("CtiServiceManager: connecting to " + connectionString);
		// 		svc.listen(!_);
		// 	}
		// });
	};

	this.notifyUser = function(user, event, data) {
		console.error("[CTI] notifyUser...");
		Object.keys(userSocketsMap).forEach(function(k) {
			var s = userSocketsMap[k];
			console.error("  [CTI] userSocketsMap[" + k + "]=" + (s && s.map(function(e) {
				return e.id;
			})));
		});

		var userSockets = userSocketsMap[user];
		var socket = userSockets && userSockets[0];
		console.error("[CTI] notifyUser: user=" + user + ", event=" + event + ", socket=" + (socket && socket.id) + ", data=" + JSON.stringify(data));
		socket && socket.emit(event, data);
	};

	this.registerCallOutCallback = function(cb) {
		this.callOut = cb;
	};

	this.showData = function(ctiId, tel) {
		this.provider && this.provider.showData && this.provider.showData(ctiId, tel);
	};
}


var providers = {
	"isi-com": IsiComClient2,
	// "asterisk:" : AsteriskClient
};

function CtiClient(manager, uri) {
	this.uri = url.parse(uri);
	this.manager = manager;
}

helpers.defineClass(CtiClient, null, {
	listen: function(_) {},
	close: function() {},
});

function IsiComClient2(manager, uri) {
	CtiClient.apply(this, arguments);
	var self = this;
	var isicom = new IsicomConnector();
	var callIn, callOut;

	function notifyShowData(fields) {
		_notifyShowData(fields, function(err) {
			if (err) throw err;
		});
	}

	function _notifyShowData(fields, _) {
		if (!fields[2] || fields[2].length < 8) {
			tracer.debug && tracer.debug('*** IsiComClient: skip short number');
			return;
		}
		// 1. get user from ctiid
		var db = adminHelper.getCollaborationOrm(_);
		var e = db.getEntity(_, "user");
		console.error("notifyShowData: entity=" + typeof(e));
		var user = db.fetchInstance(_, e, {
			jsonWhere: {
				ctiId: fields[0],
				active: true
			}
		});
		console.error("notifyShowData: ctiID=" + fields[0] + ", user=" + typeof(user));
		var login = user && user.login(_);
		if (!login)
			return {};

		var data = {
			tel: formatPhoneNumber(fields[2]),
			user: {
				$uuid: user.$uuid,
				login: login,
				fullName: user.firstName(_) + " " + user.lastName(_)
			}
		};
		data.countryIsoAlpha2 = countryForPhoneNumber(data.tel);
		tracer.debug && tracer.debug("*** IsiComClient showdata with data=" + JSON.stringify(data));
		// 2. emit callIn on user socket
		manager.notifyUser(data.user.$uuid, "callIn", data);
	}

	isicom.connect({
		hostname: this.uri.hostname,
		port: this.uri.port
	}, function(opcodeStr, fields) {
		// console.error('IsiComClient - CTIServerDebug', [fields[0], "Received : " + opcodeStr + " : " + fields.join(", ")]);
		switch (opcodeStr) {
			case "IdentificationAsked":
				// field[0]: agent number
				// field[1]: communication ID
				// field[2]: phone number
				tracer.debug && tracer.debug('*** IsiComClient', [fields[0], "Received : " + opcodeStr + " : " + fields.join(", ")]);
				isicom.sendIdentification(fields[0], fields[1], "nom", "prenom", "société");
				break;
			case "ManuallyShowData":
				tracer.debug && tracer.debug('*** IsiComClient', [fields[0], "Received : " + opcodeStr + " : " + fields.join(", ")]);
				notifyShowData(fields);
				break;
			case "CstaAlerting":
				tracer.debug && tracer.debug('*** IsiComClient', [fields[0], "Received : " + opcodeStr + " : " + fields.join(", ")]);
				callIn = fields[1];
				break;
			case "CstaDelivered":
				tracer.debug && tracer.debug('*** IsiComClient', [fields[0], "Received : " + opcodeStr + " : " + fields.join(", ")]);
				callOut = fields[1];
				break;
			case "CstaEstablished":
				tracer.debug && tracer.debug('*** IsiComClient', [fields[0], "Received : " + opcodeStr + " : " + fields.join(", ")]);
				// Notification on call in after establishing
				if (fields[1] === callIn) {
					callIn = null;
					notifyShowData(fields);
				}
				// Notification on call out after establishing
				if (fields[1] === callOut) {
					callOut = null;
					notifyShowData(fields);
				}
				break;
			case "CstaTransfered":
				tracer.debug && tracer.debug('*** IsiComClient', [fields[0], "Received : " + opcodeStr + " : " + fields.join(", ")]);
				notifyShowData(fields);
				break;
		}
	});
	isicom.registerAll();
	manager.registerCallOutCallback(function(ctiId, tel) {
		// only for demo: todo remove replace
		isicom.makeCall(ctiId, tel.replace(/^\+33/, "0"));
	});
	// isicom.makeCall("201", "0247324831");
	// isicom.sendIdentification("201", "57", "S1", "S2", "S3");

	this.showData = function(ctiId, tel) {
		notifyShowData([ctiId, "", tel]);
	};
}

function IsiComClient(manager, uri) {
	CtiClient.apply(this, arguments);
	var self = this;
	var stream;

	function _isAlive() {
		return stream && !stream.closed;
	}

	function _ensureConnect(_) {
		if (!_isAlive()) {
			stream = ez.devices.net.tcpClient(self.uri.port, self.uri.hostname).connect(_);
			stream.setNoDelay(true);
		}
	}

	function _readEvent(_) {
		var seg = [],
			c;
		while ((c = stream.read(_, 1, false)) && c && c[0] !== 0) {
			seg.push(c[0]);
		}
		if (c == null) {
			throw new Error("Protocol error: End of stream - closed=" + stream.closed);
		}
		return new Buffer(seg);
	}

	Object.defineProperty(this, 'isAlive', {
		get: function() {
			return _isAlive();
		}
	});

	this.listen = function(_) {
		console.error("IsiComClient: listen to " + uri);
		_ensureConnect(_);
		var buf;
		while ((buf = _readEvent(_))) {
			console.error("IsiComClient: read=" + buf.toString());
			var event;
			try {
				event = JSON.parse(buf.toString());
			} catch (e) {}
			if (!event)
				continue;
			switch (event.name) {
				case "callIn":
					// 1. get user from ctiid
					var db = adminHelper.getCollaborationOrm(_);
					var e = db.getEntity(_, "user");
					var user = db.fetchInstance(_, e, {
						jsonWhere: {
							ctiId: event.data.ctiId,
							active: true
						}
					});
					var login = user && user.login(_);
					if (!login)
						continue;
					var data = event.data || {};
					data.user = {
						$uuid: user.$uuid,
						login: login,
						fullName: user.firstName(_) + " " + user.lastName(_)
					};
					data.countryIsoAlpha2 = phoneFormat.countryForE164Number(data.tel);
					console.error("IsiComClient call in event: data=" + JSON.stringify(data));
					// 2. emit callIn on user socket
					this.manager.notifyUser(data.user.$uuid, event.name, data);
					break;
			}
		}
		console.error("IsiComClient: read end");
	};

	this.close = function() {
		if (!_isAlive()) {
			stream = null;
			return;
		}
		stream.end();
		stream.destroy();
		stream = null;
	};
}

helpers.defineClass(IsiComClient, CtiClient, {});

// function AsterixSession(uri) {
// 	CtiClient.apply(this, arguments);
// };

// helpers.defineClass(AsterixSession, CtiClient, {
// 	connect: function(_) {}
// });