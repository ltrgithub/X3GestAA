/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['Client.js']) {
  _$jscoverage['Client.js'] = [];
  _$jscoverage['Client.js'][14] = 0;
  _$jscoverage['Client.js'][16] = 0;
  _$jscoverage['Client.js'][17] = 0;
  _$jscoverage['Client.js'][18] = 0;
  _$jscoverage['Client.js'][19] = 0;
  _$jscoverage['Client.js'][20] = 0;
  _$jscoverage['Client.js'][21] = 0;
  _$jscoverage['Client.js'][23] = 0;
  _$jscoverage['Client.js'][25] = 0;
  _$jscoverage['Client.js'][27] = 0;
  _$jscoverage['Client.js'][28] = 0;
  _$jscoverage['Client.js'][30] = 0;
  _$jscoverage['Client.js'][36] = 0;
  _$jscoverage['Client.js'][37] = 0;
  _$jscoverage['Client.js'][40] = 0;
  _$jscoverage['Client.js'][43] = 0;
  _$jscoverage['Client.js'][48] = 0;
  _$jscoverage['Client.js'][53] = 0;
  _$jscoverage['Client.js'][58] = 0;
  _$jscoverage['Client.js'][59] = 0;
  _$jscoverage['Client.js'][62] = 0;
  _$jscoverage['Client.js'][63] = 0;
  _$jscoverage['Client.js'][64] = 0;
  _$jscoverage['Client.js'][65] = 0;
  _$jscoverage['Client.js'][66] = 0;
  _$jscoverage['Client.js'][68] = 0;
  _$jscoverage['Client.js'][69] = 0;
  _$jscoverage['Client.js'][70] = 0;
  _$jscoverage['Client.js'][71] = 0;
  _$jscoverage['Client.js'][73] = 0;
  _$jscoverage['Client.js'][76] = 0;
  _$jscoverage['Client.js'][79] = 0;
  _$jscoverage['Client.js'][80] = 0;
  _$jscoverage['Client.js'][81] = 0;
  _$jscoverage['Client.js'][82] = 0;
  _$jscoverage['Client.js'][83] = 0;
  _$jscoverage['Client.js'][85] = 0;
  _$jscoverage['Client.js'][86] = 0;
  _$jscoverage['Client.js'][87] = 0;
  _$jscoverage['Client.js'][88] = 0;
  _$jscoverage['Client.js'][90] = 0;
  _$jscoverage['Client.js'][93] = 0;
  _$jscoverage['Client.js'][96] = 0;
  _$jscoverage['Client.js'][97] = 0;
  _$jscoverage['Client.js'][98] = 0;
  _$jscoverage['Client.js'][100] = 0;
  _$jscoverage['Client.js'][103] = 0;
  _$jscoverage['Client.js'][104] = 0;
  _$jscoverage['Client.js'][105] = 0;
  _$jscoverage['Client.js'][107] = 0;
  _$jscoverage['Client.js'][109] = 0;
  _$jscoverage['Client.js'][112] = 0;
  _$jscoverage['Client.js'][113] = 0;
  _$jscoverage['Client.js'][114] = 0;
  _$jscoverage['Client.js'][115] = 0;
  _$jscoverage['Client.js'][118] = 0;
  _$jscoverage['Client.js'][120] = 0;
  _$jscoverage['Client.js'][122] = 0;
  _$jscoverage['Client.js'][123] = 0;
  _$jscoverage['Client.js'][127] = 0;
  _$jscoverage['Client.js'][131] = 0;
  _$jscoverage['Client.js'][134] = 0;
  _$jscoverage['Client.js'][136] = 0;
  _$jscoverage['Client.js'][137] = 0;
  _$jscoverage['Client.js'][139] = 0;
  _$jscoverage['Client.js'][142] = 0;
  _$jscoverage['Client.js'][143] = 0;
  _$jscoverage['Client.js'][146] = 0;
  _$jscoverage['Client.js'][148] = 0;
  _$jscoverage['Client.js'][149] = 0;
  _$jscoverage['Client.js'][150] = 0;
  _$jscoverage['Client.js'][152] = 0;
  _$jscoverage['Client.js'][153] = 0;
  _$jscoverage['Client.js'][157] = 0;
  _$jscoverage['Client.js'][158] = 0;
  _$jscoverage['Client.js'][159] = 0;
  _$jscoverage['Client.js'][161] = 0;
  _$jscoverage['Client.js'][164] = 0;
  _$jscoverage['Client.js'][165] = 0;
  _$jscoverage['Client.js'][166] = 0;
  _$jscoverage['Client.js'][167] = 0;
  _$jscoverage['Client.js'][168] = 0;
  _$jscoverage['Client.js'][169] = 0;
  _$jscoverage['Client.js'][170] = 0;
  _$jscoverage['Client.js'][171] = 0;
  _$jscoverage['Client.js'][173] = 0;
  _$jscoverage['Client.js'][174] = 0;
  _$jscoverage['Client.js'][175] = 0;
  _$jscoverage['Client.js'][176] = 0;
  _$jscoverage['Client.js'][177] = 0;
  _$jscoverage['Client.js'][178] = 0;
  _$jscoverage['Client.js'][182] = 0;
  _$jscoverage['Client.js'][185] = 0;
  _$jscoverage['Client.js'][186] = 0;
  _$jscoverage['Client.js'][188] = 0;
  _$jscoverage['Client.js'][189] = 0;
  _$jscoverage['Client.js'][190] = 0;
  _$jscoverage['Client.js'][192] = 0;
  _$jscoverage['Client.js'][193] = 0;
  _$jscoverage['Client.js'][196] = 0;
  _$jscoverage['Client.js'][197] = 0;
  _$jscoverage['Client.js'][200] = 0;
  _$jscoverage['Client.js'][201] = 0;
  _$jscoverage['Client.js'][203] = 0;
  _$jscoverage['Client.js'][205] = 0;
  _$jscoverage['Client.js'][206] = 0;
  _$jscoverage['Client.js'][207] = 0;
  _$jscoverage['Client.js'][208] = 0;
  _$jscoverage['Client.js'][211] = 0;
  _$jscoverage['Client.js'][212] = 0;
  _$jscoverage['Client.js'][215] = 0;
  _$jscoverage['Client.js'][216] = 0;
  _$jscoverage['Client.js'][217] = 0;
  _$jscoverage['Client.js'][219] = 0;
  _$jscoverage['Client.js'][222] = 0;
  _$jscoverage['Client.js'][223] = 0;
  _$jscoverage['Client.js'][226] = 0;
  _$jscoverage['Client.js'][227] = 0;
  _$jscoverage['Client.js'][230] = 0;
  _$jscoverage['Client.js'][231] = 0;
  _$jscoverage['Client.js'][234] = 0;
  _$jscoverage['Client.js'][235] = 0;
  _$jscoverage['Client.js'][238] = 0;
  _$jscoverage['Client.js'][239] = 0;
  _$jscoverage['Client.js'][242] = 0;
  _$jscoverage['Client.js'][243] = 0;
  _$jscoverage['Client.js'][246] = 0;
  _$jscoverage['Client.js'][247] = 0;
  _$jscoverage['Client.js'][249] = 0;
  _$jscoverage['Client.js'][250] = 0;
  _$jscoverage['Client.js'][251] = 0;
  _$jscoverage['Client.js'][254] = 0;
  _$jscoverage['Client.js'][255] = 0;
  _$jscoverage['Client.js'][257] = 0;
  _$jscoverage['Client.js'][259] = 0;
  _$jscoverage['Client.js'][260] = 0;
  _$jscoverage['Client.js'][261] = 0;
  _$jscoverage['Client.js'][262] = 0;
  _$jscoverage['Client.js'][263] = 0;
  _$jscoverage['Client.js'][266] = 0;
  _$jscoverage['Client.js'][269] = 0;
  _$jscoverage['Client.js'][270] = 0;
  _$jscoverage['Client.js'][273] = 0;
  _$jscoverage['Client.js'][275] = 0;
  _$jscoverage['Client.js'][276] = 0;
  _$jscoverage['Client.js'][277] = 0;
  _$jscoverage['Client.js'][278] = 0;
  _$jscoverage['Client.js'][279] = 0;
  _$jscoverage['Client.js'][281] = 0;
  _$jscoverage['Client.js'][282] = 0;
  _$jscoverage['Client.js'][283] = 0;
  _$jscoverage['Client.js'][285] = 0;
  _$jscoverage['Client.js'][288] = 0;
  _$jscoverage['Client.js'][290] = 0;
  _$jscoverage['Client.js'][291] = 0;
  _$jscoverage['Client.js'][293] = 0;
}
_$jscoverage['Client.js'][14]++;
"use strict";
_$jscoverage['Client.js'][16]++;
var util = require("./util");
_$jscoverage['Client.js'][17]++;
var EventEmitter = require("events").EventEmitter;
_$jscoverage['Client.js'][18]++;
var protocol = require("./protocol");
_$jscoverage['Client.js'][19]++;
var Connection = protocol.Connection;
_$jscoverage['Client.js'][20]++;
var Result = protocol.Result;
_$jscoverage['Client.js'][21]++;
var Statement = protocol.Statement;
_$jscoverage['Client.js'][23]++;
module.exports = Client;
_$jscoverage['Client.js'][25]++;
util.inherits(Client, EventEmitter);
_$jscoverage['Client.js'][27]++;
function Client(options) {
  _$jscoverage['Client.js'][28]++;
  EventEmitter.call(this);
  _$jscoverage['Client.js'][30]++;
  this._settings = util.extend({fetchSize: 1024, holdCursorsOverCommit: true, scrollableCursor: true, autoReconnect: false}, options);
  _$jscoverage['Client.js'][36]++;
  this._connection = this._createConnection(this._settings);
  _$jscoverage['Client.js'][37]++;
  this._addListeners(this._connection);
}
_$jscoverage['Client.js'][40]++;
Object.defineProperties(Client.prototype, {connectOptions: {get: (function getConnectOptions() {
  _$jscoverage['Client.js'][43]++;
  return this._connection.connectOptions;
})}, clientId: {get: (function getClientId() {
  _$jscoverage['Client.js'][48]++;
  return this._connection.clientId;
})}, readyState: {get: (function getreadyState() {
  _$jscoverage['Client.js'][53]++;
  return this._connection.readyState;
})}});
_$jscoverage['Client.js'][58]++;
Client.prototype.setAutoCommit = (function setAutoCommit(autoCommit) {
  _$jscoverage['Client.js'][59]++;
  this._connection.autoCommit = autoCommit;
});
_$jscoverage['Client.js'][62]++;
Client.prototype.commit = (function commit(cb) {
  _$jscoverage['Client.js'][63]++;
  function done(err, reply) {
    _$jscoverage['Client.js'][64]++;
    if (util.isFunction(cb)) {
      _$jscoverage['Client.js'][65]++;
      if (err) {
        _$jscoverage['Client.js'][66]++;
        return cb(err);
      }
      _$jscoverage['Client.js'][68]++;
      if (! reply.transactionFlags.committed) {
        _$jscoverage['Client.js'][69]++;
        err = new Error("Commit has not been confirmed by the server");
        _$jscoverage['Client.js'][70]++;
        err.code = "EHDBCOMMIT";
        _$jscoverage['Client.js'][71]++;
        return cb(err);
      }
      _$jscoverage['Client.js'][73]++;
      cb(null);
    }
}
  _$jscoverage['Client.js'][76]++;
  this._connection.commit(done);
});
_$jscoverage['Client.js'][79]++;
Client.prototype.rollback = (function rollback(cb) {
  _$jscoverage['Client.js'][80]++;
  function done(err, reply) {
    _$jscoverage['Client.js'][81]++;
    if (util.isFunction(cb)) {
      _$jscoverage['Client.js'][82]++;
      if (err) {
        _$jscoverage['Client.js'][83]++;
        return cb(err);
      }
      _$jscoverage['Client.js'][85]++;
      if (! reply.transactionFlags.rolledBack) {
        _$jscoverage['Client.js'][86]++;
        err = new Error("Rollback has not been confirmed by the server");
        _$jscoverage['Client.js'][87]++;
        err.code = "EHDBROLLBACK";
        _$jscoverage['Client.js'][88]++;
        return cb(err);
      }
      _$jscoverage['Client.js'][90]++;
      cb(null);
    }
}
  _$jscoverage['Client.js'][93]++;
  this._connection.rollback(done);
});
_$jscoverage['Client.js'][96]++;
Client.prototype.get = (function (key) {
  _$jscoverage['Client.js'][97]++;
  if (util.isUndefined(key)) {
    _$jscoverage['Client.js'][98]++;
    return this._settings;
  }
  _$jscoverage['Client.js'][100]++;
  return this._settings[key];
});
_$jscoverage['Client.js'][103]++;
Client.prototype.set = (function (key, value) {
  _$jscoverage['Client.js'][104]++;
  if (! value && util.isObject(key)) {
    _$jscoverage['Client.js'][105]++;
    this._settings = util.extend(this._settings, key);
  }
  else {
    _$jscoverage['Client.js'][107]++;
    this._settings[key] = value;
  }
  _$jscoverage['Client.js'][109]++;
  return this;
});
_$jscoverage['Client.js'][112]++;
Client.prototype.connect = (function connect(options, cb) {
  _$jscoverage['Client.js'][113]++;
  if (util.isFunction(options)) {
    _$jscoverage['Client.js'][114]++;
    cb = options;
    _$jscoverage['Client.js'][115]++;
    options = {};
  }
  _$jscoverage['Client.js'][118]++;
  var settings = this._settings;
  _$jscoverage['Client.js'][120]++;
  function addOption(name) {
    _$jscoverage['Client.js'][122]++;
    if (name in settings) {
      _$jscoverage['Client.js'][123]++;
      this[name] = settings[name];
    }
}
  _$jscoverage['Client.js'][127]++;
  var openOptions = {host: settings.host, port: settings.port};
  _$jscoverage['Client.js'][131]++;
  ["pfx", "key", "cert", "ca", "passphrase", "rejectUnauthorized", "secureProtocol"].forEach(addOption, openOptions);
  _$jscoverage['Client.js'][134]++;
  util.extend(openOptions, options);
  _$jscoverage['Client.js'][136]++;
  var connectOptions = {};
  _$jscoverage['Client.js'][137]++;
  ["user", "password", "assertion", "sessionCookie"].forEach(addOption, connectOptions);
  _$jscoverage['Client.js'][139]++;
  util.extend(connectOptions, options);
  _$jscoverage['Client.js'][142]++;
  if (this._settings.assertion) {
    _$jscoverage['Client.js'][143]++;
    this._settings.assertion = undefined;
  }
  _$jscoverage['Client.js'][146]++;
  var self = this;
  _$jscoverage['Client.js'][148]++;
  function done(err) {
    _$jscoverage['Client.js'][149]++;
    if (! err) {
      _$jscoverage['Client.js'][150]++;
      self.emit("connect");
    }
    _$jscoverage['Client.js'][152]++;
    if (util.isFunction(cb)) {
      _$jscoverage['Client.js'][153]++;
      cb(err);
    }
}
  _$jscoverage['Client.js'][157]++;
  function onopen(err) {
    _$jscoverage['Client.js'][158]++;
    if (err) {
      _$jscoverage['Client.js'][159]++;
      return done(err);
    }
    _$jscoverage['Client.js'][161]++;
    self._connection.connect(connectOptions, done);
}
  _$jscoverage['Client.js'][164]++;
  if (this._connection.readyState === "new") {
    _$jscoverage['Client.js'][165]++;
    this._connection.open(openOptions, onopen);
  }
  else {
    _$jscoverage['Client.js'][166]++;
    if (this._connection.readyState === "closed") {
      _$jscoverage['Client.js'][167]++;
      this._connection = this._createConnection(this._settings);
      _$jscoverage['Client.js'][168]++;
      this._addListeners(this._connection);
      _$jscoverage['Client.js'][169]++;
      this._connection.open(openOptions, onopen);
    }
    else {
      _$jscoverage['Client.js'][170]++;
      if (this._connection.readyState === "disconnected") {
        _$jscoverage['Client.js'][171]++;
        this._connection.connect(connectOptions, done);
      }
      else {
        _$jscoverage['Client.js'][173]++;
        if (util.isFunction(cb)) {
          _$jscoverage['Client.js'][174]++;
          util.setImmediate((function deferError() {
  _$jscoverage['Client.js'][175]++;
  var msg = util.format("Cannot connect in state \"%s\"", self.readyState);
  _$jscoverage['Client.js'][176]++;
  var err = new Error(msg);
  _$jscoverage['Client.js'][177]++;
  err.code = "EHDBCONNECT";
  _$jscoverage['Client.js'][178]++;
  cb(err);
}));
        }
      }
    }
  }
  _$jscoverage['Client.js'][182]++;
  return this;
});
_$jscoverage['Client.js'][185]++;
Client.prototype.disconnect = (function disconnect(cb) {
  _$jscoverage['Client.js'][186]++;
  var self = this;
  _$jscoverage['Client.js'][188]++;
  function done(err) {
    _$jscoverage['Client.js'][189]++;
    if (! err) {
      _$jscoverage['Client.js'][190]++;
      self.emit("disconnect");
    }
    _$jscoverage['Client.js'][192]++;
    if (util.isFunction(cb)) {
      _$jscoverage['Client.js'][193]++;
      cb(err);
    }
}
  _$jscoverage['Client.js'][196]++;
  this._connection.disconnect(done);
  _$jscoverage['Client.js'][197]++;
  return this;
});
_$jscoverage['Client.js'][200]++;
Client.prototype.close = (function close() {
  _$jscoverage['Client.js'][201]++;
  this._connection.close();
});
_$jscoverage['Client.js'][203]++;
Client.prototype.end = Client.prototype.close;
_$jscoverage['Client.js'][205]++;
Client.prototype.prepare = (function prepare(command, cb) {
  _$jscoverage['Client.js'][206]++;
  var options;
  _$jscoverage['Client.js'][207]++;
  if (util.isString(command)) {
    _$jscoverage['Client.js'][208]++;
    options = {command: command};
  }
  else {
    _$jscoverage['Client.js'][211]++;
    if (util.isObject(command)) {
      _$jscoverage['Client.js'][212]++;
      options = command;
    }
  }
  _$jscoverage['Client.js'][215]++;
  var statement = new Statement(this._connection);
  _$jscoverage['Client.js'][216]++;
  this._connection.prepare(options, (function onreply(err, reply) {
  _$jscoverage['Client.js'][217]++;
  statement.handle(err, reply, cb);
}));
  _$jscoverage['Client.js'][219]++;
  return this;
});
_$jscoverage['Client.js'][222]++;
Client.prototype.destroy = (function destroy(err) {
  _$jscoverage['Client.js'][223]++;
  this._connection.destroy(err);
});
_$jscoverage['Client.js'][226]++;
Client.prototype.exec = (function exec(command, options, cb) {
  _$jscoverage['Client.js'][227]++;
  var defaults = {autoFetch: true};
  _$jscoverage['Client.js'][230]++;
  executeDirect.call(this, defaults, command, options, cb);
  _$jscoverage['Client.js'][231]++;
  return this;
});
_$jscoverage['Client.js'][234]++;
Client.prototype.execute = (function execute(command, options, cb) {
  _$jscoverage['Client.js'][235]++;
  var defaults = {autoFetch: false};
  _$jscoverage['Client.js'][238]++;
  executeDirect.call(this, defaults, command, options, cb);
  _$jscoverage['Client.js'][239]++;
  return this;
});
_$jscoverage['Client.js'][242]++;
Client.prototype._createConnection = (function _createConnection(settings) {
  _$jscoverage['Client.js'][243]++;
  return new Connection(settings);
});
_$jscoverage['Client.js'][246]++;
Client.prototype._addListeners = (function _addListeners(connection) {
  _$jscoverage['Client.js'][247]++;
  var self = this;
  _$jscoverage['Client.js'][249]++;
  function cleanup() {
    _$jscoverage['Client.js'][250]++;
    connection.removeListener("error", onerror);
    _$jscoverage['Client.js'][251]++;
    connection.removeListener("close", onclose);
}
  _$jscoverage['Client.js'][254]++;
  function onerror(err) {
    _$jscoverage['Client.js'][255]++;
    self.emit("error", err);
}
  _$jscoverage['Client.js'][257]++;
  connection.on("error", onerror);
  _$jscoverage['Client.js'][259]++;
  function onclose(hadError) {
    _$jscoverage['Client.js'][260]++;
    cleanup();
    _$jscoverage['Client.js'][261]++;
    self.emit("close", hadError);
    _$jscoverage['Client.js'][262]++;
    if (hadError && self.get("autoReconnect")) {
      _$jscoverage['Client.js'][263]++;
      self.connect();
    }
}
  _$jscoverage['Client.js'][266]++;
  connection.on("close", onclose);
});
_$jscoverage['Client.js'][269]++;
Client.prototype._createResult = (function _createResult(connection, options) {
  _$jscoverage['Client.js'][270]++;
  return new Result(connection, options);
});
_$jscoverage['Client.js'][273]++;
function executeDirect(defaults, command, options, cb) {
  _$jscoverage['Client.js'][275]++;
  if (util.isFunction(options)) {
    _$jscoverage['Client.js'][276]++;
    cb = options;
    _$jscoverage['Client.js'][277]++;
    options = defaults;
  }
  else {
    _$jscoverage['Client.js'][278]++;
    if (util.isObject(options)) {
      _$jscoverage['Client.js'][279]++;
      options = util.extend(defaults, options);
    }
    else {
      _$jscoverage['Client.js'][281]++;
      var autoFetch = ! ! options;
      _$jscoverage['Client.js'][282]++;
      options = defaults;
      _$jscoverage['Client.js'][283]++;
      options.autoFetch = autoFetch;
    }
  }
  _$jscoverage['Client.js'][285]++;
  var executeOptions = {command: command};
  _$jscoverage['Client.js'][288]++;
  var result = this._createResult(this._connection, options);
  _$jscoverage['Client.js'][290]++;
  function onreply(err, reply) {
    _$jscoverage['Client.js'][291]++;
    result.handle(err, reply, cb);
}
  _$jscoverage['Client.js'][293]++;
  this._connection.executeDirect(executeOptions, onreply);
}
_$jscoverage['Client.js'].source = ["// Copyright 2013 SAP AG.","//","// Licensed under the Apache License, Version 2.0 (the \"License\");","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","// http: //www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing,","// software distributed under the License is distributed on an","// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,","// either express or implied. See the License for the specific","// language governing permissions and limitations under the License.","'use strict';","","var util = require('./util');","var EventEmitter = require('events').EventEmitter;","var protocol = require('./protocol');","var Connection = protocol.Connection;","var Result = protocol.Result;","var Statement = protocol.Statement;","","module.exports = Client;","","util.inherits(Client, EventEmitter);","","function Client(options) {","  EventEmitter.call(this);","","  this._settings = util.extend({","    fetchSize: 1024,","    holdCursorsOverCommit: true,","    scrollableCursor: true,","    autoReconnect: false","  }, options);","  this._connection = this._createConnection(this._settings);","  this._addListeners(this._connection);","}","","Object.defineProperties(Client.prototype, {","  connectOptions: {","    get: function getConnectOptions() {","      return this._connection.connectOptions;","    }","  },","  clientId: {","    get: function getClientId() {","      return this._connection.clientId;","    }","  },","  readyState: {","    get: function getreadyState() {","      return this._connection.readyState;","    }","  }","});","","Client.prototype.setAutoCommit = function setAutoCommit(autoCommit) {","  this._connection.autoCommit = autoCommit;","};","","Client.prototype.commit = function commit(cb) {","  function done(err, reply) {","    if (util.isFunction(cb)) {","      if (err) {","        return cb(err);","      }","      if (!reply.transactionFlags.committed) {","        err = new Error('Commit has not been confirmed by the server');","        err.code = 'EHDBCOMMIT';","        return cb(err);","      }","      cb(null);","    }","  }","  this._connection.commit(done);","};","","Client.prototype.rollback = function rollback(cb) {","  function done(err, reply) {","    if (util.isFunction(cb)) {","      if (err) {","        return cb(err);","      }","      if (!reply.transactionFlags.rolledBack) {","        err = new Error('Rollback has not been confirmed by the server');","        err.code = 'EHDBROLLBACK';","        return cb(err);","      }","      cb(null);","    }","  }","  this._connection.rollback(done);","};","","Client.prototype.get = function (key) {","  if (util.isUndefined(key)) {","    return this._settings;","  }","  return this._settings[key];","};","","Client.prototype.set = function (key, value) {","  if (!value &amp;&amp; util.isObject(key)) {","    this._settings = util.extend(this._settings, key);","  } else {","    this._settings[key] = value;","  }","  return this;","};","","Client.prototype.connect = function connect(options, cb) {","  if (util.isFunction(options)) {","    cb = options;","    options = {};","  }","","  var settings = this._settings;","","  function addOption(name) {","    /* jshint validthis:true */","    if (name in settings) {","      this[name] = settings[name];","    }","  }","","  var openOptions = {","    host: settings.host,","    port: settings.port","  };","  ['pfx', 'key', 'cert', 'ca', 'passphrase', 'rejectUnauthorized',","    'secureProtocol'","  ].forEach(addOption, openOptions);","  util.extend(openOptions, options);","","  var connectOptions = {};","  ['user', 'password', 'assertion', 'sessionCookie'].forEach(addOption,","    connectOptions);","  util.extend(connectOptions, options);","","  // SAML assertion can only be used once","  if (this._settings.assertion) {","    this._settings.assertion = undefined;","  }","","  var self = this;","","  function done(err) {","    if (!err) {","      self.emit('connect');","    }","    if (util.isFunction(cb)) {","      cb(err);","    }","  }","","  function onopen(err) {","    if (err) {","      return done(err);","    }","    self._connection.connect(connectOptions, done);","  }","","  if (this._connection.readyState === 'new') {","    this._connection.open(openOptions, onopen);","  } else if (this._connection.readyState === 'closed') {","    this._connection = this._createConnection(this._settings);","    this._addListeners(this._connection);","    this._connection.open(openOptions, onopen);","  } else if (this._connection.readyState === 'disconnected') {","    this._connection.connect(connectOptions, done);","  } else {","    if (util.isFunction(cb)) {","      util.setImmediate(function deferError() {","        var msg = util.format('Cannot connect in state \"%s\"', self.readyState);","        var err = new Error(msg);","        err.code = 'EHDBCONNECT';","        cb(err);","      });","    }","  }","  return this;","};","","Client.prototype.disconnect = function disconnect(cb) {","  var self = this;","","  function done(err) {","    if (!err) {","      self.emit('disconnect');","    }","    if (util.isFunction(cb)) {","      cb(err);","    }","  }","  this._connection.disconnect(done);","  return this;","};","","Client.prototype.close = function close() {","  this._connection.close();","};","Client.prototype.end = Client.prototype.close;","","Client.prototype.prepare = function prepare(command, cb) {","  var options;","  if (util.isString(command)) {","    options = {","      command: command","    };","  } else if (util.isObject(command)) {","    options = command;","  }","","  var statement = new Statement(this._connection);","  this._connection.prepare(options, function onreply(err, reply) {","    statement.handle(err, reply, cb);","  });","  return this;","};","","Client.prototype.destroy = function destroy(err) {","  this._connection.destroy(err);","};","","Client.prototype.exec = function exec(command, options, cb) {","  var defaults = {","    autoFetch: true","  };","  executeDirect.call(this, defaults, command, options, cb);","  return this;","};","","Client.prototype.execute = function execute(command, options, cb) {","  var defaults = {","    autoFetch: false","  };","  executeDirect.call(this, defaults, command, options, cb);","  return this;","};","","Client.prototype._createConnection = function _createConnection(settings) {","  return new Connection(settings);","};","","Client.prototype._addListeners = function _addListeners(connection) {","  var self = this;","","  function cleanup() {","    connection.removeListener('error', onerror);","    connection.removeListener('close', onclose);","  }","","  function onerror(err) {","    self.emit('error', err);","  }","  connection.on('error', onerror);","","  function onclose(hadError) {","    cleanup();","    self.emit('close', hadError);","    if (hadError &amp;&amp; self.get('autoReconnect')) {","      self.connect();","    }","  }","  connection.on('close', onclose);","};","","Client.prototype._createResult = function _createResult(connection, options) {","  return new Result(connection, options);","};","","function executeDirect(defaults, command, options, cb) {","  /* jshint validthis: true */","  if (util.isFunction(options)) {","    cb = options;","    options = defaults;","  } else if (util.isObject(options)) {","    options = util.extend(defaults, options);","  } else {","    var autoFetch = !!options;","    options = defaults;","    options.autoFetch = autoFetch;","  }","  var executeOptions = {","    command: command,","  };","  var result = this._createResult(this._connection, options);","","  function onreply(err, reply) {","    result.handle(err, reply, cb);","  }","  this._connection.executeDirect(executeOptions, onreply);","}"];
