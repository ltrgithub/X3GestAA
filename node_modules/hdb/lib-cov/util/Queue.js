/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['util/Queue.js']) {
  _$jscoverage['util/Queue.js'] = [];
  _$jscoverage['util/Queue.js'][14] = 0;
  _$jscoverage['util/Queue.js'][16] = 0;
  _$jscoverage['util/Queue.js'][17] = 0;
  _$jscoverage['util/Queue.js'][19] = 0;
  _$jscoverage['util/Queue.js'][21] = 0;
  _$jscoverage['util/Queue.js'][23] = 0;
  _$jscoverage['util/Queue.js'][24] = 0;
  _$jscoverage['util/Queue.js'][26] = 0;
  _$jscoverage['util/Queue.js'][27] = 0;
  _$jscoverage['util/Queue.js'][28] = 0;
  _$jscoverage['util/Queue.js'][31] = 0;
  _$jscoverage['util/Queue.js'][33] = 0;
  _$jscoverage['util/Queue.js'][37] = 0;
  _$jscoverage['util/Queue.js'][38] = 0;
  _$jscoverage['util/Queue.js'][39] = 0;
  _$jscoverage['util/Queue.js'][40] = 0;
  _$jscoverage['util/Queue.js'][42] = 0;
  _$jscoverage['util/Queue.js'][45] = 0;
  _$jscoverage['util/Queue.js'][46] = 0;
  _$jscoverage['util/Queue.js'][47] = 0;
  _$jscoverage['util/Queue.js'][48] = 0;
  _$jscoverage['util/Queue.js'][50] = 0;
  _$jscoverage['util/Queue.js'][53] = 0;
  _$jscoverage['util/Queue.js'][54] = 0;
  _$jscoverage['util/Queue.js'][55] = 0;
  _$jscoverage['util/Queue.js'][56] = 0;
  _$jscoverage['util/Queue.js'][58] = 0;
  _$jscoverage['util/Queue.js'][61] = 0;
  _$jscoverage['util/Queue.js'][62] = 0;
  _$jscoverage['util/Queue.js'][63] = 0;
  _$jscoverage['util/Queue.js'][66] = 0;
  _$jscoverage['util/Queue.js'][67] = 0;
  _$jscoverage['util/Queue.js'][68] = 0;
  _$jscoverage['util/Queue.js'][69] = 0;
  _$jscoverage['util/Queue.js'][70] = 0;
  _$jscoverage['util/Queue.js'][71] = 0;
  _$jscoverage['util/Queue.js'][74] = 0;
  _$jscoverage['util/Queue.js'][75] = 0;
  _$jscoverage['util/Queue.js'][78] = 0;
  _$jscoverage['util/Queue.js'][79] = 0;
  _$jscoverage['util/Queue.js'][81] = 0;
  _$jscoverage['util/Queue.js'][83] = 0;
  _$jscoverage['util/Queue.js'][84] = 0;
  _$jscoverage['util/Queue.js'][85] = 0;
  _$jscoverage['util/Queue.js'][86] = 0;
  _$jscoverage['util/Queue.js'][88] = 0;
  _$jscoverage['util/Queue.js'][89] = 0;
  _$jscoverage['util/Queue.js'][91] = 0;
  _$jscoverage['util/Queue.js'][95] = 0;
  _$jscoverage['util/Queue.js'][96] = 0;
  _$jscoverage['util/Queue.js'][98] = 0;
  _$jscoverage['util/Queue.js'][99] = 0;
  _$jscoverage['util/Queue.js'][100] = 0;
  _$jscoverage['util/Queue.js'][103] = 0;
  _$jscoverage['util/Queue.js'][106] = 0;
  _$jscoverage['util/Queue.js'][107] = 0;
  _$jscoverage['util/Queue.js'][108] = 0;
  _$jscoverage['util/Queue.js'][109] = 0;
  _$jscoverage['util/Queue.js'][112] = 0;
  _$jscoverage['util/Queue.js'][113] = 0;
  _$jscoverage['util/Queue.js'][115] = 0;
  _$jscoverage['util/Queue.js'][117] = 0;
  _$jscoverage['util/Queue.js'][118] = 0;
  _$jscoverage['util/Queue.js'][120] = 0;
  _$jscoverage['util/Queue.js'][121] = 0;
  _$jscoverage['util/Queue.js'][123] = 0;
  _$jscoverage['util/Queue.js'][124] = 0;
}
_$jscoverage['util/Queue.js'][14]++;
"use strict";
_$jscoverage['util/Queue.js'][16]++;
var util = require("util");
_$jscoverage['util/Queue.js'][17]++;
var EventEmitter = require("events").EventEmitter;
_$jscoverage['util/Queue.js'][19]++;
module.exports = Queue;
_$jscoverage['util/Queue.js'][21]++;
util.inherits(Queue, EventEmitter);
_$jscoverage['util/Queue.js'][23]++;
function Queue(immediate) {
  _$jscoverage['util/Queue.js'][24]++;
  EventEmitter.call(this);
  _$jscoverage['util/Queue.js'][26]++;
  this.queue = [];
  _$jscoverage['util/Queue.js'][27]++;
  this.busy = false;
  _$jscoverage['util/Queue.js'][28]++;
  this.running = ! ! immediate;
}
_$jscoverage['util/Queue.js'][31]++;
Object.defineProperty(Queue.prototype, "empty", {get: (function isEmpty() {
  _$jscoverage['util/Queue.js'][33]++;
  return this.queue.length === 0;
})});
_$jscoverage['util/Queue.js'][37]++;
Queue.prototype.unshift = (function unshift(task) {
  _$jscoverage['util/Queue.js'][38]++;
  this.queue.unshift(task);
  _$jscoverage['util/Queue.js'][39]++;
  if (this.running) {
    _$jscoverage['util/Queue.js'][40]++;
    this.dequeue();
  }
  _$jscoverage['util/Queue.js'][42]++;
  return this;
});
_$jscoverage['util/Queue.js'][45]++;
Queue.prototype.push = (function push(task) {
  _$jscoverage['util/Queue.js'][46]++;
  this.queue.push(task);
  _$jscoverage['util/Queue.js'][47]++;
  if (this.running) {
    _$jscoverage['util/Queue.js'][48]++;
    this.dequeue();
  }
  _$jscoverage['util/Queue.js'][50]++;
  return this;
});
_$jscoverage['util/Queue.js'][53]++;
Queue.prototype.resume = (function resume() {
  _$jscoverage['util/Queue.js'][54]++;
  this.running = true;
  _$jscoverage['util/Queue.js'][55]++;
  if (this.queue.length) {
    _$jscoverage['util/Queue.js'][56]++;
    this.dequeue();
  }
  _$jscoverage['util/Queue.js'][58]++;
  return this;
});
_$jscoverage['util/Queue.js'][61]++;
Queue.prototype.pause = (function pause() {
  _$jscoverage['util/Queue.js'][62]++;
  this.running = false;
  _$jscoverage['util/Queue.js'][63]++;
  return this;
});
_$jscoverage['util/Queue.js'][66]++;
Queue.prototype.abort = (function abort() {
  _$jscoverage['util/Queue.js'][67]++;
  this.queue = [];
  _$jscoverage['util/Queue.js'][68]++;
  this.busy = false;
  _$jscoverage['util/Queue.js'][69]++;
  this.running = false;
  _$jscoverage['util/Queue.js'][70]++;
  this.removeAllListeners();
  _$jscoverage['util/Queue.js'][71]++;
  return this;
});
_$jscoverage['util/Queue.js'][74]++;
Queue.prototype.createTask = (function createTask(send, receive, name) {
  _$jscoverage['util/Queue.js'][75]++;
  return new Task(send, receive, name);
});
_$jscoverage['util/Queue.js'][78]++;
Queue.prototype.dequeue = (function dequeue() {
  _$jscoverage['util/Queue.js'][79]++;
  var self = this;
  _$jscoverage['util/Queue.js'][81]++;
  function next(err, name) {
    _$jscoverage['util/Queue.js'][83]++;
    self.busy = false;
    _$jscoverage['util/Queue.js'][84]++;
    if (err instanceof Error) {
      _$jscoverage['util/Queue.js'][85]++;
      self.pause();
      _$jscoverage['util/Queue.js'][86]++;
      self.emit("error", err);
    }
    _$jscoverage['util/Queue.js'][88]++;
    if (self.queue.length) {
      _$jscoverage['util/Queue.js'][89]++;
      run();
    }
    else {
      _$jscoverage['util/Queue.js'][91]++;
      self.emit("drain");
    }
}
  _$jscoverage['util/Queue.js'][95]++;
  function run() {
    _$jscoverage['util/Queue.js'][96]++;
    if (self.running && ! self.busy) {
      _$jscoverage['util/Queue.js'][98]++;
      self.busy = true;
      _$jscoverage['util/Queue.js'][99]++;
      var task = self.queue.shift();
      _$jscoverage['util/Queue.js'][100]++;
      task.run(next);
    }
}
  _$jscoverage['util/Queue.js'][103]++;
  run();
});
_$jscoverage['util/Queue.js'][106]++;
function Task(send, receive, name) {
  _$jscoverage['util/Queue.js'][107]++;
  this.send = send;
  _$jscoverage['util/Queue.js'][108]++;
  this.receive = receive;
  _$jscoverage['util/Queue.js'][109]++;
  this.name = name;
}
_$jscoverage['util/Queue.js'][112]++;
Task.prototype.run = (function run(next) {
  _$jscoverage['util/Queue.js'][113]++;
  var self = this;
  _$jscoverage['util/Queue.js'][115]++;
  function receive() {
    _$jscoverage['util/Queue.js'][117]++;
    self.receive.apply(null, arguments);
    _$jscoverage['util/Queue.js'][118]++;
    next(null, self.name);
}
  _$jscoverage['util/Queue.js'][120]++;
  try {
    _$jscoverage['util/Queue.js'][121]++;
    this.send(receive);
  }
  catch (err) {
    _$jscoverage['util/Queue.js'][123]++;
    process.nextTick((function () {
  _$jscoverage['util/Queue.js'][124]++;
  receive(err);
}));
  }
});
_$jscoverage['util/Queue.js'].source = ["// Copyright 2013 SAP AG.","//","// Licensed under the Apache License, Version 2.0 (the \"License\");","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","// http: //www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing,","// software distributed under the License is distributed on an","// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,","// either express or implied. See the License for the specific","// language governing permissions and limitations under the License.","'use strict';","","var util = require('util');","var EventEmitter = require('events').EventEmitter;","","module.exports = Queue;","","util.inherits(Queue, EventEmitter);","","function Queue(immediate) {","  EventEmitter.call(this);","","  this.queue = [];","  this.busy = false;","  this.running = !!immediate;","}","","Object.defineProperty(Queue.prototype, 'empty', {","  get: function isEmpty() {","    return this.queue.length === 0;","  }","});","","Queue.prototype.unshift = function unshift(task) {","  this.queue.unshift(task);","  if (this.running) {","    this.dequeue();","  }","  return this;","};","","Queue.prototype.push = function push(task) {","  this.queue.push(task);","  if (this.running) {","    this.dequeue();","  }","  return this;","};","","Queue.prototype.resume = function resume() {","  this.running = true;","  if (this.queue.length) {","    this.dequeue();","  }","  return this;","};","","Queue.prototype.pause = function pause() {","  this.running = false;","  return this;","};","","Queue.prototype.abort = function abort() {","  this.queue = [];","  this.busy = false;","  this.running = false;","  this.removeAllListeners();","  return this;","};","","Queue.prototype.createTask = function createTask(send, receive, name) {","  return new Task(send, receive, name);","};","","Queue.prototype.dequeue = function dequeue() {","  var self = this;","","  function next(err, name) {","    /* jshint unused:false */","    self.busy = false;","    if (err instanceof Error) {","      self.pause();","      self.emit('error', err);","    }","    if (self.queue.length) {","      run();","    } else {","      self.emit('drain');","    }","  }","","  function run() {","    if (self.running &amp;&amp; !self.busy) {","      // Queue is running and not busy","      self.busy = true;","      var task = self.queue.shift();","      task.run(next);","    }","  }","  run();","};","","function Task(send, receive, name) {","  this.send = send;","  this.receive = receive;","  this.name = name;","}","","Task.prototype.run = function run(next) {","  var self = this;","","  function receive() {","    /* jshint validthis:true */","    self.receive.apply(null, arguments);","    next(null, self.name);","  }","  try {","    this.send(receive);","  } catch (err) {","    process.nextTick(function () {","      receive(err);","    });","  }","};"];
