/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['protocol/request/index.js']) {
  _$jscoverage['protocol/request/index.js'] = [];
  _$jscoverage['protocol/request/index.js'][14] = 0;
  _$jscoverage['protocol/request/index.js'][16] = 0;
  _$jscoverage['protocol/request/index.js'][17] = 0;
  _$jscoverage['protocol/request/index.js'][18] = 0;
  _$jscoverage['protocol/request/index.js'][19] = 0;
  _$jscoverage['protocol/request/index.js'][20] = 0;
  _$jscoverage['protocol/request/index.js'][21] = 0;
  _$jscoverage['protocol/request/index.js'][22] = 0;
  _$jscoverage['protocol/request/index.js'][23] = 0;
  _$jscoverage['protocol/request/index.js'][24] = 0;
  _$jscoverage['protocol/request/index.js'][26] = 0;
  _$jscoverage['protocol/request/index.js'][27] = 0;
  _$jscoverage['protocol/request/index.js'][28] = 0;
  _$jscoverage['protocol/request/index.js'][29] = 0;
  _$jscoverage['protocol/request/index.js'][30] = 0;
  _$jscoverage['protocol/request/index.js'][31] = 0;
  _$jscoverage['protocol/request/index.js'][32] = 0;
  _$jscoverage['protocol/request/index.js'][33] = 0;
  _$jscoverage['protocol/request/index.js'][34] = 0;
  _$jscoverage['protocol/request/index.js'][35] = 0;
  _$jscoverage['protocol/request/index.js'][36] = 0;
  _$jscoverage['protocol/request/index.js'][37] = 0;
  _$jscoverage['protocol/request/index.js'][38] = 0;
  _$jscoverage['protocol/request/index.js'][39] = 0;
  _$jscoverage['protocol/request/index.js'][40] = 0;
  _$jscoverage['protocol/request/index.js'][42] = 0;
  _$jscoverage['protocol/request/index.js'][43] = 0;
  _$jscoverage['protocol/request/index.js'][44] = 0;
  _$jscoverage['protocol/request/index.js'][45] = 0;
  _$jscoverage['protocol/request/index.js'][46] = 0;
  _$jscoverage['protocol/request/index.js'][49] = 0;
  _$jscoverage['protocol/request/index.js'][50] = 0;
  _$jscoverage['protocol/request/index.js'][51] = 0;
  _$jscoverage['protocol/request/index.js'][54] = 0;
  _$jscoverage['protocol/request/index.js'][55] = 0;
  _$jscoverage['protocol/request/index.js'][57] = 0;
  _$jscoverage['protocol/request/index.js'][58] = 0;
  _$jscoverage['protocol/request/index.js'][60] = 0;
  _$jscoverage['protocol/request/index.js'][61] = 0;
  _$jscoverage['protocol/request/index.js'][64] = 0;
  _$jscoverage['protocol/request/index.js'][66] = 0;
  _$jscoverage['protocol/request/index.js'][67] = 0;
  _$jscoverage['protocol/request/index.js'][68] = 0;
  _$jscoverage['protocol/request/index.js'][69] = 0;
  _$jscoverage['protocol/request/index.js'][70] = 0;
  _$jscoverage['protocol/request/index.js'][72] = 0;
  _$jscoverage['protocol/request/index.js'][75] = 0;
  _$jscoverage['protocol/request/index.js'][77] = 0;
  _$jscoverage['protocol/request/index.js'][78] = 0;
  _$jscoverage['protocol/request/index.js'][79] = 0;
  _$jscoverage['protocol/request/index.js'][81] = 0;
  _$jscoverage['protocol/request/index.js'][82] = 0;
  _$jscoverage['protocol/request/index.js'][84] = 0;
  _$jscoverage['protocol/request/index.js'][87] = 0;
  _$jscoverage['protocol/request/index.js'][88] = 0;
  _$jscoverage['protocol/request/index.js'][90] = 0;
  _$jscoverage['protocol/request/index.js'][91] = 0;
  _$jscoverage['protocol/request/index.js'][94] = 0;
  _$jscoverage['protocol/request/index.js'][95] = 0;
  _$jscoverage['protocol/request/index.js'][97] = 0;
  _$jscoverage['protocol/request/index.js'][99] = 0;
  _$jscoverage['protocol/request/index.js'][101] = 0;
  _$jscoverage['protocol/request/index.js'][102] = 0;
  _$jscoverage['protocol/request/index.js'][105] = 0;
  _$jscoverage['protocol/request/index.js'][106] = 0;
  _$jscoverage['protocol/request/index.js'][107] = 0;
  _$jscoverage['protocol/request/index.js'][110] = 0;
  _$jscoverage['protocol/request/index.js'][111] = 0;
  _$jscoverage['protocol/request/index.js'][113] = 0;
  _$jscoverage['protocol/request/index.js'][114] = 0;
  _$jscoverage['protocol/request/index.js'][117] = 0;
  _$jscoverage['protocol/request/index.js'][118] = 0;
  _$jscoverage['protocol/request/index.js'][120] = 0;
  _$jscoverage['protocol/request/index.js'][121] = 0;
  _$jscoverage['protocol/request/index.js'][124] = 0;
  _$jscoverage['protocol/request/index.js'][125] = 0;
  _$jscoverage['protocol/request/index.js'][127] = 0;
  _$jscoverage['protocol/request/index.js'][128] = 0;
  _$jscoverage['protocol/request/index.js'][131] = 0;
  _$jscoverage['protocol/request/index.js'][132] = 0;
  _$jscoverage['protocol/request/index.js'][134] = 0;
  _$jscoverage['protocol/request/index.js'][135] = 0;
  _$jscoverage['protocol/request/index.js'][138] = 0;
  _$jscoverage['protocol/request/index.js'][139] = 0;
  _$jscoverage['protocol/request/index.js'][141] = 0;
  _$jscoverage['protocol/request/index.js'][143] = 0;
  _$jscoverage['protocol/request/index.js'][144] = 0;
  _$jscoverage['protocol/request/index.js'][147] = 0;
  _$jscoverage['protocol/request/index.js'][148] = 0;
  _$jscoverage['protocol/request/index.js'][150] = 0;
  _$jscoverage['protocol/request/index.js'][151] = 0;
  _$jscoverage['protocol/request/index.js'][154] = 0;
  _$jscoverage['protocol/request/index.js'][155] = 0;
  _$jscoverage['protocol/request/index.js'][157] = 0;
  _$jscoverage['protocol/request/index.js'][158] = 0;
  _$jscoverage['protocol/request/index.js'][161] = 0;
  _$jscoverage['protocol/request/index.js'][162] = 0;
  _$jscoverage['protocol/request/index.js'][164] = 0;
  _$jscoverage['protocol/request/index.js'][166] = 0;
  _$jscoverage['protocol/request/index.js'][167] = 0;
  _$jscoverage['protocol/request/index.js'][170] = 0;
  _$jscoverage['protocol/request/index.js'][171] = 0;
  _$jscoverage['protocol/request/index.js'][173] = 0;
  _$jscoverage['protocol/request/index.js'][174] = 0;
  _$jscoverage['protocol/request/index.js'][177] = 0;
  _$jscoverage['protocol/request/index.js'][178] = 0;
  _$jscoverage['protocol/request/index.js'][180] = 0;
  _$jscoverage['protocol/request/index.js'][181] = 0;
  _$jscoverage['protocol/request/index.js'][184] = 0;
  _$jscoverage['protocol/request/index.js'][185] = 0;
  _$jscoverage['protocol/request/index.js'][186] = 0;
  _$jscoverage['protocol/request/index.js'][191] = 0;
  _$jscoverage['protocol/request/index.js'][193] = 0;
}
_$jscoverage['protocol/request/index.js'][14]++;
"use strict";
_$jscoverage['protocol/request/index.js'][16]++;
var util = require("../../util");
_$jscoverage['protocol/request/index.js'][17]++;
var Segment = require("./Segment");
_$jscoverage['protocol/request/index.js'][18]++;
var Part = require("./Part");
_$jscoverage['protocol/request/index.js'][19]++;
var common = require("../common");
_$jscoverage['protocol/request/index.js'][20]++;
var MessageType = common.MessageType;
_$jscoverage['protocol/request/index.js'][21]++;
var PartKind = common.PartKind;
_$jscoverage['protocol/request/index.js'][22]++;
var TypeCode = common.TypeCode;
_$jscoverage['protocol/request/index.js'][23]++;
var CommandOption = common.CommandOption;
_$jscoverage['protocol/request/index.js'][24]++;
var CommitOption = common.CommitOption;
_$jscoverage['protocol/request/index.js'][26]++;
exports.Segment = Segment;
_$jscoverage['protocol/request/index.js'][27]++;
exports.Part = Part;
_$jscoverage['protocol/request/index.js'][28]++;
exports.authenticate = authenticate;
_$jscoverage['protocol/request/index.js'][29]++;
exports.connect = connect;
_$jscoverage['protocol/request/index.js'][30]++;
exports.disconnect = disconnect;
_$jscoverage['protocol/request/index.js'][31]++;
exports.executeDirect = executeDirect;
_$jscoverage['protocol/request/index.js'][32]++;
exports.prepare = prepare;
_$jscoverage['protocol/request/index.js'][33]++;
exports.execute = execute;
_$jscoverage['protocol/request/index.js'][34]++;
exports.fetchNext = fetchNext;
_$jscoverage['protocol/request/index.js'][35]++;
exports.closeResultSet = closeResultSet;
_$jscoverage['protocol/request/index.js'][36]++;
exports.dropStatementId = dropStatementId;
_$jscoverage['protocol/request/index.js'][37]++;
exports.readLob = readLob;
_$jscoverage['protocol/request/index.js'][38]++;
exports.writeLob = writeLob;
_$jscoverage['protocol/request/index.js'][39]++;
exports.commit = commit;
_$jscoverage['protocol/request/index.js'][40]++;
exports.rollback = rollback;
_$jscoverage['protocol/request/index.js'][42]++;
function createSegment(type, options) {
  _$jscoverage['protocol/request/index.js'][43]++;
  options = options || {};
  _$jscoverage['protocol/request/index.js'][44]++;
  var commitImmediateley = 0;
  _$jscoverage['protocol/request/index.js'][45]++;
  var commandOptions = 0;
  _$jscoverage['protocol/request/index.js'][46]++;
  switch (type) {
  case MessageType.EXECUTE:
  case MessageType.EXECUTE_DIRECT:
    _$jscoverage['protocol/request/index.js'][49]++;
    commitImmediateley = getCommitImmediateley(options, 1);
    _$jscoverage['protocol/request/index.js'][50]++;
    commandOptions = getCommandOptions(options);
    _$jscoverage['protocol/request/index.js'][51]++;
    break;
  case MessageType.FETCH_NEXT:
  case MessageType.READ_LOB:
    _$jscoverage['protocol/request/index.js'][54]++;
    commitImmediateley = getCommitImmediateley(options, 1);
    _$jscoverage['protocol/request/index.js'][55]++;
    break;
  case MessageType.PREPARE:
    _$jscoverage['protocol/request/index.js'][57]++;
    commandOptions = getCommandOptions(options);
    _$jscoverage['protocol/request/index.js'][58]++;
    break;
  }
  _$jscoverage['protocol/request/index.js'][60]++;
  var segment = new Segment(type, commitImmediateley, commandOptions);
  _$jscoverage['protocol/request/index.js'][61]++;
  return segment;
}
_$jscoverage['protocol/request/index.js'][64]++;
function getCommitImmediateley(options, defaultValue) {
  _$jscoverage['protocol/request/index.js'][66]++;
  var commitImmediateley = defaultValue;
  _$jscoverage['protocol/request/index.js'][67]++;
  if (! util.isUndefined(options.autoCommit)) {
    _$jscoverage['protocol/request/index.js'][68]++;
    commitImmediateley = ~ ~ options.autoCommit;
  }
  else {
    _$jscoverage['protocol/request/index.js'][69]++;
    if (! util.isUndefined(options.commitImmediateley)) {
      _$jscoverage['protocol/request/index.js'][70]++;
      commitImmediateley = ~ ~ options.commitImmediateley;
    }
  }
  _$jscoverage['protocol/request/index.js'][72]++;
  return commitImmediateley;
}
_$jscoverage['protocol/request/index.js'][75]++;
function getCommandOptions(options) {
  _$jscoverage['protocol/request/index.js'][77]++;
  var commandOptions = 0;
  _$jscoverage['protocol/request/index.js'][78]++;
  if (options.scrollableCursor) {
    _$jscoverage['protocol/request/index.js'][79]++;
    commandOptions |= CommandOption.SCROLLABLE_CURSOR_ON;
  }
  _$jscoverage['protocol/request/index.js'][81]++;
  if (options.holdCursorsOverCommit) {
    _$jscoverage['protocol/request/index.js'][82]++;
    commandOptions |= CommandOption.HOLD_CURSORS_OVER_COMMIT;
  }
  _$jscoverage['protocol/request/index.js'][84]++;
  return commandOptions;
}
_$jscoverage['protocol/request/index.js'][87]++;
function authenticate(options) {
  _$jscoverage['protocol/request/index.js'][88]++;
  var segment = createSegment(MessageType.AUTHENTICATE, options);
  _$jscoverage['protocol/request/index.js'][90]++;
  segment.add(PartKind.AUTHENTICATION, options.authentication);
  _$jscoverage['protocol/request/index.js'][91]++;
  return segment;
}
_$jscoverage['protocol/request/index.js'][94]++;
function connect(options) {
  _$jscoverage['protocol/request/index.js'][95]++;
  var segment = createSegment(MessageType.CONNECT, options);
  _$jscoverage['protocol/request/index.js'][97]++;
  segment.add(PartKind.AUTHENTICATION, options.authentication);
  _$jscoverage['protocol/request/index.js'][99]++;
  segment.add(PartKind.CLIENT_ID, options.clientId);
  _$jscoverage['protocol/request/index.js'][101]++;
  segment.add(PartKind.CONNECT_OPTIONS, options.connectOptions);
  _$jscoverage['protocol/request/index.js'][102]++;
  return segment;
}
_$jscoverage['protocol/request/index.js'][105]++;
function disconnect(options) {
  _$jscoverage['protocol/request/index.js'][106]++;
  var segment = createSegment(MessageType.DISCONNECT, options);
  _$jscoverage['protocol/request/index.js'][107]++;
  return segment;
}
_$jscoverage['protocol/request/index.js'][110]++;
function closeResultSet(options) {
  _$jscoverage['protocol/request/index.js'][111]++;
  var segment = createSegment(MessageType.CLOSE_RESULT_SET, options);
  _$jscoverage['protocol/request/index.js'][113]++;
  segment.add(PartKind.RESULT_SET_ID, options.resultSetId);
  _$jscoverage['protocol/request/index.js'][114]++;
  return segment;
}
_$jscoverage['protocol/request/index.js'][117]++;
function dropStatementId(options) {
  _$jscoverage['protocol/request/index.js'][118]++;
  var segment = createSegment(MessageType.DROP_STATEMENT_ID, options);
  _$jscoverage['protocol/request/index.js'][120]++;
  segment.add(PartKind.STATEMENT_ID, options.statementId);
  _$jscoverage['protocol/request/index.js'][121]++;
  return segment;
}
_$jscoverage['protocol/request/index.js'][124]++;
function commit(options) {
  _$jscoverage['protocol/request/index.js'][125]++;
  var segment = createSegment(MessageType.COMMIT, options);
  _$jscoverage['protocol/request/index.js'][127]++;
  addCommitOptions(segment, options);
  _$jscoverage['protocol/request/index.js'][128]++;
  return segment;
}
_$jscoverage['protocol/request/index.js'][131]++;
function rollback(options) {
  _$jscoverage['protocol/request/index.js'][132]++;
  var segment = createSegment(MessageType.ROLLBACK, options);
  _$jscoverage['protocol/request/index.js'][134]++;
  addCommitOptions(segment, options);
  _$jscoverage['protocol/request/index.js'][135]++;
  return segment;
}
_$jscoverage['protocol/request/index.js'][138]++;
function fetchNext(options) {
  _$jscoverage['protocol/request/index.js'][139]++;
  var segment = createSegment(MessageType.FETCH_NEXT, options);
  _$jscoverage['protocol/request/index.js'][141]++;
  segment.add(PartKind.RESULT_SET_ID, options.resultSetId);
  _$jscoverage['protocol/request/index.js'][143]++;
  segment.add(PartKind.FETCH_SIZE, options.fetchSize);
  _$jscoverage['protocol/request/index.js'][144]++;
  return segment;
}
_$jscoverage['protocol/request/index.js'][147]++;
function readLob(options) {
  _$jscoverage['protocol/request/index.js'][148]++;
  var segment = createSegment(MessageType.READ_LOB, options);
  _$jscoverage['protocol/request/index.js'][150]++;
  segment.add(PartKind.READ_LOB_REQUEST, options.readLobRequest);
  _$jscoverage['protocol/request/index.js'][151]++;
  return segment;
}
_$jscoverage['protocol/request/index.js'][154]++;
function writeLob(options) {
  _$jscoverage['protocol/request/index.js'][155]++;
  var segment = createSegment(MessageType.WRITE_LOB);
  _$jscoverage['protocol/request/index.js'][157]++;
  segment.add(PartKind.WRITE_LOB_REQUEST, options.writeLobRequest);
  _$jscoverage['protocol/request/index.js'][158]++;
  return segment;
}
_$jscoverage['protocol/request/index.js'][161]++;
function execute(options) {
  _$jscoverage['protocol/request/index.js'][162]++;
  var segment = createSegment(MessageType.EXECUTE, options);
  _$jscoverage['protocol/request/index.js'][164]++;
  segment.add(PartKind.STATEMENT_ID, options.statementId);
  _$jscoverage['protocol/request/index.js'][166]++;
  segment.add(PartKind.PARAMETERS, options.parameters);
  _$jscoverage['protocol/request/index.js'][167]++;
  return segment;
}
_$jscoverage['protocol/request/index.js'][170]++;
function executeDirect(options) {
  _$jscoverage['protocol/request/index.js'][171]++;
  var segment = createSegment(MessageType.EXECUTE_DIRECT, options);
  _$jscoverage['protocol/request/index.js'][173]++;
  segment.add(PartKind.COMMAND, options.command);
  _$jscoverage['protocol/request/index.js'][174]++;
  return segment;
}
_$jscoverage['protocol/request/index.js'][177]++;
function prepare(options) {
  _$jscoverage['protocol/request/index.js'][178]++;
  var segment = createSegment(MessageType.PREPARE, options);
  _$jscoverage['protocol/request/index.js'][180]++;
  segment.add(PartKind.COMMAND, options.command);
  _$jscoverage['protocol/request/index.js'][181]++;
  return segment;
}
_$jscoverage['protocol/request/index.js'][184]++;
function addCommitOptions(segment, options) {
  _$jscoverage['protocol/request/index.js'][185]++;
  if (options.holdCursorsOverCommit) {
    _$jscoverage['protocol/request/index.js'][186]++;
    var commitOptions = [{name: CommitOption.HOLD_CURSORS_OVER_COMMIT, type: TypeCode.BOOLEAN, value: 1}];
    _$jscoverage['protocol/request/index.js'][191]++;
    segment.add(PartKind.COMMIT_OPTIONS, commitOptions);
  }
  _$jscoverage['protocol/request/index.js'][193]++;
  return segment;
}
_$jscoverage['protocol/request/index.js'].source = ["// Copyright 2013 SAP AG.","//","// Licensed under the Apache License, Version 2.0 (the \"License\");","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","// http: //www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing,","// software distributed under the License is distributed on an","// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,","// either express or implied. See the License for the specific","// language governing permissions and limitations under the License.","'use strict';","","var util = require('../../util');","var Segment = require('./Segment');","var Part = require('./Part');","var common = require('../common');","var MessageType = common.MessageType;","var PartKind = common.PartKind;","var TypeCode = common.TypeCode;","var CommandOption = common.CommandOption;","var CommitOption = common.CommitOption;","","exports.Segment = Segment;","exports.Part = Part;","exports.authenticate = authenticate;","exports.connect = connect;","exports.disconnect = disconnect;","exports.executeDirect = executeDirect;","exports.prepare = prepare;","exports.execute = execute;","exports.fetchNext = fetchNext;","exports.closeResultSet = closeResultSet;","exports.dropStatementId = dropStatementId;","exports.readLob = readLob;","exports.writeLob = writeLob;","exports.commit = commit;","exports.rollback = rollback;","","function createSegment(type, options) {","  options = options || {};","  var commitImmediateley = 0;","  var commandOptions = 0;","  switch (type) {","  case MessageType.EXECUTE:","  case MessageType.EXECUTE_DIRECT:","    commitImmediateley = getCommitImmediateley(options, 1);","    commandOptions = getCommandOptions(options);","    break;","  case MessageType.FETCH_NEXT:","  case MessageType.READ_LOB:","    commitImmediateley = getCommitImmediateley(options, 1);","    break;","  case MessageType.PREPARE:","    commandOptions = getCommandOptions(options);","    break;","  }","  var segment = new Segment(type, commitImmediateley, commandOptions);","  return segment;","}","","function getCommitImmediateley(options, defaultValue) {","  /* jshint bitwise:false */","  var commitImmediateley = defaultValue;","  if (!util.isUndefined(options.autoCommit)) {","    commitImmediateley = ~~options.autoCommit;","  } else if (!util.isUndefined(options.commitImmediateley)) {","    commitImmediateley = ~~options.commitImmediateley;","  }","  return commitImmediateley;","}","","function getCommandOptions(options) {","  /* jshint bitwise:false */","  var commandOptions = 0;","  if (options.scrollableCursor) {","    commandOptions |= CommandOption.SCROLLABLE_CURSOR_ON;","  }","  if (options.holdCursorsOverCommit) {","    commandOptions |= CommandOption.HOLD_CURSORS_OVER_COMMIT;","  }","  return commandOptions;","}","","function authenticate(options) {","  var segment = createSegment(MessageType.AUTHENTICATE, options);","  // authentication","  segment.add(PartKind.AUTHENTICATION, options.authentication);","  return segment;","}","","function connect(options) {","  var segment = createSegment(MessageType.CONNECT, options);","  // authentication","  segment.add(PartKind.AUTHENTICATION, options.authentication);","  // clientId","  segment.add(PartKind.CLIENT_ID, options.clientId);","  // connectOptions","  segment.add(PartKind.CONNECT_OPTIONS, options.connectOptions);","  return segment;","}","","function disconnect(options) {","  var segment = createSegment(MessageType.DISCONNECT, options);","  return segment;","}","","function closeResultSet(options) {","  var segment = createSegment(MessageType.CLOSE_RESULT_SET, options);","  // resultSetId","  segment.add(PartKind.RESULT_SET_ID, options.resultSetId);","  return segment;","}","","function dropStatementId(options) {","  var segment = createSegment(MessageType.DROP_STATEMENT_ID, options);","  // statementId","  segment.add(PartKind.STATEMENT_ID, options.statementId);","  return segment;","}","","function commit(options) {","  var segment = createSegment(MessageType.COMMIT, options);","  // commitOptions","  addCommitOptions(segment, options);","  return segment;","}","","function rollback(options) {","  var segment = createSegment(MessageType.ROLLBACK, options);","  // commitOptions","  addCommitOptions(segment, options);","  return segment;","}","","function fetchNext(options) {","  var segment = createSegment(MessageType.FETCH_NEXT, options);","  // resultSetId","  segment.add(PartKind.RESULT_SET_ID, options.resultSetId);","  // fetchSize","  segment.add(PartKind.FETCH_SIZE, options.fetchSize);","  return segment;","}","","function readLob(options) {","  var segment = createSegment(MessageType.READ_LOB, options);","  // readLobRequest","  segment.add(PartKind.READ_LOB_REQUEST, options.readLobRequest);","  return segment;","}","","function writeLob(options) {","  var segment = createSegment(MessageType.WRITE_LOB);","  // writeLobRequest","  segment.add(PartKind.WRITE_LOB_REQUEST, options.writeLobRequest);","  return segment;","}","","function execute(options) {","  var segment = createSegment(MessageType.EXECUTE, options);","  // statementId","  segment.add(PartKind.STATEMENT_ID, options.statementId);","  // parameters","  segment.add(PartKind.PARAMETERS, options.parameters);","  return segment;","}","","function executeDirect(options) {","  var segment = createSegment(MessageType.EXECUTE_DIRECT, options);","  // command","  segment.add(PartKind.COMMAND, options.command);","  return segment;","}","","function prepare(options) {","  var segment = createSegment(MessageType.PREPARE, options);","  // command","  segment.add(PartKind.COMMAND, options.command);","  return segment;","}","","function addCommitOptions(segment, options) {","  if (options.holdCursorsOverCommit) {","    var commitOptions = [{","      name: CommitOption.HOLD_CURSORS_OVER_COMMIT,","      type: TypeCode.BOOLEAN,","      value: 1","    }];","    segment.add(PartKind.COMMIT_OPTIONS, commitOptions);","  }","  return segment;","}"];
