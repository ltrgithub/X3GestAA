/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['protocol/ExecuteTask.js']) {
  _$jscoverage['protocol/ExecuteTask.js'] = [];
  _$jscoverage['protocol/ExecuteTask.js'][14] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][16] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][17] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][18] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][19] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][20] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][22] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][24] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][26] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][27] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][28] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][29] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][30] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][31] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][32] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][33] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][34] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][35] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][36] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][37] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][39] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][41] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][42] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][45] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][46] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][49] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][50] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][52] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][53] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][54] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][57] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][58] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][59] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][61] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][62] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][64] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][67] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][70] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][71] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][72] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][74] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][75] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][76] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][78] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][79] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][80] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][82] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][86] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][87] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][88] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][90] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][92] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][93] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][95] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][100] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][101] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][106] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][108] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][112] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][115] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][116] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][119] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][120] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][121] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][122] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][124] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][125] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][126] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][129] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][134] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][135] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][136] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][137] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][139] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][140] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][141] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][143] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][144] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][145] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][146] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][147] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][148] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][150] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][152] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][155] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][156] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][157] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][159] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][160] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][161] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][163] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][166] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][167] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][168] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][169] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][170] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][172] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][174] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][177] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][180] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][181] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][182] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][183] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][184] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][185] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][186] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][188] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][198] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][199] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][200] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][201] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][202] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][203] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][205] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][211] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][212] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][213] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][218] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][219] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][220] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][225] = 0;
  _$jscoverage['protocol/ExecuteTask.js'][226] = 0;
}
_$jscoverage['protocol/ExecuteTask.js'][14]++;
"use strict";
_$jscoverage['protocol/ExecuteTask.js'][16]++;
var util = require("../util");
_$jscoverage['protocol/ExecuteTask.js'][17]++;
var request = require("./request");
_$jscoverage['protocol/ExecuteTask.js'][18]++;
var Writer = require("./Writer");
_$jscoverage['protocol/ExecuteTask.js'][19]++;
var common = require("./common");
_$jscoverage['protocol/ExecuteTask.js'][20]++;
var FunctionCode = common.FunctionCode;
_$jscoverage['protocol/ExecuteTask.js'][22]++;
var STATEMENT_ID_PART_LENGTH = 24;
_$jscoverage['protocol/ExecuteTask.js'][24]++;
exports = module.exports = ExecuteTask;
_$jscoverage['protocol/ExecuteTask.js'][26]++;
function ExecuteTask(connection, options, callback) {
  _$jscoverage['protocol/ExecuteTask.js'][27]++;
  this.connection = connection;
  _$jscoverage['protocol/ExecuteTask.js'][28]++;
  this.autoCommit = options.autoCommit;
  _$jscoverage['protocol/ExecuteTask.js'][29]++;
  this.needFinializeTransaction = false;
  _$jscoverage['protocol/ExecuteTask.js'][30]++;
  this.holdCursorsOverCommit = options.holdCursorsOverCommit;
  _$jscoverage['protocol/ExecuteTask.js'][31]++;
  this.scrollableCursor = options.scrollableCursor;
  _$jscoverage['protocol/ExecuteTask.js'][32]++;
  this.statementId = options.statementId;
  _$jscoverage['protocol/ExecuteTask.js'][33]++;
  this.functionCode = options.functionCode;
  _$jscoverage['protocol/ExecuteTask.js'][34]++;
  this.writer = new Writer(options.parameters.types);
  _$jscoverage['protocol/ExecuteTask.js'][35]++;
  var values = options.parameters.values;
  _$jscoverage['protocol/ExecuteTask.js'][36]++;
  if (values.length && util.isArray(values[0])) {
    _$jscoverage['protocol/ExecuteTask.js'][37]++;
    this.parameterValues = values;
  }
  else {
    _$jscoverage['protocol/ExecuteTask.js'][39]++;
    this.parameterValues = [values];
  }
  _$jscoverage['protocol/ExecuteTask.js'][41]++;
  this.callback = callback;
  _$jscoverage['protocol/ExecuteTask.js'][42]++;
  this.reply = undefined;
}
_$jscoverage['protocol/ExecuteTask.js'][45]++;
exports.create = (function createExecuteTask(connection, options, cb) {
  _$jscoverage['protocol/ExecuteTask.js'][46]++;
  return new ExecuteTask(connection, options, cb);
});
_$jscoverage['protocol/ExecuteTask.js'][49]++;
ExecuteTask.prototype.run = (function run(next) {
  _$jscoverage['protocol/ExecuteTask.js'][50]++;
  var self = this;
  _$jscoverage['protocol/ExecuteTask.js'][52]++;
  function done(err) {
    _$jscoverage['protocol/ExecuteTask.js'][53]++;
    self.end(err);
    _$jscoverage['protocol/ExecuteTask.js'][54]++;
    next();
}
  _$jscoverage['protocol/ExecuteTask.js'][57]++;
  function finalize(err) {
    _$jscoverage['protocol/ExecuteTask.js'][58]++;
    if (! self.needFinializeTransaction) {
      _$jscoverage['protocol/ExecuteTask.js'][59]++;
      return done(err);
    }
    _$jscoverage['protocol/ExecuteTask.js'][61]++;
    if (err) {
      _$jscoverage['protocol/ExecuteTask.js'][62]++;
      return self.sendRollback((function () {
  _$jscoverage['protocol/ExecuteTask.js'][64]++;
  done(err);
}));
    }
    _$jscoverage['protocol/ExecuteTask.js'][67]++;
    self.sendCommit(done);
}
  _$jscoverage['protocol/ExecuteTask.js'][70]++;
  function execute() {
    _$jscoverage['protocol/ExecuteTask.js'][71]++;
    if (! self.parameterValues.length) {
      _$jscoverage['protocol/ExecuteTask.js'][72]++;
      return finalize();
    }
    _$jscoverage['protocol/ExecuteTask.js'][74]++;
    self.sendExecute((function receive(err, reply) {
  _$jscoverage['protocol/ExecuteTask.js'][75]++;
  if (err) {
    _$jscoverage['protocol/ExecuteTask.js'][76]++;
    return finalize(err);
  }
  _$jscoverage['protocol/ExecuteTask.js'][78]++;
  self.pushReply(reply);
  _$jscoverage['protocol/ExecuteTask.js'][79]++;
  if (! self.writer.finished && reply.writeLobReply) {
    _$jscoverage['protocol/ExecuteTask.js'][80]++;
    self.writer.update(reply.writeLobReply);
  }
  _$jscoverage['protocol/ExecuteTask.js'][82]++;
  writeLob();
}));
}
  _$jscoverage['protocol/ExecuteTask.js'][86]++;
  function writeLob() {
    _$jscoverage['protocol/ExecuteTask.js'][87]++;
    if (self.writer.finished || self.writer.hasParameters) {
      _$jscoverage['protocol/ExecuteTask.js'][88]++;
      return execute();
    }
    _$jscoverage['protocol/ExecuteTask.js'][90]++;
    self.sendWriteLobRequest((function receive(err, reply) {
  _$jscoverage['protocol/ExecuteTask.js'][92]++;
  if (err) {
    _$jscoverage['protocol/ExecuteTask.js'][93]++;
    return finalize(err);
  }
  _$jscoverage['protocol/ExecuteTask.js'][95]++;
  writeLob();
}));
}
  _$jscoverage['protocol/ExecuteTask.js'][100]++;
  if (self.parameterValues.length > 1) {
    _$jscoverage['protocol/ExecuteTask.js'][101]++;
    switch (self.functionCode) {
    case FunctionCode.DDL:
    case FunctionCode.INSERT:
    case FunctionCode.UPDATE:
    case FunctionCode.DELETE:
      _$jscoverage['protocol/ExecuteTask.js'][106]++;
      break;
    default:
      _$jscoverage['protocol/ExecuteTask.js'][108]++;
      return done(createInvalidFunctionCodeError());
    }
  }
  _$jscoverage['protocol/ExecuteTask.js'][112]++;
  execute();
});
_$jscoverage['protocol/ExecuteTask.js'][115]++;
ExecuteTask.prototype.end = (function end(err) {
  _$jscoverage['protocol/ExecuteTask.js'][116]++;
  this.callback(err, this.reply);
});
_$jscoverage['protocol/ExecuteTask.js'][119]++;
ExecuteTask.prototype.pushReply = (function pushReply(reply) {
  _$jscoverage['protocol/ExecuteTask.js'][120]++;
  if (! this.reply) {
    _$jscoverage['protocol/ExecuteTask.js'][121]++;
    this.reply = reply;
    _$jscoverage['protocol/ExecuteTask.js'][122]++;
    return;
  }
  _$jscoverage['protocol/ExecuteTask.js'][124]++;
  if (reply.rowsAffected) {
    _$jscoverage['protocol/ExecuteTask.js'][125]++;
    if (this.reply.rowsAffected) {
      _$jscoverage['protocol/ExecuteTask.js'][126]++;
      this.reply.rowsAffected = [].concat(this.reply.rowsAffected, reply.rowsAffected);
    }
    else {
      _$jscoverage['protocol/ExecuteTask.js'][129]++;
      this.reply.rowsAffected = reply.rowsAffected;
    }
  }
});
_$jscoverage['protocol/ExecuteTask.js'][134]++;
ExecuteTask.prototype.getParameters = (function getParameters(availableSize, cb) {
  _$jscoverage['protocol/ExecuteTask.js'][135]++;
  var self = this;
  _$jscoverage['protocol/ExecuteTask.js'][136]++;
  var bytesWritten = 0;
  _$jscoverage['protocol/ExecuteTask.js'][137]++;
  var args = [];
  _$jscoverage['protocol/ExecuteTask.js'][139]++;
  function handleParameters(err, buffer) {
    _$jscoverage['protocol/ExecuteTask.js'][140]++;
    if (err) {
      _$jscoverage['protocol/ExecuteTask.js'][141]++;
      return cb(err);
    }
    _$jscoverage['protocol/ExecuteTask.js'][143]++;
    bytesWritten += buffer.length;
    _$jscoverage['protocol/ExecuteTask.js'][144]++;
    args.push(buffer);
    _$jscoverage['protocol/ExecuteTask.js'][145]++;
    if (! self.writer.finished) {
      _$jscoverage['protocol/ExecuteTask.js'][146]++;
      if (self.autoCommit) {
        _$jscoverage['protocol/ExecuteTask.js'][147]++;
        self.needFinializeTransaction = true;
        _$jscoverage['protocol/ExecuteTask.js'][148]++;
        self.autoCommit = false;
      }
      _$jscoverage['protocol/ExecuteTask.js'][150]++;
      return cb(null, args);
    }
    _$jscoverage['protocol/ExecuteTask.js'][152]++;
    next();
}
  _$jscoverage['protocol/ExecuteTask.js'][155]++;
  function next() {
    _$jscoverage['protocol/ExecuteTask.js'][156]++;
    if (! self.parameterValues.length) {
      _$jscoverage['protocol/ExecuteTask.js'][157]++;
      return cb(null, args);
    }
    _$jscoverage['protocol/ExecuteTask.js'][159]++;
    if (! self.writer.hasParameters) {
      _$jscoverage['protocol/ExecuteTask.js'][160]++;
      try {
        _$jscoverage['protocol/ExecuteTask.js'][161]++;
        self.writer.setValues(self.parameterValues.shift());
      }
      catch (err) {
        _$jscoverage['protocol/ExecuteTask.js'][163]++;
        return cb(err);
      }
    }
    _$jscoverage['protocol/ExecuteTask.js'][166]++;
    var remainingSize = availableSize - bytesWritten;
    _$jscoverage['protocol/ExecuteTask.js'][167]++;
    if (self.writer.length > remainingSize) {
      _$jscoverage['protocol/ExecuteTask.js'][168]++;
      if (self.autoCommit) {
        _$jscoverage['protocol/ExecuteTask.js'][169]++;
        self.needFinializeTransaction = true;
        _$jscoverage['protocol/ExecuteTask.js'][170]++;
        self.autoCommit = false;
      }
      _$jscoverage['protocol/ExecuteTask.js'][172]++;
      return cb(null, args);
    }
    _$jscoverage['protocol/ExecuteTask.js'][174]++;
    self.writer.getParameters(remainingSize, handleParameters);
}
  _$jscoverage['protocol/ExecuteTask.js'][177]++;
  next();
});
_$jscoverage['protocol/ExecuteTask.js'][180]++;
ExecuteTask.prototype.sendExecute = (function sendExecute(cb) {
  _$jscoverage['protocol/ExecuteTask.js'][181]++;
  var self = this;
  _$jscoverage['protocol/ExecuteTask.js'][182]++;
  var availableSize = self.connection.getAvailableSize();
  _$jscoverage['protocol/ExecuteTask.js'][183]++;
  availableSize -= STATEMENT_ID_PART_LENGTH;
  _$jscoverage['protocol/ExecuteTask.js'][184]++;
  self.getParameters(availableSize, (function send(err, parameters) {
  _$jscoverage['protocol/ExecuteTask.js'][185]++;
  if (err) {
    _$jscoverage['protocol/ExecuteTask.js'][186]++;
    return cb(err);
  }
  _$jscoverage['protocol/ExecuteTask.js'][188]++;
  self.connection.send(request.execute({autoCommit: self.autoCommit, holdCursorsOverCommit: self.holdCursorsOverCommit, scrollableCursor: self.scrollableCursor, statementId: self.statementId, parameters: parameters}), cb);
}));
});
_$jscoverage['protocol/ExecuteTask.js'][198]++;
ExecuteTask.prototype.sendWriteLobRequest = (function sendWriteLobRequest(cb) {
  _$jscoverage['protocol/ExecuteTask.js'][199]++;
  var self = this;
  _$jscoverage['protocol/ExecuteTask.js'][200]++;
  var availableSize = self.connection.getAvailableSize();
  _$jscoverage['protocol/ExecuteTask.js'][201]++;
  self.writer.getWriteLobRequest(availableSize, (function send(err, buffer) {
  _$jscoverage['protocol/ExecuteTask.js'][202]++;
  if (err) {
    _$jscoverage['protocol/ExecuteTask.js'][203]++;
    return cb(err);
  }
  _$jscoverage['protocol/ExecuteTask.js'][205]++;
  self.connection.send(request.writeLob({writeLobRequest: buffer}), cb);
}));
});
_$jscoverage['protocol/ExecuteTask.js'][211]++;
ExecuteTask.prototype.sendCommit = (function sendCommit(cb) {
  _$jscoverage['protocol/ExecuteTask.js'][212]++;
  var self = this;
  _$jscoverage['protocol/ExecuteTask.js'][213]++;
  self.connection.send(request.commit({holdCursorsOverCommit: self.holdCursorsOverCommit}), cb);
});
_$jscoverage['protocol/ExecuteTask.js'][218]++;
ExecuteTask.prototype.sendRollback = (function sendRollback(cb) {
  _$jscoverage['protocol/ExecuteTask.js'][219]++;
  var self = this;
  _$jscoverage['protocol/ExecuteTask.js'][220]++;
  self.connection.send(request.rollback({holdCursorsOverCommit: self.holdCursorsOverCommit}), cb);
});
_$jscoverage['protocol/ExecuteTask.js'][225]++;
function createInvalidFunctionCodeError() {
  _$jscoverage['protocol/ExecuteTask.js'][226]++;
  return new Error("Invalid functionCode in batch execute. Only DDL or DML statements are supported.");
}
_$jscoverage['protocol/ExecuteTask.js'].source = ["// Copyright 2013 SAP AG.","//","// Licensed under the Apache License, Version 2.0 (the \"License\");","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","// http: //www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing,","// software distributed under the License is distributed on an","// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,","// either express or implied. See the License for the specific","// language governing permissions and limitations under the License.","'use strict';","","var util = require('../util');","var request = require('./request');","var Writer = require('./Writer');","var common = require('./common');","var FunctionCode = common.FunctionCode;","","var STATEMENT_ID_PART_LENGTH = 24;","","exports = module.exports = ExecuteTask;","","function ExecuteTask(connection, options, callback) {","  this.connection = connection;","  this.autoCommit = options.autoCommit;","  this.needFinializeTransaction = false;","  this.holdCursorsOverCommit = options.holdCursorsOverCommit;","  this.scrollableCursor = options.scrollableCursor;","  this.statementId = options.statementId;","  this.functionCode = options.functionCode;","  this.writer = new Writer(options.parameters.types);","  var values = options.parameters.values;","  if (values.length &amp;&amp; util.isArray(values[0])) {","    this.parameterValues = values;","  } else {","    this.parameterValues = [values];","  }","  this.callback = callback;","  this.reply = undefined;","}","","exports.create = function createExecuteTask(connection, options, cb) {","  return new ExecuteTask(connection, options, cb);","};","","ExecuteTask.prototype.run = function run(next) {","  var self = this;","","  function done(err) {","    self.end(err);","    next();","  }","","  function finalize(err) {","    if (!self.needFinializeTransaction) {","      return done(err);","    }","    if (err) {","      return self.sendRollback(function () {","        // ignore roolback error","        done(err);","      });","    }","    self.sendCommit(done);","  }","","  function execute() {","    if (!self.parameterValues.length) {","      return finalize();","    }","    self.sendExecute(function receive(err, reply) {","      if (err) {","        return finalize(err);","      }","      self.pushReply(reply);","      if (!self.writer.finished &amp;&amp; reply.writeLobReply) {","        self.writer.update(reply.writeLobReply);","      }","      writeLob();","    });","  }","","  function writeLob() {","    if (self.writer.finished || self.writer.hasParameters) {","      return execute();","    }","    self.sendWriteLobRequest(function receive(err, reply) {","      /* jshint unused:false */","      if (err) {","        return finalize(err);","      }","      writeLob();","    });","  }","","  // validate function code","  if (self.parameterValues.length &gt; 1) {","    switch (self.functionCode) {","    case FunctionCode.DDL:","    case FunctionCode.INSERT:","    case FunctionCode.UPDATE:","    case FunctionCode.DELETE:","      break;","    default:","      return done(createInvalidFunctionCodeError());","    }","  }","","  execute();","};","","ExecuteTask.prototype.end = function end(err) {","  this.callback(err, this.reply);","};","","ExecuteTask.prototype.pushReply = function pushReply(reply) {","  if (!this.reply) {","    this.reply = reply;","    return;","  }","  if (reply.rowsAffected) {","    if (this.reply.rowsAffected) {","      this.reply.rowsAffected = [].concat(","        this.reply.rowsAffected, reply.rowsAffected);","    } else {","      this.reply.rowsAffected = reply.rowsAffected;","    }","  }","};","","ExecuteTask.prototype.getParameters = function getParameters(availableSize, cb) {","  var self = this;","  var bytesWritten = 0;","  var args = [];","","  function handleParameters(err, buffer) {","    if (err) {","      return cb(err);","    }","    bytesWritten += buffer.length;","    args.push(buffer);","    if (!self.writer.finished) {","      if (self.autoCommit) {","        self.needFinializeTransaction = true;","        self.autoCommit = false;","      }","      return cb(null, args);","    }","    next();","  }","","  function next() {","    if (!self.parameterValues.length) {","      return cb(null, args);","    }","    if (!self.writer.hasParameters) {","      try {","        self.writer.setValues(self.parameterValues.shift());","      } catch (err) {","        return cb(err);","      }","    }","    var remainingSize = availableSize - bytesWritten;","    if (self.writer.length &gt; remainingSize) {","      if (self.autoCommit) {","        self.needFinializeTransaction = true;","        self.autoCommit = false;","      }","      return cb(null, args);","    }","    self.writer.getParameters(remainingSize, handleParameters);","  }","","  next();","};","","ExecuteTask.prototype.sendExecute = function sendExecute(cb) {","  var self = this;","  var availableSize = self.connection.getAvailableSize();","  availableSize -= STATEMENT_ID_PART_LENGTH;","  self.getParameters(availableSize, function send(err, parameters) {","    if (err) {","      return cb(err);","    }","    self.connection.send(request.execute({","      autoCommit: self.autoCommit,","      holdCursorsOverCommit: self.holdCursorsOverCommit,","      scrollableCursor: self.scrollableCursor,","      statementId: self.statementId,","      parameters: parameters","    }), cb);","  });","};","","ExecuteTask.prototype.sendWriteLobRequest = function sendWriteLobRequest(cb) {","  var self = this;","  var availableSize = self.connection.getAvailableSize();","  self.writer.getWriteLobRequest(availableSize, function send(err, buffer) {","    if (err) {","      return cb(err);","    }","    self.connection.send(request.writeLob({","      writeLobRequest: buffer","    }), cb);","  });","};","","ExecuteTask.prototype.sendCommit = function sendCommit(cb) {","  var self = this;","  self.connection.send(request.commit({","    holdCursorsOverCommit: self.holdCursorsOverCommit","  }), cb);","};","","ExecuteTask.prototype.sendRollback = function sendRollback(cb) {","  var self = this;","  self.connection.send(request.rollback({","    holdCursorsOverCommit: self.holdCursorsOverCommit","  }), cb);","};","","function createInvalidFunctionCodeError() {","  return new Error(","    'Invalid functionCode in batch execute. ' +","    'Only DDL or DML statements are supported.'","  );","}"];
