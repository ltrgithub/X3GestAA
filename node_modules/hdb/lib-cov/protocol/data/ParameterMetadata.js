/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['protocol/data/ParameterMetadata.js']) {
  _$jscoverage['protocol/data/ParameterMetadata.js'] = [];
  _$jscoverage['protocol/data/ParameterMetadata.js'][14] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][16] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][17] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][19] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][20] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][22] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][23] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][24] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][25] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][28] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][31] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][32] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][33] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][34] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][35] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][36] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][38] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][41] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][43] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][46] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][47] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][48] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][49] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][50] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][51] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][52] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][54] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][55] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][56] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][57] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][59] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][60] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][63] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][65] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][68] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][70] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][73] = 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][75] = 0;
}
_$jscoverage['protocol/data/ParameterMetadata.js'][14]++;
"use strict";
_$jscoverage['protocol/data/ParameterMetadata.js'][16]++;
var common = require("../common");
_$jscoverage['protocol/data/ParameterMetadata.js'][17]++;
var ParameterMode = common.ParameterMode;
_$jscoverage['protocol/data/ParameterMetadata.js'][19]++;
exports.read = read;
_$jscoverage['protocol/data/ParameterMetadata.js'][20]++;
exports.getArgumentCount = getArgumentCount;
_$jscoverage['protocol/data/ParameterMetadata.js'][22]++;
function read(part) {
  _$jscoverage['protocol/data/ParameterMetadata.js'][23]++;
  var params = new Array(part.argumentCount);
  _$jscoverage['protocol/data/ParameterMetadata.js'][24]++;
  _read.call(params, part.buffer, 0);
  _$jscoverage['protocol/data/ParameterMetadata.js'][25]++;
  return params;
}
_$jscoverage['protocol/data/ParameterMetadata.js'][28]++;
function _read(buffer, offset) {
  _$jscoverage['protocol/data/ParameterMetadata.js'][31]++;
  offset = offset || 0;
  _$jscoverage['protocol/data/ParameterMetadata.js'][32]++;
  var params = this;
  _$jscoverage['protocol/data/ParameterMetadata.js'][33]++;
  var textOffset = offset + params.length * 16;
  _$jscoverage['protocol/data/ParameterMetadata.js'][34]++;
  for (var i = 0; i < params.length; i++) {
    _$jscoverage['protocol/data/ParameterMetadata.js'][35]++;
    params[i] = new Parameter(buffer, offset, textOffset);
    _$jscoverage['protocol/data/ParameterMetadata.js'][36]++;
    offset += 16;
}
  _$jscoverage['protocol/data/ParameterMetadata.js'][38]++;
  return offset;
}
_$jscoverage['protocol/data/ParameterMetadata.js'][41]++;
function getArgumentCount(params) {
  _$jscoverage['protocol/data/ParameterMetadata.js'][43]++;
  return params.length;
}
_$jscoverage['protocol/data/ParameterMetadata.js'][46]++;
function Parameter(buffer, offset, textOffset) {
  _$jscoverage['protocol/data/ParameterMetadata.js'][47]++;
  this.mode = buffer[offset];
  _$jscoverage['protocol/data/ParameterMetadata.js'][48]++;
  this.dataType = buffer[offset + 1];
  _$jscoverage['protocol/data/ParameterMetadata.js'][49]++;
  this.ioType = buffer[offset + 2];
  _$jscoverage['protocol/data/ParameterMetadata.js'][50]++;
  var nameOffset = buffer.readInt32LE(offset + 4);
  _$jscoverage['protocol/data/ParameterMetadata.js'][51]++;
  if (nameOffset < 0) {
    _$jscoverage['protocol/data/ParameterMetadata.js'][52]++;
    this.name = undefined;
  }
  else {
    _$jscoverage['protocol/data/ParameterMetadata.js'][54]++;
    var start = textOffset + nameOffset;
    _$jscoverage['protocol/data/ParameterMetadata.js'][55]++;
    var length = buffer[start];
    _$jscoverage['protocol/data/ParameterMetadata.js'][56]++;
    start += 1;
    _$jscoverage['protocol/data/ParameterMetadata.js'][57]++;
    this.name = buffer.toString("utf-8", start, start + length);
  }
  _$jscoverage['protocol/data/ParameterMetadata.js'][59]++;
  this.length = buffer.readInt16LE(offset + 8);
  _$jscoverage['protocol/data/ParameterMetadata.js'][60]++;
  this.fraction = buffer.readInt16LE(offset + 10);
}
_$jscoverage['protocol/data/ParameterMetadata.js'][63]++;
Parameter.prototype.isReadOnly = (function isReadOnly() {
  _$jscoverage['protocol/data/ParameterMetadata.js'][65]++;
  return this.mode & ParameterMode.READONLY? true: false;
});
_$jscoverage['protocol/data/ParameterMetadata.js'][68]++;
Parameter.prototype.isMandatory = (function isMandatory() {
  _$jscoverage['protocol/data/ParameterMetadata.js'][70]++;
  return this.mode & ParameterMode.MANDATORY? true: false;
});
_$jscoverage['protocol/data/ParameterMetadata.js'][73]++;
Parameter.prototype.isAutoIncrement = (function isAutoIncrement() {
  _$jscoverage['protocol/data/ParameterMetadata.js'][75]++;
  return this.mode & ParameterMode.AUTO_INCREMENT? true: false;
});
_$jscoverage['protocol/data/ParameterMetadata.js'].source = ["// Copyright 2013 SAP AG.","//","// Licensed under the Apache License, Version 2.0 (the \"License\");","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","// http: //www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing,","// software distributed under the License is distributed on an","// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,","// either express or implied. See the License for the specific","// language governing permissions and limitations under the License.","'use strict';","","var common = require('../common');","var ParameterMode = common.ParameterMode;","","exports.read = read;","exports.getArgumentCount = getArgumentCount;","","function read(part) {","  var params = new Array(part.argumentCount);","  _read.call(params, part.buffer, 0);","  return params;","}","","function _read(buffer, offset) {","  /* jshint validthis:true */","","  offset = offset || 0;","  var params = this;","  var textOffset = offset + params.length * 16;","  for (var i = 0; i &lt; params.length; i++) {","    params[i] = new Parameter(buffer, offset, textOffset);","    offset += 16;","  }","  return offset;","}","","function getArgumentCount(params) {","  /* jshint unused:false */","  return params.length;","}","","function Parameter(buffer, offset, textOffset) {","  this.mode = buffer[offset];","  this.dataType = buffer[offset + 1];","  this.ioType = buffer[offset + 2];","  var nameOffset = buffer.readInt32LE(offset + 4);","  if (nameOffset &lt; 0) {","    this.name = undefined;","  } else {","    var start = textOffset + nameOffset;","    var length = buffer[start];","    start += 1;","    this.name = buffer.toString('utf-8', start, start + length);","  }","  this.length = buffer.readInt16LE(offset + 8);","  this.fraction = buffer.readInt16LE(offset + 10);","}","","Parameter.prototype.isReadOnly = function isReadOnly() {","  /* jshint bitwise:false */","  return this.mode &amp; ParameterMode.READONLY ? true : false;","};","","Parameter.prototype.isMandatory = function isMandatory() {","  /* jshint bitwise:false */","  return this.mode &amp; ParameterMode.MANDATORY ? true : false;","};","","Parameter.prototype.isAutoIncrement = function isAutoIncrement() {","  /* jshint bitwise:false */","  return this.mode &amp; ParameterMode.AUTO_INCREMENT ? true : false;","};"];
