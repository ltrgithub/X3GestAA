/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['protocol/data/Fields.js']) {
  _$jscoverage['protocol/data/Fields.js'] = [];
  _$jscoverage['protocol/data/Fields.js'][14] = 0;
  _$jscoverage['protocol/data/Fields.js'][16] = 0;
  _$jscoverage['protocol/data/Fields.js'][18] = 0;
  _$jscoverage['protocol/data/Fields.js'][19] = 0;
  _$jscoverage['protocol/data/Fields.js'][20] = 0;
  _$jscoverage['protocol/data/Fields.js'][21] = 0;
  _$jscoverage['protocol/data/Fields.js'][23] = 0;
  _$jscoverage['protocol/data/Fields.js'][24] = 0;
  _$jscoverage['protocol/data/Fields.js'][25] = 0;
  _$jscoverage['protocol/data/Fields.js'][26] = 0;
  _$jscoverage['protocol/data/Fields.js'][28] = 0;
  _$jscoverage['protocol/data/Fields.js'][29] = 0;
  _$jscoverage['protocol/data/Fields.js'][30] = 0;
  _$jscoverage['protocol/data/Fields.js'][31] = 0;
  _$jscoverage['protocol/data/Fields.js'][32] = 0;
  _$jscoverage['protocol/data/Fields.js'][33] = 0;
  _$jscoverage['protocol/data/Fields.js'][34] = 0;
  _$jscoverage['protocol/data/Fields.js'][35] = 0;
  _$jscoverage['protocol/data/Fields.js'][36] = 0;
  _$jscoverage['protocol/data/Fields.js'][38] = 0;
  _$jscoverage['protocol/data/Fields.js'][39] = 0;
  _$jscoverage['protocol/data/Fields.js'][41] = 0;
  _$jscoverage['protocol/data/Fields.js'][44] = 0;
  _$jscoverage['protocol/data/Fields.js'][47] = 0;
  _$jscoverage['protocol/data/Fields.js'][48] = 0;
  _$jscoverage['protocol/data/Fields.js'][49] = 0;
  _$jscoverage['protocol/data/Fields.js'][51] = 0;
  _$jscoverage['protocol/data/Fields.js'][52] = 0;
  _$jscoverage['protocol/data/Fields.js'][54] = 0;
  _$jscoverage['protocol/data/Fields.js'][55] = 0;
  _$jscoverage['protocol/data/Fields.js'][57] = 0;
  _$jscoverage['protocol/data/Fields.js'][58] = 0;
  _$jscoverage['protocol/data/Fields.js'][59] = 0;
  _$jscoverage['protocol/data/Fields.js'][60] = 0;
  _$jscoverage['protocol/data/Fields.js'][61] = 0;
  _$jscoverage['protocol/data/Fields.js'][62] = 0;
  _$jscoverage['protocol/data/Fields.js'][63] = 0;
  _$jscoverage['protocol/data/Fields.js'][65] = 0;
  _$jscoverage['protocol/data/Fields.js'][67] = 0;
  _$jscoverage['protocol/data/Fields.js'][68] = 0;
  _$jscoverage['protocol/data/Fields.js'][69] = 0;
  _$jscoverage['protocol/data/Fields.js'][70] = 0;
  _$jscoverage['protocol/data/Fields.js'][72] = 0;
  _$jscoverage['protocol/data/Fields.js'][73] = 0;
  _$jscoverage['protocol/data/Fields.js'][74] = 0;
  _$jscoverage['protocol/data/Fields.js'][75] = 0;
  _$jscoverage['protocol/data/Fields.js'][77] = 0;
  _$jscoverage['protocol/data/Fields.js'][78] = 0;
  _$jscoverage['protocol/data/Fields.js'][80] = 0;
  _$jscoverage['protocol/data/Fields.js'][81] = 0;
  _$jscoverage['protocol/data/Fields.js'][82] = 0;
  _$jscoverage['protocol/data/Fields.js'][85] = 0;
  _$jscoverage['protocol/data/Fields.js'][86] = 0;
  _$jscoverage['protocol/data/Fields.js'][87] = 0;
  _$jscoverage['protocol/data/Fields.js'][88] = 0;
  _$jscoverage['protocol/data/Fields.js'][89] = 0;
  _$jscoverage['protocol/data/Fields.js'][90] = 0;
  _$jscoverage['protocol/data/Fields.js'][91] = 0;
  _$jscoverage['protocol/data/Fields.js'][93] = 0;
  _$jscoverage['protocol/data/Fields.js'][96] = 0;
  _$jscoverage['protocol/data/Fields.js'][99] = 0;
  _$jscoverage['protocol/data/Fields.js'][101] = 0;
  _$jscoverage['protocol/data/Fields.js'][104] = 0;
  _$jscoverage['protocol/data/Fields.js'][105] = 0;
  _$jscoverage['protocol/data/Fields.js'][106] = 0;
  _$jscoverage['protocol/data/Fields.js'][107] = 0;
  _$jscoverage['protocol/data/Fields.js'][108] = 0;
  _$jscoverage['protocol/data/Fields.js'][110] = 0;
}
_$jscoverage['protocol/data/Fields.js'][14]++;
"use strict";
_$jscoverage['protocol/data/Fields.js'][16]++;
var util = require("../../util");
_$jscoverage['protocol/data/Fields.js'][18]++;
exports.read = read;
_$jscoverage['protocol/data/Fields.js'][19]++;
exports.write = write;
_$jscoverage['protocol/data/Fields.js'][20]++;
exports.getByteLength = getByteLength;
_$jscoverage['protocol/data/Fields.js'][21]++;
exports.getArgumentCount = getArgumentCount;
_$jscoverage['protocol/data/Fields.js'][23]++;
function read(part) {
  _$jscoverage['protocol/data/Fields.js'][24]++;
  var offset = 0;
  _$jscoverage['protocol/data/Fields.js'][25]++;
  var buffer = part.buffer;
  _$jscoverage['protocol/data/Fields.js'][26]++;
  var fields = [];
  _$jscoverage['protocol/data/Fields.js'][28]++;
  var numberOfFields = buffer.readUInt16LE(offset);
  _$jscoverage['protocol/data/Fields.js'][29]++;
  offset += 2;
  _$jscoverage['protocol/data/Fields.js'][30]++;
  var fieldLength;
  _$jscoverage['protocol/data/Fields.js'][31]++;
  for (var i = 0; i < numberOfFields; i++) {
    _$jscoverage['protocol/data/Fields.js'][32]++;
    fieldLength = buffer[offset];
    _$jscoverage['protocol/data/Fields.js'][33]++;
    offset += 1;
    _$jscoverage['protocol/data/Fields.js'][34]++;
    if (fieldLength > 245) {
      _$jscoverage['protocol/data/Fields.js'][35]++;
      fieldLength = buffer.readUInt16LE(offset);
      _$jscoverage['protocol/data/Fields.js'][36]++;
      offset += 2;
    }
    _$jscoverage['protocol/data/Fields.js'][38]++;
    fields.push(buffer.slice(offset, offset + fieldLength));
    _$jscoverage['protocol/data/Fields.js'][39]++;
    offset += fieldLength;
}
  _$jscoverage['protocol/data/Fields.js'][41]++;
  return fields;
}
_$jscoverage['protocol/data/Fields.js'][44]++;
function write(part, fields) {
  _$jscoverage['protocol/data/Fields.js'][47]++;
  var offset = 0;
  _$jscoverage['protocol/data/Fields.js'][48]++;
  part = part || {};
  _$jscoverage['protocol/data/Fields.js'][49]++;
  fields = fields || this;
  _$jscoverage['protocol/data/Fields.js'][51]++;
  var byteLength = getByteLength(fields);
  _$jscoverage['protocol/data/Fields.js'][52]++;
  var buffer = new Buffer(byteLength);
  _$jscoverage['protocol/data/Fields.js'][54]++;
  buffer.writeUInt16LE(fields.length, 0);
  _$jscoverage['protocol/data/Fields.js'][55]++;
  offset += 2;
  _$jscoverage['protocol/data/Fields.js'][57]++;
  var field, fieldLength, data;
  _$jscoverage['protocol/data/Fields.js'][58]++;
  for (var i = 0; i < fields.length; i++) {
    _$jscoverage['protocol/data/Fields.js'][59]++;
    field = fields[i];
    _$jscoverage['protocol/data/Fields.js'][60]++;
    if (Buffer.isBuffer(field)) {
      _$jscoverage['protocol/data/Fields.js'][61]++;
      data = field;
    }
    else {
      _$jscoverage['protocol/data/Fields.js'][62]++;
      if (util.isArray(field)) {
        _$jscoverage['protocol/data/Fields.js'][63]++;
        data = write({}, field).buffer;
      }
      else {
        _$jscoverage['protocol/data/Fields.js'][65]++;
        data = new Buffer(field, "ascii");
      }
    }
    _$jscoverage['protocol/data/Fields.js'][67]++;
    fieldLength = data.length;
    _$jscoverage['protocol/data/Fields.js'][68]++;
    if (fieldLength <= 245) {
      _$jscoverage['protocol/data/Fields.js'][69]++;
      buffer[offset] = fieldLength;
      _$jscoverage['protocol/data/Fields.js'][70]++;
      offset += 1;
    }
    else {
      _$jscoverage['protocol/data/Fields.js'][72]++;
      buffer[offset] = 246;
      _$jscoverage['protocol/data/Fields.js'][73]++;
      offset += 1;
      _$jscoverage['protocol/data/Fields.js'][74]++;
      buffer.writeUInt16LE(fieldLength, offset);
      _$jscoverage['protocol/data/Fields.js'][75]++;
      offset += 2;
    }
    _$jscoverage['protocol/data/Fields.js'][77]++;
    data.copy(buffer, offset);
    _$jscoverage['protocol/data/Fields.js'][78]++;
    offset += fieldLength;
}
  _$jscoverage['protocol/data/Fields.js'][80]++;
  part.argumentCount = getArgumentCount(fields);
  _$jscoverage['protocol/data/Fields.js'][81]++;
  part.buffer = buffer;
  _$jscoverage['protocol/data/Fields.js'][82]++;
  return part;
}
_$jscoverage['protocol/data/Fields.js'][85]++;
function getByteLength(fields) {
  _$jscoverage['protocol/data/Fields.js'][86]++;
  var byteLength = 2;
  _$jscoverage['protocol/data/Fields.js'][87]++;
  var fieldLength;
  _$jscoverage['protocol/data/Fields.js'][88]++;
  for (var i = 0; i < fields.length; i++) {
    _$jscoverage['protocol/data/Fields.js'][89]++;
    fieldLength = getByteLengthOfField(fields[i]);
    _$jscoverage['protocol/data/Fields.js'][90]++;
    if (fieldLength <= 245) {
      _$jscoverage['protocol/data/Fields.js'][91]++;
      byteLength += fieldLength + 1;
    }
    else {
      _$jscoverage['protocol/data/Fields.js'][93]++;
      byteLength += fieldLength + 3;
    }
}
  _$jscoverage['protocol/data/Fields.js'][96]++;
  return byteLength;
}
_$jscoverage['protocol/data/Fields.js'][99]++;
function getArgumentCount(fields) {
  _$jscoverage['protocol/data/Fields.js'][101]++;
  return 1;
}
_$jscoverage['protocol/data/Fields.js'][104]++;
function getByteLengthOfField(field) {
  _$jscoverage['protocol/data/Fields.js'][105]++;
  if (Buffer.isBuffer(field)) {
    _$jscoverage['protocol/data/Fields.js'][106]++;
    return field.length;
  }
  else {
    _$jscoverage['protocol/data/Fields.js'][107]++;
    if (util.isArray(field)) {
      _$jscoverage['protocol/data/Fields.js'][108]++;
      return getByteLength(field);
    }
  }
  _$jscoverage['protocol/data/Fields.js'][110]++;
  return Buffer.byteLength(field, "ascii");
}
_$jscoverage['protocol/data/Fields.js'].source = ["// Copyright 2013 SAP AG.","//","// Licensed under the Apache License, Version 2.0 (the \"License\");","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","// http: //www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing,","// software distributed under the License is distributed on an","// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,","// either express or implied. See the License for the specific","// language governing permissions and limitations under the License.","'use strict';","","var util = require('../../util');","","exports.read = read;","exports.write = write;","exports.getByteLength = getByteLength;","exports.getArgumentCount = getArgumentCount;","","function read(part) {","  var offset = 0;","  var buffer = part.buffer;","  var fields = [];","","  var numberOfFields = buffer.readUInt16LE(offset);","  offset += 2;","  var fieldLength;","  for (var i = 0; i &lt; numberOfFields; i++) {","    fieldLength = buffer[offset];","    offset += 1;","    if (fieldLength &gt; 245) {","      fieldLength = buffer.readUInt16LE(offset);","      offset += 2;","    }","    fields.push(buffer.slice(offset, offset + fieldLength));","    offset += fieldLength;","  }","  return fields;","}","","function write(part, fields) {","  /* jshint validthis:true */","","  var offset = 0;","  part = part || {};","  fields = fields || this;","","  var byteLength = getByteLength(fields);","  var buffer = new Buffer(byteLength);","","  buffer.writeUInt16LE(fields.length, 0);","  offset += 2;","","  var field, fieldLength, data;","  for (var i = 0; i &lt; fields.length; i++) {","    field = fields[i];","    if (Buffer.isBuffer(field)) {","      data = field;","    } else if (util.isArray(field)) {","      data = write({}, field).buffer;","    } else {","      data = new Buffer(field, 'ascii');","    }","    fieldLength = data.length;","    if (fieldLength &lt;= 245) {","      buffer[offset] = fieldLength;","      offset += 1;","    } else {","      buffer[offset] = 0xf6;","      offset += 1;","      buffer.writeUInt16LE(fieldLength, offset);","      offset += 2;","    }","    data.copy(buffer, offset);","    offset += fieldLength;","  }","  part.argumentCount = getArgumentCount(fields);","  part.buffer = buffer;","  return part;","}","","function getByteLength(fields) {","  var byteLength = 2;","  var fieldLength;","  for (var i = 0; i &lt; fields.length; i++) {","    fieldLength = getByteLengthOfField(fields[i]);","    if (fieldLength &lt;= 245) {","      byteLength += fieldLength + 1;","    } else {","      byteLength += fieldLength + 3;","    }","  }","  return byteLength;","}","","function getArgumentCount(fields) {","  /* jshint unused:false */","  return 1;","}","","function getByteLengthOfField(field) {","  if (Buffer.isBuffer(field)) {","    return field.length;","  } else if (util.isArray(field)) {","    return getByteLength(field);","  }","  return Buffer.byteLength(field, 'ascii');","}"];
