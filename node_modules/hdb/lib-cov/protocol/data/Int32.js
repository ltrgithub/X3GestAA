/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['protocol/data/Int32.js']) {
  _$jscoverage['protocol/data/Int32.js'] = [];
  _$jscoverage['protocol/data/Int32.js'][14] = 0;
  _$jscoverage['protocol/data/Int32.js'][16] = 0;
  _$jscoverage['protocol/data/Int32.js'][17] = 0;
  _$jscoverage['protocol/data/Int32.js'][18] = 0;
  _$jscoverage['protocol/data/Int32.js'][19] = 0;
  _$jscoverage['protocol/data/Int32.js'][21] = 0;
  _$jscoverage['protocol/data/Int32.js'][22] = 0;
  _$jscoverage['protocol/data/Int32.js'][23] = 0;
  _$jscoverage['protocol/data/Int32.js'][25] = 0;
  _$jscoverage['protocol/data/Int32.js'][26] = 0;
  _$jscoverage['protocol/data/Int32.js'][27] = 0;
  _$jscoverage['protocol/data/Int32.js'][28] = 0;
  _$jscoverage['protocol/data/Int32.js'][29] = 0;
  _$jscoverage['protocol/data/Int32.js'][30] = 0;
  _$jscoverage['protocol/data/Int32.js'][32] = 0;
  _$jscoverage['protocol/data/Int32.js'][35] = 0;
  _$jscoverage['protocol/data/Int32.js'][38] = 0;
  _$jscoverage['protocol/data/Int32.js'][39] = 0;
  _$jscoverage['protocol/data/Int32.js'][40] = 0;
  _$jscoverage['protocol/data/Int32.js'][41] = 0;
  _$jscoverage['protocol/data/Int32.js'][42] = 0;
  _$jscoverage['protocol/data/Int32.js'][45] = 0;
  _$jscoverage['protocol/data/Int32.js'][47] = 0;
  _$jscoverage['protocol/data/Int32.js'][50] = 0;
  _$jscoverage['protocol/data/Int32.js'][52] = 0;
}
_$jscoverage['protocol/data/Int32.js'][14]++;
"use strict";
_$jscoverage['protocol/data/Int32.js'][16]++;
exports.read = read;
_$jscoverage['protocol/data/Int32.js'][17]++;
exports.write = write;
_$jscoverage['protocol/data/Int32.js'][18]++;
exports.getByteLength = getByteLength;
_$jscoverage['protocol/data/Int32.js'][19]++;
exports.getArgumentCount = getArgumentCount;
_$jscoverage['protocol/data/Int32.js'][21]++;
function read(part) {
  _$jscoverage['protocol/data/Int32.js'][22]++;
  if (part.argumentCount === 1) {
    _$jscoverage['protocol/data/Int32.js'][23]++;
    return part.buffer.readInt32LE(0);
  }
  _$jscoverage['protocol/data/Int32.js'][25]++;
  var offset = 0;
  _$jscoverage['protocol/data/Int32.js'][26]++;
  var buffer = part.buffer;
  _$jscoverage['protocol/data/Int32.js'][27]++;
  var args = [];
  _$jscoverage['protocol/data/Int32.js'][28]++;
  for (var i = 0; i < part.argumentCount; i++) {
    _$jscoverage['protocol/data/Int32.js'][29]++;
    args.push(buffer.readInt32LE(offset));
    _$jscoverage['protocol/data/Int32.js'][30]++;
    offset += 4;
}
  _$jscoverage['protocol/data/Int32.js'][32]++;
  return args;
}
_$jscoverage['protocol/data/Int32.js'][35]++;
function write(part, value) {
  _$jscoverage['protocol/data/Int32.js'][38]++;
  part = part || {};
  _$jscoverage['protocol/data/Int32.js'][39]++;
  part.argumentCount = getArgumentCount(value);
  _$jscoverage['protocol/data/Int32.js'][40]++;
  part.buffer = new Buffer(4);
  _$jscoverage['protocol/data/Int32.js'][41]++;
  part.buffer.writeInt32LE(value, 0);
  _$jscoverage['protocol/data/Int32.js'][42]++;
  return part;
}
_$jscoverage['protocol/data/Int32.js'][45]++;
function getByteLength(value) {
  _$jscoverage['protocol/data/Int32.js'][47]++;
  return 4;
}
_$jscoverage['protocol/data/Int32.js'][50]++;
function getArgumentCount(value) {
  _$jscoverage['protocol/data/Int32.js'][52]++;
  return 1;
}
_$jscoverage['protocol/data/Int32.js'].source = ["// Copyright 2013 SAP AG.","//","// Licensed under the Apache License, Version 2.0 (the \"License\");","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","// http: //www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing,","// software distributed under the License is distributed on an","// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,","// either express or implied. See the License for the specific","// language governing permissions and limitations under the License.","'use strict';","","exports.read = read;","exports.write = write;","exports.getByteLength = getByteLength;","exports.getArgumentCount = getArgumentCount;","","function read(part) {","  if (part.argumentCount === 1) {","    return part.buffer.readInt32LE(0);","  }","  var offset = 0;","  var buffer = part.buffer;","  var args = [];","  for (var i = 0; i &lt; part.argumentCount; i++) {","    args.push(buffer.readInt32LE(offset));","    offset += 4;","  }","  return args;","}","","function write(part, value) {","  /* jshint validthis:true */","","  part = part || {};","  part.argumentCount = getArgumentCount(value);","  part.buffer = new Buffer(4);","  part.buffer.writeInt32LE(value, 0);","  return part;","}","","function getByteLength(value) {","  /* jshint unused:false */","  return 4;","}","","function getArgumentCount(value) {","  /* jshint unused:false */","  return 1;","}"];
