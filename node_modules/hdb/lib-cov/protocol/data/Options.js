/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['protocol/data/Options.js']) {
  _$jscoverage['protocol/data/Options.js'] = [];
  _$jscoverage['protocol/data/Options.js'][14] = 0;
  _$jscoverage['protocol/data/Options.js'][16] = 0;
  _$jscoverage['protocol/data/Options.js'][17] = 0;
  _$jscoverage['protocol/data/Options.js'][18] = 0;
  _$jscoverage['protocol/data/Options.js'][19] = 0;
  _$jscoverage['protocol/data/Options.js'][21] = 0;
  _$jscoverage['protocol/data/Options.js'][22] = 0;
  _$jscoverage['protocol/data/Options.js'][23] = 0;
  _$jscoverage['protocol/data/Options.js'][24] = 0;
  _$jscoverage['protocol/data/Options.js'][25] = 0;
  _$jscoverage['protocol/data/Options.js'][26] = 0;
  _$jscoverage['protocol/data/Options.js'][28] = 0;
  _$jscoverage['protocol/data/Options.js'][29] = 0;
  _$jscoverage['protocol/data/Options.js'][30] = 0;
  _$jscoverage['protocol/data/Options.js'][31] = 0;
  _$jscoverage['protocol/data/Options.js'][32] = 0;
  _$jscoverage['protocol/data/Options.js'][34] = 0;
  _$jscoverage['protocol/data/Options.js'][37] = 0;
  _$jscoverage['protocol/data/Options.js'][38] = 0;
  _$jscoverage['protocol/data/Options.js'][40] = 0;
  _$jscoverage['protocol/data/Options.js'][41] = 0;
  _$jscoverage['protocol/data/Options.js'][42] = 0;
  _$jscoverage['protocol/data/Options.js'][43] = 0;
  _$jscoverage['protocol/data/Options.js'][44] = 0;
  _$jscoverage['protocol/data/Options.js'][47] = 0;
  _$jscoverage['protocol/data/Options.js'][48] = 0;
  _$jscoverage['protocol/data/Options.js'][51] = 0;
  _$jscoverage['protocol/data/Options.js'][54] = 0;
  _$jscoverage['protocol/data/Options.js'][55] = 0;
  _$jscoverage['protocol/data/Options.js'][56] = 0;
  _$jscoverage['protocol/data/Options.js'][57] = 0;
  _$jscoverage['protocol/data/Options.js'][58] = 0;
  _$jscoverage['protocol/data/Options.js'][63] = 0;
  _$jscoverage['protocol/data/Options.js'][64] = 0;
  _$jscoverage['protocol/data/Options.js'][66] = 0;
  _$jscoverage['protocol/data/Options.js'][67] = 0;
  _$jscoverage['protocol/data/Options.js'][68] = 0;
  _$jscoverage['protocol/data/Options.js'][70] = 0;
  _$jscoverage['protocol/data/Options.js'][71] = 0;
  _$jscoverage['protocol/data/Options.js'][72] = 0;
  _$jscoverage['protocol/data/Options.js'][74] = 0;
  _$jscoverage['protocol/data/Options.js'][75] = 0;
  _$jscoverage['protocol/data/Options.js'][76] = 0;
  _$jscoverage['protocol/data/Options.js'][78] = 0;
  _$jscoverage['protocol/data/Options.js'][79] = 0;
  _$jscoverage['protocol/data/Options.js'][80] = 0;
  _$jscoverage['protocol/data/Options.js'][82] = 0;
  _$jscoverage['protocol/data/Options.js'][83] = 0;
  _$jscoverage['protocol/data/Options.js'][84] = 0;
  _$jscoverage['protocol/data/Options.js'][85] = 0;
  _$jscoverage['protocol/data/Options.js'][86] = 0;
  _$jscoverage['protocol/data/Options.js'][88] = 0;
  _$jscoverage['protocol/data/Options.js'][89] = 0;
  _$jscoverage['protocol/data/Options.js'][90] = 0;
  _$jscoverage['protocol/data/Options.js'][91] = 0;
  _$jscoverage['protocol/data/Options.js'][92] = 0;
  _$jscoverage['protocol/data/Options.js'][93] = 0;
  _$jscoverage['protocol/data/Options.js'][95] = 0;
  _$jscoverage['protocol/data/Options.js'][97] = 0;
  _$jscoverage['protocol/data/Options.js'][100] = 0;
  _$jscoverage['protocol/data/Options.js'][103] = 0;
  _$jscoverage['protocol/data/Options.js'][104] = 0;
  _$jscoverage['protocol/data/Options.js'][105] = 0;
  _$jscoverage['protocol/data/Options.js'][106] = 0;
  _$jscoverage['protocol/data/Options.js'][107] = 0;
  _$jscoverage['protocol/data/Options.js'][108] = 0;
  _$jscoverage['protocol/data/Options.js'][109] = 0;
  _$jscoverage['protocol/data/Options.js'][110] = 0;
  _$jscoverage['protocol/data/Options.js'][111] = 0;
  _$jscoverage['protocol/data/Options.js'][112] = 0;
  _$jscoverage['protocol/data/Options.js'][113] = 0;
  _$jscoverage['protocol/data/Options.js'][114] = 0;
  _$jscoverage['protocol/data/Options.js'][116] = 0;
  _$jscoverage['protocol/data/Options.js'][117] = 0;
  _$jscoverage['protocol/data/Options.js'][118] = 0;
  _$jscoverage['protocol/data/Options.js'][120] = 0;
  _$jscoverage['protocol/data/Options.js'][121] = 0;
  _$jscoverage['protocol/data/Options.js'][122] = 0;
  _$jscoverage['protocol/data/Options.js'][124] = 0;
  _$jscoverage['protocol/data/Options.js'][125] = 0;
  _$jscoverage['protocol/data/Options.js'][126] = 0;
  _$jscoverage['protocol/data/Options.js'][128] = 0;
  _$jscoverage['protocol/data/Options.js'][129] = 0;
  _$jscoverage['protocol/data/Options.js'][130] = 0;
  _$jscoverage['protocol/data/Options.js'][132] = 0;
  _$jscoverage['protocol/data/Options.js'][133] = 0;
  _$jscoverage['protocol/data/Options.js'][134] = 0;
  _$jscoverage['protocol/data/Options.js'][135] = 0;
  _$jscoverage['protocol/data/Options.js'][136] = 0;
  _$jscoverage['protocol/data/Options.js'][137] = 0;
  _$jscoverage['protocol/data/Options.js'][139] = 0;
  _$jscoverage['protocol/data/Options.js'][140] = 0;
  _$jscoverage['protocol/data/Options.js'][141] = 0;
  _$jscoverage['protocol/data/Options.js'][142] = 0;
  _$jscoverage['protocol/data/Options.js'][143] = 0;
  _$jscoverage['protocol/data/Options.js'][144] = 0;
  _$jscoverage['protocol/data/Options.js'][147] = 0;
  _$jscoverage['protocol/data/Options.js'][148] = 0;
  _$jscoverage['protocol/data/Options.js'][149] = 0;
  _$jscoverage['protocol/data/Options.js'][152] = 0;
  _$jscoverage['protocol/data/Options.js'][153] = 0;
  _$jscoverage['protocol/data/Options.js'][154] = 0;
  _$jscoverage['protocol/data/Options.js'][155] = 0;
  _$jscoverage['protocol/data/Options.js'][156] = 0;
  _$jscoverage['protocol/data/Options.js'][157] = 0;
  _$jscoverage['protocol/data/Options.js'][159] = 0;
  _$jscoverage['protocol/data/Options.js'][160] = 0;
  _$jscoverage['protocol/data/Options.js'][162] = 0;
  _$jscoverage['protocol/data/Options.js'][163] = 0;
  _$jscoverage['protocol/data/Options.js'][165] = 0;
  _$jscoverage['protocol/data/Options.js'][166] = 0;
  _$jscoverage['protocol/data/Options.js'][168] = 0;
  _$jscoverage['protocol/data/Options.js'][169] = 0;
  _$jscoverage['protocol/data/Options.js'][171] = 0;
  _$jscoverage['protocol/data/Options.js'][172] = 0;
  _$jscoverage['protocol/data/Options.js'][174] = 0;
  _$jscoverage['protocol/data/Options.js'][175] = 0;
  _$jscoverage['protocol/data/Options.js'][178] = 0;
  _$jscoverage['protocol/data/Options.js'][181] = 0;
  _$jscoverage['protocol/data/Options.js'][182] = 0;
}
_$jscoverage['protocol/data/Options.js'][14]++;
"use strict";
_$jscoverage['protocol/data/Options.js'][16]++;
var util = require("../../util");
_$jscoverage['protocol/data/Options.js'][17]++;
var bignum = util.bignum;
_$jscoverage['protocol/data/Options.js'][18]++;
var common = require("../common");
_$jscoverage['protocol/data/Options.js'][19]++;
var TypeCode = common.TypeCode;
_$jscoverage['protocol/data/Options.js'][21]++;
exports.read = read;
_$jscoverage['protocol/data/Options.js'][22]++;
exports.toObject = toObject;
_$jscoverage['protocol/data/Options.js'][23]++;
exports._read = _read;
_$jscoverage['protocol/data/Options.js'][24]++;
exports.write = write;
_$jscoverage['protocol/data/Options.js'][25]++;
exports.getByteLength = getByteLength;
_$jscoverage['protocol/data/Options.js'][26]++;
exports.getArgumentCount = getArgumentCount;
_$jscoverage['protocol/data/Options.js'][28]++;
function read(part, properties) {
  _$jscoverage['protocol/data/Options.js'][29]++;
  var options = new Array(part.argumentCount);
  _$jscoverage['protocol/data/Options.js'][30]++;
  _read.call(options, part.buffer, 0);
  _$jscoverage['protocol/data/Options.js'][31]++;
  if (util.isObject(properties)) {
    _$jscoverage['protocol/data/Options.js'][32]++;
    return toObject(options, properties);
  }
  _$jscoverage['protocol/data/Options.js'][34]++;
  return options;
}
_$jscoverage['protocol/data/Options.js'][37]++;
function toObject(options, properties) {
  _$jscoverage['protocol/data/Options.js'][38]++;
  var obj = {};
  _$jscoverage['protocol/data/Options.js'][40]++;
  function setOption(option) {
    _$jscoverage['protocol/data/Options.js'][41]++;
    var name = option.name;
    _$jscoverage['protocol/data/Options.js'][42]++;
    if (properties.hasOwnProperty(name)) {
      _$jscoverage['protocol/data/Options.js'][43]++;
      var propertyName = util._2cc(properties[name]);
      _$jscoverage['protocol/data/Options.js'][44]++;
      obj[propertyName] = option.value;
    }
}
  _$jscoverage['protocol/data/Options.js'][47]++;
  options.forEach(setOption);
  _$jscoverage['protocol/data/Options.js'][48]++;
  return obj;
}
_$jscoverage['protocol/data/Options.js'][51]++;
function _read(buffer, offset) {
  _$jscoverage['protocol/data/Options.js'][54]++;
  offset = offset || 0;
  _$jscoverage['protocol/data/Options.js'][55]++;
  var options = this;
  _$jscoverage['protocol/data/Options.js'][56]++;
  var option, length;
  _$jscoverage['protocol/data/Options.js'][57]++;
  for (var i = 0; i < options.length; i++) {
    _$jscoverage['protocol/data/Options.js'][58]++;
    option = {name: buffer[offset], type: buffer[offset + 1], value: undefined};
    _$jscoverage['protocol/data/Options.js'][63]++;
    offset += 2;
    _$jscoverage['protocol/data/Options.js'][64]++;
    switch (option.type) {
    case TypeCode.BOOLEAN:
      _$jscoverage['protocol/data/Options.js'][66]++;
      option.value = buffer[offset]? true: false;
      _$jscoverage['protocol/data/Options.js'][67]++;
      offset += 1;
      _$jscoverage['protocol/data/Options.js'][68]++;
      break;
    case TypeCode.INT:
      _$jscoverage['protocol/data/Options.js'][70]++;
      option.value = buffer.readInt32LE(offset);
      _$jscoverage['protocol/data/Options.js'][71]++;
      offset += 4;
      _$jscoverage['protocol/data/Options.js'][72]++;
      break;
    case TypeCode.BIGINT:
      _$jscoverage['protocol/data/Options.js'][74]++;
      option.value = bignum.readInt64LE(buffer, offset);
      _$jscoverage['protocol/data/Options.js'][75]++;
      offset += 8;
      _$jscoverage['protocol/data/Options.js'][76]++;
      break;
    case TypeCode.DOUBLE:
      _$jscoverage['protocol/data/Options.js'][78]++;
      option.value = buffer.readDoubleLE(offset);
      _$jscoverage['protocol/data/Options.js'][79]++;
      offset += 8;
      _$jscoverage['protocol/data/Options.js'][80]++;
      break;
    case TypeCode.STRING:
      _$jscoverage['protocol/data/Options.js'][82]++;
      length = buffer.readInt16LE(offset);
      _$jscoverage['protocol/data/Options.js'][83]++;
      offset += 2;
      _$jscoverage['protocol/data/Options.js'][84]++;
      option.value = buffer.toString("utf-8", offset, offset + length);
      _$jscoverage['protocol/data/Options.js'][85]++;
      offset += length;
      _$jscoverage['protocol/data/Options.js'][86]++;
      break;
    case TypeCode.BSTRING:
      _$jscoverage['protocol/data/Options.js'][88]++;
      length = buffer.readInt16LE(offset);
      _$jscoverage['protocol/data/Options.js'][89]++;
      offset += 2;
      _$jscoverage['protocol/data/Options.js'][90]++;
      option.value = new Buffer(length);
      _$jscoverage['protocol/data/Options.js'][91]++;
      buffer.copy(option.value, 0, offset, offset + length);
      _$jscoverage['protocol/data/Options.js'][92]++;
      offset += length;
      _$jscoverage['protocol/data/Options.js'][93]++;
      break;
    }
    _$jscoverage['protocol/data/Options.js'][95]++;
    options[i] = option;
}
  _$jscoverage['protocol/data/Options.js'][97]++;
  return offset;
}
_$jscoverage['protocol/data/Options.js'][100]++;
function write(part, options) {
  _$jscoverage['protocol/data/Options.js'][103]++;
  var offset = 0;
  _$jscoverage['protocol/data/Options.js'][104]++;
  part = part || {};
  _$jscoverage['protocol/data/Options.js'][105]++;
  options = options || this;
  _$jscoverage['protocol/data/Options.js'][106]++;
  var byteLength = getByteLength(options);
  _$jscoverage['protocol/data/Options.js'][107]++;
  var buffer = new Buffer(byteLength);
  _$jscoverage['protocol/data/Options.js'][108]++;
  var option;
  _$jscoverage['protocol/data/Options.js'][109]++;
  for (var i = 0; i < options.length; i++) {
    _$jscoverage['protocol/data/Options.js'][110]++;
    option = options[i];
    _$jscoverage['protocol/data/Options.js'][111]++;
    buffer[offset] = option.name;
    _$jscoverage['protocol/data/Options.js'][112]++;
    buffer[offset + 1] = option.type;
    _$jscoverage['protocol/data/Options.js'][113]++;
    offset += 2;
    _$jscoverage['protocol/data/Options.js'][114]++;
    switch (option.type) {
    case TypeCode.BOOLEAN:
      _$jscoverage['protocol/data/Options.js'][116]++;
      buffer[offset] = ! ! option.value? 1: 0;
      _$jscoverage['protocol/data/Options.js'][117]++;
      offset += 1;
      _$jscoverage['protocol/data/Options.js'][118]++;
      break;
    case TypeCode.INT:
      _$jscoverage['protocol/data/Options.js'][120]++;
      buffer.writeInt32LE(option.value, offset);
      _$jscoverage['protocol/data/Options.js'][121]++;
      offset += 4;
      _$jscoverage['protocol/data/Options.js'][122]++;
      break;
    case TypeCode.BIGINT:
      _$jscoverage['protocol/data/Options.js'][124]++;
      buffer.writeInt64LE(option.value, offset);
      _$jscoverage['protocol/data/Options.js'][125]++;
      offset += 8;
      _$jscoverage['protocol/data/Options.js'][126]++;
      break;
    case TypeCode.DOUBLE:
      _$jscoverage['protocol/data/Options.js'][128]++;
      buffer.writeDoubleLE(option.value, offset);
      _$jscoverage['protocol/data/Options.js'][129]++;
      offset += 8;
      _$jscoverage['protocol/data/Options.js'][130]++;
      break;
    case TypeCode.STRING:
      _$jscoverage['protocol/data/Options.js'][132]++;
      byteLength = Buffer.byteLength(option.value, "utf-8");
      _$jscoverage['protocol/data/Options.js'][133]++;
      buffer.writeInt16LE(byteLength, offset);
      _$jscoverage['protocol/data/Options.js'][134]++;
      offset += 2;
      _$jscoverage['protocol/data/Options.js'][135]++;
      buffer.write(option.value, offset, byteLength, "utf-8");
      _$jscoverage['protocol/data/Options.js'][136]++;
      offset += byteLength;
      _$jscoverage['protocol/data/Options.js'][137]++;
      break;
    case TypeCode.BSTRING:
      _$jscoverage['protocol/data/Options.js'][139]++;
      byteLength = option.value.length;
      _$jscoverage['protocol/data/Options.js'][140]++;
      buffer.writeInt16LE(byteLength, offset);
      _$jscoverage['protocol/data/Options.js'][141]++;
      offset += 2;
      _$jscoverage['protocol/data/Options.js'][142]++;
      option.value.copy(buffer, offset);
      _$jscoverage['protocol/data/Options.js'][143]++;
      offset += byteLength;
      _$jscoverage['protocol/data/Options.js'][144]++;
      break;
    }
}
  _$jscoverage['protocol/data/Options.js'][147]++;
  part.argumentCount = options.length;
  _$jscoverage['protocol/data/Options.js'][148]++;
  part.buffer = buffer;
  _$jscoverage['protocol/data/Options.js'][149]++;
  return part;
}
_$jscoverage['protocol/data/Options.js'][152]++;
function getByteLength(options) {
  _$jscoverage['protocol/data/Options.js'][153]++;
  var byteLength = 0;
  _$jscoverage['protocol/data/Options.js'][154]++;
  var option;
  _$jscoverage['protocol/data/Options.js'][155]++;
  for (var i = 0; i < options.length; i++) {
    _$jscoverage['protocol/data/Options.js'][156]++;
    option = options[i];
    _$jscoverage['protocol/data/Options.js'][157]++;
    switch (option.type) {
    case TypeCode.BOOLEAN:
      _$jscoverage['protocol/data/Options.js'][159]++;
      byteLength += 3;
      _$jscoverage['protocol/data/Options.js'][160]++;
      break;
    case TypeCode.INT:
      _$jscoverage['protocol/data/Options.js'][162]++;
      byteLength += 6;
      _$jscoverage['protocol/data/Options.js'][163]++;
      break;
    case TypeCode.BIGINT:
      _$jscoverage['protocol/data/Options.js'][165]++;
      byteLength += 10;
      _$jscoverage['protocol/data/Options.js'][166]++;
      break;
    case TypeCode.DOUBLE:
      _$jscoverage['protocol/data/Options.js'][168]++;
      byteLength += 10;
      _$jscoverage['protocol/data/Options.js'][169]++;
      break;
    case TypeCode.STRING:
      _$jscoverage['protocol/data/Options.js'][171]++;
      byteLength += 4 + Buffer.byteLength(option.value, "utf-8");
      _$jscoverage['protocol/data/Options.js'][172]++;
      break;
    case TypeCode.BSTRING:
      _$jscoverage['protocol/data/Options.js'][174]++;
      byteLength += 4 + option.value.length;
      _$jscoverage['protocol/data/Options.js'][175]++;
      break;
    }
}
  _$jscoverage['protocol/data/Options.js'][178]++;
  return byteLength;
}
_$jscoverage['protocol/data/Options.js'][181]++;
function getArgumentCount(options) {
  _$jscoverage['protocol/data/Options.js'][182]++;
  return options.length;
}
_$jscoverage['protocol/data/Options.js'].source = ["// Copyright 2013 SAP AG.","//","// Licensed under the Apache License, Version 2.0 (the \"License\");","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","// http: //www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing,","// software distributed under the License is distributed on an","// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,","// either express or implied. See the License for the specific","// language governing permissions and limitations under the License.","'use strict';","","var util = require('../../util');","var bignum = util.bignum;","var common = require('../common');","var TypeCode = common.TypeCode;","","exports.read = read;","exports.toObject = toObject;","exports._read = _read;","exports.write = write;","exports.getByteLength = getByteLength;","exports.getArgumentCount = getArgumentCount;","","function read(part, properties) {","  var options = new Array(part.argumentCount);","  _read.call(options, part.buffer, 0);","  if (util.isObject(properties)) {","    return toObject(options, properties);","  }","  return options;","}","","function toObject(options, properties) {","  var obj = {};","","  function setOption(option) {","    var name = option.name;","    if (properties.hasOwnProperty(name)) {","      var propertyName = util._2cc(properties[name]);","      obj[propertyName] = option.value;","    }","  }","  options.forEach(setOption);","  return obj;","}","","function _read(buffer, offset) {","  /* jshint validthis:true */","","  offset = offset || 0;","  var options = this;","  var option, length;","  for (var i = 0; i &lt; options.length; i++) {","    option = {","      name: buffer[offset],","      type: buffer[offset + 1],","      value: undefined","    };","    offset += 2;","    switch (option.type) {","    case TypeCode.BOOLEAN:","      option.value = buffer[offset] ? true : false;","      offset += 1;","      break;","    case TypeCode.INT:","      option.value = buffer.readInt32LE(offset);","      offset += 4;","      break;","    case TypeCode.BIGINT:","      option.value = bignum.readInt64LE(buffer, offset);","      offset += 8;","      break;","    case TypeCode.DOUBLE:","      option.value = buffer.readDoubleLE(offset);","      offset += 8;","      break;","    case TypeCode.STRING:","      length = buffer.readInt16LE(offset);","      offset += 2;","      option.value = buffer.toString('utf-8', offset, offset + length);","      offset += length;","      break;","    case TypeCode.BSTRING:","      length = buffer.readInt16LE(offset);","      offset += 2;","      option.value = new Buffer(length);","      buffer.copy(option.value, 0, offset, offset + length);","      offset += length;","      break;","    }","    options[i] = option;","  }","  return offset;","}","","function write(part, options) {","  /* jshint validthis:true */","","  var offset = 0;","  part = part || {};","  options = options || this;","  var byteLength = getByteLength(options);","  var buffer = new Buffer(byteLength);","  var option;","  for (var i = 0; i &lt; options.length; i++) {","    option = options[i];","    buffer[offset] = option.name;","    buffer[offset + 1] = option.type;","    offset += 2;","    switch (option.type) {","    case TypeCode.BOOLEAN:","      buffer[offset] = !!option.value ? 1 : 0;","      offset += 1;","      break;","    case TypeCode.INT:","      buffer.writeInt32LE(option.value, offset);","      offset += 4;","      break;","    case TypeCode.BIGINT:","      buffer.writeInt64LE(option.value, offset);","      offset += 8;","      break;","    case TypeCode.DOUBLE:","      buffer.writeDoubleLE(option.value, offset);","      offset += 8;","      break;","    case TypeCode.STRING:","      byteLength = Buffer.byteLength(option.value, 'utf-8');","      buffer.writeInt16LE(byteLength, offset);","      offset += 2;","      buffer.write(option.value, offset, byteLength, 'utf-8');","      offset += byteLength;","      break;","    case TypeCode.BSTRING:","      byteLength = option.value.length;","      buffer.writeInt16LE(byteLength, offset);","      offset += 2;","      option.value.copy(buffer, offset);","      offset += byteLength;","      break;","    }","  }","  part.argumentCount = options.length;","  part.buffer = buffer;","  return part;","}","","function getByteLength(options) {","  var byteLength = 0;","  var option;","  for (var i = 0; i &lt; options.length; i++) {","    option = options[i];","    switch (option.type) {","    case TypeCode.BOOLEAN:","      byteLength += 3;","      break;","    case TypeCode.INT:","      byteLength += 6;","      break;","    case TypeCode.BIGINT:","      byteLength += 10;","      break;","    case TypeCode.DOUBLE:","      byteLength += 10;","      break;","    case TypeCode.STRING:","      byteLength += 4 + Buffer.byteLength(option.value, 'utf-8');","      break;","    case TypeCode.BSTRING:","      byteLength += 4 + option.value.length;","      break;","    }","  }","  return byteLength;","}","","function getArgumentCount(options) {","  return options.length;","}"];
