/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['protocol/Transaction.js']) {
  _$jscoverage['protocol/Transaction.js'] = [];
  _$jscoverage['protocol/Transaction.js'][14] = 0;
  _$jscoverage['protocol/Transaction.js'][16] = 0;
  _$jscoverage['protocol/Transaction.js'][17] = 0;
  _$jscoverage['protocol/Transaction.js'][18] = 0;
  _$jscoverage['protocol/Transaction.js'][19] = 0;
  _$jscoverage['protocol/Transaction.js'][21] = 0;
  _$jscoverage['protocol/Transaction.js'][23] = 0;
  _$jscoverage['protocol/Transaction.js'][25] = 0;
  _$jscoverage['protocol/Transaction.js'][26] = 0;
  _$jscoverage['protocol/Transaction.js'][28] = 0;
  _$jscoverage['protocol/Transaction.js'][29] = 0;
  _$jscoverage['protocol/Transaction.js'][30] = 0;
  _$jscoverage['protocol/Transaction.js'][33] = 0;
  _$jscoverage['protocol/Transaction.js'][34] = 0;
  _$jscoverage['protocol/Transaction.js'][37] = 0;
  _$jscoverage['protocol/Transaction.js'][38] = 0;
  _$jscoverage['protocol/Transaction.js'][39] = 0;
  _$jscoverage['protocol/Transaction.js'][40] = 0;
  _$jscoverage['protocol/Transaction.js'][41] = 0;
  _$jscoverage['protocol/Transaction.js'][43] = 0;
  _$jscoverage['protocol/Transaction.js'][44] = 0;
  _$jscoverage['protocol/Transaction.js'][45] = 0;
  _$jscoverage['protocol/Transaction.js'][47] = 0;
  _$jscoverage['protocol/Transaction.js'][48] = 0;
  _$jscoverage['protocol/Transaction.js'][49] = 0;
  _$jscoverage['protocol/Transaction.js'][51] = 0;
  _$jscoverage['protocol/Transaction.js'][52] = 0;
  _$jscoverage['protocol/Transaction.js'][53] = 0;
  _$jscoverage['protocol/Transaction.js'][55] = 0;
  _$jscoverage['protocol/Transaction.js'][56] = 0;
  _$jscoverage['protocol/Transaction.js'][59] = 0;
  _$jscoverage['protocol/Transaction.js'][60] = 0;
  _$jscoverage['protocol/Transaction.js'][61] = 0;
  _$jscoverage['protocol/Transaction.js'][62] = 0;
}
_$jscoverage['protocol/Transaction.js'][14]++;
"use strict";
_$jscoverage['protocol/Transaction.js'][16]++;
var util = require("../util");
_$jscoverage['protocol/Transaction.js'][17]++;
var EventEmitter = require("events").EventEmitter;
_$jscoverage['protocol/Transaction.js'][18]++;
var ErrorLevel = require("./common/ErrorLevel");
_$jscoverage['protocol/Transaction.js'][19]++;
var debug = util.debuglog("hdbtx");
_$jscoverage['protocol/Transaction.js'][21]++;
module.exports = Transaction;
_$jscoverage['protocol/Transaction.js'][23]++;
util.inherits(Transaction, EventEmitter);
_$jscoverage['protocol/Transaction.js'][25]++;
function Transaction() {
  _$jscoverage['protocol/Transaction.js'][26]++;
  EventEmitter.call(this);
  _$jscoverage['protocol/Transaction.js'][28]++;
  this.autoCommit = true;
  _$jscoverage['protocol/Transaction.js'][29]++;
  this.kind = "none";
  _$jscoverage['protocol/Transaction.js'][30]++;
  this.error = undefined;
}
_$jscoverage['protocol/Transaction.js'][33]++;
Transaction.prototype.setAutoCommit = (function setAutoCommit(autoCommit) {
  _$jscoverage['protocol/Transaction.js'][34]++;
  this.autoCommit = autoCommit;
});
_$jscoverage['protocol/Transaction.js'][37]++;
Transaction.prototype.setFlags = (function setFlags(flags) {
  _$jscoverage['protocol/Transaction.js'][38]++;
  debug(flags);
  _$jscoverage['protocol/Transaction.js'][39]++;
  if (flags.committed) {
    _$jscoverage['protocol/Transaction.js'][40]++;
    this.emit("end", true, this.kind);
    _$jscoverage['protocol/Transaction.js'][41]++;
    this.kind = "none";
  }
  _$jscoverage['protocol/Transaction.js'][43]++;
  if (flags.rolledBack) {
    _$jscoverage['protocol/Transaction.js'][44]++;
    this.emit("end", false, this.kind);
    _$jscoverage['protocol/Transaction.js'][45]++;
    this.kind = "none";
  }
  _$jscoverage['protocol/Transaction.js'][47]++;
  if (flags.writeTransactionStarted) {
    _$jscoverage['protocol/Transaction.js'][48]++;
    this.kind = "write";
    _$jscoverage['protocol/Transaction.js'][49]++;
    this.emit("new", this.kind);
  }
  _$jscoverage['protocol/Transaction.js'][51]++;
  if (flags.noWriteTransactionStarted) {
    _$jscoverage['protocol/Transaction.js'][52]++;
    this.kind = "read";
    _$jscoverage['protocol/Transaction.js'][53]++;
    this.emit("new", this.kind);
  }
  _$jscoverage['protocol/Transaction.js'][55]++;
  if (flags.sessionClosingTransactionErrror) {
    _$jscoverage['protocol/Transaction.js'][56]++;
    this.error = new Error("A transaction error occured that implies the session must be terminated.");
    _$jscoverage['protocol/Transaction.js'][59]++;
    this.error.code = "EHDBTX";
    _$jscoverage['protocol/Transaction.js'][60]++;
    this.error.level = ErrorLevel.FATAL;
    _$jscoverage['protocol/Transaction.js'][61]++;
    this.error.fatal = true;
    _$jscoverage['protocol/Transaction.js'][62]++;
    this.emit("error", this.error);
  }
});
_$jscoverage['protocol/Transaction.js'].source = ["// Copyright 2013 SAP AG.","//","// Licensed under the Apache License, Version 2.0 (the \"License\");","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","// http: //www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing,","// software distributed under the License is distributed on an","// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,","// either express or implied. See the License for the specific","// language governing permissions and limitations under the License.","'use strict';","","var util = require('../util');","var EventEmitter = require('events').EventEmitter;","var ErrorLevel = require('./common/ErrorLevel');","var debug = util.debuglog('hdbtx');","","module.exports = Transaction;","","util.inherits(Transaction, EventEmitter);","","function Transaction() {","  EventEmitter.call(this);","","  this.autoCommit = true;","  this.kind = 'none';","  this.error = undefined;","}","","Transaction.prototype.setAutoCommit = function setAutoCommit(autoCommit) {","  this.autoCommit = autoCommit;","};","","Transaction.prototype.setFlags = function setFlags(flags) {","  debug(flags);","  if (flags.committed) {","    this.emit('end', true, this.kind);","    this.kind = 'none';","  }","  if (flags.rolledBack) {","    this.emit('end', false, this.kind);","    this.kind = 'none';","  }","  if (flags.writeTransactionStarted) {","    this.kind = 'write';","    this.emit('new', this.kind);","  }","  if (flags.noWriteTransactionStarted) {","    this.kind = 'read';","    this.emit('new', this.kind);","  }","  if (flags.sessionClosingTransactionErrror) {","    this.error = new Error(","      'A transaction error occured that implies the session must be terminated.'","    );","    this.error.code = 'EHDBTX';","    this.error.level = ErrorLevel.FATAL;","    this.error.fatal = true;","    this.emit('error', this.error);","  }","};"];
