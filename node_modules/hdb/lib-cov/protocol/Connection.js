/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['protocol/Connection.js']) {
  _$jscoverage['protocol/Connection.js'] = [];
  _$jscoverage['protocol/Connection.js'][14] = 0;
  _$jscoverage['protocol/Connection.js'][16] = 0;
  _$jscoverage['protocol/Connection.js'][17] = 0;
  _$jscoverage['protocol/Connection.js'][18] = 0;
  _$jscoverage['protocol/Connection.js'][19] = 0;
  _$jscoverage['protocol/Connection.js'][20] = 0;
  _$jscoverage['protocol/Connection.js'][21] = 0;
  _$jscoverage['protocol/Connection.js'][22] = 0;
  _$jscoverage['protocol/Connection.js'][23] = 0;
  _$jscoverage['protocol/Connection.js'][24] = 0;
  _$jscoverage['protocol/Connection.js'][25] = 0;
  _$jscoverage['protocol/Connection.js'][26] = 0;
  _$jscoverage['protocol/Connection.js'][27] = 0;
  _$jscoverage['protocol/Connection.js'][28] = 0;
  _$jscoverage['protocol/Connection.js'][29] = 0;
  _$jscoverage['protocol/Connection.js'][30] = 0;
  _$jscoverage['protocol/Connection.js'][31] = 0;
  _$jscoverage['protocol/Connection.js'][32] = 0;
  _$jscoverage['protocol/Connection.js'][33] = 0;
  _$jscoverage['protocol/Connection.js'][34] = 0;
  _$jscoverage['protocol/Connection.js'][36] = 0;
  _$jscoverage['protocol/Connection.js'][37] = 0;
  _$jscoverage['protocol/Connection.js'][38] = 0;
  _$jscoverage['protocol/Connection.js'][39] = 0;
  _$jscoverage['protocol/Connection.js'][40] = 0;
  _$jscoverage['protocol/Connection.js'][43] = 0;
  _$jscoverage['protocol/Connection.js'][45] = 0;
  _$jscoverage['protocol/Connection.js'][47] = 0;
  _$jscoverage['protocol/Connection.js'][48] = 0;
  _$jscoverage['protocol/Connection.js'][50] = 0;
  _$jscoverage['protocol/Connection.js'][52] = 0;
  _$jscoverage['protocol/Connection.js'][53] = 0;
  _$jscoverage['protocol/Connection.js'][54] = 0;
  _$jscoverage['protocol/Connection.js'][56] = 0;
  _$jscoverage['protocol/Connection.js'][57] = 0;
  _$jscoverage['protocol/Connection.js'][58] = 0;
  _$jscoverage['protocol/Connection.js'][59] = 0;
  _$jscoverage['protocol/Connection.js'][60] = 0;
  _$jscoverage['protocol/Connection.js'][61] = 0;
  _$jscoverage['protocol/Connection.js'][62] = 0;
  _$jscoverage['protocol/Connection.js'][63] = 0;
  _$jscoverage['protocol/Connection.js'][67] = 0;
  _$jscoverage['protocol/Connection.js'][70] = 0;
  _$jscoverage['protocol/Connection.js'][73] = 0;
  _$jscoverage['protocol/Connection.js'][78] = 0;
  _$jscoverage['protocol/Connection.js'][81] = 0;
  _$jscoverage['protocol/Connection.js'][86] = 0;
  _$jscoverage['protocol/Connection.js'][89] = 0;
  _$jscoverage['protocol/Connection.js'][95] = 0;
  _$jscoverage['protocol/Connection.js'][96] = 0;
  _$jscoverage['protocol/Connection.js'][99] = 0;
  _$jscoverage['protocol/Connection.js'][100] = 0;
  _$jscoverage['protocol/Connection.js'][103] = 0;
  _$jscoverage['protocol/Connection.js'][104] = 0;
  _$jscoverage['protocol/Connection.js'][107] = 0;
  _$jscoverage['protocol/Connection.js'][108] = 0;
  _$jscoverage['protocol/Connection.js'][110] = 0;
  _$jscoverage['protocol/Connection.js'][113] = 0;
  _$jscoverage['protocol/Connection.js'][115] = 0;
  _$jscoverage['protocol/Connection.js'][117] = 0;
  _$jscoverage['protocol/Connection.js'][118] = 0;
  _$jscoverage['protocol/Connection.js'][120] = 0;
  _$jscoverage['protocol/Connection.js'][125] = 0;
  _$jscoverage['protocol/Connection.js'][126] = 0;
  _$jscoverage['protocol/Connection.js'][128] = 0;
  _$jscoverage['protocol/Connection.js'][129] = 0;
  _$jscoverage['protocol/Connection.js'][130] = 0;
  _$jscoverage['protocol/Connection.js'][132] = 0;
  _$jscoverage['protocol/Connection.js'][135] = 0;
  _$jscoverage['protocol/Connection.js'][136] = 0;
  _$jscoverage['protocol/Connection.js'][137] = 0;
  _$jscoverage['protocol/Connection.js'][139] = 0;
  _$jscoverage['protocol/Connection.js'][140] = 0;
  _$jscoverage['protocol/Connection.js'][141] = 0;
  _$jscoverage['protocol/Connection.js'][142] = 0;
  _$jscoverage['protocol/Connection.js'][144] = 0;
  _$jscoverage['protocol/Connection.js'][147] = 0;
  _$jscoverage['protocol/Connection.js'][148] = 0;
  _$jscoverage['protocol/Connection.js'][149] = 0;
  _$jscoverage['protocol/Connection.js'][152] = 0;
  _$jscoverage['protocol/Connection.js'][153] = 0;
  _$jscoverage['protocol/Connection.js'][154] = 0;
  _$jscoverage['protocol/Connection.js'][157] = 0;
  _$jscoverage['protocol/Connection.js'][158] = 0;
  _$jscoverage['protocol/Connection.js'][159] = 0;
  _$jscoverage['protocol/Connection.js'][161] = 0;
  _$jscoverage['protocol/Connection.js'][163] = 0;
  _$jscoverage['protocol/Connection.js'][164] = 0;
  _$jscoverage['protocol/Connection.js'][165] = 0;
  _$jscoverage['protocol/Connection.js'][166] = 0;
  _$jscoverage['protocol/Connection.js'][167] = 0;
  _$jscoverage['protocol/Connection.js'][168] = 0;
  _$jscoverage['protocol/Connection.js'][170] = 0;
  _$jscoverage['protocol/Connection.js'][171] = 0;
  _$jscoverage['protocol/Connection.js'][173] = 0;
  _$jscoverage['protocol/Connection.js'][175] = 0;
  _$jscoverage['protocol/Connection.js'][178] = 0;
  _$jscoverage['protocol/Connection.js'][179] = 0;
  _$jscoverage['protocol/Connection.js'][180] = 0;
  _$jscoverage['protocol/Connection.js'][182] = 0;
  _$jscoverage['protocol/Connection.js'][183] = 0;
  _$jscoverage['protocol/Connection.js'][184] = 0;
  _$jscoverage['protocol/Connection.js'][185] = 0;
  _$jscoverage['protocol/Connection.js'][189] = 0;
  _$jscoverage['protocol/Connection.js'][190] = 0;
  _$jscoverage['protocol/Connection.js'][191] = 0;
  _$jscoverage['protocol/Connection.js'][192] = 0;
  _$jscoverage['protocol/Connection.js'][193] = 0;
  _$jscoverage['protocol/Connection.js'][194] = 0;
  _$jscoverage['protocol/Connection.js'][196] = 0;
  _$jscoverage['protocol/Connection.js'][197] = 0;
  _$jscoverage['protocol/Connection.js'][198] = 0;
  _$jscoverage['protocol/Connection.js'][199] = 0;
  _$jscoverage['protocol/Connection.js'][200] = 0;
  _$jscoverage['protocol/Connection.js'][201] = 0;
  _$jscoverage['protocol/Connection.js'][204] = 0;
  _$jscoverage['protocol/Connection.js'][206] = 0;
  _$jscoverage['protocol/Connection.js'][207] = 0;
  _$jscoverage['protocol/Connection.js'][209] = 0;
  _$jscoverage['protocol/Connection.js'][211] = 0;
  _$jscoverage['protocol/Connection.js'][212] = 0;
  _$jscoverage['protocol/Connection.js'][213] = 0;
  _$jscoverage['protocol/Connection.js'][214] = 0;
  _$jscoverage['protocol/Connection.js'][216] = 0;
  _$jscoverage['protocol/Connection.js'][219] = 0;
  _$jscoverage['protocol/Connection.js'][220] = 0;
  _$jscoverage['protocol/Connection.js'][221] = 0;
  _$jscoverage['protocol/Connection.js'][222] = 0;
  _$jscoverage['protocol/Connection.js'][223] = 0;
  _$jscoverage['protocol/Connection.js'][226] = 0;
  _$jscoverage['protocol/Connection.js'][227] = 0;
  _$jscoverage['protocol/Connection.js'][228] = 0;
  _$jscoverage['protocol/Connection.js'][231] = 0;
  _$jscoverage['protocol/Connection.js'][232] = 0;
  _$jscoverage['protocol/Connection.js'][234] = 0;
  _$jscoverage['protocol/Connection.js'][235] = 0;
  _$jscoverage['protocol/Connection.js'][236] = 0;
  _$jscoverage['protocol/Connection.js'][237] = 0;
  _$jscoverage['protocol/Connection.js'][239] = 0;
  _$jscoverage['protocol/Connection.js'][240] = 0;
  _$jscoverage['protocol/Connection.js'][241] = 0;
  _$jscoverage['protocol/Connection.js'][243] = 0;
  _$jscoverage['protocol/Connection.js'][245] = 0;
  _$jscoverage['protocol/Connection.js'][248] = 0;
  _$jscoverage['protocol/Connection.js'][250] = 0;
  _$jscoverage['protocol/Connection.js'][252] = 0;
  _$jscoverage['protocol/Connection.js'][254] = 0;
  _$jscoverage['protocol/Connection.js'][256] = 0;
  _$jscoverage['protocol/Connection.js'][258] = 0;
  _$jscoverage['protocol/Connection.js'][259] = 0;
  _$jscoverage['protocol/Connection.js'][263] = 0;
  _$jscoverage['protocol/Connection.js'][264] = 0;
  _$jscoverage['protocol/Connection.js'][265] = 0;
  _$jscoverage['protocol/Connection.js'][266] = 0;
  _$jscoverage['protocol/Connection.js'][268] = 0;
  _$jscoverage['protocol/Connection.js'][270] = 0;
  _$jscoverage['protocol/Connection.js'][274] = 0;
  _$jscoverage['protocol/Connection.js'][275] = 0;
  _$jscoverage['protocol/Connection.js'][276] = 0;
  _$jscoverage['protocol/Connection.js'][277] = 0;
  _$jscoverage['protocol/Connection.js'][279] = 0;
  _$jscoverage['protocol/Connection.js'][282] = 0;
  _$jscoverage['protocol/Connection.js'][283] = 0;
  _$jscoverage['protocol/Connection.js'][284] = 0;
  _$jscoverage['protocol/Connection.js'][288] = 0;
  _$jscoverage['protocol/Connection.js'][289] = 0;
  _$jscoverage['protocol/Connection.js'][290] = 0;
  _$jscoverage['protocol/Connection.js'][291] = 0;
  _$jscoverage['protocol/Connection.js'][292] = 0;
  _$jscoverage['protocol/Connection.js'][293] = 0;
  _$jscoverage['protocol/Connection.js'][294] = 0;
  _$jscoverage['protocol/Connection.js'][295] = 0;
  _$jscoverage['protocol/Connection.js'][296] = 0;
  _$jscoverage['protocol/Connection.js'][297] = 0;
  _$jscoverage['protocol/Connection.js'][298] = 0;
  _$jscoverage['protocol/Connection.js'][299] = 0;
  _$jscoverage['protocol/Connection.js'][301] = 0;
  _$jscoverage['protocol/Connection.js'][303] = 0;
  _$jscoverage['protocol/Connection.js'][304] = 0;
  _$jscoverage['protocol/Connection.js'][305] = 0;
  _$jscoverage['protocol/Connection.js'][307] = 0;
  _$jscoverage['protocol/Connection.js'][308] = 0;
  _$jscoverage['protocol/Connection.js'][310] = 0;
  _$jscoverage['protocol/Connection.js'][311] = 0;
  _$jscoverage['protocol/Connection.js'][315] = 0;
  _$jscoverage['protocol/Connection.js'][316] = 0;
  _$jscoverage['protocol/Connection.js'][317] = 0;
  _$jscoverage['protocol/Connection.js'][318] = 0;
  _$jscoverage['protocol/Connection.js'][319] = 0;
  _$jscoverage['protocol/Connection.js'][320] = 0;
  _$jscoverage['protocol/Connection.js'][321] = 0;
  _$jscoverage['protocol/Connection.js'][322] = 0;
  _$jscoverage['protocol/Connection.js'][323] = 0;
  _$jscoverage['protocol/Connection.js'][324] = 0;
  _$jscoverage['protocol/Connection.js'][325] = 0;
  _$jscoverage['protocol/Connection.js'][326] = 0;
  _$jscoverage['protocol/Connection.js'][329] = 0;
  _$jscoverage['protocol/Connection.js'][330] = 0;
  _$jscoverage['protocol/Connection.js'][334] = 0;
  _$jscoverage['protocol/Connection.js'][335] = 0;
  _$jscoverage['protocol/Connection.js'][337] = 0;
  _$jscoverage['protocol/Connection.js'][338] = 0;
  _$jscoverage['protocol/Connection.js'][339] = 0;
  _$jscoverage['protocol/Connection.js'][341] = 0;
  _$jscoverage['protocol/Connection.js'][342] = 0;
  _$jscoverage['protocol/Connection.js'][346] = 0;
  _$jscoverage['protocol/Connection.js'][347] = 0;
  _$jscoverage['protocol/Connection.js'][348] = 0;
  _$jscoverage['protocol/Connection.js'][350] = 0;
  _$jscoverage['protocol/Connection.js'][351] = 0;
  _$jscoverage['protocol/Connection.js'][353] = 0;
  _$jscoverage['protocol/Connection.js'][354] = 0;
  _$jscoverage['protocol/Connection.js'][355] = 0;
  _$jscoverage['protocol/Connection.js'][356] = 0;
  _$jscoverage['protocol/Connection.js'][358] = 0;
  _$jscoverage['protocol/Connection.js'][359] = 0;
  _$jscoverage['protocol/Connection.js'][362] = 0;
  _$jscoverage['protocol/Connection.js'][363] = 0;
  _$jscoverage['protocol/Connection.js'][364] = 0;
  _$jscoverage['protocol/Connection.js'][366] = 0;
  _$jscoverage['protocol/Connection.js'][367] = 0;
  _$jscoverage['protocol/Connection.js'][369] = 0;
  _$jscoverage['protocol/Connection.js'][371] = 0;
  _$jscoverage['protocol/Connection.js'][377] = 0;
  _$jscoverage['protocol/Connection.js'][382] = 0;
  _$jscoverage['protocol/Connection.js'][383] = 0;
  _$jscoverage['protocol/Connection.js'][385] = 0;
  _$jscoverage['protocol/Connection.js'][386] = 0;
  _$jscoverage['protocol/Connection.js'][387] = 0;
  _$jscoverage['protocol/Connection.js'][389] = 0;
  _$jscoverage['protocol/Connection.js'][390] = 0;
  _$jscoverage['protocol/Connection.js'][391] = 0;
  _$jscoverage['protocol/Connection.js'][394] = 0;
  _$jscoverage['protocol/Connection.js'][395] = 0;
  _$jscoverage['protocol/Connection.js'][398] = 0;
  _$jscoverage['protocol/Connection.js'][399] = 0;
  _$jscoverage['protocol/Connection.js'][401] = 0;
  _$jscoverage['protocol/Connection.js'][404] = 0;
  _$jscoverage['protocol/Connection.js'][405] = 0;
  _$jscoverage['protocol/Connection.js'][406] = 0;
  _$jscoverage['protocol/Connection.js'][407] = 0;
  _$jscoverage['protocol/Connection.js'][408] = 0;
  _$jscoverage['protocol/Connection.js'][411] = 0;
  _$jscoverage['protocol/Connection.js'][412] = 0;
  _$jscoverage['protocol/Connection.js'][413] = 0;
  _$jscoverage['protocol/Connection.js'][414] = 0;
  _$jscoverage['protocol/Connection.js'][417] = 0;
  _$jscoverage['protocol/Connection.js'][418] = 0;
  _$jscoverage['protocol/Connection.js'][419] = 0;
  _$jscoverage['protocol/Connection.js'][423] = 0;
  _$jscoverage['protocol/Connection.js'][424] = 0;
  _$jscoverage['protocol/Connection.js'][427] = 0;
  _$jscoverage['protocol/Connection.js'][428] = 0;
  _$jscoverage['protocol/Connection.js'][429] = 0;
  _$jscoverage['protocol/Connection.js'][430] = 0;
  _$jscoverage['protocol/Connection.js'][431] = 0;
  _$jscoverage['protocol/Connection.js'][432] = 0;
  _$jscoverage['protocol/Connection.js'][440] = 0;
  _$jscoverage['protocol/Connection.js'][443] = 0;
  _$jscoverage['protocol/Connection.js'][444] = 0;
  _$jscoverage['protocol/Connection.js'][445] = 0;
  _$jscoverage['protocol/Connection.js'][448] = 0;
  _$jscoverage['protocol/Connection.js'][449] = 0;
  _$jscoverage['protocol/Connection.js'][452] = 0;
  _$jscoverage['protocol/Connection.js'][453] = 0;
  _$jscoverage['protocol/Connection.js'][456] = 0;
  _$jscoverage['protocol/Connection.js'][457] = 0;
  _$jscoverage['protocol/Connection.js'][458] = 0;
  _$jscoverage['protocol/Connection.js'][459] = 0;
  _$jscoverage['protocol/Connection.js'][461] = 0;
  _$jscoverage['protocol/Connection.js'][464] = 0;
  _$jscoverage['protocol/Connection.js'][465] = 0;
  _$jscoverage['protocol/Connection.js'][466] = 0;
  _$jscoverage['protocol/Connection.js'][467] = 0;
  _$jscoverage['protocol/Connection.js'][469] = 0;
  _$jscoverage['protocol/Connection.js'][472] = 0;
  _$jscoverage['protocol/Connection.js'][473] = 0;
  _$jscoverage['protocol/Connection.js'][475] = 0;
  _$jscoverage['protocol/Connection.js'][476] = 0;
  _$jscoverage['protocol/Connection.js'][477] = 0;
  _$jscoverage['protocol/Connection.js'][479] = 0;
  _$jscoverage['protocol/Connection.js'][480] = 0;
  _$jscoverage['protocol/Connection.js'][482] = 0;
  _$jscoverage['protocol/Connection.js'][485] = 0;
  _$jscoverage['protocol/Connection.js'][486] = 0;
  _$jscoverage['protocol/Connection.js'][487] = 0;
  _$jscoverage['protocol/Connection.js'][491] = 0;
  _$jscoverage['protocol/Connection.js'][492] = 0;
  _$jscoverage['protocol/Connection.js'][495] = 0;
  _$jscoverage['protocol/Connection.js'][496] = 0;
  _$jscoverage['protocol/Connection.js'][497] = 0;
  _$jscoverage['protocol/Connection.js'][498] = 0;
  _$jscoverage['protocol/Connection.js'][499] = 0;
  _$jscoverage['protocol/Connection.js'][502] = 0;
  _$jscoverage['protocol/Connection.js'][503] = 0;
  _$jscoverage['protocol/Connection.js'][504] = 0;
  _$jscoverage['protocol/Connection.js'][507] = 0;
  _$jscoverage['protocol/Connection.js'][508] = 0;
  _$jscoverage['protocol/Connection.js'][514] = 0;
  _$jscoverage['protocol/Connection.js'][515] = 0;
  _$jscoverage['protocol/Connection.js'][516] = 0;
  _$jscoverage['protocol/Connection.js'][519] = 0;
  _$jscoverage['protocol/Connection.js'][521] = 0;
  _$jscoverage['protocol/Connection.js'][522] = 0;
  _$jscoverage['protocol/Connection.js'][523] = 0;
  _$jscoverage['protocol/Connection.js'][524] = 0;
  _$jscoverage['protocol/Connection.js'][527] = 0;
  _$jscoverage['protocol/Connection.js'][531] = 0;
  _$jscoverage['protocol/Connection.js'][532] = 0;
  _$jscoverage['protocol/Connection.js'][533] = 0;
  _$jscoverage['protocol/Connection.js'][534] = 0;
  _$jscoverage['protocol/Connection.js'][537] = 0;
  _$jscoverage['protocol/Connection.js'][538] = 0;
  _$jscoverage['protocol/Connection.js'][541] = 0;
  _$jscoverage['protocol/Connection.js'][542] = 0;
  _$jscoverage['protocol/Connection.js'][543] = 0;
  _$jscoverage['protocol/Connection.js'][545] = 0;
  _$jscoverage['protocol/Connection.js'][546] = 0;
  _$jscoverage['protocol/Connection.js'][547] = 0;
  _$jscoverage['protocol/Connection.js'][548] = 0;
  _$jscoverage['protocol/Connection.js'][549] = 0;
  _$jscoverage['protocol/Connection.js'][551] = 0;
  _$jscoverage['protocol/Connection.js'][553] = 0;
  _$jscoverage['protocol/Connection.js'][554] = 0;
  _$jscoverage['protocol/Connection.js'][558] = 0;
  _$jscoverage['protocol/Connection.js'][559] = 0;
  _$jscoverage['protocol/Connection.js'][560] = 0;
  _$jscoverage['protocol/Connection.js'][562] = 0;
  _$jscoverage['protocol/Connection.js'][565] = 0;
  _$jscoverage['protocol/Connection.js'][566] = 0;
  _$jscoverage['protocol/Connection.js'][567] = 0;
  _$jscoverage['protocol/Connection.js'][572] = 0;
  _$jscoverage['protocol/Connection.js'][573] = 0;
  _$jscoverage['protocol/Connection.js'][576] = 0;
  _$jscoverage['protocol/Connection.js'][577] = 0;
  _$jscoverage['protocol/Connection.js'][578] = 0;
  _$jscoverage['protocol/Connection.js'][579] = 0;
}
_$jscoverage['protocol/Connection.js'][14]++;
"use strict";
_$jscoverage['protocol/Connection.js'][16]++;
var os = require("os");
_$jscoverage['protocol/Connection.js'][17]++;
var EventEmitter = require("events").EventEmitter;
_$jscoverage['protocol/Connection.js'][18]++;
var tcp = require("./tcp");
_$jscoverage['protocol/Connection.js'][19]++;
var auth = require("./auth");
_$jscoverage['protocol/Connection.js'][20]++;
var util = require("../util");
_$jscoverage['protocol/Connection.js'][21]++;
var Transaction = require("./Transaction");
_$jscoverage['protocol/Connection.js'][22]++;
var common = require("./common");
_$jscoverage['protocol/Connection.js'][23]++;
var request = require("./request");
_$jscoverage['protocol/Connection.js'][24]++;
var reply = require("./reply");
_$jscoverage['protocol/Connection.js'][25]++;
var createExecuteTask = require("./ExecuteTask").create;
_$jscoverage['protocol/Connection.js'][26]++;
var ReplySegment = reply.Segment;
_$jscoverage['protocol/Connection.js'][27]++;
var part = require("./part");
_$jscoverage['protocol/Connection.js'][28]++;
var MessageType = common.MessageType;
_$jscoverage['protocol/Connection.js'][29]++;
var MessageTypeName = common.MessageTypeName;
_$jscoverage['protocol/Connection.js'][30]++;
var SegmentKind = common.SegmentKind;
_$jscoverage['protocol/Connection.js'][31]++;
var PartKind = common.PartKind;
_$jscoverage['protocol/Connection.js'][32]++;
var bignum = util.bignum;
_$jscoverage['protocol/Connection.js'][33]++;
var debug = util.debuglog("hdb");
_$jscoverage['protocol/Connection.js'][34]++;
var trace = util.tracelog();
_$jscoverage['protocol/Connection.js'][36]++;
var MAX_PACKET_SIZE = common.MAX_PACKET_SIZE;
_$jscoverage['protocol/Connection.js'][37]++;
var PACKET_HEADER_LENGTH = common.PACKET_HEADER_LENGTH;
_$jscoverage['protocol/Connection.js'][38]++;
var SEGMENT_HEADER_LENGTH = common.SEGMENT_HEADER_LENGTH;
_$jscoverage['protocol/Connection.js'][39]++;
var PART_HEADER_LENGTH = common.PART_HEADER_LENGTH;
_$jscoverage['protocol/Connection.js'][40]++;
var MAX_AVAILABLE_SIZE = MAX_PACKET_SIZE - PACKET_HEADER_LENGTH - SEGMENT_HEADER_LENGTH - PART_HEADER_LENGTH;
_$jscoverage['protocol/Connection.js'][43]++;
module.exports = Connection;
_$jscoverage['protocol/Connection.js'][45]++;
util.inherits(Connection, EventEmitter);
_$jscoverage['protocol/Connection.js'][47]++;
function Connection(settings) {
  _$jscoverage['protocol/Connection.js'][48]++;
  EventEmitter.call(this);
  _$jscoverage['protocol/Connection.js'][50]++;
  var self = this;
  _$jscoverage['protocol/Connection.js'][52]++;
  this.clientId = [process.pid || "nodejs", os.hostname()].join("@");
  _$jscoverage['protocol/Connection.js'][53]++;
  this.connectOptions = new part.ConnectOptions();
  _$jscoverage['protocol/Connection.js'][54]++;
  this.protocolVersion = undefined;
  _$jscoverage['protocol/Connection.js'][56]++;
  this._settings = settings || {};
  _$jscoverage['protocol/Connection.js'][57]++;
  this._socket = undefined;
  _$jscoverage['protocol/Connection.js'][58]++;
  this._queue = new util.Queue().pause();
  _$jscoverage['protocol/Connection.js'][59]++;
  this._state = new ConnectionState();
  _$jscoverage['protocol/Connection.js'][60]++;
  this._statementContext = undefined;
  _$jscoverage['protocol/Connection.js'][61]++;
  this._transaction = new Transaction();
  _$jscoverage['protocol/Connection.js'][62]++;
  this._transaction.once("error", (function onerror(err) {
  _$jscoverage['protocol/Connection.js'][63]++;
  self.destroy(err);
}));
}
_$jscoverage['protocol/Connection.js'][67]++;
Object.defineProperties(Connection.prototype, {autoCommit: {get: (function getAutoCommit() {
  _$jscoverage['protocol/Connection.js'][70]++;
  return this._transaction.autoCommit;
}), set: (function setAutoCommit(autoCommit) {
  _$jscoverage['protocol/Connection.js'][73]++;
  this._transaction.setAutoCommit(autoCommit);
})}, holdCursorsOverCommit: {get: (function getHoldCursorsOverCommit() {
  _$jscoverage['protocol/Connection.js'][78]++;
  return ! ! this._settings.holdCursorsOverCommit;
}), set: (function setHoldCursorsOverCommit(holdCursorsOverCommit) {
  _$jscoverage['protocol/Connection.js'][81]++;
  this._settings.holdCursorsOverCommit = holdCursorsOverCommit;
})}, scrollableCursor: {get: (function setScrollableCursor() {
  _$jscoverage['protocol/Connection.js'][86]++;
  return ! ! this._settings.scrollableCursor;
}), set: (function setScrollableCursor(scrollableCursor) {
  _$jscoverage['protocol/Connection.js'][89]++;
  this._settings.scrollableCursor = scrollableCursor;
})}, readyState: {get: (function getReadyState() {
  _$jscoverage['protocol/Connection.js'][95]++;
  if (! this._state) {
    _$jscoverage['protocol/Connection.js'][96]++;
    return "closed";
  }
  _$jscoverage['protocol/Connection.js'][99]++;
  if (! this._socket) {
    _$jscoverage['protocol/Connection.js'][100]++;
    return "new";
  }
  _$jscoverage['protocol/Connection.js'][103]++;
  if (this._socket.readyState === "closed") {
    _$jscoverage['protocol/Connection.js'][104]++;
    return "closed";
  }
  _$jscoverage['protocol/Connection.js'][107]++;
  if (! this.protocolVersion) {
    _$jscoverage['protocol/Connection.js'][108]++;
    return "opening";
  }
  _$jscoverage['protocol/Connection.js'][110]++;
  switch (this._state.messageType) {
  case MessageType.AUTHENTICATE:
  case MessageType.CONNECT:
    _$jscoverage['protocol/Connection.js'][113]++;
    return "connecting";
  case MessageType.DISCONNECT:
    _$jscoverage['protocol/Connection.js'][115]++;
    return "disconnecting";
  }
  _$jscoverage['protocol/Connection.js'][117]++;
  if (this._state.sessionId === -1) {
    _$jscoverage['protocol/Connection.js'][118]++;
    return "disconnected";
  }
  _$jscoverage['protocol/Connection.js'][120]++;
  return "connected";
})}});
_$jscoverage['protocol/Connection.js'][125]++;
Connection.prototype.open = (function open(options, cb) {
  _$jscoverage['protocol/Connection.js'][126]++;
  var self = this;
  _$jscoverage['protocol/Connection.js'][128]++;
  if (this._socket) {
    _$jscoverage['protocol/Connection.js'][129]++;
    util.setImmediate((function deferError() {
  _$jscoverage['protocol/Connection.js'][130]++;
  cb(new Error("Call open only once"));
}));
    _$jscoverage['protocol/Connection.js'][132]++;
    return;
  }
  _$jscoverage['protocol/Connection.js'][135]++;
  function done(err, protocolVersion) {
    _$jscoverage['protocol/Connection.js'][136]++;
    if (err) {
      _$jscoverage['protocol/Connection.js'][137]++;
      return cb(err);
    }
    _$jscoverage['protocol/Connection.js'][139]++;
    self.protocolVersion = protocolVersion;
    _$jscoverage['protocol/Connection.js'][140]++;
    self._addListeners(self._socket);
    _$jscoverage['protocol/Connection.js'][141]++;
    self.emit("open");
    _$jscoverage['protocol/Connection.js'][142]++;
    cb();
}
  _$jscoverage['protocol/Connection.js'][144]++;
  this._socket = this._connect(options, done);
});
_$jscoverage['protocol/Connection.js'][147]++;
Connection.prototype._connect = (function _connect(options, cb) {
  _$jscoverage['protocol/Connection.js'][148]++;
  var socket = tcp.connect(options, (function connectListener() {
  _$jscoverage['protocol/Connection.js'][149]++;
  socket.write(initializationRequestBuffer);
}));
  _$jscoverage['protocol/Connection.js'][152]++;
  function cleanup() {
    _$jscoverage['protocol/Connection.js'][153]++;
    socket.removeListener("error", onerror);
    _$jscoverage['protocol/Connection.js'][154]++;
    socket.removeListener("data", ondata);
}
  _$jscoverage['protocol/Connection.js'][157]++;
  function onerror(err) {
    _$jscoverage['protocol/Connection.js'][158]++;
    cleanup();
    _$jscoverage['protocol/Connection.js'][159]++;
    cb(err);
}
  _$jscoverage['protocol/Connection.js'][161]++;
  socket.on("error", onerror);
  _$jscoverage['protocol/Connection.js'][163]++;
  function ondata(chunk) {
    _$jscoverage['protocol/Connection.js'][164]++;
    cleanup();
    _$jscoverage['protocol/Connection.js'][165]++;
    if (! chunk || chunk.length < InitializationReply.LENGTH) {
      _$jscoverage['protocol/Connection.js'][166]++;
      var err = new Error("Invalid initialization reply");
      _$jscoverage['protocol/Connection.js'][167]++;
      err.code = "EHDBINIT";
      _$jscoverage['protocol/Connection.js'][168]++;
      return cb(err);
    }
    _$jscoverage['protocol/Connection.js'][170]++;
    var reply = InitializationReply.read(chunk, 0);
    _$jscoverage['protocol/Connection.js'][171]++;
    cb(null, reply.protocolVersion);
}
  _$jscoverage['protocol/Connection.js'][173]++;
  socket.on("data", ondata);
  _$jscoverage['protocol/Connection.js'][175]++;
  return socket;
});
_$jscoverage['protocol/Connection.js'][178]++;
Connection.prototype._addListeners = (function _addListeners(socket) {
  _$jscoverage['protocol/Connection.js'][179]++;
  var self = this;
  _$jscoverage['protocol/Connection.js'][180]++;
  var packet = new MessageBuffer();
  _$jscoverage['protocol/Connection.js'][182]++;
  function cleanup() {
    _$jscoverage['protocol/Connection.js'][183]++;
    socket.removeListener("error", onerror);
    _$jscoverage['protocol/Connection.js'][184]++;
    socket.removeListener("data", ondata);
    _$jscoverage['protocol/Connection.js'][185]++;
    socket.removeListener("close", onclose);
}
  _$jscoverage['protocol/Connection.js'][189]++;
  function ondata(chunk) {
    _$jscoverage['protocol/Connection.js'][190]++;
    packet.push(chunk);
    _$jscoverage['protocol/Connection.js'][191]++;
    if (packet.isReady()) {
      _$jscoverage['protocol/Connection.js'][192]++;
      if (self._state.sessionId !== packet.header.sessionId) {
        _$jscoverage['protocol/Connection.js'][193]++;
        self._state.sessionId = packet.header.sessionId;
        _$jscoverage['protocol/Connection.js'][194]++;
        self._state.packetCount = -1;
      }
      _$jscoverage['protocol/Connection.js'][196]++;
      var buffer = packet.getData();
      _$jscoverage['protocol/Connection.js'][197]++;
      packet.clear();
      _$jscoverage['protocol/Connection.js'][198]++;
      var cb = self._state.receive;
      _$jscoverage['protocol/Connection.js'][199]++;
      self._state.receive = undefined;
      _$jscoverage['protocol/Connection.js'][200]++;
      self._state.messageType = undefined;
      _$jscoverage['protocol/Connection.js'][201]++;
      self.receive(buffer, cb);
    }
}
  _$jscoverage['protocol/Connection.js'][204]++;
  socket.on("data", ondata);
  _$jscoverage['protocol/Connection.js'][206]++;
  function onerror(err) {
    _$jscoverage['protocol/Connection.js'][207]++;
    self.emit("error", err);
}
  _$jscoverage['protocol/Connection.js'][209]++;
  socket.on("error", onerror);
  _$jscoverage['protocol/Connection.js'][211]++;
  function onclose(hadError) {
    _$jscoverage['protocol/Connection.js'][212]++;
    cleanup();
    _$jscoverage['protocol/Connection.js'][213]++;
    self._cleanup();
    _$jscoverage['protocol/Connection.js'][214]++;
    self.emit("close", hadError);
}
  _$jscoverage['protocol/Connection.js'][216]++;
  socket.on("close", onclose);
});
_$jscoverage['protocol/Connection.js'][219]++;
Connection.prototype._cleanup = (function _cleanup() {
  _$jscoverage['protocol/Connection.js'][220]++;
  this._socket = undefined;
  _$jscoverage['protocol/Connection.js'][221]++;
  this._state = undefined;
  _$jscoverage['protocol/Connection.js'][222]++;
  this._queue.abort();
  _$jscoverage['protocol/Connection.js'][223]++;
  this._queue = undefined;
});
_$jscoverage['protocol/Connection.js'][226]++;
Connection.prototype.send = (function send(message, receive) {
  _$jscoverage['protocol/Connection.js'][227]++;
  if (this._statementContext) {
    _$jscoverage['protocol/Connection.js'][228]++;
    message.unshift(PartKind.STATEMENT_CONTEXT, this._statementContext.getOptions());
  }
  _$jscoverage['protocol/Connection.js'][231]++;
  debug("send", message);
  _$jscoverage['protocol/Connection.js'][232]++;
  trace("REQUEST", message);
  _$jscoverage['protocol/Connection.js'][234]++;
  var size = MAX_PACKET_SIZE - PACKET_HEADER_LENGTH;
  _$jscoverage['protocol/Connection.js'][235]++;
  var buffer = message.toBuffer(size);
  _$jscoverage['protocol/Connection.js'][236]++;
  var packet = new Buffer(PACKET_HEADER_LENGTH + buffer.length);
  _$jscoverage['protocol/Connection.js'][237]++;
  buffer.copy(packet, PACKET_HEADER_LENGTH);
  _$jscoverage['protocol/Connection.js'][239]++;
  var state = this._state;
  _$jscoverage['protocol/Connection.js'][240]++;
  state.messageType = message.type;
  _$jscoverage['protocol/Connection.js'][241]++;
  state.receive = receive;
  _$jscoverage['protocol/Connection.js'][243]++;
  state.packetCount++;
  _$jscoverage['protocol/Connection.js'][245]++;
  bignum.writeUInt64LE(packet, state.sessionId, 0);
  _$jscoverage['protocol/Connection.js'][248]++;
  packet.writeUInt32LE(state.packetCount, 8);
  _$jscoverage['protocol/Connection.js'][250]++;
  packet.writeUInt32LE(buffer.length, 12);
  _$jscoverage['protocol/Connection.js'][252]++;
  packet.writeUInt32LE(size, 16);
  _$jscoverage['protocol/Connection.js'][254]++;
  packet.writeUInt16LE(1, 20);
  _$jscoverage['protocol/Connection.js'][256]++;
  packet.fill(0, 22, PACKET_HEADER_LENGTH);
  _$jscoverage['protocol/Connection.js'][258]++;
  if (this._socket) {
    _$jscoverage['protocol/Connection.js'][259]++;
    this._socket.write(packet);
  }
});
_$jscoverage['protocol/Connection.js'][263]++;
Connection.prototype.setStatementContext = (function setStatementContext(options) {
  _$jscoverage['protocol/Connection.js'][264]++;
  if (options && options.length) {
    _$jscoverage['protocol/Connection.js'][265]++;
    if (! this._statementContext) {
      _$jscoverage['protocol/Connection.js'][266]++;
      this._statementContext = new part.StatementContext();
    }
    _$jscoverage['protocol/Connection.js'][268]++;
    this._statementContext.setOptions(options);
  }
  else {
    _$jscoverage['protocol/Connection.js'][270]++;
    this._statementContext = undefined;
  }
});
_$jscoverage['protocol/Connection.js'][274]++;
Connection.prototype.getAvailableSize = (function getAvailableSize() {
  _$jscoverage['protocol/Connection.js'][275]++;
  var availableSize = MAX_AVAILABLE_SIZE;
  _$jscoverage['protocol/Connection.js'][276]++;
  if (this._statementContext) {
    _$jscoverage['protocol/Connection.js'][277]++;
    availableSize -= this._statementContext.size;
  }
  _$jscoverage['protocol/Connection.js'][279]++;
  return availableSize;
});
_$jscoverage['protocol/Connection.js'][282]++;
Connection.prototype.setTransactionFlags = (function setTransactionFlags(flags) {
  _$jscoverage['protocol/Connection.js'][283]++;
  if (flags) {
    _$jscoverage['protocol/Connection.js'][284]++;
    this._transaction.setFlags(flags);
  }
});
_$jscoverage['protocol/Connection.js'][288]++;
Connection.prototype.receive = (function receive(buffer, cb) {
  _$jscoverage['protocol/Connection.js'][289]++;
  var error, segment, reply;
  _$jscoverage['protocol/Connection.js'][290]++;
  try {
    _$jscoverage['protocol/Connection.js'][291]++;
    segment = ReplySegment.create(buffer, 0);
    _$jscoverage['protocol/Connection.js'][292]++;
    trace(segment.kind === SegmentKind.ERROR? "ERROR": "REPLY", segment);
    _$jscoverage['protocol/Connection.js'][293]++;
    reply = segment.getReply();
    _$jscoverage['protocol/Connection.js'][294]++;
    this.setStatementContext(reply.statementContext);
    _$jscoverage['protocol/Connection.js'][295]++;
    this.setTransactionFlags(reply.transactionFlags);
    _$jscoverage['protocol/Connection.js'][296]++;
    if (reply.kind === SegmentKind.ERROR) {
      _$jscoverage['protocol/Connection.js'][297]++;
      error = reply.error;
    }
    else {
      _$jscoverage['protocol/Connection.js'][298]++;
      if (this._transaction.error) {
        _$jscoverage['protocol/Connection.js'][299]++;
        error = this._transaction.error;
      }
    }
    _$jscoverage['protocol/Connection.js'][301]++;
    debug("receive", reply);
  }
  catch (exception) {
    _$jscoverage['protocol/Connection.js'][303]++;
    error = exception;
    _$jscoverage['protocol/Connection.js'][304]++;
    error.code = "EHDBMSGPARSE";
    _$jscoverage['protocol/Connection.js'][305]++;
    debug("receive", error);
  }
  _$jscoverage['protocol/Connection.js'][307]++;
  if (error && error.fatal) {
    _$jscoverage['protocol/Connection.js'][308]++;
    this.destroy(error);
  }
  _$jscoverage['protocol/Connection.js'][310]++;
  if (util.isFunction(cb)) {
    _$jscoverage['protocol/Connection.js'][311]++;
    cb(error, reply);
  }
});
_$jscoverage['protocol/Connection.js'][315]++;
Connection.prototype.enqueue = (function enqueue(task, cb) {
  _$jscoverage['protocol/Connection.js'][316]++;
  var queueable;
  _$jscoverage['protocol/Connection.js'][317]++;
  if (util.isFunction(task)) {
    _$jscoverage['protocol/Connection.js'][318]++;
    queueable = this._queue.createTask(task, cb);
    _$jscoverage['protocol/Connection.js'][319]++;
    queueable.name = task.name;
  }
  else {
    _$jscoverage['protocol/Connection.js'][320]++;
    if (util.isObject(task)) {
      _$jscoverage['protocol/Connection.js'][321]++;
      if (task instanceof request.Segment) {
        _$jscoverage['protocol/Connection.js'][322]++;
        task = this.send.bind(this, task);
        _$jscoverage['protocol/Connection.js'][323]++;
        queueable = this._queue.createTask(task, cb);
        _$jscoverage['protocol/Connection.js'][324]++;
        queueable.name = MessageTypeName[task.type];
      }
      else {
        _$jscoverage['protocol/Connection.js'][325]++;
        if (util.isFunction(task.run)) {
          _$jscoverage['protocol/Connection.js'][326]++;
          queueable = task;
        }
      }
    }
  }
  _$jscoverage['protocol/Connection.js'][329]++;
  if (queueable) {
    _$jscoverage['protocol/Connection.js'][330]++;
    this._queue.push(queueable);
  }
});
_$jscoverage['protocol/Connection.js'][334]++;
Connection.prototype.connect = (function connect(options, cb) {
  _$jscoverage['protocol/Connection.js'][335]++;
  var self = this;
  _$jscoverage['protocol/Connection.js'][337]++;
  var manager;
  _$jscoverage['protocol/Connection.js'][338]++;
  try {
    _$jscoverage['protocol/Connection.js'][339]++;
    manager = auth.createManager(options);
  }
  catch (err) {
    _$jscoverage['protocol/Connection.js'][341]++;
    return util.setImmediate((function deferError() {
  _$jscoverage['protocol/Connection.js'][342]++;
  cb(err);
}));
  }
  _$jscoverage['protocol/Connection.js'][346]++;
  function connReceive(err, reply) {
    _$jscoverage['protocol/Connection.js'][347]++;
    if (err) {
      _$jscoverage['protocol/Connection.js'][348]++;
      return cb(err);
    }
    _$jscoverage['protocol/Connection.js'][350]++;
    if (util.isArray(reply.connectOptions)) {
      _$jscoverage['protocol/Connection.js'][351]++;
      self.connectOptions.setOptions(reply.connectOptions);
    }
    _$jscoverage['protocol/Connection.js'][353]++;
    manager.finalize(reply.authentication);
    _$jscoverage['protocol/Connection.js'][354]++;
    self._settings.user = manager.userFromServer;
    _$jscoverage['protocol/Connection.js'][355]++;
    if (manager.sessionCookie) {
      _$jscoverage['protocol/Connection.js'][356]++;
      self._settings.sessionCookie = manager.sessionCookie;
    }
    _$jscoverage['protocol/Connection.js'][358]++;
    self._queue.resume();
    _$jscoverage['protocol/Connection.js'][359]++;
    cb(null, reply);
}
  _$jscoverage['protocol/Connection.js'][362]++;
  function authReceive(err, reply) {
    _$jscoverage['protocol/Connection.js'][363]++;
    if (err) {
      _$jscoverage['protocol/Connection.js'][364]++;
      return cb(err);
    }
    _$jscoverage['protocol/Connection.js'][366]++;
    try {
      _$jscoverage['protocol/Connection.js'][367]++;
      manager.initialize(reply.authentication);
    }
    catch (err) {
      _$jscoverage['protocol/Connection.js'][369]++;
      return cb(err);
    }
    _$jscoverage['protocol/Connection.js'][371]++;
    self.send(request.connect({authentication: manager.finalData(), clientId: self.clientId, connectOptions: self.connectOptions.getOptions()}), connReceive);
}
  _$jscoverage['protocol/Connection.js'][377]++;
  this.send(request.authenticate({authentication: manager.initialData()}), authReceive);
});
_$jscoverage['protocol/Connection.js'][382]++;
Connection.prototype.disconnect = (function disconnect(cb) {
  _$jscoverage['protocol/Connection.js'][383]++;
  var self = this;
  _$jscoverage['protocol/Connection.js'][385]++;
  function done(err, reply) {
    _$jscoverage['protocol/Connection.js'][386]++;
    if (err) {
      _$jscoverage['protocol/Connection.js'][387]++;
      return cb(err);
    }
    _$jscoverage['protocol/Connection.js'][389]++;
    self._statementContext = undefined;
    _$jscoverage['protocol/Connection.js'][390]++;
    self._state = new ConnectionState();
    _$jscoverage['protocol/Connection.js'][391]++;
    cb(null, reply);
}
  _$jscoverage['protocol/Connection.js'][394]++;
  function enqueueDisconnect() {
    _$jscoverage['protocol/Connection.js'][395]++;
    self.enqueue(request.disconnect(), done);
}
  _$jscoverage['protocol/Connection.js'][398]++;
  if (this._queue.empty && ! this._queue.busy) {
    _$jscoverage['protocol/Connection.js'][399]++;
    return enqueueDisconnect();
  }
  _$jscoverage['protocol/Connection.js'][401]++;
  this._queue.once("drain", enqueueDisconnect);
});
_$jscoverage['protocol/Connection.js'][404]++;
Connection.prototype.executeDirect = (function executeDirect(options, cb) {
  _$jscoverage['protocol/Connection.js'][405]++;
  options.autoCommit = this.autoCommit;
  _$jscoverage['protocol/Connection.js'][406]++;
  options.holdCursorsOverCommit = this.holdCursorsOverCommit;
  _$jscoverage['protocol/Connection.js'][407]++;
  options.scrollableCursor = this.scrollableCursor;
  _$jscoverage['protocol/Connection.js'][408]++;
  this.enqueue(request.executeDirect(options), cb);
});
_$jscoverage['protocol/Connection.js'][411]++;
Connection.prototype.prepare = (function prepare(options, cb) {
  _$jscoverage['protocol/Connection.js'][412]++;
  options.holdCursorsOverCommit = this.holdCursorsOverCommit;
  _$jscoverage['protocol/Connection.js'][413]++;
  options.scrollableCursor = this.scrollableCursor;
  _$jscoverage['protocol/Connection.js'][414]++;
  this.enqueue(request.prepare(options), cb);
});
_$jscoverage['protocol/Connection.js'][417]++;
Connection.prototype.readLob = (function readLob(options, cb) {
  _$jscoverage['protocol/Connection.js'][418]++;
  if (options.locatorId) {
    _$jscoverage['protocol/Connection.js'][419]++;
    options = {readLobRequest: options};
  }
  _$jscoverage['protocol/Connection.js'][423]++;
  options.autoCommit = this.autoCommit;
  _$jscoverage['protocol/Connection.js'][424]++;
  this.enqueue(request.readLob(options), cb);
});
_$jscoverage['protocol/Connection.js'][427]++;
Connection.prototype.execute = (function execute(options, cb) {
  _$jscoverage['protocol/Connection.js'][428]++;
  options.autoCommit = this.autoCommit;
  _$jscoverage['protocol/Connection.js'][429]++;
  options.holdCursorsOverCommit = this.holdCursorsOverCommit;
  _$jscoverage['protocol/Connection.js'][430]++;
  options.scrollableCursor = this.scrollableCursor;
  _$jscoverage['protocol/Connection.js'][431]++;
  if (! options.parameters) {
    _$jscoverage['protocol/Connection.js'][432]++;
    return this.enqueue(request.execute({autoCommit: this.autoCommit, holdCursorsOverCommit: this.holdCursorsOverCommit, scrollableCursor: this.scrollableCursor, statementId: options.statementId, parameters: new Buffer(0)}), cb);
  }
  _$jscoverage['protocol/Connection.js'][440]++;
  this.enqueue(createExecuteTask(this, options, cb));
});
_$jscoverage['protocol/Connection.js'][443]++;
Connection.prototype.fetchNext = (function fetchNext(options, cb) {
  _$jscoverage['protocol/Connection.js'][444]++;
  options.autoCommit = this.autoCommit;
  _$jscoverage['protocol/Connection.js'][445]++;
  this.enqueue(request.fetchNext(options), cb);
});
_$jscoverage['protocol/Connection.js'][448]++;
Connection.prototype.closeResultSet = (function closeResultSet(options, cb) {
  _$jscoverage['protocol/Connection.js'][449]++;
  this.enqueue(request.closeResultSet(options), cb);
});
_$jscoverage['protocol/Connection.js'][452]++;
Connection.prototype.dropStatement = (function dropStatement(options, cb) {
  _$jscoverage['protocol/Connection.js'][453]++;
  this.enqueue(request.dropStatementId(options), cb);
});
_$jscoverage['protocol/Connection.js'][456]++;
Connection.prototype.commit = (function commit(options, cb) {
  _$jscoverage['protocol/Connection.js'][457]++;
  if (util.isFunction(options)) {
    _$jscoverage['protocol/Connection.js'][458]++;
    cb = options;
    _$jscoverage['protocol/Connection.js'][459]++;
    options = {};
  }
  _$jscoverage['protocol/Connection.js'][461]++;
  this.enqueue(request.commit(options), cb);
});
_$jscoverage['protocol/Connection.js'][464]++;
Connection.prototype.rollback = (function rollback(options, cb) {
  _$jscoverage['protocol/Connection.js'][465]++;
  if (util.isFunction(options)) {
    _$jscoverage['protocol/Connection.js'][466]++;
    cb = options;
    _$jscoverage['protocol/Connection.js'][467]++;
    options = {};
  }
  _$jscoverage['protocol/Connection.js'][469]++;
  this.enqueue(request.rollback(options), cb);
});
_$jscoverage['protocol/Connection.js'][472]++;
Connection.prototype.close = (function close() {
  _$jscoverage['protocol/Connection.js'][473]++;
  var self = this;
  _$jscoverage['protocol/Connection.js'][475]++;
  function closeConnection() {
    _$jscoverage['protocol/Connection.js'][476]++;
    debug("close");
    _$jscoverage['protocol/Connection.js'][477]++;
    self.destroy();
}
  _$jscoverage['protocol/Connection.js'][479]++;
  if (this._queue.empty && ! this._queue.busy) {
    _$jscoverage['protocol/Connection.js'][480]++;
    return closeConnection();
  }
  _$jscoverage['protocol/Connection.js'][482]++;
  this._queue.once("drain", closeConnection);
});
_$jscoverage['protocol/Connection.js'][485]++;
Connection.prototype.destroy = (function destroy(err) {
  _$jscoverage['protocol/Connection.js'][486]++;
  if (this._socket) {
    _$jscoverage['protocol/Connection.js'][487]++;
    this._socket.destroy(err);
  }
});
_$jscoverage['protocol/Connection.js'][491]++;
Connection.prototype.setAutoCommit = (function setAutoCommit(autoCommit) {
  _$jscoverage['protocol/Connection.js'][492]++;
  this._transaction.autoCommit = autoCommit;
});
_$jscoverage['protocol/Connection.js'][495]++;
function ConnectionState() {
  _$jscoverage['protocol/Connection.js'][496]++;
  this.sessionId = -1;
  _$jscoverage['protocol/Connection.js'][497]++;
  this.packetCount = -1;
  _$jscoverage['protocol/Connection.js'][498]++;
  this.messageType = undefined;
  _$jscoverage['protocol/Connection.js'][499]++;
  this.receive = undefined;
}
_$jscoverage['protocol/Connection.js'][502]++;
function Version(major, minor) {
  _$jscoverage['protocol/Connection.js'][503]++;
  this.major = major;
  _$jscoverage['protocol/Connection.js'][504]++;
  this.minor = minor;
}
_$jscoverage['protocol/Connection.js'][507]++;
Version.read = (function readVersion(buffer, offset) {
  _$jscoverage['protocol/Connection.js'][508]++;
  return new Version(buffer.readInt8(offset), buffer.readInt16LE(offset + 1));
});
_$jscoverage['protocol/Connection.js'][514]++;
function InitializationReply(productVersion, protocolVersion) {
  _$jscoverage['protocol/Connection.js'][515]++;
  this.productVersion = productVersion;
  _$jscoverage['protocol/Connection.js'][516]++;
  this.protocolVersion = protocolVersion;
}
_$jscoverage['protocol/Connection.js'][519]++;
InitializationReply.LENGTH = 8;
_$jscoverage['protocol/Connection.js'][521]++;
InitializationReply.read = (function readInitializationReply(buffer) {
  _$jscoverage['protocol/Connection.js'][522]++;
  var productVersion = Version.read(buffer, 0);
  _$jscoverage['protocol/Connection.js'][523]++;
  var protocolVersion = Version.read(buffer, 3);
  _$jscoverage['protocol/Connection.js'][524]++;
  return new InitializationReply(productVersion, protocolVersion);
});
_$jscoverage['protocol/Connection.js'][527]++;
var initializationRequestBuffer = new Buffer([255, 255, 255, 255, 4, 20, 0, 4, 1, 0, 0, 1, 1, 1]);
_$jscoverage['protocol/Connection.js'][531]++;
function MessageBuffer() {
  _$jscoverage['protocol/Connection.js'][532]++;
  this.length = 0;
  _$jscoverage['protocol/Connection.js'][533]++;
  this.header = undefined;
  _$jscoverage['protocol/Connection.js'][534]++;
  this.data = undefined;
}
_$jscoverage['protocol/Connection.js'][537]++;
MessageBuffer.prototype.isReady = (function () {
  _$jscoverage['protocol/Connection.js'][538]++;
  return this.header && this.length >= this.header.length;
});
_$jscoverage['protocol/Connection.js'][541]++;
MessageBuffer.prototype.push = (function push(chunk) {
  _$jscoverage['protocol/Connection.js'][542]++;
  if (! chunk || ! chunk.length) {
    _$jscoverage['protocol/Connection.js'][543]++;
    return;
  }
  _$jscoverage['protocol/Connection.js'][545]++;
  this.length += chunk.length;
  _$jscoverage['protocol/Connection.js'][546]++;
  if (! this.data) {
    _$jscoverage['protocol/Connection.js'][547]++;
    this.data = chunk;
  }
  else {
    _$jscoverage['protocol/Connection.js'][548]++;
    if (Buffer.isBuffer(this.data)) {
      _$jscoverage['protocol/Connection.js'][549]++;
      this.data = [this.data, chunk];
    }
    else {
      _$jscoverage['protocol/Connection.js'][551]++;
      this.data.push(chunk);
    }
  }
  _$jscoverage['protocol/Connection.js'][553]++;
  if (! this.header && this.length >= PACKET_HEADER_LENGTH) {
    _$jscoverage['protocol/Connection.js'][554]++;
    this.readHeader();
  }
});
_$jscoverage['protocol/Connection.js'][558]++;
MessageBuffer.prototype.getData = (function getData() {
  _$jscoverage['protocol/Connection.js'][559]++;
  if (util.isArray(this.data)) {
    _$jscoverage['protocol/Connection.js'][560]++;
    return Buffer.concat(this.data, this.length);
  }
  _$jscoverage['protocol/Connection.js'][562]++;
  return this.data;
});
_$jscoverage['protocol/Connection.js'][565]++;
MessageBuffer.prototype.readHeader = (function readHeader() {
  _$jscoverage['protocol/Connection.js'][566]++;
  var buffer = this.getData();
  _$jscoverage['protocol/Connection.js'][567]++;
  this.header = {sessionId: bignum.readUInt64LE(buffer, 0), packetCount: buffer.readUInt32LE(8), length: buffer.readUInt32LE(12)};
  _$jscoverage['protocol/Connection.js'][572]++;
  this.data = buffer.slice(PACKET_HEADER_LENGTH);
  _$jscoverage['protocol/Connection.js'][573]++;
  this.length -= PACKET_HEADER_LENGTH;
});
_$jscoverage['protocol/Connection.js'][576]++;
MessageBuffer.prototype.clear = (function clear() {
  _$jscoverage['protocol/Connection.js'][577]++;
  this.length = 0;
  _$jscoverage['protocol/Connection.js'][578]++;
  this.header = undefined;
  _$jscoverage['protocol/Connection.js'][579]++;
  this.data = undefined;
});
_$jscoverage['protocol/Connection.js'].source = ["// Copyright 2013 SAP AG.","//","// Licensed under the Apache License, Version 2.0 (the \"License\");","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","// http: //www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing,","// software distributed under the License is distributed on an","// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,","// either express or implied. See the License for the specific","// language governing permissions and limitations under the License.","'use strict';","","var os = require('os');","var EventEmitter = require('events').EventEmitter;","var tcp = require('./tcp');","var auth = require('./auth');","var util = require('../util');","var Transaction = require('./Transaction');","var common = require('./common');","var request = require('./request');","var reply = require('./reply');","var createExecuteTask = require('./ExecuteTask').create;","var ReplySegment = reply.Segment;","var part = require('./part');","var MessageType = common.MessageType;","var MessageTypeName = common.MessageTypeName;","var SegmentKind = common.SegmentKind;","var PartKind = common.PartKind;","var bignum = util.bignum;","var debug = util.debuglog('hdb');","var trace = util.tracelog();","","var MAX_PACKET_SIZE = common.MAX_PACKET_SIZE;","var PACKET_HEADER_LENGTH = common.PACKET_HEADER_LENGTH;","var SEGMENT_HEADER_LENGTH = common.SEGMENT_HEADER_LENGTH;","var PART_HEADER_LENGTH = common.PART_HEADER_LENGTH;","var MAX_AVAILABLE_SIZE = MAX_PACKET_SIZE -","  PACKET_HEADER_LENGTH - SEGMENT_HEADER_LENGTH - PART_HEADER_LENGTH;","","module.exports = Connection;","","util.inherits(Connection, EventEmitter);","","function Connection(settings) {","  EventEmitter.call(this);","","  var self = this;","  // public","  this.clientId = [process.pid || 'nodejs', os.hostname()].join('@');","  this.connectOptions = new part.ConnectOptions();","  this.protocolVersion = undefined;","  // private","  this._settings = settings || {};","  this._socket = undefined;","  this._queue = new util.Queue().pause();","  this._state = new ConnectionState();","  this._statementContext = undefined;","  this._transaction = new Transaction();","  this._transaction.once('error', function onerror(err) {","    self.destroy(err);","  });","}","","Object.defineProperties(Connection.prototype, {","  autoCommit: {","    get: function getAutoCommit() {","      return this._transaction.autoCommit;","    },","    set: function setAutoCommit(autoCommit) {","      this._transaction.setAutoCommit(autoCommit);","    }","  },","  holdCursorsOverCommit: {","    get: function getHoldCursorsOverCommit() {","      return !!this._settings.holdCursorsOverCommit;","    },","    set: function setHoldCursorsOverCommit(holdCursorsOverCommit) {","      this._settings.holdCursorsOverCommit = holdCursorsOverCommit;","    }","  },","  scrollableCursor: {","    get: function setScrollableCursor() {","      return !!this._settings.scrollableCursor;","    },","    set: function setScrollableCursor(scrollableCursor) {","      this._settings.scrollableCursor = scrollableCursor;","    }","  },","  readyState: {","    get: function getReadyState() {","      // no state ==&gt; socket must be closed","      if (!this._state) {","        return 'closed';","      }","      // no socket ==&gt; open has not been called","      if (!this._socket) {","        return 'new';","      }","      // socket is closed ==&gt; socket ended but not closed","      if (this._socket.readyState === 'closed') {","        return 'closed';","      }","      // no protocol version ==&gt; open not yet finished","      if (!this.protocolVersion) {","        return 'opening';","      }","      switch (this._state.messageType) {","      case MessageType.AUTHENTICATE:","      case MessageType.CONNECT:","        return 'connecting';","      case MessageType.DISCONNECT:","        return 'disconnecting';","      }","      if (this._state.sessionId === -1) {","        return 'disconnected';","      }","      return 'connected';","    }","  }","});","","Connection.prototype.open = function open(options, cb) {","  var self = this;","","  if (this._socket) {","    util.setImmediate(function deferError() {","      cb(new Error('Call open only once'));","    });","    return;","  }","","  function done(err, protocolVersion) {","    if (err) {","      return cb(err);","    }","    self.protocolVersion = protocolVersion;","    self._addListeners(self._socket);","    self.emit('open');","    cb();","  }","  this._socket = this._connect(options, done);","};","","Connection.prototype._connect = function _connect(options, cb) {","  var socket = tcp.connect(options, function connectListener() {","    socket.write(initializationRequestBuffer);","  });","","  function cleanup() {","    socket.removeListener('error', onerror);","    socket.removeListener('data', ondata);","  }","","  function onerror(err) {","    cleanup();","    cb(err);","  }","  socket.on('error', onerror);","","  function ondata(chunk) {","    cleanup();","    if (!chunk || chunk.length &lt; InitializationReply.LENGTH) {","      var err = new Error('Invalid initialization reply');","      err.code = 'EHDBINIT';","      return cb(err);","    }","    var reply = InitializationReply.read(chunk, 0);","    cb(null, reply.protocolVersion);","  }","  socket.on('data', ondata);","","  return socket;","};","","Connection.prototype._addListeners = function _addListeners(socket) {","  var self = this;","  var packet = new MessageBuffer();","","  function cleanup() {","    socket.removeListener('error', onerror);","    socket.removeListener('data', ondata);","    socket.removeListener('close', onclose);","  }","","  // register listerners on socket","  function ondata(chunk) {","    packet.push(chunk);","    if (packet.isReady()) {","      if (self._state.sessionId !== packet.header.sessionId) {","        self._state.sessionId = packet.header.sessionId;","        self._state.packetCount = -1;","      }","      var buffer = packet.getData();","      packet.clear();","      var cb = self._state.receive;","      self._state.receive = undefined;","      self._state.messageType = undefined;","      self.receive(buffer, cb);","    }","  }","  socket.on('data', ondata);","","  function onerror(err) {","    self.emit('error', err);","  }","  socket.on('error', onerror);","","  function onclose(hadError) {","    cleanup();","    self._cleanup();","    self.emit('close', hadError);","  }","  socket.on('close', onclose);","};","","Connection.prototype._cleanup = function _cleanup() {","  this._socket = undefined;","  this._state = undefined;","  this._queue.abort();","  this._queue = undefined;","};","","Connection.prototype.send = function send(message, receive) {","  if (this._statementContext) {","    message.unshift(PartKind.STATEMENT_CONTEXT, this._statementContext.getOptions());","  }","","  debug('send', message);","  trace('REQUEST', message);","","  var size = MAX_PACKET_SIZE - PACKET_HEADER_LENGTH;","  var buffer = message.toBuffer(size);","  var packet = new Buffer(PACKET_HEADER_LENGTH + buffer.length);","  buffer.copy(packet, PACKET_HEADER_LENGTH);","","  var state = this._state;","  state.messageType = message.type;","  state.receive = receive;","  // Increase packet count","  state.packetCount++;","  // Session identifier","  bignum.writeUInt64LE(packet, state.sessionId, 0);","  // Packet sequence number in this session","  // Packets with the same sequence number belong to one request / reply pair","  packet.writeUInt32LE(state.packetCount, 8);","  // Used space in this packet","  packet.writeUInt32LE(buffer.length, 12);","  // Total space in this packet","  packet.writeUInt32LE(size, 16);","  // Number of segments in this packet","  packet.writeUInt16LE(1, 20);","  // Filler","  packet.fill(0x00, 22, PACKET_HEADER_LENGTH);","  // Write request packet to socket","  if (this._socket) {","    this._socket.write(packet);","  }","};","","Connection.prototype.setStatementContext = function setStatementContext(options) {","  if (options &amp;&amp; options.length) {","    if (!this._statementContext) {","      this._statementContext = new part.StatementContext();","    }","    this._statementContext.setOptions(options);","  } else {","    this._statementContext = undefined;","  }","};","","Connection.prototype.getAvailableSize = function getAvailableSize() {","  var availableSize = MAX_AVAILABLE_SIZE;","  if (this._statementContext) {","    availableSize -= this._statementContext.size;","  }","  return availableSize;","};","","Connection.prototype.setTransactionFlags = function setTransactionFlags(flags) {","  if (flags) {","    this._transaction.setFlags(flags);","  }","};","","Connection.prototype.receive = function receive(buffer, cb) {","  var error, segment, reply;","  try {","    segment = ReplySegment.create(buffer, 0);","    trace(segment.kind === SegmentKind.ERROR ? 'ERROR' : 'REPLY', segment);","    reply = segment.getReply();","    this.setStatementContext(reply.statementContext);","    this.setTransactionFlags(reply.transactionFlags);","    if (reply.kind === SegmentKind.ERROR) {","      error = reply.error;","    } else if (this._transaction.error) {","      error = this._transaction.error;","    }","    debug('receive', reply);","  } catch (exception) {","    error = exception;","    error.code = 'EHDBMSGPARSE';","    debug('receive', error);","  }","  if (error &amp;&amp; error.fatal) {","    this.destroy(error);","  }","  if (util.isFunction(cb)) {","    cb(error, reply);","  }","};","","Connection.prototype.enqueue = function enqueue(task, cb) {","  var queueable;","  if (util.isFunction(task)) {","    queueable = this._queue.createTask(task, cb);","    queueable.name = task.name;","  } else if (util.isObject(task)) {","    if (task instanceof request.Segment) {","      task = this.send.bind(this, task);","      queueable = this._queue.createTask(task, cb);","      queueable.name = MessageTypeName[task.type];","    } else if (util.isFunction(task.run)) {","      queueable = task;","    }","  }","  if (queueable) {","    this._queue.push(queueable);","  }","};","","Connection.prototype.connect = function connect(options, cb) {","  var self = this;","","  var manager;","  try {","    manager = auth.createManager(options);","  } catch (err) {","    return util.setImmediate(function deferError() {","      cb(err);","    });","  }","","  function connReceive(err, reply) {","    if (err) {","      return cb(err);","    }","    if (util.isArray(reply.connectOptions)) {","      self.connectOptions.setOptions(reply.connectOptions);","    }","    manager.finalize(reply.authentication);","    self._settings.user = manager.userFromServer;","    if (manager.sessionCookie) {","      self._settings.sessionCookie = manager.sessionCookie;","    }","    self._queue.resume();","    cb(null, reply);","  }","","  function authReceive(err, reply) {","    if (err) {","      return cb(err);","    }","    try {","      manager.initialize(reply.authentication);","    } catch (err) {","      return cb(err);","    }","    self.send(request.connect({","      authentication: manager.finalData(),","      clientId: self.clientId,","      connectOptions: self.connectOptions.getOptions()","    }), connReceive);","  }","  this.send(request.authenticate({","    authentication: manager.initialData()","  }), authReceive);","};","","Connection.prototype.disconnect = function disconnect(cb) {","  var self = this;","","  function done(err, reply) {","    if (err) {","      return cb(err);","    }","    self._statementContext = undefined;","    self._state = new ConnectionState();","    cb(null, reply);","  }","","  function enqueueDisconnect() {","    self.enqueue(request.disconnect(), done);","  }","","  if (this._queue.empty &amp;&amp; !this._queue.busy) {","    return enqueueDisconnect();","  }","  this._queue.once('drain', enqueueDisconnect);","};","","Connection.prototype.executeDirect = function executeDirect(options, cb) {","  options.autoCommit = this.autoCommit;","  options.holdCursorsOverCommit = this.holdCursorsOverCommit;","  options.scrollableCursor = this.scrollableCursor;","  this.enqueue(request.executeDirect(options), cb);","};","","Connection.prototype.prepare = function prepare(options, cb) {","  options.holdCursorsOverCommit = this.holdCursorsOverCommit;","  options.scrollableCursor = this.scrollableCursor;","  this.enqueue(request.prepare(options), cb);","};","","Connection.prototype.readLob = function readLob(options, cb) {","  if (options.locatorId) {","    options = {","      readLobRequest: options","    };","  }","  options.autoCommit = this.autoCommit;","  this.enqueue(request.readLob(options), cb);","};","","Connection.prototype.execute = function execute(options, cb) {","  options.autoCommit = this.autoCommit;","  options.holdCursorsOverCommit = this.holdCursorsOverCommit;","  options.scrollableCursor = this.scrollableCursor;","  if (!options.parameters) {","    return this.enqueue(request.execute({","      autoCommit: this.autoCommit,","      holdCursorsOverCommit: this.holdCursorsOverCommit,","      scrollableCursor: this.scrollableCursor,","      statementId: options.statementId,","      parameters: new Buffer(0)","    }), cb);","  }","  this.enqueue(createExecuteTask(this, options, cb));","};","","Connection.prototype.fetchNext = function fetchNext(options, cb) {","  options.autoCommit = this.autoCommit;","  this.enqueue(request.fetchNext(options), cb);","};","","Connection.prototype.closeResultSet = function closeResultSet(options, cb) {","  this.enqueue(request.closeResultSet(options), cb);","};","","Connection.prototype.dropStatement = function dropStatement(options, cb) {","  this.enqueue(request.dropStatementId(options), cb);","};","","Connection.prototype.commit = function commit(options, cb) {","  if (util.isFunction(options)) {","    cb = options;","    options = {};","  }","  this.enqueue(request.commit(options), cb);","};","","Connection.prototype.rollback = function rollback(options, cb) {","  if (util.isFunction(options)) {","    cb = options;","    options = {};","  }","  this.enqueue(request.rollback(options), cb);","};","","Connection.prototype.close = function close() {","  var self = this;","","  function closeConnection() {","    debug('close');","    self.destroy();","  }","  if (this._queue.empty &amp;&amp; !this._queue.busy) {","    return closeConnection();","  }","  this._queue.once('drain', closeConnection);","};","","Connection.prototype.destroy = function destroy(err) {","  if (this._socket) {","    this._socket.destroy(err);","  }","};","","Connection.prototype.setAutoCommit = function setAutoCommit(autoCommit) {","  this._transaction.autoCommit = autoCommit;","};","","function ConnectionState() {","  this.sessionId = -1;","  this.packetCount = -1;","  this.messageType = undefined;","  this.receive = undefined;","}","","function Version(major, minor) {","  this.major = major;","  this.minor = minor;","}","","Version.read = function readVersion(buffer, offset) {","  return new Version(","    buffer.readInt8(offset),","    buffer.readInt16LE(offset + 1)","  );","};","","function InitializationReply(productVersion, protocolVersion) {","  this.productVersion = productVersion;","  this.protocolVersion = protocolVersion;","}","","InitializationReply.LENGTH = 8;","","InitializationReply.read = function readInitializationReply(buffer) {","  var productVersion = Version.read(buffer, 0);","  var protocolVersion = Version.read(buffer, 3);","  return new InitializationReply(productVersion, protocolVersion);","};","","var initializationRequestBuffer = new Buffer([","  0xff, 0xff, 0xff, 0xff, 4, 20, 0x00, 4, 1, 0x00, 0x00, 1, 1, 1","]);","","function MessageBuffer() {","  this.length = 0;","  this.header = undefined;","  this.data = undefined;","}","","MessageBuffer.prototype.isReady = function () {","  return this.header &amp;&amp; this.length &gt;= this.header.length;","};","","MessageBuffer.prototype.push = function push(chunk) {","  if (!chunk || !chunk.length) {","    return;","  }","  this.length += chunk.length;","  if (!this.data) {","    this.data = chunk;","  } else if (Buffer.isBuffer(this.data)) {","    this.data = [this.data, chunk];","  } else {","    this.data.push(chunk);","  }","  if (!this.header &amp;&amp; this.length &gt;= PACKET_HEADER_LENGTH) {","    this.readHeader();","  }","};","","MessageBuffer.prototype.getData = function getData() {","  if (util.isArray(this.data)) {","    return Buffer.concat(this.data, this.length);","  }","  return this.data;","};","","MessageBuffer.prototype.readHeader = function readHeader() {","  var buffer = this.getData();","  this.header = {","    sessionId: bignum.readUInt64LE(buffer, 0),","    packetCount: buffer.readUInt32LE(8),","    length: buffer.readUInt32LE(12)","  };","  this.data = buffer.slice(PACKET_HEADER_LENGTH);","  this.length -= PACKET_HEADER_LENGTH;","};","","MessageBuffer.prototype.clear = function clear() {","  this.length = 0;","  this.header = undefined;","  this.data = undefined;","};"];
