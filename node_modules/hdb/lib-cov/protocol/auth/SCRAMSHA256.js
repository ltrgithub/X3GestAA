/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['protocol/auth/SCRAMSHA256.js']) {
  _$jscoverage['protocol/auth/SCRAMSHA256.js'] = [];
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][14] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][16] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][17] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][18] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][20] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][21] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][23] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][25] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][26] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][29] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][30] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][31] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][32] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][33] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][34] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][36] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][37] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][40] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][41] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][44] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][45] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][49] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][53] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][54] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][57] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][61] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][62] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][63] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][64] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][65] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][66] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][67] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][68] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][69] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][70] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][72] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][75] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][76] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][77] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][78] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][79] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][80] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][83] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][85] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][86] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][87] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][89] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][92] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][93] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][94] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][95] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][98] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][99] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][100] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][101] = 0;
}
_$jscoverage['protocol/auth/SCRAMSHA256.js'][14]++;
"use strict";
_$jscoverage['protocol/auth/SCRAMSHA256.js'][16]++;
var crypto = require("crypto");
_$jscoverage['protocol/auth/SCRAMSHA256.js'][17]++;
var util = require("../../util");
_$jscoverage['protocol/auth/SCRAMSHA256.js'][18]++;
var Fields = require("../data/Fields");
_$jscoverage['protocol/auth/SCRAMSHA256.js'][20]++;
var CLIENT_PROOF_SIZE = 32;
_$jscoverage['protocol/auth/SCRAMSHA256.js'][21]++;
var CLIENT_CHALLENGE_SIZE = 64;
_$jscoverage['protocol/auth/SCRAMSHA256.js'][23]++;
module.exports = SCRAMSHA256;
_$jscoverage['protocol/auth/SCRAMSHA256.js'][25]++;
function createClientChallenge() {
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][26]++;
  return crypto.randomBytes(CLIENT_CHALLENGE_SIZE);
}
_$jscoverage['protocol/auth/SCRAMSHA256.js'][29]++;
function SCRAMSHA256(options) {
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][30]++;
  options = options || {};
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][31]++;
  this.name = "SCRAMSHA256";
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][32]++;
  this.password = options.password;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][33]++;
  if (util.isString(this.password)) {
    _$jscoverage['protocol/auth/SCRAMSHA256.js'][34]++;
    this.password = new Buffer(this.password, "utf8");
  }
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][36]++;
  this.clientChallenge = options.clientChallenge || createClientChallenge();
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][37]++;
  this.clientProof = undefined;
}
_$jscoverage['protocol/auth/SCRAMSHA256.js'][40]++;
SCRAMSHA256.prototype.initialData = (function initialData() {
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][41]++;
  return this.clientChallenge;
});
_$jscoverage['protocol/auth/SCRAMSHA256.js'][44]++;
SCRAMSHA256.prototype.initialize = (function initialize(buffer) {
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][45]++;
  var serverChallengeData = Fields.read({argumentCount: 1, buffer: buffer});
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][49]++;
  this.clientProof = calculateClientProof([serverChallengeData[0]], serverChallengeData[1], this.clientChallenge, this.password);
});
_$jscoverage['protocol/auth/SCRAMSHA256.js'][53]++;
SCRAMSHA256.prototype.finalData = (function finalData() {
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][54]++;
  return this.clientProof;
});
_$jscoverage['protocol/auth/SCRAMSHA256.js'][57]++;
SCRAMSHA256.prototype.finalize = (function finalize(buffer) {
});
_$jscoverage['protocol/auth/SCRAMSHA256.js'][61]++;
function calculateClientProof(salts, serverKey, clientKey, password) {
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][62]++;
  var buf = new Buffer(2 + (CLIENT_PROOF_SIZE + 1) * salts.length);
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][63]++;
  buf[0] = 0;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][64]++;
  buf.writeInt8(salts.length, 1);
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][65]++;
  var offset = 2;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][66]++;
  salts.forEach((function scrambleSalt(salt) {
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][67]++;
  buf.writeInt8(CLIENT_PROOF_SIZE, offset);
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][68]++;
  offset += 1;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][69]++;
  scramble(salt, serverKey, clientKey, password).copy(buf, offset);
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][70]++;
  offset += CLIENT_PROOF_SIZE;
}));
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][72]++;
  return buf;
}
_$jscoverage['protocol/auth/SCRAMSHA256.js'][75]++;
function scramble(salt, serverKey, clientKey, password) {
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][76]++;
  var length = salt.length + serverKey.length + clientKey.length;
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][77]++;
  var msg = Buffer.concat([salt, serverKey, clientKey], length);
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][78]++;
  var key = sha256(hmac(password, salt));
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][79]++;
  var sig = hmac(sha256(key), msg);
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][80]++;
  return xor(sig, key);
}
_$jscoverage['protocol/auth/SCRAMSHA256.js'][83]++;
function xor(a, b) {
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][85]++;
  var result = new Buffer(a.length);
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][86]++;
  for (var i = 0; i < a.length; i++) {
    _$jscoverage['protocol/auth/SCRAMSHA256.js'][87]++;
    result[i] = a[i] ^ b[i];
}
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][89]++;
  return result;
}
_$jscoverage['protocol/auth/SCRAMSHA256.js'][92]++;
function hmac(key, msg) {
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][93]++;
  var hash = crypto.createHmac("sha256", key);
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][94]++;
  hash.update(msg);
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][95]++;
  return new Buffer(hash.digest(), "binary");
}
_$jscoverage['protocol/auth/SCRAMSHA256.js'][98]++;
function sha256(msg) {
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][99]++;
  var hash = crypto.createHash("sha256");
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][100]++;
  hash.update(msg);
  _$jscoverage['protocol/auth/SCRAMSHA256.js'][101]++;
  return new Buffer(hash.digest(), "binary");
}
_$jscoverage['protocol/auth/SCRAMSHA256.js'].source = ["// Copyright 2013 SAP AG.","//","// Licensed under the Apache License, Version 2.0 (the \"License\");","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","// http: //www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing,","// software distributed under the License is distributed on an","// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,","// either express or implied. See the License for the specific","// language governing permissions and limitations under the License.","'use strict';","","var crypto = require('crypto');","var util = require('../../util');","var Fields = require('../data/Fields');","","var CLIENT_PROOF_SIZE = 32;","var CLIENT_CHALLENGE_SIZE = 64;","","module.exports = SCRAMSHA256;","","function createClientChallenge() {","  return crypto.randomBytes(CLIENT_CHALLENGE_SIZE);","}","","function SCRAMSHA256(options) {","  options = options || {};","  this.name = 'SCRAMSHA256';","  this.password = options.password;","  if (util.isString(this.password)) {","    this.password = new Buffer(this.password, 'utf8');","  }","  this.clientChallenge = options.clientChallenge || createClientChallenge();","  this.clientProof = undefined;","}","","SCRAMSHA256.prototype.initialData = function initialData() {","  return this.clientChallenge;","};","","SCRAMSHA256.prototype.initialize = function initialize(buffer) {","  var serverChallengeData = Fields.read({","    argumentCount: 1,","    buffer: buffer","  });","  this.clientProof = calculateClientProof([serverChallengeData[0]],","    serverChallengeData[1], this.clientChallenge, this.password);","};","","SCRAMSHA256.prototype.finalData = function finalData() {","  return this.clientProof;","};","","SCRAMSHA256.prototype.finalize = function finalize(buffer) {","  /* jshint unused:false */","};","","function calculateClientProof(salts, serverKey, clientKey, password) {","  var buf = new Buffer(2 + (CLIENT_PROOF_SIZE + 1) * salts.length);","  buf[0] = 0x00;","  buf.writeInt8(salts.length, 1);","  var offset = 2;","  salts.forEach(function scrambleSalt(salt) {","    buf.writeInt8(CLIENT_PROOF_SIZE, offset);","    offset += 1;","    scramble(salt, serverKey, clientKey, password).copy(buf, offset);","    offset += CLIENT_PROOF_SIZE;","  });","  return buf;","}","","function scramble(salt, serverKey, clientKey, password) {","  var length = salt.length + serverKey.length + clientKey.length;","  var msg = Buffer.concat([salt, serverKey, clientKey], length);","  var key = sha256(hmac(password, salt));","  var sig = hmac(sha256(key), msg);","  return xor(sig, key);","}","","function xor(a, b) {","  /* jshint bitwise:false */","  var result = new Buffer(a.length);","  for (var i = 0; i &lt; a.length; i++) {","    result[i] = a[i] ^ b[i];","  }","  return result;","}","","function hmac(key, msg) {","  var hash = crypto.createHmac('sha256', key);","  hash.update(msg);","  return new Buffer(hash.digest(), 'binary');","}","","function sha256(msg) {","  var hash = crypto.createHash('sha256');","  hash.update(msg);","  return new Buffer(hash.digest(), 'binary');","}"];
