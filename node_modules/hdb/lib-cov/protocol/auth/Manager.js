/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['protocol/auth/Manager.js']) {
  _$jscoverage['protocol/auth/Manager.js'] = [];
  _$jscoverage['protocol/auth/Manager.js'][14] = 0;
  _$jscoverage['protocol/auth/Manager.js'][16] = 0;
  _$jscoverage['protocol/auth/Manager.js'][17] = 0;
  _$jscoverage['protocol/auth/Manager.js'][18] = 0;
  _$jscoverage['protocol/auth/Manager.js'][20] = 0;
  _$jscoverage['protocol/auth/Manager.js'][22] = 0;
  _$jscoverage['protocol/auth/Manager.js'][23] = 0;
  _$jscoverage['protocol/auth/Manager.js'][24] = 0;
  _$jscoverage['protocol/auth/Manager.js'][25] = 0;
  _$jscoverage['protocol/auth/Manager.js'][26] = 0;
  _$jscoverage['protocol/auth/Manager.js'][27] = 0;
  _$jscoverage['protocol/auth/Manager.js'][28] = 0;
  _$jscoverage['protocol/auth/Manager.js'][30] = 0;
  _$jscoverage['protocol/auth/Manager.js'][31] = 0;
  _$jscoverage['protocol/auth/Manager.js'][33] = 0;
  _$jscoverage['protocol/auth/Manager.js'][34] = 0;
  _$jscoverage['protocol/auth/Manager.js'][36] = 0;
  _$jscoverage['protocol/auth/Manager.js'][37] = 0;
  _$jscoverage['protocol/auth/Manager.js'][41] = 0;
  _$jscoverage['protocol/auth/Manager.js'][44] = 0;
  _$jscoverage['protocol/auth/Manager.js'][45] = 0;
  _$jscoverage['protocol/auth/Manager.js'][47] = 0;
  _$jscoverage['protocol/auth/Manager.js'][52] = 0;
  _$jscoverage['protocol/auth/Manager.js'][53] = 0;
  _$jscoverage['protocol/auth/Manager.js'][59] = 0;
  _$jscoverage['protocol/auth/Manager.js'][60] = 0;
  _$jscoverage['protocol/auth/Manager.js'][61] = 0;
  _$jscoverage['protocol/auth/Manager.js'][62] = 0;
  _$jscoverage['protocol/auth/Manager.js'][64] = 0;
  _$jscoverage['protocol/auth/Manager.js'][67] = 0;
  _$jscoverage['protocol/auth/Manager.js'][68] = 0;
  _$jscoverage['protocol/auth/Manager.js'][69] = 0;
  _$jscoverage['protocol/auth/Manager.js'][70] = 0;
  _$jscoverage['protocol/auth/Manager.js'][71] = 0;
  _$jscoverage['protocol/auth/Manager.js'][72] = 0;
  _$jscoverage['protocol/auth/Manager.js'][73] = 0;
  _$jscoverage['protocol/auth/Manager.js'][74] = 0;
  _$jscoverage['protocol/auth/Manager.js'][75] = 0;
  _$jscoverage['protocol/auth/Manager.js'][76] = 0;
  _$jscoverage['protocol/auth/Manager.js'][79] = 0;
  _$jscoverage['protocol/auth/Manager.js'][80] = 0;
  _$jscoverage['protocol/auth/Manager.js'][82] = 0;
  _$jscoverage['protocol/auth/Manager.js'][83] = 0;
  _$jscoverage['protocol/auth/Manager.js'][86] = 0;
  _$jscoverage['protocol/auth/Manager.js'][87] = 0;
  _$jscoverage['protocol/auth/Manager.js'][88] = 0;
  _$jscoverage['protocol/auth/Manager.js'][89] = 0;
  _$jscoverage['protocol/auth/Manager.js'][91] = 0;
  _$jscoverage['protocol/auth/Manager.js'][94] = 0;
  _$jscoverage['protocol/auth/Manager.js'][95] = 0;
  _$jscoverage['protocol/auth/Manager.js'][96] = 0;
  _$jscoverage['protocol/auth/Manager.js'][97] = 0;
  _$jscoverage['protocol/auth/Manager.js'][98] = 0;
  _$jscoverage['protocol/auth/Manager.js'][99] = 0;
  _$jscoverage['protocol/auth/Manager.js'][100] = 0;
  _$jscoverage['protocol/auth/Manager.js'][101] = 0;
  _$jscoverage['protocol/auth/Manager.js'][106] = 0;
  _$jscoverage['protocol/auth/Manager.js'][107] = 0;
  _$jscoverage['protocol/auth/Manager.js'][108] = 0;
  _$jscoverage['protocol/auth/Manager.js'][109] = 0;
  _$jscoverage['protocol/auth/Manager.js'][110] = 0;
  _$jscoverage['protocol/auth/Manager.js'][111] = 0;
  _$jscoverage['protocol/auth/Manager.js'][116] = 0;
  _$jscoverage['protocol/auth/Manager.js'][117] = 0;
  _$jscoverage['protocol/auth/Manager.js'][118] = 0;
  _$jscoverage['protocol/auth/Manager.js'][119] = 0;
}
_$jscoverage['protocol/auth/Manager.js'][14]++;
"use strict";
_$jscoverage['protocol/auth/Manager.js'][16]++;
var SCRAMSHA256 = require("./SCRAMSHA256");
_$jscoverage['protocol/auth/Manager.js'][17]++;
var SAML = require("./SAML");
_$jscoverage['protocol/auth/Manager.js'][18]++;
var SessionCookie = require("./SessionCookie");
_$jscoverage['protocol/auth/Manager.js'][20]++;
module.exports = Manager;
_$jscoverage['protocol/auth/Manager.js'][22]++;
function Manager(options) {
  _$jscoverage['protocol/auth/Manager.js'][23]++;
  options = options || {};
  _$jscoverage['protocol/auth/Manager.js'][24]++;
  this.user = options.user || "";
  _$jscoverage['protocol/auth/Manager.js'][25]++;
  this._authMethod = undefined;
  _$jscoverage['protocol/auth/Manager.js'][26]++;
  this._authMethods = [];
  _$jscoverage['protocol/auth/Manager.js'][27]++;
  if (options.assertion || (! options.user && options.password)) {
    _$jscoverage['protocol/auth/Manager.js'][28]++;
    this._authMethods.push(new SAML(options));
  }
  _$jscoverage['protocol/auth/Manager.js'][30]++;
  if (options.sessionCookie) {
    _$jscoverage['protocol/auth/Manager.js'][31]++;
    this._authMethods.push(new SessionCookie(options));
  }
  _$jscoverage['protocol/auth/Manager.js'][33]++;
  if (options.user && options.password) {
    _$jscoverage['protocol/auth/Manager.js'][34]++;
    this._authMethods.push(new SCRAMSHA256(options));
  }
  _$jscoverage['protocol/auth/Manager.js'][36]++;
  if (! this._authMethods.length) {
    _$jscoverage['protocol/auth/Manager.js'][37]++;
    throw noAuthMethodFound();
  }
}
_$jscoverage['protocol/auth/Manager.js'][41]++;
Object.defineProperties(Manager.prototype, {userFromServer: {get: (function getUserFromServer() {
  _$jscoverage['protocol/auth/Manager.js'][44]++;
  if (this._authMethod && this._authMethod.user) {
    _$jscoverage['protocol/auth/Manager.js'][45]++;
    return this._authMethod.user;
  }
  _$jscoverage['protocol/auth/Manager.js'][47]++;
  return this.user;
})}, sessionCookie: {get: (function getSessionCookie() {
  _$jscoverage['protocol/auth/Manager.js'][52]++;
  if (this._authMethod && this._authMethod.sessionCookie) {
    _$jscoverage['protocol/auth/Manager.js'][53]++;
    return this._authMethod.sessionCookie;
  }
})}});
_$jscoverage['protocol/auth/Manager.js'][59]++;
Manager.prototype.initialData = (function initialData() {
  _$jscoverage['protocol/auth/Manager.js'][60]++;
  var fields = [this.user];
  _$jscoverage['protocol/auth/Manager.js'][61]++;
  this._authMethods.forEach((function initialDataOfMethod(method) {
  _$jscoverage['protocol/auth/Manager.js'][62]++;
  fields.push(method.name, method.initialData());
}));
  _$jscoverage['protocol/auth/Manager.js'][64]++;
  return fields;
});
_$jscoverage['protocol/auth/Manager.js'][67]++;
Manager.prototype.initialize = (function initialize(fields) {
  _$jscoverage['protocol/auth/Manager.js'][68]++;
  var initializedMethods = [];
  _$jscoverage['protocol/auth/Manager.js'][69]++;
  var name, method, buffer;
  _$jscoverage['protocol/auth/Manager.js'][70]++;
  while (fields.length) {
    _$jscoverage['protocol/auth/Manager.js'][71]++;
    name = fields.shift().toString("ascii");
    _$jscoverage['protocol/auth/Manager.js'][72]++;
    method = this.getMethod(name);
    _$jscoverage['protocol/auth/Manager.js'][73]++;
    buffer = fields.shift();
    _$jscoverage['protocol/auth/Manager.js'][74]++;
    if (method && buffer) {
      _$jscoverage['protocol/auth/Manager.js'][75]++;
      method.initialize(buffer);
      _$jscoverage['protocol/auth/Manager.js'][76]++;
      initializedMethods.push(method);
    }
}
  _$jscoverage['protocol/auth/Manager.js'][79]++;
  if (! initializedMethods.length) {
    _$jscoverage['protocol/auth/Manager.js'][80]++;
    throw noAuthMethodFound();
  }
  _$jscoverage['protocol/auth/Manager.js'][82]++;
  this._authMethod = initializedMethods.shift();
  _$jscoverage['protocol/auth/Manager.js'][83]++;
  this._authMethods = undefined;
});
_$jscoverage['protocol/auth/Manager.js'][86]++;
Manager.prototype.finalData = (function finalData() {
  _$jscoverage['protocol/auth/Manager.js'][87]++;
  var fields = [this.userFromServer];
  _$jscoverage['protocol/auth/Manager.js'][88]++;
  if (this._authMethod) {
    _$jscoverage['protocol/auth/Manager.js'][89]++;
    fields.push(this._authMethod.name, this._authMethod.finalData());
  }
  _$jscoverage['protocol/auth/Manager.js'][91]++;
  return fields;
});
_$jscoverage['protocol/auth/Manager.js'][94]++;
Manager.prototype.finalize = (function finalize(fields) {
  _$jscoverage['protocol/auth/Manager.js'][95]++;
  var name, buffer;
  _$jscoverage['protocol/auth/Manager.js'][96]++;
  while (fields.length) {
    _$jscoverage['protocol/auth/Manager.js'][97]++;
    name = fields.shift().toString("ascii");
    _$jscoverage['protocol/auth/Manager.js'][98]++;
    buffer = fields.shift();
    _$jscoverage['protocol/auth/Manager.js'][99]++;
    if (this._authMethod.name === name) {
      _$jscoverage['protocol/auth/Manager.js'][100]++;
      this._authMethod.finalize(buffer);
      _$jscoverage['protocol/auth/Manager.js'][101]++;
      break;
    }
}
});
_$jscoverage['protocol/auth/Manager.js'][106]++;
Manager.prototype.getMethod = (function getMethod(name) {
  _$jscoverage['protocol/auth/Manager.js'][107]++;
  var method;
  _$jscoverage['protocol/auth/Manager.js'][108]++;
  for (var i = 0; i < this._authMethods.length; i++) {
    _$jscoverage['protocol/auth/Manager.js'][109]++;
    method = this._authMethods[i];
    _$jscoverage['protocol/auth/Manager.js'][110]++;
    if (method.name === name) {
      _$jscoverage['protocol/auth/Manager.js'][111]++;
      return method;
    }
}
});
_$jscoverage['protocol/auth/Manager.js'][116]++;
function noAuthMethodFound() {
  _$jscoverage['protocol/auth/Manager.js'][117]++;
  var error = new Error("No authentication method found");
  _$jscoverage['protocol/auth/Manager.js'][118]++;
  error.code = "EHDBNOAUTHMETH";
  _$jscoverage['protocol/auth/Manager.js'][119]++;
  return error;
}
_$jscoverage['protocol/auth/Manager.js'].source = ["// Copyright 2013 SAP AG.","//","// Licensed under the Apache License, Version 2.0 (the \"License\");","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","// http: //www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing,","// software distributed under the License is distributed on an","// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,","// either express or implied. See the License for the specific","// language governing permissions and limitations under the License.","'use strict';","","var SCRAMSHA256 = require('./SCRAMSHA256');","var SAML = require('./SAML');","var SessionCookie = require('./SessionCookie');","","module.exports = Manager;","","function Manager(options) {","  options = options || {};","  this.user = options.user || '';","  this._authMethod = undefined;","  this._authMethods = [];","  if (options.assertion || (!options.user &amp;&amp; options.password)) {","    this._authMethods.push(new SAML(options));","  }","  if (options.sessionCookie) {","    this._authMethods.push(new SessionCookie(options));","  }","  if (options.user &amp;&amp; options.password) {","    this._authMethods.push(new SCRAMSHA256(options));","  }","  if (!this._authMethods.length) {","    throw noAuthMethodFound();","  }","}","","Object.defineProperties(Manager.prototype, {","  userFromServer: {","    get: function getUserFromServer() {","      if (this._authMethod &amp;&amp; this._authMethod.user) {","        return this._authMethod.user;","      }","      return this.user;","    }","  },","  sessionCookie: {","    get: function getSessionCookie() {","      if (this._authMethod &amp;&amp; this._authMethod.sessionCookie) {","        return this._authMethod.sessionCookie;","      }","    }","  }","});","","Manager.prototype.initialData = function initialData() {","  var fields = [this.user];","  this._authMethods.forEach(function initialDataOfMethod(method) {","    fields.push(method.name, method.initialData());","  });","  return fields;","};","","Manager.prototype.initialize = function initialize(fields) {","  var initializedMethods = [];","  var name, method, buffer;","  while (fields.length) {","    name = fields.shift().toString('ascii');","    method = this.getMethod(name);","    buffer = fields.shift();","    if (method &amp;&amp; buffer) {","      method.initialize(buffer);","      initializedMethods.push(method);","    }","  }","  if (!initializedMethods.length) {","    throw noAuthMethodFound();","  }","  this._authMethod = initializedMethods.shift();","  this._authMethods = undefined;","};","","Manager.prototype.finalData = function finalData() {","  var fields = [this.userFromServer];","  if (this._authMethod) {","    fields.push(this._authMethod.name, this._authMethod.finalData());","  }","  return fields;","};","","Manager.prototype.finalize = function finalize(fields) {","  var name, buffer;","  while (fields.length) {","    name = fields.shift().toString('ascii');","    buffer = fields.shift();","    if (this._authMethod.name === name) {","      this._authMethod.finalize(buffer);","      break;","    }","  }","};","","Manager.prototype.getMethod = function getMethod(name) {","  var method;","  for (var i = 0; i &lt; this._authMethods.length; i++) {","    method = this._authMethods[i];","    if (method.name === name) {","      return method;","    }","  }","};","","function noAuthMethodFound() {","  var error = new Error('No authentication method found');","  error.code = 'EHDBNOAUTHMETH';","  return error;","}"];
