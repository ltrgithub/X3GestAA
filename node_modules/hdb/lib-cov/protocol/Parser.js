/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['protocol/Parser.js']) {
  _$jscoverage['protocol/Parser.js'] = [];
  _$jscoverage['protocol/Parser.js'][14] = 0;
  _$jscoverage['protocol/Parser.js'][16] = 0;
  _$jscoverage['protocol/Parser.js'][17] = 0;
  _$jscoverage['protocol/Parser.js'][18] = 0;
  _$jscoverage['protocol/Parser.js'][19] = 0;
  _$jscoverage['protocol/Parser.js'][20] = 0;
  _$jscoverage['protocol/Parser.js'][22] = 0;
  _$jscoverage['protocol/Parser.js'][24] = 0;
  _$jscoverage['protocol/Parser.js'][25] = 0;
  _$jscoverage['protocol/Parser.js'][26] = 0;
  _$jscoverage['protocol/Parser.js'][27] = 0;
  _$jscoverage['protocol/Parser.js'][30] = 0;
  _$jscoverage['protocol/Parser.js'][31] = 0;
  _$jscoverage['protocol/Parser.js'][34] = 0;
  _$jscoverage['protocol/Parser.js'][35] = 0;
  _$jscoverage['protocol/Parser.js'][38] = 0;
  _$jscoverage['protocol/Parser.js'][39] = 0;
  _$jscoverage['protocol/Parser.js'][42] = 0;
  _$jscoverage['protocol/Parser.js'][43] = 0;
  _$jscoverage['protocol/Parser.js'][46] = 0;
  _$jscoverage['protocol/Parser.js'][47] = 0;
  _$jscoverage['protocol/Parser.js'][48] = 0;
  _$jscoverage['protocol/Parser.js'][49] = 0;
  _$jscoverage['protocol/Parser.js'][51] = 0;
  _$jscoverage['protocol/Parser.js'][54] = 0;
  _$jscoverage['protocol/Parser.js'][56] = 0;
  _$jscoverage['protocol/Parser.js'][59] = 0;
  _$jscoverage['protocol/Parser.js'][62] = 0;
  _$jscoverage['protocol/Parser.js'][63] = 0;
  _$jscoverage['protocol/Parser.js'][64] = 0;
  _$jscoverage['protocol/Parser.js'][65] = 0;
  _$jscoverage['protocol/Parser.js'][67] = 0;
  _$jscoverage['protocol/Parser.js'][68] = 0;
  _$jscoverage['protocol/Parser.js'][69] = 0;
  _$jscoverage['protocol/Parser.js'][71] = 0;
  _$jscoverage['protocol/Parser.js'][73] = 0;
  _$jscoverage['protocol/Parser.js'][79] = 0;
  _$jscoverage['protocol/Parser.js'][80] = 0;
  _$jscoverage['protocol/Parser.js'][81] = 0;
  _$jscoverage['protocol/Parser.js'][82] = 0;
  _$jscoverage['protocol/Parser.js'][83] = 0;
  _$jscoverage['protocol/Parser.js'][84] = 0;
  _$jscoverage['protocol/Parser.js'][85] = 0;
  _$jscoverage['protocol/Parser.js'][87] = 0;
  _$jscoverage['protocol/Parser.js'][91] = 0;
  _$jscoverage['protocol/Parser.js'][92] = 0;
  _$jscoverage['protocol/Parser.js'][93] = 0;
  _$jscoverage['protocol/Parser.js'][94] = 0;
  _$jscoverage['protocol/Parser.js'][97] = 0;
  _$jscoverage['protocol/Parser.js'][98] = 0;
  _$jscoverage['protocol/Parser.js'][99] = 0;
  _$jscoverage['protocol/Parser.js'][100] = 0;
  _$jscoverage['protocol/Parser.js'][101] = 0;
  _$jscoverage['protocol/Parser.js'][102] = 0;
  _$jscoverage['protocol/Parser.js'][104] = 0;
  _$jscoverage['protocol/Parser.js'][107] = 0;
  _$jscoverage['protocol/Parser.js'][108] = 0;
  _$jscoverage['protocol/Parser.js'][111] = 0;
  _$jscoverage['protocol/Parser.js'][113] = 0;
  _$jscoverage['protocol/Parser.js'][114] = 0;
  _$jscoverage['protocol/Parser.js'][115] = 0;
  _$jscoverage['protocol/Parser.js'][116] = 0;
  _$jscoverage['protocol/Parser.js'][118] = 0;
  _$jscoverage['protocol/Parser.js'][120] = 0;
  _$jscoverage['protocol/Parser.js'][121] = 0;
  _$jscoverage['protocol/Parser.js'][122] = 0;
  _$jscoverage['protocol/Parser.js'][124] = 0;
  _$jscoverage['protocol/Parser.js'][126] = 0;
  _$jscoverage['protocol/Parser.js'][128] = 0;
  _$jscoverage['protocol/Parser.js'][129] = 0;
  _$jscoverage['protocol/Parser.js'][130] = 0;
  _$jscoverage['protocol/Parser.js'][131] = 0;
}
_$jscoverage['protocol/Parser.js'][14]++;
"use strict";
_$jscoverage['protocol/Parser.js'][16]++;
var common = require("./common");
_$jscoverage['protocol/Parser.js'][17]++;
var ResultSetTransform = require("./ResultSetTransform");
_$jscoverage['protocol/Parser.js'][18]++;
var Reader = require("./Reader");
_$jscoverage['protocol/Parser.js'][19]++;
var ReadFunction = common.ReadFunction;
_$jscoverage['protocol/Parser.js'][20]++;
var TypeCode = common.TypeCode;
_$jscoverage['protocol/Parser.js'][22]++;
module.exports = Parser;
_$jscoverage['protocol/Parser.js'][24]++;
function Parser(metadata, lobFactory) {
  _$jscoverage['protocol/Parser.js'][25]++;
  this.metadata = metadata;
  _$jscoverage['protocol/Parser.js'][26]++;
  this.lobFactory = lobFactory;
  _$jscoverage['protocol/Parser.js'][27]++;
  this.honest = ! ! process.browser;
}
_$jscoverage['protocol/Parser.js'][30]++;
Parser.create = (function createParser(metadata, lobFactory) {
  _$jscoverage['protocol/Parser.js'][31]++;
  return new Parser(metadata, lobFactory);
});
_$jscoverage['protocol/Parser.js'][34]++;
Parser.parseParameters = (function parseParameters(metadata, buffer) {
  _$jscoverage['protocol/Parser.js'][35]++;
  return Parser.create(metadata).parseParams(buffer);
});
_$jscoverage['protocol/Parser.js'][38]++;
Parser.prototype.createParseRowFunction = (function createParseRowFunction() {
  _$jscoverage['protocol/Parser.js'][39]++;
  return this.createParseFunction("columnDisplayName");
});
_$jscoverage['protocol/Parser.js'][42]++;
Parser.prototype.createParseParamsFunction = (function createParseParamsFunction() {
  _$jscoverage['protocol/Parser.js'][43]++;
  return this.createParseFunction("name");
});
_$jscoverage['protocol/Parser.js'][46]++;
Parser.prototype.createParseFunction = (function createParseFunction(name) {
  _$jscoverage['protocol/Parser.js'][47]++;
  name = name || "columnDisplayName";
  _$jscoverage['protocol/Parser.js'][48]++;
  if (! this.honest) {
    _$jscoverage['protocol/Parser.js'][49]++;
    return this.createEvilParseFunction(name);
  }
  _$jscoverage['protocol/Parser.js'][51]++;
  return this.createHonestParseFunction(name);
});
_$jscoverage['protocol/Parser.js'][54]++;
Parser.prototype.createEvilParseFunction = (function createParseFunction(name) {
  _$jscoverage['protocol/Parser.js'][56]++;
  return new Function(createFunctionBody(this.metadata, name));
});
_$jscoverage['protocol/Parser.js'][59]++;
Parser.prototype.createHonestParseFunction = (function createHonestParseFunction(name) {
  _$jscoverage['protocol/Parser.js'][62]++;
  function mapColumnMetadata(column, index) {
    _$jscoverage['protocol/Parser.js'][63]++;
    var arg;
    _$jscoverage['protocol/Parser.js'][64]++;
    if (column.dataType === TypeCode.DECIMAL) {
      _$jscoverage['protocol/Parser.js'][65]++;
      arg = column.fraction;
    }
    _$jscoverage['protocol/Parser.js'][67]++;
    var key;
    _$jscoverage['protocol/Parser.js'][68]++;
    if (typeof name === "string") {
      _$jscoverage['protocol/Parser.js'][69]++;
      key = column[name];
    }
    else {
      _$jscoverage['protocol/Parser.js'][71]++;
      key = index;
    }
    _$jscoverage['protocol/Parser.js'][73]++;
    return ({key: key, fname: ReadFunction[column.dataType], arg: arg});
}
  _$jscoverage['protocol/Parser.js'][79]++;
  var columns = this.metadata.map(mapColumnMetadata);
  _$jscoverage['protocol/Parser.js'][80]++;
  return (function parseRow() {
  _$jscoverage['protocol/Parser.js'][81]++;
  var column;
  _$jscoverage['protocol/Parser.js'][82]++;
  var obj = {};
  _$jscoverage['protocol/Parser.js'][83]++;
  for (var i = 0; i < columns.length; i++) {
    _$jscoverage['protocol/Parser.js'][84]++;
    column = columns[i];
    _$jscoverage['protocol/Parser.js'][85]++;
    obj[column.key] = this[column.fname](column.arg);
}
  _$jscoverage['protocol/Parser.js'][87]++;
  return obj;
});
});
_$jscoverage['protocol/Parser.js'][91]++;
Parser.prototype.parseParams = (function parseParams(buffer) {
  _$jscoverage['protocol/Parser.js'][92]++;
  var reader = new Reader(buffer, this.lobFactory);
  _$jscoverage['protocol/Parser.js'][93]++;
  var parseParamsFunction = this.createParseParamsFunction();
  _$jscoverage['protocol/Parser.js'][94]++;
  return parseParamsFunction.call(reader);
});
_$jscoverage['protocol/Parser.js'][97]++;
Parser.prototype.parse = (function parse(buffer) {
  _$jscoverage['protocol/Parser.js'][98]++;
  var reader = new Reader(buffer, this.lobFactory);
  _$jscoverage['protocol/Parser.js'][99]++;
  var parseRow = this.createParseRowFunction().bind(reader);
  _$jscoverage['protocol/Parser.js'][100]++;
  var rows = [];
  _$jscoverage['protocol/Parser.js'][101]++;
  while (reader.hasMore()) {
    _$jscoverage['protocol/Parser.js'][102]++;
    rows.push(parseRow());
}
  _$jscoverage['protocol/Parser.js'][104]++;
  return rows;
});
_$jscoverage['protocol/Parser.js'][107]++;
Parser.prototype.createTransform = (function createTransform(rs, options) {
  _$jscoverage['protocol/Parser.js'][108]++;
  return new ResultSetTransform(this.createParseRowFunction(), rs, options);
});
_$jscoverage['protocol/Parser.js'][111]++;
function createFunctionBody(metadata, nameProperty) {
  _$jscoverage['protocol/Parser.js'][113]++;
  function addParseColumnLine(column, index) {
    _$jscoverage['protocol/Parser.js'][114]++;
    var fn = ReadFunction[column.dataType];
    _$jscoverage['protocol/Parser.js'][115]++;
    if (column.dataType === TypeCode.DECIMAL) {
      _$jscoverage['protocol/Parser.js'][116]++;
      fn += "(" + column.fraction + ")";
    }
    else {
      _$jscoverage['protocol/Parser.js'][118]++;
      fn += "()";
    }
    _$jscoverage['protocol/Parser.js'][120]++;
    var key;
    _$jscoverage['protocol/Parser.js'][121]++;
    if (typeof nameProperty === "string") {
      _$jscoverage['protocol/Parser.js'][122]++;
      key = column[nameProperty];
    }
    else {
      _$jscoverage['protocol/Parser.js'][124]++;
      key = index;
    }
    _$jscoverage['protocol/Parser.js'][126]++;
    return "\"" + key + "\": this." + fn;
}
  _$jscoverage['protocol/Parser.js'][128]++;
  var functionBody = "return {\n";
  _$jscoverage['protocol/Parser.js'][129]++;
  functionBody += metadata.map(addParseColumnLine).join(",\n");
  _$jscoverage['protocol/Parser.js'][130]++;
  functionBody += "\n};";
  _$jscoverage['protocol/Parser.js'][131]++;
  return functionBody;
}
_$jscoverage['protocol/Parser.js'].source = ["// Copyright 2013 SAP AG.","//","// Licensed under the Apache License, Version 2.0 (the \"License\");","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","// http: //www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing,","// software distributed under the License is distributed on an","// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,","// either express or implied. See the License for the specific","// language governing permissions and limitations under the License.","'use strict';","","var common = require('./common');","var ResultSetTransform = require('./ResultSetTransform');","var Reader = require('./Reader');","var ReadFunction = common.ReadFunction;","var TypeCode = common.TypeCode;","","module.exports = Parser;","","function Parser(metadata, lobFactory) {","  this.metadata = metadata;","  this.lobFactory = lobFactory;","  this.honest = !!process.browser;","}","","Parser.create = function createParser(metadata, lobFactory) {","  return new Parser(metadata, lobFactory);","};","","Parser.parseParameters = function parseParameters(metadata, buffer) {","  return Parser.create(metadata).parseParams(buffer);","};","","Parser.prototype.createParseRowFunction = function createParseRowFunction() {","  return this.createParseFunction('columnDisplayName');","};","","Parser.prototype.createParseParamsFunction = function createParseParamsFunction() {","  return this.createParseFunction('name');","};","","Parser.prototype.createParseFunction = function createParseFunction(name) {","  name = name || 'columnDisplayName';","  if (!this.honest) {","    return this.createEvilParseFunction(name);","  }","  return this.createHonestParseFunction(name);","};","","Parser.prototype.createEvilParseFunction = function createParseFunction(name) {","  /*jshint evil:true */","  return new Function(createFunctionBody(this.metadata, name));","};","","Parser.prototype.createHonestParseFunction = function createHonestParseFunction(","  name) {","","  function mapColumnMetadata(column, index) {","    var arg;","    if (column.dataType === TypeCode.DECIMAL) {","      arg = column.fraction;","    }","    var key;","    if (typeof name === 'string') {","      key = column[name];","    } else {","      key = index;","    }","    return {","      key: key,","      fname: ReadFunction[column.dataType],","      arg: arg","    };","  }","  var columns = this.metadata.map(mapColumnMetadata);","  return function parseRow() {","    var column;","    var obj = {};","    for (var i = 0; i &lt; columns.length; i++) {","      column = columns[i];","      obj[column.key] = this[column.fname](column.arg);","    }","    return obj;","  };","};","","Parser.prototype.parseParams = function parseParams(buffer) {","  var reader = new Reader(buffer, this.lobFactory);","  var parseParamsFunction = this.createParseParamsFunction();","  return parseParamsFunction.call(reader);","};","","Parser.prototype.parse = function parse(buffer) {","  var reader = new Reader(buffer, this.lobFactory);","  var parseRow = this.createParseRowFunction().bind(reader);","  var rows = [];","  while (reader.hasMore()) {","    rows.push(parseRow());","  }","  return rows;","};","","Parser.prototype.createTransform = function createTransform(rs, options) {","  return new ResultSetTransform(this.createParseRowFunction(), rs, options);","};","","function createFunctionBody(metadata, nameProperty) {","","  function addParseColumnLine(column, index) {","    var fn = ReadFunction[column.dataType];","    if (column.dataType === TypeCode.DECIMAL) {","      fn += '(' + column.fraction + ')';","    } else {","      fn += '()';","    }","    var key;","    if (typeof nameProperty === 'string') {","      key = column[nameProperty];","    } else {","      key = index;","    }","    return '\"' + key + '\": this.' + fn;","  }","  var functionBody = 'return {\\n';","  functionBody += metadata.map(addParseColumnLine).join(',\\n');","  functionBody += '\\n};';","  return functionBody;","}"];
