/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['protocol/Statement.js']) {
  _$jscoverage['protocol/Statement.js'] = [];
  _$jscoverage['protocol/Statement.js'][14] = 0;
  _$jscoverage['protocol/Statement.js'][16] = 0;
  _$jscoverage['protocol/Statement.js'][17] = 0;
  _$jscoverage['protocol/Statement.js'][18] = 0;
  _$jscoverage['protocol/Statement.js'][19] = 0;
  _$jscoverage['protocol/Statement.js'][20] = 0;
  _$jscoverage['protocol/Statement.js'][22] = 0;
  _$jscoverage['protocol/Statement.js'][24] = 0;
  _$jscoverage['protocol/Statement.js'][26] = 0;
  _$jscoverage['protocol/Statement.js'][27] = 0;
  _$jscoverage['protocol/Statement.js'][28] = 0;
  _$jscoverage['protocol/Statement.js'][29] = 0;
  _$jscoverage['protocol/Statement.js'][30] = 0;
  _$jscoverage['protocol/Statement.js'][32] = 0;
  _$jscoverage['protocol/Statement.js'][35] = 0;
  _$jscoverage['protocol/Statement.js'][36] = 0;
  _$jscoverage['protocol/Statement.js'][39] = 0;
  _$jscoverage['protocol/Statement.js'][40] = 0;
  _$jscoverage['protocol/Statement.js'][43] = 0;
  _$jscoverage['protocol/Statement.js'][44] = 0;
  _$jscoverage['protocol/Statement.js'][47] = 0;
  _$jscoverage['protocol/Statement.js'][48] = 0;
  _$jscoverage['protocol/Statement.js'][51] = 0;
  _$jscoverage['protocol/Statement.js'][53] = 0;
  _$jscoverage['protocol/Statement.js'][55] = 0;
  _$jscoverage['protocol/Statement.js'][56] = 0;
  _$jscoverage['protocol/Statement.js'][57] = 0;
  _$jscoverage['protocol/Statement.js'][59] = 0;
  _$jscoverage['protocol/Statement.js'][60] = 0;
  _$jscoverage['protocol/Statement.js'][63] = 0;
  _$jscoverage['protocol/Statement.js'][68] = 0;
  _$jscoverage['protocol/Statement.js'][69] = 0;
  _$jscoverage['protocol/Statement.js'][70] = 0;
  _$jscoverage['protocol/Statement.js'][74] = 0;
  _$jscoverage['protocol/Statement.js'][75] = 0;
  _$jscoverage['protocol/Statement.js'][76] = 0;
  _$jscoverage['protocol/Statement.js'][77] = 0;
  _$jscoverage['protocol/Statement.js'][80] = 0;
  _$jscoverage['protocol/Statement.js'][81] = 0;
  _$jscoverage['protocol/Statement.js'][82] = 0;
  _$jscoverage['protocol/Statement.js'][83] = 0;
  _$jscoverage['protocol/Statement.js'][85] = 0;
  _$jscoverage['protocol/Statement.js'][86] = 0;
  _$jscoverage['protocol/Statement.js'][89] = 0;
  _$jscoverage['protocol/Statement.js'][91] = 0;
  _$jscoverage['protocol/Statement.js'][92] = 0;
  _$jscoverage['protocol/Statement.js'][93] = 0;
  _$jscoverage['protocol/Statement.js'][94] = 0;
  _$jscoverage['protocol/Statement.js'][97] = 0;
  _$jscoverage['protocol/Statement.js'][98] = 0;
  _$jscoverage['protocol/Statement.js'][101] = 0;
  _$jscoverage['protocol/Statement.js'][102] = 0;
  _$jscoverage['protocol/Statement.js'][103] = 0;
  _$jscoverage['protocol/Statement.js'][105] = 0;
  _$jscoverage['protocol/Statement.js'][108] = 0;
  _$jscoverage['protocol/Statement.js'][112] = 0;
  _$jscoverage['protocol/Statement.js'][113] = 0;
  _$jscoverage['protocol/Statement.js'][114] = 0;
  _$jscoverage['protocol/Statement.js'][117] = 0;
  _$jscoverage['protocol/Statement.js'][118] = 0;
  _$jscoverage['protocol/Statement.js'][120] = 0;
  _$jscoverage['protocol/Statement.js'][121] = 0;
  _$jscoverage['protocol/Statement.js'][124] = 0;
  _$jscoverage['protocol/Statement.js'][126] = 0;
  _$jscoverage['protocol/Statement.js'][127] = 0;
  _$jscoverage['protocol/Statement.js'][128] = 0;
  _$jscoverage['protocol/Statement.js'][129] = 0;
  _$jscoverage['protocol/Statement.js'][130] = 0;
  _$jscoverage['protocol/Statement.js'][132] = 0;
  _$jscoverage['protocol/Statement.js'][133] = 0;
  _$jscoverage['protocol/Statement.js'][134] = 0;
  _$jscoverage['protocol/Statement.js'][137] = 0;
  _$jscoverage['protocol/Statement.js'][138] = 0;
  _$jscoverage['protocol/Statement.js'][139] = 0;
  _$jscoverage['protocol/Statement.js'][140] = 0;
  _$jscoverage['protocol/Statement.js'][145] = 0;
  _$jscoverage['protocol/Statement.js'][149] = 0;
  _$jscoverage['protocol/Statement.js'][150] = 0;
  _$jscoverage['protocol/Statement.js'][153] = 0;
  _$jscoverage['protocol/Statement.js'][154] = 0;
}
_$jscoverage['protocol/Statement.js'][14]++;
"use strict";
_$jscoverage['protocol/Statement.js'][16]++;
var util = require("../util");
_$jscoverage['protocol/Statement.js'][17]++;
var Result = require("./Result");
_$jscoverage['protocol/Statement.js'][18]++;
var common = require("./common");
_$jscoverage['protocol/Statement.js'][19]++;
var IoType = common.IoType;
_$jscoverage['protocol/Statement.js'][20]++;
var FunctionCode = common.FunctionCode;
_$jscoverage['protocol/Statement.js'][22]++;
module.exports = Statement;
_$jscoverage['protocol/Statement.js'][24]++;
function Statement(connection) {
  _$jscoverage['protocol/Statement.js'][26]++;
  this.id = undefined;
  _$jscoverage['protocol/Statement.js'][27]++;
  this.functionCode = FunctionCode.NIL;
  _$jscoverage['protocol/Statement.js'][28]++;
  this.parameterMetadata = undefined;
  _$jscoverage['protocol/Statement.js'][29]++;
  this.resultSetMetadata = undefined;
  _$jscoverage['protocol/Statement.js'][30]++;
  this.droped = false;
  _$jscoverage['protocol/Statement.js'][32]++;
  this._connection = connection;
}
_$jscoverage['protocol/Statement.js'][35]++;
Statement.prototype.exec = (function exec(values, options, cb) {
  _$jscoverage['protocol/Statement.js'][36]++;
  var defaults = {autoFetch: true};
  _$jscoverage['protocol/Statement.js'][39]++;
  executeStatement.call(this, defaults, values, options, cb);
  _$jscoverage['protocol/Statement.js'][40]++;
  return this;
});
_$jscoverage['protocol/Statement.js'][43]++;
Statement.prototype.execute = (function execute(values, options, cb) {
  _$jscoverage['protocol/Statement.js'][44]++;
  var defaults = {autoFetch: false};
  _$jscoverage['protocol/Statement.js'][47]++;
  executeStatement.call(this, defaults, values, options, cb);
  _$jscoverage['protocol/Statement.js'][48]++;
  return this;
});
_$jscoverage['protocol/Statement.js'][51]++;
Statement.prototype.drop = (function drop(cb) {
  _$jscoverage['protocol/Statement.js'][53]++;
  function done(err) {
    _$jscoverage['protocol/Statement.js'][55]++;
    this._connection = undefined;
    _$jscoverage['protocol/Statement.js'][56]++;
    if (! err) {
      _$jscoverage['protocol/Statement.js'][57]++;
      this.droped = true;
    }
    _$jscoverage['protocol/Statement.js'][59]++;
    if (util.isFunction(cb)) {
      _$jscoverage['protocol/Statement.js'][60]++;
      cb(err);
    }
}
  _$jscoverage['protocol/Statement.js'][63]++;
  this._connection.dropStatement({statementId: this.id}, done.bind(this));
});
_$jscoverage['protocol/Statement.js'][68]++;
Statement.prototype.getParameterName = (function getParameterName(i) {
  _$jscoverage['protocol/Statement.js'][69]++;
  if (util.isArray(this.parameterMetadata) && i < this.parameterMetadata.length) {
    _$jscoverage['protocol/Statement.js'][70]++;
    return this.parameterMetadata[i].name;
  }
});
_$jscoverage['protocol/Statement.js'][74]++;
Statement.prototype.handle = (function handle(err, reply, cb) {
  _$jscoverage['protocol/Statement.js'][75]++;
  if (err) {
    _$jscoverage['protocol/Statement.js'][76]++;
    this._connection = undefined;
    _$jscoverage['protocol/Statement.js'][77]++;
    return cb(err);
  }
  _$jscoverage['protocol/Statement.js'][80]++;
  this.id = reply.statementId;
  _$jscoverage['protocol/Statement.js'][81]++;
  this.functionCode = reply.functionCode;
  _$jscoverage['protocol/Statement.js'][82]++;
  if (util.isArray(reply.resultSets) && reply.resultSets.length) {
    _$jscoverage['protocol/Statement.js'][83]++;
    this.resultSetMetadata = reply.resultSets[0].metadata;
  }
  _$jscoverage['protocol/Statement.js'][85]++;
  this.parameterMetadata = reply.parameterMetadata;
  _$jscoverage['protocol/Statement.js'][86]++;
  cb(null, this);
});
_$jscoverage['protocol/Statement.js'][89]++;
function normalizeParameters(values) {
  _$jscoverage['protocol/Statement.js'][91]++;
  var inputParameterMetadata = this.parameterMetadata.filter(isInputParameter);
  _$jscoverage['protocol/Statement.js'][92]++;
  var length = inputParameterMetadata.length;
  _$jscoverage['protocol/Statement.js'][93]++;
  if (! length) {
    _$jscoverage['protocol/Statement.js'][94]++;
    return null;
  }
  _$jscoverage['protocol/Statement.js'][97]++;
  function getDataType(metadata) {
    _$jscoverage['protocol/Statement.js'][98]++;
    return metadata.dataType;
}
  _$jscoverage['protocol/Statement.js'][101]++;
  function getObjectValue(metadata) {
    _$jscoverage['protocol/Statement.js'][102]++;
    if (! util.isUndefined(values[metadata.name])) {
      _$jscoverage['protocol/Statement.js'][103]++;
      return values[metadata.name];
    }
    _$jscoverage['protocol/Statement.js'][105]++;
    return null;
}
  _$jscoverage['protocol/Statement.js'][108]++;
  var parameters = {types: inputParameterMetadata.map(getDataType), values: undefined};
  _$jscoverage['protocol/Statement.js'][112]++;
  if (util.isArray(values)) {
    _$jscoverage['protocol/Statement.js'][113]++;
    if (! values.length) {
      _$jscoverage['protocol/Statement.js'][114]++;
      throw new Error("Invalid input parameter values");
    }
    _$jscoverage['protocol/Statement.js'][117]++;
    parameters.values = values;
    _$jscoverage['protocol/Statement.js'][118]++;
    return parameters;
  }
  _$jscoverage['protocol/Statement.js'][120]++;
  parameters.values = inputParameterMetadata.map(getObjectValue);
  _$jscoverage['protocol/Statement.js'][121]++;
  return parameters;
}
_$jscoverage['protocol/Statement.js'][124]++;
function executeStatement(defaults, values, options, cb) {
  _$jscoverage['protocol/Statement.js'][126]++;
  if (util.isFunction(options)) {
    _$jscoverage['protocol/Statement.js'][127]++;
    cb = options;
    _$jscoverage['protocol/Statement.js'][128]++;
    options = defaults;
  }
  else {
    _$jscoverage['protocol/Statement.js'][129]++;
    if (util.isObject(options)) {
      _$jscoverage['protocol/Statement.js'][130]++;
      options = util.extend(defaults, options);
    }
    else {
      _$jscoverage['protocol/Statement.js'][132]++;
      var autoFetch = ! ! options;
      _$jscoverage['protocol/Statement.js'][133]++;
      options = defaults;
      _$jscoverage['protocol/Statement.js'][134]++;
      options.autoFetch = autoFetch;
    }
  }
  _$jscoverage['protocol/Statement.js'][137]++;
  var result = new Result(this._connection, options);
  _$jscoverage['protocol/Statement.js'][138]++;
  result.setResultSetMetadata(this.resultSetMetadata);
  _$jscoverage['protocol/Statement.js'][139]++;
  result.setParameterMetadata(this.parameterMetadata.filter(isOutputParameter));
  _$jscoverage['protocol/Statement.js'][140]++;
  this._connection.execute({functionCode: this.functionCode, statementId: this.id, parameters: normalizeParameters.call(this, values)}, (function onreply(err, reply) {
  _$jscoverage['protocol/Statement.js'][145]++;
  result.handle(err, reply, cb);
}));
}
_$jscoverage['protocol/Statement.js'][149]++;
function isInputParameter(metadata) {
  _$jscoverage['protocol/Statement.js'][150]++;
  return metadata.ioType === IoType.INPUT || metadata.ioType === IoType.IN_OUT;
}
_$jscoverage['protocol/Statement.js'][153]++;
function isOutputParameter(metadata) {
  _$jscoverage['protocol/Statement.js'][154]++;
  return metadata.ioType === IoType.OUTPUT || metadata.ioType === IoType.IN_OUT;
}
_$jscoverage['protocol/Statement.js'].source = ["// Copyright 2013 SAP AG.","//","// Licensed under the Apache License, Version 2.0 (the \"License\");","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","// http: //www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing,","// software distributed under the License is distributed on an","// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,","// either express or implied. See the License for the specific","// language governing permissions and limitations under the License.","'use strict';","","var util = require('../util');","var Result = require('./Result');","var common = require('./common');","var IoType = common.IoType;","var FunctionCode = common.FunctionCode;","","module.exports = Statement;","","function Statement(connection) {","  // public","  this.id = undefined;","  this.functionCode = FunctionCode.NIL;","  this.parameterMetadata = undefined;","  this.resultSetMetadata = undefined;","  this.droped = false;","  // private","  this._connection = connection;","}","","Statement.prototype.exec = function exec(values, options, cb) {","  var defaults = {","    autoFetch: true","  };","  executeStatement.call(this, defaults, values, options, cb);","  return this;","};","","Statement.prototype.execute = function execute(values, options, cb) {","  var defaults = {","    autoFetch: false","  };","  executeStatement.call(this, defaults, values, options, cb);","  return this;","};","","Statement.prototype.drop = function drop(cb) {","","  function done(err) {","    /* jshint validthis:true */","    this._connection = undefined;","    if (!err) {","      this.droped = true;","    }","    if (util.isFunction(cb)) {","      cb(err);","    }","  }","  this._connection.dropStatement({","    statementId: this.id","  }, done.bind(this));","};","","Statement.prototype.getParameterName = function getParameterName(i) {","  if (util.isArray(this.parameterMetadata) &amp;&amp; i &lt; this.parameterMetadata.length) {","    return this.parameterMetadata[i].name;","  }","};","","Statement.prototype.handle = function handle(err, reply, cb) {","  if (err) {","    this._connection = undefined;","    return cb(err);","  }","","  this.id = reply.statementId;","  this.functionCode = reply.functionCode;","  if (util.isArray(reply.resultSets) &amp;&amp; reply.resultSets.length) {","    this.resultSetMetadata = reply.resultSets[0].metadata;","  }","  this.parameterMetadata = reply.parameterMetadata;","  cb(null, this);","};","","function normalizeParameters(values) {","  /* jshint validthis:true */","  var inputParameterMetadata = this.parameterMetadata.filter(isInputParameter);","  var length = inputParameterMetadata.length;","  if (!length) {","    return null;","  }","","  function getDataType(metadata) {","    return metadata.dataType;","  }","","  function getObjectValue(metadata) {","    if (!util.isUndefined(values[metadata.name])) {","      return values[metadata.name];","    }","    return null;","  }","","  var parameters = {","    types: inputParameterMetadata.map(getDataType),","    values: undefined","  };","  if (util.isArray(values)) {","    if (!values.length) {","      throw new Error('Invalid input parameter values');","    }","","    parameters.values = values;","    return parameters;","  }","  parameters.values = inputParameterMetadata.map(getObjectValue);","  return parameters;","}","","function executeStatement(defaults, values, options, cb) {","  /* jshint validthis:true */","  if (util.isFunction(options)) {","    cb = options;","    options = defaults;","  } else if (util.isObject(options)) {","    options = util.extend(defaults, options);","  } else {","    var autoFetch = !!options;","    options = defaults;","    options.autoFetch = autoFetch;","  }","","  var result = new Result(this._connection, options);","  result.setResultSetMetadata(this.resultSetMetadata);","  result.setParameterMetadata(this.parameterMetadata.filter(isOutputParameter));","  this._connection.execute({","    functionCode: this.functionCode,","    statementId: this.id,","    parameters: normalizeParameters.call(this, values)","  }, function onreply(err, reply) {","    result.handle(err, reply, cb);","  });","}","","function isInputParameter(metadata) {","  return metadata.ioType === IoType.INPUT || metadata.ioType === IoType.IN_OUT;","}","","function isOutputParameter(metadata) {","  return metadata.ioType === IoType.OUTPUT || metadata.ioType === IoType.IN_OUT;","}"];
