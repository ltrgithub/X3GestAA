var streamlineTransform = require('streamline/lib/callbacks/transform').transform;
var fs = require('fs');
var Module = require('module');
var _compile = Module.prototype._compile;
function register() {
	require.extensions['.aaa'] = function(module, filename) {
		var content = fs.readFileSync(filename, "utf8");
		content = content.substr(10);
		// console.log("AAA "+filename);
		// filename = filename.replace(/aaa$/, "_js");
		// console.log("AAA1 "+filename);
		// console.log("AAA55 "+content);
		_compile.call(module, content, filename);
		console.log("AAA12 "+filename);
		};
}
exports.register = register;

function test(cb) {
console.log("VOR TEST")
var test2 = require('./test2');
console.log("111 "+test2.test(1));
var test3 = require('./test3');
console.log("222 "+test3.a);
var test = require('./test');
console.log("VOR TEST2")
test.readTest(function(e, r){
	console.log(e+"LAENGE  "+r);
	return cb(e, r);
});
}
exports.test = test;
function test2() {
console.log("VOR TEST")
var test = require('./test');
console.log("VOR TEST2")
test.readTest(function(e, r){
	console.log(e+"LAENGE  "+r);
	return cb(e, r);
});
}
exports.test2 = test2;

var streamlineOptions = {
		fibers: false,
		verbose: true,
		cache: true,
		trampoline: "nextTick"
	};

function encryptName(filename) {
	if (/\._?js$/.test(filename))
		return filename.replace(/\._?js/, ".aaa");
    if (/\.json$/.test(filename))
        return filename.replace(/\.json/, ".aab");
	throw new Error("Invalid file type "+filename);
}
exports.encryptName = encryptName;

function encrypt(sourceFile, buff) {
	var content = buff.toString("utf8");
	content = "%/7!s?*tAa\n" + content;
	return new Buffer(content, "utf8");
}
exports.encrypt = encrypt;


