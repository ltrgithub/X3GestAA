"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

require('syracuse-uml/html/deps/jsPlumb/lib/jsBezier-0.6', window);
require('syracuse-uml/html/deps/jsPlumb/lib/mottle-0.4', window);
require('syracuse-uml/html/deps/jsPlumb/lib/biltong-0.2', window);
require('syracuse-uml/html/deps/jsPlumb/lib/katavorio-0.4', window);
require('syracuse-uml/html/deps/jsPlumb/src/util', window);
require('syracuse-uml/html/deps/jsPlumb/src/browser-util', window);
require('syracuse-uml/html/deps/jsPlumb/src/dom-adapter', window);
require('syracuse-uml/html/deps/jsPlumb/src/jsPlumb', window);
require('syracuse-uml/html/deps/jsPlumb/src/endpoint', window);
require('syracuse-uml/html/deps/jsPlumb/src/connection', window);
require('syracuse-uml/html/deps/jsPlumb/src/anchors', window);
require('syracuse-uml/html/deps/jsPlumb/src/defaults', window);
require('syracuse-uml/html/deps/jsPlumb/src/connectors-bezier', window);
require('syracuse-uml/html/deps/jsPlumb/src/connectors-statemachine', window);
require('syracuse-uml/html/deps/jsPlumb/src/connectors-flowchart', window);
require('syracuse-uml/html/deps/jsPlumb/src/connector-editors', window);
require('syracuse-uml/html/deps/jsPlumb/src/renderers-svg', window);
require('syracuse-uml/html/deps/jsPlumb/src/renderers-vml', window);
require('syracuse-uml/html/deps/jsPlumb/src/base-library-adapter', window);
require('syracuse-uml/html/deps/jsPlumb/src/dom.jsPlumb', window);

// fix CSS
['/syracuse-uml/html/deps/jsPlumb/css/jsplumb.css', //
	'/syracuse-uml/html/css/designer.css'
].forEach(function(href) {
	$("<link/>", {
		rel: "stylesheet",
		type: "text/css",
		href: href,
	}).appendTo("head");
});

var designerComponent = require('syracuse-uml/html/js/designer');

function DesignerField() {}

exports.DesignerField = helpers.defineClass(DesignerField, Field, {
	loadBox: function() {
		Field.prototype.loadBox.call(this);
		//ensure default display value
		var div = document.createElement('div');
		this.domItem.appendChild(div);
		this.designer = designerComponent.create({
			div: div,
		});

	},
	validateType: function(errors, value) {
		//if (value && !value.isValid) {
		//	errors.push("Cannot save: uml contains errors");
		//}
	},
	getDataValue: function() {
		return this.designer.getValue();
	},
	setDataValue: function(value) {
		this.designer.setValue(value);
	},
});