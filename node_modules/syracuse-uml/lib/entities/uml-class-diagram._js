"use strict";

exports.entity = {
	$titleTemplate: "UML Class Diagram {name}",
	$valueTemplate: "{name}",
	$summaryTemplate: "UML Class Diagram {name}",
	$descriptionTemplate: "UML Class Diagram",
	$className: "UmlClassDiagram",
	$canCreate: true,
	$helpPage: "Workbench-UML-class-diagram",
	$properties: {
		name: {
			$title: "Diagram name",
			$isMandatory: true,
			$isUnique: true,
			$linksToDetails: true
		},
		data: {
			$title: "Data",
			$type: "uml-class-diagram",
			$facets: ["$edit"],
		},
	},
	$relations: {
		linksTo: {
			$title: "Links",
			$type: "umlClassDiagrams",
			$inv: "linkedFrom",
		},
		linkedFrom: {
			$title: "Linked from",
			$type: "umlClassDiagrams",
			$isReadOnly: true,
			$isComputed: true,
			$inv: "linksTo",
		}
	},
	$services: {
		updateSyracuseDiagrams: {
			$method: "POST",
			$isMethod: false,
			$title: "Create/update Syracuse diagrams",
			$invocationMode: "async",
			$execute: function(_, context) {
				function _track(phase, detail, progress) {
					if (!context.tracker) return;
					context.tracker.phase = phase;
					context.tracker.phaseDetail = detail;
					context.tracker.progress = progress;
				}
				var t = context && context.tracker;
				var diags = t ? (t.$diagnoses = t.$diagnoses || []) : (instance.$diagnoses = instance.$diagnoses || []);

				var contract = require('syracuse-collaboration/lib/contract').contract;
				var model = require('syracuse-orm/lib/dataModel').make(contract);
				var keys = Object.keys(model.entities);
				keys.forEach_(_, function(_, key, i) {
					console.error("KEY=" + key);
					_track("generating diagram", key, 100 * i / keys.length);
					updateSyracuseDiagram(_, contract.entities[key]);
				});
				context.response.writeHead(200, {});
				context.response.write(_);
				_track("done", "", 100);
			},
		},
	},
	$searchIndex: {
		$fields: ["name"]
	},
	$defaultOrder: [
		["name", true]
	]
};

function syracuseDiagram(entity) {
	function makeClass(ent) {
		return {
			name: ent.name,
			attributes: Object.keys(ent.$properties),
			methods: Object.keys(ent.$methods),
		};
	}
	var diagram = {
		name: "syracuse-" + entity.name,
		data: {
			classes: [makeClass(entity)],
			connections: [],
		}
	};
	Object.keys(entity.$relations).forEach(function(rel) {
		var relation = entity.$relations[rel];
		var id = diagram.data.classes.length;

		function relType(relation) {
			if (relation.getIsChild()) return "composition";
			else return "association";
		}

		function multiplicity(relation) {
			if (!relation) return '';
			return relation.isPlural ? '0..*' : relation.$isMandatory === true ? '1' : '0..1';
		}

		function role(relation) {
			return relation && relation.name ? relation.name : '';
		}
		//console.log(relation);
		if (!relation.targetEntity) {
			console.error("No target entity for " + entity.name + "." + rel);
			return;
		}
		diagram.data.classes.push(makeClass(relation.targetEntity));
		var inv = relation.inv && relation.targetEntity && relation.targetEntity.$relations[relation.inv];
		diagram.data.connections.push({
			source: 0,
			target: id,
			type: relType(relation),
			multiplicities: [multiplicity(relation), multiplicity(inv)],
			roles: [role(relation), role(inv)],
		});
	});
	return diagram;
}

function updateSyracuseDiagram(_, entity) {
	var diagram = syracuseDiagram(entity);
	if (entity.name === 'user') console.log(JSON.stringify(diagram, null, '\t'));
}