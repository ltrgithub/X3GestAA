"use strict";
(function(exports) {
	exports.create = function(config) {
		config = config || {};
		config.div = $(config.div || '#edi-designer');
		config.dataUrl = config.dataUrl || '../data';
		var graphcomplete = {
			umls: []
		};
		var $codeSelectedWorkflow = "";
		var $titleSelectedWorkflow = "";
		//jsPlumb.ready(function() {
		//	"use strict";
		var model;

		var types = {
			textarea: {
				fill: function(div, prop, id) {
					$('<label>').text(prop.$title + ': ').appendTo(div);
					$('<textarea id="' + prop.name + '_' + id + '" class="edi-field" />').appendTo(div);
				},
			},
			string: {
				fill: function(div, prop, id, val) {
					$('<label>').text(prop.$title + ': ').appendTo(div);
					$('<input>').attr('data-prop-name', prop.$name).addClass('edi-field').attr('type', 'text') //
					.val(val).appendTo(div);
				},
			},
			boolean: {
				fill: function(div, prop, id, val) {
					$('<label>').text(prop.$title + ': ').appendTo(div);
					var $checkbox = $('<input>').attr('data-prop-name', prop.$name).addClass('edi-field') //
					.attr('type', 'checkbox').attr('checked', val).appendTo(div);
				},
				getVal: function(field) {
					return field.val() === 'on';
				},
			},
			enum: {
				fill: function(div, prop, id, val) {
					$('<label>').text(prop.$title + ': ').appendTo(div);
					var $select = $('<select>').attr('data-prop-name', prop.$name).addClass('edi-field') //
					.appendTo(div);
					prop.$enum.forEach(function(en) {
						$('<option>').attr('value', en.$value).text(en.$title).appendTo($select);
					});
					$select.val(val);
				},
			},
			array: {
				fill: function(div, prop, id, val) {
					$('<label>').text(prop.$title + ': ').appendTo(div);

					var $table = $('<table>').addClass('edi-range-table edi-field').attr('data-prop-name', prop.$name).appendTo(div);

					/*default line*/
					setTimeout(function() {
						if (!val) {
							var $defaultrangetest = $('<tr>').addClass('edi-range-line').appendTo($table);
							var $iddefault = $('<td>').addClass('edi-range-id').val("default").appendTo($defaultrangetest);
							var $iddefaultinput = $('<input>').addClass('edi-input-id').attr('type', 'text').val("default").prop('readonly', true).appendTo($iddefault);
							var $exprdefault = $('<td>').addClass('edi-range-expr').appendTo($defaultrangetest);
							var $inputdefaultexpr = $('<input>').addClass('edi-input-expr').attr('type', 'text').prop('readonly', true).val("true").appendTo($exprdefault);
							var $anchordefault = $('<td>').addClass('edi-range-anchor').appendTo($defaultrangetest);
							plumbInstance.makeSource($anchordefault, {
								anchor: "Center",
								endpointStyle: {
									fillStyle: "#34B233"
								},
								maxConnections: -1, //no limit by default, this parameter should be set right after instanciation
								connectorPaintStyle: {
									strokeStyle: "#34B233",
									lineWidth: 5
								},
							});
							var $removedefault = $('<td>').addClass('edi-range-remove').text("").appendTo($defaultrangetest);
						}
						// Lines already existing
						//First get all the rows

						if (val) {
							console.log(val);
							val.forEach(function(item) {
								//var item = prop.$item;

								console.log(item);
								var $line = $('<tr>').addClass('edi-range-line').appendTo($table);
								var $idadded = $('<td>').addClass('edi-range-id').text("").appendTo($line);
								var $inputid = $('<input>').addClass('edi-input-id').attr('type', 'text').val(item.code).appendTo($idadded);
								$inputid.css({
									width: "100%",
								});
								var $expradded = $('<td>').addClass('edi-range-expr').appendTo($line);
								var $inputexpr = $('<input>').addClass('edi-input-expr').attr('type', 'text').val(item.expression).appendTo($expradded);
								$inputexpr.css({
									width: "100%",
								});

								var $anchoradded = $('<td>').addClass('edi-range-anchor').text("").appendTo($line);
								plumbInstance.makeSource($anchoradded, {
									anchor: "Center",
									endpointStyle: {
										fillStyle: "#34B233"
									},
									maxConnections: -1, //no limit by default, this parameter should be set right after instanciation
									connectorPaintStyle: {
										strokeStyle: "#34B233",
										lineWidth: 5
									},
								});

								var $removeadded = $('<td>').addClass('edi-range-remove').text("-").appendTo($line).click(function() {
									plumbInstance.detachAllConnections($anchoradded);
									plumbInstance.removeAllEndpoints($anchoradded);
									$line.remove();
								});
							});
						}
					}, 0);

					// Add option
					var $addCondition = $('<div>').addClass('edi-add-condition').text("+").appendTo(div).click(function(elt) {
						var $lineadded = $('<tr>').addClass('edi-range-line').appendTo($table);
						var $idadd = $('<td>').addClass('edi-range-id').text("").appendTo($lineadded);
						var $inputid = $('<input>').addClass('edi-input-id').attr('type', 'text').val("").appendTo($idadd);
						$inputid.css({
							width: "100%",

						});
						var $expradd = $('<td>').addClass('edi-range-expr').appendTo($lineadded);
						var $inputexpr = $('<input>').addClass('edi-input-expr').attr('type', 'text').val("").appendTo($expradd);
						$inputexpr.css({
							width: "100%",
						});

						var $anchoradded = $('<td>').addClass('edi-range-anchor').text("").appendTo($lineadded);
						plumbInstance.makeSource($anchoradded, {
							anchor: "Center",
							endpointStyle: {
								fillStyle: "#34B233"
							},
							maxConnections: -1, //no limit by default, this parameter should be set right after instanciation
							connectorPaintStyle: {
								strokeStyle: "#34B233",
								lineWidth: 5
							},
							//type: "true",
						});

						var $removeadded = $('<td>').addClass('edi-range-remove').text("-").appendTo($lineadded).click(function() {
							plumbInstance.detachAllConnections($anchoradded);
							plumbInstance.removeAllEndpoints($anchoradded);
							$lineadded.remove();
						});
					});
				},
				getVal: function(field) {
					var table = [];
					var $lines = field.find('.edi-range-line');
					if ($lines)
						$lines.each(function(i, line) {
							console.log(line);
							var $item = {
								code: $(line).find('.edi-input-id').val(),
								expression: $(line).find('.edi-input-expr').val(),
							};
							table.push($item);

						});
					return table;
				},

			},
		};

		Object.keys(types).forEach(function(k) {
			types[k].getVal = types[k].getVal ||
				function(field) {
					return field.val();
			};
		});

		function propType(prop) {
			return prop.$enum ? types.enum : types[prop.$type];
		}

		function fillExtras(form, div, ct, opts) {
			div.empty();
			if (!ct) return;

			//Removal of the connections between grids and other elements if the type is switched
			//if (ct.$title === "Range Test") {
			var previous = form.find('.edi-type-selector').val(); //init the previous value, may be null the first time   
			var previousform = form; // to delete instance of connections of the previous grid by  adress
			form.find(".edi-type-selector").change(function() {
				console.log("change previousform");
				if (previous == "rangetest") {
					var $table = previousform.find('.edi-range-table');
					$table.find('.edi-range-anchor').each(function(i, anchor) {
						plumbInstance.detachAllConnections(anchor);
						plumbInstance.removeAllEndpoints(anchor);
					});
				}

				previous = form.find('.edi-type-selector').val();
				previousform = form;
			});
			//}

			Object.keys(ct.$properties).forEach(function(name) {
				var prop = ct.$properties[name];
				var type = propType(prop);
				if (!type) throw new Error('no type descriptor: ' + prop.$type);
				type.fill(div, prop, opts.id, opts[name]);
			});
		}

		function componentForm(opts) {
			function fillForm() {
				var ct = model.types[$select.val()];
				fillExtras($form, $extras, ct, opts);

			}
			var $form = $('<div>').addClass('edi-form');
			var $edit = $('<input>').attr('data-prop-name', 'activityName').addClass('edi-field').attr('type', 'text').val('').appendTo($form);
			var $select = $('<select>').attr('data-prop-name', 'activityType').addClass('edi-field edi-type-selector').appendTo($form);
			$select.append($('<option>').val('').text('Select type ...'));
			Object.keys(model.types).filter(function(name) {
				var ct = model.types[name];
				return opts.connectivities.indexOf(ct.$connectivity) >= 0;
			}).forEach(function(name) {
				var ct = model.types[name];
				$select.append($('<option>').val(name).text(ct.$title));
			});


			//THIS ONE IS CALLED
			$select.change(function() {
				console.log("select componentform");
				//plumbInstance.detachAllConnections($form);
				//plumbInstance.removeAllEndpoints($form);
				if ($form.find('.edi-range-table')) {
					var $table = $form.find('.edi-range-table');
					//console.log($table.find('.edi-range-anchor'));
					$table.find('.edi-range-anchor').each(function(i, anchor) {
						//console.log(anchor);
						plumbInstance.detachAllConnections(anchor);
						plumbInstance.removeAllEndpoints(anchor);
					});
				}

				fillForm();
				//createEndpoints();
			});

			$select.val(opts.activityType || '');
			var $extras = $('<div>').appendTo($form);
			fillForm();
			return $form;
		}



		var $designer = config.div.addClass('edi-designer');
		var $actionsDiv = $('<div>').addClass('edi-actions').appendTo($designer);
		var $messageDiv = $('<pre>').addClass('edi-message').appendTo($('<div>').appendTo($designer));
		var $container = $('<div>').attr('id', 'edi-container').addClass('edi-container').appendTo($designer);
		var $leftMenu = $('<div>').attr('id', 'edi-left-menu').addClass('edi-left-menu').appendTo($container);
		var $leftMenuTitle = $('<div>').addClass('edi-menuitem').text('Workflow Rules').appendTo($leftMenu);
		$leftMenuTitle.css({
			width: "100%",
			left: "0%",
			display: "inline-block",
			background: "black",
		});
		var $leftMenuWorkflowGlobalView = $('<div>').addClass('edi-menuitem').text('Global View').appendTo($leftMenu).click(function() {
			showGlobalView();
		});
		var $leftMenuProcessContext = $('<div>').addClass('edi-menuitem').text('Process Context').appendTo($leftMenu).click(function() {
			processContext();
		});
		var $leftMenuTitleCreation = $('<div>').addClass('edi-menuitem').text('Creation').appendTo($leftMenu);
		$leftMenuTitleCreation.css({
			width: "100%",
			left: "0%",
			display: "inline-block",
			background: "black",
		});

		var $addSubProcess = $('<div>').addClass('edi-menuitem').text('New Subprocess').appendTo($leftMenu).click(function() {
			createScheme();
		});
		var $addSourceMenuItem = $('<div>').addClass('edi-menuitem').text('Add Source').appendTo($leftMenu).click(function() {
			createSource();
		});
		var $addTransformMenuItem = $('<div>').addClass('edi-menuitem').text('Add Transform').appendTo($leftMenu).click(function() {
			createTransform();
		});
		var $addTargetMenuItem = $('<div>').addClass('edi-menuitem').text('Add Target').appendTo($leftMenu).click(function() {
			createTarget();
		});
		var $addConditionMenuItem = $('<div>').addClass('edi-menuitem').text('Add Condition').appendTo($leftMenu).click(function() {
			createCondition();
		});

		$leftMenuTitleCreation.click(function() {
			$addSourceMenuItem.toggle();
			$addTransformMenuItem.toggle();
			$addTargetMenuItem.toggle();
			$addConditionMenuItem.toggle();
			$addSubProcess.toggle();
		});

		var $leftMenuTitleWorkflowSubProcess = $('<div>').addClass('edi-menuitem').text('Workflow Subprocess').appendTo($leftMenu);
		$leftMenuTitleWorkflowSubProcess.css({
			width: "100%",
			left: "0%",
			display: "inline-block",
			background: "black",
		});
		$leftMenuTitleWorkflowSubProcess.click(function() {
			$(".edi-menuitem-list").each(function() {
				$(this).toggle();
			});
		});

		var $workbench = $('<div>').attr('id', 'edi-workbench').addClass('edi-workbench').appendTo($container);

		var anchortrueposition = [1, 0.2, 1, 0, 0, 0, "anchor-true"];
		var anchorfalseposition = [1, 0.8, 1, 0, 0, 0, "anchor-false"];
		var anchorrangeposition = [0.5, 1, 1, 0, 0, 0, "anchor-range"];

		function message(msg) {
			$designer.find('.edi-message').css({
				color: 'green'
			}).text(msg);
		}

		function error(msg) {
			$designer.find('.edi-message').css({
				color: 'red'
			}).text(msg);
		}

		function serialize(code, title) {

			var graph = {
				code: code,
				title: title,
				activities: [],
				connections: [],
			};
			$workbench.find('.edi-component').each(function(i, elt) {
				var comp = $(elt);
				var pos = comp.parent().position();
				var result = {
					id: comp.attr('data-comp-id'),
					top: pos.top,
					left: pos.left,
				};
				var type = model.types[comp.find('.edi-type-selector').val()];
				comp.find('.edi-field').each(function(i, elt) {
					var field = $(elt);
					var propName = field.attr('data-prop-name');
					var prop = type && type.$properties[propName];
					result[propName] = prop ? propType(prop).getVal(field) : field.val();
				});
				graph.activities.push(result);
			});
			plumbInstance.select().each(function(connection) {
				$workbench.find('.edi-component').each(function(i, elt) {
					//cases of normal or conditional component
					if ($(elt).attr('data-comp-id') == $(connection.source).find('.edi-component').attr('data-comp-id')) {
						//console.log($(elt).find('.edi-field.edi-type-selector'));
						if ($(elt).find('.edi-field.edi-type-selector').val() != "condition" && $(elt).find('.edi-field.edi-type-selector').val() != "rangetest") {
							graph.connections.push({
								source: $(connection.source).find('.edi-component').attr('data-comp-id'),
								target: $(connection.target).find('.edi-component').attr('data-comp-id'),
								type: "basic",
							});
						} else if ($(elt).find('.edi-field.edi-type-selector').val() == "condition") {
							if (connection.endpoints[0].anchor.cssClass === "anchor-true")
								graph.connections.push({
									source: $(connection.source).find('.edi-component').attr('data-comp-id'),
									target: $(connection.target).find('.edi-component').attr('data-comp-id'),
									type: "true",
								});
							else if (connection.endpoints[0].anchor.cssClass === "anchor-false")
								graph.connections.push({
									source: $(connection.source).find('.edi-component').attr('data-comp-id'),
									target: $(connection.target).find('.edi-component').attr('data-comp-id'),
									type: "false",
								});
						}
					} else if ($(elt).find('.edi-field.edi-type-selector').val() == "rangetest") {

						if ($(elt).attr('data-comp-id') == $(connection.source).parents('.edi-component').attr('data-comp-id')) {

							//get the value of the line or "default" value
							var idvalue = "";
							idvalue = $(connection.source).parents('.edi-range-line').find('.edi-input-id').val();
							graph.connections.push({
								source: $(connection.source).parents('.edi-component').attr('data-comp-id'),
								target: $(connection.target).find('.edi-component').attr('data-comp-id'),
								type: "range",
								id: idvalue,
								//expression: exprvalue,
							});
						}
					}

				});
			});
			return graph;
		}

		function save() {
			//maybe find another solution to manage the position issues when the workbench is scrolled.
			$workbench.scrollLeft(0);
			$workbench.scrollTop(0);
			var graphOk = true;
			var activitiesfailing = [];
			var graph = serialize($codeSelectedWorkflow, $titleSelectedWorkflow);
			graph.activities.forEach(function(elt) {
				if (elt.activityType == "") {
					graphOk = false;
					activitiesfailing.push(elt.id);
				}
			});
			for (var k = 0; k < graphcomplete.umls.length; ++k) {
				if (graph.code == graphcomplete.umls[k].code) {
					if (graphOk) {
						graphcomplete.umls[k] = graph;
					} else { //an invalid graph has been tried to be saved
						message('some activities have undefined types. save aborted.');
						activitiesfailing.forEach(function(id) {
							$workbench.find('.edi-component').each(function(i, elt) {
								if ($(elt).attr('data-comp-id') == id) {
									$(elt).css({
										background: 'red'
									});
								}
							});
						});
					}
				}
			}
			graphcomplete.isValid = activitiesfailing.length === 0;
			return JSON.parse(JSON.stringify(graphcomplete));
		}

		function clear() {
			plumbInstance.detachEveryConnection();
			$workbench.empty();
		}

		// transform JSON into a graphic chart
		function deserialize(code) {
			clear();
			var comps = [];
			for (var k = 0; k < graphcomplete.umls.length; ++k) {
				if (code == graphcomplete.umls[k].code) {
					graphcomplete.umls[k].activities.forEach(function(compo) {
						compo.connectivities = getConnectivitiesType(compo);
						comps[compo.id] = addComponent(compo);
					});

					plumbInstance.doWhileSuspended(function() {
						graphcomplete.umls[k].connections.forEach(function(connection) {
							//determination of the anchors depending on the type of the component
							var positionAnchorsource = [];
							if (connection.type != "range") {
								if (connection.type == "basic")
									positionAnchorsource = ["Right", "Left"];
								else if (connection.type == "true")
									positionAnchorsource = [anchortrueposition, "Left"];
								else if (connection.type == "false")
									positionAnchorsource = [anchorfalseposition, "Left"];

								var conn = plumbInstance.connect({
									source: comps[connection.source],
									target: comps[connection.target],
									type: connection.type,
									anchors: positionAnchorsource,

								});
							} else {

								//Then, creation on the connectivity 
								var $lines = comps[connection.source].find('.edi-range-line');
								//console.log($lines);
								var $selectedanchor;
								$lines.each(function(i, line) {
									var $lineanchor = $(line).find('.edi-range-anchor');
									var $idline = $(line).find('.edi-input-id').val();
									if ($idline == connection.id) {
										$selectedanchor = $lineanchor;
										var conn = plumbInstance.connect({
											source: $selectedanchor,
											target: comps[connection.target],
											type: connection.type,
											anchors: [anchorrangeposition, "Left"],
										});
									}

								});

							}
							//conn.setType(connection.type);
						});
					});
				}
			}
			jsPlumb.fire("jsPlumbDemoLoaded", plumbInstance);
		}

		// returns the connectivity of a specific component of the chart
		function getConnectivitiesType(compo) {
			if (model.types[compo.activityType])
				return model.types[compo.activityType].$connectivity;
			else
				return ["source", "transform", "target", "condition"]; //is not supposed to happen, however is let here to still be able to use a corrupted save
		}

		function resourceUrl() {
			var name = $('.edi-resource-name').val();
			if (!name) name = model.name + '-default';
			return config.dataUrl + '/' + (/\./.test(name) ? name : name + '.json');
		}

		//load the list of registered subprocesses
		function load(data) {
			graphcomplete = data || {
				umls: [],
			};
			$('.edi-menuitem-list').remove();
			$leftMenuTitle.text(resourceUrl());
			try {
				graphcomplete = typeof data === "string" ? JSON.parse(data) : data;
				readAll();
				message('uml subprocesses successfully loaded!');
			} catch (ex) {
				$leftMenuTitle.text(resourceUrl());
				error("Load failed: " + ex.stack);
			}
		}

		function loadSubProcess(code) {

			deserialize(code);
			$labelSelected.text($titleSelectedWorkflow);

		}


		function readAll() {
			return graphcomplete.umls.forEach(function(uml) {
				var $item = $('<div>').addClass('edi-menuitem-list').text(uml.code).appendTo($leftMenu);
				var $attributecode = $item.attr('code', uml.code);
				var $attributetitle = $item.attr('title', uml.title);
				var $attributeactivities = $item.attr('activities', uml.activities);
				var $attributeconnections = $item.attr('connections', uml.connections);
				$item.click(function() {
					//save the current Subprocess then swap the whole thing
					save();
					$codeSelectedWorkflow = $item.attr('code');
					$titleSelectedWorkflow = $item.attr('title');
					loadSubProcess($codeSelectedWorkflow);
				});
			});
		}

		// Creation of specific activities
		function createSource() {
			try {
				var source = addComponent({
					connectivities: ["source"],
					top: $workbench.offset().top,
					left: $workbench.offset().left,
				});
			} catch (ex) {
				error(ex.stack);
			}
		}

		function createTransform() {
			try {
				var transform = addComponent({
					connectivities: ["transform"],
					top: $workbench.offset().top + 100,
					left: $workbench.offset().left,
				});
			} catch (ex) {
				error(ex.stack);
			}
		}

		function createTarget() {
			try {
				var target = addComponent({
					connectivities: ["target"],
					top: $workbench.offset().top + 200,
					left: $workbench.offset().left,
				});
			} catch (ex) {
				error(ex.stack);
			}
		}

		function createCondition() {
			try {
				var target = addComponent({
					connectivities: ["condition"],
					top: $workbench.offset().top + 200,
					left: $workbench.offset().left,
				});
			} catch (ex) {
				error(ex.stack);
			}
		}

		var plumbInstance = window.plumbInstance = jsPlumb.getInstance({
			Endpoints: [
				["Blank", {}],
				["Blank", {}]
			],
			Anchors: [
				["Right", {}],
				["Left", {}]
			],
			Connector: [
				["Flowchart"], {}
			],
			PaintStyle: {
				lineWidth: 5,
				strokeStyle: "#34B233"
			},
			ConnectionOverlays: [
				["Arrow", {
					location: 1
				}],
			],
			Container: '#edi-workbench',
		});

		plumbInstance.registerConnectionTypes({
			"basic": {
				paintStyle: {
					strokeStyle: "#34B233",
					lineWidth: 5
				},
				hoverPaintStyle: {
					lineWidth: 7
				},
				overlays: [
					["Arrow", {
						location: 1
					}],
				],
			},
			"range": {
				paintStyle: {
					strokeStyle: "#34B233",
					lineWidth: 5
				},
				hoverPaintStyle: {
					lineWidth: 7
				},
				overlays: [
					["Arrow", {
						location: 1
					}],
				],
			},
			"true": {
				paintStyle: {
					strokeStyle: "#0A94C7",
					lineWidth: 5
				},
				hoverPaintStyle: {
					lineWidth: 7
				},
				overlays: [
					["Arrow", {
						location: 1
					}],
				],
			},
			"false": {
				paintStyle: {
					strokeStyle: "red",
					lineWidth: 5
				},
				hoverPaintStyle: {
					lineWidth: 7
				},
				overlays: [
					["Arrow", {
						location: 1
					}],
				],
			}
		});
		plumbInstance.registerEndpointTypes({
			"source": {
				isSource: true,
				anchor: "Right",
				endpointStyle: {
					fillStyle: "#34B233"
				},
				maxConnections: -1,
			},
			"target": {
				isTarget: true,
				anchor: "Left",
				endpointStyle: {
					fillStyle: "#34B233"
				},
				maxConnections: -1,
			},
			"true": {
				isSource: true,
				anchor: anchortrueposition,
				endpointStyle: {
					fillStyle: "#0994C6"
				},
				maxConnections: -1, //no limit by default, this parameter should be set right after instanciation
				connectorPaintStyle: {
					strokeStyle: "#0A94C7",
					lineWidth: 5
				},
			},
			"false": {
				isSource: true,
				anchor: anchorfalseposition,
				endpointStyle: {
					fillStyle: "red"
				},
				maxConnections: -1,
				connectorPaintStyle: {
					strokeStyle: "red",
					lineWidth: 5
				},
			},
			"range": {
				isSource: true,
				anchor: anchorrangeposition,
				endpointStyle: {
					fillStyle: "34B233"
				},
				maxConnections: 1,
				connectorPaintStyle: {
					strokeStyle: "34B233",
					lineWidth: 5
				},

			},


		});


		var lastId = 0;

		//Complexity 1
		function addComponent(opts) {
			var id = ++lastId;
			var $compo = $('<div>').addClass('edi-component-outer').appendTo($workbench);
			var $compoInner = $('<div>').attr('data-comp-id', id).addClass('edi-component component').appendTo($compo).click(function(elt) {
				$compoInner.css({
					background: 'white'
				});
			});
			var $compoRemove = $('<div>').addClass('edi-remove').append('<img src =' + config.dataUrl + '"../images/s-page-menus-open.png"/>').appendTo($compo).click(function(elt) {
				plumbInstance.detachAllConnections($compo);
				plumbInstance.removeAllEndpoints($compo);
				if ($compoInner.find('.edi-type-selector').val() == "rangetest") {
					var $table = $compoInner.find('.edi-range-table');
					//console.log($table.find('.edi-range-anchor'));
					$table.find('.edi-range-anchor').each(function(i, anchor) {
						//console.log(anchor);
						plumbInstance.detachAllConnections(anchor);
						plumbInstance.removeAllEndpoints(anchor);
					});
				}
				$compo.remove();
			});

			// Integration of interaction buttons
			$compoInner.append($compoRemove);
			componentForm(opts).appendTo($compoInner);
			// Check here if the select is changed and call the createEndpoints function in such case
			//We have to repaint all the anchors in case of modification of the component type
			$compoInner.find('.edi-type-selector').change(function() {
				console.log("supposed to get rid of every endpoints of the current component");
				plumbInstance.removeAllEndpoints($compo);
				opts.activityType = $compoInner.find('.edi-type-selector').val();

				plumbInstance.repaint($compo); // repaint a first time to get the form of the new component
				createEndpoints(); // add Endpoints related to the new component
				plumbInstance.repaint($compo); // repaint a second time to put endpoints at the correct place
			});

			$compo.css({
				position: 'absolute',
				top: opts.top,
				left: opts.left
			});
			plumbInstance.draggable($compo);

			function createEndpoints() {
				if (opts.connectivities != "target" && opts.connectivities != "condition") {
					var $sourceEndpoint = plumbInstance.addEndpoint($compo, {
						isSource: true,
						anchor: "Right",
						endpointStyle: {
							fillStyle: "#34B233"
						},
						maxConnections: -1,
					});
				}
				if (opts.connectivities != "source") {
					var $targetEndpoint = plumbInstance.addEndpoint($compo, {
						isTarget: true,
						anchor: "Left",
						endpointStyle: {
							fillStyle: "#34B233"
						},
						maxConnections: -1,
					});
				}
				if (opts.activityType == "condition") {
					var $trueEndpoint = plumbInstance.addEndpoint($compo, {
						isSource: true,
						anchor: anchortrueposition,
						endpointStyle: {
							fillStyle: "#0994C6"
						},
						maxConnections: -1, //no limit by default, this parameter should be set right after instanciation
						connectorPaintStyle: {
							strokeStyle: "#0A94C7",
							lineWidth: 5
						},
					});
					var $falseEndpoint = plumbInstance.addEndpoint($compo, {
						isSource: true,
						anchor: anchorfalseposition,
						endpointStyle: {
							fillStyle: "red"
						},
						maxConnections: -1,
						connectorPaintStyle: {
							strokeStyle: "red",
							lineWidth: 5
						},
					});
				}
			}
			createEndpoints();
			plumbInstance.repaint($compo);

			return $compo;
		}

		plumbInstance.bind("dblclick", function(connection) {
			plumbInstance.detach(connection);
		});
		plumbInstance.bind("connectionDrag", function(connection) {
			var sourceType = $(connection.source).find('.edi-type-selector').val();
			console.log($(connection.source).find('.edi-type-selector'));
			if (sourceType == "condition") {
				if (connection.endpoints[0].anchor.cssClass === "anchor-true") {
					connection.setType("true");
				} else {
					connection.setType("false");
				}
			}
			if (sourceType == "rangetest") {
				connection.setType("rangetest");
			}

		});


		//Complexity n+n² =~ n²
		function addModelSelector() {
			var $select = $('<select>').addClass('edi-model-selector').appendTo($actionsDiv);
			config.models.forEach(function(model, i) {
				$('<option>').val(i).text(model.name).appendTo($select);
			});

			function fillModel() {
				clear();
				model = config.models[$select.val()];
				Object.keys(model.types).forEach(function(name) {
					var ct = model.types[name];
					Object.keys(ct.$properties).forEach(function(name) {
						var prop = ct.$properties[name];
						prop.$name = name;
						prop.$type = prop.$type || "string";
					});
				});
			}
			$select.change(fillModel);
			$select.val(0);
			fillModel();
		}

		function addButton(title, fn) {
			$('<div>').addClass('edi-button').text(title).click(function() {
				fn();
			}).appendTo($actionsDiv);
		}

		function addButtonOpt(title, fn, option) {
			$('<div>').addClass('edi-button').text(title).click(function() {
				fn(option);
			}).appendTo($actionsDiv);
		}

		addModelSelector();
		$('<input>').addClass('edi-resource-name').appendTo($actionsDiv);
		$leftMenuTitle.text(resourceUrl());
		//loadAll();
		var menuToggled = false;
		toggleTools(); //Open the left menu at start
		//addButton('Load', loadAll);
		//addButton('Save', save);
		addButton('Tools', toggleTools);
		//addButton('New', createWorkflow);
		var $labelSelected = $('<div>').addClass('edi-label').text($titleSelectedWorkflow).appendTo($actionsDiv);

		//Complexity 1
		function toggleTools() {
			menuToggled = !menuToggled;
			menuToggled ? showTools() : hideTools();
		}

		//Complexity 1
		function showTools() {
			var ediLeftMenu = document.querySelector("#edi-left-menu");
			ediLeftMenu.style.display = "block";
			ediLeftMenu.style.width = "20%";
			var ediWorkbench = document.querySelector("#edi-workbench");
			ediWorkbench.style.left = "20%";
			ediWorkbench.style.width = "80%";
		}

		//Complexity 1
		function hideTools() {
			var ediLeftMenu = document.querySelector("#edi-left-menu");
			//ediLeftMenu.style.display = "none";
			ediLeftMenu.style.width = "0%";
			var ediWorkbench = document.querySelector("#edi-workbench");
			ediWorkbench.style.left = "0%";
			ediWorkbench.style.width = "100%";
		}

		//Complexity n
		function createScheme() {
			clear();
			var promptCode = prompt("Insert code", "");
			var prompttitle = promptCode; //to modify
			var $codeexists = false;
			if (promptCode != null) {
				//add a new "process" in the current WF
				var $codeexists = false;
				for (var k = 0; k < graphcomplete.umls.length; ++k) {
					if (promptCode == graphcomplete.umls[k].code) {
						alert("This code is already attributed. Operation abort.");
						$codeexists = true;
					}
				}
				if ($codeexists == false) {
					graphcomplete.umls.push({
						code: promptCode,
						title: prompttitle,
						activities: [],
						connections: [],
					});

					message('new graph successfully created!');
					var $newWorkflowItem = $('<div>').addClass('edi-menuitem-list').text(promptCode).appendTo($leftMenu);
					$newWorkflowItem.attr('code', promptCode);
					$newWorkflowItem.attr('title', prompttitle);
					$codeSelectedWorkflow = promptCode;

					$newWorkflowItem.click(function() {
						save(); //save the old Subprocess
						$codeSelectedWorkflow = $newWorkflowItem.attr('code');
						$titleSelectedWorkflow = $newWorkflowItem.attr('title');
						loadSubProcess($codeSelectedWorkflow);
					});
					save();
					$codeSelectedWorkflow = $newWorkflowItem.attr('code');
					$titleSelectedWorkflow = $newWorkflowItem.attr('title');
					loadSubProcess($codeSelectedWorkflow);
				}
			}
		}

		//Complexity 1
		function showGlobalView() {
			$codeSelectedWorkflow = "";
			$titleSelectedWorkflow = "";
			deserializeGlobal();
		}

		//Complexity n
		function deserializeGlobal() {
			clear();
			$labelSelected.text("");
			var comps = [];
			for (var k = 0; k < graphcomplete.umls.length; ++k) {
				var posleft = 0;
				var postop = 0;
				posleft = (k % 4) * 300;
				postop = (Math.floor(k / 4) % 3) * 200;
				var codeitem = graphcomplete.umls[k].code;
				var titleitem = graphcomplete.umls[k].title;
				comps[k] = addComponent({
					"code": codeitem,
					"title": titleitem,
					"top": postop + 50,
					"left": posleft + 50,
					"activityName": graphcomplete.umls[k].code,
					"activityType": "uml",
					"connectivities": "uml",
				});

				//allow to redirect to the details of the subprocess which is clicked on
				comps[k].dblclick(function(elt) {
					save();
					$titleSelectedWorkflow = titleitem;
					$codeSelectedWorkflow = codeitem;
					loadSubProcess(codeitem);
				});
			}

			//Complexity n*log(n)+1+n =~ n*log(n)
			plumbInstance.doWhileSuspended(function() {
				graphcomplete.umls.forEach(function(umlsource, indexsource) {
					umlsource.activities.forEach(function(composource) {
						if (composource.activityType == "monitoring") {
							var evttarget = composource.topic;
							if (evttarget != "") {
								graphcomplete.umls.forEach(function(umltarget, indextarget) {
									umltarget.activities.forEach(function(compotarget) {
										if (compotarget.activityType == "event") {
											if (evttarget == compotarget.topic) {
												//console.log(indexsource);
												//console.log(indextarget);
												plumbInstance.connect({
													source: comps[indexsource],
													target: comps[indextarget],
													paintStyle: {
														strokeStyle: "#34B233",
														dashstyle: "2 2",
														lineWidth: 4
													},
													connector: "Straight",
												});
											}
										}
									});
								});
							}
						}
					});
				});
			});

			jsPlumb.fire("jsPlumbDemoLoaded", plumbInstance);

		}
		//Complexity 1
		function createWorkflow() {
			var name = $('.edi-resource-name').val();
			var content = {
				"umls": []
			};
			$.ajax({
				url: config.dataUrl + '/' + name + '.json',
				type: 'PUT',
				contentType: 'application/json',
				data: JSON.stringify(content, null, '\t'),
				// bypass jQuery parsing
				success: function(data, statusText, xhr) {
					message('Workflow successfully created');
				},
				error: function(xhr, statusText, message) {
					error("Creation failed: " + message);
				},
			});
			/*:
                    message('This Workflow already exists. operation aborted');*/
		}


		function processContext() {
			alert("processcontext here");
		}
		// suspend drawing and initialise.
		plumbInstance.doWhileSuspended(function() {
			// start empty!
		});

		jsPlumb.fire("jsPlumbDemoLoaded", plumbInstance);
		//});
		return {
			getValue: save,
			setValue: load,
		};
	};
})(typeof exports !== "undefined" ? exports : registerModule('edi-designer/lib/designer'));