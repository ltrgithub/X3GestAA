"use strict";
var helpers = require('syracuse-core/lib/helpers');
var Field = require('syracuse-ui/lib/field/field').Field;

require('public/jsPlumb/lib/jsBezier-0.6', window);
require('public/jsPlumb/lib/mottle-0.4', window);
require('public/jsPlumb/lib/biltong-0.2', window);
require('public/jsPlumb/lib/katavorio-0.4', window);
require('public/jsPlumb/src/util', window);
require('public/jsPlumb/src/browser-util', window);
require('public/jsPlumb/src/dom-adapter', window);
require('public/jsPlumb/src/jsPlumb', window);
require('public/jsPlumb/src/endpoint', window);
require('public/jsPlumb/src/connection', window);
require('public/jsPlumb/src/anchors', window);
require('public/jsPlumb/src/defaults', window);
require('public/jsPlumb/src/connectors-bezier', window);
require('public/jsPlumb/src/connectors-statemachine', window);
require('public/jsPlumb/src/connectors-flowchart', window);
require('public/jsPlumb/src/connector-editors', window);
require('public/jsPlumb/src/renderers-svg', window);
require('public/jsPlumb/src/renderers-vml', window);
require('public/jsPlumb/src/base-library-adapter', window);
require('public/jsPlumb/src/dom.jsPlumb', window);

// fix CSS
['/syracuse-uml/public/css/class-designer.css'].forEach(function(href) {
	$("<link/>", {
		rel: "stylesheet",
		type: "text/css",
		href: href,
	}).appendTo("head");
});

var designerComponent = require('syracuse-uml/public/js/class-designer');

function DesignerField() {}

exports.DesignerField = helpers.defineClass(DesignerField, Field, {
	loadBox: function() {
		this.$item.$isTitleHidden = true;
		Field.prototype.loadBox.call(this);
	},
	_createValueContainer: function() {
		var css = this._$cssField + (this.$isEditMode ? "-value-edit" : "-value-read");
		this.domItem.className += " " + this._$cssField;
		this._dataValue = this._core = this.domItem;
	},
	render: function() {
		var self = this;
		if (this.page.$facet === '$query') {
			this.synopsis = $('<span>').addClass('uml-synopsis').appendTo($(this.domItem));
			return;
		}
		var editable = this.page.$facet === '$edit';
		this.designer = designerComponent.create({
			div: this.domItem,
			editable: editable,
			setDirty: function() {
				if (editable) self.page.applyChange({
					$actions: {
						$save: {
							$isDisabled: false,
						}
					}
				});
			}
		});
	},
	validateType: function(errors, value) {
		//if (value && !value.isValid) {
		//	errors.push("Cannot save: uml contains errors");
		//}
	},
	getDataValue: function() {
		return this.designer && this.designer.getValue();
	},
	setDataValue: function(value) {
		if (this.designer) this.designer.setValue(value);
		else if (this.synopsis) {
			var text = (value && value.classes) ? value.classes.length + " classes" : "<empty>";
			this.synopsis.text(text);
		}
	},
});