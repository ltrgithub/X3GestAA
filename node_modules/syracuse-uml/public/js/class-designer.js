"use strict";
(function(exports) {
	exports.create = function(config) {
		config = config || {};
		config.div = $(config.div || '#uml-designer');
		var dirty = false;
		var setDirty = function() {
			if (!dirty) config.setDirty();
			dirty = true;
		};

		function initClassComponent(parent, data) {
			var $form = $('<div>').addClass('uml-form');
			$('<input>').attr('type', 'text').attr('data-prop-name', 'name').addClass('uml-field') //
			.val(data.name).change(setDirty).appendTo($form);

			function addListWidget(name) {
				$('<hr/>').appendTo($form);
				var $div = $('<div>').attr('data-prop-name', name).appendTo($form);

				function addLine(text) {
					var $lineDiv = $('<div>');
					$('<input>').attr('type', 'text').attr('data-prop-name', 'line').addClass('uml-field') //
					.val(text).change(setDirty).appendTo($lineDiv);
					$('<span>').text('-').click(function() {
						setDirty();
						$lineDiv.remove();
					}).appendTo($lineDiv);
					$lineDiv.insertBefore($add);
				}
				var $add = $('<span>').text('+').click(function() {
					setDirty();
					addLine('');
				}).appendTo($div);
				if (data[name]) data[name].forEach(addLine);
			}
			addListWidget('attributes');
			addListWidget('methods');
			$form.appendTo(parent);
		}

		function getListValue(div) {
			var values = [];
			div.find('[data-prop-name="line"]').each(function(i, input) {
				values.push($(input).val());
			});
			return values;
		}

		var $designer = config.div.addClass('uml-designer');
		var $messageDiv = $('<pre>').addClass('uml-message').appendTo($('<div>').appendTo($designer));
		var $actionsDiv = $('<div>').addClass('uml-actions').appendTo($designer);
		var $container = $('<div>').attr('id', 'uml-container').addClass('uml-container').appendTo($designer);

		var $workbench = $('<div>').attr('id', 'uml-workbench').addClass('uml-workbench').appendTo($container);

		function message(msg) {
			$designer.find('.uml-message').css({
				color: 'green'
			}).text(msg);
		}

		function error(msg) {
			return alert(msg); // for now
			$designer.find('.uml-message').css({
				color: 'red'
			}).text(msg);
		}

		function serialize(code, title) {
			var graph = {
				code: code,
				title: title,
				classes: [],
				connections: [],
			};
			$workbench.find('.uml-component-outer').each(function(i, elt) {
				var comp = $(elt);
				var pos = comp.position();
				var result = {
					id: comp.attr('data-comp-id'),
					top: pos.top,
					left: pos.left,
					name: "" + comp.find('[data-prop-name="name"]').val(),
					attributes: getListValue(comp.find('[data-prop-name="attributes"]')),
					methods: getListValue(comp.find('[data-prop-name="methods"]')),
				};
				graph.classes.push(result);
			});
			plumbInstance.select().each(function(connection) {
				console.log(connection.getType());
				graph.connections.push({
					source: $(connection.source).attr('data-comp-id'),
					target: $(connection.target).attr('data-comp-id'),
					type: connection.getType()[0] || defaultConnectionType,
				});
			});
			return graph;
		}

		function save() {
			try {
				//maybe find another solution to manage the position issues when the workbench is scrolled.
				$workbench.scrollLeft(0);
				$workbench.scrollTop(0);
				return serialize();
			} catch (ex) {
				error("getValue failed: " + ex.stack || ex.toString());
			}
		}

		function clear() {
			plumbInstance.detachEveryConnection();
			$workbench.empty();
		}

		// transform JSON into a graphic chart

		function deserialize(graph) {
			clear();
			dirty = true;
			var comps = [];
			graph.classes.forEach(function(clas) {
				comps[clas.id] = addComponent(clas);
			});

			setTimeout(function() {
				plumbInstance.doWhileSuspended(function() {
					graph.connections.forEach(function(connection) {
						var conn = plumbInstance.connect({
							source: comps[connection.source],
							target: comps[connection.target],
							type: connection.type,
						});
					});
				});
				dirty = false;
			});
			jsPlumb.fire("jsPlumbDemoLoaded", plumbInstance);
		}

		function load(graph) {
			try {
				deserialize(graph);
			} catch (ex) {
				error("Load failed: " + ex.stack || ex.toString());
			}
		}

		function createClassComponent() {
			setDirty();
			var source = addComponent({
				connectivities: ["source"],
				top: $workbench.offset().top,
				left: $workbench.offset().left,
			});
		}

		var connectionStyles = {
			inheritance: {
				paintStyle: {
					strokeStyle: "red",
					lineWidth: 4
				},
				hoverPaintStyle: {
					lineWidth: 7
				},
				overlays: [
					["Arrow", {
						location: 1
					}],
				],
			},
			association: {
				paintStyle: {
					strokeStyle: "green",
					lineWidth: 4
				},
				hoverPaintStyle: {
					lineWidth: 7
				},
				overlays: [
					["Arrow", {
						location: 1
					}],
				],
			},
			aggregation: {
				paintStyle: {
					strokeStyle: "blue",
					lineWidth: 4
				},
				hoverPaintStyle: {
					lineWidth: 7
				},
				overlays: [
					["Diamond", {
						location: 1
					}],
				],
			},
			composition: {
				paintStyle: {
					strokeStyle: "yellow",
					lineWidth: 4
				},
				hoverPaintStyle: {
					lineWidth: 7
				},
				overlays: [
					["Diamond", {
						location: 1
					}],
				],
			},
		};

		var defaultConnectionType = 'aggregation';

		var plumbInstance = window.plumbInstance = jsPlumb.getInstance({
			Connector: [
				["Flowchart"], {}
			],
			PaintStyle: connectionStyles[defaultConnectionType].paintStyle,
			HoverPaintStyle: connectionStyles[defaultConnectionType].hoverPaintStyle,
			ConnectionOverlays: connectionStyles[defaultConnectionType].overlays,
			Container: '#uml-workbench',
		});

		plumbInstance.registerConnectionTypes(connectionStyles);

		var lastId = 0;

		function addComponent(opts) {
			var id = ++lastId;
			var $compo = $('<div>').addClass('uml-component-outer').attr('data-comp-id', id).appendTo($workbench);
			var $compoInner = $('<div>').addClass('uml-component').appendTo($compo).click(setDirty);

			var $compoRemove = $('<div>').addClass('uml-remove') //
			.appendTo($compoInner).click(function(elt) {
				setDirty();
				plumbInstance.detachAllConnections($compo);
				plumbInstance.removeAllEndpoints($compo);
				$compo.remove();
			});

			$('<div>').addClass('uml-source').appendTo($compoInner);

			initClassComponent($compoInner, opts);

			$compo.css({
				position: 'absolute',
				top: opts.top,
				left: opts.left
			});
			plumbInstance.draggable($compo);

			plumbInstance.makeSource($compo, {
				filter: ".uml-source",
				anchor: "Continuous",
				endpoint: "Blank",
			});

			plumbInstance.makeTarget($compo, {
				dropOptions: {
					hoverClass: "uml-hover"
				},
				anchor: "Continuous",
				endpoint: "Blank",
				allowLoopback: true
			});

			plumbInstance.repaint($compo);

			return $compo;
		}

		function createDialog(contents, ok) {
			var $dialog = $('<div>').addClass('uml-dialog').appendTo($container).hide();
			var $outer = $('<div>').addClass('uml-dialog-outer').appendTo($dialog);
			var $inner = $('<div>').addClass('uml-dialog-inner').appendTo($outer);
			contents().appendTo($inner);
			$dialog.click(function(ev) {
				$dialog.hide();
				callback = null;
			});

			var callback;

			function open(ev, cb) {
				callback = cb;
				var r = $container[0].getBoundingClientRect();
				$dialog.css({
					'z-index': $designer.zIndex() + 100,
					position: 'absolute',
					top: $container[0].offsetTop,
					left: $container[0].offsetLeft,
					width: r.width,
					height: r.height,
					'background-color': 'transparent',
				});
				$outer.css({
					position: 'absolute',
					top: ev.clientY - r.top - 30,
					left: ev.clientX - r.left - 30,
					'background-color': 'white',
					opacity: 1,
				});
				$dialog.show();
			}

			function close(result) {
				$dialog.hide();
				callback(result);
			}
			return {
				open: open,
				close: close,
			};
		}


		var $relationDialog = createDialog(function() {
			var $ul = $('<ul>').addClass('uml-dialog-relation');
			['inheritance', 'association', 'aggregation', 'composition'].forEach(function(type) {
				$('<li>').text(type).click(function() {
					$relationDialog.close({
						relation: type,
					});
				}).appendTo($ul);
			});
			return $ul;
		});
		plumbInstance.bind("connection", setDirty);
		plumbInstance.bind("click", function(connection, ev) {
			$relationDialog.open(ev, function(result) {
				connection.setType(result.relation);
			});
		});

		plumbInstance.bind("dblclick", function(connection) {
			plumbInstance.detach(connection);
		});

		function addButton(title, fn) {
			$('<div>').addClass('uml-button').text(title).click(function() {
				fn();
			}).appendTo($actionsDiv);
		}

		addButton('Add Class', createClassComponent);

		jsPlumb.fire("jsPlumbDemoLoaded", plumbInstance);

		return {
			getValue: save,
			setValue: load,
		};
	};
})(typeof exports !== "undefined" ? exports : registerModule('uml-designer/lib/designer'));