'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.infoParser = infoParser;
exports.errorParser = errorParser;
var marked0$0 = [parseToken, infoParser, errorParser].map(_regeneratorRuntime.mark);
function parseToken(parser, options) {
  var number, state, clazz, message, serverName, procName, lineNumber;
  return _regeneratorRuntime.wrap(function parseToken$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return parser.readUInt16LE();

      case 2:
        context$1$0.next = 4;
        return parser.readUInt32LE();

      case 4:
        number = context$1$0.sent;
        context$1$0.next = 7;
        return parser.readUInt8();

      case 7:
        state = context$1$0.sent;
        context$1$0.next = 10;
        return parser.readUInt8();

      case 10:
        clazz = context$1$0.sent;
        return context$1$0.delegateYield(parser.readUsVarChar(), 't0', 12);

      case 12:
        message = context$1$0.t0;
        return context$1$0.delegateYield(parser.readBVarChar(), 't1', 14);

      case 14:
        serverName = context$1$0.t1;
        return context$1$0.delegateYield(parser.readBVarChar(), 't2', 16);

      case 16:
        procName = context$1$0.t2;
        lineNumber = undefined;

        if (!(options.tdsVersion < '7_2')) {
          context$1$0.next = 24;
          break;
        }

        context$1$0.next = 21;
        return parser.readUInt16LE();

      case 21:
        lineNumber = context$1$0.sent;
        context$1$0.next = 27;
        break;

      case 24:
        context$1$0.next = 26;
        return parser.readUInt32LE();

      case 26:
        lineNumber = context$1$0.sent;

      case 27:
        return context$1$0.abrupt('return', {
          number: number,
          state: state,
          "class": clazz,
          message: message,
          serverName: serverName,
          procName: procName,
          lineNumber: lineNumber
        });

      case 28:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[0], this);
}

function infoParser(parser, colMetadata, options) {
  var token;
  return _regeneratorRuntime.wrap(function infoParser$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(parseToken(parser, options), 't0', 1);

      case 1:
        token = context$1$0.t0;

        token.name = 'INFO';
        token.event = 'infoMessage';
        return context$1$0.abrupt('return', token);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[1], this);
}

function errorParser(parser, colMetadata, options) {
  var token;
  return _regeneratorRuntime.wrap(function errorParser$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(parseToken(parser, options), 't0', 1);

      case 1:
        token = context$1$0.t0;

        token.name = 'ERROR';
        token.event = 'errorMessage';
        return context$1$0.abrupt('return', token);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[2], this);
}

// length