"use strict";

var _defineProperty = require("babel-runtime/helpers/define-property")["default"];

var _get = require("babel-runtime/helpers/get")["default"];

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _regeneratorRuntime = require("babel-runtime/regenerator")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _tokenParsers;

var _streamParser = require("../stream-parser");

var _streamParser2 = _interopRequireDefault(_streamParser);

var _token = require("./token");

var tokenParsers = (_tokenParsers = {}, _defineProperty(_tokenParsers, _token.TYPE.COLMETADATA, require('./colmetadata-token-parser')), _defineProperty(_tokenParsers, _token.TYPE.DONE, require('./done-token-parser').doneParser), _defineProperty(_tokenParsers, _token.TYPE.DONEINPROC, require('./done-token-parser').doneInProcParser), _defineProperty(_tokenParsers, _token.TYPE.DONEPROC, require('./done-token-parser').doneProcParser), _defineProperty(_tokenParsers, _token.TYPE.ENVCHANGE, require('./env-change-token-parser')), _defineProperty(_tokenParsers, _token.TYPE.ERROR, require('./infoerror-token-parser').errorParser), _defineProperty(_tokenParsers, _token.TYPE.INFO, require('./infoerror-token-parser').infoParser), _defineProperty(_tokenParsers, _token.TYPE.LOGINACK, require('./loginack-token-parser')), _defineProperty(_tokenParsers, _token.TYPE.ORDER, require('./order-token-parser')), _defineProperty(_tokenParsers, _token.TYPE.RETURNSTATUS, require('./returnstatus-token-parser')), _defineProperty(_tokenParsers, _token.TYPE.RETURNVALUE, require('./returnvalue-token-parser')), _defineProperty(_tokenParsers, _token.TYPE.ROW, require('./row-token-parser')), _defineProperty(_tokenParsers, _token.TYPE.NBCROW, require('./nbcrow-token-parser')), _defineProperty(_tokenParsers, _token.TYPE.SSPI, require('./sspi-token-parser')), _tokenParsers);

var Parser = (function (_StreamParser) {
  _inherits(Parser, _StreamParser);

  function Parser(debug, colMetadata, options) {
    _classCallCheck(this, Parser);

    _get(Object.getPrototypeOf(Parser.prototype), "constructor", this).call(this);

    this.debug = debug;
    this.colMetadata = colMetadata;
    this.options = options;
  }

  _createClass(Parser, [{
    key: "parser",
    value: _regeneratorRuntime.mark(function parser() {
      var type, token;
      return _regeneratorRuntime.wrap(function parser$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return this.readUInt8();

          case 2:
            type = context$2$0.sent;

            if (!tokenParsers[type]) {
              context$2$0.next = 9;
              break;
            }

            return context$2$0.delegateYield(tokenParsers[type](this, this.colMetadata, this.options), "t0", 5);

          case 5:
            token = context$2$0.t0;

            if (token) {
              this.debug.token(token);

              switch (token.name) {
                case 'COLMETADATA':
                  this.colMetadata = token.columns;
              }

              this.push(token);
            }
            context$2$0.next = 10;
            break;

          case 9:
            throw new Error("Token type " + type + " not implemented");

          case 10:
            context$2$0.next = 0;
            break;

          case 12:
          case "end":
            return context$2$0.stop();
        }
      }, parser, this);
    })

    // Read a Unicode String (BVARCHAR)
  }, {
    key: "readBVarChar",
    value: _regeneratorRuntime.mark(function readBVarChar() {
      var length, data;
      return _regeneratorRuntime.wrap(function readBVarChar$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return this.readUInt8();

          case 2:
            length = context$2$0.sent;
            context$2$0.next = 5;
            return this.readBuffer(length * 2);

          case 5:
            data = context$2$0.sent;
            return context$2$0.abrupt("return", data.toString("ucs2"));

          case 7:
          case "end":
            return context$2$0.stop();
        }
      }, readBVarChar, this);
    })

    // Read a Unicode String (USVARCHAR)
  }, {
    key: "readUsVarChar",
    value: _regeneratorRuntime.mark(function readUsVarChar() {
      var length, data;
      return _regeneratorRuntime.wrap(function readUsVarChar$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return this.readUInt16LE();

          case 2:
            length = context$2$0.sent;
            context$2$0.next = 5;
            return this.readBuffer(length * 2);

          case 5:
            data = context$2$0.sent;
            return context$2$0.abrupt("return", data.toString("ucs2"));

          case 7:
          case "end":
            return context$2$0.stop();
        }
      }, readUsVarChar, this);
    })

    // Read binary data (BVARBYTE)
  }, {
    key: "readBVarByte",
    value: _regeneratorRuntime.mark(function readBVarByte() {
      var length;
      return _regeneratorRuntime.wrap(function readBVarByte$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return this.readUInt8();

          case 2:
            length = context$2$0.sent;
            context$2$0.next = 5;
            return this.readBuffer(length);

          case 5:
            return context$2$0.abrupt("return", context$2$0.sent);

          case 6:
          case "end":
            return context$2$0.stop();
        }
      }, readBVarByte, this);
    })

    // Read binary data (USVARBYTE)
  }, {
    key: "readUsVarByte",
    value: _regeneratorRuntime.mark(function readUsVarByte() {
      var length;
      return _regeneratorRuntime.wrap(function readUsVarByte$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return this.readUInt16LE();

          case 2:
            length = context$2$0.sent;
            context$2$0.next = 5;
            return this.readBuffer(length);

          case 5:
            return context$2$0.abrupt("return", context$2$0.sent);

          case 6:
          case "end":
            return context$2$0.stop();
        }
      }, readUsVarByte, this);
    })
  }, {
    key: "readUInt24LE",
    value: _regeneratorRuntime.mark(function readUInt24LE() {
      var low, high;
      return _regeneratorRuntime.wrap(function readUInt24LE$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return this.readUInt16LE();

          case 2:
            low = context$2$0.sent;
            context$2$0.next = 5;
            return this.readUInt8();

          case 5:
            high = context$2$0.sent;
            return context$2$0.abrupt("return", low | high << 16);

          case 7:
          case "end":
            return context$2$0.stop();
        }
      }, readUInt24LE, this);
    })
  }, {
    key: "readUInt40LE",
    value: _regeneratorRuntime.mark(function readUInt40LE() {
      var low, high;
      return _regeneratorRuntime.wrap(function readUInt40LE$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return this.readUInt32LE();

          case 2:
            low = context$2$0.sent;
            context$2$0.next = 5;
            return this.readUInt8();

          case 5:
            high = context$2$0.sent;
            return context$2$0.abrupt("return", 0x100000000 * high + low);

          case 7:
          case "end":
            return context$2$0.stop();
        }
      }, readUInt40LE, this);
    })
  }, {
    key: "readUNumeric64LE",
    value: _regeneratorRuntime.mark(function readUNumeric64LE() {
      var low, high;
      return _regeneratorRuntime.wrap(function readUNumeric64LE$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return this.readUInt32LE();

          case 2:
            low = context$2$0.sent;
            context$2$0.next = 5;
            return this.readUInt32LE();

          case 5:
            high = context$2$0.sent;
            return context$2$0.abrupt("return", 0x100000000 * high + low);

          case 7:
          case "end":
            return context$2$0.stop();
        }
      }, readUNumeric64LE, this);
    })
  }, {
    key: "readUNumeric96LE",
    value: _regeneratorRuntime.mark(function readUNumeric96LE() {
      var dword1, dword2, dword3;
      return _regeneratorRuntime.wrap(function readUNumeric96LE$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return this.readUInt32LE();

          case 2:
            dword1 = context$2$0.sent;
            context$2$0.next = 5;
            return this.readUInt32LE();

          case 5:
            dword2 = context$2$0.sent;
            context$2$0.next = 8;
            return this.readUInt32LE();

          case 8:
            dword3 = context$2$0.sent;
            return context$2$0.abrupt("return", dword1 + 0x100000000 * dword2 + 0x100000000 * 0x100000000 * dword3);

          case 10:
          case "end":
            return context$2$0.stop();
        }
      }, readUNumeric96LE, this);
    })
  }, {
    key: "readUNumeric128LE",
    value: _regeneratorRuntime.mark(function readUNumeric128LE() {
      var dword1, dword2, dword3, dword4;
      return _regeneratorRuntime.wrap(function readUNumeric128LE$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return this.readUInt32LE();

          case 2:
            dword1 = context$2$0.sent;
            context$2$0.next = 5;
            return this.readUInt32LE();

          case 5:
            dword2 = context$2$0.sent;
            context$2$0.next = 8;
            return this.readUInt32LE();

          case 8:
            dword3 = context$2$0.sent;
            context$2$0.next = 11;
            return this.readUInt32LE();

          case 11:
            dword4 = context$2$0.sent;
            return context$2$0.abrupt("return", dword1 + 0x100000000 * dword2 + 0x100000000 * 0x100000000 * dword3 + 0x100000000 * 0x100000000 * 0x100000000 * dword4);

          case 13:
          case "end":
            return context$2$0.stop();
        }
      }, readUNumeric128LE, this);
    })
  }]);

  return Parser;
})(_streamParser2["default"]);

exports["default"] = Parser;
module.exports = exports["default"];