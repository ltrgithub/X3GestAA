'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
var types = {
  1: {
    name: 'DATABASE',
    event: 'databaseChange'
  },
  2: {
    name: 'LANGUAGE',
    event: 'languageChange'
  },
  3: {
    name: 'CHARSET',
    event: 'charsetChange'
  },
  4: {
    name: 'PACKET_SIZE',
    event: 'packetSizeChange'
  },
  7: {
    name: 'SQL_COLLATION',
    event: 'sqlCollationChange'
  },
  8: {
    name: 'BEGIN_TXN',
    event: 'beginTransaction'
  },
  9: {
    name: 'COMMIT_TXN',
    event: 'commitTransaction'
  },
  10: {
    name: 'ROLLBACK_TXN',
    event: 'rollbackTransaction'
  },
  13: {
    name: 'DATABASE_MIRRORING_PARTNER',
    event: 'partnerNode'
  },
  17: {
    name: 'TXN_ENDED'
  },
  18: {
    name: 'RESET_CONNECTION',
    event: 'resetConnection'
  },
  20: {
    name: 'ROUTING_CHANGE',
    event: 'routingChange'
  }
};

exports['default'] = _regeneratorRuntime.mark(function callee$0$0(parser) {
  var newValue, oldValue, length, typeNumber, type, valueLength, routePacket, protocol, port, serverLen, server;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        newValue = undefined, oldValue = undefined;
        context$1$0.next = 3;
        return parser.readUInt16LE();

      case 3:
        length = context$1$0.sent;
        context$1$0.next = 6;
        return parser.readUInt8();

      case 6:
        typeNumber = context$1$0.sent;
        type = types[typeNumber];

        if (!type) {
          context$1$0.next = 49;
          break;
        }

        context$1$0.t0 = type.name;
        context$1$0.next = context$1$0.t0 === 'DATABASE' ? 12 : context$1$0.t0 === 'LANGUAGE' ? 12 : context$1$0.t0 === 'CHARSET' ? 12 : context$1$0.t0 === 'PACKET_SIZE' ? 12 : context$1$0.t0 === 'DATABASE_MIRRORING_PARTNER' ? 12 : context$1$0.t0 === 'SQL_COLLATION' ? 17 : context$1$0.t0 === 'BEGIN_TXN' ? 17 : context$1$0.t0 === 'COMMIT_TXN' ? 17 : context$1$0.t0 === 'ROLLBACK_TXN' ? 17 : context$1$0.t0 === 'RESET_CONNECTION' ? 17 : context$1$0.t0 === 'ROUTING_CHANGE' ? 22 : 42;
        break;

      case 12:
        return context$1$0.delegateYield(parser.readBVarChar(), 't1', 13);

      case 13:
        newValue = context$1$0.t1;
        return context$1$0.delegateYield(parser.readBVarChar(), 't2', 15);

      case 15:
        oldValue = context$1$0.t2;
        return context$1$0.abrupt('break', 46);

      case 17:
        return context$1$0.delegateYield(parser.readBVarByte(), 't3', 18);

      case 18:
        newValue = context$1$0.t3;
        return context$1$0.delegateYield(parser.readBVarByte(), 't4', 20);

      case 20:
        oldValue = context$1$0.t4;
        return context$1$0.abrupt('break', 46);

      case 22:
        context$1$0.next = 24;
        return parser.readUInt16LE();

      case 24:
        valueLength = context$1$0.sent;
        context$1$0.next = 27;
        return parser.readBuffer(valueLength);

      case 27:
        routePacket = context$1$0.sent;
        protocol = routePacket.readUInt8(0);

        if (!(protocol !== 0)) {
          context$1$0.next = 31;
          break;
        }

        throw new Error('Unknown protocol byte in routing change event');

      case 31:
        port = routePacket.readUInt16LE(1);
        serverLen = routePacket.readUInt16LE(3);
        server = routePacket.toString('ucs2', 5, 5 + serverLen * 2);

        newValue = {
          protocol: protocol,
          port: port,
          server: server
        };

        context$1$0.next = 37;
        return parser.readUInt16LE();

      case 37:
        valueLength = context$1$0.sent;
        context$1$0.next = 40;
        return parser.readBuffer(valueLength);

      case 40:
        oldValue = context$1$0.sent;
        return context$1$0.abrupt('break', 46);

      case 42:
        console.error("Tedious > Unsupported ENVCHANGE type " + typeNumber);
        context$1$0.next = 45;
        return parser.readBuffer(length - 1);

      case 45:
        return context$1$0.abrupt('return');

      case 46:

        if (type.name === 'PACKET_SIZE') {
          newValue = parseInt(newValue);
          oldValue = parseInt(oldValue);
        }
        context$1$0.next = 53;
        break;

      case 49:
        console.error("Tedious > Unsupported ENVCHANGE type " + typeNumber);
        context$1$0.next = 52;
        return parser.readBuffer(length - 1);

      case 52:
        return context$1$0.abrupt('return');

      case 53:
        return context$1$0.abrupt('return', {
          name: 'ENVCHANGE',
          type: type.name,
          event: type.event,
          oldValue: oldValue,
          newValue: newValue
        });

      case 54:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});
module.exports = exports['default'];

// Routing Change:
// Byte 1: Protocol (must be 0)
// Bytes 2-3 (USHORT): Port number
// Bytes 4-5 (USHORT): Length of server data in unicode (2byte chars)
// Bytes 6-*: Server name in unicode characters

// 2 bytes per char, starting at offset 5
// skip unknown bytes
// skip unknown bytes