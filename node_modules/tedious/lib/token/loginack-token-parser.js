'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _tdsVersions = require('../tds-versions');

var interfaceTypes = {
  0: 'SQL_DFLT',
  1: 'SQL_TSQL'
};

module.exports = _regeneratorRuntime.mark(function callee$0$0(parser) {
  var interfaceNumber, interfaceType, tdsVersionNumber, tdsVersion, progName, progVersion;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return parser.readUInt16LE();

      case 2:
        context$1$0.next = 4;
        return parser.readUInt8();

      case 4:
        interfaceNumber = context$1$0.sent;
        interfaceType = interfaceTypes[interfaceNumber];
        context$1$0.next = 8;
        return parser.readUInt32BE();

      case 8:
        tdsVersionNumber = context$1$0.sent;
        tdsVersion = _tdsVersions.versionsByValue[tdsVersionNumber];
        return context$1$0.delegateYield(parser.readBVarChar(), 't0', 11);

      case 11:
        progName = context$1$0.t0;
        context$1$0.next = 14;
        return parser.readUInt8();

      case 14:
        context$1$0.t1 = context$1$0.sent;
        context$1$0.next = 17;
        return parser.readUInt8();

      case 17:
        context$1$0.t2 = context$1$0.sent;
        context$1$0.next = 20;
        return parser.readUInt8();

      case 20:
        context$1$0.t3 = context$1$0.sent;
        context$1$0.next = 23;
        return parser.readUInt8();

      case 23:
        context$1$0.t4 = context$1$0.sent;
        progVersion = {
          major: context$1$0.t1,
          minor: context$1$0.t2,
          buildNumHi: context$1$0.t3,
          buildNumLow: context$1$0.t4
        };
        return context$1$0.abrupt('return', {
          name: 'LOGINACK',
          event: 'loginack',
          "interface": interfaceType,
          tdsVersion: tdsVersion,
          progName: progName,
          progVersion: progVersion
        });

      case 26:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});
// length