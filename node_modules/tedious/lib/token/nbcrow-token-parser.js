// s2.2.7.13 (introduced in TDS 7.3.B)

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _valueParser = require('../value-parser');

var _valueParser2 = _interopRequireDefault(_valueParser);

exports['default'] = _regeneratorRuntime.mark(function callee$0$0(parser, columnsMetaData, options) {
  var length, bytes, bitmap, i, len, byte, j, columns, columnMetaData, value, column;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        length = Math.ceil(columnsMetaData.length / 8);
        context$1$0.next = 3;
        return parser.readBuffer(length);

      case 3:
        bytes = context$1$0.sent;
        bitmap = [];

        for (i = 0, len = bytes.length; i < len; i++) {
          byte = bytes[i];

          for (j = 0; j <= 7; j++) {
            bitmap.push(byte & 1 << j ? true : false);
          }
        }

        columns = options.useColumnNames ? {} : [];
        i = 0, len = columnsMetaData.length;

      case 8:
        if (!(i < len)) {
          context$1$0.next = 22;
          break;
        }

        columnMetaData = columnsMetaData[i];
        value = undefined;

        if (!bitmap[i]) {
          context$1$0.next = 15;
          break;
        }

        value = null;
        context$1$0.next = 17;
        break;

      case 15:
        return context$1$0.delegateYield((0, _valueParser2['default'])(parser, columnMetaData, options), 't0', 16);

      case 16:
        value = context$1$0.t0;

      case 17:
        column = {
          value: value,
          metadata: columnMetaData
        };

        if (options.useColumnNames) {
          if (columns[columnMetaData.colName] == null) {
            columns[columnMetaData.colName] = column;
          }
        } else {
          columns.push(column);
        }

      case 19:
        i++;
        context$1$0.next = 8;
        break;

      case 22:
        return context$1$0.abrupt('return', {
          name: 'NBCROW',
          event: 'row',
          columns: columns
        });

      case 23:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});
module.exports = exports['default'];