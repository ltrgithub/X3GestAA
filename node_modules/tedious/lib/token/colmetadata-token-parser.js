'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _metadataParser = require('../metadata-parser');

var _metadataParser2 = _interopRequireDefault(_metadataParser);

exports['default'] = _regeneratorRuntime.mark(function callee$0$0(parser, colMetadata, options) {
  var columnCount, columns, i, metadata, tableName, numberOfTableNameParts, j, colName;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return parser.readUInt16LE();

      case 2:
        columnCount = context$1$0.sent;
        columns = [];
        i = 0;

      case 5:
        if (!(i < columnCount)) {
          context$1$0.next = 38;
          break;
        }

        return context$1$0.delegateYield((0, _metadataParser2['default'])(parser, options), 't0', 7);

      case 7:
        metadata = context$1$0.t0;
        tableName = undefined;

        if (!metadata.type.hasTableName) {
          context$1$0.next = 30;
          break;
        }

        if (!(options.tdsVersion >= '7_2')) {
          context$1$0.next = 26;
          break;
        }

        tableName = [];

        context$1$0.next = 14;
        return parser.readUInt8();

      case 14:
        numberOfTableNameParts = context$1$0.sent;
        j = 0;

      case 16:
        if (!(j < numberOfTableNameParts)) {
          context$1$0.next = 24;
          break;
        }

        context$1$0.t1 = tableName;
        return context$1$0.delegateYield(parser.readUsVarChar(), 't2', 19);

      case 19:
        context$1$0.t3 = context$1$0.t2;
        context$1$0.t1.push.call(context$1$0.t1, context$1$0.t3);

      case 21:
        j++;
        context$1$0.next = 16;
        break;

      case 24:
        context$1$0.next = 28;
        break;

      case 26:
        return context$1$0.delegateYield(parser.readUsVarChar(), 't4', 27);

      case 27:
        tableName = context$1$0.t4;

      case 28:
        context$1$0.next = 31;
        break;

      case 30:
        tableName = undefined;

      case 31:
        return context$1$0.delegateYield(parser.readBVarChar(), 't5', 32);

      case 32:
        colName = context$1$0.t5;

        if (options.columnNameReplacer) {
          colName = options.columnNameReplacer(colName, i, metadata);
        } else if (options.camelCaseColumns) {
          colName = colName.replace(/^[A-Z]/, function (s) {
            return s.toLowerCase();
          });
        }

        columns.push({
          userType: metadata.userType,
          flags: metadata.flags,
          type: metadata.type,
          colName: colName,
          collation: metadata.collation,
          precision: metadata.precision,
          scale: metadata.scale,
          udtInfo: metadata.udtInfo,
          dataLength: metadata.dataLength,
          tableName: tableName
        });

      case 35:
        i++;
        context$1$0.next = 5;
        break;

      case 38:
        return context$1$0.abrupt('return', {
          name: 'COLMETADATA',
          event: 'columnMetadata',
          columns: columns
        });

      case 39:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});
module.exports = exports['default'];