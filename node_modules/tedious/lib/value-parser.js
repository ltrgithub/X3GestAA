'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
var marked0$0 = [readBinary, readChars, readNChars, readMaxBinary, readMaxChars, readMaxNChars, readMax, readMaxKnownLength, readMaxUnknownLength, readSmallDateTime, readDateTime, readTime, readDate, readDateTime2, readDateTimeOffset].map(_regeneratorRuntime.mark);

var _iconvLite = require('iconv-lite');

var _iconvLite2 = _interopRequireDefault(_iconvLite);

var _sprintf = require('sprintf');

var _guidParser = require('./guid-parser');

var guidParser = _interopRequireWildcard(_guidParser);

var _trackingBufferBigint = require('./tracking-buffer/bigint');

var NULL = (1 << 16) - 1;
var MAX = (1 << 16) - 1;
var THREE_AND_A_THIRD = 3 + 1 / 3;
var MONEY_DIVISOR = 10000;
var PLP_NULL = new Buffer([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);
var UNKNOWN_PLP_LEN = new Buffer([0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);
var DEFAULT_ENCODING = 'utf8';

exports['default'] = _regeneratorRuntime.mark(function callee$0$0(parser, metaData, options) {
  var type, value, dataLength, textPointerNull, textPointerLength, high, low, codepage, sign, data;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        type = metaData.type;
        value = undefined, dataLength = undefined, textPointerNull = undefined;

        if (!type.hasTextPointerAndTimestamp) {
          context$1$0.next = 15;
          break;
        }

        context$1$0.next = 5;
        return parser.readUInt8();

      case 5:
        textPointerLength = context$1$0.sent;

        if (!(textPointerLength !== 0)) {
          context$1$0.next = 13;
          break;
        }

        context$1$0.next = 9;
        return parser.readBuffer(textPointerLength);

      case 9:
        context$1$0.next = 11;
        return parser.readBuffer(8);

      case 11:
        context$1$0.next = 15;
        break;

      case 13:
        dataLength = 0;
        textPointerNull = true;

      case 15:
        if (!(dataLength !== 0)) {
          context$1$0.next = 42;
          break;
        }

        context$1$0.t0 = type.id & 0x30;
        context$1$0.next = context$1$0.t0 === 0x10 ? 19 : context$1$0.t0 === 0x20 ? 21 : context$1$0.t0 === 0x30 ? 41 : 42;
        break;

      case 19:
        // xx01xxxx - s2.2.4.2.1.1
        dataLength = 0;
        return context$1$0.abrupt('break', 42);

      case 21:
        if (!(metaData.dataLength !== MAX)) {
          context$1$0.next = 40;
          break;
        }

        context$1$0.t1 = type.dataLengthLength;
        context$1$0.next = context$1$0.t1 === 0 ? 25 : context$1$0.t1 === 1 ? 27 : context$1$0.t1 === 2 ? 31 : context$1$0.t1 === 4 ? 35 : 39;
        break;

      case 25:
        dataLength = void 0;
        return context$1$0.abrupt('break', 40);

      case 27:
        context$1$0.next = 29;
        return parser.readUInt8();

      case 29:
        dataLength = context$1$0.sent;
        return context$1$0.abrupt('break', 40);

      case 31:
        context$1$0.next = 33;
        return parser.readUInt16LE();

      case 33:
        dataLength = context$1$0.sent;
        return context$1$0.abrupt('break', 40);

      case 35:
        context$1$0.next = 37;
        return parser.readUInt32LE();

      case 37:
        dataLength = context$1$0.sent;
        return context$1$0.abrupt('break', 40);

      case 39:
        throw Error("Unsupported dataLengthLength " + type.dataLengthLength + " for data type " + type.name);

      case 40:
        return context$1$0.abrupt('break', 42);

      case 41:
        dataLength = 1 << ((type.id & 0x0C) >> 2);

      case 42:
        context$1$0.t2 = type.name;
        context$1$0.next = context$1$0.t2 === 'Null' ? 45 : context$1$0.t2 === 'TinyInt' ? 47 : context$1$0.t2 === 'Int' ? 51 : context$1$0.t2 === 'SmallInt' ? 55 : context$1$0.t2 === 'BigInt' ? 59 : context$1$0.t2 === 'IntN' ? 64 : context$1$0.t2 === 'Real' ? 88 : context$1$0.t2 === 'Float' ? 92 : context$1$0.t2 === 'FloatN' ? 96 : context$1$0.t2 === 'Money' ? 111 : context$1$0.t2 === 'SmallMoney' ? 111 : context$1$0.t2 === 'MoneyN' ? 111 : context$1$0.t2 === 'Bit' ? 133 : context$1$0.t2 === 'BitN' ? 137 : context$1$0.t2 === 'VarChar' ? 146 : context$1$0.t2 === 'Char' ? 146 : context$1$0.t2 === 'NVarChar' ? 155 : context$1$0.t2 === 'NChar' ? 155 : context$1$0.t2 === 'VarBinary' ? 163 : context$1$0.t2 === 'Binary' ? 163 : context$1$0.t2 === 'Text' ? 171 : context$1$0.t2 === 'NText' ? 178 : context$1$0.t2 === 'Image' ? 185 : context$1$0.t2 === 'Xml' ? 192 : context$1$0.t2 === 'SmallDateTime' ? 195 : context$1$0.t2 === 'DateTime' ? 198 : context$1$0.t2 === 'DateTimeN' ? 201 : context$1$0.t2 === 'TimeN' ? 212 : context$1$0.t2 === 'DateN' ? 222 : context$1$0.t2 === 'DateTime2N' ? 232 : context$1$0.t2 === 'DateTimeOffsetN' ? 242 : context$1$0.t2 === 'NumericN' ? 252 : context$1$0.t2 === 'DecimalN' ? 252 : context$1$0.t2 === 'UniqueIdentifierN' ? 285 : context$1$0.t2 === 'UDT' ? 299 : 302;
        break;

      case 45:
        value = null;
        return context$1$0.abrupt('break', 303);

      case 47:
        context$1$0.next = 49;
        return parser.readUInt8();

      case 49:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 303);

      case 51:
        context$1$0.next = 53;
        return parser.readInt32LE();

      case 53:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 303);

      case 55:
        context$1$0.next = 57;
        return parser.readInt16LE();

      case 57:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 303);

      case 59:
        context$1$0.next = 61;
        return parser.readBuffer(8);

      case 61:
        context$1$0.t3 = context$1$0.sent;
        value = (0, _trackingBufferBigint.convertLEBytesToString)(context$1$0.t3);
        return context$1$0.abrupt('break', 303);

      case 64:
        context$1$0.t4 = dataLength;
        context$1$0.next = context$1$0.t4 === 0 ? 67 : context$1$0.t4 === 1 ? 69 : context$1$0.t4 === 2 ? 73 : context$1$0.t4 === 4 ? 77 : context$1$0.t4 === 8 ? 81 : 86;
        break;

      case 67:
        value = null;
        return context$1$0.abrupt('break', 87);

      case 69:
        context$1$0.next = 71;
        return parser.readUInt8();

      case 71:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 87);

      case 73:
        context$1$0.next = 75;
        return parser.readInt16LE();

      case 75:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 87);

      case 77:
        context$1$0.next = 79;
        return parser.readInt32LE();

      case 79:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 87);

      case 81:
        context$1$0.next = 83;
        return parser.readBuffer(8);

      case 83:
        context$1$0.t5 = context$1$0.sent;
        value = (0, _trackingBufferBigint.convertLEBytesToString)(context$1$0.t5);
        return context$1$0.abrupt('break', 87);

      case 86:
        throw new Error("Unsupported dataLength " + dataLength + " for IntN");

      case 87:
        return context$1$0.abrupt('break', 303);

      case 88:
        context$1$0.next = 90;
        return parser.readFloatLE();

      case 90:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 303);

      case 92:
        context$1$0.next = 94;
        return parser.readDoubleLE();

      case 94:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 303);

      case 96:
        context$1$0.t6 = dataLength;
        context$1$0.next = context$1$0.t6 === 0 ? 99 : context$1$0.t6 === 4 ? 101 : context$1$0.t6 === 8 ? 105 : 109;
        break;

      case 99:
        value = null;
        return context$1$0.abrupt('break', 110);

      case 101:
        context$1$0.next = 103;
        return parser.readFloatLE();

      case 103:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 110);

      case 105:
        context$1$0.next = 107;
        return parser.readDoubleLE();

      case 107:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 110);

      case 109:
        throw new Error("Unsupported dataLength " + dataLength + " for FloatN");

      case 110:
        return context$1$0.abrupt('break', 303);

      case 111:
        context$1$0.t7 = dataLength;
        context$1$0.next = context$1$0.t7 === 0 ? 114 : context$1$0.t7 === 4 ? 116 : context$1$0.t7 === 8 ? 122 : 131;
        break;

      case 114:
        value = null;
        return context$1$0.abrupt('break', 132);

      case 116:
        context$1$0.next = 118;
        return parser.readInt32LE();

      case 118:
        context$1$0.t8 = context$1$0.sent;
        context$1$0.t9 = MONEY_DIVISOR;
        value = context$1$0.t8 / context$1$0.t9;
        return context$1$0.abrupt('break', 132);

      case 122:
        context$1$0.next = 124;
        return parser.readInt32LE();

      case 124:
        high = context$1$0.sent;
        context$1$0.next = 127;
        return parser.readUInt32LE();

      case 127:
        low = context$1$0.sent;

        value = low + 0x100000000 * high;
        value /= MONEY_DIVISOR;
        return context$1$0.abrupt('break', 132);

      case 131:
        throw new Error("Unsupported dataLength " + dataLength + " for MoneyN");

      case 132:
        return context$1$0.abrupt('break', 303);

      case 133:
        context$1$0.next = 135;
        return parser.readUInt8();

      case 135:
        value = !!context$1$0.sent;
        return context$1$0.abrupt('break', 303);

      case 137:
        context$1$0.t10 = dataLength;
        context$1$0.next = context$1$0.t10 === 0 ? 140 : context$1$0.t10 === 1 ? 142 : 145;
        break;

      case 140:
        value = null;
        return context$1$0.abrupt('break', 145);

      case 142:
        context$1$0.next = 144;
        return parser.readUInt8();

      case 144:
        value = !!context$1$0.sent;

      case 145:
        return context$1$0.abrupt('break', 303);

      case 146:
        codepage = metaData.collation.codepage;

        if (!(metaData.dataLength === MAX)) {
          context$1$0.next = 152;
          break;
        }

        return context$1$0.delegateYield(readMaxChars(parser, codepage), 't11', 149);

      case 149:
        value = context$1$0.t11;
        context$1$0.next = 154;
        break;

      case 152:
        return context$1$0.delegateYield(readChars(parser, dataLength, codepage), 't12', 153);

      case 153:
        value = context$1$0.t12;

      case 154:
        return context$1$0.abrupt('break', 303);

      case 155:
        if (!(metaData.dataLength === MAX)) {
          context$1$0.next = 160;
          break;
        }

        return context$1$0.delegateYield(readMaxNChars(parser), 't13', 157);

      case 157:
        value = context$1$0.t13;
        context$1$0.next = 162;
        break;

      case 160:
        return context$1$0.delegateYield(readNChars(parser, dataLength), 't14', 161);

      case 161:
        value = context$1$0.t14;

      case 162:
        return context$1$0.abrupt('break', 303);

      case 163:
        if (!(metaData.dataLength === MAX)) {
          context$1$0.next = 168;
          break;
        }

        return context$1$0.delegateYield(readMaxBinary(parser), 't15', 165);

      case 165:
        value = context$1$0.t15;
        context$1$0.next = 170;
        break;

      case 168:
        return context$1$0.delegateYield(readBinary(parser, dataLength), 't16', 169);

      case 169:
        value = context$1$0.t16;

      case 170:
        return context$1$0.abrupt('break', 303);

      case 171:
        if (!textPointerNull) {
          context$1$0.next = 175;
          break;
        }

        value = null;
        context$1$0.next = 177;
        break;

      case 175:
        return context$1$0.delegateYield(readChars(parser, dataLength, metaData.collation.codepage), 't17', 176);

      case 176:
        value = context$1$0.t17;

      case 177:
        return context$1$0.abrupt('break', 303);

      case 178:
        if (!textPointerNull) {
          context$1$0.next = 182;
          break;
        }

        value = null;
        context$1$0.next = 184;
        break;

      case 182:
        return context$1$0.delegateYield(readNChars(parser, dataLength), 't18', 183);

      case 183:
        value = context$1$0.t18;

      case 184:
        return context$1$0.abrupt('break', 303);

      case 185:
        if (!textPointerNull) {
          context$1$0.next = 189;
          break;
        }

        value = null;
        context$1$0.next = 191;
        break;

      case 189:
        return context$1$0.delegateYield(readBinary(parser, dataLength), 't19', 190);

      case 190:
        value = context$1$0.t19;

      case 191:
        return context$1$0.abrupt('break', 303);

      case 192:
        return context$1$0.delegateYield(readMaxNChars(parser), 't20', 193);

      case 193:
        value = context$1$0.t20;
        return context$1$0.abrupt('break', 303);

      case 195:
        return context$1$0.delegateYield(readSmallDateTime(parser, options.useUTC), 't21', 196);

      case 196:
        value = context$1$0.t21;
        return context$1$0.abrupt('break', 303);

      case 198:
        return context$1$0.delegateYield(readDateTime(parser, options.useUTC), 't22', 199);

      case 199:
        value = context$1$0.t22;
        return context$1$0.abrupt('break', 303);

      case 201:
        context$1$0.t23 = dataLength;
        context$1$0.next = context$1$0.t23 === 0 ? 204 : context$1$0.t23 === 4 ? 206 : context$1$0.t23 === 8 ? 209 : 211;
        break;

      case 204:
        value = null;
        return context$1$0.abrupt('break', 211);

      case 206:
        return context$1$0.delegateYield(readSmallDateTime(parser, options.useUTC), 't24', 207);

      case 207:
        value = context$1$0.t24;
        return context$1$0.abrupt('break', 211);

      case 209:
        return context$1$0.delegateYield(readDateTime(parser, options.useUTC), 't25', 210);

      case 210:
        value = context$1$0.t25;

      case 211:
        return context$1$0.abrupt('break', 303);

      case 212:
        context$1$0.next = 214;
        return parser.readUInt8();

      case 214:
        context$1$0.t26 = dataLength = context$1$0.sent;

        if (!(context$1$0.t26 === 0)) {
          context$1$0.next = 219;
          break;
        }

        value = null;
        context$1$0.next = 221;
        break;

      case 219:
        return context$1$0.delegateYield(readTime(parser, dataLength, metaData.scale, options.useUTC), 't27', 220);

      case 220:
        value = context$1$0.t27;

      case 221:
        return context$1$0.abrupt('break', 303);

      case 222:
        context$1$0.next = 224;
        return parser.readUInt8();

      case 224:
        context$1$0.t28 = dataLength = context$1$0.sent;

        if (!(context$1$0.t28 === 0)) {
          context$1$0.next = 229;
          break;
        }

        value = null;
        context$1$0.next = 231;
        break;

      case 229:
        return context$1$0.delegateYield(readDate(parser, options.useUTC), 't29', 230);

      case 230:
        value = context$1$0.t29;

      case 231:
        return context$1$0.abrupt('break', 303);

      case 232:
        context$1$0.next = 234;
        return parser.readUInt8();

      case 234:
        context$1$0.t30 = dataLength = context$1$0.sent;

        if (!(context$1$0.t30 === 0)) {
          context$1$0.next = 239;
          break;
        }

        value = null;
        context$1$0.next = 241;
        break;

      case 239:
        return context$1$0.delegateYield(readDateTime2(parser, dataLength, metaData.scale, options.useUTC), 't31', 240);

      case 240:
        value = context$1$0.t31;

      case 241:
        return context$1$0.abrupt('break', 303);

      case 242:
        context$1$0.next = 244;
        return parser.readUInt8();

      case 244:
        context$1$0.t32 = dataLength = context$1$0.sent;

        if (!(context$1$0.t32 === 0)) {
          context$1$0.next = 249;
          break;
        }

        value = null;
        context$1$0.next = 251;
        break;

      case 249:
        return context$1$0.delegateYield(readDateTimeOffset(parser, dataLength, metaData.scale), 't33', 250);

      case 250:
        value = context$1$0.t33;

      case 251:
        return context$1$0.abrupt('break', 303);

      case 252:
        if (!(dataLength === 0)) {
          context$1$0.next = 256;
          break;
        }

        value = null;
        context$1$0.next = 284;
        break;

      case 256:
        context$1$0.next = 258;
        return parser.readUInt8();

      case 258:
        context$1$0.t34 = context$1$0.sent;

        if (!(context$1$0.t34 === 1)) {
          context$1$0.next = 263;
          break;
        }

        context$1$0.t35 = 1;
        context$1$0.next = 264;
        break;

      case 263:
        context$1$0.t35 = -1;

      case 264:
        sign = context$1$0.t35;
        context$1$0.t36 = dataLength - 1;
        context$1$0.next = context$1$0.t36 === 4 ? 268 : context$1$0.t36 === 8 ? 272 : context$1$0.t36 === 12 ? 275 : context$1$0.t36 === 16 ? 278 : 281;
        break;

      case 268:
        context$1$0.next = 270;
        return parser.readUInt32LE();

      case 270:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 282);

      case 272:
        return context$1$0.delegateYield(parser.readUNumeric64LE(), 't37', 273);

      case 273:
        value = context$1$0.t37;
        return context$1$0.abrupt('break', 282);

      case 275:
        return context$1$0.delegateYield(parser.readUNumeric96LE(), 't38', 276);

      case 276:
        value = context$1$0.t38;
        return context$1$0.abrupt('break', 282);

      case 278:
        return context$1$0.delegateYield(parser.readUNumeric128LE(), 't39', 279);

      case 279:
        value = context$1$0.t39;
        return context$1$0.abrupt('break', 282);

      case 281:
        throw new Error((0, _sprintf.sprintf)('Unsupported numeric size %d', dataLength - 1));

      case 282:
        value *= sign;
        value /= Math.pow(10, metaData.scale);

      case 284:
        return context$1$0.abrupt('break', 303);

      case 285:
        context$1$0.t40 = dataLength;
        context$1$0.next = context$1$0.t40 === 0 ? 288 : context$1$0.t40 === 0x10 ? 290 : 297;
        break;

      case 288:
        value = null;
        return context$1$0.abrupt('break', 298);

      case 290:
        context$1$0.t41 = Buffer;
        context$1$0.next = 293;
        return parser.readBuffer(0x10);

      case 293:
        context$1$0.t42 = context$1$0.sent;
        data = new context$1$0.t41(context$1$0.t42);

        value = guidParser.arrayToGuid(data);
        return context$1$0.abrupt('break', 298);

      case 297:
        throw new Error((0, _sprintf.sprintf)('Unsupported guid size %d', dataLength - 1));

      case 298:
        return context$1$0.abrupt('break', 303);

      case 299:
        return context$1$0.delegateYield(readMaxBinary(parser), 't43', 300);

      case 300:
        value = context$1$0.t43;
        return context$1$0.abrupt('break', 303);

      case 302:
        throw new Error((0, _sprintf.sprintf)('Unrecognised type %s', type.name));

      case 303:
        return context$1$0.abrupt('return', value);

      case 304:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

function readBinary(parser, dataLength) {
  return _regeneratorRuntime.wrap(function readBinary$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(dataLength === NULL)) {
          context$1$0.next = 4;
          break;
        }

        return context$1$0.abrupt('return', null);

      case 4:
        context$1$0.next = 6;
        return parser.readBuffer(dataLength);

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[0], this);
}

function readChars(parser, dataLength, codepage) {
  return _regeneratorRuntime.wrap(function readChars$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (codepage == null) {
          codepage = DEFAULT_ENCODING;
        }

        if (!(dataLength === NULL)) {
          context$1$0.next = 5;
          break;
        }

        return context$1$0.abrupt('return', null);

      case 5:
        context$1$0.t0 = _iconvLite2['default'];
        context$1$0.next = 8;
        return parser.readBuffer(dataLength);

      case 8:
        context$1$0.t1 = context$1$0.sent;
        context$1$0.t2 = codepage;
        return context$1$0.abrupt('return', context$1$0.t0.decode.call(context$1$0.t0, context$1$0.t1, context$1$0.t2));

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[1], this);
}

function readNChars(parser, dataLength) {
  return _regeneratorRuntime.wrap(function readNChars$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(dataLength === NULL)) {
          context$1$0.next = 4;
          break;
        }

        return context$1$0.abrupt('return', null);

      case 4:
        context$1$0.next = 6;
        return parser.readBuffer(dataLength);

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent.toString("ucs2"));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[2], this);
}

function readMaxBinary(parser) {
  return _regeneratorRuntime.wrap(function readMaxBinary$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(readMax(parser), 't0', 1);

      case 1:
        return context$1$0.abrupt('return', context$1$0.t0);

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[3], this);
}

function readMaxChars(parser, codepage) {
  var data;
  return _regeneratorRuntime.wrap(function readMaxChars$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (codepage == null) {
          codepage = DEFAULT_ENCODING;
        }

        data = undefined;
        return context$1$0.delegateYield(readMax(parser), 't0', 3);

      case 3:
        if (!(data = context$1$0.t0)) {
          context$1$0.next = 7;
          break;
        }

        return context$1$0.abrupt('return', _iconvLite2['default'].decode(data, codepage));

      case 7:
        return context$1$0.abrupt('return', null);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[4], this);
}

function readMaxNChars(parser) {
  return _regeneratorRuntime.wrap(function readMaxNChars$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(readMax(parser), 't0', 1);

      case 1:
        return context$1$0.abrupt('return', context$1$0.t0.toString('ucs2'));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[5], this);
}

function readMax(parser) {
  var type, low, high, expectedLength;
  return _regeneratorRuntime.wrap(function readMax$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return parser.readBuffer(8);

      case 2:
        type = context$1$0.sent;

        if (!type.equals(PLP_NULL)) {
          context$1$0.next = 7;
          break;
        }

        return context$1$0.abrupt('return', null);

      case 7:
        if (!type.equals(UNKNOWN_PLP_LEN)) {
          context$1$0.next = 12;
          break;
        }

        return context$1$0.delegateYield(readMaxUnknownLength(parser), 't0', 9);

      case 9:
        return context$1$0.abrupt('return', context$1$0.t0);

      case 12:
        low = type.readUInt32LE(0);
        high = type.readUInt32LE(4);

        if (high >= 2 << 53 - 32) {
          console.warn("Read UInt64LE > 53 bits : high=" + high + ", low=" + low);
        }

        expectedLength = low + 0x100000000 * high;
        return context$1$0.delegateYield(readMaxKnownLength(parser, expectedLength), 't1', 17);

      case 17:
        return context$1$0.abrupt('return', context$1$0.t1);

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[6], this);
}

function readMaxKnownLength(parser, totalLength) {
  var data, offset, chunkLength;
  return _regeneratorRuntime.wrap(function readMaxKnownLength$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        data = new Buffer(totalLength);
        offset = 0, chunkLength = undefined;

      case 2:
        context$1$0.next = 4;
        return parser.readUInt32LE();

      case 4:
        if (!(chunkLength = context$1$0.sent)) {
          context$1$0.next = 13;
          break;
        }

        context$1$0.next = 7;
        return parser.readBuffer(chunkLength);

      case 7:
        context$1$0.t0 = data;
        context$1$0.t1 = offset;
        context$1$0.sent.copy(context$1$0.t0, context$1$0.t1);

        offset += chunkLength;
        context$1$0.next = 2;
        break;

      case 13:
        if (!(offset !== totalLength)) {
          context$1$0.next = 15;
          break;
        }

        throw new Error("Partially Length-prefixed Bytes unmatched lengths : expected " + totalLength + ", but got " + offset + " bytes");

      case 15:
        return context$1$0.abrupt('return', data);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[7], this);
}

function readMaxUnknownLength(parser) {
  var chunks, chunkLength, length;
  return _regeneratorRuntime.wrap(function readMaxUnknownLength$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        chunks = [];
        chunkLength = undefined, length = 0;

      case 2:
        context$1$0.next = 4;
        return parser.readUInt32LE();

      case 4:
        if (!(chunkLength = context$1$0.sent)) {
          context$1$0.next = 13;
          break;
        }

        length += chunkLength;
        context$1$0.t0 = chunks;
        context$1$0.next = 9;
        return parser.readBuffer(chunkLength);

      case 9:
        context$1$0.t1 = context$1$0.sent;
        context$1$0.t0.push.call(context$1$0.t0, context$1$0.t1);
        context$1$0.next = 2;
        break;

      case 13:
        return context$1$0.abrupt('return', Buffer.concat(chunks, length));

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[8], this);
}

function readSmallDateTime(parser, useUTC) {
  var days, minutes, value;
  return _regeneratorRuntime.wrap(function readSmallDateTime$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return parser.readUInt16LE();

      case 2:
        days = context$1$0.sent;
        context$1$0.next = 5;
        return parser.readUInt16LE();

      case 5:
        minutes = context$1$0.sent;
        value = undefined;

        if (useUTC) {
          value = new Date(Date.UTC(1900, 0, 1));
          value.setUTCDate(value.getUTCDate() + days);
          value.setUTCMinutes(value.getUTCMinutes() + minutes);
        } else {
          value = new Date(1900, 0, 1);
          value.setDate(value.getDate() + days);
          value.setMinutes(value.getMinutes() + minutes);
        }
        return context$1$0.abrupt('return', value);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[9], this);
}

function readDateTime(parser, useUTC) {
  var days, threeHundredthsOfSecond, milliseconds, value;
  return _regeneratorRuntime.wrap(function readDateTime$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return parser.readInt32LE();

      case 2:
        days = context$1$0.sent;
        context$1$0.next = 5;
        return parser.readUInt32LE();

      case 5:
        threeHundredthsOfSecond = context$1$0.sent;
        milliseconds = threeHundredthsOfSecond * THREE_AND_A_THIRD;
        value = undefined;

        if (useUTC) {
          value = new Date(Date.UTC(1900, 0, 1));
          value.setUTCDate(value.getUTCDate() + days);
          value.setUTCMilliseconds(value.getUTCMilliseconds() + milliseconds);
        } else {
          value = new Date(1900, 0, 1);
          value.setDate(value.getDate() + days);
          value.setMilliseconds(value.getMilliseconds() + milliseconds);
        }
        return context$1$0.abrupt('return', value);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[10], this);
}

function readTime(parser, dataLength, scale, useUTC) {
  var value, i, date;
  return _regeneratorRuntime.wrap(function readTime$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        value = undefined;
        context$1$0.t0 = dataLength;
        context$1$0.next = context$1$0.t0 === 3 ? 4 : context$1$0.t0 === 4 ? 7 : context$1$0.t0 === 5 ? 11 : 13;
        break;

      case 4:
        return context$1$0.delegateYield(parser.readUInt24LE(), 't1', 5);

      case 5:
        value = context$1$0.t1;
        return context$1$0.abrupt('break', 13);

      case 7:
        context$1$0.next = 9;
        return parser.readUInt32LE();

      case 9:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 13);

      case 11:
        return context$1$0.delegateYield(parser.readUInt40LE(), 't2', 12);

      case 12:
        value = context$1$0.t2;

      case 13:

        if (scale < 7) {
          for (i = scale; i < 7; i++) {
            value *= 10;
          }
        }

        date = undefined;

        if (useUTC) {
          date = new Date(Date.UTC(1970, 0, 1, 0, 0, 0, value / 10000));
        } else {
          date = new Date(1970, 0, 1, 0, 0, 0, value / 10000);
        }
        Object.defineProperty(date, "nanosecondsDelta", {
          enumerable: false,
          value: value % 10000 / Math.pow(10, 7)
        });
        return context$1$0.abrupt('return', date);

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[11], this);
}

function readDate(parser, useUTC) {
  var days;
  return _regeneratorRuntime.wrap(function readDate$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(parser.readUInt24LE(), 't0', 1);

      case 1:
        days = context$1$0.t0;

        if (!useUTC) {
          context$1$0.next = 6;
          break;
        }

        return context$1$0.abrupt('return', new Date(Date.UTC(2000, 0, days - 730118)));

      case 6:
        return context$1$0.abrupt('return', new Date(2000, 0, days - 730118));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[12], this);
}

function readDateTime2(parser, dataLength, scale, useUTC) {
  var time, days, date;
  return _regeneratorRuntime.wrap(function readDateTime2$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(readTime(parser, dataLength - 3, scale, useUTC), 't0', 1);

      case 1:
        time = context$1$0.t0;
        return context$1$0.delegateYield(parser.readUInt24LE(), 't1', 3);

      case 3:
        days = context$1$0.t1;
        date = undefined;

        if (useUTC) {
          date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));
        } else {
          date = new Date(2000, 0, days - 730118, time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds());
        }
        Object.defineProperty(date, "nanosecondsDelta", {
          enumerable: false,
          value: time.nanosecondsDelta
        });
        return context$1$0.abrupt('return', date);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[13], this);
}

function readDateTimeOffset(parser, dataLength, scale) {
  var time, days, date;
  return _regeneratorRuntime.wrap(function readDateTimeOffset$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(readTime(parser, dataLength - 5, scale, true), 't0', 1);

      case 1:
        time = context$1$0.t0;
        return context$1$0.delegateYield(parser.readUInt24LE(), 't1', 3);

      case 3:
        days = context$1$0.t1;
        context$1$0.next = 6;
        return parser.readInt16LE();

      case 6:
        date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));

        Object.defineProperty(date, "nanosecondsDelta", {
          enumerable: false,
          value: time.nanosecondsDelta
        });
        return context$1$0.abrupt('return', date);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, marked0$0[14], this);
}
module.exports = exports['default'];

// Appear to be dummy values, so consume and discard them.

// s2.2.4.2.1
// xx10xxxx - s2.2.4.2.1.3
// Variable length
// offset