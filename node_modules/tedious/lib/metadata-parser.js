'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _collation = require('./collation');

var _dataType = require('./data-type');

var _sprintf = require('sprintf');

exports['default'] = _regeneratorRuntime.mark(function callee$0$0(parser, options) {
  var userType, flags, typeNumber, type, dataLength, precision, scale, collation, collationData, schema, schemaPresent, udtInfo;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        userType = undefined;

        if (!(options.tdsVersion < "7_2")) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 4;
        return parser.readUInt16LE();

      case 4:
        userType = context$1$0.sent;
        context$1$0.next = 10;
        break;

      case 7:
        context$1$0.next = 9;
        return parser.readUInt32LE();

      case 9:
        userType = context$1$0.sent;

      case 10:
        context$1$0.next = 12;
        return parser.readUInt16LE();

      case 12:
        flags = context$1$0.sent;
        context$1$0.next = 15;
        return parser.readUInt8();

      case 15:
        typeNumber = context$1$0.sent;
        type = _dataType.TYPE[typeNumber];

        if (type) {
          context$1$0.next = 19;
          break;
        }

        throw new Error((0, _sprintf.sprintf)('Unrecognised data type 0x%02X', typeNumber));

      case 19:
        dataLength = undefined;

        if (!((type.id & 0x30) === 0x20)) {
          context$1$0.next = 39;
          break;
        }

        context$1$0.t0 = type.dataLengthLength;
        context$1$0.next = context$1$0.t0 === 0 ? 24 : context$1$0.t0 === 1 ? 26 : context$1$0.t0 === 2 ? 30 : context$1$0.t0 === 4 ? 34 : 38;
        break;

      case 24:
        dataLength = void 0;
        return context$1$0.abrupt('break', 39);

      case 26:
        context$1$0.next = 28;
        return parser.readUInt8();

      case 28:
        dataLength = context$1$0.sent;
        return context$1$0.abrupt('break', 39);

      case 30:
        context$1$0.next = 32;
        return parser.readUInt16LE();

      case 32:
        dataLength = context$1$0.sent;
        return context$1$0.abrupt('break', 39);

      case 34:
        context$1$0.next = 36;
        return parser.readUInt32LE();

      case 36:
        dataLength = context$1$0.sent;
        return context$1$0.abrupt('break', 39);

      case 38:
        throw new Error("Unsupported dataLengthLength " + type.dataLengthLength + " for data type " + type.name);

      case 39:
        precision = undefined;

        if (!type.hasPrecision) {
          context$1$0.next = 44;
          break;
        }

        context$1$0.next = 43;
        return parser.readUInt8();

      case 43:
        precision = context$1$0.sent;

      case 44:
        scale = undefined;

        if (!type.hasScale) {
          context$1$0.next = 50;
          break;
        }

        context$1$0.next = 48;
        return parser.readUInt8();

      case 48:
        scale = context$1$0.sent;

        if (type.dataLengthFromScale) {
          dataLength = type.dataLengthFromScale(scale);
        }

      case 50:
        collation = undefined;

        if (!type.hasCollation) {
          context$1$0.next = 64;
          break;
        }

        context$1$0.next = 54;
        return parser.readBuffer(5);

      case 54:
        collationData = context$1$0.sent;

        collation = {};

        collation.lcid = (collationData[2] & 0x0F) << 16;
        collation.lcid |= collationData[1] << 8;
        collation.lcid |= collationData[0];

        collation.codepage = _collation.codepageByLcid[collation.lcid];

        // This may not be extracting the correct nibbles in the correct order.
        collation.flags = collationData[3] >> 4;
        collation.flags |= collationData[2] & 0xF0;

        // This may not be extracting the correct nibble.
        collation.version = collationData[3] & 0x0F;

        collation.sortId = collationData[4];

      case 64:
        schema = undefined;

        if (!type.hasSchemaPresent) {
          context$1$0.next = 77;
          break;
        }

        context$1$0.next = 68;
        return parser.readUInt8();

      case 68:
        schemaPresent = context$1$0.sent;

        if (!(schemaPresent === 0x01)) {
          context$1$0.next = 77;
          break;
        }

        return context$1$0.delegateYield(parser.readBVarChar(), 't1', 71);

      case 71:
        context$1$0.t2 = context$1$0.t1;
        return context$1$0.delegateYield(parser.readBVarChar(), 't3', 73);

      case 73:
        context$1$0.t4 = context$1$0.t3;
        return context$1$0.delegateYield(parser.readUsVarChar(), 't5', 75);

      case 75:
        context$1$0.t6 = context$1$0.t5;
        schema = {
          dbname: context$1$0.t2,
          owningSchema: context$1$0.t4,
          xmlSchemaCollection: context$1$0.t6
        };

      case 77:
        udtInfo = undefined;

        if (!type.hasUDTInfo) {
          context$1$0.next = 91;
          break;
        }

        context$1$0.next = 81;
        return parser.readUInt16LE();

      case 81:
        context$1$0.t7 = context$1$0.sent;
        return context$1$0.delegateYield(parser.readBVarChar(), 't8', 83);

      case 83:
        context$1$0.t9 = context$1$0.t8;
        return context$1$0.delegateYield(parser.readBVarChar(), 't10', 85);

      case 85:
        context$1$0.t11 = context$1$0.t10;
        return context$1$0.delegateYield(parser.readBVarChar(), 't12', 87);

      case 87:
        context$1$0.t13 = context$1$0.t12;
        return context$1$0.delegateYield(parser.readUsVarChar(), 't14', 89);

      case 89:
        context$1$0.t15 = context$1$0.t14;
        udtInfo = {
          maxByteSize: context$1$0.t7,
          dbname: context$1$0.t9,
          owningSchema: context$1$0.t11,
          typeName: context$1$0.t13,
          assemblyName: context$1$0.t15
        };

      case 91:
        return context$1$0.abrupt('return', {
          userType: userType,
          flags: flags,
          type: type,
          collation: collation,
          precision: precision,
          scale: scale,
          dataLength: dataLength,
          schema: schema,
          udtInfo: udtInfo
        });

      case 92:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});
module.exports = exports['default'];

// xx10xxxx - s2.2.4.2.1.3
// Variable length

// s2.2.5.1.2

// s2.2.5.5.3

// s2.2.5.5.2