"use strict";

const helpers = require('@sage/syracuse-core').helpers;
const config = require('config'); // must be first syracuse require
const testAdmin = require('@sage/syracuse-core').apis.get('test-admin');
const adminHelper = require("@sage/syracuse-lib/src/collaboration/helpers");
const globals = require('streamline-runtime').globals;
const rmdirRec = require('syracuse-patch/lib/patchtools').rmdirRec;
const xmlHelper = require('syracuse-xml/lib/helpers');
const certtools = require('@sage/syracuse-lib/src/load-balancer/certTools');
const jsx509 = require('jsx509');

let tracer; // = console.error;


import { assert } from 'chai';
const ok = assert.ok;
const strictEqual = assert.strictEqual;

describe(module.id, () => {

    let fs = require('streamline-fs'),
    fsp = require('path'),
    util = require('util');
    
    let directory = fsp.join(__dirname, '../../../../certificatetest/');
    let db; // Initialised when we set up the environment

    
    let certificates = [{
        name: 'server',
        passphrase: 'server'
    }];

    //force basic auth
    config.session = config.session || {};
    config.session.auth = "basic";
    //no integration server
    config.integrationServer = null;
    
    var ckeckDiagnoses = function(obj) {
        //tracer && tracer(util.inspect(obj));

        if (obj && obj.$diagnoses) {
            for (var i in obj.$diagnoses) {
                if (obj.$diagnoses[i] != null) {
                    if (obj.$diagnoses[i].$severity === "error") {
                        throw new Error(obj.$diagnoses[i].$severity + ": " + util.inspect(obj.$diagnoses[i].$message));
                    } else {
                        tracer && tracer(obj.$diagnoses[i].$severity + ": " + util.inspect(obj.$diagnoses[i].$message));
                    }
                }
            }
        }
        if (obj && obj.$properties) {
            Object.keys(obj.$properties).forEach(function(elt) {
                if (obj.$properties[elt] && obj.$properties[elt].$diagnoses != null && obj.$properties[elt].$diagnoses.length !== 0) {
                    obj.$properties[elt].$diagnoses.forEach(function(diag) {
                        if (diag.$severity === "error") {
                            throw new Error(diag.$severity + " in element: " + elt + " : " + diag.$message);
                        } else {
                            tracer && tracer(diag.$severity + " in element: " + elt + " : " + diag.$message);
                        }
                    });
                }
            });
        }
        if (obj && obj.$actions) {
            Object.keys(obj.$actions).forEach(function(elt) {
                if (obj.$actions[elt] && obj.$actions[elt].$diagnoses != null && obj.$actions[elt].$diagnoses.length !== 0) {
                    obj.$actions[elt].$diagnoses.forEach(function(diag) {
                        if (diag.$severity === "error") {
                            throw new Error(diag.$severity + " in element: " + elt + " : " + diag.$message);
                        } else {
                            tracer && tracer(diag.$severity + " in element: " + elt + " : " + diag.$message);
                        }
                    });
                }
            });
        }

    };
    
    let jsx509Dir = fsp.dirname(require.resolve('jsx509'));

    let createCertificateInstance = function(_, name, passphrase) {
        //let db = adminHelper.getCollaborationOrm(_);
        let model = db.model;
        let entity = model.getEntity(_, "certificate");

        let certInst = entity.createInstance(_, db, null);
        certInst.name(_, name + "_test");
        certInst.internal(_, false);
        certInst.keyExists(_, true);
        certInst.pass(_, passphrase);

        let caString = fs.readFileSync(fsp.join(jsx509Dir, "test/server/fixtures/" + name + ".crt"), "utf8");
        let caBuf = new Buffer(caString);
        let caStore = certInst.certificate(_);
        let stream = caStore.createWritableStream(_, {
            length: caBuf.length
        });
        stream.write(_, caBuf.toString(), "binary");
        stream.write(_, null);
        caStore.close(_);

        let keyString = fs.readFileSync(fsp.join(jsx509Dir, "test/server/fixtures/" + name + ".key"), "utf8");
        let keyBuf = new Buffer(keyString);
        let keyStore = certInst.key(_);
        let stream2 = keyStore.createWritableStream(_, {
            length: keyBuf.length
        });
        stream2.write(_, keyBuf.toString(), "binary");
        stream2.write(_, null);
        keyStore.close(_);

        let res = certInst.save(_);
        ckeckDiagnoses(res);
        return certInst;
    };
    
    it('initialise environment', function(_) {
        let config = {
            application: "syracuse",
            contract: "collaboration",
            dataset: "unit_test"
        };
        adminHelper.setup(config);
        //
        db = testAdmin.initializeTestEnvironnement(_);
        //
        globals.context.session = {
            id: helpers.uuid.generate(),
            getUserLogin: function(_) {
                return "guest";
            },
            getUserProfile: function(_) {
                return {
                    user: function(_) {
                        // getting the administration ORM
                        //let db = adminHelper.getCollaborationOrm(_);
                        return db.fetchInstance(_, db.model.getEntity(_, "user"), {
                            jsonWhere: {
                                login: "guest"
                            }
                        });
                    },
                    getDefaultX3Endpoints: function(_) {
                        return [];
                    }
                };
            },
            getSecurityProfile: function(_) {
                return null;
            },
            getData: function(code) {
                return null;
            }
        };
        ok(db != null, "Environment initialized");

    });
    
    it('check certificate existence', function(_) {
    	var ex = xmlHelper.certificateExists(_, certificates[0].name + "_test")
    	strictEqual(ex, "", "No certificate yet");
    });

    it('check nodelocal config', function(_) {
        let options = {
            certdir: directory
        };
        try {
            config.collaboration.certdir = directory;
            fs.mkdirSync(directory);
        } catch (e) {
            tracer && tracer(e);
        }
        strictEqual(options.certdir && fs.existsSync(options.certdir), true, "Certificate directory exists.");

    });

    it('create certificates instances', function(_) {
        for (let i in certificates) {
            let cert = createCertificateInstance(_, certificates[i].name, certificates[i].passphrase);
            strictEqual(cert.name(_), certificates[i].name + "_test", "'" + certificates[i].name + "_test' certificate instance created");
        }        
    });

    it('check certificate existence 2', function(_) {
    	var ex = xmlHelper.certificateExists(_, certificates[0].name + "_test", true)
    	strictEqual(JSON.stringify(ex), JSON.stringify({"notAfter":"2014-05-13T06:47:16.000Z"}), "Certificate exists");
    });
    


    
    /*
    it('sign and verify xml', function(_) {
        
        for (let i in certificates) {
            let certName = certificates[i].name + '_test';
            let input = fs.readFile(__dirname + '/data/input.xml', 'utf8', _);
            
            let signedXml = xmlHelper.sign(_, input, null, certName, {
                algorithm: 'RSA-SHA256',
                includeKeyInfo: true
            });
            console.log("signedXmlcc:",signedXml);

            let verif = xmlHelper.verify(_, signedXml, certName);
            strictEqual(verif.length, 0, "Signature validated");

                
        }
    }); */
    
	it('verify Facturae example', function(_) {
	        //let db = adminHelper.getCollaborationOrm(_);
        let model = db.model;
        let entity = model.getEntity(_, "certificate");

        let certInst = entity.createInstance(_, db, null);
        certInst.name(_, "cuevas");
        certInst.internal(_, false);
        certInst.keyExists(_, false);

        let caString = fs.readFileSync(fsp.join(__dirname, 'data/facturae2.crt'), "utf8");
        let caBuf = new Buffer(caString);
        let caStore = certInst.certificate(_);
        let stream = caStore.createWritableStream(_, {
            length: caBuf.length
        });
        stream.write(_, caBuf.toString(), "binary");
        stream.write(_, null);
        caStore.close(_);

        let res = certInst.save(_);
        ckeckDiagnoses(res);
        
        let certName = "cuevas";
        let input = fs.readFile(__dirname + '/data/FAC-C10015-000001.xml', 'binary', _);
            
        let verif = xmlHelper.verify(_, input, certName, {addSignatureCanonicalization: true});
        // this XML file must be correct
        strictEqual(verif.length, 0, "Correctly verified");
        
                
	});    

	it('verify test example', function(_) {
        let model = db.model;
        let entity = model.getEntity(_, "certificate");

        let certInst = entity.createInstance(_, db, null);
        certInst.name(_, "testsig_test");
        certInst.internal(_, false);
        certInst.keyExists(_, true);

        let caString = fs.readFileSync(fsp.join(__dirname, 'data/testsig.crt'), "utf8");
        let caBuf = new Buffer(caString);
        let caStore = certInst.certificate(_);
        let stream = caStore.createWritableStream(_, {
            length: caBuf.length
        });
        stream.write(_, caBuf.toString(), "binary");
        stream.write(_, null);
        caStore.close(_);

        let keyString = fs.readFileSync(fsp.join(__dirname, 'data/testsig.key'), "utf8");
        let keyBuf = new Buffer(keyString);
        let keyStore = certInst.key(_);
        let stream2 = keyStore.createWritableStream(_, {
            length: keyBuf.length
        });
        stream2.write(_, keyBuf.toString(), "binary");
        stream2.write(_, null);
        keyStore.close(_);

        let res = certInst.save(_);
        ckeckDiagnoses(res);




        
        let certName = "testsig_test";

        let input = fs.readFile(__dirname + '/data/testunsig.xml', 'binary', _);
        // signing
        let signedXml = xmlHelper.sign(_, input, null, certName, {
            algorithm: 'RSA-SHA1',
            includeKeyInfo: true
        });
	
        let verif = xmlHelper.verify(_, signedXml, certName);
        strictEqual(verif.length, 0, "Signature validated");

        var tmpfile = __dirname + '/data/testtemp.xml';
        try {
        fs.unlink(tmpfile, _)
        } catch (e) {
        	console.log(e+" ", e.code)
        	if (e.code !== "ENOENT") throw e;
        }
        // signing
        xmlHelper.signfile(_, __dirname + '/data/testunsig.xml', tmpfile, null, certName, JSON.stringify({
            algorithm: 'RSA-SHA1',
            includeKeyInfo: true
        }));
	
        verif = xmlHelper.verifyfile(_, tmpfile, certName);
        strictEqual(verif.length, 0, "Signature validated (file)");
        try {
            fs.unlink(tmpfile, _)
            } catch (e) {
            	console.log(e+" ", e.code)
            	if (e.code !== "ENOENT") throw e;
            }
        
        
        input = fs.readFile(__dirname + '/data/testunsig.xml', 'binary', _);
        // signing
        signedXml = xmlHelper.sign(_, input, null, certName, {
            algorithm: 'RSA-SHA1',
            includeKeyInfo: true,
            xades:{ identifier: "XYZ", document: "ABCDE", claimedRoles: ["A","B","C"], certifiedRoles: "D"}
        });
        console.log("signedXml2:",signedXml);
	
        verif = xmlHelper.verify(_, signedXml, certName);

        
        
        
        
        strictEqual(verif.length, 0, "Signature validated");
        


        input = fs.readFile(__dirname + '/data/testsig.xml', 'binary', _);


            
        verif = xmlHelper.verify(_, input, certName);
        strictEqual(verif.length, 0, "Signature validated");
                
	});    
  
    it('clean up', function(_) {
        rmdirRec(directory, _);
        ok(true);
    });

	
	
	
});	