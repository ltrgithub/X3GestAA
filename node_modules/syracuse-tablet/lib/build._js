"use strict";

var fs = require('streamline-fs');
var depend = require("streamline-require/lib/server/depend");
var path = require('path');

var streamlineConfig = {
	"fibers": false,
	"fast": false,
	"cache": false,
	"verbose": false
};

var root = path.join(__dirname, "../..").replace(/\\/g, "/");

function _exists(_, fname) {
	return fs.exists(fname, _);
}

function _readFile(_, dep) {
	var modIndex = dep.indexOf("/node_modules/");
	return {
		location: modIndex >= 0 ? dep.substring(modIndex + 14) : dep.substring(root.length),
		contentType: "application/javascript",
		data: require("streamline").transformFile(_, dep, streamlineConfig).code,
	};
}

function _compile(_, source, dest) {
	var compiled = "";
	try {
		source = root + source;
		dest = root + dest;
		var stats = fs.stat(source + (_exists(_, source + "._js") ? "._js" : ".js"), _);
		if (!stats.isFile()) {
			throw new Error("File not found " + source);
		}

		var missing = depend.missingDependencies(_, source, [], streamlineConfig);

		var boundary = "NEXT_FILE_START";
		var endMarker = "\n--" + boundary + "--\n";

		var i = 0;
		missing.forEach_(_, function(_, dep) {
			var part = _readFile(_, dep);
			console.log(part.location);
			compiled = compiled + "\n--" + boundary + "\n" + "Content-ID: FILE " + ++i + "\n" + "Content-Location: " + part.location + "\n" + "Content-Type: " + part.contentType + "\n\n" + part.data + "\n";
		});
		compiled = compiled + endMarker;

		fs.writeFile(dest, compiled, _);
	} catch (ex) {
		console.error(ex.message + "\n" + ex.stack);
	}
}

_compile(_, "/syracuse-tablet/html/js/main", "/syracuse-tablet/html/js/main.jspack");
_compile(_, "/syracuse-tablet/test/js/main", "/syracuse-tablet/test/js/main.jspack");