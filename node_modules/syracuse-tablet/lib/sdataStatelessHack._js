"use strict";

/*
 *
 * This dispatcher maps client requests <-> x3 responses in terms of converting stateful data
 * structures to stateless ones needed by the tablet client.
 *
 * https://github.com/Sage-ERP-X3/platform/wiki/Stateless-mode-draft-for-tablet-client
 *
 */

var x3pool = require("syracuse-x3/lib/pool");
var tracer = console.log;

function InterceptResponse() {
	this.data = "";
	this.status = 0;
	this.head = null;
};

InterceptResponse.prototype = {
	writeHead: function(status, head) {
		this.head = head;
		this.status = status;
		if (this.batchResponse) this.batchResponse.$httpStatus = this.status;
	},
	write: function(_, data) {
		this.data += data;
	},
	end: function() {}
};

exports.walk = function(_, context, name, id) {

};
exports.prototypes = function(_, context, name, id) {
	var savedResponse = context.response;

	if (context.method.toLowerCase() !== "get") {
		throw new Error("Only GET allowed for prototype request");
	}

	var repr = /\$prototypes\('(.*?)\.(.*?)'\)/.exec(context.request.url);
	var facet = repr && repr[2];
	var x3Facet;
	repr = repr && repr[1];
	if (!repr) {
		throw new Error("Cannot locate representation");
	}
	if (!facet) {
		throw new Error("Cannot locate facet");
	}

	if (facet === "$create") {
		x3Facet = "$edit";
		context.url = context.url.replace("('" + repr + "." + facet + "')", "('" + repr + "." + x3Facet + "')");
		context.request.url = context.request.url.replace("('" + repr + "." + facet + "')", "('" + repr + "." + x3Facet + "')");
	}
	var intercept = new InterceptResponse();
	context.response = intercept;
	x3pool.send(_, context);

	context.response = savedResponse;

	var proto = JSON.parse(intercept.data);
	proto = exports.transformProto(proto, repr, facet, x3Facet);

	context.reply(_, intercept.status, proto);
};
exports.workingCopies = function(_, context, name, id) {
	x3pool.send(_, context);
};
exports.service = function(_, context, name, id) {
	x3pool.send(_, context);
};

exports.transformProto = function(proto, repr, newFacet, oldFacet) {
	tracer && tracer("Transforming proto: " + repr + " " + newFacet + "->" + oldFacet);
	if (oldFacet && newFacet) {
		if (proto.$url) {
			proto.$url = proto.$url.replace("." + oldFacet, "." + newFacet);
		}
		if (proto.$type) {
			proto.$type = proto.$type.replace("." + oldFacet, "." + newFacet);
		}
	}

	_transformLinks(proto, newFacet);
	_transformActions(proto, newFacet);
	return proto;
};

function _transformLinks(proto, facet) {
	var links = proto.$links;
	if (links) {
		Object.keys(links).forEach(function(key) {
			var link = links[key];
			link.$method = "GET";

			if (link.$url.indexOf("/$workingCopies?") > -1) { // create or update
				if (link.$url.indexOf("/$template/") > -1) { // create
					// switch facet in case of create
					link.$url = link.$url.replace("/$workingCopies?", "?").replace(".$edit", ".$create");
				}
				// switch to stateless
				link.$url = link.$url.replace("/$workingCopies?", "?");
			}
		});
	}
	if (proto.$properties) {
		Object.keys(proto.$properties).forEach(function(prop) {
			var p = proto.$properties[prop];
			if (p.$item) {
				_transformLinks(p.$item);
			}
		});
	}
}

function _transformActions(proto, facet) {
	var actions = proto.$actions;
	if (actions) {
		var links = proto.$links = proto.$links || {};

		Object.keys(actions).forEach(function(key) {
			var action = actions[key];
			var link;
			switch (key) {
				case "$save":
					var url;
					var method;
					if (facet === "$create") {
						method = "POST";
						url = "{$baseUrl}/" + proto.$representation;
					} else {
						method = "PUT";
						url = "{$baseUrl}/" + proto.$representation + "('{$key}')";
					}
					link = {
						$title: action.$title,
						$isHidden: action.$isHidden,
						$isDisabled: action.$isDisabled,
						$isAction: true,
						$url: url,
						$method: method
					};
					break;
				case "$abort":
					// do not send $abort at all in stateless mode since there is nothing to abort
					break;
				default:
					link = {
						$title: action.$title,
						$isHidden: action.$isHidden,
						$isDisabled: action.$isDisabled,
						$isAction: true,
						$url: "{$baseUrl}/" + proto.$representation + "('{$key}')/$service/" + key,
						$method: "PUT"
					};
					break;
			}

			if (link) {
				links[key] = link;
			}
		});

		delete proto["$actions"];
	}
	if (proto.$properties) {
		Object.keys(proto.$properties).forEach(function(prop) {
			var p = proto.$properties[prop];
			if (p.$item) {
				_transformLinks(p.$item);
			}
		});
	}
}