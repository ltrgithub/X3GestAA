"use strict";

// / !doc
// /
// / # Server-side requirejs handler
// /
// / Handles requireJS requests coming from the tablet client and transforms
// commonJS modules to AMD modules by wrapping them with a define
// /
var fs = require('streamline-fs');
var path = require('path');
var util = require('util');
var uurl = require('url');
var querystring = require('querystring');
var sessionManager = require('syracuse-session/lib/sessionManager').sessionManager;
var streams = require('streamline/lib/streams/streams');
var globals = require('streamline/lib/globals');
var helpers = require('syracuse-core/lib/helpers');


function _getSessionCookieName(request) {
	return helpers.http.checkIfIE(request.headers['user-agent']) ? "client.id" : "syracuse.sid" + "." + request.connection.localPort;
}

function _parseCookie(request) {
	console.log("cookiesStr", request.headers.cookie);
	var cookie = helpers.http.parseCookie(request.headers.cookie);
	console.log("cookies", JSON.stringify(cookie, null, 2));
	return cookie;
}

function _getSessionCookie(request) {
	var cookieName = _getSessionCookieName(request);
	var cookie = _parseCookie(request)[cookieName];
	return cookie ? cookieName + "=" + cookie : null;
}

function _secureCookie(secure, value) {
	var prefix = (value[value.length - 1] === ";") ? "" : ";";
	if (secure) value += prefix + 'Secure;';
	value += prefix + 'HttpOnly;';
	return value;
}
/**
 * Temporary reconnect process
 * Win 10 - US 110849-10 - Fast application resume
 * Allows reconnection without login if browser is closed and Syracuse session is still alive
 */
function _processReconnectSvc(_, service, action, request, response) {
	var log = console.log;
	if (service !== "reconnect") return false;
	service = service + action;
	if (action === "getToken") {
		log && log("");
		log && log(service);
		log && log(_parseCookie(request));

		// Return a token (syra cookie)
		// This token can be stored (by the native wrapper) and sent when mobile application is launched to try to avoid login
		var syraCookie = _getSessionCookie(request);
		if (syraCookie) {
			log && log(service, "syraCookie", syraCookie);
			var headers = {
				'x-reconnect-token': syraCookie
			};
			//			var cookies = _parseCookie(request);
			//			if (cookies){
			//				headers['set-cookie'] = [];
			//				for (var p in cookies){
			//					headers['set-cookie'].push(p + "=" + cookies[p])
			//				}
			//			}
			response.writeHead(200, headers);
		} else {
			response.writeHead(404, {});
		}
		return true;
	}
	if (action === "setToken") {
		log && log("");
		log && log(service);
		// Process the reconnect token
		// If no session cookie is found in headers and reconnect token provided -> Set the session cookie given by reconnect token
		// The mobile client will read the profile after having called reconnectSetToken
		// If the cookie has expired or session is destroyed user will be forced to login (regular process)
		// If not no login is needed
		var cookies = _parseCookie(request);
		var syraCookie = cookies[_getSessionCookieName(request)];
		var reconnectToken = request.headers['x-reconnect-token'];
		log && log(service, "reconnectToken", reconnectToken);
		var headers = {};
		if (!syraCookie) {
			log && log(service, "Session id not provided");
			if (reconnectToken) {
				reconnectToken = reconnectToken.split('=');
				if (reconnectToken.length == 2) {
					var secure = (request.hosting && request.hosting.https) || ('authorized' in request.connection);
					var syraCookie = _secureCookie(secure, reconnectToken[1] + '; path=/');
					log && log("syraCookie", syraCookie);
					cookies[_getSessionCookieName(request)] = syraCookie;
				}
			}
		} else {
			log && log(service, "Session id provided");
		}
		if (cookies) {
			headers['set-cookie'] = [];
			for (var p in cookies) {
				headers['set-cookie'].push(p + "=" + cookies[p]);
			}
		}
		log && log(service, "headers", JSON.stringify(headers, null, 2));
		response.writeHead(200, headers);
		return true;
	}
	return false;
}
exports.dispatcher = function(config) {
	var root = path.join(__dirname, "../../../node_modules/");
	return function(_, request, response) {
		var url = uurl.parse(request.url);
		var segs = url.pathname.split("/");
		var service = segs.length > 1 ? segs[2] : null;
		if (!_processReconnectSvc(_, service, url.query, request, response)) {
			var file = path.join(root, segs.slice(2).join("/"));
			if (!fs.exists(file, _)) {
				response.writeHead(404, {});
			} else {
				response.writeHead(200, {
					'content-type': 'application/javascript'
				});
				var content = fs.readFile(file, 'utf8', _);
				if (segs.indexOf("deps") < 0) { // do not pack dependencies in
					// an AMD format (jQuery e.g.
					// would not work)
					content = "define(function(require, exports, module) {\n" + content + "\n});";
				}
				response.write(_, content);
			}
		}
		response.end();
	};
};