"use strict";

// / !doc
// /
// / # Server-side requirejs handler
// /
// / Handles requireJS requests coming from the tablet client and transforms
// commonJS modules to AMD modules by wrapping them with a define
// /
var fs = require('streamline-fs');
var path = require('path');
var util = require('util');
var uurl = require('url');
var querystring = require('querystring');
var sessionManager = require('syracuse-session/lib/sessionManager').sessionManager;
var streams = require('streamline-streams');
var globals = require('streamline-runtime').globals;
var helpers = require('syracuse-core/lib/helpers');


function _getLoginCookieName(request) {
	return "syracuse.sid.login." + request.connection.localPort;
}

function _parseCookie(request) {
	return helpers.http.parseCookie(request.headers.cookie);
}

function _getLoginCookie(request) {
	var cookieName = _getLoginCookieName(request);
	var cookie = _parseCookie(request)[cookieName];
	return cookie ? cookieName + "=" + cookie : null;
}

function _secureCookie(request, value) {
	var secure = (request.hosting && request.hosting.https) || ('authorized' in request.connection);
	var prefix = (value[value.length - 1] === ";") ? "" : ";";
	if (secure) value += prefix + 'Secure;';
	value += prefix + 'HttpOnly;';
	return value;
}
/**
 * Reconnect process
 * Win 10 - US 110849-10 - Fast application resume
 * Allows reconnection without login if browser is closed and Syracuse session is still alive
 * Access (Read/Write) to session cookies is not allowed on Browser it's why mobile client used these services (getToken/setToken)
 */
function _processReconnectSvc(_, service, action, request, response) {
	var log = null; //  console.log;
	if (service !== "reconnect") return false;
	service = service + action;
	log && log("");
	log && log(service);
	var cookies = _parseCookie(request);
	log && log("cookies", JSON.stringify(cookies, null, 2));
	var loginCookieName = _getLoginCookieName(request);
	log && log("loginCookieName", loginCookieName);
	var loginCookie = cookies[loginCookieName];
	log && log("loginCookie", loginCookie);
	if (action === "getToken") {
		// Return a token (login cookie syracuse.sid.login.8124)
		// This token is stored (by the native wrapper) and sent when mobile application is launched to try to avoid login
		if (loginCookie) {
			var headers = {
				'x-reconnect-token': loginCookie
			};
			response.writeHead(200, headers);
		} else {
			response.writeHead(404, {});
		}
		log && log("headers", JSON.stringify(headers, null, 2));
		return true;
	}
	if (action === "setToken") {
		// Process the reconnect token
		// If no login cookie is found in headers and reconnect is a token is provided 
		//	-> Set the login cookie (syracuse.sid.login.8124) given by reconnect token
		// The mobile client will read the profile after having called reconnectSetToken
		// If the login cookie has expired or session is destroyed user will be forced to login (regular process)
		// If not no login is needed
		var headers = {};
		if (!loginCookie) {
			log && log("Login cookie is not provided");
			var reconnectToken = request.headers['x-reconnect-token'];
			log && log("reconnectToken", reconnectToken);
			if (reconnectToken) {
				headers['set-cookie'] = loginCookieName + "=" + _secureCookie(request, reconnectToken + '; path=/');
			}
		} else {
			log && log("Login cookie is provided");
		}
		log && log("headers", JSON.stringify(headers, null, 2));
		response.writeHead(200, headers);
		return true;
	}
	if (action === "disconnect") {
		var cookies = [];
		["syracuse.sid.", "client.id.", "user.profile."].forEach(function(cookie) {
			var expires = new Date();
			expires.setTime(0);
			cookies.push(_secureCookie(request, cookie + request.connection.localPort + "=xx; expires=" + expires.toUTCString() + ";  path=/;"));
		});
		var headers = {};
		headers["set-cookie"] = cookies;
		log && log("headers", JSON.stringify(headers, null, 2));
		response.writeHead(200, headers);
		return true;
	}
	return false;
}
/**
 * These dispatcher doesn't need an authentication to be called by the client
 * It's why we put the reconnect services here
 */
exports.dispatcher = function(config) {
	var root = path.join(__dirname, "../../../node_modules/");
	return function(_, request, response) {
		var url = uurl.parse(request.url);
		var segs = url.pathname.split("/");
		var service = segs.length > 1 ? segs[2] : null;
		if (!_processReconnectSvc(_, service, url.query, request, response)) {
			var file = path.join(root, segs.slice(2).join("/"));
			if (!fs.exists(file, _)) {
				response.writeHead(404, {});
			} else {
				response.writeHead(200, {
					'content-type': 'application/javascript'
				});
				var content = fs.readFile(file, 'utf8', _);
				if (segs.indexOf("deps") < 0) { // do not pack dependencies in
					// an AMD format (jQuery e.g.
					// would not work)
					content = "define(function(require, exports, module) {\n" + content + "\n});";
				}
				response.write(_, content);
			}
		}
		response.end();
	};
};