"use strict";

/// !doc
/// 
/// # Server-side requirejs handler
/// 
/// Handles requireJS requests coming from the tablet client and transforms commonJS modules to AMD modules by wrapping them with a define
/// 
var fs = require('streamline-fs');
var path = require('path');
var util = require('util');
var uurl = require('url');
var querystring = require('querystring');
var sessionManager = require('syracuse-session/lib/sessionManager').sessionManager;
var streams = require('streamline/lib/streams/streams');
var globals = require('streamline/lib/globals');

/*
 * Implements 2 services  - tabletCheckLogin - tabletDoLogin used by tablet applications
 * Temporarily services while waiting for more genral services
 */
var _log = null;
var _loginSvc = function(_, service, url, request, response) {
	// Full url sent by client - we need same host/port as the one used by client - Cookies are host/port dependent
	var query = querystring.parse(url.query);
	if (query && query.checkurl) {
		url = query.checkurl;
	} else {
		throw new Error("Unexpected empty checkurl parameter");
	}
	var check = service === "tabletCheckLogin";
	_log && _log("_checkAuth - " + service + "\t" + url);
	var headers = {};
	for (var p in request.headers) {
		headers[p] = request.headers[p];
	}
	headers.accept = "application/json;vnd.sage=syracuse";
	headers["X-Requested-With"] = "XMLHttpRequest";
	// We need no-encoding (no gzip) data otherwise we get an error on client side
	headers["Accept-Encoding"] = "";
	var params = {
		method: "get",
		url: url,
		headers: headers
	};
	if (!check) {
		_log && _log("User : '" + query.user + "'");
		params.user = query.user;
		params.password = query.password;
	}
	_log && _log("Headers sent");
	_log && _log(util.inspect(params.headers));
	var testResponse = new streams.httpRequest(params).end().response(_);
	_log && _log("\tRESPONSE - Status : " + testResponse.statusCode);
	_log && _log("Headers received");
	_log && _log(util.inspect(testResponse.headers));
	response.writeHead(testResponse.statusCode === 401 ? 403 : 200, testResponse.headers);
	var content = testResponse.readAll(_);
	_log && _log("Content");
	_log && _log(util.inspect(content));
	response.write(_, check ? "" : content);
};

exports.dispatcher = function(config) {
	var root = path.join(__dirname, "../../../node_modules/");
	return function(_, request, response) {
		var url = uurl.parse(request.url);
		var segs = url.pathname.split("/");
		var service = segs.length > 1 ? segs[2] : null;
		if (service && (service === "tabletCheckLogin" || service === "tabletDoLogin")) {
			_loginSvc(_, service, url, request, response);
		} else {
			var file = path.join(root, segs.slice(2).join("/"));
			if (!fs.exists(file, _)) {
				response.writeHead(404, {});
			} else {
				response.writeHead(200, {
					'content-type': 'application/javascript'
				});
				var content = fs.readFile(file, 'utf8', _);
				if (segs.indexOf("deps") < 0) { // do not pack dependencies in an AMD format (jQuery e.g. would not work)
					content = "define(function(require, exports, module) {\n" + content + "\n});";
				}
				response.write(_, content);
			}
		}
		response.end();
	};
};