"use strict";

var adminHelper = require('@sage/syracuse-lib/src/collaboration/helpers').AdminHelper;
var globals = require('streamline-runtime').globals;

// Testcase: /syracuse-collaboration/test/server/mobileApplicationTest._js

exports.entity = {
	$valueTemplate: "{title}",
	$allowFactory: true,
	$factoryExcludes: ["description", "title", "vignettes"],
	$properties: {
		dashboardName: {
			$linksToDetails: true,
			$title: "Dashboard name",
			$isMandatory: true,
			$isUnique: true
		},
		title: {
			$title: "Title",
			$linksToDetails: true,
			$isLocalized: true,
			$isMandatory: true
		},
		description: {
			$title: "Description",
			$isLocalized: true,
			$isMandatory: true
		}
	},
	$relations: {
		vignettes: {
			$type: "mobileDashboardVignettes",
			$title: "Gadgets",
			$isChild: true
		},
	},
	$searchIndex: {
		$fields: ["title", "description", "dashboardName"]
	},
	$functions: {

		/*
		 * Add gadget detail information to json result so the client does not have to request them separately
		 */
		$serialize: function(_) {
			var self = this;
			var db = adminHelper.getCollaborationOrm(_);
			var gadgetEntity = db.getEntity(_, "mobileGadget");

			var result = self._internalSerialize(_);
			result.$mobileGadgets = {};

			self.vignettes(_).toArray(_).forEach_(_, function(_, vignette) {
				var $gadgetUuid = vignette.gadget(_).$uuid;

				var gadget = db.fetchInstance(_, gadgetEntity, $gadgetUuid);
				var gadgetData = _getGadgetData(_, gadget);
				result.$mobileGadgets[$gadgetUuid] = gadgetData;
			});

			var page = _getDashboardPage(_, self);
			if (page) {
				result.$page = {
					$article: page.$article,
					$views: page.$views
				};
			}
			return result;
		}
	}
};

function _getGadgetData(_, gadget) {
	var gt = gadget.gadgetType(_);
	var data = {
		$type: gt,
		$title: gadget.title(_),
		$description: gadget.description(_),
		icon: gadget.icon(_)
	};

	data["parameters"] = {};
	gadget.parameters(_).toArray(_).forEach_(_, function(_, p) {
		data["parameters"][p.name(_)] = {
			"title": p.title(_),
			"value": p.value(_)
		};
	});

	var endpoint;
	if (gadget.endpoint(_)) {
		endpoint = _getEndpointName(_, gadget.endpoint(_));
		data["endpoint"] = endpoint;
	}

	// dashboard
	data["dashboardName"] = gadget.mobileDashboard(_);

	// representation
	var representation = gadget.representation(_);
	if (representation) {
		var action = gadget.action(_);
		var entity = gadget.entity(_);
		var facet = action;
		var keyParameter = gadget.keyParameter(_);
		data["entity"] = entity;
		data["action"] = action;
		data["representation"] = representation;
		data["facet"] = facet;
		data["keyParameter"] = keyParameter;
	}

	// process
	data["processName"] = gadget.processName(_);
	data["processLeg"] = gadget.processLeg(_);
	data["processMenu"] = gadget.processMenu(_);

	// request
	var requestName = gadget.requestName(_);
	if (requestName) {
		var requestLevel = gadget.requestLevel(_);
		var representation = "QUERY~" + requestName + (requestLevel ? "~" + requestLevel : "");
		var facet = "$query";
		data["requestName"] = requestName;
		data["requestLevel"] = requestLevel;
		data["action"] = "$query";
		data["representation"] = representation;
		data["facet"] = facet;
	}

	// stats
	var statsName = gadget.statName(_);
	if (statsName) {
		var representation = "STATS~" + statsName;
		var facet = "$cube";
		data["statName"] = statsName;
		data["action"] = "$query";
		data["representation"] = representation;
		data["facet"] = facet;
	}

	// external
	data["externalUrl"] = gadget.externalUrl(_);

	return data;
}

function _getEndpointName(_, endpoint) {
	return endpoint.application(_) + "." + endpoint.contract(_) + "." + endpoint.dataset(_);
}

function _getDashboardPage(_, dashboard) {
	var opts = {
		application: "syracuse",
		contract: "collaboration",
		endpoint: "syracuse",
		representation: dashboard.dashboardName(_),
		facet: "$mobileDashboard",
		device: "mobile",
		protoInPage: false
	};

	var db = adminHelper.getCollaborationOrm(_);
	var pageEntity = db.getEntity(_, "page");

	// Avoid reading the prototype since it need a baseurl to be present
	var sdc = globals.context.sdataContext;
	sdc.parameters = sdc.parameters || {};
	sdc.parameters.fetchPrototype = "false";

	var page = pageEntity.pageContent(_, sdc, opts);
	return page;
}