"use strict";

var _globalPrefix = "welcomeDashboard.";

exports.entity = {
	$titleTemplate: "Mobile welcome page",
	$descriptionTemplate: "Mobile welcome page definition",
	$valueTemplate: "{title}",
	$allowFactory: true,
	$properties: {
		description: {
			$title: "Description",
			$isLocalized: true,
			$isMandatory: true
		},
		/* 
		 * Json string describing the content of the page, titles etc must be in the form @{...} and put into the localization json to be translated
		 * {
		 *      "items": [
		 *      	{
		 *				"title": "{@12345}",
		 *				"items": [
		 *					{
		 *						"title": "{@23456}",
		 *						"size": "...",
		 *						"color": "...",
		 *						"icon": "...",
		 *						"display: "link/full",
		 *
		 *						// additional data see welcomeApplication.js
		 *						// _buildRepresentationGadget and _buildDashboardGadget
		 *						//
		 *					}
		 *				]
		 *      	}
		 *      ],
		 *
		 * 		"$localization": {
		 * 			"en-GB": {
		 * 				"12345": "My tile group",
		 * 				"23456": "My tile"
		 * 			}
		 * 		}
		 */
		content: {
			$isMandatory: true,
			$type: "string",
			$isHidden: true
		},

		/*
		 * Not used yet
		 * Can be linked to a specific client-device id (may be used later to have a page per device and user)
		 * Not clear how to compute a unique client-device id, maybe a cookie or s.th. else can be used
		 *
		 */
		clientId: {
			$isMandatory: false,
			$type: "string",
			$isHidden: true
		},
	},
	$relations: {
		// Can be linked to a user
		user: {
			$title: "User",
			$type: "user",
			$isMandatory: false
		},
		// Can be linked to one or more roles if used as a default welcome page that's deployed a factory defaults
		roles: {
			$type: "roles",
			$title: "Roles",

		},
	},
	$functions: {
		/*
		 * Copy content.$localization to export file localizations
		 */
		$onExportResource: function(_, key, resource, localizations) {
			var self = this;

			if (!key || !localizations) return;

			var content = JSON.parse(self.content(_) || "{}");
			var loc = content.$localization || {};
			Object.keys(loc).forEach(function(lg) {
				var lang = lg.toLowerCase();
				var locLg = localizations[lang] = localizations[lang] || {};
				Object.keys(loc[lg]).forEach(function(kk) {
					locLg[_globalPrefix + key + "." + kk] = loc[lg][kk];
				});
			});
		},

		/*
		 * Inject export file localizations into content.$localization
		 */
		$onImportResource: function(_, resource, proto, localization) {
			var self = this;

			function _setLocalization(lang, importKey, value) {
				var key = importKey.substring(prefix.length);
				instLoc[lang] = instLoc[lang] || {};
				instLoc[lang][key] = value;
			}
			if (!resource || !proto || !localization) return;

			var keys = Array.isArray(proto.$key) ? proto.$key : [proto.$key];
			var key = keys.map(function(kk) {
				return resource[kk];
			}).join(".");

			var content = JSON.parse(self.content(_) || "{}");
			content.$localization = content.$localization || {};
			var instLoc = content.$localization;

			var prefix = _globalPrefix + key + ".";
			Object.keys(localization).forEach(function(lang) {
				Object.keys(localization[lang]).forEach(function(kk) {
					if (kk.indexOf(prefix) === 0) {
						_setLocalization(lang, kk, localization[lang][kk]);
					}
				});
			});
			if (Object.keys(instLoc).length) self.localization(_, JSON.stringify(instLoc));
		}
	},
	$services: {
		availableWelcomeDashboards: {
			$isHidden: true,
			$method: "GET",
			$isMethod: false,
			$title: "Get available welcome dashboard",
			$overridesReply: true,
			$execute: function(_, context) {
				var self = this;
				var $resources = [];

				var wcdb;
				var db = context.db;
				wcdashboard = db.fetchInstances(_, db.getEntity(_, "welcomeDashboard"), {});

				wcdashboard.forEach_(_, function(_, mobileWelcomeDashboard) {
					var dashboard = _getMobileWelcomeDashboardInfo(_, context, mobileWelcomeDashboard);
					$resources.push(dashboard);
				});

				context.reply(_, 200, {
					$resources: $resources
				});
			}
		},
	}
};

function _getMobileWelcomeDashboardInfo(_, context, mobileApplication) {
	return mobileApplication;
};