"use strict";
var sys = require("util");
var globals = require('streamline-runtime').globals;
var locale = require('streamline-locale');

var _globalPrefix = "welcomeDashboard.";

exports.entity = {
	$titleTemplate: "Mobile welcome page",
	$descriptionTemplate: "Mobile welcome page definition",
	$valueTemplate: "{title}",
	$allowFactory: true,
	$properties: {
		description: {
			$title: "Description",
			$isLocalized: true,
			$isMandatory: true
		},
		/* 
		 * Json string describing the content of the page, titles etc must be in the form @{...} and put into the localization json to be translated
		 * {
		 *      "items": [
		 *      	{
		 *				"title": "{@12345}",
		 *				"items": [
		 *					{
		 *						"title": "{@23456}",
		 *						"size": "...",
		 *						"color": "...",
		 *						"icon": "...",
		 *						"display: "link/full",
		 *
		 *						// additional data see welcomeApplication.js
		 *						// _buildRepresentationGadget and _buildDashboardGadget
		 *						//
		 *					}
		 *				]
		 *      	}
		 *      ],
		 *
		 * 		"$localization": {
		 * 			"en-GB": {
		 * 				"12345": "My tile group",
		 * 				"23456": "My tile"
		 * 			}
		 * 		}
		 */
		content: {
			$title: "Content",
			$isMandatory: true,
			$type: "string",
			$isHidden: false,
			$isDisabled: true
		},

		/*
		 * Not used yet
		 * Can be linked to a specific client-device id (may be used later to have a page per device and user)
		 * Not clear how to compute a unique client-device id, maybe a cookie or s.th. else can be used
		 *
		 */
		clientId: {
			$isMandatory: false,
			$type: "string",
			$isHidden: true
		},
	},
	$relations: {
		// Can be linked to a user
		user: {
			$title: "User",
			$type: "user",
			$isMandatory: false,
			$isHidden: false,
			$isDisabled: true
		},
		// The role of the user (If a user have several roles He have one personal dashboard by role)
		role: {
			$type: "role",
			$title: "Role",
			$isMandatory: false,
			$isHidden: false,
			$isDisabled: true
		},
		// Can be linked to one or more roles if used as a default welcome page that's deployed a factory defaults
		roles: {
			$type: "roles",
			$title: "Roles",
			$isHidden: false,
			$isDisabled: true
		},
	},
	$functions: {
		/*
		 * Copy content.$localization to export file localizations
		 */
		$onExportResource: function(_, key, resource, localizations) {
			var self = this;

			if (!key || !localizations) return;

			var content = JSON.parse(self.content(_) || "{}");
			var loc = content.$localization || {};
			Object.keys(loc).forEach(function(lg) {
				var lang = lg.toLowerCase();
				var locLg = localizations[lang] = localizations[lang] || {};
				Object.keys(loc[lg]).forEach(function(kk) {
					locLg[_globalPrefix + key + "." + kk] = loc[lg][kk];
				});
			});
		},

		/*
		 * Inject export file localizations into content.$localization
		 */
		$onImportResource: function(_, resource, proto, localization) {
			var self = this;

			function _setLocalization(lang, importKey, value) {
				var key = importKey.substring(prefix.length);
				instLoc[lang] = instLoc[lang] || {};
				instLoc[lang][key] = value;
			}
			if (!resource || !proto || !localization) return;

			var keys = Array.isArray(proto.$key) ? proto.$key : [proto.$key];
			var key = keys.map(function(kk) {
				return resource[kk];
			}).join(".");

			var content = JSON.parse(self.content(_) || "{}");
			content.$localization = content.$localization || {};
			var instLoc = content.$localization;

			var prefix = _globalPrefix + key + ".";
			Object.keys(localization).forEach(function(lang) {
				Object.keys(localization[lang]).forEach(function(kk) {
					if (kk.indexOf(prefix) === 0) {
						_setLocalization(lang, kk, localization[lang][kk]);
					}
				});
			});
			if (Object.keys(instLoc).length) self.localization(_, JSON.stringify(instLoc));
		}
	},
	$services: {
		availableDashboard: {
			$isHidden: true,
			$method: "GET",
			$isMethod: false,
			$title: "Get available welcome dashboard",
			$overridesReply: true,
			$execute: function(_, context) {
				var selectedDashboard = _getWelcomeDashboard(_, context);
				context.reply(_, 200, {
					$resources: selectedDashboard
				});
			}
		},
		listOfRoles: {
			$isHidden: true,
			$method: "GET",
			$isMethod: false,
			$title: "Get list of roles",
			$overridesReply: true,
			$execute: function(_, context) {
				var roles = [];
				var db = context.db;
				var allRoles = db.fetchInstances(_, db.getEntity(_, "role"), {});
				allRoles.forEach_(_, function(_, role) {
					roles.push({
						"$uuid": role.$uuid,
						"$code": role.code(_),
						"$description": role.description(_),
					});
				});
				context.reply(_, 200, {
					$resources: roles
				});
			}
		},
		deleteDashboard: {
			$isHidden: true,
			$method: "GET",
			$isMethod: false,
			$title: "delete welcome dashboard (template)",
			$overridesReply: true,
			$execute: function(_, context) {
				var diagnoses = [];
				var uuid = context && context.parameters && context.parameters.uuid;
				if (uuid) {
					var db = context.db;
					var wd = db.fetchInstance(_, db.getEntity(_, "welcomeDashboard"), {
						jsonWhere: {
							$uuid: uuid
						}
					});
					if (!wd) {
						diagnoses.push({
							$severity: "error",
							$message: locale.format(module, "template.NotFound")
						})
					} else {
						if (wd.$factoryOwner === _getFactoryOwner(_)) {
							wd.deleteSelf(_);
							diagnoses.push({
								$severity: "info",
								$message: locale.format(module, "template.deleted")
							})
						} else {
							diagnoses.push({
								$severity: "error",
								$message: locale.format(module, "template.NotOwner")
							})
						};
					}
				} else {
					diagnoses.push({
						$severity: "error",
						$message: locale.format(module, "template.delete.inconsistant.data")
					})
				}
				var selectedDashboard = _getWelcomeDashboard(_, context);
				context.reply(_, 200, {
					$diagnoses: diagnoses,
					$resources: selectedDashboard
				})
			}
		},
		updateDashboard: {
			$isHidden: true,
			$method: "POST",
			$isMethod: false,
			$title: "Update welcome dashboard",
			$overridesReply: true,
			$execute: function(_, context) {
				var data = JSON.parse(context.request.readAll(_));
				var error, isPersonal, isGlobal, isFactory;
				var db = context.db;
				var entityWelcomeDashboard = db.getEntity(_, "welcomeDashboard");
				var entityRole = db.getEntity(_, "role");
				var uuid = data.uuid;
				var user = (data.user && data.user.$uuid != "") ? data.user.$uuid : null;
				var role = (data.role && data.role.$uuid != "") ? data.role.$uuid : null;
				var isPersonal = data.isPersonal || false;
				var isGlobal = (!isPersonal && data.roles && data.roles.length > 0 && _isAutorizedGlobal(_)) ? true : false;
				var isFactory = (!isPersonal && !isGlobal && _isAutorizedFactory(_)) ? true : false;
				if (!isPersonal && !isGlobal && !isFactory) {
					error = true;
				}
				if (!error) {
					var wd = isPersonal ? _getPersonalDashboard(_, db.fetchInstances(_, entityWelcomeDashboard, {}), data.user, data.role) : _getGlobalOrFactoryDashboard(_, db, uuid);
					if (wd) {
						//nothing for moment
					} else {
						wd = entityWelcomeDashboard.factory.createInstance(_, null, db);
						wd.$factory = isFactory || isGlobal;
						if (isPersonal) {
							var usr = db.fetchInstance(_, db.getEntity(_, "user"), {
								jsonWhere: {
									$uuid: user
								}
							});
							wd.user(_, usr);
							var rl = db.fetchInstance(_, entityRole, {
								jsonWhere: {
									$uuid: role
								}
							});
							wd.role(_, rl);

						}
					};
					wd.description(_, data.description);
					wd.content(_, JSON.stringify(data.content));
					wd.roles(_).reset(_);
					if (!isPersonal && data.roles) {
						data.roles.forEach_(_, function(_, role) {
							var rl = db.fetchInstance(_, entityRole, {
								jsonWhere: {
									$uuid: role.$uuid
								}
							});
							wd.roles(_).set(_, rl);
						});
					};
					wd.save(_);
					var diags = [];
					if (wd.hasErrors(_)) {
						wd.getAllDiagnoses(_, diags);
						error = true
					}
					var wcdashboards = db.fetchInstances(_, db.getEntity(_, "welcomeDashboard"), {});
					var selectedDashboard = _getRelevantWelcomeDashboard(_, wcdashboards, user, role, wd.$uuid);
					selectedDashboard.$diagnoses = diags;
				}
				context.reply(_, error ? 500 : 200, selectedDashboard);
			}
		}
	}
};
//get dashboard with user and role match
function _getPersonalDashboard(_, dashboards, user, role) {
	if (!dashboards) return null;
	var wdf;
	dashboards.forEach_(_, function(_, wd) {
		if (!wd.user(_)) return;
		if (!wd.role(_)) return;
		if (wd.user(_).$uuid !== user.$uuid) return;
		if (wd.role(_).$uuid !== role.$uuid) return;
		wdf = wd
	});
	return wdf;
};

function _getGlobalOrFactoryDashboard(_, db, uuid) {
	if (!uuid) return null;
	var wd = db.fetchInstance(_, db.getEntity(_, "welcomeDashboard"), {
		jsonWhere: {
			$uuid: uuid
		}
	});
	return wd;
};

function _getWelcomeDashboard(_, context) {
	var dashboard = {};
	var user = context && context.parameters && context.parameters.user;
	var role = context && context.parameters && context.parameters.role;
	var uuid = context && context.parameters && context.parameters.uuid;
	var db = context.db;
	var wcdashboards = db.fetchInstances(_, db.getEntity(_, "welcomeDashboard"), {});
	return _getRelevantWelcomeDashboard(_, wcdashboards, user, role, uuid);
};
//Get the most relevant dashboard (math uuid (score 0)or user and role (score 1) , or just role (score2),  or factory not SAGE (score 3), or factory SAGE (score 4) )
function _getRelevantWelcomeDashboard(_, welcomeDashboards, user, role, uuid) {
	var dashboard, views = [],
		score = -1,
		factoryOwner = _getFactoryOwner(_);
	welcomeDashboards.forEach_(_, function(_, mobileWelcomeDashboard) {
		if (mobileWelcomeDashboard.$uuid === uuid) { // by uuid
			score = 0;
			dashboard = {
				"score": score,
				"dashboard": _getMobileWelcomeDashboardInfo(_, mobileWelcomeDashboard)
			};
		};
		//User/role creator match 
		if (mobileWelcomeDashboard.user(_) && mobileWelcomeDashboard.user(_).$uuid === user && mobileWelcomeDashboard.role(_) && mobileWelcomeDashboard.role(_).$uuid === role) {
			score = 1;
			if (!dashboard || dashboard.score > score) {
				dashboard = {
					"score": score,
					"dashboard": _getMobileWelcomeDashboardInfo(_, mobileWelcomeDashboard)
				};
			}
		} else if (_isRoleMathes(_, mobileWelcomeDashboard, role)) {
			score = 2;
			if (!dashboard || dashboard.score > score) {
				dashboard = {
					"score": score,
					"dashboard": _getMobileWelcomeDashboardInfo(_, mobileWelcomeDashboard)
				};
			}
		} else if (mobileWelcomeDashboard.$factoryOwner && mobileWelcomeDashboard.$factoryOwner != "SAGE" && (mobileWelcomeDashboard.$factoryOwner === factoryOwner || mobileWelcomeDashboard.roles(_).getLength() === 0)) {
			score = 3;
			if (!dashboard || dashboard.score >= score) {
				dashboard = {
					"score": score,
					"dashboard": _getMobileWelcomeDashboardInfo(_, mobileWelcomeDashboard)
				};
			}
		} else if (mobileWelcomeDashboard.$factoryOwner === "SAGE" && (mobileWelcomeDashboard.$factoryOwner === factoryOwner || mobileWelcomeDashboard.roles(_).getLength() === 0)) {
			score = 4;
			if (!dashboard) { //no more than one with a SAGE factoryOwner
				dashboard = {
					"score": score,
					"dashboard": _getMobileWelcomeDashboardInfo(_, mobileWelcomeDashboard)
				};
			}
		};
		if (score > -1) {
			var view = {
				"score": score,
				"view": _getMobileWelcomeDashboardViewInfo(_, mobileWelcomeDashboard, uuid)
			}
			view.view.$isPersonal = (score === 1);
			views.push(view);
		};
		score = -1;
	});
	views.sort_(_, function(_, a, b) {
		return (a.score - b.score);
	});
	if (dashboard) {
		dashboard.dashboard.$views = [];
		views.forEach_(_, function(_, view) {
			view.view.score = view.score
			dashboard.dashboard.$views.push(view.view)
		})
	};
	return dashboard ? dashboard.dashboard : {};
};

function _isAutorizedFactory(_) {
	var sp = globals.context.session && globals.context.session.getSecurityProfile(_);
	return (sp && sp.factoryOwner(_) && sp.factoryOwner(_) != "") ? true : false;
}

function _getFactoryOwner(_) {
	var sp = globals.context.session && globals.context.session.getSecurityProfile(_);
	if (sp && sp.factoryOwner(_) && sp.factoryOwner(_) != "") {
		return sp.factoryOwner(_);
	}
	return null;
}

function _isAutorizedGlobal(_) {
	var sp = globals.context.session && globals.context.session.getSecurityProfile(_);
	return (sp && sp.authoringLevel(_) && sp.authoringLevel(_) != "none" && sp.authoringLevel(_) != "user") ? true : false;
}
//at least one role matches
function _isRoleMathes(_, dashboard, role) {
	var match = dashboard.roles(_).toArray(_).filter_(_, function(_, rl) {
		return rl.$uuid === role;
	});
	return (match.length > 0);
};

function _getMobileWelcomeDashboardViewInfo(_, mobileWelcomeDashboard, uuid) {
	return {
		$uuid: mobileWelcomeDashboard.$uuid,
		$description: mobileWelcomeDashboard.description(_),
		$selected: (mobileWelcomeDashboard.$uuid === uuid),
		$factoryOwner: mobileWelcomeDashboard.$factoryOwner,
	};
};

function _getMobileWelcomeDashboardInfo(_, mobileWelcomeDashboard) {
	var roles = [];
	mobileWelcomeDashboard.roles(_).toArray(_).forEach_(_, function(_, rl) {
		roles.push({
			"code": rl.code(_),
			"description": rl.description(_),
			"$uuid": rl.$uuid
		});
	});
	var userInfo;
	var user = mobileWelcomeDashboard.user(_);
	if (user) {
		userInfo = {
			"$login": user.login(_),
			"$uuid": user.$uuid
		};
	}
	var userRoleInfo;
	var role = mobileWelcomeDashboard.role(_);
	if (role) {
		userRoleInfo = {
			"$code": role.code(_),
			"$description": role.description(_),
			"$uuid": role.$uuid
		};
	};
	return {
		"$factoryOwner": mobileWelcomeDashboard.$factoryOwner,
		"$uuid": mobileWelcomeDashboard.$uuid,
		"content": JSON.parse(mobileWelcomeDashboard.content(_)),
		"description": mobileWelcomeDashboard.description(_),
		"user": userInfo,
		"role": userRoleInfo,
		"roles": roles
	};
};