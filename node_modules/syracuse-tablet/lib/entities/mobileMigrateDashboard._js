"use strict";

var globals = require('streamline-runtime').globals;
var helpers = require('syracuse-core').helpers;
var forEachKey = helpers.object.forEachKey;
var getFactoryOwner = require("syracuse-orm/lib/serializer").getFactoryOwner;
var locale = require('streamline-locale');

var tracer = null; //console.log;

exports.entity = {
	$isPersistent: false,
	$canSave: false,
	$titleTemplate: "Migrate Mobile Dashboard",
	$descriptionTemplate: "Migrate Mobile Dashboard",
	$valueTemplate: "{title}",
	$properties: {
		dashboard: {
			$title: "Dashboard",
			$isMandatory: true,
			$lookup: {
				entity: "dashboardDef",
				field: "dashboardName",
				parameters: "where=(mobile eq true)"
			},
			$propagate: function(_, instance, val) {
				if (val && !instance.applicationName(_)) {
					instance.applicationName(_, val);
				}
			}
		},
		applicationName: {
			$title: "Mobile application name",
			$isMandatory: true,
			$isUnique: true
		},
		/*
		 * This is a simple property because this is a non persistent entity that creates
		 * other entities so it's better to not use $allowFactory here
		 */
		createFactoryVariant: {
			$title: "Create factory variant",
			$type: "boolean",
			$isHidden: function(_, instance) {
				return getFactoryOwner(_) == null;
			}
		}
	},
	$relations: {
		endPoints: {
			$type: "endPoints",
			$title: "Endpoints"
		}
	},
	$services: {
		migrateApplication: {
			$method: "POST",
			$isMethod: true,
			$overridesReply: true,
			$title: "Migrate dashboard",
			$isHidden: false,
			$execute: function(_, context, instance) {
				instance.$diagnoses = [];

				var helpers = {
					dashboards: {},
					diagnoses: instance.$diagnoses,
					instance: instance
				};

				_migrateDashboard(_, context, helpers, instance.dashboard(_), true);
				_writeApplication(_, context, helpers);

				if (instance.$diagnoses.length <= 0 && helpers.$application && helpers.$application.$uuid) {
					instance.$links = {
						"mobileApp": {
							$title: locale.format(module, "linkNewApp"),
							$url: context.baseUrl + "/mobileApplications('" + helpers.$application.$uuid + "')?representation=mobileApplication.$details",
						}
					};
				}

				instance.$diagnoses.push({
					$severity: "info",
					$message: locale.format(module, "done")
				});
				return instance;
			}
		}
	}
};

function _migrateDashboard(_, context, helpers, dashboardName, useAsHome) {
	if (helpers.dashboards[dashboardName]) {
		return;
	}

	var dashboardEntity = context.model.getEntity(_, "dashboardDef");
	var dashboard = context.db.fetchInstance(_, dashboardEntity, {
		jsonWhere: {
			dashboardName: dashboardName
		}
	});
	if (dashboard) {
		var d = {
			dashboardName: dashboardName,
			title: dashboard.title(_),
			description: dashboard.description(_),
			useAsHome: useAsHome,
			items: []
		};

		helpers.dashboards[dashboardName] = d;

		dashboard.variants(_).toArray(_).forEach_(_, function(_, variant) {
			variant.vignettes(_).toArray(_).forEach_(_, function(_, vignette) {
				var portlet = vignette.portlet(_);
				if (portlet && (portlet.type(_) === "$menu")) {
					var items = portlet.items(_).toArray(_);
					items.forEach_(_, function(_, item) {
						if (item.linkType(_) === "$representation") {
							d.items.push({
								code: item.code(_),
								type: "$representation",
								title: item.title(_),
								description: item.description(_),
								icon: item.icon(_),
								entity: item.entity(_),
								representation: item.representation(_),
								facet: item.facet(_),
								params: item.getItemParams(_),
								application: item.application(_),
								reprRef: item.representationRef(_)
							});
						} else if (item.linkType(_) === "$dashboard") {
							var dn = item.dashboard(_);
							if (dn) {
								d.items.push({
									code: item.code(_),
									type: "$dashboard",
									dashboardName: item.dashboard(_)
								});
								_migrateDashboard(_, context, helpers, dn);
							}
						}
					});
				}
			});
		});
	}
}

function _writeApplication(_, context, helpers) {
	var db = context.db;
	Object.keys(helpers.dashboards).forEach_(_, function(_, name) {
		var dashboard = helpers.dashboards[name];
		dashboard.items.forEach_(_, function(_, item) {
			_writeGadget(_, context, helpers, item);
		});

		var entity = db.model.getEntity(_, "mobileDashboard");
		var instance = context.db.fetchInstance(_, entity, {
			jsonWhere: {
				dashboardName: dashboard.dashboardName
			}
		});
		if (instance) {
			instance.vignettes(_).reset(_);
		} else {
			instance = entity.factory.createInstance(_, null, db);
		}
		instance.dashboardName(_, dashboard.dashboardName);
		instance.title(_, dashboard.title);
		instance.description(_, dashboard.description);
		_applyFactorySettings(_, instance, helpers);
		dashboard.items.forEach_(_, function(_, item) {
			var vignette = instance.vignettes(_).add(_);
			vignette.gadget(_, item.$mobileGadget);
		});
		instance.save(_);
		var diags = [];
		instance.getAllDiagnoses(_, diags, {
			addPropName: true,
			addEntityName: true
		});
		diags.forEach_(_, function(_, diag) {
			helpers.diagnoses.push(diag);
		});

		dashboard.$dashboard = instance;

		if (dashboard.useAsHome) {
			entity = db.model.getEntity(_, "mobileApplication");
			instance = context.db.fetchInstance(_, entity, {
				jsonWhere: {
					applicationName: dashboard.dashboardName
				}
			});
			if (!instance) {
				instance = entity.factory.createInstance(_, null, db);
			}
			instance.applicationName(_, dashboard.dashboardName);
			instance.title(_, dashboard.title);
			instance.description(_, dashboard.description);
			instance.homeDashboard(_, dashboard.$dashboard);

			helpers.instance.endPoints(_).toArray(_).forEach_(_, function(_, ep) {
				instance.endPoints(_).reset(_);
				instance.endPoints(_).set(_, ep);
			});
			_applyFactorySettings(_, instance, helpers);
			instance.save(_);
			var diags = [];
			instance.getAllDiagnoses(_, diags, {
				addPropName: true,
				addEntityName: true
			});
			diags.forEach_(_, function(_, diag) {
				helpers.diagnoses.push(diag);
			});
			helpers.$application = instance;
		}
	});
}

function _writeGadget(_, context, helpers, item) {
	var db = context.db;
	var entity = db.model.getEntity(_, "mobileGadget");
	var instance = context.db.fetchInstance(_, entity, {
		jsonWhere: {
			code: item.code
		}
	});

	if (instance) {
		item.$mobileGadget = instance;
		return;
	}

	instance = entity.factory.createInstance(_, null, db);
	instance.code(_, item.code);
	instance.title(_, item.title);
	instance.description(_, item.description);
	instance.gadgetType(_, item.type);
	if (item.type === "$representation") {
		instance.application(_, item.application);
		instance.entity(_, item.entity);
		instance.representation(_, item.representation);
		instance.representationRef(_, item.reprRef);
	} else {
		instance.mobileDashboard(_, item.dashboardName);
	}
	instance.action(_, item.facet);
	_applyFactorySettings(_, instance, helpers);
	instance.save(_);
	var diags = [];
	instance.getAllDiagnoses(_, diags, {
		addPropName: true,
		addEntityName: true
	});
	diags.forEach_(_, function(_, diag) {
		helpers.diagnoses.push(diag);
	});
	item.$mobileGadget = instance;
}

function _applyFactorySettings(_, instance, helpers) {
	instance.$factory = helpers.instance.createFactoryVariant(_);
}