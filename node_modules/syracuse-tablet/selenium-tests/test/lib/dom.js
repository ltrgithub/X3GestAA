"use strict";

var driver = require("./driver");
var UT = require("../ut");

/**
 * Set value of element
 */
exports.setValue = function(selector, value, parent) {
	UT.log("Set value: '" + value + "' for " + JSON.stringify(selector) + (parent == null ? "" : JSON.stringify(parent)));
	return _findElement(selector, parent).then(function(element) {
		return element.getTagName().then(function(tagName) {
			if (tagName === "input") {
				return _setInputValue(element, value);
			} else if (tagName === "select") {
				return _setSelectValue(element, value);
			}
		});
	});
};

function _setInputValue(element, value) {
	return element.sendKeys(value);
}

function _setSelectValue(element, value) {
	UT.log("Select option: " + JSON.stringify(UT.SEL.$$Attr("value", value)));
	// Needed for Edge
	return element.click().then(function() {
		return element.findElement(UT.SEL.$$Attr("value", value));
	})
		.then(function(optionElement) {
			return optionElement.click();
		});
}

exports.getAttr = function(selector, attr, parent) {
	return _findElement(selector, parent).then(function(element) {
		return element.getAttribute(attr);
	});
};

/**
 * Click an element
 */
exports.click = function(selector, parent) {
	UT.log("Click " + JSON.stringify(selector) + (parent == null ? "" : JSON.stringify(parent)));
	return _findElement(selector, parent).then(function(element) {
		return element.click();
	});
};

exports.waitVisible = function(selector, timeout) {
	return exports.waitLocated(selector, timeout)
		.then(function(element) {
			return driver.Browser().wait(
				driver.Until.elementIsVisible(element),
				timeout);
		});
};

exports.waitLocated = function(selector, timeout) {
	timeout = timeout != null ? timeout : 1;
	return driver.Browser().wait(
		driver.Until.elementLocated(selector),
		timeout);
};

/**
 *
 */
function _findElement(selector, parent) {
	var parentStep;
	if (parent) {
		parentStep = driver.Browser().findElement(parent);
	} else {
		parentStep = UT.resolve(driver.Browser());
	}
	return parentStep.then(function(parentElement) {
		return parentElement.findElement(selector);
	});
}