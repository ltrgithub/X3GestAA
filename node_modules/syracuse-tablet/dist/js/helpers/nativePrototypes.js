"use strict";
/* Add methods to native prototypes */
var _nameSpace = "sm";

/* ARRAYS */

/**
 * Same as forEach but with the possibility to break by returning true in the call back
 * some method was added to the ECMA-262 standard in the 5th edition; as such it may not be present in all implementations of the standard
 * */
if (!Array.prototype.some) {
	Array.prototype.some = function(fun /*, thisArg */ ) {
		if (this === undefined || this === null)
			throw new TypeError();

		var t = Object(this);
		var len = t.length >>> 0;
		if (typeof fun !== 'function')
			throw new TypeError();

		var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
		for (var i = 0; i < len; i++) {
			if (i in t && fun.call(thisArg, t[i], i, t))
				return true;
		}

		return false;
	};
}

/**
 * Sequentially loops over an array invoking a callback which must return a promise
 * Returns a promise which is resolved as soon as the last promise of the loop is resolved.
 */
if (!Array.prototype.forEachPromise) {
	Array.prototype.forEachPromise = function(cb, resolve) {
		if (this === undefined || this === null)
			throw new TypeError();

		var deferred = $.Deferred();
		var queue = [];
		this.forEach(function(elem) {
			queue.push(elem);
		});

		var loop = function() {
			var elem = queue.shift();
			if (elem == null) {
				deferred.resolve();
			} else {
				var prom = cb(elem);
				prom.then(function(result) {
					if (resolve) {
						if (resolve(elem, result) === true) {
							deferred.resolve();
							queue = [];
						}
					}
					loop();
				}).fail(function(e) {
					deferred.reject(e);
				});
			}
		};
		loop();
		return deferred.promise();
	};
}

/* STRINGS */
String.prototype[_nameSpace + "EndsWith"] = function(s) {
	if (this.length == 0 || s == null) return false;
	s = s.toString();
	return s.length === 1 ? this.charAt(this.length - 1) === s : this.lastIndexOf(s) === this.length - s.length;
};
String.prototype[_nameSpace + "StartsWith"] = function(s) {
	if (this.length == 0 || s == null || s.length === 0 || this.length < s.length) return false;
	return s.length === 1 ? this.charAt(0) === s.toString() : this.indexOf(s.toString()) === 0;
};
String.prototype[_nameSpace + "Capitalize"] = function() {
	if (this.length === 0) return this;
	return this.charAt(0).toUpperCase() + this.slice(1);
};

/* Allow prototype.name property for IE above 9 */
if (Function.prototype.name === undefined && Object.defineProperty !== undefined) {
	Object.defineProperty(Function.prototype, 'name', {
		get: function() {
			var funcNameRegex = /function\s+([^\s(]+)\s*\(/;
			var results = (funcNameRegex).exec((this).toString());
			var r = (results && results.length > 1) ? results[1] : "";
			return r;
		},
		set: function(value) {}
	});
}