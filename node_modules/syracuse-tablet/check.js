"use strict";
var fs = require('fs');
var util = require("util");
require('npm-shadow')();
var uglify = require('uglify-js');

// Needs npm install jslint
var node_jslint = null; //require('jslint');

var clientGlobals = {
	'$': '',
	'document': '',
	'alert': '',
	'window': '',
	'jQuery': '',
	'external': "",
	'XMLHttpRequest': "",

	'require': '',
	'console': '',
	'module': '',
	'exports': '',
	'Error': '',
	'Array': '',
	'undefined': '',
	'JSON': '',
	'Object': '',
	'Math': '',
	'TypeError': '',
	'RegExp': '',
	'NaN': '',
	'Infinity': "",
	'String': '',
	'Boolean': '',
	'Date': '',
	'Function': '',
	'Number': '',
	'eval': '',
	'isFinite': '',
	'isNaN': '',
	'parseInt': '',
	'parseFloat': '',
	'encodeURIComponent': '',
	'decodeURIComponent': '',
	'openDatabase': '',
	'setTimeout': '',
	'escape': '',
	'xrayquire': '',
	'Handlebars': '',
	'Highcharts': '',
	'navigator': '',
	'define': '',
	'btoa': '',
	'FileReader': '',
	'Hammer': ''
};

var commentRegExp = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg;
var requireRegExp = /\w*\s*(\w*)\s*=\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g;

function checkFile(path, buf) {
	if (path.indexOf('/deps/') > 0) return;
	if (path.indexOf('/build/') > 0) return;
	if (path.indexOf('/native/') > 0 && !path.indexOf('js/helpers/native/') > 0) return;
	if (path.indexOf('/mockup/') > 0) return;
	if (!(path.indexOf('/test/') > 0 || path.indexOf('/html/') > 0)) return;
	if (path.indexOf('.joined.js') > 0 || path.indexOf('.min.js') > 0) return;

	var code = buf.toString('utf8');
	// remove shebang
	code = code.replace(/^\#\!.*/, '');
	var orgCode = code;
	code = '(function(){' + code + '})';
	try {
		var top = uglify.parse(code);

		var testCode = (path.indexOf('test') >= 0);
		top.figure_out_scope();
		var globals = top.globals;
		var header = path;
		var unknown = {};
		globals.each(function(a, name) {
			if (name !== 'arguments' && !(name in clientGlobals)) {
				unknown[name] = (unknown[name] || "") + a.orig.map(function(entry) {
					return "[" + entry.start.line + ":" + entry.start.col + "]";
				}).join();
			}
		});
		unknown = Object.keys(unknown).sort().map(function(key) {
			return key + unknown[key];
		}).join(', ');

		var lintRes = node_jslint && runLint(orgCode);
		var unusedDeps = depCheck(path, code);
		if (unknown || lintRes || unusedDeps) {
			console.log("");
			console.log(path);
			if (unknown) {
				console.log("Unknown:");
				console.log(unknown);
			}
			if (lintRes) {
				console.log("Lint:");
				console.log(lintRes.join("\n"));
			}
			if (unusedDeps) {
				console.log("Unused requires:");
				console.log(unusedDeps.join("\n"));
			}
		}
	} catch (e) {
		console.log("Parse error for " + path);
		console.log(path + ": Parser error: " + e);
	}

}

function runLint(code) {
	var LintStream = node_jslint.LintStream;
	var options = {
		"edition": "latest",
		"length": 100
	};
	var res = [];

	var l = new LintStream(options);

	var fileName, fileContents;

	l.write({
		file: fileName,
		body: code
	});

	l.on('data', function(chunk, encoding, callback) {
		// chunk is an object

		// chunk.linted is an object holding the result from running JSLint
		// chunk.linted.ok is the boolean return code from JSLINT()
		// chunk.linted.errors is the array of errors, etc.
		// see JSLINT for the complete contents of the object
		//console.log(chunk.linted.errors);

		chunk.linted.errors && chunk.linted.errors.forEach(function(err) {

			if (err.code === "duplicate_a") {
				res.push(err.message + " - Line: " + err.line);
			}
		});
		callback && callback();
	});

	return res;
}

function depCheck(path, code) {
	var reqVars = {};
	var reqVarsHit = [];
	code = code.replace(commentRegExp, "").replace(requireRegExp, function(dep, p1) {
		reqVars[p1] = dep;
		return "";
	});
	Object.keys(reqVars).map(function(key) {
		if (!new RegExp("\\b" + key + "\\b", "g").test(code)) {
			reqVarsHit.push(reqVars[key]);
		}
	});
	if (reqVarsHit.length > 0) {
		return reqVarsHit;
	}
}

function scan(f) {
	f = f.replace(/\\/g, "/");
	if (f.indexOf('socket.io/support/expresso/deps/jscoverage/tests') >= 0 //
		||
		f.indexOf('/dotnet/') >= 0 //
		||
		f.indexOf('/junk/') >= 0) return;
	var stat = fs.lstatSync(f);
	if (stat.isDirectory()) {
		fs.readdirSync(f).forEach(function(n) {
			if (n !== '.git' && n !== '.svn') scan(f + "/" + n);
		});
	} else if (!stat.isSymbolicLink()) {
		var ext = f.substring(f.lastIndexOf('.')).toLowerCase();
		if (ext === '.js' || ext === '._js') {
			var data = fs.readFileSync(f);
			checkFile(f, data);
		}
	}
}

try {
	scan(process.argv[2] || '.');
} catch (ex) {
	console.error("ERROR: " + ex);
}