"use strict";

/*
 * Test Dataset internal methods for merging a delta sent by the server
 */

var sdataReq = require("syracuse-tablet/html/js/wc/sdata/sdataRequester");
var mock = require("syracuse-tablet/test/qunit/tests/fixtures/datasetFixtures");

function _getDataset(name, dataName, protoName) {
	var data = $.extend(true, {}, mock.fixtures[name][dataName]);
	var proto = $.extend(true, {}, mock.fixtures[name][protoName]);
	var pageData = sdataReq.createPageDataJson(data, proto);
	return pageData.dataset;
}

QUnit.module("Mock-Dataset, merge delta", function() {
	QUnit.test("Merge delta, simple props", function(assert) {
		var ds;
		var serverDelta = {
			TDCB: 1234.56
		};
		return $.smResolve()
			.then(function(result) {
				ds = _getDataset("AQMCRUDM.$edit", "CODE=8", "prototype");
			})
			.then(function() {
				ds.applyDelta(serverDelta);

				assert.equal(ds.getValue("TDCB"), 1234.56, "Merge number: Value matches");
			})
			.always(function() {
				assert.expect(1);
			});
	});

	QUnit.test("Merge delta, array props", function(assert) {
		var ds;
		var serverDelta = {
			ADEVADEVICEL: [{
				"$uuid": "7178ee42-2eb9-47b6-9126-81fe7bd7559b",
				"$index": 1,
				"TEXTDES": "ok:line 2 -> merged",
				"ADEV_TEXTAXX": "line 2 -> merged",
			}]
		};
		return $.smResolve()
			.then(function(result) {
				ds = _getDataset("AQMCRUDM.$edit", "CODE=8", "prototype");
			})
			.then(function() {
				ds.applyDelta(serverDelta);

				var array = ds.getChild("ADEVADEVICEL");
				var row = array.getRowByIndex(1);

				assert.equal(row.getValue("TEXTDES"), "ok:line 2 -> merged", "Merge array prop: Value matches");
				assert.equal(row.getValue("ADEV_TEXTAXX"), "line 2 -> merged", "Merge array prop: Value matches");
			})
			.always(function() {
				assert.expect(2);
			});
	});
});