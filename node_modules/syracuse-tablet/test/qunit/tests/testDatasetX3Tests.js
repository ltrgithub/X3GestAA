"use strict";

var ajax = require('syracuse-tablet/html/js/wc/common/ajax');
var sdataReq = require("syracuse-tablet/html/js/wc/sdata/sdataRequester");
var protoHelpers = require('syracuse-tablet/html/js/wc/sdata/protocolHelpers');

/*
 * Test dataset management in conjunction with syracuse/X3 server
 */

var _testCommonData = {
	"$baseUrl": "http://localhost:8123/mobile2/x3/erp/GX3APP"
};

function _replace(str, obj) {
	return str.replace(/\{(\S+?)\}/g, function(m, g1, g2) {
		return obj[g1];
	});
}

QUnit.module("X3-Dataset(AQMCRUDM), creation", function() {

	/*
	 * Create dataset based on stateless url
	 */
	QUnit.test("Dataset creation, stateless", function(assert) {
		var _pages = [{
			"$title": "Create SL",
			"$url": _replace("{$baseUrl}/AQMDEVICE/$template?representation=AQMCRUDM.$edit", _testCommonData),
			"$method": "GET"
		}, {
			"$title": "Edit SL",
			"$url": _replace("{$baseUrl}/AQMDEVICE('11')?representation=AQMCRUDM.$edit", _testCommonData),
			"$method": "GET"
		}];
		return $.smForEachPromise(_pages, function($link) {
				var p = new $.Deferred();
				sdataReq.fetchPageData($link)
					.then(function(pageData) {
						assert.ok(true, "Creating dataset " + $link.$title);
						assert.notEqual(pageData.dataset, null, "Got dataset");
						assert.notEqual(pageData.dataset.getUrl(), null, "Got url in dataset");
						assert.equal(pageData.isWorkingCopy, false, "Is non working copy");
					})
					.fail(function() {
						assert.ok(false, JSON.stringify(arguments));
					})
					.always(function() {
						p.resolve();
					})
				return p;
			})
			.always(function() {
				assert.expect(_pages.length * 4);
			});
	});

	/*
	 * Create dataset based on working copy url
	 */
	QUnit.test("Dataset creation, working copy", function(assert) {
		var _pages = [{
			"$title": "Create WC",
			"$url": _replace("{$baseUrl}/AQMDEVICE/$template/$workingCopies?representation=AQMCRUDM.$edit", _testCommonData),
			"$method": "POST"
		}, {
			"$title": "Edit WC",
			"$url": _replace("{$baseUrl}/AQMDEVICE('8')/$workingCopies?representation=AQMCRUDM.$edit", _testCommonData),
			"$method": "POST"
		}];
		return $.smForEachPromise(_pages, function($link) {
				var p = new $.Deferred();
				sdataReq.fetchPageData($link, {
						noCacheWrite: true
					})
					.then(function(pageData) {
						assert.ok(true, "Creating dataset " + $link.$title);
						assert.notEqual(pageData.dataset, null, "Got dataset");
						assert.notEqual(pageData.dataset.getUrl(), null, "Got url in dataset");
						assert.equal(pageData.isWorkingCopy, true, "Is working copy");
						return pageData;
					})
					.fail(function() {
						assert.ok(false, JSON.stringify(arguments));
					})
					.always(function(pageData) {
						p.resolve();
						// Try cleanup, no need to wait
						if (pageData && pageData.dataset) {
							sdataReq.deleteWC(pageData.dataset);
						}
					})
				return p;
			})
			.always(function() {
				assert.expect(_pages.length * 4);
			});
	});
});


QUnit.module("X3-Dataset (AQMCRUDM), actions", function() {
	QUnit.test("Dataset, actions, $edit, working copy", function(assert) {
		var _page = {
			"$url": _replace("{$baseUrl}/AQMDEVICE('8')/$workingCopies?representation=AQMCRUDM.$edit", _testCommonData),
			"$method": "POST"
		};
		return sdataReq.fetchPageData(_page)
			.then(function(pageData) {
				assert.ok(true, "Creating dataset ok");
				assert.notEqual(pageData.dataset, null, "Got dataset");
				assert.notEqual(pageData.dataset.getUrl(), null, "Got url in dataset");
				assert.equal(pageData.isWorkingCopy, true, "Is working copy");
				return pageData;
			})
			.then(function(pageData) {
				return sdataReq.triggerAction("MOF", pageData.dataset, pageData.isWorkingCopy)
					.then(function() {
						return pageData;
					});
			})
			.always(function(pageData) {
				// Try cleanup, no need to wait
				if (pageData && pageData.dataset) {
					sdataReq.deleteWC(pageData.dataset);
				}
			})
			.always(function() {
				assert.expect(4);
			});
	});

	QUnit.test("Dataset, actions, $edit, stateless", function(assert) {
		var _page = {
			"$url": _replace("{$baseUrl}/AQMDEVICE('8')?representation=AQMCRUDM.$edit", _testCommonData),
			"$method": "GET"
		};
		return sdataReq.fetchPageData(_page)
			.then(function(pageData) {
				assert.ok(true, "Creating dataset ok");
				assert.notEqual(pageData.dataset, null, "Got dataset");
				assert.notEqual(pageData.dataset.getUrl(), null, "Got url in dataset");
				assert.equal(pageData.isWorkingCopy, false, "Is non working copy");
				return pageData;
			})
			.then(function(pageData) {
				return sdataReq.triggerAction("MOF", pageData.dataset, pageData.isWorkingCopy);
			})
			.always(function() {
				assert.expect(4);
			});
	});

	QUnit.test("Dataset, actions, $create, working copy", function(assert) {
		var _page = {
			"$url": _replace("{$baseUrl}/AQMDEVICE/$template/$workingCopies?representation=AQMCRUDM.$create", _testCommonData),
			"$method": "POST"
		};
		return sdataReq.fetchPageData(_page)
			.then(function(pageData) {
				assert.ok(true, "Creating dataset ok");
				assert.notEqual(pageData.dataset, null, "Got dataset");
				assert.notEqual(pageData.dataset.getUrl(), null, "Got url in dataset");
				assert.equal(pageData.isWorkingCopy, true, "Is working copy");
				return pageData;
			})
			.then(function(pageData) {
				return sdataReq.triggerAction("MOF", pageData.dataset, pageData.isWorkingCopy)
					.then(function() {
						return pageData;
					});
			})
			.always(function(pageData) {
				// Try cleanup, no need to wait
				if (pageData && pageData.dataset) {
					sdataReq.deleteWC(pageData.dataset);
				}
			})
			.always(function() {
				assert.expect(4);
			});
	});

	QUnit.test("Dataset, actions, $create, stateless", function(assert) {
		var _page = {
			"$url": _replace("{$baseUrl}/AQMDEVICE/$template?representation=AQMCRUDM.$create", _testCommonData),
			"$method": "GET"
		};
		return sdataReq.fetchPageData(_page)
			.then(function(pageData) {
				assert.ok(true, "Creating dataset ok");
				assert.notEqual(pageData.dataset, null, "Got dataset");
				assert.notEqual(pageData.dataset.getUrl(), null, "Got url in dataset");
				assert.equal(pageData.isWorkingCopy, false, "Is non working copy");
				return pageData;
			})
			.then(function(pageData) {
				return sdataReq.triggerAction("MOF", pageData.dataset, pageData.isWorkingCopy);
			})
			.always(function() {
				assert.expect(4);
			});
	});

	QUnit.test("Dataset, actions, $create + $edit + $save, stateless", function(assert) {
		var _page = {
			"$url": _replace("{$baseUrl}/AQMDEVICE/$template?representation=AQMCRUDM.$create", _testCommonData),
			"$method": "GET"
		};
		var _pageData;
		return sdataReq.fetchPageData(_page)
			.then(function(pageData) {
				_pageData = pageData;
				assert.ok(true, "Creating dataset ok");
				assert.notEqual(pageData.dataset, null, "Got dataset");
				assert.notEqual(pageData.dataset.getUrl(), null, "Got url in dataset");
				assert.equal(pageData.isWorkingCopy, false, "Is non working copy");
				return pageData;
			})
			.then(function(pageData) {
				// Save
				pageData.dataset.setValue("MODULE", 1);
				pageData.dataset.setValue("TEXTAXX", "This is a test 1");
				return sdataReq.triggerAction("$save", pageData.dataset, pageData.isWorkingCopy);
			})
			.then(function() {
				// Read new record, and start to change
				return sdataReq.fetchPageData({
					"$url": _replace("{$baseUrl}/AQMDEVICE('" + _pageData.dataset.getValue("CODE") + "')?representation=AQMCRUDM.$edit", _testCommonData),
					"$method": "GET"
				});
			})
			.then(function(pageData) {
				_pageData = pageData;
				assert.notEqual(pageData.dataset, null, "Got dataset");
				assert.notEqual(pageData.dataset.getUrl(), null, "Got url in dataset");
				assert.equal(pageData.isWorkingCopy, false, "Is non working copy");
				assert.equal(pageData.dataset.getValue("TEXTAXX"), "This is a test 1", "Text value matches");
				return pageData;
			})
			.then(function(pageData) {
				pageData.dataset.setValue("TEXTAXX", "This is a test 2");
				return sdataReq.triggerAction("$save", pageData.dataset, pageData.isWorkingCopy);
			})
			.then(function() {
				// Read changed record
				return sdataReq.fetchPageData({
					"$url": _replace("{$baseUrl}/AQMDEVICE('" + _pageData.dataset.getValue("CODE") + "')?representation=AQMCRUDM.$edit", _testCommonData),
					"$method": "GET"
				});
			})
			.then(function(pageData) {
				_pageData = pageData;
				assert.notEqual(pageData.dataset, null, "Got dataset");
				assert.notEqual(pageData.dataset.getUrl(), null, "Got url in dataset");
				assert.equal(pageData.isWorkingCopy, false, "Is non working copy");
				assert.equal(pageData.dataset.getValue("TEXTAXX"), "This is a test 2", "Text value matches");
				return pageData;
			})
			.always(function(pageData) {
				if (pageData && pageData.dataset) {
					ajax.request(_replace("{$baseUrl}/AQMDEVICE('" + pageData.dataset.getValue("CODE") + "')?representation=AQMCRUDM.$query", _testCommonData), "DELETE");
				}
			})
			.always(function() {
				assert.expect(12);
			});
	});

	QUnit.test("Dataset, actions, $create + $edit + $save, working copy", function(assert) {
		var _page = {
			"$url": _replace("{$baseUrl}/AQMDEVICE/$template/$workingCopies?representation=AQMCRUDM.$create", _testCommonData),
			"$method": "POST"
		};

		// Create new record
		return sdataReq.fetchPageData(_page)
			.then(function(pageData) {
				assert.ok(true, "Creating dataset ok");
				assert.notEqual(pageData.dataset, null, "Got dataset");
				assert.notEqual(pageData.dataset.getUrl(), null, "Got url in dataset");
				assert.equal(pageData.isWorkingCopy, true, "Is working copy");
				return pageData;
			})
			.then(function(pageData) {
				// Save
				pageData.dataset.setValue("MODULE", 1);
				pageData.dataset.setValue("TEXTAXX", "This is a test 1");
				return sdataReq.triggerAction("$save", pageData.dataset, pageData.isWorkingCopy)
					.then(function() {
						return pageData;
					});
			})
			.always(function(pageData) {
				if (pageData && pageData.dataset) {
					sdataReq.deleteWC(pageData.dataset);
				}
			})
			.then(function(pageData) {
				// Read new record, and start to change
				return sdataReq.fetchPageData({
					"$url": _replace("{$baseUrl}/AQMDEVICE('" + pageData.dataset.getValue("CODE") + "')/$workingCopies?representation=AQMCRUDM.$edit", _testCommonData),
					"$method": "POST"
				});
			})
			.then(function(pageData) {
				assert.notEqual(pageData.dataset, null, "Got dataset");
				assert.notEqual(pageData.dataset.getUrl(), null, "Got url in dataset");
				assert.equal(pageData.isWorkingCopy, true, "Is working copy");
				assert.equal(pageData.dataset.getValue("TEXTAXX"), "This is a test 1", "Text value matches");
				return pageData;
			})
			.then(function(pageData) {
				pageData.dataset.setValue("TEXTAXX", "This is a test 2");
				return sdataReq.triggerAction("$save", pageData.dataset, pageData.isWorkingCopy)
					.then(function() {
						return pageData;
					});
			})
			.always(function(pageData) {
				if (pageData && pageData.dataset) {
					sdataReq.deleteWC(pageData.dataset);
				}
			})
			.then(function(pageData) {
				// Read changed record
				return sdataReq.fetchPageData({
					"$url": _replace("{$baseUrl}/AQMDEVICE('" + pageData.dataset.getValue("CODE") + "')/$workingCopies?representation=AQMCRUDM.$edit", _testCommonData),
					"$method": "POST"
				});
			})
			.then(function(pageData) {
				assert.notEqual(pageData.dataset, null, "Got dataset");
				assert.notEqual(pageData.dataset.getUrl(), null, "Got url in dataset");
				assert.equal(pageData.isWorkingCopy, true, "Is working copy");
				assert.equal(pageData.dataset.getValue("TEXTAXX"), "This is a test 2", "Text value matches");
				return pageData;
			})
			.always(function(pageData) {
				if (pageData && pageData.dataset) {
					sdataReq.deleteWC(pageData.dataset);
				}
				return pageData;
			})
			.always(function(pageData) {
				if (pageData && pageData.dataset) {
					ajax.request(_replace("{$baseUrl}/AQMDEVICE('" + pageData.dataset.getValue("CODE") + "')?representation=AQMCRUDM.$query", _testCommonData), "DELETE");
				}
			})
			.always(function() {
				assert.expect(12);
			});
	});
});


QUnit.module("X3-Dataset (AQTCRUDM), actions, $parameters", function() {

	QUnit.test("Dataset, actions, $edit, working copy", function(assert) {
		var _page = {
			"$url": _replace("{$baseUrl}/AQTCRUD('11')/$workingCopies?representation=AQTCRUDM.$edit", _testCommonData),
			"$method": "POST"
		};
		return sdataReq.fetchPageData(_page)
			.then(function(pageData) {
				assert.ok(true, "Creating dataset ok");
				assert.notEqual(pageData.dataset, null, "Got dataset");
				assert.notEqual(pageData.dataset.getUrl(), null, "Got url in dataset");
				assert.equal(pageData.isWorkingCopy, true, "Is working copy");
				return pageData;
			})
			.then(function(pageData) {
				return sdataReq.triggerAction("WPARAMS_LIG44444", pageData.dataset, pageData.isWorkingCopy)
					.then(function() {
						return pageData;
					});
			})
			.always(function(pageData) {
				// Try cleanup, no need to wait
				if (pageData && pageData.dataset) {
					sdataReq.deleteWC(pageData.dataset);
				}
			})
			.always(function() {
				assert.expect(4);
			});
	});
});