"use strict";

/*
 * Test Dataset internal methods for resolving expressions
 */

var sdataReq = require("syracuse-tablet/html/js/wc/sdata/sdataRequester");
var mock = require("syracuse-tablet/test/qunit/tests/fixtures/datasetFixtures");

function _getDataset(name, dataName, protoName) {
	var data = $.extend(true, {}, mock.fixtures[name][dataName]);
	var proto = $.extend(true, {}, mock.fixtures[name][protoName]);
	var pageData = sdataReq.createPageDataJson(data, proto);
	return pageData.dataset;
}

QUnit.module("Mock-Dataset, resolve expressions", function() {

	QUnit.test("Resolve $title of root", function(assert) {
		var ds;
		return $.smResolve()
			.then(function() {
				ds = _getDataset("AQMCRUDM.$edit", "CODE=8", "prototype");
			})
			.then(function() {
				var $title = ds.prototype.json.$title;
				assert.equal($title, "{@37756}", "$title contains locale number");

				var result = ds.resolveExpression($title);
				assert.equal(result, "Tests", "$title value replaced correctly");
			})
			.always(function() {
				assert.expect(2);
			});
	});

	QUnit.test("Resolve $title array property", function(assert) {
		var ds;
		return $.smResolve()
			.then(function() {
				ds = _getDataset("AQMCRUDM.$edit", "CODE=8", "prototype");
			})
			.then(function() {
				// Create child dataset to check if resolve takes parent into account
				var child = ds.getChild("ADEVADEVICEL");

				// $title is title of array property ADEVADEVICEL[x].SUBCODE
				var $title = child.prototype.json.$properties.SUBCODE.$title;

				assert.equal($title, "{@5296}", "$title contains locale number");

				var result = child.resolveExpression($title);
				assert.equal(result, "Code", "$title value replaced correctly");
			})
			.always(function() {
				assert.expect(2);
			});
	});

	QUnit.test("Resolve $url property", function(assert) {
		var ds;
		return $.smResolve()
			.then(function() {
				ds = _getDataset("AQTCRUDM.$edit", "CODE=10", "prototype");
			})
			.then(function() {
				var $url = ds.prototype.json.$links.TEST_PARAMS.$url;
				var result = ds.resolveExpression($url, true);
				// Note, here there are still some placeholders left because we do not suppy $parameters to resolveExpression
				assert.equal(result, "/sdata/x3/erp/SUPERV/AQTCRUD('10')?representation=AQTCRUDM.$details&MULTISELECT={MULTISELECT}&EXTRA_CODE={EXTRA_CODE}&EXTRA_ENCODE={EXTRA_ENCODE}", "$url encoded currectly");

				var result = ds.resolveExpression($url, true, ds.prototype.json.$links.TEST_PARAMS.$parameters);
				assert.equal(result, "/sdata/x3/erp/SUPERV/AQTCRUD('10')?representation=AQTCRUDM.$details&MULTISELECT=2&EXTRA_CODE=10&EXTRA_ENCODE='%20funny%20%3F%20value", "$url encoded currectly");
			})
			.always(function() {
				assert.expect(2);
			});
	});



});