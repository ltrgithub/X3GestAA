"use strict";

/*
 * Test Dataset internal methods for action and link resolving
 */

var sdataReq = require("syracuse-tablet/html/js/wc/sdata/sdataRequester");
var mock = require("syracuse-tablet/test/qunit/tests/fixtures/datasetFixtures");

function _getDataset(name, dataName, protoName) {
	var data = $.extend(true, {}, mock.fixtures[name][dataName]);
	var proto = $.extend(true, {}, mock.fixtures[name][protoName]);
	var pageData = sdataReq.createPageDataJson(data, proto);
	return pageData.dataset;
}

QUnit.module("Mock-Dataset, links and actions", function() {

	QUnit.test("Get links from dataset", function(assert) {
		var ds;
		var $url;
		return $.smResolve()
			.then(function() {
				ds = _getDataset("AQTCRUDM.$edit", "CODE=10", "prototype");
				$url = ds.prototype.json.$links.TEST_PARAMS.$url;
			})
			.then(function() {
				var link = ds.getLink("TEST_PARAMS");
				assert.notEqual(link, null, "Link found");
				assert.equal(link.$url, $url, "Url is ok");
			})
			.then(function() {
				var links = ds.getLinks();
				assert.equal(Object.keys(links).length, 1, "Number of links ok");
				var link = links.TEST_PARAMS;
				assert.notEqual(link, null, "Link found");
				assert.equal(link.$url, $url, "Url is ok");
			})
			.always(function() {
				assert.expect(5);
			});
	});

	QUnit.test("Get links from dataset property", function(assert) {
		var ds;
		return $.smResolve()
			.then(function() {
				ds = _getDataset("AQTCRUDM.$edit", "CODE=10", "prototype");
			})
			.then(function() {
				var link = ds.getLink("$lookup", "PROJECT_REF");
				assert.equal(link.$url, "{$baseUrl}/AQMPROJECT?representation=AQMPROJECTM.$lookup&where=(BDATE eq @@)");
			})
			.then(function() {
				var links = ds.getLinks("PROJECT_REF");
				assert.equal(Object.keys(links).length, 1, "Number of links ok");
				var link = links.$lookup;
				assert.notEqual(link, null, "Link found");
				assert.equal(link.$url, "{$baseUrl}/AQMPROJECT?representation=AQMPROJECTM.$lookup&where=(BDATE eq @@)");
			})
			.always(function() {
				assert.expect(4);
			});
	});


	QUnit.test("Get actions from dataset", function(assert) {
		var ds;
		return $.smResolve()
			.then(function() {
				ds = _getDataset("AQTCRUDM.$edit", "CODE=10", "prototype");
			})
			.then(function() {
				var action = ds.getAction("WPARAMS_LIG44444");
				assert.notEqual(action, null, "Action found");
			})
			.then(function() {
				var actions = ds.getActions();
				assert.equal(Object.keys(actions).length, 3, "Number of actions ok");
				var action = actions.WPARAMS_LIG44444;
				assert.notEqual(action, null, "Action found");
			})
			.always(function() {
				assert.expect(3);
			});
	});
});