"use strict";

/*
 * Test Dataset internal methods for value getting/setting and delta/data management
 */
var mock = require("syracuse-tablet/test/qunit/tests/fixtures/datasetFixtures");
var sdataReq = require("syracuse-tablet/html/js/wc/sdata/sdataRequester");

function _getDataset(name, dataName, protoName) {
	var data = $.extend(true, {}, mock.fixtures[name][dataName]);
	var proto = $.extend(true, {}, mock.fixtures[name][protoName]);
	var pageData = sdataReq.createPageDataJson(data, proto);
	return pageData.dataset;
}

function DeltaListener() {
	this.nf = {
		data: [],
		meta: [],
		links: {},
		actions: {},
		added: [],
		removed: [],
		moved: []
	};
	this.onDeltaValueChanged = function(dataset, $bind) {
		this.nf.data.push($bind);
	};
	this.onDeltaMetaChanged = function(dataset, $bind) {
		this.nf.meta.push($bind);
	};
	this.onDeltaRowAdded = function(dataset, $bind, $uuid, idx) {
		this.nf.added.push({
			$uuid: $uuid,
			$index: idx
		});
	};
	this.onDeltaRowRemoved = function(dataset, $bind, $uuid, idx) {
		this.nf.removed.push({
			$uuid: $uuid,
			$index: idx
		});
	};
	this.onDeltaRowMoved = function(dataset, $bind, $uuid, newIdx) {
		this.nf.moved.push({
			$uuid: $uuid,
			newIdx: newIdx
		});
	};
	this.onDeltaActionChanged = function(dataset, $action, metaData) {
		this.nf.actions[$action] = metaData;
	};
	this.onDeltaLinkChanged = function(dataset, $link, $bind, metaData) {
		this.nf.links[$link] = metaData;
	};
}

QUnit.module("Mock-Dataset, notification data+meta", function() {

	QUnit.test("Meta notification, non array", function(assert) {
		var ds;
		var cl = new DeltaListener();
		return $.smResolve()
			.then(function(result) {
				ds = _getDataset("AQTCRUDM.$edit", "CODE=10", "prototype");
				ds.addDeltaChangeListener(cl);
				ds.applyDelta({
					"$properties": {
						"CODE": {
							"$isReadOnly": true
						},
						"QTY": {
							"$x3Format": "\"15#\""
						}
					}
				});
			})
			.then(function() {
				assert.equal(cl.nf.data.length, 0, "No data change");
				assert.equal(cl.nf.meta.indexOf("CODE") > -1, true, "Meta data change on CODE");
				assert.equal(cl.nf.meta.indexOf("QTY") > -1, true, "Meta data change on QTY");
			})
			.always(function() {
				assert.expect(3);
			});
	});

	QUnit.test("Data notification, non array", function(assert) {
		var ds;
		var cl = new DeltaListener();
		return $.smResolve()
			.then(function(result) {
				ds = _getDataset("AQTCRUDM.$edit", "CODE=10", "prototype");
				ds.addDeltaChangeListener(cl);
				ds.applyDelta({
					"CODE": 9,
					"QTY": 0
				});
			})
			.then(function() {
				assert.equal(cl.nf.meta.length, 0, "No meta data change");
				assert.equal(cl.nf.data.indexOf("CODE") > -1, true, "Data change on CODE");
				assert.equal(cl.nf.data.indexOf("QTY") < 0, true, "No data change on QTY because value did not change");
			})
			.always(function() {
				assert.expect(3);
			});
	});

	QUnit.test("Data notification, simple array", function(assert) {
		var ds;
		var cl = new DeltaListener();
		var cla = new DeltaListener();

		var ads;
		return $.smResolve()
			.then(function(result) {
				ds = _getDataset("AQMCRUDM.$edit", "CODE=8", "prototype");
				ads = ds.getChild("ADEVTABDATE");

				ds.addDeltaChangeListener(cl);
				ads.addDeltaChangeListener(cla);

				// Initial dataset values, no changes should be detected
				ds.applyDelta({
					"ADEVTABDATE": [
						"2015-02-20",
						"2015-02-16",
						"2015-02-11",
						"2015-02-18",
						"2015-02-03"
					]
				});
			})
			.then(function() {
				assert.equal(cl.nf.meta.length, 0, "No meta data change");
				assert.equal(cl.nf.data.length, 0, "No data data change");
				assert.equal(cla.nf.meta.length, 0, "No meta data change");
				assert.equal(cla.nf.data.length, 0, "No data data change");
			})
			.then(function() {
				var rowDs = [];
				var rowLs = [];
				for (var ii = 0; ii < ads.getNumRows(); ii++) {
					var rds = ads.getRowByIndex(ii)
					rowDs.push(rds);
					var rls = new DeltaListener();
					rds.addDeltaChangeListener(rls);
					rowLs.push(rls);
				}
				ds.applyDelta({
					"ADEVTABDATE": [
							"2015-02-21", // changed
							"2015-02-16",
							"2015-02-11",
							"2015-02-19", // changed
							"2015-02-01", // changed
							"2015-01-01"
						] // new
				});

				var changedLines = rowLs.map(function(ls, idx) {
					return {
						idx: idx,
						nf: ls.nf
					};
				}).filter(function(n) {
					return n.nf.data.indexOf("$value") > -1;
				}).map(function(n, idx) {
					return n.idx;
				}).join(",");

				assert.equal(changedLines, "0,3,4", "Lines changed correctly matched");
				assert.equal(cla.nf.added.length, 1, "Lines added correctly matched");
			})
			.always(function() {
				assert.expect(6);
			});
	});

	QUnit.test("Data notification, simple ref array", function(assert) {
		var ds;
		var cl = new DeltaListener();
		var cla = new DeltaListener();

		var ads;
		return $.smResolve()
			.then(function(result) {
				ds = _getDataset("AQMCRUDM.$edit", "CODE=8", "prototype");
				ads = ds.getChild("ADEVCOLREF1");

				ds.addDeltaChangeListener(cl);
				ads.addDeltaChangeListener(cla);

				// Initial dataset values, no changes should be detected
				ds.applyDelta({
					"ADEVCOLREF1": [{
						"$uuid": "29747bf8-2cff-42f8-ab1d-6e391265b9f8",
						"FCY": "AMB"
					}, {
						"$uuid": "683cac77-e12b-487d-8d21-553cc463d834",
						"FCY": "073CH"
					}, {
						"$uuid": "2ec8c8f4-2cfa-44a2-a6e4-6fee8af5eb4b",
						"FCY": "081"
					}]
				});
			})
			.then(function() {
				assert.equal(cl.nf.meta.length, 0, "No meta data change");
				assert.equal(cl.nf.data.length, 0, "No data data change");
				assert.equal(cla.nf.meta.length, 0, "No meta data change");
				assert.equal(cla.nf.data.length, 0, "No data data change");
			})
			.then(function() {
				var rowDs = [];
				var rowLs = [];
				for (var ii = 0; ii < ads.getNumRows(); ii++) {
					var rds = ads.getRowByIndex(ii)
					rowDs.push(rds);
					var rls = new DeltaListener();
					rds.addDeltaChangeListener(rls);
					rowLs.push(rls);
				}
				ds.applyDelta({
					"ADEVCOLREF1": [{
						"$uuid": "29747bf8-2cff-42f8-ab1d-6e391265b9f8",
						"FCY": "AMB"
					}, {
						"$uuid": "2ec8c8f4-2cfa-44a2-a6e4-6fee8af5eb4b",
						"FCY": "081"
					}, {
						"$uuid": "683cac77-e12b-487d-8d21-553cc463d834",
						"FCY": "073CH"
					}, {
						"$uuid": "183cac77-e12b-487d-8d21-553cc463d834",
						"FCY": "1234"
					}]
				});

				var changedLines = rowLs.map(function(ls, idx) {
					return {
						idx: idx,
						nf: ls.nf
					};
				}).filter(function(n) {
					return n.nf.data.indexOf("FCY") > -1;
				}).map(function(n, idx) {
					return n.idx;
				}).join(",");

				assert.equal(changedLines, "1,2", "Lines changed correctly matched");
				assert.equal(cla.nf.added.length, 1, "Lines added correctly matched");
			})
			.always(function() {
				assert.expect(6);
			});
	});

	QUnit.test("Data notification, complex array, add and delete, full array received", function(assert) {
		var ds;
		var cl = new DeltaListener();
		var cla = new DeltaListener();

		var ads;
		return $.smResolve()
			.then(function(result) {
				ds = _getDataset("AQMCRUDM.$edit", "CODE=8", "prototype");
				ads = ds.getChild("ADEVADEVCOL1");

				ds.addDeltaChangeListener(cl);
				ads.addDeltaChangeListener(cla);

				// Initial dataset values, no changes should be detected
				ds.applyDelta({
					"ADEVADEVCOL1": [{
						"$uuid": "45a61c72-f75a-41fa-907b-20a49220e1e7"
					}, {
						"$uuid": "343178bd-3151-4b71-874a-6f666cc2b4f5"
					}, {
						"$uuid": "35e9f1d4-a19c-4628-8fff-4aed9fe1e2c5"
					}, {
						"$uuid": "a224e245-a207-471c-ad68-7c0d0b33c431"
					}, {
						"$uuid": "b5c2caf3-5c54-453e-9ef4-4ac3654cc938"
					}]
				});
			})
			.then(function() {
				assert.equal(cl.nf.meta.length, 0, "No meta data change");
				assert.equal(cl.nf.data.length, 0, "No data data change");
				assert.equal(cla.nf.meta.length, 0, "No meta data change");
				assert.equal(cla.nf.data.length, 0, "No data data change");
			})
			.then(function() {
				var rowDs = [];
				var rowLs = [];
				for (var ii = 0; ii < ads.getNumRows(); ii++) {
					var rds = ads.getRowByIndex(ii)
					rowDs.push(rds);
					var rls = new DeltaListener();
					rds.addDeltaChangeListener(rls);
					rowLs.push(rls);
				}
				ds.applyDelta({
					"ADEVADEVCOL1": [{
						//						"$uuid": "45a61c72-f75a-41fa-907b-20a49220e1e7" // deleted line
						//					}, {
						"$uuid": "343178bd-3151-4b71-874a-6f666cc2b4f5" // move to index 0 because of delete
					}, {
						"$uuid": "a224e245-a207-471c-ad68-7c0d0b33c431" // was $index = 3 before 
					}, {
						"$uuid": "15e9f1d4-a19c-4628-8fff-4aed9fe1e2c5" // added line
					}, {
						"$uuid": "35e9f1d4-a19c-4628-8fff-4aed9fe1e2c5" // was $index = 2 before
					}, {
						"$uuid": "b5c2caf3-5c54-453e-9ef4-4ac3654cc938"
					}]
				});

				assert.equal(cla.nf.added.length, 1, "Number of lines added correctly matched");
				assert.equal(cla.nf.added[0].$uuid, "15e9f1d4-a19c-4628-8fff-4aed9fe1e2c5", "Added line $uuid ok");
				assert.equal(cla.nf.removed.length, 1, "Number of lines removed correctly matched");
				assert.equal(cla.nf.removed[0].$uuid, "45a61c72-f75a-41fa-907b-20a49220e1e7", "Removed line $uuid ok");

				assert.equal(cla.nf.moved.length, 3, "Number of lines moved correctly matched");
				assert.equal(cla.nf.moved[0].$uuid, "343178bd-3151-4b71-874a-6f666cc2b4f5", "Moved line 1, $uuid ok");
				assert.equal(cla.nf.moved[0].newIdx, 0, "Moved line 1, new index ok");
				assert.equal(cla.nf.moved[1].$uuid, "a224e245-a207-471c-ad68-7c0d0b33c431", "Moved line 2, $uuid ok");
				assert.equal(cla.nf.moved[1].newIdx, 1, "Moved line 2, new index ok");
				assert.equal(cla.nf.moved[2].$uuid, "35e9f1d4-a19c-4628-8fff-4aed9fe1e2c5", "Moved line 3, $uuid ok");
				assert.equal(cla.nf.moved[2].newIdx, 3, "Moved line 3, new index ok");
			})
			.always(function() {
				assert.expect(15);
			});
	});

	QUnit.test("Data notification, complex array, add and delete, delta array received", function(assert) {
		var ds;
		var cl = new DeltaListener();
		var cla = new DeltaListener();

		var ads;
		return $.smResolve()
			.then(function(result) {
				ds = _getDataset("AQMCRUDM.$edit", "CODE=8", "prototype");
				ads = ds.getChild("ADEVADEVCOL1");

				ds.addDeltaChangeListener(cl);
				ads.addDeltaChangeListener(cla);

				// Initial dataset values, no changes should be detected
				ds.applyDelta({
					"ADEVADEVCOL1": [{
						"$uuid": "45a61c72-f75a-41fa-907b-20a49220e1e7"
					}, {
						"$uuid": "343178bd-3151-4b71-874a-6f666cc2b4f5"
					}, {
						"$uuid": "35e9f1d4-a19c-4628-8fff-4aed9fe1e2c5"
					}, {
						"$uuid": "a224e245-a207-471c-ad68-7c0d0b33c431"
					}, {
						"$uuid": "b5c2caf3-5c54-453e-9ef4-4ac3654cc938"
					}]
				});
			})
			.then(function() {
				assert.equal(cl.nf.meta.length, 0, "No meta data change");
				assert.equal(cl.nf.data.length, 0, "No data data change");
				assert.equal(cla.nf.meta.length, 0, "No meta data change");
				assert.equal(cla.nf.data.length, 0, "No data data change");
			})
			.then(function() {
				var rowDs = [];
				var rowLs = [];
				for (var ii = 0; ii < ads.getNumRows(); ii++) {
					var rds = ads.getRowByIndex(ii)
					rowDs.push(rds);
					var rls = new DeltaListener();
					rds.addDeltaChangeListener(rls);
					rowLs.push(rls);
				}
				ds.applyDelta({
					"ADEVADEVCOL1": [{
						"$uuid": "45a61c72-f75a-41fa-907b-20a49220e1e7", // delete line
						"$isDeleted": true,
						"$index": 0
							//					}, {
							//						"$uuid": "343178bd-3151-4b71-874a-6f666cc2b4f5" // move to index 0 because of delete
							//					}, {
							//						"$uuid": "35e9f1d4-a19c-4628-8fff-4aed9fe1e2c5" // move to index 1 because of delete
					}, {
						"$uuid": "15e9f1d4-a19c-4628-8fff-4aed9fe1e2c5", // added line
						"$index": 2
							//					}, {
							//						"$uuid": "a224e245-a207-471c-ad68-7c0d0b33c431" // will stay same
							//					}, {
							//						"$uuid": "b5c2caf3-5c54-453e-9ef4-4ac3654cc938" // will stay same					
					}]
				});
				assert.equal(cla.nf.added.length, 1, "Number of lines added correctly matched");
				assert.equal(cla.nf.added[0].$uuid, "15e9f1d4-a19c-4628-8fff-4aed9fe1e2c5", "Added line $uuid ok");
				assert.equal(cla.nf.removed.length, 1, "Number of lines removed correctly matched");
				assert.equal(cla.nf.removed[0].$uuid, "45a61c72-f75a-41fa-907b-20a49220e1e7", "Removed line $uuid ok");

				assert.equal(cla.nf.moved.length, 2, "Number of lines moved correctly matched");
				assert.equal(cla.nf.moved[0].$uuid, "343178bd-3151-4b71-874a-6f666cc2b4f5", "Moved line 1, $uuid ok");
				assert.equal(cla.nf.moved[0].newIdx, 0, "Moved line 1, new index ok");
				assert.equal(cla.nf.moved[1].$uuid, "35e9f1d4-a19c-4628-8fff-4aed9fe1e2c5", "Moved line 2, $uuid ok");
				assert.equal(cla.nf.moved[1].newIdx, 1, "Moved line 2, new index ok");
			})
			.always(function() {
				assert.expect(13);
			});
	});

	QUnit.test("Meta notification, actions", function(assert) {
		var ds;
		var cl = new DeltaListener();
		return $.smResolve()
			.then(function(result) {
				ds = _getDataset("AQTCRUDM.$edit", "CODE=10", "prototype");
				ds.addDeltaChangeListener(cl);
				ds.applyDelta({
					"$actions": {
						"$save": {
							"$isHidden": false,
							"$isDisabled": false,
							"$links": {} // will not be checked in details by dataset, just if it's there or not
						}
					}
				});
			})
			.then(function() {
				assert.equal(Object.keys(cl.nf.actions).length, 0, "No actions changed");
			})
			.then(function() {
				ds.applyDelta({
					"$actions": {
						"$save": {
							"$isHidden": true,
							"$isDisabled": false
						}
					}
				});
			})
			.then(function() {
				assert.equal(Object.keys(cl.nf.actions).length, 1, "Change encountered");
				assert.notEqual(cl.nf.actions.$save, null, "$save action changed");
				assert.equal(cl.nf.actions.$save.$isHidden, true, "$isHidden ok");
				assert.equal(cl.nf.actions.$save.$isDisabled, false, "$isHidden ok");
			})
			.always(function() {
				assert.expect(5);
			});
	});

	QUnit.test("Meta notification, links", function(assert) {
		var ds;
		var cl = new DeltaListener();
		return $.smResolve()
			.then(function(result) {
				// We use $details facet to check link meta data change which will never
				// happen in the real word since $details is static
				// For the test, it's ok since we just need some piece of data
				ds = _getDataset("AQTCRUDM.$details", "CODE=10", "prototype");

				ds.addDeltaChangeListener(cl);
				ds.applyDelta({
					"$links": {
						"$delete": {
							"$isHidden": false,
							"$isDisabled": false
						}
					}
				});
			})
			.then(function() {
				assert.equal(Object.keys(cl.nf.links).length, 0, "No links changed");
			})
			.then(function() {
				ds.applyDelta({
					"$links": {
						"$delete": {
							"$isHidden": true,
							"$isDisabled": false
						}
					}
				});
			})
			.then(function() {
				assert.equal(Object.keys(cl.nf.links).length, 1, "Change encountered");
				assert.notEqual(cl.nf.links.$delete, null, "$delete link changed");
				assert.equal(cl.nf.links.$delete.$isHidden, true, "$isHidden ok");
				assert.equal(cl.nf.links.$delete.$isDisabled, false, "$isHidden ok");
			})
			.always(function() {
				assert.expect(5);
			});
	});
});