"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("testAjax");
var libTests = require('syracuse-tablet/test/js/libTests');
var authoringSData = require('syracuse-tablet/html/js/authoring/authoringSData');

var testset;
var testPageContext = {
	application: "syracuse",
	contract: "collaboration",
	representation: "testdummy",
	facet: "$details"
};

exports.modulename = "authoring";

function _deletePreviousRecords() {
	var opts = $.extend(true, {}, testPageContext);
	return authoringSData.deletePageVariants(opts);
}

exports.test = function() {
	testset = libTests.addTestset("Authoring");
	var testcase;
	return $.smResolve()
		.then(function(e) {
			testcase = testset.addTestcase("Delete old stuff");
			return _deletePreviousRecords()
				.then(function(data) {
					// do not check result of delete
					testcase.addResult("This will never fail", true);
				}, function(e) {
					// do not check result of delete
					testcase.addResult("This will never fail", true);
					// to continue success chain
					return $.smResolve();
				});

		})
		.then(function() {
			testcase = testset.addTestcase("Invalid params");
			return authoringSData.getPageVariants({}) // no params !!!
			.then(function(e) {
				testcase.addResult("Succeeded also invalid params where sent", false);
			}, function(e) {
				testcase.addResult("Failed because of invalid params", true);
				// to continue success chain
				return $.smResolve();
			});
		})
		.then(function() {
			testcase = testset.addTestcase("Read but no records");
			return authoringSData.getPageVariants(testPageContext)
				.then(function(data) {
					testcase.addResult("Succeeded result must be empty", data && data.length === 0);
				}, function(e) {
					testcase.addResult("Failed", false, e);
					// to continue success chain
					return $.smResolve();
				});
		})
		.then(function() {
			testcase = testset.addTestcase("Save authoring (new)");

			var variant = {
				roles: [],
				users: [],
				endpoints: [],
				saveAsOption: "factory_variant", // personal_copy", "shared_copy", "global_variant", "factory_variant"
				variantCode: "DEFAULT",
				variantTitle: "DEFAULT",
				variantDescription: "DEFAULT",
			};
			var article = {
				article: {
					layout: {
						node: {
							test: {}
						}
					}
				}
			};

			var opts = $.extend(true, {}, variant, article, testPageContext);
			return authoringSData.savePageDefinition(opts)
				.then(function(data) {
					testcase.addResult("Save ok", data != null);
					if (data != null) {
						testcase.addResult("Representation matches", data.pageContext.indexOf("testdummy") > -1);
						testcase.addResult("Layout matches", JSON.stringify(data.content).indexOf("test") > -1);
					}
				}, function(e) {
					testcase.addResult("Failed", false, e);
					// to continue success chain
					return $.smResolve();
				});
		})
		.then(function() {
			testcase = testset.addTestcase("Read 1 record");
			return authoringSData.getPageVariants(testPageContext)
				.then(function(data) {
					testcase.addResult("Succeeded result must be array length 1", data && data.length === 1);
					return data[0];
				}, function(e) {
					testcase.addResult("Failed", false, e);
					// to continue success chain
					return $.smResolve();
				});
		})
		.then(function(data) {
			var testcase = testset.addTestcase("Save authoring (update)");
			if (data == null) {
				testcase.addResult("Previous test failed, test not possible", false);
				return;
			}
			var variant = {
				roles: [],
				users: [],
				endpoints: [],
				//			saveAsOption: "personal_copy", //, "shared_copy", "global_variant", "factory_variant"
				variantCode: "DEFAULT",
				variantTitle: "DEFAULT",
				variantDescription: "DEFAULT2",
			};
			var article = {
				article: {
					layout: {
						node: {
							updated: {}
						}
					}
				}
			};

			var opts = $.extend(true, {}, variant, article, testPageContext);
			opts.variant = data.variantId;

			return authoringSData.savePageDefinition(opts)
				.then(function(data) {
					testcase.addResult("Save ok", data != null);
					if (data != null) {
						testcase.addResult("Representation matches", data.pageContext.indexOf("testdummy") > -1);
						testcase.addResult("Layout matches", JSON.stringify(data.content).indexOf("updated") > -1);
					}
				}, function(e) {
					testcase.addResult("Failed", false, e);
					// to continue success chain
					return $.smResolve();
				});
		})
		.then(function() {
			testcase = testset.addTestcase("Read 1 record");
			return authoringSData.getPageVariants(testPageContext)
				.then(function(data) {
					testcase.addResult("Succeeded result must be array length 1", data && data.length === 1);
					return data[0];
				}, function(e) {
					testcase.addResult("Failed", false, e);
					// to continue success chain
					return $.smResolve();
				});
		});

};