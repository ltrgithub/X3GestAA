"use strict";
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("testStateless");
var testUtil = require('syracuse-tablet/test/js/testUtil');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataHttp = require('syracuse-tablet/html/js/sdata/sdataHttp');
var storage = require('syracuse-tablet/html/js/storage/storage');

var _round = function(num, digits) {
	digits = digits || 2;
	return Math.round(num * Math.pow(10, digits)) / Math.pow(10, digits);
};

var _getNumber = function(intPart, digits) {
	return _round(Math.random() * Math.pow(10, intPart || 1), digits || 0);
};

var _baseUrl = window.location.protocol + "//" + window.location.host;

var _defAjaxOptions = {
	timeout: 0,
	completeCallback: true,
	noJsonParsing: true
};

var _crudUrl = function(id, klass, endpoint, rep, facet, action, device) {
	var url = [];
	if (action !== "workingCopies") {
		url = [_baseUrl];
	}
	url.push('/', endpoint || ("sdata/x3/erp/" + window.globalCtx.getEndpoint("DVLP")), '/', klass);
	if (id) {
		url.push("(", escape("'" + id + "'"), ")");
	}
	if (action == "template") {
		url.push("/$template");
	} else if (action == "method") {
		url.push("/$batchAction");
	} else if (action == "workingCopies") {
		url.push("/$workingCopies");
	}
	url.push("?");
	if (rep && facet) {
		url.push("representation=", rep, ".$", facet, "&");
	}
	url.push("device=", device || "phone");
	return url.join('');
};
var _crudHeaders = function(facet, rep, endpoint) {
	return {
		"Accept": 'application/json'
	};
};
var _sendCounter = (function() {
	var cpt = storage.sessionStorage.getItem("testStatelessCpt");
	if (cpt === null) cpt = 0;
	cpt++;
	storage.sessionStorage.setItem("testStatelessCpt", cpt);
	return cpt;
})();

var _sendRegExp = /\{@([a-z]+)\}/g;
var _crudHttpData = function(context, test) {
	var method, url, send, headers;
	var facet = test.action;
	var id = test.id || context.testId;
	if (typeof id == "function") {
		id = test.id(context, test);
	}
	var klass = test.klass || context.klass;
	var rep = test.representation || context.representation;
	var endpoint = test.endpoint || context.endpoint;
	if (test.send) {
		if (typeof test.send == "function") {
			test.send = test.send(context, test);
		}
		var str = test.send;
		if (typeof test.send == "object") {
			str = JSON.stringify(test.send);
		}
		test.send = str.replace(_sendRegExp, function(match, p1) {
			if (p1 === "count") return _sendCounter;
			if (p1 === "time") return new Date().getTime();;
			return "";
		});
		test.send = JSON.parse(test.send);
	}
	switch (test.action) {
		case "delete":
			method = "DELETE";
			facet = "details"; // "edit" works also
			url = _crudUrl(id, klass, endpoint, rep, facet);
			break;
		case "details":
		case "edit":
			method = "GET";
			url = _crudUrl(id, klass, endpoint, rep, facet);
			break;
		case "template":
			facet = "edit";
			method = "GET";
			url = _crudUrl(null, klass, endpoint, rep, facet, test.action);
			break;
		case "create":
			facet = "edit";
			method = "POST";
			send = test.send;
			url = _crudUrl(null, klass, endpoint, rep, facet);
			break;
		case "update":
			method = "PUT";
			facet = "edit";
			url = _crudUrl(id, klass, endpoint, rep, facet);
			send = test.send;
			break;
		case "query":
			method = "GET";
			url = _crudUrl(null, klass, endpoint, rep, facet);
			break;
		case "method":
			method = "POST";
			facet = "edit";
			url = _crudUrl(id, klass, endpoint, rep, facet, test.action);
			var actParams = {};
			actParams[test.x3Method] = {
				$isRequested: true,
				$parameters: test.x3Params || {}
			};
			send = {
				$actionParams: actParams,
				$workingCopyUrl: _crudUrl(id, klass, endpoint, rep, "edit", "workingCopies"),
				$data: test.send
			};
			break;
		default:
			throw new Error("Unimplemented sdata action [" + test.action + "]");
			break;
	}
	return {
		id: id,
		method: method,
		url: url,
		send: send,
		headers: _crudHeaders(facet, rep, endpoint),
		options: $.extend({}, test.options, context.options, _defAjaxOptions),
		login: context.login || window.globalCtx.getLogin()
	};
};
// SCENARII
var testCases = [{
	id: "CRUDAQTCRUDM",
	title: "TEST CRUD AQTCRUDM",
	klass: "AQTCRUD",
	representation: "AQTCRUDM",
	// Default id if no id in test case
	testId: null,
	tests: [{
		// Read records
		action: "query",
		response: {
			callBack: function(testCase, test, send, result) {
				result.callBackMessage = "Nb records=" + ((result.jsonData && result.jsonData.$resources) || []).length;
			}
		}
	}, {
		// Create a record - Step 1 - Read empty object with new id
		action: "template",
		response: {
			status: {
				success: [200]
			},
			callBack: function(testCase, test, send, result) {
				if (result.isSuccess) {
					// ID is returned by $template
					// Save default id in context for next actions
					testCase.context.testId = result.jsonData.CODE;
					result.callBackMessage = "New id is " + result.jsonData.CODE;
				}
			}
		}
	}, {
		// Create a record - Step 2 - Modify fields and Save
		action: "create",
		response: {
			status: {
				success: [201]
			},
			callBack: function(testCase, test, send, result) {
				// Check if modify ok
				if (result.isSuccess) {
					if (result.jsonData.TEXTDES0 == send.send.TEXTDES0 && result.jsonData.TEXTE == send.send.TEXTE) {
						result.callBackMessage = "Record id[" + result.jsonData.CODE + "] saved - Fields updated";
					} else {
						result.status = "error";
						result.callBackMessage = "!! Fields not updated";
					}
				}
			}
		},
		send: function(context, test) {
			var ctx = context.prevJsonData;
			if (ctx) {
				// Mandatory key
				ctx.CODECHR = "{@count}";
				// Fields to modify
				ctx.TEXTDES = "TEXTDES {@time}";
				ctx.TDCB = _getNumber(3, 2);
				ctx.SITE = "ASN";
				return ctx;
			}
			throw new Error("send failed - no edit data");
		}
	}, {
		// Read record - id -> testId
		action: "details",
		response: {
			status: {
				success: [200]
			}
		}
	}, {
		// Edit record - id -> testId
		action: "edit",
		response: {
			status: {
				success: [200]
			}
		}
	}, {
		// Update record - id -> testId - Modify fields and save
		action: "update",
		response: {
			status: {
				success: [200]
			},
			callBack: function(testCase, test, send, result) {
				// Check if modify ok
				if (result.isSuccess) {
					if (result.jsonData.TEXTDES == send.send.TEXTDES && result.jsonData.TDCB == send.send.TDCB) {
						result.callBackMessage = "Fields updated";
					} else {
						result.status = "error";
						result.callBackMessage = "!! Fields not updated";
					}
				}
			}
		},
		send: function(context, test) {
			var ctx = context.prevJsonData;
			if (ctx) {
				ctx.TEXTDES = "TEXTDES {@time}";
				ctx.TDCB = _getNumber(3, 2);
				return ctx;
			}
			throw new Error("skip - no edit data");
		}
	}, {
		// Test method call
		action: "method",
		x3Method: "WADD_LIG44444444",
		x3Params: {},
		send: function(context, test) {
			var ctx = context.prevJsonData;
			if (ctx) {
				ctx.TDCB = 0;
				ctx.TDCB1 = _getNumber(3, 2);
				ctx.TDCB2 = _getNumber(3, 2);
				return ctx;
			}
			throw new Error("skip - no edit data");
		},
		response: {
			status: {
				success: [200]
			},
			callBack: function(testCase, test, send, result) {
				if (result.isSuccess) {
					var TDCB = parseFloat(result.jsonData.TDCB);
					console.log(TDCB);
					var TDCB1 = parseFloat(result.jsonData.TDCB1);
					var TDCB2 = parseFloat(result.jsonData.TDCB2);
					// We use _round because 543.24 + 680.35 -> 1223.5900000000001 with FireFox ???
					var sum = _round(TDCB1 + TDCB2, 2);
					if (TDCB === sum) {
						result.callBackMessage = "Method succeeded -> " + TDCB + " = " + TDCB1 + " + " + TDCB2;
					} else {
						result.status = "error";
						result.callBackMessage = "Method failed -> " + sum + " <> " + TDCB1 + " + " + TDCB2;
					}
				}
			}
		}
	}, {
		// Delete record - id -> testId
		action: "delete",
		id: function(context, test) {
			if (context.prevJsonData) {
				return context.prevJsonData.CODE;
			}
			throw new Error("id failed - no edit data");
		},
		response: {
			status: {
				success: [200, 410]
			}
		}
	}, {
		// Read record - id -> testId - 404 expected
		action: "details",
		response: {
			status: {
				success: [404]
			}
		},
		callBack: function(testCase, test, send, result) {
			// Check if modify ok
			if (result.status == 404) {
				result.callBackMessage = "404 is expected because resource has been deleted previously";
			}
		}
	}]
}];


var _tempo = function(tempo) {
	var deferred = $.Deferred();
	window.setTimeout(function() {
		deferred.resolve();
	}, tempo);
	return deferred.promise();
};
var _defResponse = {
	// Return a {status: status,message:message}
	callBack: null,
	status: {
		success: [200, 201]
	},
	data: null
};
var _execSdata = function(testCase, test) {
	var deferred = $.Deferred();
	var checkResponse = $.extend({}, _defResponse, test.response);
	var stSuccess = checkResponse.status.success || [];
	var stWarning = checkResponse.status.warning || [];
	try {
		var context = testCase.context;
		var http = _crudHttpData(context, test);
		sdataHttp.send(http).always(function(result) {
			var message, title = "Action = " + test.action;
			if (http.id) title += " - Id: " + http.id;
			if (context.login) title += " - User: " + context.login.user;
			title += " - ";
			try {
				title += "HtttpStatus = " + result.status;
				message = result.textStatus + " - " + result.descrHttpStatus;
				if (checkResponse.callBack) {
					// Allows customization
					checkResponse.callBack(testCase, test, http, result);
					if (result.callBackMessage) message += "\n" + result.callBackMessage;
				}
				if (result.jsonData && result.jsonData.$diagnoses && result.jsonData.$diagnoses.length > 0) {
					result.jsonData.$diagnoses.forEach(function(d) {
						message += "\nDiagnose - " + d.$severity + " - " + d.$message;
					});
				}
				if (result.exception) message += "\n" + result.exception.message;
				status = stSuccess.indexOf(result.status) >= 0 ? "success" : stWarning.indexOf(result.status) >= 0 ? "warning" : "error";
				// Store last json data - useful for edit->update
				testCase.context.prevJsonData = result.jsonData;
			} catch (e) {
				title += "Javascript Process response Exception";
				log && log(title);
				log && log(e);
				status = "error";
				message = e.message;
				testCase.context.prevJsonData = null;
			} finally {
				testCase.addResult(title, status, message);
				deferred.resolve();
			}
		});
	} catch (e) {
		var ttl = "Javascript execSdata Exception";
		log && log(ttl);
		log && log(e);
		testCase.addResult(ttl, "error", e.message);
		deferred.resolve();
	}
	return deferred.promise();
};

var _execTestCase = function(testset, kase) {
	var deferred = $.Deferred();
	try {
		log && log("_execTestCase - Start - " + kase.title);
		var testCase = testset.addTestcase(kase.title, kase);
		var exec = function(i) {
			if (i < kase.tests.length) {
				log && log("exec test - " + i + " - " + kase.tests[i].action);
				_tempo(i == 0 ? 0 : 100).then(function() {
					_execSdata(testCase, kase.tests[i]).always(function() {
						exec(i + 1);
					});
				});
			} else {
				log && log("_execTestCase - Stop - " + kase.title);
				deferred.resolve();
			}
		};
		exec(0);
	} catch (e) {
		deferred.resolve();
	}
	return deferred.promise();
};

exports.modulename = "stateless";
exports.test = function() {
	var deferred = new $.Deferred();
	try {
		var testset = testUtil.addTestset("StateLess Protocol Test");
		log && log("Start - " + testset.data.title);
		var caseDeferreds = [];
		testCases.forEach(function(kase, idx) {
			caseDeferreds.push(_execTestCase(testset, kase));
		});
		$.when(caseDeferreds).then(function() {
			deferred.resolve();
		}, function(e) {
			deferred.reject(e);
		});
	} catch (e) {
		log && log("Test Stateless - Exception");
		log && log(e);
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
};