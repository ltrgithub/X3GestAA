"use strict";
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger(
	"testStateless");
var testUtil = require('syracuse-tablet/test/js/testUtil');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;

var _httpStatus = {
	"200": 'Ok',
	"201": 'Created',
	"400": 'Bad Request',
	"401": 'Unauthenticated',
	"403": 'Forbidden',
	"404": 'Not Found',
	"405": 'Method Not Allowed',
	"406": 'Not Acceptable',
	"409": 'Conflict',
	"410": 'Gone',
	"411": 'Length Required',
	"412": 'Precondition Failed',
	"413": 'Request Entity Too Large',
	"414": 'Request URI Too Long',
	"415": 'Unsupported Media Type',
	"422": 'Unprocessable Entity',
	"429": 'Too Many Requests',
	"500": 'Internal Server Error',
	"501": 'Not Implemented',
	"502": 'Bad Gateway',
	"503": 'Service Unavailable',
	"504": 'Gateway Timeout'
};

var _baseUrl = window.location.protocol + "//" + window.location.host;

// pc101329.sagefr.adinternal.com:8124/sdata/x3/erp/SUPERV/AQTCRUD(%2710%27)?representation=AQTCRUDM.%24details&device=phone
var _defEndpoint = "sdata/x3/erp/SUPERV";
var _defAjaxOptions = {
	timeout: 0,
	completeCallback: true,
	noJsonParsing: true
};
// Like Stateless protocol doesn't work we can switch to batch protocol - the
// one used by current application
var _batchProtocol = true;

var _crudUrl = function(id, klass, endpoint, rep, facet) {
	var url = [_baseUrl, '/', endpoint || _defEndpoint, '/', klass];
	if (id) {
		url.push("(");
		url.push(escape("'" + id + "'"));
		url.push(")");
	}
	if (_batchProtocol && rep && facet) {
		url.push("?representation=");
		url.push(rep);
		url.push(".$");
		url.push(facet);
	}
	return url.join('');
};
var _crudHeaders = function(facet, rep, endpoint) {
	var headers = 'application/json';
	headers += ';';
	headers += 'vnd.sage.syracuse.representation=';
	headers += ((endpoint || _defEndpoint) + '/' + rep + "/$" + facet).replace(
		/\//g, '.');
	return {
		"Accept": headers
	};
};
var _crudHttpData = function(testCase, test) {
	var method, url, send, headers;
	var facet = test.action;
	var id = test.id || testCase.testId;
	var klass = test.klass || testCase.klass;
	var rep = test.representation || testCase.representation;
	var endpoint = test.endpoint || testCase.endpoint;
	switch (test.action) {
		case "delete":
			method = "DELETE";
			facet = "edit";
			url = _crudUrl(id, klass, endpoint, rep, facet);
			break;
		case "details":
		case "edit":
			method = "GET";
			url = _crudUrl(id, klass, endpoint, rep, facet);
			break;
		case "create":
			facet = "edit";
			method = "GET";
			url = _crudUrl(facet, klass, endpoint) + '/$template?representation=' + escape(rep + '.$' + facet);
			break;
		case "update":
			method = "PUT";
			facet = "edit";
			url = _crudUrl(id, klass, endpoint, rep, facet);
			break;
		case "query":
			method = "GET";
			url = _crudUrl(id, klass, endpoint, rep, facet);
			break;
		default:
			throw new Error("Unimplemented sdata action [" + test.action + "]");
			break;
	}
	return {
		method: method,
		url: url,
		send: send,
		headers: _crudHeaders(facet, rep, endpoint),
		options: $.extend({}, test.options, testCase.options, _defAjaxOptions)
	};
};

var testCases = [{
	id: "CRUDAQMCRUDM",
	title: "TEST CRUD AQMCRUDM",
	klass: "AQMDEVICE",
	representation: "AQMCRUDM",
	testId: 12435,
	tests: [{
		action: "details",
		id: 12250,
		response: {
			status: {
				success: [200],
				warning: [404]
			}
		}
	}, {
		action: "edit",
		id: 12250,
		response: {
			status: {
				success: [200],
				warning: [404]
			}
		}
	}]
}];
/*
 * , { action : "delete", id:12250 }, { action : "create", data : {
 *  } }, { action : "query" }, { action : "details" }, { action : "edit" }, {
 * action : "delete" }, { action : "update", data : {
 *  } }
 */

var _defResponse = {
	// Return a {status: status,message:message}
	callBack: null,
	status: {
		success: [200, 201]
	},
	data: null
};
var _execSdata = function(testCase, test) {
	var deferred = $.Deferred();
	var checkResponse = $.extend({}, _defResponse, test.response);
	var stSuccess = checkResponse.status.success || [];
	var stWarning = checkResponse.status.warning || [];
	try {
		console.log("_execSdata - Start - " + test.action);
		var http = _crudHttpData(testCase.data.data, test);
		console.log(JSON.stringify(http, null, 2));
		ajax(http.method, http.url, http.send, http.headers, http.options)
			.always(
				function(xhrOrError, textStatus) {
					console.log("\tajax response - textStatus=" + textStatus);
					var status, message, title;
					try {
						if (utils.isError(xhrOrError)) {
							console.log(xhrOrError);
							title = "Action = " + test.action + " - Ajax Javascript Exception";
							status = "error";
							message = xhrOrError.message;
						} else {
							var httpStatus = xhrOrError.status;
							title = "Action = " + test.action + " - HtttpStatus = " + httpStatus;
							if (checkResponse.callBack) {
								var r = checkResponse.callBack(test,
									httpStatus,
									xhrOrError.responseText);
								status = r.status;
								message = r.message;
							} else {
								message = httpStatus + "  " + (_httpStatus[httpStatus] || "");
								status = stSuccess.indexOf(httpStatus) >= 0 ? "success" : stWarning.indexOf(httpStatus) >= 0 ? "warning" : "error";
							}
						}
					} catch (e) {
						title = "Action = " + test.action + " - Javascript Process response Exception";
						status = "error";
						message = e.message;
					} finally {
						testCase.addResult(title, status, message);
						deferred.resolve();
					}
				});
	} catch (e) {
		console.log(e);
		testCase
			.addResult("Javascript execSdata Exception", "error", e.message);
		deferred.resolve();
	}
	return deferred.promise();
};

var _execTestCase = function(testset, kase) {
	var deferred = $.Deferred();
	try {
		console.log("_execTestCase - Start - " + kase.title);
		var testCase = testset.addTestcase(kase.title, kase);
		var exec = function(i) {
			if (i < kase.tests.length) {
				console.log("exec test - " + i + " - " + kase.tests[i].action);
				_execSdata(testCase, kase.tests[i]).always(function() {
					exec(i + 1);
				});
			} else {
				console.log("_execTestCase - Stop - " + kase.title);
				deferred.resolve();
			}
		};
		exec(0);
	} catch (e) {
		deferred.resolve();
	}
	return deferred.promise();
};

exports.test = function() {
	var deferred = new $.Deferred();
	try {
		var testset = testUtil.addTestset("StateLess Protocol Test");
		console.log("Start - " + testset.data.title);
		var caseDeferreds = [];
		testCases.forEach(function(kase, idx) {
			caseDeferreds.push(_execTestCase(testset, kase));
		});
		$.when(caseDeferreds).then(function() {
			deferred.resolve();
		}, function(e) {
			deferred.reject(e);
		});
	} catch (e) {
		console.log("Test Stateless - Exception");
		console.log(e);
		deferred.reject(e);
	}

	return deferred.promise();
};