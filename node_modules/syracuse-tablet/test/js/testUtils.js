"use strict";
var log = require('syracuse-tablet/html/js/helpers/logger').log;
var libTests = require('syracuse-tablet/test/js/libTests');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var dataset = require('syracuse-tablet/html/js/prototype/dataset');
var prototype = require('syracuse-tablet/html/js/prototype/prototype');

exports.modulename = "utilities";

var _baseUrl = "http://pc101329.sagefr.adinternal.com:8124/sdata/x3/erp/SUPERV";
var _dataSdataUtils = {
	title: "General sdata/prototype.dataset Unit Tests",
	testCases: [{
		title: "sdata url",
		tests: [{
			code: "1234",
			key: "5678",
			data: {
				"create": "{$baseUrl}/AQTCRUD/$template/$workingCopies?representation=AQTCRUDM.$edit",
				"query": "{$baseUrl}/AQTCRUD?representation=AQTCRUDM.$query",
				"details": "{$baseUrl}/AQTCRUD('{CODE}')?representation=AQTCRUDM.$details",
				"edit": "{$baseUrl}/AQTCRUD('{CODE}')/$workingCopies?representation=AQTCRUDM.$edit",
				"delete": "{$baseUrl}/AQTCRUD('{CODE}')?representation=AQTCRUDM.$detail"
			},
			run: function(testset, testCase, test) {
				for (var p in test.data) {
					var url = test.data[p].replace("{$baseUrl}", _baseUrl).replace("{CODE}", test.code);
					var res = sdataUtils.parseSDataURL(url);
					console.log(JSON.stringify(res, null, 2));
					var ok = false;
					if (res) {
						ok = res.application == "x3" && res.contract == "erp" && res.dataset == "SUPERV" && res.entity == "AQTCRUD" && res.representation == "AQTCRUDM";
						if (p != "delete" && p != "create") ok = ok && res.facet === p;
						if (p == "edit" || p == "delete" || p == "details") ok = ok && res.id == test.code;
						if (p == "create") ok = ok && res.createActivity == true && res.editActivity === false;
						if (p == "edit") ok = ok && res.createActivity === false && res.editActivity === true;
					}
					testCase.addResult("Url " + p + (ok ? " ok" : " ko"), ok);
				}
			}
		}]
	}, {
		title: "prototype expressions url",
		tests: [{
			dataset: function(test) {
				if (!test._dataset) {
					var proto = prototype.create({
						"$baseUrl": "http://host:8124/sdata/x3/erp/GX3APP",
						"$baseType": "application/json;vnd.sage=syracuse;vnd.sage.syracuse.representation=x3.erp.GX3APP",
						"$prototype": "{$baseUrl}/$prototype('{$representation}.$thumb')",
						"$representation": "SOHBPCM",
						"$repUrl0": "{$baseUrl}/{$representation}",
						"$repUrl": "{$repUrl0}/TEST3LEVELS",
						"$instanceUrl": "{$repUrl}/SOQ",
						"$url": "{$baseUrl}/SOHBPCM?representation=SOHBPCM.$query",
						"$localization": {
							"@12236": "Summary"
						}
					});
					test._dataset = dataset.create({
						BPCNUM: "12345",
						PACTION: "98765",
						VACBPR: "001122",
						LEG: "334455"
					}, proto);
				}
				return test._dataset;
			},
			expressions: [{
				prop: "$url",
				expr: "{$baseUrl}/BPCUSTOMER('{BPCNUM}')/$services/BPCLOCK?representation=BPCUSTOMERM.$query&PACTION={PACTION}",
				res: "http://host:8124/sdata/x3/erp/GX3APP/BPCUSTOMER('12345')/$services/BPCLOCK?representation=BPCUSTOMERM.$query&PACTION=98765"
			}, {
				prop: "$key",
				expr: "{VACBPR}~{LEG}",
				res: "001122~334455"
			}, {
				prop: "$value",
				expr: "{VACBPR}",
				res: "001122"
			}, {
				prop: "$instanceUrl",
				expr: "{$repUrl}/SOQ",
				res: "http://host:8124/sdata/x3/erp/GX3APP/SOHBPCM/TEST3LEVELS/SOQ"
			}, {
				prop: "$prototype",
				expr: "{$baseUrl}/$prototype('{$representation}.$thumb')",
				res: "http://host:8124/sdata/x3/erp/GX3APP/$prototype('SOHBPCM.$thumb')"
			}, {
				prop: "$title",
				expr: "{@12236}",
				res: "Summary"
			}],
			run: function(testset, testCase, test) {
				test.expressions.forEach(function(data) {
					var res = test.dataset(test).parseExpression(data.expr);
					log(res);
					var ok = res === data.res;
					var msg = null;
					if (!ok) {
						msg = "got [" + res + "]\nexpected [" + data.res + "]";
					} else {
						msg = "Result -> " + data.res;
					}
					testCase.addResult(data.expr + "  -> " + (ok ? " ok" : " ko"), ok, msg);
				});
			}
		}]
	}]
};

var _dataGenUtils = {
	title: "General Utils Unit Tests",
	data: {},
	testCases: [{
		title: "Test classes",
		data: {},
		tests: [{
			title: "Child classes and private/public properties",
			run: function(testset, testCase, test) {
				var C1 = utils.defineClass(function(p1) {
					var _private1 = "private" + p1;
					this.public1 = "public" + p1;
					this.getPrivate1 = function() {
						return _private1;
					};
				}, null, {
					getPridvate1: function() {
						return this._private1;
					}
				});
				var C2 = utils.defineClass(function(p1, p2) {
					C1.call(this, p1);
					var _private2 = "private" + p2;
					this.public2 = "public" + p2;
					this.getPrivate2 = function() {
						return _private2;
					};
				}, C1, {});
				var o = new C2("P1", "P2");
				var ok = o.public1 == "publicP1" && o.public2 == "publicP2" && o.getPrivate1() == "privateP1" && o.getPrivate2() == "privateP2";
				testCase.addResult("test " + test.title, ok, ok ? "Success" : "Error in properies");
			}
		}]
	}]
};
var _testSets = [_dataGenUtils, _dataSdataUtils];
var _runTestSet = function(dataTestSet) {
	var deferred = new $.Deferred();
	var testset = libTests.addTestset(dataTestSet.title);
	window.setTimeout(function() {
		dataTestSet.testCases.forEach(function(dataTestCase) {
			var testCase;
			try {
				var testCase = testset.addTestcase(dataTestCase.title, dataTestCase);
				dataTestCase.tests.forEach(function(dataTest) {
					dataTest.run(testset, testCase, dataTest);
				});
				deferred.resolve();
			} catch (e) {
				log && log(dataTestCase.title + " ERROR");
				log && log(e);
				if (testCase) testCase.addResult("Javascript exception", "error", e);
				deferred.resolve();
			}
		});
	}, 10);
	return deferred.promise();
};

exports.test = function() {
	var deferred = new $.Deferred();
	try {
		var deferreds = [];
		_testSets.forEach(function(testSet) {
			deferreds.push(_runTestSet(testSet));
		});
		$.when.apply(null, deferreds).always(function() {
			deferred.resolve();
		});
	} catch (e) {
		log && log("Test Utilities - Exception");
		log && log(e);
		deferred.reject(e, exports.modulename);
	} finally {
		return deferred.promise();
	}
};