"use strict";
var log = require('syracuse-tablet/html/js/helpers/logger').log;
var libTests = require('syracuse-tablet/test/js/libTests');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');

exports.modulename = "utilities";


var _baseUrl = "http://pc101329.sagefr.adinternal.com:8124/sdata/x3/erp/SUPERV";
var _dataSdataUtils = {
	title: "General sdataUtils Unit Tests",
	data: {},
	testCases: [{
		title: "sdata url",
		tests: [{
			code: "1234",
			key: "5678",
			data: {
				"create": "{$baseUrl}/AQTCRUD/$template/$workingCopies?representation=AQTCRUDM.$edit",
				"query": "{$baseUrl}/AQTCRUD?representation=AQTCRUDM.$query",
				"detail": "{$baseUrl}/AQTCRUD('{CODE}')?representation=AQTCRUDM.$details",
				"edit": "{$baseUrl}/AQTCRUD('{CODE}')/$workingCopies?representation=AQTCRUDM.$edit",
				"delete": "{$baseUrl}/AQTCRUD('{CODE}')?representation=AQTCRUDM.$query"
			},
			run: function(testset, testCase, test) {
				for (var p in test.data) {
					var url = test.data[p].replace("{$baseUrl}", _baseUrl).replace("{CODE}", test.code).replace("{CODE}", test.code);
					var res = sdataUtils.parseSDataURL(url);
					var ok = false;
					log(JSON.stringify(res, null, 2));
					if (res) {
						ok = res.application == "x3" && res.contract == "erp" && res.dataset == "SUPERV" && res.entity == "AQTCRUD" && res.query.representation.indexOf("AQTCRUDM.") == 0;
						if (p == "edit" || p == "delete" || p == "detail") {
							ok = ok && res.id == test.code;
						}
					}
					testCase.addResult("Url " + p + (ok ? " ok" : " ko"), ok);
				}
			}
		}]
	}]
};

var _dataGenUtils = {
	title: "General Utils Unit Tests",
	data: {},
	testCases: [{
		title: "Test classes",
		data: {},
		tests: [{
			title: "Child classes and private/public properties",
			run: function(testset, testCase, test) {
				var C1 = utils.defineClass(function(p1) {
					var _private1 = "private" + p1;
					this.public1 = "public" + p1;
					this.getPrivate1 = function() {
						return _private1;
					};
				}, null, {
					getPridvate1: function() {
						return this._private1;
					}
				});
				var C2 = utils.defineClass(function(p1, p2) {
					C1.call(this, p1);
					var _private2 = "private" + p2;
					this.public2 = "public" + p2;
					this.getPrivate2 = function() {
						return _private2;
					};
				}, C1, {});
				var o = new C2("P1", "P2");
				var ok = o.public1 == "publicP1" && o.public2 == "publicP2" && o.getPrivate1() == "privateP1" && o.getPrivate2() == "privateP2";
				testCase.addResult("test " + test.title, ok, ok ? "Success" : "Error in properies");
			}
		}]
	}]
};


var _runTestSet = function(dataTestSet) {
	var deferred = new $.Deferred();
	var testset = libTests.addTestset(dataTestSet.title);
	window.setTimeout(function() {
		dataTestSet.testCases.forEach(function(dataTestCase) {
			var testCase;
			try {
				var testCase = testset.addTestcase(dataTestCase.title, dataTestCase);
				dataTestCase.tests.forEach(function(dataTest) {
					dataTest.run(testset, testCase, dataTest);
				});
				deferred.resolve();
			} catch (e) {
				log && log(dataTestCase.title + " ERROR");
				log && log(e);
				if (testCase) testCase.addResult("Javascript exception", "error", e);
				deferred.resolve();
			}
		});
	}, 10);
	return deferred.promise();
};

exports.test = function() {
	var deferred = new $.Deferred();
	try {
		var processes = [];
		[_dataGenUtils, _dataSdataUtils].forEach(function(testSet) {
			processes.push(_runTestSet(testSet));
		});
		$.when(processes).always(function() {
			deferred.resolve();
		});
	} catch (e) {
		log && log("Test Utilities - Exception");
		log && log(e);
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
};