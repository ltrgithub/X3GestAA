"use strict";
var log = require('syracuse-tablet/html/js/helpers/logger').log;
var libTests = require('syracuse-tablet/test/js/libTests');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var factory = require('syracuse-tablet/html/js/application/appFactory');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

exports.modulename = "utilities";

/**
 * NOTIFICATIONS
 */
var _Subscriber = function(letter) {
	this.name = "Subscriber" + (letter || "");
	this.notifications = [];
	this.resetNotifs = function() {
		this.notifications = [];
	};
	this.notified = function(event) {
		return this.notifications.indexOf(event) >= 0;
	};
	this.notifLogin = function(testCase) {
		this.notifications.push("login");
		testCase.addResult(this.name + " -> Notification LOGIN", true);
	};
	this.notifLogout = function(testCase) {
		this.notifications.push("logout");
		testCase.addResult(this.name + " -> Notification LOGOUT", true);
	};
	this.notifOpen = function(testCase) {
		this.notifications.push("open");
		testCase.addResult(this.name + " -> Notification OPEN", true);
	};
	this.notifClose = function(testCase) {
		this.notifications.push("close");
		testCase.addResult(this.name + " -> Notification CLOSE", true);
	};
};
/**
 * NOTIFICATIONS
 */
var _dataNotifications = {
	title: "Notifications - Publish/Subscribe pattern",
	testCases: [{
		title: "Test simple object",
		tests: [{
			run: function(testset, testCase, test) {
				var subscriber = new _Subscriber();
				notifications.reset();
				notifications.subscribe(subscriber, ["sm.login", "sm.logout"]);
				var check = notifications.check(subscriber);
				testCase.addResult("Check subscribe", check["sm.login"] === 1 && check["sm.logout"] === 1);
				notifications.publish("sm.login", testCase);
				notifications.publish("sm.logout", testCase);
				testCase.addResult("subscriber has been notified with LOGIN", subscriber.notified("login"));
				testCase.addResult("subscriber has been notified with LOGOUT", subscriber.notified("logout"));
				notifications.unsubscribe(subscriber, "sm.login");
				// check each event
				testCase.addResult("Unsubscribe sm.login", (notifications.check(subscriber, "sm.login")["sm.login"]) === 0 && (notifications.check(subscriber, "sm-logout")["sm.logout"]) === 1);
				notifications.unsubscribe(subscriber, "sm.logout");
				// check all event
				var check = notifications.check(subscriber, ["sm-logout", "sm.login"]);
				testCase.addResult("Unsubscribe sm.logout", check["sm.login"] === 0 && check["sm.logout"] === 0);
				subscriber.resetNotifs();
				notifications.publish("sm.login", testCase);
				notifications.publish("sm.logout", testCase);
				testCase.addResult("subscriber has not been notified with LOGIN", !subscriber.notified("login"));
				testCase.addResult("subscriber has not been notified with LOGOUT", !subscriber.notified("logout"));
			}
		}]
	}, {
		title: "Test multiple objects",
		tests: [{
			run: function(testset, testCase, test) {
				var subscriberA = new _Subscriber("A");
				var subscriberB = new _Subscriber("B");
				var subscriberC = new _Subscriber("C");
				notifications.reset();
				notifications.subscribe(subscriberA, ["sm.login", "sm.logout"]);
				notifications.subscribe(subscriberB, ["sm.close", "sm.logout"]);
				notifications.subscribe(subscriberC, ["sm.open", "sm.close", "sm.login"]);
				var checkA = notifications.check(subscriberA);
				testCase.addResult("Check subscriberA", checkA["sm.login"] === 1 && checkA["sm.logout"] === 1);
				var checkB = notifications.check(subscriberB);
				testCase.addResult("Check subscriberB", checkB["sm.close"] === 1 && checkB["sm.logout"] === 1);
				var checkAll = notifications.check(null);
				testCase.addResult("Check subscribe all events", checkAll["sm.open"] === 1 && checkAll["sm.login"] === 2 && checkAll["sm.close"] === 2 && checkAll["sm.logout"] === 2);
				notifications.publish("sm.open", testCase);
				testCase.addResult("subscriberC has been notified with OPEN", subscriberC.notified("open") && !subscriberA.notified("open") && !subscriberB.notified("open"));
				notifications.publish("sm.close", testCase);
				testCase.addResult("subscriberB and subscriberC have been notified with CLOSE", subscriberC.notified("close") && subscriberB.notified("close") && !subscriberA.notified("close"));
				notifications.unsubscribe(subscriberC, "sm.open");
				var checkC = notifications.check(subscriberC);
				var checkAll = notifications.check();
				testCase.addResult("unsubscribe sm.open for subscriberC", checkC["sm.open"] == 0 && checkC["sm.close"] == 1 && checkC["sm.login"] == 1 && checkAll["sm.close"] == 2 && checkAll["sm.logout"] == 2 && checkAll["sm.login"] == 2);
				notifications.unsubscribe(subscriberC);
				var checkC = notifications.check(subscriberC);
				var checkAll = notifications.check();
				testCase.addResult("unsubscribe all for subscriberC", checkC["sm.open"] == 0 && checkC["sm.close"] == 0 && checkC["sm.login"] == 0 && checkAll["sm.close"] == 1 && checkAll["sm.logout"] == 2 && checkAll["sm.login"] == 1);
				notifications.unsubscribe(subscriberB);
				var checkB = notifications.check(subscriberB);
				var checkAll = notifications.check();
				testCase.addResult("unsubscribe all for subscriberB", checkB["sm.close"] == 0 && checkB["sm.logout"] == 0 && checkAll["sm.logout"] == 1 && checkAll["sm.login"] == 1);
				notifications.reset();
				var checkAll = notifications.check();
				testCase.addResult("Test reset", checkAll["sm.logout"] == 0 && checkAll["sm.login"] == 0 && checkAll["sm.close"] == 0 && checkAll["sm.open"] == 0);
			}
		}]
	}, {
		title: "Test functions callback",
		tests: [{
			run: function(testset, testCase, test) {
				var fnotifs = {
					A: [],
					B: [],
					C: []
				};
				var notified = function(letter, event) {
					return fnotifs[letter].indexOf(event) >= 0;
				};
				var fA = function(event, ftestCase) {
					fnotifs["A"].push(event);
					ftestCase.addResult("fA -> " + event + " notification", true);
				};
				var fB = function(event, ftestCase) {
					fnotifs["B"].push(event);
					ftestCase.addResult("fB -> " + event + " notification", true);
				};
				var fC = function(event, ftestCase) {
					fnotifs["C"].push(event);
					ftestCase.addResult("fC -> " + event + " notification", true);
				};
				notifications.reset();
				notifications.subscribe(fA, ["sm.login", "sm.logout"]);
				notifications.subscribe(fB, ["sm.close", "sm.logout"]);
				notifications.subscribe(fC, ["sm.open", "sm.close", "sm.login"]);
				var checkA = notifications.check(fA);
				testCase.addResult("Check fA", checkA["sm.login"] === 1 && checkA["sm.logout"] === 1);
				var checkAll = notifications.check(null);
				testCase.addResult("Check subscribe all events", checkAll["sm.open"] === 1 && checkAll["sm.login"] === 2 && checkAll["sm.close"] === 2 && checkAll["sm.logout"] === 2);
				notifications.publish("sm.open", testCase);
				testCase.addResult("fC has been notified with OPEN", notified("C", "sm.open") && !notified("A", "sm.open") && !notified("B", "sm.open"));
				notifications.publish("sm.close", testCase);
				testCase.addResult("fB and fC have been notified with CLOSE", notified("C", "sm.close") && notified("B", "sm.close") && !notified("A", "sm.close"));
				notifications.unsubscribe(fC, "sm.open");
				var checkC = notifications.check(fC);
				var checkAll = notifications.check();
				testCase.addResult("unsubscribe sm.open for fC", checkC["sm.open"] == 0 && checkC["sm.close"] == 1 && checkC["sm.login"] == 1 && checkAll["sm.close"] == 2 && checkAll["sm.logout"] == 2 && checkAll["sm.login"] == 2);
				notifications.unsubscribe(fC);
				var checkC = notifications.check(fC);
				var checkAll = notifications.check();
				testCase.addResult("unsubscribe all for fC", checkC["sm.open"] == 0 && checkC["sm.close"] == 0 && checkC["sm.login"] == 0 && checkAll["sm.close"] == 1 && checkAll["sm.logout"] == 2 && checkAll["sm.login"] == 1);
				notifications.unsubscribe(fB);
				var checkB = notifications.check(fB);
				var checkAll = notifications.check();
				testCase.addResult("unsubscribe all for fB", checkB["sm.close"] == 0 && checkB["sm.logout"] == 0 && checkAll["sm.logout"] == 1 && checkAll["sm.login"] == 1);
				notifications.reset();
				var checkAll = notifications.check();
				testCase.addResult("Test reset", checkAll["sm.logout"] == 0 && checkAll["sm.login"] == 0 && checkAll["sm.close"] == 0 && checkAll["sm.open"] == 0);
			}
		}]
	}, {
		title: "Test priority - Todo - UNUSED CURRENTLY",
		tests: []
	}]
};
/**
 * SDATAUTILS
 */
var _baseUrl = "http://pc101329.sagefr.adinternal.com:8124/sdata/x3/erp/SUPERV";
var _dataSdataUtils = {
	title: "General sdata/prototype.dataset Unit Tests",
	testCases: [{
		title: "sdata url",
		tests: [{
			code: "1234",
			key: "5678",
			data: {
				"create": "{$baseUrl}/AQTCRUD/$template/$workingCopies?representation=AQTCRUDM.$edit",
				"query": "{$baseUrl}/AQTCRUD?representation=AQTCRUDM.$query",
				"details": "{$baseUrl}/AQTCRUD('{CODE}')?representation=AQTCRUDM.$details",
				"edit": "{$baseUrl}/AQTCRUD('{CODE}')/$workingCopies?representation=AQTCRUDM.$edit",
				"delete": "{$baseUrl}/AQTCRUD('{CODE}')?representation=AQTCRUDM.$detail"
			},
			run: function(testset, testCase, test) {
				for (var p in test.data) {
					var url = test.data[p].replace("{$baseUrl}", _baseUrl).replace("{CODE}", test.code);
					var res = sdataUtils.parseSDataURL(url);
					console.log(JSON.stringify(res, null, 2));
					var ok = false;
					if (res) {
						ok = res.application == "x3" && res.contract == "erp" && res.dataset == "SUPERV" && res.entity == "AQTCRUD" && res.representation == "AQTCRUDM";
						if (p != "delete" && p != "create") ok = ok && res.facet === p;
						if (p == "edit" || p == "delete" || p == "details") ok = ok && res.id == test.code;
						if (p == "create") ok = ok && res.createActivity == true && res.editActivity === false;
						if (p == "edit") ok = ok && res.createActivity === false && res.editActivity === true;
					}
					testCase.addResult("Url " + p + (ok ? " ok" : " ko"), ok);
				}
			}
		}]
	}, {
		title: "prototype expressions url",
		tests: [{
			proto: function(test) {
				if (test._proto) return test._proto;
				var proto = prototype.create({
					"$baseUrl": "http://host:8124/sdata/x3/erp/GX3APP",
					"$baseType": "application/json;vnd.sage=syracuse;vnd.sage.syracuse.representation=x3.erp.GX3APP",
					"$prototype": "{$baseUrl}/$prototype('{$representation}.$thumb')",
					"$representation": "SOHBPCM",
					"$repUrl0": "{$baseUrl}/{$representation}",
					"$repUrl": "{$repUrl0}/TEST3LEVELS",
					"$instanceUrl": "{$repUrl}/SOQ",
					"$url": "{$baseUrl}/SOHBPCM?representation=SOHBPCM.$query",
					"$localization": {
						"@12236": "Summary",
						"@56789": "It's the title",
						"@282": "Text Description",
						"@323": "Short CurRef"
					}
				});
				test._proto = prototype.create({
					"$childtitle": "{@56789}",
					"$myurl": "{$baseUrl}/{$representation}.$thumb",
					"$properties": {
						"TEXTDES": {
							"$title": "{@282}"
						},
						"CUR_REF": {
							"$shorttitle": "{@323}",
							"$url": "{$baseUrl}/TABCUR('{$key}')?representation=TABCURM.$lookup",
							"$value": "{CUR}",
							"$key": "{CUR}",
							"$properties": {
								"CUR": {
									"$type": "application/x-string"
								}
							}
						}
					}
				}, proto);
				return test._proto;
			},
			dataset: function(test) {
				if (test._dataset) return test._dataset;
				test._dataset = factory.createDaoSdata("representation", {
					BPCNUM: "12345",
					PACTION: "98765",
					VACBPR: "001122",
					LEG: "334455",
					CUR: "EUR"
				}, test.proto(test));
				return test._dataset;
			},
			expressions: [{
				prop: "$url",
				expr: "{$baseUrl}/BPCUSTOMER('{BPCNUM}')/$services/BPCLOCK?representation=BPCUSTOMERM.$query&PACTION={PACTION}",
				res: "http://host:8124/sdata/x3/erp/GX3APP/BPCUSTOMER('12345')/$services/BPCLOCK?representation=BPCUSTOMERM.$query&PACTION=98765"
			}, {
				prop: "$key",
				expr: "{VACBPR}~{LEG}",
				res: "001122~334455"
			}, {
				prop: "$value",
				expr: "{VACBPR}",
				res: "001122"
			}, {
				prop: "$instanceUrl",
				expr: "{$repUrl}/SOQ",
				res: "http://host:8124/sdata/x3/erp/GX3APP/SOHBPCM/TEST3LEVELS/SOQ"
			}, {
				prop: "$prototype",
				expr: "{$baseUrl}/$prototype('{$representation}.$thumb')",
				res: "http://host:8124/sdata/x3/erp/GX3APP/$prototype('SOHBPCM.$thumb')"
			}, {
				prop: "$title",
				expr: "{@12236}",
				res: "Summary"
			}, {
				prop: "$childtitle",
				expr: null,
				res: "It's the title"
			}, {
				prop: "$myurl",
				expr: null,
				res: "http://host:8124/sdata/x3/erp/GX3APP/SOHBPCM.$thumb"
			}, {
				prop: "$prototype",
				expr: null,
				res: "http://host:8124/sdata/x3/erp/GX3APP/$prototype('SOHBPCM.$thumb')"
			}, {
				prop: "TEXTDES.$title",
				expr: null,
				res: "Text Description"
			}, {
				prop: "CUR_REF.$shorttitle",
				expr: null,
				res: "Short CurRef"
			}, {
				prop: "CUR_REF.$url",
				expr: null,
				res: "http://host:8124/sdata/x3/erp/GX3APP/TABCUR('')?representation=TABCURM.$lookup"
			}, {
				prop: "CUR_REF.$value",
				expr: null,
				res: "EUR"
			}],
			run: function(testset, testCase, test) {
				test.expressions.forEach(function(data) {
					var res, expr;
					if (data.expr) {
						// Test parseexpression
						res = test.dataset(test).parseExpression(data.expr);
						expr = "expression [" + data.expr + "]";
					} else {
						// Test prototype data and property method
						// Resolve expression with dataset and protype as data context
						var props = data.prop.split('.');
						if (props.length === 1) {
							// Access to a property  - proto.$url...
							res = test.proto(test).data(data.prop, test.dataset(test));
							expr = "proto.data(" + data.prop + ")";
						} else if (props.length === 2) {
							// Access to a property of $properties - proto.$properties.CUR_REF.$value...
							res = test.proto(test).property(props[0], props[1], test.dataset(test));
							expr = "proto.property(" + data.prop + ")";
						}
					}
					log(res);
					var ok = res === data.res;
					var msg = null;
					if (!ok) {
						msg = "got [" + res + "]\nexpected [" + data.res + "]";
					} else {
						msg = "Result -> " + data.res;
					}
					testCase.addResult(expr + "  -> " + (ok ? " ok" : " ko"), ok, msg);
				});
			}
		}]
	}]
};
/**
 * GENERAL UTILITIES
 */
var _dataGenUtils = {
	title: "General Utils Unit Tests",
	data: {},
	testCases: [{
		title: "Test classes",
		data: {},
		tests: [{
			title: "Child classes and private/public properties",
			run: function(testset, testCase, test) {
				var C1 = utils.defineClass(function(p1) {
					var _private1 = "private" + p1;
					this.public1 = "public" + p1;
					this.getPrivate1 = function() {
						return _private1;
					};
				}, null, {
					getPridvate1: function() {
						return this._private1;
					}
				});
				var C2 = utils.defineClass(function(p1, p2) {
					C1.call(this, p1);
					var _private2 = "private" + p2;
					this.public2 = "public" + p2;
					this.getPrivate2 = function() {
						return _private2;
					};
				}, C1, {});
				var o = new C2("P1", "P2");
				var ok = o.public1 == "publicP1" && o.public2 == "publicP2" && o.getPrivate1() == "privateP1" && o.getPrivate2() == "privateP2";
				testCase.addResult("test " + test.title, ok, ok ? "Success" : "Error in properies");
			}
		}]
	}]
};
/**
 * TESTSETS
 */
var _testSets = [_dataGenUtils, _dataSdataUtils, _dataNotifications] // _dataNotifications]; //_dataGenUtils, _dataSdataUtils,;
var _runTestSet = function(dataTestSet) {
	var deferred = new $.Deferred();
	var testset = libTests.addTestset(dataTestSet.title);
	window.setTimeout(function() {
		dataTestSet.testCases.forEach(function(dataTestCase) {
			var testCase;
			try {
				var testCase = testset.addTestcase(dataTestCase.title, dataTestCase);
				dataTestCase.tests.forEach(function(dataTest) {
					dataTest.run(testset, testCase, dataTest);
				});
				deferred.resolve();
			} catch (e) {
				log && log(dataTestCase.title + " ERROR");
				log && log(e);
				if (testCase) testCase.addResult("Javascript exception", "error", e);
				deferred.resolve();
			}
		});
	}, 10);
	return deferred.promise();
};

exports.test = function() {
	var deferred = new $.Deferred();
	try {
		var deferreds = [];
		_testSets.forEach(function(testSet) {
			deferreds.push(_runTestSet(testSet));
		});
		$.when.apply(null, deferreds).then(function() {
			deferred.resolve();
		}, function(e) {
			log && log("Test Utilities - Test rejected", e);
			deferred.reject(e, exports.modulename);
		});
	} catch (e) {
		log && log("Test Utilities - Exception", e);
		deferred.reject(e, exports.modulename);
	} finally {
		return deferred.promise();
	}
};