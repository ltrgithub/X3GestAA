"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').log;
var libTests = require('syracuse-tablet/test/js/libTests');

exports.modulename = "sdataCache";
exports.test = function() {
	var deferred = $.Deferred();
	try {
		var testset = libTests.addTestset("SData Cache Unit Tests");
		var storageModule = require('syracuse-tablet/html/js/storage/storage');
		var sdataCache = require('syracuse-tablet/html/js/sdata/sdataCache').SDataCache;
		var baseUrl = window.location.protocol + "//" + window.location.host;
		var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
		var testcase;
		var context = {
			"$user": "user",
			"$role": "role",
			"$lang": "de"
		};
		var $ep = "ep";

		var storage = storageModule.getStorage();
		var cache;
		var autilisProtoDetails;
		var autilisProtoQuery;
		var autilisDataArray;
		testcase = testset.addTestcase("Init cache");

		storage.init()
			.then(function() {
				cache = new sdataCache(storage);
				cache.setContext(context);
			})
			.then(function() {
				testcase.addResult("Initialized cache", true);
				return ajax("GET", baseUrl + "/syracuse-tablet/test/fixtures/AUTILIS.$details.proto.json");
			})
			.then(function(result) {
				testcase.addResult("Got proto 1", true);
				autilisProtoDetails = result.responseJSON;
			})
			.then(function() {
				return ajax("GET", baseUrl + "/syracuse-tablet/test/fixtures/AUTILIS.$query.proto.json");
			})
			.then(function(result) {
				testcase.addResult("Got proto 2", true);
				autilisProtoQuery = result.responseJSON;
			})
			.then(function() {
				return ajax("GET", baseUrl + "/syracuse-tablet/test/fixtures/AUTILIS.$details.data.json");
			})
			.then(function(result) {
				testcase.addResult("Got data", true);
				autilisDataArray = result.responseJSON;
			})
			.then(function() {
				var sequence = $.Deferred();
				try {
					testcase = testset.addTestcase("Insert some sdata records (details facet)");
					autilisDataArray.forEach(function(rec, idx) {
						cache.put({
							$data: rec,
							$endpoint: $ep,
							$proto: autilisProtoDetails
						})
							.then(function(status) {
								testcase.addResult("Added to cache", true);
								if (idx == (autilisDataArray.length - 1)) {
									sequence.resolve();
								}
							}, function(e) {
								sequence.reject(e);
							});
					});
				} catch (e) {
					sequence.reject(e);
				} finally {
					return sequence.promise();
				}
			})
			.then(function() {
				var sequence = $.Deferred();
				try {
					testcase = testset.addTestcase("Insert some sdata records (query facet)");
					autilisDataArray.forEach(function(rec, idx) {
						cache.put({
							$data: rec,
							$endpoint: $ep,
							$proto: autilisProtoQuery
						})
							.then(function(status) {
								testcase.addResult("Added to cache", true);
								if (idx == (autilisDataArray.length - 1)) {
									sequence.resolve();
								}
							}, function(e) {
								sequence.reject(e);
							});
					});
				} catch (e) {
					sequence.reject(e);
				} finally {
					return sequence.promise();
				}
			})
			.then(function() {
				testcase = testset.addTestcase("Query with prototype");
				return cache.query({
					$endpoint: $ep,
					$proto: autilisProtoDetails
				});
			})
			.then(function(data) {
				testcase.addResult("Check length of result", data && data.length === autilisDataArray.length);
			})
			.then(function() {
				testcase = testset.addTestcase("Query with representation name");
				return cache.query({
					$endpoint: $ep,
					$representation: "AUTILISM.$details"
				});
			})
			.then(function(data) {
				testcase.addResult("Check length of result", data && data.length === autilisDataArray.length);
			})
			.then(function() {
				var deferred = $.Deferred();
				testcase = testset.addTestcase("Query with where (wrong params test)");
				cache.query({
					$endpoint: $ep,
					$representation: "AUTILISM.$details",
					$where: "USR eq 'TST3'"
				}).then(function(data) {
					testcase.addResult("Must not succeed on missing prototype", false);
					deferred.resolve();
				}, function(error) {
					testcase.addResult("Must call reject if no prototype", true);
					deferred.resolve();
				});
				return deferred.promise();
			})
			.then(function() {
				testcase = testset.addTestcase("Query with where (single record with eq)");
				return cache.query({
					$endpoint: $ep,
					$proto: autilisProtoDetails,
					$where: "USR eq 'TST3'"
				});
			})
			.then(function(data) {
				var deferred = $.Deferred();
				try {
					testcase.addResult("Check length of result", data && data.length === 1);
					testcase.addResult("Check record", data[0].$uuid === "e543299a-2fb7-4ca3-8d5b-b03e5f44d782");
					deferred.resolve();
				} catch (e) {
					deferred.reject(e);
				} finally {
					return deferred.promise();
				}
			})
			.then(function() {
				testcase = testset.addTestcase("Query with where (many records with eq)");
				return cache.query({
					$endpoint: $ep,
					$proto: autilisProtoDetails,
					$where: "USR ge 'TST2' and USR le 'TST4'"
				});
			})
			.then(function(data) {
				var deferred = $.Deferred();
				try {
					testcase.addResult("Check length of result", data && data.length === 3);
					deferred.resolve();
				} catch (e) {
					deferred.reject(e);
				} finally {
					return deferred.promise();
				}
			})
			.then(function() {
				testcase = testset.addTestcase("Read by key using prototype");
				return cache.read({
					$endpoint: $ep,
					$key: "TST2",
					$proto: autilisProtoDetails
				});
			})
			.then(function(data) {
				var deferred = $.Deferred();
				try {
					testcase.addResult("Check data", data.$uuid === "e543299a-2fb7-4ca3-8d5b-b03e5f44d781");
					deferred.resolve();
				} catch (e) {
					deferred.reject(e);
				} finally {
					return deferred.promise();
				}
			})
			.then(function() {
				testcase = testset.addTestcase("Read by key using representation name");
				return cache.read({
					$endpoint: $ep,
					$key: "TST2",
					$representation: "AUTILISM.$details"
				});
			})
			.then(function(data) {
				var deferred = $.Deferred();
				try {
					testcase.addResult("Check data", data.$uuid === "e543299a-2fb7-4ca3-8d5b-b03e5f44d781");
					deferred.resolve();
				} catch (e) {
					deferred.reject(e);
				} finally {
					return deferred.promise();
				}
			})
			.then(function() {
				testcase = testset.addTestcase("Read by key using representation name and no result");
				return cache.read({
					$endpoint: $ep,
					$key: "TST2-invalid-value",
					$representation: "AUTILISM.$details"
				});
			})
			.then(function(data) {
				var deferred = $.Deferred();
				try {
					testcase.addResult("Check data", data === null);
					deferred.resolve();
				} catch (e) {
					deferred.reject(e);
				} finally {
					return deferred.promise();
				}
			})
			.then(function() {
				testcase = testset.addTestcase("Query with sorting on details facet");
				return cache.query({
					$endpoint: $ep,
					$proto: autilisProtoDetails,
					$orderBy: [{
						"property": "SORTPROPNUM",
						"sort": "ASC"
					}, {
						"property": "LOGIN",
						"sort": "DESC"
					}]
				});
			})
			.then(function(data) {
				var deferred = $.Deferred();
				try {
					testcase.addResult("Check sort result", data[0].LOGIN === "TST3");
					testcase.addResult("Check sort result", data[1].LOGIN === "TST4");
					testcase.addResult("Check sort result", data[2].LOGIN === "TST2");
					testcase.addResult("Check sort result", data[3].LOGIN === "TST1");
					deferred.resolve();
				} catch (e) {
					deferred.reject(e);
				} finally {
					return deferred.promise();
				}
			})
			.then(function() {
				testcase = testset.addTestcase("Query with sorting on query facet");
				return cache.query({
					$endpoint: $ep,
					$proto: autilisProtoQuery,
					$orderBy: [{
						"property": "SORTPROPNUM",
						"sort": "ASC"
					}, {
						"property": "LOGIN",
						"sort": "DESC"
					}]
				});
			})
			.then(function(data) {
				var deferred = $.Deferred();
				try {
					testcase.addResult("Check sort result", data[0].LOGIN === "TST3");
					testcase.addResult("Check sort result", data[1].LOGIN === "TST4");
					testcase.addResult("Check sort result", data[2].LOGIN === "TST2");
					testcase.addResult("Check sort result", data[3].LOGIN === "TST1");
					deferred.resolve();
				} catch (e) {
					deferred.reject(e);
				} finally {
					return deferred.promise();
				}
			})
			.then(function() {
				testcase = testset.addTestcase("Query with sorting and where on query facet");
				return cache.query({
					$endpoint: $ep,
					$proto: autilisProtoQuery,
					$where: "LOGIN ne 'TST2'",
					$orderBy: [{
						"property": "SORTPROPNUM",
						"sort": "ASC"
					}, {
						"property": "LOGIN",
						"sort": "DESC"
					}]
				});
			})
			.then(function(data) {
				var deferred = $.Deferred();
				try {
					testcase.addResult("Check length of result", data && data.length === 3);
					testcase.addResult("Check sort result", data[0].LOGIN === "TST3");
					testcase.addResult("Check sort result", data[1].LOGIN === "TST4");
					testcase.addResult("Check sort result", data[2].LOGIN === "TST1");
					deferred.resolve();
				} catch (e) {
					deferred.reject(e);
				} finally {
					return deferred.promise();
				}
			})
			.then(function() {
				testcase = testset.addTestcase("Delete by key");
				return cache.remove({
					$endpoint: $ep,
					$key: "TST2",
					$representation: "AUTILISM.$query"
				});
			})
			.then(function() {
				return cache.query({
					$endpoint: $ep,
					$proto: autilisProtoQuery
				});
			})
			.then(function(data) {
				var deferred = $.Deferred();
				try {
					testcase.addResult("Check length of result", data && data.length === 3);
					deferred.resolve();
				} catch (e) {
					deferred.reject(e);
				} finally {
					return deferred.promise();
				}
			})
			.then(function() {
				deferred.resolve();
			}, function(e) {
				if (testcase) {
					testcase.addResult("Javscript exception", "error", e);
				}
				deferred.reject(e, exports.modulename);
			});
	} catch (e) {
		log && log("Test storage error");
		log && log(e);
		deferred.reject(e, exports.modulename);
	} finally {
		return deferred.promise();
	}
};