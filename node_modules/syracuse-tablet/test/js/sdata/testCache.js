"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').log;
var libTests = require('syracuse-tablet/test/js/libTests');

exports.modulename = "sdataCache";
exports.test = function() {
	var deferred = $.Deferred();
	try {
		var testset = libTests.addTestset("SData Cache Unit Tests");
		var storageModule = require('syracuse-tablet/html/js/storage/storage');
		var sdataCache = require('syracuse-tablet/html/js/sdata/sdataCache').SDataCache;
		var baseUrl = window.location.protocol + "//" + window.location.host;
		var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
		var testcase;
		var context = {
			"$user": "user",
			"$role": "role",
			"$endpoint": "ep",
			"$lang": "de"
		};
		var storage = storageModule.getStorage();
		var cache;
		var autilisProto;
		var autilisDataArray;

		storage.init().then(function() {
			cache = new sdataCache(storage);
			cache.setContext(context);
		})
			.then(function() {
				return ajax("GET", baseUrl + "/syracuse-tablet/test/fixtures/AUTILIS.$details.proto.json");
			})
			.then(function(result) {
				autilisProto = result.responseJSON;
			})
			.then(function() {
				return ajax("GET", baseUrl + "/syracuse-tablet/test/fixtures/AUTILIS.$details.data.json");
			})
			.then(function(result) {
				autilisDataArray = result.responseJSON;
			})
			.then(function() {
				var sequence = $.Deferred();
				try {
					testcase = testset.addTestcase("Insert some sdata records");
					autilisDataArray.forEach(function(rec, idx) {
						cache.put({
							$data: rec,
							$proto: autilisProto
						})
							.then(function(status) {
								testcase.addResult("Added to cache", true);
								if (idx == (autilisDataArray.length - 1)) {
									sequence.resolve();
								}
							}, function(e) {
								sequence.reject(e);
							});
					});
				} catch (e) {
					sequence.reject(e);
				} finally {
					return sequence.promise();
				}
			})
			.then(function() {
				testcase = testset.addTestcase("Query with prototype");
				return cache.query({
					$proto: autilisProto
				});
			})
			.then(function(data) {
				testcase.addResult("Check length of result", data && data.length === autilisDataArray.length);
			})
			.then(function() {
				testcase = testset.addTestcase("Query with representation name");
				return cache.query({
					$representation: "AUTILISM.$details"
				});
			})
			.then(function(data) {
				testcase.addResult("Check length of result", data && data.length === autilisDataArray.length);
			})
			.then(function() {
				testcase = testset.addTestcase("Query with where (wrong params test)");
				cache.query({
					$representation: "AUTILISM.$details",
					$where: "USR eq 'TST3'"
				}).then(function(data) {
					testcase.addResult("Must not succeed on missing prototype", false);
				}, function(error) {
					testcase.addResult("Must call reject if no prototype", true);
				});
			})
			.then(function() {
				testcase = testset.addTestcase("Query with where (single record with eq)");
				return cache.query({
					$proto: autilisProto,
					$where: "USR eq 'TST3'"
				});
			})
			.then(function(data) {
				var deferred = $.Deferred();
				try {
					testcase.addResult("Check length of result", data && data.length === 1);
					testcase.addResult("Check record", data[0].$uuid === "e543299a-2fb7-4ca3-8d5b-b03e5f44d782");
					deferred.resolve();
				} catch (e) {
					deferred.reject(e);
				} finally {
					return deferred.promise();
				}
			})
			.then(function() {
				testcase = testset.addTestcase("Query with where (many records with eq)");
				return cache.query({
					$proto: autilisProto,
					$where: "USR ge 'TST2' and USR le 'TST4'"
				});
			})
			.then(function(data) {
				var deferred = $.Deferred();
				try {
					testcase.addResult("Check length of result", data && data.length === 3);
					deferred.resolve();
				} catch (e) {
					deferred.reject(e);
				} finally {
					return deferred.promise();
				}
			})
			.then(function() {
				testcase = testset.addTestcase("Read by key using prototype");
				return cache.read({
					$key: "TST2",
					$proto: autilisProto
				});
			})
			.then(function(data) {
				var deferred = $.Deferred();
				try {
					testcase.addResult("Check data", data.$uuid === "e543299a-2fb7-4ca3-8d5b-b03e5f44d781");
					deferred.resolve();
				} catch (e) {
					deferred.reject(e);
				} finally {
					return deferred.promise();
				}
			})
			.then(function() {
				testcase = testset.addTestcase("Read by key using representation name");
				return cache.read({
					$key: "TST2",
					$representation: "AUTILISM.$details"
				});
			})
			.then(function(data) {
				var deferred = $.Deferred();
				try {
					testcase.addResult("Check data", data.$uuid === "e543299a-2fb7-4ca3-8d5b-b03e5f44d781");
					deferred.resolve();
				} catch (e) {
					deferred.reject(e);
				} finally {
					return deferred.promise();
				}
			})
			.then(function() {
				testcase = testset.addTestcase("Read by key using representation name and no result");
				return cache.read({
					$key: "TST2-invalid-value",
					$representation: "AUTILISM.$details"
				});
			})
			.then(function(data) {
				var deferred = $.Deferred();
				try {
					testcase.addResult("Check data", data === null);
					deferred.resolve();
				} catch (e) {
					deferred.reject(e);
				} finally {
					return deferred.promise();
				}
			})
			.then(function() {
				deferred.resolve();
			}, function(e) {
				if (testcase) {
					testcase.addResult("Javscript exception", "error", e);
					console.log(e);
				} else {
					deferred.reject(e, exports.modulename);
				}
			});
	} catch (e) {
		log && log("Test storage error");
		log && log(e);
		deferred.reject(e, exports.modulename);
	} finally {
		return deferred.promise();
	}
};