"use strict";
var parser = require('syracuse-tablet/html/js/sdatawhere/parser').Parser;
var sdataUtil = require('syracuse-tablet/html/js/sdatawhere/whereUtils');

var input1 = "(login ge 'D') and (firstName ge 'G')";
var input2 = "(((VLYDAT ge @2014-06-16@) or (VLYDAT eq @@)) and (QUOSTA ne 3))";
var input3 = {
	"login": "ABC",
	"firstName": "GHI"
};
var input4 = {
	"login": "DA",
	"firstName": "GHI"
};
var input5 = {
	"VLYDAT": "2010-06-06"
};
var input6 = {
	"VLYDAT": null
};
var input7 = {
	"QUOSTA": 3
};
var input8 = {
	"QUOSTA": 4
};

// parse of "(login ge 'D') and (firstName ge 'G')"
var expectedOutput1 = {
	"children": [{
		"children": [{
			"children": null,
			"type": "identifier",
			"value": "login"
		}, {
			"children": null,
			"type": "literal",
			"value": "D"
		}],
		"type": "operator",
		"value": {
			"code": ">=",
			"text": "ge",
			"precedence": 5,
			"isPrefix": false,
			"isInfix": true,
			"isAssociative": false,
			"isPredicate": true
		}
	}, {
		"children": [{
			"children": null,
			"type": "identifier",
			"value": "firstName"
		}, {
			"children": null,
			"type": "literal",
			"value": "G"
		}],
		"type": "operator",
		"value": {
			"code": ">=",
			"text": "ge",
			"precedence": 5,
			"isPrefix": false,
			"isInfix": true,
			"isAssociative": false,
			"isPredicate": true
		}
	}],
	"type": "operator",
	"value": {
		"code": "and",
		"text": "and",
		"precedence": 6,
		"isPrefix": false,
		"isInfix": true,
		"isAssociative": true,
		"isPredicate": true
	}
};

// parse of "(((VLYDAT ge @2014-06-16@) or (VLYDAT eq @@)) and (QUOSTA ne 3))"
var expectedOutput2 = {
	"children": [{
		"children": [{
			"children": [{
				"children": null,
				"type": "identifier",
				"value": "VLYDAT"
			}, {
				"children": null,
				"type": "literal",
				"value": {
					"_value": 20140616
				}
			}],
			"type": "operator",
			"value": {
				"code": ">=",
				"text": "ge",
				"precedence": 5,
				"isPrefix": false,
				"isInfix": true,
				"isAssociative": false,
				"isPredicate": true
			}
		}, {
			"children": [{
				"children": null,
				"type": "identifier",
				"value": "VLYDAT"
			}, {
				"children": null,
				"type": "literal",
				"value": null
			}],
			"type": "operator",
			"value": {
				"code": "=",
				"text": "eq",
				"precedence": 5,
				"isPrefix": false,
				"isInfix": true,
				"isAssociative": false,
				"isPredicate": true
			}
		}],
		"type": "operator",
		"value": {
			"code": "or",
			"text": "or",
			"precedence": 7,
			"isPrefix": false,
			"isInfix": true,
			"isAssociative": true,
			"isPredicate": true
		}
	}, {
		"children": [{
			"children": null,
			"type": "identifier",
			"value": "QUOSTA"
		}, {
			"children": null,
			"type": "literal",
			"value": 3
		}],
		"type": "operator",
		"value": {
			"code": "<>",
			"text": "ne",
			"precedence": 5,
			"isPrefix": false,
			"isInfix": true,
			"isAssociative": false,
			"isPredicate": true
		}
	}],
	"type": "operator",
	"value": {
		"code": "and",
		"text": "and",
		"precedence": 6,
		"isPrefix": false,
		"isInfix": true,
		"isAssociative": true,
		"isPredicate": true
	}
};
var expectedOutput3 = false;
var expectedOutput4 = true;
var expectedOutput5 = false;
var expectedOutput6 = true;

var utilArg1 = {
	"children": [{
		"children": [{
			"children": null,
			"type": "identifier",
			"value": "VLYDAT"
		}, {
			"children": null,
			"type": "literal",
			"value": {
				"_value": 20140616
			}
		}],
		"type": "operator",
		"value": {
			"code": ">=",
			"text": "ge",
			"precedence": 5,
			"isPrefix": false,
			"isInfix": true,
			"isAssociative": false,
			"isPredicate": true
		}
	}, {
		"children": [{
			"children": null,
			"type": "identifier",
			"value": "VLYDAT"
		}, {
			"children": null,
			"type": "literal",
			"value": null
		}],
		"type": "operator",
		"value": {
			"code": "=",
			"text": "eq",
			"precedence": 5,
			"isPrefix": false,
			"isInfix": true,
			"isAssociative": false,
			"isPredicate": true
		}
	}],
	"type": "operator",
	"value": {
		"code": "or",
		"text": "or",
		"precedence": 7,
		"isPrefix": false,
		"isInfix": true,
		"isAssociative": true,
		"isPredicate": true
	}
};
var utilArg2 = {
	"children": [{
		"children": null,
		"type": "identifier",
		"value": "QUOSTA"
	}, {
		"children": null,
		"type": "literal",
		"value": 3
	}],
	"type": "operator",
	"value": {
		"code": "<>",
		"text": "ne",
		"precedence": 5,
		"isPrefix": false,
		"isInfix": true,
		"isAssociative": false,
		"isPredicate": true
	}
};

var testSet = {
	title: "Sdata Where Unit Tests",
	testCases: [{
		title: "Where parameter to JSON object",
		testUnits: [{
			input: input1,
			expectedOutput: expectedOutput1
		}, {
			input: input2,
			expectedOutput: expectedOutput2
		}],
		resultTitle: "WHERE param value '{input}' parsed !",
		func: parser.parse,
		testTag: "parse"
	}, {
		title: "[STRING] Execwhere with expression '(login ge 'D') and (firstName ge 'G')' ge for >=",
		testUnits: [{
			input: input3,
			expectedOutput: expectedOutput3,
			utilArg: expectedOutput1
		}, {
			input: input4,
			expectedOutput: expectedOutput4,
			utilArg: expectedOutput1
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[STRING] Execwhere with expression '(login gt 'D')' gt for >",
		testUnits: [{
			input: {
				"login": "ABC"
			},
			expectedOutput: false,
			utilArg: parser.parse("(login gt 'D')")
		}, {
			input: {
				"login": "DA"
			},
			expectedOutput: true,
			utilArg: parser.parse("(login gt 'D')")
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[STRING] Execwhere with expression '(login lt 'D')' lt for <",
		testUnits: [{
			input: {
				"login": "ABC"
			},
			expectedOutput: true,
			utilArg: parser.parse("(login lt 'D')")
		}, {
			input: {
				"login": "DA"
			},
			expectedOutput: false,
			utilArg: parser.parse("(login lt 'D')")
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[STRING] Execwhere with expression '(login le 'D')' le for <=",
		testUnits: [{
			input: {
				"login": "ABC"
			},
			expectedOutput: true,
			utilArg: parser.parse("(login le 'D')")
		}, {
			input: {
				"login": "DA"
			},
			expectedOutput: false,
			utilArg: parser.parse("(login le 'D')")
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[STRING] Execwhere with expression '(login eq 'D')' eq for =",
		testUnits: [{
			input: {
				"login": "ABC"
			},
			expectedOutput: false,
			utilArg: parser.parse("(login eq 'D')")
		}, {
			input: {
				"login": "D"
			},
			expectedOutput: true,
			utilArg: parser.parse("(login eq 'D')")
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[STRING] Execwhere with expression '(login ne 'D')' ne for <>",
		testUnits: [{
			input: {
				"login": "ABC"
			},
			expectedOutput: true,
			utilArg: parser.parse("(login ne 'D')")
		}, {
			input: {
				"login": "D"
			},
			expectedOutput: false,
			utilArg: parser.parse("(login ne 'D')")
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[STRING] Execwhere with expression '(login like 'D%')' 'like text%' for 'begins with'",
		testUnits: [{
			input: {
				"login": "ABC"
			},
			expectedOutput: false,
			utilArg: parser.parse("(login like 'D%')")
		}, {
			input: {
				"login": "D"
			},
			expectedOutput: true,
			utilArg: parser.parse("(login like 'D%')")
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[STRING] Execwhere with expression '(login like 'D%')' 'like %text%' for 'contains'",
		testUnits: [{
			input: {
				"login": "ABC"
			},
			expectedOutput: false,
			utilArg: parser.parse("(login like '%D%')")
		}, {
			input: {
				"login": "DAN"
			},
			expectedOutput: true,
			utilArg: parser.parse("(login like '%D%')")
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[DATE] Execwhere with expression '((VLYDAT ge @2014-06-16@) or (VLYDAT eq @@))' ge for >= and eq for =",
		testUnits: [{
			input: input5,
			expectedOutput: expectedOutput5,
			utilArg: utilArg1
		}, {
			input: input6,
			expectedOutput: expectedOutput6,
			utilArg: utilArg1
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[DATE] Execwhere with expression 'VLYDAT gt @2014-06-16@' gt for >",
		testUnits: [{
			input: {
				"VLYDAT": "2010-06-06"
			},
			expectedOutput: false,
			utilArg: parser.parse("VLYDAT gt @2014-06-16@")
		}, {
			input: {
				"VLYDAT": "2014-07-06"
			},
			expectedOutput: true,
			utilArg: parser.parse("VLYDAT gt @2014-06-16@")
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[DATE] Execwhere with expression 'VLYDAT lt @2014-06-16@' lt for <",
		testUnits: [{
			input: {
				"VLYDAT": "2010-06-06"
			},
			expectedOutput: true,
			utilArg: parser.parse("VLYDAT lt @2014-06-16@")
		}, {
			input: {
				"VLYDAT": "2014-07-06"
			},
			expectedOutput: false,
			utilArg: parser.parse("VLYDAT lt @2014-06-16@")
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[DATE] Execwhere with expression 'VLYDAT le @2014-06-16@' le for <=",
		testUnits: [{
			input: {
				"VLYDAT": "2014-06-16"
			},
			expectedOutput: true,
			utilArg: parser.parse("VLYDAT le @2014-06-16@")
		}, {
			input: {
				"VLYDAT": "2014-07-06"
			},
			expectedOutput: false,
			utilArg: parser.parse("VLYDAT le @2014-06-16@")
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[DATE] Execwhere with expression 'VLYDAT eq @2014-06-16@' eq for =",
		testUnits: [{
			input: {
				"VLYDAT": "2014-06-16"
			},
			expectedOutput: true,
			utilArg: parser.parse("VLYDAT eq @2014-06-16@")
		}, {
			input: {
				"VLYDAT": "2014-07-06"
			},
			expectedOutput: false,
			utilArg: parser.parse("VLYDAT eq @2014-06-16@")
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[DATE] Execwhere with expression 'VLYDAT ne @2014-06-16@' ne for <>",
		testUnits: [{
			input: {
				"VLYDAT": "2014-06-16"
			},
			expectedOutput: false,
			utilArg: parser.parse("VLYDAT ne @2014-06-16@")
		}, {
			input: {
				"VLYDAT": "2014-07-06"
			},
			expectedOutput: true,
			utilArg: parser.parse("VLYDAT ne @2014-06-16@")
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[NUMBER] Execwhere with expression '(QUOSTA ne 3)' ne for <>",
		testUnits: [{
			input: input7,
			expectedOutput: expectedOutput5,
			utilArg: utilArg2
		}, {
			input: input8,
			expectedOutput: expectedOutput6,
			utilArg: utilArg2
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[NUMBER] Execwhere with expression 'QUOSTA eq 3' eq for =",
		testUnits: [{
			input: {
				"QUOSTA": 3
			},
			expectedOutput: true,
			utilArg: parser.parse("QUOSTA eq 3")
		}, {
			input: {
				"QUOSTA": 4
			},
			expectedOutput: false,
			utilArg: parser.parse("QUOSTA eq 3")
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[NUMBER] Execwhere with expression 'QUOSTA gt 3' gt for >",
		testUnits: [{
			input: {
				"QUOSTA": 3
			},
			expectedOutput: false,
			utilArg: parser.parse("QUOSTA gt 3")
		}, {
			input: {
				"QUOSTA": 4
			},
			expectedOutput: true,
			utilArg: parser.parse("QUOSTA gt 3")
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[NUMBER] Execwhere with expression 'QUOSTA ge 3' ge for >=",
		testUnits: [{
			input: {
				"QUOSTA": 3
			},
			expectedOutput: true,
			utilArg: parser.parse("QUOSTA ge 3")
		}, {
			input: {
				"QUOSTA": 4
			},
			expectedOutput: true,
			utilArg: parser.parse("QUOSTA ge 3")
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[NUMBER] Execwhere with expression 'QUOSTA lt 3' lt for <",
		testUnits: [{
			input: {
				"QUOSTA": 2
			},
			expectedOutput: true,
			utilArg: parser.parse("QUOSTA lt 3")
		}, {
			input: {
				"QUOSTA": 3
			},
			expectedOutput: false,
			utilArg: parser.parse("QUOSTA lt 3")
		}, {
			input: {
				"QUOSTA": 4
			},
			expectedOutput: false,
			utilArg: parser.parse("QUOSTA lt 3")
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[NUMBER] Execwhere with expression 'QUOSTA le 3' le for <=",
		testUnits: [{
			input: {
				"QUOSTA": 3
			},
			expectedOutput: true,
			utilArg: parser.parse("QUOSTA le 3")
		}, {
			input: {
				"QUOSTA": 4
			},
			expectedOutput: false,
			utilArg: parser.parse("QUOSTA le 3")
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}]
};
exports.testSet = testSet;