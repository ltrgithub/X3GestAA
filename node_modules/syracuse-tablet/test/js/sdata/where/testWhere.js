"use strict";
var log = require('syracuse-tablet/html/js/helpers/logger').log;
var libTests = require('syracuse-tablet/test/js/libTests');
var resources = require('./resources');

exports.modulename = "sdataWhere";
exports.test = function() {
	var deferred = $.Deferred();
	try {
		// building test UI framework
		var testSetParams = $.extend(true, {}, resources.testSet);
		var testset = libTests.addTestset(testSetParams.title);
		var testCasesArr = [];
		var jj = testSetParams.testCases.length;
		for (var ii = 0; ii < jj; ii++) {
			testCasesArr.push(libTests.addTestcase(testset,
				testSetParams.testCases[ii].title));
		}

		// run test and add results
		for (var ii = 0; ii < jj; ii++) {
			var testCaseParams = testSetParams.testCases[ii];
			for (var mm = 0, pp = testCaseParams.testUnits.length; mm < pp; mm++) {
				var testUnitData = testCaseParams.testUnits[mm];
				var res = false;
				switch (testCaseParams.testTag) {
					case "parse":
						res = JSON.stringify(testCaseParams.func(testUnitData.input)) === JSON
							.stringify(testUnitData.expectedOutput);
						break;
					case "execwhere":
						res = testCaseParams.func(testUnitData.input,
							testUnitData.utilArg) === testUnitData.expectedOutput;
						break;
				}

				libTests.addResult(testCasesArr[ii], testCaseParams.resultTitle
					.replace("{input}", JSON.stringify(testUnitData.input)).replace(
						"{expectedOutput}", testUnitData.expectedOutput),
					res);
			}
		}
		// test end
		deferred.resolve();
	} catch (e) {
		log && log("Test sData error");
		log && log(e);
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
};