"use strict";
var parser = require('syracuse-tablet/html/js/sdatawhere/parser').Parser;
var sdataUtil = require('syracuse-tablet/html/js/sdatawhere/whereUtils');

var input1 = "(login ge 'D') and (firstName ge 'G')";
var input2 = "(((VLYDAT ge @2014-06-16@) or (VLYDAT eq @@)) and (QUOSTA ne 3))";
var input3 = {
	"login": "ABC",
	"firstName": "GHI"
};
var input4 = {
	"login": "DA",
	"firstName": "GHI"
};
var input5 = {
	"VLYDAT": "2010-06-06"
};
var input6 = {
	"VLYDAT": null
};
var input7 = {
	"QUOSTA": 3
};
var input8 = {
	"QUOSTA": 4
};

var expectedOutput1 = {
	"children": [{
		"children": [{
			"children": null,
			"type": "identifier",
			"value": "login"
		}, {
			"children": null,
			"type": "literal",
			"value": "D"
		}],
		"type": "operator",
		"value": {
			"code": ">=",
			"text": "ge",
			"precedence": 5,
			"isPrefix": false,
			"isInfix": true,
			"isAssociative": false,
			"isPredicate": true
		}
	}, {
		"children": [{
			"children": null,
			"type": "identifier",
			"value": "firstName"
		}, {
			"children": null,
			"type": "literal",
			"value": "G"
		}],
		"type": "operator",
		"value": {
			"code": ">=",
			"text": "ge",
			"precedence": 5,
			"isPrefix": false,
			"isInfix": true,
			"isAssociative": false,
			"isPredicate": true
		}
	}],
	"type": "operator",
	"value": {
		"code": "and",
		"text": "and",
		"precedence": 6,
		"isPrefix": false,
		"isInfix": true,
		"isAssociative": true,
		"isPredicate": true
	}
};
var expectedOutput2 = {
	"children": [{
		"children": [{
			"children": [{
				"children": null,
				"type": "identifier",
				"value": "VLYDAT"
			}, {
				"children": null,
				"type": "literal",
				"value": {
					"_value": 20140616
				}
			}],
			"type": "operator",
			"value": {
				"code": ">=",
				"text": "ge",
				"precedence": 5,
				"isPrefix": false,
				"isInfix": true,
				"isAssociative": false,
				"isPredicate": true
			}
		}, {
			"children": [{
				"children": null,
				"type": "identifier",
				"value": "VLYDAT"
			}, {
				"children": null,
				"type": "literal",
				"value": null
			}],
			"type": "operator",
			"value": {
				"code": "=",
				"text": "eq",
				"precedence": 5,
				"isPrefix": false,
				"isInfix": true,
				"isAssociative": false,
				"isPredicate": true
			}
		}],
		"type": "operator",
		"value": {
			"code": "or",
			"text": "or",
			"precedence": 7,
			"isPrefix": false,
			"isInfix": true,
			"isAssociative": true,
			"isPredicate": true
		}
	}, {
		"children": [{
			"children": null,
			"type": "identifier",
			"value": "QUOSTA"
		}, {
			"children": null,
			"type": "literal",
			"value": 3
		}],
		"type": "operator",
		"value": {
			"code": "<>",
			"text": "ne",
			"precedence": 5,
			"isPrefix": false,
			"isInfix": true,
			"isAssociative": false,
			"isPredicate": true
		}
	}],
	"type": "operator",
	"value": {
		"code": "and",
		"text": "and",
		"precedence": 6,
		"isPrefix": false,
		"isInfix": true,
		"isAssociative": true,
		"isPredicate": true
	}
};
var expectedOutput3 = false;
var expectedOutput4 = true;
var expectedOutput5 = false;
var expectedOutput6 = true;

var utilArg1 = {
	"children": [{
		"children": [{
			"children": null,
			"type": "identifier",
			"value": "VLYDAT"
		}, {
			"children": null,
			"type": "literal",
			"value": {
				"_value": 20140616
			}
		}],
		"type": "operator",
		"value": {
			"code": ">=",
			"text": "ge",
			"precedence": 5,
			"isPrefix": false,
			"isInfix": true,
			"isAssociative": false,
			"isPredicate": true
		}
	}, {
		"children": [{
			"children": null,
			"type": "identifier",
			"value": "VLYDAT"
		}, {
			"children": null,
			"type": "literal",
			"value": null
		}],
		"type": "operator",
		"value": {
			"code": "=",
			"text": "eq",
			"precedence": 5,
			"isPrefix": false,
			"isInfix": true,
			"isAssociative": false,
			"isPredicate": true
		}
	}],
	"type": "operator",
	"value": {
		"code": "or",
		"text": "or",
		"precedence": 7,
		"isPrefix": false,
		"isInfix": true,
		"isAssociative": true,
		"isPredicate": true
	}
};
var utilArg2 = {
	"children": [{
		"children": null,
		"type": "identifier",
		"value": "QUOSTA"
	}, {
		"children": null,
		"type": "literal",
		"value": 3
	}],
	"type": "operator",
	"value": {
		"code": "<>",
		"text": "ne",
		"precedence": 5,
		"isPrefix": false,
		"isInfix": true,
		"isAssociative": false,
		"isPredicate": true
	}
};

var testSet = {
	title: "Sdata test",
	testCases: [{
		title: "Where parameter to JSON object",
		testUnits: [{
			input: input1,
			expectedOutput: expectedOutput1
		}, {
			input: input2,
			expectedOutput: expectedOutput2
		}],
		resultTitle: "WHERE param value '{input}' parsed !",
		func: parser.parse,
		testTag: "parse"
	}, {
		title: "[STRING] Execwhere with expression '(login ge 'D') and (firstName ge 'G')'",
		testUnits: [{
			input: input3,
			expectedOutput: expectedOutput3,
			utilArg: expectedOutput1
		}, {
			input: input4,
			expectedOutput: expectedOutput4,
			utilArg: expectedOutput1
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[DATE] Execwhere with expression '((VLYDAT ge @2014-06-16@) or (VLYDAT eq @@))'",
		testUnits: [{
			input: input5,
			expectedOutput: expectedOutput5,
			utilArg: utilArg1
		}, {
			input: input6,
			expectedOutput: expectedOutput6,
			utilArg: utilArg1
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}, {
		title: "[NUMBER] Execwhere with expression '(QUOSTA ne 3)'",
		testUnits: [{
			input: input7,
			expectedOutput: expectedOutput5,
			utilArg: utilArg2
		}, {
			input: input8,
			expectedOutput: expectedOutput6,
			utilArg: utilArg2
		}],
		resultTitle: "With '{input}', expected value is '{expectedOutput}'",
		func: sdataUtil.execWhere,
		testTag: "execwhere"
	}]
};
exports.testSet = testSet;