"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').log;
var libTests = require('syracuse-tablet/test/js/libTests');
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;

var hostUrl = window.location.protocol + "//" + window.location.host;
var baseUrl = hostUrl + "/sdata/x3/erp/SUPERV";
var testcase;

exports.modulename = "sdataStateless";
exports.test = function() {
	var deferred = $.Deferred();
	try {
		var testset = libTests.addTestset("SData stateless protocol test (Proto, Actions)");

		var testRequests;

		testcase = testset.addTestcase("Init test requests");

		ajax("GET", hostUrl + "/syracuse-tablet/test/fixtures/sdataStatelessJsonData.js?salt=" + (new Date().getTime()), null, null, {
			noJsonParsing: true
		})
			.then(function(result) {
				var deferred = $.Deferred();
				try {
					var json = result.responseText.replace(/\/\*([\s\S]*?)\*\//g, "");
					testRequests = JSON.parse(json);
					testcase.addResult("Fetched testcases", testRequests != null);
					if (testRequests != null) {
						deferred.resolve();
					} else {
						deferred.reject();
					}
				} catch (e) {
					console.log(json);
					deferred.reject("Invalid JSON testcase data");
				}
				return deferred.promise();
			})
			.then(function() {
				var deferred = $.Deferred();
				console.log(testRequests);
				var execTest = function() {
					var curTest = testRequests.shift();
					if (curTest) {
						testcase = testset.addTestcase(curTest.$title);
						_runTest(curTest, testcase).then(function() {
							execTest();
						}, function() {
							testcase.addResult("Something went wrong", false);
							execTest();
						});
					} else {
						deferred.resolve();
					}
				};
				execTest();
				return deferred.promise();
			})
			.then(function() {
				deferred.resolve();
			}, function(e) {
				if (testcase) {
					testcase.addResult("Javscript exception", "error", e);
				}
				deferred.reject(e, exports.modulename);
			});
	} catch (e) {
		deferred.reject(e, exports.modulename);
	} finally {
		return deferred.promise();
	}
};

function _runTest(test) {
	var deferred = $.Deferred();
	var req;
	var method = test.$exec.$method;
	var url = test.$exec.$url.replace("{$baseUrl}", baseUrl);
	var data = test.$exec.$data;
	req = ajax(method, url, data);
	req.then(function(result) {
		testcase.addResult("Check http status code", test.$check.$code == null || test.$check.$code === result.status);
		if (test.$check.$data) {
			_checkObject(result.responseJSON, test.$check.$data);
		}
		if (test.$check.$not) {
			_checkObjectNot(result.responseJSON, test.$check.$not);
		}
		deferred.resolve();
	});

	return deferred.promise();
}


function _checkObject(result, expected, path) {
	Object.keys(expected).forEach(function(key) {
		var oe = expected[key];
		var or = result[key];
		var elem = path != null ? path + "." + key : key;
		if (typeof oe === 'object') {
			testcase.addResult("structure exists: " + elem, or != null);
			if (or != null) {
				_checkObject(or, oe, elem);
			}
		} else {
			testcase.addResult("match of " + elem, oe === or, "Expected: " + oe + "\nGot: " + or);
		}
	});
}

function _checkObjectNot(result, expected, path) {
	Object.keys(expected).forEach(function(key) {
		var oe = expected[key];
		var or = result[key];
		var elem = path != null ? path + "." + key : key;
		if (oe == null) {
			testcase.addResult("structure must not contain: " + elem, oe == null && or == null);
		} else if (or) {
			_checkObjectNot(or, oe, elem);
		}
	});
}