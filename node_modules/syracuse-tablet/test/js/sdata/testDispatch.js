"use strict";
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("testStateless");
var libTests = require('syracuse-tablet/test/js/libTests');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var dispatcher = require('syracuse-tablet/html/js/sdata/sdataDispatcher');
var sDataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');

exports.modulename = "sdataDispatcher";
var _testCaseUtils = [{
	title: "Parse data url",
	baseUrl: "http://pc101329.sagefr.adinternal.com:8124/sdata/x3/erp/SUPERV/",
	code: "1234",
	key: "5678",
	data: {
		"create": "{$baseUrl}/AQTCRUD/$template/$workingCopies?representation=AQTCRUDM.$edit",
		"query": "{$baseUrl}/AQTCRUD?representation=AQTCRUDM.$query",
		"detail": "{$baseUrl}/AQMDEVICE('{$key}')?representation=AQMCRUDM.$details",
		"edit": "{$baseUrl}/AQMDEVICE('{CODE}')/$workingCopies?representation=AQMCRUDM.$edit",
		"delete": "{$baseUrl}/AQMDEVICE('{CODE}')?representation=AQMCRUDM.$query"
	},
	run: function(testCase, context) {
		for (var p in kase.data) {
			var url = context.data[p];
			url.replace("{$baseUrl}", context.baseUrl).replace("{CODE}", context.code).replace("{CODE}", context.code);
			var res = sDataUtils.parseSdataUrl(url);
			testCase.addResult("test " + p, "success");
		}
	}
}];


var _base = "http://pc101329.sagefr.adinternal.com:8124/sdata/x3/erp/SUPERV/";
var _testParse = [];
var _testSetUtils = function() {
	var deferred = new $.Deferred();
	var testset = libTests.addTestset("sdata Utils Unit Tests");
	try {
		_testCaseUtils.forEach(function(kase) {
			var testCase = testset.addTestcase(kase.title, kase);
			testCase.run(testCase, kase);
		});
		deferred.resolve();
	} finally {
		return deferred.promise();
	}
};
var _testSetDispatch = function(testset) {
	var deferred = new $.Deferred();
	var testset = libTests.addTestset("sdata Dispatcher Unit Tests");
	try {
		deferred.resolve();
	} finally {
		return deferred.promise();
	}
};
exports.test = function() {
	var deferred = new $.Deferred();
	try {
		var processes = [];
		processes.push(_testSetUtils());
		processes.push(_testSetDispatch());
		$.when(processes).then(function() {
			deferred.resolve();
		}, function(e) {
			deferred.reject(e);
		});
		deferred.resolve();
	} catch (e) {
		log && log("Test Dispatch - Exception");
		log && log(e);
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
};