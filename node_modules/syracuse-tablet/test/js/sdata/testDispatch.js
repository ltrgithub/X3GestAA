"use strict";
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("testStateless");
var libTests = require('syracuse-tablet/test/js/libTests');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var sdataDispatcher = require('syracuse-tablet/html/js/sdata/sdataDispatcher');
var sdataUrls = require('syracuse-tablet/test/fixtures/sdataDispatchUrls').urls;
var sdataFull = require('syracuse-tablet/test/fixtures/sdataDispatchFull').urls;
var hostUrl = window.location.protocol + "//" + window.location.host;
var baseUrl = hostUrl + "/sdata/x3/erp/SUPERV";
var testcase;

exports.modulename = "sdataDispatcher";

exports.test = function() {
	var deferred = new $.Deferred();
	try {

		var testset = libTests.addTestset("sdata Dispatcher URL parser test");
		sdataUrls.forEach(function(test) {
			testcase = testset.addTestcase(test.$title);
			var link = test.$in;
			link.$url = link.$url.replace("{$baseUrl}", baseUrl);
			var result = sdataDispatcher.parseLink(link);
			_checkObject(result, test.$out);
		});

		var testset = libTests.addTestset("sdata Dispatcher request test");
		sdataFull.forEachPromise(function(test) {
			var deferred = new $.Deferred();
			testcase = testset.addTestcase(test.$title);
			var link = test.$in.$link;
			var data = test.$in.$data;
			link.$url = link.$url.replace("{$baseUrl}", baseUrl);

			sdataDispatcher.dispatch(link, data).then(function(result) {
				_checkObject(result, test.$out);
				deferred.resolve();
			}, function(e) {
				testcase.addResult("Error during dispatching of: " + link.$url, false, e);
				deferred.resolve();
			});
			return deferred.promise();
		});
		deferred.resolve();
	} catch (e) {
		log && log("Test Dispatch - Exception");
		log && log(e);
		deferred.reject(e, exports.modulename);
	} finally {
		return deferred.promise();
	}
};

function _checkObject(result, expected, path) {
	Object.keys(expected).forEach(function(key) {
		var oe = expected[key];
		var or = result[key];
		var elem = path != null ? path + "." + key : key;
		if (typeof oe === 'object') {
			testcase.addResult("structure exists: " + elem, or != null);
			if (or != null) {
				_checkObject(or, oe, elem);
			}
		} else {
			testcase.addResult("match of " + elem, oe === or, "Expected: " + oe + "\nGot: " + or);
		}
	});
}