"use strict";
var log = require('syracuse-tablet/html/js/helpers/logger').log;
var locale = require('syracuse-tablet/html/js/helpers/locale');
var libTests = require('syracuse-tablet/test/js/libTests');

var date = require('syracuse-tablet/html/js/helpers/types/date');
var datetime = require('syracuse-tablet/html/js/helpers/types/datetime');
var decimal = require('syracuse-tablet/html/js/helpers/types/decimal');

var testset;
var testcase;

exports.modulename = "FormatAPI";

function equal(a, b, text) {
	testcase.addResult(text, a === b, "'" + a + "' === '" + b + "'");
}

function _testDateFormat(loc, m1, m2) {
	testcase = testset.addTestcase("Date formats (" + loc + ")");

	equal(date.make(2010, 10, 13).toString(), "2010-10-13", "no format");
	equal(date.make(2010, 10, 13).toString("dd-MM-yyyy"), "13-10-2010", "formatting basic");
	equal(date.make(2010, 10, 13).toString("'l''année 'yyyy"), "l'année 2010", "formatting with quotes");
	equal(date.make(2010, 10, 13).toString("'date du 'dd' 'MMMM' 'yyyy' validée'"), "date du 13 " + m1 + " 2010 validée", "formatting with literal at the end");
	equal(date.make(1988, 3, 23).toString("'Le 'd/M/yyyy"), "Le 23/3/1988", "formatting with non alphanumeric character");
	equal(date.make(1988, 3, 13).toString("'Le 'd-M' de l''année 'yyyy"), "Le 13-3 de l'année 1988", "formatting with non alphanumeric character and double quotes");
	equal(date.make(1988, 3, 13).toString("'En 'MMM"), "En " + m2, "formatting with abbreviated month");
	equal(date.make(1988, 3, 13).toString("'Le 'd/M/yy"), "Le 13/3/88", "(1/3) formatting with directives -d- and -M-");
	equal(date.make(1988, 1, 3).toString("'Le 'd/M/yy"), "Le 3/1/88", "(2/3) formatting with directives -d- and -M-");
	equal(date.make(1988, 12, 3).toString("'Le 'd/M/yy"), "Le 3/12/88", "(3/3) formatting with directives -d- and -M-");
	equal(date.make(1988, 12, 3).toString("'''L''opération du 'd/M/yy' s''est bien déroulée'''"), "'L'opération du 3/12/88 s'est bien déroulée'", "formatting with many quotes");
	equal(date.make(1988, 12, 3).toString("'La date : 'd''''M''''yyyy"), "La date : 3'12'1988", "formatting with quotes between directives");
}

function _testDateParse(loc, m1, m2, m3) {
	testcase = testset.addTestcase("Date parse (" + loc + ")");
	equal(date.parse("2010-10-13").toString(), "2010-10-13", "parse no format");
	equal(date.parse("02/10/2010", "dd/MM/yyyy").toString(), "2010-10-02", "parse classic format dd/MM/yyyy");
	equal(date.parse("Le 23 " + m1 + " de 1988", "'Le 'dd' 'MMMM' de 'yyyy").toString(), "1988-03-23", "parse simple sentence format");
	equal(date.parse("Le 23 " + m1 + " de l'an de grace 1988", "'Le 'dd' 'MMMM' de l''an de grace 'yyyy").toString(), "1988-03-23", "parse simple sentence with double quotes ");
	equal(date.parse("Le 23/03/1988", "'Le 'dd/MM/yyyy").toString(), "1988-03-23", "parse format containing non alphanumeric characters");
	equal(date.parse("Le 23-03 de 1988", "'Le 'dd-MM' de 'yyyy").toString(), "1988-03-23", "previous parse including double quotes");
	equal(date.parse("Le 23-" + m2 + "-1988", "'Le 'dd-MMM-yyyy").toString(), "1988-07-23", "parse with abbreviated month : MMM");
	equal(date.parse("Le 23-7-1988", "'Le 'dd-M-yyyy").toString(), "1988-07-23", "(1/2) parse with month without a leading zero : M");
	equal(date.parse("Le 23-12-1988", "'Le 'dd-M-yyyy").toString(), "1988-12-23", "(2/2) parse with month without a leading zero : M");
	equal(date.parse("Le 23-12-1988", "'Le 'd-M-yyyy").toString(), "1988-12-23", "(1/2) parse with d and M");
	equal(date.parse("Le 3-2-1988", "'Le 'd-M-yyyy").toString(), "1988-02-03", "(2/2) parse with d and M");
	equal(date.parse("Le 3-2-88", "'Le 'd-M-yy").toString(), "1988-02-03", "parse with d and M and yy");
	equal(date.parse("3/12/88 achat ok", "d/M/yy' achat ok'").toString(), "1988-12-03", "parse format ending with literal");
	equal(date.parse("'L'opération du 24/4/03 s'est bien déroulée'", "'''L''opération du 'd/M/yy' s''est bien déroulée'''").toString(), "2003-04-24", "parse with double quotes at beginning, middle and end");
	equal(date.parse("02" + m3 + "1974", "ddMMMyyyy").toString(), "1974-01-02", " (1/2) parse format with directives not separated");
	equal(date.parse("02011974", "ddMMyyyy").toString(), "1974-01-02", " (2/2) parse format with directives not separated");
	equal(date.parse("La date : 24'4'2003", "'La date : 'd''''M''''yyyy").toString(), "2003-04-24", "parse with double quotes between directives");
}

function _testDatetimeFormat(loc, m1) {
	testcase = testset.addTestcase("Datetime format (" + loc + ")");
	equal(datetime.make(2010, 10, 13, 15, 25, 3, 424).toString(), "2010-10-13T13:25:03.424Z", "no format arg");
	equal(datetime.make(2010, 10, 3, 15, 25, 3, 424).toString("yy/d/M h:mm:ss tt"), "10/3/10 3:25:03 ", "format --> yy/d/M h:mm:ss tt ");
	equal(datetime.make(2010, 8, 13, 15, 25, 3, 424).toString("'created on : 'M/d/yyyy hh.mm.ss t"), "created on : 8/13/2010 03.25.03 ", "format --> 'created on : 'M/d/yyyy hh.mm.ss t");
	equal(datetime.make(2010, 10, 13, 15, 25, 3, 424).toString("'Time''s : 'MM-dd-yyyy hh''''mm''''ss tt"), "Time's : 10-13-2010 03'25'03 ", "format with quotes");
	equal(datetime.make(2010, 10, 2, 15, 25, 3, 424).toString("d MMM yyyy HH.mm.ss"), "2 " + m1 + " 2010 15.25.03", "format with abbreviated month name");
}

function _testDatetimeParse(loc, m1, d1) {
	testcase = testset.addTestcase("Datetime parse (" + loc + ")");
	var d = datetime.parse("2010-10-13T13:25:03.424Z");
	equal(d.year, 2010, "parse check year (no format)");
	equal(d.month, 10, "parse check month (no format)");
	equal(d.day, 13, "parse check day (no format)");
	equal(d.minute, 25, "parse check minute (no format)");
	equal(d.second, 3, "parse check second (no format)");
	equal(d.millisecond, 424, "parse check millisecond (no format)");

	d = datetime.parse("2010-10-13 13.25.03", "yyyy-MM-dd' 'HH.mm.ss");
	equal(d.year, 2010, "parse check year (yyyy-MM-dd' 'HH.mm.ss)");
	equal(d.month, 10, "parse check month (yyyy-MM-dd' 'HH.mm.ss)");
	equal(d.day, 13, "parse check day (yyyy-MM-dd' 'HH.mm.ss)");
	equal(d.hour, 13, "parse check hour (yyyy-MM-dd' 'HH.mm.ss)");
	equal(d.minute, 25, "parse check minute (yyyy-MM-dd' 'HH.mm.ss)");
	equal(d.second, 3, "parse check second (yyyy-MM-dd' 'HH.mm.ss)");
	equal(d.millisecond, 0, "parse check millisecond (yyyy-MM-dd' 'HH.mm.ss)");

	equal(datetime.parse("datetime value was : 2/13/95 7:10:01 PM", "'datetime value was : 'M/d/yy' 'h:mm:ss tt").toString(), "1995-02-13T18:10:01.000Z", "parse.toString() tricky example");
	equal(datetime.parse("date is : 2 " + m1 + " 1995 4:24:13 AM", "'date is : 'd MMMM yyyy h:mm:ss tt").toString(), "1995-02-02T03:24:13.000Z", "parse.toString() and month name");
	equal(datetime.parse("date is : " + d1 + " 2 " + m1 + " 2012 4:24:13 A", "'date is : 'ddd d MMMM yyyy h:mm:ss t").toString(), "2012-02-02T03:24:13.000Z", "parse.toString() and abbreviated day name");
}

function _testDecimal() {
	testcase = testset.addTestcase("Decimal format");
	var b1 = decimal.make("-123456789012345678901234567890.11", 8);
	equal(b1.toString(" ", ","), "-123 456 789 012 345 678 901 234 567 890,11000000", "toString(' ',',') ok");
	equal(b1.toString(".", ","), "-123.456.789.012.345.678.901.234.567.890,11000000", "toString('.',',') ok");
	equal(b1.toString(","), "-123,456,789,012,345,678,901,234,567,890.11000000", "toString(',') ok");
	equal(b1.toString("'"), "-123'456'789'012'345'678'901'234'567'890.11000000", "toString(''') ok");
	equal(b1.toString("", ","), "-123456789012345678901234567890,11000000", "toString('',',') ok");
	b1 = decimal.make("-23456789012345678901234567890.11", 8);
	equal(b1.toString(".", ","), "-23.456.789.012.345.678.901.234.567.890,11000000", "toString('.',',') ok (num.length%3 != 0)");

	testcase = testset.addTestcase("Decimal parse");
	equal(decimal.parseOld("-125 123,87", " ", ",").toString(), "-125123.8700000000", "parse ok");
	equal(decimal.parseOld("2.0000000000", " ", ".").toString(), "2.0000000000", "parse ok");
}

exports.test = function() {
	var deferred = new $.Deferred();
	try {
		testset = libTests.addTestset("Format API tests");

		locale.setLocale("de-DE")
			.then(function() {
				var deferred = new $.Deferred();
				try {
					_testDateFormat("de-DE", "Oktober", "Mrz");
					_testDatetimeFormat("de-DE", "Okt");
					_testDateParse("de-DE", "März", "Jul", "Jan");
					_testDatetimeParse("de-DE", "Februar", "Di");
					deferred.resolve();
				} catch (e) {
					testcase.addResult("Something went wrong!", false, e);
					deferred.resolve();
				}
				return deferred.promise();
			})
			.then(function() {
				return locale.setLocale("fr-FR");
			})
			.then(function() {
				var deferred = new $.Deferred();
				try {
					_testDateFormat("fr-FR", "octobre", "mars");
					_testDatetimeFormat("de-DE", "oct.");
					_testDateParse("fr-FR", "Mars", "juil.", "janv.");
					_testDatetimeParse("fr-FR", "février", "mar.");
					deferred.resolve();
				} catch (e) {
					testcase.addResult("Something went wrong!", false, e);
					deferred.resolve();
				}
				return deferred.promise();
			})
			.then(function() {
				_testDecimal();
			})
			.then(function() {
				deferred.resolve();
			}, function(e) {
				deferred.reject(e);
			});
	} catch (e) {
		deferred.reject(e, exports.modulename);
	} finally {
		return deferred.promise();
	}
};