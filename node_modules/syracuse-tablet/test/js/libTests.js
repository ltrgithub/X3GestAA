"use strict";

var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
window.Handlebars = require('syracuse-tablet/html/deps/handlebars-latest');

var _testRoot = null;
var _testId = 0;

var _padNum = function(n, len) {
	len = len || 3;
	return (1e15 + n + "").slice(-len);
};

var _getId = function() {
	_testId = _testId + 1;
	return _testId;
};

var tmpltitle = Handlebars.compile($("#tmpltitle").html());

var _createHtml = function(tmplId, data) {
	data = data || {};
	// Add title html
	data.titleHtml = tmpltitle(data);
	return Handlebars.compile($("#tmpl" + tmplId).html())(data);
	//	return templates.execSync("tmpl" + tmplId, data);
};

var _setStatusError = function($parent) {
	var $status = $parent.find(".teststatus");
	$status.removeClass("glyphicon-ok");
	$status.addClass("glyphicon-remove");
};

var _addCounters = function(obj, $root, countSize) {
	obj.countSize = countSize || 3;
	var zero = _padNum(0, obj.countSize);
	obj.$success = $root.find(".badge.success").html(zero);
	obj.$errors = $root.find(".badge.error").html(zero);
	obj.$warnings = $root.find(".badge.warning").html(zero);
	obj.$counts = $root.find(".badge.counts").html(zero);
	obj.nbSuccess = 0;
	obj.nbErrors = 0;
	obj.nbWarnings = 0;
	obj.counts = 0;
	obj.$header = $root.find(".panel-heading");
	obj.$panel = $root.hasClass("panel") ? $root : $root.find(".panel");
};

var _updtCounters = function(obj, status) {
	obj.counts++;
	if (status === "success") obj.nbSuccess++;
	if (status === "warning") obj.nbWarnings++;
	if (status === "error") obj.nbErrors++;
	obj.$success.html(_padNum(obj.nbSuccess, obj.countSize));
	obj.$warnings.html(_padNum(obj.nbWarnings, obj.countSize));
	obj.$errors.html(_padNum(obj.nbErrors, obj.countSize));
	obj.$counts.html(_padNum(obj.counts, obj.countSize));
};

var _updtPanel = function(obj, status) {
	_updtCounters(obj, status);
	if (obj.nbErrors > 0) {
		_setStatusError(obj.$header);
		if (obj.$panel.hasClass("panel-success")) {
			obj.$panel.removeClass("panel-success").addClass("panel-danger");
		}
	}
};

var _testCase = function(testSet, $html, data) {
	var _self = this;
	_self.data = data || {};
	_self.$root = $html;
	_self.$resultGroup = $html.find(".list-group");
	_self.testSet = testSet;
	_addCounters(_self, $html);
	var _context = _self.data.data || {};

	// return case context 
	_self.context = _context;

	// status accepts a boolean or "success", "warning", "error"
	// msgsOrError accept messages with  \n for multi-lines or Js error
	_self.addResult = function(title, status, msgsOrError) {
		// Tests
		var messages;
		if (false) {
			var m = _self.counts % 3;
			status = m == 0 ? "success" : m == 1 ? "warning" : "error";
			messages = status + " - " + _self.counts;
		}
		msgsOrError = msgsOrError || "";
		if (jsutils.isError(msgsOrError)) {
			messages = msgsOrError.message + "\n" + jsutils.cleanStack(msgsOrError.stack);
		} else if (typeof msgsOrError === "object") {
			// Test storage rejects with a json object
			messages = JSON.stringify(msgsOrError);
		} else {
			if (Object.prototype.toString.call(msgsOrError) == '[object String]') {
				messages = msgsOrError.toString();
			} else {
				messages = JSON.stringify(msgsOrError);
			}
		}
		status = typeof status == "string" ? status.toLowerCase() : status === true ? "success" : "error";
		_updtPanel(_self, status);
		var ok = status === "success" || status === "warning";
		messages = messages ? messages.trim() : "";
		if (messages.length > 0) messages = messages.split("\n");
		var $html = $(_createHtml("teststatus", {
			icon: ok ? "ok" : "remove",
			title: title,
			messages: messages,
			status: status
		}));
		$html.appendTo(_self.$resultGroup.show());
		_self.testSet.update(status);
		return {
			$root: $html
		};
	};
};

var _testSet = function($html, data) {
	var _self = this;
	var _cases = 0;
	_self.data = data;
	_self.$root = $html;
	_self.$casesGroup = $html.find(".panel-body").find(".list-group");
	_addCounters(_self, $html);

	_self.update = function(ok) {
		_updtPanel(_self, ok);
		_testRoot.update(ok);
	};

	_self.addTestcase = function(title, data) {
		var data = {
			id: _getId(),
			title: title,
			klass: _cases++ % 2 == 0 ? "even" : "odd",
			data: data || {}
		};
		var $html = $(_createHtml("testcase", data));
		$html.appendTo(_self.$casesGroup.show()).show();
		return new _testCase(_self, $html, data);
	};
};

var _testRootClass = function() {
	var _self = this;

	_self.init = function() {
		if ($("#testsets").length == 0) {
			_self.$root = $(_createHtml("testroot", {
				title: "Test sets"
			}));
			_addCounters(_self, _self.$root, 4);
			_self.$root.appendTo(window.globalCtx.$rootContent);
		}

	};
	_self.update = function(ok) {
		_updtPanel(_self, ok);
	};
	_self.addTestset = function(title) {
		_self.init();
		var data = {
			id: _getId(),
			title: title
		};
		var $html = $(_createHtml("testset", data));
		$html.appendTo(_self.$root).show();
		return new _testSet($html, data);
	};

};

exports.addTestset = function(title) {
	if (!_testRoot) {
		// Initialized on demand because needs globalCtx
		_testRoot = new _testRootClass();
	}
	return _testRoot.addTestset(title);
};

exports.addTestcase = function(testset, title) {
	return testset.addTestcase(title);
};

exports.addResult = function(testcase, title, status, error) {
	return testcase.addResult(title, status, error);
};