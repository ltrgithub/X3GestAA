"use strict";
var libTests = require('syracuse-tablet/test/js/libTests');

exports.modulename = "DeferredFDB";

exports.test = function() {

	try {
		var testset = libTests.addTestset("Deferred pattern");
		var testcase;

		try {
			testcase = testset.addTestcase("Simple resolve");
			$.smResolve("xxx")
				.then(function(param) {
					// Ok to be here			
					testcase.addResult("Resolved as expected", true);
					testcase.addResult("Value ok", param === "xxx");
				}, function(param) {
					testcase.addResult("Rejected as NOT expected", false);
				});
		} catch (e) {
			testcase.addResult("Exception as NOT expected", false);
		}

		try {
			testcase = testset.addTestcase("Simple reject");
			$.smReject("xxx")
				.then(function(param) {
					testcase.addResult("Resolved as NOT expected", false);
				}, function(param) {
					// Ok to be here
					testcase.addResult("Rejected as expected", true);
					testcase.addResult("Value ok", param === "xxx");
				});
		} catch (e) {
			testcase.addResult("Exception as NOT expected", false);
		}

		var esAsynch = "Async error";
		try {
			testcase = testset.addTestcase("Reject");
			$.smResolve("xxx")
				.then(function(param) {
					return $.Deferred(function(d) {
						d.reject("rejected data");
					}).promise();
				}, function(param) {
					testcase.addResult("Rejected as NOT expected", false);
				}).then(function(param) {
					return "ffff";
				}, function(param) {
					testcase.addResult("Rejected is expected", param === "rejected data");
				})
				.then(function(param) {
					// we never end up here because of throw
					testcase.addResult("Resolved is NOT expected", false);
				}, function(param) {
					// we never end up here because of throw
					testcase.addResult("LAST Rejected is expected", param == null, "Param is null");
				});
		} catch (e) {
			// Ok to be here
			testcase.addResult("Exception as expected", e === es);
		}

		try {
			testcase = testset.addTestcase("Async exception");
			$.smResolve("xxx")
				.then(function(param) {
					testcase.addResult("Resolved as expected", true);
					testcase.addResult("Value ok", param === "xxx", param);
					var d = $.Deferred();
					setTimeout(function() {
						d.resolve("yyy");
						testcase.addResult("Next Success statement NOT expected", true, "We can't prevent it because excption is caught in promise.then");
					}, 0);
					return d.promise();
				})
				.then(function(param) {
					testcase.addResult("Resolved as expected", true);
					testcase.addResult("Value ok", param === "yyy", param);
					throw esAsynch;
				}, function(param) {
					// To make sure that reject is actually propagated
					testcase.addResult("Reject not  expected", true, param);
				})
				.then(function(param) {
					// To make sure that reject is actually propagated
					testcase.addResult("Resolved NOT expected", false);
				}, function(param) {
					// To make sure that reject is actually propagated
					testcase.addResult("Reject is  expected", param === esAsynch, param || "No param");
				})
				.then(function(param) {
					// To make sure that reject is actually propagated
					testcase.addResult("Resolved NOT expected", false);
				})
				.then(function(param) {
					// we never end up here because of throw
					testcase.addResult("Resolved as NOT expected", false);
				}, function(param) {
					// we never end up here because of throw
					testcase.addResult("LAST Rejected as expected", param == null, "Param is null");
				});
		} catch (e) {
			// we never end up here because of throw is another async process with another stack
			testcase.addResult("Outer stack exception as NOT expected", false);
		}

		return $.smResolve();
	} finally {}
};