"use strict";
var log = require('syracuse-tablet/html/js/helpers/logger').log;
var libTests = require('syracuse-tablet/test/js/libTests');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');
var desktopCustomers = require('syracuse-tablet/test/js/articles/desktopCustomers');


exports.modulename = "articleParser";

/**
 * DESKTOP PARSER
 */
var _testDesktop = {
	title: "Article parser",
	data: {},
	testCases: [{
		title: "Desktop customers",
		data: {},
		tests: [{
			title: "Details",
			run: function(testset, testCase, test) {
				var res = articleParser.convertDesktop(desktopCustomers.details);
				log && log(JSON.stringify(res, null, 2));
				var error = [],
					nbTested = 0,
					depth = 0;
				// test widths sum
				var _test = function(json, depth) {
					depth = depth + 1;
					if (res.$widths) {
						nbTested++;
						var sum = 0;
						res.$widths.split(',').forEach(function(w) {
							sum += parseInt(w, 10);
						});
						if (sum != 12) {
							error.push(res.$widths);
						}
					}
					if (json.$items) {
						var d = 0;
						json.$items.forEach(function(itm) {
							d = Math.max(depth, _test(itm, 0));
						});
						depth += d;
					}
					return depth;
				};
				depth = _test(res, depth);
				testCase.addResult("test " + test.title, error.length === 0, error.length === 0 ? "$widths tested=" + nbTested + " - depth=" + depth : error.join('\n'));
			}
		}]
	}]
};
/**
 * TESTSETS
 */
var _testSets = [_testDesktop];
var _runTestSet = function(dataTestSet) {
	var deferred = new $.Deferred();
	var testset = libTests.addTestset(dataTestSet.title);
	window.setTimeout(function() {
		dataTestSet.testCases.forEach(function(dataTestCase) {
			var testCase;
			try {
				var testCase = testset.addTestcase(dataTestCase.title, dataTestCase);
				dataTestCase.tests.forEach(function(dataTest) {
					dataTest.run(testset, testCase, dataTest);
				});
				deferred.resolve();
			} catch (e) {
				log && log(dataTestCase.title + " ERROR", e);
				if (testCase) testCase.addResult("Javascript exception", "error", e);
				deferred.resolve();
			}
		});
	}, 10);
	return deferred.promise();
};

exports.test = function() {
	var deferred = new $.Deferred();
	try {
		var deferreds = [];
		_testSets.forEach(function(testSet) {
			deferreds.push(_runTestSet(testSet));
		});
		$.when.apply(null, deferreds).then(function() {
			deferred.resolve();
		}, function(e) {
			log && log("Test " + exports.modulename + " - Test rejected", e);
			deferred.reject(e, exports.modulename);
		});
	} catch (e) {
		log && log("Test " + exports.modulename + " - Exception", e);
		deferred.reject(e, exports.modulename);
	} finally {
		return deferred.promise();
	}
};