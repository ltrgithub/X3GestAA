"use strict";

var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

var _templates = {
	error: ' \
		<div class="modal fade" id="modal-error" tabindex="-1" role="dialog"> \
		    <div class="modal-dialog"> \
				<div class="modal-content"> \
				    <div class="modal-header"> \
						<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&#215;</button> \
				    	<h4 class="modal-title" id="myModalLabel">{{title}}</h4> \
				    </div> \
				    <div class="modal-body"> \
				        <pre>{{body}}</pre> \
				    </div> \
				    <div class="modal-footer"> \
				        <button type="button" class="btn btn-default" data-dismiss="modal">{{close}}</button> \
					</div> \
				</div> \
			</div> \
		</div>',
};

var _execCb = function(cb, msg, data) {
	if (!cb || arguments.length == 0) return;
	try {
		var cb = arguments[0];
		var args = Array.prototype.slice.call(arguments, 1);
		cb.apply(null, args);
	} catch (e) {
		alert("Error calling modal callback\n" + JSON.stringify(e));
	}
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

var _error = function(title, e, cb) {
	if (e == null) {
		e = _toDiagnose({
			where: title
		});
	} else if (jsutils.isError(e)) {
		e = _toDiagnose({
			where: title,
			exception: e
		});
	} else if (typeof e === "string") {
		e = _toDiagnose({
			where: title,
			message: e
		});
	} else {
		if (!e.hasOwnProperty("where")) e.where = title;
		e = _toDiagnose(e);
	}
	var body = JSON.stringify(e, null, 2).replace(/\\n/g, '\n');
	return _modalStatic("error", {
		close: "Close",
		title: "Title",
		body: body
	}, cb);
};

var _modalStatic = function(id, context, cb) {
	/* Always to retry read template and display alert if not found */
	var h = _getHtml(id, context);
	return _modal(h, cb);
};


var _modal = function(html, cb) {
	/* Always to retry read template and display alert if not found */
	var h = $(html).modal({
		keyboard: false,
		backdrop: "static"
	});
	var done = false;
	// Use <button data-dismiss"modal" for close action
	// Use <button data-action"myaction" for action other than
	// close
	h.on("shown.bs.modal", function() {
		try {
			_execCb(cb, "shown.bs.modal", h);
		} catch (e) {
			alert("Modal open - call back error" + e.stack);
		}
	});
	h.on("hidden.bs.modal", function() {
		// Call cb only if no click action
		if (!done && cb) {
			try {
				_execCb(cb, "hidden.bs.modal", h);
			} catch (e) {
				alert("Modal close - call back error" + e.stack);
			}
		}
		// Called when dialog is close - data-dismiss = "modal"
		// or m.modal('hide')
		h.unbind();
		h.remove();
	});
	// For dialogs with option
	h.delegate("button[data-action]", "click", function(evt) {
		var t = $(evt.target);
		var act = t.attr("data-action");
		if (act) {
			done = true;
			evt.preventDefault();
			evt.stopPropagation();
			_execCb(cb, act, h, t.attr("data-params"));
		}
		// Close modal
		h.modal('hide');
	});
	return h;
};

var _toDiagnose = function(o, parent, html) {
	if (!parent) parent = {
		$diagnoses: []
	};
	if (!o) return parent;
	if (typeof o == "string") o = {
		message: o
	};
	if (!Array.isArray(o)) o = [o];
	o.forEach(function(diag) {
		var d;
		if (jsutils.isError(diag)) {
			d = {
				exception: diag
			};
		} else {
			d = _toPlainObject(diag);
		}
		if (d.exception) {
			d.message = (d.message ? d.message + (html ? "<br>" : "\n") : "") + d.exception.message;
			if (d.exception.stack) {
				d.stackTrace = jsutils.cleanStack(d.exception.stack, null, html);
			}
			delete d.exception;
		}
		if (!d.severity) d.severity = "error";
		if (!d.message) d.message = "";
		parent.$diagnoses.push(d);
	});
	return parent;
};

var _toDiagnose = function(o, html) {
	var parent = {
		$diagnoses: []
	};
	if (!o) return parent;
	if (typeof o == "string") o = {
		message: o
	};
	if (!Array.isArray(o)) o = [o];
	o.forEach(function(diag) {
		var d;
		if (jsutils.isError(diag)) {
			d = {
				exception: diag
			};
		} else {
			d = _toPlainObject(diag);
		}
		if (d.exception) {
			d.message = (d.message ? d.message + "\n" : "") + d.exception.message;
			if (d.exception.stack) {
				d.stackTrace = jsutils.cleanStack(d.exception.stack, null, html);
			}
			delete d.exception;
		}
		if (!d.severity) d.severity = "error";
		if (!d.message) d.message = "";
		parent.$diagnoses.push(d);
	});
	return parent;
};

var _errProps = ["message", "stack", "lineNumber", "fileName", "columnNumber"];
var _toPlainObject = function(o, res) {
	if (o == null) return res;
	if (jsutils.isError(o)) {
		res = res || {};
		_errProps.forEach(function(p) {
			res[p] = p === "fileName" ? jsutils.cleanStack(o[p]).join('') : p === "stack" ? jsutils.cleanStack(o[p]) : o[p];
		});
		return res;
	} else if (Array.isArray(o)) {
		return o;
	} else if ($.isPlainObject(o)) {
		res = res || {};
		for (var p in o) {
			res[p] = _toPlainObject(o[p]);
		}
		return res;
	} else if (typeof o !== "object") {
		return o;
	} else {
		return "non-js object";
	}
};


exports.error = _error;