"use strict";
var libTests = require('syracuse-tablet/test/js/libTests');

exports.modulename = "Deferred";

exports.test = function() {

	var testset = libTests.addTestset("Deferred pattern");
	var testcase;

	try {
		testcase = testset.addTestcase("Simple resolve");
		$.smResolve("xxx")
			.then(function(param) {
				// Ok to be here			
				testcase.addResult("Resolved as expected", true);
				testcase.addResult("Value ok", param === "xxx");
			}, function(param) {
				testcase.addResult("Rejected as NOT expected", false);
			});
	} catch (e) {
		testcase.addResult("Exception as NOT expected", false);
	}

	try {
		testcase = testset.addTestcase("Simple reject");
		$.smReject("xxx")
			.then(function(param) {
				testcase.addResult("Resolved as NOT expected", false);
			}, function(param) {
				// Ok to be here
				testcase.addResult("Rejected as expected", true);
				testcase.addResult("Value ok", param === "xxx");
			});
	} catch (e) {
		testcase.addResult("Exception as NOT expected", false);
	}

	var es = "error string";
	try {
		testcase = testset.addTestcase("Simple exception");
		$.smResolve("xxx")
			.then(function(param) {
				throw es;
			}, function(param) {
				testcase.addResult("Rejected as NOT expected", false);
			});
	} catch (e) {
		// Ok to be here
		testcase.addResult("Exception as expected", e === es);
	}

	try {
		testcase = testset.addTestcase("Async exception");
		$.smResolve("xxx")
			.then(function(param) {
				testcase.addResult("Resolved as expected", true);
				testcase.addResult("Value ok", param === "xxx");

				var d = $.Deferred();
				setTimeout(function() {
					try {
						d.resolve("yyy");

						// we never end up here because of throw
						testcase.addResult("Next statement as NOT expected", false);
					} catch (e) {
						testcase.addResult("Inner stack exception as expected", e === es);
						// We could throw again but it will never be catched since the outer catch is another stack. To avoid a confusing message in the console, there is not re-throw here.
						// throw e;
					}
				}, 0);
				return d.promise();
			})
			.then(function(param) {
				testcase.addResult("Resolved as expected", true);
				testcase.addResult("Value ok", param === "yyy");

				throw es;
			})
			.then(function(param) {
				// we never end up here because of throw
				testcase.addResult("Resolved as NOT expected", false);
			}, function(param) {
				// we never end up here because of throw
				testcase.addResult("Rejected as NOT expected", false);
			});
	} catch (e) {
		// we never end up here because of throw is another async process with another stack
		testcase.addResult("Outer stack exception as NOT expected", false);
	}

	return $.smResolve();
};