"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').log;
var libTests = require('syracuse-tablet/test/js/libTests');

exports.modulename = "storage";
exports.test = function() {
	var deferred = $.Deferred();
	try {
		var records = [];
		var deleteTestIdx = 3;
		var context = {
			"$user": "user",
			"$role": "role",
			"$endpoint": "ep",
			"$lang": "de"
		};
		for (var i = 0; i < 5; i++) {
			records.push({
				"key_a": "value_a_" + i,
				"key_b": "value_b_" + i
			});
		}

		var testset = libTests.addTestset("Storage Unit Tests");
		var storageModule = require('syracuse-tablet/html/js/storage/storage');
		var storage = storageModule.getStorage();
		var testcase = testset.addTestcase("Init: " + storage.getInfo());

		var storage;
		storage.init(true)
			.then(function(status) {
				testcase.addResult("Check status", status.$status === storageModule.StatusCodes.OK, status.$message);

				var sequence = $.Deferred();
				try {
					testcase = testset.addTestcase("Insert some records");
					records.forEach(function(rec, idx) {
						storage.put({
							"$context": context,
							"$collection": "testcase",
							"$key": rec.key_a + "~" + rec.key_b,
							"$data": rec
						}).then(function(status) {
							testcase.addResult("Check status", status.$status === storageModule.StatusCodes.OK);
							var added = status.$data;
							testcase.addResult("Check return #" + rec.key_a, added != null, "Data must not be null");
							testcase.addResult("Check value #" + rec.key_a, (added && added.key_a) === rec.key_a, "Values of keys must match " + (added && added.key_a) + "===" + rec.key_a);
							if (idx == (records.length - 1)) {
								sequence.resolve();
							}
						}, function(e) {
							sequence.reject(e);
						});
					});
				} catch (e) {
					sequence.reject(e);
				} finally {
					return sequence.promise();
				}
			})
			.then(function() {
				var sequence = $.Deferred();
				try {
					testcase = testset.addTestcase("Read single records");
					records.forEach(function(rec, idx) {
						storage.read({
							"$context": context,
							"$collection": "testcase",
							"$key": rec.key_a + "~" + rec.key_b
						}).then(function(status) {
							testcase.addResult("Check status", status.$status === storageModule.StatusCodes.OK);
							var read = status.$data;

							testcase.addResult("Check return #" + rec.key_a, read != null, "Result must not be null");
							testcase.addResult("Check value #" + rec.key_a, (read && read.key_a) === rec.key_a, "Values of keys must match " + (read && read.key_a) + "===" + rec.key_a);
							if (idx == (records.length - 1)) {
								sequence.resolve();
							}
						}, function(e) {
							sequence.reject(e);
						});
					});
				} catch (e) {
					sequence.reject(e);
				} finally {
					return sequence.promise();
				}
			})
			.then(function() {
				testcase = testset.addTestcase("Read non existant records");
				return storage.read({
					"$context": context,
					"$collection": "testcase",
					"$key": "you will never find me"
				}).then(function(status) {
					testcase.addResult("Check status", status.$status === storageModule.StatusCodes.NOT_FOUND);
				});
			})
			.then(function() {
				testcase = testset.addTestcase("Query all records");
				return storage.query({
					"$context": context,
					"$collection": "testcase"
				}).then(function(status) {
					testcase.addResult("Check status", status.$status === storageModule.StatusCodes.OK);
					testcase.addResult("Check data count", status.$data.length === records.length);

					var testMap = {};
					for (var i = 0; i < status.$data.length; i++) {
						testMap[status.$data[i].key_a] = status.$data[i];
					}
					for (var i = 0; i < records.length; i++) {
						var rec = records[i];
						testcase.addResult("Check data values ", testMap[rec.key_a] != null, "Key must exist: " + rec.key_a);
					}
				});
			})
			.then(function() {
				testcase = testset.addTestcase("Query empty collection");
				return storage.query({
					"$context": context,
					"$collection": "I am not there!"
				}).then(function(status) {
					testcase.addResult("Check status", status.$status === storageModule.StatusCodes.OK);
					testcase.addResult("Check data", status.$data.length === 0);
				});
			})
			.then(function() {
				testcase = testset.addTestcase("Delete one record");
				var rec = records[deleteTestIdx];
				return storage.remove({
					"$context": context,
					"$collection": "testcase",
					"$key": rec.key_a + "~" + rec.key_b,
				}).then(function(status) {
					testcase.addResult("Check status", status.$status === storageModule.StatusCodes.OK);
				});
			})
			.then(function() {
				testcase = testset.addTestcase("Delete non existing record");
				return storage.remove({
					"$context": context,
					"$collection": "testcase",
					"$key": "you will never find me"
				}).then(function(status) {
					testcase.addResult("Check status", status.$status === storageModule.StatusCodes.NOT_FOUND);
				});
			})
			.then(function() {
				testcase = testset.addTestcase("Query after deleting record");
				return storage.query({
					"$context": context,
					"$collection": "testcase"
				}).then(function(status) {
					testcase.addResult("Check status", status.$status === storageModule.StatusCodes.OK);
					testcase.addResult("Check data count", status.$data.length === records.length - 1);

					var testMap = {};
					for (var i = 0; i < status.$data.length; i++) {
						testMap[status.$data[i].key_a] = status.$data[i];
					}
					for (var i = 0; i < records.length; i++) {
						var rec = records[i];
						if (i === deleteTestIdx) {
							testcase.addResult("Check data values ", testMap[rec.key_a] == null, "Key must NOT exist: " + rec.key_a);
						} else {
							testcase.addResult("Check data values ", testMap[rec.key_a] != null, "Key must exist: " + rec.key_a);
						}
					}
				});
			})
			.then(function() {
				testcase = testset.addTestcase("Overwrite record");
				return storage.put({
					"$context": context,
					"$collection": "testcase",
					"$key": "same key",
					"$data": {
						a: 1
					}
				})
					.then(function(status) {
						testcase.addResult("Check status first insert", status.$status === storageModule.StatusCodes.OK);
						return storage.put({
							"$context": context,
							"$collection": "testcase",
							"$key": "same key",
							"$data": {
								a: 2
							}
						});
					})
					.then(function(status) {
						testcase.addResult("Check status update same key", status.$status === storageModule.StatusCodes.OK);
						return storage.read({
							"$context": context,
							"$collection": "testcase",
							"$key": "same key"
						});
					})
					.then(function(status) {
						testcase.addResult("Check read after update", status.$status === storageModule.StatusCodes.OK);
						testcase.addResult("Check read after update", status.$data && status.$data.a === 2);
					});
			})
			.then(function() {
				deferred.resolve();
			}, function(e) {
				if (testcase) {
					testcase.addResult("Javscript exception", "error", e);
					console.log(e);
				} else {
					deferred.reject(e, exports.modulename);
				}
			});
	} catch (e) {
		log && log("Test storage error");
		log && log(e);
		deferred.reject(e, exports.modulename);
	} finally {
		return deferred.promise();
	}
};