"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').log;
var testUtil = require('syracuse-tablet/test/js/testUtil');

exports.test = function() {
	var deferred = new $.Deferred();

	var testset;
	var testcase;

	var i;
	var apps = [];
	for (i = 0; i < 5; i++) {
		apps.push({
			"id": "abc-" + i,
			"url": "http://localhost:8124/sdata/syracuse/collaboration/syracuse/portlets('abc-" + i + "')/$service/representation",
			"title": "My test app",
			"dsdescription": "GX3APP",
			"description": "My test app",
			"icon": "expenses",
			"baseURL": "http://localhost:8124/sdata/x3/erp/GX3APP",
			"version": "0.000"
		});
	}

	testset = testUtil.addTestset("Storage test");

	var storage = require('syracuse-tablet/html/js/storage/storage').getStorage();
	testcase = testUtil.addTestcase(testset, "Init: " + storage.getInfo());

	var storage;
	var created = [];
	var match = {};
	var query;
	storage.init(true)
		.then(function() {
			var sequence = new $.Deferred();
			testcase = testUtil.addTestcase(testset, "Insert some app configs");
			sequence.resolve();
			apps.forEach(function(app) {
				sequence = sequence.then(function() {
					return storage.createAppConfig(app);
				})
					.then(function(n) {
						testUtil.addResult(testcase, "Check return #" + app.id, n != null, "Return is null");
						testUtil.addResult(testcase, "Check ID #" + app.id, (n && n.id) === app.id, "IDs do not match: " + (n && n.id) + "=== " + app.id);
						created.push(n);
					});
			});
			return sequence;
		})
		.then(function() {
			testcase = testUtil.addTestcase(testset, "Query all app configs");
			return storage.queryAppConfigs();
		}).
	then(function(query) {
		created.forEach(function(app) {
			if (query.some(function(should) {
				return should.url === app.url;
			})) {
				match[app.id] = app;
			}
		});
		testUtil.addResult(testcase, "Number of queried configs does not match inserted ones!", Object.keys(match).length === Object.keys(apps).length, Object.keys(match).length + "===" + Object.keys(apps).length);
	})
		.then(function() {
			testcase = testUtil.addTestcase(testset, "Update one app config");
			var upd = apps[0];
			upd.version = "1.000";
			return storage.createAppConfig(upd);
		})
		.then(function(upd2) {
			var upd = apps[0];
			testUtil.addResult(testcase, "Check return #" + upd.id, upd2 != null, "Return is null");
			testUtil.addResult(testcase, "Check ID #" + upd.id, (upd2 && upd2.id) === upd.id, "IDs do not match: " + (upd2 && upd2.id) + "=== " + upd.id);
			testUtil.addResult(testcase, "Check Version #" + upd.id, (upd2 && upd2.version) === "1.000", "Versions do not match: " + (upd2 && upd2.version) + "=== 1.000");
		})
		.then(function() {
			var upd = apps[0];
			testcase = testUtil.addTestcase(testset, "Read one app config");
			return storage.readAppConfig(upd.id);
		})
		.then(function(read) {
			var upd = apps[0];
			testUtil.addResult(testcase, "Check return #" + upd.id, read != null, "Return is null");
			testUtil.addResult(testcase, "Check ID #" + upd.id, (read && read.id) === upd.id, "IDs do not match: " + (read && read.id) + "=== " + upd.id);
			testUtil.addResult(testcase, "Check Version #" + upd.id, (read && read.version) === "1.000", "Versions do not match: " + (read && read.version) + "=== 1.000");
		})
		.then(function() {
			testcase = testUtil.addTestcase(testset, "Delete one app configs");
			var upd = apps[0];
			return storage.deleteAppConfig(upd.id);
		})
		.then(function() {
			return storage.queryAppConfigs();
		})
		.then(function(query) {
			testUtil.addResult(testcase, "Only 4 left", query.length === 4);
			var upd = apps[0];
			var stillFound = query.some(function(app) {
				return app.id === upd.id;
			});
			testUtil.addResult(testcase, "Record not there any more", stillFound === false);
		})
		.then(function() {
			testcase = testUtil.addTestcase(testset, "Delete all app configs");
			return storage.queryAppConfigs();
		})
		.then(function(query) {
			var sequence = new $.Deferred();
			sequence.resolve();
			query.forEach(function(app) {
				sequence = sequence.then(function() {
					return storage.deleteAppConfig(app.id);
				});
			});
			return sequence;

		})
		.then(function() {
			return storage.queryAppConfigs();
		})
		.then(function(query) {
			testUtil.addResult(testcase, "Nothing left", query.length === 0, "Not all apps were deleted, still " + query.length + " existing!");
		})
		.then(function() {
			deferred.resolve();
		});
	return deferred.promise();
};