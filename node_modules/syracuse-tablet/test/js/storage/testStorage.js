"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').log;
var testUtil = require('syracuse-tablet/test/js/testUtil');

exports.modulename = "storage";
exports.test = function() {
	var deferred = $.Deferred();
	try {
		var apps = [];
		for (var i = 0; i < 5; i++) {
			apps.push({
				"id": "abc-" + i,
				"url": "http://localhost:8124/sdata/syracuse/collaboration/syracuse/portlets('abc-" + i + "')/$service/representation",
				"title": "My test app",
				"dsdescription": "GX3APP",
				"description": "My test app",
				"icon": "expenses",
				"baseURL": "http://localhost:8124/sdata/x3/erp/GX3APP",
				"version": "0.000"
			});
		}

		var testset = testUtil.addTestset("Storage test");
		var storage = require('syracuse-tablet/html/js/storage/storage').getStorage();
		var testcase = testset.addTestcase("Init: " + storage.getInfo());

		var storage;
		var created = [];
		var match = {};
		var query;
		storage.init(true)
			.then(function() {
				var sequence = $.Deferred();
				testcase = testset.addTestcase("Insert some app configs");
				sequence.resolve();
				apps.forEach(function(app) {
					sequence = sequence.then(function() {
						return storage.createAppConfig(app);
					})
						.then(function(n) {
							testcase.addResult("Check return #" + app.id, n != null, "Return is null");
							testcase.addResult("Check ID #" + app.id, (n && n.id) === app.id, "IDs do not match: " + (n && n.id) + "=== " + app.id);
							created.push(n);
						});
				});
				return sequence;
			})
			.then(function() {
				testcase = testset.addTestcase("Query all app configs");
				return storage.queryAppConfigs();
			}).then(function(query) {
				created.forEach(function(app) {
					if (query.some(function(should) {
						return should.url === app.url;
					})) {
						match[app.id] = app;
					}
				});
				testcase.addResult("Number of queried configs does not match inserted ones!", Object.keys(match).length === Object.keys(apps).length, Object.keys(match).length + "===" + Object.keys(apps).length);
			}).then(function() {
				testcase = testset.addTestcase("Update one app config");
				var upd = apps[0];
				upd.version = "1.000";
				return storage.createAppConfig(upd);
			})
			.then(function(upd2) {
				var upd = apps[0];
				testcase.addResult("Check return #" + upd.id, upd2 != null, "Return is null");
				testcase.addResult("Check ID #" + upd.id, (upd2 && upd2.id) === upd.id, "IDs do not match: " + (upd2 && upd2.id) + "=== " + upd.id);
				testcase.addResult("Check Version #" + upd.id, (upd2 && upd2.version) === "1.000", "Versions do not match: " + (upd2 && upd2.version) + "=== 1.000");
			})
			.then(function() {
				var upd = apps[0];
				testcase = testset.addTestcase("Read one app config");
				return storage.readAppConfig(upd.id);
			})
			.then(function(read) {
				var upd = apps[0];
				testcase.addResult("Check return #" + upd.id, read != null, "Return is null");
				testcase.addResult("Check ID #" + upd.id, (read && read.id) === upd.id, "IDs do not match: " + (read && read.id) + "=== " + upd.id);
				testcase.addResult("Check Version #" + upd.id, (read && read.version) === "1.000", "Versions do not match: " + (read && read.version) + "=== 1.000");
			})
			.then(function() {
				testcase = testset.addTestcase("Delete one app configs");
				var upd = apps[0];
				return storage.deleteAppConfig(upd.id);
			})
			.then(function() {
				return storage.queryAppConfigs();
			})
			.then(function(query) {
				testcase.addResult("Only 4 left", query.length === 4);
				var upd = apps[0];
				var stillFound = query.some(function(app) {
					return app.id === upd.id;
				});
				testcase.addResult("Record not there any more", stillFound === false);
			})
			.then(function() {
				testcase = testset.addTestcase("Delete all app configs");
				return storage.queryAppConfigs();
			})
			.then(function(query) {
				var sequence = $.Deferred();
				sequence.resolve();
				query.forEach(function(app) {
					sequence = sequence.then(function() {
						return storage.deleteAppConfig(app.id);
					});
				});
				return sequence;

			})
			.then(function() {
				return storage.queryAppConfigs();
			})
			.then(function(query) {
				testcase.addResult("Nothing left", query.length === 0, "Not all apps were deleted, still " + query.length + " existing!");
			})
			.then(function() {
				deferred.resolve();
			}, function(e) {
				if (testcase) {
					testcase.addResult("Javscript exception", "error", e);
				}
				deferred.reject(e);
			});
	} catch (e) {
		log && log("Test storage error");
		log && log(e);
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
};