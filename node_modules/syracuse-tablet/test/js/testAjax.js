"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("testAjax");
var libTests = require('syracuse-tablet/test/js/libTests');
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;

exports.modulename = "ajax";
exports.test = function() {
	var deferred = $.Deferred();
	try {
		var baseUrl = window.location.protocol + "//" + window.location.host;
		var testset = libTests.addTestset("Ajax Unit Tests");
		var testcase = testset.addTestcase("GET json file");
		var result = ajax("GET", baseUrl + "/syracuse-tablet/test/fixtures/dummyToGet.json", null, null);

		result.then(function(result) {
			testcase.addResult("Data returned", result != null);
			testcase.addResult("Status is 200 for existing file", result.status === 200);
			testcase.addResult("Message parsed correctly", result && result.responseJSON.success === true);
		}, function(error) {
			testcase.addResult("Request failed!", false);
		}).then(function() {
			var testcase = testset.addTestcase("GET json file (no JSON parsing)");
			result = ajax("GET", baseUrl + "/syracuse-tablet/test/fixtures/dummyToGet.json", null, null, {
				noJsonParsing: true
			});
			result.then(function(result) {
				testcase.addResult("Data returned", result != null);
				testcase.addResult("Status is 200 for existing file", result.status === 200);
				testcase.addResult("Message returned as string", result && result.responseText && result.responseText.indexOf && result.responseText.indexOf('"success": true') >= 0);
			}).then(function() {
				deferred.resolve();
			});
		}).then(function() {
			var testcase = testset.addTestcase("GET not existing file");
			result = ajax("GET", baseUrl + "/syracuse-tablet/test/fixtures/IDoNotExist.json", null, null);
			result.then(function(result) {
				testcase.addResult("Status is 404 for non existent file", result.status === 404);
			}).then(function() {
				deferred.resolve();
			});
		}).then(function() {
			deferred.resolve();
		});
	} catch (e) {
		log && log("Test ajax error");
		log && log(e);
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
};