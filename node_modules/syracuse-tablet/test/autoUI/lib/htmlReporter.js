"use strict";

var fs = require('fs');

var Base = require('../node_modules/mocha/lib/reporters/base');
var inherits = require('./../node_modules/mocha/lib/utils').inherits;

module.exports = Html;

function Html(runner) {
	Base.call(this, runner);

	var self = this;
	var indents = 0;
	var n = 0;

	var curSuite = null;

	runner.on('start', function() {
		_writeHtmlHead();
	});

	runner.on('suite', function(suite) {
		console.log("start: " + suite.title);
		var s = {
			suite: suite,
			parent: curSuite,
			children: [],
			tests: [],
			errors: 0
		};
		if (curSuite) {
			curSuite.children.push(s);
		}
		curSuite = s;
	});

	runner.on('suite end', function() {
		console.log("end");
		var s = curSuite;
		curSuite = curSuite.parent;
		if (curSuite == null) {
			_writeSuite(s);
		}
	});

	runner.on('pending', function(test) {});

	runner.on('pass', function(test) {
		curSuite.tests.push(test);
	});

	runner.on('fail', function(test) {
		curSuite.tests.push(test);
		curSuite.errors = curSuite.errors + 1;
		var p = curSuite.parent;
		while (p) {
			p.errors = p.errors + 1;
			p = p.parent;
		}
	});

	runner.on('end', function() {
		_writeHtmlEnd();
	});
}

inherits(Html, Base);

function _writeString(str, clearFile) {
	str = str + '\n';

	if (clearFile) {
		fs.writeFileSync('testResult.html', str);
	} else {
		fs.appendFileSync('testResult.html', str);
	}
}

function _writeHtmlHead() {
	_writeString('<html><head>', true);
	_writeString('<link rel="stylesheet" href="testResult.css">');
	_writeString('</head><body>');
}

function _writeHtmlEnd() {
	_writeString('</body></html>');
}

function _writeSuite(suite) {
	_writeString('<div class="suite ' + (suite.errors > 0 ? 'error' : 'success') + '">');
	_writeString('<div class="suite-title">' + suite.suite.title + '</div>');
	_writeString('<div class="suite-body">');

	suite.children.forEach(function(child) {
		_writeSuite(child);
	});

	suite.tests.forEach(function(test) {
		_writeTest(test);
	});
	_writeString('</div>');
	_writeString('</div>');
}

function _writeTest(test) {
	var failed = test.err != null;

	_writeString('<div class="test ' + (failed ? 'error' : 'success') + '">');
	_writeString('<div class="test-title">' + test.title + '</div>');
	_writeString('<div class="test-body">');
	_writeString('</div>');
	_writeString('</div>');
}