"use strict";

var _webdriver = require('selenium-webdriver');
var _assert = require('selenium-webdriver/testing/assert');

exports.Driver = require("./driver");
exports.App = require("./app");
exports.SEL = require("./selectors");
exports.DOM = require("./dom");
exports.Config = require("../config").config;

exports.log = function(text) {
	if (exports.Config.log) {
		console.log(text);
	}
};

exports.defaultBeforeAndAfter = function() {
	before(function() {
		this.timeout(30000);
		return exports.login();
	});
	after(function() {
		if (exports.Config.dontQuit) {
			return;
		}
		var delay = exports.Config.quitDelay || 0;
		this.timeout(delay == null ? 2000 : (delay + 2000));
		return exports.Driver.quit(delay);
	});
};

exports.login = function() {
	return exports.App.loadApp()
		.then(function() {
			return exports.App.ensureLogin();
		});
};

exports.resolve = function() {
	var deferred = new _webdriver.promise.Deferred();
	deferred.fulfill.apply(deferred, arguments);
	return deferred.promise;
};

exports.Deferred = function() {
	return new _webdriver.promise.Deferred();
};

exports.sleep = function(time) {
	return exports.Driver.Browser().sleep(time);
};
exports.sleep$ = function(time) {
	return function() {
		return exports.Driver.Browser().sleep(time);
	};
};

exports.assert = function(subject) {
	return new _assert.Assertion(subject);
};
exports.assertEquals = function(a, b, text) {
	var asrt = new _assert.Assertion(a);
	return asrt.equals(b, text);
};

/** 
 * Assert that is always ok to signal this fact at the end of a process
 */
exports.assertOk = function(text) {
	var a = new _assert.Assertion(true);
	return a.equals(true, text);
};

/** 
 * Assert that is always failed to signal this fact at the end of a process
 */
exports.assertFail = function(text) {
	var a = new _assert.Assertion(false);
	a.equals(true, text);
};