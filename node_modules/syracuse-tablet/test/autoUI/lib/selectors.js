"use strict";

/**
 * Find a DOM element by ID
 * Should be used to find static UI elements that always have the same ID
 */
exports.Id = function(id) {
	return {
		id: id
	};
};

/**
 * Find an element by it's data-action attribute and optionally the params value
 */
exports.DataAction = function(action, params) {
	action = '[data-action="' + action + '"]';
	params = (params && '[data-params="' + params + '"]') || "";

	return {
		css: action + params
	};
};

/**
 * Locate a tile based on the name of the app it links to
 */
exports.AppTile = function(appName) {
	return exports.Attr("data-application-name", appName);
};

/**
 * Find a tile based on the name of the page it links to
 */
exports.PageTile = function(pageName) {
	return {
		css: '.s-m-tile[data-nav="' + pageName + '"], .s-m-cell[data-nav="' + pageName + '"]'
	};
};


/**
 * Find a field by it's x3 $bind name (e.g. CODE, CUR, ...)
 */
exports.X3Field = function(fieldName) {
	return {
		css: '[data-s-ut-field-x3name="' + fieldName + '"]'
	};
};

/**
 * Find a grid row
 */
exports.Row = function(rowNum) {
	return {
		css: '[data-s-ut-row-idx="' + rowNum + '"]'
	};
};

/**
 * Find an element by any html attribute
 * Should not be used in test scripts only in functions that wrap a logical element because it strongly couples to the DOM
 */
exports.Attr = function(attr, value) {
	if (value != null) {
		attr = '[' + attr + '="' + value + '"]';
	} else {
		attr = '[' + attr + ']';
	}

	return {
		css: attr
	};
};

/**
 * Find by class name
 * Should not be used in test scripts only in functions that wrap a logical element because it strongly couples to the DOM
 */
exports.Class = function(cls) {
	return {
		className: cls
	};
};

/**
 * Find by CSS selector expression
 * Should not be used in test scripts only in functions that wrap a logical element because it strongly couples to the DOM
 */
exports.Css = function(css) {
	return {
		css: css
	};
};

/**
 * Select page by name
 */
exports.Page = function(pageName) {
	return {
		css: '[data-s-ut-page-name="' + pageName + '"]' + '[data-s-ut-page-is-current="' + pageName + '"]'
	};
};

/** 
 * Find vignette by page name
 */
exports.ChildPage = function(pageName) {
	return {
		css: '.s-m-nested[data-s-ut-page-name="' + pageName + '"]'
	};
};

/**
 * Select modal by name
 */
exports.Modal = function(modalName) {
	return {
		className: "modal " + modalName
	};
};

/**
 * Select link defined by name in $links of X3 prototype, e.g. $create
 */
exports.X3Link = function(link) {
	var link = '[data-s-ut-link-x3name="' + link + '"]';
	return {
		css: link
	};
};