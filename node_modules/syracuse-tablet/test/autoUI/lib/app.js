"use strict";

var driver = require("./driver");
var UT = require("./ut");

/**
 * Point browser to app url
 */
exports.loadApp = function() {
	return UT.Driver.Browser().get(UT.Config.url);
};

/**
 * Ensure user is logged in and sitting on the welcome page
 * @returns
 */
exports.ensureLogin = function() {
	return UT.App.waitPage(".login")
		.then(function() {
			return UT.Dom.setValue(UT.Sel.Id('login-user'), UT.Config.user);
		})
		.then(function() {
			return UT.Dom.setValue(UT.Sel.Id('login-password'), UT.Config.password);
		})
		.then(function() {
			return UT.Dom.click(UT.Sel.Id('login-login'));
		})
		.then(function() {
			// Wait for one or the other
			return UT.Dom.waitLocated([
				UT.Sel.Modal("select-context"),
				UT.Sel.Page("$welcomeDashboard.$mobileDashboard")
			], 5000);
		})
		.then(function($$matchedPage) {
			return UT.Dom.isModal($$matchedPage, "select-context");
		})
		.then(function(isSelectContext) {
			if (isSelectContext) {
				return _handleModalSelectContext();
			} else {
				return _ensureCorrectContext();
			}
		})
		.then(function() {
			// Wait for welcome page agin for the matter the context had to be switched
			return UT.App.waitPage(".$welcomeDashboard.$mobileDashboard", 5000);
		});
};

/**
 * Open change profile modal
 */
exports.openChangeProfile = function() {
	var $$$switchContext = UT.Sel.DataAction("linkClicked", "switchContext");

	return UT.Dom.click(UT.Sel.Css(".s-m-header-user-info > a")).then(function() {
			return UT.Dom.waitVisible($$$switchContext, 500);
		})
		.then(function() {
			return UT.Dom.click($$$switchContext);
		})
		.then(function() {
			return UT.App.waitModal("select-context", 1000);
		});
};

/**
 * Open design page mode
 */
exports.openDesignPage = function() {
	var $$$designPage = UT.Sel.DataAction("linkClicked", "designPage");

	return UT.Dom.click(UT.Sel.Css(".s-m-header-user-info > a")).then(function() {
			return UT.Dom.waitVisible($$$designPage, 500);
		})
		.then(function() {
			return UT.Dom.click($$$designPage);
		})
		.then(function() {
			return UT.Dom.waitLocated(UT.Sel.Id("authPanelControlType"), 1000);
		});
};

/**
 * Close design page
 */
exports.closeDesignPage = function() {
	var $$$closeDesignPage = UT.Sel.Id("auth-btn-close-id");
	return UT.Dom.click($$$closeDesignPage)
		.then(function() {
			return exports.confirm("yes");
		});
};

/**
 * Wait for confirm modal to show up and confirm with "option"
 * either "yes" or "no"
 */
exports.confirm = function(option) {
	return UT.App.waitModal("confirm")
		.then(function() {
			return UT.Dom.click(UT.Sel.DataAction(option));
		});
};

/**
 * Select element in authoring tree left side
 */
exports.selectAuthTreeElement = function(id) {
	// to click
	var $$$item = UT.Sel.Attr("data-s-ut-auth-elmt-id", id);
	// wait for selection properties showing up on right panel
	var $$$sel = UT.Sel.Attr("data-s-ut-auth-selected-elmt", id);

	return UT.Dom.waitLocated($$$item, 3000)
		.then(function() {
			return UT.Dom.click($$$item, null, UT.Dom.waitLocated$($$$sel));
		});
};

/**
 * Expand an authoring option in the right panel
 */
exports.authExpandOption = function(option) {
	// to click
	var $$$item = UT.Sel.Attr("aria-controls", "collapse_auth_prop_" + option);
	return UT.Dom.waitLocated($$$item, 1000)
		.then(function() {
			return UT.Dom.click($$$item, null, UT.sleep$(200));
		});
};

/**
 * Expand and select an authoring option
 */
exports.authSelectOption = function(option, value) {
	// to click
	var $$$item = UT.Sel.Id("auth_opt_" + option + "_" + value);

	return exports.authExpandOption(option)
		.then(function() {
			return UT.Dom.click($$$item, null, UT.sleep$(200));
		});
};

/**
 * Fill modal to select context and validate
 * @returns
 */
function _handleModalSelectContext() {
	return UT.Dom.setValue(UT.Sel.Id("login-select-role"), UT.Config.role)
		.then(function() {
			return UT.Dom.setValue(UT.Sel.Id("login-select-endpoint"), UT.Config.endpoint);
		})
		.then(function() {
			return UT.Dom.setValue(UT.Sel.Id("login-select-language"), UT.Config.lang);
		})
		.then(function() {
			return UT.Dom.click(UT.Sel.DataAction("$validate"));
		});
}

/**
 * Check if current context is the desired one and open modal if not
 * @returns
 */
function _ensureCorrectContext() {
	var desiredtCtx = [UT.Config.user, UT.Config.role, UT.Config.lang, UT.Config.endpoint].join(',');
	return UT.Dom.getAttr(UT.Sel.Attr("data-s-ut-user-ctx"), "data-s-ut-user-ctx").then(function(curCtx) {
		if (curCtx === desiredtCtx) {
			// Context is ok, so to nothing
			return UT.resolve();
		}
		return exports.openChangeProfile().then(function() {
			return _handleModalSelectContext();
		});
	});
}

/** 
 * Wait for a page to open up, default timeout is 10000ms
 * Return is a promise with parameter beeing the found webelement
 */
exports.waitPage = function(pageName, timeout) {
	timeout = timeout != null ? timeout : 10000;
	UT.log("Waiting for page: " + pageName);
	return UT.Dom.waitLocated(UT.Sel.Page(pageName), timeout);
};
exports.waitPage$ = function(pageName, timeout) {
	return function() {
		return exports.waitPage(pageName, timeout);
	};
};

/** 
 * Wait for a modal to open up, default timeout is 10000ms
 * Return is a promise with parameter beeing the found webelement
 */
exports.waitModal = function(modalName, timeout) {
	timeout = timeout != null ? timeout : 10000;
	UT.log("Waiting for modal: " + modalName);
	return UT.Dom.waitLocated(UT.Sel.Modal(modalName), timeout);
};

exports.waitModal$ = function(modalName, timeout) {
	return function() {
		return exports.waitModal(modalName, timeout);
	};
};

/**
 * Navigate to one of the pages in the client test app
 * page: Page name: x3.erp.SUPERV.AQMCRUDM.$query
 * gadgetId: Name of gadget if page name is not unique (usually does not matter)
 */
exports.navToTestPage = function(page, gadgetId) {
	var $$$sel;
	if (gadgetId) {
		$$$sel = UT.Sel.Attr("data-gadget-id", gadgetId);
	} else {
		$$$sel = UT.Sel.PageTile(page);
	}

	return UT.Dom.click(
			UT.Sel.AppTile("clientTestApplication"),
			null,
			UT.App.waitPage$(".testHomeDashboard.$mobileDashboard", 2000))
		.then(function() {
			return UT.Dom.click(
				$$$sel,
				null,
				UT.App.waitPage$(page, 5000));
		});
};

/**
 * selector: has to be a webelement or a selector of a grid control with search capability
 * text: text to execute search for
 * parent: Optional parent if grid is a selector
 */
exports.searchInGrid = function(selector, text, parent) {
	return UT.Dom.find(selector, parent)
		.then(function($$grid) {
			return UT.Dom.find(UT.Sel.Css(".s-m-search input"), $$grid)
				.then(function($$search) {
					return UT.Dom.setValue($$search, text);
				})
				.then(function() {
					return UT.Dom.click(UT.Sel.DataAction("actionArray", "search"), $$grid);
				})
				.then(function() {
					return $$grid.getAttribute("id");
				})
				.then(function(gridId) {
					// Wait for table header signaling a match 
					return UT.Dom.waitLocated(UT.Sel.Css("#" + gridId + " thead th.s-m-search"), 5000);
				});
		});
};