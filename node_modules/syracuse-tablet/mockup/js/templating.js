"use strict";
(function($) {
	$.stemplates = {};
	var exports = $.stemplates;
	var _config = {
		htmlHolder: "body",
		tmplPath: "templates",
		tmplExt: ".tmpl"
	};
	var _temptates = {};
	var _url = (function() {
		var url = window.location.href.split('/');
		url[url.length - 1] = _config.tmplPath + "/";
		return url.join('/');
	})();

	var _domId = function(tmlpId) {
		return tmlpId.replace(/\\|\/|\./g, "_");
	};
	var _get = function(filePath, tmplId, options) {
		options = options || {};
		var deferred = $.Deferred();
		tmplId = tmplId || filePath;
		var domId = _domId(tmplId);
		if (_temptates[tmplId]) {
			deferred.resolve(_temptates[tmplId]);
		} else if ($("#" + domId).length > 0) {
			_temptates[tmplId] = $("#" + domId).html();
			deferred.resolve(_temptates[tmplId]);
		} else {
			$.ajax({
				url: _url + filePath + _config.tmplExt,
				async: true
			}).complete(function(jqXHR, textStatus) {
				try {
					if (jqXHR.status === 200) {
						// We add the script tag here to have Syntax highlighting in .tmpl file
						var e = $(_config.htmlHolder);
						if (jqXHR.responseText.indexOf("<script") == -1) {
							e.append($('<script id="' + domId + '" type="text/x-handlebars-template">' + jqXHR.responseText + "</script>"));
						} else {
							$(jqXHR.responseText).each(function(i, script) {
								e.append(script);
							});
						}
						deferred.resolve($("#" + domId).html());
					} else {
						if (options.failNotFound) throw new Error("Template not found\n\tfilePath[" + filePath + "]");
						deferred.resolve(null);
					}
				} catch (e) {
					deferred.reject($.smobile.helpers.toDiagnose({
						exception: e,
						where: "stemplates._get"
					}));
				}
			});
		}
		return deferred.promise();
	};

	// file : template file path - tmplId : template id - tmplId = null if only one template in the file
	exports.exec = function(filePath, context, options, tmplId) {
		var deferred = $.Deferred();
		tmplId = tmplId || filePath;
		_get(filePath, tmplId, options).then(function(tmpl) {
			try {
				if (typeof tmpl === "string") {
					tmpl = Handlebars.compile(tmpl);
					_temptates[tmplId] = tmpl;
				}
				deferred.resolve(tmpl ? tmpl(context || {}) : null);
			} catch (e) {
				deferred.reject({
					message: "Url = [" + _url + "]\n\tfilePath[#" + filePath + "]\n\ttmplId[#" + tmplId + "]\n\tExt [" + _config.tmplExt + "]",
					exception: e,
					where: "stemplates.exec"
				});
			}
		}, function(e) {
			deferred.reject(e);
		});
		return deferred.promise();
	};

	// Execute a template already loaded - Multiple templates in a same file
	exports.execSync = function(tmplId, context) {
		var tmpl = _temptates[tmplId];
		if (!_temptates[tmplId]) {
			tmpl = $("#" + _domId(tmplId)).html();
			if (tmpl) {
				tmpl = Handlebars.compile(tmpl);
				_temptates[tmplId] = tmpl;
			}
		}
		return tmpl ? tmpl(context || {}) : null;
	};

	// Execute a template already loaded - Multiple templates in a same file
	exports.execHtmlTmpl = function(html, context) {
		var tmpl = _temptates[tmplId];
		if (!_temptates[tmplId]) {
			tmpl = $("#" + _domId(tmplId)).html();
			if (tmpl) {
				tmpl = Handlebars.compile(tmpl);
				_temptates[tmplId] = tmpl;
			}
		}
		return tmpl ? tmpl(context || {}) : null;
	};

	// id = null -> Remove all templates
	exports.removeTmpl = function(id) {
		var s = id ? "#" + _domId(id) : "script[type='text/x-handlebars-template']";
		var e = $(_config.htmlHolder).find(s).remove();
	};


	exports.preload = function(templates) {
		var promises = [];
		templates.forEach(function(t) {
			promises.push($.stemplates.exec(t), {});
		});
		$.when(promises).always(function() {
			console.log("Templates preload", "Count[" + templates.length + "]", "loaded[" + arguments.length + "]");
		});
	};

	exports.init = function() {
		_config.tmplPath = _config.tmplPath + ($.isWinJs ? "/winjs" : $.isMetroUi ? "/metro" : "");
		_url = window.location.href.split('/');
		_url[_url.length - 1] = _config.tmplPath + "/";
		_url = _url.join('/');
	};

})(jQuery);