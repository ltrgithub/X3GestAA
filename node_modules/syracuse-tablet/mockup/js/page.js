"use strict";
(function($) {
	if (!$.smobile) $.smobile = {};
	var exports = $.smobile;
	var helpers = $.smobile.helpers;
	var _log = $.smobile.log;

	var _pages = {
		//Pages declaration
	};

	var Page = function($parent, state) {
		// For breadCrumb
		this.historyLength = 0;
		this.historyTitle = state.id;
		this._$parent = $parent;
		this.state = state;
		this.id = state.uuid;
		this.mockup = $.smobile.site.config("mockup");
	};
	Page.prototype = {
		init: function() {
			var self = this;
			var html = $.stemplates.execSync("pageTmpl", {
				uuid: self.state.uuid,
				klass: "",
				appId: self.state.appId
			});
			self.$elmt = $(html).hide();
			self.$elmt.appendTo(self._$parent);
			$(self.$elmt).smPageController(this);
		},
		destroy: function() {
			var self = this;
			_log && _log("Page destroy", self.id);
			if (self.getProp["type"] === "appdashboard") {
				// appdashboard page -> Destroy all related pages
				self._destroyAppChilds();
			}
			self.$elmt.smPageRemoveController();
			self.$elmt.unbind();
			self.$elmt.remove();
			self._$parent = null;
			self.$elmt = null;
		},
		_destroyAppChilds: function() {
			var self = this;
			if (self.$elmt) {
				// destroy all page that belongs to an application except this (dashboard)
				var childs = self._$parent.find('.class[data-appId="' + self.getProp("appId") + '"]');
				if (childs.length > 0) {
					_log && _log("Page destroychilds", self.id);
					childs.each(function(idx) {
						var ctrl = $(this).smPageController();
						if (ctrl && ctrl != self) ctrl.destroy();
					});
				}
			}
		},
		destroySiblings: function() {
			var self = this;
			if (self.$elmt) {
				// destroy all siblings if any when direct access with the breadcrumb
				_log && _log("Page destroySiblings", "destroySiblings");
				var next = self.$elmt.siblings(function(idx) {
					var ctrl = $(this).smPageController();
					if (ctrl) ctrl.destroy();
				});
			}
		},
		getProp: function(prop) {
			return this.state[prop];
		},
		load: function() {
			var self = this;
			var deferred = $.Deferred();
			self.loadStructure().then(function(ui) {
				self.ui = ui;
				return self.loadData();
			}).then(function(data) {
				self._controller = $.smobile.createController(self, data);
				return self.buildHtml(data);
			}).then(function(html) {
				return self.render(html);
			}).then(function(html) {
				deferred.resolve();
			}, function(e) {
				deferred.reject(e);
			});
			return deferred.promise();
		},
		loadStructure: function() {
			var self = this;
			var deferred = $.Deferred();
			if (!this.mockup) {
				// Load structure from representation				
			}
			deferred.resolve();
			return deferred.promise();
		},
		loadData: function() {
			var self = this;
			if (this.mockup) {
				return $.smobile.mockup.loadData(self.state);
			} else {
				var deferred = $.Deferred();
				deferred.resolve({
					test: "loadData"
				});
				return deferred.promise();
			}
		},
		buildHtml: function(data) {
			var self = this;
			if (this.mockup) {
				return $.smobile.mockup.buildHtml(self.state, data);
			} else {
				var deferred = $.Deferred();
				var header = $.stemplates.execSync("headTmpl", self.state);
				var content = $.stemplates.execSync("contentTmpl", self.state);
				deferred.resolve({
					header: header,
					content: content
				});
				return deferred.promise();
			}
		},
		render: function(html) {
			var self = this;
			var deferred = $.Deferred();
			$(document.body);
			self.$elmt.children("header").html(html.header);
			self.$elmt.children("section").html(html.content);
			deferred.resolve();
			return deferred.promise();
		},
		activate: function(currentPage, cb) {
			var self = this;
			_log && _log("Page activate", self.id);
			self.historyLength = history.length;
			self._show(currentPage, cb);
		},
		deactivate: function(currentPage, cb) {
			var self = this;
			_log && _log("Page deactivate", self.id);
			self._hide(currentPage, cb);
		},
		_show: function(currentPage, cb) {
			var self = this;
			var transition = self.getProp("transition");
			if (currentPage) {
				currentPage._hide(function() {
					self.$elmt.show(transition || 0, function() {
						cb();
					});
				});
				return;
			}
			self.$elmt.show(transition == null ? 0 : transition, cb);
		},
		_hide: function(cb) {
			var self = this;
			var transition = self.getProp("transition");
			self.$elmt.hide(transition == null ? 0 : transition, cb);
		}
	};
	exports.pageInfo = function(id, clone) {
		var i;
		if ($.smobile.site.config("mockup")) {
			i = $.smobile.mockup.pageInfo(id);
		}
		if (!i) i = _pages[id];
		if (i && clone === true) i = $.extend(true, {}, i);
		return i;
	};
	exports.createPage = function($parent, state) {
		var p = null;
		if ($.smobile.site.config("mockup")) {
			p = $.smobile.mockup.createPage($parent, state);
		}
		if (!p) p = new Page($parent, state);
		p.init();
		return p;
	};
	exports.initMockup = function(pages) {
		if (pages) {
			_pages = $.extend(true, {}, pages, _pages);
		}
	};
})(jQuery);