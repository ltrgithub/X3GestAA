"use strict";
(function($) {
	var that = $.smobile || {};
	$.smobile = that;
	var $helpers = $.helpers;
	var $sdata = $.sdata;
	var _status2css = function(value) {
		switch (value) {
			case $sdata.STATUS.CREATED:
				return "created";
				break;
			case $sdata.STATUS.DELETED:
				return "deleted";
				break;
			case $sdata.STATUS.MODIFIED:
				return "modified";
				break;
		}
		return "";
	};
	that.controls.SyncView = {
		_createFootBtns: function(controller, id) {
			if (controller.getValue()) {
				var btns = [{
					linkId: id + "_delAllDrafts",
					title: $helpers.locale().ui.delete_all_drafts,
					action: "delAllDrafts",
					"jmdata": {
						"data-theme": "x",
						"data-icon": "s-delete"
					},
					handler: that.controls.SyncView.actiondelAllDrafts
				}];
				if ($helpers.online()) {
					btns.push({
						linkId: id + "_sendAllDrafts",
						title: $helpers.locale().ui.send_all_drafts,
						action: "sendAllDrafts",
						"jmdata": {
							"data-icon": "s-ok",
							"data-theme": "v"
						},
						handler: that.controls.SyncView.actionsendAllDrafts
					});
				}
				controller.footerAddBtns(btns);
			}
		},
		create_items: function(controller, data, html, mainId) {
			var lineIdx = 0;
			var _addBtn = function(btns) {
				html.push('<div style="float:right"><div style="display:table">');
				for (var i = 0; i < btns.length; i++) {
					html.push('<div style="display:table-cell' + (i > 0 ? ';padding-left:20px' : '') + '">');
					var opt = btns[i];
					var bid = mainId + '_' + lineIdx + opt.id;
					html.push('<a  data-iconpos="top" id="');
					html.push(bid);
					html.push('" data-role="button" data-theme="f" ');
					html.push('data-mini="true" ');
					for (var d in opt.jmdata) {
						html.push(d);
						html.push('="');
						html.push(opt.jmdata[d]);
						html.push('" ');
					}
					html.push('>');
					html.push('</a>');
					html.push('</div>');
				}
				html.push('</div></div>');
			};
			Object.keys(data).forEach(function(value) {
				var meta = $sdata.entityMeta(value);
				if (!meta) return;
				html.push('<li data-role="list-divider">');
				html.push(meta.title || value);
				html.push('</li>');
				var list = data[value];
				list.forEach(function(cd, index) {
					lineIdx++;
					html.push('<li data-role="fieldcontain"');
					var css = [];
					css.push("ui-li-has-icon");
					css.push($helpers.ui.consts.normal_icon);
					if (css.length) html.push(' class="' + css.join(" ") + '"');
					html.push('>');
					var coptions = [];
					coptions.push('<p class="s-m-syncview-key"><strong>');
					if (cd.$info.titlelbl) {
						coptions.push($helpers.htmlEncode(cd.$info.titlelbl + ' : '));
					}
					if (cd.$info.title) {
						coptions.push($helpers.htmlEncode(cd.$info.title));
					}
					coptions.push("</strong></p>");
					if (cd.$info.last_error) {
						coptions.push("<p class=\"s-m-syncview-error\"><strong>");
						coptions.push($helpers.htmlEncode(cd.$info.last_error));
						coptions.push("</strong></p>");
					}
					html.push('<div class="ui-li-icon s-m-syncview-status ' + _status2css(cd.$info.status) + '"></div>');
					var date;
					try {
						date = Date.parseISO8601(cd.$info.updated);
						date = $.scroller.formatDate($helpers.dateSettings.dateFormat + " - " + $helpers.dateSettings.timeFormat, date);
					} catch (e) {
						date = "";
					}
					html.push('<div class="s-m-syncview-date">' + date + '</div>');
					if (cd.$info.status == $sdata.STATUS.DELETED) {
						_addBtn([{
							id: '_cancel',
							jmdata: {
								'data-action': 'deleteDraft',
								'data-icon': 's-delete',
								'data-action-param': cd.$info.url
							}
						}]);
					} else {
						_addBtn([{
							id: '_detail',
							jmdata: {
								'data-icon': 's-edit',
								'href': that.ui.urlHref($sdata.editUrl(cd.$info.url), controller)
							}
						}, {
							id: '_cancel',
							jmdata: {
								'data-action': 'deleteDraft',
								'data-icon': 's-delete',
								'data-action-param': cd.$info.url
							}
						}]);
					}
					html.push(coptions.join(""));
					html.push('</li>');
				});
			});
		},
		_myGoBack: function(controller) {
			controller.removeCachePages();
			$helpers.pushInfoMessage($helpers.locale().ui.nodrafts);
			$helpers.historyBack(function(url) {
				return url && (url.indexOf("home") > 0 || url.indexOf("query") > 0);
			}, true, function(rks, deltaIdx) {
				// Avoid back to return to draft
				window.history.go(deltaIdx);
			});
			return;
		},
		events: function($c, c) {
			var controller = this;
			$c.click(function(e) {
				// find parent by tag 
				var target = $helpers.getTarget(e);
				if (target) {
					var p = $(target).attr("data-action");
					if (p === "deleteDraft") {
						e.preventDefault();
						var fafter = function() {
							$sdata.getSyncDataCount(function(count) {
								if (count == 0) {
									that.controls.SyncView._myGoBack(controller);
									return;
								}
								controller.doRefresh();
								$helpers.clearErrors();
							});
						};
						var app = $(target).attr("data-action-param");
						$sdata.undoUpdate(app, fafter);
					}
				}
			});
		},
		sync: false,
		asyncHandler: function() {
			var obj = this;
			var controller = obj.controller;
			var id = obj.id;
			$sdata.getSyncData(function(data, error) {
				var html = [];
				if (!error) {
					controller.setData("", data);
					if (data) that.controls.SyncView.create_items(controller, data, html, id);
				}
				var $c = $('#' + id + "_ul");
				$c.html(html.join(''));
				$c.listview("refresh");
				$c.find('a[data-role="button"]').button();
				that.controls.SyncView._createFootBtns(controller, id);
			});
		},
		handler: function(c, after) {
			var controller = this;
			var html = [];
			html.push('<form  id="' + c.id + '">');
			html.push('<ul class="s-m-list syncview" data-divider-theme="a" id="');
			html.push(c.id);
			html.push('_ul" data-role="listview" data-inset="true">');
			html.push('</ul>');
			html.push('<div class="' + ($helpers.online() ? 'ui-grid-a' : 'ui-grid-solo') + '">');
			html.push('<div class="ui-block-a" id ="' + c.id + '_b1"></div>');
			if ($helpers.online()) {
				html.push('<div class="ui-block-b" id ="' + c.id + '_b2"></div>');
			}
			html.push('</div>');
			html.push('</form>');
			var actions = {};
			actions[c.id + "_deleteAll"] = "deleteAll";
			actions[c.id + "_sendAll"] = "sendAll";
			after({
				html: html.join(''),
				bind: " ",
				options: {
					actions: actions
				},
				async: that.controls.SyncView.asyncHandler.bind({
					controller: controller,
					id: c.id
				})
			});
		},
		refresh: function(controller, options, $c, id) {
			var html = [];
			var $ul = $c.children("#" + id + "_ul");
			$sdata.getSyncData(function(data, error) {
				if (!error) {
					controller.setData("", data);
					if (data) that.controls.SyncView.create_items(controller, data, html, id);
				}
				$ul.html(html.join(''));
				$ul.listview("refresh");
				$ul.find('a[data-role="button"]').button();
			});
		},
		actiondelAllDrafts: function(options) {
			var controller = this;
			var errors = [];
			var dd = controller.getValue();
			$helpers.clearErrors();
			if (dd) {
				$helpers.each(Object.keys(dd), function(value, index, next) {
					var list = dd[value];
					if (list && list.length) {
						$helpers.each(list, function(value, index, next) {
							var url = value.$info.url;
							$sdata.undoUpdate(value.$info.url, next);
						}, next);
					} else
						next();
				}, function() {
					that.controls.SyncView._myGoBack(controller);
				});
			} else {
				that.controls.SyncView._myGoBack(controller);
			}
		},
		actionsendAllDrafts: function(options) {
			var controller = this;
			var errors = [];
			var reload = controller.resync;
			$helpers.clearErrors();
			var opts = {
				success: function() {
					if ($helpers.hasErrors()) {
						if (options.success)
							options.success(null, true, true);
						$.smobile.showErrors(controller);
						return;
					}
					if (reload) {
						if (options.success)
							options.success(null, false, true);
						that.controls.SyncView._myGoBack(controller);
					}
					if (options.success)
						options.success(null);
				}
			};
			var _resync = (controller.resync ? $.smobile.load : null);
			delete controller.resync;
			return $sdata.execBatch(controller.getValue(), opts, _resync);
		}
	};
})(jQuery);