"use strict";
(function($) {

	var that = $.smobile || {};
	var depth = 0;

	function metro_addMouseWheel() {
		var tileArea = $();
		$("body").mousewheel(function(event, delta) {
			var scroll_value = delta * 50;
			$(document).scrollLeft($(document).scrollLeft() - scroll_value);
			return false;
		});
	}

	function metro_setTilesAreaSize(groupClass, areaClass) {
		var groups = $(".tile-group");
		var tileAreaWidth = 160;
		$.each(groups, function(i, t) {
			tileAreaWidth += $(t).outerWidth() + 46;
		});

		$(".tile-area").css({
			width: tileAreaWidth
		});
	}

	function extended_setTilesAreaSize(groupClass, areaClass) {

		var groupClass = groupClass || "tile-group";
		var areaClass = areaClass || "tile-area";

		var groups = $("." + groupClass);
		var tileAreaWidth = 160;
		$.each(groups, function(i, t) {
			tileAreaWidth += $(t).outerWidth() + 10;
		});

		$("." + areaClass).css({
			width: tileAreaWidth
		});
	}

	function metro_init(options) {
		metro_addMouseWheel();
		if (options) {
			extended_setTilesAreaSize(options.groupClass, options.areaClass);
		} else {
			metro_setTilesAreaSize();
		}
		$(document.body).find('[data-click=transform]').tileTransform();
	}

	var emptyDom = function(domNode) {
		if (domNode) {
			while (domNode.firstChild) {
				domNode.removeChild(domNode.firstChild);
			}
		}
	};

	var buildCustomerView1 = function() {
		// build data
		var items = [];
		var groupItems = [];
		var customersNumber = 60;
		// var tilesRowNumber = Math.ceil(customersNumber / 3);
		var tilesRowNumber = "seven";
		var maxTilesPerGroup = 7 * 2;

		for (var ii = 0, jj = customersNumber; ii < jj; ii++) {
			items.push({
				firstname: "FirstName",
				lastname: "Lastname " + ii
			});
			if ((ii + 1) % maxTilesPerGroup == 0) {
				groupItems.push({
					items: items,
					tilesRowNumber: tilesRowNumber
				});
				items = [];
			}
		}

		$.when($.stemplates.exec("customerView1", {
			groupItems: groupItems
		})).done(function(html) {
			$(document.body).html(html);
			metro_init();
		});
	};

	var buildCustomerView2 = function() {
		// build data
		var items = [];
		var groupItems = [];
		var customersNumber = 60;

		for (var ii = 0, jj = customersNumber; ii < jj; ii++) {
			items.push({
				firstname: "FirstName",
				lastname: "Lastname " + ii
			});
		}

		$.when($.stemplates.exec("customerView2", {
			items: items
		})).done(function(html) {
			$(document.body).html(html);
			metro_init({
				groupClass: "tile",
				areaClass: "tile-area"
			});
		});
	};

	var buildListView1 = function() {
		// build data
		var items = [];
		var groupList = [];
		var customersNumber = 20;
		var maxItemsPerList = 5;

		for (var ii = 0, jj = customersNumber; ii < jj; ii++) {
			items.push({
				firstname: "FirstName",
				lastname: "Lastname " + ii
			});
			if ((ii + 1) % maxItemsPerList == 0) {
				groupList.push({
					items: items
				});
				items = [];
			}
		}

		$.when($.stemplates.exec("listView1", {
			groupList: groupList
		})).done(function(html) {
			$(document.body).html(html);
			metro_init({
				groupClass: "span5",
				areaClass: "grid"
			});
		});
	};

	var timer = null;

	function setTileSelectedState(tile) {
		tile.className += " selected";
	}

	that.loadListener = function() {
		var $$element = $(".metro");

		var hammerTime = new Hammer(document.body);
		hammerTime.on("touch drag", function(event) {

			var target = event.target;

			switch (event.type) {
				case "touch":
					var pickerAttribute = target.getAttribute("data-s-picker");
					switch (pickerAttribute) {
						case "sample1":
							buildCustomerView1();
							++depth;
							break;
						case "sample2":
							buildCustomerView2();
							++depth;
							break;
						case "sample3":
							buildListView1();
							++depth;
							break;
						case "back":
							if (--depth == 0) {
								location.reload();
							}
							break;
					}
					break;
				case "dragleft":
					console.log("deltaX:" + event.gesture.deltaX);
					if ($(".grid")[0]) {
						$(".grid")[0].scrollLeft += event.gesture.deltaX;
					}
					break;
				case "dragright":
					console.log("deltaX:" + event.gesture.deltaX);
					if ($(".grid")[0]) {
						$(".grid")[0].scrollLeft -= event.gesture.deltaX;
					}
					break;
				default:
					console.log("event.type:" + event.type);
			}

		});

		// var hammerButtonTouch = new Hammer($$element[0]);
		// hammerButtonTouch.on("touch", function(event) {
		// var attribute = event.target.getAttribute("data-s-picker");
		//
		// switch (attribute) {
		// case "sample1":
		// buildCustomerView1();
		// ++depth;
		// break;
		// case "sample2":
		// buildCustomerView2();
		// ++depth;
		// break;
		// case "sample3":
		// buildListView1();
		// ++depth;
		// break;
		// case "back":
		// if (--depth == 0) {
		// location.reload();
		// }
		// break;
		// }
		// });

		/*
		 * $(document.body).delegate("button", "click", function(event) { var
		 * attribute = this.getAttribute("data-s-picker");
		 *
		 * switch (attribute) { case "sample1": buildCustomerView1(); ++depth;
		 * break; case "sample2": buildCustomerView2(); ++depth; break; case
		 * "sample3": buildListView1(); ++depth; break; case "back": if (--depth ==
		 * 0) { location.reload(); } break; }});
		 */
		// }).delegate("div.tile", "click", function(event) {
		// // remove or add class "selected"
		// }).delegate(
		// "div.tile",
		// "mousedown touchstart",
		// function(event) {
		// timer = setTimeout(
		// setTileSelectedState(event.currentTarget), 10000);
		// }).delegate("div.tile", "mouseup touchend", function(event) {
		// clearTimeout(timer);
		// });
	};

})(jQuery);