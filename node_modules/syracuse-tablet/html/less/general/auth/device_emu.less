/*
 * Authoring device size simulation for BS grid model
 *
 * For every device size and column class create a selector for classes xs-lg and column 1-12 like:
 * .s-m-auth-col-simulate-xs .col-xs-12
 *
 * When we put the class s-m-auth-col-simulate-xs to a container, all child columns will use the xs column size since this
 * selector overrides the default one using the @media query
 *
 */

@media(max-width: @screen-xs-max){
	.s-m-auth-highlight-xs {
		font-style: italic;
	}
}
@media(min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
	.s-m-auth-highlight-sm {
		font-style: italic;
	}

}
@media(min-width: @screen-md-min) and (max-width: @screen-md-max) {
	.s-m-auth-highlight-md {
		font-style: italic;
	}
}

@media(min-width: @screen-lg-min) {
	.s-m-auth-highlight-lg {
		font-style: italic;
	}
}

.sm-auth-calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  .s-m-auth-col-simulate-@{class} .col-@{class}-@{index} {
    width: percentage((@index / @grid-columns));
  }
}

.sm-auth-loop-grid-columns(@index, @class, @type) when (@index >= 0) {
  .sm-auth-calc-grid-column(@index, @class, @type);
  // next iteration
  .sm-auth-loop-grid-columns((@index - 1), @class, @type);
}

.sm-auth-make-grid(@class) {
	.sm-auth-loop-grid-columns(@grid-columns, @class, width);
}

.sm-auth-make-grid(xs);
.sm-auth-make-grid(sm);
.sm-auth-make-grid(md);
.sm-auth-make-grid(lg);
