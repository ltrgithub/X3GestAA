"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var sdataHttp = require('syracuse-tablet/html/js/sdata/sdataHttp');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("sdataDispatcher");

exports.Dispatcher = utils.defineClass(function() {}, null, {
	"accept": function() {
		var deferred = $.Deferred();
		deferred.resolve(true);
		return deferred.promise();
	},

	/**
	 *  Called for every request handled by the dispatcher
	 *  Can be used to disable caching in general or for specific representations
	 */
	_useCache: function(op, data) {
		return false;
	},

	// GET: {$baseUrl}/SUPERV//$prototypes('AQTCRUD.$query')
	"prototype": function(op, data) {
		var deferred = $.Deferred();
		deferred.reject("Dispatcher should never request for prototypes since they are cached in the application model on client side");
		return deferred.promise();
	},

	//GET: {$baseUrl}/SUPERV/AQTCRUD/$template?representation=AQTCRUD.$create
	"new": function(op, data) {
		var self = this;
		var deferred = $.Deferred();
		try {
			self._newGetCache(op, data)
				.then(function(result) {
					// got new template from cache
					if (result) {
						log && log("Read template from cache: " + op.$representation);
						// Change UUID since we create a new record!
						result.$uuid = utils.UUID();
						return result;
					} else {
						return self._newDoHttp(op, data)
							.then(function(result) {
								if (result.isSuccess) {
									var data = result.responseJSON;
									return self._newPutCache(op, data)
										.then(function() {
											return data;
										});
								}
								return $.smReject(new Error("Error reading $template: " + JSON.stringify(result)));
							});
					}
				})
				.then(function(result) {
					deferred.resolve(result);
				}, function(e) {
					deferred.reject(e);
				});
		} catch (e) {
			deferred.reject(e);
		}
		return deferred.promise();
	},

	_newGetCache: function(op) {
		var self = this;
		if (self._useCache(op, null, "read")) {
			var cache = globals.getCache();
			log && log("Reading template from cache: " + op.$representation);
			return cache.read({
				$representation: "$templates",
				$endpoint: op.$endpoint,
				$key: op.$representation
			});
		}
		log && log("Disabled reading template from cache : " + op.$representation);
		return $.smResolve();
	},
	_newDoHttp: function(op, data) {
		var send = {
			method: "GET",
			url: op.$link.$url
		};
		return sdataHttp.send(send);
	},
	_newPutCache: function(op, data) {
		var self = this;
		if (self._useCache(op, data, "write")) {
			log && log("Writing template to cache: " + op.$representation);
			var cache = globals.getCache();
			return cache.put({
				$representation: "$templates",
				$key: op.$representation,
				$endpoint: op.$endpoint,
				$data: data
			});
		}
		log && log("Disabled writing template to cache : " + op.$representation);
		return $.smResolve();
	},

	//GET: {$baseUrl}/SUPERV/AQTCRUD('10')?representation=AQTCRUD.$create
	"read": function(op, data) {
		var self = this;
		var deferred = $.Deferred();
		try {
			self._readGetCache(op, data)
				.then(function(result) {
					if (result) {
						log && log("Read data from cache: " + op.$representation);
						return result;
					} else {
						return self._readDoHttp(op, data)
							.then(function(result) {
								if (result.isSuccess) {
									var data = result.responseJSON;
									return self._readPutCache(op, data)
										.then(function() {
											return data;
										});
								}
								return $.smReject(new Error("Error reading data: " + JSON.stringify(result)));
							});
					}
				})
				.then(function(result) {
					deferred.resolve(result);
				}, function(e) {
					deferred.reject(e);
				});
		} catch (e) {
			deferred.reject(e);
		}
		return deferred.promise();
	},

	_readGetCache: function(op) {
		var self = this;
		if (self._useCache(op, null, "read")) {
			var cache = globals.getCache();
			log && log("Reading data from cache: " + op.$representation);
			return cache.read({
				$representation: op.$representation,
				$endpoint: op.$endpoint,
				$key: op.$key
			});
		}
		log && log("Disabled reading data from cache : " + op.$representation);
		return $.smResolve();
	},
	_readDoHttp: function(op, data) {
		var send = {
			method: "GET",
			url: op.$link.$url
		};
		return sdataHttp.send(send);
	},
	_readPutCache: function(op, data) {
		var self = this;
		if (self._useCache(op, data, "write")) {
			log && log("Writing data to cache: " + op.$representation);
			var cache = globals.getCache();
			return cache.put({
				$representation: op.$representation,
				$key: op.$key,
				$endpoint: op.$endpoint,
				$data: data
			});
		}
		log && log("Disabled writing data to cache : " + op.$representation);
		return $.smResolve();
	},

	// GET: {$baseUrl}/SUPERV/AQTCRUD?representation=AQTCRUD.$create?where=xxx
	"query": function(op, data) {
		var self = this;
		var deferred = $.Deferred();
		try {
			self._queryGetCache(op, data)
				.then(function(result) {
					if (result && result.length > 0) {
						log && log("Queried data from cache: " + op.$representation);
						var response = {
							$resources: []
						};
						result.forEach(function(item) {
							response.$resources.push(item);
						});
						return response;
					} else {
						return self._queryDoHttp(op, data)
							.then(function(result) {
								if (result.isSuccess) {
									var data = result.responseJSON;
									return self._queryPutCache(op, data)
										.then(function() {
											return data;
										});
								}
								return $.smReject(new Error("Error querying data: " + JSON.stringify(result)));
							});
					}
				})
				.then(function(result) {
					deferred.resolve(result);
				}, function(e) {
					deferred.reject(e);
				});
		} catch (e) {
			deferred.reject(e);
		}
		return deferred.promise();
	},

	_queryGetCache: function(op) {
		var self = this;
		if (self._useCache(op, null, "read")) {
			var cache = globals.getCache();
			log && log("Querying data from cache: " + op.$representation);
			return cache.query({
				$representation: op.$representation,
				$endpoint: op.$endpoint,
				$where: op.$where
			});
		}
		log && log("Disabled querying data from cache : " + op.$representation);
		return $.smResolve();
	},
	_queryDoHttp: function(op, data) {
		var send = {
			method: "GET",
			url: op.$link.$url
		};
		return sdataHttp.send(send);
	},
	_queryPutCache: function(op, data) {
		var self = this;
		try {
			if (self._useCache(op, data, "write")) {
				log && log("Writing data to cache: " + op.$representation);
				var cache = globals.getCache();

				var pageName = op.$endpoint + "." + op.$representation;
				var proto = globals.getApplication().getPrototype(pageName);
				proto = (proto.$properties && proto.$properties.$resources && proto.$properties.$resources.$item) || proto;

				return data.$resources.forEachPromise(function(item) {
					var key = self._calculateKey(proto, item);
					return cache.put({
						$representation: op.$representation,
						$key: key,
						$endpoint: op.$endpoint,
						$data: item
					});
				});
			}
			log && log("Disabled writing data to cache : " + op.$representation);
			return $.smResolve();
		} catch (e) {
			return $.smReject(e);
		}
	},


	// PUT: {$baseUrl}/SUPERV/AQTCRUD('10')?representation=AQTCRUD.$edit
	// POST: {$baseUrl}/SUPERV/AQTCRUD?representation=AQTCRUD.$create
	"save": function(op, data) {
		var self = this;
		var deferred = $.Deferred();
		try {
			self._saveDoHttp(op, data)
				.then(function(result) {
					if (result.isSuccess) {
						var data = result.responseJSON;
						return self._savePutCache(op, data)
							.then(function() {
								return data;
							});
					}
					return $.smReject(new Error("Error saving object: " + JSON.stringify(result)));
				})
				.then(function(result) {
					deferred.resolve(result);
				}, function(e) {
					deferred.reject(e);
				});
		} catch (e) {
			deferred.reject(e);
		}
		return deferred.promise();
	},

	_saveDoHttp: function(op, data) {
		var send = {
			method: op.$link.$method,
			url: op.$link.$url,
			send: data
		};
		return sdataHttp.send(send);
	},

	_savePutCache: function(op, data) {
		var self = this;
		try {
			if (self._useCache(op, data, "write")) {
				log && log("Writing data to cache: " + op.$representation);
				var cache = globals.getCache();
				var key = op.$key;
				if (!key) {
					var pageName = op.$endpoint + "." + op.$representation;
					var proto = globals.getApplication().getPrototype(pageName);
					proto = (proto.$properties && proto.$properties.$resources && proto.$properties.$resources.$item) || proto;
					key = self._calculateKey(proto, data);
				}
				return cache.put({
					$representation: op.$representation,
					$key: key,
					$endpoint: op.$endpoint,
					$data: data
				});
			}
			log && log("Disabled writing data to cache : " + op.$representation);
			return $.smResolve();
		} catch (e) {
			return $.smReject(e);
		}
	},

	// DELETE: {$baseUrl}/SUPERV/AQTCRUD('10')?representation=AQTCRUD.$query
	"delete": function(op, data) {
		var self = this;
		var deferred = $.Deferred();
		try {
			self._deleteDoHttp(op, data)
				.then(function(result) {
					if (result.isSuccess) {
						var data = result.responseJSON;
						return self._deleteRemoveCache(op, data)
							.then(function() {
								return data;
							});
					}
					return $.smReject(new Error("Error saving object: " + JSON.stringify(result)));
				})
				.then(function(result) {
					deferred.resolve(result);
				}, function(e) {
					deferred.reject(e);
				});
		} catch (e) {
			deferred.reject(e);
		}
		return deferred.promise();
	},
	_deleteDoHttp: function(op, data) {
		var send = {
			method: op.$link.$method,
			url: op.$link.$url
		};
		return sdataHttp.send(send);
	},
	_deleteRemoveCache: function(op, data) {
		var self = this;
		if (self._useCache(op, data, "write")) {
			log && log("Deleting data from cache: " + op.$representation);
			var cache = globals.getCache();
			return cache.remove({
				$representation: op.$representation,
				$key: op.$key,
				$endpoint: op.$endpoint
			});
		}
		log && log("Disabled deleting data from cache : " + op.$representation);
		return $.smResolve();
	},

	"service": function() {

	},
	_calculateKey: function(proto, item) {
		var key = proto.$key.replace(/\{(.*?)\}/g, function(match, prop) {
			return item[prop];
		});
		return key;
	}
});