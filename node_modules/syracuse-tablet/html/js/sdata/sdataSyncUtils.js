"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var prototypeModule = require('syracuse-tablet/html/js/helpers/prototype');

var _syncMaxLevels = 6;

exports.getSyncStructure = function(prototype) {
	var node = {
		$title: prototype.data("$title")
	};
	var urlList = [];
	return _resolvePrototype({
		prototype: prototype,
		level: 1,
		maxLevels: _syncMaxLevels
	}, node, urlList);
};

function _resolvePrototype(opts, node, urlList) {
	node.uuid = utils.UUID();
	if (opts.level >= opts.maxLevels) {
		return $.smResolve(node);
	}

	var $links;

	// For query facet, only take $details link into account
	if (opts.prototype.getFacet() === "query") {
		var $resources = opts.prototype.property("$resources");
		if ($resources && $resources.$item && $resources.$item.$links && $resources.$item.$links.$details) {
			$links = {
				$details: $resources.$item.$links.$details
			};
		}
	} else if (opts.prototype.getFacet() === "details") {
		$links = opts.prototype.data("$links");
	} else {
		// Only $details and $query facets allowed, we should never end up here, just for safety
		return $.smResolve(node);
	}

	node.$children = [];
	$.smForEachPromise(Object.keys($links), function(name) {
		var link = $links[name];
		if (_isCacheableLink(link, name, urlList)) {
			//var url = sdataUtils.parseSDataURL(link.$url);
			var repr = _getRepresentation(link);
			if (repr) {
				urlList.push(link.$url);

				var child = {
					$name: name,
					$title: utils.parseExpression(link.$title, null, opts.prototype, true),
					$link: link,
					$representation: repr
				};
				node.$children.push(child);
				return _processNode(child, opts, urlList);
			}
		}
		return $.smResolve();
	});
	return $.smResolve(node);
}

function _isCacheableLink(link, name, urlList) {
	if (urlList.indexOf(link.$url) > -1) {
		return false;
	}
	if (name.indexOf("$") === 0 && name !== "$details") {
		return false;
	}
	if (link.$method !== "GET") {
		return false;
	}
	if (link.$url.indexOf("/$services/") > -1) {
		return false;
	}
	if (link.$url.indexOf("representation=") < 0) {
		return false;
	}
	var repr = _getRepresentation(link);
	if (!repr || repr.indexOf(".$details") < 0 && repr.indexOf(".$query") < 0) {
		return false;
	}
	return true;
}

function _getRepresentation(link) {
	var repr = /[\?\&]representation=(\S+?)(&|$)/.exec(link.$url);
	return repr && repr[1];
}

function _processNode(node, opts, urlList) {
	var meta = globals.getMetaData();
	var protoName = _getProtoName(node, opts);
	return meta.getPrototype(protoName)
		.then(function(proto) {
			if (proto) {
				proto = prototypeModule.create(proto);
				node.$prototype = proto;
				if (node.$name === "$details") {
					node.$title = proto.data("$title");
					node.$isDetails = true;
				}

				return _resolvePrototype({
					prototype: proto,
					level: opts.level + 1,
					maxLevels: opts.maxLevels
				}, node, urlList);
			}
		});
}

function _getProtoName(node, opts) {
	var endpoint = opts.prototype.data("$baseUrl");
	endpoint = endpoint.split("/");
	endpoint = endpoint.slice(endpoint.length - 3, endpoint.length).join(".");
	return endpoint + "." + node.$representation;
}