"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("sdataDispatcher");
var globals = require('syracuse-tablet/html/js/helpers/globals');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');

var dispLocal = require('syracuse-tablet/html/js/sdata/sdataDispatcherLocal').Dispatcher;
var dispHttp = require('syracuse-tablet/html/js/sdata/sdataDispatcherHttp').Dispatcher;

var nativeDispatcherListener = require('syracuse-tablet/html/js/helpers/native/native').getModule("dispatcherListener");

var _dispatchers = [
	new dispLocal(),
	new dispHttp()
];

/**
 * link
 * {
 * 	 $url: ...,
 * 	 $method: "GET", ...
 * }
 * data
 * {
 *   ...
 * }
 */
exports.dispatch = function(link, data, options) {
	var deferred = $.Deferred();
	var notifyNativeAfter;
	// notifiy native shell that a request has been executed to allow triggereing of related native actions 
	if (nativeDispatcherListener) {
		notifyNativeAfter = function() {
			nativeDispatcherListener.dispatcherNotifyAfter({
				Method: link.$method,
				Url: link.$url
			});
		};
	}

	try {
		log && log("Dispatch: " + link.$method + ": " + link.$url);

		options = options || {};
		var op = exports.parseLink(link);
		var dispatcher;
		var cacheStatus;
		$.smForEachPromise(_dispatchers, function(disp) {
				return disp.accept(op, data);
			}, function(disp, result) {
				if (result === true) {
					dispatcher = disp;
					return true;
				}
				return false;
			})
			.then(function() {
				if (options.forceUseCache) {
					cacheStatus = globals.getCache().isDisabled();
					globals.getCache().disableCache(false);
				}

				return dispatcher[op.$operation](op, data, options);
			})
			.then(function(result) {
				if (options.forceUseCache) {
					globals.getCache().disableCache(cacheStatus);
				}
				notifyNativeAfter && notifyNativeAfter();
				deferred.resolve(result);
			}).fail(function(e) {
				if (options.forceUseCache) {
					globals.getCache().disableCache(cacheStatus);
				}
				notifyNativeAfter && notifyNativeAfter();
				deferred.reject(e);
			});
	} catch (e) {
		deferred.reject(e);
	}
	return deferred.promise();
};

/**
 * Parse link to identify which kind of operation it's intended to start
 *
 * link:
 * {
 * 	 $url: ...,
 * 	 $method: "GET", ...
 * }
 *
 * Return:
 * {
 *    "$link":{
 *       "$method":"DELETE",
 *       "$url":"http://localhost:8124/sdata/x3/erp/SUPERV/AQTCRUD('10')?representation=AQTCRUD.$query"
 *    },
 *    "$parsedUrl":{
 * ...
 *       "directory":"/sdata/x3/erp/SUPERV/AQTCRUD('10')",
 *       "path":"/sdata/x3/erp/SUPERV/AQTCRUD('10')",
 *       "relative":"/sdata/x3/erp/SUPERV/AQTCRUD('10')?representation=AQTCRUD.$query",
 * ...
 *       "query":{
 *          "representation":"AQTCRUD.$query"
 *       },
 * ...
 *       "representation":"AQTCRUD",
 *    },
 *    "$operation":"delete",
 *    "$key":"10",
 *    "$representation":"AQTCRUD.$query"
 * }
 *
 */
var _repExp = /\$prototypes\('(.*?)'\)/;
var _keyExp = /\('(.*?)'\)/;

exports.parseLink = function(link) {
	var url = link.$url;
	var result = {
		$link: link,
		$parsedUrl: sdataUtils.parseSDataURL(link.$url)
	};
	result.$endpoint = result.$parsedUrl.application + "." + result.$parsedUrl.contract + "." + result.$parsedUrl.dataset;
	var dir = result.$parsedUrl.directory; // All except query parameters
	var idx;
	if (link.$method === "GET") {
		if (url.indexOf("$prototypes") > -1) {
			result.$operation = "prototype";
			result.$representation = _repExp.exec(url)[1];
		} else if (dir.indexOf("$template") > -1) {
			result.$operation = "new";
			result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
		} else if (result.$parsedUrl.$services) {
			result.$operation = "service";
			result.$service = result.$parsedUrl.$services;
			result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
		} else {
			var key = _keyExp.exec(dir);
			result.$isStats = dir.indexOf("/STATS(") > -1;
			result.$isRequest = dir.indexOf("/QUERY(") > -1;
			result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
			if (key && !(result.$isStats || result.$isRequest)) {
				result.$operation = "read";
				result.$key = key[1];
			} else {
				result.$operation = "query";
			}
		}
		if (result.$parsedUrl.query && result.$parsedUrl.query.where) {
			result.$where = result.$parsedUrl.query.where;
		}
		if (result.$parsedUrl.query && result.$parsedUrl.query.orderBy) {
			result.$orderBy = result.$parsedUrl.query.orderBy;
		}
	} else if (result.$parsedUrl.$services) {
		result.$operation = "service";
		result.$service = result.$parsedUrl.$services;
		result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
	} else if (link.$method === "DELETE") {
		var key = _keyExp.exec(dir);
		result.$operation = "delete";
		result.$key = key[1];
		result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
	} else {
		// PUT/POST and no service
		var key = _keyExp.exec(dir);
		if (key) {
			result.$operation = "save";
			result.$key = key[1];
			result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
		} else {
			result.$operation = "save";
			result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
		}
	}

	return result;
};