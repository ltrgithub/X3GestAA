"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("sdataDispatcher");
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');

var dispLocal = require('syracuse-tablet/html/js/sdata/sdataDispatcherLocal').Dispatcher;
var dispHttp = require('syracuse-tablet/html/js/sdata/sdataDispatcherHttp').Dispatcher;

var _dispatchers = [
	new dispLocal(),
	new dispHttp()
];

/**
 * link
 * {
 * 	 $url: ...,
 * 	 $method: "GET", ...
 * }
 * data
 * {
 *   ...
 * }
 */
exports.dispatch = function(link, data, options) {
	var deferred = $.Deferred();
	try {
		log && log("Dispatch: " + link.$method + ": " + link.$url);

		var op = exports.parseLink(link);

		var dispatcher;
		_dispatchers.forEachPromise(function(disp) {
			return disp.accept(op, data);
		}, function(disp, result) {
			if (result === true) {
				dispatcher = disp;
				return true;
			}
			return false;
		});

		var prom = dispatcher[op.$operation](op, data);
		if (!prom) {
			throw new Error("Could not dispatch: " + link.$method + ": " + link.$url + " (" + op.$operation + ")");
		}
		prom.then(function(result) {
			deferred.resolve(result);
		}, function(e) {
			deferred.reject(e);
		});
	} catch (e) {
		deferred.reject(e);
	}
	return deferred.promise();
};

/**
 * Parse link to identify which kind of operation it's intended to start
 *
 * link:
 * {
 * 	 $url: ...,
 * 	 $method: "GET", ...
 * }
 *
 * Return:
 * {
 *    "$link":{
 *       "$method":"DELETE",
 *       "$url":"http://localhost:8124/sdata/x3/erp/SUPERV/AQTCRUD('10')?representation=AQTCRUD.$query"
 *    },
 *    "$parsedUrl":{
 * ...
 *       "directory":"/sdata/x3/erp/SUPERV/AQTCRUD('10')",
 *       "path":"/sdata/x3/erp/SUPERV/AQTCRUD('10')",
 *       "relative":"/sdata/x3/erp/SUPERV/AQTCRUD('10')?representation=AQTCRUD.$query",
 * ...
 *       "query":{
 *          "representation":"AQTCRUD.$query"
 *       },
 * ...
 *       "representation":"AQTCRUD",
 *    },
 *    "$operation":"delete",
 *    "$key":"10",
 *    "$representation":"AQTCRUD.$query"
 * }
 *
 */
exports.parseLink = function(link) {
	var url = link.$url;
	var result = {
		$link: link,
		$parsedUrl: sdataUtils.parseSDataURL(link.$url)
	};
	var keyExp = /\('(.*?)'\)/;

	result.$endpoint = result.$parsedUrl.application + "." + result.$parsedUrl.contract + "." + result.$parsedUrl.dataset;
	var dir = result.$parsedUrl.directory; // All except query parameters
	var idx;
	if (link.$method === "GET") {
		if (url.indexOf("$prototypes") > -1) {
			result.$operation = "prototype";
			result.$representation = /\$prototypes\('(.*?)'\)/.exec(url)[1];
		} else if (dir.indexOf("$template") > -1) {
			result.$operation = "new";
			result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
		} else if ((idx = dir.indexOf("/$services/")) > -1) {
			var service = dir.substring(idx + 11);
			result.$operation = "service";
			result.$service = service;
			result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
		} else {
			var key = keyExp.exec(dir);
			var isQuery = dir.indexOf("/QUERY(") > -1;
			if (key && !isQuery) {
				result.$operation = "read";
				result.$key = key[1];
				result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
			} else {
				result.$operation = "query";
				result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
			}
		}
	} else if ((idx = dir.indexOf("/$services/")) > -1) {
		var service = dir.substring(idx + 11);
		result.$operation = "service";
		result.$service = service;
		result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
	} else if (link.$method === "DELETE") {
		var key = keyExp.exec(dir);
		result.$operation = "delete";
		result.$key = key[1];
		result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
	} else {
		// PUT/POST and no service
		var key = keyExp.exec(dir);
		if (key) {
			result.$operation = "save";
			result.$key = key[1];
			result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
		} else {
			result.$operation = "save";
			result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
		}
	}

	return result;
};