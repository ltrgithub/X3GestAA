"use strict";
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("sdata");
var globals = require('syracuse-tablet/html/js/helpers/globals');
var sdataHttp = require('syracuse-tablet/html/js/sdata/sdataHttp');
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _consts = {
	localePreferencesUrl: "/requireJS/tabletLocalePreferences",
	userProfileUrl: "/sdata/syracuse/collaboration/syracuse/userProfiles/$service/current"
};

var _storage = {};
var _cache = {};

var _resetCache = function() {
	_cache = {};
	_storage = {};
};

var _notified = function(event) {
	if (event === "sm.logout") {
		log && log("logout - reset cache");
		_resetCache();
	}
};

/**
 *  Return user profile
 * */
var _getUserProfile = function() {
	var deferred = $.Deferred();
	try {
		if (_cache.userProfile) {
			deferred.resolve(_cache.userProfile);
		}
		_get(_consts.userProfileUrl).then(function(result) {
			if (result.isSuccess && result.responseJSON) {
				deferred.resolve(result.responseJSON);
			} else {
				throw new Error("_getUserProfile loading error\n" + JSON.stringify(result, null, 2));
			}
		}, function(e) {
			log && log("_getUserProfile rejected", e);
			deferred.reject(e);
		});
	} catch (e) {
		log && log("_getUserProfile Exception", e);
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
};

/**
 *  List of available languages for login (Works with an unauthenticated user)
 *  */
var _queryLocalePreferences = function() {
	var deferred = $.Deferred();
	try {
		if (_cache.localePreferences) {
			deferred.resolve(_cache.localePreferences);
		} else {
			var url = globals.baseLocation().host + _consts.localePreferencesUrl;
			// Temporarily - It's not a sdata url - We use requireJS
			ajax("GET", url).then(function(result) {
				if (result.isSuccess) {
					var locales = [];
					(result.responseJSON.$resources || []).forEach(function(locale) {
						locales.push({
							"$uuid": locale.$uuid,
							"code": locale.code,
							"description": locale.description
						});
					});
					deferred.resolve(locales);
				} else {
					deferred.resolve([]);
				}
			}, function(e) {
				log && log("_queryLocalePreferences rejected", e);
				return deferred.reject(e);
			});
		}
	} catch (e) {
		log && log("_queryLocalePreferences Exception", e);
		return deferred.reject(e);
	} finally {
		return deferred.promise();
	}
};

/*
 * options {facet:{$prototype, $article, $handlers:{$save, $delete}}
 * */
var _register = function(klass, methods, model) {
	_storage[entity + ".$" + facet] = $.extend(true, {}, options);
};


var _dispatch = function(params, dispatchOptions) {
	try {
		dispatchOptions = dispatchOptions || {};
		if (!params.parsedUrl) {
			params.parsedUrl = sdataUtils.parseSDataURL(params.url);
		}
		if (params.parsedUrl.dispatch === "sdata") {
			return sdataHttp.send(params);
		} else {
			throw new Error("Local dispatcher Not implmented");
		}
	} catch (e) {
		log && log("sdata dispatcher error", e);
		throw (e);
	}
};

var _post = function(url, params) {
	return _dispatch({
		method: "POST",
		url: url,
		send: params
	});
};

var _put = function(url, params) {
	return _dispatch({
		method: "PUT",
		url: url,
		send: params
	});
};

var _get = function(url, params) {
	return _dispatch({
		method: "GET",
		url: url,
		send: params
	});
};

var _del = function(url) {
	return _dispatch({
		method: "DELETE",
		url: url
	});
};

exports.post = _post;
exports.put = _put;
exports.get = _get;
exports.del = _del;
exports.resetCache = _resetCache;
exports.queryLocalePreferences = _queryLocalePreferences;
exports.getUserProfile = _getUserProfile;

/* Module initialization */
(function() {
	notifications.subscribe(_notified, ["sm.logout"]);
})();