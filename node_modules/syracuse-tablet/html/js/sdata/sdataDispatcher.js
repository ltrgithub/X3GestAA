"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("sdataDispatcher");
var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var storageModule = require('syracuse-tablet/html/js/storage/storage');
var sdataHttp = require('syracuse-tablet/html/js/sdata/sdataHttp');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');

var _operations = {
	"prototype": {
		"handler": _operationPrototype
	},
	"new": {
		"handler": _operationNew
	},
	"read": {
		"handler": _operationRead
	},
	"query": {
		"handler": _operationQuery
	},
	"save": {
		"handler": _operationSave
	},
	"delete": {
		"handler": _operationDelete
	},
	"service": {
		"handler": _operationService
	}
};

/**
 * link
 * {
 * 	 $url: ...,
 * 	 $method: "GET", ...
 * }
 * data
 * {
 *   ...
 * }
 */
exports.dispatch = function(link, data) {
	var deferred = $.Deferred();
	try {
		// to activate server side support of stateless mode
		if (link.$url.indexOf("$stateless") < 0) {
			link.$url = link.$url + "&$stateless";
		}
		log && log("Dispatch: " + link.$method + ": " + link.$url);

		var op = exports.parseLink(link);
		var operation = _operations[op.$operation];

		if (!operation) {
			throw new Error("Operation not implemented: " + op.$operation + " url: " + link.$url);
		}

		var prom = operation.handler(op, data);
		prom.then(function(result) {
			deferred.resolve(result);
		}, function(e) {
			deferred.reject(e);
		});
	} catch (e) {
		deferred.reject(e);
	}
	return deferred.promise();
};

/**
 * Parse link to identify which kind of operation it's intended to start
 *
 * link:
 * {
 * 	 $url: ...,
 * 	 $method: "GET", ...
 * }
 *
 * Return:
 * {
 *    "$link":{
 *       "$method":"DELETE",
 *       "$url":"http://localhost:8124/sdata/x3/erp/SUPERV/AQTCRUD('10')?representation=AQTCRUD.$query"
 *    },
 *    "$parsedUrl":{
 * ...
 *       "directory":"/sdata/x3/erp/SUPERV/AQTCRUD('10')",
 *       "path":"/sdata/x3/erp/SUPERV/AQTCRUD('10')",
 *       "relative":"/sdata/x3/erp/SUPERV/AQTCRUD('10')?representation=AQTCRUD.$query",
 * ...
 *       "query":{
 *          "representation":"AQTCRUD.$query"
 *       },
 * ...
 *       "representation":"AQTCRUD",
 *    },
 *    "$operation":"delete",
 *    "$key":"10",
 *    "$representation":"AQTCRUD.$query"
 * }
 *
 */
exports.parseLink = function(link) {
	var url = link.$url;
	var result = {
		$link: link,
		$parsedUrl: sdataUtils.parseSDataURL(link.$url)
	};
	var keyExp = /\('(.*?)'\)/;

	var dir = result.$parsedUrl.directory; // All except query parameters
	var idx;
	if (link.$method === "GET") {
		if (url.indexOf("$prototypes") > -1) {
			result.$operation = "prototype";
			result.$representation = /\$prototypes\('(.*?)'\)/.exec(url)[1];
		} else if (dir.indexOf("$template") > -1) {
			result.$operation = "new";
			result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
		} else if ((idx = dir.indexOf("/$services/")) > -1) {
			/*
			var service = dir.substring(idx + 11);
			result.$operation = "service";
			result.$service = service;
			result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
			*/
		} else {
			var key = keyExp.exec(dir);
			if (key) {
				result.$operation = "read";
				result.$key = key[1];
				result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
			} else {
				result.$operation = "query";
				result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
			}
		}
	} else if ((idx = dir.indexOf("/$services/")) > -1) {
		var service = dir.substring(idx + 11);
		result.$operation = "service";
		result.$service = service;
		result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
	} else if (link.$method === "DELETE") {
		var key = keyExp.exec(dir);
		result.$operation = "delete";
		result.$key = key[1];
		result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
	} else {
		// PUT/POST and no service
		var key = keyExp.exec(dir);
		if (key) {
			result.$operation = "save";
			result.$key = key[1];
			result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
		} else {
			result.$operation = "save";
			result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
		}
	}

	return result;
};

/*
 * Handle
 * GET: {$baseUrl}/SUPERV//$prototypes('AQTCRUD.$query')
 *
 * maybe supported in the future to allow client side prototype definition
 */
function _operationPrototype(link, data) {
	throw new Error("_operationPrototype not implemented since prototypes should be available in application metadata");
}

/*
 * Handle
 * GET: {$baseUrl}/SUPERV/AQTCRUD/$template?representation=AQTCRUD.$create
 */
function _operationNew(op, data) {
	var link = op.$link;
	var deferred = $.Deferred();
	try {
		var ctx = globals.getCacheCtx();
		var storage = globals.getStorage();

		log && log("Check template: " + op.$representation);
		storage.read({
			$context: ctx,
			$collection: "$templates",
			$key: op.$representation
		})
			.then(function(result) {
				// got new template from cache
				if (result.$status === storageModule.StatusCodes.OK) {
					log && log("Template from cache: " + op.$representation);

					// Change UUID since we create a new record!
					result.$data.$uuid = utils.UUID();
					deferred.resolve(result.$data);
				} else {
					// read template from server
					var send = {
						method: "GET",
						url: link.$url
					};
					sdataHttp.send(send)
						.then(function(result) {
							if (result.isSuccess) {
								var data = result.responseJSON;
								storage.put({
									$context: ctx,
									$collection: "$templates",
									$key: op.$representation,
									$data: data
								})
									.then(function() {
										deferred.resolve(data);
									}, function(e) {
										deferred.reject(e);
									});
							} else {
								deferred.reject(e);
							}
						}, function(e) {
							deferred.reject(e);
						});
				}
			}, function(e) {
				deferred.reject(e);
			});

	} catch (e) {
		deferred.reject(e);
	}
	return deferred.promise();
}

/*
 * Handle
 * GET: {$baseUrl}/SUPERV/AQTCRUD('10')?representation=AQTCRUD.$details
 */
function _operationRead(op, data) {
	var link = op.$link;
	var deferred = $.Deferred();
	try {
		var ctx = globals.getCacheCtx();
		var storage = globals.getStorage();
		var collection = op.$representation;

		log && log("Read record: " + op.$representation + "(" + op.$key + ")");
		storage.read({
			$context: ctx,
			$collection: collection,
			$key: op.$key
		})
			.then(function(result) {
				// got new template from cache
				if (result.$status === storageModule.StatusCodes.OK) {
					log && log("Got from cache: " + op.$representation);

					// Change UUID since we create a new record!
					deferred.resolve(result.$data);
				} else {
					// read template from server
					var send = {
						method: "GET",
						url: link.$url
					};
					sdataHttp.send(send)
						.then(function(result) {
							if (result.isSuccess) {
								var data = result.responseJSON;
								storage.put({
									$context: ctx,
									$collection: collection,
									$key: op.$key,
									$data: data
								})
									.then(function() {
										deferred.resolve(data);
									}, function(e) {
										deferred.reject(e);
									});
							} else {
								deferred.reject();
							}
						}, function(e) {
							deferred.reject(e);
						});
				}
			}, function(e) {
				deferred.reject(e);
			});

	} catch (e) {
		deferred.reject(e);
	}
	return deferred.promise();
}

/*
 * Handle
 * PUT: {$baseUrl}/SUPERV/AQTCRUD('10')?representation=AQTCRUD.$edit
 * POST: {$baseUrl}/SUPERV/AQTCRUD?representation=AQTCRUD.$create
 */
function _operationSave(op, data) {
	var link = op.$link;
	var deferred = $.Deferred();
	try {
		var ctx = globals.getCacheCtx();
		var storage = globals.getStorage();
		var collection = op.$representation;

		log && log("Save record: " + op.$representation + "(" + op.$key + ")");
		var send = {
			method: link.$method,
			url: link.$url,
			send: data
		};
		sdataHttp.send(send)
			.then(function(result) {
				if (result.isSuccess) {
					var data = result.responseJSON;
					log && log("Add to cache: " + op.$representation + "(" + op.$key + ")");
					storage.put({
						$context: ctx,
						$collection: collection,
						$key: op.$key,
						$data: data
					})
						.then(function() {
							deferred.resolve(data);
						}, function(e) {
							deferred.reject();
						});
				} else {
					deferred.reject();
				}
			}, function(e) {
				deferred.reject(e);
			});
	} catch (e) {
		deferred.reject(e);
	}
	return deferred.promise();
}

/*
 * Handle
 * DELETE: {$baseUrl}/SUPERV/AQTCRUD('10')?representation=AQTCRUD.$query
 */
function _operationDelete(op, data) {
	var link = op.$link;
	var deferred = $.Deferred();
	try {
		var ctx = globals.getCacheCtx();
		var storage = globals.getStorage();
		var collection = op.$representation;

		log && log("Delete record: " + op.$representation + "(" + op.$key + ")");
		var send = {
			method: link.$method,
			url: link.$url
		};
		sdataHttp.send(send)
			.then(function(result) {
				if (result.isSuccess) {
					var data = result.responseJSON;
					log && log("Remove from cache: " + op.$representation + "(" + op.$key + ")");
					storage.remove({
						$context: ctx,
						$collection: collection,
						$key: op.$key
					})
						.then(function() {
							deferred.resolve(data);
						}, function(e) {
							deferred.reject();
						});
				} else {
					deferred.reject();
				}
			}, function(e) {
				deferred.reject(e);
			});
	} catch (e) {
		deferred.reject(e);
	}
	return deferred.promise();
}

function _operationQuery(op, data) {
	return _operationRead(op, data);
}

function _operationService(op, data) {

}