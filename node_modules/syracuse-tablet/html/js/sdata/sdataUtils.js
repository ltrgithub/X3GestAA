"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var _rID = /^(.*)\(\'(.*)\'\)$/i;
/**
 * nofail= true	return null if error
 */
var _parseSDataURL = function(url, noFail) {
	var res = jsutils.parseURL(url);
	if (res.query && res.query.representation) {
		res.representation = res.query.representation;
		res.facet = null;
		var p = res.representation.indexOf('.');
		if (p != -1) {
			res.facet = res.representation.substr(p + 1);
			if (res.facet.charAt(0) == '$') res.facet = res.facet.substr(1);
			res.representation = res.representation.substr(0, p);
		}
	}
	var a;
	if (res.directory) {
		var idx = res.directory.indexOf("/$services/");
		if (idx > -1) {
			res.$services = res.directory.substring(idx + 11);
		}
		a = res.directory.split('/');
	}
	if (a == null || a.length <= 4) {
		if (noFail === true) return null;
		throw new Error("Bad sdata url:" + url);
	}
	res.dispatch = a[1];
	if (res.dispatch !== "mobile1" && res.dispatch !== "sdata") {
		if (noFail === true) return null;
		throw new Error("Bad sdata url:" + url);
	}
	res.application = a[2];
	res.contract = a[3];
	res.dataset = a[4];
	if (a.length === 4) return res;
	var match = _rID.exec(a[5]);
	if (match && (match.length == 3)) {
		res.entity = match[1];
		res.id = match[2];
		if (res.id && res.id.trim().Length === 0) res.id = null;
	} else {
		res.entity = a[5];
		res.id = null;
	}
	if (a.length === 5) return res;
	return res;
};

/**
 * Resolve sdataurl and return navigation info to generate the <a>/<button> link
 * nofail= true	return null if error
 */
var _getLinkInfo = function(sDataUrl, dao, nofail) {
	// dao is optional since a link can be a link without dataset (e.g. prev/next)
	sDataUrl = dao ? dao.parseExpression(sDataUrl) : sDataUrl;
	var url = _parseSDataURL(sDataUrl, nofail);
	if (url == null) return null;
	if (url.entity === "$mobileDashboards") {
		var res = {
			page: url.query.dashboard + ".$mobileDashboard"
		};
		if (url.query.parameters) {
			res.parameters = utils.parseExpression(url.query.parameters, dao);
		}
		return res;
	}
	if (url.query.representation) {
		var ep = url.application + "." + url.contract + "." + url.dataset;
		var res = {
			page: ep + (url.query.representation ? "." + url.query.representation : ""),
			sDataUrl: sDataUrl
		};
		if (url.$services) {
			// Mandatory to make the difference between a page link and action link
			res.$services = url.$services;
		}
		return res;
	}
	if (nofail === true) return null;
	throw new Error("getLinkInfo - Unexpected empty representaion in ul " + sDataUrl);
};
/**
 * Returns attributes for link tag
 * 	linkInfo: 	object returned by _getLinkInfo
 * 				or sdataUrl
 * dao:			mandatory if linkInfo is a sdataUrl
 */
var _getLinkAttrs = function(linkInfo, dao) {
	if (typeof linkInfo === "string") {
		// We assume that linkInfo is the url - we need dao
		linkInfo = _getLinkInfo(linkInfo, dao);
	}
	if (linkInfo.type === "navig") {
		return 'data-nav="' + linkInfo.page + '" data-sdata-url="' + encodeURIComponent(linkInfo.sDataUrl) + '"';
	} else if (linkInfo.type === "act") {
		return 'data-action="' + linkInfo.action + '" data-params="' + encodeURIComponent((linkInfo.params || "")) + '"';
	} else {
		throw new Error("_getLinkAttrs - unknonwn type\n" + linkInfo.type);
	}
};
/**
 * SCan diagnoses in a sdata response
 * TODO TEST
 */
var _clearSyracuseStack = function(d) {
	if (d.$stackTrace && d.$stackTrace.indexOf("node_modules\syracuse-x3") >= 0) {
		if (d.$message && d.$stackTrace.indexOf(d.$message) >= 0) {
			// No need of stack
			delete d.$stackTrace;
		} else {
			// Remove stack because too long
			d.$stackTrace = d.$stackTrace.split("\n")[0];
		}
	}
	return d;
};
var _scanDiagnoses = function(data) {
	var result = [];
	var done = [];
	var _scan = function(o, prop, path) {
		if (!path) path = [];
		if (done.indexOf(o) >= 0) return;
		if (Array.isArray(o)) {
			done.push(o);
			if (prop) path.push(prop);
			o.forEach(function(e, idx) {
				_scan(e, idx + "", path);
			});
			if (prop) path.pop(prop);
		} else if ($.isPlainObject(o)) {
			done.push(o);
			for (var p in o) {
				if (p === "$diagnoses") {
					o[p].forEach(function(d) {
						var $path = [].concat(path);
						if (prop) $path.push(prop);
						if (p) $path.push(p);
						d = _clearSyracuseStack($.extend({}, d));
						d.$path = $path.join('.');
						result.push(d);
					});
				} else {
					if (prop) path.push(prop);
					_scan(o[p], p, path);
					if (prop) path.pop(prop);
				}
			}
		}
	};
	if (data != null) _scan(data);
	return result;

};

var _addWhereClause = function(url, where, params) {
	params = params || {};
	var allParamsSet = true;
	where = where.value;
	var res = where.replace(/\{(\w*?)\}/g, function(m, p1) {
		var value = params[p1];
		if (value == null) {
			allParamsSet = false;
		}
		return value != null ? value : "";
	});
	if (allParamsSet) {
		url = url + "&where=" + res;
	}
	return url;
};

exports.parseSDataURL = _parseSDataURL;
exports.getLinkInfo = _getLinkInfo;
exports.getLinkAttrs = _getLinkAttrs;
exports.scanDiagnoses = _scanDiagnoses;
exports.addWhereClause = _addWhereClause;