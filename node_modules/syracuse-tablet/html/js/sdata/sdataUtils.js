"use strict";

var storage = require('syracuse-tablet/html/js/storage/storage');
var utils = require('syracuse-tablet/html/js/helpers/utils');

var _baseUrl = window.location.protocol + "//" + window.location.host;

var _defAjaxOptions = {
	timeout: 0,
	noJsonParsing: true
};

// Create sdata url
var _buildCrudUrl = function(id, klass, endpoint, rep, facet, action, device) {
	var url = [];
	if (action !== "workingCopies") {
		url = [_baseUrl];
	}
	url.push('/', "sdata/x3/erp/", endpoint, '/', klass);
	if (id) {
		url.push("(", escape("'" + id + "'"), ")");
	}
	if (action == "template") {
		url.push("/$template");
	} else if (action == "method") {
		url.push("/$batchAction");
	} else if (action == "workingCopies") {
		url.push("/$workingCopies");
	}
	url.push("?");
	if (rep && facet) {
		url.push("representation=", rep, ".$", facet, "&");
	}
	url.push("device=", device || "phone");
	return url.join('');
};
var _crudHeaders = function(facet, rep, endpoint) {
	return {
		"Accept": 'application/json'
	};
};
var _testSendCpt = (function() {
	var cpt = storage.sessionStorage.getItem("testStatelessCpt");
	if (cpt === null) cpt = 0;
	cpt++;
	storage.sessionStorage.setItem("testStatelessCpt", cpt);
	return cpt;
})();

var _testSendRegExp = /\{@([a-z]+)\}/g;
var _buildCrudData = function(params, context) {
	var context = context || {};
	var method, url, send, headers;
	var facet = params.action;
	var id = params.id;
	if (typeof id == "function") {
		id = params.id(params, context);
	}
	var klass = params.klass;
	var rep = params.representation;
	var endpoint = params.endpoint;
	if (params.send) {
		if (typeof params.send == "function") {
			params.send = params.send(params, context);
		}
		if (context.isTest) {
			// Allow @cont,... variables
			var str = params.send;
			if (typeof str == "object") {
				str = JSON.stringify(params.send);
			}
			str = str.replace(_testSendRegExp, function(match, p1) {
				if (p1 === "count") return _testSendCpt;
				if (p1 === "time") return new Date().getTime();;
				return "";
			});
			params.send = JSON.parse(str);
		}
	}
	switch (params.action) {
		case "delete":
			method = "DELETE";
			facet = "details"; // "edit" works also
			url = _buildCrudUrl(id, klass, endpoint, rep, facet);
			break;
		case "details":
		case "edit":
			method = "GET";
			url = _buildCrudUrl(id, klass, endpoint, rep, facet);
			break;
		case "template":
			facet = "edit";
			method = "GET";
			url = _buildCrudUrl(null, klass, endpoint, rep, facet, params.action);
			break;
		case "create":
			facet = "edit";
			method = "POST";
			send = params.send;
			url = _buildCrudUrl(null, klass, endpoint, rep, facet);
			break;
		case "update":
			method = "PUT";
			facet = "edit";
			url = _buildCrudUrl(id, klass, endpoint, rep, facet);
			send = params.send;
			break;
		case "query":
			method = "GET";
			url = _buildCrudUrl(null, klass, endpoint, rep, facet);
			break;
		case "method":
			method = "POST";
			facet = "edit";
			url = _buildCrudUrl(id, klass, endpoint, rep, facet, params.action);
			var actParams = {};
			actParams[params.x3Method] = {
				$isRequested: true,
				$parameters: params.x3Params || {}
			};
			send = {
				$actionParams: actParams,
				$workingCopyUrl: _buildCrudUrl(id, klass, endpoint, rep, "edit", "workingCopies"),
				$data: params.send
			};
			break;
		default:
			throw new Error("Unimplemented sdata action [" + params.action + "]");
			break;
	}
	return {
		id: id,
		method: method,
		url: url,
		send: send,
		headers: _crudHeaders(facet, rep, endpoint),
		options: $.extend({}, params.options, context.options, _defAjaxOptions),
		login: context.login
	};
};

/*
 * add complements to utils.parseURL
 * {
   	"representation": "AQTCRUDM",
	"facet": "edit",
  	// for sdataDispatcher id "sdata" or "local"
  	"dispatch": "sdata",
  	"application": "x3",
  	"contract": "erp",
  	"dataset": "SUPERV",
  	"entity": "AQTCRUD",
  	// entity id
  	"id": null,
  	"editActivity": false,
  	"createActivity": true
}
 */
var _rID = /^(.*)\(\'(.*)\'\)$/i;
var _parseSDataURL = function(url) {
	var res = utils.parseURL(url);
	if (res.query && res.query.representation) {
		res.representation = res.query.representation;
		res.facet = null;
		var p = res.representation.indexOf('.');
		if (p != -1) {
			res.facet = res.representation.substr(p + 1);
			if (res.facet.charAt(0) == '$') res.facet = res.facet.substr(1);
			res.representation = res.representation.substr(0, p);
		}
	}
	var a = res.directory.split('/');
	if (a.length <= 4) throw new Error("Bad sdata url\n" + url);
	res.dispatch = a[1];
	res.application = a[2];
	res.contract = a[3];
	res.dataset = a[4];
	if (a.length == 4) return res;
	var match = _rID.exec(a[5]);
	if (match && (match.length == 3)) {
		res.entity = match[1];
		res.id = match[2];
		if (res.id && res.id.trim().Length === 0) res.id = null;
	} else {
		res.entity = a[5];
		res.id = null;
	}
	if (a.length == 5) return res;
	var p = a[6];
	res.editActivity = p == "$workingCopies" && res.id != null;
	res.createActivity = p == '$template' || (p == "$workingCopies" && res.id == null);
	JSON.stringify(res, null, 2);
	return res;
};

exports.buildCrudUrl = _buildCrudUrl;
exports.buildCrudData = _buildCrudData;
exports.parseSDataURL = _parseSDataURL;