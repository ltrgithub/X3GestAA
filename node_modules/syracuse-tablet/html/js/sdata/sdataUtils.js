"use strict";

var storage = require('syracuse-tablet/html/js/storage/storage');
var utils = require('syracuse-tablet/html/js/helpers/utils');

var _baseUrl = window.location.protocol + "//" + window.location.host;

var _defAjaxOptions = {
	timeout: 0,
	noJsonParsing: true
};

// Create sdata url
var _crudUrl = function(id, klass, endpoint, rep, facet, action, device) {
	var url = [];
	if (action !== "workingCopies") {
		url = [_baseUrl];
	}
	url.push('/', "sdata/x3/erp/", endpoint, '/', klass);
	if (id) {
		url.push("(", escape("'" + id + "'"), ")");
	}
	if (action == "template") {
		url.push("/$template");
	} else if (action == "method") {
		url.push("/$batchAction");
	} else if (action == "workingCopies") {
		url.push("/$workingCopies");
	}
	url.push("?");
	if (rep && facet) {
		url.push("representation=", rep, ".$", facet, "&");
	}
	url.push("device=", device || "phone");
	return url.join('');
};
var _crudHeaders = function(facet, rep, endpoint) {
	return {
		"Accept": 'application/json'
	};
};
var _testSendCpt = (function() {
	var cpt = storage.sessionStorage.getItem("testStatelessCpt");
	if (cpt === null) cpt = 0;
	cpt++;
	storage.sessionStorage.setItem("testStatelessCpt", cpt);
	return cpt;
})();

var _testSendRegExp = /\{@([a-z]+)\}/g;
var _crudData = function(params, context) {
	var context = context || {};
	var method, url, send, headers;
	var facet = params.action;
	var id = params.id;
	if (typeof id == "function") {
		id = params.id(params, context);
	}
	var klass = params.klass;
	var rep = params.representation;
	var endpoint = params.endpoint;
	if (params.send) {
		if (typeof params.send == "function") {
			params.send = params.send(params, context);
		}
		if (context.isTest) {
			// Allow @cont,... variables
			var str = params.send;
			if (typeof str == "object") {
				str = JSON.stringify(params.send);
			}
			str = str.replace(_testSendRegExp, function(match, p1) {
				if (p1 === "count") return _testSendCpt;
				if (p1 === "time") return new Date().getTime();;
				return "";
			});
			params.send = JSON.parse(str);
		}
	}
	switch (params.action) {
		case "delete":
			method = "DELETE";
			facet = "details"; // "edit" works also
			url = _crudUrl(id, klass, endpoint, rep, facet);
			break;
		case "details":
		case "edit":
			method = "GET";
			url = _crudUrl(id, klass, endpoint, rep, facet);
			break;
		case "template":
			facet = "edit";
			method = "GET";
			url = _crudUrl(null, klass, endpoint, rep, facet, params.action);
			break;
		case "create":
			facet = "edit";
			method = "POST";
			send = params.send;
			url = _crudUrl(null, klass, endpoint, rep, facet);
			break;
		case "update":
			method = "PUT";
			facet = "edit";
			url = _crudUrl(id, klass, endpoint, rep, facet);
			send = params.send;
			break;
		case "query":
			method = "GET";
			url = _crudUrl(null, klass, endpoint, rep, facet);
			break;
		case "method":
			method = "POST";
			facet = "edit";
			url = _crudUrl(id, klass, endpoint, rep, facet, params.action);
			var actParams = {};
			actParams[params.x3Method] = {
				$isRequested: true,
				$parameters: params.x3Params || {}
			};
			send = {
				$actionParams: actParams,
				$workingCopyUrl: _crudUrl(id, klass, endpoint, rep, "edit", "workingCopies"),
				$data: params.send
			};
			break;
		default:
			throw new Error("Unimplemented sdata action [" + params.action + "]");
			break;
	}
	return {
		id: id,
		method: method,
		url: url,
		send: send,
		headers: _crudHeaders(facet, rep, endpoint),
		options: $.extend({}, params.options, context.options, _defAjaxOptions),
		login: context.login
	};
};

var _rID = /^(.*)\(\'(.*)\'\)$/i;
var _parseSE = function(param) {
	var res = {
		prefix: param,
		content: ""
	};
	var match = _rID.exec(param);
	if (match && (match.length == 3)) {
		res.prefix = match[1];
		res.content = match[2];
	}
	return res;

};

var _parseSDataURL = function(url) {
	var a = url.split("/sdata/");
	var res = null;
	var s = null;
	if (a.length == 2) {
		res = {
			base: a[0] + "/sdata/",
			query: {},
			sdata: "sdata",
			origUri: url
		};
		a = a[1].split("?");
		if (a.length == 2) {
			res.query = utils.parseQueryString(a[1]);
		}
		var ss = a[0].split("'");
		var co = "";
		if (ss.length === 3) {
			ss[1] = encodeURIComponent(decodeURIComponent(ss[1]));
			co = ss.join("'");
		} else {
			co = a[0];
		}
		a = co.split('/');
		if (a.length < 3) return null;
		res.application = a[0];
		res.contract = a[1];
		res.dataset = a[2];
		if (a.length < 4) return res;
		res.entity = a[3];
		var p = _parseSE(res.entity);
		res.entity = p.prefix;
		res.id = p.content;
		if (a.length > 4) {
			s = a[4];
			if (s == '$template') {
				res.template = true;
				res.createActivity = true;
			} else if (s == "$workingCopies") {
				if (res.id) {
					res.editActivity = true;
				} else {
					res.createActivity = true;
					res.template = true;
				}
			}
		}
		if (a.length > 5) {
			s = a[5];
			if (res.template && (s == "$workingCopies")) {
				res.createActivity = true;
			}
		}
	}
	return res;
};

exports.crudUrl = _crudUrl;
exports.crudData = _crudData;
exports.parseSDataURL = _parseSDataURL;