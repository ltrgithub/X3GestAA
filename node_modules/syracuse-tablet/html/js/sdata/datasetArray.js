"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var datasetUtils = require('syracuse-tablet/html/js/sdata/datasetUtils');
var Base = require('syracuse-tablet/html/js/sdata/datasetBase').DatasetBase;

/**
 * Base class for array dataset 
 * Never use directly. Use one of it's subclasses. 
 */
exports.ArrayDataset = utils.defineClass(
	function ArrayDataset(json, prototype, parent, $bind) {
		Base.call(this, json, prototype, parent, $bind);
		this.rowDatasetsByUuid = {};
	},
	Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this.rowDatasetsByUuid) {
				var $uuids = Object.keys(this.rowDatasetsByUuid);
				for (var i = 0; i < $uuids.length; i++) {
					this.removeDatasetByUuid($uuids[i]);
				}
			}
		},

		getChild: function($bind) {
			throw new Error("getChild not supported on ArrayDataset");
		},
		isValidIndex: function($index) {
			return ($index >= 0 && $index < this.getNumRows());
		},
		getNumRows: function() {
			return this.json ? this.json.length : 0;
		},
		/**
		 * Move row with $uuid to $index (0 to numRows-1)
		 * 
		 */
		moveRow: function($uuid, targetIndex) {
			var sourceIndex = this.getRowIndex($uuid);
			if (sourceIndex == null ||
				sourceIndex === targetIndex) {
				return;
			}
			if (!this.isValidIndex(sourceIndex) ||
				!this.isValidIndex(targetIndex)) {
				return;
			}
			var rowToMove = this.json[sourceIndex];
			if (Math.abs(targetIndex - sourceIndex) === 1) {
				this.json[sourceIndex] = this.json[targetIndex];
				this.json[targetIndex] = rowToMove;
			} else {
				this.json.splice(sourceIndex, 1);
				this.json.splice(targetIndex, 0, rowToMove);
			}
			this._setAllRowsDirty();
		},
		/**
		 * Return RowDataset representing the row identified by $index or null of $index is not valid
		 */
		getRowByIndex: function($index) {
			if (!this.isValidIndex($index)) {
				return null;
			}
			var $uuid = this.json[$index].$uuid;
			var row = this.rowDatasetsByUuid[$uuid];
			if (!row) {
				// Note that a row's $bind is the rows $uuid which allows to perfectly identify it later
				row = this.createRowDataset(this.json[$index], this.rowPrototype, $uuid, $index);
			}
			return row;
		},
		/**
		 * Return RowDataset representing the row identified by $uuid or null of $uuid is not valid
		 */
		getRowByUuid: function($uuid) {
			var row = this.rowDatasetsByUuid[$uuid];
			if (!row) {
				var index = this.getRowIndex($uuid);
				if (index != null) {
					row = this.createRowDataset(this.json[index], this.rowPrototype, $uuid, index);
				}
			}
			return row;
		},
		getRowIndex: function($uuid) {
			var self = this;
			var $index = null;
			self.json.some(function(rowData, index) {
				if (rowData.$uuid === $uuid) {
					$index = index;
					return true;
				}
				return false;
			});
			return $index;
		},
		createRowDataset: function(json, prototype, $uuid) {
			// Note that a row's $bind is the rows $uuid which allows to perfectly identify it later
			var klass = datasetUtils.getImplementation("RowDataset");
			var row = new klass(json, prototype, this, $uuid);
			this.rowDatasetsByUuid[$uuid] = row;
			return row;
		},
		removeRowDataset: function(dataset) {
			if (dataset && dataset.$bind) {
				this.removeDatasetByUuid(dataset.$bind);
			}
		},
		removeDatasetByUuid: function($uuid) {
			var dataset = this.rowDatasetsByUuid[$uuid];
			if (dataset) {
				dataset.destroy();
			}
			delete this.rowDatasetsByUuid[$uuid];
		},
		/**
		 * Called when a row has been added to an array
		 */
		_deltaManRowAdded: function($uuid, idx) {
			for (var i = 0; i < this.deltaChangeListeners.length; i++) {
				this.deltaChangeListeners[i].onDeltaRowAdded(this, this.$bind, $uuid, idx);
			}
		},
		/**
		 * Called when a row has been removed from an array
		 */
		_deltaManRowRemoved: function($uuid, idx) {
			for (var i = 0; i < this.deltaChangeListeners.length; i++) {
				this.deltaChangeListeners[i].onDeltaRowRemoved(this, this.$bind, $uuid, idx);
			}
		},
		/**
		 * Called when a row has moved to a new index
		 */
		_deltaManRowMoved: function($uuid, newIdx) {
			for (var i = 0; i < this.deltaChangeListeners.length; i++) {
				this.deltaChangeListeners[i].onDeltaRowMoved(this, this.$bind, $uuid, newIdx);
			}
		}
	}
);