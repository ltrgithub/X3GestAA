"use strict";

var clientContract = require('syracuse-tablet/html/js/sdata/entities/clientContract');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var settings = require('syracuse-tablet/html/js/application/settings');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _hiddenAppList;

var _welcomeApplication = {
	"$application": {
		"$uuid": "$welcomeApplication",

		"applicationName": "$welcomeApplication",
		"title": "Welcome",
		"description": "Welcome",
		"iconName": "gears",

		"$homeDashboard": {
			"$uuid": "$welcomeDashboard",
			"dashboardName": "$welcomeDashboard"
		},
	},
	"$dashboards": {
		"$welcomeDashboard": {
			"$pageInfo": {
				// Don't remove it - used to identify application welcome page
				"isWelcomePage": true,
				"disableAuthoring": true
			},
			"$update": function(dashboard) {
				return _updateWelcomeDashboard(dashboard);
			},
			"$dashboardName": "$welcomeDashboard",
			/* It's the first page, no need to explain that using title or description */
			"$title": "",
			"$description": "",
		}
	}
};

function _buildGadget(page) {
	if (page.dashboardName) {
		return _buildDashboardGadget(page);
	} else {
		return _buildRepresentationGadget(page);
	}
}

function _buildRepresentationGadget(page) {
	return {
		"$type": "$representation",
		"$title": page.title,
		"entity": page.entity,
		"action": page.action,
		"representation": page.representation,
		"facet": page.facet,
		"keyParameter": page.key,
		"endpoint": page.endpoint,
		"applicationName": page.applicationName
	};
}

function _buildDashboardGadget(page) {
	return {
		"$type": "$dashboard",
		"$title": page.title,
		"dashboardName": page.dashboardName,
		"applicationName": page.applicationName,
		"sdataParameters": page.sdataParameters // Contains url with key value pairs like code=444&group=123&bpcnum=123
	};
}

function _addPinnedPages(dashboard) {
	var grp;
	var pageId = 1;
	return settings.getPinnedPages()
		.then(function(pp) {
			if (pp.length <= 0) {
				return;
			}
			grp = {
				"$layoutType": "hubGroup",
				"$title": locale.text("welcome.myquicklinks"),
				"$items": []
			};
			pp.forEach(function(page) {
				var gadgetName = "$$$" + pageId;
				pageId++;
				var vignetteName = gadgetName;
				var gadget = _buildGadget(page);

				// Used to find which page was pinned in this gadget in case we remove directly on welcome page
				gadget.pinPageId = page.id;

				dashboard.$gadgets[gadgetName] = gadget;

				dashboard.$vignettes[vignetteName] = {
					"$uuid": gadgetName,
					"$displayStyle": "$link"
				};

				grp.$items.push({
					$layoutType: "tile",
					$items: [{
						$bind: vignetteName
					}],
					$size: "medium"
				});
			});
		})
		.then(function() {
			if (grp) {
				dashboard.$article.$items.push(grp);
			}
		});

}

function _addApps(dashboard) {
	var meta = globals.getMetaData();
	var apps;
	var hiddenApps;

	return meta.getApplications()
		.then(function(appsList) {
			apps = appsList;
			return settings.getHiddenApplications();
		})
		.then(function(hiddenAppsList) {
			hiddenApps = hiddenAppsList;

			// Make list availabe for later use in page
			_hiddenAppList = [];
			hiddenApps.forEach(function(name) {
				apps.forEach(function(appInfo) {
					if (name === appInfo.applicationName) {
						_hiddenAppList.push(appInfo);
					}
				});
			});

			apps.forEach(function(appInfo) {
				var name = appInfo.applicationName;
				if (appInfo.applicationName !== _welcomeApplication.$application.applicationName && hiddenApps.indexOf(name) < 0) {
					var name = "$welcome_" + appInfo.applicationName;
					var gadget = {
						"$type": "$application",
						"$title": appInfo.title,
						"applicationName": appInfo.applicationName
					};

					var vignette = {
						"$uuid": name
					};
					dashboard.$gadgets[name] = gadget;
					dashboard.$vignettes[name] = vignette;
					dashboard.$article.$items[0].$items.push({
						$layoutType: "tile",
						$items: [{
							$bind: name
						}],
						$size: "medium"
					});
				}
			});
		});
}

/* we pass appMetaData as parameter to allow $update to refresh it (original appMetaData has been cloned) - see getAppDetail*/
function _updateWelcomeDashboard(dashboard) {
	dashboard.$gadgets = {};
	dashboard.$vignettes = {};
	dashboard.$article = {
		"$layoutType": "hub",
		"$items": [{
			"$layoutType": "hubGroup",
			"$title": locale.text("welcome.myapps"),
			"$items": []
		}]
	};

	return _addPinnedPages(dashboard)
		.then(function() {
			return _addApps(dashboard);
		})
		.then(function() {
			return dashboard;
		})
		.fail(function(e) {
			console.log(e);
			return $.smReject(e);
		});
}

exports.register = function() {
	clientContract.registerApp(_welcomeApplication);
};

/* 
 * Returns the list of applications available to the user that were hidden by settings during
 * the last initialisation of the dashboard.
 * This list is the list of applications that the user could add to the welcome page if he want's to
 */
exports.getHiddenApplications = function() {
	return _hiddenAppList;
};