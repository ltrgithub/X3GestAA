"use strict";

var clientContract = require('syracuse-tablet/html/js/sdata/entities/clientContract');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var settings = require('syracuse-tablet/html/js/application/settings');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var voice = require('syracuse-tablet/html/js/helpers/native/nativeVoiceCommands');

var _appList = {
	hidden: [],
	visible: []
};

var _welcomeApplication = {
	"$application": {
		"$uuid": "$welcomeApplication",

		"applicationName": "$welcomeApplication",
		"title": "",
		"description": "",
		"iconName": "gears",

		"$homeDashboard": {
			"$uuid": "$welcomeDashboard",
			"dashboardName": "$welcomeDashboard"
		},
	},
	"$dashboards": {
		"$welcomeDashboard": {
			"$pageInfo": {
				// Don't remove it - used to identify application welcome page
				"isWelcomePage": true,
				"disableAuthoring": true
			},
			"$update": function(dashboard) {
				return _updateWelcomeDashboard(dashboard);
			},
			"$dashboardName": "$welcomeDashboard",
			/* It's the first page, no need to explain that using title or description */
			"$title": "",
			"$description": "",
		}
	}
};

function _buildGadget(page) {
	if (page.dashboardName) {
		return _buildDashboardGadget(page);
	} else {
		return _buildRepresentationGadget(page);
	}
}

function _buildRepresentationGadget(page) {
	return {
		"$type": "$representation",
		"$title": page.title,
		"entity": page.entity,
		"action": page.action,
		"representation": page.representation,
		"facet": page.facet,
		"keyParameter": page.key,
		"endpoint": page.endpoint,
		"applicationName": page.applicationName,
		"icon": page.icon,
	};
}

function _buildDashboardGadget(page) {
	return {
		"$type": "$dashboard",
		"$title": page.title,
		"dashboardName": page.dashboardName,
		"applicationName": page.applicationName,
		"sdataParameters": page.sdataParameters, // Contains url with key value pairs like code=444&group=123&bpcnum=123
		"endpoint": page.endpoint,
		"icon": page.icon,
	};
}

function _addPinnedPages(dashboard, apps, titles) {
	var grp;
	var pageId = 1;
	var tileConfigs;
	var endpoint = globals.getEndpoint();
	var appNames;

	appNames = apps.map(function(a) {
		return a.applicationName;
	});

	return settings.getTileConfigs()
		.then(function(tc) {
			tileConfigs = tc;
		})
		.then(function() {
			return settings.getPinnedPages();
		})
		.then(function(pp) {
			if (pp.length <= 0) {
				return;
			}
			grp = {
				"$layoutType": "hubGroup",
				"$title": locale.text("welcome.myquicklinks"),
				"$items": []
			};
			pp.forEach(function(page) {
				if (appNames.indexOf(page.applicationName) >= 0) {
					var config = tileConfigs["pin-" + page.id];
					config = config || {};

					var gadgetName = "$$$" + pageId;
					pageId++;
					var vignetteName = gadgetName;
					var gadget = _buildGadget(page);
					if (gadget.endpoint === endpoint) {
						gadget.$title = config.title || gadget.$title;
						gadget.icon = config.icon || gadget.icon;

						titles.push(gadget.$title);

						// Used to find which page was pinned in this gadget in case we remove directly on welcome page
						gadget.pinPageId = page.id;

						dashboard.$gadgets[gadgetName] = gadget;

						dashboard.$vignettes[vignetteName] = {
							"$uuid": gadgetName,
							"$displayStyle": "$link"
						};

						grp.$items.push({
							$layoutType: "tile",
							$bgColor: config.color || "darkgrey",
							$items: [{
								$bind: vignetteName
							}],
							$size: config.size || "medium"
						});
					}
				}
			});
		})
		.then(function() {
			if (grp && grp.$items && grp.$items.length > 0) {
				dashboard.$article.$items.push(grp);
			}
		});

}

function _addApps(dashboard, apps, titles) {

	var apps;
	var hiddenApps;
	var groups = {
		sageAppli: {
			"$layoutType": "hubGroup",
			"$title": locale.text("welcome.sageapp"),
			"$items": []
		},
		byDefault: {
			"$layoutType": "hubGroup",
			"$title": locale.text("welcome.myapps"),
			"$items": []
		}
	};
	var tileConfigs;
	return settings.getTileConfigs()
		.then(function(tc) {
			tileConfigs = tc;
		})
		.then(function() {
			return settings.getHiddenApplications();
		})
		.then(function(hiddenAppsList) {
			hiddenApps = hiddenAppsList;

			// Make list availabe for later use in page
			_appList.hidden = [];
			_appList.visible = [];
			hiddenApps.forEach(function(name) {
				apps.forEach(function(appInfo) {
					if (name === appInfo.applicationName) {
						_appList.hidden.push(appInfo);
					}
				});
			});

			apps.forEach(function(appInfo) {
				var name = appInfo.applicationName;
				if (appInfo.applicationName !== _welcomeApplication.$application.applicationName && hiddenApps.indexOf(name) < 0) {
					_appList.visible.push(name);

					var config = tileConfigs["app-" + name];
					config = config || {};
					var name = "$welcome_" + appInfo.applicationName;
					var gadget = {
						"$type": "$application",
						"$title": config.title || appInfo.title,
						"applicationName": appInfo.applicationName,
						"icon": config.icon || appInfo.iconName
					};
					var vignette = {
						"$uuid": name
					};

					titles.push(gadget.$title);

					dashboard.$gadgets[name] = gadget;
					dashboard.$vignettes[name] = vignette;
					var appTile = {
						$layoutType: "tile",
						$bgColor: config.color,
						$items: [{
							$bind: name
						}],
						$size: config.size || "medium"
					};
					_checkTileStatus(appInfo, appTile);
					groups[appInfo.isSageApplication ? "sageAppli" : "byDefault"].$items.push(appTile);
				}
			});
			for (var p in groups) {
				if (globals.isDvlpMode() || p !== "sageAppli") {
					if (groups[p].$items.length > 0) {
						dashboard.$article.$items.push(groups[p]);
					}
				}
			}
		});
}

function _checkTileStatus(app, appTile) {
	if (app.versionNumber == null) { // No version number, so it's a client side app, no need to test any states
		return;
	}
	if (app.localVersionNumber == null) { // App is not yet in the cache and needs to be setup
		// Do not show the setup icon since it was recognized as missleading by some users
		//appTile.$icon = "appSetup";
	} else if (app.localVersionNumber != app.versionNumber) {
		appTile.$icon = "appUpdate";
	}
}

/* we pass appMetaData as parameter to allow $update to refresh it (original appMetaData has been cloned) - see getAppDetail*/
function _updateWelcomeDashboard(dashboard) {
	var meta = globals.getMetaData();
	var appList;
	dashboard.$gadgets = {};
	dashboard.$vignettes = {};
	dashboard.$article = {
		"$layoutType": "hub",
		"$linksOnly": true, // Hint to the layout: Page contains only link tiles and can be 
		// resized in a much bigger range that it would be possible for
		// Pages showing real vignettes with content.
		// Only used for welcome page right now
		"$items": []
	};

	// All titles of the welcome page will be put into this list to allow the user
	// to start the application and invoke a bookmark by a voice command
	var titlesOnWelcomePage = [];

	dashboard.$title = locale.text("welcome.title.home");
	return $.smResolve()
		.then(function() {
			var forceReadApps = globals.needToCheckAppsList();
			globals.setNeedToCheckAppsList(false);
			forceReadApps = forceReadApps && globals.isOnline();
			return meta.getApplications(forceReadApps);
		})
		.then(function(apps) {
			appList = apps;
		})
		.then(function() {
			return _addPinnedPages(dashboard, appList, titlesOnWelcomePage);
		})
		.then(function() {
			return _addApps(dashboard, appList, titlesOnWelcomePage);
		})
		.then(function() {
			// Make all gadgets present on welcomepage accessible by voice commands
			voice.setVoiceBookmarks(titlesOnWelcomePage, "set");

			return dashboard;
		})
		.fail(function(e) {
			console.log(e);
			return $.smReject(e);
		});
}

exports.register = function() {
	clientContract.registerApp(_welcomeApplication);
};

/* 
 * Returns the list of applications available to the user that were hidden by settings during
 * the last initialisation of the dashboard.
 * This list is the list of applications that the user could add to the welcome page if he want's to
 */
exports.getApplicationLists = function() {
	return _appList;
};