"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');

var _LOCAL_ENTITIES_URL = "http://localhost:8124/mobile1/x3/erp/local";

var _entities = {};

var _propertiesToCopy = [
	// ui related
	"$title",
	"$isExcluded",
	"$isHidden",
	"$isMandatory",
	"$isReadOnly",
	"$isDisabled",

	// for formats
	"$format",
	"$x3Format",

	// for quantity and ref fields
	"$unit",
	"$value",
	"$shortTitle",
	"$capabilities",
	"$item",

	// constraints according to https://github.com/Sage-ERP-X3/platform/wiki/Resource-Prototypes
	"$minimum",
	"$maximum",
	"$exclusiveMinimum",
	"$exclusiveMaximum",
	"$minItems",
	"$maxItems",
	"$isNullable",
	"$isUnique",
	"$pattern",
	"$minLength",
	"$maxLength",
	"$precision",
	"$scale",
	"$enum",
	"$format",

	// For stored data
	"$url"
];

exports.registerApp = function(app) {
	globals.getMetaData().registerStaticApp(app);
};

exports.registerEntity = function(entity) {
	_entities[entity.$entityName] = entity;
};

exports.getEntity = function(entity) {
	return _entities[entity];
};


exports.getPageInfo = function(name, options) {
	var repr = name.split(".");
	if (repr.length === 5) {
		repr = repr.slice(3, 5);
	}
	if (repr[0].smStartsWith("QUERY~") || repr[0].smStartsWith("STATS~")) {
		var p = repr[0].split("~");
		repr[0] = p[1];
	}
	var ent = _entities[repr[0]];
	if (!ent) {
		return null;
	}
	var state = {
		home: false,
		type: "regular",
		subtype: repr[1] ? repr[1].substring(1) : "unknown",
		cached: false,
		refreshed: false
	};
	state.name = name;
	return state;
};

exports.getRegularPageInfo = function(pageId) {
	var repr = pageId.split(".");
	if (repr.length === 5) {
		repr = repr.slice(3, 5);
	}

	if (repr[0].smStartsWith("QUERY~") || repr[0].smStartsWith("STATS~")) {
		var p = repr[0].split("~");
		repr[0] = p[1];
	}

	var ent = _entities[repr[0]];
	var pageInfo;
	if (ent) {
		pageInfo = _buildPageInfo(repr[0], repr[1], ent);
	}
	return $.smResolve(pageInfo);
};

function _buildPageInfo(repr, facet, entity) {
	var page = {
		$page: {},
		$cache: {}
	};
	_buildPage(repr, facet, entity, page.$page);
	return page;
}

function _buildPage(repr, facet, entity, page) {
	if (facet.smStartsWith("$cube")) {
		// FDB - smStartsWith tto be able to have multiple facets $cube$, $cubechart in an entity for test
		// $cube for table display $cubechart for chart
		page.$prototype = entity.$createProto();
	} else if (facet === "$query" || facet === "$lookup") {
		page.$prototype = {
			$properties: {
				$resources: {
					$type: "application/x-array",
					$item: _buildPrototype(repr, facet),
					$url: "{$baseUrl}/" + repr + "('{$key}')?representation=" + repr + ".$queryItem",
				}
			}
		};
		page.$prototype.$url = "{$baseUrl}/" + repr + "?representation=" + repr + "." + facet;
		page.$prototype.$properties.$resources.$item.$key = "{$uuid}";
		page.$prototype.$properties.$resources.$item.$value = entity.$value;
		page.$prototype.$properties.$resources.$item.$links = {
			$details: {
				$url: "{$baseUrl}/" + repr + "('{$key}')?representation=" + repr + ".$details",
				$title: "Details"
			},
			$edit: {
				$url: "{$baseUrl}/" + repr + "('{$key}')?representation=" + repr + ".$edit",
				$title: "Edit"
			}
		};
		page.$prototype.$links = {
			$create: {
				$url: "{$baseUrl}/" + repr + "('{$key}')?representation=" + repr + ".$create",
				$title: "Create New"
			}
		};
		page.$prototype.$key = "{$uuid}";
	} else {

		page.$prototype = _buildPrototype(repr, facet);
		page.$prototype.$url = "{$baseUrl}/" + repr + "('{$key}')?representation=" + repr + "." + facet;
		page.$prototype.$key = "{$uuid}";
		page.$prototype.$links = {};

		// links to set in a json variable
		var links = {
			$edit: {
				$url: "{$baseUrl}/" + repr + "('{$key}')?representation=" + repr + ".$edit",
				$title: "Edit"
			},
			$query: {
				$url: "{$baseUrl}/" + repr + "?representation=" + repr + ".$query",
				$title: "List"
			},
			$save: {
				$url: "{$baseUrl}/" + repr + "('{$key}')?representation=" + repr + ".$save",
				$title: "Save"
			},
			$details: {
				$url: "{$baseUrl}/" + repr + "('{$key}')?representation=" + repr + ".$details",
				$title: "Detail"
			}
		};

		// add links according to facet (remainting facets are '$details', '$edit', '$create')
		switch (facet) {
			case "$create":
				page.$prototype.$links["$save"] = links["$save"];
				page.$prototype.$links["$query"] = links["$query"];
				break;
			case "$details":
				page.$prototype.$links["$edit"] = links["$edit"];
				page.$prototype.$links["$query"] = links["$query"];
				break;
			case "$edit":
				page.$prototype.$links["$save"] = links["$save"];
				page.$prototype.$links["$details"] = links["$details"];
				page.$prototype.$links["$query"] = links["$query"];
				break;
			default:
				throw new Error(facet ? "facet " + facet + " not handled yet" : "No facet specified");
		}
	}
	var $article = entity.$articles && entity.$articles[facet];
	if ($article) {
		page.$article = $article;
	}
	// not used at all but needs to be set since it's syntactically checked later
	page.$prototype.$baseUrl = _LOCAL_ENTITIES_URL;
	if (entity.$prototype) {
		entity.$prototype(page.$prototype, repr, facet);
	}
}

function _buildPrototype(repr, facet) {
	var entity = _entities[repr];
	if (!entity) {
		return null;
	}
	var proto = {
		$properties: {}
	};
	Object.keys(entity.$properties).forEach(function(key) {
		var prop = entity.$properties[key];
		var $type = prop.$type || "application/x-string";
		var propNew = proto.$properties[key] = {
			$type: $type
		};
		for (var i = 0; i < _propertiesToCopy.length; i++) {
			var pname = _propertiesToCopy[i];
			var p = prop[pname];
			if (p) {
				propNew[pname] = p;
			}
		}
	});
	return proto;
}

exports.getPrototype = function(repr, facet) {
	return _buildPrototype(repr, facet);
};


exports.isLocalEntityUrl = function(url) {
	return url ? url.smStartsWith(_LOCAL_ENTITIES_URL) : false;
};

exports.getLocalEntityUrl = function(entity, path) {
	return _LOCAL_ENTITIES_URL + "/" + entity + (path ? path : "");
};
// Returns the content of the url according to the context
// Used to return datacontent for clobs, blobs in slient entities
exports.callLocalEntityUrl = function(url) {
	var sdataUrl = sdataUtils.parseSDataURL(url);
	if (!sdataUrl || !sdataUrl.entity) return null;
	var entity = exports.getEntity(sdataUrl.entity);
	if (!entity || !entity.$urlCall) return null;
	//sdataUrl 	parsed url
	//path 		array thath contains th end of the path following entity name
	return entity.$urlCall(sdataUrl, sdataUrl.path.split('/').splice(6));
};