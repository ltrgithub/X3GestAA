"use strict";

var _data = [];
for (var i = 0; i < 100; i++) {
	_data.push({
		$uuid: i,
		name: "My name is: " + i,
		desc: "My desc is: " + i,
		desc2: "My desc2 is: " + i,
		amount: i * 100,
	});
}

exports.entity = {
	$entityName: "example",
	$value: "{name}",
	$properties: {
		name: {
			$type: "application/x-string",
			$title: "My name"
		},
		desc: {
			$type: "application/x-string",
			$title: "My description"
		},
		desc2: {
			$type: "application/x-string",
			$title: "My description 2"
		},
		amount: {
			$type: "application/x-integer",
			$title: "My amount",
			$isExcluded: false,
			$isHidden: false,
			$isMandatory: false,
			$isReadOnly: false,
			$isDisabled: false
		}
	},
	$relations: {
		values: {
			$type: "exampleChild"
		}
	},
	$articles: {
		$details: {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$widthMd": "6,6",
				"$items": [{
					"$bind": "name",
					"$isTitleHidden": false
				}, {
					"$bind": "desc",
					"$isTitleHidden": false
				}],
			}, {
				"$layoutType": "row",
				"$widthMd": "6,6",
				"$items": [{
					"$bind": "desc2",
					"$isTitleHidden": false
				}, {
					"$bind": "amount",
					"$isTitleHidden": false
				}]
			}]
		},
		$edit: {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$widthMd": "6,6",
				"$items": [{
					"$bind": "name",
					"$isTitleHidden": true
				}, {
					"$bind": "desc",
					"$isTitleHidden": true
				}],
			}, {
				"$layoutType": "row",
				"$widthMd": "6,6",
				"$items": [{
					"$bind": "desc2",
					"$isTitleHidden": false
				}, {
					"$bind": "amount",
					"$isTitleHidden": false
				}]
			}]
		}
	},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			// only works because op.$key is equal the array index and equal the $uuid
			deferred.resolve(_data[op.$key]);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _data
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};