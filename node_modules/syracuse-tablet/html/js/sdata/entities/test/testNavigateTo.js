"use strict";
var utils = require('syracuse-tablet/html/js/helpers/utils');

var _data = [];

for (var i = 0; i < 10; i++) {
	_data.push({
		$uuid: "" + i,
		name: "Customer group " + i,
		group: "" + i
	});

}

exports.entity = {
	$entityName: "testNavigateTo",
	$properties: {
		name: {
			$title: "Customer group name",
			$type: "application/x-string",
		},
		group: {
			$title: "Customer group",
			$type: "application/x-string",
		},
	},
	$prototype: function(proto) {
		// Add some chart information in $query prototype
		var res = utils.getPropByPath(proto, "$properties.$resources.$item.$links") || {};
		res["DASHBOARD"] = {
			$title: "Show details",
			$url: "{$baseUrl}/$mobileDashboards?dashboard=testContextDashboardChild&parameters=group%3D%7Bgroup%7D"
		};
	},
	$relations: {},
	$articles: {
		$query: {
			"$layoutType": "stack",
			"$items": [{
				"$bind": "$resources",
				"$detailsLink": "DASHBOARD",
				"$isTitleHidden": true,
				"$article": {
					"$items": [{
						"$bind": "name"
					}, {
						"$bind": "group"
					}]
				},
				"$display": "table"
			}]
		}
	},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			// template when creating a new record
			var i = 15;
			var tpl = {
				$uuid: "" + i,
				propString: "Simple String=" + i,
				propInt: (i * 1000 + i * 10),
				propDecimal: Math.sqrt(i * 1000 + i * 10),
			};
			deferred.resolve(tpl);
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			// only works because op.$key is equal the array index and equal the $uuid
			deferred.resolve(_data[op.$key]);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _data
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};