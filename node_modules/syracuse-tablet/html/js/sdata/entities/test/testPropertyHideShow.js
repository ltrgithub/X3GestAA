"use strict";

var _data = [];
var _switch = false;
for (var i = 0; i < 10; i++) {
	_data.push({
		$uuid: i,
		propStringShow: "Simple String=" + i,
		propStringHide: "Simple String=" + i,
		propStringReadOnly: "ReadOnly String=" + i,
		propStringDisabled: "Disabled=true String=" + i,
		propStringDisabledFalse: "Disabled=false String=" + i,

		propDate: "2014-03-" + (i + 20),
		propDateHide: "2014-03-" + (i + 20),
		propDateDisabled: "2014-03-" + (i + 20),
		propDateReadOnly: "2014-03-" + (i + 20),

		propDateTime: "2014-06-" + (i + 10) + "T12:45:" + (i + 44) + ".123Z",
		propDateTimeHide: "2014-06-" + (i + 10) + "T12:45:" + (i + 44) + ".123Z",
		propDateTimeDisabled: "2014-06-" + (i + 10) + "T12:45:" + (i + 44) + ".123Z",

		propTime: "15:45:" + (i + 34),
		propTimeHide: "15:45:" + (i + 34),
		propTimeDisabled: "15:45:" + (i + 34),


		propInt: (i * 1000 + i * 10),
		propIntHide: (i * 1000 + i * 10),
		propIntDisabled: (i * 1000 + i * 10),
		propIntReadOnly: (i * 1000 + i * 10),

		propDecimal: Math.sqrt(i * 1000 + i * 10),
		propDecimalHide: Math.sqrt(i * 1000 + i * 10),
		propDecimalDisabled: Math.sqrt(i * 1000 + i * 10),
		propDecimalReadOnly: Math.sqrt(i * 1000 + i * 10),

		propReal: Math.sqrt(i * 1000 + i * 30),

		propBoolean: (_switch = !_switch),
		propBooleanHidden: (_switch = !_switch),
		propBooleanDisabled: (_switch = !_switch),

		propChoice: "mr",
		propChoiceHidden: "mr",
		propChoiceDisabled: "mr",

		propQuantity: i * 123,
		propStringUnit: "EUR",
		propQuantityExcluded: i * 123,
		propStringUnitExcluded: "USD"

	});
}

exports.entity = {
	$entityName: "testPropertyHideShow",
	$properties: {
		propStringShow: {
			$type: "application/x-string",
			$isMandatory: true,
			$title: "String Mandatory $isHidden: false",
			$isHidden: false
		},
		propStringHide: {
			$type: "application/x-string",
			$isMandatory: false,
			$title: "String $isHidden: true",
			$isHidden: true
		},
		propStringReadOnly: {
			$type: "application/x-string",
			$title: "String $isReadOnly: true",
			$isReadOnly: true
		},
		propStringDisabledFalse: {
			$type: "application/x-string",
			$title: "String $isDisabled: false",
			$isDisabled: false
		},
		propStringDisabled: {
			$type: "application/x-string",
			$title: "String $isDisabled: true",
			$isDisabled: true
		},
		propDate: {
			$type: "application/x-date",
			$isMandatory: false,
			$title: "Date $isHidden: false",
			$isHidden: false
		},
		propDateHide: {
			$type: "application/x-date",
			$isMandatory: false,
			$title: "Date $isHidden: true",
			$isHidden: true
		},
		propDateDisabled: {
			$type: "application/x-date",
			$isMandatory: false,
			$title: "Date $isDisabled: true",
			$isDisabled: true
		},
		propDateReadOnly: {
			$type: "application/x-date",
			$isMandatory: false,
			$title: "Date $isReadOnly: true",
			$isReadOnly: true
		},

		propDateTime: {
			$type: "application/x-datetime",
			$isMandatory: false,
			$title: "Date+Time $isHidden: false",
			$isHidden: false
		},
		propDateTimeHide: {
			$type: "application/x-datetime",
			$isMandatory: false,
			$title: "Date+Time $isHidden: true",
			$isHidden: true
		},
		propDateTimeDisabled: {
			$type: "application/x-datetime",
			$isMandatory: false,
			$title: "Date+Time $isDisabled: true",
			$isDisabled: true
		},

		propTime: {
			$type: "application/x-time",
			$isMandatory: false,
			$title: "Time long",
			$format: "TT"
		},
		propTimeHide: {
			$type: "application/x-time",
			$isMandatory: false,
			$title: "Time $isHidden: true",
			$isHidden: true
		},
		propTimeDisabled: {
			$type: "application/x-time",
			$isMandatory: false,
			$title: "Time $isDisabled: true",
			$isDisabled: true
		},

		propInt: {
			$type: "application/x-integer",
			$isMandatory: false,
			$title: "Integer ($isHidden: false)",
			$isHidden: false
		},
		propIntHide: {
			$type: "application/x-integer",
			$isMandatory: false,
			$title: "Integer ($isHidden: true)",
			$isHidden: true
		},
		propIntDisabled: {
			$type: "application/x-integer",
			$isMandatory: false,
			$title: "Integer ($isDisabled: true)",
			$isDisabled: true
		},
		propIntReadOnly: {
			$type: "application/x-integer",
			$isMandatory: false,
			$title: "Integer ($isReadOnly: true)",
			$isReadOnly: true
		},
		propDecimal: {
			$type: "application/x-decimal",
			$isMandatory: false,
			$title: "Decimal $isHidden: false",
			$isHidden: false
		},
		propDecimalHide: {
			$type: "application/x-decimal",
			$isMandatory: false,
			$title: "Decimal $isHidden: true",
			$isHidden: true
		},
		propDecimalDisabled: {
			$type: "application/x-decimal",
			$isMandatory: false,
			$title: "Decimal $isDisabled: true",
			$isDisabled: true
		},
		propDecimalReadOnly: {
			$type: "application/x-decimal",
			$isMandatory: false,
			$title: "Decimal $isReadOnly: true",
			$isReadOnly: true
		},

		propReal: {
			$type: "application/x-real",
			$isMandatory: false,
			$title: "Real"
		},

		propBoolean: {
			$type: "application/x-boolean",
			$isMandatory: false,
			$title: "Boolean"
		},
		propBooleanHidden: {
			$type: "application/x-boolean",
			$isMandatory: false,
			$title: "Boolean ($isHidden: true)",
			$isHidden: true
		},
		propBooleanDisabled: {
			$type: "application/x-boolean",
			$isMandatory: false,
			$title: "Boolean ($isDisabled: true)",
			$isDisabled: true
		},

		propChoice: {
			$type: "application/x-choice",
			$isMandatory: false,
			$title: "Choice",
			//$format: "$radios",
			$value: {
				$enum: [{
					$title: "Mr.",
					$value: "mr"
				}, {
					$title: "Mrs.",
					$value: "mrs"
				}],
				$type: "application/x-string"
			}
		},
		propChoiceHidden: {
			$type: "application/x-choice",
			$isMandatory: false,
			$title: "Choice($isHidden: true)",
			$isHidden: true,
			//$format: "$radios",
			$value: {
				$enum: [{
					$title: "Mr.",
					$value: "mr"
				}, {
					$title: "Mrs.",
					$value: "mrs"
				}],
				$type: "application/x-string"
			}
		},
		propChoiceDisabled: {
			$type: "application/x-choice",
			$isMandatory: false,
			$title: "Choice ($isDisabled: true)",
			$isDisabled: true,
			//$format: "$radios",
			$value: {
				$enum: [{
					$title: "Mr.",
					$value: "mr"
				}, {
					$title: "Mrs.",
					$value: "mrs"
				}],
				$type: "application/x-string"
			}
		},
		propQuantity: {
			$title: "Quantity ($unit $isExcluded: false)",
			$type: "application/x-quantity",
			$value: {
				$title: "{$value} {$unit}",
				$type: "application/x-decimal",
				$scale: 9,
				$precision: 2,
				$format: "0.00"
			},
			$unit: "propStringUnit"
		},
		propStringUnit: {
			$type: "application/x-string",
			$isMandatory: false,
			$isExcluded: false,
			$title: "Unit for quantity ($isExcluded: false)"
		},
		propQuantityExcluded: {
			$title: "Quantity($unit $isExcluded: true)",
			$type: "application/x-quantity",
			$value: {
				$title: "{$value} {$unit}",
				$type: "application/x-decimal",
				$scale: 9,
				$precision: 2,
				$format: "0.00"
			},
			$unit: "propStringUnitExcluded"
		},
		propStringUnitExcluded: {
			$type: "application/x-string",
			$isMandatory: false,
			$isExcluded: true,
			$title: "Unit for quantity ($isExcluded: true)"
		}

	},
	$relations: {},
	$articles: {},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			// template when creating a new record
			var i = 15;
			var tpl = {
				$uuid: i,
				propString: "Simple String=" + i,
				propDate: "2014-03-" + i,
				propDateTime: "2014-06-" + i + "T12:45:" + (i + 44) + ".234Z",
				propTime: "15:45:" + (i + 34),
				propInt: (i * 1000 + i * 10),
				propDecimal: Math.sqrt(i * 1000 + i * 10),
				propReal: Math.sqrt(i * 1000 + i * 30),
				propBoolean: (_switch = !_switch)
			};

			deferred.resolve(tpl);
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			// only works because op.$key is equal the array index and equal the $uuid
			deferred.resolve(_data[op.$key]);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _data
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};