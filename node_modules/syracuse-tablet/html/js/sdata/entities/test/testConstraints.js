"use strict";

var _data = [];
var _switch = false;
for (var i = 0; i < 10; i++) {
	_data.push({
		$uuid: i,
		propString: "Test " + i,
		propString2: "Some text " + i,
		propString3: "Fill me " + i,
		propInt: (i * 1000 + i * 10),
		propInt2: (i * 1000 + i * 100),
		propDecimal: Math.sqrt(i * 1000 + i * 10),
		propDecimal2: Math.sqrt(i * 1000 + i * 100),
		propDecimal3: Math.sqrt(i * 1000 + i * 110),
		propDecimal4: Math.sqrt(i * 1000 + i * 120),
		propQuantity: i * 123,
		propStringUnit: "EUR"
	});
}

exports.entity = {
	$entityName: "testConstraints",
	$properties: {
		propString: {
			$title: "Test: $pattern=Test.*\\d$",
			$type: "application/x-string",
			$isMandatory: true,
			$pattern: "Test.*\\d$"
		},
		propString2: {
			$title: "Test: $minLength=5, $maxLength=15",
			$type: "application/x-string",
			$isMandatory: true,
			$minLength: 5,
			$maxLength: 15
		},
		propString3: {
			$title: "Test: $minLength=5, $maxLength=15, $pattern=Fill me.*\\d$",
			$type: "application/x-string",
			$isMandatory: true,
			$pattern: "Fill me.*\\d$",
			$minLength: 5,
			$maxLength: 15
		},
		propInt: {
			$title: "Test: $minimum=100, $maximum=200",
			$type: "application/x-integer",
			$isMandatory: true,
			$minimum: 100,
			$maximum: 200
		},
		propInt2: {
			$title: "Test: $exclusiveMinimum=100, $exclusiveMaximum=200",
			$type: "application/x-integer",
			$isMandatory: true,
			$exclusiveMinimum: 100,
			$exclusiveMaximum: 200
		},
		propDecimal: {
			$title: "Test: $format=0.0000",
			$type: "application/x-decimal",
			$isMandatory: true,
			$format: "0.0000"
		},
		propDecimal2: {
			$title: "Test: $format=0.00",
			$type: "application/x-decimal",
			$isMandatory: true,
			$format: "0.00"
		},
		propDecimal3: {
			$title: "Test: $precision=10",
			$type: "application/x-decimal",
			$isMandatory: true,
			$precision: 10
		},
		propDecimal4: {
			$title: "Test: $scale=3",
			$type: "application/x-decimal",
			$isMandatory: true,
			$scale: 3,
			$format: "0.00000"
		},
		propQuantity: {
			$title: "Test: $format=0.00",
			$isMandatory: true,
			$type: "application/x-quantity",
			$value: {
				$title: "{$value} {$unit}",
				$type: "application/x-decimal",
				$scale: 9,
				$precision: 2,
				$format: "0.00"
			},
			$unit: "propStringUnit"
		},
		propStringUnit: {
			$title: "Unit for quantity",
			$type: "application/x-string",
			$isMandatory: false,
			$isExcluded: true
		},
	},
	$relations: {},
	$articles: {},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			// template when creating a new record
			var i = 15;
			var tpl = {
				$uuid: i,
				propString: "Simple String=" + i,
				propInt: (i * 1000 + i * 10),
				propDecimal: Math.sqrt(i * 1000 + i * 10),
			};
			deferred.resolve(tpl);
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			// only works because op.$key is equal the array index and equal the $uuid
			deferred.resolve(_data[op.$key]);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _data
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};