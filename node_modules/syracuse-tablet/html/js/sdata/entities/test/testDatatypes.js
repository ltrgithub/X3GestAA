"use strict";

var _data = [];
var _switch = false;
for (var i = 0; i < 10; i++) {
	_data.push({
		$uuid: i,
		propString: "Simple String=" + i,
		propDate: "2014-03-" + (i + 20),
		propDateTime: "2014-06-" + (i + 10) + "T12:45:" + (i + 44) + ".123Z",
		propTime: "15:45:" + (i + 34),
		propTimeShort: "15:45:" + (i + 34),
		propInt: (i * 1000 + i * 10),
		propDecimal: Math.sqrt(i * 1000 + i * 10),
		propReal: Math.sqrt(i * 1000 + i * 30),
		propBoolean: (_switch = !_switch),
		propChoice: "mr",
		propQuantity: i * 123,
		propStringUnit: "EUR",
		propStringMandatory: "Mandatory",
		propDecimalMandatory: "",
		propStringMinMax: "",
		propStringMinMaxValue: "",
		propStringPattern: "",
		"salesOp": "75.0000000000",
		"salesValue": "133000.0000000000",
		"salesValueMin": "100000.0000000000",
		"salesValueMax": "150000.0000000000"
	});
}

var _entity = {
	$entityName: "testDataTypes",
	$properties: {
		propString: {
			$type: "application/x-string",
			$isMandatory: false,
			$title: "My name (max len 25)",
			$maxLength: 25
		},
		propStringMandatory: {
			$type: "application/x-string",
			$isMandatory: true,
			$title: "String Madatory"
		},
		propStringMinMax: {
			$type: "application/x-string",
			$title: "String MinMaxLength(3-5)",
			$minLength: 3,
			$maxLength: 5
		},
		propStringMinMaxValue: {
			$type: "application/x-integer",
			$isMandatory: false,
			$title: "Integer MinMaxValue(3-50)",
			$minimun: "3",
			$maximun: "50"
		},
		propStringPattern: {
			$type: "application/x-string",
			$title: "Pattern",
			$maxLength: 40
		},
		propDate: {
			$type: "application/x-date",
			$isMandatory: false,
			$title: "Date"
		},

		propDateTime: {
			$type: "application/x-datetime",
			$isMandatory: false,
			$title: "Date+Time"
		},
		propTime: {
			$type: "application/x-time",
			$isMandatory: false,
			$title: "Time long",
			$format: "TT"
		},
		propTimeShort: {
			$type: "application/x-time",
			$isMandatory: false,
			$title: "Time",
		},
		propInt: {
			$type: "application/x-integer",
			$isMandatory: false,
			$title: "Integer (1-7000 Max)",
			$minimun: "1",
			$maximun: "7000"
		},

		propDecimalMandatory: {
			$type: "application/x-decimal",
			$isMandatory: true,
			$title: "Decimal mandatory(2.4)",
			$scale: 2,
			$precision: 4,
			$format: "0.00"
		},
		propDecimal: {
			$type: "application/x-decimal",
			$isMandatory: false,
			$title: "Decimal(4.7)",
			$scale: 4,
			$precision: 7,
			$format: "0.0000"
		},
		propReal: {
			$type: "application/x-real",
			$isMandatory: false,
			$title: "Real",
		},

		propBoolean: {
			$type: "application/x-boolean",
			$isMandatory: false,
			$title: "Boolean"
		},
		propChoice: {
			$type: "application/x-choice",
			$isMandatory: false,
			$title: "Choice",
			//$format: "$radios",
			$value: {
				$enum: [{
					$title: "Mr.",
					$value: "mr"
				}, {
					$title: "Mrs.",
					$value: "mrs"
				}],
				$type: "application/x-string"
			}
		},
		propQuantity: {
			$title: "Quantity",
			$type: "application/x-quantity",
			$value: {
				$title: "{$value} {$unit}",
				$type: "application/x-decimal",
				$scale: 9,
				$precision: 2,
				$format: "0.00"
			},
			$unit: "propStringUnit"
		},
		propStringUnit: {
			$type: "application/x-string",
			$isMandatory: false,
			$isExcluded: true,
			$title: "Unit for quantity"
		},
		propStringM: {
			$type: "application/x-string",
			$isMandatory: true,
			$title: "My name"
		},
		propDateM: {
			$type: "application/x-date",
			$isMandatory: true,
			$title: "Date (Mandatory)"
		},
		propDateTimeM: {
			$type: "application/x-datetime",
			$isMandatory: true,
			$title: "Date+Time (Mandatory)"
		},
		propTimeM: {
			$type: "application/x-time",
			$isMandatory: true,
			$title: "Time (Mandatory)",
		},
		propIntM: {
			$type: "application/x-integer",
			$isMandatory: true,
			$title: "Integer (Mandatory)",
		},
		propDecimalM: {
			$type: "application/x-decimal",
			$isMandatory: true,
			$title: "Decimal (Mandatory)",
		},
		propRealM: {
			$type: "application/x-real",
			$isMandatory: true,
			$title: "Real (Mandatory)",
		},
		propBooleanM: {
			$type: "application/x-boolean",
			$isMandatory: true,
			$title: "Boolean (Mandatory)"
		},
		"salesOp": {
			"$title": "sale opportunity",
			"$type": "application/x-decimal",
			"$capabilities": "sort,filter"
		},
		"salesValue": {
			"$title": "sales value",
			"$type": "application/x-decimal",
			"$capabilities": "sort,filter"
		},
		"salesValueMin": {
			"$title": "sales value min",
			"$type": "application/x-decimal",
			"$capabilities": "sort,filter"
		},
		"salesValueMax": {
			"$title": "sales value max",
			"$type": "application/x-decimal",
			"$capabilities": "sort,filter"
		}
	},
	$relations: {},
	$articles: {
		$details: {
			"$layoutType": "stack",
			$items: []
		}
	},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			// template when creating a new record
			var i = 15;
			var tpl = {
				$uuid: i,
				propString: "Simple String=" + i,
				propDate: "2014-03-" + i,
				propDateTime: "2014-06-" + i + "T12:45:" + (i + 44) + ".234Z",
				propTime: "15:45:" + (i + 34),
				propInt: (i * 1000 + i * 10),
				propDecimal: Math.sqrt(i * 1000 + i * 10),
				propReal: Math.sqrt(i * 1000 + i * 30),
				propBoolean: (_switch = !_switch)
			};

			deferred.resolve(tpl);
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			// only works because op.$key is equal the array index and equal the $uuid
			deferred.resolve(_data[op.$key]);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _data
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};

// specify $articles.$detail value
var propertiesArr = Object.keys(_entity.$properties);
// append types
propertiesArr.forEach(function(prop, index) {
	if (prop != "salesOp" && prop != "salesValue" && prop != "salesValueMin" && prop != "salesValueMax") {
		_entity.$articles.$details.$items.push({
			$bind: prop
		});
	}
});

// append types with gauge
var gaugeTestArray = [{
	"$bind": "salesOp",
	/* GAUGE 1 */
	"$gauge": {}
}, {
	"$bind": "salesOp",
	/* GAUGE 2 */
	"$gauge": {
		"segments": [{
			"propStart": 0,
			"propEnd": 0.75
		}, {
			"propStart": 0.75,
			"propEnd": 0.85
		}, {
			"propStart": 0.85,
			"propEnd": 1
		}]
	}
}, {
	"$bind": "salesValue",
	/* GAUGE 3 */
	"$gauge": {
		"$bindMin": "salesValueMin",
		"$bindMax": "salesValueMax",
		"segments": [{
			"propStart": 0,
			"propEnd": 0.75
		}, {
			"propStart": 0.75,
			"propEnd": 0.85
		}, {
			"propStart": 0.85,
			"propEnd": 1
		}]
	}
}, {
	"$bind": "salesValue",
	/* GAUGE 4 */
	"$gauge": {
		"$bindMin": "salesValueMin",
		"$bindMax": "salesValueMax",
		"segments": [{
			"valStart": 100000,
			"valEnd": 130000,
			"color": "#DF5353"
		}, {
			"valStart": 130000,
			"valEnd": 140000
		}, {
			"valStart": 140000,
			"valEnd": 150000,
			"color": "#55BF3B"
		}]
	}
}];

for (var mm = 0, pp = gaugeTestArray.length; mm < pp; mm++) {
	_entity.$articles.$details.$items.push(gaugeTestArray[mm]);
}


exports.entity = _entity;