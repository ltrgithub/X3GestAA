"use strict";

var _data = [];
var _switch = false;
for (var i = 0; i < 10; i++) {
	_data.push({
		$uuid: i,
		propString: "Simple String=" + i,
		propDate: "2014-03-" + (i + 20),
		propDatetime: "2014-06-" + (i + 10) + " 12:45:" + (i + 44),
		propTime: "15:45:" + (i + 34),
		propInt: (i * 1000 + i * 10),
		propDecimal: Math.sqrt(i * 1000 + i * 10),
		propReal: Math.sqrt(i * 1000 + i * 30),
		propBoolean: (_switch = !_switch)
	});
}

exports.entity = {
	$entityName: "testDataTypes",
	$properties: {
		propString: {
			$type: "application/x-string",
			$title: "My name"
		},
		propDate: {
			$type: "application/x-date",
			$title: "Date"
		},
		propDateTime: {
			$type: "application/x-datetime",
			$title: "Date+Time"
		},
		propTime: {
			$type: "application/x-time",
			$title: "Time",
		},
		propInt: {
			$type: "application/x-integer",
			$title: "Integer",
		},
		propDecimal: {
			$type: "application/x-decimal",
			$title: "Decimal",
		},
		propReal: {
			$type: "application/x-real",
			$title: "Real",
		},
		propBoolean: {
			$type: "application/x-boolean",
			$title: "Boolean"
		}
	},
	$relations: {},
	$articles: {},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve(_data[op.$key]);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _data
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};