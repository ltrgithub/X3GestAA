"use strict";

var _data = [{
	part: "Gear",
	value: 50,
	revenue: 40,
	margin: 10
}, {
	part: "Motor",
	value: 60,
	revenue: 40,
	margin: 20
}, {
	part: "Head drive",
	value: 60,
	revenue: 80,
	margin: -20
}, {
	part: "Handwheel",
	value: 70,
	revenue: 90,
	margin: 10
}, {
	part: "Crank",
	value: 70,
	revenue: 70,
	margin: 0
}, {
	part: "Saddle",
	value: 80,
	revenue: 30,
	margin: 50
}, {
	part: "Base",
	value: 20,
	revenue: 40,
	margin: -20
}, {
	part: "Spindle",
	value: 10,
	revenue: 0,
	margin: 10
}];


exports.entity = {
	$entityName: "testCharts",
	$properties: {
		part: {
			$type: "application/x-string",
			$title: "Item"
		},
		value: {
			$type: "application/x-decimal",
			$title: "Value",
			$format: "0.0000"
		},
		revenue: {
			$type: "application/x-decimal",
			$title: "Revenue",
			$format: "0.0000"
		},
		margin: {
			$type: "application/x-decimal",
			$title: "Margin",
			$format: "0.0000"
		}
	},

	// invoked after protype generation to do adjustments
	$prototype: function(proto) {

		// Add some chart information in $query prototype
		var res = proto.$properties && proto.$properties.$resources;
		if (res) {
			res.$axes = [{
				$title: "Item",
				$hierarchies: [
					["part"]
				]
			}, {
				$hierarchies: [
					["$measures"]
				]
			}];
			res.$cube = {
				$title: "Sales overview",
				$hierarchies: {
					part: {
						$properties: ["part"]
					}
				},
				$measures: {
					value: {},
					revenue: {},
					margin: {}
				}
			};
		}
	},
	$relations: {},
	$articles: {},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve(_data[op.$key]);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _data
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};