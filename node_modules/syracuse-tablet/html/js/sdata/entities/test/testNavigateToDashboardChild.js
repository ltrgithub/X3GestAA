"use strict";

var _data = [];

for (var i = 0; i < 10; i++) {
	for (var j = 0; j < 10; j++) {
		_data.push({
			$uuid: (i * 10) + j,
			name: "Customer " + (i * 10) + j,
			desc: "Belongs to group " + i,
			group: "" + i
		});
	}
}

exports.entity = {
	$entityName: "testNavigateToDashboard",
	$properties: {
		name: {
			$title: "Customer name",
			$type: "application/x-string",
		},
		desc: {
			$title: "Description",
			$type: "application/x-string",
		},
		group: {
			$title: "Customer group",
			$type: "application/x-string",
		},
	},
	$relations: {},
	$articles: {},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			// template when creating a new record
			var i = 15;
			var tpl = {
				$uuid: i,
				propString: "Simple String=" + i,
				propInt: (i * 1000 + i * 10),
				propDecimal: Math.sqrt(i * 1000 + i * 10),
			};
			deferred.resolve(tpl);
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			// only works because op.$key is equal the array index and equal the $uuid
			deferred.resolve(_data[op.$key]);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _data
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};