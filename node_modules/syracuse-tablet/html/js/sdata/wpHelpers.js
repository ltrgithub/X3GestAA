"use strict";

var modules = require('syracuse-tablet/html/js/common/modules');
var protoHelpers = require('syracuse-tablet/html/js/sdata/protocolHelpers');
var sdataStatic = require('syracuse-tablet/html/js/sdata/sdataStatic');
var ajax = require('syracuse-tablet/html/js/common/ajax');
var metaDataCache = require('syracuse-tablet/html/js/sdata/cache/metaDataCache');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var gadget = require('syracuse-tablet/html/js/controls/vignette/gadget');

var Dataset = require('syracuse-tablet/html/js/sdata/dataset').Dataset;
var Prototype = require('syracuse-tablet/html/js/sdata/prototype').Prototype;

var locale = require('syracuse-tablet/html/js/helpers/locale');
var navigationPageStack = require('syracuse-tablet/html/js/app/navigationPageStack');
var utils = require('syracuse-tablet/html/js/helpers/utils');
/**
 * Gets current user and role and reads/constructs welcome page pageData
 */
exports.fetchWelcomePageData = function(options) {
		var up = modules.get("appController").App.getCurrentUserProfile();
		var opts = options || {};
		opts.user = up.user.$uuid;
		opts.userRole = up.selectedRole.$uuid;
		opts.isPersonal = opts.isPersonal || (!opts.uuid);
		return _fetchWelcomePageData(opts);
	}
	/**
	 * 
	 */
function _fetchWelcomePageData(opts) {
	var prototypeJson;
	var datasetJson;
	var $resources;
	var $url = _getHomeDashboardUrl(opts);
	var noAutoSave = false;
	var meta;
	prototypeJson = sdataStatic.getMobileDashboardProto();
	var fetchDashboard = $.Deferred();
	ajax.request($url, "GET")
		//  Fake offline for tests
		//	.then(function(result) {
		//		return $.smReject({
		//			offline: true
		//		});
		//	})
		.then(function(result) {
			fetchDashboard.resolve(result.data.dashboard);
		})
		.fail(function(result) {
			// When we are not up to date with the server, we do not auto save a personal dashboard later in the process
			noAutoSave = true;

			if (opts.isPersonal && result.offline) {
				_readWelcomeDashboardClient(opts.user, opts.userRole)
					.then(function(result) {
						fetchDashboard.resolve(result);
					})
					.fail(function() {
						fetchDashboard.resolve(null);
					});
			} else {
				fetchDashboard.reject(result);
			}
		});

	return fetchDashboard.then(function(dashboard) {
			$resources = dashboard || {};
			return _getDefaultDataHome($resources.content, opts.isPersonal)
		})
		.then(function(datasetJson) {
			return _appendTestHomeDataset(datasetJson)
		})
		.then(function(dataset) {
			datasetJson = dataset
			return _getHomePage($resources, datasetJson);
		})
		.then(function(page) {
			meta = page.meta || {};
			meta.uuid = opts.isPersonal ? null : (opts.currentUuid ? opts.currentUuid : opts.uuid); //to keep original uuid in case of replacement
			meta.description = opts.description || meta.description; // to keep original desc in case of replacement current dashboard by a template
			// Special for welcome page since here not all information is yet availabe and also not needed
			datasetJson.$clientContext = {
				// $mobileProtocol: $mobileProtocol, Does not matter, protocol is selected by welcome page
				$mobileEndpoint: _getEndpoint(),
				// $mobileApplication: $mobileApplication, Does not matter, application is not yet selected 
			};
			return protoHelpers.checkTransform($url, prototypeJson, datasetJson, page);
		})
		.then(function(pageDataTransformed) {
			var pageData = {};
			pageData.prototype = new Prototype(pageDataTransformed.prototypeJson);
			pageData.dataset = new Dataset(pageDataTransformed.datasetJson, pageData.prototype);
			pageData.isWorkingCopy = false;
			pageData.$url = $url;
			pageData.$originalUrl = $url; // Will be overriden by pageFactory to contain original url before applying filter/sort
			pageData.page = pageDataTransformed.page;
			pageData.meta = meta;
			pageData.isPersonal = opts.isPersonal;

			if (!$resources.content || !_havePersonalDashboard($resources.$views)) { // Did we create a new default one
				if (noAutoSave !== true && opts.isPersonal) {
					var data = exports.createWelcomeDashboardFromPageData(pageData, true);
					exports.saveWelcomeDashboard(data);
				}
			} else if (opts.isPersonal) {
				var data = exports.createWelcomeDashboardFromPageData(pageData, true);
				_saveWelcomeDashboardClient(data) //in case of database cleaned or other device or other browser
			}
			return pageData;
		})
}

function _havePersonalDashboard(availableViews) {
	var views = availableViews || []
	return views.some(function(view) {
		return view.$isPersonal;
	})
}

function _appendTestHomeDataset(dataset) {
	//Only in dev mode
	if (!jsutils.isDvlpVersion()) {
		return $.smResolve(dataset)
	}
	var gadget = {
		$uuid: "$MOCK_mobileDashboard_Gadget",
		$title: "Test applications",
		$url: "{$hostPort}/mobile2/$client/$local/$dataset/mobileDashboard('MOCK')",
		$method: "GET",
		$type: "$application"
	};
	dataset.$mobileGadgets[gadget.$uuid] = gadget;
	dataset.vignettes.push({
		local: true,
		gadget: {
			$uuid: gadget.$uuid
		},
		$uuid: "$MOCK_mobileDashboard_Vignette",
		persistentId: "$MOCK_mobileDashboard_Vignette"
	});
	return $.smResolve(dataset);
}

function _getDefaultDataHome(content, isPersonal) {
	return metaDataCache.getApplicationsList()
		.then(function(appList) {
			if (isPersonal) { // On personal welcome page, only show valid apps, for templates, we do not filter
				appList = exports.filterApps(appList);
			}
			//Get a compatible datasetjson or build a dataset json from applist
			return _checkHomeDataset(appList, content);
		});
}
exports.filterApps = function(appList) {
	var up = modules.get("appController").App.getCurrentUserProfile();
	var validApps = [];
	var curEp = up.selectedEndpoint.code;
	var curRole = up.selectedRole.code;

	appList.forEach(function(app) {
		var valid = app.endpoints.length === 0 || app.endpoints.some(function(ep) {
			return [ep.application, ep.contract, ep.dataset].join(".") === curEp;
		});
		valid = valid && (app.roles.length === 0 || app.roles.some(function(role) {
			return role.code === curRole;
		}));
		if (valid) {
			validApps.push(app);
		}
	});

	return validApps;
}

function _getHomePage($resources, datasetJson) {
	var article = $resources.content ? $resources.content.$article : null;
	// home article from dashboard content (extended with local test) or build a default
	return {
		$article: _homeArticle(article, datasetJson),
		$views: $resources.$views,
		$roles: $resources.roles || [],
		meta: {
			"description": $resources.description || locale.text("welcome.mydashboard")
		}
	}
}

function _homeArticle($article, datasetJson) {
	if (!$article) {
		return _defaultHomeArticle(datasetJson);
	}

	// Append test vignettes
	var $items = [];
	datasetJson.vignettes.forEach(function(v) {
		if (v.local) {
			$items.push({
				"$layoutType": "tile",
				"$title": "",
				"$size": "medium",
				"$items": [{
					"$bind": v.persistentId
				}]
			})
		}
	});
	if ($items.length > 0) {
		$article.$items.unshift({
			"local": true,
			"$layoutType": "hubgroup",
			"$title": "Test applications",
			"$items": $items
		})
	}
	return $article;
}

function _defaultHomeArticle(datasetJson) {
	var uuid = utils.UUID();
	var article = {
		"$layoutType": "hub",
		"$items": [{
			"local": true,
			"$layoutType": "hubgroup",
			"$title": "Test applications",
			"$items": []
		}, {
			"$layoutType": "hubgroup",
			"$title": "{@" + uuid + "}",
			"$items": []
		}],
		"$localization": {}

	};
	utils.setLocalization(article.$localization, uuid, "All Available applications");
	// Add client side test gadgets if there are some in the dataset
	var i;
	datasetJson.vignettes.forEach(function(v) {
		i = v.local ? 0 : 1
		article.$items[i].$items.push({
			"$layoutType": "tile",
			"$size": "medium",
			"$items": [{
				"$bind": v.persistentId
			}]
		})
	})
	if (article.$items[0].$items.length === 0) {
		article.$items.shift();
	}
	return article;
}

function _checkHomeDataset(appList, dashboardContent) {
	var dataset = _ensureHomeDatasetCompatibility(dashboardContent, appList);
	if (dataset) {
		return dataset;
	}
	var datasetJson = {
		vignettes: [],
		$mobileGadgets: {}
	};
	var endpoint = modules.get("appController").App.getCurrentEndpoint();
	appList.forEach(function(app) {
		var vignette = {
			"persistentId": app.$uuid,
			"gadget": {
				"$uuid": app.$uuid,
			}
		};
		datasetJson.vignettes.push(vignette);
		datasetJson.$mobileGadgets[app.$uuid] = {
			"$type": "$application",
			"$title": app.title,
			"icon": app.iconName,
			"applicationName": app.applicationName,
		};
	});
	return datasetJson;
}

function _ensureHomeDatasetCompatibility(datasetJson, appList) { // datasetJson could be null, content V11 or content V12(woco)
	var appName;
	var compatibleDatasetJson = {
		$mobileGadgets: {},
		vignettes: []
	};
	if (!datasetJson) return null;
	var appTitleList = _getAppListTitle(appList);
	if (datasetJson.$mobileGadgets) {
		datasetJson.vignettes.forEach(function(vi) {
			if (_isVignetteAvailable(datasetJson.$mobileGadgets[vi.gadget.$uuid], appList)) {
				compatibleDatasetJson.vignettes.push(vi);
				compatibleDatasetJson.$mobileGadgets[vi.gadget.$uuid] = datasetJson.$mobileGadgets[vi.gadget.$uuid];
				if (compatibleDatasetJson.$mobileGadgets[vi.gadget.$uuid].$type === "$application") {
					appName = compatibleDatasetJson.$mobileGadgets[vi.gadget.$uuid].applicationName;
					compatibleDatasetJson.$mobileGadgets[vi.gadget.$uuid].$title = appTitleList[appName] ? appTitleList[appName].$title : compatibleDatasetJson.$mobileGadgets[vi.gadget.$uuid].$title
				}
			}
		})
		return compatibleDatasetJson;
	}
	var endpoint = modules.get("appController").App.getCurrentEndpoint();
	Object.keys(datasetJson.$vignettes).forEach(function(key) {
		if (_isVignetteAvailable(datasetJson.$gadgets[key], appList)) {
			compatibleDatasetJson.vignettes.push({
				"persistentId": key,
				"gadget": {
					"$uuid": key
				}
			});
			compatibleDatasetJson.$mobileGadgets[key] = datasetJson.$gadgets[key];
			if (compatibleDatasetJson.$mobileGadgets[key].$type === "$application") {
				appName = compatibleDatasetJson.$mobileGadgets[key].applicationName;
				compatibleDatasetJson.$mobileGadgets[key].$title = appTitleList[appName] ? appTitleList[appName].$title : compatibleDatasetJson.$mobileGadgets[key].$title
			}
		}
	})
	return compatibleDatasetJson;
}

function _getAppListTitle(appList) {
	var appListTitle = {};
	appList.forEach(function(app) {
		appListTitle[app.applicationName] = {
			"$title": app.title,
			"$description": app.description
		}
	})
	return appListTitle;
}

function _isVignetteAvailable(gadget, appList) {
	//check if application exist
	var appMap = {};
	appList.forEach(function(app) {
		appMap[app.applicationName] = app
	})
	return (gadget.$type !== "$application" || (gadget.$type === "$application" && appMap[gadget.applicationName]))
}

/**
 * Compute full payload for saving a welcome dashboard
 * Json will differ depending on if it's a template or a personal dashboard
 */
function _computeWelcomePageData(content, isPersonal, roles, meta) {
	var data = {
		"description": meta.description || locale.text("welcome.mydashboard"),
		"clientId": "",
		"content": content,
		"isPersonal": isPersonal,
		"uuid": meta.uuid
	};

	if (isPersonal) {
		var up = modules.get("appController").App.getCurrentUserProfile();
		data.user = {
			"$uuid": up.user.$uuid
		};
		data.role = {
			"$uuid": up.selectedRole.$uuid
		};
	} else if (roles) {
		data.roles = roles;
	} else {
		// Should not happen
	}
	return data;
}

/**
 * Compute content json of welcome page defined by page data.
 * returned json has same structure, no matter if template or personal dashboard
 */
function _computeWelcomePageContent(pageData) {
	var $gadgets = {},
		$article = {},
		vignettes = [];
	pageData.dataset.json.$vignettes.forEach(function(vi) {
		if (!vi.local) {
			vignettes.push(vi);
			$gadgets[vi.gadget.$uuid] = pageData.dataset.json.$mobileGadgets[vi.gadget.$uuid];
		}
	});
	$article.$layoutType = pageData.page.$article.$layoutType,
		$article.$items = [];
	pageData.page.$article.$items.forEach(function(item) {
		if (!item.local) {
			$article.$items.push(item)
		}
	});
	$article.$localization = pageData.page.$article.$localization;
	var content = {
		"$dashboardName": "$welcomeDashboard",
		"$title": "Home",
		"$article": $article,
		"vignettes": vignettes,
		"$mobileGadgets": $gadgets,
	}
	return content;
}

exports.welcomePageToCommands = function(data) {
	var vignettes = [];

	// Find all gadgets shown on page
	function _walk(article) {
		if (article.$bind) {
			var vignette = data.prototype.json.$properties[article.$bind];
			if (vignette && vignette.$type === "application/x-vignette-link") {
				vignettes.push(vignette);
			}
		}
		if (article.$items) {
			article.$items.forEach(_walk);
		}
	}
	_walk(data.page.$article);

	var commands = [];
	vignettes.forEach(function(vignette) {
		var g = gadget.createGadget(new Prototype(vignette));
		if (g) {
			var title = g.data("$title");
			var link = g.getLink();
			if (link && title) {
				commands.push({
					title: title,
					page: link
				});
			}
		}
	});
	return commands;
	/* commands is like:
	[{
		title: "Kunden",
		page: {
			"$url": "{$hostPort}/mobile2/$client/$local/$dataset/mobileDashboard('MY_CUSTOMERS')",
			"$method": "GET"

		}
	}, ...];
	*/
}

function _getEndpoint() {
	return modules.get("appController").App.getDefaultEndpoint();
}

function _getHomeDashboardUrl(opts) {
	var url = "/mobile2/syracuse/collaboration/syracuse/welcomeDashboards/$service/availableDashboard?representation=mobileDashboard.$details";
	url += opts.user ? "&user=" + opts.user : "";
	url += opts.userRole ? "&role=" + opts.userRole : "";
	url += (opts.uuid ? "&uuid=" + opts.uuid : "");
	return protoHelpers.getHostPort() + url;
}

/**
 * Uses pageData of the client side rendered Welcome dashboard to construct the json data
 * that will be saved on the server
 * 
 * Usually used before saveWelcomeDashboard
 */
exports.createWelcomeDashboardFromPageData = function(pageData, isPersonal) {
	var content = _computeWelcomePageContent(pageData);
	var data = _computeWelcomePageData(content, isPersonal, pageData.page.$roles, pageData.meta);
	return data;
}

/**
 * 
 * Save a welcome dashboard on server and client (if it's isPersonal = true)
 * 
 * "data" can be constructed using createWelcomeDashboardFromPageData
 * 
 * data: {
 *   content: {
 *     $article: ...
 *     $mobileGadgets: ...
 *     $dashboardName: ...
 *     $vignettes: ...
 *   },
 *   $dashboardName: ...
 *   description: ...
 *   isPersonal: ...
 *   role: {
 *     $uuid: ...
 *   },
 *   user: {
 *     $uuid: ...
 *   }   
 * }
 */
exports.saveWelcomeDashboard = function(data) {
	return _saveWelcomeDashboardClient(data)
		.then(function() {
			return _saveWelcomeDashboardServer(data).then(function(data) {
				return data;
			});
		});
}

function _saveWelcomeDashboardClient(data) {
	if (!data.isPersonal) {
		return $.smResolve();
	}

	var ctx = {
		"$user": data.user.$uuid,
		"$role": data.role.$uuid,
		"$lang": "none"
	};
	return modules.get("storage").getStorage().put({
		$context: ctx,
		$collection: "$welcomeDashboard",
		$endpoint: "$local",
		$key: ctx.$user + "_" + ctx.$role,
		$data: data
	});
}
exports.isPagePinned = function(pageId) {
	var self = this;
	return _getCurrentWelcomeDashboard()
		.then(function(data) {
			return (data && data.content && data.content.$mobileGadgets && data.content.$mobileGadgets[pageId]) ? true : false
		})
}

function _getCurrentWelcomeDashboard() {
	// get welcome dashboarduser in cache ou read tempate on server dependinf on uuid if there on not
	var topStackElement = getTopElementStack();
	var uuid = topStackElement && topStackElement.pageCreateData && topStackElement.pageCreateData.options && topStackElement.pageCreateData.options.uuid;
	if (uuid) {
		var opts = {
			"uuid": uuid
		}
		return _fetchWelcomePageData(opts) // necessary to ensure compatibility with templates v11
			.then(function(pageData) {
				return exports.createWelcomeDashboardFromPageData(pageData, false);
			})

	} else {
		return _getWelcomeDashboarClient()
	}
}

function _getWelcomeDashboarClient() {
	var elmt = getTopElementStack();
	var up = modules.get("appController").App.getCurrentUserProfile();
	return _readWelcomeDashboardClient(up.user.$uuid, up.selectedRole.$uuid).then(function(data) {
		return data
	});
}

function getTopElementStack() {
	var stack = navigationPageStack.getMainStack();
	var items = stack.getStackItems();
	return items[0]
}

function _readWelcomeDashboardClient($userUuid, $roleUuid) {
	var ctx = {
		"$user": $userUuid,
		"$role": $roleUuid,
		"$lang": "none"
	};
	return modules.get("storage").getStorage().read({
			$context: ctx,
			$collection: "$welcomeDashboard",
			$endpoint: "$local",
			$key: ctx.$user + "_" + ctx.$role
		})
		.then(function(result) {
			if (result.$status === 1) { // OK
				return result.$data;
			} else {
				return null;
			}
		});
}
exports.getListOfRoles = function() {
	return ajax.request("/sdata/syracuse/collaboration/syracuse/welcomeDashboards/$service/listOfRoles")
		.then(function(result) {
			return (result.data && result.data.$resources) ? result.data && result.data.$resources : []
		})
}

function _saveWelcomeDashboardServer(data) {
	return ajax.request("/sdata/syracuse/collaboration/syracuse/welcomeDashboards/$service/updateDashboard", "POST", data)
		.then(function(result) {
			return result.data
		})
}
exports.deleteDashboardTemplate = function(uuid) {
	return ajax.request("/sdata/syracuse/collaboration/syracuse/welcomeDashboards/$service/deleteDashboard?uuid=" + uuid)
		.then(function(result) {
			return result.data
		})
}
exports.pinPage = function(pageData, article) {
	var self = this;
	return _getCurrentWelcomeDashboard()
		.then(function(data) {
			var gadget = _buildGadget(pageData);
			var gadgetName = pageData.id
			data.content.$mobileGadgets[gadgetName] = gadget;
			var vignette = _buildVignette(pageData);
			data.content.vignettes.push(vignette);
			var lastGroup = data.content.$article.$items[data.content.$article.$items.length - 1];
			article = article || _buildArticle(pageData);
			lastGroup.$items.push(article);
			data.content.$article.$localization = data.content.$article.$localization || {};
			var localization = _getPinLocalization(article, gadget, pageData.localization);
			Object.keys(localization).forEach(function(lang) {
				Object.keys(localization[lang]).forEach(function(key) {
					data.content.$article.$localization[lang] = data.content.$article.$localization[lang] || {}
					data.content.$article.$localization[lang][key] = localization[lang][key]
				})
			});
			return data
		}).then(function(data) {
			return exports.saveWelcomeDashboard(data)
		}).then(function(data) {
			return true
		}).fail(function() {
			return false
		})
}

function _getPinLocalization(article, gadget, localization) {
	//get in localization only necessary localization for the pinned element
	var pinlocalization = {};
	if (!localization) return pinlocalization;
	var titles = _getTitles(article, gadget);
	Object.keys(localization).forEach(function(lang) {
		Object.keys(localization[lang]).forEach(function(key) {
			if (titles["{@" + key + "}"]) {
				pinlocalization[lang] = pinlocalization[lang] || {};
				pinlocalization[lang][key] = localization[lang][key];
			}
		})
	});
	return pinlocalization;
}

function _getTitles(article, gadget) {
	if (!article) return article;
	var value = $.extend(true, {}, article);
	var titles = {};

	function _walk(value) {
		if (value == null || typeof value !== "object") return;
		Object.keys(value).forEach(function(key) {
			var v = value[key];
			if (key === "$title" && v != "") {
				titles[v] = v;
			} else {
				_walk(v);
			}
		});
	};
	_walk(value);
	if (utils.isExpression(gadget.$title)) {
		titles[gadget.$title] = gadget.$title;
	}
	return titles;
}
exports.unPinPage = function(pageData) {
	var self = this;
	var gadgetName = pageData.id;
	return _getCurrentWelcomeDashboard()
		.then(function(data) {
			delete data.content.$mobileGadgets[gadgetName];
			var vignettes = data.content.vignettes.filter(function(vignette) {
				if (vignette.persistentId !== gadgetName) {
					return true;
				}
			});
			data.content.vignettes = vignettes;
			var grp = _getHubGroup(data.content.$article, gadgetName);
			var items = grp.$items.filter(function(item) {
				if (item.$items[0].$bind !== gadgetName) {
					return true;
				}
			});
			grp.$items = items;
			return data
		}).then(function(data) {
			return exports.saveWelcomeDashboard(data)
		}).then(function(data) {
			return true
		}).fail(function() {
			return false
		})
}

function _getHubGroup($article, $bind) {
	var grp;
	$article.$items.forEach(function(hubgroup) {
		if (!grp && hubgroup.$items.length > 0) {
			hubgroup.$items.forEach(function(item) {
				if (item.$items[0].$bind === $bind) {
					grp = hubgroup;
				}
			})
		}
	});
	return grp;
};

function _buildArticle(pageData) {
	var article = {
		$bgColor: "darkgrey",
		$items: [{
			$bind: pageData.id
		}],
		$layoutType: "tile",
		$size: "medium"
	}
	_articleTitle(pageData, article.$items[0])
	return article;
}

function _buildVignette(pageData) {
	return {
		"gadget": {
			"$uuid": pageData.id
		},
		"persistentId": pageData.id,
		"displayStyle": pageData.displayStyle
	}
}

function _buildGadget(pageData) {
	if (pageData.$type == "$dashboard") {
		return _buildDashboardGadget(pageData);
	} else if (pageData.$type == "$representation") {
		return _buildRepresentationGadget(pageData);
	} else {
		return pageData;
	}
}

function _buildRepresentationGadget(pageData) {
	var gadget = {
		"$type": pageData.$type,
		"icon": pageData.icon,
		"entity": pageData.entity,
		"action": pageData.action,
		"representation": pageData.representation,
		"facet": pageData.facet,
		"keyParameter": pageData.key,
		"applicationName": pageData.applicationName,
	};
	return gadget;
	//return _gadgetTitle(pageData, gadget)
}

function _buildDashboardGadget(pageData) {
	var gadget = {
		"$type": pageData.$type,
		"icon": pageData.icon,
		"dashboardName": pageData.name,
		"applicationName": pageData.applicationName,

	};
	return gadget;
	//return _gadgetTitle(pageData, gadget)
};

function _gadgetTitle(pageData, gadget) {
	if (!utils.isExpression(pageData.$title)) {
		var uuid = utils.UUID();
		gadget.$title = "{@" + uuid + "}";
		pageData.localization = pageData.localization || {};
		utils.setLocalization(pageData.localization, uuid, pageData.$title);
	};
	return gadget
};

function _articleTitle(pageData, article) {
	if (!utils.isExpression(pageData.$title)) {
		var uuid = utils.UUID();
		article.$title = "{@" + uuid + "}";
		pageData.localization = pageData.localization || {};
		utils.setLocalization(pageData.localization, uuid, pageData.$title);
	} else {
		article.$title = pageData.$title;
	};
	return article
};
exports.isPinnedTile = function($bind) {
	return _getCurrentWelcomeDashboard()
		.then(function(data) {
			if (data && data.content && data.content.vignettes) {
				return data.content.vignettes.some(function(vig) {
					return vig.persistentId === $bind;
				})
			}
			return false;
		});
};
exports.addPinnedTile = function($article, prototype, localization) {
	var pageData = prototype.json.$item;
	var article = $.extend(true, {}, $article)
	if (article.$layoutType !== "tile") {
		article.$bgColor = "darkgrey";
		article.$layoutType = "tile";
		article.$size = "large";
	}
	if (article.$items && article.$items[0]) {
		article.$items[0].$title = _closerTitle(article.$items[0]) || article.$title;
	}
	pageData.id = article.$items[0].$bind;
	pageData.applicationName = pageData.$clientContext.$mobileApplication;
	pageData.displayStyle = "$full";
	pageData.localization = localization || {};
	return exports.pinPage(pageData, article)
};

function _closerTitle(item) {
	var title = item.$title;
	var drillDown = function(it) {
		if (!it) return
		title = it.$title || (it.$article ? it.$article.$title : "") || title;
		drillDown((it.$article && it.$article.$items) ? it.$article.$items[0] : null)
	}
	drillDown(item)
	return title;
}