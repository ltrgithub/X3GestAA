"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var clientContract = require('syracuse-tablet/html/js/sdata/entities/clientContract');
var parser = require('syracuse-tablet/html/js/sdata/sdatawhere/parser').Parser;
var whereUtils = require('syracuse-tablet/html/js/sdata/sdatawhere/whereUtils');

exports.Dispatcher = utils.defineClass(function() {}, null, {
	"getEntity": function($representation) {
		var repr = $representation && $representation.split(".");
		if (repr && repr[0] && repr[0].smStartsWith("QUERY~")) {
			repr = repr[0].split("~")[1];
		} else {
			repr = repr && repr[0];
		}
		return repr && clientContract.getEntity(repr);
	},
	"accept": function(op, data) {
		var self = this;
		var deferred = $.Deferred();
		deferred.resolve(self.getEntity(op.$representation) != null);
		return deferred.promise();
	},

	"prototype": function(op, data) {
		var deferred = $.Deferred();
		deferred.reject("Dispatcher should never request for prototypes since they are cached in the application model on client side");
		return deferred.promise();
	},

	"new": function(op, data) {
		var self = this;
		var ent = self.getEntity(op.$representation);
		return ent.$services["$new"](op, data);
	},

	"read": function(op, data) {
		var self = this;
		var ent = self.getEntity(op.$representation);
		return ent.$services["$read"](op, data);
	},

	"query": function(op, data) {
		var self = this;
		var ent = self.getEntity(op.$representation);
		var list = ent.$services["$query"](op, data);

		// Apply where condition
		if (op.$where) {
			var deferred = $.Deferred();
			list.then(function(resources) {
				var list = resources.$resources;
				var exp = parser.parse(op.$where);
				var repr = op.$representation && op.$representation.split(".");
				var $proto = clientContract.getPrototype(repr[0], repr[1]);
				var res = [];
				list.forEach(function(item, i) {
					if (whereUtils.execWhere(item, exp, $proto)) {
						res.push(item);
					}
				});
				deferred.resolve({
					$resources: res
				});
			}, function(e) {
				deferred.reject(e);
			});
			return deferred.promise();
		}
		return list;
	},

	"save": function(op, data) {
		var self = this;
		var ent = self.getEntity(op.$representation);
		return ent.$services["$save"](op, data);
	},

	"delete": function(op, data) {
		var self = this;
		var ent = self.getEntity(op.$representation);
		return ent.$services["$delete"](op, data);
	},
	"service": function() {
		var deferred = $.Deferred();
		deferred.resolve();
		return deferred.promise();
	}
});