"use strict";

var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var locale = require('syracuse-tablet/html/js/helpers/locale');

/**
 * 
 */
exports.getPageUrl = function(dataUrl, sdataResponse) {
	var repr = exports.getReprFromUrl(dataUrl);
	var baseUrl = exports.getHostPortFromUrl(dataUrl);
	var endpoint = exports.getEndpointFromUrl(dataUrl);

	if (repr === "mobileDashboard.$details" && sdataResponse) {
		repr = sdataResponse.dashboardName + ".$mobileDashboard";
		endpoint = "syracuse.collaboration.syracuse";
	}

	var url = baseUrl + "/sdata/syracuse/collaboration/syracuse/pages('" + endpoint + "." + repr + ",$page,,mobile')";
	return $.smResolve(url);
}

/**
 * Extract compute prototype url from url
 * http://localhost:8124/mobile2/x3/erp/GX3APP/$prototypes('TABCURM.$lookup')
 * return http://localhost:8124/mobile2/x3/erp/GX3APP$/prototypes('TABCURM.$lookup')
 */

exports.getPrototypeUrl = function(dataUrl) {
	var repr = exports.getReprFromUrl(dataUrl);
	var baseUrl = exports.getBaseUrlFromUrl(dataUrl);
	var url = baseUrl + "/$prototypes('" + repr + "')";
	return url;
}

/**
 * Returns rep and facet if any
 */
exports.getReprInfoFromUrl = function(url) {
	url = decodeURIComponent(url);
	var repr = /representation=(\S+?)\.(\$[a-zA-Z]+)/.exec(url);
	if (repr && repr.length > 2) {
		return {
			representation: repr[1],
			facet: repr[2]
		}
	}
	return null;
}

/**
 * Extract representation query parameter's value
 * {$baseUrl}/$workingCopies('2e3a0b34-994a-4909-8a50-e001a2deb0ad')?representation=AQMCRUDM.$edit"
 * return AQMCRUDM.$edit
 */
exports.getReprFromUrl = function(url) {
	var info = exports.getReprInfoFromUrl(url);
	if (info) {
		return info.representation + "." + info.facet;
	}
	return null;
}

/**
 * Extract endpoint from url
 * http://localhost:8124/mobile2/x3/erp/GX3APP/$prototypes('TABCURM.$lookup')
 * return x3.erp.GX3APP
 */
exports.getEndpointFromUrl = function(url) {
	if (!url.smStartsWith("http")) {
		var fullurl = "http://host";
		if (!url.smStartsWith("/")) {
			fullurl += "/";
		}
		url = fullurl + url;
	}
	var segs = url.split("/");
	var endpoint = segs.slice(4, 7).join(".");
	return endpoint;
}

/**
 * Extract baseurl from url
 * http://localhost:8124/mobile2/x3/erp/GX3APP/$prototypes('TABCURM.$lookup')
 * return http://localhost:8124/mobile2/x3/erp/GX3APP
 */
exports.getBaseUrlFromUrl = function(url) {
	var segs = url.split("/");
	var host = segs.slice(0, 7).join("/");
	return host;
}

/**
 * Extract key from url
 * http://localhost:8124/mobile2/x3/erp/GX3APP/$prototypes('TABCURM.$lookup')
 * "http://localhost:8124/mobile2/syracuse/collaboration/syracuse/mobileDashboards(dashboardName%20eq%20'STD_X3_ERP_EXPENSES_DASHBOARD')?representation=mobileDashboard.$details"
 * return TABCURM.$lookup or STD_X3_ERP_EXPENSES_DASHBOARD
 */
exports.getKeyFromUrl = function(url) {
	var keyOnly = /\('(.*?)'\)/.exec(url);
	if (keyOnly && keyOnly[1] != null) {
		return keyOnly[1];
	}

	var keyWithEq = /\((.*eq.*?)'(.*?)'\)/.exec(url);
	if (keyWithEq && keyWithEq[2] != null) {
		return keyWithEq[2];
	}
}

/**
 * Returns protocol, host and port the app is running on
 * return http://localhost:8124
 */
exports.getHostPort = function() {
	return exports.getHostPortFromUrl(window.location.href);
};

/**
 * Extract host, port and protocol from url
 * http://localhost:8124/mobile2/x3/erp/GX3APP/$prototypes('TABCURM.$lookup')
 * return http://localhost:8124
 */
exports.getHostPortFromUrl = function(url) {
	var segs = url.split("/");
	var host = segs.slice(0, 3).join("/");
	return host;
};

/**
 * Construct url on where to fetch a mobile application from
 */
exports.getMobileAppUrl = function(appName) {
	var php = exports.getHostPort();
	var appUrl = php + "/sdata/syracuse/collaboration/syracuse/mobileApplications(applicationName%20eq%20'" + appName + "')";
	return appUrl;
};

/**
 * For a given dashboard name, constructs the url from where to fetch the data
 */
exports.getLocalDashboardUrl = function(dashboardName) {
	return exports.getHostPort() + "/mobile2/$client/$local/$dataset/mobileDashboard('" + dashboardName + "')"
};
/**
 * 
 * Create the action url and payload to be send to the server
 * 
 */
exports.createActionData = function(dataset, $actionName, $action, workingCopy) {
	var actionData = {};
	if (workingCopy) {
		actionData.data = {};
		actionData.data.$actions = {};
		actionData.data.$actions[$actionName] = {
			$isRequested: true
		};
		actionData.$url = dataset.getUrl();
		// Same as desktop client
		actionData.data.$url = actionData.$url;
		actionData.data.$etag = dataset.getValue("$etag");
		actionData.data.$uuid = dataset.getValue("$uuid");
		actionData.$method = "PUT";
		if ($action.$parameters) {
			var act = actionData.data.$actions[$actionName];
			act.$parameters = {};
			Object.keys($action.$parameters).forEach(function(param) {
				act.$parameters[param] = dataset.resolveExpression($action.$parameters[param]);
			});
		}
	} else {
		var data = dataset.getData(workingCopy);
		actionData.data = data;
		var facet = dataset.getFacet();
		var $url = dataset.getUrl(true);

		// Save is a special case in stateless mode since it's managed by CRUD
		if ($actionName === "$save") {

			if (facet === "$create") {
				$url = _removeKeyFromUrl($url);
				actionData.$method = "POST"; // create
			} else {
				actionData.$method = "PUT"; // update
			}
			actionData.$url = $url;
		} else if ($actionName === "$abort") {
			return null;
		} else {

			$url = $url.replace("?", "/$services/" + $actionName + "?");
			$url = $url.replace("/sdata/", "/mobile2/");

			if (facet === "$create") {
				// Remove key if triggering action on $create facet since there is no record yet
				$url = _removeKeyFromUrl($url);
				actionData.$method = "PUT";
			} else {
				actionData.$method = "POST";
			}
			actionData.$url = $url;
		}
	}
	return actionData;
};

/**
 * Uses the server response to compute if an action was successful or not
 * 
 * Return:
 * {
 * 	   succeeded: true | false // Is the payload received a success or error response?
 *     $diagnoses: [{ // Top level result message to show, can be null
 *         $severity: "error" | "success"
 *         $message: "..."
 *     }]
 *     
 * }
 */
exports.computeActionResult = function($actionName, response) {
	var data = response.data;
	var result = {
		success: false
	};
	if (!data) {
		result.$diagnoses[{
			$severity: "error",
			$message: "unexpected null data [" + $actionName + "]"
		}];
		return result;
	}
	var diags = [];
	// #9868 - $diagnose is returned in payload's root when we save AQTCRUDM with status 200
	if (data.$diagnoses && data.$diagnoses.length > 0) {
		diags = diags.concat(data.$diagnoses);
	}
	if (data.$actions && data.$actions[$actionName] && data.$actions[$actionName].$diagnoses) {
		diags = diags.concat(data.$actions[$actionName].$diagnoses);
	}
	var errors = [];
	var successes = [];
	diags.forEach(function(diag) {
			if (diag.$severity === "error") {
				errors.push(diag);
			} else if (diag.$severity === "success" || diag.$severity === "info" || diag.$severity === "warning") {
				successes.push(diag);
			}
		})
		// If we end here, there is a top level message with an error
	if (errors.length > 0) {
		result.$diagnoses = errors;
		return result;
	}
	if (successes.length > 0) {
		// If there is a single success diagnose on the action, we assume all is OK
		result.$diagnoses = successes;
		result.success = true;
		return result;
	}
	// No information on header level, so scan fields for $diagnoses
	if (exports.hasFieldLevelErrors(data)) {
		result.$diagnoses = [{
			$severity: "error",
			$message: locale.text("action.error.field")
		}];
		return result;
	}
	result.$diagnoses = [{
		$severity: "success",
		$message: locale.text("action.success")
	}];
	result.success = true;
	return result;
}

/**
 * Scan the given data for any nodes with $diagnoses array containing an error
 * Will stop on the first match to be efficient
 * 
 */
exports.hasFieldLevelErrors = function(data) {
	function scanNode(node) {
		if (!node) {
			return false;
		}
		var errors;
		if (Array.isArray(node.$diagnoses)) {
			errors = node.$diagnoses.some(function(diag) {
				return diag.$severity === "error";
			});
			if (errors) {
				return true;
			}
		}
		if ($.isPlainObject(node)) {
			errors = Object.keys(node).some(function(key) {
				return scanNode(node[key]);
			});
			if (errors) {
				return true;
			}
		} else if (Array.isArray(node)) {
			errors = node.some(function(item) {
				return scanNode(item);
			});
			if (errors) {
				return true;
			}
		}
		return false;
	}
	return scanNode(data);
}

/*
 * 
 */
function _removeKeyFromUrl(url) {
	return url.replace(/(\/\w+)(\(\S+\))(\/\$services|\?)/, "$1$3");
}

exports.checkTransform = function($url, prototypeJson, datasetJson, pageJson) {
	var parsed = jsutils.parseURL($url);
	var articleJson = pageJson.$article;
	var viewsJson = pageJson.$views;
	var rolesJson = [];
	var isWorkingCopyHint;
	if (pageJson.$roles) {
		pageJson.$roles.forEach(function(role) {
			rolesJson.push({
				"$uuid": role.$uuid
			})
		});
	}
	var $mobileProtocol = (parsed.query && parsed.query.$mobileProtocol) === "workingcopy" ? "workingcopy" : "stateless";
	var $mobileEndpoint = parsed.query && parsed.query.$mobileEndpoint;
	var $mobileApplication = parsed.query && parsed.query.$mobileApplication;
	if (!datasetJson.$clientContext) {
		datasetJson.$clientContext = {
			$mobileProtocol: $mobileProtocol,
			$mobileEndpoint: $mobileEndpoint,
			$mobileApplication: $mobileApplication
		};
	}
	//Set $format external links
	_setExternalLinks(prototypeJson.$links);
	if (prototypeJson.$properties) {
		Object.keys(prototypeJson.$properties).forEach(function(prop) {
			_setExternalPropertieLinks(prototypeJson.$properties[prop])
		});
	}
	if (prototypeJson.$representation === "mobileApplication") {
		var $applicationName = datasetJson.applicationName;
		var $savedCtx = datasetJson.$clientContext;
		$savedCtx.$mobileProtocol = (datasetJson.onlineOnly === true ? "workingcopy" : "stateless");
		$savedCtx.$mobileApplication = datasetJson.applicationName;
		isWorkingCopyHint = datasetJson.onlineOnly;
		// A mobile applications json embeds all data required to render it's home dashboard or home gadget
		// so we just need to extract it here
		if (datasetJson.useHomeGadget !== true) {
			prototypeJson = prototypeJson.$mobileDashboardProto;
			datasetJson = datasetJson.$homeDashboard;
		} else if (datasetJson.$homeGadget) {
			prototypeJson = datasetJson.$homeGadgetFetched.prototype
			datasetJson = datasetJson.$homeGadgetFetched.dataset;
		}
		articleJson = datasetJson.$page.$article;
		viewsJson = datasetJson.$page.$views;
		if (datasetJson.$page.$roles) {
			datasetJson.$page.$roles.forEach(function(role) {
				rolesJson.push({
					"$uuid": role.$uuid
				})
			});
		}
		datasetJson.$clientContext = $savedCtx;
	}

	if (prototypeJson.$representation === "mobileDashboard") {

		var transformed = _transformDashboard(datasetJson, prototypeJson, articleJson);
		datasetJson = transformed.datasetJson;
		prototypeJson = transformed.prototypeJson;
		prototypeJson.$applicationName = $applicationName || null;
		articleJson = transformed.articleJson;
	}

	var result = {
		prototypeJson: prototypeJson,
		datasetJson: datasetJson,
		page: {
			$article: articleJson,
			$views: viewsJson,
			$roles: rolesJson
		}
	};
	if (isWorkingCopyHint != null) {
		result.$isWorkingCopy = isWorkingCopyHint
	}
	return result;
}

function _setExternalLinks($links) {
	if (!$links) return null;
	Object.keys($links).forEach(function(key) {
		if (($links[key].$url && $links[key].$url.indexOf("http") == 0) || $links[key].$url === "") {
			$links[key].$format = $links[key].$format || "$url";
			$links[key].$urlkey = key;
		}
	});
}

function _setExternalPropertieLinks(propertie) {
	if (!propertie || !propertie.$links) return null;
	Object.keys(propertie.$links).forEach(function(key) {
		if ((propertie.$links[key].$url && propertie.$links[key].$url.indexOf("http") == 0) || propertie.$links[key].$url === "") {
			propertie.$format = propertie.$format || "$url";
			propertie.$urlkey = key;
		}
	});
}
/**
 * Transform the prototype and data of an mobile dashboard entity instance to something that 
 * passes through the standard widget creation process:
 * - The list of vignettes is transformed to a property per vignette because
 *   the article binds to the id (persistenId) of the vignette 
 */
function _transformDashboard(datasetJson, prototypeJson, articleJson) {
	var proto = $.extend(true, {}, prototypeJson);
	var data = $.extend(true, {}, datasetJson);
	// Dashboard entity properties potentially used (title/descr)
	proto.$properties = {};
	["dashboardName", "title", "description"].forEach(function(p) {
		proto.$properties[p] = prototypeJson.$properties[p]
	})

	proto.$title = datasetJson.title;

	data.$vignettes = data.vignettes; // make list meta information
	delete data.vignettes; // List will be replaced by concrete properties also contained in prototype
	delete data.$properties;

	var defaultArticle = {
		"$layoutType": "stack",
		"$items": []
	}
	for (var i = 0, j = datasetJson.vignettes.length; i < j; i++) {
		var vignette = datasetJson.vignettes[i];
		var vid = vignette.persistentId;

		var gadget = datasetJson.$mobileGadgets[vignette.gadget.$uuid];
		if (!gadget) {
			throw new Error("Gadget not found " + vignette.gadget.$uuid)
		}
		gadget.$clientContext = datasetJson.$clientContext;

		var prop = proto.$properties[vid] = {
			$item: gadget
		};
		prop.$item.$uuid = vignette.gadget.$uuid;
		if (vignette.displayStyle === "$full") {
			prop.$type = "application/x-vignette";
		} else {
			prop.$type = "application/x-vignette-link";
		}

		prop.$title = prop.$item.$title;

		data[vid] = vignette.gadget.$uuid;
		defaultArticle.$items.push({
			$bind: vid
		});
	}
	return {
		datasetJson: data,
		prototypeJson: proto,
		articleJson: articleJson || defaultArticle
	}
}

/**
 * Convert a working copy url to a stateless one
 * 
 * Urls containing $forceProtocol=true will not be changed
 * Like this it's possible to have a client side stateless app opening a working copy mode representation
 */
exports.adjustLinkProtocol = function($link, $mobileProtocol) {
	if ($mobileProtocol !== "workingcopy" && $link.$url && $link.$url.indexOf("$forceProtocol=true") < 0) {
		$link = $.extend(true, {}, $link);
		if ($link.$method !== "DELETE" && $link.$url.indexOf("$services") < 0) {
			$link.$method = "GET";
		}
		if ($link.$url.indexOf("/$workingCopies?") > -1) {
			// switch to stateless
			$link.$url = $link.$url.replace("/$workingCopies?", "?");
		}
	}

	return $link;
}

exports.addClientContext = function($url, $clientContext) {
	var result = $url;
	for (var prop in $clientContext) {
		if (result.indexOf(prop + "=") < 0) {
			if ($clientContext[prop]) {
				var delim = result.indexOf("?") > -1 ? "&" : "?";
				result = result + delim + prop + "=" + encodeURIComponent($clientContext[prop]);
			}
		}
	}
	return result;
};

exports.getPageName = function(url) {
	var urlLC = url.toLowerCase();
	if (urlLC.indexOf("/mobiledashboard") >= 0) {
		return exports.getKeyFromUrl(url);
	} else if (urlLC.indexOf("html://") === 0 || urlLC.indexOf("child://") === 0) {
		var name = url.split('/')[2] || "";
		// Remove ? or #
		["?", "#"].forEach(function(c) {
			var idx = name.indexOf(c);
			if (idx >= 0) {
				name = name.substr(0, idx)
			}
		})
		return name;
	} else {
		var rep = exports.getReprFromUrl(url);
		return rep || "unknown";
	}
};

/**
 *  Check if the links is a link to a dashboard with parameters in V11 syntax and convert it to a valid one
 */
exports.transformOldDashboardUrl = function($link, dataset) {
	var url = $link.$url;
	if (!(url.indexOf("/$mobileDashboards?dashboard=") > -1)) {
		return $link;
	}
	try {
		var parsed = jsutils.parseURL(url);
		var dashboard = parsed.query.dashboard;
		var parameters = parsed.query.parameters;

		var params = parameters && parameters.split("&").map(function(param) {
			var tmp = param.split("=");
			var key = tmp[0];
			var val = tmp[1];
			val = dataset.resolveExpression(val);
			return key + "=" + val;
		}).join("&");
		var baseUrl = exports.getHostPortFromUrl(url);
		var url = baseUrl + "/sdata/syracuse/collaboration/syracuse/mobileDashboards(dashboardName eq '" + encodeURIComponent(dashboard) + "')?representation=mobileDashboard.$details";
		if (params) {
			url = url + "&parameters=" + encodeURIComponent(params);
		}
		$link.$url = url;
	} catch (e) {}
	return $link;
}

exports.getDashboardParams = function(url) {
		var obj = {};
		try {
			var parsed = jsutils.parseURL(url);
			var parameters = parsed.query.parameters;
			parameters && parameters.split("&").map(function(param) {
				var tmp = param.split("=");
				obj[tmp[0]] = {
					value: tmp[1]
				}
			});
			return obj;
		} catch (e) {}
		return null;
	}
	/**
	 * Used for unit tests (data/proto/articles are read locally in mock folder)
	 */
exports.localEndpoint = "$client.$local.$dataset";
exports.isLocaleUrl = function(url) {
	var parsed = jsutils.parseURL(url);
	if (parsed.path.smStartsWith("/syracuse-tablet")) {
		// No endpoint
		return true;
	}
	return exports.getEndpointFromUrl(url) === exports.localEndpoint;
}