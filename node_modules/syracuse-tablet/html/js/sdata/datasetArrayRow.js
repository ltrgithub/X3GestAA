"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var datasetUtils = require('syracuse-tablet/html/js/sdata/datasetUtils');
var Base = require('syracuse-tablet/html/js/sdata/datasetBase').DatasetBase;

/**
 * Row dataset
 * Used to represent data of an array row in MultiArrayDatasets
 * No special implementation yet but used to represent a row dataset for future extensions
 */
exports.RowDataset = utils.defineClass(
	function RowDataset(json, prototype, parent, $bind) {
		Base.call(this, json, prototype, parent, $bind);
	},
	Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
		},
		getLink: function($linkName, $bind) {
			var link = datasetUtils.checkQueryFullPage(this.prototype, $linkName);
			if (link) {
				return link;
			}
			var linkD;
			// This is for links that are on property ($resources.$item) level with dynamic meta
			// data only available in the root dataset (the page)
			var parentProp = this.parent && this.parent.$bind;
			if (!$bind && parentProp && this.parent.parent && this.parent.parent.$bind == null) {
				linkD = this.parent.parent.getValueByPath("$properties." + parentProp + ".$item.$links." + $linkName);
			}

			var path = $bind ? "$properties." + $bind + ".$item.$links." + $linkName : "$links." + $linkName;
			var linkP = this.prototype.getValueByPath(path);
			if (!linkD) linkD = this.getValueByPath(path);
			if (!linkP && !linkD) {
				return;
			}
			link = $.extend(true, {}, linkP, linkD);
			if (link.$isHidden) return
			if (link.$url && /\{(\S+?)\}/.test(link.$url)) {
				link.$url = this.resolveExpression(link.$url)
			}
			return link;
		},
		getUuid: function() {
			// !! getUuid can be call on destroyed dataset due to the removeRow process
			return this.json ? this.json["$uuid"] : null;
		}
	}
);