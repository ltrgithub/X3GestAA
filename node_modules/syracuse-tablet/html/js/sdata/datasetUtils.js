"use strict";

exports.checkQueryFullPage = function(prototype, $linkName) {
	if ($linkName !== "$queryfullpage") {
		return null;
	}
	// Query facet in full page
	if (!prototype.root || !prototype.root.isFacet("$query")) {
		throw new Error("$query facte expected for $queryfullpage link");
	}
	return {
		"$title": "$queryfullpage",
		"$target": "",
		"$type": "application/json;vnd.sage=syracuse",
		"$method": "GET",
		"$url": prototype.root.data("$url")
	}
}


/**
 * Process data by walking through a data object and applying operations
 */
exports.DataProcessor = function() {
	/**
	 * operation.regExp		Expression that gives the properties to remove
	 * operation.exclude	Array that contains the names of the properties to exclude
	 * Return true if walk can continue inside o[name]
	 */
	this.removeprop = function(operation, o, name, result) {
		if (!operation) {
			// Process is stopped - unexpected null removeProp
			return false;
		}
		if (operation.exclude != null && operation.exclude.indexOf(name) >= 0) {
			// Property excluded -> Recursion is stopped
			return false;
		}
		if (!operation.regExp) {
			// Process is stopped - unexpected null regExp
			return false;
		}
		if (!operation.regExp.test(name)) {
			// Prop not removed - We walk inside
			return true;
		}
		// Perhaps  o[name]= undefined; is better
		delete o[name];
		if (result) {
			// Add to result if test mode
			if (result.removeprop == null) {
				result.removeprop = {
					_nbRemoved: 0
				};
			}
			if (result.removeprop[name] == null) {
				result.removeprop[name] = 0;
			}
			result.removeprop[name]++;
			result.removeprop._nbRemoved++;
		}
		// Property deleted - no walk
		return false;
	};
	/**
	 * Keeps only functional fields
	 */
	this.dataToTemplate = function(operation, o, name, result) {
		if (!operation) {
			// Process is stopped - unexpected null removeProp
			return false;
		}
		if (name === "$uuid") {
			o["hasUUID"] = true;
			return false;
		}
		if (name.toLowerCase() === "etag" || name.smStartsWith("$")) {
			delete o[name];
			return false;
		}
		return true;
	};
	this._walkArray = function(o, operation, result) {
		if (!o) return;
		var self = this;
		o.forEach(function(e) {
			if (typeof(e) === 'object') {
				self._walk(e, operation, result);
			} else {
				// nothing
			}
		});
	};
	this._walkPlainObject = function(o, operation, result) {
		if (!o) return;
		var p = Object.keys(o),
			e, name, walkInside;
		for (var ii = 0, jj = p.length; ii < jj; ii++) {
			name = p[ii];
			e = o[name];
			walkInside = true;
			for (var opName in operation) {
				if (this[opName]) {
					walkInside = this[opName](operation[opName], o, name, result);
				}
			}
			if (walkInside && typeof(e) === 'object') {
				this._walk(e, operation, result);
			} else {
				// Nothing
			}
		}
	};
}
var _datasetImplems = {};

// Returns the klas for the given name
exports.getImplementation = function(name) {
		return _datasetImplems[name];
	}
	// Stores the class by name
exports.setImplementation = function(klass) {
	if (klass) {
		_datasetImplems[klass.name] = klass;
	}
}