"use strict";

var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("DataProcessor", false);

exports.checkQueryFullPage = function(prototype, $linkName) {
	if ($linkName !== "$queryfullpage") {
		return null;
	}
	// Query facet in full page
	if (!prototype.root || !prototype.root.isFacet("$query")) {
		throw new Error("$query facte expected for $queryfullpage link");
	}
	return {
		"$title": "$queryfullpage",
		"$target": "",
		"$type": "application/json;vnd.sage=syracuse",
		"$method": "GET",
		"$url": prototype.root.data("$url")
	}
}

exports.isDisabled = function(metaData) {
	// Apply metaData.$isReadOnly and/or metaData.$isDisabled on select
	// select can only be set as readonly with the 'disabled' attribute
	return metaData && (metaData.$isReadOnly === true || metaData.$isDisabled === true);
}

/**
 * Process data by walking through a data object and applying operations
 */
exports.DataProcessor = function() {
	this._walkArray = function(o, operation, result) {
		if (!o) return;
		var self = this;
		o.forEach(function(e) {
			if (typeof(e) === 'object') {
				if (operation && operation["addRowId"]) {
					e.$uuid = utils.UUID();
				}
				self._walk(e, operation, result);
			} else {
				// nothing
			}
		});
	};
	this._walkPlainObject = function(o, operation, result) {
		if (!o) return;
		var p = Object.keys(o),
			e, name, walkInside;
		for (var ii = 0, jj = p.length; ii < jj; ii++) {
			name = p[ii];
			e = o[name];
			walkInside = true;
			for (var opName in operation) {
				if (this[opName]) {
					walkInside = this[opName](operation[opName], o, name, result);
				}
			}
			if (walkInside && typeof(e) === 'object') {
				this._walk(e, operation, result);
			} else {
				// Nothing
			}
		}
	};

	this._walk = function(o, operation, result) {
		if (!o || !operation) return;
		if (typeof o == 'object') {
			if (Array.isArray(o)) {
				this._walkArray(o, operation, result);
			} else if ($.isPlainObject(o)) {
				this._walkPlainObject(o, operation, result);
			}
		} else {
			// Nothing
		}
	};
	/**
	 * Process the given operation on data
	 */
	this.process = function(operation, data) {
		var result;
		if (log != null) {
			result = {
				startTime: new Date().getTime()
			};
		}
		this._walk(data, operation, result);
		// For test- 
		if (log != null && result) {
			log("getActionPayload - operations - Elsaped=", new Date().getTime() - result.startTime, "ms");
			log("Result: ", JSON.stringify(result, null, 2));
		}
		return result;
	};
	this.renewAllIds = function(context, o, name, result) {
		if (typeof(o) === 'object' && o.$uuid) {
			o.$uuid = utils.UUID();
		}
		return true;
	};
}
var _datasetImplems = {};

// Returns the klass for the given name
exports.getImplementation = function(name) {
		return _datasetImplems[name];
	}
	// Stores the class by name
exports.setImplementation = function(klass) {
	if (klass) {
		_datasetImplems[jsutils.getClassName(klass)] = klass;
	}
}
exports.templateAddRowId = function(data) {
	var dataProcessor = new exports.DataProcessor();
	dataProcessor.process({
		addRowId: {}
	}, data);
	return data;
}
exports.renewAllIds = function(data) {
	var dataProcessor = new exports.DataProcessor();
	dataProcessor.process({
		renewAllIds: {}
	}, data);
	return data;
}