"use strict";
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("sDataHttp");
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
var globals = require('syracuse-tablet/html/js/helpers/globals');

// We force no parsing
var _forceOptions = {
	noJsonParsing: true
};
/* 
 * params : {method, url, send, headers, options, login}
 * optional : send, headers, options, login = {user,password}
 * Return a promise
 * Resolve with result {status, isSuccess, responseText, jsonData, textStatus, descrHttpStatus, headers}
 * Never rejects
 * status = 600 if Java Script exception
 */

var _send = function(params) {
	var deferred = $.Deferred();
	var params = params || {};

	params.options = $.extend(params.options || {}, _forceOptions);
	if (params.login) {
		// Temporarily - allows to launch tests with a login
		params.headers = $.extend(params.headers || {}, {
			Authorization: 'Basic ' + window.btoa("guest" + ":" + "guest")
		});
	};
	try {
		log && log("_httpSend - Begin - Method:" + params.method + "\n\t" + params.url);

		ajax(params.method, params.url, params.send, params.headers, params.options)
			.then(function(result) {
				log && log("_httpSend - End - status=" + result.status + " - " + result.textStatus);
				// Try to parse data even if fail status - we can have a $diagnose in response
				var responseText = result.responseText ? result.responseText.trim() : "";
				if (responseText.length > 0 && ['{', '['].indexOf(responseText.charAt(0)) >= 0) {
					result.responseJSON = JSON.parse(responseText);
				} else {
					result.responseJSON = null;
				}
				deferred.resolve(result);
			}).fail(function(e) {
				deferred.reject(e);
			});
	} catch (e) {
		deferred.reject(e);
	}
	return deferred.promise();
};

exports.fetchRemotePrototype = function(id) {
	var deferred = $.Deferred();
	var self = this;
	try {
		var base = globals.baseLocation();
		var segs = id.split(".");
		var ep = segs.slice(0, 3).join("/");
		var repr = segs.slice(3, 5).join(".");
		var url = base.host + "/mobile1/" + ep + "/$prototypes('" + repr + "')";
		ajax("GET", url)
			.then(function(data) {
				if (data.isSuccess) {
					deferred.resolve(data.responseJSON);
				} else {
					var err = "Http error status[" + data.status + "] reading prototype id [" + id + "]";
					if (data.responseJSON) err += "\n" + JSON.stringify(data.responseJSON, null, 2);
					throw new Error(err);
				}
			}).fail(function(e) {
				deferred.reject(e);
			});
	} catch (e) {
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
},

exports.send = _send;