"use strict";
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("sData");
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;


// We force no parsing and complete call back
var _forceOptions = {
	completeCallback: true,
	noJsonParsing: true
};
/* 
 * params : {method, url, send, headers, options, login}
 * optional : send, headers, options, login = {user,password}
 * Return a promise
 * Resolve with result {status, isSuccess, responseText, jsonData, textStatus, descrHttpStatus, headers}
 * Never rejects
 * status = 600 if Java Script exception
 */
var _send = function(params) {
	var deferred = $.Deferred();
	var params = params || {};
	params.options = $.extend(params.options || {}, _forceOptions);
	if (params.login) {
		// Temporarily - allows to launch tests with a login
		params.headers = $.extend(params.headers || {}, {
			Authorization: 'Basic ' + window.btoa("guest" + ":" + "guest")
		});
	};
	try {
		log && log("_httpSend - Begin - Method:" + params.method + "\n\t" + params.url);
		if (false && params.send) {
			log && log(JSON.stringify(params.send, null, 2));
		}
		ajax(params.method, params.url, params.send, params.headers, params.options)
			.always(function(result) {
				log && log("_httpSend - End - status=" + result.status + " - " + result.textStatus);
				try {
					// Try to parse data even if fail status - we can have a $diagnose in response
					var responseText = result.responseText ? result.responseText.trim() : "";
					if (responseText.length > 0 && ['{', '['].indexOf(responseText.charAt(0)) >= 0) {
						result.jsonData = JSON.parse(responseText);
					} else {
						result.jsonData = null;
					}
					deferred.resolve(result);
				} catch (e) {
					if (result.isSuccess) {
						// return an error only if success else we just tried to set jsonData to null
						// Save original status
						result.ajaxStatus = result.status;
						result.ajaxTextStatus = result.textStatus;
						result.status = 600;
						result.textStatus = "JSON parsing Exception";
						result.exception = e;
					}
					deferred.resolve(result);
				}
			});
	} catch (e) {
		deferred.resolve(600, null, "Javascript Exception", e);
	}
	return deferred.promise();
};



var _post = function(url, data) {
	return _send({
		method: "POST",
		url: url,
		send: data
	});
};

var _put = function(url, data) {
	return _send({
		method: "PUT",
		url: url,
		send: data
	});
};

var _get = function(url) {
	return _send({
		method: "GET",
		url: url
	});
};

var _del = function(url) {
	return _send({
		method: "DELETE",
		url: url
	});
};

exports.send = _send;
exports.post = _post;
exports.put = _put;
exports.get = _get;
exports.del = _del;