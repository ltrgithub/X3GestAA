"use strict";

var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var sdataHttp = require('syracuse-tablet/html/js/sdata/sdataHttp');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');

/*
 * This file should be the only file containing direct, non generic access to server side supporting entities/services
 */
var _appListUrl = "/sdata/syracuse/collaboration/syracuse/mobileApplications/$service/availableApplications";
var _localePreferencesUrl = "/sdata/syracuse/collaboration/syracuse/localePreferences?representation=localePreference.$bulk";
var _userProfileUrl = "/sdata/syracuse/collaboration/syracuse/userProfiles/$service/current";
var _endpointListUrl = "/sdata/syracuse/collaboration/syracuse/endPoints?representation=endPoint.$bulk";
var _roleListUrl = "/sdata/syracuse/collaboration/syracuse/roles?representation=role.$bulk";

function _generateReject(title, result, url) {
	if (result && result.responseJSON && result.responseJSON.$diagnoses) {
		return $.smReject({
			$title: title,
			$diagnoses: result.responseJSON.$diagnoses
		});
	}
	return $.smReject({
		$title: title
	});
}

exports.queryAllApplications = function() {
	var params = {
		method: "GET",
		url: _appListUrl
	};
	params.parsedUrl = sdataUtils.parseSDataURL(params.url);
	return sdataHttp.send(params)
		.then(function(result) {
			if (result.isSuccess && result.responseJSON) {
				var apps = result.responseJSON.$resources;
				return apps;
			}
			return _generateReject("Loading application list error", result, params.url);
		});
};

exports.queryApplicationDetail = function(appHeader, endpoint) {
	var params = {
		method: "GET",
		url: appHeader.$metaDataUrl + "?endpoint=" + endpoint
	};
	params.parsedUrl = sdataUtils.parseSDataURL(params.url);
	return sdataHttp.send(params)
		.then(function(result) {
			if (result.isSuccess && result.responseJSON) {
				var app = result.responseJSON;
				return app;
			}
			return _generateReject("Error loading application details for '" + appHeader.applicationName + "'", result, params.url);
		});
};

exports.getUserProfile = function() {
	var params = {
		method: "GET",
		url: _userProfileUrl
	};
	params.parsedUrl = sdataUtils.parseSDataURL(params.url);
	return sdataHttp.send(params)
		.then(function(result) {
			if (result.isSuccess && result.responseJSON) {
				var profile = result.responseJSON;
				return profile;
			}
			return _generateReject("Loading user profile error", result, params.url);
		});
};

exports.queryLocalePreferences = function() {
	return _fetchAll(_localePreferencesUrl)
		.then(function(result) {
			var locales = [];
			result.forEach(function(locale) {
				locales.push({
					"$uuid": locale.$uuid,
					"code": locale.code,
					"description": locale.description
				});
			});
			return locales;
		});
};

exports.queryEndpoints = function() {
	return _fetchAll(_endpointListUrl);
};

exports.queryRoles = function() {
	return _fetchAll(_roleListUrl);
};

exports.updateUserProfile = function(changes) {

	function createWC() {
		return $.smResolve().then(function() {
			var trackingId = utils.UUID();
			var params = {
				method: "POST",
				url: "/sdata/syracuse/collaboration/syracuse/userProfiles/$template/$workingCopies?representation=userProfile.$edit&role=&trackingId=" + trackingId
			};
			params.parsedUrl = sdataUtils.parseSDataURL(params.url);
			return sdataHttp.send(params)
				.then(function(result) {
					if (result.isSuccess && result.responseJSON) {
						return $.smResolve(result.responseJSON);
					} else {
						return $.smReject();
					}
				});
		});
	}

	function updateWC(up) {
		return $.smResolve().then(function() {
			var upData = $.extend({}, up, changes);
			var params = {
				method: "PUT",
				url: up.$url,
				send: upData
			};
			params.parsedUrl = sdataUtils.parseSDataURL(params.url);
			return sdataHttp.send(params)
				.then(function(result) {
					if (result.isSuccess && result.responseJSON) {
						return $.smResolve(result.responseJSON);
					} else {
						return $.smReject();
					}
				});
		});
	}

	function deleteWC(up) {
		return $.smResolve().then(function() {
			var params = {
				method: "DELETE",
				url: up.$url
			};
			params.parsedUrl = sdataUtils.parseSDataURL(params.url);
			return sdataHttp.send(params)
				.then(function(result) {
					return $.smResolve();
				});
		});
	}

	return createWC()
		.then(function(up) {
			return updateWC(up);
		})
		.then(function(up) {
			return deleteWC(up).always(function() {
				return $.smResolve();
			});
		});
};

function _fetchAll(urlQuery) {
	var deferred = $.Deferred();
	var list = [];

	function _fetchPage(url) {
		var params = {
			method: "GET",
			url: url
		};

		params.parsedUrl = sdataUtils.parseSDataURL(params.url);
		sdataHttp.send(params)
			.then(function(result) {
				var data = result && result.responseJSON;
				if (result && result.status === 401) {
					return $.smReject({
						$message: locale.text("error.session.timeout"),
						$redirectPage: "login"
					});
				}

				data && data.$resources && data.$resources.forEach(function(i) {
					list.push(i);
				});
				if (data && data.$links && data.$links.$next && data.$links.$next.$url) {
					_fetchPage(data.$links.$next.$url);
				} else {
					deferred.resolve(list);
				}
			})
			.fail(function(e) {
				deferred.reject(e);
			});
	}

	_fetchPage(urlQuery);
	return deferred.promise();
}