"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var sdataHttp = require('syracuse-tablet/html/js/sdata/sdataHttp');
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;

/*
 * This file should be the only file containing direct, non generic access to server side supporting entities/services
 */
var _appListUrl = "/sdata/syracuse/collaboration/syracuse/mobileApplications/$service/availableApplications";
var _localePreferencesUrl = "/requireJS/tabletLocalePreferences";
var _userProfileUrl = "/sdata/syracuse/collaboration/syracuse/userProfiles/$service/current";
var _endpointListUrl = "/sdata/syracuse/collaboration/syracuse/endPoints?representation=endPoint.$query";
var _roleListUrl = "/sdata/syracuse/collaboration/syracuse/roles?representation=role.$query";

var _throwSdataError = function(title, result, url) {
	var err = title;
	err += "\nStatus: " + result.status + " - " + result.descrHttpStatus;
	if (url) err += "\n" + url;
	var diags = sdataUtils.scanDiagnoses(result.responseJSON);
	if (diags) err += "\nDIAGNOSES\n" + JSON.stringify(diags, null, 2);
	throw new Error(err);
};

exports.queryMyApplications = function() {
	var deferred = $.Deferred();
	var params = {
		method: "GET",
		url: _appListUrl
	};
	if (globals.isDvlpMode()) {
		if (params.url.indexOf("?") > -1) {
			params.url += "&";
		} else {
			params.url += "?";
		}
		params.url += "allApps";
	}
	params.parsedUrl = sdataUtils.parseSDataURL(params.url);
	sdataHttp.send(params)
		.then(function(result) {
			if (result.isSuccess && result.responseJSON) {
				var apps = result.responseJSON.$resources;
				deferred.resolve(apps);
			} else {
				_throwSdataError("Loading application list error", result, params.url);
			}
		}).fail(function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
};

exports.queryMyApplicationDetail = function(appHeader) {
	var deferred = $.Deferred();
	var params = {
		method: "GET",
		url: appHeader.$metaDataUrl
	};
	params.parsedUrl = sdataUtils.parseSDataURL(params.url);
	sdataHttp.send(params)
		.then(function(result) {
			if (result.isSuccess && result.responseJSON) {
				var app = result.responseJSON;
				deferred.resolve(app);
			} else {
				_throwSdataError("Error oading application detail - Name: " + appHeader.applicationName, result, params.url);
			}
		}).fail(function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
};

exports.queryLocalePreferences = function() {
	var deferred = $.Deferred();

	ajax("GET", _localePreferencesUrl)
		.then(function(result) {
			if (result.isSuccess) {
				var locales = [];
				(result.responseJSON.$resources || []).forEach(function(locale) {
					locales.push({
						"$uuid": locale.$uuid,
						"code": locale.code,
						"description": locale.description
					});
				});
				deferred.resolve(locales);
			} else {
				deferred.resolve([]);
			}
		}).fail(function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
};

exports.getUserProfile = function() {
	var deferred = $.Deferred();
	var params = {
		method: "GET",
		url: _userProfileUrl
	};
	params.parsedUrl = sdataUtils.parseSDataURL(params.url);
	sdataHttp.send(params)
		.then(function(result) {
			if (result.isSuccess && result.responseJSON) {
				var profile = result.responseJSON;
				deferred.resolve(profile);
			} else {
				_throwSdataError("Loading user profile error", result, params.url);
			}
		}).fail(function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
};

exports.queryEndpoints = function() {
	var deferred = $.Deferred();
	var params = {
		method: "GET",
		url: _endpointListUrl
	};
	params.parsedUrl = sdataUtils.parseSDataURL(params.url);
	sdataHttp.send(params)
		.then(function(result) {
			if (result.isSuccess && result.responseJSON) {
				var eps = result.responseJSON.$resources;
				deferred.resolve(eps);
			} else {
				_throwSdataError("Loading endpoint list error", result, params.url);
			}
		}).fail(function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
};

exports.queryRoles = function() {
	var deferred = $.Deferred();
	var params = {
		method: "GET",
		url: _roleListUrl
	};
	params.parsedUrl = sdataUtils.parseSDataURL(params.url);
	sdataHttp.send(params)
		.then(function(result) {
			if (result.isSuccess && result.responseJSON) {
				var eps = result.responseJSON.$resources;
				deferred.resolve(eps);
			} else {
				_throwSdataError("Loading roles list error", result, params.url);
			}
		}).fail(function(e) {
			deferred.reject(e);
		});
	return deferred.promise();

};