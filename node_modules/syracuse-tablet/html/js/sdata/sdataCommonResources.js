"use strict";

var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var sdataHttp = require('syracuse-tablet/html/js/sdata/sdataHttp');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var ajax = require('syracuse-tablet/html/js/ajax/ajax');

/*
 * This file should be the only file containing direct, non generic access to server side supporting entities/services
 */
var _appListUrl = "/sdata/syracuse/collaboration/syracuse/mobileApplications/$service/availableApplications";
var _localePreferencesUrl = "/sdata/syracuse/collaboration/syracuse/localePreferences?representation=localePreference.$bulk";
var _userProfileUrl = "/sdata/syracuse/collaboration/syracuse/userProfiles/$service/current";
var _userProfileUpdtUrl = "/sdata/syracuse/collaboration/syracuse/userProfiles/$service/updateProfile";
var _userProfileSettingsUrl = "/sdata/syracuse/collaboration/syracuse/userProfiles/$service/settings";
var _createSharedContextUrl = "/requireJS/sharedContext/create";
var _readSharedContextUrl = "/requireJS/sharedContext/read?uuid=";
var _connectionAliveUrl = "/requireJS/misc/connectionAlive";

function _checkResult(result) {
	return result && result.isSuccess && result.responseJSON && !$.isEmptyObject(result.responseJSON);
}

exports.queryAllApplications = function() {
	try {
		var params = {
			method: "GET",
			url: _appListUrl
		};
		params.parsedUrl = sdataUtils.parseSDataURL(params.url);
		return sdataHttp.send(params)
			.then(function(result) {
				if (_checkResult(result)) {
					return result.responseJSON.$resources;
				}
				return ajax.rejectHttpResult(locale.text("err.load.applst"), result, params.url);
			});
	} catch (e) {
		return $.smReject(e);
	}
};

exports.queryApplicationDetail = function(appHeader, endpoint) {
	try {
		var params = {
			method: "GET",
			url: appHeader.$metaDataUrl + "?endpoint=" + endpoint
		};
		params.parsedUrl = sdataUtils.parseSDataURL(params.url);
		return sdataHttp.send(params)
			.then(function(result) {
				if (_checkResult(result)) {
					return result.responseJSON;
				}
				return ajax.rejectHttpResult(locale.text("err.load.appdetail", [appHeader.applicationName]), result, params.url);
			});
	} catch (e) {
		return $.smReject(e);
	}
};
/**
 * noFailIfNoConnection	see _fetchAll
 */
exports.queryLocalePreferences = function(noFailIfNoConnection) {
	return _fetchAll(_localePreferencesUrl, noFailIfNoConnection)
		.then(function(result) {
			var locales = [];
			result.forEach(function(locale) {
				locales.push({
					"$uuid": locale.$uuid,
					"code": locale.code,
					"description": locale.description
				});
			});
			return locales;
		});
};
exports.getUserProfile = function() {
	try {
		var params = {
			method: "GET",
			url: _userProfileUrl
		};
		params.parsedUrl = sdataUtils.parseSDataURL(params.url);
		return sdataHttp.send(params)
			.then(function(result) {
				if (_checkResult(result)) {
					return result.responseJSON;
				}
				return ajax.rejectHttpResult(locale.text("err.load.profile"), result, params.url);
			});
	} catch (e) {
		return $.smReject(e);
	}
};
exports.updateUserProfile = function(changes) {
	try {
		var params = {
			method: "POST",
			url: _userProfileUpdtUrl,
			send: changes
		};
		params.parsedUrl = sdataUtils.parseSDataURL(params.url);
		return sdataHttp.send(params)
			.then(function(result) {
				if (_checkResult(result)) {
					return result.responseJSON;
				}
				return ajax.rejectHttpResult("Error updating profile", result, params.url);
			});
	} catch (e) {
		return $.smReject(e);
	}
};
exports.getUserProfileSettings = function() {
	try {
		var params = {
			method: "GET",
			url: _userProfileSettingsUrl
		};
		params.parsedUrl = sdataUtils.parseSDataURL(params.url);
		return sdataHttp.send(params)
			.then(function(result) {
				if (_checkResult(result)) {
					result = result.responseJSON;
					// Check settings just in case - Checking is done on Syracuse side
					var err = [];
					if (result.roles.length < 1) {
						err.push("unexpected empty roles list");
					}
					if (result.locales.length < 1) {
						err.push(locale.text("unexpected empty languages list"));
					}
					if (err.length == 0) {
						return result;
					}
					err.push(locale.text("contact.admin"));
					return $.smReject({
						$redirectPage: "login",
						$title: "Bad user configuration",
						$diagnoses: [{
							$message: err.join('\n')
						}]
					});
				}
				return ajax.rejectHttpResult("Error reading profile settings", result, params.url);
			});
	} catch (e) {
		return $.smReject(e);
	}
};

/**
 * noFailIfNoConnection	true to resolve with an empty list if httpstatus 0 (no network connection)
 * if noFailIfNoConnection == true and a network connection occurred -> Resolve with [] and true
 */
function _fetchAll(urlQuery, noFailIfNoConnection) {
	var deferred = $.Deferred();
	var list = [];

	function _fetchPage(url) {
		var params = {
			method: "GET",
			url: url
		};

		params.parsedUrl = sdataUtils.parseSDataURL(params.url);
		sdataHttp.send(params)
			.then(function(result) {
				var data = result && result.responseJSON;
				if (data && data.$noConnectionError === true && noFailIfNoConnection === true) {
					deferred.resolve([], true);
					return;
				}
				if (result && result.status !== 200) {
					var message;
					if (result.status === 401) {
						message = locale.text("error.session.timeout");
					} else if (data && data.$diagnoses && data.$diagnoses.length > 0) {
						message = data.$diagnoses[0].$message;
					} else {
						message = locale.text("fetchurl.error", [params.parsedUrl.contract + "/" + params.parsedUrl.entity, result.status]);
					}
					deferred.reject({
						$message: message,
						$redirectPage: "login"
					});
				}
				data && data.$resources && data.$resources.forEach(function(i) {
					list.push(i);
				});
				if (data && data.$links && data.$links.$next && data.$links.$next.$url) {
					// Scan all resources
					_fetchPage(data.$links.$next.$url);
				} else {
					// Resolve in no $links 
					deferred.resolve(list, false);
				}
			})
			.fail(function(e) {
				deferred.reject(e);
			});
	}

	_fetchPage(urlQuery);
	return deferred.promise();
}
// lifespan in days
exports.createSharedContext = function(linkCtx, lifespan) {
	// convert to hours
	lifespan = (lifespan == undefined ? 3 : lifespan) * 24;
	var params = {
		method: "POST",
		url: _createSharedContextUrl,
		send: {
			lifespan: lifespan,
			linkCtx: linkCtx
		}
	};
	return sdataHttp.send(params).then(function(result) {
		if (result.isSuccess && result.responseJSON && result.responseJSON.$uuid) {
			return result.responseJSON.$uuid;
		}
		return null;
	});
};
exports.readSharedContext = function(uuid) {
	// convert to hours
	if (!uuid) {
		// Null uuid accepted
		$.smResolve(null);
	}
	var params = {
		method: "get",
		url: _readSharedContextUrl + uuid
	};
	return sdataHttp.send(params).then(function(result) {
		var context = result.isSuccess ? result.responseJSON : null;
		if (!context || !context.endpoint || !context.currentState || !context.applicationName) {
			if (globals.getModal()) {
				globals.getModal().notify(locale.text("urlcontext.bad"), locale.text("urlcontext.cantopen"));
			}
			console.log("Bad url context", "Can't open the page", JSON.stringify(context, null, 2));
			return null;
		}
		return context;
	}).fail(function(e) {
		console.log("readSharedContext error", e.message);
		return null;
	});
};

exports.isConnectionAlive = function() {
	return sdataHttp.send({
		method: "get",
		url: _connectionAliveUrl
	}).then(function(result) {
		return result && result.isSuccess;
	}).fail(function(e) {
		return false;
	});
};