"use strict";

var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var ajax = require('syracuse-tablet/html/js/common/ajax');
var protoHelpers = require('syracuse-tablet/html/js/sdata/protocolHelpers');
var articleParser = require("syracuse-tablet/html/js/controls/articleParser");
var dataset = require('syracuse-tablet/html/js/sdata/dataset');
var datasetUtils = require('syracuse-tablet/html/js/sdata/datasetUtils');
var Prototype = require('syracuse-tablet/html/js/sdata/prototype').Prototype;
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');

var _cachedUrls = {};

/**
 * "http://localhost:8124/syracuse-tablet/html/index_debug.html?
 * url=http://localhost:8124/mobile2/$client/$local('STD_EX_ERP_EXPENSES_DASHBOARD')?representation=mobileDashboard.$details
 * &dataset=/$dataset/mobileDashboard/syracuse-tablet/html/js/mocks/mobileDashboard_STD_EX_ERP_EXPENSES_DASHBOARD_data.json
 * &prototype=/syracuse-tablet/html/js/mocks/mobileDashboard_details_proto.json
 * &article=/syracuse-tablet/html/js/mocks/mobileDashboard_STD_EX_ERP_EXPENSES_DASHBOARD_article.json"
 */

var _getEntityFromPath = function(path) {
	return /\w*/.exec(path.split("/")[5]);
}

var _suffix_facets = {
	"$details": "detail",
	"$edit": "edit",
	"$create": "edit",
	"$query": "query",
	"$lookup": "lookup",
	"$queryItem": "query"
}

exports.fetchPageData = function($link, options) {
	options = options || {};
	var url = jsutils.parseURL($link.$url);
	var entity = _getEntityFromPath(url.path);
	var facetInfo = protoHelpers.getReprInfoFromUrl($link.$url);
	var prototypeUrl;
	var datasetUrl;
	var articleUrl;
	var isDashboard = url.path.indexOf("/mobileDashboard") >= 0;
	if (isDashboard) {
		// Put all mobileDashboard in a dedicated folder
		var key = protoHelpers.getKeyFromUrl(url.path);
		// Default proto - Same for all dashboards
		prototypeUrl = "/syracuse-tablet/html/js/mocks/mobileDashboard/" + (url.query.prototype || "$details") + "_proto.json";
		// Data key_data.json by default
		datasetUrl = "/syracuse-tablet/html/js/mocks/mobileDashboard/" + (url.query.dataset || key) + "_data.json";
		// Article key_article.json by default
		articleUrl = "/syracuse-tablet/html/js/mocks/mobileDashboard/" + (url.query.articleUrl || key) + "_article.json";
	} else {
		var suffixFacet = facetInfo && _suffix_facets[facetInfo.facet];
		var defBaseUrl = null;
		if (suffixFacet && entity) {
			defBaseUrl = jsutils.getUrlHost(url) + "/syracuse-tablet/html/js/mocks/" + entity + "/" + entity + "_" + suffixFacet + "_";
		}
		datasetUrl = url.query.dataset;
		if (defBaseUrl && datasetUrl == null) {
			datasetUrl = defBaseUrl + "data.json"
		}
		prototypeUrl = url.query.prototype;
		if (defBaseUrl && prototypeUrl == null) {
			// Used to manage multiple pprotod for an entity entity_query_proto_card, entity_query_proto_table
			var protoName = url.query.protoName;
			prototypeUrl = defBaseUrl + "proto" + (protoName ? "_" + protoName : "") + ".json";
		}
		articleUrl = url.query.article;
		if (defBaseUrl && articleUrl == null) {
			// Used to manage multiple articles for an entity entity_query_article_card, entity_query_article_table
			var articleName = url.query.articleName;
			articleUrl = defBaseUrl + "article" + (articleName ? "_" + articleName : "") + ".json";
		}
	}
	var prototypeJson;
	var datasetJson;
	var articleJson;
	var headers = {

	}

	return $.smResolve()
		.then(function() {
			return _ajax(prototypeUrl);
		})
		.then(function(result) {
			prototypeJson = result.data;
			if (facetInfo) {
				prototypeJson.$type = "{$baseType}." + entity + "." + facetInfo.facet;
			}
			if (url.query && url.query.draftId) {
				// Read the draft
				return sdataUtils.draftReadData(url.query.draftId)
			} else {
				return _ajax(datasetUrl);
			}
		})
		.then(function(result) {
			datasetJson = result.data || {};
			if (!isDashboard && protoHelpers.isLocaleUrl(datasetUrl)) {
				// Better for tests to renew id for not dashboard data
				datasetJson = datasetUtils.renewAllIds(datasetJson);
			}
			if (options.page && options.page.$article) {
				return {
					data: options.page.$article
				}
			} else {
				return _ajax(articleUrl, {
					acceptStatusCode: [404]
				});
			}
		})
		.then(function(result) {
			articleJson = result.data;
			if (!articleJson) {
				articleJson = articleParser.createDefaultArticle(new Prototype(prototypeJson));
			}
			return protoHelpers.checkTransform($link.$url, prototypeJson, datasetJson, {
				$article: articleJson
			});
		})
		.then(function(pageDataTransformed) {
			var pageData = {
				isWorkingCopy: false
			};

			pageData.prototype = new Prototype(pageDataTransformed.prototypeJson);
			if (url.query.draftId) {
				pageData.dataset = dataset.createFromDraft(pageDataTransformed.datasetJson, pageData.prototype);
			} else {
				pageData.dataset = new dataset.Dataset(pageDataTransformed.datasetJson, pageData.prototype);
			}
			pageData.page = pageDataTransformed.page;

			return pageData;
		});
}
exports.fetchDataset = function(key) {
	var datasetUrl = "/syracuse-tablet/html/js/mocks/mobileDashboard/" + key + "_data.json";
	return _ajax(datasetUrl);
}

function _ajax(url, opts) {
	var def = $.Deferred();

	var forceNoCache = "?" + (new Date()).getTime();

	ajax.request(url + forceNoCache, null, null, null, opts)
		.then(function(result) {
			_cachedUrls[url] = result;
			def.resolve(result);
		})
		.fail(function(cause) {
			if (_cachedUrls[url]) {
				def.resolve(_cachedUrls[url]);
			} else {
				def.reject(cause);
			}
		})
	return def.promise();
}

/**
 * Resolves with the prototype for a local url
 */
exports.getPrototype = function($url) {
	var url = jsutils.parseURL($url);
	var entity = _getEntityFromPath(url.path);
	var facetInfo = protoHelpers.getReprInfoFromUrl($url);
	var suffixFacet = facetInfo && _suffix_facets[facetInfo.facet];
	var defBaseUrl = null;
	if (suffixFacet && entity) {
		defBaseUrl = jsutils.getUrlHost(url) + "/syracuse-tablet/html/js/mocks/" + entity + "/" + entity + "_" + suffixFacet + "_";
	}
	var prototypeUrl = url.query.prototype;
	if (defBaseUrl && prototypeUrl == null) {
		var protoName = url.query.protoName;
		prototypeUrl = defBaseUrl + "proto" + (protoName ? "_" + protoName : "") + ".json";
	}
	return _ajax(prototypeUrl);
}