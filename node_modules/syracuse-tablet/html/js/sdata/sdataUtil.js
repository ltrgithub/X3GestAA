"use strict";
var helpers = require('syracuse-core/lib/helpers');

// TODO
// /!\ assuming there is a global variable that holds the main properties
var site = document.site;

//from jquery.smobile.sdata.js (with some changes)
var _functions = {
	month: function(value) {
		var date = $helpers.date.isoToDate(value);
		return date.getMonth();
	},
	year: function(value) {
		var date = $helpers.date.isoToDate(value);
		return date.getFullYear();
	},
	day: function(value) {
		var date = $helpers.date.isoToDate(value);
		return date.getDay();
	},
	left: function(value, index) {
		var length = parseInt((index || 0) + "", 10);
		return (value || "").substr(0, length);
	},
	right: function(value, index) {
		var length = parseInt((index || 0) + "", 10);
		var s = (value || ""),
			len = length(s);
		return s.substr(Math.max(0, len - length), length);
	},
	upper: function(value, index) {
		var s = (value || "");
		return s.toUpperCase();
	},
	lower: function(value, index) {
		var s = (value || "");
		return s.toLowerCase();
	},
	substring: function(value, start, len) {
		start = parseInt((start || 0) + "", 10);
		len = parseInt((len || 0) + "", 10);
		return (value || "").substr(start, len);
	},
	length: function(value) {
		return (value || "").length;
	},
	trim: function(value) {
		return (value || "").trim();
	},
	concat: function() {
		var res = [];
		for (var i = 0; i < arguments.length; i++)
			res.push(arguments[i]);
		return res.join('');
	},
	"char": function(code) {
		return String.fromCharCode(parseInt((code || 0) + "", 10));
	},
	"ascii": function(str) {
		if (str && str.length)
			return str.charCodeAt(0);
		return 0;
	},
	"abs": function(str) {
		var val = parseFloat(str) || 0.0;
		return Math.abs(val);
	},
	"round": function(str) {
		var val = parseFloat(str) || 0.0;
		return Math.round(val);
	},
	"floor": function(str) {
		var val = parseFloat(str) || 0.0;
		return Math.floor(val);
	},
	"ceil": function(str) {
		var val = parseFloat(str) || 0.0;
		return Math.ceil(val);
	},
	"pow": function() {
		var x = parseFloat(arguments[0]) || 0.0;
		var y = parseInt(arguments[1] || "0", 10) || 0;
		return Math.pow(x, y);
	}
};

// from jquery.smobile.sdata.js (with some changes)
function syncGetValue(data, field) {
	var values = field.split('.');
	var doContinue = false;
	var cd = data,
		oldData = null;
	if (!data)
		return null;
	values.forEach(function(name, idx) {
		if (doContinue)
			return;
		oldData = cd;
		cd = cd[name];
		var cacheid = cd ? (cd.$key || cd.$uuid) : false;
		if (cacheid && site && site.loadCache && site.loadCache[cacheid]) {
			cd = site.loadCache[cacheid].data;
		}
		doContinue = (cd == null);
	});
	return cd;
}

function getFunc(func) {
	return _functions(func);
}

function _exec(data, exp, proto) {
	if (exp.type == "identifier") {
		exp.property = syncGetValue(data, exp.value);
		// issue #3744 in X3 boolean properties has numeric values
		// and in the x3 filters (where clauses use numeric values 1(false) and
		// 2(true) for boolean properties)
		var item = proto && proto.$properties && proto.$properties.$resources ? proto.$properties.$resources.$item : null;
		if (item && item.$properties && item.$properties[exp.value] && item.$properties[exp.value].$type === "application/x-boolean") {
			exp.property = exp.property === true ? 2 : 1;
		}
	} else if (exp.type == "literal") {
		exp.property = (exp.dataType == "datetime") ? exp.svalue : exp.value;
	} else {
		if (exp.children) {
			var property = null;

			// propagate property from child to parent if operator if low level
			// operator
			if (exp.type == "operator") {
				switch (exp.value.code) {

					case "and":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						exp.property = (exp.children[0].property && exp.children[1].property);
						break;
					case "or":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						exp.property = (exp.children[0].property || exp.children[1].property);
						break;
					case "between":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						exp.property = (exp.children[0].property >= exp.children[1].property) && (exp.children[0].property <= exp.children[2].property);
						break;
					case ">=":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						exp.property = (exp.children[0].property >= exp.children[1].property);
						break;
					case ">":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						exp.property = (exp.children[0].property > exp.children[1].property);
						break;
					case "<=":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						exp.property = (exp.children[0].property <= exp.children[1].property);
						break;
					case "<":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						exp.property = (exp.children[0].property < exp.children[1].property);
						break;
					case "like_s":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						exp.property = (exp.children[0].property.toUpperCase()
							.indexOf(exp.children[1].property.toUpperCase()) === 0);
						break;
					case "like":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						var val = exp.children[1].property.toUpperCase().replace(
							/%/g, '');
						exp.property = (exp.children[0].property.toUpperCase()
							.indexOf(val) >= 0);
						break;
					case "=":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						if (exp.children[0].property == "0000-00-00" && exp.children[1].dataType === "datetime") {
							exp.children[0].property = "";
						}
						if (exp.children[1].property == "0000-00-00" && exp.children[0].dataType === "datetime") {
							exp.children[1].property = "";
						}
						exp.property = (exp.children[0].property == exp.children[1].property);
						break;
					case "<>":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						if (exp.children[0].property == "0000-00-00" && exp.children[1].dataType === "datetime") {
							exp.children[0].property = "";
						}
						if (exp.children[1].property == "0000-00-00" && exp.children[0].dataType === "datetime") {
							exp.children[1].property = "";
						}
						exp.property = (exp.children[0].property != exp.children[1].property);
						break;
					case ".":
						_exec(data, exp.children[0], proto);
						_exec(exp.children[0].property, exp.children[1], proto);
						exp.property = exp.children[1].property;
						break;
					default:
						exp.property = property;
						// propagate to literals
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
							if (child.type == "literal")
								child.property = property;
						});
				}
			} else if (exp.type == "function") {
				var args = [];
				if (exp.children) {
					exp.children.forEach(function(child) {
						_exec(data, child, proto);
						args.push(child.property);
					});
				}
				var hnd = getFunc(exp.value);
				if (hnd)
					exp.property = hnd(args);
			}
		}
	}
};

exports.execWhere = function(dataContext, exp, proto) {

	if (exp == null) {
		return true;
	}

	_exec(dataContext, exp, proto);

	return exp.property;

};