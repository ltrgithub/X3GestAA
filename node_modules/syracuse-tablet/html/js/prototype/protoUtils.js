"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');

var _protoProp = function(proto, prop) {
	if (prop === "$baseUrl") return {
		value: $helpers.baseUrl(),
		found: true,
		stop: true
	};
	var p = proto;
	if (prop.charAt(0) == "@") {
		while (p) {
			if (p && p.$localization && p.$localization.hasOwnProperty(prop)) return {
				value: p.$localization[prop],
				found: true,
				stop: true
			};
			p = p.$rprotoparent;
		}
	} else {
		while (p) {
			if (p.hasOwnProperty(prop)) return {
				value: p[prop],
				found: true
			};
			p = p.$protoparent;
		}
	}
	return {
		found: false
	};
};

var _dataProp = function(data, prop, proto) {
	if (prop === "$baseUrl") return {
		value: $helpers.baseUrl(),
		found: true,
		stop: true
	};
	var cd = data.data();
	while (cd) {
		if (cd.hasOwnProperty(prop)) {
			var pi = null;
			if (proto && proto.$properties && proto.$properties[prop]) {
				pi = proto.$properties[prop];
				//
			}
			return {
				value: cd[prop],
				found: true,
				pi: pi
			};
		}
		cd = data.parent(cd);
	}
	return {
		value: "",
		found: false
	};

};

var _formatOutValue = function(value, options, pi, data) {
	if (options.key) {
		return value;
	} else if (options.html) {
		if (pi) {
			if (options && options.list && (pi.$type === "application/x-reference")) {
				if (!value) value = null;
				data.add(value);
				value = $proto.parseExpression(pi.$item.$value, {
					data: data,
					$prototype: pi.$item
				}, "$value");
				data.pop();
				if (!value) value = "";
				return utils.htmlEncode(value + "");
			}
			return that.htmlValue(null, null, pi, {
				$type: pi.$type
			}, value, {
				useValue: true,
				list: options.list,
				cssPrefix: options.cssPrefix
			});
		} else return utils.htmlEncode(value + "");

	} else if (options.url) {
		return value;
	} else return value;
};

"use strict";

var _execExpression = function(expression, proto, data, level, options) {
	options = options || {};
	level = level || 0;
	expression = (expression || "") + "";
	if (!level) {
		if (expression.indexOf("{") < 0) {
			if (data) {
				var value = that._dataProp(data, expression, proto);
				if (value.found) {
					// Fix false value which was transformed to ""
					var vf = value.value == null ? "" : value.value;
					return that._formatOutValue(vf, options, value.pi,
						data);
				}
			}
		} else {
			if (options.html) {
				expression = $helpers.htmlEncode(expression);
			}

		}
	}
	var res = expression.replace(
		/\{(.*?)\}/g,

		function(match, prop) {
			var dvalue, pvalue, cv;
			if (!level && proto && !proto.noRef && proto.$protoparent && (proto.$protoparent.$type === "application/x-reference")) {
				pvalue = that._protoProp(proto, prop);
				if (!pvalue.found) {
					dvalue = data ? that._dataProp(data,
						prop, proto) : {
						found: false
					};
					if (!dvalue.found) {
						if ($helpers.trace.expressions) {
							$helpers.log(expression);
							$helpers.log("Not found:" + prop);
							$helpers.log("----------------------------------");
						};
					}
					cv = dvalue.value || "";
					return that._formatOutValue(cv,
						options, dvalue.pi, data);
				} else {
					if (pvalue.stop) {
						cv = pvalue.value || "";;
						return that._formatOutValue(cv,
							options, null, null);

					}
					if (pvalue.value.indexOf("{") >= 0) {
						var cp = proto;
						if (pvalue.value.indexOf("{" + prop + "}") >= 0) {
							cp = proto.$protoparent;
						}
						if (options.html) {
							pvalue.value = $helpers.htmlEncode(pvalue.value);
						}
						return that.execExpression(
							pvalue.value, cp, data,
							level + 1, options);
					} else {
						dvalue = data ? that._dataProp(
							data, prop, proto) : {
							found: false
						};
						if (!dvalue.found) {
							if ($helpers.trace.expressions) {
								$helpers.log(expression);
								$helpers.log("Not found:" + prop);
								$helpers.log("----------------------------------");
							}
						}
						cv = dvalue.value || "";
						return that._formatOutValue(cv,
							options, dvalue.pi, data);
					}
				}
			} else {
				dvalue = data ? that._dataProp(data, prop,
					proto) : {
					found: false
				};
				if (dvalue.found) {
					cv = dvalue.value || "";
					return that._formatOutValue(cv,
						options, dvalue.pi, data);
				}
				pvalue = (proto ? that._protoProp(proto,
					prop) : {
					found: false
				});
				if (!pvalue.found) {
					if ($helpers.trace.expressions) {
						$helpers.log(expression);
						$helpers.log("Not found:" + prop);
						$helpers.log("----------------------------------");
					}
					cv = "";
					if (options.keepBrackets) cv = "{" + prop + "}";
					return that._formatOutValue(cv,
						options, null, null);
				}
				if (pvalue.stop) {
					cv = pvalue.value || "";
					return that._formatOutValue(cv,
						options, null, null);
				}
				if (pvalue.value.indexOf("{") >= 0) {
					if (options.html) {
						pvalue.value = $helpers.htmlEncode(pvalue.value);
					}
					return that.execExpression(
						pvalue.value, proto, data,
						level + 1, options);
				}
				cv = pvalue.value || "";
				return that._formatOutValue(cv, options,
					null, null);
			}
		});
	return res || "";
};
var _parseExpression = function(expression, data, propName, options) {
	if (!options) {
		options = {};
		options.url = (propName === "$url");
		options.key = (propName === "$url") || (propName === "$key");
	}
	return _execExpression(expression, data.$prototype, data.data, 0, options);
};

exports.parseExpression = _parseExpression;