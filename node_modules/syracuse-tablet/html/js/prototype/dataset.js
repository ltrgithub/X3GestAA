"use strict";
var utils = require('syracuse-tablet/html/js/helpers/utils');

var _exprRegExp = /\{(.*?)\}/g;
var _execExpression = function(expression, dataset, prototype, level) {
	level = level || 0;
	expression = (expression || "") + "";
	if (level === 0 && expression.indexOf("{") < 0) {
		var value = dataset.value(expression);
		return value == null ? "" : value;
	}
	var prevProp = null;
	var res = expression.replace(_exprRegExp,
		function(match, prop) {
			// Search in data first - "{VACBPR}~{LEG}"
			var val = dataset.value(prop);
			if (val != null) return val;
			if (!prototype) return "";
			val = prototype.property(prop);
			if (val != null && val.indexOf("{") >= 0) {
				// Search in prototype - ex "{@7898}", "{$baseUrl}/$prototype('{$representation}.$thumb')"
				return _execExpression(val, dataset, prototype, level + 1);
			}
			return val == null ? "" : val;
		});
	return res || "";
};

var _DataSet = utils.defineClass(function(data, prototype, parent, options) {
	this.parent = parent;
	this.options = options || {};
	this.data = data || {};
	this.prototype = prototype || {};
	this.$properties = this.prototype.$properties || {};
}, null, {

	destroy: function() {

	},

	value: function(prop, value) {
		if (!prop || prop.length == 0) return null;
		if (value != null) {
			// TODO - eventually check proto rules
			return this.data[prop] = value;
		}
		return this.data[prop] ? this.data[prop] : this.parent ? this.parent.value(prop) : null;
	},

	/* Resolve expression according to current dataset and prototype*/
	parseExpression: function(expression) {
		return _execExpression(expression, this, this.prototype, 0);
	}
});
// for override only
exports.DataSet = _DataSet;

exports.create = function(data, parent, prototype, options) {
	return new _DataSet(data, parent, prototype, options);
};