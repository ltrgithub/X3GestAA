"use strict";

var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');

/* 
 * 
 * Html templates used by more that one panel
 * 
 */

var eventListener = require('syracuse-tablet/html/js/app/eventListener');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _multiSelActionsList = [{
	action: "multiSelTriggerDownload",
	params: "$download",
	title: "download"
}, {
	action: "multiSelActions",
	params: "$unselectall",
	title: "unselectall"
}, {
	action: "multiSelActions",
	params: "$selectall",
	title: "selectall"
}, {
	action: "multiSelActions",
	params: "$invert",
	title: "invert"
}, {
	action: "multiSelActions",
	params: "$hideunselected",
	title: "hideunselected"
}, {
	action: "multiSelActions",
	params: "$showunselected",
	title: "showunselected"
}];



var _html = {
	footer: {
		defaultItem: '<a href="#"\
			draggable="false" \
			data-menuitem-id="{{uniqueId}}" \
			class="s-m-link {{{css}}}" \
			{{{style}}} \
			{{{attrs}}}>\
			<i class="{{iconClass}}"></i>\
			<span>{{title}}</span>\
		</a>'
	},
	// same as footer except no title is rendered
	header: {
		defaultItem: '<a href="#"\
			draggable="false" \
			data-menuitem-id="{{uniqueId}}" \
			class="s-m-link {{{css}}}" \
			{{{style}}} \
			{{{attrs}}}>\
			<i class="{{iconClass}}"></i>\
		</a>'
	},
	actionPanel: {
		defaultItem: '<li data-menuitem-id="{{uniqueId}}"\
			class="s-m-link {{{css}}}" \
			{{{style}}} >\
			<a href="#"\
				draggable="false" \
				{{{attrs}}}>\
				<span class="s-m-text">{{title}}</span>\
			</a>\
		</li>'
	},
	globalPanel: {
		defaultItem: '<li data-menuitem-id="{{uniqueId}}">\
			<a href="#"\
				draggable="false" \
				class="s-m-link {{{css}}}" \
				{{{style}}} \
				{{{attrs}}}>\
				<i class="{{iconClass}}"></i>\
				<span class="s-m-text">{{title}}</span>\
			</a>\
		</li>',
		draftsItem: '<li data-menuitem-id="{{uniqueId}}">\
			<a href="#" \
				draggable="false" \
				class="s-m-link {{{css}}}" \
				style="{{{style}}}" \
				{{#if disabled}} disabled="true"{{/if}}>\
				<i class="{{iconClass}}"></i>\
				<span class="s-m-text">{{title}}<span class="badge" style="float: right;">{{count}}</span></span>\
			</a>\
		</li>'
	},
	multiSel: {
		menuActions: '\
			<div id="{{id}}" class="btn-group s-m-link {{{css}}}">\
				<div class="{{dropDirection}}">\
					<button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-expanded="false">\
						<span class="badge"></span><span class="title">{{title}}</span><span class="caret"></span>\
					</button>\
					<ul class="dropdown-menu dropdown-menu-{{dropPosition}}" role="menu">\
						{{#each links}}\
							<li><a  style="display:none" draggable="false" {{{attrs}}}>{{title}}</a></li>\
						{{/each}}\
					</ul>\
				</div>\
			</div>'
	}
};

var _templates = {};

function _getHtml(panel, name, ctx) {
	var tmpl = _templates[panel];
	if (!tmpl) {
		tmpl = _templates[panel] = {};
	}
	tmpl = tmpl[name];
	if (!tmpl) {
		tmpl = _templates[panel][name] = Handlebars.compile(_html[panel][name]);
	}
	return tmpl(ctx);
};

var _setDataActionAttrs = function(controllerId, item) {
	item.attrs = eventListener.getDataActionAttrs(controllerId, item.action, item.params, false) || {};
}


var _getMultiSelMenuActions = function(panelName, controllerId, includeDownload) {
	var dropDirection = panelName === "footer" ? "dropup" : "dropdown";
	var dropPosition = panelName === "footer" ? "right" : "left";
	var links = [];
	_multiSelActionsList.forEach(function(info) {
		if (includeDownload !== true && info.params === "download") {
			return;
		}
		links.push({
			title: locale.text("multiselect.action." + info.title),
			attrs: eventListener.getDataActionAttrs(controllerId, info.action, info.params, true)
		});
	});
	return _getHtml("multiSel", "menuActions", {
		id: "multiSelMenuActions",
		links: links,
		title: locale.text("multiselect.selected"),
		dropDirection: dropDirection,
		dropPosition: dropPosition
	});
};
/**
 * 
 */
exports.getItemHtml = function(panelName, item) {
	var html;
	var tpl;
	var attrs;
	var controllerId = item["controller-id"];

	item.attrs = null;
	item.style = null;
	item.css = null;

	if (item.action) {
		// Non sData actions
		if (item.action === "multiSelActions" || item.action === "multiSelActionsWithDownload") {
			return _getMultiSelMenuActions(panelName, controllerId, item.action === "multiSelActionsWithDownload");
		} else if (item.action === "pageDrafts") {
			tpl = "draftsItem";
			item.count = item.params;
			item.disabled = item.count < 1;
			// attrs is an object
			item.attrs = eventListener.getDataActionAttrs(controllerId, item.action, item.params);
		} else {
			tpl = "defaultItem";
			// attrs is an object
			item.attrs = eventListener.getDataActionAttrs(controllerId, item.action, item.params);
		}
		item.uniqueId = item.action; // Will be used to find item in the DOM later to apply dynamic meta data
	} else if (item.$link) {
		tpl = "defaultItem";
		item.attrs = eventListener.getSdataLinkAttrs(controllerId, item.$link);
		item.uniqueId = item.$link; // Will be used to find item in the DOM later to apply dynamic meta data
	} else if (item.$sdataAction) {
		tpl = "defaultItem";
		item.attrs = eventListener.getSdataActionAttrs(controllerId, item.$sdataAction);
		item.uniqueId = item.$sdataAction; // Will be used to find item in the DOM later to apply dynamic meta data
	}

	if (tpl) {
		if (item.icon && typeof item.icon === "string") {
			// Regular icons
			item.iconClass = fontUtils.panelActionIcon(item.icon);
		} else if (item.icon && item.icon.css) {
			// Icon given by authoring
			item.iconClass = item.icon.css;
		}
		item.attrs = item.attrs || {};
		item.css = [];
		if (item.disabled === true) {
			item.attrs.disabled = "true";
			item.css.push("disabled");
		}
		item.style = "";
		if (item.hidden === true) {
			item.style = [];
			item.style.push("display:none");
			item.style = item.style.join(";");
		}
		if (item.hidden === true || item.forceHeader === true) {
			// we want the action to stay in header whatever the available width (managed by the page)
			item.attrs["data-forceheader"] = "true";
		}
		// Convert to string
		item.attrs = uiutils.objectToHtmlAttrs(item.attrs);
		item.css = item.css.join(" ");
		if (item.style.length > 0) {
			item.style = ' style="' + item.style + '\" '
		}
		html = _getHtml(panelName, tpl, item);
	}

	return html;
}