"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').CtrlBase;
var uiSettings = require('syracuse-tablet/html/js/ui/uiSettings');

var navigationPageStack = require('syracuse-tablet/html/js/app/navigationPageStack');
var eventListener = require('syracuse-tablet/html/js/app/eventListener');
var modules = require('syracuse-tablet/html/js/common/modules');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _html = {
	items: '\
		<div class="s-m-items">\
		{{{itemsHtml}}}\
		</div>\
		',
	item: '<a draggable="false" \
		href="#" \
		{{{attrs}}} class="{{css}}"><div class="s-m-item">\
		<div class="s-m-text">{{text}}</div>\
		<div class="{{icon}}"></div>\
		</div></a>'
};
var _templates = {};

function _getHtml(name, ctx) {
	var tmpl = _templates[name];
	if (!tmpl) {
		tmpl = _templates[name] = Handlebars.compile(_html[name]);
	}
	return tmpl(ctx);
};
/**
 * 
 */
exports.BreadcrumbsTablet = utils.defineClass(function BreadcrumbsTablet(controller, type, article, opts) {
	Base.call(this, controller, type, article, opts);
	notifications.subscribe(this, "sm.header.panel.pressed");
	notifications.subscribe(this, "sm.page.click");
}, Base, {
	destroy: function() {
		notifications.unsubscribe(this);
		Base.prototype.destroy.call(this);

		// Do not call destroy since we did not create the adapter but just reference to it
		this.actionAdapter = null;
		this._stack = null;
	},

	//
	// START: Rendering
	// 
	buildHtml: function() {
		this.createRootElement(["s-m-panel", "s-m-control", "s-m-ctrl", "breadcrumbs"]);
		this._hide();
		this._stack = navigationPageStack.findClosest(this.$$elmt);

		this._buildItems();
	},

	_buildItems: function() {
		this.$$elmt.empty();
		if (!this._stack) {
			return;
		}
		var stackItems = this._stack.getStackItems();
		var items = [];
		var idx = 0;
		for (var i = 0; i < stackItems.length; i++) {
			var si = stackItems[i];
			if (si.noHistory !== true) {
				var attrs = eventListener.getDataActionAttrs(this.controller.id, "itemClicked", si.id, true);
				items.push(_getHtml("item", {
					attrs: attrs,
					text: si.title,
					notLast: idx !== 0,
					icon: this._getIcon(si.pageType),
					css: si.pageType
				}));
				idx++;
			}
		}
		var home = items.shift();
		var last = items.pop();
		items.reverse();
		items.unshift(home);
		items.push(last);
		this.$$elmt.append($(_getHtml("items", {
			itemsHtml: items.join("")
		})));

	},
	_getIcon: function(pageType) {
		switch (pageType) {
			case "home":
				return "fa fa-home";
				break;
			case "dashboard":
				return "fa fa-th";
				break;
			case "$details":
				return "fa fa-file";
				break;
			case "$lookup":
				return "fa fa-list-ul";
				break;
			case "$query":
				return "fa fa-list-ul";
				break;
			case "$create":
				return "fa fa-pencil";
				break;
			case "$edit":
				return "fa fa-pencil";
				break;
			case "chartDetail":
				return "fa fa-pie-chart";
				break;

		}
	},

	//
	// END: Rendering
	//
	setTop: function(top) {
		this.top = top;
	},
	/**
	 * 
	 */
	computeLayout: function(layoutInfo) {
		if (!this.$$container) {
			return;
		}
		this.$$container.css({
			top: this.top + "px"
		});
	},
	getDesiredHeight: function() {
		return uiSettings.getProp("breadcrumbs.height");
	},
	_actItemClicked: function(id) {
		var self = this;
		this._stack.goBackToId(id)
			.then(function(res) {
				if (!res) {
					self._hide();
				}
			})
			.fail(function(e) {
				modules.get("modal").error(e);
			});
	},
	createId: function(typeName) {
		return utils.readableuid(typeName);
	},
	/**
	 * Built with the rank of the layout in generation process to be reliable
	 */
	getUnitTestId: function() {
		if (this.options.index == null) return;
		return utils.unitTestId(this.typeName.toLowerCase(), this.options.index);
	},
	getGestureMgr: function() {
		return null;
	},
	notifHeaderPanelPressed: function() {
		this.$$container.is(":visible") ? this._hide() : this._show()
	},
	notifPageClick: function() {
		this._hide()
	},
	_hide: function() {
		this.$$container.hide()
	},
	_show: function() {
		this.$$container.show()
	}
});