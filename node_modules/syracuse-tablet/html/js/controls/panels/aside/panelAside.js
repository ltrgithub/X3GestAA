"use strict";

var Base = require('syracuse-tablet/html/js/controls/panels/aside/panelAsideBase').PanelAsideBase;
var utils = require('syracuse-tablet/html/js/helpers/utils');
var panelsHtml = require('syracuse-tablet/html/js/controls/panels/panelsHtml');


var _html = {
	content: '\
		<div class="container-fluid">\
			<div class="navbar-header">\
			{{#if htmlHeader}}\
				<span class="s-m-profile-photo"></span>\
				<span class="navbar-brand" href="#"><span>{{username}}</span>\
				<ul class="nav navbar-nav s-m-panel-slot {{slot}}">\
				{{{htmlHeader}}}\
				</ul>\
			{{else}}\
				<span class="navbar-brand" href="#"><span>{{title}}</span></a>\
			{{/if}}\
			</div>\
		</div>\
		{{{itemsBlockHtml}}}',
	slot: '\
		<ul class="nav navbar-nav">\
			{{#each actions}}\
				<li data-menuitem-id="{{id}}">\
					<a href="#" draggable="false" class="s-m-link" data-nevent="" data-controller-id="{{contolerID}}" data-naction="{{action}}">\
						<i class="{{iconClass}}"></i>\
						<span class="isLabel">{{title}}</span>\
					</a>\
				</li>\
			{{/each}}\
		</ul>',
	itemsBlock: '\
		<ul class="nav navbar-nav s-m-panel-slot {{slot}}">\
		</ul>',
}

var _templates = {};

function _getHtml(name, ctx) {
	var tmpl = _templates[name];
	if (!tmpl) {
		tmpl = _templates[name] = Handlebars.compile(_html[name]);
	}
	return tmpl(ctx);
};

exports.PanelAside = utils.defineClass(
	function PanelAside(controller, type, article, opts) {
		Base.call(this, controller, type, article, opts);
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
		},
		buildHtml: function() {
			var self = this;
			Base.prototype.buildHtml.call(this);
			var ctx = this._getContext();
			self.$$panelContent.html(_getHtml("content", ctx))
		},
		_getContext: function() {
			var self = this;
			var availableSlots = this._getAvailableSlots();
			var ctx = {},
				slots = {};
			var items = self._getItems();
			items.forEach(function(item) {
				if (item.slot === "header") {
					ctx.htmlHeader = self._getItemHtml(item);
					ctx.slot = item.slot
				} else {
					item.slot = item.slot || "unclassified"
					if (!availableSlots.find(function(slot) {
							return item.slot === slot
						})) {
						item.slot = "unclassified"
					}
					slots[item.slot] = slots[item.slot] || [];
					slots[item.slot].push(item);
				}
			});
			var $$itemsBlocksHtml = $("<div></div>");
			availableSlots.forEach(function(slotName) {
				var slot = slots[slotName];
				if (slot) {
					var $$itemsBlock = $(_getHtml("itemsBlock", {
						slot: slotName
					}));
					slot.forEach(function(item) {
						$$itemsBlock.append(self._getItemHtml(item))
					})
					$$itemsBlocksHtml.append($$itemsBlock);
				}

			})
			ctx = this._extendContext(ctx);
			ctx.itemsBlockHtml = $$itemsBlocksHtml.html();
			return ctx;
		},
		_getItemHtml: function(item) {
			return panelsHtml.getItemHtml("globalPanel", item)
		},
		_getItems: function() {
			//to overwrite
			return []
		},
		_extendContext: function(ctx) {
			//to overwrite if necessary
			return ctx;
		},
		_getAvailableSlots: function() {
			return ["unclassified"]
		}
	});