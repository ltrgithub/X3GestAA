"use strict";

var Base = require('syracuse-tablet/html/js/controls/panels/aside/panelAsideBase').PanelAsideBase;
var utils = require('syracuse-tablet/html/js/helpers/utils');
var panelsHtml = require('syracuse-tablet/html/js/controls/panels/panelsHtml');
var wpHelpers = require('syracuse-tablet/html/js/sdata/wpHelpers');
var modules = require('syracuse-tablet/html/js/common/modules');


var _html = {
	content: '\
		<div class="container-fluid">\
		{{#if htmlHeader}}\
			<div class="navbar-header">\
				<span class="s-m-profile-photo"></span>\
				<span class="navbar-brand" href="#"><span>{{username}}</span>\
				<ul class="nav navbar-nav s-m-panel-slot {{slot}}">\
				{{{htmlHeader}}}\
				</ul>\
			</div>\
		{{/if}}\
		</div>\
		{{{itemsBlockHtml}}}',
	itemsBlock: '\
		<ul class="nav navbar-nav s-m-panel-slot {{slot}}">\
		</ul>',
}

var _templates = {};

function _getHtml(name, ctx) {
	var tmpl = _templates[name];
	if (!tmpl) {
		tmpl = _templates[name] = Handlebars.compile(_html[name]);
	}
	return tmpl(ctx);
};

exports.PanelAside = utils.defineClass(
	function PanelAside(controller, type, article, opts) {
		Base.call(this, controller, type, article, opts);
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
		},
		buildHtml: function() {
			Base.prototype.buildHtml.call(this);
			this.buildHtmlContaint();
		},
		buildHtmlContaint: function() {
			var ctx = this._getContext();
			this.$$panelContent.html(_getHtml("content", ctx));
			if (this.page.actionAdapter.showPinPage === true) {
				var self = this;
				wpHelpers.isPagePinned(self.page.getPinPageId())
					.then(function(state) { //force notif on create panel
						self.notifPinStatusChange(state)
					})
			}
		},
		_getContext: function() {
			var self = this;
			var availableSlots = this._getAvailableSlots();
			var ctx = {},
				slots = {};
			var items = self._filterItems(self._getItems());
			items.forEach(function(item) {
				if (item.slot === "header") {
					ctx.htmlHeader = self._getItemHtml(item);
					ctx.slot = item.slot
				} else {
					item.slot = item.slot || "unclassified"
					if ($.inArray(item.slot, availableSlots) === -1) {
						item.slot = "unclassified"
					}
					slots[item.slot] = slots[item.slot] || [];
					slots[item.slot].push(item);
				}
			});
			var $$itemsBlocksHtml = $("<div></div>");
			availableSlots.forEach(function(slotName) {
				var slot = slots[slotName];
				if (slot) {
					var $$itemsBlock = $(_getHtml("itemsBlock", {
						slot: slotName
					}));
					slot.forEach(function(item) {
						$$itemsBlock.append(self._getItemHtml(item))
					})
					$$itemsBlocksHtml.append($$itemsBlock);
				}

			})
			ctx = this._extendContext(ctx);
			ctx.itemsBlockHtml = $$itemsBlocksHtml.html();
			return ctx;
		},
		_getItemHtml: function(item) {
			return panelsHtml.getItemHtml("globalPanel", item)
		},
		_getItems: function() {
			//to overwrite
			return []
		},
		_filterItems: function(items) {
			var self = this;
			return items.filter(function(item) {
				if (!(self.controller.isActionHidden && self.controller.isActionHidden(item.action))) {
					return true;
				}
			})
		},
		_extendContext: function(ctx) {
			//to overwrite if necessary
			return ctx;
		},
		_getAvailableSlots: function() {
			return ["unclassified"]
		},
		show: function() {
			Base.prototype.show.call(this);
			var self = this;
			/**
			 * Drafts status
			 * Each time the aside panel is shown
			 * There can be multiple panels (per page) and the regular notification in draftCount doesn't work
			 */
			this._$$draftsList = this.$$elmt.find('a[data-naction="draftsList"]');
			if (this._$$draftsList.length == 0) {
				return;
			}
			setTimeout(function() {
				self._checkDraftsChanged();
			});
		},
		_checkDraftsChanged: function() {
			this.enableAction("draftsList", false);
			var self = this;
			// toggle draftList link status
			modules.get("storage").getStorage().draftOperation("draftCount").then(function(count) {
				if (self.$$elmt == null) {
					return;
				}
				self.enableAction("draftsList", count > 0);
				var $badge = self._$$draftsList.find("span.badge");
				if ($badge.length === 0) {
					$badge = $('<span class="badge"/>').appendTo(self._$$draftsList);
				}
				$badge.text(count);
			});
		}
	});