"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var selectorFactory = require('syracuse-tablet/html/js/ui/datetimeSelectors/selectorFactory');
var authPropsGeneral = require('syracuse-tablet/html/js/authoring/authoringPropertiesGeneral');
var authComponents = require('syracuse-tablet/html/js/authoring/authoringComponents');

var Base = require('syracuse-tablet/html/js/controls/panels/aside/panelAsideBase').PanelAsideBase;

var _templates = {
	main: '\
				<div class="s-m-scroll-elmt" style="padding-left:5px;padding-right:5px;">\
				{{#if liveTile}}\
					<div class="modal-subtitle">{{liveTile.title}}</div> \
					<div class=""> \
						<div class="form-group"> \
							<table class="s-m-livetile" style="table-layout:fixed;width:100%;border-spacing:5px;border-collapse:separate;">\
							{{#each liveTile.items}}\
							{{# unless this.disabled}}\
							<tr>\
							<td>{{this.label}}</td>\
							<td>\
							{{#if this.picker }}\
								<div  class="input-group" id="{{this.id}}" style="width:100%">\
								<\div>\
							{{else}}\
								<input type="text" \
								{{#if this.mandatory}}\
									mandatory="mandatory"\
								{{/if}}\
								class="form-control" size="{{this.size}}" id="{{this.id}}" value="{{defaultValue}}">\
							{{/if}}\
							</td>\
							</tr> \
							{{/unless}}\
							{{/each}}\
							</table> \
							<div class="btn-group btn-group-justified" role="group">\
								<a type="button" class="btn btn-default" data-nevent data-naction="liveTileCreate" data-control-id="{{ctrlId}}" disabled>{{liveTile.btnApply}}</a>\
							</div>\
						</div> \
					</div>\
				{{/if}}\
				{{#if vignette.liveTile}}\
					<div class="modal-subtitle">{{vignette.liveTile.title}}</div> \
					<div class=""> \
						<div class="form-group"> \
							<table class="s-m-livetile"  style="table-layout:fixed;width:100%;border-spacing:5px;border-collapse:separate;">\
							{{#each vignette.liveTile.items}}\
							{{# unless this.disabled}}\
							<tr>\
							{{#if this.picker }}\
								<td>{{this.label}}</td>\
								<td>\
								<div  class="input-group" id="{{this.id}}" style="width:100%">\
								<\div>\
								</td>\
							{{else}}\
								{{#if this.select}}\
									{{#if ../../../../../singleVignette}}\
										<input type="hidden" id="{{this.id}}" value="{{../singleVignette}}">\
									{{else}}\
									<td>{{this.label}}</td>\
									<td>\
									<select class="form-control"  id="{{this.id}}"  data-nevent data-naction="{{this.dataAction}}" data-control-id="{{../ctrlId}}">\
										<option value="">{{this.emptyOptionLabel}}</option>\
									{{#each ../vignette.items}}\
										<option value="{{this.id}}">{{this.title}}</option>\
									{{/each}}\
									</select>\
									</td>\
									{{/if}}\
								{{else}}\
									<td>{{this.label}}</td>\
									<td>\
									<input type="text"  \
										{{#if this.mandatory}}\
										mandatory="mandatory"\
										{{/if}}\
										class="form-control" size="{{this.size}}" id="{{this.id}}" value="">\
									</td>\
								{{/if}}\
							{{/if}}\
							</tr> \
							{{/unless}}\
							{{/each}}\
							</table> \
							<div class="btn-group btn-group-justified" role="group">\
								<a type="button" class="btn btn-default"  data-nevent data-naction="liveTileCreate" data-control-id="{{ctrlId}}">{{vignette.liveTile.btnApply}}</a>\
							</div>\
						</div> \
					</div>\
				{{/if}}\
				{{#if scheduleMessage}}\
					<div class="modal-subtitle">{{scheduleMessage.title}}</div> \
					<div class=""> \
						<div class="form-group"> \
							<table class="s-m-schedulemsg"  style="table-layout:fixed;width:100%;border-spacing:5px;border-collapse:separate;">\
							{{#each scheduleMessage.items}}\
							<tr>\
							<td>{{this.label}}</td>\
							<td>\
							{{#if this.picker }}\
								<div  class="input-group">\
									<input type="text" readonly="true" class="form-control" size="{{this.size}}" id="{{this.id}}" value="">\
									<span class="input-group-btn">\
										<button data-control-id="{{../../ctrlId}}" data-nevent data-naction="{{this.dataAction}}" data-params="{{this.id}} "class="btn btn-default">\
										<span class="{{this.icon}}"></span>\
									<\span>\
								<\div>\
							{{else}}\
								<input type="text"  \
								{{#if this.mandatory}}\
									mandatory="mandatory"\
								{{/if}}\
								class="form-control" size="{{this.size}}" id="{{this.id}}" value="">\
							{{/if}}\
							</td>\
							</tr>\
							{{/each}}\
							</table> \
							<div class="btn-group btn-group-justified" role="group">\
								<a type="button" class="btn btn-default"  data-nevent data-naction="reminderCreate" data-control-id="{{ctrlId}}">{{scheduleMessage.btnApply}}</a>\
							</div>\
						</div> \
					</div>\
				{{/if}}\
				{{#if share}}\
					<div class="modal-subtitle" >{{share.title}}</div> \
					<div class="btn-group btn-group-justified" role="group">\
						<a type="button" href="#" class="btn btn-default" data-control-id="{{ctrlId}}" data-nevent data-naction="sharePageLink">\
							<i class="{{share.icon}}"/>\
						<span>{{{share.label}}}</span>\
						</a>\
					</div> \
				{{/if}}\
				<\div>'
};
var _liveTile = [{
	disabled: true,
	id: "vignette",
	select: true,
	dataAction: "choice",
	mandatory: true,
	size: 30
}, {
	disabled: false,
	id: "backgroundColor",
	size: 10,
	picker: true,
	component: "colorPalettePicker"
}, {
	disabled: false,
	id: "description",
	type: "application/x-string",
	defaultValue: "",
	size: 50,
	mandatory: true
}];
var _scheduleMsgItems = [{
	id: "date",
	size: 10,
	type: "application/x-date",
	icon: fontUtils.getIconByName("datePicker"),
	picker: true,
	dataAction: "datePicker",
	mandatory: true
}, {
	id: "time",
	size: 10,
	type: "application/x-time",
	icon: fontUtils.getIconByName("timePicker"),
	picker: true,
	dataAction: "timePicker",
	mandatory: true
}, {
	id: "description",
	size: 50,
	type: "application/x-string",
	mandatory: true
}];
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	if (!tmpl) alert("template " + name + " not found");
	return tmpl(ctx);
};

// date YYYY-MM-DD" Time: "HH:MM-:SS"
var _getDateTimeInfo = function(date, time) {
	if (!date) return null;
	date = date.split("-");
	if (date.length !== 3) return null;
	var res = {};
	res.year = date[0];
	res.month = date[1];
	res.day = date[2];
	time = time ? time.split(":") : [];
	if (time.length == 3) {
		res.hours = time[0];
		res.minutes = time[1];
		res.seconds = time[2];
	}
	return res;
};
exports.PanelShare = utils.defineClass(
	function PanelShare(controller, $type, article, options) {
		Base.call(this, controller, $type, article, options);
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
		},
		buildHtml: function() {
			var self = this;
			this._context = this._getContext();
			Base.prototype.buildHtml.call(this);
			this.$$elmt.addClass(this.typeName);
			if (this.$$panel) {
				this.$$panel.remove();
			}
			this.$$panel = this.buildPanel(this._context);
			if (this.$$panel && this.$$panel.length) {
				this.$$panelContent.append(this.$$panel);
				var component;
				_liveTile.forEach(function(item) {
					if (item.component) {
						self.components = self.components || {};
						var $$item = self.$$elmt.find(".s-m-livetile #" + item.id);
						var opts = {};
						switch (item.component) {
							case "colorPalettePicker":
								opts = {
									id: item.id,
									palette: authPropsGeneral.getColorPalette(),
									dropUp: false,
									onSelectColor: jsutils.bindFn(self._colorChange, self)
								};
								break;
						}
						self.components[item.id] = authComponents.newComponent(item.component, opts);
						self.components[item.id].createMarkup($$item);

					};
				});
			};
			this.$$panel.on('input', "[mandatory]", jsutils.bindFn(this._setButtonsStat, this));
		},

		onClickPanel: function(event) {
			return;
		},

		show: function() {
			if (!this.$$elmt) {
				this.buildHtml();
			}
			this._makeVisible();
			this._setData();
		},
		hide: function() {
			this._makeInvisible();
		},
		_colorChange: function(value) {
			/*
			 * bgColor: "rgb(0, 159, 218)"
				color: "rgb(255, 255, 255)"
				css: "s-m-color-blue"
				id: "blue"
				name: "Blue",
				hex:""
			 */
			// colors are given by componet (jQuery.css)
			this.liveTile.backgroundColor = value ? value.hex : null;
			// Color is set even if not needed - Code review
			this.liveTile.color = value ? value.hex : null;
		},
		/**
		 * Override this method to build child class
		 */
		buildPanel: function(context) {
			return $(_getHtml("main", context));
		},
		hasLinks: function() {
			return true;
		},
		_getContext: function() {
			var pageContext = this.controller.getShareContext();
			var ctx = {
				ctrlId: this.id,
				side: this.side
			};
			var buildCtxLiveTile = function(ctx) {
				var ctx;
				_liveTile.forEach(function(item) {
					item.label = locale.text("liveTile." + item.id + ".label");
					if (item.select) item.emptyOptionLabel = locale.text("liveTile." + item.id + ".label.emptychoice");
					if (item.defaultValue !== undefined) {
						item.defaultValue = ctx.title;
					}
				});
				ctx = {
					title: locale.text("liveTile.page.subtitle"),
					btnApply: locale.text("liveTile.apply.label"),
					items: _liveTile
				};
				return ctx;
			};
			var buildCtxScheduleMessage = function() {
				var ctx;
				_scheduleMsgItems.forEach(function(item) {
					item.label = locale.text("schedule.message." + item.id + ".label");
				});
				ctx = {
					title: locale.text("schedule.message.page.subtitle"),
					btnApply: locale.text("schedule.message.apply.label"),
					items: _scheduleMsgItems
				};
				return ctx;
			};
			var builCtxShare = function() {
				var ctx;
				ctx = {
					title: locale.text("share.page.subtitle"),
					icon: fontUtils.pageIcon("nativeShare"),
					label: locale.text("action.nativeShare")
				};
				return ctx;
			};
			ctx.title = pageContext.ctx.pageTitle || "";
			if (pageContext.opt.liveTile) {
				ctx.liveTile = buildCtxLiveTile(ctx);
			};
			if (pageContext.opt.scheduleMessage) {
				ctx.scheduleMessage = buildCtxScheduleMessage();
			};
			if (pageContext.opt.share) {
				ctx.share = builCtxShare();
			};
			pageContext.vignettes.forEach(function(vignette) {
				ctx.vignette = ctx.vignette || {};
				ctx.vignette.items = ctx.vignette.items || [];
				ctx.vignette.items.push({
					opt: vignette.opt,
					title: vignette.ctx.pageTitle,
					id: vignette.id
				});
				Object.keys(vignette.opt).forEach(function(key) {
					ctx.vignette[key] = ctx.vignette[key] || vignette.opt[key] || false;
				});
			});
			ctx.singleVignette = (pageContext.vignettes.length === 1) ? ctx.vignette.items[0].id : false;
			if (ctx.vignette && ctx.vignette.liveTile) {
				this._getItemLiveTile("vignette").disabled = false;
				ctx.vignette.liveTile = buildCtxLiveTile(ctx);
			} else {
				this._getItemLiveTile("vignette").disabled = true;
			}
			return ctx;
		},
		_setData: function() {
			var self = this;
			if (!self._context) return;
			this.liveTile = {};
			if (self._context.scheduleMessage) {
				_scheduleMsgItems.forEach(function(item) {
					var $$item = self.$$elmt.find(".s-m-schedulemsg #" + item.id);
					$$item.val("");
					$$item.attr("isoValue", "");
				});
			}
			if (self._context.vignette) {
				if (self._context.singleVignette) {
					self.$$elmt.find(".s-m-livetile #description").val(self._context.vignette.items[0].title);
				} else {
					_liveTile.forEach(function(item) {
						if (!item.disabled) {
							if (!item.component) {
								self.$$panel.find(".s-m-livetile #" + item.id).val("");
							}
						}
					});
				}
			};
			if (self.components) {
				Object.keys(self.components).forEach(function(key) {
					self.components[key].setValue("");
				});
			}
			this._setButtonsStat();
		},
		_setButtonsStat: function() {
			var self = this;
			var btnCreate = self.$$elmt.find("a[data-naction='liveTileCreate']"),
				disable = false,
				val = "";
			_liveTile.forEach(function(item) {
				if (!item.disabled && item.mandatory) {
					disable = disable || (self.$$panel.find(".s-m-livetile #" + item.id).val() == "");
				}
			});
			if (disable) {
				btnCreate.attr("disabled", "disabled");
			} else {
				btnCreate.removeAttr("disabled");
			};
			btnCreate = self.$$elmt.find("a[data-naction='reminderCreate']"), disable = false, val = "";
			_scheduleMsgItems.forEach(function(item) {
				if (!item.disabled && item.mandatory) {
					disable = disable || (self.$$panel.find(".s-m-schedulemsg #" + item.id).val() == "");
				}
			});
			if (disable) {
				btnCreate.attr("disabled", "disabled");
			} else {
				btnCreate.removeAttr("disabled");
			};
		},
		onValueChange: function() {
			this._setButtonsStat();
		},
		_getItemLiveTile: function(id) {
			var found;
			_liveTile.some(function(item) {
				if (item.id === id) {
					found = item;
					return true;
				}
			});
			return found;
		},
		_actChoice: function(id) {
			var btnCreate = this.$$elmt.find("a[data-naction='liveTileCreate']");
			var value = this.$$elmt.find(".s-m-livetile #vignette").val();
			var itemDescription = this._getItemLiveTile("description");
			if (itemDescription && !itemDescription.disabled && itemDescription.defaultValue !== undefined) {
				this.$$elmt.find(".s-m-livetile #description").val(value ? this.$$elmt.find(".s-m-livetile #vignette option:selected").text() : "");
			}
			this._setButtonsStat();
		},
		_actDatePicker: function(id) {
			selectorFactory.createSelector(new _Field("application/x-date", this.$$panel.find(".s-m-schedulemsg #" + id), locale.text("schedule.message." + id + ".label"), this));
		},
		_actTimePicker: function(id) {
			selectorFactory.createSelector(new _Field("application/x-time", this.$$panel.find(".s-m-schedulemsg #" + id), locale.text("schedule.message." + id + ".label"), this));
		},
		_actReminderCreate: function() {
			var schedule = {},
				self = this;
			_scheduleMsgItems.forEach(function(item) {
				var val = self.$$panel.find(".s-m-schedulemsg #" + item.id).attr("isoValue");
				if (val) {
					schedule[item.id] = schedule[item.id] || {};
					schedule[item.id].$type = item.$type;
					schedule[item.id].value = val;
				}
			});
			if (schedule.date && schedule.time) {
				var content = {
					Severity: "reminder",
					Text1: self._context.title,
					Text2: schedule["description"] ? schedule["description"].value : "",
					ScheduleTime: schedule["date"].value + " " + schedule["time"].value,
					ScheduleTimeJSON: _getDateTimeInfo(schedule["date"].value, schedule["time"].value)
				};
				this.controller.share("schedule", content)
				_scheduleMsgItems.forEach(function(item) {
					self.$$panel.find(".s-m-schedulemsg #" + item.id).val("");
				});
			}
			self._makeInvisible();
		},
		_actSharePageLink: function() {
			this.controller.share("link")
			this._makeInvisible();
		},
		_actLiveTileCreate: function() {
			var self = this,
				content = {};
			var val;
			_liveTile.forEach(function(item) {
				if (!item.disabled) {
					if (self.liveTile && self.liveTile[item.id]) {
						content[item.id] = self.liveTile[item.id];
					} else {
						content[item.id] = self.$$panel.find(".s-m-livetile #" + item.id).val();
					}
				}
			});
			if (content) {
				if (self.liveTile.color) {
					// color of the text is propagated
					content.color = self.liveTile.color;
				}
				content.title = content.description;
				delete content.description;
				this.controller.share("liveTile", content);
			}
			this._makeInvisible();
		}
	});

var _Field = utils.defineClass(
	function(type, item, title, panel) {
		this.$type = type;
		this.$title = title;
		this.$$item = item;
		this.panel = panel;
	}, null, {
		setFieldValueFromSelector: function(value) {
			this.$$item.attr("isoValue", value);
			this.$$item.val(this._getFormattedValue(value));
			if (this.panel.onValueChange) {
				this.panel.onValueChange();
			};
			this.destroy();
		},
		_getFormattedValue: function(value) {
			var formatter = formatApi.getFormatter(this.$type);
			return formatter.formatValue(value, false);
		},
		getValue: function() {
			return this.$$item.attr("isoValue");
		},
		getTitle: function() {
			return this.$title;
		},
		destroy: function() {;
			this.$$item = this.panel = null;
		}
	});