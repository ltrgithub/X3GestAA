"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var selectorFactory = require('syracuse-tablet/html/js/ui/datetimeSelectors/selectorFactory');
var authPropsGeneral = require('syracuse-tablet/html/js/authoring/authoringPropertiesGeneral');
var authComponents = require('syracuse-tablet/html/js/authoring/authoringComponents');
var modules = require('syracuse-tablet/html/js/common/modules');
var native = require('syracuse-tablet/html/js/helpers/native/native');
var sharedContext = require('syracuse-tablet/html/js/helpers/sharedContext');

var Base = require('syracuse-tablet/html/js/controls/panels/aside/panelAsideBase').PanelAsideBase;

var _templates = {
	share: '\
	<div class="modal-subtitle" >{{share.title}}</div> \
	<div class="btn-group btn-group-justified" role="group">\
		<a type="button" href="#" class="btn btn-default" data-control-id="{{ctrlId}}" data-nevent data-naction="sharePageLink">\
			<i class="{{share.icon}}"/>\
		<span>{{{share.label}}}</span>\
		</a>\
	</div>',

	scheduleMessage: '\
	<div class="modal-subtitle">{{scheduleMessage.title}}</div> \
	<div class=""> \
		<div class="form-group"> \
			<table class="s-m-schedulemsg">\
			{{#each scheduleMessage.items}}\
			<tr>\
			<td>{{this.label}}</td>\
			<td>\
			{{#if this.picker }}\
				<div  class="input-group">\
					<input type="text" readonly="true" class="form-control" size="{{this.size}}" id="{{this.id}}" value="">\
					<span class="input-group-btn">\
						<button data-control-id="{{../../ctrlId}}" data-nevent data-naction="{{this.dataAction}}" data-params="{{this.id}} "class="btn btn-default">\
						<span class="{{this.icon}}"></span>\
					<\span>\
				<\div>\
			{{else}}\
				<input type="text"  \
				{{#if this.mandatory}}\
					mandatory="mandatory"\
				{{/if}}\
				class="form-control" size="{{this.size}}" id="{{this.id}}" value="">\
			{{/if}}\
			</td>\
			</tr>\
			{{/each}}\
			</table> \
			<div class="btn-group btn-group-justified" role="group">\
				<a type="button" class="btn btn-default"  data-nevent data-naction="scheduleMessage" data-control-id="{{ctrlId}}">{{scheduleMessage.btnApply}}</a>\
			</div>\
		</div> \
	</div>',

	liveTile: '\
		<div class="modal-subtitle">{{liveTile.title}}</div> \
		<div class=""> \
			<div class="form-group"> \
				<table class="s-m-livetile">\
				{{#each liveTile.items}}\
				{{#unless this.disabled}}\
				<tr>\
				{{#if this.picker }}\
					<td>{{this.label}}</td>\
					<td>\
					<div  class="input-group" id="{{this.id}}" style="width:100%">\
					<\div>\
					</td>\
				{{else}}\
					{{#if this.select}}\
						<td>{{this.label}}</td>\
						<td>\
						<select class="form-control" id="{{this.id}}" data-nevent data-naction="{{this.dataAction}}" data-control-id="{{../ctrlId}}">\
							{{#each pages}}\
								<option value="{{this.id}}">{{this.title}}</option>\
							{{/each}}\
						</select>\
						</td>\
					{{else}}\
						<td>{{this.label}}</td>\
						<td>\
						<input type="text"  \
							{{#if this.mandatory}}\
							mandatory="mandatory"\
							{{/if}}\
							class="form-control" size="{{this.size}}" id="{{this.id}}" value="">\
						</td>\
					{{/if}}\
				{{/if}}\
				</tr> \
				{{/unless}}\
				{{/each}}\
				</table> \
				<div class="btn-group btn-group-justified" role="group">\
					<a type="button" class="btn btn-default"  data-nevent data-naction="liveTileCreate" data-control-id="{{ctrlId}}">{{liveTile.btnApply}}</a>\
				</div>\
			</div> \
		</div>'
};
var _blocks = ["liveTile", "scheduleMessage", "share"];
var _liveTile = [{
	disabled: false,
	id: "vignette",
	select: true,
	dataAction: "choice",
	mandatory: true,
	size: 30
}, {
	disabled: false,
	id: "backgroundColor",
	size: 10,
	picker: true,
	component: "colorPalettePicker"
}, {
	disabled: false,
	id: "description",
	type: "application/x-string",
	defaultValue: "",
	size: 50,
	mandatory: true
}];
var _scheduleMsgItems = [{
	id: "date",
	size: 10,
	type: "application/x-date",
	icon: fontUtils.getIconByName("datePicker"),
	picker: true,
	dataAction: "datePicker",
	mandatory: true
}, {
	id: "time",
	size: 10,
	type: "application/x-time",
	icon: fontUtils.getIconByName("timePicker"),
	picker: true,
	dataAction: "timePicker",
	mandatory: true
}, {
	id: "description",
	size: 50,
	type: "application/x-string",
	mandatory: true
}];
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	if (!tmpl) alert("template " + name + " not found");
	return tmpl(ctx);
};

exports.PanelShare = utils.defineClass(
	function PanelShare(controller, $type, article, options) {
		options.noCloseOnClick = true;
		Base.call(this, controller, $type, article, options);

		this.initPublishOptions();
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
		},

		initPublishOptions: function() {
			var self = this;
			var navStack = modules.get("navStack").getMainStack();
			var currentPage = navStack && navStack.getTopPage();
			this._htmlContext = {
				ctrlId: this.id
			};
			this._publishOptions = currentPage.getPublishOptions();

			_blocks.forEach(function(block) {
				if (self._publishOptions[block]) {
					self["_" + block]();
				}
			});
		},
		_liveTile: function() {
			var ctx;
			_liveTile.forEach(function(item) {
				item.label = locale.text("liveTile." + item.id + ".label");
			});
			ctx = {
				title: locale.text("liveTile.page.subtitle"),
				btnApply: locale.text("liveTile.apply.label"),
				items: _liveTile
			};
			_liveTile[0].pages = [];
			this._publishOptions.liveTile.pages.forEach(function(page) {
				_liveTile[0].pages.push({
					id: page.id,
					title: page.getPageTitle()
				});
			});
			this._htmlContext.liveTile = ctx;
		},
		_scheduleMessage: function() {
			var ctx;
			_scheduleMsgItems.forEach(function(item) {
				item.label = locale.text("schedule.message." + item.id + ".label");
			});
			ctx = {
				title: locale.text("schedule.message.page.subtitle"),
				btnApply: locale.text("schedule.message.apply.label"),
				items: _scheduleMsgItems
			};
			this._htmlContext.scheduleMessage = ctx;
		},
		_share: function() {
			var ctx = {
				title: locale.text("share.page.subtitle"),
				icon: fontUtils.pageIcon("nativeShare"),
				label: locale.text("action.nativeShare")
			};
			this._htmlContext.share = ctx;
		},
		buildHtml: function() {
			var self = this;
			Base.prototype.buildHtml.call(this);
			this.$$elmt.addClass(this.typeName);

			_blocks.forEach(function(block) {
				if (self._htmlContext[block]) {
					var html = _getHtml(block, self._htmlContext);
					self.$$panelContent.append($(html));
				}
			})

			_liveTile.forEach(function(item) {
				if (item.component) {
					self.components = self.components || {};
					var $$item = self.$$panelContent.find(".s-m-livetile #" + item.id);
					var opts = {};
					switch (item.component) {
						case "colorPalettePicker":
							opts = {
								id: item.id,
								palette: authPropsGeneral.getColorPalette(),
								dropUp: false,
								onSelectColor: jsutils.bindFn(self._colorChange, self)
							};
							break;
					}
					self.components[item.id] = authComponents.newComponent(item.component, opts);
					self.components[item.id].createMarkup($$item);

				};
			});
			if (this._publishOptions.liveTile) {
				this._actChoice(this._publishOptions.liveTile.pages[0].id)
				if (this._publishOptions.liveTile.pages.length < 2) {
					this.$$panelContent.find(".s-m-livetile #vignette").parent().parent().hide();
				}
			}

			this.$$panelContent.on('input', "[mandatory]", jsutils.bindFn(this._setButtonsStat, this));
			this._setButtonsStat();
			return;
		},
		_colorChange: function(value) {
			this._backgroundColor = value ? value.hex : null;
		},
		_setButtonsStat: function() {
			var self = this;
			var btnCreate = self.$$elmt.find("a[data-naction='liveTileCreate']"),
				disable = false,
				val = "";
			_liveTile.forEach(function(item) {
				if (!item.disabled && item.mandatory) {
					disable = disable || (self.$$panelContent.find(".s-m-livetile #" + item.id).val() == "");
				}
			});
			if (disable) {
				btnCreate.attr("disabled", "disabled");
			} else {
				btnCreate.removeAttr("disabled");
			};
			btnCreate = self.$$elmt.find("a[data-naction='scheduleMessage']"), disable = false, val = "";
			_scheduleMsgItems.forEach(function(item) {
				if (!item.disabled && item.mandatory) {
					disable = disable || (self.$$panelContent.find(".s-m-schedulemsg #" + item.id).val() == "");
				}
			});
			if (disable) {
				btnCreate.attr("disabled", "disabled");
			} else {
				btnCreate.removeAttr("disabled");
			};
		},
		onValueChange: function() {
			this._setButtonsStat();
		},
		_getItemLiveTile: function(id) {
			var found;
			_liveTile.some(function(item) {
				if (item.id === id) {
					found = item;
					return true;
				}
			});
			return found;
		},
		_actChoice: function(id) {
			var btnCreate = this.$$elmt.find("a[data-naction='liveTileCreate']");
			var value = this.$$elmt.find(".s-m-livetile #vignette").val();
			var itemDescription = this._getItemLiveTile("description");
			if (itemDescription && !itemDescription.disabled && itemDescription.defaultValue !== undefined) {
				this.$$elmt.find(".s-m-livetile #description").val(value ? this.$$elmt.find(".s-m-livetile #vignette option:selected").text() : "");
			}
			this._setButtonsStat();
		},
		_actDatePicker: function(id) {
			selectorFactory.createSelector(new _Field("application/x-date", this.$$panelContent.find(".s-m-schedulemsg #" + id), locale.text("schedule.message." + id + ".label"), this));
		},
		_actTimePicker: function(id) {
			selectorFactory.createSelector(new _Field("application/x-time", this.$$panelContent.find(".s-m-schedulemsg #" + id), locale.text("schedule.message." + id + ".label"), this));
		},
		_actSharePageLink: function() {
			var self = this;
			_getShareDeepLink(self._publishOptions.share.page)
				.then(function(deepLink) {
					var opts = {
						pageData: {
							Title: deepLink.Title,
							DeepLink: deepLink
						}
					};
					var cap = native.getModule("share");
					if (cap) {
						return cap.sharePageLink(opts);
					}
				})
				.then(function() {
					this._makeInvisible();
				})
		},
		_actScheduleMessage: function() {
			var self = this;
			var schedule = {};
			var msg;

			// Find date values
			_scheduleMsgItems.forEach(function(item) {
				var val = self.$$panelContent.find(".s-m-schedulemsg #" + item.id).attr("isoValue");
				if (val) {
					schedule[item.id] = schedule[item.id] || {};
					schedule[item.id].$type = item.$type;
					schedule[item.id].value = val;
				}
			});
			var desc = self.$$panelContent.find(".s-m-schedulemsg #description").val();
			_getShareDeepLink(self._publishOptions.share.page)
				.then(function(deepLink) {
					if (schedule.date && schedule.time) {
						msg = {
							Severity: "reminder",
							Text1: deepLink.Title,
							Text2: desc,
							ScheduleTime: schedule["date"].value + " " + schedule["time"].value,
							ScheduleTimeJSON: _getDateTimeInfo(schedule["date"].value, schedule["time"].value),
							DeepLink: deepLink
						};
					}

					var cap = native.getModule("scheduleMessage");
					if (cap && msg) {
						return cap.scheduledMsg(msg);
					}
				})
				.fail(function() {
					modules.get("modal").notify({
						body: locale.text("liveTile.page.add.notok"),
						severityClass: "error"
					});
				})
				.then(function() {
					modules.get("modal").notify({
						body: locale.text("liveTile.page.add.ok"),
						severityClass: "success"
					});
				})
				.then(function() {
					self._makeInvisible();
				});
		},
		_actLiveTileCreate: function() {
			var self = this;
			var tile = {
				title: self.$$panelContent.find(".s-m-livetile #description").val(),
				userLogin: _getUser()
			}
			if (self._backgroundColor) {
				tile.backgroundColor = self._backgroundColor;
			}
			var pageId = self.$$panelContent.find(".s-m-livetile #vignette").val();
			_getTileDeepLink(self._publishOptions.share.page)
				.then(function(deepLink) {
					self._publishOptions.liveTile.pages.forEach(function(page) {
						if ("" + page.id === "" + pageId) {
							tile.sDataUrl = page.pageData.$url;
							tile.id = tile.sDataUrl;
							tile.DeepLink = deepLink;
						}
					});

					var cap = native.getModule("liveTile");
					if (cap) {
						return cap.addLiveTile(tile);
					}
				})
				.fail(function() {
					modules.get("modal").notify({
						body: locale.text("liveTile.page.add.notok"),
						severityClass: "error"
					});
				})
				.then(function() {
					modules.get("modal").notify({
						body: locale.text("liveTile.page.add.ok"),
						severityClass: "success"
					});
				})
				.then(function() {
					self._makeInvisible();
				})
		}
	});

var _Field = utils.defineClass(
	function(type, item, title, panel) {
		this.$type = type;
		this.$title = title;
		this.$$item = item;
		this.panel = panel;
	}, null, {
		setFieldValueFromSelector: function(value) {
			this.$$item.attr("isoValue", value);
			this.$$item.val(this._getFormattedValue(value));
			if (this.panel.onValueChange) {
				this.panel.onValueChange();
			};
			this.destroy();
		},
		_getFormattedValue: function(value) {
			var formatter = formatApi.getFormatter(this.$type);
			return formatter.formatValue(value, false);
		},
		getValue: function() {
			return this.$$item.attr("isoValue");
		},
		getTitle: function() {
			return this.$title;
		},
		destroy: function() {;
			this.$$item = this.panel = null;
		}
	});

function _getShareDeepLink(page) {
	return sharedContext.getNavContextUrlByPage(page)
		.then(function(url) {
			var link = {
				Title: page.getPageTitle(),
				Url: url
			}
			return link;
		})
}

function _getTileDeepLink(page) {
	var link = {
		Title: page.getPageTitle(),
		Url: page.pageData.$url
	}
	return $.smResolve(link);
}

//date YYYY-MM-DD" Time: "HH:MM-:SS"
function _getDateTimeInfo(date, time) {
	if (!date) return null;
	date = date.split("-");
	if (date.length !== 3) return null;
	var res = {};
	res.year = date[0];
	res.month = date[1];
	res.day = date[2];
	time = time ? time.split(":") : [];
	if (time.length == 3) {
		res.hours = time[0];
		res.minutes = time[1];
		res.seconds = time[2];
	}
	return res;
};

function _getUser() {
	var up = modules.get("appController").App.getCurrentUserProfile();
	return up.user.login;
}