"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var modules = require('syracuse-tablet/html/js/common/modules');
var Base = require('syracuse-tablet/html/js/controls/panels/aside/panelAsideDialog').PanelAsideDialog;
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

//!! Id's and classes are used in side-panel.less
var CREATE_BTN = "tmpl-panel-create-btn";
var CREATE_BTN_ADDON = "tmpl-panel-create-btn-clear-addon";
var ITEM_TTL = "s-m-tmpl-itm-ttl";
var ITEM_INFO = "s-m-tmpl-itm-info";
var ITEM_TABLE = "s-m-tmpl-itm";
var ITEM_ACT = "s-m-tmpl-itm-act";
var LST_WRAP = "s-m-list-wrapper";
var LST_SCROLL = "s-m-scroll-elmt";
var ITEM_INPUT_TTL = "tmpl-panel-item-input-ttl";
var ITEM_INPUT_TTL_ADDON = "tmpl-panel-item-input-ttl-addon";
var FILTER_MENU = "tmpl-panel-filter";

var _txt = function(id) {
	return locale.text("edit.templates.dlog." + id);
};

function _getEndPoint() {
	return modules.get("appController").App.getDefaultEndpoint();
}
var _templates = {
	error: '<section class="draft-error"><h1>{{error}}<h1><h2>{{contact}}<h2></section>',
	main: '\
		<article style="height:100%">\
			<section class="panel panel-default create">\
				<div class="panel-heading">{{createSection}}</div>\
				<div class="panel-body">\
					<table style="width:100%"><tr>\
						<td>{{name}}</td>\
						<td>\
							<div class="input-group {{#if smartphone}}input-group-sm{{/if}}">\
								<input id="{{CREATE_BTN}}" data-nevent-ctrl-input class="form-control" aria-describedby="create-clear-addon" type="text"/>\
								<span  data-nevent data-naction="clearname" data-control-id="{{ctrlId}}" class="input-group-addon" id="{{CREATE_BTN_ADDON}}">X</span>\
							</div>\
						</td>\
						<td>\
							<span class="btn btn-default disabled" data-nevent data-naction="create" data-control-id="{{ctrlId}}">\
								<i class="{{createicn}}"></i>\
								<span>{{create}}</span>\
							</span>\
						</td>\
					</tr></table>\
				</div>\
			</section>\
			<section class="panel panel-default avail">\
				<div class="panel-heading">\
					<span>{{availSection}}</span>\
				</div>\
				<div class="{{LST_WRAP}}">\
					<ul class="list-group {{LST_SCROLL}}">\
					</ul>\
				</div>\
			</section>\
		</article>',
	items: '\
		{{#each items}}\
			<li class="list-group-item" data-params="{{tmplId}}">\
				<table class="{{../ITEM_TABLE}}"><tr>\
					<td>\
						<div class="{{../ITEM_TTL}}" data-nevent data-naction="changeItemTitle" data-control-id="{{../ctrlId}}">{{title}}</div>\
						<div class="{{../ITEM_INFO}}"style="overflow: hidden">\
							<span>{{date}}</span>\
							<span>{{representation}}</span>\
						</div>\
					</td>\
					<td>\
						<table class="{{../ITEM_ACT}}">\
							<tr>\
								<td>\
									<span  class="btn btn-default {{#unless applicable}}disabled{{/unless}}" data-nevent data-naction="apply" data-control-id="{{../ctrlId}}">\
										<i class="{{../applyicn}}"></i>\
										<span>{{../apply}}</span>\
									</span>\
								</td>\
								<td>\
									<span  class="btn btn-default {{#unless applicable}}disabled{{/unless}}" data-nevent data-naction="update" data-control-id="{{../ctrlId}}">\
										<i class="{{../updateicn}}"></i>\
									</span>\
								</td>\
								<td>\
									<span  class="btn btn-default" data-nevent data-naction="delete" data-control-id="{{../ctrlId}}">\
										<i class="{{../deleteicn}}"></i>\
									</span>\
								</td>\
							</tr>\
						</table>\
					</td>\
				</tr></table>\
			</li>\
		{{/each}}',
	noitems: '\
		<div class="s-m-noitem"><b>{{text}}</b></div>\
		',
	changeItemTitle: '\
		<div>\
			<div class="input-group {{#if smartphone}}input-group-sm{{/if}}">\
				<input id="{{ITEM_INPUT_TTL}}" style="font-weight:bold;" data-nevent-ctrl-input class="form-control" type="text" aria-describedby="{{ITEM_INPUT_TTL_ADDON}}" >\
				<span data-nevent data-naction="saveItemTitle" data-control-id="{{ctrlId}}" class="btn input-group-addon" id="{{ITEM_INPUT_TTL_ADDON}}" style="background-color:inherit">\
					<i class="{{icon}}"/>\
				</span>\
			</div>\
		</div>',
	filtersMenu: '\
		<select id="{{FILTER_MENU}}" data-naction="filter" data-control-id="{{ctrlId}}">\
			{{#each filterOptions}}\
				<option value="{{value}}" {{#if selected}}selected{{/if}}>{{title}}</option>\
			{{/each}}\
		<select>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	if (!tmpl) alert("template " + name + " not found");
	return tmpl(ctx);
};

exports.PanelEditTemplates = utils.defineClass(
	function PanelEditTemplates(controller, $type, article, options) {
		options.title = _txt("title");
		Base.call(this, controller, $type, article, options);
		this.dateFormatter = formatApi.getFormatter("application/x-datetime");
		this._initLabels();
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			this.dateFormatter = null;
		},

		_initLabels: function() {
			this._selectedFilter = "current";
			this._filterOptions = [{
				value: "current",
				title: _txt("currendpoint")
			}, {
				value: "all",
				title: _txt("allendpoint")
			}];
		},

		getRepresentation: function() {
			return this.page.getRepresentation();
		},

		buildHtml: function() {
			Base.prototype.buildHtml.call(this);
			if (this.$$content) {
				this.$$content.remove();
			}
			this.$$content = this._buildContent().appendTo(this.$$panelContent);
			this.$$list = this.$$content.find(".panel.avail ul");
		},
		/**
		 * Build the main content synchronously (without tmpl list)
		 * We need to build at least s-m-scroll-elmt synchronously to be compliant with sidePanel gesture management
		 */
		_buildContent: function() {
			var context = {
				createSection: _txt("createSection"),
				availSection: _txt("availSection"),
				name: _txt("name"),
				create: _txt("create"),
				createicn: fontUtils.getIconByName("$apply"),
				ctrlId: this.id,
				CREATE_BTN: CREATE_BTN,
				CREATE_BTN_ADDON: CREATE_BTN_ADDON,
				LST_WRAP: LST_WRAP,
				LST_SCROLL: LST_SCROLL,
				smartphone: modules.get("siteLayout").getDeviceType() === "smartphone"
			};
			return $(_getHtml("main", context));
		},
		/**
		 * Trick to manage the save title button
		 * We can't use the blur event to hide/detach the input title elmt because hide.detch fire the pending events
		 * --> So if we click on "SaveItemTitle" we get first the blur event which fires the click evt and event is not triggered
		 * We handle the clicks evnts on panel to manage _$$changeItemTitle
		 */
		onClickPanel: function(event) {
			if (this._$$changeItemTitle && this._$$changeItemTitle.is(":visible")) {
				this.$$content.find("." + ITEM_TTL).show();
				this._$$changeItemTitle.detach();
			}
		},
		getStorage: function() {
			if (!this._storage) {
				this._storage = modules.get("storage").getStorage();
			}
			return this._storage;
		},
		/**
		 * Build the list of templates asynchronously
		 */
		_buildItems: function() {
			this.$$list.off().empty();
			var context = {
				ctrlId: this.id,
				updateicn: fontUtils.getIconByName("$refresh"),
				deleteicn: fontUtils.getIconByName("$delete"),
				applyicn: fontUtils.getIconByName("$apply"),
				apply: _txt("apply"),
				ITEM_TTL: ITEM_TTL,
				ITEM_INFO: ITEM_INFO,
				ITEM_TABLE: ITEM_TABLE,
				ITEM_ACT: ITEM_ACT,
				items: []
			};
			var self = this;
			this.getStorage().templateOperation("count").then(function(count) {
				var queryRep = self._selectedFilter === "all" ? null : self.getRepresentation();
				var queryEp = self._selectedFilter === "all" ? null : _getEndPoint();
				return self.getStorage().templateOperation("query", queryRep, queryEp, true).then(function(templates) {
					return $.smResolve(count, templates);
				})
			}).then(function(count, templates) {
				templates = (templates || []);
				templates.sort(function(a, b) {
					if (b["endpoint"] === a["endpoint"]) {
						return b["creation_date"] > a["creation_date"];
					}
					return b["endpoint"] > a["endpoint"];
				});
				if (templates.length > 0) {
					var ep = _getEndPoint();
					templates.forEach(function(tmpl, idx) {
						context.items.push({
							title: tmpl.title,
							date: self.dateFormatter.formatValue(tmpl["creation_date"]),
							tmplId: tmpl.id,
							applicable: tmpl.representation === self.getRepresentation(), // We don't test endpoint
							representation: self._selectedFilter === "all" ? tmpl.representation || "" : null
						});
					});
					$(_getHtml("items", context)).appendTo(self.$$list);
				} else {
					$(_getHtml("noitems", {
						text: _txt("noitem")
					})).appendTo(self.$$list);
				}
				if (!self._$$filter) {
					self._$$filter = $(self._buildFilterMenu()).appendTo(self.$$content.find(".panel.avail > .panel-heading"));
				}
				self._$$filter.val(self._selectedFilter).toggle(self._selectedFilter === "all" || count > templates.length);
				// An update is needed because height changed
				self._updateGesture();
			}).fail(function(e) {
				modules.get("modal").error(_txt("readallerr"), e, function() {
					self.$$content.html($(_getHtml("error", {
						error: locale.text("error"),
						contact: locale.text("contact.admin")
					})));
				});
			});
		},
		_buildFilterMenu: function() {
			var self = this;
			self._selectedFilter = self._selectedFilter || "current";
			var opts = [];
			self._filterOptions.forEach(function(item) {
				item = $.extend({}, item);
				item.selected = item.value === self._selectedFilter;
				opts.push(item);
			});
			return _getHtml("filtersMenu", {
				"filterOptions": opts,
				"ctrlId": self.id,
				"FILTER_MENU": FILTER_MENU
			});
		},
		_actFilter: function() {
			var f = this._$$filter.val();
			if (f === this._selectedFilter) return;
			this._selectedFilter = f;
			this._buildItems();
		},
		refresh: function() {
			this._buildItems();
			this._actClearname();
		},
		_notify: function(text) {
			var notify = {
				severityClass: "success",
				body: text,
				onlyWebapp: true,
				delay: "short"
			};
			modules.get("modal").notify(notify);
		},
		_getTmplId: function(event, propagate) {
			if (propagate !== true) {
				event.stopPropagation();
			}
			return $(event.target).closest("li[data-params]").attr("data-params");
		},
		_actApply: function(param, event) {
			var self = this;
			var tmplId = self._getTmplId(event);
			if (!tmplId) return;
			this.getStorage().templateOperation("read", tmplId).then(function(data) {
				self.hide();
				if (data) {
					self.page.getDataset().setTemplateData(data.dataSet);
					//					self.controller.refresh({
					//						refreshValue: true
					//					});
				}
			}).fail(function(e) {
				modules.get("modal").error("Error deleting template", e);
			});
		},
		_actUpdate: function(param, event) {
			var self = this;
			var tmplId = self._getTmplId(event);
			if (!tmplId) return;
			this.getStorage().templateOperation("update", tmplId, {
				dataSet: self.page.getDataset().getTemplateData()
			}, false).then(function() {
				self.hide();
				self._notify(_txt("updt.success"));
			}).fail(function(e) {
				modules.get("modal").error("Error updating template", e);
			});
		},
		_actDelete: function(param, event) {
			var self = this;
			var tmplId = self._getTmplId(event);
			if (!tmplId) return;
			this.getStorage().templateOperation("delete", tmplId).then(function() {
				self.refresh();
			}).fail(function(e) {
				modules.get("modal").error("Error deleting template", e);
			});
		},
		_actCreate: function(param, event) {
			var ctx = {
				id: utils.UUID(),
				endpoint: _getEndPoint(),
				representation: this.getRepresentation(),
				title: this.$$content.find("#" + CREATE_BTN).val(),
				dataSet: this.page.getDataset().getTemplateData()
			};
			var self = this;
			this.getStorage().templateOperation("save", ctx).then(function() {
				self.hide();
				self._notify("Template has been created successfully");
			}).fail(function(e) {
				modules.get("modal").error("Error saving template", e);
			});
		},
		_actClearname: function(param, event) {
			this.refreshCreateBtn("");
		},
		_actChangeItemTitle: function(param, event) {
			var tmplId = this._getTmplId(event);
			if (!tmplId) return;
			if (!this._$$changeItemTitle) {
				this._$$changeItemTitle = $(_getHtml('changeItemTitle', {
					ctrlId: this.id,
					icon: fontUtils.getIconByName("$refresh"),
					ITEM_INPUT_TTL: ITEM_INPUT_TTL,
					ITEM_INPUT_TTL_ADDON: ITEM_INPUT_TTL_ADDON,
					smartphone: modules.get("siteLayout").getDeviceType() === "smartphone"
				}));
				// Trick to manage the save title button
				this._$$changeItemTitle.find("span").on('click', jsutils.bindFn(this.onClickSaveItemTitle, this));
			}
			var $$target = $(event.target);
			// _$$changeItemTitle is detached to be re-attached and shown
			$$target.before(this._$$changeItemTitle.detach().css({
				position: "relative",
				left: ""
			})).hide();
			this.refreshSaveItemTitleBtn(this._$$changeItemTitle.find("#" + ITEM_INPUT_TTL).val($$target.text()));
		},
		/**
		 * This event is trigerred before onMainClick
		 * So we can save before detaching _$$changeItemTitle elmt
		 */
		onClickSaveItemTitle: function(event) {
			var self = this;
			// true to allow bubbling and trigger onMainClick
			var tmplId = self._getTmplId($(event.target), event, true);
			if (!tmplId) return;
			var $$display = self._$$changeItemTitle.parent().find("." + ITEM_TTL);
			var title = self._$$changeItemTitle.find("#" + ITEM_INPUT_TTL).val();
			if ($$display.text() === title) {
				// No change
				return;
			}
			// Set new title
			$$display.text(title).show();
			// Partial update
			this.getStorage().templateOperation("update", tmplId, {
				title: title
			}, true).fail(function(e) {
				modules.get("modal").error("Error saving template title", e);
			});
		},
		/**
		 * Trick to manage the save title button
		 * We can't use the blur event to hide/detach the input title elmt because hide.detch fire the pending events
		 * --> So if we click on "SaveItemTitle" we get first the blur event which fires the click evt and event is not triggered
		 * We handle the clicks evnts on panel to manage _$$changeItemTitle
		 */
		onMainClick: function(evt) {
			if (this._$$changeItemTitle && this._$$changeItemTitle.is(":visible")) {
				this.$$content.find("." + ITEM_TTL).show();
				this._$$changeItemTitle.detach();
			}
		},
		/**
		 * Manages create button status
		 */
		onInput: function(evt) {
			var $$target = $(evt.target);
			if ($$target.is("#" + CREATE_BTN)) {
				this.refreshCreateBtn();
				return;
			}
			if ($$target.is("#" + ITEM_INPUT_TTL)) {
				this.refreshSaveItemTitleBtn($$target);
				return;
			}
		},
		refreshSaveItemTitleBtn: function($$input) {
			$$input.focus().parent().find("#" + ITEM_INPUT_TTL_ADDON).toggleClass("disabled", $$input.val().trim().length === 0);
		},
		refreshCreateBtn: function(val) {
			if (!this._$$create) {
				this._$$create = this.$$content.find('.panel.create .btn[data-naction="create"]');
				this._$$input = this.$$content.find('.panel.create input[type="text"]');
			}
			if (val != null) {
				this._$$input.val(val);
			}
			this._$$create.toggleClass("disabled", this._$$input.val().trim().length <= 0);
			this._$$input.focus();
		},
		notifyToggled: function(side, action, visible) {
			if (visible === true) {
				this.refresh();
				return;
			} else {
				var self = this;
				this.getStorage().templateOperation("count").then(function(count) {
					// notify new count - fromActionMgrUUID is used to retrieve the control that triggered the link (which header/footer)
					// In dashboard we can have multiple vignettes that can trigger search event
					notifications.publish("sm.edit.templates.changed", self.fromActionMgrUUID, count);
				});
				return;
			}
		},
		show: function() {
			Base.prototype.show.call(this);
			this.refreshCreateBtn("");
			this._buildItems();
		}
	});