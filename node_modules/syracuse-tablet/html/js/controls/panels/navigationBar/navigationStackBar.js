"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').CtrlBase;
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _templates = {
	navigationBar: '\
			<ul class="nav nav-pills nav-justified">\
			{{#each stacks}}\
			<li role="presentation" role="tab" data-toggle="tab" data-control-id="{{../ctrlId}}" data-nevent data-naction="actionStack" data-params="{{idx}}" class="s-m-stack-tab {{#if selected}}active{{/if}}"><a href="#">{{title}}</a></li>\
			{{/each}}\
			</ul>\
			<div class="btn-group">\
				<div class="dropdown">\
					<button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-expanded="false">\
						<a class="s-m-nav-link" style="display:none" href="#">\
							<i class="fa fa-ellipsis-v"></i>\
						</a>\
					</button>\
					<ul class="dropdown-menu dropdown-menu-right" role="menu">\
						{{#each stacks}}\
							<li  role="presentation" role="tab" data-toggle="tab" data-control-id="{{../ctrlId}}"  data-nevent data-naction="actionStack" data-params="{{idx}}" class="s-m-stack-popup nav nav-pills "><a href="#">{{title}}</a></li>\
						{{/each}}\
					</ul>\
				</div>\
			</div>'
};
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	if (!tmpl) alert("template " + name + " not found");
	return tmpl(ctx);
};

exports.NavigationStackBar = utils.defineClass(
	function(controller, $type, article, options) {
		Base.call(this, controller, $type, article, options);
		notifications.subscribe(this, ["sm.stack.select"])
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			this.$$container.empty();
			notifications.unsubscribe(this, ["sm.stack.select"])
		},
		buildHtml: function() {
			this.$$container.empty();
			var ctx = this._context()
			this.$$navBar = $(_getHtml('navigationBar', ctx))
			this.$$container.append(this.$$navBar);
			this.$$container.show();
		},
		_context: function() {
			var self = this;
			var defaultTitle = "";
			var opts = {
				stacks: [],
				ctrlId: this.id,
			};
			var stacks = self.controller.getRootStackList();
			stacks.forEach(function(stack, index) {
				defaultTitle = "Panel " + (index + 1)
				opts.stacks.push({
					selected: (index === 0),
					idx: index,
					title: stack.$title ? self._titleText(stack.$title) || defaultTitle : defaultTitle
				})
			})
			return opts;
		},
		_titleText: function($title) {
			var titleText = this.controller.dataset.resolveExpression($title);
			if (!utils.isResolve(titleText)) {
				titleText = "";
			}
			return titleText;
		},
		computeLayout: function(layoutInfo) {
			var self = this;
			if (!self.$$container) {
				return;
			}
			$(".dropdown").removeClass("open");
			var maxWidth = self.$$navBar.width();
			var width = 0;
			var index;
			self.notDisplayedTab = [];
			$(".s-m-stack-tab[data-naction='actionStack']", self.$$navBar).each(function(item) {
				width += $(this).width();
				index = parseInt($(this).attr("data-params"), 10);
				if (width >= maxWidth) {
					self.notDisplayedTab.push({
						index: index,
						title: $("a", $(this)).text()
					});
					$(this).hide();
					$(".s-m-stack-popup[data-params='" + index + "']", self.$$navBar).show();
				} else {
					$(this).show()
					$(".s-m-stack-popup[data-params='" + index + "']", self.$$navBar).hide();
				}
			});
			if (self.notDisplayedTab.length > 0) {
				$(".s-m-nav-link").show()
			} else {
				$(".s-m-nav-link").hide()
			}
		},
		notifStackSelect: function(index) {
			$("[data-naction='actionStack']").removeClass("active").removeAttr("disabled");
			$("[data-naction='actionStack'][data-params='" + index + "']").addClass("active").attr("disabled", "disabled");
		}
	});