"use strict";

var Base = require('syracuse-tablet/html/js/controls/panels/panelBase').PanelBase;
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var utils = require('syracuse-tablet/html/js/helpers/utils');

/**
 * Base class for all panels that interact with an sdata page and 
 * may trigger actions and links that rely on the page controller
 * 
 * This class is ment to manage interactions and should not do rendering since it's very
 * unspecific
 * 
 */
exports.PanelSdataPage = utils.defineClass(
	function PanelSdataPage(controller, type, article, opts) {
		Base.call(this, controller, type, article, opts);
		notifications.subscribe(this, ["sm.pin.status.change", "sm.edit.templates.changed"]);
	}, Base, {
		buildHtml: function() {
			Base.prototype.buildHtml.call(this);
		},
		/**
		 * metaData will contain:
		 * {
		 * 	$isDisabled: tue|false
		 *  $isHidden: true|false
		 * }
		 * These properties will be the result of merging prototype and data so there is not need
		 * to do anything more here except applying them
		 */
		onMenuItemChanged: function($itemName, $bind, metaData) {
			var $$item = this.$$elmt.find('[data-menuitem-id="' + $itemName + '"]');
			if ($$item.length < 1) {
				return;
			}
			if (metaData.$isDisabled === true) {
				$$item.addClass("disabled");
			} else if (metaData.$isDisabled === false) {
				$$item.removeClass("disabled");
			}
			if (metaData.$isHidden === true) {
				$$item.addClass("hidden");
			} else if (metaData.$isHidden === false) {
				$$item.removeClass("hidden");
			}
		},
		_$$action: function(itemId) {
			return this.$$elmt.find('[data-menuitem-id="' + itemId + '"]');
		},
		notifPinStatusChange: function(state) {
			if (this.destroyed) {
				return;
			}
			this._$$action(state == true ? "pinPage" : "unpinPage").addClass("hidden");
			this._$$action(state == true ? "unpinPage" : "pinPage").removeClass("hidden");

		},
		notifEditTemplatesChanged: function(empty) {
			if (this.destroyed) {
				return;
			}
			var $$e = this._$$action('showEditTemplates');
			if ($$e.length == 0) {
				return;
			}
			empty = empty === true
			if ($$e.is(".disabled")) {
				$$e.removeClass("disabled");
			}
			$$e = $$e.children("i");
			$$e.removeClass(fontUtils.panelActionIcon(empty ? "showEditTemplates" : "showEditTemplatesEmpty"));
			$$e.addClass(fontUtils.panelActionIcon(empty ? "showEditTemplatesEmpty" : "showEditTemplates"));
		}
	});