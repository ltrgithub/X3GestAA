"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/panels/sortfilter/tabBase').TabBase;
var modules = require('syracuse-tablet/html/js/common/modules');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

var _templates = {
	main: '\
		<div id="sorttabroot" class="s-m-scroll-wrapper">\
			<ul class="list-group s-m-scroll-elmt"/>\
		</div>',
	items: '\
		{{#each items}}\
			<li class="list-group-item" data-params="{{id}}">\
				<span>{{name}}</span>\
				<span class="s-m-order ' + fontUtils.sortIcon("desc") + '  {{#smCompare sort "desc"}}enabled{{/smCompare}}" data-params="desc"></span>\
				<span class="s-m-order ' + fontUtils.sortIcon("asc") + '  {{#smCompare sort "asc"}}enabled{{/smCompare}}" data-params="asc"></span>\
			</li>\
		{{/each}}',
	/** Add this line to add the remove icon
	 * <span class="s-m-order ' + fontUtils.sortIcon("none") + ' " data-params="none"></span>
	 */
};


var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};
/**
 * Sort tab
 */
exports.TabSort = utils.defineClass(
	function TabSort(panel, id, options) {
		options = options || {};
		options.hidden = options.hidden === true || panel.sortInfoGet(false).length === 0;
		Base.call(this, panel, id, options);
		this.sortInfo = $.extend(true, [], this.panel.sortInfoGet());
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			this.$$list = null;
		},
		buildHtml: function() {
			this.$$content.append($(_getHtml("main", {})));
			this.$$list = this.$$content.find("ul.list-group");
		},
		/**
		 * Save sort info
		 */
		doActionApply: function() {
			this.panel.sortInfoSet($.extend(true, [], this.sortInfo || this.panel.sortInfoGet()), false);
		},
		_buildSortInfo: function() {
			var status = {};
			this.$$content.find(".s-m-order.enabled").each(function(idx, $$e) {
				$$e = $($$e);
				status[$$e.parent().attr("data-params")] = $$e.attr("data-params");
			});
			this.sortInfo = this.sortInfo || [];
			this.sortInfo.forEach(function(i) {
				i.sort = status[i.id] || "none";
			});
		},
		getFavoritesData: function() {
			this._buildSortInfo();
			return $.extend(true, [], this.sortInfo);
		},
		doContentAction: function(evt, $$target, dataParams) {
			if ($$target.hasClass("enabled")) {
				$$target.removeClass('enabled');
			} else {
				(this.options.singleCriteria === true ? this.$$content : $$target.parent()).find(".s-m-order.enabled").removeClass('enabled');
				$$target.addClass("enabled");
			};
			this._buildSortInfo();
			this.panel.unselectMemo(); /*sort change so unselect current memo*/
		},
		/**
		 * We remove the content on close to cancel modifications
		 */
		notifyClosePanel: function() {
			Base.prototype.notifyClosePanel.call(this);
			if (this.$$items) {
				this.$$items.remove();
				this.$$items = null;
			}
			this.sortInfo = null;
		},
		/**
		 * Tab becomes Active - we create content
		 */
		doTabShow: function() {
			if (this.$$items) this.$$items.remove();
			// We clone to keep a different copy from array one		
			this.sortInfo = this.sortInfo || $.extend(true, [], this.panel.sortInfoGet());
			this.$$items = $(_getHtml("items", {
				items: this.sortInfo
			}));
			this.$$list.append(this.$$items);
		}
	});