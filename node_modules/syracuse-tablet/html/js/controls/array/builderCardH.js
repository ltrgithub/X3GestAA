"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/array/builderBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');


"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/array/builderBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');


/**
 * Vertical card builder
 * Authoring
 * 		$numberOfRows 			number of card s per row
 * 		$displayEmptyCells 		Display or not empty cells true by default
 */
var _Klass = utils.defineClass(
	function(control, options) {
		Base.call(this, control, options);
		this._layoutRoot = null;
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this._layoutRoot) {
				this._layoutRoot.destroy();
				this._layoutRoot = null;
			}
		},
		buildHtml: function(arrayData, buildOptions) {
			Base.prototype.buildHtml.call(this, arrayData, buildOptions);
			if (!this.$article) return;
			if (!this._layoutRoot) {
				// Create HTML generator
				this._layoutRoot = articleParser.cardV2Controls(this.control);
			}
			var cardWidth = 200;
			var cardHeight = 200;
			var $$root = $('<tbody>').appendTo($('<table/>').appendTo(this.control.$$value));
			this.newScroller("h", $$root.parent());
			var remaining = 0;
			var numberOfRows = parseInt(this.$articleArray.$numberOfRows || 1, 10);
			numberOfRows = Math.min(Math.max(1, numberOfRows), 4);
			var nbCardPerRow = Math.ceil(arrayData.$resources.length / numberOfRows);
			var $$row;
			var $$td;
			var $$cell;
			var self = this;
			arrayData.$resources.forEach(function(rowData, idx) {
				remaining = idx % nbCardPerRow;
				if (remaining === 0) $$row = $("<tr>").appendTo($$root);
				$$td = $(self.buildRecordMainElmt(rowData, {
					tag: "td",
					parent: $$row,
					createIfNoLink: true
				}, idx));
				$$cell = $('<section class="s-m-card s-m-H"/>').appendTo($$td).css({
					width: cardWidth + "px",
					height: cardHeight + "px"
				});
				$('<span class="badge index">' + (idx + 1) + '</span>').appendTo($$cell);
				self.callGenerateHtml(self._layoutRoot, $$cell, rowData, false, buildOptions, idx);
				if (false && idx === 0) {
					self.control.controller.$$elmt.show();
					var realH = $$cell.outerHeight();
					var parentH = self.control.$$elmt.outerHeight();
					var numberOfRows = Math.max(1, Math.round(parentH / realH));
					nbCardPerRow = Math.ceil(arrayData.$resources.length / numberOfRows);
					console.log("HHH", realH, parentH, nbCardPerRow, numberOfRows);
					self.control.controller.$$elmt.hide();
				}
			});
			this.addEmptyCells($$row, remaining, buildOptions);
		}
	});

exports.Klass = _Klass;