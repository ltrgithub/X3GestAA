"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/array/builderBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');


"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/array/builderBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');


/**
 * Vertical card builder
 * Authoring
 * 		$cardsPerLine 			number of card s per row
 * 		$displayEmptyCells 		Display or not empty cells true by default
 */
var _Klass = utils.defineClass(
	function(control, options) {
		var self = this;
		Base.call(self, control, options);
		self._layoutRoot = null;
	}, Base, {
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			if (self._layoutRoot) {
				self._layoutRoot.destroy();
				self._layoutRoot = null;
			}
		},
		buildHtml: function(arrayData, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, arrayData, buildOptions);
			if (!self.$article) return;
			var cardsPerLine = self.$articleArray.$cardsPerLine;
			cardsPerLine = Math.min(20, Math.max(0, cardsPerLine == null ? 1 : parseInt(cardsPerLine, 10)));
			if (!self._layoutRoot) {
				// Create HTML generator
				self._layoutRoot = articleParser.cardV2Controls(self.control);
			}
			var $$tbl = $('<table/>').appendTo(self.$$value);
			var w = Math.round(100 / cardsPerLine);
			var wr = 100 - w * cardsPerLine;
			var $$root = $("<thead><tr>").appendTo($$tbl).children(":first-child");
			for (var i = 0; i < cardsPerLine; i++) {
				$("<th>").css({
					width: (i === cardsPerLine - 1 ? w + wr : w) + "%"
				}).appendTo($$root);
			}
			var $$root = $('<tbody data-bind="' + self.control.$bind + '">').appendTo($$tbl);
			var remaining = 0,
				$$row, $$cell;
			arrayData.$resources.forEach(function(rowData, idx) {
				remaining = idx % cardsPerLine;
				if (remaining === 0) $$row = $("<tr>").appendTo($$root);
				$$cell = $(self.buildDetailLink(rowData, {
					tag: "td",
					parent: $$row,
					createIfNoLink: true
				}));
				self.callGenerateHtml(self._layoutRoot, $$cell, rowData, false, buildOptions);
			});
			var dispEmpty = self.$articleArray.$displayEmptyCells;
			dispEmpty = dispEmpty == null ? true : dispEmpty;
			if (dispEmpty) {
				for (var i = 0; i < remaining; i++) {
					self.callGenerateHtml(self._layoutRoot, $('<td class="s-m-empty">').appendTo($$row), null, false, buildOptions);
				}
			}
		}
	});

/**
 * Array Control
 * 	Horizontal grid builder for queries
 */
var _KlassOld = utils.defineClass(
	function(control, options) {
		var self = this;
		Base.call(self, control, options);
		/*
		 * CSS-DEPENDEND: Needs to be adjusted on major size or page layout changes
		 */
		self.pageContentHeightSubstraction = 190;
		self.minLandscapeHeight = 550;
		self._itemWidth = 140;
		self._itemHeight = 140;
		self._itemSpacing = 10;
		self.recordItems = {};
	}, Base, {

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			self.recordItems = null;
		},

		buildHtml: function(arrayData, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, arrayData, buildOptions, ["s-m-card s-m-horizontal"]);
			self.$$domItems = $(uiUtils.createDomElement('div', ["s-m-grid-items s-m-horizontal"], null, {
				"id": self.getId("items")
			})).appendTo(self.$$elmt);

			arrayData.$resources.forEach(function(record, idx) {
				var domItem = uiUtils.createDomElement('div', ["s-m-grid-item"], null, null, self.$$domItems);
				self.recordItems[record.getValue("$uuid")] = domItem;
				self._buildRecord(record, domItem, idx);
			});

			self.onResizeWindow();
			self.buildPagingLinks(arrayData, {
				top: true
			});
		},

		_buildRecord: function(record, domItem, idx) {
			var self = this;
			var title = self.$itemProto.data("$value", record) || ("Rank;" + (idx + 1));
			var a = self.buildDetailLink(record, {
				tag: "a",
				parent: domItem,
				title: title,
				css: "s-m-link"
			});
		},

		onResizeWindow: function() {
			var self = this;
			var arrayData = self.control.getArrayData();
			if (!arrayData) return;
			var w = window.innerWidth;
			var h = window.innerHeight;

			h = h - self.pageContentHeightSubstraction;
			self._maxItemHeight = h;
			self.$$domItems.height(self._maxItemHeight - 20);

			var x = 0;
			var y = 0;
			arrayData.$resources.forEach(function(record) {
				if (y + self._itemHeight > self._maxItemHeight) {
					y = 0;
					x += self._itemWidth + self._itemSpacing;
				}
				var domItem = self.recordItems[record.getValue("$uuid")];
				if (domItem) {
					var s = domItem.style;
					s.left = x + "px";
					s.top = y + "px";
					s.width = self._itemWidth + "px";
					s.height = self._itemHeight + "px";
					y += self._itemHeight + self._itemSpacing;
				}
			});
		}
	});

exports.Klass = _Klass;