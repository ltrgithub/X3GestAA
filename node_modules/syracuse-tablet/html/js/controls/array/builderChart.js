"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var Base = require('syracuse-tablet/html/js/controls/array/builderChartBase').Klass;
var notifications = require('syracuse-tablet/html/js/helpers/notifications');


var _getHeight = function(h) {
	if (h === "xsmall") return 50;
	if (h === "small") return 100;
	if (h === "medium") return 200;
	if (h === "large") return 400;
	if (h === "xlarge") return 700;
	return 200;
};

/**
 * HIGHCHART BUILDER
 */
var _Klass = utils.defineClass(
	function(control, disp, options) {
		Base.call(this, control, disp, options);
	}, Base, {
		initReuseProperties: function() {
			Base.prototype.initReuseProperties.call(this);
			this.resetProps(false);
		},
		destroy: function() {
			Base.prototype.destroy.call(this);
			this._$$chartSlot = this._$$catchEvt = null;
		},
		buildHtml: function(arrayData, buildOpts) {
			Base.prototype.buildHtml.call(this, arrayData, buildOpts);
			var article = this.$articleArray;
			// sometimes we need the height - see chartNeedsHeight
			this._height = _getHeight(article.$chartHeight);
			this._$$chartSlot = $('<div class="s-m-slot"/>').appendTo(this.control.$$value);
			if (this.getDataSet().length > 0) {
				//isAuthoringActive to allow the selection of the chart
				if (globals.isAuthoringActive() || this.control.isOpenDetailEnabled()) {
					// Catch chart events
					this._$$catchEvt = $('<div class="s-m-catchevt"/>').appendTo(this.control.$$value);
					if (this.control.isOpenDetailEnabled()) {
						this.control.addChartDetailLink(this._$$catchEvt);
					}
				}
			} else {
				var title = this.control.prototype.getDataByPath("$cube.$title");
				if (title) {
					$('<div class="s-m-no-data-title"/>').appendTo(this._$$chartSlot).text(title);
				}
				$('<div class="s-m-no-data-label"/>').appendTo(this._$$chartSlot).text(locale.text("label.chart.nodata"));
				this._$$chartSlot.css("position", "relative");
			}
			// Create the header - Pagination if any
			this.refreshHeaderAndGesture();
			if (this.isRefreshContext(buildOpts)) {
				// Force display because there's no resize (refresh - pagin)
				this._displayChart(false, true);
			}
		},
		onResize: function(context) {
			if (this.isDestroyed()) return;
			var dataset = this.getDataSet();
			if (dataset == null || dataset.length === 0) {
				// It needs to count all charts even empty ones
				this._notifyChartCounter();
				return;
			}
			if (!this.control.$$value || !this.control.$$value.is(':visible')) {
				if (!this._subscribedExpand) {
					this._subscribedExpand = true;
					notifications.subscribe(this, ["sm.layout.expanded"]);
				}
			}
			if (this._layouytType == null) {
				// Needed here to access to all elements (getParentVignette)
				// We do that just once
				if (this.control.isDisplayedInDetailPage()) {
					// in that case the chart is displayed in a 'detail's page
					this._layouytType = "stack";
				} else {
					// Chart in vignettes
					this._layouytType = this.control.controller.getParentDashboardType();
				}
			}
			this._displayChart(true, false);
		},
		_checkHeaderHeight: function(height) {
			if (this.control.$$header.is(":visible")) {
				var hh = this.control.$$header.height();
				if (height == null) {
					var css = {
						top: hh + "px",
						height: (this.control.$$value.height() - hh) + "px"
					};
					this._$$chartSlot.css(css);
					if (this._$$catchEvt) {
						this._$$catchEvt.css(css);
					}
				} else {
					height = height - hh;
				}
			}
			return height;
		},
		_displayChart: function(updtScroller, isRefresh) {
			var self = this;
			if (self.isDestroyed() || !self._$$chartSlot) return;
			// SetTimeout to improve UX when there are multiple charts to display (dashboard)
			setTimeout(function() {
				if (self.isDestroyed()) return;
				var stackController, height;
				if (self._layouytType === "stack") {
					// relative is needed - set each time because aof refresh
					self._$$chartSlot.css("position", "relative");
					// in stack mode we need a height
					if (self.control.isDisplayedInDetailPage()) {
						stackController = self.control.controller;
						// Height set to device height
						height = stackController.getMainContentRect().height - 10;
					} else if (self.control.controller.isVignette) {
						stackController = self.control.controller.getParentVignette().controller;
						// Height always less or equal than the device height
						height = Math.min(self._height, stackController.getMainContentRect().height - 10);
					} else {
						throw new Error("Unexpected chart page context");
					}
				} else {
					// Parent's height
					height = null;
				}
				height = self._checkHeaderHeight(height);
				self.createChart(self._settingsFromValue(), self._$$chartSlot, {
					height: height,
					// Parent's width
					width: null,
					onComplete: function() {
						if (!isRefresh) {
							//#6974 Fix svg issue in chrome
							self._notifyChartCounter();
						}
					}
				});
				if (updtScroller && stackController) {
					// Needed to update the scroller
					notifications.notifyController("sm.scroller.update", stackController);
				}
			}, 10);
		},
		/**
		 * Parent control notifies the builder that it's going to clear the content
		 */
		notifClearContent: function(refresh) {
			this.clearChart();
		},
		notifLayoutExpanded: function() {
			this._displayChart(false, false);
		},
		/**
		 * #6974 When all the charts are loaded we force the browser to redraw (svg bug in chrome)
		 * We need to count the charts
		 */
		_notifyChartCounter: function() {
			if (globals.getCurrentPage().countChartLoaded) {
				globals.getCurrentPage().countChartLoaded(this);
			}
		}
	});

exports.Klass = _Klass;