"use strict";
var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var filterHelper = require('syracuse-tablet/html/js/controls/array/filterHelper');
var fieldOperators = require('syracuse-tablet/html/js/helpers/fieldOperators');


var _sortFilterExclude = ["application/x-array", "image", "application/x-document", "application/x-binary", "application/x-object", "text/rtf", "text/html", "text/plain"];

var _templates = {
	filtersList: '\
			<select	class="form-control" data-nevent-ctrl-change data-naction="actionArray">\
			{{#each filters}}\
				<option value="filterSelected,{{id}}" {{#if $isDefault}}selected=""{{/if}}>{{$title}}</option>\
			{{/each}}\
		   </select>',
	filtersTabs: '\
				<ul class="nav nav-pills nav-justified">\
					{{#each filters}}\
						<li role="presentation" role="tab" data-toggle="tab" data-nevent data-naction="actionArray" data-params="filterSelected,{{id}}" class="{{#if $isDefault}}active{{/if}}"><a href="#">{{$title}}</a></li>\
					{{/each}}\
				</ul>',
	sortedHeader: '<div><span>{{title}}</span><i class="{{css}}"></i></div>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/**
 *  X3 predefined filters
 */
exports.Filters = utils.defineClass(
	function filters(arrayCtrl) {
		this.control = arrayCtrl;
		this.currentFilterId = null;
		this._$filters = [];
		this._protoFilters = null;
		this._initFilters();
	}, null, {
		destroy: function() {
			this.control = null;
			this._$filters = null;
		},
		getHtml: function($auth) {
			if (($auth == "list" || $auth == "tabs") && this._$filters && this._$filters.length > 0) {
				return $(_getHtml($auth == "list" ? "filtersList" : "filtersTabs", {
					filters: this._$filters
				}));
			}
			return null;
		},
		_getUrlFilterId: function() {
			// uiAdapter page is not set in control's contructor
			var $url = this.control.controller.uiAdapter.pageData.$url;
			if ($url) {
				$url = jsutils.parseURL($url);
				return $url.query ? $url.query.filter : null;
			}
			return null;
		},
		_initFilters: function() {
			this._protoFilters = $.extend(true, {}, this.control.prototype.data("$filters", null, false, true));
			if ($.isEmptyObject(this._protoFilters)) {
				this._protoFilters = null;
			}
			if (this._protoFilters == null) {
				return;
			}
			var defFilter = null;
			var currentFilterId = this._getUrlFilterId();
			for (var p in this._protoFilters) {
				var f = $.extend(true, {}, this._protoFilters[p]);
				var ttl = this.control.prototype.resolveExpression(f.$title);
				if (ttl == null || Â ttl.trim().length == 0) {
					continue
				}
				f.$title = ttl;
				f.id = p;
				f.$isDefault = false;
				if (currentFilterId && f.id === currentFilterId) {
					defFilter = f;
				} else if (!defFilter && f.$isDefault === true) {
					defFilter = f;
				}
				this._$filters.push(f);
			}
			if (this._$filters.length == 0) {
				return;
			}
			this._$filters.unshift({
				id: "nofilter",
				$title: locale.text("nofilter"),
				$isDefault: defFilter == null
			});
			if (defFilter) {
				defFilter.$isDefault = true;
			}
		},
		// Returns the filter to add to the query url
		get$filterToApply: function() {
			if (this._$filters.length === 0 || this.control.$filtersGetAuthoring() == "none") {
				return null;
			}
			var f = null;
			this._$filters.some(function(x) {
				if (x.$isDefault === true) {
					f = x;
					return true;
				}
			});
			return f == null || f.id == "nofilter" ? null : f;
		},
		filtersSelect: function(param) {
			if (this._$filtersSelect(param)) {
				var $url = filterHelper.filterSortUpdateUrl(this.control.getFilterSortOptions());
				this.control.notifyApplyFilter($url)
			}
		},
		/**
		 * Select a filter
		 */
		_$filtersSelect: function(filterId) {
			if (this._$filters.length == 0) {
				return false;
			}
			this._$filters.forEach(function(f) {
				f.$isDefault = false;
				if (filterId === f.id) {
					f.$isDefault = true;
				}
			});
			return true
		},
		hasFilters: function() {
			return this._protoFilters != null;
		}
	});

exports.FilterSort = utils.defineClass(
	function filterSort(arrayCtrl) {
		this.control = arrayCtrl
	}, null, {
		destroy: function() {
			this.control = null;
		},
		getHtml: function(id) {

		},
		arrayHeaderUpdate: function($$container) {
			if (!$$container) return;
			var info = this._headerGetInfo();
			var $$icon = $$container.find(".s-m-sorted").toggle(info.sortOrder != null).removeClass();
			$$icon.toggle(info.sortOrder !== null)
			if (info.sortOrder != null) {
				$$icon.addClass("s-m-sorted " + fontUtils.sortIcon(info.sortOrder));
			}
			$$container.find(".s-m-filtered").toggle(info.hasFilter === true);
		},
		/**
		 *  returns an array of filterInfo
		 */
		filterInfoGet: function() {
			var info = this.control.page.getPageFilter();
			return info;
		},
		filterMapGet: function() {
			var self = this;
			var map = [];
			var props = this.control.getColumnsInfo();
			if (props) {
				props.forEach(function(prop) {
					if (_sortFilterExclude.indexOf(prop.$type) === -1 && prop.$capabilities && prop.$capabilities.indexOf("filter") >= 0 && !prop.$isExcluded) {
						var field = {
							fieldName: prop.$title,
							operators: fieldOperators.getOperators(prop.$type),
							// $bindValue is $bind for non reference field
							id: prop.$bindValue,
							prop: prop,
							isReference: prop.$type.indexOf("x-reference") >= 0
						};
						map.push(field);
					}
				});
			}
			return map;
		},
		/**
		 *  return array of sortInfo (not null)
		 */
		sortInfoGet: function() {
			var self = this;
			var info = this.control.page.getPageSort();
			if (info == null || info.length === 0) {
				var cols = this.control.getColumnsInfo();
				if (cols) {
					info = [];
					cols.forEach(function(c) {
						if (_sortFilterExclude.indexOf(c.$type) === -1 && c.$capabilities && c.$capabilities.indexOf("sort") >= 0) {
							info.push({
								name: c.$title,
								// $bindValue is $bind for non reference field
								id: c.$bindValue,
								sort: "none"
							});
						}
					});
				}
				this.sortInfoSet(info, false);
			}
			return info;
		},
		sortInfoSet: function(info, refresh) {
			// set settings
			this.control.page.setPageSort(info);
			refresh && this.applyFilterSort();
		},
		filterInfoSet: function(info, refresh) {
			this.control.page.setPageFilter(info);
			refresh && this.applyFilterSort();
		},
		applyFilterSort: function() {
			var $url = filterHelper.filterSortUpdateUrl(this.control.getFilterSortOptions());
			this.control.notifyApplyFilter($url)
		},
		/**
		 * Update table header icons when sort/filter change
		 */
		tableHeadUpdate: function($$tabHead) {
			if (!$$tabHead) {
				return;
			}
			var info = this._headerGetInfo();
			if (!info.sortOrder || !info.sortField) {
				return;
			}
			var $$th = $$tabHead.find(".s-m-sorted");
			if ($$th.length > 1) {
				var text = $$th.find("div > span")[0].text();
				$$th.removeClass();
			}
			$$th = $$tabHead.find("." + info.sortField);
			if ($$th.length > 0) {
				var title = $$th.text();
				$$th.html(_getHtml("sortedHeader", {
					title: title,
					css: fontUtils.sortIcon(info.sortOrder)
				}));
				$$th.addClass("s-m-sorted " + info.sortOrder);
			}
		},
		_headerGetInfo: function() {
			var res = {
				sortOrder: null,
				sortField: null,
				hasFilter: false
			}
			var info = this.sortInfoGet();
			if (info) {
				/** select the first sorted column
				 * Currently we support sorting on only one column
				 * -> We can display a asc/desc icon in the header
				 * Sort panel can manage sorting on multiple columns but it's disabled
				 */
				info.some(function(i) {
					if (i.sort != "none") {
						res.sortOrder = i.sort;
						res.sortField = i.id;
						return true;
					}
				});
			}
			var info = this.filterInfoGet();
			res.hasFilter = info && info.length > 0;
			return res;
		}
	});