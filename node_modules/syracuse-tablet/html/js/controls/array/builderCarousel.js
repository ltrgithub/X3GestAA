"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/array/builderCardBase').Klass;
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var Hammer = require('syracuse-tablet/html/js/helpers/hammerScroller').Hammer;

var _templates = {
	main: '<div id="{{id}}" class="carousel slide">\
					<div class="carousel-inner" role="listbox">\
					</div>\
					<footer>\
						<ul class="s-m-carousel-indicators">\
							<span class="first active"></span>\
							{{#if middle}}\
								<span class="middle"></span>\
							{{/if}}\
							{{#if last}}\
								<span class="last"></span>\
							{{/if}}\
						</ul>\
						<span class="left carousel-control {{leftIcon}}" aria-hidden="true"  href="#{{id}}" role="button" data-slide="prev"></span>\
						<span class="right carousel-control {{rightIcon}}" aria-hidden="true" href="#{{id}}" role="button" data-slide="next"></span>\
					</footer>\
			</div>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

var _createHtmlGeneratorContext = function(carousel) {
	return {
		handler: _destroyHtmlGeneratorContext,
		data: {
			// To destroy the plugin - One plugin per carousel generated
			$$body: carousel._$$body,
			// To destroy the swiper - One swiper per carousel generated
			swiper: carousel._swiper
		}
	};
};
var _destroyHtmlGeneratorContext = function(data) {
	if (!data) return;
	if (data.$$body && data.$$body.length) {
		// There's no destroy in carousel plugin ??
		// We call remove to clear all handlers and data attached to dom elemt an children
		data.$$body.remove();
		data.$$body = null;
	}
	if (data.swiper) {
		data.swiper.destroy();
		data.swiper = null;
	}
};
var _getInterval = function(period) {
	if (period === "slow") {
		return 6000;
	} else if (period === "normal") {
		return 3000;
	} else if (period === "fast") {
		return 1000;
	}
	return -1;
};
/**
 * CARD CAROUSEL BUILDER
 */
var _Klass = utils.defineClass(
	function(control, disp, options) {
		Base.call(this, control, disp, options);
	}, Base, {
		initReuseProperties: function() {
			Base.prototype.initReuseProperties.call(this);
			this.resetProps(false);
		},
		destroy: function() {
			Base.prototype.destroy.call(this);
			this.resetProps(true);
		},
		/**
		 * Called also by card destroy
		 * remove
		 * 	true means that we can destroy all the $$elments (remove)
		 * 	false when we want to keep elements (htmlGenerator mode)
		 * 		We use only one control to generate multiple html carousels with one layout (tree structure) (eg BPCUSTOMER Addresses)
		 *  	swiper are destroyed with the main parent array control - see addHtmlGeneratorContext/removeHtmlGeneratorContext
		 */
		resetProps: function(remove) {
			if (remove) {
				this._destroySwiper();
			}
			if (remove && this._$$body && this._$$body.length) {
				this._$$body.remove();
			}
			this._$$body = null;
			this._cards = null;
		},
		notifyArrayDataChanged: function(arrayData) {
			Base.prototype.notifyArrayDataChanged.call(this, arrayData);
			this.resetProps(true);
		},
		getHeaderOptions: function() {
			return {
				filterEnabled: false,
				sortEnabled: false,
				searchEnabled: false,
				paginEnabled: false,
				$filters: null
			};
		},
		buildCards: function(buildOpts, resizeContext) {
			if (!this.checkEmptyArray()) {
				return;
			}
			buildOpts = buildOpts || {};
			var interval = _getInterval(this.$articleArray.$carouselPeriod);
			if (!this._$$body) {
				var ctx = {
					id: "carousel" + this.control.id,
					leftIcon: fontUtils.getCarouselIcon("left"),
					rightIcon: fontUtils.getCarouselIcon("right")
				};
				if (this.control.getNbRecords() > 0) {
					ctx.last = (this.control.getNbRecords() - 1);
				}
				if (this.control.getNbRecords() > 1) {
					ctx.middle = true;
				}
				this._$$body = $(_getHtml("main", ctx)).appendTo(this.control.$$value);
				var $$root = this._$$body.find(".carousel-inner");
				this._cards = [];
				var baseItm = $('<div class="item">');
				var $$item;
				var $$record;
				var self = this;
				this.control.getArrayData().$resources.forEach(function(rowData, idx) {
					$$item = baseItm.clone().attr("data-idx", idx).appendTo($$root);
					if (idx === 0) {
						$$item.addClass("active");
					}
					$$record = $(self.buildRecordMainElmt(rowData, {
						tag: "div",
						parent: $$item
					}, idx));
					self._cards.push(self.createCard($$record, idx, rowData, buildOpts));
				});
				if (buildOpts.isHtmlGenerator === true) {
					// Carousel's html is generated (Carousel's object not stored in memory) 
					// We need to store object to destroy in array parent control htmlRootCtrl. They will be destroyed with htmlRootCtrl 
					if (buildOpts.htmlRootCtrl) {
						buildOpts.htmlRootCtrl.addHtmlGeneratorContext(_createHtmlGeneratorContext(this));
					}
				}
			}
			// We can change hasNavigation by authoring (interval or not)
			var hasNextPrev = !isNaN(interval) && interval <= 0;
			this._$$body.find("footer").toggle(hasNextPrev);
			this._destroySwiper();
			this._$$body.off('slid.bs.carousel');
			if (hasNextPrev) {
				this._$$body.carousel('pause');
				this._$$body.on('slid.bs.carousel', jsutils.bindFn(this._onEndSlide, this, this._$$body, this.control.getNbRecords() - 1));
				if (buildOpts.isHtmlGenerator !== true) {
					// No swiper if nested in a card - TODO because it doesn't work fine
					this._initSwiper(this._$$body);
				}
			} else {
				this._$$body.carousel({
					interval: interval
				});
				this._$$body.carousel("cycle");
			}
			var maxHeight = 0,
				h, heightChanged;
			this._cards.forEach(function($$card, idx) {
				$$card.css({
					height: "",
					width: ""
				});
				h = $$card.height();
				if (maxHeight === 0) {
					maxHeight = h;
				} else if (maxHeight != h) {
					heightChanged = true;
					maxHeight = Math.max(maxHeight, h);
				}
			});
			if (heightChanged === true) {
				// Set the same height for cards (could occurs if there are arrays in cards)
				this._cards.forEach(function($$card) {
					$$card.css("height", maxHeight + "px");
				});
			}
			if (this.$arrayOptions.hideEmptyRows === true) {
				this.checkEmptyRows();
			}
			this.control.$$value.height(this._$$body.height() + "px");
			this.doAfterBuild(resizeContext, false);
		},
		_onEndSlide: function(evt, $$body, maxIdx) {
			var $$active = $(evt.relatedTarget);
			var idx = parseInt($$active.attr("data-idx"), 10);
			if (idx !== maxIdx && idx !== 0) {
				if (evt.direction === "right") {
					idx = idx === 0 ? maxIdx : idx - 1;
				} else {
					idx = idx === maxIdx ? 0 : idx + 1;
				}
			}
			$$body.find("span.middle").toggleClass("active", idx > 0 && idx < maxIdx);
			$$body.find("span.first").toggleClass("active", idx === 0);
			$$body.find("span.last").toggleClass("active", idx === maxIdx);
		},
		_onSwipe: function(evt, $$body) {
			if ((evt.type !== "swipeleft" && evt.type !== "swiperight") || utils.isEvtDirection(evt, "v")) return;
			$$body.carousel(evt.type === "swipeleft" ? 'next' : 'prev');
		},
		_destroySwiper: function() {
			if (this._swiper) {
				this._swiper.destroy();
				this._swiper = null;
			}
		},
		_initSwiper: function($$parent) {
			this._destroySwiper();
			this._swiper = new Hammer($$parent.get(0));
			this._swiper.get("swipe").set({
				direction: Hammer.DIRECTION_HORIZONTAL
			});
			this._swiper.on("swipeleft swiperight", jsutils.bindFn(this._onSwipe, this, $$parent));
		}
	});

exports.Klass = _Klass;