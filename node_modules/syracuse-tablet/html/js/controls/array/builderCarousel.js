"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsUtils = require('syracuse-tablet/html/js/helpers/jsutils');
var Base = require('syracuse-tablet/html/js/controls/array/builderCard').BuilderCard;
var hammerScroller = require('syracuse-tablet/html/js/helpers/scroller/hammerScroller');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

var _templates = {
	footer: '<footer>\
				<ul class="s-m-carousel-indicators">\
					<span class="first active"></span>\
					{{#if middle}}\
						<span class="middle"></span>\
					{{/if}}\
					{{#if last}}\
						<span class="last"></span>\
					{{/if}}\
				</ul>\
				<span class="left carousel-control {{leftIcon}}"></span>\
				<span class="right carousel-control {{rightIcon}}"></span>\
			</footer>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

exports.BuilderCarousel = utils.defineClass(
	function builderCarousel(control) {
		Base.call(this, control);
		this.direction = "h";
		this._curIdx = 0;
		this._hammer = null;
		this._nbCards = 0;
		this._interval = null;
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
			this._destroySwiper();
			this.$$container = null;
			if (this._$$footer) {
				this._$$footer.off()
				this._$$footer.remove();
			}
		},

		buildHtml: function(data, $$container, refresh) {
			this._nbCards = data.length;
			this.$$container = $$container;
			Base.prototype.buildHtml.call(this, data, $$container, refresh);

		},
		buildCardH: function(visibleTds, bs, parentH, parentW) {
			Base.prototype.buildCardH.call(this, visibleTds, bs, parentH, parentW);
			if (this._nbCards == 0) {
				return;
			}
			this._shiftInPx = (this._$$table.find("tbody > tr > td").width() / this.control.getTransformScale()) + bs;

			if (!this._$$footer) {
				this._$$footer = this.$$container.append(_getHtml("footer", {
					middle: true,
					last: true,
					leftIcon: fontUtils.getCarouselIcon("left"),
					rightIcon: fontUtils.getCarouselIcon("right")
				}));
				this._$$footer.on("click", jsUtils.bindFn(this._onClickFooter, this))
			}
			this._$$footer.toggle(this._nbCards > 0)
			if (this._nbCards > 0) {
				this._updateIndicators();
			}
			// When width changes we need to right position the card
			this._swipe("justUpdate");
		},
		_centerCardInParent: function(parentH) {
			// nothing
		},
		_updateIndicators: function() {
			this._$$footer.find(".s-m-carousel-indicators > .first").toggleClass("active", this._curIdx === 0);
			this._$$footer.find(".s-m-carousel-indicators > .middle").toggleClass("active", this._curIdx > 0 && this._curIdx < (this._nbCards - 1));
			this._$$footer.find(".s-m-carousel-indicators > .last").toggleClass("active", this._curIdx >= (this._nbCards - 1));
		},
		initScroller: function($$container) {
			this._destroySwiper();
			if (this._nbCards == 0) {
				return;
			}
			this._hammer = new hammerScroller.Hammer($$container.get(0));
			this._hammer.get("swipe").set({
				direction: hammerScroller.Hammer.DIRECTION_HORIZONTAL
			});
			this._hammer.on("swipeleft swiperight", jsUtils.bindFn(this._onSwipe, this));
			if (this._getInterval() > 0) {
				this._interval = setInterval(jsUtils.bindFn(this._onTimeout, this), this._getInterval());
			}
		},

		_onClickFooter: function(evt) {
			var $$targ = $(evt.target);
			if (!$$targ.is(".carousel-control")) {
				return;
			}
			this._swipe($$targ.is(".left") ? "swiperight" : "swipeleft");
		},

		_onTimeout: function(evt) {
			if (this.destroyed) {
				return;
			}
			this._swipe("swipeleft");
		},

		_onSwipe: function(evt) {
			if (hammerScroller.isEvtDirection(evt, "v") || !evt) {
				return;
			}
			this._swipe(evt.type);
		},

		_swipe: function(type) {
			if (this.destroyed) {
				return;
			}
			var $$current = this.control.$$elmt.find('.s-m-card[data-idx="' + this._curIdx + '"]');
			if ($$current.length == 0) {
				return;
			}

			if (type === "justUpdate") {
				// Nothing
			} else if (type === "swipeleft") {
				this._curIdx++;
				if (this._curIdx >= this._nbCards) {
					this._curIdx = 0;
				}
			} else if (type === "swiperight") {
				this._curIdx--;
				if (this._curIdx < 0) {
					this._curIdx = this._nbCards - 1;
				}
			} else {
				return;
			}
			var $$next = this.control.$$elmt.find('.s-m-card[data-idx="' + this._curIdx + '"]');
			if ($$next.length == 0) {
				return;
			}
			this._$$table.css("opacity", 0, 25);
			var self = this;
			this._$$table.animate({
				left: (-1 * this._curIdx * this._shiftInPx) + "px",
				opacity: 1
			}, 300, "swing", function() {
				self._updateIndicators();
			});
		},

		_destroySwiper: function() {
			if (this._interval) {
				clearInterval(this._interval);
				this._interval = null;
			}
			if (this._hammer) {
				this._hammer.destroy();
				this._hammer = null;
			}
		},
		_getInterval: function() {
			var period = this.article.$carouselPeriod;
			if (period === "slow") {
				return 6000;
			} else if (period === "normal") {
				return 3000;
			} else if (period === "fast") {
				return 1000;
			}
			return -1;
		}
	});