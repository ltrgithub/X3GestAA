"use strict";
var utils = require('syracuse-tablet/html/js/helpers/utils');
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var fieldOperators = require('syracuse-tablet/html/js/helpers/fieldOperators');

var _templates = {
	basicSearch: '\
		<nav class="s-m-search">\
            <div class="input-group stylish-input-group">\
                <input type="text" class="form-control"  placeholder="Search"  value="{{searchValue}}" >\
                <span class="input-group-addon">\
                    <span style="visibility:{{visibleRemove}}" class="glyphicon glyphicon-remove" data-action="actionArray" data-params="removeSearch"></span>\
					<span class="glyphicon glyphicon-search" data-action="actionArray" data-params="search"></span>\
                </span>\
            </div>\
		</nav>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

var _Klass = utils.defineClass(
	function() {
		this._exclude = {};
		this.searchValue = "";
		this.searchInfos = [];
		this.maxCrit = 13;
	}, null, {
		destroy: function() {
			this.searchValue = null;
			this.$$search = null;
			this.searchInfos = null;
		},
		getHtml: function() {
			var self = this;
			self.$$search = $(_getHtml("basicSearch", {
				searchValue: self.searchValue,
				visibleRemove: self.searchValue !== "" ? "visible" : "hidden"
			}));
			return self.$$search;
		},
		removeSearch: function(ctrl) {
			this.searchValue = "";
			this.searchInfos = [];
		},
		search: function(ctrl) {
			this.searchValue = $(":input", this.$$search).val();
			this.searchInfos = (this.searchValue != "") ? this._filterInofsGet(ctrl) : [];
		},
		_filterInofsGet: function(ctrl) {
			var columnInfo = ctrl.builder.getColumnsInfo(true);
			var proto = ctrl.prototype.create(ctrl.prototype.getDataByPath("$item"));
			var props = proto.data("$properties");
			var control, $bind, $type, $capabilities, self = this,
				formatter,
				criteria = [],
				errors, val, $isReference;

			columnInfo.forEach(function(column) {
				control = column.control;
				$bind = column.$bindValue;
				$type = (column.$type != "application/x-choice") ? column.$bindType : column.$type;
				$isReference = (column.$type.indexOf("x-reference") >= 0);
				$capabilities = column.$capabilities || "";
				if ($capabilities.indexOf("filter") >= 0 && criteria.length < self.maxCrit) {
					if (!self._exclude[$type] && self._hackFormat(props[$bind])) {
						if ($type !== "application/x-choice") {
							errors = [];
							val = null;
							formatter = formatApi.getFormatter($type, props[$bind].$format);
							if (!formatter) {
								val = self.searchValue;
							} else {
								val = formatter.parseValue(self.searchValue, errors);
							}
							if ($isReference && val) val = val.toUpperCase();
							if (errors.length === 0 && val !== undefined) {
								criteria.push({
									operator: fieldOperators.getDefaultOperator($type),
									id: $bind,
									value: val,
									prop: props[$bind],
									isReference: $isReference
								});
							}
						} else {
							var valueList = self._getChoiceTitles(column.$value, proto);
							valueList.forEach(function(val) {
								if (val.title.indexOf(self.searchValue) > -1 && criteria.length < self.maxCrit) {
									criteria.push({
										operator: fieldOperators.getDefaultOperator($type),
										id: $bind,
										value: val.$value,
										prop: props[$bind],
										isReference: $isReference
									});
								}
							});
						}
					}
				}
			});
			return criteria;
		},
		_getChoiceTitles: function($value, proto) {
			var res = [],
				self = this;
			$.each($value.$enum, function(index, choice) {
				res.push({
					$value: choice.$value,
					title: proto.resolveExpression(choice.$title)
				});
			});
			return res;
		},
		//Waitting for X3 format manager with strict mode
		_hackFormat: function(proto) {
			var searchable = true;
			switch (proto.$type) {
				case "application/x-integer":
					var gs = locale.getNumberGroupSeparator();
					var ds = locale.getNumberDecimalSeparator();
					searchable = !isNaN((gs && gs.length > 0) ? this.searchValue.replace(new RegExp("\\" + gs + "|\\s", "g"), "") : this.searchValue);
					searchable = searchable && ((ds && ds.length > 0) ? this.searchValue.indexOf(ds) < 0 : true);
					break;
				case "application/x-decimal":
				case "application/x-real":
				case "application/x-integer":
				case "application/x-quantity":
					searchable = !isNaN(this.searchValue.replace(new RegExp("\\.|,|\\s", "g"), ""));
					break;
				default:
					searchable = (proto.$maxLength) ? (this.searchValue.length <= proto.$maxLength) : true;
			};
			return searchable;
		},
		getSearchInfos: function() {
			return this.searchInfos;
		}
	});

exports.Klass = _Klass;