"use strict";
var utils = require('syracuse-tablet/html/js/helpers/utils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

var _templates = {
	basicSearch: '\
		<nav class="s-m-search">\
            <div class="input-group stylish-input-group">\
                <input type="text" class="form-control"  placeholder="Search"  value="{{searchValue}}" >\
                <span class="input-group-addon">\
                    <span class="glyphicon glyphicon-remove" data-action="actionArray" data-params="removeSearch"></span>\
					<span class="glyphicon glyphicon-search" data-action="actionArray" data-params="search"></span>\
                </span>\
            </div>\
		</nav>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

var _Klass = utils.defineClass(
	function() {
		this._exclude = {};
		this.searchValue = "";
		this.searchInfos = [];
	}, null, {
		getHtml: function() {
			var self = this;
			self.$$search = $(_getHtml("basicSearch", {
				searchValue: self.searchValue
			}));
			return self.$$search;
		},
		removeSearch: function(ctrl) {
			this.searchValue = "";
			this.searchInfos = [];
		},
		search: function(ctrl) {
			this.searchValue = $(":input", this.$$search).val();
			this.searchInfos = (this.searchValue != "") ? this._filterInofsGet(ctrl) : [];
		},
		_filterInofsGet: function(ctrl) {
			var columnInfo = ctrl.builder.getColumnInfo();
			var proto = ctrl.prototype.create(ctrl.prototype.getDataByPath("$item"));
			var props = proto.data("$properties");
			var control, $bind, self = this,
				criteria = [],
				errors, val, $isReference;

			columnInfo.forEach(function(column) {
				control = column.control;
				$bind = control.$bind;
				$isReference = (control.$type.indexOf("x-reference") >= 0);
				if (!props[$bind].$isExcluded && props[$bind].$capabilities && props[$bind].$capabilities.indexOf("filter") >= 0) {
					if (!self._exclude[control.$type] && self._hackFormat(($isReference ? props[proto.getFieldNameForValue($bind)] : props[$bind]), control)) {
						if (control.$type !== "application/x-choice") {
							errors = [];
							val = null;
							val = control.parseValue(self.searchValue, errors);
							if (errors.length === 0 && val !== undefined) {
								control.validateValue(val, errors);
								if (errors.length === 0) {
									criteria.push({
										operator: self._getDefaultOperator(control.$type),
										id: proto.getFieldNameForValue($bind),
										value: val,
										prop: props[$bind],
										isReference: $isReference
									});
								}
							}
						} else {
							var valueList = control.getChoiceTitles();
							valueList.forEach(function(val) {
								if (val.title.indexOf(self.searchValue) > -1) {
									criteria.push({
										operator: self._getDefaultOperator(control.$type),
										id: proto.getFieldNameForValue($bind),
										value: val.$value,
										prop: props[$bind],
										isReference: $isReference
									});
								}
							});
						}
					}
				}
			});
			return criteria;
		},
		//Waitting for X3 format manager
		_hackFormat: function(proto, control) {
			switch (control.$type) {
				case "application/x-integer":
					if (isNaN(this.searchValue)) return false;
					break;
				default:
					return (proto.$maxLength) ? (this.searchValue.length <= proto.$maxLength) : true;
					return true;
			}
		},
		getSearchInfos: function() {
			return this.searchInfos;
		},
		_getDefaultOperator: function($type) {
			switch ($type) {
				case "application/x-date":
				case "application/x-time":
				case "application/x-datetime":
				case "application/x-decimal":
				case "application/x-real":
				case "application/x-integer":
				case "application/x-quantity":
				case "application/x-choice":
					return "eq";
					break;
				case "application/x-string":
				case "application/x-reference":
					return "like";
					break;
				default:
					return "eq";
					break;
			}
		},
		destroy: function() {
			this.searchValue = null;
			this.$$search = null;
			this.searchInfos = null;
		}
	});

exports.Klass = _Klass;