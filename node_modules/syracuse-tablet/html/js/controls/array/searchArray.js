"use strict";
var utils = require('syracuse-tablet/html/js/helpers/utils');
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var fieldOperators = require('syracuse-tablet/html/js/helpers/fieldOperators');
var filterHelper = require('syracuse-tablet/html/js/controls/array/filterHelper');

var _templates = {
	basicSearch: '\
		<nav class="s-m-search">\
            <div class="input-group stylish-input-group">\
                <input type="text" class="form-control"  placeholder="Search"  value="{{searchValue}}" >\
                <span class="input-group-addon">\
                    <span style="visibility:{{visibleRemove}}" class="glyphicon glyphicon-remove" data-nevent data-naction="actionArray" data-params="removeSearch"></span>\
					<span class="glyphicon glyphicon-search" data-nevent data-naction="actionArray" data-params="search"></span>\
                </span>\
            </div>\
		</nav>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

var _exclude = ["application/x-boolean"];


exports.SearchArray = utils.defineClass(
	/**
	 * savedContext is the context stored when we go to a child/detail page (see this.savedCtxCreate)
	 * It allows the page (query) to add the clause in sdataUrl at loading
	 */
	function searchArray(control) {
		this.control = control;
		this.maxCrit = 7;
		// searchInfo read in page's prefs - We need the page via controller.uiAdapter (this.page not available in contructor)
		// searchInfo is stored in page settings
		this.searchInfos = this.control.controller.uiAdapter.getPageSearch();
		if (this.hasSearchCriteria()) {
			this.searchValue = this.searchInfos["0"].value;
		} else {
			this.searchValue = "";
			this.searchInfos = null;
		}
	}, null, {
		destroy: function() {
			this.control = null;
			this.searchValue = null;
			this.searchInfos = null;
			if (this.$$search) {
				this.$$search.off("input");
				this.$$search = null;
			}
		},
		getHtml: function() {
			this.$$search = $(_getHtml("basicSearch", {
				searchValue: this.searchValue,
				visibleRemove: this.searchValue !== "" ? "visible" : "hidden"
			}));
			var self = this;
			this.$$search.on("input", "input", function() {
				self._toggleRemoveSearch($(this).val());
			})
			return this.$$search;
		},
		_toggleRemoveSearch: function(value) {
			$("[data-params='removeSearch']", this.$$search).css('visibility', !value ? "hidden" : "visible")
		},
		removeSearch: function() {
			if (this.searchValue !== "") {
				this.searchValue = "";
				this.searchInfos = [];
				this._updateSdataUrl(this.control);
			}
			$(":input", this.$$search).val("");
			this._toggleRemoveSearch();
			return false;
		},
		hasSearchCriteria: function() {
			return !$.isEmptyObject(this.searchInfos) && this.searchInfos["0"] != null;
		},
		search: function() {
			var $$value = $(":input", this.$$search);
			if (this.searchValue !== $$value.val()) {
				this.searchValue = $$value.val();
				this.searchInfos = this.searchValue.length > 0 ? this._filterInfosGet(this.control) : [];
				this._updateSdataUrl(this.control);
			}
		},
		_updateSdataUrl: function() {
			var $url = filterHelper.filterSortUpdateUrl(this.control.getFilterSortOptions());
			this.control.page.setPageSearch(this.searchInfos);
			this.control.notifyApplyFilter($url);
		},
		_filterInfosGet: function() {
			var columnInfo = this.control.getColumnsInfo(true);
			var proto = this.control.prototype.getProto$Item();
			var props = proto.data("$properties");
			var control, $bind, $type, $capabilities, self = this,
				formatter,
				criteria = [],
				errors, val, $isReference;

			columnInfo.forEach(function(column) {
				$bind = column.$bindValue;
				$type = column.$type; // ??(column.$type != "application/x-choice") ? column.$bindType : column.$type;
				$isReference = (column.$type.indexOf("x-reference") >= 0);
				$capabilities = column.$capabilities || "";
				if ($capabilities.indexOf("filter") >= 0 && criteria.length < self.maxCrit) {
					if (_exclude.indexOf($type) < 0 && self._hackFormat(props[$bind])) {
						if ($type !== "application/x-choice") {
							errors = [];
							val = null;
							formatter = formatApi.getFormatter($type, props[$bind].$format);
							if (!formatter) {
								val = self.searchValue;
							} else {
								val = formatter.parseValue(self.searchValue, errors);
								formatter.validateValue && formatter.validateValue(self.searchValue, errors);
							}
							if ($isReference && val) val = val.toUpperCase();
							if (errors.length === 0 && val !== undefined) {
								criteria.push({
									operator: fieldOperators.getDefaultOperator($type),
									id: $bind,
									value: val,
									prop: props[$bind],
									isReference: $isReference
								});
							}
						} else {
							var valueList = self._getChoiceTitles(column.$value, proto);
							valueList.forEach(function(val) {
								if (val.title.indexOf(self.searchValue) > -1 && criteria.length < self.maxCrit) {
									criteria.push({
										operator: fieldOperators.getDefaultOperator($type),
										id: $bind,
										value: val.$value,
										prop: props[$bind],
										isReference: $isReference
									});
								}
							});
						}
					}
				}
			});
			return criteria;
		},
		_getChoiceTitles: function($value, proto) {
			var res = [],
				self = this;
			$.each($value.$enum, function(index, choice) {
				res.push({
					$value: choice.$value,
					title: proto.resolveExpression(choice.$title)
				});
			});
			return res;
		},
		//Waitting for X3 format manager with strict mode
		_hackFormat: function(proto) {
			var searchable = true;
			switch (proto.$type) {
				case "application/x-integer":
					var gs = locale.getNumberGroupSeparator();
					var ds = locale.getNumberDecimalSeparator();
					searchable = !isNaN((gs && gs.length > 0) ? this.searchValue.replace(new RegExp("\\" + gs + "|\\s", "g"), "") : this.searchValue);
					searchable = searchable && ((ds && ds.length > 0) ? this.searchValue.indexOf(ds) < 0 : true);
					break;
				case "application/x-decimal":
				case "application/x-real":
				case "application/x-integer":
				case "application/x-quantity":
					searchable = !isNaN(this.searchValue.replace(new RegExp("\\.|,|\\s", "g"), ""));
					break;
				default:
					searchable = (proto.$maxLength) ? (this.searchValue.length <= proto.$maxLength) : true;
			};
			return searchable;
		},
		tableHeadUpdate: function($$tabHead) {
			$$tabHead.find(".s-m-search").removeClass("s-m-search");
			if (!this.hasSearchCriteria()) {
				return;
			}
			var self = this;
			Object.keys(this.searchInfos).forEach(function(key) {
				$$tabHead.find("." + self.searchInfos[key].id).addClass("s-m-search ");
			});
		}
	});