"use strict";
var utils = require('syracuse-tablet/html/js/helpers/utils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

var _templates = {
	search: '\
			<div class="s-m-search" >\
					<input type="text" class="form-control" placeholder="Search" value="{{searchValue}}">\
					<a type="button" class="btn btn-default ' + fontUtils.pageIcon("search") + '" data-action="actionArray" data-params="search"></a>\
			</div>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

var _Klass = utils.defineClass(
	function() {
		this._exclude = {
			"application/x-reference": true,
			"application/x-choice": true
		};
		this.searchValue = "";
		this.searchInfos = [];
	}, null, {
		getHtml: function() {
			var self = this;
			self.$$search = $(_getHtml("search", {
				searchValue: self.searchValue
			}));
			return self.$$search;
		},
		search: function(ctrl) {
			this.searchValue = $(":input", this.$$search).val();
			this.searchInfos = (this.searchValue != "") ? this._filterInofsGet(ctrl) : [];
		},
		_getValueType: function(ctrl) {
			var listOfType = {}, control, value, self = this,
				errors;
			var columnInfo = ctrl.builder.getColumnInfo();
			columnInfo.forEach(function(column) {
				try {
					errors = [];
					value = null;
					control = column.control;
					if (!self._exclude[control.$type]) {
						value = control.parseValue(self.searchValue, errors);
						if (errors.length === 0) {
							control.validateValue(value, errors);
							if (errors.length === 0) {
								listOfType[control.$bind] = {
									"value": value,
									"$type": control.$type
								};
							}
						}
					}
				} catch (e) {}
			});
			return listOfType;
		},
		getSearchInfos: function() {
			return this.searchInfos;
		},
		_filterInofsGet: function(ctrl) {
			var self = this;
			var criteria = [];
			var type = this._getValueType(ctrl);
			var proto = ctrl.prototype.create(ctrl.prototype.getDataByPath("$item"));
			var props = proto.data("$properties");
			if (props) {
				$.each(type, function(key, value) {
					// even if value filled type != string, search in string
					if (!props[key].$isExcluded && props[key].$capabilities && props[key].$capabilities.indexOf("filter") >= 0) {
						criteria.push({
							operator: self._getDefaultOperator(value.$type),
							id: proto.getFieldNameForValue(key),
							value: value.value,
							prop: props[key],
							isReference: value.$type.indexOf("x-reference") >= 0
						});
					}
				});
			}
			return criteria;
		},
		_getDefaultOperator: function($type) {
			switch ($type) {
				case "application/x-date":
				case "application/x-time":
				case "application/x-datetime":
				case "application/x-decimal":
				case "application/x-real":
				case "application/x-integer":
				case "application/x-quantity":
					return "eq";
					break;
				case "application/x-string":
				case "application/x-reference":
					return "like";
					break;
				default:
					return "eq";
					break;
			}
		},
		destroy: function() {
			this.searchValue = null;
			this.$$search = null;
			this.searchInfos = null;
		}
	});

exports.Klass = _Klass;