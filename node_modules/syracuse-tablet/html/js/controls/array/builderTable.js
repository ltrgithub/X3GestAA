"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ctrl");
var Base = require('syracuse-tablet/html/js/controls/array/builderBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');

/**
 * x-array control class
 */
var _Klass = utils.defineClass(
	function(control) {
		var self = this;
		Base.call(self, control);
	}, Base, {

		buildHtml: function($$parent, arrayData, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, $$parent, arrayData, buildOptions);
			self.$$elmt.addClass("s-m-grid");

			var title = self.getPrototype().property(self.getArticle().$bind, "$title");
			if (title) {
				$(uiUtils.createDomElement('div', ["s-m-grid-title"])).text(title).appendTo(self.$$elmt);
			}

			self._createColumnInfo();
			self._buildTable(arrayData);
		},

		// get columns that should be displayed
		_createColumnInfo: function() {
			var self = this;
			self.columnInfo = [];
			var props = self.itemProto.data("$properties");
			var keys = Object.keys(props);
			keys.forEach(function(key) {
				var item = props[key];
				if (["application/x-array", "application/x-password"].indexOf(item.$type) === -1 && !item.$isExcluded) {
					self.columnInfo.push({
						"$bind": key,
						"$item": item
					});
				}
			});
		},

		_buildTable: function(arrayData) {
			var self = this;
			self.tabElmt = uiUtils.createDomElement('table', ["table table-hover table-condensed s-m-grid-body"], null, null, self.$$elmt);
			self._buildTableHead();
			self._buildTableBody(arrayData);
		},

		_buildTableHead: function() {
			var self = this;
			self.tabHeadElmt = uiUtils.createDomElement('thead');
			self.tabElmt.appendChild(self.tabHeadElmt);
			var tr = uiUtils.createDomElement('tr', ['s-m-grid-header-row']);
			self.tabHeadElmt.appendChild(tr);
			self.columnInfo.forEach(function(col) {
				var th = uiUtils.createDomElement('th', ['s-m-grid-header-cell']);
				var title = utils.parseExpression(col.$item.$title || "", null, self.control.prototype);
				th.textContent = title;
				tr.appendChild(th);
			});
		},

		_buildTableBody: function(arrayData) {
			var self = this;
			self.tabBodyElmt = uiUtils.createDomElement('tbody');
			self.tabElmt.appendChild(self.tabBodyElmt);
			// Build rows
			arrayData.$resources.forEach(self._buildTableRow, self);
		},

		_buildTableRow: function(cellData, idx) {
			var self = this;
			var attrs = {};
			var links = self.itemProto.data("$links");
			if (links && links.$details) {
				var link = sdataUtils.getLinkInfo(links.$details.$url, cellData);
				attrs["href"] = "#";
				attrs["data-nav"] = link.page;
				attrs["data-sdata-url"] = link.sDataUrl;
			}
			var tr = uiUtils.createDomElement('tr', ['s-m-grid-body-row'], null, attrs, self.tabBodyElmt);
			self.columnInfo.forEach(function(col) {
				self.appendField2Cell(uiUtils.createDomElement('td', ['s-m-grid-body-cell'], null, null, tr), col.$bind, cellData);
			});
		}
	});

exports.Klass = _Klass;