"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ctrl");
var Base = require('syracuse-tablet/html/js/controls/array/builderBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var reqProto = require('syracuse-tablet/html/js/helpers/prototype');

/**
 * x-array control class
 */
var _Klass = utils.defineClass(
	function(control) {
		var self = this;
		Base.call(self, control);
	}, Base, {

		buildHtml: function($$parent, arrayData, options) {
			var self = this;
			options = options || {};
			options.displayRowIdx = true;
			Base.prototype.buildHtml.call(self, $$parent, arrayData, options);
			self.$$elmt.addClass("s-m-grid");

			var title = self.getPrototype().property(self.getArticle().$bind, "$title");
			if (title) {
				$(uiUtils.createDomElement('div', ["s-m-grid-title"])).text(title).appendTo(self.$$elmt);
			}

			self._createColumnInfo(options);
			self._buildTable(arrayData, options);
			self.buildPagingLinks(arrayData, {
				top: true,
				bottom: true
			});
		},

		// get columns that should be displayed
		_createColumnInfo: function(options) {
			var self = this;
			self.columnInfo = [];
			if (options.displayRowIdx) {
				self.columnInfo.push({
					"$bind": reqProto.rowIdxProperty,
					"$item": reqProto.getRowIdxProto()
				});
			}
			var props = self.itemProto.data("$properties");
			var keys = Object.keys(props);
			keys.forEach(function(key) {
				var item = props[key];
				if (["application/x-array", "application/x-password"].indexOf(item.$type) === -1 && !item.$isExcluded) {
					self.columnInfo.push({
						"$bind": key,
						"$item": self.itemProto.getPrototype(key)
					});
				}
			});
		},

		_buildTable: function(arrayData, options) {
			var self = this;
			self.tabElmt = uiUtils.createDomElement('table', ["table table-hover table-condensed s-m-grid-body"], null, null, self.$$elmt);
			self._buildTableHead(options);
			self._buildTableBody(arrayData, options);
		},

		_buildTableHead: function(options) {
			var self = this;
			self.tabHeadElmt = uiUtils.createDomElement('thead');
			self.tabElmt.appendChild(self.tabHeadElmt);
			var tr = uiUtils.createDomElement('tr', ['s-m-grid-header-row']);
			self.tabHeadElmt.appendChild(tr);
			self.columnInfo.forEach(function(col) {
				var th = uiUtils.createDomElement('th', ['s-m-grid-header-cell']);
				var title = col.$item ? utils.parseExpression(col.$item.data('$title') || "", null, self.control.prototype) : "";
				th.textContent = title;
				tr.appendChild(th);
			});
		},

		_buildTableBody: function(arrayData, options) {
			var self = this;
			self.tabBodyElmt = uiUtils.createDomElement('tbody');
			self.tabElmt.appendChild(self.tabBodyElmt);
			// Build rows
			arrayData.$resources.forEach(function(cellData, idx) {
				self._buildTableRow(cellData, idx, options);
			});
		},

		_buildTableRow: function(cellData, idx, options) {
			var css = ['s-m-grid-body-cell'],
				cssRowIdx;
			if (options.displayRowIdx) {
				cellData.setRowIndex(idx);
				cssRowIdx = css.concat("rowidx");
			}
			var self = this;
			var tr = self.buildDetailLink(cellData, {
				tag: "tr",
				parent: self.tabBodyElmt,
				css: ['s-m-grid-body-row'],
				createIfNoLink: true
			});
			self.columnInfo.forEach(function(col, idx) {
				var rowIdx = options.displayRowIdx && col.$bind === reqProto.rowIdxProperty;
				self.appendField2Cell(uiUtils.createDomElement('td', rowIdx ? cssRowIdx : css, null, null, tr), col.$bind, col.$item, cellData);
			});
		}
	});

exports.Klass = _Klass;