"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/array/builderBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var reqProto = require('syracuse-tablet/html/js/helpers/prototype');;
var modal = require('syracuse-tablet/html/js/ui/modal');
var daoSdata = require('syracuse-tablet/html/js/application/daoSdata');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');

var _isExcluded = ["application/json", "application/x-array", "application/x-document", "application/x-binary"];
var _ADDROW = "$ADDROW";
var _addRowBtn = {
	$activity: "create",
	$type: "tablet/x-button",
	$icon: "addrow",
	$bind: _ADDROW,
	$text: "Add row",
	attrs: {
		"data-nav": "rowdetail"
	}
};
var _additionalCols = [{
	$type: "tablet/x-icon",
	css: ["s-m-icon"],
	$activity: "edit",
	$icon: "editrow",
	$bind: "$EDITROW",
	attrs: {
		"data-nav": "rowdetail"
	}
}, {
	$type: "tablet/x-icon",
	css: ["s-m-icon"],
	$activity: "edit",
	$icon: "delrow",
	$bind: "$DELETEROW",
	attrs: {
		"data-action": "delrow"
	}
}, {
	$type: "tablet/x-icon",
	css: ["s-m-icon"],
	$activity: "display",
	$icon: "detailrow",
	$bind: "$DETAILROW",
	attrs: {
		"data-nav": "rowdetail"
	}
}];
/**
 * x-array control class
 * Array authoring - $article
 * 		$items 				Columns authoring
 * 				$title			Override the title
 * 				$width			Set the width
 * 				$isAdvanced		Not displayed in grid
 */
var _Klass = utils.defineClass(
	function(control, options) {
		var self = this;
		self._columnInfo = null;
		Base.call(self, control, options);
	}, Base, {

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			if (self._columnInfo) {
				self._columnInfo.forEach(function(col) {
					if (col.control) {
						col.control.destroy();
					}
				});
			}
		},

		buildHtml: function(arrayData, options) {
			var self = this;
			Base.prototype.buildHtml.call(self, arrayData, options);
			if (!self.$article) return;
			if (self._createColumnInfo(options).length > 0) {
				var $$table = $(uiUtils.createDomElement('table', ["table table-hover table-condensed"], null, null, self.$$value));
				self._buildTableHead($$table, options);
				self._buildTableBody($$table, arrayData, options);
				self._buildTableFoot($$table, options);
				self.buildPagingLinks(arrayData, {
					top: true,
					bottom: true
				});
			} else {
				self.$$value.addClass("empty");
			}
		},

		// get columns that should be displayed
		_createColumnInfo: function(options) {
			var self = this;
			if (self._columnInfo) return;
			self._columnInfo = [];
			if (self.displayRowIdx) {
				self._columnInfo.push({
					"$bind": globals.ROWIDXPROP,
					"proto": reqProto.getRowIdxProto(),
					css: "s-m-rowidx"
				});
			}
			var proto, nbCols = 0,
				unfound = [],
				col;
			self.$article.$items.forEach(function(item, idx) {
				proto = self.$itemProto.property(item.$bind);
				if (!proto) {
					unfound.push(item);
					// TODO - Display error
				} else {
					nbCols++;
					if (!self.isExcluded(item, proto)) {
						col = {
							"$bind": item.$bind,
							"proto": self.$itemProto.create(proto),
							"article": item
						};
						if (col.article.$isTitleHidden === true) {
							col.title = "";
						} else if (col.article.$title != null) {
							// Title can be overridden bay article - TODO translation
							col.title = self.$itemProto.resolveExpression(col.article.$title) || "";
						} else {
							col.title = col.proto.data('$title') || "";
						}
						self._columnInfo.push(col);
					}
				}
			});
			var edit = self.control.controller.isEditMode();
			var overflow = self._columnInfo.length != nbCols;
			_additionalCols.forEach(function(col) {
				if ((edit && col.$activity === "edit") || (!edit && overflow && col.$activity === "display")) {
					self._columnInfo.push($.extend(true, {}, col));
				}
			});
			if (unfound.length > 0) {
				// Add unfound columns
				var html = ['Field(s) not found<ul>'];
				unfound.forEach(function(x) {
					html.push("<li><b>" + x.$bind + "</b></li>");
				});
				html.push("</ul>");
				self.insertError(html.join(''));
			}
			return self._columnInfo;
		},

		isExcluded: function(item, proto) {
			var self = this;
			if (Base.prototype.isExcluded.call(self, proto)) return true;
			return _isExcluded.indexOf(proto.$type) >= 0 || item.$isAdvanced === true;
		},

		_buildTableHead: function($$table, options) {
			var self = this;
			var tabHead = uiUtils.createDomElement('thead', null, null, null, $$table);
			var tr = uiUtils.createDomElement('tr', null, null, null, tabHead);
			var th, css;
			self._columnInfo.forEach(function(col) {
				th = uiUtils.createDomElement('th', col.css, col.title, null, tr);
				if (col.article) {
					css = {};
					if (col.article.$width != null) {
						// TODO -Use our own styles for table not BS
						css["max-width"] = css.width = col.article.$width;
					}
					$(th).css(css);
				}
			});
		},

		_buildTableFoot: function($$table, options) {
			var self = this;
			if (self.control.controller.isEditMode()) {
				var cell = $('<tfoot><tr><td colspan="' + self._columnInfo.length + '"></td></tr></tfoot>').appendTo($$table).find("td");
				var fieldProto = self._getOtherColProto(_addRowBtn, "");
				self.buildCellHtml(cell, _addRowBtn.$bind, fieldProto, daoSdata.emptyDao(fieldProto));
			}
		},
		_buildTableBody: function($$table, arrayData, options) {
			var self = this;
			var tabBody = uiUtils.createDomElement('tbody', null, null, null, $$table);
			// Build rows
			for (var i = 0; i < arrayData.$resources.length; i++) {
				self._buildTableRow(tabBody, arrayData.$resources[i], i, options);
			}
		},

		_buildTableRow: function(tabBody, rowData, idx, options) {
			var self = this;
			var cssRowIdx;
			if (self.displayRowIdx) {
				rowData.setRowIndex(idx);
			}
			var tr = self.buildDetailLink(rowData, {
				tag: "tr",
				parent: tabBody,
				createIfNoLink: true
			});
			var cell, rowIdx, fieldProto;
			self._columnInfo.forEach(function(col, idx) {
				rowIdx = self.displayRowIdx && col.$bind === globals.ROWIDXPROP;
				cell = uiUtils.createDomElement('td', rowIdx ? col.css : null, null, null, tr);
				fieldProto = col.$activity != null ? self._getOtherColProto(col, rowData.getValue("$uuid")) : col.proto;
				if (!col.control) {
					// Creates the control used for generating html in cells
					col.control = articleParser.tableCell2Control(self.control, cell, col.$bind, fieldProto);
				}
				col.control.generateHtml(cell, rowData, false, col.control.options);
			});
		},

		_getOtherColProto: function(colInfo, rowId) {
			var self = this;
			var $action = {
				"data-control-id": self.control.id,
				"data-parent-id": self.control.controller.id

			};
			for (var p in colInfo.attrs) {
				$action[p] = colInfo.attrs[p];
			}
			if (self.control.controller.isVignette) {
				// It's the vignette which will load the page
				// We open row detail in the same vignette
				$action["data-nav-target"] = "vignette";
			}
			var params = {
				rowId: rowId,
				activity: colInfo.$activity
			};
			$action = {};
			$action["data-action"] = "rowDetail";
			$action["data-params"] = JSON.stringify(params);
			var json = {
				$action: $action
			};
			["$type", "$icon", "$text"].forEach(function(x) {
				if (x != null) json[x] = colInfo[x];
			});
			return reqProto.create(json);
		},

		/**
		 * Build html of the cell and append it to parent
		 * Control is used only one time
		 */
		buildCellHtml: function($$parent, fieldName, fieldProto, rowData) {
			var ctrl = articleParser.tableCell2Control(this.control, $$parent, fieldName, fieldProto);
			ctrl.generateHtml($$parent, rowData, true, ctrl.options);
		}
	});

exports.Klass = _Klass;