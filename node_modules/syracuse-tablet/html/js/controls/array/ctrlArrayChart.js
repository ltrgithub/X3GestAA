"use strict";


var utils = require('syracuse-tablet/html/js/helpers/utils');
var array = require('syracuse-tablet/html/js/controls/array/ctrlArray');
var Base = array.Klass;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var ctrlCubeChartInterface = require('syracuse-tablet/html/js/controls/chart/ctrlCubeChart').ctrlCubeChartInterface;
var locale = require('syracuse-tablet/html/js/helpers/locale');
var BuiderCart = require('syracuse-tablet/html/js/controls/array/builderChart').Klass;

/**
 * Array that opens a chartDetail when we touch the content
 * Used to display tables instead of chart in dashboard with access to the detail of the chart
 */
var _Klass = utils.defineClass(
	function CtrlArrayChart($type, controller, article, prototype, options) {
		options = options || {};
		options.localPagination = prototype.isStats();
		article.$arrayOptions = article.$arrayOptions || {};
		// Disabled for statistics and requests
		article.$arrayOptions.showSortFilter = false;
		article.$arrayOptions.showSearch = false;
		if (!article.$display) {
			article.$display = "chart";
		}
		Base.call(this, controller, article, prototype, options);
	}, Base, {
		buildHtml: function($$parent, controllerDao, buildOptions) {
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions);
			// action on $$value not on $$elmt ( pagination)
			this.$$value.attr("data-control-id", this.id).attr("data-action", globals.ACTCHARTDETAIL);
			this.$$elmt.addClass(this.isHighChart() ? "s-m-chart" : "s-m-chart-array");
		},
		isHighChart: function() {
			return this.$display === "chart";
		},
		_newBuilder: function(options) {
			if (this.isHighChart()) {
				if (this.$$value) {
					this.$$value.empty();
				}
				// Display as chart
				this.builder = new BuiderCart(this, this.$display, options);
			} else {
				// Display as grid
				Base.prototype._newBuilder.call(this, options);
			}
		},
		_actRowSelect: function(param, $value, event) {
			event.preventDefault();
			event.stopPropagation();
			this._actChartDetail();
		},
		_actChartDetail: function() {
			if (this.isEmpty) return;
			this.openChartDetailPage();
		},
		_setArrayData: function(controllerDao, refresh) {
			Base.prototype._setArrayData.call(this, controllerDao, refresh);
			if (this.$$ttl) {
				this.$$ttl.removeClass("s-m-no-data-title");
			}
		},
		getTitle: function() {
			return (this.article && this.article.$title) || this.prototype.data("$title") || this.prototype.getPropTitle(this.$bind);
		},
		_displayTitle: function(title) {
			if (title == null || title.trim().length === 0 || this.getAuthoring("$isTitleHidden") === true) {
				return false;
			}
			// Display the title if empty
			return true;
		},
		// Same look and size as chart
		setEmptyArrayMsg: function() {
			if (!this.isArrayField()) {
				if (this.$$ttl) {
					// !! remove it on refresh
					this.$$ttl.addClass("s-m-no-data-title");
				}
				// Set in $$value to be removed on refresh
				$('<div class="s-m-no-data-label"/>').appendTo(this.$$value).text(locale.text("label.chart.nodata"));

			}
		},
		createLocalPaginator: function(controllerDao) {
			if (!this.prototype.isStats()) return null;
			var gadget = this.controller.state.type == "chartdetail" ? this.controller.parentPage.gadget : this.controller.gadget;
			if (!gadget) return null;
			var rsrcs = controllerDao.getValue(this.$bind);
			if (!rsrcs) return null;
			var count = gadget.parameters && gadget.parameters.count != null ? gadget.parameters.count : 10;
			if (rsrcs.length <= count) return null;
			return new array.LocalPaginator(this, {
				count: count,
				length: rsrcs.length
			});
		}
	});
/* 
 * Traverse the prototype hierarchy to find a title for the array that can be
 * accessed later if there is no data
 */
function _findTitle(prototype) {
	var $title = prototype.data("$title");
	if ($title) {
		return $title;
	}
	var $cube = prototype.data("$cube");
	$title = $cube && $cube.$title;
	if ($title) {
		return $title;
	}

	if (prototype.parent) {
		return _findTitle(prototype.parent);
	}
}

utils.addClassMembers(_Klass, ctrlCubeChartInterface);

exports.Klass = _Klass;