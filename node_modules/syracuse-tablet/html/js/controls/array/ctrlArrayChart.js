"use strict";


var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/array/ctrlArray').Klass;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var ctrlCubeChart = require('syracuse-tablet/html/js/controls/chart/ctrlCubeChart').Klass;

var _Klass = utils.defineClass(
	function CtrlArrayChart($type, controller, article, prototype, options) {
		Base.call(this, controller, article, prototype.create({
			$type: $type
		}), options);
	}, Base, {
		buildHtml: function($$parent, controllerDao, buildOptions) {
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions);
			this.$$elmt.attr("data-control-id", this.id);
			this.$$elmt.attr("data-action", globals.ACTCHARTDETAIL);
		},
		_actRowSelect: function(param, $value, event) {
			event.preventDefault();
			event.stopPropagation();
			this._actChartDetail();
		},
		_actChartDetail: function() {
			var attrs = {
				"data-control-id": this.id,
				"data-parent-id": this.controller.id,
				"data-nav": "chartdetail",
				"data-nav-target": "application"
			};

			// There might be a pending setTimeout started in this.onResize()
			// If we envoke eventListener directly here, the resize might be triggered after the navigation
			// event resulting in wrong size of chart when going back from chart detail to parent page.
			// By adding a setTimeout here, we ensure that navigation is triggered after the
			// timeout responsible for the resize
			//setTimeout(function() {
			eventListener.triggerNavigation(self.$$elmt, attrs);
			//});
		},
		childPageGetPageInfo: function(typePage, currentPage) {
			var article = $.extend({}, true, this.article);
			article.$display = "chart";
			var pageInFo = ctrlCubeChart.prototype.childPageGetPageInfo.call(this, typePage, currentPage, article);
			return pageInFo;
		},
		setChartDetailAuthoring: function(article) {
			ctrlCubeChart.prototype.setChartDetailAuthoring.call(this, article);
		}
	});

exports.Klass = _Klass;