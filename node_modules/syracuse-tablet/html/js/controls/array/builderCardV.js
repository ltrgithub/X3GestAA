"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/array/builderBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');
var VScroller = require('syracuse-tablet/html/js/controls/array/verticalScroller').Klass;

/**
 * Manage swipe event on a field array in card mode
 * We display one card and swipe to walk into the collection
 */
var _OneCardSwiper = function(builder, buildOptions) {
	this.hammer = null;
	this.builder = builder;
	this.buildOptions = buildOptions;
	this.curIdx = 0;
	/**
	 * init is Mandatory for the bind - Object must be created
	 */
	this.init = function() {
		this.hammer = new Hammer(this.builder.$$value.get(0));
		this.hammer.get("swipe").set({
			direction: Hammer.DIRECTION_HORIZONTAL
		});
		// listen to events...
		this.hammer.on("swipeleft swiperight", Hammer.bindFn(this.onSwipe, this));
		// For chaining
		return this;
	};

	this.destroy = function() {
		if (this.hammer) this.hammer.destroy();
		this.hammer = null;
		this.builder = null;
	};

	this.triggerSwipe = function() {
		this.onSwipe(null);
		// For chaining
		return this;
	};
	// evt = null on start
	this.onSwipe = function(evt) {
		var self = this;
		setTimeout(function() {
			var next = evt ? evt.type === "swipeleft" : null;
			self.curIdx = next == null ? self.curIdx : next === true ? self.curIdx + 1 : self.curIdx - 1;
			self.builder.singleCardUpdate(self.curIdx, self.buildOptions);
		});
	};
	// Save context
	this.savedCtxCreate = function() {
		return {
			curIdx: this.curIdx
		};
	};
	// Restored on back
	this.savedCtxRestore = function(ctx) {
		this.curIdx = ctx && ctx.curIdx != null ? ctx.curIdx : 0;
	};
};
/**
 * Pagination in table.footer
 */
var _tfootPagin = function($$tbl, nbCols, nbRecords) {
	this.nbRecords = Math.max(0, nbRecords);
	this.$$root = $('<tfoot><tr><td colspan="' + nbCols + '"></td></tr></tfoot>').appendTo($$tbl);
	this.$$text = this.$$root.find("td");
	this.update = function(idx) {
		this.$$root.removeClass().addClass("s-m-card-pagin");
		if (this.nbRecords > 0 && idx >= 0 && idx < this.nbRecords) {
			this.$$text.html("Card " + (idx + 1) + "/" + this.nbRecords);
			if (idx === this.nbRecords) {
				this.$$root.addClass("s-m-first");
			} else if (idx === 0) {
				this.$$root.addClass("s-m-last");
			}
		}
	};
};
/**
 * Pagination in table.caption
 */
var _captionPagin = function($$tbl, nbCols, nbRecords) {
	this.nbRecords = Math.max(0, nbRecords);
	this.$$root = $('<caption/>').appendTo($$tbl);
	this.update = function(idx) {
		this.$$root.removeClass().addClass("s-m-card-pagin");
		if (this.nbRecords > 0 && idx >= 0 && idx < this.nbRecords) {
			this.$$root.html("Page " + (idx + 1) + "/" + this.nbRecords);
			if (idx === this.nbRecords) {
				this.$$root.addClass("s-m-first");
			} else if (idx === 0) {
				this.$$root.addClass("s-m-last");
			}
		}
	};
};

/**
 * Vertical card builder
 * Authoring see ctrlArray
 */
var _Klass = utils.defineClass(
	function(control, options) {
		var self = this;
		Base.call(self, control, options);
		self._layoutRoot = null;
		self.cardsPerRow = self.$articleArray.$cardsPerRow;
		self.cardsPerRow = Math.min(20, Math.max(0, self.cardsPerRow == null ? 1 : parseInt(self.cardsPerRow, 10)));
		// swiper or scroller depending on the context
		self._gestureMgr = null;
	}, Base, {
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			if (self._layoutRoot) {
				self._layoutRoot.destroy();
				self._layoutRoot = null;
			}
			if (self._gestureMgr) {
				self._gestureMgr.destroy();
				self._gestureMgr = null;
			}
		},
		buildHtml: function(arrayData, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, arrayData, buildOptions);
			if (!self.$article) return;
			if (!self._layoutRoot) {
				// Create HTML generator
				self._layoutRoot = articleParser.cardV2Controls(self.control);
			}
			self.$$tbl = $('<table/>').appendTo(self.$$value);
			if (self.control.isArrayField()) {
				self.singleCardBuild(buildOptions);
			} else {
				self.multipleCardsBuild(arrayData, buildOptions);
			}
		},
		/**
		 * Array field in card mode - One card is display at a time - Swipe to walk inside the collection
		 */
		singleCardBuild: function(buildOptions) {
			var self = this;
			var rsrcs = self.control.getArrayData().$resources;
			if (rsrcs.length > 1) {
				// Display header in caption to keep the same Y coordinate the same place when we swipe
				// _tfootPagin displays pagin in footer but position changes according to card height
				self._pagin = new _captionPagin(self.$$tbl, 1, rsrcs.length);
			}
			self.$$cardRow = $("<tr>").appendTo($("<tbody>")).appendTo(self.$$tbl);
			self._gestureMgr = new _OneCardSwiper(self, buildOptions).init().triggerSwipe();
		},
		/**
		 * QUery/Lookup Array field in card mode - We display all the cards - Vertical Scroll up/down
		 */
		multipleCardsBuild: function(arrayData, buildOptions) {
			var self = this;
			var cardsPerRow = self.cardsPerRow;
			if (cardsPerRow > 1) {
				/* non need of header - used to create columns with same width*/
				var w = Math.round(100 / cardsPerRow);
				var wr = 100 - w * cardsPerRow;
				var $$tr = $("<thead><tr>").appendTo(self.$$tbl).children(":first-child");
				for (var i = 0; i < cardsPerRow; i++) {
					$("<th>").css({
						width: (i === cardsPerRow - 1 ? w + wr : w) + "%"
					}).appendTo($$tr);
				}
			}
			self.$$tbody = $("<tbody>").appendTo(self.$$tbl);
			/* Query/Lookup we display all cards in stack mode */
			var remaining = 0,
				$$row, $$cell;
			arrayData.$resources.forEach(function(rowData, idx) {
				if (remaining === 0) {
					remaining = cardsPerRow;
					$$row = $("<tr>").appendTo(self.$$tbody);
				}
				$$cell = $(self.buildDetailLink(rowData, {
					tag: "td",
					parent: $$row,
					createIfNoLink: true
				}));
				self.callGenerateHtml(self._layoutRoot, $$cell, rowData, false, buildOptions);
				remaining--;
			});
			self._addEmptyCells($$row, remaining, buildOptions);
			if (arrayData.$resources.length > 0 && self.$$tbody) {
				// Create a vertical VScroller - Vertical scroller will be initialized afterShow
				// Scroll only for query and lookup
				// For fields array we create one card and swipe
				// This object manages events and also callback - It is used also by Table builder
				self._gestureMgr = new VScroller(self, {
					scale: 0.05
				});
			}
		},
		afterShow: function() {
			if (this._gestureMgr && this._gestureMgr.afterShow) {
				// VScroller needs to be initialized after show
				this._gestureMgr.afterShow();
			}
		},
		/**
		 * Update field array card on swipe
		 */
		singleCardUpdate: function(idx, buildOptions) {
			try {
				var self = this;
				var rsrcs = self.control.getArrayData().$resources;
				if (idx < 0 || idx >= rsrcs.length) return;
				var rowData = rsrcs[idx];
				if (self.$$cardCell) self.$$cardCell.remove();
				self.$$cardCell = $(self.buildDetailLink(rowData, {
					tag: "td",
					parent: self.$$cardRow,
					createIfNoLink: true,
					css: "nohover"
				}));
				self.callGenerateHtml(self._layoutRoot, self.$$cardCell, rowData, false, buildOptions);
				if (self._pagin) self._pagin.update(idx);
			} catch (e) {
				alert(e);
			}
		},
		/**
		 * Return the context to save.
		 * It will be be restored afer page has been loaded
		 * The context is saved and restored by the page
		 * Stores the scroll index
		 */
		savedCtxCreate: function() {
			if (this._gestureMgr) return this._gestureMgr.savedCtxCreate();
		},
		savedCtxRestore: function(ctx) {
			if (this._gestureMgr) this._gestureMgr.savedCtxRestore(ctx);
		}
	});

exports.Klass = _Klass;