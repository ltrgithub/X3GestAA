"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/array/builderBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');


/**
 * Vertical card builder
 * Authoring
 * 		$cardsPerRow 			number of card s per row
 * 		$displayEmptyCells 		Display or not empty cells true by default
 */
var _Klass = utils.defineClass(
	function(control, options) {
		var self = this;
		Base.call(self, control, options);
		self._layoutRoot = null;
	}, Base, {
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			if (self._layoutRoot) {
				self._layoutRoot.destroy();
				self._layoutRoot = null;
			}
		},
		buildHtml: function(arrayData, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, arrayData, buildOptions);
			if (!self.$article) return;
			var cardsPerRow = self.$article.$cardsPerRow;
			cardsPerRow = Math.min(20, Math.max(0, cardsPerRow == null ? 1 : parseInt(cardsPerRow, 10)));
			if (!self._layoutRoot) {
				self._layoutRoot = articleParser.cardV2Controls(self.control);
			}
			if (cardsPerRow > 1) {
				var $$tbl = $('<table style="table-layout:fixed;width: 100%;"/>').appendTo(self.$$value);
				var w = Math.round(100 / cardsPerRow);
				var wr = 100 - w * cardsPerRow;
				var $$root = $("<thead><tr>").appendTo($$tbl);
				for (var i = 0; i < cardsPerRow; i++) {
					$("<th>").css({
						width: (i === cardsPerRow - 1 ? w + wr : w) + "%"
					}).appendTo($$root);
				}
				var $$root = $("<tbody>").appendTo($$tbl);
				var remaining = 0,
					$$row;
				arrayData.$resources.forEach(function(rowData, idx) {
					remaining = idx % cardsPerRow;
					if (remaining === 0) $$row = $("<tr>").appendTo($$root);
					self._layoutRoot.generateHtml($("<td>").appendTo($$row), rowData, false);
				});
				var dispEmpty = self.$article.$displayEmptyCells;
				dispEmpty = dispEmpty == null ? true : dispEmpty;
				if (dispEmpty) {
					for (var i = 0; i < remaining; i++) {
						self._layoutRoot.generateHtml($('<td class="s-m-empty">').appendTo($$row), null, false);
					}
				}
			} else {
				arrayData.$resources.forEach(function(rowData, idx) {
					self._layoutRoot.generateHtml(self.$$value, rowData, false);
				});
			}
		}
	});

exports.Klass = _Klass;