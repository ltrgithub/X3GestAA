"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/array/builderBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');


/**
 * Array Control
 * 	Horizontal grid builder for queries
 */
var _Klass = utils.defineClass(
	function(control) {
		var self = this;
		Base.call(self, control);
		/*
		 * CSS-DEPENDEND: Needs to be adjusted on major size or page layout changes
		 */
		self.pageContentHeightSubstraction = 190;
		self.minLandscapeHeight = 550;
		self._itemWidth = 140;
		self._itemHeight = 140;
		self._itemSpacing = 10;
	}, Base, {

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			$(window).off("resize", self.onResizeHandler);
		},

		buildHtml: function($parent, arrayData, buildOptions) {
			var self = this;

			var $container = self.createContainer(["s-m-grid-horizontal"]);

			self.$domItems = uiUtils.createDomElement('div', ["s-m-grid-horizontal-items"], null, {
				"id": self.getId("items")
			});

			$container.appendChild(self.$domItems);
			self.onResizeHandler = self.onResizeWindow.bind(self);
			$(window).on("resize", self.onResizeHandler);

			var $tile;
			arrayData.$resources.forEach(function(record) {
				$tile = uiUtils.createDomElement('div', ["s-m-grid-horizontal-item"]);
				record.$domItem = $tile;
				self._buildRecord(record);
				self.$domItems.appendChild($tile);
			});

			self.onResizeWindow();
			self._buildPagingLinks(arrayData);

			$parent.appendChild($container);
		},

		_buildRecord: function(record) {
			var self = this;
			var $parent = record.$domItem;

			var links = self.itemProto.data("$links", record);
			if (links && links.$details) {
				var link = sdataUtils.getLinkInfo(links.$details.$url, record);
				var title = self.itemProto.data("$value", record);
				var $linkDom = uiUtils.createDomElement("a", null, null, {
					"href": "#",
					"data-nav": link.page,
					"data-sdata-url": link.sDataUrl
				}, $parent);

				uiUtils.createDomElement("span", ["s-m-grid-horizontal-item-link"], title, null, $linkDom);
			}
		},

		_buildPagingLinks: function(arrayData) {
			var self = this;
			self.pagingLinks = uiUtils.createDomElement('div', ["s-m-grid-horizontal-links"], null, null, self.$container);
			if (arrayData.$links) {
				["$first", "$previous", "$next", "$last", "$more"].forEach(function(linkName) {
					var link = arrayData.$links[linkName];
					if (link) {
						var linkInfo = sdataUtils.getLinkInfo(link.$url);
						var d = uiUtils.createDomElement('a', ["s-m-grid-horizontal-link"],
							linkName, {
								"data-nav": linkInfo.page,
								"data-sdata-url": link.$url
							}, self.pagingLinks);
					}
				});
			}
		},

		onResizeWindow: function() {
			var self = this;
			var arrayData = self.getArrayData();
			if (!arrayData) return;
			var w = window.innerWidth;
			var h = window.innerHeight;

			h = h - self.pageContentHeightSubstraction;
			self._maxItemHeight = h;
			self.$domItems.style.height = (self._maxItemHeight - 20) + "px";

			var x = 0;
			var y = 0;
			arrayData.$resources.forEach(function(child) {
				if (y + self._itemHeight > self._maxItemHeight) {
					y = 0;
					x += self._itemWidth + self._itemSpacing;
				}
				var s = child.$domItem.style;
				s.left = x + "px";
				s.top = y + "px";
				s.width = self._itemWidth + "px";
				s.height = self._itemHeight + "px";
				y += self._itemHeight + self._itemSpacing;
			});
		}
	});

exports.Klass = _Klass;