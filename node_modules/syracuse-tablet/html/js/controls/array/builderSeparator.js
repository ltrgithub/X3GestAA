"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/array/builderBase').Klass;
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');

/**
 * Display the control with displayCtx = "table"
 * I didn't want to change the displayCtx in all fields control so I kept "table"
 */
var _createCellControl = function(arrayCtrl, $$parent, colInfo, fieldProto) {
	var article = {
		"$bind": colInfo.$bind
	};
	return ctrlFactory.createCellFieldCtrl($$parent, arrayCtrl.controller, colInfo.article || colInfo, fieldProto);
};
var _seps = {
	semicolon: ",",
	colon: ":",
	blank: " ",
	dash: "-"
};
/**
 * Display a single array with a separator
 * To improve
 */
var _Klass = utils.defineClass(
	function(control, disp, options) {
		Base.call(this, control, disp, options);
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this._columnInfo) {
				this._columnInfo.forEach(function(col) {
					if (col.control) col.control.destroy();
				});
				this._columnInfo = null;
			}
		},
		buildHtml: function(arrayData, buildOpts) {
			buildOpts = buildOpts || {};
			Base.prototype.buildHtml.call(this, arrayData, buildOpts);
			this._createColumnInfo();
			this._build(arrayData, buildOpts);
		},
		_createColumnInfo: function() {
			if (this._columnInfo) return this._columnInfo;
			this._columnInfo = [];
			var items = this.control.prototype.arrayTableGetColInfo();
			var self = this;
			var proto, col;
			items.forEach(function(item, idx) {
				if (item.$isHidden) return;
				proto = self.$itemProto.property(item.$bind);
				if (!proto) return;
				if (!self.isExcluded(item, proto)) {
					col = {
						"$bind": item.$bind,
						"proto": self.$itemProto.create(proto),
						"article": item,
					};
					col.css = [self.$itemProto.getFieldNameForValue(item.$bind)];
					col.title = "";
					self._columnInfo.push(col);
				}
			});
			return this._columnInfo;
		},
		_isHeaderVisible: function() {
			return false;
		},
		_getSep: function() {
			return _seps[this.control.article.$separator || "blank"] || " ";
		},
		_build: function(arrayData, buildOpts) {
			this.control.$$value.empty();
			var $$section = $('<section/>').appendTo(this.control.$$value);
			var self = this;
			var sep = this._getSep(),
				$$sep;
			arrayData.$resources.forEach(function(data, idx) {
				if (idx > 0) {
					$$sep = $('<span class="s-m-separator"/>').appendTo($$section).text(sep);
					if (sep === ",") {
						$$sep.css("text-align", "left");
					}
				}
				self._buildCell($$section, data, idx, buildOpts);
			});
		},
		_buildCell: function($$parent, rowData, idx, buildOpts) {
			var self = this;
			self._columnInfo.forEach(function(col, idx) {
				if (!col.control) {
					col.control = _createCellControl(self.control, $$parent, col, col.proto);
				}
				self.callGenerateHtml(col.control, $$parent, rowData, false, buildOpts, idx);
			});
		}
	});

exports.Klass = _Klass;