"use strict";

var Base = require('syracuse-tablet/html/js/controls/ctrlSdataBase').CtrlSdataBase;
var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var modules = require('syracuse-tablet/html/js/common/modules');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var builderBase = require('syracuse-tablet/html/js/controls/array/builderBase');
var SdataController = require("syracuse-tablet/html/js/controllers/sdataController").SdataController;
var consts = require('syracuse-tablet/html/js/common/consts');
var protoHelpers = require('syracuse-tablet/html/js/sdata/protocolHelpers');


/**
 * Control representing a single row of an array
 */
exports.CtrlArrayTableRow = utils.defineClass(
	function CtrlArrayTableRow(rowDataset, arrayController, article, prototype, options) {
		this._rowController = null;
		// first
		this._createSDataController(rowDataset, arrayController);
		// Second
		Base.call(this, arrayController, article, prototype, options);
	}, Base, {
		// Creates _rowController - used also wan we refresh row's content
		_createSDataController: function(rowDataset, arrayController) {
			if (this._rowController) {
				this._rowController.destroy();
			}
			this._rowController = new SdataController(rowDataset, arrayController);
			// UiAdapter is the arrayControl for server feedback	
			this._rowController.setUIAdapter(this);
		},
		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this._rowController) {
				this._rowController.destroy();
				this._rowController = null;
			}
			this._columnsInfo = null;
		},

		createId: function(typeName) {
			return consts.ROWID_PREFIX + this.getUuid();
		},

		buildHtml: function(columnsInfo) {
			this._columnsInfo = columnsInfo;
			var classes = ["s-m-record"];
			if (this.options.rowIndex != null && this.options.rowIndex % 2 === 0) {
				classes.push("s-m-even");
			}
			Base.prototype.buildHtml.call(this, classes);
			this._buildContents();
		},

		_buildContents: function(columnsInfo) {
			if (this.options.rowLinkDomAttrs) {
				this.$$elmt.attr(this.options.rowLinkDomAttrs);
			} else if (this.options.drillDownDomAttrs) {
				this.$$elmt.attr(this.options.drillDownDomAttrs);
			}
			this.$$elmt.attr({
				"data-controller-id": this._rowController.id
			});
			var self = this;
			var ctrlFactory = modules.get("ctrlFactory");
			this._columnsInfo.forEach(function(col, idx) {
				if (col.isProtoItem) {
					var ctrlCell = ctrlFactory.createControl(self._rowController, col.article,
						self,
						self.page, {
							displayCtx: "table",
							noEdit: self.options.noEdit
						});
					if (ctrlCell) {
						var $$td = $(uiUtils.createDomElement("td", null, null, null, self.$$elmt));
						ctrlCell.set$$container($$td);
						ctrlCell.buildHtml();
					}
				} else {
					var text;
					switch (col.$bind) {
						case "rowStatus":
							text = builderBase.getHtmlStatus(col.statusInfo, self._rowController.dataset);
							break;
						case "rowIndex":
							text = '<div class="s-m-control s-m-row-index"><span class="badge">' + (self.options.rowIndex + 1) + '</span></div>';
							break;
						case "rowDetail":
						case "rowDelete":
						case "rowEdit":
							text = '<div class="s-m-control s-m-icon"><a href="#" data-nevent data-naction="rowAction" data-params="' + col.$bind + '" class="a"><span class="' + fontUtils.tableActionIcon(col.$bind) + '"></span></a></div>';
							break;
					}
					$("<td>" + (text || col.$bind) + "</td>").appendTo(self.$$elmt);
				}
			});
			if (this.page && this.page.isChild("SdataRowDetail")) {
				// For row-detail page we check if there's a diagnose after build to highlight the row
				// For non row-detail notifChildError is a called when server data are received (onDeltaMetaChanged)
				this.notifChildError();
			}
		},

		getRootElementTag: function() {
			return "tr";
		},
		_refreshContent: function() {
			// Destroy and recreate the controller (new controls are created)
			this._createSDataController(this._rowController.dataset, this._rowController.parent);
			//Build new cells under the same parent 
			this.$$elmt.empty();
			this._buildContents();
		},
		_actLookupAccept: function() {
			this.setRowSelected(true);
			var lookup = this.controller.root.lookupData; // Injected by lookup page so we can use it here
			var parentController = this._rowController.findController(lookup.controllerId);
			var value = this._rowController.getValue(lookup.$lookupKeyName);
			parentController.setValue(lookup.$bind, value, true);
			return modules.get("appController").App.goBack();
		},
		/**
		 * Update row index
		 */
		updateRowIndex: function(index) {
			if (this.options.rowIndex == null || index === this.options.rowIndex) {
				return;
			}
			if (this.options.rowIndex != null) {
				this.options.rowIndex = index;
			}
			// Update background
			this.$$elmt.toggleClass("s-m-even", this.options.rowIndex % 2 === 0);
			// Update index
			this.parent.builderContent.updateRowIndex(this.$$elmt, index);
		},
		onSdataLinkClicked: function($linkName, $linkBind) {
			if (this.page.multiSelectionIsEnabed()) {
				this.page.multiSelectionController.multiSelToggleRecord(this.$$elmt);
			} else {
				this.setRowSelected();
				this._rowController.onSdataLinkClicked($linkName, $linkBind);
			}
		},
		notifyRowSaved: function() {
			this._refreshContent();
			return modules.get("appController").App.goBack();

		},
		/**
		 * Highlight row if there's an error
		 */
		notifChildError: function() {
			// No information on header level, so scan fields for $diagnoses
			// We've to scan all the children diagnoses (nested arrays)
			this.$$elmt.toggleClass("error", protoHelpers.hasFieldLevelErrors(this._rowController.dataset.json));
		},
		/**
		 * activity: detail | edit | create
		 */
		openRowDetail: function(activity) {
			this._rowController.gotoUrl("child://SdataRowDetail", null, {
				isChild: true,
				childContext: {
					controllerId: this._rowController.id,
					rowControl: this,
					activity: activity
				}
			});
		},

		/**
		 * Called from rowDetail if cancel on create facet
		 */
		removeRowDetail: function() {
			this.parent.removeRow(this);
		},

		_actRowAction: function(params) {
			switch (params) {
				case "rowDetail":
					this.setRowSelected();
					this.openRowDetail("detail");
					break;
				case "rowEdit":
					this.setRowSelected();
					this.openRowDetail("edit");
					break;
				case "rowDelete":
					this.setRowSelected(false);
					// Ask the parent (=> array to remove the row)
					this.parent.removeRow(this);
					break;
				default:
					break;
			}
		},
		_actDrillDown: function() {
			this._rowController.drillDownLink(this.page.controller.level);
		},
		_actLevelUp: function() {
			this._rowController.levelUpLink(this.page.controller.level);
		},
		getUuid: function() {
			return this._rowController.dataset.getUuid();
		},
		setRowSelected: function(select) {
			select = select == null ? true : false;
			this.parent.$$content.find('.s-m-last-selected').removeClass("s-m-last-selected");
			if (select) {
				return this.$$elmt.addClass("s-m-last-selected");
			}
		},
		doAfterClickAddRow: function(isSingleArray) {
			if (isSingleArray) {
				if (this.children && this.children.length > 0) {
					// Set the focus on the field
					var self = this;
					setTimeout(function() {
						self.children[0].setFocus();
					})
				}
			} else {
				this.openRowDetail("create");
			}
		}
	});