"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/array/builderBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var reqProto = require('syracuse-tablet/html/js/helpers/prototype');

var _openChildId = "$OPENCHILD$";
var _isExcluded = ["image", "application/x-array", "application/x-document", "application/x-binary"];

var _getOpenChildColInfo = function() {
	return {
		$bind: _openChildId,
		$item: reqProto.create({
			$title: "Child"
		})
	};
};

/**
 * x-array control class
 */
var _Klass = utils.defineClass(
	function(control, options) {
		var self = this;
		Base.call(self, control, "grid", options);
		self.maxCols = globals.$config("arrays.gridMaxCols");
	}, Base, {

		buildHtml: function($$parent, arrayData, options) {
			var self = this;
			options = options || {};
			options.displayRowIdx = false;
			Base.prototype.buildHtml.call(self, $$parent, arrayData, options);
			self.$$elmt.addClass("s-m-array s-m-table");
			var title = self.getPrototype().property(self.control.$bind, "$title");
			if (title) {
				$(uiUtils.createDomElement('div', ["s-m-title"])).text(title).appendTo(self.$$elmt);
			}
			// Create standard control value elmt		
			var value = uiUtils.createDomElement('div', ["s-m-value"], null, null, self.$$elmt);
			if (self._createColumnInfo(options).length > 0) {
				var table = uiUtils.createDomElement('table', ["table table-hover table-condensed"], null, null, value);
				self._buildTableHead(table, options);
				self._buildTableBody(table, arrayData, options);
				self.buildPagingLinks(arrayData, {
					top: true,
					bottom: true
				});
			} else {
				$(value).addClass("empty");
			}
		},

		// get columns that should be displayed
		_createColumnInfo: function(options) {
			var self = this;
			self.columnInfo = [];
			if (options.displayRowIdx) {
				self.columnInfo.push({
					"$bind": reqProto.ROWIDXPROP,
					"$item": reqProto.getRowIdxProto()
				});
			}
			var cols = self.$itemProto.getArrayColumns();
			cols.forEach(function(col, idx) {
				if (!self.isExcluded(col.$item, idx)) {
					self.columnInfo.push(col);
				}
			});
			if (self.columnInfo.length != cols.length) {
				self.columnInfo.push(_getOpenChildColInfo());
			}
			return self.columnInfo;
		},

		isExcluded: function(item, idx) {
			var self = this;
			if (Base.prototype.isExcluded(self)) return true;
			return idx >= self.maxCols || _isExcluded.indexOf(item.data("$type")) >= 0;
		},

		_buildTableHead: function(root, options) {
			var self = this;
			var tabHead = uiUtils.createDomElement('thead', null, null, null, root);
			var tr = uiUtils.createDomElement('tr', null, null, null, tabHead);
			self.columnInfo.forEach(function(col) {
				var title = col.$item ? utils.parseExpression(col.$item.data('$title') || "", null, self.control.prototype) : "";
				uiUtils.createDomElement('th', null, title, null, tr);
			});
		},

		_buildTableBody: function(root, arrayData, options) {
			var self = this;
			var tabBody = uiUtils.createDomElement('tbody');
			root.appendChild(tabBody);
			// Build rows
			for (var i = 0; i < arrayData.$resources.length; i++) { //arrayData.$resources.forEach(function(rowData, idx) {
				self._buildTableRow(tabBody, arrayData.$resources[i], i, options);
			} //);
		},

		_buildTableRow: function(tabBody, rowData, idx, options) {
			var self = this;
			var cssRowIdx;
			if (options.displayRowIdx) {
				rowData.setRowIndex(idx);
				cssRowIdx = ["s-m-rowidx"];
			}
			var tr = self.buildDetailLink(rowData, {
				tag: "tr",
				parent: tabBody,
				createIfNoLink: true
			});
			var cell, rowIdx, fieldProto;
			self.columnInfo.forEach(function(col, idx) {
				rowIdx = options.displayRowIdx && col.$bind === reqProto.ROWIDXPROP;
				cell = uiUtils.createDomElement('td', rowIdx ? cssRowIdx : null, null, null, tr);
				fieldProto = col.$bind === _openChildId ? self._getOpenChildProto(rowData.getValue("$uuid")) : col.$item;
				self.appendField2Cell(cell, col.$bind, fieldProto, rowData);
			});
		},

		_getOpenChildProto: function(rowId) {
			var self = this;
			var $action = {
				"data-nav": "rowdetail",
				"data-control-id": self.control.id,
				"data-parent-id": self.control.controller.id,
				"data-params": rowId

			};
			if (self.control.controller.isVignette) {
				// Its the vignette which will load the page
				$action["data-nav-target"] = "vignette";
			}
			return reqProto.create({
				$title: "Child",
				$type: "tablet/x-icon",
				$icon: self.$isEditMode ? "editrow" : "detailrow",
				$action: $action
			});
		}
	});

exports.Klass = _Klass;