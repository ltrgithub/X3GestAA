"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/array/builderBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var reqProto = require('syracuse-tablet/html/js/helpers/prototype');

var _isExcluded = ["image", "application/x-array", "application/x-document", "application/x-binary"];
/**
 * x-array control class
 */
var _Klass = utils.defineClass(
	function(control) {
		var self = this;
		Base.call(self, control, "grid");
		self.maxCols = globals.$config("arrays.gridMaxCols");
	}, Base, {

		buildHtml: function($$parent, arrayData, options) {
			var self = this;
			options = options || {};
			options.displayRowIdx = false;
			Base.prototype.buildHtml.call(self, $$parent, arrayData, options);
			self.$$elmt.addClass("s-m-array s-m-table");
			var title = self.getPrototype().property(self.getArticle().$bind, "$title");
			if (title) {
				$(uiUtils.createDomElement('div', ["s-m-title"])).text(title).appendTo(self.$$elmt);
			}
			// Create standard control value elmt		
			var value = uiUtils.createDomElement('div', ["s-m-value"], null, null, self.$$elmt);
			if (self._createColumnInfo(options).length > 0) {
				var table = uiUtils.createDomElement('table', ["table table-hover table-condensed"], null, null, value);
				self._buildTableHead(table, options);
				self._buildTableBody(table, arrayData, options);
				self.buildPagingLinks(arrayData, {
					top: true,
					bottom: true
				});
			} else {
				$(value).addClass("empty");
			}
		},

		// get columns that should be displayed
		_createColumnInfo: function(options) {
			var self = this;
			self.columnInfo = [];
			if (options.displayRowIdx) {
				self.columnInfo.push({
					"$bind": reqProto.rowIdxProperty,
					"$item": reqProto.getRowIdxProto()
				});
			}
			var props = self.itemProto.data("$properties");
			var keys = Object.keys(props);
			keys.forEach(function(key, idx) {
				if (!self.isExcluded(props[key], idx)) {
					self.columnInfo.push({
						"$bind": key,
						"$item": self.itemProto.getPrototype(key)
					});
				}
			});
			if (self.columnInfo.length != keys.length) {}
			return self.columnInfo;
		},

		isExcluded: function(item, idx) {
			var self = this;
			if (Base.prototype.isExcluded(self)) return true;
			return idx >= self.maxCols || _isExcluded.indexOf(item.$type) >= 0;
		},

		_buildTableHead: function(root, options) {
			var self = this;
			var tabHead = uiUtils.createDomElement('thead', null, null, null, root);
			var tr = uiUtils.createDomElement('tr', null, null, null, tabHead);
			self.columnInfo.forEach(function(col) {
				var title = col.$item ? utils.parseExpression(col.$item.data('$title') || "", null, self.control.prototype) : "";
				uiUtils.createDomElement('th', null, title, null, tr);
			});
		},

		_buildTableBody: function(root, arrayData, options) {
			var self = this;
			var tabBody = uiUtils.createDomElement('tbody');
			root.appendChild(tabBody);
			// Build rows
			arrayData.$resources.forEach(function(rowData, idx) {
				self._buildTableRow(tabBody, rowData, idx, options);
			});
		},

		_buildTableRow: function(tabBody, rowData, idx, options) {
			var self = this;
			var cssRowIdx;
			if (options.displayRowIdx) {
				rowData.setRowIndex(idx);
				cssRowIdx = ["s-m-rowidx"];
			}
			var tr = self.buildDetailLink(rowData, {
				tag: "tr",
				parent: tabBody,
				createIfNoLink: true
			});
			self.columnInfo.forEach(function(col, idx) {
				var rowIdx = options.displayRowIdx && col.$bind === reqProto.rowIdxProperty;
				self.appendField2Cell(uiUtils.createDomElement('td', rowIdx ? cssRowIdx : null, null, null, tr), col.$bind, col.$item, rowData);
			});
		}
	});

exports.Klass = _Klass;