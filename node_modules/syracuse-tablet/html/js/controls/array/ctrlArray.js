"use strict";


var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var modal = require('syracuse-tablet/html/js/ui/modal');
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var daoSdata = require('syracuse-tablet/html/js/application/daoSdata');

var Builders = {
	table: require('syracuse-tablet/html/js/controls/array/builderTable').Klass,
	cardV: require('syracuse-tablet/html/js/controls/array/builderCardV').Klass,
	cardH: require('syracuse-tablet/html/js/controls/array/builderCardH').Klass
};
var _destroyArrayData = function(a) {
	if (!a || !a.$resources) return null;
	a.$resources.forEach(function(r) {
		if (r) r.destroy();
	});
	return null;
};
/**
 * x-array control class
 * Authoring
 * 			$isTitleHidden: 	true/false
 * 			$displayHeaderIfEmpty:	true/false
 * 			$displayLabelIfEmpty:	true/false
 */
var _Klass = utils.defineClass(
	function(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
		if (!article.$article) throw new Error("$article is expected");
		var Builder = Builders[article.$display];
		if (!Builder) throw new Error("Unknown $article.$display [" + article.$display + "]");
		self.builder = new Builder(self, options);
		self._arrayData = null;
		// All the rows with a link to rowDetail are registered here - id: {pathId,pathBin}
		// When we display an array nested in arrays in card mode we need to store the path to access to the data/proto of the selected row
		// -> Html of Cards are generated and the control object is not stored so we need to store the path to retrieve it from mainControl (htmlRootCtrl)
		self._rowDetailCache = {};
		// Info of the clicked row
		self._rowDetailInfo = null;
	}, Base, {
		/**
		 * Init the properties to allow reuse of this control
		 */
		initReuseProperties: function() {
			Base.prototype.initReuseProperties.call(this);
			if (this._arrayData) this._arrayData = _destroyArrayData(this._arrayData);
			if (this.builder) this.builder.initReuseProperties();
		},
		destroy: function() {
			var self = this;
			// Just set to null - destroyed by rowDetail page
			self._rowDetailInfo = null;
			// Just set to null
			self._rowDetailCache = null;
			Base.prototype.destroy.call(self);
			self.prototype = null;
			if (self.builder) {
				self.builder.destroy();
				self.builder = null;
			}
			self._arrayData = _destroyArrayData(self._arrayData);
			if (self._waiting) {
				uiUtils.waitWheelDestroy(self._waiting);
				self._waiting = null;
			}
		},
		/**
		 *	Build html DOM object + bind event
		 **/
		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			if (self.builder == null) throw new Error("Null builder");
			// Create standard root elmt
			var disp = self.article.$display || "table";
			var css = "s-m-";
			if (disp === "cardV") {
				css += "card s-m-V";
			} else if (disp === "cardH") {
				css += "card s-m-H";
			} else {
				css += disp;
			}
			// Build root elm
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions, ["s-m-array", css]);
			// Set up array data and isEmpty property used to managed authoring - Display title
			self._setArrayData(controllerDao);
			if (self._displayArray()) {
				self.builder.buildHtml(self._arrayData, buildOptions);
			}
		},
		/**
		 * handle selection of a row
		 */
		_actSelect: function(rowId) {
			var self = this;
			var rowData = self._getRowById(rowId);
			if (!rowData) return;
			rowData = rowData.row;
			// Notify last selected row - see selectLastSelectedRow
			// Used by lookup page and standard page to store the lastSelectedRowId
			// false to not update UI because link destroy the page
			self.controller.notifSelectRow(self.id, rowId, rowData, false);
			if (!self.prototype.isLookup()) {
				// Open the link
				var links = self.builder.$itemProto.data("$links");
				var linkProto = (links && links.DASHBOARD) || (links && links.$details);
				if (linkProto) {
					var attrs = {};
					var link = sdataUtils.getLinkInfo(linkProto.$url, rowData);
					attrs["data-nav"] = link.page;
					attrs["data-nav-target"] = self.controller.openLinkInVignette() ? "vignette" : "application";
					if (link.sDataUrl) {
						attrs["data-sdata-url"] = link.sDataUrl;
					}
					if (link.parameters) {
						var params = utils.parseExpression(link.parameters, rowData);
						attrs["data-sdata-parameters"] = params;
					}
					eventListener.triggerNavigation(self.$$elmt, attrs);
				}
			} // Else if look up nothing - just notify
		},
		/**
		 * handle link to detail of the row
		 * Calculate information dao/proto/name for rorwDetail page
		 * Each time a rowDetail link is generated, it stores info in _rowDetailCache
		 * 		Path of array from root page
		 * 		Path of row ids
		 * This method retrieve dao/proto objects from stored info and stores them _rowDetailInfo
		 * 		rowDetail page needs _rowDetailInfo.dao in lodaData method
		 *  	pageHelpers._getRowdetailPage needs _rowDetailInfo.proto and _rowDetailInfo.pathBind to build rowDetail page proto
		 */
		_actRowDetail: function(rowId) {
			var self = this;
			try {
				// Info that has been set by the builder - Contains path of $binds and ids for each row displayed
				var info = self._rowDetailCache[rowId];
				if (!info) throw new Error("rowDetailGetDao - Unexpected null row info");
				var rootDao = self.getDao();
				// We need to start form the page because pathBind is the path of the array starting from page
				// -> rootDao is the page's Dao
				while (rootDao.parent) {
					rootDao = rootDao.parent;
				}
				var proto = self.prototype;
				// -> proto is the page's Proto
				while (proto.parent) {
					proto = proto.parent;
				}
				// Id of the row for a given path (given by index)
				var pathId = info.isCreate ? null : info.pathId;
				// Path of targeted array
				var pathBind = info.pathBind;
				var dao = rootDao,
					res;
				var protoPath = ["$properties"];
				for (var i = 0; i < pathBind.length; i++) {
					protoPath.push(pathBind[i]);
					// Get Proto and dao for the ith array
					proto = proto.getPrototype(protoPath.join("."));
					if (!info.isCreate) {
						dao = dao.getArrayData(pathBind[i], proto);
						// Read the row by id in dao
						res = self._getRowById(pathId[i], dao);
						if (!res) throw new Error("rowDetailGetDao - Row not found " + pathBind[i] + "." + pathId[i]);
						// Current dao
						dao = res.row;
					}
					// Current path rrot in protoypt
					protoPath = ["$item.$properties"];
				}
				proto = proto.getPrototype("$item", {
					$url: "",
					$typ: "rowdetail"
				});
				pathBind = info.pathBind.join('.');
				// Stores row Detail in info; RoxDeatil info will request his info in loadData method
				self._rowDetailInfo = {
					// Path of the array from root (page) - use dto calculated the id of the rowDetail page
					pathBind: pathBind,
					// dao of rowDetail page
					dao: info.isCreate ? daoSdata.getArrayEmptyRow(proto, pathBind) : dao.clone(),
					// Proto of row detail page
					proto: proto
				};
				// Trigger a navigation to rowDetail page
				var attrs = {
					"data-control-id": self.id,
					"data-parent-id": self.controller.id,
					"data-nav": "rowdetail",
					// rowId is the key passed by rowDetail page to this.rowDetailGetDao
					"data-params": rowId
				};
				if (self.controller.isVignette) {
					// It's the vignette which will load the page
					// We open row detail in the same vignette
					attrs["data-nav-target"] = "vignette";
				}
				// Notify last selected row - see selectLastSelectedRow - true to update UI because link doesn't destroy the page
				self.controller.notifSelectRow(self.id, rowId, null, true);
				eventListener.triggerNavigation(self.$$elmt, attrs);
			} catch (e) {
				globals.getModal().error("Error loading row detail page", e);
			}
		},
		/**
		 * Register a row in rowDetail cache to be able to reteive infortiaon on ckcik on 'rowDetail' Link (_actRowDetail)
		 */
		rowDetailAdd: function(id, data) {
			this._rowDetailCache[id] = data;
		},
		/**
		 * 	rowId:	Id of selected row - empty/null if creation
		 *  Return the dao of the selected row (see _actRowDetail)		 *
		 **/
		rowDetailGetDao: function(create) {
			// Read/ Edit row detail
			return this._rowDetailInfo.dao;
		},
		/**
		 * Return the prototype of a row detail page
		 */
		rowDetailGetPrototype: function() {
			return this._rowDetailInfo.proto;
		},
		/**
		 * Returns the id of the page used to store it into application page
		 * The rowDetail page is generated one time
		 */
		rowDetailGetPageName: function(root) {
			if (!this._rowDetailInfo) throw new Error("rowDetailGetPageName - Null details row data");
			// To store the generated page in aplication page we nee the full path of the selected row
			// By exmaple for AQMCRUDM -  if we add a $article to the array level 1 we display i the card array level 2
			// When we click on rowDetail we need to display the row of level 2 ADEVADEVICEL.ADEVADEVICELADEVICELL
			// Page name is 
			//		AQMCRUDM.$details.ADEVADEVICEL if no article in ADEVADEVICEL
			//		AQMCRUDM.$details.ADEVADEVICEL.ADEVADEVICELADEVICELL if there's an article in ADEVADEVICEL
			//		AQMCRUDM.$details.ADEVADEVICEL.ADEVADEVICELADEVICELL.ADEVADEVICELADEVICELLDLLLif there's an article in ADEVADEVICEL.ADEVADEVICELADEVICELL
			return root + "." + this._rowDetailInfo.pathBind;
		},
		/**
		 * handle delete row
		 */
		_actDelrow: function(rowid) {
			modal.simpleConfirm("Do you want to delete this row ?\n\nId=" + rowid, function(confirmed) {
				if (confirmed) {

				}
			});
		},
		/**
		 * Select the last selected row
		 * lastSelectedrow is stored in page context and restores on back
		 * It highlights the last selected row
		 * Done by builder because depends on the way array has been rendered
		 */
		selectLastSelectedRow: function(rowId, show) {
			this.builder.selectLastSelectedRow(rowId, show);
		},
		/**
		 * Refreshes the control
		 */
		refresh: function(controllerDao, options) {
			var self = this;
			if (self.builder == null) throw new Error("Null builder");
			self.builder.buildHtml(self._setArrayData(controllerDao), options);
		},
		/**
		 *	returns array rows
		 *		depends on the kind of page query/lookup or detail/edit
		 *		called one time to create the dao - then use getArrayData()
		 **/
		readArrayData: function(controllerDao) {
			var self = this;
			if (self.prototype.isQuery()) {
				return controllerDao.getQueryData(self.prototype);
			} else if (self.prototype.isLookup()) {
				return controllerDao.getLookupData(self.prototype);
			} else {
				return controllerDao.getArrayData(self.$bind, self.prototype);
			}
		},
		/**
		 *	Set array data - depends on array type
		 **/
		_setArrayData: function(controllerDao) {
			var self = this;
			// Clear control content
			self.empty();
			self.$$value = $(uiUtils.createDomElement('div', ["s-m-value"], null, null, self.$$elmt));
			_destroyArrayData(self._arrayData);
			self._arrayData = self.readArrayData(controllerDao);
			if (self._arrayData == null) throw new Error("Null arrayData");
			self.isEmpty = self._arrayData.$resources.length === 0;
			// Build the base structure common to all ctrls - Title and value
			var title = self.getTitle();
			var $$ttl = self.$$elmt.children(".s-m-title");
			if (self._displayTitle(title) && $$ttl.length > 0) {
				$(uiUtils.createDomElement('div', ["s-m-title"])).text(title).appendTo(self.$$elmt);
			} else {
				$$ttl.empty();
			}
			return self._arrayData;
		},
		_displayTitle: function(title) {
			if (title == null || title.trim().length === 0) return false;
			if (this.getAuthoring("$isTitleHidden") === true) return false;
			return this._displayArray();
		},
		_displayArray: function() {
			return this.controller.isEditMode() === true || this.isEmpty !== true || this.getAuthoring("$displayHeaderIfEmpty") === true;
		},
		/**
		 *	returns array rows
		 *		controllerDao optional
		 **/
		getArrayData: function() {
			return this._arrayData;
		},
		waitStart: function() {
			var self = this;
			if (!self._waiting) {
				// TODO - Optimization
				self._waiting = uiUtils.waitWheelCreate(self.$$elmt.parent());
				self._waiting.$$bckg.css({
					position: "absolute"
				});
				self._waiting.$$wheel.css({
					position: "absolute"
				});
			}
			uiUtils.waitWheelStart(self._waiting);
		},
		waitStop: function() {
			var self = this;
			if (self._waiting) {
				uiUtils.waitWheelStop(self._waiting);
			}
		},
		// arrayData is used for recursice search in arrays nested in arrays
		_getRowById: function(rowId, arrayData) {
			var self = this;
			var result = null;
			arrayData = arrayData || self._arrayData;
			if (!arrayData) return result;
			var idx = 0;
			arrayData.$resources.some(function(r) {
				if (r.getValue("$uuid") === rowId) {
					result = r;
					return true;
				}
				idx++;
			});
			return result ? {
				row: result,
				idx: idx
			} : null;
		}
	});

exports.Klass = _Klass;