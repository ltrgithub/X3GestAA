"use strict";


var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var modal = require('syracuse-tablet/html/js/ui/modal');
var Builders = {
	table: require('syracuse-tablet/html/js/controls/array/builderTable').Klass,
	cardV: require('syracuse-tablet/html/js/controls/array/builderCardV').Klass,
	cardH: require('syracuse-tablet/html/js/controls/array/builderCardH').Klass
};
var _destroyArrayData = function(a) {
	if (!a || !a.$resources) return null;
	a.$resources.forEach(function(r) {
		if (r) r.destroy();
	});
	return null;
};
/**
 * x-array control class
 */
var _Klass = utils.defineClass(
	function(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
		if (!article.$article) throw new Error("$article is expected");
		var Builder = Builders[article.$article.$display];
		if (!Builder) throw new Error("Unknown $article.$display [" + article.$article.$display + "]");
		self.builder = new Builder(self, options);
		self._arrayData = null;
	}, Base, {

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			self.prototype = null;
			if (self.builder) {
				self.builder.destroy();
				self.builder = null;
			}
			self._arrayData = _destroyArrayData(self._arrayData);
			if (self._waiting) {
				uiutils.waitWheelDestroy(self._waiting);
				self._waiting = null;
			}
		},
		/**
		 *	Build html DOM object + bind event
		 **/
		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			if (self.builder == null) throw new Error("Null builder");
			// Create standard root elmt
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions, ["s-m-array"]);
			// Set the array context for children controls
			// type: grid/card/null
			var previous = buildOptions.isArray;
			buildOptions.arrContext = self.builder.type;
			self.builder.buildHtml($$parent, self._setArrayData(controllerDao), buildOptions);
			buildOptions.isArray = previous || null;
		},
		/**
		 * Refreshes the control
		 */
		refresh: function(controllerDao, options) {
			var self = this;
			if (self.builder == null) throw new Error("Null builder");
			self.builder.refresh(self._setArrayData(controllerDao), options);
		},
		/**
		 *	returns array rows
		 *		depends on the kind of page query/lookup or detail/edit
		 *		called one time to create the dao - then use getArrayData()
		 **/
		readArrayData: function(controllerDao) {
			var self = this;
			if (self.prototype.isQuery()) {
				return controllerDao.getQueryData(self.prototype);
			} else if (self.prototype.isLookup()) {
				return controllerDao.getLookupData(self.prototype);
			} else {
				return controllerDao.getArrayData(self.$bind, self.prototype);
			}
		},
		/**
		 *	Set array data - depends on array type
		 **/
		_setArrayData: function(controllerDao) {
			var self = this;
			self.empty();
			_destroyArrayData(self._arrayData);
			self._arrayData = self.readArrayData(controllerDao);
			if (self._arrayData == null) throw new Error("Null arrayData");
			return self._arrayData;
		},
		/**
		 *	returns array rows
		 *		controllerDao optional
		 **/
		getArrayData: function() {
			return this._arrayData;
		},
		waitStart: function() {
			var self = this;
			if (!self._waiting) {
				// TODO - Optimization
				self._waiting = uiutils.waitWheelCreate(self.$$elmt.parent());
				self._waiting.$$bckg.css({
					position: "absolute"
				});
				self._waiting.$$wheel.css({
					position: "absolute"
				});
			}
			uiutils.waitWheelStart(self._waiting);
		},
		waitStop: function() {
			var self = this;
			if (self._waiting) {
				uiutils.waitWheelStop(self._waiting);
			}
		},
		_actDelrow: function(rowid) {
			modal.simpleConfirm("Do you want to delete this row ?\n\nId=" + rowid, function(confirmed) {
				if (confirmed) {

				}
			});
		},
		/**
		 * 	params - set by grid builder:
		 * 		rowId:		Id of selected row - empty if creation
		 * 		activity:	create/edit/display
		 *	returns the dao for a rowdetail page
		 **/
		getRowDetailDao: function(params) {
			var self = this;
			if (!params || !self._arrayData || !self._arrayData.$resources) return null;
			var dao;
			switch (params.activity) {
				case "edit":
				case "display":
					self._arrayData.$resources.some(function(r) {
						if (r.getValue("$uuid") === params.rowId) {
							dao = r;
							return true;
						}
					});
					return dao ? dao.clone() : null;
				case "create":
					return self.getDao().getArrayEmptyRow(self.prototype);
				default:
					throw new Error("Unexpected activity");
			}
		}
	});

exports.Klass = _Klass;