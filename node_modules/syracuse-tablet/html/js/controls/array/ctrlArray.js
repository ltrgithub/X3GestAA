"use strict";


var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var modal = require('syracuse-tablet/html/js/ui/modal');
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');

var Builders = {
	table: require('syracuse-tablet/html/js/controls/array/builderTable').Klass,
	cardV: require('syracuse-tablet/html/js/controls/array/builderCardV').Klass,
	cardH: require('syracuse-tablet/html/js/controls/array/builderCardH').Klass
};
var _destroyArrayData = function(a) {
	if (!a || !a.$resources) return null;
	a.$resources.forEach(function(r) {
		if (r) r.destroy();
	});
	return null;
};
/**
 * x-array control class
 */
var _Klass = utils.defineClass(
	function(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
		if (!article.$article) throw new Error("$article is expected");
		var Builder = Builders[article.$article.$display];
		if (!Builder) throw new Error("Unknown $article.$display [" + article.$article.$display + "]");
		self.builder = new Builder(self, options);
		self._arrayData = null;
	}, Base, {
		/**
		 * Init the properties to allow reuse of this control
		 */
		initReuseProperties: function() {
			Base.prototype.initReuseProperties.call(this);
			if (this._arrayData) this._arrayData = _destroyArrayData(this._arrayData);
			if (this.builder) this.builder.initReuseProperties();
		},
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			self.prototype = null;
			if (self.builder) {
				self.builder.destroy();
				self.builder = null;
			}
			self._arrayData = _destroyArrayData(self._arrayData);
			if (self._waiting) {
				uiUtils.waitWheelDestroy(self._waiting);
				self._waiting = null;
			}
		},
		/**
		 *	Build html DOM object + bind event
		 **/
		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			if (self.builder == null) throw new Error("Null builder");
			// Create standard root elmt
			var disp = self.article.$article.$display || "table";
			var css = "s-m-";
			if (disp === "cardV") {
				css += "card s-m-V";
			} else if (disp === "cardH") {
				css += "card s-m-H";
			} else {
				css += disp;
			}
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions, ["s-m-array", css]);
			self.builder.buildHtml(self._setArrayData(controllerDao), buildOptions);
		},
		/**
		 * Open link
		 */
		_actOpen: function(rowId) {
			var self = this;
			alert(rowId);
		},

		/**
		 * handle selection of a row in query array
		 */
		_actSelect: function(rowId) {
			var self = this;
			var rowData = self._getRowById(rowId);
			if (!rowData) return;
			// Notify synchronously page that row has bee selected
			// Used by lookup page and standard page to store the lastSelectedRowId
			self.controller.notifSelectRow(rowId, rowData);
			if (!self.prototype.isLookup()) {
				// Open the link
				var links = self.builder.$itemProto.data("$links");
				var linkProto = (links && links.DASHBOARD) || (links && links.$details);
				if (linkProto) {
					var attrs = {};
					var link = sdataUtils.getLinkInfo(linkProto.$url, rowData);
					attrs["data-nav"] = link.page;
					attrs["data-nav-target"] = self.controller.openLinkInVignette() ? "vignette" : "application";
					if (link.sDataUrl) {
						attrs["data-sdata-url"] = link.sDataUrl;
					}
					if (link.parameters) {
						var params = utils.parseExpression(link.parameters, rowData);
						attrs["data-sdata-parameters"] = params;
					}
					eventListener.triggerNavigation(attrs);
				}
			} // Else if look up nothing - just notifify
		},
		_actRowDetail: function(param) {
			var self = this;
			var attrs = {
				"data-control-id": self.id,
				"data-parent-id": self.controller.id,
				"data-nav": "rowdetail",
				"data-params": JSON.stringify(params)
			};

			eventListener.triggerNavigation(attrs);
			if (self.control.controller.isVignette) {
				// It's the vignette which will load the page
				// We open row detail in the same vignette
				attrs["data-nav-target"] = "vignette";
			}
		},
		/**
		 * Refreshes the control
		 */
		refresh: function(controllerDao, options) {
			var self = this;
			if (self.builder == null) throw new Error("Null builder");
			self.builder.buildHtml(self._setArrayData(controllerDao), options);
		},
		/**
		 *	returns array rows
		 *		depends on the kind of page query/lookup or detail/edit
		 *		called one time to create the dao - then use getArrayData()
		 **/
		readArrayData: function(controllerDao) {
			var self = this;
			if (self.prototype.isQuery()) {
				return controllerDao.getQueryData(self.prototype);
			} else if (self.prototype.isLookup()) {
				return controllerDao.getLookupData(self.prototype);
			} else {
				return controllerDao.getArrayData(self.$bind, self.prototype);
			}
		},
		/**
		 *	Set array data - depends on array type
		 **/
		_setArrayData: function(controllerDao) {
			var self = this;
			// Clear control content
			self.empty();
			// Build the base structure common to all ctrls - Title and value
			var title = self.getAuthoring("$isTitleHidden") ? null : self.getTitle();
			if (title) {
				$(uiUtils.createDomElement('div', ["s-m-title"])).text(title).appendTo(self.$$elmt);
			}
			self.$$value = $(uiUtils.createDomElement('div', ["s-m-value"], null, null, self.$$elmt));
			_destroyArrayData(self._arrayData);
			self._arrayData = self.readArrayData(controllerDao);
			if (self._arrayData == null) throw new Error("Null arrayData");
			return self._arrayData;
		},
		/**
		 *	returns array rows
		 *		controllerDao optional
		 **/
		getArrayData: function() {
			return this._arrayData;
		},
		waitStart: function() {
			var self = this;
			if (!self._waiting) {
				// TODO - Optimization
				self._waiting = uiUtils.waitWheelCreate(self.$$elmt.parent());
				self._waiting.$$bckg.css({
					position: "absolute"
				});
				self._waiting.$$wheel.css({
					position: "absolute"
				});
			}
			uiUtils.waitWheelStart(self._waiting);
		},
		waitStop: function() {
			var self = this;
			if (self._waiting) {
				uiUtils.waitWheelStop(self._waiting);
			}
		},
		_actDelrow: function(rowid) {
			modal.simpleConfirm("Do you want to delete this row ?\n\nId=" + rowid, function(confirmed) {
				if (confirmed) {

				}
			});
		},
		/**
		 * 	params - set by grid builder:
		 * 		rowId:		Id of selected row - empty if creation
		 * 		activity:	create/edit/display
		 *	returns the dao for a rowdetail page
		 **/
		getRowDetailDao: function(params) {
			var self = this;
			if (!params || !self._arrayData || !self._arrayData.$resources) return null;
			switch (params.activity) {
				case "edit":
				case "display":
					var dao = self._getRowById(params.rowId);
					return dao ? dao.clone() : null;
				case "create":
					return self.getDao().getArrayEmptyRow(self.prototype);
				default:
					throw new Error("Unexpected activity");
			}
		},
		_getRowById: function(rowId) {
			var self = this;
			var result = null;
			if (!self._arrayData) return result;
			self._arrayData.$resources.some(function(r) {
				if (r.getValue("$uuid") === rowId) {
					result = r;
					return true;
				}
			});
			return result;
		}
	});

exports.Klass = _Klass;