"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');


var _paginLinks = ["$first", "$previous", "$next", "$last", "$more"];
/**
 * Array builder base class
 */
var _Klass = utils.defineClass(
	function(control) {
		var self = this;
		if (control == null) throw new Error("Null control");
		self.control = control;
		self.itemProto = control.prototype.getPrototype("$item");
	}, null, {

		destroy: function() {
			var self = this;
			self.control = null;
			self.itemProto = null;
			/* No destroy - destroyed in control*/
			self.$$elmt = null;
		},

		/**
		 * $$parent parent JQuery element
		 * 		$$parent == null means a REFRESH - TODO optimize refresh if needed
		 * 	arrayData is an object that contains all data needed by array
		 * 	arrayData.$resources contains rows data - Array of dao
		 */
		buildHtml: function($$parent, arrayData, buildOptions) {
			var self = this;
			if ($$parent != null) self.$$elmt = self.control.createRootElement(["s-m-control"], $$parent);
			return self.$$elmt;
		},

		/**
		 * Refreshes the control
		 * 		Just clear and re-build html
		 */
		refresh: function(arrayData, options) {
			var self = this;
			self.control.empty();
			self.buildHtml(null, arrayData, {});
		},

		buildPagingLinks: function(arrayData, options) {
			var self = this;
			var addLink = function(parent, linkName, attrs) {
				$(uiUtils.createDomElement('a', ["s-m-link", fontUtils.paginationIcon(linkName)],
					null, attrs)).appendTo(parent);
			};
			options = options || {};
			var linksBottom = options.bottom ? $(uiUtils.createDomElement('div', ["s-m-grid-links"])).appendTo(self.$$elmt) : null;
			var linksTop = options.top ? $(uiUtils.createDomElement('div', ["s-m-grid-links"])).prependTo(self.$$elmt) : null;
			if (arrayData.$links) {
				_paginLinks.forEach(function(linkName) {
					var link = arrayData.$links[linkName];
					if (link) {
						var linkInfo = sdataUtils.getLinkInfo(link.$url);
						var attrs = {
							// page refresh
							"data-nav-refresh": true,
							// data-nav-type is used to specify the type of link
							"data-nav-type": linkName,
							// Data url
							"data-sdata-url": link.$url,
							// refresh control only
							"data-control-id": self.control.id,
						};
						if (self.control.controller.isVignette()) {
							// Add vignette info to reload the page in vignette
							attrs["data-nav-target"] = "vignette";
						}
						if (linksBottom) addLink(linksBottom, linkName, attrs);
						if (linksTop) addLink(linksTop, linkName, attrs);
					}
				});
			}
		},
		/**
		 * Can be overridden - lookup
		 */
		buildDetailLink: function(rowData, options) {
			if (options == null) throw new Error("Null options");
			var self = this;
			var attrs = options.attrs || {};
			var links = self.itemProto.data("$links"),
				link;
			// If there is a DASHBOARD link it replaces $details
			var linkProto = (links && links.DASHBOARD) || (links && links.$details);
			if (linkProto) {
				link = sdataUtils.getLinkInfo(linkProto.$url, rowData);
				attrs["href"] = "#";
				attrs["data-nav"] = link.page;
				if (link.sDataUrl) {
					attrs["data-sdata-url"] = link.sDataUrl;
				}
				if (link.parameters) {
					var params = utils.parseExpression(link.parameters, rowData);
					attrs["data-sdata-parameters"] = params;
				}
			} else {
				link = null;
			}
			if (link != null || options.createIfNoLink) {
				return uiUtils.createDomElement(options.tag, options.css, options.title, attrs, options.parent);
			}
			return null;
		},

		getPrototype: function() {
			return this.control.prototype;
		},

		getArticle: function() {
			return this.control.article;
		},

		/**
		 * Returns array rows data (Array)
		 */
		getArrayData: function() {
			return this.control.getArrayData();
		},

		/**
		 * Returns control id eventually concatenated with arguments
		 * 	Allows to get unic ids for control childs if needed
		 */
		getId: function() {
			var self = this;
			if (arguments.length > 0) {
				return self.control.id + " - " + Array.prototype.join.call(arguments, '-');
			} else {
				return self.control.id;
			}
		},

		/**
		 * Create a field control to get the html
		 * 	TODO Destroy the ctrl after getting html - no needs to store it
		 */
		appendField2Cell: function($$parent, fieldName, fieldProto, data) {
			var self = this;
			if (!fieldProto) fieldProto = self.itemProto.getPrototype(fieldName);
			if (!fieldProto) return null;
			ctrlFactory.appendField2Cell($$parent, self.control.controller, {
				"$bind": fieldName
			}, fieldProto, data);
		}
	});

exports.Klass = _Klass;