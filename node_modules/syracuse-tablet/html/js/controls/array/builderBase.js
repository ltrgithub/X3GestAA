"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var uiRect = require('syracuse-tablet/html/js/ui/rect');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var HammerScroller = require('syracuse-tablet/html/js/controls/hammerScroller').Klass;

var _templates = {
	pagin: '\
			<nav class="s-m-array-links"> \
				<ul class="pagination"> \
					{{#each links}}\
						<li>\
							<a class="s-m-link {{css}}"\
								href = "#"\
								{{#if url}}\
									data-nav-refresh="true"\
									data-nav-type="{{type}}"\
									data-sdata-url="{{url}}"\
									data-control-id="{{id}}"\
									data-nav-target="{{target}}"\
								{{/if}}\
								draggable="false">\
							</a>\
						</li>\
					{{/each}}\
				</ul> \
			</nav> \
		'
};
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	if (!tmpl) alert("template " + name + " not found");
	return tmpl(ctx);
};

var _isExcluded = ["application/x-password"];
var _paginLinks = ["$first", "$previous", "$more", "$next", "$last"];
/**
 * Array builder base class
 * Authoring global properties
 * 		$isTitleHidden		Hide the column title
 * 		$rowIdx				Show/Hide row index
 */
var _Klass = utils.defineClass(
	function(control, options) {
		var self = this;
		self.options = options || {};
		if (control == null) throw new Error("Null control");
		self.control = control;
		// Article of content inside this control
		// This should not be self.$article
		self.$article = control.article.$article;
		// Article of control itself with $bind, $isTitleHidden, $cardsPer<xxx>, all that does affect the control itself
		// Normally, this should be self.$article
		self.$articleArray = control.article;
		self.$itemProto = control.prototype.getPrototype("$item");
		self.displayRowIdx = self.$article.$rowIdx === true;
		self._gestureMgr = null;
	}, null, {
		/**
		 * Init the properties to allow reuse of this control
		 */
		initReuseProperties: function() {
			this.$$value = null;
			this.$$elmt = null;
		},
		destroy: function() {
			var self = this;
			self.control = null;
			if (self.$itemProto) {
				// We destroy the proto
				self.$itemProto.destroy();
				self.$itemProto = null;
			}
			if (self._gestureMgr) {
				self._gestureMgr.destroy();
				self._gestureMgr = null;
			}
			/* No destroy - destroyed in control*/
			self.$$elmt = null;
			self.$$value = null;
		},
		refresh: function(arrayData, buildOptions) {
			this.buildHtml(arrayData, buildOptions);
			if (this._gestureMgr) {
				this._gestureMgr.reset();
				this._initGestureMgr();
			}
		},
		/**
		 * $$value parent that contains the table - same strcture for all controls
		 * 	arrayData is an object that contains all data needed by array
		 * 	arrayData.$resources contains rows data - Array of dao
		 */
		buildHtml: function(arrayData, buildOptions, classes) {
			var self = this;
			if (!self.$article || !self.$article.$items) {
				// a$article is expected - see articlePArse which set the default article
				self.insertError("<b>No $article found for array " + self.control.$bind + "<b>");
			}
			self.$$value = self.control.$$value;
			self.$$elmt = self.control.$$elmt;
		},
		/**
		 * Init gesture manager on afterShow because we need to calculate the viewRect
		 */
		afterShow: function() {
			if (this._gestureMgr) {
				this._initGestureMgr();
			}
		},
		_initGestureMgr: function() {
			if (!this._gestureMgr) return;
			var reset = true;
			if (this.control.getArrayData().$resources.length > 0) {
				// Page rect
				var viewRect = uiRect.elmtRect(this.control.controller.$$elmt, "computed");
				// tbody rect
				var bodyRect = uiRect.elmtRect(this._gestureMgr.$$elmt, "computed");
				//intersectRect has fixed coordinate to check if the 'finger' is inside on mousemouve event
				var intersectRect = viewRect.intersectRect(bodyRect, false);
				if (intersectRect != null) {
					// Enable scroll
					this._gestureMgr.init(intersectRect);
					reset = false;
				}
			}
			if (reset) {
				// we reset only if no init call
				// reset clears the restored context so we lost it
				this._gestureMgr.reset();
			}
		},
		/**
		 * Display an error
		 */
		insertError: function(html) {
			var err = ['<div class="s-m-error">'];
			err.push(html);
			err.push("</div>");
			$(err.join('')).appendTo(this.$$elmt);
		},
		buildPagingLinks: function(arrayData, buildOptions) {
			var self = this;
			buildOptions = buildOptions || {};
			if (buildOptions.refresh == true) {
				// TODO just refresh
				if (self._$$links) self._$$links.remove();
			}
			// Temporarily disabled - during mobile gesture implementation
			var addLink = function(parent, linkName, attrs) {
				$(uiUtils.createDomElement('a', ["s-m-link", fontUtils.paginationIcon(linkName), linkName.substr(1)],
					null, attrs)).appendTo(parent);
			};
			if (arrayData.$links) {
				var ctxLinks = {
					links: []
				}, ctx;
				_paginLinks.forEach(function(linkName) {
					ctx = {
						css: fontUtils.paginationIcon(linkName)
					};
					if (arrayData.$links[linkName]) {
						ctx.type = linkName;
						ctx.url = arrayData.$links[linkName].$url;
						ctx.id = self.control.id;
						ctx.target = self.control.controller.isVignette ? "vignette" : "application";
					} else {
						ctx.css += " disabled";
					}
					ctxLinks.links.push(ctx);
				});
				self._$$links = $(_getHtml("pagin", ctxLinks));
				self.$$value.before(self._$$links);
			}
		},
		/**
		 * Can be overridden - lookup
		 */
		buildDetailLink: function(rowData, options) {
			if (options == null) throw new Error("Null options");
			var self = this;
			var attrs = options.attrs || {};
			if (self.control.prototype.isLookup()) {
				attrs["href"] = "#";
				attrs["data-action"] = "selectLookup";
				attrs["data-params"] = rowData.getValue("$uuid");
				return uiUtils.createDomElement(options.tag, options.css, options.title, attrs, options.parent);
			} else {
				var links = self.$itemProto.data("$links");
				// If there is a DASHBOARD link it replaces $details
				var hasLink = ((links && links.DASHBOARD) || (links && links.$details)) != null;
				if (hasLink) {
					// Trigger an action in array control for additional processes before open link
					attrs["data-action"] = "select";
					attrs["data-params"] = encodeURIComponent(rowData.getValue("$uuid"));
				}
				if (hasLink || options.createIfNoLink) {
					var css = null;
					if (options.css) css = [options.css];
					return uiUtils.createDomElement(options.tag, css, options.title, attrs, options.parent);
				}
			}
			return null;
		},
		/**
		 * True if field is excluded
		 */
		isExcluded: function(proto) {
			return proto == null || proto.$isExcluded === true || _isExcluded.indexOf(proto.$type) >= 0;
		},
		/**
		 * Returns control id eventually concatenated with arguments
		 * 	Allows to get unic ids for control childs if needed
		 */
		getId: function() {
			var self = this;
			if (arguments.length > 0) {
				return self.control.id + " - " + Array.prototype.join.call(arguments, '-');
			} else {
				return self.control.id;
			}
		},
		/**
		 * lastSelectedRow is restored when after a back action - See page.savedCtxRestore
		 */
		selectLastSelectedRow: function(rowId, show, selector) {
			var self = this;
			selector = 'tbody [data-params="' + rowId + '"]';
			var $$elmt = self.$$elmt.find(selector);
			if ($$elmt.attr("data-action") === exports.ACTROWDETAIL) {
				//In that case we have to select the row
				$$elmt = $$elmt.closest("tr");
			} // Else $$elmt points to the cell/row to highligth 

			$$elmt[show ? "addClass" : "removeClass"]("s-m-last-selected");
		},
		callGenerateHtml: function(root, $$parent, controllerDao, destroyAfter, buildOptions) {
			var htmlRootCtrl = buildOptions && buildOptions.htmlRootCtrl ? buildOptions.htmlRootCtrl : this.control;
			root.generateHtml($$parent, controllerDao, destroyAfter, htmlRootCtrl);
		},
		_addEmptyCells: function($$row, nb, buildOptions) {
			var self = this;
			if (nb < 1) return;
			// dispEmpty: withtitle, filled, empty
			var dispEmpty = self.$articleArray.$emptycell;
			if (dispEmpty === "withtitle" || dispEmpty === "filled") {
				var td = '<td class="s-m-empty s-m-' + dispEmpty + ' nohover">';
				for (var i = 0; i < nb; i++) {
					this.callGenerateHtml(this._layoutRoot, $(td).appendTo($$row), null, false, buildOptions);
				}
			}
			return $$row.children("td");
		},
		/**
		 * Return the context to save.
		 * It will be be restored afer page has been loaded
		 * The context is saved and restored by the page
		 * Stores the scroll index
		 */
		savedCtxCreate: function() {
			if (this._gestureMgr) {
				return this._gestureMgr.savedCtxCreate();
			}
		},
		savedCtxRestore: function(ctx) {
			if (this._gestureMgr) {
				// Restore context and refresh
				this._gestureMgr.savedCtxRestore(ctx, true);
			}
		},
		newScroller: function(type, $$elmt) {
			// Set gesture manager - disabled - Enabled afterShow
			if (this._gestureMgr) this._gestureMgr.destroy();
			this._gestureMgr = new HammerScroller($$elmt, type);
		}
	});

exports.Klass = _Klass;
exports.ACTROWDETAIL = "rowDetail";