"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');

/**
 * Array builder base class
 */
var _Klass = utils.defineClass(
	function(control) {
		var self = this;
		if (control == null) throw new Error("Null control");
		self.control = control;
		self.itemProto = control.prototype.getPrototype("$item");
	}, null, {

		destroy: function() {
			var self = this;
			self.control = null;
			self.itemProto = null;
		},

		/**
		 * $parent parent DOM element
		 * 		arrayData is an object that contains all data needed by array
		 * 		arrayData.$resources contains rows data - Array of dao
		 */
		buildHtml: function($parent, arrayData, buildOptions) {
			throw new Error("Not implemented");
		},

		/**
		 * Build the div that warp the control
		 * 	Contains class s-m-control and control id
		 * 	set this.$container
		 */
		createContainer: function(css) {
			var self = this;
			var css = ["s-m-control"].concat(css || []);
			self.$container = uiUtils.createDomElement('div', css, null, {
				"id": self.getId()
			});
			return self.$container;

		},

		/**
		 * return the dao of the controller - page
		 */
		getContollerDao: function() {
			return this.control.controller.dao;
		},

		/**
		 * Returns array rows data (Array)
		 */
		getArrayData: function() {
			return this.control.getArrayData();
		},

		/**
		 * Returns control id eventually concatenated with arguments
		 * 	Allows to get unic ids for control childs if needed
		 */
		getId: function() {
			var self = this;
			if (arguments.length > 0) {
				return self.control.id + " - " + Array.prototype.join.call(arguments, '-');
			} else {
				return self.control.id;
			}
		},

		/**
		 * Create a field control to get the html
		 * 	TODO Destroy the ctrl after getting html - no needs to store it
		 */
		appendCtrlField: function($parent, fieldName, data) {
			var self = this;
			var fieldProto = self.itemProto.getPrototype(fieldName);
			if (!fieldProto) return null;
			var ctrl = ctrlFactory.createControl(self.control.controller, null, {
				"$bind": fieldName
			}, fieldProto);
			ctrl.buildHtml($parent, data, {
				isGridCell: true
			});
		}
	});

exports.Klass = _Klass;