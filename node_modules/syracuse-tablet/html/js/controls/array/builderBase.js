"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');

var _paginBtns = {
	"$first": {
		icon: "glyphicon glyphicon-step-backward"
	},
	"$previous": {
		icon: "glyphicon glyphicon-circle-arrow-left"
	},
	"$next": {
		icon: "glyphicon glyphicon-circle-arrow-right"
	},
	"$last": {
		icon: "glyphicon glyphicon-step-forward"
	},
	"$more": {
		icon: "glyphicon glyphicon-refresh"
	}
};
/**
 * Array builder base class
 */
var _Klass = utils.defineClass(
	function(control) {
		var self = this;
		if (control == null) throw new Error("Null control");
		self.control = control;
		self.itemProto = control.prototype.getPrototype("$item");
	}, null, {

		destroy: function() {
			var self = this;
			self.control = null;
			self.itemProto = null;
			/* No destroy - destroyed in control*/
			self.$$elmt = null;
		},

		/**
		 * $$$parent parent JQuery element
		 * 		arrayData is an object that contains all data needed by array
		 * 		arrayData.$resources contains rows data - Array of dao
		 */
		buildHtml: function($$parent, arrayData, buildOptions) {
			var self = this;
			self.$$elmt = self.control.createRootElement(["s-m-control"], $$parent);
			return self.$$elmt;
		},

		buildPagingLinks: function(arrayData, options) {
			var self = this;
			var addLink = function(parent, linkName, attrs) {
				$(uiUtils.createDomElement('a', ["s-m-grid-horizontal-link " + _paginBtns[linkName].icon],
					null, attrs)).appendTo(parent);
			};
			options = options || {};
			var linksBottom = options.bottom ? $(uiUtils.createDomElement('div', ["s-m-grid-horizontal-links"])).appendTo(self.$$elmt) : null;
			var linksTop = options.top ? $(uiUtils.createDomElement('div', ["s-m-grid-horizontal-links"])).prependTo(self.$$elmt) : null;
			if (arrayData.$links) {
				for (var linkName in _paginBtns) {
					var link = arrayData.$links[linkName];
					if (link) {
						var linkInfo = sdataUtils.getLinkInfo(link.$url);
						var attrs = {
							"data-nav": linkInfo.page,
							"data-sdata-url": link.$url
						};
						if (self.control.controller.isVignette()) {
							// Add vignette info to reload the page in vignette
							attrs["data-nav-target"] = "vignette";
						}
						if (linksBottom) addLink(linksBottom, linkName, attrs);
						if (linksTop) addLink(linksTop, linkName, attrs);
					}
				}
			}
		},

		buildDetailLink: function(cellData, options) {
			if (options == null) throw new Error("Null options");
			var self = this;
			var attrs = options.attrs || {};
			var links = self.itemProto.data("$links"),
				link;
			if (links && links.$details) {
				link = sdataUtils.getLinkInfo(links.$details.$url, cellData);
				attrs["href"] = "#";
				attrs["data-nav"] = link.page;
				attrs["data-sdata-url"] = link.sDataUrl;
			} else {
				link = null;
			}
			if (link != null || options.createIfNoLink) {
				return uiUtils.createDomElement(options.tag, options.css, options.title, attrs, options.parent);
			}
			return null;
		},

		getPrototype: function() {
			return this.control.prototype;
		},

		getArticle: function() {
			return this.control.article;
		},

		/**
		 * Returns array rows data (Array)
		 */
		getArrayData: function() {
			return this.control.getArrayData();
		},

		/**
		 * Returns control id eventually concatenated with arguments
		 * 	Allows to get unic ids for control childs if needed
		 */
		getId: function() {
			var self = this;
			if (arguments.length > 0) {
				return self.control.id + " - " + Array.prototype.join.call(arguments, '-');
			} else {
				return self.control.id;
			}
		},

		/**
		 * Create a field control to get the html
		 * 	TODO Destroy the ctrl after getting html - no needs to store it
		 */
		appendField2Cell: function($$parent, fieldName, fieldProto, data) {
			var self = this;
			if (!fieldProto) fieldProto = self.itemProto.getPrototype(fieldName);
			if (!fieldProto) return null;
			ctrlFactory.appendField2Cell($$parent, self.control.controller, {
				"$bind": fieldName
			}, fieldProto, data);
		}
	});

exports.Klass = _Klass;