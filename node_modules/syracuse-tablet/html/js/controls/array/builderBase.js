"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');

var _isExcluded = ["application/x-password"];
var _paginLinks = ["$first", "$previous", "$next", "$last", "$more"];
/**
 * Array builder base class
 * Authoring global properties
 * 		$isTitleHidden		Hide the column title
 * 		$rowIdx				Show/Hide row index
 */
var _Klass = utils.defineClass(
	function(control, options) {
		var self = this;
		self.options = options || {};
		if (control == null) throw new Error("Null control");
		self.control = control;
		self.$article = control.article.$article;
		self.$itemProto = control.prototype.getPrototype("$item");
		self.displayRowIdx = self.$article.$rowIdx === true;
	}, null, {
		/**
		 * Init the properties to allow reuse of this control
		 */
		initReuseProperties: function() {
			this.$$value = null;
			this.$$elmt = null;
		},
		destroy: function() {
			var self = this;
			self.control = null;
			self.$itemProto = null;
			/* No destroy - destroyed in control*/
			self.$$elmt = null;
			self.$$value = null;
		},

		/**
		 * $$value parent that contains the table - same strcture for all controls
		 * 	arrayData is an object that contains all data needed by array
		 * 	arrayData.$resources contains rows data - Array of dao
		 */
		buildHtml: function(arrayData, buildOptions, classes) {
			var self = this;
			if (!self.$article || !self.$article.$items) {
				// a$article is expected - see articlePArse which set the default article
				self.insertError("<b>No $article found for array " + self.control.$bind + "<b>");
			}
			self.$$value = self.control.$$value;
			self.$$elmt = self.control.$$elmt;
		},
		/**
		 * Display an error
		 */
		insertError: function(html) {
			var err = ['<div class="s-m-error">'];
			err.push(html);
			err.push("</div>");
			$(err.join('')).appendTo(this.$$elmt);
		},
		buildPagingLinks: function(arrayData, options) {
			var self = this;
			var addLink = function(parent, linkName, attrs) {
				$(uiUtils.createDomElement('a', ["s-m-link", fontUtils.paginationIcon(linkName)],
					null, attrs)).appendTo(parent);
			};
			options = options || {};
			var linksBottom = options.bottom ? $(uiUtils.createDomElement('div', ["s-m-array-links"])).appendTo(self.$$value) : null;
			var linksTop = options.top ? $(uiUtils.createDomElement('div', ["s-m-array-links"])).prependTo(self.$$value) : null;
			if (arrayData.$links) {
				_paginLinks.forEach(function(linkName) {
					var link = arrayData.$links[linkName];
					if (link) {
						var linkInfo = sdataUtils.getLinkInfo(link.$url);
						var attrs = {
							// page refresh
							"data-nav-refresh": true,
							// data-nav-type is used to specify the type of link
							"data-nav-type": linkName,
							// Data url
							"data-sdata-url": link.$url,
							// refresh control only
							"data-control-id": self.control.id,
						};
						if (self.control.controller.isVignette) {
							// Add vignette info to reload the page in vignette
							attrs["data-nav-target"] = self.control.controller.openLinkInVignette() ? "vignette" : "application";
						}
						if (linksBottom) addLink(linksBottom, linkName, attrs);
						if (linksTop) addLink(linksTop, linkName, attrs);
					}
				});
			}
		},
		/**
		 * Can be overridden - lookup
		 */
		buildDetailLink: function(rowData, options) {
			if (options == null) throw new Error("Null options");
			var self = this;
			var attrs = options.attrs || {};
			if (self.control.prototype.isLookup()) {
				attrs["href"] = "#";
				attrs["data-action"] = "select";
				attrs["data-params"] = rowData.getValue("$uuid");
				return uiUtils.createDomElement(options.tag, options.css, options.title, attrs, options.parent);
			} else {
				var links = self.$itemProto.data("$links");
				// If there is a DASHBOARD link it replaces $details
				var hasLink = ((links && links.DASHBOARD) || (links && links.$details)) != null;
				if (hasLink) {
					// Trigger an action in array control for additional processes before open link
					attrs["data-action"] = "select";
					attrs["data-params"] = encodeURIComponent(rowData.getValue("$uuid"));
				}
				if (hasLink || options.createIfNoLink) {
					var css = null;
					if (options.css) css = [options.css];
					return uiUtils.createDomElement(options.tag, css, options.title, attrs, options.parent);
				}
			}
			return null;
		},
		/**
		 * True if field is excluded
		 */
		isExcluded: function(proto) {
			return proto == null || proto.$isExcluded === true || _isExcluded.indexOf(proto.$type) >= 0;
		},
		/**
		 * Returns control id eventually concatenated with arguments
		 * 	Allows to get unic ids for control childs if needed
		 */
		getId: function() {
			var self = this;
			if (arguments.length > 0) {
				return self.control.id + " - " + Array.prototype.join.call(arguments, '-');
			} else {
				return self.control.id;
			}
		}
	});

exports.Klass = _Klass;