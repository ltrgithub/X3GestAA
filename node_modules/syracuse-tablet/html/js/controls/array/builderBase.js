"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');

/**
 * Array builder base class
 */
var _Klass = utils.defineClass(
	function(control) {
		var self = this;
		if (control == null) throw new Error("Null control");
		self.control = control;
		self.itemProto = control.prototype.getPrototype("$item");
	}, null, {

		destroy: function() {
			var self = this;
			self.control = null;
			self.itemProto = null;
			/* No destroy - destroyed in control*/
			self.$$elmt = null;
		},

		/**
		 * $$$parent parent JQuery element
		 * 		arrayData is an object that contains all data needed by array
		 * 		arrayData.$resources contains rows data - Array of dao
		 */
		buildHtml: function($$parent, arrayData, buildOptions) {
			var self = this;
			self.$$elmt = self.control.createRootElement(["s-m-control"], $$parent);
			return self.$$elmt;
		},

		getPrototype: function() {
			return this.control.prototype;
		},

		getArticle: function() {
			return this.control.article;
		},

		/**
		 * Returns array rows data (Array)
		 */
		getArrayData: function() {
			return this.control.getArrayData();
		},

		/**
		 * Returns control id eventually concatenated with arguments
		 * 	Allows to get unic ids for control childs if needed
		 */
		getId: function() {
			var self = this;
			if (arguments.length > 0) {
				return self.control.id + " - " + Array.prototype.join.call(arguments, '-');
			} else {
				return self.control.id;
			}
		},

		/**
		 * Create a field control to get the html
		 * 	TODO Destroy the ctrl after getting html - no needs to store it
		 */
		appendField2Cell: function($$parent, fieldName, data) {
			var self = this;
			var fieldProto = self.itemProto.getPrototype(fieldName);
			if (!fieldProto) return null;
			ctrlFactory.appendField2Cell($$parent, self.control.controller, {
				"$bind": fieldName
			}, fieldProto, data);
		}
	});

exports.Klass = _Klass;