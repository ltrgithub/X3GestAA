"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiRect = require('syracuse-tablet/html/js/ui/rect');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/array/builderBase').Klass;
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');
var uiRect = require('syracuse-tablet/html/js/ui/rect');
var articleGen = require('syracuse-tablet/html/js/authoring/authoringArticleGen');
var HammerScroller = require('syracuse-tablet/html/js/helpers/hammerScroller').Klass;
var fieldOperators = require('syracuse-tablet/html/js/helpers/fieldOperators');


/**
 * Vertical card builder
 * Authoring
 * 		$numberOfRows 			number of card s per row
 * 		$displayEmptyCells 		Display or not empty cells true by default
 */
var _Klass = utils.defineClass(
	function(control, disp, options) {
		Base.call(this, control, disp, options);
		this._layoutRoot = null;
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this._layoutRoot) {
				this._layoutRoot.destroy();
				this._layoutRoot = null;
			}
			if (this._oneCardGestureMgr) {
				this._oneCardGestureMgr.destroy();
				this._oneCardGestureMgr = null;
			}
			this._$$body = null;
			this._$$cellTmpl = null;
			this._tds = null;
		},
		/**
		 * Just build $$td cells
		 * Build of array will be done on resize because we need to have the height of the parent control.$$value to calculate the number of roww
		 */
		buildHtml: function(arrayData, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, arrayData, buildOptions);
			if (self._layoutRoot == null) {
				if (!self.$article) return;
				var cardArticle = self.$articleArray.$card;
				if (!cardArticle) {
					cardArticle = articleGen.genNewArticle({
						page: {
							prototype: self.control.prototype
						}
					}, true);
				};
				var options = {
					displayCtx: "card"
				};
				self._layoutRoot = articleParser.article2Controls(self.control.controller, cardArticle, self.$itemProto, options);
			}
			// Like we rebuild a new _$$body we have to destroy the scroller
			self.destroyScroller();
			self._$$body = $('<tbody>').appendTo($('<table/>').appendTo(self.control.$$value));
			var $$td;
			self._$$cellTmpl = $('<section class="s-m-card s-m-std"/>');
			var $$cell;
			self._tds = [];
			arrayData.$resources.forEach(function(rowData, idx) {
				$$td = $(self.buildRecordMainElmt(rowData, {
					tag: "td",
					parent: null,
					createIfNoLink: true
				}, idx));
				$$cell = self._$$cellTmpl.clone().appendTo($$td);
				self.checkStatusManagement($$cell, rowData);
				$('<span class="badge index">' + (idx + 1) + '</span>').appendTo($$cell);
				self.callGenerateHtml(self._layoutRoot, $$cell, rowData, false, buildOptions, idx);
				self._tds.push({
					"$$td": $$td,
					"$$card": $$cell
				});
			});
			if (buildOptions && buildOptions.refresh === true) {
				self._build(buildOptions);
			} // Otherwise build is done on resize
		},
		checkStatusManagement: function($$cell, rowData) {
			var statusList = this.getRowStatusInfo();
			if (!statusList) return;
			statusList.some(function(s) {
				if (s.color && fieldOperators.evaluateOperator(s.$type, rowData.getValue(s.field), s.operator, s.value)) {
					/**
					 * We need to set color and bg-color because using css property doesn't work due to css inheritance
					 * Using css forces to declare all css selectors (td:not(.s-m-multi-selected)...) for each color of the palette
					 */
					$$cell.css({
						"color": s.color.color,
						"background-color": s.color.bgColor
					});
					return true;
				}
			});
		},
		onResize: function(context) {
			// Used by multi-selection - we just want to refresh the scroll
			var scrollOnly = context != null && context.scrollOnly === true;
			if (scrollOnly !== true && this._layoutRoot && this._tds.length > 0) {
				/**
				 * We rebuild in any cases in order to have a good display
				 * To be able to calculate  parentH in nested pages we use table display for s-m-control and table-row for children
				 * --> In that case control.$$value has the right height
				 * For non nested paged table display doens't allow to calculate the height of the array without removing the old one...
				 * Other option was to check if $$value height changed to rebuild array
				 */
				this._build(null, context);
			} else {
				Base.prototype.onResize.call(this, context);
			}
		},
		/**
		 * !! check the multi-selection if we modify  _build
		 */
		_build: function(buildOptions, resizeContext) {
			buildOptions = buildOptions || {};
			if (!this.control._displayArray()) {
				if (this.control.isEmpty) {
					this.buildEmptyArray();
				}
				return;
			}
			/**
			 * setTimeout to better calculate the height of $$value
			 */
			var dirArray = globals.getScrollingDirection() || "v";
			var initScroll = buildOptions.refresh === true || resizeContext;
			dirArray = this.control.isArrayField() ? "h" : dirArray === "h" ? "v" : "h";
			if (!this.hasScroller() || this._dirArray == null || this._dirArray != dirArray) {
				this.newScroller(dirArray, this._$$body.parent());
				this._dirArray = dirArray;
				initScroll = true;
			}
			buildOptions.cardAuthoring = {
				$emptycell: this.$articleArray.$emptycell || "nodisplay",
				$minWidth: this.authMinSize2Pixels(parseInt(this.$articleArray.$minWidth, 10) || 0),
				$cardsPerRow: parseInt(this.$articleArray.$cardsPerRow, 10) || 2
			};

			var self = this;
			setTimeout(function() {
				if (!self._$$body) {
					// Sometimes the body can be empty - Ex when we exit multi-selection mode
					return;
				}
				self.control.$$value.height("100%");
				var parentH = self.control.$$value.height();
				var parentW = self.control.$$value.width();
				// Border spacing used for calculation
				var bs = self._$$body.parent().css("border-spacing");
				if (bs) {
					bs = bs.split("px");
					bs = bs && bs.length > 0 ? parseInt(bs[0], 10) : 0;
				}
				//parentH = parentH - bs;
				//parentW = parentW - bs;
				var $$hiddenRow;
				var visibleTds = [];
				// We keep the $$td's to not recreate them and arrange according the new configuration
				// We first detach them and select the visible ones (used by multiselection)
				// We put non-visible ones in $$hiddenRow to let them available in the dom (used by multiselection)
				self._tds.forEach(function(o, idx) {
					o.$$td.detach();
					if (o.$$td.css('display') != "none") {
						visibleTds.push(o);
					} else {
						if (!$$hiddenRow) {
							$$hiddenRow = $("<tr>").hide();
						}
						o.$$td.appendTo($$hiddenRow);
					}
				});
				// !! Call $$body after having detached $$td because empty() removes the data attached to the node ($.smData) used by multi-selection (diagnoses)
				self._$$body.empty();
				if ($$hiddenRow) {
					$$hiddenRow.appendTo(self._$$body);
				}
				if (visibleTds.length === 0) return;
				self["buildCard" + dirArray.toUpperCase()](visibleTds, bs, parentH, parentW, buildOptions);
				var top = Math.max(0, (parentH - self._$$body.parent().outerHeight()) / 2);
				self._$$body.parent().css({
					top: top + "px"
				});
				if (initScroll) {
					// refreshes the gestureMgr
					self.refreshHeaderAndGesture(resizeContext != null && resizeContext.scrollOnly, resizeContext != null && resizeContext.preserveScroll);
				}
			});
		},
		buildCardV: function(visibleTds, bs, parentH, parentW, buildOptions) {
			this._$$body.parent().width("100%");
			var $$row, realW, nbCardPerRow;
			var minWidth = buildOptions.cardAuthoring.$minWidth;
			var remaining = 0;
			var self = this;
			visibleTds.some(function(o, idx) {
				if (idx === 0 || nbCardPerRow == 1 || (nbCardPerRow > 1 && idx % nbCardPerRow === 0)) {
					$$row = $("<tr>").appendTo(self._$$body);
					remaining = nbCardPerRow;
				}
				remaining--;
				o.$$td.appendTo($$row);
				if (idx === 0) {
					var padding = o.$$card.outerWidth() - o.$$card.width();
					nbCardPerRow = buildOptions.cardAuthoring.$cardsPerRow;
					while (nbCardPerRow > 1) {
						realW = Math.round((parentW - ((nbCardPerRow + 1) * bs)) / nbCardPerRow) - padding;
						if (realW >= minWidth) break;
						nbCardPerRow--;
					}
					if (nbCardPerRow > 1) {
						realW = Math.min(Math.max(minWidth, realW));
					}
				}
				if (nbCardPerRow > 1) {
					o.$$card.width(realW);
				} else {
					o.$$card.css({
						width: "100%"
					});
				}
			});
			if (remaining && buildOptions.cardAuthoring.$emptyCell !== "nodisplay") {
				this.addEmptyCells(this._layoutRoot, $$row, remaining, buildOptions, this._$$cellTmpl);
			}
		},
		buildCardH: function(visibleTds, bs, parentH, parentW, buildOptions) {
			this.control.$$value.height("100%");
			var $$row, realH, realW;
			var nbCardPerRow, numberOfRows;
			var nbVisiblecardsPerRow = buildOptions.cardAuthoring.$cardsPerRow;
			var minWidth = buildOptions.cardAuthoring.$minWidth;
			parentH = parentH - bs;
			var remaining = 0;
			var self = this;
			visibleTds.some(function(o, idx) {
				if (idx == 0 || nbCardPerRow == 1 || (nbCardPerRow > 1 && idx % nbCardPerRow === 0)) {
					$$row = $("<tr>").appendTo(self._$$body);
					remaining = nbCardPerRow;
				}
				o.$$td.appendTo($$row);
				if (idx === 0) {
					if (false && self.control.isArrayField()) {
						numberOfRows = 1;
						nbCardPerRow = visibleTds.length;
						var padding = o.$$card.outerWidth() - o.$$card.width();
						realW = parentW - padding;
					} else {
						// Calculate the number of rows after having create the first cell
						realH = o.$$td.height() + bs;
						parentW = parentW - ((nbVisiblecardsPerRow + 1) * bs);
						var padding = o.$$card.outerWidth() - o.$$card.width();
						realW = Math.round(parentW / nbVisiblecardsPerRow) - padding;
						if (self.control.isArrayField() || (visibleTds.length * realW < parentW)) {
							// Force to display all the cells on one line because there's enough room
							numberOfRows = 1;
							nbCardPerRow = visibleTds.length;
						} else {
							// Calculate the number of rows to fit the parent height
							numberOfRows = Math.max(1, Math.floor(parentH / realH));
							nbCardPerRow = Math.ceil(visibleTds.length / numberOfRows);
							if (visibleTds.length <= numberOfRows * nbVisiblecardsPerRow) {
								// Dispatch the cards by filling the lines from the top to bottom
								nbCardPerRow = nbVisiblecardsPerRow;
							}
						}
						remaining = nbCardPerRow;
					}
				}
				o.$$card.width(Math.min(parentW, Math.max(minWidth, realW)));
				remaining--;
			});
			if (remaining && buildOptions.cardAuthoring.$emptyCell !== "nodisplay") {
				this.addEmptyCells(this._layoutRoot, $$row, remaining, buildOptions, this._$$cellTmpl);
			}
			if (self.control.isArrayField()) {
				if (this._oneCardGestureMgr) {
					this._oneCardGestureMgr.destroy();
					this._oneCardGestureMgr = null;
				}
				this._oneCardGestureMgr = new HammerScroller($(self._$$body.parent()), {
					direction: "h",
					valMax: 0,
					name: this.control.$bind,
					isPageScroller: false
				});
				this._oneCardGestureMgr.init(uiRect.elmtRect(this.control.$$value));
			}
		},
		authMinSize2Pixels: function(val) {
			var max = 700,
				min = 100;
			if (val == null) return 100;
			if (val > 20) return max;
			if (val < 1) return min;
			return min + (val * (max - min) / 20);
		},
		getColumnsInfo: function(onlyVisible) {
			var cols = null;
			if (!this.control.prototype.isSingleArray() && onlyVisible === true && this._layoutRoot) {
				cols = [];
				var _scan = function(node) {
					if (!node || !node.children) return;
					node.children.forEach(function(c) {
						if (c.isControl() && c.$bind) {
							cols.push(c.$bind);
						} else {
							_scan(c);
						}
					});
				};
				_scan(this._layoutRoot);
			}
			var protoCols = this.control.prototype.arrayTableGetColInfo();
			if (cols == null) {
				return protoCols;
			}
			var res = [];
			protoCols.forEach(function(c) {
				if (cols.indexOf(c.$bind)) {
					res.push(c);
				}
			});
			return res;
		}
	});

exports.Klass = _Klass;