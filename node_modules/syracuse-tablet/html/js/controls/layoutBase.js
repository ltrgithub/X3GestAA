"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/structElmt').Klass;

var _Klass = utils.defineClass(
	function(controller, type, article) {
		var self = this;
		Base.call(self, controller, type, article);
		self.title = article.$title;
	}, Base, {
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
		},
		createId: function(typeName) {
			var self = this;
			return utils.readableuid(typeName, self.article.$layoutType);
		},
		/**
		 * called by the parser before appending children
		 */
		beforeAddItems: function() {

		},
		/**
		 * called by the parser after all children have been appended
		 */
		afterAddItems: function() {

		},
		/**
		 * Build Html recursively
		 */
		buildHtml: function(html, controllerDao, buildOptions) {
			var self = this;
			self.buildHtmlBefore(html, controllerDao, buildOptions);
			if (self.children) {
				self.children.forEach(function(child, idx) {
					self.buildHtmlBeforeChild(html, controllerDao, buildOptions, child, idx);
					child.buildHtml(html, controllerDao);
					self.buildHtmlAfterChild(html, controllerDao, buildOptions, child, idx);
				});
			}
			self.buildHtmlAfter(html, controllerDao, buildOptions);
		},
		/**
		 * Control can override this methods
		 */
		buildHtmlBeforeChild: function(html, controllerDao, buildOptions, child, idx) {
			throw new Error("Must be overridden");
		},
		/**
		 * Control can override this methods
		 */
		buildHtmlAfterChild: function(html, controllerDao, buildOptions, child, idx) {
			throw new Error("Must be overridden");
		},
		/**
		 * Control can override this methods
		 */
		buildHtmlBefore: function(html, controllerDao, buildOptions) {
			throw new Error("Must be overridden");
		},
		/**
		 * Control can override this methods
		 */
		buildHtmlAfter: function(html, controllerDao, buildOptions) {
			throw new Error("Must be overridden");
		}
	});

exports.Klass = _Klass;