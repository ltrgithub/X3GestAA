"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/structElmt').Klass;


var _Klass = utils.defineClass(function(controller, type, article) {
	var self = this;
	Base.call(self, controller, type, article);
	self.title = article.$title;
}, Base, {
	destroy: function() {
		var self = this;
		Base.prototype.destroy.call(self);
	},
	createId: function(typeName) {
		var self = this;
		return utils.readableuid(typeName, self.article.$layoutType);
	},
	/**
	 * called by the parser before appending children
	 */
	beforeAddItems: function() {

	},
	/**
	 * called by the parser after all children have been appended
	 */
	afterAddItems: function() {

	},
	/**
	 * Build Html recursively
	 */

	buildHtml: function(controllerDao, buildOptions) {


		// layout container
		var container = Base.uiutils.createDomElement('div', ["container", "s-m-layout", "s-m-" + this.article.$layoutType], null, {
			"id": this.id
		});


		// #### build layout header, if title ####
		if (this.article.$title) {
			var header = Base.uiutils.createDomElement('header', ["s-m-layout-header"]);

			// in case of tabs
			this.isTabLayout = this.article.$layoutType === "tabs";
			if (this.isTabLayout) {
				var tabSlot = Base.uiutils.createDomElement("div", ["s-m-tabs-slot"]);
				var tabsContainer = Base.uiutils.createDomElement("ul", ["nav,nav-tabs"], null, {
					"role": "tablist"
				});

				// append tabs
				$.each(this.children, function(index, value) {
					var tabClass = index == 0 ? ["active"] : null;
					var tab = Base.uiutils.createDomElement("li", tabClass);
					var tabLink = Base.uiutils.createDomElement("a", ["s-m-tab"], value.article.$title, {
						"href": "#"
					});
					tab.appendChild(tabLink);
					tabsContainer.appendChild(tab);
				});
				tabSlot.appendChild(tabsContainer);
			}


			// regular header
			else {
				header.textContent = !this.isTabSection ? this.article.$title : "";
			}

			// append header to container
			container.appendChild(header);
		}


		// #### handling 'row' layoutType ####
		this.isRowLayout = this.article.$layoutType == "row";

		// TODO To improve. If no value specified, set to 12
		// by default ??
		if (this.isRowLayout) {
			if (!this.article.$widthMd && !this.article.$widthSm && !this.article.$widthXs && !this.article.$widthLd) {
				throw new Error("Columns widths not specified");
			}


			// only desktop ($widthMd) is handled for test purpose
			var $widthMd = this.article.$widthMd.split(",");
		}



		// #### build layout core ####
		var coreSlot = Base.uiutils.createDomElement("div", [this.article.$layoutType], null, {
			"style": this.getCustomDisplayOptions().customStyle
		});


		$.each(this.children, function(index, value) {

			// set isTabsection property value to true for children item
			if (this.isTabLayout) {

				value.isTabSection = true;
			}


			var coreItemClassList = ["s-m-layout-cell"];
			if ($widthMd) {
				coreItemClassList.push("col-md-" + $widthMd[index]);
			}

			// layout is hidden if it is a tab layout and not the first tab layout.
			var coreItem = Base.uiutils.createDomElement("div", coreItemClassList, null, {
				"style": "display:" + (this.isTabLayout && index != 0 ? "none" : "")
			});

			coreItem.appendChild(this.buildHtml(controllerDao, buildOptions));
			coreSlot.appendChild(coreItem);
		});


		// append coreSlot to container
		container.appendChild(coreSlot);

		return container;
	},
	/**
	 
	 * Get custom displays options based on this.displayOptions data
	 * NOTE : customClasses not handled yet (some duplication effect to correct)
	 */

	getCustomDisplayOptions: function() {
		var options = {
			customClasses: "",
			customStyle: ""
		};
		for (var option in this.displayOptions) {
			var optionValue = this.displayOptions[option];
			switch (option) {
				case "cssDefCell":
				case "cssCell":
				case "cssDefLayout":
				case "cssLayout":
				case "cssDefRow":
				case "cssRow":

					options.customClasses += " " + optionValue.join(' ');
					break;
				case "rowHeight":

					options.customStyle += " " + "height:" + optionValue;
				default:
			}
		}
		return options;
	}
});

exports.Klass = _Klass;