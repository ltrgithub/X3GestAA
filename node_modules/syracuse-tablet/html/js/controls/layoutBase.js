"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/structElmt').Klass;
var Base = require('syracuse-tablet/html/js/controls/structElmt').Klass;

var _Klass = utils.defineClass(

	function(controller, type, article) {
		var self = this;
		Base.call(self, controller, type, article);
		self.title = article.$title;
	}, Base, {
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
		},
		createId: function(typeName) {
			var self = this;
			return utils.readableuid(typeName, self.article.$layoutType);
		},
		/**
		 * called by the parser before appending children
		 */
		beforeAddItems: function() {

		},
		/**
		 * called by the parser after all children have been appended
		 */
		afterAddItems: function() {

		},
		/**
		 * Build Html recursively
		 */
		buildHtml: function(html, controllerDao, buildOptions) {
			// used to set values in the template.
			var context = {};

			context.id = this.id;
			context.level = this.level = this.parent.level ? this.parent.level + 1 : 1;
			context.$layoutType = this.article.$layoutType;
			context.isTabLayout = this.isTabLayout = this.article.$layoutType === "tabs";
			if (this.isTabLayout) {
				context.navListItem = [];

				for (var ii = 0, jj = this.children.length; ii < jj; ii++) {
					context.navListItem.push({
						active: ii == 0 ? true : false,
						$title: this.children[ii].article.$title
					});
				}
			} else {
				context.$title = !this.isTabSection ? this.article.$title : "";
			}

			// set cells/columns widths for row layout type
			if (this.article.$layoutType == "row") {
				this.isRowLayout = true;

				// TODO To improve. If no value specified, set to 12
				// by default ??
				if (!this.article.$widthMd && !this.article.$widthSm && !this.article.$widthXs && !this.article.$widthLd) {
					throw new Error("Columns widths not specified");
				}

				// only desktop ($widthMd) is handled for test
				// purpose
				var $widthMd = this.article.$widthMd.split(",");

			}

			// build childItem context
			context.coreItem = [];
			for (var ii = 0, jj = this.children.length; ii < jj; ii++) {
				// set isTabsection property value to true for
				// children item
				if (this.isTabLayout) {
					this.children[ii].isTabSection = true;
				}

				context.coreItem.push({
					$layoutType: this.article.$layoutType,
					isRowLayout: this.isRowLayout,
					$widthMd: $widthMd && $widthMd[ii],
					display: !(this.isTabLayout && ii != 0),
					coreItemContent: this.children[ii].buildHtml(html, controllerDao, buildOptions)
				});
			}

			return this.templates.execSync("tmplLayout", context).replace(/\n/g, "");
		}
	});

exports.Klass = _Klass;