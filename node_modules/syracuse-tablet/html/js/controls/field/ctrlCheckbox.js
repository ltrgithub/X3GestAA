"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

var _Klass = utils.defineClass(

	function CtrlCheckbox(controller, article, prototype, options) {
		options = options || {};
		options.nativeCapabilities = null;
		Base.call(this, controller, article, prototype, options);
	}, Base, {
		buildFieldValue: function(fieldSlot, buildOptions) {
			var valueSlot = Base.prototype.buildFieldValue.call(this, fieldSlot, buildOptions);
			var val = this.getValue();
			// Nothing displayed if no values otherwise we see only the icon (empty array cards)
			if (val == null && !this.$isEditMode) return;
			val = val === true;
			if (this.$isEditMode) {
				this.createMainInput(valueSlot, val, "checkbox");
			} else if (this.getAuthoring("$displayAs") === "text") {
				this.$$value.text(locale.text(val === true ? "yes" : "no"));
			} else {
				valueSlot.appendChild(uiUtils.createDomElement("span", fontUtils.checkBoxIcon(val)));
			}

			var metaData = this.getMetaData();
			var $$input = this.$$value && this.$$value.find("input");
			if (_isDisabled(metaData)) {
				$$input.attr("disabled", "");
			} else {
				$$input.removeAttr("disabled");
			}
		},
		onClick: function(evt) {
			var self = this;
			setTimeout(function() {
				var checked = !self.$$input.prop("checked");
				self.$$input.prop("checked", checked);
				self.setValue(checked);
			}, 50);
		}
	});

function _isDisabled(metaData) {
	// Apply metaData.$isReadOnly and/or metaData.$isDisabled on select
	// select can only be set as readonly with the 'disabled' attribute
	return metaData && (metaData.$isReadOnly || metaData.$isDisabled);
}
exports.Klass = _Klass;