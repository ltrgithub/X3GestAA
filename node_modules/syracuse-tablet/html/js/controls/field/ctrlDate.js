"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var modal = require('syracuse-tablet/html/js/ui/modal');
var DateSelector = require('syracuse-tablet/html/js/ui/datetimeSelectors/dateSelector').DateSelector;
var TimeSelector = require('syracuse-tablet/html/js/ui/datetimeSelectors/timeSelector').TimeSelector;
var selector = {
	date: DateSelector,
	time: TimeSelector
};

var _Klass = utils.defineClass(

	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
	}, Base, {
		buildFieldValue: function(parentSlot, buildOptions) {
			var self = this;
			var value;

			value = self.getFormattedValue(self.getValue());
			if (self.$isEditMode) {

				var inputGroup = uiUtils.createDomElement("div", ["input-group"], null, null, parentSlot);

				self.domInput = uiUtils.createDomElement("input", ["sm-field-input", "form-control"], null, {
					"type": "text",
					"value": value
				}, inputGroup);
				var span = uiUtils.createDomElement("span", ["input-group-btn"], null, null, inputGroup);
				self.picker = uiUtils.createDomElement("button", ["btn", "btn-default"], null, null, span);

				var iconClasses = self.$type.indexOf("date") != -1 ? ["glyphicon", "glyphicon-calendar"] : ["glyphicon", "glyphicon-time"];
				uiUtils.createDomElement("span", iconClasses, null, null, self.picker);

				$(self.picker).click(function() {
					modal.info(self.getTitle(), "", function(modalEvent, $$modalElmt) {
						// build content on open
						if (modalEvent == 'shown.bs.modal') {
							self.dateSelector = self.getPropertyType().indexOf("date") > -1 ? new selector.date() : new selector.time();
							self.dateSelector.create($$modalElmt.find(".modal-body")[0], self);
						}

						// run actions on close 'hidden.bs.modal'
						else {
							self.dateSelector.destroy();
						}
					});
				});
			} else {
				self.createFieldValueElement(parentSlot, value);
			}
		},
		setDisplayValue: function(value) {
			var self = this;
			if (self.$isEditMode) {
				self.domInput.value = self.getFormattedValue(value);
			} else {
				self.fieldValue.textContent = self.getFormattedValue(value);
			}
		},
		setFieldValue: function(value) {
			var self = this;

			self.setDisplayValue(value);

			self.dao.setValue(self.article.$bind, value);

			// close if coming from modal
			// TODO TO IMPROVE
			var $$modal = $('#modal-info');
			if ($$modal.length > 0) {
				$$modal.modal('hide');
			}
		}
	});

exports.Klass = _Klass;