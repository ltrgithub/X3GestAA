"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var modal = require('syracuse-tablet/html/js/ui/modal');
var selectorFactory = require('syracuse-tablet/html/js/ui/datetimeSelectors/selectorFactory');
var SelectorHandler = require('syracuse-tablet/html/js/ui/datetimeSelectors/selectorSwitchHandler').Klass;

var _Klass = utils.defineClass(

	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
	}, Base, {
		buildFieldValue: function(parentSlot, buildOptions) {
			var self = this;
			var value;

			value = self.getFormattedValue(self.getValue());
			if (self.$isEditMode) {

				var inputGroup = uiUtils.createDomElement("div", ["input-group"], null, null, parentSlot);

				self.domInput = uiUtils.createDomElement("input", ["s-m-field-input", "form-control", "ctrl-evt-blur"], null, {
					"type": "text",
					"value": value
				}, inputGroup);
				var span = uiUtils.createDomElement("span", ["input-group-btn"], null, null, inputGroup);
				self.picker = uiUtils.createDomElement("button", ["btn", "btn-default"], null, null, span);

				var iconClasses = self.$type.indexOf("date") != -1 ? ["glyphicon", "glyphicon-calendar"] : ["glyphicon", "glyphicon-time"];
				uiUtils.createDomElement("span", iconClasses, null, null, self.picker);

				$(self.picker).click(function() {
					// selector handler
					var sHandler = new SelectorHandler(self);

					// build selector (calendar or time grid)
					// selector will be handled according to field type
					var ctrlSelector = selectorFactory.getSelector(self.getPropertyType());
					var selectorDom = ctrlSelector.create(self, sHandler);

					var $$selectorModal = modal.field(self.getTitle(), selectorDom.outerHTML, function(modalEvent, $$modalElmt) {
						// build content on open
						if (modalEvent == 'shown.bs.modal') {
							sHandler.setContainer($$modalElmt);
							sHandler.setParentSlot($$modalElmt.find(".modal-body")[0]);
							ctrlSelector.bindEvents(true);
						}

						// run actions on close 'hidden.bs.modal'
						else {
							ctrlSelector.destroy();
						}
					});

				});
			} else {
				self.createFieldValueElement(parentSlot, value);
			}
		},
		setFieldValue: function(value) {
			if (this.getPropertyType().indexOf("datetime") > -1 && value.length <= 10) {
				value += "T00:00:00.0Z";
			}
			Base.prototype.setFieldValue.call(this, value);
		},
		setDisplayValue: function(value) {
			var self = this;
			if (self.$isEditMode) {
				self.domInput.value = value;
			} else {
				self.fieldValue.textContent = value;
			}
		},
		getValueForSelector: function() {
			return this.getValue().slice(0, 10);
		},
		getFieldFormat: function() {
			return this.formatter.format;
		}
	});

exports.Klass = _Klass;