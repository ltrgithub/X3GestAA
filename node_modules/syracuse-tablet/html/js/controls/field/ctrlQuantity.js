"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');

var _Klass = utils.defineClass(

	function CtrlQuantity(controller, article, prototype, options) {
		Base.call(this, controller, article, prototype, options);
		this.unitFieldInfo = prototype.getUnitFieldInfo();
		// Create extra control for UNIT in read only mode
		// !! if grid Cell we ca't create the control with createControl
		this.displayUnit = false;
		if (this.unitFieldInfo && this.unitFieldInfo.unitFieldProto && !this.unitFieldInfo.unitFieldProto.data("$isExcluded")) {
			this.displayUnit = options && options.displayCtx !== "table";
		}
		this.unitCtrl = null;
	}, Base, {

		initFormatter: function() {
			var valueProto = this.prototype.data('$value');
			return valueProto ? formatApi.getFormatter(valueProto.$type, valueProto.$format) : null;
		},

		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this.unitCtrl) {
				this.unitCtrl.destroy();
				this.unitCtrl = null;
			}
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions);
			(this.$$elmt).addClass("s-m-qty");
			if (this.displayUnit) {
				this.unitCtrl = ctrlFactory.createControl(this.controller, this, {
					"$bind": this.unitFieldInfo.unitBindName,
					"$noAuthoring": true,
				}, this.unitFieldInfo.unitFieldProto, {
					isUnit: true
				});
				this.unitCtrl.buildHtml(this.$$value, controllerDao, buildOptions);
			}
		},

		buildFieldValue: function(fieldSlot, buildOptions) {
			var valueSlot = Base.prototype.buildFieldValue.call(this, fieldSlot, buildOptions);
			var value = this.getFormattedValue(this.getValue());
			if (this.$isEditMode) {
				this.createMainInput(valueSlot, value);
			} else {
				this.appendTextValue(valueSlot, value);
			}
		}
	});

exports.Klass = _Klass;