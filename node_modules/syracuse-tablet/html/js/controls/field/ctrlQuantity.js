"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');

var _Klass = utils.defineClass(

	/**
	 * options.isGridCell true/false
	 */
	function(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
		var info = prototype.getUnitFieldInfo();
		// Create extra control for UNIT in read only mode
		// !! if grid Cell we ca't create the control with createControl
		if (!options.isGridCell && info && info.unitFieldProto && !info.unitFieldProto.data("$isExcluded")) {
			self.unitCtrl = ctrlFactory.createControl(self.controller, self, {
				"$bind": info.unitBindName,
			}, info.unitFieldProto, {
				isUnit: true
			});
		}
	}, Base, {

		initFormatter: function() {
			var valueProto = this.prototype.data('$value');
			return formatApi.getFormatter(valueProto.$type, valueProto.$format);
		},

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			if (self.unitCtrl) {
				self.unitCtrl.destroy();
				self.unitCtrl = null;
			}
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);
			(self.$$elmt).addClass("s-m-qty");
			if (self.unitCtrl) {
				self.unitCtrl.buildHtml(self.$$elmt, controllerDao, buildOptions);
			}
		},

		buildFieldValue: function(fieldSlot, buildOptions) {
			var self = this;
			var valueSlot = Base.prototype.buildFieldValue.call(self, fieldSlot, buildOptions);
			var value = self.getFormattedValue(self.getValue());
			if (self.$isEditMode) {
				self.createMainInput(valueSlot, value);
			} else {
				self.appendTextValue(valueSlot, value);
			}
		}
	});

exports.Klass = _Klass;