"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');


// #118594- Returns the format consistent with $scale (length of decimal part - Needs to be improve by core team)
var _getFormat = function($format, $scale) {
	var parts = $format.split(".");
	var decPart = parts[1] || "0";
	if ($scale == 0) {
		// Integer part
		return parts[0];
	}
	if (decPart.length === $scale) {
		// decimal part ok
		return $format;
	}
	// Updates the decimal part
	if ($scale > decPart.length) {
		var chr = decPart[decPart.length - 1];
		for (var ii = decPart.length; ii < $scale; ii++) {
			decPart += chr;
		}
	} else {
		decPart = decPart.substr(0, $scale);
	}
	parts[1] = decPart;
	return parts.join(".");
};

var _Klass = utils.defineClass(

	function CtrlQuantity(controller, article, prototype, options) {
		this._$valFormat = null;
		this._$valType = null;
		this._$valScale = null;
		Base.call(this, controller, article, prototype, options);
		this.unitFieldInfo = prototype.getUnitFieldInfo();
		// Create extra control for UNIT in read only mode
		// !! if grid Cell we ca't create the control with createControl
		this.displayUnit = false;
		if (this.unitFieldInfo && this.unitFieldInfo.unitFieldProto && !this.unitFieldInfo.unitFieldProto.data("$isExcluded")) {
			this.displayUnit = options && options.displayCtx !== "table";
		}
		this.unitCtrl = null;
	}, Base, {

		initFormatter: function() {
			var valueProto = this.prototype.data('$value');
			if (!valueProto) {
				return null;
			}
			this._$valType = valueProto.$type;
			this._$valScale = valueProto.$scale;
			this._$valFormat = _getFormat(valueProto.$format, this._$valScale);
			return formatApi.getFormatter(this._$valType, this._$valFormat);
		},

		// #118594  -  Build the format according to proto and unitCtrl value
		checkFormatter: function(controllerDao) {
			if (!this.unitFieldInfo || !this.unitFieldInfo.unitFieldProto || this._$valFormat == null) {
				return null;
			}
			var unitVal = controllerDao.getValue(this.unitFieldInfo.unitBindName);
			if (!unitVal) {
				return;
			}
			var newFormat;
			if (unitVal.$format && unitVal.$format != this._$valFormat) {
				// #118594- Unit format override current format
				this._$valScale = unitVal.$scale || this._$valScale;
				newFormat = _getFormat(unitVal.$format, this._$valScale);
			} else if (this._$valScale != unitVal.$scale) {
				// #118594 - We generate the new format with the right number of decimals ($scales given but unitFieldInfo data)
				this._$valScale = unitVal.$scale || this._$valScale;
				newFormat = _getFormat(this._$valFormat, this._$valScale);
			}
			if (newFormat) {
				this._$valFormat = newFormat;
				this.formatter = formatApi.getFormatter(this._$valType, this._$valFormat);
			}
		},

		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this.unitCtrl) {
				this.unitCtrl.destroy();
				this.unitCtrl = null;
			}
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			// #118594  - $format can be updated by unitCtrl value - check before buildHtml
			this.checkFormatter(controllerDao);
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions);
			(this.$$elmt).addClass("s-m-qty");
			if (this.displayUnit) {
				this.unitCtrl = ctrlFactory.createControl(this.controller, this, {
					"$bind": this.unitFieldInfo.unitBindName,
					"$noAuthoring": true,
				}, this.unitFieldInfo.unitFieldProto, {
					isUnit: true
				});
				this.unitCtrl.buildHtml(this.$$value, controllerDao, buildOptions);
			}
		},

		buildFieldValue: function(fieldSlot, buildOptions) {
			var valueSlot = Base.prototype.buildFieldValue.call(this, fieldSlot, buildOptions);;
			$(valueSlot).addClass("s-m-numeric");
			var value = this.getFormattedValue(this.getValue());
			if (this.$isEditMode) {
				this.createMainInput(valueSlot, value);
			} else {
				this.appendTextValue(valueSlot, value);
			}
		}
	});

exports.Klass = _Klass;