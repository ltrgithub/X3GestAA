"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var proto = require('syracuse-tablet/html/js/helpers/prototype');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var ctrlBase = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');

var _Klass = utils.defineClass(
	function(controller, article, prototype) {
		var self = this;
		// Call only super->super->constructor, not direct super class constructor
		ctrlBase.call(self, controller, article, prototype);

		var valueProto = prototype.data('$value');
		self.$format = valueProto.$format;
		self.formatter = formatApi.getFormatter(valueProto.$type, self.$format);
		self.valueTitle = valueProto.$title;
		self.$unit = prototype.data("$unit");

		if (typeof self.$unit == "object") {
			self.unitFieldProto = proto.create(self.$unit);
			self.unitBindName = "$unit";
		} else if (typeof self.$unit == "string") {
			self.unitBindName = self.$unit;
			var parentProto = prototype.parent;
			while (parentProto) {
				self.unitFieldProto = parentProto.property(self.$unit);
				if (self.unitFieldProto) {
					self.unitFieldProto = proto.create(self.unitFieldProto);
					break;
				}
				parentProto = parentProto.parent;
			}
		}

		// Create extra control for UNIT in read only mode
		self.unitCtrl = ctrlFactory.createControl(self.controller, self, {
			"$bind": self.unitBindName,
		}, self.unitFieldProto, self.controller);
		self.unitCtrl.$isEditMode = false;

		self.ensureEditMode();
	}, Base, {

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);
			if (self.unitCtrl) {
				self.unitCtrl.buildHtml($(self.unitCtrlParent), controllerDao, buildOptions);
			}
		},
		buildFieldValue: function(parentSlot, buildOptions) {
			var self = this;
			var value;
			self.unitCtrlParent = parentSlot;
			value = self.getFormattedValue(self.getValue());
			if (this.$isEditMode) {
				self.domInput = parentSlot.appendChild(uiUtils.createDomElement("input", ["s-m-field-input", "form-control", "ctrl-evt-blur"], null, {
					"type": "text",
					"value": value
				}));

			} else {
				self.createFieldValueElement(parentSlot, value);
			}
		},
	});

exports.Klass = _Klass;