"use strict";
var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var escaper = require('syracuse-tablet/html/js/helpers/html-escape/index').escaper({
	warn: console.warn.bind(console),
	allowedAttributes: ["style"],
	allowedTags: ["span"]
});
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
var rtf = require('syracuse-tablet/html/js/helpers/syracuse-rtf/index');

var _defHeight = 150;
var _authorH;

var _templates = {
	expander: '\
		<button type="button" class="btn" data-action="toggleText" data-control-id="{{ctrlId}}>{{label}}</button>'
};

/**
 * Text field
 * authoring:
 * 		$height	set the height of the image - default is _defHeight
 */
var _Klass = utils.defineClass(

	function CtrlText(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
		self.cssType = "s-m-clob";
	}, Base, {
		buildFieldValue: function(parentSlot, buildOptions) {
			var self = this;
			var value = self.getFormattedValue(self.getValue());
			// Create the enriched text content under the standard s-m-value parent
			var parent = Base.prototype.buildFieldValue.call(self, parentSlot, buildOptions);
			// enriched text container div
			var $$container = $(uiUtils.createDomElement("div", ["s-m-enriched-text"], null, null, parent));
			/**
			 * !!! It's mandatory to have a fixed height for $$container because we need it to calculate the height of the page
			 * If no height is specified it will be set after the data has been loaded (too late)
			 */
			var h = _authorH = parseInt(self.getAuthoring("$height", _defHeight), 10);
			$$container.css({
				height: h + "px"
			});
			var docUrl = self.prototype.data("$url", self.getDao()) || "";
			ajax("GET", docUrl, null, null, {
				noJsonParsing: true
			}).then(function(result) {
				var responseText = result.responseText || "";

				if (!responseText || responseText === "") {
					$$container.remove();
					return;
				}

				var $$dataArr = [];
				switch (self.$type) {
					case "text/plain":
						self.buildFieldFromPlain(responseText, $$container);
						break;
					case "text/html":
						self.buildFieldFromHtml(responseText, $$container);
						break;
					case "text/rtf":
						self.buildFieldFromRtf(responseText, $$container);
						break;
				}
				self.appendExpander($$container);
			}).fail(function(e) {
				self.insertError(e.message);
				self.log(e);
			});
		},

		/*
		 *	Append an expander button for the text field.
		 *	Button is appended only if full text height (scrollheight) is higher than _defHeight by at least 5px
		 */
		appendExpander: function($$container) {
			var self = this;
			if ($$container.get(0).scrollHeight > _defHeight && (($$container.get(0).scrollHeight - _defHeight) > 5)) {

				// build expander button
				var buttonTmpl = '<button type="button" class="btn" data-action="toggleText"\
				data-control-id="' + self.id + '"\
				data-params="more">' + locale.text("field.text.seemore") + '</button>';

				var $$expander = self.$$expander = $(buttonTmpl);


				// append the button
				$$expander.insertAfter($$container);
				//$$expander.wrap("<div></div>");
				//self.$$elmt.append($$expander);
			}
		},
		/*
		 * Toggle enriched text. It will either show more or hide
		 */
		_actToggleText: function(param) {
			var self = this;
			// show whole text field
			// change button label
			if (param === "more") {
				self.$$elmt.find(".s-m-enriched-text").css({
					height: "auto"
				});
				self.$$expander.text(locale.text("field.text.seeless"));
				self.$$expander.attr("data-params", "less");
			}
			// decrease text field height
			else {
				self.$$elmt.find(".s-m-enriched-text").css({
					height: (_authorH || _defHeight) + "px"
				});
				self.$$expander.text(locale.text("field.text.seemore"));
				self.$$expander.attr("data-params", "more");
			}
		},
		/**
		 * Display an error
		 */
		insertError: function(html) {
			var err = ['<div class="s-m-error">'];
			err.push(html);
			err.push("</div>");
			$(err.join('')).appendTo(this.$$elmt);
		},
		buildFieldFromPlain: function(data, $$parent) {
			$$parent.append($.parseHTML(escaper(data.replace(/\n/g, "<BR/>"))));
		},
		buildFieldFromRtf: function(data, $$parent) {
			this.buildFieldFromHtml(rtf.toHtml(data), $$parent);
		},
		buildFieldFromHtml: function(data, $$parent) {
			$$parent.append($.parseHTML(escaper(data)));
		}
	});

exports.Klass = _Klass;