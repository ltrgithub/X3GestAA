"use strict";
var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var escaper = require('syracuse-tablet/html/js/helpers/html-escape/index').escaper({
	warn: console.warn.bind(console),
	allowedAttributes: ["style"],
	allowedTags: ["span"]
});
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
var rtf = require('syracuse-tablet/html/js/helpers/syracuse-rtf/index');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var clientContract = require('syracuse-tablet/html/js/sdata/entities/clientContract');

var _baseHeight = 34; // based on input height within the app


/**
 * Text field
 * authoring:
 * 		$height	set the height of the image - default is _defHeight
 */
var _Klass = utils.defineClass(

	function CtrlText(controller, article, prototype, options) {
		options = options || {};
		options.nativeCapabilities = null;
		if (article && !article.$labelPosition) {
			article.$labelPosition = "top";
		}
		Base.call(this, controller, article, prototype, options);
		this.cssType = "s-m-clob s-m-" + this.$type.replace("/", "-");
	}, Base, {
		destroy: function() {
			$(this.$$input).off('keyup input');
			Base.prototype.destroy.call(this);
		},
		_getHeightPixelValue: function(authH) {
			switch (authH) {
				case "medium":
					return 2 * _baseHeight;
				case "large":
					return 4 * _baseHeight;
				case "xlarge":
					return 8 * _baseHeight;
				default:
					return _baseHeight;
			}
		},
		buildFieldValue: function(parentSlot, buildOptions) {
			var self = this;
			self.$$elmt.css("display", "");

			// Create the enriched text content under the standard s-m-value parent
			var parent = Base.prototype.buildFieldValue.call(self, parentSlot, buildOptions);

			// enriched text container div
			var $$container = $('<section><div class="s-m-enriched-text"></div></section>').appendTo(parent).children(":first-child");

			// dom element which will contain the text
			var $$textContent = $(uiUtils.createDomElement("div", ["s-m-enriched-text-content"], null, null, $$container));

			/**
			 * !!! It's mandatory to have a fixed height for $$container because we need it to calculate the height of the page
			 * If no height is specified it will be set after the data has been loaded (too late)
			 */
			self.authH = self.getAuthoring("$textHeight", "medium");
			self.authH = self._getHeightPixelValue(self.authH);

			// If a new record is created there is hardly a linked text clob that can be shown, so we jump out here
			if (this.controller.$facet === "create") {
				$$textContent.html("&nbsp"); // Just to align hight with other fields, otherwise it looks wired
				return;
			}
			var docUrl = self.prototype.data("$url", self.getDao()) || "";
			var deferred;
			if (clientContract.isLocalEntityUrl(docUrl)) {
				// Used to returned data in client entities
				deferred = $.smResolve(clientContract.callLocalEntityUrl(docUrl));
			} else {
				deferred = ajax("GET", docUrl, null, null, {
					noJsonParsing: true
				});
			}
			deferred.then(function(result) {
				if (self.destroyed) return;
				var responseText = result ? result.responseText || "" : "";
				var empty = (responseText == null || responseText.length === 0) && !self.$isEditMode;
				self.$$elmt.toggleClass("s-m-empty", empty);
				self.asynchCheckEmptyValue(empty);
				if (empty) {
					$$container.remove();
					return;
				}
				// put text content
				var $$dataArr = [];
				switch (self.$type) {
					case "text/plain":
						self.buildFieldFromPlain(responseText, $$textContent);
						break;
					case "text/html":
						self.buildFieldFromHtml(responseText, $$textContent);
						break;
					case "text/rtf":
						self.buildFieldFromRtf(responseText, $$textContent);
						break;
				}

				/*
				 *	Set text-content height so that line of text is not half cut.
				 *	We use text line-height css property value
				 */
				var lineheight = parseInt($$textContent.css("line-height").replace("px", ""), 10);
				var multiplier = Math.floor(self.authH / lineheight);
				self.computedHeight = lineheight * multiplier;

				$$textContent.css({
					height: self.computedHeight + "px"
				});
				self.appendExpander($$textContent);
			}).fail(function(e) {
				self.insertError(e.message);
			});
		},

		onBlur: function(justCheck) {
			var res = Base.prototype.onBlur.call(this, justCheck);
			if (this.controller._gestureMgr && !this.controller._gestureMgr.isNative()) {
				// In ctrlText in edit mode with a text area
				// If we input a lot of lines the browser scrolls up the parent to keep the cursor at the same position
				// We need to reset it to 0 in non-native scrolling
				this.controller._gestureMgr.$$elmt.parent().scrollTop(0);
				// We need to update the scroller in any cases
				notifications.notifyController("sm.scroller.update", this.controller, true);
			}
			return res;
		},
		/**
		 * Can be overridden - gauge
		 * forceEmpty used by asynchronous processes (ctrlText)
		 */
		checkEmptyValue: function(forceEmpty) {
			return;
		},
		asynchCheckEmptyValue: function(forceEmpty) {
			Base.prototype.checkEmptyValue.call(this, forceEmpty);
		},

		/*
		 *	Append an expander button for the text field.
		 *	Button is appended only if full text height (scrollheight) is higher than self.authH by at least 5px
		 */
		appendExpander: function($$container) {
			var self = this;
			var scrollHeight = self.$$input ? self.$$input.scrollHeight : $$container.get(0).scrollHeight;
			if (scrollHeight > self.computedHeight && ((scrollHeight - self.computedHeight) > 5)) {

				// build expander button
				var buttonTmpl = '<a href="#" class="' + fontUtils.getIconByName("expand") + '" data-action="toggleText"\
				data-control-id="' + self.id + '" data-params="more"></a>';
				var $$expander = self.$$expander = $(buttonTmpl);

				// append the button
				$$expander.insertBefore($$container);

				$$expander.css("float", "right");

				$$expander.wrap("<div class='s-m-enriched-text-expander'></div>");

				$$expander.parent().height($$expander.outerHeight());
			}
		},
		/**
		 * Display an error
		 */
		insertError: function(msg) {
			var err = ['<span class="s-m-error"><p>'];
			err.push(msg);
			err.push("<p></span>");
			$(err.join('')).appendTo(this.$$elmt);
		},
		buildFieldFromPlain: function(data, $$parent) {
			var self = this;
			if (this.$isEditMode) {
				self.createMainInput($$parent, data, "textplain", {
					"wrap": "soft",
					"spellcheck": false,
					"autocorrect": "off",
					"autocomplete": "off",
					"style": "overflow-y:hidden;box-size:border-box;resize:none;width:100%;height:100%",
					"row": "2"
				});
				this.$$input.val(data);
				this.$$input.on('keyup input', function() {
					self._triggerResizeInput();
				});
			} else {
				$$parent.append($.parseHTML(escaper(data.replace(/\n/g, "<BR/>"))));
			}
		},
		_triggerResizeInput: function() {
			var triggerResize = false;
			if (this.$$expander && this.$$expander.attr("data-params") === "more") {
				this._expandText(this.$$input.parent());
				triggerResize = true;
			};
			this._resizeInput();
			if (triggerResize) {
				uiUtils.triggerResizeInternal({
					preserveScroll: true
				});
			}
		},
		_resizeInput: function(options) {
			if (!this.$$input) return false;
			this.$$input.parent().css('height', 'auto');
			this.$$input.css('height', 'auto');
			var domElmt = this.$$input.get(0);
			var height = (options && options.height != null) ? options.height : (domElmt.scrollHeight + (domElmt.offsetHeight - domElmt.clientHeight));
			this.$$input.css('height', height);
			return false;
		},
		_expandText: function($textContent) {
			$textContent.css({
				height: "auto"
			});
			this.$$expander.toggleClass(fontUtils.getIconByName("expand"), false);
			this.$$expander.toggleClass(fontUtils.getIconByName("compress"), true);
			this.$$expander.attr("data-params", "less");
		},
		_compressText: function($textContent) {
			$textContent.css({
				height: this.computedHeight + "px"
			});
			this.$$expander.toggleClass(fontUtils.getIconByName("compress"), false);
			this.$$expander.toggleClass(fontUtils.getIconByName("expand"), true);
			this.$$expander.attr("data-params", "more");
		},
		/*
		 * Toggle enriched text. It will either show more or hide
		 */
		_actToggleText: function(param) {
			// show whole text field
			// change button label
			var $textContent = this.$$input ? this.$$input.parent() : this.$$elmt.find(".s-m-enriched-text-content");
			if (param === "more") {
				this.currentHeight = null;
				this._expandText($textContent);
				this._resizeInput();
			}
			// decrease text field height
			else {
				this._compressText($textContent);
				this._resizeInput({
					"height": "100%"
				});
			}
			uiUtils.triggerResizeInternal({
				preserveScroll: true
			});
		},

		buildFieldFromRtf: function(data, $$parent) {
			this.buildFieldFromHtml(rtf.toHtml(data), $$parent);
		},
		buildFieldFromHtml: function(data, $$parent) {
			$$parent.append($.parseHTML(escaper(data)));
		}
	});

exports.Klass = _Klass;