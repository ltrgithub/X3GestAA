"use strict";
var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var escaper = require('syracuse-tablet/html/js/helpers/html-escape/index').escaper({
	warn: console.warn.bind(console),
	allowedAttributes: ["style"],
	allowedTags: ["span"]
});
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
var rtf = require('syracuse-tablet/html/js/helpers/syracuse-rtf/index');

var _Klass = utils.defineClass(

	function(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
		self.cssType = "s-m-clob";
	}, Base, {
		buildFieldValue: function(parentSlot, buildOptions) {
			var self = this;
			var value = self.getFormattedValue(self.getValue());
			// Create the enriched text content under the standard s-m-value parent
			var parent = Base.prototype.buildFieldValue.call(self, parentSlot, buildOptions);
			// enriched text container div
			var textContainer = uiUtils.createDomElement("div", ["s-m-enriched-text", "well"], null, null, parent);
			var docUrl = self.prototype.data("$url", self.getDao()) || "";
			ajax("GET", docUrl).then(function(result) {
				var responseText = result.responseText || "";
				var $$dataArr = [];
				switch (ss.$type) {
					case "text/plain":
						self.buildFieldFromPlain(responseText, textContainer);
						break;
					case "text/html":
						// TODO remove || $$dataArr
						self.buildFieldFromHtml(responseText, textContainer);
						break;
					case "text/rtf":
						// TODO remove || $$dataArr
						self.buildFieldFromRtf(responseText, textContainer);
						break;
				}
			}).fail(function(e) {
				self.insertError(e.message);
				self.log(e);
			});
			if (false) {
				//docUrl += '?salt=' + ((new Date()).getTime());
				$.ajax({
					url: docUrl,
					success: function(data, textStatus, jqXHR) {
						var ss = this;
						var $$dataArr = [];
						switch (ss.$type) {
							case "text/plain":
								ss.buildFieldFromPlain(data, textContainer);
								break;
							case "text/html":
								// TODO remove || $$dataArr
								ss.buildFieldFromHtml(data, textContainer);
								break;
							case "text/rtf":
								// TODO remove || $$dataArr
								ss.buildFieldFromRtf(data, textContainer);
								break;
						}
					},
					error: function(jqXHR, textStatus, errorThrown) {
						alert("Error: Ajax failed");
					},
					context: this
				});
			}
		},
		/**
		 * Display an error
		 */
		insertError: function(html) {
			var err = ['<div class="s-m-error">'];
			err.push(html);
			err.push("</div>");
			$(err.join('')).appendTo(this.$$elmt);
		},
		buildFieldFromPlain: function(data, parent) {
			$(parent).append($.parseHTML(escaper(data.replace(/\n/g, "<BR/>"))));
		},
		buildFieldFromRtf: function(data, parent) {
			this.buildFieldFromHtml(rtf.toHtml(data), parent);
		},
		buildFieldFromHtml: function(data, parent) {
			$(parent).append($.parseHTML(escaper(data)));
		}
	});

exports.Klass = _Klass;