"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

/**
 * Binary and document field. For moment quite same later ???
 * authoring:
 * 		$imgHeight	set the height of the image - xsmall, small...
 */
var _Document = utils.defineClass(

	function CtrlDocument(controller, article, prototype, options) {
		Base.call(this, controller, article, prototype, options);
		// Add cssType in root element
		this.cssType = "s-m-document";
	}, Base, {

		initReuseProperties: function() {
			Base.prototype.initReuseProperties.call(this);
			this.$$layout = null;
		},

		applyMetaData: function(metaData) {
			Base.prototype.applyMetaData.call(this, metaData);
			if (this.$isEditMode && this.$$layout) {
				var disabled = metaData ? metaData.$isReadOnly || metaData.$isDisabled : false;
			}
		},

		buildFieldValue: function(parentSlot, buildOptions) {
			var self = this;
			var value = self.getFormattedValue(self.getValue());
			// Create the image stuff under the standard s-m-value parent
			var imgParent = Base.prototype.buildFieldValue.call(self, parentSlot, buildOptions);
			var docUrl = self._getLocalUrlValue();
			if (!docUrl) {
				docUrl = self.prototype.data("$url", self.getDao()) || "";
				//TODO use $etag or else - No need to force reload if updateLayout - data are in the browser's cache
				if (buildOptions.updateLayout !== true) {
					docUrl += '?salt=' + ((new Date()).getTime());
				}
			}
			var empty = value == null || value === "" || docUrl.length === 0;
			if (empty) $(imgParent).addClass("s-m-empty");

			//if (self.$isEditMode)     For moment no dif between edit and not edit
			if (!empty) {
				var classcss = ["img-responsive ctrl-evt-click"];
				classcss.push(this._getIcon());
				// link - Maybe we could manage a modal to display the image 
				var e = uiUtils.createDomElement("span", classcss, null, {
					"href": "#"
				}, imgParent);
			}
		},
		_getIcon: function() {
			return fontUtils.documentFieldIcon();
		},
		onClick: function(evt) {
			var dom = evt.target.parentNode;
			var parentDom;
			if (this.$isEditMode) return;
			this._onDocumentClick(evt, dom); // For moment only open doc.
		},
		/*
			When document is clicked
			- If empty, nothing
			- If not empty, open document
		*/
		_onDocumentClick: function(evt, dom) {
			var self = this;
			var value = self.getFormattedValue(self.getValue());
			var docUrl = self.prototype.data("$url", self.getDao()) || "";
			var empty = value == null || value === "" || docUrl.length === 0;
			if (!empty) {
				window.open(docUrl, "_blank");
			}
		},
		_getLocalUrlValue: function() {
			return this.getDao().getValue(this.$bind + "-LOCALURL");
		}
	});
var _Binary = utils.defineClass(
	function CtrlBinaryd(controller, article, prototype, options) {
		var self = this;
		_Document.call(self, controller, article, prototype, options);
		self.cssType = "s-m-binary";
	}, _Document, {

		_getIcon: function() {
			return fontUtils.binaryFieldIcon();
		},
	});

exports.Klass = _Document;
exports.Binary = _Binary;