"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

var _authoring = {
	$value: {
		$theme: "A",
		$beforelabel: false,
		$position: "stack",
		$refDescrHidden: false,
		$refdescr: {
			$theme: "B",
			$fontsize: "small",
			$withTitle: true,
			$before: true
		}
	}
};

var _Klass = utils.defineClass(

	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
		// Draft - For dvp phase and tests
		self.setAuthoring(_authoring);
	}, Base, {
		getValue: function(prop) {
			var val = Base.prototype.getValue.call(this);
			return val ? val[prop || "$value"] || "" : "";
		},
		buildFieldValue: function(fieldSlot, buildOptions) {
			var self = this;
			var valueSlot = Base.prototype.buildFieldValue.call(self, fieldSlot, buildOptions);
			var value = self.getValue();
			if (self.$isEditMode) {
				var bsInputGroup = uiUtils.createDomElement("div", ["input-group"], null, null, valueSlot);
				self.createMainInput(bsInputGroup, self.getFormattedValue(value));
				var $lookuplink = self.prototype.getDataByPath("$item.$links.$lookup");
				if (!$lookuplink) {
					// build lookup link
					throw new Error("Expected $lookup link");
				} else {
					// get dom $lookup link parameters/attributes
					var link = sdataUtils.getLinkInfo($lookuplink.$url, self.dao);
					var span = uiUtils.createDomElement("span", ["input-group-btn"], null, null, bsInputGroup);
					self.picker = uiUtils.createDomElement("a", ["btn", "btn-default", "s-m-meta"], null, {
						"href": "#",
						"data-nav": link.page,
						"data-sdata-url": link.sDataUrl,
						"data-param": self.id,
						"data-parent-id": self.controller.id,
						"title": self.prototype.checkExpression($lookuplink.$title) || "Lookup"
					}, span);
					uiUtils.createDomElement("span", fontUtils.refFieldIcon(), null, null, self.picker);
				}
			} else {
				// build container
				var container;
				var $detaillink = self.prototype.getDataByPath("$item.$links.$details");
				// if links && $links.$details, container is an anchor, otherwise it is a simple div
				if ($detaillink) {
					// get dom link parameters/attributes (we consider only $details)
					var link = sdataUtils.getLinkInfo($detaillink.$url, self.dao);
					// create container dom
					container = uiUtils.createDomElement("a", null, null, {
						"href": "#",
						"data-nav": link.page,
						"data-sdata-url": link.sDataUrl,
						"title": self.prototype.checkExpression($detaillink.$title) || "Detail"
					}, valueSlot);
				} else {
					container = valueSlot;
				}
				// build container of reference value if any
				if (value.length > 0) {
					var valAuth = self.getAuthoring("$value", {});
					if (valAuth.$refDescrHidden === true) {
						$(container).text(value);
					} else {
						var descr = self.getValue("$description");
						var descrAuth = self.getAuthoring("$value.$refdescr", {});
						var title = descrAuth.$withTitle ? self.getValue("$title") : "";
						if (title.length > 0 && title != descr) {
							descr = descr + "-" + title;
						}
						var domDescr = uiUtils.createDomElement("span", self.appendStyleAuthoring(null, descrAuth), descr);
						if (descrAuth.$before === true) {
							container.appendChild(domDescr);
							uiUtils.appendTextNode(container, " ");
						}
						uiUtils.appendTextNode(container, value);
						if (descrAuth.$before != true) {
							uiUtils.appendTextNode(container, " ");
							container.appendChild(domDescr);
						}
					}
				}
			}
		}
	});

exports.Klass = _Klass;