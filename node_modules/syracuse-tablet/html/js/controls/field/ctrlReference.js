"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

/**
 *  auth example
 *  {
 *  	$value: {
 *  		$theme: "A",
 *  		$valueFirst: false,
 *  		$position: "stack",
 *  		$refDescrHidden: false,
 *  		$refDescr: {
 *  			$theme: "B",
 *  			$fontSize: "small",
 *  			$withTitle: true,
 *  			$before: true
 *  		}
 *  	}
 *  };
 */

var _Klass = utils.defineClass(

	function(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
		// See ctrlQuantity - Control that displays the unit
		self.isUnit = self.options.isUnit === true;
		if (self.isUnit) {
			self.$isEditMode = false;
			self.cssType = "s-m-unit";
		} else {
			self.cssType = "s-m-ref";
		}
	}, Base, {
		getValue: function(prop) {
			var val = Base.prototype.getValue.call(this);
			return val ? val[prop || "$value"] || "" : "";
		},
		buildFieldTitle: function(fieldSlot, buildOptions) {
			var self = this;
			return self.isUnit ? null : Base.prototype.buildFieldTitle.call(self, fieldSlot, buildOptions);
		},
		buildFieldValue: function(fieldSlot, buildOptions) {
			var self = this;
			var parentElmt = Base.prototype.buildFieldValue.call(self, fieldSlot);
			var value = self.getValue();
			if (self.$isEditMode) {
				self.buildEditValue(parentElmt, self.getValue());
			} else {
				var descr = (self.getValue("$description") || "").trim();
				var title = (self.getValue("$title") || "").trim();
				if (self.isUnit) {
					self.buildUnitValue(parentElmt, value, descr, title);
				} else {
					self.buildDetailValue(parentElmt, value, descr, title);
				}
			}
		},
		buildEditValue: function(parentElmt, value) {
			var self = this;
			var bsInputGroup = uiUtils.createDomElement("div", ["input-group"], null, null, parentElmt);
			self.createMainInput(bsInputGroup, self.getFormattedValue(value));
			var $lookuplink = self.prototype.getDataByPath("$item.$links.$lookup");
			if (!$lookuplink) {
				// build lookup link
				throw new Error("ctrlReference - Expected $lookup link");
			} else {
				// get dom $lookup link parameters/attributes
				var link = sdataUtils.getLinkInfo($lookuplink.$url, self.getDao());
				var span = uiUtils.createDomElement("span", ["input-group-btn"], null, null, bsInputGroup);
				var attrs = {
					"href": "#",
					"data-nav": link.page,
					"data-sdata-url": link.sDataUrl,
					"data-param": self.id,
					"data-parent-id": self.controller.id,
					"data-control-id": self.id,
					"title": self.prototype.checkExpression($lookuplink.$title) || "Lookup"
				};
				if (self.controller.isVignette) {
					// Its the vignette which will load the page
					attrs["data-nav-target"] = "vignette";
				}
				self.picker = uiUtils.createDomElement("a", ["btn", "btn-default", "s-m-meta"], null, attrs, span);
				uiUtils.createDomElement("span", fontUtils.refFieldIcon(), null, null, self.picker);
			}
		},
		buildDetailValue: function(parentElmt, value, descr, title) {
			var self = this;
			// build container
			var container = self.addLink(parentElmt);
			// build container of reference value if any
			if (value.length > 0) {
				var valAuth = self.getAuthoring("$value", {});
				if (valAuth.$refDescrHidden === true) {
					$(container).text(value);
				} else {
					var descrAuth = self.getAuthoring("$value.$refDescr", {});
					if (descrAuth.$withTitle && title.length > 0 && title != descr) {
						descr = descr + "-" + title;
					}
					var domDescr = uiUtils.createDomElement("span", self.appendStyleAuthoring(["s-m-descr"], descrAuth), descr);
					if (descrAuth.$before === true) {
						container.appendChild(domDescr);
						uiUtils.appendTextNode(container, " ");
					}
					uiUtils.appendTextNode(container, value);
					if (descrAuth.$before != true) {
						uiUtils.appendTextNode(container, " ");
						container.appendChild(domDescr);
					}
				}
			}
		},
		buildUnitValue: function(parentElmt, value, descr, title) {
			var self = this;
			var label = descr.length > 0 ? descr : title.length > 0 ? title : value;
			// TODO See how we display unit
			label = value || "";
			if (label && label.toLowerCase) label = label.toLowerCase().smCapitalize();
			uiUtils.createDomElement("span", ["s-m-descr"], label, null, self.addLink(parentElmt));
		},
		addLink: function(parentElmt) {
			var self = this;
			var $detaillink = self.prototype.getDataByPath("$item.$links.$details");
			// if links && $links.$details, container is an anchor, otherwise it is a simple div
			if ($detaillink) {
				// get dom link parameters/attributes (we consider only $details)
				var link = sdataUtils.getLinkInfo($detaillink.$url, self.getDao());
				// create container dom
				return uiUtils.createDomElement("a", null, null, {
					"href": "#",
					"data-nav": link.page,
					"data-sdata-url": link.sDataUrl,
					"title": self.prototype.checkExpression($detaillink.$title) || "Detail"
				}, parentElmt);
			} else {
				return parentElmt;
			}
		},
		/**
		 * Set field value after a lookup selection
		 * 	rowData: data of selected row
		 */
		setLookupValue: function(rowData) {
			var self = this;
			// Field that contains the value
			var lookupField = self.prototype.getLookupValue();
			if (lookupField) {
				var val = rowData[lookupField];
				if (val != null) {
					self.setFieldValue(val);
					$(self.domInput).focus();
				}
			}
		}
	});

exports.Klass = _Klass;