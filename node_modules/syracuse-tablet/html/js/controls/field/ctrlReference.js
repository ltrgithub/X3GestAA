"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;

var _Klass = utils.defineClass(

	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
	}, Base, {
		getValue: function() {
			var self = this;
			var val = Base.prototype.getValue.call(self);
			return val ? val.$title || val.$value : "";
		},
		hasValue: function() {
			return (this.getValue() != "") && (this.getValue() != undefined) && (this.getValue() != null);
		},
		hasDescription: function() {
			var self = this;
			var val = Base.prototype.getValue.call(self);
			return (val.$description != "") && (val.$description != undefined) && (val.$description != null);
		},
		getDescription: function() {
			var self = this;
			if (self.hasDescription()) {
				var val = Base.prototype.getValue.call(self);
				return val.$description;
			}
		},
		buildFieldValue: function(parentSlot, buildOptions) {
			var self = this,
				hasValue, hasDesc, refVal, refDesc;
			if (self.$isEditMode) {
				Base.prototype.buildFieldValue.call(self, parentSlot, buildOptions);
			} else {
				// build container of reference value if any
				if (self.hasValue()) {
					refVal = uiUtils.createDomElement("div", ["s-m-field-ref-val"], self.getValue());
					hasValue = true;
				}


				// build container of reference description if any
				if (self.hasDescription()) {
					refDesc = uiUtils.createDomElement("div", ["s-m-field-ref-desc"], self.getDescription());
					hasDesc = true;
				}


				// build container
				var container;

				// if links && $links.$details, container is an anchor, otherwise it is a simple div
				if (self.prototype.data("$item") && self.prototype.data("$item").$links && self.prototype.data("$item").$links.$details) {

					// get dom link parameters/attributes (we consider only $details)
					var $link = self.prototype.data("$item").$links.$details;
					var link = sdataUtils.getLinkInfo($link.$url, self.dao);

					// TODO Localize ("Details")
					// create container dom
					container = uiUtils.createDomElement("a", ["s-m-field-ref-link"], null, {
						"href": "#",
						"data-nav": link.page,
						"data-sdata-url": link.sDataUrl,
						"title": utils.parseExpression($link.$title, null, self.prototype) || "Detail"
					}, parentSlot);
				} else {
					container = uiUtils.createDomElement("div", "s-m-field-ref-slot", null, null, parentSlot);
				}

				// append refVal and refDesc if any (assuming we put them first, then we apply styling)
				if (hasValue) {
					container.appendChild(refVal);
				}

				if (hasDesc) {
					container.appendChild(refDesc);
				}

				self.applyStyle();
			}

			/*
			if (self.prototype.data("$item") && self.prototype.data("$item").$links){

			}*/
		},
		applyStyle: function() {

		}
	});

exports.Klass = _Klass;