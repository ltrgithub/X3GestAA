"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var eventListener = require('syracuse-tablet/html/js/application/eventListener');

/**
 *
 */

var _Klass = utils.defineClass(

	function CtrlReference(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
		// See ctrlQuantity - Control that displays the unit
		self.isUnit = self.options.isUnit === true;
		if (self.isUnit) {
			self.$isEditMode = false;
			self.cssType = "s-m-unit";
		} else {
			self.cssType = "s-m-ref";
		}
	}, Base, {
		/**
		 * Init the properties to allow reuse of this control
		 */
		initReuseProperties: function() {
			Base.prototype.initReuseProperties.call(this);
			this.picker = null;
		},
		getValue: function(prop) {
			var val = Base.prototype.getValue.call(this);
			if (val != null) {
				val = val[prop || "$value"];
			}
			return val == null ? "" : val;
		},
		buildFieldTitle: function(fieldSlot, buildOptions) {
			if (this.isUnit) return;
			Base.prototype.buildFieldTitle.call(this, fieldSlot, buildOptions);
		},
		buildFieldValue: function(fieldSlot, buildOptions) {
			var self = this;
			var parentElmt = Base.prototype.buildFieldValue.call(self, fieldSlot);
			var value = self.getValue();
			if (self.$isEditMode) {
				self.buildEditValue(parentElmt, value);
			} else {
				var descr = (self.getValue("$description") || "").trim();
				var title = (self.getValue("$title") || "").trim();
				if (self.isUnit) {
					self.buildUnitValue(parentElmt, value, descr, title);
				} else {
					self.buildDetailValue(parentElmt, value, descr, title, buildOptions);
				}
			}
		},
		buildEditValue: function(parentElmt, value) {
			var self = this;
			var bsInputGroup = uiUtils.createDomElement("div", ["input-group"], null, null, parentElmt);
			self.createMainInput(bsInputGroup, self.getFormattedValue(value));
			var $lookuplink = this.getMetaData("$isReadOnly") !== true && this.getMetaData("$isDisabled") !== true ? self.prototype.getDataByPath("$item.$links.$lookup") : null;
			if (!$lookuplink) {
				$(bsInputGroup).css({
					width: "100%"
				});
				return;
			}
			// get dom $lookup link parameters/attributes
			var span = uiUtils.createDomElement("span", ["input-group-btn"], null, null, bsInputGroup);
			var attrs = self._getLinkAttrs("$lookup");
			self.picker = uiUtils.createDomElement("a", ["btn", "btn-default", "s-m-meta"], null, attrs, span);
			uiUtils.createDomElement("span", fontUtils.refFieldIcon(), null, null, self.picker);
		},
		buildDetailValue: function(parentElmt, value, descr, title, buildOptions) {
			var self = this;
			// build container - Disable link to lookup entity in tables
			var container = buildOptions && buildOptions.displayCtx === "table" ? parentElmt : self.addDetailLink(parentElmt);

			// build container of reference value if any
			if (value.length > 0) {
				// set description content according to authoring value of $refDescFormat
				// Available values are desc, title, desctitle, and titledesc. Default is "desc"
				var descContent;
				var $refDescFormat = self.getAuthoring("$refDescFormat");
				switch ($refDescFormat) {
					case "title":
						descContent = title;
						break;
					case "desctitle":
						descContent = self._combineTexts(descr, title);
						break;
					case "titledesc":
						descContent = self._combineTexts(title, descr);
						break;
						// "desc" will be considered as default
					default:
						descContent = descr;
						break;
				}

				// build content and set position according to description content authoring position $refDescPosition
				// available values are bottom, right, left, top, none. Default is "right"
				var $refDescPosition = self.getAuthoring("$refDescPosition");
				var $$value = $("<div>").addClass("s-m-ref-val").text(value);
				var $$desc = $("<div>").addClass("s-m-descr").text(descContent);
				var arr;
				switch ($refDescPosition) {
					case "bottom":
						$(container).append($$value).append($$desc);
						break;
					case "left":
						$(container).append($$desc).append($$value);
						arr = [$$value, $$desc];
						$.each(arr, function(index, $$ee) {
							$$ee.css("display", "inline-block");
						});
						$$desc.css("padding-right", "5px");
						break;
					case "top":
						$(container).append($$desc).append($$value);
						break;
					case "none":
						$(container).append($$value);
						break;
					case "right": // "right" will be considered as default
					default:
						arr = [$$value, $$desc];
						$(container).append($$value).append($$desc);
						$.each(arr, function(index, $$ee) {
							$$ee.css("display", "inline-block");
						});
						$$desc.css("padding-left", "5px");
				}
			}
		},
		buildUnitValue: function(parentElmt, value, descr, title) {
			var self = this;
			var label = descr.length > 0 ? descr : title.length > 0 ? title : value;
			// TODO See how we display unit
			label = value || "";
			if (label && label.toLowerCase) label = label.toLowerCase().smCapitalize();
			uiUtils.createDomElement("span", ["s-m-descr"], label, null, self.addDetailLink(parentElmt));
		},
		addDetailLink: function(parentElmt) {
			var self = this;
			if (self.options.displayCtx === "card") return parentElmt;
			if (self.prototype.getDataByPath("$item.$links.$details")) {
				// get dom link parameters/attributes (we consider only $details)
				return uiUtils.createDomElement("span", null, null, self._getLinkAttrs("$details"), parentElmt);
			} else {
				return parentElmt;
			}
		},
		getFormattedValue: function(value) {
			return value;
		},
		// lookupData - {data, proto} - data: selected JSON data - proto - prototype of row data
		setLookupValue: function(lookupData) {
			if (!lookupData) {
				console.log("setLookupValue Error - bind", this.$bind, "No lookupData");
				return;
			}
			if (!lookupData.data) {
				console.log("setLookupValue Error - bind", this.$bind, "No data");
				return;
			}
			var field = (this.prototype.getDataByPath("$item") || {}).$lookupValue;
			if (!field) {
				console.log("setLookupValue Error - bind", this.$bind, "No $lookupValue");
				return;
			}
			var proto = lookupData.proto;
			if (proto) {
				// proto allows to read $title, $description in lookupData.data if we want to diplay them
			}
			var value = lookupData.data[field];
			if (value == null) {
				value = "";
				console.log("setLookupValue Error - bind", this.$bind, "No field value", field);
			}
			this.setFieldValueFromSelector(value);
		},
		/**
		 * data: 		string with value
		 * 				object with {$value:,$description:,$title:}
		 */
		setDisplayValue: function(value) {
			var strData;
			if ($.isPlainObject(value)) {
				strData = value.$value || "";
			} else {
				strData = value || "";
			}
			Base.prototype.setDisplayValue.call(this, strData);
		},
		_getLinkAttrs: function(type) {
			return {
				"href": "#",
				"data-action": "ctrlRefLink",
				"data-params": type,
				"data-control-id": this.id
			};
		},
		/**
		 * Process the click here instead of generating the sdata Url in the link with data-nav attr (old version)
		 * We need to process $url with the current dao context
		 */
		_actCtrlRefLink: function(type) {
			var self = this;
			var $url;
			$url = (this.prototype.getDataByPath("$item.$links." + type) || {}).$url;
			if (type === "$lookup" && $url) {
				// Auto generated dynamic filter bases on compound key of item to lookup
				var $lookupWhere = this.prototype.getDataByPath("$item.$autoLookWhere");
				var whereElements;
				$lookupWhere && $.each($lookupWhere, function(property, valueProperty) {
					var fieldValue = self._dao && self._dao.getValue(valueProperty);
					if (fieldValue != null) {
						whereElements = whereElements || [];
						whereElements.push("(" + property + " eq '{" + valueProperty + "}')");
					}
				});

				var autoLookupWhere = whereElements && whereElements.join(" and ");
				if (autoLookupWhere) {
					if ($url.indexOf("?") < 0) {
						$url = $url + "?where=" + autoLookupWhere;
					} else {
						$url = $url + "&where=" + autoLookupWhere;
					}
				}
			}

			// Resolve parameters if any with the current dao - see $myLookupUrl
			// myLookupUrl must be resolve with the lats input data in edit facets 
			var link = $url ? sdataUtils.getLinkInfo($url, this.controller.dao) : null;
			if (!link) {
				return;
			}
			var attrs = {
				"data-nav": link.page,
				"data-sdata-url": link.sDataUrl
			};
			if (type === "$lookup") {
				attrs["data-parent-id"] = this.controller.id;
				attrs["data-control-id"] = this.id;
			}
			if (this.controller.isVignette) {
				// We alway open a lookup in full page
				// This old code set the target according to the context - attrs["data-nav-target"] = this.controller.openLinkInVignette() ? "vignette" : "application";
				attrs["data-nav-target"] = "application";
			}
			eventListener.triggerNavigation(this.$$elmt, attrs);
		},
		_combineTexts: function(el1, el2) {
			var res;
			// el1-el2 || el1 || el2
			res = (el1 && el2) ? (el1 === el2 ? el1 : el1 + "-" + el2) : (el1 || el2 || "");
			return res;
		}

	});

exports.Klass = _Klass;