"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _Klass = utils.defineClass(

	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
		self.isImage = self.$type.indexOf("image") == 0;
		// Add cssType in root element
		self.cssType = self.isImage ? "s-m-img" : "s-m-binary";
	}, Base, {

		buildFieldValue: function(parentSlot, buildOptions) {
			var self = this;
			var value = self.getFormattedValue(self.getValue());
			// Create the image stuff under the standard s-m-value parent
			var imgParent = Base.prototype.buildFieldValue.call(self, parentSlot, buildOptions);
			var docUrl = self.prototype.data("$url", self.dao) || "";
			var empty = value == null || value === "" || docUrl.length === 0;
			if (empty) $(imgParent).addClass("s-m-empty");
			if (true) { //if (self.$isEditMode) {
				// temporary hack for development phase
				///docUrl = "http://pc038043:8124/mobile1/x3/erp/SUPERV/BDOC('C_AQTCRUD~%C2%A8~PBLOB~%C2%A8~PBLOB~%C2%A8~10-Key~%C2%A8~~%C2%A8~')";
				self._buildEditBinaryField(imgParent, docUrl, empty);
			} else {
				if (empty) {
					// Only icon
					$(imgParent).addClass(fontUtils.binaryIcon(self.cssType, "default"));
				} else {
					// link - Maybe we could manage a modal to display the image 
					var e = uiUtils.createDomElement("a", ["img-responsive"], null, {
						"target": "_blank",
						"href": docUrl
					}, imgParent);
					if (self.isImage) {
						// Image with link
						e = uiUtils.createDomElement("span", ["img-responsive"], null, null, e);
						e.style.backgroundImage = 'url("' + docUrl + '")';
					} else {
						// Icon with link
						e = uiUtils.createDomElement("span", fontUtils.binaryIcon(self.cssType, "default"), null, null, e);
					}
				}
			}
		},
		_buildEditBinaryField: function(parentSlot, docUrl, empty) {
			var self = this;

			// layout structure
			var $$layout = $('\
				<div class="s-m-img-layout">\
					<div class="s-m-img-header"></div>\
					<div class="s-m-img-core"></div>\
					<div class="s-m-img-footer"></div>\
				</div>');

			// building 3 components. clear button, core and upload button. All clickable.
			var clearBtn, uploadBtn, core;


			// build clear btn. add 's-m-clear-binary-hidden' class to hide clear btn if content empty
			clearBtn = uiUtils.createDomElement("a", ["s-m-clear-binary-field", "ctrl-evt-click", (empty ? "s-m-clear-binary-hidden" : "")], null, {
				"href": "#"
			}, $$layout.find(".s-m-img-header")[0]);
			clearBtn = uiUtils.createDomElement("span", fontUtils.getIconByName("close"), null, null, clearBtn);


			// build core
			core = uiUtils.createDomElement("a", ["img-responsive", "s-m-field-" + (self.isImage ? "img" : "bin"), "ctrl-evt-click"], null, {
				"target": "_blank",
				"href": empty ? "#" : docUrl
			}, $$layout.find(".s-m-img-core")[0]);


			// *image* core
			if (self.isImage) {

				// build upload button only for image content
				uploadBtn = uiUtils.createDomElement("a", ["s-m-upload-binary-field", "ctrl-evt-click"], locale.text("image.label." + (empty ? "addimage" : "changeimage")), {
					"href": "#"
				}, $$layout.find(".s-m-img-footer")[0]);

				// use default image if empty content
				core = uiUtils.createDomElement("span", [empty ? fontUtils.binaryIcon(self.cssType, "default") + " s-m-empty" : "", "img-responsive"], null, null, core);

				if (!empty) {
					core.style.backgroundImage = 'url("' + docUrl + '")';
				}

			} else {

				// *document* core
				core = uiUtils.createDomElement("span", fontUtils.binaryIcon(self.cssType, "default"), null, null, core);
				$$layout.find(".s-m-img-footer").css("display", "none");
			}

			parentSlot.appendChild($$layout[0]);

			// append <input> dom
			var inputDom = uiUtils.createDomElement("input", ["s-m-field-binary-input", "ctrl-evt-change"], null, {
				"type": "file",
				"accept": "image/*"
			}, parentSlot);
		},
		onClick: function(evt) {
			var self = this;

			var handlersMap = {
				"s-m-clear-binary-field": "_onClearClick",
				"s-m-field-img": "_onDocumentClick",
				"s-m-field-bin": "_onDocumentClick",
				"s-m-upload-binary-field": "_onUploadClick"
			};

			var dom = evt.target.nodeName.toLowerCase() === "span" ? evt.target.parentNode : evt.target;

			for (var ii = 0, jj = dom.classList; ii < jj.length; ii++) {
				var className = dom.classList[ii];
				if (self[handlersMap[className]]) {
					return self[handlersMap[className]](evt, dom);
				}
			}

			//TODO
			// handle the 3 following links
			// clearBtn
			// uploadBtn
			// imageAnchor
		},
		/*
			When clear button is clicked
			- Removes binary content
			- Hide clear button
			- Update upload button text if image
		*/
		_onClearClick: function(evt, dom) {
			var self = this;

			// get the clear btn
			var clearBtn = dom;

			// get core elmt (the anchor containing the image or the file)
			var core = self.$$elmt.find("." + "s-m-field-" + (self.isImage ? "img" : "bin"))[0];

			// remove image/doc
			uiUtils.empty(core);

			// update image/doc
			core = uiUtils.createDomElement("span", [fontUtils.binaryIcon(self.cssType, "default"), "s-m-empty"], null, null, core);

			// update dao
			self.setValue(null);

			// toggle clearBtn
			$(clearBtn).toggleClass("s-m-clear-binary-hidden");

			// update upload button
			if (self.isImage) {
				self.$$elmt.find(".s-m-upload-binary-field").text(locale.text("image.label.addimage"));
			}
		},
		/*
			When image is clicked
			- If not empty, open image
			- If empty, run upload image process

			When document is clicked
			- If empty, nothing
			- If not empty, open document
		*/
		_onDocumentClick: function(evt, dom) {
			var self = this;
			var value = self.getFormattedValue(self.getValue());
			var docUrl = self.prototype.data("$url", self.dao) || "";
			var empty = value == null || value === "" || docUrl.length === 0;

			if (self.isImage) {
				if (!empty) {
					// open image
					window.open(dom.getAttribute("href"), '_blank');
				} else {
					// upload image
					self._onUploadClick(evt, dom);
				}
			} else {
				if (!empty) {
					// open document
					window.open(dom.getAttribute("href"), '_blank');
				}
			}
		},
		/* 
		When upload button is clicked (or empty image), run upload and update dao
	*/
		_onUploadClick: function(evt, dom) {
			var self = this;
			var $$inputDom = self.$$elmt.find(".s-m-field-binary-input");
			$$inputDom.trigger("click");

			//alert("Implementation in progress");
		},
		/*
		Runs image selection within the client device
		Updates dao
	*/
		onChange: function(evt) {
			var self = this;

			if (evt.target.nodeName.toLowerCase() === 'input') {
				var files = evt.target.files; // FileList object
				var res = {};
				if (files && files.length) {
					var f = files[0];
					if (!f.type.match('image.*')) return;
					res.$contentType = f.type;
					res.$fileName = f.name;
					res.$type = "image";
					var reader = new FileReader();
					reader.onload = (function(theFile, cont) {
						return function(e) {
							var i = e.target.result.indexOf("base64,");
							if (i > 0) cont.$value = e.target.result.substring(i + 7);
							else cont.$value = e.target.result;
							delete cont.$url;
							self.setValue(cont.$value);
						};
					})(f, res);
					reader.readAsDataURL(f);
				}
			}
		}
	});

exports.Klass = _Klass;