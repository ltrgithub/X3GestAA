"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _handlersMap = {
	"header": "_onClearClick",
	"section": "_onDocumentClick",
	"footer": "_onUploadClick",
	"a": "_onDocumentClick"
};

/**
 * Binary field
 * authoring:
 * 		$imgHeight	set the height of the image - xsmall, small...
 */
var _Klass = utils.defineClass(

	function CtrlBinary(controller, article, prototype, options) {
		Base.call(this, controller, article, prototype, options);
		this.isImage = this.$type.indexOf("image") == 0;
		// Add cssType in root element
		this.cssType = this.isImage ? "s-m-img" : "s-m-binary";
	}, Base, {

		initReuseProperties: function() {
			Base.prototype.initReuseProperties.call(this);
			this.$$layout = null;
		},

		applyMetaData: function(metaData) {
			Base.prototype.applyMetaData.call(this, metaData);
			if (this.$isEditMode && this.$$layout) {
				var disabled = metaData ? metaData.$isReadOnly || metaData.$isDisabled : false;
				this.$$layout.children("header").toggle(disabled !== true);
				this.$$layout.children("footer").toggle(disabled !== true);
			}
		},

		buildFieldValue: function(parentSlot, buildOptions) {
			var self = this;
			if (!this.article.$imgHeight) {
				this.article.$imgHeight = buildOptions && (buildOptions.displayCtx === "table" || buildOptions.displayCtx === "card") ? "small" : "medium";
			}
			var value = self.getFormattedValue(self.getValue());
			// Create the image stuff under the standard s-m-value parent
			var imgParent = Base.prototype.buildFieldValue.call(self, parentSlot, buildOptions);
			var docUrl = self._getLocalUrlValue();
			if (!docUrl) {
				docUrl = self.prototype.data("$url", self.getDao()) || "";
				//TODO use $etag or else - No need to force reload if updateLayout - data are in the browser's cache
				if (buildOptions.updateLayout !== true) {
					docUrl += '?salt=' + ((new Date()).getTime());
				}
			}
			var empty = value == null || value === "" || docUrl.length === 0;
			if (empty) $(imgParent).addClass("s-m-empty");
			// if FileReader not supported by the browser, we display detail view (fix for Safari)
			// we don't display edit mode for "x-document" type since it can't be edited yet
			if (self.$isEditMode && typeof FileReader !== "undefined" && self.typeName.indexOf("document") < 0) {
				self._buildEditBinaryField(imgParent, docUrl, empty);
			} else {
				if (this.article.$imgDisplayIcon === true) {
					// We want to display images as icons - enabled only for arrays in table mode
					var css;
					if (empty) {
						css = fontUtils.getColImageDefIcon(true).css;
					} else {
						css = (this.article.$imgIcon || fontUtils.getColImageDefIcon(false)).css;
					}
					return $(imgParent).addClass(css);
				} else if (empty) {
					// Only icon
					if (buildOptions && buildOptions.displayCtx === "card") {
						// same height for all cards -> We set the height
						self._defaultImg(imgParent, null);
					} else {
						$(imgParent).addClass(this._getDefaultIcon());
					}
				} else {
					// link - Maybe we could manage a modal to display the image 
					var e = uiUtils.createDomElement("a", ["img-responsive ctrl-evt-click"], null, {
						"href": "#"
					}, imgParent);
					if (self.isImage) {
						// Image with link
						e = self._newImg(e, docUrl);
						//e.style.backgroundImage = 'url("' + docUrl + '")';
					} else {
						// Icon with link
						e = uiUtils.createDomElement("span", this._getDefaultIcon(), null, null, e);
					}
				}
			}
		},
		_buildEditBinaryField: function(parentSlot, docUrl, empty) {
			var self = this;

			// layout structure
			self.$$layout = $('<div class="s-m-img-layout">');
			// building 3 components. clear button, core and upload button. All clickable.
			var clearBtn, uploadBtn, core;

			// build clear btn.
			clearBtn = uiUtils.createDomElement("a", ["ctrl-evt-click"], null, {
				"href": "#"
			}, $("<header>").appendTo(self.$$layout));
			clearBtn = uiUtils.createDomElement("span", fontUtils.getIconByName("close"), null, null, clearBtn);
			$(clearBtn).toggle(!empty);

			// build core
			core = uiUtils.createDomElement("a", ["img-responsive", "s-m-field-" + (self.isImage ? "img" : "bin"), "ctrl-evt-click"], null, {
				"href": "#"
			}, $("<section>").appendTo(self.$$layout));


			// *image* core
			if (self.isImage) {

				// build upload button only for image content
				uploadBtn = uiUtils.createDomElement("a", ["ctrl-evt-click"], locale.text("image.label." + (empty ? "addimage" : "changeimage")), {
					"href": "#"
				}, $("<footer>").appendTo(self.$$layout));

				// use default image if empty content
				if (empty) {
					core = uiUtils.createDomElement("span", [self._getDefaultIcon(), "s-m-empty", "img-responsive"], null, null, core);
				} else {
					core = self._newImg(core, docUrl);
				}

			} else {
				// *document* core
				core = uiUtils.createDomElement("span", [self._getDefaultIcon(), empty ? "s-m-empty" : "", "s-m-doc"], null, null, core);
			}

			parentSlot.appendChild(self.$$layout[0]);

			// append <input> dom if image
			if (self.isImage) {
				var inputDom = uiUtils.createDomElement("input", ["ctrl-evt-change"], null, {
					"type": "file",
					"accept": "image/*"
				}, parentSlot);
			}
		},
		onClick: function(evt) {
			var self = this;
			var dom = evt.target.nodeName.toLowerCase() === "span" ? evt.target.parentNode : evt.target;
			var parentDom;

			// detail mode
			if (!self.$isEditMode && dom.nodeName.toLowerCase() === "a") {
				parentDom = dom;
			}
			// edit mode
			else {
				parentDom = dom.parentNode;
			}
			if (!parentDom) return;
			var hdl = _handlersMap[parentDom.nodeName.toLowerCase()];
			if (!hdl) return;
			self[hdl](evt, dom);
		},
		/*
			When clear button is clicked
			- Removes binary content
			- Hide clear button
			- Update upload button text if image
		*/
		_onClearClick: function(evt, dom) {
			var self = this;

			// get the clear btn
			var clearBtn = dom;

			// get core elmt (the anchor containing the image or the file)
			var core = self.$$elmt.find(".s-m-img-layout > section > a")[0];

			// remove image/doc
			uiUtils.empty(core);

			// update image/doc
			core = uiUtils.createDomElement("span", [self._getDefaultIcon(), "s-m-empty"], null, null, core);

			// update dao
			self.setValue(null);

			// toggle clearBtn
			$(clearBtn).toggle();

			// update upload button
			if (self.isImage) {
				self.$$elmt.find(".s-m-img-layout > footer > a").text(locale.text("image.label.addimage"));
			}

			self._setLocalUrlValue(null);
		},
		/*
			When image is clicked
			- If not empty, open image
			- If empty, run upload image process

			When document is clicked
			- If empty, nothing
			- If not empty, open document
		*/
		_onDocumentClick: function(evt, dom) {
			var self = this;
			var value = self.getFormattedValue(self.getValue());
			var docUrl = self.prototype.data("$url", self.getDao()) || "";
			var empty = value == null || value === "" || docUrl.length === 0;

			if (self.isImage) {
				if (empty) {
					// upload image
					self._onUploadClick(evt, dom);
				}
			} else {
				if (!empty) {
					window.open(docUrl, "_blank");
				}
			}
		},
		/* 
		When upload button is clicked (or empty image), run upload and update dao
	*/
		_onUploadClick: function(evt, dom) {
			var self = this;
			var $$inputDom = self.$$elmt.find(".s-m-value > input");
			$$inputDom.trigger("click");
		},
		/*
		Runs image selection within the client device
		Updates dao
	*/
		onChange: function(evt) {
			var self = this;

			if (evt.target.nodeName.toLowerCase() === 'input') {
				var files = evt.target.files; // FileList object
				var res = {};
				if (files && files.length) {
					var f = files[0];
					if (!f.type.match('image.*')) return;
					res.$contentType = f.type;
					res.$fileName = f.name;
					res.$type = "image";

					var reader = new FileReader();
					reader.onload = (function(theFile, cont) {
						return function(e) {
							var i = e.target.result.indexOf("base64,");
							if (i > 0) {
								cont.$value = e.target.result.substring(i + 7);
							} else {
								cont.$value = e.target.result;
							}
							delete cont.$url;
							self.setValue(cont.$value, true);
							self._setImage(e.target.result);
						};
					})(f, res);
					reader.readAsDataURL(f);

				}
			}
		},
		getFocusElmt: function() {
			return this.$$elmt.find(".s-m-img-layout > section");
		},
		_setLocalUrlValue: function(src) {
			this.getDao().setValue(this.$bind + "-LOCALURL", src);
		},
		_getLocalUrlValue: function() {
			return this.getDao().getValue(this.$bind + "-LOCALURL");
		},
		/*
		Set image based on client image src
		*/
		_setImage: function(src) {
			var self = this;

			self._setLocalUrlValue(src);

			// get core elmt (the anchor containing the image)
			var core = self.$$elmt.find(".s-m-img-layout > section > a")[0];

			// remove image
			uiUtils.empty(core);

			// update image
			core = self._newImg(core, src);

			// update upload button
			self.$$elmt.find(".s-m-img-layout > footer > a").text(locale.text("image.label.changeimage"));

			// toggle clearBtn
			self.$$elmt.find(".s-m-img-layout > header > a").toggle(true);
		},
		_newImg: function(parent, src) {
			return this._setImgHeight(uiUtils.createDomElement("img", ["img-responsive"], null, {
				src: src
			}, parent));
		},
		_defaultImg: function(parent, css) {
			return this._setImgHeight(uiUtils.createDomElement("span", this._getDefaultIcon() + (" " + (css || "")), null, null, parent));
		},
		_setImgHeight: function(i) {
			return $(i).height(uiUtils.imgHeight2px(this.getAuthoring("$imgHeight") || "small")).get(0);
		},
		_getDefaultIcon: function() {
			var css = "s-m-icon-" + (this.article.$emptyIconSize || "small") + " ";
			if (this.cssType === "s-m-binary") {
				return css + fontUtils.getEmptyFileDefIcon().css;
			}
			if (this.cssType === "s-m-img") {
				return css + (this.article.$emptyImageIcon || fontUtils.getEmptyImageDefIcon()).css;
			}
			return "";
		}
	});

exports.Klass = _Klass;