"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _Klass = utils.defineClass(

	function(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
		self.isImage = self.$type.indexOf("image") == 0;
		// Add cssType in root element
		self.cssType = self.isImage ? "s-m-img" : "s-m-binary";
	}, Base, {

		buildFieldValue: function(parentSlot, buildOptions) {
			var self = this;
			var value = self.getFormattedValue(self.getValue());
			// Create the image stuff under the standard s-m-value parent
			var imgParent = Base.prototype.buildFieldValue.call(self, parentSlot, buildOptions);
			var docUrl = self.prototype.data("$url", self.getDao()) || "";

			//TODO use $etag or else
			docUrl += '?salt=' + ((new Date()).getTime());

			var empty = value == null || value === "" || docUrl.length === 0;
			if (empty) $(imgParent).addClass("s-m-empty");
			// if FileReader not supported by the browser, we display detail view (fix for Safari)
			if (self.$isEditMode && typeof FileReader !== "undefined") {
				self._buildEditBinaryField(imgParent, docUrl, empty);
			} else {
				if (empty) {
					// Only icon
					$(imgParent).addClass(fontUtils.binaryIcon(self.cssType, "default"));
				} else {
					// link - Maybe we could manage a modal to display the image 
					var e = uiUtils.createDomElement("a", ["img-responsive"], null, {
						"href": "#"
					}, imgParent);
					if (self.isImage) {
						// Image with link
						e = uiUtils.createDomElement("span", ["img-responsive"], null, null, e);
						e.style.backgroundImage = 'url("' + docUrl + '")';
					} else {
						// Icon with link
						e = uiUtils.createDomElement("span", fontUtils.binaryIcon(self.cssType, "default"), null, null, e);
					}
				}
			}
		},
		_buildEditBinaryField: function(parentSlot, docUrl, empty) {
			var self = this;

			// layout structure
			var $$layout = $('\
				<div class="s-m-img-layout">\
					<header></header>\
					<section></section>\
					<footer></footer>\
				</div>');

			// building 3 components. clear button, core and upload button. All clickable.
			var clearBtn, uploadBtn, core;

			// build clear btn.
			clearBtn = uiUtils.createDomElement("a", ["ctrl-evt-click"], null, {
				"href": "#"
			}, $$layout.find("header"));
			clearBtn = uiUtils.createDomElement("span", fontUtils.getIconByName("close"), null, null, clearBtn);
			$(clearBtn).toggle(!empty);

			// build core
			core = uiUtils.createDomElement("a", ["img-responsive", "s-m-field-" + (self.isImage ? "img" : "bin"), "ctrl-evt-click"], null, {
				"href": "#"
			}, $$layout.find("section"));


			// *image* core
			if (self.isImage) {

				// build upload button only for image content
				uploadBtn = uiUtils.createDomElement("a", ["ctrl-evt-click"], locale.text("image.label." + (empty ? "addimage" : "changeimage")), {
					"href": "#"
				}, $$layout.find("footer"));

				// use default image if empty content
				core = uiUtils.createDomElement("span", [empty ? fontUtils.binaryIcon(self.cssType, "default") + " s-m-empty" : "", "img-responsive"], null, null, core);

				if (!empty) {
					core.style.backgroundImage = 'url("' + docUrl + '")';
				}

			} else {

				// *document* core
				core = uiUtils.createDomElement("span", [fontUtils.binaryIcon(self.cssType, "default"), empty ? "s-m-empty" : "", "s-m-doc"], null, null, core);
				$$layout.find("footer").css("display", "none");
			}

			parentSlot.appendChild($$layout[0]);

			// append <input> dom if image
			if (self.isImage) {
				var inputDom = uiUtils.createDomElement("input", ["ctrl-evt-change"], null, {
					"type": "file",
					"accept": "image/*"
				}, parentSlot);
			}
		},
		onClick: function(evt) {
			var self = this;

			var handlersMap = {
				"header": "_onClearClick",
				"section": "_onDocumentClick",
				"footer": "_onUploadClick",
				"a": "_onDocumentClick"
			};

			var dom = evt.target.nodeName.toLowerCase() === "span" ? evt.target.parentNode : evt.target;
			var parentDom = dom.parentNode;

			self[handlersMap[parentDom.nodeName.toLowerCase()]](evt, dom);
		},
		/*
			When clear button is clicked
			- Removes binary content
			- Hide clear button
			- Update upload button text if image
		*/
		_onClearClick: function(evt, dom) {
			var self = this;

			// get the clear btn
			var clearBtn = dom;

			// get core elmt (the anchor containing the image or the file)
			var core = self.$$elmt.find(".s-m-img-layout > section > a")[0];

			// remove image/doc
			uiUtils.empty(core);

			// update image/doc
			core = uiUtils.createDomElement("span", [fontUtils.binaryIcon(self.cssType, "default"), "s-m-empty"], null, null, core);

			// update dao
			self.setValue(null);

			// toggle clearBtn
			$(clearBtn).toggle();

			// update upload button
			if (self.isImage) {
				self.$$elmt.find(".s-m-img-layout > footer > a").text(locale.text("image.label.addimage"));
			}
		},
		/*
			When image is clicked
			- If not empty, open image
			- If empty, run upload image process

			When document is clicked
			- If empty, nothing
			- If not empty, open document
		*/
		_onDocumentClick: function(evt, dom) {
			var self = this;
			var value = self.getFormattedValue(self.getValue());
			var docUrl = self.prototype.data("$url", self.getDao) || "";
			var empty = value == null || value === "" || docUrl.length === 0;

			if (self.isImage) {
				if (empty) {
					// upload image
					self._onUploadClick(evt, dom);
				}
			}
		},
		/* 
		When upload button is clicked (or empty image), run upload and update dao
	*/
		_onUploadClick: function(evt, dom) {
			var self = this;
			var $$inputDom = self.$$elmt.find(".s-m-value > input");
			$$inputDom.trigger("click");
		},
		/*
		Runs image selection within the client device
		Updates dao
	*/
		onChange: function(evt) {
			var self = this;

			if (evt.target.nodeName.toLowerCase() === 'input') {
				var files = evt.target.files; // FileList object
				var res = {};
				if (files && files.length) {
					var f = files[0];
					if (!f.type.match('image.*')) return;
					res.$contentType = f.type;
					res.$fileName = f.name;
					res.$type = "image";

					var reader = new FileReader();
					reader.onload = (function(theFile, cont) {
						return function(e) {
							var i = e.target.result.indexOf("base64,");
							if (i > 0) cont.$value = e.target.result.substring(i + 7);
							else cont.$value = e.target.result;
							delete cont.$url;
							self.setValue(cont.$value);
							self._setImage(e.target.result);
						};
					})(f, res);
					reader.readAsDataURL(f);

				}
			}
		},
		/*
		Set image based on client image src
		*/
		_setImage: function(src) {
			var self = this;

			// get core elmt (the anchor containing the image)
			var core = self.$$elmt.find(".s-m-img-layout > section > a")[0];

			// remove image
			uiUtils.empty(core);

			// update image
			core = uiUtils.createDomElement("img", ["img-responsive"], null, {
				src: src
			}, core);
			// explicitely set width to 100% (hack necessary for firefox)
			core.style.width = "100%";

			// update upload button
			self.$$elmt.find(".s-m-img-layout > footer > a").text(locale.text("image.label.changeimage"));

			// toggle clearBtn
			self.$$elmt.find(".s-m-img-layout > header > a").toggle(true);
		}
	});

exports.Klass = _Klass;