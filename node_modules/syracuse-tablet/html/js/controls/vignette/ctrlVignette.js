"use strict";

var Base = require('syracuse-tablet/html/js/controls/ctrlSdataBase').CtrlSdataBase;

var uiRect = require('syracuse-tablet/html/js/ui/rect');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var justils = require('syracuse-tablet/html/js/helpers/jsutils');
var environment = require('syracuse-tablet/html/js/helpers/environment');
var gadget = require('syracuse-tablet/html/js/controls/vignette/gadget');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var settings = require('syracuse-tablet/html/js/app/settings');
var navigationPageStack = require('syracuse-tablet/html/js/app/navigationPageStack');
var modules = require('syracuse-tablet/html/js/common/modules');
var protoHelpers = require('syracuse-tablet/html/js/sdata/protocolHelpers');
var Hammer = require('syracuse-tablet/html/deps/hammerjs-2.0.4/hammer');
var wpHelpers = require("syracuse-tablet/html/js/sdata/wpHelpers");
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var globals = require('syracuse-tablet/html/js/app/globals');

var _templates = {
	main: '\
			<section/>\
			<footer style="display:none"/> \
			<div class="s-m-waiting bckg" style="display:none"/> \
			<div class="s-m-waiting wheel" style="display:none"/> \
		',
	vignetteError: '\
			<a draggable="false" href="#" data-nevent="" data-naction="vignetteError">{{text}}</a><span class="s-m-diagnose" style="display:none">{{detail}}</span>\
		',
	iframe: '\
			<br><iframe src="{{url}}" style="position: absolute; top: 0px; left: 0px; height: 100vh; width: 100vh;"/>\
		'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/**
 * 
 * The prototype of vignettes contains an $item node which includes all the gadgets information
 */
exports.CtrlVignette = utils.defineClass(
	function CtrlVignette(controller, article, prototype, options) {
		this.navigationPageStack = null;
		this.gadget = null;
		this.hammer = null;
		options = options || {};
		options.nativeCapabilities = {
			"liveTile": true
		};
		Base.call(this, controller, article, prototype, options);
		this.gadget = gadget.createGadget(this.prototype, options.dashboardParameters);
		if (!this.gadget) {
			// TODO: Throw breaks widget tree creation, would be better to render an "error vignette" here
			throw new Error("Cant' create vignette's gadget[" + this.id + "] - Check prototype")
		}
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this.navigationPageStack) {
				this.navigationPageStack.destroy(true);
			}
			this.navigationPageStack = null;
			if (this.gadget) {
				this.gadget.destroy();
			}
			this.gadget = null;
			if (this.hammer) {
				this.hammer.destroy();
				this.hammer = null;
			}
		},
		/**
		 */
		buildHtml: function() {
			Base.prototype.buildHtml.call(this, ["s-m-vignette"]);
			this._addDashboardParams();
			this.$$elmt.html(_getHtml("main", {}));
			this._$$content = this.$$elmt.children("section");
			this._$$footer = this.$$elmt.children("footer");
			this._$$waitBckg = this.$$elmt.children(".s-m-waiting.bckg");
			this._addPressHandler();
		},

		_addPressHandler: function() {
			if (this.hammer) {
				this.hammer.destroy();
			}
			this.hammer = new Hammer(this.$$elmt.get(0));
			this.hammer.get("press").set({
				time: 500 //Small timeout needed to stop immediately when press
			});
			this.hammer.on("press", Hammer.bindFn(this._onPress, this));
		},
		_onPress: function(evt) {
			if (globals.isAuthoringActive()) {
				// Put there because enabling authoring doesn't call buildHtml
				return;
			}
			if (this.page.isHome()) {
				notifications.publish("sm.vignette.pressed", this.id);
				return true;
			}
			var self = this;
			wpHelpers.isPinnedTile(this.$bind).then(function(pinned) {
				if (pinned) {
					modules.get("modal").info("", locale.text("pin.tile.pinned"));
					return;
				} else {
					modules.get("modal").simpleConfirmPromise({
							message: locale.text("pin.tile.add.confirm")
						})
						.then(function(result) {
							if (result.action !== "yes") return;
							var localization = self._getLocalization(self.parent.article);
							wpHelpers.addPinnedTile(self.parent.article, self.prototype, localization)
								.then(function() {
									var notify = {
										severityClass: "success",
										title: "",
										body: locale.text("pin.tile.add.ok"),
										onlyWebapp: true
									};
									modules.get("modal").notify(notify);
								});
						});
				}
			})
		},
		_getLocalization: function(article) {
			var pageLocalization = $.extend(true, {}, this.$articleLocalization);
			var localization = {};
			var titles = this._getVignetteTitles(article);
			Object.keys(pageLocalization).forEach(function(lang) {
				Object.keys(pageLocalization[lang]).forEach(function(key) {
					if (titles["{@" + key + "}"]) {
						localization[lang] = localization[lang] || {};
						localization[lang][key] = pageLocalization[lang][key];
					}
				})
			});
			return localization;
		},
		_getVignetteTitles: function(article) {
			if (!article) return article;
			var value = $.extend(true, {}, article);
			var titles = {};

			function _walk(value) {
				if (value == null || typeof value !== "object") return;
				Object.keys(value).forEach(function(key) {
					var v = value[key];
					if (key === "$title" && v != "") {
						titles[v] = v;
					} else {
						_walk(v);
					}
				});
			};
			_walk(value);
			return titles;
		},
		afterRender: function() {
			var link = this.gadget.getLink();
			if (link) {
				switch (this.gadget.getType()) {
					case "$external":
						var iFrame = _getHtml("iframe", {
							url: link.$url
						});
						$(iFrame).appendTo(this._$$content);
						break;
					case "$representation":
					case "$stats":
					case "$request":
						this.loadSDataPage(link);
						break;
				}
			} else {
				this._displayError("No Gadget link");
			}
		},
		_addDashboardParams: function() {
			var params = this.page.getGadgetParams();
			if (params) {
				this.gadget.setDashboardParams(params);
			}
		},
		loadSDataPage: function(link) {
			var self = this;
			var pageOptions = {
				// Tell the page it's loaded in a vignette
				isVignette: true,
				// page id depends on vignette context
				pagePrefsId: settings.getPagePrefsId(protoHelpers.getPageName(link.$url), this),
				makeFullHeight: true,
				// Force page's article if any
				$vignetteArticle: this.article && this.article.$article && !$.isEmptyObject(this.article.$article) ? this.article.$article : null,
				parentVignette: self,
				parentPage: self.page,
				// Set saved context stored in parent's dashboard context
				savedCtx: this.page.getSavedCtxVignette(this)
			};
			self.navigationPageStack = navigationPageStack.getStackForElmt(self._$$content);
			var loadOptions = {
				navStack: self.navigationPageStack,
				noError: true,
				$$waitParent: self.$$elmt
			}
			self.controller.openLink(link, pageOptions, loadOptions)
				.then(function(nestedPage) {
					if (self.destroyed) {
						return;
					}
					// Not stored because available in navigationPageStack
					nestedPage.notifyScrollerUpdate();
					self.page.onVignetteLoaded(self, true);
					if (environment.isAutoUITestMode()) {
						environment.getUnitTestMgr().notifPageLoaded("after", nestedPage);
					}

				})
				.fail(function(e) {
					if (self.destroyed) {
						return;
					}
					self._displayError(e);
					self.page.onVignetteLoaded(self, false);
				});
		},

		/**
		 * Call once all vignettes have been loaded
		 * Parent's size is OK -> Can computeLayout
		 */
		afterAllVignettesLoaded: function() {
			try {
				if (this.destroyed) {
					return;
				}
				this.computeLayout();
			} catch (e) {
				this._displayError(e);
			}
		},

		computeLayout: function() {
			if (this.getTopPage()) {
				// computLayout layout is called by parent dashboard once the all the vignettes has been loaded
				// In particular charts need the calculated size of the parent to render
				this.getTopPage().computeLayout();
			}
		},

		_displayError: function(e) {
			if (!this.$$elmt) {
				return;
			}
			var diag = justils.convertToDiagnoses(e);
			if (!this.$$elmt.is(".s-m-error")) {
				this.$$elmt.addClass("s-m-error");
				this.$$elmt.prepend(_getHtml("vignetteError", {
					text: locale.text("vignette.load.failed"),
					detail: JSON.stringify(diag)
				}));
			} else {
				// Append to existing diagnose
				try {
					var currentDiag = JSON.parse(this.$$elmt.find("span").text());
					currentDiag.$diagnoses = currentDiag.$diagnoses.concat(diag.$diagnoses);
					this.$$elmt.find("span").text(JSON.stringify(currentDiag))
				} catch (e) {
					return;
				}
			}
		},

		_actVignetteError: function() {
			var diag = this.$$elmt.find("span.s-m-diagnose").text();
			try {
				diag = JSON.parse(diag);
			} catch (e) {
				return;
			}
			modules.get("modal").asynchError(null, diag);
		},
		getTopPage: function() {
			return this.navigationPageStack && this.navigationPageStack.getTopPage();
		},
		getScrollViewRect: function() {
			return uiRect.elmtRect(this._$$content);
		},
		isVignette: function() {
			return true;
		}
	});