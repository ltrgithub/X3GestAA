"use strict";

var Base = require('syracuse-tablet/html/js/controls/ctrlSdataBase').CtrlSdataBase;

var utils = require('syracuse-tablet/html/js/helpers/utils');
var gadget = require('syracuse-tablet/html/js/controls/vignette/gadget');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var navigationPageStack = require('syracuse-tablet/html/js/app/navigationPageStack');

var _templates = {
	linkPage: '\
			<section>\
				<div draggable="false" href="{{href}}"\
				class="s-m-link-page" data-nevent="" data-naction="touch">\
					{{#if icon}}\
						<section class="s-m-icon">\
							<div>\
								<div class="{{icon}}"></div>\
							</div>\
						</section>\
					{{/if}}\
					<section class="s-m-title">\
						<div>{{title}}</div>\
					</section>\
				</div>\
			</section>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/**
 * 
 * The prototype of vignettes contains an $item node which includes all the gadgets information
 */
exports.CtrlVignetteLink = utils.defineClass(
	function CtrlVignetteLink(controller, article, prototype, options) {
		Base.call(this, controller, article, prototype, options);
		this.gadget = gadget.createGadget(this.prototype);
		if (!this.gadget) {
			// TODO: Throw breaks widget tree creation, would be better to render an "error link" here 
			throw new Error("Cant' create vignette's gadget[" + this.id + "] - Check prototype")
		}
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this.navigationPageStack) {
				this.navigationPageStack.destroy();
			}
			this.navigationPageStack = null;
			if (this.gadget) {
				this.gadget.destroy();
			}
			this.gadget = null;

		},
		/**
		 */
		buildHtml: function() {
			// s-m-vignette for css compatibility
			Base.prototype.buildHtml.call(this, ["s-m-vignette"]);
			this._addDashboardParams();
			switch (this.gadget.getType()) {
				case "$representation":
					this._loadRepresentation();
					break;
				case "$dashboard":
					this._loadDashboard();
					break;
				case "$application":
					this._loadApplication();
					break;
				case "$external":
					this._loadExternal();
					break;
				default:
					break;
			}
		},

		afterRender: function() {},

		_addDashboardParams: function() {
			var params = this.page.getGadgetParams();
			if (params) {
				this.gadget.setDashboardParams(params);
			}
		},
		_getTitle: function() {
			return this.article && this.getArticleText("$title", this.gadget.data("$title"));
		},

		_loadRepresentation: function() {
			this._addPicker({
				"title": this._getTitle(),
				"icon": this._getCssIcon("s-m-sage-gadget-icon")
			});
		},

		_loadDashboard: function() {
			this._addPicker({
				"title": this._getTitle(),
				"icon": this._getCssIcon("s-m-sage-gadget-icon")
			});
		},

		_loadApplication: function() {
			this._addPicker({
				"title": this._getTitle(),
				"icon": this._getCssIcon("s-m-sage-app-icon"),
			});
		},

		_loadExternal: function() {
			var url = this.gadget.getExternalUrl();
			this._addPicker({
				"title": this._getTitle()
			});
		},

		_addPicker: function(context) {
			var vignetteCtx = {};
			for (var p in context) {
				vignetteCtx[p] = context[p];
			}
			$(_getHtml("linkPage", vignetteCtx)).appendTo(this.$$elmt);
		},

		_getCssIcon: function(sageBaseCss) {
			var icon = this.article && this.article.$icon || this.gadget.data("icon")
			if (icon) {
				if (icon.smStartsWith("s-m-")) {
					// our own gadget icons
					icon = sageBaseCss + " " + icon;
				} else {
					icon = fontUtils.getIconByName(icon);
				}
			}
			return icon || "";
		},

		_actTouch: function() {
			var link = this.gadget && this.gadget.getLink();
			if (link) {
				if (this.gadget.getType() == "$external") {
					window.open(link.$url, "s-m-external-window");
				} else {
					// Navigate by asking the controller because controller will be
					// able to switch between working copy and stateless urls
					// Allow the article to pass an article to the target page (mockup)
					var opts = {
						$mockArticle: this.article.$mockArticle
					}
					this.controller.openLink(link, opts);
				}
			}
		}
	});