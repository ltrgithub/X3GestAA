"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ctrl");
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');
var reqProto = require('syracuse-tablet/html/js/helpers/prototype');
var factory = require('syracuse-tablet/html/js/application/appFactory');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');


var _defDevSz = globals.getDeviceSize();
/**
 * Returns an array of Bootstrap cols width according to nbCells/maxCols for size sz or md
 */
var _getWidths = function(gridBuidlder, nbCells, maxCols, sz, justNum) {
	var self = gridBuidlder;
	sz = sz || _defDevSz;
	var cache = "_bbWidths" + sz;
	if (self[cache]) return self[cache];
	self[cache] = [];
	nbCells = Math.max(Math.min(maxCols, nbCells), 1);
	var step = Math.round(maxCols / nbCells);
	var remain = maxCols - (nbCells * step);
	var sum = 0;
	for (var i = 0; i < nbCells; i++) {
		var nb = step;
		if (remain > 0) {
			nb++;
			remain--;
		} else if (remain < 0) {
			nb--;
			remain++;
		}
		sum += nb;
		self[cache].push(justNum === true ? nb : "col-" + sz + "-" + nb);
	}
	return self[cache];
};
/* Temporarily*/
var _excludeTypes = ["application/x-array", "application/x-password"];
/**
 * Property to display in the array
 */
var _getPropsToDisplay = function(gridBuilder) {
	var props = gridBuilder.grid.itemProto.data("$properties");
	var keys = Object.keys(props);
	var res = [];
	keys.forEach(function(key) {
		var descr = props[key];
		if (_excludeTypes.indexOf(descr.$type) === -1 && !descr.$isExcluded) {
			res.push(key);
		}
	});
	res.sort();
	return res;
};
/**
 * Displays a grid by generating an article for title and content row
 * 	Just for test because it's not well adapted for girs mode
 */
var _GridArticleBuilder = utils.defineClass(
	function(gridCtrl) {
		var self = this;
		self.grid = gridCtrl;
		self.maxCols = 12;
	}, null, {
		buildHtml: function(html, controllerDao, buildOptions) {
			var self = this;
			self.buildHtmlBefore(html, controllerDao, buildOptions);
			self.buildTtlHtml(html, controllerDao, buildOptions);
			self.buildContentHtml(html, controllerDao, buildOptions, buildOptions);
			self.buildHtmlAfter(html, controllerDao, buildOptions);
		},
		buildHtmlBefore: function(html, controllerDao, buildOptions) {
			var self = this;
			html.push('<div class="');
			html.push(self.grid.displayOptions.cssDefCtrl.join(' '));
			html.push('" id="');
			html.push(self.grid.id);
			html.push('">');
		},
		buildHtmlAfter: function(html, controllerDao, buildOptions) {
			var self = this;
			html.push('</div>');
		},
		buildTtlHtml: function(html, controllerDao, buildOptions) {
			var self = this;
			if (!self._titleHtml) {
				/* Create article */
				var info = self._getTtlInfos();
				/* Create the control structure from article */
				var root = articleParser.article2Controls(self.grid.controller, info.article, info.proto);
				self._titleHtml = [];
				/* Generate Html */
				root.buildHtml(self._titleHtml, info.data, buildOptions);
				self._titleHtml = self._titleHtml.join('');
			}
			/* Add article html to parent html array */
			html.push(self._titleHtml);
		},
		buildContentHtml: function(html, controllerDao, buildOptions) {
			var self = this;
			if (!self._contentHtml) {
				var rows = self.grid.getRows(controllerDao);
				self._contentHtml = [];
				/* For each row calculates the control structure and build html 
				 * I tried by using only one control structure but we it doesn't work fine (ids..)
				 * TODO - create a generic tree structure for arrays
				 * */
				rows.forEach(function(rowDao, idx) {
					/* Add row index value */
					rowDao.setRowIndex(idx + 1);
					/* Create article */
					var article = self._getRowArticle(rowDao);
					/* Create the control structure from article */
					var root = articleParser.article2Controls(self.grid.controller, article, self.grid.itemProto);
					/* Generate Html */
					root.buildHtml(self._contentHtml, rowDao, buildOptions);
				});
				/* Add article html to parent html array */
				self._contentHtml = self._contentHtml.join('');
			}
			html.push(self._contentHtml);
		},
		/* Calculate prototype/dataset/article for title */
		_getTtlInfos: function() {
			var self = this;
			var res = {
				proto: {},
				data: {},
				article: {
					$layoutType: "row",
					displayOptions: {
						cssLayout: ["s-m-array-ttl-row"],
						cssCell: ["s-m-array-ttl-cell"]
					},
					$items: []
				}
			};
			var keys = _getPropsToDisplay(self);
			var nbCols = 0,
				key;
			for (var colIdx = 0; colIdx < keys.length; colIdx++) {
				if (nbCols < self.maxCols) {
					key = keys[colIdx];
					nbCols++;
					res.proto[key] = {
						"$type": "application/x-string"
					};
					res.article.$items.push({
						"$bind": key,
						"$isTitleHidden": true
					});
					res.data[key] = self.grid.itemProto.property(key, "$title") || self.grid.itemProto.property(key, "$subtitle") || key;
				}
			};
			res.proto = reqProto.create({
				$properties: res.proto
			});
			res.data = factory.createDaoSdata("representation", res.data, res.proto);
			res.article["$width" + _defDevSz] = _getWidths(self, nbCols, self.maxCols, _defDevSz, true).join(",");
			return res;
		},
		/* Calculate article for rows */
		_getRowArticle: function(rowDao) {
			var self = this;
			var article = {
				$layoutType: "row",
				displayOptions: {
					cssLayout: ["s-m-array-content-row"],
					cssCell: ["s-m-array-content-cell"]
				}
			};
			article.$items = [];
			var keys = _getPropsToDisplay(self);
			var nbCols = 0,
				key;
			for (var colIdx = 0; colIdx < keys.length; colIdx++) {
				if (nbCols < self.maxCols) {
					key = keys[colIdx];
					nbCols++;
					var fieldDescr = {
						"$bind": key,
						"$isTitleHidden": true,
						displayOptions: {}
					};
					if (key === reqProto.rowIdxProperty) {
						var detLnk = self.grid.itemProto.data("$links");
						if (detLnk && detLnk.$details) {
							// Add info to generate <a> html tag
							fieldDescr.displayOptions.link = uiUtils.getLinkInfo(detLnk.$details.$url, rowDao);
						}
					}
					article.$items.push(fieldDescr);
				}
			};
			article["$width" + _defDevSz] = _getWidths(self, nbCols, self.maxCols, _defDevSz, true).join(",");
			return article;
		}
	});
/**
 * Displays a grid by generating an article for title and content row
 */
var _GridHtmlBuilder = utils.defineClass(
	function(gridCtrl) {
		var self = this;
		self.grid = gridCtrl;
		self.maxCols = 12;
	}, null, {
		buildHtml: function(html, controllerDao) {
			var self = this;
			self.buildHtmlBefore(html, controllerDao);
			self.buildTtlHtml(html, controllerDao);
			self.buildContentHtml(html, controllerDao);
			self.buildHtmlAfter(html, controllerDao);
		},
		buildHtmlBefore: function(html, controllerDao) {
			var self = this;
			html.push('<div class="s-m-control s-m-array-ctrl" id="');
			html.push(self.grid.id);
			html.push('">');
			html.push('<div class="s-m-layout">');
		},
		buildHtmlAfter: function(html, controllerDao) {
			var self = this;
			html.push('</div></div>');
		},
		buildTtlHtml: function(html, controllerDao) {
			var self = this;
			html.push('<div class="row s-m-array-ttl-row" id="');
			html.push(self.grid.id + "ttl");
			html.push('">');
			var keys = _getPropsToDisplay(self);
			var widths = _getWidths(self, keys.length + 1, self.maxCols),
				key, width;
			for (var idx = 0; idx <= keys.length; idx++) {
				key = idx === 0 ? "Rank" : keys[idx - 1];
				width = idx === 0 ? "col-" + _defDevSz + "-1" : widths[idx - 1];
				if (idx < self.maxCols) {
					html.push('<div class="');
					html.push(width);
					html.push(' s-m-array-ttl-cell">');
					var p = self.grid.itemProto.property(key, "$title") || self.grid.itemProto.property(key, "$subtitle") || key;
					html.push(p);
					html.push('</div>');
				}
			};
			html.push('</div>');
		},
		buildContentHtml: function(html, controllerDao) {
			var self = this;
			var keys = _getPropsToDisplay(self);
			var widths = _getWidths(self, keys.length + 1, self.maxCols);
			var rows = self.grid.getRows(controllerDao),
				val, width, detLink;
			rows.forEach(function(rowDao, idxRow) {
				html.push('<div class="row s-m-array-content-row" id="');
				html.push(self.grid.id + "r-" + idxRow);
				html.push('">');
				for (var idxCell = 0; idxCell <= keys.length; idxCell++) {
					val = idxCell === 0 ? (idxRow + 1) + "" : rowDao.getDisplayValue([keys[idxCell - 1]]);
					width = idxCell === 0 ? "col-" + _defDevSz + "-1" : widths[idxCell - 1];
					if (idxCell < self.maxCols) {
						detLink = false;
						if (idxCell === 0) {
							// add the link to detail
							var detLnk = self.grid.itemProto.data("$links");
							if (detLnk && detLnk.$details) {
								html.push('<a href="#" ');
								html.push(uiUtils.getLinkAttrs(detLnk.$details.$url, rowDao));
								html.push('>');
								detLink = true;
							}
						}
						html.push('<div class="');
						html.push(width);
						html.push(' s-m-array-content-cell">');
						html.push(val.length === 0 ? "&nbsp" : val);
						html.push('</div>');
						if (detLink) {
							html.push('</a>');
						}
					}
				};
				html.push('</div>');
			});
		}
	});

exports.GridArticleBuilder = _GridArticleBuilder;
exports.GridHtmlBuilder = _GridHtmlBuilder;