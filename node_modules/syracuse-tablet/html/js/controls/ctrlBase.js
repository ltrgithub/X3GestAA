"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/structElmt').Klass;
/**
 * Used to generate the html of control Icon/Button
 * generate a link and call cb to get the content of the control (icon/button...)
 * cb	Add html text to html param
 */
var _genHtmlCtrlLink = function(proto, dao, options, cb) {
	var self = this;
	options = options || {};
	var html = [];
	var url = proto.data("$url");
	var tag = options.tag || 'a';
	var css = options.css || 'a';
	if (url && url.length) {
		html.push('<');
		html.push(tag);
		html.push(' href="' + url + '"');
		if (css) {
			html.push(' class="' + css + '"');
		}
		html.push('>');
	} else {
		// attributes for data-nav or data-action
		var action = proto.data("$action") || self.prototype.data("$navigation");
		if (action) {
			html.push('<');
			html.push(tag);
			html.push(' href="#"');
			for (var p in action) {
				html.push(' ' + p + '="' + encodeURIComponent(dao ? dao.parseExpression(action[p]) : action[p]) + '"');
			}
			if (css) {
				html.push(' class="' + css + '"');
			}
			html.push('>');
		}
	}
	if (cb) cb(html);
	if (html.length > 1) {
		html.push('</');
		html.push(tag);
		html.push('>');
	}
	return html.join('');
};

var _Klass = utils.defineClass(

	function CtrlBase(controller, article, prototype, options) {
		var self = this;
		options = options || {};
		self.prototype = prototype;
		self.$bind = article.$bind;
		Base.call(self, controller, prototype.data('$type'), article, options);
		self.$isEditMode = controller.isEditMode();
		if (options.displayCtx === "table") {
			self.$isEditMode = false;
		}
	}, Base, {
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			if (self.prototype) {
				// We destroy the proto
				self.prototype.destroy();
				self.prototype = null;
			}
		},
		createId: function(typeName) {
			// Add $bind in id for readability - Id can be minimized in non debug version
			return utils.readableuid(this.$bind, typeName.substr(0, 3));
		},
		/**
		 * Controls manage by the page (outside the tree structure given by article)
		 * footer/header...
		 */
		isPageControl: function() {
			return this.$type.smStartsWith("tablet/x-page-");
		},
		/**
		 * controllerDao is the page dao or the row data for a grid
		 * 	We need to store it to keep acces
		 */
		buildHtml: function($$parent, controllerDao, buildOptions, classes) {
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions);
			var css = ["s-m-control"];
			var $theme = this.getAuthoring("$theme");
			if ($theme && $theme !== "none") {
				css.push("s-m-theme-" + $theme);
			}
			if (classes) css.push(classes.join(' '));
			this.createRootElement(css, $$parent);
			this._oldValue = this.getValue();
		},
		afterRender: function(buildOpts) {
			// Apply meta after build html - !! Called aftrt buildHtml if isHtmlGenerator = true
			this.applyMetaData(this.getMetaData());
		},
		/**
		 * Refreshes the control
		 * We have to apply meta-data
		 */
		refresh: function(controllerDao, options) {
			if (options && options.refreshValue) {
				// Used by simple controllers - To improve with meta-data management imrpovement
				var newValue = this.getValue();
				if (!utils.areEqual(newValue, this._oldValue)) {
					// Enabled only wit simple controller
					this.refreshValue(newValue);
					this._oldValue = newValue;
				}
			}
			this.applyMetaData(this.getMetaData());
		},
		refreshValue: function(value) {

		},
		/**
		 * dao.getMetaData does the merge between prototype and data
		 * metaProp		optional - name of the meta $readonly...
		 * 				if null returns all the meta
		 */
		getMetaData: function(metaProp) {
			var dao = this.getDao();
			var meta = dao ? dao.getMetaData("$properties", this.$bind) : null;
			if (metaProp) return meta ? meta[metaProp] : null;
			return meta;
		},
		getTitle: function() {
			return (this.article && this.article.$title) || this.prototype.data("$title") || this.prototype.getPropTitle(this.$bind);
		},
		/**
		 * Applies meta-data
		 * In edit mode the dom element to which meta-data apply is identify by s-m-meta class
		 * In detail mode meta-data apply to fieldSlot
		 */
		applyMetaData: function(metaData) {
			var self = this;
			if (metaData == null) return;
			if (self.$isEditMode) {
				// default
				var e = self.$$elmt.find(".s-m-meta");
				if (e.length > 0) {
					// Apply $isDisabled and $isReadOnly
					// is("input") returns true for button tags -> we check the BS class .btn
					if (e.is("input") && !e.is(".btn")) {
						// only for input tags
						e[metaData.$isReadOnly === true ? "attr" : "removeAttr"]("readonly", "");
						e[metaData.$isDisabled === true ? "attr" : "removeAttr"]("disabled", "");
					} else {
						// other tags
						e[metaData.$isReadOnly === true || metaData.$isDisabled === true ? "attr" : "removeAttr"]("disabled", "");
					}
				}
			}
			// We can for a control to be hidden by authoring - see _getChartDetailArticle - ctrlCubeChart
			if (this.article.$isHidden != null || metaData.$isHidden != null) {
				var hidden = this.article.$isHidden === true || metaData.$isHidden === true;
				if (hidden) {
					self.$$elmt.addClass('s-m-hidden');
				} else {
					self.$$elmt.removeClass('s-m-hidden');
				}
			}
		},
		getValue: function() {
			var dao = this.getDao();
			return dao ? dao.getValue(this.$bind) : null;
		},
		/**
		 * Change internal value (non UI only)
		 * value parameter must be a correct datatype value without UI specific formatting
		 */
		setValue: function(value) {
			this.getDao().setValue(this.$bind, value);
		},
		/**
		 *  Validate the value and display error if any
		 *  returns true if OK
		 *  Used to validate a form
		 */
		checkData: function() {
			// Only field controls check the value
			return true;
		},
		setErrorStatus: function(yes) {
			if (!this.$$elmt) return;
			this.$$elmt[yes === true ? "addClass" : "removeClass"]("error");
		},
		/**
		 * True if ctrl has an error
		 */
		hasError: function() {
			return this.$$elmt && this.$$elmt.hasClass("error");
		},
		/**
		 * Set the focus on this field and scroll
		 */
		setFocus: function() {
			if (!this.controller) return;
			// Just make ctrl visible
			this.controller.makeVisible(this);
			// Focus is set on CtrlFields with inputs fields for the moment
		},
		isControl: function() {
			return true;
		}
	}
);

exports.genHtmlCtrlLink = _genHtmlCtrlLink;
exports.Klass = _Klass;