"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ctrl");
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');
var reqProto = require('syracuse-tablet/html/js/helpers/prototype');
var factory = require('syracuse-tablet/html/js/application/appFactory');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');

/**
 * BASE control class fr arrays
 * 	Currently we split array in StdArray, lookupArray, queryArray
 */

var _rowIdxProperty = "$ROWIDX";
var _defTtlArticle = {
	$layoutType: "row",
	displayOptions: {
		cssLayout: ["s-m-array-ttl-row"],
		cssCell: ["s-m-array-ttl-cell"]
	}
};
var _defRowArticle = {
	$layoutType: "row",
	displayOptions: {
		cssLayout: ["s-m-array-content-row"],
		cssCell: ["s-m-array-content-cell"]
	}
};
var _defDevSz = globals.getDeviceSize();

/**
 * Returns an array of Bootstrap cols width according to nbCells/maxCols for size sz or md
 */
var _getWidths = function(gridBuidlder, nbCells, maxCols, sz, justNum) {
	var self = gridBuidlder;
	sz = sz || _defDevSz;
	var cache = "_bbWidths" + sz;
	if (self[cache]) return self[cache];
	self[cache] = [];
	nbCells = Math.max(Math.min(maxCols, nbCells), 1);
	var step = Math.round(maxCols / nbCells);
	var remain = maxCols - (nbCells * step);
	var sum = 0;
	for (var i = 0; i < nbCells; i++) {
		var nb = step;
		if (remain > 0) {
			nb++;
			remain--;
		} else if (remain < 0) {
			nb--;
			remain++;
		}
		sum += nb;
		self[cache].push(justNum === true ? nb : "col-" + sz + "-" + nb);
	}
	return self[cache];
};
/**
 * Displays a grid by generating an article for title and content row
 */
var _GridArticleBuilder = utils.defineClass(
	function(gridCtrl) {
		var self = this;
		self.grid = gridCtrl;
		self.maxCols = 12;
	}, null, {
		buildHtml: function(html, controllerDao, buildOptions) {
			var self = this;
			self.buildHtmlBefore(html, controllerDao, buildOptions);
			self.buildTtlHtml(html, controllerDao, buildOptions);
			self.buildContentHtml(html, controllerDao, buildOptions, buildOptions);
			self.buildHtmlAfter(html, controllerDao, buildOptions);
		},
		buildHtmlBefore: function(html, controllerDao, buildOptions) {
			var self = this;
			html.push('<div class="');
			html.push(self.grid.displayOptions.cssDefCtrl.join(' '));
			html.push('" id="');
			html.push(self.grid.id);
			html.push('">');
		},
		buildHtmlAfter: function(html, controllerDao, buildOptions) {
			var self = this;
			html.push('</div>');
		},
		buildTtlHtml: function(html, controllerDao, buildOptions) {
			var self = this;
			if (!self._titleHtml) {
				var info = self._getColsInfoTtl();
				var article = $.extend({}, _defTtlArticle);
				article["$width" + _defDevSz] = info.widths;
				article.$items = info.items;
				var root = articleParser.article2Controls(self.grid.controller, article, info.proto);
				self._titleHtml = [];
				root.buildHtml(self._titleHtml, info.data, buildOptions);
				self._titleHtml = self._titleHtml.join('');
			}
			html.push(self._titleHtml);
		},
		buildContentHtml: function(html, controllerDao, buildOptions) {
			var self = this;
			if (!self._contentHtml) {
				var rows = self.grid.getRows(controllerDao);
				self._contentHtml = [];
				rows.forEach(function(rowDao, idx) {
					rowDao.setValue(_rowIdxProperty, idx + 1);
					var article = $.extend({}, _defRowArticle);
					var info = self._getColsInfoRow(rowDao);
					article["$width" + _defDevSz] = info.widths;
					article.$items = info.items;
					var root = articleParser.article2Controls(self.grid.controller, article, self.grid.itemProto);
					root.buildHtml(self._contentHtml, rowDao, buildOptions);
				});
				self._contentHtml = self._contentHtml.join('');
			}
			html.push(self._contentHtml);
		},
		_getColsInfoTtl: function() {
			var self = this;
			var res = {
				proto: {},
				data: {},
				items: []
			};
			var props = self.grid.itemProto.data("$properties");
			var keys = Object.keys(props);
			var nbCols = 0,
				key;
			for (var colIdx = -1; colIdx < keys.length; colIdx++) {
				key = colIdx === -1 ? _rowIdxProperty : keys[colIdx];
				if (nbCols < self.maxCols) {
					nbCols++;
					res.proto[key] = {
						"$type": "application/x-string"
					};
					res.items.push({
						"$bind": key
					});
					res.data[key] = colIdx === -1 ? "Idx" : self.grid.itemProto.property(key, "$title") || self.grid.itemProto.property(key, "$subtitle") || key;
				}
			};
			res.proto = reqProto.create({
				$properties: res.proto
			});
			res.data = factory.createDaoSdata("representation", res.data, res.proto);
			res.widths = _getWidths(self, nbCols, self.maxCols, _defDevSz, true).join(",");
			return res;
		},
		_getColsInfoRow: function(rowDao) {
			var self = this;
			var res = {
				items: []
			};
			var props = self.grid.itemProto.data("$properties");
			var keys = Object.keys(props);
			var nbCols = 0,
				key;
			for (var colIdx = -1; colIdx < keys.length; colIdx++) {
				key = colIdx === -1 ? _rowIdxProperty : keys[colIdx];
				if (nbCols < self.maxCols) {
					nbCols++;
					var fieldDescr = {
						"$bind": key
					};
					if (colIdx === -1) {
						var detLnk = self.grid.itemProto.data("$links");
						if (detLnk && detLnk.$details) {
							var dataUrl = rowDao.parseExpression(detLnk.$details.$url);
							var url = sdataUtils.parseSDataURL(dataUrl);
							if (url.query.representation) {
								fieldDescr.displayOptions = {
									link: 'data-nav="' + url.query.representation + '" data-sdata-url="' + encodeURIComponent(dataUrl) + '"'
								};
							}
						}
					}
					res.items.push(fieldDescr);
				}
			};
			res.widths = _getWidths(self, nbCols, self.maxCols, _defDevSz, true).join(",");
			return res;
		}
	});
/**
 * Displays a grid by generating an article for title and content row
 */
var _GridHtmlBuilder = utils.defineClass(
	function(gridCtrl) {
		var self = this;
		self.grid = gridCtrl;
		self.maxCols = 12;
	}, null, {
		buildHtml: function(html, controllerDao) {
			var self = this;
			self.buildHtmlBefore(html, controllerDao);
			self.buildTtlHtml(html, controllerDao);
			self.buildContentHtml(html, controllerDao);
			self.buildHtmlAfter(html, controllerDao);
		},
		buildHtmlBefore: function(html, controllerDao) {
			var self = this;
			html.push('<div class="s-m-array-ctrl" id="');
			html.push(self.grid.id);
			html.push('">');
		},
		buildHtmlAfter: function(html, controllerDao) {
			var self = this;
			html.push('</div>');
		},
		buildTtlHtml: function(html, controllerDao) {
			var self = this;
			html.push('<div class="row s-m-array-ttl-row" id="');
			html.push(self.grid.id + "ttl");
			html.push('">');
			var props = self.grid.itemProto.data("$properties");
			var keys = Object.keys(props);
			var widths = _getWidths(self, keys.length, self.maxCols),
				key, width;
			for (var idx = 0; idx <= keys.length; idx++) {
				key = idx === 0 ? "idx" : keys[idx];
				width = idx === 0 ? "col-" + _defDevSz + "-1" : widths[idx - 1];
				if (idx < self.maxCols) {
					html.push('<div class="');
					html.push(width);
					html.push(' s-m-array-ttl-cell">');
					var p = self.grid.itemProto.property(key, "$title") || self.grid.itemProto.property(key, "$subtitle") || key;
					html.push(p);
					html.push('</div>');
				}
			};
			html.push('</div>');
		},
		buildContentHtml: function(html, controllerDao) {
			var self = this;
			var props = self.grid.itemProto.data("$properties");
			var keys = Object.keys(props);
			var widths = _getWidths(self, keys.length, self.maxCols);
			var rows = self.grid.getRows(controllerDao),
				val, width;
			rows.forEach(function(row, idxRow) {
				html.push('<div class="row s-m-array-content-row" id="');
				html.push(self.grid.id + "r-" + idxRow);
				html.push('">');
				for (var idxCell = 0; idxCell <= keys.length; idxCell++) {
					val = idxCell === 0 ? (idxRow + 1) + "" : row.getDisplayValue([keys[idxCell]]);
					width = idxCell === 0 ? "col-" + _defDevSz + "-1" : widths[idxCell - 1];
					if (idxCell < self.maxCols) {
						html.push('<div class="');
						html.push(width);
						html.push(' s-m-array-content-cell">');
						html.push(val.length === 0 ? "&nbsp" : val);
						html.push('</div>');
					}
				};
				html.push('</div>');
			});
		}
	});
/**
 * x-array control class
 */
var _Klass = utils.defineClass(
	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
		self.itemProto = prototype.getPrototype("$item");
		/* Temporarily - Add row index to be abme to display it and put the link to detail*/
		self.itemProto.addProperty(_rowIdxProperty, {
			"$type": "application/x-integer",
			"$isReadOnly": true,
			"$title": "Idx"
		});
		self.dipsplay = "grid-article"; //"grid-html";
	}, Base, {
		/**
		 * Build Html by using a builder class
		 */
		buildHtml: function(html, controllerDao, buildOptions) {
			var self = this;
			if (!self.gridBuilder) {
				if (self.dipsplay === "grid-article") {
					self.gridBuilder = new _GridArticleBuilder(self);
				} else if (self.dipsplay === "grid-html") {
					self.gridBuilder = new _GridHtmlBuilder(self);
				} else {
					throw new Error("not implemented[" + self.dipsplay + "]");
				}
			}
			self.gridBuilder.buildHtml(html, controllerDao, buildOptions);
		},
		/**
		 * Returns an array that contains rows data
		 * Each row data is a dao - see DaoSdata.getQueryData
		 */
		getRows: function(controllerDao) {
			var self = this;
			var d = self._getData(controllerDao);
			return d && d.$resources ? d.$resources : [];
		},
		_getData: function(controllerDao) {
			var self = this;
			if (self._data) return self._data;
			self._data = controllerDao.getArrayData(self.article.$bind, self.itemProto);
			return self._data;
		}
	});

exports.Klass = _Klass;