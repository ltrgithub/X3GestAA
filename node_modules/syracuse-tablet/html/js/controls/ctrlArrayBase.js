"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ctrl");
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;

/**
 * BASE control class fr arrays
 * 	Currently we split array in StdArray, lookupArray, queryArray
 */

var _defTtlArticle = {
	$layoutType: "row",
	$css: ["s-m-grid-ttl-row"],
	$items: {

	}

};
var __defRowArticle = {
	$css: ["s-m-grid-content-row"],

};

var _maxCols = 11;
var _GridBuilder = utils.defineClass(
	function(gridCtrl) {
		var self = this;
		self.grid = gridCtrl;
		self._bbWidths = null;
	}, null, {

		buildTtlArticle: function() {
			if (!self._ttlArticle) {
				var art = self._ttlArticle = $.extend({}, _defTtlArticle);
				art.$items.push();
			}
			return self._ttlArticle;
		},
		buildContentArticle: function() {
			if (!self._contentArticle) {
				var art = self._contentArticle = $.extend({}, __defRowArticle);
				art.$items.push();
			}
			return self._contentArticle;
		},
		buildHtmtArticle: function(html) {
			var self = this;
			if (!self._ttlArticle) self._ttlArticle = self.buildTtlArticle();
			if (!self._contentArticle) self._ttlArticle = self.buildContentArticle();

		},
		buildHtml: function(html) {
			var self = this;
			if (false && self.grid.controller.state.name === "AQMDEVICEM.$query") {

			} else {
				self.buildHtmlBefore(html);
				self.buildHtmlTitles(html);
				self.buildHtmlRows(html);
				self.buildHtmlAfter(html);
			}
			return html;
		},

		buildHtmlBefore: function(html) {
			var self = this;
			html.push('<div class="container s-m-grid-layout" id="');
			html.push(self.grid.id);
			html.push('">');
		},

		buildHtmlAfter: function(html) {
			var self = this;
			html.push('</div>');
		},

		buildHtmlTitles: function(html) {
			var self = this;
			html.push('<div class="row s-m-grid-ttl-row" id="');
			html.push(self.grid.id + "ttl");
			html.push('">');
			var props = self.grid.itemProto.data("$properties");
			var keys = Object.keys(props);
			var widths = self.getWidths(keys.length),
				key, width;
			for (var idx = 0; idx <= keys.length; idx++) {
				key = idx === 0 ? "idx" : keys[idx];
				width = idx === 0 ? "col-md-1" : widths[idx - 1];
				if (idx < _maxCols) {
					html.push('<div class="');
					html.push(width);
					html.push(' s-m-grid-ttl-cell">');
					var p = self.grid.itemProto.property(key, "$title") || self.grid.itemProto.property(key, "$subtitle") || key;
					html.push(p);
					html.push('</div>');
				}
			};
			html.push('</div>');
		},

		buildHtmlRows: function(html) {
			var self = this;
			var props = self.grid.itemProto.data("$properties");
			var keys = Object.keys(props);
			var widths = self.getWidths(keys.length);
			var rows = self.grid.getRows() || [],
				val, width;
			rows.forEach(function(row, idxRow) {
				html.push('<div class="row s-m-grid-content-row" id="');
				html.push(self.grid.id + "r-" + idxRow);
				html.push('">');
				for (var idxCell = 0; idxCell <= keys.length; idxCell++) {
					val = idxCell === 0 ? (idxRow + 1) + "" : row.getDisplayValue([keys[idxCell]]);
					width = idxCell === 0 ? "col-md-1" : widths[idxCell - 1];
					if (idxCell < _maxCols) {
						html.push('<div class="');
						html.push(width);
						html.push(' s-m-grid-content-cell">');
						html.push(val.length === 0 ? "&nbsp" : val);
						html.push('</div>');
					}
				};
				html.push('</div>');
			});
		},

		getWidths: function(nbCells, sz, test) {
			var self = this;
			if (self._bbWidths) return self._bbWidths;
			self._bbWidths = [];
			nbCells = Math.max(Math.min(_maxCols, nbCells), 1);
			var step = Math.round(_maxCols / nbCells);
			var remain = _maxCols - (nbCells * step);
			var sum = 0;
			for (var i = 0; i < nbCells; i++) {
				var nb = step;
				if (remain > 0) {
					nb++;
					remain--;
				} else if (remain < 0) {
					nb--;
					remain++;
				}
				sum += nb;
				self._bbWidths.push("col-" + (sz || "md") + "-" + nb);
			}
			if (test === true) console.log("sum " + sum);
			return self._bbWidths;
		}
	});
/**
 * x-array control class
 */
var _Klass = utils.defineClass(
	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
		self.itemProto = prototype.getPrototype("$item");
		self.dipsplay = "grid";
	}, Base, {

		buildHtml: function(html, data) {
			var self = this;
			if (self.dipsplay === "grid") {
				if (!self.gridBuilder) self.gridBuilder = new _GridBuilder(self);
				self.gridBuilder.buildHtml(html);
			} else {
				throw new Error("not implemented");
			}
		},

		getRows: function() {
			return [];
		}
	});

exports.Klass = _Klass;