"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ctrl");
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');


var _getWidths = function(nbCells, sz, test) {
	var res = [];
	nbCells = Math.max(Math.min(12, nbCells), 1);
	var step = Math.round(12 / nbCells);
	var remain = 12 - (nbCells * step);
	var sum = 0;
	for (var i = 0; i < nbCells; i++) {
		var nb = step;
		if (remain > 0) {
			nb++;
			remain--;
		} else if (remain < 0) {
			nb--;
			remain++;
		}
		sum += nb;
		res.push("col-" + (sz || "md") + "-" + nb);
	}
	if (test === true) console.log("sum " + sum);
	return res;
};

var _testGetWidths = function() {
	console.log(_getWidths(12));
	console.log(_getWidths(11));
	console.log(_getWidths(10));
	console.log(_getWidths(9));
	console.log(_getWidths(8));
	console.log(_getWidths(7));
	console.log(_getWidths(6));
	console.log(_getWidths(5));
	console.log(_getWidths(4));
	console.log(_getWidths(3));
	console.log(_getWidths(2));
	console.log(_getWidths(1));
};

var _Klass = utils.defineClass(
	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
		self.itemProto = prototype.getPrototype("$item");
		self.widths = null;
	}, Base, {

		buildHtml: function(html) {
			var self = this;
			self.buildHtmlBefore(html);
			self.buildHtmlTitles(html);
			self.buildHtmlRows(html);
			self.buildHtmlAfter(html);
			return html;
		},

		buildHtmlBefore: function(html) {
			var self = this;
			html.push('<div class="container s-m-grid-layout" id="');
			html.push(self.id);
			html.push('">');
		},

		buildHtmlAfter: function(html) {
			var self = this;
			html.push('</div>');
		},

		buildHtmlTitles: function(html) {
			var self = this;
			html.push('<div class="row s-m-grid-ttl-row" id="');
			html.push(self.id + "ttl");
			html.push('">');
			var props = self.itemProto.data("$properties");
			var keys = Object.keys(props);
			if (!self.widths) {
				self.widths = _getWidths(keys.length);
			}
			keys.forEach(function(key, idx) {
				if (idx < 12) {
					html.push('<div class="');
					html.push(self.widths[idx]);
					html.push(' s-m-grid-ttl-cell">');
					var p = self.itemProto.property(key, "$title") || self.itemProto.property(key, "$subtitle") || key;
					html.push(p);
					html.push('</div>');
				}
			});
			html.push('</div>');
		},

		buildHtmlRows: function(html) {
			var self = this;
			var props = self.itemProto.data("$properties");
			var keys = Object.keys(props);
			if (!self.widths) {
				self.widths = _getWidths(keys.length);
			}
			for (var idxRow = 0; idxRow < 10; idxRow++) {
				html.push('<div class="row s-m-grid-content-rowid="');
				html.push(self.id + "r-" + idxRow);
				html.push('">');
				keys.forEach(function(key, idxCell) {
					if (idxCell < 12) {
						html.push('<div class="');
						html.push(self.widths[idxCell]);
						html.push(' s-m-grid-content-cell">');
						html.push(idxRow + "-" + idxCell);
						html.push('</div>');
					}
				});
				html.push('</div>');
			}
		}
	});

exports.Klass = _Klass;