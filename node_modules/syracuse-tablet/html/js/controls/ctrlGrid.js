"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ctrl");
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;

/**
 * Build a grid
 */
var _GridBuilder = utils.defineClass(
	function(gridCtrl) {
		var self = this;
		self.grid = gridCtrl;
		self._bbWidths = null;
	}, null, {

		buildHtml: function(html) {
			var self = this;
			self.buildHtmlBefore(html);
			self.buildHtmlTitles(html);
			self.buildHtmlRows(html);
			self.buildHtmlAfter(html);
			return html;
		},

		buildHtmlBefore: function(html) {
			var self = this;
			html.push('<div class="container s-m-grid-layout" id="');
			html.push(self.grid.id);
			html.push('">');
		},

		buildHtmlAfter: function(html) {
			var self = this;
			html.push('</div>');
		},

		buildHtmlTitles: function(html) {
			var self = this;
			html.push('<div class="row s-m-grid-ttl-row" id="');
			html.push(self.grid.id + "ttl");
			html.push('">');
			var props = self.grid.itemProto.data("$properties");
			var keys = Object.keys(props);
			var widths = self.getWidths(keys.length);
			keys.forEach(function(key, idx) {
				if (idx < 12) {
					html.push('<div class="');
					html.push(widths[idx]);
					html.push(' s-m-grid-ttl-cell">');
					var p = self.grid.itemProto.property(key, "$title") || self.grid.itemProto.property(key, "$subtitle") || key;
					html.push(p);
					html.push('</div>');
				}
			});
			html.push('</div>');
		},

		buildHtmlRows: function(html) {
			var self = this;
			var props = self.grid.itemProto.data("$properties");
			var keys = Object.keys(props);
			var widths = self.getWidths(keys.length);
			for (var idxRow = 0; idxRow < 10; idxRow++) {
				html.push('<div class="row s-m-grid-content-rowid="');
				html.push(self.grid.id + "r-" + idxRow);
				html.push('">');
				keys.forEach(function(key, idxCell) {
					if (idxCell < 12) {
						html.push('<div class="');
						html.push(widths[idxCell]);
						html.push(' s-m-grid-content-cell">');
						html.push(idxRow + "-" + idxCell);
						html.push('</div>');
					}
				});
				html.push('</div>');
			}
		},

		getWidths: function(nbCells, sz, test) {
			var self = this;
			if (self._bbWidths) return self._bbWidths;
			self._bbWidths = [];
			nbCells = Math.max(Math.min(12, nbCells), 1);
			var step = Math.round(12 / nbCells);
			var remain = 12 - (nbCells * step);
			var sum = 0;
			for (var i = 0; i < nbCells; i++) {
				var nb = step;
				if (remain > 0) {
					nb++;
					remain--;
				} else if (remain < 0) {
					nb--;
					remain++;
				}
				sum += nb;
				self._bbWidths.push("col-" + (sz || "md") + "-" + nb);
			}
			if (test === true) console.log("sum " + sum);
			return self._bbWidths;
		}
	});
/**
 * x-array control class
 */
var _Klass = utils.defineClass(
	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
		self.itemProto = prototype.getPrototype("$item");
		self.dipsplay = "grid";
	}, Base, {

		buildHtml: function(html) {
			var self = this;
			if (self.dipsplay === "grid") {
				if (!self.gridBuilder) self.gridBuilder = new _GridBuilder(self);
				self.gridBuilder.buildHtml(html);
			} else {
				throw new Error("not implemented");
			}
		}
	});

exports.Klass = _Klass;