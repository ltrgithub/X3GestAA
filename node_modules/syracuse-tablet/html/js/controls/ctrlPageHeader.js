"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var brandNameLabel = "Sage ERP X3 - Mobile";
var logoutLabel = "Logout";

/**
 * Page header Generate Html
 */
var _Klass = utils.defineClass(

	function(page, prototype, $article) {
		var self = this;
		self.prototype = prototype;
		self.$article = $article;
		self.page = page;
	}, null, {

		destroy: function() {
			var self = this;
			self.prototype = null;
			self.$article = null;
			self.page = null;
			if (!self.$elmt) return;
			utils.unbindObj(self.$elmt);
			self.$elmt = null;
			utils.unbindObj(self);
		},

		loadStructure: function() {

		},

		buildHtml: function(parent, controllerDao, buildOptions) {
			var self = this;
			var header = uiUtils.createDomElement("nav", ["navbar", "navbar-inverse"], null, {
				"role": "navigation"
			});

			var containerFluid = uiUtils.createDomElement("div", ["container-fluid"], null, null, header);
			var navbar = uiUtils.createDomElement("div", ["navbar-header", "s-m-header-navbar"], null, null, containerFluid);
			/*var picker = uiUtils.createDomElement("button", ["navbar-toggle"], null, {
				"data-toggle": "collapse",
				"data-target": "#header-collapse-" + this.page.id
			}, navbar);
			// append icon bar span (3 times)
			for (var ii = 0, jj = 3; ii < jj; ii++) {
				uiUtils.createDomElement("span", ["icon-bar"], null, null, picker);
			}*/
			var brandNameContainer = uiUtils.createDomElement("div", ["s-m-header-brand"], null, null, navbar);
			var link = uiUtils.createDomElement("a", ["navbar-brand"], brandNameLabel, {
				"href": "#"
			}, brandNameContainer);
			$(link).on("click", function() {
				window.location.reload(true);
			});

			// building list of header items
			/*var navbarCollapse = uiUtils.createDomElement("div", ["collapse", "navbar-collapse"], null, {
				"id": "header-collapse-" + this.page.id
			}, containerFluid);*/
			this.navListContainer = uiUtils.createDomElement("div", ["s-m-header-navlist"], null, null, navbar);

			var listItem = uiUtils.createDomElement("div", ["s-m-header-nav-item"], null, null, this.navListContainer);
			var anchor = uiUtils.createDomElement("a", null, null, {
				"href": "#",
				"data-action": "logout"
			}, listItem);
			var btnItem = uiUtils.createDomElement("button", ["btn", "btn-default", "sm-header-nav-item-btn"], logoutLabel, null, anchor);
			uiUtils.createDomElement("span", ["glyphicon", "glyphicon-log-out"], null, null, btnItem);

			parent.appendChild(header);

			this.ensureLinks(parent, controllerDao);
		},
		/**
		 * Append CRUD links to header if necessary
		 */
		ensureLinks: function(parent, dao) {
			var self = this;
			var $links = this.prototype.data("$links");
			if ($links && Object.keys($links).length > 0) {
				// create links bar
				var linksBarLayout = uiUtils.createDomElement("div", ["sm-links-bar-layout"]);
				var linksBar = uiUtils.createDomElement("div", ["sm-links-bar", "hidden"], null, {
					"style": "height:" + window.innerHeight + "px"
				}, linksBarLayout);
				var linksBarSlot = uiUtils.createDomElement("div", ["sm-links-bar-slot"], null, null, linksBar);
				$.each($links, function(name, value) {
					try {
						var link = sdataUtils.getLinkInfo(value.$url, dao);
						var attrs = {};
						attrs["href"] = "#";
						attrs["data-nav"] = link.page;
						attrs["data-sdata-url"] = link.sDataUrl;

						var title = utils.parseExpression(value.$title, null, self.prototype);
						var itemSlot = uiUtils.createDomElement("div", ["sm-links-bar-item-slot"], null, null, linksBarSlot);
						var item = uiUtils.createDomElement("a", ["sm-links-bar-item"], title || self.getLinkTitle(name), attrs, itemSlot);
					} catch (e) {
						// ignore invalid links
					}
				});

				// create links bar trigger
				var listItem = uiUtils.createDomElement("div", ["s-m-header-nav-item"]);
				/*var triggerBtn = uiUtils.createDomElement("button", ["sm-links-bar-trigger-btn", "btn", "btn-default"], null, {
				"type": "button"
			}, listItem);*/
				var picker = uiUtils.createDomElement("a", ["sm-links-bar-trigger"], null, {
					"href": "#",
					"data-action": "openlinksbar"
				}, listItem);
				var btnItem = uiUtils.createDomElement("button", ["btn", "btn-default", "sm-header-nav-item-btn"], null, null, picker);
				uiUtils.createDomElement("span", ["glyphicon", "glyphicon-align-justify"], null, null, btnItem);

				// append trigger btn
				if (!this.navListContainer) {
					this.navListContainer = $(parent).children("ul.nav");
				}
				this.navListContainer.insertBefore(listItem, this.navListContainer.firstChild);

				// append to parent
				parent.insertBefore(linksBarLayout, parent.firstChild);
			}
		},
		//TODO
		getLinkTitle: function(facetValue) {
			switch (facetValue) {
				case "$edit":
					return "Edit";
				case "$query":
					return "List";
				case "$save":
					return "Save";
				case "$details":
					return "Detail";
				default:
					throw new Error("Facet " + facetValue + " not implemented yet");
			}
		}
	});

exports.Klass = _Klass;