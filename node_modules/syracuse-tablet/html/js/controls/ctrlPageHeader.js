"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var Base = require('syracuse-tablet/html/js/controls/structElmt').Klass;


var _templates = {
	main: '\
		<div id="{{ctrlId}} class="s-m-control"> \
			<nav class="navbar navbar-inverse" role="navigation">\
				<div class="container-fluid">\
					<div class="navbar-header">\
						<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#header-collapse-{{ctrlId}}">\
					        <span class="icon-bar"></span>\
					        <span class="icon-bar"></span>\
					        <span class="icon-bar"></span>\
						</button>\
						<a data-action="reload" class="navbar-brand" href="#">{{title}}</a>\
					</div>\
					<div class="collapse navbar-collapse" id="header-collapse-{{ctrlId}}">\
						<ul class="nav navbar-nav">\
							<li></li>\
						</ul>\
						<ul class="nav navbar-nav navbar-right">\
							<li>\
								<a href="#" data-action="logout"> \
									<span class="glyphicon glyphicon-log-out" /> {{logout}}\
								</a>\
							</li>\
							<li style="display:none" class="linkbar">\
								<a href="#" data-action="openlinksbar"  data-control-id="{{ctrlId}}">\
									<span class="glyphicon glyphicon-align-justify" />\
								</a>\
							</li>\
						</ul>\
						<form style="display:none" class="navbar-form navbar-right" role="search">\
							<div class="form-group input-group-sm"">\
								<input type="text" class="form-control" placeholder="Search">\
							</div>\
							<button type="submit" class="btn btn-success">\
								<span class="glyphicon glyphicon-search"></span>\
							</button>\
						</form>\
					</div>\
				</div>\
			</nav> \
		</div>',
	linkBar: '\
		<div class="s-m-links-bar-layout" style="display:none">\
			<div class="s-m-links-bar" style="height:866px"> \
			 {{#each links}} \
				<div class="s-m-links-bar-slot"> \
					<div class="s-m-links-bar-item-slot">\
						<a class="s-m-links-bar-item" href="#" data-nav="{{data-nav}}" data-sdata-url="{{data-url}}">{{title}}</a> \
					</div> \
				</div> \
			 {{/each}} \
			</div> \
		</div>\
		'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/**
 * Page header Generate Html
 */
var _Klass = utils.defineClass(

	function(controller, $type) {
		var self = this;
		Base.call(self, controller, $type);
	}, Base, {

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			var _mainCtx = {
				title: "Sage ERP X3 - Mobile",
				logout: "Logout",
				ctrlId: self.id
			};
			self.setRootElement(_getHtml("main", _mainCtx), $$parent);
			var $links = self.controller.prototype.data("$links");
			if ($links && Object.keys($links).length > 0) {
				// Process links and create link panel + header icon for open/close
				var linksCtx = [];
				$.each($links, function(name, value) {
					try {
						var link = sdataUtils.getLinkInfo(value.$url, controllerDao);
						linksCtx.push({
							"data-nav": link.page,
							"data-sdata-url": link.sDataUrl,
							"title": utils.parseExpression(value.$title, null, self.controller.prototype) || self.getLinkTitle(name)
						});
					} catch (e) {
						value = value || {};
						console.log("invalid link" + (value.$title || 'no title') + "\n\t" + (value.$url || 'no url'));
					}
				});
				self.$$linksBar = $(_getHtml("linkBar", {
					links: linksCtx
				})).prependTo(self.$$elmt);
				self.$$elmt.find("li.linkbar").show();
			}
		},

		// TODO
		getLinkTitle: function(facetValue) {
			switch (facetValue) {
				case "$edit":
					return "Edit";
				case "$query":
					return "List";
				case "$save":
					return "Save";
				case "$details":
					return "Detail";
				default:
					throw new Error("Facet " + facetValue + " not implemented yet");
			}
		},

		_actOpenlinksbar: function(linksBar) {
			var self = this;
			if (self.$$linksBar) self.$$linksBar.toggle();
		}
	});

exports.Klass = _Klass;