"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ctrl");


var _typeNames = {};
var _regExp = /-|\//g;
var _Klass = utils.defineClass(
	function(controller, type, article) {
		var self = this;
		self.controller = controller;
		self.typeName = _typeNames[type];
		if (!self.typeName) {
			// used to generate readable ids - type expected "application/x-name" or "text/plain"
			var a = type.split(_regExp);
			self.typeName = _typeNames[type] = a[a.length - 1];
		}
		self.article = article || {};
		self.id = self.createId(self.typeName);
		self.$elmt = null;
		self.children = null;
		self.parent = null;
	}, null, {
		destroy: function() {
			var self = this;
			self.controller = null;
			utils.unbindObj(self.$elmt);
			utils.unbindObj(self);
		},
		createId: function(typeName) {
			return utils.readableuid(typeName);
		},
		appendChild: function(c) {
			var self = this;
			if (!c) return;
			if (!self.children) self.children = [];
			c.parent = self;
			self.children.push(c);
		},
		isRoot: function() {
			return controller === parent || parent == null;
		},
		isLayout: function() {
			return self.typeName === "layout";
		},
		buildHtml: function(html) {
			var self = this;
			self.buildHtmlBefore(html);
			if (self.children) {
				self.children.forEach(function(child, idx) {
					self.buildHtmlBeforeChild(html, child, idx);
					child.buildHtml(html);
					self.buildHtmlAfterChild(html, child, idx);
				});
			}
			self.buildHtmlAfter(html);
			return html;
		},
		/**
		 * Control can override this methods
		 */
		buildHtmlBeforeChild: function(html, child, idx) {},
		/**
		 * Control can override this methods
		 */
		buildHtmlAfterChild: function(html, child, idx) {},
		/**
		 * Control can override this methods
		 */
		buildHtmlBefore: function(html) {
			var self = this;
			html.push('<div style="color:white; border:1px solid red; padding: 5px;" id="');
			html.push(self.id);
			html.push('">');
			html.push('<h1>' + self.typeName + '</h1><p>' + self.id + '</p>');
			return html;
		},
		/**
		 * Control can override this methods
		 */
		buildHtmlAfter: function(html) {
			var self = this;
			html.push('</div>');
			return html;
		},

		render: function($elmt) {

		}
	}
);

exports.Klass = _Klass;