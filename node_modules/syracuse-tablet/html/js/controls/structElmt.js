"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');

var _typeNames = {};
var _regExp = /-|\//g;
/**
 * Bas element for controls and layouts
 * 	controller: page (or child controller)
 * 				Implements addControl Method
 */
var _Klass = utils.defineClass(
	function(controller, type, article, options) {
		var self = this;
		self.options = options || {};
		self.controller = controller;
		self.typeName = _typeNames[type];
		if (!self.typeName) {
			// used to generate readable ids - type expected "application/x-name" or "text/plain"
			var a = type.split(_regExp);
			self.typeName = _typeNames[type] = a[a.length - 1];
		}
		self.article = article || {};
		self.id = self.createId(self.typeName);
		/* Render method sets $$elmt*/
		self.$elmt = null;
		self.children = null;
		self.parent = null;
		if (!self.controller.addControl) throw new Error("Controller must implement addControl method");
		self.controller.addControl(self);
		self.displayOptions = $.extend({}, self.defaultDisplayOptions(), article.displayOptions);
		self.builder = null;
	}, null, {
		/**
		 * Overridden to provide control display options
		 */
		defaultDisplayOptions: function() {
			return null;
		},
		destroy: function() {
			var self = this;
			self.controller = null;
			self.parent = null;
			utils.unbindObj(self.$elmt);
			utils.unbindObj(self);
			if (self.children) {
				self.children.forEach(function(child) {
					if (child) child.destroy();
				});
				self.children = null;
			}
			if (self.builder) {
				self.builder.destroy();
				self.builder = null;
			}
		},
		isLayout: function() {
			return this.typeName === "layout";
		},
		isVignette: function() {
			return this.typeName === "vignette";
		},
		isControl: function() {
			return this.isLayout() && !this.isVignette();
		},
		createId: function(typeName) {
			return utils.readableuid(typeName);
		},
		appendChild: function(c) {
			var self = this;
			if (!c) return;
			if (!self.children) self.children = [];
			c.parent = self;
			self.children.push(c);
		},
		isRoot: function() {
			return this.controller === this.parent || this.parent == null;
		},
		buildHtml: function(html, controllerDao, buildOptions) {
			throw new Error("Must be overridden");
		},
		/**
		 * Called for each control after buildHtml in page.afterRender method
		 */
		render: function($elmt) {
			// log && log ("render " + this.id)
			this.$elmt = $elmt;
		}
	}
);

exports.Klass = _Klass;