"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var Base = require('syracuse-tablet/html/js/controls/ctrlFieldBase').Klass;

var _Klass = utils.defineClass(

	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
	}, Base, {
		buildFieldValue: function(parentSlot, buildOptions) {
			var self = this;
			self.choiceList = this.prototype.data("$value").$enum;
			if (this.$isEditMode) {
				var $format = this.prototype.data("$format");

				// if '$format' is set it can only have values '$combo' or '$radio'
				if ($format && ($format != '$radios' && $format != '$combo')) {
					throw new Error("Choice can only have formats '$radios' or '$combo'");
				}

				// ## set display in case of edit mode ##
				var value = self.currentValue = self.dao.getValue(this.article.$bind);
				var domValue;

				if (self.choiceList.length > 0) {
					// display in case of '$radios' format
					if (self.prototype.data("$format") == '$radios') {
						self.radioItemList = [];
						$.each(self.choiceList, function(index, choiceItem) {
							// building choice item display
							var choiceItemDom = uiUtils.createDomElement("div", ["sm-field-radio-item"]);
							var inputDom = uiUtils.createDomElement("input", ["sm-field-choice-radio"], null, {
								"type": "radio",
								"value": index,
								"name": "sm-radio-" + self.id
							});
							if (value && choiceItem.$value == value) {
								inputDom.setAttribute("checked", true);
							}
							var titleDom = uiUtils.createDomElement("div", ["sm-field-choice-radio-title"], choiceItem.$title);

							// build radioItemList array
							self.radioItemList.push({
								"inputDom": inputDom,
								"titleDom": titleDom
							});

							// appending to parent layout
							choiceItemDom.appendChild(inputDom);
							choiceItemDom.appendChild(titleDom);
							parentSlot.appendChild(choiceItemDom);
						});
					}

					// default format is '$combo'
					else {
						// building choice item display with bootstrap btn-group component
						var btnGroup = uiUtils.createDomElement("div", ["btn-group"]);
						var btnTxt = value ? this._getChoiceTitle(value) : self.choiceList[0].$title;
						self.selectionBtn = uiUtils.createDomElement("button", ["btn", "btn-default", "dropdown-toggle"], btnTxt, {
							"type": "button",
							"data-toggle": "dropdown"
						});
						// [style] add caret to selection button
						self.selectionBtn.appendChild(uiUtils.createDomElement("span", ["caret"]));

						self.listContainer = uiUtils.createDomElement("ul", ["dropdown-menu"], null, {
							"role": "menu"
						});
						// building list
						$.each(self.choiceList, function(index, choiceItem) {
							var listItem = uiUtils.createDomElement("li", (choiceItem.$value == value) || (!value && index == 0) ? ["active"] : null);
							listItem.appendChild(uiUtils.createDomElement("a", ["sm-field-choice-combo-item"], choiceItem.$title, {
								"href": "#"
							}));

							// appending list to list container
							self.listContainer.appendChild(listItem);
						});

						// appending to parent layout
						btnGroup.appendChild(self.selectionBtn);
						btnGroup.appendChild(self.listContainer);
						parentSlot.appendChild(btnGroup);
					}
				}
			} else {
				if (self.choiceList.length > 0) {
					parentSlot.appendChild(uiUtils.createDomElement("div", ["sm-field-value-read"], this._getChoiceTitle(self.dao.getValue(this.article.$bind))));
				}
			}
		},
		_getChoiceTitle: function(value) {
			var self = this;
			var res;
			$.each(self.choiceList, function(index, choice) {
				res = choice.$value == value ? choice.$title : res;
				if (res) {
					return false;
				}
			});
			return res;
		},
		_getChoiceValue: function(title) {
			var self = this;
			var res;
			$.each(self.choiceList, function(index, choice) {
				res = choice.$title == title ? choice.$value : res;
				if (res) {
					return false;
				}
			});
			return res;
		},
		setFieldValue: function(value) {
			var self = this;
			self.currentValue = value;
			self.dao.setValue(self.article.$bind, value);
		},
		onClick: function(evt) {
			var self = this;
			// in case of radio choice
			if (self.prototype.data("$format") == '$radios') {

				// get value of combo choice
				var evtValue = self._getChoiceValue(evt.target.nextElementSibling.textContent);

				// apply change if new value
				if (evtValue != self.currentValue) {
					var index = $(evt.target.parentNode).index();

					// update widget
					$.each(self.radioItemList, function(idx, radioItem) {
						setTimeout(function() {
							radioItem.inputDom.checked = index == idx;
						}, 5);
					});

					// update value
					self.setFieldValue(evtValue);
				}
			}


			// in case of combo choice
			else {
				// get value of selected item
				var evtValue = self._getChoiceValue(evt.target.textContent);

				// apply change if new value
				if (evtValue != self.currentValue) {
					var index = $(evt.target.parentNode).index();
					// update widget
					$.each(self.listContainer.children, function(idx, listItem) {
						uiUtils.toggleClass(listItem, "active", index == idx);
					});
					self.selectionBtn.textContent = evt.target.textContent;
					self.selectionBtn.appendChild(uiUtils.createDomElement("span", ["caret"]));

					// update value
					self.setFieldValue(evtValue);
				}

				// close combo selector
				$(self.selectionBtn).dropdown('toggle');
			}


		}
	});

exports.Klass = _Klass;