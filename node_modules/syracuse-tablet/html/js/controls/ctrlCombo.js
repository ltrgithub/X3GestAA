"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;

var _Klass = utils.defineClass(

	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
	}, Base, {
		buildFieldValue: function(parentSlot, controllerDao, buildOptions) {
			if (!controllerDao) throw new Error("BuildHtml - dao is expected for data parameter");

			if (this.$isEditMode) {
				var $format = this.prototype.data("$format");

				// if '$format' is set it can only have values '$combo' or '$radio'
				if ($format && ($format != '$radios' && $format != '$combo')) {
					throw new Error("Choice can only have formats '$radios' or '$combo'");
				}

				// ## set display in case of edit mode ##
				var value = controllerDao.getValue(this.article.$bind);
				var domValue;
				var choiceList = this.prototype.data("$value").$enum;
				if (choiceList.length > 0) {
					// display in case of '$radios' format
					if (this.prototype("$format") == '$radios') {
						$.each(choiceList, function(index, choiceItem) {
							// building choice item display
							var choiceItemDom = uiUtils.createDomElement("div", ["sm-field-radio-item"]);
							var inputDom = uiUtils.createDomElement("input", ["sm-field-choice-radio"],
								null, {
									"type": "radio",
									"checked": choiceItem.$value == value,
									"value": index,
									"name": "sm-radio-" + this.id
								});
							var titleDom = uiUtils.createDomElement("div", ["sm-field-choice-radio-title"],
								choiceItem.$title);

							// appending to parent layout
							choiceItemDom.appendChild(inputDom);
							choiceItemDom.appendChild(titleDom);
							parentSlot.appendChild(choiceItemDom);
						});
					}

					// default format is '$combo'
					else {
						// building choice item display with bootstrap btn-group component
						var btnGroup = uiUtils.createDomElement("div", ["btn-group"]);
						var selectionBtn = uiUtils.createDomElement("button", ["btn", "btn-default", "dropdown-toggle"],
							this._getChoiceTitle(choiceList, value), {
								"type": "button",
								"data-toggle": "dropdown"
							});
						// [style] add caret to selection button
						selectionBtn.appendChild(uiUtils.createDomElement("span", ["caret"]));

						var listContainer = uiUtils.createDomElement("ul", ["dropdown-menu"], null, {
							"role": "menu"
						});
						// building list
						$.each(choiceList, function(index, choiceItem) {
							var listItem = uiUtils.createDomElement("li", [(choiceItem.$value == value) ? "active" : ""]);
							listItem.appendChild(uiUtils.createDomElement("a", ["sm-field-choice-combo-item"],
								choiceItem.$title, {
									"href": "#"
								}));

							// appending list to list container
							listContainer.appendChild(listItem);
						});

						// appending to parent layout
						btnGroup.appendChild(selectionBtn);
						btnGroup.appendChild(container);
						parentSlot.appendChild(btnGroup);
					}
				}
			} else {
				var choiceList = this.prototype.data("$value").$enum;
				if (choiceList.length > 0) {
					parentSlot.appendChild(uiUtils.createDomElement("div", ["sm-field-value-read"],
						this._getChoiceTitle(choiceList, controllerDao.getValue(this.article.$bind))));
				}
			}
		},
		_getChoiceTitle: function(choiceList, value) {
			var res;
			$.each(choiceList, function(index, choice) {
				res = choice.$value == value ? choice.$title : res;
				if (res) {
					return false;
				}
			});
			return res;
		}
	});

exports.Klass = _Klass;