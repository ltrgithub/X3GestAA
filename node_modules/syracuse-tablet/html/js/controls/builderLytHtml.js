"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ctrl");
var Base = require('syracuse-tablet/html/js/controls/builderBase').BuilderBase;

/**
 * Base LAYOUT HTML ARRAY builder
 * 	Traverse layout's children and call adapted build methods
 */
var _BuilderLytBaseHtml = utils.defineClass(
	function(layout) {
		var self = this;
		Base.call(self, layout);
	}, Base, {
		/**
		 * Build Html recursively
		 */
		buildHtml: function(html, controllerDao, buildOptions) {
			var self = this;
			self.buildHtmlBefore(html, controllerDao, buildOptions);
			if (self.ctrl.children) {
				self.ctrl.children.forEach(function(child, idx) {
					self.buildHtmlBeforeChild(html, controllerDao, buildOptions, child, idx);
					child.buildHtml(html, controllerDao);
					self.buildHtmlAfterChild(html, controllerDao, buildOptions, child, idx);
				});
			}
			self.buildHtmlAfter(html, controllerDao, buildOptions);
		},
		/**
		 * Control can override this methods
		 */
		buildHtmlBeforeChild: function(html, controllerDao, buildOptions, child, idx) {
			throw new Error("Must be overridden");
		},
		/**
		 * Control can override this methods
		 */
		buildHtmlAfterChild: function(html, controllerDao, buildOptions, child, idx) {
			throw new Error("Must be overridden");
		},
		/**
		 * Control can override this methods
		 */
		buildHtmlBefore: function(html, controllerDao, buildOptions) {
			throw new Error("Must be overridden");
		},
		/**
		 * Control can override this methods
		 */
		buildHtmlAfter: function(html, controllerDao, buildOptions) {
			throw new Error("Must be overridden");
		}
	});
/**
 * ROW LAYOUT HTML ARRAY builder
 */
var _BuilderLytRowHtml = utils.defineClass(
	function(layout) {
		var self = this;
		_BuilderLytBaseHtml.call(self, layout);
	}, _BuilderLytBaseHtml, {

		_getBsWidths: function() {
			var self = this;
			var widths = {}, sum, itemWidths, sz;
			for (var p in self.article) {
				if (p.length === 8 && p.smStartsWith("$width")) {
					sz = p.substr(6).toLowerCase();
					sum = 0;
					widths[sz] = [];
					self.article[p].split(',').forEach(function(wdth) {
						wdth = parseInt(wdth, 10);
						sum += wdth;
						widths[sz].push(wdth);
					});
					if (sum != 12) {
						log && log("!!! - rowLayoutId=" + self.id + " - Sum of widths[" + sum + "]must be equal to 12 - device size= " + sz, JSON.stringify(widths));
					}
					if (self.ctrl.children.length != widths[sz].length) {
						log && log("!!! - rowLayoutId=" + self.id + " - device size: " + sz + " - Number of widths[" + widths[sz].length + "] must be equal to the number of children[" + self.ctrl.children.length + "]");
					}
				}
			}
			return widths;
		},
		getColClasses: function(idx) {
			var self = this;
			if (self.colClasses) return self.colClasses[idx];
			var devSz = "$width" + globals.getDeviceSize(true);
			// all bootstrap width per device size xs, md...
			self.bsWidths = self._getBsWidths();
			// Size to use - TODO maybe not used because we generate all the sizes
			self.bsWidth = self.bsWidths[globals.getDeviceSize()];
			if (!self.bsWidth) {
				// Default size - TODO
				self.bsWidth = self.bsWidths["md"] || [12];
			}
			self.colClasses = [];
			if (self.ctrl.children) {
				// Class for cells - We generate all the sizes available - TODO only for test 
				var bsClasses;
				self.ctrl.children.forEach(function(c, idx) {
					bsClasses = [];
					for (var sz in self.bsWidths) {
						var widths = self.bsWidths[sz];
						if (idx < widths.length) {
							bsClasses.push("col-" + sz + "-" + widths[idx]);
						}
					}
					self.colClasses.push(bsClasses.join(' '));
				});
			}
			return self.colClasses[idx];
		},

		buildHtmlBeforeChild: function(html, controllerDao, buildOptions, child, idx) {
			var self = this;
			html.push('<div class="');
			html.push(self.getColClasses(idx));
			html.push(' ');
			html.push(self.displayOptions.cssDefCell.join(' '));
			if (self.displayOptions.cssCell) {
				html.push(' ');
				html.push(self.displayOptions.cssCell.join(' '));
			}
			html.push('">');
		},

		buildHtmlAfterChild: function(html, controllerDao, buildOptions, child, idx) {
			var self = this;
			html.push('</div>');
		},

		buildHtmlBefore: function(html, controllerDao, buildOptions) {
			var self = this;
			html.push('<div class="');
			html.push(self.displayOptions.cssDefLayout.join(' '));
			if (self.displayOptions.cssLayout) {
				html.push(' ');
				html.push(self.displayOptions.cssLayout.join(' '));
			}
			html.push('" id="');
			html.push(self.id);
			html.push('">');
			html.push('<div class="row"');
			html.push(self.displayOptions.cssDefRow.join(' '));
			if (self.displayOptions.cssRow) {
				html.push(' ');
				html.push(self.displayOptions.cssRow.join(' '));
			}
			if (self.displayOptions.rowHeight != null) {
				html.push(' style="height:');
				html.push(self.displayOptions.rowHeight);
				html.push('"');
			}
			html.push('>');
		},

		buildHtmlAfter: function(html, controllerDao, buildOptions) {
			var self = this;
			// End row / layout
			html.push('</div></div>');
		}
	});
/**
 * STACK LAYOUT HTML ARRAY builder
 */
var _BuilderLytStackHtml = utils.defineClass(
	function(layout) {
		var self = this;
		Base.call(self, layout);
	}, _BuilderLytBaseHtml, {

		buildHtmlBeforeChild: function(html, controllerDao, child, idx) {
			var self = this;
			html.push('<div class="');
			html.push(self.displayOptions.cssDefCell.join(' '));
			if (self.displayOptions.cssCell) {
				html.push(' ');
				html.push(self.displayOptions.cssCell.join(' '));
			}
			html.push('">');
		},

		buildHtmlAfterChild: function(html, controllerDao, child, idx) {
			var self = this;
			html.push('</div>');
		},

		buildHtmlBefore: function(html, controllerDao) {
			var self = this;
			html.push('<div class="');
			html.push(self.displayOptions.cssDefLayout.join(' '));
			if (self.displayOptions.cssLayout) {
				html.push(' ');
				html.push(self.displayOptions.cssLayout.join(' '));
			}
			html.push('" id="');
			html.push(self.id);
			html.push('">');
		},

		buildHtmlAfter: function(html, controllerDao) {
			var self = this;
			html.push('</div>');
		}
	});

exports.BuilderLytRowHtml = _BuilderLytRowHtml;
exports.BuilderLytStackHtml = _BuilderLytStackHtml;