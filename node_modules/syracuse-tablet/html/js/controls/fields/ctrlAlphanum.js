"use strict";

var Base = require('syracuse-tablet/html/js/controls/fields/ctrlFieldBase').CtrlFieldBase;

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var validator = require('syracuse-tablet/html/js/controls/validator').Validator;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

/**
 * 
 * 
 * Rendering:
 * Inputfield: ok
 * 
 * MetaData:
 * $isReadOnly: ok 
 * $isDisabled: ok
 * $isHidden: ok
 * 
 */
exports.CtrlAlphaNum = utils.defineClass(
	function CtrlAlphaNum(controller, article, prototype, options) {
		options = options || {};
		options.nativeCapabilities = {
			"penTextInput": true,
			"GPS": true,
			"scanBarcode": true
		};
		Base.call(this, controller, article, prototype, options);
	}, Base, {

		validateValue: function(value, errors) {
			var ok = Base.prototype.validateValue.call(this, value, errors);
			return ok && validator.validate(this, value, errors, ["$pattern", "$minLength", "$maxLength"]);
		},

		buildFieldValue: function() {
			this._ensure$$value();
			this._clear$$value();
			var value = this.getFormattedValue(this.getValue());
			if (this.$isEditMode) {
				this.createMainInput(value);
			} else {
				this.appendTextValue(value);
			};
		},
	});
var CtrlAlphaNum = exports.CtrlAlphaNum;

/**
 * 
 * 
 * Rendering:
 * Inputfield: ok
 * 
 * MetaData:
 * $isReadOnly: ok 
 * $isDisabled: ok
 * $isHidden: ok
 * 
 */
exports.CtrlPhone = utils.defineClass(
	function CtrlPhone(controller, article, prototype, options) {
		CtrlAlphaNum.call(this, controller, article, prototype, options);
		this.cssType = "s-m-phone";
	}, CtrlAlphaNum, {

		buildFieldValue: function() {
			if (this.$isEditMode) {
				CtrlAlphaNum.prototype.buildFieldValue.call(this);
			} else {
				var value = this.getFormattedValue(this.getValue());
				var link = uiUtils.createDomElement("span",
					null,
					"",
					this.getDataActionAttrs("openExternalLink", "tel:" + value)
				);
				if (value && value.length > 0) {
					link.appendChild(uiUtils.createDomElement("span", fontUtils.phoneFieldIcon()));
					$(link).append(value);
				}
				this.$$elmt.append(link);
			}
		}
	});

/**
 * 
 * 
 * Rendering:
 * Inputfield: ok
 * 
 * MetaData:
 * $isReadOnly: ok 
 * $isDisabled: ok
 * $isHidden: ok
 * 
 */
exports.CtrlEmail = utils.defineClass(

	function CtrlEmail(controller, article, prototype, options) {
		CtrlAlphaNum.call(this, controller, article, prototype, options);
		this.cssType = "s-m-email";
	}, CtrlAlphaNum, {

		buildFieldValue: function() {
			if (this.$isEditMode) {
				CtrlAlphaNum.prototype.buildFieldValue.call(this);
			} else {
				var value = this.getFormattedValue(this.getValue());
				var link = uiUtils.createDomElement("span",
					null,
					"",
					this.getDataActionAttrs("openExternalLink", "mailto:" + value)
				);
				if (value && value.length > 0) {
					link.appendChild(uiUtils.createDomElement("span", fontUtils.emailFieldIcon()));
					$(link).append(value);
				}
				this.$$elmt.append(link);
			}
		}
	});

/**
 * 
 * 
 * Rendering:
 * Inputfield: ok
 * 
 * MetaData:
 * $isReadOnly: ok 
 * $isDisabled: ok
 * $isHidden: ok
 * 
 */
exports.CtrlUrl = utils.defineClass(

	function CtrlUrl(controller, article, prototype, options) {
		CtrlAlphaNum.call(this, controller, article, prototype, options);
		this.cssType = "s-m-url";
	}, CtrlAlphaNum, {

		buildFieldValue: function() {
			this._ensure$$value();
			if (this.$isEditMode) {
				CtrlAlphaNum.prototype.buildFieldValue.call(this);
			} else {
				var value = this.getFormattedValue(this.getValue());
				if (value && value.length > 0) {
					this.$$value.append(uiUtils.createDomElement("span", null, value));

					var icon = uiUtils.createDomElement("span", ["s-m-icon-link", this._getDefaultIcon()],
						null,
						this.getDataActionAttrs("openExternalLink", value)
					);
					this.$$value.append(icon);
				}
			}
		},
		_getDefaultIcon: function() {
			var css = "s-m-icon-" + (this.article.$urlIconSize || "small") + " ";
			return css + (this.article.$urlIcon || fontUtils.getUrlDefIcon()).css;
		}
	});