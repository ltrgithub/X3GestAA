"use strict";

var Base = require('syracuse-tablet/html/js/controls/fields/ctrlFieldBase').CtrlFieldBase;

var utils = require('syracuse-tablet/html/js/helpers/utils');
var modules = require('syracuse-tablet/html/js/common/modules');


exports.CtrlQuantity = utils.defineClass(

	function CtrlQuantity(controller, article, prototype, options) {
		options = options || {};
		options.nativeCapabilities = {
			"penTextInput": true
		};
		Base.call(this, controller, article, prototype, options);
		this.unitFieldInfo = prototype.getUnitFieldInfo();
		// Create extra control for UNIT in read only mode
		// !! if grid Cell we ca't create the control with createControl
		this.displayUnit = false;
		if (this.unitFieldInfo && this.unitFieldInfo.unitFieldProto && !this.unitFieldInfo.unitFieldProto.json["$isExcluded"]) {
			this.displayUnit = options && options.displayCtx !== "table";
		}
		this.unitCtrl = null;
	}, Base, {

		initFormatter: function() {
			var valueProto = this.prototype.data('$value');
			if (!valueProto || !valueProto.$type) return null;
			return Base.prototype.initFormatter.call(this, valueProto.$type, valueProto.$format);
		},

		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this.unitCtrl) {
				this.unitCtrl.destroy();
				this.unitCtrl = null;
			}
		},
		buildHtml: function(classes) {
			classes = classes || [];
			classes.push("s-m-qty");
			Base.prototype.buildHtml.call(this, classes);
			if (this.displayUnit) {
				this.unitCtrl = modules.get("ctrlFactory").createControl(
					this.controller, {
						"$bind": this.unitFieldInfo.unitBindName,
						"$noAuthoring": true,
					},
					this.parent,
					this.unitFieldInfo.unitFieldProto, {
						isUnit: true
					});
				this.unitCtrl.set$$container(this.$$value);
				this.unitCtrl.buildHtml();
			}
		},

		buildFieldValue: function() {
			this._ensure$$value();
			this._clear$$value();
			var value = this.getFormattedValue(this.getValue());
			if (this.$isEditMode) {
				this.createMainInput(value);
			} else {
				this.appendTextValue(value);
			}
		}
	});