"use strict";
var Base = require('syracuse-tablet/html/js/controls/fields/ctrlFieldBase').CtrlFieldBase;

var utils = require('syracuse-tablet/html/js/helpers/utils');
var validator = require('syracuse-tablet/html/js/controls/validator').Validator;
var locale = require('syracuse-tablet/html/js/helpers/locale');

/**
 * 
 * 
 * Rendering:
 * Inputfield: ok
 * 
 * MetaData:
 * $isReadOnly: ok 
 * $isDisabled: ok
 * $isHidden: ok
 * 
 */
exports.CtrlNumeric = utils.defineClass(

	function CtrlNumeric(controller, article, prototype, options) {
		options = options || {};
		options.nativeCapabilities = {
			"penTextInput": true
		};
		Base.call(this, controller, article, prototype, options);
	}, Base, {

		buildFieldValue: function() {
			var self = this;
			this._ensure$$value();
			this._clear$$value();
			this.$$value.addClass("s-m-numeric");
			var value = self.getFormattedValue(self.getValue());

			if (self.$isEditMode) {
				self.createMainInput(value);
			} else {
				self.appendTextValue(value);
			}
		},

		parseValue: function(value, errors) {
			var self = this;
			if (self.formatter) {
				var format = self.formatter.getFormat();
				if (format) {
					var gs = locale.getNumberGroupSeparator();
					var ds = locale.getNumberDecimalSeparator();

					if (format.indexOf(",") < 0 && gs && gs.length > 0) {
						// Format with no GS, consider eventual GS as DS
						value = value.replace(new RegExp("\\" + gs, "g"), ds);
					}
					if (format.indexOf(",") > 0 && format.indexOf(".") > 0 && gs && gs.length > 0) {
						// Format with GS and DS, consider GS as DS if no DS entered
						if (value.indexOf(gs) > -1 && value.indexOf(ds) < 0) {
							value = value.replace(new RegExp(gs, "g"), ds);
						}
					}
				}
			}
			return Base.prototype.parseValue.call(self, value, errors);
		},

		validateValue: function(value, errors) {
			var self = this;
			var ok = Base.prototype.validateValue.call(self, value, errors);
			ok = validator.validate(self, value, errors, ["$minimum", "$maximum", "$exclusiveMinimum", "$exclusiveMaximum", "$precision"]) && ok;
			if (self.$type !== "application/x-integer") {
				ok = validator.validate(self, value, errors, ["$scale"]) && ok;
			}
			return ok;
		}
	});