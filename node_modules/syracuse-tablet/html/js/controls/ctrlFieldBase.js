"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/structElmt').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');

var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var locale = require('syracuse-tablet/html/js/helpers/locale');

/**
 * Base class for controls that display exactly one value/property
 */
var _Klass = utils.defineClass(

	function(controller, article, prototype) {
		var self = this;
		self.prototype = prototype;
		var $type = prototype.data('$type');
		self.$type = $type;
		self.$bind = article.$bind;
		Base.call(self, controller, $type, article);
		var formatter = formatApi.getFormatter(this);
		if (formatter) {
			this.formatter = formatter;
		}
		self.ensureEditMode();
	}, Base, {
		ensureEditMode: function() {
			// Get page edit mode
			this.$isEditMode = this.controller.isEditMode();

			if (this.$isEditMode !== false) {
				// if page is NOT in read only mode, article can override edit mode of widget
				if (this.article.$isEditMode != null) {
					this.$isEditMode = this.article.$isEditMode;
				}
			}
		},

		destroy: function() {
			var self = this;
			self.prototype = null;
			Base.prototype.destroy.call(self);
		},

		buildHtml: function(parent, controllerDao, buildOptions) {
			var self = this;
			if (!controllerDao) throw new Error("BuildHtml - dao is expected for data parameter");

			buildOptions = buildOptions || {};

			self.dao = controllerDao;
			var fieldSlot = uiUtils.createDomElement("div", ["sm-field-slot"], null, {
				"id": this.id
			});

			this.buildFieldTitle(fieldSlot, buildOptions);
			this.buildFieldCore(fieldSlot, buildOptions);

			parent.appendChild(fieldSlot);
		},

		buildFieldTitle: function(parentSlot, buildOptions) {
			// don't build field title if grid cell
			if (!(this.article.$isTitleHidden === true) && buildOptions.isGridCell !== true) {
				parentSlot.appendChild(uiUtils.createDomElement("div", ["sm-field-title"], this.prototype.property(this.$bind).$title));
			}
		},

		buildFieldCore: function(parentSlot, buildOptions) {
			var fieldCore = uiUtils.createDomElement("div", ["sm-field-core"]);
			var fieldValueSlot = uiUtils.createDomElement("div", ["sm-field-value-slot"]);
			var fieldValue = uiUtils.createDomElement("div", ["sm-field-value"]);
			fieldValueSlot.appendChild(fieldValue);
			fieldCore.appendChild(fieldValueSlot);

			this.buildFieldValue(fieldValue, buildOptions);
			this.buildFieldMessage(fieldCore, buildOptions);

			parentSlot.appendChild(fieldCore);
		},

		buildFieldValue: function(parentSlot, buildOptions) {
			var self = this;
			var value;

			value = self.getFormattedValue(self.getValue());
			if (this.$isEditMode) {
				self.domInput = parentSlot.appendChild(uiUtils.createDomElement("input", ["sm-field-input", "form-control"], null, {
					"type": "text",
					"value": value

				}));
				$(self.domInput).blur(function() {
					self._onBlur.call(self, this);
				});
				$(self.domInput).focus(function() {
					self._onFocus.call(self, this);
				});
			} else {
				parentSlot.appendChild(uiUtils.createDomElement("div", ["sm-field-value-read"], value));
			}
		},

		buildFieldMessage: function(parentSlot, buildOptions) {
			this.domMessage = uiUtils.createDomElement("div", ["sm-field-message"]);
			parentSlot.appendChild(this.domMessage);
		},

		/*
		 * Change visible value (UI only)
		 */
		setDisplayValue: function(value) {
			if (this.domInput) {
				this.domInput.value = value;
			}
		},

		/*
		 * value: value inputed into the field as string
		 * errors: array where to add validation errors as strings
		 */
		validateValue: function(value, errors) {
			if (value == null || value == "") {
				if (this.prototype.data("$isMandatory")) {
					errors.push(locale.text("field.valMand"));
					return;
				}
				if (!this.prototype.data("isNullable")) {
					errors.push(locale.text("field.valNull"));
					return;
				}
				return;
			}
		},

		/*
		 * value: value inputed into the field as string
		 * errors: array where to add parsing errors as strings
		 *
		 * return: Parsed value as represented in sdata data
		 * E.g. "2014-12-31" for dates or 123 for numbers
		 */
		parseValue: function(value, errors) {
			if (!this.formatter) {
				return value;
			}
			var data = this.formatter.parseValue(value, errors);
			return data;
		},
		showInputErrors: function(errors) {
			var $$msg = $(this.domMessage);
			$$msg.empty();
			if (errors) {
				errors.forEach(function(error) {
					$$msg.append($("<p>").text(error));
				});
			}
		},
		clearInputErrors: function() {
			this.showInputErrors(null);
		},

		getValue: function() {
			var value = this.dao.getValue(this.$bind);
			return value;
		},

		/*
		 * Get value as string to be displayed in control (ev. formatted specific to locale)
		 */
		getFormattedValue: function(value) {
			if (!this.formatter) {
				return value || "";
			}
			return this.formatter.formatValue(value);
		},

		/*
		 * Get value as string to be displayed in control (ev. formatted specific to locale when field got focus)
		 */
		getFormattedValueEdit: function(value) {
			if (!this.formatter) {
				return value || "";
			}
			return this.formatter.formatValueEdit(value);
		},

		_onBlur: function(domField) {
			var value = domField.value;
			var errors = [];
			var data;
			this.validateValue(value, errors);
			if (errors.length <= 0) {
				data = this.parseValue(value, errors);
			}

			if (errors.length > 0) {
				this.showInputErrors(errors);
			} else {
				this.dao.setValue(this.$bind, data);

				value = this.getFormattedValue(data);
				this.setDisplayValue(value);
				this.clearInputErrors();
			}
		},

		_onFocus: function(domField) {
			var value = domField.value;
			var errors = [];
			var data;
			this.validateValue(value, errors);
			if (errors.length <= 0) {
				data = this.parseValue(value, errors);
			}
			if (errors.length > 0) {
				this.showInputErrors(errors);
			} else {
				var value = this.getFormattedValueEdit(data);
				this.setDisplayValue(value);
			}
		}
	}
);

exports.Klass = _Klass;