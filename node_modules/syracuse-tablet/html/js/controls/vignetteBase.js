"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("vignette");
var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var appFactory = require('syracuse-tablet/html/js/application/appFactory');
var templates = require('syracuse-tablet/html/js/helpers/templating');

var _Klass = utils.defineClass(

	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
	}, Base, {
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
		},
		/**
		 * Just create an empty div
		 */
		buildHtml: function(html, controllerDao, buildOptions) {
			var context = {};
			context.id = this.id;
			return templates.execSync("tmplVignette", context);
		},

		load: function() {
			var self = this;
			var deferred = $.Deferred();
			var loader;

			try {
				var gadget = self.prototype.data("$gadget");
				switch (gadget.$type) {
					case "$representation":
					case "$stats":
					case "$request":
						loader = self._loadRepresentation(gadget);
						break;
					case "$dashboard":
						loader = self._loadDashboard(gadget);
						break;
					case "$external":
						loader = self._loadExternal(gadget);
						break;
					default:
						loader = self._loadUnsupported(gadget, "Unsupported gadget type: " + gadget.$type);
						break;
				}
				loader.then(function() {
					deferred.resolve();
				}, function(e) {
					loader = self._loadUnsupported(gadget, self._formatError(e));
					loader.then(function() {
						deferred.resolve();
					}, function(e) {
						deferred.reject(e);
					});
				});
			} catch (e) {
				loader = self._loadUnsupported(gadget, self._formatError(e));
				loader.then(function() {
					deferred.resolve();
				}, function(e) {
					deferred.reject(e);
				});
			}
			return deferred.promise();
		},

		_loadRepresentation: function(gadget) {
			var self = this;
			var deferred = $.Deferred();

			var endpoint = gadget.endpoint || globals.getEndpoint();
			var name = endpoint + "." + gadget.representation + "." + gadget.facet;
			var pageInfo = globals.getApplication().getPageInfo(name, {
				vignette: true,
				gadget: gadget,
				$displayStyle: self.prototype.data("$displayStyle")
			});

			if (pageInfo && pageInfo.options && pageInfo.options.$displayStyle === "$full") {
				var page = appFactory.createPage(self.$elmt, pageInfo);
				page.load().then(function() {
					page.activate(null, function() {
						deferred.resolve();
					});
				}, function(e) {
					deferred.reject(e);
				});
			} else {
				var html = [];
				html.push('<a href="#" data-nav="');
				html.push(pageInfo.name);
				html.push('" ');

				html.push('data-gadget-id="');
				html.push(gadget.$uuid);
				html.push('"');

				html.push('>');
				html.push('<span class="s-m-vignette-link-only">');
				html.push(gadget.$title);
				html.push('</span>');
				html.push('</a>');
				self.$elmt.html(html.join(''));
				deferred.resolve();
			}

			return deferred.promise();
		},

		_loadDashboard: function(gadget) {
			var self = this;
			var deferred = $.Deferred();
			var html = [];
			html.push('<a href="#" data-nav="');
			html.push(gadget.dashboardName + ".$dashboard");
			html.push('" ');

			html.push('data-gadget-id="');
			html.push(gadget.$uuid);
			html.push('"');

			html.push('>');
			html.push('<span class="s-m-vignette-link-only">');
			html.push(gadget.$title);
			html.push('</span>');
			html.push('</a>');
			self.$elmt.html(html.join(''));

			deferred.resolve();
			return deferred.promise();
		},

		_loadExternal: function(gadget) {
			var self = this;
			var deferred = $.Deferred();
			var html = [];
			var displayStyle = self.prototype.data("$displayStyle");

			if (displayStyle === "$link") {
				html.push('<a href="');
				html.push(gadget.externalUrl);
				html.push('" ');
				html.push('>');
				html.push('<span class="s-m-vignette-link-only">');
				html.push(gadget.$title);
				html.push('</span>');
				html.push('</a>');
				self.$elmt.html(html.join(''));
			} else {
				html.push('<a href="');
				html.push(gadget.externalUrl);
				html.push('" ');
				html.push('>');
				html.push(gadget.$title);
				html.push('</a><br>');
				html.push('<iframe src="');
				html.push(gadget.externalUrl);
				html.push('" style="position: absolute; top: 0px; left: 0px; height: 100vh; width: 100vh;">');
				html.push('>');
				self.$elmt.html(html.join(''));
			}

			deferred.resolve();
			return deferred.promise();
		},

		_loadUnsupported: function(gadget, error) {
			var self = this;
			var deferred = $.Deferred();
			var pageInfo = globals.getApplication().getPageInfo("vignetteerror", {
				vignette: true,
				error: error
			});
			var page = appFactory.createPage(self.$elmt, pageInfo);
			page.load().then(function() {
				page.activate(null, function() {
					deferred.resolve();
				});
			}, function(e) {
				deferred.reject(e);
			});
			return deferred.promise();
		},

		_formatError: function(e) {
			if (utils.isError(e)) {
				return e.message;
			} else {
				return JSON.stringify(e);
			}
		},

		/**
		 * returns the page.pageInfo of the gadget's page
		 **/
		_getPageInfo: function() {}
	});

exports.Klass = _Klass;