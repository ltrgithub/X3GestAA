"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("vignette");
var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var appFactory = require('syracuse-tablet/html/js/application/appFactory');

var _Klass = utils.defineClass(

	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
	}, Base, {
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
		},
		/**
		 * Just create an empty div
		 */
		buildHtml: function(html, controllerDao, buildOptions) {
			/*var self = this;
			html.push('<div class="');
			html.push(self.displayOptions.cssDefCtrl.join(' '));
			html.push('" id="');
			html.push(self.id);
			html.push('">');
			html.push('</div>');*/
			var context = {};
			context.id = this.id;
			return this.templates.execSync("tmplVignette", context);
		},
		/**
		 * Loaded by dashboard.afterRender
		 * 	Get page html and update $elmt innerHtml
		 **/
		load: function() {
			var self = this;
			var state;
			var deferred = $.Deferred();
			var rejectError = function(e) {
				var msg = "Vignette page [" + (state ? state.name : "?") + "] loading error";
				log && log(msg, e);
				// !! TODO - deferred - this deferred is not correctly rejected - dash-board reject callback is not called - To test
				alert(msg);
				deferred.reject(e);
			};
			try {
				state = self._getPageInfo();
				if (state && state.options && state.options.$displayStyle === "$full") {
					var dstPage = appFactory.createPage(self.$elmt, state);
					dstPage.load().then(function() {
						dstPage.activate(null, function() {
							deferred.resolve();
						});
					}, rejectError);
				} else {
					var html = [];
					html.push('<div>');
					html.push('<a href="#" data-nav="');
					html.push(state.name);
					html.push('" ');
					if (state && state.options && state.options.gadget) {
						html.push('" data-gadget-id="');
						html.push(state.options.gadget.$uuid);
						html.push('"');
					}
					html.push('>');
					html.push(state.name);
					html.push('</a>');
					html.push('</div>');
					self.$elmt.html(html.join(''));
					deferred.resolve();
				}
			} catch (e) {
				rejectError(e);
			} finally {
				return deferred.promise();
			}
		},

		/**
		 * returns the page.pageInfo of the gadget's page
		 **/
		_getPageInfo: function() {
			var self = this;
			var gadget = self.prototype.data("$gadget");
			if (gadget.$type === "$representation") {
				var endpoint = gadget.endpoint || globals.getEndpoint();
				var name = endpoint + "." + gadget.representation + "." + gadget.facet;
				var page = globals.getApplication().getPageInfo(name, {
					vignette: true,
					gadget: gadget,
					$displayStyle: self.prototype.data("$displayStyle")
				});
				if (page) return page;
			}
			return globals.getApplication().getPageInfo("vignetteerror", {
				vignette: true
			});
		}
	});

exports.Klass = _Klass;