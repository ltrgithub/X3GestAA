"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var PageLoader = require('syracuse-tablet/html/js/application/pageLoader').Klass;
var pageHelper = require('syracuse-tablet/html/js/application/pageHelper');
var modal = require('syracuse-tablet/html/js/ui/modal');
var constants = require('syracuse-tablet/html/js/helpers/constants');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _waitConfig = {
	className: 'waiting-blocks',
	elements: 5,
	auto: true,
	speed: 200
};
var _templates = {
	main: '\
		<div id="{{ctrlId}}" class="s-m-control s-m-vignette {{type}}"> \
			<section/>\
			<footer style="display:none"/> \
			<div class="s-m-waiting bckg" style="display:none"/> \
			<div class="s-m-waiting wheel" style="display:none"/> \
		</div>\
	',
	iframe: '\
		<br><iframe src="{{url}}" style="position: absolute; top: 0px; left: 0px; height: 100vh; width: 100vh;"/>\
	',
	navgigBtns: '\
		<a href="#" data-action="vignetteBack" class="glyphicon glyphicon-circle-arrow-left" style="display:none"></a>\
		<a href="#" data-action="vignetteHome" class="glyphicon glyphicon-home" style="display:none"></a>\
	',
	vignetteError: '\
		<a href="#" data-action="vignetteError">{{text}}</a>\
	',
	linkPage: '<a href="{{href}}" data-nav-target="application" data-nav="{{data-nav}}" data-gadget-id="{{data-gadget-id}}" data-application-name="{{data-application-name}}" class="s-m-link-page">{{title}}</a>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};


var _Klass = utils.defineClass(

	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
		self._currentPage = null;
		self._pageLoader = null;
		self._$$wait = null;
		self._stateStack = [];
		self._error = null;
		self.displayStyle = prototype.data("$displayStyle");
		self.openLinkInVignette = globals.$config("openLinkInVignette");
	}, Base, {
		destroy: function() {
			var self = this;
			self._error = null;
			uiUtils.waitPluginDestroy(self._$$wait);
			if (self._currentPage) {
				self._currentPage.destroy();
				self._currentPage = null;
			}
			if (self._pageLoader = null) {
				self._pageLoader.destroy();
				self._pageLoader = null;
			}
			Base.prototype.destroy.call(self);
		},
		/**
		 * If vignette contains a page return the control object identified by id
		 */
		getPageControl: function(ctrlId) {
			return this._currentPage && this._currentPage.getControl ? this._currentPage.getControl(ctrlId) : null;
		},

		getPage: function() {
			return this._currentPage;
		},

		/**
		 * Change current page - called from eventListener
		 * 	data-nav action has been clicked in a vignette's link
		 * 	we could have a parameter that indicates if the link has to be opened full page or inside the vignette
		 */
		changePage: function(state, options) {
			options = options || {};
			// Always full page
			options.$displayStyle = "$full";
			return this._loadPage(state, options, false);
		},
		/**
		 * Refresh current page - called from eventListener
		 */
		refreshPage: function(options) {
			var self = this;
			if (!self._currentPage) throw new Error("No current page");
			self._currentPage.refresh(options, {
				waitStart: function(controlId) {
					// Wait managed by vignette
					self.waitStart();
				},
				waitStop: function(controlId) {
					self.waitStop();
				}
			}).then(function() {
				//	Eventually do something in vignette control	
			}).fail(function(e) {
				modal.error("Refresh page on vignette", e);
			});;
		},
		clearContent: function() {
			pageHelper.removeAllPages(this._$$content);
			this._$$content.empty();
		},
		/**
		 * Load a page
		 * 	back if history.back - back icon button
		 */
		_loadPage: function(state, options, back) {
			var self = this;
			self._error = null;
			if (!self.openLinkInVignette || self._stateStack.length == 0) {
				// Clear content only that case. Otherwise we have to store cached paged inside the vignette
				self.clearContent();
			}
			if (!self._pageLoader) {
				/**
				 * Page loader shared with application
				 * Load a page
				 */
				self._pageLoader = new PageLoader({
					waitStop: function() {
						self.waitStop();
					},
					waitStart: function() {
						self.waitStart();
					},
					getRootElmt: function() {
						return self._$$content;
					},
					getCurrentPage: function() {
						return self._currentPage;
					},
					setCurrentPage: function(page) {
						self._currentPage = page;
					},
					setHistory: function(state) {
						// isEditMode: to make lookup working in vignettes
						if (self.openLinkInVignette) {
							self._stateStack.push(state);
						}
					},
					succeeded: function(dstPage, parentNotifInfo) {
						if (self.openLinkInVignette) {
							self.refreshNavBtns();
						}
						if (parentNotifInfo && parentNotifInfo.notifId) {
							/**
							 * _pageNotify  to notify only the page
							 */
							if (dstPage.id === parentNotifInfo.parentId) {
								notifications.pageNotify(parentNotifInfo.notifId, self._currentPage, parentNotifInfo.notifData, parentNotifInfo.controlId);
							} else {
								utils.modalError("Child page notification warning", "Parent page is not the current page");
							}
						}
					},
					loadingError: function(deferred, state, e) {
						self._displayError("Loading page [" + state.name + "] error", e);
						// No reject
						deferred.resolve();
					}
				});
			}
			try {
				var pageInfo;
				if (typeof state === "string") {
					options = options || {};
					options.vignette = true;
					pageInfo = pageHelper.getPageInfo(state, options, self._currentPage);
				} else if (back) {
					pageInfo = state;
				} else {
					throw new Error("Unexpected state");
				}
				if (pageInfo.options && pageInfo.options.$displayStyle === "$full") {
					return self._pageLoader.load(pageInfo, back);
				} else if (options.gadget) {
					var deferred = $.Deferred();
					self._addPicker({
						"data-nav": pageInfo.name,
						"data-gadget-id": options.gadget.data("$uuid"),
						"title": options.gadget.data("$title")
					});
					deferred.resolve();
					return deferred.promise();
				} else {
					throw new Error("Unexpected vignette page");
				}
			} catch (e) {
				self._displayError("Loading page error", e);
			}
		},

		_loadRepresentation: function(gadget, name, options) {
			var self = this;
			options = $.extend({}, options);
			options.$displayStyle = self.displayStyle;
			options.gadget = gadget;
			options.article = self.article && self.article.$article; // sub article in case the layout of a vignette is defined in the dashboard layout
			return self._loadPage(name || gadget.getPageName(), options);
		},

		_displayError: function(msg, detail) {
			var self = this;
			self._error = {
				message: msg,
				detail: detail
			};
			self.$$elmt.addClass("s-m-error");
			self.$$elmt.html(_getHtml("vignetteError", {
				text: "Loading failed"
			}));
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			var html = _getHtml("main", {
				ctrlId: self.id
			});
			if (self._stateStack.length > 0) {
				// There could be cached pages

			} else {
				self.setRootElement(html, $$parent);
				self._$$content = self.$$elmt.children("section");
				self.$$footer = self.$$elmt.children("footer");
				self._$$wait = uiUtils.waitPluginCreate(self.$$elmt.children(".s-m-waiting.wheel"), _waitConfig);
				self._$$waitBckg = self.$$elmt.children(".s-m-waiting.bckg");
			}
		},

		/**
		 * First load of the page
		 */
		load: function(name, options) {
			var self = this;
			options = options || {};
			var deferred = $.Deferred();
			var _finalize = function() {
				deferred.resolve();
			};
			var _fail = function(e) {
				self._displayError(e);
				// Deferred is not rejected because error is displayed in the vignette
				_finalize();
			};
			try {
				var gadget = self.prototype.getVignetteGadget();
				if (gadget && gadget.isValid()) {
					switch (gadget.data("$type")) {
						case "$representation":
						case "$stats":
						case "$request":
							self._loadRepresentation(gadget, name, options).then(function() {
								_finalize();
							}).fail(function(e) {
								_fail(e);
							});
							break;
						case "$dashboard":
							self._loadDashboard(gadget);
							break;
						case "$application":
							self._loadApplication(gadget);
							break;
						case "$external":
							self._loadExternal(gadget);
							break;
						case "$gadgetMissing":
							self._displayError("Referenced gadget does not exist: " + gadget.data("$uuid"));
							break;
						default:
							self._displayError("Unsupported gadget type: " + gadget.data("$type"));
							break;
					}
				} else {
					self._displayError("Invalid gadget" + (gadget ? " [" + gadget.getInvalidReason() + "]" : ""), gadget ? gadget.getJSON() : "Null gadget");
				}
				_finalize();
			} catch (e) {
				_fail(e);
			} finally {
				return deferred.promise();
			}
		},

		_loadDashboard: function(gadget) {
			this._addPicker({
				"data-nav": gadget.data("dashboardName") + "." + constants.DASHBOARD_PAGE_FACET,
				"data-gadget-id": gadget.data("$uuid"),
				"title": gadget.data("$title")
			});
		},

		_loadApplication: function(gadget) {
			this._addPicker({
				"data-nav": gadget.data("applicationName") + ".$application",
				"data-application-name": gadget.data("applicationName"),
				"title": gadget.data("$title")
			});
		},

		_loadExternal: function(gadget) {
			var self = this,
				url = gadget.data("externalUrl");
			self._addPicker({
				"href": url,
				"title": gadget.data("$title")
			});
			if (self.displayStyle !== "$link") {
				var iFrame = _getHtml("iframe", {
					url: url
				});
				$(iFrame).appendTo(self.$$elmt);
			}
		},

		_addPicker: function(context) {
			if (!context.href) context.href = "#";
			$(_getHtml("linkPage", context)).appendTo(this.$$elmt);
		},

		onLayoutChange: function() {
			if (this._currentPage && this._currentPage.rootLayout) {
				this._currentPage.rootLayout.onLayoutChange && this._currentPage.rootLayout.onLayoutChange();
			}
		},
		waitStart: function() {
			uiUtils.waitPluginEnable(this._$$wait);
			this._$$waitBckg.show();
		},
		waitStop: function() {
			uiUtils.waitPluginDisable(this._$$wait);
			this._$$waitBckg.hide();
		},

		refreshNavBtns: function() {
			var self = this;
			if (!self.$$icnBack) {
				$(_getHtml("navgigBtns", {})).prependTo(self.$$footer);
				self.$$icnBack = self.$$footer.find("[data-action=vignetteBack]");
				self.$$icnHome = self.$$footer.find("[data-action=vignetteHome]");
			}
			var l = self._stateStack.length;
			self.$$icnBack.toggle(l > 1);
			self.$$icnHome.toggle(l > 2);
			var show = self._stateStack.length > 1;
			self.$$footer.toggle(show);
			self.$$elmt.toggleClass("footer", show);
		},

		_actVignetteHome: function() {
			var self = this;
			if (self._stateStack.length == 0) return;
			var state = self._stateStack[0];
			self._stateStack = []; // to force clearContent
			self._loadPage(state, null, true);
		},

		_actVignetteBack: function() {
			var self = this;
			if (self._stateStack.length <= 1) return;
			self._stateStack.pop();
			self._loadPage(self._stateStack[self._stateStack.length - 1], null, true);
		},
		_actVignetteError: function() {
			var self = this;
			modal.error("Vignette load error", self._error);
		}


	});

exports.Klass = _Klass;