"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("vignette");
var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var pageHelper = require('syracuse-tablet/html/js/application/pageHelper');
var appFactory = require('syracuse-tablet/html/js/application/appFactory');
var BuilderVignetteHtml = require('syracuse-tablet/html/js/controls/builderVignette').BuilderVignetteHtml;

var _Klass = utils.defineClass(
	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
	}, Base, {
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
		},
		/**
		 * Just create an empty div
		 */
		buildHtml: function(html, controllerDao, buildOptions) {
			var self = this;
			if (!self.builder) {
				self.builder = new BuilderVignetteHtml(self);
			}
			self.builder.buildHtml(html, controllerDao, buildOptions);
		},
		/**
		 * Loaded by dashboard.afterRender
		 * 	Get page html and update $elmt innerHtml
		 **/
		load: function() {
			var self = this;
			var state;
			var deferred = $.Deferred();
			var rejectError = function(e) {
				var msg = "Vignette page [" + (state ? state.name : "?") + "] loading error";
				log && log(msg, e);
				// !! TODO - deferred - this deferred is not correctly rejected - dash-board reject callback is not called - To test
				alert(msg);
				deferred.reject(e);
			};
			try {
				state = self._getPageInfo();
				var dstPage = appFactory.createPage(self.$elmt, state);
				dstPage.load().then(function() {
					self.builder.buildTitle(dstPage);
					dstPage.activate(null, function() {
						deferred.resolve();
					});
				}, rejectError);
			} catch (e) {
				rejectError(e);
			} finally {
				return deferred.promise();
			}
		},

		/**
		 * returns the page.pageInfo of the gadget's page
		 **/
		_getPageInfo: function() {
			var self = this;
			var gadget = self.prototype.data("$gadget");
			var options = {
				"vignette": true,
				// Regular page needs gadget context - Ex create action..
				"gadget-id": gadget.$uuid
			};
			if (gadget.$type === "$representation") {
				var name = gadget.representation + "." + gadget.facet;
				var page = pageHelper.getPageInfo(name, options);
				if (page) return page;
			}
			return reqPage.getPageInfo("vignetteerror", options);
		}
	});

exports.Klass = _Klass;