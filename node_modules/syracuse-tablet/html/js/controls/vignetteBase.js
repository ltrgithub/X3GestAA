"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("vignette");
var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var PageLoader = require('syracuse-tablet/html/js/application/pageLoader').Klass;

var _waitConfig = {
	className: 'waiting-blocks',
	elements: 5,
	auto: true,
	speed: 200
};
var _templates = {
	main: '\
		<div id="{{ctrlId}}" class="s-m-control s-m-vignette-ctrl"> \
			<div class="s-m-vignette-content"> \
			</div> \
			<div class="s-m-vignette-icons"> \
				<div class="s-m-vignette-waiting"> \
					<span class="text">This is to add icons later...</span>\
				</div> \
			</div> \
		</div>\
	',
	iframe: '\
		<br><iframe src="{{url}}" style="position: absolute; top: 0px; left: 0px; height: 100vh; width: 100vh;"/>\
	',
	navgigBtns: '\
		<a href="#" data-action="vignetteBack" class="glyphicon glyphicon-circle-arrow-left" style="display:none"></a>\
		<a href="#" data-action="vignetteHome" class="glyphicon glyphicon-home" style="display:none"></a>\
	'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};


var _Klass = utils.defineClass(

	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
		self._currentPage = null;
		self._pageLoader = null;
		self._$$wait = null;
		self._stateStack = [];
		self.openLinkInVignette = globals.$config("openLinkInVignette");
	}, Base, {
		destroy: function() {
			var self = this;
			uiUtils.waitPluginDestroy(self._$$wait);
			if (self._currentPage) {
				self._currentPage.destroy();
				self._currentPage = null;
			}
			if (self._pageLoader = null) {
				self._pageLoader.destroy();
				self._pageLoader = null;
			}
			Base.prototype.destroy.call(self);
		},
		/**
		 * If vignette contains a page return the control object identified by id
		 */
		getPageControl: function(ctrlId) {
			return this._currentPage && this._currentPage.getControl ? this._currentPage.getControl(ctrlId) : null;
		},

		getPage: function() {
			return this._currentPage;
		},

		/**
		 * Change current page
		 * 	data-nav action has been clicked in a vignette's link
		 * 	we could have a parameter that indicates if the link has to be opened full page or inside the vignette
		 */
		changePage: function(state, options) {
			options = options || {};
			// Always full page
			options.$displayStyle = "$full";
			return this._loadPage(state, options, false);
		},

		/**
		 * Load a page
		 * 	back if history.back - back icon button
		 */
		_loadPage: function(state, options, back) {
			var self = this;
			if (!self._pageLoader) {
				/**
				 * Page loader shared with application
				 * Load a page
				 */
				self._pageLoader = new PageLoader({
					waitStop: function() {
						self.waitStop();
					},
					getRootElmt: function() {
						return self.$$content;
					},
					waitStart: function() {
						self.waitStart();
					},
					getCurrentPage: function() {
						return self._currentPage;
					},
					setCurrentPage: function(page) {
						self._currentPage = page;
					},
					setHistory: function(state) {
						if (self.openLinkInVignette) {
							self._stateStack.push(state);
						}
					},
					succeeded: function() {
						if (self.openLinkInVignette) {
							self.refreshNavBtns();
						}
					}
				});
			}
			var pageInfo;
			if (typeof state === "string") {
				options = options || {};
				options.vignette = true;
				pageInfo = globals.getApplication().getPageInfo(state, options);
			} else if (back) {
				pageInfo = state;
			} else {
				throw new Error("Unexpected state");
			}
			if (pageInfo.options && pageInfo.options.$displayStyle === "$full") {
				return self._pageLoader.load(pageInfo, back);
			} else if (options.gadget) {
				var deferred = $.Deferred();
				self._addPicker({
					"data-nav": pageInfo.name,
					"data-gadget-id": options.gadget.data("$uuid")
				}, options.gadget.data("$title"));
				deferred.resolve();
				return deferred.promise();
			} else {
				throw new Error("Unexpected vignette page");
			}
		},

		_loadRepresentation: function(gadget, name, options) {
			var self = this;
			options = $.extend({}, options);
			options.$displayStyle = self.prototype.data("$displayStyle");
			options.gadget = gadget;
			options.article = self.article && self.article.$article; // sub article in case the layout of a vignette is defined in the dashboard layout
			return self._loadPage(name || gadget.getPageName(), options);
		},

		_loadUnsupported: function(error) {
			return this._loadPage("vignetteerror", {
				error: error,
				$displayStyle: "$full"
			});
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			self.setRootElement(_getHtml("main", {
				ctrlId: self.id
			}), $$parent);
			self.$$content = self.$$elmt.find(".s-m-vignette-content");
			self._$$wait = uiUtils.waitPluginCreate(self.$$elmt.find(".s-m-vignette-waiting"), _waitConfig);
		},

		/**
		 * First load of the page
		 */
		load: function(name, options) {
			var self = this;
			options = options || {};
			var deferred = $.Deferred();
			var gadget, loader;
			self.waitStart();
			var _finalize = function(e) {
				self.waitStop();
				if (e) {
					deferred.resolve();
				} else {
					deferred.reject(e);
				}
			};
			var _fail = function(e) {
				var msg = utils.isError(e) ? e.message + "\n--------------\n" + utils.cleanStack(e.stack) : JSON.stringify(e);
				loader = self._loadUnsupported(msg);
				loader.then(function() {
					_finalize();
				}, function(e) {
					_finalize(e);
				});
			};
			try {
				gadget = self.prototype.getVignetteGadget();
				switch (gadget.data("$type")) {
					case "$representation":
					case "$stats":
					case "$request":
						loader = self._loadRepresentation(gadget, name, options);
						break;
					case "$dashboard":
						loader = self._loadDashboard(gadget);
						break;
					case "$external":
						loader = self._loadExternal(gadget);
						break;
					case "$gadgetMissing":
						loader = self._loadUnsupported("Referenced gadget does not exist: " + gadget.data("$uuid"));
						break;
					default:
						loader = self._loadUnsupported("Unsupported gadget type: " + gadget.data("$type"));
						break;
				}
				if (loader) {
					loader.then(function() {
						_finalize();
					}, function(e) {
						_fail(e);
					});
				} else {
					_finalize();
				}
			} catch (e) {
				_fail(e);
			}
			return deferred.promise();
		},

		_loadDashboard: function(gadget) {
			this._addPicker({
				"data-nav": gadget.data("dashboardName") + ".$dashboard",
				"data-gadget-id": gadget.data("$uuid")
			}, gadget.data("$title"));
			return null;
		},

		_loadExternal: function(gadget) {
			var self = this,
				url = gadget.data("externalUrl");
			var displayStyle = self.prototype.data("$displayStyle");
			self._addPicker({
				"href": url
			}, gadget.data("$title"));
			if (displayStyle !== "$link") {
				var iFrame = _getHtml("iframe", {
					url: url
				});
				$(iFrame).appendTo(self.$$elmt);
			}
			return null;
		},

		_addPicker: function(attrs, title) {
			if (!attrs.href) attrs.href = "#";
			attrs["data-nav-target"] = "application";
			var picker = '<a';
			for (var p in attrs) {
				picker += " " + p + '="' + attrs[p] + '"';
			}
			picker += ">";
			if (title) {
				picker += '<span class="s-m-vignette-link-only">' + title + "</span>";
			}
			picker += "</a>";
			$(picker).appendTo(this.$$elmt);
		},

		onLayoutChange: function() {
			if (this._currentPage && this._currentPage.rootLayout) {
				this._currentPage.rootLayout.onLayoutChange && this._currentPage.rootLayout.onLayoutChange();
			}
		},
		waitStart: function() {
			this._$$wait.waiting("enable");
			this._$$wait.show();
		},
		waitStop: function() {
			this._$$wait.waiting("disable");
			this._$$wait.hide();
		},
		refreshNavBtns: function() {
			self = this;
			if (!self.$$icons) {
				self.$$icons = self.$$elmt.find(".s-m-vignette-icons");
				$(_getHtml("navgigBtns", {})).prependTo(self.$$icons);
				self.$$icnBack = self.$$icons.find("[data-action=vignetteBack]");
				self.$$icnHome = self.$$icons.find("[data-action=vignetteHome]");
				self.$$icnEmpty = self.$$icons.find("span.text");

			}
			var l = self._stateStack.length;
			self.$$icnBack.toggle(l > 1);
			self.$$icnHome.toggle(l > 2);
			self.$$icnEmpty.toggle(l <= 1);
		},

		_actVignetteHome: function() {
			self = this;
			if (self._stateStack.length == 0) return;
			self._loadPage(self._stateStack[0], null, true);
			self._stateStack = [];
		},

		_actVignetteBack: function() {
			self = this;
			if (self._stateStack.length <= 1) return;
			self._stateStack.pop();
			self._loadPage(self._stateStack[self._stateStack.length - 1], null, true);
		}

	});

exports.Klass = _Klass;