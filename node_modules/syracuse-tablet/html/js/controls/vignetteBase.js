"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var uiRect = require('syracuse-tablet/html/js/ui/rect');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var PageLoader = require('syracuse-tablet/html/js/application/pageLoader').Klass;
var pageRegistry = require('syracuse-tablet/html/js/application/pageRegistry');
var modal = require('syracuse-tablet/html/js/ui/modals/modal');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("app");
var actionManager = require('syracuse-tablet/html/js/application/actionManager');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _waitConfig = {
	className: 'waiting-blocks',
	elements: 5,
	auto: true,
	speed: 200
};
var _templates = {
	main: '\
		<section/>\
		<footer style="display:none"/> \
		<div class="s-m-waiting bckg" style="display:none"/> \
		<div class="s-m-waiting wheel" style="display:none"/> \
	',
	iframe: '\
		<br><iframe src="{{url}}" style="position: absolute; top: 0px; left: 0px; height: 100vh; width: 100vh;"/>\
	',
	refreshbtn: '\
		<a draggable="false" href="#" data-action="vignetteRefresh" class="' + fontUtils.vignetteIcons("refresh") + '" style="float:right"></a>\
	',
	navbtns: '\
		<a draggable="false" href="#" data-action="vignetteBack" class="' + fontUtils.vignetteIcons("back") + '" style="display:none"></a>\
		<a draggable="false" href="#" data-action="vignetteHome" class="' + fontUtils.vignetteIcons("home") + '" style="display:none"></a>\
	',
	vignetteError: '\
		<a draggable="false" href="#" data-action="vignetteError">{{text}}</a>\
	',
	linkPage: '\
			<a draggable="false" href="{{href}}"\
				data-nav-target="application"\
				data-nav="{{data-nav}}"\
				data-gadget-id="{{data-gadget-id}}"\
				data-application-name="{{data-application-name}}"\
				data-sdata-parameters="{{data-sdata-parameters}}"\
				class="s-m-link-page">\
					<span class="s-m-link-page-title">{{title}}</span>\
					<div class="s-m-link-page-icon-table">\
						<div class="s-m-link-page-icon-cell">\
							<div class="s-m-link-page-icon {{icon}}"></div>\
						</div>\
					</div>\
			</a>',
	rightpanelactions: '\
		<div class="dropdown" style="float:right">\
		<a id="{{uid}}" type="button" data-toggle="dropdown" aria-haspopup="true" role="button" aria-expanded="false" class="fa fa-caret-square-o-right"></a>\
			<ul class="dropdown-menu" role="menu" aria-labelledby="{{uid}}" style="bottom:100%;top:inherit;right: 0px;left: inherit;">\
				{{#each links}}\
					<li>\
						<a draggable="false" href="#" class="{{css}}" data-action="leftPanel" data-params="{{$uuid}}" data-control-id="{{../ctrlId}}">\
							<i style="font-size: large" class="{{icon}}"/>\
							<span>{{title}}</span>\
						</a>\
					</li>\
				{{/each}}\
	    	</ul>\
		</div>\
		'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};


var _Klass = utils.defineClass(

	function(controller, article, prototype, opts) {
		var self = this;
		article.$article = article.$article || {};
		Base.call(self, controller, article, prototype, opts);
		self._currentPage = null;
		self._pageLoader = null;
		self._$$wait = null;
		self._stateStack = [];
		self._error = null;
		self.displayStyle = prototype.data("$displayStyle");
		self.openLinkInVignette = globals.$config("openLinkInVignette");
		self.enableRefresh = false;
		self.enableLeftPanelAcions = true;
	}, Base, {
		destroy: function() {
			var self = this;
			self._error = null;
			// destroy all pages attached to the vignette
			self.clearContent();
			uiUtils.waitPluginDestroy(self._$$wait);
			if (self._pageLoader = null) {
				self._pageLoader.destroy();
				self._pageLoader = null;
			}
			Base.prototype.destroy.call(self);
		},
		/**
		 * If vignette contains a page return the control object identified by id
		 */
		getPageControl: function(ctrlId) {
			return this._currentPage && this._currentPage.getControl ? this._currentPage.getControl(ctrlId) : null;
		},
		getPage: function() {
			return this._currentPage;
		},
		onMainPageResize: function(info, orientation, deviceClass) {
			if (this._currentPage == null || this._currentPage.state.options.$displayStyle !== "$full") return;
			this._currentPage.onMainPageResize();
		},
		/**
		 * Change current page - called from eventListener
		 * 	data-nav action has been clicked in a vignette's link
		 * 	we could have a parameter that indicates if the link has to be opened full page or inside the vignette
		 */
		changePage: function(state, options) {
			options = options || {};
			// Propagate openLinkInVignette to child page - used to open reflinks...
			options.openLinkInVignette = this._openLinkInsideVignette();
			// Always full page
			options.$displayStyle = "$full";
			this._loadPage(state, options);
		},
		/**
		 * Refresh current page - called from eventListener
		 */
		refreshPage: function(options) {
			var self = this;
			if (!self._currentPage) throw new Error("No current page");
			if (self._error) this._removeError();
			self._currentPage.refresh(options, {
				waitStart: function(controlId) {
					// Wait managed by vignette
					self.waitStart();
				},
				waitStop: function(controlId) {
					self.waitStop();
				}
			}).then(function() {
				//	Eventually do something in vignette control	
			}).fail(function(e) {
				modal.error("Refresh page on vignette", e);
			});
		},
		hasBtnsBar: function() {
			return this._openLinkInsideVignette() || this.enableRefresh || this.enableLeftPanelAcions;
		},
		clearContent: function() {
			var self = this;
			if (self._$$content) {
				globals.getApplication().removeAllChildPages(self._$$content);
				self._$$content.empty();
			}
			// _currentPage has been destroyed by removeAllPages
			if (self._currentPage) self._currentPage = null;
			self._stateStack = [];
		},
		_openLinkInsideVignette: function(state) {
			if (this.openLinkInVignette === true) return true;
			var name;
			if (state == null) {
				name = this._currentPage ? this._currentPage.state.name : null;
			} else if ($.isPlainObject(state)) {
				name = state.name;
			} else {
				name = state;
			}
			if (typeof name === "string" && (name === "rowdetail" || name.smEndsWith("$lookup"))) this.openLinkInVignette = true;
			if (this._currentPage && this._currentPage.isChild) this.openLinkInVignette = true;;
			return this.openLinkInVignette;
		},
		/**
		 * Load a page
		 * 	action: 	back for a back in vignette actions
		 * 				home for a home in vignette actions
		 */
		_loadPage: function(state, options, action) {
			var self = this;
			self._error = null;
			if (self._actionManager) {
				self._actionManager.destroy();
				self._actionManager = null;
			}
			if (!self._openLinkInsideVignette(state) && self._stateStack.length > 0) {
				// Clear content only that case. Otherwise we have to store cached paged inside the vignette
				self.clearContent();
			}
			if (!self._pageLoader) {
				self._initPageLoader();
			}
			return $.smResolve().
			then(function() {
				var pageInfo;
				var articleCopy;
				if (typeof state === "string") {
					options = options || {};
					options.vignette = true;
					articleCopy = options.article; // Backup of original article, this MUST NOT be cloned
					return pageRegistry.getPageInfo(state, options, self._currentPage)
						.then(function(pageInfo) {
							if (articleCopy && pageInfo.options) {
								pageInfo.options.article = articleCopy;
							}
							return pageInfo;
						});
				} else if (action === "back" || action === "home") {
					return state;
				} else {
					throw new Error("Unexpected object state");
				}
			})
				.then(function(pageInfo) {
					if (pageInfo.options && pageInfo.options.$displayStyle === "$full") {
						// action "home" is not a back. It's like an open page because we want to store the state in history
						return self._pageLoader.load(pageInfo, action === "back");
					} else if (options.gadget) {
						var icon = options.gadget.data("icon");
						icon = icon || self.article && self.article.$icon;
						if (icon) {
							icon = "fa fa-" + icon;
						}
						self._addPicker({
							"data-nav": pageInfo.name,
							"data-gadget-id": options.gadget.data("$uuid"),
							"data-application-name": options.gadget.data("applicationName"),
							"title": options.gadget.data("$title"),
							"icon": icon
						});
						return $.smResolve();
					} else {
						throw new Error("Unexpected vignette page");
					}
				})
				.fail(function(e) {
					self._displayError("Loading page error", e);
				});
		},

		_initPageLoader: function() {
			var self = this;
			/**
			 * Page loader shared with application
			 * Load a page
			 */
			self._pageLoader = new PageLoader({
				waitStop: function() {
					self.waitStop();
				},
				waitStart: function() {
					self.waitStart();
				},
				getRootElmt: function() {
					return self._$$content;
				},
				getCurrentPage: function() {
					return self._currentPage;
				},
				setCurrentPage: function(page) {
					self._currentPage = page;
					self._currentPage.setParentVignette(self);
				},
				historyPush: function(state) {
					// Add state in stack in all case - We need it for link to row Detail
					self._stateStack.push(state);
				},
				succeeded: function(dstPage, parentNotifInfo, back) {
					if (!self.controller) return; //Vignette destroyed before end of load process
					if (self.enableLeftPanelAcions) {
						self._actionManager = actionManager.create(dstPage, "actionpanel");

					}
					if (self.hasBtnsBar()) {
						self.refreshBtnsBar();
					}
					if (parentNotifInfo && parentNotifInfo.notifId) {
						/**
						 * _notifyController  to notify only the page
						 */
						if (dstPage.id === parentNotifInfo.parentId) {
							notifications.notifyController(parentNotifInfo.notifId, self._currentPage, parentNotifInfo.notifData, parentNotifInfo.controlId);
						} else {
							modal.error("Child page notification warning", "Parent page is not the current page");
						}
					}
					// page has been loaded - Used to prevent multiple onresize calls to current page
					log && log("vignette loaded" + self.id);
					// Call resize handler each time a page has been loaded for calculations
					if (dstPage.state.options.$displayStyle === "$full") {
						dstPage.onMainPageResize();
					}
				},
				loadingError: function(deferred, state, e) {
					self._displayError(locale.text("error.page.loading"), e);
					// No reject
					deferred.resolve();
				},
				/**
				 * Specific interface method for vignettes
				 * Returns the context of a page nested in a vignette and also context of the vignette (selection)
				 * Called by the pageLoader after the vignette has been displayed
				 */
				savedCtxVignette: function() {
					// It's the dashboard that manage the storage
					if (!self.controller) {
						//Page has been destroyed before calling this method
						// If we have multiple vignettes and we click a link before all vignettes has been displayed we get this case
						return;
					}
					return self.controller.savedCtxVignette(self);
				}
			});
		},

		_loadRepresentation: function(gadget, name, options) {
			var self = this;
			var name = name || gadget.getPageName();
			options = $.extend({}, options);
			options.openLinkInVignette = self._openLinkInsideVignette(name);
			options.$displayStyle = self.displayStyle;
			options.gadget = gadget;
			options.article = self.article.$article; // sub article in case the layout of a vignette is defined in the dashboard layout
			options.layoutPath = self.getAuthoringPath() + "-0";
			return self._loadPage(name, options);
		},

		_displayError: function(msg, detail) {
			var self = this;
			self._error = {
				message: msg,
				detail: detail
			};
			if (self.$$elmt) {
				self._$$content.hide();
				self.$$elmt.addClass("s-m-error");
				self.$$elmt.prepend(_getHtml("vignetteError", {
					text: "Loading failed"
				}));
				self.refreshBtnsBar();
			} else {
				alert(msg + "\n\n" + detail);
			}
		},

		_removeError: function() {
			this.$$elmt.children('a[data-action="vignetteError"]').remove();
			this.$$elmt.removeClass("s-m-error");
			this._$$content.show();
			this._error = null;
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			if (self._stateStack.length > 0) {
				// There could be cached pages

			} else {
				Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions, ["s-m-vignette"]);
				self.$$elmt.html(_getHtml("main", {}));
				self._$$content = self.$$elmt.children("section");
				self.$$footer = self.$$elmt.children("footer");
				self._$$wait = uiUtils.waitPluginCreate(self.$$elmt.children(".s-m-waiting.wheel"), _waitConfig);
				self._$$waitBckg = self.$$elmt.children(".s-m-waiting.bckg");
			}
		},

		/**
		 * First load of the page
		 */
		load: function(name, options) {
			var self = this;
			options = options || {};
			var deferred = $.Deferred();
			var _finalize = function() {
				deferred.resolve();
			};
			var _fail = function(e) {
				self._displayError(e);
				// Deferred is not rejected because error is displayed in the vignette
				_finalize();
			};
			try {
				var gadget = self.prototype.getVignetteGadget();
				if (gadget && gadget.isValid()) {
					if (options.resize === true) {
						// Always clear content if resize to rebuild a new one
						this.clearContent();
					}
					switch (gadget.data("$type")) {
						case "$representation":
						case "$stats":
						case "$request":
							self._loadRepresentation(gadget, name, options).then(function() {
								_finalize();
							}).fail(function(e) {
								_fail(e);
							});
							break;
						case "$dashboard":
							self._loadDashboard(gadget);
							break;
						case "$application":
							self._loadApplication(gadget);
							break;
						case "$external":
							self._loadExternal(gadget);
							break;
						case "$gadgetMissing":
							self._displayError("Referenced gadget does not exist: " + gadget.data("$uuid"));
							break;
						default:
							self._displayError("Unsupported gadget type: " + gadget.data("$type"));
							break;
					}
				} else {
					self._displayError("Invalid gadget" + (gadget ? " [" + gadget.getInvalidReason() + "]" : ""), gadget ? gadget.getJSON() : "Null gadget");
				}
				_finalize();
			} catch (e) {
				_fail(e);
			} finally {
				return deferred.promise();
			}
		},

		_loadDashboard: function(gadget) {
			var self = this;
			var icon = gadget.data("icon");
			icon = icon || self.article && self.article.$icon;
			if (icon) {
				icon = "fa fa-" + icon;
			}
			this._addPicker({
				"data-nav": globals.getMetaData().getDashboardPageName(gadget.data("dashboardName")),
				"data-application-name": gadget.data("applicationName"),
				"data-gadget-id": gadget.data("$uuid"),
				"data-sdata-parameters": gadget.data("sdataParameters"),
				"title": gadget.data("$title"),
				"icon": icon,
			});
		},

		_loadApplication: function(gadget) {
			var self = this;
			var icon = gadget.data("icon");
			icon = icon || self.article && self.article.$icon;
			if (icon) {
				icon = "fa fa-" + icon;
			}

			this._addPicker({
				"data-application-name": gadget.data("applicationName"),
				"title": gadget.data("$title"),
				"icon": icon,
			});
		},

		_loadExternal: function(gadget) {
			var self = this,
				url = gadget.data("externalUrl");
			self._addPicker({
				"href": url,
				"title": gadget.data("$title")
			});
			if (self.displayStyle !== "$link") {
				var iFrame = _getHtml("iframe", {
					url: url
				});
				$(iFrame).appendTo(self._$$content);
			}
		},

		_addPicker: function(context) {
			if (!context.href) context.href = "#";
			$(_getHtml("linkPage", context)).appendTo(this._$$content);
		},

		waitStart: function() {
			uiUtils.waitPluginEnable(this._$$wait);
			this._$$waitBckg.show();
		},
		waitStop: function() {
			uiUtils.waitPluginDisable(this._$$wait);
			this._$$waitBckg.hide();
		},

		refreshBtnsBar: function() {
			var self = this;
			var show = false;
			if (self._actionManager && self._actionManager.hasLinks()) {
				if (!self.$$leftPanelActs) {
					self.$$leftPanelActs = $(_getHtml("rightpanelactions", {
						ctrlId: self.id,
						links: self._actionManager.getLinks(),
						uid: utils.UUID()
					}));
					self.$$footer.prepend(self.$$leftPanelActs);
				}
				show = true;
			}
			if (self._openLinkInsideVignette()) {
				if (!self.$$icnBack) {
					self.$$footer.prepend(_getHtml("navbtns"));
					self.$$icnBack = self.$$footer.children("[data-action=vignetteBack]");
					self.$$icnHome = self.$$footer.children("[data-action=vignetteHome]");
				}
				var l = self._stateStack.length;
				self.$$icnBack.toggle(l > 1);
				self.$$icnHome.toggle(l > 2);
				show = self._stateStack.length > 1;
			}
			if (self.enableRefresh) {
				if (!self.$$refresh) {
					self.$$footer.prepend(_getHtml("refreshbtn"));
					self.$$refresh = self.$$footer.children("[data-action=vignetteRefresh]");
				}
				show = true;
			}
			self.$$footer.toggle(show);
			self.$$elmt.toggleClass("footer", show);
		},

		_actVignetteHome: function() {
			var self = this;
			if (self._stateStack.length == 0) return;
			var state = self._stateStack[0];
			self._stateStack = []; // to force clearContent
			self._loadPage(state, null, "home");
		},

		_actVignetteBack: function() {
			var self = this;
			if (self._stateStack.length <= 1) return;
			self._stateStack.pop();
			// !!! true for BACK in order to unstack the current page
			self._loadPage(self._stateStack[self._stateStack.length - 1], null, "back");
		},
		_actVignetteError: function() {
			var self = this;
			if (self._error.detail) {
				modal.error(self._error.message, self._error.detail);
			} else {
				modal.error("Vignette load error", self._error);
			}
		},
		_actVignetteRefresh: function() {
			this.refreshPage({});
		},
		_actLeftPanel: function(uuid) {
			// CLose the dropdown box - Don't know why we have to do that...
			this.$$leftPanelActs.find('[data-toggle="dropdown"]').dropdown('toggle');
			if (this._actionManager) {
				this._actionManager.triggerLink(uuid).then(function(success, link, data, options) {
					globals.getModal().displayActionMsg(success, link.name, null, data);
				}).fail(function() {});
			}
		},
		isOverflow: function() {
			if (!this._currentPage) return;
			return (this._currentPage.$$elmt.height() - this.$$elmt.height()) > 0;

		},
		getScrollViewRect: function() {
			return uiRect.elmtRect(this._$$content, "inner");
		}
	});

exports.Klass = _Klass;