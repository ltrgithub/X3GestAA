"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var uiRect = require('syracuse-tablet/html/js/ui/rect');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var PageLoader = require('syracuse-tablet/html/js/application/pageLoader').Klass;
var pageRegistry = require('syracuse-tablet/html/js/application/pageRegistry');
var modal = require('syracuse-tablet/html/js/ui/modals/modal');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("app");
var locale = require('syracuse-tablet/html/js/helpers/locale');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');


var _waitConfig = {
	className: 'waiting-blocks',
	elements: 5,
	auto: true,
	speed: 200
};
var _templates = {
	main: '\
		<section/>\
		<footer style="display:none"/> \
		<div class="s-m-waiting bckg" style="display:none"/> \
		<div class="s-m-waiting wheel" style="display:none"/> \
	',
	iframe: '\
		<br><iframe src="{{url}}" style="position: absolute; top: 0px; left: 0px; height: 100vh; width: 100vh;"/>\
	',
	navbtns: '\
		<a draggable="false" href="#" data-action="vignetteBack" class="' + fontUtils.vignetteIcons("back") + '" style="display:none"></a>\
		<a draggable="false" href="#" data-action="vignetteHome" class="' + fontUtils.vignetteIcons("home") + '" style="display:none"></a>\
	',
	vignetteError: '\
		<a draggable="false" href="#" data-action="vignetteError">{{text}}</a>\
	',
	linkPage: '\
		<a draggable="false" href="{{href}}"\
			data-nav-target="application"\
			data-nav="{{data-nav}}"\
			{{#if data-link-article}} data-link-article="{{data-link-article}}"{{/if}}\
			data-gadget-id="{{data-gadget-id}}"\
			data-application-name="{{data-application-name}}"\
			data-sdata-parameters="{{data-sdata-parameters}}"\
			class="s-m-link-page">\
				{{#if icon}}\
					<section class="s-m-icon">\
						<div>\
							<div class="{{icon}}"></div>\
						</div>\
					</section>\
				{{/if}}\
				<section class="s-m-title">\
					<div>{{title}}</div>\
				</section>\
		</a>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};


var _Klass = utils.defineClass(

	function VignetteBase(controller, article, prototype, opts) {
		var self = this;
		article.$article = article.$article || {};
		Base.call(self, controller, article, prototype, opts);
		self._currentPage = null;
		self._pageLoader = null;
		self._$$wait = null;
		self._stateStack = [];
		self._error = null;
		self.displayStyle = prototype.data("$displayStyle");
		self.openLinkInVignette = globals.$config("openLinkInVignette");
		notifications.subscribe(this, ["sm.vignette.pinned"]);
	}, Base, {
		destroy: function() {
			this._error = null;
			// destroy all pages attached to the vignette
			this.clearContent();
			if (this._$$wait) {
				uiUtils.waitPluginDestroy(this._$$wait);
			}
			if (this._pageLoader) {
				this._pageLoader.destroy();
				this._pageLoader = null;
			}
			if (this._savedPageControl) {
				this._savedPageControl.destroy();
				this._savedPageControl = null;
			}
			if (this._actionControl) {
				this._actionControl.destroy();
				this._actionControl = null;
			}
			Base.prototype.destroy.call(this);
		},
		/**
		 * If vignette contains a page return the control object identified by id
		 */
		getPageControl: function(ctrlId) {
			return this._currentPage && this._currentPage.getControl && this._currentPage.getControl(ctrlId);
		},
		getPageLayout: function(id) {
			return this._currentPage && this._currentPage.getLayout && this._currentPage.getLayout(id);
		},
		getPageStructElmt: function(id) {
			return this.getPageControl(id) || this.getPageLayout(id);
		},
		getPage: function() {
			return this._currentPage;
		},
		onMainPageResize: function(info, orientation, deviceClass) {
			if (this._currentPage == null || this._currentPage.state.options.$displayStyle !== "$full") return;
			this._currentPage.onMainPageResize(info, orientation, deviceClass);
		},
		/**
		 * Change current page - called from eventListener
		 * 	data-nav action has been clicked in a vignette's link
		 * 	we could have a parameter that indicates if the link has to be opened full page or inside the vignette
		 */
		changePage: function(state, options) {
			options = options || {};
			// Propagate openLinkInVignette to child page - used to open reflinks...
			options.openLinkInVignette = this._openLinkInsideVignette();
			// Always full page
			options.$displayStyle = "$full";
			this._loadPage(state, options);
		},
		/**
		 * Refresh current page - called from eventListener
		 */
		refreshPage: function(options) {
			var self = this;
			if (!self._currentPage) throw new Error("No current page");
			if (self._error) this._removeError();
			self._currentPage.refresh(options, {
				waitStart: function(controlId) {
					// Wait managed by vignette
					self.waitStart();
				},
				waitStop: function(controlId) {
					self.waitStop();
				}
			}).then(function() {
				//	Eventually do something in vignette control	
			}).fail(function(e) {
				modal.error(locale.text("err.load.main"), e);
			});
		},
		hasBtnsBar: function() {
			return this._openLinkInsideVignette();
		},
		clearContent: function() {
			if (this._$$content) {
				globals.getApplication().removeAllChildPages(this._$$content);
				this._$$content.empty();
			}
			// _currentPage has been destroyed by removeAllPages
			if (this._currentPage) this._currentPage = null;
			this._stateStack = [];
		},
		_openLinkInsideVignette: function(state) {
			if (this.openLinkInVignette === true) return true;
			var name;
			if (state == null) {
				name = this._currentPage ? this._currentPage.state.name : null;
			} else if ($.isPlainObject(state)) {
				name = state.name;
			} else {
				name = state;
			}
			if (typeof name === "string" && (name === "rowdetail" || name === "carddesign" || name.smEndsWith("$lookup"))) this.openLinkInVignette = true;
			if (this._currentPage && this._currentPage.isChild) this.openLinkInVignette = true;;
			return this.openLinkInVignette;
		},
		/**
		 * Load a page
		 * 	state
		 * 				state of the  page - stored in page object
		 * 	pageOptions
		 * 				options of the  page - stored in page object
		 * 	action: 	back for a back in vignette actions
		 * 				home for a home in vignette actions
		 * 	loadOptions
		 * 				updateLayout...
		 */
		_loadPage: function(state, pageOptions, action, loadOptions) {
			var self = this;
			self._error = null;
			if (!self._openLinkInsideVignette(state) && self._stateStack.length > 0) {
				// Clear content only that case. Otherwise we have to store cached paged inside the vignette
				self.clearContent();
			}
			if (!self._pageLoader) {
				self._initPageLoader();
			}
			return $.smResolve().then(function() {
				var pageInfo;
				var articleCopy;
				if (typeof state === "string") {
					pageOptions = pageOptions || {};
					pageOptions.vignette = true;
					articleCopy = pageOptions.vignetteArticle; // Backup of original article, this MUST NOT be cloned
					return pageRegistry.getPageInfo(state, pageOptions, self._currentPage)
						.then(function(pageInfo) {
							if (articleCopy && pageInfo.options) {
								pageInfo.options.vignetteArticle = articleCopy;
							}
							return pageInfo;
						});
				} else if (action === "back" || action === "home") {
					return state;
				} else {
					throw new Error("Unexpected object state");
				}
			}).then(function(pageInfo) {
				if (pageInfo.options && pageInfo.options.$displayStyle === "$full") {
					// action "home" is not a back. It's like an open page because we want to store the state in history
					return self._pageLoader.load(pageInfo, action === "back", loadOptions);
				} else if (pageOptions.gadget) {
					var icon = self._getCssIcon(pageOptions.gadget, "s-m-sage-gadget-icon");
					var attrs = {
						"data-nav": pageInfo.name,
						"data-gadget-id": pageOptions.gadget.data("$uuid"),
						"data-application-name": pageOptions.gadget.data("applicationName"),
						"title": self.article && self.article.$article && self.article.$article.$title ? self.article.$article.$title : pageOptions.gadget.data("$title"),
						"icon": icon
					};
					if (pageInfo.options.$displayStyle === "$link" && self.article && self.article.$linkArticle) {
						// Used by test entities to pass an article to the page
						attrs["data-link-article"] = self.id;
					}
					self._addPicker(attrs);
					return $.smResolve();
				} else {
					throw new Error("Unexpected vignette page");
				}
			})
				.fail(function(e) {
					self._displayError("Loading page error", e);
				});
		},

		_initPageLoader: function() {
			var self = this;
			/**
			 * Page loader shared with application
			 * Load a page
			 */
			self._pageLoader = new PageLoader({
				waitStop: function() {
					self.waitStop();
				},
				waitStart: function() {
					self.waitStart();
				},
				getRootElmt: function() {
					return self._$$content;
				},
				getCurrentPage: function() {
					return self._currentPage;
				},
				setCurrentPage: function(page) {
					self._currentPage = page;
					self._currentPage.setParentVignette(self);
				},
				historyPush: function(state) {
					// Add state in stack in all case - We need it for link to row Detail
					self._stateStack.push(state);
				},
				succeeded: function(dstPage, pageToClose, parentNotifInfo, back, loadOptions) {
					if (!self.controller) return; //Vignette destroyed before end of load process
					if (self.hasBtnsBar()) {
						self.refreshBtnsBar();
					}
					if (parentNotifInfo && parentNotifInfo.notifId) {
						/**
						 * _notifyController  to notify only the page
						 */
						if (dstPage.id === parentNotifInfo.parentId) {
							notifications.notifyController(parentNotifInfo.notifId, self._currentPage, parentNotifInfo.notifData, parentNotifInfo.controlId);
						} else {
							modal.error("Child page notification warning", "Parent page is not the current page");
						}
					}
					// page has been loaded - Used to prevent multiple onresize calls to current page
					log && log("vignette loaded" + self.id);
					// Call resize handler each time a page has been loaded for calculations
					if (dstPage.state.options.$displayStyle === "$full") {
						/* setTimeout to resize dstPage after current process - #5737*/
						self._initActionDashboard(dstPage);
						setTimeout(function() {
							dstPage.onMainPageResize({
								updateLayout: back === true || (loadOptions && loadOptions.updateLayout)
							});
						});
					}
				},
				loadingError: function(deferred, state, e) {
					self._displayError(locale.text("error.page.loading"), e);

					// No reject
					deferred.resolve(null, e);
				},
				/**
				 * Specific interface method for vignettes
				 * Returns the context of a page nested in a vignette and also context of the vignette (selection)
				 * Called by the pageLoader after the vignette has been displayed
				 */
				savedCtxVignette: function() {
					// It's the dashboard that manage the storage
					if (!self.controller) {
						//Page has been destroyed before calling this method
						// If we have multiple vignettes and we click a link before all vignettes has been displayed we get this case
						return;
					}
					return self.controller.savedCtxVignette(self);
				}
			});
		},
		/**
		 * If multiselection is enabled for the page we enable the switch of footer
		 * An icon in tile's title allows the user to swicth the current footer by the one of the nested page (dstPage)
		 */
		_initActionDashboard: function(dstPage) {
			try {
				// TODO Check authoring
				var tile = this.getParentTile();
				if (!tile) return;
				if (!dstPage || !dstPage.isMultiSelectionEnabled()) return;
				var typeControl = globals.getSiteLayout().getDeviceType() == "smartphone" ? "header" : "footer";
				if (!this._actionControl) {
					this._actionControl = ctrlFactory.createActionControl(typeControl, this);
				}
				// Create the top/right icon to enable/disable the multi-selection mode
				tile.iconActionAdd("togglePinVignette", this, fontUtils.getPinVignetteIcon("off"));
				this._isPinned = false;
			} catch (e) {
				this._displayError("Pin vignette init error", e.stack);
			}
		},
		/**
		 * Click on icon in tile's header
		 */
		_actTogglePinVignette: function() {
			//!! notifications is synchrounous - We must disable the current enabled tile (if any) before enabling this.getParentTile
			notifications.publish("synch.sm.vignette.pinned", this.id);
			// Toggles current vignettes status
			this._doTogglePinVignette(this.id);
		},
		/**
		 * Toggle the status of vignettes other than the vignette that has publihed the notification
		 */
		notifVignettePinned: function(id) {
			if (this.id == id) return;
			this._doTogglePinVignette(id);
		},
		/**
		 * Toggle icon status and switchs the footer
		 */
		_doTogglePinVignette: function(id) {
			try {
				if (!this._actionControl || (id != this.id && !this._isPinned)) return;
				var tile = this.getParentTile();
				if (!tile) return;
				this._isPinned = id != this.id ? false : !this._isPinned;
				// Toggle status and header icon
				tile.iconActionToggleStatus("togglePinVignette", this._isPinned, {
					remove: fontUtils.getPinVignetteIcon("all"),
					add: fontUtils.getPinVignetteIcon(this._isPinned ? "on" : "off")
				});
				var typeControl = globals.getSiteLayout().getDeviceType() === "smartphone" ? "header" : "footer";
				this._savedPageControl = this.controller.toggleHeaderFooter(typeControl, this._isPinned ? this._actionControl : this._savedPageControl);
			} catch (e) {
				this._displayError("Pin vignette error", e.stack);
			}
		},

		_loadRepresentation: function(gadget, name, pageOptions, loadOptions) {
			var self = this;
			var name = name || gadget.getPageName();
			pageOptions = $.extend({}, pageOptions);
			pageOptions.openLinkInVignette = self._openLinkInsideVignette(name);
			pageOptions.$displayStyle = self.displayStyle;
			pageOptions.gadget = gadget;
			pageOptions.vignetteArticle = self.article.$article; // sub article in case the layout of a vignette is defined in the dashboard layout
			return self._loadPage(name, pageOptions, null, loadOptions);
		},

		_displayError: function(msg, detail) {
			var self = this;
			self._error = {
				message: msg,
				detail: detail
			};
			if (self.$$elmt) {
				self._$$content.hide();
				self.$$elmt.addClass("s-m-error");
				self.$$elmt.prepend(_getHtml("vignetteError", {
					text: "Loading failed"
				}));
				self.refreshBtnsBar();
			} else {
				alert(msg + "\n\n" + detail);
			}
		},

		_removeError: function() {
			this.$$elmt.children('a[data-action="vignetteError"]').remove();
			this.$$elmt.removeClass("s-m-error");
			this._$$content.show();
			this._error = null;
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			if (self._stateStack.length > 0) {
				// There could be cached pages

			} else {
				Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions, ["s-m-vignette"]);
				self.$$elmt.html(_getHtml("main", {}));
				self._$$content = self.$$elmt.children("section");
				self.$$footer = self.$$elmt.children("footer");
				self._$$waitBckg = self.$$elmt.children(".s-m-waiting.bckg");
			}
		},

		/**
		 * First load of the page
		 */
		load: function(name, pageOptions, loadOptions) {
			var self = this;
			pageOptions = pageOptions || {};

			var deferred = $.Deferred();

			var _finalize = function(page, error) {
				deferred.resolve(page, error);
			};
			var _fail = function(e) {
				self._displayError(e);
				// Deferred is not rejected because error is displayed in the vignette
				_finalize();
			};
			try {
				var gadget = self.prototype.getVignetteGadget();
				if (gadget && gadget.isValid()) {
					if (pageOptions.resize === true) {
						// Always clear content if resize to rebuild a new one
						this.clearContent();
					}
					switch (gadget.data("$type")) {
						case "$representation":
						case "$stats":
						case "$request":
							self._loadRepresentation(gadget, name, pageOptions, loadOptions)
								.then(function(page, error) {
									_finalize(page, error);
								})
								.fail(function(e) {
									_fail(e);
								});
							break;
						case "$dashboard":
							self._loadDashboard(gadget);
							_finalize();
							break;
						case "$application":
							self._loadApplication(gadget);
							_finalize();
							break;
						case "$external":
							self._loadExternal(gadget);
							_finalize();
							break;
						case "$gadgetMissing":
							self._displayError("Referenced gadget does not exist: " + gadget.data("$uuid"));
							_finalize();
							break;
						default:
							self._displayError("Unsupported gadget type: " + gadget.data("$type"));
							_finalize();
							break;
					}
				} else {
					self._displayError("Invalid gadget" + (gadget ? " [" + gadget.getInvalidReason() + "]" : ""), gadget ? gadget.getJSON() : "Null gadget");
					_finalize();
				}
			} catch (e) {
				_fail(e);
			} finally {
				return deferred.promise();
			}
		},

		_getCssIcon: function(gadget, sageBaseCss) {
			var icon = gadget.data("icon") || this.article && this.article.$icon;
			if (icon) {
				if (icon.smStartsWith("sage")) {
					// our own gadget icons
					icon = sageBaseCss + " " + icon;
				} else {
					// FontAwesome
					icon = fontUtils.getIconByName(icon);
				}
			}
			return icon || "";
		},

		_loadDashboard: function(gadget) {
			this._addPicker({
				"data-nav": globals.getMetaData().getDashboardPageName(gadget.data("dashboardName")),
				"data-application-name": gadget.data("applicationName"),
				"data-gadget-id": gadget.data("$uuid"),
				"data-sdata-parameters": gadget.data("sdataParameters"),
				"title": gadget.data("$title"),
				"icon": this._getCssIcon(gadget, "dash")
			});
		},

		_loadApplication: function(gadget) {
			this._addPicker({
				"data-application-name": gadget.data("applicationName"),
				"title": gadget.data("$title"),
				"icon": this._getCssIcon(gadget, "s-m-sage-app-icon"),
			});
		},

		_loadExternal: function(gadget) {
			var self = this,
				url = gadget.data("externalUrl");
			self._addPicker({
				"href": url,
				"title": gadget.data("$title")
			});
			if (self.displayStyle !== "$link") {
				var iFrame = _getHtml("iframe", {
					url: url
				});
				$(iFrame).appendTo(self._$$content);
			}
		},

		_addPicker: function(context) {
			if (!context.href) context.href = "#";
			$(_getHtml("linkPage", context)).appendTo(this._$$content);
		},

		waitStart: function() {
			var self = this;
			if (!self._$$wait) {
				self._$$wait = uiUtils.waitPluginCreate(self.$$elmt.children(".s-m-waiting.wheel"), _waitConfig);
			}
			uiUtils.waitPluginEnable(this._$$wait);
			this._$$waitBckg.show();
		},
		waitStop: function() {
			var self = this;
			if (self._$$wait) {
				uiUtils.waitPluginDisable(this._$$wait);
			}
			this._$$waitBckg.hide();
		},

		refreshBtnsBar: function() {
			var self = this;
			if (self._openLinkInsideVignette()) {
				var show = false;
				if (!self.$$icnBack) {
					self.$$footer.prepend(_getHtml("navbtns"));
					self.$$icnBack = self.$$footer.children("[data-action=vignetteBack]");
					self.$$icnHome = self.$$footer.children("[data-action=vignetteHome]");
				}
				var l = self._stateStack.length;
				self.$$icnBack.toggle(l > 1);
				self.$$icnHome.toggle(l > 2);
				show = self._stateStack.length > 1;
				self.$$footer.toggle(show);
				self.$$elmt.toggleClass("footer", show);
			}
		},

		_actVignetteHome: function() {
			var self = this;
			if (self._stateStack.length == 0) return;
			var state = self._stateStack[0];
			self._stateStack = []; // to force clearContent
			self._loadPage(state, null, "home");
		},

		_actVignetteBack: function() {
			var self = this;
			if (self._stateStack.length <= 1) return;
			self._stateStack.pop();
			// !!! true for BACK in order to unstack the current page
			self._loadPage(self._stateStack[self._stateStack.length - 1], null, "back");
		},
		_actVignetteError: function() {
			var self = this;
			if (self._error.detail) {
				modal.error(self._error.message, self._error.detail);
			} else {
				modal.error("Vignette load error", self._error);
			}
		},
		_actVignetteRefresh: function() {
			this.refreshPage({});
		},
		isOverflow: function() {
			if (!this._currentPage) return;
			return (this._currentPage.$$elmt.height() - this.$$elmt.height()) > 0;

		},
		getScrollViewRect: function() {
			return uiRect.elmtRect(this._$$content, "inner");
		},
		isVignette: function() {
			return true;
		},
		// Only for test entities - We can attache an article to a $link vignette
		getLinkedPageArticle: function() {
			return this.article ? this.article.$linkArticle : null;
		},
		getParentTile: function() {
			var p = this.parent;
			while (p && p != this.controller && !jsutils.isInstanceOf(p, "LayoutTile")) {
				p = p.parent;
			}
			return p && p != this.controller ? p : null;
		}
	});

exports.Klass = _Klass;