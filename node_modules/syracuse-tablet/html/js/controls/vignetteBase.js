"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("vignette");
var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var appFactory = require('syracuse-tablet/html/js/application/appFactory');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');

var _Klass = utils.defineClass(

	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
	}, Base, {
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
		},
		/**
		 * Just create an empty div
		 */
		buildHtml: function(parent, controllerDao, buildOptions) {
			var self = this;
			var container = uiUtils.createDomElement("div", ["s-m-control", "s-m-vignette-ctrl"], null, {
				"id": this.id
			});

			self.content = uiUtils.createDomElement("div", ["s-m-control", "s-m-vignette-content"]);
			var icons = uiUtils.createDomElement("div", ["s-m-control", "s-m-vignette-icons"], "This is to add icons later...");
			self.$$waiting = $(uiUtils.createDomElement("div", ["s-m-vignette-waiting"], null, null, icons));
			self.$$waiting.waiting({
				className: 'waiting-blocks',
				elements: 5,
				auto: true,
				speed: 200
			});

			container.appendChild(icons);
			container.appendChild(self.content);

			parent.appendChild(container);
		},

		load: function() {
			var self = this;
			var deferred = $.Deferred();
			var loader;

			function _finalize() {
				if (self.$$waiting) {
					self.$$waiting.remove();
					delete self.$$waiting;
				}
			}
			try {
				var gadget = self.prototype.data("$gadget");
				if (gadget.$type === "$request") {
					gadget.representation = "QUERY~" + gadget.requestName + "~" + gadget.requestLevel;
				}

				switch (gadget.$type) {
					case "$representation":
					case "$stats":
					case "$request":
						loader = self._loadRepresentation(gadget);
						break;
					case "$dashboard":
						loader = self._loadDashboard(gadget);
						break;
					case "$external":
						loader = self._loadExternal(gadget);
						break;
					case "$gadgetMissing":
						loader = self._loadUnsupported(gadget, "Referenced gadget does not exist: " + gadget.$uuid);
						break;
					default:
						loader = self._loadUnsupported(gadget, "Unsupported gadget type: " + gadget.$type);
						break;
				}
				loader.then(function() {
					_finalize();
					deferred.resolve();
				}, function(e) {
					loader = self._loadUnsupported(gadget, self._formatError(e));
					loader.then(function() {
						_finalize();
						deferred.resolve();
					}, function(e) {
						_finalize();
						deferred.reject(e);
					});
				});
			} catch (e) {
				loader = self._loadUnsupported(gadget, self._formatError(e));
				loader.then(function() {
					_finalize();
					deferred.resolve();
				}, function(e) {
					_finalize();
					deferred.reject(e);
				});
			}
			return deferred.promise();
		},

		_loadRepresentation: function(gadget) {
			var self = this;
			var deferred = $.Deferred();

			var endpoint = gadget.endpoint || globals.getEndpoint();
			var name = endpoint + "." + gadget.representation + "." + gadget.facet;
			globals.getApplication().getPageInfo(name, {
				vignette: true,
				gadget: gadget,
				$displayStyle: self.prototype.data("$displayStyle"),
				article: self.article && self.article.$article // sub article in case the layout of a vignette is defined in the dashboard layout
			}).then(function(pageInfo) {
				if (pageInfo && pageInfo.options && pageInfo.options.$displayStyle === "$full") {
					var page;
					appFactory.createPage($(self.content), pageInfo)
						.then(function(p) {
							page = p;
							return page.load();
						})
						.then(function() {
							self._page = page;
							page.activate(null, function() {
								deferred.resolve();
							});
						}, function(e) {
							deferred.reject(e);
						});
				} else {
					// anchor <a>
					var picker = uiUtils.createDomElement("a", null, null, {
						"href": "#",
						"data-nav": pageInfo.name,
						"data-gadget-id": gadget.$uuid
					});

					// append <span> to anchor
					picker.appendChild(uiUtils.createDomElement("span", ["s-m-vignette-link-only"], gadget.$title));

					self.$elmt.html(picker.outerHTML);
					deferred.resolve();
				}
			});

			return deferred.promise();
		},

		_loadDashboard: function(gadget) {
			var self = this;
			var deferred = $.Deferred();

			// anchor <a>
			var picker = uiUtils.createDomElement("a", null, null, {
				"href": "#",
				"data-nav": gadget.dashboardName + ".$dashboard",
				"data-gadget-id": gadget.$uuid
			});

			// append <span> to anchor
			picker.appendChild(uiUtils.createDomElement("span", ["s-m-vignette-link-only"], gadget.$title));

			self.$elmt.html(picker.outerHTML);

			deferred.resolve();
			return deferred.promise();
		},

		_loadExternal: function(gadget) {
			var self = this;
			var deferred = $.Deferred();
			var html = [];
			var displayStyle = self.prototype.data("$displayStyle");

			if (displayStyle === "$link") {
				// anchor <a>
				var picker = uiUtils.createDomElement("a", null, null, {
					"href": gadget.externalUrl
				});

				// append <span> to anchor
				picker.appendChild(uiUtils.createDomElement("span", ["s-m-vignette-link-only"], gadget.$title));

				self.$elmt.html(picker.outerHTML);
			} else {
				var container = document.createElement("div");

				// anchor <a>
				var picker = uiUtils.createDomElement("a", null, null, {
					"href": gadget.externalUrl
				});
				container.appendChild(picker);

				// append line break
				container.appendChild(document.createElement("br"));

				// append iframe
				container.appendChild(uiUtils.createDomElement("iframe", null, null, {
					"src": gadget.externalUrl,
					"style": "position: absolute; top: 0px; left: 0px; height: 100vh; width: 100vh;"
				}));

				self.$elmt.html(container.innerHTML);
			}

			deferred.resolve();
			return deferred.promise();
		},

		_loadUnsupported: function(gadget, error) {
			var self = this;
			var deferred = $.Deferred();
			globals.getApplication().getPageInfo("vignetteerror", {
				vignette: true,
				error: error
			})
				.then(function(pageInfo) {
					var page;
					appFactory.createPage($(self.content), pageInfo)
						.then(function(p) {
							page = p;
							return page.load();
						})
						.then(function() {
							page.activate(null, function() {
								deferred.resolve();
							});
						}, function(e) {
							deferred.reject(e);
						});
				});
			return deferred.promise();
		},

		_formatError: function(e) {
			if (utils.isError(e)) {
				return e.message + "\n--------------\n" + e.stack;
			} else {
				return JSON.stringify(e);
			}
		},
		onLayoutChange: function() {
			if (this._page && this._page.rootLayout) {
				this._page.rootLayout.onLayoutChange && this._page.rootLayout.onLayoutChange();
			}
		}
	});

exports.Klass = _Klass;