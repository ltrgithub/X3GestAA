"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("vignette");
var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var appFactory = require('syracuse-tablet/html/js/application/appFactory');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');

var _waitConfig = {
	className: 'waiting-blocks',
	elements: 5,
	auto: true,
	speed: 200
};
var _templates = {
	main: '\
		<div id="{{ctrlId}}" class="s-m-control s-m-vignette-ctrl"> \
			<div class="s-m-vignette-content"> \
			</div> \
		</div>'
};
/*
 * 			<div class="s-m-vignette-icons"> \
				This is to add icons later... \
				<div class="s-m-vignette-waiting"> \
				</div> \
			</div> \
 */
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};


var _Klass = utils.defineClass(

	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
		self._page = null;
		self.$$waiting = null;
	}, Base, {
		destroy: function() {
			var self = this;
			uiUtils.waitPluginDestroy(self.$$waiting);
			if (self._page) {
				self._page.destroy();
				self._page = null;
			}
			Base.prototype.destroy.call(self);
		},
		/**
		 * If vignette contains a page return the control object identified by id
		 */
		getPageControl: function(ctrlId) {
			return this._page && this._page.getControl ? this._page.getControl(ctrlId) : null;
		},

		getPage: function() {
			return this._page;
		},

		/**
		 * Open a page in the vignette
		 * 	data-nav action has been clicked in a vignette's link
		 * 	we could have a parameter that indicates if the link has to be opened full page or inside the vignette
		 */
		changePage: function(page, options) {
			var self = this;
			//alert("open page " + page + " in vignette" + "\n" + (options && options["sdata-url"] ? options["sdata-url"] : ""));
			if (self._page) {
				self._page.destroy();
				self._page = null;
			}
			self.load(page, options);
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			self.setRootElement(_getHtml("main", {
				ctrlId: self.id
			}), $$parent);
			self.$$waiting = uiUtils.waitPluginCreate(self.$$elmt.find(".s-m-vignette-waiting"), _waitConfig);
			self.$$content = self.$$elmt.find(".s-m-vignette-content");
		},

		load: function(name, options) {
			var self = this;
			options = options || {};
			var deferred = $.Deferred();
			var loader;

			function _finalize() {
				uiUtils.waitPluginDestroy(self.$$waiting);
				self.$$waiting = null;
			}
			try {
				var gadget = self.prototype.data("$gadget");
				if (gadget.$type === "$request") {
					gadget.representation = "QUERY~" + gadget.requestName + "~" + gadget.requestLevel;
				}
				switch (gadget.$type) {
					case "$representation":
					case "$stats":
					case "$request":
						loader = self._loadRepresentation(gadget, name, options);
						break;
					case "$dashboard":
						loader = self._loadDashboard(gadget);
						break;
					case "$external":
						loader = self._loadExternal(gadget);
						break;
					case "$gadgetMissing":
						loader = self._loadUnsupported(gadget, "Referenced gadget does not exist: " + gadget.$uuid);
						break;
					default:
						loader = self._loadUnsupported(gadget, "Unsupported gadget type: " + gadget.$type);
						break;
				}
				loader.then(function() {
					_finalize();
					deferred.resolve();
				}, function(e) {
					loader = self._loadUnsupported(gadget, self._formatError(e));
					loader.then(function() {
						_finalize();
						deferred.resolve();
					}, function(e) {
						_finalize();
						deferred.reject(e);
					});
				});
			} catch (e) {
				loader = self._loadUnsupported(gadget, self._formatError(e));
				loader.then(function() {
					_finalize();
					deferred.resolve();
				}, function(e) {
					_finalize();
					deferred.reject(e);
				});
			}
			return deferred.promise();
		},

		_loadRepresentation: function(gadget, name, options) {
			var self = this;
			var deferred = $.Deferred();
			var endpoint = gadget.endpoint || globals.getEndpoint();
			var name = name || endpoint + "." + gadget.representation + "." + gadget.facet;
			options = $.extend({}, options);
			options.vignette = true;
			options.$displayStyle = self.prototype.data("$displayStyle");
			options.gadget = gadget;
			options.article = self.article && self.article.$article; // sub article in case the layout of a vignette is defined in the dashboard layout

			globals.getApplication().getPageInfo(name, options).then(function(pageInfo) {
				if (pageInfo && pageInfo.options && pageInfo.options.$displayStyle === "$full") {
					var page;
					appFactory.createPage(self.$$content, pageInfo)
						.then(function(p) {
							page = p;
							return page.load();
						})
						.then(function() {
							self._page = page;
							page.activate(null, function() {
								deferred.resolve();
							});
						}, function(e) {
							deferred.reject(e);
						});
				} else {
					self._addPicker({
						"data-nav": pageInfo.name,
						"data-gadget-id": gadget.$uuid
					}, gadget.$title);
					deferred.resolve();
				}
			});
			return deferred.promise();
		},

		_loadDashboard: function(gadget) {
			var self = this;
			var deferred = $.Deferred();
			self._addPicker({
				"data-nav": gadget.dashboardName + ".$dashboard",
				"data-gadget-id": gadget.$uuid
			}, gadget.$title);
			deferred.resolve();
			return deferred.promise();
		},

		_loadExternal: function(gadget) {
			var self = this;
			var deferred = $.Deferred();
			var displayStyle = self.prototype.data("$displayStyle");
			self._addPicker({
				"href": gadget.externalUrl
			}, gadget.$title);
			if (displayStyle !== "$link") {
				var iFrame = '<br><iframe src="' + gadget.externalUrl + '" style="position: absolute; top: 0px; left: 0px; height: 100vh; width: 100vh;"/>';
				$(iFrame).appendTo(self.$$elmt);
			}
			deferred.resolve();
			return deferred.promise();
		},

		_addPicker: function(attrs, title) {
			if (!attrs.href) attrs.href = "#";
			var picker = '<a';
			for (var p in attrs) {
				picker += " " + p + '="' + attrs[p] + '"';
			}
			picker += ">";
			if (title) {
				picker += '<span class="s-m-vignette-link-only">' + title + "</span>";
			}
			picker += "</a>";
			$(picker).appendTo(this.$$elmt);
		},

		_loadUnsupported: function(gadget, error) {
			var self = this;
			var deferred = $.Deferred();
			globals.getApplication().getPageInfo("vignetteerror", {
				vignette: true,
				error: error
			})
				.then(function(pageInfo) {
					var page;
					appFactory.createPage(self.$$content, pageInfo)
						.then(function(p) {
							page = p;
							return page.load();
						})
						.then(function() {
							page.activate(null, function() {
								deferred.resolve();
							});
						}, function(e) {
							deferred.reject(e);
						});
				});
			return deferred.promise();
		},

		_formatError: function(e) {
			if (utils.isError(e)) {
				return e.message + "\n--------------\n" + e.stack;
			} else {
				return JSON.stringify(e);
			}
		},
		onLayoutChange: function() {
			if (this._page && this._page.rootLayout) {
				this._page.rootLayout.onLayoutChange && this._page.rootLayout.onLayoutChange();
			}
		}
	});

exports.Klass = _Klass;