"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("vignette");
var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var appFactory = require('syracuse-tablet/html/js/application/appFactory');

var _Klass = utils.defineClass(

	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
	}, Base, {
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
		},
		/**
		 * Just create an empty div
		 */
		buildHtml: function(html, controllerDao, buildOptions) {
			return Base.uiutils.createDomElement("div", ["s-m-control", "s-m-vignette-ctrl"], null, {
				"id": this.id
			});
		},

		load: function() {
			var self = this;
			var deferred = $.Deferred();
			var loader;

			try {
				var gadget = self.prototype.data("$gadget");
				switch (gadget.$type) {
					case "$representation":
						loader = self._loadRepresentation(gadget);
						break;
					case "$dashboard":
						loader = self._loadDashboard(gadget);
						break;
					case "$external":
						loader = self._loadExternal(gadget);
						break;
					default:
						loader = self._loadUnsupported(gadget, "Unsupported gadget type: " + gadget.$type);
						break;
				}
				loader.then(function() {
					deferred.resolve();
				}, function(e) {
					loader = self._loadUnsupported(gadget, self._formatError(e));
					loader.then(function() {
						deferred.resolve();
					}, function(e) {
						deferred.reject(e);
					});
				});
			} catch (e) {
				loader = self._loadUnsupported(gadget, self._formatError(e));
				loader.then(function() {
					deferred.resolve();
				}, function(e) {
					deferred.reject(e);
				});
			}
			return deferred.promise();
		},

		_loadRepresentation: function(gadget) {
			var self = this;
			var deferred = $.Deferred();

			var endpoint = gadget.endpoint || globals.getEndpoint();
			var name = endpoint + "." + gadget.representation + "." + gadget.facet;
			var pageInfo = globals.getApplication().getPageInfo(name, {
				vignette: true,
				gadget: gadget,
				$displayStyle: self.prototype.data("$displayStyle")
			});

			if (pageInfo && pageInfo.options && pageInfo.options.$displayStyle === "$full") {
				var page = appFactory.createPage(self.$elmt, pageInfo);
				page.load().then(function() {
					page.activate(null, function() {
						deferred.resolve();
					});
				}, function(e) {
					deferred.reject(e);
				});
			} else {
				// anchor <a>
				var picker = Base.uiutils.createDomElement("a", null, null, {
					"href": "#",
					"data-nav": pageInfo.name,
					"data-gadget-id": gadget.$uuid
				});

				// append <span> to anchor
				picker.appendChild(Base.uiutils.createDomElement("span", ["s-m-vignette-link-only"], gadget.$title));

				self.$elmt.html(picker.outerHTML);
				deferred.resolve();
			}

			return deferred.promise();
		},

		_loadDashboard: function(gadget) {
			var self = this;
			var deferred = $.Deferred();

			// anchor <a>
			var picker = Base.uiutils.createDomElement("a", null, null, {
				"href": "#",
				"data-nav": gadget.dashboardName + ".$dashboard",
				"data-gadget-id": gadget.$uuid
			});

			// append <span> to anchor
			picker.appendChild(Base.uiutils.createDomElement("span", ["s-m-vignette-link-only"], gadget.$title));

			self.$elmt.html(picker.outerHTML);

			deferred.resolve();
			return deferred.promise();
		},

		_loadExternal: function(gadget) {
			var self = this;
			var deferred = $.Deferred();
			var html = [];
			var displayStyle = self.prototype.data("$displayStyle");

			if (displayStyle === "$link") {
				// anchor <a>
				var picker = Base.uiutils.createDomElement("a", null, null, {
					"href": gadget.externalUrl
				});

				// append <span> to anchor
				picker.appendChild(Base.uiutils.createDomElement("span", ["s-m-vignette-link-only"], gadget.$title));

				self.$elmt.html(picker.outerHTML);
			} else {
				var container = document.createElement("div");

				// anchor <a>
				var picker = Base.uiutils.createDomElement("a", null, null, {
					"href": gadget.externalUrl
				});
				container.appendChild(picker);

				// append line break
				container.appendChild(document.createElement("br"));

				// append iframe
				container.appendChild(Base.uiutils.createDomElement("iframe", null, null, {
					"src": gadget.externalUrl,
					"style": "position: absolute; top: 0px; left: 0px; height: 100vh; width: 100vh;"
				}));

				self.$elmt.html(container.innerHTML);
			}

			deferred.resolve();
			return deferred.promise();
		},

		_loadUnsupported: function(gadget, error) {
			var self = this;
			var deferred = $.Deferred();
			var pageInfo = globals.getApplication().getPageInfo("vignetteerror", {
				vignette: true,
				error: error
			});
			var page = appFactory.createPage(self.$elmt, pageInfo);
			page.load().then(function() {
				page.activate(null, function() {
					deferred.resolve();
				});
			}, function(e) {
				deferred.reject(e);
			});
			return deferred.promise();
		},

		_formatError: function(e) {
			if (utils.isError(e)) {
				return e.message;
			} else {
				return JSON.stringify(e);
			}
		},

		/**
		 * returns the page.pageInfo of the gadget's page
		 **/
		_getPageInfo: function() {}
	});

exports.Klass = _Klass;