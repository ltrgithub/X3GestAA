"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var modal = require('syracuse-tablet/html/js/ui/modal');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var dispatcher = require('syracuse-tablet/html/js/sdata/sdataDispatcher');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

/**
 * Default message display
 * TODO - Message + detail
 */
var _displayMessage = function(title, data, cb) {
	if (data === null) data = "";
	if (utils.isError(data)) {
		data = data.message;
	} else if (typeof data === "string") {
		// Nothing
	} else {
		var diags = sdataUtils.scanDiagnoses(data);
		if (diags.length > 0) {
			var msg = [];
			diags.forEach(function(d) {
				msg.push(d.$message);
			});
			data = msg.join('\n');
		} else {
			data = JSON.stringify(data, null, 2);
		}
	};
	modal.info(title, data, cb);
};
/**
 * Manage action on links given by prototype
 * Used by footer/navigation panel
 *
 * options
 * 		links: 			List of link to manage - see prototype.getLinks
 * 		noMessage 		true if caller doesn't want this object to display messages
 * 	    noRedirection	true allows the caller to do the redirection
 * 		callback: 		callback interface - not implemented - It's lighter than creating child classes
 */
var _Klass = utils.defineClass(

	function(options) {
		var self = this;
		self.options = options || {};
		self.options.$links = self.options.$links || [];
		// Add specific properties
		self.options.$links.forEach(function(l, idx) {
			l.css = [];
			if (l.$isHidden === true) l.css.push("hidden");
			if (l.$isDisabled === true) l.css.push("disabled");
			l.css = l.css.join(' ');
			if (!l.icon) l.icon = fontUtils.getIconByIdx(20 + idx);
			if (!l.$uuid) l.$uuid = utils.UUID();
		});
	}, null, {

		destroy: function() {
			var self = this;
			self.options = null;
		},

		getLinks: function() {
			return this.options.$links;
		},
		/**
		 * 	It's a draft - To improve
		 *  Triggers a link action/navigation and resolve/reject
		 *  		displayed eventually a message if diagnoses have been returned by server
		 * 	If options.noRedirection == true and a redirection is needed resolve with the following data
		 * 		{
		 * 			gotoPage:{
		 * 				name:"PageName",
		 * 				options{Pages options}
		 * 			}
		 * 		}
		 * 		It's the caller that calls application.changepage
		 *  control: control that triggered that action
		 */
		triggerLink: function(uuid, control) {
			var deferred = $.Deferred();
			try {
				var self = this;
				var link = null;
				if (self.getLinks().some(function(l) {
					if (l.$uuid === uuid) {
						link = l;
						return true;
					}
				})) {
					console.log(JSON.stringify(link, null, 2));
					if (link.$confirm) {
						// Action with confirmation asked by server
						modal.simpleConfirm(link.$confirm, function(confirmed) {
							if (confirmed) {
								self._doLinkAction(link, control).then(function(data) {
									deferred.resolve(data);
								}).fail(function(e) {
									deferred.reject(e);
								});
							}
						});
					} else if (link.sdataurl && (link.$isAction === true || link.sdataurl.indexOf("$services") > 0)) {
						// Action which stays on the same page
						self._doLinkAction(link, control).then(function(data) {
							deferred.resolve(data);
						}).fail(function(e) {
							deferred.reject(e);
						});
					} else if (link.page) {
						// Navigation to a page
						var pageOpts = {
							"sdata-url": link.sdataurl,
							"sdata-method": link.$method
						};
						if (self.options.noRedirection === true) {
							deferred.resolve({
								gotoPage: {
									name: link.page,
									options: pageOpts
								}
							});
						} else {
							globals.getApplication().changePage(link.page, pageOpts);
						}
					} else {
						_displayMessage("Unexpected link type", link, function() {
							deferred.resolve();
						});
					}
				}
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},
		/**
		 * Send an action to server and process result
		 */
		_doLinkAction: function(link, control) {
			var self = this;
			var deferred = $.Deferred();
			try {
				var payload = control ? control.getControllerDao().getActionPayload(link) : null;
				dispatcher.dispatch({
					$url: link.sdataurl,
					$method: link.$method || "GET"
				}, payload).then(function(data) {
					if (self.options.noMessage == true) {
						self._doAfterSuccess(deferred, link, data);
					} else {
						_displayMessage("Action '" + link.title + "' succeeded", data, function() {
							self._doAfterSuccess(deferred, link, data);
						});
					}
				}).fail(function(e) {
					_displayMessage("Action '" + link.title + "' failed", e, function() {
						deferred.reject(e);
					});
				});
			} catch (e) {
				_displayMessage("Action '" + link.title + "' javascript exception", e, function() {
					deferred.reject(e);
				});
			} finally {
				return deferred.promise();
			}
		},
		/**
		 * Do some stuff after an action succeeded
		 * Save/Delete...
		 */
		_doAfterSuccess: function(deferred, link, result) {
			switch (link.name) {
				case "$save":
					break;
				case "$detele":
					break;
				default:
					break;
			}
			deferred.resolve(result);
		}
	});

exports.Klass = _Klass;