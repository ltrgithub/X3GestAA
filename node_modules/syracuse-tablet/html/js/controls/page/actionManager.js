"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var dispatcher = require('syracuse-tablet/html/js/sdata/sdataDispatcher');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

/**
 * Default message display
 * TODO - Message + detail
 */
var _displayMessage = function(title, data, cb) {
	if (data === null) data = "";
	if (jsutils.isError(data)) {
		data = data.message;
	} else if (typeof data === "string") {
		// Nothing
	} else {
		var diags = sdataUtils.scanDiagnoses(data);
		if (diags.length > 0) {
			var msg = [];
			diags.forEach(function(d) {
				msg.push(d.$message);
			});
			data = msg.join('\n');
		} else {
			data = JSON.stringify(data, null, 2);
		}
	};
	globals.getModal().info(title, data, cb);
};
/**
 * Manage action on links given by prototype
 * Used by footer/navigation panel
 *
 * options
 * 		links: 			List of link to manage - see prototype.getLinks
 * 		noMessage 		true if caller doesn't want this object to display messages
 * 	    noRedirection	true allows the caller to do the redirection
 * 		callback: 		callback interface - not implemented - It's lighter than creating child classes
 * Resolve with			success, liknInfo, data, options
 * 							success = false if action returned a diagnose
 * 						reject with javaScript error
 */
var _Klass = utils.defineClass(

	function(options) {
		var self = this;
		self.options = options || {};
		self.options.$links = self.options.$links || [];
		// Add specific properties
		self.options.$links.forEach(function(l, idx) {
			l.css = [];
			if (l.$isHidden === true) l.css.push("hidden");
			if (l.$isDisabled === true) l.css.push("disabled");
			l.css = l.css.join(' ');
			if (!l.icon) l.icon = fontUtils.getIconByIdx(20 + idx);
			if (!l.$uuid) l.$uuid = utils.UUID();
		});
	}, null, {

		destroy: function() {
			this.options = null;
		},

		getLinks: function() {
			return this.options.$links;
		},
		/**
		 * 	It's a draft - To improve
		 *  Triggers a link action/navigation and resolve/reject
		 *  		displayed eventually a message if diagnoses have been returned by server
		 * 	If options.noRedirection == true and a redirection is needed resolve with the following data
		 * 		{
		 * 			gotoPage:{
		 * 				name:"PageName",
		 * 				options{Pages options}
		 * 			}
		 * 		}
		 * 		It's the caller that calls application.changepage
		 *  page: optional - page that will be notified with data returned by action
		 *  	  mandatory for cancelEdit action
		 */
		triggerLink: function(uuid, page) {
			var deferred = $.Deferred();
			try {
				var self = this;
				var link = null;
				if (self.getLinks().some(function(l) {
					if (l.$uuid === uuid) {
						link = l;
						return true;
					}
				})) {
					if (link.isPageAction) {
						if (!page) throw new Error("triggerLink - Page is expected");
						self._notify(page, deferred, true, link);
						return;
					}
					if (link.$confirm) {
						// Action with confirmation asked by server
						globals.getModal().simpleConfirm(link.$confirm, function(confirmed) {
							if (confirmed) {
								self._doLinkAction(link, page).then(function(success, data) {
									self._notify(page, deferred, success, link, data);
								}).fail(function(e) {
									deferred.reject(e);
								});
							}
						});
						return;
					}
					/**
					 * $isAction comes from prototype (true for save, delete...)
					 * If url contains $services $isAction is set to true (see prototype.getLinks)
					 * 		$services urls are considered as actions
					 * No url and $isAction means child page action
					 */
					if (link.$isAction) {
						// Action which stays on the same page
						self._doLinkAction(link, page).then(function(success, data) {
							self._notify(page, deferred, success, link, data);
						}).fail(function(e) {
							deferred.reject(e);
						});
						return;
					}
					if (link.page) {
						// Navigation to a page
						var pageOpts = {
							"sdata-url": link.sDataUrl,
							"sdata-method": link.$method
						};
						if (self.options.noRedirection === true) {
							self._notify(page, deferred, true, link, {
								gotoPage: {
									name: link.page,
									options: pageOpts
								}
							}, self.options);
						} else {
							setTimeout(function() {
								globals.getApplication().changePage(link.page, pageOpts);
							});
							// Page is changed so it's not necessary
							deferred.resolve();
						}
						return;
					}
					_displayMessage("Unexpected link type", link, function() {
						self._notify(page, deferred, false, link, null, self.options);
					});
				}
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},
		/**
		 * Send an action to server and process result
		 */
		_doLinkAction: function(link, page) {
			var self = this;
			var deferred = $.Deferred();
			try {
				if (link.sDataUrl) {
					if (page) page.waitWheelStart();
					var payload = page ? page.dao.getActionPayload(link) : null;
					dispatcher.dispatch({
						$url: link.sDataUrl,
						$method: link.$method || "GET"
					}, payload).then(function(data) {
						if (page) page.waitWheelStop();
						// True for success
						deferred.resolve(true, data);
					}).fail(function(e) {
						if (page) page.waitWheelStop();
						if (!jsutils.isError(e) && $.isPlainObject(e)) {
							// false for fail
							deferred.resolve(false, e);
						} else {
							// Exception - we display the message
							_displayMessage("Action '" + link.title + "' failed", e, function() {
								deferred.reject(e);
							});
						}
					});
				} else {
					// Child page action - True for success - no data
					deferred.resolve(true);
				}
			} catch (e) {
				_displayMessage("Action '" + link.title + "' javascript exception", e, function() {
					deferred.reject(e);
				});
			} finally {
				return deferred.promise();
			}
		},
		/**
		 * Notify (the page controller) to do some stuff after an action succeeded
		 * Save/Delete...
		 */
		_notify: function(page, deferred, success, link, result) {
			if (page) {
				notifications.pageNotify("sm.action.link", page, success, link, result, this.options);
			}
			deferred.resolve(success, link, result, this.options);
		}
	});
/**
 * Add action to links
 */
var _addCancelEditAction = function(links) {
	links.push({
		name: "$canceledit",
		title: "Cancel",
		icon: fontUtils.getIconByName("$cancelEdit"),
		isPageAction: true,
		action: "cancelEdit"
	});
	return links;
};
exports.addCancelEditAction = _addCancelEditAction;
exports.Klass = _Klass;