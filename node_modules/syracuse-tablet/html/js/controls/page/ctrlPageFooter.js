"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var Base = require('syracuse-tablet/html/js/controls/structElmt').Klass;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var dispatcher = require('syracuse-tablet/html/js/sdata/sdataDispatcher');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var actionManager = require('syracuse-tablet/html/js/controls/page/actionManager');
var ActionManager = actionManager.Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

var _templates = {
	leftpanel: '\
		<li style="display:none">\
			<a draggable="false"  href="#" data-action="sidePanel" data-params="toggle,left">\
				<span class="' + fontUtils.pageIcon("sidePanelL") + '"/>\
			</a>\
		</li>',
	rightpanel: '\
		<li style="display:none">\
			<a draggable="false"  href="#" data-action="sidePanel" data-params="toggle,right">\
				<span class="' + fontUtils.pageIcon("sidePanelR") + '"/>\
			</a>\
		</li>',
	//we added navbar-left class for selection in  enablePanel
	main: '\
		<div id="{{ctrlId}} class="s-m-control"> \
			<nav class="navbar navbar-inverse navbar-fixed-bottom" role="navigation">\
				<div class="container-fluid">\
					<ul class="nav navbar-nav navbar-left">\
					</ul>\
					<ul class="nav navbar-nav navbar-right">\
						{{#each links}}\
							<li>\
								<a draggable="false"  href="#" class="{{css}}" data-action="footerLink" data-params="{{$uuid}}" data-control-id="{{../ctrlId}}">\
									<i class="{{icon}}"/>\
									<span class="s-m-nav-text">{{title}}</span>\
								</a>\
							</li>\
						{{/each}}\
					</ul>\
				</div>\
			</nav> \
		</div>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	if (!tmpl) alert("footer template " + name + " not found");
	return tmpl(ctx);
};

/**
 * Page header Generate Html
 */
var _Klass = utils.defineClass(

	function(controller, $type, options) {
		var self = this;
		Base.call(self, controller, $type, options);
	}, Base, {

		destroy: function() {
			var self = this;
			if (self.actionManager) self.actionManager.destroy();
			self.actionManager = null;
			Base.prototype.destroy.call(self);
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			var links = self.controller.prototype.getLinks(controllerDao, ["visible", "nopagin"]);
			if (self.controller.isEditMode()) {
				actionManager.addCancelEditAction(links);
			}
			self.actionManager = new ActionManager({
				$links: links,
				noMessage: false
			});
			self.setRootElement(_getHtml("main", {
				ctrlId: self.id,
				links: self.actionManager.getLinks()
			}), $$parent);
		},

		/**	
		 * Triggered by sm.side.panel.ready notification
		 * Displays or not the action show/hide panel according to availability or if panel not empty
		 * panel: 'leftpanel' or 'rightpanel'
		 * To improve according to the needs
		 */
		enablePanel: function(panel) {
			var self = this;
			if (!self.$$elmt || !panel) return;
			// trick to deal with css with left/right instead of leftPanel/rightPanel
			panel = panel.indexOf('left') >= 0 ? 'left' : 'right';
			var template = panel + "panel";
			// Should be called one time - No need to test - If two icons are displayed it means that there's an issue somewhere
			$(_getHtml(template)).appendTo(self.$$elmt.find(".navbar-" + panel)).show();
		},

		_actFooterLink: function(uuid) {
			var self = this;
			self.actionManager.triggerLink(uuid, self.controller).then(function(success, link, data, options) {
				// Message is displayed 
			}).fail(function(e) {
				if (jsutils.isError(e)) {
					// We shouldn't expect an error except exceptions
					globals.getModal().error("Footer action error", e);
				}
			});
		}
	});

exports.Klass = _Klass;