"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var dispatcher = require('syracuse-tablet/html/js/sdata/sdataDispatcher');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var actionManager = require('syracuse-tablet/html/js/controls/page/actionManager');
var ActionManager = actionManager.Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');

var _templates = {
	leftpanel: '\
		<li style="display:none">\
			<a draggable="false"  href="#" data-action="sidePanel" data-params="toggle,left">\
				<span class="' + fontUtils.pageIcon("sidePanelL") + '"/>\
			</a>\
		</li>',
	rightpanel: '\
		<li style="display:none">\
			<a draggable="false"  href="#" data-action="sidePanel" data-params="toggle,right">\
				<span class="' + fontUtils.pageIcon("sidePanelR") + '"/>\
			</a>\
		</li>',
	//we added navbar-left class for selection in  enablePanel
	main: '\
		<nav class="navbar navbar-inverse navbar-fixed-bottom" role="navigation">\
			<div class="container-fluid">\
				<ul class="nav navbar-nav navbar-left">\
				</ul>\
				<ul class="nav navbar-nav navbar-right">\
					{{#each links}}\
						<li>\
							<a draggable="false"  href="#" class="{{css}}" data-action="footerLink" data-params="{{$uuid}}" data-control-id="{{../ctrlId}}">\
								<i class="{{icon}}"/>\
								<span class="s-m-nav-text">{{title}}</span>\
							</a>\
						</li>\
					{{/each}}\
				</ul>\
			</div>\
		</nav>',
	mainm: '\
		{{#if showHome}} \
			<a href="#" data-action="gotoWelcomeApplication">\
				<span class="' + fontUtils.pageIcon("home") + '" />\
			</a>\
		{{/if}} \
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	if (!tmpl) alert("footer template " + name + " not found");
	return tmpl(ctx);
};
var _$proto = {
	$type: "tablet/x-pagefooter"
};
var _$article = {
	$bind: "footer"
};

/** Header height */
var _heights = {
	"tablet": 50,
	"smartphone": 50
};
/**
 * Page header Generate Html
 */
var _Klass = utils.defineClass(
	function(controller, options) {
		Base.call(this, controller, _$article, prototype.create(_$proto), options);
	}, Base, {

		destroy: function() {
			if (this.actionManager) this.actionManager.destroy();
			this.actionManager = null;
			Base.prototype.destroy.call(this);
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			this.buildOptions = buildOptions.footer || {};
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, [this.typeName]);
		},

		/**	
		 * Triggered by sm.side.panel.ready notification
		 * Displays or not the action show/hide panel according to availability or if panel not empty
		 * panel: '
	leftpanel ' or ';
	rightpanel '
		 * To improve according to the needs
		 */
		enablePanel: function(panel) {
			if (!this.$$elmt || !panel) return;
			// trick to deal with css with left/right instead of leftPanel/rightPanel
			panel = panel.indexOf('
	left ') >= 0 ? '
	left ' : '
	right ';
			var template = panel + "panel";
			// Should be called one time - No need to test - If two icons are displayed it means that there'
	s an issue somewhere
	$(_getHtml(template)).appendTo(this.$$elmt.find(".navbar-" + panel)).show();
},

	_actFooterLink: function(uuid) {
		this.actionManager.triggerLink(uuid, this.controller).then(function(success, link, data, options) {
			// Message is displayed 
		}).fail(function(e) {
			if (jsutils.isError(e)) {
				// We shouldn't expect an error except exceptions
				globals.getModal().error("Footer action error", e);
			}
		});
	},
	onMainPageResize: function(info, orientation, deviceClass) {
		// Set height of footer
		this._height = _heights[globals.getSiteLayout().getDeviceType(deviceClass)];
		var $$parent = this.$$elmt.parent();
		$$parent.css({
			top: (info.contentHeight - this._height) + "px",
			left: 0 + "px",
			width: info.contentWidth + "px",
			height: this._height + "px"
		});
		this._build(info, orientation, deviceClass);
	},
	_build: function(info, orientation, deviceClass) {
		if (this.$$footer) this.$$footer.remove();
		var links = this.controller.prototype.getLinks(this.getDao(), ["visible", "nopagin"]);
		if (this.controller.isEditMode()) {
			actionManager.addCancelEditAction(links);
		}
		this.actionManager = new ActionManager({
			$links: links,
			noMessage: false
		});
		this.$$footer = $(_getHtml("main", {
			ctrlId: this.id,
			links: this.actionManager.getLinks()
		}));
		if (globals.getSiteLayout().getDeviceType(deviceClass) === "smartphone") {
			this.$$elmt.find('[data-action="sidePanel"]').hide();
		}
		this.$$footer.appendTo(this.$$elmt);
	},
	getHeight: function(deviceClass) {
		return this._height == null ? _heights["tablet"] : this._height;
	}
	});

exports.Klass = _Klass;