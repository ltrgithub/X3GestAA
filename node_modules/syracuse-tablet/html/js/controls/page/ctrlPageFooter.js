"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var actionManager = require('syracuse-tablet/html/js/controls/page/actionManager');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var ActionManager = actionManager.Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');

var _templates = {

	main: '\
		<div class="s-m-footer container-fluid {{typeDevice}}">\
			{{{contentHtml}}}\
		</div>',
	tablet: {
		main: '\
			<div class="s-m-footer-left">\
				{{{homeLink}}}\
			</div>\
			<div class="s-m-footer-right">\
				{{{rightLinks}}}\
			</div>\
		',
		rightLinks: '\
			{{#each links}}\
				<a draggable="false"  href="#" class="{{css}}" data-action="footerLink" data-params="{{$uuid}}" data-control-id="{{../ctrlId}}">\
					<i class="{{icon}}"/>\
					<span>{{title}}</span>\
				</a>\
			{{/each}}\
		',
		/*leftLinks: '\
			{{#each links}}\
				<a href="#" data-action="{{action}}" data-params="{{params}}">\
					<i class="{{icon}}"/>\
					<span>{{title}}</span>\
				</a>\
			{{/each}}',*/
		homeLink: '\
			<a href="#" data-action="gotoWelcomeApplication">\
				<i class="{{icon}}"/>\
				<span>{{title}}</span>\
			</a>'
	},
	smartphone: {
		main: ""
	},


	leftpanel: '\
		<span style="display:none">\
			<a draggable="false"  href="#" data-action="sidePanel" data-params="toggle,left">\
				<span class="' + fontUtils.pageIcon("sidePanelL") + '"/>\
			</a>\
		</span>',
	rightpanel: '\
		<span style="display:none">\
			<a draggable="false"  href="#" data-action="sidePanel" data-params="toggle,right">\
				<span class="' + fontUtils.pageIcon("sidePanelR") + '"/>\
			</a>\
		</span>',
	mainn: '\
			<nav class="s-m-navbar">\
					<div class="s-m-navbar-left">\
					</div>\
					<div class="s-m-navbar-right">\
						{{#each links}}\
							<span>\
								<a draggable="false"  href="#" class="{{css}}" data-action="footerLink" data-params="{{$uuid}}" data-control-id="{{../ctrlId}}">\
									<i class="{{icon}}"/>\
									<span class="s-m-nav-text">{{title}}</span>\
								</a>\
							</span>\
						{{/each}}\
					</div>\
				</div>\
			</nav>'
};

/*var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	if (!tmpl) alert("footer template " + name + " not found");
	return tmpl(ctx);
};*/

var _getHtml = function(type, name, ctx) {
	type = type || "";
	var key = type + name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = type.length == 0 ? _templates[name] : _templates[type][name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	if (!tmpl) alert("footer template " + name + " not found");
	return tmpl(ctx);
};

var _$proto = {
	$type: "tablet/x-pagefooter"
};
var _$article = {
	$bind: "footer"
};

/** Header height */
var _heights = {
	"tablet": 50,
	"smartphone": 50
};
/**
 * Page header Generate Html
 */
var _Klass = utils.defineClass(
	function(controller, options) {
		Base.call(this, controller, _$article, prototype.create(_$proto), options);
	}, Base, {

		destroy: function() {
			if (this.actionManager) this.actionManager.destroy();
			this.actionManager = null;
			Base.prototype.destroy.call(this);
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			this.buildOptions = $.extend(buildOptions.footer, buildOptions.header) || {};
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, [this.typeName]);
		},

		applyMetaData: function(metaData) {
			//  No meta for this control 
			return;
		},

		/**	
		 * Triggered by sm.side.panel.ready notification
		 * Displays or not the action show/hide panel according to availability or if panel not empty
		 * panel: ' leftpanel ' or ' rightpanel '
		 * To improve according to the needs
		 */
		enablePanel: function(panel) {
			if (!this.$$elmt || !panel) return;
			// trick to deal with css with left/right instead of leftPanel/rightPanel
			panel = panel.indexOf('left') >= 0 ? 'left' : 'right';
			if (panel === 'left') {
				// We don't display the command in footer
				return;
			}
			var template = panel + "panel";
			var $$navbar = this.$$elmt.find(".s-m-footer-" + panel);
			var $$button = $$navbar.find('[data-action="sidePanel"]');
			if ($$button.length == 0) {
				$$button = $(_getHtml(null, template)).appendTo($$navbar);
			}
			// Should be called one time - No need to test - If two icons are displayed it means that there's an issue somewhere
			$$button.show();
		},

		_actFooterLink: function(uuid) {
			this.actionManager.triggerLink(uuid, this.controller).then(function(success, link, data, options) {
				// Message is displayed 
			}).fail(function(e) {
				if (jsutils.isError(e)) {
					// We shouldn't expect an error except exceptions
					globals.getModal().error("Footer action error", e);
				}
			});
		},
		onMainPageResize: function(info, orientation, deviceClass) {
			// Set height of footer
			this._height = _heights[globals.getSiteLayout().getDeviceType(deviceClass)];
			var $$parent = this.$$elmt.parent();
			$$parent.css({
				top: (info.contentHeight - this._height) + "px",
				left: 0 + "px",
				width: info.contentWidth + "px",
				height: this._height + "px"
			});
			this._build(info, orientation, deviceClass);
		},
		/**
		 * onMainPageResize event broke the buildHtml model
		 * We need to buil html onMainPageResize instead of onMainPageResize
		 */
		_build: function(info, orientation, deviceClass) {
			if (this.$$footer) this.$$footer.remove();

			var typeDevice = globals.getSiteLayout().getDeviceType(deviceClass);
			var opts = this.buildOptions;
			var contentHtml;
			if (typeDevice === "smartphone") {
				//contentHtml = this._smartPhoneHtml(opts);
				return;
			} else {
				contentHtml = this._tabletHtml(opts);
			}

			this.$$footer = $(_getHtml(null, "main", {
				contentHtml: contentHtml,
				typeDevice: typeDevice
			}));
			this.$$footer.appendTo(this.$$elmt);



			/*
			var links = this.controller.prototype.getLinks(this.getDao(), ["visible", "nopagin"]);
			if (!this.controller.isChild && this.controller.isEditMode()) {
				// Only for main page
				actionManager.addCancelEditAction(links);
			}
			if (this.actionManager) {
				// When we change the deviceClass we can have a non null actionManager
				this.actionManager.destroy();
			}
			this.actionManager = new ActionManager({
				$links: links,
				noMessage: false
			});
			this.$$footer = $(_getHtml("main", {
				ctrlId: this.id,
				links: this.actionManager.getLinks()
			}));
			if (globals.getSiteLayout().getDeviceType(deviceClass) === "smartphone") {
				this.$$elmt.find('[data-action="sidePanel"]').hide();
			}
			this.$$footer.appendTo(this.$$elmt);*/
		},
		_tabletHtml: function(opts) {
			var self = this;
			var _mainCtx = {};

			// BUILDING ACTION LINKS (displayed on the right of the footer)
			var links = self.controller.prototype.getLinks(self.getDao(), ["visible", "nopagin"]);
			if (!self.controller.isChild && self.controller.isEditMode()) {
				// Only for main page
				actionManager.addCancelEditAction(links);
			}
			if (self.actionManager) {
				// When we change the deviceClass we can have a non null actionManager
				self.actionManager.destroy();
			}
			self.actionManager = new ActionManager({
				$links: links,
				noMessage: false
			});

			// BUILD RIGHT LINKS HTML
			var rightLinks = _getHtml("tablet", "rightLinks", {
				ctrlId: self.id,
				links: self.actionManager.getLinks()
			});

			// BUILD HOME LINK IF SHOWHOME OK (goes on the left)
			var homeLink = "";
			if (opts.showHome) {
				homeLink = _getHtml("tablet", "homeLink", {
					icon: fontUtils.pageIcon("home"),
					title: locale.text("header.sm.links.home")
				});
			}

			return _getHtml("tablet", "main", {
				homeLink: homeLink,
				rightLinks: rightLinks
			});
		},
		getHeight: function(deviceClass) {
			return this._height == null ? _heights["tablet"] : this._height;
		}
	});

exports.Klass = _Klass;