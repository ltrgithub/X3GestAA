"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var Base = require('syracuse-tablet/html/js/controls/structElmt').Klass;

var _templates = {
	main: '\
		<div id="{{ctrlId}} class="s-m-control"> \
			<nav class="navbar navbar-inverse navbar-fixed-bottom" role="navigation">\
				<div class="container-fluid">\
					<ul class="nav navbar-nav">\
						<li style="display:none">\
							<a href="#" data-action="sidePanel"  data-params="toggle,left">\
								<span class="glyphicon glyphicon-align-justify" />\
							</a>\
						</li>\
					</ul>\
					<ul class="nav navbar-nav navbar-right">\
						<li style="display:none">\
							<a href="#" data-action="sidePanel" data-params="toggle,right">\
								<span class="glyphicon glyphicon-align-justify" />\
							</a>\
						</li>\
					</ul>\
				</div>\
			</nav> \
		</div>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/**
 * Page header Generate Html
 */
var _Klass = utils.defineClass(

	function(controller, $type) {
		var self = this;
		Base.call(self, controller, $type);
	}, Base, {

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			self.setRootElement(_getHtml("main", {
				ctrlId: self.id
			}), $$parent);
			var $links = self.controller.prototype.data("$links");
			if ($links && Object.keys($links).length > 0) {
				// Process links and create link panel + header icon for open/close
				var linksCtx = [];
				$.each($links, function(name, value) {
					try {
						var link = sdataUtils.getLinkInfo(value.$url, controllerDao);
						linksCtx.push({
							"data-nav": link.page,
							"data-sdata-url": link.sDataUrl,
							"title": utils.parseExpression(value.$title, null, self.controller.prototype) || self.getLinkTitle(name)
						});
					} catch (e) {
						value = value || {};
						console.log("invalid link" + (value.$title || 'no title') + "\n\t" + (value.$url || 'no url'));
					}
				});
			}
		},

		enablePanel: function(panel) {
			var self = this;
			// Show actions Show/Hide left/right panel if needed
			if (panel === "left") {
				self.$$elmt.find('[data-params="toggle,left"]').parent().show();
			}
			if (panel === "right") {
				self.$$elmt.find('[data-params="toggle,right"]').parent().show();
			}
		},

		// TODO
		getLinkTitle: function(facetValue) {
			switch (facetValue) {
				case "$edit":
					return "Edit";
				case "$query":
					return "List";
				case "$save":
					return "Save";
				case "$details":
					return "Detail";
				default:
					throw new Error("Facet " + facetValue + " not implemented yet");
			}
		}
	});

exports.Klass = _Klass;