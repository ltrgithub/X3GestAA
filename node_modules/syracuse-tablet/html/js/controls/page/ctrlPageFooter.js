"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var actionManager = require('syracuse-tablet/html/js/application/actionManager');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var ActionManager = actionManager.Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');

var _actionPanelId = "pageactionpanelregular";
var _templates = {
	main: '\
		<div class="s-m-footer container-fluid {{deviceType}}">\
			{{{contentHtml}}}\
		</div>',
	tablet: {
		main: '\
			<div class="s-m-footer-left">\
				{{{homeLink}}}\
				{{{pinPage}}}\
			</div>\
			<div class="s-m-footer-right">\
				{{{rightLinks}}}\
			</div>\
		',
		rightLinks: '\
			{{#each links}}\
				<a draggable="false"  href="#" class="{{css}}" data-action="footerLink" data-params="{{$uuid}}" data-control-id="{{../ctrlId}}">\
					<i class="{{icon}}"/>\
				</a>\
			{{/each}}\
		',
		homeLink: '\
			<a href="#" data-action="home">\
				<i class="{{icon}}"/>\
			</a>',
		pinPage: '\
			<a href="#" data-action="pinPage">\
				<i class="{{icon}}"/>\
			</a>'
	},
	smartphone: {
		main: ""
	}
};
_templates[_actionPanelId] = '\
	<a draggable="false"  href="#" data-action="footerAction" data-params="{{panelId}}" style="display:none;" data-control-id="{{controlId}}">\
	<i class="{{icon}}"/>\
</a>';

var _getHtml = function(type, name, ctx) {
	type = type || "";
	var key = type + name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = type.length == 0 ? _templates[name] : _templates[type][name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	if (!tmpl) alert("footer template " + name + " not found");
	return tmpl(ctx);
};

var _$proto = {
	$type: "tablet/x-pagefooter"
};
var _$article = {
	$bind: "footer"
};

/** Header height */
var _heights = {
	"tablet": 50,
	"smartphone": 50
};
/**
 * Page header Generate Html
 */
var _Klass = utils.defineClass(
	function(controller, options) {
		Base.call(this, controller, _$article, prototype.create(_$proto), options);
		this.actionManager = null;
		this._actionPanel = null;
	}, Base, {

		destroy: function() {
			if (this.actionManager) {
				this.actionManager.destroy();
				this.actionManager = null;
			}
			this.resetActionPanel();
			Base.prototype.destroy.call(this);
		},

		resetActionPanel: function() {
			if (this._actionPanel) {
				this._actionPanel.destroy();
				this._actionPanel = null;
			}

		},
		buildHtml: function($$parent, controllerDao, buildOptions) {
			this.buildOptions = $.extend(buildOptions.footer, buildOptions.toolBars) || {};
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, [this.typeName]);
			this._$$parent = this.$$elmt.closest("footer");
			this._build();
			if (this.$$footer) {
				// Just to display the footer here to avoid flickering
				// bottom:"0px" because we don't know top - marginTop:"5px" to preserve a space between footer and content 
				// Improvement will be done by onMainPageResize
				this._$$parent.css({
					marginTop: "5px",
					bottom: "-5px"
				});
			}
		},

		applyMetaData: function(metaData) {
			//  No meta for this control 
			return;
		},
		/**	
		 * Display action panel
		 */
		_enableActionPanel: function(enable) {
			var $$navbar = this.$$elmt.find(".s-m-footer-right");
			var $$button = $$navbar.find('[data-action="actionPanel"]');
			if ($$button.length == 0) {
				$$button = $(_getHtml(null, _actionPanelId, {
					icon: fontUtils.pageIcon("sidePanelR"),
					title: locale.text("footer.links.actions"),
					controlId: this.id,
					panelId: _actionPanelId
				})).appendTo($$navbar);
			}
			$$button.toggle(enable === true);
		},

		_actFooterLink: function(uuid) {
			this.actionManager.triggerLink(uuid, this.controller).then(function(success, link, data, options) {
				// Message is displayed 
			}).fail(function(e) {
				if (jsutils.isError(e)) {
					// We shouldn't expect an error except exceptions
					globals.getModal().error("Footer action error", e);
				}
			});
		},

		_actFooterAction: function(id) {
			if (id === _actionPanelId) {
				this.controller.panelAttach("right", this._actionPanel, "toggle");
			}
		},

		onMainPageResize: function(info, orientation, deviceClass) {
			var deviceType = globals.getSiteLayout().getDeviceType(deviceClass);
			this._build(deviceType);
			if (this.$$footer) {
				// Set height/top of footer in any cases
				// Cancel bottom:0px of buildHtml
				this._$$parent.css({
					top: (info.contentHeight - this._height) + "px",
					width: info.contentWidth + "px",
				});
				// Add open/close action panel - We are not on smartPhone -> We display it
				if (this.controller.state.type === "regular" && !this._actionPanel) {
					this._actionPanel = this.controller.panelCreate(_actionPanelId);
					this._enableActionPanel(this._actionPanel.isEnabled());
				}
			} else {
				this.resetActionPanel();
			}
		},
		getHeight: function() {
			return this.$$elmt && this.$$elmt.is(":visible") ? this.$$elmt.height() : 0;
		},
		/**
		 * onMainPageResize event broke the buildHtml model
		 * We need to buil html onMainPageResize instead of onMainPageResize
		 */
		_build: function(deviceType) {
			deviceType = deviceType || globals.getSiteLayout().getDeviceType();
			if (this._deviceType != null && this._deviceType === deviceType) return;
			this._deviceType = deviceType;
			if (this.$$footer) {
				this.$$footer.remove();
				this.$$footer = null;
			}
			if (deviceType === "smartphone") return;
			this._height = _heights[deviceType];
			this._$$parent.css({
				left: 0 + "px",
				height: this._height + "px"
			});
			this.$$footer = $(_getHtml(null, "main", {
				contentHtml: this._tabletHtml(this.buildOptions),
				deviceType: deviceType
			}));
			this.$$footer.appendTo(this.$$elmt);
		},
		_tabletHtml: function(opts) {
			var self = this;
			var _mainCtx = {};
			// BUILDING ACTION LINKS (displayed on the right of the footer)
			var links = self.controller.prototype.getLinks(self.getDao(), "footer", {
				deviceType: "tablet"
			});
			if (!self.controller.isChild && self.controller.isEditMode()) {
				// Only for main page
				actionManager.addCancelEditAction(links);
			}
			if (self.actionManager) {
				// When we change the deviceClass we can have a non null actionManager
				self.actionManager.destroy();
			}
			self.actionManager = new ActionManager({
				$links: links,
				noMessage: false
			});

			// BUILD RIGHT LINKS HTML
			var rightLinks = _getHtml("tablet", "rightLinks", {
				ctrlId: self.id,
				links: self.actionManager.getLinks()
			});

			// BUILD HOME LINK IF SHOWHOME OK (goes on the left)
			var homeLink = "";
			if (opts.showHome) {
				homeLink = _getHtml("tablet", "homeLink", {
					icon: fontUtils.pageIcon("home")
				});
			}

			var pinPage = "";
			// 0 = don't show
			// 1 = show inactive
			// 2 = show active
			if (opts.statusPinPage > 0) {
				pinPage = _getHtml("tablet", "pinPage", {
					icon: fontUtils.pageIcon("pinPage_" + opts.statusPinPage)
				});
			}

			return _getHtml("tablet", "main", {
				homeLink: homeLink,
				pinPage: pinPage,
				rightLinks: rightLinks
			});
		}
	});

exports.Klass = _Klass;