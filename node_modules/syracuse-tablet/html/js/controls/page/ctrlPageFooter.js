"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiSettings = require('syracuse-tablet/html/js/helpers/uiSettings');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var actionManager = require('syracuse-tablet/html/js/application/actionManager');
var multiSelectionMgr = require('syracuse-tablet/html/js/application/multiSelectionMgr');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var Hammer = require('syracuse-tablet/html/deps/hammerjs-2.0.4/hammer');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _actionPanelId = globals.PANELACTIONSREGULAR;
var _templates = {
	main: '\
		<div class="s-m-closed"></div>\
		<div class="s-m-footer s-m-opened container-fluid {{deviceType}}">\
			{{{contentHtml}}}\
		</div>',
	tablet: {
		main: '\
			<div class="s-m-footer-left">\
				{{{homeLink}}}\
				{{{configLink}}}\
				{{{pinPage}}}\
			</div>\
			<div class="s-m-footer-right">\
				{{{rightLinks}}}\
			</div>\
		',
		rightLinks: '\
			{{#each links}}\
				<a draggable="false"  href="#" class="{{css}}" data-action="{{#if action}}{{action}}{{else}}footerLink{{/if}}" data-params="{{$uuid}}" data-control-id="{{../ctrlId}}">\
					<i class="{{icon}}"/>\
					<span>{{{title}}}</>\
				</a>\
			{{/each}}\
		',
		action: '\
			<a href="#" data-action="{{action}}">\
				<i class="{{icon}}"/>\
				<span>{{{title}}}</>\
			</a>'
	},
	smartphone: {
		main: ""
	}
};

var _getHtml = function(type, name, ctx) {
	type = type || "";
	var key = type + name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = type.length == 0 ? _templates[name] : _templates[type][name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	if (!tmpl) alert("footer template " + name + " not found");
	return tmpl(ctx);
};
/**
 * Page footer generate Html
 */
var _Klass = utils.defineClass(
	function($type, controller, options) {
		Base.call(this, controller, {
			$bind: "footer"
		}, prototype.create({
			$type: $type
		}), options);
		this._actionManager = null;
		this._multiSelManager = null;
		this._actionPanel = null;
		notifications.subscribe(this, ["sm.page.pin.state.change"]);
	}, Base, {

		destroy: function() {
			if (this._hammer) {
				this._hammer.destroy();
				this._hammer = null;
			}
			if (this._actionManager) {
				this._actionManager.destroy();
				this._actionManager = null;
			}
			if (this._multiSelManager) {
				this._multiSelManager.destroy();
				this._multiSelManager = null;
			}
			this.resetActionPanel();
			Base.prototype.destroy.call(this);
			notifications.unsubscribe(this);
		},

		resetActionPanel: function() {
			if (this._actionPanel) {
				this._actionPanel.destroy();
				this._actionPanel = null;
			}

		},
		buildHtml: function($$parent, controllerDao, buildOptions) {
			this.buildOptions = $.extend(buildOptions.footer, buildOptions.toolBars) || {};
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, [this.typeName]);
			this._$$parent = this.$$elmt.closest("footer");
			this._build();
			if (this.$$footer) {
				// init swiper
				if (this.options.showHide === true) {
					if (this._hammer) this._hammer.destroy();
					this._hammer = new Hammer(this._$$parent.get(0));
					this._hammer.get("swipe").set({
						direction: Hammer.DIRECTION_VERTICAL,
						velocity: 0.1
					});
					// listen to events...
					this._hammer.on("swipeup swipedown", Hammer.bindFn(this._onSwipe, this));
				}
			}
		},

		applyMetaData: function(metaData) {
			//  No meta for this control 
			return;
		},

		_actFooterLink: function(uuid) {
			this._actionManager.triggerLink(uuid, this.controller).then(function(success, link, data, options) {
				// Message is displayed 
			}).fail(function(e) {
				if (jsutils.isError(e)) {
					// We shouldn't expect an error except exceptions
					globals.getModal().error("Footer action error", e);
				}
			});
		},
		/**
		 * Click on icon action
		 */
		_actMultiSelection: function(uuid, $$target) {
			this._multiSelManager.toggle(this, this.$$elmt.find(".s-m-footer-right"), "dropup");
		},

		_actFooterAction: function(id) {
			if (id === _actionPanelId) {
				this.controller.panelAttach("right", this._actionPanel, "toggle");
			}
		},

		onMainPageResize: function(info, orientation, deviceClass) {
			var deviceType = globals.getSiteLayout().getDeviceType(deviceClass);
			this._build(deviceType);
			if (this.$$footer) {
				// Set height/top of footer in any cases
				// Cancel bottom:0px of buildHtml
				this._$$parent.css({
					top: (info.contentHeight - this._height) + "px",
					width: info.contentWidth + "px",
				});
				// Show once top has bee set
				var self = this;
				setTimeout(function() {
					self._$$parent.show();
				});
			} else {
				this.resetActionPanel();
			}
		},
		getHeight: function() {
			return this.$$elmt && this.$$elmt.is(":visible") ? this.$$elmt.height() : 0;
		},
		/**
		 * onMainPageResize event broke the buildHtml model
		 * We need to buil html onMainPageResize instead of onMainPageResize
		 */
		_build: function(deviceType) {
			deviceType = deviceType || globals.getSiteLayout().getDeviceType();
			if (this._deviceType != null && this._deviceType === deviceType) return;
			this._deviceType = deviceType;
			if (this.$$footer) {
				this.$$footer.remove();
				this.$$footer = null;
			}
			if (deviceType === "smartphone") return;
			var status = this.options.showHide ? "opened" : "closed";
			this._height = uiSettings.getProp("footer.height." + status);
			this._$$parent.css({
				left: 0 + "px",
				height: this._height + "px"
			});
			this.$$footer = $(_getHtml(null, "main", {
				contentHtml: this._tabletHtml(this.buildOptions),
				deviceType: deviceType
			}));
			this.$$footer.appendTo(this.$$elmt);
			if (status === "closed") {
				this.$$elmt.addClass("s-m-" + status);
			}
		},
		_onSwipe: function(evt) {
			if (!evt || !this.$$elmt) return;
			var status = this.$$elmt.is(".s-m-closed") ? "closed" : "opened";
			var action = evt.type === "swipeup" ? "open" : "close";
			if ((status === "closed" && action === "open") || (status === "opened" && action === "close")) {
				this.$$elmt.toggleClass("s-m-closed");
				status = status === "closed" ? "opened" : "closed";
				this._height = uiSettings.getProp("footer.height." + status);
				this._$$parent.height(this._height);
				uiutils.triggerResizeInternal({
					footerSwipe: true
				});
			}
		},
		_tabletHtml: function(opts) {
			var self = this;
			var _mainCtx = {};
			var mgrCreated = self._actionManager == null;
			if (mgrCreated) {
				self._multiSelManager = multiSelectionMgr.create(self.controller);
				self._actionManager = actionManager.create(self.controller, "footer", {
					addCancelEditAction: "footerLink",
					addMultiSelection: self.controller.isMultiSelectionEnabled()
				});
			}
			self.$$elmt.find(".s-m-footer-right").remove();
			var rightLinks;
			if (self._actionManager.hasLinks()) {
				rightLinks = self._actionManager.getLinks();
			}
			if (!self._actionPanel && self.controller.state.type === "regular") {
				// Add open/close action panel - We are not on smartPhone -> We display it
				self._actionPanel = self.controller.panelCreate(_actionPanelId);
			}
			if (mgrCreated && self._actionPanel && self._actionPanel.hasLinks()) {
				if (!rightLinks) rightLinks = [];
				rightLinks.push({
					action: "footerAction",
					icon: fontUtils.pageIcon("sidePanelR"),
					$uuid: _actionPanelId,
					title: "&nbsp;"
				});
			}
			if (rightLinks) {
				// BUILD RIGHT LINKS HTML
				var rightLinks = _getHtml("tablet", "rightLinks", {
					ctrlId: self.id,
					links: rightLinks
				});
			}
			// BUILD HOME LINK IF SHOWHOME OK (goes on the left)
			var homeLink = "";
			if (opts.showHome) {
				homeLink = _getHtml("tablet", "action", {
					action: "home",
					icon: fontUtils.pageIcon("home"),
					title: locale.text("action.home")
				});
			}
			// BUILD HOME LINK IF SHOWHOME OK (goes on the left)
			var configLink = "";
			if (opts.showPageConfig) {
				configLink = _getHtml("tablet", "action", {
					action: "pageConfig",
					icon: fontUtils.pageIcon("pageConfig"),
					title: locale.text("action.pageConfig")
				});
			}
			var pinPage = "";
			// 0 = don't show
			// 1 = show inactive
			// 2 = show active
			if (opts.statusPinPage > 0) {
				pinPage = _getHtml("tablet", "action", {
					action: "pinPage",
					icon: fontUtils.pageIcon("pinPage_" + opts.statusPinPage),
					title: locale.text("action.pin")
				});
			}
			return _getHtml("tablet", "main", {
				homeLink: homeLink,
				configLink: configLink,
				pinPage: pinPage,
				rightLinks: rightLinks
			});
		},
		// newState
		// 0 = don't show
		// 1 = show inactive
		// 2 = show active
		notifPagePinStateChange: function(newState) {
			var $$icon = this.$$elmt.find("[data-action=pinPage] i");
			if ($$icon.length > 0) {
				$$icon.attr("class", fontUtils.pageIcon("pinPage_" + newState));
			}
		}
	});

exports.Klass = _Klass;