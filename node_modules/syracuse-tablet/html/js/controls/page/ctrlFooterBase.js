"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiSettings = require('syracuse-tablet/html/js/helpers/uiSettings');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var actionManager = require('syracuse-tablet/html/js/application/actionManager');
var multiSelectionMgr = require('syracuse-tablet/html/js/application/multiSelectionMgr');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var ctrlHelpers = require('syracuse-tablet/html/js/controls/ctrlHelpers');

var _actionPanelId = globals.PANELACTIONSREGULAR;
var _templates = {
	main: '\
		<div class="s-m-footer s-m-opened container-fluid {{deviceType}}">\
			{{{contentHtml}}}\
		</div>',
	tablet: {
		main: '\
			<div class="s-m-footer-left">\
				{{#if homeLink}}{{{homeLink}}}{{/if}}\
				{{#if configLink}}{{{configLink}}}{{/if}}\
				{{#if templateLink}}{{{templateLink}}}{{/if}}\
				{{#if pinPage}}{{{pinPage}}}{{/if}}\
			</div>\
			<div class="s-m-footer-right">\
				{{#if rightLinks}}{{{rightLinks}}}{{/if}}\
			</div>\
		',
		rightLinks: '\
			{{#each links}}\
				<a draggable="false" {{#if $isHidden}}style="display:none"{{/if}} href="#" class="s-m-link {{css}} {{#if $isDisabled}} disabled{{/if}}"\
						data-action="{{#if action}}{{action}}{{else}}footerLink{{/if}}"\
						data-params="{{$uuid}}"\
						data-control-id="{{../ctrlId}}"\
						{{#if x3LinkName}} data-s-ut-link-x3name="{{x3LinkName}}"{{/if}}>\
					<i class="{{icon}}"/>\
					<span>{{{title}}}</>\
				</a>\
			{{/each}}\
		',
		action: '\
			<a href="#" class="s-m-link" data-action="{{action}}">\
				<i class="{{icon}}"/>\
				<span>{{{title}}}</span>\
			</a>'
	},
	smartphone: {
		main: ""
	}
};

var _getHtml = function(type, name, ctx) {
	type = type || "";
	var key = type + name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = type.length == 0 ? _templates[name] : _templates[type][name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	if (!tmpl) alert("footer template " + name + " not found");
	return tmpl(ctx);
};
/**
 * Base footer class
 */
var _Klass = utils.defineClass(
	function CtrlFooterBase($type, controller, options) {
		Base.call(this, controller, {
			$bind: "footer"
		}, prototype.create({
			$type: $type
		}), options);
		this._actionManager = null;
		this._multiSelManager = null;
		this._actionPanel = null;
	}, Base, {

		destroy: function() {
			if (this._actionManager) {
				this._actionManager.destroy();
				this._actionManager = null;
			}
			if (this._multiSelManager) {
				this._multiSelManager.destroy();
				this._multiSelManager = null;
			}
			this.resetActionPanel();
			Base.prototype.destroy.call(this);
			notifications.unsubscribe(this);
		},
		getPageControlType: function() {
			return "footer";
		},
		/**
		 * Controller that handles actions
		 * For actions in dashboard this controller is the page nested in the vignette
		 * Can be overridden
		 */
		getActionController: function() {
			return this.controller;
		},

		resetActionPanel: function() {
			if (this._actionPanel) {
				this._actionPanel.destroy();
				this._actionPanel = null;
			}

		},
		buildHtml: function($$parent, controllerDao, buildOptions) {
			buildOptions = buildOptions || {};
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, [this.typeName]);
			this.footerOptions = this.getFooterOptions(buildOptions);
			this._$$parent = this.$$elmt.closest("footer");
			if (buildOptions.refresh === true || this.footerOptions.forceRefresh) {
				// Avoid double build
				// If it's not a refresh build is called on onResize - there's always a triggerResize when we rendre a page
				this._build();
			}
		},

		// Can be overridden
		getFooterOptions: function(buildOptions) {
			return $.extend({}, buildOptions.footer, buildOptions.toolBars);
		},

		applyMetaData: function(metaData, buildOptions) {
			//  No meta for this control 
			return;
		},

		_actFooterLink: function(uuid) {
			this._actionManager.triggerLink(uuid, this.getActionController()).then(function(success, link, data, options) {
				// Message is displayed 
			}).fail(function(e) {
				if (jsutils.isError(e)) {
					// We shouldn't expect an error except exceptions
					globals.getModal().error("Footer action error", e);
				}
			});
		},
		/**
		 * Click on icon action
		 */
		_actMultiSelection: function(uuid, $$target) {
			this.toggleMultiSelection();
		},
		// Called by vignette footer
		toggleMultiSelection: function() {
			if (this._multiSelManager) {
				this._multiSelManager.toggle(this, this.$$elmt.find(".s-m-footer-right"), "dropup", "right");
			}
		},

		_actFooterAction: function(id) {
			if (id === _actionPanelId) {
				this.controller.panelAttach("right", this._actionPanel, "toggle");
			}
		},

		onMainPageResize: function(info, orientation) {
			var deviceType = globals.getSiteLayout().getDeviceType();
			this._build(deviceType);
			if (this.$$footer) {
				// Set height/top of footer in any cases
				// Cancel bottom:0px of buildHtml
				this._$$parent.css({
					top: (info.contentHeight - this._height) + "px",
					width: info.contentWidth + "px",
				});
				// Sow needed to allow page to get height for scroller
				this._$$parent.show();
			} else {
				this.resetActionPanel();
			}
		},
		getHeight: function() {
			return this._height;
		},
		/**
		 */
		_build: function(deviceType) {
			deviceType = deviceType || globals.getSiteLayout().getDeviceType();
			if (this._deviceType != null && this._deviceType === deviceType) return;
			this._deviceType = deviceType;
			if (this.$$footer) {
				this.$$footer.remove();
				this.$$footer = null;
			}
			if (deviceType === "smartphone") {
				this.$$elmt.hide();
				return;
			}
			this._height = uiSettings.getProp("footer.height", deviceType);
			this._$$parent.css({
				left: 0 + "px",
				height: this._height + "px"
			});
			var htmlCtx = {};
			// Controller that handles action - different from current page for vignettes
			var actionController = this.getActionController();
			// Controller that displays the footer
			var displayController = this.controller;
			if (!this._multiSelManager) {
				this._multiSelManager = multiSelectionMgr.create(actionController);
			}
			var contentHtml;
			this._actionManager = actionManager.create(actionController, "footer", {
				addCancelEditAction: "footerLink",
				addShowTemplatesAction: "footerLink",
				addMultiSelection: !this.footerOptions.multiSelectionOnly && actionController.isMultiSelectionEnabled(),
				multiSelectionOnly: this.footerOptions.multiSelectionOnly
			});
			this._addActionMgrHtmlCtx(htmlCtx, actionController, displayController);
			this.$$footer = $(_getHtml(null, "main", {
				contentHtml: _getHtml("tablet", "main", htmlCtx),
				deviceType: deviceType
			}));
			this.$$footer.appendTo(this.$$elmt.show());
			// Check if dao dirty to update save satus
			ctrlHelpers.checkLinkInitStatus(this);
		},
		/**
		 * Return the html context to display actions/panel - Action comes from $links
		 */
		_addActionMgrHtmlCtx: function(ctx, actionController, displayController) {
			if (!this._actionManager) return;
			var showActions = this.footerOptions.showActions !== false;
			var rightLinks;
			if (showActions && this._actionManager.hasLinks()) {
				rightLinks = this._actionManager.getLinks();
			}
			if (showActions && !this._actionPanel && actionController.state.type === "regular") {
				// Add open/close action panel - We are not on smartPhone -> We display it
				// actionController that handles actions
				this._actionPanel = actionController.panelCreate(_actionPanelId);
			}
			if (this._actionPanel && this._actionPanel.hasLinks()) {
				if (!rightLinks) rightLinks = [];
				rightLinks.push({
					action: "footerAction",
					icon: fontUtils.pageIcon("sidePanelR"),
					$uuid: _actionPanelId,
					title: "&nbsp;",
					x3LinkName: "$$openRightPanel"
				});
			}
			if (rightLinks) {
				var self = this;
				rightLinks.forEach(function(rlnk) {
					ctrlHelpers.checkLinkSubscriptions(self, rlnk);
				});
				// BUILD RIGHT LINKS HTML
				ctx.rightLinks = _getHtml("tablet", "rightLinks", {
					ctrlId: this.id,
					// Links are float right
					links: rightLinks.reverse()
				});
			}
			// BUILD HOME LINK IF SHOWHOME OK (goes on the left)
			if (this.footerOptions.showHome) {
				ctx.homeLink = _getHtml("tablet", "action", {
					action: "home",
					icon: fontUtils.pageIcon("home"),
					title: locale.text("action.home")
				});
			}
			// BUILD HOME LINK IF SHOWHOME OK (goes on the left)
			if (this.footerOptions.showPageConfig) {
				ctx.configLink = _getHtml("tablet", "action", {
					action: "pageConfig",
					icon: fontUtils.pageIcon("pageConfig"),
					title: locale.text("action.pageConfig")
				});
			}
			if (this.footerOptions.showDashboardList) {
				ctx.templateLink = _getHtml("tablet", "action", {
					action: "dashboardList",
					icon: fontUtils.pageIcon("dashboardList"),
					title: locale.text("action.dashboardList")
				});
			}
			// 0 = don't show
			// 1 = show inactive
			// 2 = show active
			if (this.footerOptions.statusPinPage > 0) {
				ctx.pinPage = _getHtml("tablet", "action", {
					action: "pinPage",
					icon: fontUtils.pageIcon("pinPage_" + this.footerOptions.statusPinPage),
					title: locale.text(this.footerOptions.statusPinPage === 1 ? "action.pin" : "action.unpin")
				});
			}
		},

		/**
		 * Page footer can be changed
		 * This method is called each time the footer is toggled
		 */
		notifToggled: function(shown) {
			if (shown === false) {
				if (this._multiSelManager) {
					this._multiSelManager.disable();
				}
				return;
			}
		},
		/**
		 * Detach from document
		 */
		detach: function() {
			this.notifToggled(false);
			if (this.$$elmt) {
				this.$$elmt.detach();
			}
		},
		/**
		 * Toggle $save status
		 */
		notifDaoDirty: function(isDirty, uuid) {
			ctrlHelpers.notifDaoDirty(this, isDirty, uuid);
		},
		/**
		 * Toggle $$showTemplates status
		 */
		notifEditTemplatesChanged: function(fromActionMgrUUID, count) {
			// Event is triggered by templaetPanel for all suscribers but only one can handle it
			// -> The one thas contains the actionManager taht trigered the link 
			if (!this._actionManager || this._actionManager.uuid != fromActionMgrUUID) return;
			ctrlHelpers.notifEditTemplatesChanged(this, count);
		}
	});

exports.Klass = _Klass;