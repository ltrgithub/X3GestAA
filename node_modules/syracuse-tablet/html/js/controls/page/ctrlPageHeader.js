"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("pageHeader");
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');

var _templates = {
	main: '\
			<div class="container-fluid {{device}}">\
				<div class="s-m-header-nav">\
					{{#if showHome}} \
						<a href="#" data-action="historyBack">\
							<span class="' + fontUtils.pageIcon("back") + '" />\
						</a>\
						<a href="#" data-action="gotoWelcomeApplication">\
							<span class="' + fontUtils.pageIcon("home") + '" />\
						</a>\
					{{/if}} \
				</div>\
				<div class="s-m-header-labels">\
					<div class="s-m-header-brand"><span class="s-m-brand">{{labelBrand}}</span> <span class="s-m-product">{{labelProduct}}</span></div>\
					{{#if tablet}}\
							<div class="s-m-header-appname">{{appName}}</div>\
					{{/if}}\
				</div>\
				<div class="s-m-header-links">\
					{{{userContent}}}\
				</div>\
			</div>',
	userInfo: '\
		<div>\
			<span class="s-m-nav-text username">{{username}}</span>\
			{{#if tablet}}\
				<span class="s-m-nav-text userrole">{{userrole}}</span>\
			{{/if}}\
		</div>\
		{{#if userPhotoUrl}}\
			<img src="{{userPhotoUrl}}"/>\
		{{else}}\
			<span style="font-size:32px" class="' + fontUtils.pageIcon("switchContext") + '" />\
		{{/if}}',
	infoOnly: '\
		<div>{{{userInfo}}}</div>}}}',
	dropDown: '\
		<div class="dropdown">\
			<a href="#" data-toggle="dropdown" role="button" id="{{dropdownId}}" aria-haspopup="true" aria-expanded="false">\
				{{{userInfo}}}\
			</a>\
			{{{dropDownMenu}}}\
		</div>',
	dropDownMenu: '\
		<ul class="dropdown-menu" role="menu" aria-labelledby="{{dropdownId}}">\
			{{#each links}}\
				{{#if divider}} \
					<li role="presentation" class="divider"></li>\
				{{/if}} \
				<li>\
					<a href="#" data-action="linkClicked" data-params="{{data-params}}" data-control-id="{{ctrlId}}" class="list-group-item">\
						<span class="{{icon}}" />\
						<span>{{label}}</span>\
					</a>\
				</li>\
			{{/each}}\
		</ul>',
	search: '\
		<div class="s-m-header-search" style="display:none">\
			<form style="display:none" class="navbar-form navbar-right" role="search">\
				<div class="form-group input-group-sm"">\
					<input type="text" class="form-control" placeholder="Search">\
				</div>\
				<button type="submit" class="btn btn-success">\
					<span class="' + fontUtils.pageIcon("search") + '"></span>\
				</button>\
			</form>\
		</div>'
};

var _linksCtx = {
	showAuthoring: {
		items: [{
			"data-params": "designPage",
			"icon": "designPage",
			"label": "header.links.designPage"
		}]
	},
	showLinks: {
		items: [{
			"data-params": "clearCache",
			"icon": "clearCache",
			"label": "header.links.clearCache"
		}, {
			"data-params": "switchContext",
			"icon": "switchContext",
			"label": "header.links.switchContext"
		}]
	},
	showDevelopment: {
		"divider": true,
		items: [{
			"data-params": "developmentPage",
			"icon": "developmentPage",
			"label": "header.links.development"
		}]
	}
};
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

var _$proto = {
	$type: "tablet/x-pageheader"
};
var _$article = {
	$bind: "header"
};
/**
 * Page header Generate Html
 */
var _Klass = utils.defineClass(

	function(controller, $type) {
		Base.call(this, controller, _$article, prototype.create(_$proto));
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
		},
		buildHtml: function($$parent, controllerDao, buildOptions) {
			this.buildOptions = buildOptions.header || {};
			this.buildOptions.showDevelopment = globals.isDvlpMode();
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, ["s-m-header"]);
			// Built is done in onMainPageResize
		},
		_actLinkClicked: function(actionName) {
			/* triggering action */
			eventListener.triggerAction(this.$$elmt, actionName);
		},
		onMainPageResize: function(info, orientation) {
			this._build(info, orientation);
		},
		_build: function(info, orientation) {
			var self = this;
			if (self.$$header) self.$$header.remove();
			var devClass = globals.getSiteLayout().getDeviceClass();
			var typeDevice = devClass === "tablet" || devClass === "minitablet" ? "tablet" : "smartphone";
			var lknCtx = {
				dropdownId: utils.UUID(),
				links: []
			};
			var opts = self.buildOptions;
			for (var p in _linksCtx) {
				if (opts[p] === true) {
					var l = _linksCtx[p];
					l.items.forEach(function(x, idx) {
						x = $.extend({}, x);
						x.label = locale.text(x.label);
						x.ctrlId = self.id;
						x.icon = fontUtils.pageIcon(x.icon);
						if (idx === 0) x.divider = l.divider;
						lknCtx.links.push(x);
					});
				}
			}
			var _mainCtx = {
				showHome: opts.showHome,
				device: typeDevice,
				labelBrand: opts.labelBrand || "Sage",
				labelProduct: opts.labelProduct || "ERP X3",
				appName: globals.getApplication().getTitle(),
				tablet: typeDevice === "tablet"
			};
			var htmlUserInfo = _getHtml("userInfo", {
				username: globals.getUserName(),
				userrole: globals.getUserRole(),
				userPhotoUrl: typeDevice === "tablet" ? globals.getUserPhotoUrl : null,
				tablet: typeDevice === "tablet"
			});
			if (lknCtx.links.length === 0) {
				_mainCtx.userContent = _getHtml("infoOnly", {
					userInfo: htmlUserInfo
				});
			} else {
				_mainCtx.userContent = _getHtml("dropDown", {
					userInfo: htmlUserInfo,
					dropDownMenu: _getHtml("dropDownMenu", lknCtx)
				});
				self.$$elmt.css({
					overflow: "visible"
				});
			}
			self.$$header = $(_getHtml("main", _mainCtx));
			self.$$header.appendTo(self.$$elmt);
		}
	});

exports.Klass = _Klass;