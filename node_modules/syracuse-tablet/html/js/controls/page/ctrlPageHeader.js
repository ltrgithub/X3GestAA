"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiSettings = require('syracuse-tablet/html/js/helpers/uiSettings');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var actionManager = require('syracuse-tablet/html/js/application/actionManager');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var multiSelectionMgr = require('syracuse-tablet/html/js/application/multiSelectionMgr');


var _userPanelId = globals.PANELUSERSMARTPHONE;
var _actionPanelId = globals.PANELACTIONSREGULAR;

var _templates = {
	main: '\
		<div class="s-m-header container-fluid {{deviceType}}">\
			{{{contentHtml}}}\
		</div>\
	',
	tablet: {
		main: '\
			<div class="s-m-header-nav">\
				{{#if showBack}} \
					<a href="#" draggable="false" data-action="historyBack">\
						<i class="' + fontUtils.pageIcon("back") + '" />\
						</a>\
				{{/if}} \
			</div>\
			<div class="s-m-header-labels">\
				{{#if showBrand}}\
					<div class="s-m-header-brand"><span class="s-m-brand">{{labelBrand}}</span> <span class="s-m-product">{{labelProduct}}</span></div>\
				{{/if}}\
				<div class="s-m-header-label">{{headerLabel}}</div>\
			</div>\
			<div class="s-m-header-links">\
				{{{userContent}}}\
			</div>',
		userInfo: '\
			<div>\
				<span class="s-m-nav-text username">{{username}}</span>\
				<span class="s-m-nav-text userrole">{{userrole}}</span>\
			</div>\
			{{#if userPhotoUrl}}\
				<img src="{{userPhotoUrl}}"/>\
			{{else}}\
				<span style="font-size:32px" class="' + fontUtils.pageIcon("switchContext") + '" />\
			{{/if}}',
		infoOnly: '\
			<div>{{{userInfo}}}</div>}}}',
		dropDown: '\
			<div class="dropdown">\
				<a href="#" draggable="false" data-toggle="dropdown" role="button" id="{{dropdownId}}" aria-haspopup="true" aria-expanded="false">\
					{{{userInfo}}}\
				</a>\
				{{{dropDownMenu}}}\
			</div>',
		dropDownMenu: '\
			<ul class="dropdown-menu" role="menu" aria-labelledby="{{dropdownId}}">\
				{{#each links}}\
					{{#if divider}} \
						<li role="presentation" class="divider"></li>\
					{{/if}} \
					<li>\
						<a href="#" data-action="linkClicked" draggable="false" data-params="{{data-params}}" data-control-id="{{ctrlId}}" class="list-group-item {{css}}">\
							<span class="{{icon}}" />\
							<span>{{label}}</span>\
						</a>\
					</li>\
				{{/each}}\
			</ul>',
		search: '\
			<div class="s-m-header-search" style="display:none">\
				<form style="display:none" class="navbar-form navbar-right" role="search">\
					<div class="form-group input-group-sm"">\
						<input type="text" class="form-control" placeholder="Search">\
					</div>\
					<button type="submit" class="btn btn-success">\
						<span class="' + fontUtils.pageIcon("search") + '"></span>\
					</button>\
				</form>\
			</div>'
	},
	smartphone: {
		main: '\
			<div class="s-m-header-nav">\
				{{{backDom}}}\
				<a href="#" draggable="false" data-action="headerAction" data-params="{{panelId}}" data-control-id="{{ctrlId}}">\
					<span class="' + fontUtils.pageIcon("bars") + '" />\
				</a>\
			</div>\
			<div class="s-m-header-labels">\
				{{{labelContent}}}\
			</div>\
			<div class="s-m-header-links">\
				{{{linksContent}}}\
			</div>',
		backDom: '\
			<a href="#" draggable="false" data-action="historyBack">\
				<span class="' + fontUtils.pageIcon("backIphone") + '" />\
			</a>',
		brandDom: '\
			<div class="s-m-header-brand">\
				<span class="s-m-brand">{{labelBrand}}</span>\
				<span class="s-m-product">{{labelProduct}}</span>\
			</div>',
		labelDom: '\
			<div class="s-m-header-label">{{label}}</div>',
		actionLink: '\
			<a href="#" draggable="false" class="{{css}}" data-action="{{#if action}}{{action}}{{else}}headerLink{{/if}}" data-params="{{$uuid}}" data-control-id="{{ctrlId}}">\
				<i class="{{icon}}"></i>\
				<span>{{{title}}}</span>\
			</a>',
		actionPanelToggle: '\
			<a href="#" data-action="headerAction" draggable="false" data-params="{{panelId}}" data-control-id="{{ctrlId}}">\
				<i class="' + fontUtils.pageIcon("sidePanelR") + '" />\
				<span>{{{title}}}</span>\
			</a>'
	}
};

var _linksCtx = {
	showAuthoring: {
		items: [{
			"data-params": "designPage",
			"icon": "designPage",
			"label": "header.links.designPage"
		}]
	},
	showLinks: {
		items: [{
			"data-params": "clearCache",
			"icon": "clearCache",
			"label": "header.links.clearCache"
		}, {
			"data-params": "switchContext",
			"icon": "switchContext",
			"label": "header.links.switchContext"
		}, {
			"data-params": "about",
			"icon": "about",
			"label": "header.sm.links.about"
		}]
	},
	showDevelopment: {
		"divider": true,
		items: [{
			"data-params": "developmentPage",
			"icon": "developmentPage",
			"label": "header.links.development"
		}]
	}
};

var _getHtml = function(type, name, ctx) {
	type = type || "";
	var key = type + name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = type.length == 0 ? _templates[name] : _templates[type][name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};

/**
 * Page header Generate Html
 */
var _Klass = utils.defineClass(

	function($type, controller, options) {
		Base.call(this, controller, {
			$bind: "header"
		}, prototype.create({
			$type: $type
		}), options);
	}, Base, {

		destroy: function() {
			this.resetPanels();
			if (this.actionManager) {
				this.actionManager.destroy();
				this.actionManager = null;
			}
			if (this.multiSelManager) {
				this.multiSelManager.destroy();
				this.multiSelManager = null;
			}
			Base.prototype.destroy.call(this);
		},
		resetPanels: function() {
			if (this._smphUserpanel) {
				this._smphUserpanel.destroy();
			}
			if (this._smphPageactionpanel) {
				this._smphPageactionpanel.destroy();
			}
		},
		buildHtml: function($$parent, controllerDao, buildOptions) {
			this.buildOptions = buildOptions.toolBars || {};
			this.buildOptions.showDevelopment = globals.isDvlpMode();
			this.buildOptions.showAuthoring = (utils.isDesktop() === true) ? this.buildOptions.showAuthoring : false; // Show full feature authoring only if on PC
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, [this.typeName]);
			// Build the header with default deviceClass - To avoid flickering of the page - Improvement is done in onMainPageResize
			this._build();
		},
		applyMetaData: function(metaData) {
			//  No meta for this control 
			return;
		},
		_actLinkClicked: function(actionName) { /* triggering action */
			eventListener.triggerAction(this.$$elmt, actionName);
		},

		_actMultiSelection: function(uuid, $$target) {
			var enabled = this.multiSelManager.toggle(this, this.$$elmt.find(".s-m-header-links"), "dropdown");
			this.$$elmt.find(".s-m-header-nav, .s-m-header-labels, a:not(.s-m-ismultisel)").toggle(!enabled);
		},

		onMainPageResize: function(info, orientation, deviceClass) {
			// In any case because we need to have the content width	
			this.$$elmt.parent().css({
				width: info.contentWidth + "px"
			});
			// Only if deviceClass changed
			this._build(deviceClass);
			// In any case because we need to have the width tho calculate text-overflow elipsis
			this._updateHeaderStyle(this._deviceType);
		},
		getHeight: function() {
			return this.$$elmt && this.$$elmt.is(":visible") ? this.$$elmt.height() : 0;
		},
		/**
		 * deviceClass can be nul (default deviceClass)
		 * Allows to build header in build html (better UX)
		 */
		_build: function(deviceClass) {
			var deviceType = globals.getSiteLayout().getDeviceType(deviceClass);
			if (this._deviceType != null && this._deviceType === deviceType) return;
			this._deviceType = deviceType;
			if (this.$$header) this.$$header.remove();
			var h = uiSettings.getProp("header");
			this.$$elmt.height(h);
			var $$parent = this.$$elmt.parent();
			$$parent.css({
				left: 0 + "px",
				height: h + "px"
			});
			var opts = this.buildOptions;
			var contentHtml;
			if (deviceType === "smartphone") {
				contentHtml = this._smartPhoneHtml(opts);
			} else {
				contentHtml = this._tabletHtml(opts);
			}
			this.$$header = $(_getHtml(null, "main", {
				contentHtml: contentHtml,
				deviceType: deviceType
			}));
			this.$$header.appendTo(this.$$elmt);
		},
		/**
		 *	Update some header css properties.
		 */
		_updateHeaderStyle: function(deviceType) {
			// tablet
			// calculate and set s-m-header-labels div width according
			// to widths of s-m-header-nav and s-m-header-links div elements.
			var self = this;
			var $$header = self.$$elmt.find(".s-m-header");
			var $$links = self.$$elmt.find(".s-m-header-links");
			var $$nav = self.$$elmt.find(".s-m-header-nav");
			var $$label = self.$$elmt.find(".s-m-header-label");
			var offset = 10;
			if (deviceType === "tablet") {

				// for pages other than welcome page, update label width
				if (!self.controller.state.isWelcomePage) {
					var maxWidth = $$header.width() - ($$nav[0].scrollWidth + $$links[0].scrollWidth + offset);
					$$label.css("max-width", maxWidth);
				}
				// on welcome page, if header is too small, label will be hidden for a better display
				else {
					$$label.css("max-width", "inherit");
					var $$brand = self.$$elmt.find(".s-m-header-brand");

					// hide label if brand + label + links > header (in term of width)
					var hideLabel = $$brand.width() + $$label.width() + $$nav.width() + $$links.width() + offset > $$header.width();
					$$label.toggle(hideLabel ? false : true);

					// if label hidden and header still too small, reduce brand fontsize until header has better display
					var sum = $$brand.width() + $$nav.width() + $$links.width();
					var off = 3;
					if (hideLabel == true && (sum > $$header.width())) {
						while (sum > $$header.width()) {
							$$brand.css("font-size", ($$brand.css("font-size").match(/\d+/)[0] - off) + "px");
							off += 3;
							sum = $$brand.width() + $$nav.width() + $$links.width();
						}
					} else {
						$$brand.css("font-size", "2.5em");
					}

				}
			}
			// smartphone
			else {
				// only not on welcome page
				if (!self.controller.state.isWelcomePage) {
					var maxWidth = $$header.width() - ($$nav[0].scrollWidth + $$links[0].scrollWidth + offset);
					$$label.css("max-width", maxWidth);
				}
			}
		},
		/**
		 * Returns HTML for tablet
		 */
		_tabletHtml: function() {
			var self = this;
			var lknCtx = {
				dropdownId: utils.UUID(),
				links: []
			};
			var opts = self.buildOptions;
			var linksCpt = 0;
			for (var p in _linksCtx) {
				if (opts[p] === true) {
					var l = _linksCtx[p];
					l.items.forEach(function(x, idx) {
						x = $.extend({}, x);
						x.label = locale.text(x.label);
						x.ctrlId = self.id;
						x.icon = fontUtils.pageIcon(x.icon);
						if (idx === 0 && lknCtx.links.length > 1) x.divider = l.divider;

						/* No need to disable cache clearing here, we only disabled it but may still want to clear it!
						if (x["data-params"] == "clearCache" && globals.getCache().isDisabled()) {
							x.css = "disabled";
						} else {
							x.css = "";
						}
						*/
						lknCtx.links.push(x);
					});
				}
			}
			var _mainCtx = {
				showBack: opts.showHome,
				showHome: opts.showHome,
				showBrand: self.controller.state.isWelcomePage,
				labelBrand: opts.labelBrand || "Sage",
				labelProduct: opts.labelProduct || "ERP X3",
				headerLabel: self.controller.state.isWelcomePage ? globals.getApplication().getTitle() : self.controller.prototype.data("$title")
			};
			var htmlUserInfo = _getHtml("tablet", "userInfo", {
				username: globals.getUserName(),
				userrole: globals.getUserRole(),
				userPhotoUrl: globals.getUserPhotoUrl
			});
			if (lknCtx.links.length === 0) {
				_mainCtx.userContent = _getHtml("tablet", "infoOnly", {
					userInfo: htmlUserInfo
				});
			} else {
				_mainCtx.userContent = _getHtml("tablet", "dropDown", {
					userInfo: htmlUserInfo,
					dropDownMenu: _getHtml("tablet", "dropDownMenu", lknCtx)
				});
				/** Force overflow visible on s-m-control to display the dropDownMenu**/
				self.$$elmt.css({
					overflow: "visible"
				});
			}
			return _getHtml("tablet", "main", _mainCtx);
		},
		/**
		 * Returns HTML for smartphone
		 */
		_smartPhoneHtml: function(opts) {
			var self = this;
			this.resetPanels();
			self._smphUserpanel = self.controller.panelCreate(_userPanelId);
			self._smphPageactionpanel = self.controller.panelCreate(_actionPanelId);
			var backDom = "";
			var labelContent = "";
			var linksContent = "";
			// build backDom only if iPhone
			if (opts.showHome && globals.getLookAndFeel() === "ios") {
				backDom = _getHtml("smartphone", "backDom", {});
			}
			// build label content. 
			labelContent = self._getLabelContent(opts);
			// build links content.
			linksContent = self._getLinksContent(self._smphPageactionpanel && self._smphPageactionpanel.hasLinks());
			var ctx = {
				backDom: backDom,
				labelContent: labelContent,
				linksContent: linksContent,
				panelId: _userPanelId,
				ctrlId: self.id
			};
			return _getHtml("smartphone", "main", ctx);
		},
		/**
		 *	/!\ SMARTPHONE ONLY
		 *	Returns header label content which depends on the current page.
		 *	Label depends whether user is located in home page, app dashboard page, inside an app, or anywhere else
		 */
		_getLabelContent: function(opts) {
			var self = this;
			var labelContent;

			function getContent(isLabelDom, labelVal, opts) {
				if (isLabelDom) {
					return _getHtml("smartphone", "labelDom", {
						label: labelVal
					});
				}
				// brand name
				else {
					return _getHtml("smartphone", "brandDom", {
						labelBrand: opts.labelBrand || "Sage",
						labelProduct: opts.labelProduct || "ERP X3",
					});
				}
			}

			// home page --> brand name
			if (this.controller.state.isWelcomePage) {
				labelContent = getContent(false, null, opts);
			} else {
				// app dashboard page --> app title
				if (self.controller.state.isWelcomePage) {
					labelContent = getContent(true, globals.getApplication().getTitle());
				} else {
					// inside app --> page title
					if (self.controller.prototype.data("$title")) {
						labelContent = getContent(true, self.controller.prototype.data("$title"));
					}
					// other cases (for example html static page)
					else {
						labelContent = getContent(false, null, opts);
					}
				}

			}
			return labelContent;
		},
		/**
		 *	/!\ SMARTPHONE ONLY
		 *	Returns header links content which depends on the current page.
		 *	- No link on welcome page and application dashboard
		 *	- On query page, links will be "create" and an anchor to open the actions panel (on the right)
		 *	- On detail page, links will be "edit" and an anchor to open the actions panel (on the right)
		 *	- On edit page, links will be "save", "cancel" and an anchor to open the actions panel (on the right)
		 *	Some actions will be displayed in the footer
		 */
		_getLinksContent: function(hasPanelLinks) {
			var linksContent = "";
			this.multiSelManager = multiSelectionMgr.create(this.controller, ".s-m-header-nav, .s-m-header-labels, a:not(.s-m-ismultisel)");
			this.actionManager = actionManager.create(this.controller, "header", {
				addCancelEditAction: "headerAction",
				addMultiSelection: this.multiSelManager != null ? multiSelectionMgr.actionId : null,
				deviceType: this.deviceType || "smartphone"
			});
			var linksArr = this.actionManager.getLinks();
			var cc = [];
			if (hasPanelLinks) {
				cc.push(_getHtml("smartphone", "actionPanelToggle", {
					panelId: _actionPanelId,
					ctrlId: this.id,
					title: "&nbsp;"
				}));
			}
			if (linksArr && linksArr.length > 0) {
				var self = this;
				linksArr.forEach(function(ll, idx) {
					cc.push(_getHtml("smartphone", "actionLink", $.extend(ll, {
						ctrlId: self.id
					})));
				});
			}
			linksContent = cc.join("");
			return linksContent;
		},
		_actHeaderLink: function(uuid) {
			this.actionManager.triggerLink(uuid, this.controller).then(function(success, link, data, options) {
				// Message is displayed 
			}).fail(function(e) {
				if (jsutils.isError(e)) {
					// We shouldn't expect an error except exceptions
					globals.getModal().error("Header action error (smartphone)", e);
				}
			});
		},

		_actHeaderAction: function(id) {
			var panel = id === _actionPanelId ? this._smphPageactionpanel : this._smphUserpanel;
			var side = id === _actionPanelId ? "right" : "left";
			this.controller.panelAttach(side, panel, "toggle");
		}
	});

exports.Klass = _Klass;