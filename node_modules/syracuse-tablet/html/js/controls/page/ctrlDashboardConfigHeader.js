"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var uiSettings = require('syracuse-tablet/html/js/helpers/uiSettings');
var dashboardUtils = require('syracuse-tablet/html/js/helpers/dashboardUtils');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _templates = {
	main: '\
			<div class="s-m-header {{deviceType}} s-m-dasboard-config">\
				<buttons class="pull-left dashboard-header-btn" style="width:{{leftBtnWidth}}px">\
				{{{dropDown}}}\
				<button type="button" style="display:{{displayButtonHiddenTiles}};float:right" class="btn btn-default addapp" data-action="addHiddenTile">\
				<i class="fa fa-cubes"></i>\
				</button>\
			</buttons>\
				<div class="s-m-header-labels">\
					{{#if factoryOwner}}\
					<span class="s-m-header-label">{{factoryOwner}}</span>\
					{{/if}}\
					<span class="s-m-header-label">{{description}}</span>\
				</div>\
				<buttons class="pull-right dashboard-header-btn" style="width:{{rightBtnWidth}}px">\
					<button type="button" class="btn btn-default" style="display:none" data-action="{{buttonSaveAction}}">\
						<i class="fa fa-check"></i>\
					</button>\
					<button type="button" style="float:right" class="btn btn-danger" data-action="closeDashboardConfig">\
						<i class="fa fa-close"></i>\
					</button>\
				</buttons>\
			</div>',
	dropDown: '\
	    			<button draggable="false" class="btn btn-default" data-toggle="dropdown" role="button" id="{{dropdownId}}" aria-haspopup="true" aria-expanded="false">\
					<i class="fa fa-bars"></i>\
					</button>\
					<ul class="dropdown-menu dropdown-menu-left" role="menu" aria-labelledby="{{dropdownId}}">\
						{{#each links}}\
							{{#if dividerTop}} \
								<li role="presentation" class="divider"></li>\
							{{/if}} \
							<li>\
								<a href="#" {{#if data-nav}}data-nav="{{data-nav}}"{{else}}data-action="linkClicked"{{/if}}draggable="false" data-params="{{data-params}}" data-control-id="{{ctrlId}}" class="list-group-item {{css}}">\
									<span class="{{icon}}" />\
									<span class="isLabel">{{label}}</span>\
								</a>\
							</li>\
							{{#if dividerBottom}} \
								<li role="presentation" class="divider"></li>\
							{{/if}} \
						{{/each}}\
					</ul>'
};

var _getHtml = function(type, name, ctx) {
	type = type || "";
	var key = type + name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = type.length == 0 ? _templates[name] : _templates[type][name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};


/**
 * Header displayed when a dashboard is in configuration mode
 */
var _Klass = utils.defineClass(

	function ctrlDashboardConfigHeader($type, controller, options) {
		options = options || {};
		Base.call(this, controller, {
			$bind: "header"
		}, prototype.create({
			$type: $type
		}), options);
		notifications.subscribe(this, ["sm.dashboard.state.change"]);
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			buildOptions = buildOptions || {};
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, [this.typeName]);
			this._height = uiSettings.getProp("header.height");
			this.$$elmt.css({
				height: this._height + "px"
			});
			var deviceType = globals.getSiteLayout().getDeviceType();
			if (this.$$header) {
				this.$$header.remove();
			}
			var views = [];
			var options = self.options;
			options.leftBtnWidth = 2 * this._height;
			options.rightBtnWidth = 2 * this._height;
			if (this.options.views) {
				Object.keys(this.options.views).forEach(function(key) {
					views.unshift(self.options.views[key]);
					if (self.options.views[key].$selected) {
						options.description = self.options.views[key].$description;
						options.factoryOwner = self.options.views[key].$factoryOwner;
					}
				});
			}

			options.deviceType = deviceType;
			options.views = (views && views.length > 1) ? views : null;

			options.displayButtonHiddenTiles = options.hiddenTiles ? "" : "none"
				//options.leftBtnWidth += (options.hiddenTiles ? this._height : 0);
				//options.rightBtnWidth += ((options.personal || options.savePublished) ? this._height : 0);
				//options.displayButtonSave = (options.dirty && (options.personal || options.savePublished)) ? "" : "none";
			options.buttonSaveAction = options.personal ? "savePersonalDashboard" : "publishDashboard";
			var lknCtx = this._linkContext();
			options.dropDown = _getHtml(null, "dropDown", lknCtx);

			this.$$header = $(_getHtml(null, "main", options));
			this.$$header.appendTo(this.$$elmt);
		},
		_linkContext: function() {
			var lnkCtx = {
				dropdownId: utils.UUID(),
				links: []
			};

			if (this.options.views && this.options.views.length > 1) {
				lnkCtx.links.push({
					"icon": "fa fa-bars",
					"data-params": "dashboardList",
					"label": locale.text("welcome.dashboard.list")
				})
			}
			if (!this.options.personal) {
				lnkCtx.links.push({
					"icon": "fa fa-floppy-o",
					"data-params": "dashboardReplace",
					"label": locale.text("welcome.dashboard.saveas.mine")
				})
			}
			if (this.options.publish) {
				lnkCtx.links.push({
					"icon": "fa fa-share-alt",
					"data-params": "dashboardShare",
					"label": locale.text("welcome.dashboard.share")
				})
			}
			if (true) {
				lnkCtx.links.push({
					dividerTop: true
				});
				lnkCtx.links.push({
					"icon": "fa fa-plus",
					"data-params": "dashboardAddGroup",
					"label": locale.text("welcome.dashboard.add.group")
				})
			}
			return lnkCtx;
		},
		/**
		 * This method is called each time the header is toggled
		 */
		notifToggled: function(shown) {},
		notifDashboardStateChange: function(data) {
			var self = this;
			if (data.hiddenTiles) {
				$("[data-action='addHiddenTile']", self.$$elmt).show();
			} else {
				$("[data-action='addHiddenTile']", self.$$elmt).hide();
			}
			if (data.dirty) {
				$("[data-action='savePersonalDashboard'],[data-action='publishDashboard']", self.$$elmt).show();
			} else {
				$("[data-action='savePersonalDashboard'],[data-action='publishDashboard']", self.$$elmt).hide();
			}
		},
		/**
		 * Detach from document
		 */
		detach: function() {
			this.notifToggled(false);
			if (this.$$elmt) {
				this.$$elmt.detach();
			}
		},
		getHeight: function() {
			return this.$$elmt.is(":visible") ? this._height : 0;
		}
	});

exports.Klass = _Klass;