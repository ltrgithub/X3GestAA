"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var uiSettings = require('syracuse-tablet/html/js/helpers/uiSettings');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var dashboardUtils = require('syracuse-tablet/html/js/helpers/dashboardUtils');

var _templates = {
	main: '\
			<div class="s-m-header {{deviceType}} s-m-dasboard-config">\
				<buttons class="pull-left dashboard-header-btn" style="width:{{leftBtnWidth}}px">\
				{{#if hiddenTiles}}\
					<button type="button" class="btn btn-default addapp" data-action="addHiddenTile">\
					<i class="fa fa-cubes"></i>\
					</button>\
				{{/if}}\
				{{#if views}}\
					<button type="button" class="btn btn-default" data-action="changeWelcome">\
					<i class="fa fa-bars"></i>\
					</button>\
				{{/if}}\
				</buttons>\
				<div class="s-m-header-labels">\
					{{#if factoryOwner}}\
					<span class="s-m-header-label">{{factoryOwner}}</span>\
					{{/if}}\
					<span class="s-m-header-label">{{description}}</span>\
				</div>\
				<buttons class="pull-right dashboard-header-btn" style="width:{{rightBtnWidth}}px">\
					<button type="button" class="btn btn-danger" data-action="closeDashboardConfig">\
						<i class="fa fa-close"></i>\
					</button>\
					{{#if personal}}\
						{{#if dirty}}\
						<button type="button"class="btn btn-default" data-action="savePersonalDashboard">\
							<i class="fa fa-check"></i>\
						</button>\
						{{/if}}\
					{{else}}\
						<button type="button"class="btn btn-default" data-action="restaurPersonalDashboard">\
							<i class="fa fa-check"></i>\
						</button>\
					{{/if}}\
					{{#if publish}}\
					<button type="button"class="btn btn-danger" data-action="publishDashboard">\
						<i class="fa fa-share-alt"></i>\
					</button>\
					{{/if}}\
				</buttons>\
			</div>'
};

var _getHtml = function(type, name, ctx) {
	type = type || "";
	var key = type + name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = type.length == 0 ? _templates[name] : _templates[type][name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};


/**
 * Header displayed when a dashboard is in configuration mode
 */
var _Klass = utils.defineClass(

	function ctrlDashboardConfigHeader($type, controller, options) {
		options = options || {};
		Base.call(this, controller, {
			$bind: "header"
		}, prototype.create({
			$type: $type
		}), options);
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			console.log("buildHtml", this.options)
			var self = this;
			buildOptions = buildOptions || {};
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, [this.typeName]);
			this._height = uiSettings.getProp("header.height");
			this.$$elmt.css({
				height: this._height + "px"
			});
			var deviceType = globals.getSiteLayout().getDeviceType();
			if (this.$$header) {
				this.$$header.remove();
			}
			var views = [];
			var options = self.options;
			options.leftBtnWidth = 0;
			options.rightBtnWidth = this._height;

			Object.keys(this.options.views).forEach(function(key) {
				views.unshift(self.options.views[key]);
				if (self.options.views[key].$selected) {
					options.description = self.options.views[key].$description;
					options.factoryOwner = self.options.views[key].$factoryOwner;
				}
			});
			options.deviceType = deviceType;
			options.views = (views && views.length > 1) ? views : null;
			var unbind = dashboardUtils.getUnbindProperties(self.controller.article, self.controller.prototype.getPropertyNames());
			if (unbind.length > 0) {
				options.hiddenTiles = true;
			}
			options.leftBtnWidth += ((options.hiddenTiles ? this._height : 0) + (options.views ? this._height : 0));
			options.rightBtnWidth += ((((options.personal && options.dirty) || !options.personal) ? this._height : 0) + (options.publish ? this._height : 0));
			this.$$header = $(_getHtml(null, "main", options));
			this.$$header.appendTo(this.$$elmt);
		},
		/**
		 * This method is called each time the header is toggled
		 */
		notifToggled: function(shown) {},
		/**
		 * Detach from document
		 */
		detach: function() {
			this.notifToggled(false);
			if (this.$$elmt) {
				this.$$elmt.detach();
			}
		},
		getHeight: function() {
			return this.$$elmt.is(":visible") ? this._height : 0;
		}
	});

exports.Klass = _Klass;