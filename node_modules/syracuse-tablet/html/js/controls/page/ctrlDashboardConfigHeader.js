"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var uiSettings = require('syracuse-tablet/html/js/helpers/uiSettings');

var _templates = {
	main: '\
			<div class="s-m-header {{deviceType}}">\
				<div class="s-m-header-links">\
					<a href="#" draggable="false" class="s-m-link" data-action="closeDashboardConfig" data-params="">\
						<i class="fa fa-close"></i>\
					</a>\
				</div>\
			</div>'
};

var _getHtml = function(type, name, ctx) {
	type = type || "";
	var key = type + name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = type.length == 0 ? _templates[name] : _templates[type][name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};


/**
 * Header displayed when a dashboard is in configuration mode
 */
var _Klass = utils.defineClass(

	function ctrlDashboardConfigHeader($type, controller, options) {
		options = options || {};
		Base.call(this, controller, {
			$bind: "header"
		}, prototype.create({
			$type: $type
		}), options);
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			buildOptions = buildOptions || {};
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, [this.typeName]);
			this._height = uiSettings.getProp("header.height");
			this.$$elmt.css({
				height: this._height + "px"
			});
			var deviceType = globals.getSiteLayout().getDeviceType();
			if (this.$$header) {
				this.$$header.remove();
			}
			this.$$header = $(_getHtml(null, "main", {
				deviceType: deviceType
			}));
			this.$$header.appendTo(this.$$elmt);
		},
		/**
		 * This method is called each time the header is toggled
		 */
		notifToggled: function(shown) {},
		/**
		 * Detach from document
		 */
		detach: function() {
			this.notifToggled(false);
			if (this.$$elmt) {
				this.$$elmt.detach();
			}
		},
		getHeight: function() {
			return this.$$elmt.is(":visible") ? this._height : 0;
		}
	});

exports.Klass = _Klass;