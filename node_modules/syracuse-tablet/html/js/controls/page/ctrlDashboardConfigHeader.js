"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var uiSettings = require('syracuse-tablet/html/js/helpers/uiSettings');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _templates = {
	main: '\
			<div class="s-m-header {{deviceType}} s-m-dasboard-config">\
				<div class="s-m-header-title">\
					<input class="s-m-header-label" value="{{description}}">\
				</div>\
				<buttons class="pull-right dashboard-header-btn" style="width:{{rightBtnWidth}}px">\
					<button type="button" class="btn btn-default" style="display:{{displaySaveButton}}" data-action="{{buttonSaveAction}}" data-params="{{description}}">\
						<i class="fa fa-check"></i>\
					</button>\
					<button type="button" style="float:right" class="btn btn-danger" data-action="closeDashboardConfig">\
						<i class="fa fa-close"></i>\
					</button>\
				</buttons>\
			</div>'
};

var _getHtml = function(type, name, ctx) {
	type = type || "";
	var key = type + name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = type.length == 0 ? _templates[name] : _templates[type][name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};


/**
 * Header displayed when a dashboard is in configuration mode
 */
var _Klass = utils.defineClass(

	function ctrlDashboardConfigHeader($type, controller, options) {
		options = options || {};
		Base.call(this, controller, {
			$bind: "header"
		}, prototype.create({
			$type: $type
		}), options);
		notifications.subscribe(this, ["sm.dashboard.state.change"]);
	}, Base, {

		destroy: function() {
			$("input.s-m-header-label").off("change");
			Base.prototype.destroy.call(this);
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			buildOptions = buildOptions || {};
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, [this.typeName]);
			this._height = uiSettings.getProp("header.height");
			this.$$elmt.css({
				height: this._height + "px"
			});
			var deviceType = globals.getSiteLayout().getDeviceType();
			if (this.$$header) {
				this.$$header.remove();
			}
			var views = [];
			var options = self.options;
			options.leftBtnWidth = this._height;
			options.rightBtnWidth = 2 * this._height;

			options.description = self.options.currentView.length > 0 ? self.options.currentView[0].$description : "" //locale.text("welcome.newtemplate") ;

			options.deviceType = deviceType;
			// Save a template or its personal
			//a non authorized user can save a template as its personal dashboard :
			// 		options.personal : its a personal user dashboard
			// 		else  save a template
			options.buttonSaveAction = options.personal ? "savePersonalDashboard" : "saveTemplateDashboard";
			options.displaySaveButton = "none"
			options.description = options.description || locale.text("welcome.mydashboard")
			this.$$header = $(_getHtml(null, "main", options));
			this.$$header.appendTo(this.$$elmt);
			$("input.s-m-header-label", this.$$elmt).on('change', jsutils.bindFn(this._titleChange, this))
		},
		_titleChange: function() {
			notifications.publish(["sm.dashboard.title.change"], $("input.s-m-header-label", this.$$elmt).val());
		},
		/**
		 * This method is called each time the header is toggled
		 */
		notifToggled: function(shown) {},
		notifDashboardStateChange: function(data) {
			if (data.dirty) {
				$("[data-action='savePersonalDashboard'],[data-action='saveTemplateDashboard']", this.$$elmt).show();
			} else {
				$("[data-action='savePersonalDashboard'],[data-action='saveTemplateDashboard']", this.$$elmt).hide();
			}
		},
		/**
		 * Detach from document
		 */
		detach: function() {
			this.notifToggled(false);
			if (this.$$elmt) {
				this.$$elmt.detach();
			}
		},
		getHeight: function() {
			return this.$$elmt.is(":visible") ? this._height : 0;
		}
	});

exports.Klass = _Klass;