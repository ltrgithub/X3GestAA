"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiSettings = require('syracuse-tablet/html/js/helpers/uiSettings');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var ctrlHelpers = require('syracuse-tablet/html/js/controls/ctrlHelpers');

var _templates = {
	main: '\
		<div class="s-m-footer s-m-opened container-fluid {{deviceType}}">\
			{{{contentHtml}}}\
		</div>',
	tablet: {
		main: '\
			<div class="s-m-footer-left">\
				{{#if addGroup}}{{{addGroup}}}{{/if}}\
				{{#if addHiddenTiles}}{{{addHiddenTiles}}}{{/if}}\
				{{#if dashboardShare}}{{{dashboardShare}}}{{/if}}\
				{{#if dashboardList}}{{{dashboardList}}}{{/if}}\
			</div>\
		',
		action: '\
			<a href="#" class="s-m-link" style="display:{{display}}" data-action="{{action}}">\
				<i class="{{icon}}"/>\
				<span>{{{title}}}</span>\
			</a>'
	},
	smartphone: {
		main: '\
			<div class="s-m-footer-left">\
				{{#if addGroup}}{{{addGroup}}}{{/if}}\
				{{#if addHiddenTiles}}{{{addHiddenTiles}}}{{/if}}\
				{{#if dashboardShare}}{{{dashboardShare}}}{{/if}}\
				{{#if dashboardList}}{{{dashboardList}}}{{/if}}\
			</div>\
		',
		action: '\
			<a href="#" class="s-m-link" style="display:{{display}}" data-action="{{action}}">\
				<i class="{{icon}}"/>\
				<span>{{{title}}}</span>\
			</a>'
	}
};

var _getHtml = function(type, name, ctx) {
	type = type || "";
	var key = type + name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = type.length == 0 ? _templates[name] : _templates[type][name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	if (!tmpl) alert("footer template " + name + " not found");
	return tmpl(ctx);
};
/**
 * Base footer class
 */
var _Klass = utils.defineClass(
	function CtrlDashboardConfigFooter($type, controller, options) {
		Base.call(this, controller, {
			$bind: "footer"
		}, prototype.create({
			$type: $type
		}), options);
		notifications.subscribe(this, ["sm.dashboard.state.change"]);
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
			notifications.unsubscribe(this);
		},
		getPageControlType: function() {
			return "footer";
		},
		/**
		 * Controller that handles actions
		 * For actions in dashboard this controller is the page nested in the vignette
		 * Can be overridden
		 */
		buildHtml: function($$parent, controllerDao, buildOptions) {
			buildOptions = buildOptions || {};
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, [this.typeName]);
			this._$$parent = this.$$elmt.closest("footer");
			//if (buildOptions.refresh === true || this.footerOptions.forceRefresh) {
			// Avoid double build
			// If it's not a refresh build is called on onResize - there's always a triggerResize when we rendre a page
			this._build();
			//}
		},
		getActionController: function() {
			return this.controller;
		},
		applyMetaData: function(metaData, buildOptions) {
			//  No meta for this control 
			return;
		},
		onMainPageResize: function(info, orientation) {
			var deviceType = globals.getSiteLayout().getDeviceType();
			this._build(deviceType);
			if (this.$$footer && deviceType === "tablet") {
				// Set height/top of footer in any cases
				// Cancel bottom:0px of buildHtml
				this._$$parent.css({
					top: (info.contentHeight - this._height) + "px",
					width: info.contentWidth + "px",

				});
				// Show needed to allow page to get height for scroller
				this._$$parent.show();
			}
		},
		getHeight: function() {
			return this.$$elmt.is(":visible") && this._deviceType === "tablet" ? this._height : 0;
		},
		/**
		 */
		_build: function(deviceType) {
			deviceType = deviceType || globals.getSiteLayout().getDeviceType();
			if (this._deviceType != null && this._deviceType === deviceType) return;
			this._deviceType = deviceType;
			if (this.$$footer) {
				this.$$footer.remove();
				this.$$footer = null;
			}
			this._height = uiSettings.getProp("footer.height");
			this._$$parent.css({
				left: (deviceType === "tablet" ? 0 : 30) + "px",
				height: this._height + "px",
				bottom: "0px",
				width: (deviceType === "tablet" ? "100%" : "auto")
			});
			var htmlCtx = {};
			htmlCtx.addHiddenTiles = _getHtml(deviceType, "action", {
				action: "addHiddenTile",
				icon: fontUtils.pageIcon("addHiddenTile"),
				title: locale.text("welcome.dashboard.add.hiddenTile"),
				display: this.options.hiddenTiles ? "" : "none"
			});

			htmlCtx.addGroup = _getHtml(deviceType, "action", {
				action: "addGroup",
				icon: fontUtils.pageIcon("addGroup"),
				title: locale.text("welcome.dashboard.add.group"),
				display: ""
			});
			if (this.options.publish) {
				htmlCtx.dashboardShare = _getHtml(deviceType, "action", {
					action: "saveTemplateDashboard",
					icon: fontUtils.pageIcon("dashboardShare"),
					title: locale.text("welcome.dashboard.share"),
					display: ""
				});
			} else {
				// can save this template (the user is the owner) so He can replace its own dashboard by its own template
				if (this.options.savePublished) {
					htmlCtx.dashboardShare = _getHtml(deviceType, "action", {
						action: "savePersonalDashboard",
						icon: fontUtils.pageIcon("dashboardSaveAs"),
						title: locale.text("welcome.dashboard.saveas.mine"),
						display: ""
					});

				}
			}
			htmlCtx.dashboardList = _getHtml(deviceType, "action", {
				action: "dashboardList",
				icon: fontUtils.pageIcon("dashboardList"),
				title: this.options.onlyTemplate ? locale.text("welcome.template.list") : locale.text("welcome.dashboard.list"),
				display: (this.options.views && this.options.views.length > 1) ? "" : false
			});
			this.$$footer = $(_getHtml(null, "main", {
				contentHtml: _getHtml(deviceType, "main", htmlCtx),
				deviceType: deviceType
			}));
			this.$$footer.appendTo(this.$$elmt.show());
			// Check if dao dirty to update save satus
			ctrlHelpers.checkLinkInitStatus(this);
		},
		notifDashboardStateChange: function(data) {
			if (data.hiddenTiles) {
				$("[data-action='addHiddenTile']", this.$$elmt).show();
			} else {
				$("[data-action='addHiddenTile']", this.$$elmt).hide();
			}
			if (data.views && data.views.length > 1) {
				$("[data-action='dashboardList']", this.$$elmt).show();
			} else {
				$("[data-action='dashboardList']", this.$$elmt).hide();
			}
		},
		/**
		 * Page footer can be changed
		 * This method is called each time the footer is toggled
		 */
		notifToggled: function(shown) {
			if (shown === false) {
				if (this._multiSelManager) {
					this._multiSelManager.disable();
				}
				return;
			}
		},
		/**
		 * Detach from document
		 */
		detach: function() {
			this.notifToggled(false);
			if (this.$$elmt) {
				this.$$elmt.detach();
			}
		}
	});

exports.Klass = _Klass;