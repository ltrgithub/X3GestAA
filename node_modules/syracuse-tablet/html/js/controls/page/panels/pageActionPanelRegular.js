"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/page/panels/actionPanel').Klass;
var actionManager = require('syracuse-tablet/html/js/application/actionManager');
var multiSelectionMgr = require('syracuse-tablet/html/js/application/multiSelectionMgr');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _templates = {
	actionLink: '\
	{{#each links}}\
		<li>\
			<a draggable="false" href="#" class="{{css}}" data-action="actionLink" data-params="{{$uuid}}" data-control-id="{{../ctrlId}}">\
				<i style="font-size: large" class="{{icon}}"/>\
				<span>{{title}}</span>\
			</a>\
		</li>\
	{{/each}}'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/**
 * Regular page action panel
 */
var _Klass = utils.defineClass(

	function(controller, $type, panelId, options) {
		Base.call(this, controller, $type, panelId, options);
	}, Base, {

		destroy: function() {
			if (this._multiSelManager) {
				this._multiSelManager.destroy();
				this._multiSelManager = null;
			}
			Base.prototype.destroy.call(this);
		},

		buildPanel: function(context, side) {
			if (!this.actionManager) {
				this._createActionManager();
			}
			context.items = [];
			// Top level links - no title
			if (this._smartPhoneMultiselLink()) {
				this._multiSelManager = multiSelectionMgr.create(this.controller);
				var info = this.actionManager.getMultiSelectionLink();
				info.$isAction = true;
				info.$uuid = "togglemultiselection";
				context.items.push({
					title: null,
					html: _getHtml("actionLink", {
						ctrlId: this.id,
						links: [info]
					})
				});
			}
			// Specific additional links
			var backToList;
			if (this._smartPhoneBackToQueryLink()) {
				// Add back to list to be processed by action manager
				backToList = this.controller.getProtoLinks("$query").$query;
				this.actionManager.addLink(backToList);
				context.items.push({
					title: locale.text("actionpanel.label.links"),
					html: _getHtml("actionLink", {
						ctrlId: this.id,
						links: [backToList]
					})
				});
			}
			// Prototype action links
			if (this._hasActionLinks()) {
				// Exclude back to list because already displayed in label.links section
				var exclude = [backToList ? backToList.$uuid : null];
				context.items.push({
					title: locale.text("actions"),
					html: _getHtml("actionLink", {
						ctrlId: this.id,
						links: this.actionManager.getLinks(exclude)
					})
				});
			}
			return Base.prototype.buildPanel.call(this, context);
		},
		_smartPhoneMultiselLink: function() {
			return globals.isSmartphone() && this.controller.isMultiSelectionEnabled();
		},

		_smartPhoneBackToQueryLink: function() {
			return globals.isSmartphone() && this.controller.prototype.isDetails() && this.controller.getProtoLinks("$query") != null;
		},

		_hasActionLinks: function() {
			return this._createActionManager().hasLinks();
		},

		_actActionLink: function(uuid, $$target, evt) {
			if (evt) {
				// We stop propagation because we are sure there no need to propagate
				// See #6497 - Some times the propagation tries to close the panel but page has been already destroyed
				evt.stopPropagation();
			}
			this.close("close");
			if (uuid === "togglemultiselection") {
				notifications.publish("sm.panel.multiselection.toggle");
				return;
			} else {
				return Base.prototype._actActionLink.call(this, uuid);
			}
		},
		_createActionManager: function() {
			if (this.actionManager) return this.actionManager;
			this.setActionManager(actionManager.create(this.controller, "actionpanel"));
			return this.actionManager;
		},
		hasLinks: function() {
			return this._hasActionLinks() || this._smartPhoneBackToQueryLink() || this._smartPhoneMultiselLink();
		},
		_actActionNavigation: function(uuid, $$target, evt) {
			if (evt) {
				// We stop propagation because we are sure there no need to propagate
				// See #6497 - Some times the propagation tries to close the panel but page has been already destroyed
				evt.stopPropagation();
			}
			if (this.actionManager) {
				return this.actionManager.triggerLink(uuid, this.controller).then(function(success, link, data, options) {}).fail(function() {});
			} else {
				return $.smResolve();
			}
		}
	});

exports.Klass = _Klass;