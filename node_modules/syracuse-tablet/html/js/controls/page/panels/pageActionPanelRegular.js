"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/panels/actionPanel').Klass;
var actionManager = require('syracuse-tablet/html/js/application/actionManager');

var _templates = {
	actionLink: '\
		{{#each links}}\
			<li>\
		 		{{#if $isAction}} \
					<a draggable="false" href="#" class="{{css}}" data-action="actionLink" data-params="{{$uuid}}" data-control-id="{{../../ctrlId}}">\
						<i style="font-size: large" class="{{icon}}"/>\
						<span>{{title}}</span>\
					</a>\
				{{else}} \
					<a draggable="false" href="#" class="{{css}}" data-nav="{{page}}"  data-sdata-url="{{sDataUrl}}" data-sdata-method="{{$method}}" data-params="{{$uuid}}" data-sdata-parameters="{{parameters}}" data-control-id="{{../ctrlId}}">\
						<i style="font-size: large" class="{{icon}}"/>\
						<span>{{title}}</span>\
					</a>\
				{{/if}} \
			</li>\
		{{/each}}'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/**
 * Regular page action panel
 */
var _Klass = utils.defineClass(

	function(controller, $type, panelId, options) {
		Base.call(this, controller, $type, panelId, options);
	}, Base, {

		buildPanel: function(context, side) {
			if (!this.actionManager) {
				this._createActionManager();
			}
			if (this.actionManager.hasLinks()) {
				context.title = "Actions";
				context.actionsHtml = _getHtml("actionLink", {
					ctrlId: this.id,
					links: this.actionManager.getLinks()
				});
			}
			return Base.prototype.buildPanel.call(this, context);
		},
		_actActionLink: function(uuid) {
			this.close("close");
			return Base.prototype._actActionLink.call(this, uuid);
		},
		_createActionManager: function() {
			if (this.actionManager) return this.actionManager;
			this.setActionManager(actionManager.create(this.controller, "actionpanel"));
			return this.actionManager;
		},
		hasLinks: function() {
			if (Base.prototype.hasLinks.call(this)) {
				return true;
			}
			return this._createActionManager() && this.actionManager.hasLinks();
		}
	});

exports.Klass = _Klass;