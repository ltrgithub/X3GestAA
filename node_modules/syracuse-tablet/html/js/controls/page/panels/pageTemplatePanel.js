"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/panels/dialogPanel').Klass;
var locale = require('syracuse-tablet/html/js/helpers/locale');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');

var _txt = function(id) {
	return locale.text("edit.templates.dlog." + id);
};
var _templates = {
	error: '<section class="draft-error"><h1>{{error}}<h1><h2>{{contact}}<h2></section>',
	main: '\
		<article style="height:100%">\
			<section class="panel panel-default create">\
				<div class="panel-heading">{{createSection}}</div>\
				<div class="panel-body">\
					<table style="width:100%"><tr>\
						<td>{{name}}</td>\
						<td>\
							<input class="ctrl-evt-input" type="text" style="width: 100%;"/>\
						</td>\
						<td>\
							<span style="float:right;" class="btn btn-default disabled" data-action="create" data-control-id="{{ctrlId}}">\
								<i class="{{createicn}}"></i>\
								<span>{{create}}</span>\
							</span>\
						</td>\
					</tr></table>\
				</div>\
			</section>\
			<section class="panel panel-default avail" style="overflow:hidden">\
				<div class="panel-heading"  style="width:100%">{{availSection}}</div>\
				<div style="overflow:hidden">\
					<ul style="margin:-1px" class="list-group s-m-scroll-elmt">\
					</ul>\
				</div>\
			</section>\
		</article>',
	items: '\
		{{#each items}}\
			<li class="list-group-item" data-params="{{tmplId}}">\
				<div>\
					<span style="display:inline-block;"><div><b>{{title}}</b></div><div><small>{{date}}</small></div></span>\
					<span style="float:right;">\
						<span class="btn btn-default " data-action="apply" data-control-id="{{../ctrlId}}">\
							<i class="{{../applyicn}}"></i>\
							<span>{{../apply}}</span>\
						</span>\
						<span class="btn btn-default" data-action="edit" data-control-id="{{../ctrlId}}">\
							<i class="{{../editicn}}"></i>\
						</span>\
						<span class="btn btn-default" data-action="remove" data-control-id="{{../ctrlId}}">\
							<i class="{{../removeicn}}"></i>\
						</span>\
					</span>\
				</div>\
			</li>\
		{{/each}}'
};
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	if (!tmpl) alert("template " + name + " not found");
	return tmpl(ctx);
};

var _Klass = utils.defineClass(

	function(controller, $type, panelId, options) {
		options.enableGesture = true;
		Base.call(this, controller, $type, panelId, options);
		this.representation = options.representation;
		this.dateFormatter = formatApi.getFormatter("application/x-datetime");
	}, Base, {
		buildHtml: function(side) {
			if (this.$$content) {
				this.$$content.remove();
			}
			Base.prototype.buildHtml.call(this, side, _txt("title"));
			this.$$content = this._buildContent().appendTo(this.$$elmt);
			// asynchronous built
			this._buildItems();
		},
		/**
		 * Build the main content synchronously (without tmpl list)
		 * We need to build at least s-m-scroll-elmt synchronously to be compliant with sidePanel gesture management
		 */
		_buildContent: function(representation, endpoint) {
			var context = {
				createSection: _txt("createSection"),
				availSection: _txt("availSection"),
				name: _txt("name"),
				create: _txt("create"),
				createicn: fontUtils.getIconByName("$apply"),
				ctrlId: this.id
			};
			return $(_getHtml("main", context));
		},
		/**
		 * Build the list of templates asynchronously
		 */
		_buildItems: function(representation, endpoint) {
			var self = this;
			var context = {
				ctrlId: self.id,
				editicn: fontUtils.getIconByName("$edit"),
				removeicn: fontUtils.getIconByName("$delete"),
				applyicn: fontUtils.getIconByName("$apply"),
				apply: _txt("apply"),
				items: []
			};
			globals.getStorage().templateOperation("query", self.representation, globals.getEndpoint(), true).then(function(templates) {
				templates = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
				templates.forEach(function(tmpl, idx) {
					context.items.push({
						title: "Title template",
						date: self.dateFormatter.formatValue("2016-01-03-15-35-54"),
						tmplId: idx
					});
				});
				$(_getHtml("items", context)).appendTo(self.$$content.find(".panel.avail ul"));
				// An update is needed because height changed
				self._updateGesture();
			}).fail(function(e) {
				globals.getModal().error(locale.text("edit.templates.dlog.readallerr"), e, function() {
					self.$$content.html($(_getHtml("error", {
						error: locale.text("error"),
						contact: locale.text("contact.admin")
					})));
				});
			});
		},
		_getTmplId: function($target, event) {
			event.stopPropagation();
			return $target.closest("li[data-params]").attr("data-params");
		},
		_actApply: function(param, $target, event) {
			var tmplId = this._getTmplId($target, event);
			if (!tmplId) return;
			alert("_actApply - " + tmplId);
		},
		_actEdit: function(param, $target, event) {
			var tmplId = this._getTmplId($target, event);
			if (!tmplId) return;
			alert("_actEdit - " + tmplId);
		},
		_actRemove: function(param, $target, event) {
			var tmplId = this._getTmplId($target, event);
			if (!tmplId) return;
			alert("_actRemove - " + tmplId);
		},
		_actCreate: function(param, $target, event) {
			event.stopPropagation();
			var label = this.$$content.find('.panel.create input').val();
			alert("_actCreate - " + label);
		},
		/**
		 * Manages create button status
		 */
		onInput: function(evt) {
			var $$t = $(evt.target);
			if (!$$t.is("input")) return;
			if (!this._$$create) {
				this._$$create = this.$$content.find('.btn[data-action="create"]');
			}
			this._$$create.toggleClass("disabled", $$t.val().trim().length <= 0);
		}
	});

exports.Klass = _Klass;