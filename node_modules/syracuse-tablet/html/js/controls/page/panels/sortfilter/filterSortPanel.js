"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var Base = require('syracuse-tablet/html/js/controls/page/panels/sidePanel').Klass;
var _Sort = require('syracuse-tablet/html/js/controls/page/panels/sortfilter/tabSort').Klass;
var _Filter = require('syracuse-tablet/html/js/controls/page/panels/sortfilter/tabFilter').Klass;
var _Memo = require('syracuse-tablet/html/js/controls/page/panels/sortfilter/tabMemo').Klass;
var locale = require('syracuse-tablet/html/js/helpers/locale');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var _templates = {
	main: '\
		<section class="s-m-side-panel {{side}}">\
			<ul class="nav nav-pills" role="tablist"> \
				{{#each tabs}}\
					<li><a href="#{{id}}" class="{{icon}}" role="tab" data-toggle="tab"></a></li> \
				{{/each}}\
			</ul> \
			<div class="tab-content">\
				<header>{{title}}</header>\
				{{#each tabs}}\
					<div id="{{id}}" role="tabpanel" class="tab-pane {{type}}"> \
						<div class="btn-group btn-group-justified header-btn" role="group">\
						{{#each buttons}}\
							<a type="button" class="btn btn-default {{this.icon}}" data-params="{{this.params}}"></a>\
						{{/each}}\
						</div>\
					</div>\
				{{/each}}\
			</div> \
		</section>',
};


var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

var _tabDescr = [{
	klass: _Sort,
	options: {
		name: "sort",
		isActive: true,
		singleCriteria: true,
		buttons: [{
			params: "apply",
			icon: fontUtils.sortFilterTab("apply")
		}, {
			params: "memo",
			icon: fontUtils.sortFilterTab("memo")
		}]
	}
}, {
	klass: _Filter,
	options: {
		name: "filter",
		isActive: false,
		buttons: [{
			params: "apply",
			icon: fontUtils.sortFilterTab("apply")
		}, {
			params: "memo",
			icon: fontUtils.sortFilterTab("memo")
		}]
	}
}, {
	klass: _Memo,
	options: {
		name: "memo",
		isActive: false
	}
}];

/**
 * Arrays Sort/Filter panel
 * Options
 * 		parentArray: 	parent array control
		filter: 		false to hide filter tab
		sort: 			false to hide sort tab
 */
var _Klass = utils.defineClass(
	function(controller, $type, panelId, options) {
		this._tabs = {};
		Base.call(this, controller, $type, panelId, options);
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			this._activeTab = null;
			this.options.parentArray = null;
			var self = this;
			notifications.unsubscribe(self, ["sm.click.icon.filterSort"]);
			if (this._tabs) {
				$.each(this._tabs, function(key, value) {
					value.destroy();
				});
				this._tabs = null;
			}
			if (this.$$btnBar) {
				this.$$btnBar.unbind();
				this.$$btnBar.remove();
				this.$$btnBar = null;
			}
		},
		getParentArray: function() {
			return this.options.parentArray;
		},
		/**
		 * Build panel and tabs html
		 */
		buildHtml: function(side) {
			var self = this;
			notifications.subscribe(self, ["sm.click.icon.filterSort"]);
			Base.prototype.buildHtml.call(this, side);
			self.$$elmt.addClass(self.typeName);
			if (self.$$panel) {
				self.$$panel.remove();
			}
			var ctx = {
				ctrlId: self.id,
				side: side,
				apply: locale.text("panels.array.apply"),
				close: locale.text("panels.array.close"),
				/* There's no titles for queries*/
				title: this.getParentArray().getTitle(),
				tabs: [],
			};
			var descriptions = [];
			/**
			 * We can disable filter or sort with self.options.filter = false or  self.options.sort
			 */
			_tabDescr.forEach(function(descr) {
				descr = $.extend({}, descr);
				descr.options.hidden = self.options[descr.options.name] === false;
				descriptions.push(descr);
			});
			var ids = {};
			descriptions.forEach(function(descr) {
				ids[descr.options.name] = utils.readableuid("array" + descr.options.name);
				ctx.tabs.push({
					id: ids[descr.options.name],
					//title: descr.title || locale.text("panels.array." + descr.options.name),
					icon: fontUtils.sortFilterTab(descr.options.name),
					type: descr.options.name,
					buttons: descr.options.buttons
				});
			});
			self.$$panel = $(_getHtml("main", ctx));
			if (self.$$panel && self.$$panel.length) {
				self.$$elmt.append(self.$$panel);
				var visibleTabs = [];
				var activeIdx = -1;
				// Create tabs
				descriptions.forEach(function(descr, idx) {
					var t = new descr.klass(self, ids[descr.options.name], descr.options);
					if (descr.options.hidden) {
						t.hide();
					} else {
						visibleTabs.push(t);
						if (descr.options.isActive) {
							activeIdx = idx;
						}
					}
					self._tabs[descr.options.name] = t;
				});
				if (visibleTabs.length > 0) {
					this._activeTab = visibleTabs[activeIdx === -1 ? 0 : activeIdx];
					// Adjust width
					var width = visibleTabs.length === 1 ? "100%" : Math.round(1000 * 100 / visibleTabs.length) / 1000 + "%";
					visibleTabs.forEach(function(t) {
						t.setWidth(width);
					});
					self.$$btnBar = self.$$panel.find('.tab-content .btn-group.header-btn');
					self.$$btnBar.on('click', '[data-params]', jsutils.bindFn(self.onBtnBarClick, this));
				} else {
					this.close();
				}
			}
		},
		/**
		 * Notification when panel is opened/closed
		 * Pass event to tabs
		 */
		notifyToggled: function(side, action, visible) {
			Base.prototype.notifyToggled.call(this, side, action, visible);
			$.each(this._tabs, function(id, tab) {
				tab[visible ? "notifyOpenPanel" : "notifyClosePanel"]();
			});
			if (visible && this._activeTab) {
				this._activeTab.triggerActivate();
			}
		},
		onResize: function(context) {
			if (this.destoyed || !this._tabs) return;
			$.each(this._tabs, function(id, tab) {
				tab.onResize(context);
			});
		},
		onBtnBarClick: function(evt) {
			evt.preventDefault();
			evt.stopPropagation();
			var $$target = $(evt.target);
			var params = $$target.attr("data-params");
			switch (params) {
				case "apply":
					if (this._activeTab && this._activeTab.doActionApply(evt, $$target) === true) {
						this.close();
					}
					break;
				case "memo":

					break;
			}
		},
		notifyActiveTab: function(tab) {
			this._activeTab = tab;
		},
		/*
		 *	Returns panel tabs
		 */
		getTabs: function() {
			return this._tabs;
		},
		notifClickIconFilterSort: function(context) {
			if (context && context.className) {
				if (context.className.indexOf("sorted") >= 0) {
					this.getTabs()["sort"].triggerActivate();
				} else if (context.className.indexOf("filtered") >= 0) {
					this.getTabs()["filter"].triggerActivate();
				}
			}
		}
	});

exports.Klass = _Klass;