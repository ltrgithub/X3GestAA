"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var formController = require('syracuse-tablet/html/js/helpers/formController');
var Base = require('syracuse-tablet/html/js/controls/page/panels/sortfilter/tabBase').Klass;
var uiRect = require('syracuse-tablet/html/js/ui/rect');
var HammerScroller = require('syracuse-tablet/html/js/helpers/hammerScroller').Klass;
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var daoSdata = require('syracuse-tablet/html/js/application/daoSdata');
var locale = require('syracuse-tablet/html/js/helpers/locale');


var _templates = {
	main: '\
		<section id="formtabroot">\
			<div class="s-m-scroll-wrapper">\
				<div id="formtabform"/>\
			</div>\
			<div class="btn-group btn-group-justified" role="group">\
				<a type="button" class="btn btn-default" data-params="cancelFilterEdit">\
					<i class="fa fa-times" data-params="cancelFilterEdit"></i>\
				</a>\
				<a type="button" class="btn btn-default" data-params="submitFilterEdit">\
					<i class="fa fa-check" data-params="submitFilterEdit"></i>\
				</a>\
			</div>\
		</section>'
};


var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

var _buildOperatorsEnum = function(operators) {
	var res = [];
	$.each(operators, function(idx, op) {
		res.push({
			$value: op,
			$title: locale.text("panels.array.op." + op)
		});
	});
	return res;
};

var FormKlass = utils.defineClass(
	function(proto, dao, gestureMgr, filtersMap) {
		formController.Klass.call(this, "TESTFORMTAB", proto, null, dao, {
			$activity: "edit"
		});
		this.filtersMap = filtersMap;
		this.gestureMgr = gestureMgr;
		this.addEventListener("change", this.onEvtChange);
		this.addEventListener("blur", this.onEvtBlur);
	}, formController.Klass, {
		destroy: function() {
			formController.Klass.prototype.destroy.call(this);
			this.gestureMgr = null;
		},
		makeVisible: function(c) {
			if (!c || !this.gestureMgr) return;
			if (c.$$elmt) c = c.$$elmt;
			this.gestureMgr.makeVisible(c);
		},
		/**
		 * 	when	"before" or "after"
		 * 				"before"	call before calling control event
		 * 					return false 	to continue
		 * 					return true 	to stop the process and not call control's listener
		 * 				"after" 	call after calling control event
		 *	crl		control object
		 */
		onEvtChange: function(when, ctrl, $$target, event) {
			var self = this;
			if (when === "before") {
				var res = false;

				switch (ctrl.$bind) {
					case "FIELDS":

						// nothing to do. user selected "select field" option
						if ($$target.val() == 0) {
							return;
						} else {
							// update operators choice ctrl

							// get operators according to field
							var operators = self.filtersMap[$$target.val() - 1].operators;

							// build new enum
							var $newEnum = _buildOperatorsEnum(operators);

							var newData = {
								"$properties": {
									"OPERATORS": {
										"$value": {
											$enum: $newEnum
										},
										$isReadOnly: false
									}
								},
								"OPERATORS": $newEnum[0].$value
							};

							// apply change
							window.setTimeout(function() {
								self.applyChange($.extend(true, {}, newData), true);
							});
						}
						break;
					case "OPERATORS":
						// TODO handle specific operators such as "between", "empty", "not empty"
						break;
				}
				return res;
			}
		},
		onEvtBlur: function(when, ctrl, $$target, event) {
			//TODO ?
		},
		// check that data is set
		validateForm: function() {
			var self = this;
			var res = true;
			// check every control of the form
			$.each(self.controlsMap, function(bind, ctrl) {
				res = ctrl.$bind === "OPERATORS" ? res : (ctrl.checkData() ? res : false);
			});
			return res;
		}
	});
/**
 * Filter edit tab
 */
var _Klass = utils.defineClass(
	function(parentTab) {
		this.controller = null;
		if (this._gestureMgr) {
			this._gestureMgr.destroy();
		}
		this.$$content = $(_getHtml("main", {}));
		// Create gesture mgr
		this.$$scrollWrapper = this.$$content.find(".s-m-scroll-wrapper");
		this.$$ScrollElmt = this.$$scrollWrapper.children("#formtabform");
		this.$$ScrollElmt.css({
			height: "auto",
			position: "relative"
		});
		this._gestureMgr = new HammerScroller(this.$$ScrollElmt, {
			direction: "v",
			valMax: 0,
			name: "FORMTAB",
			isPageScroller: false
		});
		this.parentTab = parentTab;
		this.panel = parentTab.panel;
	}, null, {
		updateGesture: function() {
			if (!this._gestureMgr) return;
			var wrapperRect = uiRect.elmtRect(this.$$scrollWrapper, "outer");
			var panelRect = uiRect.elmtRect(this.panel.$$elmt, "outer");
			var viewRect = wrapperRect.intersectRect(panelRect);
			if (viewRect && !viewRect.contains(wrapperRect)) {
				this._gestureMgr.init(viewRect);
			} else {
				this._gestureMgr.reset();
			}
		},
		/**
		 * Create content
		 */
		create: function($$container) {
			var self = this;

			if (self.$$content.parent().length == 0) {
				$$container.append(self.$$content);
			}

			self.$$ScrollElmt.empty();

			var array = self.panel.getParentArray();

			var protoJson = self._buildProtoJson();
			var dataJson = self.initData || {};

			var proto = formController.createProto(protoJson, null, array.prototype.data("$baseUrl"));
			var dao = new daoSdata.Dao($.extend(true, {}, dataJson), proto);

			self.controller = new FormKlass(proto, dao, self._gestureMgr, self.filtersMap);
			self.controller.render(self.$$ScrollElmt, {});
			self.updateGesture();

		},
		_getFiltersMap: function() {
			var self = this;
			self.filtersMap = self.filtersMap || self.panel.getParentArray().filterMapGet();
			return self.filtersMap;
		},
		_buildProtoJson: function() {
			var self = this;
			self.filtersMap = self._getFiltersMap();

			// init json
			var protoJson = {
				"$properties": {
					"FIELDS": {
						"$title": locale.text("panels.array.filterForm.field"),
						"$type": "application/x-choice",
						"$capabilities": "sort,filter",
						"$value": {
							"$type": "application/x-integer",
							"$enum": []
						},
						"$isMandatory": true
					},
					"OPERATORS": {
						"$title": locale.text("panels.array.filterForm.operator"),
						"$type": "application/x-choice",
						"$capabilities": "sort,filter",
						"$value": {
							"$type": "application/x-string",
							"$enum": []
						},
						"$isReadOnly": true
					},
					"VALUE": {
						"$title": locale.text("panels.array.filterForm.value"),
						"$type": "application/x-string",
						"$isMandatory": true
					}
				}
			};

			// set fields choice ctrl values
			// protoJson.$properties.FIELDS.$value.$enum
			var $fieldEnum = [];
			$fieldEnum.push({
				$value: 0,
				$title: locale.text("panels.array.filterForm.fieldDefault")
			});
			$.each(self.filtersMap, function(idx, ff) {
				$fieldEnum.push({
					$value: idx + 1,
					$title: ff.fieldName
				});
			});
			protoJson.$properties.FIELDS.$value.$enum = $fieldEnum;

			// set operators choice ctrl default value
			// protoJson.$properties.OPERATORS.$value.$enum
			var $operatorDefEnum = [];
			var operators = self.panel.getParentArray().getOperators();
			protoJson.$properties.OPERATORS.$value.$enum = _buildOperatorsEnum(operators);

			return protoJson;
		},
		/**
		 * Save sort info
		 */
		doActionApply: function(evt, $$target, dataParams) {
			if (!this.controller) return;
			if (!this.controller.checkControlsData()) {
				globals.getModal().error("Data are invalid");
			} else {
				globals.getModal().info("Data are valid");
			}
		},
		doContentAction: function(evt, $$target, params) {
			var self = this;
			switch (params) {
				case "submitFilterEdit":
					self.onFilterEditSubmit();
					break;
				case "cancelFilterEdit":
					self.onCancelEdit();
					break;

			}
		},
		/*
		 * If user submits filter edit, update filter tab info,
		 */
		onFilterEditSubmit: function() {
			var self = this;
			if (self.controller.validateForm()) {
				// build filterInfo object with the following format
				/* {
					filterMapIdx: 'index in filterMap array',
					fieldName: "fieldName",
					operatorLabel: "operator label",
					value: "value to filter by",
					operator: "filter operator"
					id: "field code",
					prop: "field $value object"
				}
				*/
				self.filtersMap = self._getFiltersMap();
				var dao = self.controller.dao.data;
				var filterMapIdx = parseInt(dao.FIELDS, 10) - 1;
				var operator = dao.OPERATORS;
				var value = dao.VALUE;

				var info = {
					filterMapIdx: filterMapIdx,
					fieldName: self.filtersMap[filterMapIdx].fieldName,
					operatorLabel: locale.text("panels.array.op." + operator),
					value: value,
					operator: operator,
					id: self.filtersMap[filterMapIdx].id,
					prop: self.filtersMap[filterMapIdx].prop
				};


				self.filterTab = self.filterTab || self.panel.getTabs().filter;
				self.filterTab.onFilterUpdate(info, !isNaN(parseInt(self.initIdx, 10)) && self.initIdx >= 0 ? self.initIdx : null);

				self._onTabClose();
			}
		},
		/*
		 * If user cancels filter edit, hide form and show filters list
		 */
		onCancelEdit: function() {
			var self = this;
			self._onTabClose();
			self.parentTab.toggleList(true);
		},
		/*
		* Create init data for that will be used to create the filter edit
		* init data JSON structure is {
			"FIELDS": "index among enum, as a string",
			"OPERATORS": "operator value",
			"VALUE": "filter value"
		}

		info parameter JSON structure is {
			filterMapIdx: 'index in filterMap array',
			fieldName: "fieldName",
			operatorLabel: "operator label",
			value: "value to filter by",
			operator: "filter operator"
			id: "field code",
			prop: "field $value object"
		}
		*/
		setInitData: function(info, initIdx) {
			var self = this;

			self.filtersMap = self._getFiltersMap();

			// get idx
			var filterMapIdx = info.filterMapIdx;

			// build init data
			self.initData = {
				$properties: {
					OPERATORS: {
						$value: {
							$enum: _buildOperatorsEnum(self.filtersMap[filterMapIdx].operators)
						},
						$isReadOnly: false
					}
				},
				FIELDS: filterMapIdx + 1,
				OPERATORS: info.operator,
				VALUE: info.value
			};

			self.initIdx = initIdx;
		},
		/*
		 * Cleaning actions
		 */
		_onTabClose: function() {
			var self = this;
			self.controller.destroy();
			self.controller = null;
			self.initData = null;
			self.initIdx = null;
		},
		destroy: function() {
			this.controller = null;
			if (this._gestureMgr) {
				this._gestureMgr.destroy();
			}
			this.$$content = null;
			this.$$scrollWrapper = null;
			this.parentTab = null;
			this.panel = null;
		}
	});

exports.Klass = _Klass;