"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var uiRect = require('syracuse-tablet/html/js/ui/rect');
var scroller = require('syracuse-tablet/html/js/helpers/scroller/scrollerHelpers');

/**
 * Base tab
 */
var _Klass = utils.defineClass(
	function(panel, id, options) {
		this.id = id;
		this.options = options || {};
		this.panel = panel;
		this.$$tab = this.panel.$$panel.find('[href="#' + id + '"]');
		this.$$tab.on('shown.bs.tab', jsutils.bindFn(this._onTabShown, this));
		this.$$content = this.panel.$$panel.find('#' + this.id);
		this.$$content.on("click", '[data-params]', jsutils.bindFn(this.onTabContentClick, this));
		if (this._gestureMgr) {
			this._gestureMgr.destroy();
			this._gestureMgr = null;
		}
		this.buildHtml();
		// Create gesture mgr
		this.$$scrollWrapper = this.$$content.find(".s-m-scroll-wrapper");
		this.$$scrollElmt = this.$$content.find(".s-m-scroll-elmt");
		if (this.$$scrollElmt.length > 0 && this.$$scrollWrapper.length > 0) {
			this._gestureMgr = scroller.newScroller(this.$$scrollElmt, {
				direction: "v",
				valMax: 0,
				isPageScroller: false
			});
		}
	}, null, {
		destroy: function() {
			this.panel = null;
			if (this.$$tab) {
				this.$$tab.unbind();
				this.$$tab.remove();
				this.$$tab = null;
			}
			if (this.$$content) {
				this.$$content.unbind();
				this.$$content.remove();
				this.$$content = null;
			}
			if (this._gestureMgr) {
				this._gestureMgr.destroy();
				this._gestureMgr = null;
			}
			this.$$scrollElmt = null;
			this.$$scrollWrapper = null;
		},
		/**
		 * Hide the tab
		 */
		hide: function() {
			this.$$tab.parent().hide();
			this.$$content.hide();
		},
		setWidth: function(w) {
			this.$$tab.parent().width(w);
		},
		triggerActivate: function() {
			var self = this;
			if (self.$$tab.parent().hasClass("active")) {
				self._onTabShown();
			} else {
				window.setTimeout(function() {
					self.$$tab.tab('show');
				});
			}
		},
		/**
		 * Tab becomes visible - No override - Override doTabShow
		 */
		_onTabShown: function(event) {
			//Calls panel to set active tab
			this.panel.notifyActiveTab(this);
			this.doTabShow();
			this.updateGesture();
		},
		/**
		 * Overridden by child class
		 */
		doTabShow: function() {

		},
		/**
		 * Build HTML
		 */
		buildHtml: function() {

		},
		/**
		 * Click on content
		 */
		onTabContentClick: function(evt) {
			evt.preventDefault();
			evt.stopPropagation();
			this.doContentAction(evt, $(evt.target), $(evt.target).attr("data-params"));
		},
		/**
		 * Called when user clicks on an action in tab content
		 * Action is identified by data-param attribute
		 */
		doContentAction: function(evt, $$target, params) {},
		/**
		 * Called when user clicks on Apply button
		 */
		doActionApply: function() {
			return $.smResolve(true);

		},
		/**
		 * Panel is resized
		 */
		onResize: function(context) {
			if (this._gestureMgr && this.$$content.is(':visible')) {
				this.updateGesture(context);
			}
		},
		/**
		 * Panel is opened
		 */
		notifyOpenPanel: function() {},
		/**
		 * Panel is closed
		 */
		notifyClosePanel: function() {},
		updateGesture: function(context) {
			if (!this._gestureMgr) return;
			// reset old scrolling to calculate width/height (mandatory in native mode)
			this._gestureMgr.reset();
			var viewRect = uiRect.elmtRect(this.$$scrollWrapper).intersectRect(uiRect.elmtRect(this.panel.$$elmt));
			if (viewRect.height < this.$$scrollElmt.height()) {
				this._gestureMgr.init(viewRect);
			}
		}
	});

exports.Klass = _Klass;