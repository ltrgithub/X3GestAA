"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/panels/sortfilter/tabBase').Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var uiRect = require('syracuse-tablet/html/js/ui/rect');
var HammerScroller = require('syracuse-tablet/html/js/helpers/hammerScroller').Klass;
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var daoSdata = require('syracuse-tablet/html/js/application/daoSdata');


var _templates = {
	main: '\
		<div class="s-m-scroll-wrapper">\
			<div id="formtabroot"/>\
		</div>',
	testref: '\
			<div class="s-m-control s-m-field s-m-ref" id="WCUR_REFRef978" data-layout-path="0-6">\
				<div class="s-m-value">\
					<div class="input-group">\
						<input id="XREFPANEL" class="s-m-meta form-control ctrl-evt-blur" type="text" value="">\
						<span class="input-group-btn">\
							<a class="btn btn-default s-m-meta" href="#" data-nav="x3.erp.SUPERV.TABCURM.$lookup" data-sdata-url="/mobile1/x3/erp/SUPERV/TABCUR?representation=TABCURM.$lookup" data-param="" data-parent-id="RIGHTPANEL" data-control-id="XREFPANEL" title="SÃ©lection" draggable="false">\
								<span class="glyphicon glyphicon-eye-open">\
								</span>\
							</a>\
						</span>\
					</div>\
				</div>\
			</div>\
			'
	/** Add this line to add the remove icon
	 * <span class="s-m-order ' + fontUtils.sortIcon("none") + ' " data-params="none"></span>
	 */
};

var protoJson = {
	$url: "{$baseUrl}/TABCUR('{$key}')?representation=TABCURM.$edit",
	$typ: "card",
	$links: {},
	"$properties": {
		"CODE": {
			"$title": "Code",
			"$type": "application/x-integer",
			"$isMandatory": true,
			"$maxLength": 4
		},
		"TEXTE": {
			"$title": "Texte",
			"$type": "application/x-string",
			"$maxLength": 20
		},
		"CUR": {
			"$type": "application/x-string",
			"$maxLength": 3,
			"$isExcluded": true
		},
		"CUR_REF": {
			"$title": "Currency",
			"$type": "application/x-reference",
			"$item": {
				"$url": "{$baseUrl}/TABCUR('{$key}')?representation=TABCURM.$lookup",
				"$value": "{CUR}",
				"$key": "{CUR}",
				"$properties": {
					"CUR": {
						"$type": "application/x-string"
					}
				},
				"CUR": "{CUR}",
				"$links": {
					"$lookup": {
						"$title": "{@6109}",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/TABCUR?representation=TABCURM.$lookup",
						"$method": "GET"
					}
				}
			}
		},
		"TDATE": {
			"$title": "Date",
			"$type": "application/x-date"
		},
		"CPY": {
			"$type": "application/x-string",
			"$maxLength": 5,
			"$isExcluded": true
		},
		"CPY_REF": {
			"$title": "Company",
			"$type": "application/x-reference",
			"$item": {
				"$url": "{$baseUrl}/COMPANY('{$key}')?representation=COMPANYM.$lookup",
				"$value": "{CPY}",
				"$key": "{CPY}",
				"$properties": {
					"CPY": {
						"$type": "application/x-string"
					}
				},
				"CPY": "{CPY}",
				"$links": {
					"$lookup": {
						"$title": "{@6109}",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/COMPANY?representation=COMPANYM.$lookup",
						"$method": "GET"
					}
				}
			}
		},
		"SITE": {
			"$type": "application/x-string",
			"$maxLength": 5,
			"$isExcluded": true
		},
		"SITE_REF": {
			"$title": "Site",
			"$type": "application/x-reference",
			"$isMandatory": true,
			"$item": {
				"$url": "{$baseUrl}/FACILITY('{$key}')?representation=FACILITYM.$lookup",
				"$value": "{FCY}",
				"$key": "{FCY}",
				"$properties": {
					"FCY": {
						"$type": "application/x-string"
					}
				},
				"FCY": "{SITE}",
				"$links": {
					"$lookup": {
						"$title": "{@6109}",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/FACILITY?representation=FACILITYM.$lookup",
						"$method": "GET"
					}
				}
			}
		}
	}
};
var _createCard = function(controller, proto, options) {
	var article = {
		"$layoutType": "stack",
		"$items": []
	};
	Object.keys(protoJson.$properties).forEach(function(key) {
		if (!protoJson.$properties[key].$isExcluded) {
			article.$items.push({
				"$bind": key
			});
		}
	});
	options = options || {};
	options.isArrayChild = false;
	options.isTableCell = false;
	return articleParser.article2Controls(controller, article, proto, options);
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};
/**
 * Sort tab
 */
var _Klass = utils.defineClass(
	function(panel, id, options) {
		Base.call(this, panel, id, options);
		if (this._gestureMgr) {
			this._gestureMgr.destroy();
		}
		this.$$content.append($(_getHtml("main", {})));
		// Create gesture mgr
		this.$$scrollWrapper = this.$$content.find(".s-m-scroll-wrapper");
		this.$$ScrollElmt = this.$$scrollWrapper.children("#formtabroot");
		this.$$ScrollElmt.css({
			height: "auto",
			position: "relative"
		});
		this._gestureMgr = new HammerScroller(this.$$ScrollElmt, {
			direction: "v",
			valMax: 0,
			name: "FORMTAB",
			isPageScroller: false
		});
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this._gestureMgr) {
				this._gestureMgr.destroy();
				this._gestureMgr = null;
			}
		},
		onResize: function() {
			Base.prototype.onResize.call(this);
			if (this.$$content.is(':visible')) {
				this.updateGesture();
			}
		},
		updateGesture: function() {
			if (!this._gestureMgr) return;
			var wrapperRect = uiRect.elmtRect(this.$$scrollWrapper, "outer");
			var panelRect = uiRect.elmtRect(this.panel.$$elmt, "outer");
			var viewRect = wrapperRect.intersectRect(panelRect);
			if (viewRect && !viewRect.contains(wrapperRect)) {
				this._gestureMgr.init(viewRect);
			} else {
				this._gestureMgr.reset();
			}
		},
		/**
		 * Tab becomes Active - we create content
		 */
		onTabShown: function() {
			Base.prototype.onTabShown.call(this);
			if (this.$$ScrollElmt.is(":empty")) {
				var array = this.panel.getParentArray();
				var proto = prototype.create(protoJson, array.prototype.parent);
				var _dao = daoSdata.emptyDao(proto);
				var _ctrl = function() {
					this.id = "RIGHTPANEL";
					this.isVignette = false;
					this.dao = _dao;
					this.controlsMap = {};
					this.addControl = function(c) {
						this.controlsMap[c.id] = c;
					};
					this.isEditMode = function() {
						return true;
					};
					this.getValue = function() {};
					this.getDao = function() {
						return _dao;
					};
				};
				this.controller = new _ctrl();
				var root = _createCard(this.controller, proto);
				var $$elmt = root.buildHtml(this.$$ScrollElmt, this.controller.getDao(), {});
				this.updateGesture();
			}
		},
		/**
		 * Notification of a lookup selection
		 */
		notifLookupSelection: function(controlId, rowData) {
			this.$$content.find('#' + controlId).val(rowData.$value);
		},
		getControl: function(id) {
			return this.controller && this.controller.controlsMap[id];
		}
	});

exports.Klass = _Klass;