"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var formController = require('syracuse-tablet/html/js/helpers/formController');
var Base = require('syracuse-tablet/html/js/controls/page/panels/sortfilter/tabBase').Klass;
var uiRect = require('syracuse-tablet/html/js/ui/rect');
var HammerScroller = require('syracuse-tablet/html/js/helpers/hammerScroller').Klass;
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var daoSdata = require('syracuse-tablet/html/js/application/daoSdata');


var _templates = {
	main: '\
		<section id="formtabroot">\
			<div class="btn-group btn-group-justified btn-group-sm" role="group">\
			  <a type="button" class="btn btn-default" data-params="hide">Hide</a>\
		  	  <a type="button" class="btn btn-default" data-params="enum">Change list</a>\
			  <a type="button" class="btn btn-default" data-params="setvalues">Set values</a>\
		  	  <a type="button" class="btn btn-default" data-params="reset">Reset</a>\
			</div>\
			<div class="s-m-scroll-wrapper">\
				<div id="formtabform"/>\
			</div>\
		</section>'
};

var protoJson = {
	$typ: "card",
	$links: {},
	"$properties": {
		"CODE": {
			"$title": "Code",
			"$type": "application/x-integer",
			"$isMandatory": true,
			"$maxLength": 4
		},
		"CODECHR": {
			"$title": "CodeChr",
			"$type": "application/x-string",
			"$isMandatory": true,
			"$maxLength": 4
		},
		"TEXTE": {
			"$title": "Texte",
			"$type": "application/x-string",
			"$maxLength": 20
		},
		"CUR": {
			"$type": "application/x-string",
			"$maxLength": 3,
			"$isExcluded": true
		},
		"CUR_REF": {
			"$title": "Currency",
			"$type": "application/x-reference",
			"$item": {
				"$url": "{$baseUrl}/TABCUR('{$key}')?representation=TABCURM.$lookup",
				"$value": "{CUR}",
				"$key": "{CUR}",
				"$properties": {
					"CUR": {
						"$type": "application/x-string"
					}
				},
				"CUR": "{CUR}",
				"$links": {
					"$lookup": {
						"$title": "{@6109}",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/TABCUR?representation=TABCURM.$lookup",
						"$method": "GET"
					}
				}
			}
		},
		"TDATE": {
			"$title": "Date",
			"$type": "application/x-date"
		},
		"CPY": {
			"$type": "application/x-string",
			"$maxLength": 5,
			"$isExcluded": true
		},
		"CPY_REF": {
			"$title": "Company",
			"$type": "application/x-reference",
			"$item": {
				"$url": "{$baseUrl}/COMPANY('{$key}')?representation=COMPANYM.$lookup",
				"$value": "{CPY}",
				"$key": "{CPY}",
				"$properties": {
					"CPY": {
						"$type": "application/x-string"
					}
				},
				"CPY": "{CPY}",
				"$links": {
					"$lookup": {
						"$title": "{@6109}",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/COMPANY?representation=COMPANYM.$lookup",
						"$method": "GET"
					}
				}
			}
		},
		"SITE": {
			"$type": "application/x-string",
			"$maxLength": 5,
			"$isExcluded": true
		},
		"SITE_REF": {
			"$title": "Site",
			"$type": "application/x-reference",
			"$isMandatory": true,
			"$item": {
				"$url": "{$baseUrl}/FACILITY('{$key}')?representation=FACILITYM.$lookup",
				"$value": "{FCY}",
				"$key": "{FCY}",
				"$properties": {
					"FCY": {
						"$type": "application/x-string"
					}
				},
				"FCY": "{SITE}",
				"$links": {
					"$lookup": {
						"$title": "{@6109}",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/FACILITY?representation=FACILITYM.$lookup",
						"$method": "GET"
					}
				}
			}
		},
		"FIELDS": {
			"$title": "Fields",
			"$type": "application/x-choice",
			"$capabilities": "sort,filter",
			"$value": {
				"$type": "application/x-integer",
				"$enum": [{
					"$value": 1,
					"$title": "Field 1"
				}, {
					"$value": 2,
					"$title": "Field 2"
				}, {
					"$value": 3,
					"$title": "Change module list"
				}, {
					"$value": 4,
					"$title": "Field 4}"
				}]
			}
		},
		"MODULE": {
			"$title": "Module",
			"$type": "application/x-choice",
			"$capabilities": "sort,filter",
			"$value": {
				"$type": "application/x-integer",
				"$enum": [{
					"$value": 1,
					"$title": "{@mes14_1}"
				}, {
					"$value": 2,
					"$title": "{@mes14_2}"
				}, {
					"$value": 3,
					"$title": "{@mes14_3}"
				}, {
					"$value": 4,
					"$title": "{@mes14_4}"
				}, {
					"$value": 5,
					"$title": "{@mes14_5}"
				}, {
					"$value": 6,
					"$title": "{@mes14_6}"
				}, {
					"$value": 7,
					"$title": "{@mes14_7}"
				}, {
					"$value": 8,
					"$title": "{@mes14_8}"
				}, {
					"$value": 9,
					"$title": "{@mes14_9}"
				}, {
					"$value": 10,
					"$title": "{@mes14_10}"
				}]
			}
		}
	},
	"$localization": {
		"@mes14_1": "Tronc commun",
		"@mes14_2": "Interne superviseur",
		"@mes14_3": "Interface compta",
		"@mes14_4": "Pièces automatiques",
		"@mes14_5": "Requêteur",
		"@mes14_6": "Traductions",
		"@mes14_7": "Pyramides",
		"@mes14_8": "A réutiliser",
		"@mes14_9": "Développement",
		"@mes14_10": "Spécial Produits"
	}
};
var dataJson = {
	"CODE": 122,
	"CODECHR": "XYZ",
	"CPY": "ADX",
	"CPY_REF": {
		"$title": "",
		"$description": "Adonix",
		// To force to read CPY
		"$value": null
	},
	"CUR": "EUR",
	"CUR_REF": {
		"$title": "Euro",
		"$description": "EURO euro",
		"$symbol": "€",
		"$scale": 2,
		"$precision": 11,
		"$value": null
	},
	"SITE": "ASN",
	"SITE_REF": {
		"$title": "",
		"$description": "Asnières",
		"$value": null
	},
	"TDATE": "2015-01-08",
	"TEXTE": "Text de la clé 12484",
	"$properties": {
		"SITE": {
			"$isMandatory": true
		},
		"CUR": {
			"$x3Format": ""
		},
		"CODE": {
			"$isMandatory": true
		}
	},
	"MODULE": 0
};
var _updateEnum = {
	"$enum": [{
		"$value": 1,
		"$title": "New items 1"
	}, {
		"$value": 2,
		"$title": "New items 2"
	}, {
		"$value": 3,
		"$title": "New items 3"
	}, {
		"$value": 4,
		"$title": "New items 4"
	}, {
		"$value": 5,
		"$title": "New items 5"
	}, {
		"$value": 6,
		"$title": "New items 6"
	}]
};
var _setValues = {
	"CODE": 999,
	"CODECHR": "New CHR value",
	"CPY": "BOPP",
	"CPY_REF": {
		"$title": "",
		"$description": "New company",
		// To force to read CPY
		"$value": null
	},
	"CUR": "USD",
	"CUR_REF": {
		"$title": "USD",
		"$description": "US Dollar",
		"$symbol": "$",
		"$scale": 2,
		"$precision": 11,
		"$value": null
	},
	"SITE": "BIS",
	"SITE_REF": {
		"$title": "",
		"$description": "Site bureautique",
		"$value": null
	},
	"TDATE": "2020-12-31",
	"TEXTE": "New text",
	"MODULE": 3
};
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

var FormKlass = utils.defineClass(
	function(proto, dao, gestureMgr) {
		formController.Klass.call(this, "TESTFORMTAB", proto, null, dao, {
			$activity: "edit"
		});
		this.gestureMgr = gestureMgr;
		this.addEventListener("change", this.onEvtChange);
		this.addEventListener("blur", this.onEvtBlur);
	}, formController.Klass, {
		destroy: function() {
			formController.Klass.prototype.destroy.call(this);
			this.gestureMgr = null;
		},
		makeVisible: function(c) {
			if (!c || !this.gestureMgr) return;
			if (c.$$elmt) c = c.$$elmt;
			this.gestureMgr.makeVisible(c);
		},
		/**
		 * 	when	"before" or "after"
		 * 				"before"	call before calling control event
		 * 					return false 	to continue
		 * 					return true 	to stop the process and not call control's listener
		 * 				"after" 	call after calling control event
		 *	crl		control object
		 */
		onEvtChange: function(when, ctrl, $$target, event) {
			if (when === "before" && ctrl.$bind == "FIELDS") {
				var self = this;
				var data = {
					"$properties": {
						"MODULE": {
							"$value": null
						}
					}
				};
				// Change value i value = 3 - before -> we read $$target.val()
				data.$properties.MODULE.$value = $$target.val() === "3" ? _updateEnum : self.prototype.getDataByPath("$properties.MODULE.$value");
				window.setTimeout(function() {
					self.applyChange($.extend(true, {}, data));
				});
			}
			if (when === "after") {
				// We can also change the list value here by reading ctrl.getValue() instead of $$target.val()
			}
		},
		onEvtBlur: function(when, ctrl, $$target, event) {
			if (when === "after" && ctrl.$bind == "CODE") {
				this.applyChange({
					"CODECHR": ctrl.getValue() + " changed"
				});
			}
		}
	});
/**
 * Sort tab
 */
var _Klass = utils.defineClass(
	function(panel, id, options) {
		Base.call(this, panel, id, options);
		this.controller = null;
		if (this._gestureMgr) {
			this._gestureMgr.destroy();
		}
		this.$$content.append($(_getHtml("main", {})));
		// Create gesture mgr
		this.$$scrollWrapper = this.$$content.find(".s-m-scroll-wrapper");
		this.$$ScrollElmt = this.$$scrollWrapper.children("#formtabform");
		this.$$ScrollElmt.css({
			height: "auto",
			position: "relative"
		});
		this._gestureMgr = new HammerScroller(this.$$ScrollElmt, {
			direction: "v",
			valMax: 0,
			name: "FORMTAB",
			isPageScroller: false
		});
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this._gestureMgr) {
				this._gestureMgr.destroy();
				this._gestureMgr = null;
			}
			if (this.controller) {
				this.controller.destroy();
				this.controller = null;
			}
		},
		onResize: function() {
			Base.prototype.onResize.call(this);
			if (this.$$content.is(':visible')) {
				this.updateGesture();
			}
		},
		updateGesture: function() {
			if (!this._gestureMgr) return;
			var wrapperRect = uiRect.elmtRect(this.$$scrollWrapper, "outer");
			var panelRect = uiRect.elmtRect(this.panel.$$elmt, "outer");
			var viewRect = wrapperRect.intersectRect(panelRect);
			if (viewRect && !viewRect.contains(wrapperRect)) {
				this._gestureMgr.init(viewRect);
			} else {
				this._gestureMgr.reset();
			}
		},
		/**
		 * Tab becomes Active - we create content
		 */
		onTabShown: function() {
			Base.prototype.onTabShown.call(this);
			if (this.$$ScrollElmt.is(":empty")) {
				var array = this.panel.getParentArray();
				var proto = formController.createProto(protoJson, null, array.prototype.data("$baseUrl"));
				var dao = new daoSdata.Dao($.extend(true, {}, dataJson), proto);
				this.controller = new FormKlass(proto, dao, this._gestureMgr);
				this.controller.render(this.$$ScrollElmt, {});
				this.updateGesture();
			}
		},
		/**
		 * Save sort info
		 */
		doActionApply: function(evt, $$target, dataParams) {
			if (!this.controller) return;
			if (!this.controller.checkControlsData()) {
				globals.getModal().error("Data are invalid");
			} else {
				globals.getModal().info("Data are valid");
			}
		},
		doContentAction: function(evt, $$target, params) {
			var newParam, newtext;
			try {
				if (params === "hide" || params === "show") {
					newParam = params === "hide" ? "show" : "hide";
					newtext = newParam.smCapitalize();
					var data = {
						"$properties": {
							"CODE": {
								$isHidden: params === "hide"
							},
							"CODECHR": {
								"$isHidden": params === "hide"
							}
						}
					};
					this.controller.applyChange(data);
					return;
				}
				if (params === "enum" || params === "resetenum") {
					newParam = params === "enum" ? "resetenum" : "enum";
					newtext = params === "enum" ? "Reset list" : "Change list";
					var data = {
						"$properties": {
							"MODULE": {
								"$value": null
							}
						},
						"MODULE": params === "enum" ? 5 : 0
					};
					data.$properties.MODULE.$value = params === "enum" ? _updateEnum : this.controller.prototype.getDataByPath("$properties.MODULE.$value");
					this.controller.applyChange($.extend(true, {}, data));
					return;
				}
				if (params === "setvalues" || params === "resetvalues") {
					newParam = params === "setvalues" ? "resetvalues" : "setvalues";
					newtext = params === "setvalues" ? "Reset values" : "Set values";
					var data = params === "setvalues" ? _setValues : $.extend(true, {}, dataJson);
					if (params === "resetvalues") {
						delete data.properties;
					}
					this.controller.applyChange($.extend(true, {}, data));
					return;
				}
				if (params === "reset") {
					this.controller.replaceData($.extend(true, {}, dataJson));
					return;
				}
			} catch (e) {
				globals.getModal().error(e);
			} finally {
				if (newParam) {
					$$target.attr("data-params", newParam);
				}
				if (newtext) {
					$$target.text(newtext);
				}
			}
		}
	});

exports.Klass = _Klass;