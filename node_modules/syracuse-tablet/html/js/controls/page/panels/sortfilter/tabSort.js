"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/panels/sortfilter/tabBase').Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var uiRect = require('syracuse-tablet/html/js/ui/rect');
var HammerScroller = require('syracuse-tablet/html/js/helpers/hammerScroller').Klass;

var _templates = {
	main: '\
		<div id="sorttabroot" class="s-m-scroll-wrapper">\
			<ul class="list-group"/>\
		</div>',
	items: '\
		{{#each items}}\
			<li class="list-group-item" data-params="{{id}}">\
				<span>{{name}}</span>\
				<span class="s-m-order ' + fontUtils.sortIcon("desc") + '  {{#smCompare sort "desc"}}enabled{{/smCompare}}" data-params="desc"></span>\
				<span class="s-m-order ' + fontUtils.sortIcon("asc") + '  {{#smCompare sort "asc"}}enabled{{/smCompare}}" data-params="asc"></span>\
			</li>\
		{{/each}}',
	/** Add this line to add the remove icon
	 * <span class="s-m-order ' + fontUtils.sortIcon("none") + ' " data-params="none"></span>
	 */
};


var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};
/**
 * Sort tab
 */
var _Klass = utils.defineClass(
	function(panel, id, options) {
		Base.call(this, panel, id, options);
		options.hidden = options.hidden === true || this.panel.getParentArray().sortInfoGet(false).length === 0;
		if (this._gestureMgr) {
			this._gestureMgr.destroy();
			this._gestureMgr = null;
		}
		this.$$content.append($(_getHtml("main", {})));
		// Create gesture mgr
		this.$$scrollWrapper = this.$$content.find(".s-m-scroll-wrapper");
		this.$$list = this.$$scrollWrapper.find("ul.list-group");
		this.$$list.css({
			height: "auto",
			position: "relative"
		});
		this._gestureMgr = new HammerScroller(this.$$list, {
			direction: "v",
			valMax: 0,
			name: "SORTTAB",
			isPageScroller: false
		});
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this._gestureMgr) {
				this._gestureMgr.destroy();
				this._gestureMgr = null;
			}
		},
		/**
		 * Save sort info
		 */
		doActionApply: function(evt, $$target) {
			var status = {};
			this.$$content.find(".s-m-order.enabled").each(function(idx, $$e) {
				$$e = $($$e);
				status[$$e.parent().attr("data-params")] = $$e.attr("data-params");
			});
			this.sortInfo.forEach(function(i) {
				i.sort = status[i.id] || "none";
			});
			// Set and refresh - clone to keep a different copy from array one
			this.panel.getParentArray().sortInfoSet($.extend(true, [], this.sortInfo), true);
			return true;
		},
		doContentAction: function(evt, $$target, dataParams) {
			if (dataParams !== "none") {
				// unused because no dataParams="none" icon
				if ($$target.hasClass("enabled")) {
					$$target.removeClass('enabled');
					return;
				}
			}
			(this.options.singleCriteria === true ? this.$$content : $$target.parent()).find(".s-m-order.enabled").removeClass('enabled');
			if (dataParams !== "none") {
				$$target.addClass("enabled");
			}
		},
		onResize: function(context) {
			Base.prototype.onResize.call(this, context);
			if (this.$$content.is(':visible')) {
				this.updateGesture(context);
			}
		},
		updateGesture: function(context) {
			if (!this._gestureMgr) return;
			var wrapperRect = uiRect.elmtRect(this.$$scrollWrapper, "outer");
			var panelRect = uiRect.elmtRect(this.panel.$$elmt, "outer");
			var viewRect = wrapperRect.intersectRect(panelRect);
			if (viewRect && !viewRect.contains(wrapperRect)) {
				this._gestureMgr.init(viewRect);
			} else {
				this._gestureMgr.reset();
			}
		},
		/**
		 * We remove the content on close to cancel modifications
		 */
		notifyClosePanel: function() {
			Base.prototype.notifyClosePanel.call(this);
			if (this.$$items) {
				this.$$items.remove();
				this.$$items = null;
			}
			this.sortInfo = null;
		},
		/**
		 * Tab becomes Active - we create content
		 */
		onTabShown: function() {
			Base.prototype.onTabShown.call(this);
			if (!this.$$items) {
				// We clone to keep a different copy from array one		
				this.sortInfo = $.extend(true, [], this.panel.getParentArray().sortInfoGet());
				this.$$items = $(_getHtml("items", {
					items: this.sortInfo
				}));
				this.$$list.append(this.$$items);
				this.updateGesture();
			}
		}
	});

exports.Klass = _Klass;