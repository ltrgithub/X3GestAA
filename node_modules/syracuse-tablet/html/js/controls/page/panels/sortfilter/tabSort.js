"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/panels/sortfilter/tabBase').Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var uiRect = require('syracuse-tablet/html/js/ui/rect');
var HammerScroller = require('syracuse-tablet/html/js/helpers/hammerScroller').Klass;

var _templates = {
	sort: '\
		<div class="s-m-scroll-wrapper">\
			<ul class="list-group">\
				{{#each items}}\
					<li class="list-group-item" data-params="{{id}}">\
						<span>{{name}}</span>\
						<span class="s-m-order ' + fontUtils.sortIcon("desc") + '  {{#smCompare sort "desc"}}enabled{{/smCompare}}" data-params="desc"></span>\
						<span class="s-m-order ' + fontUtils.sortIcon("asc") + '  {{#smCompare sort "asc"}}enabled{{/smCompare}}" data-params="asc"></span>\
					</li>\
				{{/each}}\
			</ul>\
		</div>',
	/** Add this line to add the remove icon
	 * <span class="s-m-order ' + fontUtils.sortIcon("none") + ' " data-params="none"></span>
	 */
};


var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};
/**
 * Sort tab
 */
var _Klass = utils.defineClass(
	function(panel, id, options) {
		// We clone to keep a different copy from array one
		this.sortInfo = $.extend(true, [], panel.getParentArray().sortInfoGet(true));
		options.hidden = options.hidden === true || this.sortInfo.length === 0;
		Base.call(this, panel, id, options);
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this._gestureMgr) {
				this._gestureMgr.destroy();
				this._gestureMgr = null;
			}
		},
		buildHtml: function() {
			this.$$content.append($(_getHtml("sort", {
				items: this.sortInfo
			})));
			this.updateGesture(true);
		},
		/**
		 * Save sort info
		 */
		apply: function(evt, $$target, dataParams) {
			var status = {};
			this.$$content.find(".s-m-order.enabled").each(function(idx, $$e) {
				$$e = $($$e);
				status[$$e.parent().attr("data-params")] = $$e.attr("data-params");
			});
			this.sortInfo.forEach(function(i) {
				i.sort = status[i.id] || "none";
			});
			// Set and refresh - clone to keep a different copy from array one
			this.panel.getParentArray().sortInfoSet($.extend(true, [], this.sortInfo), true);
			return true;
		},
		doAction: function(evt, $$target, dataParams) {
			if (dataParams !== "none") {
				// unused because no dataParams="none" icon
				if ($$target.hasClass("enabled")) {
					$$target.removeClass('enabled');
					return;
				}
			}
			(this.options.singleCriteria === true ? this.$$content : $$target.parent()).find(".s-m-order.enabled").removeClass('enabled');
			if (dataParams !== "none") {
				$$target.addClass("enabled");
			}
		},
		/**
		 * When the panel is detached/attached to main page
		 */
		notifyToggled: function(side, action, visible) {
			Base.prototype.notifyToggled.call(this, side, action, visible);
			if (this.$$content.is(':visible')) {
				this.updateGesture();
			}
		},
		onResize: function() {
			Base.prototype.onResize.call(this);
			if (this.$$content.is(':visible')) {
				this.updateGesture();
			}
		},
		updateGesture: function(create) {
			if (!this._gestureMgr && create === true) {
				this.$$scrollWrapper = this.$$content.find(".s-m-scroll-wrapper");
				this.$$scrollElmt = this.$$scrollWrapper.find("ul.list-group");
				this.$$scrollElmt.css({
					height: "auto",
					position: "relative"
				});
				this._gestureMgr = new HammerScroller(this.$$scrollElmt, {
					direction: "v",
					valMax: 0,
					name: "SORTTAB",
					isPageScroller: false
				});
			}
			if (!this._gestureMgr) return;
			var wrapperRect = uiRect.elmtRect(this.$$scrollWrapper, "outer");
			var viewRect = wrapperRect.intersectRect(uiRect.elmtRect(this.panel.$$elmt, "outer"));
			if (viewRect && !viewRect.contains(wrapperRect)) {
				this._gestureMgr.init(viewRect);
			} else {
				this._gestureMgr.reset();
			}
		}

	});

exports.Klass = _Klass;