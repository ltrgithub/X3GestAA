"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/panels/sortfilter/tabBase').Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _templates = {
	main: '\
		<div class="s-m-scroll-wrapper">\
			<section id="filterlist">\
				<ul class="list-group"/>\
			</section>\
			<section id="filteredit">\
			</section>\
		</div>',
	items: '\
		{{#each items}}\
			<li class="list-group-item" data-params="{{id}}">\
				<span>{{name}}</span>\
				<span class="s-m-filter ' + fontUtils.filterIcon("edit") + '" data-params="edit"></span>\
				<span class="s-m-filter ' + fontUtils.filterIcon("delete") + '" data-params="delete"></span>\
			</li>\
		{{/each}}',
	edit: '<b style="color:white">Under construction</b>',
};


var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/**
 * Filter tab
 */
var _Klass = utils.defineClass(
	function(panel, id, options) {
		Base.call(this, panel, id, options);
		this.$$content.append($(_getHtml("main", {})));
		this.$$listSection = this.$$content.find("#filterlist");
		this.$$list = this.$$listSection.find(".list-group");
		this.$$editSection = this.$$content.find("#filteredit");
	}, Base, {
		/**
		 * Tab becomes Active - we create content
		 */
		onTabShown: function() {
			Base.prototype.onTabShown.call(this);
			if (!this.$$items) {
				// We clone to keep a different copy from array one		
				this.filterInfo = $.extend(true, [], this.panel.getParentArray().filterInfoGet());
				this.$$items = $(_getHtml("items", {
					items: this.filterInfo
				}));
				this.$$list.append(this.$$items);
			}
		},
		/**
		 * We remove the content on close to cancel modifications
		 */
		notifyClosePanel: function() {
			Base.prototype.notifyClosePanel.call(this);
			if (this.$$items) {
				this.$$items.remove();
				this.$$items = null;
			}
			this.filterInfo = null;
		},
		/**
		 * Save sort info
		 */
		doActionApply: function(evt, $$target, dataParams) {
			//this.panel.getParentArray().filterInfoSet(this.filterInfo, true);
			return true;
		},
		/**
		 * Click on an element with data-param - edit delete...
		 */
		doContentAction: function(evt, $$target, dataParams) {
			alert(dataParams);
		}
	});

exports.Klass = _Klass;