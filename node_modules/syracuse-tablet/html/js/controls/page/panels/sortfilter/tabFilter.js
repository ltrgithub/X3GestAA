"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/panels/sortfilter/tabBase').Klass;
var FilterEdit = require('syracuse-tablet/html/js/controls/page/panels/sortfilter/tabFilterEdit').Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _templates = {
	main: '\
		<div class="s-m-scroll-wrapper">\
			<section id="filterlist">\
				<div id="filterListEmpty" style="display:none">{{emptyList}}</div>\
				<ul class="list-group"/>\
				<div class="btn-group btn-group-justified" role="group">\
					<a type="button" class="btn btn-default" data-params="addFilter">\
						<i class="fa fa-plus" data-params="addFilter"></i>\
						<span data-params="addFilter">{{addFilter}}</span>\
					</a>\
				</div>\
			</section>\
			<section id="filteredit">\
			</section>\
		</div>',
	items: '\
		{{#each items}}\
			<li class="list-group-item" data-params="{{id}}">\
				<span class="s-m-filter-info">\
					<span class="s-m-filter-field">{{fieldName}}</span>\
					<span class="s-m-filter-operator">{{operatorLabel}}</span>\
					<span class="s-m-filter-value">{{value}}</span>\
				</span>\
				<span class="s-m-filter ' + fontUtils.filterIcon("edit") + '" data-params="edit"></span>\
				<span class="s-m-filter ' + fontUtils.filterIcon("delete") + '" data-params="delete"></span>\
			</li>\
		{{/each}}'
};


var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/**
 * Filter tab
 */
var _Klass = utils.defineClass(

	function(panel, id, options) {
		Base.call(this, panel, id, options);
		this.$$content.append($(_getHtml("main", {
			addFilter: locale.text("panels.array.addFilter"),
			emptyList: locale.text("panels.array.emptyList")
		})));
		this.$$listSection = this.$$content.find("#filterlist");
		this.$$list = this.$$listSection.find(".list-group");
		this.$$editSection = this.$$content.find("#filteredit");
		this.$$emptyList = this.$$content.find("#filterListEmpty");
	}, Base, {
		/**
		 * Tab becomes Active - we create content
		 */
		onTabShown: function() {
			var self = this;
			Base.prototype.onTabShown.call(this);
			if (!self.initOpened) {
				this.updateFilterList();
				self.initOpened = true;
			}

		},
		/**
		 * Update filter list . If no filter set, display no filter information
		 **/
		updateFilterList: function() {
			var self = this;

			self.$$emptyList.toggle(false);

			// clean current list
			self.$$list.empty();

			// We clone to keep a different copy from array one
			self.filterInfo = self.filterInfo || $.extend(true, [], self.panel.getParentArray().filterInfoGet());

			if (self.filterInfo && self.filterInfo.length > 0) {
				// clean
				self.$$list.empty();

				// append list
				var $$items = $(_getHtml("items", {
					items: self.filterInfo
				}));
				self.$$list.append($$items);
			} else {
				// no filter set
				self.$$emptyList.toggle(true);
			}
		},
		/**
		 * We remove the content on close to cancel modifications
		 */
		notifyClosePanel: function() {
			var self = this;
			Base.prototype.notifyClosePanel.call(self);
			/*if (self.$$items) {
			self.$$items.remove();
			self.$$items = null;
		}
		self.filterInfo = null;*/
		},
		/**
		 * Save sort info
		 */
		doActionApply: function(evt, $$target, dataParams) {
			this.panel.getParentArray().filterInfoSet($.extend(true, [], this.filterInfo), true);
			return true;
		},
		/**
		 * Click on an element with data-param - edit delete...
		 */
		doContentAction: function(evt, $$target, dataParams) {
			var self = this;
			switch (dataParams) {
				case "addFilter":
					self._openFilterEdit();
					break;
				case "cancelFilterEdit":
					self.filterEdit.onCancelEdit();
					break;
				case "submitFilterEdit":
					self.filterEdit.onFilterEditSubmit();
					break;
				case "delete":
					var idx = $$target.closest("li").index();
					self._onFilterDelete(idx);
					break;
				case "edit":
					var idx = $$target.closest("li").index();
					self._openFilterEdit(idx);
					break;
				default:
					alert(dataParams);
			}
		},
		/*
		 *	When user deletes one filter in filter list
		 */
		_onFilterDelete: function(idx) {
			var self = this;
			if (self._isIndexValid(idx)) {
				self._removeFilter(idx);
				self.updateFilterList();
			}
		},
		/*
		* Adds new filter info
		* {
			fieldName: "field name",
			operator: "selected operator label",
			value: "filtering value"
		}
		*/
		_addFilter: function(newFilterInfo) {
			var self = this;
			self.filterInfo.push(newFilterInfo);
		},
		/*
		 * Remove filter
		 */
		_removeFilter: function(idx) {
			var self = this;
			if (self._isIndexValid(idx)) {
				self.filterInfo.splice(idx, 1);
			}
		},
		/*
		 * Update filter
		 */
		_updateFilter: function(idx, updateFilterInfo) {
			var self = this;
			if (self._isIndexValid(idx)) {
				self.filterInfo.splice(idx, 1, updateFilterInfo);
			}
		},
		/*
		 * If user cancels filter edit, hide form and show filters list
		 */
		_onCancelEdit: function() {
			var self = this;
			self.$$editSection.empty();
			self.$$listSection.toggle(true);
		},
		/*Build filter set/add form */
		_openFilterEdit: function(filterIdx) {
			var self = this;

			// get filter edit object
			self.filterEdit = self.filterEdit || new FilterEdit(self);

			// set init data
			if (self._isIndexValid(filterIdx)) {
				self.filterEdit.setInitData(self.filterInfo[filterIdx], filterIdx);
			}

			// create filter edit content
			self.filterEdit.create(self.$$editSection);

			// hide filter list
			self.toggleList(false);

		},
		_isIndexValid: function(idx) {
			return !isNaN(parseInt(idx, 10)) && idx >= 0;
		},
		onFilterUpdate: function(filterInfo, filterIdx) {
			var self = this;

			if (self._isIndexValid(filterIdx)) {
				self._updateFilter(filterIdx, filterInfo);
			} else {
				self._addFilter(filterInfo);
			}

			// update list
			self.updateFilterList();

			// show list
			self.toggleList(true);
		},
		toggleList: function(show) {
			var self = this;
			self.$$listSection.toggle(show);
			if (self.filterEdit) {
				self.filterEdit.$$content.toggle(!show);
			}
		},
		destroy: function() {
			var self = this;
			if (self.filterEdit) {
				self.filterEdit.destroy();
				self.filterEdit = null;
			}
			self.filterInfo = null;
			Base.prototype.destroy.call(self);
		}
	});

exports.Klass = _Klass;