"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/panels/sortfilter/tabBase').Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _templates = {
	main: '\
		<div class="s-m-scroll-wrapper">\
			<section id="filterlist">\
				<div id="filterListEmpty" style="display:none">{{emptyList}}</div>\
				<ul class="list-group"/>\
				<div class="btn-group btn-group-justified" role="group">\
					<a type="button" class="btn btn-default" data-params="addFilter">\
						<i class="fa fa-plus" data-params="addFilter"></i>\
						<span data-params="addFilter">{{addFilter}}</span>\
					</a>\
				</div>\
			</section>\
			<section id="filteredit">\
			</section>\
		</div>',
	items: '\
		{{#each items}}\
			<li class="list-group-item" data-params="{{id}}">\
				<span class="s-m-filter-info">\
					<span class="s-m-filter-field">{{fieldName}}</span>\
					<span class="s-m-filter-operator">{{operator}}</span>\
					<span class="s-m-filter-value">{{value}}</span>\
				</span>\
				<span class="s-m-filter ' + fontUtils.filterIcon("edit") + '" data-params="edit"></span>\
				<span class="s-m-filter ' + fontUtils.filterIcon("delete") + '" data-params="delete"></span>\
			</li>\
		{{/each}}',
	edit: '\
		<div id="{{filterId}}">\
			{{#each ctrls}}\
				<div class="s-m-control s-m-field" id="">\
					<div class="s-m-title">{{ctrlTitle}}</div>\
					<div class="s-m-value edit">\
						{{{ctrlValue}}}\
					</div>\
				</div>\
			{{/each}}\
			<div class="btn-group btn-group-justified" role="group">\
				<a type="button" class="btn btn-default" data-params="cancelFilterEdit">\
					<i class="fa fa-times" data-params="cancelFilterEdit"></i>\
				</a>\
				<a type="button" class="btn btn-default" data-params="submitFilterEdit">\
					<i class="fa fa-check" data-params="submitFilterEdit"></i>\
				</a>\
			</div>\
		</div>',
	select: '\
		<select class="form-control ctrl-evt-change s-m-meta {{type}}" data-control-id="{{panelId}}">\
			{{#each options}}\
				<option value="{{value}}" {{#if selected}}selected="true"{{/if}}>{{optionLabel}}</option>\
			{{/each}}\
		</select>',
	input: '\
		<input class="s-m-meta form-control" type="text" value="{{#if filterValue}}{{filterValue}}{{/if}}">',
	editt: '<b style="color:white">Under construction</b>',
};


var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/**
 * Filter tab
 */
var _Klass = utils.defineClass(
	function(panel, id, options) {
		Base.call(this, panel, id, options);
		this.$$content.append($(_getHtml("main", {
			addFilter: locale.text("panels.array.addFilter"),
			emptyList: locale.text("panels.array.emptyList")
		})));
		this.$$listSection = this.$$content.find("#filterlist");
		this.$$list = this.$$listSection.find(".list-group");
		this.$$editSection = this.$$content.find("#filteredit");
		this.$$emptyList = this.$$content.find("#filterListEmpty");
	}, Base, {
		/**
		 * Tab becomes Active - we create content
		 */
		onTabShown: function() {
			Base.prototype.onTabShown.call(this);
			this.updateFilterList();
		},
		/**
		 * Update filter list . If no filter set, display no filter information
		 **/
		updateFilterList: function() {
			this.$$emptyList.toggle(false);

			// We clone to keep a different copy from array one
			this.filterInfo = this.filterInfo || $.extend(true, [], this.panel.getParentArray().filterInfoGet());

			if (this.filterInfo && this.filterInfo.length > 0) {

				// clean
				this.$$list.empty();

				// append list
				var $$items = $(_getHtml("items", {
					items: this.filterInfo
				}));
				this.$$list.append($$items);
			} else {
				// no filter set
				this.$$emptyList.toggle(true);
			}

			// no filter added to the list
			/*if (this.$$list.children().length == 0) {
				this.$$emptyList.toggle(true);
			}*/
		},
		/**
		 * We remove the content on close to cancel modifications
		 */
		notifyClosePanel: function() {
			Base.prototype.notifyClosePanel.call(this);
			if (this.$$items) {
				this.$$items.remove();
				this.$$items = null;
			}
			this.filterInfo = null;
		},
		/**
		 * Save sort info
		 */
		doActionApply: function(evt, $$target, dataParams) {
			this.panel.getParentArray().filterInfoSet($.extend(true, [], this.filterInfo), true);
			return true;
		},
		/**
		 * Click on an element with data-param - edit delete...
		 */
		doContentAction: function(evt, $$target, dataParams) {

			var self = this;
			switch (dataParams) {
				case "addFilter":
					self._openFilterEdit();
					break;
				case "cancelFilterEdit":
					self._onCancelEdit();
					break;
				case "submitFilterEdit":
					self._onFilterEditSubmit();
					break;
				default:
					alert(dataParams);
			}
		},
		/*
		 * If user submits filter edit, hide form and show filters list
		 */
		_onFilterEditSubmit: function() {
			var self = this;

			// check if value is filled
			var $$input = self.$$editSection.find("input");
			var value = $$input.val();
			if (!value || value === '') {
				$$input.toggleClass("error", true);
				return;
			} else {
				$$input.toggleClass("error", false);

				var fieldName = self.filtersMap[self.$$editSection.find(".form-control.ctrl-evt-change.s-m-meta.field").val()].fieldName;
				var operator = self.$$editSection.find(".form-control.ctrl-evt-change.s-m-meta.operator").val();

				self._addFilter({
					fieldName: fieldName,
					operator: locale.text("panels.array.op." + operator),
					value: value
				});

				self.updateFilterList();
				self._onCancelEdit();
			}

		},
		/*
		* Adds new filter info
		* {
			fieldName: "field name",
			operator: "selected operator label",
			value: "filtering value"
		}
		*/
		_addFilter: function(newFilterInfo) {
			var self = this;
			self.filterInfo.push(newFilterInfo);
		},
		/*
		 * If user cancels filter edit, hide form and show filters list
		 */
		_onCancelEdit: function() {
			var self = this;
			self.$$editSection.empty();
			self.$$listSection.toggle(true);
		},
		/*Build filter set/add form */
		_openFilterEdit: function() {
			var self = this;

			console.log("tabFilter Id : " + self.id);

			// build filter edit view

			// clean
			this.$$editSection.empty();

			// build filters map if it's not set yet
			self.filtersMap = self.filtersMap || self.panel.getParentArray().filterMapGet();

			// build ctrls array (3 fields)
			var ctrls = [];

			// build fields select 
			var options = [];
			// "select field" is first select option
			options.push({
				value: 0,
				optionLabel: locale.text("panels.array.filterForm.fieldDefault")
			});
			$.each(self.filtersMap, function(idx, val) {
				options.push({
					value: idx + 1,
					optionLabel: val.fieldName
				});
			});
			var fieldsSelect = _getHtml("select", {
				options: options,
				panelId: self.id,
				type: "field"
			});

			// build operators default select
			var operators = self.panel.getParentArray().getOperators();
			var defaultOpSelect = self._buildOperatorsCtrl(operators);

			// field ctrl
			ctrls.push({
				ctrlTitle: locale.text("panels.array.filterForm.field"),
				ctrlValue: fieldsSelect
			});

			// operator ctrl
			ctrls.push({
				ctrlTitle: locale.text("panels.array.filterForm.operator"),
				ctrlValue: defaultOpSelect
			});

			// value ctrl
			ctrls.push({
				ctrlTitle: locale.text("panels.array.filterForm.value"),
				ctrlValue: _getHtml("input", {
					options: options
				})
			});


			// hide filter list view
			self.$$listSection.toggle(false);


			// show filter edit view
			this.$$editSection.append(_getHtml("edit", {
				ctrls: ctrls
			}));
		},
		onChange: function(evt) {
			var self = this;

			// if field selector changed, update  perators selection ctrl
			if ($(evt.target).hasClass("field")) {

				// nothing to do. user selected "select field" option
				if (evt.target.value == 0) {
					return;
				} else {
					// update operator select 
					var $$newCtrl = $(self._buildOperatorsCtrl(self.filtersMap[evt.target.value - 1].operators));
					var $$ctrlToRemove = self.$$editSection.find(".form-control.ctrl-evt-change.s-m-meta.operator");
					var $$parent = $$ctrlToRemove.parent();
					$$parent.empty();
					$$parent.append($$newCtrl);
				}
			}

			// operator selector
			// handle specific operators such as "between", "empty", "not empty"
			else {
				//TODO
			}
		},
		_buildOperatorsCtrl: function(operators) {
			var self = this;
			var options = [];
			$.each(operators, function(idx, val) {
				options.push({
					value: val,
					selected: idx == 0 ? true : false,
					optionLabel: locale.text("panels.array.op." + val)
				});
			});
			return _getHtml("select", {
				options: options,
				panelId: self.id,
				type: "operator"
			});
		}
	});

exports.Klass = _Klass;