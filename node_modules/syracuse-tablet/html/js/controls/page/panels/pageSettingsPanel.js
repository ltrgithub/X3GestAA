"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/panels/dialogPanel').Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var selectorFactory = require('syracuse-tablet/html/js/ui/datetimeSelectors/selectorFactory');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var _templates = {
	main: '\
			<nav class="navbar s-m-side-panel {{side}} navbar-inverse ctrl-evt-click" role="navigation">\
				<div class="s-m-scroll-elmt">\
				{{#if pinPage}}\
					<div class="modal-subtitle">{{pinPage.title}}</div> \
					<div class=""> \
						<div class="form-group"> \
							<table class="s-m-pinandlivetile">\
							{{#each pinPage.items}}\
							{{#if this.active}}\
							<tr><td>{{this.title}}</td>\
							<td><input id="{{this.id}}" type="checkbox" data-value="{{this.value}}"></td><tr>\
							{{/if}}\
							{{/each}}\
							</tr> \
							</table> \
						</div> \
					</div>\
				{{/if}}\
				{{#if scheduleMessage}}\
					<div class="modal-subtitle">{{scheduleMessage.title}}</div> \
					<div class=""> \
						<div class="form-group"> \
							<table class="s-m-schedulemsg">\
							{{#each scheduleMessage.items}}\
							<tr>\
							<td>{{this.label}}</td>\
							<td>\
							{{#if this.picker }}\
								<div  class="input-group">\
									<input type="text" readonly="true" class="form-control" size="{{this.size}}" id="{{this.id}}" value="">\
									<span class="input-group-btn">\
										<button data-control-id="{{../../ctrlId}}" data-action="{{this.dataAction}}" data-params="{{this.id}} "class="btn btn-default">\
										<span class="{{this.icon}}"></span>\
									<\span>\
								<\div>\
							{{else}}\
								<input type="text"  class="form-control" size="{{this.size}}" id="{{this.id}}" value="">\
							{{/if}}\
							</td>\
							</tr>\
							{{/each}}\
							</table> \
							<div class="btn-group btn-group-justified" role="group">\
								<a type="button" class="btn btn-default" data-action="reminderCreate" data-control-id="{{ctrlId}}">{{scheduleMessage.btnApply}}</a>\
							</div>\
						</div> \
					</div>\
				{{/if}}\
				{{#if share}}\
					<div class="modal-subtitle" >{{share.title}}</div> \
					<a href="#" class="s-m-link" data-action="{{share.action}}">\
						<i class="{{share.icon}}"/>\
					<span>{{{share.label}}}</span>\
				</a>\
				{{/if}}\
				<\div>\
			</nav>',
};
var _pinItems = [{
	active: false,
	id: "pinWelcome",
	value: false
}, {
	active: false,
	id: "liveTile",
	value: false
}];
var _scheduleMsgItems = [{
	id: "date",
	size: 10,
	type: "application/x-date",
	icon: fontUtils.dateFieldIcon("application/x-date").join(" "),
	picker: true,
	dataAction: "datePicker"
}, {
	id: "time",
	size: 10,
	type: "application/x-time",
	icon: fontUtils.dateFieldIcon("application/x-time").join(" "),
	picker: true,
	dataAction: "timePicker"
}, {
	id: "description",
	size: 50,
	type: "application/x-string"
}];
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	if (!tmpl) alert("template " + name + " not found");
	return tmpl(ctx);
};

var _Klass = utils.defineClass(

	function(controller, $type, panelId, options) {
		Base.call(this, controller, $type, panelId, options);
	}, Base, {
		buildHtml: function(side) {
			var self = this;
			var ctx = this._getContext();
			this.pageTitle = ctx.title;
			Base.prototype.buildHtml.call(this, side, ctx.title);
			if (this.$$panel) {
				this.$$panel.remove();
			}
			this.$$panel = this.buildPanel(ctx);
			if (this.$$panel && this.$$panel.length) {
				this.$$elmt.append(this.$$panel);
				_pinItems.forEach(function(item) {
					if (item.active) {
						var $$item = self.$$elmt.find("#" + item.id);
						$$item.bootstrapSwitch("onText", locale.text(item.id + ".page.label.onText"));
						$$item.bootstrapSwitch("offText", locale.text(item.id + ".page.label.offText"));
						$$item.bootstrapSwitch("size", "small");
						$$item.bootstrapSwitch("onColor", "default");
						$$item.bootstrapSwitch("offColor", "default");
						$$item.bootstrapSwitch('onSwitchChange', jsutils.bindFn(self.onSwitchChange, self, item.id));
					}
				});
			}
		},
		/**
		 * Override this method to build child class
		 */
		buildPanel: function(context) {
			return $(_getHtml("main", context));
		},
		hasLinks: function() {
			return true;
		},
		_getContext: function() {
			var page = globals.getApplication().currentPage;
			var context = page.pageSettings;
			//unactivate sahe and pinWelcome in panel (for moment ...)
			context.opt.share = false;
			context.opt.pinWelcome = false;
			var ctx = {
				ctrlId: this.id,
				side: this.side
			};
			ctx.title = context.ctx.pageTitle || "";
			if (context.opt.liveTile || context.opt.pinWelcome) {
				_pinItems.forEach(function(item) {
					item.active = context.opt[item.id];
					item.value = false;
					item.title = locale.text(item.id + ".page.add");
				});
				ctx.pinPage = {
					title: locale.text("pin.page.subtitle"),
					items: _pinItems
				};
			};
			if (context.opt.scheduleMessage) {
				_scheduleMsgItems.forEach(function(item) {
					item.label = locale.text("schedule.message." + item.id + ".label");
				});
				ctx.scheduleMessage = {
					title: locale.text("schedule.message.page.subtitle"),
					btnApply: locale.text("schedule.message.apply.label"),
					items: _scheduleMsgItems
				};
			};
			if (context.opt.share) {
				ctx.share = {
					title: locale.text("share.page.subtitle"),
					action: "nativeShare",
					icon: fontUtils.pageIcon("nativeShare"),
					label: locale.text("action.nativeShare")
				};
			};
			return ctx;
		},
		_setData: function() {
			var page = globals.getApplication().currentPage,
				self = this;
			var context = page.pageSettings;
			if (context.opt.liveTile || context.opt.pinWelcome) {
				_pinItems.forEach(function(item) {
					if (item.active) {
						item.value = context.ctx[item.id] || false;
						var $$item = self.$$elmt.find("#" + item.id);
						$$item.bootstrapSwitch('state', context.ctx[item.id] || false);
					}
				});
			};
			if (context.opt.scheduleMessage) {
				_scheduleMsgItems.forEach(function(item) {
					var $$item = self.$$elmt.find("#" + item.id);
					$$item.val("");
				});
			}
		},
		notifyToggled: function(side, action, visible) {
			Base.prototype.notifyToggled.call(this, side, action, visible);
			if (visible) this._setData();
		},
		_actDatePicker: function(id) {
			selectorFactory.createSelector(new _DateTime("application/x-date", this.$$panel.find("#" + id)));
		},
		_actTimePicker: function(id) {
			selectorFactory.createSelector(new _DateTime("application/x-time", this.$$panel.find("#" + id)));
		},
		onSwitchChange: function(event, value, id) {
			var content = {};
			content[id] = value;
			notifications.publish("sm.page.settings.changed", content);
		},
		_actReminderCreate: function() {
			var schedule = {}, self = this,
				content = null;
			_scheduleMsgItems.forEach(function(item) {
				var val = self.$$panel.find("#" + item.id).val();
				if (val) {
					schedule[item.id] = schedule[item.id] || {};
					schedule[item.id].$type = item.$type;
					schedule[item.id].value = val;
				}
			});
			if (schedule.date && schedule.time) {
				content = {};
				content.schedule = {
					Severity: "reminder"
				};
				content.schedule.Text1 = self.pageTitle;
				content.schedule.Text2 = schedule["description"] ? schedule["description"].value : "";
				content.schedule.ScheduleTime = schedule["date"].value + " " + schedule["time"].value;
			}
			if (content) {
				notifications.publish("sm.page.settings.changed", content);
				_scheduleMsgItems.forEach(function(item) {
					self.$$panel.find("#" + item.id).val("");
				});
			}
		}
	});

var _DateTime = utils.defineClass(
	function(type, item) {
		this.$type = type;
		this.$$item = item;
	}, null, {
		setFieldValueFromSelector: function(value) {
			this.$$item.val(value);
		},
		getValue: function() {
			this.$$item.val();
		},
		getTitle: function() {
			return "";
		}
	});
exports.Klass = _Klass;