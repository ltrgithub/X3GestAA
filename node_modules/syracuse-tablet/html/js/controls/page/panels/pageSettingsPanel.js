"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/panels/dialogPanel').Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var selectorFactory = require('syracuse-tablet/html/js/ui/selectorFactory');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var authPropsGeneral = require('syracuse-tablet/html/js/authoring/authoringPropertiesGeneral');
var authComponents = require('syracuse-tablet/html/js/authoring/authoringComponents');

var locale = require('syracuse-tablet/html/js/helpers/locale');
var _templates = {
	main: '\
			<nav class="navbar s-m-side-panel {{side}} navbar-inverse" role="navigation">\
				<div class="s-m-scroll-elmt">\
				{{#if liveTile}}\
					<div class="modal-subtitle">{{liveTile.title}}</div> \
					<div class=""> \
						<div class="form-group"> \
							<table class="s-m-livetile">\
							{{#each liveTile.items}}\
							{{# unless this.disabled}}\
							<tr>\
							<td>{{this.label}}</td>\
							<td>\
							{{#if this.picker }}\
								<div  class="input-group" id="{{this.id}}" style="width:100%">\
								<\div>\
							{{else}}\
								<input type="text"  class="form-control" size="{{this.size}}" id="{{this.id}}" value="{{defaultValue}}">\
							{{/if}}\
							</td>\
							</tr> \
							{{/unless}}\
							{{/each}}\
							</table> \
							<div class="btn-group btn-group-justified" role="group">\
								<a type="button" class="btn btn-default" data-action="liveTileCreate" data-control-id="{{ctrlId}}">{{liveTile.btnApply}}</a>\
							</div>\
						</div> \
					</div>\
				{{/if}}\
				{{#if vignette.liveTile}}\
					<div class="modal-subtitle">{{vignette.liveTile.title}}</div> \
					<div class=""> \
						<div class="form-group"> \
							<table class="s-m-livetile">\
							{{#each vignette.liveTile.items}}\
							{{# unless this.disabled}}\
							<tr>\
							{{#if this.picker }}\
								<td>{{this.label}}</td>\
								<td>\
								<div  class="input-group" id="{{this.id}}" style="width:100%">\
								<\div>\
								</td>\
							{{else}}\
								{{#if this.select}}\
									{{#if ../../../../singleVignette}}\
										<input type="hidden" id="{{this.id}}" value="{{../../../../../singleVignette}}">\
									{{else}}\
									<td>{{this.label}}</td>\
									<td>\
									<select class="form-control"  id="{{this.id}}" data-action="{{this.dataAction}}" data-control-id="{{../../../../../ctrlId}}">\
										<option value="">{{this.emptyOptionLabel}}</option>\
									{{#each ../../../../../vignette.items}}\
										<option value="{{this.id}}">{{this.title}}</option>\
									{{/each}}\
									</select>\
									</td>\
									{{/if}}\
								{{else}}\
									<td>{{this.label}}</td>\
									<td>\
									<input type="text"  class="form-control" size="{{this.size}}" id="{{this.id}}" value="">\
									</td>\
								{{/if}}\
							{{/if}}\
							</tr> \
							{{/unless}}\
							{{/each}}\
							</table> \
							<div class="btn-group btn-group-justified" role="group">\
								<a type="button" class="btn btn-default" data-action="liveTileCreate" data-control-id="{{ctrlId}}">{{vignette.liveTile.btnApply}}</a>\
							</div>\
						</div> \
					</div>\
				{{/if}}\
				{{#if scheduleMessage}}\
					<div class="modal-subtitle">{{scheduleMessage.title}}</div> \
					<div class=""> \
						<div class="form-group"> \
							<table class="s-m-schedulemsg">\
							{{#each scheduleMessage.items}}\
							<tr>\
							<td>{{this.label}}</td>\
							<td>\
							{{#if this.picker }}\
								<div  class="input-group">\
									<input type="text" readonly="true" class="form-control" size="{{this.size}}" id="{{this.id}}" value="">\
									<span class="input-group-btn">\
										<button data-control-id="{{../../ctrlId}}" data-action="{{this.dataAction}}" data-params="{{this.id}} "class="btn btn-default">\
										<span class="{{this.icon}}"></span>\
									<\span>\
								<\div>\
							{{else}}\
								<input type="text"  class="form-control" size="{{this.size}}" id="{{this.id}}" value="">\
							{{/if}}\
							</td>\
							</tr>\
							{{/each}}\
							</table> \
							<div class="btn-group btn-group-justified" role="group">\
								<a type="button" class="btn btn-default" data-action="reminderCreate" data-control-id="{{ctrlId}}">{{scheduleMessage.btnApply}}</a>\
							</div>\
						</div> \
					</div>\
				{{/if}}\
				{{#if share}}\
					<div class="modal-subtitle" >{{share.title}}</div> \
					<div class="btn-group btn-group-justified" role="group">\
						<a type="button" href="#" class="btn btn-default" data-control-id="{{ctrlId}}" data-action="sharePageLink">\
							<i class="{{share.icon}}"/>\
						<span>{{{share.label}}}</span>\
						</a>\
					</div> \
				{{/if}}\
				<\div>\
			</nav>',
};
var _liveTile = [{
	disabled: true,
	id: "vignette",
	select: true,
	dataAction: "choice"
}, {
	disabled: false,
	id: "backgroundColor",
	size: 10,
	picker: true,
	component: "colorPalettePicker"
}, {
	disabled: false,
	id: "description",
	size: 50,
	type: "application/x-string",
	defaultValue: ""
}];
var _scheduleMsgItems = [{
	id: "date",
	size: 10,
	type: "application/x-date",
	icon: fontUtils.dateFieldIcon("application/x-date").join(" "),
	picker: true,
	dataAction: "datePicker"
}, {
	id: "time",
	size: 10,
	type: "application/x-time",
	icon: fontUtils.dateFieldIcon("application/x-time").join(" "),
	picker: true,
	dataAction: "timePicker"
}, {
	id: "description",
	size: 50,
	type: "application/x-string"
}];
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	if (!tmpl) alert("template " + name + " not found");
	return tmpl(ctx);
};

var _Klass = utils.defineClass(

	function(controller, $type, panelId, options) {
		Base.call(this, controller, $type, panelId, options);
	}, Base, {
		buildHtml: function(side) {
			var self = this;
			var page = globals.getApplication().currentPage;
			this._context = this._getContext(page.getPageSettingsContext());
			Base.prototype.buildHtml.call(this, side, this._context.title);
			if (this.$$panel) {
				this.$$panel.remove();
			}
			this.$$panel = this.buildPanel(this._context);
			if (this.$$panel && this.$$panel.length) {
				this.$$elmt.append(this.$$panel);
				var component;
				_liveTile.forEach(function(item) {
					if (item.component) {
						var $$item = self.$$elmt.find(".s-m-livetile #" + item.id);
						var opts = {};
						switch (item.component) {
							case "colorPalettePicker":
								opts = {
									id: item.id,
									palette: authPropsGeneral.getColorPalette(),
									dropUp: false,
									onSelectColor: jsutils.bindFn(self._colorChange, self, item.id)
								};
								break;
							case "select":
								opts = {
									id: item.id,
									dropUp: false,
									onChange: jsutils.bindFn(null, self, item.id)
								};
								break;
						}
						component = authComponents.newComponent(item.component, opts);
						component.createMarkup($$item);

					};
				});
			}
		},
		_colorChange: function(value, id) {
			/*
			 * bgColor: "rgb(0, 159, 218)"
				color: "rgb(255, 255, 255)"
				css: "s-m-color-blue"
				id: "blue"
				name: "Blue"
			 */
			var toHex = function(n) {
				n = parseInt(n, 10);
				return ("00" + n.toString(16)).slice(-2);
			};
			var getHexColor = function(color) {
				var value = "#";
				if (/^rgb\(.*\)$/.test(color)) {
					color.match(/([0-9]+)/g).forEach(function(val) {
						value += toHex(val);
					});
					return value;
				}
				return null;
			};
			this.liveTile[id] = value ? getHexColor(value.bgColor) : null;
		},
		/**
		 * Override this method to build child class
		 */
		buildPanel: function(context) {
			return $(_getHtml("main", context));
		},
		hasLinks: function() {
			return true;
		},
		_getContext: function(pageContext) {
			var ctx = {
				ctrlId: this.id,
				side: this.side
			};
			var buildCtxLiveTile = function(ctx) {
				var ctx;
				_liveTile.forEach(function(item) {
					item.label = locale.text("liveTile." + item.id + ".label");
					if (item.select) item.emptyOptionLabel = locale.text("liveTile." + item.id + ".label.emptychoice");
					if (item.defaultValue !== undefined) {
						item.defaultValue = ctx.title;
					}
				});
				ctx = {
					title: locale.text("liveTile.page.subtitle"),
					btnApply: locale.text("liveTile.apply.label"),
					items: _liveTile
				};
				return ctx;
			};
			var buildCtxScheduleMessage = function() {
				var ctx;
				_scheduleMsgItems.forEach(function(item) {
					item.label = locale.text("schedule.message." + item.id + ".label");
				});
				ctx = {
					title: locale.text("schedule.message.page.subtitle"),
					btnApply: locale.text("schedule.message.apply.label"),
					items: _scheduleMsgItems
				};
				return ctx;
			};
			var builCtxShare = function() {
				var ctx;
				ctx = {
					title: locale.text("share.page.subtitle"),
					icon: fontUtils.pageIcon("nativeShare"),
					label: locale.text("action.nativeShare")
				};
				return ctx;
			};
			ctx.title = pageContext.ctx.pageTitle || "";
			if (pageContext.opt.liveTile) {
				ctx.liveTile = buildCtxLiveTile(ctx);
			};
			if (pageContext.opt.scheduleMessage) {
				ctx.scheduleMessage = buildCtxScheduleMessage();
			};
			if (pageContext.opt.share) {
				ctx.share = builCtxShare();
			};
			pageContext.vignettes.forEach(function(vignette) {
				ctx.vignette = ctx.vignette || {};
				ctx.vignette.items = ctx.vignette.items || [];
				ctx.vignette.items.push({
					opt: vignette.opt,
					title: vignette.ctx.pageTitle,
					id: vignette.id
				});
				Object.keys(vignette.opt).forEach(function(key) {
					ctx.vignette[key] = ctx.vignette[key] || vignette.opt[key] || false;
				});
			});
			ctx.singleVignette = (pageContext.vignettes.length === 1) ? ctx.vignette.items[0].id : false;
			if (ctx.vignette && ctx.vignette.liveTile) {
				this._getItemLiveTile("vignette").disabled = false;
				ctx.vignette.liveTile = buildCtxLiveTile(ctx);
			} else {
				this._getItemLiveTile("vignette").disabled = true;
			}
			return ctx;
		},
		_setData: function(context) {
			var self = this;
			this.liveTile = {};
			if (context.scheduleMessage) {
				_scheduleMsgItems.forEach(function(item) {
					var $$item = self.$$elmt.find(".s-m-schedulemsg #" + item.id);
					$$item.val("");
				});
			}
			if (context.vignette) {
				var btnCreate = self.$$elmt.find("a[data-action='liveTileCreate']");
				var val = self.$$elmt.find(".s-m-livetile #vignette").val();
				btnCreate.toggle(val !== ""); //Be carefull val could be undefined
				if (context.singleVignette) {
					self.$$elmt.find(".s-m-livetile #description").val(context.vignette.items[0].title);
				}
			}
		},
		notifyToggled: function(side, action, visible) {
			Base.prototype.notifyToggled.call(this, side, action, visible);
			if (visible) this._setData(this._context);
		},
		_getItemLiveTile: function(id) {
			var found;
			_liveTile.some(function(item) {
				if (item.id === id) {
					found = item;
					return true;
				}
			});
			return found;
		},
		_actChoice: function(id) {
			var btnCreate = this.$$elmt.find("a[data-action='liveTileCreate']");
			var value = this.$$elmt.find(".s-m-livetile #vignette").val();
			var itemDescription = this._getItemLiveTile("description");
			if (itemDescription && !itemDescription.disabled && itemDescription.defaultValue !== undefined) {
				this.$$elmt.find(".s-m-livetile #description").val(value ? this.$$elmt.find(".s-m-livetile #vignette option:selected").text() : "");
			}
			btnCreate.toggle(value !== "");
		},
		_actDatePicker: function(id) {
			selectorFactory.createSelector(new _Field("application/x-date", this.$$panel.find(".s-m-schedulemsg #" + id), locale.text("schedule.message." + id + ".label")));
		},
		_actTimePicker: function(id) {
			selectorFactory.createSelector(new _Field("application/x-time", this.$$panel.find(".s-m-schedulemsg #" + id), locale.text("schedule.message." + id + ".label")));
		},
		_actReminderCreate: function() {
			var schedule = {}, self = this,
				content = null;
			_scheduleMsgItems.forEach(function(item) {
				var val = self.$$panel.find(".s-m-schedulemsg #" + item.id).val();
				if (val) {
					schedule[item.id] = schedule[item.id] || {};
					schedule[item.id].$type = item.$type;
					schedule[item.id].value = val;
				}
			});
			if (schedule.date && schedule.time) {
				content = {};
				content.schedule = {
					Severity: "reminder"
				};
				content.schedule.Text1 = self._context.title;
				content.schedule.Text2 = schedule["description"] ? schedule["description"].value : "";
				content.schedule.ScheduleTime = schedule["date"].value + " " + schedule["time"].value;
			}
			if (content) {
				notifications.publish("sm.page.settings.changed", content);
				_scheduleMsgItems.forEach(function(item) {
					self.$$panel.find(".s-m-schedulemsg #" + item.id).val("");
				});
			}
			this.close("close");
		},
		_actSharePageLink: function() {
			globals.getApplication().shareCurrentPage();
			this.close("close");
		},
		_actLiveTileCreate: function() {
			var self = this,
				content = {};
			content.liveTile = {};
			var val;
			_liveTile.forEach(function(item) {
				if (!item.disabled) {
					if (self.liveTile && self.liveTile[item.id]) {
						content.liveTile[item.id] = self.liveTile[item.id];
					} else {
						content.liveTile[item.id] = self.$$panel.find(".s-m-livetile #" + item.id).val();
					}
				}
			});
			if (content && content.liveTile) {
				content.liveTile.title = content.liveTile.description;
				delete content.liveTile.description;
				notifications.publish("sm.page.settings.changed", content);
			}
			this.close("close");
		}
	});

var _Field = utils.defineClass(
	function(type, item, title) {
		this.$type = type;
		this.$title = title;
		this.$$item = item;
	}, null, {
		setFieldValueFromSelector: function(value) {
			this.$$item.val(value);
		},
		getValue: function() {
			this.$$item.val();
		},
		getTitle: function() {
			return this.$title;
		}
	});
exports.Klass = _Klass;