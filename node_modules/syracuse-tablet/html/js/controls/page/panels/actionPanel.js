"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/panels/sidePanel').Klass;

var _templates = {
	main: '\
			<nav class="navbar s-m-side-panel {{side}} navbar-inverse ctrl-evt-click" role="navigation">\
				<div class="s-m-panel-content s-m-scroll-elmt">\
					{{#each items}}\
						{{#if html}}\
							{{#if title}}\
								<div class="container-fluid">\
									<div class="navbar-header">\
										<span class="navbar-brand" href="#"><span>{{title}}</span></a>\
									</div>\
								</div>\
							{{/if}}\
							<ul class="nav navbar-nav">\
								{{{html}}}\
							</ul>\
						{{/if}}\
					{{/each}}\
				</div>\
			</nav>'
};
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	if (!tmpl) alert("template " + name + " not found");
	return tmpl(ctx);
};
/**
 * Base left/right panel control for dashBoards and regular pages
 * 	Adapted from Metro Bootstrap navbar-side
 */
var _Klass = utils.defineClass(

	function(controller, $type, panelId, options) {
		options = options || {};
		options.enableGesture = true;
		Base.call(this, controller, $type, panelId, options);
	}, Base, {
		buildHtml: function(side) {
			Base.prototype.buildHtml.call(this, side);
			this.$$elmt.addClass(this.typeName);
			var context = {
				ctrlId: this.id,
				side: side
			};
			if (this.$$panel) {
				this.$$panel.remove();
			}
			this.$$panel = this.buildPanel(context, side);
			if (this.$$panel && this.$$panel.length) {
				this.$$elmt.append(this.$$panel);
			}
		},
		/**
		 * Override this method to build child class
		 */
		buildPanel: function(context, side) {
			return $(_getHtml("main", context));
		},

		isEnabled: function() {
			return true;
		}
	});

exports.Klass = _Klass;