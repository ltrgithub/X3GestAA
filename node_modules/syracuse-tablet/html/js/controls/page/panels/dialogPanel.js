"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/panels/sidePanel').Klass;
var HammerScroller = require('syracuse-tablet/html/js/helpers/hammerScroller').Klass;
var uiRect = require('syracuse-tablet/html/js/ui/rect');

var _templates = {
	header: '\
		<div class="header">\
		<buttons class="pull-right"> \
			<button type="button" class="btn btn-default s-m-modal-btn-cancel" data-control-id="{{ctrlId}}" data-action="cancel"></button>\
		</buttons> \
		<div class="modal-title">{{title}}</div> \
		</div>\
		'
};
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	if (!tmpl) alert("template " + name + " not found");
	return tmpl(ctx);
};
/**
 * Base left/right panel control for dashBoards and regular pages
 * 	Adapted from Metro Bootstrap navbar-side
 */
var _Klass = utils.defineClass(

	function(controller, $type, panelId, options) {
		// true by default
		this.enableGesture = options.enableGesture !== false;
		Base.call(this, controller, $type, panelId, options);
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this._gestureMgr) {
				this._gestureMgr.destroy();
				this._gestureMgr = null;
			}
		},
		buildHtml: function(side, title) {
			Base.prototype.buildHtml.call(this, side);
			this.$$elmt.addClass(this.typeName);
			if (this._gestureMgr) {
				this._gestureMgr.destroy();
				this._gestureMgr = null;
			}
			if (this.$$header) {
				this.$$header.remove();
			}
			var ctx = {
				side: side,
				ctrlId: this.id,
				title: title
			};
			this.$$header = this.buildHeader(ctx);
			if (this.$$header && this.$$header.length) {
				this.$$elmt.append(this.$$header);
			}
		},
		buildHeader: function(ctx) {
			return $(_getHtml("header", ctx));
		},
		isEnabled: function() {
			return true;
		},
		notifyToggled: function(side, action, visible) {
			if (this.enableGesture && visible) {
				this.updateGesture();
			}
		},
		updateGesture: function() {
			if (this.$$elmt.is(':visible') && this.$$panel) {
				if (!this._gestureMgr) {
					this.$$scrollElmt = this.$$panel.find(".s-m-scroll-elmt");
					this.$$scrollElmt.css({
						height: "auto",
						position: "relative"
					});
					this.$$scrollWrapper = this.$$panel;
					this._gestureMgr = new HammerScroller(this.$$scrollElmt, {
						direction: "v",
						valMax: 0,
						name: this.$bind,
						isPageScroller: false
					});
				}
				var scrollRect = uiRect.elmtRect(this.$$scrollElmt, "outer");
				var wrapperRect = uiRect.elmtRect(this.$$scrollWrapper, "outer");
				var viewRect = wrapperRect.intersectRect(scrollRect);
				if (viewRect && !viewRect.contains(scrollRect)) {
					this._gestureMgr.init(viewRect);
				} else {
					this._gestureMgr.reset();
				}
			} else if (this._gestureMgr) {
				this._gestureMgr.reset();
			}
		},
		_actCancel: function() {
			this.close();
		},
		_actValidate: function() {
			this.close();
		},
		onClick: function(evt) {
			return true;
		},
		// To allow display
		hasLinks: function() {
			return true;
		}
	});

exports.Klass = _Klass;