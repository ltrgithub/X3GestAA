"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var Base = require('syracuse-tablet/html/js/controls/page/panels/actionPanel').Klass;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var ctrlHelpers = require('syracuse-tablet/html/js/controls/ctrlHelpers');
var native = require('syracuse-tablet/html/js/helpers/native/native');


var _hideDevFeatures;
var _mustHideDevFeatures = function() {
	if (_hideDevFeatures != null) {
		return _hideDevFeatures;
	}
	_hideDevFeatures = !native.isTestMode() && native.hasCapability("nativeApp");
};

var _templates = {
	navigLink: '<li class="">\
		<a draggable="false"  href="#" {{#if openPage}}data-nav="{{openPage}}"{{else}}data-action="{{action}}" data-params="{{params}}"{{/if}} data-control-id="{{ctrlId}}">\
			<i class="{{icon}}"></i>\
			&nbsp;\
			<span class="isLabel">{{title}}</span>\
		</a>\
	</li>'
};

var _panelLinks = {
	home: {
		label: "header.sm.links.home",
		icon: "home",
		action: "gotoWelcomeApplication",
		target: "application"
	},
	switchContext: {
		label: "header.sm.links.switchContext",
		icon: "switchContext",
		params: "switchContext",
		action: "linkClicked",
		target: "panel"
	},
	pageShare: {
		label: "header.links.page.share",
		icon: "nativeShare",
		params: "pageShare",
		action: "linkClicked",
		target: "panel"
	},
	pageMailTo: {
		label: "header.links.page.mailto",
		icon: "mailto",
		action: "pageMailto",
		target: "application"
	},
	clearCache: {
		label: "header.sm.links.settings",
		icon: "settings",
		action: "linkClicked",
		params: "settings",
		target: "panel"
	},
	about: {
		label: "header.sm.links.about",
		icon: "about",
		action: "linkClicked",
		params: "about",
		target: "panel"
	},
	logout: {
		label: "header.sm.links.logout",
		icon: "logout",
		action: "logout",
		target: "application"
	},
	development: {
		label: "header.links.development",
		icon: "developmentPage",
		action: "developmentPage",
		target: "application"
	},
	pinPage: {
		label: "",
		icon: "",
		action: "pinPage",
		target: "application"
	},
	pageConfig: {
		label: "page.configure.btn",
		icon: "pageConfig",
		action: "pageConfig",
		target: "application"
	},
	drafts: {
		label: "header.links.page.drafts",
		icon: "drafts",
		openPage: "pageDrafts",
		target: "application"
	}
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/**
 * Regular page left panel
 */
var _Klass = utils.defineClass(

	function(controller, $type, panelId, options) {
		options = options || {};
		// Just to test this mode that pushs the content
		options.overlap = false;
		options.enableGesture = false;
		options.enableTwoColumns = true;
		Base.call(this, controller, $type, panelId, options);
		notifications.subscribe(this, ["sm.page.pin.state.change", "sm.drafts.changed"]);
		this._initPanelItems(controller, options);
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
			this._doAfterBuildHandlers = null;
		},

		buildPanel: function(context, side) {
			var self = this;
			var actionsHtml = [];
			var keys = Object.keys(self._panelLinks);
			keys.forEach(function(kk, idx) {
				var link = self._panelLinks[kk];
				if (link.hidden !== true) {
					actionsHtml.push(_getHtml("navigLink", {
						title: locale.text(link.label),
						action: link.action || "",
						openPage: link.openPage || "",
						params: link.params || "",
						icon: fontUtils.pageIcon(link.icon),
						ctrlId: link.target === "panel" ? self.id : null
					}));
				}
			});
			context.items = [{
				title: globals.getUserName(),
				html: actionsHtml.join('')
			}];
			return Base.prototype.buildPanel.call(self, context, side);
		},

		attach: function($$parent, side) {
			Base.prototype.attach.call(this, $$parent, side);
			if (this._doAfterBuildHandlers) {
				// Postponed processes
				// Update panel with events that occurs when it was hidden/not built
				this._doAfterBuildHandlers.forEach(function(handler) {
					handler();
				});
				this._doAfterBuildHandlers = null;
			}
		},
		_initPanelItems: function(page, options) {
			var toolBars = options || {};
			this._panelLinks = $.extend(true, {}, _panelLinks);
			this._panelLinks["development"].hidden = (_mustHideDevFeatures() === true || globals.isMobile()) ? true : !toolBars.showDevelopment;
			this._panelLinks["home"].hidden = !toolBars.showHome;
			this._panelLinks["pageConfig"].hidden = !toolBars.showPageConfig;
			this._panelLinks["showDashboardList"].hidden = !toolBars.showDashboardList;
			this._panelLinks["pageShare"].hidden = !page.showPageShare();
			this._panelLinks["pageMailTo"].hidden = toolBars.showPageMailto !== true;
			this._panelLinks["drafts"].hidden = !toolBars.showDrafts;
			//page.nativeCapabilities.share,
			var pinPage = this._panelLinks["pinPage"];
			switch (toolBars.statusPinPage) {
				case 1:
					pinPage.label = "pin.page.panel.label.pin";
					pinPage.hidden = false;
					pinPage.icon = "pinPage_1";
					break;
				case 2:
					pinPage.label = "pin.page.panel.label.unpin";
					pinPage.hidden = false;
					pinPage.icon = "pinPage_2";
					break;
				default:
					pinPage.hidden = true;
					break;
			}
		},

		_actLinkClicked: function(actionName) {
			/* triggering action */
			eventListener.triggerAction(this.$$elmt, actionName);
		},

		// newState
		// 0 = don't show
		// 1 = show inactive
		// 2 = show active
		notifPagePinStateChange: function(newState) {
			var $$icon = this.$$elmt.find("[data-action=pinPage] i");
			if ($$icon.length > 0) {
				$$icon.attr("class", fontUtils.pageIcon("pinPage_" + newState));
			}
			var $$text = this.$$elmt.find("[data-action=pinPage] span");
			if ($$text.length > 0) {
				var text;
				if (newState != 2) {
					text = locale.text("pin.page.panel.label.pin");
				} else {
					text = locale.text("pin.page.panel.label.unpin");
				}

				$$text.text(text);
			}
		},
		hasLinks: function() {
			return true;
		},
		_afterBuildPush: function(handler) {
			if (this._doAfterBuildHandlers == null) {
				this._doAfterBuildHandlers = [];
			}
			if (this._doAfterBuildHandlers.indexOf(handler) >= 0) {
				return;
			}
			this._doAfterBuildHandlers.push(handler);
		},
		/**
		 * Manage the count info in 'List of draft' menu
		 */
		notifDraftsChanged: function(count) {
			if (!this.$$elmt) {
				// Postpone the change if control not built
				this._afterBuildPush(jsutils.bindFn(this.notifDraftsChanged, this, count));
			} else {
				ctrlHelpers.notifDraftsChanged(this, count);
			}
		}
	});

exports.Klass = _Klass;