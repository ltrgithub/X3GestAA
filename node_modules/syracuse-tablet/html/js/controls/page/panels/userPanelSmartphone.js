"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/panels/actionPanel').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _templates = {
	navigLink: '<li class="">\
		<a draggable="false"  href="#" data-action="{{action}}" data-params="{{params}}" data-control-id="{{ctrlId}}">\
			<i class="{{icon}}"></i>\
			&nbsp;\
			<span>{{title}}</span>\
		</a>\
	</li>'
};

// TODO
var _panelLinks = {
	home: {
		label: "header.sm.links.home",
		icon: "home",
		action: "gotoWelcomeApplication",
		target: "application"
	},
	switchContext: {
		label: "header.sm.links.switchContext",
		icon: "switchContext",
		params: "switchContext",
		action: "linkClicked",
		target: "panel"
	},
	clearCache: {
		label: "header.sm.links.clearCache",
		icon: "clearCache",
		action: "linkClicked",
		params: "clearCache",
		target: "panel"
	},
	about: {
		label: "header.sm.links.about",
		icon: "about",
		action: "linkClicked",
		params: "about",
		target: "panel"
	},
	logout: {
		label: "header.sm.links.logout",
		icon: "logout",
		action: "logout",
		target: "application"
	},
	development: {
		label: "header.links.development",
		icon: "developmentPage",
		action: "developmentPage",
		target: "application"
	},
	pinPage: {
		label: "",
		icon: "",
		action: "pinPage",
		target: "application"
	}
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/**
 * Regular page left panel
 */
var _Klass = utils.defineClass(

	function(controller, $type, panelId, options) {
		// Just to test this mode that pushs the content
		options.overlap = false;
		Base.call(this, controller, $type, panelId, options);

		notifications.subscribe(this, ["sm.page.pin.state.change"]);
	}, Base, {

		buildPanel: function(context, side) {
			var self = this;
			var actionsHtml = [];

			self._initPanelItems();

			var keys = Object.keys(_panelLinks);
			keys.forEach(function(kk, idx) {
				var link = _panelLinks[kk];
				if (link.hidden !== true) {
					actionsHtml.push(_getHtml("navigLink", {
						title: locale.text(link.label),
						action: link.action || "",
						params: link.params || "",
						icon: fontUtils.pageIcon(link.icon),
						ctrlId: link.target === "panel" ? self.id : null
					}));
				}
			});
			context.title = globals.getUserName();
			context.actionsHtml = actionsHtml.join('');
			return Base.prototype.buildPanel.call(self, context, side);
		},

		_initPanelItems: function() {
			var page = globals.getCurrentPage();
			var toolBars = page.buildOpts && page.buildOpts.toolBars || {};

			if (toolBars.showDevelopment) {
				_panelLinks["development"].hidden = false;
			} else {
				_panelLinks["development"].hidden = true;
			}

			if (toolBars.showHome) {
				_panelLinks["home"].hidden = false;
			} else {
				_panelLinks["home"].hidden = true;
			}

			switch (toolBars.statusPinPage) {
				case 1:
					_panelLinks["pinPage"].label = "pin.page.panel.label.pin";
					_panelLinks["pinPage"].hidden = false;
					_panelLinks["pinPage"].icon = "pinPage_1";
					break;
				case 2:
					_panelLinks["pinPage"].label = "pin.page.panel.label.unpin";
					_panelLinks["pinPage"].hidden = false;
					_panelLinks["pinPage"].icon = "pinPage_2";
					break;
				default:
					_panelLinks["pinPage"].hidden = true;
					break;
			}
		},

		_actLinkClicked: function(actionName) {
			/* triggering action */
			eventListener.triggerAction(this.$$elmt, actionName);
		},

		destroy: function() {
			Base.prototype.destroy.call(this);
			notifications.unsubscribe(this);
		},

		// newState
		// 0 = don't show
		// 1 = show inactive
		// 2 = show active
		notifPagePinStateChange: function(newState) {
			var $$icon = this.$$elmt.find("[data-action=pinPage] i");
			if ($$icon.length > 0) {
				$$icon.attr("class", fontUtils.pageIcon("pinPage_" + newState));
			}
			var $$text = this.$$elmt.find("[data-action=pinPage] span");
			if ($$text.length > 0) {
				var text;
				if (newState != 2) {
					text = locale.text("pin.page.panel.label.pin");
				} else {
					text = locale.text("pin.page.panel.label.unpin");
				}

				$$text.text(text);
			}
		}
	});

exports.Klass = _Klass;