"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/panels/sidePanel').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _templates = {
	main: '\
		<section class="s-m-side-panel {{side}}">\
			<ul class="nav nav-pills" role="tablist"> \
				{{#each tabs}}\
					<li style="width:{{width}};"><a href="#{{id}}" role="tab" data-toggle="tab">{{title}}</a></li> \
				{{/each}}\
			</ul> \
			<div class="tab-content">\
				<header>{{title}}</header>\
				<div class="btn-group btn-group-justified" role="group">\
				  <a type="button" class="btn btn-default" data-params="apply">{{apply}}</a>\
				  <a type="button" class="btn btn-default" data-params="close">{{close}}</a>\
				</div>\
				{{#each tabs}}\
					<div id="{{id}}" role="tabpanel" class="tab-pane {{type}}"/> \
				{{/each}}\
			</div> \
		</section>',
	sort: '\
		<ul class="list-group">\
			{{#each items}}\
				<li class="list-group-item" data-params="{{id}}">\
					<span>{{name}}</span>\
					<span class="s-m-order ' + fontUtils.sortIcon("desc") + '  {{#smCompare sort "desc"}}enabled{{/smCompare}}" data-params="desc"></span>\
					<span class="s-m-order ' + fontUtils.sortIcon("asc") + '  {{#smCompare sort "asc"}}enabled{{/smCompare}}" data-params="asc"></span>\
				</li>\
			{{/each}}\
		</ul>'
	/** Add this line to add the remove icon
	 * <span class="s-m-order ' + fontUtils.sortIcon("none") + ' " data-params="none"></span>
	 */
};


var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};
/**
 * Base tab
 */
var _Tab = utils.defineClass(
	function(panel, id, options) {
		this.id = id;
		this.options = options || {};
		this.panel = panel;
		this.$$tab = this.panel.$$panel.find('[href="#' + id + '"]');
		this.$$btnBar = this.panel.$$panel.find('.tab-content > .btn-group');
		this.$$content = this.panel.$$panel.find('#' + this.id);
		if (this.isHidden()) {
			this.$$tab.parent().hide();
			this.$$content.hide();
		} else {
			this.$$tab.on('shown.bs.tab', utils.bindFn(this.onTabShown, this));
			this.$$tab.on('hidden.bs.tab', utils.bindFn(this.onTabHidden, this));
			this.$$btnBar.on('click', '[data-params]', utils.bindFn(this.onBtnBarClick, this));
			if (this.options.isActive) {
				var self = this;
				window.setTimeout(function() {
					self.activate(true);
				});
			}
		}
	}, null, {
		destroy: function() {
			this.panel = null;
			utils.unbindObj(this.$$tab);
			this.$$tab = null;
			utils.unbindObj(this.$$content);
			this.$$content = null;
		},
		isHidden: function() {
			return this.options.hidden === true;
		},
		isActive: function() {
			return this.$$tab.hasClass("active");
		},
		activate: function(yes) {
			this.$$tab.tab(yes != false ? 'show' : 'hide');
		},
		setAlone: function() {
			this.$$tab.parent().width("100%");
		},
		onTabShown: function(event) {
			if (this.$$content.is(':empty')) {
				this.$$content.append(this.buildHtml());
				this.$$content.on("click", '[data-params]', utils.bindFn(this.onTabContentClick, this));
			}
		},
		onTabHidden: function(event) {},
		/**
		 * When the panel is detached/attached to main page
		 */
		notifyToggled: function(side, action, visible) {},
		buildHtml: function() {},
		onTabContentClick: function(evt) {
			evt.preventDefault();
			evt.stopPropagation();
			var $$target = $(evt.target);
			var params = $$target.attr("data-params");
			if (params === "apply") {
				if (this.apply(evt, $$target) === true) {
					this.close();
				}
				return;
			}
			this.doAction(evt, $$target, params);
		},
		onBtnBarClick: function(evt) {
			evt.preventDefault();
			evt.stopPropagation();
			var $$target = $(evt.target);
			var params = $$target.attr("data-params");
			switch (params) {
				case "apply":
					if (this.apply(evt, $$target) === true) {
						this.close();
					}
					break;
				case "close":
					this.close();
					break;
			}
		},
		/**
		 * Action other than save/close
		 */
		doAction: function(evt, $$target, params) {},
		/**
		 * Called on ok/save buttopn - return true to close the panel
		 */
		apply: function(evt, $$target) {},
		close: function() {
			this.panel.close();
		}
	});
/**
 * Sort tab
 */
var _Sort = utils.defineClass(
	function(panel, id, options) {
		this.sortInfo = panel.getParentArray().sortInfoGet();
		options.hidden = options.hidden === true || this.sortInfo.length === 0;
		_Tab.call(this, panel, id, options);
	}, _Tab, {
		buildHtml: function() {
			this.$$content.append($(_getHtml("sort", {
				items: this.sortInfo
			})));
		},
		/**
		 * Save sort info
		 */
		apply: function(evt, $$target, dataParams) {
			var status = {};
			this.$$content.find(".s-m-order.enabled").each(function(idx, $$e) {
				$$e = $($$e);
				status[$$e.parent().attr("data-params")] = $$e.attr("data-params");
			});
			this.sortInfo.forEach(function(i) {
				i.sort = status[i.id] || "none";
			});
			var self = this;
			window.setTimeout(function() {
				self.panel.getParentArray().sortInfoSet(self.sortInfo);
			});
			return true;
		},
		doAction: function(evt, $$target, dataParams) {
			if (dataParams !== "none") {
				// unused because no dataParams="none" icon
				if ($$target.hasClass("enabled")) {
					$$target.removeClass('enabled');
					return;
				}
			}
			(this.options.singleCriteria === true ? this.$$content : $$target.parent()).find(".s-m-order.enabled").removeClass('enabled');
			if (dataParams !== "none") {
				$$target.addClass("enabled");
			}
		}
	});
/**
 * Filter tab
 */
var _Filter = utils.defineClass(
	function(panel, id, options) {
		this.filterInfo = panel.getParentArray().filterInfoGet();
		_Tab.call(this, panel, id, options);
	}, _Tab, {

		buildHtml: function() {
			this.$$content.append($(_getHtml("filter", {
				items: this.filterInfo
			})));
		},
		/**
		 * Save sort info
		 */
		apply: function(evt, $$target, dataParams) {
			var self = this;
			// TODO
			window.setTimeout(function() {
				self.panel.getParentArray().filterInfoSet(self.sortInfo);
			});
			return true;
		},
		/**
		 * Click on an element wit data-param
		 */
		doAction: function(evt, $$target, dataParams) {
			// TODO
		}
	});

var _tabDescr = [{
	klass: _Sort,
	options: {
		name: "sort",
		isActive: true,
		singleCriteria: true
	}
}, {
	klass: _Filter,
	options: {
		name: "filter",
		isActive: false
	}
}];

/**
 * Arrays Sort/Filter panel
 * Options
 * 		parentArray: 	parent array control
		filter: 		false to hide filter tab
		sort: 			false to hide sort tab
 */
var _Klass = utils.defineClass(
	function(controller, $type, panelId, options) {
		this._tabs = {};
		Base.call(this, controller, $type, panelId, options);
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			this.options.parentArray = null;
			if (this._tabs) {
				$.each(this._tabs, function(key, value) {
					value.destroy();
				});
				this._tabs = null;
			}
		},
		getParentArray: function() {
			return this.options.parentArray;
		},
		/**
		 * Build panel and tabs html
		 */
		buildHtml: function(side) {
			var self = this;
			Base.prototype.buildHtml.call(this, side);
			self.$$elmt.addClass(self.typeName);
			if (self.$$panel) {
				self.$$panel.remove();
			}
			var ctx = {
				ctrlId: self.id,
				side: side,
				apply: locale.text("panels.array.apply"),
				close: locale.text("panels.array.close"),
				/* There's no titles for queries*/
				title: this.getParentArray().getTitle(),
				tabs: [],
			};
			var descriptions = [];
			/**
			 * We can disable filter or sort with self.options.filter = false or  self.options.sort
			 */
			_tabDescr.forEach(function(descr) {
				descr = $.extend({}, descr);
				descr.options.hidden = self.options[descr.options.name] === false;
				descriptions.push(descr);
			});
			var width = Math.round(1000 * 100 / _tabDescr.length) / 1000 + "%";
			var ids = {};
			descriptions.forEach(function(descr) {
				ids[descr.options.name] = utils.readableuid("array" + descr.options.name);
				ctx.tabs.push({
					id: ids[descr.options.name],
					title: locale.text("panels.array." + descr.options.name),
					type: descr.options.name,
					width: width
				});
			});
			self.$$panel = $(_getHtml("main", ctx));
			if (self.$$panel && self.$$panel.length) {
				self.$$elmt.append(self.$$panel);
				var nbHidden = 0;
				// Create tabs
				descriptions.forEach(function(descr) {
					var t = new descr.klass(self, ids[descr.options.name], descr.options);
					if (t.isHidden()) nbHidden++;
					self._tabs[descr.options.name] = t;
				});
				if (descriptions.length == 1 || descriptions.length === nbHidden + 1) {
					// Tab is alone
					$.each(self._tabs, function(key, value) {
						if (!value.isHidden()) {
							value.setAlone();
						}
					});
				} else {
					// Todo adjust with if some tabs are hidden
				}
			}
		},
		/**
		 * Notification whe panel is opened/closed
		 */
		notifyToggled: function(side, action, visible) {
			var self = this;
			Base.prototype.notifyToggled.call(self, side, action, visible);
			$.each(self._tabs, function(id, tab) {
				tab.notifyToggled(side, action, visible);
			});
		},
	});

exports.Klass = _Klass;