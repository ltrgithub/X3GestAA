"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/panels/dialogPanel').Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var modalConfirm = require('syracuse-tablet/html/js/ui/modals/modalConfirm');

var _templateAll = {
	header: ' \
				<buttons class="pull-right"> \
					<button type="button" class="btn btn-default s-m-modal-btn-cancel" data-action="$cancel"></button> \
				</buttons> \
				<div class="modal-title">{{title}}</div> \
				',
	content: ' \
			<article style="height:100%">\
				<section class="panel panel-default list">\
					<div class="s-m-list-wrapper">\
					</div>\
				</section>\
			{{#if createLabel}}\
				<section class="panel panel-default action">\
					<button type="button" class="btn btn-default" data-action="createTemplate"  data-control-id="{{ctrlId}}"> {{createLabel}}</button>\
				</section>\
			{{/if}}\
			</article>\
		',
	list: ' \
		<ul class="list-group s-m-scroll-elmt">\
		{{#each views}} \
		<li class="list-group-item {{selected}}" data-action="clickView" data-params="{{uuid}}" data-control-id="{{../ctrlId}}">\
			<table>\
				<tr>\
				<td>\
					<h4 class="list-group-item-heading">{{description}}</h4>\
					<p class="list-group-item-text">{{factoryOwner}}</p>\
				</td>\
				<td>\
					{{#if deletable}}\
					<span  class="btn btn-default" data-action="deleteTemplate" data-params="{{uuid}}"  data-control-id="{{../../ctrlId}}">\
					<i class="{{../../deleteicon}}"></i>\
					</span>\
					{{/if}}\
			    </td>\
				</tr>\
			</table>\
		</li>\
		{{/each}}\
		</ul>'
};
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templateAll[key];
	if (!tmpl) {
		tmpl = _templateAll[key] = Handlebars.compile(_templateAll[name]);
	}
	if (!tmpl) alert("template " + name + " not found");
	return tmpl(ctx);
};
var _Klass = utils.defineClass(
	function(controller, $type, panelId, options) {
		options = options || {};
		Base.call(this, controller, $type, panelId, options);
		this._viewList(options.views);
		notifications.subscribe(this, ["sm.dashboard.list.views.change"])
	}, Base, {
		buildHtml: function(side) {
			Base.prototype.buildHtml.call(this, side, this.options.title);
			this.$$content = this._buildContent().appendTo(this.$$elmt);
			this._buildList().appendTo($(".s-m-list-wrapper", this.$$content))
		},
		destroy: function() {

		},
		notifyToggled: function(side, action, visible) {
			Base.prototype.notifyToggled.call(this, side, action, visible);
			if (visible) {
				this._replaceList();
			}
		},
		_setData: function() {

		},
		_getContext: function() {
			return null;
		},
		_buildContent: function() {
			var opt = {
				"ctrlId": this.id
			};
			if (this.options.showCreateTemplate) {
				opt.createLabel = locale.text("dashboard.welcome.create.template")
			}

			return $(_getHtml("content", opt));
		},
		_buildList: function() {
			var opts = {
				"deleteicon": fontUtils.getIconByName("$delete"),
				"ctrlId": this.id,
				"views": this.views
			}
			return $(_getHtml("list", opts));
		},
		_viewList: function(views) {
			var self = this;
			self.views = [];
			views.forEach(function(view) {
				self.views.push({
					"description": view.$description,
					"personal": view.$isPersonal,
					"selected": (view.$selected ? "active" : ""),
					"uuid": view.$uuid,
					"factoryOwner": view.$factoryOwner,
					"deletable": self.options.showCreateTemplate && !view.$isPersonal
				});
			});
		},
		notifDashboardListViewsChange: function(opts) {
			this._viewList(opts.views);
			this._replaceList();
		},
		_replaceList: function() {
			$(".s-m-list-wrapper").empty();
			this._buildList().appendTo($(".s-m-list-wrapper", this.$$content))
		},
		_actCreateTemplate: function() {
			this.close();
			notifications.publish(["sm.dashboard.create.template"]);
		},
		_actDeleteTemplate: function(uuid) {
			var modal = new modalConfirm.Modal(locale.text("modal.confirm.delete.template"), null, true);
			return modal.show().then(function(result) {
				if (result === "yes") {
					notifications.publish(["sm.dashboard.delete.template"], uuid);
				}
			});
		},
		_actClickView: function(uuid) {
			this.close();
			notifications.publish(["sm.dashboard.select.template"], uuid);
		}
	}
)
exports.Klass = _Klass;