"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var uiSettings = require('syracuse-tablet/html/js/helpers/uiSettings');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _templates = {
	items: '\
		<div class="s-m-breadcrumbs-items">\
		{{#each items}}{{{html}}}{{/each}}\
		</ul>\
		',
	item: '<a href="#" data-action="breadcrumb-click" data-control-id="{{ctrlId}}" data-params="{{data}}"><div class="s-m-breadcrumbs-item"><div class="s-m-breadcrumbs-text">{{text}}</div>{{#if notLast}}<div class="s-m-breadcrumbs-sep"></div>{{/if}}</div></a>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};

var _Klass = utils.defineClass(
	function CtrlBreadCrumbs($type, controller, options) {
		Base.call(this, controller, {
			$bind: "breadcrumbs"
		}, prototype.create({
			$type: $type
		}), options);

		notifications.subscribe(this, ["sm.history.pop", "sm.history.push"]);
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
			this._pageStates = [];
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, [this.typeName]);
		},
		onMainPageResize: function(info, orientation) {
			var deviceType = globals.getSiteLayout().getDeviceType();
			if (deviceType === "tablet") {
				this.$$elmt.css({
					height: uiSettings.getProp("breadcrumbs.height")
				});
			} else {
				// In the first step, breadcrumbs are not shown on smartphone
				this.$$elmt.css({
					height: 0
				});
			}
		},
		afterRender: function(updateLayout, buildOpts) {},
		applyMetaData: function(metaData) {
			//  No meta for this control 
			return;
		},

		_actFooterLink: function(uuid) {
			this._actionManager.triggerLink(uuid, this.controller).then(function(success, link, data, options) {
				// Message is displayed 
			}).fail(function(e) {
				if (jsutils.isError(e)) {
					// We shouldn't expect an error except exceptions
					globals.getModal().error("Footer action error", e);
				}
			});
		},
		getHeight: function() {
			return this.$$elmt && this.$$elmt.is(":visible") ? this.$$elmt.height() : 0;
		},
		notifHistoryPush: function(history) {
			this._buildBreadcrumbs(history);
		},
		notifHistoryPop: function(history) {
			this._buildBreadcrumbs(history);
		},
		_buildBreadcrumbs: function(history) {
			var self = this;
			var items = this._getItems(history);
			var crumbs = [];
			self._pageStates = [];
			$.each(items, function(idx, state) {
				var uuid = utils.UUID();
				self._pageStates[uuid] = $.extend(true, {}, state, {
					stackNum: idx
				});
				crumbs.push({
					html: _getHtml("item", {
						text: state.$title,
						notLast: (idx + 1 < items.length),
						ctrlId: self.id,
						data: uuid
					})
				});
			});
			var html = _getHtml("items", {
				items: crumbs
			});
			this.$$elmt.empty();
			this.$$elmt.append(html);
		},
		_getItems: function(history) {
			history = history || [];
			history = history.slice(0);
			history = history.reverse(); // Latest is first
			var stackToHome = [];

			// Filter history to only show stack until we reach welcome page for the first time to keep it as small as possible
			history.some(function(state) {
				stackToHome.push(state);
				if (state.isWelcomePage) {
					return true;
				}
				return false;
			});
			return stackToHome;
		},
		_actBreadcrumbClick: function(uuid) {
			var self = this;
			var state = self._pageStates[uuid];
			if (!state) return;
			var num = state.stackNum;
			if (num <= 0) return; // Click on current page, no need to do an action
			globals.getApplication().goBack(function PageFilter(histState) {
				if (num === 0) {
					return true;
				}
				num--;
			});
		}
	});

exports.Klass = _Klass;