"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var uiSettings = require('syracuse-tablet/html/js/helpers/uiSettings');

var _templates = {
	items: '\
		<div class="s-m-breadcrumbs-items">\
		{{#each items}}{{{html}}}{{/each}}\
		</ul>\
		',
	item: '<div class="s-m-breadcrumbs-item"><div class="s-m-breadcrumbs-text">{{text}}</div>{{#if notLast}}<div class="s-m-breadcrumbs-sep"></div>{{/if}}</div>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};

var _Klass = utils.defineClass(
	function CtrlBreadCrumbs($type, controller, options) {
		Base.call(this, controller, {
			$bind: "breadcrumbs"
		}, prototype.create({
			$type: $type
		}), options);
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, [this.typeName]);
			var hist = this._getItems();
			var items = [];
			this.$$elmt.css({
				height: uiSettings.getProp("breadcrumbs.height")
			});
			$.each(hist, function(idx, state) {
				items.push({
					html: _getHtml("item", {
						text: state.$title,
						notLast: (idx + 1 < hist.length)
					})
				});
			});
			var html = _getHtml("items", {
				items: items
			});
			this.$$elmt.append(html);
		},
		onMainPageResize: function(info, orientation) {

		},
		afterRender: function(updateLayout, buildOpts) {
			console.log(this.$$elmt.children(".s-m-breadcrumbs-items").width());
		},
		applyMetaData: function(metaData) {
			//  No meta for this control 
			return;
		},

		_actFooterLink: function(uuid) {
			this._actionManager.triggerLink(uuid, this.controller).then(function(success, link, data, options) {
				// Message is displayed 
			}).fail(function(e) {
				if (jsutils.isError(e)) {
					// We shouldn't expect an error except exceptions
					globals.getModal().error("Footer action error", e);
				}
			});
		},
		getHeight: function() {
			return this.$$elmt && this.$$elmt.is(":visible") ? this.$$elmt.height() : 0;
		},
		_getItems: function() {
			var hist = globals.getApplication().getHistory();
			var state = this.controller.state;
			state.$title = this.controller.prototype.data("$title");
			hist = hist.slice(0);
			hist.push(state);
			hist = hist.reverse();
			return hist;
		}
	});

exports.Klass = _Klass;