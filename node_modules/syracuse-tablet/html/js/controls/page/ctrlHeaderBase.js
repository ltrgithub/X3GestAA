"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiSettings = require('syracuse-tablet/html/js/helpers/uiSettings');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var actionManager = require('syracuse-tablet/html/js/application/actionManager');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var multiSelectionMgr = require('syracuse-tablet/html/js/application/multiSelectionMgr');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var native = require('syracuse-tablet/html/js/helpers/native/native');
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var ctrlHelpers = require('syracuse-tablet/html/js/controls/ctrlHelpers');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _userPanelId = globals.PANELUSERSMARTPHONE;
var _actionPanelId = globals.PANELACTIONSREGULAR;

var _templates = {
	main: '\
		<div class="s-m-header {{deviceType}}">\
			{{{contentHtml}}}\
		</div>',
	freshness: '\
		<div class="s-m-freshness s-m-fresh" data-action="showFreshness" data-control-id="{{ctrlId}}">\
			<i class="' + fontUtils.pageIcon("freshness") + '"></i>\
		</div>',
	tablet: {
		main: '\
			<div class="s-m-header-nav">\
				{{#if showBack}} \
					<a href="#" draggable="false" data-action="historyBack">\
						<i class="' + fontUtils.pageIcon("back") + '" />\
						</a>\
				{{/if}} \
			</div>\
			<div class="s-m-header-labels">\
				{{#if showBrand}}\
					<div class="s-m-header-brand">\
						<span class="s-m-brand">{{labelBrand}}</span>\
						<span class="s-m-product">{{labelProduct}}</span>\
					</div>\
				{{/if}}\
				<span class="s-m-header-label">{{headerLabel}}</span>\
			</div>\
			<div class="s-m-header-links">\
				{{{userContent}}}\
			</div>',
		userInfo: '\
			<div>\
				<span class="s-m-nav-text username">{{username}}</span>\
				<span class="s-m-nav-text userrole">{{userrole}}</span>\
			</div>\
			<span class="usericon ' + fontUtils.pageIcon("switchContext") + '" />\
			',
		infoOnly: '\
			<div>{{{userInfo}}}</div>',
		dropDown: '\
			<div class="s-m-header-user-info dropdown">\
				<a href="#" draggable="false" data-toggle="dropdown" role="button" id="{{dropdownId}}" aria-haspopup="true" aria-expanded="false">\
					{{{userInfo}}}\
				</a>\
				{{{dropDownMenu}}}\
			</div>',
		dropDownMenu: '\
			<ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="{{dropdownId}}">\
				{{#each links}}\
					{{#if divider}} \
						<li role="presentation" class="divider"></li>\
					{{/if}} \
					<li>\
						<a href="#" {{#if data-nav}}data-nav="{{data-nav}}"{{else}}data-action="linkClicked"{{/if}}draggable="false" data-params="{{data-params}}" data-control-id="{{ctrlId}}" class="list-group-item {{css}}">\
							<span class="{{icon}}" />\
							<span class="isLabel">{{label}}</span>\
						</a>\
					</li>\
				{{/each}}\
			</ul>'
	},
	smartphone: {
		main: '\
			<div class="s-m-header-nav">\
				{{#if showUserpanel}}\
					<a href="#" draggable="false" data-action="headerAction" data-params="{{panelId}}" data-control-id="{{ctrlId}}">\
						<span class="' + fontUtils.pageIcon("bars") + '" />\
					</a>\
				{{/if}}\
			</div>\
			<div class="s-m-header-labels">\
				{{{labelContent}}}\
			</div>\
			<div class="s-m-header-links">\
				{{{linksContent}}}\
			</div>',
		brandDom: '\
			<div class="s-m-header-brand">\
				<span class="s-m-brand">{{labelBrand}}</span>\
				<span class="s-m-product">{{labelProduct}}</span>\
			</div>',
		labelDom: '\
			<span class="s-m-header-label">{{label}}</span>',
		actionLink: '\
			<a href="#" draggable="false" class="s-m-link {{css}}{{#if $isDisabled}} disabled{{/if}}" {{#if $isHidden}}style="display:none"{{/if}} data-action="{{#if action}}{{action}}{{else}}headerLink{{/if}}" data-params="{{$uuid}}" data-control-id="{{ctrlId}}">\
				<i class="{{icon}}"></i>\
			</a>',
		actionPanelToggle: '\
			<a href="#" class="s-m-link" data-action="headerAction" draggable="false" data-params="{{panelId}}" data-control-id="{{ctrlId}}">\
				<i class="' + fontUtils.pageIcon("sidePanelR") + '" />\
				<span>{{{title}}}</span>\
			</a>'
	}
};

var _linksCtx = {
	showAuthoring: {
		items: [{
			"data-params": "designPage",
			"icon": "designPage",
			"label": "header.links.designPage"
		}]
	},
	showPageMailto: {
		items: [{
			"data-params": "pageMailto",
			"icon": "mailto",
			"label": "header.links.page.mailto"
		}]
	},
	showPageShare: {
		items: [{
			"data-params": "pageShare",
			"icon": "nativeShare",
			"label": "header.links.page.share"
		}]
	},
	showUserMenuLinks: {
		items: [{
			"data-params": "switchContext",
			"icon": "switchContext",
			"label": "header.links.switchContext"
		}, {
			"data-params": "settings",
			"icon": "settings",
			"label": "header.links.settings"
		}, {
			"data-params": "about",
			"icon": "about",
			"label": "header.sm.links.about"
		}]
	},
	showDevelopment: {
		"divider": true,
		items: [{
			"data-params": "developmentPage",
			"icon": "developmentPage",
			"label": "header.links.development"
		}]
	},
	showDrafts: {
		"divider": true,
		items: [{
			"data-nav": "pageDrafts",
			"icon": "drafts",
			"label": "header.links.page.drafts"
		}]
	}
};

var _getHtml = function(type, name, ctx) {
	type = type || "";
	var key = type + name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = type.length == 0 ? _templates[name] : _templates[type][name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};

var _hideSoftwareBackButton;
var _mustHideSoftwareBackButton = function() {
	if (_hideSoftwareBackButton != null) {
		return _hideSoftwareBackButton;
	}
	_hideSoftwareBackButton = native.hasCapability("hardwareBackButton");
};

var _hideDevFeatures;
var _mustHideDevFeatures = function() {
	if (_hideDevFeatures != null) {
		return _hideDevFeatures;
	}
	_hideDevFeatures = !native.isTestMode() && native.hasCapability("nativeApp");
};

/**
 * Page header Generate Html
 */
var _Klass = utils.defineClass(

	function CtrlHeaderBase($type, controller, options) {
		Base.call(this, controller, {
			$bind: "header"
		}, prototype.create({
			$type: $type
		}), options);
		if (options.freshness !== false) {
			notifications.subscribe(this, ["sm.data.freshness.change"]);
		}
	}, Base, {

		destroy: function() {
			this.resetSmartphonePanels();
			if (this._actionManager) {
				this._actionManager.destroy();
				this._actionManager = null;
			}
			if (this._multiSelManager) {
				this._multiSelManager.destroy();
				this._multiSelManager = null;
			}
			// end
			this._dataFreshness = null;
			this._$$freshness = null;
			Base.prototype.destroy.call(this);
		},
		/**
		 * Use refresh to update the width from outside the component
		 */
		refresh: function(controllerDao, options) {
			Base.prototype.refresh.call(this, controllerDao, options);
			this._updateWidth();

		},
		getPageControlType: function() {
			return "header";
		},
		resetSmartphonePanels: function() {
			if (this.controller) {
				// Detach the panels from main page - Used by vignette header for smartphone
				this.controller.panelDetach("right");
				this.controller.panelDetach("left");
			}
			if (this._smphUserpanel) {
				this._smphUserpanel.destroy();
				this._smphUserpanel = null;
			}
			if (this._smphPageactionpanel) {
				this._smphPageactionpanel.destroy();
				this._smphPageactionpanel = null;
			}
		},
		buildHtml: function($$parent, controllerDao, buildOptions) {
			buildOptions = buildOptions || {};
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, [this.typeName]);
			this.headerOptions = this.getHeaderOptions(buildOptions);
			// Build the header with default deviceType - To avoid flickering of the page - Improvement is done in onMainPageResize
			if (buildOptions.refresh === true || this.headerOptions.forceRefresh) {
				// Avoid double build
				// If it's not a refresh build is called on onResize - there's always a triggerResize when we rendre a page
				this._build();
			}
		},

		// Can be overridden
		getHeaderOptions: function(buildOptions) {
			var opts = $.extend({}, buildOptions.footer, buildOptions.toolBars);
			opts.showDevelopment = (globals.isMobile() || _mustHideDevFeatures() === true) ? false : globals.isDvlpMode();
			opts.showAuthoring = (globals.isDesktop() === true && _mustHideDevFeatures() === false && utils.hasDesignRight()) ? opts.showAuthoring : false; // Show full feature authoring only if on PC
			// Show full feature authoring only if on PC
			return opts;
		},

		applyMetaData: function(metaData, buildOptions) {
			//  No meta for this control 
			return;
		},
		onMainPageResize: function(info, orientation) {
			// In any case because we need to have the content width	
			this.$$elmt.parent().css({
				width: info.contentWidth + "px"
			});
			this._build();
			// In any case because we need to have the width tho calculate text-overflow elipsis
			this._updateHeaderStyle(this._deviceType);
		},
		/**
		 *	Update some header css properties.
		 */
		_updateHeaderStyle: function(deviceType) {
			return;
			// tablet
			// calculate and set s-m-header-labels div width according
			// to widths of s-m-header-nav and s-m-header-links div elements.
			var self = this;
			var $$header = self.$$elmt.find(".s-m-header");
			var $$links = self.$$elmt.find(".s-m-header-links");
			var $$nav = self.$$elmt.find(".s-m-header-nav");
			var $$label = self.$$elmt.find(".s-m-header-label");
			var offset = 10;
			if (deviceType === "tablet") {

				// for pages other than welcome page, update label width
				if (!self.controller.state.isWelcomePage) {
					var maxWidth = $$header.width() - ($$nav[0].scrollWidth + $$links[0].scrollWidth + offset);
					$$label.css("max-width", maxWidth);
				}
				// on welcome page, if header is too small, label will be hidden for a better display
				else {
					$$label.css("max-width", "inherit");
					var $$brand = self.$$elmt.find(".s-m-header-brand");

					// hide label if brand + label + links > header (in term of width)
					var hideLabel = $$brand.width() + $$label.width() + $$nav.width() + $$links.width() + offset > $$header.width();
					$$label.toggle(hideLabel ? false : true);

					// if label hidden and header still too small, reduce brand fontsize until header has better display
					var sum = $$brand.width() + $$nav.width() + $$links.width();
					var off = 3;
					if (hideLabel == true && (sum > $$header.width())) {
						while (sum > $$header.width()) {
							$$brand.css("font-size", ($$brand.css("font-size").match(/\d+/)[0] - off) + "px");
							off += 3;
							sum = $$brand.width() + $$nav.width() + $$links.width();
						}
					} else {
						$$brand.css("font-size", "2.5em");
					}

				}
			}
			// smartphone
			else {
				// only not on welcome page
				if (!self.controller.state.isWelcomePage) {
					var maxWidth = $$header.width() - ($$nav[0].scrollWidth + $$links[0].scrollWidth + offset);
					$$label.css("max-width", maxWidth);
				}
			};
		},
		getHeight: function() {
			return this.$$elmt.is(":visible") ? this._height : 0;
		},
		/**
		 * Update width for cells other than s-m-header-labels in order to manage long titles
		 * s-m-header-labels is set to with auto and will fit into the remaining space - Text will be truncated
		 */
		_updateWidth: function() {
			if (!this.$$header || this.destroyed) return;
			var freshVisible = this._$$freshness && this._$$freshness.is(":visible");
			if (freshVisible) {
				// We need to hide _$$freshness to calculate the width
				// _$$freshness is positioned in absolute and is dispayed over the header
				this._$$freshness.hide();
			}
			var $$label, width, $$nav;
			var maxWidth = this.$$elmt.width();
			var fullWidth = 0;
			this.$$header.children().each(function() {
				$$nav = $(this);
				if (!$$nav.is(".s-m-header-labels")) {
					width = 0;
					$$nav.children().each(function(idx) {
						width += $(this).outerWidth() + 1;
					});
					if ((fullWidth + width) > maxWidth) {
						width = Math.max(maxWidth - fullWidth, 0);
					}
					fullWidth += width;
					$$nav.width(width);
				} else {
					$$label = $$nav;
				}
			});
			$$label.width("auto");
			if (freshVisible) {
				this._$$freshness.show();
			}
		},
		/**
		 * Allows to build header in build html (better UX)
		 */
		_build: function() {
			var deviceType = globals.getSiteLayout().getDeviceType();
			if (this._deviceType != null && this._deviceType === deviceType) {
				this._updateWidth();
				return;
			}
			if (this._multiSelManager) {
				this._multiSelManager.destroy();
				this._multiSelManager = null;
			}
			if (this._actionManager) {
				this._actionManager.destroy();
				this._actionManager = null;
			}
			this._deviceType = deviceType;
			this._height = uiSettings.getProp("header.height");
			this.$$elmt.css({
				height: this._height + "px"
			});
			/*this.$$elmt.height(h);*/
			var $$parent = this.$$elmt.parent();
			$$parent.css({
				left: 0 + "px",
				height: this._height + "px"
			});
			var opts = this.headerOptions;
			var labels = locale.getProductLabels();
			opts.labelBrand = labels.brand;
			opts.labelProduct = labels.product;
			// Controller that handle action - different from current page for vignettes
			var actionController = this.getActionController();
			// Controller that displays the footer
			var displayController = this.controller;
			var contentHtml;
			if (deviceType === "smartphone") {
				contentHtml = this._smartPhoneHtml(opts, displayController, actionController);
				// 'Lisft of draft' menu is managed by left panel
				notifications.unsubscribe(this, "sm.drafts.changed");
			} else {
				contentHtml = this._tabletHtml(opts, displayController, actionController);
				// 'Lisft of draft' menu is managed by this control (user menu)
				notifications.subscribe(this, "sm.drafts.changed");
			}
			if (this.$$header) this.$$header.remove();
			this.$$header = $(_getHtml(null, "main", {
				contentHtml: contentHtml,
				deviceType: deviceType
			}));
			if (native && native.isTestMode()) {
				native.appendHeaderTestCmds(this.$$header.find(".s-m-header-nav"));
			}
			this.$$header.appendTo(this.$$elmt);
			var freshWasVisible = false;
			if (this._$$freshness) {
				// When we switch from tablet to smartphone we've to preserve the status of _$$freshness 
				freshWasVisible = this._$$freshness.is(":visible");
				this._$$freshness.remove();
			}
			if (this.options.freshness !== false) {
				this._$$freshness = $(_getHtml(null, "freshness", {
					ctrlId: this.id
				})).appendTo(this.$$elmt).toggle(freshWasVisible);
			}
			// Check if dao dirty to update save satus
			ctrlHelpers.checkLinkInitStatus(this);
			this._updateWidth();
		},
		/**
		 * Controller that handles actions
		 * For actions in dashboard this controller is the page nested in the vignette
		 * Can be overridden
		 */
		getActionController: function() {
			return this.controller;
		},

		/**
		 * Returns HTML for tablet
		 */
		_tabletHtml: function() {
			var self = this;
			var lknCtx = {
				dropdownId: utils.UUID(),
				links: []
			};
			var opts = self.headerOptions;
			var linksCpt = 0;
			for (var p in _linksCtx) {
				if (opts[p] === true) {
					var l = _linksCtx[p];
					l.items.forEach(function(x, idx) {
						x = $.extend({}, x);
						x.label = locale.text(x.label);
						x.ctrlId = self.id;
						x.icon = fontUtils.pageIcon(x.icon);
						if (idx === 0 && lknCtx.links.length > 1) x.divider = l.divider;
						lknCtx.links.push(x);
					});
				}
			}
			// showBack force show back
			var _mainCtx = {
				showBack: (_mustHideSoftwareBackButton() === false) ? (opts.showHome || opts.showBack === true) : false,
				showHome: opts.showHome,
				showBrand: self.controller.state.isWelcomePage,
				labelBrand: opts.labelBrand || "Sage",
				labelProduct: opts.labelProduct || "ERP X3",
				headerLabel: self.getProtoTitle(),
				ctrlId: self.id
			};
			var htmlUserInfo = _getHtml("tablet", "userInfo", {
				username: globals.getUserName(),
				userrole: globals.getUserRole()
			});
			if (lknCtx.links.length === 0) {
				_mainCtx.userContent = _getHtml("tablet", "infoOnly", {
					userInfo: htmlUserInfo
				});
			} else {
				_mainCtx.userContent = _getHtml("tablet", "dropDown", {
					userInfo: htmlUserInfo,
					dropDownMenu: _getHtml("tablet", "dropDownMenu", lknCtx)
				});
				/** Force overflow visible on s-m-control to display the dropDownMenu**/
				self.$$elmt.css({
					overflow: "visible"
				});
			}
			return _getHtml("tablet", "main", _mainCtx);
		},
		/**
		 * Returns HTML for smartphone
		 */
		_smartPhoneHtml: function(opts, displayController, actionController) {
			var self = this;
			this.resetSmartphonePanels();
			if (opts.showUserpanel) {
				// actionController that handles actions
				self._smphUserpanel = actionController.panelCreate(_userPanelId, opts);
			}
			var showActions = opts.showActions !== false;
			if (showActions && opts.showActionpanel) {
				// actionController that handles actions
				self._smphPageactionpanel = actionController.panelCreate(_actionPanelId, opts);
			}
			var labelContent = "";
			var linksContent = "";
			// build label content. 
			labelContent = self._getLabelContent(opts);
			// build links content.
			var hasPanelLinks = self._smphPageactionpanel && self._smphPageactionpanel.hasLinks();
			linksContent = self._getSmartphoneLinksContent(displayController, actionController, hasPanelLinks, showActions);
			var ctx = {
				labelContent: labelContent,
				linksContent: linksContent,
				panelId: _userPanelId,
				ctrlId: self.id,
				showUserpanel: opts.showUserpanel === true
			};
			return _getHtml("smartphone", "main", ctx);
		},
		/**
		 *	/!\ SMARTPHONE ONLY
		 *	Returns header label content which depends on the current page.
		 *	Label depends whether user is located in home page, app dashboard page, inside an app, or anywhere else
		 */
		_getLabelContent: function(opts) {
			var self = this;
			var labelContent;

			function getContent(isLabelDom, labelVal, opts) {
				if (isLabelDom) {
					return _getHtml("smartphone", "labelDom", {
						label: labelVal
					});
				}
				// brand name
				else {
					return _getHtml("smartphone", "brandDom", {
						labelBrand: opts.labelBrand || "Sage",
						labelProduct: opts.labelProduct || "ERP X3",
					});
				}
			}

			// home page --> brand name
			if (this.controller.state.isWelcomePage) {
				labelContent = getContent(false, null, opts);
			} else {
				// app dashboard page --> app title
				labelContent = getContent(true, self.getProtoTitle());
				if (!labelContent) {
					// other cases (for example html static page)
					labelContent = getContent(false, null, opts);
				}
			}
			return labelContent;
		},
		getProtoTitle: function() {
			return this.controller.prototype.data("$title");
		},
		/**
		 *	/!\ SMARTPHONE ONLY
		 *	Returns header links content which depends on the current page.
		 *	- No link on welcome page and application dashboard
		 *	- On query page, links will be "create" and an anchor to open the actions panel (on the right)
		 *	- On detail page, links will be "edit" and an anchor to open the actions panel (on the right)
		 *	- On edit page, links will be "save", "cancel" and an anchor to open the actions panel (on the right)
		 *	Some actions will be displayed in the footer
		 */
		_getSmartphoneLinksContent: function(displayController, actionController, hasPanelLinks, showActions) {
			var self = this;
			var linksContent = "";
			self._multiSelManager = multiSelectionMgr.create(actionController, ".s-m-header-nav, .s-m-header-labels, a:not(.s-m-ismultisel)");
			notifications.subscribe(self, ["sm.panel.multiselection.toggle"]);
			self._actionManager = actionManager.create(actionController, "header", {
				addCancelEditAction: "headerLink",
				addShowTemplatesAction: "headerLink",
				addMultiSelection: self._multiSelManager && !self.headerOptions.multiSelectionOnly && actionController.isMultiSelectionEnabled(),
				multiSelectionOnly: self.headerOptions.multiSelectionOnly
			});
			var linksArr = self._actionManager.getLinks();
			var cc = [];
			if (hasPanelLinks) {
				cc.push(_getHtml("smartphone", "actionPanelToggle", {
					panelId: _actionPanelId,
					ctrlId: self.id
				}));
			}
			if (showActions && linksArr && linksArr.length > 0) {
				linksArr.forEach(function(ll, idx) {
					cc.push(_getHtml("smartphone", "actionLink", $.extend(ll, {
						ctrlId: self.id,
						$isHidden: ll.action === globals.ACTMULTISEL || ll.$isHidden === true
					})));
					ctrlHelpers.checkLinkSubscriptions(self, ll);
				});
			}
			linksContent = cc.join("");
			return linksContent;
		},
		_actHeaderLink: function(uuid) {
			this._actionManager.triggerLink(uuid, this.getActionController()).then(function(success, link, data, options) {
				// Message is displayed 
			}).fail(function(e) {
				if (jsutils.isError(e)) {
					// We shouldn't expect an error except exceptions
					globals.getModal().error("Header action error (smartphone)", e);
				}
			});
		},
		_actHeaderAction: function(id) {
			var panel = id === _actionPanelId ? this._smphPageactionpanel : this._smphUserpanel;
			var side = id === _actionPanelId ? "right" : "left";
			this.controller.panelAttach(side, panel, "toggle");
		},
		_actLinkClicked: function(actionName) { /* triggering action */
			eventListener.triggerAction(this.$$elmt, actionName);
		},

		notifPanelMultiselectionToggle: function(uuid, $$target) {
			this.toggleMultiSelection();
		},

		toggleMultiSelection: function() {
			this._actMultiSelection();
		},

		_actMultiSelection: function(uuid, $$target) {
			var $$hLinks = this.$$elmt.find(".s-m-header-links");
			var enabled = this._multiSelManager.toggle(this, $$hLinks, "dropdown", "left");
			$$hLinks.width(enabled ? "100%" : "initial");
			this.$$elmt.find(".s-m-header-nav, .s-m-header-labels, a:not(.s-m-ismultisel)").toggle(!enabled);
			this.$$elmt.find('[data-action="' + globals.ACTMULTISEL + '"]').toggle(enabled);
			this._updateWidth();
		},

		/**
		 * Page footer can be changed
		 * This method is called each time the header is toggled
		 */
		notifToggled: function(shown) {
			if (shown === false) {
				if (this._multiSelManager) {
					this._multiSelManager.disable();
				}
				this._updateWidth();
				return;
			}
			this._updateWidth();
		},
		notifDataFreshnessChange: function(data) {
			this._dataFreshness = this._dataFreshness || {
				oldest: data.dateTime,
				recent: 0
			};
			/**
			 * Solve the case of vignette in dashboard - select the oldes data
			 */
			this._dataFreshness.oldest = Math.min(this._dataFreshness.oldest, data.dateTime);
			this._dataFreshness.recent = Math.max(this._dataFreshness.recent, data.dateTime);
			if (!this._$$freshness) return;
			var diffDays = Math.round((new Date().getTime() - this._dataFreshness.oldest) / (24 * 60 * 60 * 1000));
			var freshness = "verytainted";
			if (diffDays <= 7) freshness = "tainted";
			if (diffDays <= 1) freshness = "fresh";
			this._dataFreshness.value = freshness;
			this._$$freshness.removeClass("s-m-fresh s-m-tainted s-m-verytainted");
			this._$$freshness.addClass("s-m-" + freshness);
			this._$$freshness.show();
		},
		/**
		 * Displays freshness info
		 */
		_actShowFreshness: function() {
			if (!this._dataFreshness) return;
			var formatter = formatApi.getFormatter("application/x-datetime");
			var dateTime = formatter.formatValue(utils.getCurISODateTime(new Date(this._dataFreshness.oldest)), false);
			var notify = {
				severityClass: this._dataFreshness.value,
				title: locale.text("page.data.freshness.last") + " : " + dateTime,
				body: locale.text("page.data.freshness." + this._dataFreshness.value),
				onlyWebapp: true
			};
			globals.getModal().notify(notify);
		},
		/**
		 * Detach from document
		 */
		detach: function() {
			this.notifToggled(false);
			if (this.$$elmt) {
				this.$$elmt.detach();
			}
		},
		/**
		 * Manage the count info in 'List of draft' menu
		 */
		notifDraftsChanged: function(count) {
			ctrlHelpers.notifDraftsChanged(this, count);
		},
		/**
		 * Toggle $save status
		 */
		notifDaoDirty: function(isDirty, uuid) {
			ctrlHelpers.notifDaoDirty(this, isDirty, uuid);
		},
		/**
		 * Toggle $$showTemplates status
		 */
		notifEditTemplatesChanged: function(fromActionMgrUUID, count) {
			// Event is triggered by templaetPanel for all suscribers but only one can handle it
			// -> The one thas contains the actionManager taht trigered the link 
			if (!this._actionManager || this._actionManager.uuid != fromActionMgrUUID) return;
			ctrlHelpers.notifEditTemplatesChanged(this, count);
		}
	});

exports.Klass = _Klass;