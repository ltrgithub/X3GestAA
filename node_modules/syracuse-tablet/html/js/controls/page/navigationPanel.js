"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/ctrlSidePanel').Klass;
var settings = require('syracuse-tablet/html/js/application/settings');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

var _templates = {
	navigLink: '<li class=""><a href="#" data-action="switchApp" data-params="{{appName}}" data-control-id="{{ctrlId}}"><i class="{{icon}}"></i>&nbsp;<span>{{title}}</span></a></li>'
};


var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

var _fail = function(e) {
	utils.modalError("Error loading applications", e);
};

/**
 * Regular page left panel
 */
var _Klass = utils.defineClass(

	function(controller, $type, options) {
		var self = this;
		self._$$wait = null;
		Base.call(self, controller, $type, "left", options);
		self.appCount = 0;
	}, Base, {

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			uiUtils.waitPluginDestroy(self._$$wait);
			self._$$wait = null;
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			var curApp = globals.getApplication(),
				title;
			try {
				var actionsHtml = [];
				globals.forEachApplicationJson(function(name, appInfo) {
					if (curApp.uuid != appInfo.$uuid) {
						actionsHtml.push(_getHtml("navigLink", {
							title: appInfo.title || appInfo.description || appInfo.applicationName,
							icon: (appInfo.iconName && fontUtils.getIconByName(appInfo.iconName)) || fontUtils.getIconByName("briefcase"),
							appName: appInfo.applicationName,
							ctrlId: self.id
						}));
						self.appCount++;
					} else {
						title = appInfo.title || appInfo.applicationName;
					}
				});
				var context = {
					title: title || "Navigation",
					actionsHtml: actionsHtml.join('')
				};
				Base.prototype.buildHtml.call(self, $$parent, context);
			} catch (e) {
				_fail(e);
			}
		},

		afterRender: function() {
			this.publishReady();
		},

		_actSwitchApp: function(appName) {
			var self = this;
			notifications.publish("sm.switch.app", appName);
		}
	});

exports.Klass = _Klass;