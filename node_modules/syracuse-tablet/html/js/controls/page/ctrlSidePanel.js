"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var HammerScroller = require('syracuse-tablet/html/js/controls/hammerScroller').Klass;
var uiRect = require('syracuse-tablet/html/js/ui/rect');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var ActionManager = require('syracuse-tablet/html/js/controls/page/actionManager').Klass;

var _templates = {
	main: '\
			<nav class="navbar s-m-side-panel {{side}} navbar-inverse ctrl-evt-click" role="navigation">\
				<div class="s-m-scroll-elmt">\
				{{#if facetlink}}\
					<div class="container-fluid">\
						<div class="navbar-header">\
							<span class="navbar-brand" href="#"><span>{{linksHeaderTitle}}</span></a>\
						</div>\
					</div>\
					<ul class="nav navbar-nav">\
						{{{facetLinksHtml}}}\
					</ul>\
				{{/if}}\
				<div class="container-fluid">\
					<div class="navbar-header">\
						<span class="navbar-brand" href="#"><span>{{title}}</span></a>\
					</div>\
				</div>\
					<ul class="nav navbar-nav">\
						{{{actionsHtml}}}\
					</ul>\
					{{#if resize}}\
						<div class="s-m-side-panel-options">\
							<a draggable="false"  href="#" data-action="resize" data-control-id="{{ctrlId}}"><i class="fa fa-2x fa-bars"></i></a>\
						</div>\
					{{/if}}\
				</div>\
			</nav>',
	facetLinks: '\
		{{#each links}}\
			<li>\
		 		{{#if $isAction}} \
					<a draggable="false" href="#" class="{{css}}" data-action="actionLink" data-params="{{$uuid}}" data-control-id="{{../../ctrlId}}">\
						<i style="font-size: large" class="{{icon}}"/>\
						<span>{{title}}</span>\
					</a>\
				{{else}} \
					<a draggable="false" href="#" class="{{css}}" data-nav="{{page}}" data-params="{{$uuid}}" data-sdata-parameters="{{parameters}}" data-control-id="{{../ctrlId}}">\
						<i style="font-size: large" class="{{icon}}"/>\
						<span>{{title}}</span>\
					</a>\
				{{/if}} \
			</li>\
		{{/each}}'
};
/**
 * Base left/right panel control for dashBoards and regular pages
 * 	Adapted from Metro Bootstrap navbar-side
 */
var _Klass = utils.defineClass(

	function(controller, $type, side, options) {
		if (["left", "right"].indexOf(side) < 0) throw new Error("side panel - Unexpected side");
		this.side = side;
		this.enableGesture = options && options.enableGesture;
		Base.call(this, controller, {
			$bind: side + "panel"
		}, prototype.create({
			$type: $type
		}), options);
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this._gestureMgr) {
				this._gestureMgr.destroy();
				this._gestureMgr = null;
			}
		},
		/**
		 * Just build the root elemt - see buildAfterMainResize
		 */
		buildHtml: function($$parent, controllerDao, buildOptions) {
			this.buildOptions = buildOptions.sidePanel || {};
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, [this.typeName]);
			this.$$elmt.hide();
		},

		applyMetaData: function(metaData) {
			//  No meta for this control 
			return;
		},

		/**
		 * Build the html here when we know the orientation and deviceClass
		 */
		onMainPageResize: function(pageInfo, orientation, deviceClass) {
			var context = {
				ctrlId: this.id,
				side: this.side
			};
			if (this.$$panel) {
				this.$$panel.remove();
			}
			if (this._gestureMgr) {
				this._gestureMgr.destroy();
				this._gestureMgr = null;
			}
			this.buildAfterMainResize(context, pageInfo, orientation, deviceClass);
		},
		buildAfterMainResize: function(context, pageInfo, orientation, deviceClass) {
			var self = this;

			// append facet links if any
			var deviceType = globals.getSiteLayout().getDeviceType(deviceClass);
			var facetLinks = self.controller.prototype.getLinks(this.getDao(), "actionpanelparent", {
				deviceType: deviceType
			});
			if (facetLinks && Object.keys(facetLinks).length > 0) {
				var actMgr = new ActionManager({
					$links: facetLinks,
					noMessage: false
				});
				context.facetlink = true;
				context.linksHeaderTitle = locale.text("actionpanel.label.links");
				context.facetLinksHtml = Handlebars.compile(_templates.facetLinks)({
					links: actMgr.getLinks()
				});
			}

			this.$$panel = $(Handlebars.compile(_templates.main)(context));
			this.$$panel.appendTo(this.$$elmt);
		},

		/**
		 * Reduce/Enlarge the size of the panel
		 * Notify the page (sidePanel) with resize side,action
		 * 		sidePanelToggle is also called by footer with toggle action to show/hide the panel
		 * The page call the toggle action below to get the width and shift the panel
		 */
		_actResize: function() {
			this.$$panel.toggleClass('closed');
			eventListener.triggerAction(this.$$elmt, "sidePanel", "resize," + this.side);
		},

		/**
		 * Notify the page that the panel is loaded to show/hide the action in footer
		 */
		publishReady: function() {
			var self = this;
			setTimeout(function() {
				notifications.publish("sm.side.panel.ready", self.$type);
			}, 10);
		},

		/**
		 * Toggle the panel
		 * 	action: toggle(click button footer), close(click dismiss) or resize (click resize icon inside the panel)
		 * 	callBack: shift the content for left panel
		 * 	This action is called by footer action and also by toggle data-action
		 */
		toggle: function(action, callBack) {
			// TODO - Do not call toggle if panel has not initialized - see test dashboards
			if (!this.$$elmt || !this.$$panel) return;
			var width = this.$$panel.width();
			// close -> Force hide - resize -> stay visible - toggle -> toggle
			this.$$elmt.toggle(action === "close" ? false : action === "resize" ? true : action === "toggle" ? undefined : undefined);
			if (this.enableGesture) {
				this.updateGesture();
			}
			var newWidth = this.$$elmt.is(':visible') === true ? width : 0;
			if (callBack) {
				callBack(newWidth);
			}
			// Dismiss 
			var dismiss = this.controller.$$elmt.children(".s-m-side-panel-dismiss");
			dismiss[newWidth > 0 ? "addClass" : "removeClass"](this.side);
			dismiss.css(this.side, newWidth);
		},
		updateGesture: function() {
			if (this.$$elmt.is(':visible')) {
				if (!this._gestureMgr) {
					this.$$scrollElmt = this.$$panel.find(".s-m-scroll-elmt");
					this.$$scrollElmt.css({
						height: "auto",
						position: "relative"
					});
					this.$$scrollWrapper = this.$$panel;
					this._gestureMgr = new HammerScroller(this.$$scrollElmt, {
						direction: "v",
						valMax: 0,
						name: this.$bind,
						isPageScroller: false
					});
				}
				var scrollRect = uiRect.elmtRect(this.$$scrollElmt, "outer");
				var wrapperRect = uiRect.elmtRect(this.$$scrollWrapper, "outer");
				var viewRect = wrapperRect.intersectRect(scrollRect);
				if (viewRect && !viewRect.contains(scrollRect)) {
					this._gestureMgr.init(viewRect);
				} else {
					this._gestureMgr.reset();
				}
			} else if (this._gestureMgr) {
				this._gestureMgr.reset();
			}
		},
		onClick: function(evt) {
			this.close();
		},
		// Trigger evt to let page manage the close and all additional actions
		close: function() {
			eventListener.triggerAction(this.$$elmt, "sidePanel", "close," + this.side);
		}
	});

exports.Klass = _Klass;