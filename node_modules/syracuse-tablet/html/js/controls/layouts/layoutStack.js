"use strict";

var Base = require('syracuse-tablet/html/js/controls/layouts/layoutBase').LayoutBase;

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/app/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

/**
 * cssOptions
 * 		cssLayout, cssCell: class added to default ones
 * default classes can  be overridden
 */
exports.LayoutStack = utils.defineClass(
	function LayoutStack(controller, type, article, opts) {
		var self = this;
		Base.call(self, controller, type, article, opts);
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this.$$btnCollapse) {
				this.$$btnCollapse.off();
				this.$$btnCollapse = null;
			}
		},

		///
		/// START: Rendering
		///

		buildHtml: function() {
			var self = this;
			Base.prototype.buildHtml.call(self);

			self.$$elmt.addClass("s-m-stack");
			if (this.options.makeFullHeight === true) {
				self.$$elmt.height("100%");
			}
			var css = [];
			var level = this.$$container.parents(".s-m-stack").length;
			if (level) {
				var $theme = (self.article && self.article.$theme) || String.fromCharCode(96 + Math.min(level, 3));
				css.push("s-m-theme-" + $theme);
			}
			this.isAdvanced = ($theme === "advanced");

			var $collapsible = (self.article && self.article.$collapsible) || "notcollapsible";
			var $title = (this.getArticleText("$title") || "").trim();
			if ($collapsible !== "notcollapsible") {
				css.push("s-m-collapsible");
			}
			if ($title.length) {
				css.push("s-m-title");
			}
			if (css.length) {
				self.$$elmt.addClass(css.join(" "));
			}
			if ($collapsible !== "notcollapsible" || $title.length > 0) {
				self._addHeader($collapsible, $title);
			}
			self.$$content = $("<content>");
			self._setStackColorClass();
			self.$$elmt.append(self.$$content);

			self.buildChildrenHtml();
			self._updateCollapseState();
		},
		_setStackColorClass: function() {
			var self = this;
			var color = self.article.$bgColor;
			if (color) {
				self.$$content.addClass("s-m-bg s-m-color-" + color);
			}
		},
		buildTitle: function() {
			// When there is a $title attribute in the article,
			// layoutBase will create the title for all child classes
			// Since a stack layout generates a "special" title which allows collapsing, we override
			// the function here to not get two titles
		},

		_addHeader: function(state, title) {
			var self = this;
			self.$$header = $('<header>') //.text(title);
			if (state !== "notcollapsible") {
				/* We don't use data-action because collapse button must work in authoring mode - data-action click handler is overridden by select authoring handler */
				self.$$btnCollapse = $('<btn class="' + state + ' ' + fontUtils.layoutExpandCollapseIcon(state === "collapsed", this.isAdvanced) + '">').appendTo(self.$$header);
				self.$$header.on("click", jsutils.bindFn(this._actCollapse, this));
			}
			var $$title = $('<div class="s-m-title">');
			$$title.append(title);
			self.$$elmt.append(self.$$header);
			self.$$header.append($$title);
		},
		getChild$$Container: function() {
			return this.$$content;
		},

		///
		/// END: Rendering
		///

		_actCollapse: function(events, setCollapse) {
			// Propagate to authoring for selection
			if (events && !globals.isAuthoringActive()) {
				events.stopPropagation();
			}
			if (!this.$$btnCollapse) return;
			if (setCollapse === true) {
				this.$$btnCollapse.removeClass("expanded " + fontUtils.layoutExpandCollapseIcon(setCollapse, this.isAdvanced)).addClass("collapsed " + fontUtils.layoutExpandCollapseIcon(!setCollapse, this.isAdvanced));
			} else if (setCollapse === false) {
				this.$$btnCollapse.removeClass("collapsed " + fontUtils.layoutExpandCollapseIcon(!setCollapse, this.isAdvanced)).addClass("expanded " + fontUtils.layoutExpandCollapseIcon(setCollapse, this.isAdvanced));
			} else {
				this.$$btnCollapse.toggleClass("collapsed " + fontUtils.layoutExpandCollapseIcon(setCollapse, this.isAdvanced)).toggleClass("expanded " + fontUtils.layoutExpandCollapseIcon(!setCollapse, this.isAdvanced));
			}
			this._updateCollapseState();
			if (!this.$$btnCollapse.hasClass("collapsed")) {
				/**
				 * We need to notify elements like array to refresh them - They are not displayed if !.is(":visible")
				 */
				notifications.publish("sm.layout.expanded");
			}
			/**
			 * We need to update the scroller because height has changed
			 */
			this.page.notifyScrollerUpdate();
		},

		_updateCollapseState: function() {
			var self = this;
			if (!self.$$btnCollapse || !self.$$content) {
				return;
			}
			var collapse = self.$$btnCollapse.hasClass("expanded");
			self.$$content.toggle(collapse);
		},

		getAuthState: function(dirtyKeys) {
			var self = this;
			// If collapsed state has been changed, we do not store that state
			if (dirtyKeys.$collapsible) {
				return null;
			}
			return {
				collapsed: self.$$btnCollapse ? self.$$btnCollapse.hasClass("collapsed") : false
			};
		},

		setAuthState: function(state) {
			if (state && state.collapsed != null) {
				this._actCollapse(null, state.collapsed);
			}
		}
	});