"use strict";

var Base = require('syracuse-tablet/html/js/controls/layouts/layoutBase').LayoutBase;
var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/app/globals');
var uiSettings = require('syracuse-tablet/html/js/ui/uiSettings');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var modules = require('syracuse-tablet/html/js/common/modules');

var _validSizes = ["small", "medium", "wide", "large", "full", "all"];

/**
 * Layout node that can only be used inside layoutHub parent nodes
 * Renders a group of tiles using the available space from top to bottom and then wraps to the right
 * Child elements bound to this layout may set "$size" attribute to define their size:
 * - small		- four tiles will fit into one group from left to right
 * - medium		- two tiles fit into one group from left to right, also double height of "small"
 * - wide		- one tile fits into one group from left to right, same height as "medium"
 * - large		- same width as "wide" and double height of "wide"/"medium"
 * - full		- same width as "wide", uses one full column (rounded to tile size medium)
 */
exports.LayoutHubGroup = utils.defineClass(
	function LayoutHubGroup(controller, type, article, opts) {
		var self = this;
		Base.call(self, controller, type, article, opts);
		self._settings = uiSettings.getProp("hubGroup");
		self.isEditable = self._getCapability("edit");
		self.isDeletable = self._getCapability("delete");
		self.isDraggable = self._getCapability("draggable");
	}, Base, {
		/**
		 * Build full html structed but do not yet apply position and size attributes (Will be done in a later step or on resize)
		 */
		buildHtml: function() {
			var self = this;
			Base.prototype.buildHtml.call(self);
			self.$$elmt.addClass("s-m-hub-group");
			self.$$separator = $(uiUtils.createDomElement("div", null, null, null, self.$$elmt));
			self.$$separator.addClass("s-m-hub-group-separator");
			self._buildCellStructure();
		},

		buildTitle: function() {
			var self = this;
			if (self.options.groupActions == null) {
				Base.prototype.buildTitle.call(self);
			} else {
				self.buildTitleActions();
			}
		},

		buildTitleActions: function() {
			var self = this;

			this._ensureHeader();
			this.$$input = $("<input data-nevent data-nevent-ctrl-change>");
			this.$$input.val(this.getArticleText("$title"));
			this.$$header.append(this.$$input);
			this.$$header.addClass("edit");
			var $$actions = $('<div class="s-m-group-actions">');
			this.$$header.append($$actions);
			self.options.groupActions.forEach(function(action) {
				var actionAttrs = action.disabled === true ? "" : ('" data-nevent data-naction="' + action.action + '" data-params="' + self.id + '"');
				var className = action.className + (action.disabled === true ? " disabled" : "");
				var $$btn = $('<btn class="cfg ' + action.icon + ' ' + className + '" ' + actionAttrs + '></btn>');
				$$actions.append($$btn);
			});
		},
		onChange: function() {
			var title = this.$$input.val();
			if (this.getArticleText("$title") !== title) {
				var uuid = this.getArticleTextUUID("$title") || utils.UUID();
				this.article.$title = '{@' + uuid + '}';
				this.page && this.page.onGroupTitleChanged && this.page.onGroupTitleChanged(this, uuid, title);
			}
		},
		_buildCellStructure: function() {
			var self = this;
			self.cells = [];
			var cell = null;
			var notLinksCpt = 0;
			var index = 0
			if (self.children) {
				self.children.forEach(function(layout) {
					if (layout.isLinkVignette == null || layout.isLinkVignette() !== true) {
						notLinksCpt++;
					}
					var size = (layout.article && layout.article.$size) || "medium";
					if (_validSizes.indexOf(size) < 0) {
						size = _validSizes[1];
						layout.article = layout.article || {};
						layout.article.$size = size;
					}
					if (!cell) {
						cell = self._createCell(size);
						cell.domItem = uiUtils.createDomElement("div", null, null, null, self.$$elmt);
						self.cells.push(cell);
					}
					if (size === "small") {
						layout.set$$container($(cell.domItem));
						layout.buildHtml();
						cell.children.push(layout);
						if (cell.children.length === 4) {
							cell = null;
						}
					} else {
						if (cell.children.length > 0) {
							cell = self._createCell(size);
							cell.domItem = uiUtils.createDomElement("div", null, null, null, self.$$elmt);
							self.cells.push(cell);
						}
						layout.set$$container($(cell.domItem));
						layout.buildHtml();
						cell.children.push(layout);
						cell = null;
					}
					index++;
				});
			} else {
				self.$$elmt.addClass("empty"); //empty group
			}
			if (self.options.showAddTiles) {
				var cell = self._createCell("medium");
				var opts = {
					icon: fontUtils.dashboardIcon("addHiddenTile"),
					title: locale.text("welcome.dashboard.add.hiddenTile"),
					action: 'addHiddenTile',
					css: 's-m-tile-action s-m-color-tile-action medium',
					params: self.id,
				};
				self._addActionTile(cell, opts);
				self.cells.push(cell);
			}
			// True if the group contains only links
			self._linksOnly = notLinksCpt === 0;
		},
		_addActionTile: function(cell, opts) {
			var self = this;
			var optsAction = {
				"data-nevent": "",
				"data-naction": opts.action,
				"data-params": opts.params,
			};
			cell.domItem = uiUtils.createDomElement("div", null, null, optsAction, self.$$elmt);
			var addTile = uiUtils.createDomElement("div", opts.css, null, null, cell.domItem);
			$(addTile).append('<section class="s-m-icon"><div><div class="s-m-sage-app-icon ' + opts.icon + '"></div></div></section>');
			$(addTile).append('<section class="s-m-title"><div>' + opts.title + '</div></section>')
		},
		_createCell: function(size) {
			var self = this;
			size = (size === "small" ? "medium" : size);
			var cell = {
				size: size,
				children: []
			};
			return cell;
		},

		/*
		 * Options set by layoutHub with sizes
		 */
		computeLayout: function(context, options) {
			this.calculateLayout(options);
			Base.prototype.computeLayout.call(this, context);
		},

		calculateLayout: function(options) {
			var self = this;
			var size, index = 0;
			var scale = modules.get("siteLayout").getTransformScale();
			self._headerSpace = self.$$header ? self.$$header.height() / scale : 0;
			self._width = 0;
			self._height = 0;

			self.hubGroupOptions = options || self.hubGroupOptions;
			self.$$elmt.removeClass("s-m-hub-group-v s-m-hub-group-h")
			self.$$elmt.addClass("s-m-hub-group-" + self.hubGroupOptions.scrollDirection)
			if (self.hubGroupOptions.scrollDirection === "h") {
				self._calculateLayoutHorizontal();
			} else {
				self._calculateLayoutVertical();
			}
			// in case of empty group
			self._width = (4 * self.hubGroupOptions.baseSize + 6)
			self._height = 2 * self.hubGroupOptions.baseSize

			self.cells.forEach(function(cell) {
				size = cell.size;
				cell.domItem.style.left = cell.x + "px";
				cell.domItem.style.top = (cell.y + self._headerSpace) + "px";
				cell.domItem.style.width = (self._sizes[size].width + 2) + "px";
				cell.domItem.style.height = (self._sizes[size].height + 2) + "px";
				cell.domItem.style.position = "absolute";

				$(cell.domItem).attr("data-cellIndex", index);
				$(cell.domItem).attr("coord", cell.abs + "," + cell.ord);
				$(cell.domItem).attr("silo", cell.silo);
				$(cell.domItem).attr("size", cell.size);
				if (cell.x + self._sizes[size].width > self._width) {
					self._width = cell.x + self._sizes[size].width;
				}
				if (cell.y + self._sizes[size].height > self._height) {
					self._height = cell.y + self._sizes[size].height;
				}

				/* Keep this to debug
				cell.domItem.style.border = "1px dotted red";
				var contentInfo=cell.size.substr(0,3) + " i:"+index + " x:" +cell.abs + " y:" + cell.ord + " s:"+cell.silo
				var info = uiUtils.createDomElement("div", null, contentInfo, null, cell.domItem);
				info.style.position = "absolute";
				info.style.border = "1px dotted red";
				info.style.left = "2px";
				info.style.top ="2px";
				info.style.width ="97%"
				info.style.backgroundColor ="white";
				info.style.zIndex ="1000";
				info.style.overFlow ="hidden";
				*/
				var x = 0;
				var y = 0;
				cell.children.forEach(function(tileLayout) {
					size = tileLayout.getAuthoringSize();
					tileLayout.calculateLayout(x, y, size, self._sizes[size]);
					if (x !== 0) {
						x = 0;
						y += self._sizes[size].height + self.hubGroupOptions.padY;
					} else {
						x += self._sizes[size].width + self.hubGroupOptions.padX;
					}
				});
				index++;
			});

			var style = self.$$elmt.get(0).style;

			if (self.hubGroupOptions.scrollDirection === "h") {
				if (self.cells.length < 1 && globals.isAuthoringActive()) {
					self._width = self.hubGroupOptions.maxGroupWidth;
				}
				style.top = "0px";
				style.left = self.hubGroupOptions.posX + "px";
				style.width = 6 + self._width + "px";
				style.height = (self.hubGroupOptions.maxHeight - 6) + "px";
			} else {
				if (self.cells.length < 1 && globals.isAuthoringActive()) {
					self._height = self.hubGroupOptions.baseSize;
				}
				style.top = self.hubGroupOptions.posY + "px";
				style.left = "0px";
				self._width = self.hubGroupOptions.maxGroupWidth //self._width;
				style.width = self.hubGroupOptions.maxGroupWidth + "px" //self._width + "px";
				self._height += self._headerSpace + self._settings.portraitPadY;
				style.height = self._height + "px";
				if (self.cells.length < 1 && globals.isAuthoringActive()) {

				}
			}
		},

		/**
		 * Calc tile positions in horizontal scrolling model
		 */
		_calculateLayoutHorizontal: function() {
			var self = this;
			var padSilo = 0;
			// Asume default base size
			self.hubGroupOptions.baseSize = self._settings.landscapeBaseSize;
			self.hubGroupOptions.padX = self._settings.landscapePadX;
			self.hubGroupOptions.padY = self._settings.landscapePadY;
			self.hubGroupOptions.maxGroupHeight = self.hubGroupOptions.maxHeight - self._headerSpace; //- 6;

			// How many tiles fit vertically?
			var maxTiles = self.hubGroupOptions.maxGroupHeight / (self.hubGroupOptions.baseSize + self.hubGroupOptions.padY);
			var remainPixels = self.hubGroupOptions.maxGroupHeight - Math.floor(maxTiles) * (self.hubGroupOptions.baseSize + self.hubGroupOptions.padY);
			var remainPerTile = Math.floor(remainPixels / maxTiles);
			var paddingPerTile = Math.floor(remainPixels / maxTiles / 2);
			self.hubGroupOptions.baseSize += remainPerTile;
			self.hubGroupOptions.paddingPerTile = paddingPerTile;

			self.hubGroupOptions.maxGroupWidth = 4 * self.hubGroupOptions.baseSize + 3 * self.hubGroupOptions.padX;

			self.hubGroupOptions.maxFullTileHeight = self.hubGroupOptions.maxGroupHeight - self.hubGroupOptions.padY; //Math.floor((self.hubGroupOptions.maxGroupHeight + self.hubGroupOptions.padY) / (self.hubGroupOptions.baseSize + self.hubGroupOptions.padY) / 2) * (self.hubGroupOptions.baseSize + self.hubGroupOptions.padY) * 2 - self.hubGroupOptions.padY;
			self.hubGroupOptions.maxAllTileHeight = self.hubGroupOptions.maxFullTileHeight;
			self.hubGroupOptions.maxAllTileWidth = self.hubGroupOptions.maxWidth; //Math.floor((self.hubGroupOptions.maxWidth + self.hubGroupOptions.padX) / (self.hubGroupOptions.baseSize + self.hubGroupOptions.padX) / 2) * (self.hubGroupOptions.baseSize + self.hubGroupOptions.padX) * 2 - self.hubGroupOptions.padX;

			self._sizes = {
				small: {
					width: self.hubGroupOptions.baseSize,
					height: self.hubGroupOptions.baseSize,
					paddingX: self.hubGroupOptions.paddingPerTile,
					paddingY: self.hubGroupOptions.paddingPerTile
				},
				medium: {
					width: self.hubGroupOptions.baseSize * 2 + self.hubGroupOptions.padX,
					height: self.hubGroupOptions.baseSize * 2 + self.hubGroupOptions.padY,
					paddingX: self.hubGroupOptions.paddingPerTile, // * 2,
					paddingY: self.hubGroupOptions.paddingPerTile, // * 2,
				},
				wide: {
					width: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padX * 3,
					height: self.hubGroupOptions.baseSize * 2 + self.hubGroupOptions.padY,
					paddingX: self.hubGroupOptions.paddingPerTile, // * 4,
					paddingY: self.hubGroupOptions.paddingPerTile, // * 2,
				},
				large: {
					width: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padX * 3,
					height: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padY * 3,
					paddingX: self.hubGroupOptions.paddingPerTile, // * 4,
					paddingY: self.hubGroupOptions.paddingPerTile, // * 4,
				},
				full: {
					width: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padX * 3,
					height: self.hubGroupOptions.maxFullTileHeight,
					paddingX: self.hubGroupOptions.paddingPerTile, // * 4,
					paddingY: self.hubGroupOptions.paddingPerTile,
				},
				all: {
					height: self.hubGroupOptions.maxAllTileHeight,
					width: self.hubGroupOptions.maxAllTileWidth,
					paddingX: self.hubGroupOptions.paddingPerTile,
					paddingY: self.hubGroupOptions.paddingPerTile,
				}
			};

			var relX = 0;
			var relY = 0;
			var x = 0;
			var y = 0;
			var prevOrd = 0;
			var silo = 0;
			self.cells.forEach(function(cell) {
				cell.w = self._sizes[cell.size].width;
				cell.h = self._sizes[cell.size].height;
				if ((y + cell.h > self.hubGroupOptions.maxGroupHeight) ||
					(y !== 0 && (cell.size === "full" || cell.size === "all"))) // full/all size cell always use one full column 
				{
					y = 0;
					relX += self.hubGroupOptions.maxGroupWidth + self.hubGroupOptions.padX + padSilo;
					x = relX;
				}
				if (cell.size === "medium") {
					if ((x - relX) + cell.w > self.hubGroupOptions.maxGroupWidth) {
						x = relX;
						y += cell.h + self.hubGroupOptions.padY;
					}
					if (y + cell.h > self.hubGroupOptions.maxGroupHeight) {
						y = 0;
						relX += self.hubGroupOptions.maxGroupWidth + self.hubGroupOptions.padX + padSilo;
						x = relX;
					}
					cell.x = x;
					cell.y = y;
					x += cell.w + self.hubGroupOptions.padX;
				} else {
					if (x !== relX) {
						x = relX;
						y += self._sizes.medium.height + self.hubGroupOptions.padY;
					}
					if (y + cell.h > self.hubGroupOptions.maxGroupHeight) {
						y = 0;
						relX += self.hubGroupOptions.maxGroupWidth + self.hubGroupOptions.padX + padSilo;
						x = relX;
					}
					cell.x = x;
					cell.y = y;
					y += cell.h + self.hubGroupOptions.padY;

					if (cell.size === "all") {
						y = 0;
						relX += cell.w + self.hubGroupOptions.padX;
						x = relX;
					}
				}

				cell.abs = Math.round(cell.x / ((self.hubGroupOptions.baseSize * 2) + self.hubGroupOptions.padX))
				cell.ord = Math.round(cell.y / ((self.hubGroupOptions.baseSize * 2) + self.hubGroupOptions.padY))
				if (cell.ord === 0 && cell.ord !== prevOrd) {
					silo++
				}
				cell.silo = silo;
				prevOrd = cell.ord;

			});
		},

		/**
		 * Calc tile positions in vertical scrolling model
		 */
		_calculateLayoutVertical: function() {
			var self = this;
			var centerPadX;
			self.hubGroupOptions.paddingPerTile = 0;
			self.hubGroupOptions.maxGroupHeight = self.hubGroupOptions.maxHeight - self._headerSpace;
			self.hubGroupOptions.padX = self._settings.portraitPadX;
			self.hubGroupOptions.padY = self._settings.portraitPadY;
			self.hubGroupOptions.maxFullTileHeight = self.hubGroupOptions.maxGroupHeight - self.hubGroupOptions.padY;
			var small = false;
			if (self.hubGroupOptions.maxWidth >= self._settings.portraitWideMinWidth ||
				(self.hubGroupOptions.allowSmallTiles === true && self._linksOnly === true)) {
				// #7898 allowSmallTiles & _linksOnly -> A group with only links - display smaller tiles - We have more freedom to show more tiles
				// Tablet default, display maximum of 8 tiles in a row in portrait mode
				self.hubGroupOptions.baseSize = Math.floor((self.hubGroupOptions.maxWidth - 7 * self.hubGroupOptions.padX) / 8);
				self.hubGroupOptions.maxGroupWidth = 8 * self.hubGroupOptions.baseSize + 7 * self.hubGroupOptions.padX;
			} else {
				// For smaller devices: display maximum of 4 tiles in a row in portrait mode
				self.hubGroupOptions.baseSize = Math.floor((self.hubGroupOptions.maxWidth - 3 * self.hubGroupOptions.padX) / 4);
				self.hubGroupOptions.maxGroupWidth = 4 * self.hubGroupOptions.baseSize + 3 * self.hubGroupOptions.padX;
			}
			self.hubGroupOptions.maxAllTileHeight = self.hubGroupOptions.maxFullTileHeight;
			self.hubGroupOptions.maxAllTileWidth = self.hubGroupOptions.maxWidth; //Math.floor((self.hubGroupOptions.maxWidth + self.hubGroupOptions.padX) / (self.hubGroupOptions.baseSize + self.hubGroupOptions.padX) / 2) * (self.hubGroupOptions.baseSize + self.hubGroupOptions.padX) * 2 - self.hubGroupOptions.padX;
			centerPadX = (self.hubGroupOptions.maxWidth - self.hubGroupOptions.maxGroupWidth) / 2;
			self.hubGroupOptions.maxGroupWidth += centerPadX;

			self._sizes = {
				small: {
					width: self.hubGroupOptions.baseSize,
					height: self.hubGroupOptions.baseSize,
					paddingX: self.hubGroupOptions.paddingPerTile,
					paddingY: self.hubGroupOptions.paddingPerTile,
				},
				medium: {
					width: self.hubGroupOptions.baseSize * 2 + self.hubGroupOptions.padX,
					height: self.hubGroupOptions.baseSize * 2 + self.hubGroupOptions.padY,
					paddingX: self.hubGroupOptions.paddingPerTile, // * 2,
					paddingY: self.hubGroupOptions.paddingPerTile, // * 2
				},
				wide: {
					width: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padX * 3,
					height: self.hubGroupOptions.baseSize * 2 + self.hubGroupOptions.padY,
					paddingX: self.hubGroupOptions.paddingPerTile, // * 4,
					paddingY: self.hubGroupOptions.paddingPerTile, // * 2
				},
				large: {
					width: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padX * 3,
					height: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padY * 3,
					paddingX: self.hubGroupOptions.paddingPerTile, // * 4,
					paddingY: self.hubGroupOptions.paddingPerTile, // * 4
				},
				full: {
					width: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padX * 3,
					height: self.hubGroupOptions.maxFullTileHeight,
					paddingX: self.hubGroupOptions.paddingPerTile,
					paddingY: self.hubGroupOptions.paddingPerTile
				},
				all: {
					width: self.hubGroupOptions.maxAllTileWidth,
					height: self.hubGroupOptions.maxAllTileHeight,
					paddingX: self.hubGroupOptions.paddingPerTile,
					paddingY: self.hubGroupOptions.paddingPerTile
				}
			};

			var x = centerPadX;
			var y = 0;
			var yInc = 0;
			self.cells.forEach(function(cell) {
				cell.w = self._sizes[cell.size].width;
				cell.h = self._sizes[cell.size].height;

				cell.x = x;
				cell.y = y;

				if (x + cell.w > self.hubGroupOptions.maxGroupWidth) {
					x = centerPadX;
					y += yInc + self.hubGroupOptions.padY;
					cell.x = x;
					cell.y = y;
					yInc = cell.h;
					x += cell.w + self.hubGroupOptions.padX;
				} else {
					x += cell.w + self.hubGroupOptions.padX;
					yInc = cell.h > yInc ? cell.h : yInc;
				}
				cell.abs = Math.round(cell.x / ((self.hubGroupOptions.baseSize * 2) + self.hubGroupOptions.padX))
				cell.ord = Math.round(cell.y / ((self.hubGroupOptions.baseSize * 2) + self.hubGroupOptions.padY))
				cell.silo = 0
			});
		},
		getTitle: function() {
			return this.getArticleText("$title");
		},
		_getCapability: function(capability) {
			return (this.article.$capabilities && (this.article.$capabilities.indexOf(capability) > -1));
		},
		getWidth: function() {
			return this._width;
		},
		getHeight: function() {
			return this._height;
		}
	});