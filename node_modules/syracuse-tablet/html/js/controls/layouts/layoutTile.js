"use strict";

var Base = require('syracuse-tablet/html/js/controls/layouts/layoutBase').LayoutBase;
var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var uiSettings = require('syracuse-tablet/html/js/ui/uiSettings');

exports.LayoutTile = utils.defineClass(function LayoutTile(controller, type, article, opts) {
	Base.call(this, controller, type, article, opts);
	// Set the default color - Forced to be modified by authoring	
	if (article.$bgColor == null) {
		article.$bgColor = uiSettings.getProp("colors.TILEDEFCOLOR");
	}
	article.$bgColor = article.$bgColor.toLowerCase();
}, Base, {

	initReuseProperties: function() {
		Base.prototype.initReuseProperties.call(this);
	},
	buildHtml: function() {
		var self = this;
		Base.prototype.buildHtml.call(self);
		self.$$elmt.addClass("s-m-tile");
		self._setCellColorClass();
		self.buildChildrenHtml();
		if (self.isEmpty /*Don't know why so remove it : && this.article.$items && this.article.$items.length > 1*/ ) {
			self._buildEmptyTile();
		}
		self._checkAddActionButtons();
	},

	getChild$$Container: function() {
		return this.$$elmt;
	},

	_buildEmptyTile: function() {
		var $$container = this.getChild$$Container();
		$$container.css({
			"display": "table",
			"table-layout": "fixed",
			"text-align": "center"
		});
		var $bind = null;
		if (this.article.$items && this.article.$items.length > 0) {
			$bind = this.article.$items[0].$bind;
		}
		var html = [];
		html.push('<section class="s-m-icon" style="display:table-row;height:100%;">');
		html.push('<div style="display:table-cell;vertical-align: middle;">');
		html.push('<div class="s-m-sage-app-icon ');
		html.push(fontUtils.dashboardIcon("emptyTile"));
		html.push('"></div>');
		html.push('</div></section>');
		html.push('<section class="s-m-title">');
		if ($bind != null && jsutils.isDvlpVersion()) {
			html.push('<span style="font-size:smaller;white-space:nowrap;">' + $bind + '</span><br>')
		}
		var textName = "gadget.not.found";
		if (jsutils.isInstanceOf(this.page, "PageHome")) {
			textName = "welcome.dashboard.emptyTile";
		}
		html.push('<div>' + locale.text(textName) + '</div></section>')
		$$container.append(html.join(''));
	},
	_setCellColorClass: function() {
		var bg = (this.article.$bgColor || "").toLowerCase();
		if (bg === "transparent" || bg.length === 0) {
			// No color if bg == "" or transparent color for compatibility
			return;
		}
		bg = "s-m-color-" + bg;
		this.$$elmt.addClass("s-m-bg " + bg);
	},
	/**
	 * Set attribute according to sizeInfo given by layoutHub
	 * Shit (padding top) if there's a title
	 */
	calculateLayout: function(x, y, authSize, sizeInfo) {
		var css = {
			left: x + "px",
			top: y + "px",
			width: sizeInfo.width + "px",
			height: sizeInfo.height + "px",
			position: "absolute",
			"padding-left": sizeInfo.paddingX + "px",
			"padding-right": sizeInfo.paddingX + "px",
			"padding-bottom": sizeInfo.paddingY + "px",
			"padding-top": ((this.$$header ? this.$$header.height() : 0) + sizeInfo.paddingY) + "px"
		};
		this.$$elmt.css(css);
		this.$$elmt.addClass(authSize);
	},
	getAuthoringSize: function() {
		return (this.article && this.article.$size) || "medium";
	},
	/**
	 * Called only for arrays nested in query/stats/requests
	 * Used to adapt the behavior according to the kind of hosted array
	 * typeArray: chart/carousel
	 * Chart:
	 * 	remove the default color for charts
	 * 	Hack: Done by programming since we don't manage default color by css
	 * 	Add s-m-chart to tune display fo these tiles by css
	 * Carousel:
	 * 	Remove fixed height - To improve
	 */
	notifSpecialArrayHosted: function(typeArray) {
		if (!this.$$elmt) return;
		// For authoring we can switch from carousel to chart to table...
		this.$$elmt.removeClass("s-m-carousel s-m-chart");
		if (typeArray === "carousel") {
			// set a class to remove padding by css to better fit
			this.$$elmt.addClass("s-m-carousel");
		} else if (typeArray === "chart") {
			// Remove Bg color and set a class to add border by css
			this.$$elmt.removeClass("s-m-bg s-m-color-" + this.article.$bgColor).addClass("s-m-chart");
		}
	},
	isLinkVignette: function() {
		var child = this.children ? this.children[0] : null;
		if (!child || child.$type !== "tablet/x-vignette") return false;
		return child.isLinkVignette();
	},
	_checkAddActionButtons: function() {
		var self = this;
		if (!this.options.tileActions || this.options.tileActions.length <= 0) {
			return;
		}
		this.options.tileActions.forEach(function(action) {
			if (!self.isEmpty || action.action === "removeTile") {
				var $$btn = $('<btn class="cfg ' + action.icon + ' ' + action.className + '" data-nevent data-naction="' + action.action + '" data-params="' + self.id + '"></btn>');
				self.$$elmt.append($$btn);
			}
		});
	}
});