"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ctrl");
var Base = require('syracuse-tablet/html/js/controls/layoutBase').Klass;



var _Klass = utils.defineClass(
	function(controller, type, article) {
		var self = this;
		Base.call(self, controller, type, article);
	}, Base, {
		/**
		 * called after all children have been appended
		 */
		afterAddItems: function() {
			var self = this;
			if (!self.children) return;
			var devSz = "$width" + globals.getDeviceSize(true);
			// all bootstrap width per device size xs, md...
			self.bsWidths = self._getBsWidths();
			// Size to use - TODO maybe not used because we generate all the sizes
			self.bsWidth = self.bsWidths[globals.getDeviceSize()];
			if (!self.bsWidth) {
				// Default size - TODO
				self.bsWidth = self.bsWidths["md"] || [12];
			}
			self.colClasses = [];
			if (self.children) {
				// Class for cells - We generate all the sizes available - TODO only for test 
				var bsClasses;
				self.children.forEach(function(c, idx) {
					bsClasses = [];
					for (var sz in self.bsWidths) {
						var widths = self.bsWidths[sz];
						if (idx < widths.length) {
							bsClasses.push("col-" + sz + "-" + widths[idx]);
						}
					}
					self.colClasses.push(bsClasses.join(' '));
				});
			}
		},
		_getBsWidths: function() {
			var self = this;
			var widths = {}, sum, itemWidths, sz;
			for (var p in self.article) {
				if (p.length === 8 && p.smStartsWith("$width")) {
					sz = p.substr(6).toLowerCase();
					sum = 0;
					widths[sz] = [];
					self.article[p].split(',').forEach(function(wdth) {
						wdth = parseInt(wdth, 10);
						sum += wdth;
						widths[sz].push(wdth);
					});
					if (sum != 12) {
						log && log("!!! - rowLayoutId=" + self.id + " - Sum of widths[" + sum + "]must be equal to 12 - device size= " + sz, JSON.stringify(widths));
					}
					if (self.children.length != widths[sz].length) {
						log && log("!!! - rowLayoutId=" + self.id + " - device size: " + sz + " - Number of widths[" + widths[sz].length + "] must be equal to the number of children[" + self.children.length + "]");
					}
				}
			}
			return widths;
		},

		buildHtmlBeforeChild: function(html, child, idx) {
			var self = this;
			html.push('<div class="');
			html.push(self.colClasses[idx]);
			html.push(' s-m-layout-cell">');
		},

		buildHtmlAfterChild: function(html, child, idx) {
			var self = this;
			html.push('</div>');
		},

		buildHtmlBefore: function(html) {
			Base.prototype.buildHtmlBefore.call(self, html);
			// TODO
			var height = 250;
			var self = this;
			html.push('<div class="container s-m-layout s-m-row" id="');
			html.push(self.id);
			html.push('">');
			html.push('<div class="row" style="height:');
			html.push(height);
			html.push('px">');
		},

		buildHtmlAfter: function(html) {
			var self = this;
			html.push('</div></div>');
			Base.prototype.buildHtmlAfter.call(self, html);
			return html;
		}
	});

exports.Klass = _Klass;