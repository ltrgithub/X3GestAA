"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ctrl");
var Base = require('syracuse-tablet/html/js/controls/layoutBase').Klass;
var BuilderLytRowHtml = require('syracuse-tablet/html/js/controls/builderLytHtml').BuilderLytRowHtml;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');

/**
 */
var _Klass = utils.defineClass(

	function(controller, type, article) {
		var self = this;
		Base.call(self, controller, type, article);
	}, Base, {
		/**
		 * Build Html recursively
		 */
		buildHtml: function(parent, controllerDao, buildOptions) {
			var container = uiUtils.createDomElement('div', ["container", "s-m-layout", "s-m-row"], null, {
				"id": this.id
			});

			if (this.article.$title) {
				var header = uiUtils.createDomElement('header', ["s-m-layout-header"]);
				header.textContent = !this.isTabSection ? this.article.$title : "";
				container.appendChild(header);
			}

			var attrs = {};
			if (this.displayOptions && this.displayOptions.rowHeight) {
				attrs.style = "height:" + this.displayOptions.rowHeight;
			}
			var widths = this._getWidthClasses();
			var coreSlot = uiUtils.createDomElement("div", ["row"], null, attrs);
			$.each(this.children, function(index, value) {
				var coreItemClassList = ["s-m-layout-cell"];
				coreItemClassList.smExtend(widths[index]);

				var coreItem = uiUtils.createDomElement("div", coreItemClassList, null);
				coreSlot.appendChild(coreItem);
				this.buildHtml(coreItem, controllerDao, buildOptions);
			});

			container.appendChild(coreSlot);
			parent.appendChild(container);
		},

		_getWidthClasses: function() {
			var self = this;
			var widths = {};
			var sizes = [{
				$prop: "$widthLg",
				$prefix: "col-lg-"
			}, {
				$prop: "$widthMd",
				$prefix: "col-md-"
			}, {
				$prop: "$widthSm",
				$prefix: "col-sm-"
			}, {
				$prop: "$widthXs",
				$prefix: "col-xs-"
			}];

			sizes.forEach(function(size) {
				var $width = self.article[size.$prop];
				if ($width) {
					var $prefix = size.$prefix;
					var cols = $width.split(",");
					if (self.children.length === cols.length) {
						for (var index = 0; index < self.children.length; index++) {
							widths[index] = widths[index] || [];
							widths[index].push($prefix + cols[index].trim());
							size.$added = true;
						}
					}
				}
			});

			// if there is no size for the smallest device kind, set it to 12 (full row) to have a default for all devices
			var smallest = sizes[sizes.length - 1];
			if (smallest.$added !== true) {
				for (var index = 0; index < self.children.length; index++) {
					widths[index] = widths[index] || [];
					widths[index].push(smallest.$prefix + "12");
				}
			}
			return widths;
		}
	}
);

exports.Klass = _Klass;