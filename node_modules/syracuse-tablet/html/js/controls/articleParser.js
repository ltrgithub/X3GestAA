"use strict";

var modules = require('syracuse-tablet/html/js/common/modules');

/**
 * page: not mandatory (eg: for cards, formController)
 */
exports.parseArticle = function(controller, article, page) {
	var ctrlFactory;

	function parseNode(controller, article, parent, opts) {
		if (article.$layoutType) {
			// Used by unitTestManager to identify layouts
			if (opts.index == null) {
				opts.index = 0;
			} else {
				opts.index++;
			};
			opts.makeFullHeight = page && page.options.makeFullHeight === true;
		}
		var ctrl = ctrlFactory.createControl(controller, article, parent, page, opts);
		if (ctrl && article.$layoutType && article.$items) {
			article.$items.forEach(function($itm) {
				parseNode(controller, $itm, ctrl, opts);
			});
		}
		return ctrl;
	}
	ctrlFactory = modules.get("ctrlFactory");
	if (!article) {
		throw new Error("Unexpected empty article");
	}
	if (!article.$layoutType) {
		//Mandatory - Better than an exception	
		article.$layoutType = "stack";
	}
	//be carefull $stackbar is global but must be used only on stack first level
	var root = parseNode(controller, article, null, {
		"$stackbar": article.$stackbar
	});
	return root;
};

exports.createDefaultArticle = function(prototype, options) {
	if (options && options.isChartDetail) return exports.createDefaultChartDetailArticle(prototype)
	var article = {
		"$layoutType": "stack",
		"$items": []
	};

	var $properties = prototype.getValueByPath("$properties");
	for (var $bind in $properties) {
		if (prototype.getValueByPath("$properties." + $bind + ".$isExcluded") == true) {
			continue;
		}
		article.$items.push({
			$bind: $bind
		});
	}
	return article;
};
exports.createDefaultChartDetailArticle = function(prototype) {
	var article = {
		"$layoutType": "stack",
		"$display": "bothSideToSide",
		"$items": []
	};

	var $properties = prototype.getValueByPath("$properties");
	for (var $bind in $properties) {
		if (prototype.getValueByPath("$properties." + $bind + ".$isExcluded") == true) {
			continue;
		}
		if (prototype.getValueByPath("$properties." + $bind + ".$cube")) {
			var graph = {
				"$layoutType": "row",
				"$items": []
			};
			var cell = {
				"$layoutType": "cell",
				"$bgColor": "transparent",
				"$widthAll": "6",
				"$sameSize": true,
				"$items": [{
					"$bind": $bind,
					"$display": "chart",
					"$arrayOptions": {
						"showPagination": false,
						"showSortFilter": false,
						"showSearch": false,
						"rowIndex": false
					}
				}]
			}
			graph.$items.push(cell)
			cell = {
				"$layoutType": "cell",
				"$bgColor": "transparent",
				"$widthAll": "6",
				"$sameSize": true,
				"$items": [{
					"$bind": $bind,
					"$forceArray": true,
					"$display": "table"
				}]
			}
			graph.$items.push(cell)
			article.$items.push(graph)
		} else {
			article.$items.push({
				$bind: $bind
			});
		}
	}
	return article;
};