"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/chart/ctrlCubeChartBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var locale = require("syracuse-tablet/html/js/helpers/locale");
var eventListener = require('syracuse-tablet/html/js/application/eventListener');

/**
 * cube chart control class
 */
var _Klass = utils.defineClass(function CtrlCubeChart(controller, article, prototype, options) {
	var self = this;
	Base.call(self, controller, article, prototype, options);
	self.itemProto = prototype.getPrototype("$item");
}, Base, {
	/**
	 * Init the properties to allow reuse of this control
	 */
	initReuseProperties: function() {
		Base.prototype.initReuseProperties.call(this);
		this.$$chartSlot = null;
		this.dataset = null;
	},

	buildHtml: function($$parent, controllerDao, buildOptions) {
		Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, ["s-m-chart"]);
		var openDetail = (this.article.$openDetail == null ? true : this.article.$openDetail) && this.controller.state.type !== "chartdetail";
		if (openDetail) {
			$('<header style="width:100%;position:absolute;top:0px;z-index: 100;"><span class="fa fa-gear" style="float:right;" data-control-id="' + this.id + '"data-action="' + globals.ACTCHARTDETAIL + '"></span></header>').prependTo(this.$$elmt);
		}
		this.$$chartSlot = $(uiUtils.createDomElement('div', null, null, null, this.$$elmt));
		this.$$chartSlot.hide();
		if (openDetail) {
			this.$$chartSlot.css("padding-top", "20px");
		}
		this._buildChart();
	},

	_buildChart: function() {
		var self = this;
		// This block assigns some variables so that the implementations
		// in ctrlCubeChartBase which have been migrated from the desktop client
		// do not need to be modified too much!
		self.$prototype = self.prototype.json;
		self.$prototype.$properties = self.$prototype.$item.$properties;
		self._localize = {
			highCharts_showHideLegend: locale.text("highCharts_showHideLegend"),
			highCharts_seriesTitle: locale.text("highCharts_seriesTitle")
		};
		//

		self._initializeMeta();

		self.dataset = self.getDao().getQueryResources();

		var settings = self._settingsFromValue();
		self._createChart(settings);
	},

	_ensureFormatter: function(measure) {
		measure.formatApi = {
			format: function(val, localFormat) {
				return val;
			}
		};
	},

	_localizedText: function(key) {
		return key;
	},

	_getFieldEvalTitle: function() {
		return [];
	},

	destroy: function() {
		var self = this;
		Base.prototype.destroy.call(self);
		self.dataset = null;
	},
	/**
	 * Call by page on resize - TODO generalize the resize process
	 */
	onResize: function(context) {
		var self = this;
		setTimeout(function() {
			var chart = self.$$chartSlot.highcharts();
			if (chart) {
				chart.setSize(self.$$chartSlot.width(), self.$$chartSlot.height(), false);
			}
			self.$$chartSlot.show();
		});
	},
	_actChartDetail: function() {
		// Trigger a navigation to rowDetail page
		var attrs = {
			"data-control-id": this.id,
			"data-parent-id": this.controller.id,
			"data-nav": "chartdetail",
			"data-nav-target": "application"
		};
		eventListener.triggerNavigation(this.$$elmt, attrs);
	},
	childPageGetPageInfo: function(typePage, currentPage) {
		var pageInfo = {
			home: false,
			type: typePage,
			cached: false,
			refreshed: false,
			changeHash: false
		};
		if (typePage === "chartdetail") {
			var article = {
				"$layoutType": "stack",
				"$items": [{
					"$layoutType": "stack",
					"$items": [{
						"$bind": this.$bind,
						"$isTitleHidden": true,
						"$style": "bar"
					}]
				}, {
					"$layoutType": "stack",
					"$items": [{
						"$bind": this.$bind,
						"$isTitleHidden": true,
						"$forceArray": true
					}]
				}]
			};
			var article = {
				"$layoutType": "hub",
				"$items": [{
					"$layoutType": "hubGroup",
					"$title": "",
					"$items": [{
						"$layoutType": "tile",
						"$bgColor": "darkgrey",
						"$size": "full",
						"$items": [{
							"$layoutType": "stack",
							"$items": [{
								"$bind": this.$bind,
								"$isTitleHidden": true,
								"$style": "bar"
							}]
						}]
					}, {
						"$layoutType": "tile",
						"$bgColor": "darkgrey",
						"$size": "full",
						"$items": [{
							"$layoutType": "stack",
							"$items": [{
								"$bind": this.$bind,
								"$isTitleHidden": true,
								"$forceArray": true
							}]
						}]
					}]
				}]
			};
			var protoJson = $.extend(true, {}, this.controller.prototype.json);
			protoJson.$title = locale.text("chartdetail.page.name");
			var proto = this.prototype.create(protoJson, true);
			pageInfo.prototype = proto;
			pageInfo.subtype = "details";
			pageInfo.article = article;
			pageInfo.name = currentPage.state.name + "." + this.$bind + "." + typePage;
		} else {
			throw new Error("Unknown page type " + typePage);
		}
		return pageInfo;
	}
});

exports.Klass = _Klass;