"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/chart/ctrlCubeChartBase').Klass;
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var locale = require("syracuse-tablet/html/js/helpers/locale");
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _getChartDetailArticle = function(opt, $bind, chartArticle, arrayArticle) {
	var type = opt.display || "bothSideToSide";
	var style = opt.style || "bar";
	if (!chartArticle) {
		chartArticle = {
			"$bind": $bind,
			"$isTitleHidden": true,
		};
	}
	if (!arrayArticle) {
		arrayArticle = {
			"$bind": $bind,
			"$isTitleHidden": true,
			"$forceArray": true
		};
	}
	chartArticle.$style = style;
	var res;
	// $isHidden = false keeps the control in page to be able to preserve article
	chartArticle.$isHidden = arrayArticle.$isHidden = false;
	switch (type) {
		case "chartOnly":
			arrayArticle.$isHidden = true;
			return {
				"$layoutType": "stack",
				"$items": [{
					"$layoutType": "row",
					"$items": [chartArticle, arrayArticle]
				}]
			};
			break;
		case "arrayOnly":
			chartArticle.$isHidden = true;
			return {
				"$layoutType": "stack",
				"$items": [{
					"$layoutType": "row",
					"$items": [arrayArticle, chartArticle]
				}]
			};
			break;
		case "bothStacked":
			return {
				"$layoutType": "stack",
				"$items": [{
					"$layoutType": "row",
					"$items": [chartArticle, arrayArticle]
				}]
			};
			break;
		default:
			return {
				"$layoutType": "stack",
				"$items": [{
					"$layoutType": "row",
					"$items": [{
						"$layoutType": "cell",
						"$widthXs": "12",
						"$widthSm": "6",
						"$widthMd": "6",
						"$widthLg": "6",
						"$bgColor": "transparent",
						"$items": [chartArticle]
					}, {
						"$layoutType": "cell",
						"$widthXs": "12",
						"$widthSm": "6",
						"$widthMd": "6",
						"$widthLg": "6",
						"$bgColor": "transparent",
						"$items": [arrayArticle]
					}]
				}]
			};
			break;
	}
};
var _getChartDetailDefaultArticle = function($bind) {
	return _getChartDetailArticle("bothSideToSide", $bind);
};

var _getHeight = function(h) {
	if (h === "xsmall") return 50;
	if (h === "small") return 100;
	if (h === "medium") return 200;
	if (h === "large") return 400;
	if (h === "xlarge") return 700;
	return 200;
};
/**
 * cube chart control class
 */

// CtrlCubeChart used by isInstanceOf 
var _Klass = utils.defineClass(function CtrlCubeChart(controller, article, prototype, options) {
	Base.call(this, controller, article, prototype, options);
	this.itemProto = prototype.getPrototype("$item");
}, Base, {
	/**
	 * Init the properties to allow reuse of this control
	 */
	initReuseProperties: function() {
		Base.prototype.initReuseProperties.call(this);
		this.dataset = null;
	},

	buildHtml: function($$parent, controllerDao, buildOptions) {
		Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, ["s-m-chart"]);
		if (!this.article) {
			this.article = {};
		}
		this._height = _getHeight(this.article.$chartHeight);
		if (this.article.$openDetail == null) {
			this.article.$openDetail = this.controller.isVignette;
		}
		if (this.article.$openDetail) {
			$('<div class="s-m-catchevt" data-control-id="' + this.id + '" data-action="' + globals.ACTCHARTDETAIL + '"></div>').appendTo(this.$$elmt);
		}
		this._$$chartSlot = $('<div class="s-m-slot"/>').appendTo(this.$$elmt).hide();
		this._buildChart();
	},
	_buildChart: function() {
		// This block assigns some variables so that the implementations
		// in ctrlCubeChartBase which have been migrated from the desktop client
		// do not need to be modified too much!
		this.$prototype = this.prototype.json;
		this.$prototype.$properties = this.$prototype.$item.$properties;
		this._localize = {
			highCharts_showHideLegend: locale.text("highCharts_showHideLegend"),
			highCharts_seriesTitle: locale.text("highCharts_seriesTitle")
		};
		this._initializeMeta();

		this.dataset = this.getDao().getQueryResources();

		var settings = this._settingsFromValue();
		this._createChart(settings, this._$$chartSlot);
	},

	_ensureFormatter: function(measure) {
		measure.formatApi = {
			format: function(val, localFormat) {
				return val;
			}
		};
	},
	_localizedText: function(key) {
		return key;
	},

	_getFieldEvalTitle: function() {
		return [];
	},

	destroy: function() {
		Base.prototype.destroy.call(this);
		this.dataset = null;
	},
	/**
	 * Used also by authoring
	 */
	needsHeight: function() {
		return this._layouytType === "stack" && !this.isChartDetailPage();
	},
	isChartDetailPage: function() {
		return this.controller.state.type === "chartdetail";
	},
	/**
	 * Call by page on resize - TODO generalize the resize process
	 */
	onResize: function(context) {
		if (this.destroyed) return;
		var chart = this._$$chartSlot.highcharts();
		var delay = 0;
		if (!chart) return;
		if (this._layouytType == null) {
			// Needed here to access to all elements (getParentVignette)
			// We do that just once
			if (this.isChartDetailPage()) {
				// in that case the chart is displayed in a 'detail's page
				this._layouytType = "stack";
			} else {
				// Chart in vignettes
				this._layouytType = this.controller.getParentDashboardType();
				// We top the cell/tile to adapt the css when a chart is nested
				if (this.controller.isVignette && this.controller.getParentVignette()) {
					this.controller.getParentVignette().parent.$$elmt.addClass("s-m-chart");
				}
			}
			if (this._layouytType === "stack") {
				// relative is needed
				this._$$chartSlot.css("position", "relative");
			}
		} else {
			// Reset heights
			chart.setSize(0, 0, false);
			// Hide slot
			this._$$chartSlot.hide();
			delay = 10;
		}
		var self = this;
		setTimeout(function() {
			if (self.destroyed) return;
			var stackController, height;
			if (self._layouytType === "stack") {
				// in stack mode we need a height
				if (self.isChartDetailPage()) {
					stackController = self.controller;
					// Height set to device height
					height = stackController.getMainContentRect().height - 10;
				} else if (self.controller.isVignette) {
					stackController = self.controller.getParentVignette().controller;
					// Height always less or equal than the device height
					height = Math.min(self._height, stackController.getMainContentRect().height - 10);
				} else {
					console.log("onResize chart - unexpected controller");
					return;
				}
			} else {
				// in hub mode we take the paren'ts height because the tile has a fixed height
				height = self._$$chartSlot.height();
			}
			chart.setSize(self._$$chartSlot.width(), height, false);
			self._$$chartSlot.show();
			if (stackController) {
				// Needed to update the scroller
				notifications.notifyController("sm.scroller.update", stackController);
			}
		}, delay);
	},
	_actChartDetail: function() {
		// Trigger a navigation to rowDetail page
		var attrs = {
			"data-control-id": this.id,
			"data-parent-id": this.controller.id,
			"data-nav": "chartdetail",
			"data-nav-target": "application"
		};
		eventListener.triggerNavigation(this.$$elmt, attrs);
	},
	childPageGetPageInfo: function(typePage, currentPage) {
		var pageInfo = {
			home: false,
			type: typePage,
			cached: false,
			refreshed: false,
			changeHash: false
		};

		if (typePage === "chartdetail") {
			var article = this.article.$chartDetail;
			if (!article) {
				article = _getChartDetailArticle("bothSideToSide", this.$bind, this.article);
			}
			var protoJson = $.extend(true, {}, this.controller.prototype.json);
			protoJson.$title = locale.text("chartdetail.page.name");
			var proto = this.prototype.create(protoJson, true);
			pageInfo.prototype = proto;
			pageInfo.subtype = "details";
			pageInfo.article = article;

			// The name of a chart detail page is the name of the dashboard 
			// it is opened from plus the id of the vignetted container to get a unique name of the page
			// Be careful, a page name must be <name> . <facet> , no more that exactly one dot in the name
			// this is why dashboard name and vignette are concatenated with an underscore
			var parentVignette = currentPage.getParentVignette();
			var dashboardPage = parentVignette.controller;
			var parentDashboardName = dashboardPage.prototype.getDataByPath("$dashboardName");
			pageInfo.name = parentDashboardName + "_" + parentVignette.$bind + ".$" + typePage;
		} else {
			throw new Error("Unknown page type " + typePage);
		}
		return pageInfo;
	},
	setChartDetailAuthoring: function(article) {
		this.article.$chartDetail = article;
		notifications.publish("sm.auth.change.item.prop.ui");
	}
});

exports.Klass = _Klass;
exports.getChartDetailArticle = _getChartDetailArticle;