"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var ctrlBase = require('syracuse-tablet/html/js/controls/ctrlBase');
var uiSettings = require('syracuse-tablet/html/js/helpers/uiSettings');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');

var Base = ctrlBase.Klass;

var _actions = [{
	params: "togglechart",
	icon: "fa fa-table"
}, {
	params: "togglearray",
	icon: "fa fa-bar-chart"
}];

var _templates = {
	toolbar: '\
		<div class="btn-toolbar" role="toolbar">\
			<div class="btn-group">\
				{{#each actions}}\
					<button type="button" class="btn btn-default" data-action="toolbar" data-control-id="{{../ctrlId}}" data-params="{{params}}"><span class="{{icon}}"></span></button>\
				{{/each}}\
		    </div>\
	    </div>'

};
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	if (!tmpl) alert("template " + name + " not found");
	return tmpl(ctx);
};


/**
 * chartDetail Tool bar
 */
var _Klass = utils.defineClass(

	function CtrlChartDetailToolbar($type, controller, options) {
		Base.call(this, controller, {
			$bind: "chartDetailToolbar"
		}, prototype.create({
			$type: $type
		}), options);

	}, Base, {
		buildHtml: function($$parent, controllerDao, buildOptions) {
			this._height = uiSettings.getProp("chartDetailToolbar.height");
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, [this.typeName]);
			this.$$elmt.html(_getHtml('toolbar', {
				ctrlId: this.id,
				actions: _actions
			}));
			this.$$elmt.css("height", this._height);
		},
		getHeight: function() {
			return this.$$elmt.is(":visible") ? this._height : 0;
		},
		_actToolbar: function(action) {
			var chart = this.controller.getChart();
			var array = this.controller.getArray();
			if (action === "togglechart") {
				chart.$$elmt.closest(".s-m-cell").toggle();
				array.$$elmt.closest(".s-m-cell").removeClass().addClass("s-m-layout s-m-cell" + (chart.$$elmt.is(":visible") ? " col-xs-12 col-sm-6 col-md-6 col-lg-6" : "	col-md-12"));
				uiUtils.triggerResizeInternal();
				return;
			}
			if (action === "togglearray") {
				array.$$elmt.closest(".s-m-cell").toggle();
				chart.$$elmt.closest(".s-m-cell").removeClass().addClass("s-m-layout s-m-cell" + (array.$$elmt.is(":visible") ? " col-xs-12 col-sm-6 col-md-6 col-lg-6" : "	col-md-12"));
				uiUtils.triggerResizeInternal();
				return;
			}
		}
	});

exports.Klass = _Klass;