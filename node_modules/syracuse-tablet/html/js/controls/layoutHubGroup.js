"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/layoutBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');

/**
 * Layout node that can only be used inside layoutHub parent nodes
 * Renders a group of tiles using the available space from top to bottom and then wraps to the right
 * Child elements bound to this layout may set "$size" attribute to define their size:
 * - small		- four tiles will fit into one group from left to right
 * - medium		- two tiles fit into one group from left to right, also double height of "small"
 * - wide		- one tile fits into one group from left to right, same height as "medium"
 * - large		- same width as "wide" and double height of "wide"/"medium"
 * - full		- same width as "wide", uses one full column (rounded to tile size medium)
 */
var _Klass = utils.defineClass(
	function(controller, type, article) {
		var self = this;
		Base.call(self, controller, type, article);
	}, Base, {
		buildHtml: function(parent, controllerDao, buildOptions) {
			var self = this;
			self._initDefaults(buildOptions);

			self.width = 0;
			var container = uiUtils.createDomElement('div', ["s-m-hub-group"], null, {
				"id": this.id
			});

			container.style.left = buildOptions.left + "px";
			container.style.height = (buildOptions.height - self._headerSpace) + "px";

			if (this.article.$title) {
				var header = uiUtils.createDomElement('header', ["s-m-layout-header"]);
				header.textContent = this.article.$title;
				container.appendChild(header);
			}

			self._buildCellStructure();
			self._calculateSizes();

			self.cells.forEach(function(cell) {
				var style = "";

				style += "width: " + self._sizes[cell.size].width + "px; ";
				style += "height: " + self._sizes[cell.size].height + "px; ";
				style += "left: " + cell.x + "px; ";
				style += "top: " + (self._headerSpace + cell.y) + "px; ";
				style += "position: absolute; ";

				var cellItem = uiUtils.createDomElement("div", ["s-m-layout-tile"], null, {
					style: style
				});
				var w = cell.x + self._sizes[cell.size].width;
				if (self.width < w) {
					self.width = w;
				}

				var x = 0;
				var y = 0;
				cell.children.forEach(function(tile) {
					var size = (tile.article && tile.article.$size) || "medium";
					var style = "";

					style += "width: " + self._sizes[size].width + "px; ";
					style += "height: " + self._sizes[size].height + "px; ";
					style += "left: " + x + "px; ";
					style += "top: " + y + "px; ";
					style += "position: absolute; ";

					if (x !== 0) {
						x = 0;
						y += self._sizes[size].height + self._padY;
					} else {
						x += self._sizes[size].width + self._padX;
					}

					var coreItem = uiUtils.createDomElement("div", ["s-m-layout-tile", "s-m-layout-tile-" + size], null, {
						style: style
					});
					cellItem.appendChild(coreItem);
					tile.buildHtml(coreItem, controllerDao, buildOptions);
				});

				container.appendChild(cellItem);
			});

			container.style.top = "0px";
			container.style.width = self.width + "px";
			parent.appendChild(container);
		},

		_initDefaults: function(buildOptions) {
			var self = this;
			self._baseSize = 80;
			self._padX = 5;
			self._padY = 5;
			self._headerSpace = 40;
			self._maxHeight = buildOptions.height - self._headerSpace;
			self._maxWidth = self._baseSize * 4 + self._padX * 3;

			self._fullHeight = Math.floor((self._maxHeight + self._padY) / (self._baseSize + self._padY) / 2) * (self._baseSize + self._padY) * 2 - self._padY;
			console.log(self._fullHeight);
			self._sizes = {
				small: {
					width: self._baseSize,
					height: self._baseSize
				},
				medium: {
					width: self._baseSize * 2 + self._padX,
					height: self._baseSize * 2 + self._padY
				},
				wide: {
					width: self._baseSize * 4 + self._padX * 3,
					height: self._baseSize * 2 + self._padY
				},
				large: {
					width: self._baseSize * 4 + self._padX * 3,
					height: self._baseSize * 4 + self._padY * 3
				},
				full: {
					width: self._baseSize * 4 + self._padX * 3,
					height: self._fullHeight
				}
			};
			console.log(buildOptions);
		},

		_buildCellStructure: function() {
			var self = this;
			self.cells = [];
			var cell = null;
			self.children.forEach(function(value) {
				var size = (value.article && value.article.$size) || "medium";
				if (!cell) {
					cell = self._createCell(value);
					self.cells.push(cell);
				}
				if (size === "small") {
					cell.children.push(value);
					if (cell.children.length === 4) {
						cell = null;
					}
				} else {
					if (cell.children.length > 0) {
						cell = self._createCell(value);
						self.cells.push(cell);
					}
					cell.children.push(value);
					cell = null;
				}
			});
		},

		_calculateSizes: function() {
			var self = this;
			var relX = 0;
			var relY = 0;
			var x = 0;
			var y = 0;
			self.cells.forEach(function(cell) {
				if (y + cell.h > self._maxHeight) {
					y = 0;
					relX += self._maxWidth + self._padX;
					x = relX;
				}
				if (cell.size === "medium") {
					if ((x - relX) + cell.w > self._maxWidth) {
						x = relX;
						y += cell.h + self._padY;
					}
					cell.x = x;
					cell.y = y;
					x += cell.w + self._padX;
				} else {
					if (x !== relX) {
						x = relX;
						y += self._sizes.medium.height + self._padY;
					}
					cell.x = x;
					cell.y = y;
					y += cell.h + self._padY;
				}
			});
		},

		_createCell: function(child) {
			var self = this;
			var size = (child.article && child.article.$size) || "medium";
			size = (size === "small" ? "medium" : size);
			var cell = {
				size: size,
				w: self._sizes[size].width,
				h: self._sizes[size].height,
				children: []
			};
			return cell;
		}
	});

exports.Klass = _Klass;