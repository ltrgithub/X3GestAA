"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/layoutBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');

/**
 * Layout node that can only be used inside layoutHub parent nodes
 * Renders a group of tiles using the available space from top to bottom and then wraps to the right
 * Child elements bound to this layout may set "$size" attribute to define their size:
 * - small		- four tiles will fit into one group from left to right
 * - medium		- two tiles fit into one group from left to right, also double height of "small"
 * - wide		- one tile fits into one group from left to right, same height as "medium"
 * - large		- same width as "wide" and double height of "wide"/"medium"
 * - full		- same width as "wide", uses one full column (rounded to tile size medium)
 */
var _Klass = utils.defineClass(
	function(controller, type, article) {
		var self = this;
		Base.call(self, controller, type, article);

		/*
		 * CSS-DEPENDEND: Needs to be adjusted on major size or page layout changes
		 */
		self._headerSpace = 40;
		self._verticalBorderSubstraction = 40;

	}, Base, {

		/**
		 * Build full html structed but do not yet apply position and size attributes (Will be done in a later step or on resize)
		 */
		buildHtml: function(parent, controllerDao, buildOptions) {
			var self = this;
			self.container = uiUtils.createDomElement('div', ["s-m-hub-group"], null, {
				"id": this.id
			});

			if (this.article.$title) {
				var header = uiUtils.createDomElement('header', ["s-m-layout-header"]);
				header.textContent = this.article.$title;
				self.container.appendChild(header);
			}

			self._buildCellStructure();

			self.cells.forEach(function(cell) {
				var style = "";
				var cellItem = uiUtils.createDomElement("div", ["s-m-layout-tile"], null);
				cell.domItem = cellItem;

				cell.children.forEach(function(tile) {
					var size = (tile.article && tile.article.$size) || "medium";
					var coreItem = uiUtils.createDomElement("div", ["s-m-layout-tile", "s-m-layout-tile-" + size]);
					tile.domItem = coreItem;
					cellItem.appendChild(coreItem);
					tile.buildHtml(coreItem, controllerDao, buildOptions);
				});

				self.container.appendChild(cellItem);
			});

			parent.appendChild(self.container);
		},

		_buildCellStructure: function() {
			var self = this;
			self.cells = [];
			var cell = null;
			self.children.forEach(function(value) {
				var size = (value.article && value.article.$size) || "medium";
				if (!cell) {
					cell = self._createCell(value);
					self.cells.push(cell);
				}
				if (size === "small") {
					cell.children.push(value);
					if (cell.children.length === 4) {
						cell = null;
					}
				} else {
					if (cell.children.length > 0) {
						cell = self._createCell(value);
						self.cells.push(cell);
					}
					cell.children.push(value);
					cell = null;
				}
			});
		},

		_createCell: function(child) {
			var self = this;
			var size = (child.article && child.article.$size) || "medium";
			size = (size === "small" ? "medium" : size);
			var cell = {
				size: size,
				children: []
			};
			return cell;
		},

		calculateLayout: function(options) {
			var self = this;
			var size;

			self._width = 0;
			self._height = 0;

			self.hubGroupOptions = options;

			if (self.hubGroupOptions.orientation === "landscape") {
				self._calculateLayoutHorizontal();
			} else {
				self._calculateLayoutVertical();
			}

			self.cells.forEach(function(cell) {
				size = cell.size;
				cell.domItem.style.left = cell.x + "px";
				cell.domItem.style.top = (cell.y + self._headerSpace) + "px";
				cell.domItem.style.width = self._sizes[size].width + "px";
				cell.domItem.style.height = self._sizes[size].height + "px";
				cell.domItem.style.position = "absolute";

				if (cell.x + self._sizes[size].width > self._width) {
					self._width = cell.x + self._sizes[size].width;
				}
				if (cell.y + self._sizes[size].height > self._height) {
					self._height = cell.y + self._sizes[size].height;
				}

				var x = 0;
				var y = 0;
				cell.children.forEach(function(tile) {
					size = (tile.article && tile.article.$size) || "medium";
					tile.domItem.style.left = x + "px";
					tile.domItem.style.top = y + "px";
					tile.domItem.style.width = self._sizes[size].width + "px";
					tile.domItem.style.height = self._sizes[size].height + "px";
					tile.domItem.style.position = "absolute";

					if (x !== 0) {
						x = 0;
						y += self._sizes[size].height + self.hubGroupOptions.padY;
					} else {
						x += self._sizes[size].width + self.hubGroupOptions.padX;
					}
				});
			});

			if (self.hubGroupOptions.orientation === "landscape") {
				self.container.style.top = "0px";
				self.container.style.left = self.hubGroupOptions.posX + "px";
				self.container.style.width = self._width + "px";
				self.container.style.height = (self.hubGroupOptions.maxHeight - self._headerSpace) + "px";
			} else {
				self.container.style.top = self.hubGroupOptions.posY + "px";
				self.container.style.left = "0px";
				self.container.style.width = self._width + "px";
				self.container.style.height = self._height + "px";
				self._height += self._headerSpace;
			}

		},

		/**
		 * Calc tile positions in horizontal scrolling model
		 */
		_calculateLayoutHorizontal: function() {
			var self = this;

			self.hubGroupOptions.baseSize = 80;
			self.hubGroupOptions.padX = 5;
			self.hubGroupOptions.padY = 5;

			self.hubGroupOptions.maxGroupHeight = self.hubGroupOptions.maxHeight - self._headerSpace;
			self.hubGroupOptions.maxGroupWidth = 4 * self.hubGroupOptions.baseSize + 3 * self.hubGroupOptions.padX;

			self.hubGroupOptions.maxFullTileHeight = Math.floor((self.hubGroupOptions.maxGroupHeight + self.hubGroupOptions.padY) / (self.hubGroupOptions.baseSize + self.hubGroupOptions.padY) / 2) * (self.hubGroupOptions.baseSize + self.hubGroupOptions.padY) * 2 - self.hubGroupOptions.padY;

			self._sizes = {
				small: {
					width: self.hubGroupOptions.baseSize,
					height: self.hubGroupOptions.baseSize
				},
				medium: {
					width: self.hubGroupOptions.baseSize * 2 + self.hubGroupOptions.padX,
					height: self.hubGroupOptions.baseSize * 2 + self.hubGroupOptions.padY
				},
				wide: {
					width: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padX * 3,
					height: self.hubGroupOptions.baseSize * 2 + self.hubGroupOptions.padY
				},
				large: {
					width: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padX * 3,
					height: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padY * 3
				},
				full: {
					width: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padX * 3,
					height: self.hubGroupOptions.maxFullTileHeight
				}
			};

			var relX = 0;
			var relY = 0;
			var x = 0;
			var y = 0;

			self.cells.forEach(function(cell) {
				cell.w = self._sizes[cell.size].width;
				cell.h = self._sizes[cell.size].height;
				if ((y + cell.h > self.hubGroupOptions.maxGroupHeight) ||
					(y !== 0 && cell.size === "full")) // full size cell always use one full column 
				{
					y = 0;
					relX += self.hubGroupOptions.maxGroupWidth + self.hubGroupOptions.padX;
					x = relX;
				}
				if (cell.size === "medium") {
					if ((x - relX) + cell.w > self.hubGroupOptions.maxGroupWidth) {
						x = relX;
						y += cell.h + self.hubGroupOptions.padY;
					}
					cell.x = x;
					cell.y = y;
					x += cell.w + self.hubGroupOptions.padX;
				} else {
					if (x !== relX) {
						x = relX;
						y += self._sizes.medium.height + self.hubGroupOptions.padY;
					}
					cell.x = x;
					cell.y = y;
					y += cell.h + self.hubGroupOptions.padY;
				}
			});
		},

		/**
		 * Calc tile positions in horizontal scrolling model
		 */
		_calculateLayoutVertical: function() {
			var self = this;

			self.hubGroupOptions.padX = 5;
			self.hubGroupOptions.padY = 5;
			self.hubGroupOptions.baseSize = Math.floor((self.hubGroupOptions.maxWidth - 5 * self.hubGroupOptions.padX - self._verticalBorderSubstraction) / 40) * 10;

			self.hubGroupOptions.maxGroupWidth = 4 * self.hubGroupOptions.baseSize + 3 * self.hubGroupOptions.padX;
			self.hubGroupOptions.maxGroupHeight = self.hubGroupOptions.maxHeight - self._headerSpace;
			self.hubGroupOptions.maxFullTileHeight = self.hubGroupOptions.maxGroupHeight;

			self._sizes = {
				small: {
					width: self.hubGroupOptions.baseSize,
					height: self.hubGroupOptions.baseSize
				},
				medium: {
					width: self.hubGroupOptions.baseSize * 2 + self.hubGroupOptions.padX,
					height: self.hubGroupOptions.baseSize * 2 + self.hubGroupOptions.padY
				},
				wide: {
					width: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padX * 3,
					height: self.hubGroupOptions.baseSize * 2 + self.hubGroupOptions.padY
				},
				large: {
					width: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padX * 3,
					height: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padY * 3
				},
				full: {
					width: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padX * 3,
					height: self.hubGroupOptions.maxFullTileHeight
				}
			};

			var x = 0;
			var y = 0;

			self.cells.forEach(function(cell) {
				cell.w = self._sizes[cell.size].width;
				cell.h = self._sizes[cell.size].height;

				if (cell.size === "medium") {
					cell.x = x;
					cell.y = y;

					x += cell.w + self.hubGroupOptions.padX;
					if (x + cell.w > self.hubGroupOptions.maxGroupWidth) {
						x = 0;
						y += cell.h + self.hubGroupOptions.padY;
					}
				} else {
					if (x > 0) { // middle of line of medium size -> next line
						x = 0;
						y += self._sizes.medium.height + self.hubGroupOptions.padY;
					}
					cell.x = x;
					cell.y = y;
					y += cell.h + self.hubGroupOptions.padY;
				}
			});
		},

		getWidth: function() {
			return this._width;
		},
		getHeight: function() {
			return this._height;
		}
	});

exports.Klass = _Klass;