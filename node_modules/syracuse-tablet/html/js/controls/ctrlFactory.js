"use strict";

var Prototype = require('syracuse-tablet/html/js/sdata/prototype').Prototype;

var CtrlAlphaNumModule = require('syracuse-tablet/html/js/controls/fields/ctrlAlphanum');

var CtrlAlphaNum = CtrlAlphaNumModule.CtrlAlphaNum;
var CtrlPhone = CtrlAlphaNumModule.CtrlPhone;
var CtrlEmail = CtrlAlphaNumModule.CtrlEmail;
var CtrlUrl = CtrlAlphaNumModule.CtrlUrl;

var CtrlCheckbox = require('syracuse-tablet/html/js/controls/fields/ctrlCheckbox').CtrlCheckbox;
var CtrlSwitch = require('syracuse-tablet/html/js/controls/fields/ctrlSwitch').CtrlSwitch;
var CtrlCombo = require('syracuse-tablet/html/js/controls/fields/ctrlCombo').CtrlCombo;

var CtrlNumeric = require('syracuse-tablet/html/js/controls/fields/ctrlNumeric').CtrlNumeric;
var CtrlQuantity = require('syracuse-tablet/html/js/controls/fields/ctrlQuantity').CtrlQuantity;
var CtrlReference = require('syracuse-tablet/html/js/controls/fields/ctrlReference').CtrlReference;

var CtrlDate = require('syracuse-tablet/html/js/controls/fields/ctrlDate').CtrlDate;
var CtrlText = require('syracuse-tablet/html/js/controls/fields/ctrlText').CtrlText;

var CtrlDocument = require('syracuse-tablet/html/js/controls/fields/ctrlDocument').CtrlDocument;
var CtrlBinary = require('syracuse-tablet/html/js/controls/fields/ctrlDocument').CtrlBinary;

var CtrlTypeUnknown = require('syracuse-tablet/html/js/controls/ctrlTypeUnknown').CtrlTypeUnknown;

var CtrlArray = require('syracuse-tablet/html/js/controls/array/ctrlArray').CtrlArray;
var CtrlArrayChart = require('syracuse-tablet/html/js/controls/array/ctrlArrayChart').CtrlArrayChart;

var CtrlVignette = require('syracuse-tablet/html/js/controls/vignette/ctrlVignette').CtrlVignette;
var CtrlVignetteLink = require('syracuse-tablet/html/js/controls/vignette/ctrlVignetteLink').CtrlVignetteLink;

var CtrlImage = require('syracuse-tablet/html/js/controls/fields/ctrlImage').CtrlImage;
var CtrlGaugeChart = require('syracuse-tablet/html/js/controls/fields/ctrlGaugeChart').CtrlGaugeChart;
var CtrlFilter = require('syracuse-tablet/html/js/controls/fields/ctrlFilter').CtrlFilter;

var LayoutStack = require('syracuse-tablet/html/js/controls/layouts/layoutStack').LayoutStack;
var LayoutRow = require('syracuse-tablet/html/js/controls/layouts/layoutRow').LayoutRow;
var LayoutCell = require('syracuse-tablet/html/js/controls/layouts/layoutCell').LayoutCell;
var LayoutHub = require('syracuse-tablet/html/js/controls/layouts/layoutHub').LayoutHub;
var LayoutHubGroup = require('syracuse-tablet/html/js/controls/layouts/layoutHubGroup').LayoutHubGroup;
var LayoutTile = require('syracuse-tablet/html/js/controls/layouts/layoutTile').LayoutTile;

var PanelFooterSdataPageTablet = require('syracuse-tablet/html/js/controls/panels/footer/panelFooterSdataPageTablet').PanelFooterSdataPageTablet;

var PanelHeaderSdataPage = require('syracuse-tablet/html/js/controls/panels/header/panelHeaderSdataPageBase').PanelHeaderSdataPageBase;

var PanelHeaderMultisel = require('syracuse-tablet/html/js/controls/panels/header/panelHeaderMultisel').PanelHeaderMultisel;
var PanelHeaderMultiselRun = require('syracuse-tablet/html/js/controls/panels/header/panelHeaderMultiselRun').PanelHeaderMultiselRun;
var PanelHeaderEditHome = require('syracuse-tablet/html/js/controls/panels/header/panelHeaderEditHome').PanelHeaderEditHome;

var PanelActions = require('syracuse-tablet/html/js/controls/panels/aside/panelActions').PanelActions;
var PanelGlobalSmartphone = require('syracuse-tablet/html/js/controls/panels/aside/panelGlobalSmartphone').PanelGlobalSmartphone;
var PanelGlobalTablet = require('syracuse-tablet/html/js/controls/panels/aside/panelGlobalTablet').PanelGlobalTablet;
var PanelSortFilter = require('syracuse-tablet/html/js/controls/panels/sortfilter/panelFilterSort').PanelFilterSort;
var ChartDetailToolBar = require('syracuse-tablet/html/js/controls/panels/toolBars/chartDetailToolBar').ChartDetailToolBar;
var PanelShare = require('syracuse-tablet/html/js/controls/panels/aside/panelShare').PanelShare;
var PanelEditTemplates = require('syracuse-tablet/html/js/controls/panels/aside/panelEditTemplates').PanelEditTemplates;
var PanelDashboardTemplate = require('syracuse-tablet/html/js/controls/panels/aside/panelDashboardTemplate').PanelDashboardTemplate;
var PanelBreadCrumbs = require('syracuse-tablet/html/js/controls/panels/aside/panelBreadCrumbs').PanelBreadCrumbs;
/**
 * Single function to create controls and bind them to the given controller
 * Control selection is based on article, there are several ways
 * 
 * article can be:
 * {
 *   $bind: "CODE" // Bind to a property of controller
 * }
 * article can be:
 * {
 *   $layoutType: "stack" // Create a layout (not really a control)
 * }
 * article can be:
 * {
 *   $link: "$details" //Create a link control triggering an sdata link
 * }
 * article can be:
 * {
 *   $action: "$save" //Create a action control triggering an sdata action
 * }
 * article can be:
 * {
 *   $type: "footer" //Create a control by a type not backed up by sdata (e.g. panels or footer)
 * }
 */
exports.createControl = function(controller, article, parent, page, opts) {
	var ctrl;
	// Mandatory
	opts = $.extend(true, {}, opts);
	if (article.$bind) {
		ctrl = _createControl(controller, article, parent, opts);
	} else if (article.$layoutType) {
		ctrl = _createLayout(controller, article, parent, opts);
	} else if (article.$link) {
		ctrl = _createLink(controller, article, parent, opts);
	} else if (article.$action) {
		ctrl = _createAction(controller, article, parent, opts);
	} else if (article.$type) {
		ctrl = _createControlType(controller, article, parent, opts);
	}

	if (ctrl) {
		// Keep a reference to the page for every control so a control knows where it sits in
		ctrl.page = page || parent && parent.page;

		var $articleLocalization = article.$localization; // This will be only set if we are on the articles root level
		if (!$articleLocalization && parent) {
			$articleLocalization = parent.$articleLocalization;
		}
		if (!$articleLocalization) {
			$articleLocalization = {};
		}

		ctrl.$articleLocalization = $articleLocalization;
	}

	return ctrl;
};

/**
 * 
 * @param controller
 * @param article
 * @param parent
 * @param opts
 * @returns 
 */
function _createControl(controller, article, parent, opts) {
	var $bind = article.$bind;
	if (!controller.dataset.prototype.propExists($bind)) {
		return;
	}

	var $type = controller.dataset.prototype.propGetType($bind);
	var $format = controller.dataset.prototype.propGetFormat($bind);
	var ctor;
	var proto;
	//	console.log(controller.dataset.prototype.propGetProto($bind).getValueByPath("$title", true), controller.dataset.prototype.propGetProto($bind).json)
	switch ($type) {
		case "application/x-boolean":
			switch ($format) {
				case "$switch":
					ctor = CtrlSwitch;
					break;
				default:
					ctor = CtrlCheckbox;
					break;
			}
			break;

		case "application/x-choice":
			ctor = CtrlCombo;
			break;
		case "application/x-string":
		case "application/x-password":
			switch ($format) {
				case "$phone":
					ctor = CtrlPhone;
					break;
				case "$email":
					ctor = CtrlEmail;
					break;
				case "$url":
					ctor = CtrlUrl;
					break;
				default:
					ctor = CtrlAlphaNum;
			}
			break;
		case "application/x-reference":
			ctor = CtrlReference;
			break;

		case "application/x-integer":
		case "application/x-real":
		case "application/x-decimal":
		case "application/x-quantity":
			// "$numDisplay" is an authoring property used to select how to display numeric value (either "gauge" or "normal")
			// important in case we switch from "normal" to "gauge"
			if (!article.$gauge && article.$numDisplay === "gauge") {
				article.$gauge = {};
			}
			if (article.$gauge) {
				ctor = CtrlGaugeChart;
			} else {
				ctor = ($type === "application/x-quantity" ? CtrlQuantity : CtrlNumeric);
			}
			break;
		case "application/x-date":
		case "application/x-time":
		case "application/x-datetime":
			ctor = CtrlDate;
			break;
		case "application/x-array":
			proto = controller.dataset.prototype.propGetProto($bind);
			if (proto.getValueByPath("$cube")) {
				// We always instantiate an ArrayChart because whatever $display chart/table/card...
				// ArrayChart manages the links to detail chart and is needed if we display a "$cube" as a table/card...
				ctor = CtrlArrayChart;
			} else {
				ctor = CtrlArray;
			}
			break;
		case "application/x-vignette":
			ctor = CtrlVignette;
			break;
		case "application/x-vignette-link":
			ctor = CtrlVignetteLink;
			break;
		case "image":
			ctor = CtrlImage;
			break;
		case "text/plain":
		case "text/rtf":
		case "text/html":
			ctor = CtrlText;
			break;
		case "application/x-filter":
			ctor = CtrlFilter;
		case "application/x-document":
			ctor = CtrlDocument;
			break;
		case "application/x-binary":
			ctor = CtrlBinary;
			break;
		default:
			ctor = CtrlTypeUnknown;
			break;
	}
	if (ctor) {
		proto = proto || controller.dataset.prototype.propGetProto($bind);
	}

	var ctrl;
	if (ctor && proto) {
		ctrl = new ctor(controller, article, proto, opts || {});
	}

	if (ctrl && parent) {
		parent.appendStructElmt(ctrl);
	}
	return ctrl;
}

/**
 * 
 * @param controller
 * @param article
 * @param parent
 * @param opts
 * @returns
 */
function _createLayout(controller, article, parent, opts) {
	var $type = article.$layoutType;
	var ctrl;
	var ctor;
	// compatibility stateless version hubGroup
	switch ($type.toLowerCase()) {
		case "stack":
			ctor = LayoutStack;
			break;
		case "row":
			ctor = LayoutRow;
			break;
		case "cell":
			ctor = LayoutCell;
			break;
		case "hub":
			ctor = LayoutHub;
			break;
		case "hubgroup":
			ctor = LayoutHubGroup;
			break;
		case "tile":
			ctor = LayoutTile;
			break;
		default:
			throw new Error("Unknown layout type [" + $type + "]")
			ctor = null;
			break;
	}

	if (ctor) {
		ctrl = new ctor(controller, $type, article, opts || {});
	}

	if (ctrl && parent) {
		parent.appendStructElmt(ctrl);
	}

	return ctrl;
}

/**
 * 
 * @param controller
 * @param article
 * @param parent
 * @param opts
 */
function _createLink(controller, article, parent, opts) {}

/**
 * 
 * @param controller
 * @param article
 * @param parent
 * @param opts
 */
function _createAction(controller, article, parent, opts) {}

/**
 * 
 * @param controller
 * @param article
 * @param parent
 * @param opts
 */
function _createControlType(controller, article, parent, opts) {
	var $type = article.$type;
	var ctor;
	var ctrl;
	switch ($type) {
		case "application/x-panel-footer-sdata-page":
			ctor = PanelFooterSdataPageTablet;
			break;
		case "application/x-panel-header-sdata-page":
			ctor = PanelHeaderSdataPage;
			break;
		case "application/x-panel-header-multisel":
			ctor = PanelHeaderMultisel;
			break;
		case "application/x-panel-header-multisel-run":
			ctor = PanelHeaderMultiselRun;
			break;
		case "application/x-panel-actions":
			ctor = PanelActions;
			break;
		case "application/x-panel-global-smartphone":
			ctor = PanelGlobalSmartphone;
			break;
		case "application/x-panel-global-tablet":
			ctor = PanelGlobalTablet;
			break;
		case "application/x-panel-breadcrumbs":
			ctor = PanelBreadCrumbs;
			break;
		case "application/x-panel-filtersort":
			ctor = PanelSortFilter;
			break;
		case "application/x-chartdetail-toolbar":
			ctor = ChartDetailToolBar;
			break;
		case "application/x-panel-share":
			ctor = PanelShare;
			break;
		case "application/x-panel-footer-edithome-tablet":
			ctor = PanelFooterEditHomeTablet;
			break;
		case "application/x-panel-footer-edithome-smartphone":
			ctor = PanelFooterEditHomeSmartphone;
			break;
		case "application/x-panel-header-edithome":
			ctor = PanelHeaderEditHome;
			break;
		case "application/x-panel-dashboard-template":
			ctor = PanelDashboardTemplate
			break;
		case "application/x-panel-edittemplates":
			ctor = PanelEditTemplates;
			break;
	}

	if (ctor) {
		ctrl = new ctor(controller, $type, article, opts);
	}
	return ctrl;
}