"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("factory");
var globals = require('syracuse-tablet/html/js/helpers/globals');

var _ctor = {};

var _types = {
	// official types
	string: "application/x-string",
	password: "application/x-password",
	text: "text/plain",
	integer: "application/x-integer",
	real: "application/x-real",
	decimal: "application/x-decimal",
	quantity: "application/x-quantity",
	choice: "application/x-choice",
	boolean: "application/x-boolean",
	date: "application/x-date",
	time: "application/x-time",
	datetime: "application/x-datetime",
	reference: "application/x-reference",
	array: "application/x-array",
	image: "image",
	doc: "application/x-document",
	binary: "application/x-binary",
	soapObject: "application/x-object",
	textRtf: "text/rtf",
	textHtml: "text/html",
	textPlain: "text/plain",
	// our own types
	vignette: "tablet/x-vignette",
	layout: "tablet/x-layout",
	// !! tablet/x-page- prefix means page control
	breadcrumbs: "tablet/x-page-breadcrumbs",
	pageheader: "tablet/x-page-header",
	pagefooter: "tablet/x-page-footer",
	vignettefooter: "tablet/x-vignette-footer",
	vignetteheader: "tablet/x-vignette-header",
	panelactionregular: "tablet/x-page-panel-actionregular",
	panelusersmartphone: "tablet/x-page-panel-usersmartphone",
	panelfiltersort: "tablet/x-page-panel-filtersort",
	icon: "tablet/x-icon",
	button: "tablet/x-button",
	unfound: "tablet/x-unfound",
	rowStatus: "tablet/x-row-status"
};
/**
 * Create a control and insert DOM element in a grid cell
 * 	TODO - Use an HTML builder instead of a control
 */
var _createCellFieldCtrl = function($$parentCell, controller, ctrlArticle, ctrlProto, options) {
	options = options || {};
	// True if the field id added to a cell of a table - Array with table display
	options.displayCtx = "table";
	return _createControl(controller, null, ctrlArticle, ctrlProto, options);
};
/**
 * Create a control
 * 	Add control to controller
 * 	Append control as a child of parentStructElmt
 *  options: arrayCtx : context of array filed display
 */
var _createControl = function(controller, parentStructElmt, article, prototype, options) {
	if (!controller) throw new Error("createControl - null parent or controller");
	options = options || {};
	var c;
	var type = prototype.data("$type");
	switch (type) {
		case _types.string:
		case _types.password:
			switch (prototype.data("$format")) {
				case "$phone":
					c = new _ctor.PhoneField(controller, article, prototype, options);
					break;
				case "$email":
					c = new _ctor.EmailField(controller, article, prototype, options);
					break;
				case "$url":
					c = new _ctor.UrlField(controller, article, prototype, options);
					break;
				default:
					c = new _ctor.Alphanum(controller, article, prototype, options);
			}
			break;
		case _types.integer:
		case _types.real:
		case _types.decimal:
			// "$numDisplay" is an authoring property used to select how to display numeric value (either "gauge" or "normal")
			if (article.$numDisplay) {
				// important in case we switch from "normal" to "gauge"
				if (!article.$gauge && article.$numDisplay === "gauge") {
					article.$gauge = {};
				}
				c = article.$numDisplay === "normal" ? new _ctor.Numeric(controller, article, prototype, options) : new _ctor.Gauge(controller, article, prototype, options);
			} else {
				if (article.$gauge) {
					c = new _ctor.Gauge(controller, article, prototype, options);
				} else {
					c = new _ctor.Numeric(controller, article, prototype, options);
				}
			}
			break;
		case _types.quantity:
			c = new _ctor.Quantity(controller, article, prototype, options);
			break;
		case _types.choice:
			c = new _ctor.Combo(controller, article, prototype, options);
			break;
		case _types.boolean:
			switch (prototype.data("$format")) {
				case "$switch":
					c = new _ctor.Switch(controller, article, prototype, options);
					break;
				default:
					c = new _ctor.CheckBox(controller, article, prototype, options);
			};
			break;
		case _types.date:
		case _types.time:
		case _types.datetime:
			c = new _ctor.Date(controller, article, prototype, options);
			break;
		case _types.reference:
			c = new _ctor.Reference(controller, article, prototype, options);
			break;
		case _types.array:
			if (prototype.data("$cube") && article.$forceArray !== true) {
				c = new _ctor.CubeChart(controller, article, prototype, options);
			} else {
				c = new _ctor.Array(controller, article, prototype, options);
			}
			break;
		case _types.vignette:
			c = new _ctor.Vignette(controller, article, prototype, options);
			break;
		case _types.image:
		case _types.doc:
		case _types.binary:
			c = new _ctor.Binary(controller, article, prototype, options);
			break;
		case _types.icon:
			c = new _ctor.Icon(controller, article, prototype, options);
			break;
		case _types.button:
			c = new _ctor.Button(controller, article, prototype, options);
			break;
		case _types.textRtf:
		case _types.textHtml:
		case _types.textPlain:
			c = new _ctor.Text(controller, article, prototype, options);
			break;
		case _types.soapObject:
			throw new Error("not implemented");
			break;
		case _types.unfound:
			c = new _ctor.FieldUnfound(controller, article, prototype, options);
			break;
		case _types.rowStatus:
			c = new _ctor.FieldRowStatus(controller, article, prototype, options);
			break;
		default:
			c = new _ctor.TypeUnknown(controller, article, prototype, options);
			break;
	}
	//Field inside a table cell - Nothing - Control is used only to build html - TODO use html Builders instead of control
	if (options.displayCtx === "table") return c;
	if (!parentStructElmt) throw new Error("createControl - Parent's control is mandatory");
	// Add control elmt in a tree
	parentStructElmt.appendStructElmt(c);
	// Add control to controller
	if (options.displayCtx !== "card") {
		controller.addControl(c);
	} // Else array card context we don't add control but build tree - tree is used as a html generator
	return c;
};
var _createLayout = function(controller, parentStructElmt, article, opts) {
	var type = article.$layoutType || "stack";
	var klass;
	if (type == "stack") {
		klass = _ctor.LayoutStack;
	} else if (type == "row") {
		klass = _ctor.LayoutRow;
	} else if (type == "tab") {
		klass = _ctor.LayoutTab;
	} else if (type == "hub") {
		klass = _ctor.LayoutHub;
	} else if (type == "hubGroup") {
		klass = _ctor.LayoutHubGroup;
	} else if (type == "tile") {
		klass = _ctor.LayoutTile;
	} else if (type == "cell") {
		klass = _ctor.LayoutCell;
	} else {
		log && log("layout type=" + type + " is not implemented");
		return null;
	}
	var l = new klass(controller, type, article, opts);
	if (parentStructElmt) {
		parentStructElmt.appendStructElmt(l);
	} else {
		// Root layout
		l.parent = controller;
	}
	controller.addLayout(l);
	return l;
};
/**
 * Creates page static controls - header/footer
 */
var _createPageControl = function(type, controller, options) {
	options = options || {};
	var c;
	switch (type) {
		case "breadcrumbs":
			c = new _ctor.BreadCrumbs(_types.breadcrumbs, controller, options);
			break;
		case "header":
			c = new _ctor.PageHeader(_types.pageheader, controller, options);
			break;
		case "footer":
			c = new _ctor.PageFooter(_types.pagefooter, controller, options);
			break;
		default:
			throw new Error("Unknown page control[" + type + "]");
			break;
	}
	controller.addControl(c);
	return c;
};
var _createActionControl = function(type, vignette, options) {
	if (type === "footer") return new _ctor.VignetteFooter(_types.vignettefooter, vignette, options);
	if (type === "header") return new _ctor.VignetteHeader(_types.vignetteheader, vignette, options);
	throw new Error("Unknown vignette action control[" + type + "]");
};
/**
 * Creates panels
 * id	globals.PANELACTIONSREGULAR, globals.PANELUSERSMARTPHONE, globals.PANELFILTERSORT
 */
var _createPanel = function(controller, panelId, options) {
	var deviceType = globals.getSiteLayout().getDeviceType();
	// We need to store device type to detect changes and recreate panels if needed
	options = options || {
		deviceType: deviceType
	};
	switch (panelId) {
		case globals.PANELACTIONSREGULAR:
			return new _ctor.PageActionPanelRegular(controller, _types.panelactionregular, panelId, options);
		case globals.PANELUSERSMARTPHONE:
			return new _ctor.UserPanelSmartphone(controller, _types.panelusersmartphone, panelId, options);
			break;
		case globals.PANELFILTERSORT:
			return new _ctor.FilterSortPanel(controller, _types.panelfiltersort, panelId, options);
		default:
			throw new Error("Unknown page control[" + panelId + "]");
	}
	// Control is not added here but by panel manager
};

/*
 * This is a trick used by authoring
 * We create a dummy control that only returns an article with a $bind node
 * This allows authoring to only add this kind of untyped controls and after a refresh,
 * the base system creates the "real" control.
 */
var _createBindControl = function(controller, parentStructElmt, article) {
	if (!controller) throw new Error("Control - null parent or controller");
	var c = new _ctor.StructElmt(controller, "$dummyBind", article, {}, {});
	if (parentStructElmt) {
		// Add control elmt in a tree
		parentStructElmt.appendStructElmt(c);
	} else {
		throw new Error("Parent's control is mandatory");
	}
	return c;
};


exports.createPanel = _createPanel;
exports.createControl = _createControl;
exports.createLayout = _createLayout;
exports.createPageControl = _createPageControl;
exports.createActionControl = _createActionControl;
exports.createCellFieldCtrl = _createCellFieldCtrl;
exports.createBindControl = _createBindControl;

exports.type = function(name) {
	return _types[name];
};
exports.setImpl = function(name, ctor) {
	_ctor[name] = ctor;
};