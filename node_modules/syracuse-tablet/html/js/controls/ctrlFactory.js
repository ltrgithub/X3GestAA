"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("factory");
var utils = require('syracuse-tablet/html/js/helpers/utils');
var Alphanum = require('syracuse-tablet/html/js/controls/ctrlAlphanum').Klass;
var Numeric = require('syracuse-tablet/html/js/controls/ctrlNumeric').Klass;
var CheckBox = require('syracuse-tablet/html/js/controls/ctrlCheckBox').Klass;
var Combo = require('syracuse-tablet/html/js/controls/ctrlCombo').Klass;
var Date = require('syracuse-tablet/html/js/controls/ctrlDate').Klass;
var Grid = require('syracuse-tablet/html/js/controls/ctrlGrid').Klass;
var Reference = require('syracuse-tablet/html/js/controls/ctrlReference').Klass;
var LayoutRow = require('syracuse-tablet/html/js/controls/layoutRow').Klass;
var LayoutStack = require('syracuse-tablet/html/js/controls/layoutStack').Klass;
var LayoutTab = require('syracuse-tablet/html/js/controls/LayoutTab').Klass;
var Vignette = require('syracuse-tablet/html/js/controls/vignetteBase').Klass;

var _types = {
	// official types
	string: "application/x-string",
	password: "application/x-password",
	text: "text/plain",
	integer: "application/x-integer",
	real: "application/x-real",
	decimal: "application/x-decimal",
	quantity: "application/x-quantity",
	choice: "application/x-choice",
	boolean: "application/x-boolean",
	date: "application/x-date",
	time: "application/x-time",
	datetime: "application/x-datetime",
	reference: "application/x-reference",
	array: "application/x-array",
	// our own types
	vignette: "application/x-vignette",
	layout: "application/x-layout"
};
var _createControl = function(controller, parent, article, prototype) {
	if (!controller) throw new Error("Control - null parent or controller");
	var c;
	var type = prototype.data("$type");
	switch (type) {
		case _types.string:
		case _types.password:
		case _types.text:
			c = new Alphanum(controller, article, prototype);
			break;
		case _types.integer:
		case _types.real:
		case _types.decimal:
		case _types.quantity:
			c = new Numeric(controller, article, prototype);
			break;
		case _types.choice:
			c = new Combo(controller, article, prototype);
			break;
		case _types.boolean:
			c = new CheckBox(controller, article, prototype);
			break;
		case _types.date:
		case _types.time:
		case _types.datetime:
			c = new Date(controller, article, prototype);
			break;
		case _types.reference:
			c = new Reference(controller, article, prototype);
			break;
		case _types.array:
			c = new Grid(controller, article, prototype);
			break;
		case _types.vignette:
			c = new Vignette(controller, article, prototype);
			break;
		default:
			throw new Error("Unknown control type[" + type + "]");
			break;
	}
	if (parent) parent.appendChild(c);
	return c;
};
var _createLayout = function(controller, parent, article) {
	var type = article.$layoutType || "stack";
	var klass;
	if (type == "stack") {
		klass = LayoutStack;
	} else if (type == "row") {
		klass = LayoutRow;
	} else if (type == "tab") {
		klass = LayoutTab;
	} else {
		log && log("layout type=" + type + " is not implemented");
		return null;
	}
	var l = new klass(controller, _types.layout, article);
	if (parent) parent.appendChild(l);
	return l;
};
exports.createControl = _createControl;
exports.createLayout = _createLayout;
exports.type = function(name) {
	return _types[name];
};