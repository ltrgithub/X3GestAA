"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("factory");

var _ctor = {};

var _types = {
	// official types
	string: "application/x-string",
	password: "application/x-password",
	text: "text/plain",
	integer: "application/x-integer",
	real: "application/x-real",
	decimal: "application/x-decimal",
	quantity: "application/x-quantity",
	choice: "application/x-choice",
	boolean: "application/x-boolean",
	date: "application/x-date",
	time: "application/x-time",
	datetime: "application/x-datetime",
	reference: "application/x-reference",
	array: "application/x-array",
	image: "image",
	doc: "application/x-document",
	binary: "application/x-binary",
	soapObject: "application/x-object",
	textRtf: "text/rtf",
	textHtml: "text/html",
	textPlain: "text/plain",
	// our own types
	vignette: "tablet/x-vignette",
	layout: "tablet/x-layout",
	pageheader: "tablet/x-pageheader",
	pagefooter: "tablet/x-pagefooter",
	pageactionpanel: "tablet/x-pageactionpanel",
	navigationpanel: "tablet/x-navigationpanel",
	icon: "tablet/x-icon",
	button: "tablet/x-button",
	unfound: "tablet/x-unfound"
};
/**
 * Create a control and insert DOM element in a grid cell
 * 	TODO - Use an HTML builder instead of a control
 */
var _appendField2Cell = function($$parentCell, controller, ctrlArticle, ctrlProto, rowData, options) {
	if (!$$parentCell) return;
	options = options || {};
	options.isGridCell = true;
	if (!$$parentCell.jquery) $$parentCell = $($$parentCell);
	var ctrl = _createControl(controller, null, ctrlArticle, ctrlProto, options);
	ctrl.buildHtml($$parentCell, rowData, options);
	// Destroy the control without removing dom element
	ctrl.detachElmt();
};
/**
 * Create a control
 * 	Add control to controller
 * 	Append control as a child of parentStructElmt
 *  options: isGridCell : true/false
 */
var _createControl = function(controller, parentStructElmt, article, prototype, options) {
	if (!controller) throw new Error("Control - null parent or controller");
	options = options || {};
	var c;
	var type = prototype.data("$type");
	switch (type) {
		case _types.string:
		case _types.password:
			switch (prototype.data("$format")) {
				case "$phone":
					c = new _ctor.PhoneField(controller, article, prototype, options);
					break;
				case "$email":
					c = new _ctor.EmailField(controller, article, prototype, options);
					break;
				default:
					c = new _ctor.Alphanum(controller, article, prototype, options);
			}
			break;
		case _types.integer:
		case _types.real:
		case _types.decimal:
			if (article.$gauge) {
				c = new _ctor.Gauge(controller, article, prototype, options);
			} else {
				c = new _ctor.Numeric(controller, article, prototype, options);
			}
			break;
		case _types.quantity:
			c = new _ctor.Quantity(controller, article, prototype, options);
			break;
		case _types.choice:
			c = new _ctor.Combo(controller, article, prototype, options);
			break;
		case _types.boolean:
			c = new _ctor.CheckBox(controller, article, prototype, options);
			break;
		case _types.date:
		case _types.time:
		case _types.datetime:
			c = new _ctor.Date(controller, article, prototype, options);
			break;
		case _types.reference:
			c = new _ctor.Reference(controller, article, prototype, options);
			break;
		case _types.array:
			if (prototype.data("$cube")) {
				c = new _ctor.CubeChart(controller, article, prototype, options);
			} else {
				c = new _ctor.Array(controller, article, prototype, options);
			}
			break;
		case _types.vignette:
			c = new _ctor.Vignette(controller, article, prototype, options);
			break;
		case _types.image:
		case _types.doc:
		case _types.binary:
			c = new _ctor.Binary(controller, article, prototype, options);
			break;
		case _types.icon:
			c = new _ctor.Icon(controller, article, prototype, options);
			break;
		case _types.button:
			c = new _ctor.Button(controller, article, prototype, options);
			break;
		case _types.textRtf:
		case _types.textHtml:
		case _types.textPlain:
			c = new _ctor.Text(controller, article, prototype, options);
			break;
		case _types.soapObject:
			throw new Error("not implemented");
			break;
		case _types.unfound:
			c = new _ctor.FieldUnfound(controller, article, prototype, options);
			break;
		default:
			c = new _ctor.TypeUnknown(controller, article, prototype, options);
			break;
	}
	if (options && options.isGridCell === true) {
		// Nothing - Control is used only to build html - TODO use html Builders instead of control
	} else {
		if (parentStructElmt) {
			// Add control elmt in a tree
			parentStructElmt.appendStructElmt(c);
			// Add control to controller
			controller.addControl(c);
		} else {
			throw new Error("Parent's control is mandatory");
		}
	}
	return c;
};
var _createLayout = function(controller, parentStructElmt, article, opts) {
	var type = article.$layoutType || "stack";
	var klass;
	if (type == "stack") {
		klass = _ctor.LayoutStack;
	} else if (type == "row") {
		klass = _ctor.LayoutRow;
	} else if (type == "tab") {
		klass = _ctor.LayoutTab;
	} else if (type == "hub") {
		klass = _ctor.LayoutHub;
	} else if (type == "hubGroup") {
		klass = _ctor.LayoutHubGroup;
	} else if (type == "tile") {
		klass = _ctor.LayoutTile;
	} else if (type == "cell") {
		klass = _ctor.LayoutCell;
	} else {
		log && log("layout type=" + type + " is not implemented");
		return null;
	}
	var l = new klass(controller, _types.layout, article, opts);
	if (parentStructElmt) {
		parentStructElmt.appendStructElmt(l);
	} else {
		// Root layout
		l.parent = controller;
	}
	return l;
};
/**
 * Creates page static controls
 */
var _createPageControl = function(id, controller, options) {
	var c;
	switch (id) {
		case _types.pageheader:
			c = new _ctor.PageHeader(controller, _types.pageheader, options);
			break;
		case _types.pagefooter:
			c = new _ctor.PageFooter(controller, _types.pagefooter, options);
			break;
		case _types.pageactionpanel:
			switch (controller.state.type) {
				case "dashboard":
					c = new _ctor.DashboardActionPanel(controller, _types.pageactionpanel, options);
					break;
				case "regular":
					c = new _ctor.RegularActionPanel(controller, _types.pageactionpanel, options);
					break;
				default:
					throw new Error("Unknown page type[" + controller.state.type + "]");
					break;
			}
			break;
		case _types.navigationpanel:
			c = new _ctor.NavigationPanel(controller, _types.navigationpanel, options);
			break;
		default:
			throw new Error("Unknown static control[" + id + "]");
			break;
	}
	if (c) controller.addControl(c);
	return c;
};

exports.createControl = _createControl;
exports.createLayout = _createLayout;
exports.createPageControl = _createPageControl;
exports.appendField2Cell = _appendField2Cell;

exports.type = function(name) {
	return _types[name];
};
exports.setImpl = function(name, ctor) {
	_ctor[name] = ctor;
};