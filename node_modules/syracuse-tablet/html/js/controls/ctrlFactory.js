"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("factory");

var _ctor = {};

var _types = {
	// official types
	string: "application/x-string",
	password: "application/x-password",
	text: "text/plain",
	integer: "application/x-integer",
	real: "application/x-real",
	decimal: "application/x-decimal",
	quantity: "application/x-quantity",
	choice: "application/x-choice",
	boolean: "application/x-boolean",
	date: "application/x-date",
	time: "application/x-time",
	datetime: "application/x-datetime",
	reference: "application/x-reference",
	array: "application/x-array",
	// our own types
	vignette: "application/x-vignette",
	layout: "application/x-layout",
	pageheader: "application/x-pageheader"
};
/**
 * Create a control for a grid
 * 	TODO - Use an HTML builder instead of a control
 */
var _createFieldDomElmt = function(controller, ctrlArticle, ctrlProto, ctrlData, options) {
	var ctrl = _createControl(controller, null, ctrlArticle, ctrlProto);
	ctrl.buildHtml($parentCell, ctrlData, options);
};
/**
 * Create a control
 * 	Add control to controller
 * 	Append control as a child of parentStructElmt
 */
var _createControl = function(controller, parentStructElmt, article, prototype) {
	if (!controller) throw new Error("Control - null parent or controller");
	var c;
	var type = prototype.data("$type");
	switch (type) {
		case _types.string:
		case _types.password:
		case _types.text:
			switch (prototype.data("$format")) {
				case "$phone":
					c = new _ctor.PhoneField(controller, article, prototype);
					break;
				case "$email":
					c = new _ctor.EmailField(controller, article, prototype);
					break;
				default:
					c = new _ctor.Alphanum(controller, article, prototype);
			}
			break;
		case _types.integer:
		case _types.real:
		case _types.decimal:
		case _types.quantity:
			c = new _ctor.Numeric(controller, article, prototype);
			break;
		case _types.choice:
			c = new _ctor.Combo(controller, article, prototype);
			break;
		case _types.boolean:
			c = new _ctor.CheckBox(controller, article, prototype);
			break;
		case _types.date:
		case _types.time:
		case _types.datetime:
			c = new _ctor.Date(controller, article, prototype);
			break;
		case _types.reference:
			c = new _ctor.Reference(controller, article, prototype);
			break;
		case _types.array:
			if (prototype.data("$cube")) {
				c = new _ctor.CubeChart(controller, article, prototype);
			} else if (prototype.isQuery()) {
				c = new _ctor.ArrayQuery(controller, article, prototype);
			} else if (prototype.isLookup()) {
				c = new _ctor.ArrayQLookup(controller, article, prototype);
			} else {
				// Child array
				c = new _ctor.Array(controller, article, prototype);
			}
			break;
		case _types.vignette:
			c = new _ctor.Vignette(controller, article, prototype);
			break;
		default:
			c = new _ctor.TypeUnknown(controller, article, prototype);
			break;
	}
	if (parentStructElmt) {
		parentStructElmt.appendStructElmt(c);
		controller.addControl(c);
	} else {
		throw new Error("Parent's control is mandatory");
	}
	return c;
};
var _createLayout = function(controller, parentStructElmt, article) {
	var type = article.$layoutType || "stack";
	var klass;
	if (type == "stack") {
		klass = _ctor.LayoutStack;
	} else if (type == "row") {
		klass = _ctor.LayoutRow;
	} else if (type == "tab") {
		klass = _ctor.LayoutTab;
	} else if (type == "hub") {
		klass = _ctor.LayoutHub;
	} else if (type == "hubGroup") {
		klass = _ctor.LayoutHubGroup;
	} else {
		log && log("layout type=" + type + " is not implemented");
		return null;
	}
	var l = new klass(controller, _types.layout, article);
	if (parentStructElmt) {
		parentStructElmt.appendStructElmt(l);
	} else {
		// Root layout
		l.parent = controller;
	}
	return l;
};

var _createPageHeader = function(controller) {
	var c = new _ctor.PageHeader(controller, _types.pageheader);
	controller.addControl(c);
	return c;
};

exports.createControl = _createControl;
exports.createLayout = _createLayout;
exports.createPageHeader = _createPageHeader;

exports.type = function(name) {
	return _types[name];
};
exports.setImpl = function(name, ctor) {
	_ctor[name] = ctor;
};