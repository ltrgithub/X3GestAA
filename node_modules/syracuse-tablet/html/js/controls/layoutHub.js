"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/layoutBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');

/**
 * Top level layout node that must only contain layoutHubGroups as children
 * This "hub" expands horizontally and only uses the available vertical space
 * Use this to define pages which only scroll horizontally
 */
var _Klass = utils.defineClass(
	function(controller, type, article) {
		var self = this;
		Base.call(self, controller, type, article);

		/*
		 * CSS-DEPENDEND: Needs to be adjusted on major size or page layout changes
		 */
		self.pageContentHeightSubstraction = 160;
		self.minLandscapeHeight = 550;
	}, Base, {
		buildHtml: function(parent, controllerDao, buildOptions) {
			var self = this;

			self.container = uiUtils.createDomElement('div', ["container", "s-m-layout", "s-m-hub"], null, {
				"id": this.id
			});

			this.children.forEach(function(child) {
				var coreItemClassList = ["s-m-layout-cell"];
				child.buildHtml(self.container, controllerDao);
			});

			self.onResizeHandler = self.onResizeWindow.bind(self);
			$(window).on("resize", self.onResizeHandler);
			parent.appendChild(self.container);

			self._calculateLayout();

		},
		onResizeWindow: function() {
			var self = this;
			self._calculateLayout();
		},
		_calculateLayout: function() {
			var self = this;

			var w = window.innerWidth;
			var h = window.innerHeight;

			var orientation = (w > h && h >= self.minLandscapeHeight) ? "landscape" : "portrait";

			h = h - self.pageContentHeightSubstraction;
			self.container.style.height = h + "px";

			var posX = 0;
			var posY = 0;
			this.children.forEach(function(child) {
				child.calculateLayout({
					posX: posX,
					posY: posY,
					maxHeight: h,
					maxWidth: w,
					orientation: orientation
				});

				if (orientation === "landscape") {
					posX += child.getWidth() + 10;
				} else {
					posY += child.getHeight() + 10;
				}
			});

			setTimeout(function() {
				self.onLayoutChange();
			}, 100);
		},
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			$(window).off("resize", self.onResizeHandler);
		}
	});

exports.Klass = _Klass;