"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/ctrlArrayBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');

/**
 * Array control for a QUERY FACET
 */
var _Klass = utils.defineClass(
	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
		/*
		 * CSS-DEPENDEND: Needs to be adjusted on major size or page layout changes
		 */
		self.pageContentHeightSubstraction = 190;
		self.minLandscapeHeight = 550;
		self._itemWidth = 140;
		self._itemHeight = 140;
		self._itemSpacing = 10;
	}, Base, {
		/**
		 * Build Html by using a builder class
		 */
		buildHtml: function(parent, controllerDao, buildOptions) {
			var self = this;

			self.rows = self.getRows(controllerDao);

			if (self.controller.isVignette()) {
				self.container = uiUtils.createDomElement('div', ["s-m-control", "s-m-grid"], null, {
					"id": this.id
				});
				self._createColumnInfo();
				self._buildTable();
			} else {

				self.container = uiUtils.createDomElement('div', ["s-m-control", "s-m-grid-horizontal"], null, {
					"id": this.id
				});

				self.domItems = uiUtils.createDomElement('div', ["s-m-control", "s-m-grid-horizontal-items"], null, {
					"id": this.id
				});

				self.container.appendChild(self.domItems);
				self.onResizeHandler = self.onResizeWindow.bind(self);
				$(window).on("resize", self.onResizeHandler);

				self.rows.forEach(function(child) {
					var tile = uiUtils.createDomElement('div', ["s-m-control", "s-m-grid-horizontal-item"]);
					child.domItem = tile;
					self._buildItem(child);
					self.domItems.appendChild(tile);
				});

				self.onResizeWindow();
				self._buildPagingLinks();
			}

			parent.appendChild(self.container);
		},

		_buildItem: function(item) {
			var self = this;
			var parent = item.domItem;

			var links = self.itemProto.data("$links", item);
			if (links && links.$details) {
				var link = sdataUtils.getLinkInfo(links.$details.$url, item);
				var title = self.itemProto.data("$value", item);
				var linkDom = uiUtils.createDomElement("a", null, null, {
					"href": "#",
					"data-nav": link.page,
					"data-sdata-url": link.sDataUrl
				}, parent);

				uiUtils.createDomElement("span", ["s-m-grid-horizontal-item-link"], title, null, linkDom);
			}
		},

		_buildPagingLinks: function() {
			var self = this;
			self.pagingLinks = uiUtils.createDomElement('div', ["s-m-control", "s-m-grid-horizontal-links"], null, null, self.container);
			if (self._data.$links) {
				["$first", "$previous", "$next", "$last", "$more"].forEach(function(linkName) {
					var link = self._data.$links[linkName];
					if (link) {
						var linkInfo = sdataUtils.getLinkInfo(link.$url);
						var d = uiUtils.createDomElement('a', ["s-m-control", "s-m-grid-horizontal-link"],
							linkName, {
								"data-nav": linkInfo.page,
								"data-sdata-url": link.$url
							}, self.pagingLinks);
					}
				});
			}
		},

		onResizeWindow: function() {
			var self = this;
			var w = window.innerWidth;
			var h = window.innerHeight;

			h = h - self.pageContentHeightSubstraction;
			self._maxItemHeight = h;
			self.domItems.style.height = (self._maxItemHeight - 20) + "px";

			var x = 0;
			var y = 0;
			self.rows.forEach(function(child) {
				if (y + self._itemHeight > self._maxItemHeight) {
					y = 0;
					x += self._itemWidth + self._itemSpacing;
				}
				child.domItem.style.left = x + "px";
				child.domItem.style.top = y + "px";
				child.domItem.style.width = self._itemWidth + "px";
				child.domItem.style.height = self._itemHeight + "px";
				y += self._itemHeight + self._itemSpacing;
			});
		},

		getRows: function(controllerDao) {
			var d = this._getData(controllerDao);
			return d && d.$resources ? d.$resources : [];
		},
		_getData: function(controllerDao) {
			var self = this;
			if (self._data) return self._data;
			self._data = controllerDao.getQueryData(self.prototype);
			return self._data;
		},
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			$(window).off("resize", self.onResizeHandler);
		}
	});

exports.Klass = _Klass;