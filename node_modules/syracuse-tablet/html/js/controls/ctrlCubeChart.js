"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ctrl");
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');

/**
 * x-array control class
 */
var _Klass = utils.defineClass(
	function(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
		self.itemProto = prototype.getPrototype("$item");
	}, Base, {
		/**
		 * Build Html by using a builder class
		 */
		buildHtml: function(parent, controllerDao, buildOptions) {
			var self = this;

			self.container = uiUtils.createDomElement('div', ["s-m-control", "s-m-grid"], null, {
				"id": this.id
			});

			var title = "CHART:" + self.prototype.property(self.article.$bind, "$title");
			if (title) {
				var header = uiUtils.createDomElement('div', ["s-m-grid-title"]);
				header.textContent = title;
				self.container.appendChild(header);
			}

			self.rows = self.getRows(controllerDao);
			self._createColumnInfo();
			self._buildTable();
			parent.appendChild(self.container);
		},

		// get columns that should be displayed
		_createColumnInfo: function() {
			var self = this;
			self.columnInfo = [];

			var props = self.itemProto.data("$properties");
			var keys = Object.keys(props);
			keys.forEach(function(key) {
				var item = props[key];
				if (["application/x-array", "application/x-password"].indexOf(item.$type) === -1 && !item.$isExcluded) {
					self.columnInfo.push({
						"$bind": key,
						"$item": item
					});
				}
			});
		},

		_buildTable: function() {
			var self = this;
			self.table = uiUtils.createDomElement('table', ["table table-hover table-condensed s-m-grid-body"]);

			self._buildTableHead();
			self._buildTableBody();
			self.container.appendChild(self.table);
		},

		_buildTableHead: function() {
			var self = this;
			self.tableHead = uiUtils.createDomElement('thead');
			self.table.appendChild(self.tableHead);
			var tr = uiUtils.createDomElement('tr', ['s-m-grid-header-row']);
			self.tableHead.appendChild(tr);
			self.columnInfo.forEach(function(col) {
				var th = uiUtils.createDomElement('th', ['s-m-grid-header-cell']);
				var title = utils.parseExpression(col.$item.$title || "", null, self.prototype);
				th.textContent = title;
				tr.appendChild(th);
			});
		},

		_buildTableBody: function() {
			var self = this;
			self.tableBody = uiUtils.createDomElement('tbody');
			self.table.appendChild(self.tableBody);

			// Build rows
			self.rows.forEach(self._buildTableRow, self);
		},

		_buildTableRow: function(dao, idx) {
			var self = this;
			var attrs = {};

			var links = self.itemProto.data("$links");
			if (links && links.$details) {
				var link = sdataUtils.getLinkInfo(links.$details.$url, dao);
				attrs["href"] = "#";
				attrs["data-nav"] = link.page;
				attrs["data-sdata-url"] = link.sDataUrl;

			}
			var tr = uiUtils.createDomElement('tr', ['s-m-grid-body-row'], null, attrs);
			self.columnInfo.forEach(function(col) {
				var td = uiUtils.createDomElement('td', ['s-m-grid-body-cell']);
				var fieldProto = self.itemProto.getPrototype(col.$bind);
				var ctrl = ctrlFactory.createControl(self.controller, self, {
					"$bind": col.$bind
				}, fieldProto);
				ctrl.buildHtml(td, dao, {
					isGridCell: true
				});
				tr.appendChild(td);
			});
			self.tableBody.appendChild(tr);
		},

		/**
		 * Returns an array that contains rows data
		 * Each row data is a dao - see DaoSdata.getQueryData
		 */
		getRows: function(controllerDao) {
			var self = this;
			var d = self._getData(controllerDao);
			return d && d.$resources ? d.$resources : [];
		},
		_getData: function(controllerDao) {
			var self = this;
			if (self._data) return self._data;
			self._data = controllerDao.getArrayData(self.article.$bind, self.itemProto);
			return self._data;
		}
	});

exports.Klass = _Klass;