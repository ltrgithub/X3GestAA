"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/layout/layoutBase').Klass;

var _Klass = utils.defineClass(function LayoutTile(controller, type, article, opts) {
	var self = this;
	Base.call(self, controller, type, article, opts);
}, Base, {
	buildHtml: function($$parent, controllerDao, buildOptions) {
		var self = this;
		Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);
		self.$$elmt.addClass("s-m-tile");
		self.$$body = self.$$elmt;
		self._setCellColorClass();
		self.buildChildrenHtml(self.$$body, controllerDao, buildOptions);
	},
	_setCellColorClass: function() {
		var self = this;
		var color = self.article.$bgColor;
		if (!color) {
			color = "darkgrey";
		}
		self.$$elmt.addClass("s-m-bg-" + color);
	},
	/**
	 * Set attribute according to sizeInfo given by layoutHub
	 * Shit (padding top) if there's a title
	 */
	calculateLayout: function(x, y, authSize, sizeInfo) {
		this.$$elmt.css({
			left: x + "px",
			top: y + "px",
			width: sizeInfo.width + "px",
			height: sizeInfo.height + "px",
			position: "absolute",
			"padding-left": sizeInfo.paddingX + "px",
			"padding-right": sizeInfo.paddingX + "px",
			"padding-bottom": sizeInfo.paddingY + "px",
			"padding-top": ((this.$$header ? this.$$header.height() : 0) + sizeInfo.paddingY) + "px"
		});
		this.$$elmt.addClass(authSize);
	},
	getAuthoringSize: function() {
		return (this.article && this.article.$size) || "medium";
	},
	/**
	 * Allows a child to add an action's icon -> Vignette
	 */
	iconActionAdd: function(action, control, icon, enabled) {
		// We store the icon to not add it multiple time
		if (this._$$actionIcon) return this._$$actionIcon;
		this._ensureHeader();
		this._iconActs = {};
		icon = icon || "";
		this._$$actionIcon = $('<icon data-action="' + action + '" data-control-id="' + control.id + '" class="s-m-tile-act ' + icon + '" style="float:right"></span>');
		this._ensureHeader().append(this._$$actionIcon);
		this._$$actionIcon = this.iconActionToggleStatus(action, enabled === true);
		return this._$$actionIcon;
	},
	/**
	 * Allows a child to toggle the status of the action's icon
	 * Add/remove s-m-enabled status class on $$elmt
	 * Toggle icons if needed
	 * if css!=null
	 * 		css.remove 	icon classes to remove
	 * 		cc.add 		icon classes to add
	 */
	iconActionToggleStatus: function(action, enabled, iconCss) {
		if (!this.$$header) return;
		this.$$elmt.toggleClass("s-m-enabled", enabled);
		var $$res = this.$$header.find('[data-action="' + action + '"]');
		if (iconCss && $$res) {
			if (iconCss.remove) {
				$$res.removeClass(iconCss.remove);
			}
			if (iconCss.add) {
				$$res.addClass(iconCss.add);
			}
		}
		return $$res;
	}
});

exports.Klass = _Klass;