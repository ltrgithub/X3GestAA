"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/layout/layoutBase').Klass;

var _Klass = utils.defineClass(function LayoutTile(controller, type, article, opts) {
	Base.call(this, controller, type, article, opts);
	// Set the default color - Forced to be modified by authoring	
	if (article.$bgColor == null) {
		article.$bgColor = globals.TILEDEFCOLOR;
	}
	article.$bgColor = article.$bgColor.toLowerCase();
}, Base, {

	initReuseProperties: function() {
		Base.prototype.initReuseProperties.call(this);
	},
	buildHtml: function($$parent, controllerDao, buildOptions) {
		var self = this;
		Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);
		self.$$elmt.addClass("s-m-tile");
		self.$$body = self.$$elmt;
		self._setCellColorClass();
		self.buildChildrenHtml(self.$$body, controllerDao, buildOptions);
	},
	_setCellColorClass: function() {
		var bg = (this.article.$bgColor || "").toLowerCase();
		if (bg === "transparent" || bg.length === 0) {
			// No color if bg == "" or transparent color for compatibility
			return;
		}
		bg = "s-m-color-" + bg;
		this.$$elmt.addClass("s-m-bg " + bg);
	},
	/**
	 * Set attribute according to sizeInfo given by layoutHub
	 * Shit (padding top) if there's a title
	 */
	calculateLayout: function(x, y, authSize, sizeInfo) {
		var css = {
			left: x + "px",
			top: y + "px",
			width: sizeInfo.width + "px",
			height: sizeInfo.height + "px",
			position: "absolute",
			"padding-left": sizeInfo.paddingX + "px",
			"padding-right": sizeInfo.paddingX + "px",
			"padding-bottom": sizeInfo.paddingY + "px",
			"padding-top": ((this.$$header ? this.$$header.height() : 0) + sizeInfo.paddingY) + "px"
		};
		this.$$elmt.css(css);
		this.$$elmt.addClass(authSize);
	},
	getAuthoringSize: function() {
		return (this.article && this.article.$size) || "medium";
	},
	/**
	 * Called only for arrays nested in query/stats/requests
	 * Used to adapt the behavior according to the kind of hosted array
	 * typeArray: chart/carousel
	 * Chart:
	 * 	remove the default color for charts
	 * 	Hack: Done by programming since we don't manage default color by css
	 * 	Add s-m-chart to tune display fo these tiles by css
	 * Carousel:
	 * 	Remove fixed height - To improve
	 */
	notifSpecialArrayHosted: function(typeArray) {
		if (!this.$$elmt) return;
		// For authoring we can switch from carousel to chart to table...
		this.$$elmt.removeClass("s-m-carousel s-m-chart");
		if (typeArray === "carousel") {
			// set a class to remove padding by css to better fit
			this.$$elmt.addClass("s-m-carousel");
		} else if (typeArray === "chart") {
			// Remove Bg color and set a class to add border by css
			this.$$elmt.removeClass("s-m-bg s-m-color-" + this.article.$bgColor).addClass("s-m-chart");
		}
	}
});

exports.Klass = _Klass;