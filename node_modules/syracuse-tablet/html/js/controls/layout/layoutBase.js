"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/structElmt').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

var _Klass = utils.defineClass(function LayoutBase(controller, type, article, opts) {
	var self = this;
	Base.call(self, controller, type, article, opts);
	self.title = article.$title;
}, Base, {
	/**
	 * Init the properties to allow reuse of this control
	 */
	initReuseProperties: function() {
		Base.prototype.initReuseProperties.call(this);
		this.$$header = null;
	},
	destroy: function() {
		var self = this;
		Base.prototype.destroy.call(self);
	},
	createId: function(typeName) {
		var self = this;
		return utils.readableuid(typeName);
	},
	buildHtml: function($$parent, controllerDao, buildOptions) {
		var self = this;
		Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);
		self.createRootElement(["s-m-layout"], $$parent);

		if (self.article.$title && (buildOptions == null || buildOptions.noTitle !== true)) {
			self.buildTitle();
		}
		if (self.article.$icon && (buildOptions == null || buildOptions.noIcon !== true)) {
			self.buildIcon();
		}
	},
	/**
	 * Needed to call afterRender in mode generator - isHtmlGenerator
	 * afterRender applies the meta-data - Used to apply meta-data in cards
	 */
	buildChildrenHtml: function($parent, controllerDao, buildOptions) {
		var self = this;
		if (self.children) {
			$.each(self.children, function(index, child) {
				child.buildHtml($parent, controllerDao, buildOptions);
				/**
				 * TODO - call build html inside a render method that call a process before (sets Dao and after removes dao and calls afterRender
				 */
				if (child.afterRender && buildOptions && (buildOptions.isHtmlGenerator === true || buildOptions.afterRender === true)) {
					child.afterRender(buildOptions);
				}
			});
		}
	},
	onResize: function(context) {
		if (!this.children) return;
		this.children.forEach(function(child) {
			if (child.onResize) child.onResize(context);
		});
	},
	// $$root to force the rot if it's not $$elmt - cell
	_ensureHeader: function($$root) {
		if (!this.$$header) {
			this.$$header = $('<header>').prependTo($$root || this.$$elmt);
		}
		return this.$$header;
	},
	buildIcon: function($$rootLyt, $$parent, controllerDao, destroyAfter) {
		this._ensureHeader();
		var icon = fontUtils.getIconByName(this.article.$icon);
		if (icon) {
			this.$$header.prepend('<icon class="s-m-ttl-icon ' + icon + '">');
		}
	},
	buildTitle: function($$rootLyt, $$parent, controllerDao, destroyAfter) {
		this._ensureHeader();
		this.$$header.text(this.getArticleText("$title"));
	},
	// Only hub layout is able to scroll
	getGestureMgr: function() {
		return null;
	},
	isLayout: function() {
		return true;
	},
	isHubLayout: function() {
		return false;
	}
});

exports.Klass = _Klass;