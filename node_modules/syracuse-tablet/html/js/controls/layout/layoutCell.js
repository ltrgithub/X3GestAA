"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/layout/layoutBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');

var _sizes = [{
	$prop: "$widthXs",
	$prefix: "col-xs-"
}, {
	$prop: "$widthSm",
	$prefix: "col-sm-"
}, {
	$prop: "$widthMd",
	$prefix: "col-md-"
}, {
	$prop: "$widthLg",
	$prefix: "col-lg-"
}];

var _Klass = utils.defineClass(function LayoutCell(controller, type, article, opts) {
	Base.call(this, controller, type, article, opts);
	// Set the default color - Forced to be modified by authoring
	if (article.$bgColor == null) {
		article.$bgColor = globals.CELLDEFCOLOR;
	}
	article.$bgColor = article.$bgColor.toLowerCase();
}, Base, {
	/**
	 * Init the properties to allow reuse of this control
	 */
	initReuseProperties: function() {
		Base.prototype.initReuseProperties.call(this);
		this.$$cell = null;
	},
	buildHtml: function($$parent, controllerDao, buildOptions) {
		Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions);
		this.$$elmt.addClass("s-m-cell");
		if (this.controller.isDashboard()) {
			// To identify in css cells of a dashboard from cell of a page
			this.$$elmt.addClass("dashboard");
		}
		this.$$cell = $(uiUtils.createDomElement("div", ["cell"], null, null, this.$$elmt));
		this._setCellColorClass();
		this._setCellSizeClasses();
		this.buildChildrenHtml(this.$$cell, controllerDao, buildOptions);
	},
	_setCellColorClass: function() {
		var bg = this.article.$bgColor;
		if (bg === "transparent" || bg.length === 0) {
			// No color if bg == "" or transparent color for compatibility
			return;
		}
		this.$$cell.addClass("s-m-bg s-m-color-" + bg);
	},
	_setCellSizeClasses: function() {
		var self = this;
		var last = 12;
		var match = true;

		_sizes.forEach(function(size) {
			match = match || self.article[size.$prop];
		});

		if (!match) { // no size set, generate default
			self.article = {
				"$widthXs": 12,
				"$widthSm": 6,
				"$widthMd": 4,
				"$widthLg": 3
			};
		}

		_sizes.forEach(function(size) {
			var val = self.article[size.$prop];
			if (val != null && val > 0 && val <= 12) {
				last = val;
			} else {
				val = last;
			}
			var cls = size.$prefix + val;
			self.$$elmt.addClass(cls);
		});
	},
	_ensureHeader: function() {
		// header is created under $$cell - used by vignette to display icon on/off like in tiles
		return Base.prototype._ensureHeader.call(this, this.$$cell);
	},
	/**
	 * Used to remove the default color for charts
	 * Hack: Done by programming since we don't manage default color by css
	 * Add s-m-chart to tune display fo these tiles by css
	 */
	notifChartHosted: function() {
		if (!this.$$cell) return;
		this.$$cell.removeClass("s-m-bg s-m-color-" + this.article.$bgColor);
		this.$$elmt.addClass("s-m-chart");
	}
});

exports.Klass = _Klass;