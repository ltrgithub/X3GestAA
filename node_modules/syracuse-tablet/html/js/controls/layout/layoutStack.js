"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/layout/layoutBase').Klass;
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

/**
 * cssOptions
 * 		cssLayout, cssCell: class added to default ones
 * default classes can  be overridden
 */
var _Klass = utils.defineClass(
	function LayoutStack(controller, type, article, opts) {
		var self = this;
		Base.call(self, controller, type, article, opts);
	}, Base, {
		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);

			self.$$elmt.addClass("s-m-stack");
			if (buildOptions && buildOptions.makeFullHeight === true) {
				self.$$elmt.height("100%");
			}

			var $collapsible = (self.article && self.article.$collapsible) || "notcollapsible";
			var $title = (self.article && self.article.$title) || "";
			if ($collapsible !== "notcollapsible" || $title.length > 0) {
				self._addHeader($collapsible, $title);
			}
			self.$$content = $("<content>");
			self.$$elmt.append(self.$$content);
			self.buildChildrenHtml(self.$$content, controllerDao, buildOptions);
			self._updateCollapseState();
		},

		buildTitle: function($$rootLyt, $$parent, controllerDao, destroyAfter) {
			// When there is a $title attribute in the article,
			// layoutBase will create the title for all child classes
			// Since a stack layout generates a "special" title which allows collapsing, we override
			// the function here to not get two titles
		},

		_addHeader: function(state, title) {
			var self = this;
			self.$$header = $('<header>').text(title);
			if (state !== "notcollapsible") {
				self.$$btnCollapse = $('<btn class="' + state + '">').attr({
					"data-action": "collaspe",
					"data-control-id": this.id
				}).appendTo(self.$$header);
			}
			self.$$elmt.append(self.$$header);
		},

		_actCollaspe: function(forceCollapse) {
			if (!this.$$btnCollapse) return;
			if (forceCollapse) this.$$btnCollapse.removeClass("collapsed expanded");
			this.$$btnCollapse.toggleClass("collapsed").toggleClass("expanded");
			this._updateCollapseState();
			/**
			 * We need to update the scroller because height has changed
			 */
			notifications.notifyController("sm.page.updt.scroll", this.controller, true);
			if (!this.$$btnCollapse.hasClass("collapsed")) {
				/**
				 * We need to notify elements like array to refresh them - They are not displayed if !.is(":visible")
				 */
				notifications.publish("sm.layout.expanded");
			}
		},

		_updateCollapseState: function() {
			var self = this;
			if (!self.$$btnCollapse || !self.$$content) {
				return;
			}
			var collapse = self.$$btnCollapse.hasClass("expanded");
			self.$$content.toggle(collapse);
		},

		getAuthState: function(dirtyKeys) {
			var self = this;
			// If collapsed state has been changed, we do not store that state
			if (dirtyKeys.$collapsible) {
				return null;
			}
			return {
				collapsed: self.$$btnCollapse && self.$$btnCollapse.hasClass("collapsed") || false
			};
		},

		setAuthState: function(state) {
			this._actCollaspe(state && state.collapsed);
		}
	});

exports.Klass = _Klass;