"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/layout/layoutBase').Klass;

/**
 * cssOptions
 * 		cssLayout, cssCell: class added to default ones
 * default classes can  be overridden
 */
var _Klass = utils.defineClass(
	function LayoutStack(controller, type, article, opts) {
		var self = this;
		Base.call(self, controller, type, article, opts);
	}, Base, {
		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);

			self.$$elmt.addClass("s-m-stack");
			if (buildOptions && buildOptions.makeFullHeight === true) {
				self.$$elmt.height("100%");
			}

			var $collapsible = (self.article && self.article.$collapsible) || "notcollapsible";
			//			if (globals.isAuthoringActive()) {
			//				$collapsible = "expanded";
			//			}
			var $title = (self.article && self.article.$title) || "";
			if ($collapsible !== "notcollapsible" || $title.length > 0) {
				self._addHeader($collapsible, $title);
			}


			self.$$content = $("<content>");
			self.$$elmt.append(self.$$content);
			if (self.children && self.children.length > 0) {
				$.each(self.children, function(index, child) {
					child.buildHtml(self.$$content, controllerDao, buildOptions);
				});
			}

			self._updateCollapseState();
		},

		_addHeader: function(state, title) {
			var self = this;
			self.$$header = $('<header>');
			self.$$header.text(title);

			if (state !== "notcollapsible") {
				self._expandClick = self._onClickExpand.bind(self);
				self.$$btnCollapse = $('<btn class="' + state + '">');
				self.$$btnCollapse.on('click', self._expandClick);
				self.$$header.append(self.$$btnCollapse);
			}
			self.$$elmt.append(self.$$header);
		},

		_onClickExpand: function() {
			var self = this;
			if (self.$$btnCollapse.hasClass("collapsed")) {
				self.$$btnCollapse.removeClass("collapsed");
				self.$$btnCollapse.addClass("expanded");
			} else {
				self.$$btnCollapse.removeClass("expanded");
				self.$$btnCollapse.addClass("collapsed");
			}
			self._updateCollapseState();
		},

		_updateCollapseState: function() {
			var self = this;
			if (!self.$$btnCollapse || !self.$$content) {
				return;
			}
			if (self.$$btnCollapse.hasClass("collapsed")) {
				self.$$content.css({
					display: "none"
				});
			} else {
				self.$$content.css({
					display: "block"
				});
			}
		},

		destroy: function() {
			var self = this;
			if (self._expandClick && self.$$btnCollapse) {
				self.$$btnCollapse.off("click", self._expandClick);
				self._expandClick = null;
			}
			Base.prototype.destroy.call(self);
		}
	});

exports.Klass = _Klass;