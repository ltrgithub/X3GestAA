"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/layout/layoutBase').Klass;
var layoutHubGroup = require('syracuse-tablet/html/js/controls/layout/layoutHubGroup');
var uiRect = require('syracuse-tablet/html/js/ui/rect');
var HammerScroller = require('syracuse-tablet/html/js/controls/hammerScroller').Klass;

var _tileMargin = 10;
/**
 * Top level layout node that must only contain layoutHubGroups as children
 * This "hub" expands horizontally and only uses the available vertical space
 * Use this to define pages which only scroll horizontally
 */
var _Klass = utils.defineClass(
	function LayoutHub(controller, type, article, opts) {
		var self = this;
		Base.call(self, controller, type, article, opts);
		this._gestureMgr = null;
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this._gestureMgr) {
				this._gestureMgr.destroy();
				this._gestureMgr = null;
			}
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			buildOptions = buildOptions || {};
			buildOptions.noTitle = true;
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);
			self.$$elmt.addClass("s-m-hub");
			self.$$scrollElmt = $('<div style="position:relative; height:100%; width:100%">').appendTo(self.$$elmt);
			self.children.forEach(function(child) {
				child.buildHtml(self.$$scrollElmt, controllerDao, buildOptions);
			});
			if (self._gestureMgr) self._gestureMgr.destroy();
			self._gestureMgr = new HammerScroller(self.$$scrollElmt, self.getScrollDir(), 0);
		},
		/**
		 * Resize handler called by window.resize
		 */
		onResize: function() {
			var self = this;
			/**
			 * Returns the visible rectangle of main page content
			 *
			 */
			var parentRect = self.controller.getMainContentRect();
			var pos = self.$$elmt.position();
			var w = parentRect.width;
			var h = parentRect.height - pos.top;
			var rel = w / h;
			var orientation = (rel > 1.2 && h >= layoutHubGroup.minLandscapeHeigth) ? "landscape" : "portrait";
			self.$$elmt.height(h);
			var posX = 0;
			var posY = 0;
			var opts;
			var width = 0,
				w;
			self.children.forEach(function(child) {
				opts = {
					posX: posX,
					posY: posY,
					maxHeight: h,
					maxWidth: w,
					orientation: orientation
				};
				child.onResize(opts);
				w = child.getWidth();
				if (orientation === "landscape") {
					posX += w + _tileMargin;
				} else {
					posY += w + _tileMargin;
				}
				width += w + _tileMargin;
			});
			// Used by scroller
			var o = self.$$elmt.offset();
			self.insideRect = uiRect.newRect(o.top, o.left, self.$$elmt.height(), width);
			self.$$scrollElmt.width(width);
			var viewRect = self.getScrollViewRect();
			if (viewRect) {
				self._gestureMgr.init(viewRect, self.getScrollDir());
			} else {
				self._gestureMgr.reset();
			}
		},
		getScrollDir: function(orientation) {
			return orientation && orientation === "portrait" ? "v" : "h";
		},
		getScrollViewRect: function() {
			var scrollRect = uiRect.elmtRect(this.$$scrollElmt, "outer");
			var viewRect = scrollRect.intersectRect(uiRect.elmtRect(this.$$elmt, "outer"));
			return viewRect != null && !viewRect.contains(scrollRect) ? viewRect : null;
		},
		getScrollOffset: function() {
			var o = this._gestureMgr ? this._gestureMgr.getOffset() : null;
			o.top -= this.$$elmt.scrollTop();
			o.left -= this.$$elmt.scrollLeft();
			return o;
		},
		getGestureMgr: function() {
			return this._gestureMgr;
		}
	});

exports.Klass = _Klass;