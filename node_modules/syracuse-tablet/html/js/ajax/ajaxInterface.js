"use strict";
/*
 * Ajax module (Default browser implementation)
 */


var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ajaxDefault");
var utils = require('syracuse-tablet/html/js/helpers/utils');


function _AjaxInterface() {};

/*
 * All storage interfaces must inherit the "Not implemented" methods of this super class
 */
var _ajaxInterfaceClass = utils.defineClass(
	_AjaxInterface,
	null, {
		ajax: function(method, url, send, headers, options) {
			var deferred = new $.Deferred();
			method = method || "GET";

			var doAjax = function() {
				var allHeaders = {
					"Accept": "application/json;vnd.sage=syracuse"
				};
				if (headers) {
					$.extend(allHeaders, headers);
				}
				//if (lang) header["Accept-Language"] = lang;
				// TODO: Authentication

				var ajaxData = {
					headers: allHeaders,
					type: method,
					// dataType=json --> data parsing on if application/json
					dataType: allHeaders.Accept.indexOf("application/json") >= 0 ? "json" : "text",
					url: url,
					timeout: (options && options.timeout) ? options.timeout : 0
				};

				if (["PUT", "POST"].indexOf(method) >= 0 && send != null) {
					ajaxData.contentType = "application/json; charset=utf-8";
					ajaxData.dataType = "json";
					ajaxData.data = send;
				}

				log && log(method + ":" + url);

				// $.ajax is replaced after startup to ensure the module  ajax/ajax.is used since $.ajax will not work
				// in winJS container because of blocked CORS.
				// Here, it's ok to use $.ajax since if we are in a winJS container, this function will be replaced by a
				// function that redirects the call to a winJS function.
				// If we end up here, we are sure we are in standalone browser mode and $.ajax will work as usually

				var ajax = $.ajax_original || $.ajax;
				var promise = ajax(ajaxData);

				promise.success(function(data, textStatus, jqXHR) {
					var respHeaders = {
						status: jqXHR ? jqXHR.status : 200,
						location: jqXHR ? jqXHR.getResponseHeader("Location") : ""
					};
					deferred.resolve(data, respHeaders);
				});
				promise.error(function(jqXHR, textStatus, errorThrown) {
					var status = jqXHR ? jqXHR.status : 200;
					if (status == 200 && (status.responseText == null || status.responseText.trim() == 0)) {
						// this is an invalid response, handle it as server error for now
						status = 500;
					}

					var respHeaders = {
						status: status,
						location: jqXHR ? jqXHR.getResponseHeader("Location") : ""
					};
					deferred.reject(status, respHeaders);
				});
				return promise;
			};

			doAjax();
			return deferred.promise();
		}
	}
);

exports.AjaxInterfaceClass = _ajaxInterfaceClass;