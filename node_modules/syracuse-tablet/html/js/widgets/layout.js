"use strict";
var utils = require("syracuse-tablet/html/js/helpers/utils");
var controlsFactory = require("syracuse-tablet/html/js/factories/controlsFactory");

function Layout() {}

// TODO improve by making recursive call with return of Layout object
exports.Layout = utils.defineClass(Layout, null, {
	loadLayout: function($layout, page, parent) {
		this.page = page;
		this.$layout = $layout;
		this.$layout.$layoutType = this.$layout.$layoutType || "stack";
		this.parent = parent;

		// TODO add id ?

		if (this.$layout.$items) {
			for (var ii = 0, jj = this.$layout.$items.length; ii < jj; ii++) {
				this.appendChildItem((new Layout()).loadLayout(
					this.$layout.$items[ii], this.page, this));
			}
		} else {
			if (this.$layout.$bind) {
				// TODO get $property JSON
				// TODO get field item type
				// TODO create field item
				var fieldItem;
				if (this.$layout.$vignette) {
					// var $representation =
					// page.getPageRepresentation()
				} else {
					// TODO to improve
					this.appendChildItem((new FieldLayout()).loadLayout(this.$layout.$bind));
				}

				// TODO append field Items to a map, property of a page
				// (this.page.fieldItems =
				// this.page.fieldItems ||
				// {})[this.$layout.$bind] = fieldItem;

			}
		}
		return this;
	},
	appendChildItem: function(item) {
		if (!this.childItems) {
			this.childItems = [];
		}
		this.childItems.push(item);
	},
	buildHtml: function() {

		this.$$layoutSlot = $("<div>");
		this.$$layoutSlot.addClass("sm-layout-slot");

		this.$$layoutHeader = $("<header>");
		this.$$layoutHeader.addClass("sm-layout-header");
		this.$$layoutSlot.append(this.$$layoutHeader);

		this.$$layoutCore = $("<div>");
		this.$$layoutCore
			.addClass("sm-layout-core " + this.$layout.$layoutType);
		this.$$layoutSlot.append(this.$$layoutCore);

		if (this.$layout.$layoutType === "tabs") {
			this.$$navTabsSlot = $("<div>");
			this.$$navTabsSlot.addClass("sm-nav-tabs-slot");
			this.$$layoutHeader.append(this.$$navTabsSlot);

			this.$$navTabs = $("<ul>");
			this.$$navTabs.addClass("nav nav-tabs");
			this.$$navTabs.attr("role", "tablist");

			this.$$navTabsSlot.append(this.$$navTabs);
			this.isTabLayout = true;
		}

		if (this.$layout.$title) {
			if (this.isTabSection) {
				var $$navBar = this.parent.$$navTabs;
				var $$navListItem = $("<li>");
				// set li style to active if navbar doesn't have any children
				// yet
				$$navListItem
					.addClass($$navBar.children().length == 0 ? "active" : "");

				var $$navItem = $("<a>");
				$$navItem.addClass("sm-tab");
				$$navItem.attr("href", "#");
				$$navItem.text(this.$layout.$title);
				$$navListItem.append($$navItem);

				$$navBar.append($$navListItem);
			} else {
				this.$$layoutHeader.text(this.$layout.$title);
			}
		}

		if (this.$layout.$layoutType == "row") {
			this.$$layoutCore.addClass("row");

			// TODO To improve. If no value specified, set to 12 by default ??
			if (!this.$layout.$widthMd && !this.$layout.$widthSm && !this.$layout.$widthXs && !this.$layout.$widthLd) {
				throw new Error("Columns widths not specified");
			}

			// desktop only for test purpose
			var $widthMd = this.$layout.$widthMd.split(",");

			this.isRowLayout = true;
		}

		if (this.childItems.length == 1) {
			this.$$layoutCore.append(this.childItems[0].buildHtml());
		} else {

			for (var ii = 0, jj = this.childItems.length; ii < jj; ii++) {

				var $$coreItem = $("<div>");
				$$coreItem.addClass("sm-coreitem-slot" + " sm-" + this.$layout.$layoutType);

				if (this.isRowLayout) {
					$$coreItem.addClass("col-md-" + $widthMd[ii]);
				}

				if (this.isTabLayout) {
					this.childItems[ii].isTabSection = true;
				}

				// if tabLayout, display only the first and hide the others
				$$coreItem.css("display", this.isTabLayout && ii != 0 ? "none" : "");

				$$coreItem.append(this.childItems[ii].buildHtml());

				this.$$layoutCore.append($$coreItem);
			}

		}
		return this.$$layoutSlot;
	}
});

function FieldLayout() {}

exports.FieldLayout = utils.defineClass(FieldLayout, Layout, {
	loadLayout: function($bind, $property) {
		// TODO
		// TODO add id ?
		this.$bind = $bind;
		// / ! \ FOR TEST PURPOSE
		if (!$property) {
			this.$type = "application/x-string";
		}
		this.fieldControl = controlsFactory
			.createControl(undefined, this.$type);

		return this;
	},
	buildHtml: function() {
		// TODO

		// / ! \ FOR TEST PURPOSE
		var widgetDom = document.createElement("div");
		widgetDom.className = "sm-widget thumbnail";
		var sampleValue = document.createElement("div");
		sampleValue.textContent = this.$bind;
		widgetDom.appendChild(sampleValue);

		return $(widgetDom);
	},
	loadData: function(data) {
		// TODO
	}
});