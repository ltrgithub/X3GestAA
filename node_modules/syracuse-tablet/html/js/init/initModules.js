"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var factory = require('syracuse-tablet/html/js/application/appFactory');
var appFactoryDeps = require('syracuse-tablet/html/js/application/appFactoryDeps');
var ctrlFactoryDeps = require('syracuse-tablet/html/js/controls/ctrlFactoryDeps');

var ajax = require('syracuse-tablet/html/js/ajax/ajax');
var storage = require('syracuse-tablet/html/js/storage/storage');
var sdataCache = require('syracuse-tablet/html/js/sdata/sdataCache');

var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var modal = require('syracuse-tablet/html/js/ui/modal');
var siteLayout = require('syracuse-tablet/html/js/helpers/siteLayout');
var metaData = require('syracuse-tablet/html/js/application/metaData');

//fully client side configured application to add tests later
var testApplication = require('syracuse-tablet/html/js/sdata/entities/test/testApplication');
var welcomeApplication = require('syracuse-tablet/html/js/sdata/entities/welcomeApplication');
var demoApplication = require('syracuse-tablet/html/js/demoapp/demoApp');

exports.init = function() {
	var st;
	var cache;
	var deferred = new $.Deferred();

	globals.setSiteLayout(siteLayout);
	st = storage.getStorage();
	st.init()
		.then(function() {
			cache = new sdataCache.SDataCache(st);
		})
		.then(function() {
			globals.init(true, st, cache, utils);
			globals.setMetaData(metaData);
		})
		.then(function() {
			return appFactoryDeps.init();
		})
		.then(function() {
			return ctrlFactoryDeps.init();
		})
		.then(function() {
			ajax.init({}, locale);
		})
		.then(function() {
			welcomeApplication.register();
			demoApplication.register();
		})
		.then(function() {
			if (globals.isDvlpMode()) {
				testApplication.register();
			}
		})
		.then(function() {
			var app = factory.createApplication($("#s-m-app-id"));
			globals.setTabletApplication(app);

			globals.setModal(modal);
		})
		.then(function() {
			uiutils.triggerResizeInternal();
		})
		.then(function() {
			deferred.resolve();
		}).fail(function(e) {
			deferred.reject(e);
		});

	return deferred.promise();
};