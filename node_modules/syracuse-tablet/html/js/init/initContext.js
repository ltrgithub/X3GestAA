"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var modalSelectContext = require('syracuse-tablet/html/js/ui/modals/modalSelectContext');
var sdataCommonResources = require('syracuse-tablet/html/js/sdata/sdataCommonResources');
var localStorage = require('syracuse-tablet/html/js/storage/localStorage');
var settings = require('syracuse-tablet/html/js/application/settings');
var nativeApp = require('syracuse-tablet/html/js/helpers/native/nativeSageX3WUPApp');

exports.getLastUsedContext = function(userName) {
	var context;
	try {
		var settingsKey = userName + "_lastContext";
		var contextString = localStorage.getItem(settingsKey);
		if (contextString && contextString.length > 0) {
			context = JSON.parse(contextString);
		}
	} catch (e) {}
	return context;
};

exports.setLastUsedContext = function(userName, context) {
	try {
		var settingsKey = userName + "_lastContext";
		var contextString = JSON.stringify(context);
		localStorage.setItem(settingsKey, contextString);
	} catch (e) {}
};

var _checkContext = function(context) {
	return context && context.language && context.role && context.endpoint ? context : null;
};
/**
 * We assume that
 * 		the user is logged (userCtx and Syracuse session)
 * 		the user profile is available (read after login)
 * fromUserAction	true if it's the use who asks for switching the context (-> dialog)
 * 					false if it's called from an initialization process (after login)
 * contextToRestore	Only if called from initialization process
 * 					Context to restore after login
 * offlineLogin		true if init is called from offline login
 */
exports.init = function(fromUserAction, contextToRestore, offlineLogin) {
	var endpoints = [];
	var roles = [];
	var languages = [];

	var userCtx = contextToRestore ? contextToRestore.userCtx : globals.getUserCtx();
	var userName = userCtx && userCtx.$user;
	var userProfile = contextToRestore ? contextToRestore.userProfile : globals.getUserProfile();
	// No fail if http status 0
	var noFailIfNoNetwork = true;
	// True if an http status 0 occurred
	var connectionFailedError = false;
	// Settings are read here just so they are put into the globals to make them available later,
	// they are not needed here at all but it's a good place to read them
	return settings.getGlobalSettings().then(function() {
		if (offlineLogin) {
			// No access to common resources because no context is displayed in dialog (only logout)
			return true;
		}
		// Reads endpoint/Language/roles for change profile dialog
		return $.smResolve().then(function() {
			return sdataCommonResources.queryEndpoints(noFailIfNoNetwork);
		}).then(function(eps, connectionError) {
			connectionFailedError = connectionFailedError || connectionError;
			if (connectionFailedError) {
				endpoints = [];
				return $.smResolve([], true);
			}
			eps.forEach(function(ep) {
				if (userProfile.endpoints && userProfile.endpoints.some(function(e) {
					return e.$uuid === ep.$uuid;
				})) {
					endpoints.push(ep);
				}
			});
			return sdataCommonResources.queryLocalePreferences(noFailIfNoNetwork);
		}).then(function(ls, connectionError) {
			connectionFailedError = connectionFailedError || connectionError;
			if (connectionFailedError) {
				languages = [];
				return $.smResolve([], true);
			}
			languages = ls;
			return sdataCommonResources.queryRoles(noFailIfNoNetwork);
		})
			.then(function(rs, connectionError) {
				connectionFailedError = connectionFailedError || connectionError;
				if (connectionFailedError) {
					roles = [];
					return true;
				}
				rs.forEach(function(rl) {
					if (userProfile.roles && userProfile.roles.some(function(r) {
						return r.$uuid === rl.$uuid;
					})) {
						roles.push(rl);
					}
				});
				return false;
			})
			.then(function(connectionError) {
				connectionFailedError = connectionFailedError || connectionError;
				if (connectionFailedError) {
					return true;
				}
				if (endpoints.length < 1 || roles.length < 1) {
					var err = new Error(locale.text("login.roleendpoint.error"));
					err.$redirectPage = "login";
					return $.smReject(err);
				}
				return false;
			});
	}).then(function(connectionError) {
		var currentContext = contextToRestore ? _checkContext(contextToRestore.context) : null;
		currentContext = currentContext ? currentContext : _checkContext(exports.getLastUsedContext(userName));
		// !!! Dialog is displayed if connectionFailedError with only logout button
		var displayDialog = fromUserAction === true || currentContext == null;
		if (offlineLogin && !currentContext) {
			// If init is called from offlineLogin login we need a context
			deferred.reject(new Error("offline.nocontext"));
			return;
		}
		if (!displayDialog) {
			// Restore the context provided or the last context
			return currentContext;
		}
		// Ask user to select a context or to logout
		var deferred = $.Deferred();
		new modalSelectContext.Modal(currentContext, endpoints, roles, languages).show()
			.then(function(context) {
				if (context == null || context.action === "logout" || (context.action === "cancel" && currentContext == null)) {
					// Process broken - No message to display
					deferred.reject(new Error("$nomessage$"));
					return;
				}
				deferred.resolve(context.action === "ok" ? context : null);
			}).fail(function(e) {
				deferred.reject(e);
			});
		return deferred.promise();
	}).then(function(context) {
		// Context null means selectContext has been canceled
		if (!context) return null;
		// Locale for client UI
		locale.setLocale(context.language);
		// Endpoint for storing records locally and to use for gadgets with default endpoint usage
		globals.setEndpoint(context.endpoint);
		// Context for storing records locally
		globals.setUserCtx({
			$user: userCtx.$user,
			$role: context.role,
			$lang: context.language,
		});
		return context;
	})
		.then(function(context) {
			// Context null means selectContext has been canceled
			if (context == null || offlineLogin === true || connectionFailedError === true) {
				return null;
			}
			if (nativeApp.isSageX3WUPApp()) {
				// Context to restore if any
				nativeApp.setReconnectContext({
					context: context,
					userProfile: userProfile,
					userCtx: globals.getUserCtx()
				});
			}
			exports.setLastUsedContext(userName, context);
			return _updateServerUserProfile(context, userName, endpoints, roles, languages);
		});
};

function _updateServerUserProfile(context, userName, endpoints, roles, languages) {
	return sdataCommonResources.getUserProfile().then(function(up) {
		var change = false;
		var upChanges = {};
		change = endpoints.some(function(ep) {
			if (ep.application + "." + ep.contract + "." + ep.dataset === context.endpoint && ep.$uuid !== up.selectedEndpoint.$uuid) {
				upChanges.selectedEndpoint = {
					$uuid: ep.$uuid
				};
				return true;
			}
			return false;
		}) || change;
		change = roles.forEach(function(role) {
			if (role.code === context.role && role.$uuid !== up.selectedRole.$uuid) {
				upChanges.selectedRole = {
					$uuid: role.$uuid
				};
				return true;
			}
			return false;
		}) || change;
		languages.forEach(function(lang) {
			if (lang.code === context.languages && lang.$uuid !== up.selectedLocale.$uuid) {
				upChanges.selectedLocale = {
					$uuid: lang.$uuid
				};
				return true;
			}
			return false;
		}) || change;

		if (change) {
			return sdataCommonResources.updateUserProfile(upChanges)
				.then(function() {
					return context;
				});
		} else {
			return $.smResolve(context);
		}
	});
}