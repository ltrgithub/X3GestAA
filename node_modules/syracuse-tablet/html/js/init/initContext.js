"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var utils = require('syracuse-tablet/html/js/helpers/utils');

var modalSelectContext = require('syracuse-tablet/html/js/ui/modalSelectContext');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var sdataCommonResources = require('syracuse-tablet/html/js/sdata/sdataCommonResources');
var localStorage = require('syracuse-tablet/html/js/storage/localStorage');
var settings = require('syracuse-tablet/html/js/application/settings');

exports.getLastUsedContext = function(userName) {
	var context;
	try {
		var settingsKey = userName + "_lastContext";
		var contextString = localStorage.getItem(settingsKey);
		if (contextString && contextString.length > 0) {
			context = JSON.parse(contextString);
		}
	} catch (e) {}
	return context;
};

exports.setLastUsedContext = function(userName, context) {
	try {
		var settingsKey = userName + "_lastContext";
		var contextString = JSON.stringify(context);
		localStorage.setItem(settingsKey, contextString);
	} catch (e) {}
};

exports.init = function(force, warn) {
	var endpoints = [];
	var roles = [];
	var languages = [];

	var userCtx = globals.getUserCtx();
	var userName = userCtx && userCtx.$user;
	var userProfile = globals.getUserProfile();

	var currentContext = exports.getLastUsedContext(userName);

	return sdataCommonResources.queryEndpoints()
		.then(function(eps) {
			eps.forEach(function(ep) {
				if (userProfile.endpoints && userProfile.endpoints.some(function(e) {
					return e.$uuid === ep.$uuid;
				})) {
					endpoints.push(ep);
				}
			});
			return sdataCommonResources.queryLocalePreferences();
		})
		.then(function(ls) {
			languages = ls;
			return sdataCommonResources.queryRoles();
		})
		.then(function(rs) {
			rs.forEach(function(rl) {
				if (userProfile.roles && userProfile.roles.some(function(r) {
					return r.$uuid === rl.$uuid;
				})) {
					roles.push(rl);
				}
			});
		})
		.then(function() {
			var deferred = $.Deferred();
			var _dialog = function(ctx) {
				var selectNewContext;
				if (force || ctx == null) {
					selectNewContext = modalSelectContext.selectContext(ctx, endpoints, roles, languages, warn);
				} else {
					ctx.action = "ok"; // as if dialog was opened and accepted
					selectNewContext = $.smResolve(ctx);
				}

				selectNewContext.then(function(context) {
					if (context && context.action === "ok") {
						deferred.resolve(context);
					} else if (context && context.action === "cancel") {
						if (currentContext == null) {
							force = true;
							_dialog(context);
						} else {
							deferred.resolve(null);
						}
					} else if (context && context.action === "logout") {
						globals.getApplication().logout().always(function() {
							deferred.resolve(null);
						});
					}
				}).fail(function(e) {
					deferred.reject(e);
				});
			};

			_dialog(currentContext);
			return deferred.promise();
		})
		.then(function(context) {
			if (context) {
				// Locale for client UI
				locale.setLocale(context.language);

				// Endpoint for storing records locally and to use for gadgets with default endpoint usage
				globals.setEndpoint(context.endpoint);

				// Context for storing records locally
				globals.setUserCtx({
					$user: userCtx.$user,
					$role: context.role,
					$lang: context.language,
				});
			}
			return context;
		})
		.then(function(context) {
			if (!context) {
				return context;
			}
			exports.setLastUsedContext(userName, context);
			return _contextChanged(context);
		})
		.then(function(context) {
			if (!context) {
				return context;
			}
			return _updateServerUserProfile(context, userName, endpoints, roles, languages);
		}).fail(function(e) {
			utils.modalError("context.sdataCommonResources error", e);
		});
};

function _contextChanged(context) {
	return $.smResolve()
		.then(function() {
			return _initApplications(context);
		})
		.then(function() {
			var deferred = $.Deferred();
			notifications.publish("sm.context.changed", deferred);
			return deferred.promise();
		}).then(function() {
			// Nothing
		}).fail(function(e) {
			utils.modalError("context._contextChanged error", e);
		});
}

function _initApplications(context) {
	return settings.getMyApplications()
		.then(function(apps) {
			var matchedApps = {};
			apps.forEach(function(app) {
				var epMatch = true;
				if (app.endpoints && app.endpoints.length > 0) {
					epMatch = epMatch && app.endpoints.some(function(ep) {
						return (ep.application + "." + ep.contract + "." + ep.dataset === context.endpoint);
					});
				}
				var roleMatch = true;
				if (globals.isDvlpMode()) {
					roleMatch = true;
				} else {
					if (app.roles && app.roles.length > 0 && epMatch) {
						roleMatch = roleMatch && app.roles.some(function(role) {
							return (role.code === context.role);
						});

					}
				}
				if (roleMatch && epMatch) {
					matchedApps[app.applicationName] = app;
				}
			});

			globals.setApplicationsJson(matchedApps);

			return context;
		}).fail(function(e) {
			utils.modalError("context._initApplications error", e);
		});
}

function _updateServerUserProfile(context, userName, endpoints, roles, languages) {
	return sdataCommonResources.getUserProfile().then(function(up) {
		var change = false;
		var upChanges = {};
		change = endpoints.some(function(ep) {
			if (ep.application + "." + ep.contract + "." + ep.dataset === context.endpoint && ep.$uuid !== up.selectedEndpoint.$uuid) {
				upChanges.selectedEndpoint = {
					$uuid: ep.$uuid
				};
				return true;
			}
			return false;
		}) || change;
		change = roles.forEach(function(role) {
			if (role.code === context.role && role.$uuid !== up.selectedRole.$uuid) {
				upChanges.selectedRole = {
					$uuid: role.$uuid
				};
				return true;
			}
			return false;
		}) || change;
		languages.forEach(function(lang) {
			if (lang.code === context.languages && lang.$uuid !== up.selectedLocale.$uuid) {
				upChanges.selectedLocale = {
					$uuid: lang.$uuid
				};
				return true;
			}
			return false;
		}) || change;

		if (change) {
			return sdataCommonResources.updateUserProfile(upChanges)
				.then(function() {
					return context;
				});
		} else {
			return $.smResolve(context);
		}
	});
}