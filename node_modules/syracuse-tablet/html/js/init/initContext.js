"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var modalSelectContext = require('syracuse-tablet/html/js/ui/modals/modalSelectContext');
var sdataCommonResources = require('syracuse-tablet/html/js/sdata/sdataCommonResources');
var localStorage = require('syracuse-tablet/html/js/storage/localStorage');
var settings = require('syracuse-tablet/html/js/application/settings');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("initCtx");

exports.getLastUsedContext = function(userName) {
	var context;
	try {
		var settingsKey = userName + "_lastContext";
		var contextString = localStorage.getItem(settingsKey);
		if (contextString && contextString.length > 0) {
			context = JSON.parse(contextString);
		}
	} catch (e) {}
	return context;
};

exports.setLastUsedContext = function(userName, context) {
	try {
		var settingsKey = userName + "_lastContext";
		var contextString = JSON.stringify(context);
		localStorage.setItem(settingsKey, contextString);
	} catch (e) {}
};

var _checkContext = function(context) {
	return context && context.language && context.role && context.endpoint ? context : null;
};
/**
 * We assume that
 * 		the user is logged (userCtx and Syracuse session)
 * 		the user profile is available (read after login)
 * fromUserAction	true if it's the use who asks for switching the context (-> dialog)
 * 					false if it's called from an initialization process (after login)
 * contextToRestore	Only if called from initialization process
 * 					Context to restore after login
 * offlineLogin		true if init is called from offline login
 * Resolve with
 * 					userContext - Null if login needed
 */
exports.init = function(fromUserAction, contextToRestore, offlineLogin) {
	if (contextToRestore) {
		log && log("Restore context");
		log && log(JSON.stringify(contextToRestore));
	}
	var endpoints = [];
	var roles = [];
	var languages = [];
	var userName = globals.getUserCtx().$user;
	var userProfile = globals.getUserProfile();
	log && log("User profile");
	log && log(JSON.stringify(userProfile));

	// No fail if http status 0
	var noFailIfNoNetwork = true;
	// True if an http status 0 occurred
	var connectionFailedError = false;
	// Settings are read here just so they are put into the globals to make them available later,
	// they are not needed here at all but it's a good place to read them
	return settings.getGlobalSettings().then(function() {
		if (offlineLogin) {
			// No access to common resources because no context is displayed in dialog (only logout)
			return true;
		}
		// Reads endpoint/Language/roles for change profile dialog
		return $.smResolve().then(function() {
			return sdataCommonResources.queryEndpoints(noFailIfNoNetwork);
		}).then(function(rsrcEndpoints, connectionError) {
			connectionFailedError = connectionFailedError || connectionError;
			if (connectionFailedError) {
				endpoints = [];
				return $.smResolve([], true);
			};
			var urlEndpoint = null;
			if (contextToRestore && contextToRestore.endpoint) {
				var ar = contextToRestore.endpoint.split(".");
				urlEndpoint = {
					ok: false,
					protocol: ar[0],
					contract: ar[1],
					dataset: ar[2]
				};
			}
			rsrcEndpoints.forEach(function(ep) {
				if (userProfile.endpoints && userProfile.endpoints.some(function(e) {
					return e.$uuid === ep.$uuid;
				})) {
					if (urlEndpoint && !urlEndpoint.ok && ep.protocol == urlEndpoint.protocol && ep.contract == urlEndpoint.contract && ep.dataset == urlEndpoint.dataset) {
						urlEndpoint.ok = true;
					}
					endpoints.push(ep);
				}
			});
			if (urlEndpoint && !urlEndpoint.ok) {
				// Cancel contextToRestore
				globals.getModal().actionResult(locale.text("urlcontext.bad"), locale.text("urlcontext.badendpoint", [contextToRestore.endpoint]));
				contextToRestore = null;
			}
			return sdataCommonResources.queryLocalePreferences(noFailIfNoNetwork);
		}).then(function(rsrcLanguages, connectionError) {
			connectionFailedError = connectionFailedError || connectionError;
			if (connectionFailedError) {
				languages = [];
				return $.smResolve([], true);
			}
			languages = rsrcLanguages;
			return sdataCommonResources.queryRoles(noFailIfNoNetwork);
		}).then(function(rsrcRoles, connectionError) {
			connectionFailedError = connectionFailedError || connectionError;
			if (connectionFailedError) {
				roles = [];
				return true;
			}
			var urlRole = null;
			rsrcRoles.forEach(function(rl) {
				if (userProfile.roles && userProfile.roles.some(function(r) {
					return r.$uuid === rl.$uuid;
				})) {
					if (contextToRestore && contextToRestore.role && !urlRole && rl.code === contextToRestore.role) {
						urlRole = rl.code;
					}
					roles.push(rl);
				}
			});
			if (contextToRestore) {
				// Set the role - Can be null if current user dosn't have this role (No error - we keep the current user role)
				contextToRestore.role = urlRole;
			}
			return false;
		}).then(function(connectionError) {
			connectionFailedError = connectionFailedError || connectionError;
			if (connectionFailedError) {
				return true;
			}
			if (endpoints.length < 1 || roles.length < 1) {
				var err = new Error(locale.text("login.roleendpoint.error"));
				err.$redirectPage = "login";
				return $.smReject(err);
			}
			return false;
		});
	}).then(function(connectionError) {
		var currentContext = contextToRestore ? _checkContext(contextToRestore) : null;
		currentContext = currentContext ? currentContext : _checkContext(exports.getLastUsedContext(userName));
		if (offlineLogin && !currentContext) {
			// If init is called from offlineLogin login we need a context
			return $.smReject(new Error("offline.nocontext"));
		}
		if (contextToRestore && contextToRestore.endpoint && contextToRestore.role && languages) {
			// Like language is not provided by url context we take the navigator language to avoid display of modalSelectContext
			var navLang = utils.getNavigatorLanguage();
			if (navLang && languages.some(function(l) {
				if (utils.sameLanguage(l.code, navLang)) {
					contextToRestore.language = l.code;
					return true;
				};
			})) {
				// contextToRestore can be used as currentContext
				return $.smResolve(contextToRestore);
			}
		}
		// !!! Dialog is displayed if:
		//  -> called by user (change profile)
		//  -> No context at initialization even if connectionFailedError (only logout button in that case)
		var displayDialog = fromUserAction === true || currentContext == null;
		if (displayDialog) {
			var deferred = $.Deferred();
			// When we open from a link we hide the endpoints because it's given by contextToRestore
			// We hide the roles if there's a role provided by url context
			// We don't hide the language because it's not given by contextToRestore
			var opts = {
				hideEndpoints: contextToRestore != null && contextToRestore.endpoint != null,
				hideRoles: contextToRestore != null && contextToRestore.role != null
			};
			// Ask user to select a context or to logout
			new modalSelectContext.Modal(currentContext, endpoints, roles, languages, opts).show()
				.then(function(selectContext) {
					if (selectContext == null || selectContext.action === "cancel") {
						// Process canceled
						deferred.resolve(null);
					}
					if (selectContext.action === "logout") {
						// Process canceled - goto login
						deferred.reject({
							$redirectPage: "login"
						});
					} else {
						selectContext = selectContext.action === "ok" ? selectContext : null;
						if (selectContext && contextToRestore && contextToRestore.endpoint) {
							// Set hidden endpoint/role with the values provided by contextToRestore
							selectContext.endpoint = contextToRestore.endpoint;
							if (contextToRestore.role) {
								selectContext.role = contextToRestore.role;
							}
						}
						deferred.resolve(selectContext);
					}

				}).fail(function(e) {
					deferred.reject(e);
				});
			return deferred.promise();
		} else {
			// Restore the context provided or the last context
			return $.smResolve(currentContext);
		}
	}).then(function(currentContext) {
		// Context null means selectContext has been canceled
		if (!currentContext) return null;
		// Locale for client UI
		locale.setLocale(currentContext.language);
		// Endpoint for storing records locally and to use for gadgets with default endpoint usage
		globals.setEndpoint(currentContext.endpoint);
		// Context for storing records locally
		globals.setUserCtx({
			$user: userName,
			$role: currentContext.role,
			$lang: currentContext.language,
		});
		return currentContext;
	}).then(function(currentContext) {
		// Context null means selectContext has been canceled
		if (currentContext == null || offlineLogin === true || connectionFailedError === true) {
			return null;
		}
		exports.setLastUsedContext(userName, currentContext);
		return _updateServerUserProfile(currentContext, userName, endpoints, roles, languages);
	}).then(function(currentContext) {
		// is null null df not valide
		return $.smResolve(currentContext, contextToRestore);
	});
};

function _updateServerUserProfile(context, userName, endpoints, roles, languages) {
	return sdataCommonResources.getUserProfile().then(function(up) {
		var change = false;
		var upChanges = {};
		change = endpoints.some(function(ep) {
			if (ep.application + "." + ep.contract + "." + ep.dataset === context.endpoint && ep.$uuid !== up.selectedEndpoint.$uuid) {
				upChanges.selectedEndpoint = {
					$uuid: ep.$uuid
				};
				return true;
			}
			return false;
		}) || change;
		change = roles.some(function(role) {
			if (role.code === context.role && role.$uuid !== up.selectedRole.$uuid) {
				upChanges.selectedRole = {
					$uuid: role.$uuid
				};
				return true;
			}
			return false;
		}) || change;
		languages.some(function(lang) {
			if (lang.code === context.language && lang.$uuid !== up.selectedLocale.$uuid) {
				upChanges.selectedLocale = {
					$uuid: lang.$uuid
				};
				return true;
			}
			return false;
		}) || change;

		if (change) {
			return sdataCommonResources.updateUserProfile(upChanges)
				.then(function() {
					return context;
				});
		} else {
			return $.smResolve(context);
		}
	});
}
/**
 * Context asked by user
 */
exports.askNewContext = function() {
	return exports.init(true);
};
/**
 * Set current context
 */
exports.switchContext = function(context) {
	if (!context) return;
	var context = $.extend(true, {}, context);
	if (!context.endpoint) {
		context.endpoint = globals.getEndpoint();
	}
	var userCtx = globals.getUserCtx();
	if (!context.language) {
		context.language = userCtx.$lang;
	}
	if (!context.role) {
		context.role = userCtx.$role;
	}
	return exports.init(false, context);
};