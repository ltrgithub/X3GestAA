"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var modalSelectContext = require('syracuse-tablet/html/js/ui/modals/modalSelectContext');
var sdataCommonResources = require('syracuse-tablet/html/js/sdata/sdataCommonResources');
var localStorage = require('syracuse-tablet/html/js/storage/localStorage');
var settings = require('syracuse-tablet/html/js/application/settings');

/**
 * Save user profile settings
 */
var _profileSettings = null;
/**
 * True if language exists
 */
var _checkNavigatorLang = function() {
	var navLang = utils.getNavigatorLanguage();
	var result;
	if (_profileSettings && _profileSettings.locales) {
		_profileSettings.locales.some(function(l) {
			if (utils.sameLanguage(l.code, navLang)) {
				result = l.code;
				return true;
			}
		});
	}
	return result || "en-US";
};
/**
 * Read last user context in storage
 */
exports.getLastUsedContext = function(userName) {
	var context;
	try {
		var settingsKey = userName + "_lastContext";
		var contextString = localStorage.getItem(settingsKey);
		if (contextString && contextString.length > 0) {
			context = JSON.parse(contextString);
		}
	} catch (e) {}
	return context;
};
/**
 * Write last user context in storage
 */
exports.setLastUsedContext = function(userName, context) {
	try {
		var settingsKey = userName + "_lastContext";
		var contextString = JSON.stringify(context);
		localStorage.setItem(settingsKey, contextString);
	} catch (e) {}
};
/**
 * Check if context is valid
 */
var _checkContext = function(context) {
	return context && context.language && context.role && context.endpoint ? context : null;
};
/**
 * Display the settings modal dialog to select end-point/role/language
 */
var _askUserSettings = function(currentContext, contextToRestore, fromUserAction, isOffLine) {
	var deferred = $.Deferred();
	// When we open from a link/voice command we hide the endpoints because it's given by contextToRestore
	// We hide the roles if there's a role provided by url context
	// We don't hide the language because it's not provided by contextToRestore (we select the language of the current user)
	var opts = {
		offline: isOffLine,
		hideEndpoints: contextToRestore != null && contextToRestore.endpoint != null,
		hideRoles: contextToRestore != null && contextToRestore.role != null
	};
	// Ask user to select a context or to logout
	new modalSelectContext.Modal(currentContext, _profileSettings, opts, isOffLine).show()
		.then(function(selectedContext) {
			if (selectedContext == null || selectedContext.action !== "ok") {
				// Process canceled
				if ((selectedContext && selectedContext.action === "logout") || fromUserAction !== true) {
					// Goto login if logout or settings canceled in init process
					// message/title are used to manage the user message in login page
					deferred.reject({
						$redirectPage: "login",
						message: "login.authentication",
						title: "logout.msg"
					});
				} else {
					deferred.resolve(null);
				}
				return;
			}
			// Set hidden end-point/role with the values provided by contextToRestore if any
			// Eg voice command: endpoint/role is provided by the context so we set the current user context with these values
			if (opts.hideEndpoints === true) {
				selectedContext.endpoint = contextToRestore.endpoint;
			}
			if (opts.hideRoles === true) {
				selectedContext.role = contextToRestore.role;
			}
			deferred.resolve(selectedContext);
		}).fail(function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
};
/**
 * Resolve with new user context or null
 */
var _updateServerUserProfile = function(userProfile, context, fromUserAction) {
	var change = false;
	var upChanges = {};
	var endPoints = null;
	change = _profileSettings.roles.some(function(role) {
		if (role.code === context.role) {
			endPoints = role.endPoints;
			if (role.$uuid !== userProfile.selectedRole.$uuid) {
				upChanges.selectedRole = {
					$uuid: role.$uuid
				};
				return true;
			}
		}
		return false;
	}) || change;
	change = endPoints && endPoints.some(function(ep) {
		if (ep.code === context.endpoint && (userProfile.selectedEndpoint == null || ep.$uuid !== userProfile.selectedEndpoint.$uuid)) {
			upChanges.selectedEndpoint = {
				$uuid: ep.$uuid
			};
			return true;
		}
		return false;
	}) || change;
	change = _profileSettings.locales.some(function(lang) {
		if (lang.code === context.language && lang.$uuid !== userProfile.selectedLocale.$uuid) {
			upChanges.selectedLocale = {
				$uuid: lang.$uuid
			};
			return true;
		}
		return false;
	}) || change;
	if (change) {
		if (fromUserAction) {
			//#8000  needed for user feedback 
			globals.getApplication().waitWheelStart();
		}
		return sdataCommonResources.updateUserProfile(upChanges).then(function(newProfile) {
			globals.setUserProfile(newProfile);
			return settings.setLastUserProfile(newProfile);
		}).then(function(newProfile) {
			//newProfile null if error saving profile
			return newProfile ? $.extend(context, {
				role: newProfile.selectedRole.code,
				language: newProfile.selectedLocale.code,
				endpoint: newProfile.selectedEndpoint.code
			}) : null;
		});
	} else {
		// make sure userProfile is always up to date on client side
		return settings.setLastUserProfile(userProfile)
			.then(function() {
				return null;
			});
	}
};
/**
 * We assume that
 * 		the user is logged in (userCtx and Syracuse session)
 * 		the user profile is available (read after login)
 * fromUserAction	true if it's the user who asks for switching the context (-> dialog)
 * 					false if it's called from an initialization process (after login)
 * contextToRestore	Only if called from initialization process
 * 					Context to restore after login
 * offlineLogin		true if init is called from offline login page
 * Resolve with
 * 					userContext - Null if login needed
 * 					contextToRestore - null if not valid
 */
exports.init = function(fromUserAction, contextToRestore, offlineLogin) {
	if (fromUserAction !== true) {
		// Clear on init or after new login
		_profileSettings = null;
	}
	var userProfile = globals.getUserProfile();
	if (!userProfile) {
		throw new Error("Unexpected empty user profile");
	}
	var userName = userProfile.user.$value;
	// True if an http status 0 occurred
	var isOffLine = offlineLogin == true || globals.isOnline() !== true;
	// About getGlobalSettings:
	// -> Settings are read here just so they are put into the globals to make them available later,
	// -> they are not needed here at all but it's a good place to read them
	var step = settings.getGlobalSettings();
	var def = $.Deferred();
	if (offlineLogin) {
		step.then(function() {
			// If init-context is called from offlineLogin login we need a context
			if (_checkContext(exports.getLastUsedContext(userName))) {
				return;
			}
			return $.smReject(new Error("offline.nocontext"));
		})
			.then(function(e) {
				def.resolve(e);
			})
			.fail(function(e) {
				def.reject(e);
			});
	} else if (_profileSettings) {
		step.then(function() {
			return sdataCommonResources.isConnectionAlive();
		})
			.then(function(alive) {
				isOffLine = alive !== true;
			})
			.then(function(e) {
				def.resolve(e);
			})
			.fail(function(e) {
				def.reject(e);
			});
	} else {
		step.then(function() {
			// Read settings in one shot
			return sdataCommonResources.getUserProfileSettings();
		}).then(function(profileSettings) {
			_profileSettings = profileSettings;
			def.resolve();
		}).fail(function(e) {
			if (e.$noConnectionError) {
				isOffLine = true;
				def.resolve();
				return;
			}
			def.reject(e);
		});
	}
	return def.then(function() {
		if (contextToRestore) {
			var lastCtx = exports.getLastUsedContext(userName);
			// Like language is not provided contextToRestore we take the last context language or navigator language to avoid display of modalSelectContext
			contextToRestore.language = lastCtx ? lastCtx.language : _checkNavigatorLang();
			// Context set to null if not valid
			contextToRestore = _checkContext(contextToRestore);
			if (contextToRestore) {
				// No setting dialog - context provided by contextToRestore
				return $.smResolve(contextToRestore);
			}
		}
		var currentContext = _checkContext(exports.getLastUsedContext(userName));
		// !!! Dialog is displayed if:
		//  -> Initcontext called by the user (change profile)
		//  -> No context at initialization even if connectionFailedError (only logout button in that case)
		if (fromUserAction === true || currentContext == null) {
			if (currentContext == null) {
				// Set the context given by user profile (values to select)
				currentContext = {
					role: userProfile.selectedRole.code,
					language: userProfile.selectedLocale.code,
					endpoint: userProfile.selectedEndpoint.code
				};
			}
			return _askUserSettings(currentContext, contextToRestore, fromUserAction, isOffLine);
		} else {
			// Restore the context provided or the last context
			return $.smResolve(currentContext);
		}
	}).then(function(selectedContext) {
		if (selectedContext == null) {
			// Null selectedContext means process has been canceled
			return null;
		}
		if (offlineLogin === true) {
			// In offline mode we just enable logout or cancel
			return null;
		}
		// Set user context in any case
		globals.setUserCtx({
			"$user": userName,
			"$role": selectedContext.role,
			"$lang": selectedContext.language
		});
		// Locale for client UI
		locale.setLocale(selectedContext.language);
		// Endpoint for storing records locally and to use for gadgets with default endpoint usage
		globals.setEndpoint(selectedContext.endpoint);
		exports.setLastUsedContext(userName, selectedContext);
		return _updateServerUserProfile(userProfile, selectedContext, fromUserAction);
	}).then(function(selectedContext) {
		// contextToRestore is null null if not valid
		// canceled (selectedContext==null) is used fromUserAction=true only
		return $.smResolve(contextToRestore, fromUserAction ? selectedContext == null : null);
	});
};
/**
 * Context asked by user
 * Resolves with cancel true/false
 */
exports.askNewContext = function() {
	return exports.init(true).then(function(contextToRestore, canceled) {
		return canceled;
	});
};
/**
 * Switch to contextToRestore
 * User context endpoint will be set to contextToRestore.endpoint if any
 * Used by voice command to set the current context with the one of the command (pinned page)
 */
exports.switchContext = function(contextToRestore) {
	if (!contextToRestore) return;
	var contextToRestore = $.extend(true, {}, contextToRestore);
	if (!contextToRestore.endpoint) {
		contextToRestore.endpoint = globals.getEndpoint();
	}
	var userCtx = globals.getUserCtx();
	if (!contextToRestore.language) {
		contextToRestore.language = userCtx.$lang;
	}
	if (!contextToRestore.role) {
		contextToRestore.role = userCtx.$role;
	}
	return exports.init(false, contextToRestore);
};