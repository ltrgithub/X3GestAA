"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var modalSelectContext = require('syracuse-tablet/html/js/pages/html/modalSelectContext');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var sdataCommonResources = require('syracuse-tablet/html/js/sdata/sdataCommonResources');
var localStorage = require('syracuse-tablet/html/js/storage/localStorage');

exports.getLastUsedContext = function(userName) {
	var context;
	try {
		var settingsKey = userName + "_lastContext";
		var contextString = localStorage.getItem(settingsKey);
		if (contextString && contextString.length > 0) {
			context = JSON.parse(contextString);
		}
	} catch (e) {}
	return context;
};

exports.setLastUsedContext = function(userName, context) {
	try {
		var settingsKey = userName + "_lastContext";
		var contextString = JSON.stringify(context);
		localStorage.setItem(settingsKey, contextString);
	} catch (e) {}
};

exports.init = function(force, warn) {
	var role = "abc";
	var endpoint = "SUPERV";
	var language = "en_GB";

	var endpoints;
	var roles = [];
	var languages = [];

	var userCtx = globals.getUserCtx();
	var userName = userCtx && userCtx.$user;

	var currentContext = exports.getLastUsedContext(userName);

	return sdataCommonResources.queryEndpoints()
		.then(function(eps) {
			endpoints = eps;
			return sdataCommonResources.queryLocalePreferences();
		})
		.then(function(ls) {
			languages = ls;
			return sdataCommonResources.queryRoles();
		})
		.then(function(rs) {
			roles = rs;
		})
		.then(function() {
			var deferred = $.Deferred();
			var _dialog = function(ctx) {
				var selectNewContext;
				if (force || ctx == null) {
					selectNewContext = modalSelectContext.selectContext(ctx, endpoints, roles, languages, warn);
				} else {
					selectNewContext = $.smResolve(ctx);
				}

				selectNewContext.then(function(context) {
					var valid;
					// context = null = dialog canceled, this is only valid if there is a default context from the last application use
					valid = !(currentContext == null && context == null) || context != null;
					return {
						isValid: valid,
						context: context
					};
				}).
				then(function(context) {
					if (context.isValid) {
						deferred.resolve(context.context);
					} else {
						force = true;
						_dialog(context.context);
					}
				});
			};

			_dialog(currentContext);

			return deferred.promise();
		})
		.then(function(context) {
			if (context) {
				globals.setEndpoint(context.endpoint);
				globals.setUserCtx({
					$user: userCtx.$user,
					$role: context.role,
					$lang: context.language,
				});
			}
			return context;
		})
		.then(function(context) {
			if (context) {
				exports.setLastUsedContext(userName, context);
				notifications.publish("sm.context.changed", context);
			}
			return context;
		});
};