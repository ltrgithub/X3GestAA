"use strict";

var auth = require('syracuse-tablet/html/js/application/authentication');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var initContext = require('syracuse-tablet/html/js/init/initContext');
var native = require('syracuse-tablet/html/js/helpers/native/native');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("initLogin");
var sdataCommonRes = require('syracuse-tablet/html/js/sdata/sdataCommonResources');
var nativeApp = native.getModule("nativeApp");
var nativeVoiceCommands = native.getModule("voiceCommands");

var _readRestoredContext = function(fromInitProcess) {
	if (fromInitProcess && nativeVoiceCommands && nativeVoiceCommands.hasPendingCommand("openBookmark")) {
		// No context is restored because there's a pending voice command triggered by the native wrapper
		// This command provides a context that is restored once application is ready (see application.notifUserLoggedIn)
		// The list of commands is not available when _notifLoggedIn is called
		return $.smResolve();
	}
	var ctxUuid = jsutils.getUrlContextId();
	var step;
	if (ctxUuid) {
		// Url context (email link) - We first read the context stored in syracuse
		step = sdataCommonRes.readSharedContext(ctxUuid);
	} else {
		step = $.smResolve();
	}
	return step.then(function(urlCtxToRestore) {
		var contextToRestore;
		if (urlCtxToRestore) {
			contextToRestore = urlCtxToRestore;
			// Url context (email link)
			contextToRestore.type = "url";
		} else if (nativeApp) {
			// Context provided by native wrapper
			contextToRestore = nativeApp.getReconnectContext();
			if (contextToRestore) {
				contextToRestore.type = "native";
			}
		}
		return contextToRestore;
	});
};
/**
 * Resolves with true if user is logged in or false if login is required
 * Notified after login request succeeded
 * -> Set the context according to contextToRestore or userProfile
 * -> If Ok set the current page (welcome application) and resume with true
 * -> If not Of resume with false
 * offlineLogin:	true if offline login
 * fromInitProcess	true if login occurred after initialization of the application
 */
var _notifLoggedIn = function(userProfile, offlineLogin, fromInitProcess) {
	if (!userProfile) {
		return $.smReject({
			$redirectPage: "login"
		});
	}
	// Mandatory here - Can be modified in initcontext (dialog)
	globals.setUserProfile(userProfile);
	return _readRestoredContext(fromInitProcess).then(function(contextToRestore) {
		if (fromInitProcess !== true && nativeApp) {
			log && log("Getting reconnect token");
			// Get ask for the reconnection token after login action to save it
			return auth.reconnectGetToken().then(function(token, userLogin) {
				// Stores the new reconnection token
				log && log("Getting reconnect token: " + token, userLogin);
				nativeApp.setReconnectToken(token, userLogin);
				return contextToRestore;
			});
		}
		return contextToRestore;
	}).then(function(contextToRestore) {
		globals.setNeedToCheckAppsList(true);
		//contextToRestore passed to be checked
		return initContext.init(false, contextToRestore, offlineLogin);
	}).then(function(contextToRestore) {
		// contextToRestore checked (endpoint, role..) and set to null if not valid
		notifications.publish("sm.user.logged.in", fromInitProcess, contextToRestore);
	});
};
/**
 * Resolves with true if user is logged in or false if login is required
 * Rejects if error
 */
exports.init = function() {
	/**
	 * reconnectToken is used to skip login if session is still alive
	 * Used by native wrapper when application resumed - See also notifLogin
	 */
	var step;
	var reconnectToken = nativeApp ? nativeApp.getReconnectToken() : null;
	if (reconnectToken) {
		// Call a request that sets the session cookie to reconnect Syracuse server
		step = auth.reconnectSetToken(reconnectToken);
	} else {
		step = $.smResolve();
	}
	var def = $.Deferred();
	step.then(function() {
		// Resolves with userProfile if user authenticated or null if 401 only
		return auth.check();
	}).then(function(profile) {
		if (profile) {
			// userProfile!= null if connection OK - userProfile == null to force login
			_notifLoggedIn(profile, false, true).then(function() {
				def.resolve(true);
			}).fail(function(e) {
				def.reject(e);
			});
		} else {
			def.resolve(false);
		}
	})
		.fail(function(e) {
			if (!e) e = {};
			e.$redirectPage = "login";
			// This is a real error other than 401
			def.reject(e);
		});
	return def.promise();
};
exports.notifLoggedIn = _notifLoggedIn;