"use strict";

var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var auth = require('syracuse-tablet/html/js/application/authentication');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var modal = require('syracuse-tablet/html/js/ui/modals/modal');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var sdataCommonRes = require('syracuse-tablet/html/js/sdata/sdataCommonResources');
var settings = require('syracuse-tablet/html/js/application/settings');

var initContext = require('syracuse-tablet/html/js/init/initContext');
var nativeApp = require('syracuse-tablet/html/js/helpers/native/nativeSageX3WUPApp');

/**
 * Notified after login request succeeded
 * -> Set the context according to contextToRestore or userProfile
 * -> If Ok set the current page (welcome application) and resume with true
 * -> If not Of resume with false
 * offlineLogin:	true if offline login
 */
var _notifLoggedIn = function(userProfile, contextToRestore, offlineLogin) {
	if (!userProfile) {
		return $.smResolve(false);
	}
	var reconnectToken;
	return auth.reconnectGetToken().
	then(function(token) {
		reconnectToken = token;
		var userCtx = {
			"$user": userProfile.user.$value,
			"$role": userProfile.selectedRole.code,
			"$lang": userProfile.selectedLocale.code
		};
		globals.setUserCtx(userCtx);
		globals.setUserProfile(userProfile);
		locale.setUserLocales(userProfile && userProfile.user && userProfile.user.locales);
	}).then(function() {
		globals.setNeedToCheckAppsList(true);
		return initContext.init(false, contextToRestore, offlineLogin);
	})
		.then(function(context) {
			if (true || nativeApp.isSageX3WUPApp()) {
				// Set the token if any for reconnection - See exports.init
				nativeApp.setReconnectContext({
					reconnectToken: reconnectToken,
					context: context
				});
			}
			return settings.setLastUserProfile(userProfile);
		}).then(function(profile) {
			globals.getApplication().gotoWelcomeApplication();
			return true;
		});
};
/**
 * Resolves with true if user is logged in or false if login is required
 */
exports.init = function() {
	var reconnectContext;
	return $.smResolve(function() {
		/**
		 * reconnectToken is used to skip login if session is still alive
		 * Used by native wrapper when application resumed - See also notifLogin
		 */
		if (false || nativeApp.isSageX3WUPApp()) {
			// Read the token if any to skip login
			reconnectContext = nativeApp.getReconnectContext();
		}
		var step;
		if (reconnectContext && reconnectContext.reconnectToken) {
			// Call a request that sets the session cookie - Also could do security controls
			step = auth.reconnectSetToken(reconnectContext.reconnectToken);
		} else {
			step = $.smResolve();
		}
		return step;
	}).then(function() {
		return auth.check();
	}).then(function(userProfile) {
		return _notifLoggedIn(userProfile, reconnectContext);
	});
};

exports.notifLoggedIn = _notifLoggedIn;