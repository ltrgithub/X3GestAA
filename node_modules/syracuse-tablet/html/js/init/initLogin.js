"use strict";

var auth = require('syracuse-tablet/html/js/application/authentication');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var settings = require('syracuse-tablet/html/js/application/settings');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var initContext = require('syracuse-tablet/html/js/init/initContext');
var native = require('syracuse-tablet/html/js/helpers/native/native');
var nativeX3WUPApp = native.getModule("X3WUPApp");
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("initLogin", true);

/**
 * Resolves with true if user is logged in or false if login is required
 * Notified after login request succeeded
 * -> Set the context according to contextToRestore or userProfile
 * -> If Ok set the current page (welcome application) and resume with true
 * -> If not Of resume with false
 * offlineLogin:	true if offline login
 * fromInitProcess	true if login occurred after initialization of the application
 */
var _notifLoggedIn = function(userProfile, offlineLogin, fromInitProcess) {
	if (!userProfile) {
		return $.smResolve(false, null);
	}
	var contextToRestore;
	if (fromInitProcess && native.hasCapability("voiceCommands") && native.getModule("voiceCommands").hasPendingBookmark()) {
		// No context is restored because there's a pending voice command triggered by the native wrapper
		// This command provides a context that is restored once application is ready (see application.notifUserLoggedIn)
		// The list of commands is not available when _notifLoggedIn is called
	} else {
		// Read context to restore if any - Url first or context provided by the wrapper
		contextToRestore = utils.getUrlContext();
		if (contextToRestore) {
			contextToRestore.type = "url";
		} else if (nativeX3WUPApp) {
			contextToRestore = nativeX3WUPApp.getReconnectContext();
			if (contextToRestore) {
				contextToRestore.type = "native";
			}
		}
	}
	var step;
	if (fromInitProcess !== true && nativeX3WUPApp) {
		log && log("Getting reconnect token");
		// Get ask for the reconnection token after login action to save it
		step = auth.reconnectGetToken().then(function(token) {
			// Stores the new reconnection token
			log && log("Getting reconnect token: " + token);
			nativeX3WUPApp.setReconnectToken(token);
			return $.smResolve();
		});
	} else {
		step = $.smResolve();
	}
	return step.then(function() {
		var userCtx = {
			"$user": userProfile.user.$value,
			"$role": userProfile.selectedRole.code,
			"$lang": userProfile.selectedLocale.code
		};
		globals.setUserCtx(userCtx);
		globals.setUserProfile(userProfile);
		locale.setUserLocales(userProfile && userProfile.user && userProfile.user.locales);
	}).then(function() {
		globals.setNeedToCheckAppsList(true);
		return initContext.init(false, contextToRestore, offlineLogin);
	}).then(function(userContext, context) {
		// contextToRestore passed in initContext has been checked (endpoint, role..) and set to null if not valid
		contextToRestore = context;
		return settings.setLastUserProfile(userProfile);
	}).then(function(profile) {
		notifications.publish("sm.user.logged.in", fromInitProcess, contextToRestore);
		return true;
	});
};
/**
 * Resolves with true if user is logged in or false if login is required
 */
exports.init = function() {
	/**
	 * reconnectToken is used to skip login if session is still alive
	 * Used by native wrapper when application resumed - See also notifLogin
	 */
	var step;
	var reconnectToken = nativeX3WUPApp ? nativeX3WUPApp.getReconnectToken() : null;
	if (reconnectToken) {
		// Call a request that sets the session cookie to reconnect Syracuse server
		step = auth.reconnectSetToken(reconnectToken);
	} else {
		step = $.smResolve();
	}
	return step.then(function() {
		// Check Syracuse session - Resolves with userProfile
		return auth.check();
	}).then(function(profile) {
		// userProfile!= null if connection OK - userProfile == null to force login
		return _notifLoggedIn(profile, false, true);
	});
};
exports.notifLoggedIn = _notifLoggedIn;