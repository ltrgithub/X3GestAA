"use strict";

var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var auth = require('syracuse-tablet/html/js/application/authentication');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var modal = require('syracuse-tablet/html/js/ui/modals/modal');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var sdataCommonRes = require('syracuse-tablet/html/js/sdata/sdataCommonResources');
var settings = require('syracuse-tablet/html/js/application/settings');

var initContext = require('syracuse-tablet/html/js/init/initContext');
var nativeApp = require('syracuse-tablet/html/js/helpers/native/nativeSageX3WUPApp');

var _gotoLogin = function(reason) {
	globals.getApplication().gotoLogin(reason);
};
/**
 * Set the context according to userProfile
 * Initialize the context and call initContext.init that notifies application that context has changed (display welcome app page)
 */
var _loginHandler = {
	// deferred is used to propagate error to the caller (login page) to display error message in asynchronous process
	// !! only one object that has been notify should resolve/reject the deferred
	notifLogin: function(userProfile, deferred) {
		auth.reconnectGetToken().
		then(function(reconnectToken) {
			var userCtx = {
				"$user": userProfile.user.$value,
				"$role": userProfile.selectedRole.code,
				"$lang": userProfile.selectedLocale.code
			};
			globals.setUserCtx(userCtx);
			globals.setUserProfile(userProfile);
			locale.setUserLocales(userProfile && userProfile.user && userProfile.user.locales);
			if (true || nativeApp.isSageX3WUPApp()) {
				// Set the token if any for reconnection - See exports.init
				nativeApp.setReconnectToken(reconnectToken);
			}
		})
			.then(function() {
				globals.setNeedToCheckAppsList(true);
				return initContext.init(false, false);
			})
			.then(function() {
				return settings.setLastUserProfile(userProfile);
			})
			.then(function() {
				// We must resolve/reject the deferred if not null
				if (deferred) deferred.resolve();
			}).fail(function(e) {
				if (deferred) {
					// We must resolve/reject the deferred if not null
					deferred.reject(e);
				} else {
					modal.error("notifLogin failed", e);
				}
			});
	}
};


exports.init = function() {
	notifications.subscribe(_loginHandler, ["sm.login"], 1);

	try {
		uiutils.waitWheelStart();
		var reconnectToken;
		/**
		 * reconnectToken is used to skip login if session is still alive
		 * Used by native wrapper when application resumed - See also notifLogin
		 */
		if (true || nativeApp.isSageX3WUPApp()) {
			// Read the token if any to skip login
			reconnectToken = nativeApp.getReconnectToken();
		}
		var step;
		if (reconnectToken) {
			// Call a request that sets the session cookie - Also could do security controls
			step = auth.reconnectSetToken(reconnectToken);
		} else {
			step = $.smResolve();
		}
		return step.then(function() {
			return auth.check();
		}).then(function(status) {
			if (status.authenticated === true) {
				return sdataCommonRes.getUserProfile();
			} else {
				return null;
			}
		})
			.then(function(profile) {
				uiutils.waitWheelStop();
				if (profile) {
					notifications.publish("sm.login", profile);
				} else {
					_gotoLogin();
				}
				return $.smResolve();
			}).fail(function(e) {
				uiutils.waitWheelStop();
				auth.logout().then(function() {
					_gotoLogin("Please try login again");
				}).fail(function(e) {
					modal.error("exports.init failed", e);
				});
			});
	} catch (e) {
		_gotoLogin("Javascript exception");
		return $.smResolve();
	}
};