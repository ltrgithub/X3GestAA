"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var modal = require('syracuse-tablet/html/js/helpers/modals');
var log = require('syracuse-tablet/html/js/helpers/logger').log;
var reqPage = require('syracuse-tablet/html/js/site/page');


var _site;

var breadCrumb = function() {
	// Initial length of history
	this.historyLength = window.history.length;
	this.getHistory = function(page) {
		var res = [];
		_site.$elmt.find(".page.breadcrumb").each(function(ix) {
			var page = $(this).smPageController();
			if (page) {
				res.push({
					title: page.historyTitle,
					historyLength: page.historyLength
				});
			}
		});
	};
	this.display = function() {
		var html = "";
		this.getHistory().forEach(function(entry, idx) {
			html.push("[" + idx + "] - title: " + entry.title + " - historyLength:" + entry.historyLength);
		});
		alert(html);
	};
};

var pushState = function(state) {
	if (!state) return;
	history.pushState(state, state.uuid, null);
	log && log("pushState", state.uuid, "history.length=" + history.length);
};

var Site = function($elmt) {
	this.breadCrumb = new breadCrumb();
	this.$elmt = $elmt;
	this.currentPage = null;
	this.currentApplication = null;
	this._config = {
		mockup: true,
		transition: null
	};
};

Site.prototype = {
	init: function() {
		var self = this;
		self._bindEvents();
	},
	_bindEvents: function() {
		var self = this;
		$(window).bind("popstate", function(event) {
			event.preventDefault();
			var state = event.originalEvent.state;
			log && log("popstate", "history.length=" + history.length, "State=" + (state != null));
			if (!state) return;
			setTimeout(function() {
				self._back(state);
			}, 0);
		});
		$(window).bind("hashchange", function() {
			log && log("hashchange", "history.length=" + history.length, "Hash=" + location.hash);
		});
		$(document).delegate(self.$elmt, "click", function(evt) {
			var target = $(evt.target);
			var elmt = target.closest("[data-nav]");
			var options = {};
			if (elmt.length > 0) {
				var attr = elmt.attr("data-nav");
				if (self._config.mockup) {
					// List Detail in mockup
					options.detailid = elmt.attr("data-detailid");
				}
				evt.preventDefault();
				evt.stopPropagation();
				_changePage(attr, options).then(function(dstPage) {
					pushState(dstPage.state);
				});
				return;
			}
			var elmt = target.closest("[data-action]");
			if (elmt.length > 0) {
				evt.preventDefault();
				evt.stopPropagation();
				var attr = elmt.attr("data-action");
				self._doAction(attr, options).fail(function(e) {
					modal.error("Data action error", e);
				});
				return;
			}
		});
	},
	config: function(id) {
		return this._config[id];
	},
	_doAction: function(act, options) {
		var deferred = $.Deferred();
		var self = this;
		try {
			act = "_act" + $.camelCase("-" + act);
			if (!self[act]) {
				throw new Error("No method " + act + "found");
			}
			$.when(self[act].apply(this, arguments)).then(function(todo) {
				if (todo) {
					if (todo.page) {
						_changePage(todo.page);
					}
				}
			}, function(e) {
				deferred.reject(e);
			});
		} catch (e) {
			deferred.reject(utils.toDiagnose({
				where: "site._doAction [" + act + "]",
				exception: e
			}));
		}
		return deferred.promise();
	},
	_actBack: function() {
		window.history.back();
	},
	_actBreadCrumb: function() {
		this.breadCrumb.display();
	},
	_actLogout: function() {
		var deferred = $.Deferred();
		if (!this._config.mockup) {
			// Do logout
		} else {
			modal.confirm("logout", function(confirmed) {
				deferred.resolve(confirmed ? {
					page: "login"
				} : null);
			});
		}
		return deferred.promise();
	},
	_back: function(state) {
		var self = this;
		log && log("_back", "start", "\n" + JSON.stringify(state, null, 2));
		if (!state) throw new Error("Back", "Unexpected null history state");
		return self._gotoPage(state, true);
	},
	_gotoPage: function(state, back) {
		var deferred = $.Deferred();
		var self = this;
		var failed = function(e) {
			modal.error("load error", e, function() {
				deferred.reject();
			});
		};
		var succeeded = function(dstPage) {
			var app = dstPage.getProp("application");
			if (app && app.length > 0) {
				self.currentApplication = app;
			}
			deferred.resolve(dstPage);
		};
		try {
			if (state === null || typeof state != "object") throw new Error("Bad state object");
			log && log("_gotoPage", "start", "page: " + state.uuid);
			if (self.currentPage && self.currentPage.getProp("uuid") === state.uuid) {
				log && log("\tPage is current -> Skip");
				return;
			}
			var dstPage = $("#" + state.uuid).smPageController();
			// Page found -> Direct access -> Activate and remove childs
			if (dstPage != null) {
				log && log("\tPage found in dom -> Activate");
				if (!dstPage) throw new Error("Unexpected null page data");
				self._pageActivate(dstPage, function() {
					// After activation to keep currentpage for transition
					dstPage.destroySiblings();
					deferred.resolve(dstPage);
				}, back);
				return deferred.promise();
			}
			// Page not found -> Create and display
			dstPage = reqPage.createPage(self.$elmt, state);
			// TODO - Use href to allow reload or find a workaround by storing the sate into a hash in _sessionStorage
			dstPage.load().then(function() {
				self._pageActivate(dstPage, function() {
					succeeded(dstPage);
				}, back);
			}, function(e) {
				failed(e);
			});
		} catch (e) {
			failed(e);
		}
		return deferred.promise();
	},
	_pageActivate: function(page, cb, back) {
		var self = this;
		page.activate(self.currentPage, function() {
			if (self.currentPage) {
				if (back === true || self.currentPage.getProp("cached") !== true) {
					self.currentPage.destroy();
				} else {
					// Keep cached page only if not back - Ex: List -> Detail
					self.currentPage.deactivate();
				}
			}
			self.currentPage = page;
			if (page.state.home) {
				// Destroy all cached pages except current home page
				self.removeAllPages(page);
			}
			if (cb) cb();
		});
	},
	destroy: function() {
		var self = this;
		$(window).unbind();
		if (self.$elmt) {
			self.$elmt.find(".page").each(function(idx) {
				var page = $(this).smPageController();
				if (page) page.destroy();
			});
			self.$elmt.unbind();
			self.$elmt.remove();
		}
		self.currentPage = null;
		self.currentApplication = null;
	},
	removeAllPages: function() {
		var self = this;
		var exclude = arguments;
		if (!self.$elmt) return;
		self.$elmt.find(".page").each(function(idx) {
			var page = $(this).smPageController();
			if (page && Array.prototype.indexOf.call(exclude, page) == -1) {
				page.destroy();
			}
		});
	}
};

// state - name of the page or history state object
var _changePage = function(state, options) {
	var self = this;
	if (state == null) state = "";
	if (typeof state === "string") {
		log && log("changePage", state);
		var name = state.trim();
		if (name.indexOf("#") == 0) name = name.substring(1);
		state = reqPage.pageInfo(name, true);
		if (!state) {
			if (name.length != 0) {
				log && log("Page " + name + " not found -> Go to home");
			}
			name = "home";
			state = reqPage.pageInfo(name, true);
		}
		if (options) {
			$.extend(true, state, options);
		}
		state.name = name;
		if (!state.transition) {
			// Default transition
			state.transition = _site.config("transition");
		}
		// Readable id
		state.uuid = utils.readableuid("page", state.type, state.name, state.appId || "site");
	}
	return _site._gotoPage(state);
};

var _create = function($elmt) {
	_site = window.smSite = new Site($elmt);
	_site.init();
	log && log("Site", "Create ok");
	return _site;
};


exports.create = _create;
exports.changePage = _changePage;