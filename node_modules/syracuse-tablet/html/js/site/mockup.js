"use strict";
var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').log;
var templates = require('syracuse-tablet/html/js/helpers/templating');
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;

var _consts = {
	tmplPage: "pages/",
	tmplDefHeader: "pages/default/header",
	tmplRoot: "templates/pages/",
	dataFile: "/data.json",
	tmplHead: "header",
	tmplMain: "main"
};
var _defInfo = {
	home: false,
	type: "static",
	cached: false,
	refreshed: false,
	appId: "site",
	changeHash: false
};
var _pages = {
	"home": {
		home: true,
		type: "dashboard"
	},
	"about": {
		type: "static"
	},
	"settings": {
		type: "static"
	},
	"setup": {
		type: "static"
	},
	"login": {
		type: "static"
	},
	"customers.home": {
		appId: "customers",
		type: "appdashboard",
		cached: true
	},
	"customers.detail": {
		appId: "customers",
		type: "appdashboard",
		cached: true
	},
	"detail": {
		type: "syracuse",
		cached: true
	},
	"lookup": {
		type: "syracuse"
	},
	"query": {
		type: "syracuse"
	},
	"edit": {
		type: "syracuse",
		cached: true
	}
};

for (var p in _pages) {
	_pages[p] = $.extend(true, {}, _defInfo, _pages[p]);
}

var _rooturl = (function() {
	var url = window.location.href.split('/');
	url[url.length - 1] = _consts.tmplRoot;
	return url.join('/');
})();

var _loadData = function(state) {
	var deferred = $.Deferred();
	var url = _rooturl + state.name + _consts.dataFile;
	if (state.detailid) {
		// If the link has a data-detailid attribute we expect a data.detaild.json file
		url = url.replace(".json", "." + state.detailid + ".json");
	}
	ajax("GET", url, null, {
		Accept: "text/plain"
	}).then(function(data, headers) {
		try {
			var json = null;
			if (headers.status === 200) {
				json = typeof data === "object" ? data : data == null || data.length == 0 ? {} : JSON.parse(data);
			} else if (headers.status === 404) {
				json = {};
			} else if (json === null) {
				throw new Error("Unexpected http status");
			}
			deferred.resolve(json);
		} catch (e) {
			deferred.reject(utils.toDiagnose({
				message: "Error loading [" + state.name + "] - Status[" + headers.status + "]",
				exception: e,
				where: "mockup.loadData"
			}));
		}
	}, function(status, respHeaders) {
		deferred.reject(utils.toDiagnose({
			message: "Error loading [" + state.name + "] - Status[" + status + "]",
			where: "mockup.loadData"
		}));
	});
	return deferred.promise();
};

var _buildHtml = function(state, data) {
	var deferred = $.Deferred();
	try {
		var root = _consts.tmplPage + state.name + "/";
		$.when(templates.exec(root + _consts.tmplMain, data), templates.exec(root + _consts.tmplHead, data, {
			failNotFound: false
		})).then(function(content, header) {
			if (header == null) {
				templates.exec(_consts.tmplDefHeader, data).then(function(header) {
					log && log("Mockup default templates loaded");
					deferred.resolve({
						content: content,
						header: header
					});
				}, function(e) {
					log && log(utils.toDiagnose({
						message: "Error loading mockup page[" + state.name + "]",
						exception: e,
						where: "mockup.init"
					}));
					deferred.resolve({
						content: content,
						header: {}
					});
				});
			} else {
				deferred.resolve({
					content: content,
					header: header
				});
			}
		}, function(e) {
			deferred.reject(e);
		});
	} catch (e) {
		deferred.reject(utils.toDiagnose({
			exception: e,
			where: "mockup.buildHtml"
		}));
	}
	return deferred.promise();
};

var _init = function(page, data) {
	//Load default template in parallel
	$.when(templates.exec(_consts.tmplDefHeader, {})).then(function(content, header) {
		log && log("mockup.init", "Default templates loaded");
	}, function(e) {
		log && log(utils.toDiagnose({
			message: "Default templates loading error",
			exception: e,
			where: "mockup.init	"
		}));
	});
};

var _pageInfo = function(id) {
	return _pages[id];
};

var _createPage = function($parent, historyState) {
	return null;
};

exports.init = _init;
exports.buildHtml = _buildHtml;
exports.pageInfo = _pageInfo;
exports.createPage = _createPage;
exports.loadData = _loadData;