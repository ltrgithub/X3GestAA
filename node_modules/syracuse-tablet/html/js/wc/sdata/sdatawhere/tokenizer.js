"use strict";

var token = require('syracuse-tablet/html/js/wc/sdata/sdatawhere/token');
var operators = require('syracuse-tablet/html/js/wc/sdata/sdatawhere/operator');

exports.Tokenizer = new function() {
	var self = this;

	function _skipSpaces(chars, i) {
		while (i < chars.length && chars[i] === " ") {
			i++;
		}
		return i;
	}

	function _isDigit(str) {
		return new RegExp('[0-9]').test(str);
	}

	function _isLetter(str) {
		return new RegExp('[\$a-zA-Z%\']').test(str);
	}

	function _isWordChar(str) {
		return new RegExp('[\$a-zA-Z0-9_%\']').test(str);
	}

	function _parseNumber(line, chars, i, tokens) {
		var end = i + 1;
		while (end < chars.length && _isDigit(chars[end])) {
			end++;
		}
		var val;
		if (end < chars.length && chars[end] === '.') {
			end++;
			while (end < chars.length && _isDigit(chars[end])) {
				end++;
			}
			val = parseFloat(line.substring(i, end));

		} else {
			val = parseInt(line.substring(i, end), 10);
		}
		tokens.push(new token.Token(token.tokenType.literal, line, i, end - i,
			val));
		return end;
	}

	var _literals = {
		"true": true,
		"false": false,
		"null": null,
	};

	function _parseWord(line, chars, i, tokens) {
		var end = i + 1;
		while (end < chars.length && _isWordChar(chars[end])) {
			end++;
		}
		var word = chars.substr(i, end - i);
		var op = operators.operators.operators[word.toLowerCase()];
		if (op != null) {
			tokens.push(new token.Token(token.tokenType.operator, line, i, end - i, op));
		} else {
			var lit;
			if ((lit = _literals[word]) !== undefined) {
				tokens.push(new token.Token(token.tokenType.literal, line, i,
					end - i, lit));
			} else {
				tokens.push(new token.Token(token.tokenType.identifier, line,
					i, end - i, word));
			}
		}
		return end;
	}

	function _parseQuotedString(line, chars, i, tokens) {
		var quote = chars[i];
		var end = i + 1;
		var dest = 0;
		var res = "";
		while (end < chars.length) {
			if (chars[end] === quote) {
				end++;
				if (end === chars.length || chars[end] !== quote) {
					tokens.push(new token.Token(token.tokenType.literal, line,
						i, end - i, res));
					return end;
				}
			}
			res += chars[end++];
		}
		throw new Error('quoted string not terminated: ' + line.substring(i));
	}

	function _parseOperator(line, ch, i, tokens) {
		var op = operators.operators.operators[ch];
		tokens.push(new token.Token(token.tokenType.operator, line, i, 1, op));
		return i + 1;
	}

	function _parseDateTime(line, chars, i, tokens) {
		var end = i + 1,
			len = chars.length;
		while (end < len) {
			if (chars[end] == '@')
				break;
			end++;
		}
		if (end === chars.length) {
			throw new Error('Where parser: date constant not terminated:' + line.substring(i, line.length));
		}
		var str = chars.substr(i + 1, end - i - 1);
		var dt = new Date(str);
		if (dt != null) {
			var nt = new token.Token(token.tokenType.literal, line, i, end + 1 - i, dt);
			nt.dataType = "datetime";
			nt.svalue = str;
			tokens.push(nt);
		}
		return end + 1;
	}

	self.tokenize = function(line) {
		var tokens = [];
		var i = 0;
		while (i < line.length) {
			i = _skipSpaces(line, i);
			var ch = line[i];
			switch (ch) {
				case '@':
					i = _parseDateTime(line, line, i, tokens);
					break;
				case '"':
				case '\'':
					i = _parseQuotedString(line, line, i, tokens);
					break;
				case '.':
				case '-':
				case '+':
				case '(':
				case ')':
				case ',':
					i = _parseOperator(line, ch, i, tokens);
					break;
				default:
					if (_isLetter(ch)) {
						i = _parseWord(line, line, i, tokens);
					} else if (_isDigit(ch)) {
						i = _parseNumber(line, line, i, tokens);
					} else {
						throw new Error('invalid character: ' + line.substring(i));
					}
					break;
			}
		}

		return tokens;
	};

	return self;
};