"use strict";

var modules = require('syracuse-tablet/html/js/wc/common/modules');
var protoHelpers = require('syracuse-tablet/html/js/wc/sdata/protocolHelpers');
var sdataStatic = require('syracuse-tablet/html/js/wc/sdata/sdataStatic');
var ajax = require('syracuse-tablet/html/js/wc/common/ajax');
var metaDataCache = require('syracuse-tablet/html/js/wc/sdata/cache/metaDataCache');
var jsutils = require('syracuse-tablet/html/js/wc/helpers/jsutils');
var gadget = require('syracuse-tablet/html/js/wc/controls/vignette/gadget');

var Dataset = require('syracuse-tablet/html/js/wc/sdata/dataset').Dataset;
var Prototype = require('syracuse-tablet/html/js/wc/sdata/prototype').Prototype;

exports.getDefaultHomeDashboardUrl = function() {
	var up = modules.get("appController").App.getCurrentUserProfile()
	var url = exports.getHomeDashboardUrl(up.user.$uuid, up.selectedRole.$uuid);
	return url;
}
exports.getHomeDashboardUrl = function(userUID, roleUID) {
	var url = "/mobile2/syracuse/collaboration/syracuse/welcomeDashboards/$service/availableDashboard?representation=mobileDashboard.$details";
	url += userUID ? "&user=" + userUID : "";
	url += roleUID ? "&role=" + roleUID : "";
	return protoHelpers.getHostPort() + url;
};
exports.fetchPageHomeData = function(url, options) {
	options = options || {};
	var self = this;

	var prototypeJson;
	var datasetJson;
	var $resources;
	// Fix facet recognition for some escaped urls
	var $url = url.replace(/\.\%24/g, ".$");

	prototypeJson = sdataStatic.getMobileDashboardProto();
	return ajax.request($url, "GET")
		.then(function(result) {
			$resources = result.data.$resources
			return _getDefaultDataHome($resources.content)
		})
		.then(function(datasetJson) {
			return _appendTestHomeDataset(datasetJson)
		})
		.then(function(dataset) {
			datasetJson = dataset
			return _getHomePage($resources, datasetJson);
		})
		.then(function(page) {
			// Special for welcome page since here not all information is yet availabe and also not needed
			datasetJson.$clientContext = {
				// $mobileProtocol: $mobileProtocol, Does not matter, protocol is selected by welcome page
				$mobileEndpoint: _getEndpoint(),
				// $mobileApplication: $mobileApplication, Does not matter, application is not yet selected 
			};
			return protoHelpers.checkTransform($url, prototypeJson, datasetJson, page);
		})
		.then(function(pageDataTransformed) {
			if (!$resources.content) {
				exports.savePersonalHomeDashboard({
					"datasetJson": datasetJson,
					"page": pageDataTransformed.page
				});
			}


			var pageData = {};
			pageData.prototype = new Prototype(pageDataTransformed.prototypeJson);
			pageData.dataset = new Dataset(pageDataTransformed.datasetJson, pageData.prototype);
			pageData.isWorkingCopy = false;
			pageData.$url = $url;
			pageData.$originalUrl = $url; // Will be overriden by pageFactory to contain original url before applying filter/sort
			pageData.page = pageDataTransformed.page;

			return pageData;
		});
};

function _appendTestHomeDataset(dataset) {
	//Only in dev mode
	if (!jsutils.isDvlpVersion()) {
		return $.smResolve(dataset)
	}
	var gadget = {
		$uuid: "$MOCK_mobileDashboard_Gadget",
		$title: "Test applications",
		$url: "{$hostPort}/mobile2/$client/$local/$dataset/mobileDashboard('MOCK')",
		$method: "GET",
		$type: "$application"
	};
	dataset.$mobileGadgets[gadget.$uuid] = gadget;
	dataset.vignettes.push({
		local: true,
		gadget: {
			$uuid: gadget.$uuid
		},
		$uuid: "$MOCK_mobileDashboard_Vignette",
		persistentId: "$MOCK_mobileDashboard_Vignette"
	});
	return $.smResolve(dataset);
}

function _getDefaultDataHome(content) {
	return metaDataCache.getApplicationsList().then(function(applist) {
		//Get a compatible datasetjson or build a dataset json from applist
		return _checkHomeDataset(applist, content);
	});
}

function _getHomePage($resources, datasetJson) {
	var article = $resources.content ? $resources.content.$article : null;
	// home article from dashboard content (extended with local test) or build a default
	return {
		$article: _homeArticle(article, datasetJson),
		$views: $resources.$views
	}
}

exports.savePersonalHomeDashboard = function(pageData) {
	var opts = _getSaveHomeDashboardOpts(pageData);
	return ajax.request(opts.$url, opts.$method, opts.data).then(function(result) {
		return result.data;
	})
}

function _homeArticle($article, datasetJson) {
	if (!$article) {
		return _defaultHomeArticle(datasetJson);
	}

	// Append test vignettes
	var $items = [];
	datasetJson.vignettes.forEach(function(v) {
		if (v.local) {
			$items.push({
				"$layoutType": "tile",
				"$title": "",
				"$size": "medium",
				"$items": [{
					"$bind": v.persistentId
				}]
			})
		}
	});
	if ($items.length > 0) {
		$article.$items.unshift({
			"local": true,
			"$layoutType": "hubgroup",
			"$title": "Test applications",
			"$items": $items
		})
	}
	return $article;
}

function _defaultHomeArticle(datasetJson) {
	var article = {
		"$layoutType": "hub",
		"$items": [{
			"local": true,
			"$layoutType": "hubgroup",
			"$title": "Test applications",
			"$items": []
		}, {
			"$layoutType": "hubgroup",
			"$title": "All available applications",
			"$items": []
		}]
	};

	// Add client side test gadgets if there are some in the dataset
	var i;
	datasetJson.vignettes.forEach(function(v) {
		i = v.local ? 0 : 1
		article.$items[i].$items.push({
			"$layoutType": "tile",
			"$title": "",
			"$size": "medium",
			"$items": [{
				"$bind": v.persistentId
			}]
		})
	})
	if (article.$items[0].$items.length === 0) {
		article.$items.shift();
	}
	return article;
}

function _checkHomeDataset(appList, dashboardContent) {
	var dataset = _ensureHomeDatasetCompatibility(dashboardContent, appList);
	if (dataset) {
		return dataset;
	}
	var datasetJson = {
		vignettes: [],
		$mobileGadgets: {}
	};
	var endpoint = modules.get("appController").App.getCurrentEndpoint();
	appList.forEach(function(app) {
		var vignette = {
			"persistentId": app.$uuid,
			"gadget": {
				"$uuid": app.$uuid,
				"title": app.title,
			}
		};
		datasetJson.vignettes.push(vignette);
		datasetJson.$mobileGadgets[app.$uuid] = {
			"$type": "$application",
			"$title": app.title,
			"icon": app.iconName,
			"applicationName": app.applicationName,
		};
	});
	return datasetJson;
}

function _ensureHomeDatasetCompatibility(datasetJson, appList) { // datasetJson could be null, content V11 or content V12(woco)
	var compatibleDatasetJson = {
		$mobileGadgets: {},
		vignettes: []
	};
	if (!datasetJson) return null;

	if (datasetJson.$mobileGadgets) {
		datasetJson.vignettes.forEach(function(vi) {
			if (_isVignetteAvailable(datasetJson.$mobileGadgets[vi.persistentId], appList)) {
				compatibleDatasetJson.vignettes.push(vi);
				compatibleDatasetJson.$mobileGadgets[vi.persistentId] = datasetJson.$mobileGadgets[vi.persistentId];
			}
		})
		return compatibleDatasetJson;
	}
	var endpoint = modules.get("appController").App.getCurrentEndpoint();
	Object.keys(datasetJson.$vignettes).forEach(function(key) {
		if (_isVignetteAvailable(datasetJson.$gadgets[key], appList)) {
			compatibleDatasetJson.vignettes.push({
				"persistentId": key,
				"gadget": {
					"$uuid": key,
					"title": datasetJson.$gadgets[key].title || "",
				}
			});
			compatibleDatasetJson.$mobileGadgets[key] = datasetJson.$gadgets[key];
			compatibleDatasetJson.$mobileGadgets[key].$url = protoHelpers.getMobileAppUrl(datasetJson.$gadgets[key].applicationName);
			compatibleDatasetJson.$mobileGadgets[key].$method = "GET";
		}
	})
	return compatibleDatasetJson;
}

function _isVignetteAvailable(gadget, appList) {
	//check if application exist
	var appMap = {};
	appList.forEach(function(app) {
		appMap[app.applicationName] = app
	})
	return (gadget.$type !== "$application" || (gadget.$type === "$application" && appMap[gadget.applicationName]))
}

function _getSaveHomeDashboardOpts(pageData) {
	var $gadgets = {},
		$article = {},
		vignettes = [];
	pageData.datasetJson.vignettes.forEach(function(vi) {
		if (!vi.local) {
			vignettes.push(vi);
			$gadgets[vi.persistentId] = pageData.datasetJson.$mobileGadgets[vi.persistentId];
		}
	});
	$article.$layoutType = pageData.page.$article.$layoutType,
		$article.$items = [];
	pageData.page.$article.$items.forEach(function(item) {
		if (!item.local) {
			$article.$items.push(item)
		}
	});
	var content = {
		"$dashboardName": "$welcomeDashboard",
		"$title": "Home",
		"$article": $article,
		"vignettes": vignettes,
		"$mobileGadgets": $gadgets,
	}
	var up = modules.get("appController").App.getCurrentUserProfile();
	var data = {
		"user": {
			"$uuid": up.user.$uuid,
		},
		"role": {
			"$uuid": up.selectedRole.$uuid,
		},
		"description": "My Dashboard", //dashboard.description || locale.text("welcome.mydashboard"),
		"clientId": "",
		"content": content,
		"isPersonal": true
	};
	var $url = "/sdata/syracuse/collaboration/syracuse/welcomeDashboards/$service/updateDashboard";
	return {
		"data": data,
		"$url": $url,
		"$method": "POST"
	}
}

exports.welcomePageToCommands = function(data) {
	var vignettes = [];

	// Find all gadgets shown on page
	function _walk(article) {
		if (article.$bind) {
			var vignette = data.prototype.json.$properties[article.$bind];
			if (vignette && vignette.$type === "application/x-vignette-link") {
				vignettes.push(vignette);
			}
		}
		if (article.$items) {
			article.$items.forEach(_walk);
		}
	}
	_walk(data.page.$article);

	var commands = [];
	vignettes.forEach(function(vignette) {
		var g = gadget.createGadget(new Prototype(vignette));
		if (g) {
			var title = g.data("$title");
			var link = g.getLink();
			if (link && title) {
				commands.push({
					title: title,
					page: link
				});
			}
		}
	});
	return commands;
	/* commands is like:
	[{
		title: "Kunden",
		page: {
			"$url": "{$hostPort}/mobile2/$client/$local/$dataset/mobileDashboard('MY_CUSTOMERS')",
			"$method": "GET"

		}
	}, ...];
	*/
}

function _getEndpoint() {
	return modules.get("appController").App.getDefaultEndpoint();
}