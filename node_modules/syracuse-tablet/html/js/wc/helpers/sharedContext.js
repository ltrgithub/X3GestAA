"use strict";

var ajax = require('syracuse-tablet/html/js/wc/common/ajax');
var jsutils = require('syracuse-tablet/html/js/wc/helpers/jsutils');

var defaultLifeSpan = 10 * 24; // hrs to keep context in database

exports.storeSharedContext = function(context) {
	return ajax.request(
			"/sdata/syracuse/collaboration/syracuse/mobileSharedContexts?representation=mobileSharedContext.$edit",
			"POST", {
				linkCtx: JSON.stringify(context),
				lifespan: defaultLifeSpan
			}
		)
		.then(function(result) {
			return result.data.$uuid;
		});
}

exports.readSharedContext = function(uuid) {
	var deferred = $.Deferred();
	ajax.request("/sdata/syracuse/collaboration/syracuse/mobileSharedContexts('" + uuid + "')?representation=mobileSharedContext.$details")
		.then(function(result) {
			var data = result.data && result.data.linkCtx;
			var obj = null;
			try {
				obj = data && JSON.parse(data);
			} catch (e) {}

			deferred.resolve(obj);
		})
		.fail(function() {
			deferred.resolve(null);
		});

	return deferred.promise();
}

exports.createContextFromPage = function(page) {
	return {
		$url: page.pageData.$url,
		$method: page.pageData.$method,
		$savedCtx: page.savedCtxCreate()
	};
}

exports.createPageLoadDataFromContext = function(context) {
	return {
		$url: context.$url,
		$method: context.$method,
		pageOptions: {
			savedCtx: context.$savedCtx
		}
	};
}

exports.sendPageByEmail = function(page) {
	return $.smResolve()
		.then(function() {
			return exports.createContextFromPage(page)
		})
		.then(function(context) {
			return exports.storeSharedContext(context)
		})
		.then(function(uuid) {
			var email = ["mailto:?subject="];
			email.push(encodeURIComponent(page.getPageTitle() || ""));
			email.push("&body=");
			email.push(encodeURIComponent(_getOpenLinkUrl(uuid)));
			var win = window.open(email.join(''));
			if (win) { // Can be null if there is a popup blocker
				setTimeout(function() {
					win.close();
				}, 100);
			}
		});
}


/**
 * Returns the url that will contain the current page context to restore (ctx) (links, live tiles...)
 */
function _getOpenLinkUrl(ctxUuid) {
	var url = $.extend({}, jsutils.getCurrentUrl());
	if (ctxUuid) {
		if (!url.query) {
			url.query = {};
		}
		url.query.url = "contextId://" + ctxUuid;
	}
	return jsutils.urlToString(url);
};