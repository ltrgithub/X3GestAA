"use strict";

var locale = require("syracuse-tablet/html/js/wc/helpers/locale");
var numberFormat = require("syracuse-tablet/html/js/wc/helpers/types/numberFormat");

exports.validate = function(value, constraints, errors) {
	if (value == null) {
		if (constraints.$isMandatory) return errors.push(locale.text("integer.valMan"));
		if (!constraints.$isNullable) return errors.push(locale.text("integer.valNull"));
		return;
	}
	if (typeof value == "string") {
		value = parseInt(value);
	} else if (typeof value !== "number" || (value % 1 !== 0)) {
		errors.push(locale.text("integer.valInt"));
		return;
	}
	if (constraints.$divisibleBy != null)
		if (value % constraints.$divisibleBy !== 0) errors.push(locale.text("integer.valDiv", constraints.$divisibleBy));
	if (constraints.$enum != null && !constraints.$enum.some(function(elt) {
			return elt.$value == value;
		})) errors.push(locale.text("integer.valEnum"));
	if (constraints.$minimum != null) {
		if (constraints.$minimumCanEqual) {
			if (value < constraints.$minimum) errors.push(locale.text("integer.valGe", constraints.$minimum));
		} else {
			if (value <= constraints.$minimum) errors.push(locale.text("integer.valGt", constraints.$minimum));
		}
	}
	if (constraints.$maximum != null) {
		if (constraints.$maximumCanEqual) {
			if (value > constraints.$maximum) errors.push(locale.text("integer.valLe", constraints.$maximum));
		} else {
			if (value >= constraints.$maximum) errors.push(locale.text("integer.valLt", constraints.$maximum));
		}
	}
};

exports.parse = function(str, format) {
	return Math.floor(numberFormat.parse(str, format));
};

exports.format = function(val, format) {
	return numberFormat.format(val, format);
};

exports.add = function(n1, n2) {
	return n1 + n2;
};

exports.subtract = function(n1, n2) {
	return n1 - n2;
};

exports.numberValue = function(val) {
	return parseInt(val, 10);
};

exports.defaultValue = 0;