"use strict";

var log = require('syracuse-tablet/html/js/wc/helpers/logger').getLogger("scroll", false);
var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var uiRect = require('syracuse-tablet/html/js/wc/ui/rect');
var jsutils = require('syracuse-tablet/html/js/wc/helpers/jsutils');
var notifications = require('syracuse-tablet/html/js/wc/helpers/notifications');
var Hammer = require('syracuse-tablet/html/deps/hammerjs-2.0.4/hammer');
var Base = require('syracuse-tablet/html/js/wc/helpers/scroller/scrollerBase').Klass;
var modules = require('syracuse-tablet/html/js/wc/common/modules');

var _getMainScrollOffset = function() {
		var $$elmt = $("#s-m-app-id");
		return {
			top: $$elmt.length > 0 ? $$elmt.scrollTop() : 0,
			left: $$elmt.length > 0 ? $$elmt.scrollLeft() : 0
		};
	}
	/**
	 * True if hammer event has the dir direction
	 * dir	h or v
	 * 		   -90			+180<-- -->0
	 * 			^			       |
	 * 			|                 +90
	 * -180 <-- -->   0
	 */
var _isEvtDirection = function(evt, dir, forceTrueIfNull) {
	// If hammer as no event it's - we can have the case with panup pandown without velocity
	// by default if work with if (ui.isEvtDirection(evt, "v")) return; - null evt means we continue
	if (evt == null) return forceTrueIfNull === true;
	if (evt.angle == null) throw new Error("this is not a hammer.js event");
	if ((evt.angle > 45 && evt.angle < 135) || (evt.angle < -45 && evt.angle > -135)) return dir == "v";
	return dir == "h";
};



var _stopClickEvent = function(mgr, evt, reason) {
	log && log("Clicked canceled", reason, mgr.id);
	evt.stopPropagation();
	evt.preventDefault();
	evt.$stop = true;
};
// Time to wait before allowing click events a scrolling
var _lastClickTO = 400;
// Enable the slowdown process - scroll continue after panend (mouse up ) like on native devices
var _slowDown = true;
// Move the $$elmt after _slowDownTO in slowdown process
var _slowDownTO = 10;
/**
 * returns the distance to _move according to velocity v
 */
var _velocityToDist = function(velocity) {
	// Velocity of the _move - 0 if we _move the finger slowly and ~ 2 for fast - TO IMPROVE REGARDING THE CONTEXT - TOUCH/DESKTOP 
	var v = Math.abs(Math.round(velocity * 4));
	// Distance to _move - square function of velocity (non linear) 
	// Allow to _move slow and fast if we increase the speed of the finger
	return Math.max(1, v * v / 2);
};
/**
 * Creates a vertical/horizontal scroller which emulates the tablet native behavior
 * 		$$elmt		element to scroll
 * 		options		scrollMax			maximum top - 0 by default - 50 for pages with header...
 * 					direction		h/v
 * 					isPageScroller	true/false
 * 		parentMgr	parent scroll manager (the page's one for an array scroller)
 * 					used to deal with click event
 * 		$$nativeScroll 	div that will take the native scroll when we disable the scrolling (for test and authoring)
 * 						optional - $elmt if null
 */
var _consts = {
	pan: {
		v: "panup pandown panstart panend",
		h: "panleft panright panstart panend"
	},
	dir: {
		v: Hammer.DIRECTION_VERTICAL,
		h: Hammer.DIRECTION_HORIZONTAL
	},
	upEvt: {
		v: "panup",
		h: "panleft"
	}
};
var _Klass = utils.defineClass(function HammerScroller($$elmt, options, parentMgr) {
	options = options || {};
	Base.call(this, $$elmt, options);
	this.id = $$elmt.closest("[id]").attr("id");
	this.parentMgr = parentMgr;
	// Init hammer manager
	this.hammer = new Hammer(this.$$elmt.get(0));
	// evts enabled - false by default
	this._evtsEnabled = false;
}, Base, {
	/**
	 * We need to initialize the scroll after creation
	 * Scrollable object arrays/pages have an empty scroll which is initialized if needed
	 * Initialization needs to be called when the object has been displayed (after show) to make sure that viewRect is ok
	 * To manage savedCtxRestore it's also the better way
	 * 		- save ctx (top)is stored and took into account at initialization
	 * Params
	 * 		viewRect		rectangle (uiUtils/rect class) of the view within we will _move the content of $$elmt (kind of window)
	 * 						!!!top/left must be in fixed coordinates (relative to document)
	 * 						in order to be able to check if mouse pointer belongs to this rect on mousemove/pandown
	 * 		dir				To change dir if needed (orientation changed)
	 * 		scrollMax			To change scrollMax if needed (orientation changed)
	 * 		preserveScroll	true to init scrollRect and preserve the scrolling
	 * 						used to for child pages
	 */
	init: function(viewRect, dir, scrollMax, preserveScroll) {
		Base.prototype.init.call(this, viewRect, dir, scrollMax, preserveScroll);
	},
	_initDir: function(dir) {
		Base.prototype._initDir.call(this, dir);
		// event than means up or right
		this.upEvtType = _consts.upEvt[this.dir];
	},
	_doInit: function(viewRect, dir, scrollMax, preserveScroll) {
		// We need pan and not swipe
		this.hammer.get("pan").set({
			threshold: 0, // Small threshold to bloc the click (mouseup) as son as pan start- To test on mobile devices
			direction: _consts.dir[this.dir]
		});
		// We need press to stop the scolling
		this.hammer.get("press").set({
			time: 1 //Small timeout needed to stop immediately when press
		});
		// Create handlers
		this._panHandler = Hammer.bindFn(this._onPan, this);
		this._pressHandler = Hammer.bindFn(this._onPress, this);
		this._clickHandler = Hammer.bindFn(this._onClick, this);
		// - altClick enable/disable the scrolling
		this.$$elmt.on('click', this._clickHandler);
		// Bind events
		// Original rectangle - used to enable/disable scrolling
		// !!! Images and components loaded by URL need to have a fix height !!! otherwise we can't calculate the height
		this._originalRect = uiRect.elmtRect(this.$$elmt);
		// Store the original offset because it's the reference (only for embedded object like page into vignette and arrays)
		this._originalScrollOffset = this.isPageScroller ? null : _getMainScrollOffset();
		this._enableEvents(true);
	},
	/**
	 * Enable / Disable events
	 * Used by reset and Alt Click
	 * toggleStatus: true means that we toggle 'native scroll' <-> 'hammer scroll'
	 */
	_enableEvents: function(yes) {
		if (!this.hammer) return;
		var wasDisabled = this._evtsEnabled === false;
		// ENABLED
		if (yes === true && this._evtsEnabled !== true) {
			this._evtsEnabled = true;
			this.hammer.on(_consts.pan[this.dir], this._panHandler);
			this.hammer.on("press", this._pressHandler);
			// Just to find elmt with debugger
			this.$$elmt.addClass("s-m-scroll" + this.dir);
		}
		// DISABLED
		if (yes === false && this._evtsEnabled !== false) {
			this._evtsEnabled = false;
			if (this.hammer) {
				this.hammer.off(_consts.pan[this.dir], this._panHandler);
				this.hammer.off("press", this._pressHandler);
			}
			this.$$elmt.removeClass("s-m-scroll" + this.dir);
		}
		// IN ANY CASES
		if (wasDisabled) {
			// Nothing
		} else {
			this.panStart = false;
			this._stopSlowingDown();
			this.cancelClick = false;
			this.lastClickAllowed = null;
		}
	},
	/**
	 * Disable scroll but keep the capability to re-initialize it
	 */
	reset: function(dontResetValue) {
		Base.prototype.reset.call(this, dontResetValue);
		// !! FIRST - Disable events
		this._enableEvents(false);
		// Disable click - No mo more scrolling compared to disable/enable
		if (this.$$elmt) {
			this.$$elmt.off('click', this._clickHandler);
		}
		// True if panstart - mouse start to _move
		this.panStart = false;
		// True if the scroll is slowing down after panend (mouse up)
		this._stopSlowingDown();
		// Cancel click on a link
		this.cancelClick = false;
		//Prevent click after _lastClickTO ms after a panend
		this.lastClickAllowed = null;
		// Null to force to set value on init ( context restored)
		this.val = null;
		this.isLocked = false;
		// !! DO NOT RESET - dir, scrollMax, parentMgr, restoredScroll
	},
	/**
	 * Destroy scroller
	 */
	destroy: function() {
		Base.prototype.destroy.call(this);
		// After
		if (this.hammer) {
			this.hammer.destroy();
			this.hammer = null;
		}
		this._panHandler = null;
		this._pressHandler = null;
		this._toggleRect(false);
		this._clickHandler = null;
		notifications.unsubscribe(this);
	},
	/**
	 * Refresh scrolling
	 * 	internal call or called to refresh scrolling when we activate cached pages
	 *  scroll: optional
	 */
	_refresh: function(scroll, force) {
		if (!this.$$elmt) return;
		this._setScroll(scroll);
		if (this.dir == "v") {
			this.$$elmt.css({
				top: this.getScroll() + "px"
			});
		} else {
			this.$$elmt.css({
				left: this.getScroll() + "px"
			});
		}
	},
	_getScrollOffset: function() {
		if (this.isPageScroller || this._originalScrollOffset == null) return null;
		var o = _getMainScrollOffset();
		return {
			top: o.top - this._originalScrollOffset.top,
			left: o.left - this._originalScrollOffset.left
		};
	},
	_toggleRect: function(remove) {
		// Debug show the rectangle - fixed position 
		if (this._$$viewRect) {
			this._$$viewRect.remove();
			this._$$viewRect.off('click', this._clickHandler);
			this._$$viewRect = null;
		} else if (remove !== false) {
			this._$$viewRect = this.viewRect.showInDocument();
			var o = this._getScrollOffset();
			if (o) {
				this._$$viewRect.css({
					marginTop: "+=" + o.top,
					marginLeft: "+=" + o.left
				});
			}
			this._$$viewRect.on('click', this._clickHandler);
		}
	},
	/**
	 * Intercept click/mouseup events for filtering
	 * We need to filter click events to control the triggering of links
	 * altClick 	-> Enables/Disables scrolling
	 * shiftClick	-> Displays/Hides the viewRect
	 */
	_onClick: function(evt) {
		log && log("onClick Status", "slowingDown:", this.slowingDown, "panStart:", this.panStart, "cancelClick:", this.cancelClick, "lastClickAllowed:", this.lastClickAllowed ? new Date().getTime() - this.lastClickAllowed : null);
		evt.$stop = false;
		if (evt.shiftKey) {
			this._toggleRect();
			return _stopClickEvent(this, evt, "Show rectangle");
		}
		// If disable we skip
		if (this._evtsEnabled === false) return;
		if (this.slowingDown) {
			return _stopClickEvent(this, evt, "slowing down");
		}
		if (this.cancelClick) {
			this.cancelClick = false;
			return _stopClickEvent(this, evt, "Click canceled");
		}
		if (this.lastClickAllowed != null && ((new Date().getTime() - this.lastClickAllowed) < 0)) {
			// Click is authorized if not slowingDown or if not cancelClick
			// We wait _lastClickTO after panend (mouseup) to allow click
			this.lastClickAllowed = null;
			return _stopClickEvent(this, evt, "Last click timeout");
		}
		if (this.parentMgr && this.parentMgr.dir != this.dir) {
			// For double scroll direction one by parent and one by a grid we need to sak the parent to cancel the click 
			this.parentMgr._onClick(evt);
			if (evt.$stop === true) {
				return _stopClickEvent(this, evt, "Parent stopped click");
			}
		}
		log && log("onClick not stopped");
	},
	/**
	 * Used to stop the slowdown process
	 */
	_onPress: function(evt) {
		this.lastPress = new Date().getTime();
		if (this.slowingDown) {
			this._stopSlowingDown();
			// Last click is avoided - The click evt that is always triggered after press a event
			this.cancelClick = true;
		}
		if (this.parentMgr) this.parentMgr.isLocked = false;
		log && log(this.id, "onPress", "slowingDown=" + this.slowingDown, "panStart=" + this.panStart, "cancelClick =" + this.cancelClick, "lastClickAllowed =" + this.lastClickAllowed);
	},
	/**
	 * pan event - mousedown/mousemove/mouseup
	 */
	_onPan: function(evt) {
		log && log(this.id, evt.type, this.dir, _isEvtDirection(evt, this.dir), "isLocked", this.isLocked);
		if (!_isEvtDirection(evt, this.dir)) return;
		if (this.isLocked === true) return;
		try {
			if (evt.type === "panstart") {
				// Mouse mousedown + mousemove event - start the process
				log && log(evt.type);
				this.panStart = true;
				this.cancelClick = true;
				this._stopSlowingDown();
				if (this.parentMgr && (this.parentMgr.dir === this.dir)) this.parentMgr.isLocked = true;
			} else if (evt.type === "panend") {
				// mouseup  - we continue to scroll (_slowDown) until the user do a press event to stop scrolling
				log && log(evt.type);
				this.panStart = false;
				if (_slowDown && this.lastVelocity != null) {
					// We keep the last velocity for slowdown process
					this.lastVelocity = Math.abs(this.lastVelocity);
					if (this.lastVelocity > 0.3 && this.lastVelocity < 1) {
						// If velocity is too small we keep 1
						this.lastVelocity = 1;
					} else {
						// under.3 we consider that we need to stop scrolling
						this.lastVelocity = Math.min(this.lastVelocity, 2);
					}
					if (this.lastVelocity >= 1) {
						// _slowDown option continue the process by decreasing the speed slowly and moving $$elmt
						this.slowingDown = true;
						this._slowDown(this.lastVelocity, this.lastUp);
						this.lastVelocity = this.lastUp = null;
					} else {
						if (this.parentMgr) this.parentMgr.isLocked = false;
					}
				} else {
					// avoid click on mouse up
					this.lastClickAllowed = new Date().getTime() + _lastClickTO;
					if (this.parentMgr) this.parentMgr.isLocked = false;
				}
				return;
			}
			// Direction of the scroll
			// Up means up or right 
			var up = evt.type === this.upEvtType || evt.type === "panstart" && evt.deltaY < 0;
			if (this._move(_velocityToDist(evt.velocity), up)) {
				this.lastVelocity = Math.abs(evt.velocity);
				this.lastUp = up;
			} else {
				this.lastVelocity = this.lastUp = null;
			}
		} catch (e) {
			console.log(JSON.stringify(jsutils.convertToDiagnoses(e), null, 2));
			return false;
		}
	},
	_stopSlowingDown: function() {
		this.slowingDown = false;
		if (this.parentMgr) this.parentMgr.isLocked = false;
	},
	/**
	 * Keep the last speed to continue scrolling process until the user do a press evt
	 */
	_slowDown: function(v, up) {
		var self = this;
		if (self.panStart || !self.slowingDown) {
			this._stopSlowingDown();
			return;
		}
		// keep the same velocity - to improve - we can decrease...
		if (v < 1) {
			this._stopSlowingDown();
			return;
		}
		if (self._move(_velocityToDist(v), up)) {
			// Move until stop with _slowDownTO timeout
			setTimeout(function() {
				self._slowDown(v, up);
			}, _slowDownTO);
		} else {
			this._stopSlowingDown();
		}
	},
	/**
	 * Move $$elmt vertically
	 */
	_move: function(dist, up) {
		if (!this.isInitialized() || dist == 0) {
			return;
		}
		try {
			var scroll = this.getScroll();
			// Check boundaries
			var val = up ? scroll - dist : scroll + dist;
			var valMin = this.getScrollMin();
			val = Math.max(Math.min(this.scrollMax, val), valMin);
			if (val === this.scrollMax || val === valMin) {
				log && log(this.id, "end scrolling");
				// avoid click during xx ms on mouse up at the end of scrolling
				this.lastClickAllowed = new Date().getTime() + _lastClickTO;
				this.cancelClick = false;
				if (scroll === val) {
					// Overflow -> Stop
					// log && log("_move overflow")
					return false;
				}
			}
			// Move elmt
			this._refresh(val);
			return true;
		} catch (e) {
			console.log(JSON.stringify(jsutils.convertToDiagnoses(e), null, 2));
			return false;
		}
	},
	/**
	 * Show element in the viewport - scroll if needed
	 * smoothOffset = null
	 * 		Regular behavior -> scroll $$e almost to the middle of the viewport 
	 * smoothOffset != null
	 * 		scroll $$e to make it just visible (stops scrolling when $e is visible)
	 * 		smoothOffset is used to adjust the position (empirical)
	 */
	makeVisible: function($$e, smoothOffset) {
		var scale = modules.get("siteLayout").getTransformScale();
		var prop = this.dir === "v" ? "top" : "left";
		var size = this.dir === "v" ? "height" : "width";
		if (!$$e || !this.isInitialized() || !this._evtsEnabled || $$e.closest(this.$$elmt).length === 0) {
			return;
		}
		if (this.slowingDown) {
			this._stopSlowingDown();
			// Last click is avoided - The click evt that is always triggered after press a event
			this.cancelClick = true;
		}
		/*
		WOCO - TODO expand the stack to show the element
		var curPage =  _getCurrentPage();
		if (!$$e.is(":visible") && curPage) {
			$$e.parents(".s-m-stack").map(function(stack) {
				var stackLayout = curPage.getLayout($(this).attr("id"));
				stackLayout && stackLayout.setAuthState({
					"collapsed": false
				});
			});
		}
		*/
		// smoothOffset used to tune the scrolling by the caller
		var smooth = smoothOffset != null;
		smoothOffset = smooth ? smoothOffset : 0;
		if (scale != 0 && scale != 1) {
			smoothOffset = smoothOffset * (1 / scale);
		}
		var o = $$e.offset();
		o[prop] = o[prop] + smoothOffset;
		var viewRectProp = this.viewRect[prop] * scale;
		var viewRectSize = this.viewRect[size] * scale;
		this.$$elmt.css("visibility", "hidden");
		var f = o[prop] > viewRectProp ? -1 : +1;
		var stopPos = Math.max(viewRectProp + viewRectSize - $$e[size](), viewRectProp + viewRectSize / 2);
		var step = f * (smooth ? 20 : 50);
		var stop = false;
		while (!stop) {
			var pos = $$e.offset()[prop] + smoothOffset;
			stop = f > 0 ? pos > stopPos : pos < stopPos;
			if (!stop) {
				this._refresh(this.getScroll() + step);
			}
		}
		var valMin = this.getScrollMin();
		if (this.getScroll() < valMin) {
			this._refresh(valMin);
		}
		if (this.getScroll() > this.scrollMax) {
			this._refresh(this.scrollMax);
		}
		this.$$elmt.css("visibility", "visible");
	},
	autoScroll: function(value) {
		this._move(Math.abs(value), value < 0);
	},
	/**
	 * Calculated dynamically because the content of the page can be modified after initisalization of scroller
	 */
	getScrollMin: function() {
		var prop = this.dir == "v" ? "height" : "width";
		var x = this.$$elmt[prop]();
		var scale = modules.get("siteLayout").getTransformScale();
		if (scale > 0 && scale != 1) {
			// !! With jQuery 3.1 the width/height are calculated according to the scale transform (it's wasn't the case for the previous version)
			// !! To not change the code we just divide x by the transform scale instead of multiplying
			x = x * (1 / scale);
		}
		// 30 pixel more
		return Math.min(this.scrollMax - x + this.viewRect[prop] - 30, this.scrollMax);
	},
	_setScroll: function(v) {
		if (v == null || isNaN(v)) {
			v = this.scrollMax;
		}
		this.val = v;
	},
	getScroll: function() {
		return this.val;
	},
	/**
	 *  Adjust the scroller after modification of DOM to make this.$$elmt visible
	 *  By example after an action which have hidden lines we need to call this method to adjust scrolling because the visible area can be outside the viewRect
	 */
	adjust: function(restoredScroll) {
		if (!this.isInitialized()) return false;
		var elmtRect = uiRect.elmtRect(this.$$elmt);
		if (this.viewRect.contains(elmtRect)) {
			// No scroll we set scrollMax
			this._refresh(this.scrollMax);
		} else {
			restoredScroll = restoredScroll == null ? this.getScroll() : restoredScroll;
			if (restoredScroll > this.scrollMax) {
				// outside the scop we set scrollMax
				restoredScroll = this.scrollMax;
			}
			var prop = this.dir == "v" ? "height" : "width";
			var valmin = this.scrollMax - elmtRect[prop] + this.viewRect[prop];
			if (restoredScroll < valmin) {
				// outside the scop we set scrollMin
				restoredScroll = this.getScrollMin();
			}
			this._refresh(restoredScroll);
		}
		return true;
	}
});

exports.Klass = _Klass;
exports.Hammer = Hammer;
exports.isEvtDirection = _isEvtDirection;