"use strict";

var _$$appElemt = null;

var _pageUpdateCycle = 1

exports.notifPageLoaded = function(step, page) {
	if (!_$$appElemt) return;
	if (step == "before") {
		$('[data-s-ut-page-is-current]').removeAttr("data-s-ut-page-is-current");
		return;
	}
	if (step == "after") {
		if (!page) {
			return;
		}
		// Put page name on vignettes too once they are loaded so we can easily find them too
		page.$$elmt.attr("data-s-ut-page-name", page.pageName);
		if (page.options.isVignette) {
			return;
		}
		// Put current page flag on top level page only
		page.$$elmt.attr("data-s-ut-page-is-current", page.pageName);
		return;
	}
};
exports.notifUserCtxChanged = function(ctx, endpoint) {
	if (!_$$appElemt) return;
	_$$appElemt.removeAttr("data-s-ut-user-ctx");
	if (ctx && endpoint) {
		var data = [ctx.$user || "", ctx.$role || "", ctx.$lang || "", endpoint || ""];
		_$$appElemt.attr("data-s-ut-user-ctx", data.join(','));
	}
};
exports.notifDeviceChanged = function(device, orientation) {
	if (!_$$appElemt) return;
	_$$appElemt.attr("data-s-ut-device", device + "," + orientation);
};
exports.arrayAddRowIndex = function($$elmt, idx) {
	if (!_$$appElemt) return;
	$$elmt.attr("data-s-ut-row-idx", idx);
};
exports.addStructElmtId = function($$elmt, info) {
	if (!_$$appElemt) return;
	$$elmt.attr("data-s-ut-elmt-id", info);
};
exports.authAddRightPanelId = function($$elmt, id) {
	if (!_$$appElemt) return;
	if (id) {
		$$elmt.attr("data-s-ut-auth-selected-elmt", id);
	} else {
		$$elmt.removeAttr("data-s-ut-auth-selected-elmt");
	}

};

exports.addBindAttribute = function(ctrl) {
	if (!_$$appElemt) return;
	if (ctrl && ctrl.$$elmt && ctrl.$bind) {
		ctrl.$$elmt.attr("data-s-ut-field-x3name", ctrl.$bind);
	}
};

exports.addPageData = function(page) {
	if (!_$$appElemt) return;
	if (page && page.$$elmt && page.pageData) {
		page.$$elmt.attr("data-s-ut-page-url", page.pageData.$url);
		page.$$elmt.attr("data-s-ut-page-method", page.pageData.$method);
	}
};

exports.authAddTreeElmtId = function($$elmt, info) {
	if (!_$$appElemt) return;
	$$elmt.attr("data-s-ut-auth-elmt-id", info);
};

exports.enable = function() {
	_$$appElemt = $("#s-m-app-id");
};

exports.setPageUpdateCycle = function($$page) {
	_pageUpdateCycle = _pageUpdateCycle + 1;
	$$page.attr("data-s-ut-update-cycle", _pageUpdateCycle);
};

// Make available externally so selenium can interact with this module (Especially functions following below) 
window.$unitTestManager = exports;

// Used to trigger blur event on the element that got the focus
exports.blurFocusElmt = function() {
	$(":focus").blur();
};