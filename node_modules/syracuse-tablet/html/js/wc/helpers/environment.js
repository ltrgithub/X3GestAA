"use strict";

var log = require('syracuse-tablet/html/js/wc/helpers/logger').getLogger("environment", false);
var jsutils = require('syracuse-tablet/html/js/wc/helpers/jsutils');
/**
 * Npm module that detects browsers - Used on desktop
 */
var _bowser = require('syracuse-tablet/html/deps/bowser/bowser');
//platform is used for desktop only - seems that's a reliable library
var _platform = require('syracuse-tablet/html/deps/platform/platform');
var native = require('syracuse-tablet/html/js/wc/helpers/native/native');
var unitTestManager = require('syracuse-tablet/html/js/wc/helpers/unitTestManager');


var _environment = {
	mobileDetect: null,
	currentDesktopOS: null,
	isMobile: false,
	// os for style ios/windows/android
	styleOS: "windows",
	// os name: linux, windows, osx, ios, android
	osName: "windows",
	browserName: "",
	isTestNativeWrapper: false,
	isNativeScrolling: true,
	isUnitTestMode: false
};


/**
 * Returns the 
 */
function _initDefaultOsStyle(mobileDetect) {
	var os = mobileDetect != null && mobileDetect.mobile() != null ? mobileDetect.os() : "windows";
	switch (os) {
		case "AndroidOS":
			return "android";
		case "WindowsMobileOS":
		case "WindowsPhoneOS":
			return "windows";
		case "iOS":
			return "ios";
		case "PalmOS":
		case "BlackBerryOS":
		case "MeeGoOS":
		case "MaemoOS":
		case "JavaOS":
		case "webOS":
		case "badaOS":
		case "BREWOS":
		case "SymbianOS":
		default:
			return "windows";
	}
};

function _initDesktopOs(mobileDetect) {
	if (mobileDetect && mobileDetect.mobile() != null) {
		return null;
	}
	if (!_platform || !_platform.os || !_platform.os.family) {
		return null;
	}
	var family = _platform.os.family.toLowerCase()
	switch (family) {
		case family.indexOf("windows"):
			return "windows";
		case "os x":
			return "osx";
		case "ubuntu":
		case "debian":
		case "fedora":
		case "red Hat":
		case "suse":
			return "linux";
		default:
			return null;
	}
}


/**
 * Just for info
 */
function _initBrowserName(mobileDetect) {
	var res = mobileDetect && mobileDetect.mobile() != null ? mobileDetect.userAgent() : _bowser.name;
	return res ? res.toLowerCase() : "Not detected";
};

/** 
 * uses bowser for desktop and mobile-detect for mobile
 *FDB I did a lot of tests and it's the better way
 *- Eg safari on IOS is not detected as Safari by bowser but mobile-detect doesn't detect correctly browser on a desktop...
 **/
function _checkBrowserName(name) {
	var res = false
	if (_environment.mobileDetect && _environment.mobileDetect.mobile() != null) {
		res = _environment.mobileDetect.userAgent();
		if (!res) return false;
		res = res.toLowerCase();
		res = (res === "ie" && name === "msie") || res === name;
		if (res === true) {
			log && log(name, "detect by mobile-detect");
		}
	} else if (_bowser != null) {
		res = _bowser[name] === true;
		if (res === true) {
			log && log(name, "detect by bowser");
		}
	}
	return res;
};

/**
 * init environment each time the user agent changes
 */
function _defaultInit() {
	// First
	if (_bowser && _bowser._detect) {
		_bowser = _bowser._detect(window.navigator.userAgent);
	}
	_environment.mobileDetect = window.MobileDetect ? new window.MobileDetect(window.navigator.userAgent) : null;
	// Second
	var isMobile = _environment.mobileDetect ? _environment.mobileDetect.mobile() != null : false;
	_environment.currentDesktopOS = _initDesktopOs(_environment.mobileDetect);
	_environment.styleOS = _initDefaultOsStyle(_environment.mobileDetect);
	_environment.isMobile = isMobile;
	_environment.browserName = _initBrowserName(_environment.mobileDetect);
	//  - Used by css (ios we add a top padding to display the status bar)
	_environment.osName = (isMobile ? _environment.mobileDetect.os() : _environment.currentDesktopOS)
	if (_environment.osName) {
		_environment.osName = _environment.osName.toLowerCase();
	}
	// true is mode test native wrapper in query string
	try {
		var _url = jsutils.getCurrentUrl();
		if (_url.query != null) {
			_environment.isUnitTestMode = _url.query.unitTestMode === "true";
			if (_environment.isUnitTestMode === true) {
				unitTestManager.enable();
			}
			_environment.isTestNativeWrapper = _url.query.testNativeWrapper === "true";
		}
	} catch (e) {}
	$(document.body).toggleClass("s-m-mobile-device", isMobile === true).attr({
		"data-style": _environment.styleOS,
		"data-browser": _environment.browserName,
		"data-os": _environment.osName
	});

	if (log) {
		log("Is mobile", _environment.isMobile, "is TestNativeWrapper", _environment.isTestNativeWrapper);
		log("User agent Name", window.navigator.userAgent);
		log("Browser Name: ", _environment.browserName);
		log("Browser OS Name: ", _environment.osName);
		log("Browser OS Style: ", _environment.styleOS);
	}
};

/**
 * Default initialization
 */
(function() {
	_defaultInit();
})();



/**
 * Returns the OS name for style ios/windows/android
 */
exports.getStyleOS = function() {
	return _environment.styleOS;
}

/**
 * check ios/windows/android
 * http://hgoebl.github.io/mobile-detect.js/doc/MobileDetect.html#os
 * For desktop, windows/osx/linux
 */
exports.isOs = function(os) {
	return os && (os.toLowerCase() === _environment.styleOS);
};

/** Key (case insensitive):
 * Accepts multiple arguments msie, msedge...
 * Accepts chrome, firefox, msie, msedge, opera, phantom, safari, seamonkey
 * Returns true/false
 */
exports.checkBrowserName = function() {
	var result = false,
		name, bn;
	for (var i = 0; i < arguments.length; i++) {
		result = result || _checkBrowserName(arguments[i].toLowerCase());
	}
	return result;
};


exports.isDesktop = function() {
	return _environment.isMobile !== true;
}

exports.isMobile = function() {
	return _environment.isMobile === true;
}

exports.isNativeScrolling = function() {
	return _environment.isNativeScrolling === true;
}

exports.isTestNativeWrapper = function() {
	return exports.isDesktop() && _environment.isTestNativeWrapper === true;
}

exports.isAutoUITestMode = function() {
	return _environment.isUnitTestMode === true;
}
exports.getUnitTestMgr = function() {
	return unitTestManager;
};
// Called after having initialized native or when user agent has changed
exports.init = function() {
	_defaultInit();
	// Native scrolling
	if (native.hasCapability("nativeApp")) {
		// Wrapper - We ask the wrapper - Eg: IOS forces non-native for a better UX
		_environment.isNativeScrolling = native.hasCapability("nativeScrolling");
	} else {
		// Not a wrapper - We force native scrolling on mobile devices 
		// Eg: When we test with Chrome simulator we force native
		_environment.isNativeScrolling = isMobile;
	}
}

var _isNativeWrapper;
exports.isNativeWrapper = function() {
	if (_isNativeWrapper == null) {
		_isNativeWrapper = native.hasCapability("nativeApp");
	}
	return _isNativeWrapper;
}