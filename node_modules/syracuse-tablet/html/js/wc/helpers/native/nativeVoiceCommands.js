"use strict";

var log = require('syracuse-tablet/html/js/wc/helpers/logger').getLogger("nativeVoice", false);
var locale = require('syracuse-tablet/html/js/wc/helpers/locale');
var notifications = require('syracuse-tablet/html/js/wc/helpers/notifications');
var nativeExtCall = require('syracuse-tablet/html/js/wc/helpers/native/nativeExtCall');
var notifications = require('syracuse-tablet/html/js/wc/helpers/notifications');
var modules = require('syracuse-tablet/html/js/wc/common/modules');

var _currentVoiceCommands = null;
var _readyForCommands = false;
var _lastCommand = null;

if (!(window.smVoiceJS)) {
	window.smVoiceJS = {

		/*
		 *  This method will be invoked from wrapper when there was a voice command
		 *
		 *  return true - Command has been handled by webapp
		 *  return false - Command has not been handled, will raise an error message
		 *
		 *  For Hey cortana, show my customers
		 *  data {
		 *  	Command: "openBookmark",
		 *  	Text: "my customers"
		 *  }
		 */
		executeVoiceCommand: function(data) {
			if (!data) return;
			_tryExecuteVoiceCommand(data.Text);
		}
	};
}

notifications.subscribe({
	notifNavigatedToPage: function(page) {
		var name = page && page.pageName;
		log && log("Voice: navigated to: " + name)
		if (!_readyForCommands && name != null && name != "logout" && name != "login") {
			_setReadyForCommands();
		}
	}
}, "sm.navigated.to.page");

function _setReadyForCommands() {
	if (!_readyForCommands && _lastCommand != null) {
		log && log("Ready for voice commands, execute queue");
		_readyForCommands = true;
		_tryExecuteVoiceCommand(_lastCommand);
	} else {
		log && log("Ready for voice commands, no pendig commands in queue");
		_readyForCommands = true;
	}
}

/**
 *
 */
exports.supports = function(capability) {
	if (capability === "voiceCommands") {
		return nativeExtCall.isSupported("smVoice", "setPhraseListSupported");
	}
	return $.smResolve(false);
};

/**
 *
 */
function _setPhraseList(titlesArray) {
	var data = JSON.stringify({
		Phrase: "bookmark",
		PhraseList: titlesArray,
		Language: locale.getCurrentLocale().toLowerCase()
	});
	log && log("Update voiceCommands: " + JSON.stringify(data, null, 2));
	nativeExtCall.fireMethod("smVoice", "setPhraseList", data);
}

/**
 * Sets available voice commands for native API,
 * also stores native voice commands so they can be executed later
 * 
[
	{
		title: "My Customers",
		page: {
            "$url": "{$hostPort}/mobile2/$client/$local/$dataset/mobileDashboard('MY_CUSTOMERS')",
            "$method": "GET"
			
		}
	},
	{
		title: "My Expenses",
		page: {
            "$url": "{$hostPort}/mobile2/$client/$local/$dataset/mobileDashboard('MY_EXPENSES')",
            "$method": "GET"
		}
	}
]
 */
exports.updateVoiceCommands = function(commands) {
	_currentVoiceCommands = commands;
	_setPhraseList(_currentVoiceCommands.map(function(item) {
		return item.title;
	}));
}

function _tryExecuteVoiceCommand(text) {
	_lastCommand = text;
	if (_readyForCommands && _currentVoiceCommands != null) {
		_executeVoiceCommand(_lastCommand);
		_lastCommand = null;
	}
}

function _executeVoiceCommand(text) {
	var command;
	log && log("Execute command: " + text);
	if (_currentVoiceCommands.some(function(c) {
			command = c;
			return c.title === text;
		})) {
		log && log("Execute command data: " + JSON.stringify(command));
		_launchVoiceCommand(command);
	} else {
		log && log("Execute command, no match: " + text);
	}

}

function _launchVoiceCommand(command) {
	var page = command && command.page;
	page && modules.get("navHelper").gotoUrl(page.$url, page.$method);
}

/**
 * Returns the test js wrapper
 */
exports.init = function(testMode) {
	if (window && window.smVoice) return;
	return window.smVoice;
};