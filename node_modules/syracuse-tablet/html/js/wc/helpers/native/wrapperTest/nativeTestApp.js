"use strict";

var log = require('syracuse-tablet/html/js/wc/helpers/logger').getLogger("X3WUPApp", false);
var jsutils = require('syracuse-tablet/html/js/wc/helpers/jsutils');
var localStorage = require('syracuse-tablet/html/js/wc/storage/localStorage');
var notifications = require('syracuse-tablet/html/js/wc/helpers/notifications');
var nativeHelpers = require('syracuse-tablet/html/js/wc/helpers/native/wrapperTest/nativeTestHelpers');

var _closeAppliBtn = '\
	<div id="x3wupappclosebtn" class="s-m-test-wrapper" title="Close application">\
		<a href="#" draggable="false" style= "color:#41a940";>\
		<i class="fa fa-power-off"></i>\
		</a>\
	</div>';

var _addCloseAppliBtn = function($$root) {
	$$root.find("#x3wupappclosebtn").off().remove();
	return $(Handlebars.compile(_closeAppliBtn)()).appendTo($$root);
	//	.css({
	//		"color": "#41a940",
	//		"float": "right",
	//		"padding-left": "8px",
	//		"font-size": ".7em",
	//		"top": "8px",
	//		"position": "relative"
	//	})
};

var _TestNativeWrapper = function() {

	this.nativeWrapperSupported = function() {
		return true;
	};
	this.openExternalLinkSupported = function() {
		return true;
	};

	// This will hide html back button and only allow the one of the browser toolbar
	this.hardwareBackButtonSupported = function() {
		return true;
	};

	this.notifApplicationReady = function(ok) {
		// To not reaload a bad context
		localStorage.removeItem("$reconnectContext");
	};

	this.onClickCloseAppli = function() {
		this.onWebappUnloaded();
	};

	this.onWebappLoaded = function() {};
	/**
	 * historyContext is s a string
	 */
	this.onWebappUnloaded = function() {
		if (!window.smWrapperJS) return;
		try {
			this.setReconnectContext(nativeHelpers.callAppNativeInterface("nativeApp", "applicationClosing"));
			setTimeout(function() {
				window.location.reload();
			}, 100);
		} catch (e) {
			console.log(e.stack);
			return e.message;
		}
	};
	/**
	 *
	 */
	this.webappConfigServer = function() {};
	this.webappSelectServer = function() {};
	/**
	 * context is s a string
	 */
	this.setReconnectContext = function(context) {
		try {
			log && log("setReconnectContext", context);
			localStorage.setItem("$reconnectContext", context);
		} catch (e) {
			log && log("setReconnectContext", JSON.stringify(e));
		}
	};
	/**
	 * Returns a String
	 */
	this.getReconnectContext = function() {
		try {
			var context = localStorage.getItem("$reconnectContext");
			log && log("getReconnectContext", context);
			return context;
		} catch (e) {
			log && log("getReconnectContext", JSON.stringify(e));
			return null;
		}
	};
	/**
	 * Returns a loginCookie and sessionCookie
	 */
	this.getReconnectToken = function() {
		try {
			var loginCookie = localStorage.getItem("$reconnectToken");
			var sidCookie = localStorage.getItem("$reconnectSid");
			log && log("getReconnectToken", loginCookie, sidCookie);
			return $.smResolve(loginCookie, sidCookie)
		} catch (e) {
			log && log("getReconnectToken", JSON.stringify(e));
			return $.smResolve(null, null)
		}
	};
	/**
	 * token is a string
	 *{
	 *		SyracuseSidLogin: token,
	 *		UserLogin: userLogin,
	 *		SyracuseSid: SyracuseSid
	 *};
	 */
	this.setReconnectToken = function(token) {
		try {
			log && log("setReconnectToken", token);
			token = token ? JSON.parse(token) : null;
			if (!token) return
			localStorage.setItem("$reconnectToken", token.SyracuseSidLogin);
			localStorage.setItem("$reconnectSid", token.SyracuseSid);
			localStorage.setItem("$reconnectLoginName", token.LoginCookieName);
			localStorage.setItem("$reconnectSidName", token.SidCookieName);
		} catch (e) {
			log && log("setReconnectToken", JSON.stringify(e));
		}
	};
	/**
	 * Add a button into the header to simulate a close-application event from native wrapper + reload the application and restore the context
	 */
	this.appendHeaderTestCmds = function($$root) {
		if (!$$root || !this.nativeWrapperSupported()) return;
		_addCloseAppliBtn($$root).click(jsutils.bindFn(this.onClickCloseAppli, this));
	};

	// at the end
	notifications.subscribe(this, ["sm.application.ready"]);

};
exports.create = function() {
	return new _TestNativeWrapper();
};