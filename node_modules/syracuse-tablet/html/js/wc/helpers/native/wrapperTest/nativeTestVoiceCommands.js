"use strict";

var jsutils = require('syracuse-tablet/html/js/wc/helpers/jsutils');

var _phraseListHtml = '\
	<div id="phraseListId" class="s-m-test-wrapper" title="Test voice commands">\
		<div class="dropdown" style="padding-right:0px">\
	  		<span class="dropdown-toggle fa fa-microphone" data-toggle="dropdown" aria-expanded="true">\
	  		</span>\
	  		<ul class="dropdown-menu dropdown-menu-left" role="menu">\
				{{#each list}}\
					<li><a style="" draggable="false" href="#">{{title}}</a></li>\
				{{/each}}\
			</ul>\
		</div>\
	</div>';

var _getPhraseListMenu = function(ctx) {
	return Handlebars.compile(_phraseListHtml)(ctx);
};



var _TestNativeWrapper = function() {

	this.onClickPhrase = function(event) {
		var $$t = $(event.target);
		var text = $$t.text();
		if (!text || text.trim().length === 0) return;
		setTimeout(function() {
			window.smVoiceJS.executeVoiceCommand({
				Command: "openBookmark",
				Text: text
			});
		});
	};

	// phraseList: Array[24]
	this.phraseList = null;

	this.setPhraseListSupported = function() {
		return true;
	};

	this.setPhraseList = function(data) {
		data = data ? JSON.parse(data) : null;
		this.phraseList = null;
		if (data && data.PhraseList && data.PhraseList.length > 0) {
			var self = this;
			this.phraseList = [];
			data.PhraseList.forEach(function(item) {
				self.phraseList.push({
					title: item
				});
			});
		};
	};
	/**
	 * Adds a button (mic) in header that displays a dropdown list to allow to test voice commands
	 * Selecting an item will trigger a voice command
	 */
	this.appendHeaderTestCmds = function($$root) {
		if (!$$root || !this.setPhraseListSupported()) return;
		$$root.find("#phraseListId").off().remove();
		var $$html = this.phraseList ? $(_getPhraseListMenu({
			list: this.phraseList
		})) : null;
		if ($$html == null) return;
		$$html.appendTo($$root).click(jsutils.bindFn(this.onClickPhrase, this));
	};
};


exports.create = function() {
	var url = jsutils.getCurrentUrl();
	if (window.smVoiceJS && url.query && url.query.voiceCommand) {
		try {
			window.smVoiceJS.executeVoiceCommand({
				command: "openBookmark",
				text: url.query.voiceCommand
			});
		} catch (e) {}
	}
	return new _TestNativeWrapper();
};