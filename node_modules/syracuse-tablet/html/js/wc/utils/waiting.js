"use strict";

var _HTML = '<div style="display:none; text-align: center; left:0; top: 0; width: 100%; height: 100%; z-index:2000; position:absolute; background: #ffffff; opacity: 0.8;"><div style="display: table-cell; vertical-align: middle; color: green; font-size: 50px;">Loading</div></div>'

var _count = 0;

var _$$container;

function _waitLocal(promise, $$parent) {
	var deferred = $.Deferred();
	var $$container = $(_HTML);
	$$parent.append($$container.show())
	promise.then(function() {
		$$container.detach();
		deferred.resolve.apply(deferred, arguments);
	}).fail(function() {
		$$container.detach();
		deferred.reject.apply(deferred, arguments);
	})
	return deferred.promise();
}



/** 
 * Show global waiting animation until the passed promise is resolved or rejected
 * If there are parallel requests, the are correctly stacked
 */
function _waitGlobal(promise) {
	var deferred = $.Deferred();
	_pushWait();
	promise.then(function() {
		_popWait();
		deferred.resolve.apply(deferred, arguments);
	}).fail(function() {
		_popWait();
		deferred.reject.apply(deferred, arguments);
	})
	return deferred.promise();
}

exports.waitModal = function(promise, $$parent) {
	if ($$parent) {
		return _waitLocal(promise, $$parent);
	} else {
		return _waitGlobal(promise);
	}
}

exports.reset = function() {
	if (_$$container) {
		_$$container.detach();
		_$$container = null;
	}
	_count = 0;
}

function _pushWait() {
	_count++;
	if (_count === 1) {
		_showWait();
	}
}

function _popWait() {
	_count--;
	if (_count <= 0) {
		_count = 0;
		_hideWait();
	}
}

function _showWait() {
	_ensureInitialized();
	_$$container.css("display", "table");
}

function _hideWait() {
	_ensureInitialized();
	_$$container.css("display", "none");
}

function _ensureInitialized() {
	if (_$$container) {
		return;
	}
	var $$app = $("#s-m-app-id");
	// TODO: Move styles to css/less, add animation
	_$$container = $(_HTML);
	$$app.append(_$$container);
}