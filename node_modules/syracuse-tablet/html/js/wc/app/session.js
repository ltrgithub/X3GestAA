"use strict";

var modules = require('syracuse-tablet/html/js/wc/common/modules');
var base64 = require('syracuse-tablet/html/js/wc/helpers/base64');
var settings = require('syracuse-tablet/html/js/wc/app/settings');
var helpers = require('syracuse-tablet/html/js/wc/common/helpers');
var locale = require('syracuse-tablet/html/js/wc/helpers/locale');
var log = require('syracuse-tablet/html/js/wc/helpers/logger').getLogger("session", true);
var native = require('syracuse-tablet/html/js/wc/helpers/native/native');

/**
 * 
 */
exports.getAuthMethods = function() {
	var ajax = modules.get("ajax");
	return ajax.request("/requireJS/misc/availableAuth")
		.then(function(result) {
			var list = [];
			if (result && result.data) {
				Object.keys(result.data).forEach(function(key) {
					var supported = result.data[key];
					if (supported) {
						list.push(key);
					}
				})
			}
			return {
				"$supported": list, // List of what is supported
				"$oauth2": result.data && result.data.$oauth2, // oauth2 providers
				"$saml2": result.data && result.data.$saml2 // saml2 providers
			}
		});
}

/**
 * Returns current user profile
 * Resolves with JSON or reject
 */
exports.getCurrentUserProfile = function() {
	return modules.get("ajax").request("/sdata/syracuse/collaboration/syracuse/userProfiles/$service/current")
		.then(function(result) {
			if (result.data) {
				return result.data;
			} else {
				throw new Error("Empty user profile");
			}
		})
};

/**
 * 
 */
exports.loginBasic = function(user, password, rememberMe) {
	var deferred = $.Deferred();

	var headers = {
		"Authorization": 'Basic ' + base64.encode(user + ":" + password),
		"accept": "application/json"
	};

	var data = {
		// To force the server to take into account a new credentials - see SAM 112730
		forgetme: true
	};
	if (rememberMe === true) {
		// Enable remember me one credentials s have been validated
		data["keepConnected"] = true;
	}

	var ajax = modules.get("ajax");
	ajax.request("/auth/login/submit", "POST", data, headers)
		.then(function(result) {

			// Once logged in, remember reconnect token for next time 
			// NOTE: For other redirect based authentications, the token is stored
			// during startup in main.js
			exports.nativeStoreReconnectToken();

			deferred.resolve(result.data);
		})
		.fail(function(result) {
			deferred.reject(result);
		});

	return deferred.promise();

}

/**
 * Trigger Sage-ID authentication
 * Note: This is just a redirect to the sage is authentication service
 * Once authentication is done, it will automatically redirect to the location the client has been looking at before.
 * The mobile client will reload, see the created session and automatically open the desired page
 */
exports.loginSageId = function() {
	window.location.href = "/auth/sage-id/signOnStart";
}

/**
 * 
 */
exports.logout = function() {
	var ajax = modules.get("ajax");
	return ajax.request("/logout", "POST");

}

/**
 * 
 */
exports.forgetMe = function() {
	var ajax = modules.get("ajax");
	return ajax.request("/auth/forgetMe/submit", "POST", {
		forgetme: true
	}).always(function() {
		// Remove the last used context - fixed FDB
		settings.removeLastUsedUserProfile();
	})

}

/**
 * Store current user profile in local database to allow offline login next time
 * Returns currently active user profile
 */
exports.storeUserProfile = function(profile) {
	return settings.setLastUsedUserProfile(profile);
}

/**
 * Apply endpoint, role and language to the current user profile
 * Saves user profile for next offline login if setting the above succeeded
 *   
 * settings: Available endpoints, roles, languages
 * userProfile: currently active user profile
 * endpoint,role,language: Settings to be applied
 * 
 * Return: Current user profile
 * 
 */
exports.applyNewContext = function(settings, userProfile, endpoint, role, language) {
	//	console.log(settings);
	//	console.log(userProfile);

	var roleMatch;
	var localeMatch;
	var endpointMatch;

	settings.roles.some(function(r) {
		if (r.code === role) {
			roleMatch = r;
			return true;
		}
	});
	if (!roleMatch) {
		return $.smReject(helpers.createDiag({}, "error", locale.text("switchContext.error.role", [role])));

	}

	settings.locales.some(function(l) {
		if (l.code === language) {
			localeMatch = l;
			return true;
		}
	});
	if (!roleMatch) {
		return $.smReject(helpers.createDiag({}, "error", locale.text("switchContext.error.language", [language])));

	}

	roleMatch.endPoints.some(function(e) {
		if (e.code === endpoint) {
			endpointMatch = e;
			return true;
		}
	});
	if (!endpointMatch) {
		return $.smReject(helpers.createDiag({}, "error", locale.text("switchContext.error.endpoint", [endpoint])));

	}

	var changeDelta = {};
	if (userProfile.selectedEndpoint.$uuid !== endpointMatch.$uuid) {
		changeDelta.selectedEndpoint = {
			$uuid: endpointMatch.$uuid
		};
	}
	if (userProfile.selectedRole.$uuid !== roleMatch.$uuid) {
		changeDelta.selectedRole = {
			$uuid: roleMatch.$uuid
		};
	}
	if (userProfile.selectedLocale.$uuid !== localeMatch.$uuid) {
		changeDelta.selectedLocale = {
			$uuid: localeMatch.$uuid
		};
	}

	if (Object.keys(changeDelta).length <= 0) {
		// Nothing to change
		return $.smResolve();
	}

	var ajax = modules.get("ajax");
	return ajax.request("/sdata/syracuse/collaboration/syracuse/userProfiles/$service/updateProfile", "POST", changeDelta)
		.then(function(result) {
			return exports.storeUserProfile(result.data)
				.then(function() {
					return result.data;
				});
		});
}
exports.getReconnectToken = function() {
	var deferred = new $.Deferred();

	var ajax = modules.get("ajax");
	ajax.request("/requireJS/reconnect/getToken", "GET", null, {
		"accept": "application/json"
	}).always(function(result) {
		if (result.status === 200 && result.headers) {
			var token = result.headers["x-reconnect-token"];
			var sid = result.headers["x-reconnect-sid"];

			// We return the cookies names because the client doesn't know 
			// the port number used to build the name in case of reverse proxy 
			// like on server http://sage-x3-mobile.sage-demo.fr
			var loginCookieName = result.headers["x-reconnect-login-cookiename"];
			var sidCookieName = result.headers["x-reconnect-sid-cookiename"];

			var login = _parseReconnectCookie(token);
			deferred.resolve(login ? token : null, login, sid, loginCookieName, sidCookieName);
		} else {
			deferred.resolve();
		}
	});
	return deferred.promise();
};

exports.setReconnectToken = function(loginCookie, sidCookie) {
	var deferred = new $.Deferred();
	loginCookie = loginCookie || "";
	sidCookie = sidCookie || "";
	log && log("setReconnectToken - Login: ", loginCookie, " - sid: ", sidCookie)

	var ajax = modules.get("ajax");
	ajax.request("/requireJS/reconnect/setToken", "GET", null, {
			"accept": "application/json",
			"x-reconnect-token": loginCookie,
			"x-reconnect-sid": sidCookie
		}).then(function(result) {
			log && log("setReconnectToken succeeded", loginCookie, sidCookie);
		}).fail(function(result) {
			log && log("setReconnectToken failed");
		})
		.always(function() {
			deferred.resolve();
		});
	return deferred.promise();
}

exports.nativeStoreReconnectToken = function() {
	var deferred = new $.Deferred();
	var nativeApp = native.getModule("nativeApp");
	if (!nativeApp) {
		return $.smResolve();
	}

	exports.getReconnectToken()
		.then(function(token, userLogin, sid, loginCookieName, sidCookieName) {
			log && log("nativeStoreReconnectToken", token, userLogin, sid, loginCookieName, sidCookieName);
			nativeApp.setReconnectToken(token, userLogin, sid, loginCookieName, sidCookieName);
		})
		.awlays(function() {
			deferred.resolve();
		});
	return deferred.promise();
}

function _parseReconnectCookie(cookie) {
	if (!cookie) {
		return null;
	}
	cookie = cookie.split("/");
	if (cookie.length < 3) return null;
	var token = cookie.pop();
	var series = cookie.pop();
	var login = cookie.join("/");
	return login;
};