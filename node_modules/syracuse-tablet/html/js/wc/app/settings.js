"use strict";

var modules = require('syracuse-tablet/html/js/wc/common/modules');
var storageModule = require('syracuse-tablet/html/js/wc/storage/storage');

var _storage;

function _getStorage() {
	if (!_storage) {
		_storage = modules.get("storage").getStorage();
	}
	return _storage;
};

var _globalCtx = {
	"$user": "none",
	"$role": "none",
	"$lang": "none"
};

/**
 * Get the user profile that was used to login lately
 */
exports.getLastUsedUserProfile = function() {
	return _getStorage().read({
		$context: _globalCtx,
		$collection: "$settings",
		$endpoint: "$local",
		$key: "$last_user_profile"
	}).then(function(result) {
		if (result.$status === storageModule.StatusCodes.OK) {
			return result.$data;
		} else {
			return null;
		}
	});
}

/**
 * Get the user profile that was used to login lately
 */
exports.setLastUsedUserProfile = function(userProfile) {
	return _getStorage().put({
		$context: _globalCtx,
		$collection: "$settings",
		$endpoint: "$local",
		$key: "$last_user_profile",
		$data: userProfile
	}).then(function(result) {
		if (result.$status === storageModule.StatusCodes.OK) {
			return result.$data;
		} else {
			return null;
		}
	});
}
exports.removeLastUsedUserProfile = function() {
	if (!_globalCtx) return $.smResolve();
	return _getStorage().remove({
		$context: _globalCtx,
		$collection: "$settings",
		$endpoint: "$local",
		$key: "$last_user_profile"
	});
};

exports.setLoginRememberMe = function(rememberMe) {
	return $.smResolve()
		.then(function() {
			return _getGlobalSettings();
		})
		.then(function(settings) {
			settings.rememberMe = rememberMe
			return _setGlobalSettings(settings);
		});
}

exports.getLoginRememberMe = function() {
	return $.smResolve()
		.then(function() {
			return _getGlobalSettings();
		})
		.then(function(settings) {
			return settings.rememberMe === true;
		});
}
exports.setDeviceType = function(deviceType) {
	return $.smResolve()
		.then(function() {
			return _getGlobalSettings();
		})
		.then(function(settings) {
			settings["device-type"] = deviceType
			return _setGlobalSettings(settings);
		});
}
exports.getDeviceType = function() {
	return $.smResolve()
		.then(function() {
			return _getGlobalSettings();
		})
		.then(function(settings) {
			return settings["device-type"] || "auto"
		});
}

function _getGlobalSettings() {
	return _getStorage().read({
		$context: _globalCtx,
		$collection: "$settings",
		$endpoint: "$local",
		$key: "$global_settings"
	}).then(function(result) {
		if (result.$status === storageModule.StatusCodes.OK) {
			return result.$data;
		} else {
			return {};
		}
	});
}

function _setGlobalSettings(settings) {
	return _getStorage().put({
		$context: _globalCtx,
		$collection: "$settings",
		$endpoint: "$local",
		$key: "$global_settings",
		$data: settings
	}).then(function(result) {
		if (result.$status === storageModule.StatusCodes.OK) {
			return result.$data;
		} else {
			return {};
		}
	});
}
/**********************************************
 * User page preferences
 */
exports.readUserPagePrefs = function(pageId) {
	var cc = modules.get("appController").App.getCacheContext();
	var storage = _getStorage();
	pageId = exports.ensurePageId(pageId) || pageId;
	var ctx = {
		"$user": cc.$user,
		"$role": "none",
		"$lang": "none"
	};
	return storage.read({
		$context: ctx,
		$collection: "$settings",
		$endpoint: "$local",
		$key: pageId
	}).then(function(result) {
		var res;
		if (result.$status === storageModule.StatusCodes.OK) {
			res = result.$data;
		}
		res = res || {};

		// Filter and sort favorites default
		res.favorites = res.favorites || [];
		// Also in these object with null as default are: 
		// res.filter - current filter
		// res.sort - current sort opts
		// res.chartDetail - [0...n] chart detail levels
		return res;
	});
}
exports.writeUserPagePrefs = function(pageId, prefs) {
	pageId = exports.ensurePageId(pageId) || pageId;
	var storage = _getStorage();
	var cc = modules.get("appController").App.getCacheContext();
	var ctx = {
		"$user": cc.$user,
		"$role": "none",
		"$lang": "none"
	};
	return exports.readUserPagePrefs(pageId)
		.then(function(oldPrefs) {
			// No extend because of null values must be taken into account and like this it's more clear what's in the settings
			if ('favorites' in prefs) {
				oldPrefs.favorites = prefs.favorites;
			}
			if ('filter' in prefs) {
				oldPrefs.filter = prefs.filter;
			}
			if ('sort' in prefs) {
				oldPrefs.sort = prefs.sort;
			}
			if ('chartDetail' in prefs) {
				oldPrefs.chartDetail = prefs.chartDetail;
			}
			return oldPrefs;
		})
		.then(function(newPrefs) {
			return storage.put({
				$context: ctx,
				$collection: "$settings",
				$endpoint: "$local",
				$key: pageId,
				$data: newPrefs
			});
		});
}
exports.ensurePageId = function(url) {
	if (!url) return
	var pageId = url.split("&");
	return pageId[0]
}