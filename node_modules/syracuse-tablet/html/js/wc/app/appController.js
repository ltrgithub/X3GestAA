"use strict";

var locale = require('syracuse-tablet/html/js/wc/helpers/locale');
var ajax = require('syracuse-tablet/html/js/wc/common/ajax');
var siteLayout = require('syracuse-tablet/html/js/wc/ui/siteLayout');
var waiting = require('syracuse-tablet/html/js/wc/utils/waiting');
var globals = require('syracuse-tablet/html/js/wc/app/globals');
var eventListener = require('syracuse-tablet/html/js/wc/app/eventListener');
var modules = require('syracuse-tablet/html/js/wc/common/modules');
var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/wc/helpers/jsutils');
var sharedContext = require('syracuse-tablet/html/js/wc/helpers/sharedContext');
var log = require('syracuse-tablet/html/js/wc/helpers/logger').getLogger("appController", false);

var modalSettings = require('syracuse-tablet/html/js/wc/ui/modals/modalSettings');
var modalSelectContext = require('syracuse-tablet/html/js/wc/ui/modals/modalSelectContext');
var modalShowLegal = require('syracuse-tablet/html/js/wc/ui/modals/modalShowLegal');

var developmentPage = require('syracuse-tablet/html/js/wc/helpers/developmentPage');
var notifications = require('syracuse-tablet/html/js/wc/helpers/notifications');
var environment = require('syracuse-tablet/html/js/wc/helpers/environment');
var settings = require('syracuse-tablet/html/js/wc/app/settings');
var metaDataCache = require('syracuse-tablet/html/js/wc/sdata/cache/metaDataCache');

var authoring = require('syracuse-tablet/html/js/wc/authoring/authoring');

var _appClass = utils.defineClass(
	function App() {
		this.$$elmt = $("#s-m-app-id");

		// Set some defaults, note these will be overridden as soon as login is done
		// no matter if login is online or offline
		this._cacheContext = {
			"$user": "none",
			"$role": "none",
			"$lang": "none"
		};
		this._defaultEndpoint = "x3.erp.GX3APP";
		this._currentUserProfile = null;
		notifications.subscribe(this, ["sm.main.layout.changed"]);
	},
	null, {
		init: function() {
			eventListener.registerEvents(this.$$elmt);
			// Must be called after event listener is set up
			$(window).triggerHandler("resizeInternal");
		},
		notifMainLayoutChanged: function(info, orientation, deviceType) {
			this.$$elmt.width(info.application.width);
			this.$$elmt.height(info.application.height);
			var navStack = modules.get("navStack").getMainStack();
			var currentPage = navStack && navStack.getTopPage();
			if (currentPage) {
				currentPage.onMainPageResize(info, orientation, deviceType);
				if (info.afterMainPageLoaded === true && environment.isAutoUITestMode()) {
					environment.getUnitTestMgr().notifPageLoaded("after", currentPage);
				}
			}
			/**
			 * TODO DRAFTS
			 * if (info.deviceChanged) {
			 * // Like we change the device we rebuilt the header and must refresh darft count
			 * self.triggerUpdtDraftsCount();
			 * }
			 */
		},

		/**
		 * Called whenever the current user profile changes
		 * This can be:
		 * Login of a new user
		 * Role, endpoint, locale changes 
		 */
		setUserProfile: function(userProfile) {
			var self = this;
			var initialProfile = false;
			if (!this._currentUserProfile) { // First call after login
				this._currentUserProfile = $.extend(true, {}, userProfile);
				initialProfile = true;
			}
			return $.smResolve()
				.then(function() {

					// If locale changes or the user profile is set for the first time, ensure the language texts are reloaded
					if (self._currentUserProfile.selectedLocale.code !== userProfile.selectedLocale.code || initialProfile === true) {
						// Update locale prefs
						return locale.setLocaleByUserProfile(userProfile);
					}
				})
				.then(function() {
					self._cacheContext = {
						"$user": userProfile.user.login,
						"$role": userProfile.selectedRole.code,
						"$lang": userProfile.selectedLocale.code
					};
					self._defaultEndpoint = userProfile.selectedEndpoint.application + "." + userProfile.selectedEndpoint.contract + "." + userProfile.selectedEndpoint.dataset;
					if (environment.isAutoUITestMode()) {
						environment.getUnitTestMgr().notifUserCtxChanged(self._cacheContext, self._defaultEndpoint);
					}
				})
				.then(function() {
					if (!initialProfile) { // Clone if we did not do this at the very beginning
						self._currentUserProfile = $.extend(true, {}, userProfile);
					}
				});
		},
		getCurrentUserProfile: function() {
			return this._currentUserProfile;
		},
		getCurrentEndpoint: function() {
			return this._currentUserProfile.selectedEndpoint ? this._currentUserProfile.selectedEndpoint.code : ""
		},
		/**
		 * Return the context used to read and write sdata specific cache items
		 * 
		 * {
		 * 	 "$user": "mawal",
		 *	 "$role": "ADMIN",
		 *	 "$lang": "en-US"
		 * }
		 */
		getCacheContext: function() {
			return this._cacheContext;
		},
		/**
		 * The default endpoint is used to load applications on the welcome page
		 *
		 * returns: x3.erp.GX3APP
		 */
		getDefaultEndpoint: function() {
			return this._defaultEndpoint;
		},

		goBack: function() {
			var navStack = modules.get("navStack").getMainStack();
			if (navStack) {
				var changedToBusy = navStack.setBusy(true);
				if (!changedToBusy) {
					return;
				}
				navStack.goBack()
					.always(function() {
						if (changedToBusy) { // Only set to idle if we set no busy by or self
							navStack.setBusy(false);
						}
					})
					.fail(function(error) {
						modules.get("modal").error(error);
					});
			}
		},
		canGoBack: function() {
			var navStack = modules.get("navStack").getMainStack();
			if (navStack) {
				return navStack.canGoBack();
			}
			return false;
		},

		/**
		 * Called by back button in header
		 */
		_actHistoryBack: function() {
			if (globals.isAuthoringActive()) {
				return;
			}
			this.goBack();
		},
		/**
		 * Called by event listener whenever the back button if the browser is used
		 */
		onBrowserBackButton: function(event) {
			if (event) {
				event.preventDefault();
			}
			if (globals.isAuthoringActive()) {
				return;
			}
			this.goBack();
		},
		_actSwitchContext: function() {
			var self = this;
			_selectNewContext()
				.fail(function(result) {
					modules.get("modal").error(result);
				})
				.then(function(userProfile) {
					if (userProfile) { // User profile has changed
						return self.setUserProfile(userProfile)
							.then(function() {
								modules.get("modal").notify({
									body: locale.text("switchContext.success"),
									severityClass: "success"
								});
								self.gotoHomePage();
							});
					} else {
						// We did not do a change
						// Nothing to do here!
					}
				});
		},
		_actLogout: function() {
			var self = this;
			_logout()
				.then(function(result) {
					var msg;
					if (result == "loggedout") {
						// User has logged out
						msg = {
							body: locale.text("logout.msg"),
							severityClass: "success"
						};
					} else if (result === "offline") {
						msg = {
							body: locale.text("logout.offline.msg"),
							severityClass: "warning"
						};
					}
					modules.get("modal").notify(msg);
					self.gotoLogoutPage();
				})
				.fail(function(result) {
					modules.get("modal").error(result);
				});
		},
		_actSettings: function() {
			var self = this;
			//Don't understand how device-type settings is needed
			return settings.getDeviceType()
				.then(function(deviceType) {
					var modal = new modalSettings.Modal({
						"device-type": deviceType
					});
					return modal.show();
				})
				.then(function(result) {
					if (result && result["device-type"]) {
						return settings.setDeviceType(result["device-type"]);
					}
				});
		},
		_actAbout: function() {
			var modal = new modalShowLegal.Modal();
			modal.show();
		},
		_actDevelopmentPage: function() {
			developmentPage.show();
		},
		_actHome: function() {
			this.gotoHomePage();
		},
		gotoHomePage: function() {
			return modules.get("navHelper").gotoUrl("html://home");
		},
		gotoLoginPage: function() {
			return modules.get("navHelper").gotoUrl("html://login");
		},
		gotoLogoutPage: function() {
			return modules.get("navHelper").gotoUrl("html://logout");
		},

		/** 
		 * Called whenever an modal is opened
		 */
		onModalOpened: function() {},
		/**
		 * Called whenever a modal is closed
		 */
		onModalClosed: function() {},

		getMessageSlot: function() {
			if (!this._$$actMsgSlot) {
				this._$$actMsgSlot = {};
			}
			var deviceType = siteLayout.getDeviceType();
			var orientation = siteLayout.getPageOrientation();
			var key = deviceType + orientation;
			if (this._$$actMsgSlot[key]) {
				return this._$$actMsgSlot[key];
			}
			var $$slot = this._$$actMsgSlot[key] = $("<div>").addClass("s-m-act-msg-slot").addClass(deviceType).addClass(orientation);
			this.$$elmt.prepend($$slot);
			return $$slot;
		},

		// Authoring
		_actDesignPage: function() {
			authoring.toggleDesignPage();
		},

		nativeApplicationActivated: function() {
			log && log("nativeApplicationActivated");
			var navStack = modules.get("navStack").getMainStack();
			var currentPage = navStack && navStack.getTopPage();
			var isLoginPage = jsutils.isInstanceOf(currentPage, "PageLogin");
			if (isLoginPage) {
				log && log("is login page -> reload");
				window.location.reload();
			}
		},
		// Return string that describs current app status for restoration later
		nativeApplicationClosing: function() {
			log && log("nativeApplicationClosing");
			var page = this.findTopmostNonChild();
			if (page) {
				var context = sharedContext.createContextFromPage(page);
				return JSON.stringify(context);
			}
			return "";
		},
		findTopmostNonChild: function() {
			var navStack = modules.get("navStack").getMainStack();
			if (navStack) {
				return navStack.filterTopPage(function(page) {
					return !(page.options && page.options.isChild);
				});
			}
		},
		initApplicationsList: function() {
			return metaDataCache.initApplicationsList()
		},

		_actPageMailto: function() {
			var navStack = modules.get("navStack").getMainStack();
			var currentPage = navStack && navStack.getTopPage();
			if (currentPage) {
				sharedContext.sendPageByEmail(currentPage)
					.fail(function(error) {
						modules.get("modal").error(error);
					});
			}
		}
	}
);
exports.App = new _appClass();

/**
 * Select user, role, endpoint
 * Returns:
 * User profile on successful context change
 * null if there was no change done (no change selected by user or cancelled)
 * null if logout was choosen
 * @returns
 */
function _selectNewContext() {
	var up = exports.App.getCurrentUserProfile();
	var currentContext = {
		endpoint: up.selectedEndpoint.code,
		role: up.selectedRole.code,
		lang: up.selectedLocale.code
	};

	var settings = {};
	var fetchSettings = $.Deferred();

	ajax.request("/sdata/syracuse/collaboration/syracuse/userProfiles/$service/settings")
		.then(function(result) {
			settings.profile = result.data;
			settings.offline = false;
			fetchSettings.resolve();
		})
		.fail(function(result) {
			if (result.offline) {
				settings.profile = {};
				settings.offline = true;
				fetchSettings.resolve();
			} else {
				fetchSettings.reject(result);
			}
		});

	return waiting.waitModal(fetchSettings)
		.then(function() {
			var modal = new modalSelectContext.Modal(currentContext, settings);
			return modal.show();
		})
		.then(function(result) {
			if (result.action === "cancel") {
				// do nothing
			} else if (result.action === "ok") {
				var session = modules.get("session");
				return waiting.waitModal(session.applyNewContext(settings.profile, up, result.endpoint, result.role, result.language));
			}
		});
}

function _logout() {
	var d = $.Deferred();

	var session = modules.get("session");
	waiting.waitModal(session.logout())
		.then(function() {
			d.resolve("loggedout");
		})
		.fail(function(result) {
			if (result.offline) { // Logging out when offline does not work and also makes no sence
				d.resolve("offline");
			}
			d.reject(result);
		});
	return d;
}