"use strict";

var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var proto = require('syracuse-tablet/html/js/wc/sdata/prototype').Prototype;
var Base = require("syracuse-tablet/html/js/wc/controllers/sdataController").SdataController;
var articleParser = require("syracuse-tablet/html/js/wc/controls/articleParser");

var _createProto = function(protoJson, protoParent, baseUrl) {
	if (!protoParent && baseUrl) {
		protoJson.$baseUrl = baseUrl;
	}
	return new proto(protoJson);
};

var _createArticle = function(proto) {
	var article = {
		"$layoutType": "stack",
		"$items": []
	};
	var protoJson = proto.data("$properties", null, true, true);
	Object.keys(protoJson).forEach(function(key) {
		if (!protoJson[key].$isExcluded) {
			article.$items.push({
				"$bind": key
			});
		}
	});
	return article;
};
/**
 * options
 * 		$activity	read by default
 */
var _Klass = utils.defineClass(
	function(id, proto, article, dataset, options) {
		if (article == null) {
			article = _createArticle(proto);
		}
		this.article = article;
		Base.call(this, dataset, null, false);
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this.rootLayout == null) {
				this.rootLayout.destroy();
			}
			this.rootLayout = null;
			this.$$formParent = null;
			this.article = null;
		},
		render: function($$parent, opts) {
			if (this.rootLayout == null) {
				this.buildControlsTree();
			};
			this.$$formParent.attr("data-controller-id", this.id);
			this.rootLayout.set$$container($$parent);
			this.rootLayout.buildHtml();
			// USed to retrieve the controller on events
			this.rootLayout.$$elmt.attr("data-controller-id", this.id);
		},
		/**
		 * Show element in page - scroll if needed
		 * c is a JQuery elmt or an object with $$elmt property
		 */
		makeVisible: function(c) {
			// TODO - Implement a gestureManager in base controller to allow makeVisible
		},
		buildControlsTree: function() {
			if (this.rootLayout) {
				this.rootLayout.destroy();
			}
			this.rootLayout = articleParser.parseArticle(this, this.article);
			return this.rootLayout;

		},
		isEditMode: function() {
			return true;
		},
		applyChange: function(delta) {
			this.dataset.applyDelta(delta);
		},
		/**
		 * scans _controlsMap and calls callBack
		 * -> callBack returns true to stop
		 * returns control that stopped the scan
		 */
		forEachControl: function(callBack) {
			if (!callBack) return;
			var c = null;
			for (var id in this._controlsById) {
				if (callBack(id, this._controlsById[id])) {
					c = this._controlsById[id];
					break;
				}
			}
			return c;
		},
	});


exports.createProto = _createProto;
exports.Klass = _Klass;