"use strict";

var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var modules = require('syracuse-tablet/html/js/wc/common/modules');

var nativeExtLink = require('syracuse-tablet/html/js/wc/helpers/native/native').getModule("extLink");

var _controllerId = 1;
var _controllers = {};

/**
 * Base class for all controllers
 * Main purpose is to allow all controlls to register with a controller
 * 
 * Specific things like sdata management is in derived classes
 */
exports.Controller = utils.defineClass(
	function Controller(parent) {
		this.id = _controllerId++;
		_controllers[this.id] = this;

		this._controlsById = {};

		// This will contain controls that render menu items ($links, $actions or actions (data-param)
		// it's used to apply dynamic meta data on them
		// Will be automatically managed for controls that have a "onMenuItemChanged" method
		this._menuItemContainersById = {};

		this.parent = parent;
		this.root = (parent && parent.root) || this;
	},
	null, {

		destroy: function() {
			delete _controllers[this.id];
			this.root = null;
			this.parent = null;
			// Destory all controls
			var self = this;
			this._forEachControl(function(c) {
				self.unregisterControl(c);
				c.destroy();
			});
			this._controlsById = null;
			this._menuItemContainersById = null;
		},

		//
		// CONTROLS START
		//
		getControl: function(ctrlId) {
			return this._controlById(ctrlId);
		},
		getControlsByType: function($types) {
			if (!Array.isArray($types)) {
				$types = [$types]
			}
			var res = []
			this._forEachControl(function(c) {
				if ($types.indexOf(c.$type) >= 0) {
					res.push(c)
				}
			});
			return res;
		},
		registerControl: function(ctrl) {
			this._controlsById[ctrl.id] = ctrl;
			if (ctrl.onMenuItemChanged) {
				this._menuItemContainersById[ctrl.id] = ctrl;
			}
		},
		unregisterControl: function(ctrl) {
			delete this._controlsById[ctrl.id];
			delete this._menuItemContainersById[ctrl.id];
		},
		_controlById: function(ctrlId) {
			return this._controlsById[ctrlId];
		},
		//
		// CONTROLS END
		//				

		//
		// START UI ADAPTER
		// UI adapter is used to allow the controller to trigger events that occur in the
		// user interface. This is to remove dependencies in the controller
		//
		setUIAdapter: function(uiAdapter) {
			this.uiAdapter = uiAdapter;
		},
		_showNotification: function(title, message, severity) {
			if (this.uiAdapter && this.uiAdapter._showNotification) {
				return this.uiAdapter._showNotification(title, message, severity);
			}
		},
		_askConfirmation: function($confirm) {
			if (this.uiAdapter && this.uiAdapter._askConfirmation) {
				return this.uiAdapter._askConfirmation($confirm);
			}
			return $.smResolve("yes");
		},
		_updateRequestCount: function(count) {
			if (this.uiAdapter && this.uiAdapter._updateRequestCount) {
				return this.uiAdapter._updateRequestCount(count);
			}
		},
		//
		// END UI ADAPTER
		//

		/**
		 * Used by event listener if a data-naction data-params element was clicked
		 * 
		 */
		onDataActionClicked: function(dataAction, dataParams) {
			var method = "_act" + $.camelCase("-" + dataAction);

			// Controller implements actions?
			func = this[method];
			if (func) {
				return func.call(this, dataParams);
			}

			// Page implements actions?
			var page = modules.get("navStack").getMainStack().getTopPage();
			if (page && page[method]) {
				return page[method].call(page, dataParams);
			}

			// App implements actions?
			var app = modules.get("appController").App;
			var func = app[method];
			if (func) {
				return func.call(app, dataParams);
			}
		},

		/**
		 * Called whenever a menu item changes
		 * $itemName can be the name of an action or link or something else that the containing widgets must know
		 */
		onMenuItemChanged: function($itemName, $bind, metaData) {
			var ids = Object.keys(this._menuItemContainersById);
			for (var i = 0, j = ids.length; i < j; i++) {
				var id = ids[i];
				var ctrl = this._menuItemContainersById[id];
				ctrl && ctrl.onMenuItemChanged($itemName, $bind, metaData);
			}
		},

		/** 
		 * Is this a root dataset (e.g. page level)
		 */
		isRoot: function() {
			return this != null && this == this.root;
		},

		/**
		 * All controls that do navigation (like ctrlReference for lookups) should ask the controller
		 * to navigate instead of doing the below in their own code.
		 * Doing it centralized in the controller allows sanity checks
		 */
		gotoUrl: function($url, $method, options, loadOptions) {
			return modules.get("navHelper").gotoUrl($url, $method, options, loadOptions);
		},
		/**
		 * Navigate to an external url
		 * Used by some controls like CtrlUrl, CtrlPhone, ...
		 */
		_actOpenExternalLink: function(url) {
			if (nativeExtLink) {
				nativeExtLink.openExternalLink(url);
			} else {
				window.open(url);
			}
		},
		/* We expose the module function here so that every component that knows a 
		 * controller can find other controllers without the need of including a 
		 * require to the controller module
		 */
		findController: function(controllerId) {
			return exports.findController(controllerId);
		},

		computeLayout: function(layoutInfo) {
			this._forEachControl(function(c) {
				if (c.computeLayout) {
					c.computeLayout(layoutInfo);
				}
			})
		},

		_forEachControl: function(cb) {
			var self = this;
			var c;
			Object.keys(self._controlsById).forEach(function(key) {
				c = self._controlsById[key];
				if (c) {
					cb(c);
				}
			})
		}
	}
);

exports.findController = function(id) {
	return _controllers[id];
}

exports.findControllerByDom = function($$elmt) {
	var $$controller = $$elmt.closest("[data-controller-id]");
	var controllerId = $$controller.attr("data-controller-id");
	return exports.findController(controllerId);
}

exports.findControlByDom = function($$elmt) {
	var controller = exports.findControllerByDom($$elmt);
	if (controller) {
		var $$ctrl = $$elmt.closest(".s-m-ctrl");
		var ctrlId = $$ctrl.attr("id");
		if (ctrlId) {
			return controller.getControl(ctrlId);
		}
	}
}