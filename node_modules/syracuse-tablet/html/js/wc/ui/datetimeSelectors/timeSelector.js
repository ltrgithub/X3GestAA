"use strict";
var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var _timeApi = require('syracuse-tablet/html/js/wc/helpers/types/time');
var locale = require('syracuse-tablet/html/js/wc/helpers/locale');

var _Klass = utils.defineClass(

	function() {

	}, null, {
		onClick: function(evt) {
			var self = this,
				close;
			while (evt.target) {
				if (evt.target.getAttribute("data-s-syraOnClick")) {
					close = this[evt.target.getAttribute("data-s-syraOnClick")](evt.target, evt);
					if (close) {
						this.handler.closeContainer();
					}
					return;
				} else {
					evt.target = evt.target.parentNode;
				}
			}
		},
		setContainer: function($$modalElmt) {
			this.$$modalElmt = $$modalElmt;
		},
		create: function(field, handler, cb) {

			this.domItem = document.createElement("div");
			this.domItem.className = "s-time-choice";

			var options = options || {};
			this.columns = options.columns || 2;
			this.interval = options.interval || 60;

			this.field = field;
			this.handler = handler;
			this.cb = cb;

			this.curTime = _timeApi.now();

			var cellCount = (24 * 60) / this.interval;
			var rowCount = cellCount / this.columns;

			var table = document.createElement("table");
			table.className = "s-time-choice-table";
			table.setAttribute("cellspacing", "0");
			table.setAttribute("cellpadding", "0");

			var row, cell;
			var cellIndex = 0;
			var timeHour = _timeApi.parse("00:00:00");
			for (var rr = 0; rr < rowCount; rr++) {
				row = document.createElement("tr");
				for (var col = 0; col < this.columns; col++) {
					cell = document.createElement("td");
					cell.className = "s-time-choice-td";
					if (cellIndex < cellCount) {
						var link = document.createElement("a");
						link.className = "s-time-choice-a";
						link.setAttribute("data-s-syraOnClick", "onTimeClick");
						if (timeHour.hour == this.curTime.hour) {
							link.className += " s-time-select";
						}
						link.textContent = timeHour.toString(locale.getTimeFormat());
						cell.appendChild(link);
					}
					row.appendChild(cell);
					timeHour = timeHour.addMinutes(this.interval);
					cellIndex++;
				}
				table.appendChild(row);
			}
			this.domItem.appendChild(table);
			return this.domItem;
		},
		onTimeClick: function(picker) {
			var self = this;
			var fieldVal = _timeApi.parse(picker.textContent, locale.getTimeFormat()).toString();
			if (!this.cb) {
				self.field.setFieldValueFromSelector(fieldVal);
				return true;
			} else {
				self.cb(fieldVal, self.handler);
			}
		},
		bindEvents: function(bind) {
			var self = this;
			var parentSlot = self.handler.getParentSlot();
			if (bind) {
				$(parentSlot).delegate("a", "click", function(evt) {
					self.onClick(evt);
					evt.preventDefault();
					evt.stopPropagation();
				});
			} else {
				$(parentSlot).undelegate();
			}
		},
		destroy: function() {
			this.bindEvents(false);
			this.domItem = this.field = this.selectedLink = null;
		}
	});
exports.Klass = _Klass;