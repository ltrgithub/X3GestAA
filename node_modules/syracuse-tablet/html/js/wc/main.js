"use strict";

var log = require('syracuse-tablet/html/js/wc/helpers/logger').getLogger("main", false);
var modules = require('syracuse-tablet/html/js/wc/common/modules');

var waiting = require('syracuse-tablet/html/js/wc/utils/waiting');
var native = require('syracuse-tablet/html/js/wc/helpers/native/native');

var jsutils = require('syracuse-tablet/html/js/wc/helpers/jsutils');

var developmentPage = require('syracuse-tablet/html/js/wc/helpers/developmentPage');

var initThirdParty = require('syracuse-tablet/html/js/wc/init/initThirdParty');
var initStyles = require('syracuse-tablet/html/js/wc/init/initStyles');
var uiSettings = require('syracuse-tablet/html/js/wc/ui/uiSettings');
var initLocale = require('syracuse-tablet/html/js/wc/init/initLocale');
var initModules = require('syracuse-tablet/html/js/wc/init/initModules');
var initStorage = require('syracuse-tablet/html/js/wc/init/initStorage');

var App = require('syracuse-tablet/html/js/wc/app/appController').App;

var _nativeApp;

var _onError = function(error) {
	waiting.reset();
	try {
		modules.get("modal").asynchError(error);
	} catch (e) {
		alert(JSON.stringify(jsutils.convertToDiagnoses(error), null, 2));
	}
}

window.onerror = function(errorMsg, url, lineNumber, error) {
	var diag = {
		$diagnoses: [{
			$message: errorMsg,
			$stackTrace: "url:" + url + "\nLineNUmber:" + lineNumber + "\nError:" + error,
			$severity: "error"
		}]
	}
	_onError(diag);
};

$(document).ready(function() {
	if (document.location.href.indexOf("?circular") > -1) {
		_checkModuleDependencies();
	} else {
		_startApp()
	}
});

function _checkModuleDependencies() {
	xrayquire.showCycles(undefined, true);
}

function _startApp() {
	var sessionAvailable;
	var initTask = $.smResolve()
		.then(function() {
			return _initPlatform();
		})
		.then(function() {
			// When technical stuff is ready, we tell it to the wrapper if there is one
			_nativeApp && _nativeApp.notifLoaded();
		})
		.then(function() {
			return developmentPage.restoreOnStartup();
		})
		.then(function() {
			return App.init();
		})
		.then(function() {
			// returns true -> already logged in
			// "offline" when offline
			// "nosession" if we need to login first
			return _checkSession();
		})
		.then(function(_sessionAvailable) {
			sessionAvailable = _sessionAvailable;
		})
	var firstPage = _defineFirstPage();
	return waiting.waitModal(initTask)
		.then(function() {
			if (sessionAvailable === true) {
				return modules.get("navHelper").gotoUrl(firstPage.url, firstPage.method, firstPage.options);
			} else {
				var offline = sessionAvailable === "offline";
				return modules.get("navHelper").gotoUrl("html://login", null, {
					"offline": offline,
					"onLogin": {
						"gotoUrl": firstPage
					}
				});
			}
		})
		.fail(function(e) {
			// needed there
			_onError(e)
		});

}

/**
 * Init low level stuff like locale, native wrapper, modules, ...
 * When this fails, it's a fatal error that cannot be resolved by the user
 */
function _initPlatform() {
	return $.smResolve()
		.then(function() {
			return initThirdParty.init();
		})
		.then(function() {
			return initModules.init();
		})
		.then(function() {
			return native.init();
		})
		.then(function() {
			_nativeApp = native.getModule("nativeApp");
		})
		.then(function() {
			return initStyles.init();
		})
		.then(function(detectedOS) {
			return uiSettings.init(detectedOS);
		})
		.then(function() {
			return initLocale.init();
		})
		.then(function() {
			return initStorage.init();
		});
}

/**
 * Check login session status and connectivity
 * 
 * Resolves with true, "nosession" to force login or "offline"
 * 
 */
function _checkSession() {
	var deferred = $.Deferred();
	var session = modules.get("session");
	var profile;
	session.getCurrentUserProfile()
		.then(function(_profile) {
			profile = _profile;
			return App.setUserProfile(profile);
		})
		.then(function() {
			return session.storeUserProfile(profile);
		})
		.then(function() {
			deferred.resolve(true);
		})
		.fail(function(result) {
			// Getting user profile failed because we are not authenticated, so it's ok
			if (result.unauthenticated === true) {
				deferred.resolve("nosession");
			} else if (result.offline === true) {
				deferred.resolve("offline");
			} else {
				// Any other error is a "real" failure
				deferred.reject(result);
			}
		});
	return deferred.promise();
}

/**
 * Check if the page to go to after login is given by the url or if we want to go to the home page
 */
function _defineFirstPage() {
	var url;

	try {
		url = jsutils.parseURL(window.location.href);
	} catch (e) {}

	var query = url && url.query;
	var url = query.url;
	var method = query.method || "GET";

	var page;
	if (url) {
		page = {
			url: url,
			method: method
		}
	} else {
		page = {
			url: "html://home"
		}
	}

	return page;
}