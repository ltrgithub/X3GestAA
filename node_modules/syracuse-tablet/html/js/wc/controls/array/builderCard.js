"use strict";

var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var Base = require('syracuse-tablet/html/js/wc/controls/array/builderBase').BuilderBase;
var App = require('syracuse-tablet/html/js/wc/app/appController').App;
var fieldOperators = require('syracuse-tablet/html/js/wc/helpers/fieldOperators');
var environment = require('syracuse-tablet/html/js/wc/helpers/environment');
var authoringArticleGen = require('syracuse-tablet/html/js/wc/authoring/authoringArticleGen');

exports.BuilderCard = utils.defineClass(
	function builderCard(control) {
		Base.call(this, control);

	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
			this._tds = null;
			this._dirArray = null;
			if (this._$$body) {
				this._$$body.remove();
				this.destroyScroller();
			}
			this._$$body = null;
		},

		buildHtml: function(data, $$container, refresh) {
			this.article.$minWidth = this.article.$minWidth || 6;
			Base.prototype.buildHtml.call(this, data, $$container, refresh);
			this._cardArticle = this._createCardArticle();
			this._statusInfo = this.control.getRowStatusInfo();
			if (refresh === true) {
				// Build the real content only in that case because parent's size is ok
				// Otherwise buildOnResize is called on computeLayout
				this.buildOnResize(data, $$container, {
					refresh: true
				});
			}
		},

		buildOnResize: function(data, $$container, context) {
			if (this.destroyed) {
				return;
			}
			if (!this.checkEmptyArray()) {
				return;
			}
			this.buildCards(data, $$container, context);
		},


		buildCards: function(data, $$container, context) {
			var context = context || {};
			var refresh = context.refresh == true;
			if (!this._$$body) {
				this.destroyScroller();
				this._$$body = $('<tbody>').appendTo($('<table/>').appendTo($$container));
				this._tds = [];
				var self = this;
				data.forEach(function(rowData, idx) {
					self._tds.push({
						"$$td": $('<td class="s-m-record"/>'),
						rowData: rowData
					});
				});
			}
			var initScroll = true;
			var dirArray = this.control.isArrayField() ? "h" : "v";
			var sz = this.control.getAvailableSizeForCards();
			var parentH = sz.height;
			var parentW = sz.width;
			// Border spacing used for calculation
			var bs = this._$$body.parent().css("border-spacing");
			if (bs) {
				bs = bs.split("px");
				bs = bs && bs.length > 0 ? parseInt(bs[0], 10) : 0;
			}
			var $$hiddenRow;
			var visibleTds = [];
			// We keep the $$td's to not recreate them and arrange according the new configuration
			// We first detach them and select the visible ones (used by multiselection)
			// We put non-visible ones in $$hiddenRow to let them available in the dom (used by multiselection)
			this._tds.forEach(function(o, idx) {
				if (o.$$card) {
					// Clear the height/width because they are calculated according to the device/parent size
					o.$$card.css({
						height: "",
						width: ""
					});
				}
				o.$$td.detach();
				if (o.$$td.css('display') != "none") {
					visibleTds.push(o);
				} else {
					if (!$$hiddenRow) {
						$$hiddenRow = $("<tr>").hide();
					}
					o.$$td.appendTo($$hiddenRow);
				}
			});
			// !! Call $$body after having detached $$td because empty() removes the data attached to the node ($.smData) used by multi-selection (diagnoses)
			this._$$body.empty();
			if ($$hiddenRow) {
				$$hiddenRow.appendTo(this._$$body);
			}
			if (visibleTds.length === 0) return;
			if (dirArray === "h") {
				this.buildCardH(visibleTds, bs);
			} else {
				this.buildCardV(visibleTds, bs, parentW);
			}
			// Center the table in the parent - only if fixed height
			if (!this.control.isArrayField() && !this.control.page.isNestedInDashboard("stack")) {
				var top = Math.max(0, (parentH - this._$$body.parent().outerHeight()) / 2);
				this._$$body.parent().css({
					top: top + "px"
				});
			}
			if ((this._dirArray == null || this._dirArray != dirArray) && (dirArray === "h" || (dirArray === "v" && !this.control.page.isNestedInDashboard("stack")))) {
				this._dirArray = dirArray;
				this.newScroller(dirArray, this._$$body.parent());
				initScroll = true;
			}
			this.doAfterBuild();
		},
		buildCardV: function(visibleTds, bs, parentW) {
			this._$$body.parent().width("100%");
			var $$row, cardW;
			var remaining = 0;
			var nbCardPerRow = isNaN(this.article.$cardsPerRow) ? 2 : (parseInt(this.article.$cardsPerRow, 10) || 2)
			var self = this;
			visibleTds.some(function(o, idx) {
				if (idx === 0 || nbCardPerRow == 1 || (nbCardPerRow > 1 && idx % nbCardPerRow === 0)) {
					$$row = $("<tr>").appendTo(self._$$body);
					remaining = nbCardPerRow;
				}
				remaining--;
				o.$$td.appendTo($$row);
				if (!o.$$card) {
					// !! We create the card here because we need to have the $$card attached to the dom to calculate children width/row... eg: cards inside card
					// If we crate the card at the same time as $$td the generation of html is wrong
					o.$$card = self.createCardContent(o.$$td, idx, o.rowData);
				}
				if (idx === 0) {
					// We have to substract the padding of the card to set the right width
					var padding = o.$$card.outerWidth() - o.$$card.width();
					// Width of the row minus the borderSpacings
					var availWidth = o.$$td.width();
					var minWidth = Math.min(availWidth - padding, self.authMinSize2Pixels(self.article.$minWidth));
					while (nbCardPerRow > 0) {
						cardW = Math.round(((availWidth - ((nbCardPerRow - 1) * bs)) / nbCardPerRow)) - padding;
						if (cardW >= minWidth) {
							// nbCardPerRow is ok 
							availWidth = cardW
							break;
						}
						// Width is to small -> We decrease nbCardPerRow
						nbCardPerRow--;
					}
				}
				if (nbCardPerRow >= 0) {
					o.$$card.width(cardW);
				} else {
					o.$$card.css({
						width: "100%"
					});
				}
			});
			/*
			var $emptycell = this.article.$emptycell || "nodisplay";
			if (remaining && buildOpts.cardAuthoring.$emptyCell !== "nodisplay") {
				this.addEmptyCells(this._layoutRoot, $$row, remaining, buildOpts, this._$$cellTmpl);
			}
			if (this.$arrayOptions.hideEmptyRows === true) {
				this.checkEmptyRows();
			}
			*/
		},
		buildCardH: function(visibleTds, bs, parentH, parentW, buildOpts) {
			var $$row, realH, realW;
			var nbCardPerRow, numberOfRows;
			var nbVisiblecardsPerRow = buildOpts.cardAuthoring.$cardsPerRow;
			var minWidth = buildOpts.cardAuthoring.$minWidth;
			parentH = parentH - bs;
			var remaining = 0;
			var self = this;
			var maxHeight = 0,
				h, heightChanged;
			visibleTds.some(function(o, idx) {
				if (idx == 0 || nbCardPerRow == 1 || (nbCardPerRow > 1 && idx % nbCardPerRow === 0)) {
					$$row = $("<tr>").appendTo(self._$$body);
					remaining = nbCardPerRow;
				}
				o.$$td.appendTo($$row);
				if (!o.$$card) {
					// !! We create the card here because we need to have the $$card attached to the dom to calculate children width/row... eg: cards inside card
					// If we crate the card at the same time as $$td the generation of html is wrong
					o.$$card = self.createCardContent(o.$$td, idx, o.rowData, buildOpts);
				}
				if (idx === 0) {
					// Calculate the number of rows after having create the first cell
					realH = o.$$td.height() + bs;
					parentW = parentW - ((nbVisiblecardsPerRow + 1) * bs);
					var padding = o.$$card.outerWidth() - o.$$card.width();
					realW = Math.round(parentW / nbVisiblecardsPerRow) - padding;
					if (self.control.isArrayField() || (visibleTds.length * realW < parentW)) {
						// Force to display all the cells on one line because there's enough room
						numberOfRows = 1;
						nbCardPerRow = visibleTds.length;
					} else {
						// Calculate the number of rows to fit the parent height
						numberOfRows = Math.max(1, Math.floor(parentH / realH));
						nbCardPerRow = Math.ceil(visibleTds.length / numberOfRows);
						if (visibleTds.length <= numberOfRows * nbVisiblecardsPerRow) {
							// Dispatch the cards by filling the lines from the top to bottom
							nbCardPerRow = nbVisiblecardsPerRow;
						}
					}
					remaining = nbCardPerRow;
				}
				o.$$card.width(Math.min(parentW, Math.max(minWidth, realW)));
				var h = o.$$card.height();
				if (maxHeight === 0) {
					maxHeight = h;
				} else if (maxHeight != h) {
					heightChanged = true;
					maxHeight = Math.max(maxHeight, h);
				}
				remaining--;
			});
			if (heightChanged) {
				// Set the same height for cards (could occurs if there are arrays in cards)
				visibleTds.forEach(function(o) {
					o.$$card.height(maxHeight);
				});
			}
			/*
			if (remaining && buildOpts.cardAuthoring.$emptyCell !== "nodisplay") {
				var $$emptyCells = this.addEmptyCells(this._layoutRoot, $$row, remaining, buildOpts, this._$$cellTmpl);
				if (heightChanged) {
					$$emptyCells.height(maxHeight);
				}
			}
			if (this.$arrayOptions.hideEmptyRows === true) {
				this.checkEmptyRows();
			}*/
		},
		createCardContent: function($$container, index, rowData) {
			var $$card = $('<section class="s-m-card" style="position:relative"/>').appendTo($$container);
			if (this.article.$arrayOptions.rowIndex === true) {
				$('<span class="badge index">' + (index + 1) + '</span>').appendTo($$card);
			}
			if (this._statusInfo) {
				this.checkStatusManagement($$card, this._statusInfo, $$card, rowData);
			}
			var cardCtrl = this.control.createRecordCtrl($$card, rowData, index, {
				cardArticle: this._cardArticle
			});
			if (cardCtrl) {
				cardCtrl.buildHtml(this._tableColumnInfo);
				if (environment.isAutoUITestMode()) {
					environment.getUnitTestMgr().arrayAddRowIndex(cardCtrl.$$elmt, index);
				}
			}
			return $$card;
		},
		checkStatusManagement: function($$parent, statusInfo, $$cell, rowData) {
			if (statusInfo) return;
			var $$rootIcon = $$cell.find(".s-m-status");
			if ($$rootIcon.length === 0) {
				$$rootIcon = $('<div class="s-m-status"/>').appendTo($$cell);
			}
			var nbBckg = 0;
			statusInfo.list.some(function(s) {
				if (s.color && fieldOperators.evaluateOperator(s.$type, rowData.getValue(s.field), s.operator, s.value)) {
					/**
					 * We need to set color and bg-color because using css property doesn't work due to css inheritance
					 * Using css forces to declare all css selectors (td:not(.s-m-multi-selected)...) for each color of the palette
					 */
					if (s.icon) {
						$('<div class="s-m-status-icon ' + s.icon.css + '" style="color:' + s.color.bgColor + '"/>').appendTo($$rootIcon);
						return statusInfo.type === "mono";
					} else if (s.color.css && nbBckg === 0) {
						$$parent.addClass('s-m-status-color ' + s.color.css);
						nbBckg++;
					}
					return statusInfo.type === "mono";
				}
			});
		},
		authMinSize2Pixels: function(val) {
			var max = 700,
				min = 100;
			val = parseInt(val, 10);
			if (val == null || isNaN(val)) return 200;
			if (val > 20) return max;
			if (val < 1) return min;
			return min + (val * (max - min) / 20);
		},
		_createCardArticle: function() {
			var cardArticle = this.article.$card;
			if (!cardArticle) {
				cardArticle = authoringArticleGen.genCardArticle(this.control.prototype);
			};
			return cardArticle;
		},
		savedCtxCreate: function(type) {
			var ctx = Base.prototype.savedCtxCreate.call(this, type) || {};
			ctx.selectedRowUuid = this.control.$$content.find(".s-m-last-selected > .s-m-card > .s-m-ctrl").attr("id");
			return ctx;
		},
		savedCtxRestore: function(ctx) {
			Base.prototype.savedCtxRestore.call(this, ctx);
			if (ctx.selectedRowUuid) {
				this.control.$$content.find('#' + ctx.selectedRowUuid).closest("td").addClass("s-m-last-selected");
			}
		}

	});