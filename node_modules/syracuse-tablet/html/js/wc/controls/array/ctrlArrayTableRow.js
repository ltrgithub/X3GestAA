"use strict";

var Base = require('syracuse-tablet/html/js/wc/controls/ctrlSdataBase').CtrlSdataBase;
var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/wc/ui/uiUtils');
var modules = require('syracuse-tablet/html/js/wc/common/modules');


/**
 * Control representing a single row of an array
 */
exports.CtrlArrayTableRow = utils.defineClass(
	function CtrlArrayTableRow(controller, article, prototype, options) {
		Base.call(this, controller, article, prototype, options);
		this.$properties = this.prototype.getValueByPath("$properties");
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			this.$properties = null;
		},

		buildHtml: function(columnsInfo) {
			var classes = ["s-m-array-row"];
			var ctrlFactory = modules.get("ctrlFactory");

			Base.prototype.buildHtml.call(this, classes);
			if (this.options.rowDetailLinkDomAttrs) {
				this.$$elmt.attr(this.options.rowDetailLinkDomAttrs);
			}
			this.$$elmt.attr({
				"data-controller-id": this.controller.id
			});
			var self = this;
			columnsInfo.forEach(function(col, idx) {
				if (col.isProtoItem) {
					var ctrlCell = ctrlFactory.createControl(self.controller, col,
						self,
						self.page, {
							displayCtx: "table",
							noEdit: self.options.noEdit
						});
					if (ctrlCell) {
						var $$td = $(uiUtils.createDomElement("td", null, null, null, self.$$elmt));
						ctrlCell.set$$container($$td);
						ctrlCell.buildHtml();
					}
				} else {
					var text;
					switch (col.$bind) {
						case "rowIndex":
							text = (self.options.rowIndex + 1) + "";
							break;
						case "rowDetail":
							text = "rowDetail";
							break;
						case "rowDelete":
							text = "rowDelete";
							break;
					}
					$("<td>" + (text || col.$bind) + "</td>").appendTo(self.$$elmt);
				}
			});
			/*
						
						for (var prop in this.$properties) {
							var val = this.$properties[prop];
							if (val.$isExcluded === true) {
								continue;
							}
							if (val.$type === 'application/x-array') {
								continue;
							}
							// #6148 - skip these columns - No possibility to show/hide columns currently
							//if (item.$isHidden || (dataProps && dataProps[item.$bind] && dataProps[item.$bind].$isHidden)) return;

							var ctrlCell = ctrlFactory.createControl(this.controller, {
									$bind: prop
								},
								this,
								this.page, {
									displayCtx: "table",
									noEdit: this.options.noEdit
								});

							if (ctrlCell) {
								var $$td = $(uiUtils.createDomElement("td", null, null, null, this.$$elmt));
								ctrlCell.set$$container($$td);
								ctrlCell.buildHtml();
							}
						}

						if (this.options.showRowDetail) {
							var $$td = $(uiUtils.createDomElement("td", null, null, null, this.$$elmt));
							$$td.append($('<a class="btn btn-primary" href="#" data-nevent data-naction="openRowDetail">Detail</a>'));
						}
						if (this.options.showRowDelete) {
							var $$td = $(uiUtils.createDomElement("td", null, null, null, this.$$elmt));
							$$td.append($('<a class="btn btn-primary" href="#" data-nevent data-naction="deleteRow">Remove</a>'));
						}
			*/
		},
		getRootElementTag: function() {
			return "tr";
		},

		_actLookupAccept: function() {
			var lookup = this.controller.root.lookupData; // Injected by lookup page so we can use it here
			var parentController = this.controller.findController(lookup.controllerId);
			var value = this.controller.getValue(lookup.$lookupKeyName);
			parentController.setValue(lookup.$bind, value, true);

			return modules.get("appController").App.goBack();
		},

		_actOpenRowDetail: function() {
			this.controller.gotoUrl("child://SdataRowDetail", null, {
				isChild: true,
				childContext: {
					controllerId: this.controller.id
				}
			});
		},
		_actDeleteRow: function() {
			// Ask the parent (=> array to remove the row)
			this.parent.removeRow(this);
		}
	});