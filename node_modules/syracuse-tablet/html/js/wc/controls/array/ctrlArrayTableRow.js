"use strict";

var Base = require('syracuse-tablet/html/js/wc/controls/ctrlSdataBase').CtrlSdataBase;
var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/wc/ui/uiUtils');
var modules = require('syracuse-tablet/html/js/wc/common/modules');
var fontUtils = require('syracuse-tablet/html/js/wc/ui/fontUtils');
var builderBase = require('syracuse-tablet/html/js/wc/controls/array/builderBase');
var SdataController = require("syracuse-tablet/html/js/wc/controllers/sdataController").SdataController;


/**
 * Control representing a single row of an array
 */
exports.CtrlArrayTableRow = utils.defineClass(
	function CtrlArrayTableRow(rowDataset, arrayController, article, prototype, options) {
		// first
		this._rowController = new SdataController(rowDataset, arrayController);
		// Second
		Base.call(this, arrayController, article, prototype, options);
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this._rowController) {
				this._rowController.destroy();
			}
			this._rowController = null;
		},

		createId: function(typeName) {
			return "rowid-" + this.getUuid();
		},

		buildHtml: function(columnsInfo) {
			var classes = ["s-m-record"];
			if (this.options.rowIndex != null && this.options.rowIndex % 2 === 0) {
				classes.push("s-m-even");
			}
			var ctrlFactory = modules.get("ctrlFactory");

			Base.prototype.buildHtml.call(this, classes);
			if (this.options.rowLinkDomAttrs) {
				this.$$elmt.attr(this.options.rowLinkDomAttrs);
			} else if (this.options.drillDownDomAttrs) {
				this.$$elmt.attr(this.options.drillDownDomAttrs);
			}
			this.$$elmt.attr({
				"data-controller-id": this._rowController.id
			});
			var self = this;
			columnsInfo.forEach(function(col, idx) {
				if (col.isProtoItem) {
					var ctrlCell = ctrlFactory.createControl(self._rowController, col.article,
						self,
						self.page, {
							displayCtx: "table",
							noEdit: self.options.noEdit
						});
					if (ctrlCell) {
						var $$td = $(uiUtils.createDomElement("td", null, null, null, self.$$elmt));
						ctrlCell.set$$container($$td);
						ctrlCell.buildHtml();
					}
				} else {
					var text;
					switch (col.$bind) {
						case "rowStatus":
							text = builderBase.getHtmlStatus(col.statusInfo, self.controller.dataset)
							break;
						case "rowIndex":
							text = '<div class="s-m-control s-m-row-index"><span class="badge">' + (self.options.rowIndex + 1) + '</span></div>';
							break;
						case "rowDetail":
						case "rowDelete":
							text = '<div class="s-m-control s-m-icon"><a href="#" data-nevent data-naction="' + col.$bind + '" class="a"><span class="' + fontUtils.tableActionIcon(col.$bind) + '"></span></a></div>';
							break;
					}
					$("<td>" + (text || col.$bind) + "</td>").appendTo(self.$$elmt);
				}
			});
		},
		getRootElementTag: function() {
			return "tr";
		},

		_actLookupAccept: function() {
			this.setRowSelected(true);
			var lookup = this.controller.root.lookupData; // Injected by lookup page so we can use it here
			var parentController = this._rowController.findController(lookup.controllerId);
			var value = this._rowController.getValue(lookup.$lookupKeyName);
			parentController.setValue(lookup.$bind, value, true);
			return modules.get("appController").App.goBack();
		},

		onSdataLinkClicked: function($linkName, $linkBind) {
			this.setRowSelected();
			this._rowController.onSdataLinkClicked($linkName, $linkBind);
		},

		_actRowDetail: function() {
			this.setRowSelected();
			this._rowController.gotoUrl("child://SdataRowDetail", null, {
				isChild: true,
				childContext: {
					controllerId: this._rowController.id
				}
			});
		},
		_actRowDelete: function() {
			this.setRowSelected(false);
			// Ask the parent (=> array to remove the row)
			this.parent.removeRow(this);
		},
		_actDrillDown: function() {
			this.setRowSelected();
			//gotoUrl: function($url, $method, pageOptions, loadOptions) 
			this._rowController.gotoUrl(this._rowController.dataset.getLinkDrillDown(), null, {
				isChild: false,
				context: {
					controllerId: this._rowController.id
				},
				isChartDetail: true,
				level: this.page.controller.level + 1
			});
		},
		_actLevelUp: function() {
			this.setRowSelected();
			//gotoUrl: function($url, $method, pageOptions, loadOptions) 
			this._rowController.gotoUrl(this._rowController.dataset.getLinkLeverUp(), null, {
				isChild: false,
				context: {
					controllerId: this._rowController.id
				},
				isChartDetail: true,
				level: this.page.controller.level + 1
			});
		},
		/*
		_actRowChartDetail: function() {
			this.setRowSelected();
			this._rowController.gotoUrl(this._rowController.dataset.getLinkDrillDown(), null, {
				isChild: false,
				childContext: {
					controllerId: this._rowController.id
				},
				isChartDetail:true
			});
		},*/
		getUuid: function() {
			return this._rowController.dataset.json.$uuid;
		},
		setRowSelected: function(select) {
			select = select == null ? true : false;
			this.parent.$$content.find('.s-m-last-selected').removeClass("s-m-last-selected");
			if (select) {
				return this.$$elmt.addClass("s-m-last-selected");
			}
		}
	});