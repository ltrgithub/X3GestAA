"use strict";

var Base = require('syracuse-tablet/html/js/wc/controls/array/ctrlComplexArray').CtrlComplexArray;
var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var locale = require('syracuse-tablet/html/js/wc/helpers/locale');
var paginators = require("syracuse-tablet/html/js/wc/controls/array/paginators");


/**
 * 
 * Chart Array control
 * 
 * Array tied to a chart
 * Can be displayed as a grid/card/chart (article.$display = "chart" or "card" or "table")
 * 
 */
exports.CtrlChartArray = utils.defineClass(
	function CtrlChartArray(controller, article, prototype, options) {
		options = options || {};
		options.localPagination = prototype.isCube();
		article.$arrayOptions = article.$arrayOptions || {};
		// Disabled for statistics and requests
		article.$arrayOptions.showSortFilter = false;
		article.$arrayOptions.showSearch = false;
		if (!article.$display) {
			article.$display = "chart";
		}
		//TODO : this.level = controller.state.level == null ? 0 : controller.state.level;
		Base.call(this, controller, article, prototype, options);
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
		},

		buildHtml: function(refresh) {
			Base.prototype.buildHtml.call(this, refresh);
			if (this.isHighChart()) {
				this.$$elmt.addClass("s-m-chart");
			} else {
				if (this.isOpenDetailEnabled()) {
					// action on $$value not on $$elmt ( pagination)
					this.addChartDetailLink(this.$$value);
				}
				this.$$elmt.addClass("s-m-chart-array");
			}
		},
		/**
		 * Called also by builderChart
		 */
		addChartDetailLink: function($$elmt) {
			this.$$elmt.attr("data-control-id", this.id).attr("data-naction", "chartDetail");
			this.$$elmt.attr("data-nevent", "")
		},
		_actChartDetail: function() {
			if (this.isEmpty) return;
			this.controller.gotoUrl("child://SdataChartDetail", null, {
				isChild: true,
				childContext: {
					controllerId: this.controller.id
				}
			})
		},
		/**
		 * Opens chart detail page
		 * Called also from authoring
		
		triggerOpenChartDetail: function(opt) {
			this.forceDetailTitle = (opt && opt.forceDetailTitle) ? opt.forceDetailTitle : null // title also for breadcrumb;
			if (!this.$$elmt) return;
			var attrs = {
				"data-control-id": this.id,
				"data-origin-id": (opt && opt.controlOriginId) ? opt.controlOriginId : this.id, //id control initial
				"data-parent-id": this.controller.id,
				"data-nav": "chartdetail",
				"data-nav-target": "application",
				"data-sdata-url": this._getSdataUrl(opt)
			};
			eventListener.triggerNavigation(this.$$elmt, attrs);
		},
		 */
		isArrayChart: function() {
			return true;
		},
		setEmptyArrayMsg: function() {
			Base.prototype.setEmptyArrayMsg.call(this, locale.text("label.chart.nodata"));
		},
		_ensurePaginator: function() {
			if (this.prototype.isCube()) {
				this.paginator = new paginators.ArrayPaginatorClient(this, 10);
			} else {
				Base.prototype._ensurePaginator.call(this);
			}
		},
		isDisplayedInDetailPage: function() {
			return this.isChartDetailPage() || !this.page.isVignette();
		},
		/**
		 * Called by chart authoring to know if we should display height property
		 * Mandatory for charts in a row/cell layout because we need to fix the height of the chart
		 * For hub the height is given by the tile
		 */
		chartNeedsHeight: function() {
			return this.$display === "chart" && this._layouytType === "stack" && !this.isDisplayedInDetailPage();
		},
		isHighChart: function() {
			return this.$display === "chart";
		},
		/**
		 * Called also by builderChart
		 */
		isOpenDetailEnabled: function() {
			if (this.isChartDetailPage() || this.displayAsCarousel) {
				return false;
			}
			if (this.page.isVignette()) {
				return this.article.$openDetail !== false;
			}
			return true;
		},
		isChartDetailPage: function() {
			return this.page.isChild("SdataChartDetail");
		}
	});


var _checkChartArticle = function(article, $bind) {
	if (!article) return;
	var arrayArticle = _traverseArticleNodes(article, function(node) {
		return node.$bind === $bind && node.$forceArray === true;
	});
	// Ok because we expect a $forceArray in arrayArticle
	if (arrayArticle) {
		return article;
	}
	// No $forceArray has been found and we need it
	arrayArticle = _traverseArticleNodes(article, function(node) {
		if (node.$bind != $bind || node.$display == "chart" || node.$seriesOptions != null) {
			return false;
		}
		if (node.$display != null) {
			// Its an array
			return true;
		}
		// Unexpected null $display -  #7719 - We should find a way to detect the array
		if (node.$table || node.$card != null || node.$separator !== null) {
			// It's an array
			return true;
		}
		if (node.arrayOptions && node.rowIndex) {
			// It's an array
			return true;
		}
		return false;
	});
	if (arrayArticle) {
		// Set mandatory $forceArray
		arrayArticle.$forceArray = true;
	}
	return article;
};
/**
 * Retrieve chart and array article in chart Detail page article
 */
var _findChartArticle = function(article, $bind) {
	var self = this;
	var chartNode = _traverseArticleNodes(article, function(node) {
		// We got the chart not if forceArray is not set or is false
		if (node.$bind === $bind && node.$forceArray !== true) {
			return true;
		}
	});
	return chartNode;
};
var _findArrayArticle = function(article, $bind) {
	var arrayNode = _traverseArticleNodes(article, function(node) {
		if (node.$bind === $bind && node.$forceArray === true) {
			return true;
		}
	});
	return arrayNode;
};
var _traverseArticleNodes = function(node, matcher) {
	if (matcher(node) === true) {
		return node;
	}
	if (node.$items && node.$items.length > 0) {
		var i;
		var match;
		for (i = 0; i < node.$items.length; i++) {
			match = _traverseArticleNodes(node.$items[i], matcher);
			if (match) {
				return match;
			}
		}
	}
	return null;
};