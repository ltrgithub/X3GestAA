"use strict";

var Base = require('syracuse-tablet/html/js/wc/controls/array/ctrlComplexArray').CtrlComplexArray;
var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var locale = require('syracuse-tablet/html/js/wc/helpers/locale');
var paginators = require("syracuse-tablet/html/js/wc/controls/array/paginators");


/**
 * 
 * Chart Array control
 * 
 * Array tied to a chart
 * Can be displayed as a grid/card/chart (article.$display = "chart" or "card" or "table")
 * 
 */
exports.CtrlChartArray = utils.defineClass(
	function CtrlChartArray(controller, article, prototype, options) {
		options = options || {};
		options.localPagination = prototype.isCube();
		article.$arrayOptions = article.$arrayOptions || {};
		// Disabled for statistics and requests
		article.$arrayOptions.showSortFilter = false;
		article.$arrayOptions.showSearch = false;
		if (!article.$display) {
			article.$display = "chart";
		}
		//TODO : this.level = controller.state.level == null ? 0 : controller.state.level;
		Base.call(this, controller, article, prototype, options);
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
		},

		buildHtml: function(refresh) {
			Base.prototype.buildHtml.call(this, refresh);
			if (this.isHighChart()) {
				this.$$elmt.addClass("s-m-chart");
			} else {
				if (this.isOpenDetailEnabled()) {
					// action on $$value not on $$elmt ( pagination)
					this.addChartDetailLink(this.$$value);
				}
				this.$$elmt.addClass("s-m-chart-array");
			}
		},
		/**
		 * Called also by builderChart
		 */
		addChartDetailLink: function($$elmt) {
			this.$$elmt.attr("data-control-id", this.id).attr("data-naction", "chartDetail");
			this.$$elmt.attr("data-nevent", "")
		},
		_actChartDetail: function() {
			if (this.isEmpty) return;
			this.controller.gotoUrl(this.page.pageData.$url, null, {
				childContext: {
					controllerId: this.controller.id
				},
				isChartDetail: true,
				level: 0,
			})
		},
		isArrayChart: function() {
			return true;
		},
		setEmptyArrayMsg: function() {
			Base.prototype.setEmptyArrayMsg.call(this, locale.text("label.chart.nodata"));
		},
		_ensurePaginator: function() {
			if (this.prototype.isCube()) {
				this.paginator = new paginators.ArrayPaginatorClient(this, 10);
			} else {
				Base.prototype._ensurePaginator.call(this);
			}
		},
		isDisplayedInDetailPage: function() {
			return this.isChartDetailPage() || !this.page.isVignette();
		},
		/**
		 * Called by chart authoring to know if we should display height property
		 * Mandatory for charts in a row/cell layout because we need to fix the height of the chart
		 * For hub the height is given by the tile
		 */
		chartNeedsHeight: function() {
			return this.$display === "chart" && this._layouytType === "stack" && !this.isDisplayedInDetailPage();
		},
		isHighChart: function() {
			return this.$display === "chart";
		},
		/**
		 * Called also by builderChart
		 */
		isOpenDetailEnabled: function() {
			if (this.isChartDetailPage() || this.displayAsCarousel) {
				return false;
			}
			if (this.page.isVignette()) {
				return this.article.$openDetail !== false;
			}
			return true;
		},
		isChartDetailPage: function() {
			return this.page.isChild("SdataChartDetail");
		}
	});