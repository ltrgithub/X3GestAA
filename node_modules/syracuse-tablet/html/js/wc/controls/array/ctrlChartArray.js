"use strict";

var Base = require('syracuse-tablet/html/js/wc/controls/array/ctrlComplexArray').CtrlComplexArray;
var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var locale = require('syracuse-tablet/html/js/wc/helpers/locale');
var paginators = require("syracuse-tablet/html/js/wc/controls/array/paginators");


/**
 * 
 * Chart Array control
 * 
 * Array tied to a chart
 * Can be displayed as a grid/card/chart (article.$display = "chart" or "card" or "table")
 * 
 */
exports.CtrlChartArray = utils.defineClass(
	function CtrlChartArray(controller, article, prototype, options) {
		options = options || {};
		options.localPagination = prototype.isCube();
		article.$arrayOptions = article.$arrayOptions || {};
		// Disabled for statistics and requests
		article.$arrayOptions.showSortFilter = false;
		article.$arrayOptions.showSearch = false;
		if (!article.$display) {
			article.$display = "chart";
		}
		//TODO : this.level = controller.state.level == null ? 0 : controller.state.level;
		Base.call(this, controller, article, prototype, options);
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
		},

		buildHtml: function() {
			if (!this.$$elmt) {
				Base.prototype.buildHtml.call(this, ["s-m-array s-m-chart"]);
			}
			//this.$$elmt.html("<b>This is a chart</b>")
		},

		isArrayChart: function() {
			return true;
		},
		setEmptyArrayMsg: function() {
			Base.prototype.setEmptyArrayMsg.call(this, locale.text("label.chart.nodata"));
		},
		_ensurePaginator: function() {
			if (this.prototype.isCube()) {
				this.paginator = new paginators.ArrayPaginatorClient(this, 10);
			} else {
				Base.prototype._ensurePaginator.call(this);
			}
		}
	});