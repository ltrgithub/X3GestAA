"use strict";

var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var Base = require('syracuse-tablet/html/js/wc/controls/array/builderCard').BuilderCard;
var hammerScroller = require('syracuse-tablet/html/js/wc/helpers/scroller/hammerScroller');

exports.BuilderCarousel = utils.defineClass(
	function builderCarousel(control) {
		Base.call(this, control);
		this.direction = "h";
		this._curIdx = 0;
		this._hammer = null;
		this._nbCards = 0;
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
			this._destroySwiper();
		},

		buildHtml: function(data, $$container, refresh) {
			this._nbCards = data.length;
			Base.prototype.buildHtml.call(this, data, $$container, refresh);
		},
		buildCardH: function(visibleTds, bs, parentH, parentW) {
			Base.prototype.buildCardH.call(this, visibleTds, bs, parentH, parentW);
			if (this._nbCards == 0) {
				return;
			}
			this._shiftInPx = (this._$$table.find("tbody > tr > td").width() / this.control.getTransformScale()) + bs;
		},

		initScroller: function($$container) {
			this._destroySwiper();
			if (this._nbCards == 0) {
				return;
			}
			this._hammer = new hammerScroller.Hammer($$container.get(0));
			this._hammer.get("swipe").set({
				direction: hammerScroller.Hammer.DIRECTION_HORIZONTAL
			});
			this._hammer.on("swipeleft swiperight", hammerScroller.Hammer.bindFn(this._onSwipe, this));
			if (this._getInterval() > 0) {
				setTimeout(hammerScroller.Hammer.bindFn(this._onTimeout, this), this._getInterval());
			}
		},

		_onTimeout: function(evt) {
			if (this._curIdx >= this._nbCards - 1) {
				this._curIdx = 0;
			}
			this._swipe("swipeleft");
			setTimeout(hammerScroller.Hammer.bindFn(this._onTimeout, this), this._getInterval());
		},

		_onSwipe: function(evt) {
			if (hammerScroller.isEvtDirection(evt, "v") || !evt) {
				return;
			}
			this._swipe(evt.type);
		},

		_swipe: function(type) {
			var $$current = this.control.$$elmt.find('.s-m-card[data-idx="' + this._curIdx + '"]');
			if ($$current.length == 0) {
				return;
			}
			if (type === "swipeleft") {
				this._curIdx = Math.min(this._curIdx + 1, this._nbCards - 1);
			} else if (type === "swiperight") {
				this._curIdx = Math.max(this._curIdx - 1, 0);
			} else {
				return;
			}
			var $$next = this.control.$$elmt.find('.s-m-card[data-idx="' + this._curIdx + '"]');
			if ($$next.length == 0) {
				return;
			}
			this._$$table.css("opacity", 0, 25);
			this._$$table.animate({
				left: (-1 * this._curIdx * this._shiftInPx) + "px",
				opacity: 1
			}, 500);
		},

		_destroySwiper: function() {
			if (this._hammer) {
				this._hammer.destroy();
				this._hammer = null;
			}
		},
		_getInterval: function() {
			var period = null;
			if (period === "slow") {
				return 6000;
			} else if (period === "normal") {
				return 3000;
			} else if (period === "fast") {
				return 1000;
			}
			return -1;
		}
	});