"use strict";
var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var locale = require('syracuse-tablet/html/js/wc/helpers/locale');
var fontUtils = require('syracuse-tablet/html/js/wc/ui/fontUtils');
var filterHelper = require('syracuse-tablet/html/js/wc/helpers/filterHelper');
var fieldOperators = require('syracuse-tablet/html/js/wc/helpers/fieldOperators');


var _sortFilterExclude = ["application/x-array", "image", "application/x-document", "application/x-binary", "application/x-object", "text/rtf", "text/html", "text/plain"];

var _templates = {
	filtersList: '\
			<select	class="form-control" data-nevent data-nevent-ctrl-change data-naction="actionArray">\
			{{#each filters}}\
				<option value="filterSelected,{{id}}" {{#if $isDefault}}selected=""{{/if}}>{{$title}}</option>\
			{{/each}}\
		   </select>',
	filtersTabs: '\
				<ul class="nav nav-pills nav-justified">\
					{{#each filters}}\
						<li role="presentation" role="tab" data-toggle="tab" data-action="actionArray" data-params="filterSelected,{{id}}" class="{{#if $isDefault}}active{{/if}}"><a href="#">{{$title}}</a></li>\
					{{/each}}\
				</ul>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/* X3 predefined filters */
exports.Filters = utils.defineClass(
	function filters(arrayCtrl) {
		this.control = arrayCtrl
	}, null, {
		destroy: function() {
			this.control = null;
		},
		getHtml: function($auth) {
			if ($auth == "list" || $auth == "tabs") {
				var filters = this._$filtersGet();
				if (filters && $auth == "tabs") {
					// Remove 'no filter'
					filters = filters.slice(1);
				}
				return $(_getHtml($auth == "list" ? "filtersList" : "filtersTabs", {
					filters: filters
				}));
			}
			return null;
		},
		_$filtersGet: function() {
			var prototype = this.control.prototype
			if (!exports.filterSortAllowed(this.control) || prototype.root.isRequest()) return null;
			var $filterId = this.control.controller.currentFilterId //Hack : get filter id in saved context, waiting context management
			this._$filters = [{
				id: "nofilter",
				$title: locale.text("nofilter")
			}];
			// Authoring on filters - none/list/tabs
			var auth = this.control.$filtersGetAuthoring();
			var filters = $.extend(true, {}, prototype.data("$filters", null, false, true));
			if (auth === "none" || !filters || $.isEmptyObject(filters)) {
				this._$filtersDisabled = true;
				return;
			}
			var defFilter = null;
			for (var p in filters) {
				var ttl = prototype.resolveExpression(filters[p].$title);
				if (ttl) {
					var f = $.extend(true, {}, filters[p]);
					f.$title = ttl;
					f.id = p;
					f.$isDefault = false;
					if ($filterId && f.id === $filterId) {
						defFilter = f;
					} else if (!defFilter && f.$isDefault === true) {
						defFilter = f;
					}
					this._$filters.push(f);
				}
			}
			if (this._$filters.length == 1) {
				return;
			}
			if (defFilter) {
				defFilter.$isDefault = true;
			} else {
				this._$filters[0].$isDefault = true;
			}
			return this._$filters;
		},
		//TODO
		_$filterGetInfo: function() {
			if (this._$filters.length === 0 || this._$filtersDisabled === true) return null;
			var f = null;
			this._$filters.some(function(x) {
				if (x.$isDefault === true) {
					f = x;
					return true;
				}
			});
			return f;
		},
		filtersSelect: function(param) {
			if (this._$filtersSelect(param)) {
				var $url = filterHelper.filterSortUpdateUrl(this.control._optUrl());
				this.control.paginateTo({
					"$url": $url
				})
			}
		},
		/**
		 * Select a filter
		 */
		_$filtersSelect: function(filterId) {
			if (!this._$filters) return;
			this._$filtersDisabled = false;
			this._$filters.forEach(function(f) {
				f.$isDefault = false;
				if (filterId === f.id) {
					f.$isDefault = true;
				}
			});
			this.control.controller.currentFilterId = filterId // Hack waiting context management
			return true
		},
		$filtersAllowed: function() {
			if (exports.filterSortAllowed(this.control)) {
				this._$filters = this._$filtersGet();
				return this._$filters && this._$filters.length > 0
			}
			return false
		}
	});

exports.FilterSort = utils.defineClass(
	function filterSort(arrayCtrl) {
		this.control = arrayCtrl
	}, null, {
		destroy: function() {
			this.control = null;
		},
		getHtml: function(id) {

		},
		filterSortUpdate: function($$container) {
			if (!$$container) return;
			var sortOrder = null,
				sortField = null,
				hasFilter = false;
			var info = this.sortInfoGet();
			if (info) {
				// select the first sorted column
				// Currently we support sorting on only one column
				// -> We can display a asc/desc icon in the header
				// Sort panel can manage sorting on multiple columns but it's disabled
				info.some(function(i) {
					if (i.sort != "none") {
						sortOrder = i.sort;
						sortField = i.id;
						return true;
					}
				});
			}
			var info = this.filterInfoGet();
			hasFilter = info && info.length > 0;


			var $$icon = $$container.find(".s-m-sorted").toggle(sortOrder != null).removeClass();
			$$icon.toggle(sortOrder !== null)
			if (sortOrder != null) {
				$$icon.addClass("s-m-sorted " + fontUtils.sortIcon(sortOrder));
			}
			$$container.find(".s-m-filtered").toggle(hasFilter === true);
		},
		/**
		 *  returns an array of filterInfo
		 */
		filterInfoGet: function() {
			var info = this.control.page.getPageFilter();
			return info;
		},
		filterMapGet: function() {
			var self = this;
			var map = [];
			var props = this.control.arrayDataset.getColumnsInfo();
			if (props) {
				props.forEach(function(prop) {
					if (_sortFilterExclude.indexOf(prop.$type) === -1 && prop.$capabilities && prop.$capabilities.indexOf("filter") >= 0 && !prop.$isExcluded) {
						var field = {
							fieldName: prop.$title,
							operators: fieldOperators.getOperators(prop.$type),
							// $bindValue is $bind for non reference field
							id: prop.$bindValue,
							prop: prop,
							isReference: prop.$type.indexOf("x-reference") >= 0
						};
						map.push(field);
					}
				});
			}
			return map;
		},
		/**
		 *  return array of sortInfo (not null)
		 */
		sortInfoGet: function() {
			var self = this;
			var info = this.control.page.getPageSort();
			if (info == null || info.length === 0) {
				var cols = this.control.arrayDataset.getColumnsInfo();
				if (cols) {
					info = [];
					cols.forEach(function(c) {
						if (_sortFilterExclude.indexOf(c.$type) === -1 && c.$capabilities && c.$capabilities.indexOf("sort") >= 0) {
							info.push({
								name: c.$title,
								// $bindValue is $bind for non reference field
								id: c.$bindValue,
								sort: "none"
							});
						}
					});
				}
				this.sortInfoSet(info, false);
			}
			return info;
		},
		sortInfoSet: function(info, refresh) {
			// set settings
			this.control.page.setPageSort(info);
			if (refresh) {
				var $url = filterHelper.filterSortUpdateUrl(this.control._optUrl());
				this.control.paginateTo({
					"$url": $url
				})
			}
		},
		filterInfoSet: function(info, refresh) {
			this.control.page.setPageFilter(info);
			if (refresh) {
				var $url = filterHelper.filterSortUpdateUrl(this.control._optUrl());
				this.control.paginateTo({
					"$url": $url
				});
			}
		}
	});


exports.filterSortAllowed = function(ctrl) {
	return ctrl && ctrl.prototype.root.filterSortAllowed();
};