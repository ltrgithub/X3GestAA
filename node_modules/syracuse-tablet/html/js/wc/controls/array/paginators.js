"use strict";

var utils = require('syracuse-tablet/html/js/wc/helpers/utils');

var ArrayPaginatorBase = utils.defineClass(
	function ArrayPaginatorBase(arrayCtrl) {
		this.arrayCtrl = arrayCtrl;
		this.pagingLinks = ["$first", "$previous", "$next", "$last"];
	}, null, {
		/**
		 *  Will return -1 if we do not know the number of pages
		 */
		getNumPages: function() {
			throw new Error("Not implemented");
		},
		/**
		 * Returns number of rows for the current page
		 */
		getNumRowsPage: function() {
			throw new Error("Not implemented");
		},
		/**
		 * Returns the row identified by the index
		 */
		getRowByIndex: function(idx) {
			throw new Error("Not implemented");
		},
		/**
		 * Paginate in the direction given
		 * $first, $prev, $next, $last
		 */
		paginate: function(direction) {
			throw new Error("Not implemented");
		},
		destroy: function() {

		},
		/**
		 * Check if pagination on the given direction is enabled
		 */
		isEnabled: function(direction) {
			return false;
		},
		_getDatasetNumRows: function() {
			return this.arrayCtrl.arrayController.dataset.getNumRows();
		}
	});

/**
 * 
 */
exports.ArrayPaginatorServer = utils.defineClass(
	function ArrayPaginatorServer(arrayCtrl) {
		ArrayPaginatorBase.call(this, arrayCtrl);
	}, ArrayPaginatorBase, {
		getNumPages: function() {
			return -1; // For server side pagination, we do not know how many page there are
		},
		/**
		 * Returns number of rows for the current page
		 */
		getNumRowsPage: function() {
			return this._getDatasetNumRows();
		},
		/**
		 * Returns the row identified by the index
		 */
		getRowByIndex: function(index) {
			return this.arrayCtrl.arrayController.dataset.getRowByIndex(index);
		},
		/**
		 * $first, $previous, $next, $last
		 */
		paginate: function(direction) {
			if (!this.isEnabled(direction)) {
				return;
			}
			var $links = this._getLinks();
			var $link = $links[direction];
			if (!$link) {
				return;
			}
			this.arrayCtrl.notifyPaginationServer($link);
		},

		isEnabled: function(direction) {
			var $links = this._getLinks();
			return ($links && $links[direction]) != null;
		},

		_getLinks: function() {
			var pageDataset = this.arrayCtrl.arrayDataset.root;
			var $links = pageDataset.getLinks();
			return $links;
		}
	});

/**
 * 
 */
exports.ArrayPaginatorClient = utils.defineClass(
	function ArrayPaginatorServer(arrayCtrl, pageSize) {
		ArrayPaginatorBase.call(this, arrayCtrl);

		this.pageSize = pageSize;

		this.numPages = Math.ceil(this._getDatasetNumRows() / this.pageSize);
		this.indexShift = 0;
	}, ArrayPaginatorBase, {
		getNumPages: function() {
			return this.numPages;
		},
		/**
		 * Returns number of rows for the CURRENT page
		 */
		getNumRowsPage: function() {
			var countTotal = this._getDatasetNumRows();
			return Math.min(countTotal - this.indexShift, this.pageSize);
		},
		/**
		 * Returns the row identified by the index
		 */
		getRowByIndex: function(index) {
			return this.arrayCtrl.arrayController.dataset.getRowByIndex(index + this.indexShift);
		},
		/**
		 * $first, $previous, $next, $last
		 */
		paginate: function(direction) {
			if (!this.isEnabled(direction)) {
				return;
			}
			switch (direction) {
				case "$first":
					this.indexShift = 0;
					break;
				case "$previous":
					this.indexShift = this.indexShift - this.pageSize
					break;
				case "$next":
					this.indexShift = this.indexShift + this.pageSize
					break;
				case "$last":
					this.indexShift = this._getDatasetNumRows() - this.pageSize;
					break;
			}

			this.indexShift = Math.max(0, Math.min(this.indexShift, this._getDatasetNumRows() - 1));
			this.arrayCtrl.notifyPaginationLocal();
		},

		isEnabled: function(direction) {
			switch (direction) {
				case "$first":
				case "$previous":
					return this.indexShift > 0;
				case "$next":
				case "$last":
					return this.indexShift + this.pageSize < this._getDatasetNumRows();
			}
		}
	});