"use strict";

var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/wc/helpers/jsutils');
var globals = require('syracuse-tablet/html/js/wc/app/globals');
var locale = require('syracuse-tablet/html/js/wc/helpers/locale');
var Base = require('syracuse-tablet/html/js/wc/controls/array/builderChartBase').BuilderChartBase;
var notifications = require('syracuse-tablet/html/js/wc/helpers/notifications');


var _getHeight = function(h) {
	if (h === "xsmall") return 50;
	if (h === "small") return 100;
	if (h === "medium") return 200;
	if (h === "large") return 400;
	if (h === "xlarge") return 700;
	return 200;
};

/**
 * HIGHCHART BUILDER
 */
exports.BuilderChart = utils.defineClass(
	function builderChart(control) {
		Base.call(this, control);
	}, Base, {
		initReuseProperties: function() {
			Base.prototype.initReuseProperties.call(this);
			this.resetProps(false);
		},
		destroy: function() {
			Base.prototype.destroy.call(this);
			this._$$chartSlot = this._$$catchEvt = null;
		},
		buildHtml: function(arrayData, $$content, refresh) {
			var self = this
			Base.prototype.buildHtml.call(this, arrayData, $$content, refresh);
			var article = this.article;
			// sometimes we need the height - see chartNeedsHeight
			this._height = _getHeight(this.control.article.$chartHeight);
			this._$$chartSlot = $('<div class="s-m-slot"/>').appendTo($$content);
			this._setChartDataSet(arrayData)
			if (this.getChartDataSet().length > 0) {
				// Catch chart events
				this._$$catchEvt = $('<div class="s-m-catchevt"/>').appendTo($$content);
				this._$$catchEvt.hide();
				if (this.control.isOpenDetailEnabled()) {
					this.control.addChartDetailLink(this._$$catchEvt);
				}
			} else {
				var title = this.control.prototype.getValueByPath("$cube.$title");
				if (title) {
					$('<div class="s-m-no-data-title"/>').appendTo(this._$$chartSlot).text(title);
				}
				$('<div class="s-m-no-data-label"/>').appendTo(this._$$chartSlot).text(locale.text("label.chart.nodata"));
				this._$$chartSlot.css("position", "relative");
			}
			// Display chart only if parent's size is ok
			// Otherwise chart is build on buildOnResize (computeLayout)
			if (refresh == true) {
				this._displayChart(refresh);
			}
		},
		buildOnResize: function(arrayData, $$content, context) {
			if (!this.checkEmptyArray()) {
				return;
			}
			if (this._$$catchEvt) {
				if (this.control.isOpenDetailEnabled()) {
					this._$$catchEvt.show();
				} else {
					this._$$catchEvt.toggle(globals.isAuthoringActive())
				}
			}
			if (!$$content || !$$content.is(':visible')) {
				if (!this._subscribedExpand) {
					this._subscribedExpand = true;
					notifications.subscribe(this, ["sm.layout.expanded"]);
				}
			}
			if (this._layouytType == null) {
				// Needed here to access to all elements (getParentVignette)
				// We do that just once
				if (this.control.isDisplayedInDetailPage()) {
					// in that case the chart is displayed in a 'detail's page
					this._layouytType = "stack";
				} else if (this.control.page.isVignette() && this.control.page.parentVignette) {
					this._layouytType = jsutils.isInstanceOf(this.control.page.parentVignette.parent, "LayoutTile") ? "hub" : "stack";
				}
			}
			this._displayChart(false, true);
		},
		_checkHeaderHeight: function(height) {
			if (this.control.builderHeader == null) {
				return height;
			}
			var $$header = this.control.builderHeader.$$elmt;
			if (!$$header.is(":visible")) {
				return height;
			}
			var hh = $$header.height();
			var phh = $$header ? 2 : 0; //+2 to display bottom border (???)
			if (height == null) {
				var css = {
					top: hh + "px",
					height: (this.control.$$content.height() - hh - phh) + "px"
				};
				this._$$chartSlot.css(css);
				if (this._$$catchEvt) {
					this._$$catchEvt.css(css);
				}
			} else {
				height = height - hh - phh;
			}
			return height;
		},
		_displayChart: function(refresh, updtScroller) {
			var self = this;
			if (self.isDestroyed() || !self._$$chartSlot) {
				return;
			}
			// SetTimeout to improve UX when there are multiple charts to display (dashboard)
			setTimeout(function() {
				if (self.isDestroyed()) {
					return;
				}
				var stackPage, height;
				if (self._layouytType === "stack") {
					// relative is needed - set each time because aof refresh
					self._$$chartSlot.css("position", "relative");
					// in stack mode we need a height
					stackPage = self.control.page;
					if (self.control.isDisplayedInDetailPage()) {
						// Height set to device height
						height = stackPage.mainContentRect.height - 10;
					} else if (stackPage.isVignette() && stackPage.parentVignette) {
						stackPage = stackPage.parentVignette.page;
						// Height always less or equal than the device height
						height = Math.min(self._height, stackPage.mainContentRect.height - 10);
					} else {
						throw new Error("Unexpected chart page context");
					}
				} else {
					// Parent's height
					height = null;
				}
				height = self._checkHeaderHeight(height);
				self.createChart(self._settingsFromValue(), self._$$chartSlot, {
					height: height,
					// Parent's width
					width: null,
					onComplete: function() {}
				});
				if (updtScroller && stackPage) {
					// Needed to update the scroller
					stackPage.notifyScrollerUpdate()
				}
			}, 10);
		},
		getChartDataSet: function() {
			return this._dataset || [];
		},
		_setChartDataSet: function(arrayData) {
			var chartDataset = [];
			if (arrayData && arrayData.length > 0) {
				arrayData.forEach(function(rowData) {
					chartDataset.push(rowData.getData());
				});
			} //TODO Manage link (drilldown ...)
			this._dataset = chartDataset;
		},
		/**
		 * Returns the handler attached to the click event in the chart
		 */
		getChartClickHandler: function() {
			var self = this;
			return function() {
				var rowId = this.rowId;
				var level = self.level;
				var rowDataset = self.controller.dataset.childDatasets.$resources.getRowByUuid(rowId)
				self.controller.triggerDrillLevel(level, rowDataset)
				return true;
			};
		},
	});