"use strict";

var Base = require('syracuse-tablet/html/js/wc/controls/ctrlSdataBase').CtrlSdataBase;

var uiRect = require('syracuse-tablet/html/js/wc/ui/rect');
var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var justils = require('syracuse-tablet/html/js/wc/helpers/jsutils');
var environment = require('syracuse-tablet/html/js/wc/helpers/environment');
var Gadget = require('syracuse-tablet/html/js/wc/controls/vignette/gadget');
var locale = require('syracuse-tablet/html/js/wc/helpers/locale');

var navigationPageStack = require('syracuse-tablet/html/js/wc/app/navigationPageStack');

var modules = require('syracuse-tablet/html/js/wc/common/modules');

var _templates = {
	main: '\
			<section/>\
			<footer style="display:none"/> \
			<div class="s-m-waiting bckg" style="display:none"/> \
			<div class="s-m-waiting wheel" style="display:none"/> \
		',
	vignetteError: '\
			<a draggable="false" href="#" data-nevent="" data-naction="vignetteError">{{text}}</a><span style="display:none">{{detail}}</span>\
		',
	iframe: '\
			<br><iframe src="{{url}}" style="position: absolute; top: 0px; left: 0px; height: 100vh; width: 100vh;"/>\
		'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/**
 * 
 * The prototype of vignettes contains an $item node which includes all the gadgets information
 */
exports.CtrlVignette = utils.defineClass(
	function CtrlVignette(controller, article, prototype, options) {
		this.navigationPageStack = null;
		this.gadget = null;
		Base.call(this, controller, article, prototype, options);

		/* Parameter values passed to the dashboard so they can be used to filter the gadgets use for test only
		options.dashboardParameters = {
			"CODE": {
				value: "10"
			}
		};
    	*/
		this.gadget = Gadget.createGadget(this.prototype, options.dashboardParameters);
		if (!this.gadget) {
			// TODO: Throw breaks widget tree creation, would be better to render an "error vignette" here
			throw new Error("Cant' create vignette's gadget[" + this.id + "] - Check prototype")
		}
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this.navigationPageStack) {
				this.navigationPageStack.destroy(true);
			}
			this.navigationPageStack = null;
			if (this.gadget) {
				this.gadget.destroy();
			}
			this.gadget = null;
		},
		/**
		 */
		buildHtml: function() {
			Base.prototype.buildHtml.call(this, ["s-m-vignette"]);
			this.$$elmt.html(_getHtml("main", {}));
			this._$$content = this.$$elmt.children("section");
			this._$$footer = this.$$elmt.children("footer");
			this._$$waitBckg = this.$$elmt.children(".s-m-waiting.bckg");
		},

		afterRender: function() {
			var link = this.gadget.getLink();
			if (link) {
				switch (this.gadget.getType()) {
					case "$external":
						var iFrame = _getHtml("iframe", {
							url: link.$url
						});
						$(iFrame).appendTo(this._$$content);
						break;
					case "$representation":
					case "$stats":
					case "$request":
						this.loadSDataPage(link);
						break;
				}
			} else {
				this._displayError("No Gadget link");
			}
		},

		loadSDataPage: function(link) {
			var self = this;
			var options = {
				// Tell the page it's loaded in a vignette
				isVignette: true,
				makeFullHeight: true,
				// Force page's article if any
				$vignetteArticle: this.article && this.article.$article && !$.isEmptyObject(this.article.$article) ? this.article.$article : null
			};
			self.navigationPageStack = navigationPageStack.getStackForElmt(self._$$content);
			var loadOptions = {
				navStack: self.navigationPageStack,
				noError: true,
				$$waitParent: self.$$elmt
			}
			self.controller.openLink(link, options, loadOptions)
				.then(function(nestedPage) {
					if (self.destroyed) {
						return;
					}
					nestedPage.parentPage = self.page;
					nestedPage.parentVignette = self;
					self.page.onVignetteLoaded(self, true);
					if (environment.isAutoUITestMode()) {
						environment.getUnitTestMgr().notifPageLoaded("after", nestedPage);
					}

				})
				.fail(function(e) {
					if (self.destroyed) {
						return;
					}
					self._displayError(e);
					self.page.onVignetteLoaded(self, false);
				});
		},

		/**
		 * Call once all vignettes have been loaded
		 * Parent's size is OK -> Can computeLayout
		 */
		afterAllVignettesLoaded: function() {
			try {
				if (this.destroyed) {
					return;
				}
				this.computeLayout();
			} catch (e) {
				this._displayError(e);
			}
		},

		computeLayout: function() {
			if (this.navigationPageStack && !this.navigationPageStack.isEmpty()) {
				// computLayout layout is called by parent dashboard once the all the vignettes has been loaded
				// In particular charts need the calculated size of the parent to render
				this.navigationPageStack.getTopPage().computeLayout();
			}
		},

		_displayError: function(e) {
			if (!this.$$elmt) {
				return;
			}
			var diag = justils.convertToDiagnoses(e);
			if (!this.$$elmt.is(".s-m-error")) {
				this.$$elmt.addClass("s-m-error");
				this.$$elmt.prepend(_getHtml("vignetteError", {
					text: locale.text("vignette.load.failed"),
					detail: JSON.stringify(diag)
				}));
			} else {
				// Append to existing diagnose
				try {
					var currentDiag = JSON.parse(this.$$elmt.find("span").text());
					currentDiag.$diagnoses = currentDiag.$diagnoses.concat(diag.$diagnoses);
					this.$$elmt.find("span").text(JSON.stringify(currentDiag))
				} catch (e) {
					return;
				}
			}
		},

		_actVignetteError: function() {
			var diag = this.$$elmt.find("span").text();
			try {
				diag = JSON.parse(diag);
			} catch (e) {
				return;
			}
			modules.get("modal").asynchError(null, diag);
		},

		getTopPage: function() {
			return this.navigationPageStack && this.navigationPageStack.getTopPage();
		},
		isVignette: function() {
			return true;
		},
		getScrollViewRect: function() {
			return uiRect.elmtRect(this._$$content, "inner");
		}
	});