"use strict";

var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var globals = require('syracuse-tablet/html/js/wc/app/globals');

var prototype = require('syracuse-tablet/html/js/wc/sdata/prototype');
var Base = require('syracuse-tablet/html/js/wc/controls/ctrlBase').CtrlBase;
var uiSettings = require('syracuse-tablet/html/js/wc/ui/uiSettings');
var notifications = require('syracuse-tablet/html/js/wc/helpers/notifications');


var _actions = [{
	params: "arrayOnly",
	icon: "fa fa-table",
	enabled: true,
	selected: "",
}, {
	params: "chartOnly",
	icon: "fa fa-bar-chart",
	enabled: true,
	selected: "",
}, {
	params: "bothSideToSide",
	icon: "fa fa-columns",
	enabled: true,
	selected: "",
}];
var _chartStyle = [{
	params: "column",
	icon: "fa fa-bar-chart",
	enabled: true,
	selected: "",
}, {
	params: "bar",
	icon: "fa fa-bar-chart fa-rotate-90",
	enabled: true,
	selected: "",
}, {
	params: "area",
	icon: "fa fa-area-chart",
	enabled: true,
	selected: "",
}, {
	params: "line",
	icon: "fa fa-line-chart",
	enabled: true,
	selected: "",
}, {
	params: "pie",
	icon: "fa fa-pie-chart",
	enabled: true,
	selected: "",
}];
var _templates = {
	toolbar: '\
		<div class="btn-toolbar" role="toolbar">\
			<div class="btn-group">\
				{{#each actions}}\
					{{#if enabled}}\
					<button type="button" class="btn btn-default {{selected}}" data-nevent data-naction="toolbar" data-params="{{params}}"><span class="{{icon}}"></span></button>\
					{{/if}}\
				{{/each}}\
		    </div>\
			<div class="btn-group chartstyles">\
				{{#each chartStyle}}\
					{{#if enabled}}\
					<button type="button" class="btn btn-default {{selected}}" data-nevent data-naction="chartstyle" data-params="{{params}}"><span class="{{icon}}"></span></button>\
					{{/if}}\
				{{/each}}\
		    </div>\
	    </div>'

};
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	if (!tmpl) alert("template " + name + " not found");
	return tmpl(ctx);
};


/**
 * chartDetail Tool bar
 */

exports.ChartDetailToolBar = utils.defineClass(
	function(controller, $type, article, options) {
		Base.call(this, controller, $type, article, options);
	}, Base, {
		buildHtml: function() {
			this._height = this.getDesiredHeight();
			var measureCount = this._getChartMeasureCount();
			var chartSettings = this.controller.uiAdapter.getChartDetailSetting() || {};
			var articles = this.controller.uiAdapter.getArticles(this.controller.uiAdapter.pageData.page.$article);
			var showActionBar = articles.arrayChartArticle && articles.arrayArticle;
			var showStyleBar = articles.arrayChartArticle != undefined;
			_chartStyle.forEach(function(itm) {
				itm.enabled = showStyleBar;
				itm.selected = "";
				if (itm.params == "pie") {
					itm.enabled = (measureCount == 1);
				}
				if (chartSettings.display === "arrayOnly") {
					itm.enabled = false
				}
				if (itm.params === chartSettings.style) {
					itm.selected = "s-m-selected"
				}
			});
			_actions.forEach(function(itm) {
				itm.enabled = showActionBar;
				itm.selected = ""
				if (itm.params === chartSettings.display) {
					itm.selected = "s-m-selected"
				}
			})
			this.createRootElement(["s-m-panel", "s-m-control", "s-m-ctrl", "toolbar"]);
			this.$$elmt.append($(_getHtml('toolbar', {
				ctrlId: this.id,
				actions: _actions,
				chartStyle: _chartStyle
			})));
			this.$$container.show();
		},
		computeLayout: function(layoutInfo) {
			if (!this.$$container) {
				return;
			}
			this.$$container.css({
				top: this.top + "px",
				width: layoutInfo.application.width + "px",
				height: this._height
			});
		},
		_getChartMeasureCount: function() {
			var chart = this.controller.getChart();
			if (!chart) return 0;
			var count = chart.prototype.chartGetNbMeasures();
			var $seriesOptions = chart.article.$seriesOptions;
			if (!$seriesOptions) return count;
			Object.keys($seriesOptions).forEach(function(key) {
				if ($seriesOptions[key].isHidden) {
					count--;
				}
			});
			return count;
		},
		getDesiredHeight: function() {
			return uiSettings.getProp("chartDetailToolbar.height");
		},
		getHeight: function() {
			return this.$$elmt.is(":visible") ? this._height : 0;
		},
		//
		// END: Rendering
		//
		setTop: function(top) {
			this.top = top;
		},
		_actToolbar: function(display) {
			if ($(".btn[data-params='" + display + "']", this.$$elmt).is(".s-m-selected")) return;
			this.controller.actChartToolbarSetDisplay({
				"display": display
			});
		},
		_actChartstyle: function(chartType) {
			if ($(".btn[data-params='" + chartType + "']", this.$$elmt).is(".s-m-selected")) return;
			this.controller.actChartToolbarSetDisplay({
				"style": chartType
			});
		}
	});