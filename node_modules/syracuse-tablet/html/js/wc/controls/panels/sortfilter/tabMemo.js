"use strict";

var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/wc/helpers/jsutils');
var Base = require('syracuse-tablet/html/js/wc/controls/panels/sortfilter/tabBase').TabBase;
var fontUtils = require('syracuse-tablet/html/js/wc/ui/fontUtils');
var locale = require('syracuse-tablet/html/js/wc/helpers/locale');
var modules = require('syracuse-tablet/html/js/wc/common/modules');

var _templates = {
	main: '\
		<div id="memotabroot" class="s-m-scroll-wrapper" style="height:100%">\
			<div  class="s-m-scroll-elmt">\
				<ul class="list-group"/>\
			</div>\
		</div>',
	items: '\
		{{#each items}}\
			<li class="list-group-item" data-params="{{@index}}">\
				<span class="s-m-memo-info"><a draggable="false" href="#" data-params="click">{{title}}</a>\
				<div style="display:none" class="s-m-value edit"><input class="s-m-meta form-control" type="text" value="{{title}}"></div>\
				</span>\
				<span class="s-m-memo ' + fontUtils.filterIcon("edit") + '" data-params="edit"></span>\
				<span class="s-m-memo ' + fontUtils.filterIcon("delete") + '" data-params="delete"></span>\
			</li>\
		{{/each}}',
	/** Add this line to add the remove icon
	 * <span class="s-m-order ' + fontUtils.sortIcon("none") + ' " data-params="none"></span>
	 */
};


var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};
/**
 * Sort tab
 */
exports.TabMemo = utils.defineClass(
	function TabMemo(panel, id, options) {
		options = options || {};
		options.hidden = false;
		Base.call(this, panel, id, options);
		this.currentSelection = null;

		var prefs = this.panel.getPagePrefs();
		this.favorites = prefs.favorites || [];
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			this.$$edit = null;
			this.$$display = null;
			this.currentSelection = null;
		},
		buildHtml: function() {
			this.$$content.append($(_getHtml("main", {})));
			this.$$list = this.$$content.find("ul.list-group");
			this.$$list.css({
				height: "auto",
				position: "relative"
			});
			this.$$list.on('blur', "input", jsutils.bindFn(this.onBlur, this));
		},
		/**
		 * We remove the content on close to cancel modifications
		 */
		notifyClosePanel: function() {
			Base.prototype.notifyClosePanel.call(this);
			if (this.$$items) {
				this.$$items.remove();
				this.$$items = null;
			}
		},
		/**
		 * Tab becomes Active - we create content
		 */
		doTabShow: function() {
			Base.prototype.doTabShow.call(this);
			this._render();
			this._setButtonsState();
		},
		_setButtonsState: function() {
			this.panel.setButtonsState(false, this.currentSelection != null); //currentSelection could be undefined
		},
		_render: function() {
			if (this.$$items) this.$$items.remove();
			// We clone to keep a different copy from array one		
			this.$$items = $(_getHtml("items", {
				items: this.favorites,
			}));
			this.$$list.append(this.$$items);
			if (this.currentSelection != null) this._selectCurrent(this.currentSelection);
			this.updateGesture();
		},
		doContentAction: function(evt, $$target, dataParams) {
			if (!dataParams) return;
			switch (dataParams) {
				case "delete":
					var idx = $$target.closest("li").index();
					this._onMemoDelete(idx);
					break;
				case "edit":
					this._openMemoEdit($$target.closest("li"));
					break;
				case "click":
					var idx = $$target.closest("li").index();
					this._onMemoClick(idx);
					break;
				default:
					return;
			}
		},
		_onMemoDelete: function(idx) {
			var self = this;
			self._unSelectCurrent();
			self.favorites.splice(idx, 1);
			self.saveFavorites().then(function() {
				self._render();
			});

		},
		_openMemoEdit: function(li) {
			this.$$edit = $(li).find(".s-m-value.edit");
			this.$$display = $(li).find("a");
			this._setEditMode();

		},
		_onMemoClick: function(idx) {
			if (idx != this.currentSelection) {
				this._unSelectCurrent();
			};
			this._selectCurrent(idx);
		},
		_unSelectCurrent: function() {
			this.$$list.find(".selected").toggleClass("selected");
			this.currentSelection = null;
			this._setButtonsState();
		},
		_selectCurrent: function(idx) {
			this.currentSelection = idx;
			this.$$list.find("[data-params='" + this.currentSelection + "']").toggleClass("selected");
			this._setButtonsState();
		},
		onBlur: function() {
			var self = this;
			self._updateValue().then(function() {
				self._setDisplayMode();
			});
		},
		_setDisplayMode: function() {
			this.$$edit.toggle(false);
			this.$$display.toggle(true);
			this.$$edit = null;
			this.$$display = null;
		},
		_setEditMode: function() {
			this._unSelectCurrent();
			this.$$edit.toggle(true);
			this.$$display.toggle(false);
			this.$$edit.children().focus();
			this.$$edit.children().select();
		},
		_updateValue: function() {
			var idx = this.$$display.closest("li").index();
			var value = this.$$edit.children().val();
			this.$$display.text(value);
			this.favorites[idx].title = value;
			return this.saveFavorites().then(function() {
				return true
			});
		},
		doActionApply: function() {
			if (this.currentSelection !== null) {
				var fav = this.favorites[this.currentSelection];
				if (fav) {
					this.panel.sortInfoSet($.extend(true, [], fav.sort), false);
					this.panel.filterInfoSet($.extend(true, [], fav.filter), true);
				}
			}
			return $.smResolve(true);
		},
		addFavorite: function(favData) {
			if (!favData) {
				return $.smResolve();
			}
			this.favorites.push(favData);

			return this.saveFavorites()
				.then(function() {
					var notify = {
						severityClass: "success",
						title: favData.title,
						body: locale.text("panels.array.memo.created"),
						onlyWebapp: true
					};
					modules.get("modal").notify(notify);
				});

		},
		saveFavorites: function() {
			var prefs = this.panel.getPagePrefs();
			prefs.favorites = this.favorites;
			prefs.isDirty = true;
			return this.panel.savePagePrefs().then(function() {
				return true
			});
		}
	});