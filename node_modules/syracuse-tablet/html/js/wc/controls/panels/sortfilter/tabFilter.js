"use strict";

var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var Base = require('syracuse-tablet/html/js/wc/controls/panels/sortfilter/tabBase').TabBase;
var FilterEdit = require('syracuse-tablet/html/js/wc/controls/panels/sortfilter/tabFilterEdit').TabFilterEdit;
var fontUtils = require('syracuse-tablet/html/js/wc/ui/fontUtils');
var locale = require('syracuse-tablet/html/js/wc/helpers/locale');
var modules = require('syracuse-tablet/html/js/wc/common/modules');

var _templates = {
	main: '\
		<div class="s-m-scroll-wrapper" style="height:100%">\
			<div  class="s-m-scroll-elmt">\
				<section id="filterlist">\
				</section>\
				<section id="filteredit">\
				</section>\
			</div>\
		</div>',
	filterList: '\
		<div id="filterListEmpty" style="display:none">\
			{{emptyList}}\
		</div>\
		<ul class="list-group"/>\
		<div class="btn-group btn-group-justified" role="group">\
			<a type="button" class="btn btn-default" data-params="addFilter">\
				<i class="fa fa-plus" data-params="addFilter"></i>\
			</a>\
		</div>',
	items: '\
		{{#each items}}\
			{{#unless  @first }}\
			<span class="s-m-filter-separator ' + fontUtils.filterIcon("separator") + '" ></span>\
			{{/unless}}\
			<li class="list-group-item" data-params="{{id}}">\
				<span class="s-m-filter-info"> \
					<span class="s-m-filter-field">{{fieldName}}</span>\
					<span class="s-m-filter-operator">{{operatorLabel}}</span>\
					<span class="s-m-filter-value">{{value}}</span>\
				</span>\
				<span class="s-m-filter ' + fontUtils.filterIcon("edit") + '" data-params="edit,{{@index}}"></span>\
				<span class="s-m-filter ' + fontUtils.filterIcon("delete") + '" data-params="delete,{{@index}}"></span>\
			</li>\
		{{/each}}'
};


var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/**
 * Filter tab
 */
exports.TabFilter = utils.defineClass(
	function TabFilter(panel, id, options) {
		Base.call(this, panel, id, options);
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this.filterEdit) {
				this.filterEdit.destroy();
				this.filterEdit = null;
			}
			this.filterInfo = null;
			this.$$listSectio = null;
			this.$$list = null;
			this.$$editSection = null;
		},
		buildHtml: function() {
			this.$$content.append($(_getHtml("main", {})));
			this.$$editSection = this.$$content.find("#filteredit");
			this.$$listSection = this.$$content.find("#filterlist");
			$(_getHtml("filterList", {
				addFilter: locale.text("panels.array.addFilter"),
				emptyList: locale.text("panels.array.emptyList")
			})).appendTo(this.$$listSection);
			this.$$list = this.$$listSection.find(".list-group");
			this.$$emptyList = this.$$content.find("#filterListEmpty");
		},
		/**
		 * Tab becomes Active - we create content
		 */
		doTabShow: function() {
			if (this.initOpened) return;
			this.updateFilterList();
			this.initOpened = true;
		},
		/**
		 * Update filter list . If no filter set, display no filter information
		 **/
		updateFilterList: function(list) {
			// We clone to keep a different copy from array one
			this.filterInfo = list || (this.filterInfo && this.filterInfo.length > 0) ? this.filterInfo : $.extend(true, [], this.panel.filterInfoGet());
			this.$$emptyList.toggle(false);
			// clean current list
			this.$$list.empty();
			if (this.filterInfo && this.filterInfo.length > 0) {
				// append list
				var $$items = $(_getHtml("items", {
					items: this.filterInfo
				}));
				this.$$list.append($$items);
			} else {
				// no filter set
				this.$$emptyList.toggle(true);
			}
			this.updateGesture();
		},
		/**
		 * Save sort info
		 */
		doActionApply: function() {
			this.panel.filterInfoSet($.extend(true, [], this.filterInfo), true);
			return this.panel.savePagePrefs().then(function() {
				return true;
			}).fail(function(error) {
				modules.get("modal").error(error);
			});
		},
		getFavoritesData: function() {
			return $.extend(true, [], this.filterInfo);
		},
		/**
		 * Click on an element with data-param - edit delete...
		 */
		doContentAction: function(evt, $$target, dataParams) {
			if (!dataParams) return;
			var params = dataParams.split(",");
			switch (params[0]) {
				case "addFilter":
					this._openFilterEdit();
					break;
				case "cancelFilterEdit":
					this.filterEdit.onCancelEdit();
					break;
				case "submitFilterEdit":
					this.filterEdit.onFilterEditSubmit();
					break;
				case "delete":
					var idx = params[1];
					this._onFilterDelete(idx);
					break;
				case "edit":
					var idx = params[1];
					this._openFilterEdit(idx);
					break;
				default:
					return;
			}
		},
		/*
		 *	When user deletes one filter in filter list
		 */
		_onFilterDelete: function(idx) {
			if (this._isIndexValid(idx)) {
				this._removeFilter(idx);
				// argument this.fileterInfo when call updateFilterList to avoid get list from cache.
				this.updateFilterList(this.filterInfo);
			}
		},
		/*
		* Adds new filter info
		* {
			fieldName: "field name",
			operator: "selected operator label",
			value: "filtering value"
		}
		*/
		_addFilter: function(newFilterInfo) {
			this.filterInfo.push(newFilterInfo);
		},
		/*
		 * Remove filter
		 */
		_removeFilter: function(idx) {
			if (this._isIndexValid(idx)) {
				this.filterInfo.splice(idx, 1);
			}
		},
		/*
		 * Update filter
		 */
		_updateFilter: function(idx, updateFilterInfo) {
			if (this._isIndexValid(idx)) {
				this.filterInfo.splice(idx, 1, updateFilterInfo);
			}
		},
		/*
		 * If user cancels filter edit, hide form and show filters list
		 */
		_onCancelEdit: function() {
			this.$$editSection.empty();
			this.$$listSection.toggle(true);
		},
		/*Build filter set/add form */
		_openFilterEdit: function(filterIdx) {
			// get filter edit object
			this.filterEdit = this.filterEdit || new FilterEdit(this);

			// set init data
			if (this._isIndexValid(filterIdx)) {
				this.filterEdit.setInitData(this.filterInfo[filterIdx], filterIdx);
			}

			// create filter edit content
			this.filterEdit.create(this.$$editSection);

			// hide filter list
			this.toggleList(false);

		},
		_isIndexValid: function(idx) {
			return !isNaN(parseInt(idx, 10)) && idx >= 0;
		},
		onFilterUpdate: function(filterInfo, filterIdx) {
			if (this._isIndexValid(filterIdx)) {
				this._updateFilter(filterIdx, filterInfo);
			} else {
				this._addFilter(filterInfo);
			}

			// update list
			this.updateFilterList();

			// show list
			this.toggleList(true);
		},
		toggleList: function(show) {
			this.$$listSection.toggle(show);
			if (this.filterEdit) {
				this.filterEdit.$$content.toggle(!show);
			}
		}
	});