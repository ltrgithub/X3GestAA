"use strict";

var Base = require('syracuse-tablet/html/js/wc/controls/panels/footer/panelFooterSdataPageTablet').PanelFooterSdataPageTablet;
var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var locale = require('syracuse-tablet/html/js/wc/helpers/locale');
/**
 * 
 */
exports.PanelFooterMultiselTablet = utils.defineClass(
	function PanelFooterSdataPageTablet(controller, type, article, opts) {
		Base.call(this, controller, type, article, opts);
		this._nbSelected = 0;
		this._array = null;
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
			this._array = null;
		},
		buildHtml: function() {
			Base.prototype.buildHtml.call(this);
			this.$$elmt.addClass("multiSelection");
		},
		/**
		 * Override _getItems
		 */
		_getItems: function() {
			return this.actionAdapter.getMultiSelectionItems();
		},
		/**
		 * Invoked when user click on multiSelection action
		 */
		multiSelToggleStatus: function(enabled, array) {
			this._array = enabled ? array : null;
			this._nbRecords = enabled ? array.getNbRecords() : 0;
			this._nbSelected = 0;
			if (enabled !== true) {
				this._actMultiSelActions("$showunselected")
				this._actMultiSelActions("$unselectall")
			}
			this._multiSelUpdateStatus(0);
		},
		/**
		 * Invoked when user click on card/row
		 */
		multiSelToggleRecord: function($$elmt) {
			if (this._multiSelAction("$showunselected").css("display") !== "none") {
				// Disables hideUnselected
				this._actMultiSelActions("$showunselected");
			}
			$$elmt.toggleClass("s-m-multi-selected");
			this._nbSelected = Math.max(0, this._nbSelected + ($$elmt.is(".s-m-multi-selected") ? 1 : -1));
			this._multiSelUpdateStatus();
			return true;
		},
		/**
		 * Update the status of the actions
		 */
		_multiSelUpdateStatus: function() {
			this.$$elmt.find('a.s-m-link:not([data-menuitem-id="multiSelToggle"])').toggleClass("disabled", this._nbSelected == 0);
			var $$menuActions = this.$$elmt.find("#multiSelMenuActions");
			$$menuActions.find(".badge").text(this._nbSelected);
			$$menuActions.find(".title").text(locale.text(this._nbSelected > 1 ? "multiselect.selected.plural" : "multiselect.selected"));
			this._multiSelAction("$hideunselected").toggle(this._nbSelected != 0 && this._nbSelected != this._nbRecords);
			this._multiSelAction("$selectall").toggle(this._nbSelected != this._nbRecords);
			this._multiSelAction("$unselectall", "$invert", "$download").toggle(this._nbSelected > 0);
		},
		/**
		 * Returns unselected records
		 */
		_multiSelUnselected: function() {
			return this.page.$$contentElmt.find(".s-m-array.s-m-control > .s-m-value .s-m-record:not(.s-m-multi-selected)");
		},
		/**
		 * Returns selected records
		 */
		_multiSelSelected: function() {
			return this.page.$$contentElmt.find(".s-m-array.s-m-control > .s-m-value .s-m-record.s-m-multi-selected");
		},
		/**
		 * Returns all the records
		 */
		_multiSelAll: function() {
			return this.page.$$contentElmt.find(".s-m-array.s-m-control > .s-m-value .s-m-record");
		},
		/**
		 * argument is the list of actions id
		 * Returns the array of $elements
		 */
		_multiSelAction: function() {
			var res = $();
			var args = arguments;
			this.$$elmt.find('#multiSelMenuActions a[data-params]').each(function(id) {
				var param = $(this).attr("data-params")
				if (Array.prototype.indexOf.apply(args, [param]) >= 0) {
					res.push(this)
				}
			})
			return res;
		},
		/**
		 * Toggle the status of all unselected elements
		 */
		_multiSelToggleUnselected: function(show) {
			this._multiSelUnselected().toggle(show);
			if (this.page.$$contentElmt.find(".s-m-array.s-m-card").length > 0) {
				// Hide empty rows to remove the height of empty tr elements
				this.page.$$contentElmt.find(".s-m-array.s-m-card tr").each(function() {
					var e = $(this);
					e.toggle(show ? show : e.find("td").length != e.find("td.s-m-record:not(:visible)").length);
				});
				// To improve - Update scroller after having hidden the empty rows
				this._array.builderContent.updateGestureMgr();
			}
		},
		/**
		 * Toggle the status 'select' of the elements given by elmtList
		 */
		_multiSelToggleListStatus: function(elmtList, select) {
			var selected = elmtList.toggleClass("s-m-multi-selected", select);
			if (!selected.is(".s-m-multi-selected")) {
				selected = []
			}
			this._nbSelected = this._multiSelSelected().length;
			this._multiSelUpdateStatus();
		},
		/**
		 * Process multi-selection action (drop down list menu)
		 */
		_actMultiSelActions: function(params) {
			if (params == "$unselectall") {
				this._multiSelToggleUnselected(true);
				this._multiSelToggleListStatus(this._multiSelSelected(), false);
				return;
			}
			if (params == "$selectall") {
				this._multiSelToggleUnselected(true);
				this._multiSelToggleListStatus(this._multiSelUnselected(), true);
				this._multiSelUpdateStatus();
				return;
			}
			if (params == "$invert") {
				var unselected = this._multiSelUnselected();
				var selected = this._multiSelSelected();
				this._multiSelToggleListStatus(unselected, true);
				this._multiSelToggleListStatus(selected, false);
				return;
			}
			if (params === "$hideunselected" || params === "$showunselected") {
				var hideUnselected = params === "$hideunselected";
				this._multiSelToggleUnselected(!hideUnselected);
				this._multiSelAction("$hideunselected", "$selectall", "$unselectall", "$invert").toggle(!hideUnselected);
				this._multiSelAction("$showunselected").toggle(hideUnselected);
				return;
			}
		}
	});