"use strict";

var Base = require('syracuse-tablet/html/js/wc/controls/panels/panelSdataPage').PanelSdataPage;

var formatApi = require('syracuse-tablet/html/js/wc/helpers/formatApi');
var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var uiSettings = require('syracuse-tablet/html/js/wc/ui/uiSettings');
var notifications = require('syracuse-tablet/html/js/wc/helpers/notifications');
var modules = require('syracuse-tablet/html/js/wc/common/modules');
var locale = require('syracuse-tablet/html/js/wc/helpers/locale');
/**
 * 
 */
exports.PanelHeaderSdataPageBase = utils.defineClass(
	function PanelHeaderSdataPageBase(controller, type, article, opts) {
		Base.call(this, controller, type, article, opts);
		notifications.subscribe(this, ["sm.data.freshness.change"]);
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
			notifications.unsubscribe(this, ["sm.data.freshness.change"]);
		},

		///
		/// START: Rendering
		///

		/**
		 * 
		 */
		buildHtml: function() {
			this.$$container.css({
				left: 0 + "px",
				height: this.getDesiredHeight() + "px"
			});

			Base.prototype.buildHtml.call(this);
			this.$$elmt.addClass("header");
			this.$$elmt.css({
				left: 0 + "px",
				height: this._height + "px"
			});
			this.$$container.show();
		},

		/**
		 * 
		 */
		computeLayout: function(context) {
			if (!this.$$container) {
				return;
			}
			var layoutInfo = modules.get("siteLayout").getLayoutInfo();
			this.$$container.css({
				top: this.top + "px",
				width: layoutInfo.application.width + "px",
			});
		},
		///
		/// END: Rendering
		///

		/*
		 * Use by smartphone and tablet to get default information shown in the header
		 */
		getHeaderCtx: function() {
			return {
				title: this.actionAdapter.getPageTitle()
			};
		},
		_updateWidth: function() {
			return;
			var $$header = this.$$elmt.find(".s-m-header");
			if (!$$header) {
				return;
			}
			var $$label = this.$$elmt.find(".s-m-header-labels");
			var $$freshness = this.$$elmt.find(".s-m-freshness");
			var freshVisible = $$freshness && $$freshness.is(":visible");
			if (freshVisible) {
				// We need to hide $$freshness to calculate the width
				// $$freshness is positioned in absolute and is dispayed over the header
				$$freshness.hide();
			}

			var width;
			var maxWidth = this.$$elmt.width();
			var fullWidth = 0;
			var $$nav;
			$$header.children().each(function() {
				$$nav = $(this);
				if (!$$nav.is(".s-m-header-labels")) {
					width = 0;
					$$nav.children().each(function(idx) {
						var c = $(this).outerWidth() + 1;
						width += c;
					});
					// Width=with or remaining with or zero
					width = Math.min(Math.max(maxWidth - fullWidth, 0), width);
					fullWidth += width;
					$$nav.width(width);
				}
			});
			$$label.width("auto");
			if (freshVisible) {
				$$freshness.show();
			}
		},
		getDesiredHeight: function() {
			return uiSettings.getProp("header.height");
		},
		setTop: function(top) {
			this.top = top;
		},
		notifDataFreshnessChange: function(dataFreshness) {
			this._dataFreshness = dataFreshness;
			this._$$freshness = $(".s-m-freshness", this.$elmt);
			this._$$freshness.removeClass("s-m-fresh s-m-tainted s-m-verytainted");
			this._$$freshness.addClass("s-m-" + this._dataFreshness.level);
			this._$$freshness.show();
		},

		/**
		 * Displays freshness info
		 */
		_actShowFreshness: function() {
			if (!this._dataFreshness) return;
			var formatter = formatApi.getFormatter("application/x-datetime");
			var dateTime = formatter.formatValue(utils.getCurISODateTime(new Date(this._dataFreshness.dateTime)), false);

			var notify = {
				severityClass: this._dataFreshness.level,
				title: locale.text("page.data.freshness.last") + " : " + dateTime,
				body: locale.text("page.data.freshness." + this._dataFreshness.level),
				onlyWebapp: true
			};
			modules.get("modal").notify(notify);
		},
	});