"use strict";

var Base = require('syracuse-tablet/html/js/wc/controls/layouts/layoutBase').LayoutBase;

var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/wc/ui/uiUtils');
var uiSettings = require('syracuse-tablet/html/js/wc/ui/uiSettings');

var _sizes = [{
	$prop: "$widthXs",
	$prefix: "col-xs-",
	$def: 12
}, {
	$prop: "$widthSm",
	$prefix: "col-sm-",
	$def: 6
}, {
	$prop: "$widthMd",
	$prefix: "col-md-",
	$def: 4
}, {
	$prop: "$widthLg",
	$prefix: "col-lg-",
	$def: 3
}];

exports.LayoutCell = utils.defineClass(function LayoutCell(controller, type, article, opts) {
	Base.call(this, controller, type, article, opts);
	// Set the default color - Forced to be modified by authoring
	if (article.$bgColor == null) {
		article.$bgColor = uiSettings.getProp("colors.CELLDEFCOLOR");
	}
	article.$bgColor = article.$bgColor.toLowerCase();
}, Base, {
	buildHtml: function() {
		Base.prototype.buildHtml.call(this);

		this.$$elmt.addClass("s-m-cell");
		this.$$cell = $(uiUtils.createDomElement("div", ["cell"], null, null, this.$$elmt));

		this._setCellColorClass();
		this._setCellSizeClasses();

		this.buildChildrenHtml();
	},
	getChild$$Container: function() {
		return this.$$cell;
	},
	_setCellColorClass: function() {
		var bg = this.article.$bgColor;
		if (bg === "transparent" || bg.length === 0) {
			// No color if bg == "" or transparent color for compatibility
			return;
		}
		this.$$cell.addClass("s-m-bg s-m-color-" + bg);
	},
	_setCellSizeClasses: function() {
		var self = this;
		if (self.article.$sameSize !== true) {
			var widthFound = false;
			var sizes = [],
				sz;
			_sizes.forEach(function(size) {
				sz = self.article[size.$prop];
				if (sz != null && sz >= 1 && sz <= 12) {
					sizes.push(size.$prefix + sz);
				};
			});
			if (sizes.length == 0) {
				self.article.$sameSize = true;
				self.article.$widthAll = 12;
			}
		}
		if (self.article.$sameSize === true) {
			if (self.article.$widthAll == null) self.article.$widthAll = 12;
			sizes = ["col-xs-" + Math.min(12, Math.max(1, self.article.$widthAll), self.article.$widthAll)];
		}
		self.$$elmt.addClass(sizes.join(" "));
	},
	_ensureHeader: function() {
		// header is created under $$cell - used by vignette to display icon on/off like in tiles
		return Base.prototype._ensureHeader.call(this, this.$$cell);
	},
	/**
	 * Used to adapt the behavior according to the kind of hhosted array
	 * typeArray: chart/carousel
	 * Chart:
	 * 	remove the default color for charts
	 * 	Hack: Done by programming since we don't manage default color by css
	 * 	Add s-m-chart to tune display fo these tiles by css
	 * Carousel:
	 * 	Remove fixed height
	 */
	notifSpecialArrayHosted: function(typeArray) {
		if (!this.$$cell) return;
		if (typeArray === "chart") {
			this.$$cell.removeClass("s-m-bg s-m-color-" + this.article.$bgColor);
			this.$$elmt.addClass("s-m-chart");
		} else if (typeArray === "carousel") {
			this.$$elmt.addClass("s-m-carousel");
		}
	}
});