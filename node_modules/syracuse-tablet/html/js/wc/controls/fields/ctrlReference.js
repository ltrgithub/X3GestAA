"use strict";

var Base = require('syracuse-tablet/html/js/wc/controls/fields/ctrlFieldBase').CtrlFieldBase;

var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var globals = require('syracuse-tablet/html/js/wc/app/globals');
var uiUtils = require('syracuse-tablet/html/js/wc/ui/uiUtils');
var fontUtils = require('syracuse-tablet/html/js/wc/ui/fontUtils');

/**
 * 
 * 
 * Rendering:
 * Inputfield: ok
 * 
 * MetaData:
 * $isReadOnly: ok 
 * $isDisabled: ok
 * $isHidden: ok
 * 
 */
exports.CtrlReference = utils.defineClass(
	function CtrlReference(controller, article, prototype, options) {
		// See ctrlQuantity - Control that displays the unit
		this.isUnit = options.isUnit === true;

		options.nativeCapabilities = {
			"scanBarcode": !this.isUnit
		};

		Base.call(this, controller, article, prototype, options);
		if (this.isUnit) {
			this.$isEditMode = false;
			this.cssType = "s-m-unit";
		} else {
			this.cssType = "s-m-ref";
		}

		this._isNumeric = false;
	}, Base, {
		initFormatter: function() {
			var type = this.prototype.getFieldValueType(this.$bind);
			if (type == null || type.length === 0) return null;
			return Base.prototype.initFormatter.call(this, type, null);
		},
		getValue: function(prop) {
			var val = this.getObjectValue()[prop || "$value"];
			return val == null ? "" : val;
		},

		/**
		 * return {$value, $title, $descr}
		 */
		getObjectValue: function() {
			var val = Base.prototype.getValue.call(this);
			if (val === null || typeof val !== "object") {
				// Unexpected
				val = {
					$value: val
				};
			}
			if (!val.$description) {
				val.$description = "";
			}
			if (!val.$title) {
				val.$title = "";
			}
			return val;
		},

		/**
		 * 
		 */
		buildFieldTitle: function() {
			if (this.isUnit) {
				return;
			}
			Base.prototype.buildFieldTitle.call(this);
		},

		/**
		 * 
		 */
		buildFieldValue: function() {
			var self = this;
			this._ensure$$value();
			this._clear$$value();
			if (self.formatter && self.formatter.$type === "application/x-integer") {
				self.$$value.addClass("s-m-numeric");
			}
			if (self.$isEditMode) {
				self.buildEditValue(self.getValue());
			} else {
				var val = self.getObjectValue();
				if (self.isUnit) {
					self.buildUnitValue(self.$$value, val.$value, val.$description, val.$title);
				} else {
					self.buildDetailValue(self.getFormattedValue(val.$value), val.$description, val.$title);
				}
			}
		},

		/**
		 * 
		 */
		buildEditValue: function(value) {
			var $lookuplink = this.getMetaData("$isReadOnly") !== true && this.getMetaData("$isDisabled") !== true ? this.prototype.getValueByPath("$item.$links.$lookup") : null;
			if ($lookuplink) {
				this.addPickerSdataLink("$lookup", fontUtils.getIconByName("lookupPicker"));
			}
			this.createMainInput(this.getFormattedValue(value));
		},

		/**
		 * 
		 */
		buildDetailValue: function(value, descr, title) {
			var self = this;

			var $$container = self.$$value;
			if (this.options.displayCtx === "table") {
				self.addDetailLink(self.$$value);
				$$container = self.$detailLink || $$container;
			}

			if (value.length > 0) {
				// set description content according to authoring value of $refDescFormat
				// Available values are desc, title, desctitle, and titledesc. Default is "desc"
				var descContent;
				var $refDescFormat = self.getAuthoring("$refDescFormat");
				switch ($refDescFormat) {
					case "title":
						descContent = title;
						break;
					case "desctitle":
						descContent = self._combineTexts(descr, title);
						break;
					case "titledesc":
						descContent = self._combineTexts(title, descr);
						break;
						// "desc" will be considered as default
					default:
						descContent = descr;
						break;
				}

				// build content and set position according to description content authoring position $refDescPosition
				// available values are bottom, right, left, top, none. Default is "right"
				var $refDescPosition = self.getAuthoring("$refDescPosition");
				if ($refDescPosition == null || $refDescPosition.length === 0) {
					$refDescPosition = self.options.displayCtx === "table" ? globals.XREF_DESCRPOS_TABLE : "right";
				}
				var $$value = $("<div>").addClass("s-m-ref-val").text(value);
				var $$desc = $("<div>").addClass("s-m-descr").text(descContent);
				var arr;
				switch ($refDescPosition) {
					case "bottom":
						$$container.append($$value).append($$desc);
						break;
					case "left":
						$$container.append($$desc).append($$value);
						arr = [$$value, $$desc];
						$.each(arr, function(index, $$ee) {
							$$ee.css("display", "inline-block");
						});
						$$desc.css("padding-right", "5px");
						break;
					case "top":
						$$container.append($$desc).append($$value);
						break;
					case "none":
						$$container.append($$value);
						break;
					case "right": // "right" will be considered as default
					default:
						arr = [$$value, $$desc];
						$$container.append($$value).append($$desc);
						$.each(arr, function(index, $$ee) {
							$$ee.css("display", "inline-block");
						});
						$$desc.css("padding-left", "5px");
				}
			}
		},

		/**
		 * 
		 */
		buildUnitValue: function(parentElmt, value, descr, title) {
			var self = this;
			var label = descr.length > 0 ? descr : title.length > 0 ? title : value;

			label = value || "";
			if (label && label.toLowerCase) label = label.toLowerCase().smCapitalize();
			uiUtils.createDomElement("span", ["s-m-descr"], label, null, self.addDetailLink(parentElmt) || parentElmt);
		},

		/**
		 * 
		 */
		addDetailLink: function($$parentElmt) {
			var self = this;
			if (self.options.displayCtx === "card") {
				return
			}
			if (self.prototype.getValueByPath("$item.$links.$details")) {
				// get dom link parameters/attributes (we consider only $details)
				var detailLink = uiUtils.createDomElement("span", null, null,
					self.getSdataLinkAttrs("$details"), $$parentElmt);
				this.$$detailLink = $(detailLink);
			}
		},
		/**
		 * data: 		string with value
		 * 				object with {$value:,$description:,$title:}
		 */
		setDisplayValue: function(value) {
			var strData;
			if ($.isPlainObject(value)) {
				strData = value.$value || "";
			} else {
				strData = value || "";
			}
			Base.prototype.setDisplayValue.call(this, strData);
		},

		/**
		 * On reference fields, $linkName can be $details and $lookup
		 */
		onSdataLinkClicked: function($linkName) {
			var self = this;
			var $link = (this.prototype.getValueByPath("$item.$links." + $linkName) || {});
			if (!$link) {
				return;
			}
			var $url = $link.$url;
			var $method = $link.$method;
			if (!$url) {
				return;
			}
			if ($linkName === "$lookup") {
				// Auto generated dynamic filter bases on compound key of item to lookup
				var $lookupWhere = this.prototype.getValueByPath("$item.$autoLookWhere");
				var whereElements;
				$lookupWhere && $.each($lookupWhere, function(property, valueProperty) {
					var fieldValue = self.controller.getValue(valueProperty);
					if (fieldValue != null) {
						whereElements = whereElements || [];
						whereElements.push("(" + property + " eq '{" + valueProperty + "}')");
					}
				});

				var autoLookupWhere = whereElements && whereElements.join(" and ");
				if (autoLookupWhere && $url.indexOf("where=") < 0) {
					if ($url.indexOf("?") < 0) {
						$url = $url + "?where=" + autoLookupWhere;
					} else {
						$url = $url + "&where=" + autoLookupWhere;
					}
				}

				/*
				 *  For lookup link, we add the details on where to put the value in on selection
				 */
				$url = this.controller.dataset.resolveExpression($url, true);
				this.controller.gotoUrl($url, $method, {
					isChild: true,
					lookup: {
						"controllerId": this.controller.id,
						"$bind": this.$bind,
						"$lookupKeyName": this.prototype.getValueByPath("$item.$lookupKeyName")
					}
				});
			} else {
				$url = this.controller.dataset.resolveExpression($url, true);
				this.controller.gotoUrl($url, $method);
			}
		},
		_combineTexts: function(el1, el2) {
			var res;
			// el1-el2 || el1 || el2
			res = (el1 && el2) ? (el1 === el2 ? el1 : el1 + "-" + el2) : (el1 || el2 || "");
			return res;
		}
	});