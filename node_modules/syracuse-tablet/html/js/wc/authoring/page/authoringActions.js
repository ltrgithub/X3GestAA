"use strict";
var authPropsGeneral = require('syracuse-tablet/html/js/wc/authoring/authoringPropertiesGeneral');
var authComponents = require('syracuse-tablet/html/js/wc/authoring/authoringComponents');
var locale = require('syracuse-tablet/html/js/wc/helpers/locale');
var jsutils = require('syracuse-tablet/html/js/wc/helpers/jsutils');
var fontUtils = require('syracuse-tablet/html/js/wc/ui/fontUtils');

var _templates = {
	subtitle: '\
		<section class="s-m-prop-subtitle" {{#if id}}id="{{id}}"{{/if}} style="{{#if notHidden}}overflow:hidden;{{/if}}white-space:nowrap;text-overflow:ellipsis;{{#if margin}}margin-bottom:{{margin}}px;{{/if}}">\
			{{#if title}}<p>{{title}}</p>{{/if}}\
			<div></div>\
		</section>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};

var _addSubSection = function(title, id, $$parent) {
	var $$panel = $(_getHtml('subtitle', {
		title: title,
		margin: 10,
		id: id
	})).appendTo($$parent || this.$$parent);
	return {
		$$panel: $$panel,
		$$content: $$panel.children("div"),
		$$title: $$panel.children("p")
	};
};

var _optionsProperties = ["footerHeader", "refreshPage", "multiselection", "backIfSuccess"];

/**
 * Property that contains actions authoring
 * 		$pageActionSettings
 * 		[{name: actionName, $title:"", icon:"", options: {footerHeader: true/false, refreshPage:true/false, multiselection: true/false}]
 * Sub properties names
 * 		"footerHeader", "refreshPage", "multiselection"
 */

var _noValue = "$$novalue$$";
var _properties = {

	"actionSettings": function(controller, sel, data) {
		this.name = "actionSettings";
		this.label = null;
		this["default"] = null;
		this.key = "$pageActionSettings";
		this._myProperties = [];
		this._page = data.page;
		this.controller = controller;

		this.initMarkup = function(controller, sel, data) {
			if (!this._page) return;
			var $links = this._page.getProtoLinks();
			this._$links = [];
			if ($links) {
				for (var l in $links) {
					var entry = $.extend(true, {}, $links[l]);
					entry.name = l;
					entry.$title = this._page.getPrototype().resolveExpression(entry.$title) || entry.name;
					this._$links.push(entry);
				}
			}
			var baseArticle = data.articleSelection || {};
			baseArticle = baseArticle[this.key] || [];
			this._actionList = [];
			var self = this;
			baseArticle.forEach(function(act) {
				// Check if action is still in the proto
				if (self.getActionProto(act.name)) {
					act.$title = self._page.getPrototype().resolveExpression(act.$title) || entry.name;
					act.options = act.options || {};
					self._actionList.push($.extend(true, {}, act));
				}
			});
		};
		this.getActionProto = function(name) {
			var res = null;
			this._$links.some(function(v, idx) {
				if (v.name === name) {
					res = v;
					return true;
				}
			});
			return res;
		};
		this.getActionInfo = function(actName) {
			if (!actName) return null;
			var idx = -1;
			var rec = null;
			this._actionList.some(function(c, i) {
				if (c.name === actName) {
					rec = c;
					idx = i;
					return true;
				}
			});
			return idx === -1 ? null : {
				record: rec,
				idx: idx
			};
		};
		this.destroyMarkup = function() {
			this._page = null;
			this.$$parent = null;
			this.controller = null;
			this._$links = null;
			if (this._myProperties) {
				this._myProperties.forEach(function(p) {
					if (p.destroyMarkup) p.destroyMarkup();
				});
				this._myProperties = null;
			}
		};

		this.createMarkup = function($$parent, prop, sel, data) {
			if (!this._page) return;
			this.$$parent = $$parent;
			if (this._page.getPrototype().isQuery()) {
				this.downloadOptAdd(sel, data);
			}
			this.actionListAdd(sel, data);
			this.editSectionAdd();
			this.checkAppendButton();
		};
		this.downloadOptAdd = function(sel, data) {
			var value = authPropsGeneral.getValueOrDefault({
				"key": "$allowDownload",
				"default": false
			}, sel, data);
			var opts = {
				size: "small",
				onText: "True",
				offText: "False",
				onSwitchChange: this.onAllowDownloadChanged.bind(this, sel, data)
			};
			this.allowDownload = authComponents.newComponent("switcher", opts);
			this.$$allowDownload = this._addParam("allowDownload", this.allowDownload, true);
			this.allowDownload.setValue(value);
		};
		this.onAllowDownloadChanged = function(sel, data, event, value) {
			authPropsGeneral.setValue({
				key: "$allowDownload"
			}, sel, data, value);
			authPropsGeneral.notifyChangePropUI(this.$$parent, sel, data);
		};

		this.actionListAdd = function(sel, data) {
			var opts = {
				css: "actionlist",
				doAction: jsutils.bindFn(this.listCallBackAction, this, sel, data),
				appendTitle: locale.text("auth.actionSettings.append")
			};
			this.listActionDisplayer = authComponents.newComponent("editableList", opts);
			this._addParam("actionlist", this.listActionDisplayer, true);
			this.updateActionList();
		};
		this.editSectionAdd = function() {
			this.editActionSection = this._addSubSection("editaction");
			this.editActionSection.$$panel.hide();
			this.editActionSection.$$content.css("padding-left", "7px");
			this.editActionSection.$$title.css("font-weight", "bold");
			var $$rootComponents = this.editActionSection.$$content;
			this.paramActionAdd($$rootComponents);
			this.paramOptionsAdd($$rootComponents);
			this.paramIconAdd($$rootComponents);
		};
		// No append if no actions to add
		this.checkAppendButton = function() {
			if (!this.listActionDisplayer) return;
			this.listActionDisplayer.disableAppendBtn(this._actionList.length >= this._$links.length);
		};
		this.listCallBackAction = function(action, recordId, listActionDisplayer, sel, data) {
			if (action === "append") {
				this._updateParams(null);
				return true;
			}
			if (action === "cancel") {
				this._resetEditParams();
				this.editActionSection.$$panel.hide();
				this.checkAppendButton();
				return true;
			}
			var recInfo = this.getActionInfo(recordId);
			if (action === "validate") {
				var newRecord = this.validateRecord(true);
				if (newRecord) {
					if (recInfo == null) {
						// Validate Append
						this._actionList.push(newRecord);
					} else {
						// Validate Edit
						this._actionList.splice(recInfo.idx, 1);
						this._actionList.splice(recInfo.idx, 0, newRecord);
					}
					this.updateActionList(true, sel, data);
					// Clears params
					this._resetEditParams();
					// Removes validate/cancel - Switchs to e'Append status'
					this.checkAppendButton();
					return true;
				} else {
					return false;
				}
			}
			if (action === "deleteItem") {
				if (!recInfo) return false;
				this._actionList.splice(recInfo.idx, 1);
				this.checkAppendButton();
				this.updateActionList(true, sel, data);
				return true;
			}
			if (action === "editItem") {
				if (!recInfo) return false;
				this._updateParams(recInfo.record);
				return true;
			}
		};
		this.validateRecord = function(errorMsg) {
			var self = this;
			var rec = {};
			var _fail = function(msg, params) {
				if (errorMsg === true) {
					var text = locale.text("auth.actionSettings.invalid" + (msg || ""), params);
					self.listActionDisplayer.toggleMessage(text, "error");
					setTimeout(function() {
						self.listActionDisplayer.toggleMessage(null);
					}, 2500);
				}
				return null;
			};
			rec.name = this.actionSelector.getValue();
			if (!rec.name || rec.name == _noValue) {
				return _fail();
			}
			rec.icon = this.paletteIcon.getValue();
			var info = this.getActionProto(rec.name);
			if (!info) return _fail(".action", [rec.name]);
			rec.$title = info.$title;
			rec.options = this.optionsList.getValue();
			var nbChecked = 0;
			for (var p in rec.options) {
				if (rec.options[p] === true) {
					nbChecked++;
				}
			}
			// No check is not allowed
			if (nbChecked === 0 && !rec.icon) {
				return _fail(".empty");
			}
			if (rec.options.footerHeader && !rec.icon) {
				return _fail(".icon");
			}
			return rec;
		};
		this._updateParams = function(record) {
			var edit = record != null;
			record = record || {};
			this.editActionSection.$$panel.show();
			this.paramActionUpdate(record.name || _noValue, true, record.options);
			this.optionsList.updateValue(record.options);
			this.paletteIcon.setValue(record.icon);
		};
		this._resetEditParams = function() {
			this.editActionSection.$$panel.hide();
			this.actionSelector.setValue(_noValue);
		};
		this.updateActionList = function(updateAuthoring, sel, data) {
			var clearBefore = true;
			if (clearBefore) {
				this.listActionDisplayer.clear();
			}
			var records = [];
			this._actionList.forEach(function(c) {
				records.push({
					titleHtml: "<span>" + (c.$title || c.name) + "</span>",
					id: c.name
				});
			});
			this.listActionDisplayer.insertRecords(records);
			if (updateAuthoring == true) {
				var value = [];
				this._actionList.forEach(function(c) {
					c = $.extend(true, {}, c);
					value.push(c);
				});
				authPropsGeneral.setValue(this, sel, data, value);
				authPropsGeneral.notifyChangePropUI(this.$$parent, sel, data);
				return;
			}
		};
		/**
		 * Edit empty record
		 */
		this.paramActionAdd = function($$root) {
			var opts = {
				css: "actionName",
				onChange: jsutils.bindFn(this.onParamActionSelect, this),
				isHidden: false
			};
			this.actionSelector = authComponents.newComponent("select", opts);
			this._addParam("action", this.actionSelector, true, $$root, true);
			this.paramActionUpdate(_noValue);
		};

		this.onParamActionSelect = function(event, prop) {};
		/**
		 * value: 			value to select
		 * forceAddValue:	true to add value to select
		 * options:			check action to add according to options
		 */
		this.paramActionUpdate = function(value, forceAddValue, options) {
			var selectOpts = [{
				"title": locale.text('auth.actionSettings.novalue'),
				"value": _noValue
			}];
			var self = this;
			this._$links.forEach(function(v, idx) {
				if (options && options.multiselection === true && v.name.smStartsWith("$")) {
					return;
				}
				// Filters actions that are not already in the list
				if ((forceAddValue === true && value === v.name) || !self.getActionInfo(v.name)) {
					selectOpts.push({
						title: v.$title,
						value: v.name
					});
				}
			});
			this.actionSelector.update(selectOpts, value || _noValue);
		};

		this.paramOptionsAdd = function($$root) {
			var opts = {
				list: [],
				onClick: jsutils.bindFn(this.onClickOptions, this)
			};
			var self = this;
			_optionsProperties.forEach(function(x) {
				if (x === "multiselection" && !self._page.getPrototype().isQuery()) return;
				opts.list.push({
					id: x,
					label: locale.text('auth.actionSettings.' + x)
				});
			});
			this.optionsList = authComponents.newComponent("checkboxList", opts);
			this._addParam("options", this.optionsList, true, $$root, false);
		};
		this.onClickOptions = function(id, checked) {
			this.paramActionUpdate(this.actionSelector.getValue(), true, this.optionsList.getValue());
		};
		this.paramIconAdd = function($$root) {
			var opts = {
				palette: fontUtils.getPageActionIcon(),
				dropUp: true
			};
			this.paletteIcon = authComponents.newComponent("iconPalettePicker", opts);
			this._addParam("icon", this.paletteIcon, true, $$root, false);
		};

		this._addParam = function(prop, component, title, $$parent, mandatory) {
			var $$parent = $$parent || this.$$parent;
			var $$title;
			var $$root;
			if (title) {
				var res = this._addSubSection(prop, $$parent, mandatory);
				$$root = res.$$content;
				$$title = res.$$panel;
			} else {
				$$root = $$parent;
			}
			if (component == null) throw new Error("unexpected null component [" + prop + "]");
			var $$panel;
			if (component.createMarkup) {
				component.createMarkup($$root);
				this._myProperties.push(component);
				$$panel = component.$$panel;
			} else if (component.jquery) {
				$$root.append(component);
				$$panel = component;
			}
			return $$title ? $$title : $$panel;
		};

		this._addSubSection = function(textId, $$parent, mandatory) {
			var title = locale.text('auth.actionSettings.' + textId) + (mandatory === true ? "*" : "");
			var id = "actionSettings" + textId.smCapitalize();
			return _addSubSection(title, id, $$parent || this.$$parent);
		};
	}
};

exports.addSubSection = _addSubSection;

exports.initModuleProperties = function(dest) {
	authPropsGeneral.initProperties(_properties, dest);
};

exports.getModuleProperties = function($$elmt, controller, props, sel, data) {
	props.push(_properties.actionSettings);
};