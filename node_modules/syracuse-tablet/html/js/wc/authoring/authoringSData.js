"use strict";

var ajax = require('syracuse-tablet/html/js/wc/common/ajax');
var _DEVICE_NAME = "mobile";

/*
 * pageName
 * x3.erp.AQMCRUDM.$details
 */
exports.getPageVariants = function(pageName) {
	var deferred = $.Deferred();
	var code = pageName + "." + _DEVICE_NAME;
	var key = encodeURIComponent(code).replace(/'/g, "''");
	ajax.request("/sdata/syracuse/collaboration/syracuse/pageDefs(code%20eq%20'" + key + "')?representation=pageDef.$details")
		.then(function(response) {
			deferred.resolve(response.data.variants || []);
		})
		.fail(function(e) {
			if (e.status === 404) {
				deferred.resolve([]);
			}
			deferred.reject(e);
		});
	return deferred.promise();
};

/*
 * pageName
 * x3.erp.AQMCRUDM.$details
 */
exports.getPageViews = function(pageName) {
	var deferred = $.Deferred();
	var key = encodeURIComponent(pageName).replace(/'/g, "''") + ",$page,," + _DEVICE_NAME;
	ajax.request("/sdata/syracuse/collaboration/syracuse/pages('" + key + "')")
		.then(function(response) {
			deferred.resolve(response.data.$views || []);
		})
		.fail(function(e) {
			if (e.status === 404) {
				deferred.resolve([]);
			}
			deferred.reject(e);
		});
	return deferred.promise();
};

var _createPageDefinitionWC = function(opts) {
	var params = {
		"pageContext": [opts.application, opts.contract, opts.representation, opts.facet].join("."),
		"device": _DEVICE_NAME,
		"representation": "pageAuth.$edit"
	};

	var url = "/sdata/syracuse/collaboration/syracuse/pageAuths" +
		(opts.variant != null ? ("('" + opts.variant + "')") : "/$template") +
		"/$workingCopies?" +
		Object.keys(params).map(function(key) {
			return key + "=" + params[key];
		}).join("&");

	return ajax.request(url, "POST")
		.then(function(response) {
			return response.data;
		});
};
var _savePageDefinitionWC = function(opts, wc) {
	var parameters = {
		"roles": opts.roles,
		"users": opts.users,
		"endpoints": opts.endpoints,
		"saveAsOption": opts.saveAsOption,
		"isFactory": false,
		"isModelRepresentation": false,
		"personalCopy": false,
		"variantCode": opts.variantCode,
		"variantTitle": opts.variantTitle,
		"variantDescription": opts.variantDescription
	};
	switch (opts.saveAsOption) {
		case "factory_variant":
			parameters.isFactory = true;
			break;
		case "personal_copy":
			parameters.personalCopy = true;
			break;
		case "shared_copy":
			break;
		case "global_variant":
			break;
	}

	wc.$actions = {};
	var save;
	if (opts.variant) {
		save = wc.$actions["$save"] = {};
		delete parameters.saveAsOption;
	} else {
		save = wc.$actions["saveAs"] = {};
	}
	save.$isRequested = true;
	save.$parameters = parameters;

	return ajax.request(wc.$url, "PUT", wc)
		.then(function(response) {
			return response.data;
		});
};

exports.savePageDefinition = function(opts) {
	var workingCopy;
	return _createPageDefinitionWC(opts)
		.then(function(wc) {
			workingCopy = wc;
			var send = $.extend(true, {}, workingCopy);
			send.content = send.content || {};
			send.content.$article = opts.article;
			return _savePageDefinitionWC(opts, send);
		}).then(function(wcSaved) {
			var data = $.extend(true, {}, workingCopy, wcSaved);
			var result = _extractErrors(data);
			if (result.errors) {
				return $.smReject(result.diags);
			}
			return data;
		});
};

function _extractErrors(data, result) {
	if (result == null) {
		result = {
			errors: false,
			diags: {
				$diagnoses: []
			}
		};
	}
	Object.keys(data).forEach(function(key) {
		var value = data[key];
		if (key === "$diagnoses") {
			value.forEach(function(d) {
				result.diags.$diagnoses.push(d);
				if (d.$severity == "error") {
					result.errors = true;
				}
			});
		} else if (value && typeof value === "object") {
			_extractErrors(value, result);
		}
	});
	return result;
}