"use strict";

var jsutils = require('syracuse-tablet/html/js/wc/helpers/jsutils');

/**
 * opts: {
 *   page,
 *   orientation,
 *   template
 * }
 */
exports.genNewArticle = function(opts) {
	var proto;
	proto = opts.page.getPrototype();

	if (jsutils.isInstanceOf(opts.page, "PageSdataDashboard")) {
		return _generateDashboardArticle(proto, opts.orientation, opts.template);
	} else {
		return _generateRegularArticle(proto, opts.orientation, opts.template);
	}
};

function _generateDashboardArticle(proto, orientation, tpl) {

	var article;
	proto = proto.json;
	var props = proto.$properties;

	if (orientation === "horizontal") {
		article = {
			"$layoutType": "hub",
			"$items": [{
				"$layoutType": "hubGroup",
				"$title": "",
				"$items": []
			}]
		};

		// Just create root and return if requested
		if (tpl === false) {
			return $.smResolve(article);
		}

		Object.keys(props).forEach(function(key) {
			var prop = props[key];
			if (prop.$type === "application/x-vignette") {
				article.$items[0].$items.push({
					"$layoutType": "tile",
					"$size": "medium",
					"$items": [{
						"$bind": key,
					}]
				});
			}
		});
	} else {
		article = {
			"$layoutType": "stack",
			"$items": []
		};

		// Just create root and return if requested
		if (tpl === false) {
			return $.smResolve(article);
		}

		var cellCount = 4;
		var row;
		Object.keys(props).forEach(function(key) {
			var prop = props[key];
			if (prop.$type === "application/x-vignette") {
				if (cellCount === 4) {
					cellCount = 0;
					row = {
						"$layoutType": "row",
						"$items": []
					};
					article.$items.push(row);
				}
				row.$items.push({
					"$layoutType": "cell",
					"$widthXs": 12,
					"$widthSm": 6,
					"$widthMd": 4,
					"$widthLg": 3,
					"$items": [{
						"$bind": key,
					}]
				});
			}
		});
	}
	return $.smResolve(article);
};

function _generateRegularArticle(proto, orientation, tpl) {
	proto = proto.json;
	if (proto.$type === "application/x-array") {
		proto = proto.$item;
	}
	var props = proto.$properties;
	var $items, prop;
	var forceNoTitle = _getFacet(proto.$url) === "query";
	if (orientation === "horizontal") {
		article = {
			"$layoutType": "hub",
			"$items": [{
				"$layoutType": "hubGroup",
				"$title": "",
				"$items": []
			}]
		};

		// Just create root and return if requested
		if (tpl === false) {
			return $.smResolve(article);
		}

		var groupItems = article.$items[0].$items;
		var maxItemsPerGroup = 4;
		var itemsPerGroup = maxItemsPerGroup;
		var tileItems;
		var singlePropTypes = ["application/x-array", "application/x-document", "image"];
		for (var p in props) {
			prop = props[p];
			if (prop.$isExcluded !== true) {
				if (singlePropTypes.indexOf(prop.$type) > -1) {
					var tile = {
						"$layoutType": "tile",
						"$size": "large",
						"$items": []
					};
					groupItems.push(tile);
					tileItems = tile.$items;
					itemsPerGroup = maxItemsPerGroup;
				} else if (itemsPerGroup >= maxItemsPerGroup) {
					itemsPerGroup = 0;
					var tile = {
						"$layoutType": "tile",
						"$size": "large",
						"$items": []
					};
					groupItems.push(tile);
					tileItems = tile.$items;
				}

				itemsPerGroup = itemsPerGroup + 1;
				var a = {
					$bind: p
				};
				if (forceNoTitle) {
					a.$isTitleHidden = forceNoTitle;
				} else {
					a.$labelPosition = "top";
				}
				tileItems.push(a);
			}
		}
	} else {
		var article = {
			$layoutType: "stack",
			$items: []
		};

		// Just create root and return if requested
		if (tpl === false) {
			return $.smResolve(article);
		}
		if (!proto || !proto.$article || !proto.$article.$layout) {
			$items = article.$items;
			for (var p in props) {
				prop = props[p];
				if (prop.$isExcluded !== true) {
					var a = {
						$bind: p
					};
					if (forceNoTitle) {
						a.$isTitleHidden = forceNoTitle;
					}
					$items.push(a);
				}
			}
		} else {
			_x3Layout2DefaultArticle(proto, article, props);
		}
	}
	return $.smResolve(article);
};

var _testFacet = /representation=.*\.\$(\w+)[&]*/;

function _getFacet($url) {
	var t = _testFacet.exec($url || "");
	return t != null && t.length == 2 ? t[1] : null;
};

function _x3Layout2DefaultArticle(proto, article, props) {
	function _parse(coreLayout, article, props) {
		if (!coreLayout) return;
		var idx, idx1;
		coreLayout.$items.forEach(function($itm) {
			switch ($itm.$category) {
				case "section":
					idx = article.$items.push({
						"$title": $itm.$title,
						"$layoutType": "stack",
						"$items": []
					});
					_parse($itm.$layout, article.$items[idx - 1], props);
					break;
				case "block":
					idx = article.$items.push({
						"$title": $itm.$title,
						"$layoutType": "stack",
						"$items": []
					});
					idx1 = article.$items[idx - 1].$items.push({
						"$layoutType": "row",
						"$items": []
					});
					_parse($itm.$layout, article.$items[idx - 1].$items[idx1 - 1], props);
					break;
				default:
					if (props[$itm.$bind] && !props[$itm.$bind].$isExcluded) {
						idx = article.$items.push({
							"$layoutType": "cell",
							"$bgColor": "",
							/*to avoid default cell color*/
							"$items": []
						});

						article.$items[idx - 1].$items.push({
							"$bind": $itm.$bind,
						});
					}
					break;
			}
		});
	}
	_parse(proto.$article.$layout, article, props);
}