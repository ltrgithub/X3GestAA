"use strict";

var Base = require('syracuse-tablet/html/js/wc/pages/sdata/pageSdata').Page;
var notifications = require('syracuse-tablet/html/js/wc/helpers/notifications');

var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var protoHelpers = require('syracuse-tablet/html/js/wc/sdata/protocolHelpers');

/**
 * Page handling a dashboard
 * 
 * options: { // Additional options for dashboard page. These add up to what is possible for pageBase
 *   dashboardParameters: {
 *     CODE: {
 *       value: "10"
 *     }
 *   }
 * }
 */
exports.Page = utils.defineClass(
	function PageSdataDashboard(pageData, options) {
		Base.call(this, pageData, options);
		this._vignettes = null;
		this._nbVignettesLoaded = 0;

		// Default, will be updaten on every loaded vignette
		this._dataFreshness = {
			dateTime: new Date().getTime(),
			level: "fresh"
		};
	},
	Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			this._vignettes = null;
		},

		afterRender: function() {
			Base.prototype.afterRender.call(this);
			this._nbVignettesLoaded = 0;
			this._vignettes = this.controller.getControlsByType("application/x-vignette");
		},

		getPageTitle: function() {
			// Give by dashboard value
			var ttl = this.controller.dataset.getValue("title");
			if (!ttl) {
				// Compliant with stateless dashboard (client test app)
				ttl = ttl = this.controller.dataset.getValue("$title");
			}
			if (!ttl) {
				// Given by prototype
				ttl = Base.prototype.getPageTitle.call(this);
			}
			return ttl
		},

		onVignetteLoaded: function(vignette, success) {
			if (success) {
				this._updateDataFreshness(vignette);
			}
			this._nbVignettesLoaded++;
			if (this._vignettes && this._nbVignettesLoaded >= this._vignettes.length) {
				// Once all vignettes have been loaded (eg: stack hub scroller height depends on vignette content)
				this._vignettes.forEach(function(v) {
					v.computeLayout();
				})
				this.onContentChanged();

				notifications.publish(["sm.all.vignettes.loaded"], this);
			}
		},
		/*
		 * Called whenever a vignette is loaded to update the overall freshness of the dashboard
		 */
		_updateDataFreshness: function(vignette) {
			var childPage = vignette && vignette.getTopPage();
			var dataset = childPage && childPage.controller && childPage.controller.dataset;
			if (dataset) {
				var freshness = dataset.getDataFreshness();
				if (this._dataFreshness.dateTime > freshness.dateTime) {
					this._dataFreshness.dateTime = freshness.dateTime;
					this._dataFreshness.level = freshness.level;

					notifications.publish("sm.data.freshness.change", this._dataFreshness);
				}
			}
		},

		//
		// START: Authoring
		//
		/**
		 * Returns name to use for saving authoring
		 * syracuse.collaboration.testHomeDashboard.$mobileDashboard
		 */
		getAuthoringName: function() {
			var $url = this.pageData.$url;
			var key = protoHelpers.getKeyFromUrl($url);
			var ep = protoHelpers.getEndpointFromUrl($url);
			return ep + "." + key;
		},
		//
		// END: Authoring
		//

		/**
		 * typeDashboard = hub / stack / undefined
		 */
		isDashboard: function(typeDashboard) {
			return typeDashboard == null ? true : (this.rootLayout ? this.rootLayout.$type === typeDashboard : true);
		},
		/**
		 * Scroll handled by hub
		 */
		scrollAllowed: function() {
			return !this.isDashboard("hub");
		},
		getGestureMgr: function() {
			return this.isDashboard("hub") && this.rootLayout ? this.rootLayout.getGestureMgr() : Base.prototype.getGestureMgr.call(this);
		}
	}
);