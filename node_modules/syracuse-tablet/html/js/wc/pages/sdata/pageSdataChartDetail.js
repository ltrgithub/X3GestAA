"use strict";

var Base = require('syracuse-tablet/html/js/wc/pages/sdata/pageSdata').Page;
var siteLayout = require('syracuse-tablet/html/js/wc/ui/siteLayout');

var utils = require('syracuse-tablet/html/js/wc/helpers/utils');

/**
 * Page handling a query
 * We should add filters and paging
 * 
 */
/*TODO
 * page settings
 */
exports.Page = utils.defineClass(
	function PageSdataChartDetail(pageData, options) {
		options = options || {};
		options.nativeCapabilities = {
			"liveTile": true,
			"scheduleMessage": true,
			"share": true
		};
		var settings = pageData.settings ? pageData.settings.chartDetail : {}
		this.applySettings(pageData.page.$article, settings)
		Base.call(this, pageData, options);
		this.controller.level = this.options.level || 0;
		this.actionAdapter.showPinPage = false;
		this.actionAdapter.showHome = false;
	},
	Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
		},
		scrollAllowed: function() {
			return true;
		},
		_getDefaultAttachedControls: function() {
			var device = siteLayout.getDeviceType();
			if (device === "smartphone") {
				return ["header", "chartDetailToolBar"];
			} else {
				return ["header", /*"breadcrumbs"*/ , "chartDetailToolBar", "footer"];
			}
		},
		getChartDetailSetting: function() {
			var settings = this.getPageSettings() || {};
			return settings.chartDetail
		},
		_setDisplay: function() {
			var chartSettings = this.getChartDetailSetting() || {};
			this.authUpdateLayout(this.getArticle(chartSettings))
		},
		actToolbarSetDisplay: function(opts) {
			this._setChartDetailPrefs(opts);
			this._setDisplay();
			this.writePageSettings()
				.then(function() {
					// just to document it's a promise
				});
		},
		_setChartDetailPrefs: function(opts) {
			var settings = this.getPageSettings();
			settings.chartDetail = opts;
			settings.isDirty = true;
		},
		isChartDetail: function() {
			return true
		},
		getArticle: function(chartSettings) {
			var $article = Base.prototype.getArticle.call(this);
			if (chartSettings) {
				this.applySettings($article, chartSettings)
			}
			return $article
		},
		applySettings: function($article, chartSettings) {
			if (!chartSettings) return
			$article.$display = chartSettings.display || $article.$display;
			this._setArticlesSettings($article, chartSettings, {});
		},
		_setArticlesSettings: function($article, chartSettings) {
			// Be careful chart or array (or both) can be removed by authoring)
			var articles = this.getArticles($article);
			articles.arrayChartArticle && (articles.arrayChartArticle.$items[0].$isHidden = chartSettings.display === "arrayOnly");
			articles.arrayArticle && (articles.arrayArticle.$items[0].$isHidden = chartSettings.display === "chartOnly");
			var sameSize = articles.arrayChartArticle && !articles.arrayChartArticle.$items[0].$isHidden &&
				articles.arrayArticle && !articles.arrayArticle.$items[0].$isHidden &&
				(chartSettings.display === "bothSideToSide")

			if (articles.arrayChartArticle && articles.arrayArticle) {
				articles.arrayChartArticle.$sameSize = articles.arrayArticle.$sameSize = sameSize
				if (sameSize) {
					articles.arrayArticle.$widthAll = articles.arrayChartArticle.$widthAll = 6
				}
				articles.arrayChartArticle.$items[0].$arrayOptions.showPagination = (chartSettings.display === "chartOnly" && articles.arrayArticle.$items[0].$arrayOptions && articles.arrayArticle.$items[0].$arrayOptions.showPagination);
			}
			if (chartSettings.style && articles.arrayChartArticle) {
				articles.arrayChartArticle.$items[0].$style = chartSettings.style
			}
		},
		getArticles: function(node, articles) {
			if (!node.$items) return
			articles = articles || {}
			for (var i = 0; i < node.$items.length; i++) {
				if (node.$items[i].$display === "chart") {
					articles.arrayChartArticle = node
				} else if (["card", "carousel", "table"].indexOf(node.$items[i].$display) > -1) {
					articles.arrayArticle = node;
				}
				this.getArticles(node.$items[i], articles)
			};
			return articles
		},
		_isStatistics: function() {
			return this.pageData.prototype.getValueByPath("codeStat") != undefined;
		},
		allowAuthoring: function() {
			return Base.prototype.allowAuthoring.call(this) && (this.options.level === 0 || !this._isStatistics());
		}
	}

);