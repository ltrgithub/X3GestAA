"use strict";

var Base = require('syracuse-tablet/html/js/wc/pages/sdata/pageSdata').Page;
var articleParser = require("syracuse-tablet/html/js/wc/controls/articleParser");
var siteLayout = require('syracuse-tablet/html/js/wc/ui/siteLayout');

var utils = require('syracuse-tablet/html/js/wc/helpers/utils');

/**
 * Page handling a query
 * We should add filters and paging
 * 
 */
/*TODO
 * page settings
 */
exports.Page = utils.defineClass(
	function PageSdataChartDetail(pageData, options) {
		Base.call(this, pageData, options);
		this.controller.level = options.level || 0;
		this.pageName += "_" + this.controller.level;
	},
	Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
		},
		scrollAllowed: function() {
			return true;
		},
		_getDefaultAttachedControls: function() {
			var device = siteLayout.getDeviceType();
			if (device === "smartphone") {
				return ["header", "chartDetailToolBar"];
			} else {
				return ["header", /* "breadcrumbs" ,*/ "chartDetailToolBar", "footer"];
			}
		},
		_setDisplay: function() {
			var settings = this.getPageSettings(),
				opts = {}
			if (settings && settings.chartDetail && settings.chartDetail.length > this.controller.level) {
				opts = settings.chartDetail[this.controller.level]
			}
			this.authUpdateLayout(this.getArticle(opts))
		},
		actToolbarSetDisplay: function(opts) {
			this._setChartDetailPrefs(opts);
			this._setDisplay();
			this.writePageSettings()
				.then(function() {
					// just to document it's a promise
				});
		},
		_setChartDetailPrefs: function(opts) {
			var settings = this.getPageSettings();
			settings.chartDetail = settings.chartDetail || {};
			settings.chartDetail[this.controller.level] = opts;
			settings.isDirty = true;
		},
		isChartDetail: function() {
			return true
		},
		getAuthoringFullName: function() {
			var pageAuthName = Base.prototype.getAuthoringFullName.call(this);
			pageAuthName += "_" + this.controller.level;
			return pageAuthName;
		},
		getAuthoringName: function() {
			var pageAuthName = Base.prototype.getAuthoringName.call(this);
			pageAuthName += "_" + this.controller.level;
			return pageAuthName;
		},
		getArticle: function(settings) {
			var settings = settings || {};
			var $article = Base.prototype.getArticle.call(this);
			if (settings) {
				//DOTO apply settings
				console.log("pageSdataChart", settings, $article)
			}
			return $article
		}
	}

);