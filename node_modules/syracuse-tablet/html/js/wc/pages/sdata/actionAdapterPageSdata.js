"use strict";

var ActionAdapter = require('syracuse-tablet/html/js/wc/pages/actionAdapter').ActionAdapter;

var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var siteLayout = require('syracuse-tablet/html/js/wc/ui/siteLayout');
var environment = require('syracuse-tablet/html/js/wc/helpers/environment');

/**
 * 
 */
exports.ActionAdapterPageSdata = utils.defineClass(
	function ActionAdapterPageSdata(sdataPage) {
		ActionAdapter.call(this, sdataPage);
		this.sdataPage = sdataPage;

		// Used to cache items
		this._items = {
			header: null,
			footer: null,

			globalPanel: null,

			actionsPanel: null
		};

		// Some pages (like row detail will set these to true)
		this.showAccept = false;
		this.showCancel = false;
		this.showDesignPage = false;
	},
	ActionAdapter, {
		destroy: function() {
			this.sdataPage = null;
		},

		/**
		 * Returns items to be shown in the header
		 */
		getHeaderItems: function() {
			return this.getItems("header");
		},

		/**
		 * Returns items to be shown in the footer panel
		 */
		getFooterItems: function() {
			return this.getItems("footer");
		},

		/**
		 * 
		 */
		getGlobalPanelItems: function() {
			return this.getItems("globalPanel");
		},

		/**
		 * Returns items to be shown in the header
		 */
		getActionsPanelItems: function() {
			return this.getItems("actionsPanel");
		},

		_hasItems: function(panelName) {
			var items = this.getItems(panelName);
			return (items && items.length > 0) || false;
		},
		getItems: function(panelName) {
			var items = this._items[panelName];
			if (!items) {
				var func = "_compute" + panelName.smCapitalize() + "Items";
				items = this[func].call(this);
				this._items[panelName] = items;
			}
			return items;
		},

		_computeHeaderItems: function() {
			var items = [];
			if (siteLayout.getDeviceType() === "smartphone") {
				var controller = this.sdataPage.controller;
				var facet = controller.getFacet();
				switch (facet) {
					case "$query":
						this._addSdataLinkItem(items, "$create", controller, {});
						break;

					case "$details":
						this._addSdataLinkItem(items, "$edit", controller, {});
						this._addSdataLinkItem(items, "$delete", controller, {});
						break;

					case "$edit":
						this._addSdataActionItem(items, "$save", controller, {
							slot: "right"
						});
						break;
				}

				if (this.showAccept) {
					this._addAcceptButton(items, controller, {
						slot: "right"
					});
				}
				if (this.showCancel) {
					this._addCancelButton(items, controller, {
						slot: "right"
					});
				}

				if (this._hasItems("actionsPanel")) {
					this._addOpenActionsPanel(items, controller, {
						slot: "right"
					});
				}
			}

			return items;
		},
		_computeFooterItems: function() {
			var items = [];
			if (siteLayout.getDeviceType() === "smartphone") {
				// Usually, there is no footer on the smartphone so it's not a good idea to return items
				items = [];
			} else {
				var controller = this.sdataPage.controller;
				this._addHomeButton(items, controller, {
					slot: "left"
				});
				this._addPinButton(items, "pin", controller, {
					slot: "left"
				});

				var facet = controller.getFacet();
				switch (facet) {
					case "$query":
						this._addSdataLinkItem(items, "$create", controller, {
							slot: "right"
						});
						break;

					case "$details":
						this._addSdataLinkItem(items, "$edit", controller, {
							slot: "right"
						});
						this._addSdataLinkItem(items, "$delete", controller, {
							slot: "right"
						});
						this._addSdataLinkItem(items, "$query", controller, {
							slot: "right"
						});
						break;

					case "$edit":
						this._addSdataActionItem(items, "$save", controller, {
							slot: "right"
						});
						break;
				}

				if (this.showAccept) {
					this._addAcceptButton(items, controller, {
						slot: "right"
					});
				}
				if (this.showCancel) {
					this._addCancelButton(items, controller, {
						slot: "right"
					});
				}

				if (this._hasItems("actionsPanel")) {
					this._addOpenActionsPanel(items, controller, {
						slot: "right"
					});
				}
			}
			return items;
		},
		_computeGlobalPanelItems: function() {
			var items = [];
			var controller = this.sdataPage.controller;
			if (siteLayout.getDeviceType() === "smartphone") {
				this._addHomeButton(items, controller, {
					slot: "left"
				});
				this._addPinButton(items, "pin", controller, {
					slot: "left"
				});
				this._addSwitchContextButton(items, controller);
				this._addSettingsButton(items, controller);
				this._addAboutButton(items, controller);
				this._addLogoutButton(items, controller);
				this._addDevButton(items, controller);
				if (this.showDesignPage === true && environment.isDesktop()) {
					this._addDesignPageButton(items, controller);
				}
				this._addDraftsButton(items, 123, controller);
				this._addMailToButton(items, controller);
			} else {
				if (this.showDesignPage === true && environment.isDesktop()) {
					this._addDesignPageButton(items, controller);
				}
				this._addMailToButton(items, controller);
				this._addSwitchContextButton(items, controller);
				this._addSettingsButton(items, controller);
				this._addAboutButton(items, controller);
				this._addDevButton(items, controller);
				this._addDraftsButton(items, 0, controller);
				this._addLogoutButton(items, controller);
			}

			return items;
		},
		_computeActionsPanelItems: function() {
			var items = [];
			var controller = this.sdataPage.controller;

			var $links = controller.dataset.getLinks();
			for (var $linkName in $links) {
				if (!$linkName.smStartsWith("$")) {
					this._addSdataLinkItem(items, $linkName, controller, {
						slot: "links"
					});
				}
			}
			var $actions = controller.dataset.getActions();
			for (var $actionName in $actions) {
				if (!$actionName.smStartsWith("$")) {
					this._addSdataActionItem(items, $actionName, controller, {
						slot: "actions"
					});
				}
			}
			return items;
		},

		/**
		 * Add sdata link item if link is known in prototype
		 * 
		 * {
		 *   "name":		  // Unique name
		 * 	 "controller-id":
		 *   "sdata-$link":   // Sdata link ($edit)
		 *   "icon":		  // Optional, rendering control should use prototype and a default if possible
		 *   "title":		  // Optional, rendering control should use prototype
		 *   "$bind":		  // Optional: Property the link belongs too (for field level links)
		 * }
		 */
		_addSdataLinkItem: function(items, $linkName, controller, overrides) {
			var dataset = controller.dataset;
			var link = dataset.getLink($linkName);
			if (!link) {
				return;
			}

			var item = {
				"name": $linkName,
				"controller-id": controller.id,
				"$link": $linkName,
				"icon": $linkName,
				"title": dataset.resolveExpression(link.$title)
			}
			item = $.extend(true, {}, item, overrides);
			items.push(item);
		},

		/**
		 * Add sdata action item if action is known in prototype
		 * 
		 * {
		 *   "name":		  // Unique name
		 * 	 "controller-id":
		 *   "sdata-$link":   // Sdata link ($edit)
		 *   "icon":		  // Optional, rendering control should use prototype and a default if possible
		 *   "title":		  // Optional, rendering control should use prototype
		 * }
		 */
		_addSdataActionItem: function(items, $actionName, controller, overrides) {
			//var dataset = controller.dataset.getRoot(); // actions can only be defined on root level
			// Instead of the root level, we use the current level
			// if we are not at the root (e.g. row detail pages), there will be no actions displayed which is correct
			var dataset = controller.dataset;
			var action = dataset.getAction($actionName);
			if (!action) {
				return;
			}

			var item = {
				"name": $actionName,
				"controller-id": controller.id,
				"$action": $actionName,
				"icon": $actionName,
				"title": dataset.resolveExpression(action.$title)
			}
			item = $.extend(true, {}, item, overrides);
			items.push(item);
		}
	});