"use strict";

var Base = require('syracuse-tablet/html/js/wc/pages/html/pageHtmlBase').Page;

var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/wc/helpers/jsutils');
var locale = require('syracuse-tablet/html/js/wc/helpers/locale');
var nativeApp = require('syracuse-tablet/html/js/wc/helpers/native/native').getModule("nativeApp");
var settings = require('syracuse-tablet/html/js/wc/app/settings');

var waiting = require('syracuse-tablet/html/js/wc/utils/waiting');
var modules = require('syracuse-tablet/html/js/wc/common/modules');

var _templates = {
	main: '\
			<div class="s-m-loginform" style="position: relative;">\
				<div class="row s-m-login-info">\
					<div class="col-xs-offset-1 col-xs-10 col-sm-offset-3 col-sm-6 col-md-offset-4 col-md-4 col-lg-offset-4 col-lg-4">\
						<div id="login-reason-id" style="display: none;" class="alert alert-info" role="alert"></div>\
					</div>\
				</div>\
				<div id="s-m-login-online-id" class="row">\
					<div class="col-xs-offset-1 col-xs-10 col-sm-offset-3 col-sm-6 col-md-offset-4 col-md-4 col-lg-offset-4 col-lg-4">\
						<div class="panel panel-default">\
							<div  id="s-m-login-withoutcookie">\
								<div class="s-m-login-header main">\
									<span class="s-m-signin">{{label_signin}}</span>\
									<span class="s-m-brand">{{label_brand}}</span>\
									<span class="s-m-product">{{label_product}}</span>\
								</div>\
								\
								<div class="panel-body s-m-login-body" id="s-m-basic-fields-id">\
									<br>\
									<div class="form-group">\
										<input type="text" autocorrect="off" autocapitalize="off" value="" class="form-control s-m-login-form-input" placeholder="{{label_user}}"	id="login-user">\
									</div>\
									<br>\
									<div class="form-group">\
										<input type="password" autocorrect="off" autocapitalize="off" class="form-control s-m-login-form-input" placeholder="{{label_password}}" id="login-password">\
									</div>\
									<div class="form-group">\
										<center>\
											<label style="font-weight:normal"><input type="checkbox" id="s-m-remember-me-id">{{label_rememberme}}</input></label>\
										</center>\
									</div>\
									<button id="login-login" data-nevent data-naction="loginBasic" type="button" class="btn btn-primary s-m-signin-btn">{{act_login}}</button>\
								</div>\
								<div id="s-m-sageid-fields-id">\
									<div class="s-m-login-header" id="s-m-sageid-header">\
										<span class="s-m-signin">{{sageid_label_header}}</span>\
									</div>\
									<div class="panel-body s-m-login-body" id="s-m-sageid-body">\
										<button id="s-m-sageid-signin" data-nevent data-naction="loginSageId" type="button" class="btn btn-primary s-m-signin-btn">{{sageid_label_signin}}</button>\
									</div>\
								</div>\
								<div id="s-m-external-fields-id">\
									<div class="s-m-login-header" id="s-m-external-header">\
										<span class="s-m-signin">{{label_external}}</span>\
									</div>\
									<div class="panel-body s-m-login-body" id="s-m-external-body">\
										{{#each externals}} \
											<button style="margin-bottom:10px;" data-nevent data-naction="externalSignin" data-params="{{this.href}}" type="button" class="btn btn-primary s-m-signin-btn">{{this.title}}</button>\
										{{/each}} \
									</div>\
								</div> \
								<div id="s-m-login-noauth-id">\
									<div class="form-group">\
										<center>\
											{{no_auth_method}} \
											<br> \
											{{contact_admin}} \
										</center>\
									</div>\
								</div>\
							</div>\
						</div>\
					</div>\
				</div>\
				<div id="s-m-login-offline-id" class="row" style="display: none;">\
					<div class="col-xs-offset-1 col-xs-10 col-sm-offset-3 col-sm-6 col-md-offset-4 col-md-4 col-lg-offset-4 col-lg-4">\
						<div class="panel panel-default">\
							<div class="s-m-login-header"><span class="s-m-signin">{{label_signin}} </span> <span class="s-m-brand">{{label_brand}}</span> <span class="s-m-product">{{label_product}}</span></div>\
							<div class="s-m-login-header" id="s-m-offline-header">\
								<span class="s-m-signin">{{offline_label_header}}</span>\
							</div>\
							<div class="panel-body s-m-login-body" id="s-m-sageid-body">\
								<button id="s-m-offline-signin" data-nevent data-naction="offlinesignin" type="button" class="btn btn-primary s-m-signin-btn"> \
									<div id="s-m-offline-label">{{offline_label_signin_as}}</div> \
									<div id="s-m-offline-user-id"></div> \
								</button>\
							</div>\
						</div>\
					</div>\
				</div>\
				<div id="s-m-login-nooffline-id" class="row" style="display: none;">\
					<div class="col-xs-offset-1 col-xs-10 col-sm-offset-3 col-sm-6 col-md-offset-4 col-md-4 col-lg-offset-4 col-lg-4">\
						<div class="panel panel-default">\
							<div class="s-m-login-header" id="s-m-offline-header">\
									{{offline_notavail}}\
							</div>\
							<div class="panel-body s-m-login-body" id="s-m-sageid-body">\
								<div>{{offline_emptydb}}</div> \
							</div>\
						</div>\
					</div>\
				</div>\
			</div>\
		',
	message: '{{title}}<p>{{message}}</p>{{stack}}'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};


/**
 *
 * Login page takes the following options
 * 
 * options: {
 *   offline: true|false|null // optionally given by caller if known
 *   loginPreset: Name to preset
 *   onLogin: {
 *   
 *     // If a login was ok, the login page will redirect to this page
 *     gotoUrl: {
 *       url:
 *       method:
 *       options:
 *     }
 *   }
 * }
 */
exports.Page = utils.defineClass(
	function PageLogin(pageName, options) {
		options = options || {};
		Base.call(this, pageName, options);
		this._offline = (options.offline === true);
	},
	Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
		},
		getPageTitle: function() {
			return locale.text("global.pageTitle.login");
		},
		isRootPage: function() {
			return true;
		},
		isNoHistory: function() {
			return true;
		},
		render: function() {
			var self = this;
			// This adds login background image to the page
			this.$$elmt.addClass("login");
			return this._readLabels()
				.then(function() {
					var ctx = $.extend(true, {}, self._labels);
					self.$$contentRoot.append($(_getHtml("main", ctx)));
				});
		},
		afterRender: function() {
			var self = this;

			$('#s-m-basic-fields-id input', self.$$elmt).on('keyup', jsutils.bindFn(self._onEnterPressed, self));

			if (this.options.loginPreset) {
				$('#s-m-basic-fields-id input', self.$$elmt).val(this.options.loginPreset);
			}

			return $.smResolve()
				.then(function() {
					return self._showSupportedMethods();
				});
		},

		_onEnterPressed: function(e) {
			var self = this;
			if (e.which == 13 || e.keyCode == 13) {
				e.preventDefault();
				// This will check mandatory fields and set focus accordingly
				self._actLoginBasic();
			}
		},

		/**
		 * Do basic authentication login - input validation
		 */
		_actLoginBasic: function() {
			var self = this;
			var usr = self.$$elmt.find("#login-user").val();
			var pwd = self.$$elmt.find("#login-password").val();

			// User mandatory, so focus there
			if (usr == null || usr.length < 1) {
				self.$$elmt.find("#login-usr").focus();
				return;
			}
			// Password mandatory, so focus there
			if (pwd == null || pwd.length < 1) {
				self.$$elmt.find("#login-password").focus();
				return;
			}

			var rememberMe = $("#s-m-remember-me-id").is(':checked');
			if (nativeApp) {
				rememberMe = true;
			}

			this._loginBasic(usr, pwd, rememberMe);
		},

		/**
		 * Do basic authentication login - do login process
		 */
		_loginBasic: function(usr, pwd, rememberMe) {
			var self = this;
			var session = modules.get("session");

			var loginTask =
				$.smResolve()
				.then(function() {
					return settings.setLoginRememberMe(rememberMe)
				})
				.then(function() {
					return session.loginBasic(usr, pwd, rememberMe);
				})
				.fail(function(result) {
					var data = result && result.data;
					var $diag = data && data.$diagnoses && data.$diagnoses[0];
					$diag = $diag || (result && result.$diagnoses && result.$diagnoses[0]);
					var $message = $diag && $diag.$message;
					$message = $message || locale.text("login.failed");
					self._showMessage($message);

					if (result && result.offline) {
						self._offline = true;
					}

					return self._showSupportedMethods();
				});

			waiting.waitModal(loginTask)
				.then(function() {
					return self._onBasicLoginOk()
						.fail(function(error) {
							modules.get("modal").error(error);
						});
				});
		},

		/**
		 * Start sage id login
		 * Here just the redirect starts.
		 * When authenticated, sage id will redirect back causing a reload of the app
		 * So the login page will not be shown again since there will be a session
		 */
		_actLoginSageId: function() {
			var session = modules.get("session");
			session.loginSageId();
		},
		_actExternalSignin: function(param) {
			window.location.href = param;
		},
		_actOfflinesignin: function() {
			var self = this;
			return $.smResolve()
				.then(function() {
					return self._onOfflineLoginOk();
				})
				.fail(function(error) {
					modules.get("modal").error(error);
				});
		},

		_readLabels: function() {
			var self = this;
			var product = locale.getProductLabels();
			return self._ensureExternalProviders()
				.then(function() {
					self._labels = {
						"label_user": locale.text("login.label.user"),
						"label_password": locale.text("login.label.password"),
						"act_login": locale.text("login.label.signinaction"),
						"label_signin": locale.text("login.label.signin"),
						"label_brand": product.brand,
						"label_product": product.product,
						"sageid_label_header": locale.text("sageid.label.header"),
						"sageid_label_signin": locale.text("sageid.label.signin"),
						"offline_label_header": locale.text("login.label.offline"),
						"offline_label_signin_as": locale.text("login.label.login_as"),
						"offline_notavail": locale.text("login.offline.notavail"),
						"offline_emptydb": locale.text("login.offline.emptydb"),
						"label_forgetme": locale.text("login.forgetme"),
						"label_changeuser": locale.text("login.changeuser"),
						"label_rememberme": locale.text("login.rememberme"),
						"no_auth_method": locale.text("login.label.noauth"),
						"contact_admin": locale.text("contact.admin"),
						"label_external": locale.text("authentication.external.accs"),
						"externals": self._externalProviders
					};
				});
		},

		/**
		 * Adapt UI to online/offline and auth methods supported
		 */
		_showSupportedMethods: function() {
			var self = this;
			var session = modules.get("session");

			self._ensureAuthMethods()
				.then(function() {
					return self._showRememberMe();
				})
				.then(function() {
					if (self._offline) {
						return self._showOfflineMethods();
					} else {
						return self._showOnlineMethods();
					}
				});
		},

		_showOnlineMethods: function() {
			var self = this;
			var methods = {
				"sage-id": "s-m-sageid-fields-id",
				"basic": "s-m-basic-fields-id",
				"$$externals": "s-m-external-fields-id",
			};
			var count = 0;

			$("#s-m-login-online-id").show();
			$("#s-m-login-offline-id").hide();
			return $.smResolve()
				.then(function() {
					return self._ensureAuthMethods();
				})
				.then(function() {
					return self._ensureExternalProviders();
				})
				.then(function() {
					Object.keys(methods).forEach(function(method) {
						var id = methods[method];
						var $$block = $("#" + id);
						if (self._authMethods.$supported.indexOf(method) > -1) {
							count = count + 1;
							$$block.show();
						} else {
							$$block.hide();
						}
					})
				})
				.then(function() {
					if (count < 1) {
						$("#s-m-login-noauth-id").show();
					} else {
						$("#s-m-login-noauth-id").hide();
					}
				});
		},
		_ensureAuthMethods: function() {
			var self = this;
			if (self._authMethods) {
				return $.smResolve();
			}
			var session = modules.get("session");

			var def = $.Deferred();
			session.getAuthMethods()
				.then(function(list) {
					self._authMethods = list;
					def.resolve();
				})
				.fail(function(result) {
					self._authMethods = {
						$supported: []
					}
					if (result && result.offline) {
						self._offline = true;
						def.resolve();
					} else {
						def.reject(result);
					}
				})

			return def.promise();
		},
		_ensureExternalProviders: function() {
			var self = this;
			if (self._externalProviders) {
				return $.smResolve();
			}
			return self._ensureAuthMethods()
				.then(function() {
					self._externalProviders = [];
					if (self._authMethods.$supported.indexOf("saml2") > -1) {
						Array.prototype.push.apply(self._externalProviders, self._authMethods.$saml2 || []);
					}
					if (self._authMethods.$supported.indexOf("oauth2") > -1) {
						Array.prototype.push.apply(self._externalProviders, self._authMethods.$oauth2 || []);
					}
					if (self._externalProviders.length > 0) {
						self._authMethods.$supported.push("$$externals");
					}
				});
		},
		_showOfflineMethods: function() {
			var self = this;
			$("#s-m-login-online-id").hide();
			return $.smResolve()
				.then(function() {
					return settings.getLastUsedUserProfile();
				})
				.then(function(profile) {
					self._offlineProfile = profile;
					if (!profile) {
						$("#s-m-login-offline-id").hide();
						$("#s-m-login-nooffline-id").show();

					} else {
						$("#s-m-login-offline-id").show();
						$("#s-m-login-nooffline-id").hide();
						$("#s-m-offline-user-id").text((self._offlineProfile.user.firstName || "") + " " + (self._offlineProfile.user.lastName || ""));
					}
				});
		},

		_showRememberMe: function() {
			return $.smResolve()
				.then(function() {
					return settings.getLoginRememberMe();
				})
				.then(function(rememberMe) {
					var $$check = $("#s-m-remember-me-id");
					if (nativeApp) {
						rememberMe = true;
						$$check.closest(".form-group").hide();
					} else {
						$$check.closest(".form-group").show();
					}
					$$check.attr('checked', rememberMe);
				});
		},

		/**
		 * Basic authentication succeeded, preserve profile for next time and go to target page
		 */
		_onBasicLoginOk: function() {
			var self = this;
			var session = modules.get("session");
			return $.smResolve()
				.then(function() {
					return session.getCurrentUserProfile();
				})
				.then(function(profile) {
					return modules.get("appController").App.setUserProfile(profile)
						.then(function() {
							return profile;
						});
				})
				.then(function(profile) {
					return session.storeUserProfile(profile);
				})
				.then(function() {
					return self._openTargetPage();
				});
		},

		/**
		 * Offline authentication succeeded, go to target page
		 */
		_onOfflineLoginOk: function() {
			var self = this;
			return $.smResolve()
				.then(function() {
					return self._openTargetPage();
				});
		},

		/**
		 * After login, go to home page or to page given by the caller of the login page
		 */
		_openTargetPage: function() {
			var target = this.options && this.options.onLogin && this.options.onLogin.gotoUrl;
			if (!target) {
				target = {
					url: "html://home"
				};
			}

			return modules.get("navHelper").gotoUrl(target.url, target.method, target.options);
		},

		/**
		 * Show top diagnoses
		 */
		_showMessage: function(message) {
			var html = Handlebars.compile("{{message}}")({
				message: message
			});
			$("#login-reason-id").empty();
			$("#login-reason-id").html(html)
			$("#login-reason-id").show();

		},

		/**
		 * Hide top diagnoses
		 */
		_hideMessage: function() {
			$("#login-reason-id").hide();
		}
	}
);