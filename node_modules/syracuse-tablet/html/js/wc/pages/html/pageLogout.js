"use strict";

var Base = require('syracuse-tablet/html/js/wc/pages/html/pageHtmlBase').Page;

var utils = require('syracuse-tablet/html/js/wc/helpers/utils');
var locale = require('syracuse-tablet/html/js/wc/helpers/locale');
var nativeApp = require('syracuse-tablet/html/js/wc/helpers/native/native').getModule("nativeApp");
var modules = require('syracuse-tablet/html/js/wc/common/modules');

var _templates = {
	main: '\
			<div class="s-m-loginform" style="position: relative;">\
				<div class="row s-m-login-info">\
				</div>\
				<div id="s-m-login-online-id" class="row">\
					<div class="col-xs-offset-1 col-xs-10 col-sm-offset-3 col-sm-6 col-md-offset-4 col-md-4 col-lg-offset-4 col-lg-4">\
						<div class="panel panel-default">\
							<div>\
								<div class="s-m-login-header main">\
									<span class="s-m-signin">{{label_signin}}</span>\
									<span class="s-m-brand">{{label_brand}}</span>\
									<span class="s-m-product">{{label_product}}</span>\
								</div>\
								<div class="panel-body s-m-login-body">\
									<center>\
										<div>{{label_logged_out}}</div>\
									</center>\
								</div>\
								<div class="panel-body s-m-login-body" id="s-m-relogin-id" style="display: none;">\
									<button id="s-m-offline-signin" data-nevent data-naction="relogin" \
										type="button" class="btn btn-primary s-m-signin-btn"> \
										<div>{{label_login_as}}</div> \
										<div>{{label_last_user}}</div> \
									</button>\
								</div>\
								<div class="panel-body s-m-login-body" id="s-m-login-changeuser">\
									<button data-nevent data-naction="changeuser" type="button" class="btn btn-primary s-m-signin-btn">{{label_changeuser}}</button>\
								</div>\
								<div class="panel-body s-m-login-body" id="s-m-login-forgetme-id">\
									<button data-nevent data-naction="forgetme" type="button" class="btn btn-primary s-m-signin-btn">{{label_forgetme}}</button>\
								</div>\
							</div>\
						</div>\
					</div>\
				</div>\
			</div>\
		',
	message: '{{title}}<p>{{message}}</p>{{stack}}'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};


/**
 *
 */
exports.Page = utils.defineClass(
	function PageLogout(pageName, options) {
		options = options || {};
		Base.call(this, pageName, options);
	},
	Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
		},
		getPageTitle: function() {
			return locale.text("global.pageTitle.logout");
		},
		isRootPage: function() {
			return true;
		},
		isNoHistory: function() {
			return true;
		},
		render: function() {
			// This adds login background image to the page
			this.$$elmt.addClass("login");
			this._readLabels();
			var ctx = $.extend(true, {}, this._labels);

			this._userProfile = modules.get("appController").App.getCurrentUserProfile();
			if (this._userProfile) {
				this._authMethod = this._userProfile.user.authentication;
				this._lastUsername = (this._userProfile.user.firstName || "") + " " + (this._userProfile.user.lastName || "");
				this._lastLogin = this._userProfile.user.login;
				ctx.label_last_user = this._lastUsername;
			}
			this.$$contentRoot.append($(_getHtml("main", ctx)));
		},

		_readLabels: function() {
			var product = locale.getProductLabels();
			this._labels = {
				"label_brand": product.brand,
				"label_product": product.product,
				"label_forgetme": locale.text("login.forgetme"),
				"label_changeuser": locale.text("login.changeuser"),
				"label_logged_out": locale.text("logout.logged.out"),
				"label_login_as": locale.text("login.label.login_as")
			};
		},

		afterRender: function() {
			var self = this;
			if (this._userProfile) {
				$("#s-m-relogin-id").show();
			}
			return $.smResolve()
				.then(function() {
					var session = modules.get("session");
					return session.getReconnectToken();
				})
				.then(function(token, login, sid, loginCookieName, sidCookieName) {
					$("#s-m-login-forgetme-id").toggle(token != null);
				});
		},

		_actRelogin: function() {
			var self = this;
			if (this._authMethod === "sage-id") {
				var session = modules.get("session");
				session.loginSageId();
			} else if (["basic", "db", "ldap"].indexOf(this._authMethod) > -1) {
				// Method that is handled by syracuse/http basic authentication with no redirects
				self._gotoLogin({
					"loginPreset": this._lastLogin
				});
			} else {
				this._actChangeuser();
			}
		},
		_actChangeuser: function() {
			this._gotoLogin();
		},
		_actForgetme: function() {
			var self = this;
			var session = modules.get("session");
			session.forgetMe()
				.always(function() {
					self._gotoLogin();
				});
		},
		_gotoLogin: function(options) {
			return modules.get("navHelper").gotoUrl("html://login", null, options);
		},
	}
);