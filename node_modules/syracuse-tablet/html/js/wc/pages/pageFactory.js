"use strict";

var sdataReq = require("syracuse-tablet/html/js/wc/sdata/sdataRequester");
var helpers = require("syracuse-tablet/html/js/wc/common/helpers");
var settings = require('syracuse-tablet/html/js/wc/app/settings');
var filterHelper = require('syracuse-tablet/html/js/wc/helpers/filterHelper');
var protoHelpers = require('syracuse-tablet/html/js/wc/sdata/protocolHelpers');

var _classes = {
	PageSdata: require("syracuse-tablet/html/js/wc/pages/sdata/pageSdata").Page,
	PageSdataQuery: require("syracuse-tablet/html/js/wc/pages/sdata/pageSdataQuery").Page,
	PageSdataLookup: require("syracuse-tablet/html/js/wc/pages/sdata/pageSdataLookup").Page,

	PageSdataDashboard: require("syracuse-tablet/html/js/wc/pages/sdata/pageSdataDashboard").Page,
	PageHome: require("syracuse-tablet/html/js/wc/pages/sdata/pageHome").Page,

	PageLogin: require("syracuse-tablet/html/js/wc/pages/html/pageLogin").Page,
	PageLogout: require("syracuse-tablet/html/js/wc/pages/html/pageLogout").Page,

	PageSdataRowDetail: require("syracuse-tablet/html/js/wc/pages/sdata/pageSdataRowDetail").Page,
	PageSdataChartDetail: require("syracuse-tablet/html/js/wc/pages/sdata/pageSdataChartDetail").Page,
	PageSdataCardDetail: require("syracuse-tablet/html/js/wc/pages/sdata/pageSdataCardDetail").Page,
}

var _htmlPages = {
	login: _classes.PageLogin,
	logout: _classes.PageLogout,
	home: _classes.PageHome
};

var _childPages = {
	SdataRowDetail: _classes.PageSdataRowDetail,
	SdataChartDetail: _classes.PageSdataChartDetail,
	SdataCardDetail: _classes.PageSdataCardDetail
}

/**
 * pageCreateData: 
 * 
 * Data that describes on how to create the page
 * Should be simple data only, no class instances so that the navigation stack
 * can re-create pages autonomously without knowing internals
 */
exports.createPage = function(pageCreateData) {
	var url = pageCreateData.url;
	var method = pageCreateData.method;
	var options = pageCreateData.options || {};
	var fetchOptions = {
			data: null,
			isChartDetail: pageCreateData.options.isChartDetail === true
		}
		//for chartdetail level is in pageCreateData.options.level (0 for first ...)
		// First guess of a page name, could be changed later by transforms
	pageCreateData.name = pageCreateData.name || protoHelpers.getPageName(url);
	// pagePrefsId != null if isVignette
	pageCreateData.pagePrefsId = options.isVignette ? options.pagePrefsId : settings.getPagePrefsId(pageCreateData.name);
	if (options.isVignette && options.$vignetteArticle) {
		// Force vignette's article
		fetchOptions.page = {
			$article: $.extend(true, null, options.$vignetteArticle)
		};
	} else if (options.$mockArticle) {
		// used by mockup
		fetchOptions.page = {
			$article: $.extend(true, null, options.$mockArticle)
		};
	}
	return $.smResolve()
		.then(function() {
			if (url.indexOf("/mobile2/") > -1) {
				return _fetchSDataPageData(url, fetchOptions, method, pageCreateData.pagePrefsId)
					.then(function(pageData) {
						pageData.$url = url;
						pageData.$method = method;

						var page = _createSdataPage(pageData, pageCreateData, options);
						return page;
					});
			} else if (url.indexOf("html://") === 0) {
				return _createHtmlPage(pageCreateData.name, options);
			} else if (url.indexOf("child://") === 0) {
				return _createChildPage(pageCreateData.name, options);
			}

			return $.smReject(helpers.createDiag(null, "ERROR", "Unknown page type", JSON.stringify(pageCreateData)));
		});
}

/*
 * 
 */
function _fetchSDataPageData(url, options, method, pagePrefsId) {
	var pageSettings;
	return $.smResolve()
		.then(function() {
			return settings.readUserPagePrefs(pagePrefsId)
		})
		.then(function(settings) {
			settings.isDirty = false;
			return settings;
		})
		.then(function(settings) {
			pageSettings = settings;
			var opts = {
				"$url": url,
				"sortInfo": settings.sort,
				"filterInfos": settings.filter,
				"searchInfo": settings.search,
			}
			var $url;
			if (url.indexOf(".$query") > -1) {
				$url = filterHelper.filterSortUpdateUrl(opts);
			}
			$url = $url || url;

			var _page = {
				"$url": $url,
				"$method": method || "GET"
			};
			return sdataReq.fetchPageData(_page, options);
		})
		.then(function(pageData) {
			pageData.settings = pageSettings;
			pageData.$originalUrl = url; // Url used to introduce page loading
			return pageData;
		})
}
/**
 * 
 */
function _createSdataPage(pageData, pageCreateData, options) {
	var proto = pageData.prototype;
	var facet = proto.getFacet();
	if (options.isChartDetail) facet = "$chartDetail"
	var $url = proto.getValueByPath("$url", true);
	var syrRepr = proto.getValueByPath("$representation");

	// This can be put into test mock data to allow a page implementation class to be selected by payload
	// Only for testing purposes
	if (pageData.dataset.json.$sdataPageClassHint) {
		pageData.name = pageCreateData.name;
		return new _classes[pageData.dataset.json.$sdataPageClassHint](pageData, options);
	}

	// A dashboard is also an sdata entity but with a very special rendering
	if (syrRepr === "mobileDashboard") {
		pageData.name = pageData.dataset.json.dashboardName + ".$mobileDashboard";
		// http://localhost:8124/sdata/syracuse/collaboration/syracuse/mobileDashboards(dashboardName%20eq%20'STD_X3_ERP_EXPENSES_DASHBOARD')?representation=mobileDashboard.$details
		return new _classes.PageSdataDashboard(pageData, options);
	}

	pageData.name = pageCreateData.name;
	switch (facet) {
		case "$query":
			return new _classes.PageSdataQuery(pageData, options);

		case "$lookup":
			return new _classes.PageSdataLookup(pageData, options);
		case "$chartDetail":
			return new _classes.PageSdataChartDetail(pageData, options);
		default:
			return new _classes.PageSdata(pageData, options);

	}
}

/**
 * 
 * 
 */
function _createHtmlPage(pageName, options) {
	return $.smResolve()
		.then(function() {
			var pageClass = _htmlPages[pageName];
			if (!pageClass) {
				throw new Error("Html page " + pageName + " not found")
				return;
			}
			var page = new pageClass(pageName, options);
			return page;
		});
}

function _createChildPage(pageName, options) {
	return $.smResolve()
		.then(function() {
			var pageClass = _childPages[pageName];
			if (!pageClass) {
				throw new Error("Child page " + pageName + " not found")
				return;
			}
			// Page data will be created by child page since it's usually just pointing to the parent page
			// See pageSdataChildPage
			var pageData = {};
			pageData.page = {};
			options = options || {};
			options.childPageName = pageName;
			return new pageClass(pageData, options);
		});

}