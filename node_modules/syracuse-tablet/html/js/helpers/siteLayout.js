"use strict";

/*
 * Bootstrap min sizes per level
 * =============================
 *
 * xs:                  480px;
 * sm:                  768px;
 * md:                  992px;
 * lg:                  1200px;
 *
 */

/*
 * Some devices
 * ============
 *
 * iPad: 1024×768
 * Nexus 7: 1920 × 1200
 * Nexus 10: 2560x1600
 *
 */

/*
 * Needs to be aligned with bootstrap responsiveness!
 * Not, pixel sized defined here match values of media queries or top / left / width /height css attributes.
 * But these are not physical pixels because some devices have a pixel ration physical > logical
 *
 * See: http://bjango.com/articles/min-device-pixel-ratio/
 * We need to work with logical pixel units
 *
 * E.g. Nexus 10 has a 2560x1600 display but reports 1280x800 because ratio is 2.0
 * E.g. Nexus 5 has a 1080x1920 display but reports 360x1080 because ratio is 3.0
 *
 */

var _deviceSizes = {
	phone: {
		width: 640, // Nexus 5
		height: 360,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-xs",
			landscape: "s-m-auth-col-simulate-xs"
		},
		deviceClass: "smartphone",
		orientations: ["portrait", "landscape"]
	},
	minitablet: { // Nexus 7
		width: 960,
		height: 600,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-xs",
			landscape: "s-m-auth-col-simulate-sm"
		},
		deviceClass: "minitablet",
		orientations: ["portrait", "landscape"]
	},
	tablet: { // Nexus 10
		width: 1280,
		height: 800,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-sm",
			landscape: "s-m-auth-col-simulate-lg"
		},
		deviceClass: "tablet",
		orientations: ["portrait", "landscape"]
	},
	nexus5: {
		width: 640, // Nexus 5
		height: 360,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-xs",
			landscape: "s-m-auth-col-simulate-xs"
		},
		deviceClass: "smartphone",
		orientations: ["portrait", "landscape"]
	},
	nexus7: { // Nexus 7
		width: 960,
		height: 600,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-xs",
			landscape: "s-m-auth-col-simulate-sm"
		},
		deviceClass: "minitablet",
		orientations: ["portrait", "landscape"]
	},
	nexus10: { // Nexus 10
		width: 1280,
		height: 800,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-sm",
			landscape: "s-m-auth-col-simulate-lg"
		},
		deviceClass: "tablet",
		orientations: ["portrait", "landscape"]
	},
	ipad: {
		width: 1024,
		height: 768,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-sm",
			landscape: "s-m-auth-col-simulate-lg"
		},
		deviceClass: "tablet",
		orientations: ["portrait", "landscape"]
	},
	iphone4: {
		width: 480,
		height: 320,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-sm",
			landscape: "s-m-auth-col-simulate-lg"
		},
		deviceClass: "smartphone",
		orientations: ["portrait", "landscape"]
	},
	iphone5: {
		width: 568,
		height: 320,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-sm",
			landscape: "s-m-auth-col-simulate-lg"
		},
		deviceClass: "smartphone",
		orientations: ["portrait", "landscape"]
	},
	iphone6: {
		width: 667,
		height: 375,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-sm",
			landscape: "s-m-auth-col-simulate-lg"
		},
		deviceClass: "smartphone",
		orientations: ["portrait", "landscape"]
	},
	iphone6plus: { // Nexus 10
		width: 960,
		height: 540,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-sm",
			landscape: "s-m-auth-col-simulate-lg"
		},
		deviceClass: "smartphone",
		orientations: ["portrait", "landscape"]
	}
};

/*
 * Classes that can be put on a container to override the css media selector that use device screen sizes
 */
var _bootstrapTweakClasses = ["s-m-auth-col-simulate-xs", "s-m-auth-col-simulate-sm", "s-m-auth-col-simulate-md", "s-m-auth-col-simulate-lg"];

/*
 *
 * This module is responsibe to layout main layout components in the browser window:
 *
 * HEADER    | AUTHORING
 * CONTENT   | PANEL
 * FOOTER    |
 *
 */

var utils = require('syracuse-tablet/html/js/helpers/utils');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _currentOrientation = null;

// Parameters that are currently applied
var _layoutParameters = {
	authPanelRight: {
		width: 200,
		splitterWidth: 20,
		visible: false
	},
	authPanelLeft: {
		width: 200,
		splitterWidth: 20,
		visible: false
	},
	pageParameters: {
		forcePreview: false,
		forceAutoScale: false,
		device: "tablet",
		orientation: "landscape",
		scale: 1
	},
};

// Parameters that are actually used (calculated and maybe changed based on _layoutParameters)
var _internalParameters;

/*
 * To detect orientation change in browser window compared to last call of this function
 */
function _isOrientationChange() {
	var width = $(window).width();
	var height = $(window).height();

	var ratio = width / height;
	var orientation;

	if (ratio < 1) {
		orientation = "portrait";
	} else {
		orientation = "landscape";
	}
	if (orientation == _currentOrientation || _currentOrientation == null) {
		_currentOrientation = orientation;
		return false;
	}
	_currentOrientation = orientation;
	return true;
}

/*
 * Triggered by browser window change
 */
exports.updateLayout = function(evt, opts) {
	// If browser window size change but orientation did not change, the the software keyboard has been rendered and
	// there MUST NOT be a resize to not loose focus.
	// On desktop devices, we can do the resize without any harm
	if (_isOrientationChange() || utils.isDesktop()) {
		if (opts && opts.layout) {
			_layoutParameters = $.extend(true, _layoutParameters, opts.layout);
		}
		_layoutMainContainers();
	}
};

/*
 * Triggered by application JS code
 */
exports.updateLayoutInternal = function(evt, opts) {
	if (opts && opts.layout) {
		_layoutParameters = $.extend(true, _layoutParameters, opts.layout);
	}
	_layoutMainContainers();
};

/*
 * Layout main containers like header, content, footer, authoring panel
 */
function _layoutMainContainers() {
	var width = $(window).width();
	var height = $(window).height();
	var containerBgColor = "transparent";
	var containerClass = null;
	var contentBgColor = "transparent";

	var authPanelRightWidth = 0;
	var authPanelLeftWidth = 0;
	var authPanelRightSplitterWidth = 0;
	var authPanelLeftSplitterWidth = 0;

	var $$authRight = $("#s-m-auth-panel-right-id");
	var $$authLeft = $("#s-m-auth-panel-left-id");
	var $$app = $("#s-m-app-id");
	var $$appContainer = $("#s-m-app-container-id");

	_internalParameters = $.extend(true, _layoutParameters);

	if (_internalParameters.authPanelRight.visible) {
		authPanelRightWidth = _internalParameters.authPanelRight.width;
		authPanelRightSplitterWidth = _internalParameters.authPanelRight.splitterWidth;
		_layoutAuthPanelRight(width, height);
		_internalParameters.pageParameters.forcePreview = true;
	}
	if (_internalParameters.authPanelLeft.visible) {
		authPanelLeftWidth = _internalParameters.authPanelLeft.width;
		authPanelLeftSplitterWidth = _internalParameters.authPanelLeft.splitterWidth;
		_layoutAuthPanelLeft(width, height);
		_internalParameters.pageParameters.forcePreview = true;
	}

	var applicationWidth = width - authPanelRightWidth - authPanelRightSplitterWidth - authPanelLeftWidth - authPanelLeftSplitterWidth;
	var applicationHeight = height;

	var appView;

	if (_internalParameters.pageParameters.forcePreview === true) {
		var device = _internalParameters.pageParameters.device || "tablet";
		var template = _deviceSizes[device] || _deviceSizes["tablet"];
		appView = {
			left: 0,
			top: 0,
			width: _internalParameters.pageParameters.orientation === "landscape" ? template.width : template.height,
			height: _internalParameters.pageParameters.orientation === "landscape" ? template.height : template.width,
		};

		containerClass = template.bootstrapTweakClass[_internalParameters.pageParameters.orientation];

		// Auto scale
		if (_internalParameters.pageParameters.forceAutoScale) {
			_internalParameters.pageParameters.scale = Math.min(Math.min(applicationWidth / appView.width, applicationHeight / appView.height), 1);
		}

		appView.left = (applicationWidth - appView.width * _internalParameters.pageParameters.scale) / 2;
		appView.top = (applicationHeight - appView.height * _internalParameters.pageParameters.scale) / 2;
		appView.left = appView.left > 0 ? appView.left : 0;
		appView.top = appView.top > 0 ? appView.top : 0;

		containerBgColor = "#555";
		contentBgColor = "white";
	} else {
		appView = {
			left: 0,
			top: 0,
			width: applicationWidth,
			height: applicationHeight
		};
		_internalParameters.pageParameters.orientation = _currentOrientation;
	}

	// Container including header, content, footer
	$$app.css({
		top: appView.top,
		left: appView.left,
		width: appView.width,
		height: appView.height,
		"background-color": contentBgColor
	});
	if (_internalParameters.pageParameters.forcePreview && _internalParameters.pageParameters.scale !== 1) {
		$$app.css({
			"transform": "scale(" + _internalParameters.pageParameters.scale + ", " + _internalParameters.pageParameters.scale + ")",
			"transform-origin": "left top"
		});
	} else {
		$$app.css({
			"transform": "",
			"transform-origin": ""
		});
	}
	_bootstrapTweakClasses.forEach(function(cls) {
		if (cls != containerClass) {
			$$app.removeClass(cls);
		}
	});
	if (containerClass) {
		$$app.addClass(containerClass);
	}

	// Container including header, content, footer
	$$appContainer.css({
		top: 0,
		left: authPanelLeftWidth + authPanelLeftSplitterWidth,
		width: applicationWidth,
		height: applicationHeight,
		"background-color": containerBgColor
	});

	// Allow other components like authoring panel or page content to be resized
	notifications.publish("sm.main.layout.changed", {
		application: appView
	}, _internalParameters.pageParameters.orientation);

}

function _layoutAuthPanelRight(width, height) {
	var $$auth = $("#s-m-auth-panel-right-id");
	var $$splitter = $("#s-m-auth-splitter-right-id");
	$$auth.css({
		left: width - _internalParameters.authPanelRight.width,
		top: 0,
		width: _internalParameters.authPanelRight.width,
		height: height
	});
	$$splitter.css({
		left: width - _internalParameters.authPanelRight.width - _internalParameters.authPanelRight.splitterWidth,
		top: 0,
		width: _internalParameters.authPanelRight.splitterWidth,
		height: height
	});
}

function _layoutAuthPanelLeft(width, height) {
	var $$auth = $("#s-m-auth-panel-left-id");
	var $$splitter = $("#s-m-auth-splitter-left-id");
	$$auth.css({
		left: 0,
		top: 0,
		width: _internalParameters.authPanelLeft.width,
		height: height
	});
	$$splitter.css({
		left: _internalParameters.authPanelLeft.width,
		top: 0,
		width: _internalParameters.authPanelLeft.splitterWidth,
		height: height
	});
}


exports.getDeviceTemplates = function() {
	return _deviceSizes;
};

exports.getDeviceClass = function() {
	if (_internalParameters.pageParameters.forcePreview === true) {
		var device = _internalParameters.pageParameters.device || "tablet";
		var template = _deviceSizes[device] || _deviceSizes["tablet"];
		return template.deviceClass;
	} else {
		return "tablet";
	}
};

exports.getPageOrientation = function() {
	return _internalParameters.pageParameters.orientation;
};

exports.getCurrentOrientationSettings = function() {
	return $.extend(true, _layoutParameters);
};