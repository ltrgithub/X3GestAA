"use strict";

/*
 * Bootstrap min sizes per level
 * =============================
 *
 * xs:                  480px;
 * sm:                  768px;
 * md:                  992px;
 * lg:                  1200px;
 *
 */

/*
 * Some devices
 * ============
 *
 * iPad: 1024×768
 * Nexus 7: 1920 × 1200
 * Nexus 10: 2560x1600
 *
 */

/*
 * Needs to be aligned with bootstrap responsiveness!
 * Not, pixel sized defined here match values of media queries or top / left / width /height css attributes.
 * But these are not physical pixels because some devices have a pixel ration physical > logical
 *
 * See: http://bjango.com/articles/min-device-pixel-ratio/
 * We need to work with logical pixel units
 *
 * E.g. Nexus 10 has a 2560x1600 display but reports 1280x800 because ratio is 2.0
 * E.g. Nexus 5 has a 1080x1920 display but reports 360x1080 because ratio is 3.0
 *
 */

var _deviceSizes = {
	phone: {
		width: 640, // Nexus 5
		height: 360,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-xs",
			landscape: "s-m-auth-col-simulate-xs"
		}
	},
	minitablet: { // Nexus 7
		width: 960,
		height: 600,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-xs",
			landscape: "s-m-auth-col-simulate-sm"
		}
	},
	tablet: { // Nexus 10
		width: 1280,
		height: 800,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-sm",
			landscape: "s-m-auth-col-simulate-lg"
		}
	}
};

/*
 * Classes that can be put on a container to override the css media selector that use device screen sizes
 */
var _bootstrapTweakClasses = ["s-m-auth-col-simulate-xs", "s-m-auth-col-simulate-sm", "s-m-auth-col-simulate-md", "s-m-auth-col-simulate-lg"];

/*
 *
 * This module is responsibe to layout main layout components in the browser window:
 *
 * HEADER    | AUTHORING
 * CONTENT   | PANEL
 * FOOTER    |
 *
 */

var utils = require('syracuse-tablet/html/js/helpers/utils');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _currentOrientation = null;
var _layoutParameters = {
	header: {
		height: 50
	},
	footer: {
		height: 50
	},
	authPanelRight: {
		width: 300,
		splitterWidth: 20
	},
	authPanelLeft: {
		width: 300,
		splitterWidth: 20
	},
	authoringParameters: {
		device: "tablet",
		orientation: "landscape"
	}
};

/*
 * To detect orientation change in browser window compared to last call of this function
 */
function _isOrientationChange() {
	var width = $(window).width();
	var height = $(window).height();

	var ratio = width / height;
	var orientation;

	if (ratio < 1) {
		orientation = "portrait";
	} else {
		orientation = "landscape";
	}
	if (orientation == _currentOrientation) {
		return false;
	}
	_currentOrientation = orientation;
	return true;
}

/*
 * Triggered by browser window change
 */
exports.updateLayout = function(evt, opts) {
	// If browser window size change but orientation did not change, the the software keyboard has been rendered and
	// there MUST NOT be a resize to not loose focus.
	// On desktop devices, we can do the resize without any harm
	if (_isOrientationChange() || utils.isDesktop()) {
		_layoutMainContainers();
	}
};

/*
 * Triggered by application JS code
 */
exports.updateLayoutInternal = function(evt, opts) {
	if (opts && opts.layout) {
		_layoutParameters = $.extend(true, _layoutParameters, opts.layout);
	}
	_layoutMainContainers();
};

/*
 * Layout main containers like header, content, footer, authoring panel
 */
function _layoutMainContainers() {
	var width = $(window).width();
	var height = $(window).height();
	var authoringActive = false;
	var containerBgColor = "transparent";
	var containerClass = null;
	var contentBgColor = "transparent";

	var authPanelRightWidth = 0;
	var authPanelLeftWidth = 0;
	var authPanelRightSplitterWidth = 0;
	var authPanelLeftSplitterWidth = 0;

	var $$authRight = $("#s-m-auth-panel-right-id");
	var $$authLeft = $("#s-m-auth-panel-left-id");
	var $$app = $("#s-m-app-id");
	var $$appContainer = $("#s-m-app-container-id");

	if ($$authRight.css("display") == "block") {
		authoringActive = true;
		authPanelRightWidth = _layoutParameters.authPanelRight.width;
		authPanelRightSplitterWidth = _layoutParameters.authPanelRight.splitterWidth;
		_layoutAuthPanelRight(width, height);
	}
	if ($$authLeft.css("display") == "block") {
		authoringActive = true;
		authPanelLeftWidth = _layoutParameters.authPanelLeft.width;
		authPanelLeftSplitterWidth = _layoutParameters.authPanelLeft.splitterWidth;
		_layoutAuthPanelLeft(width, height);
	}

	var applicationWidth = width - authPanelRightWidth - authPanelRightSplitterWidth - authPanelLeftWidth - authPanelLeftSplitterWidth;
	var applicationHeight = height;

	var $$header = $(".s-m-page.s-m-full > header");
	var $$content = $(".s-m-page.s-m-full > section.s-m-main-content");
	var $$footer = $(".s-m-page.s-m-full > footer");


	var appView;

	if (authoringActive === true) {
		var device = _layoutParameters.authoringParameters.device || "tablet";
		var template = _deviceSizes[device] || _deviceSizes["tablet"];
		appView = {
			left: 0,
			top: 0,
			width: _layoutParameters.authoringParameters.orientation === "landscape" ? template.width : template.height,
			height: _layoutParameters.authoringParameters.orientation === "landscape" ? template.height : template.width,
		};

		containerClass = template.bootstrapTweakClass[_layoutParameters.authoringParameters.orientation];

		appView.left = (applicationWidth - appView.width) / 2;
		appView.top = (applicationHeight - appView.height) / 2;
		appView.left = appView.left > 0 ? appView.left : 0;
		appView.top = appView.top > 0 ? appView.top : 0;

		containerBgColor = "#555";
		contentBgColor = "white";
	} else {
		appView = {
			left: 0,
			top: 0,
			width: applicationWidth,
			height: applicationHeight
		};
	}

	_bootstrapTweakClasses.forEach(function(cls) {
		if (cls != containerClass) {
			$$app.removeClass(cls);
		}
	});
	if (containerClass) {
		$$app.addClass(containerClass);
	}

	// Container including header, content, footer
	$$appContainer.css({
		top: 0,
		left: authPanelLeftWidth + authPanelLeftSplitterWidth,
		width: applicationWidth,
		height: applicationHeight,
		"background-color": containerBgColor
	});


	var contentHeight = appView.height - _layoutParameters.header.height - _layoutParameters.footer.height;
	// Container including header, content, footer
	$$app.css({
		top: appView.top,
		left: appView.left,
		width: appView.width,
		height: appView.height,
		"background-color": contentBgColor
	});

	// Position header, content, footer
	$$header.css({
		top: 0,
		left: 0,
		width: appView.width,
		height: _layoutParameters.header.height
	});
	$$content.css({
		top: _layoutParameters.header.height,
		left: 0,
		width: appView.width,
		height: contentHeight,
	});
	$$footer.css({
		top: _layoutParameters.header.height + contentHeight,
		left: 0,
		width: appView.width,
		height: _layoutParameters.header.height
	});

	// Allow other components like authoring panel or page content to be resized
	notifications.publish("sm.main.layout.changed");
}

function _layoutAuthPanelRight(width, height) {
	var $$auth = $("#s-m-auth-panel-right-id");
	var $$splitter = $("#s-m-auth-splitter-right-id");
	$$auth.css({
		left: width - _layoutParameters.authPanelRight.width,
		top: 0,
		width: _layoutParameters.authPanelRight.width,
		height: height
	});
	$$splitter.css({
		left: width - _layoutParameters.authPanelRight.width - _layoutParameters.authPanelRight.splitterWidth,
		top: 0,
		width: _layoutParameters.authPanelRight.splitterWidth,
		height: height
	});
}

function _layoutAuthPanelLeft(width, height) {
	var $$auth = $("#s-m-auth-panel-left-id");
	var $$splitter = $("#s-m-auth-splitter-left-id");
	$$auth.css({
		left: 0,
		top: 0,
		width: _layoutParameters.authPanelLeft.width,
		height: height
	});
	$$splitter.css({
		left: _layoutParameters.authPanelLeft.width,
		top: 0,
		width: _layoutParameters.authPanelLeft.splitterWidth,
		height: height
	});
}