"use strict";

// var serverLog = require('syracuse-tablet/html/js/helpers/serverLog');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

/*
 *
 * This module is responsibe to layout main layout components in the browser window:
 *
 * HEADER    | AUTHORING
 * CONTENT   | PANEL
 * FOOTER    |
 *
 */


/*
 * Bootstrap min sizes per level
 * =============================
 *
 * xs:                  480px;
 * sm:                  768px;
 * md:                  992px;
 * lg:                  1200px;
 *
 */

/*
 * Some devices
 * ============
 *
 * iPad: 1024×768
 * Nexus 7: 1920 × 1200
 * Nexus 10: 2560x1600
 *
 */

/*
 * Needs to be aligned with bootstrap responsiveness!
 * Not, pixel sized defined here match values of media queries or top / left / width /height css attributes.
 * But these are not physical pixels because some devices have a pixel ration physical > logical
 *
 * See: http://bjango.com/articles/min-device-pixel-ratio/
 * We need to work with logical pixel units
 *
 * E.g. Nexus 10 has a 2560x1600 display but reports 1280x800 because ratio is 2.0
 * E.g. Nexus 5 has a 1080x1920 display but reports 360x1080 because ratio is 3.0
 *
 */
//Parameters that are actually used (calculated and maybe changed based on _layoutParameters)
var _internalParameters;
var _lastWindowWidth;
var _lastWindowHeight;
$(function() {
	_lastWindowWidth = $(window).width();
	_lastWindowHeight = $(window).height();
});

/*
 * To detect orientation change in browser window compared to last call of this function
 */
function _getWindowOrientation() {
	var width = $(window).width();
	var height = $(window).height();
	var ratio = width / height;
	if (ratio < 1) {
		return "portrait";
	} else {
		return "landscape";
	}
}

var _getCurrentDeviceType = function() {
	var currentDeviceType;
	var a = navigator.userAgent.toLowerCase();

	if (a.indexOf("iphone") >= 0) {
		currentDeviceType = "smartphone";
	} else if (a.indexOf("ipad") >= 0) {
		currentDeviceType = "tablet";
	} else {
		if (a.indexOf("mobile") >= 0) { // android smartphones report "mobile" while tablets do not
			currentDeviceType = "smartphone";
		} else {
			currentDeviceType = "tablet";
		}
	}
	return currentDeviceType;
};

/*
 *
 * NOTE: IF you change s-m-auth-col-simulate* classes assigned to a device here, you need to also check
 * the CSS media selectors in thirdparty_custom.less
 *
 */
var _deviceSizes = {
	nexus5: {
		width: 640, // Nexus 5
		height: 360,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-xs",
			landscape: "s-m-auth-col-simulate-sm"
		},
		deviceType: "smartphone",
		orientations: ["portrait", "landscape"]
	},
	nexus7: { // Nexus 7
		width: 960,
		height: 600,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-sm",
			landscape: "s-m-auth-col-simulate-md"
		},
		deviceType: "tablet",
		orientations: ["portrait", "landscape"]
	},
	nexus10: { // Nexus 10
		width: 1280,
		height: 800,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-sm",
			landscape: "s-m-auth-col-simulate-lg"
		},
		deviceType: "tablet",
		orientations: ["portrait", "landscape"]
	},
	ipad: {
		width: 1024,
		height: 768,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-sm",
			landscape: "s-m-auth-col-simulate-lg"
		},
		deviceType: "tablet",
		orientations: ["portrait", "landscape"]
	},
	iphone4: {
		width: 480,
		height: 320,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-xs",
			landscape: "s-m-auth-col-simulate-xs"
		},
		deviceType: "smartphone",
		orientations: ["portrait", "landscape"]
	},
	iphone5: {
		width: 568,
		height: 320,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-xs",
			landscape: "s-m-auth-col-simulate-xs"
		},
		deviceType: "smartphone",
		orientations: ["portrait", "landscape"]
	},
	iphone6: {
		width: 667,
		height: 375,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-xs",
			landscape: "s-m-auth-col-simulate-sm"
		},
		deviceType: "smartphone",
		orientations: ["portrait", "landscape"]
	},
	iphone6plus: {
		width: 960,
		height: 540,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-xs",
			landscape: "s-m-auth-col-simulate-md"
		},
		deviceType: "smartphone",
		orientations: ["portrait", "landscape"]
	}
};

/*
 * Classes that can be put on a container to override the css media selector that use device screen sizes
 */
var _bootstrapTweakClasses = ["s-m-auth-col-simulate-xs", "s-m-auth-col-simulate-sm", "s-m-auth-col-simulate-md", "s-m-auth-col-simulate-lg"];


var _currentOrientation = _getWindowOrientation();
var _splitterWidth = 15;
// Parameters that are currently applied
var _layoutParameters = {
	authPanelRight: {
		width: 230,
		splitterWidth: _splitterWidth,
		visible: false
	},
	authPanelLeft: {
		width: 300,
		splitterWidth: _splitterWidth,
		visible: false
	},
	authPanelHeader: {
		height: 34,
	},
	authPanelFooter: {
		height: 34,
	},
	pageParameters: {
		forcePreview: false,
		forceAutoScale: true,
		scale: 1
	},
};
// Better initilization for pageParameters
_layoutParameters.pageParameters.orientation = _currentOrientation;
_layoutParameters.pageParameters.deviceType = _getCurrentDeviceType();


/** Header/Footer height */
var _heights = {
	"tablet": {
		header: 50,
		footer: {
			opened: 50,
			closed: 20
		}
	},
	"smartphone": {
		header: 50,
		footer: {
			opened: 0,
			closed: 0
		}
	}
};
/*
 * Triggered by JqueryMobile helpers - Only on mobile device
 */
exports.onWindowOrientation = function(evt, opts) {
	if (!evt || evt.orientation == null) return;
	opts = opts || {};
	// serverLog.log("onWindowOrientation")
	opts.orientationChanged = evt.orientation !== _currentOrientation;
	opts.deviceChanged = false;
	_currentOrientation = evt.orientation;
	// 200 is important to avoid some refresh issues
	setTimeout(function() {
		_layoutMainContainers(evt, opts);
	});
};

/*
 * Triggered by browser window resize on the desktop
 *
 * This event is triggered also on mobile devices even if we can't change the size of the browser
 * (e.g. on orientation change or keyboard popup, fullscreen browser, non fullscreen browser)
 */
var _lastUserAgent = null;
exports.onWindowResize = function(evt, opts) {
	if (!evt) return;
	opts = opts || {};
	opts.orientationChanged = false;
	opts.deviceChanged = false;
	var userAgentChanged = _lastUserAgent == null || _lastUserAgent !== navigator.userAgent.toLowerCase();
	// serverLog.log("onWindowResize");
	if (_internalParameters && _internalParameters.pageParameters.forcePreview !== true) {
		// In preview mode orientation is given by the device
		// In !isDesktop mode orientation is handled by onWindowOrientation
		// We have to set orientation in desktop without preview mode
		if (globals.isDesktop()) {
			var prev = _currentOrientation;
			_currentOrientation = _getWindowOrientation();
			opts.orientationChanged = prev !== _currentOrientation;
		}
		// _lastUserAgent checked for mobile and desktop devices to allow CHrome Mobile Devices Simulator on desktop
		if (userAgentChanged) {
			_lastUserAgent = navigator.userAgent.toLowerCase();
			// In simulation assume that device changes with user agent
			opts.deviceChanged = true;
		}
	}
	if (userAgentChanged) {
		// In any cases 
		var wasMobile = globals.isMobile();
		globals.notifUserAgentChanged();
		if (wasMobile !== globals.isMobile()) {
			// Reload the page if we pass from desktop to mobile (occurs with chrome device simulator only)
			// We need to create new scroller native <--> desktop
			document.location.reload();
			return;
		}
	}
	// If we are on a desktop, just resize all the time, no need to make it more complicated than that.
	if (globals.isDesktop()) {
		_layoutMainContainers(evt, opts);
	}

	// We endup here, if we are on a mobile device

	// On a mobile device there are only a few options when a resize is actually triggered:
	// 1) Orientation has changed: Size change event because width and height have been swapped. 
	//    => We need to revalidate the layout (!)
	//
	// 2) Go to browser fullscreen: Revalidate layout (realign footer/header, scrollers)
	//    => We need to revalidate the layout (!)
	//
	// 3) Keyboard shows up: 
	//    => WE DO NOT WANT DO REVALIDATE THE LAYOUT SINCE WE WILL LOOSE FOCUS

	var width = $(window).width();
	var height = $(window).height();

	// Keyboard show up detection is done by ensuring the width of the screen has not changed during the resize

	// Special case height changes but width does not change:
	// If the width did not change during a resize BUT the height got bigger,
	// this is an indicator that the keyboard has disappeared.
	// If the keyboard disappeared its safe to to a re-validation of the layout
	// in fact, ITS NECESSARRY. Since a switch between portrait and landscape mode while
	// the keyboard is active triggers a re-validation of the layout using the smaller layout (minus the keyboard)
	// So once the keyboard disappears the revalidation ensures the footer is not in the middle of the screen

	if (width === _lastWindowWidth && height <= _lastWindowHeight) {
		notifications.publish("sm.scroller.update", true);
		return;
	}

	// One more special case
	// On android, the software keyboards height depends on the
	// type of input field.
	// So on focus change, there is a resize since the keyboard may shrink or grow
	// This is why we take into account the new height only if:
	// Width changed also (orientation change)
	// Height gets bigger (keyboard disappears)
	if (width !== _lastWindowWidth || height > _lastWindowHeight) {
		// Wrapped by "if" to ensure we remember only the maximum height of the current orientation
		_lastWindowHeight = height;
	}

	_lastWindowWidth = width;
	_layoutMainContainers(evt, opts);
};

/*
 * Triggered by application JS code - triggerResizeInternal handler
 */
exports.onWindowResizeInteral = function(evt, opts) {
	if (!evt) return;
	opts = opts || {};
	var params = opts.layout ? opts.layout.pageParameters : null;
	if (params && params.orientation && params.forcePreview) {
		opts.orientationChanged = _currentOrientation !== params.orientation;
		_currentOrientation = params.orientation;
	}
	if (params && params.device && params.forcePreview) {
		var typ = _deviceSizes[params.device];
		typ = typ ? typ.deviceType : "";
		opts.deviceChanged = typ !== _getDeviceType();
	}
	_layoutMainContainers(evt, opts);
};
/*
 * Layout main containers like header, content, footer, authoring panel
 */
function _layoutMainContainers(resizeEvt, opts) {
	if (_lastUserAgent == null) {
		// Optimization for device simulator - prevent a deviceChanged at the first orientation changed
		_lastUserAgent = navigator.userAgent.toLowerCase();
	}
	opts = opts || {};
	opts.resizeEvent = resizeEvt;
	if (opts.layout) {
		_layoutParameters = $.extend(true, {}, _layoutParameters, opts.layout);
	}
	var width = $(window).width();
	var height = $(window).height();
	var appClass = null;

	var authPanelRightWidth = 0;
	var authPanelLeftWidth = 0;
	var authPanelHeaderHeight = 0;
	var authPanelFooterHeight = 0;
	var authPanelRightSplitterWidth = 0;
	var authPanelLeftSplitterWidth = 0;

	var $$authRight = $("#s-m-auth-panel-right-id");
	var $$authLeft = $("#s-m-auth-panel-left-id");
	var $$app = $("#s-m-app-id");
	var $$appContainer = $("#s-m-app-container-id");

	_internalParameters = $.extend(true, {}, _layoutParameters);
	var pageParams = _internalParameters.pageParameters;
	if (_internalParameters.authPanelRight.visible) {
		authPanelRightWidth = _internalParameters.authPanelRight.width;
		authPanelRightSplitterWidth = _internalParameters.authPanelRight.splitterWidth;

		_layoutAuthPanelRight(width, height);
		pageParams.forcePreview = true;
	}
	if (_internalParameters.authPanelLeft.visible) {
		authPanelLeftWidth = _internalParameters.authPanelLeft.width;
		authPanelLeftSplitterWidth = _internalParameters.authPanelLeft.splitterWidth;

		_layoutAuthPanelLeft(width, height);
		pageParams.forcePreview = true;
	}
	if (_internalParameters.authPanelHeader.visible) {
		authPanelHeaderHeight = _internalParameters.authPanelHeader.height;
		_layoutAuthPanelHeader(width, height);
	}
	if (_internalParameters.authPanelFooter.visible) {
		authPanelFooterHeight = _internalParameters.authPanelFooter.height;
		_layoutAuthPanelFooter(width, height);
	}
	var applicationWidth = width - authPanelRightWidth - authPanelRightSplitterWidth - authPanelLeftWidth - authPanelLeftSplitterWidth;
	var applicationHeight = height - authPanelHeaderHeight - authPanelFooterHeight;

	var appView;
	var forcePreview = pageParams.forcePreview === true;
	// Remove wrapper if exists
	if ($$app.parent().is(".s-m-device-wrapper")) {
		$$app.unwrap();
	}
	// if forcePreview adds a wrapper to simulate the tablet/iphone body
	if (forcePreview && globals.isDesktop()) {
		var template = pageParams.device ? _deviceSizes[pageParams.device] : null;
		if (!template) {
			template = _deviceSizes["nexus10"];
		}
		// Border for application wrapper
		var wrapBorder = 15;
		// Unscaled application view rectangle
		appView = {
			left: 0,
			top: 0,
			width: pageParams.orientation === "landscape" ? template.width : template.height,
			height: pageParams.orientation === "landscape" ? template.height : template.width,
		};
		// Wrapper W/H
		var wrapH = appView.height + 2 * wrapBorder,
			wrapW = appView.width + 2 * wrapBorder;
		// Auto scale
		if (pageParams.forceAutoScale) {
			pageParams.scale = Math.min(Math.min(applicationWidth / wrapW, applicationHeight / wrapH), 1);
		}
		//Center
		appView.left = Math.max((applicationWidth - wrapW * pageParams.scale) / 2, 0);
		appView.top = Math.max((applicationHeight - wrapH * pageParams.scale) / 2, 0);
		// Class that indicates device simulation status
		appClass = template.bootstrapTweakClass[pageParams.orientation];
		// Wrapp the application into device container to better display the devise structure with round corners...
		var $$wrapper = $('<section class="s-m-device-wrapper"></section>"');
		var wrapCss = {
			top: appView.top + "px",
			left: appView.left + "px",
			width: wrapW + "px",
			height: wrapH + "px"
		};
		if (pageParams.scale !== 1) {
			wrapCss["transform"] = "scale(" + pageParams.scale + ", " + pageParams.scale + ")",
			wrapCss["transform-origin"] = "left top";
		}
		$$wrapper.css(wrapCss);
		$$app.wrap($$wrapper);
		// Container including header, content, footer
		$$app.css({
			top: wrapBorder + "px",
			left: wrapBorder + "px",
			width: appView.width + "px",
			height: appView.height + "px",
			position: "absolute"
		});
	} else {
		// No preview - application is displayed full page
		appView = {
			left: 0,
			top: 0,
			width: applicationWidth,
			height: applicationHeight
		};
		pageParams.orientation = _currentOrientation;
		// Container including header, content, footer
		$$app.css({
			top: appView.top,
			left: appView.left,
			width: appView.width,
			height: appView.height
		});
	}
	// keeps only the right class
	$$app.removeClass(_bootstrapTweakClasses.join(' '));
	if (appClass) {
		$$app.addClass(appClass);
	}
	// Container including header, content, footer
	$$appContainer.css({
		top: authPanelHeaderHeight,
		left: authPanelLeftWidth + authPanelLeftSplitterWidth,
		width: applicationWidth,
		height: applicationHeight
	});
	// Status to manage css
	$$appContainer.toggleClass("s-m-preview", forcePreview);
	// Allow other components like authoring panel or page content to be resized
	var info = {
		// updateLayout = true - no deend to relaod data - needed for arrays or other controls that are build onResize (calculate width/height)
		updateLayout: true,
		application: appView,
		// True if resize triggered by authoring
		authoringUpdate: opts.authoringUpdate === true,
		// Action want to preserve the scrolling of the page
		preserveScroll: opts.preserveScroll === true || opts.authoringUpdate === true,
		afterLoaded: opts.afterLoaded === true
	};
	if (opts.resizeEvent) {
		/**
		 * Propagated to onResize method to be able to identify resizeEvent.type - 'resize' or 'resizeInternal'
		 **/
		info.resizeEvent = opts.resizeEvent;
	}
	info.orientationChanged = opts.orientationChanged;
	info.deviceChanged = opts.deviceChanged;
	notifications.publish("sm.main.layout.changed", info, pageParams.orientation, _getDeviceType());
}

function _layoutAuthPanelRight(width, height) {
	var $$auth = $("#s-m-auth-panel-right-id");
	var $$splitter = $("#s-m-auth-splitter-right-id");

	var authPanelHeaderHeight = 0;
	var authPanelFooterHeight = 0;
	if (_internalParameters.authPanelHeader.visible) {
		authPanelHeaderHeight = _internalParameters.authPanelHeader.height;
	}
	if (_internalParameters.authPanelFooter.visible) {
		authPanelFooterHeight = _internalParameters.authPanelFooter.height;
	}

	$$auth.css({
		left: width - _internalParameters.authPanelRight.width,
		top: authPanelHeaderHeight,
		width: _internalParameters.authPanelRight.width,
		height: height - authPanelHeaderHeight - authPanelFooterHeight
	});
	$$splitter.css({
		left: width - _internalParameters.authPanelRight.width - _internalParameters.authPanelRight.splitterWidth,
		top: authPanelHeaderHeight,
		width: _internalParameters.authPanelRight.splitterWidth,
		height: height - authPanelHeaderHeight - authPanelFooterHeight
	});
}

function _layoutAuthPanelLeft(width, height) {
	var $$auth = $("#s-m-auth-panel-left-id");
	var $$splitter = $("#s-m-auth-splitter-left-id");

	var authPanelHeaderHeight = 0;
	var authPanelFooterHeight = 0;
	if (_internalParameters.authPanelHeader.visible) {
		authPanelHeaderHeight = _internalParameters.authPanelHeader.height;
	}
	if (_internalParameters.authPanelFooter.visible) {
		authPanelFooterHeight = _internalParameters.authPanelFooter.height;
	}

	$$auth.css({
		left: 0,
		top: authPanelHeaderHeight,
		width: _internalParameters.authPanelLeft.width,
		height: height - authPanelHeaderHeight - authPanelFooterHeight
	});
	$$splitter.css({
		left: _internalParameters.authPanelLeft.width,
		top: authPanelHeaderHeight,
		width: _internalParameters.authPanelLeft.splitterWidth,
		height: height - authPanelHeaderHeight - authPanelFooterHeight
	});
}

function _layoutAuthPanelHeader(width, height) {
	var $$auth = $("#s-m-auth-panel-header-id");
	$$auth.css({
		left: 0,
		top: 0,
		width: width,
		height: _internalParameters.authPanelHeader.height,
		overflow: "hidden"
	});
}

function _layoutAuthPanelFooter(width, height) {
	var $$auth = $("#s-m-auth-panel-footer-id");
	$$auth.css({
		left: 0,
		top: height - _internalParameters.authPanelFooter.height,
		width: width,
		height: _internalParameters.authPanelFooter.height
	});
}

exports.getDeviceTemplates = function() {
	return _deviceSizes;
};
/**
 * return smartphone/tablet
 */
var _getDeviceType = function() {
	// Preview mode?
	if (_internalParameters && _internalParameters.pageParameters && _internalParameters.pageParameters.forcePreview === true) {
		var device = _internalParameters.pageParameters.device;
		return device && _deviceSizes[device] ? _deviceSizes[device].deviceType : "tablet";
	}
	// Check if auto device recognition is overridden by user settings
	var settings = globals.getGlobalSettings();
	if (settings == null || settings["device-type"] === "auto") {
		return _getCurrentDeviceType();
	}
	return settings["device-type"];
};
/* 
 * only tablet or smartphone
 * Use this to detect if it's a "smartphone" or a "tablet"
 * This function will return the physical device or the simulated one of dev mode or authoring is active.
 */
exports.getDeviceType = _getDeviceType;

exports.getPageOrientation = function() {
	return _internalParameters.pageParameters.orientation;
};

exports.getCurrentLayoutSettings = function() {
	var o = $.extend(true, {}, _layoutParameters);
	return o;
};
exports.getTransformScale = function() {
	var res = _internalParameters && _internalParameters.pageParameters ? _internalParameters.pageParameters.scale : null;
	return res == null || res <= 0 ? 1 : res;
};

exports.splitterWidth = _splitterWidth;
exports.onWindoReisze = _splitterWidth;