"use strict";
/*
 * This module must only contain low level helper functions that do not have any dependencies!
 */

var _refObj = new Object();
var _klasses = {};

/**
 * A kind of instance of function but only for objects with a named constructor
 */
var _scanProto = function(o, name) {
	// Null -> done
	if (o == null) return false;

	// Plain Object -> done
	if (o === _refObj.__proto__) return false;

	// No constructor -> done
	if (!o.constructor) return false;

	// Name matches -> Ok
	if (o.constructor.name === name) {
		return true;
	}

	// Check base classes
	return _scanProto(o.__proto__, name);
};

var _isInstanceOf = function(o, name) {
	return _scanProto(o.__proto__, name);
};

var _isError = function(o) {
	return o && Error.prototype.toString === o.toString;
};

/** 
 * Clean error stack from current base url and limit the size due to the use of deferred
 * html: true -> Display in Html
 **/

var _stackRegexp;
var _cleanStack = function(stack, max, html) {
	if (Array.isArray(stack)) return stack;
	var globals = window.$sm;
	if (!globals) return stack;
	if (!_stackRegexp && globals && globals.baseLocation()) {
		_stackRegexp = {
			r1: new RegExp(globals.baseLocation().withPath, "g"),
			r2: new RegExp(globals.baseLocation().requirePath, "g")
		};
	}

	max = max == null ? 5 : max;
	if (stack) {
		var array = (stack.split && stack.split("\n")) || stack;;
		var res;
		if (array.length > 0) {
			array.forEach(function(l) {
				var pos1 = l.lastIndexOf(".js");
				if (pos1 > 0) {
					var pos2 = l.lastIndexOf("/", pos1);
					if (pos1 > 0) {
						if (!res) res = [];
						res.push(l.substring(pos2));
					}
				}
			});
		}
		if (!res && _stackRegexp) {
			stack = _stackRegexp ? stack.replace(_stackRegexp.r1, "").replace(_stackRegexp.r2, "") : stack;
		} else {
			stack = res.join('\n');
		}
	} else {
		stack = "";
	}
	stack = stack.split("\n");
	if (stack.length > max) {
		stack = stack.splice(0, max).join(html ? "<br>&nbsp&nbsp&nbsp&nbsp&nbsp" : "\n");
	}
	return stack;
};

/**
 * return true if o is an instance of class 'name'
 * Like this process could slow down the application it's better to register only classes for which we want to check instance
 */
exports.isInstanceOf = _isInstanceOf;

exports.isError = _isError;

exports.cleanStack = _cleanStack;