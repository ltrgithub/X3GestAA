"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var settings = require('syracuse-tablet/html/js/application/settings');
var storageModule = require('syracuse-tablet/html/js/storage/storage');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var nativeVoiceCommmands = require('syracuse-tablet/html/js/helpers/native/native').getModule("voiceCommands");

function _defaultWelcomeApplication() {
	var app = {
		"$application": {
			"$uuid": "$welcomeApplication",
			"applicationName": "$welcomeApplication",
			"title": "",
			"description": "",
			"iconName": "gears",

			"$homeDashboard": {
				"$uuid": "$welcomeDashboard",
				"dashboardName": "$welcomeDashboard"
			},
		},
		"$dashboards": {
			"$welcomeDashboard": {
				"$pageInfo": {
					// Don't remove it - used to identify application welcome page
					"isWelcomePage": true,
					"disableAuthoring": true
				},
				"$update": function(dashboard) {
					return _updateDashboard(dashboard);
				},
				"$dashboardName": "$welcomeDashboard",
				/* It's the first page, no need to explain that using title or description */
				"$title": "",
				"$description": "",
			}
		}
	};
	return app;
}

function _buildGadget(page) {
	if (page.dashboardName) {
		return _buildDashboardGadget(page);
	} else {
		return _buildRepresentationGadget(page);
	}
}

function _buildRepresentationGadget(page) {
	return {
		"$type": "$representation",
		"$title": page.title,
		"entity": page.entity,
		"action": page.action,
		"representation": page.representation,
		"facet": page.facet,
		"keyParameter": page.key,
		"endpoint": page.endpoint,
		"applicationName": page.applicationName,
		"icon": page.icon,
	};
}

function _buildDashboardGadget(page) {
	return {
		"$type": page.$type || "$dashboard",
		"$title": page.title,
		"dashboardName": page.dashboardName,
		"applicationName": page.applicationName,
		"sdataParameters": page.sdataParameters, // Contains url with key value pairs like code=444&group=123&bpcnum=123
		"endpoint": page.endpoint,
		"icon": page.icon,
	};
}

function _addPinnedPages(dashboard, apps, voiceBookmarks) {
	var grp;
	var newquickLinkdGroup = false;
	var pageId = 1;
	var tileConfigs;
	var endpoint = globals.getEndpoint();
	var appNames;

	appNames = apps.map(function(a) {
		return a.applicationName;
	});

	return settings.getTileConfigs()
		.then(function(tc) {
			tileConfigs = tc;
		})
		.then(function() {
			return settings.getPinnedPages();
		})
		.then(function(pp) {
			var index = -1;
			/*var index = dashboard.$article.$items.findIndex(function(hungroup) {
				if (hungroup.$type === "quicklinks") return true;
			});
			*/
			if (index > -1) {
				dashboard.$article.$items.splice(index, 1);
			}
			if (pp.length <= 0) {
				return;
			}
			grp = {
				"$layoutType": "hubGroup",
				"$type": "quicklinks",
				"$title": locale.text("welcome.myquicklinks"),
				"$items": []
			};
			pp.forEach(function(page) {
				if (appNames.indexOf(page.applicationName) >= 0) { //LV :don't understand : if applicationName not in appNames resulte is 0

					// ID see also settings.js if you change here!
					var config = tileConfigs["pin-" + page.id];

					config = config || {};
					var gadgetName = "$$$" + pageId;
					pageId++;
					var vignetteName = gadgetName;
					var gadget = _buildGadget(page);
					// No filter on endpoint (switch endpoint)
					if (nativeVoiceCommmands) {
						var voiceCmd = nativeVoiceCommmands.createCommandFromPage(page, config.title);
						if (voiceCmd) voiceBookmarks.push(voiceCmd);
					}
					if (gadget.endpoint === endpoint) {
						gadget.$title = config.title || gadget.$title;
						gadget.icon = config.icon || gadget.icon;
						// Used to find which page was pinned in this gadget in case we remove directly on welcome page
						gadget.pinPageId = page.id;
						dashboard.$gadgets[gadgetName] = gadget;
						dashboard.$vignettes[vignetteName] = {
							"$uuid": gadgetName,
							"$displayStyle": "$link"
						};
						grp.$items.push({
							$layoutType: "tile",
							$bgColor: config.color || "darkgrey",
							$items: [{
								$bind: vignetteName
							}],
							$size: config.size || "medium"
						});
					}
				}
			});
		})
		.then(function() {
			if (grp && grp.$items && grp.$items.length > 0) {
				dashboard.$article.$items.unshift(grp);
			}
		});

}

function _addApps(dashboard, apps, voiceBookmarks) {
	var apps;
	var hiddenApps;
	var groups = {
		sageAppli: {
			"$layoutType": "hubGroup",
			"$groupType": "sageAppli",
			"$title": locale.text("welcome.sageapp"),
			"$items": []
		},
		byDefault: {
			"$layoutType": "hubGroup",
			"$title": locale.text("welcome.myapps"),
			"$items": []
		}
	};
	var tileConfigs;
	return settings.getTileConfigs()
		.then(function(tc) {
			tileConfigs = tc;
		})
		.then(function() {
			return settings.getHiddenApplications();
		})
		.then(function(hiddenAppsList) {
			hiddenApps = hiddenAppsList;

			// Make list availabe for later use in page
			dashboard.appList.hidden = [];
			dashboard.appList.visible = [];
			hiddenApps.forEach(function(name) {
				apps.forEach(function(appInfo) {
					if (name === appInfo.applicationName) {
						dashboard.appList.hidden.push(appInfo);
					}
				});
			});

			apps.forEach(function(appInfo) {
				var name = appInfo.applicationName;
				//if (appInfo.applicationName !== _welcomeApplication.$application.applicationName && 
				if (hiddenApps.indexOf(name) < 0 && !appInfo.welcomeApplication) {
					dashboard.appList.visible.push(name);
					var config = tileConfigs["app-" + name];
					config = config || {};
					var name = "$welcome_" + appInfo.applicationName;
					var gadget = {
						"$type": "$application",
						"$title": config.title || appInfo.title,
						"applicationName": appInfo.applicationName,
						"icon": config.icon || appInfo.iconName
					};
					var vignette = {
						"$uuid": name
					};
					if (nativeVoiceCommmands) {
						var voiceCmd = nativeVoiceCommmands.createCommandFromAppli(gadget.$title, appInfo);
						if (voiceCmd) voiceBookmarks.push(voiceCmd);
					}
					dashboard.$gadgets[name] = gadget;
					dashboard.$vignettes[name] = vignette;
					var appTile = {
						$layoutType: "tile",
						$bgColor: config.color,
						$items: [{
							$bind: name
						}],
						$size: config.size || "medium"
					};
					_checkTileStatus(appInfo, appTile);
					groups[appInfo.isSageApplication ? "sageAppli" : "byDefault"].$items.push(appTile);
				}
			});
			for (var p in groups) {
				if (globals.isDvlpMode() || p !== "sageAppli") {
					if (groups[p].$items.length > 0) {
						dashboard.$article.$items.push(groups[p]);
					}
				}
			}
		});
}

function _checkTileStatus(app, appTile) {
	if (app.versionNumber == null) { // No version number, so it's a client side app, no need to test any states
		return;
	}
	if (app.localVersionNumber == null) { // App is not yet in the cache and needs to be setup
		// Do not show the setup icon since it was recognized as missleading by some users
		//appTile.$icon = "appSetup";
	} else if (app.localVersionNumber != app.versionNumber) {
		appTile.$icon = "appUpdate";
	}
}


function _updateDashboard(dashboard) {
	return _readWelcomeDashboardUser().then(function(dashboard) {
		return _defaultDashboard(dashboard).then(function(dashboard) {
			// All titles of the welcome page will be put into this list to allow the user
			// to start the application and invoke a bookmark by a voice command
			var voiceBookmarks = nativeVoiceCommmands ? [] : null;
			return dashboard;
		});
	});
}

function _defaultDashboard(dashboard) {
	if (dashboard.$article) return $.smResolve(dashboard); //Existing article : dashboard is ok
	dashboard.$gadgets = {};
	dashboard.$vignettes = {};
	dashboard.$article = {
		"$layoutType": "hub",
		"$items": []
	};
	dashboard.$title = locale.text("welcome.title.home");
	return _updateDefaulfDashboard(dashboard).then(function(dashboard) {
		return dashboard;
	});
}

/* we pass appMetaData as parameter to allow $update to refresh it (original appMetaData has been cloned) - see getAppDetail*/
function _updateDefaulfDashboard(dashboard) {
	var meta = globals.getMetaData();
	var appList;
	dashboard.$gadgets = {};
	dashboard.$vignettes = {};
	dashboard.$article = dashboard.$article || {
		"$layoutType": "hub",
		"$items": []
	};
	dashboard.appList = {
		hidden: [],
		visible: []
	};
	// All titles of the welcome page will be put into this list to allow the user
	// to start the application and invoke a bookmark by a voice command
	var voiceBookmarks = nativeVoiceCommmands ? [] : null;

	//dashboard.$title = locale.text("welcome.title.home");
	return $.smResolve()
		.then(function() {
			var forceReadApps = globals.needToCheckAppsList();
			globals.setNeedToCheckAppsList(false);
			forceReadApps = forceReadApps && globals.isOnline();
			return meta.getApplications(forceReadApps);
		})
		.then(function(apps) {
			appList = apps;
		})
		.then(function() {
			return _addPinnedPages(dashboard, appList, voiceBookmarks);
		})
		.then(function() {
			return _addApps(dashboard, appList, voiceBookmarks);
		})
		.then(function() {
			// Make all gadgets present on welcomepage accessible by voice commands
			if (voiceBookmarks) {
				nativeVoiceCommmands.setVoiceCommands(voiceBookmarks);
			}
			return dashboard;
		})
		.fail(function(e) {
			console.log(e);
			return $.smReject(e);
		});
};

function _getHubgroupByType($article, groupType) {
	var grp = null;
	return $article.$items.find(function(item) {
		if (item.$layoutType === "hubGroup" && item.$type === groupType) {
			return true;
		};
	});
};

function _writeWelcomeDashboardUser(dashboard) {
	var storage = globals.getStorage();
	var ctx = globals.getUserCtx();

	var ctx = {
		"$user": ctx.$user,
		"$role": ctx.$role,
		"$lang": "none"
	};

	console.log("Writing user dashboard...", dashboard);
	return storage.put({
		$context: ctx,
		$collection: "$welcomeDashboard",
		$endpoint: "$local",
		$key: ctx.$user + "_" + ctx.$role,
		$data: dashboard,
	}).then(function(result) {
		if (result.$status === storageModule.StatusCodes.OK) {
			return result.$data;
		} else {
			return {};
		}
	});
};

function _readWelcomeDashboardUser() {
	var storage = globals.getStorage();
	var ctx = globals.getUserCtx();

	var ctx = {
		"$user": ctx.$user,
		"$role": ctx.$role,
		"$lang": "none"
	};

	return storage.read({
		$context: ctx,
		$collection: "$welcomeDashboard",
		$endpoint: "$local",
		$key: ctx.$user + "_" + ctx.$role
	}).then(function(result) {
		if (result.$status === storageModule.StatusCodes.OK) {
			return result.$data;
		} else {
			return {};
		}
	});
}
exports.defaultWelcomeApplication = _defaultWelcomeApplication;
exports.writeWelcomeDashboardUser = _writeWelcomeDashboardUser;