"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var settings = require('syracuse-tablet/html/js/application/settings');
var storageModule = require('syracuse-tablet/html/js/storage/storage');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var nativeVoiceCommmands = require('syracuse-tablet/html/js/helpers/native/native').getModule("voiceCommands");
var sdataCommonResources = require('syracuse-tablet/html/js/sdata/sdataCommonResources');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var _groupTypes = {
	quickLinks: "quicklinks",
	pinnedTiles: "pinnedTiles",
	sageAppli: "sageAppli",
	default: "default"
};

function _defaultWelcomeApplication() {
	var app = {
		"$application": {
			"$uuid": "$welcomeApplication",
			"applicationName": "$welcomeApplication",
			"title": "",
			"description": "",
			"iconName": "gears",

			"$homeDashboard": {
				"$uuid": "$welcomeDashboard",
				"dashboardName": "$welcomeDashboard"
			},
		},
		"$dashboards": {
			"$welcomeDashboard": {
				"$pageInfo": {
					// Don't remove it - used to identify application welcome page
					"isWelcomePage": true,
					"disableAuthoring": true
				},
				"$update": function(dashboard) {
					return _updateDashboard(dashboard);
				},
				"$dashboardName": "$welcomeDashboard",
				/* It's the first page, no need to explain that using title or description */
				"$title": "",
				"$description": "",
			}
		}
	};
	return app;
}

function _updateDashboard(dashboard) {
	var currentDashboard = globals.getApplication().welcomeDashboard;
	if (currentDashboard) return $.smResolve(currentDashboard);
	return _getWelcomeDashboard(true).then(function(dashboard) {
		return _defaultDashboard(dashboard).then(function(dashboard) {
			// All titles of the welcome page will be put into this list to allow the user
			// to start the application and invoke a bookmark by a voice command
			var voiceBookmarks = nativeVoiceCommmands ? [] : null;
			return dashboard;
		});
	});
}

function _getWelcomeDashboard(forceReadFromServer, uuid) {
	if (forceReadFromServer && globals.isOnline()) {
		return sdataCommonResources.queryWelcomeDashboard(uuid).
		then(function(dashboard) {
			var welcomeDashboard = _setMetaWelcomeDashboard(dashboard);
			return $.smResolve(welcomeDashboard);
		});
	} else {
		return _readWelcomeDashboardUser();
	}
}

function _setMetaWelcomeDashboard(dashboard) {
	var welcomeDashboard = (dashboard && dashboard.content);
	if (welcomeDashboard) {
		welcomeDashboard = (dashboard && dashboard.content);
		welcomeDashboard.$views = dashboard.$views;
		welcomeDashboard.$factoryOwner = dashboard.$factoryOwner;
		welcomeDashboard.roles = dashboard.roles;
		welcomeDashboard.dirty = false;
		if (welcomeDashboard && welcomeDashboard.$views) {
			var currentViewSelected = welcomeDashboard.$views.filter(function(view) {
					return view.$selected
				})
				//No view seleted, select first by default (views are ordered, most relevant first)
			if (currentViewSelected.length === 0) welcomeDashboard.$views[0].$selected = true;
		}
	};
	return welcomeDashboard;
};

function _defaultDashboard(dashboard) {
	dashboard = dashboard || {};
	var step;
	if (dashboard.$article) {
		var meta = globals.getMetaData();
		var forceReadApps = globals.needToCheckAppsList();
		globals.setNeedToCheckAppsList(false);
		forceReadApps = forceReadApps && globals.isOnline();
		var voiceBookmarks = nativeVoiceCommmands ? [] : null;
		step = meta.getApplications(forceReadApps)
			.then(function(apps) {
				//TODO  manage delta application
				apps.forEach(function(appInfo) {
					var bind = "$welcome_" + appInfo.applicationName;
					_checkTileStatus(appInfo, _getTileByBind(dashboard.$article, bind));
					if (nativeVoiceCommmands) {
						var voiceCmd = nativeVoiceCommmands.createCommandFromAppli(dashboard.$gadgets[bind].$title, appInfo);
						if (voiceCmd) voiceBookmarks.push(voiceCmd);
					}
				});
				if (voiceBookmarks) {
					nativeVoiceCommmands.setVoiceCommands(voiceBookmarks);
				}
				return $.smResolve(dashboard); //Existing article : dashboard is ok (exept new applications and applications deleted)
			});
	} else {
		step = _updateDefaultDashboard(dashboard);
	};
	return step.then(function(dashboard) {
		if (!dashboard.$views || (dashboard.$views.length >= 0 && !dashboard.$views[0].$isPersonal)) {
			return _writeWelcomeDashboardUser(dashboard).then(function(dashboard) {
				return $.smResolve(_setMetaWelcomeDashboard(dashboard))
			})
		} else {
			return $.smResolve(dashboard);
		}
	});
}

/* we pass appMetaData as parameter to allow $update to refresh it (original appMetaData has been cloned) - see getAppDetail*/
function _updateDefaultDashboard(dashboard) {
	var meta = globals.getMetaData();
	var appList;
	dashboard.$title = dashboard.$title || locale.text("welcome.title.home");
	dashboard.$gadgets = {};
	dashboard.$vignettes = {};
	dashboard.$article = {
		"$layoutType": "hub",
		"$items": []
	};
	dashboard.appList = {
		hidden: [],
		visible: []
	};
	// All titles of the welcome page will be put into this list to allow the user
	// to start the application and invoke a bookmark by a voice command
	var voiceBookmarks = nativeVoiceCommmands ? [] : null;

	//dashboard.$title = locale.text("welcome.title.home");
	return $.smResolve()
		.then(function() {
			var forceReadApps = globals.needToCheckAppsList();
			globals.setNeedToCheckAppsList(false);
			forceReadApps = forceReadApps && globals.isOnline();
			return meta.getApplications(forceReadApps);
		})
		.then(function(apps) {
			appList = apps;
		})
		.then(function() {
			return _addApps(dashboard, appList, voiceBookmarks);
		})
		.then(function() {
			// Make all gadgets present on welcomepage accessible by voice commands
			if (voiceBookmarks) {
				nativeVoiceCommmands.setVoiceCommands(voiceBookmarks);
			}
			return dashboard;
		})
		.fail(function(e) {
			console.log(e);
			return $.smReject(e);
		});
};

function _buildGadget(page) {
	if (page.dashboardName) {
		return _buildDashboardGadget(page);
	} else {
		return _buildRepresentationGadget(page);
	}
}

function _buildRepresentationGadget(page) {
	return {
		"$type": "$representation",
		"$title": page.title,
		"entity": page.entity,
		"action": page.action,
		"representation": page.representation,
		"facet": page.facet,
		"keyParameter": page.key,
		"endpoint": page.endpoint,
		"applicationName": page.applicationName,
		"icon": page.icon,
	};
}

function _buildDashboardGadget(page) {
	return {
		"$type": page.$type || "$dashboard",
		"$title": page.title,
		"dashboardName": page.dashboardName,
		"applicationName": page.applicationName,
		"sdataParameters": page.sdataParameters, // Contains url with key value pairs like code=444&group=123&bpcnum=123
		"endpoint": page.endpoint,
		"icon": page.icon,
	};
};

function _isPinnedPage(pinPageId) {
	var self = this;
	if (!pinPageId) return $.smResolve(false);
	var dashboard = globals.getApplication().welcomeDashboard;
	if (!dashboard || !dashboard.$gadgets) return $.smResolve(false);
	return $.smResolve(Object.keys(dashboard.$gadgets).some(function(key) {
		if (dashboard.$gadgets[key].pinPageId === pinPageId) {
			return true;
		}
	}));
};

function _isPinnedTile($bind) {
	var dashboard = globals.getApplication().welcomeDashboard;
	return (dashboard.$vignettes[$bind] != undefined);
};

function _addPinnedPage(pageData) {
	var self = this;
	var endpoint = globals.getEndpoint();
	var dashboard = globals.getApplication().welcomeDashboard;
	var quikLinksGroup = _getHubGroup(dashboard.$article, _groupTypes.quickLinks);
	if (!quikLinksGroup) {
		var grp = {
			"$layoutType": "hubGroup",
			"$groupType": _groupTypes.quickLinks,
			"$title": locale.text("welcome.myquicklinks"),
			"$items": []
		};
		dashboard.$article.$items.unshift(grp);
		quikLinksGroup = dashboard.$article.$items[0];
	}
	var gadgetName = "$$$" + utils.UUID();
	var vignetteName = gadgetName;
	var gadget = _buildGadget(pageData);
	if (gadget.endpoint === endpoint) {
		// Used to find which page was pinned in this gadget in case we remove directly on welcome page
		gadget.pinPageId = pageData.id;
		dashboard.$gadgets[gadgetName] = gadget;
		dashboard.$vignettes[vignetteName] = {
			"$uuid": gadgetName,
			"$displayStyle": "$link"
		};
		quikLinksGroup.$items.push({
			$layoutType: "tile",
			$bgColor: "darkgrey",
			$items: [{
				$bind: vignetteName
			}],
			$size: "medium"
		});
		dashboard.voiceCommandContext = dashboard.voiceCommandContext || {};
		dashboard.voiceCommandContext[gadgetName] = pageData.voiceCommandContext;
	}

	return _writeWelcomeDashboard(dashboard).then(function() {
		//dashboard saved
	});
};

function _addPinnedTile(article, prototype) {
	var self = this;
	var endpoint = globals.getEndpoint();
	var dashboard = globals.getApplication().welcomeDashboard;
	var pinnedTilesGroups = _getHubGroup(dashboard.$article, _groupTypes.pinnedTiles);
	if (!pinnedTilesGroups) {
		var grp = {
			"$layoutType": "hubGroup",
			"$groupType": _groupTypes.pinnedTiles,
			"$title": locale.text("welcome.pinnedTiles"),
			"$items": []
		};
		var quikLinksGroup = _getHubGroup(dashboard.$article, _groupTypes.quickLinks);
		if (quikLinksGroup) {
			quikLinksGroup = dashboard.$article.$items.shift();
		}
		dashboard.$article.$items.unshift(grp);
		pinnedTilesGroups = dashboard.$article.$items[0];
		if (quikLinksGroup) {
			dashboard.$article.$items.unshift(quikLinksGroup);
		}
	};
	var layoutTile = {
		"$layoutType": "tile",
		"$size": "large",
		"$bgColor": "darkgrey",
		"$items": []
	};
	var item = $.extend(true, {}, article.$article.$items[0]);
	item.$bind = article.$bind;
	layoutTile.$items.push(item);
	pinnedTilesGroups.$items.push(layoutTile);

	dashboard.$gadgets[article.$bind] = prototype.getVignetteGadget();
	dashboard.$gadgets[article.$bind].pinPageId = item.$bind;
	dashboard.$vignettes[article.$bind] = {
		"$uuid": article.$bind,
		"$type": prototype.json.$type,
		"$displayStyle": prototype.json.$displayStyle,
		"$dbId": prototype.json.$dbId,
		"$title": prototype.json.$title,

	};
	return _writeWelcomeDashboard(dashboard).then(function() {
		//dashboard saved
	});
};
//TODO : removetile generique base sur $bind.
// Si application et pas quicklink (pinPageId) ,sup uniquement l'article.
// + sup tous les groups vides sauf un default.

function _removePinnedPage(pageId, groupType) {
	var self = this;
	var dashboard = globals.getApplication().welcomeDashboard;
	var gadgetId = _getGadgetIdPinnedPage(dashboard.$gadgets, pageId);
	if (!gadgetId) return $.smResolve();
	delete dashboard.$gadgets[gadgetId];
	_removePinnedTile(dashboard.$article, gadgetId, groupType);
	delete dashboard.$vignettes[gadgetId];
	if (dashboard.voiceCommandContext && dashboard.voiceCommandContext[gadgetId]) delete dashboard.voiceCommandContext[gadgetId];
};

function _cleanQuickLinks(dashboard) {
	var cleaneddashboard = $.extend(true, {}, dashboard);
	if (!cleaneddashboard || !cleaneddashboard.$article) return cleaneddashboard;
	var quikLinksGroup = _getHubGroup(cleaneddashboard.$article, _groupTypes.quickLinks);
	if (!quikLinksGroup) return cleaneddashboard;
	quikLinksGroup.$items.forEach(function(item) {
		var vignetName = item.$items[0].$bind;
		delete cleaneddashboard.$gadgets[vignetName];
		delete cleaneddashboard.$vignettes[vignetName];
		delete cleaneddashboard.voiceCommandContext[vignetName];
	});
	_removePinnedTile(cleaneddashboard.$article, null, _groupTypes.quickLinks);
	return cleaneddashboard;
};

function _cleanViews(dashboard) {
	var cleaneddashboard = $.extend(true, {}, dashboard);
	if (!cleaneddashboard || !cleaneddashboard.$views) return cleaneddashboard;
	delete cleaneddashboard.$views;
	return cleaneddashboard;
}

//if $bind null or group empty : delete all the group
function _removePinnedTile($article, $bind, groupType) {
	var grp = _getHubGroup($article, groupType);
	if (!grp) return;
	if ($bind) {
		var items = grp.$items.filter(function(item) {
			if (item.$items[0].$bind !== $bind) {
				return true;
			}
		});
	};
	grp.$items = items;
	if (!grp.$items || grp.$items.length === 0) {
		items = $article.$items.filter(function(item) {
			if (item.$layoutType !== "hubGroup" || item.$groupType !== groupType) {
				return true;
			}
		});
		$article.$items = items;
	}
};

function _addApps(dashboard, apps, voiceBookmarks) {
	var apps;
	var hiddenApps;
	var groups = {
		sageAppli: {
			"$layoutType": "hubGroup",
			"$groupType": _groupTypes.sageAppli,
			"$title": locale.text("welcome.sageapp"),
			"$items": []
		},
		byDefault: {
			"$layoutType": "hubGroup",
			"$groupType": "default",
			"$title": locale.text("welcome.myapps"),
			"$items": []
		}
	};
	var tileConfigs;
	return settings.getTileConfigs()
		.then(function(tc) {
			tileConfigs = tc;
		})
		.then(function() {
			return settings.getHiddenApplications();
		})
		.then(function(hiddenAppsList) {
			hiddenApps = hiddenAppsList;

			// Make list availabe for later use in page
			dashboard.appList.hidden = [];
			dashboard.appList.visible = [];
			hiddenApps.forEach(function(name) {
				apps.forEach(function(appInfo) {
					if (name === appInfo.applicationName) {
						dashboard.appList.hidden.push(appInfo);
					}
				});
			});

			apps.forEach(function(appInfo) {
				var name = appInfo.applicationName;
				//if (appInfo.applicationName !== _welcomeApplication.$application.applicationName && 
				if (hiddenApps.indexOf(name) < 0 && !appInfo.welcomeApplication) {
					dashboard.appList.visible.push(name);
					var config = tileConfigs["app-" + name];
					config = config || {};
					var name = "$welcome_" + appInfo.applicationName;
					var gadget = {
						"$type": "$application",
						"$title": config.title || appInfo.title,
						"applicationName": appInfo.applicationName,
						"icon": config.icon || appInfo.iconName
					};
					var vignette = {
						"$uuid": name
					};
					if (nativeVoiceCommmands) {
						var voiceCmd = nativeVoiceCommmands.createCommandFromAppli(gadget.$title, appInfo);
						if (voiceCmd) voiceBookmarks.push(voiceCmd);
					}
					dashboard.$gadgets[name] = gadget;
					dashboard.$vignettes[name] = vignette;
					var appTile = {
						$layoutType: "tile",
						$bgColor: config.color,
						$items: [{
							$bind: name
						}],
						$size: config.size || "medium"
					};
					_checkTileStatus(appInfo, appTile);
					groups[appInfo.isSageApplication ? "sageAppli" : "byDefault"].$items.push(appTile);
				}
			});
			for (var p in groups) {
				if (globals.isDvlpMode() || p !== "sageAppli") {
					if (groups[p].$items.length > 0) {
						dashboard.$article.$items.push(groups[p]);
					}
				}
			}
		});
}

function _checkTileStatus(app, appTile) {
	if (app.versionNumber == null || !appTile) { // No version number, so it's a client side app, no need to test any states
		return;
	}
	if (app.localVersionNumber == null) { // App is not yet in the cache and needs to be setup
		// Do not show the setup icon since it was recognized as missleading by some users
		//appTile.$icon = "appSetup";
	} else if (app.localVersionNumber != app.versionNumber) {
		appTile.$icon = "appUpdate";
	}
}

//save  dashboarduser  or global (or factory) depending on current dsashboard.
function _writeWelcomeDashboard(dashboard, localOnly) {
	if (dashboard.$views[0].$isPersonal && dashboard.$views[0].$selected) {
		return _writeWelcomeDashboardUser(dashboard, localOnly)
	} else {
		return _writeCommonWelcomeDashboard(dashboard)
	}
}

function _writeWelcomeDashboardUser(dashboard, localOnly) {
	var cleanedDashboard = _cleanViews(dashboard);
	var storage = globals.getStorage();
	var ctx = globals.getUserCtx();

	var ctx = {
		"$user": ctx.$user,
		"$role": ctx.$role,
		"$lang": "none"
	};
	var t = new Date().getTime();
	return storage.put({
		$context: ctx,
		$collection: "$welcomeDashboard",
		$endpoint: "$local",
		$key: ctx.$user + "_" + ctx.$role,
		$data: cleanedDashboard,
	}).then(function(result) {
		if (!localOnly && result.$status === storageModule.StatusCodes.OK && globals.isOnline()) {
			var securityProfile = globals.getSecurityProfile();
			var data = {
				"user": {
					"$uuid": globals.getUserUuid(),
				},
				"role": {
					"$uuid": globals.getSeletedRoleUuid(),
				},
				"description": "Personal welcomeDashboard " + ctx.$user + " " + ctx.$role,
				"clientId": "",
				"content": cleanedDashboard,
				"isPersonal": true
			};
			return _saveEntityWelcomeDashboard(data);
		} else {
			return $.smResolve(dashboard);
		}
	});
};

function _saveEntityWelcomeDashboard(data) {
	return sdataCommonResources.updateWelcomeDashboard(data);
}

function _writeCommonWelcomeDashboard(dashboard, roles) { //factory or group)
	var cleanedDashboard = _cleanQuickLinks(dashboard);
	cleanedDashboard = _cleanViews(cleanedDashboard);
	var data = {
		"user": {
			"$uuid": globals.getUserUuid(),
		},
		"role": {
			"$uuid": globals.getSeletedRoleUuid(),
		},
		"roles": roles || [],
		"description": roles ? "Global " : "Factory " + "welcomeDashboard",
		"clientId": "",
		"content": cleanedDashboard
	};
	return _saveEntityWelcomeDashboard(data);
}

function _readWelcomeDashboardUser() {
	var storage = globals.getStorage();
	var ctx = globals.getUserCtx();

	var ctx = {
		"$user": ctx.$user,
		"$role": ctx.$role,
		"$lang": "none"
	};
	var t = new Date().getTime();
	return storage.read({
		$context: ctx,
		$collection: "$welcomeDashboard",
		$endpoint: "$local",
		$key: ctx.$user + "_" + ctx.$role
	}).then(function(result) {
		console.log("_readWelcomeDashboardUser " + (new Date().getTime() - t));
		if (result.$status === storageModule.StatusCodes.OK) {
			return result.$data;
		} else {
			return {};
		}
	});
};
//the first one only
function _getHubGroup($article, groupType) {
	var grp;
	if (!$article || !$article.$items) return;
	$article.$items.forEach(function(item) {
		if (!grp && item.$layoutType === "hubGroup" && item.$groupType === groupType) {
			grp = item;
		};
	});
	return grp;
}

function _getHubgroupsByType($article, groupType) {
	var hub = [];

	function _walk(items) {
		if (!items) return;
		items.forEach(function(item) {
			if (item.$layoutType === "hubGroup" && item.$groupType === groupType) {
				hub.push(item);
			};
			_walk(item.$items);
		});
	};
	_walk($article.$items);
	return hub;
};

function _getTileByBind($article, $bind) {
	var tile;

	function _walk(items) {
		if (!items) return;
		items.forEach(function(item) {
			if (item.$layoutType === "tile" && !tile) {
				if (item.$items[0].$bind === $bind) {
					tile = item;
				}
			}
			if (!tile) _walk(item.$items);
		});
	};
	_walk($article.$items);
	return tile;
};

function _getGadgetIdPinnedPage($gadgets, pinPageId) {
	var gadgetId;
	if (!$gadgets) return null;
	Object.keys($gadgets).forEach(function(key) {
		if (!gadgetId && $gadgets[key].pinPageId === pinPageId) {
			gadgetId = key;
		}
	});
	return gadgetId;
};

function _getOptionsSave() {
	var currentDashboard = globals.getApplication().welcomeDashboard;
	var userFactory = globals.getSecurityProfile().factoryId;
	if (!currentDashboard.$views) {
		return {
			"personnalReplace": false,
			"personnalCreate": true,
			"publish": (userFactory !== ""),
			"pin": false
		}
	};
	var viewspersonelOrSelected = currentDashboard.$views.filter(function(view) {
		return view.$isPersonal || view.$selected
	});
	//personnal and personnal is selected or,  the view selected is not the personal and  personal does not exist
	if (viewspersonelOrSelected.length === 1) {
		return {
			"personnalReplace": viewspersonelOrSelected[0].$isPersonal,
			"personnalCreate": !viewspersonelOrSelected[0].$isPersonal,
			"publish": (userFactory !== ""),
			"pin": viewspersonelOrSelected[0].$isPersonal
		}
	};
	return {
		//personnal exists but not the current
		//replace the personnal for user not authorized or for a user authorized but not the owner
		"personnalReplace": true,
		"personnalCreate": false,
		"publish": (userFactory !== "" && userFactory === currentDashboard.$factoryOwner),
		"pin": (userFactory !== "" && userFactory === currentDashboard.$factoryOwner)
	};
};
exports.defaultWelcomeApplication = _defaultWelcomeApplication;
exports.getWelcomeDashboard = _getWelcomeDashboard;
exports.writeWelcomeDashboardUser = _writeWelcomeDashboardUser;
exports.writeWelcomeDashboard = _writeWelcomeDashboard
exports.writeCommonWelcomeDashboard = _writeCommonWelcomeDashboard;
//Page on welcome dashboard as link
exports.addPinnedPage = _addPinnedPage;
exports.removePinnedPage = _removePinnedPage;
exports.isPinnedPage = _isPinnedPage;

//
exports.addPinnedTile = _addPinnedTile;
exports.isPinnedTile = _isPinnedTile;


exports.setMetaWelcomeDashboard = _setMetaWelcomeDashboard;
exports.getOptionsSave = _getOptionsSave;

exports.groupType = function(name) {
	return _groupTypes[name] || "default";
};