"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var storageModule = require('syracuse-tablet/html/js/storage/storage');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var native = require('syracuse-tablet/html/js/helpers/native/native');
var sdataCommonResources = require('syracuse-tablet/html/js/sdata/sdataCommonResources');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var _groupTypes = {
	"quickLinks": "quicklinks",
	"pinnedTiles": "pinnedTiles",
	"sageAppli": "sageAppli",
	"default": "default"
};

function _defaultWelcomeApplication() {
	var app = {
		"$application": {
			"$uuid": "$welcomeApplication",
			"applicationName": "$welcomeApplication",
			"title": "",
			"description": "",
			"iconName": "gears",

			"$homeDashboard": {
				"$uuid": "$welcomeDashboard",
				"dashboardName": "$welcomeDashboard"
			},
		},
		"$dashboards": {
			"$welcomeDashboard": {
				"$pageInfo": {
					// Don't remove it - used to identify application welcome page
					"isWelcomePage": true,
					"disableAuthoring": true
				},
				"$update": function(dashboard) {
					return _updateDashboard(dashboard);
				},
				"$dashboardName": "$welcomeDashboard",
				/* It's the first page, no need to explain that using title or description */
				"$title": "",
				"$description": "",
			}
		}
	};
	return app;
}

function _updateDashboard() {
	return _getWelcomeDashboard(true)
		.then(function(dashboard) {
			return _defaultDashboard(dashboard);
		}).then(function(dashboard) {
			// All titles of the welcome page will be put into this list to allow the user
			// to start the application and invoke a bookmark by a voice command
			var nativeVoiceCommmands = native.getModule("voiceCommands");
			var voiceBookmarks = nativeVoiceCommmands ? [] : null;
			dashboard.$pageInfo = {
				// Don't remove it - used to identify application welcome page
				"isWelcomePage": true,
				"disableAuthoring": true
			};
			dashboard.$dashboardName = "$welcomeDashboard";
			return dashboard;
		});
}

function _getWelcomeDashboard(forceReadFromServer, uuid) {
	if ((forceReadFromServer || uuid) && globals.isOnline()) {
		return sdataCommonResources.queryWelcomeDashboard(uuid)
			.then(function(dashboard) {
				return _setMetaWelcomeDashboard(dashboard);
			});
	} else {
		return _readWelcomeDashboardUser();
	}
}

function _setMetaWelcomeDashboard(dashboard) {
	var welcomeDashboard = (dashboard && dashboard.content);
	if (welcomeDashboard) {
		welcomeDashboard.$views = dashboard.$views;
		welcomeDashboard.$factoryOwner = dashboard.$factoryOwner;
		welcomeDashboard.roles = dashboard.roles;
		welcomeDashboard.$pageInfo = {
			// Don't remove it - used to identify application welcome page
			"isWelcomePage": true,
			"disableAuthoring": true
		};
		welcomeDashboard.$dashboardName = "$welcomeDashboard";
		if (welcomeDashboard.$views) {
			var currentViewSelected = welcomeDashboard.$views.filter(function(view) {
					return view.$selected
				})
				//No view seleted, select first by default (views are ordered, most relevant first)
			if (currentViewSelected.length === 0) welcomeDashboard.$views[0].$selected = true;
		}
	};
	return welcomeDashboard;
};

function _defaultDashboard(dashboard) {
	dashboard = dashboard || {};
	var step;
	if (dashboard.$article) {
		var meta = globals.getMetaData();
		var forceReadApps = globals.needToCheckAppsList();
		globals.setNeedToCheckAppsList(false);
		forceReadApps = forceReadApps && globals.isOnline();
		var nativeVoiceCommmands = native.getModule("voiceCommands");
		var voiceBookmarks = nativeVoiceCommmands ? [] : null;
		step = meta.getApplications(forceReadApps)
			.then(function(apps) {
				apps.forEach(function(appInfo) {
					var bind = "$welcome_" + appInfo.applicationName;
					_checkTileStatus(appInfo, _getTileByBind(dashboard.$article, bind));
					if (nativeVoiceCommmands) {
						var voiceCmd = nativeVoiceCommmands.createCommandFromAppli(dashboard.$gadgets[bind].$title, appInfo);
						if (voiceCmd) voiceBookmarks.push(voiceCmd);
					}
				});
				if (voiceBookmarks) {
					nativeVoiceCommmands.setVoiceCommands(voiceBookmarks);
				}
				return dashboard; //Existing article : dashboard is ok (exept new applications and applications deleted)
			});
	} else {
		return _updateDefaultDashboard(dashboard); // empty dashboard, set a default dashboard
	};
	return step.then(function(dashboard) {
		if (!dashboard.$views || (dashboard.$views.length >= 0 && !dashboard.$views[0].$isPersonal)) {
			// save dashboard as dashboard user because user have no own dashboard
			return _writeWelcomeDashboardUser(dashboard).then(function(dashboard) {
				return dashboard
			})
		} else {
			return dashboard;
		}
	});
}

/* we pass appMetaData as parameter to allow $update to refresh it (original appMetaData has been cloned) - see getAppDetail*/
function _updateDefaultDashboard(dashboard) {
	var meta = globals.getMetaData();
	var appList;
	dashboard.$title = dashboard.$title || locale.text("welcome.title.home");
	dashboard.$gadgets = {};
	dashboard.$vignettes = {};
	dashboard.$article = {
		"$layoutType": "hub",
		"$items": []
	};
	dashboard.appList = {
		hidden: [],
		visible: []
	};
	// All titles of the welcome page will be put into this list to allow the user
	// to start the application and invoke a bookmark by a voice command
	var nativeVoiceCommmands = native.getModule("voiceCommands");
	var voiceBookmarks = nativeVoiceCommmands ? [] : null;

	//dashboard.$title = locale.text("welcome.title.home");
	return $.smResolve()
		.then(function() {
			var forceReadApps = globals.needToCheckAppsList();
			globals.setNeedToCheckAppsList(false);
			forceReadApps = forceReadApps && globals.isOnline();
			return meta.getApplications(forceReadApps);
		})
		.then(function(apps) {
			appList = apps;
		})
		.then(function() {
			return _addApps(dashboard, appList, voiceBookmarks);
		})
		.then(function() {
			// Make all gadgets present on welcomepage accessible by voice commands
			if (voiceBookmarks) {
				nativeVoiceCommmands.setVoiceCommands(voiceBookmarks);
			}
			return dashboard;
		})
		.fail(function(e) {
			console.log(e);
			return $.smReject(e);
		});
};

function _buildGadget(page) {
	if (page.dashboardName) {
		return _buildDashboardGadget(page);
	} else {
		return _buildRepresentationGadget(page);
	}
}

function _buildRepresentationGadget(page) {
	return {
		"$type": "$representation",
		"$title": page.title,
		"entity": page.entity,
		"action": page.action,
		"representation": page.representation,
		"facet": page.facet,
		"keyParameter": page.key,
		"endpoint": page.endpoint,
		"applicationName": page.applicationName,
		"icon": page.icon,
	};
}

function _buildDashboardGadget(page) {
	return {
		"$type": page.$type || "$dashboard",
		"$title": page.title,
		"dashboardName": page.dashboardName,
		"applicationName": page.applicationName,
		"sdataParameters": page.sdataParameters, // Contains url with key value pairs like code=444&group=123&bpcnum=123
		"endpoint": page.endpoint,
		"icon": page.icon,
	};
};

function _isPinnedPage(pinPageId) {
	var self = this;
	if (!pinPageId) return $.smResolve(false);
	return globals.getMetaData().getWelcomeDashboard().then(function(dashboard) {
		if (!dashboard || !dashboard.$gadgets) return false;
		return Object.keys(dashboard.$gadgets).some(function(key) {
			if (dashboard.$gadgets[key].pinPageId === pinPageId) {
				return true;
			}
			return false;
		});
	})
};

function _isPinnedTile($bind) {
	return globals.getMetaData().getWelcomeDashboard().then(function(dashboard) {
		return (dashboard.$vignettes[$bind] != undefined);
	});
};

function _addPinnedPage(pageData) {
	var self = this;
	var endpoint = globals.getEndpoint();
	return globals.getMetaData().getWelcomeDashboard().then(function(dashboard) {
		var quikLinksGroup = _getHubGroup(dashboard.$article, _groupTypes.quickLinks);
		if (!quikLinksGroup) {
			var grp = _hubGroup(_groupTypes.quickLinks, locale.text("welcome.myquicklinks"));
			dashboard.$article.$items.unshift(grp);
			quikLinksGroup = dashboard.$article.$items[0];
		}
		var gadgetName = "$$$" + utils.UUID();
		var vignetteName = gadgetName;
		var gadget = _buildGadget(pageData);
		if (gadget.endpoint === endpoint) {
			// Used to find which page was pinned in this gadget in case we remove directly on welcome page
			gadget.pinPageId = pageData.id;
			dashboard.$gadgets[gadgetName] = gadget;
			dashboard.$vignettes[vignetteName] = {
				"$uuid": gadgetName,
				"$displayStyle": "$link"
			};
			quikLinksGroup.$items.push({
				$layoutType: "tile",
				$bgColor: "darkgrey",
				$items: [{
					$bind: vignetteName
				}],
				$size: "medium"
			});
			dashboard.voiceCommandContext = dashboard.voiceCommandContext || {};
			dashboard.voiceCommandContext[gadgetName] = pageData.voiceCommandContext;
			var nativeVoiceCommmands = native.getModule("voiceCommands");
			if (nativeVoiceCommmands) {
				nativeVoiceCommmands.addVoiceCommand(nativeVoiceCommmands.createCommandFromPage(pageData));
			}
		}

		return _writeWelcomeDashboard(dashboard);
	})

};

function _addPinnedTile(article, prototype, localization) {
	var self = this;
	var endpoint = globals.getEndpoint();
	return globals.getMetaData().getWelcomeDashboard().then(function(dashboard) {
		var pinnedTilesGroups = _getHubGroup(dashboard.$article, _groupTypes.pinnedTiles);
		if (!pinnedTilesGroups) {
			var grp = _hubGroup(_groupTypes.pinnedTiles, locale.text("welcome.pinnedTiles"));
			var quikLinksGroup = _getHubGroup(dashboard.$article, _groupTypes.quickLinks);
			if (quikLinksGroup) {
				quikLinksGroup = dashboard.$article.$items.shift();
			}
			dashboard.$article.$items.unshift(grp);
			pinnedTilesGroups = dashboard.$article.$items[0];
			if (quikLinksGroup) {
				dashboard.$article.$items.unshift(quikLinksGroup);
			}
		};
		var layout;
		var layout = $.extend(true, {}, article);
		if (article.$layoutType !== "tile") {
			layout.$bgColor = "darkgrey";
			layout.$layoutType = "tile";
			layout.$size = "large";
		}
		pinnedTilesGroups.$items.push(layout);
		//Localizations
		dashboard.$article.$localization = dashboard.$article.$localization || {}
		Object.keys(localization).forEach(function(lang) {
			Object.keys(localization[lang]).forEach(function(key) {
				dashboard.$article.$localization[lang] = dashboard.$article.$localization[lang] || {}
				dashboard.$article.$localization[lang][key] = localization[lang][key]
			})
		});
		var $bind = article.$items[0].$bind;
		dashboard.$gadgets[$bind] = prototype.getVignetteGadget();
		dashboard.$gadgets[$bind].pinPageId = $bind;
		dashboard.$vignettes[$bind] = {
			"$uuid": $bind,
			"$type": prototype.json.$type,
			"$displayStyle": prototype.json.$displayStyle,
			"$dbId": prototype.json.$dbId,
			"$title": prototype.json.$title,

		};
		return _writeWelcomeDashboard(dashboard);

	})

};

function _removePinnedPage(pageId, groupType, doSave) { // doSave==true when pinned page is removed from application
	var self = this;
	return globals.getMetaData().getWelcomeDashboard()
		.then(function(dashboard) {
			var gadgetId = _getGadgetIdPinnedPage(dashboard.$gadgets, pageId);
			if (!gadgetId) return null;
			var nativeVoiceCommmands = native.getModule("voiceCommands");
			if (nativeVoiceCommmands) {
				nativeVoiceCommmands.removeVoiceCommand(dashboard.$gadgets[gadgetId].$title);
			}
			delete dashboard.$gadgets[gadgetId];
			_removePinnedTile(dashboard.$article, gadgetId, groupType);
			delete dashboard.$vignettes[gadgetId];
			if (dashboard.voiceCommandContext && dashboard.voiceCommandContext[gadgetId]) delete dashboard.voiceCommandContext[gadgetId];
			if (doSave) return _writeWelcomeDashboard(dashboard);
			return dashboard
		});
};
//if $bind null or group empty : delete all the group
function _removePinnedTile($article, $bind, groupType) {
	var grp = _getHubGroup($article, groupType);
	if (!grp) return;
	if ($bind) {
		var items = grp.$items.filter(function(item) {
			if (item.$items[0].$bind !== $bind) {
				return true;
			}
		});
	};
	grp.$items = items;
	if (!grp.$items || grp.$items.length === 0) {
		items = $article.$items.filter(function(item) {
			if (item.$layoutType !== "hubGroup" || item.$groupType !== groupType) {
				return true;
			}
		});
		$article.$items = items;
	}
};

function _getDashboard(dashboard) {
	var cleaneddashboard = $.extend(true, {}, dashboard);
	if (!cleaneddashboard) return cleaneddashboard;
	delete cleaneddashboard.$views;
	return cleaneddashboard;
}

function _addApps(dashboard, apps, voiceBookmarks) {
	var apps;
	var groups = {
		sageAppli: _hubGroup(_groupTypes.sageAppli, locale.text("welcome.sageapp")),
		byDefault: _hubGroup("default", locale.text("welcome.myapps")),
	};
	var nativeVoiceCommmands = native.getModule("voiceCommands");
	apps.forEach(function(appInfo) {
		var name = appInfo.applicationName;
		var name = "$welcome_" + appInfo.applicationName;
		var gadget = {
			"$type": "$application",
			"$title": appInfo.title,
			"applicationName": appInfo.applicationName,
			"icon": appInfo.iconName
		};
		var vignette = {
			"$uuid": name
		};
		if (nativeVoiceCommmands) {
			var voiceCmd = nativeVoiceCommmands.createCommandFromAppli(gadget.$title, appInfo);
			if (voiceCmd) voiceBookmarks.push(voiceCmd);
		}
		dashboard.$gadgets[name] = gadget;
		dashboard.$vignettes[name] = vignette;
		var appTile = {
			$layoutType: "tile",
			$bgColor: "darkgrey",
			$items: [{
				$bind: name
			}],
			$size: "medium"
		};
		_checkTileStatus(appInfo, appTile);
		groups[appInfo.isSageApplication ? "sageAppli" : "byDefault"].$items.push(appTile);
	});
	for (var p in groups) {
		if (globals.isDvlpMode() || p !== "sageAppli") {
			if (groups[p].$items.length > 0) {
				dashboard.$article.$items.push(groups[p]);
			}
		}
	}
}

function _checkTilesStatus(dashboard) {
	var meta = globals.getMetaData();
	return meta.getApplications(false)
		.then(function(apps) {
			apps.forEach(function(appInfo) {
				var bind = "$welcome_" + appInfo.applicationName;
				_checkTileStatus(appInfo, _getTileByBind(dashboard.$article, bind));
			});
			return dashboard;
		})
}

function _checkTileStatus(app, appTile) {
	if (app.versionNumber == null || !appTile) { // No version number, so it's a client side app, no need to test any states
		return;
	}
	if (app.localVersionNumber == null) { // App is not yet in the cache and needs to be setup
		// Do not show the setup icon since it was recognized as missleading by some users
		//appTile.$icon = "appSetup";
	} else if (app.localVersionNumber != app.versionNumber) {
		appTile.$icon = "appUpdate";
	} else {
		appTile.$icon = null;
	}
}

//save  dashboarduser  or global (or factory) depending on current dashboard.
function _writeWelcomeDashboard(dashboard, localOnly) {
	if (dashboard.$views[0].$isPersonal && dashboard.$views[0].$selected) {
		return _writeWelcomeDashboardUser(dashboard, localOnly)
	} else {
		return _writeCommonWelcomeDashboard(dashboard)
	}
}

function _writeWelcomeDashboardUser(dashboard, localOnly) {
	var cleanedDashboard = _getDashboard(dashboard);
	var storage = globals.getStorage();
	var ctx = globals.getUserCtx();

	var ctx = {
		"$user": ctx.$user,
		"$role": ctx.$role,
		"$lang": "none"
	};
	var t = new Date().getTime();
	return storage.put({
		$context: ctx,
		$collection: "$welcomeDashboard",
		$endpoint: "$local",
		$key: ctx.$user + "_" + ctx.$role,
		$data: cleanedDashboard,
	}).then(function(result) {
		if (!localOnly && result.$status === storageModule.StatusCodes.OK && globals.isOnline()) {
			var securityProfile = globals.getSecurityProfile();
			var data = {
				"user": {
					"$uuid": globals.getUserUuid(),
				},
				"role": {
					"$uuid": globals.getSeletedRoleUuid(),
				},
				"description": "My dashboard",
				"clientId": "",
				"content": cleanedDashboard,
				"isPersonal": true
			};
			return _saveEntityWelcomeDashboard(data).then(function(data) {
				return _setMetaWelcomeDashboard(data);
			});
		} else {
			return dashboard;
		}
	});
};

function _saveEntityWelcomeDashboard(data) {
	return sdataCommonResources.updateWelcomeDashboard(data);
};

function _writeCommonWelcomeDashboard(dashboard, roles) { //factory or group)
	var cleanedDashboard = _getDashboard(dashboard);
	var data = {
		"user": {
			"$uuid": globals.getUserUuid(),
		},
		"role": {
			"$uuid": globals.getSeletedRoleUuid(),
		},
		"roles": roles || [],
		"description": "Dashboard template",
		"clientId": "",
		"content": cleanedDashboard
	};
	return _saveEntityWelcomeDashboard(data).then(function(data) {
		return _setMetaWelcomeDashboard(data);;
	});
};

function _readWelcomeDashboardUser() {
	var storage = globals.getStorage();
	var ctx = globals.getUserCtx();

	var ctx = {
		"$user": ctx.$user,
		"$role": ctx.$role,
		"$lang": "none"
	};
	var t = new Date().getTime();
	return storage.read({
		$context: ctx,
		$collection: "$welcomeDashboard",
		$endpoint: "$local",
		$key: ctx.$user + "_" + ctx.$role
	}).then(function(result) {
		if (result.$status === storageModule.StatusCodes.OK) {
			return result.$data;
		} else {
			return {};
		}
	});
};

function _hubGroup(grpTyp, title) {
	return {
		"$layoutType": "hubGroup",
		"$groupType": grpTyp,
		"$capabilities": _getHubGroupCapabilities(grpTyp),
		"$title": title,
		"$items": []
	}
};

function _getHubGroupCapabilities(grpTyp) {
	var capabilities = "";
	switch (grpTyp) {
		case _groupTypes.quickLinks:
			capabilities = "edit,delete,draggable";
			break;
		case _groupTypes.pinnedTiles:
			capabilities = "edit,delete,draggable";
			break;
		case _groupTypes.sageAppli:
			capabilities = "edit,delete,draggable";
			break;
		case _groupTypes.default:
			capabilities = "edit,delete,draggable";
			break;
	}
	return capabilities;
};

//the first one only
function _getHubGroup($article, groupType) {
	var grp;
	if (!$article || !$article.$items) return;
	$article.$items.forEach(function(item) {
		if (!grp && item.$layoutType === "hubGroup" && item.$groupType === groupType) {
			grp = item;
		};
	});
	return grp;
}

function _getHubgroupsByType($article, groupType) {
	var hub = [];

	function _walk(items) {
		if (!items) return;
		items.forEach(function(item) {
			if (item.$layoutType === "hubGroup" && item.$groupType === groupType) {
				hub.push(item);
			};
			_walk(item.$items);
		});
	};
	_walk($article.$items);
	return hub;
};

function _getTileByBind($article, $bind) {
	var tile;

	function _walk(items) {
		if (!items) return;
		items.forEach(function(item) {
			if (item.$layoutType === "tile" && !tile) {
				if (item.$items[0].$bind === $bind) {
					tile = item;
				}
			}
			if (!tile) _walk(item.$items);
		});
	};
	_walk($article.$items);
	return tile;
};

function _getGadgetIdPinnedPage($gadgets, pinPageId) {
	var gadgetId;
	if (!$gadgets) return null;
	Object.keys($gadgets).forEach(function(key) {
		if (!gadgetId && $gadgets[key].pinPageId === pinPageId) {
			gadgetId = key;
		}
	});
	return gadgetId;
};

exports.defaultWelcomeApplication = _defaultWelcomeApplication;
exports.getWelcomeDashboard = _getWelcomeDashboard;
exports.writeWelcomeDashboard = _writeWelcomeDashboard;
exports.writeWelcomeDashboardUser = _writeWelcomeDashboardUser
exports.writeCommonWelcomeDashboard = _writeCommonWelcomeDashboard
exports.updateDashboard = _updateDashboard
exports.addPinnedPage = _addPinnedPage;
exports.removePinnedPage = _removePinnedPage;
exports.isPinnedPage = _isPinnedPage;

exports.addPinnedTile = _addPinnedTile;
exports.isPinnedTile = _isPinnedTile;

exports.checkTilesStatus = _checkTilesStatus;
exports.groupType = function(name) {
	return _groupTypes[name] || "default";
};
exports.hubGroup = _hubGroup;
exports.getHubGroupCapabilities = _getHubGroupCapabilities;