"use strict";
/* Add methods to native prototypes */
var _nameSpace = "sm";

/* ARRAYS */
/** In the past we did some polyfill here to ensure browser compatibility
 * THIS MUST ABSOLUTELY NOT BE DONE FOR ARRAYS, it's ok for other types like String because String is not interated over 

 The reason is "for in" will enumerate polyfill methods causing different kinds of issues all over the place:
 Array.prototype.mw = function() { return "MW"; };
 var m = ["a"];
 for (n in m) ... will enumerate a and mw
 
 
 Removed Array.prototype.some = ... it's supported by all our browsers
 Removed Array.prototype.find = ... and replaced by dedicated function $.smFind
*/

/* STRINGS */
String.prototype[_nameSpace + "EndsWith"] = function(s) {
	if (this.length == 0 || s == null || this.length < s.length) return false;
	s = s.toString();
	return s.length === 1 ? this.charAt(this.length - 1) === s : this.lastIndexOf(s) === this.length - s.length;
};
String.prototype[_nameSpace + "StartsWith"] = function(s) {
	if (this.length == 0 || s == null || s.length === 0 || this.length < s.length) return false;
	return s.length === 1 ? this.charAt(0) === s.toString() : this.indexOf(s.toString()) === 0;
};
String.prototype[_nameSpace + "Capitalize"] = function() {
	if (this.length === 0) return this;
	return this.charAt(0).toUpperCase() + this.slice(1);
};

/* Allow prototype.name property for IE above 9 
if (Function.prototype.name === undefined && Object.defineProperty !== undefined) {
	Object.defineProperty(Function.prototype, 'name', {
		get: function() {
			var funcNameRegex = /function\s+([^\s(]+)\s*\(/;
			var results = (funcNameRegex).exec((this).toString());
			var r = (results && results.length > 1) ? results[1] : "";
			return r;
		},
		set: function(value) {}
	});
}*/