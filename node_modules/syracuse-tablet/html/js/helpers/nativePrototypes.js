"use strict";
/* Add methods to native prototypes */
var _nameSpace = "sm";

/* ARRAYS */
Array.prototype[_nameSpace + "IndexOf"] = function(callBackOrObject) {
	if (typeof callBackOrObject == "function") {
		for (var i = 0, l = this.length; i < l; i++) {
			if (callBackOrObject(this[i], i)) return i;
		}
		return -1;
	}
	return this.indexOf(callBackOrObject);
};

/**
 * Same as forEach but with the possibility to break by returning true in the call back
 * some method was added to the ECMA-262 standard in the 5th edition; as such it may not be present in all implementations of the standard
 * */
if (!Array.prototype.some) {
	Array.prototype.some = function(fun /*, thisArg */ ) {
		if (this === undefined || this === null)
			throw new TypeError();

		var t = Object(this);
		var len = t.length >>> 0;
		if (typeof fun !== 'function')
			throw new TypeError();

		var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
		for (var i = 0; i < len; i++) {
			if (i in t && fun.call(thisArg, t[i], i, t))
				return true;
		}

		return false;
	};
}


/* STRINGS */
String.prototype[_nameSpace + "EndsWith"] = function(s) {
	if (this.length == 0 || s == null) return false;
	s = s.toString();
	return s.length === 1 ? this.charAt(this.length - 1) === s : this.lastIndexOf(s) === this.length - s.length;
};
String.prototype[_nameSpace + "StartsWith"] = function(s) {
	if (this.length == 0 || s == null || s.length === 0 || this.length < s.length) return false;
	return s.length === 1 ? this.charAt(0) === s.toString() : this.indexOf(s.toString()) === 0;
};
String.prototype[_nameSpace + "Capitalize"] = function() {
	if (this.length === 0) return this;
	return this.charAt(0).toUpperCase() + this.slice(1);
};