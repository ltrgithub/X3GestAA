"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("nativeVoice", true);
var locale = require('syracuse-tablet/html/js/helpers/locale');
var nativeTestVoiceCommands = require('syracuse-tablet/html/js/helpers/native/test/nativeTestVoiceCommands');
var nativeTestUtils = require('syracuse-tablet/html/js/helpers/native/test/nativeTestUtils');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');


var _BookmarkMgr = function(bookmarks) {

	this.isReady = false;

	this.init = function(bookmarks) {
		notifications.subscribe(this, ["sm.application.ready"]);
		this.bookMarks = [];
		if (!bookmarks || bookmarks.length === 0) return false;
		var self = this,
			ok = false;
		bookmarks.forEach(function(b) {
			ok = self.add(b) || ok;
		});
		return ok;
	};
	this.add = function(bookmark) {
		if (!bookmark || !bookmark.title || !bookmark.context || !bookmark.context.applicationName) return false;
		this.bookMarks.push(bookmark);
		return true;
	};
	this.remove = function(bookmark) {
		if (!bookmark) return false;
		var title = typeof bookmark == "string" ? bookmark : bookmark.title;
		if (!title) return false;
		_bookmarkManager.add(bookmark);
		var idx;
		if (this.bookMarks.some(function(b, i) {
			if (b.title === title) {
				idx = i;
				return true;
			}
		})) {
			this.bookMarks.splice(idx, 1);
			return this.bookMarks.length > 0;
		}
		return false;
	};
	this.getBookmark = function(keyWord) {
		var bookmark = null,
			self = this;
		this.bookMarks.some(function(b, i) {
			if (b.title === keyWord) {
				bookmark = self.bookMarks[i];
				return true;
			}
		});
		return bookmark;
	};
	this.executeOperation = function(operation) {
		if (!operation || !window || !window.smNativeVoice || !window.smNativeVoice.setPhraseList) return;
		var refresh = false;
		switch (operation) {
			case "set":
				refresh = this.init(arguments[1]);
				break;
			case "add":
				refresh = this.add(arguments[1]);
				break;
			case "remove":
				refresh = this.remove(arguments[1]);
				break;
			default:
				return;
		}
		if (refresh) {
			var phraseList = [];
			this.bookMarks.forEach(function(b) {
				phraseList.push(b.title);
			});
			var data = JSON.stringify({
				phrase: "bookmark",
				phraseList: phraseList,
				language: locale.getCurrentLocale().toLowerCase()
			});
		}

		log && log("Update voiceCommands: " + JSON.stringify(data, null, 2));
		// Be carefull, JS name is lowercase (e.g. setPhraseList) while C# name must be uppercase (e.g. SetPhraseList)
		window.smNativeVoice.setPhraseList(data);
	};
	this.notifApplicationReady = function() {
		this.isReady = true;
		// Check if there are pending voiceCommands
		// A user can open the application by a voice command "X3 mobile open expenses"
		// It opens the mobile application and trigger a voice command "expenses"
		// The command is triggered before the whole initialization of the application so we store the command and execute it after initialization
	};
	this.executeVoiceCommand = function(data) {
		if (this.isReady) {
			// Get tile info for tile with title "data.text" and navigate to the page linked to the tile
			// Check login or remember command to be executed after user has logged in
			nativeTestUtils.callAppNativeInterface("voiceCommands", "executeVoiceCommand", data);
			return;
		}
		if (!this.pendingCommands) {
			this.pendingCommands = [];
		}
		this.pendingCommands.push(data);
	};
	this.init();
};
/**
 * Manages bookmarks
 * Created here to be available ASAP
 */
var _bookmarkManager = new _BookmarkMgr();

//Global object to be called by native code on pencil events
if (!(window.smVoiceJS)) {
	window.smVoiceJS = {

		/*
		 *  This method will be invoked from wrapper when there was a voice command
		 *
		 *  return true - Command has been handled by webapp
		 *  return false - Command has not been handled, will raise an error message
		 *
		 *  For Hey cortana, show my customers
		 *  data {
		 *  	command: "openBookmark",
		 *  	text: "my customers"
		 *  }
		 */
		executeVoiceCommand: function(data) {
			if (!_bookmarkManager) return;
			_bookmarkManager.executeVoiceCommand(data);
		}
	};
}
/**
 *
 */
exports.supports = function(capability, testMode) {
	if (capability === "voiceCommands") {
		return window && window.smNativeVoice && window.smNativeVoice.setPhraseList;
	}
	return false;
};
/**
 *bookmarks [{title: "...", context: { see page.getRestoreContext }}
 */
exports.setVoiceBookmarks = function(bookmarks) {
	_bookmarkManager.executeOperation.call(_bookmarkManager, "set", bookmarks);
};
/**
 *
 */
exports.addVoiceBookmark = function(bookmark) {
	_bookmarkManager.executeOperation.call(_bookmarkManager, "add", bookmark);
};
/**
 *
 */
exports.removeVoiceBookmark = function(bookmark) {
	_bookmarkManager.executeOperation.call(_bookmarkManager, "remove", bookmark);
};
/**
 *
 */
exports.getVoiceBookmark = function(keyWord) {
	return _bookmarkManager.getBookmark(keyWord);
};
/**
 *
 */
exports.getPendingBookmark = function(keyWord) {
	return "";
};

/**
 *
 */
exports.init = function(testMode) {
	if (window && window.smNativeVoice) return;
	if (!testMode) return;
	log && log("Creating native voice commands test wrapper");
	window.smNativeVoice = nativeTestVoiceCommands.create();
};