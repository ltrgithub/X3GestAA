"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("nativeVoice", true);
var locale = require('syracuse-tablet/html/js/helpers/locale');
var nativeTestVoiceCommands = require('syracuse-tablet/html/js/helpers/native/test/nativeTestVoiceCommands');
var nativeTestUtils = require('syracuse-tablet/html/js/helpers/native/test/nativeTestUtils');



var _currentBookmarks = [];

//Global object to be called by native code on pencil events
if (!(window.smVoiceJS)) {
	window.smVoiceJS = {

		/*
		 *  This method will be invoked from wrapper when there was a voice command
		 *
		 *  return true - Command has been handled by webapp
		 *  return false - Command has not been handled, will raise an error message
		 *
		 *  For Hey cortana, show my customers
		 *  data {
		 *  	command: "openBookmark",
		 *  	text: "my customers"
		 *  }
		 */
		executeVoiceCommand: function(data) {
			// Get tile info for tile with title "data.text" and navigate to the page linked to the tile
			// Check login or remember command to be executed after user has logged in
			nativeTestUtils.callAppNativeInterface("voiceCommands", "executeVoiceCommand", data);
		}
	};
}

exports.supports = function(capability, testMode) {
	if (capability === "voiceCommands") {
		return window && window.smNativeVoice && window.smNativeVoice.setPhraseList;
	}
	return false;
};
/**
 *
 */
exports.setVoiceBookmarks = function(titles, operation) {
	operation = operation || "set";
	if (operation === "set") {
		_currentBookmarks = titles;
	} else if (operation === "add") {
		titles.forEach(function(t) {
			_currentBookmarks.push(t);
		});
	} else if (operation === "remove") {
		titles.forEach(function(t) {
			var idx;
			while ((idx = _currentBookmarks.indexOf(t)) >= 0) {
				_currentBookmarks.splice(idx, 1);
			}
		});
	}

	var lang = locale.getCurrentLocale().toLowerCase();;
	var data = JSON.stringify({
		phrase: "bookmark",
		phraseList: _currentBookmarks,
		language: lang
	});

	log && log("setVoiceBookmarks: " + JSON.stringify(data));

	// Be carefull, JS name is lowercase (e.g. setPhraseList) while C# name must be uppercase (e.g. SetPhraseList)
	window && window.smNativeVoice && window.smNativeVoice.setPhraseList && window.smNativeVoice.setPhraseList(data);
};

/**
 *
 */
exports.addVoiceBookmark = function(title) {
	exports.setVoiceBookmarks([title], "add");
};

/**
 *
 */
exports.removeVoiceBookmark = function(title) {
	exports.setVoiceBookmarks([title], "remove");
};

exports.init = function(testMode) {
	if (window && window.smNativeVoice) return;
	if (!testMode) return;
	log && log("Creating native voice commands test wrapper");
	window.smNativeVoice = nativeTestVoiceCommands.create();
};