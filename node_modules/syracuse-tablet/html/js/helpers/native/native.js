"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("native");
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var nativeExtCall = require('syracuse-tablet/html/js/helpers/native/nativeExtCall');

var _modules = {
	"nativeShare": require('syracuse-tablet/html/js/helpers/native/nativeShare'),
	"nativeLiveTile": require('syracuse-tablet/html/js/helpers/native/nativeLiveTile'),
	"nativeMessages": require('syracuse-tablet/html/js/helpers/native/nativeMessages'),
	"nativePenInput": require('syracuse-tablet/html/js/helpers/native/nativePenInput'),
	"nativeImage": require('syracuse-tablet/html/js/helpers/native/nativeImage'),
	"nativeVoiceCommands": require('syracuse-tablet/html/js/helpers/native/nativeVoiceCommands'),
	"nativeApp": require('syracuse-tablet/html/js/helpers/native/nativeApp'),
	"nativeSensors": require('syracuse-tablet/html/js/helpers/native/nativeSensors'),
	"nativeBarcode": require('syracuse-tablet/html/js/helpers/native/nativeBarcode')
};

var _capabilities = {
	"nativeApp": "nativeApp",
	"dispatcherListener": "nativeApp",
	"hardwareBackButton": "nativeApp",

	"extLink": "nativeShare",
	"share": "nativeShare",

	"liveTile": "nativeLiveTile",

	"scheduleMessage": "nativeMessages",
	"toastMessages": "nativeMessages",

	"penTextInput": "nativePenInput",
	"penAnnotatedImage": "nativePenInput",
	"penSignatureImage": "nativePenInput",

	"camera": "nativeImage",
	"imageScale": "nativeImage",

	"voiceCommands": "nativeVoiceCommands",

	"scanBarcode": "nativeBarcode",
	"GPS": "nativeSensors"
};

var _capabilitiesModules = {};
/**
 * Initialization is required here to be able to call
 * var nativeVoiceCommmands = require('syracuse-tablet/html/js/helpers/native/native').getModule("voiceCommands");
 */
var _testMode = false;
var _testWrappers = {};
try {
	var _url = jsutils.getCurrentUrl();
	_testMode = _url.query && _url.query.testNativeWrapper === "true";
	nativeExtCall.init(_testMode);
	for (var m in _modules) {
		if (_modules[m].init) {
			_testWrappers[m] = _modules[m].init(_testMode);
		}
	}
	var module, moduleName;
	Object.keys(_capabilities).forEach(function(capability) {
		_capabilitiesModules[capability] = null;
		moduleName = _capabilities[capability];
		if (moduleName == null) {
			console.log("Native initialization", "No module has been found for capability [" + capability + "]");
			return;
		}
		module = _modules[moduleName];
		if (module == null) {
			console.log("Native initialization", "Unknown native module [" + module + "]");
			return;
		}
		if (module.supports == null) {
			console.log("Native initialization", "Module [" + moduleName + "] must implement 'supports' method");
			return;
		}
		if (module.supports(capability) !== true) {
			return null;
		}
		_capabilitiesModules[capability] = module;
	});
} catch (e) {
	console.log("native initialization failed");
	console.log(e);
}
exports.isTestMode = function() {
	return _testMode;
};
exports.hasCapability = function(capability) {
	return exports.getModule(capability) != null;
};
exports.getModule = function(capability) {
	return _capabilitiesModules[capability];
};

exports.callModule = function(capability, functionName) {
	var module = exports.getModule(capability);
	if (!module || !module[functionName]) return null;
	var args = Array.prototype.slice.call(arguments, 2);
	return module[functionName].apply(null, args);
};
/**
 * Allows the test wrapper to add commands in header
 * Must implement appendHeaderTestCmds
 */
exports.appendHeaderTestCmds = function($$root) {
	if (!exports.isTestMode()) return;
	Object.keys(_testWrappers).forEach(function(name) {
		// We call the test wrapper to keep the native interface clean
		var testWrapper = _testWrappers[name];
		if (testWrapper == null || !testWrapper.appendHeaderTestCmds) return;
		testWrapper.appendHeaderTestCmds($$root);
	});
};