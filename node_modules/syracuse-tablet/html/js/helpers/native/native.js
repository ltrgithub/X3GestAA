"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("native");
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

var _modules = {
	"share": require('syracuse-tablet/html/js/helpers/native/nativeShare'),
	"liveTile": require('syracuse-tablet/html/js/helpers/native/nativeLiveTile'),

	"scheduleMessage": require('syracuse-tablet/html/js/helpers/native/nativeMessages'),
	"toastMessages": require('syracuse-tablet/html/js/helpers/native/nativeMessages'),

	"penTextInput": require('syracuse-tablet/html/js/helpers/native/nativePenInput'),
	"penAnnotatedImage": require('syracuse-tablet/html/js/helpers/native/nativePenInput'),
	"penSignatureImage": require('syracuse-tablet/html/js/helpers/native/nativePenInput'),

	"camera": require('syracuse-tablet/html/js/helpers/native/nativeImage'),

	"voiceCommands": require('syracuse-tablet/html/js/helpers/native/nativeVoiceCommands'),

	"nativeApp": require('syracuse-tablet/html/js/helpers/native/nativeApp'),
	"dispatcherListener": require('syracuse-tablet/html/js/helpers/native/nativeApp'),
	"hardwareBackButton": require('syracuse-tablet/html/js/helpers/native/nativeApp')
};

/**
 * Initialization is required here to be able to call
 * var nativeVoiceCommmands = require('syracuse-tablet/html/js/helpers/native/native').getModule("voiceCommands");
 */
var _testMode = false;
try {
	var _url = jsutils.getCurrentUrl();
	_testMode = _url.query && _url.query.testNativeWrapper === "true";
	for (var m in _modules) {
		if (_modules[m].init) {
			_modules[m].init(_testMode);
		}
	}
} catch (e) {
	console.log("native initialization failed");
	console.log(e);
}
exports.isTestMode = function() {
	return _testMode;
};
exports.hasCapability = function(capability) {
	return exports.getModule(capability) != null;
};
exports.getModule = function(capability) {
	var module = _modules[capability];
	if (!module) {
		log && log("Unknown native module: " + capability);
		return null;
	}
	var support = module.supports(capability) ? module : null;
	log && log("Supported: " + (support != null));
	return support;
};

exports.callModule = function(capability, functionName) {
	var module = exports.getModule(capability);
	if (!module || !module[functionName]) return null;
	var args = Array.prototype.slice.call(arguments, 2);
	return module[functionName].apply(null, args);
};