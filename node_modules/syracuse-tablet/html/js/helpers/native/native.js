"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("native", false);
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var nativeExtCall = require('syracuse-tablet/html/js/helpers/native/nativeExtCall');
var nativeJSCall = require('syracuse-tablet/html/js/helpers/native/nativeJSCall');

var _modules = {
	"nativeShare": require('syracuse-tablet/html/js/helpers/native/nativeShare'),
	"nativeLiveTile": require('syracuse-tablet/html/js/helpers/native/nativeLiveTile'),
	"nativeMessages": require('syracuse-tablet/html/js/helpers/native/nativeMessages'),
	"nativePenInput": require('syracuse-tablet/html/js/helpers/native/nativePenInput'),
	"nativeImage": require('syracuse-tablet/html/js/helpers/native/nativeImage'),
	"nativeVoiceCommands": require('syracuse-tablet/html/js/helpers/native/nativeVoiceCommands'),
	"nativeApp": require('syracuse-tablet/html/js/helpers/native/nativeApp'),
	"nativeSensors": require('syracuse-tablet/html/js/helpers/native/nativeSensors'),
	"nativeBarcode": require('syracuse-tablet/html/js/helpers/native/nativeBarcode')
};

var _capabilities = {
	"nativeApp": "nativeApp",
	"dispatcherListener": "nativeApp",
	"hardwareBackButton": "nativeApp",

	"extLink": "nativeShare",
	"share": "nativeShare",

	"liveTile": "nativeLiveTile",

	"scheduleMessage": "nativeMessages",
	"toastMessages": "nativeMessages",

	"penTextInput": "nativePenInput",
	"penAnnotatedImage": "nativePenInput",
	"penSignatureImage": "nativePenInput",

	"camera": "nativeImage",
	"imageScale": "nativeImage",

	"voiceCommands": "nativeVoiceCommands",

	"scanBarcode": "nativeBarcode",
	"GPS": "nativeSensors"
};

var _capabilitiesModules = {};
/**
 * Initialization is required here to be able to call
 * var nativeVoiceCommmands = require('syracuse-tablet/html/js/helpers/native/native').getModule("voiceCommands");
 */
var _testMode = false;
var _testWrappers = {};

exports.isTestMode = function() {
	return _testMode;
};
exports.hasCapability = function(capability) {
	return exports.getModule(capability) != null;
};
exports.getModule = function(capability) {
	return _capabilitiesModules[capability];
};

exports.callModule = function(capability, functionName) {
	var module = exports.getModule(capability);
	if (!module || !module[functionName]) return null;
	var args = Array.prototype.slice.call(arguments, 2);
	return module[functionName].apply(null, args);
};
/**
 * Allows the test wrapper to add commands in header
 * Must implement appendHeaderTestCmds
 */
exports.appendHeaderTestCmds = function($$root) {
	if (!exports.isTestMode()) return;
	Object.keys(_testWrappers).forEach(function(name) {
		// We call the test wrapper to keep the native interface clean
		var testWrapper = _testWrappers[name];
		if (testWrapper == null || !testWrapper.appendHeaderTestCmds) return;
		testWrapper.appendHeaderTestCmds($$root);
	});
};
exports.init = function() {
	// Register global callback methods that can be access by eventual wrapper
	nativeJSCall.init();
	// Tells wrapper that app starts running
	nativeExtCall.appStartsRunning();
	return $.smResolve().then(function() {
		var _url = jsutils.getCurrentUrl();
		_testMode = _url.query && _url.query.testNativeWrapper === "true";
		nativeExtCall.init(_testMode);
		for (var m in _modules) {
			if (_modules[m].init) {
				_testWrappers[m] = _modules[m].init(_testMode);
			}
		}
	}).then(function() {
		return $.smForEachPromise(Object.keys(_capabilities), function(capability) {
			_capabilitiesModules[capability] = null;
			var moduleName = _capabilities[capability];
			if (moduleName == null) {
				log && log("Native initialization", "No module has been found for capability [" + capability + "]");
				return $.smResolve(false);
			}
			var module = _modules[moduleName];
			if (module == null) {
				log && log("Native initialization", "Unknown native module [" + module + "]");
				return $.smResolve(false);
			}
			if (module.supports == null) {
				log && log("Native initialization", "Module [" + moduleName + "] must implement 'supports' method");
				return $.smResolve(false);
			}
			return module.supports(capability);
		}, function(capability, supported) {
			if (supported === true) {
				_capabilitiesModules[capability] = _modules[_capabilities[capability]];
			}
		});
	}, true);
};
exports.getSupportedDB = function() {
	return nativeExtCall.getSupportedDB();
};