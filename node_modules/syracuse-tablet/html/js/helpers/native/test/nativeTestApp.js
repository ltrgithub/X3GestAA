"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("X3WUPApp", false);
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var localStorage = require('syracuse-tablet/html/js/storage/localStorage');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var nativeHelpers = require('syracuse-tablet/html/js/helpers/native/test/nativeTestHelpers');

var _closeAppliBtn = '\
	<div id="x3wupappbtn" title="Close application">\
		<a href="#" draggable="false" style= "color:#41a940";>\
		<i class="fa fa-power-off"></i>\
		</a>\
	</div>';

var _getCloseAppliBtn = function() {
	$("#x3wupappbtn").remove();
	return $(Handlebars.compile(_closeAppliBtn)()).css({
		"color": "#41a940",
		"float": "right",
		"padding-left": "8px",
		"font-size": ".7em",
		"top": "8px",
		"position": "relative"
	}).prependTo($('.s-m-header-nav'));
};

var _TestNativeWrapper = function() {

	this.nativeWrapperSupported = function() {
		return true;
	};
	this.hardwareBackButtonSupported = function() {
		return false;
	};

	// This will hide html back button and only allow the one of the browser toolbar
	this.hardwareBackButtonSupported = function() {
		return true;
	};

	/**
	 *
	 */
	this.notifMainpageLoaded = function() {
		_getCloseAppliBtn().click(jsutils.bindFn(this.onClickCloseAppli, this));
	};

	this.onClickCloseAppli = function() {
		this.onWebappUnloaded();
	};

	this.onWebappLoaded = function() {};
	/**
	 * historyContext is s a string
	 */
	this.onWebappUnloaded = function() {
		if (!window.smWrapperJS) return;
		try {
			this.setReconnectContext(nativeHelpers.callAppNativeInterface("nativeApp", "applicationClosing"));
			setTimeout(function() {
				window.location.reload();
			}, 100);
		} catch (e) {
			console.log(e.stack);
			return e.message;
		}
	};
	/**
	 *
	 */
	this.webappConfigServer = function() {};
	this.webappSelectServer = function() {};
	/**
	 * context is s a string
	 */
	this.setReconnectContext = function(context) {
		try {
			log && log("setReconnectContext", context);
			localStorage.setItem("$reconnectContext", context);
		} catch (e) {
			log && log("setReconnectContext", JSON.stringify(e));
		}
	};
	/**
	 * Returns a String
	 */
	this.getReconnectContext = function() {
		try {
			var context = localStorage.getItem("$reconnectContext");
			log && log("getReconnectContext", context);
			return context;
		} catch (e) {
			log && log("getReconnectContext", JSON.stringify(e));
			return null;
		}
	};
	/**
	 * Returns a String
	 */
	this.getReconnectToken = function() {
		try {
			var token = localStorage.getItem("$reconnectToken");
			log && log("getReconnectToken", token);
			return token;
		} catch (e) {
			log && log("getReconnectToken", JSON.stringify(e));
			return null;
		}
	};
	/**
	 * token is a string
	 */
	this.setReconnectToken = function(token) {
		try {
			log && log("setReconnectToken", token);
			localStorage.setItem("$reconnectToken", token);
		} catch (e) {
			log && log("setReconnectToken", JSON.stringify(e));
		}
	};

	// at the end
	notifications.subscribe(this, ["sm.mainpage.loaded"]);

};
exports.create = function() {
	return new _TestNativeWrapper();
};