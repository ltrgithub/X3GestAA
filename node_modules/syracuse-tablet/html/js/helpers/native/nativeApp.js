"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("nativeWUPApp", true);
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
var nativeTestApp = require('syracuse-tablet/html/js/helpers/native/test/nativeTestApp');
var nativeHelpers = require('syracuse-tablet/html/js/helpers/native/nativeHelpers');
var nativeExtCall = require('syracuse-tablet/html/js/helpers/native/nativeExtCall');

//Global object to be called by native code on low level events
if (!(window.smWrapperJS)) {
	window.smWrapperJS = {

		/*
		 *  This method will be invoked from wrapper when the user clicks the
		 *  hardware back button
		 *
		 *  return "true" - Back action is handled by JS code
		 *  return "false" - Back action is handled by native code (usually to close app).
		 */
		backButtonPressed: function() {
			return nativeHelpers.callAppNativeInterface("nativeApp", "backButtonPressed") ? "true" : "false";
		},

		/*
		 * Called by native wrapper when the application is going to terminate
		 */
		applicationClosing: function() {
			var currentHistoryStack = nativeHelpers.callAppNativeInterface("nativeApp", "applicationClosing");
			return currentHistoryStack;
		},

		/*
		 * Called only on the following scenaria
		 * Application is loaded but the user navigates back on a page that is driven by native code
		 * so the web app becomes invisible
		 * As soon as the user decides to start the same web app again (make it visible again) this method is called.
		 *
		 * The intention of this method is to check for online/offline mode and other things that may have changed
		 * since the web app was visible for the last time
		 */
		applicationActivated: function() {
			nativeHelpers.callAppNativeInterface("nativeApp", "applicationActivated");
		},

		/*
		 * connected:
		 * true: The index.html used to start this app can be accessed by the wrapper which usually means network is ok
		 * false: Network is down, index.html is not accessible
		 */
		connectivityChanged: function(connected) {
			log && log("connectivityChanged: " + connected);
			globals.setOffline(connected != true, false, true);
		}
	};
}


/**
 * Running inside a native container?
 * !!! Return a boolean
 */
exports.supports = function(capability) {
	if (capability === "nativeApp") {
		return nativeExtCall.isSupported("smApp", "nativeWrapperSupported");
	}
	if (capability === "hardwareBackButton") {
		return nativeExtCall.isSupported("smApp", "hardwareBackButtonSupported");
	}
	if (capability === "dispatcherListener") {
		return nativeExtCall.isSupported("smApp", "dispatcherListenerSupported");
	}
	return false;
};

/**
 * Management of reconnection
 * Returns the login token (reconnectToken) as string
 */
exports.getReconnectToken = function() {
	var token = nativeExtCall.callMethod("smApp", "getReconnectToken");
	if (token) {
		try {
			token = JSON.parse(token);
			return token.SyracuseSidLogin;
		} catch (e) {}
		return token;
	}
	return null;
};
/**
 * Management of reconnection
 * Stores the login token (reconnectToken)
 * Native method is called with a stringified context
 */
exports.setReconnectToken = function(token) {
	if (typeof token === "string") {
		token = {
			SyracuseSidLogin: token
		};
	}
	nativeExtCall.fireMethod("smApp", "setReconnectToken", token);
};
/**
 * Management of reconnection
 * Returns the user context to restore (context) as string
 * {
 * 		userCtx:
 * 		userProfile:
 *  	context:
 *  }
 */
exports.getReconnectContext = function() {
	return nativeExtCall.callMethod("smApp", "getReconnectContext");
};
/**
 * Management of reconnection
 * Stores the user context
 * Native method is called with a stringified context
 */
exports.setReconnectContext = function(context) {
	nativeExtCall.fireMethod("smApp", "setReconnectContext", context);
};
exports.configServer = function() {
	nativeExtCall.fireMethod("smApp", "configServer");
};
exports.selectServer = function() {
	nativeExtCall.fireMethod("smApp", "selectServer");
};

/*
 * This is ment to allow the wrapper to listen to dispatched sdata events
 * Can be used to trigger actions on the native side transparently
 *
 * E.g. if a native wrapper shows a live feed of data somewhere (live tiles) he can check if the sdata
 * url dispatched here concerns the same class as the data feed and trigger an internal update
 * without forcing the JS code to know about it
 *
 * link:
 * {
 * 	 Method: PUT|GET|POST
 * 	 Url: what ever url
 * }
 */
exports.dispatcherNotifyAfter = function(link) {
	nativeExtCall.fireMethod("smApp", "dispatcherNotifyAfter", link);
};


/*
 * Invokes the native app to tell loading the app has been finished to avoid a timeout
 */
exports.notifLoaded = function() {
	log && log("notifLoaded");
	nativeExtCall.fireMethod("smApp", "webappLoaded");
};

/*
 * Invokes the native app to tell application is unloaded
 * historyContext	Page history stack
 * 					Used by natoveTestWrapper top store history
 * Can return a message to display (error)
 */
exports.notifUnloaded = function(historyContext) {
	// This is only used by test code
	log && log("OnWebappUnloaded");
	if (window && window.smApp && window.smApp.onWebappUnloaded) {
		return window.smApp.onWebappUnloaded(historyContext ? JSON.stringify(historyContext, null, 2) : null);
	}
};

/*
 * Invokes native app to signal there was a critical error loading the app
 */
exports.notifStartFail = function(msg) {
	nativeExtCall.fireMethod("smApp", "webappLoadFail", msg);
};

exports.init = function(testMode) {
	if (window && window.smApp) return;
	if (!testMode) return;
	log && log("Creating native nativeApp test wrapper");
	window.smApp = nativeTestApp.create();
};