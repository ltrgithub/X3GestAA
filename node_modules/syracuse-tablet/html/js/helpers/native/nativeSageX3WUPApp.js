"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("nativeWUPApp", true);
var globals = require('syracuse-tablet/html/js/helpers/globals');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
// For tests
var utils = require('syracuse-tablet/html/js/helpers/utils');
var storageModule = require('syracuse-tablet/html/js/storage/storage');
var localStorage = require('syracuse-tablet/html/js/storage/localStorage');
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
var nativeTestWrapper = require('syracuse-tablet/html/js/helpers/native/nativeTestWrapper');

//Global object to be called by native code on low level events
if (!(window.smWrapperJS)) {
	window.smWrapperJS = {

		/*
		 *  This method will be invoked from wrapper when the user clicks the
		 *  hardware back button
		 *
		 *  return "true" - Back action is handled by JS code
		 *  return "false" - Back action is handled by native code (usually to close app).
		 */
		backButtonPressed: function() {
			return window.smWrapperJS.callAppNativeInterface("backButtonPressed") ? "true" : "false";
		},

		/*
		 * Called by native wrapper when the application is going to terminate
		 * This method must return a string that can contain what every is interessting
		 * for "applicationResuming" when the application restarts.
		 * E.g. session cookie
		 *
		 */
		applicationClosing: function() {
			return window.smWrapperJS.callAppNativeInterface("applicationClosing");
		},

		/*
		 * Called by wrapper once the application has restarted
		 * dataString will be the same string as returned by  "applicationClosing"
		 */
		applicationResuming: function(dataString) {
			return window.smWrapperJS.callAppNativeInterface("applicationResuming", dataString);
		},
		callAppNativeInterface: function() {
			var app = globals.getApplication();
			if (!app) return null;
			return app.nativeInterface.apply(app, arguments);
		}
	};
}


/**
 * Running inside a native container?
 * !!! Return a boolean
 */
exports.isSageX3WUPApp = function() {
	return window ? window.smNativeApp != null : false;
};

/**
 * Management of reconnection
 * Returns the login token (reconnectToken) as string
 */
exports.getReconnectToken = function() {
	try {
		var token = window.smNativeApp && window.smNativeApp.getReconnectToken && window.smNativeApp.getReconnectToken();
		log && log("Get reconnect token: " + token);
		return token ? JSON.parse(token) : null;
	} catch (e) {
		return null;
	}
};
/**
 * Management of reconnection
 * Stores the login token (reconnectToken)
 * Native method is called with a stringified context
 */
exports.setReconnectToken = function(token) {
	try {
		if (token) {
			token = {
				SyracuseSidLogin: token
			};
		}
		window.smNativeApp && window.smNativeApp.setReconnectToken && window.smNativeApp.setReconnectToken(token ? JSON.stringify(token, null, 2) : null);
	} catch (e) {}
};
/**
 * Management of reconnection
 * Returns the user context to restore (context) as string
 * {
 * 		userCtx:
 * 		userProfile:
 *  	context:
 *  }
 */
exports.getReconnectContext = function() {
	try {
		var ctx = window.smNativeApp && window.smNativeApp.getReconnectContext && window.smNativeApp.getReconnectContext();
		return ctx ? JSON.parse(ctx) : null;
	} catch (e) {
		return null;
	}
};
/**
 * Management of reconnection
 * Stores the user context
 * Native method is called with a stringified context
 */
exports.setReconnectContext = function(context) {
	try {
		window.smNativeApp && window.smNativeApp.setReconnectContext && window.smNativeApp.setReconnectContext(context ? JSON.stringify(context, null, 2) : null);
	} catch (e) {}
};
/**
 * Management of reconnection
 * Returns history context to restore as string
 */
exports.getHistoryContext = function(context) {
	try {
		var ctx = window.smNativeApp && window.smNativeApp.getHistoryContext && window.smNativeApp.getHistoryContext();
		return ctx ? JSON.parse(ctx) : null;
	} catch (e) {
		return null;
	}
};
exports.configServer = function() {
	log && log("OnWebappConfigServer");
	// Be carefull, JS name is lowercase (e.g. setPhraseList) while C# name must be uppercase (e.g. SetPhraseList)
	return window &&
		window.smNativeApp &&
		window.smNativeApp.onWebappConfigServer &&
		window.smNativeApp.onWebappConfigServer();

};
/*
 * Invokes the native app to tell loading the app has been finished to avoid a timeout
 */
exports.notifLoaded = function() {
	log && log("OnWebappLoaded");
	// Be carefull, JS name is lowercase (e.g. setPhraseList) while C# name must be uppercase (e.g. SetPhraseList)
	return window &&
		window.smNativeApp &&
		window.smNativeApp.onWebappLoaded &&
		window.smNativeApp.onWebappLoaded();

};
/*
 * Invokes the native app to tell application is unloaded
 * historyContext	Page history stack
 * 					Used by natoveTestWrapper top store history
 */
exports.notifUnloaded = function(historyContext) {
	log && log("OnWebappUnloaded");
	if (window && window.smNativeApp && window.smNativeApp.onWebappUnloaded) {
		window.smNativeApp.onWebappUnloaded(historyContext ? JSON.stringify(historyContext, null, 2) : null);
	}
};
/*
 * Invokes native app to signal there was a critical error loading the app
 */
exports.notifStartFail = function(msg) {
	log && log("OnWebappLoadFail");
	// Be carefull, JS name is lowercase (e.g. setPhraseList) while C# name must be uppercase (e.g. SetPhraseList)
	return window &&
		window.notifStartFail &&
		window.notifStartFail.onWebappLoadFail &&
		window.notifStartFail.onWebappLoadFail(msg);
};
exports.init = function() {
	if (exports.isSageX3WUPApp()) return;
	var url = utils.getCurrentUrl();
	if (!url.query || url.query.testNativeWrapper !== "true") return;

	log && log("Creating native test wrapper");
	window.smNativeApp = nativeTestWrapper.create();
};