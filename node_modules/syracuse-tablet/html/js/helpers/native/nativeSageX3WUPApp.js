"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("nativeWUPApp", true);
var globals = require('syracuse-tablet/html/js/helpers/globals');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

//Global object to be called by native code on low level events
if (!(window.smWrapperJS)) {
	window.smWrapperJS = {

		/*
		 *  This method will be invoked from wrapper when the user clicks the
		 *  hardware back button
		 *
		 *  return true - Back action is handled by JS code
		 *  return false - Back action is handled by native code (usually to close app).
		 */
		backButtonPressed: function() {
			var app = globals.getApplication();
			var curPage = app && app.currentPage;
			if (!curPage) {
				return false;
			}
			// On the login page, we can never go back, let the wrapper handle the back button
			if (jsutils.isInstanceOf(curPage, "LoginPage") === true) {
				return false;
			}

			// TODO: Go back in history, if not possible return false to navigate inside native app
			return false;
		},

		/*
		 * Called by native wrapper when the application is going to terminate
		 * This method must return a string that can contain what every is interessting
		 * for "applicationResuming" when the application restarts.
		 * E.g. session cookie
		 *
		 */
		applicationClosing: function() {
			// TODO:
			return JSON.stringify({
				sesstionid: "..."
			});
		},

		/*
		 * Called by wrapper once the application has restarted
		 * dataString will be the same string as returned by  "applicationClosing"
		 */
		applicationResuming: function(dataString) {
			var data = JSON.parse(dataString);
			// TODO: Handle Data
		}
	};
}

/*
 * Running inside a native containder?
 */
exports.isSageX3WUPApp = function() {
	return window && window.smNativeApp;
};

/*
 * Invokes the native app to show a page to select another server
 */
exports.configServer = function() {
	log && log("OnWebappConfigServer");
	// Be carefull, JS name is lowercase (e.g. setPhraseList) while C# name must be uppercase (e.g. SetPhraseList)
	return window &&
		window.smNativeApp &&
		window.smNativeApp.onWebappConfigServer &&
		window.smNativeApp.onWebappConfigServer();

};
/*
 * Invokes the native app to tell loading the app has been finished to avoid a timeout
 */
exports.notifLoaded = function() {
	log && log("OnWebappLoaded");
	// Be carefull, JS name is lowercase (e.g. setPhraseList) while C# name must be uppercase (e.g. SetPhraseList)
	return window &&
		window.smNativeApp &&
		window.smNativeApp.onWebappLoaded &&
		window.smNativeApp.onWebappLoaded();

};

/*
 * Invokes native app to signal there was a critical error loading the app
 */
exports.notifStartFail = function(msg) {
	log && log("OnWebappLoadFail");
	// Be carefull, JS name is lowercase (e.g. setPhraseList) while C# name must be uppercase (e.g. SetPhraseList)
	return window &&
		window.notifStartFail &&
		window.notifStartFail.onWebappLoadFail &&
		window.notifStartFail.onWebappLoadFail(msg);
};