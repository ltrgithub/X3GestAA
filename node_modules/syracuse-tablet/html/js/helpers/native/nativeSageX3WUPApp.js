"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("nativeWUPApp", true);
var globals = require('syracuse-tablet/html/js/helpers/globals');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
// For tests
var utils = require('syracuse-tablet/html/js/helpers/utils');
var storageModule = require('syracuse-tablet/html/js/storage/storage');


//Global object to be called by native code on low level events
if (!(window.smWrapperJS)) {
	window.smWrapperJS = {

		/*
		 *  This method will be invoked from wrapper when the user clicks the
		 *  hardware back button
		 *
		 *  return "true" - Back action is handled by JS code
		 *  return "false" - Back action is handled by native code (usually to close app).
		 */
		backButtonPressed: function() {
			return window.smWrapperJS.callAppNativeInterface("backButtonPressed") ? "true" : "false";
		},

		/*
		 * Called by native wrapper when the application is going to terminate
		 * This method must return a string that can contain what every is interessting
		 * for "applicationResuming" when the application restarts.
		 * E.g. session cookie
		 *
		 */
		applicationClosing: function() {
			return window.smWrapperJS.callAppNativeInterface("applicationClosing");
		},

		/*
		 * Called by wrapper once the application has restarted
		 * dataString will be the same string as returned by  "applicationClosing"
		 */
		applicationResuming: function(dataString) {
			return window.smWrapperJS.callAppNativeInterface("applicationResuming", dataString);
		},
		callAppNativeInterface: function() {
			var app = globals.getApplication();
			if (!app) return null;
			return app.nativeInterface.apply(app, arguments);
		}
	};
}
var _testMode = null;
/**
 * Used to test automatic login
 * if true
 * 		Automatic login is enabled
 * 		ForgetMe on logout is disabled
 * 		The data reconnect token/context are stored in local DB
 * To test with FF:
 * 		Login the application
 * 		Logout
 * 		Remove cookies only (with FF only because Chrome removes the db content when we remove cookies)
 * 		Reload the page
 * 			Normally the session cookie is not sent to the server so we should'nt be able to reconnect automatically
 * 		We should be reconnected and the welcome page should be displayed
 * 			The login cookie has been read in local DB (getReconnectToken) and a request has been send to return a set-cookie with login cookie
 * 			Only the server can do this operation
 * 			After login the login cookie is stored in local DB (if no wrapper)
 *
 */
var _testNativeWrapper = function() {
	if (_testMode == null) {
		var url = utils.getCurrentUrl();
		_testMode = url.query && url.query.testNativeWrapper === "true";
	}
	return _testMode;
};

/**
 * Running inside a native container?
 */
exports.isSageX3WUPApp = function() {
	return _testNativeWrapper() || (window && window.smNativeApp);
};
/**
 * Management of reconnection
 * Returns the login token (reconnectToken)
 */
exports.getReconnectToken = function() {
	var deferred = $.Deferred();
	try {
		if (_testNativeWrapper()) {
			storageModule.getStorage().simpleStorageRead("$reconnectToken").then(function(data) {
				// console.log("getReconnectToken", data);
				deferred.resolve(data);
			}).fail(function(e) {
				// console.log(e);
				deferred.resolve(null);
			});
		} else {
			deferred.resolve(window.smNativeApp && window.smNativeApp.getReconnectToken && window.smNativeApp.getReconnectToken());
		}
	} catch (e) {
		// console.log(e);
		deferred.resolve(null);
	}
	return deferred.promise();
};
/**
 * Management of reconnection
 * Stores the login token (reconnectToken)
 */
exports.setReconnectToken = function(token) {
	try {
		if (_testNativeWrapper()) {
			storageModule.getStorage()[token == null ? "simpleStorageRemove" : "simpleStorageWrite"]("$reconnectToken", token);
		} else {
			window.smNativeApp && window.smNativeApp.setReconnectToken && window.smNativeApp.setReconnectToken(token);
		}
	} catch (e) {}
};
/**
 * Management of reconnection
 * Returns the context to restore (context)
 * {
 * 		userCtx:
 * 		userProfile:
 *  	context:
 *  }
 */
exports.getReconnectContext = function() {
	var deferred = $.Deferred();
	try {
		var ctx;
		if (_testNativeWrapper()) {
			storageModule.getStorage().simpleStorageRead("$reconnectContext").then(function(data) {
				// console.log("getReconnectContext", data);
				deferred.resolve(data);
			}).fail(function(e) {
				deferred.resolve(null);
			});
		} else {
			deferred.resolve(window.smNativeApp && window.smNativeApp.getReconnectContext && window.smNativeApp.getReconnectContext());
		}
	} catch (e) {
		// console.log(e);
		deferred.resolve(null);
	}
	return deferred.promise();
};
/**
 * Management of reconnection
 * Stores the context
 */
exports.setReconnectContext = function(context) {
	try {
		if (_testNativeWrapper()) {
			storageModule.getStorage()[context == null ? "simpleStorageRemove" : "simpleStorageWrite"]("$reconnectContext", context);
		} else {
			strContext = context ? JSON.stringify(context, null, 2) : null;
			window.smNativeApp && window.smNativeApp.setReconnectContext && window.smNativeApp.setReconnectContext(strContext);
		}
	} catch (e) {}
};

/*
 * Invokes the native app to show a page to select another server
 */
exports.configServer = function() {
	log && log("OnWebappConfigServer");
	// Be carefull, JS name is lowercase (e.g. setPhraseList) while C# name must be uppercase (e.g. SetPhraseList)
	return window &&
		window.smNativeApp &&
		window.smNativeApp.onWebappConfigServer &&
		window.smNativeApp.onWebappConfigServer();

};
/*
 * Invokes the native app to tell loading the app has been finished to avoid a timeout
 */
exports.notifLoaded = function() {
	log && log("OnWebappLoaded");
	// Be carefull, JS name is lowercase (e.g. setPhraseList) while C# name must be uppercase (e.g. SetPhraseList)
	return window &&
		window.smNativeApp &&
		window.smNativeApp.onWebappLoaded &&
		window.smNativeApp.onWebappLoaded();

};

/*
 * Invokes native app to signal there was a critical error loading the app
 */
exports.notifStartFail = function(msg) {
	log && log("OnWebappLoadFail");
	// Be carefull, JS name is lowercase (e.g. setPhraseList) while C# name must be uppercase (e.g. SetPhraseList)
	return window &&
		window.notifStartFail &&
		window.notifStartFail.onWebappLoadFail &&
		window.notifStartFail.onWebappLoadFail(msg);
};