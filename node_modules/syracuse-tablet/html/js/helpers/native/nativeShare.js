"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("nativeShare");
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var nativeTestShare = require('syracuse-tablet/html/js/helpers/native/wrapperTest/nativeTestShare');
var nativeHelpers = require('syracuse-tablet/html/js/helpers/native/nativeHelpers');
var nativeExtCall = require('syracuse-tablet/html/js/helpers/native/nativeExtCall');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');



var _ShareManager = function() {

	this.enabled = false;
	this.pendingLinks = null;
	this._currentDeferred = null;

	/*
	 *  This method will be invoked from wrapper once the pen input has finished or failed
	 *  data:
	 *  {
	 *  	action: "ok" | "cancelled",
	 *  }
	 */
	this.shareFinished = function(data) {
			if (this._currentDeferred) {
				var def = this._currentDeferred;
				this._currentDeferred = null;
				log && log("Got share: " + JSON.stringify(data || {}));
				def.resolve(data);
			}
		},

		/*
		 * Called by wrapper when the app is activated by a link
		 * data:
		 * {
		 * 	Url: url (url containing all information to go back to a specific page, sent as url option by sharePageLink)
		 *  Title: Title of url (sent as title option by sharePageLink)
		 * }
		 */
		this.handleLink = function(data) {
			log && log("handleLink: " + JSON.stringify(data, null, 2));
			if (this.enabled === true) {
				this.triggerLink(data);
			} else {
				log && log("handleLink: add pending link");
				this.pendingLinks = this.pendingLinks || [];
				this.pendingLinks.push(data);
			}
		};
	/**
	 * Enables shareManager to actually handle link
	 * Process pending links
	 * When we open a page from a live tile the wrapper triggers handleLink after having been notified that application has been loaded (notifLoaded)
	 * But the link can be actually triggered once the user has been logged in (if any) and application is ready (sm.application.ready)
	 * notifApplicationReady tells that sahreManager can execute handle link
	 */
	this.notifApplicationReady = function(ok) {
		this.enabled = true;
		if (this.pendingLinks) {
			log && log("handleLink: trigger pending link");
			// Only the last pushed linked
			this.triggerLink(this.pendingLinks.pop());
			this.pendingLinks = null;
		}
	};

	this.triggerLink = function(data) {
		log && log("handleLink: triggerLink " + JSON.stringify(data, null, 2));
		if (!data || !data.Url) return;
		try {
			var url = jsutils.parseURL(data.Url);
			log && log("url: " + JSON.stringify(url, null, 2));
			if (!url || !url.query || !url.query.context) return;
			var contextId = url.query.context;
			log && log("context: " + contextId);
			nativeHelpers.callAppNativeInterface("share", "handleLink", contextId);
		} catch (e) {
			log && log("handleLink: failed", e);
			return;
		}
	};

	notifications.subscribe(this, ["sm.application.ready"]);
};

// Global object to be called by native code on pencil events
if (!(window.smShareJS)) {
	window.smShareJS = new _ShareManager();
}
/**
 *
 */
exports.supports = function(capability) {
	if (capability === "share") {
		return nativeExtCall.isSupported("smShare", "sharePageLinkSupported");
	}
	return $.smResolve(false);
};

/**
 * options:
 * {	
      pageData: {
		title: "Customers" // title that will be shown when page is shared
		url: url that is embedded in sent message and will be passed to handleLink method once the user clicks on the message 
		
		--- optional for now:
		
		id:"..."
		sdataParameters:"..."
		endPoint: "x3.erp.SEEDAMBAS"
		htmlRoot: "http://pc101458:8124/syracuse-tablet/html"
		language: "en-US"
		name: "x3.erp.GX3APP.BPCUSTOMERM.$query"
		sDataUrl: "http://pc101458:8124/mobile1/x3/erp/GX3APP/BPCUSTOMER?representation=BPCUSTOMERM.$query",
		
		DeepLink: {
			Title,
			Url,
		}
	  }
 * }
 */
exports.sharePageLink = function(options) {
	// DeepLink.Url must contain all information required to allow the webapp to navigate back to the current page including it's
	// eventual state (like filters)
	// DeepLink data structure will be shared by other similar functions
	// DeepLink: {
	//		Title: 
	//		Url: 
	//	}

	var param = {
		Title: options.pageData.Title,
		Description: options.pageData.Description,
		DeepLink: options.pageData.DeepLink
	};

	var data = JSON.stringify(param);
	_ShareManager._currentDeferred = $.Deferred();
	nativeExtCall.fireMethod("smShare", "sharePageLink", data);
	return _ShareManager._currentDeferred.promise();
};
/**
 * Returns the test js wrapper
 */
exports.init = function(testMode) {
	if (window && window.smShare) return;
	if (!testMode) return;
	log && log("Creating native share test wrapper");
	window.smShare = nativeTestShare.create();
	return window.smShare;
};