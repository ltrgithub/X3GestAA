"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("nativeLiveTile");
var nativeTestLiveTile = require('syracuse-tablet/html/js/helpers/native/test/nativeTestLiveTile');


var _currentDeferred;
//Global object to be called by native code on pencil events
if (!(window.smLiveTileJS)) {
	window.smLiveTileJS = {

		/*
		 *  This method will be invoked from wrapper when there was a live tile action executed.
		 *  data {
		 *  	action :"add" //"remove" "get"
		 *  	content:{ (null in case of get if not tile found)
		 *  			id:"id passed",
		 *  			title:"my customers",
		 *  			...
		 * 		}
		 *  	error:{ (if error occurs)
		 *  		no:"132001"
		 *  		text:"Not found", "unexpected error" ...
		 *  	}
		 *  }
		 * On error return is:
		 * {
		 *   error: {
		 *     text: "<error removing tile, for reason xxx>"
		 *   }
		 * }
		 */
		addLiveTileFinished: function(data) {
			if (_currentDeferred) {
				var def = _currentDeferred;
				_currentDeferred = null;
				log && log("Command live tile add finished: " + JSON.stringify(data || {}));
				def.resolve(data);
			}
		}
	};
}

/**
 *
 */
exports.supports = function(capability) {
	if (capability === "liveTile") {
		var supported = (window && window.smLiveTile && window.smLiveTile.addLiveTile) || false;
		log && log("Live tile : " + supported);
		return supported;
	}
	return false;
};

/**
	options:{
		"name":"x3.erp.GX3APP.BPCUSTOMERM.$query",
		"title":"Clients",
		"id":"x3.erp.GX3APP.BPCUSTOMERM.$query_http://pc101458:8124/mobile1/x3/erp/GX3APP/BPCUSTOMER?representation=BPCUSTOMERM.$query",
		"icon":"star",
		"sDataUrl":"http://pc101458:8124/mobile1/x3/erp/GX3APP/BPCUSTOMER?representation=BPCUSTOMERM.$query",
		"representation":"BPCUSTOMERM",
		"facet":"$query",
		"action":"$query",
		"entity":"BPCUSTOMER",
		"endpoint":"x3.erp.GX3APP",
		"applicationName":"sagesalescustomers"
	}
	
	Return see addLiveTileFinished
 */
exports.addLiveTile = function(options) {
	if (window && window.smLiveTile && window.smLiveTile.addLiveTile) {
		_currentDeferred = $.Deferred();
		log && log("addLiveTile:" + JSON.stringify(options));
		var data = JSON.stringify(_getTileDataStruct(options));
		window.smLiveTile.addLiveTile(data);
		return _currentDeferred.promise();
	} else {
		return $.smResolve();
	}
};

/*
 * Pack everything into a structure understood by native code
 */
function _getTileDataStruct(options) {
	var param = {
		Id: options.id,
		Title: options.Title,
		Description: options.description,
		BackgroundColor: options.backgroundColor,
		ForegroundColor: options.textColor,
		SdataUrl: options.sDataUrl,
		DeepLink: options.DeepLink,

		// Date extraction:

		BindArray: options.bind || "$resources", // Name of array property to use for live tile. 
		// E.g. $resources = array so it will be the number of records in the array shown on the live tile.
		BindDetail: "" // Name of property to read value for live tile
		// E.g. BPCNAM = property, so value of property BPCNAM will be used in live tile
		// NOTE:
		// If BindArray and BindDetail are both given, the live tile will 
		// show the value of BindDetail column of the first record of the array 
		// given by BindArray 
	};
	return param;
}

exports.init = function(testMode) {
	if (window && window.smLiveTile) return;
	if (!testMode) return;
	log && log("Creating native Live Tile test wrapper");
	window.smLiveTile = nativeTestLiveTile.create();
};