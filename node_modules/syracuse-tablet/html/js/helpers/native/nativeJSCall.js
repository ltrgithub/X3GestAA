"use strict";

/*
 * This module is called by an external wrapper and maps the calls to javascript methods
 */

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("nativeJSCall", true);

exports.init = function() {

	if (!(window.smJSCall)) {
		/*
		 * This method is the only one that will ever be invoked by wrapper code
		 * It dispatches all incomming calls to dedicated objects per domain
		 */
		window.smJSCall = function(objectName, methodName, jsonParam) {
			try {
				log && log("smJSCall (objectName): " + objectName);
				log && log("smJSCall (methodName): " + methodName);
				var traceParam
				if (jsonParam == null || $.isPlainObject(jsonParam)) {
					// Nothing - JSON or null accepted as parameter
					traceParam = JSON.stringify(jsonParam, null, 2)
				} else if (typeof jsonParam === "string") {
					try { // try to parse json, if it fails, data is assumed to be a plain string
						jsonParam = JSON.parse(jsonParam);
						traceParam = JSON.stringify(jsonParam, null, 2)
					} catch (e) {
						// plain string
						traceParam = jsonParam
					}
				} else {
					// We assume it's a string
					traceParam = jsonParam = new String(jsonParam)
				}
				log && log("smJSCall (jsonParam): " + traceParam);
				var obj = window[objectName];
				if (obj == null) {
					log && log("JS Object not found[" + objectName + "] - Can't call method " + methodName);
					return
				}
				var method = obj && obj[methodName];
				var ret = method && method.call(obj, jsonParam);

				// Only strings supported right now!
				if (typeof ret !== "string") {
					ret = "" + ret;
				}
				log && log("smJSCall (return): " + ret);
				return ret;
			} catch (ex) {
				log && log(JSON.stringify(ex));
				throw ex;
			}
		};
	}
};