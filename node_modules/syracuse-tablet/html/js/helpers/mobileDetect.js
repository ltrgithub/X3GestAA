"use strict";

/**
 * Npm module that detects browsers - Used on desktop
 */
var _bowser = require('syracuse-tablet/html/deps/bowser/bowser');
//platform is used for desktop only - seems that's a reliable library
var _platform = require('syracuse-tablet/html/deps/platform/platform');


/**
 * Default initialization
 * http://hgoebl.github.io/mobile-detect.js/doc/MobileDetect.html#MobileDetect
 */
var _MobileDetect = (function() {
	return window.MobileDetect ? new window.MobileDetect(window.navigator.userAgent) : null;
})();

var _getDesktopOs = function() {
	if (_MobileDetect && _MobileDetect.mobile() !== null) {
		return null;
	}
	if (!_platform || !_platform.os) {
		return null;
	}
	switch (_platform.os.family) {
		case "Windows":
		case "Windows Server 2008 R2 / 7":
		case "Windows Server 2008 / Vista":
		case "Windows XP":
			return windows;
		case "OS X":
			return "osx"
		case "Ubuntu":
		case "Debian":
		case "Fedora":
		case "Red Hat":
		case "SuSE":
			return "linux"
		default:
			return nul;
	}
}

var _defaultOSStyle = "windows";
var _currentDesktopOS = _getDesktopOs();


/**
 * called by application when user agent has changed (test device on chrome degugger)
 */
exports.init = function(log) {
	if (_bowser && _bowser._detect) {
		_bowser = _bowser._detect(window.navigator.userAgent);
	}
	_MobileDetect = window.MobileDetect ? new window.MobileDetect(window.navigator.userAgent) : null;
	_currentDesktopOS = _getDesktopOs();
	if (log) {
		log("User agent Name", window.navigator.userAgent);
		log("Browser Name: ", exports.getBrowserName());
		log("Browser OS: ", exports.isMobile() ? _MobileDetect.os() : _currentDesktopOS);
		log && log("Browser OS Style: ", exports.getStyleOS());
	}
};
//Returns the os for style ios/windows/android
exports.getStyleOS = function() {
	var os = _MobileDetect == null ? _defaultOSStyle : _MobileDetect.os();
	switch (os) {
		case "AndroidOS":
			return "android";
		case "WindowsMobileOS":
		case "WindowsPhoneOS":
			return "windows";
		case "iOS":
			return "ios";
		case "PalmOS":
		case "BlackBerryOS":
		case "MeeGoOS":
		case "MaemoOS":
		case "JavaOS":
		case "webOS":
		case "badaOS":
		case "BREWOS":
		case "SymbianOS":
		default:
			return _defaultOSStyle;
	}
};
// check ios/windows/android
// http://hgoebl.github.io/mobile-detect.js/doc/MobileDetect.html#os
// For desktop, windows/osx/linux
exports.isOs = function(os) {
	if (_MobileDetect == null) {
		return os === _currentDesktopOS;
	}
	switch (_MobileDetect.os()) {
		case "AndroidOS":
			return os === "android";
		case "WindowsMobileOS":
		case "WindowsPhoneOS":
			return os === "windows";
		case "iOS":
			return os === "ios";
		case "PalmOS":
		case "BlackBerryOS":
		case "MeeGoOS":
		case "MaemoOS":
		case "JavaOS":
		case "webOS":
		case "badaOS":
		case "BREWOS":
		case "SymbianOS":
		default:
			return os === _currentDesktopOS;
	}
};
// http://hgoebl.github.io/mobile-detect.js/doc/MobileDetect.html#mobile
exports.isMobile = function() {
	return _MobileDetect && _MobileDetect.mobile() !== null;
};
var _mobileDetectCheckBrowser = function(name, log) {
	if (_MobileDetect == null) return null;
	var res = _MobileDetect.userAgent();
	if (!res) return null;
	res = res.toLowerCase();
	res = (res === "ie" && name === "msie") || res === name;
	if (res === true) {
		log && log(name, "detect by mobile-detect");
	}
	return res;
};
var _bowserCheckBrowser = function(name, log) {
	if (_bowser == null) return null;
	var res = _bowser[name] === true;
	if (res === true) {
		log && log(name, "detect by bowser");
	}
	return res;
};
var _checkBrowserName = function(name, log) {
	// use bowser for desktop and mobile-detect for mobile
	// FDB I did a lot of tests and it's the better way
	// - Eg safari on IOS is not detected as Safari by bowser but mobile-detect doesn't detect correctly browser on a desktop...
	var res = (exports.isMobile() ? _mobileDetectCheckBrowser : _bowserCheckBrowser)(name, log);
	if (res == null) {
		res = (exports.isMobile() ? _bowserCheckBrowser : _mobileDetectCheckBrowser)(name, log);
	}
	return res;
};
/** Key (case insensitive):
 * Accepts chrome, firefox, msie, msedge, opera, phantom, safari, seamonkey
 * Accepts multiple arguments msie, msedge...
 */
exports.checkBrowserName = function() {
	var result = false,
		name, bn;
	for (var i = 0; i < arguments.length; i++) {
		result = result || _checkBrowserName(arguments[i].toLowerCase());
	}
	return result;
};
/**
 * Just for info
 */
exports.getBrowserName = function() {
	var res = exports.isMobile() ? _MobileDetect.userAgent() : _bowser.name;
	if (res == null) {
		res = exports.isMobile() ? _bowser.name : _MobileDetect.userAgent();
	}
	return res ? res.toLowerCase() : "Not detected";
};
exports.getOsName = function() {
	var os = _MobileDetect.os();
	if (!os && _platform && _platform.os) {
		os = _platform.os.family
	}
	return _MobileDetect.os() || "Not detected";
};
exports.testBrowserName = function(log) {
	var result = {};
	["chrome", "firefox", "msie", "msedge", "opera", "phantom", "safari", "seamonkey"].forEach(function(b) {
		result[b] = _checkBrowserName(b, log);
	});
	//log && log(JSON.stringify(_bowser, null, 2));
	log && log(JSON.stringify(result, null, 2));
	return result;
};
exports.getDesktopOs = function() {
	return _currentDesktopOS
}