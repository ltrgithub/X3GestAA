"use strict";
var globals = require('syracuse-tablet/html/js/helpers/globals');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');


var _localeModule;


// Used to force the use of the cache to speed up response time for tests
var _forceUseCache = function() {
	var url = jsutils.getCurrentUrl();
	return url.query && url.query.forceUseCache === "true";
};
// Used to force the dvlp mode with minimized version - For tests
var _forceDvlpMode = function() {
	var url = jsutils.getCurrentUrl();
	return url.query && url.query.forceDvlpMode === "true";
};

var _addClassMembers = function(klass, members) {
	if (!klass || !members || !klass.prototype) return;
	var proto = klass.prototype;
	for (var name in members || {}) {
		var member = members[name];
		if (typeof member.get === "function" || typeof member.set === "function") {
			Object.defineProperty(proto, name, member);
		} else {
			proto[name] = member;
		}
	}
};

exports.init = function(locale) {
	_localeModule = locale;
};

var _defineClass = function(constructor, parent, members) {
	if (parent) constructor.prototype = Object.create(parent.prototype);
	constructor.prototype.constructor = constructor;
	_addClassMembers(constructor, members);
	// !!! The name of the class is the name of the constructor (function)
	// NOTE: THIS DOES NOT SLOW DOWN THE APPLICATION
	// Classes are defined one time at startup, there classes and baseclasses are then stored in an array only once
	// So isInstanceOf will be fast in the rare cases it is used! No need to add a specific flag on which classes to register
	jsutils.addInheritanceInfo(constructor, parent);
	return constructor;
};

/* Universal UUID - Not readable */
var _UUID = function() {
	return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,
		function(c) {
			var r = Math.random() * 16 | 0,
				v = c == 'x' ? r : (r & 0x3 | 0x8);
			return v.toString(16);
		});
};

var _getCurISODateTime = function(date) {
	var currentdate = date || new Date();
	var values = [
		currentdate.getFullYear(), 4, (currentdate.getMonth() + 1), 2,
		currentdate.getDate(), 2,
		currentdate.getHours(), 2,
		currentdate.getMinutes(), 2,
		currentdate.getSeconds(), 2
	];
	var datetime;
	for (var i = 0; i < values.length; i += 2) {
		var val = "" + values[i];
		while (val.length < values[i + 1]) {
			val = "0" + val;
		}
		if (!datetime) {
			datetime = val;
		} else {
			datetime += "-" + val;
		}
	}
	return datetime;
};
var _isoDateTimeToDate = function(stringDate) { // stringDate "2015-10-13-12-04-50"
	if (stringDate == null || typeof stringDate !== "string") {
		return new Date();
	}
	var val = stringDate.split("-");
	if (val.length !== 6) {
		return new Date();
	}
	return new Date(val[0], parseInt(val[1], 10) - 1, val[2], val[3], val[4], val[5]);
};

var _getTimeFromString = function(stringDate) { // stringDate "2015-10-13-12-04-50"
	if (stringDate) {
		var val = stringDate.split("-");
		return new Date(val[0], parseInt(val[1], 10) - 1, val[2], val[3], val[4], val[5]).getTime();
	} else {
		return new Date().getTime();
	}
};


/* Return a DOM compliant id */
var _domIdCpt = 0;
var _domId = function(id) {
	return id.replace(/([^\w-_])/g, '_');
};

/* Readable ui for html dom ids */
var _uidCpt = 0;
var _readableuid = function() {
	return _domId($.camelCase((arguments.length > 0 ? Array.prototype.join.call(arguments, '-') + '-' : "") + _uidCpt++));
};

/* Parse url QS */
var _qsParser = /([^&=;]*)=?([^&;]*)/g;
var _parseQueryString = function(qs) {
	qs = qs || window.location.search;
	var res = {};
	var qs = decodeURIComponent(qs);
	var ii = qs.indexOf('?');
	if (ii >= 0) {
		qs = qs.substring(ii + 1);
	}
	qs.replace(_qsParser, function($0, $1, $2) {
		if ($1 && $1.length > 0) {
			res[$1] = decodeURIComponent($2);
		}
	});
	return res;
};

/* Encoding/Decoding stuff*/
// TODO - can be improved
var _htmlEncode = function(value) {
	return $('<div/>').text(value).html();
};
var _htmlDecode = function(value) {
	return $('<div/>').html(value).text();
};
/**
 *  Resolves expression according to current dataset and prototype
 *  	expression: Syrause SData expression
 *  	dataset: optionnal - DaoSdata object (with value method to chain with a parent) or a simple JSON object
 *  			 if dataset=null prototype must be != null
 *  	prototype: optionnal - PrototypeObject
 * 		searchInParent: true to find variable in parent if not found in dataset #5793
 **/
var _exprRegExp = /\{(.*?)\}/g;
var _execExpression = function(expression, dataset, prototype, searchInParent, level, keepPlaceholder) {
	level = level || 0;
	expression = (expression || "") + "";
	//	TODO  - to remove - FDB - Expresion without brackets must return itself and must not be resolved
	//	if (level === 0 && expression.indexOf("{") < 0 && dataset) {
	//		console.log("NO BRACKET EXPRESSION " + expression);
	//		var value = dataset.getValue ? dataset.getValue(expression) : dataset[expression];
	//		return value == null ? "" : value;
	//	}
	var prevProp = null;
	var res = expression.replace(_exprRegExp,
		function(match, prop) {
			var empty = keepPlaceholder ? match : "";
			// Search in data first - "{VACBPR}~{LEG}"
			var val = dataset == null ? null : dataset.getValue ? dataset.getValue(prop, undefined, searchInParent) : dataset[prop];
			if (val != null) return val;
			if (!prototype) return empty;
			if (prop.smStartsWith('@')) {
				//Case @1234
				return prototype.localization(prop) || "";
			}
			val = prototype.data(prop, dataset, null, true);
			if (val != null && val.indexOf("{") >= 0 && level < 4) {
				// Search in prototype - ex "{@7898}", "{$baseUrl}/$prototype('{$representation}.$thumb')"
				return _execExpression(val, dataset, prototype, searchInParent, level + 1, keepPlaceholder);
			}
			return val == null ? empty : val;
		});
	return res || "";
};

/*
 * Returns of the application is physically running on a desktop PC
 * This function MUST ignore eventually emulation properties set by authoring
 */
exports.isDesktop = function() {
	var agt = navigator.userAgent;
	var mobile = (agt.match(/(iphone|ipod|ipad)/) || agt.match(/(android)/i) || agt.match(/(iemobile)/) || agt.match(/iphone/i) || agt.match(/ipad/i) || agt.match(/ipod/i) || agt.match(/blackberry/i) || agt.match(/bada/i));
	return !mobile;
};

/*
	Extract code from ref field prototype expression {x}
*/
var _extractCode = function($expression) {
	$expression = $expression + "";
	if ($expression.indexOf("{") >= 0) {
		return $expression.slice(1, $expression.length - 1);
	}
	return $expression;
};
var _isExpression = function(value) {
	if ($.type(value) !== "string") return false;
	return /^{@.*}$/.test(value);

};
var _sanitizeArticle = function(article) {
	if (!article) return article;
	var value = $.extend(true, {}, article);

	function _walk(value) {
		if (value == null || typeof value !== "object") return;
		// Object.keys(value).some works for both arrays and objects
		Object.keys(value).forEach(function(key) {
			var v = value[key];
			if ((key === "$title" || key === "$titleOrig") && v != "" && !_isExpression(v)) {
				// Remove titles of old version of authoring that are not localized (if any) - The title of the proto will be displayed instead
				delete value[key];
			} else {
				_walk(v);
			}
		});
	};
	_walk(value);
	return value;
};
/**
 * Only if current pages  is a dashboard
 * return the parent vignette or null
 * we assume that there are no dashboard in vignettes
 */
var _findParentVignette = function($$target, fail) {
	var app = globals.getApplication();
	if (app.currentPage && app.currentPage.isDashboard()) {
		// Find vignette controlId + get vignette control
		var $$v = $$target.closest(".s-m-control.s-m-vignette");
		var vignetteId = $$v.attr("id");
		if (fail && (vignetteId == null || vignetteId.length === 0)) throw new Error("Vignette DOM elmt not found");
		var vignette = app.currentPage.getControl(vignetteId);
		if (fail && !vignette) throw new Error("Vignette not found - id[" + vignetteId + "]");
		return vignette;
	} else if (fail) {
		throw new Error("Current page is not a dashboard");
	}
	return null;
};

/**
 * Given a dom elmt find the parent controller
 * data-controller-id is generated by controller base class to allow to retreive a control
 * Controller is not only a page and we must be able to retrieve it
 */
var _findController = function($$elmt) {
	var $$parent = $$elmt.closest("[data-controller-id]");
	if ($$parent && $$parent.length > 0) {
		var id = $$parent.attr("data-controller-id");
		return globals.getController(id);
	}
	return null;
};
/*
 * Find control instance from DOM element control or layout
 */
var _findControl = function($$ctrl) {
	var controller = _findController($$ctrl);
	if (!controller) {
		return null;
	}
	return controller.getStructElmt($$ctrl.attr("id"));
};
/**
 * True if hammer event has the dir direction
 * dir	h or v
 * 		   -90			+180<-- -->0
 * 			^			       |
 * 			|                 +90
 * -180 <-- -->   0
 */
var _isEvtDirection = function(evt, dir, forceTrueIfNull) {
	// If hammer as no event it's - we can have the case with panup pandown without velocity
	// by default if work with if (ui.isEvtDirection(evt, "v")) return; - null evt means we continue
	if (evt == null) return forceTrueIfNull === true;
	if (evt.angle == null) throw new Error("this is not a hammer.js event");
	if ((evt.angle > 45 && evt.angle < 135) || (evt.angle < -45 && evt.angle > -135)) return dir == "v";
	return dir == "h";
};
/**
 * For authoring - Don't stop shiftKey/altKey used by scrolling
 */
var _stopClickEvent = function(e) {
	return e.shiftKey !== true && e.altKey !== true;
};
var refTime = new Date().getTime();
var _timeLineCfg = {
	"ajax": false,
	"page": false,
	"pageLoader": false,
	"cacheUpdate": false
};

var _TimeLine = _defineClass(function(type, id) {
	this.type = type;
	this.id = id;
}, null, {
	log: function(step) {
		var time = new Date().getTime();
		var delta = this._prevTime == null ? 0 : time - this._prevTime;
		this._prevTime = time;
		console.log(time - refTime, this.type, this.id, step, "elasped=" + (time - this._start), "delta=" + delta);
	},
	start: function(step) {
		this._start = new Date().getTime();
		this.log(step ? "start " + step : "start");
	},
	step: function(step) {
		this.log(step);
	},
	stop: function(step) {
		this.log(step ? "stop " + step : "stop");
	},
	reset: function() {
		this._prevTime = null;
		this._start = null;
		return this;
	}
});
/**
 * type			page, sendHttp
 * id			url, name...
 * forceEnable	true 		Force enable
 * 				false 		Force disabled
 * 				undefined 	check _timeLineCfg[type]
 */
var _getTimeLine = function(type, id, forceEnable) {
	try {
		if (forceEnable === false) return;
		if (forceEnable !== true && _timeLineCfg[type] !== true) return null;
		if (type.indexOf("page") === -1 && id != null) {
			id = id + "";
			var p = id.indexOf("representation=");
			if (p >= 0) {
				id = id.substr(p + 15);
			} else {
				var p = id.indexOf("x3/erp/");
				if (p >= 0) {
					id = id.substr(p + 7);
				} else {
					var p = id.indexOf("collaboration/syracuse/");
					id = id.substr(p + 23);
				}
			}
			id = decodeURIComponent(id);
		}
		return new _TimeLine(type, id);
	} catch (e) {
		console.log(e);
	}
};

var _hasProp = function(obj, key) {
	return Object.prototype.hasOwnProperty.call(obj, key);
};

var _areEqual = function(obj1, obj2, strict) {
	if (strict ? obj1 === obj2 : obj1 == obj2)
		return true;
	if (obj1 == null || obj2 == null)
		return false;
	if (Array.isArray(obj1) && Array.isArray(obj2)) {
		if (obj1.length != obj2.length)
			return false;
		for (var i = 0; i < obj1.length; i++)
			if (!_areEqual(obj1[i], obj2[i]))
				return false;
		return true;
	}

	if (typeof obj1 != "object" || typeof obj2 != "object") return false;
	var combined = $.extend({}, obj1);
	$.extend(combined, obj2);
	for (var i in combined) {
		if (_hasProp(combined, i)) {
			var val1 = obj1[i];
			var val2 = obj2[i];
			if (!_areEqual(val1, val2))
				return false;
		}
	}
	return true;
};

var _typeNamesByMime = {};
var _regExpMimeToType = /-|\//g;
exports.getTypeName = function(mime) {
	var type = _typeNamesByMime[mime];
	if (!type) {
		// used to generate readable ids - type expected "application/x-name" or "text/plain"
		var a = mime.split(_regExpMimeToType);
		type = _typeNamesByMime[mime] = a[a.length - 1];
	}
	return type;
};

var _authPageProps = ["$pageActionSettings", "$allowDownload"];
/**
 * Authoring properties of a page
 */
var _authCopyPageProperties = function(src, dst) {
	if (!src || !dst) return;
	_authPageProps.forEach(function(p) {
		if (src[p] != null || (dst[p] != null && src[p] == null)) {
			dst[p] = src[p];
		}
	});
};
exports._checksum = function(text) {
	var a = 1,
		b = 0;
	for (var index = 0; index < text.length; ++index) {
		a = (a + text.charCodeAt(index)) % 65521;
		b = (b + a) % 65521;
	}
	return (b << 16) | a;
};

exports.arrayInt = function(min, max) {
	return Array(max - min + 2).join().split(',').map(function(e, i) {
		return min + i;
	});
};
exports.isPromise = function(o) {
	if (o == null) return false;
	return typeof o === "object" && typeof o.then === "function" && typeof o.fail === "function";
};
exports.toPromise = function(o) {
	if (exports.isPromise(o)) return o;
	return $.smResolve(o);
};
exports.authCopyPageProperties = _authCopyPageProperties;
exports.areEqual = _areEqual;
exports.stopClickEvent = _stopClickEvent;
exports.isEvtDirection = _isEvtDirection;
exports.extractCode = _extractCode;
exports.isExpression = _isExpression;
exports.sanitizeArticle = _sanitizeArticle;
exports.UUID = _UUID;
exports.defineClass = _defineClass;
exports.addClassMembers = _addClassMembers;

exports.readableuid = _readableuid;
exports.domId = _domId;
exports.parseQueryString = _parseQueryString;
exports.htmlEncode = _htmlEncode;
exports.htmlDecode = _htmlDecode;
exports.getCurISODateTime = _getCurISODateTime;
exports.isoDateTimeToDate = _isoDateTimeToDate;
exports.getTimeFromString = _getTimeFromString;
exports.parseExpression = function(expression, dataset, prototype, searchInParent, keepPlaceholder) {
	return _execExpression(expression, dataset, prototype, searchInParent, 0, keepPlaceholder);
};
//local Localization text 
exports.getArticleLocalization = function(article) {
	if (!article || !article.$localization) return null;
	var localization = $.extend(true, {}, article.$localization);
	var loc = localization && localization[_localeModule.getCurrentLocale()];
	if (loc && localization[globals.fallbackLocaleCode]) {
		loc.$fallback = $.extend(true, {}, localization && localization[globals.fallbackLocaleCode]);
	} else if (!loc) {
		if (localization && localization[globals.fallbackLocaleCode]) {
			loc = localization && localization[globals.fallbackLocaleCode];
		}
	}
	return loc;
};
//local Localization text 
exports.getCurrentPage = function() {
	return globals.getCurrentPage();
};
// Retunr fr, en .. not en-US, fr-FR
exports.getNavigatorLanguage = function(def) {
	return navigator.language || navigator.userLanguage || def;
};
exports.sameLanguage = function(l1, l2) {
	if (!l1 || !l2) return false;
	l1 = l1.toLowerCase();
	l2 = l2.toLowerCase();
	if (l2 === l1) { // en-us === en-us
		return true;
	} else { // en-us === en
		l1 = l1.split('-');
		l2 = l2.split('-');
		return l1[0] === l2[0];
	}
};
exports.splitSdataKey = function(key) {
	return key && key.split("~");
};
var _splitExp = /({)|(})/g;
exports.sdataExtractKeyFields = function(key) {
	if (key == null || key.length === 0 || !key.replace) return;
	return exports.splitSdataKey(key.replace(_splitExp, ""));
};
exports.getPropByPath = jsutils.getPropByPath;
exports.findParentVignette = _findParentVignette;
exports.findController = _findController;
exports.findControl = _findControl;
// Used to analyse performances
exports.getTimeLine = _getTimeLine;
exports.forceUseCache = _forceUseCache;
exports.forceDvlpMode = _forceDvlpMode;