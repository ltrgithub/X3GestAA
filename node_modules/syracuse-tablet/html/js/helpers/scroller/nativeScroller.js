"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/helpers/scroller/scrollerBase').Klass;

var _consts = {
	dirToAxis: {
		v: "y",
		h: "x"
	},
	dirToOtherAxis: {
		v: "x",
		h: "y"
	}
};

var _Klass = utils.defineClass(function NativeScroller($$elmt, options) {
	Base.call(this, $$elmt, options);
	this.restoredScroll = null;
}, Base, {
	_setCSS: function() {
		var $$parent = this.$$elmt.parent();
		var css = {};
		css["overflow-" + _consts.dirToAxis[this.dir]] = "auto"; // scrolling axis
		css["overflow-" + _consts.dirToOtherAxis[this.dir]] = "hidden"; // "unused" or fixed axis
		$$parent.css(css);
		// remove default touch action on all elements
		// would be better if doing this by loading a css file with the appropriate * {} selector instead of setting it on each element
		$("*").css({
			"touch-action": "auto",
			"-ms-touch-action": "auto"
		});
	},
	init: function(viewRect, dir) {
		Base.prototype.init.call(this, viewRect, dir);
		this._setCSS();
		if (this.restoredScroll != null) {
			this.scroll(this.restoredScroll);
		}
	},
	savedCtxCreate: function() {
		return {
			scroll: this.dir === "h" ? this.$$elmt.scrollLeft() : this.$$elmt.scrollTop()
		};
	},
	savedCtxRestore: function(ctx, refresh) {
		if (ctx == null || ctx.scroll == null) return;
		if (refresh) {
			this.scroll(ctx.scroll);
		} else {
			this.restoredScroll = ctx.scroll;
		}
	},
	scroll: function(scroll) {
		if (!this.$$elmt && scroll >= 0) return;
		this.$$elmt[this.dir === "h" ? "scrollLeft" : "scrollTop"]();
	},
	checkViewRect: function(viewRect, preserveScroll) {
		// TODO
		return;
	},
	makeVisible: function($$e) {
		if ($$e && $$e.scrollIntoView) {
			$$e.scrollIntoView(true);
		}
	}
});

exports.Klass = _Klass;