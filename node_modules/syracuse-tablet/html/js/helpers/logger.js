"use strict";

var winjs = require('syracuse-tablet/html/js/helpers/winjs');

var _log;

if (winjs.isAvailable()) {
	_log = function() {
		var args = [];
		for (var i = 0; i < arguments.length; i++) {
			args.push(arguments[i]);
		}
		winjs.callWinJS("logger", "log", {
			"args": args
		}, true);
	};
} else {
	_log = function() {
		var text = [];
		for (var i = 0; i < arguments.length; i++) {
			var a = arguments[i];
			if (a != null) {
				if (_isError(a))
					console && console.log && console.log(a.message, "\n", _cleanStack(a.stack));
				else
					text.push(a);
			}
		}
		console && console.log && console.log(text.join(text, " "));
	};
}
if (window) {
	window.logger = _log;
}

function _getLogger(module) {
	if (true || module !== "sdataDispatcher" && module !== "SDataCache")
		return null;
	var logger = function() {
		var text, errs;
		for (var i = 0; i < arguments.length; i++) {
			if (_isError(arguments[i])) {
				if (!errs) errs = [];
				errs.push(arguments[i]);
			} else {
				if (!text) text = ["[" + module + "]: "];
				text.push(arguments[i]);
			}
		}
		if (text && text.length > 1) _log(text.join(" "));
		if (errs) {
			errs.forEach(function(e) {
				_log("[" + module + "]: " + e.message);
				if (e.stack) _log(_cleanStack(e.stack));
			});
		}
	};
	return logger;
}

/** 
 * Clean error stack from current base url and limit the size due to the use of deferred
 * html: true -> Display in Html
 **/

var _stackRegexp;
var _cleanStack = function(stack, max, html) {
	var globals = window.$sm;
	if (!_stackRegexp && globals && globals.baseLocation()) {
		_stackRegexp = {
			r1: new RegExp(globals.baseLocation().withPath, "g"),
			r2: new RegExp(globals.baseLocation().requirePath, "g")
		};
	}

	max = max == null ? 5 : max;
	if (stack) {
		var array = stack.split("\n");
		var res;
		if (array.length > 0) {
			array.forEach(function(l) {
				var pos1 = l.lastIndexOf(".js");
				if (pos1 > 0) {
					var pos2 = l.lastIndexOf("/", pos1);
					if (pos1 > 0) {
						if (!res) res = [];
						res.push(l.substring(pos2));
					}
				}
			});
		}
		if (!res && _stackRegexp) {
			stack = _stackRegexp ? stack.replace(_stackRegexp.r1, "").replace(_stackRegexp.r2, "") : stack;
		} else {
			stack = res.join('\n');
		}
	} else {
		stack = "";
	}
	stack = stack.split("\n");
	if (stack.length > max) {
		stack = stack.splice(0, max).join(html ? "<br>&nbsp&nbsp&nbsp&nbsp&nbsp" : "\n");
	}
	return stack;
};

var _isError = function(o) {
	return o && Error.prototype.toString === o.toString;
};
exports.log = _log;
exports.getLogger = _getLogger;
/** Like we nned these method here we published them instead of duplicating the code */
exports.cleanStack = _cleanStack;
exports.isError = _isError;