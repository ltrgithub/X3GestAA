"use strict";

var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var siteLayout = require('syracuse-tablet/html/js/ui/siteLayout');
var localStorage = require('syracuse-tablet/html/js/storage/localStorage');

var modules = require('syracuse-tablet/html/js/common/modules');


var _deltaExample = '\
{\n \
  "WMENU": 3,\n\
  "$properties": {\n\
    "WMENU": {\n\
      "$isReadOnly": true\n\
    }\n\
  }\n\
}';

var _gotoExample = {
	url: "http://localhost:8124/mobile2/x3/erp/GX3APP/AQMDEVICE?representation=AQMCRUDM.$query&count=50",
	//url: "html:///login",
	//url: "http://localhost:8124/mobile2/x3/erp/GX3APP/AQMDEVICE('10')?representation=AQMCRUDM.$edit",
	//url: "http://localhost:8124/mobile2/syracuse/collaboration/syracuse/mobileDashboards(dashboardName%20eq%20'STD_X3_ERP_EXPENSES_DASHBOARD')?representation=mobileDashboard.$details",
	method: "GET"
};

var _template = '\
	<div id="page_dev_mode" style="margin: 0; width: auto; position: absolute; z-index: 9999"> \
    <div class="modal-dialog" style="margin: 0; width: auto;"> \
		<div class="modal-content" style="width: auto;"> \
		    <div class="modal-header"> \
				<h4 class="modal-title">{{title}}</h4> \
		    </div> \
		    <div class="modal-body"> \
				<div class="form-group"> \
					<label>{{label_device}}</label>\
					<select class="form-control" id="dev-select-device"> \
					{{#each devices}}\
						<option value="{{this.device}}.{{this.orientation}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
					<span class="input-group"> \
						<input id="dev-device-scale" type="checkbox" {{#if scaleChecked}}checked{{/if}}>{{label_scale}} \
					</span> \
				</div> \
				<div class="form-group"> \
					<span class="input-group"> \
						<input id="dev-cache" type="checkbox" {{#if cacheChecked}}checked{{/if}}>{{label_cache}} \
	  				</span> \
					<span class="input-group"> \
						<input id="dev-app-force-update" type="checkbox" {{#if alwaysUpdateChecked}}checked{{/if}}>Always update apps \
					</span> \
				</div> \
				<div class="form-group"> \
					<label>Goto URL</label><br>\
					<input id="s-m-goto-url-id" value="{{gotoUrl}}"></input><br>\
					<input id="s-m-goto-method-id" value="{{gotoMethod}}"></input><br>\
					<button type="button" class="btn" id="btn-goto-id">Go</button> \
					<button type="button" class="btn" id="btn-curl-id">Current url</button> \
				</div> \
				<div class="form-group"> \
					<label>SData-Delta</label><br>\
					<textarea rows="8" cols="35" id="s-m-delta-json-id" style="white-space: nowrap;">{{deltaExample}}</textarea><br>\
					<button type="button" class="btn" id="btn-apply-delta-id">Apply</button> \
				</div> \
			</div> \
		    <div class="modal-footer"> \
				<button type="button" class="btn" id="btn_dev_close">{{label_close}}</button> \
				<button type="button" class="btn btn-default" disabled="true" id="btn_dev_apply">{{label_apply}}</button> \
    			<button type="button" class="btn" id="btn_dev_ok">{{label_ok}}</button> \
			</div> \
		</div> \
	</div> \
	</div>';

var _show = function() {
	_setActive(true);

	if ($("#page_dev_mode").is(":visible")) {
		return;
	}
	var modalHtml = Handlebars.compile(_template);
	var devs = siteLayout.getDeviceTemplates();

	var ctx = {
		title: "Development settings",

		label_device: "Device",
		devices: [],

		label_scale: "Scale if needed",

		label_cache: "Disable caching",

		label_close: "Cancel",
		label_ok: "Ok",
		label_apply: "Apply",

		scaleChecked: localStorage.getItem("devPanelScale") === "true",
		cacheChecked: localStorage.getItem("devPanelCache") === "true",
		alwaysUpdateChecked: localStorage.getItem("alwaysUpdateChecked") === "true",
		deltaExample: _deltaExample,
		gotoUrl: _gotoExample.url,
		gotoMethod: _gotoExample.method
	};

	ctx.devices.push({
		device: "<No emulation>",
		orientation: "landscape",
		description: "<No emulation>"
	});

	for (var dev in devs) {
		devs[dev].orientations.forEach(function(o) {
			var devName = dev;
			var orientName = o;

			var opt = {
				device: dev,
				orientation: o,
				description: devName + " (" + o + ")"
			};
			ctx.devices.push(opt);
		});
	}
	var lastDev = localStorage.getItem("devPanelDevice") || "<No emulation>.landscape";
	ctx.devices.forEach(function(d) {
		d.selected = (lastDev === d.device + "." + d.orientation);
	});
	modalHtml = modalHtml(ctx);
	$("body").append($(modalHtml));
	var $$page = $("#page_dev_mode");
	$$page.draggable();

	$("#btn-apply-delta-id", $$page).on("click", function() {
		_applyDelta();
	});
	$("#btn-goto-id", $$page).on("click", function() {
		var url = $("#s-m-goto-url-id").val();
		var method = $("#s-m-goto-method-id").val();
		modules.get("navHelper").gotoUrl(url, method).fail(function(e) {
			console.log(e);
		});
	});

	$("#btn-curl-id", $$page).on("click", function() {
		_updateUrl();
	});

	$("#btn_dev_ok", $$page).on("click", function() {
		apply();
		$$page.remove();
	});
	$("#btn_dev_apply", $$page).on("click", function() {
		apply();
		// If we click a second time on the button the rendering is not good (panels)
		$("#btn_dev_apply", $$page).attr("disabled", "true");
	});

	$("#btn_dev_close", $$page).on("click", function() {
		_setActive(false);
		$$page.remove();
	});
	$("#dev-select-device", $$page).on("change", function() {
		$("#btn_dev_apply", $$page).removeAttr("disabled");
	});
	$('input[type="checkbox"]', $$page).on("click", function() {
		$("#btn_dev_apply", $$page).removeAttr("disabled");
	});
	var apply = function() {
		var device = $$page.find("#dev-select-device").val();
		var dev = device.split(".");
		var params = {
			layout: {
				pageParameters: {}
			}
		};
		localStorage.setItem("devPanelDevice", device);
		if (device === "<No emulation>.landscape") {
			params.layout.pageParameters.forcePreview = false;
			params.layout.pageParameters.forceAutoScale = false;
			params.layout.pageParameters.device = "tablet";
			params.layout.pageParameters.orientation = "landscape";
		} else {
			params.layout.pageParameters.device = dev[0];
			params.layout.pageParameters.orientation = dev[1];
			params.layout.pageParameters.forcePreview = true;

			if ($("#dev-device-scale", $$page).is(":checked") === true) {
				params.layout.pageParameters.forceAutoScale = true;
				localStorage.setItem("devPanelScale", "true");
			} else {
				params.layout.pageParameters.forceAutoScale = false;
				localStorage.setItem("devPanelScale", "false");
			}
		}

		if ($("#dev-cache", $$page).is(":checked") === true) {
			localStorage.setItem("devPanelCache", "true");
			//cache.disableCache(true);
		} else {
			localStorage.setItem("devPanelCache", "false");
			//cache.disableCache(false);
		}

		if ($("#dev-app-force-update", $$page).is(":checked") === true) {
			localStorage.setItem("alwaysUpdateChecked", "true");
			//cache.disableCache(true);
		} else {
			localStorage.setItem("alwaysUpdateChecked", "false");
			//cache.disableCache(false);
		}


		uiutils.triggerResizeInternal(params);
	};

	apply();
};

function _setActive(flag) {
	localStorage.setItem("devPanelOpen", flag ? "true" : "false");
}

exports.restoreOnStartup = function() {
	if (localStorage.getItem("devPanelOpen") === "true") {
		exports.show();
	}
}

exports.show = _show;

function _applyDelta() {
	try {
		var json = $("#s-m-delta-json-id").val();
		var obj = JSON.parse(json);

		console.log("Data: ");
		console.log(obj);

		var $$page = $(".s-m-page.s-m-full[data-controller-id]").first();
		var controllerId = $$page.attr("data-controller-id");
		var controller = modules.get("controller").findController(controllerId);

		console.log("Controller: ");
		console.log(controller);
		controller && controller._mergeDelta(obj);

		console.log("Delta applied");
	} catch (e) {
		alert(e.message);
	}
}

function _updateUrl() {
	var navStack = modules.get("navStack").getMainStack();
	var currentPage = navStack && navStack.getTopPage();
	var url = currentPage.pageData && currentPage.pageData.$url;
	var method = currentPage.pageData && currentPage.pageData.$method || "GET";

	var href = window.location.href;
	var i = href.indexOf("?");
	if (i > -1) {
		href = href.substr(0, i);
	}
	href = href + "?url=" + encodeURIComponent(url);
	href = href + "&method=" + encodeURIComponent(method);

	window.location.href = href;
}