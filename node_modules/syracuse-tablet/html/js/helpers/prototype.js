"use strict";
var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("prototype");
var Gadget = require('syracuse-tablet/html/js/application/gadget').Klass;
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');


// Add display info for facet actions - Simplify by adding name.action.$edit... in resources
var _addFacetLink = function(info, facet) {
	info.icon = fontUtils.getIconByName(facet);
	switch (facet) {
		case "$edit":
			info.title = "Edit";
			break;
		case "$query":
			info.title = "List";
			break;
		case "$save":
			info.title = "Save";
			break;
		case "$details":
			info.title = "Detail";
			break;
		case "$delete":
			info.title = "Delete";
			break;
		case "$create":
			info.title = "Create";
			break;
		default:
			log && log("Facet " + facet + " not implemented yet");
			info.title = "???";
			break;
	}
};

var _defMetaData = {
	"$isExcluded": false,
	"$isHidden": false,
	"isMandatory": false,
	"$isReadOnly": false,
	"$isDisabled": false
};
/**
 * Property of prototype that contains row index
 */
var _rowIdxProperty = "$ROWIDX";
var _rowIdxProto = null;
var _singleArrayProp = "$data";
/**
 * getFieldNameForValue
 */
var _reg1 = /{[^}]+}/g,
	_reg2 = /[{}]/g;
/**
 * Prototype class
 * 	Provides all the method to deal with prototype
 * 	manage prototype chaining parent -> child
 * !!use Prototype methods instead of dealing directly with JSON
 */
var _Prototype = utils.defineClass(function(json, parent) {
	var self = this;
	self.json = json || {};
	if (typeof self.json == "string") {
		self.json = JSON.parse(self.json);
	}
	self._children = null;
	if (parent) {
		parent._appendChild(self);
		self.parent = parent;
	}
	self.init();
}, null, {
	init: function() {
		var self = this;
		var props = self.json.$properties;
		if (!props) return;
		for (var p in props) {
			if (props[p].$type === "application/x-reference") {
				self.initRefField(props[p], p);
			}
		}
	},
	destroy: function() {
		var self = this;
		self.parent = null;
		self.json = null;
		if (self._children) {
			self.children.forEach(function(c) {
				if (c) c.destroy();
			});
		}
		self._children = null;
	},
	/**
	 * For destroy
	 */
	_appendChild: function(child) {
		var self = this;
		if (!self._children) self._children = [];
		self._children.push(child);
	},
	/**
	 * returns json[prop]
	 * 	ignoreParent: true -> Don't read property in parent
	 */
	data: function(prop, dataContext, ignoreParent) {
		var self = this;
		if (!prop || prop.length == 0) return null;
		var val = self.json[prop];
		if (val == null) {
			return ignoreParent !== true && self.parent ? self.parent.data(prop) : val;
		}
		return self.checkExpression(val, dataContext);
	},
	/**
	 * returns JSON for json.$properties[name]
	 * If prop!=null returns json.$properties[name][prop]
	 * dataContext: optional
	 */
	property: function(name, prop, dataContext) {
		var self = this;
		if (!name || name.length === 0) return null;
		var o = self.json.$properties ? self.json.$properties[name] : self.parent ? self.parent.property(name) : null;
		if (!o || !prop) return o;
		return self.checkExpression(o[prop], dataContext);
	},
	/**
	 * True if the property prop is a x-reference
	 */
	isReference: function(propname) {
		var p = this.property(propname);
		return p && p.$type === "application/x-reference";
	},
	/**
	 * Check value and resolve if it's an expression or title otherwise return val
	 * 	dataContext optional (used for expressions other than localization)
	 */
	checkExpression: function(val, dataContext) {
		if (val && val.indexOf && val.indexOf('{') >= 0) {
			val = utils.parseExpression(val, dataContext, this);
		}
		return val;
	},
	getMetaData: function(name) {
		var self = this;
		if (!self._metaData) self._metaData = {};
		var meta = self._metaData[name];
		if (meta) return meta;
		meta = self._metaData[name] = $.extend({}, _defMetaData, self.property(name));
		return meta;
	},
	localization: function(val) {
		var self = this;
		var loc = self.json.$localization || {};
		return loc[val] ? loc[val] : self.parent ? self.parent.localization(val) : null;
	},
	/**
	 * returns a prototype object for json.$properties[prop] or $item proto for grids
	 *  override: 	optional - override JSON properties
	 *  			used by row detail to get page prototype from array field proto
	 */
	getPrototype: function(prop, override) {
		if (prop === "$item") {
			var json = this.data(prop);
		} else {
			var json = this.property(prop);
		}
		return json ? exports.create($.extend({}, json, override), this) : null;
	},
	/**
	 * Query prototype
	 */
	isQuery: function() {
		if (this._isQuery != null) return this._isQuery;
		var url = this.data("$url");
		this._isQuery = url && url.smEndsWith("$query") ? true : false;
		return this._isQuery;
	},
	/**
	 * Lookup prototype
	 */
	isLookup: function() {
		if (this._isLookup != null) return this._isLookup;
		var url = this.data("$url");
		this._isLookup = url && url.smEndsWith("$lookup") ? true : false;
		return this._isLookup;
	},
	/**
	 * Format for display a value according to proto description
	 * Temporarily
	 */
	formatDisplay: function(prop, dataContext) {
		var self = this;
		var info = self.property(prop);

	},
	/**
	 * Temporarily - Add our own property - TODO Find another way
	 * 		Add row index in prototype for grids
	 */
	addProperty: function(name, descr) {
		var self = this;
		if (descr && self.json.$properties && !self.json.$properties[name]) {
			self.json.$properties[name] = descr;
		}
	},
	getPropTitle: function(propName) {
		var self = this;
		var prop = self.property(propName);
		return prop && prop.$title ? self.checkExpression(prop.$title) : "";

	},
	/**
	 * Returns the name of the field that contains the value ($refValue)
	 * 	For std type it returns name
	 * 	For reference type
	 * 		Set $refValue in prototype
	 * 		Set $lookupdescr - I don't remember if it will be used in tablet but I suppose - TODO remove if not used
	 * 		In mobile client this method was called after having loaded the prototype to calculated additionnal information needed by the client
	 */

	getFieldNameForValue: function(name) {
		var protoField = this.property(name);
		var item = protoField && protoField.$item;
		// reference fiels have been initialized at creation of proto object - initRefField
		return item && item.$refValue ? item.$refValue : name;
	},
	initRefField: function(protoField, name) {
		var self = this;
		if (!protoField) throw new Error("Field proto expected[" + name + "]");
		var item = protoField.$item;
		if (!item || item.$refValue) return;
		item.$refValue = name;
		if (item.$value && typeof item.$value == "string") {
			var vals = item.$value.match(_reg1);
			if (vals && vals.length == 1) {
				// In X3 we expect only one param in $values -> "{CUR}"
				// v : must point to key of cd object - { $value:"{F1}", F1:"{F2}"} - F2 must be a field of cd parent
				var f1 = vals[0].replace(_reg2, "").trim();
				if (item.$properties && item.$properties[f1]) {
					// Field/Property that contains the value in data returned selection in lookup list
					item.$lookupvalue = f1;
				}
				if (item[f1]) {
					var f2 = item[f1].replace(_reg2, "").trim();
					if (self.property(f2)) {
						// Field that contains the value in the prototype - Same field in collaboration - Dedicated field in X3 :-(
						item.$refValue = f2;
					} // else field not found in parent keep $$refValue = property
				} // else item  key not found keep $refValue = property
			} else {
				log && log("!!! _getRefenceValue - Only one value is expected");
			}
		}
		// Copied from mobile client - TODO see if still useful
		// Add $lookupdescr which gives the field that contains $description 
		if (item.$description && item.$properties && typeof item.$description == "string") {
			var descrs = item.$description.match(_reg1);
			if (descrs && descrs.length == 1) {
				var fld = descrs[0].replace(_reg2, "").trim();
				if (item.$properties[fld]) {
					item.$lookupdescr = fld;
				}
			}
		}
		return item.$refValue;
	},
	/**
	 * Returns the name of the field that contains the value in lookup selected row
	 * The current proto is a x-reference prototype
	 */
	getLookupValue: function() {
		return this.getDataByPath("$item.$lookupvalue");
	},
	/**
	 * return the value of a given path
	 * 	path:	String with/without '.' as separator or array of strings
	 */
	getDataByPath: function(path) {
		return utils.getPropByPath(this.json, path, this);
	},
	getVignetteGadget: function() {
		var json = this.data("$gadget");
		return json ? new Gadget(json) : null;
	},
	/**
	 * Return an array of link info
	 * filter 		visible				actions displayed in footer and visible page
	 *				hidden				actions displayed in action panel
	 * 				all or empty		all actions
	 *
	 */
	getLinks: function(controllerDao, filter, options) {
		var self = this;
		var result = [];
		if (!controllerDao) {
			// controllerDao is needed to calculated links provided by prototye
			// TODO - In the current version ony regular pages (representaion) have a dao
			// So there no $link in dashboards - To add links n dashboard a dao is neededq
			return [];
		}
		options = options || {};
		filter = filter || "all";
		// getLinksStatus takes into account the merge of proto and data $links properties
		var $links = controllerDao.getLinksStatus(self);
		if ($links && Object.keys($links).length > 0) {
			$.each($links, function(name, value) {
				try {
					if (value == null || value.$isExcluded === true) return;
					if (value.$type != null && value.$type.length !== 0 && value.$type !== "application/json;vnd.sage=syracuse") return;
					var link = sdataUtils.getLinkInfo(value.$url, controllerDao, name === "$save");
					var visible = name.smStartsWith('$');
					var all = filter === "all";
					if (all || (filter === "visible" && visible) || (filter === "hidden" && !visible)) {
						var info = $.extend({}, value);
						info.page = link.page;
						info.name = name;
						info.sdataurl = link.sDataUrl;
						if (visible && (all || filter === "visible")) {
							_addFacetLink(info, name);
						} else if (!visible && (all || filter === "hidden")) {
							info.title = self.checkExpression(value.$title);
							info.icon = "";
						}
						result.push(info);
					}
				} catch (e) {
					value = value || {};
					log && log("getLinks - invalid link - Title: " + self.checkExpression(value.$title || 'no title') + "\n\t" + (value.$url || 'no url'));
				}
			});
		}
		return result;
	},
	/**
	 * Calculates the prototype and other info for unit field
	 */
	getUnitFieldInfo: function() {
		var self = this;
		var res = {};
		res.$unit = self.data("$unit");
		if (typeof res.$unit == "object") {
			res.unitBindName = "$unit";
			res.unitFieldProto = exports.create($.extend({}, self.$unit));
		} else if (typeof res.$unit == "string") {
			res.unitBindName = res.$unit;
			var parent = self.parent;
			while (parent) {
				var unitProto = parent.property(res.$unit);
				if (unitProto) {
					res.unitFieldProto = exports.create($.extend({}, unitProto));
					break;
				}
				parent = parent.parent;
			}
		}
		return res;
	},

	/**
	 * Parses JSON prototype and returns a default JSON $article
	 */
	toArticle: function() {
		var self = this;
		var props = self.data("$properties");
		var article = {
			$layoutType: "stack",
			$items: []
		};
		// No title for query's array - TODO Pass a prototype object as parameter
		var forceNoTitle = self.data("$url").indexOf(".$query") > 0;
		for (var prop in props) {
			if (props[prop].$isExcluded !== true) {
				article.$items.push({
					$bind: prop,
					$isTitleHidden: forceNoTitle
				});
			}
		}
		return article;
	},
	/**
	 * Current proto is a proto of field array
	 * Returns  an array of {$bind:propertyName, $item:itemProto}
	 */
	getArrayColumns: function(bindField) {
		var self = this;
		var res = [];
		if (self.isSingleArray()) {
			res.push({
				"$bind": _singleArrayProp,
				"$item": new _Prototype($.extend(true, {}, self.json), self)
			});
		} else {
			var props = self.json.$properties;
			Object.keys(props).forEach(function(key, idx) {
				res.push({
					"$bind": key,
					"$item": new _Prototype($.extend(true, {}, props[key]), self)
				});
			});
		}

		return res;
	},
	/**
	 * True if array has one column - Single array
	 * Protocole isn't consistent because there a confusion with x-reference fields
	 * current object is array proto or array.$item proto
	 **/
	isSingleArray: function() {
		var jsonArray;
		if (this.json.$type === "application/x-array") {
			jsonArray = this.json;
		} else {
			jsonArray = this.parent.json;
		}
		if (jsonArray == null || jsonArray.$type !== "application/x-array") throw new Error("Unexpected parent array");
		return jsonArray.$item.$properties == null || jsonArray.$item.$type == "application/x-reference";
	}
});
/**
 * Property name for single array
 */
exports.singleArrayProp = _singleArrayProp;
/**
 * To manage a row index in arrays
 */
exports.rowIdxProperty = _rowIdxProperty;
exports.getRowIdxProto = function() {
	if (_rowIdxProto) return _rowIdxProto;
	_rowIdxProto = exports.create({
		$type: "application/x-integer"
	});
};
/**
 * Constructor
 */
exports.create = function(json, parent) {
	return new _Prototype(json, parent);
};