"use strict";
var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').log;

var _defMetaData = {
	"$isExcluded": false,
	"$isHidden": false,
	"isMandatory": false,
	"$isReadOnly": false,
	"$isDisabled": false
};

var _expRegExp = /\{(.*?)\}/g;
var _Prototype = utils.defineClass(function(json, parent) {
	var self = this;
	self.json = json || {};
	if (typeof self.json == "string") {
		self.json = JSON.parse(this.self.json);
	}
	self._children = null;
	if (parent) {
		parent._appendChild(self);
		self.parent = parent;
	}
}, null, {
	destroy: function() {
		var self = this;
		self.parent = null;
		self.json = null;
		if (self._children) {
			self.children.forEach(function(c) {
				if (c) c.destroy();
			});
		}
		self._children = null;
	},
	/**
	 * For destroy
	 */
	_appendChild: function(child) {
		if (!self._children) self._children = [];
		self._children.push(child);
	},
	/**
	 * returns json[prop]
	 */
	data: function(prop, dataContext) {
		var self = this;
		if (!prop || prop.length == 0) return null;
		var val = self.json[prop];
		if (val == null) {
			return self.parent ? self.parent.data(prop) : val;
		}
		if (val.indexOf && val.indexOf('{') >= 0) {
			val = utils.parseExpression(val, dataContext, self);
		}
		return val;
	},
	/**
	 * returns JSON for json.$properties[name]
	 * If prop!=null returns json.$properties[name][prop]
	 */
	property: function(name, prop, dataContext) {
		var self = this;
		if (!name || name.length === 0) return null;
		var o = self.json.$properties ? self.json.$properties[name] : self.parent ? self.parent.property(name) : null;
		if (!o || !prop) return o;
		var val = o[prop];
		if (val && val.indexOf && val.indexOf('{') >= 0) {
			val = utils.parseExpression(val, dataContext, self);
		}
		return val;
	},
	getMetaData: function(name) {
		var self = this;
		if (!self._metaData) self._metaData = {};
		var meta = self._metaData[name];
		if (meta) return meta;
		meta = self._metaData[name] = $.extend({}, _defMetaData, self.property(name));
		return meta;
	},
	localization: function(val) {
		var self = this;
		var loc = self.json.$localization || {};
		return loc[val] ? loc[val] : self.parent ? self.parent.localization(val) : null;
	},
	/**
	 * returns a prototype object for json.$properties[prop] or $item proto for grids
	 */
	getPrototype: function(prop) {
		if (prop.indexOf('.')) {

		}
		if (prop === "$item") {
			var json = this.data(prop);
		} else {
			var json = this.property(prop);
		}
		return json ? exports.create($.extend({}, json), this) : null;
	},
	/**
	 * Query prototype
	 */
	isQuery: function() {
		if (this._isQuery != null) return this._isQuery;
		var url = this.data("$url");
		this._isQuery = url && url.smEndsWith("$query") ? true : false;
		return this._isQuery;
	},
	/**
	 * Lookup prototype
	 */
	isLookup: function() {
		if (this._isLookup != null) return this._isLookup;
		var url = this.data("$url");
		this._isLookup = url && url.smEndsWith("$lookup") ? true : false;
		return this._isLookup;
	},
	/**
	 * Format for display a value according to proto description
	 * Temporarily
	 */
	formatDisplay: function(prop, dataContext) {
		var self = this;
		var info = self.property(prop);

	},
	/**
	 * Temporarily - Add our own property - TODO Find another way
	 * 		Add row index in prototype for grids
	 */
	addProperty: function(name, descr) {
		var self = this;
		if (descr && self.json.$properties && !self.json.$properties[name]) {
			self.json.$properties[name] = descr;
		}
	}
});
exports.Prototype = _Prototype;
exports.create = function(json, parent) {
	return new _Prototype(json, parent);
};