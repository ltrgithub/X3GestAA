"use strict";

var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var authArticleGen = require('syracuse-tablet/html/js/authoring/authoringArticleGen');

/**
 *  Generates proto form dashBoard description
 **/
var _getDashboardProto = function(dash) {
	var proto = {
		$title: dash.$title,
		$description: dash.$description,
		$properties: {},
		$dashboardName: dash.$dashboardName
	};
	var vignetteIds = Object.keys(dash.$vignettes || []);
	for (var i = 0; i < vignetteIds.length; i++) {
		var vignetteId = vignetteIds[i];
		var property = $.extend({}, dash.$vignettes[vignetteId]);
		var gadgetId = property.$uuid;

		property.$gadget = dash.$gadgets[gadgetId];
		if (property.$gadget) {
			property.$gadget = $.extend({}, property.$gadget);
			// Set gadget uuid
			property.$gadget.$uuid = gadgetId;
			// Set vignette uuid
			property.$uuid = vignetteId;
			// Set type - "application/x-string"
			property.$type = "tablet/x-vignette";
			property.$title = property.$gadget.$title;
		} else {
			property.$gadget = {
				$uuid: gadgetId,
				$type: "$gadgetMissing"
			};
			property.$uuid = vignetteId;
			property.$type = "tablet/x-vignette";

		}
		proto.$properties[vignetteId] = property;
	}
	return prototype.create(proto);
};

/**
 * Returns $article from dashBoard info
 * 		Calculates and Sets $article if no $article was found
 */
var _getDashboardArticle = function(proto) {
	return authArticleGen.generateDashboardArticle(proto, "orientation");
};

var _getDashboardInfo = function(dashboardMetaData) {
	return $.smResolve()
		.then(function() {
			var article = dashboardMetaData.$article;
			var proto = _getDashboardProto(dashboardMetaData);
			var views = dashboardMetaData.$views;
			var roles = dashboardMetaData.roles;
			var appList = dashboardMetaData.appList;
			var factoryOwner = dashboardMetaData.$factoryOwner;
			if (!article) {
				return _getDashboardArticle(proto)
					.then(function(article) {
						dashboardMetaData.$article = article;
						return {
							article: $.extend({}, article),
							prototype: proto,
							views: views,
							appList: appList,
							roles: roles

						};
					});
			} else {
				return {
					article: $.extend({}, article),
					prototype: proto,
					views: views,
					appList: appList,
					factoryOwner: factoryOwner,
					roles: roles
				};
			}
		});

};

function _getUnbindGadgets(article, prototype) {
	var unbind = _getUnbindProperties(article, prototype.getPropertyNames());
	var gadgets = [],
		gadget = {},
		$gadget;
	unbind.forEach(function(value) {
		if (value !== "$welcome_$welcomeApplication") { // main app : no gadget
			$gadget = prototype.getDataByPath("$properties." + value).$gadget;
			gadget = {
				"title": $gadget.$title,
				"type": $gadget.$type,
				"description": $gadget.description,
				"uuid": $gadget.$uuid,
				"icon": $gadget.icon,
				"applicationName": $gadget.applicationName,
			};
			gadgets.push(gadget);
		}
	});
	return gadgets;
};

function _getUnbindProperties(article, propertyNames) {
	var binded = _getListOfBinds(article);
	var unbind = propertyNames.filter(function(value) {
		return !binded[value];
	});
	return unbind;
};

function _getListOfBinds($article) {
	var binds = {};

	function _walk(items) {
		if (!items) return;
		items.forEach(function(item) {
			if (item.$bind) {
				binds[item.$bind] = {};
			}
			_walk(item.$items);
		});
		return binds;
	};
	_walk($article.$items);
	return binds;
};

function _getHubGroupList($article) {
	var hubGroup = [];

	function _walk(items) {
		if (!items) return;
		items.forEach(function(item) {
			if (item.$layoutType === "hubGroup") {
				hubGroup.push(item);
			}
			_walk(item.$items);
		});
		return hubGroup;
	};
	_walk($article.$items);
	return hubGroup;

}
exports.getDashboardInfo = _getDashboardInfo;
exports.getDashboardArticle = _getDashboardArticle;
exports.getDashboardProto = _getDashboardProto;
exports.getUnbindProperties = _getUnbindProperties;
exports.getUnbindGadgets = _getUnbindGadgets;
exports.getHubGroupList = _getHubGroupList;