"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
/*
var _formatApi = {
	"application/x-integer": require('syracuse-tablet/html/js/helpers/types/integer'),
	"application/x-decimal": require('syracuse-tablet/html/js/helpers/types/decimal'),
	"application/x-real": require('syracuse-tablet/html/js/helpers/types/real'),
	"application/x-date": require('syracuse-tablet/html/js/helpers/types/date'),
	"application/x-time": require('syracuse-tablet/html/js/helpers/types/time'),
	"application/x-datetime": require('syracuse-tablet/html/js/helpers/types/datetime')
};
*/

exports.getFormatter = function(ctrl) {
	var ctor = _formatters[ctrl.$type];
	if (!ctor) {
		return null;
	}
	var fmt = new ctor(ctrl);
	return fmt;
};

var Formatter = utils.defineClass(function() {

}, null, {

	/*
	 * Format a value for displaying
	 * This will be used on read only fields to format the internal value to a human readable localized pattern.
	 * Also, this will be used to format values in editable fields BEFORE putting the focus into the field for editing
	 *
	 */
	formatValue: function(value) {
		return "D:" + (value || "");
	},

	/*
	 * Format a value for editing it
	 *
	 * This will be used to format values in editable fields AFTER putting the focus into the field for editing.
	 *
	 * Example, in case of dates:
	 * A field displays "April, 1. 2014"
	 * Once the focus is put into the field, it will render the value as "01.04.2014" since it's easier to edit
	 */
	formatValueEdit: function(value) {
		return "E:" + (value || "");
	},

	/* 
	 * Parse any kind of input string to the internal representation
	 */
	parseValue: function(value, errors) {
		errors.push("No parser for this type, return error to not override value by null");
	},

	/* 
	 * Parse any kind of input string to the internal representation
	 */
	validateValue: function(value) {}
});

var DateFormatter = utils.defineClass(function() {}, Formatter, {});
var DateTimeFormatter = utils.defineClass(function() {}, Formatter, {});
var TimeFormatter = utils.defineClass(function() {}, Formatter, {});
var IntegerFormatter = utils.defineClass(function() {}, Formatter, {});
var DecimalFormatter = utils.defineClass(function() {}, Formatter, {});
var RealFormatter = utils.defineClass(function() {}, Formatter, {});

var _formatters = {
	"application/x-integer": IntegerFormatter,
	"application/x-decimal": DecimalFormatter,
	"application/x-real": RealFormatter,
	"application/x-date": DateFormatter,
	"application/x-time": TimeFormatter,
	"application/x-datetime": DateTimeFormatter
};