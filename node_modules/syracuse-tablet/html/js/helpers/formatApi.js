"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require("syracuse-tablet/html/js/helpers/locale");

var numberFormat = require('syracuse-tablet/html/js/helpers/types/numberFormat');

/*
var _formatApi = {
	"application/x-integer": require('syracuse-tablet/html/js/helpers/types/integer'),
	"application/x-decimal": require('syracuse-tablet/html/js/helpers/types/decimal'),
	"application/x-real": require('syracuse-tablet/html/js/helpers/types/real'),
	"application/x-date": require('syracuse-tablet/html/js/helpers/types/date'),
	"application/x-time": require('syracuse-tablet/html/js/helpers/types/time'),
	"application/x-datetime": require('syracuse-tablet/html/js/helpers/types/datetime')
};
*/

exports.getFormatter = function(ctrl) {
	var ctor = _formatters[ctrl.$type];
	if (!ctor) {
		return null;
	}
	var fmt = new ctor(ctrl);
	return fmt;
};

var Formatter = utils.defineClass(function(ctrl) {
	this.ctrl = ctrl;
}, null, {

	/*
	 * Format a value for displaying
	 * This will be used on read only fields to format the internal value to a human readable localized pattern.
	 * Also, this will be used to format values in editable fields BEFORE putting the focus into the field for editing
	 *
	 */
	formatValue: function(value) {
		return "D:" + (value || "");
	},

	/*
	 * Format a value for editing it
	 *
	 * This will be used to format values in editable fields AFTER putting the focus into the field for editing.
	 *
	 * Example, in case of dates:
	 * A field displays "April, 1. 2014"
	 * Once the focus is put into the field, it will render the value as "01.04.2014" since it's easier to edit
	 */
	formatValueEdit: function(value) {
		return "E:" + (value || "");
	},

	/* 
	 * Parse any kind of input string to the internal representation
	 */
	parseValue: function(value, errors) {
		errors.push("No parser for this type, return this dummy error to not override value by null");
	}
});

var DateFormatter = utils.defineClass(function(ctrl) {
	Formatter.call(this, ctrl);
}, Formatter, {});

var DateTimeFormatter = utils.defineClass(function(ctrl) {
	Formatter.call(this, ctrl);
}, Formatter, {});

var TimeFormatter = utils.defineClass(function(ctrl) {
	Formatter.call(this, ctrl);
}, Formatter, {});

var NumberFormatter = utils.defineClass(function(ctrl) {
	Formatter.call(this, ctrl);
	if (ctrl.$format) {
		// TODO: Maybe change to ctrl.prototype.data("$format")
		// ctrl.$format is not set yet!!!
		this.format = ctrl.$format;
	} else {
		this.format = ctrl.$type === "application/x-integer" ? "#,##0" : "#,##0.##";
	}
}, Formatter, {
	formatValue: function(value) {
		if (!value) {
			return "";
		}
		var format = numberFormat.format(value, this.format);
		return format;
	},
	formatValueEdit: function(value) {
		return this.formatValue(value);
	},
	parseValue: function(value, errors) {
		try {
			var fmt = numberFormat.parse(value, this.format);
		} catch (e) {
			errors.push(locale.text("field.invalidInput"));
			return value;

		}
		return fmt;
	}
});

var _formatters = {
	"application/x-integer": NumberFormatter,
	"application/x-decimal": NumberFormatter,
	"application/x-real": NumberFormatter,

	"application/x-date": DateFormatter,
	"application/x-time": TimeFormatter,
	"application/x-datetime": DateTimeFormatter
};