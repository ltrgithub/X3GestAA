"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _Klass = utils.defineClass(
	function(id, prototype, article, options) {
		this.options = options || {};
		this.id = id || utils.UUID();
		this.prototype = prototype;
		this.article = article;
		this.rootLayout = null;
		this.dao = null;
		this._pageControls = null;
		this.isVignette = false;
		this.controlsMap = {};
		// read/edit/create - read by default
		this.$activity = "read";
		globals.addController(this);
		notifications.subscribe(this, ["sm.lookup.selection"], 1);
	}, null, {
		destroy: function() {
			globals.removeController(this);
			this.controlsMap = null;
			if (this.dao) {
				this.dao.destroy();
				this.dao = null;
			}
			if (this.rootLayout) {
				this.rootLayout.destroy();
				this.rootLayout = null;
			}
			if (this.prototype) {
				this.prototype.destroy();
				this.prototype = null;
			}
			utils.unbindObj(this);
			this.article = null;
			this.prototype = null;
		},
		addControl: function(c) {
			if (!c) return;
			this.controlsMap[c.id] = c;
		},
		getControl: function(id) {
			var ctrl = this.controlsMap && this.controlsMap[id];
			return ctrl;
		},
		setDao: function(dao) {
			if (this.dao && this.dao.destroy) this.dao.destroy();
			this.dao = dao;
		},
		isEditMode: function() {
			return this.$activity === "edit" || this.$activity === "create";
		},
		setActivity: function(activity) {
			this.$activity = activity || "read";
		},
		buildControlsTree: function(rootPath) {
			if (this.rootLayout) {
				this.rootLayout.destroy();
			}
			this.rootLayout = articleParser.article2Controls(this, this.article, this.prototype, {}, rootPath);
			return this.rootLayout;
		},
		render: function($$parent, buildOpts) {
			if (!this.rootLayout) return;
			this.rootLayout.buildHtml($$parent, this.dao, buildOpts);
			// USed to retrieve the controller on events
			this.rootLayout.$$elmt.attr("data-controller-id", this.id);
		},
		/** Event sm.action.link
		 *  Notified when a action succeeded - sdata link - see action manager
		 *  success:	true/false
		 *  link:		Link info
		 *  result:		Json response
		 */
		notifActionLink: function(success, link, result, options) {
			throw new Error("not implemented");
		},
		/**
		 * When we select a value in a lookup
		 * 		rowData:	Selected row data
		 * 		controlId:	Id of control to refresh
		 */
		notifLookupSelection: function(rowData, controlId) {
			try {
				var ctrl = this.getControl(controlId);
				if (!ctrl) throw new Error("Control not found '" + controlId + "'");
				ctrl.setFieldValue(rowData);
			} catch (e) {
				globals.getModal().error("notifLookupSelection failed", e);
			}
		},
		/**
		 * Check controls data - Edit mode only
		 * Return true if ok
		 * Display fields errors if any
		 */
		checkControlsData: function() {
			if (!this.isEditMode()) return true;
			var self = this;
			var ok = true;
			var firstError, c;
			Object.keys(self.controlsMap).forEach(function(key) {
				c = self.controlsMap[key];
				if (c && c.checkData) {
					ok = ok && c.checkData();
					if (!ok && firstError == null) firstError = c;
				}
			});
			if (firstError) {
				firstError.setFocus();
			}
			return ok;
		},
		/**
		 * Show element in page - scroll if needed
		 * c is a JQuery elmt or an object with $$elmt property
		 */
		makeVisible: function(c) {
			// TODO - Implement a gestureManager in base controller to allow makeVisible
		}
	});


exports.Klass = _Klass;