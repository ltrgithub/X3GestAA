"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');

var _Klass = utils.defineClass(
	function(id, prototype, article, options) {
		this.options = options || {};
		this.id = id;
		this.prototype = prototype;
		this.article = article;
		this.rootLayout = null;
		this.dao = null;
		this._pageControls = null;
		this.isVignette = false;
		this.controlsMap = {};
		// read/edit/create - read by default
		this.$activity = "read";
	}, null, {
		destroy: function() {
			this.controlsMap = null;
			if (this.dao) {
				this.dao.destroy();
				this.dao = null;
			}
			if (this.rootLayout) {
				this.rootLayout.destroy();
				this.rootLayout = null;
			}
			if (this.prototype) {
				this.prototype.destroy();
				this.prototype = null;
			}
			utils.unbindObj(this);
			this.article = null;
			this.prototype = null;
		},
		addControl: function(c) {
			if (!c) return;
			this.controlsMap[c.id] = c;
		},
		getControl: function(id) {
			var ctrl = this.controlsMap && this.controlsMap[id];
			return ctrl;
		},
		setDao: function(dao) {
			if (this.dao && this.dao.destroy) this.dao.destroy();
			this.dao = dao;
		},
		isEditMode: function() {
			return this.$activity === "edit" || this.$activity === "create";
		},
		setActivity: function(activity) {
			this.$activity = activity || "read";
		},
		buildControlsTree: function(rootPath) {
			if (this.rootLayout) {
				this.rootLayout.destroy();
			}
			this.rootLayout = articleParser.article2Controls(this, this.article, this.prototype, {}, rootPath);
			return this.rootLayout;
		},
		render: function($$parent, buildOpts) {
			if (!this.rootLayout) return;
			this.rootLayout.buildHtml($$parent, this.dao, buildOpts);
		}
	});


exports.Klass = _Klass;