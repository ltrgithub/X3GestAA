"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').log;
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;

var _config = {
	htmlHolder: "body",
	tmplPath: "templates",
	tmplExt: ".tmpl"
};
var _temptates = {};

var _url = (function() {
	var url = window.location.href.split('/');
	url[url.length - 1] = _config.tmplPath + "/";
	return url.join('/');
})();


var _get = function(filePath, tmplId, options) {
	options = options || {};
	var deferred = $.Deferred();
	tmplId = tmplId || filePath;
	var domId = utils.domId(tmplId);
	if (_temptates[tmplId]) {
		deferred.resolve(_temptates[tmplId]);
	} else if ($("#" + domId).length > 0) {
		_temptates[tmplId] = $("#" + domId).html();
		deferred.resolve(_temptates[tmplId]);
	} else {
		ajax("GET", _url + filePath + _config.tmplExt, null, {
			"Accept": "text/html"
		}).then(function(data, respHeaders) {
			try {
				if (!data || data.trim().length == 0) throw new Error("No data");
				if (respHeaders.status === 200) {
					// We add the script tag here to have Syntax highlighting in .tmpl file
					var e = $(_config.htmlHolder);
					if (data.indexOf("<script") === -1) {
						e.append($('<script id="' + domId + '" type="text/x-handlebars-template">' + data + "</script>"));
					} else {
						$(data).each(function(i, script) {
							e.append(script);
						});
					}
					deferred.resolve($("#" + domId).html());
				} else {
					if (options.failNotFound) throw new Error("Template not found status[" + respHeaders.status + "]");
					deferred.resolve(null);
				}
			} catch (e) {
				deferred.reject(utils.toDiagnose({
					exception: e,
					where: "stemplates._get [" + filePath + "]"
				}));
			}
		}, function(status, respHeaders) {
			if (status === 404 && options.failNotFound !== true) {
				deferred.resolve(null);
			} else {
				deferred.reject(utils.toDiagnose({
					message: "Error loading template - Status[" + status + "]",
					where: "stemplates._get"
				}));
			}
		});
	}
	return deferred.promise();
};

// file : template file path - tmplId : template id - tmplId = null if only one template in the file
var _exec = function(filePath, context, options, tmplId) {
	var deferred = $.Deferred();
	tmplId = tmplId || filePath;
	_get(filePath, tmplId, options).then(function(tmpl) {
		try {
			if (typeof tmpl === "string") {
				tmpl = Handlebars.compile(tmpl);
				_temptates[tmplId] = tmpl;
			}
			deferred.resolve(tmpl ? tmpl(context || {}) : null);
		} catch (e) {
			deferred.reject({
				message: "Url = [" + _url + "]\n\tfilePath[#" + filePath + "]\n\ttmplId[#" + tmplId + "]\n\tExt [" + _config.tmplExt + "]",
				exception: e,
				where: "stemplates.exec"
			});
		}
	}, function(e) {
		deferred.reject(e);
	});
	return deferred.promise();
};

// Execute a template already loaded - Multiple templates in a same file
var _execSync = function(tmplId, context) {
	var tmpl = _temptates[tmplId];
	if (!_temptates[tmplId]) {
		tmpl = $("#" + utils.domId(tmplId)).html();
		if (tmpl) {
			tmpl = Handlebars.compile(tmpl);
			_temptates[tmplId] = tmpl;
		}
	}
	return tmpl ? tmpl(context || {}) : null;
};

// Execute a template already loaded - Multiple templates in a same file
var _execHtmlTmpl = function(html, context) {
	var tmpl = _temptates[tmplId];
	if (!_temptates[tmplId]) {
		tmpl = $("#" + utils.domId(tmplId)).html();
		if (tmpl) {
			tmpl = Handlebars.compile(tmpl);
			_temptates[tmplId] = tmpl;
		}
	}
	return tmpl ? tmpl(context || {}) : null;
};

// id = null -> Remove all templates
var _removeTmpl = function(id) {
	var s = id ? "#" + utils.domId(id) : "script[type='text/x-handlebars-template']";
	var e = $(_config.htmlHolder).find(s).remove();
};

// Preload templates in backgrround - TODO use workers
var _preload = function(templates) {
	var promises = [];
	templates.forEach(function(t) {
		promises.push(_exec(t), {});
	});
	$.when(promises).always(function() {
		log && log("Templates preload", "Count[" + templates.length + "]", "loaded[" + arguments.length + "]");
	});
};

var _init = function() {
	_url = window.location.href.split('/');
	_url[_url.length - 1] = _config.tmplPath + "/";
	_url = _url.join('/');
};

exports.preload = _preload;
exports.init = _init;
exports.removeTmpl = _removeTmpl;
exports.execHtmlTmpl = _execHtmlTmpl;
exports.execSync = _execSync;
exports.exec = _exec;