"use strict";

var locale = require('syracuse-tablet/html/js/helpers/locale');
var globals = require('syracuse-tablet/html/js/helpers/globals');

function _setAppOfflineState(offline) {
	$("#s-m-app-id").toggleClass("offline", offline);
}

var _OffLineMgr = function() {
	this._offline = null;

	// Be careful "notif" parameter not null or not undefined, we force notification display!
	//
	// byGlobalEvent (optional): True if called by a global OS hook and not detected on a network request 
	this.setOffline = function(offline, notif, byGlobalEvent) {
		offline = offline || false;
		//If this._offline==null we notify only the offline mode (otherwise the online message is always display we load a page)
		var stateChange = this._offline == null ? offline === true : offline !== this._offline;
		this._offline = offline;
		if (stateChange || notif) {
			notif = notif || {};
			notif = $.extend(true, {
				severityClass: offline ? "warning" : "success",
				title: locale.text("info.network." + (offline ? "offline" : "online") + ".title"), // You are online, You are offline
				body: byGlobalEvent != true ?
					locale.text("info.network." + (offline ? "offline.outdated" : "online.uptodate")) : // Data read from server / cache
				"" // If event is global, there was not server roundtrip, so do not show the message body, it would be confusing
			}, notif);
			globals.getModal().notify(notif);
			_setAppOfflineState(offline);
		}
	};
	this.setOfflineQuiet = function(offline) {
		this._offline = offline;
		_setAppOfflineState(offline);
	};
	this.isOnline = function() {
		return !this._offline //navigator.onLine;
	};
};


exports.init = function() {
	globals.setOfflineManager(new _OffLineMgr());
};