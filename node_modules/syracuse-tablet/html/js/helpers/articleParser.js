"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("articleParser");
var utils = require('syracuse-tablet/html/js/helpers/utils');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');

/**
 * Parses an article and generate the control tree structure
 */
var _Parser = utils.defineClass(
	function(page) {
		self = this;
		// Controller
		var self = this;
		self.page = page;
	}, null, {
		doParse: function($article, prototype, parent) {
			var self = this;
			if ($article.$layoutType) {
				var lyt = ctrlFactory.createLayout(self.page, parent, $.extend({}, $article));
				lyt.beforeAddItems();
				if (lyt && $article.$items) {
					$article.$items.forEach(function($itm) {
						self.doParse($itm, prototype, lyt);
					});
				}
				lyt.afterAddItems();
				return lyt;
			} else if ($article.$bind) {
				var fieldProto = prototype.getPrototype($article.$bind);
				if (!fieldProto) throw new Error("Property not found in prototype - id[" + $article.$bind + "]");
				if (!fieldProto.$isExcluded) {
					return ctrlFactory.createControl(self.page, parent, $.extend({}, $article), fieldProto);
				}
			} else {
				log && log("$layoutType or $bind expected");
				//throw new Error ("$layoutType or $bind expected");
			}
		},
		parse: function($article, prototype) {
			var self = this;
			try {
				if (!$article || !prototype) throw new Error("Not empty $article and prototype are expected");
				if (!$article.$layoutType) throw new Error("$layoutType expected for root layout");
				return self.doParse($article, prototype);
			} catch (e) {
				log && log('$article parser error', e);
				throw new Error("Error parsing $article [" + e.message + "]\n" + utils.cleanStack(e.stack));
			}
		}
	}
);

/**
 * Parses $article and calls the controls factory
 * 		$article: json description
 *  	prototype: prototype object (Prototype class)
 *  Return root element (layout)
 */
var _article2Controls = function(page, $article, prototype) {
	var p = new _Parser(page);
	return p.parse($article, prototype);
};

/**
 * Convert a desktop $article to tablet one
 * 		$article:  desktop json description
 *  	prototype: prototype object (Prototype class)
 */
var _defOption = {
	skipblock: true,
	skipsection: true,
	include: ["$category", "$layoutType", "$title", "$bind"],
	exclude: ["$items", "$widths"],
	protoExclude: ["application/x-array", "application/json"]
};

var _convertWidth = function(widths) {
	var r = [];
	widths = widths.split(",");
	// temporarily - We can also embed cells into 
	if (widths.length === 0) throw new Error("Number of cells/rows must be > 0");
	if (widths.length > 12) throw new Error("Number of cells/rows must be <= 12");
	var sum = 0;
	widths.forEach(function(w) {
		w = parseInt(w, 10);
		w = Math.ceil(w / 12);
		sum += w;
		r.push(w);
	});
	if (sum > 12) {
		var d = sum - 12;
		r.sort();
		while (d > 0) {
			// Remove excess starting from large cells
			for (var i = r.length - 1; i >= 0; i--) {
				if (d > 0 && r[i] > 1) {
					r[i] = r[i] - 1;
					d--;
				}
			}
		}
	} else if (sum < 12) {
		var d = 12 - sum;
		r.sort();
		while (d > 0) {
			// Add shortage starting from small cells
			for (var i = 0; i < r.length; i++) {
				if (d > 0) {
					r[i] = r[i] + 1;
					d--;
				}
			}
		}
	}
	return r.join(",");
};
var _scanDesktop = function(json, options) {

	if (!json) return null;
	// we skip $layout
	var res;
	if (json.$layout) {
		res = _scanDesktop(json.$layout, options);
	} else {
		res = {};
	}
	if (json.$layoutType) {
		if (!json.$items) throw new Error("$items is missing");
		res.$items = [];
		json.$items.forEach(function(itm) {
			res.$items.push(_scanDesktop(itm, options));
		});
	}
	for (var p in json) {
		if (p === "$widths") {
			res[p] = _convertWidth(json[p]);
		} else if (options.exclude.indexOf(p) === -1 && options.include.indexOf(p) >= 0) {
			res[p] = json[p];
		}
	}
	return res;
};

var _convertDesktop = function($article, prototype, options) {
	options = $.extend({}, _defOption, options);
	return _scanDesktop($article, options);
};

exports.article2Controls = _article2Controls;
exports.convertDesktop = _convertDesktop;