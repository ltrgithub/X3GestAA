"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("articleParser");
var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');
/**
 * Return true if jsonArrayProto is a single array
 * For one cell array prototype doesn't contain $properties
 * For one x-reference cell array $properties of prototype isn't $properties of the array but $properties of the reference field
 * This code is shared with prototype class
 */
var _isSingleArray = function(jsonArrayProto) {
	return jsonArrayProto.$item.$properties == null || jsonArrayProto.$type == "application/x-reference";
};
/**
 * Return json prototype of an array or null if proto is not an array
 * proto is a prototype object or a JSON object
 * This code is shared with prototype class
 */
var _getArrayJsonProto = function(proto) {
	if (!proto) return null;
	var json;
	if (!$.isPlainObject(proto)) {
		if (proto.isArray()) {
			json = proto.json;
		} else if (proto.parent) {
			json = proto.parent.json;
		}
	} else {
		json = proto;
	}
	if (json == null || json.$type !== "application/x-array") return null;
	return json;
};
/**
 * If arrayProto is not an array -> return article
 * If arrayProto is  an array
 * 	Set default array $article if no $article found
 * 	Like article is shared by all control/layouts of the page we need to set default $article in advanced (here) instead of in control/layout class
 * Returns article
 */
var _setArrayDefAuthoring = function(arrayProto, article) {
	// Get Json prototype
	var jsonProto = _getArrayJsonProto(arrayProto);
	if (!jsonProto) return article;
	// Default authoring
	article.$article = {
		$display: "table",
		$items: []
	};
	var props, prop;
	if (_isSingleArray(jsonProto)) {
		props = {};
		props[globals.SINGLEARRAYPROP] = jsonProto;
	} else {
		props = jsonProto.$item.$properties;
	}
	for (var propName in props) {
		if (!propName.smStartsWith("$")) {
			prop = props[propName];
			if (prop.$isExcluded !== true) {
				article.$article.$items.push({
					"$bind": propName
				});
			}
		}
	}
	return article;
};
/**
 * Create an article form fieldProto
 * Accept a JSON or prototype class object for fieldProto
 */
var _createArticle = function(fieldName, fieldProto, options) {
	var a = $.extend({}, {
		"$bind": fieldName
	}, options);
	// If fieldProto is an array we generate default authoring a.$article for arrays else nothing
	return _setArrayDefAuthoring(fieldProto, a);
};
/**
 * Parses an article and generate the control tree structure
 */
var _Parser = utils.defineClass(
	function(page) {
		// Controller
		var self = this;
		self.page = page;
	}, null, {
		_doParse: function(article, prototype, parent, opts, unfounds, layoutPath) {
			var self = this;
			layoutPath = layoutPath || "0";
			var num = 0;
			if (article.$layoutType) {
				var lyt = ctrlFactory.createLayout(self.page, parent, article, opts, layoutPath);
				if (lyt && article.$items) {
					if (prototype.isQuery()) {
						prototype = prototype.getPrototype("$resources");
					}
					article.$items.forEach(function($itm) {
						// Important: Do not clone article here since full tree has to be preserved	
						self._doParse($itm, prototype, lyt, opts, unfounds, layoutPath + "-" + num);
						num++;
					});
				}
				return lyt;
			} else if (article.$bind) {
				var fieldProto = prototype.getPrototype(article.$bind);
				if (fieldProto == null && article.$isUnfound !== true) {
					unfounds.push(article);
				} else {
					if (article.$isUnfound) {
						fieldProto = prototype.create({
							$type: "tablet/x-unfound"
						});
					}
					if (!fieldProto.$isExcluded) {
						if (fieldProto.isArray() && article.$article == null) {
							// Add default authoring
							_setArrayDefAuthoring(fieldProto, article);
						}
						// Important: Do not clone article here since full tree has to be preserved
						ctrlFactory.createControl(self.page, parent, article, fieldProto, opts, layoutPath);
					}
				}
			} else {
				log && log("$layoutType or $bind exspected");
				//throw new Error ("$layoutType or $bind expected");
			}
		},
		parse: function(article, prototype, opts, layoutPath) {
			var self = this;
			try {
				if (!article || !prototype) throw new Error("Not empty article and prototype are expected");
				if (!article.$layoutType) throw new Error("$layoutType expected for root layout");
				var unfounds = [];
				var root = self._doParse(article, prototype, null, opts, unfounds, layoutPath);
				if (unfounds.length > 0) {
					var article = {
						$layoutType: "stack",
						$items: []
					};
					unfounds.forEach(function(f) {
						article.$items.push($.extend(true, f, {
							$isUnfound: true
						}));
					});
					self._doParse(article, prototype, root, opts, null, layoutPath);
				}
				return root;
			} catch (e) {
				log && log('article parser error', e);
				throw new Error("Error parsing article [" + e.message + "]\n" + utils.cleanStack(e.stack));
			}
		}
	}
);

/**
 * Parses article and calls the controls factory
 * 		article: json description
 *  	prototype: prototype object (Prototype class)
 *  Return root element (layout)
 */
var _article2Controls = function(page, article, prototype, opts, layoutPath) {
	var p = new _Parser(page);
	return p.parse(article, prototype, opts, layoutPath);
};

/**
 * Return a table cell control
 * Article is calculated from the fieldProto
 */
var _tableCell2Control = function(arrayCtrl, $$parent, fieldName, fieldProto) {
	var article = _createArticle(fieldName, fieldProto);
	return ctrlFactory.createCellFieldCtrl($$parent, arrayCtrl.controller, article, fieldProto);
};
var _cardV2Controls = function(arrayCtrl, options) {
	var article = arrayCtrl.article.$article.$card;
	var cardsPerRow = arrayCtrl.article.$article.$cardsPerRow;
	cardsPerRow = Math.min(12, Math.max(0, cardsPerRow == null ? 1 : parseInt(cardsPerRow, 10)));
	if (!article) {
		article = {
			"$layoutType": "stack",
			"$items": []
		};
		if (false && cardsPerRow > 1) {
			article.$items.push({
				"$layoutType": "row",
				"$items": []
			});
			var bindTo = [],
				cell;
			for (var i = 0; i < cardsPerRow; i++) {
				cell = {
					"$layoutType": "cell",
					"$widthXs": 12 / cardsPerRow,
					"$items": []
				};
				article.$items[0].$items.push(cell);
				bindTo.push(cell.$items);
			}
			bindTo.forEach(function(c) {
				arrayCtrl.article.$article.$items.forEach(function(item) {
					c.push(item);
				});
			});
		} else {
			arrayCtrl.article.$article.$items.forEach(function(item) {
				article.$items.push(item);
			});
		}
	}
	options = options || {};
	options.isArrayChild = true;
	options.isTableCell = false;
	return _article2Controls(arrayCtrl.controller, article, arrayCtrl.prototype.getPrototype("$item"), options);
};
/**
 * Convert a desktop article to tablet one
 * 		article:  desktop json description
 *  	prototype: prototype object (Prototype class)
 */
var _defOption = {
	skipblock: true,
	skipsection: true,
	include: ["$category", "$layoutType", "$title", "$bind"],
	exclude: ["$items", "$widths"],
	protoExclude: ["application/x-array", "application/json"]
};

var _convertWidth = function(widths) {
	var r = [];
	widths = widths.split(",");
	// temporarily - We can also embed cells into 
	if (widths.length === 0) throw new Error("Number of cells/rows must be > 0");
	if (widths.length > 12) throw new Error("Number of cells/rows must be <= 12");
	var sum = 0;
	widths.forEach(function(w) {
		w = parseInt(w, 10);
		w = Math.ceil(w / 12);
		sum += w;
		r.push(w);
	});
	if (sum > 12) {
		var d = sum - 12;
		r.sort();
		while (d > 0) {
			// Remove excess starting from large cells
			for (var i = r.length - 1; i >= 0; i--) {
				if (d > 0 && r[i] > 1) {
					r[i] = r[i] - 1;
					d--;
				}
			}
		}
	} else if (sum < 12) {
		var d = 12 - sum;
		r.sort();
		while (d > 0) {
			// Add shortage starting from small cells
			for (var i = 0; i < r.length; i++) {
				if (d > 0) {
					r[i] = r[i] + 1;
					d--;
				}
			}
		}
	}
	return r.join(",");
};
var _scanDesktop = function(json, options) {

	if (!json) return null;
	// we skip $layout
	var res;
	if (json.$layout) {
		res = _scanDesktop(json.$layout, options);
	} else {
		res = {};
	}
	if (json.$layoutType) {
		if (!json.$items) throw new Error("$items is missing");
		res.$items = [];
		json.$items.forEach(function(itm) {
			res.$items.push(_scanDesktop(itm, options));
		});
	}
	for (var p in json) {
		if (p === "$widths") {
			res[p] = _convertWidth(json[p]);
		} else if (options.exclude.indexOf(p) === -1 && options.include.indexOf(p) >= 0) {
			res[p] = json[p];
		}
	}
	return res;
};

var _convertDesktop = function(article, prototype, options) {
	options = $.extend({}, _defOption, options);
	return _scanDesktop(article, options);
};

exports.tableCell2Control = _tableCell2Control;
exports.cardV2Controls = _cardV2Controls;
exports.article2Controls = _article2Controls;
exports.convertDesktop = _convertDesktop;
exports.createArticle = _createArticle;
exports.isSingleArray = _isSingleArray;
exports.getArrayJsonProto = _getArrayJsonProto;