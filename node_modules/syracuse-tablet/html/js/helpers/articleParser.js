"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("articleParser");
var utils = require('syracuse-tablet/html/js/helpers/utils');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');

var _Parser = utils.defineClass(
	function(page) {
		self = this;
		self.page = page;
		page.ctrlFactory = ctrlFactory;
	}, null, {
		doParse: function($article, prototype, parent) {
			var self = this;
			if ($article.$layoutType) {
				var lyt = ctrlFactory.createLayout(self.page, parent, $.extend({}, $article));
				lyt.beforeAddItems();
				if (lyt && $article.$items) {
					$article.$items.forEach(function($itm) {
						self.doParse($itm, prototype, lyt);
					});
				}
				lyt.afterAddItems();
				return lyt;
			} else if ($article.$bind) {
				var fieldProto = prototype.getPrototype($article.$bind);
				if (!fieldProto) throw new Error("Property not found in prototype - id[" + $article.$bind + "]");
				return ctrlFactory.createControl(self.page, parent, $.extend({}, $article), fieldProto);
			} else {
				log && log("$layoutType or $bind expected");
				//throw new Error ("$layoutType or $bind expected");
			}
		},
		parse: function($article, prototype) {
			var self = this;
			try {
				if (!$article || !prototype) throw new Error("Not empty $article and prototype are expected");
				if (!$article.$layoutType) throw new Error("$layoutType expected for root layout");
				return self.doParse($article, prototype);
			} catch (e) {
				log && log('$article parser error', e);
				throw new Error("Error parsing $article [" + e.message + "]\n" + utils.cleanStack(e.stack));
			}
		}
	}
);

/**
 * Parses $article and calls the controls factory
 * 		$article: json description
 *  	prototype: prototype object (Prototype class)
 *  Return root element (layout)
 */
var _article2Controls = function(page, $article, prototype) {
	var p = new _Parser(page);
	return p.parse($article, prototype);
};

/**
 * Convert a desktop $article to tablet one
 * 		$article:  desktop json description
 *  	prototype: prototype object (Prototype class)
 */
var _defOption = {
	skipblock: true,
	skipsection: true,
	include: ["$layoutType", "$items", "$title", "$widths", "$items"],
	protoExclude: ["application/x-array", "application/json"]
};
var _convertDesktop = function($article, prototype, options) {
	options = $.extend({}, _defOption, options);

};
exports.article2Controls = _article2Controls;
exports.convertDesktop = _convertDesktop;