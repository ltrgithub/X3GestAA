"use strict";

var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var modules = require('syracuse-tablet/html/js/common/modules');

var _currentLocale = null;
var _resources = {};

var _datetimeInformationKey = "$datetimeInformation";
var _decimalInformationKey = "$decimalInformation";
var _upLocalePreferences;

var _txtRegexp = /\{([\w-]+)\}/g;
var _currentLocaleUser = "*";

var _userProfileSettings = {};

/**
 * Init client side locale dependend resources based on the current user profile
 */
exports.setLocaleByUserProfile = function(userProfile) {
	var locale = userProfile.selectedLocale.code;

	_currentLocaleUser = userProfile.user.login;
	_userProfileSettings = userProfile.selectedLocale; // For overriding shortDate defaults, etc

	return exports.setLocale(userProfile.selectedLocale.code);
}

/**
 * This should only be used during init process to set a default locale
 * Subsequent changes should use setLocaleByUserProfile
 */
exports.setLocale = function(locale) {
	var deferred = new $.Deferred();

	var resources = _resources && _resources[locale];
	if (resources) {
		_currentLocale = locale;
		deferred.resolve();
	} else if (locale === _currentLocale) {
		deferred.resolve();
	} else {
		var rsrcPath = jsutils.getResourcesBasePath();
		_loadFile(rsrcPath + "js/resources", "strings", locale, "en")
			.then(function(data) {
				_currentLocale = locale;
				_resources[locale] = data;
			})
			.then(function() {
				return _loadFile(rsrcPath + "js/resources/locales", "date", locale, "en-GB");
			})
			.then(function(data) {
				// join strings-xx-XX and date-xx-XX
				_resources[locale][_datetimeInformationKey] = data;
			})
			.then(function() {
				return _loadFile(rsrcPath + "js/resources/locales", "decimal", locale, "en-GB");
			})
			.then(function(data) {
				// join strings-xx-XX and decimal-xx-XX
				_resources[locale][_decimalInformationKey] = data;
			})
			.then(function() {
				deferred.resolve();
			}).fail(function(e) {
				deferred.resolve();
			});
	}
	return deferred.promise();
};

/**
 * 
 */
exports.text = function(key, args) {
	var resources = _resources && _resources[_currentLocale];
	if (!resources) {
		return;
	}
	var text = resources[key] || "Resource key not found[" + key + "]";

	if (args) {
		if (!Array.isArray(args)) {
			// We accept multiple arguments following the key
			args = Array.prototype.slice.call(arguments, 1);
		}
		text = text.replace(_txtRegexp, function(match, p1) {
			var idx = +p1;
			if (idx >= 0 && idx < args.length) {
				return args[idx];
			}
			return "?";
		});
	}

	return text;
};

/**
 * 
 */
exports.textNoFail = function(key, args) {
	var resources = _resources && _resources[_currentLocale];
	if (!resources || !resources[key]) {
		return null;
	}
	var text = resources[key];
	if (args) {
		if (!Array.isArray(args)) {
			// We accept multiple arguments following the key
			args = Array.prototype.slice.call(arguments, 1);
		}
		text = text.replace(_txtRegexp, function(match, p1) {
			var idx = +p1;
			if (idx >= 0 && idx < args.length) {
				return args[idx];
			}
			return "?";
		});
	}
	return text;
};

/**
 * 
 */
exports.textOpt = function(key) {
	var resources = _resources && _resources[_currentLocale];
	if (!resources) {
		return;
	}
	return resources[key];
};

/**
 * 
 *
 */
exports.getDatetimeInfo = function() {
	var resources = _resources && _resources[_currentLocale];
	if (!resources) {
		return;
	}
	return resources[_datetimeInformationKey];
};

/**
 * 
 */
exports.isCurrent = function(locale, strict) {
	if (!locale || !_currentLocale) return false;
	if (_currentLocale === locale) return true;
	return strict ? false : (locale.split('-'))[0] === _currentLocale;
};

/**
 * 
 */
exports.getDateFormat = function() {
	var di = exports.getDatetimeInfo();
	return _userProfileSettings.shortDate || (di && di.formatPatterns && di.formatPatterns.shortDate) || "dd/MM/yyyy";
};

/**
 * 
 */
exports.getDateTimeFormat = function() {
	var di = exports.getDatetimeInfo();
	var date = _userProfileSettings.shortDate || (di && di.formatPatterns && di.formatPatterns.shortDate) || "dd/MM/yyyy";
	var time = _userProfileSettings.shortTime || (di && di.formatPatterns && di.formatPatterns.shortTime) || "HH:mm:ss";
	return date + " " + time;
};

/**
 * 
 */
exports.getTimeFormat = function() {
	var di = exports.getDatetimeInfo();
	return _userProfileSettings.longTime || (di && di.formatPatterns && di.formatPatterns.longTime || "HH:mm:ss");
};

/**
 * 
 */
exports.getTimeFormatShort = function() {
	var di = exports.getDatetimeInfo();
	return _userProfileSettings.shortTime || (di && di.formatPatterns && di.formatPatterns.shortTime || "HH:mm");
};

/**
 * 
 */
exports.getNumberFormat = function(type) {
	return (type === "application/x-integer" ? "#,##0" : "#,##0.##");
};

/**
 * 
 */
exports.getNumberGroupSeparator = function() {
	var di = _getDecimalInfo();
	var gs = _userProfileSettings.numberGroupSeparator || (di && di.numberGroupSeparator) || ",";
	return gs;
};

/**
 * 
 */
exports.getNumberDecimalSeparator = function() {
	var di = _getDecimalInfo();
	var ds = _userProfileSettings.numberDecimalSeparator || (di && di.numberDecimalSeparator) || ".";
	return ds;
};

/**
 * 
 */
exports.getCurrentLocale = function() {
	return _currentLocale;
};

/**
 * 
 */
exports.getCurrentLocaleHash = function() {
	return _currentLocale + "#" + _currentLocaleUser;
};

/**
 * 
 */
exports.getProductLabels = function() {
	var data = {};
	data.brand = exports.text("global.label.brand");
	data.product = exports.text("global.label.product");
	return data;
};

/**
 * 
 * @returns
 */
function _getDecimalInfo() {
	var resources = _resources && _resources[_currentLocale];
	if (!resources) {
		return;
	}
	return resources[_decimalInformationKey];
};

function _loadFile(path, file, locale, defLocale) {
	var deferred = new $.Deferred();
	var segs = locale.split("-");
	var loadedLocale;
	var ajax = modules.get("ajax");

	function _load() {
		if (segs.length === 0) {
			// Fallback to default
			var url = path + "/" + file + "-" + defLocale + ".json";
			ajax.request(url)
				.then(function(result) {
					var data = result.data;
					if (data) {
						deferred.resolve(data);
					}
					deferred.resolve({});
				}).fail(function(e) {
					deferred.reject(e);
				});
		} else {
			var code = segs.join("-");
			var url = path + "/" + file + "-" + code + ".json";
			ajax.request(url)
				.then(function(result) {
					var data = result.data;
					if (data) {
						if (code !== defLocale) {
							url = path + "/" + file + "-" + defLocale + ".json";
							ajax.request(url)
								.then(function(result) {
									var dataEn = result.data;
									if (dataEn) {
										var mergedStrings = $.extend(true, {}, dataEn, data);
										deferred.resolve(mergedStrings);
									} else {
										deferred.resolve(data);
									}
								})
								.fail(function(e) {
									// Fail silently since it's only about fallback language
									deferred.resolve(data);
								});
							return;
						}
						deferred.resolve(data);
					} else {
						segs.pop();
						_load();
					}
				}).fail(function(e) {
					segs.pop();
					_load();
				});
		}
	}
	_load();
	return deferred.promise();
};