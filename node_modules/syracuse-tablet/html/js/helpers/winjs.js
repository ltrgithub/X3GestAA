"use strict";

var _activeNotifications = {};
var _requestCounter = 0;

/* 
    this function is the global callback hook for WinJS to trigger callbacks started by callWinJS function
*/
var _winjsCallbackHook = function(param) {
	if (!param) {
		// todo error
		return;
	}

	var data;
	try {
		data = JSON.parse(param);
	} catch (e) {
		// todo error
		return;
	}
	if (!data.$uuid) {
		// todo error
		return;
	}

	// recover stored callback information to route callback
	var $active = _activeNotifications[data.$uuid];
	if (!$active) {
		// todo error
		return;
	}
	delete _activeNotifications[data.$uuid];
	if (!$active.$deferred) {
		// no error
		return;
	}
	if (data.$error) {
		$active.$deferred.reject(data.$error);
	} else {
		$active.$deferred.resolve(data.$data);
	}
};

var _callWinJS = function(domain, funcName, parameterObject, fireAndForget) {
	var deferred = $.Deferred();
	if (_isAvailable()) { // do we have an winJs container?
		_requestCounter = _requestCounter + 1;

		var $invoke = {
			$domain: domain,
			$funcName: funcName,
			$uuid: "" + _requestCounter,
			$data: parameterObject,
			$execCallback: !fireAndForget
		};

		var param = JSON.stringify($invoke);
		var $active;
		if (fireAndForget !== true) {
			$active = {
				$uuid: $invoke.$uuid,
				$deferred: deferred
			};
			_activeNotifications[$active.$uuid] = $active;
		}

		window.external.notify(param);

		if (fireAndForget === true) {
			deferred.resolve();
		}
	} else {
		deferred.reject({
			$message: "No WinJS container"
		});
	}
	return deferred.promise();
};

var _isAvailable = function() {
	try {
		return ("notify" in window.external);
	} catch (e) {
		// Safari
		return false;
	}
};

// Register callback hook on window object to be available "globally" from outside the web view control
if (window) {
	window.winjsCallbackHook = _winjsCallbackHook;
}

exports.callWinJS = _callWinJS;
exports.isAvailable = _isAvailable;