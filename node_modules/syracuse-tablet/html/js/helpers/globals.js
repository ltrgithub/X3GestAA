"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("globals");


/**
 * A kind of instance of function but only for specific objects
 * Add more object id needed - can't be declared in utils
 */
var _refObj = new Object();
var _klasses = {};
var _scanProto = function(o, name) {
	if (o == null || !o.__proto__) return false;
	if (o.__proto__ === _refObj.__proto__) return false;
	if (!o.__proto__.constructor) return false;
	if (o._$smclass && o._$smclass.indexOf(name) >= 0) {
		return true;
	}
	if (_klasses[name] && o.__proto__.constructor === _klasses[name]) {
		// Optimization to prevent prototype scanning
		// _$smclass is an array to manage inheritance
		if (!o._$smclass) o._$smclass = [];
		o._$smclass.push(name);
		return true;
	}
	return _scanProto(o.__proto__, name);
};
var _smInstanceOf = function(o, name) {
	return _scanProto(o, name);
};
var _registerClass = function(klass, name) {
	_klasses[name] = klass;
};

var _emptyCacheCtx = {
	"$user": "none",
	"$role": "none",
	"$lang": "none"
};

var _globals = {
	tabletApplication: null,
	userCtx: null,
	isTestEnvironment: false,
	baseLocation: null,
	isDvlpMode: false,
	isOffLineMode: false,
	storage: null,
	cache: null,
	modal: null,
	cacheCtx: $.extend({}, _emptyCacheCtx),
	lookAndFeel: "windows",
	userProfile: {},
	/* JSON description of applications */
	applicationsJson: {}
};

var _setUserCtx = function(userCtx) {
	log && log("Set user context");
	var ctx = userCtx == null ? $.extend({}, _emptyCacheCtx) : userCtx;

	_globals.cache.setContext(ctx);
	_globals.cacheCtx = ctx;
	return _globals.userCtx = ctx;
};

var _setTabletApplication = function(appObj) {
	if (!appObj) {
		throw new Error("Null tabletApplication object");
	}
	log && log("Set tablet Application object");
	_globals.tabletApplication = appObj;
	return appObj;
};

/**
 * Called by main.js
 */
var _init = function(dvlpMode, storage, cache, utilsModule) {
	_globals.isOffLineMode = false;
	_globals.isDvlpMode = dvlpMode;
	var bl = _globals.baseLocation = {};
	bl.host = window.location.protocol + "//" + window.location.host;
	var path = window.location.pathname.split('/').splice(0, 2).join('/');
	bl.withPath = bl.host + path;
	bl.requirePath = bl.host + "/requireJS" + path;
	bl.htmlRoot = bl.withPath + "/html";
	if (utilsModule) bl.query = utilsModule.parseQueryString();
	_globals.isTestEnvironment = window.location.href.indexOf("/syracuse-tablet/test/index.html") > -1;
	_globals.storage = storage;
	_globals.cache = cache;
};
/*************************************************************
 * APPLICATIONS DATA
 ************************************************************/
exports.getUserCtx = function() {
	return _globals.userCtx;
};
exports.getGlobalCtx = function() {
	return _globals;
};
exports.getStorage = function() {
	return _globals.storage;
};
exports.getCache = function() {
	return _globals.cache;
};
exports.getCacheCtx = function() {
	return _globals.cacheCtx;
};
exports.getEmptyCacheCtx = function() {
	return _emptyCacheCtx;
};
exports.getEndpoint = function() {
	var ep = _globals.endpoint;
	return ep;
};
exports.setEndpoint = function(ep) {
	_globals.endpoint = ep;
};
exports.$config = function(prop) {
	return _globals.tabletApplication.$config(prop);
};
exports.setUserProfile = function(up) {
	_globals.userProfile = up;
};

exports.getUserProfile = function() {
	return _globals.userProfile;
};
exports.getUserName = function() {
	var up = _globals.userProfile;
	return up && up.user && ((up.user.firstName ? up.user.firstName + " " : "") + up.user.lastName) || "unknown";
};
/**
 * Returns a prototype of a given page of the current application
 * 	fullName: x3.erp.SUPERV.AQMCRUD.$details
 */
exports.getPrototype = function(fullName) {
	return _globals.tabletApplication.dao.getPrototype(fullName);
};
/**
 * register a page which is not declared in application meta-sdata - rowdetail...
 */
exports.registerAdditionalPage = function(id, protoJson, articleJson) {
	return _globals.tabletApplication.dao.registerAdditionalPage(id, protoJson, articleJson);
};
/** 
 * Return the current page of tablet application (not current page in a vignette)
 */
exports.getCurrentPage = function(fullName) {
	return _globals.tabletApplication.currentPage;
};
/**
 * Set the JOSN description of available applications
 * User will be able to switch from one application to another
 * Among these applications JSON there's a 'welcome' application that only displays the list of available applications
 * 	welcome application is a dashboard
 */
exports.setApplicationsJson = function(apps) {
	if (!apps) throw new Error("Null applications JSON");
	_globals.applicationsJson = apps;
};
/**
 * Set the global that points to the tablet application
 */
exports.setTabletApplication = _setTabletApplication;
/**
 * Returns global tablet application
 * TODO Change the name of getApplication
 */
exports.getApplication = function() {
	return _globals.tabletApplication;
};
/**
 * Returns the name/id of a dashboard
 * name is followed by a '.facet' like for other pages
 */
exports.getDashboardName = function(name) {
	return name + ".$mobileDashboard";
};
/**
 * Welcome application JSON description
 * JSON is built programmatically
 */
exports.getWelcomeAppJson = function() {
	return _globals.applicationsJson.$welcomeApplication;
};
/**
 * return JSON of a given application
 */
exports.getApplicationJson = function(name) {
	var appInfo = _globals.applicationsJson[name];
	/* TODO - check if application changed with id and timestamp */
	if (!appInfo) throw new Error("getApplicationJson - NULL appInfo (" + name + ")");
	return appInfo;
};
/**
 * Scans all application JSON and calls the call back
 */
exports.forEachApplicationJson = function(cb) {
	if (!cb) return;
	var apps = _globals.applicationsJson;
	Object.keys(apps).forEach(function(appName) {
		cb(appName, apps[appName]);
	});
};
/*************************************************************
 * UTILS
 ************************************************************/
/**
 * Trigger a global resize event for application
 * All layouts will be updated
 */
exports.triggerResize = function() {
	$(window).triggerHandler("resize");
};
exports.setUserCtx = _setUserCtx;
/**
 * return true if o is an instance of class 'name'
 * Class must be registered before by registerClass
 * Like this process could slow down the application it's better to register only classes for which we want to check instance
 */
exports.smInstanceOf = _smInstanceOf;
/**
 * Register a class with a name
 */
exports.registerClass = _registerClass;
/**
 * Allows access to modal through globals
 */
exports.setModal = function(m) {
	_globals.modal = m;
};
exports.getModal = function() {
	return _globals.modal;
};
/**
 * Off line mode
 */
exports.isOffLineMode = function() {
	return _globals.isOffLineMode;
};
/**
 * base url utilities
 * 	baseLocation.host - protocol://host:port
 * 	baseLocation.withPath
 * 	baseLocation.requirePath
 * 	baseLocation.htmlRoot
 * 	baseLocation.query
 */
exports.baseLocation = function() {
	return _globals.baseLocation;
};
/**
 * True is dvlp mode - set the caller of _init function
 */
exports.isDvlpMode = function() {
	return _globals.isDvlpMode;
};
/**
 * True if modules is loaded by unit test page
 */
exports.isTestEnvironment = function() {
	return _globals.isTestEnvironment;
};
/**
 * set/returns look and feel id : windows | android | ios
 */
exports.setLookAndFeel = function(lookAndFeel) {
	_globals.lookAndFeel = lookAndFeel;
};
exports.getLookAndFeel = function() {
	return _globals.lookAndFeel;
};

/*************************************************************
 * INIT
 ************************************************************/
/* Initialization by main.js */
exports.init = _init;
if (window) {
	window.$sm = exports;
}