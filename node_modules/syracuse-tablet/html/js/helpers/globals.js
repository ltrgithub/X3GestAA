"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("globals", false);
var uiSettings = require('syracuse-tablet/html/js/helpers/uiSettings');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var mobileDetect = require('syracuse-tablet/html/js/helpers/mobileDetect');
var nativeExtCall = require('syracuse-tablet/html/js/helpers/native/nativeExtCall');
var native = require('syracuse-tablet/html/js/helpers/native/native');


var _notifUserAgentChanged = function() {
	// First
	mobileDetect.init(log);
	_globals.isMobile = mobileDetect.isMobile();
	_globals.isTestNativeWrapper = false;
	try {
		var _url = jsutils.getCurrentUrl();
		// FDB I don't know who added isDesktop (we should remove it)
		_globals.isTestNativeWrapper = _url.query != null && (_url.query.testNativeWrapper === "true" || _url.query.isDesktop === "true");
	} catch (e) {}
	$(document.body).toggleClass("s-m-mobile-device", _globals.isMobile === true).attr({
		"data-style": mobileDetect.getStyleOS(),
		"data-browser": mobileDetect.getBrowserName(),
		"data-os": mobileDetect.getOsName()
	});
	log && log("Is mobile", _globals.isMobile, "is TestNativeWrapper", _globals.isTestNativeWrapper);
};

var _metaData;
var _authoringActive;
var _emptyCacheCtx = {
	"$user": "none",
	"$role": "none",
	"$lang": "none"
};

var _devOpts = {
	showUnfoundFields: false
};
var _controllersMap = {};

var _globals = {
	tabletApplication: null,
	userCtx: null,
	isTestEnvironment: false,
	baseLocation: null,
	isDvlpMode: false,
	storage: null,
	cache: null,
	modal: null,
	cacheCtx: $.extend({}, _emptyCacheCtx),
	lookAndFeel: "windows",
	userProfile: {},
	userProfileLocales: {}
};

(function() {
	_notifUserAgentChanged();
})();

var _clearUserCtx = function(userCtx) {
	return _setUserCtx(null);
};

var _setUserCtx = function(userCtx) {
	log && log("Set user context");
	var ctx = userCtx == null ? $.extend({}, _emptyCacheCtx) : userCtx;

	_globals.cache.setContext(ctx);
	_globals.cacheCtx = ctx;
	if (exports.isAutoUITestMode()) {
		exports.getUnitTestMgr().notifUserCtxChanged(ctx, exports.getEndpoint());
	}
	return _globals.userCtx = ctx;
};

var _setTabletApplication = function(appObj) {
	if (!appObj) {
		throw new Error("Null tabletApplication object");
	}
	log && log("Set tablet Application object");
	_globals.tabletApplication = appObj;
	return appObj;
};
var _isNativeScrollingStatus = null;

/**
 * Called by main.js
 */
var _init = function(dvlpMode, storage, cache, utilsModule) {
	_globals.isDvlpMode = dvlpMode;
	var bl = _globals.baseLocation = {};
	bl.host = window.location.protocol + "//" + window.location.host;
	var path = window.location.pathname.split('/').splice(0, 2).join('/');
	bl.withPath = bl.host + path;
	bl.requirePath = bl.host + "/requireJS" + path;
	bl.htmlRoot = bl.withPath + "/html";
	bl.url = bl.host + window.location.pathname;
	if (utilsModule) bl.query = utilsModule.parseQueryString();
	_globals.isTestEnvironment = jsutils.isTestEnvironment();
	_globals.storage = storage;
	_globals.cache = cache;
	_globals.unitTestMode = bl.query && bl.query.unitTestMode === "true";
};
exports.fallbackLocaleCode = "en-US";

/*************************************************************
 * APPLICATIONS DATA
 ************************************************************/
exports.isLoggedIn = function() {
	return _globals.userCtx != null && _globals.userCtx.$user !== "none";
};
exports.getUserCtx = function() {
	return _globals.userCtx;
};
exports.getGlobalCtx = function() {
	return _globals;
};
exports.getStorage = function() {
	return _globals.storage;
};
exports.getCache = function() {
	return _globals.cache;
};
exports.getCacheCtx = function() {
	return _globals.cacheCtx;
};
exports.getEmptyCacheCtx = function() {
	return _emptyCacheCtx;
};
exports.getEndpoint = function() {
	return _globals.endpoint;
};
exports.getEndpointDescr = function() {
	return _globals.endpointDescr;
};
exports.setEndpoint = function(ep, epDescr) {
	_globals.endpoint = ep;
	_globals.endpointDescr = epDescr || ep;
	if (exports.isAutoUITestMode()) {
		exports.getUnitTestMgr().notifUserCtxChanged(exports.getUserCtx(), ep);
	}
};
exports.notifUserAgentChanged = _notifUserAgentChanged;
/*
 * Returns of the application is physically running on a desktop PC
 * This function MUST ignore eventually emulation properties set by authoring
 */
exports.isDesktop = function() {
	return _globals.isMobile !== true;
};
exports.isNativeModeEnabled = function() {
	return nativeExtCall.isNativeModeEnabled();
};
exports.isMobile = function() {
	return _globals.isMobile === true;
};
exports.isNativeScrolling = function() {
	if (_isNativeScrollingStatus == null) {
		if (exports.isNativeWrapper()) {
			// Wrapper - We ask the wrapper - Eg: IOS forces non-native for a better UX
			_isNativeScrollingStatus = native.hasCapability("nativeScrolling")
		} else {
			// Not a wrapper - We force native scrolling on mobile devices 
			// Eg: When we test with Chrome simulator we force native
			_isNativeScrollingStatus = exports.isMobile()
		}
	}
	return _isNativeScrollingStatus;
};
exports.isNativeWrapper = function() {
	return native.hasCapability("nativeApp")
}
exports.isTestNativeWrapper = function() {
	return exports.isDesktop() && _globals.isTestNativeWrapper;
};
/**
 * Just to optimize the management of events
 */
exports.isDebugDeviceSimlator = function() {
	return exports.isMobile() && window.smNativeInterface == null;
};
exports.isDevelopmentModeAllowed = function() {
	return exports.isDesktop() && !exports.isNativeModeEnabled() && exports.isDvlpMode();
};
exports.isAuthoringModeAllowed = function() {
	return exports.isDesktop() && !exports.isNativeModeEnabled() && exports.getAuthoringLevel() !== "none";
};
exports.$config = function(prop) {
	return _globals.tabletApplication.$config(prop);
};
exports.setUserProfile = function(up) {
	if (!up || !up.user || !up.selectedRole || !up.selectedLocale) {
		throw new Error("Unexpected " + (up ? "bad" : "null") + " user profile");
	}
	if (up.selectedEndpoint) {
		// SelectedEndpoint can be null if no endpoint is assigned to the user (regular login service doesn't check it)
		// It's check when we get the user profile settings (our own service)
		// So we accept selectedEndpoint==null to let Syracuse return and error when we call sdata/syracuse/collaboration/syracuse/userProfiles/$service/settings
		exports.setEndpoint(up.selectedEndpoint.application + "." + up.selectedEndpoint.contract + "." + up.selectedEndpoint.dataset, up.selectedEndpoint.description);
	}
	// Set user context for consistency until the user change it
	exports.setUserCtx({
		"$user": up.user.$value,
		"$role": up.selectedRole.code,
		"$lang": up.selectedLocale.code
	});
	_globals.userProfileLocales = {};
	if (up.user.locales) {
		// Profile is able to return a customization of locales formats
		up.user.locales.forEach(function(locale) {
			_globals.userProfileLocales[locale.code] = {
				shortDate: locale.shortDate,
				shortTime: locale.shortTime,
				longTime: locale.longTime,
				numberDecimalSeparator: locale.numberDecimalSeparator,
				numberGroupSeparator: locale.numberGroupSeparator
			};
		});
	}
	_globals.userProfile = up;
};
exports.getUserProfileLocale = function(locale) {
	return _globals.userProfileLocales[locale];
};
exports.getUserProfile = function() {
	return _globals.userProfile;
};
exports.getUserName = function() {
	var up = _globals.userProfile;
	return up && up.user && ((up.user.firstName ? up.user.firstName + " " : "") + up.user.lastName) || "unknown";
};
exports.getUserUuid = function() {
	var up = _globals.userProfile;
	return up && up.user && up.user.$uuid;
};
exports.getUserLogin = function() {
	var up = _globals.userProfile;
	return up && up.user && up.user.login;
};

exports.getUserRole = function() {
	var up = _globals.userProfile;
	return (up && up.selectedRole && up.selectedRole.description) || "";
};
exports.getSeletedRoleUuid = function() {
	var up = _globals.userProfile;
	return (up && up.selectedRole && up.selectedRole.$uuid) || "";
};
exports.getSecurityProfile = function() {
	var up = _globals.userProfile;
	return (up && up.securityProfile) || {}; //factoryId,personalizationLevel (admin,user,none)
};
exports.getAuthoringLevel = function() {
	var al = _globals.userProfile;
	return (al ? al.authoringLevel : null) || "none";
};
/** 
 * Return the current page of tablet application (not current page in a vignette)
 */
exports.getCurrentPage = function() {
	return _globals.tabletApplication.currentPage;
};
exports.getScrollingDirection = function() {
	var p = exports.getCurrentPage();
	return p.rootLayout && p.rootLayout.$type === "hub" ? p.rootLayout.scrollDirection : "v";
};
exports.getMainPageGestureMgr = function() {
	var p = exports.getCurrentPage();
	if (!p) return null;
	return p.getGestureMgr();
};
/**
 * Set the global that points to the tablet application
 */
exports.setTabletApplication = _setTabletApplication;
/**
 * Returns global tablet application
 * TODO Change the name of getApplication
 */
exports.getApplication = function() {
	return _globals.tabletApplication;
};

/*************************************************************
 * UTILS
 ************************************************************/
exports.setUserCtx = _setUserCtx;
exports.clearUserCtx = _clearUserCtx;


/**
 * Allows access to modal through globals
 */
exports.setModal = function(m) {
	_globals.modal = m;
};
exports.getModal = function() {
	return _globals.modal;
};
/**
 * base url utilities
 * 	baseLocation.host - protocol://host:port
 * 	baseLocation.withPath
 * 	baseLocation.requirePath
 * 	baseLocation.htmlRoot
 * 	baseLocation.query
 */
exports.baseLocation = function() {
	return _globals.baseLocation;
};
/**
 * True is dvlp mode - set the caller of _init function
 */
exports.isDvlpMode = function() {
	return _globals.isDvlpMode;
};
exports.isAutoUITestMode = function() {
	return _globals.unitTestMode === true;
};
exports.getUnitTestMgr = function() {
	return _globals.unitTestMgr;
};
exports.setUnitTestMgr = function(mgr) {
	_globals.unitTestMgr = mgr;
};
exports.getDvlpOpt = function(name) {
	return _globals.isDvlpMode && _devOpts[name];
};

/**
 * True if modules is loaded by unit test page
 */
exports.isTestEnvironment = function() {
	return _globals.isTestEnvironment;
};
/**
 * set/returns look and feel id : windows | android | ios
 */
exports.setLookAndFeel = function(lookAndFeel) {
	uiSettings.init(lookAndFeel);
	_globals.lookAndFeel = lookAndFeel;
};
exports.getLookAndFeel = function() {
	return _globals.lookAndFeel;
};
exports.getSiteLayout = function() {
	return _globals.siteLayout;
};
exports.setSiteLayout = function(sl) {
	_globals.siteLayout = sl;
};
exports.isSmartphone = function() {
	return _globals.siteLayout.getDeviceType() === "smartphone";
};
exports.isTablet = function() {
	return _globals.siteLayout.getDeviceType() === "tablet";
};
exports.setMetaData = function(metaData) {
	_metaData = metaData;
};
exports.getMetaData = function() {
	return _metaData;
};
exports.setOfflineManager = function(olm) {
	_globals.offlineManager = olm;
};
// offline should be a boolean
// notif (optional): info to notify the user
// byGlobalEvent (optional): True if called by a global OS hook and not detected on a network request
exports.setOffline = function(offline, notif, byGlobalEvent) {
	if (!_globals.offlineManager) return;
	_globals.offlineManager.setOffline(offline, notif, byGlobalEvent);
};
exports.setOfflineQuiet = function(offline) {
	if (!_globals.offlineManager) return;
	_globals.offlineManager.setOfflineQuiet(offline);
};
exports.isOnline = function() {
	if (_globals.offlineManager) return _globals.offlineManager.isOnline();
	return navigator.onLine;
};

exports.addController = function(c) {
	if (!c) return;
	if (!_controllersMap) _controllersMap = {};
	if (_controllersMap[c.id]) throw new Error("Controller already exists [" + c.id + "]");
	_controllersMap[c.id] = c;
	return c;
};
exports.removeController = function(c) {
	if (!c || !_controllersMap) return;
	delete _controllersMap[c.id];
	return c;
};
exports.getController = function(id) {
	if (!id || !_controllersMap) return null;
	return _controllersMap[id];
};

/*
 * Set/Check if authoring mode is active or not to change behaviour of modals
 */
exports.setAuthoringActive = function(status) {
	_authoringActive = status;
};

exports.isAuthoringActive = function() {
	return _authoringActive;
};


/*************************************************************
 * STATIQUES
 ************************************************************/
exports.ROWIDXPROP = "~ROWIDX~";
exports.SINGLEARRAYPROP = "~data~";
exports.ACTROWDETAIL = "rowDetail";
exports.ACTCHARTDETAIL = "chartDetail";
exports.ACTCARDDESIGN = "cardDesign";
exports.ACTROWDEL = "rowDelete";
exports.ACTROWSEL = "rowSelect";
exports.RECORDCLASS = "s-m-record";
exports.ACTMULTISEL = "multiSelection";

exports.PANELACTIONSREGULAR = "panelactionregular";
exports.PANELPAGESHARE = "panelpagesetting";
exports.PANELUSERSMARTPHONE = "panelusersmartphone";
exports.PANELFILTERSORT = "panelfiltersort";
exports.PANELEDITTEMPLATES = "paneledittemplates";
exports.EXCLUDEFIELDS = ["CREUSR", "CREUSR_REF", "UPDUSR", "UPDUSR_REF"];
exports.CELLDEFCOLOR = "darkgrey";
exports.TILEDEFCOLOR = "darkgrey";
exports.CARDARRAYDEFCOLOR = "darkgrey";
exports.CELLENABLEDCOLOR = "green";
exports.OFFLINEQUERYCOUNT = 30;
exports.XREF_DESCRPOS_TABLE = "bottom";
/*************************************************************
 * INIT
 ************************************************************/
/* Initialization by main.js */
exports.init = _init;
if (window) {
	window.$sm = exports;
}

exports.X3_SEVERITY_TO_BS = {
	"info": "success",
	"warning": "warning",
	"error": "error"
};

exports.getBuildTimeStamp = function() {
	// Global function injected by build process in case we use non debug client
	if (window.__sageBuildTimestamp) {
		return window.__sageBuildTimestamp();
	}
	return "dev mode";
};

/*
 * Global settings are settings stored for the current device and are not user or role dependent.
 * The goal of this method is only to store the settings in a global var to make them accessible for sync calls since
 * the are read in an async process
 */
var _globalSettings = {
	// Default
	"device-type": "auto"
};
exports.setGlobalSettings = function(settings) {
	_globalSettings = settings;
};
exports.getGlobalSettings = function() {
	return _globalSettings;
};
// This flag is used after a login to ensure the list of applications in read
// one time from the server instead of always reading from the local cache 
var _needToCheckAppsList = true;
exports.needToCheckAppsList = function() {
	return _needToCheckAppsList;
};
exports.setNeedToCheckAppsList = function(state) {
	_needToCheckAppsList = state;
};