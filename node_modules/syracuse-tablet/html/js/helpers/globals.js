"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("globals");


/**
 * A kind of instance of function but only for specific objects
 * Add more object id needed - can't be declared in utils
 */
var _refObj = new Object();
var _klasses = {};
var _scanProto = function(o, name) {
	if (o == null || !o.__proto__) return false;
	if (o.__proto__ === _refObj.__proto__) return false;
	if (!o.__proto__.constructor) return false;
	if (o._$smclass && o._$smclass.indexOf(name) >= 0) {
		return true;
	}
	if (_klasses[name] && o.__proto__.constructor === _klasses[name]) {
		// Optimization to prevent prototype scanning
		// _$smclass is an array to manage inheritance
		if (!o._$smclass) o._$smclass = [];
		o._$smclass.push(name);
		return true;
	}
	return _scanProto(o.__proto__, name);
};
var _smInstanceOf = function(o, name) {
	return _scanProto(o, name);
};
var _registerClass = function(klass, name) {
	_klasses[name] = klass;
};

var _emptyCacheCtx = {
	"$user": "none",
	"$role": "none",
	"$lang": "none"
};

var _globals = {
	application: null,
	userCtx: null,
	isTestEnvironment: false,
	baseLocation: null,
	isDvlpMode: false,
	isOffLineMode: false,
	storage: null,
	cache: null,
	modal: null,
	cacheCtx: $.extend({}, _emptyCacheCtx),
	lookAndFeel: "windows",
	userProfile: {},
	validApplications: {}
};

var _setUserCtx = function(userCtx) {
	log && log("Set user context");
	var ctx = userCtx == null ? $.extend({}, _emptyCacheCtx) : userCtx;

	_globals.cache.setContext(ctx);
	_globals.cacheCtx = ctx;
	return _globals.userCtx = ctx;
};

var _setApplication = function(appObj) {
	if (!appObj) {
		throw new Error("Bad application description");
	}
	log && log("Set application description");
	_globals.application = appObj;
	return appObj;
};

/**
 * Called by main.js
 */
var _init = function(dvlpMode, storage, cache, utilsModule) {
	_globals.isOffLineMode = false;
	_globals.isDvlpMode = dvlpMode;
	var bl = _globals.baseLocation = {};
	bl.host = window.location.protocol + "//" + window.location.host;
	var path = window.location.pathname.split('/').splice(0, 2).join('/');
	bl.withPath = bl.host + path;
	bl.requirePath = bl.host + "/requireJS" + path;
	bl.htmlRoot = bl.withPath + "/html";
	if (utilsModule) bl.query = utilsModule.parseQueryString();
	_globals.isTestEnvironment = window.location.href.indexOf("/syracuse-tablet/test/index.html") > -1;
	_globals.storage = storage;
	_globals.cache = cache;
};

/* Getters */
exports.isOffLineMode = function() {
	return _globals.isOffLineMode;
};
/**
 * baseLocation.host - protocol://host:port
 * baseLocation.withPath
 * baseLocation.requirePath
 * baseLocation.htmlRoot
 * baseLocation.query
 */
exports.baseLocation = function() {
	return _globals.baseLocation;
};
exports.isDvlpMode = function() {
	return _globals.isDvlpMode;
};
exports.isTestEnvironment = function() {
	return _globals.isTestEnvironment;
};
exports.getApplication = function() {
	return _globals.application;
};
exports.getUserCtx = function() {
	return _globals.userCtx;
};
exports.getGlobalCtx = function() {
	return _globals;
};
exports.getStorage = function() {
	return _globals.storage;
};
exports.getCache = function() {
	return _globals.cache;
};
exports.getCacheCtx = function() {
	return _globals.cacheCtx;
};
exports.getEmptyCacheCtx = function() {
	return _emptyCacheCtx;
};
exports.getEndpoint = function() {
	var ep = _globals.endpoint;
	return ep;
};
exports.setEndpoint = function(ep) {
	_globals.endpoint = ep;
};
exports.$config = function(prop) {
	return _globals.application.$config(prop);
};
exports.setLookAndFeel = function(lookAndFeel) {
	_globals.lookAndFeel = lookAndFeel;
};
/*
 * returns: windows | android | ios
 */
exports.getLookAndFeel = function() {
	return _globals.lookAndFeel;
};

exports.setUserProfile = function(up) {
	_globals.userProfile = up;
};

exports.getUserProfile = function() {
	return _globals.userProfile;
};

/**
 * Returns the size of current device
 */
exports.getDeviceSize = function(camelCase) {
	return camelCase ? "Md" : "md";
};

exports.setModal = function(m) {
	_globals.modal = m;
};

exports.getModal = function() {
	return _globals.modal;
};

exports.setValidApplications = function(apps) {
	_globals.validApplications = apps;
};

exports.getValidApplications = function() {
	return _globals.validApplications;
};
// return the home dash-board of application
exports.getHomeDashboard = function() {
	_globals.application.dao.getHomeDashboard();
};
// fullName: x3.erp.SUPERV.AQMCRUD.$details
exports.getPrototype = function(fullName) {
	return _globals.application.dao.getPrototype(fullName);
};
// register a page which is not declared in application meta-sdata - rowdetail...
exports.registerAdditionalPage = function(id, protoJson, articleJson) {
	return _globals.application.dao.registerAdditionalPage(id, protoJson, articleJson);
};
// Current page of applications (not current page in a vignette)
exports.getCurrentPage = function(fullName) {
	return _globals.application.currentPage;
};
/* Setters */
exports.setApplication = _setApplication;
exports.setUserCtx = _setUserCtx;
//return true if o is an instance of classe 'name'
exports.smInstanceOf = _smInstanceOf;
//Register a class with a name
exports.registerClass = _registerClass;
/* Initialization by main.js */
exports.init = _init;
/* Set global ctx - used by logger*/
if (window) {
	window.$sm = exports;
}