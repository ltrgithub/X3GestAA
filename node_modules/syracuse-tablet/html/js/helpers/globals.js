"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("globals");
var uiSettings = require('syracuse-tablet/html/js/helpers/uiSettings');
var _metaData;
var _authoringActive;
var _emptyCacheCtx = {
	"$user": "none",
	"$role": "none",
	"$lang": "none"
};

var _devOpts = {
	showUnfoundFields: false
};
var _controllersMap = {};

var _globals = {
	tabletApplication: null,
	userCtx: null,
	isTestEnvironment: false,
	baseLocation: null,
	isDvlpMode: false,
	storage: null,
	cache: null,
	modal: null,
	cacheCtx: $.extend({}, _emptyCacheCtx),
	lookAndFeel: "windows",
	userProfile: {},
};

var _setUserCtx = function(userCtx) {
	log && log("Set user context");
	var ctx = userCtx == null ? $.extend({}, _emptyCacheCtx) : userCtx;

	_globals.cache.setContext(ctx);
	_globals.cacheCtx = ctx;
	return _globals.userCtx = ctx;
};

var _setTabletApplication = function(appObj) {
	if (!appObj) {
		throw new Error("Null tabletApplication object");
	}
	log && log("Set tablet Application object");
	_globals.tabletApplication = appObj;
	return appObj;
};

/**
 * Called by main.js
 */
var _init = function(dvlpMode, storage, cache, utilsModule) {
	_globals.isDvlpMode = dvlpMode;
	var bl = _globals.baseLocation = {};
	bl.host = window.location.protocol + "//" + window.location.host;
	var path = window.location.pathname.split('/').splice(0, 2).join('/');
	bl.withPath = bl.host + path;
	bl.requirePath = bl.host + "/requireJS" + path;
	bl.htmlRoot = bl.withPath + "/html";
	if (utilsModule) bl.query = utilsModule.parseQueryString();
	_globals.isTestEnvironment = window.location.href.indexOf("/syracuse-tablet/test/index.html") > -1;
	_globals.storage = storage;
	_globals.cache = cache;
};
/*************************************************************
 * APPLICATIONS DATA
 ************************************************************/
exports.isLoggedIn = function() {
	return _globals.userCtx != null && _globals.userCtx.$user !== "none";
};
exports.getUserCtx = function() {
	return _globals.userCtx;
};
exports.getGlobalCtx = function() {
	return _globals;
};
exports.getStorage = function() {
	return _globals.storage;
};
exports.getCache = function() {
	return _globals.cache;
};
exports.getCacheCtx = function() {
	return _globals.cacheCtx;
};
exports.getEmptyCacheCtx = function() {
	return _emptyCacheCtx;
};
exports.getEndpoint = function() {
	var ep = _globals.endpoint;
	return ep;
};
exports.setEndpoint = function(ep) {
	_globals.endpoint = ep;
};
exports.$config = function(prop) {
	return _globals.tabletApplication.$config(prop);
};
exports.setUserProfile = function(up) {
	_globals.userProfile = up;
};

exports.getUserProfile = function() {
	return _globals.userProfile;
};
exports.getUserName = function() {
	var up = _globals.userProfile;
	return up && up.user && ((up.user.firstName ? up.user.firstName + " " : "") + up.user.lastName) || "unknown";
};

exports.getUserRole = function() {
	var up = _globals.userProfile;
	return (up && up.selectedRole && up.selectedRole.description) || "";
};

exports.getUserPhotoUrl = function() {
	var up = _globals.userProfile;
	var upPhoto = up && up.user && up.user.photo;
	return upPhoto && up.user.$shortUrl ? up.user.$shortUrl + "/photo" : false;
};

/** 
 * Return the current page of tablet application (not current page in a vignette)
 */
exports.getCurrentPage = function() {
	return _globals.tabletApplication.currentPage;
};
exports.getScrollingDirection = function() {
	var p = exports.getCurrentPage();
	return p.rootLayout && p.rootLayout.$type === "hub" ? p.rootLayout.scrollDirection : "v";
};
exports.getMainPageGestureMgr = function() {
	var p = exports.getCurrentPage();
	if (!p) return null;
	return p.getGestureMgr();
};
/**
 * Set the global that points to the tablet application
 */
exports.setTabletApplication = _setTabletApplication;
/**
 * Returns global tablet application
 * TODO Change the name of getApplication
 */
exports.getApplication = function() {
	return _globals.tabletApplication;
};

/*************************************************************
 * UTILS
 ************************************************************/
exports.setUserCtx = _setUserCtx;

/**
 * Allows access to modal through globals
 */
exports.setModal = function(m) {
	_globals.modal = m;
};
exports.getModal = function() {
	return _globals.modal;
};
/**
 * base url utilities
 * 	baseLocation.host - protocol://host:port
 * 	baseLocation.withPath
 * 	baseLocation.requirePath
 * 	baseLocation.htmlRoot
 * 	baseLocation.query
 */
exports.baseLocation = function() {
	return _globals.baseLocation;
};
/**
 * True is dvlp mode - set the caller of _init function
 */
exports.isDvlpMode = function() {
	return _globals.isDvlpMode;
};

exports.getDvlpOpt = function(name) {
	return _globals.isDvlpMode && _devOpts[name];
};

/**
 * True if modules is loaded by unit test page
 */
exports.isTestEnvironment = function() {
	return _globals.isTestEnvironment;
};
/**
 * set/returns look and feel id : windows | android | ios
 */
exports.setLookAndFeel = function(lookAndFeel) {
	uiSettings.reset(lookAndFeel);
	_globals.lookAndFeel = lookAndFeel;
};
exports.getLookAndFeel = function() {
	return _globals.lookAndFeel;
};
exports.getSiteLayout = function() {
	return _globals.siteLayout;
};
exports.setSiteLayout = function(sl) {
	_globals.siteLayout = sl;
};
exports.setMetaData = function(metaData) {
	_metaData = metaData;
};
exports.getMetaData = function() {
	return _metaData;
};
exports.addController = function(c) {
	if (!c) return;
	if (!_controllersMap) _controllersMap = {};
	if (_controllersMap[c.id]) throw new Error("Controller already exists [" + c.id + "]");
	_controllersMap[c.id] = c;
	return c;
};
exports.removeController = function(c) {
	if (!c || !_controllersMap) return;
	delete _controllersMap[c.id];
	return c;
};
exports.getController = function(id) {
	if (!id || !_controllersMap) return null;
	return _controllersMap[id];
};

/*
 * Set/Check if authoring mode is active or not to change behaviour of modals
 */
exports.setAuthoringActive = function(status) {
	_authoringActive = status;
};

exports.isAuthoringActive = function() {
	return _authoringActive;
};


/*************************************************************
 * STATIQUES
 ************************************************************/
exports.ROWIDXPROP = "~ROWIDX~";
exports.SINGLEARRAYPROP = "~data~";
exports.ACTROWDETAIL = "rowDetail";
exports.ACTCARDDESIGN = "cardDesign";
exports.ACTROWDEL = "rowDelete";
exports.ACTROWSEL = "rowSelect";
exports.RECORDCLASS = "s-m-record";

exports.PANELACTIONSREGULAR = "panelactionregular";
exports.PANELUSERSMARTPHONE = "panelusersmartphone";
exports.PANELFILTERSORT = "panelfiltersort";

/*************************************************************
 * INIT
 ************************************************************/
/* Initialization by main.js */
exports.init = _init;
if (window) {
	window.$sm = exports;
}

exports.X3_SEVERITY_TO_BS = {
	"info": "success",
	"warning": "warning",
	"error": "error"
};

exports.isOnline = function() {
	return navigator.onLine;
};