"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var storageModule = require('syracuse-tablet/html/js/storage/storage');
var sdataHttp = require('syracuse-tablet/html/js/sdata/sdataHttp');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');

var _appListUrl = "/sdata/syracuse/collaboration/syracuse/mobileApplications/$service/availableApplications";

exports.getMyApplications = function() {
	var deferred = $.Deferred();
	var ctx = globals.getCacheCtx();
	var storage = globals.getStorage();
	storage.read({
		$context: ctx,
		$collection: "$settings",
		$key: "MyApps"
	})
		.then(function(result) {
			if (result.$status === storageModule.StatusCodes.OK) {
				deferred.resolve(result.$data);
			} else {
				// no config found
				_queryMyApplications()
					.then(function(apps) {
						return _storeMyApplications(apps);
					})
					.then(function(apps) {
						deferred.resolve(apps);
					}, function(e) {
						deferred.reject(e);
					});
			}
		}, function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
};

function _queryMyApplications() {
	var deferred = $.Deferred();
	var params = {
		method: "GET",
		url: _appListUrl
	};
	if (globals.isDvlpMode()) {
		params.url += "?allApps";
	}
	params.parsedUrl = sdataUtils.parseSDataURL(params.url);
	sdataHttp.send(params)
		.then(function(result) {
			if (result.isSuccess && result.responseJSON) {
				var apps = result.responseJSON.$resources;
				deferred.resolve(apps);
			} else {
				deferred.reject(new Error("Loading application list error\n" + JSON.stringify(result, null, 2)));
			}
		}, function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
}

function _storeMyApplications(apps) {
	var deferred = $.Deferred();
	var ctx = globals.getCacheCtx();
	var storage = globals.getStorage();
	storage.put({
		$context: ctx,
		$collection: "$settings",
		$key: "MyApps",
		$data: apps
	})
		.then(function(result) {
			deferred.resolve(apps);
		}, function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
}

exports.getMyApplicationDetail = function(appHeader) {
	var deferred = $.Deferred();
	var ctx = globals.getCacheCtx();
	var storage = globals.getStorage();
	storage.read({
		$context: ctx,
		$collection: "$settings",
		$key: "MyApp_" + appHeader.applicationName
	})
		.then(function(result) {
			if (result.$status === storageModule.StatusCodes.OK) {
				deferred.resolve(result.$data);
			} else {
				// no config found
				_queryMyApplicationDetail(appHeader)
					.then(function(apps) {
						return _storeMyApplicationDetail(apps);
					})
					.then(function(apps) {
						deferred.resolve(apps);
					}, function(e) {
						deferred.reject(e);
					});
			}
		}, function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
};

function _queryMyApplicationDetail(appHeader) {
	var deferred = $.Deferred();
	var params = {
		method: "GET",
		url: appHeader.$metaDataUrl
	};
	params.parsedUrl = sdataUtils.parseSDataURL(params.url);
	sdataHttp.send(params)
		.then(function(result) {
			if (result.isSuccess && result.responseJSON) {
				var app = result.responseJSON;
				deferred.resolve(app);
			} else {
				deferred.reject(new Error("Loading application error\n" + JSON.stringify(result, null, 2)));
			}
		}, function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
}

function _storeMyApplicationDetail(app) {
	var deferred = $.Deferred();
	var ctx = globals.getCacheCtx();
	var storage = globals.getStorage();
	storage.put({
		$context: ctx,
		$collection: "$settings",
		$key: "MyApp_" + app.$application.applicationName,
		$data: app
	})
		.then(function(result) {
			deferred.resolve(app);
		}, function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
}