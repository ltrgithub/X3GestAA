"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var storageModule = require('syracuse-tablet/html/js/storage/storage');
var sdataCommonRes = require('syracuse-tablet/html/js/sdata/sdataCommonResources');
var utils = require('syracuse-tablet/html/js/helpers/utils');

var clientContract = require('syracuse-tablet/html/js/sdata/entities/clientContract');

exports.getMyApplications = function() {
	var deferred = $.Deferred();
	var ctx = globals.getCacheCtx();
	var storage = globals.getStorage();

	var prefix = globals.getCache().cachePrefix;

	// The list of apps is independent of role and user
	ctx = {
		"$user": "none",
		"$role": "none",
		"$lang": ctx.$lang
	};

	function appendClientApps(apps) {
		var clientApps = clientContract.getApps();
		clientApps.forEach(function(app) {
			apps.push(app);
		});
	};

	var readCache;
	if (globals.isDvlpMode()) { // Skip cache when in dev mode
		readCache = $.smResolve({
			$status: storageModule.StatusCodes.NOT_FOUND
		});
	} else {
		readCache = storage.read({
			$context: ctx,
			$collection: prefix + "$settings",
			$endpoint: "$local",
			$key: "MyApps"
		});
	}
	readCache.then(function(result) {
		if (result.$status === storageModule.StatusCodes.OK) {
			var apps = result.$data;
			appendClientApps(apps);
			deferred.resolve(apps);
		} else {
			// no config found
			sdataCommonRes.queryMyApplications()
				.then(function(apps) {
					return _storeMyApplications(apps);
				}, function(e) {
					deferred.reject(e);
				})
				.then(function(apps) {
					appendClientApps(apps);
					deferred.resolve(apps);
				}).fail(function(e) {
					deferred.reject(e);
				});
		}
	}, function(e) {
		deferred.reject(e);
	});
	return deferred.promise();
};

function _storeMyApplications(apps) {
	var deferred = $.Deferred();
	var ctx = globals.getCacheCtx();
	var storage = globals.getStorage();
	var prefix = globals.getCache().cachePrefix;

	// The list of apps is independent of role and user
	ctx = {
		"$user": "none",
		"$role": "none",
		"$lang": ctx.$lang
	};

	storage.put({
		$context: ctx,
		$collection: prefix + "$settings",
		$endpoint: "$local",
		$key: "MyApps",
		$data: apps
	})
		.then(function(result) {
			deferred.resolve(apps);
		}).fail(function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
}
/**
 * Return application detail for a given JSON description
 */
exports.getMyApplicationDetail = function(appHeader) {
	var deferred = $.Deferred();
	var ctx = globals.getCacheCtx();
	var storage = globals.getStorage();
	var prefix = globals.getCache().cachePrefix;

	// No meta data url, so it's a client side application
	if (!appHeader.$metaDataUrl) {
		var app = clientContract.getAppDetail(appHeader.applicationName);
		if (app) {
			deferred.resolve(app);
		} else {
			deferred.reject("Application not found: " + appHeader.applicationName);
		}
	} else {
		storage.read({
			$context: ctx,
			$collection: prefix + "$settings",
			$endpoint: "$local",
			$key: "MyApp_" + appHeader.applicationName
		})
			.then(function(result) {
				if (result.$status === storageModule.StatusCodes.OK) {
					deferred.resolve(result.$data);
				} else {
					// no config found
					sdataCommonRes.queryMyApplicationDetail(appHeader)
						.then(function(apps) {
							return _storeMyApplicationDetail(apps);
						})
						.then(function(apps) {
							deferred.resolve(apps);
						}).fail(function(e) {
							deferred.reject(e);
						});
				}
			}, function(e) {
				deferred.reject(e);
			});
	}
	return deferred.promise();
};

function _storeMyApplicationDetail(app) {
	var deferred = $.Deferred();
	var ctx = globals.getCacheCtx();
	var storage = globals.getStorage();
	var prefix = globals.getCache().cachePrefix;

	storage.put({
		$context: ctx,
		$collection: prefix + "$settings",
		$endpoint: "$local",
		$key: "MyApp_" + app.$application.applicationName,
		$data: app
	})
		.then(function(result) {
			deferred.resolve(app);
		}).fail(function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
}