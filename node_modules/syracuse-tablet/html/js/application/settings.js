"use strict";

/*
 * This module should be used to persist user specific settings
 */

var globals = require('syracuse-tablet/html/js/helpers/globals');
var storageModule = require('syracuse-tablet/html/js/storage/storage');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("settings");

var _currentContextUserRole = {};
var _currentContextUser = {};

var _settingsUserRole = null;
var _settingsUser = null;

/*
 *
 */
function _getContext() {
	var ctx = globals.getUserCtx();
	if (!ctx) { // In case not logged in yet!
		return {
			$user: "none",
			$role: "none",
			$lang: "en-US",
		};
	}
	return ctx;
}

/*
 *
 */
function _checkContextUserRole() {
	var ctx = _getContext();
	if (_currentContextUserRole.user != ctx.$user ||
		_currentContextUserRole.role != ctx.$role) {
		_currentContextUserRole.user = ctx.$user;
		_currentContextUserRole.role = ctx.$role;
		_currentContextUserRole.lang = ctx.$lang;
		_settingsUserRole = null;
	}
}

/*
 *
 */
function _readSettingsUserRole() {
	var storage = globals.getStorage();

	var ctx = {
		"$user": _currentContextUserRole.user,
		"$role": _currentContextUserRole.role,
		"$lang": "none"
	};

	return storage.read({
		$context: ctx,
		$collection: "$settings",
		$endpoint: "$local",
		$key: "$user_and_role"
	}).then(function(result) {
		if (result.$status === storageModule.StatusCodes.OK) {
			return result.$data;
		} else {
			return {};
		}
	});
}

/*
 *
 */
function _checkContextUser() {
	var ctx = _getContext();
	if (_currentContextUser.user != ctx.$user ||
		_currentContextUser.role != ctx.$role) {
		_currentContextUser.user = ctx.$user;
		_currentContextUser.role = ctx.$role;
		_currentContextUser.lang = ctx.$lang;
		_settingsUser = null;
	}
}

/*
 *
 */
function _readSettingsUser() {
	var storage = globals.getStorage();

	var ctx = {
		"$user": _currentContextUser.user,
		"$role": "none",
		"$lang": "none"
	};

	return storage.read({
		$context: ctx,
		$collection: "$settings",
		$endpoint: "$local",
		$key: "$user"
	}).then(function(result) {
		if (result.$status === storageModule.StatusCodes.OK) {
			_settingsUser = result.$data;
		} else {
			_settingsUser = {};
		}
		log && log("Read user settings...");
		log && log(_settingsUser);
	});
}

/*
 *
 */
function _writeSettingsUser() {
	var storage = globals.getStorage();

	var ctx = {
		"$user": _currentContextUser.user,
		"$role": "none",
		"$lang": "none"
	};

	log && log("Writing user settings...");
	log && log(_settingsUser);
	return storage.put({
		$context: ctx,
		$collection: "$settings",
		$endpoint: "$local",
		$key: "$user",
		$data: _settingsUser
	}).then(function(result) {
		if (result.$status === storageModule.StatusCodes.OK) {
			return result.$data;
		} else {
			return {};
		}
	});
}

/*
 * ======================================================
 * Pages pinned on welcome page
 * ======================================================
 */

/*
 *
 */
exports.getPinnedPages = function() {
	_checkContextUser();
	var read;
	if (_settingsUser == null) {
		read = _readSettingsUser();
	} else {
		read = $.smResolve();
	}
	return read.then(function() {
		_settingsUser.pinnedPages = _settingsUser.pinnedPages || [];
		return _settingsUser.pinnedPages;
	});
};

/*
 *
 */
exports.addPinnedPage = function(page) {
	return exports.getPinnedPages().then(function(pages) {
		if (!pages.some(function(p, idx) {
			if (p.id === page.id) {
				pages[idx] = page; // Overwrite existing
				return true;
			}
		})) {
			pages.push(page);
		}
		// No return ... then, because can be done async
		_writeSettingsUser();
		return page;
	});
};

/*
 *
 */
exports.isPinnedPage = function(id) {
	return exports.getPinnedPages().then(function(pages) {
		return pages.some(function(p, idx) {
			if (p.id === id) {
				return true;
			}
		});
	});
};

/*
 *
 */
exports.removePinnedPage = function(id) {
	return exports.getPinnedPages().then(function(pages) {
		if (pages.some(function(p, idx) {
			if (p.id === id) {
				pages.splice(idx, 1); // remove and stop
				return true;
			}
		})) {
			// Only write if there was a change
			// No return ... then, because can be done async
			_writeSettingsUser();
		}
	});
};

/*
 * ======================================================
 * Apps hidden on welcome page
 * ======================================================
 */
/*
 *
 */
exports.getHiddenApplications = function() {
	_checkContextUser();
	var read;
	if (_settingsUser == null) {
		read = _readSettingsUser();
	} else {
		read = $.smResolve();
	}
	return read.then(function() {
		_settingsUser.hiddenApplications = _settingsUser.hiddenApplications || [];
		return _settingsUser.hiddenApplications;
	});
};

/*
 *
 */
exports.unhideApplication = function(applicationName) {
	return exports.getHiddenApplications().then(function(apps) {
		if (apps.some(function(app, idx) {
			if (app === applicationName) {
				apps.splice(idx, 1); // remove and stop
				return true;
			}
		})) {
			// Only write if there was a change
			// No return ... then, because can be done async
			_writeSettingsUser();
		}
	});
};

/*
 *
 */
exports.hideApplication = function(applicationName) {
	return exports.getHiddenApplications().then(function(apps) {
		if (!apps.some(function(app, idx) {
			if (app === applicationName) {
				return true;
			}
		})) {
			apps.push(applicationName);
			// No return ... then, because can be done async
			_writeSettingsUser();
		}
	});
};

/*
 * ======================================================
 * Tiles on welcome page
 * ======================================================
 */
exports.getTileConfigs = function() {
	_checkContextUser();
	var read;
	if (_settingsUser == null) {
		read = _readSettingsUser();
	} else {
		read = $.smResolve();
	}
	return read.then(function() {
		_settingsUser.tileConfigs = _settingsUser.tileConfigs || {};
		return _settingsUser.tileConfigs;
	});
};

exports.setTileConfig = function(tile) {
	return exports.getTileConfigs().then(function(configs) {
		configs[tile.tileId] = tile;
		_writeSettingsUser();
	});
};