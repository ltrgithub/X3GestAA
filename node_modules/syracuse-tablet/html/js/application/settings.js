"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var storageModule = require('syracuse-tablet/html/js/storage/storage');
var sdataCommonRes = require('syracuse-tablet/html/js/sdata/sdataCommonResources');

exports.getMyApplications = function() {
	var deferred = $.Deferred();
	var ctx = globals.getCacheCtx();
	var storage = globals.getStorage();
	storage.read({
		$context: ctx,
		$collection: "$settings",
		$key: "MyApps"
	})
		.then(function(result) {
			if (result.$status === storageModule.StatusCodes.OK) {
				deferred.resolve(result.$data);
			} else {
				// no config found
				sdataCommonRes.queryMyApplications()
					.then(function(apps) {
						return _storeMyApplications(apps);
					}, function(e) {
						deferred.reject(e);
					})
					.then(function(apps) {
						deferred.resolve(apps);
					}, function(e) {
						deferred.reject(e);
					});
			}
		}, function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
};

function _storeMyApplications(apps) {
	var deferred = $.Deferred();
	var ctx = globals.getCacheCtx();
	var storage = globals.getStorage();
	storage.put({
		$context: ctx,
		$collection: "$settings",
		$key: "MyApps",
		$data: apps
	})
		.then(function(result) {
			deferred.resolve(apps);
		}, function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
}

exports.getMyApplicationDetail = function(appHeader) {
	var deferred = $.Deferred();
	var ctx = globals.getCacheCtx();
	var storage = globals.getStorage();
	storage.read({
		$context: ctx,
		$collection: "$settings",
		$key: "MyApp_" + appHeader.applicationName
	})
		.then(function(result) {
			if (result.$status === storageModule.StatusCodes.OK) {
				deferred.resolve(result.$data);
			} else {
				// no config found
				sdataCommonRes.queryMyApplicationDetail(appHeader)
					.then(function(apps) {
						return _storeMyApplicationDetail(apps);
					})
					.then(function(apps) {
						deferred.resolve(apps);
					}, function(e) {
						deferred.reject(e);
					});
			}
		}, function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
};

function _storeMyApplicationDetail(app) {
	var deferred = $.Deferred();
	var ctx = globals.getCacheCtx();
	var storage = globals.getStorage();
	storage.put({
		$context: ctx,
		$collection: "$settings",
		$key: "MyApp_" + app.$application.applicationName,
		$data: app
	})
		.then(function(result) {
			deferred.resolve(app);
		}, function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
}