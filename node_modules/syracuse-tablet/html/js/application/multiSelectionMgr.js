"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var dispatcher = require('syracuse-tablet/html/js/sdata/sdataDispatcher');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var modalSyncOffline = require('syracuse-tablet/html/js/ui/modals/modalSyncOffline');

var _linksMenuId = "multiSelMenuLink";
var _actionMenuId = "multiSelMenuActions";
var _selectedClass = "s-m-multi-selected";

var _templates = {
	menuActions: '\
		<div id="{{id}}" class="btn-group s-m-ismultisel">\
			<div class="{{dropDirection}}">\
				<button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-expanded="false">\
					<span class="badge"></span>{{title}}<span class="caret"></span>\
				</button>\
				<ul class="dropdown-menu dropdown-menu-right" role="menu">\
					{{#each links}}\
						<li><a  {{#if style}}style="{{style}}"{{/if}} draggable="false"  data-action="multiSelectionAction" data-params="{{params}}" data-control-id="{{../ctrlId}}" href="#">{{title}}</a></li>\
					{{/each}}\
				</ul>\
			</div>\
		</div>',
	menuLinks: '\
		<div  id="{{id}}" class="btn-group s-m-ismultisel">\
			<div class="{{dropDirection}}">\
				<button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-expanded="false">\
				{{title}}<span class="caret"></span>\
				</button>\
				<ul class="dropdown-menu dropdown-menu-right" role="menu">\
					{{#each links}}\
						<li>\
							<a draggable="false"  href="#" class="{{css}}" data-action="multiSelectionAction" data-params="{{$uuid}}" data-control-id="{{../ctrlId}}">\
								{{title}}\
							</a>\
						</li>\
					{{/each}}\
				</ul>\
			</div>\
		</div>',
	processMenu: '\
		<a draggable="false"  href="#" class="s-m-ismultisel" data-action="multiSelectionAction" data-params="$exitrun" data-control-id="{{ctrlId}}">\
			<i class="{{icon}}"/>\
		</a>'
};
var _actionsList = ["download", "unselectall", "selectall", "invert", "hideunselected", "showunselected"];

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	if (!tmpl) alert(locale.text("multiselect.gethtml.alert", name));
	return tmpl(ctx);
};

/**
 * Manages MultiSelection
 */
var _Klass = utils.defineClass(

	function(controller, cssToToggle) {
		this.controller = controller;
		this.cssToToggle = cssToToggle;
	}, null, {

		destroy: function() {
			this.controller = null;
			this._$$ownerParent = null;
		},
		getLinks: function() {
			return this.controller.getMultiSelectionLinks();
		},

		isEnabled: function() {
			return this._$$ownerParent != null;
		},
		disable: function() {
			if (this.isEnabled()) {
				this._stopMultiSel(this._getArray());
			}
		},
		_getArray: function() {
			var array = this.controller.getControlByBind("$resources");
			if (!array) throw new Error(locale.text("multiselect.getArray.error"));
			return array;
		},

		/**
		 * enable/disable multi-selection
		 * Called from footer or header
		 */
		toggle: function(ctrlOwner, $$parent, dropDirection) {
			var array = this._getArray();
			if (this._$$ownerParent) {
				this._stopMultiSel(array);
			} else {
				this._startMultiSel($$parent, array, dropDirection);
			}
			return this._$$ownerParent != null;
		},
		/**
		 * Called from array
		 */
		callbackArray: function(ctrlArray, params, $target) {
			if (params == "$selectmultisel") {
				this._toggleSelectStatus(ctrlArray, $target.closest(".s-m-record"));
				return;
			}
			if (params == "$showdiagnoses") {
				this._showDiagnoses($target);
				return;
			}
			if (params == "$exitrun") {
				this._processExit(ctrlArray);
				return;
			}
			if (params == "$exitmultisel") {
				this._stopMultiSel(ctrlArray);
				return;
			}
			if (params == "$download") {
				this._startDownloadAction(ctrlArray);
				return;
			}
			if (params == "$unselectall") {
				this._toggleUnselected(ctrlArray, true);
				this._toggleSelectStatus(ctrlArray, this._$$Selected(ctrlArray), false);
				return;
			}
			if (params == "$selectall") {
				this._toggleUnselected(ctrlArray, true);
				this._toggleSelectStatus(ctrlArray, this._$$Unselected(ctrlArray), true);
				this._updateUI(ctrlArray, ctrlArray.getNbRecords());
				return;
			}
			if (params == "$invert") {
				var unSelected = this._$$Unselected(ctrlArray);
				var selected = this._$$Selected(ctrlArray);
				this._toggleSelectStatus(ctrlArray, unSelected, true);
				this._toggleSelectStatus(ctrlArray, selected, false);
				return;
			}
			if (params === "$hideunselected" || params === "$showunselected") {
				this._toggleUnselected(ctrlArray, params === "$showunselected");
				this._$$action("$hideunselected").toggle(params === "$showunselected");
				this._$$action("$showunselected").toggle(params === "$hideunselected");
				this._updateUI(ctrlArray, null);
				return;
			}
			/**
			 * EXECUTE ACTIONS - params is the id of the link
			 */
			if (this.nbSelected > 0) {
				var self = this;
				setTimeout(function() {
					self._processAll(ctrlArray, params);
				});
			}
		},
		_toggleSelectStatus: function(ctrlArray, elmtList, select) {
			var selected = elmtList.toggleClass(_selectedClass, select).hasClass(_selectedClass);
			if (ctrlArray.$display === "card") {
				var $$card = elmtList.find(".s-m-card");
				if (selected) {
					$$card.append('<span class="badge checked fa fa-check">&nbsp;</span>');
				} else {
					$$card.find(".badge.checked").remove();
				}
			}
			this._updateUI(ctrlArray, this._$$Selected(ctrlArray).length);
		},
		/**
		 * Show/Hide buttons in parent's owner (foorter/header...)
		 */
		_toggleOwnerActions: function(show) {
			var selector = "a:not(.s-m-ismultisel)";
			if (this.cssToToggle) {
				selector += ", " + this.cssToToggle;
			}
			this._$$ownerParent.closest(".s-m-control").find(selector).toggle(show);
		},
		_startMultiSel: function($$parent, array, dropDirection) {
			notifications.subscribe(this, ["sm.main.layout.changed"]);
			this._$$ownerParent = $$parent;
			this._$$ownerAction().addClass("enabled");
			array.multiSelSetMgr(this);
			$$parent.prepend(this._$$linksMenuHtml(array, dropDirection));
			$$parent.prepend(this._$$actionMenuHtml(array, dropDirection));
			// Hide all action other than multisel ones
			this._toggleOwnerActions(false);
			// Disable last selected line
			array.selectLastSelectedRow(null);
			// Disable status management if any
			array.toggleColorStatus(true);
			var self = this;
			// setTimeout otherwise $selectall is not shown
			setTimeout(function() {
				self._updateUI(array, 0);
			});
		},
		_stopMultiSel: function(array) {
			notifications.unsubscribe(this, ["sm.main.layout.changed"]);
			if (!this._$$ownerParent) return;
			this._processExit(array);
			array.multiSelSetMgr(null);
			this._toggleSelectStatus(array, this._$$Selected(array), false);
			this._$$menu(_linksMenuId).remove();
			this._$$menu(_actionMenuId).remove();
			this._$$ownerAction().removeClass("enabled");
			// Enable status management if any
			array.toggleColorStatus(false);
			// Show all action other than multisel ones
			this._toggleOwnerActions(true);
			this._$$ownerParent = null;
			this._resizeArray(array);
		},

		_$$linksMenuHtml: function(array, dropDirection) {
			return _getHtml("menuLinks", {
				id: _linksMenuId,
				links: this.getLinks(),
				ctrlId: array.id,
				title: locale.text("actions"),
				dropDirection: dropDirection || "dropdown"
			});
		},

		_$$actionMenuHtml: function(array, dropDirection) {
			var links = [];
			_actionsList.forEach(function(id) {
				links.push({
					title: locale.text("multiselect.action." + id),
					params: "$" + id,
					style: "display:none"
				});
			});
			return _getHtml("menuActions", {
				id: _actionMenuId,
				links: links,
				ctrlId: array.id,
				title: locale.text("multiselect.selected"),
				dropDirection: dropDirection || "dropdown"
			});
		},

		_resizeArray: function(array) {
			/**
			 * To recalculate the scroller beacuse we hide/show cells
			 */
			array.onResize({
				scrollOnly: true
			});
		},
		_getSelectedData: function(array) {
			var selected = this._$$Selected(array);
			var data = [];
			selected.each(function(idx, record) {
				var $$record = $(record);
				// avoid click
				$$record.attr("data-disabled", "true");
				var rowId = $$record.attr("data-params");
				var rowdata = array.getRowById(rowId);
				if (rowdata) {
					data.push({
						rowData: rowdata.row,
						rowId: rowId,
						$$record: $$record,
						idx: idx,
						status: "init"
					});
				}
			});
			return data;
		},
		_processStart: function(array, uuid) {
			var deferred = $.Deferred();
			try {
				array.waitStart();
				this._toggleUnselected(array, false);
				this._$$ownerParent.find(".s-m-ismultisel").hide();
				this._resizeArray(array);
				this._$$ownerParent.prepend(_getHtml("processMenu", {
					title: "Exit",
					ctrlId: array.id,
					icon: fontUtils.getIconByName("$cancelMultiSel")
				}));
				var data = this._getSelectedData(array);
				// reads link info
				var link = null;
				var self = this;
				this.getLinks().some(function(l) {
					if (l.$uuid === uuid) {
						link = l;
						return true;
					}
				});
				deferred.resolve(link, data);
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},
		_processAll: function(array, uuid) {
			var self = this;
			var _data;
			self._processStart(array, uuid).then(function(link, data) {
				_data = data;
				var deferred = $.Deferred();
				var _run = function(idx) {
					if (idx >= data.length) {
						deferred.resolve(link, data);
					} else {
						self._processOne(array, link, data[idx], idx).then(function(ok) {
							_run(idx + 1);
						});
					}
				};
				_run(0);
				return deferred.promise();
			}).then(function(link, data) {
				self._processEnd(data, array);
			}).fail(function(e) {
				globals.getModal().error(locale.text("multiselect.processAll.fail"), e, function() {
					self._processEnd(_data, array);
				});
			});
		},
		_toggleUnselected: function(array, show) {
			this._$$Unselected(array).toggle(show);
			if (array.$display == "card") {
				// Hide empty rows to remove the height of empty tr elements
				array.$$elmt.find("tr").each(function() {
					var e = $(this);
					e.toggle(show ? show : e.find("td").length != e.find("td.s-m-record:not(:visible)").length);
				});
			}
		},
		_processEnd: function(data, array) {
			var res = {
				ok: 0,
				ko: 0,
				init: 0
			};
			data.forEach(function(d) {
				res[d.status]++;
			});
			this._$$ownerParent.prepend('<span class="s-m-multiselmsg">' + res.ok + ' successes - ' + res.ko + ' failures</span>');
			this._resizeArray(array);
			array.waitStop();
		},
		_processExit: function(array) {
			// Clear status
			this._toggleUnselected(array, true);
			this._toggleSelectStatus(array, this._$$Selected(array), false);
			// Clear messages
			this._$$All(array).show().removeClass("error success").removeAttr("data-disabled");
			// Remove buttons in footer/header
			this._$$ownerParent.find('[data-params="$exitrun"], .s-m-multiselmsg').remove();
			this._$$ownerParent.find(".s-m-ismultisel").show();
			// Clear disgnoses attached to error records
			array.$$value.find(".s-m-multisel-diag").smRemoveData('diagnoses').remove();
			this._resizeArray(array);
		},
		_processOne: function(array, link, data, idx) {
			var self = this;
			var deferred = $.Deferred();
			var _end = function(success, result) {
				try {
					var diagsMsg = [],
						diagsErr = [];
					if ($.isPlainObject(result)) {
						var diags = sdataUtils.scanDiagnoses(result);
						if (diags) {
							diags.forEach(function(d) {
								if (d.$severity === "error") {
									diagsErr.push(d);
								} else {
									diagsMsg.push(d);
								}
							});
						}
					}
					success = success && diagsErr.length == 0;
					if (!success) {
						if (jsutils.isError(result)) {
							// console.log(JSON.stringify(result.stack, null, 2));
							data.$diagnoses = [{
								$message: result.message,
								$stackTrace: result.stack
							}];
						} else {
							data.$diagnoses = diagsErr;
						}
					} else {
						data.$diagnoses = diagsMsg;
						// console.log(JSON.stringify(result, null, 2));
					}
				} catch (e) {
					success = false;
					data.$diagnoses = [{
						$message: e.message,
						$stackTrace: e.stack
					}];
				} finally {
					data.status = success ? "ok" : "ko";
					data.$$record.addClass(success ? "success" : "error");
					self._addDiagnoses(array, data);
					deferred.resolve(success);
				}
			};
			try {
				if (link.$url) {
					var sdataUrl = data && data.rowData ? data.rowData.parseExpression(link.$url) : link.sDataUrl;
					var payload = data && data.rowData ? data.rowData.getActionPayload(link) : null;
					dispatcher.dispatch({
						$url: sdataUrl,
						$method: link.$method || "GET"
					}, payload).then(function(data) {
						_end(true, data);
					}).fail(function(e) {
						_end(false, e);
					});
				} else {
					_end(true);
				}
			} catch (e) {
				_end(false, e);
			} finally {
				return deferred.promise();
			}
		},
		_addDiagnoses: function(array, data) {
			var $$root = null,
				colSpan, $$diag, isTable = array.getMode() === "table";
			if (isTable) {
				colSpan = data.$$record.children('td').length;
			} else {
				$$root = $('<section data-action="multiSelectionAction" data-params="$showdiagnoses"/>').addClass("s-m-multisel-diag").prependTo(data.$$record);
				$$root.width(data.$$record.width());
				$$root.smData('diagnoses', data.$diagnoses);
			}
			data.$diagnoses.forEach(function(d, idx) {
				$$diag = $('<div data-idx="' + idx + '" class="alert alert-' + (d.$severity === "error" ? "danger" : "success") + '" role="alert">' + d.$message + '</div>');
				if (isTable) {
					$$root = $('<tr  data-action="multiSelectionAction"  data-params="$showdiagnoses"><td colspan="' + colSpan + '"/></tr>').addClass("s-m-multisel-diag");
					$$root.smData('diagnoses', data.$diagnoses);
					data.$$record.after($$root);
					$$root = $$root.children()[0];
				}
				$$diag.appendTo($$root);
			});
		},
		_showDiagnoses: function($$elmt) {
			$$elmt = $$elmt.closest(".s-m-multisel-diag");
			var diags = $$elmt.smData('diagnoses');
			if (diags == null || diags.length == 0) return;
			globals.getModal().error("", {
				$diagnoses: diags
			});
		},
		_$$ownerAction: function() {
			return this._$$ownerParent.find('[data-action="' + globals.ACTMULTISEL + '"]');
		},
		_$$Unselected: function(array) {
			return array.$$value.find(".s-m-record:not(." + _selectedClass + ")");
		},
		_$$Selected: function(array) {
			return array.$$value.find(".s-m-record." + _selectedClass);
		},
		_$$All: function(array) {
			return array.$$value.find(".s-m-record");
		},
		_$$action: function(id) {
			return this._$$ownerParent.find('[data-params="' + id + '"]');
		},
		_$$menu: function(id) {
			return this._$$ownerParent.find("#" + id);
		},
		_updateUI: function(array, nb) {
			if (!this._$$ownerParent) return;
			if (nb != null) {
				this.nbSelected = Math.max(0, nb);
				this._$$menu(_actionMenuId).find(".badge").text(this.nbSelected);
			}
			var noSel = this.nbSelected == 0;
			var allSel = this.nbSelected === array.getNbRecords();
			this._$$menu(_linksMenuId).find("button").toggleClass("disabled", noSel);
			if (noSel || allSel) {
				this._$$action("$hideunselected").hide();
				this._$$action("$showunselected").hide();
			} else if (this.nbSelected > 0 && !this._$$action("$showunselected").is(":visible")) {
				this._$$action("$hideunselected").show();
			}
			this._$$action("$unselectall").toggle(this.nbSelected > 0);
			this._$$action("$selectall").toggle(true);
			this._$$action("$invert").toggle(this.nbSelected > 0);
			this._$$action("$download").toggle(this.nbSelected > 0);
		},
		notifMainLayoutChanged: function() {
			if (this._$$ownerParent) {
				this._stopMultiSel(this._getArray());
			}
		},
		_startDownloadAction: function(ctrlArray) {
			var self = this;

			var data = self._getSelectedData(ctrlArray);
			var pageProto = ctrlArray.prototype;
			while (pageProto.parent) {
				pageProto = pageProto.parent;
			}
			var syncRootData = {
				pageProto: pageProto,
				rowsData: []
			};
			data.forEach(function(rowData) {
				syncRootData.rowsData.push(rowData);
			});

			var modal = new modalSyncOffline.Modal(syncRootData);
			modal.show().then(function(result) {
				if (result === "done") {
					self._stopMultiSel(ctrlArray);
				}
			});
		}
	});


exports.create = function(controller, cssToToggle) {
	if (!controller.isMultiSelectionEnabled()) return null;
	return new _Klass(controller, cssToToggle);
};