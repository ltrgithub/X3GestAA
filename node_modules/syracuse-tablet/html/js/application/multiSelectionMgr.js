"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/application/actionManager').Klass;
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("actionMgr");
var globals = require('syracuse-tablet/html/js/helpers/globals');

var _linksMenuId = "multiSelMenuLink";
var _actionMenuId = "multiSelMenuActions";

var _templates = {
	menuActions: '<div id="{{id}}" class="btn-group multiselection">\
					<button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-expanded="false">\
						Selected <span class="badge">5</span><span class="caret"></span>\
					</button>\
					<ul class="dropdown-menu" role="menu">\
						{{#each links}}\
							<li><a draggable="false"  data-action="multiSelectionTrigger" data-params="{{params}}" data-control-id="{{../ctrlId}}" href="#">{{title}}</a></li>\
						{{/each}}\
					</ul>\
				</div>',
	menuLinks: '<div  id="{{id}}" class="btn-group  multiselection">\
		<button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-expanded="false">\
			Actions<span class="caret"></span>\
		</button>\
		<ul class="dropdown-menu" role="menu">\
			{{#each links}}\
				<li>\
					<a draggable="false"  href="#" class="{{css}}" data-action="multiSelectionTrigger" data-params="{{$uuid}}" data-control-id="{{../ctrlId}}">\
						{{title}}\
					</a>\
				</li>\
			{{/each}}\
		</ul>\
	</div>'
};
var _selAction = [{
	title: "Unselect all",
	params: "$unselectall"
}, {
	title: "Select all",
	params: "$selectall"
}, {
	title: "Invert selection",
	params: "$invert"
}];


var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	if (!tmpl) alert("multisel template " + name + " not found");
	return tmpl(ctx);
};

var _getLinks = function(controller) {
	var links = [];
	var proto = controller.prototype;
	var dao = controller.dao;
	var $links = $.extend(true, {}, proto.data("$links", null, true), dao.getValue("$links"));
	if ($links && !$.isEmptyObject($links)) {
		$.each($links, function(name, value) {
			if (value == null || value.$isExcluded === true || name.smStartsWith('$')) {
				return;
			}
			if (value.$url && value.$url.length > 0) {
				var info;
				var link = sdataUtils.getLinkInfo(value.$url, dao);
				info = $.extend(link, value);
				if (info.$services) {
					info.$isAction = true;
				}
				info.$uuid = value.$uuid || utils.UUID();
				info.name = name;
				info.title = proto.resolveExpression(value.$title);
				info.icon = "";
				links.push(info);
			}
		});
	}
	return links;
};
/**
 * Manages MultiSelection
 */
var _Klass = utils.defineClass(

	function(controlOwner, opts) {
		this.controlOwner = controlOwner;
		Base.call(this, controlOwner.controller, opts);
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
			this.controlOwner = null;
		},

		updateLinks: function(links) {
			if (links) {
				this.links = links;
				return;
			}
			this.links = _getLinks(this.controller);
		},

		_getArray: function() {
			var array = this.controller.getControlByBind("$resources");
			if (!array) throw new Error("Array $resources not found");
			return array;
		},

		/**
		 * enable/disable multi-selection
		 */
		toggle: function($$target, $$parent) {
			var array = this._getArray();
			if (this.isEnabled === true) {
				array.multiSelSetMgr(null);
				array.$$value.find(".s-m-record.s-m-multi-selected").removeClass("s-m-multi-selected");
				if ($$parent) {
					$$parent.find("#" + _linksMenuId).remove();
					$$parent.find("#" + _actionMenuId).remove();
				}
			} else {
				array.multiSelSetMgr(this);
				if ($$parent) {
					$$parent.prepend(this.getLinksMenu());
					$$parent.prepend(this.getActionMenu());
				}
				this.updateCounter(0);
			}
			this.isEnabled = this.isEnabled != true;
			$$target.toggleClass("enabled");
			return this.isEnabled;
		},

		multiSelCallBack: function(event, ctrlArray, action) {
			if (event) {
				event.stopPropagation();
				event.preventDefault();
				var record = $(event.currentTarget);
				record.toggleClass("s-m-multi-selected");
				if (record.hasClass("s-m-multi-selected")) {
					this.updateCounter(this.nbSelected + 1);
				} else {
					this.updateCounter(this.nbSelected - 1);
				}
				return;
			}
			if (action) {
				this.triggerAction(action);
			}
		},

		getLinksMenu: function() {
			return _getHtml("menuLinks", {
				id: _linksMenuId,
				links: this.links,
				ctrlId: this._getArray().id
			});
		},

		getActionMenu: function() {
			return _getHtml("menuActions", {
				id: _actionMenuId,
				links: _selAction,
				ctrlId: this._getArray().id
			});
		},

		triggerAction: function(uuid) {
			var array = this._getArray();
			array.$$value.find(".s-m-record").show();
			if (uuid == "$unselectall") {
				array.$$value.find(".s-m-record.s-m-multi-selected").removeClass("s-m-multi-selected");
				this.updateCounter(0);
				return;
			}
			if (uuid == "$selectall") {
				var col = array.$$value.find(".s-m-record");
				col.addClass("s-m-multi-selected");
				this.updateCounter(col.length);
				return;
			}
			if (uuid == "$invert") {
				var unSelected = array.$$value.find(".s-m-record:not(.s-m-multi-selected)");
				var selected = array.$$value.find(".s-m-record.s-m-multi-selected");
				selected.removeClass("s-m-multi-selected");
				unSelected.addClass("s-m-multi-selected");
				this.updateCounter(selected.length);
				return;
			}
			if (this.nbSelected > 0) {
				array.$$value.find(".s-m-record:not(.s-m-multi-selected)").hide();
			}
		},
		updateCounter: function(nb) {
			this.nbSelected = Math.max(0, nb);
			if (this.controlOwner.$$elmt) {
				this.controlOwner.$$elmt.find("#" + _linksMenuId).children("button").toggleClass("disabled", this.nbSelected <= 0);
			}
		}

	});

exports.create = function(controlOwner, opts) {
	var controller = controlOwner.controller;
	if (!controller.prototype.isQuery()) return null;
	var links = _getLinks(controller);
	if (links.length === 0) return null;
	var mgr = new _Klass(controlOwner, opts || {});
	mgr.updateLinks(links);
	return mgr;
};