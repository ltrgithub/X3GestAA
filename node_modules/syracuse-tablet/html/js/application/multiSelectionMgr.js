"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/application/actionManager').Klass;
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("actionMgr");
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _linksMenuId = "multiSelMenuLink";
var _actionMenuId = "multiSelMenuActions";
var _multiSelAction = "multiSelection";

var _templates = {
	menuActions: '<div id="{{id}}" class="btn-group s-m-ismultisel">\
					<button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-expanded="false">\
						Selected <span class="badge">5</span><span class="caret"></span>\
					</button>\
					<ul class="dropdown-menu" role="menu">\
						{{#each links}}\
							<li><a  {{#if style}}style="{{style}}"{{/if}} draggable="false"  data-action="multiSelectionTrigger" data-params="{{params}}" data-control-id="{{../ctrlId}}" href="#">{{title}}</a></li>\
						{{/each}}\
					</ul>\
				</div>',
	menuLinks: '<div  id="{{id}}" class="btn-group s-m-ismultisel">\
		<button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-expanded="false">\
			Actions<span class="caret"></span>\
		</button>\
		<ul class="dropdown-menu" role="menu">\
			{{#each links}}\
				<li>\
					<a draggable="false"  href="#" class="{{css}}" data-action="multiSelectionTrigger" data-params="{{$uuid}}" data-control-id="{{../ctrlId}}">\
						{{title}}\
					</a>\
				</li>\
			{{/each}}\
		</ul>\
	</div>'
};
var _selAction = [{
	title: "Unselect all",
	params: "$unselectall",
	style: "display:none"
}, {
	title: "Select all",
	params: "$selectall"
}, {
	title: "Invert selection",
	params: "$invert",
	style: "display:none"
}, {
	title: "Hide unselected",
	params: "$hideunselected",
	style: "display:none"
}, {
	title: "Show unselected",
	params: "$showunselected",
	style: "display:none"
}];


var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	if (!tmpl) alert("multisel template " + name + " not found");
	return tmpl(ctx);
};

var _getLinks = function(controller) {
	var links = [];
	var proto = controller.prototype;
	var dao = controller.dao;
	var $links = $.extend(true, {}, proto.data("$links", null, true), dao.getValue("$links"));
	if ($links && !$.isEmptyObject($links)) {
		$.each($links, function(name, value) {
			if (value == null || value.$isExcluded === true || name.smStartsWith('$')) {
				return;
			}
			if (value.$url && value.$url.length > 0) {
				var info;
				var link = sdataUtils.getLinkInfo(value.$url, dao);
				info = $.extend(link, value);
				if (info.$services) {
					info.$isAction = true;
				}
				info.$uuid = value.$uuid || utils.UUID();
				info.name = name;
				info.title = proto.resolveExpression(value.$title);
				info.icon = "";
				info.css = "s-m-ismultisel";
				links.push(info);
			}
		});
	}
	return links;
};
/**
 * Manages MultiSelection
 */
var _Klass = utils.defineClass(

	function(controller, opts) {
		Base.call(this, controller, opts);
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
			this._$$ownerParent = null;
		},

		isEnabled: function() {
			return this._$$ownerParent != null;
		},

		updateLinks: function(links) {
			if (links) {
				this.links = links;
				return;
			}
			this.links = _getLinks(this.controller);
		},

		_getArray: function() {
			var array = this.controller.getControlByBind("$resources");
			if (!array) throw new Error("Array $resources not found");
			return array;
		},

		/**
		 * enable/disable multi-selection
		 * Called from footer or header
		 */
		toggle: function($$parent) {
			var array = this._getArray();
			if (this._$$ownerParent) {
				this._stopMultiSel(array);
			} else {
				this._startMultiSel($$parent, array);
			}
			return this._$$ownerParent != null;
		},
		_startMultiSel: function($$parent, array) {
			this._$$ownerParent = $$parent;
			array.multiSelSetMgr(this);
			$$parent.prepend(this._$$linksMenuHtml());
			$$parent.prepend(this._$$actionMenuHtml());
			this._updateUI(array, 0);
			this._$$ownerAction().addClass("enabled");
		},
		_stopMultiSel: function(array) {
			if (!this._$$ownerParent) return;
			array.multiSelSetMgr(null);
			this._$$Selected(array).removeClass("s-m-multi-selected");
			this._$$menu(_linksMenuId).remove();
			this._$$menu(_actionMenuId).remove();
			this._$$ownerAction().removeClass("enabled");
			this._$$ownerParent = null;
		},
		/**
		 * event != null -> jquery event listener (click)
		 * evant == null -> ctrlArray event - dataAction
		 * Called from array
		 */
		multiSelCallBack: function(event, ctrlArray, action, $target) {
			if (event) {
				event.stopPropagation();
				event.preventDefault();
				var record = $(event.currentTarget);
				record.toggleClass("s-m-multi-selected");
				if (record.hasClass("s-m-multi-selected")) {
					this._updateUI(ctrlArray, this.nbSelected + 1);
				} else {
					this._updateUI(ctrlArray, this.nbSelected - 1);
				}
				return;
			}
			if (action) {
				this.triggerAction(ctrlArray, action, $target);
			}
		},

		_$$linksMenuHtml: function() {
			return _getHtml("menuLinks", {
				id: _linksMenuId,
				links: this.links,
				ctrlId: this._getArray().id
			});
		},

		_$$actionMenuHtml: function() {
			return _getHtml("menuActions", {
				id: _actionMenuId,
				links: _selAction,
				ctrlId: this._getArray().id
			});
		},

		triggerAction: function(array, uuid, $target) {
			if (uuid == "$stopmultisel") {
				// Notify controlOwner
				notifications.publish("sm.multiSelection", "stop");
				return;
			}
			var all = this._$$All(array).show();
			if (uuid == "$unselectall") {
				this._$$Selected(array).removeClass("s-m-multi-selected");
				this._updateUI(array, 0);
				return;
			}
			if (uuid == "$selectall") {
				all.addClass("s-m-multi-selected");
				this._updateUI(array, all.length);
				return;
			}
			if (uuid == "$invert") {
				var unSelected = this._$$Unselected(array);
				var selected = this._$$Selected(array);
				selected.removeClass("s-m-multi-selected");
				unSelected.addClass("s-m-multi-selected");
				this._updateUI(array, selected.length);
				return;
			}
			if (uuid === "$hideunselected" || uuid === "$showunselected") {
				this._$$Unselected(array).toggle(uuid === "$showunselected");
				this._$$action("$hideunselected").toggle(uuid === "$showunselected");
				this._$$action("$showunselected").toggle(uuid === "$hideunselected");
				this._updateUI(array, null);
				return;
			}
			if (this.nbSelected > 0) {
				this._$$Unselected(array).hide();
			}
			/**
			 * To recalculate the scroller
			 */
			if (array && array.isMode("$cardH")) {
				array.onResize();
			}
		},
		_$$ownerAction: function() {
			return this._$$ownerParent.find('[data-action="' + _multiSelAction + '"]');
		},
		_$$Unselected: function(array) {
			return array.$$value.find(".s-m-record:not(.s-m-multi-selected)");
		},
		_$$Selected: function(array) {
			return array.$$value.find(".s-m-record.s-m-multi-selected");
		},
		_$$All: function(array) {
			return array.$$value.find(".s-m-record");
		},
		_$$action: function(id) {
			return this._$$ownerParent.find('[data-params="' + id + '"]');
		},
		_$$menu: function(id) {
			return this._$$ownerParent.find("#" + id);
		},
		_updateUI: function(array, nb) {
			if (!this._$$ownerParent) return;
			if (nb != null) {
				this.nbSelected = Math.max(0, nb);
				this._$$menu(_actionMenuId).find(".badge").text(this.nbSelected);
			}
			var noSel = this.nbSelected == 0;
			var allSel = this.nbSelected === array.getNbRecords();
			this._$$menu(_linksMenuId).children("button").toggleClass("disabled", noSel);
			if (noSel || allSel) {
				this._$$action("$hideunselected").hide();
				this._$$action("$showunselected").hide();
			} else if (this.nbSelected > 0 && !this._$$action("$showunselected").is(":visible")) {

				this._$$action("$hideunselected").show();
			}
			this._$$action("$unselectall").toggle(this.nbSelected > 0);
			this._$$action("$selectall").toggle(!allSel);
			this._$$action("$invert").toggle(this.nbSelected > 0);
		}
	});

exports.actionId = _multiSelAction;
exports.create = function(controller, opts) {
	if (!controller.prototype.isQuery()) return null;
	var links = _getLinks(controller);
	if (links.length === 0) return null;
	var mgr = new _Klass(controller, opts || {});
	mgr.updateLinks(links);
	return mgr;
};