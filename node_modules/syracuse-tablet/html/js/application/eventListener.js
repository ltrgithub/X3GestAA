"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("evts");
var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var modal = require('syracuse-tablet/html/js/ui/modal');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var siteLayout = require('syracuse-tablet/html/js/helpers/siteLayout');

/**
 * Returns id of parent array
 */
var _findParentCtrlId = function($$target, selector) {
	// Find a control array with an ID
	var p = $$target.closest(".s-m-control" + (selector || "") + "[id]");
	return p.length > 0 ? _attr(p, "id") : null;
};
/**
 * Returns attribute, decode and parse if it's a json
 */
var _attr = function($$e, name, nullIfEmpty, decode) {
	var a = ($$e.attr(name) || "").trim();
	if (decode === true) {
		a = decodeURIComponent(a);
		if (a.smStartsWith('{') && a.smEndsWith('}')) {
			// We allow serialized JSON objects in attributes
			try {
				var json = JSON.parse(a);
				return json;
			} catch (e) {
				log.console("Error reading JSON attribute " + name + "\n\t" + a);
			}
		}
	}
	return nullIfEmpty && a.length === 0 ? null : a;
};
/**
 * Parse code=abc&value=cde to
 * {
 * code: "abc",
 * value: "cde"
 * }
 */
var _parseParameters = function(params) {
	var p = params.split("&");
	var res = {};
	for (var i = 0; i < p.length; i++) {
		var v = p[i].split("=");
		res[v[0]] = v[1];
	}
	return res;
};
/**
 * Calls an action given by data-action
 * params a string or a JSON object
 * if parans is a string and contains ',' separator params is split the callBack is called with as many parameters as split elements
 */
var _doAction = function($$target, act, params, controlId) {
	var app = globals.getApplication();
	var fail = function(e) {
		var title = "_doAction[" + act + "]" + (controlId ? " CtrlId[" + controlId + "]" : "") + " error";
		log && log(title, e);
		modal.error(title, e);
	};
	try {
		if (app.currentPage == null) throw new Error("No current page");
		var method = "_act" + $.camelCase("-" + act);
		var object;
		if (!controlId) {
			// look for the first parent array if any
			// data-action in a row should invoke the method on array control
			controlId = _findParentCtrlId($$target, ".s-m-array");
		}
		if (controlId) {
			// Find control in current page and vignettes if dashboard
			object = app.currentPage.getControl(controlId);
			if (object == null && app.currentPage.isDashboard()) {
				object = utils.findCtrlInDashboard($$target, controlId);
				if (object) object = object.control;
			}
			if (object == null) throw new Error("Control not found");
		} else {

			// Find if it's an action off a vignette (contains a page)
			var vignette = utils.findParentVignette($$target, false);
			if (vignette) {
				if (vignette[method]) {
					object = vignette;
				} else {
					var p = vignette.getPage();
					if (p && p[method]) object = p;
				}
			}
			// Find if it's a current page action
			if (object == null && app.currentPage[method]) object = app.currentPage;
			// Find if it's a global action
			if (object == null) object = app;
		}
		if (!object[method]) throw new Error("Method [" + method + "] not found in object/application/current page)");
		var args = [];
		if (params && typeof params === "string") {
			// Create a array of parameters ( ','  as separator
			// Remove leading/trailing spaces
			params = params.split(',');
			params.forEach(function(p, idx) {
				args.push(p.trim());
			});
		} else {
			args.push(params);
		}
		$.when(object[method].apply(object, args)).then(function(todo) {
			if (todo) {
				if (todo.page) {
					globals.getApplication().changePage(todo.page);
				}
			}
		}).fail(function(e) {
			fail(e);
		});
	} catch (e) {
		fail(e);
	}
};
/** NAVIGATION 
 * clickedElmt:	jQuery element or JSON object that provides attr() method
 * app			global application
 * $$target		$$target event for click in page
 * 				Element from which we searcg for the vignette if any
 */
var _doNavigation = function(clickedElmt, $$target) {
	var app = globals.getApplication();
	var options = {}, attr;
	// Page to open
	attr = _attr(clickedElmt, "data-sdata-url");
	if (attr.length > 0) {
		options["sdata-url"] = decodeURIComponent(attr);
	}
	attr = _attr(clickedElmt, "data-sdata-method");
	if (attr.length > 0) {
		options["sdata-method"] = decodeURIComponent(attr);
	}
	// Link type : pagination...
	attr = _attr(clickedElmt, "data-nav-type");
	if (attr.length > 0) {
		options["type"] = attr;
	}
	// Id of parent page
	attr = _attr(clickedElmt, "data-parent-id");
	if (attr.length > 0) {
		options["parentId"] = attr;
	}
	// Control that rated the link - used by refresh and action on child pages like lookup
	attr = _attr(clickedElmt, "data-control-id");
	if (attr.length > 0) {
		options["controlId"] = attr;
	}
	// Parameters are passed in page options - data navigation accepts Stringify JSON
	attr = _attr(clickedElmt, "data-params", false, true);
	// If attribute starts with { and ends with } it is parsed
	options["dataParams"] = attr || "";
	// Target - vignette -> Change/Refresh the page in the vignette - null or "application" Change/Refresh  application currentpage
	attr = _attr(clickedElmt, "data-nav-target");
	var navTarget;
	if ($$target) {
		if (attr === "vignette") {
			// data-nav-target allows to specify the target for navigation link - Ex pagination
			navTarget = utils.findParentVignette($$target, true);
		} else if (attr !== "application" && app.$config("openLinkInVignette")) {
			// Navigation in vignette - Just a  try but it works - Vignette display back/home icon in icon bar
			navTarget = utils.findParentVignette($$target, false);
		}

	}
	// default navigation is done at application level
	if (!navTarget) navTarget = app;
	// Page refresh instead of opening a new page	
	if (_attr(clickedElmt, "data-nav-refresh") === "true") {
		// For build Html
		options.refresh = true;
		// options.controlId points Control to refresh if any
		navTarget.refreshPage(options);
	} else if (attr = _attr(clickedElmt, "data-application-name")) {
		notifications.publish("sm.switch.app", attr);
	} else {
		/** Open a new page**/
		var pageName = decodeURIComponent(_attr(clickedElmt, "data-nav"));
		// Gadget - Page opener
		attr = _attr(clickedElmt, "data-gadget-id");
		if (attr.length > 0) {
			options["gadget-id"] = attr;
		}

		attr = _attr(clickedElmt, "data-sdata-parameters");
		if (attr && attr.length > 0) {
			options["sdataParameters"] = _parseParameters(attr);
		}
		// history.back not allowed - TODO See how to pass options	JSON in params ?	
		attr = _attr(clickedElmt, "data-nav-noback");
		options["noHistoryBack"] = attr === "true";
		navTarget.changePage(pageName, options);
	}
	return;
};
/** 
 * Bind actions declared by data-nav or data-action/data-params attributes to an object
 *      for navigation data-nav  contains the name of the targeted page
 * 		for action method name is : _actActionName with ActionName the name of action declared in data-action attribute
 * object	: object that processes the actions
 * 				Check current page and application if method not found in object
 * 				if data-control-id attribute call control's action on current page
 * $$elmt 	: optional if object.$$elmt - element to bind event
 * selector : optional
 * 		Default selector is "[data-nav], [data-action]"
 */
var _bindActions = function(app) {
	var fail = function(e) {
		var title = "_bindActions error";
		log && log(title, e);
		modal.error(title, e);
	};
	// Action are bound to application $$elmt and dispatcched to current page or control
	var $$elmt = app.$$elmt;
	if (!$$elmt) throw new Error("_bindActions - null $$elmt");
	// Selector for not empty attribute -> [data-action][data-action!=""]
	$$elmt.on("click select change", "[data-nav], [data-nav-refresh], [data-action], [data-params] ", function(evt) {
		try {
			if (app.hasModalOpen()) {
				// If we have a modal in front of a page with a default button and if we press enter to close the dialog we trigger default action of the page
				// This test block the action - TODO improve
				log && log("!!! Tries to execute an action data-action with a MODAL open.\nAction is skipped");
				return;
			}
			var $$target = $(evt.target);
			evt.preventDefault();
			evt.stopPropagation();
			var $$actionElmt = $$target.closest("[data-nav], [data-nav-refresh]");
			if ($$actionElmt.length > 0) {
				_doNavigation($$actionElmt, $$target);
				return;
			}
			$$actionElmt = $$target.closest("[data-action]");
			if ($$actionElmt.length > 0) {
				/** ACTION **/
				evt.preventDefault();
				evt.stopPropagation();
				var param;
				if ($$actionElmt.is("select")) {
					param = $(this).val();
				} else {
					// data action parameters
					// if attr starts with { and ends with } it is parsed
					// if there's a ',' separator parameters are splited and become action arguments
					param = _attr($$actionElmt, "data-params", false, true);
				}
				var controlId = _attr($$actionElmt, "data-control-id", true);
				_doAction($$target, _attr($$actionElmt, "data-action"), param, controlId);
				return;
			}
		} catch (e) {
			fail(e);
		}
	});
};

/**
 * Add event handlers for controls
 * 		put a ctrl-evt- + evtName in the class attribute of the dom element you want to enable
 * 		handler will call ctrl.onEventName (onClick, onBlur...)
 */
var _bindControlEvents = function(app) {
	var fail = function(e) {
		var title = "_bindControlEvents error";
		log && log(title, e);
		modal.error(title, e);
	};
	var events = ["click", "blur", "change"];
	// Use forEach instead of for(var i =...) to preserve evtname closure context otherwise evtname has always the last value
	events.forEach(function(evtname) {
		app.$$elmt.on(evtname, ".ctrl-evt-" + evtname, function(event) {
			event.preventDefault();
			event.stopPropagation();
			try {
				var $$target = $(event.target);
				var ctrlId;
				if ($$target.hasClass("s-m-control")) {
					ctrlId = _attr($$target, "id");
				} else {
					// We can force control-id if it's not a parent of $$target
					ctrlId = _attr($$target, "data-control-id", true);
					if (!ctrlId) {
						// We search for the first control parent with an ID
						// Controls in arrays don't have an id - So click on a card/row will return the array control
						ctrlId = _findParentCtrlId($$target);
					}
				}
				if (!app.currentPage) throw new Error("No current page");
				var ctrl = app.currentPage.getControl(ctrlId);
				if (!ctrl && app.currentPage.isDashboard()) {
					ctrl = utils.findCtrlInDashboard($$target, ctrlId);
					if (ctrl) ctrl = ctrl.control;
				}
				if (!ctrl) throw new Error("Control not found - ctrlid[" + ctrlId + "] in currentpage or vignettes");
				var method = "on" + evtname.smCapitalize();
				if (!ctrl[method]) {
					log && log("!!! Method[" + method + "] not found - ctrlid[" + ctrlId + "]");
					return;
				}
				ctrl[method](event);
			} catch (e) {
				fail(e);
			}
			return;
		});
	});
};

/**
 * Application event listener
 */
var _bindEvents = function(app) {

	$(window).bind("popstate", function(event) {
		var state = event.originalEvent.state;
		// We've to check state to not call historyPop on click on href="#"
		if (state) app.historyPop(event);
	});

	// Bind action/navigation call to click/select/change 
	_bindActions(app);

	// Bind control events
	_bindControlEvents(app);

	// triggered by browser window size or orientation change
	$(window).on("resize", function() {
		siteLayout.updateLayout(app);
	});
	// triggered by application JS code
	$(window).on("resizeInternal", function() {
		siteLayout.updateLayoutInternal(app);
	});
};
/**
 * Trigger an action
 * 		$$elmt: JQL element - $$elmt of a control or page by example
 */
var _triggerAction = function($$elmt, act, params, controlId) {
	if (!$$elmt) return;
	_doAction($$elmt, act, params, controlId);
};
/**
 * Triggers a navigation (open link) according to attributes params
 * $$elmt			JQ element to search for parent vignette  if any
 * attributes		SAme attributes as $$element
 */
var _triggerNavigation = function($$elmt, attributes) {
	// Simulate a Jquery object that provides attr() method
	var attrs = function(jsonAttrs) {
		var _jsonAttrs = jsonAttrs;
		this.attr = function(name) {
			return _jsonAttrs[name];
		};
	};
	_doNavigation(new attrs(attributes), $$elmt);
};

exports.bindEvents = _bindEvents;
exports.triggerAction = _triggerAction;
exports.triggerNavigation = _triggerNavigation;