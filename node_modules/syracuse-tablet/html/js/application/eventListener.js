"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("evts");
var globals = require('syracuse-tablet/html/js/helpers/globals');
var modal = require('syracuse-tablet/html/js/ui/modal');

var _attr = function($$e, name) {
	return ($$e.attr(name) || "").trim();
};
/**
 * Only if current pages  is a dashboard
 * return the parent vignette or null
 * we assume that there are no dashboard in vignettes
 */
var _findParentVignette = function($$target, app, fail) {
	// Find vignette controlId + get vignette control
	var vignetteId = _attr($$target.closest(".s-m-control.s-m-vignette-ctrl"), "id");
	if (fail && vignetteId.length === 0) throw new Error("Vignette DOM elmt not found");
	var vignette = app.currentPage.getControl(vignetteId);
	if (fail && !vignette) throw new Error("Vignette not found - id[" + vignetteId + "]");
	return vignette;
};
/**
 * Returns null or {vignette, control} if ctrlId has been found in a vignette
 */
var _findCtrlInDashboard = function($$target, app, ctrlId) {
	//Two ways - tested - second should be more efficient but both take few ms
	if (false) {
		// Scan all vignettes and seach control (ctrlId is unic)
		return app.currentPage.findVignetteControl(ctrlId);
	} else {
		// Find vignette controlId + get vignette control + get control from vignette's page
		var vignette = _findParentVignette($$target, app, true);
		var control = vignette.getPageControl(ctrlId);
		return control ? {
			control: control,
			vignette: vignette
		} : null;
	}
};
/**
 * Calls an action given by data-action
 */
var _doAction = function(evt, app, act, params, controlId) {
	var fail = function(e) {
		var title = "_doAction[" + act + "]" + (controlId ? " CtrlId[" + controlId + "]" : "") + " error";
		log && log(title, e);
		modal.error(title, e);
	};
	try {
		if (app.currentPage == null) throw new Error("No current page");
		var method = "_act" + $.camelCase("-" + act);
		var object;
		if (controlId.length > 0) {
			// Find control in current page and vignettes if dashboard
			object = app.currentPage.getControl(controlId);
			if (object == null && app.currentPage.getType() === "dashboard") {
				object = _findCtrlInDashboard($(evt.target), app, ctrlId);
				if (object) object = object.control;
			}
			if (object == null) throw new Error("Control not found");
		} else {
			if (app.currentPage.getType() === "dashboard") {
				// Find if it's an action off a vignette (contains a page)
				var vignette = _findParentVignette($(evt.target), app, false);
				if (vignette) {
					if (vignette[method]) {
						object = vignette;
					} else {
						var p = vignette.getPage();
						if (p && p[method]) object = p;
					}
				}
			}
			// Find if it's a current page action
			if (object == null && app.currentPage[method]) object = app.currentPage;
			// Find if it's a global action
			if (object == null) object = app;
		}
		if (!object[method]) throw new Error("Method [" + method + "] not found in object/application/current page)");
		$.when(object[method].call(object, params)).then(function(todo) {
			if (todo) {
				if (todo.page) {
					globals.getApplication().changePage(todo.page);
				}
			}
		}, function(e) {
			fail(e);
		});
	} catch (e) {
		fail(e);
	}
};
/** 
 * Bind actions declared by data-nav or data-action/data-params attributes to an object
 *      for navigation data-nav  contains the name of the targeted page
 * 		for action method name is : _actActionName with ActionName the name of action declared in data-action attribute
 * object	: object that processes the actions
 * 				Check current page and application if method not found in object
 * 				if data-control-id attribute call control's action on current page
 * $$elmt 	: optional if object.$$elmt - element to bind event
 * selector : optional
 * 		Default selector is "[data-nav], [data-action]"
 */
var _bindActions = function(app) {
	var fail = function(e) {
		var title = "_bindActions error";
		log && log(title, e);
		modal.error(title, e);
	};
	// Action are bound to application $$elmt and dispatcched to current page or control
	var $$elmt = app.$$elmt;
	if (!$$elmt) throw new Error("_bindActions - null $$elmt");
	$$elmt.delegate("[data-nav], [data-action]", "click select change", function(evt) {
		try {
			var target = $(evt.target);
			var clickedElmt = target.closest("[data-nav]");
			if (clickedElmt.length > 0) {
				// NAVIGATION
				evt.preventDefault();
				evt.stopPropagation();
				var pageName = decodeURIComponent(_attr(clickedElmt, "data-nav"));
				var options = {};
				// Page to open
				var sDataUrl = _attr(clickedElmt, "data-sdata-url");
				if (sDataUrl.length > 0) {
					options["sdata-url"] = decodeURIComponent(sDataUrl);
				}
				// Gadget - Page opener
				var gadgetId = _attr(clickedElmt, "data-gadget-id");
				if (gadgetId.length > 0) {
					options["gadget-id"] = gadgetId;
				}
				// history.back not allowed - TODO See how to pass options	JSON in params ?	
				var attrNoBack = _attr(clickedElmt, "data-nav-noback");
				options["noHistoryBack"] = attrNoBack && attrNoBack === "true";
				// Target - vignette -> Open the page in the vignette
				var attrTarget = _attr(clickedElmt, "data-nav-target");
				var navTarget;
				if (attrTarget === "vignette") {
					// data-nav-target allows to specify the target for navigation link - Ex pagination
					navTarget = _findParentVignette(target, app, true);
				} else if (attrTarget !== "application" && app.$config("openLinkInVignette")) {
					// Navigation in vignette - Just a  try but it works - Vignette display back/home icon in icon bar
					navTarget = _findParentVignette(target, app, false);
				}
				// default navigation is done at application level
				if (!navTarget) navTarget = app;
				navTarget.changePage(pageName, options);
				return;
			}
			var clickedElmt = target.closest("[data-action]");
			if (clickedElmt.length > 0) {
				// ACTION
				evt.preventDefault();
				evt.stopPropagation();
				var param;
				if (clickedElmt.is("select")) {
					param = $(this).val();
				} else {
					param = decodeURIComponent(_attr(clickedElmt, "data-params"));
				}
				var controlId = _attr(clickedElmt, "data-control-id");
				_doAction(evt, app, _attr(clickedElmt, "data-action"), param, controlId);
				return;
			}
		} catch (e) {
			fail(e);
		}
	});
};

/**
 * Add event handlers for controls
 * 		put a ctrl-evt- + evtName in the class attribute of the dom element you want to enable
 * 		handler will call ctrl.onEventName (onClick, onBlur...)
 */
var _bindControlEvents = function(app) {
	var fail = function(e) {
		var title = "_bindControlEvents error";
		log && log(title, e);
		modal.error(title, e);
	};
	var events = ["click", "blur"];
	// Use forEach instead of for(var i =...) to preserve evtname closure context otherwise evtname has always the last value
	events.forEach(function(evtname) {
		app.$$elmt.delegate(".ctrl-evt-" + evtname, evtname, function(event) {
			event.preventDefault();
			event.stopPropagation();
			try {
				var target = $(event.target);
				var ctrlId = _attr(target.hasClass("s-m-control") ? target : target.closest(".s-m-control"), "id");
				if (!app.currentPage) throw new Error("No current page");
				var ctrl = app.currentPage.getControl(ctrlId);
				if (!ctrl && app.currentPage.getType() === "dashboard") {
					ctrl = _findCtrlInDashboard(target, app, ctrlId);
					if (ctrl) ctrl = ctrl.control;
				}
				if (!ctrl) throw new Error("Control not found - ctrlid[" + ctrlId + "] in currentpage or vignettes");
				var method = "on" + evtname.smCapitalize();
				if (!ctrl[method]) {
					console.log("Method[" + method + "] not found - ctrlid[" + ctrlId + "]");
					return;
				}
				ctrl[method](event);
			} catch (e) {
				fail(e);
			}
			return;
		});
	});
};

/**
 * Application event listener
 */

var _bindEvents = function(app) {

	$(window).bind("popstate", function(event) {
		event.preventDefault();
		var state = event.originalEvent.state;
		log && log("popstate", "history.length=" + window.history.length, "State=" + (state != null));
		if (!state) return;
		setTimeout(function() {
			app.back(state);
		}, 0);
	});

	$(window).bind("hashchange", function() {
		log && log("hashchange", "history.length=" + window.history.length, "Hash=" + window.location.hash);
	});

	// Bind action/navigation call to click/select/change 
	_bindActions(app);

	// Bind control events
	_bindControlEvents(app);

};

exports.bindEvents = _bindEvents;