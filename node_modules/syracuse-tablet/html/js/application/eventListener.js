"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("evts");
var globals = require('syracuse-tablet/html/js/helpers/globals');
var modal = require('syracuse-tablet/html/js/ui/modal');

/**
 * Calls an action given by data-action
 */
var _doAction = function(app, act, params, controlId) {
	var fail = function(e) {
		var title = "_doAction[" + act + "]" + (controlId ? " CtrlId[" + controlId + "]" : "") + " error";
		log && log(title, e);
		modal.error(title, e);
	};
	try {
		if (app.currentPage == null) throw new Error("No current page");
		var method = "_act" + $.camelCase("-" + act);
		var object;
		if (controlId.length > 0) {
			object = app.currentPage.getControl(controlId);
			if (object == null) throw new Error("Control not found");
		} else {
			object = app.currentPage[method] ? app.currentPage : app;
		}
		if (!object[method]) throw new Error("Method [" + method + "] not found in object/application/current page)");
		$.when(object[method].call(object, params)).then(function(todo) {
			if (todo) {
				if (todo.page) {
					globals.getApplication().changePage(todo.page);
				}
			}
		}, function(e) {
			fail(e);
		});
	} catch (e) {
		fail();
	}
};
/** 
 * Bind actions declared by data-nav or data-action/data-params attributes to an object
 *      for navigation data-nav  contains the name of the targeted page
 * 		for action method name is : _actActionName with ActionName the name of action declared in data-action attribute
 * object	: object that processes the actions
 * 				Check current page and application if method not found in object
 * 				if data-control-id attribute call control's action on current page
 * $$elmt 	: optional if object.$$elmt - element to bind event
 * selector : optional
 * 		Default selector is "[data-nav], [data-action]"
 */
var _bindActions = function(app) {
	var fail = function(e) {
		var title = "_bindActions error";
		log && log(title, e);
		modal.error(title, e);
	};
	// Action are bound to application $$elmt and dispatcched to current page or control
	var $$elmt = app.$$elmt;
	if (!$$elmt) throw new Error("_bindActions - null $$elmt");
	$$elmt.delegate("[data-nav], [data-action]", "click select change", function(evt) {
		try {
			var target = $(evt.target);
			var clickedElmt = target.closest("[data-nav]");
			if (clickedElmt.length > 0) {
				evt.preventDefault();
				evt.stopPropagation();
				var attr = decodeURIComponent(clickedElmt.attr("data-nav"));
				var options = {};
				var sDataUrl = (clickedElmt.attr("data-sdata-url") || "").trim();
				if (sDataUrl.length > 0) {
					options["sdata-url"] = decodeURIComponent(sDataUrl);
				}
				var gadgetId = (clickedElmt.attr("data-gadget-id") || "").trim();
				if (gadgetId.length > 0) {
					options["gadget-id"] = gadgetId;
				}
				app.changePage(attr, options)
					.then(function(dstPage) {
						log && log("data-nav Ok - Navigation to " + attr);
					}, function(e) {
						log && log("data-nav KO - Navigation to " + attr, e);
					});
				return;
			}
			var clickedElmt = target.closest("[data-action]");
			if (clickedElmt.length > 0) {
				evt.preventDefault();
				evt.stopPropagation();
				var param;
				if (clickedElmt.is("select")) {
					param = $(this).val();
				} else {
					param = decodeURIComponent(clickedElmt.attr("data-params") || "");
				}
				var controlId = (clickedElmt.attr("data-control-id") || "").trim();
				_doAction(app, clickedElmt.attr("data-action"), param, controlId);
				return;
			}
		} catch (e) {
			fail(e);
		}
	});
};

/**
 * Add event handlers for controls
 * 		put a ctrl-evt- + evtName in the class attribute of the dom element you want to enable
 * 		handler will call ctrl.onEventName (onClick, onBlur...)
 */
var _bindControlEvents = function(app) {
	var fail = function(e) {
		var title = "_bindControlEvents error";
		log && log(title, e);
		modal.error(title, e);
	};
	var events = ["click", "blur"];
	// Use forEach instead of for(var i =...) to preserve evtname closure context otherwise evtname has always the last value
	events.forEach(function(evtname) {
		app.$$elmt.delegate(".ctrl-evt-" + evtname, evtname, function(event) {
			event.preventDefault();
			event.stopPropagation();
			try {
				var target = $(event.target);
				var ctrlId = (target.hasClass("s-m-control") ? target : target.closest(".s-m-control")).attr("id");
				if (!app.currentPage) throw new Error("No current page");
				var ctrl = app.currentPage.getControl(ctrlId);
				if (!ctrl) throw new Error("Control not found - ctrlid[" + ctrlId + "]");
				var method = "on" + evtname.smCapitalize();
				if (!ctrl[method]) {
					console.log("Method[" + method + "] not found - ctrlid[" + ctrlId + "]");
					return;
				}
				ctrl[method](event);
			} catch (e) {
				fail(e);
			}
			return;
		});
	});
};

/**
 * Application event listener
 */

var _bindEvents = function(app) {

	$(window).bind("popstate", function(event) {
		event.preventDefault();
		var state = event.originalEvent.state;
		log && log("popstate", "history.length=" + window.history.length, "State=" + (state != null));
		if (!state) return;
		setTimeout(function() {
			app._back(state);
		}, 0);
	});

	$(window).bind("hashchange", function() {
		log && log("hashchange", "history.length=" + window.history.length, "Hash=" + window.location.hash);
	});

	// Bind action/navigation call to click/select/change 
	_bindActions(app);

	// Bind control events
	_bindControlEvents(app);

};

exports.bindEvents = _bindEvents;