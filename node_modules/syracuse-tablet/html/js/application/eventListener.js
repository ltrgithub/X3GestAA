"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("evts");
var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var modal = require('syracuse-tablet/html/js/ui/modals/modal');
var feedback = require('syracuse-tablet/html/js/ui/feedback');
// var serverLog = require('syracuse-tablet/html/js/helpers/serverLog');
var _lastClick = null;

var _executeLink = function(handler, $$actionElmt) {
	if (_lastClick != null && ((new Date()).getTime() - _lastClick) < 500) {
		// it seems that it fixes the issue #7824  (double click)
		if (arguments[6]) {
			arguments[6].stopPropagation();
			arguments[6].preventDefault();
		}
		return;
	} else {
		_lastClick = (new Date()).getTime();
	}
	if (arguments.length < 2) return;
	var args = Array.prototype.splice.call(arguments, 2);
	if ($$actionElmt) {
		feedback.highlight($$actionElmt, function() {
			handler.apply(null, args);
		});
	} else {
		return handler.apply(null, args);
	}
};

/**
 * Returns id of parent array
 */
var _findParentCtrlId = function($$target, selector) {
	// Find a control array with an ID
	var p = $$target.closest(".s-m-control" + (selector || "") + "[id]");
	return p.length > 0 ? _attr(p, "id") : null;
};
/**
 * Returns attribute, decode and parse if it's a json
 */
var _attr = function($$e, name, nullIfEmpty, decode) {
	var a = $$e.attr(name);
	if (a == null) {
		a = "";
	} else if (typeof a !== "string") {
		a = new String(a);
	}
	a = a.trim();
	if (decode === true) {
		a = decodeURIComponent(a);
		if (a.smStartsWith('{') && a.smEndsWith('}')) {
			// We allow serialized JSON objects in attributes
			try {
				var json = JSON.parse(a);
				return json;
			} catch (e) {
				log.console("Error reading JSON attribute " + name + "\n\t" + a);
			}
		}
	}
	return nullIfEmpty && a.length === 0 ? null : a;
};
/**
 * Parse code=abc&value=cde to
 * {
 * code: "abc",
 * value: "cde"
 * }
 */
var _parseParameters = function(params) {
	var p = params.split("&");
	var res = {};
	for (var i = 0; i < p.length; i++) {
		var v = p[i].split("=");
		res[v[0]] = v[1];
	}
	return res;
};

var _findControlById = function(app, ctrlId, $$target) {
	if (!app.currentPage) throw new Error("No current page");
	var ctrl = app.currentPage.getControl(ctrlId);
	if (ctrl) return ctrl;
	/**
	 * data-controller-id is generated by controller base class to allow to retreive a control
	 * Controller is not only a page and we must be able to retrieve it
	 */
	var controller = $$target.closest("[data-controller-id]");
	if (controller.length === 0) {
		controller = $("#" + ctrlId).closest("[data-controller-id]");
	}
	if (controller.length > 0) {
		var id = controller.attr("data-controller-id");
		controller = globals.getController(id);
		if (controller) {
			ctrl = controller.getStructElmt(ctrlId);
		}
	}
	if (ctrl) return ctrl;
	//!! FDB - Do not remove this error - If this error occurs that means that there is something wrong somewhere
	// This error allows us to improve the application model and events management
	//Removing this error won't fix the issue - Eg:  issue #7426 see app.isLoading() 
	throw new Error("Control not found - ctrlid[" + ctrlId + "]");
};
/**
 * Calls an action given by data-action
 * params a string or a JSON object
 * if parans is a string and contains ',' separator params is split the callBack is called with as many parameters as split elements
 * $$target can be NULL
 * !!!! FDB do not stoppropagation - see below
 */
var _doAction = function($$target, act, params, controlId, evt) {
	var app = globals.getApplication();
	var _fail = function(e) {
		var title = locale.text("actions.error");
		e = e || {};
		e.stack = e.stack ? e.stack + "\n---\n" : "";
		e.stack = e.stack + "Action: " + act + "\nControl: " + (controlId || "?");
		modal.error(title, e);
	};
	try {
		var method = "_act" + $.camelCase("-" + act);
		var object;
		if ($$target) {
			if (!controlId) {
				// look for the first parent array if any
				// data-action in a row should invoke the method on array control
				controlId = _findParentCtrlId($$target, ".s-m-array");
			}
			if (controlId) {
				if (app.isLoadingPage()) {
					evt.stopPropagation();
					evt.preventDefault();
					return;
				}
				// Find control in current page and vignettes if dashboard
				object = _findControlById(app, controlId, $$target);
			} else {
				// Find if it's an action off a vignette (contains a page)
				var vignette = utils.findParentVignette($$target, false);
				if (vignette) {
					if (vignette[method]) {
						object = vignette;
					} else {
						var p = vignette.getPage();
						if (p && p[method]) object = p;
					}
				}
			}
		}
		// Find if it's a current page action
		if (object == null && app.currentPage[method]) object = app.currentPage;
		// Find if it's a global action
		if (object == null) object = app;
		if (!object[method]) throw new Error("Method [" + method + "] not found in object/application/current page)");
		var args = [];
		if (params && typeof params === "string") {
			// Create a array of parameters ( ','  as separator
			// Remove leading/trailing spaces
			params = params.split(',');
			params.forEach(function(p, idx) {
				args.push(p.trim());
			});
		} else {
			args.push(params);
		}
		// Add $target at the end
		args.push($$target);
		// Add event - In case the caller wants to stop propagation - caller responsibility
		args.push(evt);
		$.smResolve(function() {
			return object[method].apply(object, args);
		}).then(function(todo) {
			// Not used
			if (!todo || !todo.page) return;
			globals.getApplication().changePage(todo.page);
		}).fail(function(e) {
			_fail(e);
		});
	} catch (e) {
		_fail(e);
	}
};
/** NAVIGATION 
 * clickedElmt:	jQuery element or JSON object that provides attr() method
 * app			global application
 * $$target		$$target event for click in page
 * 				Element from which we searcg for the vignette if any
 * !!!! FDB do not stoppropagation - see below
 *
 */
var _doNavigation = function(clickedElmt, $$target) {
	var app = globals.getApplication();
	var options = {}, attr;
	attr = _attr(clickedElmt, "data-external-link");
	if (attr.length > 0) {
		window.open(attr, "s-m-external-window");
		return;
	}
	// Page to open
	attr = _attr(clickedElmt, "data-sdata-url");
	if (attr.length > 0) {
		// !! do not call decode URI because we must keep query parameters encoded
		options["sdata-url"] = attr;
	}
	attr = _attr(clickedElmt, "data-sdata-method");
	if (attr.length > 0) {
		options["sdata-method"] = attr;
	}
	// Link type : pagination...
	attr = _attr(clickedElmt, "data-nav-type");
	if (attr.length > 0) {
		options["type"] = attr;
	}
	// Id of parent page
	attr = _attr(clickedElmt, "data-parent-id");
	if (attr.length > 0) {
		options["parentId"] = attr;
	}
	// Control that rated the link - used by refresh and action on child pages like lookup
	attr = _attr(clickedElmt, "data-control-id");
	if (attr.length > 0) {
		options["controlId"] = attr;
	}
	// Initial Control that rated the link - used by dilldown authoring
	attr = _attr(clickedElmt, "data-origin-id");
	if (attr.length > 0) {
		options["controlOriginId"] = attr;
	}
	// Parameters are passed in page options - data navigation accepts Stringify JSON
	attr = _attr(clickedElmt, "data-params", false, true);
	// If attribute starts with { and ends with } it is parsed
	options["dataParams"] = attr || "";

	// Target - vignette -> Change/Refresh the page in the vignette - null or "application" Change/Refresh  application currentpage
	attr = _attr(clickedElmt, "data-nav-target");
	var navTarget;
	if ($$target) {
		if (attr === "vignette") {
			// data-nav-target allows to specify the target for navigation link - Ex pagination
			navTarget = utils.findParentVignette($$target, true);
		} else if (attr !== "application" && app.$config("openLinkInVignette")) {
			// Navigation in vignette - Just a  try but it works - Vignette display back/home icon in icon bar
			navTarget = utils.findParentVignette($$target, false);
		}

	}
	// default navigation is done at application level
	if (!navTarget) {
		navTarget = app;
	}

	// Page refresh instead of opening a new page
	var refreshPage = _attr(clickedElmt, "data-nav-refresh");
	if (refreshPage === "true") {
		// options.controlId points Control to refresh if any
		navTarget.refreshPage(options);
		return;
	}
	attr = _attr(clickedElmt, "data-application-name");
	var applicatioName;
	if (attr.length > 0) {
		applicatioName = attr;
	}

	var pageName;
	attr = _attr(clickedElmt, "data-nav");
	if (attr.length > 0) {
		pageName = attr;
	}

	if (applicatioName) {
		options["applicationName"] = applicatioName;
	}

	// Gadget - Page opener
	attr = _attr(clickedElmt, "data-gadget-id");
	if (attr.length > 0) {
		options["gadget-id"] = attr;
	}

	// Used to put a $article in a $link vignette - test entities
	attr = _attr(clickedElmt, "data-link-article");
	if (attr.length > 0) {
		options["linkArticle"] = attr;
	}
	// Used to filter gadgets in dashboard pages
	attr = _attr(clickedElmt, "data-sdata-parameters");
	if (attr && attr.length > 0) {
		options["sdataParameters"] = _parseParameters(attr);
	}

	// history.back not allowed - TODO See how to pass options	JSON in params ?	
	attr = _attr(clickedElmt, "data-nav-noback");
	options["noHistoryBack"] = attr === "true";

	navTarget.changePage(pageName, options);
};

/** 
 * Bind actions declared by data-nav or data-action/data-params attributes to an object
 *      for navigation data-nav  contains the name of the targeted page
 * 		for action method name is : _actActionName with ActionName the name of action declared in data-action attribute
 * object	: object that processes the actions
 * 				Check current page and application if method not found in object
 * 				if data-control-id attribute call control's action on current page
 * $$elmt 	: optional if object.$$elmt - element to bind event
 * selector : optional
 * 		Default selector is "[data-nav], [data-action]"
 *
 * !!!! FDB - About stopPropagations !!!
 * Like data-action can be used inside a bootstrap componant (ex dropdown) we need to propagate the event (no stopPropagations)
 * For dropdown it allows BS to close the opup window
 * I removed the stopPropagation in _bindActions
 * If we need to add it we will have to add a param in html that tells _bindActions to stop or not event propagation
 *
 */
var _handleActionEvt = function(evt, app) {
	var _fail = function(e) {
		var title = "_bindActions error";
		log && log(title, e);
		modal.error(title, e);
	};
	try {
		if (app.hasModalOpen()) {
			// If we have a modal in front of a page with a default button and if we press enter to close the dialog we trigger default action of the page
			// This test block the action - TODO improve
			log && log("!!! Tries to execute an action data-action with a MODAL open.\nAction is skipped");
			return;
		}
		var $$target = $(evt.target);
		// data-nav opens a page - data-application-name opens an application - data-external-link opens anexternal link - data-nav-refresh refreshes the page
		var $$actionElmt = $$target.closest("[data-nav], [data-nav-refresh], [data-application-name], [data-external-link]");
		if ($$actionElmt.length > 0) {
			if ($$actionElmt.attr("data-disabled") != null) return;
			_executeLink(_doNavigation, $$actionElmt, $$actionElmt, $$target);
			// evt.stopPropagation();has been removed and tested (#5359)
			// #5359 works fine without stopPropagation - Ex: click on an item of right panel - There's a click listener on the panel to close it - if no stopPropagation click on panel is triggered 
			// We need to propagate the event for bootstrap components - Eg: we click on pageDrafts menu when we are on this page - the menu doesn't close if event is not propagated
			return;
		}
		$$actionElmt = $$target.closest("[data-action]");
		if ($$actionElmt.length > 0) {
			// No action if disabled - disabled class
			if ($$actionElmt.is(".disabled")) return;
			// used to disable a link or action in order to allow the propagation of events (multiselection)
			if ($$actionElmt.attr("data-disabled") != null) return;
			/** ACTION **/
			var param;
			var act = _attr($$actionElmt, "data-action");
			if ($$actionElmt.is("select")) {
				param = $(this).val();
			} else {
				// Actions on arrays rows
				if (act === globals.ACTROWDETAIL || act === globals.ACTROWDEL || act === globals.ACTROWSEL || act === globals.ACTCARDDESIGN) {
					// We search the record of a the line that contains the row id indata-params attribute
					// We just have one elmt tha stores the rowId
					$$actionElmt = $$actionElmt.closest("." + globals.RECORDCLASS);
				}
				// data action parameters
				// if attr starts with { and ends with } it is parsed
				// if there's a ',' separator parameters are splited and become action arguments
				param = _attr($$actionElmt, "data-params", false, true);
			}
			var controlId = _attr($$actionElmt, "data-control-id", true);
			_executeLink(_doAction, $$actionElmt, $$target, act, param, controlId, evt);
			return;
		}
	} catch (e) {
		_fail(e);
	}
};
var _bindActions = function(app) {
	// Action are bound to application $$elmt and dispatcched to current page or control
	if (!app.$$elmt) throw new Error("_bindActions - null $$elmt");
	var handler = jsutils.bindFn(_handleActionEvt, null, app);
	// No click event on select - only change
	app.$$elmt.on("click", ":not(select)[data-nav], :not(select)[data-nav-refresh], :not(select)[data-action], :not(select)[data-application-name], :not(select)[data-external-link]", handler);
	feedback.bindActions(app.$$elmt);

	// For select tag
	app.$$elmt.on("change", "select[data-nav], select[data-nav-refresh], select[data-action]", handler);
};

/**
 * Add event handlers for controls
 * 		put a ctrl-evt- + evtName in the class attribute of the dom element you want to enable
 * 		handler will call ctrl.onEventName (onClick, onBlur...)
 * !!!! FDB do not stoppropagation - see above
 */
var _bindControlEvents = function(app) {
	var _fail = function(e) {
		var title = "_bindControlEvents error";
		log && log(title, e);
		modal.error(title, e);
	};
	var events = ["click", "blur", "change", "focus", "input"];
	// Use forEach instead of for(var i =...) to preserve evtname closure context otherwise evtname has always the last value
	events.forEach(function(evtname) {
		app.$$elmt.on(evtname, ".ctrl-evt-" + evtname, function(event) {
			//TODO - ee if we could remove stopPropagation like in _bindAtion
			event.preventDefault();
			event.stopPropagation();
			try {
				var $$target = $(event.target);
				var ctrlId;
				if ($$target.hasClass("s-m-control")) {
					ctrlId = _attr($$target, "id");
				} else {
					// We can force control-id if it's not a parent of $$target
					ctrlId = _attr($$target, "data-control-id", true);
					if (!ctrlId) {
						// We search for the first control parent with an ID
						// Controls in arrays don't have an id - So click on a card/row will return the array control
						ctrlId = _findParentCtrlId($$target);
					}
				}
				if (app.isLoadingPage()) {
					event.stopPropagation();
					event.preventDefault();
					return;
				}
				var ctrl = _findControlById(app, ctrlId, $$target);
				var method = "on" + evtname.smCapitalize();
				var controllerListener = ctrl.controller ? ctrl.controller.getEventListener(evtname) : null;
				if (controllerListener && controllerListener("before", ctrl, $$target, event) === true) {
					// Skip control
					return;
				}
				if (!ctrl[method]) {
					log && log("!!! Method[" + method + "] not found - ctrlid[" + ctrlId + "]");
					return;
				}
				ctrl[method](event);
				controllerListener && controllerListener("after", ctrl, $$target, event);
			} catch (e) {
				_fail(e);
			}
			return;
		});
	});
};

/**
 * Application event listener
 */
var _bindEvents = function(app) {

	$(window).bind("popstate", function(event) {
		var state = event.originalEvent.state;
		// We've to check state to not call historyPop on click on href="#"
		// FIREFOX
		//		Previous fix #8072 - old code was  if (state || /Firefox/.test(navigator.userAgent)) {app.historyPop}
		//			FF was trigering only one event with null state on back
		//	    After fix #8072
		//			Now FF seems to trigger only one event with state != null except when we open the mobile client from another tab with window.open (like does the desktop)
		//			If the client is opened with window.open, the first click in the breadcrum or first back generates popstate with null state  (??)
		//			So the code below fixes this bug and works for all browsers FF
		// CHROME
		// 		When we click back 2 events are triggered (one with state == null that we skip)
		// IE
		// 		When we click back one event is triggered with state != null like FF
		if (state) {
			app.historyPop(event);
		}
	});
	// Bind action/navigation call to click/select/change 
	_bindActions(app);
	// Bind control events
	_bindControlEvents(app);
	// triggered by browser window size oand orientation change for desktop
	$(window).on("resize", globals.getSiteLayout().onWindowResize);
	if (globals.isMobile()) {
		// JQuery mobile helpers that provides Orientationchanged better than we can do
		$.event.special.orientationchange.setup();
		$(window).on("orientationchange", globals.getSiteLayout().onWindowOrientation);
	}
	// Resize triggered internally
	$(window).on("resizeInternal", globals.getSiteLayout().onWindowResizeInteral);
	// Page reload
	$(window).on("unload", app.onUnload.bind(app));
	$(window).on("beforeunload", app.onBeforeUnload.bind(app));
};
/**
 * Trigger an action
 * 		$$elmt: JQL element - $$elmt of a control or page by example
 * 				if null trigger elemt at current page level (controlId is ignored)
 */
var _triggerAction = function($$elmt, act, params, controlId) {
	window.setTimeout(function() {
		_doAction($$elmt, act, params, controlId);
	});
};
/**
 * Triggers a navigation (open link) according to attributes params
 * $$elmt			JQ element to search for parent vignette  if any
 * attributes		SAme attributes as $$element
 */
var _triggerNavigation = function($$elmt, attributes) {
	// Simulate a Jquery object that provides attr() method
	var attrs = function(jsonAttrs) {
		var _jsonAttrs = jsonAttrs;
		Object.keys(_jsonAttrs).forEach(function(key) {
			if ($.isPlainObject(_jsonAttrs[key])) {
				_jsonAttrs[key] = JSON.stringify(_jsonAttrs[key]);
			}
		});
		this.attr = function(name) {
			return _jsonAttrs[name];
		};
	};
	_doNavigation(new attrs(attributes), $$elmt);
};
/*
 * Trigger refresh - used by filterSort
 */
var _triggerRefreshPage = function($$elmt, attributes) {
	setTimeout(function() {
		attributes = attributes || {};
		attributes["data-nav-refresh"] = "true";
		_triggerNavigation($$elmt, attributes);
	});
};
exports.bindEvents = _bindEvents;
exports.triggerAction = _triggerAction;
exports.triggerNavigation = _triggerNavigation;
exports.triggerRefreshPage = _triggerRefreshPage;