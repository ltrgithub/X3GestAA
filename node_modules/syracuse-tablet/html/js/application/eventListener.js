"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("evts");
var globals = require('syracuse-tablet/html/js/helpers/globals');
var modal = require('syracuse-tablet/html/js/ui/modal');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _attr = function($$e, name, nullIfEmpty, decode) {
	var a = ($$e.attr(name) || "").trim();
	if (decode === true) a = decodeURIComponent(a);
	return nullIfEmpty && a.length === 0 ? null : a;
};
/**
 * Only if current pages  is a dashboard
 * return the parent vignette or null
 * we assume that there are no dashboard in vignettes
 */
var _findParentVignette = function($$target, app, fail) {
	if (app.currentPage.getType() === "dashboard") {
		// Find vignette controlId + get vignette control
		var vignetteId = _attr($$target.closest(".s-m-control.s-m-vignette"), "id");
		if (fail && vignetteId.length === 0) throw new Error("Vignette DOM elmt not found");
		var vignette = app.currentPage.getControl(vignetteId);
		if (fail && !vignette) throw new Error("Vignette not found - id[" + vignetteId + "]");
		return vignette;
	} else if (fail) {
		throw new Error("Current page is not a dashboard");
	}
	return null;
};
/**
 * Returns null or {vignette, control} if ctrlId has been found in a vignette
 */
var _findCtrlInDashboard = function($$target, app, ctrlId) {
	//Two ways - tested - second should be more efficient but both take few ms
	if (false) {
		// Scan all vignettes and seach control (ctrlId is unic)
		return app.currentPage.findVignetteControl(ctrlId);
	} else {
		// Find vignette controlId + get vignette control + get control from vignette's page
		var vignette = _findParentVignette($$target, app, true);
		var control = vignette.getPageControl(ctrlId);
		return control ? {
			control: control,
			vignette: vignette
		} : null;
	}
};

/*
 * Parse code=abc&value=cde to
 * {
 * code: "abc",
 * value: "cde"
 * }
 */
var _parseParameters = function(params) {
	var p = params.split("&");
	var res = {};
	for (var i = 0; i < p.length; i++) {
		var v = p[i].split("=");
		res[v[0]] = v[1];
	}
	return res;
};
/**
 * Calls an action given by data-action
 */
var _doAction = function($$target, app, act, params, controlId) {
	var fail = function(e) {
		var title = "_doAction[" + act + "]" + (controlId ? " CtrlId[" + controlId + "]" : "") + " error";
		log && log(title, e);
		modal.error(title, e);
	};
	try {
		if (app.currentPage == null) throw new Error("No current page");
		var method = "_act" + $.camelCase("-" + act);
		var object;
		if (controlId) {
			// Find control in current page and vignettes if dashboard
			object = app.currentPage.getControl(controlId);
			if (object == null && app.currentPage.getType() === "dashboard") {
				object = _findCtrlInDashboard($$target, app, controlId);
				if (object) object = object.control;
			}
			if (object == null) throw new Error("Control not found");
		} else {
			// Find if it's an action off a vignette (contains a page)
			var vignette = _findParentVignette($$target, app, false);
			if (vignette) {
				if (vignette[method]) {
					object = vignette;
				} else {
					var p = vignette.getPage();
					if (p && p[method]) object = p;
				}
			}
			// Find if it's a current page action
			if (object == null && app.currentPage[method]) object = app.currentPage;
			// Find if it's a global action
			if (object == null) object = app;
		}
		if (!object[method]) throw new Error("Method [" + method + "] not found in object/application/current page)");
		if (params) {
			// Create a array of parameters ( ','  as separator
			// Remove leading/trailing spaces
			params = params.split(',');
			params.forEach(function(p, idx) {
				params[idx] = p.trim();
			});
		} else {
			params = [];
		}
		$.when(object[method].apply(object, params)).then(function(todo) {
			if (todo) {
				if (todo.page) {
					globals.getApplication().changePage(todo.page);
				}
			}
		}).fail(function(e) {
			fail(e);
		});
	} catch (e) {
		fail(e);
	}
};
/** 
 * Bind actions declared by data-nav or data-action/data-params attributes to an object
 *      for navigation data-nav  contains the name of the targeted page
 * 		for action method name is : _actActionName with ActionName the name of action declared in data-action attribute
 * object	: object that processes the actions
 * 				Check current page and application if method not found in object
 * 				if data-control-id attribute call control's action on current page
 * $$elmt 	: optional if object.$$elmt - element to bind event
 * selector : optional
 * 		Default selector is "[data-nav], [data-action]"
 */
var _bindActions = function(app) {
	var fail = function(e) {
		var title = "_bindActions error";
		log && log(title, e);
		modal.error(title, e);
	};
	// Action are bound to application $$elmt and dispatcched to current page or control
	var $$elmt = app.$$elmt;
	if (!$$elmt) throw new Error("_bindActions - null $$elmt");
	// Selector for not empty attribute -> [data-action][data-action!=""]
	$$elmt.delegate("[data-nav], [data-nav-refresh], [data-action]", "click select change", function(evt) {
		try {
			if (app.hasModalOpen()) {
				// If we have a modal in front of a page with a default button and if we press enter to close the dialog we trigger default action of the page
				// This test block the action - TODO improve
				log && log("!!! Tries to execute an action data-action with a MODAL open.\nAction is skipped");
				return;
			}
			var target = $(evt.target);
			evt.preventDefault();
			evt.stopPropagation();
			var clickedElmt = target.closest("[data-nav], [data-nav-refresh]");
			if (clickedElmt.length > 0) {
				/** NAVIGATION **/
				var options = {}, attr;
				// Page to open
				attr = _attr(clickedElmt, "data-sdata-url");
				if (attr.length > 0) {
					options["sdata-url"] = decodeURIComponent(attr);
				}
				attr = _attr(clickedElmt, "data-sdata-method");
				if (attr.length > 0) {
					options["sdata-method"] = decodeURIComponent(attr);
				}
				// Link type : pagination...
				attr = _attr(clickedElmt, "data-nav-type");
				if (attr.length > 0) {
					options["type"] = attr;
				}
				// Id of parent page
				attr = _attr(clickedElmt, "data-parent-id");
				if (attr.length > 0) {
					options["parentId"] = attr;
				}
				// Control that rated the link - used by refresh and action on child pages like lookup
				attr = _attr(clickedElmt, "data-control-id");
				if (attr.length > 0) {
					options["controlId"] = attr;
				}
				// Parameters are passed in page options - data navigation accepts Stringify JSON
				attr = _attr(clickedElmt, "data-params", false, true);
				if (attr.length > 0) {
					attr = attr.trim();
					if (attr.smStartsWith('{') && attr.smEndsWith('}')) {
						// We allow serialized JSON objects in attributes
						try {
							attr = JSON.parse(attr);
						} catch (e) {
							log.console("Error reading JSON attribute \n" + attr);
						}
					}
					options["dataParams"] = attr;
				}
				// Target - vignette -> Change/Refresh the page in the vignette - null or "application" Change/Refresh  application currentpage
				attr = _attr(clickedElmt, "data-nav-target");
				var navTarget;
				if (attr === "vignette") {
					// data-nav-target allows to specify the target for navigation link - Ex pagination
					navTarget = _findParentVignette(target, app, true);
				} else if (attr !== "application" && app.$config("openLinkInVignette")) {
					// Navigation in vignette - Just a  try but it works - Vignette display back/home icon in icon bar
					navTarget = _findParentVignette(target, app, false);
				}
				// default navigation is done at application level
				if (!navTarget) navTarget = app;
				// Page refresh instead of opening a new page	
				if (_attr(clickedElmt, "data-nav-refresh") === "true") {
					/** Refresh current page**/
					options["pageRefresh"] = true;
					// options.controlId points Control to refresh if any
					navTarget.refreshPage(options);
				} else if (attr = _attr(clickedElmt, "data-application-name")) {
					notifications.publish("sm.switch.app", attr);
				} else {
					/** Open a new page**/
					var pageName = decodeURIComponent(_attr(clickedElmt, "data-nav"));
					// Gadget - Page opener
					attr = _attr(clickedElmt, "data-gadget-id");
					if (attr.length > 0) {
						options["gadget-id"] = attr;
					}

					attr = _attr(clickedElmt, "data-sdata-parameters");
					if (attr && attr.length > 0) {
						options["sdataParameters"] = _parseParameters(attr);
					}
					// history.back not allowed - TODO See how to pass options	JSON in params ?	
					attr = _attr(clickedElmt, "data-nav-noback");
					options["noHistoryBack"] = attr === "true";
					navTarget.changePage(pageName, options);
				}
				return;
			}
			clickedElmt = target.closest("[data-action]");
			if (clickedElmt.length > 0) {
				/** ACTION **/
				evt.preventDefault();
				evt.stopPropagation();
				var param;
				if (clickedElmt.is("select")) {
					param = $(this).val();
				} else {
					// data action parameters - if there's a ',' separator parameters are splited and become action arguments
					param = _attr(clickedElmt, "data-params", false, true);
				}
				var controlId = _attr(clickedElmt, "data-control-id", true);
				_doAction(target, app, _attr(clickedElmt, "data-action"), param, controlId);
				return;
			}
		} catch (e) {
			fail(e);
		}
	});
};

/**
 * Add event handlers for controls
 * 		put a ctrl-evt- + evtName in the class attribute of the dom element you want to enable
 * 		handler will call ctrl.onEventName (onClick, onBlur...)
 */
var _bindControlEvents = function(app) {
	var fail = function(e) {
		var title = "_bindControlEvents error";
		log && log(title, e);
		modal.error(title, e);
	};
	var events = ["click", "blur", "change"];
	// Use forEach instead of for(var i =...) to preserve evtname closure context otherwise evtname has always the last value
	events.forEach(function(evtname) {
		app.$$elmt.delegate(".ctrl-evt-" + evtname, evtname, function(event) {
			event.preventDefault();
			event.stopPropagation();
			try {
				var target = $(event.target);
				var ctrlId = _attr(target.hasClass("s-m-control") ? target : target.closest(".s-m-control"), "id");
				if (!app.currentPage) throw new Error("No current page");
				var ctrl = app.currentPage.getControl(ctrlId);
				if (!ctrl && app.currentPage.getType() === "dashboard") {
					ctrl = _findCtrlInDashboard(target, app, ctrlId);
					if (ctrl) ctrl = ctrl.control;
				}
				if (!ctrl) throw new Error("Control not found - ctrlid[" + ctrlId + "] in currentpage or vignettes");
				var method = "on" + evtname.smCapitalize();
				if (!ctrl[method]) {
					log && log("!!! Method[" + method + "] not found - ctrlid[" + ctrlId + "]");
					return;
				}
				ctrl[method](event);
			} catch (e) {
				fail(e);
			}
			return;
		});
	});
};

/**
 * Application event listener
 */

var _bindEvents = function(app) {

	$(window).bind("popstate", function(event) {
		event.preventDefault();
		var state = event.originalEvent.state;
		if (state) app.historyPop(event);
	});

	$(window).bind("hashchange", function() {
		log && log("hashchange", "history.length=" + window.history.length, "Hash=" + window.location.hash);
	});

	// Bind action/navigation call to click/select/change 
	_bindActions(app);

	// Bind control events
	_bindControlEvents(app);

	// resize 
	$(window).resize(function(evt) {
		if (globals.getApplication()) {
			globals.getApplication().onResize(evt);
		}
	});

};
/**
 * Trigger an action
 * 		$$elmt: JQL element - $$elmt of a control or page by example
 */
var _triggerAction = function($$elmt, act, params, controlId) {
	if (!$$elmt) return;
	_doAction($$elmt, globals.getApplication(), act, params, controlId);
};

exports.bindEvents = _bindEvents;
exports.triggerAction = _triggerAction;