"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');


var _Dao = utils.defineClass(function(data, prototype, parent, options) {
	var self = this;
	self.options = options || {};
	self.data = data || {};
	if (!prototype) throw new Error("Prototype is mandatory");
	if (!data) throw new Error("jsonData is mandatory");
	self.prototype = prototype;
	self._children = null;
	self._cache = {
		metaData: {},
		queryData: null
	};
	if (parent) {
		parent._appendChild(self);
		self.parent = parent;
	}
}, null, {

	destroy: function() {
		var self = this;
		self.parent = null;
		self.data = null;
		self.prototype = null;
		if (self._children) {
			self.children.forEach(function(c) {
				if (c) c.destroy();
			});
		}
		self._children = null;
	},
	/**
	 * For destroy
	 */
	_appendChild: function(child) {
		var self = this;
		if (!self._children) self._children = [];
		self._children.push(child);
	},

	setValue: function(name, value) {
		var self = this;
		// TODO - Trigger event
		return self.data[name] = value;
	},

	getValue: function(name, defValue) {
		var self = this;
		if (!name || name.length === 0) return defValue;
		var val = self.data[name];
		return val != null ? val : self.parent ? self.parent.getValue(name, defValue) : defValue;
	},

	getDisplayValue: function(name, defValue) {
		var self = this;
		var val = self.getValue(name, defValue);
		var meta = self.getMetaData(name);
		// TODO format
		if (typeof val === "object") val = val.$title || val.$description;
		return (val || "").toString();

	},
	/**
	 * Return the meta-data for field 'name' including the ones given by prototype
	 */
	getMetaData: function(name) {
		var self = this;
		var meta = self._cache.metaData[name];
		if (meta) return meta;
		meta = self._cache.metaData[name] = $.extend({}, self.prototype.getMetaData(name), self.data.$properties ? self.data.$properties[name] : null);
		return meta;
	},
	getFieldInfo: function(name) {
		var self = this;
		return {
			meta: self.getMetaData(),
			value: self.getValue()
		};
	},
	/**
	 * Returns Array field data
	 * 	$resources an array of dao per row
	 *  $links
	 */
	getArrayData: function(name, itemProto) {
		var self = this;
		var res = {
			$resources: [],
		};
		var rsrcs = self.getValue(name) || [];
		rsrcs.forEach(function(rsrc) {
			res.$resources.push(new _Dao(rsrc, itemProto, self));
		});
		return res;
	},
	/**
	 * Returns query info
	 * 	$itemsPerPage
	 * 	$resources an array of dao per row
	 *  $links
	 */
	getQueryData: function(protoArray) {
		var self = this;
		var res = {
			$itemsPerPage: self.getValue("$itemsPerPage"),
			$resources: [],
			$links: self.getValue("$links")
		};
		if (!protoArray) throw new Error("getQueryData - Prototype Array is mandatory");
		var rowProto = protoArray.getPrototype("$item");
		var rsrcs = self.getValue("$resources");
		rsrcs.forEach(function(rsrc) {
			res.$resources.push(new _Dao(rsrc, rowProto, self));
		});
		return res;
	},

	/* Resolve expression according to current dataset and prototype*/
	parseExpression: function(expression) {
		var self = this;
		return utils.parseExpression(expression, self, self.prototype);
	}
});
// for override only
exports.Dao = _Dao;