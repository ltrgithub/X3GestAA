"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var reqProto = require('syracuse-tablet/html/js/helpers/prototype');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');


/**
 * Class that manages access to sdata data structure
 *  	data: 		JOSN data
 *  	prototype: 	Prototype
 *  	parent:		Parent DAO (see getPrototype)
 *  	options:	Not used
 * Manages DAO chaining parent -> child
 * !!use DAO methods instead of dealing directly with JSON
 */
var _Dao = utils.defineClass(function(data, prototype, parent, options) {
	var self = this;
	self.options = options || {};
	self.data = data || {};
	if (!prototype) throw new Error("Prototype is mandatory");
	if (!data) throw new Error("jsonData is mandatory");
	self.prototype = prototype;
	self._cache = {
		metaData: {},
		queryData: null
	};
	self.parent = parent;
}, null, {

	destroy: function() {
		var self = this;
		self.parent = null;
		self.data = null;
		self.prototype = null;
	},
	/**
	 * Set field's value
	 */
	setValue: function(name, value, notify) {
		var self = this;
		if (self.data[name] !== value) {
			self.data[name] = value;
			if (notify === true) {
				notifications.publish('sm.dao.updated', self, name, value);
			}
			return true;
		}
		return false;
	},
	/**
	 * Get field's value
	 */
	getValue: function(name, defValue) {
		var self = this;
		if (!name || name.length === 0) return defValue;
		var val = self.data[name];
		if (val != null && self.prototype.isReference(name) && typeof val === "object" && val.$value == null) {
			// Add $value in value with the value of the linked field 
			var nameValue = self.prototype.getFieldNameForValue(name);
			if (nameValue != name) {
				if (false && name === reqProto.SINGLEARRAYPROP) {
					// !! THIS METHOD NOT USED - SEE getArrayData which adds the value in parent dataset adn works with links
					// On case of single array of x-reference the value is stored into the field object and not in parent dataset
					// Example below  for field FCY_REF -> $refValue = FCY
					// { $data:{ $description: "Site AA2 long", $title: "Site AA2", FCY: "AA2"} }
					val.$value = self.data[name][nameValue];
					if (val.$value == null && defValue != null) val.$value = defValue;
				} else {
					val.$value = self.getValue(nameValue, defValue);
				}
			} else {
				val.$value = val;
			}
			return val;
		}
		return val != null ? val : self.parent ? self.parent.getValue(name, defValue) : defValue;
	},
	/**
	 * Temporarily - Returns a string
	 */
	getDisplayValue: function(name, defValue) {
		var self = this;
		var val = self.getValue(name, defValue);
		var meta = self.getMetaData(name);
		// TODO format
		if (typeof val === "object") val = val.$value || val.$title || val.$description;
		return (val || "").toString();

	},
	/**
	 * Return the meta-data for field 'name' including the ones given by prototype
	 */
	getMetaData: function(name) {
		var self = this;
		var meta = self._cache.metaData[name];
		if (meta) return meta;
		meta = self._cache.metaData[name] = $.extend({}, self.prototype.getMetaData(name), self.data.$properties ? self.data.$properties[name] : null);
		return meta;
	},
	getFieldInfo: function(name) {
		var self = this;
		return {
			meta: self.getMetaData(),
			value: self.getValue()
		};
	},
	/**
	 * Returns Array field data
	 * 	$resources an array of dao per row
	 *  No server pagination for array field in Syracuse
	 */
	getArrayData: function(name, protoArray) {
		var self = this;
		var res = {
			$resources: [],
		};
		var rsrcs = self.getValue(name) || [];
		if (protoArray.isSingleArray()) {
			// $resources contains an array of single type $resource:[2,6,8,9], $resources:[{$description:,$title:,FCY:},{$description:,$title:,FCY:}]
			// We create the same field structure as multiple columns arrays with a hard coded field name SINGLEARRAYPROP {$data:1} {$data:{$description:,$title:,FCY:}}
			rsrcs.forEach(function(rsrc) {
				var data = {};
				data[reqProto.SINGLEARRAYPROP] = rsrc;
				var proto = protoArray.getPrototype("$item");
				if (proto.property(reqProto.SINGLEARRAYPROP).$type === "application/x-reference") {
					// THIS METHOD IS BETTER THAN THE ONE OF  getValue BECAUS IT'S COMPLIANT WITH LINKS
					// If it's a single array of x-reference we need to add the value ($refValue) calculated by prototype.getFieldNameForValue
					// Example below  for field FCY_REF -> $refValue = FCY
					//{
					//  	$data:{ $description: "Site AA2 long", $title: "Site AA2", FCY: "AA2"},
					//-->	FCY: "AA2"
					//}
					// TODO - test with Syracuse entities which do not use $refValue
					var valFld = proto.getFieldNameForValue(reqProto.SINGLEARRAYPROP);
					if (valFld) data[valFld] = rsrc[valFld];
				}
				res.$resources.push(new _Dao(data, proto, self));
			});
		} else {
			rsrcs.forEach(function(rsrc) {
				res.$resources.push(new _Dao(rsrc, protoArray, self));
			});
		}
		return res;
	},
	/**
	 * Returns query info
	 * 	Pagination info : 	$itemsPerPage $links
	 * 	Data : 				$resources an array of dao per row
	 *
	 */
	getQueryData: function(protoArray) {
		var self = this;
		var res = {
			$itemsPerPage: self.getValue("$itemsPerPage"),
			$resources: [],
			$links: self.getValue("$links")
		};
		if (!protoArray) throw new Error("getQueryData - Prototype Array is mandatory");
		var rowProto = protoArray.getPrototype("$item");
		var rsrcs = self.getValue("$resources");
		rsrcs.forEach(function(rsrc) {
			res.$resources.push(new _Dao(rsrc, rowProto, self));
		});
		return res;
	},
	/**
	 * Lookup info
	 */
	getLookupData: function(protoArray) {
		return this.getQueryData(protoArray);
	},

	getQueryResources: function() {
		var self = this;
		var rsrcs = self.getValue("$resources");
		return rsrcs;
	},

	/* Resolve expression according to current dataset and prototype*/
	parseExpression: function(expression) {
		var self = this;
		return utils.parseExpression(expression, self, self.prototype);
	},
	/**
	 * Set row index for arrays
	 */
	setRowIndex: function(value) {
		this.setValue(reqProto.ROWIDXPROP, value, false);
	},
	/**
	 * Returns the status of links - override prototype status with the data ones if exists
	 *  	prototype:  prototype that contains the descriptions of $links
	 *  				If null takes the one of the current dao
	 */
	getLinksStatus: function(prototype) {
		var self = this;
		prototype = prototype || self.prototype;
		return $.extend(true, {}, prototype.data("$links"), self.getValue("$links"));
	},
	/**
	 * Find a row by id in an ARRAY data-set (query/lookup/array field)
	 */
	getRowById: function(uuid, clone) {
		var self = this;
		var rsrcs = self.getValue("$resources") || [];
		var row;
		rsrcs.some(function(r) {
			if (r.$uuid === uuid) {
				row = r;
				return true;
			}
		});
		return clone ? $.extend(true, {}, row) : row;
	},
	/**
	 * return action's payload
	 * $method: "POST"
	 * $url: "{$baseUrl}/AQMDEVICE?representation=AQMCRUDM.$create"
	 * $uuid: "6cdcb613-323f-495d-8a29-f54efad77f53"
	 * name: "$save"
	 * page: "x3.erp.SUPERV.AQMCRUDM.$create"
	 * sdataurl: "/sdata/x3/erp/SUPERV/AQMDEVICE?representation=AQMCRUDM.$create"
	 */
	getActionPayload: function(link) {
		var self = this;
		switch (link.name) {
			case "$save":
			case "$edit":
				// TODO - Eventually remove unused properties
				return $.extend({}, self.data);
				break;
			default:
				return null;
				break;
		}
	},
	clone: function() {
		return new _Dao($.extend(true, {}, this.data), this.prototype, this.parent, this.options);
	}
});
// for override only
exports.Dao = _Dao;