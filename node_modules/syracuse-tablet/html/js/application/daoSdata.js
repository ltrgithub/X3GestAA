"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');
var locale = require('syracuse-tablet/html/js/helpers/locale');


var _defMetaData = {
	$properties: {
		"$isExcluded": false,
		"$isHidden": false,
		"$isMandatory": false,
		"$isReadOnly": false,
		"$isDisabled": false,
		"$diagnoses": null,
		"$x3Format": null
	},
	$links: {
		"$isDisabled": false,
		"$isHidden": false,
		"$style": false,
		"$isRequested": false
	}
};
/**
 * Recursive update of meta-data
 */
var _updt = function(src, dst) {
	var m = {}, j;
	for (var p in _defMetaData) {
		j = src[p];
		if (j && !$.isEmptyObject(j)) m[p] = j;
	}
	if (!$.isEmptyObject(m)) {
		$.extend(dst, m);
		return m;
	}
	return null;
};
var _updateMeta = function(fromData, toData, properties, isRowData) {
	if (!fromData || !toData) return false;
	var meta = _updt(fromData, toData);
	if (isRowData == true && meta && meta.$properties) {
		// We need to update the parent that there's a child on error 
		// If there's an error in a nested array we need to display the row in error at the first level
		for (var p in meta.$properties) {
			if (meta.$properties[p].$diagnoses != null) {
				toData.$arrayUpdateError = true;
				break;
			}
		}
	}
	var done = meta != null;
	if (properties) {
		for (var name in properties) {
			var proto = properties[name];
			if (proto && proto.$type === "application/x-array" && fromData[name]) {
				if (!articleParser.isSingleArray(proto)) {
					var arrSrc = fromData[name];
					var arrDst = toData[name];
					if (!arrDst) throw new Error("Unexpected empty data array - " + name);
					for (var idx = 0; idx < arrSrc.length && idx < arrDst.length; idx++) {
						// _updateMeta first
						var rowData = arrDst[idx];
						meta = _updateMeta(arrSrc[idx], rowData, proto.$item.$properties, true);
						if (rowData.$arrayUpdateError && isRowData) {
							toData.$arrayUpdateError = true;
						}
						done = meta != null || done;
					}
				}
			}
		}
	}
	return done;
};

var _typeDefValue = function(prop) {
	switch (prop.$type) {
		case "application/x-password":
		case "application/x-string":
			return "";
		case "application/x-quantity":
			return 0.0;
		case "application/x-decimal":
		case "application/x-real":
			return 0.0;
		case "application/x-integer":
			return 0;
		case "application/x-boolean":
			return false;
		case "application/x-date":
			return '';
		case "application/x-datetime":
			return '';
		case "application/x-time":
			return '';
		case "application/x-choice":
			return prop.$value.$enum[0].$value;
		case "application/x-reference":
			return {
				$value: "",
				$description: "",
				$title: ""
			};
		case "application/x-array":
			return [];
		default:
			return null;
	}
};
var _dataProps = ["$isMandatory", "$isReadOnly", "$isHidden", "$isExcluded", "$isDisabled", "$actions", "$format"];
var _proto2Instance = function(protoArray) {
	var res;
	if (protoArray.isSingleArray()) {
		res = {
			$properties: {
				"~data~": ""
			}
		};
	} else {
		res = {
			$properties: {}
		};
		var props = protoArray.getDataByPath("$item.$properties");
		for (var propName in props) {
			if (!propName.smStartsWith("$")) {
				var prop = props[propName];
				res[propName] = _typeDefValue(prop);
				var $properties = res.$properties[propName] = {};
				_dataProps.forEach(function(p) {
					if (prop[p] != null) {
						$properties[p] = prop[p];
					}
				});
			}
		}
	}
	return res;
};
var _getArrayEmptyRow = function(array, proto, bind, parentDao) {
	var rsrc;
	if (false && proto.isSingleArray()) {
		rsrc = _proto2Instance(proto);
	} else {
		rsrc = _proto2Instance(proto);
		rsrc.$uuid = utils.UUID();
	}
	// We path pathBind as $bind in empty dao to be able to retrieve the full path of prototype in nested arrays
	return new _Dao(rsrc, _getProtoRowDetail(array, proto), parentDao, bind);
};
var _getProtoRowDetail = function(array, proto) {
	var protoJson = {
		$url: "",
		$typ: "rowdetail",
		$links: {}
	};
	// add $links
	if (array.controller.isEditMode()) {
		protoJson.$links.$save = {
			"$title": "Save"
		};
		// TODO - delete is always possible in rowDetail - for tests
		if (true || array.controller.prototype.getDataByPath("$links.$delete")) {
			protoJson.$links.$delete = {
				"$title": "Delete",
				"$confirm": locale.text("actions.del.confirm")
			};
		}
	}
	if (proto.isSingleArray()) {
		var p = $.extend({}, proto.getDataByPath("$item"));
		p.$isMandatory = true;
		p.$isReadOnly = p.$isHidden = p.$isDisabled = false;
		protoJson.$properties = {
			"~data~": p
		};
		return proto.create(protoJson);
	} else {
		return proto.getPrototype("$item", protoJson);
	}
};
/**
 * Class that manages access to sdata data structure
 *  	data: 		JOSN data
 *  	prototype: 	Prototype
 *  	parent:		Parent DAO (see getPrototype)
 *  	$bind		For a child it's the name of the field from which dao has bee created
 * Manages DAO chaining parent -> child
 * !!use DAO methods instead of dealing directly with JSON
 */
var _Dao = utils.defineClass(function(data, prototype, parent, $bind) {
	var self = this;
	self.$bind = $bind || "";
	self.data = data || {};
	if (!prototype) throw new Error("Prototype is mandatory");
	if (!data) throw new Error("jsonData is mandatory");
	self.prototype = prototype;
	self.resetCache();
	self.parent = parent;
}, null, {

	destroy: function() {
		var self = this;
		self.parent = null;
		self.data = null;
		self.prototype = null;
	},
	resetCache: function() {
		this._cache = {
			metaData: {},
			queryData: null
		};
	},
	/**
	 * Set field's value
	 * For x-reference fields value can be a string or an object {$value,$description, $title}
	 */
	setValue: function(name, value, notify) {
		var done = false;
		var curVal = this.data[name];
		if (this.prototype.isReference(name)) {
			var valName = this.prototype.getFieldNameForValue(name);
			if (valName !== name) {
				// X3 entities 
				var strVal;
				if (typeof value === "object") {
					strVal = value.$value || "";
				} else {
					strVal = value + "";
				}
				if (strVal != this.data[valName]) {
					// Reset value
					this.data[name] = curVal = {};
					// Set field value
					this.data[valName] = strVal;
					// Set value
					if (strVal === value) {
						// value is a string - TODO remove all other properties??
						curVal.$value = strVal;
					} else {
						// set _REF value/descr/ttl to allow refresh of all fields data
						for (var p in value) {
							curVal[p] = value[p];
						}
					}
					// for ref fields in single arrays we've to set this value {$value:"ASN", FCY:"ASN"}
					curVal[valName] = strVal;
					done = true;
				}
			} else if (curVal == null || curVal.$value != value) {
				throw new Error("Syracuse entities - x-refrence setValue not implemented");
			}
		} else if (curVal == null || curVal !== value) {
			if (false && !this.prototype.isBlob(name) && typeof curVal === "object") {
				throw new Error("daoSdata.setValue - Unexpected Object value for " + name);
			}
			this.data[name] = value;
			done = true;
		}
		if (done && notify === true) {
			notifications.publish('sm.dao.updated', this, name, value);
		}
		return done;
	},
	/**
	 * Get field's value
	 * searchInParents should be equals to true - remove it if not used
	 */
	getValue: function(name, defValue, searchInParents, noTrace) {
		if (!name || name.length === 0) return defValue;
		var val = this.data[name];
		if (val != null && this.prototype.isReference(name) && typeof val === "object" && val.$value == null) {
			// Add $value in value with the value of the linked field 
			var nameValue = this.prototype.getFieldNameForValue(name);
			if (nameValue != name) {
				val.$value = this.getValue(nameValue, defValue);
			} else {
				val.$value = val;
			}
			return val;
		}
		if (val != null) return val;
		if (searchInParents && val == null && this.parent) {
			var pVal = this.parent.getValue(name, defValue, searchInParents, true);
			if (pVal != null) {
				// Just to figure out which value are concerned by this 
				if (noTrace !== true) console.log("dao.getValue - Field " + name + " - value comes from parent - $bind" + (this.$bind ? this.$bind : ""));
			}
			val = pVal;
		}
		return val != null ? val : defValue;
	},
	/**
	 * Return the 'type' meta-data
	 * 	type		$properties for fields
	 * 				$links for actions
	 *  propName 	Name of the field for type = $properties
	 */
	getMetaData: function(type, propName) {
		if (propName != null && type == "$properties" && this.prototype.isReference(propName)) {
			propName = this.prototype.getFieldNameForValue(propName);
		}
		if (!type) throw new Error("getMetaData - type expected");
		var props = _defMetaData[type];
		if (!props) throw new Error("getMetaData - unexpected type[" + type + "]");
		var meta = this._cache.metaData[type];
		if (meta) {
			if (propName == null) return meta;
			if (propName != null && meta[propName] != null) return meta[propName];
			meta = meta[propName] = {};
		} else {
			meta = this._cache.metaData[type] = {};
			if (propName != null) meta = meta[propName] = {};
		}
		var proto = this.prototype.data(type);
		if (proto && propName != null) proto = proto[propName];
		var data = this.data[type];
		if (data && propName != null) data = data[propName];
		for (var p in props) {
			if (data && data[p] != null) {
				meta[p] = data[p];
				continue;
			} else if (proto && proto[p] != null) {
				meta[p] = proto[p];
			} else {
				meta[p] = props[p];
			}
		}
		return meta;
	},
	/**
	 * Fields $diagnoses are removed after having being displayed
	 */
	removeMetaDiagnoses: function(fieldName) {
		if (this.prototype.isReference(fieldName)) {
			fieldName = this.prototype.getFieldNameForValue(fieldName);
		}
		[this.data, this._cache.metaData].forEach(function(data) {
			var meta = data.$properties;
			if (meta && meta[fieldName]) meta[fieldName]["$diagnoses"] = undefined;
		});
	},
	getFieldInfo: function(name) {
		return {
			meta: this.getMetaData(),
			value: this.getValue()
		};
	},
	/**
	 * current proto is controller's proto
	 * name: array field name
	 * protoArray: prototype of array field
	 * Returns Array field data
	 * 	$resources an array of dao per row
	 *  No server pagination for array field in Syracuse
	 */
	getArrayData: function($bind, protoArray) {
		var self = this;
		var res = {
			$resources: [],
		};
		var rsrcs = self.getValue($bind) || [];
		if (protoArray.isSingleArray()) {
			// $resources contains an array of single type $resource:[2,6,8,9], $resources:[{$description:,$title:,FCY:},{$description:,$title:,FCY:}]
			// We create the same field structure as multiple columns arrays with a hard coded field name SINGLEARRAYPROP {$data:1} {$data:{$description:,$title:,FCY:}}
			rsrcs.forEach(function(rsrc) {
				var data = {};
				data[globals.SINGLEARRAYPROP] = rsrc;
				// We add an uuid for compliance with other array - used for crud
				data.$uuid = utils.UUID();
				var proto = protoArray.getPrototype("$item");
				if (proto.property(globals.SINGLEARRAYPROP).$type === "application/x-reference") {
					// THIS METHOD IS BETTER THAN THE ONE OF  getValue BECAUSE IT'S COMPLIANT WITH LINKS
					// If it's a single array of x-reference we need to add the value ($refValue) calculated by prototype.getFieldNameForValue
					// Example below  for field FCY_REF -> $refValue = FCY
					//{
					//  	$data:{ $description: "Site AA2 long", $title: "Site AA2", FCY: "AA2"},
					//-->	FCY: "AA2"
					//}
					// TODO - test with Syracuse entities
					var valFld = proto.getFieldNameForValue(globals.SINGLEARRAYPROP);
					if (valFld) data[valFld] = rsrc[valFld];
				}
				res.$resources.push(new _Dao(data, proto, self, $bind));
			});
		} else {
			// Fix the display of values in arrays - !! dependencies with builderTable._getOtherColProto
			var protoRow = protoArray.getPrototype("$item");
			rsrcs.forEach(function(rsrc) {
				res.$resources.push(new _Dao(rsrc, protoRow, self, $bind));
			});
		}
		return res;
	},
	/**
	 * Returns query info
	 * 	Pagination info : 	$itemsPerPage $links
	 * 	Data : 				$resources an array of dao per row
	 *
	 */
	getQueryData: function(protoArray) {
		var self = this;
		var res = {
			$itemsPerPage: self.getValue("$itemsPerPage"),
			$resources: [],
			$links: self.getValue("$links")
		};
		if (!protoArray) throw new Error("getQueryData - Prototype Array is mandatory");
		var rowProto = protoArray.getPrototype("$item");
		var $bind = "$resources";
		var rsrcs = self.getValue($bind);
		rsrcs.forEach(function(rsrc) {
			res.$resources.push(new _Dao(rsrc, rowProto, self, $bind));
		});
		return res;
	},
	/**
	 * Lookup info
	 */
	getLookupData: function(protoArray) {
		return this.getQueryData(protoArray);
	},
	getQueryResources: function() {
		return this.getValue("$resources");
	},
	/* Resolve expression according to current dataset and prototype*/
	parseExpression: function(expression) {
		return utils.parseExpression(expression, this, this.prototype);
	},
	/**
	 * Set row index for arrays
	 */
	setRowIndex: function(value) {
		this.setValue(globals.ROWIDXPROP, value, false);
	},
	/**
	 * return action's payload
	 * $method: "POST"
	 * $url: "{$baseUrl}/AQMDEVICE?representation=AQMCRUDM.$create"
	 * $uuid: "6cdcb613-323f-495d-8a29-f54efad77f53"
	 * name: "$save"
	 * page: "x3.erp.SUPERV.AQMCRUDM.$create"
	 * sdataurl: "/sdata/x3/erp/SUPERV/AQMDEVICE?representation=AQMCRUDM.$create"
	 */
	getActionPayload: function(link) {
		switch (link.name) {
			case "$save":
			case "$edit":
				// TODO - Eventually remove unused properties
				return $.extend({}, this.data);
				break;
			default:
				return null;
				break;
		}
	},
	clone: function() {
		return new _Dao($.extend(true, {}, this.data), this.prototype, this.parent, this.$bind);
	},
	/**
	 * Merge dao with json (json is by example the result of an action)
	 * We take into account the metat $properties and $links
	 * retuns true if meta to refresh
	 */
	updateMeta: function(src) {
		if (!src) return;
		this.resetCache();
		var res = _updateMeta(src, this.data, this.prototype.data("$properties"));
		return res;
	},
	/**
	 * Update the parent dao - used by child pages
	 * Retrun true if change has been detected
	 * create				add new row
	 * singleArrayRowIdx	index of row for singleArrayRowIdx because no $uuid
	 */
	updateParentRow: function(create, singleArrayRowIdx) {
		if (!this.parent || !this.data || $.isEmptyObject(this.data)) return false;
		var id = this.data.$uuid;
		var grid = this.parent.data[this.$bind];
		if (!grid) {
			if (!create) return false;
			grid = this.parent.data[this.$bind] = [];
		}
		var single = this.prototype.isSingleArray();
		if (create) {
			var newdata = single ? this.data[globals.SINGLEARRAYPROP] : this.data;
			grid.push($.isPlainObject(newdata) ? $.extend({}, newdata) : newdata);
		} else {
			var idx = -1;
			var newdata = this.data;
			if (single) {
				// in single arrays there's no uuid
				if (grid.length > singleArrayRowIdx) idx = singleArrayRowIdx;
				if (idx < 0) return false;
				// In signle arrays we manage data in SINGLEARRAYPROP field for compliance with other arrays
				newdata = this.data[globals.SINGLEARRAYPROP];
			} else {
				grid.some(function(r, i) {
					if (r.$uuid == id) {
						idx = i;
						return true;
					}
				});
				if (idx < 0) return false;
			}
			if (utils.areEqual(newdata, grid[idx])) return false;
			grid[idx] = $.isPlainObject(newdata) ? $.extend({}, newdata) : newdata;
		}
		return true;
	},
	/**
	 * Delete a row
	 * 	isSingleArray		> rowidoridx is the index beacuse there's no uuid in data
	 * 	not isSingleArray	-> rowidoridx is the uuid
	 */
	deleteRow: function(field, rowidoridx) {
		var grid = this.data[field];
		if (!grid) return false;
		var idx = -1;
		if (this.prototype.isSingleArray(false, field)) {
			rowidoridx = parseInt(rowidoridx, 10);
			// in single arrays there's no uuid
			if (grid.length > rowidoridx) idx = rowidoridx;
		} else {
			grid.some(function(r, i) {
				if (r.$uuid == rowidoridx) {
					idx = i;
					return true;
				}
			});
		}
		if (idx < 0) return false;
		grid.splice(idx, 1);
		return true;
	},
	/**
	 * Called when we save a rowDetail page
	 * If the dao has errors it keeps error status ($arrayUpdateError) at true
	 * If no error it sets $arrayUpdateError to false
	 * If we save a representation with nested arrays and have an error in the last level the parent lines are shown with errors (red border)
	 * If we change the value in error we clear the error
	 * If no error remains we have to remove the error status ($arrayUpdateError) in parent lines
	 */
	checkArrayUpdateError: function() {
		var d = this.data,
			errors = false;
		if (d.$properties) {
			// check diagnoes in fields
			for (var p in d.$properties) {
				if (p.$diagnoses && p.$diagnoses.length > 0) {
					errors = true;
					break;
				}
			}
		}
		if (!errors) {
			// check error status ($arrayUpdateError) in array fields lines
			var props = this.prototype.data("$properties") || {};
			for (var p in props) {
				if (props[p].$type === "application/x-array" && this.data[p] && this.data[p].some(function(r) {
					if (r.$arrayUpdateError) return true;
				})) {
					errors = true;
					break;
				}
			}
		}
		if (!errors) {
			// If no error found reser error status to not display the red border for this row
			d.$arrayUpdateError = false;
		}
	}
});
// for override only
exports.Dao = _Dao;
exports.emptyDao = function(prototype, parent) {
	return new _Dao({
		$properties: {}
	}, prototype, parent);
};
exports.getArrayEmptyRow = _getArrayEmptyRow;
exports.getProtoRowDetail = _getProtoRowDetail;