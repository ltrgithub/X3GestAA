"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var modal = require('syracuse-tablet/html/js/ui/modal');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("app");
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var auth = require('syracuse-tablet/html/js/application/authentication');
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var pageLoader = require('syracuse-tablet/html/js/application/pageLoader');
var initContext = require('syracuse-tablet/html/js/init/initContext');
var settings = require('syracuse-tablet/html/js/application/settings');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var pageHelper = require('syracuse-tablet/html/js/application/pageHelper');
var authoring = require('syracuse-tablet/html/js/authoring/authoring');

/**
 * Default application config
 */
var _appConfig = {
	transition: null,
	// FDB - openLinkInVignette=true to allow test in vignettes (children page, lookup...)
	// MW - Changed to false as default since this is more what we are going to use.
	openLinkInVignette: false
};
/**
 * Subscriptions
 */
var _subscribe = function(self) {
	notifications.subscribe(self, ["sm.context.changed", "sm.switch.app", "sm.modal.open", "sm.modal.close", "sm.main.layout.changed"], 1);
};
/**
 * Tablet application class
 */
var _Application = utils.defineClass(
	function($$elmt, factory) {
		var self = this;
		self.$$elmt = $$elmt;
		self.currentPage = null;
		self._$config = $.extend(true, {}, _appConfig);
		self.factory = factory;
		self._pageLoader = null;
		self._nbModals = 0;
		self._wait = uiutils.waitWheelCreate($$elmt);
		// Id of the home dashboard of current application
		// Used to go to home page
		self.homePageId = null;
		// Default appid when login page is loaded without current application
		self.uuid = "root";
		// Application history stack
		self.history = [];
		// Force pushState on first page
		self.pushState = true;
	}, null, {
		/**
		 * Called after object has been created
		 **/
		init: function() {
			var self = this;
			// Can't be called in constructor
			eventListener.bindEvents(self);
			self.dao = self.factory.createDaoApp(self);
			_subscribe(self);
			self.$$elmt.show();
		},

		destroy: function() {
			var self = this;
			if (self._wait) uiutils.waitWheelDestroy(self._wait);
			notifications.unsubscribe();
			pageHelper.removeAllPages(self.$$elmt);
			self.currentPage = null;
			if (self._pageLoader == null) {
				self._pageLoader.destroy();
				self._pageLoader = null;
			}
			utils.unbindObj(self);
			utils.unbindObj(self.$$elmt);
			$(window).unbind();
		},
		/**
		 * True if current 'mobile application' is welcome application
		 */
		isWelcomeApplication: function() {
			return this.uuid === "$welcomeApplication";
		},
		/**
		 * For page display
		 */
		getTitle: function() {
			return this.dao.getApplicationName();
		},
		/**
		 * Goto home page of current 'mobile application'
		 */
		gotoHome: function() {
			var self = this;
			setTimeout(function() {
				self.changePage(self.homePageId);
			});
		},
		/**
		 * Accept path like "array.gridMaxCols"
		 */
		$config: function(id) {
			return utils.getPropByPath(this._$config, id, this._$config);
		},
		/**
		 * User, role, endpoint or language changed
		 * !! resolve/reject deferred is not null
		 * -> deferred used to catch error in transition phase - before page has been loaded
		 */
		notifContextChanged: function(deferred) {
			this.gotoWelcomeApplication(deferred);
		},

		notifModalOpen: function() {
			this._nbModals++;
			log && log("notifModalOpen nbModals=" + this._nbModals);
		},

		notifModalClose: function() {
			this._nbModals = Math.max(this._nbModals - 1, 0);
			log && log("notifModalClose nbModals=" + this._nbModals);
		},
		notifMainLayoutChanged: function() {
			var self = this;
			self.currentPage && self.currentPage.onResize();
		},
		hasModalOpen: function() {
			log && log("_nbModals=" + this._nbModals);
			return this._nbModals > 0;
		},

		_actGotoWelcomeApplication: function() {
			this.gotoWelcomeApplication();
		},
		/**
		 * Called by link with data-action = historyBack
		 */
		_actHistoryBack: function() {
			window.history.back();
		},
		// Switch role, endpoint, language
		_actSwitchContext: function() {
			var self = this;
			initContext.init(true, true).then(function(context) {}).fail(function(e) {
				modal.error("Swicth context error", e);
			});
		},
		_actClearCache: function() {
			var self = this;
			var deferred = $.Deferred();
			modal.confirm("clearCache", function(confirmed) {
				if (confirmed) {
					self.waitWheelStart();
					globals.getCache().clearCache().then(function(e) {
						self.waitWheelStop();
						deferred.resolve(null);
					}).fail(function(e) {
						setTimeout(function() {
							modal.error("Clear cache error", e, function() {
								self.waitWheelStop();
								deferred.resolve(null);
							});
						}, 10);
					});
				} else {
					deferred.resolve(null);
				}
			});
			return deferred.promise();
		},
		_actDesignPage: function() {
			authoring.startDesignPage();
		},
		/**
		 * User has selected a new Syracuse mobile application
		 * appInfo json description of application
		 */
		notifSwitchApp: function(appName) {
			this._setCurrentApplication(globals.getApplicationJson(appName));
		},

		/**
		 * Got o home page of tablet applications - Welcome dashboard
		 * deferred to resolve/reject in not null - used by asynchronous calls
		 * Ex: For login page we display the error in login page instead of modal
		 */
		gotoWelcomeApplication: function(deferred) {
			if (globals.isLoggedIn()) {
				this._setCurrentApplication(globals.getWelcomeAppJson(), deferred);
			} else {
				if (deferred) deferred.resolve();
				this.gotoLogin();
			}
		},
		/**
		 * Goto login page
		 */
		gotoLogin: function(reason) {
			var self = this;
			self.historyReset();
			setTimeout(function() {
				self.changePage("login", {
					reason: reason || "Authentication is required"
				});
			}, 0);
		},
		/**
		 * Set the current 'mobile application'
		 * Called after a switch context (application selection) or when tablet application is launched
		 * 'Welcome dashboard' page is a real application with only one dashboard
		 *  deferred param :
		 *  	deferred to resolve/reject if not null - used by asynchronous calls to be notified
		 */
		_setCurrentApplication: function(appInfo, deferred) {
			var self = this;
			var _fail = function(msg, e) {
				self.waitWheelStop();
				if (deferred) {
					deferred.reject(e);
				} else {
					modal.error(msg, e, function() {
						if (self.currentPage) self.currentPage.activate();
					});
				}
			};
			var _success = function(appDetail) {
				try {
					self.waitWheelStop();
					if (!appDetail.$application.$uuid) throw new Error("No application $uuid - " + appDetail.applicationName);
					if (self.uuid !== appDetail.$application.$uuid) {
						// Application changed
						self.dao.setApplication(appDetail);
						self.homePageId = self.dao.getHomeDashboard();
						self.uuid = appDetail.$application.$uuid;
					}
					self.gotoHome();
					if (deferred) deferred.resolve();
				} catch (e) {
					_fail("Error loading new application", e);
				}
			};
			try {
				if (!appInfo) throw new Error("Null appInfo");
				log && log("Switch to Syracuse Mobile Application " + appInfo.applicationName);
				if (self.currentPage) {
					self.currentPage.deactivate();
				}
				self.waitWheelStart();
				settings.getMyApplicationDetail(appInfo).then(function(appDetail) {
					_success(appDetail);
				}).fail(function(e) {
					_fail("Error loading application", e);
				});
			} catch (e) {
				_fail("Error switching application", e);
			}
		},
		/**
		 * Open a page
		 * !! Do not call directly - Use changePage
		 */
		_gotoPage: function(state, back) {
			var self = this;
			if (!self._pageLoader) {
				/**
				 * Page loader shared with vignette
				 * Load a page
				 */
				self._pageLoader = new pageLoader.Klass({
					waitStop: function() {
						self.waitWheelStop();
					},
					getRootElmt: function() {
						return self.$$elmt;
					},
					waitStart: function() {
						self.waitWheelStart();
					},
					getCurrentPage: function() {
						return self.currentPage;
					},
					setCurrentPage: function(page) {
						self.currentPage = page;
						if (self.isWelcomeApplication() || page.state.isLogin === true) {
							self.historyReset(page);
						} else if (page.state.name === self.homePageId) {
							// Destroy all cached pages except current home page
							log && log("Home page " + self.homePageId + " - Destroy all pages except current");
							pageHelper.removeAllPages(self.$$elmt, page);
						}
					},
					historyPush: function(state) {
						self.history.push(state);
						// Refresh browser history to keep only one page in history for tablet application
						if (self.pushState) {
							window.history.pushState({
								x: new Date()
							}, utils.UUID(), null);
						} else {
							window.history.replaceState({
								x: new Date()
							}, utils.UUID(), null);
						}
					},
					succeeded: function(dstPage, parentNotifInfo) {

						log && log("succeeded" + " - win=" + window.history.length + " - app=" + self.history.length);
						// Refresh browser history to keep only one page in histpry for tablet application
						// Call resize handler each time a page has been loaded for calculations
						uiutils.triggerResizeInternal();
						// call on page resize for calculation
						if (parentNotifInfo && parentNotifInfo.notifId) {
							/**
							 * If the child application wants to notify the parent it should return info for notification
							 * parentNotifInfo contain :
							 * 		notifId:  	with the notification id
							 * 		notifData: 	with data  needed for processing this event
							 * 		controlId: 	If action as been trigered by a control
							 * 		parentId: 	id of the page
							 * TODO - change the notification process to create one subscription per page to not notify inactive pages
							 * Currently we test if page is active before processing a notifications
							 */
							if (dstPage.id === parentNotifInfo.parentId) {
								notifications.publish(parentNotifInfo.notifId, parentNotifInfo.notifData, parentNotifInfo.controlId);
							} else {
								modal.error("Child page notification warning", "Parent page is not the current page");
							}
						}
					}
				});
			}
			if (state.isLogin === false && !globals.isLoggedIn()) {
				self.gotoLogin("Authentication is required");
			} else {
				self._pageLoader.load(state, back);
			}
		},
		historyReset: function(page) {
			var self = this;
			// Destroy all cached pages except page parameter
			pageHelper.removeAllPages(self.$$elmt, page);
			self.history = [];
		},
		/**
		 * Called by browser history.back
		 * !! never call this method directlty - Call window.back
		 */
		historyPop: function(event) {
			try {
				var self = this;
				log && log("History pop before" + " - win=" + window.history.length + " - app=" + self.history.length);
				// No back if a modal is open
				if (self._nbModals > 0) {
					event.preventDefault();
					return;
				}
				if (self.uuid === "root" || self.history.length === 0) {
					// No application has been loaded - Goto previous browser history
					// ?? return without preventDefault doesn't continue back action on browser side
					// -> We repost a back
					window.history.back();
					return;
				}
				// Remove current state
				var state = self.history.length > 0 ? self.history.pop() : null;
				if (state.isWelcomePage || state.isLogin) {
					// Homepage if login or welcome
					// ?? return without preventDefault doesn't continue back action on browser side
					// -> We repost a back
					window.history.back();
					return;
				} else {
					// Get previous state
					state = self.history.length > 0 ? self.history[self.history.length - 1] : null;
				}
				event.preventDefault();
				// Force pushState on display page - Last state has been removed
				self.pushState = true;
				// Open page
				setTimeout(function() {
					if (state.isWelcomePage) {
						self.gotoWelcomeApplication();
					} else {
						self._gotoPage(state, true);
					}
				}, 0);
			} catch (e) {
				modal.error("historyPop error", e);
			}
		},
		/** state - name of the page
		 * Option override standard pageInfo and allows to store a context
		 **/
		changePage: function(state, options) {
			var self = this;
			if (typeof state !== "string") throw new Error("changePage - string expected");
			return self._gotoPage(pageHelper.getPageInfo(state, options, self.currentPage));
		},

		logout: function() {
			var deferred = $.Deferred();
			var self = this;
			var _loggedOut = function() {
				log && log("User Logged out");
				globals.setUserCtx(null);
				deferred.resolve();
				self.gotoLogin("You have been logged out");
			};
			self.waitWheelStart();
			auth.logout().then(function(ok, message) {
				self.waitWheelStop();
				if (ok) {
					_loggedOut();
				} else {
					modal.error(message, function() {
						_loggedOut();
					});
				}
			}).fail(function(e) {
				self.waitWheelStop();
				modal.error("Logout error", e, function() {
					_loggedOut();
				});
			});
			return deferred.promise();
		},

		/**
		 * Refresh current page - called from eventListener
		 */
		refreshPage: function(options) {
			var self = this;
			if (!self.currentPage) throw new Error("No current page");
			self.currentPage.refresh(options).then(function() {
				//	Eventually do something in vignette control	
			}).fail(function(e) {
				self.modalError("Refresh page", e);
			});
		},
		/**
		 * One waiting plugin per page
		 */
		waitWheelStart: function() {
			uiutils.waitWheelStart(this._wait);
		},
		waitWheelStop: function() {
			uiutils.waitWheelStop(this._wait);
		},
		/**
		 * Also exported in globals
		 */
		modalError: function(title, e, cb) {
			modal.error(title, e, cb);
		}
	});


exports.Application = _Application;