"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var modal = require('syracuse-tablet/html/js/ui/modal');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("app");
var BreadCrumb = require('syracuse-tablet/html/js/application/breadcrumb').BreadCrumb;
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var userCtx = require('syracuse-tablet/html/js/application/userContext');
var auth = require('syracuse-tablet/html/js/application/authentication');

var _currentApp;

var _subscribe = function(self) {
	notifications.subscribe(self, ["sm.login", "sm.logout", "sm.switch.app"], 1);
};
var _Application = utils.defineClass(
	function($elmt, factory) {
		var self = this;
		self.breadCrumb = new BreadCrumb();
		self.$elmt = $elmt;
		self.currentPage = null;
		self.uuid = null;
		self.homePageId = "defhome";
		self._$config = {
			transition: null
		};
		self.factory = factory;
		// Set the current application - Only one application is allowed
		_currentApp = self;
	}, null, {
		/**
		 * Called after object has been created
		 **/
		init: function() {
			var self = this;
			// Can't be called in constructor
			self._bindEvents();
			self.dao = self.factory.createDaoApp(self);
			_subscribe(self);
			self.$elmt.show();
		},

		destroy: function() {
			var self = this;
			if (self.breadCrumb) self.breadCrumb.destroy();
			self.breadCrumb = null;
			$(window).unbind();
			notifications.unsubscribe();
			self.removeAllPages();
			self.currentPage = null;
			utils.unbindObj(self);
			utils.unbindObj(self.$elmt);
		},

		getTitle: function() {
			return this.dao.json.$application.applicationName;
		},

		/**
		 * User logged in
		 */
		_activate: function() {
			var self = this;
			log && log("Activate application");
			if (self.dao.isApplicationLoaded()) {
				log && log("Application loaded -> Goto appication home");
				self.gotoHome();
			} else {
				self.homePageId = "defhome";
				self.uuid = null;
				log && log("No application loaded -> Goto default home");
				/* redirect to home page */
				self.gotoHome();
			}
		},

		gotoHome: function() {
			var self = this;
			setTimeout(function() {
				self.changePage(self.homePageId || "defhome");
			});
		},

		_bindEvents: function() {
			var self = this;
			$(window).bind("popstate", function(event) {
				event.preventDefault();
				var state = event.originalEvent.state;
				log && log("popstate", "history.length=" + window.history.length, "State=" + (state != null));
				if (!state) return;
				setTimeout(function() {
					self._back(state);
				}, 0);
			});
			$(window).bind("hashchange", function() {
				log && log("hashchange", "history.length=" + window.history.length, "Hash=" + window.location.hash);
			});
			uiutils.bindActions(self);
		},

		$config: function(id) {
			return this._$config[id];
		},
		/**
		 * User has selected a new Syracuse mobile application
		 * appInfo json description of application
		 */
		notifSwitchApp: function(appInfo) {
			var self = this;
			/* Todo - check if application changed with id and timestamp */
			if (!appInfo) throw new Error("NULL appInfo");
			log && log("Switch to Syracuse Mobile Application " + appInfo.$application.applicationName);
			self.dao.setApplicationDesc(appInfo);
			self.homePageId = self.dao.getHomeDashboard() || "defhome";
			self.uuid = appInfo.$uuid;
			self.removeAllPages();
			self.gotoHome();
		},
		/**
		 * User logged in with success
		 */
		notifLogin: function(userProfile) {
			var self = this;
			if (!userProfile) throw new Error("NULL userProfile");
			var user = userCtx.create(userProfile);
			globals.setUserCtx(userProfile);
			self._activate();
		},

		notifLogout: function() {
			log && log("Application Notification Logout");
			globals.setUserCtx(null);
		},

		_actBreadCrumb: function() {
			this.breadCrumb.display();
		},


		/* Actions processed by application */
		_actBack: function() {
			window.history.back();
		},

		/* Actions processed by application */
		_actLogout: function() {
			var deferred = $.Deferred();
			modal.confirm("logout", function(confirmed) {
				if (confirmed) {
					uiutils.waitStart();
					auth.logout().then(function(ok, message) {
						if (ok) {
							notifications.publish("sm.logout");
							deferred.resolve({
								page: "login"
							});
							uiutils.waitStop();
						} else {
							uiutils.waitStop();
							modal.error(message, function() {
								deferred.resolve(null);
							});
						}
					}, function(e) {
						uiutils.waitStop();
						modal.error("Logout error", e, function() {
							deferred.resolve(null);
						});
					});
				} else {
					deferred.resolve(null);
				}
			});
			return deferred.promise();
		},

		_actClearCache: function() {
			var deferred = $.Deferred();
			modal.confirm("clearCache", function(confirmed) {
				if (confirmed) {
					uiutils.waitStart();
					globals.getCache().clearCache().always(function() {
						uiutils.waitStop();
						deferred.resolve(null);
					});
				} else {
					deferred.resolve(null);
				}
			});
			return deferred.promise();
		},

		_back: function(state) {
			var self = this;
			log && log("_back", "start", "\n" + JSON.stringify(state, null, 2));
			if (!state) throw new Error("Back", "Unexpected null history state");
			return self._gotoPage(state, true);
		},

		_gotoPage: function(state, back) {
			var deferred = $.Deferred();
			var self = this;
			var failed = function(e) {
				uiutils.waitStop();
				var name = typeof state === "string" ? state : state.name;
				modal.error("Application page [" + name + "] loading error", e, function() {
					deferred.reject();
				});
			};
			var succeeded = function(dstPage) {
				uiutils.waitStop();
				// Store page in browser history to enable back
				var state = dstPage.state;
				window.history.pushState(state, state.uuid, null);
				log && log("pushState", state.uuid, "history.length=" + window.history.length);
				deferred.resolve(dstPage);
			};
			try {
				if (state === null || typeof state != "object") throw new Error("Bad state object");
				log && log("_gotoPage", "start", "page: " + state.uuid);
				if (self.currentPage && self.currentPage.getProp("uuid") === state.uuid) {
					log && log("\tPage is current -> Skip");
					return;
				}
				uiutils.waitStart();
				var dstPage = $("#" + state.uuid).smPageController();
				// Page found -> Direct access -> Activate and remove childs
				if (dstPage != null) {
					log && log("\tPage found in dom -> Activate");
					if (!dstPage) throw new Error("Unexpected null page data");
					self._pageActivate(dstPage, function() {
						// After activation to keep current page for transition
						dstPage.destroySiblings();
						deferred.resolve(dstPage);
					}, back);
					return deferred.promise();
				}
				// Page not found -> Create and display
				dstPage = self.factory.createPage(self.$elmt, state);
				// TODO - Use href to allow reload or find a workaround by storing the sate into a hash in _sessionStorage
				dstPage.load().then(function() {
					self._pageActivate(dstPage, function() {
						succeeded(dstPage);
					}, back);
				}, function(e) {
					failed(e);
				});
			} catch (e) {
				failed(e);
			}
			return deferred.promise();
		},

		_pageActivate: function(page, cb, back) {
			var self = this;
			page.activate(self.currentPage, function() {
				if (self.currentPage) {
					if (back === true || self.currentPage.getProp("cached") !== true) {
						self.currentPage.destroy();
					} else {
						// Keep cached page only if not back - Ex: List -> Detail
						self.currentPage.deactivate();
					}
				}
				self.currentPage = page;
				if (page.state.home) {
					// Destroy all cached pages except current home page
					self.removeAllPages(page);
				}
				if (cb) cb();
			});
		},
		/**
		 * arguments : Pages to exclude
		 **/
		removeAllPages: function() {
			var self = this;
			var exclude = arguments;
			if (!self.$elmt) return;
			self.$elmt.find(".page").each(function(idx) {
				var page = $(this).smPageController();
				if (page && Array.prototype.indexOf.call(exclude, page) == -1) {
					page.destroy();
				}
			});
		},
		/** state - name of the page or history state object
		 * Option noverride standard pageInfo and allows to store a context
		 **/
		changePage: function(state, options) {
			var self = this;
			if (typeof state === "string") {
				log && log("changePage", state);
			}
			return _currentApp._gotoPage(self.getPageInfo(state, options));
		},

		getPageInfo: function(state, options) {
			var self = this;
			return self.dao.getPageInfo(state, options);
		}
	});


exports.Application = _Application;