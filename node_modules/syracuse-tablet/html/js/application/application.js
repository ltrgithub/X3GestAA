"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var modal = require('syracuse-tablet/html/js/ui/modal');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("app");
var BreadCrumb = require('syracuse-tablet/html/js/application/breadcrumb').BreadCrumb;
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var auth = require('syracuse-tablet/html/js/application/authentication');
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var pageLoader = require('syracuse-tablet/html/js/application/pageLoader');
var pageTemplates = require('syracuse-tablet/html/js/pages/html/pageTemplates');
var initContext = require('syracuse-tablet/html/js/init/initContext');
var settings = require('syracuse-tablet/html/js/application/settings');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');

var _subscribe = function(self) {
	notifications.subscribe(self, ["sm.context.changed", "sm.logout", "sm.switch.app", "sm.modal.open", "sm.modal.close"], 1);
};
var _Application = utils.defineClass(
	function($$elmt, factory) {
		var self = this;
		self.breadCrumb = new BreadCrumb();
		self.$$elmt = $$elmt;
		self.currentPage = null;
		self.uuid = null;
		self.homePageId = "defhome";
		self._$config = {
			transition: null,
			openLinkInVignette: false
		};
		self.factory = factory;
		self._pageLoader = null;
		self._nbModals = 0;
		self._wait = uiutils.waitWheelCreate($$elmt);
	}, null, {
		/**
		 * Called after object has been created
		 **/
		init: function() {
			var self = this;
			// Can't be called in constructor
			eventListener.bindEvents(self);
			self.dao = self.factory.createDaoApp(self);
			_subscribe(self);
			self.$$elmt.show();
		},

		destroy: function() {
			var self = this;
			if (self.breadCrumb) self.breadCrumb.destroy();
			if (self._wait) uiutils.waitWheelDestroy(self._wait);
			self.breadCrumb = null;
			notifications.unsubscribe();
			self.removeAllPages();
			self.currentPage = null;
			if (self._pageLoader = null) {
				self._pageLoader.destroy();
				self._pageLoader = null;
			}
			utils.unbindObj(self);
			utils.unbindObj(self.$$elmt);
			$(window).unbind();
		},

		getTitle: function() {
			return this.dao.getApplicationName();
		},

		/**
		 * User logged in
		 */
		_activate: function() {
			var self = this;
			log && log("Activate application");
			if (self.dao.isApplicationLoaded()) {
				log && log("Application loaded -> Goto appication home");
				self.gotoHome();
			} else {
				self.homePageId = "defhome";
				self.uuid = null;
				log && log("No application loaded -> Goto default home");
				/* redirect to home page */
				self.gotoHome();
			}
		},

		gotoHome: function() {
			var self = this;
			setTimeout(function() {
				self.changePage(self.homePageId || "defhome");
			});
		},

		$config: function(id) {
			return this._$config[id];
		},
		/**
		 * User has selected a new Syracuse mobile application
		 * appInfo json description of application
		 */
		notifSwitchApp: function(appInfo) {
			var self = this;
			var _fail = function(msg, e) {
				self.waitWheelStop();
				modal.error(msg, e, function() {
					if (self.currentPage) self.currentPage.activate();
				});
			};
			var _success = function(appDetail) {
				try {
					self.dao.setApplicationDesc(appDetail);
					self.homePageId = self.dao.getHomeDashboard() || "defhome";
					self.uuid = appDetail.$application.$uuid || utils.UUID();
					self.waitWheelStop();
					self.gotoHome();
				} catch (e) {
					_fail("Error loading new application", e);
				}
			};
			try {
				/* Todo - check if application changed with id and timestamp */
				if (!appInfo) throw new Error("notifSwitchApp - NULL appInfo");
				log && log("Switch to Syracuse Mobile Application " + appInfo.applicationName);
				if (self.currentPage) self.currentPage.deactivate();
				self.waitWheelStart();
				settings.getMyApplicationDetail(appInfo).then(function(appDetail) {
					_success(appDetail);
				}, function(e) {
					_fail("Error loading application", e);
				});
			} catch (e) {
				_fail("Error switching application", e);
			}
		},
		/**
		 * User, role, endpoint or language changed
		 */
		notifContextChanged: function(context) {
			var self = this;
			self._activate();
		},

		notifLogout: function() {
			log && log("Application Notification Logout");
			globals.setUserCtx(null);
		},

		notifModalOpen: function() {
			this._nbModals++;
			// console.log("notifModalOpen nbModals=" + this._nbModals)	
		},

		notifModalClose: function() {
			this._nbModals = Math.max(this._nbModals - 1, 0);
			// console.log("notifModalClose nbModals=" + this._nbModals)
		},

		hasModalOpen: function() {
			//  console.log("_nbModals=" + this._nbModals)
			return this._nbModals > 0;
		},

		_actBreadCrumb: function() {
			this.breadCrumb.display();
		},

		_actReload: function() {
			window.location.reload();
		},

		_actBack: function() {
			window.history.back();
		},
		// Switch role, endpoint, language
		_actSwitchContext: function() {
			var self = this;
			initContext.init(true, true).then(function(context) {}, function(e) {
				pageTemplates.resolveError(null, self.state.name, e);
			});
		},
		_actClearCache: function() {
			var self = this;
			var deferred = $.Deferred();
			modal.confirm("clearCache", function(confirmed) {
				if (confirmed) {
					self.waitWheelStart();
					globals.getCache().clearCache().always(function() {
						self.waitWheelStop();
						deferred.resolve(null);
					});
				} else {
					deferred.resolve(null);
				}
			});
			return deferred.promise();
		},

		back: function(state) {
			var self = this;
			log && log("back", "start", "\n" + JSON.stringify(state, null, 2));
			if (!state) throw new Error("Back", "Unexpected null history state");
			return self._gotoPage(pageLoader.stateDeserialize(state), true);
		},

		_gotoPage: function(state, back) {
			var self = this;
			if (!self._pageLoader) {
				/**
				 * Page loader shared with vignette
				 * Load a page
				 */
				self._pageLoader = new pageLoader.Klass({
					waitStop: function() {
						self.waitWheelStop();
					},
					getRootElmt: function() {
						return self.$$elmt;
					},
					waitStart: function() {
						self.waitWheelStart();
					},
					getCurrentPage: function() {
						return self.currentPage;
					},
					setCurrentPage: function(page) {
						self.currentPage = page;
						if (page.state.home) {
							// Destroy all cached pages except current home page
							self.removeAllPages(page);
						}
					},
					setHistory: function(state) {
						// Store page in browser history to enable back - accepts only json objects
						state = pageLoader.stateSerialize(state);
						window.history.pushState(state, state.uuid, null);
						log && log("pushState", state.uuid, "history.length=" + window.history.length);
					}
				});
			}
			return self._pageLoader.load(state, back);
		},
		/**
		 * arguments : Pages to exclude
		 **/
		removeAllPages: function() {
			var self = this;
			var exclude = arguments;
			if (!self.$$elmt) return;
			self.$$elmt.children(".s-m-page").each(function(idx) {
				var page = $(this).smPageController();
				if (page && Array.prototype.indexOf.call(exclude, page) == -1) {
					page.destroy();
				}
			});
		},
		/** state - name of the page or history state object
		 * Option noverride standard pageInfo and allows to store a context
		 **/
		changePage: function(state, options) {
			var self = this;
			if (typeof state === "string") {
				log && log("changePage", state);
			}
			return self._gotoPage(self.getPageInfo(state, options));
		},

		logout: function() {
			var deferred = $.Deferred();
			var self = this;
			self.waitWheelStart();
			auth.logout().then(function(ok, message) {
				self.waitWheelStop();
				if (ok) {
					notifications.publish("sm.logout");
					self.changePage("login");
					deferred.resolve();
				} else {
					modal.error(message, function() {
						self.changePage("login");
						deferred.resolve();
					});
				}
			}, function(e) {
				self.waitWheelStop();
				modal.error("Logout error", e, function() {
					self.changePage("login");
					deferred.resolve();
				});
			});
			return deferred.promise();
		},

		/**
		 * Refresh current page - called from eventListener
		 */
		refreshPage: function(options) {
			var self = this;
			if (!self.currentPage) throw new Error("No current page");
			self.currentPage.refresh(options).then(function() {
				//	Eventually do something in vignette control	
			}, function(e) {
				self.modalError("Refresh page", e);
			});;
		},

		getPageInfo: function(state, options) {
			return this.dao.getPageInfo(state, options);
		},

		// fullName: x3.erp.SUPERV.AQMCRUD.$details
		getPrototype: function(fullName) {
			var self = this;
			return self.dao.getPrototype(fullName);
		},

		/**
		 * One waiting plugin per page
		 */
		waitWheelStart: function() {
			uiutils.waitWheelStart(this._wait);
		},
		waitWheelStop: function() {
			uiutils.waitWheelStop(this._wait);
		},
		/**
		 * Also exported in globals
		 */
		modalError: function(title, e, cb) {
			modal.error(title, e, cb);
		}

	});


exports.Application = _Application;