"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("actionMgr");
var globals = require('syracuse-tablet/html/js/helpers/globals');
var dispatcher = require('syracuse-tablet/html/js/sdata/sdataDispatcher');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

/**
 * Set pageOpts with auto scroll value to preserve scrolling when we go from detail -> edit
 * We do the same for cancelEdit action in pageRegular when we go from edit -> detail
 */
var _preserveScrolling = function(page, link, pageOpts) {
	if (!page || !link || !pageOpts) return;
	var val = page.getScrollValue();
	// Auto-scroll - If we edit a page we keep the scrolling
	if (!isNaN(val) && val !== 0) {
		// 1.2 because the height of the page is higher in edit mode 
		// To improve or disable but to me it's great to keep the scrolling when we edit a page
		pageOpts["auto-scroll"] = page.getScrollValue() * 1.2;
	}
};
/**
 * Default message display
 * TODO - Message + detail
 */
var _displayMessage = function(title, data, cb) {
	if (data === null) data = "";
	if (jsutils.isError(data)) {
		data = data.message;
	} else if (typeof data === "string") {
		// Nothing
	} else {
		var diags = sdataUtils.scanDiagnoses(data);
		if (diags.length > 0) {
			var msg = [];
			diags.forEach(function(d) {
				msg.push(d.$message);
			});
			data = msg.join('\n');
		} else {
			data = JSON.stringify(data, null, 2);
		}
	};
	globals.getModal().info(title, data, cb);
};
/**
 * Manage action on links given by prototype
 * Used by footer/header/navigation panel
 */
var _Klass = utils.defineClass(

	function(controller, toolbar, options) {
		this.options = options || {};
		this.toolbar = toolbar;
		this.controller = controller;
		this._initLinks();
	}, null, {

		destroy: function() {
			this.options = null;
			this.controller = null;
		},
		/**
		 * To update links if by example deviceType changed
		 */
		_initLinks: function() {
			var self = this;
			var deviceType = globals.getSiteLayout().getDeviceType();
			var beginLinks = [];
			if (self.options.addMultiSelection && !self.controller.isEditMode()) {
				beginLinks.push(self.getMultiSelectionLink(self.options.addMultiSelection));
			}
			var toolBarLinks = self.controller.getToolbarLinks(self.toolbar) || [];
			var endLinks = [];
			if (self.options.addCancelEditAction && self.controller.isEditMode()) {
				endLinks.push(self.getCancelEditAction(self.options.addCancelEditAction));
			}
			self.links = jsutils.concatArrays(beginLinks, toolBarLinks, endLinks);
		},
		/**
		 * Add action to links
		 */
		getCancelEditAction: function(actionName) {
			return {
				name: "$canceledit",
				icon: fontUtils.getIconByName("$cancelEdit"),
				isClientAction: true,
				action: actionName || "cancelEdit",
				title: locale.text("action.cancelEdit"),
				$uuid: utils.UUID()
			};
		},
		getMultiSelectionLink: function() {
			return {
				name: "$multiSelection",
				icon: fontUtils.getIconByName("$multiSelection"),
				isClientAction: true,
				action: globals.ACTMULTISEL,
				css: ["s-m-ismultisel"],
				title: locale.text("action.multiselect"),
				$uuid: utils.UUID()
			};
		},
		getLinks: function() {
			return this.links;
		},
		hasLinks: function() {
			return this.links && this.links.length > 0;
		},
		/**
		 *  Triggers a link action/navigation and resolve/reject
		 *  		displayed eventually a message if diagnoses have been returned by server
		 *  uuid
		 *  		Id of the link which has been stored in the html (data-params)
		 *  page: optional - page that will be notified with data returned by action
		 *  	  mandatory for cancelEdit action
		 * 	options
		 * 		For a navigation link
		 * 			If options.noRedirection == true resolve with the following data
		 * 				{
		 * 					gotoPage:{
		 * 						name:"PageName",
		 * 						options{Pages options}
		 * 					}
		 * 				}
		 * 				It's the caller that calls application.changepage
		 * 			Else it does redirection to the target page
		 */
		triggerLink: function(uuid, page) {
			var deferred = $.Deferred();
			try {
				var self = this;
				// reads link info
				var link = null;
				self.getLinks().some(function(l) {
					if (l.$uuid === uuid) {
						link = l;
						return true;
					}
				});
				if (!link) return;
				// CLIENT ACTION - NON SDATA ACTION
				if (link.isClientAction) {
					if (!page) throw new Error("triggerLink - Page is expected");
					self._notifyAndResolve(page, deferred, true, link);
					return;
				}
				// ACTION WITH CONFIRMATION
				if (link.$confirm) {
					// Action with confirmation asked by server
					globals.getModal().simpleConfirm(link.$confirm, function(confirmed) {
						if (confirmed) {
							self._doLinkAction(deferred, page, link);
						}
					});
					return;
				}
				/**
				 * $isAction comes from prototype (true for save, delete...)
				 * If url contains $services $isAction is set to true (see prototype.getLinks)
				 * 		$services urls are considered as actions
				 * !! No url and $isAction means child page action
				 */
				// ACTION
				if (link.$isAction) {
					// Action which stays on the same page
					self._doLinkAction(deferred, page, link);
					return;
				}
				// NAVIGATION
				if (link.page) {
					// Navigation to a page
					var pageOpts = {
						"sdata-url": link.sDataUrl,
						"sdata-method": link.$method
					};
					if (page) {
						// Auto-scroll - If we edit a page we keep the scrolling
						if (page.state.name.replace(".$details", ".$edit") === link.page) {
							_preserveScrolling(page, link, pageOpts);
						}
					};
					if (self.options.noRedirection === true) {
						self._notifyAndResolve(page, deferred, true, link, {
							gotoPage: {
								name: link.page,
								options: pageOpts
							}
						}, self.options);
					} else {
						setTimeout(function() {
							globals.getApplication().changePage(link.page, pageOpts);
						});
						// Page is changed so it's not necessary
						deferred.resolve();
					}
					return;
				}
				// Unexpected case
				_displayMessage("Unexpected link type", link, function() {
					self._notifyAndResolve(page, deferred, false, link, null, self.options);
				});
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		/**
		 * Send an action to server and process result
		 * Resolve/reject deferred
		 */
		_doLinkAction: function(deferred, page, link) {
			var self = this;
			var _end = function(success, data) {
				self._notifyAndResolve(page, deferred, success, link, data);
			};
			try {
				// Validate the data before processing - Synchronous call
				if (page && page.validateBeforeActionLink && page.validateBeforeActionLink(link) === false) {
					// Just resolve - No notification because action has not been sent
					deferred.resolve(false);
					return;
				}
				if (link.sDataUrl) {
					if (page) page.waitWheelStart();
					var payload = page ? page.dao.getActionPayload(link) : null;
					dispatcher.dispatch({
						$url: link.sDataUrl,
						$method: link.$method || "GET"
					}, payload).then(function(data) {
						if (page) page.waitWheelStop();
						// True for success
						_end(true, data);
					}).fail(function(e) {
						if (page) page.waitWheelStop();
						if (!jsutils.isError(e) && $.isPlainObject(e)) {
							// false for fail
							_end(false, e);
						} else {
							// Exception - we display the message
							_displayMessage("Action '" + link.title + "' failed", e, function() {
								deferred.reject(e);
							});
						}
					});
				} else {
					// Child page action - True for success - no data
					_end(true);
				}
			} catch (e) {
				_displayMessage("Action '" + link.title + "' javascript exception", e, function() {
					deferred.reject(e);
				});
			}
		},
		/**
		 * Notify (the page controller) to do some stuff after an action succeeded
		 * Save/Delete...
		 */
		_notifyAndResolve: function(page, deferred, success, link, result) {
			if (page) {
				notifications.notifyController("sm.action.link", page, success, link, result, this.options);
			}
			if (deferred) {
				deferred.resolve(success, link, result, this.options);
			}
		}
	});

exports.Klass = _Klass;

/**
 * toolbar	header, footer, actionpanel...
 * opts
 * 			addCancelEditAction
 * 				Name aof action to trigger (headerAction; footerAction...)
 * 				Link is not added if null
 * 			noMessage
 */
exports.create = function(controller, toolbar, opts) {
	return new _Klass(controller, toolbar, opts || {});
	am.updateLinks(toolbar);
	return am;
};