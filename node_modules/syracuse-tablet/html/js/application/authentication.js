"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("app");
var globals = require('syracuse-tablet/html/js/helpers/globals');
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
var sdataCommonRes = require('syracuse-tablet/html/js/sdata/sdataCommonResources');
var base64 = require('syracuse-tablet/html/js/helpers/base64');
var locale = null; // On demand

var _getText = function(id) {
	if (!locale) {
		locale = require('syracuse-tablet/html/js/helpers/locale');
	}
	return locale.text(id);
};
/**
 * Login services are temporarily implemented in requireJSDispatcher._js
 * - tabletCheckLogin
 * 		Return 403 if login failed because 401 forces the browser to display the authentication dialog
 * - tabletDoLogin
 *      Return user's profile if OK
 */
var _config = {
	svcLogin: "/auth/login/submit",
	svcLogout: "/logout",
	svcForgetMe: "/auth/forgetMe/submit",
	userProfile: "/sdata/syracuse/collaboration/syracuse/userProfiles/$service/current",
	svcReconnectGetToken: "/requireJS/reconnect?getToken",
	svcReconnectSetToken: "/requireJS/reconnect?setToken",

};

/**
 * True if user is logged in
 * Resolves with user profile or null
 * Reject if error
 */
var _check = function() {
	return ajax("GET", _config.userProfile, null, null, {
		dontCatchHttp401: true
	}).then(function(result) {
		if (result && result.status === 200 && result.responseJSON) {
			return result.responseJSON;
		} else {
			return null;
		}
	});
};
var _getLoginHeader = function(user, password) {
	return {
		"Authorization": 'Basic ' + base64.encode(user + ":" + password),
		"accept": "application/json"
	};
};
var _getLoginData = function(rememberMe) {
	var data = {};
	// Force to reconnect with a user/pwd
	// If we don't set forgetme=true, user/pwd won't be checked if cookie syracuse.sid.login is still valid
	// If we call authentication from login page we disable the login cookie
	data["forgetme"] = true;
	if (rememberMe === true) {
		// Enable remember me one credentials s have been validated
		data["keepConnected"] = true;
	}
	return data;
};
/**
 * Resolve with user's profile and reconnect token
 * Reject with error and offlineMode true/false
 **/
var _login = function(user, password, rememberMe) {
	var deferred = $.Deferred();
	ajax("POST", _config.svcLogin, _getLoginData(rememberMe), _getLoginHeader(user, password), {
		dontCatchHttp401: true
	}).then(function(result) {
		if (result.status === 0) {
			deferred.reject(_getText("no.connection"), true);
		}
		if (result.status !== 200) {
			var e = result.responseJSON && result.responseJSON.$diagnoses && result.responseJSON.$diagnoses.length > 0 ? result.responseJSON : "Httpstatus: " + result.status;
			deferred.reject(e);
		}
		sdataCommonRes.getUserProfile().then(function(profile) {
			if (profile) {
				deferred.resolve(profile);
			} else {
				deferred.reject("Unexpected null user profile");
			}
		}).fail(function(e) {
			deferred.reject(e);
		});
	}).fail(function(e) {
		deferred.reject(e);
	});
	return deferred.promise();
};
/**
 * Disable automatic login
 */
var _forgetme = function() {
	var deferred = $.Deferred();
	ajax("POST", globals.baseLocation().host + _config.svcForgetMe, {
		forgetme: true
	}).then(function(result) {
		log && log("_forgetme succeeded");
		deferred.resolve(true);
	});
	return deferred.promise();
};
/**
 * Logout
 */
var _logout = function(forgetme) {
	var deferred = $.Deferred();
	log && log("_logout forgetMe=", forgetme);
	ajax("POST", globals.baseLocation().host + _config.svcLogout).then(function(result) {
		if (forgetme) {
			// Call the service that disable the login cookie - Normally we should be able to reconnect once we've called this service
			_forgetme();
		}
		var msg;
		// There's a bug in Syracuse sessionmanager which returns sometimes 401 on logout - Aurelien is aware
		// We consider that logout is ok and do not display a message
		var isSuccess = result.isSuccess || result.status === 401 || result.status === 0;
		if (!isSuccess) {
			msg = "Httpstatus: " + result.status;
			var diag = result.responseJSON ? result.responseJSON.$diagnoses : null;
			if (diag) {
				diag.forEach(function(d) {
					msg += "\n" + d.$message;
				});
			}
		}
		deferred.resolve(isSuccess, msg);
	});
	return deferred.promise();
};

/**
 * Resolve with a reconnect token used by _reconnectSetToken
 */
var _reconnectGetToken = function() {
	var deferred = new $.Deferred();
	ajax("GET", _config.svcReconnectGetToken, null, {
		"accept": "application/json"
	}).always(function(result) {
		if (result && result.status === 200 && result.headers) {
			var token = result.headers["x-reconnect-token"];
			log && log("_reconnectGetToken", token);
			deferred.resolve(token);
		} else {
			deferred.resolve(null);
		}
	});
	return deferred.promise();
};

/**
 * Call a service that set the session cookie contained in reconnectToken
 */
var _reconnectSetToken = function(reconnectToken) {
	var deferred = new $.Deferred();
	ajax("GET", _config.svcReconnectSetToken, null, {
		"accept": "application/json",
		"x-reconnect-token": reconnectToken
	}).then(function(result) {
		log && log("_reconnectSetToken succeeded", reconnectToken);
		deferred.resolve();
	}).fail(function(result) {
		log && log("_reconnectSetToken failed");
		deferred.resolve();
	});
	return deferred.promise();
};


/*
 * Sage ID signin
 */
var _sageidsigin = function() {
	window.location.href = "/auth/sage-id/signOnStart";
};

exports.check = _check;
exports.login = _login;
exports.logout = _logout;
exports.reconnectGetToken = _reconnectGetToken;
exports.reconnectSetToken = _reconnectSetToken;
exports.sageidsignin = _sageidsigin;