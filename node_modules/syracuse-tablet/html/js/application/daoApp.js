"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var dashboardArticle = require('syracuse-tablet/html/js/helpers/dashboardArticle');
var prototypeParser = require('syracuse-tablet/html/js/helpers/prototypeParser');
var pageHelper = require('syracuse-tablet/html/js/application/pageHelper');

/**
 * Class that manage access to application DATA
 *  	appli: 		Application object
 * !!use DAO methods instead of dealing directly with JSON
 */
var _Dao = function(appli) {
	var self = this;
	self._appli = appli;
	self.json = null;
	/**
	 * Config - TODO
	 */
	self.getConfig = function() {

	};
	self.getSettings = function() {

	};
	self.destroy = function() {
		self._appli = null;
	};
	/**
	 *Returns the JSON description of application
	 */
	self.getJsonDescr = function() {
		if (!self.json) {
			/* Load the last used application from local DB */
		}
		return self.json;
	};
	/**
	 * Set the JSON description of application
	 */
	self.setJsonDescr = function(json) {
		if (json) {
			self.json = json;
			return pageHelper.registerAppPages(json);
		}
	};
	/**
	 * Returns JSON description article/prototype for a regular page (id=AQMCRUDM.$query)
	 */
	self.getRegularPageInfo = function(id) {
		var info = self.json.$pages[id];
		if (!info) throw new Error('Page not found - PageId=' + id);
		if (!info.$page) throw new Error('Bad page description - PageId=' + id);
		if (!info.$page.$prototype) throw new Error('Prototype is NULL - PageId=' + id);
		/* Temporarily we return only $article and prototype 
		 * $article is calculated from prototype
		 * TODO - check if $article - Convert desktop to tablet article
		 */
		var proto = info.$page.$prototype;
		var article = prototypeParser.proto2Article(proto);
		if (false && id.smEndsWith("query") && proto.$properties.$resources) {
			// Temporarily for test - we transform the query into a detail
			proto.$properties = proto.$properties.$resources.$item.$properties;
		}
		return {
			article: article,
			prototype: prototype.create(proto),
			jsonInfo: info
		};
	};
	/**
	 * Returns the prototype and article for a dashBoard
	 * prototype.$properties gives the description of vignettes 'fields'
	 */
	self.getDashboardInfo = function(dashBoardId) {
		var dash = self.json.$dashboards[dashBoardId];
		if (!dash) throw new Error('Dashboard not found ' + dashBoardId);
		/* Generates article form dashBoard description*/
		var article = dashboardArticle.getDashboardArticle(dash);
		/* Generates proto form dashBoard description*/
		var proto = {
			$properties: {}
		};
		var vignetteIds = Object.keys(dash.$vignettes || []);
		for (var i = 0; i < vignetteIds.length; i++) {
			var vignetteId = vignetteIds[i];
			var property = $.extend({}, dash.$vignettes[vignetteId]);
			var gadgetId = property.$uuid;
			property.$gadget = self.json.$gadgets[gadgetId];
			if (property.$gadget) {
				property.$gadget = $.extend({}, property.$gadget);
				// Set gadget uuid
				property.$gadget.$uuid = gadgetId;
				// Set vignette uuid
				property.$uuid = vignetteId;
				// Set type - "application/x-string"
				property.$type = "application/x-vignette";
				// Readable dom uid
				property.domId = utils.readableuid("vgnt", property.$gadget.$type);
			} else {
				throw new Error('Dashboard ' + dashBoardId + ' gadget not found - $uuid: ' + gadgetId);
			}
			proto.$properties[vignetteId] = property;
		}
		return {
			article: $.extend({}, dash.$article),
			prototype: prototype.create(proto)
		};
	};
	/**
	 * Returns a gadget
	 */
	self.getGadget = function(id, clone) {
		var g = self.json.$gadgets[id];
		if (g && clone === true) g = $.extend({}, true, g);
		// We need the uuid in the gadget to build url links (data-gadget-id)
		if (!g.$uuid) g.$uuid = id;
		return g;
	};
};

exports.Dao = _Dao;