"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var dashboardArticle = require('syracuse-tablet/html/js/helpers/dashboardArticle');
var prototypeParser = require('syracuse-tablet/html/js/helpers/prototypeParser');
var pageHelper = require('syracuse-tablet/html/js/application/pageHelper');
var clientContract = require('syracuse-tablet/html/js/sdata/entities/clientContract');

/**
 * Class that manage access to application DATA
 *  	appli: 		Application object
 * !!use DAO methods instead of dealing directly with JSON
 */
var _Dao = utils.defineClass(
	function(appli) {
		var self = this;
		self._appli = appli;
		self.appMetaData = null;
	}, null, {

		destroy: function() {
			var self = this;
			self._appli = null;
		},
		/**
		 *Returns the JSON description of application
		 */
		isApplicationLoaded: function() {
			var self = this;
			return (self.appMetaData != null);
		},

		/**
		 * Set the JSON description of application
		 */
		setApplicationDesc: function(appMetaData) {
			var self = this;
			if (appMetaData) {
				self.appMetaData = appMetaData;
				pageHelper.registerPages(self.appMetaData);
			}
		},

		getApplicationName: function() {
			var self = this;
			return self.appMetaData.$application.applicationName;
		},

		getHomeDashboard: function() {
			var self = this;
			var homeId;
			if (self.appMetaData && self.appMetaData.$dashboards) {
				for (var p in self.appMetaData.$dashboards) {
					var data = self.appMetaData.$dashboards[p];
					if (p === self.appMetaData.$application.$homeDashboard.$uuid) {
						homeId = p + ".$dashboard";
					}
				}
			}
			return homeId;
		},

		getPageInfo: function(state, options) {
			var self = this;
			var pi = clientContract.getPageInfo(state, options);
			if (pi) {
				return pi;
			}

			var name = state;
			if (state === "home") {
				name = self.getHomeDashboard();
			}
			pi = pageHelper.getPageInfo(name, options);
			if (!pi && state !== "home" && options && options.vignette !== true) {
				name = self.getHomeDashboard();
				pi = pageHelper.getPageInfo(name, true);
			}
			if (!pi) {
				throw new Error("Page[" + state + "] not found");
			}
			return pi;
		},

		/**
		 * Returns JSON description article/prototype for a regular page (id=AQMCRUDM.$query)
		 */
		getRegularPageInfo: function(id) {
			var self = this;
			var info;

			// Try to get client side implementation first
			info = clientContract.getRegularPageInfo(id);
			if (!info) {
				info = self.appMetaData.$pages[id];
			}

			if (!info) throw new Error('Page not found - PageId=' + id);
			if (!info.$page) throw new Error('Bad page description - PageId=' + id);
			if (!info.$page.$prototype) throw new Error('Prototype is NULL - PageId=' + id);

			var proto = info.$page.$prototype;
			var article = info.$page.$article || prototypeParser.proto2Article(proto);

			return {
				article: article,
				prototype: prototype.create(proto),
				jsonInfo: info
			};
		},

		/**
		 * Returns the prototype and article for a dashBoard
		 * prototype.$properties gives the description of vignettes 'fields'
		 */
		getDashboardInfo: function(dashBoardId) {
			var self = this;
			var dash;

			dash = clientContract.getDashboardInfo(dashBoardId);
			if (!dash) {
				dash = self.appMetaData.$dashboards[dashBoardId];
			}

			if (!dash) throw new Error('Dashboard not found ' + dashBoardId);
			/* Generates article form dashBoard description*/
			var article = dashboardArticle.getDashboardArticle(dash);
			/* Generates proto form dashBoard description*/
			var proto = {
				$properties: {}
			};
			var vignetteIds = Object.keys(dash.$vignettes || []);
			for (var i = 0; i < vignetteIds.length; i++) {
				var vignetteId = vignetteIds[i];
				var property = $.extend({}, dash.$vignettes[vignetteId]);
				var gadgetId = property.$uuid;
				property.$gadget = self.appMetaData.$gadgets[gadgetId];
				if (property.$gadget) {
					property.$gadget = $.extend({}, property.$gadget);
					// Set gadget uuid
					property.$gadget.$uuid = gadgetId;
					// Set vignette uuid
					property.$uuid = vignetteId;
					// Set type - "application/x-string"
					property.$type = "application/x-vignette";
					// Readable dom uid
					property.domId = utils.readableuid("vgnt", property.$gadget.$type);
				} else {
					throw new Error('Dashboard ' + dashBoardId + ' gadget not found - $uuid: ' + gadgetId);
				}
				proto.$properties[vignetteId] = property;
			}
			return {
				article: $.extend({}, dash.$article),
				prototype: prototype.create(proto)
			};
		},

		/**
		 * Returns a gadget
		 */
		getGadget: function(id, clone) {
			var self = this;
			var g = self.appMetaData.$gadgets[id];
			if (g && clone === true) g = $.extend({}, true, g);
			// We need the uuid in the gadget to build url links (data-gadget-id)
			if (!g.$uuid) g.$uuid = id;
			return g;
		}
	});

exports.Dao = _Dao;