"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var dashboardArticle = require('syracuse-tablet/html/js/helpers/dashboardArticle');
var prototypeParser = require('syracuse-tablet/html/js/helpers/prototypeParser');
var pageHelper = require('syracuse-tablet/html/js/application/pageHelper');
var clientContract = require('syracuse-tablet/html/js/sdata/entities/clientContract');
var globals = require('syracuse-tablet/html/js/helpers/globals');

/**
 * Class that manage access to application DATA
 *  	appli: 		Application object
 * !!use DAO methods instead of dealing directly with JSON
 */
var _Dao = utils.defineClass(
	function(appli) {
		var self = this;
		self._appli = appli;
		self.appMetaData = null;
	}, null, {

		destroy: function() {
			var self = this;
			self._appli = null;
		},
		/**
		 *Returns the JSON description of application
		 */
		isApplicationLoaded: function() {
			var self = this;
			return (self.appMetaData != null);
		},

		/**
		 * Set the JSON description of application
		 */
		setApplicationDesc: function(appMetaData) {
			var self = this;
			if (appMetaData) {
				self.appMetaData = appMetaData;
				pageHelper.registerPages(self.appMetaData);
			}
		},

		getApplicationName: function() {
			var self = this;
			return self.appMetaData.$application.applicationName;
		},

		getHomeDashboard: function() {
			var self = this;
			var homeId;
			if (self.appMetaData && self.appMetaData.$dashboards) {
				for (var p in self.appMetaData.$dashboards) {
					var data = self.appMetaData.$dashboards[p];
					if (p === self.appMetaData.$application.$homeDashboard.$uuid) {
						homeId = p + ".$dashboard";
					}
				}
			}
			return homeId;
		},

		/**
		 * Get information on page kind: html/prototype based, etc
		 */
		getPageInfo: function(state, options) {
			var self = this;
			var pi = clientContract.getPageInfo(state, options);
			if (pi) {
				return $.smResolve(pi);
			}

			var name = state;
			if (state === "home") {
				name = self.getHomeDashboard();
			}
			pi = pageHelper.getPageInfo(name, options);
			if (pi) {
				return $.smResolve(pi);
			}

			/*
				throw new Error("Page[" + state + "] not found");
			 */
			pi = pageHelper.getPageInfo(name, options, {
				home: false,
				type: "regular",
				cached: false,
				refreshed: false,
				appId: "root",
				changeHash: false
			});
			return $.smResolve(pi);
		},

		/**
		 * Returns JSON description article/prototype for a regular page (id=AQMCRUDM.$query)
		 */
		getRegularPageInfo: function(id) {
			var self = this;
			// Try to get client side implementation first
			return clientContract.getRegularPageInfo(id)
				.then(function(info) {
					if (info) {
						return info;
					}
					return self.getPageMetaData(id);
				})
				.then(function(info) {
					if (!info) {
						// This is intended to get prototypes from the server in case representations
						// are used in client side only applications that point to server side entities
						// In real world applications, this will never be used, it's only to simplyfy setup up testcases
						return self.fetchRemotePrototype(id);
					}
					return info;
				})
				.then(function(info) {
					if (!info) {
						return $.smReject(new Error('Page not found - PageId=' + id));
					}
					if (!info.$page) {
						return $.smReject(new Error('Bad page description - PageId=' + id));
					}
					if (!info.$page.$prototype) {
						return $.smReject(new Error('Prototype is NULL - PageId=' + id));
					}
					return info;
				})
				.then(function(info) {
					var proto = info.$page.$prototype;
					var article = info.$page.$article || prototypeParser.proto2Article(proto);

					return {
						article: article,
						prototype: prototype.create(proto)
					};
				});
		},

		getPageMetaData: function(id) {
			var self = this;
			if (self.appMetaData.$pages) {
				return $.smResolve(self.appMetaData.$pages[id]);
			}
			return $.smResolve(null);
		},

		fetchRemotePrototype: function(id) {
			var self = this;
			var base = globals.baseLocation();

			var segs = id.split(".");
			var ep = segs.slice(0, 3).join("/");
			var repr = segs.slice(3, 5).join(".");
			var url = base.host + "/mobile1/" + ep + "/$prototypes('" + repr + "')";

			return ajax("GET", url)
				.then(function(data) {
					var page = {
						$cache: {
							cacheType: "$auto"
						},
						$page: {
							$prototype: data.responseJSON
						}
					};
					// remember as if is was available offline
					self.appMetaData.$pages = self.appMetaData.$pages || {};
					self.appMetaData.$pages[id] = page;
					return page;
				}, function(e) {
					return e;
				});
		},

		/**
		 * Returns the prototype and article for a dashBoard
		 * prototype.$properties gives the description of vignettes 'fields'
		 */
		getDashboardInfo: function(dashBoardId) {
			var self = this;
			var dash;

			dash = clientContract.getDashboardInfo(dashBoardId);
			if (!dash) {
				dash = self.appMetaData.$dashboards[dashBoardId];
			}

			if (!dash) throw new Error('Dashboard not found ' + dashBoardId);
			/* Generates article form dashBoard description*/
			var article = dashboardArticle.getDashboardArticle(dash);
			/* Generates proto form dashBoard description*/
			var proto = {
				$title: dash.$title,
				$description: dash.$description,
				$properties: {}
			};
			var vignetteIds = Object.keys(dash.$vignettes || []);
			for (var i = 0; i < vignetteIds.length; i++) {
				var vignetteId = vignetteIds[i];
				var property = $.extend({}, dash.$vignettes[vignetteId]);
				var gadgetId = property.$uuid;
				property.$gadget = self.appMetaData.$gadgets[gadgetId];
				if (property.$gadget) {
					property.$gadget = $.extend({}, property.$gadget);
					// Set gadget uuid
					property.$gadget.$uuid = gadgetId;
					// Set vignette uuid
					property.$uuid = vignetteId;
					// Set type - "application/x-string"
					property.$type = "application/x-vignette";
					// Readable dom uid
					property.domId = utils.readableuid("vgnt", property.$gadget.$type);
				} else {
					property.$gadget = {
						$uuid: gadgetId,
						$type: "$gadgetMissing"
					};
					property.$uuid = vignetteId;
					property.$type = "application/x-vignette";
					property.domId = utils.readableuid("vgnt", property.$gadget.$type);

				}
				proto.$properties[vignetteId] = property;
			}
			return {
				article: $.extend({}, dash.$article),
				prototype: prototype.create(proto)
			};
		},

		/**
		 * Returns a gadget
		 */
		getGadget: function(id, clone) {
			var self = this;
			var g = self.appMetaData.$gadgets[id];
			if (g && clone === true) g = $.extend({}, true, g);
			// We need the uuid in the gadget to build url links (data-gadget-id)
			if (!g.$uuid) g.$uuid = id;
			return g;
		},

		// fullName: x3.erp.SUPERV.AQMCRUD.$details
		getPrototype: function(fullName) {
			var self = this;
			return self.appMetaData.$pages[fullName].$page.$prototype;
		}
	});

exports.Dao = _Dao;