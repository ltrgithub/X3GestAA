"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var dashboardUtils = require('syracuse-tablet/html/js/helpers/dashboardUtils');
var pageHelper = require('syracuse-tablet/html/js/application/pageHelper');
var clientContract = require('syracuse-tablet/html/js/sdata/entities/clientContract');
var Gadget = require('syracuse-tablet/html/js/application/gadget').Klass;
var sdataHttp = require('syracuse-tablet/html/js/sdata/sdataHttp');
var constants = require('syracuse-tablet/html/js/helpers/constants');

/**
 * Class that manage access to application DATA
 *  	appli: 		Application object
 * !!use DAO methods instead of dealing directly with JSON
 */
var _Dao = utils.defineClass(
	function(appli) {
		var self = this;
		self._appli = appli;
		self.appMetaData = null;
	}, null, {

		destroy: function() {
			var self = this;
			self._appli = null;
		},
		/**
		 *Returns the JSON description of application
		 */
		isApplicationLoaded: function() {
			var self = this;
			return (self.appMetaData != null);
		},

		/**
		 * Set the JSON description of application
		 */
		setApplicationDesc: function(appMetaData) {
			var self = this;
			if (appMetaData) {
				self.appMetaData = appMetaData;
				pageHelper.registerPages(self.appMetaData);
			}
		},

		getApplicationName: function() {
			var self = this;
			return self.appMetaData && self.appMetaData.$application.applicationName || "";
		},

		getHomeDashboard: function() {
			var self = this;
			var homeId;
			if (self.appMetaData && self.appMetaData.$dashboards) {
				for (var p in self.appMetaData.$dashboards) {
					var data = self.appMetaData.$dashboards[p];
					if (data.$dashboardName === self.appMetaData.$application.$homeDashboard.dashboardName) {
						homeId = data.$dashboardName + "." + constants.DASHBOARD_PAGE_FACET;
					}
				}
			}
			return homeId;
		},
		/**
		 * Returns JSON description article/prototype for a regular page (id=AQMCRUDM.$query)
		 * 	state:	page state
		 */
		getRegularPageInfo: function(state) {
			var self = this;
			state.options = state.options || {};
			var deferred = $.Deferred(),
				registerPage;
			try {
				// Try to get client side implementation first
				clientContract.getRegularPageInfo(state.name)
					.then(function(info) {
						if (info != null) {
							// info!= null -> Test entities page
							registerPage = true;
							return info;
						} else {
							return self.getPageMetaData(state.name);
						}
					})
					.then(function(info) {
						if (!info) {
							// This is intended to get prototypes from the server in case representations
							// are used in client side only applications that point to server side entities
							// In real world applications, this will never be used, it's only to simplyfy setup up testcases
							registerPage = true;
							return sdataHttp.fetchRemotePrototype(state.name).then(function(proto) {
								return self.registerAdditionalPage(state.name, proto, null);
							});
						}
						return info;
					})
					.then(function(info) {
						if (!info) {
							throw new Error('Page not found - PageId=' + state.name);
						}
						if (!info.$page) {
							throw new new Error('Bad page description - PageId=' + state.name);
						}
						if (!info.$page.$prototype) {
							throw new new Error('Prototype is NULL - PageId=' + state.name);
						}
						return info;
					})
					.then(function(info) {
						if (registerPage) {
							// We register the page if it has been loaded - test pages
							var newState = pageHelper.registerRegularPage(state.name, info);
							// We refresh state with newState properties
							for (var p in newState) {
								if (state[p] == null || state[p] !== newState[p]) state[p] = newState[p];
							}
						}
						// layout:
						// 1 - as defined as sub node in dash-board layout
						// 2 - as coming from the page definition (entity)
						// 3- generate s.th.
						var proto = info.$page.$prototype;
						proto = $.isPlainObject(proto) ? prototype.create(proto) : proto;
						deferred.resolve({
							article: state.options.article || info.$page.$article || proto.toArticle(),
							prototype: proto
						});
					}).fail(function(e) {
						deferred.reject(e);
					});
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		getPageMetaData: function(id) {
			var self = this;
			if (self.appMetaData.$pages) {
				return $.smResolve(self.appMetaData.$pages[id]);
			}
			return $.smResolve(null);
		},

		/**
		 * Returns the prototype and article for a dashBoard
		 * prototype.$properties gives the description of vignettes 'fields'
		 */
		getDashboardInfo: function(dashBoardId) {
			var self = this;

			return $.smResolve()
				.then(function() {
					var dash = self.appMetaData.$dashboards[dashBoardId];
					if (!dash) {
						throw new Error('Dashboard not found ' + dashBoardId);
					}
					return dash;
				})
				.then(function(dash) {
					if (dash && dash.$update) {
						return dash.$update(dash);
					} else {
						return dash;
					}
				})
				.then(function(dash) {
					var article = dash.$article;
					if (!article) {
						article = dashboardUtils.getDashboardArticle(dash);
					}
					return {
						article: $.extend({}, article),
						prototype: dashboardUtils.getDashboardProto(dash, self)
					};
				});
		},

		getGadgetData: function(id) {
			var self = this;
			var g = (self.appMetaData.$gadgets && self.appMetaData.$gadgets[id]);
			if (!g.$uuid) {
				g.$uuid = id;
			}
			return g;
		},
		/**
		 * Returns a gadget
		 */
		getGadget: function(id) {
			var self = this;
			var g = self.getGadgetData(id);
			return new Gadget(g);
		},

		// fullName: x3.erp.SUPERV.AQMCRUD.$details
		getPrototype: function(fullName) {
			var self = this;
			if (self.appMetaData == null) throw new Error("Get page prototype error - No application metadata");
			var page = self.appMetaData.$pages[fullName];
			if (page == null || page.$page == null) throw new Error("Get page prototype error - Page not found[" + fullName + "]");
			return page.$page.$prototype;
		},
		/**
		 * Register pages which are not provided by Syracuse
		 * 		Ex rowdetail page, test entities pages
		 * proto:		JSON or object prototype
		 * article:		JSON article if any (authoring)
		 */
		registerAdditionalPage: function(id, proto, article) {
			var self = this;
			if (!proto || $.isEmptyObject(proto)) throw new Error("Unexpected empty prototype");
			if (!self.appMetaData) self.appMetaData = {};
			if (!self.appMetaData.$pages) self.appMetaData.$pages = {};
			var page = {
				$cache: {
					cacheType: "$auto"
				},
				$page: {
					$prototype: proto,
					$article: article
				}
			};
			self.appMetaData.$pages[id] = page;
			return page;
		}
	});

exports.Dao = _Dao;