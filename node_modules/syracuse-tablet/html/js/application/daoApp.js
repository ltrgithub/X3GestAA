"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("app");
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
var dispatcher = require('syracuse-tablet/html/js/sdata/sdataDispatcher');
var page = require('syracuse-tablet/html/js/pages/page');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');


/*
 * Access to application's data - installed apps, settings
 */

var _consts = {};

var _Dao = function(appli) {
	var self = this;

	self._appli = appli;
	self.json = null;

	self.getConfig = function() {

	};

	self.getSettings = function() {

	};

	self.destroy = function() {
		self._appCtrlr = null;
	};
	/**
	 *Returns the JSON description of application
	 */
	self.getJsonDescr = function() {
		if (!self.json) {
			/* Load the last used application from local DB */
		}
		return self.json;
	};
	/**
	 * Set the JSON description of application
	 */
	self.setJsonDescr = function(json) {
		if (json) {
			self.json = json;
			return page.registerAppPages(json);
		}
	};

	/**
	 * Returns the $prototype and $article of dashBoardId
	 * $prototype.$properties gives the description of vignettes 'fields'
	 */
	self.getDashboardInfo = function(dashBoardId) {
		var dash = self.json.$dashboards[dashBoardId];
		if (!dash) throw new Error('Dashboard not found ' + dashBoardId);
		var _addWidth = function(json, nbCells, device) {
			if (nbCells <= 0 || nbCells > 12) throw new Error("Nb cells must be <= 12 (" + nbCells + ")");
			var prop = '$width' + (device || "md").smCapitalize();
			json[prop] = "";
			var sz = Math.round(12 / nbCells);
			for (var i = 0; i < nbCells; i++) {
				json[prop] += i === 0 ? sz : "," + sz;
			}
		};
		if (!dash.$article) {
			dash.$article = {
				$layoutType: "stack",
				$items: []
			};
			var vignetteIds = Object.keys(dash.$vignettes);
			if (vignetteIds.length === 0) throw new Error('Dashboard ' + dashBoardId + ' has no vignette');
			/* Create an article with 3 vignettes per row*/
			var nbCellsPerRow = 3,
				remainCells = vignetteIds.length;
			var nbRows = Math.ceil(vignetteIds.length / nbCellsPerRow),
				vgntIdx = 0;
			for (var ri = 0; ri < nbRows; ri++) {
				var row = {
					$layoutType: "row",
					$items: []
				};
				_addWidth(row, nbCellsPerRow);
				for (var ci = 0; ci < Math.min(nbCellsPerRow, remainCells); ci++) {
					row.$items.push({
						$bind: vignetteIds[vgntIdx]
					});
					vgntIdx++;
				}
				dash.$article.$items.push(row);
			}
		}
		var proto = {
			$properties: {}
		};
		for (var i = 0; i < vignetteIds.length; i++) {
			var vignetteId = vignetteIds[i];
			var property = $.extend({}, dash.$vignettes[vignetteId]);
			var gadgetId = property.$uuid;
			property.$gadget = self.json.$gadgets[gadgetId];
			if (property.$gadget) {
				property.$gadget = $.extend({}, property.$gadget);
				// Set gadget uuid
				property.$gadget.$uuid = gadgetId;
				// Set vignette uuid
				property.$uuid = vignetteId;
				// Set type - "application/x-string"
				property.$type = "application/x-vignette";
				// Readable dom uid
				property.domId = utils.readableuid("vgnt", property.$gadget.$type);
			} else {
				throw new Error('Dashboard ' + dashBoardId + ' gadget not found - $uuid: ' + gadgetId);
			}
			proto.$properties[vignetteId] = property;
		}
		return {
			article: $.extend({}, dash.$article),
			prototype: prototype.create(proto)
		};
	};
};

exports.Dao = _Dao;