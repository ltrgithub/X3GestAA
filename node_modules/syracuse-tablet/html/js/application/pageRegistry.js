"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var clientContract = require('syracuse-tablet/html/js/sdata/entities/clientContract');

var _staticPages = {};
/**
 * resolves with a copy if meta-data
 */
var _getPageInfo = function(pageName, options, currentPage) {
	options = options || {};
	return $.smResolve()
		.then(function() {
			// Check if a static page is requested first
			var pageInfo = _staticPages[pageName];
			return pageInfo;
		})
		.then(function(pageInfo) {
			// Check for client side page definition
			if (!pageInfo) {
				pageInfo = clientContract.getPageInfo(pageName, options);
			}
			return pageInfo;
		})
		.then(function(pageInfo) {
			if (pageName === "rowdetail" || pageName === "carddesign" || pageName === "chartdetail") {
				if (!currentPage) {
					throw new Error(pageName + " - Not null currentPage expected");
				}
				var ctrl = currentPage.getControl ? currentPage.getControl(options.controlId) : null;
				if (!ctrl) {
					throw new Error(pageName + " - Control not found - id:" + options.controlId);
				}
				if (!ctrl.childPageGetPageInfo) {
					throw new Error(pageName + " - Control must implement childPageGetPageInfo");
				}
				return ctrl.childPageGetPageInfo(pageName);
			}
			// Check for pages defined by "real" mobile applications
			if (!pageInfo) {
				pageInfo = globals.getMetaData().getPageInfo(pageName);
			}
			return pageInfo;
		})
		.then(function(pageInfo) {
			if (!pageInfo) {
				// Workaround for all that is lazy loaded
				pageInfo = _createDummyPageInfo(pageName);
			}
			_addAuthoringInfo(pageInfo);
			return pageInfo;
		})
		.then(function(pageInfo) {
			_addOptions(pageName, pageInfo, options, currentPage);
			pageInfo.uuid = utils.readableuid("page", pageInfo.type, pageInfo.name);
			pageInfo.applicationName = globals.getApplication().dao.getApplicationName();
			return $.extend(true, {}, pageInfo);
		});
};

function _addOptions(pageName, pageInfo, options, currentPage) {
	options = options || {};
	pageInfo.options = $.extend(true, {}, options);
	_addGadgetData(pageInfo, currentPage);
}

function _addGadgetData(pageInfo, currentPage) {
	var gadgetId = pageInfo.options["gadget-id"];
	if (gadgetId) {
		var $properties = currentPage && currentPage.prototype && currentPage.prototype.json && currentPage.prototype.json.$properties;
		if ($properties) {
			Object.keys($properties).some(function(vignetteId) {
				var vignette = $properties[vignetteId];
				if (vignette && vignette.$gadget && vignette.$gadget.$uuid === gadgetId) {
					var json = vignette.$gadget;
					// Returns JSON - not gadget object - pageInfo MUST contain only JSON (restore context)
					pageInfo.options.gadget = json;
					return true;
				}
				return false;
			});
		}
	}
}

function _createDummyPageInfo(pageName) {
	var pageInfo = {
		name: pageName,
		home: false,
		type: "regular",
		subtype: "",
		cached: false,
		refreshed: false,
		changeHash: false,
	};
	if (pageName) {
		var x = pageName.split('.');
		if (x.length > 0 && x[x.length - 1].smStartsWith('$')) {
			pageInfo.subtype = x[x.length - 1].substring(1);
		}
	}
	return pageInfo;
}

function _addAuthoringInfo(pageInfo) {
	if (!pageInfo.authoringName) {
		// Compute page name used by authoring
		var segs = pageInfo.name.split(".");
		var authoringName;
		if (segs.length === 5) {
			// remove dataset (e.g. SUPERV, ...)
			authoringName = segs[0] + "." + segs[1] + "." + segs[3] + "." + segs[4];
		} else {
			authoringName = pageInfo.name;
		}
		if (segs.length === 2) {
			authoringName = "syracuse.collaboration." + authoringName;
		}
		pageInfo.authoringName = authoringName;
	}
}

var _defStaticInfo = function(name) {
	return {
		name: name,
		type: "static",
		subtype: "html",

		cached: false,
		refreshed: false,
		changeHash: false,

		home: false,
		disableAuthoring: true,
		isLogin: name === "login",

		/**
		 * Html have an empty proto and are base on a stacked layout for compatibility with other pages
		 * Html is appended to layout root elmt
		 * We add the proto/article in state for convenience - it can be enhanced according to the needs
		 * Currently we need only static html pages
		 */
		$prototype: {
			$properties: {}
		},
		$article: {
			$layoutType: "stack",
			$items: []
		}
	};
};
/**
 * Static preloaded pages
 * Pages belongs to all mobile applications
 */
function _registerStaticPages() {
	var pages = {
		"login": null,
		"pageDrafts": {
			$prototype: {
				$title: locale.text("drafts.page.title")
			}
		}
	};
	for (var name in pages) {
		_staticPages[name] = $.extend(true, _defStaticInfo(name), pages[name]);
	}
}
exports.getPageInfo = _getPageInfo;
exports.init = function() {
	// Called only once to register static html pages
	_registerStaticPages();
};