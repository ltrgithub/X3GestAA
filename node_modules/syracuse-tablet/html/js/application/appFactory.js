"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var dashboardUtils = require('syracuse-tablet/html/js/helpers/dashboardUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _ctor = {
	Application: function() {
		throw new Error("Not implemented");
	},
	DashoardPage: function() {
		throw new Error("Not implemented");
	},
	RegularPage: function() {
		throw new Error("Not implemented");
	},
	RequestPage: function() {
		throw new Error("Not implemented");
	},
	RowDetailPage: function() {
		throw new Error("Not implemented");
	},
	ChartDetailPage: function() {
		throw new Error("Not implemented");
	},
	LookupPage: function() {
		throw new Error("Not implemented");
	},
	LoginPage: function() {
		throw new Error("Not implemented");
	},
	DaoApp: function() {
		throw new Error("Not implemented");
	},
	DaoSdata: function() {
		throw new Error("Not implemented");
	},
	DaoSdataWrkcpy: function() {
		throw new Error("Not implemented");
	},
	DraftsPage: function() {
		throw new Error("Not implemented");
	}
};

var _createApplication = function($$elmt) {
	var res = new _ctor.Application($$elmt, exports);
	res.init();
	return res;
};

// $forceLinkArticle is used in test entities to attach a $article to a $link vignette
// -> convenient for unit test
var _createPage = function($parent, state, parentPage, $forceLinkArticle) {
	var type = state.type;

	var options = {};

	return $.smResolve()
		.then(function() {
			switch (type) {
				case "static":
					if (state.subtype === "html") {
						switch (state.name) {
							case "login":
								return new _ctor.LoginPage($parent, state, options);
							case "pageDrafts":
								return new _ctor.DraftsPage($parent, state, options);
								break;
						}
					}
					break;

				case "dashboard":
					return globals.getMetaData().getDashboard(state.dashboardName)
						.then(function(dashboardMetaData) {
							if (!dashboardMetaData) {
								return $.smReject({
									message: locale.text("error.page.not.found", [state.dashboardName])
								});
							}
							return dashboardUtils.getDashboardInfo(dashboardMetaData);
						})
						.then(function(dashboardInfo) {
							if (state.isWelcomePage === true) {
								options.views = $.extend([], dashboardInfo.views);
								options.roles = dashboardInfo.roles;
								options.factoryOwner = dashboardInfo.factoryOwner;
								options.css = "s-m-"
								return new _ctor.WelcomeDashoardPage($parent, state, dashboardInfo.prototype, dashboardInfo.article, options);
							} else {
								return new _ctor.DashoardPage($parent, state, dashboardInfo.prototype, dashboardInfo.article, options);
							}
						});

				case "regular":
				case "chartdetail":
				case "rowdetail":
				case "carddesign":
					return globals.getMetaData().getPageDetails(state)
						.then(function(info) {
							if (!info) {
								return $.smReject({
									message: locale.text("error.page.not.found", [state.name])
								});
							}

							if (info.prototype.isLookup()) {
								return new _ctor.LookupPage($parent, state, info.prototype, info.article, options);
							} else if (type === "rowdetail") {
								return new _ctor.RowDetailPage($parent, state, info.prototype, info.article, parentPage, options);
							} else if (type === "regular") {
								if ($forceLinkArticle) {
									// ONLY FOR TEST ENTITIES - Store article attached to a link in order to magae the back
									state.forceLinkArticle = $forceLinkArticle;
								}
								options.views = $.extend([], info.views);
								if (info.prototype && (info.prototype.isRequest() || info.prototype.isStatistics())) {
									return new _ctor.RequestPage($parent, state, info.prototype, $forceLinkArticle ? $forceLinkArticle : info.article, options);
								} else {
									return new _ctor.RegularPage($parent, state, info.prototype, $forceLinkArticle ? $forceLinkArticle : info.article, options);
								}
							} else if (type === "carddesign") {
								return new _ctor.CardDesignPage($parent, state, info.prototype, info.article, parentPage, options);
							} else if (type === "chartdetail") {
								return new _ctor.ChartDetailPage($parent, state, info.prototype, info.article, parentPage, options);
							}
						});
			}
		})
		.then(function(pageInstance) {
			// No result in the switch block in the step before?
			if (!pageInstance) {
				throw new Error("Error creating page. Type: " + type + " Name: " + state.name + " Subtype: " + state.subtype);
			}

			// Do async init if class supports it
			if (pageInstance.pageInitAsync) {
				return pageInstance.pageInitAsync()
					.then(function() {
						return pageInstance;
					});
			}

			return pageInstance;
		});
};

var _createDaoApp = function(appli) {
	return new _ctor.DaoApp(appli);
};
/**
 * options: see DaoSdata class
 */
var _createDaoSdata = function(data, prototype, options) {
	options = options || {};
	return new _ctor[options.enableWorkingCopy === true ? "DaoSdataWrkcpy" : "DaoSdata"](data, prototype, options);
};
/**
 * Create the prototype and dao for a row detail page
 * parentDao: 	dao of the row - we clone it beacuse it's another page
 * controller:	controller
 * proto:		prototype of the parent array
 */
var _createDaoRowDetail = function(parentDao, controller, proto) {
	// parentDao is needed to resolve some properties in prototype taht needs parent data (url's of images...)
	return _createDaoSdata($.extend(true, {}, parentDao.data), proto, {
		isRowDetailDao: true,
		enableWorkingCopy: false, // No working copy for DAO - TODO - parentDao.enableWorkingCopy === true,
		parent: parentDao.parent,
		$bind: parentDao.$bind
	});
};

exports.setImpl = function(name, ctor) {
	_ctor[name] = ctor;
};

exports.createApplication = _createApplication;
exports.createPage = _createPage;
exports.createDaoApp = _createDaoApp;
exports.createDaoSdata = _createDaoSdata;
exports.createDaoRowDetail = _createDaoRowDetail;