"use strict";

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("factory");
var globals = require('syracuse-tablet/html/js/helpers/globals');
var dashboardUtils = require('syracuse-tablet/html/js/helpers/dashboardUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _ctor = {
	Application: function() {
		throw new Error("Not implemented");
	},
	DashoardPage: function() {
		throw new Error("Not implemented");
	},
	RegularPage: function() {
		throw new Error("Not implemented");
	},
	RowDetailPage: function() {
		throw new Error("Not implemented");
	},
	LookupPage: function() {
		throw new Error("Not implemented");
	},
	LoginPage: function() {
		throw new Error("Not implemented");
	},
	AboutPage: function() {
		throw new Error("Not implemented");
	},
	DaoApp: function() {
		throw new Error("Not implemented");
	},
	DaoSdata: function() {
		throw new Error("Not implemented");
	}
};

var _createApplication = function($$elmt) {
	var res = new _ctor.Application($$elmt, exports);
	res.init();
	log && log("Application", "Create ok");
	return res;
};

var _createPage = function($parent, state, parentPage) {
	var res = null;
	var type = state.type;
	var deferred = $.Deferred();
	var options = {};
	try {
		switch (type) {
			case "static":
				if (state.subtype === "html") {
					switch (state.name) {
						case "login":
							res = new _ctor.LoginPage($parent, state, options);
							break;
						case "about":
							res = new _ctor.AboutPage($parent, state, options);
							break;
						default:
							throw new Error("_createPage - unknown html page [" + state.name + "]");
					}
				} else {
					throw new Error("_createPage - unknown static subtype [" + state.subtype + "]");
				}
				break;
			case "dashboard":
				globals.getMetaData().getDashboard(state.dashboardName)
					.then(function(dashboardMetaData) {
						return dashboardUtils.getDashboardInfo(dashboardMetaData);
					})
					.then(function(dashboardInfo) {
						if (state.isWelcomePage === true) {
							res = new _ctor.WelcomeDashoardPage($parent, state, dashboardInfo.prototype, dashboardInfo.article, options);
						} else {
							res = new _ctor.DashoardPage($parent, state, dashboardInfo.prototype, dashboardInfo.article, options);
						}
						deferred.resolve(res);
					})
					.fail(function(e) {
						deferred.reject(e);
					});
				break;
			case "regular":
			case "rowdetail":
				globals.getMetaData().getPageDetails(state)
					.then(function(info) {
						if (!info) {
							return $.smReject({
								message: locale.text("error.page.not.found"),
								detail: "Page name: " + state.name
							});
						}
						if (info.prototype.isLookup()) {
							res = new _ctor.LookupPage($parent, state, info.prototype, info.article, options);
						} else if (type === "rowdetail") {
							res = new _ctor.RowDetailPage($parent, state, info.prototype, info.article, parentPage, options);
						} else {
							res = new _ctor.RegularPage($parent, state, info.prototype, info.article, options);
						}
						deferred.resolve(res);
					}).fail(function(e) {
						deferred.reject(e);
					});
				break;
			default:
				throw new Error("Unknown page type[" + type + "]");
				break;
		}
		if (res) {
			// Synchronous result
			deferred.resolve(res);
		}
		log && log("New Page", "Create ok");
	} catch (e) {
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
};

var _createDaoApp = function(appli) {
	var dao = new _ctor.DaoApp(appli);
	log && log("New DAO Application", "Create ok");
	return dao;
};

var _createDaoSdata = function(type, data, prototype, parent) {
	var dao;
	switch (type) {
		case "representation":
		case "process":
		case "request":
		case "statistics":
		case "dashboardpage":
		case "externallink":
			dao = new _ctor.DaoSdata(data, prototype, parent);
			break;
		default:
			throw new Error("Unknown DaoSdata type[" + type + "]");
			break;
	}
	log && log("New DAO View", "Create ok");
	return dao;
};

exports.setImpl = function(name, ctor) {
	_ctor[name] = ctor;
};

exports.createApplication = _createApplication;
exports.createPage = _createPage;
exports.createDaoApp = _createDaoApp;
exports.createDaoSdata = _createDaoSdata;