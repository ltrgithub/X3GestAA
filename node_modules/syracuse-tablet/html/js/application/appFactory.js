"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var dashboardUtils = require('syracuse-tablet/html/js/helpers/dashboardUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _ctor = {
	Application: function() {
		throw new Error("Not implemented");
	},
	DashoardPage: function() {
		throw new Error("Not implemented");
	},
	RegularPage: function() {
		throw new Error("Not implemented");
	},
	RequestPage: function() {
		throw new Error("Not implemented");
	},
	RowDetailPage: function() {
		throw new Error("Not implemented");
	},
	ChartDetailPage: function() {
		throw new Error("Not implemented");
	},
	LookupPage: function() {
		throw new Error("Not implemented");
	},
	LoginPage: function() {
		throw new Error("Not implemented");
	},
	DaoApp: function() {
		throw new Error("Not implemented");
	},
	DaoSdata: function() {
		throw new Error("Not implemented");
	},
	DaoSdataWrkcpy: function() {
		throw new Error("Not implemented");
	},
	DraftsPage: function() {
		throw new Error("Not implemented");
	}
};

var _createApplication = function($$elmt) {
	var res = new _ctor.Application($$elmt, exports);
	res.init();
	return res;
};

// $forceLinkArticle is used in test entities to attach a $article to a $link vignette
// -> convenient for unit test
var _createPage = function($parent, state, parentPage, $forceLinkArticle) {
	var res = null;
	var type = state.type;
	var deferred = $.Deferred();
	var options = {};
	try {
		switch (type) {
			case "static":
				if (state.subtype === "html") {
					switch (state.name) {
						case "login":
							res = new _ctor.LoginPage($parent, state, options);
							break;
						case "pageDrafts":
							res = new _ctor.DraftsPage($parent, state, options);
							break;
						default:
							throw new Error("_createPage - unknown html page [" + state.name + "]");
					}
				} else {
					throw new Error("_createPage - unknown static subtype [" + state.subtype + "]");
				}
				break;
			case "dashboard":
				globals.getMetaData().getDashboard(state.dashboardName)
					.then(function(dashboardMetaData) {
						if (!dashboardMetaData) {
							return $.smReject({
								message: locale.text("error.page.not.found", [state.dashboardName])
							});
						}
						return dashboardUtils.getDashboardInfo(dashboardMetaData);
					})
					.then(function(dashboardInfo) {
						if (state.isWelcomePage === true) {
							res = new _ctor.WelcomeDashoardPage($parent, state, dashboardInfo.prototype, dashboardInfo.article, options, dashboardInfo.views);
						} else {
							res = new _ctor.DashoardPage($parent, state, dashboardInfo.prototype, dashboardInfo.article, options, dashboardInfo.views);
						}
						deferred.resolve(res);
					})
					.fail(function(e) {
						deferred.reject(e);
					});
				break;
			case "chartdetail":
			case "regular":
			case "rowdetail":
			case "carddesign":
				globals.getMetaData().getPageDetails(state)
					.then(function(info) {
						if (!info) {
							return $.smReject({
								message: locale.text("error.page.not.found", [state.name])
							});
						}
						if (info.prototype.isLookup()) {
							res = new _ctor.LookupPage($parent, state, info.prototype, info.article, options);
						} else if (type === "rowdetail") {
							res = new _ctor.RowDetailPage($parent, state, info.prototype, info.article, parentPage, options);
						} else if (type === "regular") {
							if ($forceLinkArticle) {
								// ONLY FOR TEST ENTITIES - Store article attached to a link in order to magae the back
								state.forceLinkArticle = $forceLinkArticle;
							}
							if (info.prototype && (info.prototype.isRequest() || info.prototype.isStatistics())) {
								res = new _ctor.RequestPage($parent, state, info.prototype, $forceLinkArticle ? $forceLinkArticle : info.article, options, info.views);
							} else {
								res = new _ctor.RegularPage($parent, state, info.prototype, $forceLinkArticle ? $forceLinkArticle : info.article, options, info.views);
							}
						} else if (type === "carddesign") {
							res = new _ctor.CardDesignPage($parent, state, info.prototype, info.article, parentPage, options);
						} else if (type === "chartdetail") {
							res = new _ctor.ChartDetailPage($parent, state, info.prototype, info.article, parentPage, options);
						}
						deferred.resolve(res);
					}).fail(function(e) {
						deferred.reject(e);
					});
				break;
			default:
				throw new Error("Unknown page type[" + type + "]");
				break;
		}
		if (res) {
			// Synchronous result
			deferred.resolve(res);
		}
	} catch (e) {
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
};

var _createDaoApp = function(appli) {
	return new _ctor.DaoApp(appli);
};
/**
 * options: see DaoSdata class
 */
var _createDaoSdata = function(data, prototype, options) {
	options = options || {};
	return new _ctor[options.enableWorkingCopy === true ? "DaoSdataWrkcpy" : "DaoSdata"](data, prototype, options);
};
/**
 * Create the prototype and dao for a row detail page
 * parentDao: 	dao of the row - we clone it beacuse it's another page
 * controller:	controller
 * proto:		prototype of the parent array
 */
var _createDaoRowDetail = function(parentDao, controller, proto) {
	// parentDao is needed to resolve some properties in prototype taht needs parent data (url's of images...)
	return _createDaoSdata($.extend(true, {}, parentDao.data), proto, {
		isRowDetailDao: true,
		enableWorkingCopy: false, // No working copy for DAO - TODO - parentDao.enableWorkingCopy === true,
		parent: parentDao.parent,
		$bind: parentDao.$bind
	});
};

exports.setImpl = function(name, ctor) {
	_ctor[name] = ctor;
};

exports.createApplication = _createApplication;
exports.createPage = _createPage;
exports.createDaoApp = _createDaoApp;
exports.createDaoSdata = _createDaoSdata;
exports.createDaoRowDetail = _createDaoRowDetail;