"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');

var _Gadget = utils.defineClass(function(jsonData) {
	var self = this;
	self._data = jsonData;
}, null, {

	destroy: function() {
		var self = this;
		self._data = null;
	},

	isRequest: function() {
		return this._data.$type === "$request";
	},

	data: function(prop) {
		return this._data ? this._data[prop] : null;
	},

	getEndPoint: function() {
		// Default endpoint if not specified
		return this._data.endpoint || globals.getEndpoint();
	},

	isDefaultEndpoint: function() {
		return !this._data.endpoint;
	},

	getPageName: function() {
		var self = this;
		if (!self.isValid()) return null;
		var rep = self.isRequest() ? self.getRequestRepresentation() : self._data.representation;
		return self.getEndPoint() + "." + rep + "." + self._data.facet;
	},

	getSDataUrl: function(proto) {
		var self = this;
		var url;
		switch (self._data.$type) {
			case "$representation":
				if (["$details", "$edit"].indexOf(self._data.action) > -1) {
					url = proto.data("$url", {
						$key: self._data.keyParameter
					});
				} else if (["$create"].indexOf(self._data.action) > -1) {
					url = proto.data("$url");
					url = url.replace(/\((.*?)\)/, "/$template");
				} else {
					url = proto.data("$url");
				}
				break;
			case "$request":
				url = proto.data("$baseUrl");
				url = url + "/QUERY('" + self._data.requestName + "')?representation=" + self.getRequestRepresentation() + ".$query";
				self._data.parameters && Object.keys(self._data.parameters).forEach(function(name) {
					var value = self._data.parameters[name].value;
					if (!value) {
						return;
					}
					if (name === "where") { // if parameter is where and contains placeholders, it's applied later by dashboard. Else it's directly added to url here since it's static
						if (/{\S+}/.test(value)) {
							return;
						}
					}
					url = url + "&" + name + "=" + value;
				});
				break;
		}
		return url;
	},
	getRequestRepresentation: function() {
		return "QUERY~" + this._data.requestName + "~" + this._data.requestLevel;
	},
	getJSON: function() {
		return $.extend(true, {}, this._data);
	},
	isValid: function() {
		// to complete
		return this.getInvalidReason() == null;
	},
	getInvalidReason: function() {
		var t = this._data.$type;
		if (t === "$representation" || t === "$stats" || t === "$request") {
			// When we import mobile apps we could have such error
			// tablet client displays a user friendly message
			// to complete
			if (this._data.$uuid.smStartsWith("test")) return null;
			return (this.getEndPoint() || "").trim().length == 0 ? "No endpoint" : null;
		}
		// TODO
		return null;
	},
	getParameters: function() {
		return this._data.parameters || {};
	}
});

exports.Klass = _Gadget;