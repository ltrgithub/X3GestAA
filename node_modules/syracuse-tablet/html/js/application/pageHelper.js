"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');

var _staticPages = {
	"login": {
		type: "html"
	},
	"about": {
		type: "html"
	},
	"settings": {
		type: "html"
	},
	"defhome": {
		type: "html"
	},
	"vignetteerror": {
		type: "html"
	}
};

var _consts = exports.consts = {
	tmplPage: "pages/",
	tmplDefHeader: "pages/default/header",
	tmplRoot: "templates/pages/",
	dataFile: "/data.json",
	tmplHead: "header",
	tmplMain: "main"
};

var _defInfo = {
	home: false,
	type: "regular",
	cached: false,
	refreshed: false,
	appId: "root",
	changeHash: false
};

var _pages = {};

var _resetPages = function() {
	for (var p in _staticPages) {
		_pages[p] = $.extend(true, {}, _defInfo, _staticPages[p]);
	}
};

var _getInfo = function(id, clone) {
	if (id === "home") {
		id = globals.getApplication().homePageId;
	}
	var i;
	if (!i) i = _pages[id];
	if (i && clone === true) i = $.extend(true, {}, i);
	return i;
};

var _getPageInfo = function(state, options) {
	if (state == null) state = "";
	if (typeof state === "string") {
		var name = state.trim();
		if (name.indexOf("#") == 0) name = name.substring(1);
		state = _getInfo(name, true);
		if (!state) {
			if (name.length != 0) {
				log && log("Page " + name + " not found -> Take home");
			}
			name = "home";
			state = _getInfo(name, true);
			if (!state) {
				throw new Error("Page[" + name + "] not found");
			}
		}
		if (options) {
			state.options = options ? $.extend(true, state, options) : {};
		}
		state.name = name;
		if (!state.transition) {
			// Default transition
			state.transition = globals.getApplication().$config("transition");
		}
		// Readable id
		state.uuid = utils.readableuid("page", state.appId || "root", state.type, state.name);
	}
	return state;
};

/**
 *  Register the pages of a Syracause Mobile Application
 *  Returns the id of home page
 **/
var _registerAppPages = function(appDescr) {
	_resetPages();
	if (!appDescr) return;
	var info, homeId;
	if (appDescr.$dashboards) {
		var idx = 0;
		for (var p in appDescr.$dashboards) {
			var data = appDescr.$dashboards[p];
			info = $.extend(true, {}, _defInfo);
			info.type = "dashboard";
			// Name is used for readable dom ids - info guarantee unic ids 
			info.name = info.id = data.$dashboardName + idx++;
			info.dashboardUuid = p;
			if (p === appDescr.$application.$homeDashboard.$uuid) {
				homeId = info.id;
			}
			_pages[info.id] = info;
		}
	}
	if (appDescr.$pages) {
		for (var p in appDescr.$pages) {
			info = $.extend(true, {}, _defInfo);
			info.type = "regular";
			_pages[p] = info;
		}
	}
	if (!homeId) throw new Error("No home dashboard Id found in application description");
	return homeId;
};

exports.getPageInfo = _getPageInfo;
exports.registerAppPages = _registerAppPages;