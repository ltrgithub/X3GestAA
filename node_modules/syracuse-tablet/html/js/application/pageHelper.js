"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("pageHelper");

var _staticPages = {
	"login": {
		type: "html"
	},
	"about": {
		type: "html"
	},
	"settings": {
		type: "html"
	},
	"defhome": {
		type: "html"
	},
	"vignetteerror": {
		type: "html"
	}
};

var _defInfo = {
	home: false,
	type: "regular",
	cached: false,
	refreshed: false,
	appId: "root",
	changeHash: false
};

var _pages = {};

function _registerStaticPages() {
	for (var p in _staticPages) {
		_pages[p] = $.extend(true, {}, _defInfo, _staticPages[p]);
	}
}

var _getInfo = function(id, clone) {
	var i;
	i = _pages[id];
	if (i && clone === true) i = $.extend(true, {}, i);
	return i;
};

var _getPageInfo = function(state, options) {
	if (state == null) state = "";
	if (typeof state === "string") {
		var name = state.trim();
		if (name.indexOf("#") == 0) name = name.substring(1);
		state = _getInfo(name, true);
		if (!state) {
			return null;
		}
		if (options) {
			state.options = options ? $.extend(true, {}, options) : {};
			// Regular page needs gadget context - Ex create action..
			var gadgetId = options["gadget-id"];
			if (gadgetId) {
				state.options.gadget = globals.getApplication().dao.getGadget(gadgetId);
			}
		}
		state.name = name;
		if (!state.transition) {
			// Default transition
			state.transition = globals.getApplication().$config("transition");
		}
		// Readable id
		state.uuid = utils.readableuid("page", state.appId || "root", state.type, state.name);
	}
	return state;
};

/**
 *  Register the pages of a Syracause Mobile Application
 *  Returns the id of home page
 **/

var _registerPages = function(appMetaData) {

	_pages = {};
	_registerStaticPages();

	var info;
	if (appMetaData.$dashboards) {
		var idx = 0;
		for (var p in appMetaData.$dashboards) {
			var data = appMetaData.$dashboards[p];
			info = $.extend(true, {}, _defInfo);
			info.type = "dashboard";
			// Name is used for readable dom ids - info guarantee unic ids 
			info.name = info.id = p + ".$dashboard";
			info.dashboardUuid = p;
			_pages[info.id] = info;
		}
	}
	if (appMetaData.$pages) {
		for (var p in appMetaData.$pages) {
			info = $.extend(true, {}, _defInfo);
			info.type = "regular";
			_pages[p] = info;
		}
	}
};

_registerStaticPages();

exports.getPageInfo = _getPageInfo;
exports.registerPages = _registerPages;