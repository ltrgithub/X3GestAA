"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var clientContract = require('syracuse-tablet/html/js/sdata/entities/clientContract');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');


/**
 * Page types are : "html", "regular", "dashboard"
 */
var _staticPages = {
	"login": {
		type: "html",
		subtype: "login"
	},
	"about": {
		type: "html",
		subtype: "about"
	},
	"settings": {
		type: "html",
		subtype: "settings"
	}
};

var _defInfo = {
	home: false,
	type: "regular",
	subtype: "",
	cached: false,
	refreshed: false,
	appId: "root",
	changeHash: false
};

var _pages = {};

function _registerStaticPages() {
	for (var p in _staticPages) {
		_pages[p] = $.extend(true, {}, _defInfo, _staticPages[p]);
	}
}

var _getInfo = function(id, clone) {
	var i;
	i = _pages[id];
	if (i && clone === true) i = $.extend(true, {}, i);
	return i;
};
/**
 *  fallback param is used for test applications because pages are loaded dynamically - see getRegularPageInfo
 *  Page info is u^dated once the prototype as been loaded
 **/


/**
 * Get information on page kind: html/prototype based, etc
 */
/*
getPageInfo: function(state, options) {
	var self = this;
	var pi = clientContract.getPageInfo(state, options);
	if (pi) return pi;
	var name = state;
	if (state === "home") name = self.getHomeDashboard();
	pi = pageHelper.getPageInfo(name, options);
	if (pi) return pi;

	pi = pageHelper.getPageInfo(name, options, {
		home: false,
		type: "regular",
		cached: false,
		refreshed: false,
		appId: "root",
		changeHash: false
	});
	return pi;
},
*/




//getPageInfo: function(state, options) {
//	var self = this;
//	if (typeof state === "string" && state === "rowdetail"){
//		/**
//		 * Detail of a row - We register it if not already done
//		 */
//		return pageHelper._getRowdetailPage(state, options, self.currentPage, this.dao);
//	}
//	/**
//	 *  We pass a fallBack object for test applications because pages are loaded dynamically - see getRegularPageInfo
//	 **/
//	return pageHelper.getPageInfo(state, options, {
//		home: false,
//		type: "regular",
//		cached: false,
//		refreshed: false,
//		appId: "root",
//		changeHash: false
//	});
//}


/**
 * rReturn rowdetail page info - Register it if not found
 * Registerspecial page
 * state: state: "x3.erp.SUPERV.AQMCRUDM.$details"
 * options 	noHistoryBack: false
 * 			sdata-url: "http://pc101329.sagefr.adinternal.com:8124/mobile1/x3/erp/SUPERV/AQMDEVICE('8')?representation=AQMCRUDM.$details"
 * appId: "root"
 * 			cached: false
 * 			changeHash: false
 * 			home: false
 * 			name: "x3.erp.SUPERV.AQMCRUDM.$details"
 * 			options: Object
 * 			refreshed: false
 * 			transition: null
 * 			type: "regular"
 * 			uuid: "pageRootRegularX3_erp_SUPERV_AQMCRUDM__de
 *
 * meta.$page.$prototype
 */
/**
 * Return rowdetail page info - Register it if not found
 * state:		page's name
 * options:		link attributes (data-sdata-url...)
 * currentPage:	vignette or application currentPage
 */
var _getRowdetailPage = function(state, options, currentPage) {
	options = options || {};
	if (!currentPage.getControl) throw new Error("Unexpected currentPage object - getControl method not found");
	var ctrl = currentPage.getControl(options.controlId);
	if (!ctrl) throw new Error("Array not found - id:" + options.controlId);
	// Page id used to store the page
	var id = currentPage.state.name + "." + ctrl.$bind;
	if (_getInfo(id)) return;
	var info = $.extend(true, {}, _defInfo);
	info.type = state;
	info.subtype = currentPage.isEditMode() ? "edit" : "details";
	info.id = id;
	// Register page info
	_pages[info.id] = info;
	// Register the page meta-data into application meta-data to be compliant with other pages
	var prototype = ctrl.prototype.getPrototype("$item");
	var article = null;
	globals.registerAdditionalPage(id, prototype, article);
	// returns the new state
	return info;
};


var _fallBack = {
	home: false,
	type: "regular",
	cached: false,
	refreshed: false,
	appId: "root",
	changeHash: false
};
/**
 *  state:			name of the page
 *  options: 		attributes of the link (data-sdata-url, data-control-id....)
 *  currentPage:	application or vignette currentPage
 */
var _getPageInfo = function(state, options, currentPage) {
	state = state || "";
	if (typeof state !== "string") return state;
	var name = state.trim();
	if (name.indexOf("#") == 0) name = name.substring(1);
	options = options || {};
	// clientContract first
	state = clientContract.getPageInfo(name, options);
	if (state) return state;
	if (name === "home") name = globals.getHomeDashboard();
	if (name === "rowdetail") {
		/**
		 * Detail of a row - We register it if not already done
		 */
		state = _getRowdetailPage(name, options, currentPage);
	} else {
		state = _getInfo(name, true);
	}
	if (!state) {
		state = _fallBack;
	}
	if (options) {
		state.options = options ? $.extend(true, {}, options) : {};
		// Regular page needs gadget context - Ex create action..
		var gadgetId = options["gadget-id"];
		if (gadgetId) {
			state.options.gadget = globals.getApplication().dao.getGadget(gadgetId);
		}
	}
	state.name = name;
	if (!state.transition) {
		// Default transition
		state.transition = globals.$config("transition");
	}
	// Readable id
	state.uuid = utils.readableuid("page", state.appId || "root", state.type, state.name);
	return state;
};
/**
 * Register regular page
 * 	add subtype that comes from facet
 */
var _registerRegularPage = function(id, meta) {
	var info = $.extend(true, {}, _defInfo),
		facet;
	info.type = "regular";
	if (meta.$page && meta.$page.$prototype) {
		facet = meta.$page.$prototype.$type;
		if (!facet) {
			// if no type we take $url - in test representation  $type is not set
			facet = meta.$page.$prototype.$url;
		}
		info.subtype = facet.substring(facet.lastIndexOf('.$') + 2);
		if (!info.subtype) {
			throw new Error("unexpected facet for page " + id + "\n$url=" + meta.$page.$prototype.$url);
		}
	} else {
		info.subtype = "unknown";
	}
	_pages[id] = info;
	// returns the new state
	return info;
};
/**
 * Register dashboard page
 */
var _registerDashboard = function(id, meta, appMetaData) {
	var info = $.extend(true, {}, _defInfo, meta.$pageInfo);
	info.type = "dashboard";
	if (appMetaData.$application.$homeDashboard.dashboardName === meta.$dashboardName) {
		info.subtype = info.isWelcomePage ? "welcome" : "home";
		info.isHomeDashboard = true;
	} else {
		info.isHomeDashboard = false;
		info.subtype = "std";
	}
	// Name is used for readable dom ids - info guarantee unic ids 
	info.name = info.id = meta.$dashboardName + ".$dashboard";
	info.dashboardUuid = id;
	_pages[info.id] = info;
};
/**
 *  Register the pages of a Syracuse Mobile Application
 *  RegisterRegularPage is also called when a prototype has been fetched (test representation are loading on demand)
 **/
var _registerPages = function(appMetaData) {
	_pages = {};
	_registerStaticPages();
	if (!appMetaData) return;
	if (appMetaData.$dashboards) {
		for (var p in appMetaData.$dashboards) {
			_registerDashboard(p, appMetaData.$dashboards[p], appMetaData);
		}
	}
	if (appMetaData.$pages) {
		for (var p in appMetaData.$pages) {
			_registerRegularPage(p, appMetaData.$pages[p]);
		}
	}
};
_registerStaticPages();

exports.getPageInfo = _getPageInfo;
exports.registerPages = _registerPages;
exports.registerRegularPage = _registerRegularPage;