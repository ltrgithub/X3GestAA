"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var clientContract = require('syracuse-tablet/html/js/sdata/entities/clientContract');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');

/**
 * Registered pages - Contains the page state property that is stored in history
 */
var _pages = {};
/**
 * Page types are : "html", "regular", "dashboard"
 */
var _staticPages = {
	"login": {
		// Don't remove it
		isLogin: true,
		type: "html",
		subtype: "login",
		disableAuthoring: true
	}
};
/**
 * Register a page - info.name is the id of the page
 */
function _registerPage(info) {
	if (info && info.name) {
		_pages[info.name] = info;
	} else {
		throw new Error("Bad page state");
	}
}
/**
 * Return default page info
 * 	name:	mandatory
 *  type:	optional
 */
function _getDefPageInfo(name, type) {
	if (!name || name.length == 0) throw new Error("Bad page name");
	var defInfo = {
		home: false,
		type: "regular",
		subtype: "",
		cached: false,
		refreshed: false,
		changeHash: false
	};
	defInfo.name = name;
	if (type) defInfo.type = type;
	return defInfo;
}
/**
 * Static pages are registered at the end of this module
 */
function _registerStaticPages() {
	for (var p in _staticPages) {
		_registerPage($.extend(true, {}, _getDefPageInfo(p), _staticPages[p]));
	}
}
/**
 * Returns registered page info
 */
var _getInfo = function(id, clone) {
	var i;
	i = _pages[id];
	if (i && clone === true) i = $.extend(true, {}, i);
	return i;
};
/**
 * Return rowdetail page info - Register it if not found
 * state:		page's name - rowdetail
 * options:		link attributes (data-sdata-url...)
 * currentPage:	vignette or application currentPage
 */
var _getRowdetailPage = function(state, options, currentPage) {
	options = options || {};
	if (!currentPage) throw new Error("_getRowdetailPage - Not null currentPage expected");
	if (!currentPage.getControl) throw new Error("_getRowdetailPage - Unexpected currentPage object - getControl method not found");
	var ctrlArray = currentPage.getControl(options.controlId);
	if (!ctrlArray) throw new Error("_getRowdetailPage - Array not found - id:" + options.controlId);
	// Page name used to store the page - current page name + path of the selected row
	var name = ctrlArray.rowDetailGetPageName(currentPage.state.name);
	var info = _getInfo(name);
	if (info) return info;
	// Register page info
	// state=rowdetail is sued to set the type property that gives the class page
	info = _getDefPageInfo(name, state);
	info.subtype = currentPage.isEditMode() ? "edit" : "details";
	_registerPage(info);
	// Read proto from array - Prototype is special -> no url because the dao comes from selected array's row
	var prototype = ctrlArray.rowDetailGetPrototype();
	var article = null;
	// Register the page meta-data into application meta-data to be compliant with other pages
	globals.registerAdditionalPage(name, prototype, article);
	// returns the new state
	return info;
};
/**
 * Add info for authoring - Mathias
 */
var _extendPageInfo = function(state) {
	if (!state.authoringName) {
		// Compute page name used by authoring
		var segs = state.name.split(".");
		var authoringName;
		if (segs.length === 5) {
			// remove dataset (e.g. SUPERV, ...)
			authoringName = segs[0] + "." + segs[1] + "." + segs[3] + "." + segs[4];
		} else {
			authoringName = state.name;
		}
		if (segs.length === 2) {
			authoringName = "syracuse.collaboration." + authoringName;
		}
		state.authoringName = authoringName;
	}
	return state;
};
/**
 *  state:			name of the page
 *  options: 		attributes of the link (data-sdata-url, data-control-id....)
 *  currentPage:	application or vignette currentPage
 */
var _getPageInfo = function(state, options, currentPage) {
	state = state || "";
	if (typeof state !== "string") return state;
	var name = state.trim();
	options = options || {};
	// clientContract first
	state = clientContract.getPageInfo(name, options);
	if (!state) {
		if (name === "rowdetail") {
			// Detail of a row - We register it if not already done
			state = _getRowdetailPage(name, options, currentPage);
		} else {
			state = _getInfo(name, true);
		}
	}
	if (!state) {
		// TODO - Remove the fall back or call it only in test application
		state = _getDefPageInfo(name);
	}
	if (options) {
		state.options = options ? $.extend(true, {}, options) : {};
		// Regular page needs gadget context - Ex create action..
		var gadgetId = options["gadget-id"];
		if (gadgetId) {
			state.options.gadget = globals.getApplication().dao.getGadget(gadgetId);
		}
	}
	if (!state.transition) {
		// Default transition
		state.transition = globals.$config("transition");
	}
	// Readable id
	state.uuid = utils.readableuid("page", state.type, state.name);
	return state;
};
/**
 * Register regular page
 * 	add subtype that comes from facet
 */
var _registerRegularPage = function(id, meta) {
	var info = _getDefPageInfo(id, "regular");
	if (meta.$page && meta.$page.$prototype) {
		var facet = meta.$page.$prototype.$type;
		if (!facet) {
			// if no type we take $url - in test representation  $type is not set
			facet = meta.$page.$prototype.$url;
		}
		info.subtype = facet.substring(facet.lastIndexOf('.$') + 2);
		if (!info.subtype) {
			throw new Error("unexpected facet for page " + id + "\n$url=" + meta.$page.$prototype.$url);
		}
	} else {
		info.subtype = "unknown";
	}
	_registerPage(info);
	// returns the new state
	return info;
};
/**
 * Register dashboard page
 */
var _registerDashboard = function(id, meta, appMetaData) {
	var info = $.extend(true, {}, _getDefPageInfo(globals.getDashboardName(meta.$dashboardName), "dashboard"), meta.$pageInfo);
	if (appMetaData.$application.$homeDashboard.dashboardName === meta.$dashboardName) {
		// welcome -> main app home page - home -> mobile ap home page (customers...)
		info.subtype = info.isWelcomePage ? "welcome" : "home";
		info.isHomeDashboard = true;
	} else {
		info.isHomeDashboard = false;
		info.subtype = "std";
	}
	// Name is used for readable dom ids - info guarantee unic ids 
	info.dashboardUuid = id;
	_registerPage(info);
};
/**
 *  Register the pages of a Syracuse Mobile Application
 *  RegisterRegularPage is also called when a prototype has been fetched (test representation are loading on demand)
 **/
var _registerPages = function(appMetaData) {
	_pages = {};
	_registerStaticPages();
	if (!appMetaData) return;
	if (appMetaData.$dashboards) {
		for (var p in appMetaData.$dashboards) {
			_registerDashboard(p, appMetaData.$dashboards[p], appMetaData);
		}
	}
	if (appMetaData.$pages) {
		for (var p in appMetaData.$pages) {
			_registerRegularPage(p, appMetaData.$pages[p]);
		}
	}
};

/**
 * Remove child pages of $$elmt
 * arguments : Pages to exclude
 **/
var _removeAllPages = function($$elmt) {
	if (!$$elmt) return;
	if (!$$elmt.jquery) $$elmt = $($$elmt);
	var exclude = Array.prototype.slice.call(arguments, 1);
	$$elmt.children(".s-m-page").each(function(idx) {
		var page = $(this).smPageController();
		if (page && Array.prototype.indexOf.call(exclude, page) == -1) {
			page.destroy();
		}
	});
};

exports.getPageInfo = function(state, options, currentPage) {
	return _extendPageInfo(_getPageInfo(state, options, currentPage));
};
exports.registerPages = _registerPages;
exports.removeAllPages = _removeAllPages;
exports.registerRegularPage = _registerRegularPage;
/* INIT */
_registerStaticPages();