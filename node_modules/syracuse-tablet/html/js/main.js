"use strict";

var modal = require('syracuse-tablet/html/js/ui/modals/modal');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var initStyles = require('syracuse-tablet/html/js/init/initStyles');
var initLocale = require('syracuse-tablet/html/js/init/initLocale');
var initModules = require('syracuse-tablet/html/js/init/initModules');
var initLogin = require('syracuse-tablet/html/js/init/initLogin');
var native = require('syracuse-tablet/html/js/helpers/native/native');
var scroller = require('syracuse-tablet/html/js/helpers/scroller/scrollerHelpers');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("main", true);
/**
 * Display the fatal error - !! take into account the modal-backdrop class which can't be removed
 */
var _fatalError = '\
	<article style="overflow-y:auto;padding:0 20px;font-family:Segoe UI Light,Segoe UI,Segoe WP,Helvetica Neue,sans-serif;font-size: 14px;height:100%;position:fixed;width:100%;z-index:100000;background-color:white;">\
		<H2 style="margin-top:10px;margin-bottom: 20px;font-size:20px;font-weight:bold">A fatal error occurred during initialization process</H2>\
		{{#each $diagnoses}}\
			<section style="border:red solid 1px;margin: 10px;padding: 10px;color: black;background-color: #FBE3E3;">\
				{{#if $message}}<b>{{{$message}}}</b>{{/if}}\
				{{#if $stackTrace}}<br><br>{{{$stackTrace}}}{{/if}}\
			</section>\
		{{/each}}\
		{{#if clearLocalDb}}<button onClick="window._sm_clearLocalDb();" >Clear Local DataBase</button>{{/if}}\
	</article>';
// Add Handlebars to root
window.Handlebars = require('syracuse-tablet/html/deps/handlebars-latest');
// Add our own helpers
require('syracuse-tablet/html/js/helpers/handlebarsHelpers').registerHelpers(window.Handlebars);
//Add jqm orientation
require('syracuse-tablet/html/deps/jqm-orientation');
// Add jquery.cookie
require('syracuse-tablet/html/deps/jquery.cookie');


log && log("main loaded");

window.onerror = function(errorMsg, url, lineNumber, error) {
	if (globals.application) {
		globals.application.waitWheelStop();
	} else {
		uiutils.waitWheelStop();
	}
	try {
		modal.error("Javascript error", {
			where: "window.onerror",
			exception: error,
			message: errorMsg + "\n" + (url ? "Url : " + jsutils.cleanStack(url) + "\nLineNumber : " + lineNumber : "")
		});
	} catch (e) {
		var msg = errorMsg + "\n" + (error ? +JSON.stringify(error, null, 2) : (url ? "Url : " + url + "\nLineNumber : " + lineNumber : ""));
		alert(msg);
	}
};

var _forceLogin = function(message, isError, offlineHint) {
	var deferred = $.Deferred();
	globals.getApplication().logout(message, isError, offlineHint).then(function() {
		deferred.resolve();
	}).fail(function(e) {
		globals.getModal().error("Int process - logout error", e, function() {
			deferred.resolve();
		});
	});
	return deferred.promise();
};
var _locale = null;
var _text = function(id) {
	if (!_locale) {
		_locale = require('syracuse-tablet/html/js/helpers/locale');
	}
	return _locale ? _locale.text(id) : id;
};

function _startup() {
	log && log("main startup");
	scroller.init();
	var nativeApp = null;
	return native.init().then(function() {
			nativeApp = native.getModule("nativeApp");
			if (window.smNativeLogger && window.smNativeLogger.log) {
				window.smNativeLogger.log("_startup nativeApp=", nativeApp != null);
			}
			return initStyles.init();
		}).then(function() {
			uiutils.waitWheelStart();
			return initLocale.init();
		})
		.then(function() {
			return initModules.init();
		})
		.then(function() {
			return initLogin.init();
		})
		.then(function(userLogedIn) {
			uiutils.waitWheelStop();
			log && log("Main native app: " + (nativeApp != null));
			if (nativeApp) {
				// Send notification to wrapping application to signal all is loaded
				nativeApp.notifLoaded();
			}
			if (!userLogedIn) {
				_forceLogin(_text("login.authentication"), false);
			}
		}).fail(function(e) {
			var diags = jsutils.getPropByPath(jsutils.convertToDiagnoses(e, false), "$diagnoses");
			var message = diags && diags.length > 0 ? diags[0].$message : null;
			log && log("Main startup failed: " + (message || (e && JSON.stringify(e))));
			uiutils.waitWheelStop();

			if (nativeApp && e != null && e.$redirectPage === "login") {
				// If process failed but it's just because authentication, we assume all is ok
				nativeApp.notifLoaded();
			} else if (nativeApp) {
				// Send notification to wrapping application to signal something is wrong
				nativeApp.notifStartFail("" + message || "Startup error");
			}

			// Ensure to switch to offline mode so the navigation to the login page on a failed
			// initialization will directly show the offline mode login page
			var offlineHint;
			if (e && e.$noConnectionError === true) {
				globals.setOfflineQuiet(true);
				offlineHint = true;
			}

			// Application is not necessary available
			if (globals.getApplication()) {
				_forceLogin(message, true, offlineHint).then(function() {
					// $redirectPage means that the user clicked on logout in the selectContext dialog
					if (e != null && e.$redirectPage !== "login") {
						globals.getModal().error(_text("startup.error"), e);
						log && log(JSON.stringify(e));
					}
				});
			} else {
				$("#s-m-site-all").empty();
				var diags = jsutils.convertToDiagnoses(e, true);
				// #7942 To allow user to clear the local DB
				var st = globals.getStorage();
				if (!st) {
					st = require('syracuse-tablet/html/js/storage/storage');
					st = st ? st.getStorage(true) : null;
				}
				// Check if it's versionError error
				diags.clearLocalDb = JSON.stringify(diags).indexOf(_text("db.err.version")) > 0 && st && st.clearDatabaseSupported();
				if (diags.clearLocalDb) {
					window._sm_clearLocalDb = function() {
						st.clearDatabase().always(function(ok) {
							alert(ok ? "Local database has been deleted\nPlease reload the page" : "Database can't be deleted.\nPlease contact the administrator");
						});
					};
				}
				$("#s-m-site-all").empty().html(Handlebars.compile(_fatalError)(diags));
			}
		});
}

$(document).ready(function() {
	log && log("main document ready");

	if (document.location.href.indexOf("?circular") > -1) {
		xrayquire.showCycles(undefined, true);
	} else {
		_startup();
	}
});