"use strict";

var modal = require('syracuse-tablet/html/js/ui/modals/modal');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var initStyles = require('syracuse-tablet/html/js/init/initStyles');
var initLocale = require('syracuse-tablet/html/js/init/initLocale');
var initModules = require('syracuse-tablet/html/js/init/initModules');
var initLogin = require('syracuse-tablet/html/js/init/initLogin');
var nativeApp = require('syracuse-tablet/html/js/helpers/native/native').getModule("nativeApp");
var scroller = require('syracuse-tablet/html/js/helpers/scroller/scrollerHelpers');
var nativeJSCall = require('syracuse-tablet/html/js/helpers/native/nativeJSCall');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("main");

var _fatalError = '<html><body style="font-family:Segoe UI Light,Segoe UI,Segoe WP,Helvetica Neue,sans-serif;font-size: 14px;"><H2>A fatal error occurred during initialization process</H2><p>{{#each $diagnoses}}<section style="border:red solid 1px;margin: 10px;padding: 10px;color: black;background-color: #FBE3E3;">{{#if $message}}<b>{{{$message}}}</b>{{/if}}{{#if $stackTrace}}<br><br>{{{$stackTrace}}}{{/if}}</section>{{/each}}</p></br></body></html>';
// Add Handlebars to root
window.Handlebars = require('syracuse-tablet/html/deps/handlebars-latest');
// Add our own helpers
require('syracuse-tablet/html/js/helpers/handlebarsHelpers').registerHelpers(window.Handlebars);
//Add jqm orientation
require('syracuse-tablet/html/deps/jqm-orientation');
// Add jquery.cookie
require('syracuse-tablet/html/deps/jquery.cookie');

log && log("main loaded");

window.onerror = function(errorMsg, url, lineNumber, error) {
	if (globals.application) {
		globals.application.waitWheelStop();
	} else {
		uiutils.waitWheelStop();
	}
	try {
		modal.error("Javascript error", {
			where: "window.onerror",
			exception: error,
			message: errorMsg + "\n" + (url ? "Url : " + jsutils.cleanStack(url) + "\nLineNumber : " + lineNumber : "")
		});
	} catch (e) {
		var msg = errorMsg + "\n" + (error ? +JSON.stringify(error, null, 2) : (url ? "Url : " + url + "\nLineNumber : " + lineNumber : ""));
		alert(msg);
	}
};

function _startup() {
	log && log("main startup");
	// Register global callback methods that can be access by eventual wrapper
	nativeJSCall.init();
	scroller.init();
	return initStyles.init()
		.then(function() {
			uiutils.waitWheelStart();
			return initLocale.init();
		})
		.then(function() {
			return initModules.init();
		})
		.then(function() {
			return initLogin.init();
		})
		.then(function() {
			uiutils.waitWheelStop();
			log && log("Main native app: " + (nativeApp != null));
			if (nativeApp) {
				// Send notification to wrapping application to signal all is loaded
				nativeApp.notifLoaded();
			}
		}).fail(function(e) {
			log && log("Main startup failed: " + ((e && e.message) || (e && JSON.stringify(e))));
			uiutils.waitWheelStop();

			if (nativeApp && e != null && e.$redirectPage === "login") {
				// If process failed but it's just because auhtentication, we asume all is ok
				nativeApp.notifLoaded();
			} else if (nativeApp) {
				// Send notification to wrapping application to signal something is wrong
				nativeApp.notifStartFail("" + e.message || "Startup error");
			}

			// Ensure to switch to offline mode so the navigation to the login page on a failed
			// initialisation will directly show the offline mode login page
			var offlineHint;
			if (e && e.$noConnectionError === true) {
				globals.setOfflineQuiet(true);
				offlineHint = true;
			}

			// Application is not necessary available
			if (globals.getApplication()) {
				globals.getApplication().logout(e.message, true, offlineHint)
					.then(function() {
						// $redirectPage means that the user clicked on logout in the selectContext dialog
						if (e != null && e.$redirectPage !== "login") {
							var locale = require('syracuse-tablet/html/js/helpers/locale');
							globals.getModal().error(locale.text("startup.error"), e);
							log && log(JSON.stringify(e));
						}
					});
			} else {
				$(document.body).empty();
				var diags = jsutils.convertToDiagnoses(e, true);
				window.document.write(Handlebars.compile(_fatalError)(diags));
			}
		});
}

$(document).ready(function() {
	log && log("main document ready");

	if (document.location.href.indexOf("?circular") > -1) {
		xrayquire.showCycles(undefined, true);
	} else {
		_startup();
	}
});