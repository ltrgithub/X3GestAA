"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var modal = require('syracuse-tablet/html/js/ui/modals/modal');

var _selectors = {
	date: {
		"windows": null,
		"android": null,
		"ios": null,
		"default": require('syracuse-tablet/html/js/ui/datetimeSelectors/dateSelector').Klass,
		"handler": require('syracuse-tablet/html/js/ui/datetimeSelectors/selectorSwitchHandler').Klass
	},
	datetime: {
		"windows": null,
		"android": null,
		"ios": null,
		"default": require('syracuse-tablet/html/js/ui/datetimeSelectors/datetimeSelector').Klass,
		"handler": require('syracuse-tablet/html/js/ui/datetimeSelectors/selectorSwitchHandler').Klass
	},
	time: {
		"windows": null,
		"android": null,
		"ios": null,
		"default": require('syracuse-tablet/html/js/ui/datetimeSelectors/timeSelector').Klass,
		"handler": require('syracuse-tablet/html/js/ui/datetimeSelectors/selectorSwitchHandler').Klass
	}
};
var getType = function(propertyType) {
	var type;
	switch (propertyType) {
		case "application/x-date":
			type = "date";
			break;
		case "application/x-datetime":
			type = "datetime";
			break;
		case "application/x-time":
			type = "time";
			break;
		default:
			type = null;
	}
	return type;
};
/*
	Returns appropriate selector controller according to field type
	@param	propertyType 	Field property type application/x-{date,time,datetime}
*/
var getSelector = function(propertyType) {
	var type = getType(propertyType);
	if (type === null)
		throw new Error("Expected date/time/datetime type. Got " + propertyType);
	var laf = globals.getLookAndFeel();
	var selector = _selectors[type]; // select for type
	if (selector) {
		selector = selector[laf] || selector["default"]; // select per OS or use default
	}

	if (!selector) {
		throw new Error("Expected type. Got " + propertyType);
	}
	return new selector();
};

var getHandler = function(field) {
	var type = getType(field.$type);
	if (type === null)
		throw new Error("Expected date/time/datetime type. Got " + field.$type);
	var selector = _selectors[type]; // handler for type
	if (selector) {
		var handler = selector["handler"];
	}

	if (!handler) {
		return null;
	}
	return new handler(field);
};

/*
	Creates selector widget
	@param	field 	Field controller
*/
var _createSelector = function(field) {
	if (!field || !field.setFieldValueFromSelector) {
		throw new Error("_createSelector - Field must implement setFieldValueFromSelector");
	}
	// selector handler

	var sHandler = getHandler(field);

	// selector controller (date/time/datetime according to type)
	var ctrlSelector = getSelector(field.$type);

	// selector dom
	var selectorDom = ctrlSelector.create(field, sHandler);

	var $$selectorModal = modal.field(field.getTitle(), selectorDom.outerHTML, function(modalEvent, $$modalElmt) {
		// build content on open
		if (modalEvent == 'shown.bs.modal') {
			if (sHandler) {
				sHandler.setContainer($$modalElmt);
				sHandler.setParentSlot($$modalElmt.find(".modal-body")[0]);
			}
			ctrlSelector.bindEvents(true);

		}
		// run actions on close 'hidden.bs.modal'
		else {
			ctrlSelector.destroy();
		}
	});

};

exports.createSelector = _createSelector;