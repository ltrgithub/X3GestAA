"use strict";
var utils = require("syracuse-tablet/html/js/helpers/utils");
var templates = require('syracuse-tablet/html/js/helpers/templating');

function Layout() {}

// TODO improve by making recursive call with return of Layout object
exports.Layout = utils
	.defineClass(
		Layout,
		null, {
			loadLayout: function($layout, page, parent) {
				this.page = page;
				this.$layout = $layout;
				this.$layout.$layoutType = this.$layout.$layoutType || "stack";
				this.parent = parent;

				// TODO add id ?

				if (this.$layout.$items) {
					for (var ii = 0, jj = this.$layout.$items.length; ii < jj; ii++) {
						this.appendChildItem((new Layout()).loadLayout(
							this.$layout.$items[ii], this.page,
							this));
					}
				} else {
					if (this.$layout.$bind) {
						// TODO get $property JSON
						// TODO get field item type
						// TODO create field item
						var fieldItem;
						if (this.$layout.$vignette) {
							// var $representation =
							// page.getPageRepresentation()
						} else {
							// TODO to improve
							this.appendChildItem((new FieldLayout())
								.loadLayout(this.$layout.$bind));
						}

						// TODO append field Items to a map, property of
						// a page
						// (this.page.fieldItems =
						// this.page.fieldItems ||
						// {})[this.$layout.$bind] = fieldItem;

					}
				}
				return this;
			},
			appendChildItem: function(item) {
				if (!this.childItems) {
					this.childItems = [];
				}
				this.childItems.push(item);
			},
			buildHtml: function() {
				var context = {};

				context.$layoutType = this.$layout.$layoutType;
				context.isTabLayout = this.isTabLayout = this.$layout.$layoutType === "tabs";
				if (this.isTabLayout) {
					context.navListItem = [];

					for (var ii = 0, jj = this.childItems.length; ii < jj; ii++) {
						context.navListItem.push({
							active: ii == 0 ? true : false,
							$title: this.childItems[ii].$layout.$title
						});
					}
				} else {
					context.$title = !this.isTabSection ? this.$layout.$title : "";
				}

				// set cells/columns widths for row layout type
				if (this.$layout.$layoutType == "row") {
					this.isRowLayout = true;

					// TODO To improve. If no value specified, set to 12
					// by default ??
					if (!this.$layout.$widthMd && !this.$layout.$widthSm && !this.$layout.$widthXs && !this.$layout.$widthLd) {
						throw new Error("Columns widths not specified");
					}

					// desktop only for test purpose
					var $widthMd = this.$layout.$widthMd.split(",");

				}

				if (this.childItems.length == 1) {
					context.hasOneChild = true;
					context.childHTML = this.childItems[0].buildHtml();
				} else {
					// build childItem context
					context.coreItem = [];
					for (var ii = 0, jj = this.childItems.length; ii < jj; ii++) {
						// set isTabsection property value to true for
						// children item
						if (this.isTabLayout) {
							this.childItems[ii].isTabSection = true;
						}

						context.coreItem.push({
							$layoutType: this.$layout.$layoutType,
							isRowLayout: this.isRowLayout,
							$widthMd: $widthMd && $widthMd[ii],
							display: !(this.isTabLayout && ii != 0),
							coreItemContent: this.childItems[ii]
								.buildHtml()
						});
					}
				}
				return templates.execSync("tmplLayout", context);
			}
		});

function FieldLayout() {}

exports.FieldLayout = utils.defineClass(FieldLayout, Layout, {
	loadLayout: function($bind, $property) {
		// TODO
		// TODO add id ?
		this.$bind = $bind;
		// / ! \ FOR TEST PURPOSE
		if (!$property) {
			this.$type = "application/x-string";
		}
		//this.fieldControl = controlsFactory.createControl(undefined, this.$type);

		return this;
	},
	buildHtml: function() {
		// TODO

		// / ! \ FOR TEST PURPOSE
		var widgetDom = document.createElement("div");
		widgetDom.className = "sm-widget thumbnail";
		var sampleValue = document.createElement("div");
		sampleValue.textContent = this.$bind;
		widgetDom.appendChild(sampleValue);

		return widgetDom.outerHTML;
	},
	loadData: function(data) {
		// TODO
	}
});