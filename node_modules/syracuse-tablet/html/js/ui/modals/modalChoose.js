"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var Base = require('syracuse-tablet/html/js/ui/modals/modalDialogScroll').ModalDialogScroll;

var _templateAll = {
	content: ' \
		<div class="list-group">\
			{{#each elmts}} \
				<a draggable="false" href="#" class="list-group-item  {{selected}}" data-action="clickLine" data-params="{{dataParams}}">\
					<h4 class="list-group-item-heading">{{title}}</h4>\
					{{#if info}}\
						<p class="list-group-item-text">{{info}}</p>\
					{{/if}}\
				</a>\
			{{/each}} \
		</div>'
};
var _templates = {};

function _getHtml(name, ctx) {
	var tmpl = _templates[name];
	if (!tmpl) {
		tmpl = _templates[name] = Handlebars.compile(_templateAll[name]);
	}
	return tmpl(ctx);
};
exports.ModalChoose = utils.defineClass(
	function ModalChoose(dataList) {
		Base.call(this, dataList);
		this.dataList = [];
		this.dataList = $.extend(true, [], dataList);
		this.selected = {};
	}, Base, {
		getDisplayFlags: function() {
			var opts = {
				tablet: "half_right",
				smartphone: "full"
			}
			return Base.prototype.getDisplayFlags.call(this, opts)
		},
		_getDataContext: function(datactx, opts) {
			var ctx = Base.prototype._getDataContext.call(this);
			var content = _getHtml("content", {
				elmts: datactx
			});
			var extendedCtx = $.extend(true, ctx, {
				buttonValidate: opts.buttonValidate,
				title: opts.title,
				content: content
			})
			return extendedCtx;
		},
		_onAction: function(action, param) {
			var self = this;
			if (action === "clickLine") {
				var $$item = self.$$elmt.find('[data-params="' + param + '"]');
				if (self.selected[param]) {
					$$item.removeClass("active");
					delete self.selected[param];
				} else {
					$$tem.addClass("active");
					$$item.selected[param] = self._selectedElmt(param);
				}
			}
			// dont close on actions
			return false;
		},
		_selectedElmt: function(key) {
			var match;
			this.dataList.some(function(elmt) {
				if (elmt.key === key) {
					match = elmt;
					return true;
				}
			});
			return match;
		},
		_getResult: function() {
			var self = this;
			return Object.keys(self.selected).map(function(key) {
				return self.selected[key];
			});
		}
	}
);