"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var modalDialog = require('syracuse-tablet/html/js/ui/modals/modalDialog');
var Hammer = require('syracuse-tablet/html/deps/hammerjs-2.0.4/hammer');
var uiRect = require('syracuse-tablet/html/js/ui/rect');
var HammerScroller = require('syracuse-tablet/html/js/helpers/hammerScroller').Klass;

var _templateAll = {
	header: '\
		<div class="modal-title {{severity}}">{{title}}</div>',
	content: '\
		<div class="s-m-modal-diag-content">\
			{{#each diags}} \
				<message id="s-m-msg-block-{{id}}" role="alert" style="display:{{this.display}}"> \
					<div style="white-space: pre-line;">{{this.message}}</div> \
					{{#if stack}} \
						<a id="s-m-msg-stack-{{id}}" draggable="false" name="more" href="#" data-action="more">{{../../stackShow}}</a> \
						<section>\
							<div class="s-m-scroll-wrapper">\
								<stack name="stack" class="s-m-msg-stack-content"> \
									{{{this.stack}}} \
								</stack> \
							</div> \
						</section>\
					{{/if}} \
				</message> \
			{{/each}}\
		</div>\
		<div class="s-m-modal-diag-goto">\
			{{#each diags}}\
				<a id="s-m-msg-goto-{{id}}" data-action="goto" data-params="{{id}}">\
					<i class="fa fa-circle-o" data-action="goto" data-params="{{id}}"></i>\
				</a>\
			{{/each}}\
		</div>',
	footer: '<button type="button" class="btn btn-default" data-action="$cancel">{{close}}</button>'
};


var _Klass = utils.defineClass(
	function ModalDiagnoses(title, diag) {
		var self = this;
		modalDialog.ModalBase.call(self);
		// Init params
		self.title = title;
		self.diag = diag;
		self.diagId = 0;
		self.curMsg = 0;
	}, modalDialog.ModalBase, {
		destroy: function() {
			var self = this;
			// destroy hammer component
			this._destroySwiper();
			// destroy gestureMgr (used for vertical swipe within the stack)
			if (this._gestureMgrMap && !$.isEmptyObject(this._gestureMgrMap)) {
				$.each(this._gestureMgrMap, function(key, gestureMgr) {
					gestureMgr.destroy();
				});
				this._gestureMgrMap = null;
			}
			modalDialog.ModalBase.prototype.destroy.call(self);
		},
		_getTemplates: function() {
			var self = this;
			return {
				std: _templateAll
			};
		},
		getDisplayFlags: function() {
			var self = this;
			var displayFlags = self.displayFlags || {};
			if (self.deviceType === "tablet") {
				displayFlags.modalClass = "diagnoses tablet";
			} else {
				displayFlags.modalClass = "diagnoses mobile";
			}
			return displayFlags;
		},
		_getDataContext: function() {
			var self = this;
			var ctx = {
				close: locale.text("modal.btn.close"),
				stackShow: locale.text("modal.diagnoses.btnstack_show"),
				severity: "info",
				diags: []
			};
			self.diag.$diagnoses.forEach(function(d) {
				var sev;
				if (d.$severity === "success" || d.$severity === "info" || d.$severity === "warning") {
					sev = d.$severity;
				} else {
					sev = "danger";
					ctx.severity = "error";
				}
				ctx.diags.push({
					id: self.diagId,
					display: self.diagId === 0 ? "block" : "none",
					message: d.$message,
					severity: sev,
					severityLabel: locale.text("severity." + sev),
					stack: d.$stackTrace && d.$stackTrace.replace(/\n/g, "<BR/>")
				});

				self.diagId++;
			});

			self.title = self.title || (ctx.severity === "error" ? locale.text("modal.error.ttl") : locale.text("modal.info.ttl"));
			ctx.title = self.title;

			return ctx;
		},
		_onAction: function(action, param) {
			var self = this;
			switch (action) {
				case "next":
					self._next();
					break;
				case "prev":
					self._prev();
					break;
				case "more":
					self._more();
					break;
				case "goto":
					self._goTo(param);
					break;
			}

			// dont close on actions
			return false;
		},
		_goTo: function(id) {
			var self = this;
			for (var ii = 0, jj = self.diagId; ii < jj; ii++) {
				$("#s-m-msg-block-" + ii, self.$$elmt).css("display", ii == id ? "block" : "none");
			}
			self.curMsg = parseInt(id, 10);
			self._updateButtons();
		},
		_next: function() {
			var self = this;
			if (self.curMsg < (self.diagId - 1)) {
				$("#s-m-msg-block-" + self.curMsg, self.$$elmt).css("display", "none");
				self.curMsg++;
				$("#s-m-msg-block-" + self.curMsg, self.$$elmt).css("display", "block");
				self._updateButtons();
			}
		},
		_prev: function() {
			var self = this;
			if (self.curMsg > 0) {
				$("#s-m-msg-block-" + self.curMsg, self.$$elmt).css("display", "none");
				self.curMsg--;
				$("#s-m-msg-block-" + self.curMsg, self.$$elmt).css("display", "block");
				self._updateButtons();
			}
		},
		_more: function() {
			var self = this;
			var $$btn = $("#s-m-msg-stack-" + self.curMsg, self.$$elmt);
			var $$stackSection = $("section", $$btn.parent());
			if ($$stackSection.css("display") === "none") {
				$$stackSection.css("display", "block");
				$$btn.text(locale.text("modal.diagnoses.btnstack_hide"));
				self._handleGesture();
			} else {
				$$stackSection.css("display", "none");
				$$btn.text(locale.text("modal.diagnoses.btnstack_show"));
			}
		},
		_updateButtons: function() {
			var self = this;

			for (var ii = 0, jj = self.diagId; ii < jj; ii++) {
				var $$navDot = $("a#s-m-msg-goto-" + ii + " i", self.$$elmt);
				$$navDot.toggleClass("fa-circle", ii == self.curMsg);
				$$navDot.toggleClass("fa-circle-o", ii !== self.curMsg);
			}

			// Only show x of y in case there are more than 1 diagnoses
			if (self.diagId > 1) {
				$(".modal-title", self.$$elmt).text(self.title + " (" + (self.curMsg + 1) + "/" + self.diagId + ")");
			} else {
				// hide nav circles if one diag only
				$(".s-m-modal-diag-goto", self.$$elmt).css("display", "none");
			}
		},
		_onShow: function(evt) {
			var self = this;
			modalDialog.ModalBase.prototype._onShow.call(self, evt);
			self._updateButtons();

			// init swype handler if more than one diagnose
			if (self.diagId > 1) {
				self._initSwiper();
			}
		},
		_handleGesture: function() {
			var self = this;
			self._gestureMgrMap = self._gestureMgrMap || {};

			if (!self._gestureMgrMap["gestureMgr" + self.curMsg]) {
				var $$scrollElmt = $(".s-m-msg-stack-content", $("#s-m-msg-block-" + self.curMsg, self.$$elmt));
				var $$wrapper = $(".s-m-scroll-wrapper", $("#s-m-msg-block-" + self.curMsg, self.$$elmt));

				self._gestureMgrMap["gestureMgr" + self.curMsg] = new HammerScroller($$scrollElmt, {
					direction: "v"
				});
				var scrollRect = uiRect.elmtRect($$wrapper, "outer");
				self._gestureMgrMap["gestureMgr" + self.curMsg].init(scrollRect);
			}
		},
		/*
		 * User can navigate from one diagnose to another with a swipe gesture.
		 * This method will display appropriate diagnose message depending on the swipe gesture
		 */
		_onSwipe: function(evt) {
			if (utils.isEvtDirection(evt, "v")) return;

			var self = this;
			setTimeout(function() {
				var next = evt ? evt.type === "swipeleft" : null;
				if (next) {
					self._next();
				} else {
					self._prev();
				}
			});
		},
		_destroySwiper: function() {
			var self = this;
			if (self.hammer) {
				self.hammer.destroy();
				self.hammer = null;
			}
		},
		_initSwiper: function() {
			var self = this;
			self._destroySwiper();
			self.hammer = new Hammer($(".s-m-modal-diag-content", self.$$elmt).get(0));
			self.hammer.get("swipe").set({
				direction: Hammer.DIRECTION_HORIZONTAL
			});
			// listen to events...
			this.hammer.on("swipeleft swiperight", Hammer.bindFn(self._onSwipe, self));
		}
	}
);
exports.Modal = _Klass;