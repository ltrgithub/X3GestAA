"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var modalDialog = require('syracuse-tablet/html/js/ui/modals/modalDialog');

var _templateAll = {
	header: '\
		<buttons class="pull-right"> \
			<button type="button" class="btn btn-default s-m-modal-btn-validate" data-action="$validate"></button> \
			<button type="button" class="btn btn-default s-m-modal-btn-cancel" data-action="$cancel"></button> \
		</buttons> \
		<div class="modal-title">{{title}}</div> \
			',
	content: ' \
			<div class="s-m-scroll-wrapper s-m-scroll-wrapper-v">\
				<div class="form-group"> \
					<table class="s-m-translation" >\
					<tr>\
					<th>{{currentLang.title}}</th><th>{{translateLang.title}}</th>\
					</tr>\
					{{#each localizations}}\
					<tr>\
					<td>{{this.value}}</td><td><input type="text" id="{{this.key}}" value="{{this.valueTranslate}}"></td>\
					</tr>\
					{{/each}}\
					</table>\
				</div> \
			</div>',

	footer: '',
};

var _Klass = utils.defineClass(
	function ModalTranslationPage(ctx) {
		this.context = $.extend(true, {}, ctx);
		modalDialog.ModalBase.call(this);
		this.result = null;
	}, modalDialog.ModalBase, {
		_getTemplates: function() {
			return {
				std: _templateAll
			};
		},
		_getDataContext: function() {
			var localizations = [],
				$localization = this.context.$localization,
				currentLang = this.context.currentLang,
				translateLang = this.context.translateLang,
				_localization = utils.getLocalization($localization, currentLang.value);
			if (!_localization) return [];
			Object.keys(_localization).forEach(function(key) {
				if (_localization[key]) {
					localizations.push({
						'key': key,
						'value': _localization[key],
						'valueTranslate': utils.getLocalizedText($localization, translateLang.value, key)
					});
				}
			});
			var data = {};
			data.localizations = localizations;
			data.currentLang = currentLang;
			data.translateLang = translateLang;
			data.title = this.context.pageTitle;
			return data;
		},
		_onShow: function() {
			modalDialog.ModalBase.prototype._onShow.call(this);
		},
		_onValidate: function() {
			var currentLang = this.context.currentLang.value,
				translateLang = this.context.translateLang.value,
				localization = this.context.$localization,
				_localizationCurrentLang = utils.getLocalization(this.context.$localization, currentLang),
				_localizationTranslatedLang = utils.getLocalization(this.context.$localization, translateLang),
				value, res;

			Object.keys(_localizationCurrentLang).forEach(function(key) {
				value = $("input[id='" + key + "'").val();
				if (_localizationTranslatedLang && _localizationTranslatedLang[key] !== "") { //keep existing value
					if (!res) res = {};
					res[key] = _localizationTranslatedLang[key];
				}
				if ((!_localizationTranslatedLang && value !== "") || //no localization and at less a value filled
					(_localizationTranslatedLang &&
						((_localizationTranslatedLang[key] && value != _localizationTranslatedLang[key]) || //key but value dif
							(!_localizationTranslatedLang[key] && value)))) { //no key new value
					if (!res) res = {};
					res[key] = value;
				}
			});
			if (res) {
				delete(localization[translateLang]);
				localization[translateLang.toLowerCase()] = res;
				this.result = localization;
			}
		},
		_onCancel: function() {
			this.result = null;
		},
		_getResult: function() {
			return this.result;
		}
	}
);

exports.Modal = _Klass;