"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var Base = require('syracuse-tablet/html/js/ui/modals/modalChoose').ModalChoose;

var _Klass = utils.defineClass(
	function ModalChoosRoles(dataList) {
		var self = this;
		Base.call(self, dataList);
		self.rolesSelected = {}; //initial roles selected
	}, Base, {
		_getDataContext: function() {
			var self = this;
			var datactx = [];
			self.dataList.forEach(function(a) {
				datactx.push({
					title: a.$code,
					info: a.$description,
					dataParams: a.$uuid,
					selected: a.$selected

				});
				a.key = a.$uuid;
				if (a.$selected) {
					self.rolesSelected[a.$uuid] = true
				}
			});
			self.selectedRoles = $.extend(true, {}, self.rolesSelected); // new list
			return Base.prototype._getDataContext.call(self, datactx, {
				buttonValidate: true,
				title: locale.text("welcome.select.roles.title"),
			});
		},
		_onCancel: function() {
			this.selectedRoles = $.extend(true, {}, this.rolesSelected);
		},
		_onAction: function(action, param) {
			var self = this;
			if (action === "clickLine") {
				var $$item = self.$$elmt.find('[data-params="' + param + '"]');
				if (self.selectedRoles[param]) {
					$$item.removeClass("active");
					delete self.selectedRoles[param];
				} else {
					$$item.addClass("active");
					self.selectedRoles[param] = true;
				}
			}
			// dont close on actions
			return false;
		},
		_getResult: function() {
			var self = this;
			var change = self._compare(self.selectedRoles, self.rolesSelected);
			return {
				"change": change,
				"selectedRoles": Object.keys(self.selectedRoles)
			};
		},
		_compare: function(roles1, roles2) {
			roles1 = roles1 || {};
			roles2 = roles2 || {};
			for (var prop in roles1) {
				if (!roles2[prop]) return true;
			};
			for (var prop in roles2) {
				if (!roles1[prop]) return true;
			}
			return false;
		}
	}
);

exports.Modal = _Klass;