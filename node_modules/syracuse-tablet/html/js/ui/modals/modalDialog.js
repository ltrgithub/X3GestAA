"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var scroller = require('syracuse-tablet/html/js/helpers/scroller/scrollerHelpers');
var uiRect = require('syracuse-tablet/html/js/ui/rect');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _dialogTpl = '\
	<div class="modal {{displayFlags.modalClass}}" tabindex="-1" role="dialog">\
	<div class="modal-dialog">\
	<div class="modal-content"> \
		{{{header}}} \
		<div class="modal-body">{{{content}}}</div> \
		{{{footer}}} \
	</div> \
	</div>\
	</div>';

var _openModalsPromises = [];

/**
 *
 */
var _Klass = utils.defineClass(

	function BaseModal() {
		var self = this;
		var site = globals.getSiteLayout();
		self.deviceType = site.getDeviceType(); // tablet or smartphone
		self.displayFlags = {
			modalClass: ""
		};
	}, null, {
		destroy: function() {
			if (this.$$elmt) {
				this.$$elmt.unbind();
				this.$$elmt.remove();
			}
			this._checkShowNextModal();
			notifications.unsubscribe(this);
		},

		_checkShowNextModal: function() {
			_openModalsPromises.shift();
			if (_openModalsPromises.length > 0) {
				_openModalsPromises[0].resolve();
			}
		},
		/*
		 * =======================================
		 * Functions that must be overiden
		 * =======================================
		 */

		/*
		 * Needs to be overiden by dialog implementations
		 * Returns html template per device (or only std if no special ones)
		 */
		_getTemplates: function() {
			return {
				std: {},
				tablet: {},
				smartphone: {}
			};
		},

		/*
		 * Needs to be overiden by dialog implementations
		 * Returns data to merge into template
		 */
		_getDataContext: function() {
			return {};
		},


		/*
		 * Can be overidden to handle clicks on data-action=$validate.
		 * Should set value returned by _getResult()
		 * Return false to NOT close dialog
		 */
		_onValidate: function() {

		},

		/*
		 * Can be overidden to handle clicks on data-action=$cancel.
		 * Should set value returned by _getResult()
		 * Return false to NOT close dialog
		 */
		_onCancel: function() {

		},

		/*
		 * Can be overidden to set result of dialog when it is closed
		 *
		 */
		_getResult: function() {

		},

		/*
		 * =======================================
		 * Functions that may be overiden
		 * =======================================
		 */

		/*
		 * Can be overidden to handle clicks on data-action dom elements.
		 * param=data-param
		 * Return false to NOT close dialog
		 */
		_onAction: function(action, param) {

		},

		_compileTpl: function() {
			var self = this;
			var htmlTpls = self._getTemplates();
			var htmlTpl = htmlTpls[self.deviceType] || htmlTpls["std"];

			var tpl = {
				header: Handlebars.compile(htmlTpl.header),
				content: Handlebars.compile(htmlTpl.content),
				footer: Handlebars.compile(htmlTpl.footer),
			};
			return tpl;
		},

		_getWrapperTemplate: function() {
			return Handlebars.compile(_dialogTpl);
		},

		_ensureParent: function() {
			var self = this;
			var parentName = globals.isAuthoringActive() ? "s-m-modal-parent-auth" : "s-m-modal-parent";
			var $$parent = $("#" + parentName);
			if ($$parent.length < 1) {
				$$parent = $("<div>");
				$$parent.attr("id", parentName);
				if (globals.isAuthoringActive()) {
					$("body").append($$parent);
				} else {
					// If application not initialized we must display the message (error in init process)
					$("#s-m-app-container-id").css({
						width: "100%",
						height: "100%"
					});
					$("#s-m-app-id").show().addClass("s-m-modal-parent").append($$parent);
				}
			}
			self.$$parent = $$parent;
		},

		_createDOM: function() {
			var self = this;
			self.$$elmt = $(self.html);
		},

		getDisplayFlags: function() {
			var self = this;
			return self.displayFlags;
		},

		_hookEvents: function() {
			var self = this;
			self.$$elmt.on("shown.bs.modal", self._onShow.bind(self));
			self.$$elmt.on("hide.bs.modal", self._onHide.bind(self));

			self.$$elmt.delegate("[data-action]", "click", self._onButton.bind(self));
		},

		_attachDOM: function() {
			var self = this;
			self.$$parent.toggle(true);
			self.$$parent.append(self.$$elmt);
			self.$$elmt.modal({
				keyboard: false,
				backdrop: "static"
			});
		},

		_onShow: function(evt) {
			var self = this;
			self.$$elmt.css("padding-left", "");
			self._calcSize();
			var app = globals.getApplication();
			if (app) {
				app.notifModalOpen();
				self._initScrollers();
				notifications.subscribe(self, "sm.main.layout.changed");
			}
		},

		notifMainLayoutChanged: function(info, orientation, deviceType) {
			// Used by some dialogs
		},

		_onHide: function(evt) {
			var self = this;
			self.$$parent.toggle(false);
			var app = globals.getApplication();
			if (app) {
				app.notifModalClose();
			}
			self.deferred.resolve(self._getResult());
			self.destroy();
		},

		_onButton: function(evt) {
			var self = this;
			var $$t = $(evt.currentTarget);

			var param = $$t.attr("data-params");
			var act = $$t.attr("data-action");
			if (act) {
				evt.preventDefault();
				evt.stopPropagation();

				var res;
				if (act === "$validate") {
					res = self._onValidate();
				} else if (act === "$cancel") {
					res = self._onCancel();
				} else {
					res = self._onAction(act, param);
				}
				//_onCancel/_onCancel/_onAction can return either a promise or a data
				// So we can call asynchronous processes in theses methods
				utils.toPromise(res).then(function(res) {
					if (res !== false) {
						self.$$elmt.modal('hide');
					}
				});
			} else {
				// Close modal
				self.$$elmt.modal('hide');
			}
		},

		/**
		 * This is the only function to be called from a dialog user
		 * It shows the dialog and resolves the returned promise as soon as the dialog is closed
		 * forceDisplay: error forces the display of the modal
		 */
		show: function(forceDisplay) {
			var self = this;
			var startShow = new $.Deferred();
			if (forceDisplay === true) {
				_openModalsPromises = [];
			}
			_openModalsPromises.push(startShow);
			// First modal to open, so execute immediately
			if (_openModalsPromises.length === 1 || forceDisplay === true) {
				startShow.resolve();
			}

			self.deferred = new $.Deferred();
			startShow.then(function() {
				return self._getDataContext();
			}).then(function(data) {
				self.data = data;
			})
				.then(function() {
					self.template = self._compileTpl();
					var outerTpl = self._getWrapperTemplate();

					var header = self.template.header(self.data);
					var footer = self.template.footer(self.data);

					if (header.length > 0) {
						header = '<div class="modal-header">' + header + '</div>';
					}
					if (footer.length > 0) {
						footer = '<div class="modal-footer">' + footer + '</div>';
					}

					self.html = outerTpl({
						header: header,
						content: self.template.content(self.data),
						footer: footer,
						displayFlags: self.getDisplayFlags()
					});
					self._ensureParent();
					self._createDOM();
					self._hookEvents();
					self._attachDOM();
				}).fail(function(e) {
					// Cancel pending dialogs
					_openModalsPromises = [];
					self.deferred.reject(e);
				});

			return self.deferred.promise();
		},

		/*
		 *
		 */
		_initScrollers: function() {
			scroller.createSimpleScroller(this.$$elmt);
		},

		_calcSize: function() {
			var self = this;

			var df = self.getDisplayFlags();
			if (df.modalClass.indexOf("half_center") > -1 ||
				df.modalClass.indexOf("half_right") > -1 ||
				df.modalClass.indexOf("full") > -1) {
				var $$content = self.$$elmt.find(".modal-content");
				var $$header = self.$$elmt.find(".modal-header");
				var $$body = self.$$elmt.find(".modal-body");
				var $$footer = self.$$elmt.find(".modal-footer");

				var header = $$header.length > 0 ? uiRect.elmtRect($$header, "outer").height : 0;
				var footer = $$footer.length > 0 ? uiRect.elmtRect($$footer, "outer").height : 0;

				$$body.css({
					"top": header,
					"height": $$content.height() - header - footer
				});
			}
		}
	}
);

var _checkMsg = function(msg) {
	return msg ? msg.replace(/\n/g, "<br>") : "";
};

exports.checkMsg = _checkMsg;
exports.ModalBase = _Klass;