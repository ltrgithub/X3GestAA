"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var modalDialog = require('syracuse-tablet/html/js/ui/modals/modalDialog');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

// var authoringProperties = require('syracuse-tablet/html/js/authoring/authoringProperties');

var _templateAll = {
	header: '\
		<buttons class="pull-right"> \
			<button type="button" class="btn btn-default s-m-modal-btn-validate" data-action="$validate"></button> \
			<button type="button" class="btn btn-default s-m-modal-btn-cancel" data-action="$cancel"></button> \
		</buttons> \
		<div class="modal-title">{{title}}</div> \
			',
	content: ' \
			<div class="s-m-scroll-wrapper s-m-scroll-wrapper-v">\
				<div class="form-group s-m-scroll-element"> \
					<label>{{lab_title}}</label> \
					<div>{{tileTitle}}</div>\
					<label>{{lab_color}}</label> \
					<div class="s-m-list-colors">\
						{{#each colors}} \
							<a draggable="false" href="#" {{#if active}}class="active"{{/if}} data-action="clickColor" data-params="{{value}}">\
								<div class="s-m-bg s-m-color-{{value}}"> \
								</div> \
							</a>\
						{{/each}} \
					</div> \
					<label>{{lab_size}}</label> \
					<div class="s-m-list-sizes">\
						{{#each sizes}} \
							<a draggable="false" href="#" {{#if active}}class="active"{{/if}} data-action="clickSize" data-params="{{value}}">{{label}}</a>\
						{{/each}} \
					</div> \
					<label>{{lab_icon}}</label> \
					<div class="s-m-list-icons">\
						{{#each icons}} \
							<a draggable="false" href="#" {{#if active}}class="active"{{/if}} data-action="clickIcon" data-params="{{value}}"> \
								<i class="{{label}}"/> \
							</a>\
						{{/each}} \
					</div> \
					<div style="width:100%; display: inline-block;"></div> \
				</div> \
			</div>',

	footer: '',
};

var _Klass = utils.defineClass(
	function ModalConfigTile(tile) {
		var self = this;
		modalDialog.ModalBase.call(self);

		// Init params
		self.tile = tile;
		// Result
		self.result = null;
	}, modalDialog.ModalBase, {
		_getTemplates: function() {
			var self = this;
			return {
				std: _templateAll
			};
		},

		getDisplayFlags: function() {
			var self = this;
			var displayFlags = self.displayFlags || {};
			if (self.deviceType === "tablet") {
				displayFlags.modalClass = "config-tile half_right";
			} else {
				displayFlags.modalClass = "config-tile full";
			}
			return displayFlags;
		},

		_getDataContext: function() {
			var self = this;
			//	authoringProperties.initProperties();

			var properties = {} //authoringProperties.getAllProperties();
			var data = {
				label_validate: locale.text("welcome.tile.cfg.ok"),
				label_cancel: locale.text("welcome.tile.cfg.cancel"),
				title: locale.text("welcome.tile.cfg.title"),

				lab_title: locale.text("welcome.tile.cfg.lab_title"),
				lab_color: locale.text("welcome.tile.cfg.lab_color"),
				lab_size: locale.text("welcome.tile.cfg.lab_size"),
				lab_icon: locale.text("welcome.tile.cfg.lab_icon")
			};

			data.colors = properties.tileColor.values.map(function(e) {
				return {
					active: self.tile.color === e.value,
					value: e.value,
					label: e.label
				};
			});

			data.sizes = properties.tileSize.values.map(function(e) {
				return {
					active: self.tile.size === e.value,
					value: e.value,
					label: e.label
				};
			});

			data.icons = fontUtils.getTileIconList().map(function(e) {
				var cls = fontUtils.getIconByName(e);
				return {
					active: self.tile.icon === e,
					value: e,
					label: cls
				};
			});

			data.tileTitle = self.tile.title;
			return data;
		},

		// could be removed, result is set in _onAction
		_onValidate: function() {
			var self = this;
			var $$selected = self.$$elmt.find('a.active');
			var i;

			var tile = $.extend(true, {}, self.tile);

			//tile.title = self.$$elmt.find("#tile_title").val();

			for (i = 0; i < $$selected.length; i++) {
				var action = $($$selected[i]).attr("data-action");
				var param = $($$selected[i]).attr("data-params");
				switch (action) {
					case "clickColor":
						tile.color = param;
						break;
					case "clickSize":
						tile.size = param;
						break;
					case "clickIcon":
						tile.icon = param;
						break;
				}
			}
			self.result = tile;
		},
		_onCancel: function() {
			var self = this;
			self.result = null;
		},

		_onAction: function(action, param) {
			var self = this;
			switch (action) {
				case "clickColor":
				case "clickSize":
				case "clickIcon":
					var $$old = self.$$elmt.find('a.active[data-action="' + action + '"]');
					var $$new = self.$$elmt.find('a[data-action="' + action + '"][data-params="' + param + '"]');
					$$old.removeClass("active");
					$$new.addClass("active");
					break;
			}
			// dont close on actions
			return false;
		},

		_getResult: function() {
			var self = this;
			return self.result;
		}
	}
);

exports.Modal = _Klass;