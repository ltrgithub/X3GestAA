"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var Base = require('syracuse-tablet/html/js/ui/modals/modalDialogScroll').ModalDialogScroll;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

var authoringProperties = require('syracuse-tablet/html/js/authoring/authoringProperties');

var _templateAll = {
	content: ' \
		<div class="s-m-item-group">\
		<label>{{lab_group}}</label> \
			{{{dropDownGroup}}}\
		</div>\
		<div class="s-m-item-group">\
		<label>{{lab_size}}</label> \
		{{{dropDownSize}}}\
		</div>\
		<label>{{lab_color}}</label> \
		<div class="s-m-list-colors">\
			{{#each colors}} \
				<a draggable="false" href="#" {{#if active}}class="active"{{/if}} data-action="clickColor" data-params="{{value}}">\
					<div class="s-m-bg s-m-color-{{value}}"> \
					</div> \
				</a>\
			{{/each}} \
		</div> \
		<label>{{lab_icon}}</label> \
		<div class="s-m-list-icons">\
			{{#each icons}} \
				<a draggable="false" href="#" {{#if active}}class="active"{{/if}} data-action="clickIcon" data-params="{{value}}"> \
					<i class="{{label}}"/> \
				</a>\
			{{/each}} \
		</div> \
		<div style="width:100%; display: inline-block;"></div>',
	dropDown: '\
		<div id="{{action}}" class="btn-group">\
			<div class="{{dropDirection}}">\
				<button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-expanded="false">\
					<span class="s-m-selected-value">{{selectedValue}}</span><span class="caret"></span>\
				</button>\
				<ul class="dropdown-menu dropdown-menu-left" role="menu">\
					{{#each elmts}}\
						<li><a  {{#if $isHidden}}style="display:none"{{/if}} draggable="false" data-action="{{../action}}" data-params="{{value}},{{label}}" href="#">{{label}}</a></li>\
					{{/each}}\
				</ul>\
			</div>\
		</div>'
};
var _templates = {};

function _getHtml(name, ctx) {
	var tmpl = _templates[name];
	if (!tmpl) {
		tmpl = _templates[name] = Handlebars.compile(_templateAll[name]);
	}
	return tmpl(ctx);
};
/*
 * 
 * {
 * 	color:"darkgrey",
 * 	icon:"s-m-sales-documents",
 * 	size:"medium",
 * 	title:"My Sales documents", -> read only
 *  ctrlTile -> pass through
 *  gadgetId -> pass through
 * }
 */
var _Klass = utils.defineClass(
	function ModalConfigTile(opts) {
		var self = this;
		Base.call(self);

		// Init params
		self.tile = opts.tile;
		self.groups = opts.groups;
		// Result
		self.result = null;
	}, Base, {
		getDisplayFlags: function() {
			var opts = {
				tablet: "config-tile half_right",
				smartphone: "config-tile full"
			}
			return Base.prototype.getDisplayFlags.call(this, opts)
		},
		_getDataContext: function() {
			var self = this;
			var ctx = Base.prototype._getDataContext(this);
			authoringProperties.initProperties();

			var properties = authoringProperties.getAllProperties();
			var data = {
				lab_addgroup: locale.text("welcome.dashboard.add.group"),
				lab_group: locale.text("welcome.tile.cfg.lab_group"),
				lab_title: locale.text("welcome.tile.cfg.lab_title"),
				lab_color: locale.text("welcome.tile.cfg.lab_color"),
				lab_size: locale.text("welcome.tile.cfg.lab_size"),
				lab_icon: locale.text("welcome.tile.cfg.lab_icon"),
				currentSize: self.tile.size
			};

			data.colors = properties.tileColor.values.map(function(e) {
				return {
					active: self.tile.color === e.value,
					value: e.value,
					label: e.label
				};
			});
			data.sizes = properties.tileSize.values.map(function(e) {
				return {
					active: self.tile.size === e.value,
					value: e.value,
					label: e.label
				};
			});

			data.icons = fontUtils.getTileIconList().map(function(e) {
				var cls = fontUtils.getIconByName(e);
				return {
					active: self.tile.icon === e,
					value: e,
					label: cls
				};
			});
			var sizes = {
				elmts: data.sizes,
				selectedValue: data.currentSize,
				action: "clickSize",
				dropDirection: "dropdown"
			}
			data.dropDownSize = _getHtml("dropDown", sizes);

			var opts = {
				elmts: [{
					active: false,
					value: "$new",
					label: locale.text("welcome.dashboard.new.group")
				}],
				action: "clickGroup",
				dropDirection: "dropdown"

			}
			self.groups.forEach(function(group) {
				opts.elmts.push({
					active: group.current,
					value: group.id,
					label: group.title
				});
				if (group.current) opts.selectedValue = group.title
			});
			data.dropDownGroup = _getHtml("dropDown", opts);
			var content = _getHtml("content", data);
			var extendedCtx = $.extend(true, ctx, {
				buttonValidate: true,
				title: self.tile.title,
				content: content
			})
			return extendedCtx;
		},

		_onValidate: function() {
			var self = this;
			var $$selected = self.$$elmt.find('a.active');
			var i;

			var tile = $.extend(true, {}, self.tile);
			var group;
			for (i = 0; i < $$selected.length; i++) {
				var action = $($$selected[i]).attr("data-action");
				var param = $($$selected[i]).attr("data-params");
				var params = param.split(",")
				switch (action) {
					case "clickColor":
						tile.color = params[0];
						break;
					case "clickSize":
						tile.size = params[0];
						break;
					case "clickGroup":
						group = params[0];
						break;
					case "clickIcon":
						tile.icon = params[0];
						break;
				}
			}
			self.result = {
				tile: tile,
				group: group
			};
		},
		_onCancel: function() {
			this.result = null;
		},
		_onAction: function(action, param) {
			var self = this;
			var params = param.split(",")
			switch (action) {
				case "clickSize":
				case "clickGroup":
					$("#" + action + " button .s-m-selected-value", self.$$elmt).text(params[1])
					$("#" + action + " .open", self.$$elmt).removeClass("open")
				case "clickColor":
				case "clickIcon":
					var $$old = self.$$elmt.find('a.active[data-action="' + action + '"]');
					var $$new = self.$$elmt.find('a[data-action="' + action + '"][data-params="' + param + '"]');
					$$old.removeClass("active");
					$$new.addClass("active");
					break;
			}
			// dont close on actions
			return false;
		},

		_getResult: function() {
			return this.result;
		}
	}
);

exports.Modal = _Klass;