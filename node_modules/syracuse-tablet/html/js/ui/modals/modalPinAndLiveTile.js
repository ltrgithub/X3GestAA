"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var modalDialog = require('syracuse-tablet/html/js/ui/modals/modalDialog');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var selectorFactory = require('syracuse-tablet/html/js/ui/datetimeSelectors/selectorFactory');

var _templateAll = {
	header: '\
		<buttons class="pull-right"> \
			<button type="button" class="btn btn-default s-m-modal-btn-validate" data-action="$validate"></button> \
			<button type="button" class="btn btn-default s-m-modal-btn-cancel" data-action="$cancel"></button> \
		</buttons> \
		<div class="modal-title">{{title}}</div> \
			',
	content: ' \
			{{#if pinPage}}\
				<div class="modal-subtitle">{{pinPage.title}}</div> \
				<div class=""> \
					<div class="form-group"> \
						<table class="s-m-pinandlivetile">\
						{{#each pinPage.items}}\
						{{#if this.active}}\
						<tr><td>{{this.title}}</td>\
						<td><input id="{{this.id}}" type="checkbox" data-value="{{this.value}}"></td><tr>\
						{{/if}}\
						{{/each}}\
						</tr> \
						</table> \
					</div> \
				</div>\
			{{/if}}\
			{{#if scheduleMsg}}\
				<div class="modal-subtitle">{{scheduleMsg.title}}</div> \
				<div class=""> \
					<div class="form-group"> \
						<table class="s-m-schedulemsg">\
						{{#each scheduleMsg.items}}\
						<tr>\
						<td>{{this.label}}</td>\
						<td>\
						{{#if this.picker }}\
							<div  class="input-group">\
								<input type="text" class="form-control" size="{{this.size}}" id="{{this.id}}" value="">\
								<span class="input-group-btn">\
									<button data-action="{{this.dataAction}}" class="btn btn-default">\
									<span class="{{this.icon}}"></span>\
								<\span>\
							<\div>\
						{{else}}\
							<input type="text"  class="form-control" size="{{this.size}}" id="{{this.id}}" value="">\
						{{/if}}\
						</td>\
						</tr>\
						{{/each}}\
						</table> \
					</div> \
				</div>\
			{{/if}}\
			{{#if share}}\
				<div class="modal-subtitle" >{{share.title}}</div> \
				<a href="#" class="s-m-link" data-action="{{share.action}}">\
					<i class="{{share.icon}}"/>\
				<span>{{{share.label}}}</span>\
			</a>\
			{{/if}}',
	footer: '',
};
var _pinItems = [{
	active: false,
	id: "pinWelcome",
	value: false
}, {
	active: false,
	id: "liveTile",
	value: false
}];
var _scheduleMsgItems = [{
	id: "date",
	size: 10,
	type: "application/x-date",
	icon: fontUtils.dateFieldIcon("application/x-date").join(" "),
	picker: true,
	dataAction: "datePicker"
}, {
	id: "time",
	size: 10,
	type: "application/x-time",
	icon: fontUtils.dateFieldIcon("application/x-time").join(" "),
	picker: true,
	dataAction: "timePicker"
}, {
	id: "description",
	size: 50,
	type: "application/x-string"
}];
/*
ctx: {
	liveTile: false,
	pageTitle: "Customer Dashboard",
	pinWelcome: true
}
opt :{
	liveTile: false,
	scheduleMsg: true,
	share: true,
	pinWelcome: true
}
*/
var _Klass = utils.defineClass(
	function ModalPinAndLiveTile(ctx, opt) {
		ctx.opt = opt;
		this.context = $.extend(true, {}, ctx);
		this.context.opt.share = false;
		modalDialog.ModalBase.call(this);
		this.result = null;
	}, modalDialog.ModalBase, {
		_getTemplates: function() {
			return {
				std: _templateAll
			};
		},
		getDisplayFlags: function() {
			var self = this;
			var displayFlags = self.displayFlags || {};
			if (self.deviceType === "tablet") {
				displayFlags.modalClass = "pinpage half_right";
			} else {
				displayFlags.modalClass = "pinpage full";
			}
			return displayFlags;
		},
		/*Depending on opt
		 * 
		 * 	"opt": {
				"liveTile": true,
				"scheduleMsg": true,
				"share": false,
				"pinWelcome": true
			}
		 */
		_getDataContext: function() {
			var self = this;
			var data = {};
			data.title = this.context.pageTitle || "";
			if (this.context.opt.liveTile || this.context.opt.pinWelcome) {
				_pinItems.forEach(function(item) {
					item.active = self.context.opt[item.id];
					item.value = false;
					item.title = locale.text(item.id + ".page.add");
				});
				data.pinPage = {
					title: locale.text("pin.page.subtitle"),
					items: _pinItems
				};
			};
			if (this.context.opt.scheduleMsg) {
				_scheduleMsgItems.forEach(function(item) {
					item.label = locale.text("schedule.message." + item.id + ".label");
				});
				data.scheduleMsg = {
					title: locale.text("schedule.message.page.subtitle"),
					items: _scheduleMsgItems
				};
			};
			if (this.context.opt.share) {
				data.share = {
					title: locale.text("share.page.subtitle"),
					action: "nativeShare",
					icon: fontUtils.pageIcon("nativeShare"),
					label: locale.text("action.nativeShare")
				};
			};
			return data;
		},
		_onShow: function() {
			var self = this;
			modalDialog.ModalBase.prototype._onShow.call(this);
			_pinItems.forEach(function(item) {
				if (item.active) {
					var $$item = self.$$elmt.find("#" + item.id);
					self.context[item.id] = self.context[item.id] || false;
					$$item.bootstrapSwitch("onText", locale.text(item.id + ".page.label.onText"));
					$$item.bootstrapSwitch("offText", locale.text(item.id + ".page.label.offText"));
					$$item.bootstrapSwitch("size", "small");
					$$item.bootstrapSwitch("onColor", "default");
					$$item.bootstrapSwitch("offColor", "default");
					$$item.bootstrapSwitch('state', self.context[item.id]);
				}
			});
		},
		_onValidate: function() {
			var content = null,
				self = this;
			if (this.context.opt.liveTile || this.context.opt.pinWelcome) {
				_pinItems.forEach(function(item) {
					var $$item = self.$$elmt.find("#" + item.id);
					if (item.active) {
						var value = $$item.bootstrapSwitch('state');
						if (value != self.context[item.id]) {
							content = content || {};
							content["toggle" + item.id] = "change";
						}
					}
				});
			};
			this.result = {};
			this.result.action = content ? "yes" : "no";
			this.result.content = content;
		},
		_onCancel: function() {
			this.result = {};
			this.result.action = "no";
			this.result.content = null;
		},
		_getResult: function() {
			return this.result;
		},
		_onAction: function(action, param) {
			var self = this;
			switch (action) {
				case "nativeShare":
					globals.getApplication()._actNativeShare();
					break;
				case "datePicker":
					self._onClickDatePicker();
					break;
				case "timePicker":
					self._onClickTimePicker();
					break;
			};
			return false;
		},
		_onClickDatePicker: function() {
			selectorFactory.createSelector(new _DateTime("application/x-date"));
		},
		_onClickTimePicker: function() {
			selectorFactory.createSelector(new _DateTime("application/x-time"));
		}
	}
);

var _DateTime = utils.defineClass(
	function(type) {
		this.$type = type;
	}, null, {
		setFieldValueFromSelector: function() {

		},
		getValue: function() {
			return "";
		},
		getTitle: function() {
			return "";
		}
	});

exports.Modal = _Klass;