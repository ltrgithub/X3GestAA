"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var modalDialog = require('syracuse-tablet/html/js/ui/modals/modalDialog');

var _templateAll = {
	header: '\
			<buttons class="pull-right"> \
				{{#unless label_offline}} \
				<button type="button" class="btn btn-default s-m-modal-btn-validate" data-action="$validate"></button> \
				{{/unless}} \
				<button type="button" class="btn btn-default s-m-modal-btn-cancel" data-action="$cancel"></button> \
			</buttons> \
			<div class="modal-title">{{title}}</div> \
			',
	content: ' \
			<div class="s-m-scroll-wrapper s-m-scroll-wrapper-v">\
			<div class="s-m-scroll-element"> \
				{{#if label_warning}}\
					<div class="alert alert-warning" role="alert">\
						{{label_warning}}\
					</div>\
				{{/if}}\
				{{#if label_offline}}\
					<div class="alert alert-warning" role="alert">\
						{{label_offline}}\
					</div>\
				{{/if}}\
				{{#if showRoles}} \
				<div class="form-group"> \
					<label>{{label_roles}}</label>\
					<select class="form-control" id="login-select-role"> \
					{{#each roles}}\
						<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
				</div> \
				{{/if}} \
				<div class="form-group" id="login-select-endpoint-group"> \
					<label>{{label_endpoints}}</label>\
					<select class="form-control" id="login-select-endpoint"> \
					{{#each endpoints}}\
						<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
				</div> \
				{{#if showLanguages}} \
				<div class="form-group"> \
					<label>{{label_languages}}</label>\
					<select class="form-control" id="login-select-language"> \
					{{#each languages}}\
						<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
				</div> \
				{{/if}} \
			</div> \
			</div>',
	footer: ''
};
var _myTemplates = {
	endpoints: '\
		{{#each endpoints}}\
				<option value="{{code}}" {{#if selected}}selected{{/if}}>{{description}}{{#unless description}}{{code}}{{/unless}}</option>\
		{{/each}}'
};
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _myTemplates[key];
	if (!tmpl) {
		tmpl = _myTemplates[name];
		tmpl = _myTemplates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};
var _Klass = utils.defineClass(
	function ModalSelectContext(currentContext, settings) {
		modalDialog.ModalBase.call(this);
		this._currentContext = currentContext;
		this._settings = settings;
	}, modalDialog.ModalBase, {
		destroy: function() {
			if (this._$$roles) {
				this._$$roles.off();
				this._$$roles = null;
			}
			if (this._$$endpoints) {
				this._$$endpoints = null;
			}
			modalDialog.ModalBase.prototype.destroy.call(this);
		},

		_getTemplates: function() {
			var self = this;
			return {
				std: _templateAll
			};
		},

		getDisplayFlags: function() {
			var self = this;
			var displayFlags = self.displayFlags || {};
			if (self.deviceType === "tablet") {
				displayFlags.modalClass = "select-context half_right";
			} else {
				displayFlags.modalClass = "select-context full";
			}
			return displayFlags;
		},

		_getDataContext: function() {
			var self = this;
			var roles = self._getRoles();
			var languages = self._getLanguages();
			var endpoints = self._getEndpoints(roles);

			var showRoles = self._settings.offline !== true && roles.length > 1;
			var showLanguages = self._settings.offline !== true && languages.length > 1;

			var label_warning = locale.text("modal.context.warning");
			var label_offline = locale.text("modal.context.offline2");

			if (self._settings.offline === true) {
				label_warning = null;
			} else {
				label_offline = null;
			}

			var data = {
				title: locale.text("modal.context.title"),
				label_endpoints: locale.text("modal.context.endpoints"),

				endpoints: endpoints,

				label_roles: locale.text("modal.context.roles"),
				showRoles: showRoles,
				roles: roles,

				label_languages: locale.text("modal.context.languages"),
				showLanguages: showLanguages,
				languages: languages,

				label_ok: locale.text("modal.context.ok"),
				label_cancel: locale.text("modal.context.cancel"),

				label_warning: label_warning,
				label_offline: label_offline,
			};
			return data;
		},

		/*
		 * 
		 */
		_getRoles: function() {
			var self = this;
			var roles = self._settings && self._settings.profile.roles || [];
			roles.forEach(function(r) {
				r.selected = r.code === self._currentContext.role;
			});
			return roles;
		},
		_getLanguages: function() {
			var self = this;
			var languages = self._settings && self._settings.profile.locales || [];
			languages.forEach(function(lang) {
				lang.selected = lang.code === self._currentContext.lang;
			});
			return languages;
		},
		_getEndpoints: function(role) {
			var self = this;
			var endpoints;
			self._getRoles().some(function(r) {
				if (role && r.code === role || role == null && r.selected === true) {
					endpoints = r.endPoints;
					return true;
				}
			});
			endpoints = endpoints || [];
			endpoints.forEach(function(ep) {
				ep.selected = ep.code === self._currentContext.endpoint;
			});
			return endpoints;
		},

		_attachDOM: function() {
			modalDialog.ModalBase.prototype._attachDOM.call(this);
			this._$$roles = this.$$elmt.find("#login-select-role");
			if (this._$$roles.length > 0) {
				this._$$roles.on('change', jsutils.bindFn(this.onRoleChanged, this));
			}
			this._$$endpoints = this.$$elmt.find("#login-select-endpoint");
			this._$$endpointsGroup = $("#login-select-endpoint-group");

			this.onRoleChanged();
		},
		onRoleChanged: function() {
			var self = this;
			var role = self._$$roles.val();
			var endpoints = self._getEndpoints(role);
			this._$$endpoints.html(_getHtml("endpoints", {
				endpoints: endpoints
			}));

			if (endpoints.length > 1) {
				this._$$endpointsGroup.show();
			} else {
				this._$$endpointsGroup.hide();
			}
		},
		/**
		 * Overridden
		 */
		_onValidate: function() {
			var self = this;
			var endpoint = self._$$endpoints.val();
			var role = self._$$roles.val();
			var language = self.$$elmt.find("#login-select-language").val();

			self.result = {
				"action": "ok",
				"endpoint": endpoint,
				"role": role,
				"language": language
			};
		},

		/**
		 * Overridden
		 */
		_onCancel: function() {
			var self = this;
			self.result = {
				"action": "cancel"
			};
		},
		/**
		 * Overridden
		 */
		_getResult: function() {
			return this.result;
		}
	}
);

exports.Modal = _Klass;