"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var modalDialog = require('syracuse-tablet/html/js/ui/modals/modalDialog');

var _templateAll = {
	header: '\
			<buttons class="pull-right"> \
				{{#unless label_offline}} \
				<button type="button" class="btn btn-default s-m-modal-btn-validate" data-action="$validate"></button> \
				{{/unless}} \
				<button type="button" class="btn btn-default s-m-modal-btn-cancel" data-action="$cancel"></button> \
			</buttons> \
			<div class="modal-title">{{title}}</div> \
			',
	content: ' \
			<div class="s-m-scroll-wrapper s-m-scroll-wrapper-v">\
			<div class="s-m-scroll-element"> \
				{{#if showEndpoints}} \
				<div class="form-group"> \
					<label>{{label_endpoints}}</label>\
					<select class="form-control" id="login-select-endpoint"> \
					{{#each endpoints}}\
						<option value="{{this.application}}.{{this.contract}}.{{this.dataset}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
				</div> \
				{{/if}} \
				{{#if showRoles}} \
				<div class="form-group"> \
					<label>{{label_roles}}</label>\
					<select class="form-control" id="login-select-role"> \
					{{#each roles}}\
						<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
				</div> \
				{{/if}} \
				{{#if showLanguages}} \
				<div class="form-group"> \
					<label>{{label_languages}}</label>\
					<select class="form-control" id="login-select-language"> \
					{{#each languages}}\
						<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
				</div> \
				{{/if}} \
				{{#if label_warning}}\
				<div class="alert alert-warning" role="alert">\
					{{label_warning}}\
				</div>\
				{{/if}}\
				{{#if label_offline}}\
					<div class="alert alert-warning" role="alert">\
						{{label_offline}}\
					</div>\
				{{/if}}\
			</div> \
			</div>',
	footer: '<button type="button" class="btn btn-default" data-action="logout">{{label_logout}}</button>'
};

var _Klass = utils.defineClass(
	function ModalSelectContext(context, endpoints, roles, languages, warn) {
		var self = this;
		modalDialog.ModalBase.call(self);

		// Init params
		self.initParam = {
			context: context,
			endpoints: endpoints,
			roles: roles,
			languages: languages,
			warn: warn
		};

		// Result
		self.result = null;
	}, modalDialog.ModalBase, {
		destroy: function() {
			modalDialog.ModalBase.prototype.destroy.call(this);
			this.initParam = null;
			this.result = null;
		},

		_getTemplates: function() {
			var self = this;
			return {
				std: _templateAll
			};
		},

		getDisplayFlags: function() {
			var self = this;
			var displayFlags = self.displayFlags || {};
			if (self.deviceType === "tablet") {
				displayFlags.modalClass = "config-tile half_right";
			} else {
				displayFlags.modalClass = "config-tile full";
			}
			return displayFlags;
		},

		_getDataContext: function() {
			var self = this;
			var showEndpoints = self.initParam.endpoints.length > 0;
			var showRoles = self.initParam.roles.length > 0;
			var showLanguages = self.initParam.languages.length > 0;

			var label_warning = self.initParam.warn && locale.text("modal.context.warning");
			var label_offline = locale.text("modal.context.offline");
			if (showEndpoints + showLanguages + showRoles > 0) {
				label_offline = null;
			} else {
				label_warning = null;
			}
			var data = {
				title: locale.text("modal.context.title"),
				label_endpoints: locale.text("modal.context.endpoints"),
				showEndpoints: showEndpoints,
				endpoints: self.initParam.endpoints,
				label_roles: locale.text("modal.context.roles"),
				showRoles: showRoles,
				roles: self.initParam.roles,
				label_languages: locale.text("modal.context.languages"),
				showLanguages: showLanguages,
				languages: self.initParam.languages,
				label_logout: locale.text("modal.context.logout"),
				label_ok: locale.text("modal.context.ok"),
				label_cancel: locale.text("modal.context.cancel"),
				label_warning: label_warning,
				label_offline: label_offline
			};
			if (self.initParam.context) {
				self.initParam.endpoints.forEach(function(ep) {
					if (ep.application + "." + ep.contract + "." + ep.dataset === self.initParam.context.endpoint) {
						ep.selected = true;
					} else {
						ep.selected = false;
					}
				});
				self.initParam.roles.forEach(function(role) {
					if (role.code === self.initParam.context.role) {
						role.selected = true;
					} else {
						role.selected = false;
					}
				});
				self.initParam.languages.forEach(function(lang) {
					if (lang.code === self.initParam.context.language) {
						lang.selected = true;
					} else {
						lang.selected = false;
					}
				});
			}

			return data;
		},

		_onAction: function(action, param) {
			var self = this;
			if (action === "logout") {
				self.result = {
					"action": "logout"
				};
				return true;
			}
			return false;
		},

		_onValidate: function() {
			var self = this;

			var endpoint = self.$$elmt.find("#login-select-endpoint").val();
			var role = self.$$elmt.find("#login-select-role").val();
			var language = self.$$elmt.find("#login-select-language").val();

			self.result = {
				"action": "ok",
				"endpoint": endpoint,
				"role": role,
				"language": language
			};
		},

		_onCancel: function() {
			var self = this;
			self.result = {
				"action": "cancel"
			};
		},

		_getResult: function() {
			var self = this;
			return self.result;
		}
	}
);

exports.Modal = _Klass;