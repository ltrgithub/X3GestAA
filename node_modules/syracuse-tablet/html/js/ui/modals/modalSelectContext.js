"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var Base = require('syracuse-tablet/html/js/ui/modals/modalDialogScroll').ModalDialogScroll;

var _templateAll = {
	content: ' \
		{{#if label_warning}}\
			<div class="alert alert-warning" role="alert">\
				{{label_warning}}\
			</div>\
		{{/if}}\
		{{#if label_offline}}\
			<div class="alert alert-warning" role="alert">\
				{{label_offline}}\
			</div>\
		{{/if}}\
		{{#if showRoles}} \
		<div class="form-group"> \
			<label>{{label_roles}}</label>\
			<select class="form-control" id="login-select-role"> \
			{{#each roles}}\
				<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
				{{this.description}}\
				</option>\
			{{/each}}\
			</select>\
		</div> \
		{{/if}} \
		<div class="form-group" id="login-select-endpoint-group"> \
			<label>{{label_endpoints}}</label>\
			<select class="form-control" id="login-select-endpoint"> \
			{{#each endpoints}}\
				<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
				{{this.description}}\
				</option>\
			{{/each}}\
			</select>\
		</div> \
		{{#if showLanguages}} \
		<div class="form-group"> \
			<label>{{label_languages}}</label>\
			<select class="form-control" id="login-select-language"> \
			{{#each languages}}\
				<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
				{{this.description}}\
				</option>\
			{{/each}}\
			</select>\
		</div> \
		{{/if}}',
	endpoints: '\
		{{#each endpoints}}\
				<option value="{{code}}" {{#if selected}}selected{{/if}}>{{description}}{{#unless description}}{{code}}{{/unless}}</option>\
		{{/each}}'
};
var _templates = {};

function _getHtml(name, ctx) {
	var tmpl = _templates[name];
	if (!tmpl) {
		tmpl = _templates[name] = Handlebars.compile(_templateAll[name]);
	}
	return tmpl(ctx);
};
var _Klass = utils.defineClass(
	function ModalSelectContext(currentContext, settings) {
		Base.call(this);
		this._currentContext = currentContext;
		this._settings = settings;
	}, Base, {
		destroy: function() {
			if (this._$$roles) {
				this._$$roles.off();
				this._$$roles = null;
			}
			if (this._$$endpoints) {
				this._$$endpoints = null;
			}
			Base.prototype.destroy.call(this);
		},
		getDisplayFlags: function() {
			var opts = {
				tablet: "select-context full",
				smartphone: "select-context full"
			}
			return Base.prototype.getDisplayFlags.call(this, opts)
		},
		_getDataContext: function() {
			var self = this;
			var roles = self._getRoles();
			var languages = self._getLanguages();
			var endpoints = self._getEndpoints(roles);

			var showRoles = self._settings.offline !== true && roles.length > 1;
			var showLanguages = self._settings.offline !== true && languages.length > 1;

			var label_warning = locale.text("modal.context.warning");
			var label_offline = locale.text("modal.context.offline2");

			if (self._settings.offline === true) {
				label_warning = null;
			} else {
				label_offline = null;
			}

			var data = {
				label_endpoints: locale.text("modal.context.endpoints"),

				endpoints: endpoints,

				label_roles: locale.text("modal.context.roles"),
				showRoles: showRoles,
				roles: roles,

				label_languages: locale.text("modal.context.languages"),
				showLanguages: showLanguages,
				languages: languages,

				label_ok: locale.text("modal.context.ok"),
				label_cancel: locale.text("modal.context.cancel"),

				label_warning: label_warning,
				label_offline: label_offline,
			};
			var ctx = Base.prototype._getDataContext(this);
			var content = _getHtml("content", data);
			var extendedCtx = $.extend(true, ctx, {
				buttonValidate: true,
				title: locale.text("modal.context.title"),
				content: content
			})
			return extendedCtx;
		},

		/*
		 * 
		 */
		_getRoles: function() {
			var self = this;
			var roles = self._settings && self._settings.profile.roles || [];
			roles.forEach(function(r) {
				r.selected = r.code === self._currentContext.role;
			});
			return roles;
		},
		_getLanguages: function() {
			var self = this;
			var languages = self._settings && self._settings.profile.locales || [];
			languages.forEach(function(lang) {
				lang.selected = lang.code === self._currentContext.lang;
			});
			return languages;
		},
		_getEndpoints: function(role) {
			var self = this;
			var endpoints;
			self._getRoles().some(function(r) {
				if (role && r.code === role || role == null && r.selected === true) {
					endpoints = r.endPoints;
					return true;
				}
			});
			endpoints = endpoints || [];
			endpoints.forEach(function(ep) {
				ep.selected = ep.code === self._currentContext.endpoint;
			});
			return endpoints;
		},

		_attachDOM: function() {
			Base.prototype._attachDOM.call(this);
			this._$$roles = this.$$elmt.find("#login-select-role");
			if (this._$$roles.length > 0) {
				this._$$roles.on('change', jsutils.bindFn(this.onRoleChanged, this));
			}
			this._$$endpoints = this.$$elmt.find("#login-select-endpoint");
			this._$$endpointsGroup = $("#login-select-endpoint-group");

			this.onRoleChanged();
		},
		onRoleChanged: function() {
			var role = this._$$roles.val();
			var endpoints = this._getEndpoints(role);
			this._$$endpoints.html(_getHtml("endpoints", {
				endpoints: endpoints
			}));

			if (endpoints.length > 1) {
				this._$$endpointsGroup.show();
			} else {
				this._$$endpointsGroup.hide();
			}
		},
		/**
		 * Overridden
		 */
		_onValidate: function() {
			var endpoint = this._$$endpoints.val();
			var role = this._$$roles.val();
			var language = this.$$elmt.find("#login-select-language").val();

			this.result = {
				"action": "ok",
				"endpoint": endpoint,
				"role": role,
				"language": language
			};
		},

		/**
		 * Overridden
		 */
		_onCancel: function() {
			this.result = {
				"action": "cancel"
			};
		},
		/**
		 * Overridden
		 */
		_getResult: function() {
			return this.result;
		}
	}
);

exports.Modal = _Klass;