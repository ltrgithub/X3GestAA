"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var modalDialog = require('syracuse-tablet/html/js/ui/modals/modalDialog');
var globals = require('syracuse-tablet/html/js/helpers/globals');

var _templateAll = {
	header: '\
			<buttons class="pull-right"> \
				{{#if allow_logout}} \
					<button type="button" class="btn btn-default s-m-modal-btn-logout" data-action="logout"></button> \
				{{/if}} \
				{{#unless label_offline}} \
				<button type="button" class="btn btn-default s-m-modal-btn-validate" data-action="$validate"></button> \
				{{/unless}} \
				<button type="button" class="btn btn-default s-m-modal-btn-cancel" data-action="$cancel"></button> \
			</buttons> \
			<div class="modal-title">{{title}}</div> \
			',
	content: ' \
			<div class="s-m-scroll-wrapper s-m-scroll-wrapper-v">\
			<div class="s-m-scroll-element"> \
				{{#if label_warning}}\
					<div class="alert alert-warning" role="alert">\
						{{label_warning}}\
					</div>\
				{{/if}}\
				{{#if label_offline}}\
					<div class="alert alert-warning" role="alert">\
						{{label_offline}}\
					</div>\
				{{/if}}\
				{{#if showRoles}} \
				<div class="form-group"> \
					<label>{{label_roles}}</label>\
					<select class="form-control" id="login-select-role"> \
					{{#each roles}}\
						<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
				</div> \
				{{/if}} \
				{{#if showEndpoints}} \
				<div class="form-group"> \
					<label>{{label_endpoints}}</label>\
					<select class="form-control" id="login-select-endpoint"> \
					{{#each endpoints}}\
						<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
				</div> \
				{{/if}} \
				{{#if showLanguages}} \
				<div class="form-group"> \
					<label>{{label_languages}}</label>\
					<select class="form-control" id="login-select-language"> \
					{{#each languages}}\
						<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
				</div> \
				{{/if}} \
			</div> \
			</div>',
	footer: ''
};
var _myTemplates = {
	endpoints: '\
		{{#each endpoints}}\
				<option value="{{ep.code}}" {{#if selected}}selected{{/if}}>{{description}}{{#unless description}}{{code}}{{/unless}}</option>\
		{{/each}}'
};
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _myTemplates[key];
	if (!tmpl) {
		tmpl = _myTemplates[name];
		tmpl = _myTemplates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};
var _Klass = utils.defineClass(
	function ModalSelectContext(context, settings, displayOpts, isOffline) {
		if (!isOffline && (settings == null || !settings.roles || settings.roles.length == 0)) {
			throw new Error("Unexpected wrong user settings");
		}
		var self = this;
		self.isOffline = isOffline;
		self.displayOpts = displayOpts || {};
		if (isOffline) {
			self.displayOpts.hideEndpoints = true;
			self.displayOpts.hideRoles = true;
			self.displayOpts.hideLanguages = true;
		}
		modalDialog.ModalBase.call(self);
		self.initParam = {
			context: $.extend(true, {}, context),
			setttings: $.extend(true, {}, settings),
			warn: true
		};
		if (!self.initParam.context.role) {
			self.initParam.context.role = self.initParam.setttings.roles[0].code;
		}
		if (!self.initParam.context.language) {
			self.initParam.context.language = utils.getNavigatorLanguage("en-US");
		}
		// Result
		self.result = null;
	}, modalDialog.ModalBase, {
		destroy: function() {
			if (this._$$roles) {
				this._$$roles.off();
				this._$$roles = null;
			}
			if (this._$$endPoints) {
				this._$$endPoints.off();
				this._$$endPoints = null;
			}
			modalDialog.ModalBase.prototype.destroy.call(this);
			this.initParam = null;
			this.result = null;
		},

		_getTemplates: function() {
			var self = this;
			return {
				std: _templateAll
			};
		},
		_getRoles: function() {
			var self = this;
			var roles = self.initParam.setttings.roles || [];
			var found = false;
			roles.forEach(function(r) {
				r.selected = r.code === self.initParam.context.role;
			});
			return roles;
		},
		_getLanguages: function() {
			var self = this;
			var languages = this.initParam.setttings.locales || [];
			languages.forEach(function(lang) {
				lang.selected = lang.code === self.initParam.context.language;
			});
			return languages;
		},
		_getEndPoints: function(roles) {
			var self = this;
			var endPoints;
			(roles || self._getRoles()).some(function(r) {
				if (r.selected === true) {
					endPoints = r.endPoints;
					return true;
				}
			});
			endPoints = endPoints || [];
			endPoints.forEach(function(ep) {
				ep.selected = ep.code === self.initParam.context.endpoint;
			});
			return endPoints;
		},

		getDisplayFlags: function() {
			var self = this;
			var displayFlags = self.displayFlags || {};
			if (self.deviceType === "tablet") {
				displayFlags.modalClass = "select-context half_right";
			} else {
				displayFlags.modalClass = "select-context full";
			}
			return displayFlags;
		},

		_getDataContext: function() {
			var self = this;
			var roles = self._getRoles();
			var languages = self._getLanguages();
			// Last
			var endPoints = self._getEndPoints(roles);
			var showEndpoints = self.displayOpts.hideEndpoints !== true;
			var showRoles = self.displayOpts.hideRoles !== true;
			var showLanguages = self.displayOpts.hideLanguages !== true && languages.length > 0;
			var label_warning = self.initParam.warn && locale.text("modal.context.warning");
			var label_offline = locale.text("modal.context.offline");
			if (self.isOffline !== true) {
				label_offline = null;
			} else {
				label_warning = null;
			}
			var curApp = globals.getApplication();
			var curPage = curApp && curApp.currentPage;
			if (curPage && jsutils.isInstanceOf(curPage, "WelcomeDashboardPage")) {
				label_warning = false;
			}
			var data = {
				title: locale.text("modal.context.title"),
				label_endpoints: locale.text("modal.context.endpoints"),
				showEndpoints: showEndpoints,
				endpoints: endPoints,
				label_roles: locale.text("modal.context.roles"),
				showRoles: showRoles,
				roles: roles,
				label_languages: locale.text("modal.context.languages"),
				showLanguages: showLanguages,
				languages: languages,
				label_logout: locale.text("modal.context.logout"),
				label_ok: locale.text("modal.context.ok"),
				label_cancel: locale.text("modal.context.cancel"),
				label_warning: label_warning,
				label_offline: label_offline,
				allow_logout: self.initParam.context != null,
			};
			return data;
		},
		_attachDOM: function() {
			modalDialog.ModalBase.prototype._attachDOM.call(this);
			this._$$roles = this.$$elmt.find("#login-select-role");
			if (this._$$roles.length > 0) {
				this._$$roles.on('change', jsutils.bindFn(this.onRoleChanged, this));
			}
			this._$$endPoints = this.$$elmt.find("#login-select-endpoint");
			if (this._$$endPoints.length > 0) {
				this._$$endPoints.on('change', jsutils.bindFn(this.onEnpointChanged, this));
			}
		},
		onEnpointChanged: function(event) {
			// just to save the last selected one to select it by default
			this.initParam.context.endpoint = this._$$endPoints.val();
		},
		onRoleChanged: function(event) {
			this.initParam.context.role = this._$$roles.val();
			this._$$endPoints.html(_getHtml("endpoints", {
				endpoints: this._getEndPoints()
			})).show();
		},
		_saveSettings: function() {
			// Not used currently but can be used to persist settings on modal closing
			return $.smResolve();
		},
		/**
		 * Overridden
		 */
		_onAction: function(action, param) {
			var self = this;
			return self._saveSettings().then(function() {
				if (action === "logout") {
					self.result = {
						"action": "logout"
					};
					return true;
				}
				return false;
			});
		},
		/**
		 * Overridden
		 */
		_onValidate: function() {
			var self = this;
			return self._saveSettings().then(function() {
				var epCode = self._$$endPoints.val();
				var ept;
				self._getEndPoints().some(function(e) {
					if (e.code === epCode) {
						ept = e;
						return true;
					}
				});
				self.result = {
					"action": "ok",
					"endpoint": epCode,
					"endpointDescr": ept && ept.description ? ept.description : epCode,
					"role": self._$$roles.val(),
					"language": self.$$elmt.find("#login-select-language").val()
				};
			});
		},
		/**
		 * Overridden
		 */
		_onCancel: function() {
			var self = this;
			if (self.initParam.context) {
				self.result = {
					"action": "cancel"
				};
			} else {
				// if there is no context yet and we cancel, we handle it like a logout
				self.result = {
					"action": "logout"
				};
			}
		},
		/**
		 * Overridden
		 */
		_getResult: function() {
			return this.result;
		}
	}
);

exports.Modal = _Klass;