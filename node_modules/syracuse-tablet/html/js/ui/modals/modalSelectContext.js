"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var modalDialog = require('syracuse-tablet/html/js/ui/modals/modalDialog');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var settings = require('syracuse-tablet/html/js/application/settings');

var _templateAll = {
	header: '\
			<buttons class="pull-right"> \
				{{#if allow_logout}} \
					<button type="button" class="btn btn-default s-m-modal-btn-logout" data-action="logout"></button> \
				{{/if}} \
				{{#unless label_offline}} \
				<button type="button" class="btn btn-default s-m-modal-btn-validate" data-action="$validate"></button> \
				{{/unless}} \
				<button type="button" class="btn btn-default s-m-modal-btn-cancel" data-action="$cancel"></button> \
			</buttons> \
			<div class="modal-title">{{title}}</div> \
			',
	content: ' \
			<div class="s-m-scroll-wrapper s-m-scroll-wrapper-v">\
			<div class="s-m-scroll-element"> \
				{{#if label_warning}}\
					<div class="alert alert-warning" role="alert">\
						{{label_warning}}\
					</div>\
				{{/if}}\
				{{#if label_offline}}\
					<div class="alert alert-warning" role="alert">\
						{{label_offline}}\
					</div>\
				{{/if}}\
				{{#if showEndpoints}} \
				<div class="form-group"> \
					<label>{{label_endpoints}}</label>\
					<select class="form-control" id="login-select-endpoint"> \
					{{#each endpoints}}\
						<option value="{{this.application}}.{{this.contract}}.{{this.dataset}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
				</div> \
				{{/if}} \
				{{#if showRoles}} \
				<div class="form-group"> \
					<label>{{label_roles}}</label>\
					<select class="form-control" id="login-select-role"> \
					{{#each roles}}\
						<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
				</div> \
				{{/if}} \
				{{#if showLanguages}} \
				<div class="form-group"> \
					<label>{{label_languages}}</label>\
					<select class="form-control" id="login-select-language"> \
					{{#each languages}}\
						<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
				</div> \
				{{/if}} \
				{{#if showRememberMe}} \
				<div class="form-group"> \
					<label>{{label_rememberme}}</label>\
					<select class="form-control" id="login-rememberme"> \
					{{#each rememberme_opts}}\
						<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
				</div> \
				{{/if}} \
				{{#if showForgetMe}} \
				<div class="form-group"> \
					<label>{{label_forgetme}}</label>\
					<select class="form-control" id="login-forgetme"> \
					{{#each forgetme_opts}}\
						<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
				</div> \
				{{/if}} \
			</div> \
			</div>',
	footer: ''
};

var _Klass = utils.defineClass(
	function ModalSelectContext(context, endpoints, roles, languages) {
		var self = this;
		modalDialog.ModalBase.call(self);

		// Init params
		self.initParam = {
			context: context,
			endpoints: endpoints,
			roles: roles,
			languages: languages,
			warn: true
		};

		// Result
		self.result = null;
	}, modalDialog.ModalBase, {
		destroy: function() {
			modalDialog.ModalBase.prototype.destroy.call(this);
			this.initParam = null;
			this.result = null;
		},

		_getTemplates: function() {
			var self = this;
			return {
				std: _templateAll
			};
		},

		getDisplayFlags: function() {
			var self = this;
			var displayFlags = self.displayFlags || {};
			if (self.deviceType === "tablet") {
				displayFlags.modalClass = "config-tile half_right";
			} else {
				displayFlags.modalClass = "config-tile full";
			}
			return displayFlags;
		},

		_getDataContext: function() {
			var self = this;
			var forgetMe;
			return settings.getLogoutForgetMe().then(function(val) {
				forgetMe = val;
				return settings.getLoginRememberMe();
			}).then(function(rememberMe) {
				var showEndpoints = self.initParam.endpoints.length > 0;
				var showRoles = self.initParam.roles.length > 0;
				var showLanguages = self.initParam.languages.length > 0;
				var label_warning = self.initParam.warn && locale.text("modal.context.warning");
				var label_offline = locale.text("modal.context.offline");
				if (showEndpoints + showLanguages + showRoles > 0) {
					label_offline = null;
				} else {
					label_warning = null;
				}
				var curApp = globals.getApplication();
				var curPage = curApp && curApp.currentPage;

				if (curPage && jsutils.isInstanceOf(curPage, "WelcomeDashboardPage")) {
					label_warning = false;
				}
				var showRememberMe = true,
					rememberme_opts = [];
				if (showRememberMe) {
					[{
						description: "Always",
						code: "always"
					}, {
						description: "Never",
						code: "never"
					}, {
						description: "Only in native application",
						code: "nativeonly"
					}].forEach(function(opt) {
						if (rememberMe === opt.code) {
							opt.selected = true;
						}
						rememberme_opts.push(opt);
					});
				}
				var showForgetMe = true,
					forgetme_opts = [];
				if (showForgetMe) {
					[{
						description: "Always",
						code: "always"
					}, {
						description: "Never",
						code: "never"
					}, {
						description: "Only in non-native application",
						code: "nonnativeonly"
					}].forEach(function(opt) {
						if (forgetMe === opt.code) {
							opt.selected = true;
						}
						forgetme_opts.push(opt);
					});
				}
				var data = {
					title: locale.text("modal.context.title"),
					label_endpoints: locale.text("modal.context.endpoints"),
					showEndpoints: showEndpoints,
					endpoints: self.initParam.endpoints,
					label_roles: locale.text("modal.context.roles"),
					showRoles: showRoles,
					roles: self.initParam.roles,
					label_languages: locale.text("modal.context.languages"),
					showLanguages: showLanguages,
					languages: self.initParam.languages,
					label_logout: locale.text("modal.context.logout"),
					label_ok: locale.text("modal.context.ok"),
					label_cancel: locale.text("modal.context.cancel"),
					label_warning: label_warning,
					label_offline: label_offline,
					allow_logout: self.initParam.context != null,
					showForgetMe: showForgetMe,
					label_forgetme: "Forget me on logout",
					forgetme_opts: forgetme_opts,
					showRememberMe: showRememberMe,
					label_rememberme: "Remember me on login",
					rememberme_opts: rememberme_opts
				};
				if (self.initParam.context) {
					self.initParam.endpoints.forEach(function(ep) {
						if (ep.application + "." + ep.contract + "." + ep.dataset === self.initParam.context.endpoint) {
							ep.selected = true;
						} else {
							ep.selected = false;
						}
					});
					self.initParam.roles.forEach(function(role) {
						if (role.code === self.initParam.context.role) {
							role.selected = true;
						} else {
							role.selected = false;
						}
					});
					self.initParam.languages.forEach(function(lang) {
						if (lang.code === self.initParam.context.language) {
							lang.selected = true;
						} else {
							lang.selected = false;
						}
					});
				} else {
					var userLang = navigator.language || navigator.userLanguage || "en_US";
					userLang = userLang.toLowerCase();
					self.initParam.languages.some(function(lang) {
						var code = lang.code.toLowerCase();
						if (code === userLang) { // en_us === en_us
							lang.selected = true;
							return true;
						} else if (code.indexOf(userLang + "-") > -1) { // en_us === en_
							lang.selected = true;
							return true;
						}
					});
				}
				return data;
			});
		},
		_saveForgetMe: function() {
			return settings.setLogoutForgetMe(this.$$elmt.find("#login-forgetme").val());
		},
		_saveRememberMe: function() {
			return settings.setLoginRememberMe(this.$$elmt.find("#login-rememberme").val());
		},
		/**
		 * Overridden
		 */
		_onAction: function(action, param) {
			var self = this;
			return self._saveForgetMe().then(function() {
				return self._saveRememberMe();
			}).then(function() {
				if (action === "logout") {
					self.result = {
						"action": "logout"
					};
					return true;
				}
				return false;
			});
		},
		/**
		 * Overridden
		 */
		_onValidate: function() {
			var self = this;
			return self._saveForgetMe().then(function() {
				return self._saveRememberMe();
			}).then(function() {
				var endpoint = self.$$elmt.find("#login-select-endpoint").val();
				var role = self.$$elmt.find("#login-select-role").val();
				var language = self.$$elmt.find("#login-select-language").val();
				self.result = {
					"action": "ok",
					"endpoint": endpoint,
					"role": role,
					"language": language
				};
			});
		},
		/**
		 * Overridden
		 */
		_onCancel: function() {
			var self = this;
			if (self.initParam.context) {
				self.result = {
					"action": "cancel"
				};
			} else {
				// if there is no context yet and we cancel, we handle it like a logout
				self.result = {
					"action": "logout"
				};
			}
		},
		/**
		 * Overridden
		 */
		_getResult: function() {
			return this.result;
		}
	}
);

exports.Modal = _Klass;