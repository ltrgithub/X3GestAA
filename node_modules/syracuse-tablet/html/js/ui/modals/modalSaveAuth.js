"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var modalDialog = require('syracuse-tablet/html/js/ui/modals/modalDialog');

var _templateAll = {
	header: '\
			<buttons class="pull-right"> \
				<button type="button" class="btn btn-default s-m-modal-btn-validate" data-action="$validate"></button> \
				<button type="button" class="btn btn-default s-m-modal-btn-cancel" data-action="$cancel"></button> \
			</buttons> \
			<div class="modal-title">{{title}}</div> \
			',
	content: ' \
			<div class="s-m-scroll-wrapper s-m-scroll-wrapper-v">\
			<div class="s-m-scroll-element"> \
		 		{{#each fields}}\
				<div class="form-group"> \
					<label>{{label}}</label> \
					<input class="{{css}} form-control" id="{{id}}" type="text" value="{{value}}" {{readonly}}/> \
				</div> \
				{{/each}}\
				<label id="saveType" params="{{saveType}}" >{{label_save_type}}</label> \
				<div class="btn-group btn-group-justified" data-toggle="buttons"> \
			   {{#each buttons}}\
					<div class="btn-group"> \
					<label class="{{css}} btn btn-primary {{active}}" data-action="clickType" data-params="{{id}}"  >\
					<input type="radio"  name="options" id="{{id}}" {{checked}}>{{label}} \
					</label>\
					</div>\
				{{/each}}\
				</div> \
			</div> \
			</div>',
	footer: ''
};

var _Klass = utils.defineClass(
	function ModalSaveAuth(saveContext) {
		var self = this;
		modalDialog.ModalBase.call(self);

		self.saveContext = saveContext;

		// Result
		self.result = null;
	}, modalDialog.ModalBase, {
		destroy: function() {
			$("input.evt-input", this.$$elmt).off();
			modalDialog.ModalBase.prototype.destroy.call(this);
		},
		_getTemplates: function() {
			var self = this;
			return {
				std: _templateAll
			};
		},
		/**
		 * Always Half-right because only on desktop
		 */
		getDisplayFlags: function() {
			var displayFlags = this.displayFlags || {};
			displayFlags.modalClass = "authoring-save half_right";
			return displayFlags;
		},
		_getDataContext: function() {
			var self = this;
			self.currentVariant = $.smFind(self.saveContext.variants, function(variant) {
				return variant.isSelected;
			}) || {};
			self.currentVariant.comment = self.currentVariant.comment || self.saveContext.comment;
			var readonly = "readonly";
			var data = {
				title: locale.text("auth.save.title"),
				page: self.saveContext.pageName,
				fields: [{
					id: "authCode",
					label: locale.text("auth.panel.label_code"),
					value: self.currentVariant.code,
					readonly: readonly,
					css: "evt-input"
				}, {
					id: "authTitle",
					label: locale.text("auth.panel.label_title"),
					value: self.currentVariant.title,
					readonly: readonly,
					css: "evt-input"
				}, {
					id: "authDescription",
					label: locale.text("auth.panel.label_description"),
					value: self.currentVariant.description,
					readonly: readonly,
					css: "evt-input"
				}, {
					id: "authComment",
					label: locale.text("auth.panel.label_comment"),
					value: self.currentVariant.comment || self.saveContext.comment,
				}],
				saveType: "save",
				label_save_type: locale.text("auth.panel.label_save"),

				buttons: [{
					id: "personal_copy",
					label: locale.text("auth.panel.label_personal"),
					active: (self.currentVariant.isPersonal && self._isPersonelVariantAutorized()) ? "active" : "",
					css: (!self._isPersonelVariantAutorized()) ? "disabled" : ""
				}, {
					id: "global_variant",
					label: locale.text("auth.panel.label_global"),
					active: (self.currentVariant.isGlobal && self._isGlobalVariantAutorized()) ? "active" : "",
					css: (!self._isGlobalVariantAutorized()) ? "disabled" : ""
				}, {
					id: "factory_variant",
					label: locale.text("auth.panel.label_factory"),
					active: (self.currentVariant.isFactory && self._canUpdateFactory(self.currentVariant)) ? "active" : "",
					css: (!self._canManageFactory()) ? "disabled" : ""
				}, ]
			};
			return data;
		},
		_canUpdateFactory: function(variant) {
			return (this._canManageFactory() && (this.saveContext.securityProfile.factoryId === variant.factoryOwner));
		},
		_canManageFactory: function() {
			return (this.saveContext.securityProfile.factoryId != "" && this._isGlobalVariantAutorized());
		},
		_isGlobalVariantAutorized: function() {
			return this.saveContext.securityProfile.personalizationLevel === "admin";
		},
		_isPersonelVariantAutorized: function() {
			return this.saveContext.securityProfile.personalizationLevel === "admin" || this.saveContext.securityProfile.personalizationLevel === "user";
		},
		_onShow: function(evt) {
			var self = this;
			modalDialog.ModalBase.prototype._onShow.call(this, evt);
			//this.$$element.on('click', 'input[type="checkbox"]', jsutils.bindFn(this._onInput, this));
			$("input.evt-input", self.$$elmt).on("input", self._onInput.bind(self));
			self._refreshBtnValidate();
		},
		_onAction: function(action, param) {
			if (action !== "clickType") return false;
			var self = this;
			var ctxUI = {};
			var create = false;
			switch (param) {
				case "factory_variant":
					if (self._canManageFactory()) {
						self.currentVariant = $.smFind(self.saveContext.variants, function(variant) {
							return variant.isFactory && variant.factoryOwner === self.saveContext.securityProfile.factoryId;
						});
						if (!self.currentVariant) {
							create = true;
							self.currentVariant = {
								isFactory: true,
								code: this.saveContext.securityProfile.factoryId,
								title: this.saveContext.securityProfile.factoryId,
								description: this.saveContext.securityProfile.factoryId,
								factoryOwner: this.saveContext.securityProfile.factoryId,
								comment: "",
							};
						}
					};
					break;
				case "global_variant":
					self.currentVariant = $.smFind(self.saveContext.variants, function(variant) {
						return variant.isGlobal;
					});
					if (!self.currentVariant) {
						create = true;
						this.currentVariant = {
							isGlobal: true,
							code: "GLOBAL",
							title: "GLOBAL",
							description: "GLOBAL",
							comment: "",
						};
					}
					break;
				case "personal_copy":
					self.currentVariant = $.smFind(self.saveContext.variants, function(variant) {
						return variant.isPersonal;
					});
					if (!self.currentVariant) {
						create = true;
						this.currentVariant = {
							isPersonal: true,
							code: "PERSONAL",
							title: "PERSONAL",
							description: "PERSONAL",
							comment: "",
						};
					}
					break;
			};
			$("label[data-params='" + param + "']", self.$$elmt).eq(0).button("toggle");
			if (create) {
				var UI = {
					saveType: "saveAs",
					label_save_type: locale.text("auth.panel.label_saveas_option"),
				};
			} else {
				var UI = {
					saveType: "save",
					label_save_type: locale.text("auth.panel.label_save"),
				};
			}
			UI.fields = [{
				id: "authCode",
				value: self.currentVariant.code,
				readonly: !create
			}, {
				id: "authTitle",
				value: self.currentVariant.title,
				readonly: !create
			}, {
				id: "authDescription",
				value: self.currentVariant.description,
				readonly: !create
			}, {
				id: "authComment",
				value: self.currentVariant.comment,
				readonly: false
			}];
			self._changeUI(UI);
			return false;
		},
		_changeUI: function(ctx) {
			var self = this;
			var $$saveType = self.$$elmt.find("#saveType");
			$$saveType.attr("params", ctx.saveType);
			$$saveType.text(ctx.label_save_type);
			var field;
			ctx.fields.forEach(function(item) {
				field = self.$$elmt.find("#" + item.id);
				field.val(item.value);
				if (item.readonly) {
					field.attr("readonly", "readonly");
				} else {
					field.removeAttr("readonly");
				}
			});
			this._refreshBtnValidate(true);
		},
		_onValidate: function() {
			var self = this;
			self.result = {
				code: self.$$elmt.find("#authCode").val(),
				title: self.$$elmt.find("#authTitle").val(),
				description: self.$$elmt.find("#authDescription").val(),
				comment: self.$$elmt.find("#authComment").val(),
				variantType: $("label[data-action='clickType'].active", self.$$elmt).attr("data-params"),
				uuid: self.currentVariant.uuid
			};
		},
		_onCancel: function() {
			var self = this;
			self.result = null;
		},
		/**
		 * Manages create button status
		 */
		_onInput: function(evt) {
			this._refreshBtnValidate();
		},
		_refreshBtnValidate: function(focus) {
			var disabled = false,
				$$field;
			disabled = (!$("label[data-action='clickType'].active", this.$$elmt).attr("data-params"));
			if (!disabled) {
				$$field = this.$$elmt.find("#authCode");
				if (!(disabled = ($$field.val().trim().length <= 0))) {
					$$field = this.$$elmt.find("#authTitle");
					if (!(disabled = ($$field.val().trim().length <= 0))) {
						$$field = this.$$elmt.find("#authDescription");
						disabled = ($$field.val().trim().length <= 0);
					}
				}
			}
			if (focus && disabled && $$field) $$field.focus();
			$("button[data-action='$validate']").toggleClass("disabled", disabled);
		},
		_getResult: function() {
			var self = this;
			return self.result;
		}
	}
);

exports.Modal = _Klass;