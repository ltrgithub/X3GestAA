"use strict";

var locale = require('syracuse-tablet/html/js/helpers/locale');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var native = require('syracuse-tablet/html/js/helpers/native/native');
var modules = require('syracuse-tablet/html/js/common/modules');

// Separated module for showing diagnoses since it may be replaced depending on device/OS
var ModalDiagnoses = require('syracuse-tablet/html/js/ui/modals/modalDiagnoses').Modal;
var ModalConfirm = require('syracuse-tablet/html/js/ui/modals/modalConfirm').Modal;
var ModalField = require('syracuse-tablet/html/js/ui/modals/modalField').Modal;
var environment = require('syracuse-tablet/html/js/helpers/environment');

var _templates = {
	actionMessage: '\
		<div class="s-m-act-msg {{severityClass}}">\
			<a draggable="false" href="#"><span class="glyphicon glyphicon-remove"></span></a>\
			<header>\
				<div>{{title}}</div>\
			</header>\
			<section>\
				<article>{{message}}</article>\
			</section>\
			<footer></footer>\
		</div>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/* First param : cb - Second msg - Third data ...*/
var _execCb = function(cb, msg, data) {
	if (!cb || arguments.length == 0) return;
	var cb = arguments[0];
	var args = Array.prototype.slice.call(arguments, 1);
	cb.apply(null, args);
};


/************************************************************************
 ** IMPORTANT
 * The code of the callback parameter in the exported methods :
 * error(), info(), diagnoses(), field(), confirm(), simpleconfirm(), modal()
 * has to indicate whether the callback is called :
 * - when the modal opens
 * - when the modal closes
 * - at both events
 *
 * Here is an example :
 * function (modalEvent, $$modalElmt) {
 *        // build content on open
 *       if (modalEvent == 'shown.bs.modal') {
 *           // code which is run on modal opening
 *       }
 *
 *       // run actions on close 'hidden.bs.modal'
 *       else {
 *       	// code which is run on modal closing
 *       }
 * });
 *************************************************************************/

var _asynchDiagnoses = function(title, diag, forceDisplay) {
	var modal = new ModalDiagnoses(title, diag);
	return modal.show(forceDisplay === true)
};

var _asynchError = function(title, e) {
	// in the code we can have error(e)
	var error = e;
	if (title != null && typeof title !== "string") {
		error = title;
		title = null;
	}
	var diag;
	diag = jsutils.convertToDiagnoses(error);
	if (title == null && error && error.$title) {
		title = error.$title;
	}
	return _asynchDiagnoses(title, diag, true);
};

exports.asynchError = _asynchError;

/*
 * Examples
 * 
 * error("There was an error");
 * 
 * error("There was an error", "I am the detail text");
 *
 * error("There was an error", new Error("I am an exception"));
 * 
 * error("There was an error", {
 *   $diagnoses: [{
 *	   $message: "Message 1",
 *     $severity: "error",
 *     $stackTrace: "bla"
 *	 }, {
 * 	   $message: "Message 2",
 *	   $severity: "info",
 * 	   $stackTrace: "bla"
 *   }]
 * });
 * 
 * error("There was an error", {
 *   message: "I am the message", 
 *   detail: "I am the detail message"
 * });

 * error("There was an error", {
 *   message: "I am the message", 
 *   detail: new Error("I am an exception")
 * });
 * 
 */
var _error = function(title, e, cb) {
	// in the code we can have error(e)
	var error = e;
	var callBack = cb;
	if (title != null && typeof title !== "string") {
		error = title;
		title = null;
	}
	if (typeof e === "function") {
		callBack = e;
	}
	var diag;
	diag = jsutils.convertToDiagnoses(error);
	if (title == null && error && error.$title) {
		title = error.$title;
	}
	return _diagnoses(title, diag, callBack, true);
};

/*
 * title. Title of dialog
 * diag: Object containing diagnoses
 *       {
 *           $diagnoses: [{
 *               $message: "bla...",
 *               $severity: "error", // success, info, warning, error
 *               $stackTrace: "Stacktrace as string, formatted"
 *           }, {
 *               ...
 *           }]
 *       }
 * cb: Callback
 */
var _diagnoses = function(title, diag, cb, forceDisplay) {
	var modal = new ModalDiagnoses(title, diag);
	modal.show(forceDisplay === true).then(function(result) {
		if (cb) {
			cb(result);
		}
	});
	//return modalDiag.show(title, diag, cb);
};

/* 
 * Wrap info text into diagnoses and display it in the generic diagnoses dialog
 */
var _info = function(title, text, cb) {
	var infoDiag = {
		"$diagnoses": [{
			"$severity": "info",
			"$message": text
		}]
	};
	_diagnoses(title, infoDiag, cb);
};
var _warning = function(title, text, cb) {
	_diagnoses(title, {
		"$diagnoses": [{
			"$severity": "warning",
			"$message": text
		}]
	}, cb);
};
var _confirm = function(action, cb) {

	var modal = new ModalConfirm(null, action);

	modal.show().then(function(result) {
		if (cb && (result === "yes" || result === "no")) {
			cb(result, "yes" === result);
		}
	});
};

var _simpleConfirm = function(message, cb) {
	var modal = new ModalConfirm(message, null, true);

	modal.show().then(function(result) {
		if (cb && (result === "yes" || result === "no")) {
			cb(result, "yes" === result);
		}
	});
};

/*
 * simpleConfirmPromise({
 *   message: "Are you sure?"
 *   }).then(function(result) {
 *      if (result.action === "yes") {
 *      } else if (result.action === "no") {
 *      }
 *   });
 */
exports.simpleConfirmPromise = function(options) {
	var deferred = $.Deferred();
	var modal = new ModalConfirm(options.message, null, true);

	modal.show().then(function(result) {
		if (result === "yes" || result === "no") {
			deferred.resolve({
				action: result
			});
		}
	});

	return deferred.promise();
};
/*
 * Open a modal window linked to a field
 */
var _field = function(title, domBody, cb) {
	var modal = new ModalField(title, domBody, cb);
	modal.show();
};

/* options properties are :
- severityClass : css class depending on severity
- title : title text value used in the template
- text : body text value used in the template
- $$parentSlot : parent to which modal is appended, depends on device type
*/
var _notificationHandler = function(options) {
	// #8583 - Check if there's already the same message displayed
	var stop = false;
	$(document.body).find(".s-m-act-msg." + options.severityClass).each(function(index) {
		var $e = $(this)
		if ($e.find("div:contains('" + options.title + "')").length > 0 && $e.find("div:contains('" + options.body + "')").length > 0) {
			stop = true;
			return false;
		}
	})
	if (stop) {
		return;
	}
	// create html
	var h = _getHtml("actionMessage", {
		title: options.title,
		message: options.body,
		severityClass: options.severityClass
	});

	var isClosing;
	// append to app according to device type
	var $$actionModal = $(h);
	options.$$parentSlot.prepend($$actionModal);

	// show parentSlot
	options.$$parentSlot.show();

	// close anchor
	var $$closer = $$actionModal.find("a");

	function toggle() {
		$$actionModal.toggleClass("show");
	}
	var delay = options.delay || "medium";
	delay = delay === "short" ? 1500 : delay === "long" ? 7000 : 5000;

	function clear() {
		toggle();
		// set timeout in order to have css animation visible before removing DOM
		setTimeout(function() {
			$$actionModal.remove();

			// hide parent slot if last item removed
			if (options.$$parentSlot.children().length == 0) {
				options.$$parentSlot.hide();
			}
		}, 500);
	};

	// bind click action on closer button. triggers close action
	$$closer.bind("click", function() {
		clear();
		isClosing = true;
	});

	// display
	// setTimeout is necessary to have the display css animation working
	setTimeout(function() {
		toggle();
	}, 50);

	// toggle after 5 seconds
	var toggleTimeout = setTimeout(function() {
		if (!isClosing) {
			clear();
		}
	}, delay);
};

/**
 * options.onlyWebapp = true if set, notification is not send to operation system but only showen inside application
 */
exports.notify = function(options) {
	var nativeToastMsg = native.hasCapability("toastMessages") === true
	if (environment.isOs("ios") && nativeToastMsg) {
		// nativeToastMsg always
	} else if (options != null && options.onlyWebapp === true) {
		/// Force display by web app
		nativeToastMsg = false
	}
	if (nativeToastMsg === true) {
		// Displayed by native wrapper
		native.getModule("toastMessages").showToastMessage({
			Text1: options.title,
			Text2: options.body,
			Severity: options.severityClass
		});
	} else {
		exports.forceNotifyWebApp(options);
	}
};
// For tests
exports.forceNotifyWebApp = function(options) {
	if (!options) {
		return;
	}
	options.$$parentSlot = options.$$parentSlot || modules.get("appController").App.getMessageSlot();
	_notificationHandler(options);
};

exports.noConnectionModal = function() {
	return _error(
		locale.text("action.title.offline"),
		locale.text("action.needs.net"));
};


/*
 * Creates a diagnoses that contains a general message reporting there was a technical isse
 * This must be used whenever there is an error that the user cannot understand anyway to hide technical
 * defauls from the user
 */
exports.createGeneralErrorDiag = function(source) {
	return {
		$diagnoses: [{
			$message: locale.text("technical.error.message"),
			$severity: "error",
			$stackTrace: JSON.stringify(source)
		}]
	};
};

exports.error = _error;
exports.info = _info;
exports.warning = _warning;
exports.diagnoses = _diagnoses;
exports.field = _field;
exports.confirm = _confirm;
exports.simpleConfirm = _simpleConfirm;