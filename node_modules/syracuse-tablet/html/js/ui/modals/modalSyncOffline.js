"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var modalDialog = require('syracuse-tablet/html/js/ui/modals/modalDialog');
var sdataHttp = require('syracuse-tablet/html/js/sdata/sdataHttp');
var date = require('syracuse-tablet/html/js/helpers/types/date');
var sdataSyncUtils = require('syracuse-tablet/html/js/sdata/sdataSyncUtils');

var _templateAll = {
	header: '\
			<buttons class="pull-right"> \
				<button type="button" class="btn btn-default s-m-modal-btn-cancel" data-action="$cancel"></button> \
			</buttons> \
			<div class="modal-title">{{title}}</div> \
			',
	content: ' \
			<div class="s-m-scroll-wrapper s-m-scroll-wrapper-v">\
			<div class="s-m-scroll-element"> \
				<div class="form-group"> \
					<label>{{label_tree}}</label> \
					<div id="s-m-sync-tree-id"></div> \
				</div> \
			</div> \
			</div>',
	footer: ''
};

var _Klass = utils.defineClass(
	function ModalSyncOffline(syncRootData) {
		var self = this;
		modalDialog.ModalBase.call(self);
		self.syncRootData = syncRootData;
	}, modalDialog.ModalBase, {
		_getTemplates: function() {
			var self = this;
			return {
				std: _templateAll
			};
		},

		getDisplayFlags: function() {
			var self = this;
			var displayFlags = self.displayFlags || {};
			//			if (self.deviceType === "tablet") {
			//				displayFlags.modalClass = "sync-offline half_right";
			//			} else {
			//				displayFlags.modalClass = "sync-offline-legal full";
			//			}
			displayFlags.modalClass = "sync-offline-legal full";
			return displayFlags;
		},

		_getDataContext: function() {
			var self = this;
			var data = {
				title: locale.text("modal.sync.title"),
				label_tree: locale.text("modal.sync.header.tree"),
			};
			return data;
		},

		_onShow: function() {
			var self = this;
			modalDialog.ModalBase.prototype._onShow.call(self);
			sdataSyncUtils.getSyncStructure(self.syncRootData.pageProto)
				.then(function(tree) {
					self._buildStructHtml(tree);
				});
		},

		_buildStructHtml: function(node) {
			var self = this;
			var $$sync = $("#s-m-sync-tree-id");
			var $$ul = $("<ul>");
			self._addNode($$ul, node, 0);
			$$sync.append($$ul);
		},

		_addNode: function($$parent, node, level) {
			var self = this;
			var cls = level > 0 ? "collapsed" : "expanded";
			cls = cls + (level < 1 ? " selected" : "");
			var $$li = $('\
				<li class="s-m-sync-tree-item ' + cls + '" data-params="' + node.uuid + '"> \
					<div class="s-m-tree-icon-expand" data-action="tree-click-expand" data-params="' + node.uuid + '"></div> \
					<div class="s-m-tree-label" data-action="tree-click-select" data-params="' + node.uuid + '"></div> \
				</li>');
			$("div.s-m-tree-label", $$li).text(node.$title);
			$$parent.append($$li);
			if (node.$children.length > 0) {
				var $$ul = $("<ul>");
				if (node.isDetails !== true) {
					// For $query parent, the single $details link is not added to the tree it will be handled implicitly
					var child = node.$children[0];
					if (child && child.$children.length > 0) {
						$$li.append($$ul);
						child.$children.forEach(function(child) {
							self._addNode($$ul, child);
						});
					}
				} else {
					if (node.$children.length > 0) {
						$$li.append($$ul);
						// For a $details parent, all child links are added as new tree level
						node.$children.forEach(function(child) {
							self._addNode($$ul, child);
						});
					}
				}
			}
			// No children added
			if ($("ul", $$li).length < 1) {
				var $$expand = $(">.s-m-tree-icon-expand", $$li);
				$$expand.removeClass("s-m-tree-icon-expand");
				$$expand.addClass("s-m-tree-icon-leaf");
				$$expand.attr("data-action", null);
			}
		},
		_onAction: function(action, param) {
			var self = this;
			if (action === "tree-click-expand") {
				self._onTreeClickExpand(param);
			} else if (action === "tree-click-select") {
				self._onTreeClickSelect(param);
			}

			return false;
		},
		_onValidate: function() {},

		_onCancel: function() {},

		_getResult: function() {
			return "done";
		},
		_onTreeClickExpand: function(param) {
			var self = this;
			var $$li = $('li[data-params="' + param + '"]');
			if ($$li.hasClass("expanded")) {
				$$li.removeClass("expanded");
				$$li.addClass("collapsed");
			} else {
				$$li.addClass("expanded");
				$$li.removeClass("collapsed");
			}
		},
		_onTreeClickSelect: function(param) {
			var self = this;
			var $$li = $('li[data-params="' + param + '"]');
			if ($$li.hasClass("selected")) {
				$$li = $$li.add("li", $$li);
				$$li.removeClass("selected");
			} else {
				$$li = $$li.add("li", $$li);
				$$li.addClass("selected");
			}
		}
	}
);

exports.Modal = _Klass;