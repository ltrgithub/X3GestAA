"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var defaultOptions = {
	drag: {
		options: {
			containment: ".s-m-main-content",
			disabled: false,
			helper: 'clone',
			opacity: 1,
		}
	},
	drop: {
		options: {
			tolerance: "pointer",
			hoverClass: "s-m-hover-droptarget",
		}
	}
}

var _Klass = utils.defineClass(
	/*
	 * params :
	 * 	dragOpts:{
	 * 		selector: Liste of JQUERY selectors : all elements dragable ex ".s-m-tile,.another selector, ..."	
	 * 		notify:{ all notif usable on drag : start, drag drop avoid drag because to much notif
	 *			start:"sm.tile.start" format : "event": "notif"
			}
			options:{
				jquery drag options
			}
	 * }
	 * dropOpt :{
	 * 	selector: Liste of JQUERY selectors : all elements target ex ".s-m-tile,.another selector, ..."	
	 * 		notify:{ all notif usable on drop : drop, out
	 *			drop:"sm.tile.drop" format : "event": "notif"
			}
			options:{
				jquery drop options
			}
	 * }
	 */
	function DragManager(dragOpts, dropOpt, $$parent) {
		this._notif = new Notifier();
		this._dropUI = new DropUI();
		this._init(dragOpts, dropOpt, $$parent);
		this.params;
		this.dragEnable = dragOpts.enable; // manage properly scroll when drag is not in progress mink with subscription below
		notifications.subscribe(this, ["sm.drag.state.change"]); // subscription to manage Drap in progress
	}, null, {
		notifDragStateChange: function(enable) {
			this.dragEnable = enable
		},
		destroy: function() {
			this._notif = null;
			$(this.dropOpts.selector).droppable("destroy");
			$(this.dragOpts.selector).draggable("destroy");
			this._dropUI.destroy();
		},
		_init: function(dragOpts, dropOpts, $$parent) {
			var self = this;
			self.dropOpts = $.extend(true, defaultOptions.drop, dropOpts),
				self.dragOpts = $.extend(true, defaultOptions.drag, dragOpts),
				self._notif.register(self.dragOpts.notify);
			self._notif.register(self.dropOpts.notify);

			$(self.dropOpts.selector).droppable(
				$.extend(true, self.dropOpts.options, {
					drop: function(event, ui) {
						self._notif.publish("drop", $(this), ui, self.params);
					},
					out: function(event, ui) {
						self._notif.publish("out", $(this), ui);
					},
					over: function(event, ui) {
						self._notif.publish("over", $(this), ui);
					}
				})
			);
			$(self.dragOpts.selector).draggable(
				$.extend(true, self.dragOpts.options, {
					create: function(event, ui) {
						self._notif.publish("create", $(this), ui);
					},
					start: function(event, ui) {
						ui.helper.css("z-index", 2000);
						ui.helper.addClass("s-m-dragElement");
						self._notif.publish("start", $(this), ui);
					},
					drag: function(event, ui) {
						if (!self.dragEnable) {
							return false
						} else {
							// drag in progess (after a long click)
							event.stopPropagation();
						}
					},
					stop: function(event, ui) {
						self._notif.publish("stop", $(this), ui);
					},
					// Used is the hack of jsquery.ui.touch-punch
					isOnDrag: function() {
						return self.dragEnable
					}
				})
			);
		},
		showIndicator: function(opts, params) {
			this.params = params; // notification params mainly to indicate where we drop
			this._dropUI.show(opts)
		},
		hideIndicator: function() {
			this._dropUI.hide()
		},
		getNotifs: function() {
			return this._notif.get();
		},
	}
);
var DropUI = utils.defineClass(
	function DropUI(dragOpts, dropOpt, $$parent) {
		this._elmt = {};

	}, null, {
		destroy: function() {
			this._elmt && $(this._elmt).remove();
			this._elmt = null;
		},
		show: function(opts) {
			this.hide();
			this._elmt = uiUtils.createDomElement("div", ["s-m-ui-drop"], null, null, opts.$$parent);
			if (opts && opts.left) this._elmt.style.left = opts.left
			if (opts && opts.top) this._elmt.style.top = opts.top
			if (opts && opts.width) this._elmt.style.width = opts.width
			if (opts && opts.height) this._elmt.style.height = opts.height
		},
		hide: function() {
			this.destroy();
		}
	}
);

var Notifier = utils.defineClass(
	function Notifier(dragOpts, dropOpt, $$parent) {
		this._notifs = {};
	}, null, {
		register: function(notifs) {
			var self = this;
			if (!notifs) return;
			Object.keys(notifs).forEach(function(key) {
				self._notifs[key] = notifs[key];
			});
		},
		get: function(event) {
			var self = this;
			if (event) {
				return self._notifs[event]
			} else {
				var notif = [];
				Object.keys(self._notifs).forEach(function(key) {
					notif.push(self._notifs[key]);
				});
				return notif;
			}
		},
		publish: function(event, $$elt1, $$elt2, params) {
			var self = this;
			if (!event || !self.get(event)) return;
			notifications.publish(self.get(event), $$elt1, $$elt2, params);
		}
	}
);

exports.DragManager = _Klass;