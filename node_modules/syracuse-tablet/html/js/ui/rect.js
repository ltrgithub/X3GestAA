"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');

var _Klass = utils.defineClass(function rect(top, left, height, width) {
	this.top = top;
	this.left = left;
	this.height = height;
	this.width = width;
	this.right = this.left + this.width;
	this.bottom = this.top + this.height;
}, null, {
	// Accept null for x or y 
	isPointInside: function(x, y) {
		return (x == null || (x >= this.left && x <= this.right)) && (y == null || (y >= this.top && y <= this.bottom));
	},
	/**
	 * rectOffset!=null means that the main has scrolled and we need to to correct the coordinates because pageX/pageY are relative document
	 */
	isEvtInside: function(evt, rectOffset) {
		var y = rectOffset != null && rectOffset.top != null ? evt.pageY + rectOffset.top : evt.pageY;
		var x = rectOffset != null && rectOffset.left != null ? evt.pageX + rectOffset.left : evt.pageX;
		return this.isPointInside(x, y);
	},
	intersectsWith: function(rect) {
		return this.left <= rect.right && rect.left < this.right && this.top < rect.bottom && rect.top < this.bottom;
	},
	contains: function(rect) {
		return this.isPointInside(rect.left, rect.top) && this.isPointInside(rect.right, rect.bottom);
	},
	/**
	 * relative	true/false
	 */
	intersectRect: function(rect, relative) {
		if (!this.intersectsWith(rect)) return null;
		var top = Math.max(this.top, rect.top);
		var left = Math.max(this.left, rect.left);
		var right = Math.min(this.right, rect.right);
		var bottom = Math.min(this.bottom, rect.bottom);
		return new _Klass(relative ? 0 : top, relative ? 0 : left, bottom - top, right - left);
	},
	toString: function() {
		return "t:" + this.top + " l:" + this.left + " r:" + this.right + " b:" + this.bottom + " h:" + this.height + " w:" + this.width;
	},
	toRelative: function(offet) {
		if (offet == null) offet = {};
		if (offet.top == null) offet.top = 0;
		if (offet.left == null) offet.left = 0;
		return new _Klass(offet.top, offet.left, this.height, this.width);
	},
	showInDocument: function(timeout, $$parent, pos, color) {
		pos = pos || ($$parent ? "absolute" : "fixed");
		$$parent = pos === "fixed" ? $(document.body) : $$parent;
		var $$elmt = $('<div class = "s-m-rect">').appendTo($$parent).css({
			position: pos,
			top: this.top + "px",
			left: this.left + "px",
			height: this.height + "px",
			width: this.width + "px",
			backgroundColor: color
		});
		if (timeout != null) {
			setTimeout(function() {
				$$elmt.remove();
			}, timeout);
		}
		return $$elmt;
	}
});
var _meths = {
	outer: ["outerWidth", "outerHeight"],
	inner: ["innerWidth", "innerHeight"],
	computed: ["width", "height"],
	fixed: "position",
	relative: "offset"
};
/**
 * Returns the rectangle of $$elmt
 * 	type:		outer / inner / computed
 * 	position	fixed, relative
 * 	myOffset	my offset to shift the rect if any
 */
exports.elmtRect = function($$elmt, typeRect, position) {
	var o = $$elmt[_meths[position || "relative"]]();
	var m = _meths[typeRect || "outer"];
	return new _Klass(o.top, o.left, $$elmt[m[1]](), $$elmt[m[0]]());
};
exports.newRect = function(top, left, height, width) {
	return new _Klass(top, left, height, width);
};