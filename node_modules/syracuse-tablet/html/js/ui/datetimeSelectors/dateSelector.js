"use strict";
var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var _dateApi = require('syracuse-tablet/html/js/helpers/types/date');
var MonthChoice = require('syracuse-tablet/html/js/ui/datetimeSelectors/monthChoice').MonthChoice;
var YearChoice = require('syracuse-tablet/html/js/ui/datetimeSelectors/yearChoice').YearChoice;

var _Klass = utils.defineClass(

	function() {

	}, null, {
		onClick: function(evt) {
			var self = this,
				close;
			while (evt.target && evt.target != self.handler.parentSlot) {
				if (evt.target.getAttribute("data-s-syraOnClick")) {
					close = this[evt.target.getAttribute("data-s-syraOnClick")](evt.target, evt);
					if (close) {
						this.handler.closeContainer();
					}
					return;
				} else {
					evt.target = evt.target.parentNode;
				}
			}
		},
		onTodayClick: function() {
			this._currentDate = _dateApi.today();
			this.field.setFieldValueFromSelector(_dateApi.fromInternalValue(this._currentDate._value).toString());
			return true;
		},
		onDayClick: function(picker) {
			this.field.setFieldValueFromSelector(_dateApi.fromInternalValue(picker.getAttribute("data-s-syraValue")).toString());
			return true;
		},
		onChangePeriode: function(picker) {
			if (picker.getAttribute("data-s-syraPeriod") == "month") {
				this._currentDate = this._currentDate.addMonths(picker.getAttribute("data-s-syraIsPrev") ? -1 : 1);
			} else if (picker.getAttribute("data-s-syraPeriod") == "year") {
				this._currentDate = this._currentDate.addYears(picker.getAttribute("data-s-syraIsPrev") ? -1 : 1);
			} else {
				this._currentDate = this._currentDate.addDays(picker.getAttribute("data-s-syraIsPrev") ? -7 : 7);
			}
			this.handler.onEvent("onCalendarUpdate", this);
		},
		onMonthClick: function() {
			this.handler.onEvent("onMonthClick", this);
		},
		onYearClick: function() {
			this.handler.onEvent("onYearClick", this);
		},
		getValueForSelector: function(field) {
			return field.getValue() && field.getValue().slice(0, 10);
		},
		create: function(field, handler) {
			this.domItem = document.createElement("div");
			this.domItem.className = "s-calendar";

			var value = this.getValueForSelector(field) || "";

			this._selectedDate = value ? _dateApi.parse(value) : _dateApi.today();
			this._selectedDate = this._selectedDate._value == 0 ? _dateApi.today() : this._selectedDate;
			this._currentDate = handler._currentDate || _dateApi.fromInternalValue(this._selectedDate._value);

			this.field = field;
			this.handler = handler;

			this._table = document.createElement("table");
			this._table.setAttribute("cellspacing", 0);
			this._table.className = "s-calendar-content";
			this._table.appendChild(this._appendHead());
			this._table.appendChild(this.body = document.createElement("tbody"));
			this._table.appendChild(this._appendFoot());
			this.domItem.appendChild(this._table);

			this._drawBody();

			return this.domItem;
		},
		_appendHead: function() {
			var head = document.createElement("thead");
			var row = document.createElement("tr");
			var cell = document.createElement("th");
			cell.setAttribute("colspan", 8);
			cell.className = "s-calendar-month-year";

			var slot = document.createElement("div");
			slot.className = "s-calendar-month-year-slot";
			cell.appendChild(slot);

			// prev year link
			var link = document.createElement("a");
			link.setAttribute("data-s-syraOnClick", "onChangePeriode");
			link.setAttribute("data-s-syraIsPrev", true);
			link.setAttribute("data-s-syraPeriod", "year");
			link.className = "s-calendar-prev s-calendar-prev-year glyphicon glyphicon-fast-backward";
			slot.appendChild(link);

			// prev month link
			link = document.createElement("a");
			link.setAttribute("data-s-syraOnClick", "onChangePeriode");
			link.setAttribute("data-s-syraIsPrev", true);
			link.setAttribute("data-s-syraPeriod", "month");
			link.className = "s-calendar-prev s-calendar-prev-month glyphicon glyphicon-step-backward";
			slot.appendChild(link);

			this._monthLink = document.createElement("a");
			this._monthLink.className = "s-month s-calendar-month-year-link";
			slot.appendChild(this._monthLink).setAttribute("data-s-syraOnClick", "onMonthClick");

			this._yearLink = document.createElement("a");
			this._yearLink.className = "s-year s-calendar-month-year-link";
			slot.appendChild(this._yearLink).setAttribute("data-s-syraOnClick", "onYearClick");

			// next month link
			link = document.createElement("a");
			link.setAttribute("data-s-syraOnClick", "onChangePeriode");
			link.setAttribute("data-s-syraPeriod", "month");
			link.className = "s-calendar-next s-calendar-next-month glyphicon glyphicon-step-forward";
			slot.appendChild(link);

			// next year link
			link = document.createElement("a");
			link.setAttribute("data-s-syraOnClick", "onChangePeriode");
			link.setAttribute("data-s-syraPeriod", "year");
			link.className = "s-calendar-next s-calendar-next-year glyphicon glyphicon-fast-forward";
			slot.appendChild(link);

			row.appendChild(cell);
			head.appendChild(row);

			row = document.createElement("tr");
			var cell = document.createElement("th");
			cell.className = "s-calendar-week-day";
			row.appendChild(cell);

			var days = [1, 2, 3, 4, 5, 6, 0];
			for (var ii = 0, jj = days.length; ii < jj; ii++) {
				var cell = document.createElement("th");
				cell.className = "s-calendar-week-day";
				cell.title = _dateApi.dayName(days[ii]);
				cell.textContent = _dateApi.dayName(days[ii], true);
				row.appendChild(cell);
			}
			head.appendChild(row);
			return head;
		},
		_appendFoot: function() {
			var row = document.createElement("tr");
			var cell = document.createElement("td");
			cell.setAttribute("colspan", 3);
			cell.className = "s-calendar-foot-week";

			var link = document.createElement("a");
			link.setAttribute("data-s-syraOnClick", "onChangePeriode");
			link.setAttribute("data-s-syraPeriod", "week");
			link.className = "s-calendar-prev s-calendar-prev-week glyphicon glyphicon-chevron-left";
			link.setAttribute("data-s-syraIsPrev", true);
			cell.appendChild(link);

			var label = document.createElement("label");
			label.className = "s-calendar-foot-week-title";
			label.textContent = locale.text("date.label.week");
			cell.appendChild(label);

			this._weekNumber = document.createElement("label");
			this._weekNumber.className = "s-calendar-foot-week-title-num";
			cell.appendChild(this._weekNumber);

			link = document.createElement("a");
			link.setAttribute("data-s-syraOnClick", "onChangePeriode");
			link.setAttribute("data-s-syraPeriod", "week");
			link.className = "s-calendar-next s-calendar-next-week glyphicon glyphicon-chevron-right";
			cell.appendChild(link);
			row.appendChild(cell);

			cell = document.createElement("td");
			cell.setAttribute("colspan", 3);
			cell.className = "s-calendar-foot-today";
			link = document.createElement("a");
			link.className = "s-calendar-today-link";
			link.setAttribute("data-s-syraOnClick", "onTodayClick");

			link.textContent = locale.text("date.label.today");
			cell.appendChild(link);
			row.appendChild(cell);

			cell = document.createElement("td");
			cell.setAttribute("colspan", 2);

			row.appendChild(cell);

			var foot = document.createElement("tfoot");
			foot.appendChild(row);
			return foot;
		},
		_drawBody: function() {

			var curMonth = this._currentDate.month || 9;
			var month = _dateApi.monthName(curMonth);

			this._monthLink.textContent = month;
			this._yearLink.textContent = this._currentDate.year || 2014;

			uiUtils.empty(this.body);

			var curDate = _dateApi.fromInternalValue(this._currentDate._value);
			var begOfMonth = curDate = curDate.begOfMonth();
			curDate = curDate.begOfWeek(1);

			for (var weekRow = 0; weekRow < 6; weekRow++) {
				var row = document.createElement("tr");
				var weekDay = (weekRow == 0) ? begOfMonth : curDate;
				var cell = document.createElement("td");
				cell.className = "s-calendar-week-num";
				row.appendChild(cell);
				cell.textContent = weekDay.week;
				for (var day = 0; day < 7; day++) {
					var cell = document.createElement("td");
					cell.className = "s-calendar-day-link";
					cell.setAttribute("data-s-syraOnClick", "onDayClick");
					cell.setAttribute("data-s-syraValue", curDate._value);
					var link = document.createElement("a");
					link.textContent = curDate.day;
					if (curMonth != curDate.month) {
						cell.className += " s-calendar-other-month";
					}
					if (this._currentDate.equals(curDate)) {
						cell.className += " s-calendar-select";
						link.className = "s-calendar-select";
					}
					cell.appendChild(link);
					row.appendChild(cell);
					curDate = curDate.addDays(1);
				}
				this.body.appendChild(row);
			}
			this._weekNumber.textContent = this._currentDate.week;
		},
		bindEvents: function(bind) {
			var self = this;
			var parentSlot = self.handler.getParentSlot();
			if (bind) {
				$(parentSlot).delegate("td, a", "click", function(evt) {
					self.onClick(evt);
					evt.preventDefault();
					evt.stopPropagation();
				});
			} else {
				$(parentSlot).undelegate();

				// unbind monthchoice and yearchoice components if necessary
				if (self._month) {
					self._month.bindEvents(false);
				}
				if (self._year) {
					self._year.bindEvents(false);
				}
			}
		},
		destroy: function() {
			this.bindEvents(false);
			this._currentDate = this.field = this._currentDate = this.quickList = this._month = this._year = this._selectedDate = this._monthLink = this._yearLink = this._weekNumber = this._quick = this.body = this.domItem = null;
		}
	});

exports.Klass = _Klass;