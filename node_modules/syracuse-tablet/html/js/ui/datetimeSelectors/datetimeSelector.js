"use strict";
var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var modal = require('syracuse-tablet/html/js/ui/modal');
var _dateApi = require('syracuse-tablet/html/js/helpers/types/date');
var _timeApi = require('syracuse-tablet/html/js/helpers/types/time');
var TimeSelector = require('syracuse-tablet/html/js/ui/datetimeSelectors/timeSelector').Klass;
var Base = require('syracuse-tablet/html/js/ui/datetimeSelectors/dateSelector').Klass;

var _Klass = utils.defineClass(

	function() {

	}, Base, {
		appendTimeSelector: function() {
			// build time selector
			var timeSelector = {
				create: function() {
					this.domItem = document.createElement("div");
					this.domItem.className = "s-time-choice";

					var options = options || {};
					this.columns = options.columns || 2;
					this.interval = options.interval || 60;

					this.curTime = _timeApi.now();
					var cellCount = (24 * 60) / this.interval;
					var rowCount = cellCount / this.columns;

					var table = document.createElement("table");
					table.className = "s-time-choice-table";
					table.setAttribute("cellspacing", "0");
					table.setAttribute("cellpadding", "0");

					var row, cell;
					var cellIndex = 0;
					var timeHour = _timeApi.parse("00:00:00");
					for (var rr = 0; rr < rowCount; rr++) {
						row = document.createElement("tr");
						for (var col = 0; col < this.columns; col++) {
							cell = document.createElement("td");
							cell.className = "s-time-choice-td";
							if (cellIndex < cellCount) {
								var link = document.createElement("a");
								link.className = "s-time-choice-a";
								link.setAttribute("data-s-syraOnClick", "onTimeClick");
								if (timeHour.hour == this.curTime.hour) {
									link.className += " s-time-select";
								}
								link.textContent = timeHour.toString();
								cell.appendChild(link);
							}
							row.appendChild(cell);
							timeHour = timeHour.addMinutes(this.interval);
							cellIndex++;
						}
						table.appendChild(row);
					}
					this.domItem.appendChild(table);
					return this.domItem;
				}
			};
			var timeSelectorDom = timeSelector.create();

			// empty container
			var parentSlot = this.handler.getParentSlot();
			uiUtils.empty(parentSlot);

			// fill with time selector
			parentSlot.appendChild(timeSelectorDom);
		},
		onClick: function(evt) {
			var self = this,
				close;
			while (evt.target) {
				if (evt.target.getAttribute("data-s-syraOnClick")) {
					close = this[evt.target.getAttribute("data-s-syraOnClick")](evt.target, evt);
					if (close) {
						self.handler.closeContainer();
					}
					return;
				} else {
					evt.target = evt.target.parentNode;
				}
			}
		},
		onTodayClick: function() {
			this._currentDate = _dateApi.today();
			this.dateValue = _dateApi.fromInternalValue(this._currentDate._value).toString();
			this.handler.onEvent("onOpenTime", this);
		},
		onDayClick: function(picker) {
			this.dateValue = _dateApi.fromInternalValue(picker.getAttribute("data-s-syraValue")).toString();
			this.handler.onEvent("onOpenTime", this);
		},
		bindEvents: function(bind) {
			var self = this;
			var parentSlot = self.handler.getParentSlot();
			var $$calendar = $(".s-calendar");
			if (bind) {
				// TODO improve
				// self.body, self.domItem and other dom variables are not tied to the dom and have to be reset
				self.domItem = $$calendar[0];
				self.body = $$calendar.find("tbody")[0];
				self._monthLink = $$calendar.find(".s-month")[0];
				self._yearLink = $$calendar.find(".s-year")[0];
				self._weekNumber = $$calendar.find(".s-calendar-foot-week-title-num")[0];

				$(parentSlot).delegate("td, a", "click", function(evt) {
					self.onClick(evt);
					evt.preventDefault();
					evt.stopPropagation();
				});
			} else {
				$(parentSlot).undelegate();

				// unbind monthchoice and yearchoice components if necessary
				if (self._month) {
					self._month.bindEvents(false);
				}
				if (self._year) {
					self._year.bindEvents(false);
				}
			}
		},
		destroy: function() {
			//TODO to complete
			this.bindEvents(false);
			this._currentDate = this.field = this._currentDate = this.quickList = this._month = this._year = this._selectedDate = this._monthLink = this._yearLink = this._weekNumber = this._quick = this.body = this._weekNumber = this.domItem = null;
		}
	});

exports.Klass = _Klass;