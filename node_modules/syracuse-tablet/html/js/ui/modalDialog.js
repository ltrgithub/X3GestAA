"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');

/**
 *
 */
var _Klass = utils.defineClass(

	function BaseModal() {
		var self = this;
		var site = globals.getSiteLayout();
		self.deviceType = site.getDeviceType(); // tablet or smartphone
	}, null, {

		/*
		 * =======================================
		 * Functions that must be overiden
		 * =======================================
		 */

		/*
		 * Needs to be overiden by dialog implementations
		 * Returns html template per device (or only std if no special ones)
		 */
		_getTemplateStrings: function() {
			return {
				std: "",
				tablet: "",
				smartphone: ""
			};
		},

		/*
		 * Needs to be overiden by dialog implementations
		 * Returns data to merge into template
		 */
		_getDataContext: function() {
			return {};
		},


		/*
		 * Can be overidden to handle clicks on data-action=$validate.
		 * Should set value returned by _getResult()
		 * Return false to NOT close dialog
		 */
		_onValidate: function() {

		},

		/*
		 * Can be overidden to handle clicks on data-action=$cancel.
		 * Should set value returned by _getResult()
		 * Return false to NOT close dialog
		 */
		_onCancel: function() {

		},

		/*
		 * Can be overidden to set result of dialog when it is closed
		 *
		 */
		_getResult: function() {

		},

		/*
		 * =======================================
		 * Functions that may be overiden
		 * =======================================
		 */

		/*
		 * Can be overidden to handle clicks on data-action dom elements.
		 * param=data-param
		 * Return false to NOT close dialog
		 */
		_onAction: function(action, param) {

		},

		_compileTpl: function() {
			var self = this;
			var htmlTpls = self._getTemplateStrings();
			var htmlTpl = htmlTpls[self.deviceType] || htmlTpls["std"];

			var tpl = Handlebars.compile(htmlTpl);
			return tpl;
		},

		_buildHtml: function() {
			var self = this;
			return self.template(self.data);
		},

		_createDOM: function() {
			var self = this;
			var dom = $(self.html).modal({
				keyboard: false,
				backdrop: "static"
			});
			self.$$elmt = $(dom);
		},

		_hookEvents: function() {
			var self = this;
			self.$$elmt.on("shown.bs.modal", self._onShow.bind(self));
			self.$$elmt.on("hide.bs.modal", self._onHide.bind(self));

			self.$$elmt.delegate("[data-action]", "click", self._onButton.bind(self));
		},

		_attachDOM: function() {
			var $$parent = $("#s-m-modal-parent") && $("#s-m-modal-parent").length > 0 ? $("#s-m-modal-parent") : $("<div>").attr("id", "s-m-modal-parent");
			$$parent.append(self.$$elmt);
			$("#s-m-app-id").append($$parent);
			$$parent.toggle(true);
		},

		_onShow: function(evt) {
			var self = this;
			var app = globals.getApplication();
			app.notifModalOpen();
		},

		_onHide: function(evt) {
			var self = this;
			var app = globals.getApplication();

			$("#s-m-modal-parent").toggle(false);
			app.notifModalClose();

			self.deferred.resolve(self._getResult());

			self.$$elmt.unbind();
			self.$$elmt.remove();
		},

		_onButton: function(evt) {
			var self = this;
			var $$t = $(evt.currentTarget);

			var param = $$t.attr("data-params");
			var act = $$t.attr("data-action");
			if (act) {
				evt.preventDefault();
				evt.stopPropagation();

				var res;
				if (act === "$validate") {
					res = self._onValidate();
				} else if (act === "$cancel") {
					res = self._onCancel();
				} else {
					res = self._onAction(act, param);
				}
				if (res !== false) {
					self.$$elmt.modal('hide');
				}
			} else {
				// Close modal
				self.$$elmt.modal('hide');
			}
		},

		/**
		 * This is the only function to be called from a dialog user
		 * It shows the dialog and resolves the returned promise as soon as the dialog is closed
		 *
		 */
		show: function() {
			var self = this;

			self.data = self._getDataContext();
			self.template = self._compileTpl();
			self.html = self._buildHtml();

			self._createDOM();
			self._hookEvents();
			self._attachDOM();

			self.deferred = new $.Deferred();
			return self.deferred.promise();
		}
	}
);

exports.ModalBase = _Klass;