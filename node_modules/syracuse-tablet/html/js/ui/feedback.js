"use strict";

var _highlightTO = 200;

/*
 * Called by event listener when the event listener registeres it's own events
 * This is ment to add UI only events to give visual feedback without triggering any actions
 */
exports.bindActions = function($$elmt) {
	$$elmt.on("mousedown", ":not(select)[data-nav], :not(select)[data-nav-refresh], :not(select)[data-action]", _armMouseDown);
	$$elmt.on("mouseup", _armMouseUp);
};

/*
 * Called by event listener when he recognized the user clicked an element starting an action
 * This is ment to highligth the element for a very short time and the continue the work of the
 * event listener
 * Note that setting a too high timeout here will delay the execution of the user action which
 * makes the app feel slow!
 */
exports.highlight = function($$elmt, cb) {
	if (_highlightTO <= 0) {
		cb();
		return;
	}

	$$elmt.addClass("s-m-highlighted");
	setTimeout(function() {
		$$elmt.removeClass("s-m-highlighted");
		cb();
	}, _highlightTO);
};

var _armedItems = [];

// This function is ment to affect parent elements of the one the action has been triggered for
// E.g. instead of only affecting the link in a tile, the tile can be determined and affected
//
// return: null - do not affect any element
// return: array - affect returned array elements
function _armFindRelated($$elmt) {
	if ($$elmt.hasClass("s-m-link-page")) { // vignette containing a link only
		var $$parent = $$elmt.closest(".s-m-tile"); // If the link is in a tile, better "arm" the tile
		if ($$parent && $$parent.length > 0) {
			return [$$parent];
		}
	}
	return [$$elmt];
}

// Called on ever mouse down to arm the elements the pointer is on
function _armMouseDown(evt) {
	var $$target = $(evt.target);
	var $$actionElmt = $$target.closest("[data-nav], [data-nav-refresh], [data-action]");
	if ($$actionElmt.length > 0) {
		var rels = _armFindRelated($$actionElmt);
		if (rels && rels.length > 0) {
			var i;
			for (i = 0; i < rels.length; i++) {
				rels[i].addClass("s-m-armed");
			}
			Array.prototype.push.apply(_armedItems, rels);
		}
	}
}
// Called on ever mouse up to remove previous "armed" states
function _armMouseUp(evt) {
	var i;
	for (i = 0; i < _armedItems.length; i++) {
		_armedItems[i].removeClass("s-m-armed");
	}
	_armedItems = [];
}