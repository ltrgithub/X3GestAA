"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ui");

//empty dom
var _empty = function(domNode) {
	if (domNode) {
		while (domNode.firstChild) {
			domNode.removeChild(domNode.firstChild);
		}
	}
};
//add or remove class to dom element
var _toggleClass = function(item, css, show) {
	if (item) {
		var className = item.className;
		if (show) {
			if (className.indexOf(css) < 0) {
				item.className = className + (" " + css);
			}
		} else {
			item.className = className.replace(css, "");
		}
	}
};

var _waitCache = {
	opts: {
		className: 'waiting-circles',
		elements: 8,
		radius: 30,
		auto: true
	},
	$parent: null,
	$wheel: null
};
var _wait = function(start) {
	if (!_waitCache.$parent) {
		_waitCache.$parent = $(".waiting-background");
		_waitCache.$wheel = $(".waiting-wheel");
		_waitCache.$wheel.waiting(_waitCache.opts);
	}
	if (start) {
		_waitCache.$wheel.waiting("enable");
		_waitCache.$parent.show();
		_waitCache.$wheel.show();
	} else {
		_waitCache.$wheel.waiting("disable");
		_waitCache.$parent.hide();
		_waitCache.$wheel.hide();
	}
};

/**
 * Returns a dom element
 * - tag : html tag
 * - classList : array of classes
 * - content : dom.textContent
 * - attrList : various attributes list with key,value (JSON format)
 **/

var _createDomElement = function(tag, classList, content, attrList, parent) {
	if (!tag) {
		throw new Error("tag parameter is necessary !");
	}
	// create dom element
	var dom = document.createElement(tag);

	// append classes
	if (classList) {
		if ($.isArray(classList)) {
			$.each(classList, function(index, className) {
				dom.className += className + (index == classList.length - 1 ? "" : " ");
			});
		} else {
			if (typeof classList !== 'string') {
				throw new Error("classList parameter must be an array or a string");
			} else {
				dom.className += classList;
			}
		}
	}

	// set content
	dom.textContent = content ? content : "";

	if (attrList) {
		$.each(attrList, function(key, value) {
			dom.setAttribute(key, value);
		});
	}

	if (parent) {
		if (parent.jquery) {
			parent = parent.append(dom);
		} else {
			parent.appendChild(dom);
		}
	}

	return dom;
};

var _buildDom = function(domDesc, parent) {
	$.each(domDesc, function(nodeName, value) {
		var dom = _createDomElement(nodeName, value.classList, value.textContent, value.attr, parent);
		if (value.children) {
			$.each(value.children, function(index, childElement) {
				_buildDom(childElement, dom);
			});
		}
	});
};

exports.empty = _empty;
exports.toggleClass = _toggleClass;
exports.waitStart = function() {
	_wait(true);
};
exports.waitStop = function() {
	_wait(false);
};
exports.createDomElement = _createDomElement;
exports.buildDom = _buildDom;