"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ui");
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');

var _doAction = function(object, act, params) {
	var fail = function(e) {
		log && log("_doAction Error", e);
	};
	try {
		var method = "_act" + $.camelCase("-" + act);
		if (!object[method]) {
			/* We check if it isn't an action of main application */
			object = globals.getApplication();
			if (!object[method]) {
				throw new Error("_doAction - Object's method " + method + " not found");
			}
		}
		if (object === globals.getApplication() || (object.isActive && object.isActive())) {
			$.when(object[method].call(object, params)).then(function(todo) {
				if (todo) {
					if (todo.page) {
						globals.getApplication().changePage(todo.page);
					}
				}
			}, function(e) {
				fail(e);
			});
		} else {
			log && log("Skip action " + method + " page not active");
		}
	} catch (e) {
		fail(e);
	}
};
/* 
 * Bind actions declared by data-nav or data-action/data-params attributes to an object
 *      for navigation data-nav  contains the name of the targeted page
 * 		for action method name is : _actActionName with ActionName the name of action declared in data-action attribute
 * object	: object that processes the actions
 * $elmt 	: optional if object.$elmt - element to bind event
 * selector : optional
 * 		Default selector is "[data-nav], [data-action]"
 */

var _bindActions = function(object, selector, $elmt) {
	$elmt = $elmt || object.$elmt;
	if (!$elmt) throw new Error("_bindActions - null $elmt");
	$elmt.delegate(selector || "[data-nav], [data-action]", "click select change", function(evt) {
		try {
			var target = $(evt.target);
			var clickedElmt = target.closest("[data-nav]");
			if (clickedElmt.length > 0) {
				evt.preventDefault();
				evt.stopPropagation();
				var attr = decodeURIComponent(clickedElmt.attr("data-nav"));
				var options = {};
				var sDataUrl = (clickedElmt.attr("data-sdata-url") || "").trim();
				if (sDataUrl.length > 0) {
					options["sdata-url"] = decodeURIComponent(sDataUrl);
				}
				var gadgetId = (clickedElmt.attr("data-gadget-id") || "").trim();
				if (gadgetId.length > 0) {
					options["gadget-id"] = gadgetId;
				}
				globals.getApplication().changePage(attr, options).then(function(dstPage) {
					log && log("data-nav Ok - Navigation to " + attr);
				}, function(e) {
					utils.alertError("data-nav KO - Navigation to " + attr, e);
				});
				return;
			}
			var clickedElmt = target.closest("[data-action]");
			if (clickedElmt.length > 0) {
				evt.preventDefault();
				evt.stopPropagation();
				var param;
				if (clickedElmt.is("select")) {
					param = $(this).val();
				} else {
					param = decodeURIComponent(clickedElmt.attr("data-params") || "");
				}
				_doAction(object, clickedElmt.attr("data-action"), param);
				return;
			}
		} catch (e) {
			utils.alertError("_bindActions delegate error ", e);
		}
	});
};

//empty dom
var _empty = function(domNode) {
	if (domNode) {
		while (domNode.firstChild) {
			domNode.removeChild(domNode.firstChild);
		}
	}
};
//add or remove class to dom element
var _toggleClass = function(item, css, show) {
	if (item) {
		var className = item.className;
		if (show) {
			if (className.indexOf(css) < 0) {
				item.className = className + (" " + css);
			}
		} else {
			item.className = className.replace(css, "");
		}
	}
};
/**
 * Resolve sdataurl and return navigation info to generate the <a>/<button> link
 */
var _getLinkInfo = function(sDataUrl, dao) {
	if (!dao) throw new Error("getLink - dao expected");
	sDataUrl = dao.parseExpression(sDataUrl);
	var url = sdataUtils.parseSDataURL(sDataUrl);
	if (url.query.representation) {
		var ep = url.application + "." + url.contract + "." + url.dataset;
		return {
			type: 'navig',
			page: ep + "." + url.query.representation,
			sDataUrl: sDataUrl
		};
	} else {
		throw new Error("getLink - not implemented\n" + sDataUrl);
	}
};
/**
 * Returns attributes for link tag
 * 	linkInfo: 	object returned by _getLinkInfo
 * 				or sdataUrl
 * dao:			mandatory if linkInfo is a sdataUrl
 */
var _getLinkAttrs = function(linkInfo, dao) {
	if (typeof linkInfo === "string") {
		// We assume that linkInfo is the url - we need dao
		linkInfo = _getLinkInfo(linkInfo, dao);
	}
	if (linkInfo.type === "navig") {
		return 'data-nav="' + linkInfo.page + '" data-sdata-url="' + encodeURIComponent(linkInfo.sDataUrl) + '"';
	} else if (linkInfo.type === "act") {
		return 'data-action="' + linkInfo.action + '" data-params="' + encodeURIComponent((linkInfo.params || "")) + '"';
	} else {
		throw new Error("_getLinkAttrs - unknonwn type\n" + linkInfo.type);
	}
};

var _waitCache = {
	opts: {
		className: 'waiting-circles',
		elements: 8,
		radius: 20,
		auto: true
	},
	$parent: null,
	$wheel: null
};
var _wait = function(start) {
	if (!_waitCache.$parent) {
		_waitCache.$parent = $(".waiting-background");
		_waitCache.$wheel = $(".waiting-wheel");
		_waitCache.$wheel.waiting(_waitCache.opts);
	}
	if (start) {
		_waitCache.$wheel.waiting("enable");
		_waitCache.$parent.show();
		_waitCache.$wheel.show();
	} else {
		_waitCache.$wheel.waiting("disable");
		_waitCache.$parent.hide();
		_waitCache.$wheel.hide();
	}
};

exports.bindActions = _bindActions;
exports.empty = _empty;
exports.toggleClass = _toggleClass;
exports.waitStart = function() {
	_wait(true);
};
exports.waitStop = function() {
	_wait(false);
};
exports.getLinkInfo = _getLinkInfo;
exports.getLinkAttrs = _getLinkAttrs;