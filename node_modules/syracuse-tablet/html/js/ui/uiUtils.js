"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ui");
var globals = require('syracuse-tablet/html/js/helpers/globals');

//empty dom
var _empty = function(domNode) {
	if (domNode) {
		while (domNode.firstChild) {
			domNode.removeChild(domNode.firstChild);
		}
	}
};
//add or remove class to dom element
var _toggleClass = function(item, css, show) {
	if (item) {
		var className = item.className;
		if (show) {
			if (className.indexOf(css) < 0) {
				item.className = className + (" " + css);
			}
		} else {
			item.className = className.replace(css, "");
		}
	}
};

var _waitDefOpts = {
	className: 'waiting-circles',
	elements: 8,
	radius: 30,
	auto: true
};
/**
 * Wait plugin for global application only (no current page or application)
 */
var _waitGlobal = null;
var _wait = function(waitObject, start) {
	if (waitObject == null) {
		// use only if no current application otherwise use page's wait plugin
		if (_waitGlobal == null) _waitGlobal = _waitWheelCreate($(document.body));
		waitObject = _waitGlobal;
	}
	if (start) {
		waitObject.$$bckg.show();
		waitObject.$$wheel.waiting("enable");
		waitObject.$$wheel.show();
	} else {
		waitObject.$$bckg.hide();
		waitObject.$$wheel.waiting("disable");
		waitObject.$$wheel.hide();
	}
};

var _waitWheelCreate = function($$parent, opts) {
	var waitObject = {
		$$bckg: $('<div class="waiting-background" style="display:none"></div>'),
		$$wheel: $('<div class="waiting-wheel"  style="display:none"></div>')
	};
	waitObject.$$bckg.appendTo($$parent);
	waitObject.$$wheel.appendTo($$parent);
	// Initialize plugin
	_waitPluginCreate(waitObject.$$wheel, _waitDefOpts);
	return waitObject;
};
/**
 * Destroy plugin
 */
var _waitPluginDestroy = function($$elmt) {
	/**
	 * We need to check data('waiting') because the plugin is not safe
	 * 	If no data('waiting') it fails
	 * 	That occurs if we remove a parent element of the plugin before destroying the plugin
	 */
	if ($$elmt && $$elmt.data('waiting')) {
		$$elmt.waiting("destroy");
		$$elmt.remove();
	}
};

var _waitPluginCreate = function($$elmt, opts) {
	if (!opts) throw new Error("opts is mandatory");
	if ($$elmt) $$elmt.waiting(opts);
	return $$elmt;
};
var _waitWheelDestroy = function(waitObject) {
	if (waitObject) {
		_waitPluginDestroy(waitObject.$$wheel);
		if (waitObject.$$bckg) waitObject.$$bckg.remove();
	}
};
/**
 * Returns a dom element
 * - tag : html tag
 * - classList : array of classes
 * - content : dom.textContent
 * - attrList : various attributes list with key,value (JSON format)
 **/

var _createDomElement = function(tag, classList, content, attrList, parent) {
	if (!tag) {
		throw new Error("tag parameter is necessary !");
	}
	// create dom element
	var dom = document.createElement(tag);

	// append classes
	if (classList) {
		if ($.isArray(classList)) {
			$.each(classList, function(index, className) {
				dom.className += className + (index == classList.length - 1 ? "" : " ");
			});
		} else {
			if (typeof classList !== 'string') {
				throw new Error("classList parameter must be an array or a string");
			} else {
				dom.className += classList;
			}
		}
	}

	// set content
	dom.textContent = content ? content : "";

	if (attrList) {
		$.each(attrList, function(key, value) {
			dom.setAttribute(key, value);
		});
	}

	if (parent) {
		if (parent.jquery) {
			parent = parent.append(dom);
		} else {
			parent.appendChild(dom);
		}
	}

	return dom;
};

var _buildDom = function(domDesc, parent) {
	$.each(domDesc, function(nodeName, value) {
		var dom = _createDomElement(nodeName, value.classList, value.textContent, value.attr, parent);
		if (value.children) {
			$.each(value.children, function(index, childElement) {
				_buildDom(childElement, dom);
			});
		}
	});
};

/**
 * Keep a map of modals used for fields. Those modals can be then easily retrieved and closed
 * Add a modal in the map
 */
var _addFieldModal = function($$md, fieldId) {
	if (fieldId) {
		var app = globals.getApplication();
		app.modalsMap = app.modalsMap || {};
		app.modalsMap[fieldId] = $$md;
	}
};

/**
 * Remove modal from map
 **/
var _removeFieldModal = function(fieldId) {
	var app = globals.getApplication();
	if (app.modalsMap) {
		delete app.modalsMap[fieldId];
	}
};


/**
 * Close modal stored in modalsMap
 */
var _closeModal = function(id) {
	var app = globals.getApplication();
	if (app.modalsMap) {
		app.modalsMap[id].modal('hide');
	}
};


exports.empty = _empty;
exports.toggleClass = _toggleClass;

exports.waitWheelStart = function(waitObject) {
	_wait(waitObject, true);
};
exports.waitWheelStop = function(waitObject) {
	_wait(waitObject, false);
};

exports.waitWheelCreate = _waitWheelCreate;
exports.waitWheelDestroy = _waitWheelDestroy;

exports.waitPluginDestroy = _waitPluginDestroy;
exports.waitPluginCreate = _waitPluginCreate;

exports.createDomElement = _createDomElement;
exports.buildDom = _buildDom;

exports.addFieldModal = _addFieldModal;
exports.removeFieldModal = _removeFieldModal;
exports.closeModal = _closeModal;