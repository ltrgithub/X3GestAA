"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var localStorage = require('syracuse-tablet/html/js/storage/localStorage');

var _template = '\
	<div id="page_dev_mode" style="margin: 0; width: auto; position: absolute; z-index: 9999"> \
    <div class="modal-dialog" style="margin: 0; width: auto;"> \
		<div class="modal-content" style="width: 230px;"> \
		    <div class="modal-header"> \
				<h4 class="modal-title">{{title}}</h4> \
		    </div> \
		    <div class="modal-body"> \
				<div class="form-group"> \
					<label>{{label_device}}</label>\
					<select class="form-control" id="dev-select-device"> \
					{{#each devices}}\
						<option value="{{this.device}}.{{this.orientation}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
					<span class="input-group"> \
						<input id="dev-device-scale" type="checkbox" {{#if scaleChecked}}checked{{/if}}>{{label_scale}} \
					</span> \
				</div> \
				<div class="form-group"> \
					<span class="input-group"> \
						<input id="dev-cache" type="checkbox" {{#if cacheChecked}}checked{{/if}}>{{label_cache}} \
	  				</span> \
				</div> \
			</div> \
		    <div class="modal-footer"> \
				<button type="button" class="btn" id="btn_dev_close">{{label_close}}</button> \
				<button type="button" class="btn btn-default" disabled="true" id="btn_dev_apply">{{label_apply}}</button> \
    			<button type="button" class="btn" id="btn_dev_ok">{{label_ok}}</button> \
			</div> \
		</div> \
	</div> \
	</div>';

var _show = function() {
	_setActive(true);

	if ($("#page_dev_mode").is(":visible")) {
		return;
	}
	var modalHtml = Handlebars.compile(_template);
	var cache = globals.getCache();
	var site = globals.getSiteLayout();
	var devs = site.getDeviceTemplates();

	var ctx = {
		title: "Development settings",

		label_device: "Device",
		devices: [],

		label_scale: "Scale if needed",

		label_cache: "Disable caching",

		label_close: "Cancel",
		label_ok: "Ok",
		label_apply: "Apply",

		scaleChecked: localStorage.getItem("devPanelScale") === "true",
		cacheChecked: localStorage.getItem("devPanelCache") === "true"
	};

	ctx.devices.push({
		device: "<No emulation>",
		orientation: "landscape",
		description: "<No emulation>"
	});

	for (var dev in devs) {
		devs[dev].orientations.forEach(function(o) {
			var devName = dev;
			var orientName = o;

			var opt = {
				device: dev,
				orientation: o,
				description: devName + " (" + o + ")"
			};
			ctx.devices.push(opt);
		});
	}
	var lastDev = localStorage.getItem("devPanelDevice") || "<No emulation>.landscape";
	ctx.devices.forEach(function(d) {
		d.selected = (lastDev === d.device + "." + d.orientation);
	});
	modalHtml = modalHtml(ctx);
	$("body").append($(modalHtml));
	var $$page = $("#page_dev_mode");
	$$page.draggable();

	$("#btn_dev_ok", $$page).on("click", function() {
		apply();
		$$page.remove();
	});
	$("#btn_dev_apply", $$page).on("click", function() {
		apply();
		// If we click a second time on the button the rendering is not good (panels)
		$("#btn_dev_apply", $$page).attr("disabled", "true");
	});

	$("#btn_dev_close", $$page).on("click", function() {
		_setActive(false);
		$$page.remove();
	});
	$("#dev-select-device", $$page).on("change", function() {
		$("#btn_dev_apply", $$page).removeAttr("disabled");
	});
	$('input[type="checkbox"]', $$page).on("click", function() {
		$("#btn_dev_apply", $$page).removeAttr("disabled");
	});
	var apply = function() {
		var device = $$page.find("#dev-select-device").val();
		var dev = device.split(".");
		var params = {
			layout: {
				pageParameters: {}
			}
		};
		localStorage.setItem("devPanelDevice", device);
		if (device === "<No emulation>.landscape") {
			params.layout.pageParameters.forcePreview = false;
			params.layout.pageParameters.forceAutoScale = false;
			params.layout.pageParameters.device = "tablet";
			params.layout.pageParameters.orientation = "landscape";
		} else {
			params.layout.pageParameters.device = dev[0];
			params.layout.pageParameters.orientation = dev[1];
			params.layout.pageParameters.forcePreview = true;

			if ($("#dev-device-scale", $$page).is(":checked") === true) {
				params.layout.pageParameters.forceAutoScale = true;
				localStorage.setItem("devPanelScale", "true");
			} else {
				params.layout.pageParameters.forceAutoScale = false;
				localStorage.setItem("devPanelScale", "false");
			}
		}

		if ($("#dev-cache", $$page).is(":checked") === true) {
			localStorage.setItem("devPanelCache", "true");
			cache.disableCache(true);
		} else {
			localStorage.setItem("devPanelCache", "false");
			cache.disableCache(false);
		}

		uiutils.triggerResizeInternal(params);
	};

	apply();
};

function _setActive(flag) {
	localStorage.setItem("devPanelOpen", flag ? "true" : "false");
}

exports.wasActive = function() {
	return localStorage.getItem("devPanelOpen") === "true";
};

exports.show = _show;