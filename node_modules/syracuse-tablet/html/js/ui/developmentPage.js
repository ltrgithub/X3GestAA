"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var modal = require('syracuse-tablet/html/js/ui/modal');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');

var _template = '\
	<div id="page_dev_mode" style="position: absolute; z-index: 9999"> \
    <div class="modal-dialog"> \
		<div class="modal-content"> \
		    <div class="modal-header"> \
				<h4 class="modal-title">{{title}}</h4> \
		    </div> \
		    <div class="modal-body"> \
				<div class="form-group"> \
					<label>{{label_device}}</label>\
					<select class="form-control" id="dev-select-device"> \
					{{#each devices}}\
						<option value="{{this.device}}.{{this.orientation}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
				</div> \
			</div> \
		    <div class="modal-footer"> \
				<button type="button" class="btn pull-left" id="btn_dev_close">{{label_close}}</button> \
    			<button type="button" class="btn btn-default" id="btn_dev_ok">{{label_ok}}</button> \
			</div> \
		</div> \
	</div> \
	</div>';

/**
 * force = true
 * 		Force display of  modal is an endpoint is still available in local storage
 */
var _selectContext = function(context, endpoints, roles, languages, warn) {
	var deferred = $.Deferred();
	try {
		try {
			var modalHtml = Handlebars.compile(_template);
			var ctx = {
				title: locale.text("modal.context.title"),
				label_endpoints: locale.text("modal.context.endpoints"),
				endpoints: endpoints,
				label_roles: locale.text("modal.context.roles"),
				roles: roles,
				label_languages: locale.text("modal.context.languages"),
				languages: languages,
				label_logout: locale.text("modal.context.logout"),
				label_ok: locale.text("modal.context.ok"),
				label_cancel: locale.text("modal.context.cancel"),
				label_warning: warn && locale.text("modal.context.warning"),
			};
			if (context) {
				endpoints.forEach(function(ep) {
					if (ep.application + "." + ep.contract + "." + ep.dataset === context.endpoint) {
						ep.selected = true;
					} else {
						ep.selected = false;
					}
				});
				roles.forEach(function(role) {
					if (role.code === context.role) {
						role.selected = true;
					} else {
						role.selected = false;
					}
				});
				languages.forEach(function(lang) {
					if (lang.code === context.language) {
						lang.selected = true;
					} else {
						lang.selected = false;
					}
				});
			}
			modalHtml = modalHtml(ctx);
			modal.modal(modalHtml, function(msg, dialg) {
				var endpoint = dialg.find("#login-select-endpoint").val();
				var role = dialg.find("#login-select-role").val();
				var language = dialg.find("#login-select-language").val();
				if (msg === "validate") {
					deferred.resolve({
						action: "ok",
						endpoint: endpoint,
						role: role,
						language: language
					});
				} else if (msg === "cancel") {
					deferred.resolve({
						action: "cancel",
						endpoint: endpoint,
						role: role,
						language: language
					});
				} else if (msg === "logout") {
					deferred.resolve({
						action: "logout",
					});
				}
			});
		} catch (e) {
			deferred.reject(e);
		}
	} catch (e) {
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
};

exports.show = function() {

	var modalHtml = Handlebars.compile(_template);
	var ctx = {
		title: "Development settings",

		label_device: "Device",
		label_close: "Close",
		label_ok: "Ok",

		devices: []
	};

	var site = globals.getSiteLayout();
	var devs = site.getDeviceTemplates();
	var cur = site.getCurrentOrientationSettings();

	ctx.devices.push({
		device: "<No emulation>",
		orientation: "landscape",
		description: "<No emulation>",
		selected: cur.pageParameters.forcePreview === false
	});
	for (var dev in devs) {
		devs[dev].orientations.forEach(function(o) {
			var devName = dev;
			var orientName = o;

			var opt = {
				device: dev,
				orientation: o,
				description: devName + " (" + o + ")"
			};

			if (cur.pageParameters.forcePreview) {
				if (opt.device === cur.pageParameters.device &&
					opt.orientation === cur.pageParameters.orientation) {
					opt.selected = true;
				}
			}
			ctx.devices.push(opt);
		});
	}

	modalHtml = modalHtml(ctx);
	$("body").append($(modalHtml));
	var $$page = $("#page_dev_mode");

	$("#btn_dev_ok", $$page).on("click", function() {
		var device = $$page.find("#dev-select-device").val();
		var dev = device.split(".");
		var params = {
			layout: {
				pageParameters: {}
			}
		};
		if (device === "<No emulation>.landscape") {
			params.layout.pageParameters.forcePreview = false;
			params.layout.pageParameters.forceAutoScale = false;
		} else {
			params.layout.pageParameters.device = dev[0];
			params.layout.pageParameters.orientation = dev[1];
			params.layout.pageParameters.forcePreview = true;
			params.layout.pageParameters.forceAutoScale = true;
		}
		$$page.remove();
		uiutils.triggerResizeInternal(params);
	});
	$("#btn_dev_close", $$page).on("click", function() {
		$$page.remove();
	});
};