"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var modal = require('syracuse-tablet/html/js/ui/modal');
//var locale = require('syracuse-tablet/html/js/helpers/locale');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');

var _template = '\
	<div id="page_dev_mode" style="margin: 0; width: auto; position: absolute; z-index: 9999"> \
    <div class="modal-dialog" style="margin: 0; width: auto;"> \
		<div class="modal-content" style="width: 230px;"> \
		    <div class="modal-header"> \
				<h4 class="modal-title">{{title}}</h4> \
		    </div> \
		    <div class="modal-body"> \
				<div class="form-group"> \
					<label>{{label_device}}</label>\
					<select class="form-control" id="dev-select-device"> \
					{{#each devices}}\
						<option value="{{this.device}}.{{this.orientation}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
					<span class="input-group"> \
						<input id="dev-device-scale" type="checkbox" {{#if scale}}checked{{/if}}>{{label_scale}} \
					</span> \
				</div> \
				<div class="form-group"> \
					<span class="input-group"> \
						<input id="dev-cache" type="checkbox" {{#if cache_disabled}}checked{{/if}}>{{label_cache}} \
	  				</span> \
				</div> \
			</div> \
		    <div class="modal-footer"> \
				<button type="button" class="btn" id="btn_dev_close">{{label_close}}</button> \
				<button type="button" class="btn btn-default" id="btn_dev_apply">{{label_apply}}</button> \
    			<button type="button" class="btn" id="btn_dev_ok">{{label_ok}}</button> \
			</div> \
		</div> \
	</div> \
	</div>';

var _show = function() {
	if ($("#page_dev_mode").is(":visible")) {
		return;
	}
	var modalHtml = Handlebars.compile(_template);
	var cache = globals.getCache();
	var site = globals.getSiteLayout();
	var devs = site.getDeviceTemplates();
	var cur = site.getCurrentLayoutSettings();

	var ctx = {
		title: "Development settings",

		label_device: "Device",
		devices: [],

		label_scale: "Scale if needed",
		scale: cur.pageParameters.forceAutoScale,

		label_cache: "Disable caching",

		label_close: "Cancel",
		label_ok: "Ok",
		label_apply: "Apply",

		cache_disabled: cache.isDisabled()
	};

	ctx.devices.push({
		device: "<No emulation>",
		orientation: "landscape",
		description: "<No emulation>",
		selected: cur.pageParameters.forcePreview === false
	});

	for (var dev in devs) {
		devs[dev].orientations.forEach(function(o) {
			var devName = dev;
			var orientName = o;

			var opt = {
				device: dev,
				orientation: o,
				description: devName + " (" + o + ")"
			};

			if (cur.pageParameters.forcePreview) {
				if (opt.device === cur.pageParameters.device &&
					opt.orientation === cur.pageParameters.orientation) {
					opt.selected = true;
				}
			}

			ctx.devices.push(opt);
		});
	}

	modalHtml = modalHtml(ctx);
	$("body").append($(modalHtml));
	var $$page = $("#page_dev_mode");
	$$page.draggable();

	$("#btn_dev_ok", $$page).on("click", function() {
		apply();
		$$page.remove();
	});
	$("#btn_dev_apply", $$page).on("click", function() {
		apply();
	});

	$("#btn_dev_close", $$page).on("click", function() {
		$$page.remove();
	});

	var apply = function() {
		var device = $$page.find("#dev-select-device").val();
		var dev = device.split(".");
		var params = {
			layout: {
				pageParameters: {}
			}
		};
		if (device === "<No emulation>.landscape") {
			params.layout.pageParameters.forcePreview = false;
			params.layout.pageParameters.forceAutoScale = false;
		} else {
			params.layout.pageParameters.device = dev[0];
			params.layout.pageParameters.orientation = dev[1];
			params.layout.pageParameters.forcePreview = true;

			if ($("#dev-device-scale", $$page).is(":checked") === true) {
				params.layout.pageParameters.forceAutoScale = true;
			} else {
				params.layout.pageParameters.forceAutoScale = false;
			}
		}

		cache.disableCache($("#dev-cache", $$page).is(":checked") === true);

		uiutils.triggerResizeInternal(params);
	};
};

exports.show = _show;