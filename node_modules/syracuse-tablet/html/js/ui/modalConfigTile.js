"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var modalDialog = require('syracuse-tablet/html/js/ui/modalDialog');
var iconList = require('syracuse-tablet/html/js/ui/iconList');
var HammerScroller = require('syracuse-tablet/html/js/helpers/hammerScroller').Klass;
var uiRect = require('syracuse-tablet/html/js/ui/rect');

var authoringProperties = require('syracuse-tablet/html/js/authoring/authoringProperties');

var _templateTablet = {
	header: '\
			<span class="modal-title">{{title}}</span> \
			<button type="button" class="btn btn-default s-m-modal-btn-validate pull-right" data-action="$validate"></button> \
			<button type="button" class="btn btn-default s-m-modal-btn-cancel pull-right" data-action="$cancel"></button> \
			',
	content: ' \
			<div class="s-m-scroll-wrapper s-m-scroll-wrapper-v">\
				<div class="form-group s-m-scroll-element"> \
					<label>{{lab_title}}</label> \
					<input id="tile_title" value="{{tileTitle}}"> \
					<label>{{lab_color}}</label> \
					<div class="s-m-list-colors">\
						{{#each colors}} \
							<a href="#" {{#if this.active}}class="active"{{/if}} data-action="clickColor" data-params="{{value}}">\
								<div class="s-m-bg-{{value}}"> \
								</div> \
							</a>\
						{{/each}} \
					</div> \
					<label>{{lab_size}}</label> \
					<div class="s-m-list-sizes">\
						{{#each sizes}} \
							<a href="#" {{#if this.active}}class="active"{{/if}} data-action="clickSize" data-params="{{value}}">{{label}}</a>\
						{{/each}} \
					</div> \
					<label>{{lab_icon}}</label> \
					<div class="s-m-list-icons">\
						{{#each icons}} \
							<a href="#" {{#if this.active}}class="active"{{/if}} data-action="clickIcon" data-params="{{value}}"> \
								<i class="fa {{value}}"/> \
							</a>\
						{{/each}} \
					</div> \
					<div style="width:100%; display: inline-block;"></div> \
				</div> \
			</div>',

	footer: '',
};

var _Klass = utils.defineClass(
	function ApplicationSelectionDialog(tile) {
		var self = this;
		modalDialog.ModalBase.call(self);

		// Init params
		self.tile = tile;
		// Result
		self.result = null;
	}, modalDialog.ModalBase, {
		_getTemplates: function() {
			var self = this;
			return {
				std: _templateTablet,
				// tablet: "alternative 1",
				// smartphone:"alternative 2",
			};
		},
		getDisplayFlags: function() {
			var self = this;
			var displayFlags = self.displayFlags || {};
			if (self.deviceType === "tablet") {
				displayFlags.modalClass = "config-tile half_right";
			} else {
				displayFlags.modalClass = "config-tile full";
			}
			return displayFlags;
		},

		_getDataContext: function() {
			var self = this;
			authoringProperties.initProperties();

			var properties = authoringProperties.getAllProperties();
			var data = {
				label_validate: locale.text("welcome.tile.cfg.ok"),
				label_cancel: locale.text("welcome.tile.cfg.cancel"),
				title: locale.text("welcome.tile.cfg.title"),

				lab_title: locale.text("welcome.tile.cfg.lab_title"),
				lab_color: locale.text("welcome.tile.cfg.lab_color"),
				lab_size: locale.text("welcome.tile.cfg.lab_size"),
				lab_icon: locale.text("welcome.tile.cfg.lab_icon")
			};

			data.colors = properties.tileColor.values.map(function(e) {
				return {
					active: self.tile.color === e.value,
					value: e.value,
					label: e.label
				};
			});
			data.colors.shift(); // First one is transparent which we do not want here

			data.sizes = properties.tileSize.values.map(function(e) {
				return {
					active: self.tile.size === e.value,
					value: e.value,
					label: e.label
				};
			});

			data.icons = iconList.fontAwesomeIconNames.map(function(e) {
				return {
					active: ("fa-" + self.tile.icon) === e,
					value: e,
					label: e
				};
			});

			data.tileTitle = self.tile.title;
			return data;
		},

		_onShow: function() {
			var self = this;
			modalDialog.ModalBase.prototype._onShow.call(self);
			self._initScrollers();
		},

		/*
		 *
		 */
		_initScrollers: function() {
			var self = this;

			var $$scrolls = self.$$elmt.find(".s-m-scroll-element");
			var i;
			var scrollerId = 1;
			var scrollers = {};

			for (i = 0; i < $$scrolls.length; i++) {
				scrollerId++;

				var $$se = $($$scrolls[i]);
				var $$wrapper = $$se.parent();
				var dir = $$wrapper.hasClass("s-m-scroll-wrapper-h") ? "h" : "v";

				$$wrapper.attr("data-scroller-id", scrollerId);

				var parentScroller = null;
				var $$parentScroller = $$wrapper.parent().closest(".s-m-scroll-wrapper");
				if ($$parentScroller.length > 0) {
					parentScroller = scrollers[$$parentScroller.attr("data-scroller-id")];
				}

				var css = {};
				css["overflow-" + dir] = "auto";
				$$wrapper.css(css);

				var gestureMgr = new HammerScroller($$se, {
					direction: dir,
					valMax: 0,
					name: "MODAL" + scrollerId,
					isPageScroller: false
				}, parentScroller);

				scrollers[scrollerId] = gestureMgr;

				var scrollRect = uiRect.elmtRect($$se, "outer");
				var wrapperRect = uiRect.elmtRect($$wrapper, "outer");
				var viewRect = wrapperRect.intersectRect(scrollRect);
				if (viewRect && !viewRect.contains(scrollRect)) {
					gestureMgr.init(viewRect);
				} else {
					gestureMgr.reset();
				}
			}
		},

		// could be removed, result is set in _onAction
		_onValidate: function() {
			var self = this;
			var $$selected = self.$$elmt.find('a.active');
			var i;

			var tile = $.extend(true, {}, self.tile);

			tile.title = self.$$elmt.find("#tile_title").val();

			for (i = 0; i < $$selected.length; i++) {
				var action = $($$selected[i]).attr("data-action");
				var param = $($$selected[i]).attr("data-params");
				switch (action) {
					case "clickColor":
						tile.color = param;
						break;
					case "clickSize":
						tile.size = param;
						break;
					case "clickIcon":
						tile.icon = param.substring(3); // remove fa-
						break;
				}
			}

			self.result = tile;
		},
		_onCancel: function() {
			var self = this;
			self.result = null;
		},

		_onAction: function(action, param) {
			var self = this;
			switch (action) {
				case "clickColor":
				case "clickSize":
				case "clickIcon":
					var $$old = self.$$elmt.find('a.active[data-action="' + action + '"]');
					var $$new = self.$$elmt.find('a[data-action="' + action + '"][data-params="' + param + '"]');
					$$old.removeClass("active");
					$$new.addClass("active");
					break;
			}
			// dont close on actions
			return false;
		},

		_getResult: function() {
			var self = this;
			return self.result;
		}
	}
);

exports.Modal = _Klass;