"use strict";

var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

// Separated module for showing diagnoses since it may be replaced depending on device/OS
var modalDiag = require('syracuse-tablet/html/js/ui/modalDiagnoses');

var _checkMsg = function(msg) {
	return msg ? msg.replace(/\n/g, "<br>") : "";
};
var _templates = {
	confirm: ' \
		<div class="modal fade" id="modal-confirm" tabindex="-1" role="dialog"> \
			<div class="modal-dialog s-m-modal-layout">\
				<header>\
					<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&#215;</button> \
				</header>\
				<section>\
					<div class="s-m-modal-content row">\
						<div class="col-md-4"></div>\
						<div class="col-md-4">\
							<header>{{title}}</header>\
							<section>{{message}}</section>\
							<footer>\
								<button type="button" class="btn btn-default" data-action="yes">{{yes}}</button> \
				                <button type="button" class="btn btn-default" data-action="no">{{no}}</button> \
							</footer>\
						</div>\
					<div class="col-md-4"></div>\
				</div>\
				</section>\
			</div> \
		</div>',
	error: ' \
		<div class="modal fade" id="modal-error" tabindex="-1" role="dialog"> \
			<div class="modal-dialog s-m-modal-layout">\
				<header>\
					<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&#215;</button> \
				</header>\
				<section>\
					<div class="s-m-modal-content row">\
						<div class="col-md-4"></div>\
						<div class="col-md-4">\
							<header class="error">{{title}}</header>\
							<section>{{body}}</section>\
							<footer><button type="button" class="btn btn-default" data-dismiss="modal">{{close}}</button></footer>\
						</div>\
						<div class="col-md-4"></div>\
					</div>\
				</section>\
			</div> \
		</div>',
	info: '\
		<div class="modal fade" id="modal-info" tabindex="-1" role="dialog"> \
		    <div class="modal-dialog s-m-modal-layout">\
		    	<header>\
		    		<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&#215;</button> \
		    	</header>\
		    	<section>\
		    		<div class="s-m-modal-content row">\
			    		<div class="col-md-4"></div>\
			    		<div class="col-md-4">\
			    			<header class="info">{{title}}</header>\
			    			<section>{{body}}</section>\
			    			<footer><button type="button" class="btn btn-default" data-dismiss="modal">{{close}}</button></footer>\
			    		</div>\
			    		<div class="col-md-4"></div>\
		    		</div>\
		    	</section>\
			</div> \
		</div>',
	field: '\
		<div class="modal fade" id="modal-field" tabindex="-1" role="dialog"> \
		    <div class="modal-dialog"> \
				<div class="modal-content"> \
				    <div class="modal-header"> \
						<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&#215;</button> \
						<h4 class="modal-title" id="myModalLabel">{{title}}</h4> \
				    </div> \
				    <div class="modal-body"> \
				       {{{body}}} \
				    </div> \
				    <div class="modal-footer"> \
				        <button type="button" class="btn btn-default" data-dismiss="modal">{{close}}</button> \
					</div> \
				</div> \
			</div> \
		</div>',
	actionMessage: '\
		<div class="s-m-act-msg {{severityClass}} {{deviceType}}">\
			<a draggable="false" href="#"><span class="glyphicon glyphicon-remove"></span></a>\
			<header>\
				<div>{{title}}</div>\
			</header>\
			<section>\
				<article>{{message}}</article>\
			</section>\
			<footer></footer>\
		</div>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/* First param : cb - Second msg - Third data ...*/
var _execCb = function(cb, msg, data) {
	if (!cb || arguments.length == 0) return;
	var cb = arguments[0];
	var args = Array.prototype.slice.call(arguments, 1);
	cb.apply(null, args);
};


/************************************************************************
 ** IMPORTANT
 * The code of the callback parameter in the exported methods :
 * error(), info(), diagnoses(), field(), confirm(), simpleconfirm(), modal()
 * has to indicate whether the callback is called :
 * - when the modal opens
 * - when the modal closes
 * - at both events
 *
 * Here is an example :
 * function (modalEvent, $$modalElmt) {
 *        // build content on open
 *       if (modalEvent == 'shown.bs.modal') {
 *           // code which is run on modal opening
 *       }
 *
 *       // run actions on close 'hidden.bs.modal'
 *       else {
 *       	// code which is run on modal closing
 *       }
 * });
 *************************************************************************/



/*
 * Examples
 * 
 * error("There was an error");
 * 
 * error("There was an error", "I am the detail text");
 *
 * error("There was an error", new Error("I am an exception"));
 * 
 * error("There was an error", {
 *   $diagnoses: [{
 *	   $message: "Message 1",
 *     $severity: "error",
 *     $stackTrace: "bla"
 *	 }, {
 * 	   $message: "Message 2",
 *	   $severity: "info",
 * 	   $stackTrace: "bla"
 *   }]
 * });
 * 
 * error("There was an error", {
 *   message: "I am the message", 
 *   detail: "I am the detail message"
 * });

 * error("There was an error", {
 *   message: "I am the message", 
 *   detail: new Error("I am an exception")
 * });
 * 
 */
var _error = function(title, e, cb) {
	var diag;
	diag = jsutils.convertToDiagnoses(title, e);
	return _diagnoses(title, diag, cb);
};

/*
 * title. Title of dialog
 * diag: Object containing diagnoses
 *       {
 *           $diagnoses: [{
 *               $message: "bla...",
 *               $severity: "error", // success, info, warning, error
 *               $stackTrace: "Stacktrace as string, formatted"
 *           }, {
 *               ...
 *           }]
 *       }
 * cb: Callback
 */
var _diagnoses = function(title, diag, cb) {
	return modalDiag.show(title, diag, cb);
};

/* 
 * Wrap info text into diagnoses and display it in the generic diagnoses dialog
 */
var _info = function(title, text, cb) {
	return modalDiag.show(title, {
		$diagnoses: [{
			$severity: "info",
			$message: text
		}]
	}, cb);

};

var _confirm = function(action, cb) {
	return _modalStatic("confirm", {
		title: locale.text("modal.confirm.ttl"),
		message: _checkMsg(locale.text("modal.confirm.msg", [action])),
		yes: locale.text("yes"),
		no: locale.text("no")
	}, function(message, modal, params) {
		if (cb && (message === "yes" || message === "no")) {
			_execCb(cb, "yes" === message);
		}
	});
};

var _simpleConfirm = function(message, cb) {
	return _modalStatic("confirm", {
		message: _checkMsg(message),
		yes: locale.text("yes"),
		no: locale.text("no")
	}, function(message, modal, params) {
		if (cb && (message === "yes" || message === "no")) {
			_execCb(cb, "yes" === message);
		}
	});
};

/*
 * Open a modal window linked to a field
 */
var _field = function(title, domBody, cb) {
	return _modalStatic("field", {
		close: locale.text("modal.btn.close"),
		title: title || "Warning",
		body: domBody
	}, cb);
};

var _actionResult = function(title, obj) {
	var msg = [];
	var success = true;
	var stack = false;
	var text = "";

	obj.$diagnoses.forEach(function(diag) {
		text = (text ? text + "\n" : "") + diag.$message;
		if (["success", "info", "warning"].indexOf(diag.$severity) < 0) {
			success = false;
		}
		if (diag.$stackTrace) {
			stack = true;
		}
	});

	if (success || stack === false) {
		var isTablet = $(window).width() > 480;
		var deviceType = isTablet ? "tablet" : "phone";
		var $$actMsgSlot = $(".s-m-act-msg-slot");
		if ($$actMsgSlot.length == 0) {
			$$actMsgSlot = $("<div>").addClass("s-m-act-msg-slot").addClass(deviceType);
			(isTablet ? $("#s-m-app-id") : $("section.s-m-main-content")).prepend($$actMsgSlot);
		}

		var options = {
			title: title,
			body: text,
			severityClass: success ? "success" : "error",
			deviceType: deviceType,
			$$parentSlot: $$actMsgSlot
		};
		_actionHandler(options);
	} else {
		_diagnoses(title, obj);
	}
};

/* options properties are :
- severityClass : css class depending on severity
- deviceType : css class used in the template
- title : title text value used in the template
- text : body text value used in the template
- $$parentSlot : parent to which modal is appended, depends on device type
*/
var _actionHandler = function(options) {

	// create html
	var h = _getHtml("actionMessage", {
		title: options.title,
		message: options.body,
		severityClass: options.severityClass,
		deviceType: options.deviceType
	});

	var isClosing;
	// append to app according to device type
	var $$actionModal = $(h);
	options.$$parentSlot.prepend($$actionModal);

	// show parentSlot
	options.$$parentSlot.show();

	// close anchor
	var $$closer = $$actionModal.find("a");

	function toggle() {
		$$actionModal.toggleClass("show");
	}

	function clear() {
		toggle();
		// set timeout in order to have css animation visible before removing DOM
		setTimeout(function() {
			$$actionModal.remove();

			// hide parent slot if last item removed
			if (options.$$parentSlot.children().length == 0) {
				options.$$parentSlot.hide();
			}
		}, 500);
	};

	// bind click action on closer button. triggers close action
	$$closer.bind("click", function() {
		clear();
		isClosing = true;
	});

	// display
	// setTimeout is necessary to have the display css animation working
	setTimeout(function() {
		toggle();
	}, 50);

	// toggle after 5 seconds
	var toggleTimeout = setTimeout(function() {
		if (!isClosing) {
			clear();
		}
	}, 5000);
};



/*
 * cb (message, modal, params)
 *    message: bootstrap message or clicked action (data-action)
 *    params: data-params
 */

var _modalStatic = function(id, context, cb) {
	/* Always to retry read template and display alert if not found */
	var h = _getHtml(id, context);
	return _modal(h, cb);
};


var _modal = function(html, cb) {
	// Disable wait wheel if any
	uiutils.waitWheelStop();
	var app = globals.getApplication();
	if (app && app.currentPage) {
		app.currentPage.waitWheelStop();
	}
	/* Always to retry read template and display alert if not found */
	var h = $(html).modal({
		keyboard: false,
		backdrop: "static"
	});
	var viewportHeight = $(window).height();
	$('.modal-body', h).css('max-height', viewportHeight * 0.7);

	var done = false;
	// Use <button data-dismiss"modal" for close action
	// Use <button data-action"myaction" for action other than
	// close
	h.on("shown.bs.modal", function() {
		try {
			_execCb(cb, "shown.bs.modal", h);
		} catch (e) {
			alert("Modal open - call back error" + e.stack);
		}
		notifications.publish("sm.modal.open");
	});
	h.on("hidden.bs.modal", function() {
		// Call cb only if no click action
		if (!done && cb) {
			try {
				_execCb(cb, "hidden.bs.modal", h);
			} catch (e) {
				alert("Modal close - call back error" + e.stack);
			}
		}
		// Called when dialog is close - data-dismiss = "modal"
		// or m.modal('hide')
		h.unbind();
		h.remove();
		notifications.publish("sm.modal.close");
	});
	// For dialogs with option
	h.delegate("button[data-action]", "click", function(evt) {
		var t = $(evt.target);
		var act = t.attr("data-action");
		if (act) {
			done = true;
			evt.preventDefault();
			evt.stopPropagation();
			_execCb(cb, act, h, t.attr("data-params"));
		}
		// Close modal
		h.modal('hide');
	});
	return h;
};

exports.error = _error;
exports.info = _info;
exports.diagnoses = _diagnoses;
exports.field = _field;
exports.confirm = _confirm;
exports.simpleConfirm = _simpleConfirm;
exports.modal = _modal;
exports.actionResult = _actionResult;