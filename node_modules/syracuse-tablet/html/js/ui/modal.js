"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ui");

var _templates = {
	confirm: ' \
		<div class="modal fade" id="modal-confirm" tabindex="-1" role="dialog" aria-labelledby="basicModal" aria-hidden="true"> \
		    <div class="modal-dialog"> \
		        <div class="modal-content"> \
		            <div class="modal-header"> \
		            <h4 class="modal-title" id="myModalLabel">{{title}}</h4> \
		            </div> \
		            <div class="modal-body"> \
		            <div class="alert alert-warning" role="alert">{{message}}</div> \
		            </div> \
		            <div class="modal-footer"> \
		                <button type="button" class="btn btn-default" data-action="yes">{{yes}}</button> \
		                <button type="button" class="btn btn-default" data-action="no">{{no}}</button> \
		        </div> \
		    </div> \
		  </div> \
		</div>',
	error: ' \
		<div class="modal fade" id="modal-error" tabindex="-1" role="dialog"> \
		    <div class="modal-dialog"> \
				<div class="modal-content"> \
				    <div class="modal-header"> \
						<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&#215;</button> \
				    	<h4 class="modal-title" id="myModalLabel">{{title}}</h4> \
				    </div> \
				    <div class="modal-body"> \
				        <pre>{{body}}</pre> \
				    </div> \
				    <div class="modal-footer"> \
				        <button type="button" class="btn btn-default" data-dismiss="modal">{{close}}</button> \
					</div> \
				</div> \
			</div> \
		</div>',
	info: '\
		<div class="modal fade" id="modal-info" tabindex="-1" role="dialog"> \
		    <div class="modal-dialog"> \
				<div class="modal-content"> \
				    <div class="modal-header"> \
						<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&#215;</button> \
						<h4 class="modal-title" id="myModalLabel">{{title}}</h4> \
				    </div> \
				    <div class="modal-body"> \
				       <h3>{{body}}</h3> \
				    </div> \
				    <div class="modal-footer"> \
				        <button type="button" class="btn btn-default" data-dismiss="modal">{{close}}</button> \
					</div> \
				</div> \
			</div> \
		</div>',
	field: '\
		<div class="modal fade" id="modal-field" tabindex="-1" role="dialog"> \
		    <div class="modal-dialog"> \
				<div class="modal-content"> \
				    <div class="modal-header"> \
						<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&#215;</button> \
						<h4 class="modal-title" id="myModalLabel">{{title}}</h4> \
				    </div> \
				    <div class="modal-body"> \
				       {{{body}}} \
				    </div> \
				    <div class="modal-footer"> \
				        <button type="button" class="btn btn-default" data-dismiss="modal">{{close}}</button> \
					</div> \
				</div> \
			</div> \
		</div>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/* First param : cb - Second msg - Third data ...*/
var _execCb = function(cb, msg, data) {
	if (!cb || arguments.length == 0) return;
	try {
		var cb = arguments[0];
		var args = Array.prototype.slice.call(arguments, 1);
		cb.apply(null, args);
	} catch (e) {
		utils.alertError("Error calling modal callback", e);
	}
};

var _error = function(title, e, cb) {
	if (utils.isError(e)) {
		e = utils.toDiagnose({
			where: title,
			exception: e
		});
	} else if (typeof e === "string") {
		e = utils.toDiagnose({
			where: title,
			message: e
		});
	} else {
		e = utils.toDiagnose(e);
	}
	var body = JSON.stringify(e, null, 2).replace(/\\n/g, '\n');
	log && log("exports.displayError", body);
	return _modal("error", {
		close: locale.text("modal.btn.close"),
		title: locale.text("modal.error.ttl"),
		body: body
	}, cb);
};

var _info = function(title, text, cb) {
	return _modal("info", {
		close: locale.text("modal.btn.close"),
		title: title || "Warning",
		body: text
	}, cb);
};

var _confirm = function(action, cb) {
	return _modal("confirm", {
		title: locale.text("modal.confirm.ttl"),
		message: locale.text("modal.confirm.msg", [action]),
		yes: locale.text("yes"),
		no: locale.text("no")
	}, function(message, modal, params) {
		if (cb && (message === "yes" || message === "no")) {
			_execCb(cb, "yes" === message);
		}
	});
};
/*
 * cb (message, modal, params)
 *    message: bootstrap message or clicked action (data-action)
 *    params: data-params
 */

var _modal = function(id, context, cb) {
	// Disable wait wheel if any
	uiutils.waitWheelStop();
	/* Always to retry read template and display alert if not found */
	var h = $(_getHtml(id, context)).modal({
		keyboard: true,
		backdrop: "static"
	});
	var done = false;
	// Use <button data-dismiss"modal" for close action
	// Use <button data-action"myaction" for action other than
	// close
	h.on("shown.bs.modal", function() {
		_execCb(cb, "shown.bs.modal", h);
	});
	h.on("hidden.bs.modal", function() {
		// Called when dialog is close - data-dismiss = "modal"
		// or m.modal('hide')
		h.unbind();
		h.remove();
		// Call cb only if no click action
		if (!done && cb) _execCb(cb, "hidden.bs.modal", h);
	});
	// For dialogs with option
	h.delegate("button[data-action]", "click", function(evt) {
		var t = $(evt.target);
		var act = t.attr("data-action");
		if (act) {
			done = true;
			evt.preventDefault();
			evt.stopPropagation();
			_execCb(cb, act, h, t.attr("data-params"));
		}
		// Close modal
		h.modal('hide');
	});
	return h;
};

var _field = function(title, domBody, cb, fieldId) {
	return _modal("field", {
		close: locale.text("modal.btn.close"),
		title: title || "Warning",
		body: domBody,
		fieldId: fieldId
	}, cb);
};

exports.error = _error;
exports.info = _info;
exports.field = _field;
exports.confirm = _confirm;