"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/pages/pageRegular').Page;
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var sessStorage = require('syracuse-tablet/html/js/storage/sessionStorage');
var ctrlCubeChart = require('syracuse-tablet/html/js/controls/chart/ctrlCubeChart');


/**
 * Child page that displays chart detail
 */
var _Page = utils.defineClass(
	// Name ChartDetailPage used for instanceof
	function ChartDetailPage($parent, state, prototype, article, parentPage, options) {
		// For parent page to create the container
		options.topToolbar = true;
		if (!article.$display) article.$display = "bothSideToSide";
		this.parentPage = parentPage;
		if (!this.parentPage) throw new Error("chartdetail page - Unexpected empty parent page");
		Base.call(this, $parent, state, prototype, article, options);
		// Since this page is just a full screen copy of the parent, we clone the sdata-url
		// Otherwise, the request level will be lost in the sdata url query parameter "representation"
		this._originalSdataUrl = this.parentPage._originalSdataUrl;
		this._initSdataInfo();
	}, Base, {


		destroy: function() {
			Base.prototype.destroy.call(this);
			this.parentPage = null;
			this._notifData = null;
		},
		/**
		 * Create the toolbar
		 */
		createPageControl: function(id) {
			if (id === "topToolbar") {
				return globals.isAuthoringActive() ? null : ctrlFactory.createPageControl("topToolbarChartDetail", this);
			}
			return ctrlFactory.createPageControl(id, this);
		},
		buildHtmlOption: function(loadOptions) {
			return Base.prototype.buildHtmlOption.call(this, loadOptions).then(function(opts) {
				opts.toolBars.showAuthoring = true;
				opts.toolBars.showUserMenuLinks = true;
				opts.toolBars.showHome = true;
				opts.toolBars.showActions = false;
				opts.toolBars.statusPinPage = false;
				return opts;
			});
		},
		afterRender: function(buildOpts) {
			Base.prototype.afterRender.call(this, buildOpts);
			// In authoring we skip user prefs
			var display = null;
			if (globals.isAuthoringActive() || (buildOpts && buildOpts.authoringUpdate === true)) return;
			// authoringUpdate !== true (page loading) to prevent loops
			var prefs = this.getUserPrefs();
			if (prefs) {
				// Force user prefs
				display = prefs.display;
			}
			this.setDisplay(prefs.display);
		},
		/**
		 * Return data for parent
		 */
		getParentNotif: function() {
			if (this._notifData) {
				return {
					parentId: this.state.options.parentId,
					controlId: this.state.options.controlId,
					notifId: "sm.updt.chart.article",
					notifData: this._notifData
				};
			}
			return null;
		},
		scrollAllowed: function() {
			return true;
		},

		getChart: function() {
			return this._findCtrl("CtrlCubeChart");
		},
		getArray: function() {
			return this._findCtrl("CtrlArray");
		},
		_findCtrl: function(instance) {
			var self = this;
			var res = null;
			if (!self["_" + instance]) {
				this.forEachControl(function(id, ctrl) {
					if (jsutils.isInstanceOf(ctrl, instance)) {
						self["_" + instance] = ctrl;
						return true;
					}
				});

			}
			return self["_" + instance];
		},
		toolbarWrite: function(type, info, refresh) {
			sessStorage.setItem(this._getId(type), info ? JSON.stringify(info) : null);
		},
		toolbarRead: function(type) {
			var info = sessStorage.getItem(this._getId(type));
			if (!info) return null;
			try {
				info = JSON.parse(info);
				return info;
			} catch (e) {};
			return null;
		},
		_getId: function(type) {
			return this._originalSdataUrl + this.getChart().$bind + "#" + type;
		},
		_actSaveChartDetail: function() {
			this._notifData = {};
			this._notifData.article = $.extend(true, {}, this.article);
			globals.getApplication().goBack();
		},
		authUpdateLayout: function(article, vignetteToUpdt) {
			var self = this;
			var oldDisplay = this.article.$display;
			return Base.prototype.authUpdateLayout.call(this, article).then(function() {
				if (globals.isAuthoringActive()) {
					self.setDisplay(article.$display);
				}
			});
		},
		setDisplay: function(display, save) {
			display = display || "bothSideToSide";
			if (this._display != null && this._display == display) {
				return;
			}
			var chart = this.getChart();
			var array = this.getArray();
			if (!chart || !array) return;
			this._display = display;
			// Create structure article (chart) by using the article of the controls to preserve authoring 
			var article = ctrlCubeChart.getChartDetailArticle(display, chart.$bind, chart ? chart.article : null, array ? array.article : null);
			// Copy the properties specific to the page article - e.g $display..
			for (var p in this.article) {
				if (p != "$layoutType" && p != "$items") {
					article[p] = this.article[p];
				}
			}
			// Update layout
			this.authUpdateLayout(article);
			if (save == true) {
				// Save prefs
				var prefs = this.getUserPrefs();
				prefs.display = display;
				this.toolbarWrite("toolbar", prefs);
			}
		},
		getUserPrefs: function() {
			return this.toolbarRead("toolbar", this) || {};
		}

	});

exports.Page = _Page;