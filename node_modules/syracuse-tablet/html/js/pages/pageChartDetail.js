"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/pages/pageRegular').Page;
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var sessStorage = require('syracuse-tablet/html/js/storage/sessionStorage');

/**
 * Child page that displays chart detail
 */
var _Page = utils.defineClass(
	// Name ChartDetailPage used for instanceof
	function ChartDetailPage($parent, state, prototype, article, parentPage, options) {
		options.topToolbar = true;
		this.parentPage = parentPage;
		if (!this.parentPage) throw new Error("chartdetail page - Unexpected empty parent page");
		Base.call(this, $parent, state, prototype, article, options);
		// Since this page is just a full screen copy of the parent, we clone the sdata-url
		// Otherwise, the request level will be lost in the sdata url query parameter "representation"
		this._originalSdataUrl = this.parentPage._originalSdataUrl;
		this._initSdataInfo();
	}, Base, {


		destroy: function() {
			Base.prototype.destroy.call(this);
			this.parentPage = null;
		},

		/**
		 * Create the toolbar
		 */
		createPageControl: function(id) {
			if (id === "topToolbar") {
				return ctrlFactory.createPageControl("topToolbarChartDetail", this);
			}
			return ctrlFactory.createPageControl(id, this);
		},

		buildHtmlOption: function(loadOptions) {
			return Base.prototype.buildHtmlOption.call(this, loadOptions).then(function(opts) {
				opts.toolBars.showAuthoring = true;
				opts.toolBars.showUserMenuLinks = true;
				opts.toolBars.showHome = true;
				opts.toolBars.showActions = false;
				opts.toolBars.statusPinPage = false;
				return opts;
			});
		},
		afterRender: function(buildOpts) {
			// Apply meta after build html - !! Called aftrt buildHtml if isHtmlGenerator = true
			Base.prototype.afterRender.call(this, buildOpts);
			if (this._pageTopToolbar) {
				this._pageTopToolbar.setToolbarStat();
			}
		},
		/**
		 * Return data for parent
		 */
		getParentNotif: function() {
			return null;
		},
		scrollAllowed: function() {
			return true;
		},

		getChart: function() {
			return this._findCtrl("CtrlCubeChart");
		},
		getArray: function() {
			return this._findCtrl("CtrlArray");
		},
		_findCtrl: function(instance) {
			var self = this;
			var res = null;
			if (!self["_" + instance]) {
				this.forEachControl(function(id, ctrl) {
					if (jsutils.isInstanceOf(ctrl, instance)) {
						self["_" + instance] = ctrl;
						return true;
					}
				});

			}
			return self["_" + instance];
		},
		toolbarWrite: function(type, info, ctrl, refresh) {
			var id = this._getId(type);
			sessStorage.setItem(id, info ? JSON.stringify(info) : null);
		},
		toolbarRead: function(type, ctrl) {
			var id = this._getId(type);
			var info = sessStorage.getItem(id);
			if (info) {
				try {
					info = JSON.parse(info);
					return info;
				} catch (e) {}
			}
			return null;
		},
		_getId: function(type) {
			return this._originalSdataUrl + this.getChart().$bind + "#" + type;
		}
	});

exports.Page = _Page;