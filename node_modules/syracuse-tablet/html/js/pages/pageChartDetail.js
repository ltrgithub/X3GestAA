"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/pages/pageRegular').Page;
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var sessStorage = require('syracuse-tablet/html/js/storage/sessionStorage');
var ctrlCubeChart = require('syracuse-tablet/html/js/controls/chart/ctrlCubeChart');


/**
 * Child page that displays chart detail
 */
var _Page = utils.defineClass(
	// Name ChartDetailPage used for instanceof
	function ChartDetailPage($parent, state, prototype, article, parentPage, options) {
		if (globals.isAuthoringActive()) {
			options.header = false;
			options.footer = false;
			options.breadcrumbs = false;
		}
		// For parent page to create the container
		options.topToolbar = true;
		this.isChartDetailPage = true;
		if (!article.$display) article.$display = "bothSideToSide";
		this.parentPage = parentPage;
		if (!this.parentPage) throw new Error("chartdetail page - Unexpected empty parent page");
		Base.call(this, $parent, state, prototype, article, options);
		// Since this page is just a full screen copy of the parent, we clone the sdata-url
		// Otherwise, the request level will be lost in the sdata url query parameter "representation"
		this._originalSdataUrl = this.parentPage._originalSdataUrl;
		this._initSdataInfo();
	}, Base, {


		destroy: function() {
			if (this.destoyed) return;
			Base.prototype.destroy.call(this);
			this.parentPage = null;
			this._notifData = null;
		},
		/**
		 * Create the toolbar
		 */
		createPageControl: function(id) {
			if (id === "topToolbar") {
				return globals.isAuthoringActive() ? null : ctrlFactory.createPageControl("topToolbarChartDetail", this);
			}
			return ctrlFactory.createPageControl(id, this);
		},
		buildHtmlOption: function(loadOptions) {
			return Base.prototype.buildHtmlOption.call(this, loadOptions).then(function(opts) {
				opts.toolBars.showAuthoring = true;
				opts.toolBars.showUserMenuLinks = true;
				opts.toolBars.showHome = true;
				opts.toolBars.showActions = false;
				opts.toolBars.statusPinPage = false;
				return opts;
			});
		},
		afterRender: function(buildOpts) {
			/**
			 * Avoid display of _$$breadcrumbs/_$$topToolbar before the entire page is displayed
			 */
			if (this._$$breadcrumbs) {
				this._$$breadcrumbs.hide();
			}
			if (this._$$topToolbar) {
				this._$$topToolbar.hide();
			}
			Base.prototype.afterRender.call(this, buildOpts);
			// In authoring we skip user prefs
			var display = null;
			if (globals.isAuthoringActive() || (buildOpts && buildOpts.authoringUpdate === true)) return;
			// authoringUpdate !== true (page loading) to prevent loops
			var prefs = this.getUserPrefs();
			if (prefs) {
				// Force user prefs
				display = prefs.display;
			}
			this.setDisplay({
				display: prefs.display,
				style: prefs.style
			});
		},
		/**
		 * Return data for parent
		 */
		getParentNotif: function() {
			if (this._notifData) {
				return {
					parentId: this.state.options.parentId,
					controlId: this.state.options.controlId,
					notifId: "sm.updt.chart.article",
					notifData: this._notifData
				};
			} else if (this.parentPage.isVignette) {
				/**
				 * #6843
				 * Multiple charts in dashboards
				 * If we click on a chart detail before all the charts have been loaded the size of the charts could be wrong
				 * --> because chart in dashboard could be rendered while the chartDetail page is loading
				 * So when the chartDetail is closed it publishes this notification to allow the charts in parent's dashboard to check the height
				 */
				return {
					// no parentId is provided because we want to notify all the nested pages in the dashboard
					notifId: "sm.updt.chart.dashboard",
					notifData: this.state.options.parentId
				};
			}
			return null;
		},
		scrollAllowed: function() {
			return true;
		},

		getChart: function() {
			return this._findCtrl("CtrlCubeChart");
		},
		getArray: function() {
			return this._findCtrl("CtrlArray");
		},
		_findCtrl: function(instance) {
			var self = this;
			var res = null;
			this.forEachControl(function(id, ctrl) {
				if (jsutils.isInstanceOf(ctrl, instance)) {
					self["_" + instance] = ctrl;
					return true;
				}
			});
			return self["_" + instance];
		},
		toolbarWrite: function(type, info, refresh) {
			sessStorage.setItem(this._getId(type), info ? JSON.stringify(info) : null);
		},
		toolbarRead: function(type) {
			var info = sessStorage.getItem(this._getId(type));
			if (!info) return null;
			try {
				info = JSON.parse(info);
				return info;
			} catch (e) {};
			return null;
		},
		_getId: function(type) {
			return this._originalSdataUrl + this.getChart().$bind + "#" + type;
		},
		_actSaveChartDetail: function() {
			this._notifData = {};
			this._notifData.article = $.extend(true, {}, this.article);
			globals.getApplication().goBack();
		},
		authUpdateLayout: function(article, vignetteToUpdt) {
			var self = this;
			var oldDisplay = this.article.$display;
			return Base.prototype.authUpdateLayout.call(this, article).then(function() {
				if (globals.isAuthoringActive()) {
					self.setDisplay({
						display: article.$display,
						style: article.$style
					});
				}
				/**
				 * Avoid display of _$$breadcrumbs/_$$topToolbar before the entire page is displayed
				 */
				setTimeout(function() {
					if (this._$$breadcrumbs) {
						self._$$breadcrumbs.show();
					}
					if (this._$$topToolbar) {
						self._$$topToolbar.show();
					}
				});
			});
		},
		setDisplay: function(opt, save) {
			opt.display = opt.display || this._display || "bothSideToSide";
			opt.style = opt.style || this._style || "bar";
			if (this._display != null && this._display == opt.display && this._style != null && this._style == opt.style) {
				return;
			}
			var chart = this.getChart();
			var array = this.getArray();
			if (!chart || !array) return;
			this._display = opt.display;
			this._style = opt.style;
			// Create structure article (chart) by using the article of the controls to preserve authoring 
			var article = ctrlCubeChart.getChartDetailArticle(opt, chart.$bind, chart ? chart.article : null, array ? array.article : null);
			// Copy the properties specific to the page article - e.g $display..
			for (var p in this.article) {
				if (p != "$layoutType" && p != "$items") {
					article[p] = this.article[p];
				}
			}
			// Update layout
			this.authUpdateLayout(article);
			if (save == true) {
				// Save prefs
				var prefs = this.getUserPrefs();
				prefs.display = opt.display;
				prefs.style = opt.style;
				this.toolbarWrite("toolbar", prefs);
			}
		},
		getUserPrefs: function() {
			return this.toolbarRead("toolbar", this) || {};
		}

	});

exports.Page = _Page;