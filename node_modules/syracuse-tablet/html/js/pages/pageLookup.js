"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/pages/pageRegular').Page;
var eventListener = require('syracuse-tablet/html/js/application/eventListener');

var _noDataHtml = '	<br><br><br>\
					<h3 class="alert alert-info" style= "text-align:center" role="alert">\
					No data\
					</h3>\
					<br>\
					<div  style= "font-size:xx-large;text-align:center">\
					<a draggable="false" href="#" data-action="lookupBack" class="fa fa fa-arrow-circle-o-left" style="display: inline-block;"/>\
					</div>';
/**
 * Lookup page that handles selection
 * TODO - eventually if we have to merge wit regular page later
 */
var _Page = utils.defineClass(
	function($parent, state, prototype, article, options) {
		options.footer = false;
		Base.call(this, $parent, state, prototype, article, options);
		this.selectedRowJson = null;
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
			this.selectedRowJson = null;
		},
		/**
		 * sm-select-row notification event - Do not call super (Page) because we just need to store the rowDao and close the page
		 * Data selected will be passed to parent page by pageLoader via standard parent notification process - getParentNotif
		 */
		notifSelectRow: function(arrayId, rowId, data) {
			if (!data) return;
			// Clone JSON because array dao is destroyed with the page
			this.selectedRowJson = data;
			this._actLookupBack();
		},
		afterRender: function(updateLayout, buildOpts) {
			Base.prototype.afterRender.call(this, updateLayout, buildOpts);
			// Check if array is empty
			var c;
			for (var p in this.controlsMap) {
				c = this.controlsMap[p];
				if (c && c.$type === "application/x-array") break;
				c = null;
			}
			if (c && c.isEmpty == true) {
				this.$$elmt.html(_noDataHtml);
			}
		},
		/**
		 * getParentNotif method is called by pageLoader to notify parent page
		 */
		getParentNotif: function() {
			if (!this.selectedRowJson) return null;
			return {
				parentId: this.state.options.parentId,
				controlId: this.state.options.controlId,
				notifId: "sm.lookup.selection",
				notifData: this.selectedRowJson
			};
		},
		_actLookupBack: function() {
			if (this.isVignette) {
				eventListener.triggerAction(this.$$elmt, "vignetteBack");
			} else {
				this.goBack();
			}
		}
	});

exports.Page = _Page;