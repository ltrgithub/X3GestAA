"use strict";

var Base = require('syracuse-tablet/html/js/pages/sdata/pageSdataDashboard').Page;
var BaseSdata = require('syracuse-tablet/html/js/pages/sdata/pageSdata').Page;
var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var HomeController = require("syracuse-tablet/html/js/controllers/homeController").HomeController;
var native = require('syracuse-tablet/html/js/helpers/native/native');
var wpHelpers = require('syracuse-tablet/html/js/sdata/wpHelpers');
var modules = require('syracuse-tablet/html/js/common/modules');
var metaDataCache = require('syracuse-tablet/html/js/sdata/cache/metaDataCache');
var authHelpers = require('syracuse-tablet/html/js/authoring/authoringHelpers');

var ModalChooseApps = require('syracuse-tablet/html/js/ui/modals/modalChooseApps').Modal;
var ModalChooseDashboardGroup = require('syracuse-tablet/html/js/ui/modals/modalChooseDashboardGroup').Modal;
var ModalConfigTile = require('syracuse-tablet/html/js/ui/modals/modalConfigTile').Modal;
var ModalConfirm = require('syracuse-tablet/html/js/ui/modals/modalConfirm').Modal;
var ModalChooseWelcomeDashboard = require('syracuse-tablet/html/js/ui/modals/modalChooseWelcomeDashboard').Modal;
var ModalChooseRoles = require('syracuse-tablet/html/js/ui/modals/modalChooseRoles').Modal;
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var dragManager = require('syracuse-tablet/html/js/ui/dragManager').DragManager;

/**
 *
 */
exports.Page = utils.defineClass(
	function PageHome(pageData, options) {
		Base.call(this, pageData, options);
		this.actionAdapter.showDesignPage = false;
		this.actionAdapter.showPageShare = false;
		this.actionAdapter.showPinPage = false;
		this.actionAdapter.showHome = false;
		this.actionAdapter.showPageConfig = true;
		this.actionAdapter.showMyDashboardTemplates = this.controller.showMyDashboardTemplates();
		this.actionAdapter.showMyDashboard = true;;
		this.actionAdapter.showMyAvailableDashboard = this.hasAvailableTemplates();
		this.nativeVoiceCommands = native.getModule("voiceCommands");
		notifications.subscribe(this, ["sm.dashboard.description.change", "sm.dashboard.select.template", "sm.dashboard.create.template", "sm.dashboard.delete.template", "sm.dashboard.change.current.view", "sm.vignette.pressed"]);
	},
	Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
		},
		getPageTitle: function() {
			return this.isPersonal() ? locale.text("global.pageTitle.home") : this.pageData.meta.description;
		},
		isRootPage: function() {
			return true;
		},
		isPersonal: function() {
			return this.pageData.isPersonal;
		},
		roles: function() {
			return this.pageData.page.$roles;
		},
		_ensureController: function() {
			var opts = {
				forceConfigActive: this.options.replace
			};
			this.controller = new HomeController(this.pageData.dataset, this, opts);

			// Will raise notifications or do confirmations
			this.controller.setUIAdapter(this);
		},
		afterRender: function() {
			Base.prototype.afterRender.call(this);
			if (this.options.replace) {
				this._enabledConfig(true)
				this.controller.setDirty(true);
				this.options.replace = false
			}
			this.updateVoiceCommands();
		},
		updateVoiceCommands: function() {
			var self = this;
			if (self.nativeVoiceCommands) {
				self.getVoiceCommands().then(function(commands) {
					self.nativeVoiceCommands.updateVoiceCommands(commands);
				});
			}
		},
		_actPageConfig: function() {
			this.controller.toggleConfig(true);
			this._refresh();
		},
		_actMyAvailableTemplates: function() { // Replace current by selected
			var self = this;
			var templates = this.availableTemplates();
			var opts = {
				showCreateTemplate: false,
				views: templates
			}
			var modal = new ModalChooseWelcomeDashboard(opts);
			modal.show()
				.then(function(result) {
					if (result) {
						if (result.selectedView) { // uuid template
							var opts = {
								uuid: result.selectedView,
								isPersonal: self.isPersonal(),
								currentUuid: self.isPersonal() ? null : self.pageData.meta.uuid,
								replace: true, //Replace current personal dashboard by this template
								description: self.pageData.meta.description //Keep original description
							};
							modules.get("navHelper").gotoUrl("html://home", null, opts);
						}
					}
				})
		},
		_actMyDashboardTemplates: function() {
			var self = this;
			var views = [];
			var currentViews = self.pageData.page.$views || [];
			currentViews.forEach(function(view) {

				if (view.$factoryOwner && view.$factoryOwner === self.controller.factoryId()) {
					views.push(view)
				}
			});
			var opts = {
				views: views,
				showCreateTemplate: true,
			}
			var panel = this.openPanel("dashboardTemplatePanel", opts)
			panel.show();
		},
		notifDashboardChangeCurrentView: function() {
			//Current view has been deleted goto welcome user dashboard
			this._actMyDashboard()
		},
		notifDashboardSelectTemplate: function(uuid) {
			var opts = {
				uuid: uuid
			};
			modules.get("navHelper").gotoUrl("html://home", null, opts);
		},
		notifDashboardCreateTemplate: function() {
			var uuid = utils.UUID();
			var article = {
				"$layoutType": "hub",
				"$items": [{
					$layoutType: "hubgroup",
					$title: "{@" + uuid + "}"
				}],
				"$localization": {}
			};
			utils.setLocalization(article.$localization, uuid, locale.text("welcome.newgroup"));
			this.pageData.page.$article = article;
			this.pageData.meta.uuid = null;
			this.pageData.meta.description = locale.text("dashboard.welcome.create.template");
			_cleanupUnreferenced(this.pageData);
			this.pageData.isPersonal = false
			this._enabledConfig(true)
			this._refresh(true);
		},
		notifDashboardDeleteTemplate: function(uuid) {
			var self = this;
			if (uuid) {
				wpHelpers.deleteDashboardTemplate(uuid)
					.always(function(data) {
						var diags = data.$diagnoses;
						var views = [];
						if (diags && diags.length > 0) {
							diags.forEach(function(diag) {
								var notify = {
									severityClass: diag.$severity || "error",
									title: diag.$message
								};
								modules.get("modal").notify(notify);
							});
						};
						var currentView = self.pageData.page.$views.filter(function(view) {
							return view.$selected
						});
						var changeCurrentView = (currentView.length > 0 && uuid === currentView[0].$uuid); //current views has been deleted, goto user welcome dashboard on hide panel
						self.pageData.page.$views = (data.$resources && data.$resources.$views) ? data.$resources.$views : []; // set new views list;
						self.pageData.page.$views.forEach(function(view) {
							view.$selected = (currentView[0] && currentView[0].$uuid) ? view.$uuid === currentView[0].$uuid : false;
							if (view.$factoryOwner && view.$factoryOwner === self.controller.factoryId()) {
								views.push(view)
							}
							if (changeCurrentView && view.$selected) {
								notifications.publish(["sm.view.change"], view);
							}
						});
						notifications.publish(["sm.dashboard.list.views.change"], {
							views: views,
							changeCurrentView: changeCurrentView
						});
					});
			}
		},
		_actMyDashboard: function() {
			modules.get("navHelper").gotoUrl("html://home");
		},
		_enabledConfig: function(forceShow) {
			this.controller.enabledConfig(forceShow)
			var $$tiles = $(".s-m-tile", this.$$elmt);
			$$tiles.addClass("s-m-tile-edit");
			this._dragManagerCreate();
		},
		_disabledConfig: function() {
			this.controller.disabledConfig();
			$(".s-m-tile-edit", this.$$elmt).removeClass("s-m-tile-edit");
			this._dragManagerDestroy()
		},
		/**
		 * List of voice commands that can be called by user
		 * will be stored in native api and open the called page if the title matches
		 * 
		 * Promise resolving with:
		 * [
		 * {
		 *   title: "My Customers",
		 *   page: {
		 *     $url: ...
		 *     $method: ...
		 *   }
		 * ]
		 */
		getVoiceCommands: function() {
			return $.smResolve(wpHelpers.welcomePageToCommands(this.pageData));
		},
		getPageDescription: function() {
			return this.pageData.meta.description
		},
		_actCloseDashboardConfig: function() {
			if (this.controller.isDirty()) { // restaure
				var opts = {
					uuid: this.pageData.meta.uuid
				};
				modules.get("navHelper").gotoUrl("html://home", null, opts);
			} else {
				this.controller.toggleConfig();
				this._refresh(false)
			}
		},
		_actSavePersonal: function() {
			var self = this;
			var data = wpHelpers.createWelcomeDashboardFromPageData(this.pageData, true);
			wpHelpers.saveWelcomeDashboard(data).then(function(res) {
				self.controller.cleanContext();
				self.controller.setDirty(false);
				modules.get("modal").notify({
					body: locale.text("dashboard.welcome.saved"),
					severityClass: "success"
				});
			});
		},
		_actSaveTemplate: function() {
			var self = this;
			var data = wpHelpers.createWelcomeDashboardFromPageData(this.pageData, false);
			wpHelpers.saveWelcomeDashboard(data)
				.then(function(res) {
					self.pageData.page.$views = res.$views;
					self.pageData.meta.uuid = res.$uuid;
					self.controller.cleanContext();
					self.controller.setDirty(false);
					modules.get("modal").notify({
						body: locale.text("dashboard.welcome.saved"),
						severityClass: "success"
					});
				})
		},
		_actRoleList: function() {
			var self = this;
			_getAvailableRoles(self.roles())
				.then(function(roles) {
					var modal = new ModalChooseRoles(roles);
					return modal.show();
				})
				.then(function(result) {
					if (result && result.change) {
						self.pageData.page.$roles = []
						result.selectedRoles.forEach(function(role) {
							self.pageData.page.$roles.push({
								$uuid: role
							})
						})
						self.controller.rolesChange()
					}
				})
		},
		_actAddGroup: function() {
			var uuid = utils.UUID()
				// Called when add group in the footer is clicked
			var article = this.getArticle();
			article.$items.push({
				$items: [],
				$layoutType: "hubgroup",
				$title: "{@" + uuid + "}"
			})
			utils.setLocalization(article.$localization, uuid, locale.text("welcome.newgroup"));
			this._refresh(true)
		},
		_refresh: function(dirty) {
			var self = this;
			self.authUpdateLayout(self.getArticle())
				.then(function() {
					if (self.controller.configActive) { // config already enabled restore it
						self._enabledConfig(true)
					}
					self.controller.setDirty(dirty)
				})
				.fail(function(e) {
					modules.get("modal").error(e);
				});
		},
		renderRootLayout: function() {
			var self = this;
			return self._canAddTile().then(function(canAddTile) {
				self._updateRenderOptions(canAddTile);
				self.rootLayout.set$$container(self.$$contentRoot);
				self.rootLayout.buildHtml();
			})
		},
		_updateRenderOptions: function(canAddTiles) {
			var self = this;
			if (this.controller.isConfigActive()) {
				self.rootLayout.setBuildOptionPerClass("LayoutHubGroup", "showAddTiles", canAddTiles);
				self.rootLayout.setBuildOptionPerClass("LayoutTile", "tileActions", self._defineTileActions());

				var groups = self.rootLayout.children;
				groups.forEach(function(group, idx) {
					var groupActions = [{
						action: "removeGroup",
						className: "remove",
						icon: "fa fa-trash"
					}, {
						action: "moveGroupLeft",
						disabled: idx === 0,
						className: "s-m-move-group" + (idx === 0 ? " disabled" : ""),
						icon: "fa fa-arrow-left"
					}, {
						action: "moveGroupRight",
						disabled: idx === groups.length - 1,
						className: "s-m-move-group",
						icon: "fa fa-arrow-right"
					}];
					group.setBuildOption("groupActions", groupActions);
				});
			} else {
				self.rootLayout.setBuildOptionPerClass("LayoutHubGroup", "showAddTiles", null);
				self.rootLayout.setBuildOptionPerClass("LayoutHubGroup", "groupActions", null);
				self.rootLayout.setBuildOptionPerClass("LayoutTile", "tileActions", null);
			}
		},
		_defineTileActions: function() {
			var tileActions = [];
			if (this._hasMoreThanOneGroup()) {
				tileActions.push({
					action: "changeGroup",
					className: "changegroup",
					icon: "fa fa-sitemap"
				});
			}
			tileActions.push({
				action: "configTile",
				className: "config",
				icon: "fa fa-pencil"
			});
			tileActions.push({
				action: "removeTile",
				className: "remove",
				icon: "fa fa-trash-o"
			});
			return tileActions;
		},
		_hasMoreThanOneGroup: function() {
			return this.getArticle().$items.length > 1;
		},
		authUpdateLayout: function(article) {
			var self = this;
			return BaseSdata.prototype.authUpdateLayout.call(self, article)
		},

		/*
		 * TILE BTN ACTIONS
		 */
		_actChangeGroup: function(tileId) {
			var self = this;
			var grpIdxDest, grpIdx, tileIdx
			var ctrlTile = this.controller.getControl(tileId);
			var groupId = ctrlTile.parent.id;
			var groups = _getOtherGroups(this.rootLayout, groupId);
			var modal = new ModalChooseDashboardGroup(groups);
			modal.show().then(function(groupIdDest) {
				if (groupIdDest) {
					if (self.rootLayout.children.some(function(group, idx) {
							if (group.id === groupIdDest) {
								grpIdxDest = idx;
								return true;
							}
						})) {
						if (self.rootLayout.children.some(function(group, idx) {
								if (group.id === groupId) {
									grpIdx = idx;
									return true;
								}
							})) {
							if (self.rootLayout.children[grpIdx].children.some(function(tile, idx) {
									if (tile.id === tileId) {
										tileIdx = idx;
										return true;
									}
								})) {
								var article = self.getArticle();
								article.$items[grpIdxDest].$items = article.$items[grpIdxDest].$items || []
								article.$items[grpIdxDest].$items.push(article.$items[grpIdx].$items.slice(tileIdx, tileIdx + 1)[0]);
								article.$items[grpIdx].$items.splice(tileIdx, 1)
								self._refresh(true);
							};
						};

					}
				}
			});
		},
		_actConfigTile: function(tileId) {
			var self = this;
			var ti = this._getTileInfo(tileId);
			if (ti) {
				var modal = new ModalConfigTile(ti);
				modal.show().then(function(result) {
					if (result) {
						self._setTileInfo(result);
						self._rebuildPageByControls(true);
					}
				})
			}
		},

		_actRemoveTile: function(tileId) {
			this._removeTile(tileId);
		},

		/*
		 * GROUP BTN ACTIONS
		 */

		_actMoveGroupLeft: function(hubGroupId) {
			this._moveGroup(hubGroupId, -1);
		},
		_actMoveGroupRight: function(hubGroupId) {
			this._moveGroup(hubGroupId, 1);
		},
		_actRemoveGroup: function(hubGroupId) {
			var self = this;
			var modal = new ModalConfirm(locale.text("welcome.dashboard.remove.group"), null, true);
			modal.show().then(function(result) {
				if (result === "yes") {
					self._deleteGroup(hubGroupId);
				}
			});
		},

		_actAddHiddenTile: function(hubGroupId) {
			var self = this;
			_getAvailabeNotUsedApps(this.getArticle(), this.pageData.dataset.json)
				.then(function(notUsedApps) {
					var modal = new ModalChooseApps(notUsedApps);
					return modal.show();
				})
				.then(function(result) {
					// result is a list if selected application objects
					if (result && result.length > 0) {
						return self._addAppsToGroup(result, hubGroupId);
					}
				})
				.then(function(tileAdded) {
					self._rebuildPageByControls(tileAdded);
				});
		},
		_addAppsToGroup: function(apps, hubGroupId) {
			var self = this;
			var hubGroupCtrl = self.controller.getControl(hubGroupId);
			if (!hubGroupCtrl) {
				return false;
			}
			var tileAdded = apps.reduce(function(a, b, index, appList) {
				var vignetteUuid = _addVignetteAndGadget(self.pageData.dataset.json, self.pageData.prototype.json, appList[index])
				b = false;
				if (vignetteUuid) {
					b = _bindVignetteToHubGroupCtrl(hubGroupCtrl, vignetteUuid);
				}
				return a || b

			}, false)
			return tileAdded;
		},
		_moveGroup: function(hubGroupId, dir) {
			var self = this;
			var myIdx;
			if (self.rootLayout.children.some(function(group, idx) {
					if (group.id === hubGroupId) {
						myIdx = idx;
						return true;
					}
				})) {
				var newIdx = myIdx + dir;
				if (newIdx >= 0 && newIdx < self.rootLayout.children.length) {
					var article = self.getArticle();
					var destGrp = article.$items[newIdx];
					article.$items[newIdx] = article.$items[myIdx];
					article.$items[myIdx] = destGrp;
					self._refresh(true);
				}
			}
		},
		// Called by hub group if title canges
		// use to inject title into page main article
		onGroupTitleChanged: function(ctrlHubGroup, uuid, title) {
			this.getArticle().$localization = this.getArticle().$localization || {};
			utils.setLocalization(this.getArticle().$localization, uuid, title);
			this.controller.setDirty(true);
		},
		_removeTile: function(tileId) {
			var self = this;
			var tile = this.controller.getControl(tileId);
			var group = tile.parent;
			var tileIndex = group.getIndexOfChild(tile);
			var hub = group.parent;
			var groupIndex = hub.getIndexOfChild(group);

			var article = self.getArticle();
			article.$items[groupIndex].$items.splice(tileIndex, 1);
			_cleanupUnreferenced(self.pageData);
			self._refresh(true);
		},
		_deleteGroup: function(hubGroupId) {
			var self = this;
			var myIdx;
			if (self.rootLayout.children.some(function(group, idx) {
					if (group.id === hubGroupId) {
						myIdx = idx;
						return true;
					}
				})) {
				var article = self.getArticle();
				article.$items.splice(myIdx, 1);
				_cleanupUnreferenced(self.pageData);
				self._refresh(true);
			}
		},
		_getTileInfo: function(tileId) {
			var tileInfo;
			var ctrlTile = this.controller.getControl(tileId);
			var $$vignette = $("#" + tileId);
			var $$tile = $$vignette.closest(".s-m-tile");
			if (ctrlTile && ctrlTile.$bind) {
				var article = ctrlTile.getArticle();
				var gadgetId = this.pageData.dataset.json[ctrlTile.$bind];
				var gadget = gadgetId && this.pageData.dataset.json.$mobileGadgets[gadgetId];
				tileInfo = {
					$$vignette: $$vignette,
					$$tile: $$tile,
					icon: gadget && gadget.icon,
					title: gadget && gadget.$title,
					size: article.$size,
					color: article.$bgColor,
					gadgetId: gadgetId,
					ctrlTile: ctrlTile,
					vignetteId: ctrlTile.$bind
				};
			}
			return tileInfo;
		},
		_setTileInfo: function(tileInfo) {
			var article = tileInfo.ctrlTile.article = tileInfo.ctrlTile.article || {};
			article.$size = tileInfo.size;
			article.$bgColor = tileInfo.color;
			var gadget = this.pageData.dataset.json.$mobileGadgets[tileInfo.gadgetId];
			if (gadget) {
				gadget.icon = tileInfo.icon;
				gadget.title = tileInfo.title;
			}
			var gadget = this.pageData.prototype.json.$properties[tileInfo.vignetteId].$item;
			if (gadget) {
				gadget.icon = tileInfo.icon;
				gadget.title = tileInfo.title;
			}
		},
		_rebuildPageByControls: function(dirty) {
			var self = this;
			var states = [];
			var newArticle = JSON.parse(authHelpers.rebuildArticleByPageStruct(self, states));
			self.pageData.page.$article = newArticle;
			self._refresh(dirty);
		},
		_canAddTile: function() {
			return _getAvailabeNotUsedApps(this.getArticle(), this.pageData.dataset.json).then(function(appsToAdd) {
				return appsToAdd.length > 0
			})
		},
		getPagePublishOptions: function() {
			return {};
		},
		notifDashboardDescriptionChange: function(newDescription) {
			this.controller.dashboardDescriptionChange(newDescription);
		},
		getPinPageId: function() {
			return this.pageName;
		},
		hasAvailableTemplates: function() {
			if (!this.pageData.page.$views) return false;
			return this.pageData.page.$views.some(function(view) {
				return (!view.$isPersonnal);
			})
		},
		availableTemplates: function() {
			if (!this.pageData.page.$views) return [];
			return this.pageData.page.$views.filter(function(view) {
				return (!view.$isPersonal);
			})
		},
		/*****************************************************************************
		 *          Drag management
		 * ****************************************************************************/
		_dragUI: function(ev) {
			if ($(ev.currentTarget).hasClass("s-m-group-handle")) {
				return $(ev.currentTarget).parent().clone();
			} else {
				return $(ev.currentTarget).clone();
			}
		},
		_dragManagerDestroy: function() {
			if (this.dragManager) {
				notifications.unsubscribe(this, this.dragManager.getNotifs());
				this.dragManager.destroy();
				this.dragManager = null;
			}
		},
		_dragManagerCreate: function() {
			var self = this;
			var dragOpts = {
				selector: ".s-m-hub-group>header>.s-m-group-handle,.s-m-tile:not([data-empty-tile])",
				enable: false,
				notify: {
					start: "sm.drag.start",
					stop: "sm.drag.stop",
				},
				options: {
					opacity: 0.4,
					delay: 0,
					scrollSensitivity: 100,
					scrollSpeed: 50,
					helper: self._dragUI,
				}
			};
			var dropOpts = {
				selector: ".s-m-hub-group,.insert",
				notify: {
					drop: "sm.element.drop",
					out: "sm.element.out",
					over: "sm.element.over"
				},
				options: {
					helper: "clone",
				}
			};
			self.dragManager = new dragManager(dragOpts, dropOpts, self.$$elmt);
			notifications.subscribe(self, self.dragManager.getNotifs());
		},
		notifVignettePressed: function(vignetteId) { // long click on tile
			if (!this.controller.configActive) return;
			var tileInfo = this._getTileInfo(vignetteId);
			tileInfo.$$tile.toggleClass("s-m-draggable", true);
			notifications.publish("sm.drag.state.change", true); // set tile drag enabled
		},
		notifDragStart: function($$dragElt, ui) {
			if ($$dragElt.is(".s-m-hub-group>header>.s-m-group-handle")) {
				$$dragElt.closest(".s-m-hub-group").toggleClass("s-m-not-droppable", true);
				ui.helper.css("width", ui.helper.css("width"));
				ui.helper.css("background-color", "#009fda");
				ui.helper.css("color", "white");
			}
		},
		notifDragStop: function($$dragElt, ui) {
			notifications.publish("sm.drag.state.change", false) // set drag disabled
			$$dragElt.toggleClass("s-m-draggable", false);
			if ($$dragElt.is(".s-m-hub-group>header>.s-m-group-handle")) {
				$$dragElt.closest(".s-m-hub-group").toggleClass("s-m-not-droppable", false);
				return
			};
		},
		notifElementDrop: function($$dropElt, ui, params) {
			var $$dragElt = ui.draggable;
			if ($$dragElt.hasClass("s-m-tile")) this._tileDrop($$dropElt, $$dragElt, params)
			if ($$dragElt.is(".s-m-hub-group > header > .s-m-group-handle")) this._groupDrop($$dropElt, $$dragElt, params)
		},
		notifElementOut: function($$dropElt, ui) {
			var $$dragElt = ui.draggable;
			if ($$dragElt.is(".s-m-hub-group>header> .s-m-group-handle")) {
				var $$group = $$dropElt.closest(".s-m-hub-group");
				$$group.toggleClass("s-m-over-droptarget", false);
			}
			this.dragManager.hideIndicator();
		},
		notifElementOver: function($$dropElt, ui) {
			var $$dragElt = ui.draggable;
			if ($$dragElt.hasClass("s-m-tile")) this._tileOver($$dropElt, $$dragElt)
			if ($$dragElt.is(".s-m-hub-group>header > .s-m-group-handle")) this._groupOver($$dropElt, $$dragElt)
		},
		_tileDrop: function($$dropElt, $$dragElt, params) {
			console.log('_tileDrop');
			return
			var optsMoveTile = this._getOptsMoveTile($$dropElt, $$dragElt, params)
			if (optsMoveTile.where === "append" && !$$dropElt.hasClass("empty")) return
			this._moveTile(optsMoveTile);
		},
		_groupDrop: function($$dropElt, $$dragElt, params) {
			console.log('_groupDrop');
			return
			var $$goupTarget = $$dropElt.closest(".s-m-hub-group");
			if ($$goupTarget.hasClass("s-m-not-droppable")) return
			var layoutTarget = this._layoutsMap[$$goupTarget.attr("id")];
			var $$goupToMove = $$dragElt.closest(".s-m-hub-group");
			var layoutToMove = this._layoutsMap[$$goupToMove.attr("id")];

			this._moveGroup(layoutTarget, layoutToMove);
		},
		_tileOver: function($$dropElt, $$dragElt) {
			console.log('_tileOver');
			return
			var optsMoveTile = this._getOptsMoveTile($$dropElt, $$dragElt);
			var cellOrigineInfo = this._getCellInfo(optsMoveTile.dragId);
			var targetInfo = (optsMoveTile.where === "append" && $$dropElt.hasClass("empty")) ? this._getGroupInfo(optsMoveTile.dropId, $$dropElt) : this._getCellInfo(optsMoveTile.dropId);

			var where = this._tileWhere(optsMoveTile, cellOrigineInfo, targetInfo);

			if (where && where.parent) {
				var opts = {
					top: where.top,
					left: where.left,
					height: where.height,
					width: where.width,
					$$parent: where.parent,
				};
				this.dragManager.showIndicator(opts, {
					before: where.before,
					target: where.idTileTarget || where.idTarget
				});
			} else {
				this.dragManager.hideIndicator();
			}
		},
		_groupOver: function($$dropElt, $$dragElt) {
			console.log('_groupOver');
			return
			var $$group = $$dropElt.closest(".s-m-hub-group");
			if ($$group.hasClass("s-m-not-droppable")) return
			$$group.toggleClass("s-m-over-droptarget", true);
			var $$header = $("header:first", $$group);
			if ($$header.length > 0) {
				var opts = {
					$$parent: $$group,
				};
				this.dragManager.showIndicator(opts, {
					before: false,
					target: ""
				});
			} else {
				this.dragManager.hideIndicator();
			}
		},
	}
);

/**
 * Return list of application objects that are in the global list of available apps but not yet
 * refered to by the given article
 * 
 */
function _getAvailabeNotUsedApps(article, dataset) {
	var boundApps = _getBoundApps(article, dataset);
	return metaDataCache.getApplicationsList()
		.then(function(appList) {
			var notUsedApps = [];
			appList.forEach(function(app) {
				if (boundApps.indexOf(app.applicationName) < 0) {
					notUsedApps.push(app);
				}
			});
			return wpHelpers.filterApps(notUsedApps);
		});
}

function _getAvailableRoles(currentRoles) {
	var activeRoles = {};
	if (currentRoles) {
		activeRoles = currentRoles.reduce(function(roles, current) {
			roles[current.$uuid] = "active";
			return roles;
		}, {});
	};
	return wpHelpers.getListOfRoles()
		.then(function(roles) {
			roles.forEach(function(role) {
				if (activeRoles[role.$uuid]) {
					role.$selected = activeRoles[role.$uuid]
				}
			});
			return roles;
		})
}
/**
 * Return the list of applicationNames that are bound in the current $article of the page
 * 
 */
function _getBoundApps(article, dataset) {
	var boundApps = [];

	function _checkBind($bind) {
		var gadgetId = dataset[$bind];
		var gadget = gadgetId && dataset.$mobileGadgets[gadgetId];
		if (gadget && gadget.$type === "$application") {
			boundApps.push(gadget.applicationName);
		}
	}
	_getAllBinds(article).forEach(function($bind) {
		_checkBind($bind);
	});
	return boundApps;
}

function _getAllBinds(article) {
	var binds = [];

	function _walk(node) {
		if (node.$bind) {
			binds.push(node.$bind);
		}
		if (node.$items) {
			node.$items.forEach(function($item) {
				_walk($item);
			});
		}
	}
	_walk(article);
	return binds;
}
/**
 * Create new tile article and append it to hubgroupcontrol
 */
function _bindVignetteToHubGroupCtrl(hubGroupCtrl, vignetteUuid) {
	var article = hubGroupCtrl.getArticle();

	var tileArticle = {
		$bgColor: "darkgrey",
		$layoutType: "tile",
		$size: "medium"
	};
	var tile = modules.get("ctrlFactory").createControl(hubGroupCtrl.controller, tileArticle, hubGroupCtrl, hubGroupCtrl.page);
	var vignetteArticle = {
		$bind: vignetteUuid
	};
	var vignette = modules.get("ctrlFactory").createControl(tile.controller, vignetteArticle, tile, tile.page);
	return true;
}

function _addVignetteAndGadget(datasetJson, prototypeJson, app) {
	var gadget = {
		$type: "$application",
		$title: app.title,
		applicationName: app.applicationName,
		icon: app.iconName
	};
	var gadgetId = "$welcome_" + app.applicationName + "_GADGET";
	var vignetteId = "$welcome_" + app.applicationName + "_VIGNETTE";

	datasetJson.$mobileGadgets[gadgetId] = gadget;
	datasetJson[vignetteId] = gadgetId;
	if (prototypeJson) {
		prototypeJson.$properties[vignetteId] = {
			$item: gadget,
			$title: app.title,
			$type: "application/x-vignette-link"
		}
	}
	if (datasetJson.$vignettes) {
		datasetJson.$vignettes.push({
			persistentId: vignetteId,
			gadget: {
				$uuid: gadgetId
			}
		});
	}
	return vignetteId;
}

function _getOtherGroups(rootLayout, groupId) {
	var groups = [];
	rootLayout.children.forEach(function(group) {
		if (group.id !== groupId) {
			groups.push({
				title: group.getArticleText("$title"),
				id: group.id
			});
		}
	});
	return groups;
}

/**
 * Remove vignettes and gadgets not referenced by article any more
 * 
 */
function _cleanupUnreferenced(pageData) {
	var binds = _getAllBinds(pageData.page.$article);
	var boundVignettes = [];
	pageData.dataset.json.$vignettes.forEach(function(vignette) {
		if (binds.indexOf(vignette.persistentId) > -1) {
			boundVignettes.push(vignette);
		} else {
			var vid = vignette.persistentId;
			var gid = vignette.gadget.$uuid;
			delete pageData.dataset.json[vid];
			delete pageData.dataset.json.$mobileGadgets[gid];
		}
	})
	pageData.dataset.json.$vignettes = boundVignettes;
}