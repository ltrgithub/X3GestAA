"use strict";

var Base = require('syracuse-tablet/html/js/pages/actionAdapter').ActionAdapter;
var locale = require('syracuse-tablet/html/js/helpers/locale');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var siteLayout = require('syracuse-tablet/html/js/ui/siteLayout');
var environment = require('syracuse-tablet/html/js/helpers/environment');

/**
 * Action that can be added multiple time (panel, footer...)
 */
var _skipExlude = ["multiSelToggle", "multiSelTriggerAction"];
/**
 * 
 */
exports.ActionAdapterPageSdata = utils.defineClass(
	function ActionAdapterPageSdata(sdataPage) {
		Base.call(this, sdataPage);
		this.$arrayOptions = {}
			// Used to cache items
		this._items = {
			header: null,
			footer: null,
			globalPanel: null,
			actionsPanel: null,
			multiSelection: null,
			multiSelectionRun: null,
			multiSelectionReserved: null
		};
		// Some pages (like row detail will set these to true)
		this.showAccept = false;
		this.showCancel = false;
		this.showDesignPage = false;
		this.showPageShare = false;
		this.showPinPage = false;
		this.showHome = false;
		this.showPageConfig = false;
		this.showMyDashboardTemplates = false;
		this.showMyDashboard = false;
		this.showEditTemplates = false;
		this.showSortFilter = false
		this._initMultiSelItems();
	},
	Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
		},

		/**
		 * Multi-selection is enabled by authoring
		 * These actions are hidden (excluded) in header/footer/actionPAnel
		 * They are displayed only when Multi-selection mode is enabled
		 */
		_initMultiSelItems: function() {
			this._items.multiSelection = [];
			var actions = this._getPageActionSettings();
			if (!actions) {
				return;
			}
			var items = this._items.multiSelection;
			var dataset = this.page.controller.dataset;
			var self = this;
			actions.forEach(function(act) {
				if (act.options && act.options.multiselection !== true) {
					return;
				}
				var link = dataset.getLink(act.name);
				if (!link) {
					return;
				}
				// Action called at page level - multiSelectionController is not available at this stage
				self._addNonSdataActionItem(items, "multiSelTriggerAction", act.name, dataset.resolveExpression(link.$title), null, act)
			})
			if ((items && items.length > 0) || this.page.isDownloadEnabled()) {
				// Multi-selection action
				this._addMultiSelectionToggle(items, "right");
				// Actions Drop-down-list item - Specific html
				items.unshift({
					"action": this.page.isDownloadEnabled() ? "multiSelActionsWithDownload" : "multiSelActions"
				});
				// For the panel displayed when actions are being executed
				this._items.multiSelectionRun = [];
				this._addNonSdataActionItem(this._items.multiSelectionRun, "multiSelTriggerAction", "stop", null, null, {
					icon: "multiSelectionRunStop"
				});
				this._addNonSdataActionItem(this._items.multiSelectionRun, "multiSelTriggerAction", "exit", null, null, {
					icon: "multiSelectionRunExit"
				});
			}
		},
		/**
		 * Returns null if no actions
		 * Returns a non-empty array if action
		 * !! empty array means we need to display actions (EG: download action)
		 */
		_getPageActionSettings: function() {
			var actions = this.page.getAuthoring("$pageActionSettings");
			if (!actions) {
				if (this.page.isDownloadEnabled()) {
					// Force displays multi-selection button
					actions = [];
				} else {
					return;
				}
			}
			return actions;
		},
		/* To force re-evaluation of items to be rendered.
		 * Used when refreshing page during authoring
		 */
		clearCachedItems: function() {
			this._items.header = null;
			this._items.footer = null;
			this._items.globalPanel = null;
			this._items.actionsPanel = null;
			this._items.multiSelectionReserved = null;
			// New authoring can changes items
			this._initMultiSelItems();
		},
		/**
		 * Returns items to be shown in the header
		 */
		getHeaderItems: function() {
			return this.getItems("header");
		},

		/**
		 * Returns items to be shown in the footer panel
		 */
		getFooterItems: function() {
			return this.getItems("footer");
		},
		/**
		 * Returns items to be shown in the footer panel
		 * panelControllerId is the id of MultiSelectionPanelController that handles drop-down list multiSelActions
		 * - except Download action which is handled by the sdataQueryPage
		 */
		getMultiSelectionItems: function(panelControllerId) {
			var items = this.getItems("multiSelection");
			if (panelControllerId) {
				items.forEach(function(item) {
					if (item.action === "multiSelActions") {
						// MultiSelectionPanelController
						item["controller-id"] = panelControllerId;
					} // Else action processed by the sdata query page
				})
			}
			return items;
		},
		getMultiSelectionRunItems: function() {
			return this.getItems("multiSelectionRun");
		},
		/**
		 * 
		 */
		getGlobalPanelItems: function() {
			return this.getItems("globalPanel");
		},

		/**
		 * Returns items to be shown in the header
		 */
		getActionsPanelItems: function(options) {
			return this.getItems("actionsPanel", options);
		},

		_hasItems: function(panelName) {
			var items = this.getItems(panelName);
			return (items && items.length > 0) || false;
		},
		getItems: function(panelName, options) {
			options = options || {}
			var items = this._items[panelName];
			if (!items || options.layoutChange) {
				var func = "_compute" + panelName.smCapitalize() + "Items";
				items = this[func].call(this, options.visibleLinks) || [];
				this._items[panelName] = items;
			}
			return items;
		},

		/**
		 * Add other action in header/footer (enabled by authoring)
		 * slot: position of icon in header/footer
		 */
		_addFooterHeaderActions: function(items, slot) {
			var actions = this._getPageActionSettings();
			if (!actions) {
				return;
			}
			var controller = this.page.controller;
			var knownActions = controller.dataset.getActions() || {};
			var knownLinks = controller.dataset.getLinks() || {};

			var self = this;
			actions.forEach(function(act) {
				if (act.options && act.options.footerHeader === true && act.options.multiselection !== true) {
					if (knownLinks[act.name]) {
						self._addSdataLinkItem(items, act.name, controller, $.extend(true, {
							slot: slot
						}, act));
					} else if (knownActions[act.name]) {
						self._addSdataActionItem(items, act.name, controller, $.extend(true, {
							slot: slot
						}, act));
					}
				}
			})
		},

		_computeHeaderItems: function() {
			var items = [];
			var controller = this.page.controller;
			var facet = controller.getFacet();
			var addFooter = false;
			if (this.showSortFilter) {
				this._addSortFilterButton(items, controller, {
					slot: "main"
				});
				addFooter = true;
			}
			if (this.showSearch) {
				this._addSearchButton(items, controller, {
					slot: "main"
				});
				addFooter = true;
			}
			if (this.showAccept) {
				this._addAcceptButton(items, controller, {
					slot: "main"
				});
				addFooter = true;
			}
			if (this.showCancel) {
				this._addCancelButton(items, controller, {
					slot: "main"
				});
				addFooter = true;
			}
			switch (facet) {
				case "$query":
					this._addSdataLinkItem(items, "$create", controller, {
						slot: "main"
					});
					addFooter = true;
					break;

				case "$details":
					this._addSdataLinkItem(items, "$edit", controller, {
						slot: "main"
					});
					this._addSdataLinkItem(items, "$delete", controller, {
						slot: "main"
					});
					this._addSdataLinkItem(items, "$query", controller, {
						slot: "main"
					});
					addFooter = true;
					break;

				case "$edit":
					this._addSdataLinkItem(items, "$edit", controller, {
						slot: "main"
					});
				case "$create":
					this._addSdataActionItem(items, "$save", controller, {
						slot: "main"
					});
					addFooter = true;
					break;
			}
			if (addFooter) this._addFooterHeaderActions(items, "right")
			return items;
		},
		_computeFooterItems: function() {
			var items = [];
			return items;
		},
		_computeGlobalPanelItems: function() {
			var items = [];
			var controller = this.page.controller;
			if (this.showPageConfig) {
				this._addPageConfigButton(items, controller, {
					slot: "tools"
				});
			}
			if (this.showMyDashboardTemplates) {
				this._addMyDashboardTemplatesButton(items, controller, {
					slot: "tools"
				});
			}
			if (this.showMyDashboard) {
				this._addMyDashboardButton(items, controller, {
					slot: "tools"
				});
			}
			if (this.showPageShare) {
				this._addShareButton(items, controller, {
					slot: "share"
				});
			}
			this._addSwitchContextButton(items, controller, {
				slot: "header"
			});
			this._addSettingsButton(items, controller, {
				slot: "appl"
			});
			this._addAboutButton(items, controller, {
				slot: "appl"
			});
			this._addDevButton(items, controller, {
				slot: "tools"
			});
			this._addDraftsListLink(items, controller, "logout");
			this._addLogoutButton(items, controller, {
				slot: "logout"
			});
			return items;
		},
		_computeActionsPanelItems: function(visibleLinks) {
			visibleLinks = visibleLinks || {};
			var items = [];
			var controller = this.page.controller;

			var $links = controller.dataset.getLinks();
			for (var $linkName in $links) {
				if (!$linkName.smStartsWith("$")) {
					this._addSdataLinkItem(items, $linkName, controller, {
						slot: "links"
					}, visibleLinks[$linkName]);
				}
			}
			var $actions = controller.dataset.getActions();
			for (var $actionName in $actions) {
				if (!$actionName.smStartsWith("$") && !visibleLinks[$actionName]) {
					this._addSdataActionItem(items, $actionName, controller, {
						slot: "actions"
					});
				}
			}
			if (this.showSearch) {
				this._addSearchButton(items, controller, {
					slot: "main"
				}, visibleLinks);
			}
			if (this.showSortFilter) {
				this._addSortFilterButton(items, controller, {
					slot: "main"
				}, visibleLinks);
			}
			if (this._items.multiSelection.length > 0) {
				this._addMultiSelectonButton(items, controller, {
					slot: "main"
				}, visibleLinks);
			}
			var facet = controller.getFacet();
			switch (facet) {
				case "$query":
					this._addSdataLinkItem(items, "$create", controller, {
						slot: "main"
					}, visibleLinks["$create"]);
					break;

				case "$details":
					this._addSdataLinkItem(items, "$edit", controller, {
						slot: "main",
					}, visibleLinks["$edit"]);
					this._addSdataLinkItem(items, "$delete", controller, {
						slot: "main",
					}, visibleLinks["$delete"]);
					this._addSdataLinkItem(items, "$query", controller, {
						slot: "main",
					}, visibleLinks["$query"]);
					break;

				case "$edit":
				case "$create":
					this._addSdataActionItem(items, "$save", controller, {
						slot: "main",
					}, visibleLinks["$save"]);
					if (this.showEditTemplates) { //Memo
						this._addGlobalAction("showEditTemplates", items, controller, {
							slot: "main",
						}, visibleLinks["showEditTemplates"]);
					}
					break;
			}
			if (this.showPinPage) {
				this._addPinButton(items, "pin", controller, {
					slot: "tools"
				}, visibleLinks);
				this._addPinButton(items, "unpin", controller, {
					slot: "tools"
				}, visibleLinks);
			}
			if (this.showPageShare) {
				this._addShareButton(items, controller, {
					slot: "tools"
				}, visibleLinks);
			}
			if (this.showDesignPage === true && environment.isDesktop() && !environment.isNativeWrapper()) {
				this._addDesignPageButton(items, controller, {
					slot: "tools"
				}, visibleLinks);
			}
			if (this.showHome) {
				this._addHomeButton(items, controller, {
					slot: "home"
				}, visibleLinks);
			}
			// Add always drafts (disabled by default)
			this._addDraftsListLink(items, controller, "home");
			return items;
		},

		/**
		 * Add sdata link item if link is known in prototype
		 * 
		 * {
		 *   "name":		  // Unique name
		 * 	 "controller-id":
		 *   "sdata-$link":   // Sdata link ($edit)
		 *   "icon":		  // Optional, rendering control should use prototype and a default if possible
		 *   "title":		  // Optional, rendering control should use prototype
		 *   "$bind":		  // Optional: Property the link belongs too (for field level links)
		 * }
		 */
		_addSdataLinkItem: function(items, $linkName, controller, overrides, headerVisible) {
			if (this._isMultiSelectionReserved($linkName) || headerVisible) {
				return;
			}
			var dataset = controller.dataset;
			var link = dataset.getLink($linkName);
			if (!link) {
				return;
			}
			var item = {
				"name": $linkName,
				"controller-id": controller.id,
				"$link": $linkName,
				"icon": $linkName,
				"title": dataset.resolveExpression(link.$title)
			}
			this._pushItem(items, item, overrides);
		},
		/**
		 * Button that toggles the multi-selection mode
		 */
		_addMultiSelectionToggle: function(items, slot) {
			this._addNonSdataActionItem(items, "multiSelToggle", null, locale.text("action.multiselect"), null, {
				icon: "multiSelection",
				slot: slot || "right"
			})
		},
		/**
		 * Non sData action (handled by _act or onDataActionClicked at ctrl/controller/page level)
		 */
		_addNonSdataActionItem: function(items, $actionName, params, title, controller, overrides) {
			if (_skipExlude.indexOf($actionName) < 0 && this._isMultiSelectionReserved($actionName)) {
				return;
			}
			title = title || "";
			var item = {
				"name": $actionName,
				"controller-id": controller && controller.id,
				"action": $actionName,
				"icon": $actionName,
				"title": title,
				"params": params
			}
			this._pushItem(items, item, overrides);
		},

		/**
		 * Add sdata action item if action is known in prototype
		 * 
		 * {
		 *   "name":		  // Unique name
		 * 	 "controller-id":
		 *   "sdata-$link":   // Sdata link ($edit)
		 *   "icon":		  // Optional, rendering control should use prototype and a default if possible
		 *   "title":		  // Optional, rendering control should use prototype
		 * }
		 */
		_addSdataActionItem: function(items, $actionName, controller, overrides, headerVisible) {
			if (_skipExlude.indexOf($actionName) < 0 && this._isMultiSelectionReserved($actionName) || headerVisible) {
				return;
			}
			var dataset = controller.dataset;
			var action = dataset.getAction($actionName);
			if (!action) {
				return;
			}
			var item = {
				"name": $actionName,
				"controller-id": controller.id,
				"$sdataAction": $actionName,
				"icon": $actionName,
				"title": dataset.resolveExpression(action.$title || "")
			}
			this._pushItem(items, item, overrides);
		},
		_pushItem: function(items, item, overrides) {
			if (overrides) {
				item = $.extend(true, {}, item, overrides);
			}
			items.push(item);
			if (!this._items.multiSelectionReserved) {
				this._items.multiSelectionReserved = [];
			}
			this._items.multiSelectionReserved.push(item.name);
		},
		_isMultiSelectionReserved: function(name) { // don't understand
			return false;
			return this._items.multiSelectionReserved != null && this._items.multiSelectionReserved.indexOf(name) >= 0;
		}
	});