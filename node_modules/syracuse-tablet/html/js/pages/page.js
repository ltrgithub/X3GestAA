"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("page");
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

/**
 * s-m-side-panel-dismiss: div that traps the events outside the panel when a panel if open
 */
var _templates = {
	fullpage: '\
		<section class="s-m-page s-m-full {{type}} {{name}}" id="{{pageid}}" data-appid="{{appid}}" {{#if parentId}}data-parent-id="{{parentId}}"{{/if}} class="ctrl-event-click" style=""> \
			<header></header> \
			<section class="s-m-main-content"></section> \
			<footer></footer> \
			<div class="s-m-side-panel-dismiss" data-action="sidePanel" data-params="close"></div> \
		</section> \
	',
	// data-pageid used to retrieve the page
	vignette: '<section class= "s-m-page s-m-nested" data-pageid="{{pageid}}"></section>',
	leftpanel: '<section class="s-m-leftpanel"></section>',
	rightpanel: '<section class="s-m-rightpanel"></section>'
};
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx || {});
};
/**
 * Dispatching of navigation and action control
 */
var _panel2Control = {
	leftpanel: "application/x-navigationpanel",
	rightpanel: "application/x-pageactionpanel",
	header: "application/x-pageheader",
	footer: "application/x-pagefooter"
};
var _control2panel = {};
for (var p in _panel2Control) {
	_control2panel[_panel2Control[p]] = p;
}
/**
 * Static controls used by non HTML pages
 */
var StaticControls = function() {
	var _map = {};
	/**
	 * panelId:   name of panel header/footer/leftpanel/rightpanel
	 * ctrlType:  type of the control
	 * 		Ex: display navigation panel in leftpanel
	 * 		Ex: display action panel in rightpanel
	 */
	this.addPanel = function(panelId, page) {
		// For panelId header/footer
		var $$parent;
		if (panelId.indexOf('panel') >= 0) {
			// Create the container bea cus panel are only available for regular/dashboard pages (not for html)
			$$parent = $(_getHtml(panelId)).appendTo(page.$$elmt);
		} else {
			// Header/footer already present
			$$parent = page.$$elmt.find(panelId);
		}
		if ($$parent.length > 0) {
			_map[panelId] = {
				$$parent: $$parent,
				ctrlType: _panel2Control[panelId]
			};
		}
	};
	this.hasPanels = function() {
		return _map['leftpanel'] != null || _map['rightpanel'] != null;
	};
	this.destroy = function() {
		if (!_map) return;
		for (var id in _map) {
			if (_map[id].control) _map[id].control.destroy();
		}
		_map = null;
	};
	this.create = function(controller) {
		if (!_map) return;
		for (var id in _map) {
			_map[id].control = controller.createStaticControl(_map[id].ctrlType);
		}
	};
	this.buildHtml = function(dao, buildOptions) {
		if (!_map) return;
		var c;
		for (var id in _map) {
			c = _map[id];
			c.control.buildHtml(c.$$parent, dao, buildOptions);
		}
	};
	this.afterRender = function(dao, buildOptions) {
		if (!_map) return;
		var c;
		for (var id in _map) {
			c = _map[id];
			c.control.afterRender(c.$$parent, dao, buildOptions);
		}
	};
	this.get = function(id) {
		return (_map[id] || {}).control;
	};
	this.doAction = function(page, side, action) {
		var id = side + "panel";
		var c = _map[id];
		if (!c) return;
		c.control.toggle(action, function(newWidth) {
			if (side === "left") {
				// Only for left panel shifts content
				var shift = [page.$$contentElmt];
				if (_map["header"]) shift.push(_map["header"].$$parent.find(".navbar"));
				if (_map["footer"]) shift.push(_map["footer"].$$parent.find(".navbar"));
				shift.forEach(function(e) {
					e.css("left", newWidth);
				});
			}
			// Dismiss 
			var visible = c.control.$$elmt.is(":visible");
			var dismiss = page.$$elmt.children(".s-m-side-panel-dismiss");
			dismiss[visible ? "addClass" : "removeClass"](side);
			dismiss.css(side, newWidth);
		});
		return c;
	};
};
/**
 * Base class for all pages
 *  $$parent: Parent element
 * 	state: Page information - JSON structure stored in history
 *  prototype: Prototype object (class prototype)
 *  article: JSON article
 *  !! Temporarily prototype and article can be null for html pages
 */
var _Page = utils.defineClass(
	function($$parent, state, prototype, article, options) {
		var self = this;
		// article, prototype, rootLayout null for html pages
		self.prototype = prototype;
		self.article = article;
		self.rootLayout = null;
		self._staticControls = null;
		// For breadCrumb
		self.historyLength = 0;
		self.historyTitle = state.id;
		self._$$parent = $$parent;
		self.state = state;
		self.id = state.uuid;
		self.controlsMap = {};
		self._nbControls = 0;
		self.dao = null;
		self.isVignette = state.options && state.options.vignette;
		self.isChild = state.options && state.options.parentId != null;
		self._initRootElmt($$parent);
		notifications.subscribe(self, ["sm.action.link"], 1);
	}, null, {

		/**
		 * Create and return root DOM element of every page
		 * 		DOM element is hidden and contains only the structure
		 * 		Page object is stored in DOM element under data("smcontroller")
		 */
		_initRootElmt: function($$parent) {
			var self = this;
			var type = self.state.type;
			if (self.isLookup()) {
				// it's useful to personnalize the css for lookup
				type += " lookup";
			}
			var root, ctx = {
					appid: self.state.appId,
					pageid: self.id,
					type: type,
					name: self.state.name,
					parentId: self.getParentId()
				};
			if (self.isVignette) {
				// only content in a vignette
				self.$$contentElmt = self.$$elmt = $(_getHtml("vignette", ctx));
			} else if (self.state.type === "html") {
				self.$$elmt = $(_getHtml("fullpage", ctx));
				self.$$contentElmt = self.$$elmt.find("section.s-m-main-content");
				// No controls/header/footers for html pages - Managed by the page itself
			} else {
				// Type "dashboard", "regular"
				self.$$elmt = $(_getHtml("fullpage", ctx));
				self.$$contentElmt = self.$$elmt.find("section.s-m-main-content");
				// Static controls for non html pages
				self._staticControls = new StaticControls(self);
				['header', 'footer', 'leftpanel', 'rightpanel'].forEach(function(p) {
					self.addPanel(p);
				});
				if (self._staticControls.hasPanels()) {
					notifications.subscribe(self, ["sm.side.panel.ready"], 1);
				}
			}
			self.$$elmt.hide();
			self.$$elmt.appendTo($$parent);
			// attaches page object to DOM element
			self.$$elmt.smPageController(self);
		},
		/**
		 * Add control in control list
		 * panelId: header, footer, leftpanel, rightpanel
		 * Can be overridden to disable creation of controls
		 */
		addPanel: function(panelId) {
			return this._staticControls.addPanel(panelId, this);
		},
		/**
		 * Create the control object
		 * ctrlType: control's type
		 * Can be overridden to provide it's own control
		 */
		createStaticControl: function(ctrlType) {
			return ctrlFactory.createPageControl(ctrlType, this);
		},

		destroy: function() {
			var self = this;
			if (self._waiting) {
				uiutils.waitWheelDestroy(self._waiting);
				self._waiting = null;
			}
			log && log("Page destroy", self.id);
			if (self.getProp["type"] === "appdashboard") {
				// app dashboard page -> Destroy all related pages
				self._destroyAppChilds();
			}
			if (self._staticControls) {
				self._staticControls.destroy();
				self._staticControls = null;
			}
			if (self.controlsMap) {
				for (var id in self.controlsMap) {
					self.controlsMap[id].destroy();
				}
				self.controlsMap = null;
			}
			self._nbControls = 0;
			if (self.dao) {
				self.dao.destroy();
				self.dao = null;
			}
			// At the end to destroy childs before parent
			if (self.$$elmt) {
				utils.unbindObj(self.$$elmt);
				self.$$elmt = null;
			}
			utils.unbindObj(self);
			self.article = null;
			self.prototype = null;
			self._$$parent = null;
		},

		/**
		 * TODO
		 */
		_destroyAppChilds: function() {
			var self = this;
			if (self.$$elmt) {
				// destroy all page that belongs to an application except this (dashboard)
				var childs = self._$$parent.find('.class[data-appId="' + self.getProp("appId") + '"]');
				if (childs.length > 0) {
					log && log("Page destroychilds", self.id);
					childs.each(function(idx) {
						var ctrl = $(this).smPageController();
						if (ctrl && ctrl != self) ctrl.destroy();
					});
				}
			}
		},
		/**
		 * TODO
		 */
		destroySiblings: function() {
			var self = this;
			if (self.$$elmt) {
				// destroy all siblings if any when direct access with the breadcrumb
				log && log("Page destroySiblings", "destroySiblings");
				var next = self.$$elmt.siblings(function(idx) {
					var ctrl = $(this).smPageController();
					if (ctrl) ctrl.destroy();
				});
			}
		},
		/**
		 * dashboard/regular/html
		 */
		getType: function() {
			return this.state.type;
		},

		getProp: function(prop) {
			return this.state[prop];
		},

		setDao: function(dao) {
			var self = this;
			if (self.dao && self.dao.destroy) self.dao.destroy();
			self.dao = dao;
		},

		getDao: function() {
			return this.dao;
		},

		/**
		 * Refresh the page
		 */
		refresh: function(options, callBackInterface) {
			throw new Exception("Not implemeneted");
		},

		/**
		 * Used by refresh method to update controls after having loaded new data
		 * ids == null means all controls
		 */
		refreshControls: function(ids, options) {
			var self = this;
			var array;
			if (ids && ids.length > 0) {
				array = [];
				ids.forEach(function(id) {
					array.push(self.controlsMap[id]);
				});
			} else {
				array = self.controlsMap;
			}
			array.forEach(function(c) {
				c.refresh(self.dao, options);
			});
		},
		/**
		 * Load the page
		 * 		The result is that the page is created and attached to DOM document and hidden
		 * 		the contoller of the page (applictaion/vignette) has to call activate method to display the page (see pageLoader module)
		 */
		load: function() {
			var self = this;
			var deferred = $.Deferred();
			try {
				self.loadStructure()
					.then(function() {
						return self.loadData();
					})
					.then(function() {
						return self.render();
					})
					.then(function() {
						return self.afterRender();
					})
					.then(function() {
						deferred.resolve();
					}).fail(function(e) {
						deferred.reject(e);
					});
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},
		/**
		 * Create layout/control tree structure according to article
		 */
		loadStructure: function() {
			var deferred = $.Deferred();
			var self = this;
			try {
				if (!self.article || !self.prototype) throw new Error("loadStructure - NULL article or prototype");
				// Creates header/footer/leftPanel/rightpanel controls
				if (self._staticControls) {
					self._staticControls.create(self);
				}
				// Creates control/fields tree (from article)
				self.rootLayout = articleParser.article2Controls(self, self.article, self.prototype);
				deferred.resolve();
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},
		/**
		 * Load page data
		 */
		loadData: function() {
			var deferred = $.Deferred();
			var self = this;
			try {
				self.setDao(null);
				deferred.resolve();
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},
		/**
		 * Rendering - Build html and attachs dom elements to document
		 */
		render: function() {
			var self = this;
			try {
				if (!self.rootLayout) throw new Error("buildHtml - NULL rootLayout");
				// Renders header/footer/leftPanel/right controls
				if (self._staticControls) {
					self._staticControls.buildHtml(self.dao);
				}
				if (self.$$contentElmt) {
					self._beforeAddContent();

					// Renders tree controls (article)
					self.rootLayout.buildHtml(self.$$contentElmt, self.dao, {
						makeFullHeight: self.isVignette
					});
				}
			} catch (e) {
				return $.smReject(e);
			}
			return $.smResolve();
		},
		/**
		 * Specific procces after rendering
		 */
		afterRender: function() {
			var self = this;
			// After render for controls - Apply Meta-data
			// For DVLP it's beter to apply Meta-data after render than in buildHtml due to control class hierarchy
			// TODO - Optimize by adding applyMeta in buildHtml and by checking that all classe call applyMetaData 
			if (self.controlsMap) {
				// !! if we remove afterRender call we need to call at least afterRender on _staticControls
				for (var id in self.controlsMap) {
					self.controlsMap[id].afterRender();
				}
			}
		},

		isEditMode: function() {
			return false;
		},

		_beforeAddContent: function() {

		},

		addTitle: function(title, description) {
			var self = this;
			var html = "";
			if (title) html = '<header><h3>' + title + '</h3></header>';
			if (description) html += '<p>' + description + '<p>';
			if (html.length > 0) $(html).prependTo(self.$$contentElmt);
		},


		/**
		 *  called each tile a control/layout is created
		 **/
		addControl: function(c) {
			if (!c) return;
			this._nbControls++;
			this.controlsMap[c.id] = c;
		},
		/**
		 * return the control/layout
		 * 	id:  id attribute of dom element
		 * */
		getControl: function(id) {
			return this.controlsMap && this.controlsMap[id];
		},

		getNbControls: function(id) {
			return this._nbControls;
		},
		/**
		 * Display the page and hides currentPage
		 * 		Manage transitions (effect) according  to self.getProp("transition")
		 * Do not call show directly
		 * cb is called after oage hs been displayed (we don't use deferred)
		 */
		activate: function(currentPage, cb) {
			var self = this;
			log && log("Page activate", self.id);
			self.historyLength = window.history.length;
			self._show(currentPage, cb);
		},
		/**
		 * Hide the page
		 * 	Do not call hide or show directly
		 * A "cached" page is deactivated instead of being destroyed on navigation event
		 */
		deactivate: function(cb) {
			var self = this;
			log && log("Page deactivate", self.id);
			self._hide(cb);
		},

		_show: function(currentPage, cb) {
			var self = this;
			var transition = self.getProp("transition");
			if (currentPage) {
				currentPage._hide(function() {
					self.$$elmt.show(transition || 0, function() {
						if (cb) cb();
					});
				});
				return;
			}
			self.$$elmt.show(transition == null ? 0 : transition, cb);
		},

		_hide: function(cb) {
			var self = this;
			if (!self.$$elmt) {
				if (cb) cb();
				// page has been destroyed
				return;
			}
			// Close panels
			self._actSidePanel("close", "all");
			var transition = self.getProp("transition");
			self.$$elmt.hide(transition == null ? 0 : transition, cb);
		},

		isActive: function() {
			var self = this;
			return self.$$elmt && self.$$elmt.is(":visible");
		},
		/**
		 * True is page is a lookup
		 */
		isLookup: function() {
			return this.prototype && this.prototype.isLookup();
		},
		/**
		 * Return the info to notify parent when the child page is closed
		 * It depends on the kind of page
		 * Ex: lookup notifies parent control with selected value
		 */
		getParentNotif: function() {
			throw new Error("not implemented");
		},
		/**
		 * Return the id of parent page if any
		 */
		getParentId: function() {
			return this.isChild ? this.state.options.parentId : null;
		},

		/**
		 * Returns attribute for the link that opens this page (used to open this page from a vignette to full page)
		 * Overriden by regular page to put s-data-url
		 */
		getOpenLinkAttrs: function() {
			return {
				"data-nav": this.state.name
			};
		},

		/***
		 * Test action
		 */
		_actTest: function(params) {
			var e = $('<h5 style="color:red">Action test succeeded</h5>').prependTo(this.$$elmt);
			window.setTimeout(function() {
				e.remove();
			}, 2000);
		},

		/**
		 * Toggle left/right panel - data-action="sidePanel"
		 * 	panel : left or right
		 * 	action toggle or resize
		 */
		_actSidePanel: function(action, side) {
			var self = this;
			if (self._staticControls) {
				side = side || "all";
				var side = side === "all" ? ["left", "right"] : [side];
				side.forEach(function(panel) {
					var c = self._staticControls.doAction(self, panel, action);
				});
			}
		},

		_actSwitchApp: function(info) {
			var self = this;
			if (!info) return;
			settings.getMyApplicationDetail(info).then(function(data) {
				notifications.publish("sm.switch.app", data);
			}, function(e) {
				utils.modalError("Error switching to application", e);
			});
		},

		/** Event sm.side.panel.ready
		 *  Notified when the panel have been created
		 *  Functional panel is identifyed by the typeControl
		 *  It is dispatch to a UI panel left/right (depends on OS)
		 */
		notifSidePanelReady: function(typeControl, data) {
			var self = this;
			if (!self._staticControls) return;
			var foot = self._staticControls.get("footer");
			if (!foot) return;
			foot.enablePanel(_control2panel[typeControl], data);
		},

		/**
		 * Wait wheel management
		 * We need one plugin per page
		 */
		waitWheelStart: function(controlId) {
			var self = this;
			if (controlId) {
				var c = self.controlsMap[controlId];
				if (c && c.waitStart) c.waitStart();
				return;
			}
			if (!self._waiting) {
				self._waiting = uiutils.waitWheelCreate(self.$$elmt);
			}
			uiutils.waitWheelStart(self._waiting);
		},
		waitWheelStop: function(controlId) {
			var self = this;
			if (controlId) {
				var c = self.controlsMap[controlId];
				if (c && c.waitStop) c.waitStop();
				return;
			}
			if (self._waiting) {
				uiutils.waitWheelStop(self._waiting);
			}
		},

		/** Event sm.action.link
		 *  Notified when a action succeeded - overriden
		 *  link:		Link info
		 *  result:		Json response
		 */
		notifActionLink: function(link, result) {
			throw new Error("not implemented");
		}
	}
);

exports.Page = _Page;