"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("page");
var globals = require('syracuse-tablet/html/js/helpers/globals');
var uiutils = require('syracuse-tablet/html/js/ui/utils');
var templates = require('syracuse-tablet/html/js/helpers/templating');
var factory = require('syracuse-tablet/html/js/application/appFactory');
var modal = require('syracuse-tablet/html/js/ui/modal');
var auth = require('syracuse-tablet/html/js/application/authentication');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');
var PageHeader = require('syracuse-tablet/html/js/pages/pageHeader').Klass;

var _consts = exports.consts = {
	tmplPage: "pages/",
	tmplDefHeader: "pages/default/header",
	tmplRoot: "templates/pages/",
	dataFile: "/data.json",
	tmplHead: "header",
	tmplMain: "main"
};
var _defInfo = {
	home: false,
	type: "regular",
	cached: false,
	refreshed: false,
	appId: "root",
	changeHash: false
};
var _staticPages = {
	"login": {
		type: "html"
	},
	"about": {
		type: "html"
	},
	"settings": {
		type: "html"
	},
	"defhome": {
		type: "html"
	},
	"vignetteerror": {
		type: "html"
	}
};

var _pages = {};

var _resetPages = function() {
	for (var p in _staticPages) {
		_pages[p] = $.extend(true, {}, _defInfo, _staticPages[p]);
	}
};

/**
 * Base class for all pages
 *  $parent: Parent element
 * 	state: Page information - JSON structure stored in history
 *  prototype: Prototype object (class prototype)
 *  article: JSON article
 *  !! Temporarily prototype and article can be null for html pages
 */
var _Page = utils.defineClass(
	function($parent, state, prototype, article) {
		var self = this;
		// article, prototype, rootLayout null for html pages
		self.prototype = prototype;
		self.article = article;
		self.rootLayout = null;
		self.vignette = state.options && state.options.vignette;
		// For breadCrumb
		self.historyLength = 0;
		self.historyTitle = state.id;
		self._$parent = $parent;
		self.state = state;
		self.id = state.uuid;
		self.$elmt = $(self._getHtmlRoot()).hide();
		self.$elmt.appendTo($parent);
		self.$elmt.smPageController(self);
		self.header = self._createPageHeader();
	}, null, {
		/**
		 * return the HTML for root element
		 */
		_getHtmlRoot: function() {
			var self = this;
			return templates.execSync(self.vignette ? "vignetteTmpl" : "pageTmpl", {
				uuid: self.state.uuid,
				klass: "",
				appId: self.state.appId
			});
		},
		/**
		 * Overriden by html pages
		 */
		_createPageHeader: function() {
			return new PageHeader(this, self.article, self.prototype);
		},

		destroy: function() {
			var self = this;
			if (!self.$elmt) return;
			log && log("Page destroy", self.id);
			if (self.getProp["type"] === "appdashboard") {
				// appdashboard page -> Destroy all related pages
				self._destroyAppChilds();
			}
			if (self.header) self.header.destroy();
			self.header = null;
			self.article = null;
			self.prototype = null;
			self._$parent = null;
			utils.unbindObj(self.$elmt);
			self.$elmt = null;
			utils.unbindObj(self);
		},

		_destroyAppChilds: function() {
			var self = this;
			if (self.$elmt) {
				// destroy all page that belongs to an application except this (dashboard)
				var childs = self._$parent.find('.class[data-appId="' + self.getProp("appId") + '"]');
				if (childs.length > 0) {
					log && log("Page destroychilds", self.id);
					childs.each(function(idx) {
						var ctrl = $(this).smPageController();
						if (ctrl && ctrl != self) ctrl.destroy();
					});
				}
			}
		},

		destroySiblings: function() {
			var self = this;
			if (self.$elmt) {
				// destroy all siblings if any when direct access with the breadcrumb
				log && log("Page destroySiblings", "destroySiblings");
				var next = self.$elmt.siblings(function(idx) {
					var ctrl = $(this).smPageController();
					if (ctrl) ctrl.destroy();
				});
			}
		},

		getProp: function(prop) {
			return this.state[prop];
		},

		load: function() {
			var self = this;
			var deferred = $.Deferred(),
				step;
			var rejectError = function(e) {
				log && log(step + " rejected", e);
				deferred.reject(e);
			};
			try {
				step = "loadStructure";
				self.loadStructure().then(function() {
					step = "loadData";
					return self.loadData();
				}, rejectError).then(function() {
					step = "buildHtml";
					return self.buildHtml();
				}, rejectError).then(function(html) {
					step = "render";
					return self.render(html);
				}, rejectError).then(function() {
					step = "afterRender";
					return self.afterRender();
				}, rejectError).then(function() {
					deferred.resolve();
				}, rejectError);
			} catch (e) {
				rejectError(e);
			} finally {
				return deferred.promise();
			};
		},

		loadStructure: function() {
			var deferred = $.Deferred();
			var self = this;
			try {
				if (!self.article || !self.prototype) throw new Error("loadStructure - NULL article or prototype");
				if (self.header) {
					self.header.loadStructure();
				}
				self.rootLayout = articleParser.article2Controls(self, self.article, self.prototype);
				deferred.resolve();
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		loadData: function() {
			var deferred = $.Deferred();
			var self = this;
			try {
				deferred.resolve();
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		buildHtml: function(data) {
			var deferred = $.Deferred();
			var self = this;
			try {
				var res = {};
				if (!self.rootLayout) throw new Error("buildHtml - NULL rootLayout");
				self.buildHtmlContent().then(function(content) {
					res.content = content;
					self.buildHtmlHeader().then(function(header) {
						res.header = header;
						deferred.resolve(res);
					}, function(e) {
						deferred.reject(e);
					});
				}, function(e) {
					deferred.reject(e);
				});
				return {
					header: self.buildHtmlContent(),
					content: self.buildHtmlHeader()
				};
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		buildHtmlContent: function() {
			var deferred = $.Deferred();
			var self = this;
			try {
				var contentHtml = [];
				self.buildHtmlContentBefore(contentHtml);
				self.rootLayout.buildHtml(contentHtml);
				self.buildHtmlContentAfter(contentHtml);
				deferred.resolve(contentHtml.join(''));
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		buildHtmlContentBefore: function(html) {

		},

		buildHtmlContentAfter: function(html) {

		},

		buildHtmlHeader: function() {
			var deferred = $.Deferred();
			var self = this;
			try {
				var header = self.header ? self.header.buildHtml() : null;
				deferred.resolve(header);
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		render: function(html) {
			var self = this;
			var deferred = $.Deferred();
			if (html.header) {
				self.$elmt.children("header").html(html.header);
			}
			var content = self.$elmt.is("section") ? self.$elmt : self.$elmt.children("section");
			content.html(html.content);
			deferred.resolve();
			return deferred.promise();
		},

		afterRender: function() {
			var self = this;
			uiutils.bindActions(self);
		},

		activate: function(currentPage, cb) {
			var self = this;
			log && log("Page activate", self.id);
			self.historyLength = window.history.length;
			self._show(currentPage, cb);
		},

		deactivate: function(currentPage, cb) {
			var self = this;
			log && log("Page deactivate", self.id);
			self._hide(currentPage, cb);
		},

		_show: function(currentPage, cb) {
			var self = this;
			var transition = self.getProp("transition");
			if (currentPage) {
				currentPage._hide(function() {
					self.$elmt.show(transition || 0, function() {
						if (cb) cb();
					});
				});
				return;
			}
			self.$elmt.show(transition == null ? 0 : transition, cb);
		},

		_hide: function(cb) {
			var self = this;
			if (!self.$elmt) {
				if (cb) cb();
				// page has been destroyed
				return;
			}
			var transition = self.getProp("transition");
			self.$elmt.hide(transition == null ? 0 : transition, cb);
		},

		isActive: function() {
			var self = this;
			return self.$elmt && self.$elmt.is(":visible");
		}

	});


var _getInfo = function(id, clone) {
	if (id === "home") {
		id = globals.getApplication().homePageId;
	}
	var i;
	if (!i) i = _pages[id];
	if (i && clone === true) i = $.extend(true, {}, i);
	return i;
};



var _pageInfo = function(state, options) {
	if (state == null) state = "";
	if (typeof state === "string") {
		var name = state.trim();
		if (name.indexOf("#") == 0) name = name.substring(1);
		state = _getInfo(name, true);
		if (!state) {
			if (name.length != 0) {
				log && log("Page " + name + " not found -> Take home");
			}
			name = "home";
			state = _getInfo(name, true);
			if (!state) {
				throw new Error("Page[" + name + "] not found");
			}
		}
		if (options) {
			state.options = options ? $.extend(true, state, options) : {};
		}
		state.name = name;
		if (!state.transition) {
			// Default transition
			state.transition = globals.getApplication().$config("transition");
		}
		// Readable id
		state.uuid = utils.readableuid("page", state.appId || "root", state.type, state.name);
	}
	return state;
};

/**
 *  Register the pages of a Syracause Mobile Application
 *  Returns the id of home page
 **/
var _registerAppPages = function(appDescr) {
	_resetPages();
	if (!appDescr) return;
	var info, homeId;
	if (appDescr.$dashboards) {
		var idx = 0;
		for (var p in appDescr.$dashboards) {
			var data = appDescr.$dashboards[p];
			info = $.extend(true, {}, _defInfo);
			info.type = "dashboard";
			// Name is used for readable dom ids - info guarantee unic ids 
			info.name = info.id = data.$dashboardName + idx++;
			info.dashboardUuid = p;
			if (p === appDescr.$application.$homeDashboard.$uuid) {
				homeId = info.id;
			}
			_pages[info.id] = info;
		}
	}
	if (appDescr.$pages) {
		for (var p in appDescr.$pages) {
			info = $.extend(true, {}, _defInfo);
			info.type = "regular";
			_pages[p] = info;
		}
	}
	if (!homeId) throw new Error("No home dashboard Id found in application description");
	return homeId;
};

/* Module initialization */
var _init = function() {
	_resetPages();
};

exports.Page = _Page;
exports.pageInfo = _pageInfo;
exports.registerAppPages = _registerAppPages;
exports.init = _init;