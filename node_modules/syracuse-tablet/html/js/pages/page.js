"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("page");
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');

var _templates = {
	fullpage: '\
		<div class="page" data-appid="{{appid}}" style=""> \
			<header class="s-m-header"></header> \
			<section class="s-m-content"></section> \
			<footer class="s-m-footer"></footer> \
		</div> \
	',
	vignette: '<section id={{appid}} class="s-m-vignette-content-slot"><\section>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};


/**
 * Base class for all pages
 *  $parent: Parent element
 * 	state: Page information - JSON structure stored in history
 *  prototype: Prototype object (class prototype)
 *  article: JSON article
 *  !! Temporarily prototype and article can be null for html pages
 */
var _Page = utils.defineClass(
	function($parent, state, prototype, article) {
		var self = this;
		// article, prototype, rootLayout null for html pages
		self.prototype = prototype;
		self.article = article;
		self.rootLayout = null;
		self.headerCtrl = null;
		self.vignette = state.options && state.options.vignette;
		// For breadCrumb
		self.historyLength = 0;
		self.historyTitle = state.id;
		self._$parent = $parent;
		self.state = state;
		self.id = state.uuid;
		self.controlsMap = {};
		self.dao = null;
		self._initRootElmt($parent);
	}, null, {

		/**
		 * Create and return root DOM element of every page
		 */
		_initRootElmt: function($parent) {
			var self = this;
			var root, ctx = {
					appid: self.state.appId
				};
			if (self.vignette) {
				self.$$contentElmt = self.$$elmt = $(_getHtml("vignette", ctx));
			} else {
				self.$$elmt = $(_getHtml("fullpage", ctx));
				self.$$headerElmt = self.$$elmt.find("header.s-m-header");
				self.$$footerElmt = self.$$elmt.find("footer.s-m-footer");
				self.$$contentElmt = self.$$elmt.find("section.s-m-content");
			}
			self.$$elmt.hide();
			self.$$elmt.appendTo($parent);
			self.$$elmt.smPageController(self);
		},

		destroy: function() {
			var self = this;
			if (!self.$$elmt) return;
			log && log("Page destroy", self.id);
			if (self.getProp["type"] === "appdashboard") {
				// appdashboard page -> Destroy all related pages
				self._destroyAppChilds();
			}
			if (self.headerCtrl) {
				self.headerCtrl.destroy();
				self.headerCtrl = null;
			}
			self.article = null;
			self.prototype = null;
			self._$parent = null;
			utils.unbindObj(self.$$elmt);
			self.$$elmt = null;
			utils.unbindObj(self);
			if (self.controlsMap) {
				for (var id in self.controlsMap) {
					self.controlsMap[id].destroy();
				}
			}
			self.controlsMap = null;
			if (self.dao) self.dao.destroy();
			self.dao = null;
		},

		_destroyAppChilds: function() {
			var self = this;
			if (self.$$elmt) {
				// destroy all page that belongs to an application except this (dashboard)
				var childs = self._$parent.find('.class[data-appId="' + self.getProp("appId") + '"]');
				if (childs.length > 0) {
					log && log("Page destroychilds", self.id);
					childs.each(function(idx) {
						var ctrl = $(this).smPageController();
						if (ctrl && ctrl != self) ctrl.destroy();
					});
				}
			}
		},

		destroySiblings: function() {
			var self = this;
			if (self.$$elmt) {
				// destroy all siblings if any when direct access with the breadcrumb
				log && log("Page destroySiblings", "destroySiblings");
				var next = self.$$elmt.siblings(function(idx) {
					var ctrl = $(this).smPageController();
					if (ctrl) ctrl.destroy();
				});
			}
		},

		getProp: function(prop) {
			return this.state[prop];
		},

		setDao: function(dao) {
			var self = this;
			if (self.dao && self.dao.destroy) self.dao.destroy();
			self.dao = dao;
		},

		getDao: function() {
			return this.dao;
		},

		load: function() {
			var self = this;
			var deferred = $.Deferred();

			try {
				self.loadStructure()
					.then(function() {
						return self.loadData();
					})
					.then(function(html) {
						return self.render(html);
					})
					.then(function() {
						return self.afterRender();
					})
					.then(function() {
						deferred.resolve();
					}, function(e) {
						deferred.reject(e);
					});
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		loadStructure: function() {
			var deferred = $.Deferred();
			var self = this;
			try {
				if (!self.article || !self.prototype) throw new Error("loadStructure - NULL article or prototype");
				if (self.$$headerElmt) {
					self.headerCtrl = ctrlFactory.createPageHeader(self, self.article, self.prototype);
				}
				self.rootLayout = articleParser.article2Controls(self, self.article, self.prototype);

				deferred.resolve();
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		loadData: function() {
			var deferred = $.Deferred();
			var self = this;
			try {
				self.setDao(null);
				deferred.resolve();
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		/**
		 *
		 */
		render: function() {
			var self = this;

			try {
				if (!self.rootLayout) {
					throw new Error("buildHtml - NULL rootLayout");
				}

				if (self.headerCtrl) {
					self.headerCtrl.buildHtml(self.$$headerElmt, self.dao);
				}

				if (self.$$contentElmt) {
					self._beforeAddContent();
					self.rootLayout.buildHtml(self.$$contentElmt, self.dao, null);
				}
			} catch (e) {
				return $.smReject(e);
			}
			return $.smResolve();
		},

		isEditMode: function() {
			return false;
		},

		_beforeAddContent: function() {

		},

		addTitle: function(title, description) {
			var self = this;
			var html = "";
			if (title) html = '<h3 class="s-m-page-title">' + title + '</h3>';
			if (description) html += '<p>' + description + '<p>';
			if (html.length > 0) $(html).prependTo(self.$$contentElmt);
		},

		afterRender: function() {
			var self = this;
			var deferred = $.Deferred();
			try {
				uiutils.bindActions(self);
				deferred.resolve();
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		/**
		 *  called each tile a control/layout is created
		 **/
		addControl: function(c) {
			if (!c) return;
			this.controlsMap[c.id] = c;
		},
		/**
		 * return the control/layout
		 * 	id:  id attribute of dom element
		 * */
		getControl: function(id) {
			return this.controlsMap[id];
		},

		activate: function(currentPage, cb) {
			var self = this;
			log && log("Page activate", self.id);
			self.historyLength = window.history.length;
			self._show(currentPage, cb);
		},

		deactivate: function(currentPage, cb) {
			var self = this;
			log && log("Page deactivate", self.id);
			self._hide(currentPage, cb);
		},

		_show: function(currentPage, cb) {
			var self = this;
			var transition = self.getProp("transition");
			if (currentPage) {
				currentPage._hide(function() {
					self.$$elmt.show(transition || 0, function() {
						if (cb) cb();
					});
				});
				return;
			}
			self.$$elmt.show(transition == null ? 0 : transition, cb);
		},

		_hide: function(cb) {
			var self = this;
			if (!self.$$elmt) {
				if (cb) cb();
				// page has been destroyed
				return;
			}
			var transition = self.getProp("transition");
			self.$$elmt.hide(transition == null ? 0 : transition, cb);
		},

		isActive: function() {
			var self = this;
			return self.$$elmt && self.$$elmt.is(":visible");
		},
		isVignette: function() {
			var self = this;
			return self.vignette === true;
		},
		/**
		 * Returns attribute for the link that opens this page (used to open this page from a vignette to full page)
		 * Overriden by regular page to put s-data-url
		 */
		getOpenLinkAttrs: function() {
			return {
				"data-nav": this.state.name
			};
		}
	}
);

exports.Page = _Page;
exports.Page.uiutils = uiutils;