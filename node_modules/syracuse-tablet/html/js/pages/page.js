"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("page");
var uiutils = require('syracuse-tablet/html/js/ui/utils');
var templates = require('syracuse-tablet/html/js/helpers/templating');
var factory = require('syracuse-tablet/html/js/factories/appFactory');
var modal = require('syracuse-tablet/html/js/ui/modal');
var auth = require('syracuse-tablet/html/js/application/authentication');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _consts = exports.consts = {
	tmplPage: "pages/",
	tmplDefHeader: "pages/default/header",
	tmplRoot: "templates/pages/",
	dataFile: "/data.json",
	tmplHead: "header",
	tmplMain: "main"
};
var _defInfo = {
	home: false,
	type: "regular",
	cached: false,
	refreshed: false,
	appId: "root",
	changeHash: false
};
var _staticPages = {
	"login": {
		type: "static"
	},
	"defhome": {
		type: "static"
	}
};

var _pages = {};

var _resetPages = function() {
	for (var p in _staticPages) {
		_pages[p] = $.extend(true, {}, _defInfo, _staticPages[p]);
	}
};

//Pages declaration
var _Page = utils.defineClass(
	function($parent, state) {
		var self = this;
		// For breadCrumb
		self.historyLength = 0;
		self.historyTitle = state.id;
		self._$parent = $parent;
		self.state = state;
		self.id = state.uuid;
		var html = templates.execSync("pageTmpl", {
			uuid: self.state.uuid,
			klass: "",
			appId: self.state.appId
		});
		self.$elmt = $(html).hide();
		self.$elmt.appendTo(self._$parent);
		$(self.$elmt).smPageController(this);
	}, null, {

		destroy: function() {
			var self = this;
			if (!self.$elmt) return;
			log && log("Page destroy", self.id);
			if (self.getProp["type"] === "appdashboard") {
				// appdashboard page -> Destroy all related pages
				self._destroyAppChilds();
			}
			self.$elmt.smPageRemoveController();
			self.$elmt.unbind();
			self.$elmt.off();
			self.$elmt.remove();
			self._$parent = null;
			self.$elmt = null;
		},

		_destroyAppChilds: function() {
			var self = this;
			if (self.$elmt) {
				// destroy all page that belongs to an application except this (dashboard)
				var childs = self._$parent.find('.class[data-appId="' + self.getProp("appId") + '"]');
				if (childs.length > 0) {
					log && log("Page destroychilds", self.id);
					childs.each(function(idx) {
						var ctrl = $(this).smPageController();
						if (ctrl && ctrl != self) ctrl.destroy();
					});
				}
			}
		},

		destroySiblings: function() {
			var self = this;
			if (self.$elmt) {
				// destroy all siblings if any when direct access with the breadcrumb
				log && log("Page destroySiblings", "destroySiblings");
				var next = self.$elmt.siblings(function(idx) {
					var ctrl = $(this).smPageController();
					if (ctrl) ctrl.destroy();
				});
			}
		},

		getProp: function(prop) {
			return this.state[prop];
		},

		load: function() {
			var self = this;
			var deferred = $.Deferred();
			self.loadStructure().then(function(ui) {
				self.ui = ui;
				return self.loadData();
			}).then(function(data) {
				return self.buildHtml(data);
			}).then(function(html) {
				return self.render(html);
			}).then(function() {
				self.bindEvents();
				deferred.resolve();
			}, function(e) {
				deferred.reject(e);
			});
			return deferred.promise();
		},

		loadStructure: function() {
			var self = this;
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},

		loadData: function() {
			var self = this;
			var deferred = $.Deferred();
			deferred.resolve({});
			return deferred.promise();
		},

		buildHtml: function(data) {
			var self = this;
			var deferred = $.Deferred();
			deferred.resolve({
				header: templates.execSync("contructionHeadTmpl", {
					title: "Sage X3 Mobile",
					pageId: self.id,
					logout: "logout"
				}),
				content: templates.execSync("contructionContentTmpl", {
					name: self.state.name,
					type: self.state.type
				})
			});
			return deferred.promise();
		},

		render: function(html) {
			var self = this;
			var deferred = $.Deferred();
			$(document.body);
			self.$elmt.children("header").html(html.header);
			self.$elmt.children("section").html(html.content);
			deferred.resolve();
			return deferred.promise();
		},

		bindEvents: function() {
			var self = this;
			uiutils.bindActions(self);
		},

		/* Header actions are processed by the page */
		_actBack: function() {
			window.history.back();
		},

		/* Header actions are processed by the page */
		_actLogout: function() {
			var deferred = $.Deferred();
			modal.confirm("logout", function(confirmed) {
				if (confirmed) {
					auth.logout().always(function(ok, message) {
						if (ok) {
							notifications.publish("sm.logout");
							deferred.resolve({
								page: "login"
							});
						} else {
							modal.error(message, function() {
								deferred.resolve(null);
							});
						}
					});
				} else {
					deferred.resolve(null);
				}
			});
			return deferred.promise();
		},

		activate: function(currentPage, cb) {
			var self = this;
			log && log("Page activate", self.id);
			self.historyLength = history.length;
			self._show(currentPage, cb);
		},

		deactivate: function(currentPage, cb) {
			var self = this;
			log && log("Page deactivate", self.id);
			self._hide(currentPage, cb);
		},

		_show: function(currentPage, cb) {
			var self = this;
			var transition = self.getProp("transition");
			if (currentPage) {
				currentPage._hide(function() {
					self.$elmt.show(transition || 0, function() {
						if (cb) cb();
					});
				});
				return;
			}
			self.$elmt.show(transition == null ? 0 : transition, cb);
		},

		_hide: function(cb) {
			var self = this;
			if (!self.$elmt) {
				if (cb) cb();
				// page has been destroyed
				return;
			}
			var transition = self.getProp("transition");
			self.$elmt.hide(transition == null ? 0 : transition, cb);
		},

		getPageRepresentation: function($uuid) {
			var gadgetUuid = $sm.$homeDashboard.$vignettes[$uuid].$uuid;
			var pageNodeName;
			if ($sm.$gadgets[gadgetUuid].$type == "$representation") {
				pageNodeName = $sm.$gadgets[gadgetUuid].representation + "." + $sm.$gadgets[gadgetUuid].facet;
			} else {
				//TODO
				throw new Error("The process for this type of gadget is not implemented yet !");
			}
			return $sm.$pages[pageNodeName].$page;
		},

	});

var _pageInfo = function(id, clone) {
	var i;
	if (!i) i = _pages[id];
	if (i && clone === true) i = $.extend(true, {}, i);
	return i;
};

/* Register the pages of a Syracause Mobile Application*/
var _registerAppPages = function(appDescr) {
	_resetPages();
	if (!appDescr) return;
	var i;
	if (appDescr.$dashboards) {
		for (var p in appDescr.$dashboards) {
			i = $.extend(true, {}, _defInfo);
			i.type = "dashboard";
			// Name is used for readable dom ids - i guarantee unic ids 
			i.name = p.$dashboardName + i;
			_pages[p] = i;
		}
	}
	if (appDescr.$pages) {
		for (var p in appDescr.$pages) {
			i = $.extend(true, {}, _defInfo);
			i.type = "regular";
			_pages[p] = i;
		}
	}
};

exports.Page = _Page;
exports.pageInfo = _pageInfo;
exports.registerAppPages = _registerAppPages;

/* Module initialization */
(function() {
	_resetPages();
})();