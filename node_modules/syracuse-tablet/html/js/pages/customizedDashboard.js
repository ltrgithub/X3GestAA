"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var Base = require('syracuse-tablet/html/js/pages/pageDashboard').Page;
var modalConfigTile = require('syracuse-tablet/html/js/ui/modals/modalConfigTile');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');
var dragManager = require('syracuse-tablet/html/js/ui/dragManager').DragManager;
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var _initConfigPage = false;
var _scroll = 0;
var _Page = utils.defineClass(

	function CustomizedDashboard($parent, state, prototype, article, options) {
		Base.call(this, $parent, state, prototype, article, options);
	}, Base, {
		destroy: function() {
			this.destroyConfigHeader();
			Base.prototype.destroy.call(this);
		},
		afterRender: function(loadOptions, buildOpts) {
			var self = this;
			// This page is loaded synchronously - We need to wait until all vignettes has been loaded to continue
			// Needed by the restoreContext process (see application.notifUserLoggedIn)
			loadOptions.forceSynchroVignettes = true;
			return Base.prototype.afterRender.call(self, loadOptions, buildOpts).then(function() {
				if (_initConfigPage) {
					self._toggleConfigPage("enable");
				}
				_initConfigPage = false;
				if (_scroll === -1) {
					setTimeout(function() {
						self.getGestureMgr().makeVisible($(".s-m-hub-group:last", self.$$contentElmt))
					}, 500)
				} else {
					self.getGestureMgr().autoScroll(_scroll);
				}
			});
		},
		_actPageConfig: function() {
			var self = this;
			self._toggleConfigPage();
		},

		_actCancelPageConfig: function() {
			var self = this;
			self._toggleConfigPage();
		},
		_actPublishPageConfig: function() {},
		_actRemoveTile: function(vignetteId) {},
		_actRemoveGroup: function(id) {
			var self = this;
			var layout = self.getLayout(id);
			return globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName")).then(function(dashboard) {
				var idx = $.inArray(layout.article, self.article.$items);
				if (idx >= 0) {
					self.article.$items.splice(idx, 1);
				};
				dashboard.$article = self.article;
				return dashboard;
			})
		},
		_actEditGroup: function(id) {
			var self = this;
			var $$titleFocus
			$(".s-m-layout.s-m-hub-group").each(function(idx) {
				var layoutId = $(this).attr("id")
				var layout = self.getLayout(layoutId);
				var $$title = $(".title", layout.$$header);
				$$title.attr("contentEditable", function(i, val) {
					if (layoutId === id && (!val || val === "false")) {
						$$title.on("blur", jsutils.bindFn(self._titleChange, self, {
							"layout": layout,
							"title": $$title
						}));
						$$titleFocus = $$title;
						return true
					} else {
						return false
					}
				})
			});
			if ($$titleFocus) {
				$$titleFocus.focus();
				$$titleFocus.select();
			}
		},
		_titleChange: function(event, opt) {
			var self = this;
			opt.title.attr("contentEditable", false);
			opt.title.off("blur");
			self._changeHubGroupTitle(opt.layout, opt.title.text());
		},
		_changeHubGroupTitle: function(layout, newTitleText) {
			var self = this;
			return globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName")).then(function(dashboard) {
				var idx = $.inArray(layout.article, self.article.$items);
				if (idx >= 0 && self.article.$items[idx].$title !== newTitleText) {
					$("[data-action='savePersonalDashboard'],[data-action='publishDashboard']", self._configHeader.$$header).show();
					self.article.$items[idx].$title = newTitleText;
					dashboard.$article = self.article;
				};
				return dashboard;
			})
		},
		_afterChangePage: function(opts) {
			var options = opts || {};
			var self = this;
			self._toggleConfigPage();
			_initConfigPage = true; // Force auto start of page config on reload
			//Be careful need to go to current
			_scroll = options.addGroup ? -1 : self.getGestureMgr().getScroll();
		},
		_actConfigTile: function(vignetteId) {
			var self = this;

			var ti = self._getTileInfo(vignetteId);
			var classes = ti.$$tile.attr("class");

			var size = "medium";
			var cls = classes.split(" ");
			var validSizes = ["small", "medium", "wide", "large", "full", "all"];
			cls && cls.some(function(c) {
				if (validSizes.indexOf(c) > -1) {
					size = c;
					return true;
				}
				return false;
			});

			var color = /s-m-color-(\w+)/.exec(classes);
			color = (color && color.length > 1 && color[1]) || "darkgrey";
			var tile = {
				title: ti.gadget.$title,
				color: color,
				size: size,
				icon: ti.gadget.icon
			};
			var modal = new modalConfigTile.Modal(tile);
			modal.show().then(function(result) {
				if (result != null) {
					self._applyTileChanges(ti, result);
				}
			});
		},
		_applyTileChanges: function(tileInfo, tile) {

		},
		_toggleConfigPage: function(forceStatus) {
			if (!this._configHeader) {
				this._configHeader = ctrlFactory.createDashboardConfigHeader(this, this._getHeaderOptions())
			}
			var enable = forceStatus != null ? forceStatus == "enable" : !this.configActive;
			this.toggleHeaderFooter("header", this._configHeader, enable);
			if (enable === true) {
				this.enabledConfig();
			} else {
				this.disableConfig();
			}
		},
		destroyConfigHeader: function() {
			if (!this._configHeader) return;
			// remove from controller and restore regular one (null)
			this.toggleHeaderFooter("header", null);
			this.removeControl(this._configHeader);
			this._configHeader.destroy();
			this._configHeader = null;
		},
		_getHeaderOptions: function() {
			return null;
		},
		_actCloseDashboardConfig: function() {
			this._toggleConfigPage("disable")
		},
		enabledConfig: function(options) {
			var self = this;
			self.configActive = true;

			var $$tiles = $(".s-m-tile", self.$$elmt);
			$$tiles.addClass("s-m-tile-edit");
			for (var i = 0; i < $$tiles.length; i++) {
				var $$tile = $($$tiles[i]);
				$$tile.attr("data-tile-config-id", i);
				$$tile.attr("data-disable-navigation", true);
				var $$vignette = $(".s-m-vignette", $$tile);
				$$tile.append($('<div class="insert top" data-param="top" data-vignette-id="' + $$vignette.attr('id') + '"><btn class="cfg fa fa-arrow-up"></div>'));
				$$tile.append($('<div class="insert bottom" data-param="bottom" data-vignette-id="' + $$vignette.attr('id') + '"><btn class="cfg fa fa-arrow-down"></div>'));
				$$tile.append($('<div class="insert left" data-param="left" data-vignette-id="' + $$vignette.attr('id') + '"><btn class="cfg fa fa-arrow-left"></div>'));
				$$tile.append($('<div class="insert right" data-param="right" data-vignette-id="' + $$vignette.attr('id') + '"><btn class="cfg fa fa-arrow-right"></div>'));
				$$tile.append($('<btn class="cfg config fa fa-pencil" data-action="configTile" data-params="' + $$vignette.attr('id') + '">'));
				$$tile.append($('<btn class="cfg remove fa fa-trash-o" data-action="removeTile" data-params="' + $$vignette.attr('id') + '">'));
			}
			var $$hubGroups = $(".s-m-hub-group", self.$$elmt);
			$$hubGroups.each(function() {
				var layout = self.getLayout($(this).attr("id"));
				if (layout.isEditable) {
					layout.$$header.append($('<btn class="cfg remove fa fa-pencil" data-action="editGroup" data-params="' + $(this).attr("id") + '">'));
				}
				if (layout.isDeletable && (!layout.children || layout.children.length === 0)) {
					layout.$$header.append($('<btn class="cfg remove fa fa-trash-o" data-action="removeGroup" data-params="' + $(this).attr("id") + '">'));
				}
			});
			var dragOpts = {
				selector: ".s-m-hub-group>header,.s-m-tile",
				notify: {
					start: "sm.drag.start",
					stop: "sm.drag.stop",
				},
				options: {
					opacity: 0.4,
					delay: 200,
					helper: "clone"
				}
			};
			var dropOpts = {
				selector: ".s-m-hub-group,.insert",
				notify: {
					drop: "sm.element.drop",
					out: "sm.element.out",
					over: "sm.element.over"
				},
				options: {
					helper: "clone",
				}
			};
			self.dragManager = new dragManager(dragOpts, dropOpts, self.$$elmt);
			notifications.subscribe(self, self.dragManager.getNotifs());

			self.getPageControl("footer").hide();
		},
		disableConfig: function() {
			var self = this;
			_scroll = 0;
			if (self.dragManager) {
				notifications.unsubscribe(self, self.dragManager.getNotifs());
				self.dragManager.destroy();
				self.dragManager = null;
			}
			self.configActive = false;
			if (self.$$pageConfigHeader) {;
				self.$$pageConfigHeader.remove();
				self.$$pageConfigHeader = null;

			}
			self.getPageControl("footer").show()
			$(".s-m-tile-edit").removeClass("s-m-tile-edit");
			$(".s-m-tile btn.remove", self.$elmt).remove();
			$(".s-m-tile btn.config", self.$elmt).remove();
		},
		notifDragStart: function($$dragElt, ui) {
			if ($$dragElt.is(".s-m-hub-group>header")) {
				$$dragElt.closest(".s-m-hub-group").toggleClass("s-m-not-droppable", true);
				ui.helper.css("width", ui.helper.css("width"));
				ui.helper.css("background-color", "#009fda");
				ui.helper.css("color", "white");
			}
		},
		notifDragStop: function($$dragElt, ui) {
			if ($$dragElt.is(".s-m-hub-group>header")) {
				$$dragElt.closest(".s-m-hub-group").toggleClass("s-m-not-droppable", false);
				return
			}
		},
		notifElementDrop: function($$dropElt, ui, params) {
			var $$dragElt = ui.draggable;
			if ($$dragElt.hasClass("s-m-tile")) this._tileDrop($$dropElt, $$dragElt, params)
			if ($$dragElt.is(".s-m-hub-group > header")) this._groupDrop($$dropElt, $$dragElt, params)
		},
		_tileDrop: function($$dropElt, $$dragElt, params) {
			var optsMoveTile = this._getOptsMoveTile($$dropElt, $$dragElt, params)
			if (optsMoveTile.where === "append" && !$$dropElt.hasClass("empty")) return
			this._moveTile(optsMoveTile);
		},
		_groupDrop: function($$dropElt, $$dragElt, params) {
			var layoutTarget = this._layoutsMap[$$dropElt.attr("id")];
			var $$goupToMove = $$dragElt.closest(".s-m-hub-group");
			var layoutToMove = this._layoutsMap[$$goupToMove.attr("id")];
			this._moveGroup(layoutTarget, layoutToMove);
		},
		_getOptsMoveTile: function($$dropElt, $$dragElt, params) {
			var optMoveTile = {
				dropId: $$dropElt.attr("id"),
				dragId: $(".s-m-vignette", $$dragElt).attr("id"),
				where: "append" // Append inside group
			};
			if ($$dropElt.hasClass("insert")) {
				optMoveTile.dropId = params ? params.target : $$dropElt.attr("data-vignette-id");
				optMoveTile.where = params ? (params.before ? "top" : "bottom") : $$dropElt.attr("data-param");
			};
			return optMoveTile;
		},
		notifElementOut: function($$dropElt, ui) {
			var $$dragElt = ui.draggable;
			if ($$dragElt.is(".s-m-hub-group>header")) {
				var $$group = $$dropElt.closest(".s-m-hub-group");
				$$group.toggleClass("s-m-over-droptarget", false);
			}
			this.dragManager.hideIndicator();
		},
		notifElementOver: function($$dropElt, ui) {
			var $$dragElt = ui.draggable;
			if ($$dragElt.hasClass("s-m-tile")) this._tileOver($$dropElt, $$dragElt)
			if ($$dragElt.is(".s-m-hub-group>header")) this._groupOver($$dropElt, $$dragElt)
		},
		_tileOver: function($$dropElt, $$dragElt) {
			var optsMoveTile = this._getOptsMoveTile($$dropElt, $$dragElt);
			var cellOrigineInfo = this._getCellInfo(optsMoveTile.dragId);
			var targetInfo = (optsMoveTile.where === "append" && $$dropElt.hasClass("empty")) ? this._getGroupInfo(optsMoveTile.dropId, $$dropElt) : this._getCellInfo(optsMoveTile.dropId);

			var where = this._tileWhere(optsMoveTile, cellOrigineInfo, targetInfo);

			if (where && where.parent) {
				var opts = {
					top: where.top,
					left: where.left,
					height: where.height,
					width: where.width,
					$$parent: where.parent,
				};
				this.dragManager.showIndicator(opts, {
					before: where.before,
					target: where.idTileTarget || where.idTarget
				});
			} else {
				this.dragManager.hideIndicator();
			}
		},
		_groupOver: function($$dropElt, $$dragElt) {
			var $$group = $$dropElt.closest(".s-m-hub-group");
			if ($$group.hasClass("s-m-not-droppable")) return
			$$group.toggleClass("s-m-over-droptarget", true);
			var $$header = $("header:first", $$group);
			if ($$header.length > 0) {
				var opts = {
					$$parent: $$group,
				};
				this.dragManager.showIndicator(opts, {
					before: false,
					target: ""
				});
			} else {
				this.dragManager.hideIndicator();
			}
		},
		_moveTile: function(optsMoveTile, cellOrigineInfo, cellTargetInfo) {

		},
		_tileWhere: function(optsMoveTile, cellOrigineInfo, targetInfo) {
			if (optsMoveTile.where === "append") {
				//append to empty group: target is group (no tile no cell)
				return {
					top: parseInt($("header", targetInfo.targetElmt).css("height"), 10) + "px",
					left: "0px",
					width: cellOrigineInfo.$$tile.css("width"),
					height: "10px",
					idTarget: targetInfo.id,
					before: false,
					parent: targetInfo.targetElmt
				}
			};
			var layoutGroup = targetInfo.tileCtrl.parent.parent;
			var before = (optsMoveTile.where === "top" || optsMoveTile.where === "left");
			var where;
			switch (cellOrigineInfo.tileSize) {
				case "small":
					if (targetInfo.tileSize === "small" || targetInfo.tileSize === "medium") {
						where = {
							top: "0px",
							left: before ? "-5px" : (parseInt(targetInfo.$$tile.css("width"), 10) - 5) + "px",
							width: "10px",
							height: cellOrigineInfo.$$tile.css("height"),
							parent: targetInfo.$$tile,
						}
					} else {
						where = {
							top: before ? "-5px" : (layoutGroup.cells[targetInfo.cellIndex].h - 5) + "px",
							left: "0px",
							width: cellOrigineInfo.$$tile.css("width"),
							height: "10px",
							parent: targetInfo.cellDomItem
						}
					}
					break;
				case "medium":
					if (targetInfo.tileSize === "small" || targetInfo.tileSize === "medium") {
						where = {
							top: "0px",
							left: before ? "-5px" : (layoutGroup.cells[targetInfo.cellIndex].w - 5) + "px",
							width: "10px",
							height: cellOrigineInfo.$$tile.css("height"),
							parent: targetInfo.cellDomItem
						}
					} else {
						where = {
							top: before ? "-5px" : (layoutGroup.cells[targetInfo.cellIndex].h - 5) + "px",
							left: "0px",
							width: cellOrigineInfo.$$tile.css("width"),
							height: "10px",
							parent: targetInfo.cellDomItem
						}
					};
					break;
				case "wide":
				case "large":
				case "full":
					where = {
						top: before ? "-5px" : (layoutGroup.cells[targetInfo.cellIndex].h - 5) + "px",
						left: "0px",
						width: cellOrigineInfo.$$tile.css("width"),
						height: "10px",
						parent: (targetInfo.cellColumn % 2) ? layoutGroup.cells[targetInfo.cellIndex - 1].domItem : targetInfo.cellDomItem
					}
					break;
				case "all ":
					break
			}
			if (where) {
				//Get first or last tile id of the destination cell depending on before
				var layoutTile = targetInfo.cellChildren[(before ? 0 : targetInfo.cellChildren.length - 1)];
				where.idTileTarget = layoutTile.children[0].id;
				where.before = before;
			}
			return where;
		},
		_getCellInfo: function(tileId) {
			var tileInfos = this._getTileInfo(tileId);
			if (!tileInfos) return {}
			var layoutGroup = tileInfos.ctrl.parent.parent;
			var $$dhtmlCell = tileInfos.ctrl.$$elmt.parent().parent();
			var index = $$dhtmlCell.attr("data-cellIndex");
			var cells = layoutGroup.cells;
			return {
				tileSize: tileInfos.size,
				tileCtrl: tileInfos.ctrl,
				$$tile: tileInfos.$$tile,
				cellIndex: index,
				cellDomItem: cells[index].domItem,
				cellColumn: cells[index].abs,
				cellChildren: cells[index].children
			}
		},
		_getTileInfo: function(vignetteId) {
			var ctrl = this.getControl(vignetteId);
			if (!ctrl) {
				return;
			}
			var $$vignette = $("#" + vignetteId);
			var $$tile = $$vignette.closest(".s-m-tile");
			return {
				$$tile: $$tile,
				$$vignette: $$vignette,
				$$remove: $(".s-m-tile btn.remove", $$tile),
				ctrl: ctrl,
				gadget: ctrl.prototype.data("$gadget"),
				size: ctrl.parent.article.$size,
			};
		},
		_getGroupInfo: function(groupId, $$elmt) {
			return {
				id: groupId,
				targetElmt: $$elmt
			}
		},
		/**
		 * Return always false to force to load this page even if it's the current one (context could change and we need to reload the page))
		 */
		isSamePage: function(state) {
			return false;
		}
	});

exports.Page = _Page;