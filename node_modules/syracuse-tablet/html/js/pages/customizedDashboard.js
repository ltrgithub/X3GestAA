"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/pages/pageDashboard').Page;
var modalConfigTile = require('syracuse-tablet/html/js/ui/modals/modalConfigTile');
var dashboardUtils = require('syracuse-tablet/html/js/helpers/dashboardUtils');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');

var _initConfigPage = false;

var _Page = utils.defineClass(

	function CustomizedDashboard($parent, state, prototype, article, options) {
		Base.call(this, $parent, state, prototype, article, options);
	}, Base, {
		destroy: function() {
			this.destroyConfigHeader();
			Base.prototype.destroy.call(this);
		},
		afterRender: function(loadOptions, buildOpts) {
			var self = this;
			// This page is loaded synchronously - We need to wait until all vignettes has been loaded to continue
			// Needed by the restoreContext process (see application.notifUserLoggedIn)
			loadOptions.forceSynchroVignettes = true;
			return Base.prototype.afterRender.call(self, loadOptions, buildOpts).then(function() {
				if (_initConfigPage) {
					self._toggleConfigPage("enable");
				}
				_initConfigPage = false;
			});
		},
		_actPageConfig: function() {
			var self = this;
			self._toggleConfigPage();
		},

		_actCancelPageConfig: function() {
			var self = this;
			self._toggleConfigPage();
		},
		_actPublishPageConfig: function() {},
		_actRemoveTile: function(vignetteId) {},
		afterChangePage: function() {
			var self = this;
			self._toggleConfigPage();
			_initConfigPage = true; // Force auto start of page config on reload
			//Be careful need to go to current 
		},

		_actConfigTile: function(vignetteId) {
			var self = this;

			var ti = self._getTileInfo(vignetteId);
			var classes = ti.$$tile.attr("class");

			var size = "medium";
			var cls = classes.split(" ");
			var validSizes = ["small", "medium", "wide", "large", "full", "all"];
			cls && cls.some(function(c) {
				if (validSizes.indexOf(c) > -1) {
					size = c;
					return true;
				}
				return false;
			});

			var color = /s-m-color-(\w+)/.exec(classes);
			color = (color && color.length > 1 && color[1]) || "darkgrey";
			var tile = {
				title: ti.gadget.$title,
				color: color,
				size: size,
				icon: ti.gadget.icon
			};
			var modal = new modalConfigTile.Modal(tile);
			modal.show().then(function(result) {
				if (result != null) {
					self._applyTileChanges(ti, result);
				}
			});
		},

		_applyTileChanges: function(tileInfo, tile) {

		},
		_toggleConfigPage: function(forceStatus) {
			if (!this._configHeader) {
				this._configHeader = ctrlFactory.createDashboardConfigHeader(this)
			}
			var enable = forceStatus != null ? forceStatus == "enable" : !this.configActive;
			this.toggleHeaderFooter("header", this._configHeader, enable);
			if (enable === true) {
				this.enabledConfig();
			} else {
				this.disableConfig();
			}
		},
		destroyConfigHeader: function() {
			if (!this._configHeader) return;
			// remove from controller and restore regular one (null)
			this.toggleHeaderFooter("header", null);
			this.removeControl(this._configHeader);
			this._configHeader.destroy();
			this._configHeader = null;
		},
		_actCloseDashboardConfig: function() {
			this._toggleConfigPage("disable")
		},
		enabledConfig: function(options) {
			var self = this;
			self.configActive = true;

			var $$tiles = $(".s-m-tile", self.$$elmt);
			$$tiles.addClass("s-m-tile-edit");
			for (var i = 0; i < $$tiles.length; i++) {
				var $$tile = $($$tiles[i]);
				$$tile.attr("data-tile-config-id", i);

				var $$vignette = $(".s-m-vignette", $$tile);
				$$tile.append($('<btn class="cfg config fa fa-pencil" data-action="configTile" data-params="' + $$vignette.attr('id') + '">'));
				$$tile.append($('<btn class="cfg remove fa fa-trash-o" data-action="removeTile" data-params="' + $$vignette.attr('id') + '">'));
			}
			if (false) {
				var $$header = $(".s-m-control.header", self.$elmt);
				self.$$pageConfigHeader = $(
					'<div class="s-m-page-config-header">\
						<div class="pull-left">\
							<btn class="hidden addapp btn fa fa-cubes" data-action="addHiddenTile">' + options.addHiddenTileLabel + '\
							</btn>\
						</div>\
				  	<div class="pull-right">\
						<btn class="cancel btn fa fa-upload hidden" data-action="publishPageConfig"></btn>\
						<btn class="cancel btn glyphicon glyphicon-remove" data-action="cancelPageConfig"></btn>\
					</div>\
				</div>');

				$$header.append(self.$$pageConfigHeader);
				var unbind = dashboardUtils.getUnbindProperties(self.article, self.prototype.getPropertyNames());
				if (unbind.length > 0) {
					$('[data-action=addHiddenTile]', $$header).removeClass("hidden");
				}
				$('[data-action=publishPageConfig]', $$header).toggleClass("hidden", globals.getSecurityProfile().factoryId === "");
			}

			$(".s-m-control.footer", self.$elmt).css({
				display: "none"
			});
		},
		disableConfig: function() {
			var self = this;
			self.configActive = false;
			if (self.$$pageConfigHeader) {;
				self.$$pageConfigHeader.remove();
				self.$$pageConfigHeader = null;

			}
			$(".s-m-control.footer", self.$elmt).css({
				display: "block"
			});
			$(".s-m-tile-edit").removeClass("s-m-tile-edit");
			$(".s-m-tile btn.remove", self.$elmt).remove();
			$(".s-m-tile btn.config", self.$elmt).remove();
		},
		_getTileInfo: function(vignetteId) {
			var ctrl = this.getControl(vignetteId);
			if (!ctrl) {
				return;
			}
			var $$vignette = $("#" + vignetteId);
			var $$tile = $$vignette.closest(".s-m-tile");
			return {
				$$tile: $$tile,
				$$vignette: $$vignette,
				$$remove: $(".s-m-tile btn.remove", $$tile),
				ctrl: ctrl,
				gadget: ctrl.prototype.data("$gadget"),
			};
		},
		/**
		 * Return always false to force to load this page even if it's the current one (context could change and we need to reload the page))
		 */
		isSamePage: function(state) {
			return false;
		}
	});

exports.Page = _Page;