"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var Base = require('syracuse-tablet/html/js/pages/pageDashboard').Page;
var modalConfigTile = require('syracuse-tablet/html/js/ui/modals/modalConfigTile');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');
var dragManager = require('syracuse-tablet/html/js/ui/dragManager').DragManager;
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var _initConfigPage = false;

var _Page = utils.defineClass(

	function CustomizedDashboard($parent, state, prototype, article, options) {
		Base.call(this, $parent, state, prototype, article, options);
	}, Base, {
		destroy: function() {
			this.destroyConfigHeader();
			Base.prototype.destroy.call(this);
		},
		afterRender: function(loadOptions, buildOpts) {
			var self = this;
			// This page is loaded synchronously - We need to wait until all vignettes has been loaded to continue
			// Needed by the restoreContext process (see application.notifUserLoggedIn)
			loadOptions.forceSynchroVignettes = true;
			return Base.prototype.afterRender.call(self, loadOptions, buildOpts).then(function() {
				if (_initConfigPage) {
					self._toggleConfigPage("enable");
				}
				_initConfigPage = false;
			});
		},
		_actPageConfig: function() {
			var self = this;
			self._toggleConfigPage();
		},

		_actCancelPageConfig: function() {
			var self = this;
			self._toggleConfigPage();
		},
		_actPublishPageConfig: function() {},
		_actRemoveTile: function(vignetteId) {},
		_actRemoveGroup: function(id) {
			var self = this;
			var layout = self.getLayout(id);
			return globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName")).then(function(dashboard) {
				var idx = $.inArray(layout.article, self.article.$items);
				if (idx >= 0) {
					self.article.$items.splice(idx, 1);
				};
				dashboard.$article = self.article;
				return dashboard;
			})
		},
		_actEditGroup: function(id) {
			var self = this;
			var $$titleFocus
			$(".s-m-layout.s-m-hub-group").each(function(idx) {
				var layoutId = $(this).attr("id")
				var layout = self.getLayout(layoutId);
				var $$title = $(".title", layout.$$header);
				$$title.attr("contentEditable", function(i, val) {
					if (layoutId === id && (!val || val === "false")) {
						$$title.on("blur", jsutils.bindFn(self._titleChange, self, {
							"layout": layout,
							"title": $$title
						}));
						$$titleFocus = $$title;
						return true
					} else {
						return false
					}
				})
			});
			if ($$titleFocus) {
				$$titleFocus.focus();
				$$titleFocus.select();
			}
		},
		_titleChange: function(event, opt) {
			var self = this;
			opt.title.attr("contentEditable", false);
			opt.title.off("blur");
			self._changeHubGroupTitle(opt.layout, opt.title.text());
		},
		_changeHubGroupTitle: function(layout, newTitleText) {
			var self = this;
			return globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName")).then(function(dashboard) {
				var idx = $.inArray(layout.article, self.article.$items);
				if (idx >= 0 && self.article.$items[idx].$title !== newTitleText) {
					$("[data-action='savePersonalDashboard'],[data-action='publishDashboard']", self._configHeader.$$header).show();
					self.article.$items[idx].$title = newTitleText;
					dashboard.$article = self.article;
				};
				return dashboard;
			})
		},
		_afterChangePage: function(event, groupId) {
			var self = this;
			self._toggleConfigPage();
			_initConfigPage = true; // Force auto start of page config on reload
			//Be careful need to go to current 
		},
		_actConfigTile: function(vignetteId) {
			var self = this;

			var ti = self._getTileInfo(vignetteId);
			var classes = ti.$$tile.attr("class");

			var size = "medium";
			var cls = classes.split(" ");
			var validSizes = ["small", "medium", "wide", "large", "full", "all"];
			cls && cls.some(function(c) {
				if (validSizes.indexOf(c) > -1) {
					size = c;
					return true;
				}
				return false;
			});

			var color = /s-m-color-(\w+)/.exec(classes);
			color = (color && color.length > 1 && color[1]) || "darkgrey";
			var tile = {
				title: ti.gadget.$title,
				color: color,
				size: size,
				icon: ti.gadget.icon
			};
			var modal = new modalConfigTile.Modal(tile);
			modal.show().then(function(result) {
				if (result != null) {
					self._applyTileChanges(ti, result);
				}
			});
		},
		_applyTileChanges: function(tileInfo, tile) {

		},
		_toggleConfigPage: function(forceStatus) {
			if (!this._configHeader) {
				this._configHeader = ctrlFactory.createDashboardConfigHeader(this, this._getHeaderOptions())
			}
			var enable = forceStatus != null ? forceStatus == "enable" : !this.configActive;
			this.toggleHeaderFooter("header", this._configHeader, enable);
			if (enable === true) {
				this.enabledConfig();
			} else {
				this.disableConfig();
			}
		},
		destroyConfigHeader: function() {
			if (!this._configHeader) return;
			// remove from controller and restore regular one (null)
			this.toggleHeaderFooter("header", null);
			this.removeControl(this._configHeader);
			this._configHeader.destroy();
			this._configHeader = null;
		},
		_getHeaderOptions: function() {
			return null;
		},
		_actCloseDashboardConfig: function() {
			this._toggleConfigPage("disable")
		},
		enabledConfig: function(options) {
			var self = this;
			self.configActive = true;

			var $$tiles = $(".s-m-tile", self.$$elmt);
			$$tiles.addClass("s-m-tile-edit");
			for (var i = 0; i < $$tiles.length; i++) {
				var $$tile = $($$tiles[i]);
				$$tile.attr("data-tile-config-id", i);

				var $$vignette = $(".s-m-vignette", $$tile);
				$$tile.append($('<div class="insert top"><btn class="cfg fa fa-arrow-up"></div>'));
				$$tile.append($('<div class="insert bottom"><btn class="cfg fa fa-arrow-down"></div>'));
				$$tile.append($('<btn class="cfg config fa fa-pencil" data-action="configTile" data-params="' + $$vignette.attr('id') + '">'));
				$$tile.append($('<btn class="cfg remove fa fa-trash-o" data-action="removeTile" data-params="' + $$vignette.attr('id') + '">'));
			}
			var $$hubGroups = $(".s-m-hub-group", self.$$elmt);
			$$hubGroups.each(function() {
				var layout = self.getLayout($(this).attr("id"));
				if (layout.isEditable) {
					layout.$$header.append($('<btn class="cfg remove fa fa-pencil" data-action="editGroup" data-params="' + $(this).attr("id") + '">'));
				}
				if (layout.isDeletable && (!layout.children || layout.children.length === 0)) {
					layout.$$header.append($('<btn class="cfg remove fa fa-trash-o" data-action="removeGroup" data-params="' + $(this).attr("id") + '">'));
				}
			});
			var dragOpts = {
				selector: ".s-m-tile",
				notify: {
					/*start:"sm.tile.start"*/
				},
				options: {
					opacity: 0.4,
				}
			};
			var dropOpts = {
				selector: ".s-m-hub-group,.insert",
				notify: {
					drop: "sm.tile.drop",
					/*out:"sm.tile.out"*/
				},
				options: {
					helper: "original",
				}
			};
			self.tileDrag = new dragManager(dragOpts, dropOpts);
			notifications.subscribe(self, self.tileDrag.getNotifs());

			self.getPageControl("footer").hide();
		},
		disableConfig: function() {
			var self = this;
			if (self.tileDrag) {
				notifications.unsubscribe(self, self.tileDrag.getNotifs());
				self.tileDrag.destroy();
				self.tileDrag = null;
			}
			self.configActive = false;
			if (self.$$pageConfigHeader) {;
				self.$$pageConfigHeader.remove();
				self.$$pageConfigHeader = null;

			}
			self.getPageControl("footer").show()
			$(".s-m-tile-edit").removeClass("s-m-tile-edit");
			$(".s-m-tile btn.remove", self.$elmt).remove();
			$(".s-m-tile btn.config", self.$elmt).remove();
		},
		notifTileStart: function($$elt) {
			console.log("notifTileStart", $$elt)
		},
		notifTileDrop: function($$elt) {
			console.log("notifTileDrop", $$elt)
		},
		notifTileOut: function($$elt) {
			console.log("notifTileOut", $$elt)
		},
		_getTileInfo: function(vignetteId) {
			var ctrl = this.getControl(vignetteId);
			if (!ctrl) {
				return;
			}
			var $$vignette = $("#" + vignetteId);
			var $$tile = $$vignette.closest(".s-m-tile");
			return {
				$$tile: $$tile,
				$$vignette: $$vignette,
				$$remove: $(".s-m-tile btn.remove", $$tile),
				ctrl: ctrl,
				gadget: ctrl.prototype.data("$gadget"),
			};
		},
		/**
		 * Return always false to force to load this page even if it's the current one (context could change and we need to reload the page))
		 */
		isSamePage: function(state) {
			return false;
		}
	});

exports.Page = _Page;