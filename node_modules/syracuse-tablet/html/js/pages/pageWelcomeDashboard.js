"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/pages/customizedDashboard').Page;
var locale = require('syracuse-tablet/html/js/helpers/locale');
var modalChooseApps = require('syracuse-tablet/html/js/ui/modals/modalChooseApps');
var dashboardWelcomeUtils = require('syracuse-tablet/html/js/helpers/dashboardWelcomeUtils');
var dashboardUtils = require('syracuse-tablet/html/js/helpers/dashboardUtils');
var modalChooseWelcomeDashboard = require('syracuse-tablet/html/js/ui/modals/modalChooseWelcomeDashboard');
var modalChooseRoles = require('syracuse-tablet/html/js/ui/modals/modalChooseRoles');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _initConfigPage = false;

var _Page = utils.defineClass(

	function WelcomeDashboardPage($parent, state, prototype, article, options) {
		options = options || {};
		this.views = options.views;
		this.roles = options.roles;
		this.dirty = false;
		options.breadcrumbs = false;
		Base.call(this, $parent, state, prototype, article, options);
		this.vignettes = [];
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
		},
		beforeAddContent: function() {
			// We do not show a title on the welcome page
			//this.addTitle(this.prototype.data("$title"), this.prototype.data("$description"));
			this.$$elmt.addClass("s-m-page-welcome-background");
		},
		buildHtmlOption: function(loadOptions) {
			var self = this;
			return Base.prototype.buildHtmlOption.call(self, loadOptions)
				.then(function(opts) {
					var saveOpts = self._getOptionsSave();
					return $.extend(true, {}, opts, {
						makeFullHeight: false,
						toolBars: {
							showAuthoring: false,
							showUserMenuLinks: true,
							showHome: false,
							showPageConfig: true,
							showDashboardList: saveOpts.publish || saveOpts.savePublished,
							showDrafts: true,
							statusPinPage: 0
						}
					});
				});
		},
		_getHeaderFooterOptions: function() {
			var opts = this._getOptionsSave();
			var optList = this._optDashboardList();
			var unbindTiles = dashboardUtils.getUnbindProperties(this.article, this.prototype.getPropertyNames());
			opts.hiddenTiles = (unbindTiles.length > 0);
			opts.views = optList.views;
			opts.roles = $.extend(true, [], this.roles)

			opts.dirty = this.dirty;
			opts.currentView = this.views.filter(function(view) {
				return view.$selected
			});
			return opts;
		},
		afterRender: function(loadOptions, buildOpts) {
			var self = this;
			// This page is loaded synchronously - We need to wait until all vignettes has been loaded to continue
			// Needed by the restoreContext process (see application.notifUserLoggedIn)
			loadOptions.forceSynchroVignettes = true;
			return Base.prototype.afterRender.call(self, loadOptions, buildOpts);
		},
		_afterChangePage: function(opts) {
			var self = this;
			Base.prototype._afterChangePage.call(this, opts);
			this.reload();
			notifications.publish(["sm.dashboard.state.change"], this._getHeaderFooterOptions());
		},
		enabledConfig: function() {
			Base.prototype.enabledConfig.call(this, {
				'addHiddenTileLabel': locale.text("page.configure.add.app")
			});
		},
		_actRemoveTile: function(vignetteId) {
			var self = this;
			var tile = self._getTileInfo(vignetteId);
			var layoutGroup = tile.ctrl.parent.parent;
			var step;
			var groupType = tile.ctrl.parent.parent.article.$groupType;
			if (groupType === dashboardWelcomeUtils.groupType("default") || groupType === dashboardWelcomeUtils.groupType("sageAppli")) {
				step = globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName")).then(function(dashboard) {
					var idx = $.inArray(tile.ctrl.parent.article, layoutGroup.article.$items);
					if (idx >= 0) {
						layoutGroup.article.$items.splice(idx, 1);
					};
					dashboard.$article = self.article;
					return dashboard;
				});
			} else {
				step = dashboardWelcomeUtils.removePinnedPage(tile.gadget.pinPageId, groupType);
			};
			step.then(function(dashboard) {
					return self._updateWelcomeDashboard(dashboard, {
						dirty: true
					})
				})
				.then(function(dashboard) {
					return dashboardUtils.getDashboardInfo(dashboard);
				})
				.then(function(dashboardInfo) {
					self.article = dashboardInfo.article
					self.prototype = dashboardInfo.prototype
					self._afterChangePage();
				})
		},
		_changeHubGroupTitle: function(layout, newTitleText) {
			var self = this;
			Base.prototype._changeHubGroupTitle.call(self, layout, newTitleText).then(function(dashboard) {
				self._updateWelcomeDashboard(dashboard, {
					dirty: true
				})
			})
		},
		_applyTileChanges: function(tileInfo, tile) {
			var self = this;
			var article = tileInfo.ctrl.parent.article;
			article.$bgColor = tile.color || "darkgrey";
			article.$size = tile.size || "medium";
			globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName"))
				.then(function(dashboard) {
					dashboard.$article = self.article;
					dashboard.$gadgets[tileInfo.gadget.$uuid].$title = tile.title;
					dashboard.$gadgets[tileInfo.gadget.$uuid].icon = tile.icon;
					return dashboard;
				}).then(function(dashboard) {
					return self._updateWelcomeDashboard(dashboard, {
						dirty: true
					})
				}).then(function() {
					self._afterChangePage();
				})
		},
		_moveTile: function(opts) {
			var self = this;
			var layoutGroupTarget, idxTarget, tileTarget, items;
			var tileToMove = self._getTileInfo(opts.dragId);
			var layoutGroupOrigin = tileToMove.ctrl.parent.parent;
			var idxOrigin = $.inArray(tileToMove.ctrl.parent.article, layoutGroupOrigin.article.$items);
			if (idxOrigin >= 0) {
				items = layoutGroupOrigin.article.$items.splice(idxOrigin, 1);
			} else {
				return
			}
			if (opts.where === "append") {
				layoutGroupTarget = self.getLayout(opts.dropId);
				idxTarget = layoutGroupTarget.article.$items.length;
			} else {
				tileTarget = self._getTileInfo(opts.dropId);
				layoutGroupTarget = tileTarget.ctrl.parent.parent;
				idxTarget = $.inArray(tileTarget.ctrl.parent.article, layoutGroupTarget.article.$items);
			}
			if (idxTarget >= 0) {
				if (opts.where === "bottom" || opts.where === "right" && idxTarget < layoutGroupTarget.article.$items.length) {
					idxTarget++;
				};
				layoutGroupTarget.article.$items.splice(idxTarget, 0, items[0]);
			};
			globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName"))
				.then(function(dashboard) {
					dashboard.$article = self.article;
					return dashboard;
				})
				.then(function(dashboard) {
					globals.getMetaData().updateWelcomeDashboard(dashboard).then(function() {
						self.dirty = true
						self._afterChangePage();
					});
				})
		},
		_moveGroup: function(layoutTarget, layoutToMove) {
			var self = this;
			var idxOrigin = $.inArray(layoutToMove.article, self.article.$items);
			if (idxOrigin >= 0) {
				var items = self.article.$items.splice(idxOrigin, 1);
			} else {
				return
			}
			var idxTarget = $.inArray(layoutTarget.article, self.article.$items);
			if (idxTarget >= 0) {
				self.article.$items.splice(idxTarget + 1, 0, items[0]);
			};
			self._updateWelcomeDashboardArticle(self.article, {
					dirty: true
				})
				.then(function() {
					self._afterChangePage({
						keepScrollValue: true
					})
				})
		},
		_actAddGroup: function() {
			var self = this;
			self.article.$items.push(dashboardWelcomeUtils.hubGroup(dashboardWelcomeUtils.groupType("default"), locale.text("welcome.newgroup")));
			self._updateWelcomeDashboardArticle(self.article, {
					dirty: true
				})
				.then(function() {
					self._afterChangePage({
						'scroll': 'end'
					})
				})
		},
		_actRemoveGroup: function(id) {
			var self = this;
			var layout = self.getLayout(id);
			var idx = $.inArray(layout.article, self.article.$items);
			if (idx >= 0) {
				self.article.$items.splice(idx, 1);
			};
			self._updateWelcomeDashboardArticle(self.article, {
					dirty: true
				})
				.then(function() {
					self._afterChangePage()
				})
		},
		_actAddHiddenTile: function() {
			var self = this;
			var hiddenList = dashboardUtils.getUnbindGadgets(self.article, self.prototype);
			var modal = new modalChooseApps.Modal(hiddenList);
			modal.show().then(function(result) {
				if (result && result.length > 0) {
					$.smForEachPromise(result, function(uuid) {
							var tile = {
								$layoutType: "tile",
								$bgColor: "darkgrey",
								$items: [{
									$bind: uuid,
								}],
								$size: "medium"
							};
							self._appendTileLastGroup(tile);
							return $.smResolve();
						})
						.then(function() {
							return self._updateWelcomeDashboardArticle(self.article, {
								dirty: true
							})
						})
						.then(function() {
							self._afterChangePage({
								'scroll': 'end'
							})
						})
				}
			});
		},
		_actRoleList: function() {
			var self = this;
			var opts = [];
			dashboardWelcomeUtils.getRoles(self.roles)
				.then(function(roles) {
					var modal = new modalChooseRoles.Modal(roles);
					console.log("modalChooseRoles");
					var change = false;
					return modal.show()
						.then(function(result) {
							if (result && result.change) {
								change = result.change;
								var roles = [];
								result.selectedRoles.forEach(function(uuid) {
									roles.push({
										"$uuid": uuid
									})
								})
								return roles;
							};
							return null;

						})
						.then(function(roles) {
							if (roles) {
								globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName"))
									.then(function(dashboard) {
										dashboard.roles = roles;
										self.roles = roles;
										return dashboard
									}).then(function(dashboard) {
										return self._updateWelcomeDashboard(dashboard, {
											dirty: true
										});
									})
									.then(function(dashboard) {
										notifications.publish(["sm.dashboard.state.change"], self._getHeaderFooterOptions());
										notifications.publish(["sm.dashboard.roles.change"], dashboard.roles);
									});
							}
						})
				})
		},
		/*from the footer when editing dashboard
		 * The goal is to provide a list of available template to replace the current template or dashboard,
		 * The user could take on of these to replace its own dashboard or the current template.
		 */
		_actTemplateList: function() {
			var self = this;
			var currentTitle = self.views.filter(function(view) {
				return view.$selected;
			})[0].$description
			var opts = this._optDashboardList();
			var modal = new modalChooseWelcomeDashboard.Modal(opts);
			modal.show().then(function(result) {
				if (result) {
					dashboardWelcomeUtils.getWelcomeDashboard(true, result.selectedView)
						.then(function(dashboard) {
							//keep the original title
							dashboard.description = currentTitle;
							self._updateWelcomeDashboard(dashboard, {
									dirty: true
								})
								.then(function(dashboard) {
									self.article = dashboard.$article;
									return dashboardUtils.getDashboardInfo(dashboard);
								}).then(function(dashboardInfo) {
									self.prototype = dashboardInfo.prototype;
									self._afterChangePage();
								});
						})
				}
			});
		},
		/* Exec from the footer only for authorized user and NOT in editing mode.
		 * In goal to provide a list of dashboard and templates editable by the user.
		 * Before editing some think, an authorized user can choose an available template or its own dashboard to edit it. 
		 * or create a new template
		 */
		_actDashboardList: function() {
			var self = this;
			var opts = this._optDashboardList(true);
			var modal = new modalChooseWelcomeDashboard.Modal(opts);
			modal.show().then(function(result) {
				if (result) {
					if (result.selectedView) { // result.selectedView : $uuid of the dashboard selected
						dashboardWelcomeUtils.getWelcomeDashboard(true, result.selectedView)
							.then(function(dashboard) {
								self._updateWelcomeDashboard(dashboard, {
										dirty: self.dirty
									})
									.then(function() {
										globals.getApplication().gotoWelcomeApplication();
									});
							})
					} else { // new template
						dashboardWelcomeUtils.emptyDashboard()
							.then(function(dashboard) {
								dashboard.description = locale.text("welcome.newtemplate");
								dashboard.roles = []
								self._updateWelcomeDashboard(dashboard, {
										dirty: true
									})
									.then(function(dashboard) {
										self.article = dashboard.$article;
										self.roles = []
											//Unselect current view
										self.views.forEach(function(view) {
											view.$selected = false
										});
										// create the new view with no uuid
										self.views.push({
											$description: dashboard.description,
											$factoryOwner: globals.getSecurityProfile().factoryId,
											$isPersonal: false,
											$selected: true
										});
										return dashboardUtils.getDashboardInfo(dashboard);
									}).then(function(dashboardInfo) {
										self.prototype = dashboardInfo.prototype;
										self._afterChangePage();
									});
							})
					}
				}
			});
		},
		_optDashboardList: function(ownerOnly) {
			var optSave = this._getOptionsSave();
			var optList = {
				"title": locale.text(ownerOnly ? "welcome.select.dashboard.title" : "welcome.select.template.title"),
				"views": $.extend(true, [], this.views.filter(function(view) { // only template
					if (ownerOnly) {
						return (view.$isPersonal || view.$factoryOwner === optSave.userFactoryOwner)
					} else {
						//all template (but not personnal) when role will be implemented : extend the selection to roles
						return !view.$isPersonal;
					}
				})),
				"showCreateTemplate": ownerOnly,
			}
			return optList;
		},
		_appendTileLastGroup: function(tile) {
			var self = this;
			var grp = dashboardUtils.getHubGroupList(self.article);
			grp[grp.length - 1].$items.push(tile);
		},
		_actCloseDashboardConfig: function() {
			var step, self = this;
			var opts = self._getOptionsSave();
			var uuid = null;
			var currentView = self.views.filter(function(view) {
				return view.$selected
			});
			if (currentView && currentView[0]) {
				step = dashboardWelcomeUtils.getWelcomeDashboard(true, currentView[0].$uuid)
			} else {
				step = dashboardWelcomeUtils.updateDashboard();
			}
			step.then(function(dashboard) {
					return self._updateWelcomeDashboard(dashboard, {
						dirty: false
					});
				})
				.then(function() {
					Base.prototype._actCloseDashboardConfig.call(self);
					globals.getApplication().gotoWelcomeApplication()
				})
				.fail(function() {
					Base.prototype._actCloseDashboardConfig.call(self);
					globals.getApplication().gotoWelcomeApplication()
				})
		},
		_actRestaurPersonalDashboard: function() {
			//For moment
			this._actSavePersonalDashboard();
		},
		_actSavePersonalDashboard: function() {
			var self = this;
			return globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName"))
				.then(function(dashboard) {
					return dashboardWelcomeUtils.writeWelcomeDashboardUser(dashboard);
				}).then(function(dashboard) {
					return self._updateWelcomeDashboard(dashboard, {
						dirty: false
					});
				}).then(function() {
					self._afterChangePage();
					var notify = {
						severityClass: "success",
						title: "",
						body: locale.text("dashboard.welcome.saved"),
						onlyWebapp: true
					};
					globals.getModal().notify(notify);
				});
		},
		_actSaveTemplateDashboard: function() {
			var self = this;
			globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName"))
				.then(function(dashboard) {
					var currentView = self.views.filter(function(view) {
						return view.$selected
					});
					var opts = {
						uuid: currentView ? currentView[0].$uuid : null
					}
					return dashboardWelcomeUtils.writeCommonWelcomeDashboard(dashboard, opts);
				}).then(function(dashboard) {
					// Update the view list
					self.views = $.extend(true, [], dashboard.$views);
					return self._updateWelcomeDashboard(dashboard, {
						dirty: false
					});;
				}).then(function() {
					self._afterChangePage();;
					var notify = {
						severityClass: "success",
						title: "",
						body: locale.text("dashboard.welcome.published"),
						onlyWebapp: true
					};
					globals.getModal().notify(notify);
				});
		},
		notifDashboardTitleChange: function(title) {
			var self = this;
			globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName"))
				.then(function(dashboard) {
					dashboard.description = title;
					return self._updateWelcomeDashboard(dashboard, {
						dirty: true
					});
				})
				.then(function() {
					notifications.publish(["sm.dashboard.state.change"], self._getHeaderFooterOptions());
				});
		},
		_updateWelcomeDashboardArticle: function(article, options) {
			var self = this;
			return globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName"))
				.then(function(dashboard) {
					dashboard.$article = article || dashboard.$article;
					return dashboard;
				})
				.then(function(dashboard) {
					return self._updateWelcomeDashboard(dashboard, options)
				})
		},
		_updateWelcomeDashboard: function(dashboard, options) {
			var self = this;
			return globals.getMetaData().updateWelcomeDashboard(dashboard)
				.then(function(dashboard) {
					self.dirty = options ? options.dirty : false;
					return dashboard;
				});
		},
		_getOptionsSave: function() {
			var userFactory = globals.getSecurityProfile().factoryId;
			var views = this.views || [];
			var currentView = views.filter(function(view) {
				return view.$selected
			});
			var currentIsPerso = currentView.length > 0 && currentView[0].$isPersonal;
			return {
				"userFactoryOwner": userFactory,
				"personal": currentIsPerso,
				"dirty": this.dirty,
				"publish": (userFactory !== ""),
				"savePublished": (userFactory !== "" && userFactory === this.options.factoryOwner)
			}
		}
	});

exports.Page = _Page;