"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/pages/pageDashboard').Page;
var locale = require('syracuse-tablet/html/js/helpers/locale');
var settings = require('syracuse-tablet/html/js/application/settings');
var welcomeApplication = require('syracuse-tablet/html/js/sdata/entities/welcomeApplication');
var modalChooseApps = require('syracuse-tablet/html/js/ui/modals/modalChooseApps');
var modalConfigTile = require('syracuse-tablet/html/js/ui/modals/modalConfigTile');

var _initConfigPage = false;

var _Page = utils.defineClass(

	function WelcomeDashboardPage($parent, state, prototype, article) {
		Base.call(this, $parent, state, prototype, article);
		this.vignettes = [];
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
		},

		beforeAddContent: function() {
			this.addTitle(this.prototype.data("$title"), this.prototype.data("$description"));
			this.$$elmt.addClass("s-m-page-welcome-background");
		},

		buildHtmlOption: function() {
			var self = this;
			return Base.prototype.buildHtmlOption.call(self)
				.then(function(opts) {
					opts.makeFullHeight = false;
					opts.toolBars = {
						showAuthoring: false,
						showLinks: true,
						showHome: false,
						showPageConfig: true,
						statusPinPage: 0,
					};
					return opts;
				});
		},

		afterRender: function(updateLayout, buildOpts) {
			var self = this;
			Base.prototype.afterRender.call(self, updateLayout, buildOpts);
			if (_initConfigPage) {
				self._initConfigUI();
			}
			_initConfigPage = false;
		},

		_actPageConfig: function() {
			var self = this;
			self._initConfigUI();
		},

		_actCancelPageConfig: function() {
			var self = this;

			self._destroyConfigUI();
		},

		_actRemoveTile: function(vignetteId) {
			var self = this;
			var tile = self._getTileInfo(vignetteId);

			var first;
			if (tile.gadget.pinPageId) {
				first = settings.removePinnedPage(tile.gadget.pinPageId);
			} else {
				first = settings.hideApplication(tile.gadget.applicationName);
			}

			first.then(function() {
				return self._afterChangePage();
			});
		},

		_actAddWelcomeApp: function() {
			var self = this;
			var modal = new modalChooseApps.Modal(self._appList.hidden);
			modal.show().then(function(result) {
				if (result && result.length > 0) {
					result.forEachPromise(function(app) {
						return settings.unhideApplication(app);
					})
						.then(function() {
							return self._afterChangePage();
						});
				}
			});
		},

		_afterChangePage: function() {
			var self = this;
			_initConfigPage = true; // Force auto start of page config on reload
			globals.getApplication().gotoWelcomeApplication(null, true);
		},

		_actConfigTile: function(vignetteId) {
			var self = this;

			var ti = self._getTileInfo(vignetteId);
			var classes = ti.$$tile.attr("class");

			var size = "medium";
			var cls = classes.split(" ");
			var validSizes = ["small", "medium", "wide", "large", "full", "all"];
			cls && cls.some(function(c) {
				if (validSizes.indexOf(c) > -1) {
					size = c;
					return true;
				}
				return false;
			});

			var color = /s-m-bg-(\w+)/.exec(classes);
			color = (color && color.length > 1 && color[1]) || "lime";
			var tile = {
				title: ti.gadget.$title,
				color: color,
				size: size,
				icon: ti.gadget.icon
			};
			var modal = new modalConfigTile.Modal(tile);
			modal.show().then(function(result) {
				if (result != null) {
					self._applyTileChanges(ti, result);
				}
			});
		},

		_applyTileChanges: function(tileInfo, tile) {
			var self = this;
			var tileId;
			if (tileInfo.gadget.pinPageId) {
				tileId = "pin-" + tileInfo.gadget.pinPageId;
			} else {
				tileId = "app-" + tileInfo.gadget.applicationName;
			}
			tile.tileId = tileId;
			settings.setTileConfig(tile)
				.then(function() {
					self._afterChangePage();
				});
		},

		_initConfigUI: function() {
			var self = this;

			self._appList = welcomeApplication.getApplicationLists();

			var $$header = $(".s-m-control.header", self.$elmt);
			self.$$pageConfigHeader = $(
				'<div class="s-m-page-config-header">\
					<div class="pull-left">\
						<btn class="hidden addapp btn fa fa-cubes" data-action="addWelcomeApp">' + locale.text("page.configure.add.app") + '\
						</btn>\
					</div>\
			  	<div class="pull-right">\
					<btn class="cancel btn glyphicon glyphicon-remove" data-action="cancelPageConfig"></btn>\
				</div>\
			</div>');

			$$header.append(self.$$pageConfigHeader);

			if (self._appList.hidden.length > 0) {
				$('[data-action=addWelcomeApp]', $$header).removeClass("hidden");
			}
			var $$tiles = $(".s-m-tile", self.$$elmt);
			$$tiles.addClass("s-m-tile-edit");
			for (var i = 0; i < $$tiles.length; i++) {
				var $$tile = $($$tiles[i]);
				$$tile.attr("data-tile-config-id", i);

				var $$vignette = $(".s-m-vignette", $$tile);
				$$tile.append($('<btn class="cfg config fa fa-gears" data-action="configTile" data-params="' + $$vignette.attr('id') + '">'));
				$$tile.append($('<btn class="cfg remove fa fa-trash-o" data-action="removeTile" data-params="' + $$vignette.attr('id') + '">'));
			}

			$(".s-m-control.footer", self.$elmt).css({
				display: "none"
			});
		},

		_destroyConfigUI: function() {
			var self = this;
			if (self.$$pageConfigHeader) {
				self.$$pageConfigHeader.remove();
				self.$$pageConfigHeader = null;
			}

			$(".s-m-control.footer", self.$elmt).css({
				display: "block"
			});

			$(".s-m-tile-edit").removeClass("s-m-tile-edit");
			$(".s-m-tile btn.remove", self.$elmt).remove();
			$(".s-m-tile btn.config", self.$elmt).remove();
		},

		_getTileInfo: function(vignetteId) {
			var ctrl = this.getControl(vignetteId);
			if (!ctrl) {
				return;
			}
			var $$vignette = $("#" + vignetteId);
			var $$tile = $$vignette.closest(".s-m-tile");
			return {
				$$tile: $$tile,
				$$vignette: $$vignette,
				$$remove: $(".s-m-tile btn.remove", $$tile),
				ctrl: ctrl,
				gadget: ctrl.prototype.data("$gadget"),
			};
		},
	});

exports.Page = _Page;