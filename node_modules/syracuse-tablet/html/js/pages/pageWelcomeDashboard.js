"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var Base = require('syracuse-tablet/html/js/pages/customizedDashboard').Page;
var locale = require('syracuse-tablet/html/js/helpers/locale');
var modalChooseApps = require('syracuse-tablet/html/js/ui/modals/modalChooseApps');
var dashboardWelcomeUtils = require('syracuse-tablet/html/js/helpers/dashboardWelcomeUtils');
var dashboardUtils = require('syracuse-tablet/html/js/helpers/dashboardUtils');
var modalChooseWelcomeDashboard = require('syracuse-tablet/html/js/ui/modals/modalChooseWelcomeDashboard');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _initConfigPage = false;

var _Page = utils.defineClass(

	function WelcomeDashboardPage($parent, state, prototype, article, options) {
		options = options || {};
		this.dirty = false;
		options.breadcrumbs = false;
		Base.call(this, $parent, state, prototype, article, options);
		this.vignettes = [];
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
		},
		beforeAddContent: function() {
			// We do not show a title on the welcome page
			//this.addTitle(this.prototype.data("$title"), this.prototype.data("$description"));
			this.$$elmt.addClass("s-m-page-welcome-background");
		},
		buildHtmlOption: function(loadOptions) {
			var self = this;
			return Base.prototype.buildHtmlOption.call(self, loadOptions)
				.then(function(opts) {
					return $.extend(true, {}, opts, {
						makeFullHeight: false,
						toolBars: {
							showAuthoring: false,
							showUserMenuLinks: true,
							showHome: false,
							showPageConfig: true,
							showDrafts: true,
							statusPinPage: 0
						}
					});
				});
		},
		_getHeaderOptions: function() {
			var opts = this._getOptionsSave();
			if (this.views && this.views.length > 0) {
				opts.views = $.extend(true, {}, this.views)
			}
			var unbindTiles = dashboardUtils.getUnbindProperties(this.article, this.prototype.getPropertyNames());
			opts.hiddenTiles = (unbindTiles.length > 0);
			opts.dirty = this.dirty;
			return opts;
		},
		afterRender: function(loadOptions, buildOpts) {
			var self = this;
			// This page is loaded synchronously - We need to wait until all vignettes has been loaded to continue
			// Needed by the restoreContext process (see application.notifUserLoggedIn)
			loadOptions.forceSynchroVignettes = true;
			return Base.prototype.afterRender.call(self, loadOptions, buildOpts);
		},
		_afterChangePage: function(opts) {
			var self = this;
			Base.prototype._afterChangePage.call(this, opts);
			//globals.getApplication().gotoWelcomeApplication();
			var unbindTiles = dashboardUtils.getUnbindProperties(this.article, this.prototype.getPropertyNames());
			var options = {
				"dirty": this.dirty,
				"hiddenTiles": (unbindTiles.length > 0)
			}
			notifications.publish(["sm.dashboard.state.change"], options);
			this.reload();
		},
		enabledConfig: function() {
			//this.tileList = welcomeApplication.getApplicationLists();
			Base.prototype.enabledConfig.call(this, {
				'addHiddenTileLabel': locale.text("page.configure.add.app")
			});
		},
		_actRemoveTile: function(vignetteId) {
			var self = this;
			var tile = self._getTileInfo(vignetteId);
			var layoutGroup = tile.ctrl.parent.parent;
			var step;
			var groupType = tile.ctrl.parent.parent.article.$groupType;
			if (groupType === dashboardWelcomeUtils.groupType("default") || groupType === dashboardWelcomeUtils.groupType("sageAppli")) {
				step = globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName")).then(function(dashboard) {
					var idx = $.inArray(tile.ctrl.parent.article, layoutGroup.article.$items);
					if (idx >= 0) {
						layoutGroup.article.$items.splice(idx, 1);
					};
					dashboard.$article = self.article;
					return dashboard;
				});
			} else {
				step = dashboardWelcomeUtils.removePinnedPage(tile.gadget.pinPageId, groupType);
			};
			step.then(function(dashboard) {
				globals.getMetaData().updateWelcomeDashboard(dashboard)
					.then(function(dashboardMetaData) {
						return dashboardUtils.getDashboardInfo(dashboardMetaData);
					})
					.then(function(dashboardInfo) {
						self.article = dashboardInfo.article
						self.prototype = dashboardInfo.prototype
						self.dirty = true
						self._afterChangePage();
					})
			});
		},
		_changeHubGroupTitle: function(layout, newTitleText) {
			var self = this;
			Base.prototype._changeHubGroupTitle.call(self, layout, newTitleText).then(function(dashboard) {
				self.dirty = true
				globals.getMetaData().updateWelcomeDashboard(dashboard);
			})
		},
		_applyTileChanges: function(tileInfo, tile) {
			var self = this;
			var article = tileInfo.ctrl.parent.article;
			article.$bgColor = tile.color || "darkgrey";
			article.$size = tile.size || "medium";
			globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName")).then(function(dashboard) {
				dashboard.$article = self.article;
				dashboard.$gadgets[tileInfo.gadget.$uuid].$title = tile.title;
				dashboard.$gadgets[tileInfo.gadget.$uuid].icon = tile.icon;
				globals.getMetaData().updateWelcomeDashboard(dashboard).then(function() {
					self.dirty = true
					self._afterChangePage();
				});
			});
		},
		_moveGroup: function(layoutTarget, layoutToMove) {
			var self = this;
			var idxOrigin = $.inArray(layoutToMove.article, self.article.$items);
			if (idxOrigin >= 0) {
				var items = self.article.$items.splice(idxOrigin, 1);
			} else {
				return
			}
			var idxTarget = $.inArray(layoutTarget.article, this.article.$items);
			if (idxTarget >= 0) {
				this.article.$items.splice(idxTarget + 1, 0, items[0]);
			};
			globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName"))
				.then(function(dashboard) {
					dashboard.$article = self.article;
					return dashboard;
				})
				.then(function(dashboard) {
					globals.getMetaData().updateWelcomeDashboard(dashboard).then(function() {
						self.dirty = true
						self._afterChangePage();
					});
				})
		},
		_actDashboardAddGroup: function() {
			var self = this;
			this.article.$items.push(dashboardWelcomeUtils.hubGroup(dashboardWelcomeUtils.groupType("default"), "My applications"));
			globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName"))
				.then(function(dashboard) {
					dashboard.article = this.article;
					return dashboard;
				})
				.then(function(dashboard) {
					globals.getMetaData().updateWelcomeDashboard(dashboard).then(function() {
						self.dirty = true
						self._afterChangePage({
							'scroll': 'end'
						});
					});
				})
		},
		_actRemoveGroup: function(id) {
			var self = this;
			globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName"))
				.then(function(dashboard) {
					var layout = self.getLayout(id);
					var idx = $.inArray(layout.article, self.article.$items);
					if (idx >= 0) {
						self.article.$items.splice(idx, 1);
					};
					dashboard.$article = self.article;
					return dashboard;
				})
				.then(function(dashboard) {
					globals.getMetaData().updateWelcomeDashboard(dashboard).then(function() {
						self.dirty = true
						self._afterChangePage();
					});
				})
		},
		_actEditGroup: function(id) {
			var self = this;
			var $$titleFocus
			$(".s-m-layout.s-m-hub-group").each(function(idx) {
				var layoutId = $(this).attr("id")
				var layout = self.getLayout(layoutId);
				var $$title = $(".title", layout.$$header);
				$$title.attr("contentEditable", function(i, val) {
					if (layoutId === id && (!val || val === "false")) {
						$$title.on("blur", jsutils.bindFn(self._titleChange, self, {
							"layout": layout,
							"title": $$title
						}));
						$$titleFocus = $$title;
						return true
					} else {
						return false
					}
				})
			});
			if ($$titleFocus) {
				$$titleFocus.focus();
				$$titleFocus.select();
			}
		},
		_actAddHiddenTile: function() {
			var self = this;
			var hiddenList = dashboardUtils.getUnbindGadgets(self.article, self.prototype);
			var modal = new modalChooseApps.Modal(hiddenList);
			modal.show().then(function(result) {
				if (result && result.length > 0) {
					$.smForEachPromise(result, function(uuid) {
						var tile = {
							$layoutType: "tile",
							$bgColor: "darkgrey",
							$items: [{
								$bind: uuid,
							}],
							$size: "medium"
						};
						self._appendTileLastGroup(tile);
						return $.smResolve();
					}).then(function() {
						globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName")).then(function(dashboard) {
							dashboard.$article = self.article;
							globals.getMetaData().updateWelcomeDashboard(dashboard).then(function() {
								self.dirty = true
								self._afterChangePage({
									'scroll': 'end'
								});
							});
						});
					})
				}
			});
		},
		_actChangeWelcome: function() {
			var self = this;
			var modal = new modalChooseWelcomeDashboard.Modal(this.views);
			modal.show().then(function(result) {
				if (result) {
					var viewSelected = self.views.filter(function(view) {
						if (view.$uuid === result) {
							view.$selected = true
						} else {
							view.$selected = false
						}
						return view.$selected;
					});
					dashboardWelcomeUtils.getWelcomeDashboard(true, viewSelected[0].$uuid)
						.then(function(dashboard) {
							globals.getMetaData().updateWelcomeDashboard(dashboard)
								.then(function() {
									//Need to recompute TODO : avoid it. This will change with the new process to shwith dashboard.
									globals.getApplication().gotoWelcomeApplication();
								});
						})
				}
			});
		},
		_actLinkClicked: function(typ) {
			switch (typ) {
				case "dashboardList":
					this._actChangeWelcome();
					break;
				case "dashboardReplace":
					this._actSavePersonalDashboard();
					break;
				case "dashboardShare":
					this._actPublishDashboard();
					break;
				case "dashboardAddGroup":
					this._actDashboardAddGroup();
					break;
			}
		},
		_appendTileLastGroup: function(tile) {
			var self = this;
			var grp = dashboardUtils.getHubGroupList(self.article);
			grp[grp.length - 1].$items.push(tile);
		},
		_actCloseDashboardConfig: function() {
			var step, self = this;
			var opts = self._getOptionsSave();
			var uuid = null;
			if (!opts.savePublished) { // if user not authorized to publish or not authorize to save the current dashboard set restaure personal dashboard
				if (self.views && self.views[0]) {
					step = dashboardWelcomeUtils.getWelcomeDashboard(false, self.views[0].$uuid)
				} else {
					step = dashboardWelcomeUtils.updateDashboard(); // recompute initial dashboard
				}
			} else {
				step = globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName"))
			}
			step.then(function(dashboard) {
				self.dirty = false
				globals.getMetaData().updateWelcomeDashboard(dashboard).then(function() {
					Base.prototype._actCloseDashboardConfig.call(self);
				});
			});
		},
		_actRestaurPersonalDashboard: function() {
			//For moment
			this._actSavePersonalDashboard();
		},
		_actSavePersonalDashboard: function() {
			var self = this;
			return globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName"))
				.then(function(dashboard) {
					return dashboardWelcomeUtils.writeWelcomeDashboardUser(dashboard);
				}).then(function(dashboard) {
					self.dirty = false
					return globals.getMetaData().updateWelcomeDashboard(dashboard);
				}).then(function() {
					self._afterChangePage();
					var notify = {
						severityClass: "success",
						title: "",
						body: locale.text("dashboard.welcome.saved"),
						onlyWebapp: true
					};
					globals.getModal().notify(notify);
				});
		},
		_actPublishDashboard: function() {
			var self = this;
			globals.getModal().simpleConfirmPromise({
					message: locale.text("dashboard.welcome.publish")
				})
				.then(function(result) {
					if (result.action !== "yes") return;
					return globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName"))
						.then(function(dashboard) {
							dashboard.roles = null;
							dashboard.user = null;
							return dashboardWelcomeUtils.writeCommonWelcomeDashboard(dashboard);
						}).then(function(dashboard) {
							self.dirty = false
							return globals.getMetaData().updateWelcomeDashboard(dashboard);
						}).then(function() {
							var notify = {
								severityClass: "success",
								title: "",
								body: locale.text("dashboard.welcome.published"),
								onlyWebapp: true
							};
							globals.getModal().notify(notify);;
							self._afterChangePage();;
						});
				})
				.fail(function(e) {
					globals.getModal().error(e);
				});
		},
		notifDashboardTitleChange: function(title) {
			this.dirty = true
			var self = this;
			globals.getMetaData().getDashboard(self.prototype.getDataByPath("$dashboardName")).then(function(dashboard) {
				dashboard.description = title;
				globals.getMetaData().updateWelcomeDashboard(dashboard).then(function() {
					self.dirty = true
					notifications.publish(["sm.dashboard.state.change"], self._getHeaderOptions());
				});
			});
		},
		_getOptionsSave: function() {
			var userFactory = globals.getSecurityProfile().factoryId;
			if (!this.views || this.views.length === 0) {
				return {
					"personal": true,
					"dirty": this.dirty,
					"publish": (userFactory !== ""),
					"savePublished": false,
					"pin": false
				}
			};
			var viewspersonelOrSelected = this.views.filter(function(view) {
				return view.$isPersonal || view.$selected
			});
			//personnal and this personnal is selected or,  the view selected is not the personal and  personal does not exist
			if (viewspersonelOrSelected.length === 1) {
				return {
					"personal": viewspersonelOrSelected[0].$isPersonal,
					"dirty": this.dirty,
					"publish": (userFactory !== ""),
					"savePublished": (userFactory !== "" && userFactory === this.options.factoryOwner && !viewspersonelOrSelected[0].$isPersonal),
					"pin": viewspersonelOrSelected[0].$isPersonal
				}
			};
			return {
				//personnal exists but not the current
				//replace the personal for user not authorized or for a user authorized but not the owner
				"personal": false,
				"dirty": this.dirty,
				"publish": (userFactory !== "" && userFactory !== this.options.factoryOwner),
				"savePublished": (userFactory !== "" && userFactory === this.options.factoryOwner),
				"pin": (userFactory !== "" && userFactory === this.options.factoryOwner)
			};
		}
	});

exports.Page = _Page;