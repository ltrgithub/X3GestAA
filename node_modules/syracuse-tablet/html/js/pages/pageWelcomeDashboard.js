"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/pages/customizedDashboard').Page;
var locale = require('syracuse-tablet/html/js/helpers/locale');
var modalChooseApps = require('syracuse-tablet/html/js/ui/modals/modalChooseApps');
var dashboardWelcomeUtils = require('syracuse-tablet/html/js/helpers/dashboardWelcomeUtils');
var dashboardUtils = require('syracuse-tablet/html/js/helpers/dashboardUtils');

var _initConfigPage = false;

var _Page = utils.defineClass(

	function WelcomeDashboardPage($parent, state, prototype, article, options) {
		options = options || {};
		options.breadcrumbs = false;
		Base.call(this, $parent, state, prototype, article, options);
		this.vignettes = [];
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
		},
		beforeAddContent: function() {
			// We do not show a title on the welcome page
			//this.addTitle(this.prototype.data("$title"), this.prototype.data("$description"));
			this.$$elmt.addClass("s-m-page-welcome-background");
		},
		buildHtmlOption: function(loadOptions) {
			var self = this;
			return Base.prototype.buildHtmlOption.call(self, loadOptions)
				.then(function(opts) {
					return $.extend(true, {}, opts, {
						makeFullHeight: false,
						toolBars: {
							showAuthoring: false,
							showUserMenuLinks: true,
							showHome: false,
							showPageConfig: true,
							showDrafts: true,
							statusPinPage: 0
						}
					});
				});
		},
		_getHeaderOptions: function() {
			var opts = dashboardWelcomeUtils.getOptionsSave();
			if (this.views) {
				opts.views = $.extend(true, {}, this.views)
			}
			return opts;
		},
		afterRender: function(loadOptions, buildOpts) {
			var self = this;
			// This page is loaded synchronously - We need to wait until all vignettes has been loaded to continue
			// Needed by the restoreContext process (see application.notifUserLoggedIn)
			loadOptions.forceSynchroVignettes = true;
			return Base.prototype.afterRender.call(self, loadOptions, buildOpts).then(function() {});
		},
		afterChangePage: function() {
			Base.prototype.afterChangePage.call(this);
			globals.getApplication().gotoWelcomeApplication();
		},
		enabledConfig: function() {
			//this.tileList = welcomeApplication.getApplicationLists();
			Base.prototype.enabledConfig.call(this, {
				'addHiddenTileLabel': locale.text("page.configure.add.app")
			});
		},
		_actChangeWelcome: function(uuidView) {
			var self = this;
			var viewSelected = this.views.filter(function(view) {
				if (view.$uuid === uuidView) {
					view.$selected = true
				} else {
					view.$selected = false
				}
				return view.$selected;
			});
			dashboardWelcomeUtils.getWelcomeDashboard(true, viewSelected[0].$uuid)
				.then(function(dashboard) {
					globals.getApplication().setWelcomeDashboard(dashboard);
					self.afterChangePage();
				})

		},
		_actRemoveTile: function(vignetteId) {
			var self = this;
			var tile = self._getTileInfo(vignetteId);
			var layoutGroup = tile.ctrl.parent.parent;
			var step;
			var groupType = tile.ctrl.parent.parent.article.$groupType;
			var dashboard = globals.getApplication().welcomeDashboard;
			if (groupType === dashboardWelcomeUtils.groupType("default") || groupType === dashboardWelcomeUtils.groupType("sageAppli")) {
				var idx = $.inArray(tile.ctrl.parent.article, layoutGroup.article.$items);
				if (idx >= 0) {
					layoutGroup.article.$items.splice(idx, 1);
				};
				dashboard.$article = self.article;
			} else {
				dashboardWelcomeUtils.removePinnedPage(tile.gadget.pinPageId, groupType);
			}
			dashboard.dirty = true
			self.afterChangePage();
		},
		_applyTileChanges: function(tileInfo, tile) {
			var self = this;
			var article = tileInfo.ctrl.parent.article;
			article.$bgColor = tile.color || "darkgrey";
			article.$size = tile.size || "medium";
			var dashboard = globals.getApplication().welcomeDashboard;
			dashboard.$article = self.article;
			dashboard.$gadgets[tileInfo.gadget.$uuid].$title = tile.title;
			dashboard.$gadgets[tileInfo.gadget.$uuid].icon = tile.icon;
			dashboard.dirty = true
			self.afterChangePage();
		},
		_actAddHiddenTile: function() {
			var self = this;
			var hiddenList = dashboardUtils.getUnbindGadgets(self.article, self.prototype);
			var modal = new modalChooseApps.Modal(hiddenList);
			modal.show().then(function(result) {
				if (result && result.length > 0) {
					$.smForEachPromise(result, function(uuid) {
						var tile = {
							$layoutType: "tile",
							$bgColor: "darkgrey",
							$items: [{
								$bind: uuid,
							}],
							$size: "medium"
						};
						self._appendTileLastGroup(tile);
						return $.smResolve();
					}).then(function() {
						dashboard.dirty = true
						return self.afterChangePage();
					});
				}
			});
		},
		_appendTileLastGroup: function(tile) {
			var self = this;
			var grp = dashboardUtils.getHubGroupList(self.article);
			grp[grp.length - 1].$items.push(tile);
		},
		_saveDashboard: function() {
			var self = this;
			return dashboardWelcomeUtils.writeWelcomeDashboardUser(globals.getApplication().welcomeDashboard)
				.then(function(dashboard) {
					globals.getApplication().setWelcomeDashboard(dashboardWelcomeUtils.setMetaWelcomeDashboard(dashboard)); // update views
					return self.afterChangePage();
					//return $.smResolve();
				});
		},
		_actCloseDashboardConfig: function() {
			var step, self = this;;
			if (globals.getApplication().welcomeDashboard.dirty) {
				step = globals.getModal().simpleConfirmPromise({
						message: locale.text("dashboard.welcome.discard.change")
					})
					.then(function(result) {
						return $.smResolve(result.action === "yes");
					})
			} else {
				step = $.smResolve(true);
			};
			step.then(function(close) {
				if (close) {
					var opts = dashboardWelcomeUtils.getOptionsSave()
					var step;
					if (!opts.publish && !self.views[0].$selected) { // if user not authorized to publish set his personal dashboard as selected
						self.views.forEach(function(view) {
							view.$selected = false
						});
						self.views[0].$selected = true;
						step = dashboardWelcomeUtils.getWelcomeDashboard(true, self.views[0].$uuid)
							.then(function(dashboard) {
								return globals.getApplication().setWelcomeDashboard(dashboard);
							});
					} else {
						step = $.smResolve();
					};
					step.then(function() {
						Base.prototype._actCloseDashboardConfig.call(self);
						//Hack to avoid loosing header (???)
						globals.getApplication().gotoWelcomeApplication();
					});
				}
			})
		},
		_actSavePersonnalDashboard: function(type) {
			var self = this;
			globals.getModal().simpleConfirmPromise({
					message: locale.text("dashboard.welcome.save.own")
				})
				.then(function(result) {
					if (result.action !== "yes") return;
					self._saveDashboard().then(function() {
						var notify = {
							severityClass: "success",
							title: "",
							body: locale.text("dashboard.welcome.saved"),
							onlyWebapp: true
						};
						globals.getModal().notify(notify);
					});
				});
		},
		_actPublishDashboard: function() {
			var self = this;
			globals.getModal().simpleConfirmPromise({
					message: locale.text("dashboard.welcome.publish")
				})
				.then(function(result) {
					if (result.action !== "yes") return;
					var dashboard = globals.getApplication().welcomeDashboard;
					dashboard.roles = null;
					dashboard.user = null;
					dashboardWelcomeUtils.writeCommonWelcomeDashboard(dashboard)
						.then(function(dashboard) {
							globals.getApplication().setWelcomeDashboard(dashboardWelcomeUtils.setMetaWelcomeDashboard(dashboard)); // update views
							var notify = {
								severityClass: "success",
								title: "",
								body: locale.text("dashboard.welcome.published"),
								onlyWebapp: true
							};
							globals.getModal().notify(notify);;
							self.afterChangePage();
						});
				})
				.fail(function(e) {
					globals.getModal().error(e);
				});
		},
	});

exports.Page = _Page;