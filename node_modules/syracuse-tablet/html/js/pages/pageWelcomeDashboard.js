"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/pages/pageDashboard').Page;
var locale = require('syracuse-tablet/html/js/helpers/locale');
var settings = require('syracuse-tablet/html/js/application/settings');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var welcomeApplication = require('syracuse-tablet/html/js/sdata/entities/welcomeApplication');
var modalChooseApps = require('syracuse-tablet/html/js/ui/modalChooseApps');

var _Page = utils.defineClass(

	function WelcomeDashboardPage($parent, state, prototype, article) {
		Base.call(this, $parent, state, prototype, article);
		this.vignettes = [];
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
		},

		loadData: function() {
			return null;
		},

		beforeAddContent: function() {
			this.addTitle(this.prototype.data("$title"), this.prototype.data("$description"));
		},

		addControl: function(c, isPageControl) {
			Base.prototype.addControl.call(this, c, isPageControl);
			if (c && c.isVignette()) {
				this.vignettes.push(c);
			}
		},
		afterRender: function(options) {
			var self = this;
			Base.prototype.afterRender.call(this, options);
			// Empty dashboard
			if (!this.vignettes || this.vignettes.length < 1) {
				this.renderEmptyDashboardMessage();
			} else {
				this.vignettes.forEach(function(v) {
					var options = {
						sdataParameters: self.state.options && self.state.options.sdataParameters || {}
					};
					v.load(null, options);
				});
			}
		},
		buildHtmlOption: function() {
			var self = this;
			return Base.prototype.buildHtmlOption.call(self)
				.then(function(opts) {
					opts.makeFullHeight = false;
					opts.toolBars = {
						showAuthoring: false,
						showLinks: true,
						showHome: false,
						showPageConfig: true,
						statusPinPage: 0,
					};
					return opts;
				});
		},
		_actPageConfig: function() {
			var self = this;
			self._initConfigUI();
		},

		_actAcceptPageConfig: function() {
			var self = this;
			Object.keys(self._tileRemoveList).forEachPromise(function(t) {
				var tile = self._tileRemoveList[t];
				return self._removeTile(tile);
			})
				.then(function() {
					var notify = {
						severityClass: "success",
						title: "",
						body: "Ok" //locale.text("pin.page.add.ok", [pageData.title]),
					};
					globals.getModal().notify(notify);
				});
			self._destroyConfigUI();
		},

		_removeTile: function(tile) {
			if (tile.gadget.pinPageId) {
				return settings.removePinnedPage(tile.gadget.pinPageId);
			} else {
				return settings.hideApplication(tile.gadget.applicationName);
			}
		},

		_actCancelPageConfig: function() {
			var self = this;

			self._destroyConfigUI();
		},

		_initConfigUI: function() {
			var self = this;

			self._hiddenAppList = welcomeApplication.getHiddenApplications();

			var $$header = $(".pageheader", self.$elmt);
			self.$$pageConfigHeader = $(
				'<div class="s-m-page-config-header">\
					<div class="pull-left">\
						<div class="s-m-page-config-btn-header hidden addapp btn fa fa-cubes" data-action="addWelcomeApp">' + locale.text("page.configure.add.app") + '\
						</div>\
					</div>\
			  	<div class="pull-right">\
					<div class="s-m-page-config-btn-header accept btn glyphicon glyphicon-ok" data-action="acceptPageConfig"></div>\
					<div class="s-m-page-config-btn-header cancel btn glyphicon glyphicon-remove" data-action="cancelPageConfig"></div>\
				</div>\
			</div>');

			$$header.append(self.$$pageConfigHeader);
			// don't show yet, not fully implemented
			//			if (self._hiddenAppList.length > 0) {
			//				$('[data-action=addWelcomeApp]', $$header).removeClass("hidden");
			//			} 

			var $$tiles = $(".s-m-tile", self.$$elmt);
			for (var i = 0; i < $$tiles.length; i++) {
				var $$tile = $($$tiles[i]);
				var $$vignette = $(".s-m-vignette", $$tile);
				$$tile.append($('<div class="s-m-page-config-btn-tile remove fa fa-trash-o" data-action="removeTile" data-params="' + $$vignette.attr('id') + '">'));
				$$tile.append($('<div class="s-m-page-config-btn-tile undo hidden fa fa-undo" data-action="undoTileChange" data-params="' + $$vignette.attr('id') + '">'));
			}

			$(".pagefooter", self.$elmt).css({
				display: "none"
			});

			self._tileRemoveList = {};
		},

		_destroyConfigUI: function() {
			var self = this;
			if (self.$$pageConfigHeader) {
				self.$$pageConfigHeader.remove();
				self.$$pageConfigHeader = null;
			}

			$(".pagefooter", self.$elmt).css({
				display: "block"
			});

			$(".s-m-page-config-btn-tile", self.$elmt).remove();
			self._tileRemoveList = null;
		},

		_actRemoveTile: function(vignetteId) {
			var self = this;

			// Already listed
			if (self._tileRemoveList[vignetteId]) {
				return;
			}

			var ti = self._getTileInfo(vignetteId);
			ti.$$undo.removeClass("hidden");
			ti.$$remove.addClass("active");

			self._tileRemoveList[vignetteId] = ti;
		},

		_actUndoTileChange: function(vignetteId) {
			var self = this;

			// Not marked for deletion
			if (!self._tileRemoveList[vignetteId]) {
				return;
			}
			delete self._tileRemoveList[vignetteId];
			var ti = self._getTileInfo(vignetteId);
			ti.$$undo.addClass("hidden");
			ti.$$remove.removeClass("active");
		},

		_getTileInfo: function(vignetteId) {
			var ctrl = this.getControl(vignetteId);
			if (!ctrl) {
				return;
			}
			var $$vignette = $("#" + vignetteId);
			var $$tile = $$vignette.closest(".s-m-tile");
			return {
				$$tile: $$tile,
				$$vignette: $$vignette,
				$$remove: $(".s-m-page-config-btn-tile.remove", $$tile),
				$$undo: $(".s-m-page-config-btn-tile.undo", $$tile),
				ctrl: ctrl,
				gadget: ctrl.prototype.data("$gadget")
			};
		},

		_actAddWelcomeApp: function() {
			modalChooseApps.chooseApps(self._hiddenAppList)
				.then(function(result) {
					alert(result.action);
				});
		}
	});

exports.Page = _Page;