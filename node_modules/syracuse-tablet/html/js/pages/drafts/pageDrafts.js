"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var uiRect = require('syracuse-tablet/html/js/ui/rect');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var Base = require('syracuse-tablet/html/js/pages/pageBase').Page;
var modules = require('syracuse-tablet/html/js/common/modules');
var scroller = require('syracuse-tablet/html/js/helpers/scroller/scrollerHelpers');
var ActionAdapterPageDrafts = require('syracuse-tablet/html/js/pages/drafts/actionAdapterPageDrafts').ActionAdapterPageDrafts;
var sdataReq = require("syracuse-tablet/html/js/sdata/sdataRequester");
var sdataUtils = require("syracuse-tablet/html/js/sdata/sdataUtils");


var _templates = {
	error: '<section class="draft-error"><h1>{{error}}<h1><h2>{{contact}}<h2></section>',
	spinner: '\
		<div id="draftSpinner">\
   			<div>\
				<div class="spinner-loader"></div>\
			</div>\
		</div>',
	record: '\
			<section id="{{id}}" data-nevent data-naction="clickRecord" data-params="select" class="list-group-item s-m-draft-item {{status}}">\
				<div>\
					<div>\
						<div class="draft-title">{{title}}</div>\
						<div class="draft-date">{{creation_date}}</div>\
					</div>\
					<div>\
						<div><span class="draft-status">{{statusText}}</span><span class="draft-errorMsg">{{error}}</span></div>\
						<div class="draft-endpoint">{{endpoint}}</div>\
					</div>\
					<div>\
						<div class="draft-comment"><i class="fa fa-comment-o"></i>{{comment}}</div>\
						<div class="draft-actions">\
							<span data-params="edit" data-url="{{draftUrl}}" class="fa fa-edit"></span>\
						</div>\
					</div>\
				</div>\
				<span class="badge checked fa fa-check">&nbsp;</span>\
				<span style="{{#unless index}}display:none;{{/unless}}" class="badge index">{{index}}</span>\
			</section>',
	content: '\
			<div class="s-m-draft-header" style="display:none">\
				<div>\
					{{{selectMenu}}}\
				</div>\
				<div>\
					{{{filtersMenu}}}\
				</div>\
			</div>\
			<div id="draftInfo"  style="display:none">{{info}}</div>\
			<div id="draftPageWrapper" class="s-m-scroll-wrapper">\
				<div class="list-group s-m-draft-list">\
				</div>\
			</div>\
		</div>',
	selectMenu: '\
		<div id="draftSelectMenuId" class="btn-group">\
			<div class="{{dropDirection}}">\
				<button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-expanded="false">\
					<span class="badge"></span>{{title}}<span class="caret"></span>\
				</button>\
				<ul class="dropdown-menu dropdown-menu-left" role="menu">\
					{{#each links}}\
						<li><a  {{#if $isHidden}}style="display:none"{{/if}} draggable="false" data-nevent data-naction="selectMenu" data-params="{{params}}" href="#">{{title}}</a></li>\
					{{/each}}\
				</ul>\
			</div>\
		</div>',
	filtersMenu: '\
		<select id="draftFiltersMenu" data-nevent data-naction="filter">\
		{{#each filterOptions}}\
			<option value="{{value}}" {{#if selected}}selected{{/if}}>{{title}}</option>\
		{{/each}}\
		<select>'
};
//http://www.css-spinners.com/	
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};

var _selectOptionsList = ["unselectall", "selectall", "hideunselected", "showunselected"];
var _toolbarLinks = [{
	name: "stop",
	$isHidden: true
}, {
	name: "synch",
	$isDisabled: true,
	$confirm: true
}, {
	name: "remove",
	$isDisabled: true,
	$confirm: true
}];

/**
 * Displays drafts list and manages actions
 * !! doesn't inherit from PageHtmlBase because it needs header/footer (PageHtmlBase is too basic)
 */
exports.Page = utils.defineClass(
	function DraftsPage(pageName, options) {
		options = options || {};
		Base.call(this, pageName, options);
		this.dateFormatter = formatApi.getFormatter("application/x-datetime");
		this._initLabels();
		this._selectedFilter = "creation_date:dsc";
		this.actionAdapter = new ActionAdapterPageDrafts(this);
		this._toolsPanel = "header";
		/*
		 * options.header = true;
		options.breadcrumbs = true;
		options.footer = true;
		Base.call(this, $parent, state, options);
		notifications.subscribe(this, ["sm.action.link"]);
		*/
	}, Base, {
		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this._myGestureMgr) {
				this._myGestureMgr.destroy();
				this._myGestureMgr = null;
			}
		},
		_initLabels: function() {
			this._filterOptions = [{
				value: "creation_date:asc",
				title: locale.text("drafts.filters.dateasc")
			}, {
				value: "creation_date:dsc",
				title: locale.text("drafts.filters.datedsc")
			}];
		},
		getPageTitle: function() {
			return "Drafts";
		},
		scrollAllowed: function() {
			return false;
		},
		_getDefaultAttachedControls: function() {
			return [this._toolsPanel, "actionsPanel"];
		},
		_getAttachedControlInfo: function(name) {
			var ctrl = Base.prototype._getAttachedControlInfo.call(this, name);
			if (name === "header") {
				return {
					topIndex: 0,
					selector: "header",
					name: name,
					$type: "application/x-panel-header-sdata-page"
				}
			}
			if (name === "actionsPanel") {
				return {
					selector: "aside.s-m-panel.s-m-freeright",
					$type: "application/x-panel-actions",
					name: name
				}
			}
			return null;
		},
		render: function() {
			// only attachedControlsMgr
			this.attachedControlsMgr.buildHtml();
			// Content build in computeLayout
		},
		computeLayout: function(context) {
			if (this.destroyed) {
				return;
			}
			Base.prototype.computeLayout.call(this, context);
			if (this._$$list == null) {
				// First load -> build in content
				this.$$elmt.addClass("drafts");
				this.$$contentRoot.html(_getHtml("content", {
					"filtersMenu": this._buildSortMenu(),
					"selectMenu": this._buildSelectMenu()
				}));
				this._$$selectMenu = this.$$contentRoot.find("#draftSelectMenuId");
				this.$$info = this.$$contentRoot.find("#draftInfo");
				this.$$listHeader = this.$$contentRoot.find(".s-m-draft-header");
				this._$$list = this.$$contentRoot.find(".s-m-draft-list");
				this.$$myScrollWrapper = this.$$contentRoot.find("#draftPageWrapper");
				this.$$myScrollWrapper.css({
					height: "auto"
				});
				this._myGestureMgr = scroller.newScroller(this._$$list, {
					isPageScroller: true,
					direction: "v"
				});
				this._updateList();
			} else {
				this._updateMyGesture(context && context.preserveScroll === true);
			}
		},
		_buildSelectMenu: function() {
			var links = [];
			_selectOptionsList.forEach(function(id) {
				links.push({
					title: locale.text("multiselect.action." + id),
					params: id,
					$isHidden: false
				});
			});
			return _getHtml("selectMenu", {
				links: links,
				title: locale.text("multiselect.selected"),
				dropDirection: "dropdown"
			});
		},
		_buildSortMenu: function() {
			this._selectedFilter = this._selectedFilter || "creation_date:asc";
			var opts = [];
			var self = this;
			this._filterOptions.forEach(function(item) {
				item = $.extend({}, item);
				item.selected = item.value === self._selectedFilter;
				opts.push(item);
			});
			return _getHtml("filtersMenu", {
				"filterOptions": opts
			});
		},
		/**
		 * Update the content of the list
		 */
		_updateList: function() {
			this._$$list.empty();
			this._$$spinner = null;
			this.$$info.hide();
			this.$$listHeader.hide();
			var self = this;
			modules.get("storage").getStorage().draftOperation("draftReadList").then(function(resources) {
				resources = self._applyFilters(resources || []);
				var content;
				if (resources.length > 0) {
					var recordsHtml = [];
					resources.forEach(function(rsrc, idx) {
						recordsHtml.push(self._getRecordHtml(rsrc, idx));
					});
					content = recordsHtml.join('\n');
				}
				self._$$list.html(content);
				self._$$spinner = $(_getHtml("spinner")).appendTo(self._$$list);
				self._updateUI();
			}).fail(function(e) {
				modules.get("modal").error(locale.text("drafts.error.loading"), e, function() {
					self._$$list.html(_getHtml("error", {
						error: locale.text("error"),
						contact: locale.text("contact.admin")
					}));
					self._updateMyGesture();
				});
			});
		},
		/**
		 * Update gesture manager
		 */
		_updateMyGesture: function(preserveScroll) {
			if (!this._myGestureMgr) return;
			var mainRect = uiRect.elmtRect(this.$$contentElmt, "outer");
			var viewRect = uiRect.elmtRect(this.$$myScrollWrapper, "outer");
			var scrollRect = mainRect.intersectRect(viewRect);
			if (scrollRect && scrollRect.height < this._myGestureMgr.$$elmt.height()) {
				this._myGestureMgr.init(scrollRect, null, null, preserveScroll);
			} else {
				this._myGestureMgr.reset();
			}
		},
		/**
		 * Returns the html of a record
		 */
		_getRecordHtml: function(rsrc, index) {
			rsrc = $.extend({}, rsrc);
			rsrc.index = index == null ? null : index + 1;
			var date = rsrc["creation_date"];
			if (date) {
				rsrc["creation_date"] = this.dateFormatter.formatValue(date);
			}
			rsrc["statusText"] = locale.text("drafts.status." + rsrc.status);
			rsrc["error"] = rsrc.errorMsg || "";
			return _getHtml("record", rsrc);
		},
		/**
		 * Update select menu according to the status of the records
		 * Update eth number of selected records
		 */
		_updateUI: function(preserveScroll) {
			var allRecords = this._selectRecords("all").length;
			var selectedRecords = this._selectRecords(".selected").length;
			// Update the selection menu
			this._$$selectMenu.find('a[data-naction]').toggle(selectedRecords > 0);
			this._$$selectMenu.find('a[data-params="selectall"]').toggle(allRecords !== selectedRecords);
			var hiddenUnselRecords = this._selectRecords(":not(.selected):not(:visible)").length;
			this._$$selectMenu.find('a[data-params="hideunselected"]').toggle(selectedRecords > 0 && selectedRecords < allRecords && hiddenUnselRecords == 0);
			this._$$selectMenu.find('a[data-params="showunselected"]').toggle(selectedRecords > 0 && hiddenUnselRecords > 0);
			this._$$selectMenu.find('.badge').text(selectedRecords);
			// Toggles the footer/header actions
			var panel = this.getPanel(this._toolsPanel);
			if (panel) {
				panel.enableAction("draftsRemove", selectedRecords > 0);
				panel.enableAction("draftsRunSynch", selectedRecords > 0);
			}
			// Updates draft counter
			this.$$info.text(locale.text("drafts.info", [allRecords]));
			// Updates list
			var isEmpty = allRecords == 0;
			if (isEmpty) {
				this._$$list.html(locale.text("drafts.emptyList"));
			}
			this._$$list.toggleClass("empty", isEmpty);
			// Updates header and info
			this.$$info.toggle(!isEmpty);
			this.$$listHeader.toggle(!isEmpty);
			// Recalculates the scroll because the number of records can change (hide/show)
			this._updateMyGesture(preserveScroll);
		},
		/**
		 * Select records accordinbt to cssSelector
		 */
		_selectRecords: function(cssSelector) {
			var selector = "";
			if (cssSelector != "all") {
				selector += cssSelector;
			}
			return this._$$list.find("section.s-m-draft-item" + selector);
		},
		/**
		 * Filter records
		 */
		_actFilter: function(params, evt) {
			if (this._busy === true) {
				return;
			}
			var val = $(evt.target).val();
			if (val == this._selectedFilter) {
				return;
			}
			this._selectedFilter = val;
			this._updateList();
		},
		_applyFilters: function(resources) {
			if (!this._selectedFilter) {
				return resources;
			}
			var f = this._selectedFilter.split(":");
			if (f.length != 2) {
				return resources;
			}
			var property = f[0];
			var order = f[1];
			resources.sort(function(a, b) {
				a = a[property];
				b = b[property];
				if (a == b) return 0;
				if (a > b) return order == "asc" ? +1 : -1;
				if (a < b) return order == "asc" ? -1 : +1;
			});
			return resources;
		},
		/**
		 * Secltion/Unselection of records
		 */
		_actSelectMenu: function(action) {
			var self = this;
			switch (action) {
				case "selectall":
				case "unselectall":
					// First show all
					var elmts = self._selectRecords("all").show();
					if (action == "unselectall") {
						elmts = self._selectRecords(".selected");
					}
					elmts.each(function() {
						self._toggleRecordSelection($(this), action === "selectall");
					});
					break;
				case "hideunselected":
					self._selectRecords(":not(.selected)").hide();
					break;
				case "showunselected":
					self._selectRecords(":not(.selected)").show();
					break;
			}
			this._updateUI();
		},
		/**
		 * Handle clien on record
		 * - actions: Select/unselect record or edit record
		 * We put only one data-naction for record's dom elemt and check the data-param attribute
		 * - main record elemt has the 'select' attribut
		 * - edit icon has the 'edit' attribut
		 */
		_actClickRecord: function(params, evt) {
			evt.stopPropagation();
			if (this._busy === true) {
				return;
			}
			var $$elmt = $(evt.target);
			var $$rec = $$elmt.closest(".s-m-draft-item");
			if (!$$rec) return;
			var $$params = $$elmt.closest("[data-params]");
			var action = $$params.attr("data-params");
			if (action === "select") {
				this._toggleRecordSelection($$rec);
				// Preserve the scroll
				this._updateUI(true);
			} else if (action === "edit") {
				var id = $$rec.attr("id");
				var editUrl = $$params.attr("data-url");
				if (!id || !editUrl) {
					return;
				}
				modules.get("navHelper").gotoUrl(editUrl);
			}
		},
		/**
		 * force true/false/undefined
		 */
		_toggleRecordSelection: function($$rec, force) {
			if (!$$rec || $$rec.length == 0) return;
			$$rec.toggleClass("selected", force);
		},
		/**
		 * Start upload/remove
		 */
		_mainUploadBegin: function(name, ids) {
			this._stop = false;
			this._busy = true;
			this._logData = {
				nbSuccess: 0,
				nbErrors: 0
			};
			var panel = this.getPanel(this._toolsPanel);
			if (panel) {
				panel.showAction("draftsRunStop", true);
				panel.enableAction("draftsRunStop", true);
			}
			this._selectRecords(":not(.selected)").hide();
		},
		/**
		 * End upload/remove
		 */
		_mainUploadEnd: function(name) {
			this._busy = false;
			var panel = this.getPanel(this._toolsPanel);
			if (panel) {
				panel.showAction("draftsRunStop", false);
			}
			this.$$elmt.find(".synchronized").removeClass("synchronized");
			this._selectRecords(":not(.selected)").show();
			this._refreshIndexes();
			// At the end
			this._updateUI();
		},
		_refreshIndexes: function() {
			this._$$list.find(".s-m-draft-item").each(function(idx) {
				$(this).find(".badge.index").text(idx + 1).show();
			});
		},
		/**
		 * Upload alld the records given by ids array and resolve like _uploadPop
		 * Resolves stoppewith stopped/completed
		 */
		_upload: function(ids) {
			this._mainUploadBegin("upload", ids);
			var join = $.Deferred();
			var self = this;
			this._uploadPop(ids).then(function(status) {
				self._mainUploadEnd("upload");
				join.resolve(status);
			}).fail(function(e) {
				self._mainUploadEnd("upload");
				join.reject(e);
			});
			return join.promise();
		},
		/**
		 * Pop the ids ids array and upload them
		 * Returns the promise that will be resolve when:
		 * 	- upload succeeded (status = completed)
		 * 	- upload failed with an exception
		 * 	- upload stopped (status = stopped)
		 * _mainDeferred is null when we call _uploadPop outside the method
		 */
		_uploadPop: function(ids, _mainDeferred, draftIdx) {
			draftIdx = draftIdx == null ? 0 : draftIdx;
			var first = _mainDeferred == null;
			if (first) {
				_mainDeferred = $.Deferred();
			}
			try {
				if (this._stop === true) {
					_mainDeferred.resolve("stopped");
					return;
				}
				if (!ids || ids.length == 0) {
					_mainDeferred.resolve("completed");
					return;
				}
				var self = this;
				this._uploadOne(ids.pop(), draftIdx).then(function() {
					setTimeout(function() {
						self._uploadPop(ids, _mainDeferred, draftIdx + 1);
					});
				}).fail(function(e) {
					_mainDeferred.reject(e);
				});
			} catch (e) {
				_mainDeferred.reject(e);
			}
			return first ? _mainDeferred.promise() : null;
		},
		/**
		 * Upload the record given by id
		 * Resolve if no exception
		 * If upload succeeds 		-> Remove the draft and resolve
		 * If upload not succeeds 	-> Update the draft with new error and resolve
		 * If exception --> Reject
		 */
		_uploadOne: function(id, draftIdx) {
			var self = this;
			var deferred = $.Deferred();
			return this._uploadOneBegin(id).then(function(draftCtx) {
				return sdataReq.saveDraft(draftCtx, draftIdx);
			}).then(function(result, draftCtx) {
				if (!result) {
					return $.smReject("unexpected null http response");
				}
				if (result.success === true) {
					return self._uploadOneEnd(id, "saveSucceeded");
				}
				// KO - Set up draft with new error and date
				draftCtx.status = "error";
				if (result.status === 401) {
					draftCtx.errorMsg = locale.text("drafts.error.unauthorized");
				} else if (result.offline === true) {
					draftCtx.errorMsg = locale.text("drafts.error.noconnection");
				} else {
					var diags = sdataUtils.scanDiagnoses(result.data);
					draftCtx.errorMsg = diags.length > 0 ? diags[0].$message : "No error message";
				}
				draftCtx["creation_date"] = utils.getCurISODateTime(new Date());
				return self._uploadOneEnd(id, "saveFailed", {
					draftCtx: draftCtx
				});
			}).then(function() {
				// next
				deferred.resolve();
			}).fail(function(e) {
				// Stop
				return self._uploadOneEnd(id, "exception", {
					exception: e
				})
			})
			return deferred.promise();
		},
		/**
		 * Init the spinner before processing record (sunch, remove..)
		 */
		_processRecordBegin: function($$rec) {
			if (this._$$spinner) {
				var pos = $$rec.position();
				this._$$spinner.css({
					top: pos.top + "px",
					display: 'table'
				});
				this._$$spinner.children().outerHeight($$rec.outerHeight()).show();
			}
			if (this._myGestureMgr) {
				this._myGestureMgr.makeVisible($$rec);
			}
		},
		/**
		 * Reset the spinner
		 */
		_processRecordEnd: function($$rec) {
			if (this._$$spinner) {
				this._$$spinner.hide();
			}
			this._updateMyGesture();
			if ($$rec) {
				// nothing
			}
		},
		/**
		 * Set the ui context
		 * Reads the draft
		 */
		_uploadOneBegin: function(id) {
			this._processRecordBegin(this.$$elmt.find("#" + id));
			return modules.get("storage").getStorage().draftOperation("draftRead", id);
		},
		/**
		 * Set ui context
		 * Save/Delete the draft according to the status
		 */
		_uploadOneEnd: function(id, status, opts) {
			var self = this;
			var $$record = this.$$elmt.find("#" + id);
			this._processRecordEnd($$record);
			if (status === "saveSucceeded") {
				return modules.get("storage").getStorage().draftOperation("draftDelete", id).then(function() {
					self._logData.nbSuccess++;
					$$record.remove();
				}).fail(function(e) {
					return $.smReject(e);
				});
			} else if (status === "saveFailed") {
				self._logData.nbErrors++;
				return modules.get("storage").getStorage().draftOperation("draftSave", opts.draftCtx).then(function() {
					var $$newRecord = $(self._getRecordHtml(opts.draftCtx)).addClass("selected synchronized");
					$$record.after($$newRecord);
					$$record.remove();
				}).fail(function(e) {
					return $.smReject(e);
				});
			} else if (status === "exception") {
				return $.smReject(opts.exception);
			} else {
				// Exception
				return $.smReject(new Error("Unexpected draft status"));
			}
		},
		/**
		 * Synchronize the selected drafts
		 */
		_actDraftsRunStop: function() {
			console.log("_actDraftsRunStop");
		},
		/**
		 * Synchronize the selected drafts
		 */
		_actDraftsRunSynch: function() {
			console.log("_actDraftsRunSynch");
			var self = this;
			this._upload(this._selectRecords(".selected").map(function() {
				return this.id;
			}).get().reverse()).then(function(status) {
				var nbSuccess = self._logData.nbSuccess;
				var nbErrors = self._logData.nbErrors;
				var count = nbSuccess + nbErrors;
				modules.get("modal").notify({
					title: locale.text("drafts.synch." + status),
					body: locale.text("drafts.synch.result", [count, nbSuccess, nbErrors]),
					severityClass: nbErrors > 0 ? "warning" : "success",
					delay: nbErrors > 0 ? "medium" : "short"
				});
			}).fail(function(e, status) {
				modules.get("modal").error(locale.text("drafts.error.uploading"), e);
			});
		},
		/**
		 * Remove selected records
		 */
		_actDraftsRemove: function() {
			console.log("_actDraftsRemove");
			var self = this;
			$.smResolve().then(function() {
				self._busy = true;
				self._logData = {
					nbSuccess: 0
				};
				// List of ids to delete
				return self._selectRecords(".selected").map(function() {
					return $(this);
				}).get().reverse();
			}).then(function($$records) {
				var deferred = $.Deferred();
				// Delete selected drafts
				self._removePop($$records).then(function() {
					modules.get("modal").notify({
						title: locale.text("drafts.remove.completed", [self._logData.nbSuccess]),
						severityClass: "success",
						delay: "short"
					});
					deferred.resolve(true);
				}).fail(function(e) {
					modules.get("modal").error(locale.text("drafts.error.removing"), e, function() {
						deferred.resolve(false);
					});
				});
				return deferred.promise();
			}).always(function() {
				self._busy = false;
				self._processRecordEnd(null);
				self._updateUI();
				self._refreshIndexes();
			});
		},
		/**
		 * Pop a record and removes it
		 * Resolves or rejects mainDeferred if an error occurs
		 * Returns the promise on first call
		 */
		_removePop: function($$records, mainDeferred) {
			var self = this;
			var first = mainDeferred == null;
			if (first) {
				mainDeferred = $.Deferred();
			}
			var $$rec = $$records.length > 0 ? $$records.pop() : null;
			if ($$rec == null) {
				mainDeferred.resolve();
				return;
			}
			self._processRecordBegin($$rec);
			modules.get("storage").getStorage().draftOperation("draftDelete", $$rec.attr("id")).then(function() {
				self._logData.nbSuccess++;
				$$rec.remove();
				setTimeout(function() {
					self._removePop($$records, mainDeferred);
				}, 500);
			}).fail(function(e) {
				mainDeferred.reject(e);
			});
			return first ? mainDeferred.promise() : null;
		},
		/** Event sm.action.link
		 *  Notified when a action succeeded - sdata link - see action manager
		 *  success:	true/false
		 *  link:		Link info
		 *  result:		Json response
		 */
		notifActionLink: function(success, link, result, options) {
			if (!this.isActive()) return;
			switch (link.name) {
				case "synch":
					this._actSynch();
					break;
				case "remove":
					this._actRemove();
					break;
				case "stop":
					this._stop = true;
					break;
			}
		},
		/**
		 * Returns the links to display in the header/footer
		 */
		getToolbarLinks: function(toolbar, options) {
			var device = modules.get("siteLayout").getDeviceType();
			if ((device === "tablet" && toolbar === "footer") || (device === "smartphone" && toolbar === "header")) {
				var result = [];
				_toolbarLinks.forEach(function(act) {
					result.push({
						"name": act.name,
						"title": locale.text("drafts.action." + act.name),
						"icon": fontUtils.getDraftIcons(act.name),
						"$uuid": utils.UUID(),
						"css": "draft-" + act.name,
						"footerHeader": true,
						"isClientAction": true,
						"$confirm": act.$confirm === true ? locale.text("drafts.dlog.confirm." + act.name) : null,
						"$isHidden": act.$isHidden === true,
						"$isDisabled": act.$isDisabled === true
					});
				});
				return result;
			}
			return null;
		}
	});