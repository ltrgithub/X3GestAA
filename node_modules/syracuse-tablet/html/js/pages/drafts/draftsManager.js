"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var modalMultiButtons = require('syracuse-tablet/html/js/ui/modals/modalMultiButtons');
var modalSaveDraft = require('syracuse-tablet/html/js/ui/modals/modalSaveDraft');
var modules = require('syracuse-tablet/html/js/common/modules');

/**
 * Stateless only
 * fromDraftId: not null if the page has been loaded from ddraft
 * Manages the drafts process
 * 		Asks user to save the draft on back/cancel
 */
exports.DraftsManager = function DraftsManager(page, fromDraftId) {
	this._page = page;
	this._fromDraftId = draftId;
	this._draftStatus = null;
	this._errMsg = null;

	this.destroy = function() {
		this._page = null;
	};
	/**
	 * !! Return always promise (true to continue back process)
	 * Ask user to save the draft or to remove an offline draft
	 */
	this.onBackAction = function() {};
	/**
	 * Ask user to discard changes or save as draft
	 * Resolves with true if save has been skipped or succeeded
	 * Resolves false if user canceled the operation
	 */
	this._askSaveDraft = function() {
		var opts = {
			buttons: [],
			defaultAction: "no"
		};
		// Buttons displayed in dialog
		["drafts.dlog.savedraft.button", "no", "yes"].forEach(function(act) {
			opts.buttons.push({
				action: act,
				label: locale.text(act)
			});
		});
		// Id of label is taken as action id for convenience
		var modal = new modalMultiButtons.Modal(locale.text("drafts.dlog.savedraft.title"), locale.text("drafts.dlog.savedraft.info"), opts);
		var self = this;
		return modal.show().then(function(result) {
			if (result === "drafts.dlog.savedraft.button") {
				return self.save(true).then(function(saved, draftCtx) {
					// back is allowed if no error otherwise we need to save again and say no is error is persisting
					return saved === true;
				});
			} else {
				return result !== "no";
			}
		});
	};
	/**
	 * offline: 	true if user is asked to save an offline draft
	 * confirm: 	Ask user to input a comment and save/cancel action
	 * Resolve 		with true/false and draft context
	 */
	this.save = function(offline, confirm) {
		var deferred = $.Deferred();
		var step;
		if (confirm === true) {
			step = new modalSaveDraft.Modal(this._comment || "", offline === true).show();
		} else {
			step = $.smResolve({
				action: "save",
				comment: this._comment
			});
		}
		var self = this;
		step.then(function(result) {
			if (result == null || result.action != "save") {
				return null;
			}
			return self.saveInDB(result.comment, offline);
		}).then(function(ctx) {
			if (ctx) {
				modules.get("modal").notify({
					severityClass: offline ? "warning" : "success",
					title: locale.text("drafts.notify.saved" + (offline ? ".offline" : "")),
					body: offline ? locale.text("drafts.notify.saved") : null,
					delay: offline ? "medium" : "short"
				});
			}
			deferred.resolve(ctx != null, ctx);
		}).fail(function(e) {
			modules.get("modal").asynchError(locale.text("drafts.error.saving"), e).always(function() {
				deferred.resolve(false, null);
			});
		});
		return deferred.promise();
	};
	/**
	 *Save draft in DB
	 */
	this.saveInDB = function(comment, offline) {
		var uuid = this._page.pageData.dataset.getValue("$uuid");
		if (!uuid) {
			return $.smReject("Unexpected null uuid");
		}
		var endPoint = modules.get("appController").App.getDefaultEndpoint();
		if (!endPoint) {
			return $.smReject("Unexpected null endPoint");
		}
		var draftUrl = this._page.pageData.$url;
		if (!draftUrl) {
			return $.smReject("Unexpected null $url");
		}
		draftUrl = jsutils.parseURL(draftUrl);
		draftUrl.query = draftUrl.query || {};
		//localhost:8124/mobile2/$client/$local/$dataset/unitTestAQMCRUDM?representation=unitTestAQMCRUDM.$edit&$mobileProtocol=stateless&$mobileEndpoint=x3.erp.GX3APP
		draftUrl.query.$mobileProtocol = "stateless";
		draftUrl.query.$mobileEndpoint = endPoint;
		draftUrl.query.draftId = uuid;
		draftUrl = jsutils.urlToString(draftUrl);
		var draftContext = {
			"id": uuid,
			"draftUrl": draftUrl,
			"endpoint": modules.get("appController").App.getDefaultEndpoint(),
			"representation": this._page.pageData.prototype.data("$representation"),
			"status": offline ? "offline" : this._draftStatus || "unsavedchanges",
			"errorMsg": this._draftStatus === "error" ? this._errMsg : "",
			"title": this._page.pageData.prototype.data("$title") || "",
			"comment": comment || "",
			"dataSet": this._page.getDataset().getDraftsData(this._page.controller),
			"creation_date": utils.getCurISODateTime(new Date())
		};
		return modules.get("storage").getStorage().draftOperation("draftSave", draftContext);
	};
	/**
	 * Save action succeeded in parent's page
	 */
	this.notifSaveSucceeded = function() {
		if (this.draftId) {
			return modules.get("storage").getStorage().draftOperation("draftDelete", this.draftId);
		} else {
			return $.smResolve();
		}
	};
};