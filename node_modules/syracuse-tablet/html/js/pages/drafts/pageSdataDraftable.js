"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var Base = require('syracuse-tablet/html/js/pages/sdata/pageSdata').Page;
var modules = require('syracuse-tablet/html/js/common/modules');
var sdataUtils = require("syracuse-tablet/html/js/sdata/sdataUtils");
var modalMultiButtons = require('syracuse-tablet/html/js/ui/modals/modalMultiButtons');
var modalSaveDraft = require('syracuse-tablet/html/js/ui/modals/modalSaveDraft');

/**
 * Page handling a state-less Edit Facet with draft management
 * 
 */
exports.Page = utils.defineClass(
	function PageSdataDraftable(pageData, options) {
		Base.call(this, pageData, options);
		var urlParsed = jsutils.parseURL(pageData.$url);
		this._draftId = urlParsed.query ? urlParsed.query.draftId : null;
		this._comment = null;
		this._draftStatus = null;
		this._errMsg = null;
		var draftCtx = this._draftId ? this.getDataset().getClientContext("$draftContext") : null;
		if (draftCtx) {
			// If the page is open from an existing draft we store the comment/error in order to not have to ask the user again
			this._comment = draftCtx.comment;
			this._draftStatus = draftCtx.status;
			this._errMsg = draftCtx.errorMsg;
		}
	},
	Base, {
		_isDirty: function() {
			if (this._errMsg != this.getDataset().getClientContext("$draftContext.errorMsg")) {
				// User triggered saved action without modifying data and error message changed
				return true;
			}
			return this.pageData.dataset.isDirty()
		},
		computeLayout: function(context) {
			Base.prototype.computeLayout.call(this, context);
			if (this._gestureMgr) {
				var self = this;
				setTimeout(function() {
					// Shows first error if any
					var $$err = self.$$elmt.find(".s-m-control.error");
					self._gestureMgr.makeVisible($$err, 100);
				}, 100)
			}
		},
		onGotoUrlAction: function(url) {
			if (url.smStartsWith("child://") || this.options.isChild) {
				return $.smResolve(true);
			}
			// Save new errors if draft has been saved
			if (!this._isDirty() && this._draftStatus !== "error") {
				return $.smResolve(true);
			}
			if (this._draftId) {
				// We save without asking the user
				return this._saveDraft(false);
			}
			//  Ask user to discard changes or save as draft
			return this._askSaveDraft();
		},
		/**
		 * Ask user to discard changes or save as draft
		 * Resolves with true if save has been skipped or succeeded
		 * Resolves false if user canceled the operation
		 */
		_askSaveDraft: function() {
			var opts = {
				buttons: [],
				defaultAction: "continue"
			};
			// Buttons displayed in dialog
			["saveAsDraft", "stayOnCurrentPage", "continue"].forEach(function(act) {
				opts.buttons.push({
					action: act,
					label: locale.text(act)
				});
			});
			// Id of label is taken as action id for convenience
			var modal = new modalMultiButtons.Modal(locale.text("drafts.dlog.savedraft.title"), locale.text("drafts.dlog.savedraft.info"), opts);
			var self = this;
			return modal.show().then(function(result) {
				if (result === "saveAsDraft") {
					return self._saveDraft(true).then(function(saved, draftCtx) {
						// back is allowed if no error otherwise we need to save again and say no is error is persisting
						return saved === true;
					});
				} else {
					return result !== "stayOnCurrentPage";
				}
			});
		},
		_removeDiagnoses: function() {
			this.getDataset().removeDiagnoses();
			this.controller.forEachControl(function(c) {
				if (c.clearClientDiagnoses) {
					c.clearClientDiagnoses();
				};
			});
		},
		beforeOnSdataActionClicked: function(actionName, controller) {
			if (actionName === "$save") {
				this._removeDiagnoses();
			}
			return $.smResolve(true)
		},
		afterOnSdataActionClicked: function(actionName, success, beforeContext, response) {
			var step;
			if (actionName === "$save" && this._draftId && success === true) {
				step = this._deleteDraft();
			} else if (actionName === "$save" && success !== true) {
				this._draftStatus = "error";
				var diags = response ? sdataUtils.scanDiagnoses(response) : [];
				this._errMsg = diags.length > 0 ? diags[0].$message : "No error message";
				step = $.smResolve();
			} else {
				step = $.smResolve();
			}
			var self = this;
			step.then(function() {
				Base.prototype.afterOnSdataActionClicked.call(self, actionName, success, beforeContext, response);
			})
		},
		_deleteDraft: function(actionName, success, beforeContext) {
			// Reset these properties so when we go back no save is done
			this._draftStatus = null;
			var id = this._draftId;
			this._draftId = null;
			return modules.get("storage").getStorage().draftOperation("draftDelete", id);
		},
		/**
		 * confirm: 	Ask user to input a comment and save/cancel action
		 * Resolve 		with true/false and draft context
		 */
		_saveDraft: function(confirm) {
			var deferred = $.Deferred();
			var step;
			if (confirm === true) {
				step = new modalSaveDraft.Modal(this._comment || "").show();
			} else {
				step = $.smResolve({
					action: "save",
					comment: this._comment || ""
				});
			}
			var self = this;
			step.then(function(result) {
				if (result == null || result.action != "save") {
					return null;
				}
				return self._saveDraftInDB(result.comment);
			}).then(function(ctx) {
				if (ctx) {
					modules.get("modal").notify({
						severityClass: "success",
						title: locale.text("drafts.notify.saved"),
						body: null,
						delay: "short"
					});
				}
				deferred.resolve(ctx != null, ctx);
			}).fail(function(e) {
				modules.get("modal").asynchError(locale.text("drafts.error.saving"), e).always(function() {
					deferred.resolve(false, null);
				});
			});
			return deferred.promise();
		},
		/**
		 *Save draft in DB
		 */
		_saveDraftInDB: function(comment) {
			var uuid = this._draftId ? this._draftId : this.pageData.dataset.getValue("$uuid");
			if (!uuid) {
				return $.smReject("Unexpected null uuid");
			}
			var endPoint = modules.get("appController").App.getDefaultEndpoint();
			if (!endPoint) {
				return $.smReject("Unexpected null endPoint");
			}
			var draftUrl = this.pageData.$url;
			if (!draftUrl) {
				return $.smReject("Unexpected null $url");
			}
			draftUrl = jsutils.parseURL(draftUrl);
			draftUrl.query = draftUrl.query || {};
			//localhost:8124/mobile2/$client/$local/$dataset/unitTestAQMCRUDM?representation=unitTestAQMCRUDM.$edit&$mobileProtocol=stateless&$mobileEndpoint=x3.erp.GX3APP
			draftUrl.query.$mobileProtocol = "stateless";
			draftUrl.query.$mobileEndpoint = endPoint;
			draftUrl.query.draftId = uuid;
			draftUrl = jsutils.urlToString(draftUrl);
			var draftContext = {
				"id": uuid,
				"draftUrl": draftUrl,
				"endpoint": modules.get("appController").App.getDefaultEndpoint(),
				"representation": this.pageData.prototype.data("$representation"),
				"status": this._draftStatus || "unsavedchanges",
				"errorMsg": this._draftStatus === "error" ? this._errMsg : "",
				"title": this.pageData.prototype.data("$title") || "",
				"comment": comment || "",
				"dataSet": this.getDataset().getDraftsData(this.controller),
				"creation_date": utils.getCurISODateTime(new Date())
			};
			return modules.get("storage").getStorage().draftOperation("draftSave", draftContext);
		}
	});