"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var modalMultiButtons = require('syracuse-tablet/html/js/ui/modals/modalMultiButtons');
var modalSaveDraft = require('syracuse-tablet/html/js/ui/modals/modalSaveDraft');

/**
 * Manages the drafts process in pageRegular
 * 		Asks user to save the draft on back/cancel page.chekBack
 * 		Load the draft from DB in page.loadData process
 */
var _DraftMgr = function(page) {
	this._page = page;

	/**
	 * set the draft status (stored in DB for info)
	 */
	this.setStatus = function(error, reason) {
		// !! _status is also user as a class in draf list
		this._status = error == true ? "error" : "notsaved";
		this._statusReason = reason;
	};
	this.destroy = function() {
		this._page = null;
	};
	/**
	 * Return a promise or a boolean
	 * 		forcePromise: true force top return a promise
	 * Ask user to save the draft
	 */
	this.checkBack = function(forcePromise) {
		var self = this;
		if (!this._page.dao || !this._page.dao.isDirty) {
			return forcePromise ? $.smResolve(true) : true;
		}
		/**
		 * Ask user to discard changes or save as draft
		 */
		// Buttons displayed in dialog
		var opts = {
			buttons: [],
			defaultAction: "no"
		};
		["drafts.dlog.button.saveasdraft", "no", "yes"].forEach(function(act) {
			opts.buttons.push({
				action: act,
				label: locale.text(act)
			});
		});
		var modal = new modalMultiButtons.Modal(locale.text("drafts.dlog.title.discardchanges"), locale.text("drafts.dlog.info.saveasdraft"), opts);
		return modal.show().then(function(result) {
			if (result === "yes") {
				return true;
			} else if (result === "drafts.dlog.button.saveasdraft") {
				/**
				 * Ask user to input a comment and save/cancel action
				 */
				var modal = new modalSaveDraft.Modal(self._comment || "");
				return modal.show().then(function(result) {
					result = result || {};
					if (result.action === "save") {
						return self.save(result.comment).then(function() {
							globals.getModal().notify({
								severityClass: "success",
								title: locale.text("drafts.notify.saved")
							});
							return true;
						}).fail(function(e) {
							globals.getModal().error(e);
						});
					}
					return false;
				});
			} else if (result === "no") {
				return false;
			}
		});
	};
	/**
	 *Save draft in DB
	 */
	this.save = function(comment) {
		var self = this;
		var uuid = jsutils.getPropByPath(self._page, "dao.data.$uuid");
		if (!uuid) return;
		var restoredCtx = self._page.getRestoreContext();
		restoredCtx.currentState.options["workingCopy-Id"] = null;
		restoredCtx.currentState.options["draft-id"] = uuid;
		if (!self._draftSaveLink) {
			var links = self._page.getProtoLinks();
			Object.keys(links).some(function(key) {
				if (key === "$save") {
					self._draftSaveLink = links[key];
					return true;
				}
			});
		}
		if (!self._draftSaveLink) return;
		var draftContext = {
			"id": uuid,
			"endpoint": globals.getEndpoint(),
			"representation": self._page.prototype.data("$representation"),
			"status": self._status,
			"reason": self._statusReason || locale.text("drafts.reason." + self._status),
			"title": self._page.prototype.data("$title") || "",
			"comment": comment || "",
			"restoredContext": restoredCtx,
			"dataSet": self._page.dao.data,
			"saveLink": self._draftSaveLink,
			"creation_date": utils.getCurISODateTime(new Date())
		};
		return globals.getStorage().draftOperation("draftSave", draftContext);
	};

	/**
	 * Read draft from DB and delete it
	 * 		Draft will be eventually saved again if user decide to save it
	 * Resolves with data or null
	 */
	this.loadFromDraft = function(draftId) {
		var self = this;
		self._comment = null;
		return globals.getStorage().draftOperation("draftRead", draftId).then(function(ctx) {
			return globals.getStorage().draftOperation("draftDelete", draftId).then(function() {
				var data;
				if (ctx && ctx.dataSet) {
					data = ctx.dataSet;
					// Used in order to propagate the comment if we save the draft again
					self._comment = ctx.comment;
					self.setStatus(ctx.status === "error", ctx.reason || "");
				}
				return $.smResolve(data, data != null ? "draft" : null);
			});
		}).fail(function(e) {
			// Eventually display an error
			return null;
		});
	};

	this.setStatus(false);
};

exports.Klass = _DraftMgr;