"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var Base = require('syracuse-tablet/html/js/pages/pageHtml').Page;
var locale = require('syracuse-tablet/html/js/helpers/locale');
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var factory = require('syracuse-tablet/html/js/application/appFactory');
var dispatcher = require('syracuse-tablet/html/js/sdata/sdataDispatcher');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

var _actions = [, {
	title: "Stop upload",
	name: "draftsStopUpload",
	$isHidden: true
}, {
	title: "Upload all",
	name: "draftsUploadAll",
	"$confirm": "Do you want to upload all the drafs ?"
}, {
	title: "Remove all",
	name: "draftsRemoveAll",
	"$confirm": "Do you want to remove all the drafs ?"
}];

var _templates = {
	record: '\
			<section id="{{id}}" style="padding:10px;margin:5px;" class="list-group-item s-m-draft-item {{status}}">\
				<div style="display:table;width:100%">\
					<div style="display:table-row;width:100%">\
						<div style="display:table-cell">\
							<div>\
								<span style="float:left"><b>{{title}}</b></span>\
								<span style="float:right"><b><small>{{creation_date}}</small></b></span>\
							</div>\
							<div style="clear: both;"><b>{{endpoint}} - {{representation}}</span></b></div>\
							<div><span>{{reason}}</span><span>{{comment}}</span></div>\
						</div>\
						<div style="display:table-cell;width:4em;font-size:1.5em;position:relative;padding-left: 15px;">\
							<div style="display:table;width:100%;position:absolute;top:-6px;">	\
								<div style="display:table-cell;width:33%;text-allign:center;">\
									<div data-action="delete" class="fa fa-times"></div>\
								</div>\
								<div style="display:table-cell;width:33%;text-allign:center;">\
									<div data-action="editDraft" class="fa fa-pencil-square-o""></div>\
								</div>\
									<div style="display:table-cell;width:33%;text-allign:center;">\
									<div data-action="upload" class="fa fa-upload"></div>\
								</div>\
							</div>\
						</div>\
					<div>\
				<\div>\
			</section>',
	content: '\
			<div class="s-m-drafts-header" style="display:table;width: 100%;margin-bottom:20px;margin-top:20px;">\
				<h3 style="display:table-cell">DRAFT LIST - COUNT {{count}}</h3>\
				<div style="display:table-cell;margin-top:20px;">\
					<select style="float: right;" data-action="sort">\
						{{#each sortOptions}}\
							<option value="{{value}}" {{#if selected}}selected{{/if}}>{{title}}</option>\
						{{/each}}\
					<select>\
				</div>\
			</div>\
			{{#if isEmpty}}\
				<div>EMPTY LIST</div>\
			{{else}}\
				<div class="list-group s-m-drafts-list">\
					{{{recordsHtml}}}\
				</div>\
			{{/if}}'
};
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};

var _Page = utils.defineClass(
	function DraftsPage($parent, state, options) {
		options.header = true;
		options.breadcrumbs = true;
		options.footer = true;
		Base.call(this, $parent, state, options);
		this._resources = [];
		this._sortOptions = [{
			value: "creation_date:asc",
			title: "Date ASC"
		}, {
			value: "creation_date:dsc",
			title: "Date DSC"
		}];
		this._sortOption = "creation_date:asc";
		notifications.subscribe(this, ["sm.action.link"]);
	}, Base, {
		scrollAllowed: function() {
			return true;
		},
		destroy: function() {
			Base.prototype.destroy.call(this);
			this._resources = null;
		},
		appendHtml: function($$parent, loadOpts) {
			this.$$elmt.addClass("drafts");
			this._buildList();
		},
		_buildList: function(justRefred) {
			var self = this;
			self.$$htmlRoot.empty();
			var step;
			if (justRefred && self._resources) {
				step = $.smResolve();
			} else {
				step = globals.getStorage().draftOperation("draftReadList").then(function(resources) {
					self._resources = resources || [];
				});
			}
			step.then(function() {
				self._sortOption = self._sortOption || "creation_date:asc";
				self._sortOptions.forEach(function(item) {
					item.selected = item.value === self._sortOption;
				});
				var recordsHtml = [];
				self._resources.forEach(function(rsrc) {
					recordsHtml.push(_getHtml("record", rsrc));
				});
				self.$$htmlRoot.html(_getHtml("content", {
					recordsHtml: recordsHtml.join('\n'),
					sortOption: self._sortOption,
					count: self._resources.length,
					isEmpty: self._resources.length == 0,
					sortOptions: self._sortOptions
				}));
			}).fail(function(e) {
				globals.getModal().error("Error loading draft list", e);
			});
		},
		_getRecordId: function($$e) {
			return $$e.closest("section.s-m-draft-item").attr("id");
		},
		_actDelete: function(params, $$e, evt) {
			var self = this;
			globals.getStorage().draftOperation("draftDelete", self._getRecordId($$e)).then(function() {
				self._buildList();
			});
		},
		_actEditDraft: function(params, $$e, evt) {
			// Get the id and triggers application.openDraft
			eventListener.triggerAction(this.$$elmt, "openDraft", this._getRecordId($$e));
		},
		/**
		 * Don't allow to open list again
		 */
		acceptGotoPage: function(state) {
			return state.name != this.state.name;
		},
		_actSort: function() {
			if (!this._resources) return;
			var val = $(arguments[1]).val();
			if (!val) return;
			var sort = val.split(":");
			if (sort.length != 2) return;
			this._sortOption = val;
			this._sortList(sort[0], sort[1]);
			this._buildList(true);
		},
		_sortList: function(property, order) {
			if (!this._resources) return [];
			this._resources.sort(function(a, b) {
				a = a[property];
				b = b[property];
				if (a == b) return 0;
				if (a > b) return order == "asc" ? +1 : -1;
				if (a < b) return order == "asc" ? -1 : +1;
			});
		},
		_formatDate: function(curISODate) {
			return curISODate ? this._dataFormatter.formatValue(curISODate) : "";
		},
		_actUpload: function(params, $$e, evt) {
			this._upload([this._getRecordId($$e)]).then(function(status) {
				console.log("_actUpload stopped", status || 'none');
			}).fail(function(e) {
				globals.getModal().error("Error uploading draft", e);
			});
		},
		_actStopUpload: function() {
			console.log("_stopUpload");
			this._stopUpload = true;
		},
		_upload: function(ids) {
			console.log("_upload ", ids.length);
			this._stopUpload = false;
			this._logData = {
				count: ids.length,
				nbOk: 0,
				log: {}
			};
			var join = $.Deferred();
			this._uploadPop(ids, join);
			return join.promise();
		},
		_uploadPop: function(ids, mainDeferred) {
			console.log("_uploadPop START", ids.length);
			try {
				if (this._stopUpload) {
					mainDeferred.resolve("stopped");
					return;
				}
				if (!ids || ids.length == 0) {
					mainDeferred.resolve("ok");
					return;
				}
				var self = this;
				self._uploadOne(ids.pop()).then(function() {
					console.log("_uploadPop", "STOP ok", ids.length);
					setTimeout(function() {
						console.log("_uploadPop", "NEXT ");
						self._uploadPop(ids, mainDeferred);
					});
				}).fail(function(e) {
					console.log("_uploadPop", "STOP Ko", e);
					mainDeferred.reject(e);
				});
			} catch (e) {
				mainDeferred.reject(e);
			}
		},
		_uploadOne: function(id) {
			var self = this;
			var deferred = $.Deferred();
			self._uploadIdBegin(id).then(function(ctx) {
				if (!ctx || !ctx.restoredContext) {
					throw new Error("unexpected null draft context");
				}
				if (!ctx.saveLink || !ctx.saveLink.sDataUrl) {
					throw new Error("unexpected null save link info");
				}
				console.log("_uploadOne draft OK");
				return globals.getMetaData().getPageDetails(ctx.restoredContext.currentState).then(function(info) {
					console.log("_uploadOne getPageDetails OK");
					return $.smResolve(ctx, info);
				}).fail(function(e) {
					return $.smReject(e);
				});
			}).then(function(draftCtx, info) {
				var dao = factory.createDaoSdata(draftCtx.dataSet, info.prototype);
				var payload = dao.getActionPayload(draftCtx.saveLink, true);
				return dispatcher.dispatch({
					$url: draftCtx.saveLink.sDataUrl,
					$method: draftCtx.saveLink.$method
				}, payload).then(function(result) {
					if (!result) {
						throw new Error("unexpected null http response");
					}
					console.log("_uploadOne dispatcher.dispatch ok", result.status);
					var responseJSON = result.responseJSON || {};
					if (!result.isSuccess) {
						// KO
						dao.updateMeta(responseJSON);
						var msg = responseJSON.$diagnoses && responseJSON.$diagnoses.length > 0 ? responseJSON.$diagnoses[0].$message : locale.text("drafts.reason.error");
						draftCtx.reason = msg;
						draftCtx.status = "error";
						draftCtx["creation_date"] = utils.getCurISODateTime(new Date());
						return self._uploadIdEnd(id, "saveFailed", msg, {
							draftCtx: draftCtx
						});
					}
					// OK
					return self._uploadIdEnd(id, "saveSucceeded");
				});
			}).fail(function(e) {
				if (!jsutils.isError(e) && $.isPlainObject(e)) {

				} else {
					console.log("_uploadOne exception", e.message);
					return self._uploadIdEnd(id, "exception", e.message, {
						exception: e
					}).always(function(e) {
						deferred.reject(e);
					});
				}
			});
			return deferred.promise();
		},
		_uploadIdBegin: function(id) {
			console.log("_uploadOne " + id);
			this.$$elmt.find("#" + id).removeClass("uploadError").addClass("uploading");
			return globals.getStorage().draftOperation("draftRead", id);
		},
		_uploadIdEnd: function(id, status, message, opts) {
			console.log("_uploadLog", status, message, id);
			var self = this;
			self._logData.log[id] = {
				status: status,
				message: message
			};
			var $$record = this.$$elmt.find("#" + id).removeClass("uploading");
			if (status === "saveSucceeded") {
				return globals.getStorage().draftOperation("draftDelete", id).then(function() {
					self._logData.nbSuccess++;
					$$record.remove();
				}).fail(function(e) {
					return $.smReject(e);
				});
			} else if (status === "saveFailed") {
				return globals.getStorage().draftOperation("draftSave", opts.draftCtx).then(function() {
					$$record.after(_getHtml("record", opts.draftCtx));
					$$record.remove();
				}).fail(function(e) {
					return $.smReject(e);
				});
			} else if (status === "exception") {
				return $.smReject(opts.exception);
			} else {
				// Exception
				return $.smReject(new Error("Unexpected draft status"));
			}
		},
		/** Event sm.action.link
		 *  Notified when a action succeeded - sdata link - see action manager
		 *  success:	true/false
		 *  link:		Link info
		 *  result:		Json response
		 */
		notifActionLink: function(success, link, result, options) {
			var self = this;
			if (!self.isActive()) return;
			switch (link.name) {
				case "draftsUploadAll":
					console.log(link.name);
					break;
				case "draftsRemoveAll":
					console.log(link.name);
					break;
				case "draftsStopUpload":
					console.log(link.name);
					break;
			}
		},
		getToolbarLinks: function(toolbar, options) {
			var device = globals.getSiteLayout().getDeviceType();
			if ((device === "tablet" && toolbar === "footer") || (device === "smartphone" && toolbar === "header")) {
				var result = [];
				_actions.forEach(function(act) {
					result.push({
						"name": act.name,
						"title": act.title,
						"icon": fontUtils.getDraftIcons(act.name),
						"$uuid": utils.UUID(),
						"css": "",
						"footerHeader": true,
						"isClientAction": true,
						"$confirm": act.$confirm,
						"$isHidden": act.$isHidden === true
					});
				});
				return result;
			}
			return null;
		}
	});

exports.Page = _Page;