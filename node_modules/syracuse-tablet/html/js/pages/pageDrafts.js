"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/pages/pageHtml').Page;
var locale = require('syracuse-tablet/html/js/helpers/locale');
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var factory = require('syracuse-tablet/html/js/application/appFactory');
var dispatcher = require('syracuse-tablet/html/js/sdata/sdataDispatcher');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var HammerScroller = require('syracuse-tablet/html/js/helpers/hammerScroller').Klass;
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');


var _templates = {
	record: '\
			<section id="{{id}}" data-action="selectRecord" class="list-group-item s-m-draft-item {{status}}">\
				<div>\
					<div>\
						<div class="draft-title">{{title}}</div>\
						<div class="draft-date">{{creation_date}}</div>\
					</div>\
					<div>\
						<div class="draft-endpoint">{{endpoint}}</div>\
						<div class="draft-reason"><b>{{reason}}</b></div>\
					</div>\
					<div>\
						<div class="draft-comment"><i class="fa fa-comment-o"></i>{{comment}}</div>\
						<div class="draft-actions">\
							<span data-action="editDraft" class="s-m-link fa fa-edit"></span>\
						</div>\
					</div>\
				</div>\
				<span class="badge checked fa fa-check">&nbsp;</span>\
			</section>',
	content: '\
			<div class="s-m-draft-header">\
				<div>\
					{{{selectMenu}}}\
				</div>\
				<div>\
					{{{filtersMenu}}}\
				</div>\
			</div>\
			{{#if isEmpty}}\
				<div>{{emptyList}}</div>\
			{{else}}\
				<div id="#draftInfo">{{info}}</div>\
				<div id="draftPageWrapper" class="s-m-scroll-wrapper">\
					<div class="list-group s-m-draft-list">\
						{{{recordsHtml}}}\
						<div id="draftSpinner">\
					   		<div>\
								<div class="spinner-loader"></div>\
							</div>\
						</div>\
					</div>\
				</div>\
			{{/if}}\
		</div>',
	selectMenu: '\
		<div id="draftSelectMenuId" class="btn-group">\
			<div class="{{dropDirection}}">\
				<button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-expanded="false">\
					<span class="badge"></span>{{title}}<span class="caret"></span>\
				</button>\
				<ul class="dropdown-menu dropdown-menu-left" role="menu">\
					{{#each links}}\
						<li><a  {{#if $isHidden}}style="display:none"{{/if}} draggable="false"  data-action="selectMenu" data-params="{{params}}" href="#">{{title}}</a></li>\
					{{/each}}\
				</ul>\
			</div>\
		</div>',
	filtersMenu: '\
		<select id="draftFiltersMenu" data-action="filter">\
		{{#each filterOptions}}\
			<option value="{{value}}" {{#if selected}}selected{{/if}}>{{title}}</option>\
		{{/each}}\
		<select>'
};
//http://www.css-spinners.com/	
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};

var _selectOptionsList = ["unselectall", "selectall", "hideunselected", "showunselected"];
var _toolbarLinks = [{
	name: "stop",
	$isHidden: true
}, {
	name: "synch",
	$isDisabled: true,
	$confirm: true
}, {
	name: "remove",
	$isDisabled: true,
	$confirm: true
}];

var _Page = utils.defineClass(
	function DraftsPage($parent, state, options) {
		options.header = true;
		options.breadcrumbs = true;
		options.footer = true;
		Base.call(this, $parent, state, options);
		this._selectedFilter = "creation_date:dsc";
		this._initLabels();
		notifications.subscribe(this, ["sm.action.link"]);
		this.dateFormatter = formatApi.getFormatter("application/x-datetime", "yyyy-MM-ddTHH:mm:ss.SSS");
	}, Base, {
		scrollAllowed: function() {
			return true;
		},
		_initLabels: function() {
			self = this;
			self._filterOptions = [{
				value: "creation_date:asc",
				title: locale.text("drafts.filters.dateasc")
			}, {
				value: "creation_date:dsc",
				title: locale.text("drafts.filters.datedsc")
			}];
		},
		destroy: function() {
			Base.prototype.destroy.call(this);
		},
		appendHtml: function($$parent, loadOpts) {
			this.$$elmt.addClass("drafts");
			this._buildList();
			/*	this.$$scrollWrapper = this.$$elmt.find("#draftPageWrapper");
			this.$$scrollWrapper.css({
				height: "auto"
			});
			this._gestureMgr = new HammerScroller(this.$$scrollWrapper, {
				isPageScroller: true
			});*/
		},
		_buildList: function() {
			var self = this;
			self.$$htmlRoot.empty();
			globals.getStorage().draftOperation("draftReadList").then(function(resources) {
				resources = self._applyFilters(resources || []);
				var recordsHtml = [];
				resources.forEach(function(rsrc) {
					recordsHtml.push(self._getRecordHtml(rsrc));
				});
				self.$$htmlRoot.html(_getHtml("content", {
					"recordsHtml": recordsHtml.join('\n'),
					"isEmpty": resources.length == 0,
					"emptyList": locale.text("drafts.emptyList"),
					"filtersMenu": self._buildSortMenu(),
					"selectMenu": self._buildSelectMenu(),
					"info": locale.text("drafts.info", [resources.length])
				}));
				self._$$spinner = self.$$htmlRoot.find("#draftSpinner");
				self._$$list = self.$$htmlRoot.find(".s-m-draft-list");
				self._$$selectMenu = self.$$htmlRoot.find("#draftSelectMenuId");
			}).then(function() {
				self._updateSelectMenu();
			}).fail(function(e) {
				globals.getModal().error("Error loading draft list", e);
			});
		},
		/**
		 * Returns the html of a record
		 */
		_getRecordHtml: function(rsrc) {
			rsrc = $.extend({}, rsrc);
			var date = utils.isoDateTimeToDate(rsrc["creation_date"]).toISOString();
			rsrc["creation_date"] = this.dateFormatter.formatValue(date);
			return _getHtml("record", rsrc);
		},
		_buildSelectMenu: function() {
			var links = [];
			_selectOptionsList.forEach(function(id) {
				links.push({
					title: locale.text("multiselect.action." + id),
					params: id,
					$isHidden: false
				});
			});
			return _getHtml("selectMenu", {
				links: links,
				title: locale.text("multiselect.selected"),
				dropDirection: "dropdown"
			});
		},
		_buildSortMenu: function() {
			var self = this;
			self._selectedFilter = self._selectedFilter || "creation_date:asc";
			var opts = [];
			self._filterOptions.forEach(function(item) {
				item = $.extend({}, item);
				item.selected = item.value === self._selectedFilter;
				opts.push(item);
			});
			return _getHtml("filtersMenu", {
				"filterOptions": opts
			});
		},
		/**
		 * Update select menu according to the status of the records
		 * Update eth number of selected records
		 */
		_updateSelectMenu: function() {
			var allRecords = this._selectRecords("all").length;
			var selectedRecords = this._selectRecords(".selected").length;
			this._$$selectMenu.find('a[data-action]').toggle(selectedRecords > 0);
			this._$$selectMenu.find('a[data-params="selectall"]').toggle(allRecords !== selectedRecords);
			var hiddenUnselRecords = this._selectRecords(":not(.selected):not(:visible)").length;
			this._$$selectMenu.find('a[data-params="hideunselected"]').toggle(selectedRecords > 0 && selectedRecords < allRecords && hiddenUnselRecords == 0);
			this._$$selectMenu.find('a[data-params="showunselected"]').toggle(selectedRecords > 0 && hiddenUnselRecords > 0);
			this._$$selectMenu.find('.badge').text(selectedRecords);
			this.$$elmt.find(".draft-synch, .draft-remove").toggleClass("disabled", selectedRecords == 0);
		},
		/**
		 * Select records accordinbt to cssSelector
		 */
		_selectRecords: function(cssSelector) {
			var selector = "";
			if (cssSelector != "all") {
				selector += cssSelector;
			}
			return this._$$list.find("section.s-m-draft-item" + selector);
		},
		_getRecordId: function($$e) {
			return $$e.closest("section.s-m-draft-item").attr("id");
		},
		/**
		 * Edit draft - Switch endpoint if needed
		 */
		_actEditDraft: function(params, $$e, evt) {
			if (this._busy === true) {
				return;
			}
			// Get the id and triggers application.openDraft
			eventListener.triggerAction(this.$$elmt, "openDraft", this._getRecordId($$e));
		},
		/**
		 * Filter records
		 */
		_actFilter: function() {
			if (this._busy === true) {
				return;
			}
			var val = $(arguments[1]).val();
			if (val == this._selectedFilter) {
				return;
			}
			this._selectedFilter = val;
			this._buildList();
		},
		_applyFilters: function(resources) {
			if (!this._selectedFilter) {
				return resources;
			}
			var f = this._selectedFilter.split(":");
			if (f.length != 2) {
				return resources;
			}
			var property = f[0];
			var order = f[1];
			resources.sort(function(a, b) {
				a = a[property];
				b = b[property];
				if (a == b) return 0;
				if (a > b) return order == "asc" ? +1 : -1;
				if (a < b) return order == "asc" ? -1 : +1;
			});
			return resources;
		},
		/**
		 * Secltion/Unselection of records
		 */
		_actSelectMenu: function(action) {
			var self = this;
			switch (action) {
				case "selectall":
				case "unselectall":
					// First show all
					var elmts = self._selectRecords("all").show();
					if (action == "unselectall") {
						elmts = self._selectRecords(".selected");
					}
					elmts.each(function() {
						self._toggleRecordSelection($(this), action === "selectall");
					});
					break;
				case "hideunselected":
					self._selectRecords(":not(.selected)").hide();
					break;
				case "showunselected":
					self._selectRecords(":not(.selected)").show();
					break;
			}
			this._updateSelectMenu();
		},
		/**
		 * Toggle record's selection
		 */
		_actSelectRecord: function(params, $$elmt, force) {
			var $$rec = $$elmt.closest(".s-m-draft-item");
			this._toggleRecordSelection($$elmt.closest(".s-m-draft-item"));
			this._updateSelectMenu();
		},
		/**
		 * force true/false/undefined
		 */
		_toggleRecordSelection: function($$rec, force) {
			if (!$$rec || $$rec.length == 0) return;
			$$rec.toggleClass("selected", force);
		},
		/**
		 * Start upload/remove
		 */
		_mainProcessBegin: function(name, ids) {
			console.log("start " + name, ids.length);
			this._stop = false;
			this._busy = true;
			this._logData = {
				nbSuccess: 0,
				nbErrors: 0,
				log: {}
			};
			this.$$elmt.find(".s-m-link").addClass("disabled");
			this.$$elmt.find(".draft-stop").removeClass("disabled").show();
		},
		/**
		 * End upload/remove
		 */
		_mainProcessEnd: function(name) {
			console.log("Stop " + name);
			this._busy = false;
			this.$$elmt.find(".s-m-link").removeClass("disabled");
			this.$$elmt.find(".draft-stop").hide();
			// Update draft counter
			this.$$elmt.find("#draftInfo").text(locale.text("drafts.info", [this._selectRecords("all").length]));
		},
		/**
		 * Upload alld the records given by ids array and resolve like _uploadPop
		 */
		_upload: function(ids) {
			var self = this;
			self._mainProcessBegin("upload", ids);
			var join = $.Deferred();
			self._uploadPop(ids).then(function(status) {
				self._mainProcessEnd("upload");
				join.resolve(status);
			}).fail(function(e) {
				self._mainProcessEnd("upload");
				join.reject(e);
			});
			return join.promise();
		},
		/**
		 * Pop the ids ids array and upload them
		 * Returns the promise that will be resolve when:
		 * 	- upload succeeded (status = completed)
		 * 	- upload failed with an exception
		 * 	- upload stopped (status = stopped)
		 * _mainDeferred is null when we call _uploadPop outside the method
		 */
		_uploadPop: function(ids, _mainDeferred) {
			var first = _mainDeferred == null;
			if (first) {
				_mainDeferred = $.Deferred();
			}
			console.log("_uploadPop START", ids.length);
			try {
				if (this._stop === true) {
					_mainDeferred.resolve("stopped");
					return;
				}
				if (!ids || ids.length == 0) {
					_mainDeferred.resolve("completed");
					return;
				}
				var self = this;
				self._uploadOne(ids.pop()).then(function() {
					console.log("_uploadPop", "STOP ok", ids.length);
					setTimeout(function() {
						console.log("_uploadPop", "NEXT ");
						self._uploadPop(ids, _mainDeferred);
					});
				}).fail(function(e) {
					console.log("_uploadPop", "STOP Ko", e);
					_mainDeferred.reject(e);
				});
			} catch (e) {
				_mainDeferred.reject(e);
			}
			return first ? _mainDeferred.promise() : null;
		},
		/**
		 * Upload the record given by id
		 * Resolve if no exception
		 * If upload succeeds 		-> Remove the draft and resolve
		 * If upload not succeeds 	-> Update the draft with new error and resolve
		 * If exception --> Reject
		 */
		_uploadOne: function(id) {
			var self = this;
			var deferred = $.Deferred();
			self._uploadOneBegin(id).then(function(ctx) {
				if (!ctx || !ctx.restoredContext) {
					throw new Error("unexpected null draft context");
				}
				if (!ctx.saveLink || !ctx.saveLink.sDataUrl) {
					throw new Error("unexpected null save link info");
				}
				console.log("_uploadOne draft OK");
				return globals.getMetaData().getPageDetails(ctx.restoredContext.currentState).then(function(info) {
					console.log("_uploadOne getPageDetails OK");
					return $.smResolve(ctx, info);
				}).fail(function(e) {
					return $.smReject(e);
				});
			}).then(function(draftCtx, info) {
				var dao = factory.createDaoSdata(draftCtx.dataSet, info.prototype);
				var payload = dao.getActionPayload(draftCtx.saveLink, true);
				return dispatcher.dispatch({
					$url: draftCtx.saveLink.sDataUrl,
					$method: draftCtx.saveLink.$method
				}, payload).then(function(result) {
					if (!result) {
						throw new Error("unexpected null http response");
					}
					console.log("_uploadOne dispatcher.dispatch ok", result.status);
					var responseJSON = result.responseJSON || {};
					var next;
					if (!result.isSuccess) {
						// KO
						dao.updateMeta(responseJSON);
						var msg = responseJSON.$diagnoses && responseJSON.$diagnoses.length > 0 ? responseJSON.$diagnoses[0].$message : locale.text("drafts.reason.error");
						draftCtx.reason = msg;
						draftCtx.status = "error";
						draftCtx["creation_date"] = utils.getCurISODateTime(new Date());
						next = self._uploadOneEnd(id, "saveFailed", msg, {
							draftCtx: draftCtx
						});
					} else {
						// OK
						next = self._uploadOneEnd(id, "saveSucceeded");
					}
					return next;
				});
			}).then(function() {
				deferred.resolve();
			}).fail(function(e) {
				// Exception expected
				console.log("_uploadOne exception", e.message);
				return self._uploadOneEnd(id, "exception", e.message, {
					exception: e
				}).always(function(e) {
					deferred.reject(e);
				});
			});
			return deferred.promise();
		},
		/**
		 * Set the ui context
		 * Reads the draft
		 */
		_uploadOneBegin: function(id) {
			console.log("_uploadOne " + id);
			var $$rec = this.$$elmt.find("#" + id).removeClass("uploadError"); //.addClass("dduploading");
			if (this._$$spinner) {
				var pos = $$rec.position();
				this._$$spinner.css({
					top: pos.top + 4,
					display: 'table'
				});
				this._$$spinner.children().outerHeight($$rec.outerHeight());
			}
			this.getGestureMgr().makeVisible($$rec);
			return globals.getStorage().draftOperation("draftRead", id);
		},
		/**
		 * Set ui context
		 * SAve/Delete the draft according to the status
		 */
		_uploadOneEnd: function(id, status, message, opts) {
			console.log("_uploadLog", status, message, id);
			var self = this;
			self._logData.log[id] = {
				status: status,
				message: message
			};
			if (this._$$spinner) {
				this._$$spinner.hide();
			}
			var $$record = this.$$elmt.find("#" + id);
			if (status === "saveSucceeded") {
				return globals.getStorage().draftOperation("draftDelete", id).then(function() {
					self._logData.nbSuccess++;
					$$record.remove();
				}).fail(function(e) {
					return $.smReject(e);
				});
			} else if (status === "saveFailed") {
				return globals.getStorage().draftOperation("draftSave", opts.draftCtx).then(function() {
					self._logData.nbErrors++;
					var $$newRecord = $(self._getRecordHtml(opts.draftCtx));
					$$record.after($$newRecord);
					$$newRecord.find(".s-m-link").addClass("disabled");
					$$record.remove();
				}).fail(function(e) {
					return $.smReject(e);
				});
			} else if (status === "exception") {
				return $.smReject(opts.exception);
			} else {
				// Exception
				return $.smReject(new Error("Unexpected draft status"));
			}
		},
		/**
		 * Upload all the drafts
		 */
		_uploadAll: function() {
			var self = this;
			self._upload(this.$$elmt.find(".s-m-draft-item").map(function() {
				return this.id;
			}).get().reverse()).then(function(status) {
				var nbSuccess = self._logData.nbSuccess;
				var nbErrors = self._logData.nbErrors;
				var count = nbSuccess + nbErrors;
				globals.getModal().info("Uploading draft " + (status === "stopped" ? "stopped" : "completed") + " - Count: " + count, "Errors: " + nbErrors + " - Success: " + nbSuccess);
			}).fail(function(e) {
				globals.getModal().error("Error uploading drafts", e);
			});
		},
		_removeAll: function() {
			var self = this;
			globals.getStorage().draftOperation("draftDeleteAll").then(function() {
				self._buildList();
			}).fail(function(e) {
				globals.getModal().error("Error reming drafts", e);
			});
		},
		/** Event sm.action.link
		 *  Notified when a action succeeded - sdata link - see action manager
		 *  success:	true/false
		 *  link:		Link info
		 *  result:		Json response
		 */
		notifActionLink: function(success, link, result, options) {
			if (!this.isActive()) return;
			switch (link.name) {
				case "synch":
					this._uploadAll();
					break;
				case "remove":
					this._removeAll();
					break;
				case "stop":
					this._stop = true;
					break;
			}
		},
		/**
		 * Returns the links to display in the header/footer
		 */
		getToolbarLinks: function(toolbar, options) {
			var device = globals.getSiteLayout().getDeviceType();
			if ((device === "tablet" && toolbar === "footer") || (device === "smartphone" && toolbar === "header")) {
				var result = [];
				_toolbarLinks.forEach(function(act) {
					result.push({
						"name": act.name,
						"title": locale.text("drafts.action." + act.name),
						"icon": fontUtils.getDraftIcons(act.name),
						"$uuid": utils.UUID(),
						"css": "draft-" + act.name,
						"footerHeader": true,
						"isClientAction": true,
						"$confirm": act.$confirm === true ? locale.text("drafts.confirm." + act.name) : null,
						"$isHidden": act.$isHidden === true,
						"$isDisabled": act.$isDisabled === true
					});
				});
				return result;
			}
			return null;
		}
	});

exports.Page = _Page;