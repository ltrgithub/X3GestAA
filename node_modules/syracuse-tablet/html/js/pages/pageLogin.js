"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/pages/pageHtml').Page;
var auth = require('syracuse-tablet/html/js/application/authentication');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var uiRect = require('syracuse-tablet/html/js/ui/rect');
var settings = require('syracuse-tablet/html/js/application/settings');
var scroller = require('syracuse-tablet/html/js/helpers/scroller/scrollerHelpers');
var initLogin = require('syracuse-tablet/html/js/init/initLogin');
var auth = require('syracuse-tablet/html/js/application/authentication');
var nativeApp = require('syracuse-tablet/html/js/helpers/native/native').getModule("nativeApp");

var _pageTemplate = '\
		<div class="s-m-scroll-wrapper">\
			<div class="s-m-loginform s-m-scroll-elmt" style="display:none;">\
				<div class="row s-m-login-info">\
					<div class="col-xs-offset-1 col-xs-10 col-sm-offset-3 col-sm-6 col-md-offset-4 col-md-4 col-lg-offset-4 col-lg-4">\
						<div id="login-reason" style="display: none" class="alert alert-info" role="alert"></div>\
						<div id="login-success" style="display: none" class="alert alert-success" role="alert"></div>\
						<div id="login-fail" style="display:none;max-height:100px;overflow:hidden;" class="alert alert-danger" role="alert"></div>\
					</div>\
				</div>\
				<div id="s-m-login-online" class="row">\
					<div class="col-xs-offset-1 col-xs-10 col-sm-offset-3 col-sm-6 col-md-offset-4 col-md-4 col-lg-offset-4 col-lg-4">\
						<div class="panel panel-default">\
							<div id="s-m-login-withcookie" style="display: none;">\
								<div class="panel-body s-m-login-body">\
									<center>\
										<div id="s-m-rememberme-user-id"></div>\
									</center>\
								</div>\
								<div class="panel-body s-m-login-body">\
									<button  data-action="forgetme" type="button" class="btn btn-primary s-m-signin-btn">{{label_forgetme}}</button>\
								</div>\
								<div class="panel-body s-m-login-body" id="s-m-login-changeuser">\
									<button  data-action="changeuser" type="button" class="btn btn-primary s-m-signin-btn">{{label_changeuser}}</button>\
								</div>\
							</div>\
							<div  id="s-m-login-withoutcookie">\
								<div class="s-m-login-header">\
									<span class="s-m-signin">{{label_signin}}</span>\
									<span class="s-m-brand">{{label_brand}}</span>\
									<span class="s-m-product">{{label_product}}</span>\
								</div>\
								<div class="panel-body s-m-login-body" id="s-m-login-basic-fields-id">\
									<br>\
									<div class="form-group">\
										<input type="text" value="" class="form-control s-m-login-form-input" placeholder="{{label_user}}"	id="login-user">\
									</div>\
									<br>\
									<div class="form-group">\
										<input type="password" class="form-control s-m-login-form-input" placeholder="{{label_password}}" id="login-password">\
									</div>\
									<div class="form-group">\
										<center>\
											<input type="checkbox" id="s-m-remember-me-id">{{label_rememberme}}</input>\
										</center>\
									</div>\
									<button id="login-login" data-action="login" type="button" class="btn btn-primary s-m-signin-btn">{{act_login}}</button>\
								</div>\
								<div class="s-m-login-header" id="s-m-sageid-header">\
									<span class="s-m-signin">{{sageid_label_header}}</span>\
								</div>\
								<div class="panel-body s-m-login-body" id="s-m-sageid-body">\
									<button id="s-m-sageid-signin" data-action="sageidsignin" type="button" class="btn btn-primary s-m-signin-btn">{{sageid_label_signin}}</button>\
								</div>\
							</div>\
						</div>\
					</div>\
				</div>\
				<div id="s-m-login-offline" class="row" style="display: none;">\
					<div class="col-xs-offset-1 col-xs-10 col-sm-offset-3 col-sm-6 col-md-offset-4 col-md-4 col-lg-offset-4 col-lg-4">\
						<div class="panel panel-default">\
							<div class="s-m-login-header"><span class="s-m-signin">{{label_signin}} </span> <span class="s-m-brand">{{label_brand}}</span> <span class="s-m-product">{{label_product}}</span></div>\
							<div class="s-m-login-header" id="s-m-offline-header">\
								<span class="s-m-signin">{{offline_label_header}}</span>\
							</div>\
							<div class="panel-body s-m-login-body" id="s-m-sageid-body">\
								<button id="s-m-offline-signin" data-action="offlinesignin" type="button" class="btn btn-primary s-m-signin-btn"> \
									<div id="s-m-offline-label">{{offline_label_signin_as}}</div> \
									<div id="s-m-offline-user"></div> \
								</button>\
							</div>\
						</div>\
					</div>\
				</div>\
				<div id="s-m-login-nooffline" class="row" style="display: none;">\
					<div class="col-xs-offset-1 col-xs-10 col-sm-offset-3 col-sm-6 col-md-offset-4 col-md-4 col-lg-offset-4 col-lg-4">\
						<div class="panel panel-default">\
							<div class="s-m-login-header" id="s-m-offline-header">\
									{{offline_notavail}}\
							</div>\
							<div class="panel-body s-m-login-body" id="s-m-sageid-body">\
								<div>{{offline_emptydb}}</div> \
							</div>\
						</div>\
					</div>\
				</div>\
			</div>\
		</div>\
	';

var lang;
var _Page = utils.defineClass(

	function LoginPage($parent, state, options) {
		options.header = false;
		options.footer = false;
		Base.call(this, $parent, state, options);
	}, Base, {

		appendHtml: function($$parent, loadOpts) {
			var self = this;

			// Add class login to add background
			self.$$elmt.addClass("login");
			var labels = locale.getProductLabels();
			var _pageContext = {
				"label_user": locale.text("login.label.user"),
				"label_password": locale.text("login.label.password"),
				"act_login": locale.text("login.label.signinaction"),
				"label_signin": locale.text("login.label.signin"),
				"label_brand": labels.brand,
				"label_product": labels.product,
				"sageid_label_header": locale.text("sageid.label.header"),
				"sageid_label_signin": locale.text("sageid.label.signin"),
				"offline_label_header": locale.text("login.label.offline"),
				"offline_label_signin_as": locale.text("login.label.login_as"),
				"offline_notavail": locale.text("login.offline.notavail"),
				"offline_emptydb": locale.text("login.offline.emptydb"),
				"label_forgetme": locale.text("login.forgetme"),
				"label_changeuser": locale.text("login.changeuser"),
				"label_rememberme": locale.text("login.rememberme")
			};
			var template = Handlebars.compile(_pageTemplate);
			$$parent.html(template(_pageContext));

			var msg;
			if (self.state.options.reason) {
				if (self.state.options.isError === true) {
					msg = self.state.options.reason;
				} else {
					self._displayText($$parent.find("#login-reason"), self.state.options.reason);
				}
			}
			// Use global offline state
			var offlineState = !globals.isOnline();

			// Offline state may be overridden by the caller of the login page
			// in case the caller can determine online/offline mode more relyably (for example because he did an request just before)
			if (self.state.options && self.state.options.offlineHint != null) {
				offlineState = self.state.options.offlineHint;
			}
			self._updateStatus(msg, offlineState);
			self._gestureMgr = scroller.newScroller($(".s-m-scroll-elmt", self.$$elmt), {
				direction: "v"
			});

			// We listen on enter key on the basic authentication fields only for now
			// to simplify usage on android tablets
			$('#s-m-login-basic-fields-id input', self.$$elmt).on('keyup', jsutils.bindFn(self._onEnterPressed, self));
		},
		_onEnterPressed: function(e) {
			var self = this;
			if (e.which == 13 || e.keyCode == 13) {
				e.preventDefault();

				// This will check mandatory fields and set focus accordingly
				self._actLogin();
			}
		},
		_actLogin: function() {
			var self = this;
			var usr = self.$$elmt.find("#login-user").val();
			var pwd = self.$$elmt.find("#login-password").val();

			// User mandatory, so focus there
			if (usr == null || usr.length < 1) {
				self.$$elmt.find("#login-usr").focus();
				return;
			}
			// Password mandatory, so focus there
			if (pwd == null || pwd.length < 1) {
				self.$$elmt.find("#login-password").focus();
				return;
			}

			self.$$elmt.find("#login-reason").hide();
			self.waitWheelStart();

			var rememberMe = $("#s-m-remember-me-id").is(':checked');
			if (nativeApp) {
				rememberMe = true;
			}
			return settings.setLoginRememberMe(rememberMe)
				.then(function() {
					return auth.login(usr, pwd, rememberMe);
				})
				.then(function(userProfile) {
					return initLogin.notifLoggedIn(userProfile);
				}).then(function() {
					self.waitWheelStop();
				}).fail(function(e, offline) {
					self.waitWheelStop();
					self._updateStatus(e, offline);
				});
		},
		_checkMessage: function(e) {
			var self = this;
			self.message = null;
			self.stack = null;
			var diag = jsutils.convertToDiagnoses(e);
			if (diag && diag.$diagnoses && diag.$diagnoses.length > 0) {
				diag = diag.$diagnoses[0];
			}
			if (diag && diag.$message) {
				self.message = diag.$message;
				self.stack = diag.$stackTrace;
			}
			if (e && e.$redirectPage === "login") {
				if (!self.message) {
					self._displayText($("#login-reason"), locale.text("login.authentication"));
				}
			} else if (!self.message) {
				self.message = "Unexpected empty error message";
			}
			var $$fail = $("#login-fail");
			if (self.message) {
				// locale is not initilized in some particular cases
				self._displayText($$fail, (locale.text("login.failed") || "Login failed") + "<p>" + self.message + "</p>" + (self.stack ? self.stack : ""));
			} else {
				$$fail.empty().hide();
			}
		},
		_updateStatus: function(e, forceOffLine) {
			var self = this;
			if (forceOffLine) {
				self.setOffLine(true);
			}
			if (e) {
				self._checkMessage(e);
			}
			var step;
			self._offLineProfile = null;
			if (self.isOffLine()) {
				step = settings.getLastUserProfile().then(function(profile) {
					self._offLineProfile = profile;
					return $.smResolve();
				}).fail(function(e) {
					self._checkMessage(e);
					return $.smResolve();
				});
			} else {
				/* We check if there's a loginCookie and if it is valid*/
				step = auth.reconnectGetToken().then(function(loginCookie, loginCookieUser) {
					return $.smResolve(loginCookie, loginCookieUser);
				});
			};
			step.then(function(loginCookie, loginCookieUser) {
				$("#s-m-offline-user").text("");
				if (self.isOffLine()) {
					// Offline login - Only one choice - Connect with last user profile (stored locally)
					$("#s-m-login-online").hide();
					if (self._offLineProfile) {
						$("#s-m-offline-user").text((self._offLineProfile.user.firstName || "") + " " + (self._offLineProfile.user.lastName || ""));
						$("#s-m-login-offline").show();
						$("#s-m-login-nooffline").hide();
					} else {
						// No _offLineProfile found - Occurs if cache as been cleared before offline - No data in local db
						$("#s-m-login-offline").hide();
						$("#s-m-login-nooffline").show();
					}
				} else if (loginCookie) {
					// Valid login cookie - User is 'still' connected - We ask him/her forgetMe or change user
					$("#s-m-login-offline").hide();
					$("#s-m-login-withoutcookie").hide().find(".s-m-login-header").hide();
					$("#s-m-login-nooffline").hide();
					$("#s-m-login-withcookie").show();
					$("#s-m-rememberme-user-id").text(locale.text("login.label.login.cookie", [loginCookieUser]));
				} else {
					// Regular login
					$("#s-m-login-online").show();
					$("#s-m-login-offline").hide();
				}
			})
				.then(function() {
					return settings.getLoginRememberMe();
				})
				.then(function(rememberMe) {
					var $$check = $("#s-m-remember-me-id");
					if (nativeApp) {
						rememberMe = true;
						$$check.closest(".form-group").hide();
					}
					$$check.attr('checked', rememberMe);
				})
				.fail(function(e) {
					self._checkMessage(e);
				});
		},
		/**
		 * Sends forgetMe request and goto login
		 */
		_actForgetme: function() {
			auth.forgetme().then(function() {
				globals.getApplication().logout("logout.msg");
			});
		},
		/**
		 * Displays user/password credentials
		 */
		_actChangeuser: function() {
			this._displayText($("#login-reason"), locale.text("login.authentication"));
			$("#s-m-login-withoutcookie").show();
			$("#s-m-login-changeuser").hide();
			this._updateScrollMgr();
		},
		_displayText: function($$parent, text) {
			if (!$$parent) return;
			if (!text) {
				$$parent.empty().hide();
				return;
			}
			$$parent.show().html(text.replace(/\n/g, "<br>"));
		},
		_actSageidsignin: function() {
			this.$$elmt.find("#login-reason").hide();
			this._updateScrollMgr();
			auth.sageidsignin();
		},
		_actOfflinesignin: function() {
			var self = this;
			self.$$elmt.find("#login-reason").hide();
			this._updateScrollMgr();
			initLogin.notifLoggedIn(self._offLineProfile, true).then(function() {
				// Nothing - Home page is opened by login notification
			}).fail(function(e) {
				self._updateStatus(e);
			});
		},
		onMainPageResize: function(info, orientation, deviceClass) {
			var self = this;
			if (self.destroyed) return;
			Base.prototype.onMainPageResize.call(self, info, orientation, deviceClass);
			var $$form = self.$$htmlRoot.find("div.s-m-loginform");
			$$form.show();
			// handle gesture (necessary for small screen devices)
			setTimeout(function() {
				self._updateScrollMgr(info);
			});
		},
		_updateScrollMgr: function(opts) {
			if (this.destroyed || !this._gestureMgr) return;
			// reset old scrolling to calculate width/height (mandatory in native mode)
			this._gestureMgr.reset();
			var $$scrollWrapper = $(".s-m-scroll-wrapper", this.$$elmt);
			var mainRect = uiRect.elmtRect(this.$$contentElmt, "inner");
			var wrapperRect = uiRect.elmtRect($$scrollWrapper, "inner");
			var scrollRect = wrapperRect.intersectRect(mainRect);
			var hScroll = this._gestureMgr.$$elmt.height();
			if (scrollRect.height < hScroll) {
				this._gestureMgr.init(scrollRect, null, null, opts && opts.preserveScroll);
			}

		},
		scrollAllowed: function() {
			return false;
		},
		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this._gestureMgr) {
				this._gestureMgr.destroy();
				this._gestureMgr = null;
			}
		},
		isOffLine: function() {
			return Base.prototype.isOffLine.call(this) || !globals.isOnline();
		}
	});

exports.Page = _Page;