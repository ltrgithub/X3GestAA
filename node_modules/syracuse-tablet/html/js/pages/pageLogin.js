"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/pages/pageHtml').Page;
var auth = require('syracuse-tablet/html/js/application/authentication');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var uiRect = require('syracuse-tablet/html/js/ui/rect');
var settings = require('syracuse-tablet/html/js/application/settings');
var HammerScroller = require('syracuse-tablet/html/js/helpers/hammerScroller').Klass;
var initLogin = require('syracuse-tablet/html/js/init/initLogin');

var _pageTemplate = '\
		<div class="s-m-scroll-wrapper">\
			<div class="s-m-loginform" style="display:none;position: relative;">\
				<div class="row s-m-login-info">\
					<div class="col-xs-offset-1 col-xs-10 col-sm-offset-3 col-sm-6 col-md-offset-4 col-md-4 col-lg-offset-4 col-lg-4">\
						<div id="login-reason" style="display: none" class="alert alert-info" role="alert"></div>\
						<div id="login-success" style="display: none" class="alert alert-success" role="alert"></div>\
						<div id="login-fail" style="display: none" class="alert alert-danger" role="alert"></div>\
					</div>\
				</div>\
				<div id="s-m-login-online" class="row">\
					<div class="col-xs-offset-1 col-xs-10 col-sm-offset-3 col-sm-6 col-md-offset-4 col-md-4 col-lg-offset-4 col-lg-4">\
						<div class="panel panel-default">\
							<div class="s-m-login-header"><span class="s-m-signin">{{label_signin}} </span> <span class="s-m-brand">{{label_brand}}</span> <span class="s-m-product">{{label_product}}</span></div>\
							<div class="panel-body s-m-login-body">\
								<br>\
								<div class="form-group">\
									<input type="text" value="" class="form-control s-m-login-form-input" placeholder="{{label_user}}"	id="login-user">\
								</div>\
								<br>\
								<div class="form-group">\
									<input type="password" class="form-control s-m-login-form-input" placeholder="{{label_password}}" id="login-password">\
								</div>\
								<br>\
								<button id="login-login" data-action="login" type="button" class="btn btn-primary s-m-signin-btn">{{act_login}}</button>\
							</div>\
							<div class="s-m-login-header" id="s-m-sageid-header">\
								<span class="s-m-signin">{{sageid_label_header}}</span>\
							</div>\
							<div class="panel-body s-m-login-body" id="s-m-sageid-body">\
								<button id="s-m-sageid-signin" data-action="sageidsignin" type="button" class="btn btn-primary s-m-signin-btn">{{sageid_label_signin}}</button>\
							</div>\
						</div>\
					</div>\
				</div>\
				<div id="s-m-login-offline" class="row" style="display: none;">\
					<div class="col-xs-offset-1 col-xs-10 col-sm-offset-3 col-sm-6 col-md-offset-4 col-md-4 col-lg-offset-4 col-lg-4">\
						<div class="panel panel-default">\
							<div class="s-m-login-header"><span class="s-m-signin">{{label_signin}} </span> <span class="s-m-brand">{{label_brand}}</span> <span class="s-m-product">{{label_product}}</span></div>\
							<div class="s-m-login-header" id="s-m-offline-header">\
								<span class="s-m-signin">{{offline_label_header}}</span>\
							</div>\
							<div class="panel-body s-m-login-body" id="s-m-sageid-body">\
								<button id="s-m-offline-signin" data-action="offlinesignin" type="button" class="btn btn-primary s-m-signin-btn"> \
									<div id="s-m-offline-label">{{offline_label_signin_as}}</div> \
									<div id="s-m-offline-user"></div> \
								</button>\
							</div>\
						</div>\
					</div>\
				</div>\
				<div id="s-m-login-nooffline" class="row" style="display: none;">\
						<div class="col-xs-offset-1 col-xs-10 col-sm-offset-3 col-sm-6 col-md-offset-4 col-md-4 col-lg-offset-4 col-lg-4">\
						<div class="panel panel-default">\
							<div class="s-m-login-header" id="s-m-offline-header">\
									{{offline_notavail}}\
							</div>\
							<div class="panel-body s-m-login-body" id="s-m-sageid-body">\
								<div>{{offline_emptydb}}</div> \
							</div>\
						</div>\
					</div>\
				</div>\
			</div>\
		</div>\
	';

var lang;
var _Page = utils.defineClass(

	function LoginPage($parent, state, options) {
		options.header = false;
		options.footer = false;
		this.offline = false;
		this.message = null;
		this.stack = null;
		Base.call(this, $parent, state, options);
	}, Base, {

		appendHtml: function($$parent, loadOpts) {
			var self = this;

			// Add class login to add background
			self.$$elmt.addClass("login");
			var labels = locale.getProductLabels();
			var _pageContext = {
				"label_user": locale.text("login.label.user"),
				"label_password": locale.text("login.label.password"),
				"act_login": locale.text("login.label.signinaction"),
				"label_signin": locale.text("login.label.signin"),
				"label_brand": labels.brand,
				"label_product": labels.product,
				"sageid_label_header": locale.text("sageid.label.header"),
				"sageid_label_signin": locale.text("sageid.label.signin"),
				"offline_label_header": locale.text("login.label.offline"),
				"offline_label_signin_as": locale.text("login.label.login_as"),
				"offline_notavail": locale.text("login.offline.notavail"),
				"offline_emptydb": locale.text("login.offline.emptydb"),
			};
			var template = Handlebars.compile(_pageTemplate);
			$$parent.html(template(_pageContext));

			if (self.state.options.reason) {
				$$parent.find("#login-reason").text(self.state.options.reason).show();
			}

			if (!globals.isOnline()) {
				self.offline = true;
				self._updateStatus();
			}

			self._gestureMgr = new HammerScroller($(".s-m-loginform", self.$$elmt), {
				direction: "v"
			});
		},
		_actLogin: function() {
			var self = this;
			self.$$elmt.find("#login-reason").hide();
			var usr = self.$$elmt.find("#login-user").val();
			var pwd = self.$$elmt.find("#login-password").val();
			self.waitWheelStart();
			return settings.loginRememberMe().then(function(rememberMe) {
				return auth.login(usr, pwd, rememberMe);
			}).then(function(userProfile) {
				return initLogin.notifLoggedIn(userProfile, null);
			}).then(function(loggedIn) {
				self.waitWheelStop();
				if (!loggedIn) {
					// Not expected
					self._checkMessage(locale.text("login.issue"));
					self._updateStatus();
				}
			}).fail(function(e, offline) {
				self.waitWheelStop();
				self.offline = offline;
				self._checkMessage(e);
				self._updateStatus(offline);
			});
		},
		_checkMessage: function(e) {
			var self = this;
			self.message = null;
			self.stack = null;
			if (e && e.message === "$nomessage$") {
				self.$$elmt.find("#login-reason").show().text(locale.text("login.authentication"));
				return;
			}
			var diag = jsutils.convertToDiagnoses(e);
			if (diag && diag.$diagnoses && diag.$diagnoses.length > 0) {
				diag = diag.$diagnoses[0];
			}
			if (diag) {
				self.message = diag.$message;
				self.stack = diag.$stackTrace;
			} else {
				self.message = "Unexpected empty error message";
			}
		},
		// offline means that _updateStatus is called in offline context
		_updateStatus: function(offline) {
			var self = this;
			var $$fail = $("#login-fail");
			if (self.message) {
				$$fail.show().html(locale.text("login.failed") + "<p>" + self.message + "</p>" + (self.stack ? self.stack : ""));
			} else {
				$$fail.empty().hide();
			}

			settings.getLastUserProfile().then(function(profile) {
				self.profile = profile;
				if (!self.profile) {
					if (offline) {
						// If offline no profile means empty db
						self.offline = true;
					} else {
						// If there is no user profile stored on the device, only allow online login
						self.offline = false;
					}
				} else {
					$("#s-m-offline-user").text((self.profile.user.firstName || "") + " " + (self.profile.user.lastName || ""));
				}

				if (self.offline) {
					$("#s-m-login-online").hide();
					if (self.profile) {
						$("#s-m-login-offline").show();
						$("#s-m-login-nooffline").hide();
					} else {
						// No profile found - Occurs if cache as been cleared before offline - No data in local db
						$("#s-m-login-offline").hide();
						$("#s-m-login-nooffline").show();
					}
				} else {
					$("#s-m-login-online").show();
					$("#s-m-login-offline").hide();
				}
			}).fail(function(e) {
				self.offline = offline;
				self._checkMessage(e);
				self._updateStatus();
			});
		},
		_actSageidsignin: function() {
			this.$$elmt.find("#login-reason").hide();
			auth.sageidsignin();
		},
		_actOfflinesignin: function() {
			var self = this;
			self.$$elmt.find("#login-reason").hide();
			initLogin.notifLoggedIn(self.profile, null, true).then(function(loggedIn) {
				if (!loggedIn) {
					// Not expected
					self._checkMessage(locale.text("login.issue"));
					self._updateStatus();
				}
			}).fail(function(e) {
				self._checkMessage(e);
				self._updateStatus();
			});
		},
		onMainPageResize: function(info, orientation, deviceClass) {
			var self = this;
			if (self.destoyed) return;
			Base.prototype.onMainPageResize.call(self, info, orientation, deviceClass);

			var $$form = self.$$htmlRoot.find("div.s-m-loginform");
			$$form.show();

			// handle gesture (necessary for small screen devices)
			setTimeout(function() {
				if (self.destoyed) return;
				var $$scrollWrapper = $(".s-m-scroll-wrapper", self.$$elmt);
				var scrollRect = uiRect.elmtRect($$scrollWrapper, "outer");
				var hScroll = self._gestureMgr.$$elmt.height();

				if (scrollRect.height < hScroll) {
					self._gestureMgr.init(scrollRect, null, null, info && info.preserveScroll);
				} else {
					self._gestureMgr.reset();
				}

			});
		},
		scrollAllowed: function() {
			return false;
		},
		destroy: function() {
			Base.prototype.destroy.call(this);
			if (this._gestureMgr) {
				this._gestureMgr.destroy();
				this._gestureMgr = null;
			}
		}
	});

exports.Page = _Page;