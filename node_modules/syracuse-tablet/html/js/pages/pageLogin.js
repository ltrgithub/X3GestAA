"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/pages/pageHtml').Page;
var auth = require('syracuse-tablet/html/js/application/authentication');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

var _pageTemplate = '\
	<div class="s-m-loginform" style="display:none">\
		<div class="row">\
			<div class="col-xs-offset-1 col-xs-10 col-sm-offset-3 col-sm-6 col-md-offset-4 col-md-4 col-lg-offset-4 col-lg-4">\
				<div class="panel panel-default">\
					<div class="s-m-login-header"><span class="s-m-signin">{{label_signin}} </span> <span class="s-m-brand">{{label_brand}}</span> <span class="s-m-product">{{label_product}}</span></div>\
					<div class="panel-body s-m-login-body">\
						<br>\
						<div class="form-group">\
							<input type="text" value="" class="form-control s-m-login-form-input" placeholder="{{label_user}}"	id="login-user">\
						</div>\
						<br>\
						<div class="form-group">\
							<input type="password" class="form-control s-m-login-form-input" placeholder="{{label_password}}" id="login-password">\
						</div>\
						<br>\
						<br>\
						<button id="login-login" data-action="login" type="button" class="btn btn-primary s-m-signin-btn">{{act_login}}</button>\
					</div>\
				</div>\
			</div>\
		</div>\
		<div class="row">\
			<div class="col-xs-offset-1 col-xs-10 col-sm-offset-3 col-sm-6 col-md-offset-4 col-md-4 col-lg-offset-4 col-lg-4">\
				<div id="login-reason" style="display: none" class="alert alert-info" role="alert"></div>\
				<div id="login-success" style="display: none" class="alert alert-success" role="alert"></div>\
				<div id="login-fail" style="display: none" class="alert alert-danger" role="alert"></div>\
			</div>\
		</div>\
	</div>';

var lang;
var _Page = utils.defineClass(

	function($parent, state, options) {
		options.header = false;
		options.footer = false;
		Base.call(this, $parent, state, options);
	}, Base, {

		appendHtml: function($$parent, loadOpts) {
			// Add class login to add background
			this.$$elmt.addClass("login");
			var _pageContext = {
				"label_user": locale.text("login.label.user"),
				"label_password": locale.text("login.label.password"),
				"act_login": locale.text("login.label.signinaction"),
				"label_signin": locale.text("login.label.signin"),
				"label_brand": locale.text("login.label.brand"),
				"label_product": locale.text("login.label.product")
			};
			var template = Handlebars.compile(_pageTemplate);
			$$parent.html(template(_pageContext));
			if (this.state.options.reason) {
				$$parent.find("#login-reason").text(this.state.options.reason).show();
			}
		},

		_actLogin: function() {
			var self = this;
			var deferred = $.Deferred();
			var askDlog = false;
			try {
				self.$$elmt.find("#login-reason").remove();
				var $$success = self.$$elmt.find("#login-success").hide();
				var $$fail = self.$$elmt.find("#login-fail").hide();
				var usr = self.$$elmt.find("#login-user").val();
				var pwd = self.$$elmt.find("#login-password").val();
				var locale = self.$$elmt.find("#login-locale").val();
				var userProfile = null;
				self.waitWheelStart();
				// TODO: Locale needs to be sent to server to get messages etc. in correct language
				auth.login(usr, pwd).then(function(ok, syraUsrProfile, message) {
					if (ok) {
						userProfile = syraUsrProfile;
						return $.smResolve();
					} else {
						return $.smReject(message);
					}
				}).then(function() {
					self.waitWheelStop();
					var notifDeferred = $.Deferred();
					// We pass a deferred to be notified with error/success of initLogin process
					// !! only one subscriber of sm.login should resolve/reject the deferred
					notifications.publish("sm.login", userProfile, notifDeferred);
					return notifDeferred.promise();
				}).then(function(context) {
					// Result of notification - Do Nothing - Display of welcomeApplication page is managed by application
				}).fail(function(e) {
					// notification failed - display error 
					var stack, message;
					if (jsutils.isError(e)) {
						message = e.message;
						stack = jsutils.cleanStack(e.stack, 3, true);
					} else {
						message = e;
					}
					$$fail.show().html("Login failed<p>" + message + "</p>" + (stack ? stack : ""));
					self.waitWheelStop();
				});
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},
		onMainPageResize: function(info, orientation, deviceClass) {
			Base.prototype.onMainPageResize.call(this, info, orientation, deviceClass);
			var hpage = this.$$elmt.outerHeight();
			var $$form = this.$$htmlRoot.children("div.s-m-loginform");
			var hform = $$form.height();
			this.$$htmlRoot.css({
				top: Math.max(0, Math.round((hpage - hform) / 2)),
				position: "relative"
			});
			$$form.show();
		},
		scrollAllowed: function() {
			return false;
		}
	});

exports.Page = _Page;