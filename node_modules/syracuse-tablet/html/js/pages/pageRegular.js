"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("page");
var Base = require('syracuse-tablet/html/js/pages/page').Page;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var dispatcher = require('syracuse-tablet/html/js/sdata/sdataDispatcher');
var factory = require('syracuse-tablet/html/js/application/appFactory');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

//These link enable wait on control - TODO enable only if data not in cache for next, prev...
var _controlWheel = ["$more"]; //"$next", "$last", "$previous","$more","$first"];
/**
 * Page with representation and sdata back-end
 */
var _Page = utils.defineClass(
	function($parent, state, prototype, article) {
		var self = this;
		Base.call(self, $parent, state, prototype, article);
		self.gadget = self.state.options.gadget;
		self._initSdataInfo(self.state.options["sdata-url"], self.state.options["sdata-method"]);
		notifications.subscribe(self, ["sm.lookup.selection"], 1);
		if (self.prototype.data("$url")) {
			self.$facet = sdataUtils.parseSDataURL(self.prototype.data("$url")).facet;
			// Override the standard "display" activity
			self.$activity = self.$facet === "edit" ? "edit" : self.$facet === "create" ? "create" : "read";
		}
	}, Base, {
		/**
		 *  Init sdata url - Called in constructor and page refresh
		 * 	sdataUrl is optional in case of a gadget (to see with Mathias)
		 * 	sdataMethod is optional
		 *  Can be overridden - rowdetail
		 */
		_initSdataInfo: function(sdataUrl, sdataMethod) {
			var self = this;
			if (!sdataUrl) {
				if (self.gadget) {
					sdataUrl = self.gadget.getSDataUrl(self.prototype);
				} else {
					sdataUrl = self.prototype.data("$url");
				}
			}
			if (self.gadget) {
				var params = self.gadget.getParameters();
				if (params.where) {
					sdataUrl = sdataUtils.addWhereClause(sdataUrl, params.where, self.state.options.sdataParameters);
				}
			}
			if (!sdataUrl) throw new Error("$url (sDataUrl) is expected");
			self.state.options["sdata-url"] = self.sDataUrl = sdataUrl;
			self.sDataMethod = sdataMethod || "GET";
		},

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			self.gadget = null;
		},
		/**
		 * True if display is edit mode
		 */
		isEditMode: function() {
			var url = this.prototype.data("$url");
			return this.$activity === "edit" || this.$activity === "create";
		},

		_beforeAddContent: function() {
			var self = this;
			if (!self.isVignette) {
				var ttl = self.prototype.data("$title");
				self.addTitle(globals.getApplication().getTitle() + (ttl ? " - " + ttl : ""));
			}
		},

		/**
		 * Used by html builder to create a link to full page
		 */
		getOpenLinkAttrs: function() {
			var self = this;
			var res = Base.prototype.getOpenLinkAttrs.call(self);
			res["data-sdata-url"] = self.sDataUrl;
			res["data-sdata-method"] = self.sDataMethod;
			res["data-gadget-id"] = self.gadget.data("$uuid");
			return res;
		},

		/**
		 * Refresh the page
		 * 	Called from a vignette or full page (callBackInterface)
		 * 	options.sdata-url -> New url
		 * 	options.controlId!=null -> refresh the control
		 *  options.type Type of refresh (pagination...)
		 *  callBackInterface
		 *  	waitStop(ctrlId) / waitStart(ctrlId)
		 */
		refresh: function(options, callBackInterface) {
			var self = this;
			options = options || {};
			var deferred = $.Deferred();
			var url = options["sdata-url"];
			var controlId = options["controlId"];
			var _wait = function(status) {
				// I added the capability to enable the wait on the control
				// True if the type of refresh needs the display of wheel on control ($more)
				var ctrlWheel = controlId ? _controlWheel.indexOf(options.type) >= 0 : false;
				if (callBackInterface) {
					// Caller wheel - Ex: vignette
					var m = "wait" + status.smCapitalize();
					if (callBackInterface[m]) callBackInterface[m](ctrlWheel ? controlId : null);
					return;
				}
				// Page wheel or control wheel if ctrlId && pagination
				// TODO use the same name waitStart/waitStop for all objects
				self["waitWheel" + status.smCapitalize()].call(self, ctrlWheel ? controlId : null);
			};
			try {
				var _succeeded = function() {
					_wait("stop");
					self.refreshControls(controlId ? [controlId] : null, options);
					deferred.resolve();
				};
				if (!url) {
					_succeeded();
				} else {
					_wait("start");
					/* url can change on refresh (paginations)*/
					self._initSdataInfo(url);
					self.loadData()
						.then(function() {
							_succeeded();
						}).fail(function(e) {
							_wait("stop");
							deferred.reject(e);
						});
				}
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		loadData: function(options) {
			var deferred = $.Deferred();
			var self = this;
			var _rejectError = function(e) {
				log && log("loadData failed", e);
				deferred.reject(e);
			};
			try {
				dispatcher.dispatch({
					$url: self.sDataUrl,
					$method: self.sDataMethod
				}).then(function(data) {
					self.updateDao(data);
					return deferred.resolve();
				}).fail(function(e) {
					_rejectError(e);
				});
			} catch (e) {
				_rejectError(e);
			} finally {
				return deferred.promise();
			}
		},

		updateDao: function(data, options) {
			if (data) {
				this.setDao(factory.createDaoSdata("representation", data, this.prototype, null, options || {}));
			} else {
				globals.getModal().actionResult("updateDao", {
					$diagnoses: [{
						$message: "NO DATA",
						$severity: "info"
					}]
				});
			}
		},
		/**
		 * Lookup notification
		 * 		rowData:	Selected row data
		 * 		controlId:	Id of control to refresh
		 */
		notifLookupSelection: function(rowData, controlId) {
			var self = this;
			if (!self.isActive()) return;
			try {
				var ctrl = self.getControl(controlId);
				if (!ctrl) throw new Error("Control not found '" + controlId + "'");
				ctrl.setFieldValue(rowData);
			} catch (e) {
				globals.getModal().error("notifLookupSelection failed", e);
			}
		},
		/** Event sm.action.link
		 *  Notified when a action succeeded - sdata link - see action manager
		 *  success:	true/false
		 *  link:		Link info
		 *  result:		Json response
		 */
		notifActionLink: function(success, link, result, options) {
			var self = this;
			if (!self.isActive()) return;
			try {
				// TODO  - scan/display field errors	
				switch (link.name) {
					case "$save":
						self._doActSave(success, link, result, options);
						break;
					case "$delete":
						sdataUtils.displayActionMsg(success, link.name, result);
						break;
					case "$canceledit":
						sdataUtils.displayActionMsg(success, link.name, result);
						this.goBack();
						break;
					default:
						sdataUtils.displayActionMsg(success, link.name, result);
						break;
				}
			} catch (e) {
				globals.getModal().error("notifActionLink failed", e);
			}
		},
		// Temporarily to update etag
		// TODO  - back to detail or query like in mobile client
		_doActSave: function(success, link, result, options) {
			var self = this;
			self.updateDao(result.responseJSON);
			var diags = result && result.responseJSON ? result.responseJSON.$diagnoses : null;
			if (!success && diags && diags.length > 0) {
				globals.getModal().actionResult("Action: " + link.name, result.responseJSON);
			}
			self.refresh().then(function() {

			}).fail(function(e) {
				globals.getModal().error("_doActSave exception", e);
			});
		},
		/**
		 * True if scroll enabled in page
		 * edit/detail allows scroll in vignette
		 * query/lookup doesn't allow because scroll is done by the array
		 */
		scrollAllowed: function() {
			if (this.prototype.isLookup() || this.prototype.isQuery()) {
				// This is the array which scrolls
				return false;
			}
			return true;
		},
		onMainPageResize: function(info, orientation, deviceClass) {
			Base.prototype.onMainPageResize.call(this, info, orientation, deviceClass);
			if (this.prototype.isLookup() || (this.prototype.isQuery() && !this.isVignette)) {
				// set content top and width - not height
				this.$$contentElmt.css({
					height: this.getMainContentRect().height + "px"
				});
			}
		}
	});

exports.Page = _Page;