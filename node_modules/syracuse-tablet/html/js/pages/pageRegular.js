"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("page");
var Base = require('syracuse-tablet/html/js/pages/page').Page;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var dispatcher = require('syracuse-tablet/html/js/sdata/sdataDispatcher');
var factory = require('syracuse-tablet/html/js/application/appFactory');

var _Page = utils.defineClass(
	function($parent, state, prototype, article) {
		var self = this;
		Base.call(self, $parent, state, prototype, article);
		self.gadget = self.state.options.gadget;
		self.sDataUrl = null;
		self.sDataMethod = null;
	}, Base, {

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			self.gadget = null;
		},

		isEditMode: function() {
			var self = this;
			var url = self.prototype.data("$url");
			if (url && (url.indexOf("$create") > -1 || url.indexOf("$edit") > -1)) {
				return true;
			}
			return false;
		},

		_beforeAddContent: function() {
			var self = this;
			if (!self.vignette) self.addTitle(globals.getApplication().getTitle() + " - " + self.prototype.data("$title"));
		},

		/**
		 * Used by html builder to create a link to full page
		 */
		getOpenLinkAttrs: function() {
			var self = this;
			var res = Base.prototype.getOpenLinkAttrs.call(self);
			res["data-sdata-url"] = self.sDataUrl;
			res["data-sdata-method"] = self.sDataMethod;
			res["data-gadget-id"] = self.gadget.data("$uuid");
			return res;
		},
		loadData: function() {
			var deferred = $.Deferred();
			var self = this;
			var _rejectError = function(e) {
				log && log("loadData failed", e);
				deferred.reject(e);
			};
			try {
				self.sDataUrl = self.state.options["sdata-url"];
				if (!self.sDataUrl) {
					if (self.gadget) {
						self.sDataUrl = self.gadget.getSDataUrl(self.prototype);
					} else {
						self.sDataUrl = self.prototype.data("$url");
					}
				}

				if (self.gadget) {
					var params = self.gadget.getParameters();
					if (params.where) {
						self.sDataUrl = self._addWhereClause(self.sDataUrl, params.where, self.state.options.sdataParameters || {});
					}
				}
				self.sDataMethod = self.state.options["sdata-method"] || "GET";
				if (!self.sDataUrl) throw new Error("$url (sDataUrl) is expected");
				dispatcher.dispatch({
					$url: self.sDataUrl,
					$method: self.sDataMethod
				}).then(function(data) {
					var options = {};
					self.setDao(factory.createDaoSdata("representation", data, self.prototype, null, options));
					deferred.resolve();
				}, _rejectError);
			} catch (e) {
				_rejectError(e);
			} finally {
				return deferred.promise();
			}
		},
		_addWhereClause: function(url, where, params) {
			var allParamsSet = true;
			where = where.value;
			var res = where.replace(/\{(\w*?)\}/g, function(m, p1) {
				var value = params[p1];
				if (value == null) {
					allParamsSet = false;
				}
				return value != null ? value : "";
			});
			if (allParamsSet) {
				url = url + "&where=" + res;
			}
			return url;
		}
	});

exports.Page = _Page;