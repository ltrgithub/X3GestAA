"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("page");
var Base = require('syracuse-tablet/html/js/pages/page').Page;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var dispatcher = require('syracuse-tablet/html/js/sdata/sdataDispatcher');
var factory = require('syracuse-tablet/html/js/application/appFactory');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');

var _Page = utils.defineClass(
	function($parent, state, prototype, article, jsonInfo) {
		var self = this;
		Base.call(self, $parent, state, prototype, article);
		/* Temporarily - All the Json return by Syracuse */
		self.jsonInfo = jsonInfo;
		self.gadget = self.state.options.gadget;
		self.sDataUrl = null;
	}, Base, {

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			self.gadget = null;
		},
		/**
		 * True if create action - facet is $edit but action is create means call $template
		 */
		isCreateAtion: function() {
			return this.gadget != null && this.gadget.action === "$create";
		},
		buildHtml: function() {


			var deferred = $.Deferred();
			var self = this;
			try {
				var res = {};
				if (!self.rootLayout) throw new Error("buildHtml - NULL rootLayout");
				// header
				res.header = self.header ? self.header.buildHtml() : null;

				// content
				res.content = '';
				var titleStr = '';
				if (!self.vignette) {
					titleStr += uiUtils.createDomElement("h3", ["s-m-page-title"], globals.getApplication().getTitle() + " - " + self.state.name).outerHTML;
				}
				var bodyStr = self.rootLayout.buildHtml(self.dao).outerHTML;
				res.content = titleStr + bodyStr;

				deferred.resolve(res);
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},
		/**
		 * Used by html builder to create a link to full page
		 */
		getOpenLinkAttrs: function() {
			var self = this;
			var res = Base.prototype.getOpenLinkAttrs.call(self);
			res["data-sdata-url"] = self.sDataUrl;
			res["data-gadget-id"] = self.gadget.$uuid;
			return res;
		},
		loadData: function() {
			var deferred = $.Deferred();
			var self = this;
			var _rejectError = function(e) {
				log && log("loadData failed", e);
				deferred.reject(e);
			};
			try {

				//				MW: Not sure what this is for, links are correct in prototypes?!
				//				if (self.isCreateAtion()) {
				// 					TODO - Fix this workaround - Call $template
				//					self.sDataUrl = self.prototype.data("$url");
				//					self.sDataUrl = self.sDataUrl.replace("('')", "/$template");
				//				} else {
				self.sDataUrl = self.state.options["sdata-url"];
				if (!self.sDataUrl) {
					if (self.gadget) {
						self.sDataUrl = self.getGadgetSDataUrl(self.gadget, self.prototype);
					} else {
						self.sDataUrl = self.prototype.data("$url");
					}
				}
				//				}
				if (!self.sDataUrl) throw new Error("$url (sDataUrl) is expected");
				dispatcher.dispatch({
					$url: self.sDataUrl,
					$method: "GET"
				}).then(function(data) {
					try {
						var options = {};
						self.setDao(factory.createDaoSdata("representation", data, self.prototype, null, options));
						deferred.resolve();
					} catch (e) {
						_rejectError(e);
					}
				}, _rejectError);
			} catch (e) {
				_rejectError(e);
			} finally {
				return deferred.promise();
			}
		},
		getGadgetSDataUrl: function(gadget, proto) {
			var self = this;
			var url;
			if (["$details", "$edit"].indexOf(gadget.action) > -1) {
				url = proto.data("$url", {
					$key: gadget.keyParameter
				});
			} else {
				url = proto.data("$url");
			}
			return url;
		}

	});

exports.Page = _Page;