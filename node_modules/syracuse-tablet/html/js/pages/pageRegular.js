"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("page");
var Base = require('syracuse-tablet/html/js/pages/page').Page;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var dispatcher = require('syracuse-tablet/html/js/sdata/sdataDispatcher');
var factory = require('syracuse-tablet/html/js/application/appFactory');

var _Page = utils.defineClass(
	function($parent, state, prototype, article, jsonInfo) {
		var self = this;
		Base.call(self, $parent, state, prototype, article);
		/* Temporarily - All the Json return by Syracuse */
		self.jsonInfo = jsonInfo;
	}, Base, {

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
		},

		buildHtmlContentBefore: function(html) {
			var self = this;
			if (self.vignette) {
				html.push('<h5 class="s-m-page-title">' + self.state.name + "</h5>");
			} else {
				html.push('<h3 class="s-m-page-title">' + globals.getApplication().getTitle() + " - " + self.state.name + "</h3>");
			}
		},

		loadData: function() {
			var deferred = $.Deferred();
			var self = this,
				url;
			var _rejectError = function(e) {
				log && log("loadData failed", e);
				deferred.reject(e);
			};
			try {
				var url = self.prototype.data("$url");
				if (!url) throw new Error("$url is expected");
				dispatcher.dispatch({
					$url: url,
					$method: "GET"
				}).then(function(data) {
					try {
						var options = {};
						self.setDao(factory.createDaoSdata("representation", data, self.prototype, null, options));
						deferred.resolve();
					} catch (e) {
						_rejectError(e);
					}
				}, _rejectError);
			} catch (e) {
				_rejectError(e);
			} finally {
				return deferred.promise();
			}
		}
	});

exports.Page = _Page;