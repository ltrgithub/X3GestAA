"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiutils = require('syracuse-tablet/html/js/ui/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/pages/page').Page;
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("page");
var factory = require('syracuse-tablet/html/js/factories/appFactory');
var pageTemplates = require('syracuse-tablet/html/js/pages/pageTemplates');

/*
 * All storage interfaces must inherit the "Not implemented" methods of this super class
 */
var _Page = utils.defineClass(
	function($parent, state) {
		var self = this;
		Base.call(self, $parent, state);
		self.vignettes = [];
	}, Base, {

		destroy: function() {
			Base.destroy.call(this);
		},

		loadStructure: function() {
			var self = this;
			var deferred = $.Deferred();
			try {
				var mainDescr = globals.application().dao.getJsonDescr();
				var descr = mainDescr.$dashboards[self.state.dashboardUuid];
				if (!descr) throw new Error("Dashboard description not found uuid[" + self.state.dashboardUuid + "]");
				var info;
				for (var uuid in (descr.$vignettes || {})) {
					info = $.extend({}, descr.$vignettes[uuid]);
					if (mainDescr.$gadgets[info.$uuid]) {
						info.$gadget = $.extend({}, mainDescr.$gadgets[info.$uuid]);
						// Set gadget uuid
						info.$gadget.$uuid = info.$uuid;
						// Set vignette uuid
						info.$uuid = uuid;
						self.vignettes.push(factory.createVignetteCtrlr(self, info));
					}
				}
				deferred.resolve({});
			} catch (e) {
				log && log("Error loading dashboard structure", e);
				deferred.resolve({});
			} finally {
				return deferred.promise();
			}
		},

		loadData: function() {
			var self = this;
			var deferred = $.Deferred();
			deferred.resolve({});
			return deferred.promise();
		},

		buildHtml: function(data) {
			var self = this;
			var deferred = $.Deferred();
			pageTemplates.getTemplate(self.state, {
				title: "Sage X3 Mobile",
				pageId: self.id,
				logout: "logout"
			}, null).always(function(html) {
				deferred.resolve({
					header: html.header,
					content: ""
				});
			});
			return deferred.promise();
		},

		render: function(html) {
			var self = this;
			var deferred = $.Deferred();
			$(document.body);
			self.$elmt.children("header").html(html.header);
			self.$elmt.children("section").html(html.content);
			deferred.resolve();
			return deferred.promise();
		},

		bindEvents: function() {
			var self = this;
			uiutils.bindActions(self);
		},
	});

exports.Page = _Page;