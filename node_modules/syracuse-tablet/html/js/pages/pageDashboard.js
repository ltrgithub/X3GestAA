"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/pages/page').Page;
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("page");
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');

var _Page = utils.defineClass(

	function($parent, state, prototype, article) {
		var self = this;
		Base.call(self, $parent, state, prototype, article);
		self.vignettes = [];
		self.dashboardId = utils.readableuid("dahsboard");
		self.$dashboardElmt = null;
	}, Base, {

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			utils.unbindObj(self.$dashboardElmt);
			self.$dashboardElmt = null; /* Vignettes controls and are destroyed by the page */
			self.vignettes = null;
		},

		loadData: function() {
			return null;
		},

		_beforeAddContent: function() {
			var self = this;
			var title = self.prototype.data("$title");
			if (title) {
				self.contentElemt.appendChild(uiUtils.createDomElement("h3", ["s-m-page-title"], title));
			}
			var desc = self.prototype.data("$description");
			if (desc) {
				self.contentElemt.appendChild(uiUtils.createDomElement("p", null, desc));
			}
		},

		addControl: function(c) {
			var self = this;
			Base.prototype.addControl.call(self, c);
			if (c && c.isVignette()) {
				self.vignettes.push(c);
			}
		},

		afterRender: function() {
			var self = this;
			var deferred = $.Deferred();
			var rejectError = function(e) {
				log && log("Error loading vignettes", e);
				deferred.reject(e);
			};
			try { /* Standard process - bind actions - no deferred returned*/
				Base.prototype.afterRender.call(self); /* Load vignettes*/
				self.$dashboardElmt = self.$elmt.find("#" + self.dashboardId);
				var promises = [];
				self.vignettes.forEach(function(v) {
					promises.push(v.load());
				});
				$.when(promises).then(function() {
					// all the vignettes have been loaded successfully
					log && log(self.vignettes.length + " vignettes have loaded successfully");
					deferred.resolve();
				}, rejectError);
			} catch (e) {
				rejectError(e);
			} finally {
				return deferred.promise();
			}
		}
	});

exports.Page = _Page;