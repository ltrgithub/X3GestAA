"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/pages/page').Page;
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("page");

var _Page = utils.defineClass(

	function($parent, state, prototype, article) {
		var self = this;
		Base.call(self, $parent, state, prototype, article);
		self.vignettes = [];
	}, Base, {

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			self.vignettes = null;
		},

		loadData: function() {
			return null;
		},

		_beforeAddContent: function() {
			var self = this;
			self.addTitle(self.prototype.data("$title"), self.prototype.data("$description"));
		},

		addControl: function(c) {
			var self = this;
			Base.prototype.addControl.call(self, c);
			if (c && c.isVignette()) {
				self.vignettes.push(c);
			}
		},


		/**
		 * Scan vignettes to find control per id
		 * 	Allows to call ctrl actions in vignettes
		 * ctrlId is a unicid for all controls of all pages
		 */
		findVignetteControl: function(ctrlId) {
			var self = this;
			if (!self.vignettes) return null;
			var c, v;
			for (var i = 0; i < self.vignettes.length; i++) {
				v = self.vignettes[i];
				c = v.getPageControl(ctrlId);
				if (c) {
					return {
						control: c,
						vignette: v
					};
				}
			}
			return null;
		},

		afterRender: function() {
			var self = this;
			var deferred = $.Deferred();
			var rejectError = function(e) {
				log && log("Error loading vignettes", e);
				deferred.reject(e);
			};
			try {
				/* Standard process - bind actions - no deferred returned*/
				Base.prototype.afterRender.call(self);
				/* Load vignettes*/
				var promises = [];
				self.vignettes.forEach(function(v) {
					var options = {
						sdataParameters: self.state.options && self.state.options.sdataParameters || {}
					};
					v.load(null, options);
				});
				deferred.resolve();
			} catch (e) {
				rejectError(e);
			} finally {
				return deferred.promise();
			}
		},
		/**
		 * Context to store when dashboard is destroyed
		 * We save the context for each vignette (scroll, selection....)
		 * Context of the vignette will be retrieved with the index which is the identifier
		 * Vignette id is recalculated at creation and changes each time the vignette is loaded
		 */
		savedCtxCreate: function() {
			var self = this;
			var ctx = Base.prototype.savedCtxCreate.call(self);
			ctx.vignettes = [];
			self.vignettes && self.vignettes.forEach(function(v) {
				if (v.getPage()) {
					ctx.vignettes.push(v.getPage().savedCtxCreate());
				}
			});
			return ctx;
		},
		/**
		 * Restore the context for the dashboard (not for the vignette)
		 */
		savedCtxRestore: function(ctx) {
			// Std restore for all page
			Base.prototype.savedCtxRestore.call(this, ctx);
			// store vignettes context
			this._savedVignetteContext = ctx.vignettes;
		},
		/**
		 * Returns the context of a vignette v
		 * Called by the vignette
		 */
		savedCtxVignette: function(v) {
			var self = this;
			if (v == null || this._savedVignetteContext == null) return v;
			var idx = self.vignettes.indexOf(v);
			if (idx == -1 || idx > this._savedVignetteContext.length - 1) return null;
			return {
				current: this._savedVignetteContext[idx]
			};
		}
	});

exports.Page = _Page;