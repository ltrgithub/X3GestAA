"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiutils = require('syracuse-tablet/html/js/ui/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/pages/page').Page;
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("page");
var factory = require('syracuse-tablet/html/js/factories/appFactory');
var pageTemplates = require('syracuse-tablet/html/js/pages/pageTemplates');

/*
 * All storage interfaces must inherit the "Not implemented" methods of this super class
 */
var _Page = utils.defineClass(
	function($parent, state) {
		var self = this;
		Base.call(self, $parent, state);
		self.vignettes = [];
		self.dashboardId = utils.readableuid("dahsboard");
		self.$dashboardElmt = null;
	}, Base, {

		destroy: function() {
			Base.destroy.call(this);
		},

		loadStructure: function() {
			var self = this;
			var deferred = $.Deferred();
			try {
				var mainDescr = globals.application().dao.getJsonDescr();
				var descr = mainDescr.$dashboards[self.state.dashboardUuid];
				if (!descr) throw new Error("Dashboard description not found uuid[" + self.state.dashboardUuid + "]");
				var info;
				for (var uuid in (descr.$vignettes || {})) {
					info = $.extend({}, descr.$vignettes[uuid]);
					if (mainDescr.$gadgets[info.$uuid]) {
						info.$gadget = $.extend({}, mainDescr.$gadgets[info.$uuid]);
						// Set gadget uuid
						info.$gadget.$uuid = info.$uuid;
						// Set vignette uuid
						info.$uuid = uuid;
						// Readable dom uid
						info.domId = utils.readableuid("vignette", info.$gadget.$type);
						self.vignettes.push(factory.createVignetteCtrlr(self, info));
					}
				}
				deferred.resolve({});
			} catch (e) {
				log && log("Error loading dashboard structure", e);
				deferred.resolve({});
			} finally {
				return deferred.promise();
			}
		},

		loadData: function() {
			return null;
		},

		_buildHtmlGrid: function() {
			var self = this;
			var html = [],
				closeRow, nbCellsPerLine = 3;
			var width = self.vignettes.length > nbCellsPerLine ? nbCellsPerLine : 12 / self.vignettes.length;
			var height = 250;
			html.push('<div class="container dashboard" id="');
			html.push(self.dashboardId);
			html.push('">');
			self.vignettes.forEach(function(v, idx) {
				if (idx % 3 === 0) {
					if (idx > 0) html.push('</div>');
					html.push('<div class="row" style="height:');
					html.push(height);
					html.push('px">');
				}
				html.push('<div class="col-md-');
				html.push(width);
				html.push(' vignette frame">');
				html.push('<div class="vignette content" id="');
				html.push(v.descr.domId);
				html.push('">');
				html.push('</div>');
				html.push('</div>');

			});
			html.push('</div>');
			return html.join('');
		},

		buildHtml: function(data) {
			var self = this;
			var deferred = $.Deferred();
			pageTemplates.getTemplate(self.state, {
				title: "Sage X3 Mobile",
				pageId: self.id,
				logout: "logout"
			}, null).always(function(html) {
				deferred.resolve({
					header: html.header,
					content: self._buildHtmlGrid()
				});
			});
			return deferred.promise();
		},

		bindEvents: function() {
			var self = this;
			self.$dashboardElmt = self.$elmt.find("#" + self.dashboardId);
			self.vignettes.forEach(function(v) {
				v.load(self.$dashboardElmt.find("#" + v.descr.domId));
			});
		},
	});

exports.Page = _Page;