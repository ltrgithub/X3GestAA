"use strict";

/**
 * Settings page
 * temporarily - This page will be build with a $article/$prototype
 *
 */
var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/pages/html/pageHtml').Page;
var pageTemplates = require('syracuse-tablet/html/js/pages/html/pageTemplates');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var modal = require('syracuse-tablet/html/js/ui/modal');
var settings = require('syracuse-tablet/html/js/application/settings');

var _tmplCtx = {
	header: {
		"pageId": "login",
		"headerttl": "Sage X3 Mobile Login Page",
		"forgotpwd": "Forgot password"
	},
	content: {
		"listtitle": "Select an application to install"
	}
};

var _Page = utils.defineClass(
	function($parent, state) {
		var self = this;
		Base.call(self, $parent, state);
		self.appList = null;
	}, Base, {

		loadData: function() {
			var self = this;
			var deferred = $.Deferred();
			settings.getMyApplications().then(function(data) {
				self.appList = data || [];
				deferred.resolve();
			}, function(e) {
				deferred.reject(e);
			});
			return deferred.promise();
		},

		buildHtmlContent: function() {
			var self = this;
			var deferred = $.Deferred();
			try {
				var html = [];
				if (self.appList) {
					var curApp = globals.getApplication();
					self.appList.forEach(function(x) {
						html.push('<option value="');
						html.push(x.$uuid);
						html.push('" ');
						html.push(curApp && curApp.uuid == x.$uuid ? "selected" : "");
						html.push(' >');
						html.push(x.title || x.description);
						html.push(' (' + x.applicationName + ')');
						html.push('</option>');
					});
				}
				_tmplCtx.content.listcontent = html.join('');
				Base.prototype.buildHtmlContent.call(self, _tmplCtx.content).then(function(content) {
					deferred.resolve(content);
				}, function(e) {
					pageTemplates.resolveError(deferred, self.state.name, e);
				});
			} catch (e) {
				pageTemplates.resolveError(deferred, self.state.name, e);
			} finally {
				return deferred.promise();
			}
		},

		afterRender: function() {
			var self = this;
			Base.prototype.afterRender.call(self);
			self.$elmt.find('.selectpicker').selectpicker();
		},

		_actSelect: function(uuid) {
			var self = this;
			var info;
			self.appList.some(function(x) {
				if (x.$uuid === uuid) {
					info = x;
					return true;
				}
			});
			settings.getMyApplicationDetail(info).then(function(data) {
				self.deactivate(null);
				notifications.publish("sm.switch.app", data);
			}, function(e) {
				modal.error("Error loading application", e);
			});
		}
	});

exports.Page = _Page;