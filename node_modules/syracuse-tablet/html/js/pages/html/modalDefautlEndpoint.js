"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var modal = require('syracuse-tablet/html/js/ui/modal');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
var localStorage = require('syracuse-tablet/html/js/storage/localStorage');

var _endpoint = {
	dialog: '\
			<div class="modal fade" id="modal-endpoint" tabi	ndex="-1" role="dialog"> \
		    <div class="modal-dialog"> \
				<div class="modal-content"> \
				    <div class="modal-header"> \
						<h4 class="modal-title" id="myModalLabel">{{title}}</h4> \
				    </div> \
				    <div class="modal-body"> \
						<div class="form-group"> \
							<select class="form-control" id="login-select-endpoint"> \
								{{{endpoints}}} \
							</select> \
						</div> \
				    </div> \
				    <div class="modal-footer"> \
				        <button type="button" class="btn" data-action="validate">{{validate}}</button> \
	        			<button type="button" class="btn btn-default" data-action="cancel">{{cancel}}</button> \
					</div> \
				</div> \
			</div> \
		</div>',
	path: '/sdata/syracuse/collaboration/syracuse/endPoints?representation=endPoint'

};

var _getEndpoints = function() {
	var deferred = $.Deferred();
	try {
		var url = globals.baseLocation().host + _endpoint.path;
		ajax("GET", url).then(function(data) {
			try {
				if (data.isSuccess) {
					deferred.resolve(data.responseJSON.$resources || []);
				} else {
					deferred.reject("Error loading endpoints - Status: " + data.status + " - " + data.descrHttpStatus);
				}
			} catch (e) {
				deferred.reject(e);
			}
		}, function(e) {
			deferred.reject(e);
		});
	} catch (e) {
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
};
/**
 * force = true
 * 		Force display of  modal is an endpoint is still available in local storage
 */
var _askDefaultEndPoint = function(force) {
	var deferred = $.Deferred();
	try {
		_getEndpoints().then(function(endpoints) {
			try {
				var modalHtml = Handlebars.compile(_endpoint.dialog);
				if (endpoints.length > 0) {
					var selectHtml = [];
					selectHtml.push('<option value="">Select an endpoint</option>');
					var existingEndpoint = false;
					endpoints.forEach(function(rsrc) {
						if (rsrc.application === "x3") {
							var val = rsrc.application + "." + rsrc.contract + "." + rsrc.dataset;
							selectHtml.push('<option value="' + val + '"');
							if (val === globals.getEndpoint()) {
								selectHtml.push('selected');
								existingEndpoint = true;
							}
							selectHtml.push('>');
							selectHtml.push(rsrc.$value + "  [" + val + "]");
							selectHtml.push('</option>');
						}
					});
					if (force === true || existingEndpoint !== true) {
						// Display modal if force or if not no existing default endpoint
						modalHtml = modalHtml({
							title: "Please, select the default endpoint",
							endpoints: selectHtml.join('\n'),
							validate: "Validate",
							cancel: "Cancel"
						});
						modal.modal(modalHtml, function(msg, dialg) {
							if (msg === "validate") {
								var endpoint = dialg.find("#login-select-endpoint").val();
								if (endpoint.length > 0) {
									globals.setEndpoint(endpoint);
									deferred.resolve(endpoint);
								} else {
									deferred.reject("Default endpoint is mandatory");
								}
							}
						});
					} else {
						// Resolve with endpoint stored in local storage - TODO Store in DB
						deferred.resolve(globals.getEndpoint());
					}
				} else {
					deferred.reject("No endpoint available for the user\nPlease contact administrator");
				}
			} catch (e) {
				deferred.reject(e);
			}
		}, function(e) {
			deferred.reject(e);
		});
	} catch (e) {
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
};

exports.askDefaultEndPoint = _askDefaultEndPoint;
//exports.checkDefaultEndPoint = _checkDefaultEndPoint;