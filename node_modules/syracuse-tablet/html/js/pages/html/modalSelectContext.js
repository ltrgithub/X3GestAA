"use strict";

var modal = require('syracuse-tablet/html/js/ui/modal');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _template = '\
	<div class="modal fade" id="modal-endpoint" tabindex="-1" role="dialog"> \
    <div class="modal-dialog"> \
		<div class="modal-content"> \
		    <div class="modal-header"> \
				<h4 class="modal-title" id="myModalLabel">{{title}}</h4> \
		    </div> \
		    <div class="modal-body"> \
				<div class="form-group"> \
					<label>{{label_endpoints}}</label>\
					<select class="form-control" id="login-select-endpoint"> \
					{{#each endpoints}}\
						<option value="{{this.application}}.{{this.contract}}.{{this.dataset}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
				</div> \
			<div class="form-group"> \
				<label>{{label_roles}}</label>\
				<select class="form-control" id="login-select-role"> \
				{{#each roles}}\
					<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
					{{this.description}}\
					</option>\
				{{/each}}\
				</select>\
			</div> \
			<div class="form-group"> \
				<label>{{label_languages}}</label>\
				<select class="form-control" id="login-select-language"> \
				{{#each languages}}\
					<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
					{{this.description}}\
					</option>\
				{{/each}}\
				</select>\
			</div> \
			{{#if label_warning}}\
			<div class="alert alert-warning" role="alert">\
				{{label_warning}}\
			</div>\
			{{/if}}\
		    </div> \
		    <div class="modal-footer"> \
				<button type="button" class="btn pull-left" data-action="logout">{{label_logout}}</button> \
		        <button type="button" class="btn" data-action="validate">{{label_ok}}</button> \
    			<button type="button" class="btn btn-default" data-action="cancel">{{label_cancel}}</button> \
			</div> \
		</div> \
	</div> \
	</div>';

/**
 * force = true
 * 		Force display of  modal is an endpoint is still available in local storage
 */
var _selectContext = function(context, endpoints, roles, languages, warn) {
	var deferred = $.Deferred();
	try {
		try {
			var modalHtml = Handlebars.compile(_template);
			var ctx = {
				title: locale.text("modal.context.title"),
				label_endpoints: locale.text("modal.context.endpoint"),
				endpoints: endpoints,
				label_roles: locale.text("modal.context.roles"),
				roles: roles,
				label_languages: locale.text("modal.context.languages"),
				languages: languages,
				label_logout: locale.text("modal.context.logout"),
				label_ok: locale.text("modal.context.ok"),
				label_cancel: locale.text("modal.context.cancel"),
				label_warning: warn && locale.text("modal.context.warning"),
			};
			if (context) {
				endpoints.forEach(function(ep) {
					if (ep.application + "." + ep.contract + "." + ep.dataset === context.endpoint) {
						ep.selected = true;
					} else {
						ep.selected = false;
					}
				});
				roles.forEach(function(role) {
					if (role.code === context.role) {
						role.selected = true;
					} else {
						role.selected = false;
					}
				});
				languages.forEach(function(lang) {
					if (lang.code === context.language) {
						lang.selected = true;
					} else {
						lang.selected = false;
					}
				});
			}
			modalHtml = modalHtml(ctx);
			modal.modal(modalHtml, function(msg, dialg) {
				var endpoint = dialg.find("#login-select-endpoint").val();
				var role = dialg.find("#login-select-role").val();
				var language = dialg.find("#login-select-language").val();
				if (msg === "validate") {
					deferred.resolve({
						action: "ok",
						endpoint: endpoint,
						role: role,
						language: language
					});
				} else if (msg === "cancel") {
					deferred.resolve({
						action: "cancel",
						endpoint: endpoint,
						role: role,
						language: language
					});
				} else if (msg === "logout") {
					deferred.resolve({
						action: "logout",
					});
				}
			});
		} catch (e) {
			deferred.reject(e);
		}
	} catch (e) {
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
};

exports.selectContext = _selectContext;