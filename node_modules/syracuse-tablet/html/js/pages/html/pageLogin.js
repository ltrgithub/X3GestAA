"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var reqLocale = require('syracuse-tablet/html/js/helpers/locale');
var Base = require('syracuse-tablet/html/js/pages/html/pageHtml').Page;
var auth = require('syracuse-tablet/html/js/application/authentication');
var sdataCommonRes = require('syracuse-tablet/html/js/sdata/sdataCommonResources');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var pageTemplates = require('syracuse-tablet/html/js/pages/html/pageTemplates');
var modalEndpoint = require('syracuse-tablet/html/js/pages/html/modalDefautlEndpoint');

var _getLocales = function() {
	var deferred = $.Deferred();
	try {
		sdataCommonRes.queryLocalePreferences().then(function(locales) {
			var html = [];
			(locales || []).forEach(function(locale) {
				html.push('<option value="' + locale.code + '"');
				if (reqLocale.isCurrent(locale.code)) {
					html.push(' selected');
				}
				html.push('>');
				html.push(locale.description);
				html.push('</option>');
			});
			deferred.resolve(html.join('\n'));
		}, function(e) {
			deferred.reject(e);
		});
	} catch (e) {
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
};

var _setLocales = function(locale, userProfile) {
	var deferred = $.Deferred();
	try {
		reqLocale.setLocale(locale, userProfile && userProfile.selectedLocale)
			.then(function() {
				deferred.resolve();
			}, function(e) {
				deferred.reject("Error setting locale - " + e.message);
			});
	} catch (e) {
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
};

var _tmplCtx = {
	header: {
		"pageId": "login",
		"headerttl": "Sage X3 Mobile Login Page",
		"forgotpwd": "Forgot password",
		"email": "administrator.sage.com"
	},
	content: {
		"label_user": "User name",
		"placeholder_user": "Enter some text",
		"label_password": "Password",
		"placeholder_password": "Enter some text",
		"act_login": "Login",
		"label_lang": "Language",
		"title": "Login page"
	}
};
var lang;
var _Page = utils.defineClass(
	function($parent, state) {
		var self = this;
		Base.call(self, $parent, state);
	}, Base, {

		buildHtml: function(parent) {
			Base.prototype.buildHtmlTpl.call(this, _tmplCtx.content, _tmplCtx.header);
		},

		buildHtmlContent: function() {
			var self = this;
			var deferred = $.Deferred();
			var _fail = function(e) {
				pageTemplates.resolveError(deferred, self.state.name, e);
			};
			try {
				_getLocales().then(function(locales) {
					_tmplCtx.content.locales = locales;
					_tmplCtx.content.reason = self.getProp("reason") || "";
					Base.prototype.buildHtmlContent.call(self, _tmplCtx.content).then(function(content) {
						deferred.resolve(content);
					}, function(e) {
						_fail(e);
					});
				}, function(e) {
					_fail(e);
				});
			} catch (e) {
				_fail(e);
			} finally {
				return deferred.promise();
			}
		},

		_actLogin: function() {
			var self = this;
			var deferred = $.Deferred();
			var askDlog = false;
			try {
				var $$success = self.$$elmt.find("#login-success").hide();
				var $$fail = self.$$elmt.find("#login-fail").hide();
				var usr = self.$$elmt.find("#login-user").val();
				var pwd = self.$$elmt.find("#login-password").val();
				var locale = self.$$elmt.find("#login-locale").val();
				var userProfile = null;
				self.waitWheelStart();
				// TODO: Locale needs to be sent to server to get messages etc. in correct language
				auth.login(usr, pwd)
					.then(function(ok, syraUsrProfile, message) {
						if (ok) {
							userProfile = syraUsrProfile;
							return $.smResolve();
						} else {
							return $.smReject(message);
						}
					})
					.then(function() {
						return modalEndpoint.askDefaultEndPoint(false);
					})
					.then(function(endpoint) {
						return _setLocales(locale, userProfile);
					})
					.then(function() {
						notifications.publish("sm.login", userProfile);
						self.waitWheelStop();
					}, function(e) {
						var stack, message;
						if (utils.isError(e)) {
							message = e.message;
							stack = utils.cleanStack(e.stack, 3, true);
						} else {
							message = e;
						}
						$$fail.show().html("Login failed<p>" + message + "</p>" + (stack ? stack : ""));
						self.waitWheelStop();
					});
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		}
	});

exports.Page = _Page;