"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/pages/pageRegular').Page;

/**
 * Child page that displays row detail in edit and details mode
 */
var _Page = utils.defineClass(
	function RowDetailPage($parent, state, prototype, article, parentPage, options) {
		this.parentPage = parentPage;
		if (this.parentPage.state.type === "rowdetail") {
			this.mainPageId = this.parentPage.mainPageId;
		} else {
			this.mainPageId = this.parentPage.state.uuid;
		}
		if (!this.parentPage) throw new Error("rowdetail page - Unexpected empty parent page");
		/** Set parentpage before **/
		Base.call(this, $parent, state, prototype, article, options);
		// Activity and facet - This page has no url
		this.setActivity(this.parentPage.$activity);
		// Disabled temporarily
		this.enableWorkingCopy = false;
	}, Base, {

		_initSdataInfo: function(sdataUrl, sdataMethod) {
			// nothing no sdataUrl
		},

		destroy: function() {
			if (this.destroyed) return;
			Base.prototype.destroy.call(this);
			this.parentPage = null;
			this._notifData = null;
			if (this._originalDao) {
				this._originalDao.destroy();
				this._originalDao = null;
			}
		},

		isEditMode: function() {
			return this.parentPage && this.parentPage.isEditMode();
		},
		/**
		 *  Modify title for dvlp tests
		 */
		buildHtmlOption: function(loadOptions) {
			return Base.prototype.buildHtmlOption.call(this, loadOptions).
			then(function(opts) {
				opts.toolBars.showHome = true;
				return opts;
			});
		},
		/**
		 * Click on home in footer/header
		 * -> Goto main parent page
		 */
		_actHome: function() {
			if (!this.parentPage) return;
			if (this.isVignette) {
				this.getParentVignette().goHome();
			} else {
				var self = this;
				globals.getApplication().goBack(function(state) {
					// returns true if state.uuid is the main page
					// Click on home returns to the main page (not to application home)
					return state.uuid === self.mainPageId;
				});
			}
		},

		/**
		 * this.state.options.dataParams is an object that gives:
		 * 	rowId:	id of the row - empty if creation
		 *  activity:	"create/edit/detail" if it's a creation
		 */
		loadData: function(loadOptions) {
			if (loadOptions.reload) {
				if (!this._originalDao) {
					return;
				}
				this.setDao(this._originalDao.clone());
				return $.smResolve();
			}
			// We get the row DAO - !!! Do not store parentPage
			var ctrl = this.parentPage.getControl(this.state.options.controlId);
			if (!ctrl) throw new Error("rowdetail page - Array datasource not found");
			// Dao of the row to display - dao is calculated by the array when user click on action 'rosDetail'
			var info = ctrl.rowDetailGetInfo();
			if (!info.dao) throw new Error("rowdetail page - Row data not found");
			// Activity is given by array (info)
			// E.g. if we create an expense we have a not empty 'dimension type array' returned by the server.
			// We are able to edit the row to modify the content so it's an edit activity (not a create like this.parentPage.$activity)
			// Create adds a new line in the array / edit modifies
			this.setActivity(info.activity);
			if (this.$activity !== "read") {
				// For the reload we need to keep a copy to restore it
				this._originalDao = info.dao;
				this.setDao(info.dao.clone());
			} else {
				this.setDao(info.dao);
			}
			// For single arrays we need idx to update parent on save  because there's no uuid in dao
			this.singleArrayRowIdx = info.singleArrayRowIdx;
			return $.smResolve();
		},
		/**
		 * Process action
		 */
		notifActionLink: function(success, link, result, options) {
			switch (link.name) {
				case "$save":
					this._doActSave(success, link, options);
					break;
				case "$delete":
					this._doActDelete(success, link, options);
					break;
				case "$canceledit":
					this.goBack();
					break;
				default:
					// Call the regular process
					Base.prototype.notifActionLink.call(this, success, link, result, options);
					break;
			}
		},
		_doActSave: function(success, link, responseJSON, options) {
			if (success) {
				// Check if the row is still in error - If we change the value of a field in error it resets the error status
				this.dao.checkArrayUpdateError();
				// Notify parent to update its dao
				this._notifData = {
					notifId: "sm.rowdetail.update",
					notifData: {
						dao: this.dao,
						activity: this.$activity,
						singleArrayRowIdx: this.singleArrayRowIdx
					}
				};
				// To not destroy them because we need them in parent page to update parent page dao
				// Destroyed by parent page
				this.dao = null;
				this.prototype = null;
				this.goBack();
			}
		},
		_doActDelete: function(success, link, responseJSON, options) {
			// Stores data for parent which will be notified before closing the child page
			this._notifData = {
				notifId: "sm.rowdetail.delete",
				notifData: {
					uuid: this.dao.getValue("$uuid")
				}
			};
			this.goBack();
		},
		/**
		 * Return data for parent
		 */
		getParentNotif: function() {
			if (this._notifData) {
				//ID of parent page
				this._notifData.parentId = this.state.options.parentId;
				// Notify parent to update its dao
				this._notifData.controlId = this.state.options.controlId;
				return this._notifData;
			}
		}
	});

exports.Page = _Page;