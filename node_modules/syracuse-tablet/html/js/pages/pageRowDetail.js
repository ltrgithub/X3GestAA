"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var Base = require('syracuse-tablet/html/js/pages/pageRegular').Page;

/**
 * Child page that displays row detail in edit and details mode
 */
var _Page = utils.defineClass(
	function($parent, state, prototype, article, options) {
		var self = this;
		self.parentPage = options ? options.parentPage : null;
		if (!self.parentPage) throw new Error("rowdetail page - Unexpected empty parent page");
		self.rowDao = null;
		/** Set parentpage before **/
		Base.call(self, $parent, state, prototype, article, options);
	}, Base, {

		_initSdataInfo: function(sdataUrl, sdataMethod) {
			// nothing no sdataUrl
		},

		addPanel: function(panelId) {
			if (panelId === "rightpanel" || panelId === "leftpanel") return null;
			if (panelId === "footer" && !this.parentPage.isEditMode()) return null;
			return Base.prototype.addPanel.call(this, panelId);
		},

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			if (self.rowDao) {
				self.rowDao.destroy();
				self.rowDao = null;
			}
			self.parentPage = null;
		},

		isEditMode: function() {
			return this.parentPage && this.parentPage.isEditMode();
		},
		/**
		 *  Modify title for dvlp tests
		 */
		buildHtmlOption: function() {
			var self = this;
			var opts = Base.prototype.buildHtmlOption.call(self);
			opts.header.title = "Row detail page";
			return opts;
		},
		refresh: function(options, callBackInterface) {
			var self = this;
			throw new Error("Not implemented");
		},

		loadData: function(options) {
			var self = this;
			// We get the row DAO - !!! Do not store parentPage
			var ctrl = self.parentPage.getControl(self.state.options.controlId);
			if (!ctrl) throw new Error("rowdetail page - Array datasource not found");
			// self.rowDao is a clone of array dao
			var rowDao = ctrl.getRowDetailDao(self.state.options.dataParams);
			if (!rowDao) throw new Error("rowdetail page - Row data not found");
			self.setDao(rowDao);
			return $.smResolve();
		},

		/**
		 * Validation in edit mode
		 */
		_actValidate: function(rowId) {
			var self = this;
			//self.goBack();
		},
		/**
		 * getParentNotif method is called by pageLoader to notify parent page if dao has been modified
		 */
		getParentNotif: function() {
			return null;
			//			{
			//				parentId: this.state.options.parentId,
			//				controlId: this.state.options.controlId,
			//				notifId: "sm.lookup.selection",
			//				notifData: this.selectedRow
			//			};
		},

	});

exports.Page = _Page;