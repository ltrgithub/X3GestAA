"use strict";

var native = require('syracuse-tablet/html/js/helpers/native/native');
var globals = require('syracuse-tablet/html/js/helpers/globals');

/**
 * Dispatching of actions according to the type of device
 */
var _linksMap = {
	header: {
		smartphone: {
			details: {
				$edit: true,
				$delete: true
			},
			edit: {
				$canceledit: true,
				$save: true
			},
			query: {
				$create: true
			},
			create: {
				$save: true,
				$canceledit: true
			}
		},
		tablet: {}
	},
	footer: {
		smartphone: {},
		tablet: {
			details: {
				$edit: true,
				$delete: true,
				$query: true
			},
			edit: {
				$save: true,
				$canceledit: true
			},
			query: {
				$create: true
			},
			create: {
				$save: true,
				$canceledit: true
			}
		}
	},
	actionpanel: {}
};
var _isSingleItemLink = function(url) {
	// Ensure it is an sdata link and not any other external link by checking for ?representation=
	// Also check if there are brackets ( <key> ) including a key with dynamic place holders {code}
	if (/\((\S*\{\S*\}\S*)\).*\?.*representation=/.test(url)) {
		return true;
	}
	return false;
};
var _isOfficeLink = function(name, info) {
	return name.smStartsWith("$word") || name.smStartsWith("$excel") || (info.$type != null && info.$type.indexOf("openxml") >= 0);
};
var _isPaginLink = function(name) {
	return name === "$first" || name === "$previous" || name === "$next" || name === "$last";
};
/**
 * Native capabilities per page's type/subtype
 */
var _nativeCapabilities = {
	liveTile: {
		regular: {
			query: true,
			stat: true,
			cube: true
		}
	},
	scheduleMessage: {
		regular: {
			query: true,
			details: true,
			edit: false
		},
		dashboard: {
			std: true,
			welcome: false
		}
	},
	share: {
		regular: {
			query: true,
			details: true
		},
		dashboard: {
			std: true,
			welcome: false
		}
	}
};
var _nonNativeCapabilities = {
	mailto: {
		regular: {
			query: true,
			details: true
		},
		dashboard: {
			std: true,
			welcome: false
		}
	}
};
/**
 * REGULAR PAGE
 * Actions that are NOT displayed in a panel
 */
var _notInPanel = ["$edit", "$create", "$delete", "$details", "$query", "$save", "$canceledit"];
exports.excludeFromPanel = function(name, forceFooterHeader, link, facet) {
	if (_notInPanel.indexOf(name) >= 0) return true;
	if (facet === "query" && link && link.$url && _isSingleItemLink(link.$url)) return true;
	return forceFooterHeader === true;
};
/**
 * REGULAR PAGE
 * Returns false if a link is not displayed
 */
exports.checkLink = function(name, info) {
	if (info == null || info.$isExcluded === true) {
		return false;
	}
	if (_isPaginLink(name)) {
		return false;
	}
	if (name.smStartsWith('$') && _isOfficeLink(name, info)) {
		return false;
	}
	return true;
};
/**
 * REGULAR PAGE
 * Returns the links to display in toolbar according to the type of device
 */
exports.getLinkMap = function(toolbar, deviceType, facet) {
	var lMap = _linksMap[toolbar];
	if (!lMap) {
		throw new Error("Unexpected toolbar parameter [" + toolbar + "]. Expected 'header', 'footer' or 'actionpanel'");
	}
	if (toolbar === "actionpanel") return lMap;
	lMap = lMap[deviceType || "tablet"];
	if (!lMap) {
		throw new Error("Unexpected deviceType parameter [" + deviceType + "]. Expected 'tablet', 'smartphone'");
	}
	if (facet === "lookup") facet = "query";
	if (facet === "summary") facet = "details";
	lMap = lMap[facet];
	if (!lMap) {
		throw new Error("Unexpected facet parameter [" + facet + "]");
	}
	return lMap;
};

var _pageSubType = function(page) {
	return page ? page.state.subtype.split(" ")[0] : null;
};
//Need to be called after module's initialization
exports.getNativeCapabilities = function(page) {
	var result = {};
	if (!page || !page.state || !page.state.type || !page.state.subtype) return result;
	var subtype = _pageSubType(page),
		pageCapability;
	["liveTile", "scheduleMessage", "share"].forEach(function(capability) {
		pageCapability = _nativeCapabilities[capability];
		result[capability] = pageCapability && native.hasCapability(capability);
		if (result[capability]) {
			result[capability] = pageCapability[page.state.type] != null && pageCapability[page.state.type][subtype] === true;
		}
	});
	return result;
};
/**
 * Capabilities available in non-native mode
 */
exports.getNonNativeCapabilities = function(page) {
	var result = {};
	if (globals.isNativeModeEnabled() || !page || !page.state || !page.state.type || !page.state.subtype) {
		return result;
	}
	var subtype = _pageSubType(page);
	var cpblties;
	["mailto"].forEach(function(cpb) {
		cpblties = _nonNativeCapabilities[cpb];
		result[cpb] = cpblties && cpblties[page.state.type] != null && cpblties[page.state.type][subtype] === true;
	});
	return result;
};
//!! Array sorted from top position to bottom
exports.insidePageControls = ["header", "breadcrumbs", "topToolbar", "footer"];
exports.topPageControls = ["header", "breadcrumbs", "topToolbar"];