"use strict";

var pageHelpers = require('syracuse-tablet/html/js/pages/helpers/helpers');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');

/*********** PANELS MANAGER ***********
 * !! Created/Destroyed only on main page (not on vignettes)
 * page		Main/Current page
 *************************************/
var _PanelManager = function(page) {
	this.controller = page;
	this.$$dismissPanel = page.$$elmt.children(".s-m-side-panel-dismiss");
	this.$$panels = {
		left: page.$$elmt.children("aside.s-m-panel.s-m-left"),
		right: page.$$elmt.children("aside.s-m-panel.s-m-right")
	};
	/**
	 *
	 */
	this.destroy = function() {
		this.controller = null;
		this.$$dismissPanel = null;
		this.$$panels = null;
	};
	/**
	 *
	 */
	this.checkDestroyed = function() {
		return this.controller == null || this.$$dismissPanel == null || this.controller.destroyed;
	};
	/**
	 * Adds a panel to left or right sections - sidePanel class
	 *  If not exists create it
	 * where	"left" or "right"
	 * panel	panel object
	 */
	this.panelAttach = function(where, panel, action) {
		if (this.checkDestroyed() || !panel || (where != "right" && where != "left")) return;
		var currentPanel = this.controller.getPageControl(where);
		if (currentPanel && currentPanel != panel) {
			this.panelDetach(where);
		}
		if (!panel.isAttached(where)) {
			var $$parent = this.$$panels[where];
			if ($$parent.length != 1) return;
			// Add the control to the list
			this.controller.addControl(panel);
			this.controller._pageControls.add(where, panel).attach($$parent, where);
		}
		return this.panelToggle(where, panel, action);
	};
	/**
	 * Toggle panel
	 * where: left/right
	 * panel: control panel
	 * action: toggle/close/resize
	 */
	this.panelToggle = function(where, panel, action) {
		var self = this;
		if (self.checkDestroyed()) {
			return;
		}
		var $$root = self.$$panels[where];
		if (!$$root) {
			return;
		}
		if (!panel) {
			panel = self.controller.getPageControl(where);
		}
		if (!panel || !panel.$$elmt) {
			return null;
		}
		var wasVisible = $$root.is(':visible');
		if (action === "resize") {
			if (!wasVisible) return null;
			//Panel already visible
		} else {
			$$root.toggle(action === "close" ? false : undefined);
		}
		var isVisible = $$root.is(':visible');
		if (wasVisible !== isVisible) {
			// Only if status changed
			// Toggle before calculating the new width
			panel.notifyToggled(where, action, isVisible);
		}
		var newWidth = isVisible ? $$root.width() : 0;
		if (panel.closeBox != true) {
			self.$$dismissPanel[isVisible ? "addClass" : "removeClass"](where).css(where, newWidth);
		}
		if (panel.overlap != true) {
			// Shifts $$contentElmt and "insidePageControls" (header footer breadcrumb) elements
			var shiftElmts = [self.controller.$$contentElmt];
			pageHelpers.insidePageControls.forEach(function(id) {
				var c = self.controller.getPageControl(id);
				if (c && c.$$elmt) {
					shiftElmts.push(c.$$elmt.parent());
				}
			});
			shiftElmts.forEach(function($$elmt) {
				$$elmt.css("left", (isVisible ? (where === "right" ? -1 : 1) * newWidth : 0) + "px");
			});
		}
		return panel;
	};
	/**
	 * Removes the panel but not destroy it
	 * where	"left" or "right"
	 */
	this.panelDetach = function(where) {
		if (this.checkDestroyed()) return;
		var p = this.controller.getPageControl(where);
		if (!p) return;
		this.panelToggle(where, p, "close");
		this.controller.removeControl(p);
	};
	/**
	 * Returns a panel - Just to have ctrlFactory declared here
	 * id	globals.PANELACTIONSREGULAR, globals.PANELUSERSMARTPHONE, globals.PANELFILTERSORT
	 * actionController: controller that handles actions (in vignette it'sthe one of the vignette)
	 */
	this.panelCreate = function(panelId, options, actionController) {
		// Extended top preserve original options
		options = $.extend({}, options);
		// controller of the control is the current page because we could need to access to this page from the panel (Ex for a panel attached to a vignette)
		return ctrlFactory.createPanel(actionController || this.controller, panelId, options);
	};
	/**
	 * Call resize method of current panels
	 */
	this.panelResize = function(context) {
		context = context || {};
		var self = this;
		setTimeout(function() {
			self.forEachPanel(function(where, panel) {
				if (context.deviceChanged === true) {
					self.panelToggle(where, panel, "close");
					return;
				} else {
					self.panelToggle(where, panel, "resize");
					if (panel.onResize) {
						panel.onResize(context);
					}
				}
			});
		});
	};
	this.forEachPanel = function(cb) {
		if (this.checkDestroyed()) return;
		var controller = this.controller;
		["right", "left"].forEach(function(w) {
			var p = controller.getPageControl(w);
			if (p) cb(w, p);
		});
	};
};

exports.Klass = _PanelManager;