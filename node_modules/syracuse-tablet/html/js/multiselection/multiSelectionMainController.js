"use strict";

var Base = require("syracuse-tablet/html/js/controllers/sdataController").SdataController;

var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var sdataReq = require("syracuse-tablet/html/js/sdata/sdataRequester");
var sdataUtils = require("syracuse-tablet/html/js/sdata/sdataUtils");
var modules = require('syracuse-tablet/html/js/common/modules');
var protoHelpers = require('syracuse-tablet/html/js/sdata/protocolHelpers');
var sdataReq = require("syracuse-tablet/html/js/sdata/sdataRequester");


/**
 * Main multi-selection controller
 * Declared at queryPageLevel
 */
exports.MultiSelectionMainController = utils.defineClass(
	function MultiSelectionMainController(queryPage) {
		if (queryPage == null || queryPage.isFacet == null || !queryPage.isFacet("$query")) {
			throw new Error("Sdata query page expected");
		}
		Base.call(this, queryPage.pageData.dataset, null, queryPage.pageData.isWorkingCopy);
		this._page = queryPage;
		// Header/Footer with multSelection button
		this._panel = null
			// $resources array
		this._array = null;
		// header/footer displayed when action are processed on selected data
		this._panelRun = null;
	},
	Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
			this._page == null;
			this._panel = null;
			this._array = null;
			this._panelRun = null;
		},
		/**
		 * Caller queryPage
		 * Toggles the status
		 * Returns true is status enabled
		 */
		multiSelToggleStatus: function() {
			var isSmartphone = modules.get("siteLayout").getDeviceType() === "smartphone";
			if (this._panel == null) {
				var panelInfo;
				if (isSmartphone) {
					panelInfo = {
						name: "headerMultisel",
						topIndex: 0,
						selector: "header",
						$type: "application/x-panel-header-multisel-smartphone"
					}
				} else {
					panelInfo = {
						name: "footerMultisel",
						topIndex: 0,
						selector: "footer",
						$type: "application/x-panel-footer-multisel-tablet"
					}
				}
				this._panel = this._page.attachedControlsMgr.createAddtionalControl(panelInfo, {});
				this._array = this._page.getQueryArray();
			}
			this.isEnabled = this._page.attachedControlsMgr.toggleControls(isSmartphone ? "headerMultisel" : "footerMultisel", isSmartphone ? "header" : "footer");
			// Notifies header/footer
			this._panel.multiSelectionController.multiSelToggleStatus(this.isEnabled);
			this._array.multiSelToggleStatus(this.isEnabled);
			if (!isSmartphone) {
				//Disable header
				this._page.attachedControlsMgr.findByName("header").disable(this.isEnabled);
			}
			return this.isEnabled;
		},
		/**
		 * Caller arrayRow/Cell on click on record
		 * Toggles the status of card/row
		 */
		multiSelToggleRecord: function($$recordElmt) {
			if (this._isProcessingData()) {
				return;
			}
			$$recordElmt.toggleClass("s-m-multi-selected");
			// Notifies header/footer
			this._panel.multiSelectionController.multiSelToggleRecord($$recordElmt.is(".s-m-multi-selected"));
		},
		multiSelExit: function() {
			// Exit run mode
			this._array.multiSelRemoveDiagnoses();
			this._panelRun.multiSelectionController.multiSelRunExit();
			this._processTogglePanel(false);
			this.multiSelToggleStatus();
		},
		/**
		 * Caller queryPage
		 * Applies $actionName to selected rows/cards
		 */
		multiSelTriggerAction: function($actionName, event) {
			if ($actionName === "showdiagnoses") {
				this._array.multiSelShowDiagnoses(event);
			} else if ($actionName === "stop") {
				this._processRunning = false
			} else if ($actionName === "exit") {
				this.multiSelExit();
			} else {
				//waiting.waitModal()
				$('<div id="multiSelSpinner"><div><div class="spinner-loader"></div></div></div>').appendTo(this._page.$$contentElmt);
				this._processRunning = true;
				var self = this;
				var _end = function(status) {
					$("#multiSelSpinner").remove();
					self._processRunning = false;
					self._panelRun.multiSelectionController.multiSelRunStop();
				}
				this._processRun($actionName).then(function(status) {
					_end(status);
				}).fail(function(error) {
					modules.get("modal").asynchError(locale.text("multiselect.processAll.fail"), error).then(function() {
						_end("stop");
					});
				});
			}
		},
		_isProcessingData: function() {
			return this._processRunning === true;
		},
		/**
		 * Processes all cards/rows
		 */
		_processRun: function($actionName) {
			var self = this;
			var nbOk = 0;
			var nbKo = 0;
			return $.smResolve().then(function() {
				// Displays dedicated footer/header and hides unselected rows
				self._processTogglePanel(true);
				self._panelRun.multiSelectionController.multiSelStartProcessing();
				return {
					$actionName: $actionName,
					data: self._array.multiSelGetSelectedData(),
					link: protoHelpers.adjustLinkProtocol(self._page.controller.dataset.getLink($actionName), self._getUsedProtocol())
				}
			}).then(function(info) {
				if (!info.link || !info.data) {
					return null;
				}
				var deferred = $.Deferred();
				var _exec = function(idx) {
					if (idx >= info.data.length) {
						// End
						deferred.resolve("end", info);
					} else {
						self._processOne(info, idx).then(function(status) {
							if (status === "stop") {
								deferred.resolve("stop", info);
								return;
							}
							if (status === "success") {
								nbOk++
							} else {
								nbKo++;
							}
							self._panelRun.multiSelUpdateCounter(nbOk, nbKo);
							// Next
							_exec(idx + 1);
						}).fail(function(e) {
							deferred.reject(e);
						})
					}
				};
				// First
				_exec(0);
				return deferred.promise();
			})
		},
		/**
		 * Process one selected row/card
		 */
		_processOne: function(info, idx) {
			var step;
			if (info.link.$url === "$UnitTesturl") {
				step = this._procesUnitTestUrl(info, idx);
			} else {
				step = this._processUrl(info, idx)
			}
			var self = this;
			return step.then(function(success, result) {
				if (!self._isProcessingData()) {
					// Process stopped
					return "stop";
				}
				var diagsMsg = [];
				var diagsErr = [];
				if ($.isPlainObject(result)) {
					(sdataUtils.scanDiagnoses(result) || []).forEach(function(d) {
						if (d.$severity === "error") {
							diagsErr.push(d);
						} else {
							diagsMsg.push(d);
						}
					});
				}
				var diags = info.data[idx];
				success = success && diagsErr.length == 0;
				if (!success) {
					if (jsutils.isError(result)) {
						diags.$diagnoses = [{
							$message: result.message,
							$stackTrace: result.stack
						}];
					} else {
						diags.$diagnoses = diagsErr;
					}
				} else {
					diags.$diagnoses = diagsMsg;
				}
				diags.status = success ? "success" : "error";
				self._array.multiSelAddDiagnoses(diags);
				return diags.status;
			})
		},
		/**
		 * Execute action info.$actionName on rowData dtaSet
		 */
		_processUrl: function(info, idx) {
			var rowDataSet = info.data[idx].rowData;
			var self = this;
			var deferred = $.Deferred();
			var $url = rowDataSet.resolveExpression(info.link.$url, true);
			if (info.link.$parameters) {
				$.each(info.link.$parameters, function(paramName, paramValue) {
					// PARAMETER_ESCAPING
					// If there are placeholders in a parameters value, we try to resolve them here
					// In any case, the result is encoded to ensure sdataUtils.getLinkInfo will not fail if there
					// are non valid characters in the url
					// As a result, in multiselection, eventually left over encoded placeholders need to be
					// unescaped and replaced later in the process (see multiSelectionMgr.js -> PARAMETER_ESCAPING)
					if (paramValue.indexOf("{") > -1) {
						var pv2 = rowDataSet.resolveExpression(paramValue);
						if (pv2 && pv2.length > 0) {
							paramValue = encodeURIComponent(pv2);
						} else {
							paramValue = encodeURIComponent(paramValue);
						}
					}
					$url = $url.replace("{" + paramName + "}", paramValue);
				});
			}
			// We force GET for multi-selection
			sdataReq.executeLink($url, "GET", rowDataSet).then(function(response) {
				var delta = response.data;
				if (delta) {
					// If there is a delta sent by the server, we merge it
					// This will add field level diagnoses
					// error checking will be done later independently
					return self._mergeDelta(delta).then(function() {
						return response;
					});
				}
				return response;
			}).then(function(result) {
				deferred.resolve(result.success === true, result);
			}).fail(function(e) {
				deferred.resolve(false, jsutils.convertToDiagnoses(e));
			});
			return deferred.promise();
		},
		/**
		 * Used to test ui process.
		 * Don't send an url
		 */
		_procesUnitTestUrl: function(info, idx) {
			var deferred = $.Deferred();
			setTimeout(function() {
				if (idx % 2 == 0) {
					deferred.resolve(true, {
						$diagnoses: [{
							$message: "test succeeded idx=" + idx,
							$severity: "success"
						}]
					});
				} else {
					deferred.resolve(false, {
						$diagnoses: [{
							$message: "test failed idx=" + idx,
							$severity: "error"
						}]
					})
				}
			}, 1000)
			return deferred.promise();
		},
		/**
		 * Create if needed and toggle the process header/footer with the stop action and 'xx successes - yy failures' message
		 */
		_processTogglePanel: function(show) {
			var isSmartphone = modules.get("siteLayout").getDeviceType() === "smartphone";
			if (this._panelRun == null) {
				var panelInfo;
				if (isSmartphone) {
					panelInfo = {
						name: "headerMultiselRun",
						topIndex: 0,
						selector: "header",
						$type: "application/x-panel-header-multisel-run-smartphone"
					}
				} else {
					panelInfo = {
						name: "footerMultiselRun",
						topIndex: 0,
						selector: "footer",
						$type: "application/x-panel-footer-multisel-run-tablet"
					}
				}
				this._panelRun = this._page.attachedControlsMgr.createAddtionalControl(panelInfo, {});
			}
			this._page.attachedControlsMgr.toggleControls(isSmartphone ? "headerMultiselRun" : "footerMultiselRun", isSmartphone ? "headerMultisel" : "footerMultisel", show);
			return this._panelRun;
		},
		/**
		 * Returns the selected dataSets
		 */
		getSelectedData: function() {
			return this._array.multiSelGetSelectedData();
		}
	});