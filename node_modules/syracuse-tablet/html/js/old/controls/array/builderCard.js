"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/array/builderCardBase').Klass;

/**
 * CARD BUILDER
 */
var _Klass = utils.defineClass(
	function(control, disp, options) {
		Base.call(this, control, disp, options);
	}, Base, {
		initReuseProperties: function() {
			Base.prototype.initReuseProperties.call(this);
			// Initialize properties when we generate multiple card with the same control tree
			this.resetProps(false);
		},
		destroy: function() {
			Base.prototype.destroy.call(this);
			this.resetProps(true);
		},
		/**
		 * remove
		 * 	true means that we can destroy all the $$elments (remove)
		 * 	false when we want to keep elements (htmlGenerator mode)
		 * 	We use only one control to generate multiple html cards with one layout (tree structure) (use only with carousel)
		 */
		resetProps: function(remove) {
			this._tds = null;
			this._dirArray = null;
			if (this._$$body) {
				if (remove) {
					if (this._$$body.length) {
						this._$$body.remove();
					}
					// Like we rebuild a new _$$body we have to destroy the scroller
					this.destroyScroller();
				}
				this._$$body = null;
			}
		},
		/**
		 * Just build $$td cells
		 * Build of array will be done on resize because we need to have the height of the parent control.$$value to calculate the number of roww
		 */
		buildHtml: function(arrayData, buildOpts) {
			this.$articleArray.$minWidth = this.$articleArray.$minWidth || 6;
			Base.prototype.buildHtml.call(this, arrayData, buildOpts);
		},
		/**
		 * Can be overridden to clear cached data
		 */
		notifyArrayDataChanged: function(refresh, arrayData, isEmpty) {
			Base.prototype.notifyArrayDataChanged.call(this, refresh, arrayData, isEmpty);
			this.resetProps(true);
		},
		/**
		 * !! check the multi-selection if we modify  buildCards
		 */
		buildCards: function(buildOpts, resizeContext) {
			buildOpts = buildOpts || {};
			if (!this._$$body) {
				// Like we rebuild a new _$$body we have to destroy the scroller
				this.destroyScroller();
				this._$$body = $('<tbody>').appendTo($('<table/>').appendTo(this.control.$$value));
				var $$td;
				this._tds = [];
				var self = this;
				this.control.getArrayData().$resources.forEach(function(rowData, idx) {
					$$td = $(self.buildRecordMainElmt(rowData, {
						tag: "td",
						parent: null
					}, idx));
					self._tds.push({
						"$$td": $$td,
						rowData: rowData
							//"$$card" is created when $$td is attached to the dom because nested element need width/height calculation (carousel)
					});
				});
			}
			var dirArray, initScroll = false;
			dirArray = globals.getScrollingDirection() || "v";
			initScroll = buildOpts.refresh === true || resizeContext;
			dirArray = this.control.isArrayField() ? "h" : dirArray === "h" ? "v" : "v"; //"h";
			buildOpts.cardAuthoring = {
				$emptycell: this.$articleArray.$emptycell || "nodisplay",
				$minWidth: this.authMinSize2Pixels(this.$articleArray.$minWidth),
				$cardsPerRow: parseInt(this.$articleArray.$cardsPerRow, 10) || 2
			};
			var sz = this.control.getAvailableSize();
			var parentH = sz.height;
			var parentW = sz.width;
			// Border spacing used for calculation
			var bs = this._$$body.parent().css("border-spacing");
			if (bs) {
				bs = bs.split("px");
				bs = bs && bs.length > 0 ? parseInt(bs[0], 10) : 0;
			}
			//parentH = parentH - bs;
			//parentW = parentW - bs;
			var $$hiddenRow;
			var visibleTds = [];
			// We keep the $$td's to not recreate them and arrange according the new configuration
			// We first detach them and select the visible ones (used by multiselection)
			// We put non-visible ones in $$hiddenRow to let them available in the dom (used by multiselection)
			this._tds.forEach(function(o, idx) {
				if (o.$$card) {
					// Clear the height/width because they are calculated according to the device/parent size
					o.$$card.css({
						height: "",
						width: ""
					});
				}
				o.$$td.detach();
				if (o.$$td.css('display') != "none") {
					visibleTds.push(o);
				} else {
					if (!$$hiddenRow) {
						$$hiddenRow = $("<tr>").hide();
					}
					o.$$td.appendTo($$hiddenRow);
				}
			});
			// !! Call $$body after having detached $$td because empty() removes the data attached to the node ($.smData) used by multi-selection (diagnoses)
			this._$$body.empty();
			if ($$hiddenRow) {
				$$hiddenRow.appendTo(this._$$body);
			}
			if (visibleTds.length === 0) return;
			if (dirArray === "h") {
				this.buildCardH(visibleTds, bs, parentH, parentW, buildOpts);
			} else {
				this.buildCardV(visibleTds, bs, parentH, parentW, buildOpts);
			}
			// Center the table in the parent - only if fixed height
			if (!this.control.isArrayField() && !this.control.controller.isNestedInDashboard("stack")) {
				var top = Math.max(0, (parentH - this._$$body.parent().outerHeight()) / 2);
				this._$$body.parent().css({
					top: top + "px"
				});
			}
			if ((this._dirArray == null || this._dirArray != dirArray) && (dirArray === "h" || (dirArray === "v" && !this.control.controller.isNestedInDashboard("stack")))) {
				this._dirArray = dirArray;
				this.newScroller(dirArray, this._$$body.parent());
				initScroll = true;
			}
			this.doAfterBuild(resizeContext, initScroll);

		},
		buildCardV: function(visibleTds, bs, parentH, parentW, buildOpts) {
			this._$$body.parent().width("100%");
			var $$row, realW, nbCardPerRow;
			var minWidth = buildOpts.cardAuthoring.$minWidth;
			var remaining = 0;
			var self = this;
			visibleTds.some(function(o, idx) {
				if (idx === 0 || nbCardPerRow == 1 || (nbCardPerRow > 1 && idx % nbCardPerRow === 0)) {
					$$row = $("<tr>").appendTo(self._$$body);
					remaining = nbCardPerRow;
				}
				remaining--;
				o.$$td.appendTo($$row);
				if (!o.$$card) {
					// !! We create the card here because we need to have the $$card attached to the dom to calculate children width/row... eg: cards inside card
					// If we crate the card at the same time as $$td the generation of html is wrong
					o.$$card = self.createCard(o.$$td, idx, o.rowData, buildOpts);
				}
				if (idx === 0) {
					var padding = o.$$card.outerWidth() - o.$$card.width();
					nbCardPerRow = buildOpts.cardAuthoring.$cardsPerRow;
					while (nbCardPerRow > 1) {
						realW = Math.round((parentW - ((nbCardPerRow + 1) * bs)) / nbCardPerRow) - padding;
						if (realW >= minWidth) break;
						nbCardPerRow--;
					}
					if (nbCardPerRow > 1) {
						realW = Math.min(Math.max(minWidth, realW));
					}
				}
				if (nbCardPerRow > 1) {
					o.$$card.width(realW);
				} else {
					o.$$card.css({
						width: "100%"
					});
				}
			});
			if (remaining && buildOpts.cardAuthoring.$emptyCell !== "nodisplay") {
				this.addEmptyCells(this._layoutRoot, $$row, remaining, buildOpts, this._$$cellTmpl);
			}
			if (this.$arrayOptions.hideEmptyRows === true) {
				this.checkEmptyRows();
			}
		},
		buildCardH: function(visibleTds, bs, parentH, parentW, buildOpts) {
			var $$row, realH, realW;
			var nbCardPerRow, numberOfRows;
			var nbVisiblecardsPerRow = buildOpts.cardAuthoring.$cardsPerRow;
			var minWidth = buildOpts.cardAuthoring.$minWidth;
			parentH = parentH - bs;
			var remaining = 0;
			var self = this;
			var maxHeight = 0,
				h, heightChanged;
			visibleTds.some(function(o, idx) {
				if (idx == 0 || nbCardPerRow == 1 || (nbCardPerRow > 1 && idx % nbCardPerRow === 0)) {
					$$row = $("<tr>").appendTo(self._$$body);
					remaining = nbCardPerRow;
				}
				o.$$td.appendTo($$row);
				if (!o.$$card) {
					// !! We create the card here because we need to have the $$card attached to the dom to calculate children width/row... eg: cards inside card
					// If we crate the card at the same time as $$td the generation of html is wrong
					o.$$card = self.createCard(o.$$td, idx, o.rowData, buildOpts);
				}
				if (idx === 0) {
					// Calculate the number of rows after having create the first cell
					realH = o.$$td.height() + bs;
					parentW = parentW - ((nbVisiblecardsPerRow + 1) * bs);
					var padding = o.$$card.outerWidth() - o.$$card.width();
					realW = Math.round(parentW / nbVisiblecardsPerRow) - padding;
					if (self.control.isArrayField() || (visibleTds.length * realW < parentW)) {
						// Force to display all the cells on one line because there's enough room
						numberOfRows = 1;
						nbCardPerRow = visibleTds.length;
					} else {
						// Calculate the number of rows to fit the parent height
						numberOfRows = Math.max(1, Math.floor(parentH / realH));
						nbCardPerRow = Math.ceil(visibleTds.length / numberOfRows);
						if (visibleTds.length <= numberOfRows * nbVisiblecardsPerRow) {
							// Dispatch the cards by filling the lines from the top to bottom
							nbCardPerRow = nbVisiblecardsPerRow;
						}
					}
					remaining = nbCardPerRow;
				}
				o.$$card.width(Math.min(parentW, Math.max(minWidth, realW)));
				var h = o.$$card.height();
				if (maxHeight === 0) {
					maxHeight = h;
				} else if (maxHeight != h) {
					heightChanged = true;
					maxHeight = Math.max(maxHeight, h);
				}
				remaining--;
			});
			if (heightChanged) {
				// Set the same height for cards (could occurs if there are arrays in cards)
				visibleTds.forEach(function(o) {
					o.$$card.height(maxHeight);
				});
			}
			if (remaining && buildOpts.cardAuthoring.$emptyCell !== "nodisplay") {
				var $$emptyCells = this.addEmptyCells(this._layoutRoot, $$row, remaining, buildOpts, this._$$cellTmpl);
				if (heightChanged) {
					$$emptyCells.height(maxHeight);
				}
			}
			if (this.$arrayOptions.hideEmptyRows === true) {
				this.checkEmptyRows();
			}
		}
	});

exports.Klass = _Klass;