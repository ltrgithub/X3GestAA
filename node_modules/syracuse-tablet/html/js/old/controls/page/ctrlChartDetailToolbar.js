"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var ctrlBase = require('syracuse-tablet/html/js/controls/ctrlBase');
var uiSettings = require('syracuse-tablet/html/js/helpers/uiSettings');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var Base = ctrlBase.Klass;

var _actions = [{
	params: "arrayOnly",
	icon: "fa fa-table"
}, {
	params: "chartOnly",
	icon: "fa fa-bar-chart"
}, {
	params: "bothSideToSide",
	icon: "fa fa-columns"
}];
var _chartStyle = [{
	params: "column",
	icon: "fa fa-bar-chart",
	enabled: true
}, {
	params: "bar",
	icon: "fa fa-bar-chart fa-rotate-90",
	enabled: true
}, {
	params: "area",
	icon: "fa fa-area-chart",
	enabled: true
}, {
	params: "line",
	icon: "fa fa-line-chart",
	enabled: true
}, {
	params: "pie",
	icon: "fa fa-pie-chart",
	enabled: true
}];
var _templates = {
	toolbar: '\
		<div class="btn-toolbar" role="toolbar">\
			<div class="btn-group">\
				{{#each actions}}\
					<button type="button" class="btn btn-default" data-action="toolbar" data-control-id="{{../ctrlId}}" data-params="{{params}}"><span class="{{icon}}"></span></button>\
				{{/each}}\
		    </div>\
			<div class="btn-group chartstyles">\
				{{#each chartStyle}}\
					{{#if enabled}}\
					<button type="button" class="btn btn-default" data-action="chartstyle" data-control-id="{{../../ctrlId}}" data-params="{{params}}"><span class="{{icon}}"></span></button>\
					{{/if}}\
				{{/each}}\
		    </div>\
	    </div>'

};
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	if (!tmpl) alert("template " + name + " not found");
	return tmpl(ctx);
};


/**
 * chartDetail Tool bar
 */
var _Klass = utils.defineClass(

	function CtrlChartDetailToolbar($type, controller, options) {
		Base.call(this, controller, {
			$bind: "chartDetailToolbar"
		}, prototype.create({
			$type: $type
		}), options);
		notifications.subscribe(this, "sm.chartdetail.updt.toolbar");
	}, Base, {
		buildHtml: function($$parent, controllerDao, buildOptions) {
			this._height = uiSettings.getProp("chartDetailToolbar.height");
			var measureCount = this._getChartMeasureCount();
			_chartStyle.forEach(function(itm) {
				if (itm.params == "pie") {
					itm.enabled = (measureCount == 1);
				}
			});
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, [this.typeName]);
			this.$$elmt.html(_getHtml('toolbar', {
				ctrlId: this.id,
				actions: _actions,
				chartStyle: _chartStyle
			}));
			this.$$elmt.css("height", this._height);
		},
		_getChartMeasureCount: function() {
			var chart = this.controller.getChart();
			if (!chart) return 0;
			var count = chart.prototype.chartGetNbMeasures();
			var $seriesOptions = chart.article.$seriesOptions;
			if (!$seriesOptions) return count;
			Object.keys($seriesOptions).forEach(function(key) {
				if ($seriesOptions[key].isHidden) {
					count--;
				}
			});
			return count;
		},
		getHeight: function() {
			return this.$$elmt.is(":visible") ? this._height : 0;
		},
		_actToolbar: function(display, $$target) {
			if ($$target.closest(".btn").is(".s-m-selected")) return;
			this.controller.actToolbarSetDisplay({
				"display": display
			});
		},
		_actChartstyle: function(chartType, $$target) {
			if ($$target.closest(".btn").is(".s-m-selected")) return;
			this.controller.actToolbarSetDisplay({
				"style": chartType,
				"display": "bothSideToSide"
			});
		},
		notifChartdetailUpdtToolbar: function(opts) {
			if (!opts) return;
			if (opts.display) {
				this._updateDisplay(opts.display, "toolbar");
			}
			if (opts.display) {
				this._updateDisplay(opts.style, "chartstyle");
			}
		},
		_updateDisplay: function(display, dataAction) {
			if (globals.isAuthoringActive()) {
				this.$$elmt.find('.btn').prop("disabled", false);
			} else {
				this.$$elmt.find('.btn[data-action="' + dataAction + '"]').removeClass("s-m-selected");
				this.$$elmt.find('[data-params="' + display + '"][data-action="' + dataAction + '"]').addClass("s-m-selected");

				if (dataAction === "toolbar") {
					var $$chartStyles = this.$$elmt.find('.btn-group.chartstyles');
					if (display === "arrayOnly") {
						$$chartStyles.hide();
					} else {
						$$chartStyles.show();
					}
				}
			}
		}
	});

exports.Klass = _Klass;