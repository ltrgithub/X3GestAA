"use strict";

var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var pageHelpers = require('syracuse-tablet/html/js/pages/helpers/helpers');

/*********** PAGE CONTROLS MANAGER ***********
 * Page controls are not attached to rootLayout
 * header/footer/breadcrumbs...
 ************************************************/
var PageControlsManager = function(page) {
	this.page = page;
	this.map = {};
	this.statics = {};
	this.add = function(id, ctrl) {
		if (!ctrl) return;
		if (this.map[id]) {
			console.log("Page Control " + id + " already exists");
		}
		this.map[id] = ctrl;
		if (pageHelpers.insidePageControls.indexOf(id) >= 0) {
			this.statics[id] = ctrl;
		}
		return ctrl;
	};
	this.get = function(id) {
		return this.map[id];
	};
	this.remove = function(ctrl) {
		if (!ctrl) return;
		var ctrlType = null;
		for (var id in this.map) {
			if (this.map[id] === ctrl) {
				ctrlType = id;
				break;
			}
		}
		if (ctrlType) {
			// Delete - Do not set to undefined because we want to remove the entry
			delete this.map[ctrlType];
			delete this.statics[ctrlType];
		}
		if (ctrl.detach) {
			ctrl.detach();
		} else if (ctrl.$$elmt) {
			ctrl.$$elmt.detach();
		}
		return ctrl;
	};
	this.destroyControls = function() {
		if (!this.map) return;
		var c;
		for (var id in this.map) {
			c = this.map[id];
			// SidePanel: it's the responsibility of the creator to destroy it
			if (c && !jsutils.isInstanceOf(c, "SidePanel")) {
				c.destroy();
			}
		}
		this.map = {};
		this.statics = {};
	};
	this.status = function() {
		var x = [];
		for (var id in this.map) {
			x.push(id + "=" + this.map[id].id);
		}
		return x.join('/');
	};
	this.destroy = function() {
		this.page = null;
		this.destroyControls();
	};
	/**
	 * Only on static controls header/footer
	 */
	this.buildHtml = function(dao, buildOptions) {
		for (var id in this.statics) {
			var $$parent = this.page.$$elmt.children(id); // id = tag name of container (for footer/header)
			if ($$parent.length < 1) {
				$$parent = this.page.$$elmt.children(".s-m-" + id); // id = class name tag name of container (for breadcrumbs)
			}
			var pageCtrl = this.statics[id];
			if (pageCtrl.set$$container) {
				// New model control
				pageCtrl.set$$container($$parent);
				pageCtrl.buildHtml(buildOptions);
			} else {
				pageCtrl.buildHtml($$parent, dao, buildOptions);
			}
		}
	};
	this.afterRender = function(buildOpts) {
		for (var id in this.statics) {
			if (this.statics[id].afterRender) this.statics[id].afterRender(buildOpts);
		}
	};
	/**
	 * All controls header/footer/leftPanel/rightPanel
	 */
	this.forAllCtrls = function(cb) {
		for (var id in this.map) {
			cb(id, this.map[id]);
		}
	};
	this.closeSidePanel = function() {
		// TODO
	};
	// Called when we skip controls - Refresh them
	this.doAfterPageReload = function(addToControlMap) {
		var c;
		for (var id in this.map) {
			var c = this.map[id];
			// Put the controls in control map
			if (addToControlMap) {
				this.page.addControl(c);
			}
			// Refresh the controls 
			if (c.refresh) {
				c.refresh();
			}
		}
	};
};

exports.Klass = PageControlsManager;