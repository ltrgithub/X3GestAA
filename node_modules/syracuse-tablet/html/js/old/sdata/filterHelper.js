"use strict";

var parser = require('syracuse-tablet/html/js/sdata/sdatawhere/parser').Parser;

exports.getFilterWhereClause = function(filterInfo) {
	var filterClause = "";
	if (filterInfo != null && filterInfo.length != 0) {
		$.each(filterInfo, function(idx, filter) {
			var cf = '(' + filter.id + ' ' + (filter.operator === "like_s" ? "like" : filter.operator) + ' ' + _setFilterRightValue(filter) + ')';
			filterClause = filterClause.length == 0 ? cf : filterClause + ' and ' + cf;
		});
	}
	return filterClause;
}

exports.getSearchClause = function(searchInfo) {
	var searchClause = '';
	if (searchInfo) {
		$.each(searchInfo, function(idx, search) {
			var cf = '(' + search.id + ' ' + search.operator + ' ' + _setFilterRightValue(search) + ')';
			searchClause = searchClause.length == 0 ? cf : searchClause + ' or ' + cf;
		});
		if (searchClause) {
			searchClause = '(' + searchClause + ')';
		}
	}
	return searchClause;
}

exports.isValidWhere = function(where) {
	try {
		parser.parse(where);
		return true;
	} catch (e) {
		return false;
	}
}

/**
 * 
 * Returns appropriate right value for where request
 * For example, for the filter 'CODE contains aa', the where clause should look like
 * CODE like '%aa%'. This function will return '%aa%'
 */
function _setFilterRightValue(filter) {
	var cp = filter.prop;
	var cv, value = (filter.originalValue || filter.value) == null ? "" : (filter.originalValue || filter.value);
	switch (cp.$type) {
		case "application/x-password":
		case "application/x-string":
			cv = value.replace(/'/g, "\\'");
			if (filter.operator === "like") cv = '%' + cv + '%';
			else if (filter.operator === "like_s") cv = cv + '%';
			cv = "'" + cv + "'";
			return cv;
		case "application/x-integer":
		case "application/x-real":
		case "application/x-decimal":
		case "application/x-quantity":
			return value;
		case "application/x-date":
			if (!value) return null;
			return '@' + value + '@';
		case "application/x-datetime":
			return '@' + value + '@';
		case "application/x-time":
			return null;
		case "application/x-boolean":
			return value ? "true" : "false";
		case "application/x-choice":
			if (cp.$value && cp.$value.$type === "application/x-string") {
				return "'" + value.replace(/'/g, "\\'") + "'";
			} else return value + "";
			break;
		case "application/x-reference":
			if (typeof value != "string") {
				value = filter.value;
			}
			cv = (value || '').replace(/'/g, "\\'");
			cv = "'" + cv + "'";
			return cv;
		default:
			break;

	}
	return null;
};