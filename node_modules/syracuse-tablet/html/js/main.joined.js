"use strict";
define('syracuse-tablet/html/js/ui/uiUtils',['require','exports','module'],function (require, exports, module) {

//empty dom
var _empty = function(domNode) {
	if (domNode) {
		while (domNode.firstChild) {
			domNode.removeChild(domNode.firstChild);
		}
	}
};
//add or remove class to dom element
var _toggleClass = function(item, css, show) {
	if (item) {
		var className = item.className;
		if (show) {
			if (className.indexOf(css) < 0) {
				item.className = className + (" " + css);
			}
		} else {
			item.className = className.replace(css, "");
		}
	}
};

var _waitDefOpts = {
	className: 'waiting-circles',
	elements: 8,
	radius: 30,
	auto: true
};
/**
 * Wait plugin for global application only (no current page or application)
 */
var _waitGlobal = null;
var _wait = function(waitObject, start) {
	if (waitObject == null) {
		// use only if no current application otherwise use page's wait plugin
		if (_waitGlobal == null) _waitGlobal = _waitWheelCreate($(document.body));
		waitObject = _waitGlobal;
	}
	if (start) {
		waitObject.$$bckg.show();
		_waitPluginStatus(waitObject.$$wheel, "enable");
	} else {
		waitObject.$$bckg.hide();
		_waitPluginStatus(waitObject.$$wheel, "disable");
	}
};

var _waitWheelCreate = function($$parent, opts) {
	var waitObject = {
		$$bckg: $('<div class="waiting-background" style="display:none;z-index:2000"></div>'),
		$$wheel: $('<div class="waiting-wheel"  style="display:none;z-index:2000"></div>')
	};
	waitObject.$$bckg.appendTo($$parent);
	waitObject.$$wheel.appendTo($$parent);
	// Initialize plugin
	_waitPluginCreate(waitObject.$$wheel, _waitDefOpts);
	return waitObject;
};
/**
 * Destroy plugin
 */
var _waitPluginDestroy = function($$elmt) {
	/**
	 * We need to check data('waiting') because the plugin is not safe
	 * 	If no data('waiting') it fails
	 * 	That occurs if we remove a parent element of the plugin before destroying the plugin
	 */
	if ($$elmt && $$elmt.data('waiting')) {
		$$elmt.waiting("destroy");
		$$elmt.remove();
	}
};

var _waitPluginStatus = function($$elmt, status) {
	if ($$elmt && $$elmt.data('waiting')) {
		$$elmt.waiting(status);
		$$elmt[status === "disable" ? "hide" : "show"]();
	}
};

var _waitPluginCreate = function($$elmt, opts) {
	if (!opts) throw new Error("opts is mandatory");
	if ($$elmt) $$elmt.waiting(opts);
	return $$elmt;
};
var _waitWheelDestroy = function(waitObject) {
	if (waitObject) {
		_waitPluginDestroy(waitObject.$$wheel);
		if (waitObject.$$bckg) waitObject.$$bckg.remove();
	}
};
/**
 * Returns a dom element
 * - tag : html tag
 * - classList : array of classes
 * - content : dom.textContent
 * - attrList : various attributes list with key,value (JSON format)
 **/

var _createDomElement = function(tag, classList, content, attrList, parent) {
	if (!tag) {
		throw new Error("tag parameter is necessary !");
	}
	// create dom element
	var dom = document.createElement(tag);

	// append classes
	if (classList) {
		if ($.isArray(classList)) {
			$.each(classList, function(index, className) {
				dom.className += className + (index == classList.length - 1 ? "" : " ");
			});
		} else {
			if (typeof classList !== 'string') {
				throw new Error("classList parameter must be an array or a string");
			} else {
				dom.className += classList;
			}
		}
	}

	// set content
	dom.textContent = content ? content : "";

	if (attrList) {
		$.each(attrList, function(key, value) {
			dom.setAttribute(key, value);
		});
	}

	if (parent) {
		if (parent.jquery) {
			parent = parent.append(dom);
		} else {
			parent.appendChild(dom);
		}
	}

	return dom;
};

var _appendTextNode = function(e, text) {
	if (!e) return;
	var t = document.createTextNode(text || "");
	if (e.jquery) {
		e = e.append(t);
	} else {
		e.appendChild(t);
	}
	return e;
};
var _buildDom = function(domDesc, parent) {
	$.each(domDesc, function(nodeName, value) {
		var dom = _createDomElement(nodeName, value.classList, value.textContent, value.attr, parent);
		if (value.children) {
			$.each(value.children, function(index, childElement) {
				_buildDom(childElement, dom);
			});
		}
	});
};


exports.empty = _empty;
exports.toggleClass = _toggleClass;

exports.waitWheelStart = function(waitObject) {
	_wait(waitObject, true);
};
exports.waitWheelStop = function(waitObject) {
	_wait(waitObject, false);
};

exports.waitWheelCreate = _waitWheelCreate;
exports.waitWheelDestroy = _waitWheelDestroy;

/** Wait plugin SAFE call - SAFE if plugin has been remove from DOM*/
exports.waitPluginDestroy = _waitPluginDestroy;
exports.waitPluginCreate = _waitPluginCreate;
exports.waitPluginDisable = function($$elmt) {
	_waitPluginStatus($$elmt, "disable");
};
exports.waitPluginEnable = function($$elmt) {
	_waitPluginStatus($$elmt, "enable");
};

exports.createDomElement = _createDomElement;
exports.buildDom = _buildDom;

exports.appendTextNode = _appendTextNode;

/**
 * Trigger a global resize event for application
 * All layouts will be updated
 */
exports.triggerResizeInternal = function(opts) {
	$(window).triggerHandler("resizeInternal", [opts]);
};
});

define('syracuse-tablet/html/js/helpers/winjs',['require','exports','module'],function (require, exports, module) {

var _activeNotifications = {};
var _requestCounter = 0;

/* 
    this function is the global callback hook for WinJS to trigger callbacks started by callWinJS function
*/
var _winjsCallbackHook = function(param) {
	if (!param) {
		// todo error
		return;
	}

	var data;
	try {
		data = JSON.parse(param);
	} catch (e) {
		// todo error
		return;
	}
	if (!data.$uuid) {
		// todo error
		return;
	}

	// recover stored callback information to route callback
	var $active = _activeNotifications[data.$uuid];
	if (!$active) {
		// todo error
		return;
	}
	delete _activeNotifications[data.$uuid];
	if (!$active.$deferred) {
		// no error
		return;
	}
	if (data.$error) {
		$active.$deferred.reject(data.$error);
	} else {
		$active.$deferred.resolve(data.$data);
	}
};

var _callWinJS = function(domain, funcName, parameterObject, fireAndForget) {
	var deferred = $.Deferred();
	if (_isAvailable()) { // do we have an winJs container?
		_requestCounter = _requestCounter + 1;

		var $invoke = {
			$domain: domain,
			$funcName: funcName,
			$uuid: "" + _requestCounter,
			$data: parameterObject,
			$execCallback: !fireAndForget
		};

		var param = JSON.stringify($invoke);
		var $active;
		if (fireAndForget !== true) {
			$active = {
				$uuid: $invoke.$uuid,
				$deferred: deferred
			};
			_activeNotifications[$active.$uuid] = $active;
		}

		window.external.notify(param);

		if (fireAndForget === true) {
			deferred.resolve();
		}
	} else {
		deferred.reject({
			$message: "No WinJS container"
		});
	}
	return deferred.promise();
};

var _isAvailable = function() {
	try {
		return ("notify" in window.external);
	} catch (e) {
		// Safari
		return false;
	}
};

// Register callback hook on window object to be available "globally" from outside the web view control
if (window) {
	window.winjsCallbackHook = _winjsCallbackHook;
}

exports.callWinJS = _callWinJS;
exports.isAvailable = _isAvailable;
});

define('syracuse-tablet/html/js/helpers/jsutils',['require','exports','module'],function (require, exports, module) {
/*
 * This module must only contain low level helper functions that do not have any dependencies!
 */

var _isInstanceOf = function(o, name) {
	var ctor = o.constructor;
	if (ctor && ctor.$smClasses) {
		return ctor.$smClasses.indexOf(name) > -1;
	}
	return false;
};

var _addInheritanceInfo = function(ctor) {
	var classes = [];

	function walk(obj) {
		var name = obj && obj.constructor && obj.constructor.name;
		if (name && name !== "Object") {
			classes.push(name);
			var proto = obj.constructor.prototype && obj.constructor.prototype.__proto__;
			if (proto) {
				walk(proto);
			}
		}
	}
	if (ctor.name) {
		classes.push(ctor.name);
		walk(ctor.prototype.__proto__);
		ctor.$smClasses = classes;
	}
};

var _isError = function(o) {
	return o && Error.prototype.toString === o.toString;
};

/** 
 * Clean error stack from current base url and limit the size due to the use of deferred
 * html: true -> Display in Html
 **/
var _stackRegexp;
var _cleanStack = function(stack, max, html) {
	if (Array.isArray(stack)) return stack;
	var globals = window.$sm;
	if (!globals) return stack;
	if (!_stackRegexp && globals && globals.baseLocation()) {
		_stackRegexp = {
			r1: new RegExp(globals.baseLocation().withPath, "g"),
			r2: new RegExp(globals.baseLocation().requirePath, "g")
		};
	}

	max = max == null ? 5 : max;
	if (stack) {
		var array = (stack.split && stack.split("\n")) || stack;;
		var res;
		if (array.length > 0) {
			array.forEach(function(l) {
				var pos1 = l.lastIndexOf(".js");
				if (pos1 > 0) {
					var pos2 = l.lastIndexOf("/", pos1);
					if (pos1 > 0) {
						if (!res) res = [];
						res.push(l.substring(pos2));
					}
				}
			});
		}
		if (!res && _stackRegexp) {
			stack = _stackRegexp ? stack.replace(_stackRegexp.r1, "").replace(_stackRegexp.r2, "") : stack;
		} else {
			stack = res.join('\n');
		}
	} else {
		stack = "";
	}
	stack = stack.split("\n");
	if (stack.length > max) {
		stack = stack.splice(0, max).join(html ? "<br>&nbsp&nbsp&nbsp&nbsp&nbsp" : "\n");
	}
	return stack;
};

/*
 * Takes what ever is passed as parameter and creates an object containing and $diagnoses array
 * title: Always a string
 * e: String or Error or any kind of object*
 *
 * object*:
 * {
 *   message: "text",
 *   detail: Error or Object
 * }
 *
 */
var _convertToDiagnoses = function(title, e) {
	if (e == null) {
		// Nothing, only title
		return {
			$diagnoses: [{
				$severity: "error",
				$message: title
			}]
		};
	} else if (typeof e === "string") {
		// String message
		return {
			$diagnoses: [{
				$severity: "error",
				$message: e
			}]
		};
	} else if (_isError(e)) {
		// Exception to diagnoses
		return {
			$diagnoses: [{
				$message: e.message,
				$stackTrace: _cleanStack(e.stack),
				$severity: "error"
			}]
		};
	} else {
		// If parameter is already an object with diagnoses, do not do anything special
		if (e.$diagnoses && Array.isArray(e.$diagnoses)) {
			return e;
		}

		// Arbitrary object
		var res = {
			$diagnoses: [{}]
		};
		var diag = res.$diagnoses[0];
		diag.$message = e.message || title;
		diag.$severity = "error";
		var detail = e.detail;
		if (detail) {
			if (_isError(detail)) {
				if (detail.message) {
					diag.$stackTrace = (diag.$stackTrace ? diag.$stackTrace + "\n" : "") + detail.message;
				}
				if (detail.stack) {
					diag.$stackTrace = (diag.$stackTrace ? diag.$stackTrace + "\n" : "") + _cleanStack(detail.stack);
				}
			} else {
				diag.$stackTrace = (diag.$stackTrace ? diag.$stackTrace + "\n" : "") + JSON.stringify(detail);
			}
		}

		return res;
	}
};

exports.addInheritanceInfo = _addInheritanceInfo;

/**
 * return true if o is an instance of class 'name'
 * Like this process could slow down the application it's better to register only classes for which we want to check instance
 */
exports.isInstanceOf = _isInstanceOf;

exports.isError = _isError;

exports.cleanStack = _cleanStack;

exports.convertToDiagnoses = _convertToDiagnoses;
});

define('syracuse-tablet/html/js/helpers/logger',['require','exports','module','syracuse-tablet/html/js/helpers/winjs','syracuse-tablet/html/js/helpers/jsutils'],function (require, exports, module) {

var winjs = require('syracuse-tablet/html/js/helpers/winjs');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

var _log;

if (winjs.isAvailable()) {
	_log = function() {
		var args = [];
		for (var i = 0; i < arguments.length; i++) {
			args.push(arguments[i]);
		}
		winjs.callWinJS("logger", "log", {
			"args": args
		}, true);
	};
} else {
	_log = function() {
		var text = [];
		for (var i = 0; i < arguments.length; i++) {
			var a = arguments[i];
			if (a != null) {
				if (jsutils.isError(a))
					console && console.log && console.log(a.message, "\n", jsutils.cleanStack(a.stack));
				else
					text.push(a);
			}
		}
		console && console.log && console.log(text.join(text, " "));
	};
}
if (window) {
	window.logger = _log;
}

function _getLogger(module, force) {
	if (force !== true && (true || module !== "sdataDispatcher" && module !== "SDataCache"))
		return null;
	var logger = function() {
		var text, errs;
		for (var i = 0; i < arguments.length; i++) {
			if (jsutils.isError(arguments[i])) {
				if (!errs) errs = [];
				errs.push(arguments[i]);
			} else {
				if (!text) text = ["[" + module + "]: "];
				text.push(arguments[i]);
			}
		}
		if (text && text.length > 1) _log(text.join(" "));
		if (errs) {
			errs.forEach(function(e) {
				_log("[" + module + "]: " + e.message);
				if (e.stack) _log(jsutils.cleanStack(e.stack));
			});
		}
	};
	return logger;
}

exports.log = _log;
exports.getLogger = _getLogger;
});

define('syracuse-tablet/html/js/helpers/globals',['require','exports','module','syracuse-tablet/html/js/helpers/logger'],function (require, exports, module) {

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("globals");

var _emptyCacheCtx = {
	"$user": "none",
	"$role": "none",
	"$lang": "none"
};

var _globals = {
	tabletApplication: null,
	userCtx: null,
	isTestEnvironment: false,
	baseLocation: null,
	isDvlpMode: false,
	isOffLineMode: false,
	storage: null,
	cache: null,
	modal: null,
	cacheCtx: $.extend({}, _emptyCacheCtx),
	lookAndFeel: "windows",
	userProfile: {},
	/* JSON description of applications */
	applicationsJson: {}
};

var _setUserCtx = function(userCtx) {
	log && log("Set user context");
	var ctx = userCtx == null ? $.extend({}, _emptyCacheCtx) : userCtx;

	_globals.cache.setContext(ctx);
	_globals.cacheCtx = ctx;
	return _globals.userCtx = ctx;
};

var _setTabletApplication = function(appObj) {
	if (!appObj) {
		throw new Error("Null tabletApplication object");
	}
	log && log("Set tablet Application object");
	_globals.tabletApplication = appObj;
	return appObj;
};

/**
 * Called by main.js
 */
var _init = function(dvlpMode, storage, cache, utilsModule) {
	_globals.isOffLineMode = false;
	_globals.isDvlpMode = dvlpMode;
	var bl = _globals.baseLocation = {};
	bl.host = window.location.protocol + "//" + window.location.host;
	var path = window.location.pathname.split('/').splice(0, 2).join('/');
	bl.withPath = bl.host + path;
	bl.requirePath = bl.host + "/requireJS" + path;
	bl.htmlRoot = bl.withPath + "/html";
	if (utilsModule) bl.query = utilsModule.parseQueryString();
	_globals.isTestEnvironment = window.location.href.indexOf("/syracuse-tablet/test/index.html") > -1;
	_globals.storage = storage;
	_globals.cache = cache;
};
/*************************************************************
 * APPLICATIONS DATA
 ************************************************************/
exports.isLoggedIn = function() {
	return _globals.userCtx != null && _globals.userCtx.$user !== "none";
};
exports.getUserCtx = function() {
	return _globals.userCtx;
};
exports.getGlobalCtx = function() {
	return _globals;
};
exports.getStorage = function() {
	return _globals.storage;
};
exports.getCache = function() {
	return _globals.cache;
};
exports.getCacheCtx = function() {
	return _globals.cacheCtx;
};
exports.getEmptyCacheCtx = function() {
	return _emptyCacheCtx;
};
exports.getEndpoint = function() {
	var ep = _globals.endpoint;
	return ep;
};
exports.setEndpoint = function(ep) {
	_globals.endpoint = ep;
};
exports.$config = function(prop) {
	return _globals.tabletApplication.$config(prop);
};
exports.setUserProfile = function(up) {
	_globals.userProfile = up;
};

exports.getUserProfile = function() {
	return _globals.userProfile;
};
exports.getUserName = function() {
	var up = _globals.userProfile;
	return up && up.user && ((up.user.firstName ? up.user.firstName + " " : "") + up.user.lastName) || "unknown";
};
/**
 * Returns a prototype of a given page of the current application
 * 	fullName: x3.erp.SUPERV.AQMCRUD.$details
 */
exports.getPrototype = function(fullName) {
	return _globals.tabletApplication.dao.getPrototype(fullName);
};
/**
 * register a page which is not declared in application meta-sdata - rowdetail...
 */
exports.registerAdditionalPage = function(id, protoJson, articleJson) {
	return _globals.tabletApplication.dao.registerAdditionalPage(id, protoJson, articleJson);
};
/** 
 * Return the current page of tablet application (not current page in a vignette)
 */
exports.getCurrentPage = function(fullName) {
	return _globals.tabletApplication.currentPage;
};
/**
 * Set the JOSN description of available applications
 * User will be able to switch from one application to another
 * Among these applications JSON there's a 'welcome' application that only displays the list of available applications
 * 	welcome application is a dashboard
 */
exports.setApplicationsJson = function(apps) {
	if (!apps) throw new Error("Null applications JSON");
	_globals.applicationsJson = apps;
};
/**
 * Set the global that points to the tablet application
 */
exports.setTabletApplication = _setTabletApplication;
/**
 * Returns global tablet application
 * TODO Change the name of getApplication
 */
exports.getApplication = function() {
	return _globals.tabletApplication;
};
/**
 * Returns the name/id of a dashboard
 * name is followed by a '.facet' like for other pages
 */
exports.getDashboardName = function(name) {
	return name + ".$mobileDashboard";
};
/**
 * Welcome application JSON description
 * JSON is built programmatically
 */
exports.getWelcomeAppJson = function() {
	return _globals.applicationsJson.$welcomeApplication;
};
/**
 * return JSON of a given application
 */
exports.getApplicationJson = function(name) {
	var appInfo = _globals.applicationsJson[name];
	/* TODO - check if application changed with id and timestamp */
	if (!appInfo) throw new Error("getApplicationJson - NULL appInfo (" + name + ")");
	return appInfo;
};
/**
 * Scans all application JSON and calls the call back
 */
exports.forEachApplicationJson = function(cb) {
	if (!cb) return;
	var apps = _globals.applicationsJson;
	Object.keys(apps).forEach(function(appName) {
		cb(appName, apps[appName]);
	});
};
/*************************************************************
 * UTILS
 ************************************************************/
exports.setUserCtx = _setUserCtx;

/**
 * Allows access to modal through globals
 */
exports.setModal = function(m) {
	_globals.modal = m;
};
exports.getModal = function() {
	return _globals.modal;
};
/**
 * Off line mode
 */
exports.isOffLineMode = function() {
	return _globals.isOffLineMode;
};
/**
 * base url utilities
 * 	baseLocation.host - protocol://host:port
 * 	baseLocation.withPath
 * 	baseLocation.requirePath
 * 	baseLocation.htmlRoot
 * 	baseLocation.query
 */
exports.baseLocation = function() {
	return _globals.baseLocation;
};
/**
 * True is dvlp mode - set the caller of _init function
 */
exports.isDvlpMode = function() {
	return _globals.isDvlpMode;
};
/**
 * True if modules is loaded by unit test page
 */
exports.isTestEnvironment = function() {
	return _globals.isTestEnvironment;
};
/**
 * set/returns look and feel id : windows | android | ios
 */
exports.setLookAndFeel = function(lookAndFeel) {
	_globals.lookAndFeel = lookAndFeel;
};
exports.getLookAndFeel = function() {
	return _globals.lookAndFeel;
};
/*************************************************************
 * STATIQUES
 ************************************************************/
exports.ROWIDXPROP = "~ROWIDX~";
exports.SINGLEARRAYPROP = "~data~";
/*************************************************************
 * INIT
 ************************************************************/
/* Initialization by main.js */
exports.init = _init;
if (window) {
	window.$sm = exports;
}
});

define('syracuse-tablet/html/js/helpers/notifications',['require','exports','module','syracuse-tablet/html/js/helpers/logger','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/jsutils'],function (require, exports, module) {

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("notifs");
var globals = require('syracuse-tablet/html/js/helpers/globals');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

/**
 * publish/subscribe - Observer/Observable pattern with jQuery
 * TODO - !!! Attach a _subscriptions to application and one per page
 * --> Switch the page _subscriptions with the page in order to not notify inactive pages (parent page)
 * Temporarily we check inactive in page notif methods
 *
 **/

var _nameSpace = "sm";
var _subscriptions = {};

var _err = function(e) {
	log && log("Error", e);
	if (typeof e == "string") {
		throw new Error("Notification - " + e);
	} else {
		throw e;
	}
};

/**
 * _callHandler outside _publish function to preserve args if call to multiple objects in the loop
 */
var _callHandler = function(callBack, object, args) {
	return setTimeout(function() {
		callBack.apply(object, args);
	}, 0);
};

/**
 *  publish an event ("sm.login") or an array of events ["sm.login"...]
 * 		Functional Object Subscribers
 * 			 notified through method notifEventname - object.notifLogin, object.notifLogout
 * 		Simple callBack Subscriber
 * 			called with event as first parameter
 * 	Argument that follow events parameter are passed to the Subscriber
 * */
var _publish = function(events) {
	try {
		if (!events) {
			throw new Error("No topic to publish");
		}
		var events = typeof events === "string" ? [events] : events;
		log && log("Publish " + events.join(" - "));
		var args, subscription, subscription, res;
		var count = 0,
			array;
		var objArgs, args = arguments;
		events.forEach(function(evt) {
			array = _subscriptions[evt];
			if (array) {
				array = array.slice();
				for (var i = 0, l = array.length; i < l; i++) {
					subscription = array[i];
					if (subscription.object) {
						if (!objArgs) objArgs = Array.prototype.slice.call(args, 1);
						// Remove first argument and call the method - setTimeout(0) for asynchronism and release call stack
						res = _callHandler(subscription.callBack, subscription.object, objArgs);
					} else {
						// call the function with evt as first parameter - setTimeout(0) for asynchronism and release call stack
						args[0] = evt;
						res = _callHandler(subscription.callBack, null, args);
					}
					count++;
					// TO SEE - -stop is res = false if ( res === false ) { break; }
				}
			} else {
				// No subscribers is not an error!
				// throw new Error("Unknown notification event " + evt);
			}
		});
	} catch (e) {
		_err(e);
	}
};
/**
 * object subscribes for events (string or array)
 * 		object can be an functional Object or a function
 * 		functional Object must implement a method notifEventName  sm.Login.user -> Method notifLoginUser
 * Events starts with "sm" (sm.login)
 * High priority subscriptions are called first
 */
var _subscribe = function(object, events, priority) {
	if (!events) {
		_err("No topic to publish");
	}
	if (!object) {
		_err("Null object");
	}
	priority = priority || 10;
	var events = typeof events === "string" ? [events] : events;
	log && log("Subscribe " + events.join(" - ") + " - priority=" + priority);
	events.forEach(function(evt) {
		var callBackFct, callBackObj;
		if (typeof object == "function") {
			callBackFct = object;
			callBackObj = null;
		} else {
			callBackObj = object;
			var methodName = evt.split('.');
			if (methodName[0] != _nameSpace) _err("Bad event domain name");
			methodName = $.camelCase("notif-" + methodName.splice(1).join('-'));
			callBackFct = object[methodName];
			if (!callBackFct) {
				_err("Object must implement " + methodName);
			}
		}
		var added = false;
		if (!_subscriptions[evt]) {
			_subscriptions[evt] = [];
		}
		var subscriptionInfo = {
			callBack: callBackFct,
			object: callBackObj,
			priority: priority
		};
		for (var i = _subscriptions[evt].length - 1; i >= 0; i--) {
			if (_subscriptions[evt][i].priority <= priority) {
				_subscriptions[evt].splice(i + 1, 0, subscriptionInfo);
				added = true;
				break;
			}
		}
		if (!added) {
			_subscriptions[evt].unshift(subscriptionInfo);
		}
	});
};

/**
 * object unsubscribes for events
 *  object != null
 * 		Remove all object's subscription for given events
 * 		object can be an Object or a function
 *  object == null
 * 		Remove all subscription for given events
 *  events string or array
 * 		null -> unsubscribe for allevent
 */
var _unsubscribe = function(object, events) {
	if (!events) {
		events = Object.keys(_subscriptions);
	} else if (typeof events == "string") {
		events = [events];
	}

	var propToCheck = typeof object === "function" ? "callBack" : "object";
	events.forEach(function(evt) {
		var array = _subscriptions[evt];
		if (array) {
			for (var i = 0, l = array.length; i < l; i++) {
				if (object == null || array[i][propToCheck] === object) {
					array.splice(i, 1);
					// Adjust counter and length for removed item
					i--;
					l--;
				}
			}
		}

	});
};

// Remove all subscription
var _reset = function(object, events) {
	log && log("Reset");
	// For tests
	_unsubscribe(null, null);
	// We could just do _subscriptions = {};
};

// the number of subscriptions per event (for object if != null)
var _check = function(object) {
	var res = {};
	var propToCheck = typeof object === "function" ? "callBack" : "object";
	Object.keys(_subscriptions).forEach(function(key) {
		if (object == null) {
			res[key] = _subscriptions[key].length;
		} else {
			res[key] = 0;
			var arr = _subscriptions[key];
			for (var i = 0, l = arr.length; i < l; i++) {
				if (arr[i][propToCheck] === object) res[key] = res[key] + 1;
			}
		}
	});
	return res;
};
/**
 * Notify a specified page or the current one
 * We can't used the standard notification process for pages because we need to notify only one page
 * We can have potentially multiple pages objects (vignettes, disabled pages..)
 * We keep the subscription/publication method to to call asynchronously the method to release the stack
 * TODO - Review/improve later the project according to global needs
 * event: 	only one event
 * page:	second parameter - no parameter for current page
 * arguments:	callback arguments
 */
var _pageNotify = function(event, page) {
	try {
		if (!event) throw new Error("Unexpected empty event");
		if (typeof event !== "string") throw new Error("Strinf event expected");
		log && log("PageNotify " + event);
		var args;
		if (page !== null && jsutils.isInstanceOf(page, "Page")) {
			args = Array.prototype.slice.call(arguments, 2);
		} else {
			page = globals.getCurrentPage();
			args = Array.prototype.slice.call(arguments, 1);
		}
		if (!page) throw new Error("Unexpected null page");
		var array = _subscriptions[event];
		if (array) {
			for (var i = 0, l = array.length; i < l; i++) {
				if (array[i].object === page) {
					return _callHandler(array[i].callBack, page, args);
				}
			}
		}
	} catch (e) {
		_err(e);
	}
};
exports.check = _check;
exports.reset = _reset;
exports.subscribe = _subscribe;
exports.unsubscribe = _unsubscribe;
exports.publish = _publish;
exports.pageNotify = _pageNotify;
});

define('syracuse-tablet/html/js/helpers/utils',['require','exports','module','syracuse-tablet/html/js/helpers/logger','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/notifications','syracuse-tablet/html/js/helpers/jsutils'],function (require, exports, module) {

var logger = require('syracuse-tablet/html/js/helpers/logger');
var log = logger.log;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

var _defineClass = function(constructor, parent, members) {
	function _addMembers(proto, members) {
		for (var name in members || {}) {
			var member = members[name];
			if (typeof member.get === "function" || typeof member.set === "function") {
				Object.defineProperty(proto, name, member);
			} else {
				proto[name] = member;
			}
		}
	}

	if (parent) constructor.prototype = Object.create(parent.prototype);
	constructor.prototype.constructor = constructor;
	_addMembers(constructor.prototype, members);
	jsutils.addInheritanceInfo(constructor);
	return constructor;
};

/* Universal UUID - Not readable */
var _UUID = function() {
	return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,
		function(c) {
			var r = Math.random() * 16 | 0,
				v = c == 'x' ? r : (r & 0x3 | 0x8);
			return v.toString(16);
		});
};

var _getCurISODateTime = function() {
	var currentdate = new Date();
	var values = [
		currentdate.getFullYear(), 4, (currentdate.getMonth() + 1), 2,
		currentdate.getDate(), 2,
		currentdate.getHours(), 2,
		currentdate.getMinutes(), 2,
		currentdate.getSeconds(), 2
	];
	var datetime;
	for (var i = 0; i < values.length; i += 2) {
		var val = "" + values[i];
		while (val.length < values[i + 1]) {
			val = "0" + val;
		}
		if (!datetime) {
			datetime = val;
		} else {
			datetime += "-" + val;
		}
	}
	return datetime;
};

/* Return a DOM compliant id */
var _domIdCpt = 0;
var _domId = function(id) {
	return id.replace(/([^\w-_])/g, '_');
};

/* Readable ui for html dom ids */
var _uidCpt = 0;
var _readableuid = function() {
	return _domId($.camelCase((arguments.length > 0 ? Array.prototype.join.call(arguments, '-') + '-' : "") + _uidCpt++));
};


/* Parse an url */
var _purlOptions = {
	strictMode: false,
	key: ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "querystring", "anchor"],
	q: {
		name: "query",
		parser: /(?:^|&)([^&=]*)=?([^&]*)/g
	},
	parser: {
		strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
		loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
	}
};
/*
 * {
  "anchor": "", "file": "", "password": "", "user": "", "userInfo": "",
  "querystring": "representation=AQTCRUDM.$edit",
  "directory": "/sdata/x3/erp/SUPERV/AQTCRUD/$template/$workingCopies",
  "path": "/sdata/x3/erp/SUPERV/AQTCRUD/$template/$workingCopies",
  "relative": "/sdata/x3/erp/SUPERV/AQTCRUD/$template/$workingCopies?representation=AQTCRUDM.$edit",
  "port": "8124",
  "host": "pc101329.sagefr.adinternal.com",
  "authority": "pc101329.sagefr.adinternal.com:8124",
  "protocol": "http",
  "source": "http://pc101329.sagefr.adinternal.com:8124/sdata/x3/erp/SUPERV/AQTCRUD/$template/$workingCopies?representation=AQTCRUDM.$edit",
  "query": {
    "representation": "AQTCRUDM.$edit"
  }
 */
var _parseURL = function(str) {
	var o = _purlOptions;
	var m = o.parser[o.strictMode ? "strict" : "loose"].exec(str);
	var uri = {};
	var i = 14;

	while (i--) uri[o.key[i]] = m[i] || "";

	uri[o.q.name] = {};
	uri[o.key[12]].replace(o.q.parser, function($0, $1, $2) {
		if ($1) uri[o.q.name][$1] = decodeURIComponent($2);
	});
	return uri;
};

/* Parse url QS */
var _qsParser = /([^&=;]*)=?([^&;]*)/g;
var _parseQueryString = function(qs) {
	qs = qs || window.location.search;
	var res = {};
	var qs = decodeURIComponent(qs);
	var ii = qs.indexOf('?');
	if (ii >= 0) {
		qs = qs.substring(ii + 1);
	}
	qs.replace(_qsParser, function($0, $1, $2) {
		if ($1 && $1.length > 0) {
			res[$1] = decodeURIComponent($2);
		}
	});
	return res;
};

/* Encoding/Decoding stuff*/
// TODO - can be improved
var _htmlEncode = function(value) {
	return $('<div/>').text(value).html();
};
var _htmlDecode = function(value) {
	return $('<div/>').html(value).text();
};

/* cleanup all references */
var _unbindObj = function(obj) {
	if (obj == null) return;
	if (obj.jquery) {
		obj.unbind();
		obj.undelegate();
		obj.off();
		obj.remove();
		if (obj.smPageRemoveController) obj.smPageRemoveController();
	}
	notifications.unsubscribe(obj);
};
/**
 *  Resolves expression according to current dataset and prototype
 *  	expression: Syrause SData expression
 *  	dataset: optionnal - DaoSdata object (with value method to chain with a parent) or a simple JSON object
 *  			 if dataset=null prototype must be != null
 *  	prototype: optionnal - PrototypeObject
 **/
var _exprRegExp = /\{(.*?)\}/g;
var _execExpression = function(expression, dataset, prototype, level) {
	level = level || 0;
	expression = (expression || "") + "";
	//	TODO  - to remove - FDB - Expresion without brackets must return itself and must not be resolved
	//	if (level === 0 && expression.indexOf("{") < 0 && dataset) {
	//		console.log("NO BRACKET EXPRESSION " + expression);
	//		var value = dataset.getValue ? dataset.getValue(expression) : dataset[expression];
	//		return value == null ? "" : value;
	//	}
	var prevProp = null;
	var res = expression.replace(_exprRegExp,
		function(match, prop) {
			// Search in data first - "{VACBPR}~{LEG}"
			var val = dataset == null ? null : dataset.getValue ? dataset.getValue(prop) : dataset[prop];
			if (val != null) return val;
			if (!prototype) return "";
			if (prop.smStartsWith('@')) {
				//Case @1234
				return prototype.localization(prop);
			}
			val = prototype.data(prop, dataset);
			if (val != null && val.indexOf("{") >= 0) {
				// Search in prototype - ex "{@7898}", "{$baseUrl}/$prototype('{$representation}.$thumb')"
				return _execExpression(val, dataset, prototype, level + 1);
			}
			return val == null ? "" : val;
		});
	return res || "";
};

exports.isOnline = function() {
	return navigator.onLine;
};

exports.isDesktop = function() {
	var agt = navigator.userAgent;
	var mobile = (agt.match(/(iphone|ipod|ipad)/) || agt.match(/(android)/i) || agt.match(/(iemobile)/) || agt.match(/iphone/i) || agt.match(/ipad/i) || agt.match(/ipod/i) || agt.match(/blackberry/i) || agt.match(/bada/i));
	return !mobile;
};

/*
	Extract code from ref field prototype expression {x}
*/
var _extractCode = function($expression) {
	$expression = $expression + "";
	if ($expression.indexOf("{") >= 0) {
		return $expression.slice(1, $expression.length - 1);
	}
	return $expression;
};

/**
 * return the value of a given path
 * 	path:	String with/without '.' as separator or array of strings
 *  cacheParent: 	null	-> No cache
 * 					!null	-> object that stores the cache (could be different from data object not modify it)
 */
var _getPropByPath = function(object, path, cacheParent) {
	if (path == null || object == null) return null;
	if (cacheParent) {
		if (cacheParent._cachePath && cacheParent._cachePath[path] != null) {
			return cacheParent._cachePath[path];
		}
	}
	if (!Array.isArray(path)) {
		path = path.split('.');
	}
	// Check parent if needed
	var data = object[path[0]];
	for (var i = 1; i < path.length; i++) {
		if (data == null) return null;
		if (!$.isPlainObject(data) == null) {
			throw new Error('_getPropByPath - Unexpected non-plainobject');
		}
		data = data[path[i]];
	}
	if (cacheParent) {
		if (!cacheParent._cachePath) cacheParent._cachePath = {};
		cacheParent._cachePath[path] = data;
	}
	return data;
};

/**
 * Only if current pages  is a dashboard
 * return the parent vignette or null
 * we assume that there are no dashboard in vignettes
 */
var _findParentVignette = function($$target, fail) {
	var app = globals.getApplication();
	if (app.currentPage.getType() === "dashboard") {
		// Find vignette controlId + get vignette control
		var $$v = $$target.closest(".s-m-control.s-m-vignette");
		var vignetteId = $$v.attr("id");
		if (fail && vignetteId.length === 0) throw new Error("Vignette DOM elmt not found");
		var vignette = app.currentPage.getControl(vignetteId);
		if (fail && !vignette) throw new Error("Vignette not found - id[" + vignetteId + "]");
		return vignette;
	} else if (fail) {
		throw new Error("Current page is not a dashboard");
	}
	return null;
};
/**
 * Returns null or {vignette, control} if ctrlId has been found in a vignette
 */
var _findCtrlInDashboard = function($$target, ctrlId) {
	var app = globals.getApplication();
	//Two ways - tested - second should be more efficient but both take few ms
	if (false) {
		// Scan all vignettes and seach control (ctrlId is unic)
		return app.currentPage.findVignetteControl(ctrlId);
	} else {
		// Find vignette controlId + get vignette control + get control from vignette's page
		var vignette = _findParentVignette($$target, app, true);
		var control = vignette.getPageControl(ctrlId);
		return control ? {
			control: control,
			vignette: vignette
		} : null;
	}
};

/**
 * simple function bind
 * @param {Function} fn
 * @param {Object} context
 * @returns {Function}
 */
function bindFn(fn, context) {
	return function boundFn() {
		return fn.apply(context, arguments);
	};
}

exports.extractCode = _extractCode;
exports.UUID = _UUID;
exports.defineClass = _defineClass;
exports.readableuid = _readableuid;
exports.domId = _domId;
exports.parseQueryString = _parseQueryString;
exports.parseURL = _parseURL;
exports.htmlEncode = _htmlEncode;
exports.htmlDecode = _htmlDecode;
exports.getCurISODateTime = _getCurISODateTime;
exports.unbindObj = _unbindObj;
exports.parseExpression = function(expression, dataset, prototype) {
	return _execExpression(expression, dataset, prototype, 0);
};
/* Avoid modal declaration in caller module*/
exports.getPropByPath = _getPropByPath;
exports.findParentVignette = _findParentVignette;
exports.findCtrlInDashboard = _findCtrlInDashboard;
exports.bindFn = bindFn;
});

define('syracuse-tablet/html/js/ajax/ajaxInterface',['require','exports','module','syracuse-tablet/html/js/helpers/logger','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/globals'],function (require, exports, module) {
/*
 * Ajax module (Default browser implementation)
 */


var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ajax");
var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');

// Locale module passed in init because if dependency cycle
var _locale;

function _AjaxInterface() {};

var _httpStatus = {
	"200": 'Ok',
	"201": 'Created',
	"400": 'Bad Request',
	"401": 'Unauthenticated',
	"403": 'Forbidden',
	"404": 'Not Found',
	"405": 'Method Not Allowed',
	"406": 'Not Acceptable',
	"409": 'Conflict',
	"410": 'Gone',
	"411": 'Length Required',
	"412": 'Precondition Failed',
	"413": 'Request Entity Too Large',
	"414": 'Request URI Too Long',
	"415": 'Unsupported Media Type',
	"422": 'Unprocessable Entity',
	"429": 'Too Many Requests',
	"500": 'Internal Server Error',
	"501": 'Not Implemented',
	"502": 'Bad Gateway',
	"503": 'Service Unavailable',
	"504": 'Gateway Timeout'
};
var _rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg;
var _ajaxInterfaceClass = utils.defineClass(
	_AjaxInterface,
	null, {
		/**
		 *
		 * Parameters:
		 *
		 * method: GET, PUT, POST, DELETE, HEAD
		 * url: http URL
		 * send: Data to send (Objects will be stringified to json on POST and PUT)
		 * headers: headers to add to the request
		 * options: {
		 *   noJsonParsing: true, : Returns response body as string without trying to parse and return an object. (Default: Parse and return object)
		 *   timeout: 1000 : Request timeout (Default: 0)
		 *   dontCatchHttp401: true (Default: false): true = Return 401 to caller instead of redirecting to login page
		 * }
		 *
		 * When promise is resolved, callback gets the following object as parameter:
		 * {
		 *     textStatus: e.g. "success", "errror"
		 *     status: http status code (200, 404, 500, ...)
		 *     descrHttpStatus: description of http status code (e.g. "Internal Server Error")
		 *     isSuccess: true for: status >= 200 && status < 300 || status === 304
		 *     responseJSON: Contains parsed object returned by server (Unless response did not contain JSON or option noJsonParsing was set)
		 *     responseText: Contains response as returned by server (as string)
		 *     headers: { ... } : Contains returned http headers
		 * }
		 *
		 */
		ajax: function(method, url, send, headers, options) {
			var deferred = $.Deferred();
			try {
				method = method ? method.toUpperCase() : "GET";
				if (method === "GET" && send) {
					if (url.indexOf('?') === -1) url += "?";
					var params = [];
					for (var p in send) {
						if (send[p] != null) {
							params.push(encodeURIComponent(p) + "=" + encodeURIComponent(send[p].toString()));
						}
					}
					url += params.join('&');
				}
				options = options || {};
				var doAjax = function() {
					try {
						var allHeaders = {
							"Accept": "application/json;vnd.sage=syracuse"
						};
						if (headers) {
							$.extend(allHeaders, headers);
						}
						// TODO: Authentication
						var ajaxData = {
							headers: allHeaders,
							type: method,
							url: url,
							timeout: options.timeout == null ? 0 : options.timeout
							//processData : false
						};
						if (["PUT", "POST"].indexOf(method) >= 0 && send != null) {
							ajaxData.contentType = options.contentType || "application/json;charset=utf-8";
							if (ajaxData.contentType.indexOf("application/json") >= 0 && typeof send === "object") {
								try {
									send = JSON.stringify(send);
								} catch (e) {
									throw new Error("Error parsing send data\nurl: " + url);
								}
							};
							ajaxData.data = send;
						}

						// We need this option to deal with non-json data
						var parseJson = allHeaders.Accept.indexOf("application/json") >= 0 && options.noJsonParsing !== true;
						if (parseJson) {
							ajaxData.dataType = "json";
						}
						log && log("'" + method + "':" + url);
						// $.ajax is replaced after startup to ensure the module  ajax/ajax.is used since $.ajax will not work
						// in winJS container because of blocked CORS.
						// Here, it's ok to use $.ajax since if we are in a winJS container, this function will be replaced by a
						// function that redirects the call to a winJS function.
						// If we end up here, we are sure we are in standalone browser mode and $.ajax will work as usually

						var ajax = $.ajax_original || $.ajax;
						var promise = ajax(ajaxData);
						promise.complete(function(jqXHR, textStatus) {
							try {
								var status = jqXHR.status != null ? jqXHR.status : textStatus == "success" ? 200 : 500;
								var result = {
									textStatus: textStatus,
									status: status,
									descrHttpStatus: _httpStatus[status] || ("unknown: " + status),
									isSuccess: status >= 200 && status < 300 || status === 304,
									headers: {}
								};
								if (parseJson) {
									result.responseJSON = jqXHR.responseJSON;
								} else {
									result.responseText = jqXHR.responseText;
								}
								var match, headerStr = jqXHR.getAllResponseHeaders();
								if (headerStr) {
									while ((match = _rheaders.exec(headerStr))) {
										result.headers[match[1].toLowerCase()] = match[2];
									}
								}
								if (status === 401 && !(options.dontCatchHttp401 === true)) {
									_handleHttp401(deferred, result);
								} else {
									deferred.resolve(result);
								}
							} catch (e) {
								deferred.reject(e);
								return;
							}
						});
					} catch (e) {
						globals.getModal().error("ajax.doAjax error", e, function() {
							deferred.resolve(e);
						});
					} finally {
						return promise;
					}
				};

				doAjax();
			} catch (e) {
				globals.getModal().error("ajax error", e, function() {
					deferred.reject(e);
				});
			} finally {
				return deferred.promise();
			}
		}
	}
);

exports.AjaxInterfaceClass = _ajaxInterfaceClass;

/*
 * config
 * locale moduel syracuse-tablet/html/js/helpers/locale passed as parameter because of dependencies
 *
 */
exports.init = function(config, locale) {
	_locale = locale;
	config = config || {};
	$.ajaxSetup({
		timeout: config.timeout == null ? 20000 : config.timeout,
		async: true
	});
};

/*
 *
 */
function _handleHttp401(deferred, result) {
	var responseJSON = result.responseJSON;
	if (!responseJSON) {
		try {
			responseJSON = JSON.parse(result.responseText);
		} catch (e) {} // if we cannot parse, we will not get a diag below and the the error bubble up
	}
	var diag = responseJSON && responseJSON.$diagnoses && responseJSON.$diagnoses[0];
	var link = diag && diag.$links && diag.$links.$redirect;
	if (!link) { // Response unexpected, resume original chain any maybe report error
		deferred.resolve(result);
		return;
	}
	globals.getModal().info(
		_locale.text("login.timeout.title"),
		_locale.text("login.timeout.message"),
		function() {
			// TODO: Review, but for now this cleans up everything and correctly starts again on login screen
			window.location.reload();
		});
}
});

define('syracuse-tablet/html/js/ajax/ajaxWinJS',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/winjs'],function (require, exports, module) {
/*
 * Ajax module for winJS
 */


var utils = require('syracuse-tablet/html/js/helpers/utils');
var winjs = require('syracuse-tablet/html/js/helpers/winjs');

var _ajax;

function _AjaxWinJSInterface() {};

var _ajaxWinJSInterfaceClass = utils.defineClass(
	_AjaxWinJSInterface,
	null, {
		ajax: function(method, url, send, headers, options) {
			var deferred = $.Deferred();
			method = method || "GET";

			var allHeaders = {
				"Accept": "application/json;vnd.sage=syracuse"
			};
			if (headers) {
				$.extend(allHeaders, headers);
			}

			var data = {
				"$method": method || "GET",
				"$url": url,
				"$send": send,
				"$headers": allHeaders,
				"$options": options
			};
			winjs.callWinJS("winjsAjax", "ajax", data).then(function(data) {
				// WinJS call succeeded, this does not mean ajax call succeeded!

				var respHeaders = {
					"status": data.$status,
					"location": (data.$headers && data.$headers["location"]) || ""
				};

				if (data.$succeeded) {
					deferred.resolve(data.$data, respHeaders);
				} else {
					deferred.reject(data.$status, respHeaders);
				}
			}).fail(function(error) {
				// WInJS call failed!
				deferred.reject(500, {});
			});

			return deferred.promise();
		}
	}
);

exports.AjaxInterfaceClass = _ajaxWinJSInterfaceClass;
exports.init = function(config, locale) {

};
});

define('syracuse-tablet/html/js/ajax/ajax',['require','exports','module','syracuse-tablet/html/js/helpers/winjs','syracuse-tablet/html/js/ajax/ajaxInterface','syracuse-tablet/html/js/ajax/ajaxWinJS'],function (require, exports, module) {
/*
 * Ajax module
 */


var winJS = require('syracuse-tablet/html/js/helpers/winjs');
var ajaxInterface = require('syracuse-tablet/html/js/ajax/ajaxInterface');
var ajaxWinJS = require('syracuse-tablet/html/js/ajax/ajaxWinJS');

var _ajax;

exports.getAjax = function() {
	if (!_ajax) {
		if (winJS.isAvailable()) {
			_ajax = new ajaxWinJS.AjaxInterfaceClass();
		} else {
			_ajax = new ajaxInterface.AjaxInterfaceClass();
		}
	}
	return _ajax;
};

exports.init = function(config, locale) {
	if (winJS.isAvailable()) {
		ajaxWinJS.init(config, locale);
	} else {
		ajaxInterface.init(config, locale);
	}
};
});

define('syracuse-tablet/html/js/helpers/locale',['require','exports','module','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/ajax/ajax'],function (require, exports, module) {

var globals = require('syracuse-tablet/html/js/helpers/globals');
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;

var _currentLocale = null;
var _resources = {};

var _datetimeInformationKey = "$datetimeInformation";
var _decimalInformationKey = "$decimalInformation";
var _upLocalePreferences;

var _txtRegexp = /\{([\w-]+)\}/g;
var _localeHashUser = "*";

var _userProfileSettings = {};
var _userLocales = {};

var _text = function(key, args) {
	var resources = _resources && _resources[_currentLocale];
	if (!resources) {
		return;
	}
	var text = resources[key] || "Resource key not found[" + key + "]";

	if (args) {
		text = text.replace(_txtRegexp, function(match, p1) {
			var idx = +p1;
			if (idx >= 0 && idx < args.length) {
				return args[idx];
			}
			return "?";
		});
	}

	return text;
};

var _getDatetimeInfo = function() {
	var resources = _resources && _resources[_currentLocale];
	if (!resources) {
		return;
	}
	return resources[_datetimeInformationKey];
};

var _getDecimalInfo = function() {
	var resources = _resources && _resources[_currentLocale];
	if (!resources) {
		return;
	}
	return resources[_decimalInformationKey];
};

var _setLocale = function(locale, upLocalePreferences) {
	var deferred = new $.Deferred();
	_upLocalePreferences = upLocalePreferences;

	// Everytime a locale is set, the user is remembered
	// this is because formatters created afterwards are cached
	// and need to be linked to locale + user (because of user defined locale settings)
	// See getCurrentLocaleHash()
	var ctx = globals.getUserCtx();
	_localeHashUser = ctx && ctx.$user || "*";
	_userProfileSettings = _userLocales[locale] || {};

	var resources = _resources && _resources[locale];
	if (resources) {
		_currentLocale = locale;
		deferred.resolve();
	} else if (locale === _currentLocale) {
		deferred.resolve();
	} else {
		var result = ajax("GET", "/syracuse-tablet/html/js/resources/strings-" + locale + ".json", null, null);
		_loadFile("/syracuse-tablet/html/js/resources", "strings", locale, "en")
			.then(function(data) {
				_currentLocale = locale;
				_resources[locale] = data;
			})
			.then(function() {
				return _loadFile("/syracuse-tablet/html/js/resources/locales", "date", locale, "en-GB");
			})
			.then(function(data) {
				// join strings-xx-XX and date-xx-XX
				_resources[locale][_datetimeInformationKey] = data;
			})
			.then(function() {
				return _loadFile("/syracuse-tablet/html/js/resources/locales", "decimal", locale, "en-GB");
			})
			.then(function(data) {
				// join strings-xx-XX and decimal-xx-XX
				_resources[locale][_decimalInformationKey] = data;
			})
			.then(function() {
				deferred.resolve();
			}).fail(function(e) {
				deferred.resolve();
			});
	}
	return deferred.promise();
};

var _loadFile = function(path, file, locale, defLocale) {
	var deferred = new $.Deferred();
	var segs = locale.split("-");

	function _load() {
		if (segs.length === 0) {
			// Fallback to default
			var url = path + "/" + file + "-" + defLocale + ".json";
			ajax("GET", url, null, null)
				.then(function(data) {
					if (data && data.responseJSON) {
						deferred.resolve(data.responseJSON);
					}
					deferred.resolve({});
				}).fail(function(e) {
					deferred.reject(e);
				});
		} else {
			var code = segs.join("-");
			var url = path + "/" + file + "-" + code + ".json";
			ajax("GET", url, null, null)
				.then(function(data) {
					if (data && data.responseJSON) {
						deferred.resolve(data.responseJSON);
					} else if (data.status === 404) {
						segs.pop();
						_load();
					} else {
						deferred.reject(data.textStatus + " - " + data.status);
					}
				}).fail(function(e) {
					deferred.reject(e);
				});
		}
	}
	_load();
	return deferred.promise();
};

var _isCurrent = function(locale, strict) {
	if (!locale || !_currentLocale) return false;
	if (_currentLocale === locale) return true;
	return strict ? false : (locale.split('-'))[0] === _currentLocale;
};

/*
 * TODO: Use prefered format from _upLocalePreferences if set
 */
exports.getDateFormat = function() {
	var di = _getDatetimeInfo();
	return _userProfileSettings.shortDate || (di && di.formatPatterns && di.formatPatterns.shortDate) || "dd/MM/yyyy";
};

exports.getDateTimeFormat = function() {
	var di = _getDatetimeInfo();
	var date = _userProfileSettings.shortDate || (di && di.formatPatterns && di.formatPatterns.shortDate) || "dd/MM/yyyy";
	var time = _userProfileSettings.shortTime || (di && di.formatPatterns && di.formatPatterns.shortTime) || "HH:mm:ss";
	return date + " " + time;
};
exports.getTimeFormat = function() {
	var di = _getDatetimeInfo();
	return _userProfileSettings.longTime || (di && di.formatPatterns && di.formatPatterns.longTime || "HH:mm:ss");
};
exports.getTimeFormatShort = function() {
	var di = _getDatetimeInfo();
	return _userProfileSettings.shortTime || (di && di.formatPatterns && di.formatPatterns.shortTime || "HH:mm");
};

exports.getNumberFormat = function(type) {
	return (type === "application/x-integer" ? "#,##0" : "#,##0.##");
};

exports.getNumberGroupSeparator = function() {
	var di = _getDecimalInfo();
	var gs = _userProfileSettings.numberGroupSeparator || (di && di.numberGroupSeparator) || ",";
	return gs;
};

exports.getNumberDecimalSeparator = function() {
	var di = _getDecimalInfo();
	var ds = _userProfileSettings.numberDecimalSeparator || (di && di.numberDecimalSeparator) || ".";
	return ds;
};

exports.setLocale = _setLocale;
exports.text = _text;
exports.isCurrent = _isCurrent;

// Get Month names, etc for parsers
exports.getDatetimeInfo = _getDatetimeInfo;
exports.getCurrentLocale = function() {
	return _currentLocale;
};
exports.getCurrentLocaleHash = function() {
	return _currentLocale + "#" + _localeHashUser;
};
exports.setUserLocales = function(locales) {
	_userLocales = {};
	if (locales) {
		locales.forEach(function(locale) {
			_userLocales[locale.code] = {
				shortDate: locale.shortDate,
				shortTime: locale.shortTime,
				longTime: locale.longTime,
				numberDecimalSeparator: locale.numberDecimalSeparator,
				numberGroupSeparator: locale.numberGroupSeparator
			};
		});
	}
};
});

define('syracuse-tablet/html/js/ui/modalDiagnoses',['require','exports','module','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/locale'],function (require, exports, module) {

var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _template = ' \
	<div class="modal fade" id="modal-error" tabindex="-1" role="dialog"> \
		<div class="modal-dialog s-m-modal-layout s-m-modal-diagnoses">\
			<header>\
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&#215;</button> \
			</header>\
			<section>\
				<div class="s-m-modal-content row">\
					<div class="col-md-3"></div>\
					<div class="col-md-1"> \
						<a name="prev" href="#" class="glyphicon glyphicon-chevron-left" style="padding-top: 1em; font-size:30px;"></a> \
					</div> \
					<div class="col-md-4"> \
						<header class="{{severity}}">{{title}}</header> \
						{{#each diags}} \
							<message id="s-m-msg-block-{{id}}" role="alert" style="display:{{this.display}}"> \
								<label class="label label-{{this.severity}}">{{this.severityLabel}}</label> \
								<div style="white-space: pre-line;">{{this.message}}</div> \
								{{#if stack}} \
									<a name="more" href="#">{{../../stackShow}}</a> \
									<stack name="stack" style="display: none;">{{this.stack}}</stack> \
								{{/if}} \
							</message> \
						{{/each}} \
						<footer> \
							<button type="button" class="btn btn-default pull-right" data-dismiss="modal">{{close}}</button> \
						</footer> \
					</div> \
					<div class="col-md-1"> \
						<a name="next" href="#" class="glyphicon glyphicon-chevron-right" style="padding-top: 1em; font-size:30px;"></a> \
					</div> \
					<div class="col-md-3"></div> \
				</div> \
			</section> \
		</div> \
	</div>';


exports.show = function(title, diag, cb) {

	function _next() {
		$("#s-m-msg-block-" + curMsg, $$dialog).css("display", "none");
		curMsg++;
		$("#s-m-msg-block-" + curMsg, $$dialog).css("display", "block");
		_updateButtons();
	}

	function _prev() {
		$("#s-m-msg-block-" + curMsg, $$dialog).css("display", "none");
		curMsg--;
		$("#s-m-msg-block-" + curMsg, $$dialog).css("display", "block");
		_updateButtons();
	}

	function _more() {
		var $$btn = $(this);
		var $$stack = $("[name=stack]", $$btn.parent());
		if ($$stack.css("display") === "none") {
			$$stack.css("display", "block");
			$$btn.text(locale.text("modal.diagnoses.btnstack_hide"));
		} else {
			$$stack.css("display", "none");
			$$btn.text(locale.text("modal.diagnoses.btnstack_show"));
		}
	}

	function _updateButtons() {
		if (curMsg >= id - 1) {
			$("[name=next]", $$dialog).css("display", "none");
		} else {
			$("[name=next]", $$dialog).css("display", "block");
		}
		if (curMsg <= 0) {
			$("[name=prev]", $$dialog).css("display", "none");
		} else {
			$("[name=prev]", $$dialog).css("display", "block");
		}
		// Only show x of y in case there are more than 1 diagnoses
		if (id > 1) {
			$(".s-m-modal-content header", $$dialog).text(title + " (" + (curMsg + 1) + "/" + id + ")");
		}
	}

	var modal = globals.getModal();

	var ctx = {
		close: locale.text("modal.btn.close"),
		stackShow: locale.text("modal.diagnoses.btnstack_show"),

		severity: "info",
		diags: []
	};

	var tpl = Handlebars.compile(_template);
	var id = 0;
	var curMsg = 0;
	diag.$diagnoses.forEach(function(d) {
		var sev;
		if (d.$severity === "success" || d.$severity === "info" || d.$severity === "warning") {
			sev = d.$severity;
		} else {
			sev = "danger";
			ctx.severity = "error";
		}
		ctx.diags.push({
			id: id,
			display: id === 0 ? "block" : "none",
			message: d.$message,
			severity: sev,
			severityLabel: locale.text("severity." + sev),
			stack: d.$stackTrace
		});

		id++;
	});

	title = title || (ctx.severity === "error" ? locale.text("modal.error.ttl") : locale.text("modal.info.ttl"));
	ctx.title = title;

	var html = tpl(ctx);
	var $$dialog = modal.modal(html, cb);
	_updateButtons();

	$("[name=prev]", $$dialog).click(_prev);
	$("[name=next]", $$dialog).click(_next);
	$("[name=more]", $$dialog).click(_more);

	return $$dialog;
};
});

define('syracuse-tablet/html/js/ui/modal',['require','exports','module','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/helpers/locale','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/notifications','syracuse-tablet/html/js/helpers/jsutils','syracuse-tablet/html/js/ui/modalDiagnoses'],function (require, exports, module) {

var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

// Separated module for showing diagnoses since it may be replaced depending on device/OS
var modalDiag = require('syracuse-tablet/html/js/ui/modalDiagnoses');

var _checkMsg = function(msg) {
	return msg ? msg.replace(/\n/g, "<br>") : "";
};
var _templates = {
	confirm: ' \
		<div class="modal fade" id="modal-confirm" tabindex="-1" role="dialog"> \
			<div class="modal-dialog s-m-modal-layout">\
				<header>\
					<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&#215;</button> \
				</header>\
				<section>\
					<div class="s-m-modal-content row">\
						<div class="col-md-4"></div>\
						<div class="col-md-4">\
							<header>{{title}}</header>\
							<section>{{message}}</section>\
							<footer>\
								<button type="button" class="btn btn-default" data-action="yes">{{yes}}</button> \
				                <button type="button" class="btn btn-default" data-action="no">{{no}}</button> \
							</footer>\
						</div>\
					<div class="col-md-4"></div>\
				</div>\
				</section>\
			</div> \
		</div>',
	error: ' \
		<div class="modal fade" id="modal-error" tabindex="-1" role="dialog"> \
			<div class="modal-dialog s-m-modal-layout">\
				<header>\
					<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&#215;</button> \
				</header>\
				<section>\
					<div class="s-m-modal-content row">\
						<div class="col-md-4"></div>\
						<div class="col-md-4">\
							<header class="error">{{title}}</header>\
							<section>{{body}}</section>\
							<footer><button type="button" class="btn btn-default" data-dismiss="modal">{{close}}</button></footer>\
						</div>\
						<div class="col-md-4"></div>\
					</div>\
				</section>\
			</div> \
		</div>',
	info: '\
		<div class="modal fade" id="modal-info" tabindex="-1" role="dialog"> \
		    <div class="modal-dialog s-m-modal-layout">\
		    	<header>\
		    		<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&#215;</button> \
		    	</header>\
		    	<section>\
		    		<div class="s-m-modal-content row">\
			    		<div class="col-md-4"></div>\
			    		<div class="col-md-4">\
			    			<header class="info">{{title}}</header>\
			    			<section>{{body}}</section>\
			    			<footer><button type="button" class="btn btn-default" data-dismiss="modal">{{close}}</button></footer>\
			    		</div>\
			    		<div class="col-md-4"></div>\
		    		</div>\
		    	</section>\
			</div> \
		</div>',
	field: '\
		<div class="modal fade" id="modal-field" tabindex="-1" role="dialog"> \
		    <div class="modal-dialog"> \
				<div class="modal-content"> \
				    <div class="modal-header"> \
						<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&#215;</button> \
						<h4 class="modal-title" id="myModalLabel">{{title}}</h4> \
				    </div> \
				    <div class="modal-body"> \
				       {{{body}}} \
				    </div> \
				    <div class="modal-footer"> \
				        <button type="button" class="btn btn-default" data-dismiss="modal">{{close}}</button> \
					</div> \
				</div> \
			</div> \
		</div>',
	actionMessage: '\
		<div class="s-m-act-msg {{severityClass}} {{deviceType}}">\
			<a href="#"><span class="glyphicon glyphicon-remove"></span></a>\
			<header>\
				<div>{{title}}</div>\
			</header>\
			<section>\
				<article>{{message}}</article>\
			</section>\
			<footer></footer>\
		</div>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/* First param : cb - Second msg - Third data ...*/
var _execCb = function(cb, msg, data) {
	if (!cb || arguments.length == 0) return;
	try {
		var cb = arguments[0];
		var args = Array.prototype.slice.call(arguments, 1);
		cb.apply(null, args);
	} catch (e) {
		alert("Error calling modal callback\n" + JSON.stringify(e));
	}
};

/*
 * Examples
 * 
 * error("There was an error");
 * 
 * error("There was an error", "I am the detail text");
 *
 * error("There was an error", new Error("I am an exception"));
 * 
 * error("There was an error", {
 *   $diagnoses: [{
 *	   $message: "Message 1",
 *     $severity: "error",
 *     $stackTrace: "bla"
 *	 }, {
 * 	   $message: "Message 2",
 *	   $severity: "info",
 * 	   $stackTrace: "bla"
 *   }]
 * });
 * 
 * error("There was an error", {
 *   message: "I am the message", 
 *   detail: "I am the detail message"
 * });

 * error("There was an error", {
 *   message: "I am the message", 
 *   detail: new Error("I am an exception")
 * });
 * 
 */
var _error = function(title, e, cb) {
	var diag;
	diag = jsutils.convertToDiagnoses(title, e);
	return _diagnoses(title, diag, cb);
};

/*
 * title. Title of dialog
 * diag: Object containing diagnoses
 *       {
 *           $diagnoses: [{
 *               $message: "bla...",
 *               $severity: "error", // success, info, warning, error
 *               $stackTrace: "Stacktrace as string, formatted"
 *           }, {
 *               ...
 *           }]
 *       }
 * cb: Callback
 */
var _diagnoses = function(title, diag, cb) {
	return modalDiag.show(title, diag, cb);
};

/* 
 * Wrap info text into diagnoses and display it in the generic diagnoses dialog
 */
var _info = function(title, text, cb) {
	return modalDiag.show(title, {
		$diagnoses: [{
			$severity: "info",
			$message: text
		}]
	}, cb);

};

var _confirm = function(action, cb) {
	return _modalStatic("confirm", {
		title: locale.text("modal.confirm.ttl"),
		message: _checkMsg(locale.text("modal.confirm.msg", [action])),
		yes: locale.text("yes"),
		no: locale.text("no")
	}, function(message, modal, params) {
		if (cb && (message === "yes" || message === "no")) {
			_execCb(cb, "yes" === message);
		}
	});
};

var _simpleConfirm = function(message, cb) {
	return _modalStatic("confirm", {
		message: _checkMsg(message),
		yes: locale.text("yes"),
		no: locale.text("no")
	}, function(message, modal, params) {
		if (cb && (message === "yes" || message === "no")) {
			_execCb(cb, "yes" === message);
		}
	});
};

/*
 * Open a modal window linked to a field
 */
var _field = function(title, domBody, cb) {
	return _modalStatic("field", {
		close: locale.text("modal.btn.close"),
		title: title || "Warning",
		body: domBody
	}, cb);
};

var _actionResult = function(title, obj) {
	var msg = [];
	var success = true;
	var stack = false;
	var text = "";

	obj.$diagnoses.forEach(function(diag) {
		text = (text ? text + "\n" : "") + diag.$message;
		if (["success", "info", "warning"].indexOf(diag.$severity) < 0) {
			success = false;
		}
		if (diag.$stackTrace) {
			stack = true;
		}
	});

	if (success || stack === false) {
		var isTablet = $(window).width() > 480;
		var deviceType = isTablet ? "tablet" : "phone";
		var $$actMsgSlot = $(".s-m-act-msg-slot");
		if ($$actMsgSlot.length == 0) {
			$$actMsgSlot = $("<div>").addClass("s-m-act-msg-slot").addClass(deviceType);
			(isTablet ? $("#s-m-app-id") : $("section.s-m-main-content")).prepend($$actMsgSlot);
		}

		var options = {
			title: title,
			body: text,
			severityClass: success ? "success" : "error",
			deviceType: deviceType,
			$$parentSlot: $$actMsgSlot
		};
		_actionHandler(options);
	} else {
		_diagnoses(title, obj);
	}
};

/* options properties are :
- severityClass : css class depending on severity
- deviceType : css class used in the template
- title : title text value used in the template
- text : body text value used in the template
- $$parentSlot : parent to which modal is appended, depends on device type
*/
var _actionHandler = function(options) {

	// create html
	var h = _getHtml("actionMessage", {
		title: options.title,
		message: options.body,
		severityClass: options.severityClass,
		deviceType: options.deviceType
	});

	var isClosing;
	// append to app according to device type
	var $$actionModal = $(h);
	options.$$parentSlot.prepend($$actionModal);


	// close anchor
	var $$closer = $$actionModal.find("a");

	function toggle() {
		$$actionModal.toggleClass("show");
	}

	function clear() {
		toggle();
		// set timeout in order to have css animation visible before removing DOM
		setTimeout(function() {
			$$actionModal.remove();
		}, 500);
	};

	// bind click action on closer button. triggers close action
	$$closer.bind("click", function() {
		clear();
		isClosing = true;
	});

	// display
	// setTimeout is necessary to have the display css animation working
	setTimeout(function() {
		toggle();
	}, 50);

	// toggle after 5 seconds
	var toggleTimeout = setTimeout(function() {
		if (!isClosing) {
			clear();
		}
	}, 5000);
};



/*
 * cb (message, modal, params)
 *    message: bootstrap message or clicked action (data-action)
 *    params: data-params
 */

var _modalStatic = function(id, context, cb) {
	/* Always to retry read template and display alert if not found */
	var h = _getHtml(id, context);
	return _modal(h, cb);
};


var _modal = function(html, cb) {
	// Disable wait wheel if any
	uiutils.waitWheelStop();
	var app = globals.getApplication();
	if (app && app.currentPage) {
		app.currentPage.waitWheelStop();
	}
	/* Always to retry read template and display alert if not found */
	var h = $(html).modal({
		keyboard: false,
		backdrop: "static"
	});
	var viewportHeight = $(window).height();
	$('.modal-body', h).css('max-height', viewportHeight * 0.7);

	var done = false;
	// Use <button data-dismiss"modal" for close action
	// Use <button data-action"myaction" for action other than
	// close
	/*h.on("shown.bs.modal", function() {
		try {
			_execCb(cb, "shown.bs.modal", h);
		} catch (e) {
			alert("Modal open - call back error" + e.stack);
		}
		notifications.publish("sm.modal.open");
	});*/
	h.on("hidden.bs.modal", function() {
		// Call cb only if no click action
		if (!done && cb) {
			try {
				_execCb(cb, "hidden.bs.modal", h);
			} catch (e) {
				alert("Modal close - call back error" + e.stack);
			}
		}
		// Called when dialog is close - data-dismiss = "modal"
		// or m.modal('hide')
		h.unbind();
		h.remove();
		notifications.publish("sm.modal.close");
	});
	// For dialogs with option
	h.delegate("button[data-action]", "click", function(evt) {
		var t = $(evt.target);
		var act = t.attr("data-action");
		if (act) {
			done = true;
			evt.preventDefault();
			evt.stopPropagation();
			_execCb(cb, act, h, t.attr("data-params"));
		}
		// Close modal
		h.modal('hide');
	});
	return h;
};

exports.error = _error;
exports.info = _info;
exports.diagnoses = _diagnoses;
exports.field = _field;
exports.confirm = _confirm;
exports.simpleConfirm = _simpleConfirm;
exports.modal = _modal;
exports.actionResult = _actionResult;
});

define('syracuse-tablet/html/js/init/initStyles',['require','exports','module','syracuse-tablet/html/js/helpers/globals'],function (require, exports, module) {

/*
 * Module to initialize CSS for used OS/Platform
 *
 */
var globals = require('syracuse-tablet/html/js/helpers/globals');

function _loadCss(file) {
	var ref = document.createElement("link");

	ref.setAttribute("rel", "stylesheet");
	ref.setAttribute("type", "text/css");
	ref.setAttribute("href", file);

	document.getElementsByTagName("head")[0].appendChild(ref);
}

function _getOS() {
	var mobile = (/iphone|ipad|ipod|android|blackberry|mini|windows|palm/i.exec(navigator.userAgent.toLowerCase()));
	var map = {
		iphone: "ios",
		ipad: "ios",
		ipod: "ios",
		android: "android",
		windows: "windows"
	};

	return $.smUrlParam("forceLookAndFeel") || map[mobile || "windows"] || "windows";
}

function _isReleaseVersion() {
	return (document.location.href.indexOf("index.html") > -1);
}

exports.init = function() {
	var deferred = new $.Deferred();
	var os = _getOS();
	var cssPlatform = "./css/gen/" + os + (_isReleaseVersion() ? ".min" : "") + ".css";
	_loadCss(cssPlatform);
	var cssGeneral = "./css/default.css";
	_loadCss(cssGeneral);
	deferred.resolve();
	globals.setLookAndFeel(os);

	return deferred.promise();
};
});

define('syracuse-tablet/html/js/init/initLocale',['require','exports','module','syracuse-tablet/html/js/helpers/locale'],function (require, exports, module) {

var locale = require('syracuse-tablet/html/js/helpers/locale');

exports.init = function() {
	var lang = "en_GB";
	return locale.setLocale(lang);
};
});

define('syracuse-tablet/html/js/application/appFactory',['require','exports','module','syracuse-tablet/html/js/helpers/logger','syracuse-tablet/html/js/helpers/globals'],function (require, exports, module) {

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("factory");
var globals = require('syracuse-tablet/html/js/helpers/globals');

var _ctor = {
	Application: function() {
		throw new Error("Not implemented");
	},
	DashoardPage: function() {
		throw new Error("Not implemented");
	},
	RegularPage: function() {
		throw new Error("Not implemented");
	},
	RowDetailPage: function() {
		throw new Error("Not implemented");
	},
	LookupPage: function() {
		throw new Error("Not implemented");
	},
	LoginPage: function() {
		throw new Error("Not implemented");
	},
	SettingsPage: function() {
		throw new Error("Not implemented");
	},
	AboutPage: function() {
		throw new Error("Not implemented");
	},
	DaoApp: function() {
		throw new Error("Not implemented");
	},
	DaoSdata: function() {
		throw new Error("Not implemented");
	}
};

var _createApplication = function($$elmt) {
	var res = new _ctor.Application($$elmt, exports);
	res.init();
	log && log("Application", "Create ok");
	return res;
};

var _createPage = function($parent, state, options) {
	var res = null;
	var type = state.type;
	options = options || {};
	var deferred = $.Deferred();
	try {
		if (type === "html" && state.name === "login") {
			res = new _ctor.LoginPage($parent, state, options);
		} else if (type == "html" && state.name === "settings") {
			res = new _ctor.SettingsPage($parent, state, options);
		} else if (type === "html" && state.name === "about") {
			res = new _ctor.AboutPage($parent, state, options);
		} else if (type === "dashboard") {
			globals.getApplication().dao.getDashboardInfo(state.dashboardUuid).then(function(info) {;
				res = new _ctor.DashoardPage($parent, state, info.prototype, info.article, options);
				deferred.resolve(res);
			}).fail(function(e) {
				deferred.reject(e);
			});
		} else if (type === "regular" || type === "rowdetail") {
			var parentProto = null;
			if (type === "rowdetail") {
				// Rowdetail page is registered - proto JSON and article JSON
				// Rowdetail prototype needs the parent page proto for chaining
				if (!options || !options.parentPage) throw new Error("rowdetail - unexpected null parent page");
				parentProto = options.parentPage.prototype;
			}
			globals.getApplication().dao.getRegularPageInfo(state, parentProto)
				.then(function(info) {
					if (info.prototype.isLookup()) {
						res = new _ctor.LookupPage($parent, state, info.prototype, info.article, options);
					} else if (type === "rowdetail") {
						res = new _ctor.RowDetailPage($parent, state, info.prototype, info.article, options);
					} else {
						res = new _ctor.RegularPage($parent, state, info.prototype, info.article, options);
					}
					deferred.resolve(res);
				}).fail(function(e) {
					deferred.reject(e);
				});
		} else {
			throw new Error("Unknown page type[" + type + "]");
		}
		if (res) {
			// Synchronous result
			deferred.resolve(res);
		}
		log && log("New Page", "Create ok");
	} catch (e) {
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
};

var _createDaoApp = function(appli) {
	var dao = new _ctor.DaoApp(appli);
	log && log("New DAO Application", "Create ok");
	return dao;
};

var _createDaoSdata = function(type, data, prototype, parent, options) {
	var dao;
	switch (type) {
		case "representation":
		case "process":
		case "request":
		case "statistics":
		case "dashboardpage":
		case "externallink":
			dao = new _ctor.DaoSdata(data, prototype, parent, options);
			break;
		default:
			throw new Error("Unknown DaoSdata type[" + type + "]");
			break;
	}
	log && log("New DAO View", "Create ok");
	return dao;
};

exports.setImpl = function(name, ctor) {
	_ctor[name] = ctor;
};

exports.createApplication = _createApplication;
exports.createPage = _createPage;
exports.createDaoApp = _createDaoApp;
exports.createDaoSdata = _createDaoSdata;
});

define('syracuse-tablet/html/js/sdata/sdataUtils',['require','exports','module','syracuse-tablet/html/js/helpers/utils'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');

/*
 * add complements to utils.parseURL
 * {
   	"representation": "AQTCRUDM",
	"facet": "edit",

  	// for sdataDispatcher id "sdata" or "local"
  	"dispatch": "sdata",
  	"application": "x3",
  	"contract": "erp",
  	"dataset": "SUPERV",
  	"entity": "AQTCRUD",
  	
  	// entity id
  	"id": null,
}
 */
var _rID = /^(.*)\(\'(.*)\'\)$/i;
var _parseSDataURL = function(url) {
	var res = utils.parseURL(url);
	if (res.query && res.query.representation) {
		res.representation = res.query.representation;
		res.facet = null;
		var p = res.representation.indexOf('.');
		if (p != -1) {
			res.facet = res.representation.substr(p + 1);
			if (res.facet.charAt(0) == '$') res.facet = res.facet.substr(1);
			res.representation = res.representation.substr(0, p);
		}
	}
	var a = res.directory.split('/');
	if (a.length <= 4) {
		throw new Error("Bad sdata url:" + url);
	}
	res.dispatch = a[1];
	res.application = a[2];
	res.contract = a[3];
	res.dataset = a[4];
	if (a.length === 4) return res;
	var match = _rID.exec(a[5]);
	if (match && (match.length == 3)) {
		res.entity = match[1];
		res.id = match[2];
		if (res.id && res.id.trim().Length === 0) res.id = null;
	} else {
		res.entity = a[5];
		res.id = null;
	}
	if (a.length === 5) return res;
	return res;
};

/**
 * Resolve sdataurl and return navigation info to generate the <a>/<button> link
 */
var _getLinkInfo = function(sDataUrl, dao, acceptNoRep) {
	var uu = sDataUrl;
	if (dao) { // dao is optional since a link can be a link without dataset (e.g. prev/next)
		sDataUrl = dao.parseExpression(sDataUrl);
	}
	var url = _parseSDataURL(sDataUrl);
	if (url.query.representation || acceptNoRep === true) {
		var ep = url.application + "." + url.contract + "." + url.dataset;
		return {
			page: ep + (url.query.representation ? "." + url.query.representation : ""),
			sDataUrl: sDataUrl
		};
	} else if (url.entity === "$mobileDashboards") {
		return {
			page: url.query.dashboard + ".$mobileDashboard",
			parameters: url.query.parameters
		};
	} else {
		throw new Error("getLinkInfo - Unexpected url" + sDataUrl);
	}
};
/**
 * Returns attributes for link tag
 * 	linkInfo: 	object returned by _getLinkInfo
 * 				or sdataUrl
 * dao:			mandatory if linkInfo is a sdataUrl
 */
var _getLinkAttrs = function(linkInfo, dao) {
	if (typeof linkInfo === "string") {
		// We assume that linkInfo is the url - we need dao
		linkInfo = _getLinkInfo(linkInfo, dao);
	}
	if (linkInfo.type === "navig") {
		return 'data-nav="' + linkInfo.page + '" data-sdata-url="' + encodeURIComponent(linkInfo.sDataUrl) + '"';
	} else if (linkInfo.type === "act") {
		return 'data-action="' + linkInfo.action + '" data-params="' + encodeURIComponent((linkInfo.params || "")) + '"';
	} else {
		throw new Error("_getLinkAttrs - unknonwn type\n" + linkInfo.type);
	}
};
/**
 * SCan diagnoses in a sdata response
 * TODO TEST
 */
var _clearSyracuseStack = function(d) {
	if (d.$stackTrace && d.$stackTrace.indexOf("node_modules\syracuse-x3") >= 0) {
		if (d.$message && d.$stackTrace.indexOf(d.$message) >= 0) {
			// No need of stack
			delete d.$stackTrace;
		} else {
			// Remove stack because too long
			d.$stackTrace = d.$stackTrace.split("\n")[0];
		}
	}
	return d;
};
var _scanDiagnoses = function(data) {
	var result = [];
	var done = [];
	var _scan = function(o, prop, path) {
		if (!path) path = [];
		if (done.indexOf(o) >= 0) return;
		if (Array.isArray(o)) {
			done.push(o);
			if (prop) path.push(prop);
			o.forEach(function(e, idx) {
				_scan(e, idx + "", path);
			});
			if (prop) path.pop(prop);
		} else if ($.isPlainObject(o)) {
			done.push(o);
			for (var p in o) {
				if (p === "$diagnoses") {
					o[p].forEach(function(d) {
						var $path = [].concat(path);
						if (prop) $path.push(prop);
						if (p) $path.push(p);
						d = _clearSyracuseStack($.extend({}, d));
						d.$path = $path.join('.');
						result.push(d);
					});
				} else {
					if (prop) path.push(prop);
					_scan(o[p], p, path);
					if (prop) path.pop(prop);
				}
			}
		}
	};
	if (!data) return null;
	_scan(data);
	return result;

};

var _addWhereClause = function(url, where, params) {
	params = params || {};
	var allParamsSet = true;
	where = where.value;
	var res = where.replace(/\{(\w*?)\}/g, function(m, p1) {
		var value = params[p1];
		if (value == null) {
			allParamsSet = false;
		}
		return value != null ? value : "";
	});
	if (allParamsSet) {
		url = url + "&where=" + res;
	}
	return url;
};

exports.parseSDataURL = _parseSDataURL;
exports.getLinkInfo = _getLinkInfo;
exports.getLinkAttrs = _getLinkAttrs;
exports.scanDiagnoses = _scanDiagnoses;
exports.addWhereClause = _addWhereClause;
});

define('syracuse-tablet/html/js/sdata/sdataHttp',['require','exports','module','syracuse-tablet/html/js/helpers/logger','syracuse-tablet/html/js/ajax/ajax','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/locale','syracuse-tablet/html/js/sdata/sdataUtils'],function (require, exports, module) {
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("sDataHttp");
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');

// We force no parsing
var _forceOptions = {
	noJsonParsing: true
};
/* 
 * params : {method, url, send, headers, options, login}
 * optional : send, headers, options, login = {user,password}
 * Return a promise
 * Resolve with result {status, isSuccess, responseText, jsonData, textStatus, descrHttpStatus, headers}
 * Never rejects
 * status = 600 if Java Script exception
 */

var _send = function(params) {
	var deferred = $.Deferred();
	var params = params || {};

	params.options = $.extend(params.options || {}, _forceOptions);
	params.headers = params.headers || {};
	params.headers["Accept-Language"] = locale.getCurrentLocale();

	try {
		log && log("_httpSend - Begin - Method:" + params.method + "\n\t" + params.url);

		ajax(params.method, params.url, params.send, params.headers, params.options)
			.then(function(result) {
				log && log("_httpSend - End - status=" + result.status + " - " + result.textStatus);
				// Try to parse data even if fail status - we can have a $diagnose in response
				var responseText = result.responseText ? result.responseText.trim() : "";
				if (responseText.length > 0 && ['{', '['].indexOf(responseText.charAt(0)) >= 0) {
					result.responseJSON = JSON.parse(responseText);
				} else {
					result.responseJSON = null;
				}
				deferred.resolve(result);
			}).fail(function(e) {
				deferred.reject(e);
			});
	} catch (e) {
		deferred.reject(e);
	}
	return deferred.promise();
};

exports.fetchRemotePrototype = function(id) {
	var deferred = $.Deferred();
	var self = this;
	try {
		var base = globals.baseLocation();
		var segs = id.split(".");
		var ep = segs.slice(0, 3).join("/");
		var repr = segs.slice(3, 5).join(".");
		var url = base.host + "/mobile1/" + ep + "/$prototypes('" + repr + "')";

		var headers = {
			"Accept-Language": locale.getCurrentLocale()
		};

		ajax("GET", url, null, headers)
			.then(function(data) {
				// FDB - Temporarily - if user not authenticated returns 200 with diagnoses
				var diags = sdataUtils.scanDiagnoses(data);
				if (data.isSuccess && diags.length == 0) {
					deferred.resolve(data.responseJSON);
				} else {
					var err = "Http error status[" + data.status + "] reading prototype id [" + id + "]";
					if (data.responseJSON) err += "\n" + JSON.stringify(data.responseJSON, null, 2);
					throw new Error(err);
				}
			}).fail(function(e) {
				deferred.reject(e);
			});
	} catch (e) {
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
},

exports.send = _send;
});

define('syracuse-tablet/html/js/sdata/sdataCommonResources',['require','exports','module','syracuse-tablet/html/js/sdata/sdataUtils','syracuse-tablet/html/js/sdata/sdataHttp','syracuse-tablet/html/js/ajax/ajax','syracuse-tablet/html/js/helpers/utils'],function (require, exports, module) {

var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var sdataHttp = require('syracuse-tablet/html/js/sdata/sdataHttp');
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
var utils = require('syracuse-tablet/html/js/helpers/utils');

/*
 * This file should be the only file containing direct, non generic access to server side supporting entities/services
 */
var _appListUrl = "/sdata/syracuse/collaboration/syracuse/mobileApplications/$service/availableApplications";
var _localePreferencesUrl = "/sdata/syracuse/collaboration/syracuse/localePreferences?representation=localePreference.$bulk";
var _userProfileUrl = "/sdata/syracuse/collaboration/syracuse/userProfiles/$service/current";
var _endpointListUrl = "/sdata/syracuse/collaboration/syracuse/endPoints?representation=endPoint.$bulk";
var _roleListUrl = "/sdata/syracuse/collaboration/syracuse/roles?representation=role.$bulk";

var _throwSdataError = function(title, result, url) {
	var err = title;
	err += "\nStatus: " + result.status + " - " + result.descrHttpStatus;
	if (url) err += "\n" + url;
	var diags = sdataUtils.scanDiagnoses(result.responseJSON);
	if (diags) {
		err += "\n\nDetails\n-------\n";
		diags.forEach(function(diag) {
			if (diag.$severity) {
				err += diag.$severity + ": ";
			}
			if (diag.$message) {
				err += diag.$message + "\n";
			}
			if (diag.$stackTrace) {
				err += "Stack: " + diag.$stackTrace + "\n";
			}
		});
	}
	throw new Error(err);
};

exports.queryMyApplications = function() {
	var deferred = $.Deferred();
	var params = {
		method: "GET",
		url: _appListUrl
	};
	params.parsedUrl = sdataUtils.parseSDataURL(params.url);
	sdataHttp.send(params)
		.then(function(result) {
			if (result.isSuccess && result.responseJSON) {
				var apps = result.responseJSON.$resources;
				deferred.resolve(apps);
			} else {
				_throwSdataError("Loading application list error", result, params.url);
			}
		}).fail(function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
};

exports.queryMyApplicationDetail = function(appHeader) {
	var deferred = $.Deferred();
	var params = {
		method: "GET",
		url: appHeader.$metaDataUrl
	};
	params.parsedUrl = sdataUtils.parseSDataURL(params.url);
	sdataHttp.send(params)
		.then(function(result) {
			if (result.isSuccess && result.responseJSON) {
				var app = result.responseJSON;
				deferred.resolve(app);
			} else {
				_throwSdataError("Error oading lapplication detail - Name: " + appHeader.applicationName, result, params.url);
			}
		}).fail(function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
};

exports.getUserProfile = function() {
	var deferred = $.Deferred();
	var params = {
		method: "GET",
		url: _userProfileUrl
	};
	params.parsedUrl = sdataUtils.parseSDataURL(params.url);
	sdataHttp.send(params)
		.then(function(result) {
			if (result.isSuccess && result.responseJSON) {
				var profile = result.responseJSON;
				deferred.resolve(profile);
			} else {
				_throwSdataError("Loading user profile error", result, params.url);
			}
		}).fail(function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
};

exports.queryLocalePreferences = function() {
	return _fetchAll(_localePreferencesUrl)
		.then(function(result) {
			var locales = [];
			result.forEach(function(locale) {
				locales.push({
					"$uuid": locale.$uuid,
					"code": locale.code,
					"description": locale.description
				});
			});
			return locales;
		});
};

exports.queryEndpoints = function() {
	return _fetchAll(_endpointListUrl);
};

exports.queryRoles = function() {
	return _fetchAll(_roleListUrl);
};

exports.updateUserProfile = function(changes) {

	function createWC() {
		return $.smResolve().then(function() {
			var trackingId = utils.UUID();
			var params = {
				method: "POST",
				url: "/sdata/syracuse/collaboration/syracuse/userProfiles/$template/$workingCopies?representation=userProfile.$edit&role=&trackingId=" + trackingId
			};
			params.parsedUrl = sdataUtils.parseSDataURL(params.url);
			return sdataHttp.send(params)
				.then(function(result) {
					if (result.isSuccess && result.responseJSON) {
						return $.smResolve(result.responseJSON);
					} else {
						return $.smReject();
					}
				});
		});
	}

	function updateWC(up) {
		return $.smResolve().then(function() {
			var upData = $.extend({}, up, changes);
			var params = {
				method: "PUT",
				url: up.$url,
				send: upData
			};
			params.parsedUrl = sdataUtils.parseSDataURL(params.url);
			return sdataHttp.send(params)
				.then(function(result) {
					if (result.isSuccess && result.responseJSON) {
						return $.smResolve(result.responseJSON);
					} else {
						return $.smReject();
					}
				});
		});
	}

	function deleteWC(up) {
		return $.smResolve().then(function() {
			var params = {
				method: "DELETE",
				url: up.$url
			};
			params.parsedUrl = sdataUtils.parseSDataURL(params.url);
			return sdataHttp.send(params)
				.then(function(result) {
					return $.smResolve();
				});
		});
	}

	return createWC()
		.then(function(up) {
			return updateWC(up);
		})
		.then(function(up) {
			return deleteWC(up).always(function() {
				return $.smResolve();
			});
		});
};

function _fetchAll(urlQuery) {
	var deferred = $.Deferred();
	var list = [];

	function _fetchPage(url) {
		var params = {
			method: "GET",
			url: url
		};

		params.parsedUrl = sdataUtils.parseSDataURL(params.url);
		sdataHttp.send(params)
			.then(function(result) {
				var data = result && result.responseJSON;
				data && data.$resources && data.$resources.forEach(function(i) {
					list.push(i);
				});
				if (data && data.$links && data.$links.$next && data.$links.$next.$url) {
					_fetchPage(data.$links.$next.$url);
				} else {
					deferred.resolve(list);
				}
			});
	}

	_fetchPage(urlQuery);
	return deferred.promise();
}
});

define('syracuse-tablet/html/js/helpers/base64',['require','exports','module'],function (require, exports, module) {

/**
 *
 *  Base64 encode / decode
 *  http://www.webtoolkit.info/
 *
 **/

var Base64 = exports.Base64 = {

	// private property
	_keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

	// public method for encoding
	encode: function(input) {
		var output = "";
		var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
		var i = 0;

		input = Base64._utf8_encode(input);

		while (i < input.length) {

			chr1 = input.charCodeAt(i++);
			chr2 = input.charCodeAt(i++);
			chr3 = input.charCodeAt(i++);

			enc1 = chr1 >> 2;
			enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
			enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
			enc4 = chr3 & 63;

			if (isNaN(chr2)) {
				enc3 = enc4 = 64;
			} else if (isNaN(chr3)) {
				enc4 = 64;
			}

			output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

		}

		return output;
	},

	// public method for decoding
	decode: function(input) {
		var output = "";
		var chr1, chr2, chr3;
		var enc1, enc2, enc3, enc4;
		var i = 0;

		input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

		while (i < input.length) {

			enc1 = this._keyStr.indexOf(input.charAt(i++));
			enc2 = this._keyStr.indexOf(input.charAt(i++));
			enc3 = this._keyStr.indexOf(input.charAt(i++));
			enc4 = this._keyStr.indexOf(input.charAt(i++));

			chr1 = (enc1 << 2) | (enc2 >> 4);
			chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
			chr3 = ((enc3 & 3) << 6) | enc4;

			output = output + String.fromCharCode(chr1);

			if (enc3 != 64) {
				output = output + String.fromCharCode(chr2);
			}
			if (enc4 != 64) {
				output = output + String.fromCharCode(chr3);
			}

		}

		output = Base64._utf8_decode(output);

		return output;

	},

	// private method for UTF-8 encoding
	_utf8_encode: function(string) {
		string = string.replace(/\r\n/g, "\n");
		var utftext = "";

		for (var n = 0; n < string.length; n++) {

			var c = string.charCodeAt(n);

			if (c < 128) {
				utftext += String.fromCharCode(c);
			} else if ((c > 127) && (c < 2048)) {
				utftext += String.fromCharCode((c >> 6) | 192);
				utftext += String.fromCharCode((c & 63) | 128);
			} else {
				utftext += String.fromCharCode((c >> 12) | 224);
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
				utftext += String.fromCharCode((c & 63) | 128);
			}

		}

		return utftext;
	},

	// private method for UTF-8 decoding
	_utf8_decode: function(utftext) {
		var string = "";
		var i = 0;
		var c1, c2, c3;
		var c = c1 = c2 = 0;

		while (i < utftext.length) {

			c = utftext.charCodeAt(i);

			if (c < 128) {
				string += String.fromCharCode(c);
				i++;
			} else if ((c > 191) && (c < 224)) {
				c2 = utftext.charCodeAt(i + 1);
				string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
				i += 2;
			} else {
				c2 = utftext.charCodeAt(i + 1);
				c3 = utftext.charCodeAt(i + 2);
				string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
				i += 3;
			}

		}

		return string;
	},

	// public method for decoding
	raw_decode: function(input) {
		var output = "";
		var chr1, chr2, chr3;
		var enc1, enc2, enc3, enc4;
		var i = 0;

		input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

		while (i < input.length) {

			enc1 = this._keyStr.indexOf(input.charAt(i++));
			enc2 = this._keyStr.indexOf(input.charAt(i++));
			enc3 = this._keyStr.indexOf(input.charAt(i++));
			enc4 = this._keyStr.indexOf(input.charAt(i++));

			chr1 = (enc1 << 2) | (enc2 >> 4);
			chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
			chr3 = ((enc3 & 3) << 6) | enc4;

			output = output + String.fromCharCode(chr1);

			if (enc3 != 64) {
				output = output + String.fromCharCode(chr2);
			}
			if (enc4 != 64) {
				output = output + String.fromCharCode(chr3);
			}

		}

		//		output = Base64._utf8_decode(output);

		return output;

	}
};

exports.encode = function(text) {
	return Base64.encode(text);
};
});

define('syracuse-tablet/html/js/application/authentication',['require','exports','module','syracuse-tablet/html/js/helpers/logger','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/ajax/ajax','syracuse-tablet/html/js/sdata/sdataCommonResources','syracuse-tablet/html/js/helpers/base64'],function (require, exports, module) {

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("app");
var globals = require('syracuse-tablet/html/js/helpers/globals');
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
var sdataCommonRes = require('syracuse-tablet/html/js/sdata/sdataCommonResources');
var base64 = require('syracuse-tablet/html/js/helpers/base64');

/**
 * Login services are temporarily implemented in requireJSDispatcher._js
 * - tabletCheckLogin
 * 		Return 403 if login failed because 401 forces the browser to display the authentication dialog
 * - tabletDoLogin
 *      Return user's profile if OK
 */
var _config = {
	svcLogin: "/auth/login/submit",
	svcLogout: "/logout",
	userProfile: "/sdata/syracuse/collaboration/syracuse/userProfiles/$service/current"
};

/**
 * True if user is logged in
 */
var _check = function() {
	var deferred = new $.Deferred();
	var _rejectError = function(e, t) {
		log && log(t || "Check login request rejected", e);
		deferred.reject(e);
	};
	try {
		return ajax("GET", _config.userProfile, null, null, {
			dontCatchHttp401: true
		}).then(function(result) {
			if (result.status === 200) {
				deferred.resolve({
					authenticated: true
				});
			} else {
				deferred.resolve(false);
			}
		}).fail(function(e) {
			_rejectError(e);
		});
	} catch (e) {
		_rejectError(e, "Check login request exception");
	} finally {
		return deferred.promise();
	}
};
/**
 * Resolve with success and user's profile
 */
var _login = function(user, password, lang) {
	var deferred = new $.Deferred();
	var _rejectError = function(e, t) {
		log && log(t || "Login request rejected", e);
		deferred.reject(e);
	};
	try {
		var token = 'Basic ' + base64.encode(user + ":" + password);
		return ajax("POST", _config.svcLogin, null, {
			"Authorization": token,
			"accept": "application/json"
		}).then(function(result) {
			if (result.status !== 200 && result.status !== 401) {
				deferred.resolve(false, null, "Httpstatus: " + result.status + (result.descrHttpStatus ? "[" + result.descrHttpStatus + "]" : ""));
			} else {
				try {
					var url = result.responseJSON.$diagnoses[0].$links.$redirect.$url;
					if (url === "/auth/login/page") {
						deferred.resolve(false, null, "Httpstatus: " + result.status + (result.descrHttpStatus ? "[" + result.descrHttpStatus + "]" : ""));
					} else {
						sdataCommonRes.getUserProfile().then(function(profile) {
							deferred.resolve(true, profile, "Httpstatus: " + result.status + (result.descrHttpStatus ? "[" + result.descrHttpStatus + "]" : ""));
						}).fail(function(e) {
							_rejectError(e);
						});
					}
				} catch (e) {
					_rejectError(e);
				}
			}
		}).fail(function(e) {
			_rejectError(e);
		});
	} catch (e) {
		_rejectError(e, "Do login request exception");
	} finally {
		return deferred.promise();
	}
};

/**
 * Logout
 */
var _logout = function() {
	var deferred = new $.Deferred();
	var _rejectError = function(e, t) {
		log && log(t || "Logout request rejected", e);
		deferred.reject(e);
	};
	try {
		var url = globals.baseLocation().host + _config.svcLogout;
		// temporarily - To improve
		return ajax("GET", url, {
			device: "phone"
		}).then(function(result) {
			var data;
			var msg = "";
			if (!result.isSuccess) {
				msg = "Httpstatus: " + result.status + (result.descrHttpStatus ? "[" + result.descrHttpStatus + "]" : "");
			}
			var diag = result.responseJSON ? result.responseJSON.$diagnoses : null;
			if (diag) {
				diag.forEach(function(d) {
					msg += (msg.lengthj > 0 ? "\n" : "") + d.$message;
				});
			}
			deferred.resolve(result.isSuccess, msg);
		}).fail(function(e) {
			_rejectError(e);
		});
	} catch (e) {
		_rejectError(e, "Do logout request exception");
	} finally {
		return deferred.promise();
	}
};

exports.check = _check;
exports.login = _login;
exports.logout = _logout;
});

define('syracuse-tablet/html/js/helpers/siteLayout',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/notifications'],function (require, exports, module) {

/*
 * Bootstrap min sizes per level
 * =============================
 *
 * xs:                  480px;
 * sm:                  768px;
 * md:                  992px;
 * lg:                  1200px;
 *
 */

/*
 * Some devices
 * ============
 *
 * iPad: 1024×768
 * Nexus 7: 1920 × 1200
 * Nexus 10: 2560x1600
 *
 */

/*
 * Needs to be aligned with bootstrap responsiveness!
 * Not, pixel sized defined here match values of media queries or top / left / width /height css attributes.
 * But these are not physical pixels because some devices have a pixel ration physical > logical
 *
 * See: http://bjango.com/articles/min-device-pixel-ratio/
 * We need to work with logical pixel units
 *
 * E.g. Nexus 10 has a 2560x1600 display but reports 1280x800 because ratio is 2.0
 * E.g. Nexus 5 has a 1080x1920 display but reports 360x1080 because ratio is 3.0
 *
 */

var _deviceSizes = {
	phone: {
		width: 640, // Nexus 5
		height: 360,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-xs",
			landscape: "s-m-auth-col-simulate-xs"
		}
	},
	minitablet: { // Nexus 7
		width: 960,
		height: 600,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-xs",
			landscape: "s-m-auth-col-simulate-sm"
		}
	},
	tablet: { // Nexus 10
		width: 1280,
		height: 800,
		bootstrapTweakClass: {
			portrait: "s-m-auth-col-simulate-sm",
			landscape: "s-m-auth-col-simulate-lg"
		}
	}
};

/*
 * Classes that can be put on a container to override the css media selector that use device screen sizes
 */
var _bootstrapTweakClasses = ["s-m-auth-col-simulate-xs", "s-m-auth-col-simulate-sm", "s-m-auth-col-simulate-md", "s-m-auth-col-simulate-lg"];

/*
 *
 * This module is responsibe to layout main layout components in the browser window:
 *
 * HEADER    | AUTHORING
 * CONTENT   | PANEL
 * FOOTER    |
 *
 */

var utils = require('syracuse-tablet/html/js/helpers/utils');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _currentOrientation = null;
var _layoutParameters = {
	header: {
		height: 50
	},
	footer: {
		height: 50
	},
	authPanelRight: {
		width: 300,
		splitterWidth: 20
	},
	authPanelLeft: {
		width: 300,
		splitterWidth: 20
	},
	authoringParameters: {
		device: "tablet",
		orientation: "landscape"
	}
};

/*
 * To detect orientation change in browser window compared to last call of this function
 */
function _isOrientationChange() {
	var width = $(window).width();
	var height = $(window).height();

	var ratio = width / height;
	var orientation;

	if (ratio < 1) {
		orientation = "portrait";
	} else {
		orientation = "landscape";
	}
	if (orientation == _currentOrientation) {
		return false;
	}
	_currentOrientation = orientation;
	return true;
}

/*
 * Triggered by browser window change
 */
exports.updateLayout = function(evt, opts) {
	// If browser window size change but orientation did not change, the the software keyboard has been rendered and
	// there MUST NOT be a resize to not loose focus.
	// On desktop devices, we can do the resize without any harm
	if (_isOrientationChange() || utils.isDesktop()) {
		_layoutMainContainers();
	}
};

/*
 * Triggered by application JS code
 */
exports.updateLayoutInternal = function(evt, opts) {
	if (opts && opts.layout) {
		_layoutParameters = $.extend(true, _layoutParameters, opts.layout);
	}
	_layoutMainContainers();
};

/*
 * Layout main containers like header, content, footer, authoring panel
 */
function _layoutMainContainers() {
	var width = $(window).width();
	var height = $(window).height();
	var authoringActive = false;
	var containerBgColor = "transparent";
	var containerClass = null;
	var contentBgColor = "transparent";

	var authPanelRightWidth = 0;
	var authPanelLeftWidth = 0;
	var authPanelRightSplitterWidth = 0;
	var authPanelLeftSplitterWidth = 0;

	var $$authRight = $("#s-m-auth-panel-right-id");
	var $$authLeft = $("#s-m-auth-panel-left-id");
	var $$app = $("#s-m-app-id");
	var $$appContainer = $("#s-m-app-container-id");

	if ($$authRight.css("display") == "block") {
		authoringActive = true;
		authPanelRightWidth = _layoutParameters.authPanelRight.width;
		authPanelRightSplitterWidth = _layoutParameters.authPanelRight.splitterWidth;
		_layoutAuthPanelRight(width, height);
	}
	if ($$authLeft.css("display") == "block") {
		authoringActive = true;
		authPanelLeftWidth = _layoutParameters.authPanelLeft.width;
		authPanelLeftSplitterWidth = _layoutParameters.authPanelLeft.splitterWidth;
		_layoutAuthPanelLeft(width, height);
	}

	var applicationWidth = width - authPanelRightWidth - authPanelRightSplitterWidth - authPanelLeftWidth - authPanelLeftSplitterWidth;
	var applicationHeight = height;

	var $$header = $(".s-m-page.s-m-full > header");
	var $$content = $(".s-m-page.s-m-full > section.s-m-main-content");
	var $$footer = $(".s-m-page.s-m-full > footer");


	var appView;

	if (authoringActive === true) {
		var device = _layoutParameters.authoringParameters.device || "tablet";
		var template = _deviceSizes[device] || _deviceSizes["tablet"];
		appView = {
			left: 0,
			top: 0,
			width: _layoutParameters.authoringParameters.orientation === "landscape" ? template.width : template.height,
			height: _layoutParameters.authoringParameters.orientation === "landscape" ? template.height : template.width,
		};

		containerClass = template.bootstrapTweakClass[_layoutParameters.authoringParameters.orientation];

		appView.left = (applicationWidth - appView.width) / 2;
		appView.top = (applicationHeight - appView.height) / 2;
		appView.left = appView.left > 0 ? appView.left : 0;
		appView.top = appView.top > 0 ? appView.top : 0;

		containerBgColor = "#555";
		contentBgColor = "white";
	} else {
		appView = {
			left: 0,
			top: 0,
			width: applicationWidth,
			height: applicationHeight
		};
	}

	_bootstrapTweakClasses.forEach(function(cls) {
		if (cls != containerClass) {
			$$app.removeClass(cls);
		}
	});
	if (containerClass) {
		$$app.addClass(containerClass);
	}

	// Container including header, content, footer
	$$appContainer.css({
		top: 0,
		left: authPanelLeftWidth + authPanelLeftSplitterWidth,
		width: applicationWidth,
		height: applicationHeight,
		"background-color": containerBgColor
	});


	var contentHeight = appView.height - _layoutParameters.header.height - _layoutParameters.footer.height;
	// Container including header, content, footer
	$$app.css({
		top: appView.top,
		left: appView.left,
		width: appView.width,
		height: appView.height,
		"background-color": contentBgColor
	});

	// Position header, content, footer
	$$header.css({
		top: 0,
		left: 0,
		width: appView.width,
		height: _layoutParameters.header.height
	});
	$$content.css({
		top: _layoutParameters.header.height,
		left: 0,
		width: appView.width,
		height: contentHeight,
	});
	$$footer.css({
		top: _layoutParameters.header.height + contentHeight,
		left: 0,
		width: appView.width,
		height: _layoutParameters.header.height
	});

	// Allow other components like authoring panel or page content to be resized
	notifications.publish("sm.main.layout.changed");
}

function _layoutAuthPanelRight(width, height) {
	var $$auth = $("#s-m-auth-panel-right-id");
	var $$splitter = $("#s-m-auth-splitter-right-id");
	$$auth.css({
		left: width - _layoutParameters.authPanelRight.width,
		top: 0,
		width: _layoutParameters.authPanelRight.width,
		height: height
	});
	$$splitter.css({
		left: width - _layoutParameters.authPanelRight.width - _layoutParameters.authPanelRight.splitterWidth,
		top: 0,
		width: _layoutParameters.authPanelRight.splitterWidth,
		height: height
	});
}

function _layoutAuthPanelLeft(width, height) {
	var $$auth = $("#s-m-auth-panel-left-id");
	var $$splitter = $("#s-m-auth-splitter-left-id");
	$$auth.css({
		left: 0,
		top: 0,
		width: _layoutParameters.authPanelLeft.width,
		height: height
	});
	$$splitter.css({
		left: _layoutParameters.authPanelLeft.width,
		top: 0,
		width: _layoutParameters.authPanelLeft.splitterWidth,
		height: height
	});
}
});

define('syracuse-tablet/html/js/application/eventListener',['require','exports','module','syracuse-tablet/html/js/helpers/logger','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/ui/modal','syracuse-tablet/html/js/helpers/notifications','syracuse-tablet/html/js/helpers/siteLayout'],function (require, exports, module) {

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("evts");
var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var modal = require('syracuse-tablet/html/js/ui/modal');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var siteLayout = require('syracuse-tablet/html/js/helpers/siteLayout');

/**
 * Returns id of parent array
 */
var _findParentCtrlId = function($$target, selector) {
	// Find a control array with an ID
	var p = $$target.closest(".s-m-control" + (selector || "") + "[id]");
	return p.length > 0 ? _attr(p, "id") : null;
};
/**
 * Returns attribute, decode and parse if it's a json
 */
var _attr = function($$e, name, nullIfEmpty, decode) {
	var a = ($$e.attr(name) || "").trim();
	if (decode === true) {
		a = decodeURIComponent(a);
		if (a.smStartsWith('{') && a.smEndsWith('}')) {
			// We allow serialized JSON objects in attributes
			try {
				var json = JSON.parse(a);
				return json;
			} catch (e) {
				log.console("Error reading JSON attribute " + name + "\n\t" + a);
			}
		}
	}
	return nullIfEmpty && a.length === 0 ? null : a;
};
/**
 * Parse code=abc&value=cde to
 * {
 * code: "abc",
 * value: "cde"
 * }
 */
var _parseParameters = function(params) {
	var p = params.split("&");
	var res = {};
	for (var i = 0; i < p.length; i++) {
		var v = p[i].split("=");
		res[v[0]] = v[1];
	}
	return res;
};
/**
 * Calls an action given by data-action
 * params a string or a JSON object
 * if parans is a string and contains ',' separator params is split the callBack is called with as many parameters as split elements
 */
var _doAction = function($$target, act, params, controlId) {
	var app = globals.getApplication();
	var fail = function(e) {
		var title = "_doAction[" + act + "]" + (controlId ? " CtrlId[" + controlId + "]" : "") + " error";
		log && log(title, e);
		modal.error(title, e);
	};
	try {
		if (app.currentPage == null) throw new Error("No current page");
		var method = "_act" + $.camelCase("-" + act);
		var object;
		if (!controlId) {
			// look for the first parent array if any
			// data-action in a row should invoke the method on array control
			controlId = _findParentCtrlId($$target, ".s-m-array");
		}
		if (controlId) {
			// Find control in current page and vignettes if dashboard
			object = app.currentPage.getControl(controlId);
			if (object == null && app.currentPage.getType() === "dashboard") {
				object = utils.findCtrlInDashboard($$target, controlId);
				if (object) object = object.control;
			}
			if (object == null) throw new Error("Control not found");
		} else {

			// Find if it's an action off a vignette (contains a page)
			var vignette = utils.findParentVignette($$target, false);
			if (vignette) {
				if (vignette[method]) {
					object = vignette;
				} else {
					var p = vignette.getPage();
					if (p && p[method]) object = p;
				}
			}
			// Find if it's a current page action
			if (object == null && app.currentPage[method]) object = app.currentPage;
			// Find if it's a global action
			if (object == null) object = app;
		}
		if (!object[method]) throw new Error("Method [" + method + "] not found in object/application/current page)");
		var args = [];
		if (params && typeof params === "string") {
			// Create a array of parameters ( ','  as separator
			// Remove leading/trailing spaces
			params = params.split(',');
			params.forEach(function(p, idx) {
				args.push(p.trim());
			});
		} else {
			args.push(params);
		}
		$.when(object[method].apply(object, args)).then(function(todo) {
			if (todo) {
				if (todo.page) {
					globals.getApplication().changePage(todo.page);
				}
			}
		}).fail(function(e) {
			fail(e);
		});
	} catch (e) {
		fail(e);
	}
};
/** NAVIGATION 
 * clickedElmt:	jQuery element or JSON object that provides attr() method
 * app			global application
 * $$target		$$target event for click in page
 * 				Element from which we searcg for the vignette if any
 */
var _doNavigation = function(clickedElmt, $$target) {
	var app = globals.getApplication();
	var options = {}, attr;
	// Page to open
	attr = _attr(clickedElmt, "data-sdata-url");
	if (attr.length > 0) {
		options["sdata-url"] = decodeURIComponent(attr);
	}
	attr = _attr(clickedElmt, "data-sdata-method");
	if (attr.length > 0) {
		options["sdata-method"] = decodeURIComponent(attr);
	}
	// Link type : pagination...
	attr = _attr(clickedElmt, "data-nav-type");
	if (attr.length > 0) {
		options["type"] = attr;
	}
	// Id of parent page
	attr = _attr(clickedElmt, "data-parent-id");
	if (attr.length > 0) {
		options["parentId"] = attr;
	}
	// Control that rated the link - used by refresh and action on child pages like lookup
	attr = _attr(clickedElmt, "data-control-id");
	if (attr.length > 0) {
		options["controlId"] = attr;
	}
	// Parameters are passed in page options - data navigation accepts Stringify JSON
	attr = _attr(clickedElmt, "data-params", false, true);
	// If attribute starts with { and ends with } it is parsed
	options["dataParams"] = attr || "";
	// Target - vignette -> Change/Refresh the page in the vignette - null or "application" Change/Refresh  application currentpage
	attr = _attr(clickedElmt, "data-nav-target");
	var navTarget;
	if ($$target) {
		if (attr === "vignette") {
			// data-nav-target allows to specify the target for navigation link - Ex pagination
			navTarget = utils.findParentVignette($$target, true);
		} else if (attr !== "application" && app.$config("openLinkInVignette")) {
			// Navigation in vignette - Just a  try but it works - Vignette display back/home icon in icon bar
			navTarget = utils.findParentVignette($$target, false);
		}

	}
	// default navigation is done at application level
	if (!navTarget) navTarget = app;
	// Page refresh instead of opening a new page	
	if (_attr(clickedElmt, "data-nav-refresh") === "true") {
		// options.controlId points Control to refresh if any
		navTarget.refreshPage(options);
	} else if (attr = _attr(clickedElmt, "data-application-name")) {
		notifications.publish("sm.switch.app", attr);
	} else {
		/** Open a new page**/
		var pageName = decodeURIComponent(_attr(clickedElmt, "data-nav"));
		// Gadget - Page opener
		attr = _attr(clickedElmt, "data-gadget-id");
		if (attr.length > 0) {
			options["gadget-id"] = attr;
		}

		attr = _attr(clickedElmt, "data-sdata-parameters");
		if (attr && attr.length > 0) {
			options["sdataParameters"] = _parseParameters(attr);
		}
		// history.back not allowed - TODO See how to pass options	JSON in params ?	
		attr = _attr(clickedElmt, "data-nav-noback");
		options["noHistoryBack"] = attr === "true";
		navTarget.changePage(pageName, options);
	}
	return;
};
/** 
 * Bind actions declared by data-nav or data-action/data-params attributes to an object
 *      for navigation data-nav  contains the name of the targeted page
 * 		for action method name is : _actActionName with ActionName the name of action declared in data-action attribute
 * object	: object that processes the actions
 * 				Check current page and application if method not found in object
 * 				if data-control-id attribute call control's action on current page
 * $$elmt 	: optional if object.$$elmt - element to bind event
 * selector : optional
 * 		Default selector is "[data-nav], [data-action]"
 */
var _bindActions = function(app) {
	var fail = function(e) {
		var title = "_bindActions error";
		log && log(title, e);
		modal.error(title, e);
	};
	// Action are bound to application $$elmt and dispatcched to current page or control
	var $$elmt = app.$$elmt;
	if (!$$elmt) throw new Error("_bindActions - null $$elmt");
	// Selector for not empty attribute -> [data-action][data-action!=""]
	$$elmt.delegate("[data-nav], [data-nav-refresh], [data-action], [data-params] ", "click select change", function(evt) {
		try {
			if (app.hasModalOpen()) {
				// If we have a modal in front of a page with a default button and if we press enter to close the dialog we trigger default action of the page
				// This test block the action - TODO improve
				log && log("!!! Tries to execute an action data-action with a MODAL open.\nAction is skipped");
				return;
			}
			var $$target = $(evt.target);
			evt.preventDefault();
			evt.stopPropagation();
			var $$actionElmt = $$target.closest("[data-nav], [data-nav-refresh]");
			if ($$actionElmt.length > 0) {
				_doNavigation($$actionElmt, $$target);
				return;
			}
			$$actionElmt = $$target.closest("[data-action]");
			if ($$actionElmt.length > 0) {
				/** ACTION **/
				evt.preventDefault();
				evt.stopPropagation();
				var param;
				if ($$actionElmt.is("select")) {
					param = $(this).val();
				} else {
					// data action parameters
					// if attr starts with { and ends with } it is parsed
					// if there's a ',' separator parameters are splited and become action arguments
					param = _attr($$actionElmt, "data-params", false, true);
				}
				var controlId = _attr($$actionElmt, "data-control-id", true);
				_doAction($$target, _attr($$actionElmt, "data-action"), param, controlId);
				return;
			}
		} catch (e) {
			fail(e);
		}
	});
};

/**
 * Add event handlers for controls
 * 		put a ctrl-evt- + evtName in the class attribute of the dom element you want to enable
 * 		handler will call ctrl.onEventName (onClick, onBlur...)
 */
var _bindControlEvents = function(app) {
	var fail = function(e) {
		var title = "_bindControlEvents error";
		log && log(title, e);
		modal.error(title, e);
	};
	var events = ["click", "blur", "change"];
	// Use forEach instead of for(var i =...) to preserve evtname closure context otherwise evtname has always the last value
	events.forEach(function(evtname) {
		app.$$elmt.delegate(".ctrl-evt-" + evtname, evtname, function(event) {
			event.preventDefault();
			event.stopPropagation();
			try {
				var $$target = $(event.target);
				var ctrlId;
				if ($$target.hasClass("s-m-control")) {
					ctrlId = _attr($$target, "id");
				} else {
					// We can force control-id if it's not a parent of $$target
					ctrlId = _attr($$target, "data-control-id", true);
					if (!ctrlId) {
						// We search for the first control parent with an ID
						// Controls in arrays don't have an id - So click on a card/row will return the array control
						ctrlId = _findParentCtrlId($$target);
					}
				}
				if (!app.currentPage) throw new Error("No current page");
				var ctrl = app.currentPage.getControl(ctrlId);
				if (!ctrl && app.currentPage.getType() === "dashboard") {
					ctrl = utils.findCtrlInDashboard($$target, ctrlId);
					if (ctrl) ctrl = ctrl.control;
				}
				if (!ctrl) throw new Error("Control not found - ctrlid[" + ctrlId + "] in currentpage or vignettes");
				var method = "on" + evtname.smCapitalize();
				if (!ctrl[method]) {
					log && log("!!! Method[" + method + "] not found - ctrlid[" + ctrlId + "]");
					return;
				}
				ctrl[method](event);
			} catch (e) {
				fail(e);
			}
			return;
		});
	});
};

/**
 * Application event listener
 */

var _bindEvents = function(app) {

	$(window).bind("popstate", function(event) {
		var state = event.originalEvent.state;
		// We've to check state to not call historyPop on click on href="#"
		if (state) app.historyPop(event);
	});

	// Bind action/navigation call to click/select/change 
	_bindActions(app);

	// Bind control events
	_bindControlEvents(app);

	// triggered by browser window size or orientation change
	$(window).on("resize", siteLayout.updateLayout);
	// triggered by application JS code
	$(window).on("resizeInternal", siteLayout.updateLayoutInternal);
};
/**
 * Trigger an action
 * 		$$elmt: JQL element - $$elmt of a control or page by example
 */
var _triggerAction = function($$elmt, act, params, controlId) {
	if (!$$elmt) return;
	_doAction($$elmt, act, params, controlId);
};
/**
 * Triggers a navigation (open link) according to attributes params
 * $$elmt			JQ element to search for parent vignette  if any
 * attributes		SAme attributes as $$element
 */
var _triggerNavigation = function($$elmt, attributes) {
	// Simulate a Jquery object that provides attr() method
	var attrs = function(jsonAttrs) {
		var _jsonAttrs = jsonAttrs;
		this.attr = function(name) {
			return _jsonAttrs[name];
		};
	};
	_doNavigation(new attrs(attributes), $$elmt);
};

exports.bindEvents = _bindEvents;
exports.triggerAction = _triggerAction;
exports.triggerNavigation = _triggerNavigation;
});

define('syracuse-tablet/html/js/application/gadget',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/globals'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');

var _Gadget = utils.defineClass(function(jsonData) {
	var self = this;
	self._data = jsonData;
}, null, {

	destroy: function() {
		var self = this;
		self._data = null;
	},

	isRequest: function() {
		return this._data.$type === "$request";
	},

	data: function(prop) {
		return this._data ? this._data[prop] : null;
	},

	getEndPoint: function() {
		// Default endpoint if not specified
		return this._data.endpoint || globals.getEndpoint();
	},

	isDefaultEndpoint: function() {
		return !this._data.endpoint;
	},

	getPageName: function() {
		var self = this;
		if (!self.isValid()) return null;
		var rep = self.isRequest() ? self.getRequestRepresentation() : self._data.representation;
		return self.getEndPoint() + "." + rep + "." + self._data.facet;
	},

	getSDataUrl: function(proto) {
		var self = this;
		var url;
		switch (self._data.$type) {
			case "$representation":
				if (["$details", "$edit"].indexOf(self._data.action) > -1) {
					url = proto.data("$url", {
						$key: self._data.keyParameter
					});
				} else if (["$create"].indexOf(self._data.action) > -1) {
					url = proto.data("$url");
					url = url.replace(/\((.*?)\)/, "/$template");
				} else {
					url = proto.data("$url");
				}
				break;
			case "$request":
				url = proto.data("$baseUrl");
				url = url + "/QUERY('" + self._data.requestName + "')?representation=" + self.getRequestRepresentation() + ".$query";
				break;
		}
		return url;
	},
	getRequestRepresentation: function() {
		return "QUERY~" + this._data.requestName + "~" + this._data.requestLevel;
	},
	getJSON: function() {
		return $.extend(true, {}, this._data);
	},
	isValid: function() {
		// to complete
		return this.getInvalidReason() == null;
	},
	getInvalidReason: function() {
		var t = this._data.$type;
		if (t === "$representation" || t === "$stats" || t === "$request") {
			// When we import mobile apps we could have such error
			// tablet client displays a user friendly message
			// to complete
			if (this._data.$uuid.smStartsWith("test")) return null;
			return (this.getEndPoint() || "").trim().length == 0 ? "No endpoint" : null;
		}
		// TODO
		return null;
	},
	getParameters: function() {
		return this._data.parameters || {};
	}
});

exports.Klass = _Gadget;
});

define('syracuse-tablet/html/js/application/pageLoader',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/logger','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/ui/modal','syracuse-tablet/html/js/application/gadget','syracuse-tablet/html/js/helpers/notifications'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("pageLoader");
var globals = require('syracuse-tablet/html/js/helpers/globals');
var modal = require('syracuse-tablet/html/js/ui/modal');
var Gadget = require('syracuse-tablet/html/js/application/gadget').Klass;
var notifications = require('syracuse-tablet/html/js/helpers/notifications');


/**
 * Load a page in a container
 * 	container must provide the following interface
 * 	Use by application and vignette - code factorization
 * 	callerInterface - see CALLER INTERFACE below
 */
var _PageLoader = utils.defineClass(
	function(callerInterface) {
		this.callerInterface = callerInterface;
		this.factory = globals.getApplication().factory;
	}, null, {

		destroy: function() {
			this.callerInterface = null;
			this.factory = null;
		},

		load: function(state, back) {
			var deferred = $.Deferred();
			var self = this;
			var _fail = function(e) {
				self.waitStop();
				self.loadingError(deferred, state, e);
			};
			var _success = function(pageToOpen, parentNotifInfo) {
				self.waitStop();
				if (back !== true && (state.options == null || state.options.noHistoryBack !== true)) {
					// Store page in history - noHistoryBack option is used by example for pagination actions
					self.historyPush(pageToOpen.state);
				}
				self.succeeded(pageToOpen, parentNotifInfo);
				deferred.resolve(pageToOpen);
			};
			try {
				if (state === null || typeof state != "object") throw new Error("Bad state object");
				log && log("_gotoPage", "start", "page: " + state.uuid);
				var pageToClose = self.getCurrentPage();
				if (pageToClose && pageToClose.getProp("uuid") === state.uuid) {
					log && log("\tPage is current -> Skip");
					return;
				}
				var parentNotifInfo = null;
				var childNotifInfo = null;
				if (pageToClose && pageToClose.isChild) {
					/**
					 * If the current page is a child and wants to notify the parent (ex lookup...) it should provide at least
					 * a JSONobject that contains a notifyId with the id of notification
					 * We need to store this data before the page it's destroyed
					 * Information is passed to parent in succeeded interface method (at the end of the process)
					 */
					parentNotifInfo = pageToClose.getParentNotif();
				}
				self.waitStart();
				var pageToOpen = $("#" + state.uuid).smPageController();
				// Page found -> Direct access -> Activate and remove childs
				if (pageToOpen != null) {
					log && log("\tPage found in dom -> Activate");
					if (!pageToOpen) throw new Error("Unexpected null page data");
					// Page retrieve from cache
					pageToOpen.isNew = false;
					self._pageActivate(pageToOpen, function() {
						// After activation to keep current page for transition
						// No siblings expected
						pageToOpen.destroySiblings();
						_success(pageToOpen, parentNotifInfo);
					}, back);
					return deferred.promise();
				}
				// Page not found -> Create and display
				var options = {};
				if (state.type === "rowdetail") {
					options.parentPage = pageToClose;
				}
				self.factory.createPage(self.getRootElmt(), state, options)
					.then(function(p) {
						pageToOpen = p;
						// Page created
						pageToOpen.isNew = true;
						return pageToOpen.load(options);
					})
					.then(function() {
						self._pageActivate(pageToOpen, function() {
							_success(pageToOpen, parentNotifInfo);
						}, back);
					}).fail(function(e) {
						_fail(e);
					});
			} catch (e) {
				_fail(e);
			}
			return deferred.promise();
		},

		_pageActivate: function(pageToOpen, cb, back) {
			var self = this;
			var pageToClose = self.getCurrentPage();
			// Destroy=true if the pageToClose has to be destroyed
			// We destroy the page if back or if pageToClose is not cached or if pageToOpen is a not child
			var destroy = pageToClose && (back === true || (pageToClose.getProp("cached") !== true && pageToOpen.isChild !== true));
			if (destroy && back !== true) {
				// Save context - Like pages is destroyed we need to save a context in current page to retrieve if on back navigation
				// Context object containt the context f current page and context of parent page for chaining
				pageToOpen.contextSave(pageToClose);
			}
			var savedContext = null;
			if (pageToOpen.isNew) {
				// We restore the context only if pageToOpen has been destroyed and re-created
				if (!back && pageToOpen.isVignette && pageToClose == null) {
					// Restore the context of a page nested in a vignette after it has been loaded (only - pageToClose == null)
					// Ex: 	when we open a detail form a vignette we need to store the status (scroll, selection...) of the vignette to restore it on back
					savedContext = self.savedCtxVignette();
				} else if (back) {
					// Back in full page or vignette page - we restore context
					savedContext = pageToClose ? pageToClose.savedContext : null;
				}
			}
			pageToOpen.activate(pageToClose, savedContext, function() {
				self.setCurrentPage(pageToClose, pageToOpen, destroy);
				if (cb) cb();
			});
		},

		/**
		 * CALLER INTERFACE BEGIN
		 */

		/* Methods MUST be implemented */
		historyPush: function(state) {
			this.callerInterface.historyPush(state);
		},

		waitStop: function() {
			this.callerInterface.waitStop();
		},

		waitStart: function() {
			this.callerInterface.waitStart();
		},

		getRootElmt: function() {
			return this.callerInterface.getRootElmt();
		},

		getCurrentPage: function() {
			return this.callerInterface.getCurrentPage();
		},
		savedCtxVignette: function() {
			var meth = this.callerInterface.savedCtxVignette;
			return meth ? meth() : null;
		},
		setCurrentPage: function(pageToClose, pageToOpen, destroy) {
			var self = this;
			if (pageToClose) {
				if (destroy === true) {
					pageToClose.destroy();
				} else {
					// Keep cached page only if not back - Ex: List -> Detail
					pageToClose.deactivate();
				}
			}
			self.callerInterface.setCurrentPage(pageToOpen);
		},
		/* Methods CAN be overridden */
		loadingError: function(deferred, state, e) {
			if (this.callerInterface.loadingError) {
				this.callerInterface.loadingError(deferred, state, e);
			} else {
				modal.error("Loading page [" + state.name + "] error", e, function() {
					deferred.reject(e);
				});
			}
		},
		succeeded: function(pageToOpen, parentNotifInfo) {
			var self = this;
			notifications.publish("sm.page.loaded", self.getCurrentPage());
			if (this.callerInterface.succeeded) {
				this.callerInterface.succeeded(pageToOpen, parentNotifInfo);
			}
		}
		/**
		 * CALLER INTERFACE END
		 */
	});

/**
 * window.history accepts only json object (no class/prototype based object)
 * We have to serialize/deserialize object contained by state
 */
var _stateSerialize = function(state) {
	if (!state || !state.options || !state.options.gadget) return state;
	// Object that represents the gadget data
	state.options.gadget = state.options.gadget.getJSON();
	return state;
};
var _stateDeserialize = function(state) {
	if (!state || !state.options || !state.options.gadget) return state;
	state.options.gadget = new Gadget(state.options.gadget);
	return state;
};

exports.stateSerialize = _stateSerialize;
exports.stateDeserialize = _stateDeserialize;
exports.Klass = _PageLoader;
});

define('syracuse-tablet/html/js/ui/modalSelectContext',['require','exports','module','syracuse-tablet/html/js/ui/modal','syracuse-tablet/html/js/helpers/locale'],function (require, exports, module) {

var modal = require('syracuse-tablet/html/js/ui/modal');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _template = '\
	<div class="modal fade" id="modal-endpoint" tabindex="-1" role="dialog"> \
    <div class="modal-dialog"> \
		<div class="modal-content"> \
		    <div class="modal-header"> \
				<h4 class="modal-title" id="myModalLabel">{{title}}</h4> \
		    </div> \
		    <div class="modal-body"> \
				<div class="form-group"> \
					<label>{{label_endpoints}}</label>\
					<select class="form-control" id="login-select-endpoint"> \
					{{#each endpoints}}\
						<option value="{{this.application}}.{{this.contract}}.{{this.dataset}}" {{#if this.selected}}selected{{/if}}>\
						{{this.description}}\
						</option>\
					{{/each}}\
					</select>\
				</div> \
			<div class="form-group"> \
				<label>{{label_roles}}</label>\
				<select class="form-control" id="login-select-role"> \
				{{#each roles}}\
					<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
					{{this.description}}\
					</option>\
				{{/each}}\
				</select>\
			</div> \
			<div class="form-group"> \
				<label>{{label_languages}}</label>\
				<select class="form-control" id="login-select-language"> \
				{{#each languages}}\
					<option value="{{this.code}}" {{#if this.selected}}selected{{/if}}>\
					{{this.description}}\
					</option>\
				{{/each}}\
				</select>\
			</div> \
			{{#if label_warning}}\
			<div class="alert alert-warning" role="alert">\
				{{label_warning}}\
			</div>\
			{{/if}}\
		    </div> \
		    <div class="modal-footer"> \
				<button type="button" class="btn pull-left" data-action="logout">{{label_logout}}</button> \
		        <button type="button" class="btn" data-action="validate">{{label_ok}}</button> \
    			<button type="button" class="btn btn-default" data-action="cancel">{{label_cancel}}</button> \
			</div> \
		</div> \
	</div> \
	</div>';

/**
 * force = true
 * 		Force display of  modal is an endpoint is still available in local storage
 */
var _selectContext = function(context, endpoints, roles, languages, warn) {
	var deferred = $.Deferred();
	try {
		try {
			var modalHtml = Handlebars.compile(_template);
			var ctx = {
				title: locale.text("modal.context.title"),
				label_endpoints: locale.text("modal.context.endpoints"),
				endpoints: endpoints,
				label_roles: locale.text("modal.context.roles"),
				roles: roles,
				label_languages: locale.text("modal.context.languages"),
				languages: languages,
				label_logout: locale.text("modal.context.logout"),
				label_ok: locale.text("modal.context.ok"),
				label_cancel: locale.text("modal.context.cancel"),
				label_warning: warn && locale.text("modal.context.warning"),
			};
			if (context) {
				endpoints.forEach(function(ep) {
					if (ep.application + "." + ep.contract + "." + ep.dataset === context.endpoint) {
						ep.selected = true;
					} else {
						ep.selected = false;
					}
				});
				roles.forEach(function(role) {
					if (role.code === context.role) {
						role.selected = true;
					} else {
						role.selected = false;
					}
				});
				languages.forEach(function(lang) {
					if (lang.code === context.language) {
						lang.selected = true;
					} else {
						lang.selected = false;
					}
				});
			}
			modalHtml = modalHtml(ctx);
			modal.modal(modalHtml, function(msg, dialg) {
				var endpoint = dialg.find("#login-select-endpoint").val();
				var role = dialg.find("#login-select-role").val();
				var language = dialg.find("#login-select-language").val();
				if (msg === "validate") {
					deferred.resolve({
						action: "ok",
						endpoint: endpoint,
						role: role,
						language: language
					});
				} else if (msg === "cancel") {
					deferred.resolve({
						action: "cancel",
						endpoint: endpoint,
						role: role,
						language: language
					});
				} else if (msg === "logout") {
					deferred.resolve({
						action: "logout",
					});
				}
			});
		} catch (e) {
			deferred.reject(e);
		}
	} catch (e) {
		deferred.reject(e);
	} finally {
		return deferred.promise();
	}
};

exports.selectContext = _selectContext;
});

define('syracuse-tablet/html/js/storage/localStorage',['require','exports','module','syracuse-tablet/html/js/helpers/logger'],function (require, exports, module) {

/**
 * Local storage
 * Uses only window local storage
 */

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("sessstorage");

var _available = null;

var _isAvailable = function() {
	if (_available !== null) {
		return _available;
	}
	_available = false;
	try {
		window.localStorage.setItem("__test_availability__", "__test_availability__");
		_available = true;
	} catch (e) {}
	return _available;
};

var _getItem = function(key, removeAfter) {
	if (!_isAvailable()) {
		log && log("local.unsupported.getItem(" + key + "):" + val);
		return;
	}
	var val = window.localStorage.getItem(key);
	log && log("local.getItem(" + key + "):" + val);
	if (true === removeAfter) {
		_removeItem(key);
	}
	return val;
};

var _setItem = function(key, value) {
	if (!_isAvailable()) {
		log && log("local.unsupported.setItem(" + key + "):" + value);
		return;
	}
	log && log("local.setItem(" + key + "):" + value);
	return window.localStorage.setItem(key, value);
};

var _removeItem = function(key) {
	if (!_isAvailable()) {
		log && log("local.unspported.removeItem(" + key + ")");
		return;
	}
	log && log("local.removeItem(" + key + ")");
	return window.localStorage.removeItem(key);
};

exports.removeItem = _removeItem;
exports.setItem = _setItem;
exports.getItem = _getItem;
});

define('syracuse-tablet/html/js/storage/storageInterface',['require','exports','module','syracuse-tablet/html/js/helpers/utils'],function (require, exports, module) {

/*
 * Default interface for mobile application metadata, favorites, drafts and templates, ...
 */


var utils = require('syracuse-tablet/html/js/helpers/utils');

var _statusCodes = {
	OK: 1,
	NOT_FOUND: 2,
	ERROR: 3
};


function _StorageInterface() {
	this.infoString = "Interface only";
};

/*
 * All storage interfaces must inherit the "Not implemented" methods of this super class
 */
var storageInterfaceClass = utils.defineClass(
	_StorageInterface,
	null, {
		getInfo: function() {
			return this.infoString;
		},

		/**
		 * Init storage
		 *
		 * Return:
		 * Resolve:
		 * {
		 *   $status: StatusCodes.OK,
		 *   $data: { }
		 * }
		 *
		 * Reject:
		 * {
		 *   $status: StatusCodes.ERROR,
		 *   $message: "Error message",
		 *   $exception: { ... }
		 * }
		 *
		 */
		init: function() {
			throw new Error("Not implemented!");
		},

		/**
		 * Query a list of items
		 *
		 * Parameters:
		 * opts: {
		 *   $context: {
		 *     $user,
		 *     $role,
		 *     $lang
		 *   },
		 *   $endpoint,
		 *   $collection: "users.$query",
		 *   $orderBy: "name, email" // optional
		 * }
		 *
		 * Return:
		 * Resolve:
		 * {
		 *   $status: StatusCodes.OK,
		 *   $data: [record1, record2, ...]
		 * }
		 *
		 * Reject:
		 * {
		 *   $status: StatusCodes.ERROR,
		 *   $message: "Error message",
		 *   $exception: { ... }
		 * }
		 *
		 */
		query: function(opts) {
			throw new Error("Not implemented!");
		},

		/**
		 * Does a create or update if record is there already
		 *
		 * Parameters:
		 * opts: {
		 *   $context: {
		 *     $user,
		 *     $role,
		 *     $lang
		 *   },
		     $endpoint,
		 *   $collection: "users.$query",
		 *   $data: {},
		 *   $key: "abc~def"
		 * }
		 *
		 * Return:
		 * Resolve:
		 * {
		 *   $status: StatusCodes.OK,
		 *   $data: { }
		 * }
		 *
		 * Reject:
		 * {
		 *   $status: StatusCodes.ERROR,
		 *   $message: "Error message",
		 *   $exception: { ... }
		 * }
		 *
		 */
		put: function(opts) {
			throw new Error("Not implemented!");
		},

		/**
		 * Reads exactly one record by it's key
		 *
		 * Parameters:
		 * opts: {
		 *   $context: {
		 *     $user,
		 *     $role,
		 *     $lang
		 *   },
		     $endpoint,
		 *   $collection: "users.$query",
		 *   $key: "abc~def"
		 * }
		 *
		 * Return:
		 * Resolve:
		 * {
		 *   $status: StatusCodes.OK or StatusCodes.NOT_FOUND
		 *   $data: { }
		 * }
		 *
		 * Reject:
		 * {
		 *   $status: StatusCodes.ERROR,
		 *   $message: "Error message",
		 *   $exception: { ... }
		 * }
		 *
		 */
		read: function(opts) {
			throw new Error("Not implemented!");
		},

		/**
		 * Delete exactly one record by it's key
		 *
		 * Parameters:
		 * opts: {
		 *   $context: {
		 *     $user,
		 *     $role,
		 *     $lang
		 *   },
		     $endpoint,
		 *   $collection: "users.$query",
		 *   $key: "abc~def"
		 * }
		 *
		 * Return:
		 * Resolve:
		 * {
		 *   $status: StatusCodes.OK or StatusCodes.NOT_FOUND
		 * }
		 *
		 * Reject:
		 * {
		 *   $status: StatusCodes.ERROR,
		 *   $message: "Error message",
		 *   $exception: { ... }
		 * }
		 *
		 */
		remove: function(opts) {
			throw new Error("Not implemented!");
		},

		/**
		 * Delete exactly one record by it's key
		 *
		 * Parameters:
		 * opts: {
		 *   $context: {
		 *     $user,
		 *     $role,
		 *     $lang
		 *   },
		     $endpoint,
		 *   $collection: "users.$query", // string or regex
		 * }
		 *
		 * Return:
		 * Resolve:
		 * {
		 *   $status: StatusCodes.OK
		 * }
		 *
		 * Reject:
		 * {
		 *   $status: StatusCodes.ERROR,
		 *   $message: "Error message",
		 *   $exception: { ... }
		 * }
		 *
		 */
		clearCollection: function() {
			throw new Error("Not implemented!");
		}
	}
);

function buildResult(status, data, message, exception, metaData) {

	var res = {
		$status: status
	};

	if (data) res.$data = data;
	if (metaData) res.$metaData = metaData;
	if (message) res.$message = message;
	if (exception) res.$exception = exception;

	return res;
}

function buildErrResult(message, exception) {
	return buildResult(_statusCodes.ERROR, null, message, exception);
}
exports.StorageInterface = storageInterfaceClass;
exports.StatusCodes = _statusCodes;

exports.buildResult = buildResult;
exports.buildErrResult = buildErrResult;

// Same db name for all kind of database - !!must be different from mobile application name
exports.databaseName = "sage-tablet-db";
});

define('syracuse-tablet/html/js/storage/storageWinJS',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/storage/storageInterface','syracuse-tablet/html/js/helpers/winjs'],function (require, exports, module) {

/*
 * WinJS storage interface (Webview control running in Windows Store Application)
 */

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var storageInterface = require('syracuse-tablet/html/js/storage/storageInterface');
var winjs = require('syracuse-tablet/html/js/helpers/winjs');

function _StorageInterfaceWinJS() {
	this.infoString = "WinJS storage interface";
};

/*
 *
 * Proxy class to route all call to winJS container
 *
 */
var _storageInterfaceWinJSClass = utils.defineClass(
	_StorageInterfaceWinJS,
	storageInterface.StorageInterface, {
		init: function() {
			var useTestDatabase = globals.isTestEnvironment();
			return winjs.callWinJS("winjsDB", "init", {
				useTestDatabase: useTestDatabase
			});
		},

		queryAppConfigs: function() {
			return winjs.callWinJS("winjsDB", "queryAppConfigs", {});
		},

		createAppConfig: function(data) {
			return winjs.callWinJS("winjsDB", "createAppConfig", {
				app: data
			});
		},

		readAppConfig: function(appid) {
			return winjs.callWinJS("winjsDB", "readAppConfig", {
				appid: appid
			});
		},

		deleteAppConfig: function(appid) {
			return winjs.callWinJS("winjsDB", "deleteAppConfig", {
				appid: appid
			});
		}
	}
);

exports.StorageInterface = _storageInterfaceWinJSClass;
exports.isAvailable = function() {
	return winjs.isAvailable();

};
});

define('syracuse-tablet/html/js/storage/storageWebSQL',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/storage/storageInterface','syracuse-tablet/html/js/helpers/logger'],function (require, exports, module) {

/*
 * WebSQL storage interface (Chrome, Safari)
 */

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var storageInterface = require('syracuse-tablet/html/js/storage/storageInterface');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("webSQL");

//Increase this number to upgrade database to schema described in _objectStores
var _databaseVersion = 16;

var _tables = [
	// meta data table for handling etags, ttl, size, ..
	"DROP TABLE IF EXISTS sdata_meta",
	"CREATE TABLE sdata_meta ( " +
	"key text, " +
	"collection text, " +
	"endpoint text, " +
	"context text, " +
	"id text, " +
	"etag text, " +
	"last_read text, " +
	"last_updated text" +
	")",
	"DROP INDEX IF EXISTS sdata_meta_pk",
	"CREATE UNIQUE INDEX sdata_meta_pk ON sdata_meta (key, collection, endpoint, context)",
	"DROP INDEX IF EXISTS sdata_meta_id",
	"CREATE UNIQUE INDEX sdata_meta_id ON sdata_meta (id)",
	// data table
	"DROP TABLE IF EXISTS sdata_objects",
	"CREATE TABLE sdata_objects ( " +
	"id text, " +
	"data text " +
	")",
	"DROP INDEX IF EXISTS sdata_objects_pk",
	"CREATE UNIQUE INDEX sdata_objects_pk ON sdata_objects (id)"
];

function _StorageInterfaceWebSQL() {
	this.infoString = "WebSQL storage interface";
	this.databaseVersion = _databaseVersion;
	this.databaseName = storageInterface.databaseName;
	this.useTestDatabase = false;
	this.databaseSize = 2 * 1024 * 1024;
	this.db = null;
};

var _storageInterfaceWebSQLClass = utils.defineClass(
	_StorageInterfaceWebSQL,
	storageInterface.StorageInterface, {
		init: function() {
			var deferred = $.Deferred();
			var self = this;
			var useTestDatabase = globals.isTestEnvironment();
			self.databaseName = storageInterface.databaseName + "-test";
			self.useTestDatabase = useTestDatabase;
			try {
				self._openDB().then(function(status) {
					deferred.resolve(status);
				}).fail(function(status) {
					deferred.reject(status);
				});
			} catch (e) {
				deferred.reject(storageInterface.buildErrResult("error initializing database", e));
			} finally {
				return deferred.promise();
			}
		},
		put: function(opts) {
			var deferred = $.Deferred();
			var self = this;
			try {
				var db = self.db;
				log && log("PUT: ", JSON.stringify(opts));

				if (!opts.$key || !opts.$collection || !opts.$endpoint || !opts.$context)
					throw new Error("Insufficient parameters");

				var context = JSON.stringify(opts.$context);
				var params = [opts.$key, opts.$collection, opts.$endpoint, context];

				var insertData = function(metaData) {
					self._executeSql("INSERT INTO sdata_objects (data, id) values (?, ?)", [JSON.stringify(opts.$data), metaData.$id])
						.then(function() {
							deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.OK, opts.$data));
						}).fail(function(status) {
							deferred.reject(status);
						});
				};

				var updateData = function(metaData) {
					self._executeSql("UPDATE sdata_objects set data = ? where id = ?", [JSON.stringify(opts.$data), metaData.$id])
						.then(function(result) {
							deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.OK, opts.$data));
						}).fail(function(status) {
							deferred.reject(status);
						});
				};

				// handle meta data
				self._readMetaData(context, params)
					.then(function(metaData) {
						if (metaData && metaData.$etag === opts.$data.$etag) {
							// record has not changed
							deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.OK, opts.$data));
						} else if (metaData) {
							// update
							metaData.$etag = opts.$data.$etag;
							metaData.$lastUpdated = utils.getCurISODateTime();
							self._writeMetaData(metaData)
								.then(function() {
									updateData(metaData);
								}).fail(function(status) {
									deferred.reject(status);
								});
						} else {
							// insert
							metaData = {
								$key: opts.$key,
								$collection: opts.$collection,
								$endpoint: opts.$endpoint,
								$context: opts.$context,
								$etag: opts.$data.$etag,
								$lastUpdated: utils.getCurISODateTime()
							};
							self._writeMetaData(metaData)
								.then(function(metaData) {
									insertData(metaData);
								}).fail(function(status) {
									deferred.reject(status);
								});
						}
					}).fail(function(status) {
						deferred.reject(status);
					});
			} catch (e) {
				deferred.reject(storageInterface.buildErrResult("error writing to database", e));
			} finally {
				return deferred.promise();
			}
		},

		read: function(opts) {
			var deferred = $.Deferred();
			var self = this;
			try {
				var db = self.db;
				log && log("READ: ", JSON.stringify(opts));

				if (!opts.$key || !opts.$collection || !opts.$endpoint || !opts.$context)
					throw new Error("Insufficient parameters");

				var context = JSON.stringify(opts.$context);
				var params = [opts.$key, opts.$collection, opts.$endpoint, context];

				self._readMetaData(context, params)
					.then(function(metaData) {
						if (!metaData) {
							deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.NOT_FOUND));
						} else {
							self._executeSql("SELECT * FROM sdata_objects where id = ?", [metaData.$id])
								.then(function(result) {
									try {
										if (result.rows.length <= 0) {
											deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.NOT_FOUND));
										} else {
											deferred.resolve(storageInterface.buildResult(
												storageInterface.StatusCodes.OK,
												JSON.parse(result.rows.item(0).data),
												null,
												null, {
													$lastRead: metaData.$lastRead,
													$lastUpdated: metaData.$lastUpdated
												}));
										}
									} catch (e) {
										deferred.reject(storageInterface.buildErrResult("error reading from database", e));
									}
								}).fail(function(status) {
									deferred.reject(status);
								});
						}
					}).fail(function(status) {
						deferred.reject(status);
					});
			} catch (e) {
				deferred.reject(storageInterface.buildErrResult("error reading from database", e));
			} finally {
				return deferred.promise();
			}
		},

		query: function(opts) {
			var deferred = $.Deferred();
			var self = this;
			try {
				var db = self.db;
				log && log("QUERY: ", JSON.stringify(opts));

				if (!opts.$collection || !opts.$endpoint || !opts.$context)
					throw new Error("Insufficient parameters");

				var context = JSON.stringify(opts.$context);
				var params = [opts.$collection, opts.$endpoint, context];

				self._executeSql("SELECT o.*, m.last_read, m.last_updated FROM sdata_objects o INNER JOIN sdata_meta m ON (o.id = m.id and m.collection = ? and m.endpoint = ? and m.context = ?)", params)
					.then(function(result) {
						var ret = [];
						var meta = [];
						try {
							for (var i = 0; i < result.rows.length; i++) {
								var item = result.rows.item(i);
								ret.push(JSON.parse(item.data));
								meta.push({
									$lastRead: item.last_read,
									$lastUpdated: item.last_updated
								});
							}
						} catch (e) {
							deferred.reject(storageInterface.buildErrResult("error reading from database", e));
							return;
						}
						// Exception are handled by our jq deferred hack
						deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.OK, ret, null, null, meta));
					}).fail(function(status) {
						deferred.reject(status);
					});
			} catch (e) {
				deferred.reject(storageInterface.buildErrResult("error reading from database", e));
			} finally {
				return deferred.promise();
			}
		},

		remove: function(opts) {
			var deferred = $.Deferred();
			var self = this;
			try {
				var db = self.db;
				log && log("REMOVE: ", JSON.stringify(opts));

				if (!opts.$key || !opts.$collection || !opts.$endpoint || !opts.$context)
					throw new Error("Insufficient parameters");

				var context = JSON.stringify(opts.$context);
				var params = [opts.$key, opts.$collection, opts.$endpoint, context];
				self._removeMetaData(context, params)
					.then(function(metaData) {
						if (!metaData) {
							deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.NOT_FOUND));
						} else {
							self._executeSql("DELETE FROM sdata_objects where id = ?", [metaData.$id])
								.then(function() {
									deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.OK));
								}).fail(function(status) {
									deferred.reject(status);
								});
						}
					}).fail(function(status) {
						deferred.reject(status);
					});
			} catch (e) {
				deferred.reject(storageInterface.buildErrResult("error writing to database", e));
			} finally {
				return deferred.promise();
			}
		},
		clearCollection: function(opts) {
			var deferred = $.Deferred();
			var self = this;
			try {
				var db = self.db;
				log && log("CLEAR: ", JSON.stringify(opts));

				if (!opts.$collection || !opts.$context)
					throw new Error("Insufficient parameters");

				var context = JSON.stringify(opts.$context);
				var params = [context];

				self._executeSql("SELECT * FROM sdata_meta where context = ?", params)
					.then(function(result) {
						var ret = [];
						try {
							for (var i = 0; i < result.rows.length; i++) {
								var item = result.rows.item(i);
								if (opts.$collection.test(item.collection)) {
									ret.push({
										$context: opts.$context,
										$collection: item.collection,
										$endpoint: item.endpoint,
										$key: item.key
									});
								}
							}
							ret.forEachPromise(function(item) {
								return self.remove(item);
							}).then(function() {
								deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.OK));
							}).fail(function(e) {
								deferred.reject(e);
							});
						} catch (e) {
							deferred.reject(storageInterface.buildErrResult("error reading from database", e));
						}
					}).fail(function(status) {
						deferred.reject(status);
					});
			} catch (e) {
				deferred.reject(storageInterface.buildErrResult("error reading from database", e));
			} finally {
				return deferred.promise();
			}
		},

		_readMetaData: function(context, params, noUpdate) {
			var deferred = $.Deferred();
			var self = this;
			try {
				var db = self.db;
				self._executeSql("SELECT * FROM sdata_meta where key = ? and collection = ? and endpoint = ? and context = ?", params)
					.then(function(result) {
						try {
							if (result.rows.length <= 0) {
								deferred.resolve(null);
							} else {
								var item = result.rows.item(0);
								var metaData = {
									$key: item.key,
									$collection: item.collection,
									$endpoint: item.endpoint,
									$context: item.context,
									$id: item.id,
									$etag: item.etag,
									$lastRead: item.last_read,
									$lastUpdated: item.last_updated
								};
								if (noUpdate === true) {
									deferred.resolve(metaData);
								} else {
									self._writeMetaData(metaData)
										.then(function() {
											// allways resolve and ignore errors
											deferred.resolve(metaData);
										}).fail(function(e) {
											deferred.reject(storageInterface.buildErrResult("error reading from database", e));
										});
								}
							}
						} catch (e) {
							deferred.reject(storageInterface.buildErrResult("error reading from database", e));
						}
					}).fail(function(status) {
						deferred.reject(status);
					});
			} catch (e) {
				deferred.reject(storageInterface.buildErrResult("error reading from database", e));
			} finally {
				return deferred.promise();
			}
		},

		_writeMetaData: function(metaData) {
			var deferred = $.Deferred();
			var self = this;
			try {
				var db = self.db;
				metaData.$lastRead = utils.getCurISODateTime();
				if (!metaData.$id) {
					metaData.$id = utils.UUID();

					self._executeSql("INSERT INTO sdata_meta (key, collection, endpoint, context, id, etag, last_read, last_updated) values (?, ?, ?, ?, ?, ?, ?, ?)", [
						metaData.$key,
						metaData.$collection,
						metaData.$endpoint,
						JSON.stringify(metaData.$context),
						metaData.$id,
						metaData.$etag,
						metaData.$lastRead,
						metaData.$lastUpdated
					])
						.then(function() {
							deferred.resolve(metaData);
						}).fail(function(status) {
							deferred.reject(status);
						});
				} else {
					self._executeSql("UPDATE sdata_meta set etag = ?, last_read = ?, last_updated = ? where id = ?", [metaData.$etag, metaData.$lastRead, metaData.$lastUpdated, metaData.$id])
						.then(function(result) {
							deferred.resolve(metaData);
						}).fail(function(status) {
							deferred.reject(status);
						});
				}
			} catch (e) {
				deferred.reject(storageInterface.buildErrResult("error writing meta data", e));
			} finally {
				return deferred.promise();
			}
		},

		_removeMetaData: function(context, params) {
			var deferred = $.Deferred();
			var self = this;
			try {
				self._readMetaData(context, params, true)
					.then(function(metaData) {
						if (!metaData) {
							deferred.resolve(null);
						} else {
							self._executeSql("DELETE FROM sdata_meta where id = ?", [metaData.$id])
								.then(function() {
									deferred.resolve(metaData);
								}).fail(function(status) {
									deferred.reject(status);
								});
						}
					}).fail(function(status) {
						deferred.reject(status);
					});
			} catch (e) {
				deferred.reject(storageInterface.buildErrResult("error reading from database", e));
			} finally {
				return deferred.promise();
			}
		},
		_executeSql: function(sql, params) {
			var deferred = $.Deferred();
			var self = this;
			try {
				self.db.transaction(function(tx) {
					try {
						log && log("SQL: " + sql);
						log && log(params);
						tx.executeSql(sql, params, function(tx, result) {
							deferred.resolve(result);
						}, function(tx, error) {
							deferred.reject(storageInterface.buildErrResult("error initializing database: " + _errorToMessage(tx, error)));
						});
					} catch (e) {
						deferred.reject(storageInterface.buildErrResult("error running SQL statement", e));
					}
				});
			} catch (e) {
				deferred.reject(storageInterface.buildErrResult("error running SQL statement", e));
			}
			return deferred.promise();
		},

		/*
		 *
		 * Database migration functions
		 *
		 */
		_openDB: function() {
			var deferred = $.Deferred();
			var self = this;
			if (self.useTestDatabase === false && self.db) {
				deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.OK));
			}
			var request;
			try {
				log && log("Open database, request version: " + self.databaseVersion);
				self.db = openDatabase(self.databaseName, 7, 'Database', self.databaseSize);
				self._readCurrentVersion().then(function(version) {
					log && log("Current version: " + version);
					// In test framework create DB every time
					if (version === self.databaseVersion && self.useTestDatabase !== true) {
						deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.OK));
					} else {
						self._createTables().then(function(status) {
							return self._writeCurrentVersion();
						}).then(function(status) {
							deferred.resolve(status);
						}).fail(function(status) {
							deferred.reject(status);
						});
					}
				}).fail(function(status) {
					deferred.reject(status);
				});

			} catch (e) {
				log && log("Open database, exception", e);
				self.db = null;
				deferred.reject(storageInterface.buildErrResult("error initializing database", e));
			}

			return deferred.promise();
		},
		_readCurrentVersion: function() {
			var deferred = $.Deferred();
			var self = this;
			self._executeSql('SELECT version FROM version', null).then(function(result) {
				try {
					var len = result.rows.length;
					if (len === 1) {
						var version = result.rows.item(0).version;
						log && log("Read version: " + version);
						deferred.resolve(+version);
					}
					deferred.resolve(-1);
				} catch (e) {
					deferred.reject(storageInterface.buildErrResult("error reading database version", e));
				}
			}).fail(function(status) {
				// Asume table does not exist, create it
				log && log("Creating version table");
				self._executeSql('CREATE TABLE version (version TEXT)').then(function(status) {
					deferred.resolve(-1);
				}).fail(function(status) {
					globals.getModal().error("Error Creating version table", status, function() {
						deferred.reject(status);
					});
				});
			});
			return deferred.promise();
		},
		_writeCurrentVersion: function() {
			var deferred = $.Deferred();
			var self = this;
			self._executeSql('DELETE FROM version', null)
				.then(function(result) {
					return self._executeSql('INSERT INTO version (version) values (?)', [_databaseVersion]);
				})
				.then(function(status) {
					deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.OK));
				}).fail(function(status) {
					deferred.reject(status);
				});
			return deferred.promise();
		},
		_createTables: function() {
			var deferred = $.Deferred();
			var self = this;
			var p = [];
			for (var i = 0; i < _tables.length; i++) {
				p.push(self._executeSql(_tables[i]));
			}
			$.when.apply($, p).then(function() {
				deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.OK));
			}).fail(function(status) {
				deferred.reject(status);
			});
			return deferred.promise();
		}
	}
);

function _errorToMessage(tx, error) {
	return "CODE: " + error.code + " MESSAGE: " + error.message;
}
exports.StorageInterface = _storageInterfaceWebSQLClass;
exports.isAvailable = function() {
	return (window.openDatabase != null);
};
});

define('syracuse-tablet/html/js/storage/storageIndexedDB',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/storage/storageInterface','syracuse-tablet/html/js/helpers/logger'],function (require, exports, module) {

/*
 * IndexDB storage interface (Internet Explorer, Firefox)
 */

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var storageInterface = require('syracuse-tablet/html/js/storage/storageInterface');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("indexedDB");

var _indexedDB = window.indexedDB || window.webkitIndexedDB;
var IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction;
var IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange;
var IDBDatabaseException = window.IDBDatabaseException || window.webkitIDBDatabaseException;

var READ_ONLY = (IDBTransaction && IDBTransaction.READ_ONLY) || "readonly";
var READ_WRITE = (IDBTransaction && IDBTransaction.READ_WRITE) || "readwrite";


// Increase this number to upgrade database to schema described in _objectStores
var _databaseVersion = 11;

var _objectStores = {
	"sdata": {
		"options": {
			"autoIncrement": true
		},
		"indexes": {
			"read_write_one": {
				"key": "key_collection_endpoint_context",
				"options": {
					"unique": true
				}
			},
			"read_write_all": {
				"key": "collection_endpoint_context",
				"options": {
					"unique": false
				}
			},
			"read_write_ctx": {
				"key": "context",
				"options": {
					"unique": false
				}
			}
		}
	}
};

function _StorageInterfaceIndexedDB() {
	this.infoString = "IndexedDB storage interface";
	this.databaseVersion = _databaseVersion;
	this.databaseName = storageInterface.databaseName;
	this.useTestDatabase = false;
	this.db = null;
};

var _storageInterfaceIndexedDBClass = utils.defineClass(
	_StorageInterfaceIndexedDB,
	storageInterface.StorageInterface, {

		init: function(requester) {
			requester = requester || "";
			log && log("_INIT " + requester);
			var deferred = $.Deferred();
			var self = this;
			var useTestDatabase = globals.isTestEnvironment();
			try {
				var _doInit = function() {
					log && log("DATABASE INIT!");
					self._openDB().then(function(status) {
						log && log("_openDB OK " + requester);
						deferred.resolve(status);
					}).fail(function(status) {
						log && log("_openDB KO " + requester);
						deferred.resolve(status);
					});
				};
				if (useTestDatabase === true) {
					if (self.db) {
						self.db.close();
						self.db = null;
					}
					self.useTestDatabase = true;
					self.databaseName = storageInterface.databaseName + "-test";
					log && log("DATABASE IN TEST MODE! " + requester);
					var req = _indexedDB.deleteDatabase(self.databaseName);
					req.onsuccess = function() {
						_doInit();
					};
					req.onerror = function(e) {
						log && log("REQUEST ERROR! " + requester);
						deferred.reject(storageInterface.buildErrResult("error deleting database"));
					};
					req.onblocked = function(e) {
						log && log("REQUEST BLOCKED! " + requester);
						deferred.reject(storageInterface.buildErrResult("error deleting database (blocked)"));
					};
				} else if (!self.db) {
					_doInit();
				}
			} catch (e) {
				log && log("init ERROR " + requester);
				deferred.reject(storageInterface.buildErrResult("error initializing database", e));
			} finally {
				return deferred.promise();
			}
		},

		put: function(opts) {
			var deferred = $.Deferred();
			var self = this;
			try {
				var db = self.db;
				log && log("PUT: ", JSON.stringify(opts));
				if (!opts.$key || !opts.$collection || !opts.$endpoint || !opts.$context)
					throw new Error("Insufficient parameters");

				var tx = db.transaction(["sdata"], READ_WRITE);
				var objectStore = tx.objectStore("sdata");
				var context = JSON.stringify(opts.$context);

				var key = [opts.$key, opts.$collection, opts.$endpoint, context].join("_");

				var index = objectStore.index("read_write_one");
				var keyRange = IDBKeyRange.only(key);
				var request = index.openCursor(keyRange);
				var mustInsert = true;
				var datetime = utils.getCurISODateTime();
				var doInsert = function() {
					var obj = {
						"context": context,
						"collection": opts.$collection,
						"endpoint": opts.$endpoint,
						"key": opts.$key,
						"last_updated": datetime,
						"last_read": datetime,
						"key_collection_endpoint_context": key,
						"collection_endpoint_context": [opts.$collection, opts.$endpoint, context].join("_"),
						"data": opts.$data,
					};

					var reqt = objectStore.add(obj);
					reqt.onerror = function(event) {
						deferred.reject(storageInterface.buildErrResult("error writing to database: " + _eventToMessage(event)));
					};
					reqt.onsuccess = function(event) {
						deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.OK, opts.$data));
					};
				};
				request.onsuccess = function(event) {
					try {
						var cr = event.target.result;
						if (cr) {
							if (opts.$data.$etag) {
								var etag = cr.value && cr.value.data.$etag;
								if (etag === opts.$data.$etag) {
									deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.OK, opts.$data));
									return;
								}
							}
							cr["delete"]();
							cr["continue"]();
						} else {
							doInsert();
						}
					} catch (e) {
						deferred.reject(storageInterface.buildErrResult("error writing to database", e));
					}
				};
				request.onerror = function(event) {
					if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
						doInsert();
					} else {
						deferred.reject(storageInterface.buildErrResult("error writing to database: " + _eventToMessage(event)));
					}
				};
			} catch (e) {
				deferred.reject(storageInterface.buildErrResult("error writing to database", e));
			} finally {
				return deferred.promise();
			}
		},

		read: function(opts) {
			var deferred = $.Deferred();
			var self = this;
			try {
				var db = self.db;
				log && log("READ: ", JSON.stringify(opts));
				if (!opts.$key || !opts.$collection || !opts.$endpoint || !opts.$context)
					throw new Error("Insufficient parameters");
				var tx = db.transaction(["sdata"], READ_WRITE);
				var objectStore = tx.objectStore("sdata");
				var context = JSON.stringify(opts.$context);
				var key = [opts.$key, opts.$collection, opts.$endpoint, context].join("_");

				var index = objectStore.index("read_write_one");
				var keyRange = IDBKeyRange.only(key);
				var request = index.openCursor(keyRange);

				request.onsuccess = function(event) {
					try {
						var cr = event.target && event.target.result && event.target.result.value;
						if (!cr) {
							deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.NOT_FOUND));
						} else {
							deferred.resolve(storageInterface.buildResult(
								storageInterface.StatusCodes.OK,
								cr.data,
								null,
								null, {
									$lastRead: cr.last_read,
									$lastUpdated: cr.last_updated
								}));
						}
					} catch (e) {
						deferred.reject(storageInterface.buildErrResult("error reading from database", e));
					}
				};
				request.onerror = function(event) {
					if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
						// Resolve since it's a logical issue and not neccessarily an error
						deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.NOT_FOUND));
					} else {
						deferred.reject(storageInterface.buildErrResult("error reading from database: " + _eventToMessage(event)));
					}
				};
			} catch (e) {
				deferred.reject(storageInterface.buildErrResult("error reading from database", e));
			} finally {
				return deferred.promise();
			}
		},

		query: function(opts) {
			var deferred = $.Deferred();
			var self = this;
			try {
				var db = self.db;
				log && log("QUERY: ", JSON.stringify(opts));
				if (!opts.$collection || !opts.$endpoint || !opts.$context)
					throw new Error("Insufficient parameters");

				var tx = db.transaction(["sdata"], READ_WRITE);
				var objectStore = tx.objectStore("sdata");
				var context = JSON.stringify(opts.$context);

				var key = [opts.$collection, opts.$endpoint, context].join("_");

				var index = objectStore.index("read_write_all");
				var keyRange = IDBKeyRange.only(key);
				var request = index.openCursor(keyRange);
				var results = [];
				var meta = [];

				request.onsuccess = function(event) {
					try {
						var cr = event.target.result;
						if (cr) {
							var data = cr.value.data;
							results.push(data);
							meta.push({
								$lastRead: cr.last_read,
								$lastUpdated: cr.last_updated
							});
							cr["continue"]();
						} else {
							deferred.resolve(storageInterface.buildResult(
								storageInterface.StatusCodes.OK,
								results,
								null,
								null,
								meta));
						}
					} catch (e) {
						deferred.reject(storageInterface.buildErrResult("error reading from database", e));
					}
				};
				request.onerror = function(event) {
					if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
						// Resolve since it's a logical issue and not neccessarily an error
						deferred.resolve(storageInterface.buildResult(
							storageInterface.StatusCodes.OK,
							results,
							null,
							null,
							meta));
					} else {
						deferred.reject(storageInterface.buildErrResult("error reading from database: " + _eventToMessage(event)));
					}
				};
			} catch (e) {
				deferred.reject(storageInterface.buildErrResult("error reading from database", e));
			} finally {
				return deferred.promise();
			}
		},

		remove: function(opts) {
			var deferred = $.Deferred();
			var self = this;
			try {
				var db = self.db;
				log && log("REMOVE: ", JSON.stringify(opts));
				if (!opts.$key || !opts.$collection || !opts.$endpoint || !opts.$context)
					throw new Error("Insufficient parameters");

				var tx = db.transaction(["sdata"], READ_WRITE);
				var objectStore = tx.objectStore("sdata");
				var context = JSON.stringify(opts.$context);

				var key = [opts.$key, opts.$collection, opts.$endpoint, context].join("_");

				var index = objectStore.index("read_write_one");
				var keyRange = IDBKeyRange.only(key);
				var request = index.openCursor(keyRange);

				request.onsuccess = function(event) {
					try {
						var cr = event.target.result;
						if (cr) {
							cr["delete"]();
							deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.OK));
						} else {
							deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.NOT_FOUND));
						}
					} catch (e) {
						deferred.reject(storageInterface.buildErrResult("error deleting from database", e));
					}
				};
				request.onerror = function(event) {
					if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
						// Resolve since it's a logical issue and not neccessarily an error
						deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.NOT_FOUND));
					} else {
						deferred.reject(storageInterface.buildErrResult("error reading from database: " + _eventToMessage(event)));
					}
				};
			} catch (e) {
				deferred.reject(storageInterface.buildErrResult("error deleting from database", e));
			} finally {
				return deferred.promise();
			}
		},

		clearCollection: function(opts) {
			var deferred = $.Deferred();
			var self = this;
			try {
				var db = self.db;
				log && log("CLEAR: ", JSON.stringify(opts));
				var tx = db.transaction(["sdata"], READ_WRITE);
				var objectStore = tx.objectStore("sdata");
				var context = JSON.stringify(opts.$context);

				var key = context;

				var index = objectStore.index("read_write_ctx");
				var keyRange = IDBKeyRange.only(key);
				var request = index.openCursor(keyRange);
				var records = [];

				var deleteMatches = function() {
					records.forEachPromise(function(rec) {
						return self.remove({
							$context: opts.$context,
							$collection: rec.collection,
							$endpoint: rec.endpoint,
							$key: rec.key
						});
					}).then(function() {
						deferred.resolve();
					}).fail(function(e) {
						deferred.reject(e);
					});
				};
				request.onsuccess = function(event) {
					try {
						var cr = event.target.result;
						if (cr) {
							if (opts.$collection.test(cr.value.collection)) {
								records.push(cr.value);
							}
							cr["continue"]();
						} else {
							deleteMatches();
						}
					} catch (e) {
						deferred.reject(storageInterface.buildErrResult("error reading from database", e));
					}
				};
				request.onerror = function(event) {
					if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
						deleteMatches();
					} else {
						deferred.reject(storageInterface.buildErrResult("error reading from database: " + _eventToMessage(event)));
					}
				};
			} catch (e) {
				deferred.reject(storageInterface.buildErrResult("error reading from database", e));
			} finally {
				return deferred.promise();
			}
		},

		_openDB: function() {
			var deferred = $.Deferred();
			var self = this;
			if (self.useTestDatabase === false && self.db) {
				deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.OK));
			}

			var request;
			try {
				log && log("Open database, request version: " + self.databaseVersion);
				request = _indexedDB.open(self.databaseName, self.databaseVersion);
				request.onupgradeneeded = function(e) {
					log && log("Open database, need upgrade");
					self.db = (e.target.result || e.target.source);
					self._createObjectStore();
				};
				request.onsuccess = function(e) {
					log && log("Open database, success");
					var db = (e.target.result || e.target.source);
					if (!db.setVersion && (self.databaseVersion != db.version)) {
						log && log("Open database, versions missmatch: " + self.DatabaseVersion + " != " + db.version);
						var sdv = db.setVersion(self.databaseVersion);
						sdv.onsuccess = function(e) {
							log && log("Open database, setting version, success");
							self.db = db;
							self._createObjectStore();
							log && log("Open database, opened");
							deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.OK));
						};
						sdv.onerror = function(e) {
							log && log("Open database, setting version, error", e);
							self.db = null;
							deferred.reject(storageInterface.buildErrResult("error initializing database: " + _eventToMessage(e)));
						};
					} else {
						log && log("Open database, opened");
						self.db = db;
						deferred.resolve(storageInterface.buildResult(storageInterface.StatusCodes.OK));
					}
				};
				request.onerror = function(e) {
					log && log("Open database, error", e);
					self.db = null;
					deferred.reject(storageInterface.buildErrResult("error initializing database: " + _eventToMessage(e)));
				};
			} catch (ex) {
				log && log("Open database, exception", ex);
				self.db = null;
				deferred.reject(storageInterface.buildErrResult("error initializing database", ex));
			}

			return deferred.promise();
		},

		// Create schema of database on version change
		_createObjectStore: function() {
			var self = this;
			var db = self.db;
			log && log("Updating database");
			Object.keys(_objectStores).forEach(function(name) {
				var os = _objectStores[name];
				if (db.objectStoreNames.contains(name)) {
					log && log("Deleting objectStore: " + name);
					db.deleteObjectStore(name);
				}

				log && log("Creating objectStore: " + name);
				var obj = db.createObjectStore(name, os.options);
				Object.keys(os.indexes).forEach(function(iname) {
					var idx = os.indexes[iname];
					log && log("Creating index: " + iname);
					obj.createIndex(iname, idx.key, idx.options);
				});
			});
		}
	}
);

function _eventToMessage(event) {
	return JSON.stringify(event);
}

exports.StorageInterface = _storageInterfaceIndexedDBClass;
exports.isAvailable = function() {
	return (_indexedDB != null);
};
});

define('syracuse-tablet/html/js/storage/storage',['require','exports','module','syracuse-tablet/html/js/storage/storageInterface','syracuse-tablet/html/js/storage/storageWinJS','syracuse-tablet/html/js/storage/storageWebSQL','syracuse-tablet/html/js/storage/storageIndexedDB'],function (require, exports, module) {

/*
 * Storage module (Selects implementation depending on what's available in the current browser
 */

var storageInterface = require('syracuse-tablet/html/js/storage/storageInterface');

var _impls = [
	require('syracuse-tablet/html/js/storage/storageWinJS'),
	require('syracuse-tablet/html/js/storage/storageWebSQL'),
	require('syracuse-tablet/html/js/storage/storageIndexedDB')
];

var _storageImpl;

// Choose the first supported storage engine
function _getStorageImpl() {
	if (_storageImpl) {
		return _storageImpl;
	}

	_impls.some(function(impl) {
		if (impl.isAvailable()) {
			var ctor = impl.StorageInterface;
			_storageImpl = new ctor();
			return true;
		}
		return false;
	});

	return _storageImpl;
}

exports.getStorage = _getStorageImpl;
exports.StatusCodes = storageInterface.StatusCodes;
});

define('syracuse-tablet/html/js/sdata/entities/clientContract',['require','exports','module'],function (require, exports, module) {

var _apps = {};
var _entities = {};

var _propertiesToCopy = [
	// ui related
	"$title",
	"$isExcluded",
	"$isHidden",
	"$isMandatory",
	"$isReadOnly",
	"$isDisabled",

	// for formats
	"$format",
	"$x3Format",

	// for quantity and ref fields
	"$unit",
	"$value",
	"$shortTitle",
	"$capabilities",
	"$item",

	// constraints according to https://github.com/Sage-ERP-X3/platform/wiki/Resource-Prototypes
	"$minimum",
	"$maximum",
	"$exclusiveMinimum",
	"$exclusiveMaximum",
	"$minItems",
	"$maxItems",
	"$isNullable",
	"$isUnique",
	"$pattern",
	"$minLength",
	"$maxLength",
	"$precision",
	"$scale",
	"$enum"
];

exports.getApps = function() {
	var apps = [];
	Object.keys(_apps).forEach(function(key) {
		var app = _apps[key];
		apps.push(app.$application);
	});
	return apps;
};

exports.getAppDetail = function(applicationName) {
	// clone the data because they can be modified by application (add new pages)
	// When we go to home page we need to have original meta
	return $.extend(true, {}, _apps[applicationName]);

};

exports.registerApp = function(app) {
	_apps[app.$application.applicationName] = app;
};

exports.registerEntity = function(entity) {
	_entities[entity.$entityName] = entity;
};

exports.getEntity = function(entity) {
	return _entities[entity];
};


exports.getPageInfo = function(name, options) {
	var repr = name.split(".");
	if (repr.length === 5) {
		repr = repr.slice(3, 5);
	}
	if (repr[0].smStartsWith("QUERY~")) {
		var p = repr[0].split("~");
		repr[0] = p[1];
	}
	var ent = _entities[repr[0]];
	if (!ent) {
		return null;
	}
	var state = {
		home: false,
		type: "regular",
		subtype: repr[1] ? repr[1].substring(1) : "unknown",
		cached: false,
		refreshed: false,
		changeHash: false
	};
	state.name = name;
	return state;

};

exports.getRegularPageInfo = function(pageId) {
	var repr = pageId.split(".");
	if (repr.length === 5) {
		repr = repr.slice(3, 5);
	}

	if (repr[0].smStartsWith("QUERY~")) {
		var p = repr[0].split("~");
		repr[0] = p[1];
	}

	var ent = _entities[repr[0]];
	var pageInfo;
	if (ent) {
		pageInfo = _buildPageInfo(repr[0], repr[1], ent);
	}
	return $.smResolve(pageInfo);
};

function _buildPageInfo(repr, facet, entity) {
	var page = {
		$page: {},
		$cache: {}
	};
	_buildPage(repr, facet, entity, page.$page);
	return page;
}

function _buildPage(repr, facet, entity, page) {
	if (facet === "$query" || facet === "$lookup") {
		page.$prototype = {
			$properties: {
				$resources: {
					$type: "application/x-array",
					$item: _buildPrototype(repr, facet)
				}
			}
		};
		page.$prototype.$url = "{$baseUrl}/" + repr + "?representation=" + repr + "." + facet;
		page.$prototype.$properties.$resources.$item.$key = "{$uuid}";
		page.$prototype.$properties.$resources.$item.$value = entity.$value;
		page.$prototype.$properties.$resources.$item.$links = {
			$details: {
				$url: "{$baseUrl}/" + repr + "('{$key}')?representation=" + repr + ".$details",
				$title: "Details"
			},
			$edit: {
				$url: "{$baseUrl}/" + repr + "('{$key}')?representation=" + repr + ".$edit",
				$title: "Edit"
			}
		};
		page.$prototype.$links = {
			$create: {
				$url: "{$baseUrl}/" + repr + "('{$key}')?representation=" + repr + ".$create",
				$title: "Create New"
			}
		};
		page.$prototype.$key = "{$uuid}";
	} else {

		page.$prototype = _buildPrototype(repr, facet);
		page.$prototype.$url = "{$baseUrl}/" + repr + "('{$key}')?representation=" + repr + "." + facet;
		page.$prototype.$key = "{$uuid}";
		page.$prototype.$links = {};

		// links to set in a json variable
		var links = {
			$edit: {
				$url: "{$baseUrl}/" + repr + "('{$key}')?representation=" + repr + ".$edit",
				$title: "Edit"
			},
			$query: {
				$url: "{$baseUrl}/" + repr + "?representation=" + repr + ".$query",
				$title: "List"
			},
			$save: {
				$url: "{$baseUrl}/" + repr + "('{$key}')?representation=" + repr + ".$save",
				$title: "Save"
			},
			$details: {
				$url: "{$baseUrl}/" + repr + "('{$key}')?representation=" + repr + ".$details",
				$title: "Detail"
			}
		};

		// add links according to facet (remainting facets are '$details', '$edit', '$create')
		switch (facet) {
			case "$create":
				page.$prototype.$links["$save"] = links["$save"];
				page.$prototype.$links["$query"] = links["$query"];
				break;
			case "$details":
				page.$prototype.$links["$edit"] = links["$edit"];
				page.$prototype.$links["$query"] = links["$query"];
				break;
			case "$edit":
				page.$prototype.$links["$save"] = links["$save"];
				page.$prototype.$links["$details"] = links["$details"];
				page.$prototype.$links["$query"] = links["$query"];
				break;
			default:
				throw new Error(facet ? "facet " + facet + " not handled yet" : "No facet specified");
		}
	}
	var $article = entity.$articles && entity.$articles[facet];
	if ($article) {
		page.$article = $article;
	}
	// not used at all but needs to be set since it's syntactically checked later
	page.$prototype.$baseUrl = "http://localhost:8124/mobile1/x3/erp/local";

	if (entity.$prototype) {
		entity.$prototype(page.$prototype, repr, facet);
	}
}

function _buildPrototype(repr, facet) {
	var entity = _entities[repr];
	var proto = {
		$properties: {}
	};
	Object.keys(entity.$properties).forEach(function(key) {
		var prop = entity.$properties[key];
		var $type = prop.$type || "application/x-string";
		var propNew = proto.$properties[key] = {
			$type: $type
		};
		for (var i = 0; i < _propertiesToCopy.length; i++) {
			var pname = _propertiesToCopy[i];
			var p = prop[pname];
			if (p) {
				propNew[pname] = p;
			}
		}
	});
	return proto;
}

exports.getPrototype = function(repr, facet) {
	return _buildPrototype(repr, facet);
};
});

define('syracuse-tablet/html/js/application/settings',['require','exports','module','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/storage/storage','syracuse-tablet/html/js/sdata/sdataCommonResources','syracuse-tablet/html/js/sdata/entities/clientContract'],function (require, exports, module) {

var globals = require('syracuse-tablet/html/js/helpers/globals');
var storageModule = require('syracuse-tablet/html/js/storage/storage');
var sdataCommonRes = require('syracuse-tablet/html/js/sdata/sdataCommonResources');

var clientContract = require('syracuse-tablet/html/js/sdata/entities/clientContract');

exports.getMyApplications = function() {
	var deferred = $.Deferred();
	var ctx = globals.getCacheCtx();
	var storage = globals.getStorage();

	var prefix = globals.getCache().cachePrefix;

	// The list of apps is independent of role and user
	ctx = {
		"$user": "none",
		"$role": "none",
		"$lang": ctx.$lang
	};

	function appendClientApps(apps) {
		var clientApps = clientContract.getApps();
		clientApps.forEach(function(app) {
			apps.push(app);
		});
	};

	var readCache;
	if (globals.isDvlpMode()) { // Skip cache when in dev mode
		readCache = $.smResolve({
			$status: storageModule.StatusCodes.NOT_FOUND
		});
	} else {
		readCache = storage.read({
			$context: ctx,
			$collection: prefix + "$settings",
			$endpoint: "$local",
			$key: "MyApps"
		});
	}
	readCache.then(function(result) {
		if (result.$status === storageModule.StatusCodes.OK) {
			var apps = result.$data;
			appendClientApps(apps);
			deferred.resolve(apps);
		} else {
			// no config found
			sdataCommonRes.queryMyApplications()
				.then(function(apps) {
					return _storeMyApplications(apps);
				}, function(e) {
					deferred.reject(e);
				})
				.then(function(apps) {
					appendClientApps(apps);
					deferred.resolve(apps);
				}).fail(function(e) {
					deferred.reject(e);
				});
		}
	}, function(e) {
		deferred.reject(e);
	});
	return deferred.promise();
};

function _storeMyApplications(apps) {
	var deferred = $.Deferred();
	var ctx = globals.getCacheCtx();
	var storage = globals.getStorage();
	var prefix = globals.getCache().cachePrefix;

	// The list of apps is independent of role and user
	ctx = {
		"$user": "none",
		"$role": "none",
		"$lang": ctx.$lang
	};

	storage.put({
		$context: ctx,
		$collection: prefix + "$settings",
		$endpoint: "$local",
		$key: "MyApps",
		$data: apps
	})
		.then(function(result) {
			deferred.resolve(apps);
		}).fail(function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
}
/**
 * Return application detail for a given JSON description
 */
exports.getMyApplicationDetail = function(appHeader) {
	var deferred = $.Deferred();
	var ctx = globals.getCacheCtx();
	var storage = globals.getStorage();
	var prefix = globals.getCache().cachePrefix;

	// No meta data url, so it's a client side application
	if (!appHeader.$metaDataUrl) {
		var app = clientContract.getAppDetail(appHeader.applicationName);
		if (app) {
			deferred.resolve(app);
		} else {
			deferred.reject("Application not found: " + appHeader.applicationName);
		}
	} else {
		storage.read({
			$context: ctx,
			$collection: prefix + "$settings",
			$endpoint: "$local",
			$key: "MyApp_" + appHeader.applicationName
		})
			.then(function(result) {
				if (result.$status === storageModule.StatusCodes.OK) {
					deferred.resolve(result.$data);
				} else {
					// no config found
					sdataCommonRes.queryMyApplicationDetail(appHeader)
						.then(function(apps) {
							return _storeMyApplicationDetail(apps);
						})
						.then(function(apps) {
							deferred.resolve(apps);
						}).fail(function(e) {
							deferred.reject(e);
						});
				}
			}, function(e) {
				deferred.reject(e);
			});
	}
	return deferred.promise();
};

function _storeMyApplicationDetail(app) {
	var deferred = $.Deferred();
	var ctx = globals.getCacheCtx();
	var storage = globals.getStorage();
	var prefix = globals.getCache().cachePrefix;

	storage.put({
		$context: ctx,
		$collection: prefix + "$settings",
		$endpoint: "$local",
		$key: "MyApp_" + app.$application.applicationName,
		$data: app
	})
		.then(function(result) {
			deferred.resolve(app);
		}).fail(function(e) {
			deferred.reject(e);
		});
	return deferred.promise();
}
});

define('syracuse-tablet/html/js/init/initContext',['require','exports','module','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/locale','syracuse-tablet/html/js/ui/modalSelectContext','syracuse-tablet/html/js/helpers/notifications','syracuse-tablet/html/js/sdata/sdataCommonResources','syracuse-tablet/html/js/storage/localStorage','syracuse-tablet/html/js/application/settings'],function (require, exports, module) {

var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var modalSelectContext = require('syracuse-tablet/html/js/ui/modalSelectContext');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var sdataCommonResources = require('syracuse-tablet/html/js/sdata/sdataCommonResources');
var localStorage = require('syracuse-tablet/html/js/storage/localStorage');
var settings = require('syracuse-tablet/html/js/application/settings');

exports.getLastUsedContext = function(userName) {
	var context;
	try {
		var settingsKey = userName + "_lastContext";
		var contextString = localStorage.getItem(settingsKey);
		if (contextString && contextString.length > 0) {
			context = JSON.parse(contextString);
		}
	} catch (e) {}
	return context;
};

exports.setLastUsedContext = function(userName, context) {
	try {
		var settingsKey = userName + "_lastContext";
		var contextString = JSON.stringify(context);
		localStorage.setItem(settingsKey, contextString);
	} catch (e) {}
};

exports.init = function(force, warn) {
	var endpoints = [];
	var roles = [];
	var languages = [];

	var userCtx = globals.getUserCtx();
	var userName = userCtx && userCtx.$user;
	var userProfile = globals.getUserProfile();

	var currentContext = exports.getLastUsedContext(userName);

	return sdataCommonResources.queryEndpoints()
		.then(function(eps) {
			eps.forEach(function(ep) {
				if (userProfile.endpoints && userProfile.endpoints.some(function(e) {
					return e.$uuid === ep.$uuid;
				})) {
					endpoints.push(ep);
				}
			});
			return sdataCommonResources.queryLocalePreferences();
		})
		.then(function(ls) {
			languages = ls;
			return sdataCommonResources.queryRoles();
		})
		.then(function(rs) {
			rs.forEach(function(rl) {
				if (userProfile.roles && userProfile.roles.some(function(r) {
					return r.$uuid === rl.$uuid;
				})) {
					roles.push(rl);
				}
			});
		})
		.then(function() {
			var deferred = $.Deferred();
			var _dialog = function(ctx) {
				var selectNewContext;
				if (force || ctx == null) {
					selectNewContext = modalSelectContext.selectContext(ctx, endpoints, roles, languages, warn);
				} else {
					ctx.action = "ok"; // as if dialog was opened and accepted
					selectNewContext = $.smResolve(ctx);
				}

				selectNewContext.then(function(context) {
					if (context && context.action === "ok") {
						deferred.resolve(context);
					} else if (context && context.action === "cancel") {
						if (currentContext == null) {
							force = true;
							_dialog(context);
						} else {
							deferred.resolve(null);
						}
					} else if (context && context.action === "logout") {
						globals.getApplication().logout().always(function() {
							deferred.resolve(null);
						});
					}
				}).fail(function(e) {
					deferred.reject(e);
				});
			};

			_dialog(currentContext);
			return deferred.promise();
		})
		.then(function(context) {
			if (context) {
				// Locale for client UI
				locale.setLocale(context.language);

				// Endpoint for storing records locally and to use for gadgets with default endpoint usage
				globals.setEndpoint(context.endpoint);

				// Context for storing records locally
				globals.setUserCtx({
					$user: userCtx.$user,
					$role: context.role,
					$lang: context.language,
				});
			}
			return context;
		})
		.then(function(context) {
			if (!context) {
				return context;
			}
			exports.setLastUsedContext(userName, context);
			return _contextChanged(context);
		})
		.then(function(context) {
			if (!context) {
				return context;
			}
			return _updateServerUserProfile(context, userName, endpoints, roles, languages);
		}).fail(function(e) {
			globals.getModal().error("context.sdataCommonResources error", e);
		});
};

function _contextChanged(context) {
	return $.smResolve()
		.then(function() {
			return _initApplications(context);
		})
		.then(function() {
			var deferred = $.Deferred();
			notifications.publish("sm.context.changed", deferred);
			return deferred.promise();
		}).then(function() {
			// Nothing
		}).fail(function(e) {
			globals.getModal().error("context._contextChanged error", e);
		});
}

function _initApplications(context) {
	return settings.getMyApplications()
		.then(function(apps) {
			var matchedApps = {};
			apps.forEach(function(app) {
				var epMatch = true;
				if (app.endpoints && app.endpoints.length > 0) {
					epMatch = epMatch && app.endpoints.some(function(ep) {
						return (ep.application + "." + ep.contract + "." + ep.dataset === context.endpoint);
					});
				}
				var roleMatch = true;
				if (globals.isDvlpMode()) {
					roleMatch = true;
				} else {
					if (app.roles && app.roles.length > 0 && epMatch) {
						roleMatch = roleMatch && app.roles.some(function(role) {
							return (role.code === context.role);
						});

					}
				}
				if (roleMatch && epMatch) {
					matchedApps[app.applicationName] = app;
				}
			});

			globals.setApplicationsJson(matchedApps);

			return context;
		}).fail(function(e) {
			globals.getModal().error("context._initApplications error", e);
		});
}

function _updateServerUserProfile(context, userName, endpoints, roles, languages) {
	return sdataCommonResources.getUserProfile().then(function(up) {
		var change = false;
		var upChanges = {};
		change = endpoints.some(function(ep) {
			if (ep.application + "." + ep.contract + "." + ep.dataset === context.endpoint && ep.$uuid !== up.selectedEndpoint.$uuid) {
				upChanges.selectedEndpoint = {
					$uuid: ep.$uuid
				};
				return true;
			}
			return false;
		}) || change;
		change = roles.forEach(function(role) {
			if (role.code === context.role && role.$uuid !== up.selectedRole.$uuid) {
				upChanges.selectedRole = {
					$uuid: role.$uuid
				};
				return true;
			}
			return false;
		}) || change;
		languages.forEach(function(lang) {
			if (lang.code === context.languages && lang.$uuid !== up.selectedLocale.$uuid) {
				upChanges.selectedLocale = {
					$uuid: lang.$uuid
				};
				return true;
			}
			return false;
		}) || change;

		if (change) {
			return sdataCommonResources.updateUserProfile(upChanges)
				.then(function() {
					return context;
				});
		} else {
			return $.smResolve(context);
		}
	});
}
});

define('syracuse-tablet/html/js/ui/iconList',['require','exports','module'],function (require, exports, module) {

// extracted from webpage by searching for (([\s\S]*?)(class\="fa fa-(\w+)")([\s\S]*?)) and replacing by fa-$4\R
exports.fontAwesomeIconNames = [
	'fa-adjust',
	'fa-adn',
	'fa-ambulance',
	'fa-anchor',
	'fa-android',
	'fa-angellist',
	'fa-apple',
	'fa-archive',
	'fa-arrows',
	'fa-asterisk',
	'fa-at',
	'fa-automobile',
	'fa-backward',
	'fa-ban',
	'fa-bank',
	'fa-barcode',
	'fa-bars',
	'fa-beer',
	'fa-behance',
	'fa-bell',
	'fa-bicycle',
	'fa-binoculars',
	'fa-bitbucket',
	'fa-bitcoin',
	'fa-bold',
	'fa-bolt',
	'fa-bomb',
	'fa-book',
	'fa-bookmark',
	'fa-briefcase',
	'fa-btc',
	'fa-bug',
	'fa-building',
	'fa-bullhorn',
	'fa-bullseye',
	'fa-bus',
	'fa-cab',
	'fa-calculator',
	'fa-calendar',
	'fa-camera',
	'fa-car',
	'fa-cc',
	'fa-certificate',
	'fa-chain',
	'fa-check',
	'fa-child',
	'fa-circle',
	'fa-clipboard',
	'fa-close',
	'fa-cloud',
	'fa-cny',
	'fa-code',
	'fa-codepen',
	'fa-coffee',
	'fa-cog',
	'fa-cogs',
	'fa-columns',
	'fa-comment',
	'fa-comments',
	'fa-compass',
	'fa-compress',
	'fa-copy',
	'fa-copyright',
	'fa-crop',
	'fa-crosshairs',
	'fa-css3',
	'fa-cube',
	'fa-cubes',
	'fa-cut',
	'fa-cutlery',
	'fa-dashboard',
	'fa-database',
	'fa-dedent',
	'fa-delicious',
	'fa-desktop',
	'fa-deviantart',
	'fa-digg',
	'fa-dollar',
	'fa-download',
	'fa-dribbble',
	'fa-dropbox',
	'fa-drupal',
	'fa-edit',
	'fa-eject',
	'fa-empire',
	'fa-envelope',
	'fa-eraser',
	'fa-eur',
	'fa-euro',
	'fa-exchange',
	'fa-exclamation',
	'fa-expand',
	'fa-eye',
	'fa-eyedropper',
	'fa-facebook',
	'fa-fax',
	'fa-female',
	'fa-file',
	'fa-film',
	'fa-filter',
	'fa-fire',
	'fa-flag',
	'fa-flash',
	'fa-flask',
	'fa-flickr',
	'fa-folder',
	'fa-font',
	'fa-forward',
	'fa-foursquare',
	'fa-gamepad',
	'fa-gavel',
	'fa-gbp',
	'fa-ge',
	'fa-gear',
	'fa-gears',
	'fa-gift',
	'fa-git',
	'fa-github',
	'fa-gittip',
	'fa-glass',
	'fa-globe',
	'fa-google',
	'fa-group',
	'fa-header',
	'fa-headphones',
	'fa-heart',
	'fa-history',
	'fa-home',
	'fa-html5',
	'fa-ils',
	'fa-image',
	'fa-inbox',
	'fa-indent',
	'fa-info',
	'fa-inr',
	'fa-instagram',
	'fa-institution',
	'fa-ioxhost',
	'fa-italic',
	'fa-joomla',
	'fa-jpy',
	'fa-jsfiddle',
	'fa-key',
	'fa-krw',
	'fa-language',
	'fa-laptop',
	'fa-lastfm',
	'fa-leaf',
	'fa-legal',
	'fa-link',
	'fa-linkedin',
	'fa-linux',
	'fa-list',
	'fa-lock',
	'fa-magic',
	'fa-magnet',
	'fa-male',
	'fa-maxcdn',
	'fa-meanpath',
	'fa-medkit',
	'fa-microphone',
	'fa-minus',
	'fa-mobile',
	'fa-money',
	'fa-music',
	'fa-navicon',
	'fa-openid',
	'fa-outdent',
	'fa-pagelines',
	'fa-paperclip',
	'fa-paragraph',
	'fa-paste',
	'fa-pause',
	'fa-paw',
	'fa-paypal',
	'fa-pencil',
	'fa-phone',
	'fa-photo',
	'fa-pinterest',
	'fa-plane',
	'fa-play',
	'fa-plug',
	'fa-plus',
	'fa-print',
	'fa-qq',
	'fa-qrcode',
	'fa-question',
	'fa-ra',
	'fa-random',
	'fa-rebel',
	'fa-recycle',
	'fa-reddit',
	'fa-refresh',
	'fa-remove',
	'fa-renren',
	'fa-reorder',
	'fa-repeat',
	'fa-reply',
	'fa-retweet',
	'fa-rmb',
	'fa-road',
	'fa-rocket',
	'fa-rouble',
	'fa-rss',
	'fa-rub',
	'fa-ruble',
	'fa-rupee',
	'fa-save',
	'fa-scissors',
	'fa-search',
	'fa-send',
	'fa-share',
	'fa-shekel',
	'fa-sheqel',
	'fa-shield',
	'fa-signal',
	'fa-sitemap',
	'fa-skype',
	'fa-slack',
	'fa-sliders',
	'fa-slideshare',
	'fa-sort',
	'fa-soundcloud',
	'fa-spinner',
	'fa-spoon',
	'fa-spotify',
	'fa-square',
	'fa-star',
	'fa-steam',
	'fa-stethoscope',
	'fa-stop',
	'fa-strikethrough',
	'fa-stumbleupon',
	'fa-subscript',
	'fa-suitcase',
	'fa-superscript',
	'fa-support',
	'fa-table',
	'fa-tablet',
	'fa-tachometer',
	'fa-tag',
	'fa-tags',
	'fa-tasks',
	'fa-taxi',
	'fa-terminal',
	'fa-th',
	'fa-ticket',
	'fa-times',
	'fa-tint',
	'fa-trash',
	'fa-tree',
	'fa-trello',
	'fa-trophy',
	'fa-truck',
	'fa-try',
	'fa-tty',
	'fa-tumblr',
	'fa-twitch',
	'fa-twitter',
	'fa-umbrella',
	'fa-underline',
	'fa-undo',
	'fa-university',
	'fa-unlink',
	'fa-unlock',
	'fa-unsorted',
	'fa-upload',
	'fa-usd',
	'fa-user',
	'fa-users',
	'fa-vine',
	'fa-vk',
	'fa-warning',
	'fa-wechat',
	'fa-weibo',
	'fa-weixin',
	'fa-wheelchair',
	'fa-wifi',
	'fa-windows',
	'fa-won',
	'fa-wordpress',
	'fa-wrench',
	'fa-xing',
	'fa-yahoo',
	'fa-yelp',
	'fa-yen',
	'fa-youtube'
];
});

define('syracuse-tablet/html/js/ui/fontUtils',['require','exports','module','syracuse-tablet/html/js/helpers/logger','syracuse-tablet/html/js/ui/iconList'],function (require, exports, module) {

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("app");
var iconList = require('syracuse-tablet/html/js/ui/iconList');

var _paginBtns = {
	"$first": "glyphicon glyphicon-step-backward",
	"$previous": "glyphicon glyphicon-chevron-left",
	"$next": "glyphicon glyphicon-chevron-right",
	"$last": "glyphicon glyphicon-step-forward",
	"$more": "glyphicon glyphicon-refresh"
};

var _getIconByIdx = function(idx) {
	if (idx == null) {
		idx = Math.random() * (iconList.fontAwesomeIconNames.length - 1);
	} else if (idx < iconList.fontAwesomeIconNames.length) {
		idx = Math.abs(idx);
	} else {
		var x = Math.round(Math.abs(idx) / iconList.fontAwesomeIconNames.length);
		idx = idx - x * iconList.fontAwesomeIconNames.length;
	}
	return "fa " + iconList.fontAwesomeIconNames[idx];

};

var _getIconByName = function(name) {
	switch (name) {
		case "$edit":
			return "fa fa-pencil-square-o";
		case "$query":
			return "fa fa-list";
		case "$save":
			return "fa fa-floppy-o";
		case "$details":
			return "fa fa-level-down";
		case "$delete":
			return "fa fa-trash-o";
		case "$create":
			return "fa fa-plus-square";
			break;
		default:
			if (iconList.fontAwesomeIconNames.indexOf("fa-" + name) > -1) {
				return "fa fa-" + name;
			}
			log && log("Icon name=" + name + " not implemented yet");
			return "fa fa-warning";
			break;
	}
	return true;
};

exports.getIconByIdx = _getIconByIdx;
exports.getIconByName = _getIconByName;
exports.checkBoxIcon = function(val) {
	return ["glyphicon", val ? "glyphicon-ok" : "glyphicon-remove"];
};
exports.dateFieldIcon = function($type) {
	return $type.indexOf("date") != -1 ? ["glyphicon", "glyphicon-calendar"] : ["glyphicon", "glyphicon-time"];
};
exports.refFieldIcon = function() {
	return ["glyphicon", "glyphicon-eye-open"];
};
// s-m-img/s-m-binary - icon: default
exports.binaryIcon = function(type, icon) {
	if (type === "s-m-img") {
		return "glyphicon " + (icon === "default" ? "glyphicon-picture" : "");
	}
	if (type === "s-m-binary") {
		return "glyphicon " + (icon === "default" ? "glyphicon-file" : "");
	}
	return "";
};
exports.paginationIcon = function(linkName) {
	return _paginBtns[linkName];
};
exports.pageIcon = function(name) {
	if (name === "clearCache") return "fa fa-history";
	if (name === "switchContext") return "fa fa-user";
	if (name === "search") return "fa fa-search";
	if (name === "sidePanelL") return "fa fa-caret-square-o-left";
	if (name === "sidePanelR") return "fa fa-caret-square-o-right";
	if (name === "home") return "fa fa-home";
	if (name === "designPage") return "fa fa-paint-brush";
	if (name === "back") return "fa fa-arrow-circle-o-left";
};
exports.ctrlIcon = function(name) {
	if (name === "editrow") return "fa fa-pencil-square-o";
	if (name === "detailrow") return "fa fa-hand-o-right";
	if (name === "delrow") return "fa fa-remove";
	if (name === "addrow") return "fa fa-plus";
};
exports.vignetteIcons = function(name) {
	if (name === "home") return "fa fa-home";
	if (name === "back") return "fa fa fa-arrow-circle-o-left";
	if (name === "refresh") return "fa fa-history";
};
});

define('syracuse-tablet/html/js/controls/ctrlFactory',['require','exports','module','syracuse-tablet/html/js/helpers/logger'],function (require, exports, module) {

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("factory");

var _ctor = {};

var _types = {
	// official types
	string: "application/x-string",
	password: "application/x-password",
	text: "text/plain",
	integer: "application/x-integer",
	real: "application/x-real",
	decimal: "application/x-decimal",
	quantity: "application/x-quantity",
	choice: "application/x-choice",
	boolean: "application/x-boolean",
	date: "application/x-date",
	time: "application/x-time",
	datetime: "application/x-datetime",
	reference: "application/x-reference",
	array: "application/x-array",
	image: "image",
	doc: "application/x-document",
	binary: "application/x-binary",
	soapObject: "application/x-object",
	textRtf: "text/rtf",
	textHtml: "text/html",
	textPlain: "text/plain",
	// our own types
	vignette: "tablet/x-vignette",
	layout: "tablet/x-layout",
	pageheader: "tablet/x-pageheader",
	pagefooter: "tablet/x-pagefooter",
	pageactionpanel: "tablet/x-pageactionpanel",
	navigationpanel: "tablet/x-navigationpanel",
	icon: "tablet/x-icon",
	button: "tablet/x-button",
	unfound: "tablet/x-unfound"
};
/**
 * Create a control and insert DOM element in a grid cell
 * 	TODO - Use an HTML builder instead of a control
 */
var _createCellFieldCtrl = function($$parentCell, controller, ctrlArticle, ctrlProto, options) {
	options = options || {};
	options.isArrayChild = true;
	options.isTableCell = true;
	return _createControl(controller, null, ctrlArticle, ctrlProto, options);
};
/**
 * Create a control
 * 	Add control to controller
 * 	Append control as a child of parentStructElmt
 *  options: isTableCell : true/false
 *  layoutPath	Used by authoring - Temporarily
 */
var _createControl = function(controller, parentStructElmt, article, prototype, options, layoutPath) {
	if (!controller) throw new Error("Control - null parent or controller");
	options = options || {};
	var c;
	var type = prototype.data("$type");
	switch (type) {
		case _types.string:
		case _types.password:
			switch (prototype.data("$format")) {
				case "$phone":
					c = new _ctor.PhoneField(controller, article, prototype, options);
					break;
				case "$email":
					c = new _ctor.EmailField(controller, article, prototype, options);
					break;
				default:
					c = new _ctor.Alphanum(controller, article, prototype, options);
			}
			break;
		case _types.integer:
		case _types.real:
		case _types.decimal:
			if (article.$gauge) {
				c = new _ctor.Gauge(controller, article, prototype, options);
			} else {
				c = new _ctor.Numeric(controller, article, prototype, options);
			}
			break;
		case _types.quantity:
			c = new _ctor.Quantity(controller, article, prototype, options);
			break;
		case _types.choice:
			c = new _ctor.Combo(controller, article, prototype, options);
			break;
		case _types.boolean:
			c = new _ctor.CheckBox(controller, article, prototype, options);
			break;
		case _types.date:
		case _types.time:
		case _types.datetime:
			c = new _ctor.Date(controller, article, prototype, options);
			break;
		case _types.reference:
			c = new _ctor.Reference(controller, article, prototype, options);
			break;
		case _types.array:
			if (prototype.data("$cube")) {
				c = new _ctor.CubeChart(controller, article, prototype, options);
			} else {
				c = new _ctor.Array(controller, article, prototype, options);
			}
			break;
		case _types.vignette:
			c = new _ctor.Vignette(controller, article, prototype, options);
			break;
		case _types.image:
		case _types.doc:
		case _types.binary:
			c = new _ctor.Binary(controller, article, prototype, options);
			break;
		case _types.icon:
			c = new _ctor.Icon(controller, article, prototype, options);
			break;
		case _types.button:
			c = new _ctor.Button(controller, article, prototype, options);
			break;
		case _types.textRtf:
		case _types.textHtml:
		case _types.textPlain:
			c = new _ctor.Text(controller, article, prototype, options);
			break;
		case _types.soapObject:
			throw new Error("not implemented");
			break;
		case _types.unfound:
			c = new _ctor.FieldUnfound(controller, article, prototype, options);
			break;
		default:
			c = new _ctor.TypeUnknown(controller, article, prototype, options);
			break;
	}
	if (layoutPath) c.setAuthoringPath(layoutPath);
	if (options.isTableCell === true) {
		// Nothing - Control is used only to build html - TODO use html Builders instead of control
	} else {
		if (parentStructElmt) {
			// Add control elmt in a tree
			parentStructElmt.appendStructElmt(c);
			// Add control to controller
			if (options.isArrayChild !== true) {
				controller.addControl(c, false);
			} // Else array card context we don't add control but build tree
		} else {
			throw new Error("Parent's control is mandatory");
		}
	}
	return c;
};
var _createLayout = function(controller, parentStructElmt, article, opts, layoutPath) {
	var type = article.$layoutType || "stack";
	var klass;
	if (type == "stack") {
		klass = _ctor.LayoutStack;
	} else if (type == "row") {
		klass = _ctor.LayoutRow;
	} else if (type == "tab") {
		klass = _ctor.LayoutTab;
	} else if (type == "hub") {
		klass = _ctor.LayoutHub;
	} else if (type == "hubGroup") {
		klass = _ctor.LayoutHubGroup;
	} else if (type == "tile") {
		klass = _ctor.LayoutTile;
	} else if (type == "cell") {
		klass = _ctor.LayoutCell;
	} else {
		log && log("layout type=" + type + " is not implemented");
		return null;
	}
	var l = new klass(controller, _types.layout, article, opts);
	l.setAuthoringPath(layoutPath);
	if (parentStructElmt) {
		parentStructElmt.appendStructElmt(l);
	} else {
		// Root layout
		l.parent = controller;
	}
	return l;
};
/**
 * Creates page static controls
 */
var _createPageControl = function(id, controller, options) {
	var c;
	switch (id) {
		case _types.pageheader:
			c = new _ctor.PageHeader(controller, _types.pageheader, options);
			break;
		case _types.pagefooter:
			c = new _ctor.PageFooter(controller, _types.pagefooter, options);
			break;
		case _types.pageactionpanel:
			switch (controller.state.type) {
				case "dashboard":
					c = new _ctor.DashboardActionPanel(controller, _types.pageactionpanel, options);
					break;
				case "regular":
					c = new _ctor.RegularActionPanel(controller, _types.pageactionpanel, options);
					break;
				default:
					throw new Error("Unknown page type[" + controller.state.type + "]");
					break;
			}
			break;
		case _types.navigationpanel:
			c = new _ctor.NavigationPanel(controller, _types.navigationpanel, options);
			break;
		default:
			throw new Error("Unknown static control[" + id + "]");
			break;
	}
	if (c) controller.addControl(c, true);
	return c;
};

exports.createControl = _createControl;
exports.createLayout = _createLayout;
exports.createPageControl = _createPageControl;
exports.createCellFieldCtrl = _createCellFieldCtrl;

exports.type = function(name) {
	return _types[name];
};
exports.setImpl = function(name, ctor) {
	_ctor[name] = ctor;
};
});

define('syracuse-tablet/html/js/helpers/articleParser',['require','exports','module','syracuse-tablet/html/js/helpers/logger','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/controls/ctrlFactory','syracuse-tablet/html/js/helpers/jsutils'],function (require, exports, module) {

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("articleParser");
var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

/**
 * Return true if jsonArrayProto is a single array
 * For one cell array prototype doesn't contain $properties
 * For one x-reference cell array $properties of prototype isn't $properties of the array but $properties of the reference field
 * This code is shared with prototype class
 */
var _isSingleArray = function(jsonArrayProto) {
	return jsonArrayProto.$item.$properties == null || jsonArrayProto.$type == "application/x-reference";
};
/**
 * Return json prototype of an array or null if proto is not an array
 * proto is a prototype object or a JSON object
 * This code is shared with prototype class
 */
var _getArrayJsonProto = function(proto) {
	if (!proto) return null;
	var json;
	if (!$.isPlainObject(proto)) {
		if (proto.isArray()) {
			json = proto.json;
		} else if (proto.parent) {
			json = proto.parent.json;
		}
	} else {
		json = proto;
	}
	if (json == null || json.$type !== "application/x-array") return null;
	return json;
};
/**
 * If arrayProto is not an array -> return article
 * If arrayProto is  an array
 * 	Set default array $article if no $article found
 * 	Like article is shared by all control/layouts of the page we need to set default $article in advanced (here) instead of in control/layout class
 * Returns article
 */
var _setArrayDefAuthoring = function(arrayProto, article) {
	// Get Json prototype
	var jsonProto = _getArrayJsonProto(arrayProto);
	if (!jsonProto) return article;

	// Default authoring
	article.$article = {
		$items: []
	};
	article.$display = "table";

	var props, prop;
	if (_isSingleArray(jsonProto)) {
		props = {};
		props[globals.SINGLEARRAYPROP] = jsonProto;
	} else {
		props = jsonProto.$item.$properties;
	}
	for (var propName in props) {
		if (!propName.smStartsWith("$")) {
			prop = props[propName];
			if (prop.$isExcluded !== true) {
				article.$article.$items.push({
					"$bind": propName
				});
			}
		}
	}
	return article;
};
/**
 * Create an article form fieldProto
 * Accept a JSON or prototype class object for fieldProto
 */
var _createArticle = function(fieldName, fieldProto, options) {
	var a = $.extend({}, {
		"$bind": fieldName
	}, options);
	// If fieldProto is an array we generate default authoring a.$article for arrays else nothing
	return _setArrayDefAuthoring(fieldProto, a);
};
/**
 * Parses an article and generate the control tree structure
 */
var _Parser = utils.defineClass(
	function(page) {
		// Controller
		var self = this;
		self.page = page;
	}, null, {
		_doParse: function(article, prototype, parent, opts, unfounds, layoutPath) {
			var self = this;
			layoutPath = layoutPath || "0";
			var num = 0;
			if (article.$layoutType) {
				var lyt = ctrlFactory.createLayout(self.page, parent, article, opts, layoutPath);
				if (lyt && article.$items) {
					if (prototype.isQuery()) {
						prototype = prototype.getPrototype("$resources");
					}
					article.$items.forEach(function($itm) {
						// Important: Do not clone article here since full tree has to be preserved	
						self._doParse($itm, prototype, lyt, opts, unfounds, layoutPath + "-" + num);
						num++;
					});
				}
				return lyt;
			} else if (article.$bind) {
				var fieldProto = prototype.getPrototype(article.$bind);
				if (fieldProto == null && article.$isUnfound !== true) {
					unfounds.push(article);
				} else {
					if (article.$isUnfound) {
						fieldProto = prototype.create({
							$type: "tablet/x-unfound"
						});
					}
					if (!fieldProto.$isExcluded) {
						if (fieldProto.isArray() && article.$article == null) {
							// Add default authoring
							_setArrayDefAuthoring(fieldProto, article);
						}
						// Important: Do not clone article here since full tree has to be preserved
						ctrlFactory.createControl(self.page, parent, article, fieldProto, opts, layoutPath);
					}
				}
			} else {
				log && log("$layoutType or $bind exspected");
				//throw new Error ("$layoutType or $bind expected");
			}
		},
		parse: function(article, prototype, opts, layoutPath) {
			var self = this;
			try {
				if (!article || !prototype) throw new Error("Not empty article and prototype are expected");
				if (!article.$layoutType) throw new Error("$layoutType expected for root layout");
				var unfounds = [];
				var root = self._doParse(article, prototype, null, opts, unfounds, layoutPath);
				if (unfounds.length > 0) {
					var article = {
						$layoutType: "stack",
						$items: []
					};
					unfounds.forEach(function(f) {
						article.$items.push($.extend(true, f, {
							$isUnfound: true
						}));
					});
					self._doParse(article, prototype, root, opts, null, layoutPath);
				}
				return root;
			} catch (e) {
				log && log('article parser error', e);
				throw new Error("Error parsing article [" + e.message + "]\n" + jsutils.cleanStack(e.stack));
			}
		}
	}
);

/**
 * Parses article and calls the controls factory
 * 		article: json description
 *  	prototype: prototype object (Prototype class)
 *  Return root element (layout)
 */
var _article2Controls = function(page, article, prototype, opts, layoutPath) {
	var p = new _Parser(page);
	return p.parse(article, prototype, opts, layoutPath);
};

/**
 * Return a table cell control
 * Article is calculated from the fieldProto
 */
var _tableCell2Control = function(arrayCtrl, $$parent, fieldName, fieldProto) {
	var article = _createArticle(fieldName, fieldProto);
	return ctrlFactory.createCellFieldCtrl($$parent, arrayCtrl.controller, article, fieldProto);
};
var _cardV2Controls = function(arrayCtrl, options) {
	var article = arrayCtrl.article.$article.$card;
	var cardsPerRow = arrayCtrl.article.$article.$cardsPerRow;
	cardsPerRow = Math.min(12, Math.max(0, cardsPerRow == null ? 1 : parseInt(cardsPerRow, 10)));
	if (!article) {
		article = {
			"$layoutType": "stack",
			"$items": []
		};
		if (false && cardsPerRow > 1) {
			article.$items.push({
				"$layoutType": "row",
				"$items": []
			});
			var bindTo = [],
				cell;
			for (var i = 0; i < cardsPerRow; i++) {
				cell = {
					"$layoutType": "cell",
					"$widthXs": 12 / cardsPerRow,
					"$items": []
				};
				article.$items[0].$items.push(cell);
				bindTo.push(cell.$items);
			}
			bindTo.forEach(function(c) {
				arrayCtrl.article.$article.$items.forEach(function(item) {
					c.push(item);
				});
			});
		} else {
			arrayCtrl.article.$article.$items.forEach(function(item) {
				article.$items.push(item);
			});
		}
	}
	options = options || {};
	options.isArrayChild = true;
	options.isTableCell = false;
	return _article2Controls(arrayCtrl.controller, article, arrayCtrl.prototype.getPrototype("$item"), options);
};
/**
 * Convert a desktop article to tablet one
 * 		article:  desktop json description
 *  	prototype: prototype object (Prototype class)
 */
var _defOption = {
	skipblock: true,
	skipsection: true,
	include: ["$category", "$layoutType", "$title", "$bind"],
	exclude: ["$items", "$widths"],
	protoExclude: ["application/x-array", "application/json"]
};

var _convertWidth = function(widths) {
	var r = [];
	widths = widths.split(",");
	// temporarily - We can also embed cells into 
	if (widths.length === 0) throw new Error("Number of cells/rows must be > 0");
	if (widths.length > 12) throw new Error("Number of cells/rows must be <= 12");
	var sum = 0;
	widths.forEach(function(w) {
		w = parseInt(w, 10);
		w = Math.ceil(w / 12);
		sum += w;
		r.push(w);
	});
	if (sum > 12) {
		var d = sum - 12;
		r.sort();
		while (d > 0) {
			// Remove excess starting from large cells
			for (var i = r.length - 1; i >= 0; i--) {
				if (d > 0 && r[i] > 1) {
					r[i] = r[i] - 1;
					d--;
				}
			}
		}
	} else if (sum < 12) {
		var d = 12 - sum;
		r.sort();
		while (d > 0) {
			// Add shortage starting from small cells
			for (var i = 0; i < r.length; i++) {
				if (d > 0) {
					r[i] = r[i] + 1;
					d--;
				}
			}
		}
	}
	return r.join(",");
};
var _scanDesktop = function(json, options) {

	if (!json) return null;
	// we skip $layout
	var res;
	if (json.$layout) {
		res = _scanDesktop(json.$layout, options);
	} else {
		res = {};
	}
	if (json.$layoutType) {
		if (!json.$items) throw new Error("$items is missing");
		res.$items = [];
		json.$items.forEach(function(itm) {
			res.$items.push(_scanDesktop(itm, options));
		});
	}
	for (var p in json) {
		if (p === "$widths") {
			res[p] = _convertWidth(json[p]);
		} else if (options.exclude.indexOf(p) === -1 && options.include.indexOf(p) >= 0) {
			res[p] = json[p];
		}
	}
	return res;
};

var _convertDesktop = function(article, prototype, options) {
	options = $.extend({}, _defOption, options);
	return _scanDesktop(article, options);
};

exports.tableCell2Control = _tableCell2Control;
exports.cardV2Controls = _cardV2Controls;
exports.article2Controls = _article2Controls;
exports.convertDesktop = _convertDesktop;
exports.createArticle = _createArticle;
exports.isSingleArray = _isSingleArray;
exports.getArrayJsonProto = _getArrayJsonProto;
});

define('syracuse-tablet/html/js/helpers/prototype',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/logger','syracuse-tablet/html/js/application/gadget','syracuse-tablet/html/js/sdata/sdataUtils','syracuse-tablet/html/js/ui/fontUtils','syracuse-tablet/html/js/helpers/articleParser'],function (require, exports, module) {
var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("prototype");
var Gadget = require('syracuse-tablet/html/js/application/gadget').Klass;
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');

// Add display info for facet actions - Simplify by adding name.action.$edit... in resources
var _addFacetLink = function(info, facet) {
	info.icon = fontUtils.getIconByName(facet);
	switch (facet) {
		case "$edit":
			info.title = "Edit";
			break;
		case "$query":
			info.title = "List";
			break;
		case "$save":
			info.title = "Save";
			break;
		case "$details":
			info.title = "Detail";
			break;
		case "$delete":
			info.title = "Delete";
			break;
		case "$create":
			info.title = "Create";
			break;
		default:
			log && log("Facet " + facet + " not implemented yet");
			info.title = "???";
			break;
	}
};

var _defMetaData = {
	"$isExcluded": false,
	"$isHidden": false,
	"isMandatory": false,
	"$isReadOnly": false,
	"$isDisabled": false
};
/**
 * Property of prototype that contains row index
 */
var _rowIdxProto = null;
/**
 * getFieldNameForValue
 */
var _reg1 = /{[^}]+}/g,
	_reg2 = /[{}]/g;
/**
 * Prototype class
 * 	Provides all the method to deal with prototype
 * 	manage prototype chaining parent -> child
 * !!use Prototype methods instead of dealing directly with JSON
 */
var _Prototype = utils.defineClass(function(json, parent) {
	var self = this;
	self.json = json || {};
	if (typeof self.json == "string") {
		self.json = JSON.parse(self.json);
	}
	self._children = null;
	if (parent) {
		parent._appendChild(self);
		self.parent = parent;
	}
	self.init();
}, null, {
	init: function() {
		var self = this;
		var props = self.json.$properties;
		if (!props) return;
		for (var p in props) {
			if (props[p].$type === "application/x-reference") {
				self.initRefField(props[p], p);
			}
		}
	},
	destroy: function() {
		var self = this;
		// Just set to null
		self.parent = null;
		// Just set to null
		self.json = null;
		if (self._children) {
			self._children.forEach(function(c) {
				if (c) c.destroy();
			});
			self._children = null;
		}
	},
	/**
	 * For destroy
	 */
	_appendChild: function(child) {
		var self = this;
		if (!self._children) self._children = [];
		self._children.push(child);
	},
	/**
	 * returns json[prop]
	 * 	ignoreParent: true -> Don't read property in parent
	 */
	data: function(prop, dataContext, ignoreParent) {
		var self = this;
		if (!prop || prop.length == 0) return null;
		var val = self.json[prop];
		if (val == null) {
			return ignoreParent !== true && self.parent ? self.parent.data(prop) : val;
		}
		return self.resolveExpression(val, dataContext);
	},
	/**
	 * returns JSON for json.$properties[name]
	 * If prop!=null returns json.$properties[name][prop]
	 * dataContext: optional
	 */
	property: function(name, prop, dataContext) {
		var self = this;
		if (!name || name.length === 0) return null;
		var o = self.json.$properties ? self.json.$properties[name] : self.parent ? self.parent.property(name) : null;
		if (!o || !prop) return o;
		return self.resolveExpression(o[prop], dataContext);
	},
	/**
	 * True if the property prop is a x-reference
	 */
	isReference: function(propname) {
		var p = this.property(propname);
		return p && p.$type === "application/x-reference";
	},
	/**
	 * True proto is a x-array
	 */
	isArray: function() {
		return this.json.$type === "application/x-array";
	},
	/**
	 * Check value and resolve if it's an expression or title otherwise return val
	 * 	dataContext optional (used for expressions other than localization)
	 */
	resolveExpression: function(val, dataContext) {
		if (val && val.indexOf && val.indexOf('{') >= 0) {
			val = utils.parseExpression(val, dataContext, this);
		}
		return val;
	},
	getMetaData: function(name) {
		var self = this;
		if (name.smStartsWith('$')) throw new Error("getMetaData - Unexpected property name [" + name + "]");
		if (!self._metaData) self._metaData = {};
		var meta = self._metaData[name];
		if (meta) return meta;
		meta = self._metaData[name] = $.extend({}, _defMetaData, self.property(name));
		return meta;
	},
	localization: function(val) {
		var self = this;
		var loc = self.json.$localization || {};
		return loc[val] ? loc[val] : self.parent ? self.parent.localization(val) : null;
	},
	/**
	 * returns a prototype object for json.$properties[prop] or $item proto for grids
	 * prop			$items for arrays
	 * 				propertyName for fields
	 * 				path with . as separator of data in other cases (rowDetail)
	 *  override: 	optional - override JSON properties
	 *  			used by row detail to get page prototype from array field proto
	 */
	getPrototype: function(prop, override) {
		var json;
		if (prop.indexOf(".") > 0) {
			json = this.getDataByPath(prop);
		} else if (prop === "$item") {
			json = this.data(prop);
			if (this.isSingleArray(true)) {
				/** we create a standard proto compliant with multiple columns arrays **/
				var newJson = {
					$properties: {},
					$type: "application/json"
				};
				newJson.$properties[globals.SINGLEARRAYPROP] = json;
				json = newJson;
			}
		} else {
			json = this.property(prop);
		}
		return json ? exports.create($.extend(true, {}, json, override), this) : null;
	},
	/**
	 * Query prototype
	 */
	isQuery: function() {
		if (this._isQuery != null) return this._isQuery;
		var url = this.data("$url");
		this._isQuery = url && url.smEndsWith("$query") ? true : false;
		return this._isQuery;
	},
	/**
	 * Lookup prototype
	 */
	isLookup: function() {
		if (this._isLookup != null) return this._isLookup;
		var url = this.data("$url");
		this._isLookup = url && url.smEndsWith("$lookup") ? true : false;
		return this._isLookup;
	},
	/**
	 * Format for display a value according to proto description
	 * Temporarily
	 */
	formatDisplay: function(prop, dataContext) {
		var self = this;
		var info = self.property(prop);

	},
	/**
	 * Temporarily - Add our own property - TODO Find another way
	 * 		Add row index in prototype for grids
	 */
	addProperty: function(name, descr) {
		var self = this;
		if (descr && self.json.$properties && !self.json.$properties[name]) {
			self.json.$properties[name] = descr;
		}
	},
	getPropTitle: function(propName) {
		var self = this;
		var prop = self.property(propName);
		return prop && prop.$title ? self.resolveExpression(prop.$title) : "";

	},
	/**
	 * Returns the name of the field that contains the value ($refValue)
	 * 	For std type it returns name
	 * 	For reference type
	 * 		Set $refValue in prototype
	 * 		Set $lookupdescr - I don't remember if it will be used in tablet but I suppose - TODO remove if not used
	 * 		In mobile client this method was called after having loaded the prototype to calculated additionnal information needed by the client
	 */

	getFieldNameForValue: function(name) {
		var protoField = this.property(name);
		var item = protoField && protoField.$item;
		// reference fiels have been initialized at creation of proto object - initRefField
		return item && item.$refValue ? item.$refValue : name;
	},
	initRefField: function(protoField, name) {
		var self = this;
		if (!protoField) throw new Error("Field proto expected[" + name + "]");
		var item = protoField.$item;
		if (!item || item.$refValue) return;
		item.$refValue = name;
		if (item.$value && typeof item.$value == "string") {
			var vals = item.$value.match(_reg1);
			if (vals && vals.length == 1) {
				// In X3 we expect only one param in $values -> "{CUR}"
				// v : must point to key of cd object - { $value:"{F1}", F1:"{F2}"} - F2 must be a field of cd parent
				var f1 = vals[0].replace(_reg2, "").trim();
				if (item.$properties && item.$properties[f1]) {
					// Field/Property that contains the value in data returned selection in lookup list
					item.$lookupvalue = f1;
				}
				if (item[f1]) {
					var f2 = item[f1].replace(_reg2, "").trim();
					if (self.property(f2)) {
						// Field that contains the value in the prototype - Same field in collaboration - Dedicated field in X3 :-(
						item.$refValue = f2;
					} // else field not found in parent keep $$refValue = property
				} else item.$refValue = f1; // else item  key not found keep $refValue = property
			} else {
				log && log("!!! _getRefenceValue - Only one value is expected");
			}
		}
		// Copied from mobile client - TODO see if still useful
		// Add $lookupdescr which gives the field that contains $description 
		if (item.$description && item.$properties && typeof item.$description == "string") {
			var descrs = item.$description.match(_reg1);
			if (descrs && descrs.length == 1) {
				var fld = descrs[0].replace(_reg2, "").trim();
				if (item.$properties[fld]) {
					item.$lookupdescr = fld;
				}
			}
		}
		return item.$refValue;
	},
	/**
	 * Returns the name of the field that contains the value in lookup selected row
	 * The current proto is a x-reference prototype
	 */
	getLookupValue: function() {
		return this.getDataByPath("$item.$lookupvalue");
	},
	/**
	 * return the value of a given path
	 * 	path:	String with/without '.' as separator or array of strings
	 */
	getDataByPath: function(path) {
		return utils.getPropByPath(this.json, path, this);
	},
	getVignetteGadget: function() {
		var json = this.data("$gadget");
		return json ? new Gadget(json) : null;
	},
	/**
	 * Return an array of link info
	 * filter 		visible				actions displayed in footer and visible page
	 *				hidden				actions displayed in action panel
	 * 				all or empty		all actions
	 *
	 */
	getLinks: function(controllerDao, filter, options) {
		var self = this;
		var result = [];
		if (!controllerDao) {
			// controllerDao is needed to calculated links provided by prototye
			// TODO - In the current version ony regular pages (representaion) have a dao
			// So there no $link in dashboards - To add links n dashboard a dao is neededq
			return [];
		}
		options = options || {};
		filter = filter || "all";
		// getLinksStatus takes into account the merge of proto and data $links properties
		var $links = controllerDao.getLinksStatus(self);
		if ($links && Object.keys($links).length > 0) {
			$.each($links, function(name, value) {
				try {
					if (value == null || value.$isExcluded === true) return;
					if (value.$type != null && value.$type.length !== 0 && value.$type !== "application/json;vnd.sage=syracuse") return;
					var link = sdataUtils.getLinkInfo(value.$url, controllerDao, name === "$save");
					var visible = name.smStartsWith('$');
					var all = filter === "all";
					if (all || (filter === "visible" && visible) || (filter === "hidden" && !visible)) {
						var info = $.extend({}, value);
						info.page = link.page;
						info.name = name;
						info.sdataurl = link.sDataUrl;
						if (visible && (all || filter === "visible")) {
							_addFacetLink(info, name);
						} else if (!visible && (all || filter === "hidden")) {
							info.title = self.resolveExpression(value.$title);
							info.icon = "";
						}
						result.push(info);
					}
				} catch (e) {
					value = value || {};
					log && log("getLinks - invalid link - Title: " + self.resolveExpression(value.$title || 'no title') + "\n\t" + (value.$url || 'no url'));
				}
			});
		}
		return result;
	},
	/**
	 * Calculates the prototype and other info for unit field
	 */
	getUnitFieldInfo: function() {
		var self = this;
		var res = {};
		res.$unit = self.data("$unit");
		if (typeof res.$unit == "object") {
			res.unitBindName = "$unit";
			res.unitFieldProto = exports.create($.extend({}, self.$unit));
		} else if (typeof res.$unit == "string") {
			res.unitBindName = res.$unit;
			var parent = self.parent;
			while (parent) {
				var unitProto = parent.property(res.$unit);
				if (unitProto) {
					res.unitFieldProto = exports.create($.extend({}, unitProto));
					break;
				}
				parent = parent.parent;
			}
		}
		return res;
	},

	/**
	 * Parses JSON prototype and returns a default JSON $article
	 */
	toArticle: function() {
		var self = this;
		var props = self.data("$properties");
		var article = {
			$layoutType: "stack",
			$items: []
		};
		// No title for query's array - TODO Pass a prototype object as parameter
		var forceNoTitle = self.data("$url").indexOf(".$query") > 0,
			prop;
		for (var p in props) {
			prop = props[p];
			if (prop.$isExcluded !== true) {
				var a = articleParser.createArticle(p, prop);
				if (forceNoTitle) {
					a.$isTitleHidden = forceNoTitle;
				}
				article.$items.push(a);
			}
		}
		return article;
	},
	/**
	 * True if array has one column - Single array
	 * Protocole isn't consistent because there a confusion with x-reference fields
	 * current object is array proto or array.$item proto
	 **/
	isSingleArray: function(noFail) {
		if (this.$singleArray) return this.$singleArray;
		var jsonArray = articleParser.getArrayJsonProto(this);
		if (jsonArray == null && noFail) return false;
		if (jsonArray == null) throw new Error("Unexpected parent array");
		this.$singleArray = articleParser.isSingleArray(jsonArray);
		return this.$singleArray;
	},
	/**
	 * Create a child proto from JSON
	 * Used by example for unknown fields
	 */
	create: function(json) {
		return exports.create($.extend(true, {}, json), this);
	}
});
/**
 * To manage a row index in arrays
 */
exports.getRowIdxProto = function() {
	if (_rowIdxProto) return _rowIdxProto;
	_rowIdxProto = exports.create({
		$type: "application/x-integer"
	});
	return _rowIdxProto;
};
/**
 * Constructor
 */
exports.create = function(json, parent) {
	return new _Prototype(json, parent);
};
});

define('syracuse-tablet/html/js/application/pageHelper',['require','exports','module','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/sdata/entities/clientContract','syracuse-tablet/html/js/helpers/prototype'],function (require, exports, module) {

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var clientContract = require('syracuse-tablet/html/js/sdata/entities/clientContract');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');

/**
 * Registered pages - Contains the page state property that is stored in history
 */
var _pages = {};
/**
 * Page types are : "html", "regular", "dashboard"
 */
var _staticPages = {
	"login": {
		// Don't remove it
		isLogin: true,
		type: "html",
		subtype: "login",
		disableAuthoring: true
	}
};
/**
 * Register a page - info.name is the id of the page
 */
function _registerPage(info) {
	if (info && info.name) {
		_pages[info.name] = info;
	} else {
		throw new Error("Bad page state");
	}
}
/**
 * Return default page info
 * 	name:	mandatory
 *  type:	optional
 */
function _getDefPageInfo(name, type) {
	if (!name || name.length == 0) throw new Error("Bad page name");
	var defInfo = {
		home: false,
		type: "regular",
		subtype: "",
		cached: false,
		refreshed: false,
		changeHash: false
	};
	defInfo.name = name;
	if (type) defInfo.type = type;
	return defInfo;
}
/**
 * Static pages are registered at the end of this module
 */
function _registerStaticPages() {
	for (var p in _staticPages) {
		_registerPage($.extend(true, {}, _getDefPageInfo(p), _staticPages[p]));
	}
}
/**
 * Returns registered page info
 */
var _getInfo = function(id, clone) {
	var i;
	i = _pages[id];
	if (i && clone === true) i = $.extend(true, {}, i);
	return i;
};
/**
 * Return rowdetail page info - Register it if not found
 * state:		page's name - rowdetail
 * options:		link attributes (data-sdata-url...)
 * currentPage:	vignette or application currentPage
 */
var _getRowdetailPage = function(state, options, currentPage) {
	options = options || {};
	if (!currentPage) throw new Error("Not null currentPage expected");
	if (!currentPage.getControl) throw new Error("Unexpected currentPage object - getControl method not found");
	var ctrlArray = currentPage.getControl(options.controlId);
	if (!ctrlArray) throw new Error("Array not found - id:" + options.controlId);
	// Page name used to store the page - current page name + path of the selected row
	var name = ctrlArray.rowDetailGetPageName(currentPage.state.name);
	var info = _getInfo(name);
	if (info) return info;
	// Register page info
	// state=rowdetail is sued to set the type property that gives the class page
	info = _getDefPageInfo(name, state);
	info.subtype = currentPage.isEditMode() ? "edit" : "details";
	_registerPage(info);
	// Read proto from array - Prototype is special -> no url because the dao comes from selected array's row
	var prototype = ctrlArray.rowDetailGetPrototype();
	var article = null;
	// Register the page meta-data into application meta-data to be compliant with other pages
	globals.registerAdditionalPage(name, prototype, article);
	// returns the new state
	return info;
};
/**
 * Add info for authoring - Mathias
 */
var _extendPageInfo = function(state) {
	if (!state.authoringName) {
		// Compute page name used by authoring
		var segs = state.name.split(".");
		var authoringName;
		if (segs.length === 5) {
			// remove dataset (e.g. SUPERV, ...)
			authoringName = segs[0] + "." + segs[1] + "." + segs[3] + "." + segs[4];
		} else {
			authoringName = state.name;
		}
		if (segs.length === 2) {
			authoringName = "syracuse.collaboration." + authoringName;
		}
		state.authoringName = authoringName;
	}
	return state;
};
/**
 *  state:			name of the page
 *  options: 		attributes of the link (data-sdata-url, data-control-id....)
 *  currentPage:	application or vignette currentPage
 */
var _getPageInfo = function(state, options, currentPage) {
	state = state || "";
	if (typeof state !== "string") return state;
	var name = state.trim();
	options = options || {};
	// clientContract first
	state = clientContract.getPageInfo(name, options);
	if (!state) {
		if (name === "rowdetail") {
			// Detail of a row - We register it if not already done
			state = _getRowdetailPage(name, options, currentPage);
		} else {
			state = _getInfo(name, true);
		}
	}
	if (!state) {
		// TODO - Remove the fall back or call it only in test application
		state = _getDefPageInfo(name);
	}
	if (options) {
		state.options = options ? $.extend(true, {}, options) : {};
		// Regular page needs gadget context - Ex create action..
		var gadgetId = options["gadget-id"];
		if (gadgetId) {
			state.options.gadget = globals.getApplication().dao.getGadget(gadgetId);
		}
	}
	if (!state.transition) {
		// Default transition
		state.transition = globals.$config("transition");
	}
	// Readable id
	state.uuid = utils.readableuid("page", state.type, state.name);
	return state;
};
/**
 * Register regular page
 * 	add subtype that comes from facet
 */
var _registerRegularPage = function(id, meta) {
	var info = _getDefPageInfo(id, "regular");
	if (meta.$page && meta.$page.$prototype) {
		var facet = meta.$page.$prototype.$type;
		if (!facet) {
			// if no type we take $url - in test representation  $type is not set
			facet = meta.$page.$prototype.$url;
		}
		info.subtype = facet.substring(facet.lastIndexOf('.$') + 2);
		if (!info.subtype) {
			throw new Error("unexpected facet for page " + id + "\n$url=" + meta.$page.$prototype.$url);
		}
	} else {
		info.subtype = "unknown";
	}
	_registerPage(info);
	// returns the new state
	return info;
};
/**
 * Register dashboard page
 */
var _registerDashboard = function(id, meta, appMetaData) {
	var info = $.extend(true, {}, _getDefPageInfo(globals.getDashboardName(meta.$dashboardName), "dashboard"), meta.$pageInfo);
	if (appMetaData.$application.$homeDashboard.dashboardName === meta.$dashboardName) {
		// welcome -> main app home page - home -> mobile ap home page (customers...)
		info.subtype = info.isWelcomePage ? "welcome" : "home";
		info.isHomeDashboard = true;
	} else {
		info.isHomeDashboard = false;
		info.subtype = "std";
	}
	// Name is used for readable dom ids - info guarantee unic ids 
	info.dashboardUuid = id;
	_registerPage(info);
};
/**
 *  Register the pages of a Syracuse Mobile Application
 *  RegisterRegularPage is also called when a prototype has been fetched (test representation are loading on demand)
 **/
var _registerPages = function(appMetaData) {
	_pages = {};
	_registerStaticPages();
	if (!appMetaData) return;
	if (appMetaData.$dashboards) {
		for (var p in appMetaData.$dashboards) {
			_registerDashboard(p, appMetaData.$dashboards[p], appMetaData);
		}
	}
	if (appMetaData.$pages) {
		for (var p in appMetaData.$pages) {
			_registerRegularPage(p, appMetaData.$pages[p]);
		}
	}
};

/**
 * Remove child pages of $$elmt
 * arguments : Pages to exclude
 **/
var _removeAllPages = function($$elmt) {
	if (!$$elmt) return;
	if (!$$elmt.jquery) $$elmt = $($$elmt);
	var exclude = Array.prototype.slice.call(arguments, 1);
	$$elmt.children(".s-m-page").each(function(idx) {
		var page = $(this).smPageController();
		if (page && Array.prototype.indexOf.call(exclude, page) == -1) {
			page.destroy();
		}
	});
};

exports.getPageInfo = function(state, options, currentPage) {
	return _extendPageInfo(_getPageInfo(state, options, currentPage));
};
exports.registerPages = _registerPages;
exports.removeAllPages = _removeAllPages;
exports.registerRegularPage = _registerRegularPage;
/* INIT */
_registerStaticPages();
});

define('syracuse-tablet/html/js/authoring/authoringSData',['require','exports','module','syracuse-tablet/html/js/sdata/sdataHttp'],function (require, exports, module) {

var sdataHttp = require('syracuse-tablet/html/js/sdata/sdataHttp');
var _DEVICE_NAME = "mobile";

/*
 * pageData: {
 *   application: "x3",
 *   contract: "erp",
 *   representation: "BPCUSTOMERM"
 *   facet: "$details"
 * }
 */
exports.getPageVariants = function(pageData) {
	return $.smResolve()
		.then(function() {
			pageData = $.extend(true, {}, {
				device: _DEVICE_NAME
			}, pageData);

			if (!pageData.application || !pageData.contract || !pageData.representation || !pageData.facet || !pageData.device) {
				return $.smReject("Not all mandatory parameters present: " + JSON.stringify(pageData));
			}

			var code = [pageData.application, pageData.contract, pageData.representation, pageData.facet, pageData.device].join(".");
			var req = {
				url: "/sdata/syracuse/collaboration/syracuse/pageDefs(code%20eq%20'" + code + "')?representation=pageDef.$details"
			};

			return sdataHttp.send(req)
				.then(function(response) {
					if (response && response.isSuccess) {
						return response.responseJSON.variants || [];
					}
					if (response.status === 404) {
						return [];
					}
					return $.smReject("Unknown error");
				});
		});
};

exports.deletePageVariants = function(pageData) {
	return $.smResolve()
		.then(function() {
			pageData = $.extend(true, {}, {
				device: _DEVICE_NAME
			}, pageData);

			if (!pageData.application || !pageData.contract || !pageData.representation || !pageData.facet || !pageData.device) {
				return $.smReject("Not all mandatory parameters present: " + JSON.stringify(pageData));
			}

			var code = [pageData.application, pageData.contract, pageData.representation, pageData.facet, pageData.device].join(".");
			var req = {
				url: "/sdata/syracuse/collaboration/syracuse/pageDefs(code%20eq%20'" + code + "')?representation=pageDef.$edit",
				method: "DELETE"
			};

			return sdataHttp.send(req)
				.then(function(response) {
					if (response && response.isSuccess) {
						return;
					}
					return $.smReject("Unknown error");
				});
		});
};

exports.createPageDefinitionWC = function(opts) {
	var params = {
		"pageContext": [opts.application, opts.contract, opts.representation, opts.facet].join("."),
		"device": _DEVICE_NAME,
		"representation": "pageAuth.$edit"
	};

	var url = "/sdata/syracuse/collaboration/syracuse/pageAuths" +
		(opts.variant != null ? ("('" + opts.variant + "')") : "/$template") +
		"/$workingCopies?" +
		Object.keys(params).map(function(key) {
			return key + "=" + params[key];
		}).join("&");

	var req = {
		url: url,
		method: "POST"
	};

	return sdataHttp.send(req)
		.then(function(response) {
			if (response && response.isSuccess) {
				return response.responseJSON;
			}
			return $.smReject("Unknown error");
		});
};
exports.savePageDefinitionWC = function(opts, wc) {
	var parameters = {
		"roles": opts.roles,
		"users": opts.users,
		"endpoints": opts.endpoints,
		"saveAsOption": opts.saveAsOption,
		"isFactory": false,
		"isModelRepresentation": false,
		"personalCopy": false,
		"variantCode": opts.variantCode,
		"variantTitle": opts.variantTitle,
		"variantDescription": opts.variantDescription
	};
	switch (opts.saveAsOption) {
		case "factory_variant":
			parameters.isFactory = true;
			break;
		case "personal_copy":
			parameters.personalCopy = true;
			break;
		case "shared_copy":
			break;
		case "global_variant":
			break;
	}

	wc.$actions = {};
	var save;
	if (opts.variant) {
		save = wc.$actions["$save"] = {};
		delete parameters.saveAsOption;
	} else {
		save = wc.$actions["saveAs"] = {};
	}
	save.$isRequested = true;
	save.$parameters = parameters;

	var req = {
		url: wc.$url,
		method: "PUT",
		send: wc
	};
	return sdataHttp.send(req)
		.then(function(response) {
			if (response && response.isSuccess) {
				return response.responseJSON;
			}
			return $.smReject("Unknown error");
		});
};

exports.savePageDefinition = function(opts) {
	return exports.createPageDefinitionWC(opts)
		.then(function(wc) {
			var send = $.extend(true, {}, wc);
			send.content = send.content || {};
			send.content.$article = opts.article;

			return exports.savePageDefinitionWC(opts, send)
				.then(function(wcSaved) {
					var data = $.extend(true, {}, wc, wcSaved);
					var diags = [];
					_extractDiag(data, diags);
					return {
						data: data,
						diags: diags
					};
				})
				.fail(function(e) {
					return $.smReject({
						data: null,
						diags: [{
							$severity: "error",
							$message: "" + e
						}]
					});
				});
		});
};

function _extractDiag(data, diags) {
	Object.keys(data).forEach(function(key) {
		var value = data[key];
		if (key === "$diagnoses") {
			value.forEach(function(d) {
				diags.push(d);
			});
		} else {
			if (value && typeof value === "object") {
				_extractDiag(value, diags);
			}
		}
	});
}
});

define('syracuse-tablet/html/js/authoring/authoringHtml',['require','exports','module'],function (require, exports, module) {

/*
 * Authoring panel main layout
 */
var _templates = {
	authPanelRightStructure: '\
		<div class="s-m-site-auth-panel-content"> \
			<ul class="nav nav-pills" role="tablist"> \
				<li><a href="#authPanelControl" role="tab" data-toggle="tab">{{label_control}}</a></li> \
				<li class="active"><a href="#authPanelEdit" role="tab" data-toggle="tab">{{label_edit}}</a></li> \
				<li><a href="#authPanelSave" role="tab" data-toggle="tab">{{label_save}}</a></li> \
			</ul> \
			<div class="tab-content"> \
				<div id="authPanelControl" class="tab-pane panel-body active"> \
		 			<div class="s-m-auth-prop-list"> \
						<label class="control-label">{{label_control_title}}</label> \
				    	<p class="form-control-static" id="authPanelControlTitle"> </p> \
						<label class="control-label">{{label_control_type}}</label> \
						<p class="form-control-static" id="authPanelControlType"> </p> \
					</div> \
					<div id="authPanelControlSimple"> \
					</div> \
				</div> \
				<div id="authPanelEdit" class="tab-pane panel-body"> \
					<label id="authEditName"></label> \
					<textarea  id="authJSONPage" type="text"></textarea> \
					<button type="button" id="authPanelBtnPageApply" class="btn pull-right">{{label_apply}}</button> \
				</div> \
				<div id="authPanelSave" class="tab-pane panel-body"> \
					<label id="authPageName"></label> \
					<div class="form-group"> \
						<label>{{label_code}}</label> \
						<input class="form-control" id="authCode" value="{{authCodeDefault}}" /> \
					</div> \
					<div class="form-group"> \
						<label>{{label_title}}</label> \
						<input class="form-control" id="authTitle" value="{{authTitleDefault}}" /> \
					</div> \
					<div class="form-group"> \
						<label>{{label_description}}</label> \
						<input class="form-control" id="authDescription" value="{{authDescriptionDefault}}"  /> \
					</div> \
					<label>{{label_saveas_option}}</label> \
					<div class="btn-group btn-group-justified" data-toggle="buttons"> \
						<div class="btn-group"> \
							<label class="btn btn-primary"> \
								<input type="radio" name="options" id="personal_copy" checked>{{label_personal}} \
							</label> \
						</div> \
						<div class="btn-group"> \
							<label class="btn btn-primary"> \
								<input type="radio" name="options" id="global_variant"> {{label_global}} \
							</label> \
						</div> \
						<div class="btn-group"> \
							<label class="btn btn-primary active"> \
								<input type="radio" name="options" id="factory_variant">{{label_factory}} \
							</label> \
						</div> \
					</div> \
					<button type="button" id="authPanelBtnSave" class="btn pull-right">{{label_save}}</button> \
				</div> \
			</div> \
		</div>',

	authPanelLeftStructure: '\
		<div class="s-m-site-auth-panel-content"> \
			<div class="btn-group btn-group-justified" data-toggle="buttons" id="auth_device_size"> \
				<div class="btn-group"> \
					<label class="btn btn-primary"> \
						<input type="radio" name="device_options_size" id="auth_device_phone">{{label_phone}} \
					</label> \
				</div> \
				<div class="btn-group"> \
					<label class="btn btn-primary"> \
						<input type="radio" name="device_options_size" id="auth_device_minitablet">{{label_mini_tablet}} \
					</label> \
				</div> \
				<div class="btn-group"> \
					<label class="btn btn-primary active"> \
						<input type="radio" name="device_options_size" id="auth_device_tablet" checked>{{label_tablet}} \
					</label> \
				</div> \
			</div> \
			<div class="btn-group btn-group-justified" data-toggle="buttons" id="auth_device_orientation"> \
				<div class="btn-group"> \
					<label class="btn btn-primary active"> \
						<input type="radio" name="device_options_orientation" id="auth_orientation_landscape" checked>{{label_landscape}} \
					</label> \
				</div> \
				<div class="btn-group"> \
					<label class="btn btn-primary"> \
						<input type="radio" name="device_options_orientation" id="auth_orientation_portrait">{{label_portrait}} \
					</label> \
				</div> \
			</div> \
		</div>',

	authPanelPropertyGroup: ' \
		<div class="panel panel-primary s-m-panel-auth-prop"> \
			<div class="panel-heading" role="tab" id="heading_{{id}}"> \
				<h4 class="panel-title"> \
					<a data-toggle="collapse" data-parent="#accordion" href="#collapse_{{id}}" {{#if expanded}} aria-expanded="true"{{/if}} aria-controls="collapse_{{id}}" {{#unless expanded}}class="collapsed"{{/unless}}>{{label}}</a> \
				</h4> \
			</div> \
			<div id="collapse_{{id}}" class="panel-collapse collapse {{#if expanded}}in{{/if}}" role="tabpanel" aria-labelledby="heading_{{id}}"> \
			</div> \
		</div>',

	authPanelPropertyRadio: ' \
		<div class="btn-group" data-toggle="buttons" style="width: 100%;"> \
			{{#each options}} \
				<div class="btn-group" style="width: 100%; display: {{this.display}};" id="{{this.id}}"> \
					<label class="s-m-auth-btn-radio-icon s-m-auth-btn-block" id="{{this.id}}_lab" data-s-m-auth-value="{{this.value}}"> \
						<input type="radio" name="{{group}}" id="{{this.id}}">{{this.label}} \
					</label> \
				</div> \
			{{/each}} \
		</div>',

	authPanelPropertyRadioColor: ' \
		<div class="btn-group" data-toggle="buttons" style="width: 100%;"> \
			{{#each options}} \
				<div class="btn-group" style="width: 100%;"> \
					<label class="s-m-auth-btn-radio-icon s-m-auth-btn-block" id="{{this.id}}_lab" data-s-m-auth-value="{{this.value}}"> \
						<input type="radio" name="{{group}}" id="{{this.id}}">{{this.label}} \
						<div class="s-m-auth-btn-radio-color s-m-bg-{{color}} "></div> \
					</label> \
				</div> \
			{{/each}} \
		</div>',

	authPanelPropertyInput: ' \
			<div class="form-group"> \
				<input class="form-control" id="{{id}}" value="{{value}}" /> \
			</div>',

	authPanelPropertyCellSize: ' \
		{{#each sizes}} \
			<label class="{{class}}">{{this.label}}</label> \
			<div class="btn-group x_btn-group-justified" data-toggle="buttons" style="width: 100%;"> \
				{{#each ../values}} \
					<div class="btn-group"> \
						<label class="btn btn-default btn-lg" id="{{this.id}}_lab" data-s-m-auth-prop="{{../this.prop}}" data-s-m-auth-value="{{this}}"> \
							<input type="radio" name="{{group}}" id="{{../this.prop}}={{this}}">{{this}} \
						</label> \
					</div> \
				{{/each}} \
			</div> \
		{{/each}}',

	authPanelPropertyJSON: ' \
		<div class="form-group"> \
			<textarea class="form-control" id="{{id}}" rows="10">{{value}}</textarea> \
		</div>'
};

var _compiled = {};

function _getCompiled(name) {
	var c = _compiled[name];
	if (c) {
		return c;
	}

	var t = _templates[name];
	c = Handlebars.compile(t);
	_compiled[name] = c;
	return c;
}

exports.execute = function(name, ctx) {
	var c = _getCompiled(name);
	return c(ctx);
};
});

define('syracuse-tablet/html/js/authoring/authoringVal',['require','exports','module','syracuse-tablet/html/js/helpers/locale','syracuse-tablet/html/js/ui/modal'],function (require, exports, module) {

var locale = require('syracuse-tablet/html/js/helpers/locale');
var modal = require('syracuse-tablet/html/js/ui/modal');

/*
 *
 * Simple article validation module
 *
 */


exports.validateJSON = function(fullPage, jsonText, properties) {
	var obj;
	try {
		obj = JSON.parse(jsonText);

		var errors = _validate(fullPage, obj, properties);
		if (errors.length > 0) {
			var text = "\n" + errors.join("\n");
			modal.info(locale.text("auth.panel.save_error_title"), locale.text("auth.panel.save_error_json") + text);
		} else {
			return obj;
		}
	} catch (e) {
		modal.info(locale.text("auth.panel.save_error_title"), locale.text("auth.panel.save_error_json"));
	}
};

/*
 * display $items and $article nodes at the end of JSON
 */
exports.toSortedJSON = function(obj) {
	var toJSON = function() {
		var self = this;
		var that = {};
		var $items;
		var $article;

		Object.keys(self).forEach(function(key) {
			if (key === "$items") {
				$items = self[key];
			} else if (key === "$article") {
				$article = self[key];
			} else {
				that[key] = self[key];
			}
		});
		if ($article) {
			that.$article = $article;
		}
		if ($items) {
			that.$items = $items;
		}
		return that;
	};
	// Step one: Hook property ordering
	JSON.stringify(obj,
		function replacer(key, value) {
			if ($.isPlainObject(value)) {
				value.toJSON = toJSON;
			}
			return value;
		});
	// Build json
	var str = JSON.stringify(obj, null, " ");
	return str;
};

exports.injectJSON = function(data, articleSelection) {
	// remove old keys of node
	Object.keys(data.articleSelection).forEach(function(key) {
		delete data.articleSelection[key];
	});
	// Inject JSON into full page json tree
	Object.keys(articleSelection).forEach(function(key) {
		data.articleSelection[key] = articleSelection[key];
	});
};

/*
 * fullPage: true = article is an object describing a full page so also nesting constraints can be checked
 * fullPage: false = article is an object describing a control or container so nesting constraints cannot be fully checked
 * article: Article object
 */
function _validate(fullPage, article, properties) {

	var errors = [];
	try {
		_checkNode(fullPage, null, article, properties, errors);
	} catch (e) {
		errors.push(e.message);
	}
	return errors;
};

var _propertiesToCheck = {
	$layoutType: _checkLayoutType,
	$rowHeight: _checkRowHeight,
	$bgColor: _checkBgColor,
	$size: _checkTileSize,
	$widthXs: _checkCellSize,
	$widthSm: _checkCellSize,
	$widthMd: _checkCellSize,
	$widthLg: _checkCellSize
};

function _checkNode(fullPage, parent, node, properties, errors) {

	Object.keys(_propertiesToCheck).forEach(function(key) {
		if (node[key] !== undefined) {
			_propertiesToCheck[key](fullPage, parent, node, key, properties, errors);
		}
	});

	var children;
	if (node.$items) {
		children = node.$items;
	} else if (node.$article) {
		children = [node.$article];
	}
	if (children) {
		children.forEach(function(child) {
			_checkNode(fullPage, node, child, properties, errors);
		});
	}
}

function _checkLayoutType(fullPage, parent, node, key, properties, errors) {
	var type = node.$layoutType;
	var ptype = parent && parent.$layoutType;
	var known = ["stack", "row", "cell", "hub", "hubGroup", "tile"];
	if (known.indexOf(type) < 0) {
		errors.push(locale.text("auth.err.unknown.layout", [type]));
		return;
	}
	if (!fullPage) {
		return;
	}
	switch (type) {
		case "hub":
			if (parent != null) {
				errors.push(locale.text("auth.err.hub.notroot"));
			}
			break;
		case "hubGroup":
			if (ptype != "hub") {
				errors.push(locale.text("auth.err.hubgroup.nohub"));
			}
			break;
		case "tile":
			if (ptype != "hubGroup") {
				errors.push(locale.text("auth.err.tile.nohubgroup"));
			}
			break;
	}
}

function _checkRowHeight(fullPage, parent, node, key, properties, errors) {
	var value = node[key];
	if (!value.match(/^[0-9]+px$/)) {
		errors.push(locale.text("auth.err.rowheight", [value]));
	}
}

function _checkBgColor(fullPage, parent, node, key, properties, errors) {
	var value = node[key];

	var valid = properties.tileColor.values.map(function(e) {
		return e.value;
	});
	if (valid.indexOf(value) < 0) {
		errors.push(locale.text("auth.err.bgColor", [key, valid.join(", "), value]));
	}
}

function _checkCellSize(fullPage, parent, node, key, properties, errors) {
	var value = +node[key];
	if (!(value >= 1 && value <= 12)) {
		errors.push(locale.text("auth.err.cellSize", [key, value]));
	}
}

function _checkTileSize(fullPage, parent, node, key, properties, errors) {
	var value = node[key];
	var valid = properties.tileSize.values.map(function(e) {
		return e.value;
	});

	if (valid.indexOf(value) < 0) {
		errors.push(locale.text("auth.err.tileSize", [valid.join(", "), value]));
	}
}
});

define('syracuse-tablet/html/js/authoring/authoringProperties',['require','exports','module','syracuse-tablet/html/js/helpers/locale','syracuse-tablet/html/js/authoring/authoringHtml','syracuse-tablet/html/js/helpers/notifications','syracuse-tablet/html/js/authoring/authoringVal'],function (require, exports, module) {

var locale = require('syracuse-tablet/html/js/helpers/locale');
var authHtml = require('syracuse-tablet/html/js/authoring/authoringHtml');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var authVal = require('syracuse-tablet/html/js/authoring/authoringVal');

var _properties = {
	/*
	 * Titel hidden
	 */
	"isTitleHidden": {
		"key": "$isTitleHidden",
		"default": false,
		"values": [{
			"value": true
		}, {
			"value": false
		}],
		createMarkup: _createMarkupRadio
	},

	/* 
	 * Position of label
	 * left:   <label> <value>
	 *
	 * top:    <label>
	 * 		   <value>
	 */
	"labelPosition": {
		"key": "$labelPosition",
		"default": "left",
		"values": [{
			"value": "left"
		}, {
			"value": "top"
		}],
		createMarkup: _createMarkupRadio
	},

	/* 
	 * Text alignment of label
	 * left:   |<label>      |
	 * right:  |      <value>|
	 */
	"labelAlign": {
		"key": "$labelAlign",
		"default": "left",
		"values": [{
			"value": "left"
		}, {
			"value": "center",
			"isHidden": true
		}, {
			"value": "right"
		}],
		createMarkup: _createMarkupRadio,
		refreshMarkup: _refreshMarkupRadio
	},

	/* 
	 * Theme for control
	 */
	"theme": {
		"key": "$theme",
		"default": "a",
		"values": [{
			"value": "a"
		}, {
			"value": "b"
		}, {
			"value": "c"
		}],
		createMarkup: _createMarkupRadio
	},

	/*
	 * Reference field description position
	 * bottom: <value>
	 *         <desc>
	 *
	 * right:  <value> <desc>
	 * left:   <desc> <value>
	 *
	 * top:    <desc>
	 *         <value>
	 */
	"refDescPosition": {
		"key": "$refDescPosition",
		"default": "right",
		"values": [{
			"value": "bottom"
		}, {
			"value": "right"
		}, {
			"value": "left"
		}, {
			"value": "top"
		}, {
			"value": "none"
		}],
		createMarkup: _createMarkupRadio
	},

	/*
	 * Reference field description format
	 * desc:      <desc>
	 *         
	 * title:     <title>

	 * desctitle: <desc> - <title>
	 * -> If both values are equal, skip display of second value
	 * 
	 * titledesc: <title> - <desc>
	 * -> If both values are equal, skip display of second value
	 */
	"refDescFormat": {
		"key": "$refDescFormat",
		"default": "desc",
		"values": [{
			"value": "desc"
		}, {
			"value": "title"
		}, {
			"value": "desctitle"
		}, {
			"value": "titledesc"
		}],
		createMarkup: _createMarkupRadio
	},
	/*
	 * Color of tile and layout cell
	 */
	"tileColor": {
		"key": "$bgColor",
		"default": "lime",
		"values": [{
			"value": "transparent"
		}, {
			"value": "purple"
		}, {
			"value": "magenta"
		}, {
			"value": "teal"
		}, {
			"value": "brown"
		}, {
			"value": "lime"
		}, {
			"value": "pink"
		}, {
			"value": "orange"
		}, {
			"value": "blue"
		}, {
			"value": "red"
		}, {
			"value": "green"
		}],
		createMarkup: _createMarkupRadioBgColor
	},

	/*
	 * Size of tile
	 */
	"tileSize": {
		"key": "$size",
		"default": "medium",
		"values": [{
			"value": "small"
		}, {
			"value": "medium"
		}, {
			"value": "wide"
		}, {
			"value": "large"
		}, {
			"value": "full"
		}],
		createMarkup: _createMarkupRadio
	},

	/*
	 * Tilel of layout node
	 */
	"layoutTitle": {
		"key": "$title",
		"default": "",
		createMarkup: _createMarkupInput
	},

	/*
	 * Height of layout stack
	 */
	"rowHeight": {
		"key": "$rowHeight",
		"default": "200px",
		createMarkup: _createMarkupInput
	},

	/*
	 * Size of tile
	 *
	 * Handles the following elements: $widthXs, $widthSm, $widthMd, $widthLg
	 */
	"cellSize": {
		"default": 4,
		createMarkup: _createMarkupCellSize
	},

	"arrayDisplay": {
		"key": "$display",
		"default": "table",
		values: [{
			value: "table"
		}, {
			value: "cardV"
		}, {
			value: "cardH"
		}],
		createMarkup: _createMarkupRadio
	},

	// only cardV	
	"arrayCardsPerRow": {
		"key": "$cardsPerRow",
		"default": "1",
		values: [{
			value: "1"
		}, {
			value: "2"
		}, {
			value: "3"
		}],
		createMarkup: _createMarkupRadio,
		refreshMarkup: _refreshMarkupRadio
	},

	// only cardH
	"arrayCardsPerLine": {
		"key": "$cardsPerLine",
		"default": "1",
		values: [{
			value: "1"
		}, {
			value: "2"
		}, {
			value: "3"
		}],
		createMarkup: _createMarkupRadio,
		refreshMarkup: _refreshMarkupRadio
	},

	// only cardH
	"arrayEmptyCells": {
		"key": "$emptycell",
		"default": true,
		values: [{
			value: "filled"
		}, {
			value: "withtitle"
		}, {
			value: "nodisplay"
		}],
		createMarkup: _createMarkupRadio,
		refreshMarkup: _refreshMarkupRadio
	},

	/*
	 * Full JSON article for experts
	 */
	"JSON": {
		"key": "$JSON",
		createMarkup: _createMarkupJSON
	},
};

var _initProperties;
exports.initProperties = function(helpers) {
	/* 
	 * TODO: Handle language change
	 */
	if (_initProperties) {
		return;
	}

	var pre = "auth";
	Object.keys(_properties).forEach(function(prop) {
		var lk = pre + "." + prop;
		var p = _properties[prop];
		p.label = locale.text(lk);
		p.name = prop;
		if (p.values) {
			p.values.forEach(function(v) {
				var vk = lk + "." + ("" + v.value);
				v.label = locale.text(vk);
			});
		}
	});
	_initProperties = true;
};

exports.getAllProperties = function() {
	return _properties;
};

/*
 * Which layout node supports which properties to edit in authoring
 */
var _layoutProps = {
	"stack": [],
	"row": [_properties.rowHeight],
	"hub-group": [_properties.layoutTitle],
	"tile": [_properties.tileColor, _properties.tileSize],
	"cell": [_properties.tileColor, _properties.cellSize]
};

exports.getProperties = function(sel, data, controller) {

	var $$elmt = sel.$$elmt;
	var props = [];
	/*
	 * Layout nodes have simple static properties
	 */
	if ($$elmt.hasClass("s-m-layout")) {
		Object.keys(_layoutProps).some(function(key) {
			var cls = "s-m-" + key;
			if ($$elmt.hasClass(cls)) {
				_layoutProps[key].forEach(function(p) {
					props.push(p);
				});
				return true;
			}
			return false;
		});

		// Always add JSON editting
		props.push(_properties.JSON);
	} else if ($$elmt.hasClass("s-m-field")) {
		// Properties for all types of fields
		var labelAlign = _getLabelAlign(sel, data, controller);
		var props = [_properties.isTitleHidden, _properties.labelPosition, labelAlign, _properties.theme];

		// Properties for reference fields only 
		if (data.type === "reference") {
			props.push(_properties.refDescFormat);
			props.push(_properties.refDescPosition);
		}
		// Always add JSON editting
		props.push(_properties.JSON);
	} else if ($$elmt.hasClass("s-m-array")) {
		var labelAlign = _getLabelAlign(sel, data, controller);
		var cardsPerRow = _getArrayCardsPerRow(sel, data, controller);
		var cardsPerLine = _getArrayCardsPerLine(sel, data, controller);
		var displayEmptyCells = _getArrayEmptyCells(sel, data, controller);

		var props = [_properties.isTitleHidden, _properties.labelPosition, labelAlign, _properties.theme, _properties.arrayDisplay, cardsPerRow, cardsPerLine, displayEmptyCells];

		// Always add JSON editting
		props.push(_properties.JSON);
	}

	return props;
};

// Centered label is only possible on top or bottom positioned label
function _getLabelAlign(sel, data, controller) {
	var valPos = _getValueOrDefault(_properties.labelPosition, sel, data);

	var props = $.extend(true, {}, _properties.labelAlign);
	props.values.forEach(function(val) {
		if (valPos === "left" && val.value === "center") {
			val.isHidden = true;
		} else {
			val.isHidden = false;
		}
	});
	return props;
}

//Only for cardV
function _getArrayCardsPerRow(sel, data) {
	var valPos = _getValueOrDefault(_properties.arrayDisplay, sel, data);
	if (valPos !== "cardV") {
		return _propertyValuesHideAll(_properties.arrayCardsPerRow, true);
	} else {
		return _propertyValuesHideAll(_properties.arrayCardsPerRow, false);
	}
}

//Only for cardH
function _getArrayCardsPerLine(sel, data) {
	var valPos = _getValueOrDefault(_properties.arrayDisplay, sel, data);
	if (valPos !== "cardH") {
		return _propertyValuesHideAll(_properties.arrayCardsPerLine, true);
	} else {
		return _propertyValuesHideAll(_properties.arrayCardsPerLine, false);
	}
}

//Only for card<xxx>
function _getArrayEmptyCells(sel, data) {
	var valPos = _getValueOrDefault(_properties.arrayDisplay, sel, data);
	if (valPos === "table") {
		return _propertyValuesHideAll(_properties.arrayEmptyCells, true);
	} else {
		return _propertyValuesHideAll(_properties.arrayEmptyCells, false);
	}
}

/*
 * Enable or disable all possible values of a authoring property
 */
function _propertyValuesHideAll(property, hide) {
	var props = $.extend(true, {}, property);
	props.values.forEach(function(val) {
		val.isHidden = hide;
	});
	return props;
}

function _getValueOrDefault(prop, sel, data) {
	var value = data.articleSelection && data.articleSelection[prop.key];
	value = (value != null) ? value : prop["default"];
	return value;
}

function _setValue(prop, sel, data, value) {
	data.articleSelection[prop.key] = value;
}

function _createMarkupRadio($$parent, prop, sel, data) {

	var ctx = {
		group: "auth_opt_" + prop.name,
		options: []
	};

	var value = _getValueOrDefault(prop, sel, data);
	var allHidden = true;

	prop.values.forEach(function(v) {
		ctx.options.push({
			id: ctx.group + "_" + v.value,
			value: "" + v.value,
			label: v.label,
			display: (v.isHidden ? "none" : "block")
		});
		allHidden = allHidden && v.isHidden;
	});

	var html = authHtml.execute("authPanelPropertyRadio", ctx);
	var $$panel = $(html);
	$("label[data-s-m-auth-value='" + ("" + value) + "']", $$panel).eq(0).button("toggle");
	$("label", $$panel).on("click", function(e) {
		var $$ct = $(e.currentTarget);
		var value = $$ct.attr("data-s-m-auth-value");
		$$ct.eq(0).button("toggle");

		/*
		 * Important! Use boolean datatype for boolean properties!
		 */
		if (value === "true") {
			value = true;
		} else if (value === "false") {
			value = false;
		}
		_setValue(prop, sel, data, value);
		_notifyChangePropUI($$parent, sel, data);
	});
	$$parent.append($$panel);

	if (allHidden) {
		$$parent.parent(".s-m-panel-auth-prop").hide();
	} else {
		$$parent.parent(".s-m-panel-auth-prop").show();
	}
}

function _refreshMarkupRadio($$parent, prop, sel, data) {
	var allHidden = true;
	prop.values.forEach(function(v) {
		var id = "auth_opt_" + prop.name + "_" + v.value;
		var $$btn = $("#" + id, $$parent);
		var display = v.isHidden ? "none" : "block";
		$$btn.css("display", display);
		allHidden = allHidden && v.isHidden;
	});
	if (allHidden) {
		$$parent.parent(".s-m-panel-auth-prop").hide();
	} else {
		$$parent.parent(".s-m-panel-auth-prop").show();
	}
}

function _createMarkupRadioBgColor($$parent, prop, sel, data) {

	var ctx = {
		group: "auth_opt_" + prop.name,
		options: []
	};

	var value = _getValueOrDefault(prop, sel, data);

	prop.values.forEach(function(v) {
		ctx.options.push({
			id: ctx.group + "_" + v.value,
			value: "" + v.value,
			label: v.label,
			color: v.value
		});
	});

	var html = authHtml.execute("authPanelPropertyRadioColor", ctx);
	var $$panel = $(html);
	$("label[data-s-m-auth-value='" + ("" + value) + "']", $$panel).eq(0).button("toggle");
	$("label", $$panel).on("click", function(e) {
		var $$ct = $(e.currentTarget);
		var value = $$ct.attr("data-s-m-auth-value");
		$$ct.eq(0).button("toggle");

		/*
		 * Important! Use boolean datatype for boolean properties!
		 */
		if (value === "true") {
			value = true;
		} else if (value === "false") {
			value = false;
		}
		_setValue(prop, sel, data, value);
		_notifyChangePropUI($$parent, sel, data);
	});
	$$parent.append($$panel);
}


function _createMarkupInput($$parent, prop, sel, data) {
	var value = _getValueOrDefault(prop, sel, data);
	var html = authHtml.execute("authPanelPropertyInput", {
		id: "auth_opt_" + prop.name,
		value: value
	});
	var $$panel = $(html);
	$("input", $$panel).blur(function() {
		var value = $(this).val();
		_setValue(prop, sel, data, value);
		_notifyChangePropUI($$parent, sel, data);
	});
	$$parent.append($$panel);
}

function _createMarkupCellSize($$parent, prop, sel, data) {
	var values = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "12"];
	var sizes = [{
		"prop": "widthXs",
		"label": locale.text("auth.cellSize.$widthXs"),
		"class": "s-m-auth-highlight-xs"
	}, {
		"prop": "widthSm",
		"label": locale.text("auth.cellSize.$widthSm"),
		"class": "s-m-auth-highlight-sm"
	}, {
		"prop": "widthMd",
		"label": locale.text("auth.cellSize.$widthMd"),
		"class": "s-m-auth-highlight-md"
	}, {
		"prop": "widthLg",
		"label": locale.text("auth.cellSize.$widthLg"),
		"class": "s-m-auth-highlight-lg"
	}];

	var html = authHtml.execute("authPanelPropertyCellSize", {
		id: "auth_opt_" + prop.name,
		sizes: sizes,
		values: values
	});
	var $$panel = $(html);
	var last = "12";
	sizes.forEach(function(size) {
		var value = data.articleSelection && data.articleSelection["$" + size.prop];
		value = value || last;
		last = value;
		$("label[data-s-m-auth-prop='" + size.prop + "'][data-s-m-auth-value='" + value + "']", $$panel).button("toggle");
	});

	$("label", $$panel).on("click", function(e) {
		var $$ct = $(e.currentTarget);
		$$ct.eq(0).button("toggle");
		sizes.forEach(function(size) {
			$$ct = $$panel.find("label.active[data-s-m-auth-prop='" + size.prop + "']");
			if ($$ct.length > 0) {
				var value = $$ct.attr("data-s-m-auth-value");
				data.articleSelection["$" + size.prop] = value;
			}
		});
		_notifyChangePropUI($$parent, sel, data);
	});
	$$parent.append($$panel);
}

function _createMarkupJSON($$parent, prop, sel, data) {
	var value = authVal.toSortedJSON(data.articleSelection);
	var html = authHtml.execute("authPanelPropertyJSON", {
		id: "auth_opt_" + prop.name,
		value: value
	});
	var $$panel = $(html);
	$("textarea", $$panel).blur(function() {
		var value = $(this).val();
		var obj = authVal.validateJSON(false, value, _properties);
		if (obj) {
			authVal.injectJSON(data, obj);
			if (authVal.validate(true, authVal.toSortedJSON(data.articlePage)) != null) {
				_notifyChangePropUI($$parent, sel, data);
			}
		}
	});
	$$parent.append($$panel);
}

function _notifyChangePropUI($$parent, sel, data) {
	var $$json = $("textarea#auth_opt_JSON");
	$$json.val(authVal.toSortedJSON(data.articleSelection));
	notifications.publish(["sm.auth.change.prop.ui"], authVal.toSortedJSON(data.articlePage));
}

exports.properties = _properties;
});

define('syracuse-tablet/html/js/authoring/authoringHelpers',['require','exports','module','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/locale','syracuse-tablet/html/js/authoring/authoringSData','syracuse-tablet/html/js/ui/modal','syracuse-tablet/html/js/authoring/authoringProperties','syracuse-tablet/html/js/authoring/authoringHtml','syracuse-tablet/html/js/helpers/notifications'],function (require, exports, module) {

var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var authoringSData = require('syracuse-tablet/html/js/authoring/authoringSData');
var modal = require('syracuse-tablet/html/js/ui/modal');
var authProps = require('syracuse-tablet/html/js/authoring/authoringProperties');
var authHtml = require('syracuse-tablet/html/js/authoring/authoringHtml');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _lastHoverElement;
var _openPanels = [];

//Controls and layout classes that cannot be selected during authoring
var _elementsNoAuthoring = [".s-m-vignette", ".s-m-hub", ".s-m-array .s-m-control", ".s-m-array .s-m-layout"];

exports.enableAuthCss = function() {
	$(".s-m-control").addClass("s-m-auth");
	$(".s-m-layout").addClass("s-m-auth");
	_elementsNoAuthoring.forEach(function(e) {
		$(e).removeClass("s-m-auth");
	});

	$(".s-m-auth").on("click", _OnSelectionChange);

	/*
	$(".s-m-auth").draggable({
		revert: function($$drop) {
			return "invalid";
		} 
	});
	$(".s-m-auth.s-m-layout").droppable({
		greedy: true,
		hoverClass: "s-m-auth-hover-droptarget",
		drop: function(event, ui) {
			//return false;
			return true;
		},
		accept: function($$dragable) {
			
		}
	});
	 */

	$(".s-m-auth").mouseover(function(e) {
		var o = $(e.currentTarget);
		if (_lastHoverElement) {
			_lastHoverElement.removeClass("s-m-auth-hover");
		}
		o.addClass("s-m-auth-hover");
		_lastHoverElement = o;
		return false;
	});
	$(".s-m-auth").mouseout(function(e) {
		var o = $(e.currentTarget);
		o.removeClass("s-m-auth-hover");
	});
};

exports.disableAuthCss = function() {
	$(".s-m-auth").off("click", _OnSelectionChange);
	$(".s-m-auth").removeClass("s-m-auth");
};

exports.selectElement = function(sel, notify) {
	$(".s-m-auth-selected").removeClass("s-m-auth-selected");
	var $$elmt = $("[data-layout-path='" + sel.layoutPath + "']");
	var domItem = $$elmt[0];
	if (domItem) {
		_OnSelectionChange.apply(domItem, [notify]);
	}
};

function _OnSelectionChange(notify) {
	$(".s-m-auth-hover").removeClass("s-m-auth-hover");
	$(".s-m-auth-selected").removeClass("s-m-auth-selected");

	var $$s = $(this);
	$$s.addClass("s-m-auth-selected");

	var sel = exports.getSelection();
	var selData = exports.getSelectionData(sel);
	if (!selData || !selData.articleSelection) {
		$$s.removeClass("s-m-auth-selected");
	}
	if (notify !== false) {
		notifications.publish(["sm.auth.change.selection"], sel);
	}

	return false;
}


/*
 * Find control instance from DOM element
 */
function _findControl($$ctrl) {
	var app = globals.getApplication();
	var control;
	var ctrlId = $$ctrl.attr("id");
	if (!ctrlId) {
		return null;
	}
	if (app.currentPage.getType() === "dashboard") {
		var vignetteId = $$ctrl.closest(".s-m-control.s-m-vignette").attr("id");
		if (!vignetteId) {
			return null;
		}
		var vignette = app.currentPage.getControl(vignetteId);
		if (!vignette) {
			return null;
		}
		control = vignette.getPageControl(ctrlId);
	} else {
		control = app.currentPage.getControl(ctrlId);
	}
	return control;
};

exports.getSelection = function() {
	var $$lap = $(".s-m-auth-selected");
	if ($$lap.length !== 1) {
		return null;
	}
	var sel = {
		$$elmt: $$lap,
		layoutPath: $$lap.attr("data-layout-path")
	};
	return sel;
};

exports.getSelectionData = function(sel) {
	if (!sel || !sel.layoutPath) {
		return null;
	}
	var app = globals.getApplication();
	var article = $.extend(true, {}, app.currentPage.article);
	var node = {
		"$items": [article]
	};

	var elmts = sel.layoutPath.split("-");
	while (elmts.length > 0) {
		var idx = +elmts.shift();
		var children;
		if (node && node.$items) {
			children = node.$items;
		} else if (node.$article) {
			children = [node.$article];
		}
		node = children && children[idx];
	}

	var title;
	var type;
	var control = _findControl(sel.$$elmt);
	if (control) {
		title = control.prototype && control.prototype.data("$title") + " (" + control.$bind + ")";
		type = control.typeName;
	} else {
		title = locale.text("auth.label_layout");
		type = sel.$$elmt.attr("id");
		type = type.replace(/\d/g, "");
	}
	return {
		articlePage: article,
		articleSelection: node,
		title: title,
		type: type,
		control: control
	};
};

// sm.auth.articlechange.ui
exports.createPropertyPanel = function($$parent, sel, data) {
	var props = authProps.getProperties(sel, data);
	if (!props) {
		return;
	}

	var $$accord = $('<div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">');
	var id;
	var num = 0;
	var article = sel.articleSelection;
	props.forEach(function(prop) {
		id = "auth_prop_" + prop.name;
		var expanded = _openPanels.indexOf("collapse_" + id) > -1;

		var $$block = $(
			authHtml.execute("authPanelPropertyGroup", {
				id: id,
				expanded: expanded,
				label: prop.label
			}));
		var $$content = $('#collapse_' + id, $$block);
		prop.createMarkup($$content, prop, sel, data);
		$$accord.append($$block);
		num++;
	});
	$$parent.append($$accord);
};

exports.refreshPropertyPanels = function(sel, data) {
	var props = authProps.getProperties(sel, data);
	if (!props) {
		return;
	}
	props.forEach(function(prop) {
		if (prop.refreshMarkup) {
			var id = "#collapse_auth_prop_" + prop.name;
			var $$panel = $(id);
			prop.refreshMarkup($$panel, prop, sel, data);
		}
	});
};

exports.destroyPropertyPanel = function($$parent) {
	$$parent.empty();
};

exports.savePanelStates = function() {
	var i;
	var panels = $(".panel-collapse.collapse.in", "#authPanelControlSimple");
	_openPanels = [];
	for (i = 0; i < panels.length; i++) {
		_openPanels.push(panels[i].id);
	}
};

exports.saveAuthoring = function(page, opts) {

	var segs = page.split(".");

	var pageData = {
		application: segs[0], // x3
		contract: segs[1], // erp
		representation: segs[2], // ACTIV
		facet: segs[3], // $query

		roles: [],
		users: [],
		endpoints: [],

		saveAsOption: opts.saveAs,

		variantCode: opts.code,
		variantTitle: opts.title,
		variantDescription: opts.description,

		article: opts.article
	};

	return authoringSData.getPageVariants({
		application: segs[0],
		contract: segs[1],
		representation: segs[2],
		facet: segs[3]
	})
		.then(function(variants) {
			variants && variants.some(function(v) {
				var match = v.title === opts.title && v.code === opts.code && v.description === opts.description;

				// Did type change? Then create new variant
				if (opts.saveAs === "factory_variant" && v.isFactory !== true) {
					match = false;
				} else if (opts.saveAs === "global_variant" && v.isFactory === true) {
					match = false;
				} else if (opts.saveAs === "personal_copy" && v.isFactory === true) {
					match = false;
				}

				// If all matches, it's a save and not a save as
				if (match) {
					pageData.variant = v.$uuid;
				}
			});
		})
		.then(function() {
			return authoringSData.savePageDefinition(pageData);
		})
		.then(function(data) {
			modal.diagnoses(locale.text("auth.panel.save_ok_title"), {
				$diagnoses: data.diags
			});
		})
		.fail(function(e) {
			modal.diagnoses(locale.text("auth.panel.save_error_title"), e);
		});
};
});

define('syracuse-tablet/html/js/authoring/authoringPanelRight',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/locale','syracuse-tablet/html/js/helpers/notifications','syracuse-tablet/html/js/authoring/authoringHelpers','syracuse-tablet/html/js/authoring/authoringHtml','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/authoring/authoringVal','syracuse-tablet/html/js/authoring/authoringProperties'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var authHelpers = require('syracuse-tablet/html/js/authoring/authoringHelpers');
var authHtml = require('syracuse-tablet/html/js/authoring/authoringHtml');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var authVal = require('syracuse-tablet/html/js/authoring/authoringVal');
var authProps = require('syracuse-tablet/html/js/authoring/authoringProperties');

exports.Panel = utils.defineClass(function() {
	var self = this;
	self.$$panel = null;
}, null, {
	show: function() {
		var self = this;

		self._ensurePanel();
		self.$$panel.show();
		self.$$splitter.show();

		self._initDefaults();

		$('.btn', self.$$panelSave).eq(0).button("toggle");
		$('.nav-pills a[href="#authPanelControl"]').tab('show');
	},
	hide: function() {
		var self = this;
		self._ensurePanel();
		self.$$panel.hide();
		self.$$splitter.hide();
	},

	notifMainLayoutChanged: function() {
		var self = this;
		self.$$panel.find(".tab-content").css({
			"height": self.$$panel.height() - 100
		});
	},

	_ensurePanel: function() {
		var self = this;
		if (this.$$panel) {
			return;
		}

		var ctx = {
			label_control: locale.text("auth.panel.label_control"),
			label_edit: locale.text("auth.panel.label_page"),
			label_save: locale.text("auth.panel.label_save"),
			label_close: locale.text("auth.panel.label_close"),
			label_apply: locale.text("auth.panel.label_apply"),

			label_simple: locale.text("auth.panel.label_simple"),
			label_expert: locale.text("auth.panel.label_expert"),

			label_code: locale.text("auth.panel.label_code"),
			label_title: locale.text("auth.panel.label_title"),
			label_description: locale.text("auth.panel.label_description"),
			label_saveas_option: locale.text("auth.panel.label_saveas_option"),
			label_personal: locale.text("auth.panel.label_personal"),
			label_global: locale.text("auth.panel.label_global"),
			label_factory: locale.text("auth.panel.label_factory"),

			label_control_title: locale.text("auth.panel.label_control_title"),
			label_control_type: locale.text("auth.panel.label_control_type"),


			authCodeDefault: locale.text("auth.panel.authCodeDefault"),
			authTitleDefault: locale.text("auth.panel.authTitleDefault"),
			authDescriptionDefault: locale.text("auth.panel.authDescriptionDefault")
		};

		self.$$panel = $("#s-m-auth-panel-right-id");
		self.$$panel.append($(authHtml.execute("authPanelRightStructure", ctx)));
		self._getDomObjects();
		self._initSplitter();

		$("#authPanelBtnSave").on("click", self._onSave.bind(self));
		$("#authPanelBtnPageApply").on("click", self._onApplyPage.bind(self));

		notifications.subscribe(self, ["sm.main.layout.changed"]);
		notifications.subscribe(self, ["sm.auth.change.selection"]);
		notifications.subscribe(self, ["sm.auth.change.prop.ui"]);
	},

	_getDomObjects: function() {
		var self = this;
		self.$$authJSONPage = $("#authJSONPage");
		self.$$panelControlSimple = $("#authPanelControlSimple");
		self.$$panelControlExpert = $("#authPanelControlExpert");
		self.$$authPageName = $("#authPageName");
		self.$$authCode = $("#authCode");
		self.$$authTitle = $("#authTitle");
		self.$$authDescription = $("#authDescription");
		self.$$panelControlTitle = $("#authPanelControlTitle");
		self.$$panelControlType = $("#authPanelControlType");

		self.$$panelEdit = $("#authPanelEdit");
		self.$$panelSave = $("#authPanelSave");
	},

	_initDefaults: function() {
		var self = this;
		self.$$authJSONPage.val("");
		self.$$panelControlTitle.text("");
		self.$$panelControlType.text("");
		authHelpers.destroyPropertyPanel(self.$$panelControlSimple);
	},

	displayAuth: function(page) {
		var self = this;
		self.currentPageName = page.state.authoringName;
		self.$$authPageName.text(self.currentPageName);
		self.$$authJSONPage.val(authVal.toSortedJSON(page.article));
	},

	notifAuthChangeSelection: function(sel) {
		var self = this;
		self._elementSelectionChanged(sel);
	},

	// Called by panel if a property like color has been changed using the simple ui
	notifAuthChangePropUi: function(articlePage) {
		var self = this;
		self.$$authJSONPage.val(articlePage);
	},

	_elementSelectionChanged: function(sel) {
		var self = this;
		self.$$panelControlTitle.text("");
		self.$$panelControlType.text("");

		authHelpers.savePanelStates();
		authHelpers.destroyPropertyPanel(self.$$panelControlSimple);
		if (!sel) {
			return;
		}
		var data = authHelpers.getSelectionData(sel);
		self.$$panelControlTitle.text(data.title);
		self.$$panelControlType.text(data.type);
		var article = data && data.articleSelection;
		if (article) {
			authHelpers.createPropertyPanel(self.$$panelControlSimple, sel, data);
		}
	},

	_onSave: function() {
		var self = this;
		var article = self.$$authJSONPage.val();
		var articleParsed = authVal.validateJSON(true, article, authProps.getAllProperties());
		if (!articleParsed) {
			return;
		}

		authHelpers.saveAuthoring(self.currentPageName, {
			code: self.$$authCode.val(),
			title: self.$$authTitle.val(),
			description: self.$$authDescription.val(),

			// "factory_variant", "personal_copy", "global_variant"
			// -> "shared_copy" not yet supported
			saveAs: $("input:radio:checked", self.$$panelSave)[0].id,
			article: articleParsed
		});
	},
	_onApplyPage: function() {
		var self = this;
		var articlePage = self.$$authJSONPage.val();
		var articleParsed = authVal.validateJSON(true, articlePage, authProps.getAllProperties());
		if (articleParsed) {
			articlePage = authVal.toSortedJSON(articleParsed);
			notifications.publish(["sm.auth.change.prop.ui"], articlePage);
		}
	},
	_initSplitter: function() {
		var self = this;
		self.$$splitter = $("#s-m-auth-splitter-right-id");
		self.$$splitter.draggable({
			axis: "x",
			stop: function(e, ui) {
				var $$splitter = $(this);
				var pos = $$splitter.position();
				var width = $$splitter.width();
				var panelRightSize = $(window).width() - pos.left - width;
				uiutils.triggerResizeInternal({
					layout: {
						authPanelRight: {
							width: panelRightSize
						}
					}
				});
			}
		});
	}
});
});

define('syracuse-tablet/html/js/authoring/authoringPanelLeft',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/locale','syracuse-tablet/html/js/helpers/notifications','syracuse-tablet/html/js/authoring/authoringHelpers','syracuse-tablet/html/js/ui/modal','syracuse-tablet/html/js/authoring/authoringHtml','syracuse-tablet/html/js/ui/uiUtils'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var authHelpers = require('syracuse-tablet/html/js/authoring/authoringHelpers');
var modal = require('syracuse-tablet/html/js/ui/modal');
var authHtml = require('syracuse-tablet/html/js/authoring/authoringHtml');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');

exports.Panel = utils.defineClass(function() {
	var self = this;
	self.$$panel = null;
}, null, {
	show: function() {
		var self = this;

		self._ensurePanel();
		self.$$panel.show();
		self.$$splitter.show();
	},

	hide: function() {
		var self = this;
		self._ensurePanel();
		self.$$panel.hide();
		self.$$splitter.hide();
	},

	notifMainLayoutChanged: function() {
		var self = this;
	},

	_ensurePanel: function() {
		var self = this;
		if (this.$$panel) {
			return;
		}
		var ctx = {
			label_phone: locale.text("auth.panel.label_phone"),
			label_mini_tablet: locale.text("auth.panel.label_mini_tablet"),
			label_tablet: locale.text("auth.panel.label_tablet"),
			label_large: locale.text("auth.panel.label_large"),
			label_landscape: locale.text("auth.panel.label_landscape"),
			label_portrait: locale.text("auth.panel.label_portrait")
		};

		self.$$panel = $("#s-m-auth-panel-left-id");
		self.$$panel.append($(authHtml.execute("authPanelLeftStructure", ctx)));

		self._getDomObjects();
		self._initSplitter();

		$("#auth_device_size .btn", self.$$panel).click(function() {
			var $$this = $(this);
			var id = $("input", $$this).attr("id");
			var segs = id.split("_");
			self._setDeviceSize(segs[segs.length - 1], null);
		});
		$("#auth_device_orientation .btn", self.$$panel).click(function() {
			var $$this = $(this);
			var id = $("input", $$this).attr("id");
			var segs = id.split("_");
			self._setDeviceSize(null, segs[segs.length - 1]);
		});
		notifications.subscribe(self, ["sm.main.layout.changed"]);
	},
	_getDomObjects: function() {
		var self = this;
	},
	_initSplitter: function() {
		var self = this;
		self.$$splitter = $("#s-m-auth-splitter-left-id");
		self.$$splitter.draggable({
			axis: "x",
			stop: function(e, ui) {
				var $$splitter = $(this);
				var pos = $$splitter.position();
				var width = $$splitter.width();
				var panelLeftSize = pos.left;
				uiutils.triggerResizeInternal({
					layout: {
						authPanelLeft: {
							width: panelLeftSize
						}
					}
				});
			}
		});
	},
	_setDeviceSize: function(size, orientation) {
		var self = this;
		var params = {
			layout: {
				authoringParameters: {}
			}
		};

		if (size) {
			params.layout.authoringParameters.device = size;
		}
		if (orientation) {
			params.layout.authoringParameters.orientation = orientation;
		}
		uiutils.triggerResizeInternal(params);
	}
});
});

define('syracuse-tablet/html/js/authoring/authoring',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/notifications','syracuse-tablet/html/js/authoring/authoringHelpers','syracuse-tablet/html/js/authoring/authoringPanelRight','syracuse-tablet/html/js/authoring/authoringPanelLeft','syracuse-tablet/html/js/ui/modal','syracuse-tablet/html/js/authoring/authoringProperties','syracuse-tablet/html/js/ui/uiUtils'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var authHelpers = require('syracuse-tablet/html/js/authoring/authoringHelpers');
var authoringPanelRight = require('syracuse-tablet/html/js/authoring/authoringPanelRight');
var authoringPanelLeft = require('syracuse-tablet/html/js/authoring/authoringPanelLeft');
var modal = require('syracuse-tablet/html/js/ui/modal');
var authProps = require('syracuse-tablet/html/js/authoring/authoringProperties');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');

var _authInterface;
exports.toggleDesignPage = function() {
	if (!_authInterface) {
		_authInterface = new AuthInterface();
	}

	_authInterface.toggleDesignPage();
};

var AuthInterface = utils.defineClass(function() {
	var self = this;
	self.$$authPanel = null;
	self.$$pageContent = $(".s-m-page.s-m-full > section.s-m-main-content");
	self.isActive = false;

	self.rightPanel = new authoringPanelRight.Panel();
	self.leftPanel = new authoringPanelLeft.Panel();

	notifications.subscribe(self, ["sm.page.loaded"]);
	notifications.subscribe(self, ["sm.auth.change.prop.ui"]);

	authProps.initProperties(authHelpers);

}, null, {
	toggleDesignPage: function() {
		var self = this;

		if (self.isActive) {
			self.disable();
		} else {
			self.enable();
		}
		uiutils.triggerResizeInternal();
	},

	enable: function() {
		var self = this;

		self.rightPanel.show();
		self.leftPanel.show();

		self.rightPanel.displayAuth(globals.getApplication().currentPage);

		authHelpers.enableAuthCss();

		self.isActive = true;
	},

	disable: function() {
		var self = this;

		self.rightPanel.hide();
		self.leftPanel.hide();
		self.isActive = false;

		authHelpers.disableAuthCss();

		self.isActive = false;
	},

	notifPageLoaded: function(page) {
		var self = this;
		if (!self.isActive) {
			return;
		}

		if (page && page.state && page.state.disableAuthoring) {
			authHelpers.disableAuthCss();
			self.toggleDesignPage();
			return;
		}

		if (page && !page.isVignette) {
			self.rightPanel.displayAuth(page);
		}

		authHelpers.enableAuthCss();
	},

	// Called by panel if a property like color has been changed using the simple ui
	notifAuthChangePropUi: function(articlePage) {
		var self = this;
		self._updateLayoutPage(articlePage);
	},

	_updateLayoutPage: function(articlePage) {
		var self = this;
		var page = globals.getApplication().currentPage;
		try {
			var articleParsed = JSON.parse(articlePage);
		} catch (e) {
			// Never end up here because validated before
		}
		if (!articleParsed) {
			return;
		}
		var sel = authHelpers.getSelection();
		authHelpers.savePanelStates();
		page.updateLayout(articleParsed)
			.then(function() {
				authHelpers.enableAuthCss();
				// Since page has re-rendered, apply selection again
				if (sel) {
					authHelpers.selectElement(sel, false);
					var data = authHelpers.getSelectionData(sel);
					authHelpers.refreshPropertyPanels(sel, data);
				}
			})
			.fail(function(e) {
				modal.error("Error", e);
			});

	}
});
});

define('syracuse-tablet/html/js/application/application',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/ui/modal','syracuse-tablet/html/js/helpers/logger','syracuse-tablet/html/js/helpers/notifications','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/application/authentication','syracuse-tablet/html/js/application/eventListener','syracuse-tablet/html/js/application/pageLoader','syracuse-tablet/html/js/init/initContext','syracuse-tablet/html/js/application/settings','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/application/pageHelper','syracuse-tablet/html/js/authoring/authoring'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var modal = require('syracuse-tablet/html/js/ui/modal');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("app");
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var auth = require('syracuse-tablet/html/js/application/authentication');
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var pageLoader = require('syracuse-tablet/html/js/application/pageLoader');
var initContext = require('syracuse-tablet/html/js/init/initContext');
var settings = require('syracuse-tablet/html/js/application/settings');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var pageHelper = require('syracuse-tablet/html/js/application/pageHelper');
var authoring = require('syracuse-tablet/html/js/authoring/authoring');

/**
 * Default application config
 */
var _appConfig = {
	transition: null,
	// FDB - openLinkInVignette=true to allow test in vignettes (children page, lookup...)
	// MW - Changed to false as default since this is more what we are going to use.
	openLinkInVignette: false
};
/**
 * Subscriptions
 */
var _subscribe = function(self) {
	notifications.subscribe(self, ["sm.context.changed", "sm.switch.app", "sm.modal.open", "sm.modal.close", "sm.main.layout.changed"], 1);
};
/**
 * Tablet application class
 */
var _Application = utils.defineClass(
	function($$elmt, factory) {
		var self = this;
		self.$$elmt = $$elmt;
		self.currentPage = null;
		self._$config = $.extend(true, {}, _appConfig);
		self.factory = factory;
		self._pageLoader = null;
		self._nbModals = 0;
		self._wait = uiutils.waitWheelCreate($$elmt);
		// Id of the home dashboard of current application
		// Used to go to home page
		self.homePageId = null;
		// Default appid when login page is loaded without current application
		self.uuid = "root";
		// Application history stack
		self.history = [];
		// Force pushState on first page
		self.pushState = true;
	}, null, {
		/**
		 * Called after object has been created
		 **/
		init: function() {
			var self = this;
			// Can't be called in constructor
			eventListener.bindEvents(self);
			self.dao = self.factory.createDaoApp(self);
			_subscribe(self);
			self.$$elmt.show();
		},

		destroy: function() {
			var self = this;
			if (self._wait) uiutils.waitWheelDestroy(self._wait);
			notifications.unsubscribe();
			pageHelper.removeAllPages(self.$$elmt);
			self.currentPage = null;
			if (self._pageLoader == null) {
				self._pageLoader.destroy();
				self._pageLoader = null;
			}
			utils.unbindObj(self);
			utils.unbindObj(self.$$elmt);
			$(window).unbind();
		},
		/**
		 * True if current 'mobile application' is welcome application
		 */
		isWelcomeApplication: function() {
			return this.uuid === "$welcomeApplication";
		},
		/**
		 * For page display
		 */
		getTitle: function() {
			return this.dao.getApplicationName();
		},
		/**
		 * Goto home page of current 'mobile application'
		 */
		gotoHome: function() {
			var self = this;
			setTimeout(function() {
				self.changePage(self.homePageId);
			});
		},
		/**
		 * Accept path like "array.gridMaxCols"
		 */
		$config: function(id) {
			return utils.getPropByPath(this._$config, id, this._$config);
		},
		/**
		 * User, role, endpoint or language changed
		 * !! resolve/reject deferred is not null
		 * -> deferred used to catch error in transition phase - before page has been loaded
		 */
		notifContextChanged: function(deferred) {
			this.gotoWelcomeApplication(deferred);
		},

		notifModalOpen: function() {
			this._nbModals++;
			log && log("notifModalOpen nbModals=" + this._nbModals);
		},

		notifModalClose: function() {
			this._nbModals = Math.max(this._nbModals - 1, 0);
			log && log("notifModalClose nbModals=" + this._nbModals);
		},
		notifMainLayoutChanged: function() {
			var self = this;
			self.currentPage && self.currentPage.onResize();
		},
		hasModalOpen: function() {
			log && log("_nbModals=" + this._nbModals);
			return this._nbModals > 0;
		},

		_actGotoWelcomeApplication: function() {
			this.gotoWelcomeApplication();
		},
		/**
		 * Called by link with data-action = historyBack
		 */
		_actHistoryBack: function() {
			window.history.back();
		},
		// Switch role, endpoint, language
		_actSwitchContext: function() {
			var self = this;
			initContext.init(true, true).then(function(context) {}).fail(function(e) {
				modal.error("Swicth context error", e);
			});
		},
		_actClearCache: function() {
			var self = this;
			var deferred = $.Deferred();
			modal.confirm("clearCache", function(confirmed) {
				if (confirmed) {
					self.waitWheelStart();
					globals.getCache().clearCache().then(function(e) {
						self.waitWheelStop();
						deferred.resolve(null);
					}).fail(function(e) {
						setTimeout(function() {
							modal.error("Clear cache error", e, function() {
								self.waitWheelStop();
								deferred.resolve(null);
							});
						}, 10);
					});
				} else {
					deferred.resolve(null);
				}
			});
			return deferred.promise();
		},
		_actDesignPage: function() {
			authoring.toggleDesignPage();
		},
		/**
		 * User has selected a new Syracuse mobile application
		 * appInfo json description of application
		 */
		notifSwitchApp: function(appName) {
			this._setCurrentApplication(globals.getApplicationJson(appName));
		},

		/**
		 * Got o home page of tablet applications - Welcome dashboard
		 * deferred to resolve/reject in not null - used by asynchronous calls
		 * Ex: For login page we display the error in login page instead of modal
		 */
		gotoWelcomeApplication: function(deferred) {
			if (globals.isLoggedIn()) {
				this._setCurrentApplication(globals.getWelcomeAppJson(), deferred);
			} else {
				if (deferred) deferred.resolve();
				this.gotoLogin();
			}
		},
		/**
		 * Goto login page
		 */
		gotoLogin: function(reason) {
			var self = this;
			self.historyReset();
			setTimeout(function() {
				self.changePage("login", {
					reason: reason || "Authentication is required"
				});
			}, 0);
		},
		/**
		 * Set the current 'mobile application'
		 * Called after a switch context (application selection) or when tablet application is launched
		 * 'Welcome dashboard' page is a real application with only one dashboard
		 *  deferred param :
		 *  	deferred to resolve/reject if not null - used by asynchronous calls to be notified
		 */
		_setCurrentApplication: function(appInfo, deferred) {
			var self = this;
			var _fail = function(msg, e) {
				self.waitWheelStop();
				if (deferred) {
					deferred.reject(e);
				} else {
					modal.error(msg, e, function() {
						if (self.currentPage) self.currentPage.activate();
					});
				}
			};
			var _success = function(appDetail) {
				try {
					self.waitWheelStop();
					if (!appDetail.$application.$uuid) throw new Error("No application $uuid - " + appDetail.applicationName);
					if (self.uuid !== appDetail.$application.$uuid) {
						// Application changed
						self.dao.setApplication(appDetail);
						self.homePageId = self.dao.getHomeDashboard();
						self.uuid = appDetail.$application.$uuid;
					}
					self.gotoHome();
					if (deferred) deferred.resolve();
				} catch (e) {
					_fail("Error loading new application", e);
				}
			};
			try {
				if (!appInfo) throw new Error("Null appInfo");
				log && log("Switch to Syracuse Mobile Application " + appInfo.applicationName);
				if (self.currentPage) {
					self.currentPage.deactivate();
				}
				self.waitWheelStart();
				settings.getMyApplicationDetail(appInfo).then(function(appDetail) {
					_success(appDetail);
				}).fail(function(e) {
					_fail("Error loading application", e);
				});
			} catch (e) {
				_fail("Error switching application", e);
			}
		},
		/**
		 * Open a page
		 * !! Do not call directly - Use changePage
		 */
		_gotoPage: function(state, back) {
			var self = this;
			if (!self._pageLoader) {
				/**
				 * Page loader shared with vignette
				 * Load a page
				 */
				self._pageLoader = new pageLoader.Klass({
					waitStop: function() {
						self.waitWheelStop();
					},
					getRootElmt: function() {
						return self.$$elmt;
					},
					waitStart: function() {
						self.waitWheelStart();
					},
					getCurrentPage: function() {
						return self.currentPage;
					},
					setCurrentPage: function(page) {
						self.currentPage = page;
						if (self.isWelcomeApplication() || page.state.isLogin === true) {
							self.historyReset(page);
						} else if (page.state.name === self.homePageId) {
							// Destroy all cached pages except current home page
							log && log("Home page " + self.homePageId + " - Destroy all pages except current");
							pageHelper.removeAllPages(self.$$elmt, page);
						}
					},
					historyPush: function(state) {
						self.history.push(state);
						// Refresh browser history to keep only one page in history for tablet application
						if (self.pushState) {
							window.history.pushState({
								x: new Date()
							}, utils.UUID(), null);
						} else {
							window.history.replaceState({
								x: new Date()
							}, utils.UUID(), null);
						}
					},
					succeeded: function(dstPage, parentNotifInfo) {

						log && log("succeeded" + " - win=" + window.history.length + " - app=" + self.history.length);
						// Refresh browser history to keep only one page in histpry for tablet application
						// Call resize handler each time a page has been loaded for calculations
						uiutils.triggerResizeInternal();
						// call on page resize for calculation
						if (parentNotifInfo && parentNotifInfo.notifId) {
							/**
							 * If the child application wants to notify the parent it should return info for notification
							 * parentNotifInfo contain :
							 * 		notifId:  	with the notification id
							 * 		notifData: 	with data  needed for processing this event
							 * 		controlId: 	If action as been trigered by a control
							 * 		parentId: 	id of the page
							 * TODO - change the notification process to create one subscription per page to not notify inactive pages
							 * Currently we test if page is active before processing a notifications
							 */
							if (dstPage.id === parentNotifInfo.parentId) {
								notifications.publish(parentNotifInfo.notifId, parentNotifInfo.notifData, parentNotifInfo.controlId);
							} else {
								modal.error("Child page notification warning", "Parent page is not the current page");
							}
						}
					}
				});
			}
			if (state.isLogin === false && !globals.isLoggedIn()) {
				self.gotoLogin("Authentication is required");
			} else {
				self._pageLoader.load(state, back);
			}
		},
		historyReset: function(page) {
			var self = this;
			// Destroy all cached pages except page parameter
			pageHelper.removeAllPages(self.$$elmt, page);
			self.history = [];
		},
		/**
		 * Called by browser history.back
		 * !! never call this method directlty - Call window.back
		 */
		historyPop: function(event) {
			try {
				var self = this;
				log && log("History pop before" + " - win=" + window.history.length + " - app=" + self.history.length);
				// No back if a modal is open
				if (self._nbModals > 0) {
					event.preventDefault();
					return;
				}
				if (self.uuid === "root" || self.history.length === 0) {
					// No application has been loaded - Goto previous browser history
					// ?? return without preventDefault doesn't continue back action on browser side
					// -> We repost a back
					window.history.back();
					return;
				}
				// Remove current state
				var state = self.history.length > 0 ? self.history.pop() : null;
				if (state.isWelcomePage || state.isLogin) {
					// Homepage if login or welcome
					// ?? return without preventDefault doesn't continue back action on browser side
					// -> We repost a back
					window.history.back();
					return;
				} else {
					// Get previous state
					state = self.history.length > 0 ? self.history[self.history.length - 1] : null;
				}
				event.preventDefault();
				// Force pushState on display page - Last state has been removed
				self.pushState = true;
				// Open page
				setTimeout(function() {
					if (state.isWelcomePage) {
						self.gotoWelcomeApplication();
					} else {
						self._gotoPage(state, true);
					}
				}, 0);
			} catch (e) {
				modal.error("historyPop error", e);
			}
		},
		/** state - name of the page
		 * Option override standard pageInfo and allows to store a context
		 **/
		changePage: function(state, options) {
			var self = this;
			if (typeof state !== "string") throw new Error("changePage - string expected");
			return self._gotoPage(pageHelper.getPageInfo(state, options, self.currentPage));
		},

		logout: function() {
			var deferred = $.Deferred();
			var self = this;
			var _loggedOut = function() {
				log && log("User Logged out");
				globals.setUserCtx(null);
				deferred.resolve();
				self.gotoLogin("You have been logged out");
			};
			self.waitWheelStart();
			auth.logout().then(function(ok, message) {
				self.waitWheelStop();
				if (ok) {
					_loggedOut();
				} else {
					modal.error(message, function() {
						_loggedOut();
					});
				}
			}).fail(function(e) {
				self.waitWheelStop();
				modal.error("Logout error", e, function() {
					_loggedOut();
				});
			});
			return deferred.promise();
		},

		/**
		 * Refresh current page - called from eventListener
		 */
		refreshPage: function(options) {
			var self = this;
			if (!self.currentPage) throw new Error("No current page");
			self.currentPage.refresh(options).then(function() {
				//	Eventually do something in vignette control	
			}).fail(function(e) {
				self.modalError("Refresh page", e);
			});
		},
		/**
		 * One waiting plugin per page
		 */
		waitWheelStart: function() {
			uiutils.waitWheelStart(this._wait);
		},
		waitWheelStop: function() {
			uiutils.waitWheelStop(this._wait);
		},
		/**
		 * Also exported in globals
		 */
		modalError: function(title, e, cb) {
			modal.error(title, e, cb);
		}
	});


exports.Application = _Application;
});

define('syracuse-tablet/html/js/pages/page',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/logger','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/helpers/articleParser','syracuse-tablet/html/js/controls/ctrlFactory','syracuse-tablet/html/js/helpers/notifications'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("page");
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

/**
 * s-m-side-panel-dismiss: div that traps the events outside the panel when a panel if open
 */
var _templates = {
	fullpage: '\
		<section class="s-m-page s-m-full {{type}} {{subtype}}" id="{{pageid}}" {{#if parentId}}data-parent-id="{{parentId}}"{{/if}} class="ctrl-event-click" style=""> \
			<header></header> \
			<section class="s-m-main-content"></section> \
			<footer></footer> \
			<div class="s-m-side-panel-dismiss" data-action="sidePanel" data-params="close"></div> \
		</section> \
	',
	vignette: '<section class= "s-m-page s-m-nested {{type}} {{subtype}}" id="{{pageid}}"></section>',
	leftpanel: '<section class="s-m-panel s-m-left"></section>',
	rightpanel: '<section class="s-m-panel s-m-right"></section>'
};
var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx || {});
};
/**
 * Dispatching of navigation and action control
 */
var _panel2Control = {
	leftpanel: "tablet/x-navigationpanel",
	rightpanel: "tablet/x-pageactionpanel",
	header: "tablet/x-pageheader",
	footer: "tablet/x-pagefooter"
};
var _control2panel = {};
for (var p in _panel2Control) {
	_control2panel[_panel2Control[p]] = p;
}
/**
 * Static controls used by non HTML pages
 */
var StaticControls = function() {
	var _map = {};
	/**
	 * panelId:   name of panel header/footer/leftpanel/rightpanel
	 * ctrlType:  type of the control
	 * 		Ex: display navigation panel in leftpanel
	 * 		Ex: display action panel in rightpanel
	 */
	this.addPanel = function(panelId, page) {
		// For panelId header/footer
		var $$parent;
		if (panelId.indexOf('panel') >= 0) {
			// Create the container bea cus panel are only available for regular/dashboard pages (not for html)
			$$parent = $(_getHtml(panelId)).appendTo(page.$$elmt);
		} else {
			// Header/footer already present
			$$parent = page.$$elmt.find(panelId);
		}
		if ($$parent.length > 0) {
			_map[panelId] = {
				$$parent: $$parent,
				ctrlType: _panel2Control[panelId]
			};
		}
	};
	this.hasPanels = function() {
		return _map['leftpanel'] != null || _map['rightpanel'] != null;
	};
	this.destroy = function() {
		if (!_map) return;
		for (var id in _map) {
			if (_map[id].control) _map[id].control.destroy();
		}
		_map = null;
	};
	this.create = function(controller) {
		if (!_map) return;
		for (var id in _map) {
			_map[id].control = controller.createStaticControl(_map[id].ctrlType);
		}
	};
	this.buildHtml = function(dao, buildOptions) {
		if (!_map) return;
		var c;
		for (var id in _map) {
			c = _map[id];
			c.control.buildHtml(c.$$parent, dao, buildOptions);
		}
	};
	this.afterRender = function() {
		if (!_map) return;
		var c;
		for (var id in _map) {
			c = _map[id];
			if (c.control.afterRender) c.control.afterRender();
		}
	};
	this.get = function(id) {
		return (_map[id] || {}).control;
	};
	this.doSidePanelAction = function(page, side, action) {
		var id = side + "panel";
		var c = _map[id];
		if (!c) return;
		c.control.toggle(action, function(newWidth) {
			if (side === "left") {
				// Only for left panel shifts content
				var shift = [page.$$contentElmt];
				if (_map["header"]) shift.push(_map["header"].$$parent.find(".navbar"));
				if (_map["footer"]) shift.push(_map["footer"].$$parent.find(".navbar"));
				shift.forEach(function(e) {
					e.css("left", newWidth);
				});
			}
			// Dismiss 
			var dismiss = page.$$elmt.children(".s-m-side-panel-dismiss");
			dismiss[newWidth > 0 ? "addClass" : "removeClass"](side);
			dismiss.css(side, newWidth);
		});
		return c;
	};
	this.addToControlMap = function(page) {
		for (var id in _map) {
			page.addControl(_map[id].control, true);
		}
	};
};
/**
 * Base class for all pages
 *  $$parent: Parent element
 * 	state: Page information - JSON structure stored in history
 *  prototype: Prototype object (class prototype)
 *  article: JSON article
 *  !! Temporarily prototype and article can be null for html pages
 */
var _Page = utils.defineClass(
	function Page($$parent, state, prototype, article, options) {
		var self = this;
		state.options = state.options || {};
		// article, prototype, rootLayout null for html pages
		self.prototype = prototype;
		self.article = article;
		self.rootLayout = null;
		self._staticControls = null;
		self._$$parent = $$parent;
		self.state = state;
		self.id = state.uuid;
		self._initMaps();
		self.dao = null;
		self.isVignette = state.options.vignette === true;
		self.isChild = state.options.parentId != null;
		if (self.isChild) {
			// Children pages are cached - no destry if we open a child page from this page
			self.state.cached = true;
		}
		self._initRootElmt($$parent);
		notifications.subscribe(self, ["sm.action.link"], 1);
		// read/edit/create - read by default - overridden by child pages
		self.$activity = "read";
		// true if page is created - set by page loader when page is activated
		self.isNew = false;
		// Last selected row - Used to save/restore context of last selected row
		self.lastSelectedRow = null;
	}, null, {
		_initMaps: function() {
			// Contains all the controls of the page including static controls
			this.controlsMap = {};
			// Contains controls that need to be called after Render - outside staticControls
			this.ctrlAfterRenderCalls = [];
			// Contains controls that need to be called after Show - outside staticControls
			this.ctrlAfterShowCalls = [];
			// Contains controls that have a context to save in order to retrieve it when page will be load (eg: back navigation)
			this.ctrlSaveCtxCalls = [];
		},
		/**
		 * Create and return root DOM element of every page
		 * 		DOM element is hidden and contains only the structure
		 * 		Page object is stored in DOM element under data("smcontroller")
		 */
		_initRootElmt: function($$parent) {
			var self = this;
			var type = self.state.type;
			var root, ctx = {
					pageid: self.id,
					type: type, // regular/html/dashboard
					subtype: self.state.subtype, // regular - > facet - dashboard -> std/welcome/home - html -> login/about...
					parentId: self.getParentId()
				};
			if (self.isVignette) {
				// only content in a vignette
				self.$$contentElmt = self.$$elmt = $(_getHtml("vignette", ctx));
			} else if (self.state.type === "html") {
				self.$$elmt = $(_getHtml("fullpage", ctx));
				self.$$contentElmt = self.$$elmt.find("section.s-m-main-content");
				// No controls/header/footers for html pages - Managed by the page itself
			} else {
				// Type "dashboard", "regular"
				self.$$elmt = $(_getHtml("fullpage", ctx));
				self.$$contentElmt = self.$$elmt.find("section.s-m-main-content");
				self._initStaticControls();
			}
			self.$$elmt.hide();
			self.$$elmt.appendTo($$parent);
			// attaches page object to DOM element
			self.$$elmt.smPageController(self);
		},

		_initStaticControls: function() {
			var self = this;
			if (self.isVignette || self.state.type === "html") {
				return;
			}

			// Static controls for non html or vignette pages
			self._staticControls = new StaticControls(self);
			['header', 'footer', 'leftpanel', 'rightpanel'].forEach(function(p) {
				self.addPanel(p);
			});
			if (self._staticControls.hasPanels()) {
				notifications.subscribe(self, ["sm.side.panel.ready"], 1);
			}
		},

		/**
		 * Add control in control list
		 * panelId: header, footer, leftpanel, rightpanel
		 * Can be overridden to disable creation of controls
		 */
		addPanel: function(panelId) {
			return this._staticControls.addPanel(panelId, this);
		},
		/**
		 * Create the control object
		 * ctrlType: control's type
		 * Can be overridden to provide it's own control
		 */
		createStaticControl: function(ctrlType) {
			return ctrlFactory.createPageControl(ctrlType, this);
		},
		destroy: function() {
			var self = this;
			log && log('destroy page ' + self.state.name);
			if (self.dao) {
				self.dao.destroy();
				self.dao = null;
			}
			// At the end to destroy childs before parent
			if (self.$$elmt) {
				utils.unbindObj(self.$$elmt);
				self.$$elmt = null;
			}
			if (self._staticControls) {
				// TODO - Review FDB
				notifications.unsubscribe(self, ["sm.side.panel.ready"]);
				self._staticControls.destroy();
				self._staticControls = null;
			}
			if (self._waiting) {
				uiutils.waitWheelDestroy(self._waiting);
				self._waiting = null;
			}
			if (self.rootLayout) {
				self.rootLayout.destroy();
				self.rootLayout = null;
			}
			if (self.prototype) {
				// We destroy the proto
				self.prototype.destroy();
				self.prototype = null;
			}
			self._initMaps();
			utils.unbindObj(self);
			self.article = null;
			self.prototype = null;
			self._$$parent = null;
		},
		/**
		 * Called be pageLoader - TODO TEST
		 */
		destroySiblings: function() {
			var self = this;
			if (self.$$elmt) {
				log && log("Page destroySiblings", "destroySiblings");
				var next = self.$$elmt.siblings(function(idx) {
					var ctrl = $(this).smPageController();
					if (ctrl) ctrl.destroy();
				});
			}
		},
		/**
		 * dashboard/regular/html
		 */
		getType: function() {
			return this.state.type;
		},
		/**
		 * Allows prop = "options.parentId"
		 */
		getProp: function(prop) {
			return utils.getPropByPath(this.state, prop);
		},
		/**
		 * Set by vignette at page loading
		 */
		openLinkInVignette: function() {
			return this.state.options.openLinkInVignette === true;
		},
		setDao: function(dao) {
			var self = this;
			if (self.dao && self.dao.destroy) self.dao.destroy();
			self.dao = dao;
		},
		/**
		 * Refresh the page
		 */
		refresh: function(options, callBackInterface) {
			throw new Error("Not implemeneted");
		},
		/**
		 * Used by refresh method to update controls after having loaded new data
		 * ids == null means all controls
		 */
		refreshControls: function(ids, options) {
			var self = this;
			var c;
			if (ids && ids.length > 0) {
				ids.forEach(function(id) {
					c = self.controlsMap[id];
					if (c) c.refresh(self.dao, options);
				});
			} else {
				Object.keys(self.controlsMap).forEach(function(key) {
					c = self.controlsMap[key];
					if (c) c.refresh(self.dao, options);
				});
			}
		},
		/**
		 * Load the page
		 * 		The result is that the page is created and attached to DOM document and hidden
		 * 		the contoller of the page (applictaion/vignette) has to call activate method to display the page (see pageLoader module)
		 * options:
		 * 			updateLayout:	true to not load the data and update only main layout
		 * 			parentPage:		parentPage when we load a rowdetail page
		 * 							!! do not store this page
		 */
		load: function(options) {
			var self = this;
			options = options || {};
			var deferred = $.Deferred();
			try {
				self.loadStructure(options)
					.then(function() {
						if (options.updateLayout) {
							return $.smResolve();
						}
						return self.loadData(options);
					})
					.then(function() {
						return self.render(options);
					})
					.then(function() {
						return self.afterRender(options);
					})
					.then(function() {
						deferred.resolve();
					}).fail(function(e) {
						deferred.reject(e);
					});
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},
		/**
		 * Create layout/control tree structure according to article
		 */
		loadStructure: function(options) {
			var deferred = $.Deferred();
			var self = this;
			try {
				if (!self.article || !self.prototype) throw new Error("loadStructure - NULL article or prototype");
				// Creates header/footer/leftPanel/rightpanel controls - only if not update layout
				if (self._staticControls && options.updateLayout !== true) {
					self._staticControls.create(self);
				}
				// Creates control/fields tree (from article)
				self.rootLayout = articleParser.article2Controls(self, self.article, self.prototype, {}, self.state.options.layoutPath);
				deferred.resolve();
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},
		/**
		 * Load page data
		 */
		loadData: function() {
			var deferred = $.Deferred();
			var self = this;
			try {
				self.setDao(null);
				deferred.resolve();
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},
		/**
		 * Rendering - Build html and attachs dom elements to document
		 */
		render: function(options) {
			var self = this;
			try {
				if (!self.rootLayout) {
					throw new Error("buildHtml - NULL rootLayout");
				}
				var buildOpts = self.buildHtmlOption();
				// Renders header/footer/leftPanel/right controls
				if (self._staticControls && options.updateLayout !== true) {
					self._staticControls.buildHtml(self.dao, buildOpts);
				}
				if (self.$$contentElmt) {
					self._beforeAddContent();

					// Renders tree controls (article)
					self.rootLayout.buildHtml(self.$$contentElmt, self.dao, buildOpts);
				}
			} catch (e) {
				return $.smReject(e);
			}
			return $.smResolve();
		},
		/**
		 * return build ptions for controls
		 * Set options for all controls
		 * Header -> options for header control
		 * Can be overridden
		 */
		buildHtmlOption: function() {
			var self = this;
			return {
				makeFullHeight: self.isVignette,
				header: {
					showAuthoring: self.state.disableAuthoring !== true,
					isChild: self.isChild
				}
			};
		},
		/**
		 * Called from authoring
		 *	TODO Review FDB - use pageNotification or reload the page
		 */
		updateLayout: function(article) {
			var self = this;
			// Set new article which comes from authoring panel
			self.article = article;
			// Init controsl maps
			self._initMaps();
			// destroy all controls and layouts
			self.rootLayout.destroy();
			// Clear dom
			self.$$contentElmt.empty();
			// Reload with updateLayout option
			// 	-> don't load data
			//	-> don't create static controls
			return self.load({
				updateLayout: true
			}).then(function() {
				// Add static controls to maps
				self._staticControls.addToControlMap(self);
				// Recalculate layouts
				uiutils.triggerResizeInternal();
			});
		},
		/**
		 * Resize handler called by window.resize
		 */
		onResize: function(evt) {
			var self = this;
			// Call resize handler in tree hierachy
			if (self.rootLayout && self.rootLayout.onResize) {
				self.rootLayout.onResize(evt);
			}
		},
		/**
		 * Specific procces after rendering
		 */
		afterRender: function(options) {
			var self = this;
			// afterRender for controls - outside staticControls
			self.ctrlAfterRenderCalls.forEach(function(c) {
				c.afterRender();
			});
			if (self._staticControls && options.updateLayout !== true) {
				// for _staticControls afterRender is called only at the creation of the page
				self._staticControls.afterRender();
			}
		},

		isEditMode: function() {
			return false;
		},

		_beforeAddContent: function() {

		},

		addTitle: function(title, description) {
			var self = this;
			var html = "";
			if (title) html = '<header><h3>' + title + '</h3></header>';
			if (description) html += '<p>' + description + '<p>';
			if (html.length > 0) $(html).prependTo(self.$$contentElmt);
		},


		/**
		 *  called each tile a control/layout is created
		 *  isPageControl: 	true is it's a page/static control - Panel, Header, Footer...
		 **/
		addControl: function(c, isPageControl) {
			if (!c) return;
			// controlsMap contains all controls
			this.controlsMap[c.id] = c;
			// For controls others that static/page Controls
			if (isPageControl !== true) {
				// stores controls that need specific processes
				// !!! It's the simplest way to identify controls by testing the presence of the method when we add them
				// Another way woud be that it's the control that asks the page to be notified
				// After render
				if (c.afterRender) this.ctrlAfterRenderCalls.push(c);
				// After show
				if (c.afterShow) this.ctrlAfterShowCalls.push(c);
				// Save context
				if (c.savedCtxCreate && c.savedCtxRestore) this.ctrlSaveCtxCalls.push(c);
			} // StaticControls are managed separately because of updateMayout 
		},
		/**
		 * return the control/layout
		 * 	id:  id attribute of dom element
		 * */
		getControl: function(id) {
			return this.controlsMap && this.controlsMap[id];
		},
		/**
		 * Display the page and hides currentPage
		 * 		Manage transitions (effect) according  to self.getProp("transition")
		 *		Do not call show directly
		 * 		cb is called after oage hs been displayed (we don't use deferred)
		 * pageToClose is the page ths will be replaced by this
		 * 		For a child page currentPage is the parent page
		 *			Used by rowdetail page to read the DAO
		 * savedContext
		 * 		Context is propvided by pageToClose (or dashboard for vignettes)
		 * 		It contains a status to restore after it has been displayed (scroll...)
		 */
		activate: function(pageToClose, savedContext, cb) {
			var self = this;
			self._show(pageToClose, function() {
				if (savedContext) {
					// Set saved context use for back to 'parent' page
					self.savedContext = savedContext.parent;
					// We restore the current contex (ex scroll)
					self.savedCtxRestore(savedContext.current);
				} else if (self.lastSelectedRow) {
					// We allways restore last selected row because it is stored in page when we clik the link that opens the 'child' page
					self._hilightLastSelectedRow(self.lastSelectedRow);
				}
				// Controls that need to be called after show (calculate height/width..)
				self.ctrlAfterShowCalls.forEach(function(c) {
					c.afterShow();
				});
				if (cb) cb();
			});

		},
		/**
		 * Hide the page
		 * 	Do not call hide or show directly
		 * A "cached" page is deactivated instead of being destroyed on navigation event
		 */
		deactivate: function(cb) {
			this._hide(cb);
		},
		/**
		 * Save previous page context - Called by page loader before deactivating the page
		 * We propagate the context of previous pages into the page to be able to retrieve it on back navigation
		 */
		contextSave: function(pageToClose) {
			var self = this;
			if (!pageToClose) return;
			self.savedContext = {
				// Parent context is saved
				parent: pageToClose.savedContext,
				// Context to restore when this pageToClose will be reopen on back navigation
				current: pageToClose.savedCtxCreate()
			};
		},
		/**
		 * returns the context to save
		 * 		default:	page scroll coordinates
		 * Can be overridden (ex dashboard to manage contexts of vignettes)
		 */
		savedCtxCreate: function() {
			var self = this;
			var ctx = {
				scrollLeft: self.$$contentElmt.scrollLeft(),
				scrollTop: self.$$contentElmt.scrollTop(),
				lastSelectedRow: self.lastSelectedRow
			};
			if (self.ctrlSaveCtxCalls.length > 0) {
				var idsArray = Object.keys(self.controlsMap);
				// Save controls contexts - All controls who implement savedCtxCreate are added to ctrlSaveCtxMap
				ctx.ctxCtrls = {};
				var ctrlCtx;
				self.ctrlSaveCtxCalls.forEach(function(c) {
					ctrlCtx = c.savedCtxCreate();
					if (ctrlCtx) ctx.ctxCtrls[idsArray.indexOf(c.id) + ""] = ctrlCtx;
				});
			}
			return ctx;
		},
		/**
		 * Restore page context - Called after activation (show)
		 * 		default:	page scroll coordinates
		 */
		savedCtxRestore: function(ctx) {
			var self = this;
			if (!ctx) return;
			self.$$contentElmt.scrollLeft(ctx.scrollLeft);
			self.$$contentElmt.scrollTop(ctx.scrollTop);
			self._hilightLastSelectedRow(ctx.lastSelectedRow);
			if (ctx.ctxCtrls) {
				var idsArray = Object.keys(self.controlsMap);
				// Restore controls context
				Object.keys(ctx.ctxCtrls).forEach(function(idx) {
					self.getControl(idsArray[idx]).savedCtxRestore(ctx.ctxCtrls[idx + ""]);
				});
			}
		},
		_hilightLastSelectedRow: function(lastSelectedRow, old) {
			var self = this;
			var toggle = function(rowInfo, show) {
				var id = Object.keys(self.controlsMap)[rowInfo.arrayKeyIdx];
				if (id) self.controlsMap[id].selectLastSelectedRow(rowInfo.rowId, show);
			};
			if (old) toggle(old, false);
			if (lastSelectedRow) toggle(lastSelectedRow, true);
		},
		_show: function(currentPage, cb) {
			var self = this;
			var transition = self.getProp("transition");
			if (currentPage) {
				currentPage._hide(function() {
					self.$$elmt.show(transition || 0, function() {
						if (cb) cb();
					});
				});
				return;
			}
			self.$$elmt.show(transition == null ? 0 : transition, cb);
		},
		_hide: function(cb) {
			var self = this;
			if (!self.$$elmt) {
				if (cb) cb();
				// page has been destroyed
				return;
			}
			// Close panels
			self._actSidePanel("close", "all");
			var transition = self.getProp("transition");
			self.$$elmt.hide(transition == null ? 0 : transition, cb);
		},
		isActive: function() {
			var self = this;
			return self.$$elmt && self.$$elmt.is(":visible");
		},
		/**
		 * True is page is a lookup
		 */
		isLookup: function() {
			return this.prototype && this.prototype.isLookup();
		},
		/**
		 * Return the info to notify parent when the child page is closed
		 * It depends on the kind of page
		 * Ex: lookup notifies parent control with selected value
		 */
		getParentNotif: function() {
			throw new Error("not implemented");
		},
		/**
		 * Return the id of parent page if any
		 */
		getParentId: function() {
			return this.isChild ? this.state.options.parentId : null;
		},

		/**
		 * Returns attribute for the link that opens this page (used to open this page from a vignette to full page)
		 * Overriden by regular page to put s-data-url
		 */
		getOpenLinkAttrs: function() {
			return {
				"data-nav": this.state.name
			};
		},

		/***
		 * Test action
		 */
		_actTest: function(params) {
			var e = $('<h5 style="color:red">Action test succeeded</h5>').prependTo(this.$$elmt);
			window.setTimeout(function() {
				e.remove();
			}, 2000);
		},

		/**
		 * Toggle left/right panel - data-action="sidePanel"
		 * 	panel : left or right
		 * 	action toggle or resize
		 */
		_actSidePanel: function(action, side) {
			var self = this;
			if (self._staticControls) {
				side = side || "all";
				var side = side === "all" ? ["left", "right"] : [side];
				side.forEach(function(panel) {
					var c = self._staticControls.doSidePanelAction(self, panel, action);
				});
			}
		},

		/** Event sm.side.panel.ready
		 *  Notified when the panel have been created
		 *  Functional panel is identifyed by the typeControl
		 *  It is dispatched to a UI panel left/right (depends on OS)
		 */
		notifSidePanelReady: function(typeControl) {
			var self = this;
			if (!self.isActive()) return;
			if (!self._staticControls) return;
			var foot = self._staticControls.get("footer");
			if (!foot) return;
			foot.enablePanel(_control2panel[typeControl]);
		},

		/**
		 * Wait wheel management
		 * We need one plugin per page
		 */
		waitWheelStart: function(controlId) {
			var self = this;
			if (controlId) {
				var c = self.controlsMap[controlId];
				if (c && c.waitStart) c.waitStart();
				return;
			}
			if (!self._waiting) {
				self._waiting = uiutils.waitWheelCreate(self.$$elmt);
			}
			uiutils.waitWheelStart(self._waiting);
		},
		waitWheelStop: function(controlId) {
			var self = this;
			if (controlId) {
				var c = self.controlsMap[controlId];
				if (c && c.waitStop) c.waitStop();
				return;
			}
			if (self._waiting) {
				uiutils.waitWheelStop(self._waiting);
			}
		},

		/** Event sm.action.link
		 *  Notified asynchronously when a action succeeded - overriden
		 *  link:		Link info
		 *  result:		Json response
		 */
		notifActionLink: function(link, result) {
			throw new Error("not implemented");
		},
		/**
		 * Called synchronously by an array when a row has been selected
		 * 	arrayId		Id of array
		 * 	rowId		Id of row
		 * 	rowdata		data of the row used by loojup page
		 * 	updateUI	True to update UI
		 * 				When the page is not destroyed by the link we clicked we have to remove old selection
		 * 				Otherwise the selction the line will be hightlighted after creation of the page
		 */
		notifSelectRow: function(arrayId, rowId, rowdata, updateUI) {
			var old = this.lastSelectedRow;
			this.lastSelectedRow = {
				arrayKeyIdx: Object.keys(this.controlsMap).indexOf(arrayId),
				rowId: rowId
			};
			if (updateUI) {
				this._hilightLastSelectedRow(this.lastSelectedRow, old);
			}
		},
		/**
		 * USed by child pages
		 * TODO - Improve by using orr own history stack to avoid forward
		 */
		goBack: function() {
			window.history.back();
		}
	}
);

exports.Page = _Page;
});

define('syracuse-tablet/html/js/pages/pageDashboard',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/pages/page','syracuse-tablet/html/js/helpers/logger'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/pages/page').Page;
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("page");

var _Page = utils.defineClass(

	function DashboardPage($parent, state, prototype, article) {
		var self = this;
		Base.call(self, $parent, state, prototype, article);
		self.vignettes = [];
	}, Base, {

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			self.vignettes = null;
		},

		loadData: function(options) {
			return null;
		},

		_beforeAddContent: function() {
			var self = this;
			self.addTitle(self.prototype.data("$title"), self.prototype.data("$description"));
		},

		addControl: function(c, isPageControl) {
			var self = this;
			Base.prototype.addControl.call(self, c, isPageControl);
			if (c && c.isVignette()) {
				self.vignettes.push(c);
			}
		},


		/**
		 * Scan vignettes to find control per id
		 * 	Allows to call ctrl actions in vignettes
		 * ctrlId is a unicid for all controls of all pages
		 */
		findVignetteControl: function(ctrlId) {
			var self = this;
			if (!self.vignettes) return null;
			var c, v;
			for (var i = 0; i < self.vignettes.length; i++) {
				v = self.vignettes[i];
				c = v.getPageControl(ctrlId);
				if (c) {
					return {
						control: c,
						vignette: v
					};
				}
			}
			return null;
		},

		afterRender: function(options) {
			var self = this;
			var deferred = $.Deferred();
			var rejectError = function(e) {
				log && log("Error loading vignettes", e);
				deferred.reject(e);
			};
			try {
				/* Standard process - bind actions - no deferred returned*/
				Base.prototype.afterRender.call(self, options);
				/* Load vignettes*/
				var promises = [];
				self.vignettes.forEach(function(v) {
					var options = {
						sdataParameters: self.state.options && self.state.options.sdataParameters || {}
					};
					v.load(null, options);
				});
				deferred.resolve();
			} catch (e) {
				rejectError(e);
			} finally {
				return deferred.promise();
			}
		},
		/**
		 * Context to store when dashboard is destroyed
		 * We save the context for each vignette (scroll, selection....)
		 * Context of the vignette will be retrieved with the index which is the identifier
		 * Vignette id is recalculated at creation and changes each time the vignette is loaded
		 */
		savedCtxCreate: function() {
			var self = this;
			var ctx = Base.prototype.savedCtxCreate.call(self);
			ctx.vignettes = [];
			self.vignettes && self.vignettes.forEach(function(v) {
				if (v.getPage()) {
					ctx.vignettes.push(v.getPage().savedCtxCreate());
				}
			});
			return ctx;
		},
		/**
		 * Restore the context for the dashboard (not for the vignette)
		 */
		savedCtxRestore: function(ctx) {
			// Std restore for all page
			Base.prototype.savedCtxRestore.call(this, ctx);
			// store vignettes context
			this._savedVignetteContext = ctx.vignettes;
		},
		/**
		 * Returns the context of a vignette v
		 * Called by the vignette
		 */
		savedCtxVignette: function(v) {
			var self = this;
			if (v == null || this._savedVignetteContext == null) return v;
			var idx = self.vignettes.indexOf(v);
			if (idx == -1 || idx > this._savedVignetteContext.length - 1) return null;
			return {
				current: this._savedVignetteContext[idx]
			};
		}
	});

exports.Page = _Page;
});

define('syracuse-tablet/html/js/sdata/sdatawhere/operator',['require','exports','module','syracuse-tablet/html/js/helpers/utils'],function (require, exports, module) {
var helpers = require('syracuse-tablet/html/js/helpers/utils');

exports.Operator = function(code, text, precedence, isPrefix, isInfix, isAssociative, isPredicate) {
	var self = this;
	self.code = code;
	self.text = text;
	self.precedence = precedence;
	self.isPrefix = isPrefix;
	self.isInfix = isInfix;
	self.isAssociative = isAssociative;
	self.isPredicate = isPredicate;
};
helpers.defineClass(exports.Operator, null, {
	toString: function() {
		return this.text;
	}
});

exports.operators = new function() {
	var self = this;
	self.operators = { //length : 0
	};

	init();

	function createOp(code, text, precedence, isPrefix, isInfix, isAssociative, isPredicate) {
		var op = new exports.Operator(code || text, text, precedence, isPrefix, isInfix, isAssociative, isPredicate);
		self.operators[op.text] = op;
		//self.operators.length++;
	}

	function init() {
		// codes are SQL operators - makes SQL conversion easy
		createOp(null, ".", 1, false, true, true, false);
		createOp(null, "not", 2, true, false, false, false);
		createOp("*", "mul", 3, false, true, true, false);
		createOp("/", "div", 3, false, true, true, false);
		createOp("%", "mod", 3, false, true, true, false);
		createOp(null, "+", 4, false, true, true, false);
		createOp(null, "-", 4, true, true, true, false);
		createOp("=", "eq", 5, false, true, false, true);
		createOp("<>", "ne", 5, false, true, false, true);
		createOp("<", "lt", 5, false, true, false, true);
		createOp("<=", "le", 5, false, true, false, true);
		createOp(">", "gt", 5, false, true, false, true);
		createOp(">=", "ge", 5, false, true, false, true);
		createOp(null, "between", 5, false, true, false, true);
		createOp(null, "in", 5, false, true, false, true);
		createOp(null, "like", 5, false, true, false, true);
		createOp(null, "and", 6, false, true, true, true);
		createOp(null, "or", 7, false, true, true, true);
		createOp(null, "(", 8, true, false, false, false);
		createOp(null, ")", 8, false, false, false, false);
		createOp(null, ",", 8, false, false, false, false);
	}

	return self;

};
});

define('syracuse-tablet/html/js/sdata/sdatawhere/token',['require','exports','module','syracuse-tablet/html/js/helpers/utils','./operator'],function (require, exports, module) {
var helpers = require('syracuse-tablet/html/js/helpers/utils');
var operators = require('./operator');

exports.tokenType = {
	identifier: 'identifier',
	operator: 'operator',
	literal: 'literal'
};

exports.Token = function(type, line, offset, length, val) {
	var self = this;
	self.type = type;
	self.value = val;

	var _line = line;
	var _offset = offset;
	var _length = length;
	self.getRemainingText = function() {
		return _line.substring(_offset, _line.length);
	};
};

helpers.defineClass(exports.Token, null, {
	matches: function(code) {
		return this.value instanceof operators.Operator && this.value.code == code;
	}
});
});

define('syracuse-tablet/html/js/sdata/sdatawhere/tokenizer',['require','exports','module','./token','./operator'],function (require, exports, module) {


var token = require('./token');
var operators = require('./operator');

exports.Tokenizer = new function() {
	var self = this;

	function _skipSpaces(chars, i) {
		while (i < chars.length && chars[i] === " ") {
			i++;
		}
		return i;
	}

	function _isDigit(str) {
		return new RegExp('[0-9]').test(str);
	}

	function _isLetter(str) {
		return new RegExp('[\$a-zA-Z%\']').test(str);
	}

	function _isWordChar(str) {
		return new RegExp('[\$a-zA-Z0-9_%\']').test(str);
	}

	function _parseNumber(line, chars, i, tokens) {
		var end = i + 1;
		while (end < chars.length && _isDigit(chars[end])) {
			end++;
		}
		var val;
		if (end < chars.length && chars[end] === '.') {
			end++;
			while (end < chars.length && _isDigit(chars[end])) {
				end++;
			}
			val = parseFloat(line.substring(i, end));

		} else {
			val = parseInt(line.substring(i, end), 10);
		}
		tokens.push(new token.Token(token.tokenType.literal, line, i, end - i,
			val));
		return end;
	}

	var _literals = {
		"true": true,
		"false": false,
		"null": null,
	};

	function _parseWord(line, chars, i, tokens) {
		var end = i + 1;
		while (end < chars.length && _isWordChar(chars[end])) {
			end++;
		}
		var word = chars.substr(i, end - i);
		var op = operators.operators.operators[word.toLowerCase()];
		if (op != null) {
			tokens.push(new token.Token(token.tokenType.operator, line, i, end - i, op));
		} else {
			var lit;
			if ((lit = _literals[word]) !== undefined) {
				tokens.push(new token.Token(token.tokenType.literal, line, i,
					end - i, lit));
			} else {
				tokens.push(new token.Token(token.tokenType.identifier, line,
					i, end - i, word));
			}
		}
		return end;
	}

	function _parseQuotedString(line, chars, i, tokens) {
		var quote = chars[i];
		var end = i + 1;
		var dest = 0;
		var res = "";
		while (end < chars.length) {
			if (chars[end] === quote) {
				end++;
				if (end === chars.length || chars[end] !== quote) {
					tokens.push(new token.Token(token.tokenType.literal, line,
						i, end - i, res));
					return end;
				}
			}
			res += chars[end++];
		}
		throw new Error('quoted string not terminated: ' + line.substring(i));
	}

	function _parseOperator(line, ch, i, tokens) {
		var op = operators.operators.operators[ch];
		tokens.push(new token.Token(token.tokenType.operator, line, i, 1, op));
		return i + 1;
	}

	function _parseDateTime(line, chars, i, tokens) {
		var end = i + 1,
			len = chars.length;
		while (end < len) {
			if (chars[end] == '@')
				break;
			end++;
		}
		if (end === chars.length) {
			throw new Error('Where parser: date constant not terminated:' + line.substring(i, line.length));
		}
		var str = chars.substr(i + 1, end - i - 1);
		var dt = new Date(str);
		if (dt != null) {
			var nt = new token.Token(token.tokenType.literal, line, i, end + 1 - i, dt);
			nt.dataType = "datetime";
			nt.svalue = str;
			tokens.push(nt);
		}
		return end + 1;
	}

	self.tokenize = function(line) {
		var tokens = [];
		var i = 0;
		while (i < line.length) {
			i = _skipSpaces(line, i);
			var ch = line[i];
			switch (ch) {
				case '@':
					i = _parseDateTime(line, line, i, tokens);
					break;
				case '"':
				case '\'':
					i = _parseQuotedString(line, line, i, tokens);
					break;
				case '.':
				case '-':
				case '+':
				case '(':
				case ')':
				case ',':
					i = _parseOperator(line, ch, i, tokens);
					break;
				default:
					if (_isLetter(ch)) {
						i = _parseWord(line, line, i, tokens);
					} else if (_isDigit(ch)) {
						i = _parseNumber(line, line, i, tokens);
					} else {
						throw new Error('invalid character: ' + line.substring(i));
					}
					break;
			}
		}

		return tokens;
	};

	return self;
};
});

define('syracuse-tablet/html/js/sdata/sdatawhere/expression',['require','exports','module','syracuse-tablet/html/js/helpers/utils'],function (require, exports, module) {
var helpers = require('syracuse-tablet/html/js/helpers/utils');

exports.Expression = function(config) {
	var self = this;

	self.children = null;
	if (config.operator) {
		self.type = "operator";
		self.value = config.operator;
		self.children = [];
		if (config.expression1) {
			self.children.push(config.expression1);
		}
		if (config.expression2) {
			self.children.push(config.expression2);
		}
	} else if (config.expressionType) {
		self.type = config.expressionType;
		self.value = config.value;
		self.svalue = config.svalue;
		self.dataType = config.dataType;
		if (self.type === "function") {
			self.children = [];
		}
	}
};
helpers.defineClass(exports.Expression, null, {
	isPredicate: function() {
		switch (this.type) {
			case "operator":
				return this.value.isPredicate;
			case "identifier":
				return true; // don't know
			case "function":
				return true; // don't know -- will improve later
			case "literal":
				return false;
			default:
				throw new Error("invalid expression type: " + this.type);
		}
	},
	toString: function() {
		if (this.children == null) {
			return this.value.toString();
		}
		var sb = [];
		sb.push("[" + this.value.toString());
		for (var i = 0; i < this.children.length; i++) {
			sb.push(" " + this.children[i].toString());
		}
		sb.push("]");
		return sb.join('');
	}

});
});

define('syracuse-tablet/html/js/sdata/sdatawhere/parser',['require','exports','module','./token','./operator','./tokenizer','./expression'],function (require, exports, module) {
var token = require('./token');
var operators = require('./operator');
var tokenizer = require('./tokenizer');
var expression = require('./expression');

exports.Parser = new function() {
	var self = this;
	var _maxPrecedence = 8;

	function _finishBetween(tokens, tokenIndex, exp, precedence) {
		if (tokenIndex[0] == tokens.length || !tokens[tokenIndex[0]].matches("and")) {
			throw new Error("invalid expression: expected 'and' after " + tokens[tokenIndex[0] - 1].getRemainingText());
		}
		tokenIndex[0]++;
		var arg = _parseExpression(tokens, tokenIndex, precedence);
		exp.children.push(arg);
	}

	function _parseExpression(tokens, tokenIndex, precedence) {
		var exp = _parseTerm(tokens, tokenIndex);
		while (tokenIndex[0] < tokens.length) {
			var tk = tokens[tokenIndex[0]];
			var op = tk.value instanceof operators.Operator ? tk.value : null;
			if (op == null || !op.isInfix || op.precedence > precedence) {
				break;
			}
			tokenIndex[0]++;
			if (op.code == "in") {
				if (tokenIndex[0] === tokens.length || !tokens[tokenIndex[0]].matches("(")) {
					throw new Error("invalid expression: '(' expected after " + tk.getRemainingText());
				}
				tokenIndex[0]++;
				exp = new expression.Expression({
					operator: op,
					expression1: exp
				});
				_parseArguments(tokens, tk, tokenIndex, exp.children);
			} else {
				var arg = _parseExpression(tokens, tokenIndex, op.precedence - 1);
				exp = new expression.Expression({
					operator: op,
					expression1: exp,
					expression2: arg
				});
				if (op.code == "between") {
					_finishBetween(tokens, tokenIndex, exp, op.precedence);
				}
			}
			if (!op.isAssociative && op.precedence == precedence) {
				return exp;
			}
		}
		return exp;
	}

	function _parseTerm(tokens, tokenIndex) {
		if (tokenIndex[0] == tokens.length) {
			throw new Error("premature end of expression");
		}
		var tk = tokens[tokenIndex[0]];
		switch (tk.type) {
			case token.tokenType.identifier:
				tokenIndex[0]++;
				if (tokenIndex[0] < tokens.length && tokens[tokenIndex[0]].matches("(")) {
					return _parseFunctionCall(tokens, tk, tokenIndex);
				} else {
					return new expression.Expression({
						expressionType: "identifier",
						value: tk.value
					});
				}
			case token.tokenType.literal:
				tokenIndex[0]++;
				return new expression.Expression({
					expressionType: "literal",
					value: tk.value,
					svalue: tk.svalue,
					dataType: tk.dataType
				});
			case token.tokenType.operator:
				var op = tk.value;
				if (!op.isPrefix) {
					throw new Error("invalid expression: expected beginning of term at " + tk.getRemainingText());
				}
				tokenIndex[0]++;
				return _parsePrefixOperator(tokens, op, tokenIndex);
			default:
				throw new Error("internal error: bad token type " + tk.type);
		}
	}

	function _parseArguments(tokens, tk, tokenIndex, arguments0) {
		if (tokenIndex[0] < tokens.length && tokens[tokenIndex[0]].matches(")")) {
			tokenIndex[0]++;
			return;
		}
		while (tokenIndex[0] < tokens.length) {
			var arg = _parseExpression(tokens, tokenIndex, _maxPrecedence);
			arguments0.push(arg);
			if (tokenIndex[0] < tokens.length && tokens[tokenIndex[0]].matches(")")) {
				tokenIndex[0]++;
				return;
			}
			if (tokenIndex[0] == tokens.length || !tokens[tokenIndex[0]].matches(",")) {
				throw new Error("invalid expression: expected ',' or ')' at " + tokens[tokenIndex[0]].getRemainingText());
			}
			tokenIndex[0]++;
		}
		throw new Error("invalid function call syntax: argument missing after " + tk.getRemainingText());
	}

	function _parsePrefixOperator(tokens, op, tokenIndex) {
		var arg1;
		switch (op.code) {
			case "-":
			case "not":
				arg1 = _parseExpression(tokens, tokenIndex, 1);
				return new expression.Expression({
					operator: op,
					expression1: arg1
				});
			case "(":
				arg1 = _parseExpression(tokens, tokenIndex, op.precedence);
				//require('term').stream.print('???' + tokens[tokenIndex[0]].value);
				if (tokenIndex[0] == tokens.length || !tokens[tokenIndex[0]].matches(")")) {
					throw new Error("invalid expression: expected ')' after " + tokens[tokenIndex[0] - 1].getRemainingText());
				}
				tokenIndex[0]++;
				return arg1;
			default:
				throw new Error("internal error: bad prefix operator " + op.code);
		}
	}

	function _parseFunctionCall(tokens, tk, tokenIndex) {
		tokenIndex[0]++;
		var exp = new expression.Expression({
			expressionType: "function",
			value: tk.value
		});
		_parseArguments(tokens, tk, tokenIndex, exp.children);
		return exp;
	}

	self.parse = function(str) {
		if (str == null || str.length == 0) {
			return null;
		}
		var tokens = tokenizer.Tokenizer.tokenize(str);
		var tokenIndex = [];
		tokenIndex[0] = 0;
		var exp = _parseExpression(tokens, tokenIndex, _maxPrecedence);
		if (tokenIndex[0] != tokens.length) {
			throw new Error("invalid expression: unexpected token at " + tokens[tokenIndex[0]].getRemainingText());
		}
		return exp;
	};

	return self;
};
});

define('syracuse-tablet/html/js/sdata/sdatawhere/whereUtils',['require','exports','module'],function (require, exports, module) {

function _exec(data, exp, proto) {
	if (exp.type == "identifier") {
		exp.property = data[exp.value];
		// issue #3744 in X3 boolean properties has numeric values
		// and in the x3 filters (where clauses use numeric values 1(false) and
		// 2(true) for boolean properties)
		var item = proto && proto.$properties && proto.$properties.$resources ? proto.$properties.$resources.$item : null;
		if (item && item.$properties && item.$properties[exp.value] && item.$properties[exp.value].$type === "application/x-boolean") {
			exp.property = exp.property === true ? 2 : 1;
		}
	} else if (exp.type == "literal") {
		exp.property = (exp.dataType == "datetime") ? exp.svalue : exp.value;
	} else {
		if (exp.children) {
			var property = null;

			// propagate property from child to parent if operator if low level
			// operator
			if (exp.type == "operator") {
				switch (exp.value.code) {

					case "and":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						exp.property = (exp.children[0].property && exp.children[1].property);
						break;
					case "or":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						exp.property = (exp.children[0].property || exp.children[1].property);
						break;
					case "between":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						exp.property = (exp.children[0].property >= exp.children[1].property) && (exp.children[0].property <= exp.children[2].property);
						break;
					case ">=":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						exp.property = (exp.children[0].property >= exp.children[1].property);
						break;
					case ">":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						exp.property = (exp.children[0].property > exp.children[1].property);
						break;
					case "<=":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						exp.property = (exp.children[0].property <= exp.children[1].property);
						break;
					case "<":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						exp.property = (exp.children[0].property < exp.children[1].property);
						break;
					case "like_s":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						exp.property = (exp.children[0].property.toUpperCase()
							.indexOf(exp.children[1].property.toUpperCase()) === 0);
						break;
					case "like":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						var val = exp.children[1].property.toUpperCase().replace(
							/%/g, '');
						exp.property = (exp.children[0].property.toUpperCase()
							.indexOf(val) >= 0);
						break;
					case "=":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						if (exp.children[0].property == "0000-00-00" && exp.children[1].dataType === "datetime") {
							exp.children[0].property = "";
						}
						if (exp.children[1].property == "0000-00-00" && exp.children[0].dataType === "datetime") {
							exp.children[1].property = "";
						}
						exp.property = (exp.children[0].property == exp.children[1].property);
						break;
					case "<>":
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
						});
						if (exp.children[0].property == "0000-00-00" && exp.children[1].dataType === "datetime") {
							exp.children[0].property = "";
						}
						if (exp.children[1].property == "0000-00-00" && exp.children[0].dataType === "datetime") {
							exp.children[1].property = "";
						}
						exp.property = (exp.children[0].property != exp.children[1].property);
						break;
					case ".":
						_exec(data, exp.children[0], proto);
						_exec(exp.children[0].property, exp.children[1], proto);
						exp.property = exp.children[1].property;
						break;
					default:
						exp.property = property;
						// propagate to literals
						exp.children.forEach(function(child) {
							_exec(data, child, proto);
							if (child.type == "literal")
								child.property = property;
						});
				}
			} else if (exp.type == "function") {
				throw new Error("exp.type == 'function' not implemented");
			}
		}
	}
};

exports.execWhere = function(dataContext, exp, proto) {

	if (exp == null) {
		return true;
	}

	_exec(dataContext, exp, proto);

	return exp.property;

};
});

define('syracuse-tablet/html/js/sdata/sdataDispatcherLocal',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/sdata/entities/clientContract','syracuse-tablet/html/js/sdata/sdatawhere/parser','syracuse-tablet/html/js/sdata/sdatawhere/whereUtils'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var clientContract = require('syracuse-tablet/html/js/sdata/entities/clientContract');
var parser = require('syracuse-tablet/html/js/sdata/sdatawhere/parser').Parser;
var whereUtils = require('syracuse-tablet/html/js/sdata/sdatawhere/whereUtils');

exports.Dispatcher = utils.defineClass(function() {}, null, {
	"getEntity": function($representation) {
		var repr = $representation && $representation.split(".");
		if (repr && repr[0] && repr[0].smStartsWith("QUERY~")) {
			repr = repr[0].split("~")[1];
		} else {
			repr = repr && repr[0];
		}
		return repr && clientContract.getEntity(repr);
	},
	"accept": function(op, data) {
		var self = this;
		var deferred = $.Deferred();
		deferred.resolve(self.getEntity(op.$representation) != null);
		return deferred.promise();
	},

	"prototype": function(op, data) {
		var deferred = $.Deferred();
		deferred.reject("Dispatcher should never request for prototypes since they are cached in the application model on client side");
		return deferred.promise();
	},

	"new": function(op, data) {
		var self = this;
		var ent = self.getEntity(op.$representation);
		return ent.$services["$new"](op, data);
	},

	"read": function(op, data) {
		var self = this;
		var ent = self.getEntity(op.$representation);
		return ent.$services["$read"](op, data);
	},

	"query": function(op, data) {
		var self = this;
		var ent = self.getEntity(op.$representation);
		var list = ent.$services["$query"](op, data);

		// Apply where condition
		if (op.$where) {
			var deferred = $.Deferred();
			list.then(function(resources) {
				var list = resources.$resources;
				var exp = parser.parse(op.$where);
				var repr = op.$representation && op.$representation.split(".");
				var $proto = clientContract.getPrototype(repr[0], repr[1]);
				var res = [];
				list.forEach(function(item, i) {
					if (whereUtils.execWhere(item, exp, $proto)) {
						res.push(item);
					}
				});
				deferred.resolve({
					$resources: res
				});
			}).fail(function(e) {
				deferred.reject(e);
			});
			return deferred.promise();
		}
		return list;
	},

	"save": function(op, data) {
		var self = this;
		var ent = self.getEntity(op.$representation);
		return ent.$services["$save"](op, data);
	},

	"delete": function(op, data) {
		var self = this;
		var ent = self.getEntity(op.$representation);
		return ent.$services["$delete"](op, data);
	},
	"service": function(op, data) {
		var self = this;
		var ent = self.getEntity(op.$representation);
		return ent.$services[op.$service](op, data);
	}
});
});

define('syracuse-tablet/html/js/sdata/sdataDispatcherHttp',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/locale','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/logger','syracuse-tablet/html/js/sdata/sdataHttp'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("sdataDispatcher");
var sdataHttp = require('syracuse-tablet/html/js/sdata/sdataHttp');

exports.Dispatcher = utils.defineClass(function() {}, null, {
	"accept": function() {
		var deferred = $.Deferred();
		deferred.resolve(true);
		return deferred.promise();
	},

	/**
	 *  Called for every request handled by the dispatcher
	 *  Can be used to disable caching in general or for specific representations
	 */
	_useCache: function(op, data) {
		var nocache = op.$parsedUrl && op.$parsedUrl.query && op.$parsedUrl.query.nocache;
		if (nocache) {
			return false;
		}
		//		return false;
		return true;
	},

	// GET: {$baseUrl}/SUPERV//$prototypes('AQTCRUD.$query')
	"prototype": function(op, data) {
		var deferred = $.Deferred();
		deferred.reject("Dispatcher should never request for prototypes since they are cached in the application model on client side");
		return deferred.promise();
	},

	//GET: {$baseUrl}/SUPERV/AQTCRUD/$template?representation=AQTCRUD.$create
	"new": function(op, data) {
		var self = this;
		var deferred = $.Deferred();
		try {
			self._newGetCache(op, data)
				.then(function(result) {
					// got new template from cache
					if (result) {
						log && log("Read template from cache: " + op.$representation);
						// Change UUID since we create a new record!
						result.$uuid = utils.UUID();
						return result;
					} else {
						return self._newDoHttp(op, data)
							.then(function(result) {
								if (result.isSuccess) {
									var data = result.responseJSON;
									return self._newPutCache(op, data)
										.then(function() {
											return data;
										});
								}
								throw new Error("Error reading $template: " + JSON.stringify(result));
							}).fail(function(e) {
								return $.smReject(e);
							});
					}
				})
				.then(function(result) {
					deferred.resolve(result);
				}).fail(function(e) {
					deferred.reject(e);
				});
		} catch (e) {
			deferred.reject(e);
		}
		return deferred.promise();
	},

	_newGetCache: function(op) {
		var self = this;
		if (self._useCache(op, null, "read")) {
			var cache = globals.getCache();
			log && log("Reading template from cache: " + op.$representation);
			return cache.read({
				$representation: "$templates",
				$endpoint: op.$endpoint,
				$key: op.$representation
			});
		}
		log && log("Disabled reading template from cache : " + op.$representation);
		return $.smResolve();
	},
	_newDoHttp: function(op, data) {
		var send = {
			method: "GET",
			url: op.$link.$url
		};
		return sdataHttp.send(send);
	},
	_newPutCache: function(op, data) {
		var self = this;
		if (self._useCache(op, data, "write")) {
			log && log("Writing template to cache: " + op.$representation);
			var cache = globals.getCache();
			return cache.put({
				$representation: "$templates",
				$key: op.$representation,
				$endpoint: op.$endpoint,
				$data: data
			});
		}
		log && log("Disabled writing template to cache : " + op.$representation);
		return $.smResolve();
	},

	//GET: {$baseUrl}/SUPERV/AQTCRUD('10')?representation=AQTCRUD.$create
	"read": function(op, data) {
		var self = this;
		var deferred = $.Deferred();
		try {
			self._readGetCache(op, data)
				.then(function(result) {
					if (result) {
						log && log("Read data from cache: " + op.$representation);
						return result;
					} else {
						return self._readDoHttp(op, data)
							.then(function(result) {
								if (result.isSuccess) {
									var data = result.responseJSON;
									return self._readPutCache(op, data)
										.then(function() {
											return data;
										});
								}
								throw new Error("Error reading data: " + JSON.stringify(result));
							}).fail(function(e) {
								return $.smReject(e);
							});
					}
				})
				.then(function(result) {
					deferred.resolve(result);
				}).fail(function(e) {
					deferred.reject(e);
				});
		} catch (e) {
			deferred.reject(e);
		}
		return deferred.promise();
	},

	_readGetCache: function(op) {
		var self = this;
		if (self._useCache(op, null, "read")) {
			var cache = globals.getCache();
			log && log("Reading data from cache: " + op.$representation);
			return cache.read({
				$representation: op.$representation,
				$endpoint: op.$endpoint,
				$key: op.$key
			});
		}
		log && log("Disabled reading data from cache : " + op.$representation);
		return $.smResolve();
	},
	_readDoHttp: function(op, data) {
		var send = {
			method: "GET",
			url: op.$link.$url
		};
		return sdataHttp.send(send);
	},
	_readPutCache: function(op, data) {
		var self = this;
		if (self._useCache(op, data, "write")) {
			log && log("Writing data to cache: " + op.$representation);
			var cache = globals.getCache();
			return cache.put({
				$representation: op.$representation,
				$key: op.$key,
				$endpoint: op.$endpoint,
				$data: data
			});
		}
		log && log("Disabled writing data to cache : " + op.$representation);
		return $.smResolve();
	},

	// GET: {$baseUrl}/SUPERV/AQTCRUD?representation=AQTCRUD.$create?where=xxx
	"query": function(op, data) {
		var self = this;
		var deferred = $.Deferred();
		try {
			self._queryGetCache(op, data)
				.then(function(result) {
					if (result && result.length > 0) {
						log && log("Queried data from cache: " + op.$representation);
						var response = {};
						self._queryCutAndAddLinks(op, data, result, response);
						if (response.$resources.length > 0) {
							return response;
						}
					};

					return self._queryDoHttp(op, data)
						.then(function(result) {
							if (result.isSuccess) {
								var data = result.responseJSON;
								return self._queryPutCache(op, data)
									.then(function() {
										return data;
									});
							} else {
								throw new Error("Error querying data: " + JSON.stringify(result, null, 2));
							}
						}).fail(function(e) {
							return $.smReject(e);
						});
				})
				.then(function(result) {
					deferred.resolve(result);
				}).fail(function(e) {
					deferred.reject(e);
				});
		} catch (e) {
			deferred.reject(e);
		}
		return deferred.promise();
	},
	_queryCutAndAddLinks: function(op, data, result, response) {
		var self = this;
		var baseUrl = op.$parsedUrl.source.split("?")[0];
		var query = "";
		var key;
		var max = 30;

		if (op.$parsedUrl.query && op.$parsedUrl.query.where) {
			query += "&where=" + op.$parsedUrl.query.where;
		}

		key = op.$parsedUrl.query && op.$parsedUrl.query.key;
		var firstKeyRead;
		var lastKeyRead;

		var resources = response.$resources = [];
		var hasNextPage = false;
		var hasPreviousPage = false;
		var i;

		var pageName = op.$endpoint + "." + op.$representation;
		var proto = globals.getPrototype(pageName);
		var val;
		var kv;
		proto = (proto.$properties && proto.$properties.$resources && proto.$properties.$resources.$item) || proto;
		var keyField;
		if (proto.$key) {
			keyField = proto.$key.replace(/{/g, "").replace(/}/g, "");
		} else {
			keyField = "$uuid";
		}
		var keyType = proto.$properties[keyField];
		var isNumericKey = keyType && keyType.$type && keyType.$type !== "application/x-string";

		if (key && key.smStartsWith("gt")) {
			val = isNumericKey ? 0 + key.substr(3) : "" + key.substr(3);

			for (i = 0; i < result.length; i++) {
				kv = self._calculateKey(proto, result[i]);
				kv = isNumericKey ? +kv : "" + kv;

				if (kv > val) {
					resources.push(result[i]);
					if (resources.length > max) {
						break;
					}
				} else {
					hasPreviousPage = true;
				}
			}
			if (resources.length > 0) {
				if (resources.length > max) {
					resources.pop();
					hasNextPage = true;
				}
				firstKeyRead = self._calculateKey(proto, resources[0]);
				lastKeyRead = self._calculateKey(proto, resources[resources.length - 1]);
			}
		} else if (key && key.smStartsWith("lt")) {

			if (key.length > 3) {
				val = isNumericKey ? +key.substr(3) : "" + key.substr(3);

				for (i = result.length - 1; i >= 0; i--) {

					kv = self._calculateKey(proto, result[i]);
					kv = isNumericKey ? 0 + kv : "" + kv;

					if (kv < val) {
						resources.push(result[i]);
						if (resources.length > max) {
							break;
						}
					} else {
						hasNextPage = true;
					}
				}
				if (resources.length > max) {
					hasPreviousPage = true;
					resources.pop();
				}
			} else {
				for (i = result.length - 1; i >= 0; i--) {
					resources.push(result[i]);
					if (resources.length > max) {
						break;
					}
				}
			}
			if (resources.length > 0) {
				if (resources.length > max) {
					hasPreviousPage = true;
					resources.pop();
				}
				response.$resources = resources = resources.reverse();

				firstKeyRead = self._calculateKey(proto, resources[0]);
				lastKeyRead = self._calculateKey(proto, resources[resources.length - 1]);
			}
		} else {
			for (i = 0; i < result.length; i++) {
				resources.push(result[i]);
				if (resources.length > max) {
					break;
				}
			}
			if (resources.length > 0) {
				if (resources.length > max) {
					hasNextPage = true;
					resources.pop();
				}

				firstKeyRead = self._calculateKey(proto, resources[0]);
				lastKeyRead = self._calculateKey(proto, resources[resources.length - 1]);
			}
		}

		var links = response.$links = {};
		if (key) {
			links.$first = {
				$url: baseUrl + "?representation=" + op.$representation + query
			};
		}

		if (key && firstKeyRead && hasPreviousPage) {
			if (key !== "gt") { // not on first page?
				links.$previous = {
					$url: baseUrl + "?representation=" + op.$representation + query + "&key=lt." + firstKeyRead
				};
			}
		}

		if (key !== "lt" && lastKeyRead && hasNextPage) { // not on last page and more records
			links.$next = {
				$url: baseUrl + "?representation=" + op.$representation + query + "&key=gt." + lastKeyRead
			};
		}
		if (key !== "lt") {
			links.$last = {
				$url: baseUrl + "?representation=" + op.$representation + query + "&key=lt"
			};
		}

		links.$more = {
			$url: op.$parsedUrl.source + "&nocache=true"
		};
	},
	_queryGetCache: function(op) {
		var self = this;
		if (self._useCache(op, null, "read")) {
			var cache = globals.getCache();
			log && log("Querying data from cache: " + op.$representation);
			var p = op.$endpoint + "." + op.$representation;
			var proto = globals.getPrototype(p);
			if (proto) {
				self._checkQueryPrototype(op, proto);
				return cache.query({
					$proto: proto,
					$endpoint: op.$endpoint,
					$where: op.$where
				});
			} else {
				// Ususally this should never be called since the sync call above
				// returns the prototype already.
				return sdataHttp.fetchRemotePrototype(op).then(function(proto) {
					self._checkQueryPrototype(op, proto);
					return cache.query({
						$proto: proto,
						$endpoint: op.$endpoint,
						$where: op.$where
					}).fail(function(e) {
						return $.smReject(e);
					});
				});
			}
		}
		log && log("Disabled querying data from cache : " + op.$representation);
		return $.smResolve();
	},
	_queryDoHttp: function(op, data) {
		var send = {
			method: "GET",
			url: op.$link.$url
		};
		return sdataHttp.send(send);
	},
	_queryPutCache: function(op, data) {
		var self = this;
		if (self._useCache(op, data, "write")) {
			log && log("Writing data to cache: " + op.$representation);
			var cache = globals.getCache();

			var pageName = op.$endpoint + "." + op.$representation;
			var proto = globals.getPrototype(pageName);
			proto = (proto.$properties && proto.$properties.$resources && proto.$properties.$resources.$item) || proto;
			return data.$resources.forEachPromise(function(item) {
				var key = self._calculateKey(proto, item);
				return cache.put({
					$representation: op.$representation,
					$key: key,
					$endpoint: op.$endpoint,
					$data: item
				});
			});
		}
		// No cache
		return $.smResolve(data);
		log && log("Disabled writing data to cache : " + op.$representation);
	},


	// PUT: {$baseUrl}/SUPERV/AQTCRUD('10')?representation=AQTCRUD.$edit
	// POST: {$baseUrl}/SUPERV/AQTCRUD?representation=AQTCRUD.$create
	"save": function(op, data) {
		var self = this;
		var deferred = $.Deferred();
		try {
			self._saveDoHttp(op, data)
				.then(function(result) {
					if (result.isSuccess) {
						var data = result.responseJSON;
						return self._savePutCache(op, data)
							.then(function() {
								return data;
							});
					}
					deferred.reject(result);
				})
				.then(function(result) {
					deferred.resolve(result);
				}).fail(function(e) {
					deferred.reject(e);
				});
		} catch (e) {
			deferred.reject(e);
		}
		return deferred.promise();
	},

	_saveDoHttp: function(op, data) {
		var send = {
			method: op.$link.$method,
			url: op.$link.$url,
			send: data
		};
		return sdataHttp.send(send);
	},

	_savePutCache: function(op, data) {
		var self = this;
		try {
			if (self._useCache(op, data, "write")) {
				log && log("Writing data to cache: " + op.$representation);
				var cache = globals.getCache();
				var key = op.$key;
				if (!key) {
					var pageName = op.$endpoint + "." + op.$representation;
					var proto = globals.getPrototype(pageName);
					proto = (proto.$properties && proto.$properties.$resources && proto.$properties.$resources.$item) || proto;
					key = self._calculateKey(proto, data);
				}
				return cache.put({
					$representation: op.$representation,
					$key: key,
					$endpoint: op.$endpoint,
					$data: data
				});
			}
			log && log("Disabled writing data to cache : " + op.$representation);
			return $.smResolve();
		} catch (e) {
			return $.smReject(e);
		}
	},

	// DELETE: {$baseUrl}/SUPERV/AQTCRUD('10')?representation=AQTCRUD.$query
	"delete": function(op, data) {
		var self = this;
		var deferred = $.Deferred();
		try {
			self._deleteDoHttp(op, data)
				.then(function(result) {
					if (result.isSuccess) {
						var data = result.responseJSON;
						return self._deleteRemoveCache(op, data)
							.then(function() {
								return data;
							});
					}
					return $.smReject(result); //new Error("Error saving object: " + JSON.stringify(result)));
				})
				.then(function(result) {
					deferred.resolve(result);
				}).fail(function(e) {
					deferred.reject(e);
				});
		} catch (e) {
			deferred.reject(e);
		}
		return deferred.promise();
	},
	_deleteDoHttp: function(op, data) {
		var send = {
			method: op.$link.$method,
			url: op.$link.$url
		};
		return sdataHttp.send(send);
	},
	_deleteRemoveCache: function(op, data) {
		var self = this;
		if (self._useCache(op, data, "write")) {
			log && log("Deleting data from cache: " + op.$representation);
			var cache = globals.getCache();
			return cache.remove({
				$representation: op.$representation,
				$key: op.$key,
				$endpoint: op.$endpoint
			});
		}
		log && log("Disabled deleting data from cache : " + op.$representation);
		return $.smResolve();
	},

	"service": function(op, data) {
		if (utils.isOnline()) {
			var send = {
				method: op.$link.$method,
				url: op.$link.$url,
				data: data
			};
			return sdataHttp.send(send);
		} else {
			return $.smResolve({
				"$diagnoses": [{
					"$severity": "error",
					"$message": locale.text("error.service.offline")
				}]
			});
		}
	},
	_calculateKey: function(proto, item) {
		var key;
		if (proto.$key) {
			key = proto.$key.replace(/\{(.*?)\}/g, function(match, prop) {
				return item[prop];
			});
		} else {
			key = item.$uuid;
		}
		return key;
	},
	_checkQueryPrototype: function(op, proto) {
		// Queries (Requester) do not generate a full prototype, add what's missing here
		if (op.$representation.smStartsWith("QUERY~")) {
			if (proto.$properties.$resources.$item && !proto.$properties.$resources.$item.$type) {
				proto.$properties.$resources.$item.$type = "{$baseType}." + op.$representation;
			}
		}
	}
});
});

define('syracuse-tablet/html/js/sdata/sdataDispatcher',['require','exports','module','syracuse-tablet/html/js/helpers/logger','syracuse-tablet/html/js/sdata/sdataUtils','syracuse-tablet/html/js/sdata/sdataDispatcherLocal','syracuse-tablet/html/js/sdata/sdataDispatcherHttp'],function (require, exports, module) {

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("sdataDispatcher");
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');

var dispLocal = require('syracuse-tablet/html/js/sdata/sdataDispatcherLocal').Dispatcher;
var dispHttp = require('syracuse-tablet/html/js/sdata/sdataDispatcherHttp').Dispatcher;

var _dispatchers = [
	new dispLocal(),
	new dispHttp()
];

/**
 * link
 * {
 * 	 $url: ...,
 * 	 $method: "GET", ...
 * }
 * data
 * {
 *   ...
 * }
 */
exports.dispatch = function(link, data, options) {
	var deferred = $.Deferred();
	try {
		log && log("Dispatch: " + link.$method + ": " + link.$url);

		var op = exports.parseLink(link);

		var dispatcher;
		_dispatchers.forEachPromise(function(disp) {
			return disp.accept(op, data);
		}, function(disp, result) {
			if (result === true) {
				dispatcher = disp;
				return true;
			}
			return false;
		});

		var prom = dispatcher[op.$operation](op, data);
		if (!prom) {
			throw new Error("Could not dispatch: " + link.$method + ": " + link.$url + " (" + op.$operation + ")");
		}
		prom.then(function(result) {
			deferred.resolve(result);
		}).fail(function(e) {
			deferred.reject(e);
		});
	} catch (e) {
		deferred.reject(e);
	}
	return deferred.promise();
};

/**
 * Parse link to identify which kind of operation it's intended to start
 *
 * link:
 * {
 * 	 $url: ...,
 * 	 $method: "GET", ...
 * }
 *
 * Return:
 * {
 *    "$link":{
 *       "$method":"DELETE",
 *       "$url":"http://localhost:8124/sdata/x3/erp/SUPERV/AQTCRUD('10')?representation=AQTCRUD.$query"
 *    },
 *    "$parsedUrl":{
 * ...
 *       "directory":"/sdata/x3/erp/SUPERV/AQTCRUD('10')",
 *       "path":"/sdata/x3/erp/SUPERV/AQTCRUD('10')",
 *       "relative":"/sdata/x3/erp/SUPERV/AQTCRUD('10')?representation=AQTCRUD.$query",
 * ...
 *       "query":{
 *          "representation":"AQTCRUD.$query"
 *       },
 * ...
 *       "representation":"AQTCRUD",
 *    },
 *    "$operation":"delete",
 *    "$key":"10",
 *    "$representation":"AQTCRUD.$query"
 * }
 *
 */
exports.parseLink = function(link) {
	var url = link.$url;
	var result = {
		$link: link,
		$parsedUrl: sdataUtils.parseSDataURL(link.$url)
	};
	var keyExp = /\('(.*?)'\)/;

	result.$endpoint = result.$parsedUrl.application + "." + result.$parsedUrl.contract + "." + result.$parsedUrl.dataset;
	var dir = result.$parsedUrl.directory; // All except query parameters
	var idx;
	if (link.$method === "GET") {
		if (url.indexOf("$prototypes") > -1) {
			result.$operation = "prototype";
			result.$representation = /\$prototypes\('(.*?)'\)/.exec(url)[1];
		} else if (dir.indexOf("$template") > -1) {
			result.$operation = "new";
			result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
		} else if ((idx = dir.indexOf("/$services/")) > -1) {
			var service = dir.substring(idx + 11);
			result.$operation = "service";
			result.$service = service;
			result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
		} else {
			var key = keyExp.exec(dir);
			var isQuery = dir.indexOf("/QUERY(") > -1;
			if (key && !isQuery) {
				result.$operation = "read";
				result.$key = key[1];
				result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
			} else {
				result.$operation = "query";
				result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
			}
		}
		if (result.$parsedUrl.query && result.$parsedUrl.query.where) {
			result.$where = result.$parsedUrl.query.where;
		}
	} else if ((idx = dir.indexOf("/$services/")) > -1) {
		var service = dir.substring(idx + 11);
		result.$operation = "service";
		result.$service = service;
		result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
	} else if (link.$method === "DELETE") {
		var key = keyExp.exec(dir);
		result.$operation = "delete";
		result.$key = key[1];
		result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
	} else {
		// PUT/POST and no service
		var key = keyExp.exec(dir);
		if (key) {
			result.$operation = "save";
			result.$key = key[1];
			result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
		} else {
			result.$operation = "save";
			result.$representation = result.$parsedUrl.query && result.$parsedUrl.query.representation;
		}
	}

	return result;
};
});

define('syracuse-tablet/html/js/pages/pageRegular',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/logger','syracuse-tablet/html/js/pages/page','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/sdata/sdataDispatcher','syracuse-tablet/html/js/application/appFactory','syracuse-tablet/html/js/sdata/sdataUtils','syracuse-tablet/html/js/ui/modal','syracuse-tablet/html/js/helpers/notifications'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("page");
var Base = require('syracuse-tablet/html/js/pages/page').Page;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var dispatcher = require('syracuse-tablet/html/js/sdata/sdataDispatcher');
var factory = require('syracuse-tablet/html/js/application/appFactory');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var modal = require('syracuse-tablet/html/js/ui/modal');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

//These link enable wait on control - TODO enable only if data not in cache for next, prev...
var _controlWheel = ["$more"]; //"$next", "$last", "$previous","$more","$first"];
/**
 * Page with representation and sdata back-end
 */
var _Page = utils.defineClass(
	function($parent, state, prototype, article) {
		var self = this;
		Base.call(self, $parent, state, prototype, article);
		self.gadget = self.state.options.gadget;
		self._initSdataInfo(self.state.options["sdata-url"], self.state.options["sdata-method"]);
		notifications.subscribe(self, ["sm.lookup.selection"], 1);
		if (self.prototype.data("$url")) {
			self.$facet = sdataUtils.parseSDataURL(self.prototype.data("$url")).facet;
			// Override the standard "display" activity
			self.$activity = self.$facet === "edit" ? "edit" : self.$facet === "create" ? "create" : "read";
		}
	}, Base, {
		/**
		 *  Init sdata url - Called in constructor and page refresh
		 * 	sdataUrl is optional in case of a gadget (to see with Mathias)
		 * 	sdataMethod is optional
		 *  Can be overridden - rowdetail
		 */
		_initSdataInfo: function(sdataUrl, sdataMethod) {
			var self = this;
			if (!sdataUrl) {
				if (self.gadget) {
					sdataUrl = self.gadget.getSDataUrl(self.prototype);
				} else {
					sdataUrl = self.prototype.data("$url");
				}
			}
			if (self.gadget) {
				var params = self.gadget.getParameters();
				if (params.where) {
					sdataUrl = sdataUtils.addWhereClause(sdataUrl, params.where, self.state.options.sdataParameters);
				}
			}
			if (!sdataUrl) throw new Error("$url (sDataUrl) is expected");
			self.state.options["sdata-url"] = self.sDataUrl = sdataUrl;
			self.sDataMethod = sdataMethod || "GET";
		},

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			self.gadget = null;
		},
		/**
		 * True if display is edit mode
		 */
		isEditMode: function() {
			var url = this.prototype.data("$url");
			return this.$activity === "edit" || this.$activity === "create";
		},

		_beforeAddContent: function() {
			var self = this;
			if (!self.isVignette) {
				var ttl = self.prototype.data("$title");
				self.addTitle(globals.getApplication().getTitle() + (ttl ? " - " + ttl : ""));
			}
		},

		/**
		 * Used by html builder to create a link to full page
		 */
		getOpenLinkAttrs: function() {
			var self = this;
			var res = Base.prototype.getOpenLinkAttrs.call(self);
			res["data-sdata-url"] = self.sDataUrl;
			res["data-sdata-method"] = self.sDataMethod;
			res["data-gadget-id"] = self.gadget.data("$uuid");
			return res;
		},

		/**
		 * Refresh the page
		 * 	Called from a vignette or full page (callBackInterface)
		 * 	options.sdata-url -> New url
		 * 	options.controlId!=null -> refresh the control
		 *  options.type Type of refresh (pagination...)
		 *  callBackInterface
		 *  	waitStop(ctrlId) / waitStart(ctrlId)
		 */
		refresh: function(options, callBackInterface) {
			var self = this;
			var deferred = $.Deferred();
			var url = options["sdata-url"];
			var controlId = options["controlId"];
			var _wait = function(status) {
				// I added the capability to enable the wait on the control
				// True if the type of refresh needs the display of wheel on control ($more)
				var ctrlWheel = controlId ? _controlWheel.indexOf(options.type) >= 0 : false;
				if (callBackInterface) {
					// Caller wheel - Ex: vignette
					var m = "wait" + status.smCapitalize();
					if (callBackInterface[m]) callBackInterface[m](ctrlWheel ? controlId : null);
					return;
				}
				// Page wheel or control wheel if ctrlId && pagination
				// TODO use the same name waitStart/waitStop for all objects
				self["waitWheel" + status.smCapitalize()].call(self, ctrlWheel ? controlId : null);
			};
			try {
				var _succeeded = function() {
					_wait("stop");
					self.refreshControls(controlId ? [controlId] : null, options);
					self.$$elmt.scrollTop(0).scrollLeft(0);
					deferred.resolve();
				};
				if (!url) {
					_succeeded();
				} else {
					_wait("start");
					/* url can change on refresh (paginations)*/
					self._initSdataInfo(url);
					self.loadData()
						.then(function() {
							_succeeded();
						}).fail(function(e) {
							_wait("stop");
							deferred.reject(e);
						});
				}
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		loadData: function(options) {
			var deferred = $.Deferred();
			var self = this;
			var _rejectError = function(e) {
				log && log("loadData failed", e);
				deferred.reject(e);
			};
			try {
				dispatcher.dispatch({
					$url: self.sDataUrl,
					$method: self.sDataMethod
				}).then(function(data) {
					self.updateDao(data);
					return deferred.resolve();
				}).fail(function(e) {
					_rejectError(e);
				});
			} catch (e) {
				_rejectError(e);
			} finally {
				return deferred.promise();
			}
		},

		updateDao: function(data, options) {
			var self = this;
			self.setDao(factory.createDaoSdata("representation", data, self.prototype, null, options || {}));
		},
		/**
		 * Lookup notification
		 * 		rowData:	Selected row data
		 * 		controlId:	Id of control to refresh
		 */
		notifLookupSelection: function(rowData, controlId) {
			var self = this;
			if (!self.isActive()) return;
			try {
				var ctrl = self.getControl(controlId);
				if (!ctrl) throw new Error("Control not found '" + controlId + "'");
				ctrl.setLookupValue(rowData);
			} catch (e) {
				modal.error("notifLookupSelection failed", e);
			}
		},
		/** Event sm.action.link
		 *  Notified when a action succeeded - sdata link
		 *  success:	true/false
		 *  link:		Link info
		 *  result:		Json response
		 */
		notifActionLink: function(success, link, result) {
			var self = this;
			if (!self.isActive()) return;
			try {
				// TODO  - scan/display field errors	
				self._displayActionMsg(success, link.name, result);
				switch (link.name) {
					case "$save":
						// Temporarily to update etag
						// TODO  - back to detail or query like in mobile client						
						// self.updateDao(result);						
						break;
					case "$delete":
						// TODO  - back to query like in mobile client
						break;
					default:
						break;
				}
			} catch (e) {
				modal.error("notifActionLink failed", e);
			}
		},
		_displayActionMsg: function(success, name, data, cb) {
			var obj;
			var diags = sdataUtils.scanDiagnoses(data);
			if (diags.length > 0) {
				obj = {
					$diagnoses: diags
				};
			} else {
				obj = {
					$diagnoses: [{
						$message: "Action: " + name + " " + (success ? "succeeded" : "failed"),
						$severity: success ? "success" : "error",
						$stackTrace: JSON.stringify(data)
					}]
				};
			}
			modal.actionResult("Action: " + name, obj);
		}
	});

exports.Page = _Page;
});

define('syracuse-tablet/html/js/pages/pageRowDetail',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/notifications','syracuse-tablet/html/js/pages/pageRegular'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var Base = require('syracuse-tablet/html/js/pages/pageRegular').Page;

/**
 * Child page that displays row detail in edit and details mode
 */
var _Page = utils.defineClass(
	function($parent, state, prototype, article, options) {
		var self = this;
		self.parentPage = options ? options.parentPage : null;
		if (!self.parentPage) throw new Error("rowdetail page - Unexpected empty parent page");
		self.rowDao = null;
		/** Set parentpage before **/
		Base.call(self, $parent, state, prototype, article, options);
		// Activity and facet - This page has no url
		self.$activity = self.parentPage.$activity;
	}, Base, {

		_initSdataInfo: function(sdataUrl, sdataMethod) {
			// nothing no sdataUrl
		},

		addPanel: function(panelId) {
			if (panelId === "rightpanel" || panelId === "leftpanel") return null;
			if (panelId === "footer" && !this.parentPage.isEditMode()) return null;
			return Base.prototype.addPanel.call(this, panelId);
		},

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			if (self.rowDao) {
				self.rowDao.destroy();
				self.rowDao = null;
			}
			self.parentPage = null;
		},

		isEditMode: function() {
			return this.parentPage && this.parentPage.isEditMode();
		},
		/**
		 *  Modify title for dvlp tests
		 */
		buildHtmlOption: function() {
			var self = this;
			var opts = Base.prototype.buildHtmlOption.call(self);
			opts.header.title = "Row detail page";
			return opts;
		},
		/**
		 * this.state.options.dataParams is an object that gives:
		 * 	rowId:	id of the row - empty if creation
		 *  activity:	"create/edit/detail" if it's a creation
		 */
		loadData: function(options) {
			var self = this;
			// We get the row DAO - !!! Do not store parentPage
			var ctrl = self.parentPage.getControl(self.state.options.controlId);
			if (!ctrl) throw new Error("rowdetail page - Array datasource not found");
			// Dao of the row to display - dao is calculated by the array when user click on action 'rosDetail'
			var rowDao = ctrl.rowDetailGetDao();
			if (!rowDao) throw new Error("rowdetail page - Row data not found");
			self.setDao(rowDao);
			return $.smResolve();
		},

		/**
		 * Validation in edit mode
		 */
		_actValidate: function(rowId) {
			var self = this;
			//self.goBack();
		},
		/**
		 * getParentNotif method is called by pageLoader to notify parent page if dao has been modified
		 */
		getParentNotif: function() {
			return null;
			//			{
			//				parentId: this.state.options.parentId,
			//				controlId: this.state.options.controlId,
			//				notifId: "sm.lookup.selection",
			//				notifData: this.selectedRow
			//			};
		},

	});

exports.Page = _Page;
});

define('syracuse-tablet/html/js/pages/pageLookup',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/pages/pageRegular','syracuse-tablet/html/js/application/eventListener'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/pages/pageRegular').Page;
var eventListener = require('syracuse-tablet/html/js/application/eventListener');

/**
 * Lookup page that handles selection
 * TODO - eventually if we have to merge wit regular page later
 */
var _Page = utils.defineClass(
	function($parent, state, prototype, article) {
		Base.call(this, $parent, state, prototype, article);
		this.selectedRowJson = null;
	}, Base, {

		addPanel: function(panelId) {
			if (panelId == "footer" || panelId == "rightpanel" || panelId == "leftpanel") return null;
			return Base.prototype.addPanel.call(this, panelId);
		},

		destroy: function() {
			Base.prototype.destroy.call(this);
			this.selectedRowJson = null;
		},
		/**
		 * Do not call super (Page) because we just need to store the rowDao and close the page
		 * Data selected will be passed to parent page by pageLoader via standard parent notification process - getParentNotif
		 */
		notifSelectRow: function(arrayId, rowId, rowDao) {
			if (!rowDao) return;
			// Clone JSON because array dao is destroyed with the page
			this.selectedRowJson = $.extend(true, {}, rowDao.data);
			if (this.isVignette) {
				eventListener.triggerAction(this.$$elmt, "vignetteBack");
			} else {
				this.goBack();
			}
		},
		/**
		 *  Modify title for dvlp tests
		 */
		buildHtmlOption: function() {
			var opts = Base.prototype.buildHtmlOption.call(this);
			opts.header.title = "Lookup page";
			return opts;
		},
		/**
		 * getParentNotif method is called by pageLoader to notify parent page
		 */
		getParentNotif: function() {
			if (!this.selectedRowJson) return null;
			return {
				parentId: this.state.options.parentId,
				controlId: this.state.options.controlId,
				notifId: "sm.lookup.selection",
				notifData: this.selectedRowJson
			};
		},

	});

exports.Page = _Page;
});

define('syracuse-tablet/html/js/pages/pageLogin',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/pages/page','syracuse-tablet/html/js/application/authentication','syracuse-tablet/html/js/helpers/notifications','syracuse-tablet/html/js/helpers/locale','syracuse-tablet/html/js/helpers/jsutils'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/pages/page').Page;
var auth = require('syracuse-tablet/html/js/application/authentication');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

var _pageTemplate = '\
	<div class="container">\
		<div class="row">\
			<div class="col-md-3"></div>\
			<div class="col-md-6">\
				<div class="panel panel-default">\
					<div class="panel-heading s-m-login-header"><span class="s-m-signin">{{label_signin}} </span> <span class="s-m-brand">{{label_brand}}</span> <span class="s-m-product">{{label_product}}</span></div>\
					<div class="panel-body s-m-login-body">\
						<br>\
						<div class="form-group">\
							<input type="text" value="" class="form-control s-m-login-form-input" placeholder="{{label_user}}"	id="login-user">\
						</div>\
						<br>\
						<div class="form-group">\
							<input type="password" class="form-control s-m-login-form-input" placeholder="{{label_password}}" id="login-password">\
						</div>\
						<br>\
						<br>\
						<button id="login-login" data-action="login" type="button" class="btn btn-primary s-m-signin-btn">{{act_login}}</button>\
					</div>\
				</div>\
			</div>\
		</div>\
		<div class="row">\
			<div class="col-md-3"></div>\
			<div class="col-md-6">\
				<div id="login-reason" style="display: none" class="alert alert-info" role="alert"></div>\
				<div id="login-success" style="display: none" class="alert alert-success" role="alert"></div>\
				<div id="login-fail" style="display: none" class="alert alert-danger" role="alert"></div>\
			</div>\
		</div>\
	</div>';

var lang;
var _Page = utils.defineClass(
	function($parent, state) {
		var self = this;
		Base.call(self, $parent, state);
	}, Base, {
		loadStructure: function() {
			return $.smResolve();
		},

		render: function(options) {
			var self = this;
			var deferred = $.Deferred();
			var _pageContext = {
				"label_user": locale.text("login.label.user"),
				"label_password": locale.text("login.label.password"),
				"act_login": locale.text("login.label.signinaction"),
				"label_signin": locale.text("login.label.signin"),
				"label_brand": locale.text("login.label.brand"),
				"label_product": locale.text("login.label.product")
			};
			var template = Handlebars.compile(_pageTemplate);
			self.$$contentElmt.html(template(_pageContext));
			if (self.state.options.reason) {
				self.$$contentElmt.find("#login-reason").text(self.state.options.reason).show();
			}
			deferred.resolve();
			return deferred.promise();
		},

		_actLogin: function() {
			var self = this;
			var deferred = $.Deferred();
			var askDlog = false;
			try {
				self.$$elmt.find("#login-reason").remove();
				var $$success = self.$$elmt.find("#login-success").hide();
				var $$fail = self.$$elmt.find("#login-fail").hide();
				var usr = self.$$elmt.find("#login-user").val();
				var pwd = self.$$elmt.find("#login-password").val();
				var locale = self.$$elmt.find("#login-locale").val();
				var userProfile = null;
				self.waitWheelStart();
				// TODO: Locale needs to be sent to server to get messages etc. in correct language
				auth.login(usr, pwd)
					.then(function(ok, syraUsrProfile, message) {
						if (ok) {
							userProfile = syraUsrProfile;
							return $.smResolve();
						} else {
							return $.smReject(message);
						}
					})
					.then(function() {
						self.waitWheelStop();
						var notifDeferred = $.Deferred();
						// We pass a deferred to be notified with error/success of initLogin process
						// !! only one subscriber of sm.login should resolve/reject the deferred
						notifications.publish("sm.login", userProfile, notifDeferred);
						return notifDeferred.promise();
					}).then(function(context) {
						// Result of notification - Do Nothing - Display of welcomeApplication page is managed by application
					}).fail(function(e) {
						// notification failed - display error 
						var stack, message;
						if (jsutils.isError(e)) {
							message = e.message;
							stack = jsutils.cleanStack(e.stack, 3, true);
						} else {
							message = e;
						}
						$$fail.show().html("Login failed<p>" + message + "</p>" + (stack ? stack : ""));
						self.waitWheelStop();
					});
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		}
	});

exports.Page = _Page;
});

define('syracuse-tablet/html/js/helpers/dashboardUtils',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/prototype'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');

/**
 *  Generates proto form dashBoard description
 **/
var _getDashboardProto = function(dash, daoApp) {
	var proto = {
		$title: dash.$title,
		$description: dash.$description,
		$properties: {}
	};
	var vignetteIds = Object.keys(dash.$vignettes || []);
	for (var i = 0; i < vignetteIds.length; i++) {
		var vignetteId = vignetteIds[i];
		var property = $.extend({}, dash.$vignettes[vignetteId]);
		var gadgetId = property.$uuid;

		property.$gadget = daoApp.getGadgetData(gadgetId);
		if (property.$gadget) {
			property.$gadget = $.extend({}, property.$gadget);
			// Set gadget uuid
			property.$gadget.$uuid = gadgetId;
			// Set vignette uuid
			property.$uuid = vignetteId;
			// Set type - "application/x-string"
			property.$type = "tablet/x-vignette";
			// Readable dom uid
			property.domId = utils.readableuid("vgnt", property.$gadget.$type);
		} else {
			property.$gadget = {
				$uuid: gadgetId,
				$type: "$gadgetMissing"
			};
			property.$uuid = vignetteId;
			property.$type = "tablet/x-vignette";
			property.domId = utils.readableuid("vgnt", property.$gadget.$type);

		}
		proto.$properties[vignetteId] = property;
	}
	return prototype.create(proto);
};

/**
 * Returns $article from dashBoard info
 * 		Calculates and Sets $article if no $article was found
 */
var _getDashboardArticle = function(dashInfo) {
	var vignetteIds = Object.keys(dashInfo.$vignettes || []);
	if (vignetteIds.length === 0) {
		throw new Error('Dashboard ' + dashInfo.$dashboardName + ' has no vignette');
	}

	if (!dashInfo.$article) {
		dashInfo.$article = {
			"$layoutType": "hub",
			"$items": [{
				"$layoutType": "hubGroup",
				"$title": "",
				"$items": []
			}]
		};
		vignetteIds.forEach(function(vignette) {
			dashInfo.$article.$items[0].$items.push({
				"$layoutType": "tile",
				"$size": "medium",
				"$items": [{
					"$bind": vignette,
				}]
			});
		});
	}
	return dashInfo.$article;
};

exports.getDashboardArticle = _getDashboardArticle;
exports.getDashboardProto = _getDashboardProto;
});

define('syracuse-tablet/html/js/application/daoApp',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/prototype','syracuse-tablet/html/js/helpers/dashboardUtils','syracuse-tablet/html/js/application/pageHelper','syracuse-tablet/html/js/sdata/entities/clientContract','syracuse-tablet/html/js/application/gadget','syracuse-tablet/html/js/sdata/sdataHttp'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var prototype = require('syracuse-tablet/html/js/helpers/prototype');
var dashboardUtils = require('syracuse-tablet/html/js/helpers/dashboardUtils');
var pageHelper = require('syracuse-tablet/html/js/application/pageHelper');
var clientContract = require('syracuse-tablet/html/js/sdata/entities/clientContract');
var Gadget = require('syracuse-tablet/html/js/application/gadget').Klass;
var sdataHttp = require('syracuse-tablet/html/js/sdata/sdataHttp');

/**
 * Class that manage access to application DATA
 *  	appli: 		Application object
 * !!use DAO methods instead of dealing directly with JSON
 */
var _Dao = utils.defineClass(
	function(appli) {
		var self = this;
		self._appli = appli;
		self.appMetaData = null;
	}, null, {

		destroy: function() {
			var self = this;
			self._appli = null;
		},
		/**
		 *Returns the JSON description of application
		 */
		isApplicationLoaded: function() {
			var self = this;
			return (self.appMetaData != null);
		},

		/**
		 * Set the JSON description of application
		 */
		setApplication: function(appMetaData) {
			var self = this;
			if (appMetaData) {
				self.appMetaData = $.extend(true, {}, appMetaData);
				pageHelper.registerPages(self.appMetaData);
			}
		},

		getApplicationName: function() {
			var self = this;
			return self.appMetaData && self.appMetaData.$application.applicationName || "";
		},

		getHomeDashboard: function() {
			var self = this;
			var homeId;
			if (self.appMetaData && self.appMetaData.$dashboards) {
				for (var p in self.appMetaData.$dashboards) {
					var data = self.appMetaData.$dashboards[p];
					if (data.$dashboardName === self.appMetaData.$application.$homeDashboard.dashboardName) {
						homeId = globals.getDashboardName(data.$dashboardName);
					}
				}
			}
			return homeId;
		},
		/**
		 * Returns JSON description article/prototype for a regular page (id=AQMCRUDM.$query)
		 * 		state:			page state
		 * 		parentProto		parentProto parent prototype - rowdetail proto needs parent page proto
		 */
		getRegularPageInfo: function(state, parentProto) {
			var self = this;
			state.options = state.options || {};
			var deferred = $.Deferred(),
				registerPage;
			try {
				// Try to get client side implementation first
				clientContract.getRegularPageInfo(state.name)
					.then(function(info) {
						if (info != null) {
							// info!= null -> Test entities page
							registerPage = true;
							return info;
						} else {
							return self.getPageMetaData(state.name);
						}
					})
					.then(function(info) {
						if (!info || !info.$page || !info.$page.$prototype) {
							// This is intended to get prototypes from the server in case representations
							// are used in client side only applications that point to server side entities
							// In real world applications, this will never be used, it's only to simplyfy setup up testcases
							registerPage = true;
							return sdataHttp.fetchRemotePrototype(state.name).then(function(proto) {
								return self.registerAdditionalPage(state.name, proto, null);
							});
						}
						return info;
					})
					.then(function(info) {
						if (!info) {
							throw new Error('Page not found - PageId=' + state.name);
						}
						if (!info.$page) {
							throw new new Error('Bad page description - PageId=' + state.name);
						}
						if (!info.$page.$prototype) {
							throw new new Error('Prototype is NULL - PageId=' + state.name);
						}
						return info;
					})
					.then(function(info) {
						if (registerPage) {
							// We register the page if it has been loaded - test pages
							var newState = pageHelper.registerRegularPage(state.name, info);
							// We refresh state with newState properties
							for (var p in newState) {
								if (state[p] == null || state[p] !== newState[p]) state[p] = newState[p];
							}
						}
						// layout:
						// 1 - as defined as sub node in dash-board layout
						// 2 - as coming from the page definition (entity)
						// 3- generate s.th.
						var proto = info.$page.$prototype;
						if (!$.isPlainObject(proto)) throw new Error("JSON proto expected");
						proto = prototype.create(proto, parentProto);
						// state.options.article || info.$page.$article || proto.toArticle()
						var article = state.options.article;
						if (article && Object.keys(article).length === 0) {
							// Regular page using article from dashboard or generated by prototype
							var protoArticle = proto.toArticle();

							// Copy vignette article into dashboard article sub-node to be available for authoring
							Object.keys(protoArticle).forEach(function(p) {
								article[p] = protoArticle[p];
							});
						} else {
							// Regular page article from page info metadata or generated by prototype
							article = article || info.$page.$article || proto.toArticle();
						}
						deferred.resolve({
							article: article,
							prototype: proto
						});
					}).fail(function(e) {
						deferred.reject(e);
					});
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		getPageMetaData: function(id) {
			var self = this;
			if (self.appMetaData.$pages) {
				return $.smResolve(self.appMetaData.$pages[id]);
			}
			return $.smResolve(null);
		},

		/**
		 * Returns the prototype and article for a dashBoard
		 * prototype.$properties gives the description of vignettes 'fields'
		 */
		getDashboardInfo: function(dashBoardId) {
			var self = this;

			return $.smResolve()
				.then(function() {
					var dash = self.appMetaData.$dashboards[dashBoardId];
					if (!dash) {
						throw new Error('Dashboard not found ' + dashBoardId);
					}
					return dash;
				})
				.then(function(dash) {
					if (dash && dash.$update) {
						/* we pass appMetaData as parameter to alow $update to refresh it (original appMetaData has been cloned) */
						return dash.$update(dash, self.appMetaData);
					} else {
						return dash;
					}
				})
				.then(function(dash) {
					var article = dash.$article;
					if (!article) {
						article = dashboardUtils.getDashboardArticle(dash);
					}
					return {
						article: $.extend({}, article),
						prototype: dashboardUtils.getDashboardProto(dash, self)
					};
				});
		},

		getGadgetData: function(id) {
			var self = this;
			var g = (self.appMetaData.$gadgets && self.appMetaData.$gadgets[id]);
			if (!g) throw Error("Gadget data not found - id[" + id + "]");
			if (!g.$uuid) {
				g.$uuid = id;
			}
			return g;
		},
		/**
		 * Returns a gadget
		 */
		getGadget: function(id) {
			var self = this;
			var g = self.getGadgetData(id);
			return new Gadget(g);
		},

		// fullName: x3.erp.SUPERV.AQMCRUD.$details
		getPrototype: function(fullName) {
			var self = this;
			if (self.appMetaData == null) throw new Error("Get page prototype error - No application metadata");
			var page = self.appMetaData.$pages[fullName];
			if (page == null || page.$page == null) throw new Error("Get page prototype error - Page not found[" + fullName + "]");
			return page.$page.$prototype;
		},
		/**
		 * Register pages which are not provided by Syracuse
		 * 		Ex rowdetail page, test entities pages
		 * proto:		JSON or object prototype
		 * article:		JSON article if any (authoring)
		 */
		registerAdditionalPage: function(id, proto, articleJson) {
			var self = this;
			if (!proto || $.isEmptyObject(proto)) throw new Error("Unexpected empty prototype");
			if (!self.appMetaData) self.appMetaData = {};
			if (!self.appMetaData.$pages) self.appMetaData.$pages = {};
			var page = self.appMetaData.$pages[id] = self.appMetaData.$pages[id] || {};
			page.$cache = page.$cache || {
				cacheType: "$auto"
			};
			page.$page = page.$page || {};
			// We register JSON proto because prototype Object is destroyed with the page
			// When the page is created we instantiate a new proto from JSON - Safest way to manage memory
			page.$page.$prototype = page.$page.$prototype || ($.isPlainObject(proto) ? proto : proto.json);
			page.$page.$article = page.$page.$article || articleJson;
			return page;
		}
	});

exports.Dao = _Dao;
});

define('syracuse-tablet/html/js/application/daoSdata',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/notifications'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _typeDefValue = function(prop) {
	switch (prop.$type) {
		case "application/x-password":
		case "application/x-string":
			return "";
		case "application/x-quantity":
			return 0.0;
		case "application/x-decimal":
		case "application/x-real":
			return 0.0;
		case "application/x-integer":
			return 0;
		case "application/x-boolean":
			return false;
		case "application/x-date":
			return '';
		case "application/x-datetime":
			return '';
		case "application/x-time":
			return '';
		case "application/x-choice":
			return prop.$value.$enum[0].$value;
		default:
			return null;
	}
};
var _dataProps = ["$isMandatory", "$isReadOnly", "$isHidden", "$isExcluded", "$isDisabled", "$actions", "$format"];
var _proto2Instance = function(protoArray) {
	var res = {
		$properties: {}
	};
	if (protoArray.isSingleArray()) {

	} else {
		var props = protoArray.getDataByPath("$item.$properties");
		for (var propName in props) {
			if (!propName.smStartsWith("$")) {
				var prop = props[propName];
				res[propName] = _typeDefValue(prop);
				var $properties = res.$properties[propName] = {};
				_dataProps.forEach(function(p) {
					if (prop[p] != null) {
						$properties[p] = prop[p];
					}
				});
			}
		}
	}
	return res;
};
var _getArrayEmptyRow = function(protoArray, pathBind) {
	var rsrc;
	if (protoArray.isSingleArray()) {
		rsrc = _proto2Instance(protoArray);
	} else {
		rsrc = _proto2Instance(protoArray);
	}
	// We path pathBind as $bind in empty dao to be able to retrieve the full path of prototype in nested arrays
	return new _Dao(rsrc, protoArray, null, null, pathBind);
};
/**
 * Class that manages access to sdata data structure
 *  	data: 		JOSN data
 *  	prototype: 	Prototype
 *  	parent:		Parent DAO (see getPrototype)
 *  	options:	Not used
 *  	$bind		For a child it's the name of the field from which dao has bee created
 * Manages DAO chaining parent -> child
 * !!use DAO methods instead of dealing directly with JSON
 */
var _Dao = utils.defineClass(function(data, prototype, parent, options, $bind) {
	var self = this;
	self.$bind = $bind || "";
	self.options = options || {};
	self.data = data || {};
	if (!prototype) throw new Error("Prototype is mandatory");
	if (!data) throw new Error("jsonData is mandatory");
	self.prototype = prototype;
	self._cache = {
		metaData: {},
		queryData: null
	};
	self.parent = parent;
}, null, {

	destroy: function() {
		var self = this;
		self.parent = null;
		self.data = null;
		self.prototype = null;
	},
	/**
	 * Set field's value
	 */
	setValue: function(name, value, notify) {
		var self = this;
		if (self.data[name] !== value) {
			self.data[name] = value;
			if (notify === true) {
				notifications.publish('sm.dao.updated', self, name, value);
			}
			return true;
		}
		return false;
	},
	/**
	 * Get field's value
	 */
	getValue: function(name, defValue) {
		var self = this;
		if (!name || name.length === 0) return defValue;
		var val = self.data[name];
		if (val != null && self.prototype.isReference(name) && typeof val === "object" && val.$value == null) {
			// Add $value in value with the value of the linked field 
			var nameValue = self.prototype.getFieldNameForValue(name);
			if (nameValue != name) {
				if (false && name === globals.SINGLEARRAYPROP) {
					// !! THIS METHOD NOT USED - SEE getArrayData which adds the value in parent dataset adn works with links
					// On case of single array of x-reference the value is stored into the field object and not in parent dataset
					// Example below  for field FCY_REF -> $refValue = FCY
					// { $data:{ $description: "Site AA2 long", $title: "Site AA2", FCY: "AA2"} }
					val.$value = self.data[name][nameValue];
					if (val.$value == null && defValue != null) val.$value = defValue;
				} else {
					val.$value = self.getValue(nameValue, defValue);
				}
			} else {
				val.$value = val;
			}
			return val;
		}
		return val != null ? val : self.parent ? self.parent.getValue(name, defValue) : defValue;
	},
	/**
	 * Temporarily - Returns a string
	 */
	getDisplayValue: function(name, defValue) {
		var self = this;
		var val = self.getValue(name, defValue);
		var meta = self.getMetaData(name);
		// TODO format
		if (typeof val === "object") val = val.$value || val.$title || val.$description;
		return (val || "").toString();

	},
	/**
	 * Return the meta-data for field 'name' including the ones given by prototype
	 */
	getMetaData: function(name) {
		var self = this;
		var meta = self._cache.metaData[name];
		if (meta) return meta;
		meta = self._cache.metaData[name] = $.extend({}, self.prototype.getMetaData(name), self.data.$properties ? self.data.$properties[name] : null);
		return meta;
	},
	getFieldInfo: function(name) {
		var self = this;
		return {
			meta: self.getMetaData(),
			value: self.getValue()
		};
	},
	/**
	 * current proto is controller's proto
	 * name: array field name
	 * protoArray: prototype of array field
	 * Returns Array field data
	 * 	$resources an array of dao per row
	 *  No server pagination for array field in Syracuse
	 */
	getArrayData: function($bind, protoArray) {
		var self = this;
		var res = {
			$resources: [],
		};
		var rsrcs = self.getValue($bind) || [];
		if (protoArray.isSingleArray()) {
			// $resources contains an array of single type $resource:[2,6,8,9], $resources:[{$description:,$title:,FCY:},{$description:,$title:,FCY:}]
			// We create the same field structure as multiple columns arrays with a hard coded field name SINGLEARRAYPROP {$data:1} {$data:{$description:,$title:,FCY:}}
			rsrcs.forEach(function(rsrc) {
				var data = {};
				data[globals.SINGLEARRAYPROP] = rsrc;
				var proto = protoArray.getPrototype("$item");
				if (proto.property(globals.SINGLEARRAYPROP).$type === "application/x-reference") {
					// THIS METHOD IS BETTER THAN THE ONE OF  getValue BECAUSE IT'S COMPLIANT WITH LINKS
					// If it's a single array of x-reference we need to add the value ($refValue) calculated by prototype.getFieldNameForValue
					// Example below  for field FCY_REF -> $refValue = FCY
					//{
					//  	$data:{ $description: "Site AA2 long", $title: "Site AA2", FCY: "AA2"},
					//-->	FCY: "AA2"
					//}
					// TODO - test with Syracuse entities
					var valFld = proto.getFieldNameForValue(globals.SINGLEARRAYPROP);
					if (valFld) data[valFld] = rsrc[valFld];
				}
				res.$resources.push(new _Dao(data, proto, self, null, $bind));
			});
		} else {
			rsrcs.forEach(function(rsrc) {
				res.$resources.push(new _Dao(rsrc, protoArray, self, null, $bind));
			});
		}
		return res;
	},
	/**
	 * Returns query info
	 * 	Pagination info : 	$itemsPerPage $links
	 * 	Data : 				$resources an array of dao per row
	 *
	 */
	getQueryData: function(protoArray) {
		var self = this;
		var res = {
			$itemsPerPage: self.getValue("$itemsPerPage"),
			$resources: [],
			$links: self.getValue("$links")
		};
		if (!protoArray) throw new Error("getQueryData - Prototype Array is mandatory");
		var rowProto = protoArray.getPrototype("$item");
		var $bind = "$resources";
		var rsrcs = self.getValue($bind);
		rsrcs.forEach(function(rsrc) {
			res.$resources.push(new _Dao(rsrc, rowProto, self, null, $bind));
		});
		return res;
	},
	/**
	 * Lookup info
	 */
	getLookupData: function(protoArray) {
		return this.getQueryData(protoArray);
	},

	getQueryResources: function() {
		var self = this;
		var rsrcs = self.getValue("$resources");
		return rsrcs;
	},

	/* Resolve expression according to current dataset and prototype*/
	parseExpression: function(expression) {
		var self = this;
		return utils.parseExpression(expression, self, self.prototype);
	},
	/**
	 * Set row index for arrays
	 */
	setRowIndex: function(value) {
		this.setValue(globals.ROWIDXPROP, value, false);
	},
	/**
	 * Returns the status of links - override prototype status with the data ones if exists
	 *  	prototype:  prototype that contains the descriptions of $links
	 *  				If null takes the one of the current dao
	 */
	getLinksStatus: function(prototype) {
		var self = this;
		prototype = prototype || self.prototype;
		return $.extend(true, {}, prototype.data("$links"), self.getValue("$links"));
	},
	/**
	 * return action's payload
	 * $method: "POST"
	 * $url: "{$baseUrl}/AQMDEVICE?representation=AQMCRUDM.$create"
	 * $uuid: "6cdcb613-323f-495d-8a29-f54efad77f53"
	 * name: "$save"
	 * page: "x3.erp.SUPERV.AQMCRUDM.$create"
	 * sdataurl: "/sdata/x3/erp/SUPERV/AQMDEVICE?representation=AQMCRUDM.$create"
	 */
	getActionPayload: function(link) {
		var self = this;
		switch (link.name) {
			case "$save":
			case "$edit":
				// TODO - Eventually remove unused properties
				return $.extend({}, self.data);
				break;
			default:
				return null;
				break;
		}
	},
	clone: function() {
		return new _Dao($.extend(true, {}, this.data), this.prototype, this.parent, this.options, this.$bind);
	}
});
// for override only
exports.Dao = _Dao;
exports.emptyDao = function(prototype, parent, options) {
	return new _Dao({
		$properties: {}
	}, prototype, parent, options);
};
exports.getArrayEmptyRow = _getArrayEmptyRow;
});

define('syracuse-tablet/html/js/application/appFactoryDeps',['require','exports','module','syracuse-tablet/html/js/application/application','syracuse-tablet/html/js/pages/pageDashboard','syracuse-tablet/html/js/pages/pageRegular','syracuse-tablet/html/js/pages/pageRowDetail','syracuse-tablet/html/js/pages/pageLookup','syracuse-tablet/html/js/pages/pageLogin','syracuse-tablet/html/js/application/daoApp','syracuse-tablet/html/js/application/daoSdata','syracuse-tablet/html/js/application/appFactory'],function (require, exports, module) {

var Application = require('syracuse-tablet/html/js/application/application').Application;
var DashoardPage = require('syracuse-tablet/html/js/pages/pageDashboard').Page;
var RegularPage = require('syracuse-tablet/html/js/pages/pageRegular').Page;
var RowDetailPage = require('syracuse-tablet/html/js/pages/pageRowDetail').Page;
var LookupPage = require('syracuse-tablet/html/js/pages/pageLookup').Page;
var LoginPage = require('syracuse-tablet/html/js/pages/pageLogin').Page;
var DaoApp = require('syracuse-tablet/html/js/application/daoApp').Dao;
var DaoSdata = require('syracuse-tablet/html/js/application/daoSdata').Dao;

var factory = require('syracuse-tablet/html/js/application/appFactory');

exports.init = function() {
	factory.setImpl("Application", Application);
	factory.setImpl("DashoardPage", DashoardPage);
	factory.setImpl("RegularPage", RegularPage);
	factory.setImpl("RowDetailPage", RowDetailPage);
	factory.setImpl("LookupPage", LookupPage);
	factory.setImpl("LoginPage", LoginPage);
	factory.setImpl("DaoApp", DaoApp);
	factory.setImpl("DaoSdata", DaoSdata);
};
});

define('syracuse-tablet/html/js/controls/structElmt',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/helpers/logger'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("ctrls", false);

var _typeNames = {};
var _regExp = /-|\//g;

var _hamerRecognizers = {
	pinch: Hammer.Pinch,
	rotate: Hammer.Rotation,
	tap: Hammer.Tap,
	pan: Hammer.Pan,
	swipe: Hammer.Swipe,
	press: Hammer.Press
};
var _Hammer = function($$elmt) {
	if (!$$elmt || $$elmt.length === 0) throw new Error("gesture - Null dom elmt");
	if ($$elmt.jquery) $$elmt = $$elmt.get(0);
	this.mgr = new Hammer($$elmt); //new Hammer.Manager($$elmt);
	/* Add new gesture pan, swipe... based on default settings */
	this.addss = function(gesture, options, handler) {
		var opts = $.extend({}, options) || {};
		if (!this.mgr) return;
		var gest = this.mgr.get(gesture);
		if (!gest) throw new Error("Gesture[" + gesture + "] Not found in default Hammer");
		var direction = opts.direction;
		if (direction) {
			opts.direction = Hammer["DIRECTION_" + direction.toUpperCase()];
			gest.set(opts);
		}
		var g = "";
		if (gesture === "swipe" || gesture === "pan") {
			if (direction === "horizontal" || direction === "all") {
				// Needed
				g += " " + gesture + "left " + gesture + "right ";
			}
			if (direction === "vertical" || direction === "all") {
				// Needed
				g += " " + gesture + "up " + gesture + "down ";
			}
			if (g.length === 0) g = gesture + direction;
		} else {
			g = gesture;
		}
		this.mgr.on(g, handler);
	};
	/* Add new gesture - Create recognizer */
	this.add = function(gesture, options, handler) {
		var opts = $.extend({}, options) || {};
		if (!this.mgr) return;
		var recognizer = _hamerRecognizers[gesture];
		if (!recognizer) throw new Error("gesture - Unknown gesture [" + gesture + "]");
		var gest = this.mgr.get(recognizer);
		// Maybe we can just set options
		if (gest) this.mgr.remove(recognizer);
		var direction = opts.direction;
		if (direction) {
			opts.direction = Hammer["DIRECTION_" + direction.toUpperCase()];
		}
		gest = new recognizer(opts);
		this.mgr.add(gest, handler);
		var g = "";
		if (gesture === "swipe" || gesture === "pan") {
			if (direction === "horizontal" || direction === "all") {
				// Needed
				g += " " + gesture + "left " + gesture + "right ";
			}
			if (direction === "vertical" || direction === "all") {
				// Needed
				g += " " + gesture + "up " + gesture + "down ";
			}
			if (g.length === 0) g = gesture + direction;
		} else {
			g = gesture;
		}
		this.mgr.on(g, handler);
	};
	this.enable = function(yes) {
		if (!this.mgr) return;
		this.mgr.set({
			enable: yes !== false
		});
	};
	this.destroy = function() {
		if (!this.mgr) return;
		this.mgr.destroy();
	};
};
/**
 * Base class for controls and layouts
 *
 * controller: page (or child controller)
 * 		must implements addControl Method
 *
 */
var _Klass = utils.defineClass(
	function StructElmt(controller, $type, article, options) {
		var self = this;
		self.options = options || {};
		self.controller = controller;
		self.$type = $type;
		self.typeName = _typeNames[$type];
		if (!self.typeName) {
			// used to generate readable ids - type expected "application/x-name" or "text/plain"
			var a = $type.split(_regExp);
			self.typeName = _typeNames[$type] = a[a.length - 1];
		}
		self.article = article || {};
		self.children = null;
		self.parent = null;
		self.initReuseProperties();
	}, null, {
		/**
		 * Init the properties to allow reuse of this control
		 */
		initReuseProperties: function() {
			this.$$elmt = null;
			this.id = this.createId(this.typeName);
		},
		destroy: function() {
			var self = this;
			self.controller = null;
			self.parent = null;
			if (this._gestures) {
				this._gestures.destroy();
				this._gestures = null;
			}
			utils.unbindObj(self.$$elmt);
			utils.unbindObj(self);
			if (self.children) {
				self.children.forEach(function(child) {
					if (child) child.destroy();
				});
				self.children = null;
			}
			if (self.$$elmt) {
				self.$$elmt.remove();
				self.$$elmt = null;
			}
		},
		/**
		 * Generate html
		 * Use the same control buildHtml multiple html with different id's
		 * It's used by cards to build the tree structure for a card and reuse it for all the cards instead of creating a new tree structure for each card
		 * Same as buildHtml but:
		 * 		calls initReuseProperties to reset ID and properties used by previous build (cache, dom elmts...)
		 * 		destroyAfter:true	Detach $$elmt and destroy control
		 * 		destroyAfter:false	Do not destroy control - Just detach $$elmt
		 * Returns $$elmt
		 */
		generateHtml: function($$parent, controllerDao, destroyAfter, htmlRootCtrl) {
			var self = this;
			var opts = self.options;
			if (htmlRootCtrl) {
				opts.htmlRootCtrl = htmlRootCtrl;
			}
			opts.isHtmlGenerator = true;
			self.buildHtml($$parent, controllerDao, opts);
			// Detach $$elmt to not clear it at destroy
			var $$elmt = self.$$elmt;
			self.$$elmt = null;
			if (destroyAfter === true) {
				// Destroy if needed
				self.destroy();
			}
			return $$elmt;
		},
		/**
		 * Build html for a control/layout
		 * !! CHILD CLASSES BUILDHTML METHOD MUST CALL THIS METHOD BEFORE PROCESSING
		 */
		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			if (buildOptions.isHtmlGenerator === true) {
				if (self._needReuse) {
					self.initReuseProperties();
				} else {
					// First call don't call _initReuse
					self._needReuse = true;
				}
			}
		},
		/**
		 * Returns field/layout authoring
		 * path: string with or without '.' separator or array of string
		 */
		getAuthoring: function(path, defValue) {
			var self = this;
			if (!path || !self.article) return defValue;
			if (typeof path === "string") {
				path = path.split('.');
			} else if (!Array.isArray(path)) {
				throw new Error("Unexpected path type");
			}
			var data = self.article;
			for (var i = 0; i < path.length; i++) {
				data = data[path[i]];
				if (data == null) {
					return defValue;
				}
				if (!$.isPlainObject(data) == null) {
					log && log('Unexpected non-plainobject');
					return defValue;
				}
			}
			return (data != null ? data : defValue);
		},
		/**
		 * Appends style authoring to classArray
		 * It's a draft just to start dealing with authoring
		 * classArray: 	array of classes used by createDomElement
		 * pathOrData: 	string or array of string that points points to an authoring value
		 * 				JS plain object that is the authoring object
		 */
		appendStyleAuthoring: function(classArray, pathOrData) {
			classArray = classArray || [];
			if (!pathOrData) return classArray;
			if ($.isPlainObject(pathOrData)) {
				// pathOrData is the authoring object
				var data = pathOrData;
			} else {
				// pathOrData points to an authoring value
				var data = this.getAuthoring(pathOrData);
			}
			if (!data) return classArray;
			// Apply style classes - To improve/enhance
			for (var p in data) {
				if (["$theme", "$fontStyle", "$fontSize"].indexOf(p) >= 0) {
					classArray.push(data[p]);
				}
			}
			return classArray;
		},
		/**
		 * Empty current element
		 * 	Called before a refresh
		 *  Keep control objects
		 */
		empty: function() {
			var self = this;
			if (self.children) {
				self.children.forEach(function(child) {
					if (child) child.empty();
				});
			}
			if (self.$$elmt) {
				self.$$elmt.empty();
			}
		},
		isLayout: function() {
			return this.typeName === "layout";
		},
		isVignette: function() {
			return this.typeName === "vignette";
		},
		isControl: function() {
			return this.isLayout() && !this.isVignette();
		},
		createId: function(typeName) {
			return utils.readableuid(typeName);
		},
		/**
		 * Append structElmt c as a child of this
		 */
		appendStructElmt: function(c) {
			var self = this;
			if (!c) return;
			if (!self.children) self.children = [];
			c.parent = self;
			self.children.push(c);
		},

		getNbChilds: function() {
			return this.children && this.children.length > 0;
		},

		/**
		 * Refreshes the control
		 */
		refresh: function(controllerDao, options) {
			throw new Error("not implemented");
		},
		/**
		 * Create the root element of the control/layout/vignette
		 * 	This element is identified by self.id
		 */
		createRootElement: function(css, $$parent) {
			var self = this;
			// No id for generated html
			var e = self.setRootElement(uiUtils.createDomElement("div", css, null, self.options.isHtmlGenerator === true ? null : {
				"id": self.id
			}), $$parent);
			return e;
		},
		setRootElement: function(e, $$parent) {
			var self = this;
			var dom = e;
			var pom = $$parent;
			if (!e) {
				return null;
			}
			if (typeof e === "string" || !e.jquery) {
				e = $(e);
			}
			self.$$elmt = e;
			if ($$parent) {
				if (!$$parent.jquery) {
					$$parent = $($$parent);
				}
				e.appendTo($$parent);
			}
			if (self.options.isHtmlGenerator !== true) e.attr("data-layout-path", self.getAuthoringPath());
			return e;
		},
		log: function() {
			log && log.apply(null, arguments);
		},
		setAuthoringPath: function(layoutPath) {
			this.layoutPath = layoutPath;
		},
		getAuthoringPath: function() {
			return this.layoutPath;

		},
		onGesture: function(evt) {
			//if (evt.type.indexOf("swipe") === 0 || evt.type === "panstart" || evt.type === "panend") console.log (this.id + " onGesture" + " - " + evt.type)
			console.log(this.id + " " + evt.type);
		},
		gestureAdd: function($$elmt, gesture, options, handler) {
			$$elmt = $$elmt || this.$$elmt;
			handler = Hammer.bindFn(this.onGesture, this);
			if (!$$elmt || $$elmt.length === 0) throw new Error("gesture - Null dom elmt");
			if (!this._gestures) {
				this._gestures = new _Hammer($$elmt || this.$$elmt);
			}
			this._gestures.add(gesture, options || {}, handler);
		},
		/**
		 *  Add a swipe event
		 *  	direction:	"non", "all", "vertical", "horizontal", "left", "right", "up", "down"
		 *  	withPan		add pan usefull in complement to span to adjust position more accuratlely
		 *  				no used for only swiping cards
		 */
		gestureAddSwipe: function($$elmt, direction, withPan, handler) {
			var self = this;
			if (!direction) throw new Error("gesture - Null direction");
			var opts = {
				direction: direction
			};
			// We can add other options threshold, veolicty in opts 
			self.gestureAdd($$elmt, "swipe", opts, handler);
			if (withPan) this.gestureAddPan($$elmt, direction, handler);
		},
		/**
		 * Add pan event like a scroll
		 * handler is called with event
		 * 	panstart (mouve down + move) , panup/down/left/right, panend (mouse up)
		 * 	deltaX/Y is reset on panstart
		 */
		gestureAddPan: function($$elmt, direction, handler) {
			var self = this;
			if (!direction) throw new Error("gesture - Null direction");
			var opts = {
				direction: direction
			};
			self.gestureAdd($$elmt, "pan", opts, handler);
		}
	}
);

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/ctrlBase',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/structElmt'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/structElmt').Klass;
/**
 * PROPOSAL OF FIELD AUTHORING
 * {
 * "$bind": "$title",
 * “$tablet”:{
 * 		$value:{
 * 			$theme:"A","B"...,
 * 			$beforelabel:true/false,
 * 			$isTitleHidden:true/false,
 * 			$position: "stack"/"center"/"right",
 * 			$fontStyle: "b"/"i"/"u", "bu"/"ubi" is allowed
 * 			$fontSize: "small"/"medium"/"large",
 * 			$expression:"{FieldA} + {FieldB}",
 * 			$refDescrHidden: true/false
 * 			$refdescr : {
 * 				$theme:,
 *  			$fontStyle:,
 * 				$fontSize:
 * 			}
 * 		},
 * 		$label:{
 * 			…
 * 		},
 * Plateform/Device properties for android that override general properties (if any)
 * 		$android:{ $value: {}, $label: {}},
 * 		$android-sm:{ General properties for android small devices},
 * 		$android-sm-portrait:{ General properties for android small devices portrait},
 * 		$android-sm-landcsape:{ General properties for android small devices landcsape},
 * 		$ios:{}…
 * }
 */


/**
 * Used to generate the html of control Icon/Button
 * generate a link and call cb to get the content of the control (icon/button...)
 * cb	Add html text to html param
 */
var _genHtmlCtrlLink = function(proto, dao, options, cb) {
	var self = this;
	options = options || {};
	var html = [];
	var url = proto.data("$url");
	var tag = options.tag || 'a';
	var css = options.css || 'a';
	if (url && url.length) {
		html.push('<');
		html.push(tag);
		html.push(' href="' + url + '"');
		if (css) {
			html.push(' class="' + css + '"');
		}
		html.push('>');
	} else {
		// attributes for data-nav or data-action
		var action = proto.data("$action") || self.prototype.data("$navigation");
		if (action) {
			html.push('<');
			html.push(tag);
			html.push(' href="*"');
			for (var p in action) {
				html.push(' ' + p + '="' + encodeURIComponent(dao ? dao.parseExpression(action[p]) : action[p]) + '"');
			}
			if (css) {
				html.push(' class="' + css + '"');
			}
			html.push('>');
		}
	}
	if (cb) cb(html);
	if (html.length > 1) {
		html.push('</');
		html.push(tag);
		html.push('>');
	}
	return html.join('');
};

/**
 * Default ctrl html  - Just the value embedded into a div
 * 	options:	Passed to create Control by creator
 * 	TODO - Remove this class if not used
 */
var _Klass = utils.defineClass(

	function CtrlBase(controller, article, prototype, options) {
		var self = this;
		options = options || {};
		self.prototype = prototype;
		self.$bind = article.$bind;
		Base.call(self, controller, prototype.data('$type'), article, options);
		self.$isEditMode = controller.isEditMode() && article.$isEditMode !== false && options.isTableCell !== true;
		self._dao = null;
	}, Base, {
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			if (self.prototype) {
				// We destroy the proto
				self.prototype.destroy();
				self.prototype = null;
			}
			self._dao = null;
		},
		createId: function(typeName) {
			// Add $bind in id for readability - Id can be minimized in non debug version
			return utils.readableuid(this.$bind, typeName.substr(0, 3));
		},
		/**
		 * controllerDao is the page dao or the row data for a grid
		 * 	We need to store it to keep acces
		 */
		buildHtml: function($$parent, controllerDao, buildOptions, classes) {
			var self = this;
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);
			self._dao = controllerDao;
			var css = ["s-m-control"];
			if (classes) css.push(classes.join(' '));
			self.createRootElement(css, $$parent);
		},
		/**
		 * return the dao given by buildHtml or dao controller
		 */
		getDao: function() {
			return this._dao ? this._dao : this.controller.dao;
		},
		/**
		 * Refreshes the control
		 * We have to apply meta-data
		 */
		refresh: function(controllerDao, options) {
			var self = this;
			self._dao = controllerDao;
			this.applyMetaData(this.getMetaData());
		},
		/**
		 * dao.getMetaData does the merge between prototype and data
		 */
		getMetaData: function() {
			return this.getDao().getMetaData(this.$bind);
		},
		getTitle: function() {
			return (this.article && this.article.$title) || this.prototype.data("$title") || this.prototype.getPropTitle(this.$bind);
		},
		/**
		 * Applies meta-data
		 * In edit mode the dom element to which meta-data apply is identify by s-m-meta class
		 * In detail mode meta-data apply to fieldSlot
		 */
		applyMetaData: function(metaData) {
			var self = this;
			if (metaData == null) return;
			if (self.$isEditMode) {
				// default
				var e = self.$$elmt.find(".s-m-meta");
				if (e.length > 0) {
					// Apply $isDisabled and $isReadOnly
					// is("input") returns true for button tags -> we check the BS class .btn
					if (e.is("input") && !e.is(".btn")) {
						// only for input tags
						e[metaData.$isReadOnly === true ? "attr" : "removeAttr"]("readonly", "");
						e[metaData.$isDisabled === true ? "attr" : "removeAttr"]("disabled", "");
					} else {
						// other tags
						e[metaData.$isReadOnly === true || metaData.$isDisabled === true ? "attr" : "removeAttr"]("disabled", "");
					}
				}
			}
			self.$$elmt.toggle(metaData.$isHidden !== true);
		},
		getValue: function() {
			return this.getDao().getValue(this.$bind);
		},
		/**
		 * Change internal value (non UI only)
		 * value parameter must be a correct datatype value without UI specific formatting
		 */
		setValue: function(value) {
			this.getDao().setValue(this.$bind, value);
		}
	}
);

exports.genHtmlCtrlLink = _genHtmlCtrlLink;
exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/helpers/types/date',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/locale'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require("syracuse-tablet/html/js/helpers/locale");

var _dateInfo = locale.getDatetimeInfo;

function _padLeft(str, len, ch) {
	str = str ? str.toString() : '';
	if (!ch || ch.length == 0)
		ch = " ";
	while (str.length < len)
		str = ch + str;
	return str;
};

exports.validate = function(value, constraints, errors) {
	if (value == null) {
		if (constraints.$isMandatory)
			return errors.push(locale.text("date.valMan"));
		if (!constraints.$isNullable)
			return errors.push(locale.text("date.valNull"));
		return;
	}
	if (!(value instanceof DateObj)) {
		errors.push(locale.text("date.valDate"));
		return;
	}

	// month value check
	if (!(value.month >= 1 && value.month <= 12)) {
		errors.push(locale.text("date.invMonth"));
		return;
	}

	// day value check
	if (!(value.day >= 1 && value.day <= _daysInMonth(value.year, value.month))) {
		errors.push(locale.text("date.invDay"));
		return;
	}

};

var _monthOffsets = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
var _monthLengths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

// internal value is integer yyyymmdd
// this is a very simple and compact representation that leads to
// very efficient component extraction and formatting. 
// Also nice for debugging

function DateObj(value) {
	this._value = value;
	//Object.freeze(this); -- confuses JSON, reenable later
}

function _dayName(weekDay, abbrev) {
	return abbrev ? _dateInfo().abbreviatedDayNames[weekDay] : _dateInfo().dayNames[weekDay];
}

function _monthName(month, abbrev) {
	return abbrev ? _dateInfo().abbreviatedMonthNames[month - 1] : _dateInfo().monthNames[month - 1];
}

function _pad2(val) {
	var s = val.toString();
	return (s.length == 1) ? "0" + s : s;
}

function _toOffset(date) {
	var year = date.year;
	var month = date.month;
	var day = date.day;
	// Compute the number of leap days since Jan 1st, 1970.
	// The trick is to use the previous year if month is January or February,
	// the current year otherwise.
	// Then, we compute the number of multiples of 4, 100 and 400 since 1970.
	var y = month <= 2 ? year - 1 : year;

	var n4 = Math.floor(y / 4) - Math.floor(1970 / 4);
	var n100 = Math.floor(y / 100) - Math.floor(1970 / 100);
	var n400 = Math.floor(y / 400) - Math.floor(1970 / 400);

	// Years that are multiple of 400 (like 2000) contribute by 1 (1 -1 +1 in expression below)
	// Years that are multiple of 100 but not of 400 contribute by 0 (1 -1 +0 in expression below)
	// Years that are multiple of 4 but not 100 nor 400 contribute by 1 (1 -0 +0 in expression below).
	var nLeap = n4 - n100 + n400;

	// The offset is straightforward at this point.
	// The February/March transition on leap days will be handled by the fact that the
	// 'y' value above will change, and hence the 'nLeap' value.
	return (year - 1970) * 365 + nLeap + _monthOffsets[month - 1] + day - 1;
}

function _fromOffset(offset) {
	var julian = 2440588 + offset;
	var l = julian + 68569;
	var n = Math.floor((4 * l) / 146097);
	l = l - Math.floor((146097 * n + 3) / 4);
	var i = Math.floor((4000 * (l + 1)) / 1461001);
	l = l - Math.floor((1461 * i) / 4) + 31;
	var j = Math.floor((80 * l) / 2447);
	var day = l - Math.floor((2447 * j) / 80);
	l = Math.floor(j / 11);
	var month = j + 2 - (12 * l);
	var year = 100 * (n - 49) + i + l;
	return new DateObj(year * 10000 + month * 100 + day);
}

function _make(year, month, day) {
	return new DateObj(year * 10000 + month * 100 + day);
}

function _isLeap(year) {
	return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}

function _daysInMonth(year, month) {
	return month == 2 ? (_isLeap(year) ? 29 : 28) : _monthLengths[month - 1];
}

function _isWorkDay(weekDay) {
	return weekDay != 0 && weekDay != 6;
}

function _amDesignator() {
	return _dateInfo().amDesignator || "AM";
}

function _pmDesignator() {
	return _dateInfo().pmDesignator || "PM";
}

exports.amDesignator = _amDesignator;
exports.pmDesignator = _pmDesignator;

// do not export the class
utils.defineClass(DateObj, null, {
	year: {
		get: function() {
			return Math.floor(this._value / 10000);
		}
	},
	month: {
		get: function() {
			return Math.floor(this._value / 100) % 100;

		}
	},
	day: {
		get: function() {
			return this._value % 100;
		}
	},
	weekDay: {
		get: function() {
			// Add Julian offset (+1 because Julian origin is Monday) 
			// so that modulo is on positive value even if date is before 1970
			return ((2440588 + 1 + _toOffset(this)) % 7);
		}
	},
	yearDay: {
		get: function() {
			var month = this.month;
			var leap = month > 2 && _isLeap(this.year) ? 1 : 0;
			return _monthOffsets[month - 1] + leap + this.day;
		}
	},
	week: {
		// ISO 8601 with week 0
		get: function() {
			// week 1 is the beg of week that contains Jan 4th.
			var begOfWeek1 = _make(this.year, 1, 4).begOfWeek(1);
			return Math.floor((7 + _toOffset(this) - _toOffset(begOfWeek1)) / 7);
		}
	},

	valueOf: function() {
		return this.toString();
	},
	compare: function(date) {
		return this._value - date._value;
	},
	equals: function(date) {
		return this._value === date._value;
	},
	between: function(begin, end) {
		return begin._value <= this._value && this._value <= end._value;
	},

	isLeapYear: function() {
		return _isLeap(this.year);
	},
	isWorkDay: function() {
		return _isWorkDay(this.weekDay);
	},
	daysInMonth: function() {
		return _daysInMonth(this.year, this.month);
	},

	begOfYear: function() {
		return _make(this.year, 1, 1);
	},
	endOfYear: function() {
		return _make(this.year, 12, 31);
	},
	begOfQuarter: function() {
		return _make(this.year, Math.floor((this.month - 1) / 3) * 3 + 1, 1);
	},
	endOfQuarter: function() {
		return this.begOfQuarter().addMonths(2).endOfMonth();
	},
	begOfMonth: function() {
		return _make(this.year, this.month, 1);
	},
	endOfMonth: function() {
		return _make(this.year, this.month, this.daysInMonth());
	},
	sameMonth: function(day) {
		day = Math.min(day, this.daysInMonth());
		return _make(this.year, this.month, day);
	},
	pastDay: function(day, includeThis) {
		var delta = day - this.day;
		return (delta > 0 || delta == 0 && !includeThis) ? this.addMonths(-1).sameMonth(day) : this.sameMonth(day);
	},
	futureDay: function(day, includeThis) {
		var delta = day - this.day;
		return (delta < 0 || delta == 0 && !includeThis) ? this.addMonths(1).sameMonth(day) : this.sameMonth(day);
	},
	pastMonth: function(month, includeThis) {
		var delta = this.month - month;
		delta = delta == 0 ? (includeThis ? 0 : 12) : delta > 0 ? delta : delta + 12;
		return this.addMonths(-delta);
	},
	futureMonth: function(month, includeThis) {
		var delta = month - this.month;
		delta = delta == 0 ? (includeThis ? 0 : 12) : delta > 0 ? delta : delta + 12;
		return this.addMonths(delta);
	},
	begOfWeek: function(startDay) { // 0: Sunday (default), 1: Monday
		var delta = this.weekDay - (startDay || 0);
		return delta == 0 ? this : delta > 0 ? this.addDays(-delta) : this.addDays(-delta - 7);
	},
	endOfWeek: function(startDay) {
		return this.begOfWeek(startDay).addDays(6);
	},
	sameWeek: function(weekDay, startDay) {
		return this.begOfWeek(startDay).futureWeekDay(weekDay, true);
	},
	pastWeekDay: function(weekDay, includeThis) {
		var result = this.begOfWeek(weekDay);
		return !includeThis && result.equals(this) ? this.addWeeks(-1) : result;
	},
	futureWeekDay: function(weekDay, includeThis) {
		return this.pastWeekDay(weekDay, !includeThis).addWeeks(1);
	},
	addYears: function(years) {
		if (years == 0)
			return this;
		var year = this.year + years;
		var month = this.month;
		var day = Math.min(this.day, _daysInMonth(year, month));
		return _make(year, month, day);
	},
	addMonths: function(months) {
		if (months == 0)
			return this;
		var self = this;
		var day = self.day;
		var month0 = self.month - 1;
		var year = self.year;
		month0 += months;
		year += Math.floor(month0 / 12);
		var month = (month0 + 120000) % 12 + 1;
		var monthLen = _daysInMonth(year, month);
		day = day < monthLen ? day : monthLen;
		return _make(year, month, day);
	},
	addWeeks: function(weeks) {
		return this.addDays(7 * weeks);
	},
	addDays: function(days) {
		if (days == 0)
			return this;
		return _fromOffset(_toOffset(this) + days);
	},

	daysDiff: function(date) {
		return _toOffset(this) - _toOffset(date);
	},

	/**
     * Adds (or subtracts) to the value of the year, month, day, hour, minute, second, millisecond of the date instance using given configuration object. Positive and Negative values allowed.
     * Example
     <pre><code>
     Date.today().add( { day: 1, month: 1 } )
     </code></pre>
     * @param {Object}   Configuration object containing attributes (month, day, etc.)
     * @return {Date}    this
     */
	add: function(delta) {
		return this.addYears(delta.years || 0).addMonths(delta.months || 0).addWeeks(delta.weeks || 0).addDays(delta.days || 0);
	},

	// format as 
	toString: function(format) {
		var self = this;
		if (format == null) {
			// RFC 3339 by default -- very fast
			var str = self._value.toString();
			str = _padLeft(str, 8, "0");
			return str.substring(0, 4) + "-" + str.substring(4, 6) + "-" + str.substring(6, 8);
		} else {
			var result = '';
			_walkFormat(format, {
				literal: function(lit) {
					result += lit;
				},
				d: function(repeat) {
					switch (repeat) {
						case 1:
							result += self.day.toString();
							break;
						case 2:
							result += _pad2(self.day);
							break;
						case 3:
							result += _dayName(self.weekDay, true);
							break;
						case 4:
							result += _dayName(self.weekDay);
							break;
						default:
							throw new Error(locale.text("date.formatd", repeat));
					}
				},
				M: function(repeat) {
					switch (repeat) {
						case 1:
							result += self.month.toString();
							break;
						case 2:
							result += _pad2(self.month);
							break;
						case 3:
							result += _monthName(self.month, true);
							break;
						case 4:
							result += _monthName(self.month);
							break;
						default:
							throw new Error(locale.text("date.formatM", repeat));
					}
				},
				y: function(repeat) {
					switch (repeat) {
						case 2:
							result += self.year.toString().substring(2, 4);
							break;
						case 4:
							result += self.year.toString();
							break;
						default:
							throw new Error(locale.text("date.formatM", repeat));
					}
				}
			});
			return result;
		}
	},

	at: function(time, millisecond) {
		throw new Error(locale.text("date.notInstalled"));
	},

	toJsDate: function(utc) {
		return utc ? new Date(Date.UTC(this.year, this.month - 1, this.day)) : new Date(this.year, this.month - 1, this.day);
	},

	isNull: function() {
		return this._value == 0;
	}
});

exports.monthName = _monthName;

/**
 * Gets the month number (1-12) if given a Culture Info specific string which is a valid monthName or abbreviatedMonthName.
 * @param {String}   The name of the month (eg. "February, "Feb", "october", "oct").
 * @return {Number}  The day number
 */
exports.monthFromName = function(name) {
	var n = _dateInfo().monthNames,
		m = _dateInfo().abbreviatedMonthNames,
		s = name.toLowerCase();
	for (var i = 0; i < n.length; i++) {
		if (n[i].toLowerCase() == s || m[i].toLowerCase() == s) {
			return i + 1;
		}
	}
	return -1;
};

exports.dayName = _dayName;

/**
 * Gets the day number (0-6) if given a CultureInfo specific string which is a valid dayName, abbreviatedDayName or shortestDayName (two char).
 * @param {String}   The name of the day (eg. "Monday, "Mon", "tuesday", "tue", "We", "we").
 * @return {Number}  The day number
 */
exports.weekDayFromName = function(name) {
	var n = _dateInfo().dayNames,
		m = _dateInfo().abbreviatedDayNames,
		o = _dateInfo().shortestDayNames,
		s = name.toLowerCase();
	for (var i = 0; i < n.length; i++) {
		if (n[i].toLowerCase() == s || m[i].toLowerCase() == s) {
			return i;
		}
	}
	return -1;
};

exports.isLeap = _isLeap;

exports.daysInMonth = _daysInMonth;

exports.today = function(utc) {
	return exports.fromJsDate(new Date(), utc);
};

function _walkFormat(format, map) {
	var i = 0,
		len = format.length;

	function count(i) {
		var ch = format[i],
			k = 1;
		while (format[i + k] === ch)
			k++;
		return k;
	}

	while (i < len) {
		var c = format[i];
		switch (c) {
			case "'":
				i++;
				var literal = '';
				// going to the end of the following litteral or to the format end
				for (; i < len; i++) {
					if (format[i] === "'") {
						i++;
						// check wether the "'" is not doubled
						if (format[i] === "'") {
							literal += "'";
						} else
							break;
					} else {
						literal += format[i];
					}
				}
				map.literal(literal);
				break;
			case "d":
			case "M":
			case "y":
				var repeat = count(i);
				map[c](repeat);
				i += repeat;
				break;
			default:
				map.literal(c);
				i++;

		}
	}
}

function _parse(str, format) {
	var day, weekday, month, year;
	// position in str
	var j = 0;

	function parseInteger(max) {
		if (!/\d/.test(str[j])) {
			throw new Error(locale.text("date.notNumber", str.substring[j]));
		}
		var beg = j++;
		while (j < beg + max && /\d/.test(str[j]))
			j++;
		return parseInt(str.substring(beg, j), 10);
	}

	function parseName(names) {
		for (var k = 0; k < names.length; k++) {
			var name = names[k],
				len = name.length;
			if (str.substring(j, j + len).toUpperCase() == name.toUpperCase()) {
				j += len;
				return k;
			}
		}
		throw new Error(locale.text("date.unknown", str.substring(j)));
	}

	_walkFormat(format, {
		literal: function(literal) {
			if (str.substring(j, j + literal.length) !== literal)
				throw new Error(locale.text("date.wrongFormat", literal, str.substring(j)));
			j += literal.length;
		},
		d: function(arg) {
			switch (arg) {
				case 1:
				case 2:
					day = parseInteger(2);
					break;
				case 3:
					weekday = parseName(_dateInfo().abbreviatedDayNames);
					break;
				case 4:
					weekday = parseName(_dateInfo().dayNames);
					break;
				default:
					throw new Error(locale.text("date.badDay", format.substring(j))); // replaced i with j
			}
		},
		M: function(arg) {
			switch (arg) {
				case 1:
				case 2:
					month = parseInteger(2);
					break;
				case 3:
					month = parseName(_dateInfo().abbreviatedMonthNames) + 1;
					break;
				case 4:
					month = parseName(_dateInfo().monthNames) + 1;
					break;
				default:
					throw new Error(locale.text("date.badDay", format.substring(j))); // replaced i with j
			}
		},
		y: function(arg) {
			switch (arg) {
				case 2:
					year = parseInteger(2);
					year = year < 40 ? 2000 + year : 1900 + year;
					break;
				case 4:
					year = parseInteger(4);
					year = year > 99 ? year : year < 40 ? 2000 + year : 1900 + year;
					break;
				default:
					throw new Error(locale.text("date.badYear", format.substring(j))); // replaced i with j
			}
		}
	});

	// ignore weekday
	return _make(year, month, day);
}

exports.parse = function(str, format) {
	if (str == null)
		throw new Error(locale.text("date.dateNull"));

	if (format == null) {
		// RFC 3339 by default -- very fast
		if (str.length != 10)
			throw new Error(locale.text("date.badFormat", str));
		var value = parseInt(str.replace(/-/g, ''), 10);
		return new DateObj(value);
	} else {
		return _parse(str, format);
	}
};

// used for format conversions
exports.walkFormat = _walkFormat;

exports.fromJsDate = function(jsDate, utc) {
	return utc ? _make(jsDate.getUTCFullYear(), jsDate.getUTCMonth() + 1, jsDate.getUTCDate()) : _make(jsDate.getFullYear(), jsDate.getMonth() + 1, jsDate.getDate());
};

exports.fromInternalValue = function(value) {
	return new DateObj(value);
};

exports.makeInWeek = function(year, week, wday) {
	var dday = wday ? wday - 1 : 6;
	return _make(year, 1, 4).begOfWeek(1).addDays(7 * (week - 1) + dday);
};
exports.isDate = function(obj) {
	return obj instanceof DateObj;
};


exports.sunday = 0;
exports.Sunday = 0;
exports.monday = 1;
exports.Monday = 1;
exports.tuesday = 2;
exports.Tuesday = 2;
exports.wednesday = 3;
exports.Wednesday = 3;
exports.thursday = 4;
exports.Thursday = 4;
exports.friday = 5;
exports.Friday = 5;
exports.saturday = 6;
exports.Saturday = 6;

exports.make = _make;
});

define('syracuse-tablet/html/js/helpers/types/time',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/locale'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require("syracuse-tablet/html/js/helpers/locale");
var _dateInfo = locale.getDatetimeInfo;

exports.validate = function(value, constraints, errors) {
	if (value == null) {
		if (constraints.$isMandatory) return errors.push(locale.text("time.valMan"));
		if (!constraints.$isNullable) return errors.push(locale.text("time.valNull"));
		return;
	}
	if (!(value instanceof Time)) {
		errors.push(locale.text("time.valTime"));
		return;
	}
};

function Time(value) {
	// force modulo on value to bring it back in range
	value = (value + 86400 * 365 * 10000) % 86400;
	this._value = value;
}

function _pad2(val) {
	var s = val.toString();
	return (s.length == 1) ? "0" + s : s;
}

function _parse2(str, beg, end) {
	return parseInt(str.substring(beg, end), 10);
}

function _make(hour, minute, second) {
	return new Time(hour * 3600 + (minute || 0) * 60 + (second || 0));
}

function _amDesignator() {
	return _dateInfo().amDesignator || "AM";
}

function _pmDesignator() {
	return _dateInfo().pmDesignator || "AM";
}

utils.defineClass(Time, null, {
	hour: {
		get: function() {
			return Math.floor(this._value / 3600);
		}
	},
	minute: {
		get: function() {
			return Math.floor(this._value / 60) % 60;
		}
	},
	second: {
		get: function() {
			return this._value % 60;
		}
	},
	value: {
		get: function() {
			return this._value;
		}
	},
	valueOf: function() {
		return this.toString();
	},
	compare: function(time) {
		return this._value - time._value;
	},
	equals: function(time) {
		return this._value === time._value;
	},
	between: function(begin, end) {
		return begin._value <= this._value && this._value <= end._value;
	},

	begOfDay: function() {
		return _make(0, 0, 0);
	},
	endOfDay: function() {
		return _make(23, 59, 59);
	},
	begOfHour: function() {
		return _make(this.hour, 0, 0);
	},
	endOfHour: function() {
		return _make(this.hour, 59, 59);
	},
	begOfMinute: function() {
		return _make(this.hour, this.minute, 0);
	},
	endOfMinute: function() {
		return _make(this.hour, this.minute, 59);
	},

	// format as
	toString: function(format) {
		var self = this;
		if (format == null) {
			return _pad2(self.hour) + ":" + _pad2(self.minute) + ":" + _pad2(self.second);
		} else {
			var result = '';
			_walkFormat(format, {
				literal: function(lit) {
					result += lit;
				},
				H: function(repeat) {
					switch (repeat) {
						case 1:
							result += self.hour;
							break;
						case 2:
							result += _pad2(self.hour);
							break;
						default:
							throw new Error(locale.text("time.formatH", repeat));
					}
				},
				h: function(repeat) {
					switch (repeat) {
						case 1:
							var hour = self.hour;
							if (hour === 0) {
								result += 12;
							} else {
								result += hour > 12 ? hour - 12 : hour;
							}
							break;
						case 2:
							var hour = self.hour;
							if (hour === 0) {
								result += 12;
							} else {
								result += hour > 12 ? _pad2(hour - 12) : _pad2(hour);
							}
							break;
						default:
							throw new Error(locale.text("time.formath", repeat));
					}
				},
				m: function(repeat) {
					switch (repeat) {
						case 2:
							result += _pad2(self.minute);
							break;
						default:
							throw new Error(locale.text("time.formatm", repeat));
					}
				},
				s: function(repeat) {
					switch (repeat) {
						case 2:
							result += _pad2(self.second);
							break;
						default:
							throw new Error(locale.text("time.formats", repeat));
					}
				},
				t: function(repeat) {
					switch (repeat) {
						case 1:
							result += self.hour < 12 ? _amDesignator().substring(0, 1) : _pmDesignator().substring(0, 1);
							break;
						case 2:
							result += self.hour < 12 ? _amDesignator() : _pmDesignator();
							break;
						default:
							throw new Error(locale.text("time.formata", repeat));
					}
				}
			});
			return result;
		}

	},

	secondsDiff: function(t) {
		return this._value - t._value;
	},

	// add functions circle from 23:59:59 to 00:00:00 without warning
	addHours: function(hours) {
		return hours == 0 ? this : new Time(this._value + hours * 3600);
	},
	addMinutes: function(minutes) {
		return minutes == 0 ? this : new Time(this._value + minutes * 60);
	},
	addSeconds: function(seconds) {
		return seconds == 0 ? this : new Time(this._value + seconds);
	},
	add: function(delta) {
		return this.addHours(delta.hours || 0).addMinutes(delta.minutes || 0).addSeconds(delta.seconds || 0);
	},
	isNull: function() {
		return this._value == 0;
	}
});

exports.make = _make;

exports.fromSeconds = function(seconds) {
	return new Time(seconds);
};

exports.fromJsDate = function(js, utc) {
	return utc ? _make(js.getUTCHours(), js.getUTCMinutes(), js.getUTCSeconds()) : _make(js.getHours(), js.getMinutes(), js.getSeconds());
};

exports.now = function(utc) {
	return exports.fromJsDate(new Date(), utc);
};

exports.parse = function(str, format) {
	if (str == null) throw new Error(locale.text("time.isNull"));

	if (format == null) {
		// RFC 3339 full time without fraction -- very fast
		// hh:mm
		if (str.length != 5 && str.length != 8) throw new Error(locale.text("time.badFormat", str));

		var value = str.length == 8 ? _parse2(str, 0, 2) * 3600 + _parse2(str, 3, 5) * 60 + _parse2(str, 6, 8) : _parse2(str, 0, 2) * 3600 + _parse2(str, 3, 5) * 60;
		return new Time(value);
	} else {
		return _parse(str, format);
	}
};

function _walkFormat(format, map) {
	var i = 0,
		len = format.length;

	function count(i) {
		var ch = format[i],
			k = 1;
		while (format[i + k] === ch)
			k++;
		return k;
	}

	while (i < len) {
		var c = format[i];
		switch (c) {
			case "'":
				i++;
				var literal = '';
				// going to the end of the following literal or to the format end
				for (; i < len; i++) {
					if (format[i] === "'") {
						i++;
						// check whether the "'" is not doubled
						if (format[i] === "'") {
							literal += "'";
						} else break;
					} else {
						literal += format[i];
					}
				}
				map.literal(literal);
				break;
			case "H":
			case "h":
			case "m":
			case "s":
			case "t":
				var repeat = count(i);
				map[c](repeat);
				i += repeat;
				break;
			default:
				map.literal(c);
				i++;
		}
	}
}

function _parse(str, format) {
	var hour, minute, second, timeMode, abbrTimeMode;
	var timeModes = [_amDesignator(), _pmDesignator()];
	var abbrTimeModes = [timeModes[0].substring(0, 1), timeModes[1].substring(0, 1)];
	// position in str
	var j = 0;

	function parseInteger(max) {
		if (!/\d/.test(str[j])) {
			throw new Error(locale.text("time.noNumber", str.substring[j]));
		}
		var beg = j++;
		while (j < beg + max && /\d/.test(str[j]))
			j++;
		return parseInt(str.substring(beg, j), 10);
	}

	function parseName(names) {
		for (var k = 0; k < names.length; k++) {
			var name = names[k],
				len = name.length;
			if (str.substring(j, j + len).toUpperCase() == name.toUpperCase()) {
				j += len;
				return k;
			}
		}
		throw new Error(locale.text("time.unknown", str.substring(j)));
	}

	_walkFormat(format, {
		literal: function(literal) {
			if (str.substring(j, j + literal.length) !== literal) throw new Error(locale.text("time.wrongFormat", literal, str.substring(j)));
			j += literal.length;
		},
		H: function(arg) {
			switch (arg) {
				case 1:
				case 2:
					hour = parseInteger(2);
					break;
				default:
					throw new Error(locale.text("time.badHour", format.substring(j))); // replaced i with j
			}
		},
		h: function(arg) {
			switch (arg) {
				case 1:
				case 2:
					hour = parseInteger(2);
					break;
				default:
					throw new Error(locale.text("time.badHour", format.substring(j)));
			}
		},
		m: function(arg) {
			switch (arg) {
				case 2:
					minute = parseInteger(2);
					break;
				default:
					throw new Error(locale.text("time.badMin", format.substring(j)));
			}
		},
		s: function(arg) {
			switch (arg) {
				case 2:
					second = parseInteger(2);
					break;
				default:
					throw new Error(locale.text("time.badSec", format.substring(j)));
			}
		},
		t: function(arg) {
			switch (arg) {
				case 1:
					abbrTimeMode = parseName(abbrTimeModes);
					break;
				case 2:
					timeMode = parseName(timeModes);
					break;
				default:
					throw new Error(locale.text("time.badMarker", format.substring(j)));
			}
		}
	});

	// from 12 format to 24 format, used when necessary

	function from12to24(mode, index) {
		switch (mode[index]) {
			case mode[0]:
				// AM
				hour = hour === 12 ? 0 : hour;
				break;
			case mode[1]:
				// PM
				if (hour >= 1 && hour <= 11) {
					hour += 12;
				}
				break;
		}
	}

	if (timeMode != null || abbrTimeMode != null) {
		if (hour > 12) throw new Error(locale.text("time.badHourVal", hour, timeMode));
		var mode = timeMode != null ? timeModes : abbrTimeModes;
		var index = timeMode != null ? timeMode : abbrTimeMode;
		from12to24(mode, index);
	}

	return _make(hour, minute, second);
}

exports.amDesignator = _amDesignator;
exports.pmDesignator = _pmDesignator;
});

define('syracuse-tablet/html/js/helpers/types/datetime',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/types/date','syracuse-tablet/html/js/helpers/types/time','syracuse-tablet/html/js/helpers/locale'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var date = require('syracuse-tablet/html/js/helpers/types/date');
var time = require('syracuse-tablet/html/js/helpers/types/time');
var locale = require("syracuse-tablet/html/js/helpers/locale");

var _dateInfo = locale.getDatetimeInfo;

exports.validate = function(value, constraints, errors) {
	if (value == null) {
		if (constraints.$isMandatory) return errors.push(locale.text("datetime.valMand"));
		if (!constraints.$isNullable) return errors.push(locale.text("datetime.valNull"));
		return;
	}
	if (!(value instanceof Datetime)) {
		errors.push(locale.text("datetime.valDT"));
		return;
	}

	// month value check
	if (!(value.month >= 1 && value.month <= 12)) {
		errors.push(locale.text("datetime.valMon"));
		return;
	}

	// day value check
	if (!(value.day >= 1 && value.day <= date.daysInMonth(value.year, value.month))) {
		errors.push(locale.text("datetime.valDay"));
		return;
	}
};

function _pad2(val) {
	var s = val.toString();
	return (s.length == 1) ? "0" + s : s;
}

function _pad3(val) {
	var s = val.toString();
	switch (s.length) {
		case 1:
			return "00" + s;
		case 2:
			return "0" + s;
		default:
			return s;
	}
}

// internal value is GMT millis since origin (Jan 1st, 1970).
// We also cache the local and utc values separately as _local and _utc, when
// they are requested.

function Datetime(value, tzOffset) {
	this._value = value;
	if (tzOffset != null) this._tzOffset = tzOffset;
}

// returns millis value for seconds and milliseconds part

function _ms(dt) {
	// add millis for approx 2000 years to ensure positive before applying modulo
	return (dt._value + 2000 * 365 * 24 * 3600 * 1000) % 1000;
}

// get UTC components packed into an int
// millis are not included as they are independent from UTC/local

function _utc(dt) {
	var utc = dt._utc;
	if (!utc) {
		var d = new Date(dt._value);
		utc = d.getUTCFullYear() * 10000 * 100000 + (d.getUTCMonth() + 1) * 100 * 100000 + d.getUTCDate() * 100000 + d.getUTCHours() * 3600 + d.getUTCMinutes() * 60 + d.getUTCSeconds();
		d._utc = utc;
	}
	return utc;
}

// get local components packed into an int
// millis are not included as they are independent from UTC/local

function _local(dt) {
	var local = dt._local;
	if (!local) {
		var d = new Date(dt._value);
		local = d.getFullYear() * 10000 * 100000 + (d.getMonth() + 1) * 100 * 100000 + d.getDate() * 100000 + d.getHours() * 3600 + d.getMinutes() * 60 + d.getSeconds();
		d._local = local;
	}
	return local;
}

exports.Datetime = utils.defineClass(Datetime, null, {
	date: {
		get: function() {
			return date.fromInternalValue(Math.floor(_local(this) / 100000));
		}
	},
	time: {
		get: function() {
			return time.fromSeconds(_local(this) % 100000);
		}
	},
	year: {
		get: function() {
			return this.date.year;
		}
	},
	month: {
		get: function() {
			return this.date.month;
		}
	},
	day: {
		get: function() {
			return this.date.day;
		}
	},
	weekDay: {
		get: function() {
			return this.date.weekDay;
		}
	},
	yearDay: {
		get: function() {
			return this.date.yearDay;
		}
	},
	hour: {
		get: function() {
			return this.time.hour;
		}
	},
	minute: {
		get: function() {
			return this.time.minute;
		}
	},
	second: {
		get: function() {
			return this.time.second;
		}
	},
	millisecond: {
		get: function() {
			return _ms(this);
		}
	},

	utcDate: {
		get: function() {
			return date.fromInternalValue(Math.floor(_utc(this) / 100000));
		}
	},
	utcTime: {
		get: function() {
			return time.fromSeconds(_utc(this) % 100000);
		}
	},
	utcYear: {
		get: function() {
			return this.utcDate.year;
		}
	},
	utcMonth: {
		get: function() {
			return this.utcDate.month;
		}
	},
	utcDay: {
		get: function() {
			return this.utcDate.day;
		}
	},
	utcWeekDay: {
		get: function() {
			return this.utcDate.weekDay;
		}
	},
	utcYearDay: {
		get: function() {
			return this.utcDate.yearDay;
		}
	},
	utcHour: {
		get: function() {
			return this.utcTime.hour;
		}
	},
	utcMinute: {
		get: function() {
			return this.utcTime.minute;
		}
	},
	utcSecond: {
		get: function() {
			return this.utcTime.second;
		}
	},
	utcMillisecond: {
		get: function() {
			return _ms(this);
		}
	},
	value: {
		get: function() {
			return this._value;
		}
	},
	timezoneOffset: {
		get: function() {
			if (this._tzOffset == null) this._tzOffset = this.toJsDate().getTimezoneOffset();
			return this._tzOffset;
		}
	},

	compare: function(dt) {
		return this._value - dt._value;
	},
	equals: function(dt) {
		return this._value === dt._value;
	},
	between: function(begin, end) {
		return begin._value <= this._value && this._value <= end._value;
	},

	addYears: function(years) {
		return this.date.addYears(years).at(this.time, this.millisecond);
	},
	addMonths: function(months) {
		return this.date.addMonths(months).at(this.time, this.millisecond);
	},
	addWeeks: function(weeks) {
		return this.date.addWeeks(weeks).at(this.time, this.millisecond);
	},
	addDays: function(days) {
		return this.date.addDays(days).at(this.time, this.millisecond);
	},
	addHours: function(hours) {
		return new Datetime(this._value + hours * 3600 * 1000);
	},
	addMinutes: function(minutes) {
		return new Datetime(this._value + minutes * 60 * 1000);
	},
	addSeconds: function(seconds) {
		return new Datetime(this._value + seconds * 1000);
	},
	addMilliseconds: function(millis) {
		return new Datetime(this._value + millis);
	},
	addDayFractions: function(fraction) {
		return new Datetime(this._value + fraction * 86400 * 1000);
	},

	millisDiff: function(dt) {
		return this._value - dt._value;
	},
	begOfMonth: function() {
		return _make(this.year, this.month, 1);
	},
	begOfWeek: function(startDay) { // 0: Sunday (default), 1: Monday
		var delta = this.weekDay - (startDay || 0);
		return delta == 0 ? this : delta > 0 ? this.addDays(-delta) : this.addDays(-delta - 7);
	},

	/**
     * Adds (or subtracts) to the value of the year, month, day, hour, minute, second, millisecond of the date instance using given configuration object. Positive and Negative values allowed.
     * Example
     <pre><code>
     Date.today().add( { day: 1, month: 1 } )
     </code></pre>
     * @param {Object}   Configuration object containing attributes (month, day, etc.)
     * @return {Date}    this
     */
	add: function(delta) {
		return this.addYears(delta.years || 0).addMonths(delta.months || 0).addWeeks(delta.weeks || 0).addDays(delta.days || 0).addHours(delta.hours || 0).addMinutes(delta.minutes || 0).addSeconds(delta.seconds || 0).addMillis(delta.millis || 0);
	},

	// format as
	toString: function(format) {
		var self = this;
		if (format == null) {
			return new Date(this._value).toISOString();
		} else {
			var utc = _getIndexOfZ(format);
			var _date = utc ? self.utcDate : self.date;
			var _time = utc ? self.utcTime : self.time;

			var result = '';
			_walkFormat(format, {
				literal: function(lit) {
					result += lit;
				},
				H: function(repeat) {
					switch (repeat) {
						case 1:
							result += _time.hour.toString();
							break;
						case 2:
							result += _pad2(_time.hour);
							break;
						default:
							throw new Error(locale.text("datetime.formatH", repeat));
					}
				},
				h: function(repeat) {
					switch (repeat) {
						case 1:
							result += _time.hour < 13 ? _time.hour : (_time.hour - 12);
							break;
						case 2:
							result += _pad2(_time.hour < 13 ? _time.hour : (_time.hour - 12));
							break;
						default:
							throw new Error(locale.text("datetime.formath", repeat));
					}
				},
				m: function(repeat) {
					switch (repeat) {
						case 2:
							result += _pad2(_time.minute);
							break;
						default:
							throw new Error(locale.text("datetime.formatm", repeat));
					}
				},
				s: function(repeat) {
					switch (repeat) {
						case 2:
							result += _pad2(self.second);
							break;
						default:
							throw new Error(locale.text("datetime.formats", repeat));
					}
				},
				t: function(repeat) {
					switch (repeat) {
						case 1:
							result += self.hour < 12 ? _dateInfo().amDesignator.substring(0, 1) : _dateInfo().pmDesignator.substring(0, 1);
							break;
						case 2:
							result += self.hour < 12 ? _dateInfo().amDesignator : _dateInfo().pmDesignator;
							break;
						default:
							throw new Error(locale.text("datetime.formata", repeat));
					}
				},
				d: function(repeat) {
					switch (repeat) {
						case 1:
							result += _date.day.toString();
							break;
						case 2:
							result += _pad2(_date.day);
							break;
						case 3:
							result += date.dayName(_date.weekDay, true);
							break;
						case 4:
							result += date.dayName(_date.weekDay);
							break;
						default:
							throw new Error(locale.text("datetime.formatd", repeat));
					}
				},
				M: function(repeat) {
					switch (repeat) {
						case 1:
							result += _date.month.toString();
							break;
						case 2:
							result += _pad2(_date.month);
							break;
						case 3:
							result += date.monthName(_date.month, true);
							break;
						case 4:
							result += date.monthName(_date.month);
							break;
						default:
							throw new Error(locale.text("datetime.formatM", repeat));
					}
				},
				y: function(repeat) {
					switch (repeat) {
						case 2:
							result += _date.year.toString().substring(2, 4);
							break;
						case 4:
							result += _date.year.toString();
							break;
						default:
							throw new Error(locale.text("datetime.formaty", repeat));
					}
				},
				S: function(repeat) {
					if (repeat === 3) result += _pad3(self.millisecond);
					else new Error(locale.text("datetime.formatS", repeat));
				}
			});
			return result;
		}
	},
	toJsDate: function() {
		return new Date(this._value);
	},
	withoutTimezoneOffset: function() {
		return new Datetime(this._value);
	},
	isNull: function() {
		return this._value == 0;
	}
});

function _formatTzOffset(offset, len) {
	var s = "-";
	if (offset < 0) {
		s = "+";
		offset = -offset;
	}
	var hr = Math.round(offset / 60);
	var min = offset - hr * 60;
	s += len > 1 ? _pad2(hr) : hr;
	s += len > 2 || min ? (":" + (len > 1 ? _pad2(min) : min)) : "";
	return s;
}

function _parseIso(str) {
	var year = 0,
		month = 0,
		day = 0,
		hours = 0,
		minutes = 0,
		seconds = 0,
		ms = 0,
		offset = 0,
		convertError = true;
	var d = /(\d{4})-(\d{2})-(\d{2})([T\s]?)(\d{2})?(:)?(\d{2})?(:)?(\d{2})?(\.(\d{3}))?(Z)?(([+-])(\d{2}))?(.*$)/.exec(str);
	if (d) {
		convertError = false;
		year = +d[1];
		month = d[2] - 1;
		day = +d[3];
		hours = +(d[5] || 0);
		minutes = +(d[7] || 0);
		seconds = +(d[9] || 0);
		ms = +(d[11] || 0);
		if (d[12] === "Z") {
			if (d[14] === '-') offset = (d[15] || 0) * 60;
			else if (d[14] === '+') offset = -(d[15] || 0) * 60;
			var utc = Date.UTC(year, month, day, hours, minutes + offset, seconds, ms);
			return new Datetime(utc);
		} else {
			var jsDate = new Date(year, month, day, hours, minutes + offset, seconds, ms);
			return new Datetime(jsDate.getTime(), jsDate.getTimezoneOffset());
		}
	}
	if (convertError) throw new Error(locale.text("datetime.noParse", str));
}

exports.now = function(withMillis) {
	var jsDate = new Date();
	var millis = jsDate.getTime();
	if (!withMillis) millis = Math.floor(millis / 1000) * 1000;
	return new Datetime(millis, jsDate.getTimezoneOffset());
};

exports.parse = function(str, format) {
	if (str == null) throw new Error(locale.text("datetime.isNull"));

	if (format == null) {
		return _parseIso(str);
	} else {
		return _parse(str, format);
	}
};

exports.fromJsDate = function(jsDate) {
	return new Datetime(jsDate.getTime(), jsDate.getTimezoneOffset());
};

exports.isDatetime = function(obj) {
	return obj instanceof Datetime;
};

exports.fromInternalValue = function(value) {
	return new Datetime(value);
};

exports.dayName = function(weekDay, abbrev) {
	return abbrev ? _dateInfo().abbreviatedDayNames[weekDay] : _dateInfo().dayNames[weekDay];
};

exports.monthName = function(month, abbrev) {
	return abbrev ? _dateInfo().abbreviatedMonthNames[month - 1] : _dateInfo().monthNames[month - 1];
};

function _make(year, month, day, hour, minute, second, millis) {
	var jsDate = new Date(year, month - 1, day, hour || 0, minute || 0, second || 0, millis || 0);
	return new Datetime(jsDate.getTime(), jsDate.getTimezoneOffset());
}

exports.make = _make;
exports.makeUtc = _makeUtc;

function _makeUtc(year, month, day, hour, minute, second, millis) {
	var jsDate = new Date(Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millis || 0));
	return new Datetime(jsDate.getTime(), jsDate.getTimezoneOffset());
}

// hack to install "at" method in date, without require cycles
date.make(1, 1, 1).constructor.prototype.at = function(time, millisecond) {
	return exports.make(this.year, this.month, this.day, time.hour, time.minute, time.second, millisecond);
};

exports.sunday = 0;
exports.Sunday = 0;
exports.monday = 1;
exports.Monday = 1;
exports.tuesday = 2;
exports.Tuesday = 2;
exports.wednesday = 3;
exports.Wednesday = 3;
exports.thursday = 4;
exports.Thursday = 4;
exports.friday = 5;
exports.Friday = 5;
exports.saturday = 6;
exports.Saturday = 6;

function _walkFormat(format, map) {
	var i = 0,
		len = format.length;

	function count(i) {
		var ch = format[i],
			k = 1;
		while (format[i + k] === ch)
			k++;
		return k;
	}

	while (i < len) {
		var c = format[i];
		switch (c) {
			case "'":
				i++;
				var literal = '';
				// going to the end of the following litteral or to the format end
				for (; i < len; i++) {
					if (format[i] === "'") {
						i++;
						// check wether the "'" is not doubled
						if (format[i] === "'") {
							literal += "'";
						} else break;
					} else {
						literal += format[i];
					}
				}
				map.literal(literal);
				break;
			case "H":
			case "h":
			case "m":
			case "s":
			case "S":
			case "t":
			case "d":
			case "M":
			case "y":
				var repeat = count(i);
				map[c](repeat);
				i += repeat;
				break;
			default:
				map.literal(c);
				i++;
		}
	}
}

exports.walkFormat = _walkFormat;

function _parse(str, format) {
	var day, weekday, month, year, hour, minute, second, millis, timeMode, abbrTimeMode;
	var timeModes = [date.amDesignator(), date.pmDesignator()];
	//var timeModes = _dateInfo().amDesignator ? [_dateInfo().amDesignator, _dateInfo().pmDesignator] : ["AM", "PM"];
	var abbrTimeModes = [timeModes[0].substring(0, 1), timeModes[1].substring(0, 1)];
	//var abbrTimeModes = _dateInfo().amDesignator ? [_dateInfo().amDesignator.substring(0, 1), _dateInfo().pmDesignator.substring(0, 1)] : ["A", "P"];

	// position in str
	var j = 0;

	function parseInteger(max) {
		if (!/\d/.test(str[j])) {
			throw new Error(locale.text("datetime.noNumber", str.substring[j]));
		}
		var beg = j++;
		while (j < beg + max && /\d/.test(str[j]))
			j++;
		return parseInt(str.substring(beg, j), 10);
	}

	function parseName(names) {
		for (var k = 0; k < names.length; k++) {
			var name = names[k],
				len = name.length;
			if (str.substring(j, j + len).toUpperCase() == name.toUpperCase()) {
				j += len;
				return k;
			}
		}
		throw new Error(locale.text("datetime.unknown", str.substring(j)));
	}

	_walkFormat(format, {
		literal: function(literal) {
			if (str.substring(j, j + literal.length) !== literal) throw new Error(locale.text("datetime.formatMis", literal, str.substring(j)));
			j += literal.length;
		},
		d: function(arg) {
			switch (arg) {
				case 1:
				case 2:
					day = parseInteger(2);
					break;
				case 3:
					weekday = parseName(_dateInfo().abbreviatedDayNames);
					break;
				case 4:
					weekday = parseName(_dateInfo().dayNames);
					break;
				default:
					throw new Error(locale.text("datetime.badDay", format.substring(j))); // replaced i with j
			}
		},
		M: function(arg) {
			switch (arg) {
				case 1:
				case 2:
					month = parseInteger(2);
					break;
				case 3:
					month = parseName(_dateInfo().abbreviatedMonthNames) + 1;
					break;
				case 4:
					month = parseName(_dateInfo().monthNames) + 1;
					break;
				default:
					throw new Error(locale.text("datetime.badDay", format.substring(j))); // replaced i with j
			}
		},
		y: function(arg) {
			switch (arg) {
				case 2:
					year = parseInteger(2);
					year = year < 40 ? 2000 + year : 1900 + year;
					break;
				case 4:
					year = parseInteger(4);
					year = year > 99 ? year : year < 40 ? 2000 + year : 1900 + year;
					break;
				default:
					throw new Error(locale.text("datetime.badYear", format.substring(j))); // replaced i with j
			}
		},
		H: function(arg) {
			switch (arg) {
				case 1:
				case 2:
					hour = parseInteger(2);
					break;
				default:
					throw new Error(locale.text("datetime.badHour", format.substring(j)));
			}
		},
		h: function(arg) {
			switch (arg) {
				case 1:
				case 2:
					hour = parseInteger(2);
					break;
				default:
					throw new Error(locale.text("datetime.badHour", format.substring(j)));
			}
		},
		m: function(arg) {
			switch (arg) {
				case 2:
					minute = parseInteger(2);
					break;
				default:
					throw new Error(locale.text("datetime.badMin", format.substring(j)));
			}
		},
		s: function(arg) {
			switch (arg) {
				case 2:
					second = parseInteger(2);
					break;
				default:
					throw new Error(locale.text("datetime.badSec", format.substring(j)));
			}
		},
		t: function(arg) {
			switch (arg) {
				case 1:
					abbrTimeMode = parseName(abbrTimeModes);
					break;
				case 2:
					timeMode = parseName(timeModes);
					break;
				default:
					throw new Error(locale.text("datetime.badMarker", format.substring(j)));
			}
		}
	});

	// from 12 format to 24 format, used when necessary

	function from12to24(mode, index) {
		switch (mode[index]) {
			case mode[0]:
				// AM
				hour = hour === 12 ? 0 : hour;
				break;
			case mode[1]:
				// PM
				if (hour >= 1 && hour <= 11) {
					hour += 12;
				}
				break;
		}
	}

	if (timeMode != null || abbrTimeMode != null) {
		if (hour > 12) throw new Error(locale.text("datetime.badHourVal", hour, timeMode));
		var mode = timeMode != null ? timeModes : abbrTimeModes;
		var index = timeMode != null ? timeMode : abbrTimeMode;
		from12to24(mode, index);
	}

	// ignore weekday
	return _make(year, month, day, hour, minute, second, millis);
}

function _getIndexOfZ(format) {
	var i = 0,
		len = format.length;

	function count(i) {
		var ch = format[i],
			k = 1;
		while (format[i + k] === ch)
			k++;
		return k;
	}

	while (i < len) {
		var c = format[i];
		if (c === "'") {
			i++;
			var literal = '';
			// going to the end of the following litteral or to the format end
			for (; i < len; i++) {
				if (format[i] === "'") {
					i++;
					// check wether the "'" is not doubled
					if (format[i] === "'") {
						literal += "'";
					} else break;
				} else {
					literal += format[i];
				}
			}
		} else if (c === 'Z') {
			return i;
		} else {
			i++;
		}
	}
}
});

define('syracuse-tablet/html/js/helpers/types/numberFormat',['require','exports','module','syracuse-tablet/html/js/helpers/locale'],function (require, exports, module) {

var locale = require("syracuse-tablet/html/js/helpers/locale");

//======================
//	Useful elements
//======================

/**
 * Format object used to handle format. Useful for the formatting and parsing methods
 * @param {Object} prefix	Any text before directives
 * @param {Object} postfix	Any text after directives
 * @param {Object} properties	Properties are : hasDecimalSeparator, hasGroupSeparator, mandatoryAfter, maxAfter, groupSize, mandatoryBefore, directive, hasPercent, hasPermil, hasSignFormat
 */
function FormatObj(prefix, postfix, properties) {
	this.prefix = prefix;
	this.postfix = postfix;
	this.properties = properties;
}

/**
 * Set number format properties from directive parameter.
 * @param {String}	directive
 * @param {Object}	fObj
 * @return {Object}	Returns a formatObj with properties set
 */
function _processDirective(directive, fObj) {
	// properties to set:   

	// result
	var f = new FormatObj(fObj.prefix, fObj.postfix, fObj.properties);

	var hasDecimalSeparator, hasGroupSeparator;

	var dsIndex = directive.indexOf('.');
	var gsIndex = directive.indexOf(',');

	// decimal and group separator properties
	f.properties.hasDecimalSeparator = hasDecimalSeparator = dsIndex > -1;
	f.properties.hasGroupSeparator = hasGroupSeparator = gsIndex > -1;

	// after properties	
	if (hasDecimalSeparator) {
		var decimal = directive.substring(dsIndex + 1);
		f.properties.mandatoryAfter = decimal.indexOf("0") > -1 ? decimal.match(/0/g).length : 0;
		f.properties.maxAfter = decimal.length;
	}

	// group size property
	if (hasGroupSeparator) {
		f.properties.groupSize = hasDecimalSeparator ? dsIndex - gsIndex - 1 : directive.substring(gsIndex + 1).length;
	}

	// before property
	var integer = hasDecimalSeparator ? directive.substring(0, dsIndex) : directive;
	f.properties.mandatoryBefore = integer.indexOf("0") > -1 ? integer.match(/0/g).length : 0;

	// directive
	f.properties.directive = directive;

	// percent/permil property
	f.properties.hasPercent = directive.indexOf("%") > -1;
	f.properties.hasPermil = directive.indexOf("‰") > -1;

	// sign format
	f.properties.hasSignFormat = directive.indexOf('+') > -1 && directive.indexOf('+') === 0;

	return f;
}

/**
 * Walk through the given format and run functions in map
 * @param {Object} format
 * @param {Object} map
 */
function _walkFormat(format, map) {
	var i = 0,
		len = format.length;

	// valid directive characters in format (except ';')
	var validDir = "0#.,%‰+"; //	'E' or 'e' are not supported yet
	function count(i) {
		var ch = format[i],
			k = 1;
		while (validDir.indexOf(format[i + k]) > -1)
			k++;
		return k;
	}

	while (i < len) {
		var c = format[i];
		switch (c) {
			case "'":
				i++;
				var literal = '';
				// going to the end of the following litteral or to the format end
				for (; i < len; i++) {
					if (format[i] === "'") {
						i++;
						// check wether the "'" is not doubled
						if (format[i] === "'") {
							literal += "'";
						} else break;
					} else {
						literal += format[i];
					}
				}
				map.literal(literal);
				break;
			case "0":
			case "#":
			case ".":
			case "%":
			case "‰":
			case "+":
				var directiveLength = count(i);
				map.directive(i, i + directiveLength);
				i += directiveLength;
				break;
			case ";":
				map.listSeparator();
				i++;
				break;
			default:
				map.literal(c);
				i++;
		}
		// at the end of the loop
		if (i === len) {
			map.listSeparator();
		}
	}
}

/**
 * Add separator parameter after every digits group of size value to the number paramater.
 * @param {Object} num
 * @param {Object} gs
 * @param {Object} size
 */
function _addSeparator(num, gs, size) {
	var result = "";
	var len = num.length;
	var c = "";
	var count = 0;
	for (var i = len - 1; i >= 0; i--) {
		c = num[i];
		result += c;
		++count;
		if ((count % size === 0) && i > 0) {
			result += gs;
		}
	}
	return result.split("").reverse().join("");
}

//======================
//	Format functions
//======================

/**
 * Forat a number
 * @param {Object} val	Raw number
 * @param {Object} format	Format to apply
 * @return {String} Returns a string value containing formatted number
 */
exports.format = function(val, format) {

	//	if (!val)
	//		throw new Error("empty number value");

	if (isNaN(val)) throw new Error(locale.text("numberFormat.notNumber", val));

	if (format == null) {
		val = val.toString();
		var dsIndex = val.indexOf('.');
		var hasDecimal = dsIndex > -1;
		var intPart = hasDecimal ? val.substring(0, dsIndex) : val;
		var decimalPart = hasDecimal ? val.substring(dsIndex + 1) : '';
		var gs = locale.getNumberGroupSeparator() || "";
		var ds = hasDecimal ? (locale.getNumberDecimalSeparator() || ".") : '';
		return _addSeparator(intPart, gs, 3) + ds + decimalPart;
	} else {
		return _format(val, format);
	}

};

function _format(val, format) {
	var prefix, postfix;
	// position in val
	var j = 0;
	// format list (used in case of list of formats separated with ';', empty otherwise)
	var formatsList = [];

	var directiveProcessed = false;

	var f = new FormatObj('', '', {});

	_walkFormat(format, {
		literal: function(literal) {
			// set prefix or postfix value
			directiveProcessed ? f.postfix += literal : f.prefix += literal;
		},
		directive: function(beg, end) {
			// get directive part of the format
			var directive = format.substring(beg, end);

			// process directive
			f = _processDirective(directive, f);

			directiveProcessed = true;
		},
		listSeparator: function() {
			directiveProcessed = false;
			formatsList.push(f);
			f = new FormatObj('', '', {});
			prefix = '';
			postfix = '';
		}
	});

	var flen = formatsList.length;
	switch (flen) {
		case 1:
			return _formatNumber(val, formatsList[0]);
			break;
		case 2:
		case 3:
			if (val === 0) return _formatZero(formatsList[2]);
			else return val < 0 ? _formatNumber(val.toString().substring(1), formatsList[1]) : _formatNumber(val, formatsList[0]);
			break;
		default:
			throw new Error(flen === 0 ? locale.text("numberFormat.noFormat") : locale.text("numberFormat.manyFormat"));
	}
}

function _formatZero(fObj) {
	return fObj.prefix;
}

function _formatNumber(num, fObj) {
	var res = '';

	// locale separators
	var gs = locale.getNumberGroupSeparator();
	var ds = locale.getNumberDecimalSeparator();

	var directive = fObj.properties.directive;

	// special case for percentages
	num = fObj.properties.hasPercent ? num * 100 : num;
	num = fObj.properties.hasPermil ? num * 1000 : num;

	// == decimal ==
	if (fObj.properties.hasDecimalSeparator) {
		var decimalPart = '';
		var maxAfter = fObj.properties.maxAfter;
		var decimalFormat = directive.substr(directive.indexOf('.') + 1, maxAfter);
		var decimalValue = num % 1;
		var decimalString = '' + decimalValue.toFixed(maxAfter);
		decimalString = decimalString.substring(decimalString.indexOf('.') + 1);
		for (var i = 0; i < maxAfter; i++) {
			var f = decimalFormat.charAt(i);
			var n = decimalString.charAt(i);
			if (f === '0') {
				decimalPart += n;
			} else if (f === '#' && n !== '0') {
				decimalPart += n;
			} else if (f === '#' && n === '0') { // end loop if only '0' left in decimalString
				var notParsed = decimalString.substring(i);
				if (notParsed.match('[1-9]')) decimalPart += n;
				else break;
			}
		}
		res = decimalPart ? ds + decimalPart : res; // in case of integer value, decimalPart --> ''
	} else {
		// it is possible to have decimal number and format not containing decimal separator
		num = Math.round(num);
	}

	// == integer ==
	var intPart = num < 0 ? '' + Math.ceil(num) : '' + Math.floor(num);
	intPart = intPart.replace(/[^\d]+/g, '');
	var intFormat = directive.indexOf('.') === -1 ? directive : directive.substring(0, directive.indexOf('.'));
	// padding if necessary
	if (intPart.length < fObj.properties.mandatoryBefore) {
		var missing = fObj.properties.mandatoryBefore - intPart.length;
		var toAdd = '';
		for (var i = 0; i < missing; i++) {
			toAdd += '0';
		}
		intPart = toAdd + intPart;
	}
	// adding group separator if needed
	if (fObj.properties.hasGroupSeparator) {
		if (fObj.properties.groupSize < intPart.length) {
			intPart = _addSeparator(intPart, gs, fObj.properties.groupSize);
		}
	}

	// in case of no mandatory digit before decimal separator, no character for int part
	intPart = (parseInt(intPart, 10) === 0 && fObj.properties.mandatoryBefore === 0) ? '' : intPart;

	intPart = intPart && num < 0 ? '-' + intPart : intPart;
	res = intPart + res;

	// == specific cases ==
	// sign format
	res = fObj.properties.hasSignFormat && num > 0 ? '+' + res : res;

	// percent and/or permil
	res += fObj.properties.hasPercent ? "%" : '';
	res += fObj.properties.hasPermil ? "‰" : '';

	return fObj.prefix + res + fObj.postfix;
}

//======================
//	Parsing functions
//======================

// * @param {Object} fn	Function called if number returned doesn't match with the integer type (only use)
// exports.parse = function(str, format, fn){
/**
 * Get a number from a formatted number string value
 * @param {Object} str	Formatted number
 * @param {Object} format	Format supposedly used
 * @return {Object}	Returns a number (integer : floor(number), decimal : BigDecimal, real : number)
 */
exports.parse = function(str, format) {
	if (!str) return 0;
	//throw new Error("number string is null");

	if (format == null) {
		return parseFloat(str);
	} else {
		return _parse(str, format);
	}
};

function _parse(str, format) {
	//format = /[0-9-+,.#eE%‰;()\s]/g.exec();
	var prefix, postfix;

	// position in str
	var j = 0;

	// format list (used in case of list of formats separated with ';', empty otherwise)
	var formatsList = [];

	var directiveProcessed = false;

	var f = new FormatObj('', '', {});

	_walkFormat(format, {
		literal: function(literal) {
			// set prefix or postfix value
			directiveProcessed ? f.postfix += literal : f.prefix += literal;
		},
		directive: function(beg, end) {
			// get directive part of the format
			var directive = format.substring(beg, end);

			// process directive
			f = _processDirective(directive, f);

			directiveProcessed = true;
		},
		listSeparator: function() {
			directiveProcessed = false;
			formatsList.push(f);
			f = new FormatObj('', '', {});
			prefix = '';
			postfix = '';
		}
	});

	return _parseFormats(str, formatsList);
}

function _parseFormats(str, formatsList, negative) {
	var flen = formatsList.length;
	var num;
	// locale separators
	var gs = locale.getNumberGroupSeparator();
	var ds = locale.getNumberDecimalSeparator();

	switch (flen) {
		case 1:
			var fObj = formatsList[0];
			var formatNumber = str;
			var integerPart, decimalPart;
			// extract prefix and postfix
			var prefix = fObj.prefix;
			var postfix = fObj.postfix;
			formatNumber = prefix ? formatNumber.substring(prefix.length) : formatNumber;
			formatNumber = postfix ? formatNumber.substring(0, formatNumber.length - postfix.length) : formatNumber;

			// splitting into integer and decimal parts
			var splitted = formatNumber.split(ds);
			// error : too many periods
			if (splitted.length > 2) throw new Error(locale.text("numberFormat.oneSep", formatNumber));
			// setting integer and decimal parts values
			integerPart = splitted[0] ? splitted[0].match(/[0-9]/g).join('') : '0';
			decimalPart = splitted.length > 1 ? splitted[1].match(/[0-9]/g).join('') : '';
			num = parseFloat(decimalPart ? integerPart + "." + decimalPart : integerPart);

			// == specific cases ==
			// negative value
			num = formatNumber.charAt(0) === '-' ? parseFloat('-' + num) : num;
			// percent or permil
			num = fObj.properties.hasPercent ? num / 100 : num;
			num = fObj.properties.hasPermil ? num / 1000 : num;
			// negative value set for list separator cases
			num = negative ? parseFloat('-' + num) : num;
			break;
		case 2:
		case 3:
			// valid characters in formatted number
			var validFormat = "1234567890" + ds + gs + "%‰-+"; // 'E' or 'e' are not supported yet
			var len = formatsList.length;
			var slen = str.length;

			for (var i = 0; i < len; i++) {
				var f = formatsList[i];
				var prefix = f.prefix;
				var postfix = f.postfix;

				var prefixDefined = prefix ? true : false;
				var postfixDefined = postfix ? true : false;

				var pre, post;

				pre = prefixDefined ? str.substring(0, prefix.length) : '';
				post = postfixDefined ? str.substring(slen - postfix.length) : '';

				if (((prefixDefined && !postfixDefined) && pre.indexOf(prefix) > -1) || ((prefixDefined && postfixDefined) && (pre.indexOf(prefix) > -1 && post.indexOf(postfix) > -1)) || ((!prefixDefined && postfixDefined) && post.indexOf(postfix) > -1) || ((!prefixDefined && !postfixDefined) && (validFormat.indexOf(str.charAt(0)) > -1 && validFormat.indexOf(str.charAt(slen - 1)) > -1))) {
					break;
				}
			}
			var flist = [];
			flist.push(formatsList[i]);
			switch (i) {
				case 0:
					num = _parseFormats(str, flist);
					break;
				case 1:
					num = _parseFormats(str, flist, true);
					break;
				case 2:
					num = 0;
					break;
				default:
					throw new Error(locale.text("numberFormat.cannotParse"));
			}
			break;
		default:
			throw new Error(flen === 0 ? locale.text("numberFormat.noFormat") : locale.text("numberFormat.manyFormats"));
	}
	return num;
}
});

define('syracuse-tablet/html/js/helpers/formatApi',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/locale','syracuse-tablet/html/js/helpers/types/date','syracuse-tablet/html/js/helpers/types/datetime','syracuse-tablet/html/js/helpers/types/time','syracuse-tablet/html/js/helpers/types/numberFormat'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var date = require('syracuse-tablet/html/js/helpers/types/date');
var datetime = require('syracuse-tablet/html/js/helpers/types/datetime');
var time = require('syracuse-tablet/html/js/helpers/types/time');
var numberFormat = require('syracuse-tablet/html/js/helpers/types/numberFormat');

var _cache = {};
var _cacheLocaleHash;

exports.getFormatter = function($type, $format) {
	var ctor = _formatters[$type];
	if (!ctor) {
		return null;
	}
	var curLocaleHash = locale.getCurrentLocaleHash();
	if (curLocaleHash !== _cacheLocaleHash) {
		_cacheLocaleHash = curLocaleHash;
		_cache = {};
	}
	var cache = _cache[$type];
	if (!cache) cache = _cache[$type] = {};
	var key = $format || "noformat";
	var fmt = cache[key];
	if (fmt) return fmt;
	fmt = new ctor($type, $format);
	cache[key] = fmt;
	return fmt;
};

var Formatter = utils.defineClass(function($type, $format) {
	this.$format = $format;
	this.$type = $type;
}, null, {

	_isEmpty: function(value) {
		if (value == null)
			return true;
		value = "" + value;
		value = value.trim();
		if (value === "")
			return true;
		return false;
	},

	/*
	 * Format a value for displaying
	 * This will be used on read only fields to format the internal value to a human readable localized pattern.
	 * Also, this will be used to format values in editable fields BEFORE putting the focus into the field for editing
	 *
	 */
	formatValue: function(value) {
		return value;
	},

	/*
	 * Format a value for editing it
	 *
	 * This will be used to format values in editable fields AFTER putting the focus into the field for editing.
	 *
	 * Example, in case of dates:
	 * A field displays "April, 1. 2014"
	 * Once the focus is put into the field, it will render the value as "01.04.2014" since it's easier to edit
	 */
	formatValueEdit: function(value) {
		return value;
	},

	/* 
	 * Parse any kind of input string to the internal representation
	 */
	parseValue: function(value, errors) {
		errors.push("No parser for this type, return this dummy error to not override value by null");
	},

	getFormat: function() {
		return this.format;
	}
});

var DateFormatter = utils.defineClass(function($type, $format) {
	Formatter.call(this, $type, $format);
	this.format = locale.getDateFormat();
	this.twoDigitYearSwitch = 40;
}, Formatter, {
	_isEmpty: function(value) {
		if (value == null)
			return true;
		value = "" + value;
		value = value.trim();
		if (value === "")
			return true;

		if (value === "0000-00-00")
			return true;

		return false;
	},

	_checkShortYear: function(year) {
		if (year.year) {
			// Date object
			var y = year.year;
			if (y < 100) {
				year.add({
					years: y < this.twoDigitYearSwitch ? 2000 : 1900
				});
			}
		} else {
			// Number
			year = year > 99 ? year : (year < this.twoDigitYearSwitch ? 2000 + year : 1900 + year);
		}
		return year;
	},

	/**
	 * value expected to be a date string like "2014-08-19"
	 */
	formatValue: function(value) {
		if (this._isEmpty(value)) {
			return "";
		}

		var p = value.split(/[^\d]+/);
		var format;
		if (p.length >= 3) {
			p[0] = this._checkShortYear(+p[0]);
			var d = date.make(+p[0], +p[1], +p[2]);
			format = d.toString(this.format);
		} else {
			format = value;
		}
		return format;
	},
	parseValue: function(value, errors) {
		var fmt;
		if (this._isEmpty(value)) {
			return "";
		}
		try {
			fmt = date.parse(value, this.format);
			fmt = this._checkShortYear(fmt);
		} catch (e) {
			errors.push(locale.text("field.invalidInput", [this.format]));
			return value;
		}
		return fmt.toString("yyyy-MM-dd");
	}
});

var DateTimeFormatter = utils.defineClass(function($type, $format) {
	DateFormatter.call(this, $type, $format);
	this.format = locale.getDateTimeFormat();
}, DateFormatter, {
	_isEmpty: function(value) {
		if (value == null)
			return true;
		value = "" + value;
		value = value.trim();
		if (value === "")
			return true;

		if (value === "0000-00-00T00:00:00Z")
			return true;

		return false;
	},
	/**
	 * value expected to be a date string like "2010-10-13T13:25:03.424Z"
	 */
	formatValue: function(value) {
		if (this._isEmpty(value)) {
			return datetime.now().toString(this.format);
			//return "";
		}

		var p = value.split(/[^\d]+/);
		var format;
		if (p.length >= 6) {
			p[0] = this._checkShortYear(+p[0]);
			var d = datetime.make(+p[0], +p[1], +p[2], +p[3], +p[4], +p[5]);
			format = d.toString(this.format);
		} else {
			format = value;
		}
		return format;
	},
	parseValue: function(value, errors) {
		var fmt;
		if (this._isEmpty(value)) {
			return "";
		}

		try {
			fmt = datetime.parse(value, this.format);
			fmt = this._checkShortYear(fmt);
		} catch (e) {
			errors.push(locale.text("field.invalidInput", [this.format]));
			return value;
		}
		return fmt.toString("yyyy-MM-ddTHH:mm:ss.SSS") + "Z";
	}
});

var TimeFormatter = utils.defineClass(function($type, $format) {
	Formatter.call(this, $type, $format);
	if (this.$format === "TT") {
		this.format = locale.getTimeFormat();
	} else {
		this.format = locale.getTimeFormatShort();
	}
}, Formatter, {
	/**
	 * value expected to be a date string like "13:25:03"
	 */
	formatValue: function(value) {
		if (this._isEmpty(value)) {
			return "";
		}

		var p = value.split(/[^\d]+/);
		var format;
		if (p.length >= 2) {
			var t = time.make(+p[0], +p[1], +p[2]);
			format = t.toString(this.format);
		} else {
			format = value;
		}
		return format;
	},
	parseValue: function(value, errors) {
		if (this._isEmpty(value)) {
			return "";
		}
		var p = value.split(/[^\d]+/);
		if (p.length >= 1) {
			var t = time.make(+p[0], +p[1], +p[2]);
			return t.toString("HH:mm:ss");
		}
	}
});

var NumberFormatter = utils.defineClass(function($type, $format) {
	Formatter.call(this, $type, $format);
	this.format = this.$format || locale.getNumberFormat(this.$type);
}, Formatter, {
	/*
	 * value to be expected to be a number
	 */
	formatValue: function(value) {
		if (this._isEmpty(value)) {
			return "";
		}
		var format = numberFormat.format(value, this.format);
		return format;
	},
	parseValue: function(value, errors) {
		if (this._isEmpty(value)) {
			return "";
		}
		try {
			var fmt = numberFormat.parse(value, this.format);
		} catch (e) {
			errors.push(locale.text("field.invalidInput", [this.format]));
			return value;

		}
		return fmt;
	}
});

var _formatters = {
	"application/x-integer": NumberFormatter,
	"application/x-decimal": NumberFormatter,
	"application/x-real": NumberFormatter,

	"application/x-date": DateFormatter,
	"application/x-time": TimeFormatter,
	"application/x-datetime": DateTimeFormatter
};
});

define('syracuse-tablet/html/js/controls/validator',['require','exports','module','syracuse-tablet/html/js/helpers/locale'],function (require, exports, module) {

var locale = require('syracuse-tablet/html/js/helpers/locale');

/*
 *
 * Collection of all SData contraints and a validation function per constraint
 *
 */

var _validator = {
	validate: function(ctrl, value, errors, constraints) {
		var proto = ctrl.prototype;
		var ok = true;
		for (var i = 0; i < constraints.length; i++) {
			var c = constraints[i];
			var prop = proto && proto.data(c);
			if (prop != null) { // constraint set in prototype
				var fn = _validator[c];
				if (fn) {
					ok = fn(value, errors, prop) && ok;
				} else {
					errors.push(locale.text("field.unknownConstraint", [c]));
					ok = false;
				}
			}
		}
		return ok;
	},

	// General
	$isMandatory: function(value, errors, constraint) {
		if (constraint && value == null || value == "") {
			errors.push(locale.text("field.valMand"));
			return false;
		}
	},

	// Strings
	$pattern: function(value, errors, constraint) {
		var self = this;
		if (value && constraint) {
			var re = new RegExp(constraint);
			if (!re.test(value)) {
				errors.push(locale.text("field.patternError", [constraint]));
				return false;
			}
		}
		return true;
	},

	// Numeric
	$minimum: function(value, errors, constraint) {
		var self = this;
		if (value != null && value < constraint) {
			errors.push(locale.text("field.minimum", [constraint]));
			return false;
		}
		return true;
	},
	$maximum: function(value, errors, constraint) {
		var self = this;
		if (value != null && value > constraint) {
			errors.push(locale.text("field.maximum", [constraint]));
			return false;
		}
		return true;
	},
	$exclusiveMinimum: function(value, errors, constraint) {
		var self = this;
		if (value != null && value <= constraint) {
			errors.push(locale.text("field.exclusiveMinimum", [constraint]));
			return false;
		}
		return true;
	},
	$exclusiveMaximum: function(value, errors, constraint) {
		var self = this;
		if (value != null && value >= constraint) {
			errors.push(locale.text("field.exclusiveMaximum", [constraint]));
			return false;
		}
		return true;
	},
	$minLength: function(value, errors, constraint) {
		var self = this;
		if (!value || value.length < constraint) {
			errors.push(locale.text("field.minLength", [constraint]));
			return false;
		}
		return true;
	},
	$maxLength: function(value, errors, constraint) {
		var self = this;
		if (value && value.length > constraint) {
			errors.push(locale.text("field.maxLength", [constraint]));
			return false;
		}
		return true;
	},
	$precision: function(value, errors, constraint) {
		var self = this;
		if (value) {
			var txt = ("" + value).split(".").join("");
			if (txt.length > constraint) {
				errors.push(locale.text("field.precision", [constraint]));
				return false;
			}
		}
		return true;
	},
	$scale: function(value, errors, constraint) {
		var self = this;
		if (value) {
			var txt = ("" + value).split(".");
			txt = txt && txt[1] || "";
			if (txt.length > constraint) {
				errors.push(locale.text("field.scale", [constraint]));
				return false;
			}
		}
		return true;
	}

};

exports.Validator = _validator;
});

define('syracuse-tablet/html/js/controls/field/ctrlFieldBase',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/ctrlBase','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/helpers/formatApi','syracuse-tablet/html/js/controls/validator','syracuse-tablet/html/js/authoring/authoringProperties','syracuse-tablet/html/js/helpers/locale'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');

var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var validator = require('syracuse-tablet/html/js/controls/validator').Validator;

var authorProp = require('syracuse-tablet/html/js/authoring/authoringProperties').properties;
var locale = require('syracuse-tablet/html/js/helpers/locale');

/**
 * Base class for controls that display exactly one value/property
 */
var _Klass = utils.defineClass(

	function CtrlFieldBase(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
		self.formatter = self.initFormatter();
		// css to add to fieldSlot elmt
		self.cssType = null;
	}, Base, {

		initFormatter: function() {
			return formatApi.getFormatter(this.$type, this.prototype.data('$format'));
		},
		/**
		 * Init the properties to allow reuse of this control
		 */
		initReuseProperties: function() {
			Base.prototype.initReuseProperties.call(this);
			this.domInput = null;
			this.$$message = null;
		},
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			self.formatter = null;
		},
		/**
		 */
		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			var classes = ["s-m-field"];
			// add the type of field if needed for css selector
			if (self.cssType) classes.push(self.cssType);
			if (self.getAuthoring("$value.$valueFirst", false)) classes.push("s-m-valueFirst");
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions, classes);
			var fieldSlot = self.$$elmt.get(0);
			self.buildFieldTitle(fieldSlot, buildOptions);
			self.buildFieldValue(fieldSlot, buildOptions);

			// authoring
			this._applyLabelAuthoring();
			this._applyThemeAuthoring();
		},
		/*
		 * Apply theme authoring:
		 * - different theme values come from authorProp (a, b, c, ...)
		 */
		_applyThemeAuthoring: function() {
			var self = this;
			var $theme = self.getAuthoring("$theme");
			if ($theme) {
				var themes = authorProp.theme.values.map(function(val, index, obj) {
					return val.value;
				});
				$.each(themes, function(index, $theme) {
					self.$$elmt.toggleClass("s-m-control-" + $theme, false);
				});
				self.$$elmt.toggleClass("s-m-control-" + $theme);
			}
		},
		/*
		 * Apply authoring properties related to the label:
		 * - labelPosition which can have values top,right,bottom,left
		 * - labelAlign which can have values left, right
		 */
		_applyLabelAuthoring: function() {
			var self = this;

			// set label position
			var $labelPosition = self.getAuthoring("$labelPosition");
			if ($labelPosition) {
				self.setLabelPosition($labelPosition);
			}

			// set label alignment
			var $labelAlign = self.getAuthoring("$labelAlign");
			if ($labelAlign) {
				self.setLabelAlign($labelAlign);
			}
		},
		/*
		 *	Set field label position (left, top)
		 */
		setLabelPosition: function($lp) {
			if ($lp) {
				var self = this;
				var $$title = self.$$elmt.find("div.s-m-title");
				var $$value = self.$$elmt.find("div.s-m-value");
				var arr;
				switch ($lp) {
					case "top":
						arr = [$$title, $$value];
						$.each(arr, function(index, $$ee) {
							$$ee.css("float", "none").css("width", "inherit");
						});
						break;
						// default "left"
					default:
						$$title.css("float", "left").css("width", "30%");
						break;
				}
			}
		},
		/*
		 *	Set field label alignment (right,center,left)
		 */
		setLabelAlign: function($la) {
			var self = this;
			var $$title = self.$$elmt.find("div.s-m-title");
			$$title.css("text-align", $la || "inherit");
		},
		afterRender: function() {
			// Apply meta after build html
			this.applyMetaData(this.getMetaData());
		},
		/**
		 * Create the main input field that is bind to blur event and other event
		 * s-m-meta indicates the element to which meta will be applied in edit mode
		 * self.domInput contains the dom element used by event hanlders
		 */
		createMainInput: function(parent, value, type) {
			var self = this;
			type = type || "text";
			var css = ["s-m-meta"];
			var attrs = {
				"type": type
			};
			if ("text" === type) {
				css.push("form-control");
				css.push("ctrl-evt-blur");
				attrs.value = value;
			} else if ("checkbox" === type) {
				css.push("ctrl-evt-click");
			}
			self.domInput = uiUtils.createDomElement("input", css, null, attrs, parent);
			if ("checkbox" === type) self.domInput.checked = value;
			return self.domInput;
		},
		/**
		 * Displays title under fieldSlot ($$elmt)
		 */
		buildFieldTitle: function(fieldSlot, buildOptions) {
			var self = this;
			// don't build field title if grid cell
			if (self.getAuthoring("$isTitleHidden") !== true && buildOptions.isTableCell !== true) {
				var ttl = (self.getTitle() || "").trim();
				if (ttl.length > 0) {
					if (self.getMetaData("$isMandatory") === true) ttl += "*";
					return uiUtils.createDomElement("div", ["s-m-title"], ttl, null, fieldSlot);
				}
			}
			return null;
		},

		/**
		 * Just create the value slot under fieldSlot ($$elmt)
		 * Child class has to add the value
		 */
		buildFieldValue: function(fieldSlot, buildOptions) {
			return uiUtils.createDomElement("div", ["s-m-value"], null, null, fieldSlot);
		},

		/**
		 * Add a text value to the valueSlot
		 * USed by default to display value with $details facet
		 */
		appendTextValue: function(valueSlot, value) {
			if (valueSlot == null || value == null) return;
			if (typeof value !== "string") value = value.toString ? value.toString() : "??Can't display??";
			value = value.trim();
			if (value.length > 0) uiUtils.appendTextNode(valueSlot, value);
		},

		/*
		 * value: value inputed into the field as string
		 * errors: array where to add validation errors as strings
		 * return true if ok
		 */
		validateValue: function(value, errors) {
			return validator.validate(this, value, errors, ["$isMandatory"]);
		},

		/*
		 * value: value inputed into the field as string
		 * errors: array where to add parsing errors as strings
		 *
		 * return: Parsed value as represented in sdata data
		 * E.g. "2014-12-31" for dates or 123 for numbers
		 */
		parseValue: function(value, errors) {
			if (!this.formatter) {
				return value;
			}
			return this.formatter.parseValue(value, errors);
		},
		showInputErrors: function(errors) {
			var self = this;
			if (!self.$$message) {
				self.$$message = $('<span class="s-m-error"/>').appendTo(self.$$elmt);
			}
			self.$$message.empty();
			if (errors) {
				errors.forEach(function(error) {
					self.$$message.append($("<p>").text(error));
				});
			}
		},
		clearInputErrors: function() {
			this.showInputErrors(null);
		},

		/*
		 * Get value as string to be displayed in control (ev. formatted specific to locale)
		 */
		getFormattedValue: function(value) {
			if (!this.formatter) {
				return value || "";
			}
			return this.formatter.formatValue(value);
		},
		/*
		 * Set internal value (controller) and visible formatted value (UI) by applying formatting if needed
		 * value parameter must be a correct datatype value without UI specific formatting
		 */
		setFieldValue: function(value) {
			var self = this;
			self.setDisplayValue(self.getFormattedValue(value));
			self.setValue(value);
		},
		onBlur: function() {
			var self = this;
			if (!self.domInput) return;
			var value = self.domInput.value;
			var errors = [];

			value = self.parseValue(value, errors);
			if (errors.length > 0) {
				self.showInputErrors(errors);
				return;
			}

			// Set displayed value, also it may violate constraints later
			// This is because a parseable value is reformatted here to emiminate wrong characters
			// Internat value remains unchanged until all constraints are met
			self.setDisplayValue(self.getFormattedValue(value));

			self.validateValue(value, errors);
			if (errors.length > 0) {
				self.showInputErrors(errors);
			} else {
				self.clearInputErrors();
				self.setValue(value);
			}
		},
		/**
		 * Change visible value (UI only)
		 * value parameter must be formatted already!
		 */
		setDisplayValue: function(value) {
			if (this.domInput) {
				this.domInput.value = value;
			}
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/field/ctrlAlphanum',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/field/ctrlFieldBase','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/controls/validator'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var validator = require('syracuse-tablet/html/js/controls/validator').Validator;

var _AlphaNum = utils.defineClass(
	function CtrlAlphaNum(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
	}, Base, {

		validateValue: function(value, errors) {
			var self = this;
			var ok = Base.prototype.validateValue.call(self, value, errors);
			return ok && validator.validate(self, value, errors, ["$pattern", "$minLength", "$maxLength"]);
		},

		buildFieldValue: function(fieldSlot, buildOptions) {
			var self = this;
			var valueSlot = Base.prototype.buildFieldValue.call(self, fieldSlot, buildOptions);
			var value = self.getFormattedValue(self.getValue());
			if (self.$isEditMode) {
				self.createMainInput(valueSlot, value);
			} else {
				self.appendTextValue(valueSlot, value);
			}
		}

	});

var _PhoneField = utils.defineClass(

	function CtrlPhoneField(controller, article, prototype, options) {
		var self = this;
		_AlphaNum.call(self, controller, article, prototype, options);
		self.cssType = "s-m-phone";
	}, _AlphaNum, {

		buildFieldValue: function(fieldSlot, buildOptions) {
			var self = this;
			if (self.$isEditMode) {
				_AlphaNum.prototype.buildFieldValue.call(self, fieldSlot, buildOptions);
			} else {
				var value = self.getFormattedValue(self.getValue());
				var link = uiUtils.createDomElement("a", [], value, {
					"href": "phoneto:" + value
				});
				link.appendChild(uiUtils.createDomElement("span", ["badge", "pull-left"]));
				fieldSlot.appendChild(link);
			}
		}
	});


var _EmailField = utils.defineClass(

	function CtrlEmailField(controller, article, prototype, options) {
		var self = this;
		_AlphaNum.call(self, controller, article, prototype, options);
		self.cssType = "s-m-email";
	}, _AlphaNum, {

		buildFieldValue: function(fieldSlot, buildOptions) {
			var self = this;
			if (self.$isEditMode) {
				_AlphaNum.prototype.buildFieldValue.call(self, fieldSlot, buildOptions);
			} else {
				var value = self.getFormattedValue(self.getValue());
				var link = uiUtils.createDomElement("a", [], value, {
					"href": "mailto:" + value
				});
				link.appendChild(uiUtils.createDomElement("span", ["badge", "pull-left"]));
				fieldSlot.appendChild(link);
			}
		}
	});

exports.Klass = _AlphaNum;
exports.PhoneField = _PhoneField;
exports.EmailField = _EmailField;
});

define('syracuse-tablet/html/js/controls/field/ctrlProgress',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/controls/field/ctrlFieldBase'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;

var defaultValues = {
	$valueMin: 0,
	$valueMax: 100
};

var _Klass = utils.defineClass(

	function CtrlProgress(controller, article, prototype) {
		var self = this;
		Base.call(self, controller, article, prototype);
	}, Base, {
		buildFieldValue: function(fieldSlot, buildOptions) {
			var self = this;
			var valueSlot = Base.prototype.buildFieldValue.call(self, fieldSlot, buildOptions);
			// building progress bar layout based on bootstrap component
			var value = self.getValue();
			var progressContainer = uiUtils.createDomElement("div", ["progress"]);
			var progressBar = uiUtils.createDomElement("div", ["progress-bar"], value, {
				"role": "progressbar",
				"aria-valuenow": value,
				"aria-valuemin": self.article.$valueMin || defaultValues.$valueMin,
				"aria-valuemax": self.article.$valueMax || defaultValues.$valueMax,
				"style": "width:" + value + "%;"
			});
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/field/ctrlNumeric',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/field/ctrlFieldBase','syracuse-tablet/html/js/controls/validator','syracuse-tablet/html/js/helpers/locale'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var validator = require('syracuse-tablet/html/js/controls/validator').Validator;
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _Klass = utils.defineClass(

	function CtrlNumeric(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
	}, Base, {

		buildFieldValue: function(fieldSlot, buildOptions) {
			var self = this;
			var valueSlot = Base.prototype.buildFieldValue.call(self, fieldSlot, buildOptions);
			var value = self.getFormattedValue(self.getValue());
			if (self.$isEditMode) {
				self.createMainInput(valueSlot, value);
			} else {
				self.appendTextValue(valueSlot, value);
			}
		},

		parseValue: function(value, errors) {
			var self = this;
			if (self.formatter) {
				var format = self.formatter.getFormat();
				if (format) {
					var gs = locale.getNumberGroupSeparator();
					var ds = locale.getNumberDecimalSeparator();

					if (format.indexOf(",") < 0 && gs && gs.length > 0) {
						// Format with no GS, consider eventual GS as DS
						value = value.replace(new RegExp("\\" + gs, "g"), ds);
					}
					if (format.indexOf(",") > 0 && format.indexOf(".") > 0 && gs && gs.length > 0) {
						// Format with GS and DS, consider GS as DS if no DS entered
						if (value.indexOf(gs) > -1 && value.indexOf(ds) < 0) {
							value = value.replace(new RegExp(gs, "g"), ds);
						}
					}
				}
			}
			return Base.prototype.parseValue.call(self, value, errors);
		},

		validateValue: function(value, errors) {
			var self = this;
			var ok = Base.prototype.validateValue.call(self, value, errors);
			ok = validator.validate(self, value, errors, ["$minimum", "$maximum", "$exclusiveMinimum", "$exclusiveMaximum", "$precision"]) && ok;
			if (self.$type !== "application/x-integer") {
				ok = validator.validate(self, value, errors, ["$scale"]) && ok;
			}
			return ok;
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/field/ctrlQuantity',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/field/ctrlFieldBase','syracuse-tablet/html/js/helpers/formatApi','syracuse-tablet/html/js/controls/ctrlFactory'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');

var _Klass = utils.defineClass(

	/**
	 * options.isTableCell true/false
	 */
	function CtrlQuantity(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
		self.unitFieldInfo = prototype.getUnitFieldInfo();
		// Create extra control for UNIT in read only mode
		// !! if grid Cell we ca't create the control with createControl
		self.displayUnit = !options.isTableCell && self.unitFieldInfo && self.unitFieldInfo.unitFieldProto && !self.unitFieldInfo.unitFieldProto.data("$isExcluded");
		self.unitCtrl = null;
	}, Base, {

		initFormatter: function() {
			var valueProto = this.prototype.data('$value');
			return formatApi.getFormatter(valueProto.$type, valueProto.$format);
		},

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			if (self.unitCtrl) {
				self.unitCtrl.destroy();
				self.unitCtrl = null;
			}
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);
			(self.$$elmt).addClass("s-m-qty");
			if (self.displayUnit) {
				self.unitCtrl = ctrlFactory.createControl(self.controller, self, {
					"$bind": self.unitFieldInfo.unitBindName,
				}, self.unitFieldInfo.unitFieldProto, {
					isUnit: true
				});
				self.unitCtrl.buildHtml(self.$$elmt, controllerDao, buildOptions);
			}
		},

		buildFieldValue: function(fieldSlot, buildOptions) {
			var self = this;
			var valueSlot = Base.prototype.buildFieldValue.call(self, fieldSlot, buildOptions);
			var value = self.getFormattedValue(self.getValue());
			if (self.$isEditMode) {
				self.createMainInput(valueSlot, value);
			} else {
				self.appendTextValue(valueSlot, value);
			}
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/field/ctrlCheckBox',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/field/ctrlFieldBase','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/ui/fontUtils'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

var _Klass = utils.defineClass(

	function CtrlCheckbox(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
	}, Base, {
		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);
			// value before title in edit mode
			/*if (self.$isEditMode) {
				self.$$elmt.addClass("s-m-valuefirst");
			}*/
		},
		buildFieldValue: function(fieldSlot, buildOptions) {
			var self = this;
			var valueSlot = Base.prototype.buildFieldValue.call(self, fieldSlot, buildOptions);
			var val = self.getValue();
			// Nothing displayed if no values otherwise we see only the icon (empty array cards)
			if (val == null) return;
			val = val === true;
			if (self.$isEditMode) {
				self.createMainInput(valueSlot, val, "checkbox");
			} else {
				valueSlot.appendChild(uiUtils.createDomElement("span", fontUtils.checkBoxIcon(val)));
			}
		},
		onClick: function(evt) {
			var self = this;
			setTimeout(function() {
				self.domInput.checked = !self.domInput.checked;
				self.setValue(self.domInput.checked);
			}, 50);
		}

	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/field/ctrlCombo',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/controls/field/ctrlFieldBase'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;

var _Klass = utils.defineClass(

	function CtrlCombo(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
	}, Base, {
		/**
		 * Init the properties to allow reuse of this control
		 */
		initReuseProperties: function() {
			Base.prototype.initReuseProperties.call(this);
			this.radioItemList = null;
			this.choiceList = null;
		},
		buildFieldValue: function(fieldSlot, buildOptions) {
			var self = this;
			var valueSlot = Base.prototype.buildFieldValue.call(self, fieldSlot, buildOptions);
			self.choiceList = self.prototype.data("$value").$enum;
			if (self.$isEditMode) {
				var $format = self.prototype.data("$format");
				// if '$format' is set it can only have values '$combo' or '$radio'
				if ($format && ($format != '$radios' && $format != '$combo')) {
					throw new Error("Choice can only have formats '$radios' or '$combo'");
				}
				// ## set display in case of edit mode ##
				var value = self.currentValue = self.getValue();
				var domValue;
				if (self.choiceList.length > 0) {
					// display in case of '$radios' format
					if ($format == '$radios') {
						self.radioItemList = [];
						$.each(self.choiceList, function(index, choiceItem) {
							// building choice item display
							var choiceItemDom = uiUtils.createDomElement("div", ["s-m-field-radio-item"]);
							var inputDom = uiUtils.createDomElement("input", ["s-m-field-choice-radio", "ctrl-evt-click", "s-m-meta"], null, {
								"type": "radio",
								"value": index,
								"name": "s-m-radio-" + self.id
							});
							if (value && choiceItem.$value == value) {
								inputDom.setAttribute("checked", true);
							}
							var titleDom = uiUtils.createDomElement("div", ["s-m-field-choice-radio-title"], choiceItem.$title);

							// build radioItemList array
							self.radioItemList.push({
								"inputDom": inputDom,
								"titleDom": titleDom
							});
							// appending to parent layout
							valueSlot.appendChild(inputDom);
							valueSlot.appendChild(titleDom);
						});
					}
					// default format is '$combo'
					else {
						var selectDom = uiUtils.createDomElement("select", ["form-control ctrl-evt-change", "s-m-meta"]);
						// build list
						$.each(self.choiceList, function(index, choiceItem) {
							var parsedTitle = self.prototype.resolveExpression(choiceItem.$title);
							var optDom = uiUtils.createDomElement("option", null, parsedTitle, {
								"value": choiceItem.$value
							}, selectDom);
							if ((choiceItem.$value == value) || (!value && index == 0)) {
								optDom.setAttribute("selected", true);
							}
						});
						valueSlot.appendChild(selectDom);
					}
				}
			} else if (self.choiceList.length > 0) {
				self.appendTextValue(valueSlot, self._getChoiceTitle(value));
			}
		},
		_getChoiceTitle: function(value) {
			var self = this;
			var res;
			$.each(self.choiceList, function(index, choice) {
				res = choice.$value == value ? choice.$title : res;
				if (res) {
					return false;
				}
			});
			return res;
		},

		_getChoiceValue: function(title) {
			var self = this;
			var res;
			$.each(self.choiceList, function(index, choice) {
				res = choice.$title == title ? choice.$value : res;
				if (res) {
					return false;
				}
			});
			return res;
		},

		setDisplayValue: function(value, index, pickerText) {
			var self = this;
			if (self.$isEditMode) {
				// in case of radio choice
				if (self.prototype.data("$format") == '$radios') {
					// apply change if new value
					if (value != self.currentValue) {
						// update widget
						$.each(self.radioItemList, function(idx, radioItem) {
							setTimeout(function() {
								// if new choice index is defined
								if (index) {
									radioItem.inputDom.checked = index == idx;
								}
								// if new choice index is not defined
								else {
									radioItem.inputDom.checked = self.choiceList[idx].$value == value;
								}
							}, 5);
						});
					}
				}

			}
		},

		setFieldValue: function(value, index, pickerText) {
			var self = this;

			self.setDisplayValue(value, index, pickerText);

			self.currentValue = value;
			self.setValue(value);
		},

		onClick: function(evt) {
			var self = this;
			if (self.prototype.data("$format") == '$radios') {
				self.setFieldValue(self._getChoiceValue(evt.target.nextElementSibling.textContent), $(evt.target.parentNode).index());
			}
		},

		onChange: function(evt) {
			this.setFieldValue(evt.target.value, evt.target.selectedIndex, evt.target.options[evt.target.options.selectedIndex].textContent);
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/ui/datetimeSelectors/monthChoice',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/types/date'],function (require, exports, module) {
var utils = require('syracuse-tablet/html/js/helpers/utils');
var _dateApi = require('syracuse-tablet/html/js/helpers/types/date');

var _Klass = utils.defineClass(

	function() {

	}, null, {
		create: function(parentSlot, dateValue, handler) {
			this.parent = parentSlot;
			this.handler = handler;
			this.domItem = document.createElement("nav");
			this.domItem.className = "s-calendar-quick-list";
			this._dateValue = dateValue;
			var table = document.createElement("table");
			table.className = "s-calendar-month-choice";
			var tbody = document.createElement("tbody");
			for (var ii = 0; ii < 6; ii++) {
				var row = document.createElement("tr");
				row.appendChild(this.drawCell(ii + 1, _dateApi.monthName(ii + 1, true), this._dateValue.month));
				row.appendChild(this.drawCell(ii + 7, _dateApi.monthName(ii + 7, true), this._dateValue.month));
				tbody.appendChild(row);
			}
			table.appendChild(tbody);
			this.domItem.appendChild(table);
			this.parent.appendChild(this.domItem);
			this.bindEvents(true);
		},
		drawCell: function(value, text, selValue) {
			var td = document.createElement("td");
			td.className = "s-calendar-my-item";
			td.syraOnClick = "onMonthClick";
			td.syraValue = value;
			td.textContent = text;
			if (value == selValue) {
				td.className += " s-calendar-select";
				this.selectedCell = td;
			}
			return td;
		},
		toggle: function(show) {
			if (show) {
				this.domItem.style.display = "";
			} else {
				this.domItem.style.display = "none";
			}
		},
		onMonthClick: function(picker) {
			if (this.selectedCell) {
				this.selectedCell.className = "s-calendar-my-item";
			}
			(this.selectedCell = picker).className = "s-calendar-my-item s-calendar-select";
			this._selectedMonth = picker.syraValue;
			var month = this._selectedMonth ? this._selectedMonth : this._dateValue.month;
			this._currentDate = this._dateValue = _dateApi.fromJsDate(new Date(this._dateValue.year, month - 1, this._dateValue.day));
			this.handler.onEvent("onCalendarUpdate", this);
		},
		bindEvents: function(bind) {
			var self = this;
			if (bind) {
				$(self.domItem).delegate("td", "click", function(evt) {
					self.onClick(evt);
					evt.preventDefault();
					evt.stopPropagation();
				});
			} else {
				$(self.domItem).undelegate();
			}
		},
		onClick: function(evt) {
			var self = this;
			while (evt.target) {
				if (evt.target.syraOnClick) {
					this[evt.target.syraOnClick](evt.target, evt);
					return;
				} else {
					evt.target = evt.target.parentNode;
				}
			}
		},
		destroy: function() {
			this.bindEvents(false);
			this.domItem = this._dateValue = this.selectedCell = null;
		}
	});

exports.MonthChoice = _Klass;
});

define('syracuse-tablet/html/js/ui/datetimeSelectors/yearChoice',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/locale','syracuse-tablet/html/js/helpers/types/date'],function (require, exports, module) {
var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var _dateApi = require('syracuse-tablet/html/js/helpers/types/date');


var _Klass = utils.defineClass(

	function() {

	}, null, {
		create: function(parentSlot, dateValue, handler) {
			this.parent = parentSlot;
			this.domItem = document.createElement("nav");
			this.domItem.className = "s-calendar-quick-list";
			this.handler = handler;
			this._dateValue = dateValue;
			this._selectedYear = this._dateValue.year;
			var table = document.createElement("table");
			table.className = "s-calendar-year-choice";
			var tbody = document.createElement("tbody");
			this.rows = [];
			for (var ii = 0; ii < 6; ii++) {
				var row = document.createElement("tr");
				if (ii == 0) {
					this.addPrevNextCell(row, true);
					this.addPrevNextCell(row, false);
				} else {
					var cuYear = this._dateValue.year + ii - 4;
					row.appendChild(this.drawCell(cuYear, cuYear));
					row.appendChild(this.drawCell(cuYear + 5, cuYear + 5));
				}
				tbody.appendChild(row);
				this.rows.push(row);
			}
			table.appendChild(tbody);
			this.domItem.appendChild(table);
			this.parent.appendChild(this.domItem);
			this.bindEvents(true);
		},
		addPrevNextCell: function(row, isPrev) {
			var td = document.createElement("td");
			td.className = "s-calendar-my-link-cell";
			var link = document.createElement("a");
			link.className = (link.syraIsPrev = isPrev) ? "s-calendar-prev-year" : "s-calendar-next-year";
			link.textContent = (link.syraIsPrev = isPrev) ? locale.text("date.month.label.prev") : locale.text("date.month.label.next");
			link.syraOnClick = "onChangeYear";
			td.appendChild(link);
			row.appendChild(td);
		},
		drawCell: function(value, text) {
			var td = document.createElement("td");
			td.className = "s-calendar-my-item";
			td.syraOnClick = "onSelectYear";
			td.syraValue = value;
			td.textContent = text;
			if (value == this._selectedYear) {
				td.className += " s-calendar-select";
				this.selectedCell = td;
			}
			return td;
		},
		toggle: function(show) {
			if (show) {
				this.domItem.style.display = "";
			} else {
				this.domItem.style.display = "none";
			}
		},
		_refreshYearCell: function(td, step) {
			td.syraValue += step;
			td.textContent = td.syraValue;
			if (td.syraValue == this._selectedYear) {
				td.className += " s-calendar-select";
				this.selectedCell = td;
			}
		},
		onChangeYear: function(picker) {
			var step = picker.syraIsPrev ? (-10) : 10;
			for (var ii = 1, jj = this.rows.length; ii < jj; ii++) {
				var nodes = this.rows[ii].childNodes;
				this._refreshYearCell(nodes[0], step);
				this._refreshYearCell(nodes[1], step);
			}
		},
		onSelectYear: function(picker) {
			if (this.selectedCell) {
				this.selectedCell.className = "s-calendar-my-item";
			}(this.selectedCell = picker).className = "s-calendar-my-item s-calendar-select";
			this._selectedYear = picker.syraValue;
			var year = this._selectedYear ? this._selectedYear : this._dateValue.year;
			this._currentDate = this._dateValue = _dateApi.fromJsDate(new Date(year, this._dateValue.month, this._dateValue.day));
			this.handler.onEvent("onCalendarUpdate", this);
		},
		bindEvents: function(bind) {
			var self = this;
			if (bind) {
				$(self.domItem).delegate("td", "click", function(evt) {
					self.onClick(evt);
					evt.preventDefault();
					evt.stopPropagation();
				});
			} else {
				$(self.domItem).undelegate();
			}
		},
		onClick: function(evt) {
			var self = this;
			while (evt.target) {
				if (evt.target.syraOnClick) {
					this[evt.target.syraOnClick](evt.target, evt);
					return;
				} else {
					evt.target = evt.target.parentNode;
				}
			}
		},
		destroy: function() {
			this.bindEvents(false);
			//this.parent.removeChild(this.domItem);
			this.rows = this.domItem = this._dateValue = this.selectedCell = null;
		}
	});

exports.YearChoice = _Klass;
});

define('syracuse-tablet/html/js/ui/datetimeSelectors/dateSelector',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/helpers/locale','syracuse-tablet/html/js/helpers/types/date','syracuse-tablet/html/js/ui/datetimeSelectors/monthChoice','syracuse-tablet/html/js/ui/datetimeSelectors/yearChoice'],function (require, exports, module) {
var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var _dateApi = require('syracuse-tablet/html/js/helpers/types/date');
var MonthChoice = require('syracuse-tablet/html/js/ui/datetimeSelectors/monthChoice').MonthChoice;
var YearChoice = require('syracuse-tablet/html/js/ui/datetimeSelectors/yearChoice').YearChoice;

var _Klass = utils.defineClass(

	function() {

	}, null, {
		onClick: function(evt) {
			var self = this,
				close;
			while (evt.target && evt.target != self.handler.parentSlot) {
				if (evt.target.getAttribute("data-s-syraOnClick")) {
					close = this[evt.target.getAttribute("data-s-syraOnClick")](evt.target, evt);
					if (close) {
						this.handler.closeContainer();
					}
					return;
				} else {
					evt.target = evt.target.parentNode;
				}
			}
		},
		onTodayClick: function() {
			this._currentDate = _dateApi.today();
			this.field.setFieldValue(_dateApi.fromInternalValue(this._currentDate._value).toString());
			return true;
		},
		onDayClick: function(picker) {
			this.field.setFieldValue(_dateApi.fromInternalValue(picker.getAttribute("data-s-syraValue")).toString());
			return true;
		},
		onChangePeriode: function(picker) {
			if (picker.getAttribute("data-s-syraPeriod") == "month") {
				this._currentDate = this._currentDate.addMonths(picker.getAttribute("data-s-syraIsPrev") ? -1 : 1);
			} else if (picker.getAttribute("data-s-syraPeriod") == "year") {
				this._currentDate = this._currentDate.addYears(picker.getAttribute("data-s-syraIsPrev") ? -1 : 1);
			} else {
				this._currentDate = this._currentDate.addDays(picker.getAttribute("data-s-syraIsPrev") ? -7 : 7);
			}
			this.handler.onEvent("onCalendarUpdate", this);
		},
		onMonthClick: function() {
			this.handler.onEvent("onMonthClick", this);
		},
		onYearClick: function() {
			this.handler.onEvent("onYearClick", this);
		},
		getValueForSelector: function(field) {
			return field.getValue() && field.getValue().slice(0, 10);
		},
		create: function(field, handler) {
			this.domItem = document.createElement("div");
			this.domItem.className = "s-calendar";

			var value = this.getValueForSelector(field) || "";

			this._selectedDate = value ? _dateApi.parse(value) : _dateApi.today();
			this._selectedDate = this._selectedDate._value == 0 ? _dateApi.today() : this._selectedDate;
			this._currentDate = handler._currentDate || _dateApi.fromInternalValue(this._selectedDate._value);

			this.field = field;
			this.handler = handler;

			this._table = document.createElement("table");
			this._table.setAttribute("cellspacing", 0);
			this._table.className = "s-calendar-content";
			this._table.appendChild(this._appendHead());
			this._table.appendChild(this.body = document.createElement("tbody"));
			this._table.appendChild(this._appendFoot());
			this.domItem.appendChild(this._table);

			this._drawBody();

			return this.domItem;
		},
		_appendHead: function() {
			var head = document.createElement("thead");
			var row = document.createElement("tr");
			var cell = document.createElement("th");
			cell.setAttribute("colspan", 8);
			cell.className = "s-calendar-month-year";

			var slot = document.createElement("div");
			slot.className = "s-calendar-month-year-slot";
			cell.appendChild(slot);

			// prev year link
			var link = document.createElement("a");
			link.setAttribute("data-s-syraOnClick", "onChangePeriode");
			link.setAttribute("data-s-syraIsPrev", true);
			link.setAttribute("data-s-syraPeriod", "year");
			link.className = "s-calendar-prev s-calendar-prev-year glyphicon glyphicon-fast-backward";
			slot.appendChild(link);

			// prev month link
			link = document.createElement("a");
			link.setAttribute("data-s-syraOnClick", "onChangePeriode");
			link.setAttribute("data-s-syraIsPrev", true);
			link.setAttribute("data-s-syraPeriod", "month");
			link.className = "s-calendar-prev s-calendar-prev-month glyphicon glyphicon-step-backward";
			slot.appendChild(link);

			this._monthLink = document.createElement("a");
			this._monthLink.className = "s-month s-calendar-month-year-link";
			slot.appendChild(this._monthLink).setAttribute("data-s-syraOnClick", "onMonthClick");

			this._yearLink = document.createElement("a");
			this._yearLink.className = "s-year s-calendar-month-year-link";
			slot.appendChild(this._yearLink).setAttribute("data-s-syraOnClick", "onYearClick");

			// next month link
			link = document.createElement("a");
			link.setAttribute("data-s-syraOnClick", "onChangePeriode");
			link.setAttribute("data-s-syraPeriod", "month");
			link.className = "s-calendar-next s-calendar-next-month glyphicon glyphicon-step-forward";
			slot.appendChild(link);

			// next year link
			link = document.createElement("a");
			link.setAttribute("data-s-syraOnClick", "onChangePeriode");
			link.setAttribute("data-s-syraPeriod", "year");
			link.className = "s-calendar-next s-calendar-next-year glyphicon glyphicon-fast-forward";
			slot.appendChild(link);

			row.appendChild(cell);
			head.appendChild(row);

			row = document.createElement("tr");
			var cell = document.createElement("th");
			cell.className = "s-calendar-week-day";
			row.appendChild(cell);

			var days = [1, 2, 3, 4, 5, 6, 0];
			for (var ii = 0, jj = days.length; ii < jj; ii++) {
				var cell = document.createElement("th");
				cell.className = "s-calendar-week-day";
				cell.title = _dateApi.dayName(days[ii]);
				cell.textContent = _dateApi.dayName(days[ii], true);
				row.appendChild(cell);
			}
			head.appendChild(row);
			return head;
		},
		_appendFoot: function() {
			var row = document.createElement("tr");
			var cell = document.createElement("td");
			cell.setAttribute("colspan", 3);
			cell.className = "s-calendar-foot-week";

			var link = document.createElement("a");
			link.setAttribute("data-s-syraOnClick", "onChangePeriode");
			link.setAttribute("data-s-syraPeriod", "week");
			link.className = "s-calendar-prev s-calendar-prev-week glyphicon glyphicon-chevron-left";
			link.setAttribute("data-s-syraIsPrev", true);
			cell.appendChild(link);

			var label = document.createElement("label");
			label.className = "s-calendar-foot-week-title";
			label.textContent = locale.text("date.label.week");
			cell.appendChild(label);

			this._weekNumber = document.createElement("label");
			this._weekNumber.className = "s-calendar-foot-week-title-num";
			cell.appendChild(this._weekNumber);

			link = document.createElement("a");
			link.setAttribute("data-s-syraOnClick", "onChangePeriode");
			link.setAttribute("data-s-syraPeriod", "week");
			link.className = "s-calendar-next s-calendar-next-week glyphicon glyphicon-chevron-right";
			cell.appendChild(link);
			row.appendChild(cell);

			cell = document.createElement("td");
			cell.setAttribute("colspan", 3);
			cell.className = "s-calendar-foot-today";
			link = document.createElement("a");
			link.className = "s-calendar-today-link";
			link.setAttribute("data-s-syraOnClick", "onTodayClick");

			link.textContent = locale.text("date.label.today");
			cell.appendChild(link);
			row.appendChild(cell);

			cell = document.createElement("td");
			cell.setAttribute("colspan", 2);

			row.appendChild(cell);

			var foot = document.createElement("tfoot");
			foot.appendChild(row);
			return foot;
		},
		_drawBody: function() {

			var curMonth = this._currentDate.month || 9;
			var month = _dateApi.monthName(curMonth);

			this._monthLink.textContent = month;
			this._yearLink.textContent = this._currentDate.year || 2014;

			uiUtils.empty(this.body);

			var curDate = _dateApi.fromInternalValue(this._currentDate._value);
			var begOfMonth = curDate = curDate.begOfMonth();
			curDate = curDate.begOfWeek(1);

			for (var weekRow = 0; weekRow < 6; weekRow++) {
				var row = document.createElement("tr");
				var weekDay = (weekRow == 0) ? begOfMonth : curDate;
				var cell = document.createElement("td");
				cell.className = "s-calendar-week-num";
				row.appendChild(cell);
				cell.textContent = weekDay.week;
				for (var day = 0; day < 7; day++) {
					var cell = document.createElement("td");
					cell.className = "s-calendar-day-link";
					cell.setAttribute("data-s-syraOnClick", "onDayClick");
					cell.setAttribute("data-s-syraValue", curDate._value);
					var link = document.createElement("a");
					link.textContent = curDate.day;
					if (curMonth != curDate.month) {
						cell.className += " s-calendar-other-month";
					}
					if (this._currentDate.equals(curDate)) {
						cell.className += " s-calendar-select";
						link.className = "s-calendar-select";
					}
					cell.appendChild(link);
					row.appendChild(cell);
					curDate = curDate.addDays(1);
				}
				this.body.appendChild(row);
			}
			this._weekNumber.textContent = this._currentDate.week;
		},
		bindEvents: function(bind) {
			var self = this;
			var parentSlot = self.handler.getParentSlot();
			if (bind) {
				$(parentSlot).delegate("td, a", "click", function(evt) {
					self.onClick(evt);
					evt.preventDefault();
					evt.stopPropagation();
				});
			} else {
				$(parentSlot).undelegate();

				// unbind monthchoice and yearchoice components if necessary
				if (self._month) {
					self._month.bindEvents(false);
				}
				if (self._year) {
					self._year.bindEvents(false);
				}
			}
		},
		destroy: function() {
			this.bindEvents(false);
			this._currentDate = this.field = this._currentDate = this.quickList = this._month = this._year = this._selectedDate = this._monthLink = this._yearLink = this._weekNumber = this._quick = this.body = this.domItem = null;
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/ui/datetimeSelectors/timeSelector',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/types/time','syracuse-tablet/html/js/helpers/locale'],function (require, exports, module) {
var utils = require('syracuse-tablet/html/js/helpers/utils');
var _timeApi = require('syracuse-tablet/html/js/helpers/types/time');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _Klass = utils.defineClass(

	function() {

	}, null, {
		onClick: function(evt) {
			var self = this,
				close;
			while (evt.target) {
				if (evt.target.getAttribute("data-s-syraOnClick")) {
					close = this[evt.target.getAttribute("data-s-syraOnClick")](evt.target, evt);
					if (close) {
						this.handler.closeContainer();
					}
					return;
				} else {
					evt.target = evt.target.parentNode;
				}
			}
		},
		setContainer: function($$modalElmt) {
			this.$$modalElmt = $$modalElmt;
		},
		create: function(field, handler, cb) {

			this.domItem = document.createElement("div");
			this.domItem.className = "s-time-choice";

			var options = options || {};
			this.columns = options.columns || 2;
			this.interval = options.interval || 60;

			this.field = field;
			this.handler = handler;
			this.cb = cb;

			this.curTime = _timeApi.now();

			var cellCount = (24 * 60) / this.interval;
			var rowCount = cellCount / this.columns;

			var table = document.createElement("table");
			table.className = "s-time-choice-table";
			table.setAttribute("cellspacing", "0");
			table.setAttribute("cellpadding", "0");

			var row, cell;
			var cellIndex = 0;
			var timeHour = _timeApi.parse("00:00:00");
			for (var rr = 0; rr < rowCount; rr++) {
				row = document.createElement("tr");
				for (var col = 0; col < this.columns; col++) {
					cell = document.createElement("td");
					cell.className = "s-time-choice-td";
					if (cellIndex < cellCount) {
						var link = document.createElement("a");
						link.className = "s-time-choice-a";
						link.setAttribute("data-s-syraOnClick", "onTimeClick");
						if (timeHour.hour == this.curTime.hour) {
							link.className += " s-time-select";
						}
						link.textContent = timeHour.toString(locale.getTimeFormat());
						cell.appendChild(link);
					}
					row.appendChild(cell);
					timeHour = timeHour.addMinutes(this.interval);
					cellIndex++;
				}
				table.appendChild(row);
			}
			this.domItem.appendChild(table);
			return this.domItem;
		},
		onTimeClick: function(picker) {
			var self = this;
			var fieldVal = _timeApi.parse(picker.textContent, locale.getTimeFormat()).toString();
			if (!this.cb) {
				self.field.setFieldValue(fieldVal);
				return true;
			} else {
				self.cb(fieldVal, self.handler);
			}
		},
		bindEvents: function(bind) {
			var self = this;
			var parentSlot = self.handler.getParentSlot();
			if (bind) {
				$(parentSlot).delegate("a", "click", function(evt) {
					self.onClick(evt);
					evt.preventDefault();
					evt.stopPropagation();
				});
			} else {
				$(parentSlot).undelegate();
			}
		},
		destroy: function() {
			this.bindEvents(false);
			this.domItem = this.field = this.selectedLink = null;
		}
	});
exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/ui/datetimeSelectors/selectorSwitchHandler',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/ui/datetimeSelectors/monthChoice','syracuse-tablet/html/js/ui/datetimeSelectors/yearChoice','syracuse-tablet/html/js/ui/datetimeSelectors/dateSelector','syracuse-tablet/html/js/ui/datetimeSelectors/timeSelector'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require("syracuse-tablet/html/js/ui/uiUtils");
var MonthChoice = require('syracuse-tablet/html/js/ui/datetimeSelectors/monthChoice').MonthChoice;
var YearChoice = require('syracuse-tablet/html/js/ui/datetimeSelectors/yearChoice').YearChoice;
var DateSelector = require('syracuse-tablet/html/js/ui/datetimeSelectors/dateSelector').Klass;
var TimeSelector = require('syracuse-tablet/html/js/ui/datetimeSelectors/timeSelector').Klass;

var _Klass = utils.defineClass(

	function(field) {
		this.field = field;
	}, null, {
		/**
		Triggers an action when the following events occurs :
		- onMonthClick : When user clicks on month selection link
		- onYearClick : When user clicks on year selection link
		- onOpenTime : In case of datetime field, when user has selected the date, time selector must be displayed afterwards
		- onCalendarUpdate : When user clicks on links that will reshape the calendar (change month, change year, change week, select month, select year)
		- onSelectTime : In case of datetime field, when user has selected the time, field must be set with appropriate date + time value

		@param	evt 		Triggered event in set as string
		@param	selector 	The selector object. Use to get value and for destroy action
		*/
		onEvent: function(evt, selector) {
			this[evt](selector);
		},

		/*
			Set the $$container of the date / time selectors which is likely to be the modal.
			It will make it easier to close it from within the library
			@param	$$container 	Jquery container object (the modal)
		*/
		setContainer: function($$container) {
			this.$$container = $$container;
		},

		/*
			Set parentSlot dom parameter. Useful to make some dom actions like emptying or appending.
			It is the modal body
			@param parentSlot Modal body.

		*/
		setParentSlot: function(parentSlot) {
			this.parentSlot = parentSlot;
		},


		/*
			Returns parentSlot dom parameter
		*/
		getParentSlot: function() {
			return this.parentSlot;
		},

		/*
			Triggered when user clicks on month selection link. It builds the month selector
			@param 	selector 	The selector object. Use to get value and for destroy action
		*/
		onMonthClick: function(selector) {
			var self = this;
			// save date
			var date = selector._currentDate;

			// clear previous selector
			uiUtils.empty(self.parentSlot);
			selector.destroy();

			// create month selector
			var monthChoice = new MonthChoice();
			monthChoice.create(this.parentSlot, date, self);
		},

		/*
			Triggered when user clicks on year selection link. It builds the year selector
			@param 	selector 	The selector object. Use to get value and for destroy action
		*/
		onYearClick: function(selector) {
			var self = this;
			// save date
			var date = selector._currentDate;

			// clear previous selector
			uiUtils.empty(self.parentSlot);
			selector.destroy();

			// create month selector
			var yearChoice = new YearChoice();
			yearChoice.create(self.parentSlot, date, self);
		},


		/*
			Triggered in case of datetime field. It builds time selector after user clicked on date
			@param 	selector 	The selector object. Use to get value and for destroy action
		*/
		onOpenTime: function(selector) {
			var self = this;

			// save date
			self.dateValue = selector.dateValue;

			// clear previous selector
			uiUtils.empty(self.parentSlot);
			selector.destroy();

			// create time selector
			var timeSelector = new TimeSelector();
			var sDom = timeSelector.create(self.field, self, self.onSelectTime);
			self.parentSlot.appendChild(sDom);
			timeSelector.bindEvents(true);
		},

		/*
			Triggered when user clicks on link that will update the calendar. It builds the calendar with updated value
			@param 	selector 	The selector object. Use to get value and for destroy action
		*/
		onCalendarUpdate: function(selector) {
			var self = this;

			// save date
			self._currentDate = selector._currentDate;

			// clear previous selector
			uiUtils.empty(self.parentSlot);
			selector.destroy();

			// create back date selector
			var dateSelector = new DateSelector();
			var sDom = dateSelector.create(self.field, self);
			self.parentSlot.appendChild(sDom);
			dateSelector.bindEvents(true);
		},

		/*
			Triggered in case of datetime field. It sets the final field value and closes the container (the modal)
			@param 	selector 	The selector object. Use to get value and for destroy action
		*/
		onSelectTime: function(timeVal, handler) {
			var self = handler;
			self.field.setFieldValue(self.dateValue + " " + timeVal);
			self.closeContainer();
		},

		/*
			Closes the container (the modal here)
		*/
		closeContainer: function() {
			this.$$container.modal("hide");
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/ui/datetimeSelectors/datetimeSelector',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/types/date','syracuse-tablet/html/js/ui/datetimeSelectors/dateSelector'],function (require, exports, module) {
var utils = require('syracuse-tablet/html/js/helpers/utils');
var _dateApi = require('syracuse-tablet/html/js/helpers/types/date');
var Base = require('syracuse-tablet/html/js/ui/datetimeSelectors/dateSelector').Klass;

var _Klass = utils.defineClass(

	function() {

	}, Base, {
		onTodayClick: function() {
			this._currentDate = _dateApi.today();
			this.dateValue = _dateApi.fromInternalValue(this._currentDate._value).toString();
			this.handler.onEvent("onOpenTime", this);
		},
		onDayClick: function(picker) {
			this.dateValue = _dateApi.fromInternalValue(picker.getAttribute("data-s-syraValue")).toString();
			this.handler.onEvent("onOpenTime", this);
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/ui/datetimeSelectors/selectorFactory',['require','exports','module','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/ui/modal','syracuse-tablet/html/js/ui/datetimeSelectors/selectorSwitchHandler','syracuse-tablet/html/js/ui/datetimeSelectors/dateSelector','syracuse-tablet/html/js/ui/datetimeSelectors/datetimeSelector','syracuse-tablet/html/js/ui/datetimeSelectors/timeSelector'],function (require, exports, module) {

var globals = require('syracuse-tablet/html/js/helpers/globals');
var modal = require('syracuse-tablet/html/js/ui/modal');
var SelectorHandler = require('syracuse-tablet/html/js/ui/datetimeSelectors/selectorSwitchHandler').Klass;

var _selectors = {
	date: {
		"windows": null,
		"android": null,
		"ios": null,
		"default": require('syracuse-tablet/html/js/ui/datetimeSelectors/dateSelector').Klass
	},
	datetime: {
		"windows": null,
		"android": null,
		"ios": null,
		"default": require('syracuse-tablet/html/js/ui/datetimeSelectors/datetimeSelector').Klass
	},
	time: {
		"windows": null,
		"android": null,
		"ios": null,
		"default": require('syracuse-tablet/html/js/ui/datetimeSelectors/timeSelector').Klass
	}
};

/*
	Returns appropriate selector controller according to field type
	@param	propertyType 	Field property type application/x-{date,time,datetime}
*/
var getSelector = function(propertyType) {
	var type;
	switch (propertyType) {
		case "application/x-date":
			type = "date";
			break;
		case "application/x-datetime":
			type = "datetime";
			break;
		case "application/x-time":
			type = "time";
			break;
	}

	var laf = globals.getLookAndFeel();
	var selector = _selectors[type]; // select for type
	if (selector) {
		selector = selector[laf] || selector["default"]; // select per OS or use default
	}

	if (!selector) {
		throw new Error("Expected date/time/datetime type. Got " + propertyType);
	}
	return new selector();
};


/*
	Creates selector widget
	@param	field 	Field controller
*/
var _createSelector = function(field) {
	// selector handler
	var sHandler = new SelectorHandler(field);

	// selector controller (date/time/datetime according to type)
	var ctrlSelector = getSelector(field.$type);

	// selector dom
	var selectorDom = ctrlSelector.create(field, sHandler);

	var $$selectorModal = modal.field(field.getTitle(), selectorDom.outerHTML, function(modalEvent, $$modalElmt) {
		// build content on open
		if (modalEvent == 'shown.bs.modal') {
			sHandler.setContainer($$modalElmt);
			sHandler.setParentSlot($$modalElmt.find(".modal-body")[0]);
			ctrlSelector.bindEvents(true);
		}

		// run actions on close 'hidden.bs.modal'
		else {
			ctrlSelector.destroy();
		}
	});

};

exports.createSelector = _createSelector;
});

define('syracuse-tablet/html/js/controls/field/ctrlDate',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/field/ctrlFieldBase','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/ui/datetimeSelectors/selectorFactory','syracuse-tablet/html/js/ui/fontUtils'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var selectorFactory = require('syracuse-tablet/html/js/ui/datetimeSelectors/selectorFactory');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

var _Klass = utils.defineClass(

	function CtrlBase(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
	}, Base, {
		/**
		 * Init the properties to allow reuse of this control
		 */
		initReuseProperties: function() {
			Base.prototype.initReuseProperties.call(this);
			this.picker = null;
		},
		buildFieldValue: function(fieldSlot, buildOptions) {
			var self = this;
			var valueSlot = Base.prototype.buildFieldValue.call(self, fieldSlot, buildOptions);
			var value = self.getFormattedValue(self.getValue());
			if (self.$isEditMode) {
				var inputGroup = uiUtils.createDomElement("div", ["input-group"], null, null, valueSlot);
				self.createMainInput(inputGroup, value);
				var span = uiUtils.createDomElement("span", ["input-group-btn"], null, null, inputGroup);
				self.picker = uiUtils.createDomElement("button", ["btn", "btn-default", "s-m-meta"], null, null, span);
				uiUtils.createDomElement("span", fontUtils.dateFieldIcon(self.$type), null, null, self.picker);
				$(self.picker).click(function() {
					selectorFactory.createSelector(self);
				});
			} else {
				self.appendTextValue(valueSlot, value);
			}
		},
		setFieldValue: function(value) {
			if (this.$type.indexOf("datetime") > -1 && value.length <= 10) {
				value += "T00:00:00.0Z";
			}
			Base.prototype.setFieldValue.call(this, value);
		},
		getFieldFormat: function() {
			return this.formatter.format;
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/array/builderBase',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/ui/fontUtils','syracuse-tablet/html/js/sdata/sdataUtils'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');

var _isExcluded = ["application/x-password"];
var _paginLinks = ["$first", "$previous", "$next", "$last", "$more"];
/**
 * Array builder base class
 * Authoring global properties
 * 		$isTitleHidden		Hide the column title
 * 		$rowIdx				Show/Hide row index
 */
var _Klass = utils.defineClass(
	function(control, options) {
		var self = this;
		self.options = options || {};
		if (control == null) throw new Error("Null control");
		self.control = control;
		// Article of content inside this control
		// This should not be self.$article
		self.$article = control.article.$article;
		// Article of control itself with $bind, $isTitleHidden, $cardsPer<xxx>, all that does affect the control itself
		// Normally, this should be self.$article
		self.$articleArray = control.article;
		self.$itemProto = control.prototype.getPrototype("$item");
		self.displayRowIdx = self.$article.$rowIdx === true;
	}, null, {
		/**
		 * Init the properties to allow reuse of this control
		 */
		initReuseProperties: function() {
			this.$$value = null;
			this.$$elmt = null;
		},
		destroy: function() {
			var self = this;
			self.control = null;
			if (self.$itemProto) {
				// We destroy the proto
				self.$itemProto.destroy();
				self.$itemProto = null;
			}
			/* No destroy - destroyed in control*/
			self.$$elmt = null;
			self.$$value = null;
		},

		/**
		 * $$value parent that contains the table - same strcture for all controls
		 * 	arrayData is an object that contains all data needed by array
		 * 	arrayData.$resources contains rows data - Array of dao
		 */
		buildHtml: function(arrayData, buildOptions, classes) {
			var self = this;
			if (!self.$article || !self.$article.$items) {
				// a$article is expected - see articlePArse which set the default article
				self.insertError("<b>No $article found for array " + self.control.$bind + "<b>");
			}
			self.$$value = self.control.$$value;
			self.$$elmt = self.control.$$elmt;
		},
		/**
		 * Display an error
		 */
		insertError: function(html) {
			var err = ['<div class="s-m-error">'];
			err.push(html);
			err.push("</div>");
			$(err.join('')).appendTo(this.$$elmt);
		},
		buildPagingLinks: function(arrayData, options) {
			var self = this;
			// Temporarily disabled - during mobile gesture implementation
			return;
			var addLink = function(parent, linkName, attrs) {
				$(uiUtils.createDomElement('a', ["s-m-link", fontUtils.paginationIcon(linkName)],
					null, attrs)).appendTo(parent);
			};
			options = options || {};
			var linksBottom = options.bottom ? $(uiUtils.createDomElement('div', ["s-m-array-links"])).appendTo(self.$$value) : null;
			var linksTop = options.top ? $(uiUtils.createDomElement('div', ["s-m-array-links"])).prependTo(self.$$value) : null;
			if (arrayData.$links) {
				_paginLinks.forEach(function(linkName) {
					var link = arrayData.$links[linkName];
					if (link) {
						var linkInfo = sdataUtils.getLinkInfo(link.$url);
						var attrs = {
							// page refresh
							"data-nav-refresh": true,
							// data-nav-type is used to specify the type of link
							"data-nav-type": linkName,
							// Data url
							"data-sdata-url": link.$url,
							// refresh control only
							"data-control-id": self.control.id,
						};
						if (self.control.controller.isVignette) {
							// Add vignette info to reload the page in vignette
							attrs["data-nav-target"] = self.control.controller.openLinkInVignette() ? "vignette" : "application";
						}
						if (linksBottom) addLink(linksBottom, linkName, attrs);
						if (linksTop) addLink(linksTop, linkName, attrs);
					}
				});
			}
		},
		/**
		 * Can be overridden - lookup
		 */
		buildDetailLink: function(rowData, options) {
			if (options == null) throw new Error("Null options");
			var self = this;
			var attrs = options.attrs || {};
			if (self.control.prototype.isLookup()) {
				attrs["href"] = "#";
				attrs["data-action"] = "select";
				attrs["data-params"] = rowData.getValue("$uuid");
				return uiUtils.createDomElement(options.tag, options.css, options.title, attrs, options.parent);
			} else {
				var links = self.$itemProto.data("$links");
				// If there is a DASHBOARD link it replaces $details
				var hasLink = ((links && links.DASHBOARD) || (links && links.$details)) != null;
				if (hasLink) {
					// Trigger an action in array control for additional processes before open link
					attrs["data-action"] = "select";
					attrs["data-params"] = encodeURIComponent(rowData.getValue("$uuid"));
				}
				if (hasLink || options.createIfNoLink) {
					var css = null;
					if (options.css) css = [options.css];
					return uiUtils.createDomElement(options.tag, css, options.title, attrs, options.parent);
				}
			}
			return null;
		},
		/**
		 * True if field is excluded
		 */
		isExcluded: function(proto) {
			return proto == null || proto.$isExcluded === true || _isExcluded.indexOf(proto.$type) >= 0;
		},
		/**
		 * Returns control id eventually concatenated with arguments
		 * 	Allows to get unic ids for control childs if needed
		 */
		getId: function() {
			var self = this;
			if (arguments.length > 0) {
				return self.control.id + " - " + Array.prototype.join.call(arguments, '-');
			} else {
				return self.control.id;
			}
		},
		/**
		 * lastSelectedRow is restored when after a back action - See page.savedCtxRestore
		 */
		selectLastSelectedRow: function(rowId, show, selector) {
			var self = this;
			selector = 'tbody [data-params="' + rowId + '"]';
			var $$elmt = self.$$elmt.find(selector);
			if ($$elmt.attr("data-action") === exports.ACTROWDETAIL) {
				//In that case we have to select the row
				$$elmt = $$elmt.closest("tr");
			} // Else $$elmt points to the cell/row to highligth 

			$$elmt[show ? "addClass" : "removeClass"]("s-m-last-selected");
		},
		callGenerateHtml: function(root, $$parent, controllerDao, destroyAfter, buildOptions) {
			var htmlRootCtrl = buildOptions && buildOptions.htmlRootCtrl ? buildOptions.htmlRootCtrl : this.control;
			root.generateHtml($$parent, controllerDao, destroyAfter, htmlRootCtrl);
		},
		_addEmptyCells: function($$row, nb, buildOptions) {
			var self = this;
			if (nb < 1) return;
			// dispEmpty: withtitle, filled, empty
			var dispEmpty = self.$articleArray.$emptycell;
			if (dispEmpty === "withtitle" || dispEmpty === "filled") {
				var td = '<td class="s-m-empty s-m-' + dispEmpty + ' nohover">';
				for (var i = 0; i < nb; i++) {
					this.callGenerateHtml(this._layoutRoot, $(td).appendTo($$row), null, false, buildOptions);
				}
			}
			return $$row.children("td");
		},
		/**
		 * return the context to save. It will be be restored afer page has been loaded
		 */
		savedCtxCreate: function() {
			return null;
		},
		/**
		 * Called by the page to restore the context
		 */
		savedCtxRestore: function(ctx) {
			// Do nothing			
		}
	});

exports.Klass = _Klass;
exports.ACTROWDETAIL = "rowDetail";
});

define('syracuse-tablet/html/js/controls/array/verticalScroller',['require','exports','module','syracuse-tablet/html/js/helpers/utils'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
/**
 * Scroll a table or vertical card array
 * TODO - Add vertical swipe - scroll in pixels instead of rows
 */
var _Klass = utils.defineClass(
	function(builder, options) {
		this.hammer = null;
		this.options = options = options || {};
		if (options.scale == null) options.scale = 0.1;
		this.builder = builder;
		this.control = builder.control;
		this.$$tbody = builder.$$tbody;
		if (!this.$$tbody) throw new Error("$$tbody expected");
		// Context restored by the page after loading if any
		this._restoredScrollIdx = null;
	}, null, {
		destroy: function() {
			this.builder = null;
			this.control = null;
			this.$$tbody = null;
			if (this.hammer) {
				this.hammer.destroy();
				this.hammer = null;
			}
		},
		afterShow: function() {
			// First
			if (this._initPanelInfo()) {
				this.hammer = new Hammer(this.$$tbody.get(0));
				this.initPanEvt();
			}
		},
		initPanEvt: function() {
			var self = this;
			self.hammer.get("pan").set({
				direction: Hammer.DIRECTION_VERTICAL
			});
			self.hammer.on("pandown panup", function(ev) {
				self.onSwipePan(ev);
			});
		},
		/**
		 * Init all info needed to deal with pan event - scroll up/down
		 * return true if scroll is needed
		 */
		_initPanelInfo: function() {
			this.parentHeight = this.control.$$elmt.parent().height();
			this.bodyHeight = this.$$tbody.height();
			this.bodyTop = this.$$tbody.position().top;
			// Restores the last scroll
			this.curIdx = this._restoredScrollIdx != null ? this._restoredScrollIdx : 0;
			this.bodyVisibleHeight = this.parentHeight - this.bodyTop;
			this.overFlow = (this.bodyHeight - this.bodyVisibleHeight > 0);
			if (this.overFlow > 0) {
				this.trHeight = this.$$tbody.children("tr:first-child").height();
				this.rsrcLen = this.control.getArrayData().$resources.length;
				this.$$trs = this.$$tbody.children("tr");
				this.maxIdx = this.$$trs.length - 1;
				var tr;
				for (var i = 0; i < this.rsrcLen; i++) {
					// Stores jquery object
					tr = this.$$trs[i] = $(this.$$trs[i]);
					if (this.curIdx != null && i < this.curIdx) {
						// Restores the last scroll
						tr.hide();
					}
				}
			}
			return this.overFlow;
		},
		onSwipePan: function(evt) {
			var self = this;
			var scale = this.options.scale;
			if (this.deltaY == null) this.deltaY = 0;
			var dy = Math.abs(evt.deltaY);
			// Delta in pixels since last event
			var delta = Math.abs(this.deltaY - dy);
			// Nb rows to move
			var count = Math.round(scale * delta);
			//console.log(evt.distance, delta, "count = " + count, delta);
			if (count === 0) return;
			// Save last state
			this.deltaY = dy;
			var lastidx = self.curIdx;
			if (evt.type === "panup") {
				var newIdx = Math.max(0, Math.min(this.maxIdx, lastidx + count));
				for (var i = lastidx; i < newIdx; i++) {
					this.$$trs[i].hide();
				}
			} else if (evt.type === "pandown") {
				var newIdx = Math.max(0, Math.min(this.maxIdx, lastidx - count));
				for (var i = lastidx; i >= newIdx; i--) {
					this.$$trs[i].show();
				}
			}
			// Save start idx
			self.curIdx = newIdx;
		},
		/**
		 * Return the context to save
		 */
		savedCtxCreate: function(ctx) {
			return {
				scrollIdx: this.curIdx
			};
		},
		/**
		 * Called by the page to restore the context
		 * Restores the scroll index
		 */
		savedCtxRestore: function(ctx) {
			this._restoredScrollIdx = ctx ? ctx.scrollIdx : 0;
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/array/builderTable',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/controls/array/builderBase','syracuse-tablet/html/js/controls/array/verticalScroller','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/helpers/prototype','syracuse-tablet/html/js/ui/modal','syracuse-tablet/html/js/application/daoSdata','syracuse-tablet/html/js/controls/ctrlFactory','syracuse-tablet/html/js/helpers/articleParser'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var builderBase = require('syracuse-tablet/html/js/controls/array/builderBase');
var Base = builderBase.Klass;
var Scroller = require('syracuse-tablet/html/js/controls/array/verticalScroller').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var reqProto = require('syracuse-tablet/html/js/helpers/prototype');;
var modal = require('syracuse-tablet/html/js/ui/modal');
var daoSdata = require('syracuse-tablet/html/js/application/daoSdata');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');

var _isExcluded = ["application/json", "application/x-array", "application/x-document", "application/x-binary"];
var _ADDROW = "$ADDROW";
var _addRowBtn = {
	$activity: "create",
	$type: "tablet/x-button",
	$icon: "addrow",
	$bind: _ADDROW,
	$text: "Add row"
};
var _additionalCols = [{
	$type: "tablet/x-icon",
	css: ["s-m-icon"],
	$activity: "edit",
	$icon: "editrow",
	$bind: "$EDITROW"
}, {
	$type: "tablet/x-icon",
	css: ["s-m-icon"],
	$activity: "edit",
	$icon: "delrow",
	$bind: "$DELETEROW",
	$action: "delrow"
}, {
	$type: "tablet/x-icon",
	css: ["s-m-icon"],
	$activity: "display",
	$icon: "detailrow",
	$bind: "$DETAILROW"
}];
/**
 * x-array control class
 * Array authoring - $article
 * 		$items 				Columns authoring
 * 				$title			Override the title
 * 				$width			Set the width
 * 				$isAdvanced		Not displayed in grid
 */
var _Klass = utils.defineClass(
	function(control, options) {
		var self = this;
		Base.call(self, control, options);
		self._columnInfo = null;
		self._scroller = null;
	}, Base, {
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			if (self._scroller) {
				self._scroller.destroy();
				self._scroller = null;
			}
			if (self._columnInfo) {
				self._columnInfo.forEach(function(col) {
					if (col.control) col.control.destroy();
				});
				self._columnInfo = null;
			}
		},
		buildHtml: function(arrayData, options) {
			var self = this;
			Base.prototype.buildHtml.call(self, arrayData, options);
			if (!self.$article) return;
			if (self._createColumnInfo(options).length > 0) {
				var $$table = $(uiUtils.createDomElement('table', ["table table-hover table-condensed"], null, null, self.$$value));
				self._buildTableHead($$table, options);
				self._buildTableBody($$table, arrayData, options);
				self._buildTableFoot($$table, options);
				self.buildPagingLinks(arrayData, {
					top: true,
					bottom: false
				});
				if (arrayData.$resources.length > 0 && this.$$tbody) {
					// Create a scroller - Scroller will be initialized afterShow
					if (!this.control.isArrayField()) {
						// Temporarily - Scroll only for query and lookup
						// For fields array we need to set the height
						// This object manages events and also callback - It is used also by CardV builder
						this._scroller = new Scroller(this, {
							scale: 0.1
						});
					}
				}
			} else {
				self.$$value.addClass("empty");
			}
		},
		afterShow: function() {
			if (this._scroller) {
				// Init scroller
				this._scroller.afterShow();
			}
		},
		// get columns that should be displayed
		_createColumnInfo: function(options) {
			var self = this;
			if (self._columnInfo) return self._columnInfo;
			self._columnInfo = [];
			if (self.displayRowIdx) {
				self._columnInfo.push({
					"$bind": globals.ROWIDXPROP,
					"proto": reqProto.getRowIdxProto(),
					css: "s-m-rowidx"
				});
			}
			var proto, nbCols = 0,
				unfound = [],
				col;
			self.$article.$items.forEach(function(item, idx) {
				proto = self.$itemProto.property(item.$bind);
				if (!proto) {
					unfound.push(item);
					// TODO - Display error
				} else {
					nbCols++;
					if (!self.isExcluded(item, proto)) {
						col = {
							"$bind": item.$bind,
							"proto": self.$itemProto.create(proto),
							"article": item
						};
						if (col.article.$isTitleHidden === true) {
							col.title = "";
						} else if (col.article.$title != null) {
							// Title can be overridden bay article - TODO translation
							col.title = self.$itemProto.resolveExpression(col.article.$title) || "";
						} else {
							col.title = col.proto.data('$title') || "";
						}
						self._columnInfo.push(col);
					}
				}
			});
			var edit = self.control.controller.isEditMode();
			var overflow = self._columnInfo.length != nbCols;
			_additionalCols.forEach(function(col) {
				if ((edit && col.$activity === "edit") || (!edit && overflow && col.$activity === "display")) {
					self._columnInfo.push($.extend(true, {}, col));
				}
			});
			if (unfound.length > 0) {
				// Add unfound columns
				var html = ['Field(s) not found<ul>'];
				unfound.forEach(function(x) {
					html.push("<li><b>" + x.$bind + "</b></li>");
				});
				html.push("</ul>");
				self.insertError(html.join(''));
			}
			return self._columnInfo;
		},
		isExcluded: function(item, proto) {
			var self = this;
			if (Base.prototype.isExcluded.call(self, proto)) return true;
			return _isExcluded.indexOf(proto.$type) >= 0 || item.$isAdvanced === true;
		},
		_buildTableHead: function($$table, options) {
			var self = this;
			var tabHead = uiUtils.createDomElement('thead', null, null, null, $$table);
			var tr = uiUtils.createDomElement('tr', null, null, null, tabHead);
			var th, css;
			self._columnInfo.forEach(function(col) {
				th = uiUtils.createDomElement('th', col.css, col.title, null, tr);
				if (col.article) {
					css = {};
					if (col.article.$width != null) {
						// TODO -Use our own styles for table not BS
						css["max-width"] = css.width = col.article.$width;
					}
					$(th).css(css);
				}
			});
		},
		_buildTableFoot: function($$table, options) {
			var self = this;
			if (self.control.controller.isEditMode()) {
				var $$cell = $('<tfoot/><tr><td colspan="' + self._columnInfo.length + '"></td></tr></tfoot>').appendTo($$table).find("td");
				var fieldProto = self._getOtherColProto(_addRowBtn, "");
				/**
				 * Build cell html and append it to parent
				 * Control is used only one time
				 */
				var ctrl = articleParser.tableCell2Control(self.control, $$cell, _addRowBtn.$bind, fieldProto);
				self.callGenerateHtml(ctrl, $$cell, daoSdata.emptyDao(fieldProto), true, options);
			}
		},
		_buildTableBody: function($$table, arrayData, options) {
			var self = this;
			self.$$tbody = $(uiUtils.createDomElement('tbody', null, null, null, $$table));
			// Build rows
			for (var i = 0; i < arrayData.$resources.length; i++) {
				self._buildTableRow(self.$$tbody.get(0), arrayData.$resources[i], i, options);
			}
		},
		_buildTableRow: function(tabBody, rowData, idx, options) {
			var self = this;
			var cssRowIdx;
			if (self.displayRowIdx) {
				rowData.setRowIndex(idx);
			}
			var rowId = rowData.getValue("$uuid");
			var tr = self.buildDetailLink(rowData, {
				tag: "tr",
				parent: tabBody,
				createIfNoLink: true,
				css: rowId === self.control.controller.lastSelectedRowId ? "s-m-selected" : undefined
			});
			var $$cell, rowIdx, fieldProto;
			self._columnInfo.forEach(function(col, idx) {
				rowIdx = self.displayRowIdx && col.$bind === globals.ROWIDXPROP;
				$$cell = $(uiUtils.createDomElement('td', rowIdx ? col.css : null, null, null, tr));
				fieldProto = col.$activity != null ? self._getOtherColProto(col, rowId, rowData, options) : col.proto;
				if (!col.control) {
					// Creates the control used for generating html in cells
					col.control = articleParser.tableCell2Control(self.control, $$cell, col.$bind, fieldProto);
				}
				col.control.generateHtml($$cell, rowData, false);
			});
		},
		/**
		 * Returns the proto for button, icons for actions
		 * 		Add new row			array._actRowDetail
		 * 		Detelete row		array._actDelrow
		 * 		Goto row detail		array._actRowDetail
		 * 		Edit row detail		array._actRowDetail
		 * In row detail page we will get a null rowid for creation
		 */
		_getOtherColProto: function(colInfo, rowId, rowData, options) {
			var self = this;
			var action = colInfo.$action || builderBase.ACTROWDETAIL;
			var params;
			var rowInfo = {
				pathBind: [],
				isCreate: false
			};
			if (rowData) {
				// EDIT/DETAIL ROW
				var rowId = rowData.getValue("$uuid");
				// Build the path of array field and rowsid's and stores it in mainArrayCtrl
				var rd = rowData;
				rowInfo.pathId = [];
				rowInfo.pathId.unshift(rowId);
				rowInfo.pathBind.unshift(rd.$bind);
				while (rd.parent && rd.parent.prototype.isArray()) {
					rowInfo.pathId.unshift(rd.parent.getValue("$uuid"));
					rowInfo.pathBind.unshift(rd.parent.$bind);
					rd = rd.parent;
				}
				// Expression resolved by the control(type is given by colInfo.$type)
				params = "{$uuid}";
			} else {
				// CREATE ROW
				rowInfo.isCreate = true;
				var rd = self.control.getDao();
				rowInfo.pathBind = rd.$bind.length === 0 ? [self.control.$bind] : (rd.$bind + "." + self.control.$bind).split('.');
				rowId = utils.UUID();
				params = rowId;
			}
			// mainArrayCtrl is the array control at the origin of the creation of the table/card
			// When we generate html cards for arrays nested is a parent array the main control is propagated by options.htmlRootCtrl
			// Otherwise the maincontrol is self.control
			var mainArrayCtrl = options && options.htmlRootCtrl ? options.htmlRootCtrl : self.control;
			// Registers the row info into the main Array control
			// Like html generator destroy the control and dao after generation we need to store the paths (ids and $bind) to retreive row dao and proto
			mainArrayCtrl.rowDetailAdd(rowId, rowInfo);
			var json = {
				$action: {
					"data-action": action,
					"data-params": params
				}
			};
			// Additional info needed to create the control (button, icon...)
			["$type", "$icon", "$text"].forEach(function(x) {
				if (x != null && x != "$activity") json[x] = colInfo[x];
			});
			return reqProto.create(json);
		},
		/**
		 * Store/Restore scroller context for back navigation
		 * It's why we need to create the scroller before afterShow
		 */
		savedCtxCreate: function() {
			return this._scroller ? this._scroller.savedCtxCreate() : null;
		},
		savedCtxRestore: function(ctx) {
			if (this._scroller) this._scroller.savedCtxRestore(ctx);
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/array/builderCardV',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/array/builderBase','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/helpers/articleParser','syracuse-tablet/html/js/controls/array/verticalScroller'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/array/builderBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');
var VScroller = require('syracuse-tablet/html/js/controls/array/verticalScroller').Klass;

/**
 * Manage swipe event on a field array in card mode
 * We display one card and swipe to walk into the collection
 */
var _OneCardSwiper = function(builder, buildOptions) {
	this.hammer = null;
	this.builder = builder;
	this.buildOptions = buildOptions;
	this.curIdx = 0;
	/**
	 * init is Mandatory for the bind - Object must be created
	 */
	this.init = function() {
		this.hammer = new Hammer(this.builder.$$value.get(0));
		this.hammer.get("swipe").set({
			direction: Hammer.DIRECTION_HORIZONTAL
		});
		// listen to events...
		this.hammer.on("swipeleft swiperight", Hammer.bindFn(this.onSwipe, this));
		// For chaining
		return this;
	};

	this.destroy = function() {
		if (this.hammer) this.hammer.destroy();
		this.hammer = null;
		this.builder = null;
	};

	this.triggerSwipe = function() {
		this.onSwipe(null);
		// For chaining
		return this;
	};
	// evt = null on start
	this.onSwipe = function(evt) {
		var self = this;
		setTimeout(function() {
			var next = evt ? evt.type === "swipeleft" : null;
			self.curIdx = next == null ? self.curIdx : next === true ? self.curIdx + 1 : self.curIdx - 1;
			self.builder.singleCardUpdate(self.curIdx, self.buildOptions);
		});
	};
	// Save context
	this.savedCtxCreate = function() {
		return {
			curIdx: this.curIdx
		};
	};
	// Restored on back
	this.savedCtxRestore = function(ctx) {
		this.curIdx = ctx && ctx.curIdx != null ? ctx.curIdx : 0;
	};
};
/**
 * Pagination in table.footer
 */
var _tfootPagin = function($$tbl, nbCols, nbRecords) {
	this.nbRecords = Math.max(0, nbRecords);
	this.$$root = $('<tfoot><tr><td colspan="' + nbCols + '"></td></tr></tfoot>').appendTo($$tbl);
	this.$$text = this.$$root.find("td");
	this.update = function(idx) {
		this.$$root.removeClass().addClass("s-m-card-pagin");
		if (this.nbRecords > 0 && idx >= 0 && idx < this.nbRecords) {
			this.$$text.html("Card " + (idx + 1) + "/" + this.nbRecords);
			if (idx === this.nbRecords) {
				this.$$root.addClass("s-m-first");
			} else if (idx === 0) {
				this.$$root.addClass("s-m-last");
			}
		}
	};
};
/**
 * Pagination in table.caption
 */
var _captionPagin = function($$tbl, nbCols, nbRecords) {
	this.nbRecords = Math.max(0, nbRecords);
	this.$$root = $('<caption/>').appendTo($$tbl);
	this.update = function(idx) {
		this.$$root.removeClass().addClass("s-m-card-pagin");
		if (this.nbRecords > 0 && idx >= 0 && idx < this.nbRecords) {
			this.$$root.html("Page " + (idx + 1) + "/" + this.nbRecords);
			if (idx === this.nbRecords) {
				this.$$root.addClass("s-m-first");
			} else if (idx === 0) {
				this.$$root.addClass("s-m-last");
			}
		}
	};
};

/**
 * Vertical card builder
 * Authoring see ctrlArray
 */
var _Klass = utils.defineClass(
	function(control, options) {
		var self = this;
		Base.call(self, control, options);
		self._layoutRoot = null;
		self.cardsPerRow = self.$articleArray.$cardsPerRow;
		self.cardsPerRow = Math.min(20, Math.max(0, self.cardsPerRow == null ? 1 : parseInt(self.cardsPerRow, 10)));
		// swiper or scroller depending on the context
		self._gestureMgr = null;
	}, Base, {
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			if (self._layoutRoot) {
				self._layoutRoot.destroy();
				self._layoutRoot = null;
			}
			if (self._gestureMgr) {
				self._gestureMgr.destroy();
				self._gestureMgr = null;
			}
		},
		buildHtml: function(arrayData, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, arrayData, buildOptions);
			if (!self.$article) return;
			if (!self._layoutRoot) {
				// Create HTML generator
				self._layoutRoot = articleParser.cardV2Controls(self.control);
			}
			self.$$tbl = $('<table/>').appendTo(self.$$value);
			if (self.control.isArrayField()) {
				self.singleCardBuild(buildOptions);
			} else {
				self.multipleCardsBuild(arrayData, buildOptions);
			}
		},
		/**
		 * Array field in card mode - One card is display at a time - Swipe to walk inside the collection
		 */
		singleCardBuild: function(buildOptions) {
			var self = this;
			var rsrcs = self.control.getArrayData().$resources;
			if (rsrcs.length > 1) {
				// Display header in caption to keep the same Y coordinate the same place when we swipe
				// _tfootPagin displays pagin in footer but position changes according to card height
				self._pagin = new _captionPagin(self.$$tbl, 1, rsrcs.length);
			}
			self.$$cardRow = $("<tr>").appendTo($("<tbody>")).appendTo(self.$$tbl);
			self._gestureMgr = new _OneCardSwiper(self, buildOptions).init().triggerSwipe();
		},
		/**
		 * QUery/Lookup Array field in card mode - We display all the cards - Vertical Scroll up/down
		 */
		multipleCardsBuild: function(arrayData, buildOptions) {
			var self = this;
			var cardsPerRow = self.cardsPerRow;
			if (cardsPerRow > 1) {
				/* non need of header - used to create columns with same width*/
				var w = Math.round(100 / cardsPerRow);
				var wr = 100 - w * cardsPerRow;
				var $$tr = $("<thead><tr>").appendTo(self.$$tbl).children(":first-child");
				for (var i = 0; i < cardsPerRow; i++) {
					$("<th>").css({
						width: (i === cardsPerRow - 1 ? w + wr : w) + "%"
					}).appendTo($$tr);
				}
			}
			self.$$tbody = $("<tbody>").appendTo(self.$$tbl);
			/* Query/Lookup we display all cards in stack mode */
			var remaining = 0,
				$$row, $$cell;
			arrayData.$resources.forEach(function(rowData, idx) {
				if (remaining === 0) {
					remaining = cardsPerRow;
					$$row = $("<tr>").appendTo(self.$$tbody);
				}
				$$cell = $(self.buildDetailLink(rowData, {
					tag: "td",
					parent: $$row,
					createIfNoLink: true
				}));
				self.callGenerateHtml(self._layoutRoot, $$cell, rowData, false, buildOptions);
				remaining--;
			});
			self._addEmptyCells($$row, remaining, buildOptions);
			if (arrayData.$resources.length > 0 && self.$$tbody) {
				// Create a vertical VScroller - Vertical scroller will be initialized afterShow
				// Scroll only for query and lookup
				// For fields array we create one card and swipe
				// This object manages events and also callback - It is used also by Table builder
				self._gestureMgr = new VScroller(self, {
					scale: 0.05
				});
			}
		},
		afterShow: function() {
			if (this._gestureMgr && this._gestureMgr.afterShow) {
				// VScroller needs to be initialized after show
				this._gestureMgr.afterShow();
			}
		},
		/**
		 * Update field array card on swipe
		 */
		singleCardUpdate: function(idx, buildOptions) {
			try {
				var self = this;
				var rsrcs = self.control.getArrayData().$resources;
				if (idx < 0 || idx >= rsrcs.length) return;
				var rowData = rsrcs[idx];
				if (self.$$cardCell) self.$$cardCell.remove();
				self.$$cardCell = $(self.buildDetailLink(rowData, {
					tag: "td",
					parent: self.$$cardRow,
					createIfNoLink: true,
					css: "nohover"
				}));
				self.callGenerateHtml(self._layoutRoot, self.$$cardCell, rowData, false, buildOptions);
				if (self._pagin) self._pagin.update(idx);
			} catch (e) {
				alert(e);
			}
		},
		/**
		 * Return the context to save.
		 * It will be be restored afer page has been loaded
		 * The context is saved and restored by the page
		 * Stores the scroll index
		 */
		savedCtxCreate: function() {
			if (this._gestureMgr) return this._gestureMgr.savedCtxCreate();
		},
		savedCtxRestore: function(ctx) {
			if (this._gestureMgr) this._gestureMgr.savedCtxRestore(ctx);
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/array/builderCardH',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/array/builderBase','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/array/builderBase','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/helpers/articleParser'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/array/builderBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');




var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/array/builderBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');


/**
 * Vertical card builder
 * Authoring
 * 		$cardsPerLine 			number of card s per row
 * 		$displayEmptyCells 		Display or not empty cells true by default
 */
var _Klass = utils.defineClass(
	function(control, options) {
		var self = this;
		Base.call(self, control, options);
		self._layoutRoot = null;
	}, Base, {
		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			if (self._layoutRoot) {
				self._layoutRoot.destroy();
				self._layoutRoot = null;
			}
		},
		buildHtml: function(arrayData, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, arrayData, buildOptions);
			if (!self.$article) return;
			var cardsPerLine = self.$articleArray.$cardsPerLine;
			cardsPerLine = Math.min(20, Math.max(0, cardsPerLine == null ? 1 : parseInt(cardsPerLine, 10)));
			if (!self._layoutRoot) {
				// Create HTML generator
				self._layoutRoot = articleParser.cardV2Controls(self.control);
			}
			var $$tbl = $('<table/>').appendTo(self.$$value);
			var w = Math.round(100 / cardsPerLine);
			var wr = 100 - w * cardsPerLine;
			var $$root = $("<thead><tr>").appendTo($$tbl).children(":first-child");
			for (var i = 0; i < cardsPerLine; i++) {
				$("<th>").css({
					width: (i === cardsPerLine - 1 ? w + wr : w) + "%"
				}).appendTo($$root);
			}
			var $$root = $('<tbody data-bind="' + self.control.$bind + '">').appendTo($$tbl);
			var remaining = 0,
				$$row, $$cell;
			arrayData.$resources.forEach(function(rowData, idx) {
				remaining = idx % cardsPerLine;
				if (remaining === 0) $$row = $("<tr>").appendTo($$root);
				$$cell = $(self.buildDetailLink(rowData, {
					tag: "td",
					parent: $$row,
					createIfNoLink: true
				}));
				self.callGenerateHtml(self._layoutRoot, $$cell, rowData, false, buildOptions);
			});
			self._addEmptyCells($$row, remaining, buildOptions);
		}
	});

/**
 * Array Control
 * 	Horizontal grid builder for queries
 */
var _KlassOld = utils.defineClass(
	function(control, options) {
		var self = this;
		Base.call(self, control, options);
		/*
		 * CSS-DEPENDEND: Needs to be adjusted on major size or page layout changes
		 */
		self.pageContentHeightSubstraction = 190;
		self.minLandscapeHeight = 550;
		self._itemWidth = 140;
		self._itemHeight = 140;
		self._itemSpacing = 10;
		self.recordItems = {};
	}, Base, {

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			self.recordItems = null;
		},

		buildHtml: function(arrayData, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, arrayData, buildOptions, ["s-m-card s-m-horizontal"]);
			self.$$domItems = $(uiUtils.createDomElement('div', ["s-m-grid-items s-m-horizontal"], null, {
				"id": self.getId("items")
			})).appendTo(self.$$elmt);

			arrayData.$resources.forEach(function(record, idx) {
				var domItem = uiUtils.createDomElement('div', ["s-m-grid-item"], null, null, self.$$domItems);
				self.recordItems[record.getValue("$uuid")] = domItem;
				self._buildRecord(record, domItem, idx);
			});

			self.onResizeWindow();
			self.buildPagingLinks(arrayData, {
				top: true
			});
		},

		_buildRecord: function(record, domItem, idx) {
			var self = this;
			var title = self.$itemProto.data("$value", record) || ("Rank;" + (idx + 1));
			var a = self.buildDetailLink(record, {
				tag: "a",
				parent: domItem,
				title: title,
				css: "s-m-link"
			});
		},

		onResizeWindow: function() {
			var self = this;
			var arrayData = self.control.getArrayData();
			if (!arrayData) return;
			var w = window.innerWidth;
			var h = window.innerHeight;

			h = h - self.pageContentHeightSubstraction;
			self._maxItemHeight = h;
			self.$$domItems.height(self._maxItemHeight - 20);

			var x = 0;
			var y = 0;
			arrayData.$resources.forEach(function(record) {
				if (y + self._itemHeight > self._maxItemHeight) {
					y = 0;
					x += self._itemWidth + self._itemSpacing;
				}
				var domItem = self.recordItems[record.getValue("$uuid")];
				if (domItem) {
					var s = domItem.style;
					s.left = x + "px";
					s.top = y + "px";
					s.width = self._itemWidth + "px";
					s.height = self._itemHeight + "px";
					y += self._itemHeight + self._itemSpacing;
				}
			});
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/array/ctrlArray',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/controls/ctrlBase','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/ui/modal','syracuse-tablet/html/js/application/eventListener','syracuse-tablet/html/js/sdata/sdataUtils','syracuse-tablet/html/js/application/daoSdata','syracuse-tablet/html/js/controls/array/builderTable','syracuse-tablet/html/js/controls/array/builderCardV','syracuse-tablet/html/js/controls/array/builderCardH'],function (require, exports, module) {


var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var modal = require('syracuse-tablet/html/js/ui/modal');
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var daoSdata = require('syracuse-tablet/html/js/application/daoSdata');

var Builders = {
	table: require('syracuse-tablet/html/js/controls/array/builderTable').Klass,
	cardV: require('syracuse-tablet/html/js/controls/array/builderCardV').Klass,
	cardH: require('syracuse-tablet/html/js/controls/array/builderCardH').Klass
};
var _destroyArrayData = function(a) {
	if (!a || !a.$resources) return null;
	a.$resources.forEach(function(r) {
		if (r) r.destroy();
	});
	return null;
};
/**
 * x-array control class
 * Authoring
 * 			$isTitleHidden: 		true/false
 * 			$height					height of array - if no height displays full array
 * 									add pan event to scroll(no swipe)
 * 			$width					100% by default - not needed
 * 			$displayIfEmpty:		true/false - Maybe a general property for fields to not display the control if empty
 *                              	If false we display the label and default value
 *      							Useful to optimize display
 *  		$emptycell				Ford cards mode - Value! ’empty’, ‘filled’, ‘withtitle’
 * 				empty:		 			doesn't fill grid with empty cells
 * 				filled:					fills grid with empty cells
 * 				withtitle:				fills grid with cards wit titles and default field values
 * 			$display				display mode cardV, cardH, table
 * 			for cardV
 * 				$cardsPerRow 			number of cards per row
 * 										height is calculated in percentage based on control width (full parent page with by default)
 * 				for field array 		s-m-control.s-m-array parent page has class detail or edit
 * 					$pagination				Displays N cards at a time on other ones on swipe
 * 											Default is 1
 * 			for cardH
 * 				$cardsPerLine 			number of cards per line
 * 										height is calculated in percentage based on control height (mandatory)
 * 				for field array 		s-m-control.s-m-array parent page has class detail or edit
 * 					$pagination			Displays N cards at a time and other ones on swipe
 * 										Default is 1
 */
var _Klass = utils.defineClass(
	function(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
		if (!article.$article) throw new Error("$article is expected");
		var Builder = Builders[article.$display];
		if (!Builder) throw new Error("Unknown $article.$display [" + article.$display + "]");
		self.builder = new Builder(self, options);
		self._arrayData = null;
		// All the rows with a link to rowDetail are registered in _rowDetailCache - id: {pathId,pathBind}
		// When we display arrays nested in arrays in card mode we need to store the path to access to the data/proto of the selected row
		// -> Cards Html is generated and the control object is not stored so we need to store the path to retrieve it from mainControl (htmlRootCtrl)
		self._rowDetailCache = {};
		// Info of the clicked row
		self._rowDetailInfo = null;
	}, Base, {
		/**
		 * Init the properties to allow reuse of this control
		 */
		initReuseProperties: function() {
			Base.prototype.initReuseProperties.call(this);
			if (this._arrayData) this._arrayData = _destroyArrayData(this._arrayData);
			if (this.builder) this.builder.initReuseProperties();
		},
		destroy: function() {
			var self = this;
			// Just set to null - destroyed by rowDetail page
			self._rowDetailInfo = null;
			// Just set to null
			self._rowDetailCache = null;
			Base.prototype.destroy.call(self);
			self.prototype = null;
			if (self.builder) {
				self.builder.destroy();
				self.builder = null;
			}
			self._arrayData = _destroyArrayData(self._arrayData);
			if (self._waiting) {
				uiUtils.waitWheelDestroy(self._waiting);
				self._waiting = null;
			}
		},
		isArrayField: function() {
			return !this.prototype.isLookup() && !this.prototype.isQuery();
		},
		/**
		 *	Build html DOM object + bind event
		 **/
		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			if (self.builder == null) throw new Error("Null builder");
			// Create standard root elmt
			var disp = self.article.$display || "table";
			var css = "s-m-";
			if (disp === "cardV") {
				css += "card s-m-V";
			} else if (disp === "cardH") {
				css += "card s-m-H";
			} else {
				css += disp;
			}
			// Build root elm
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions, ["s-m-array", css]);
			// Set up array data and isEmpty property used to managed authoring - Display title
			self._setArrayData(controllerDao);
			if (self._displayArray()) {
				self.builder.buildHtml(self._arrayData, buildOptions);
			}
		},
		afterShow: function() {
			if (this.builder.afterShow) this.builder.afterShow();
		},
		/**
		 * handle selection of a row
		 */
		_actSelect: function(rowId) {
			var self = this;
			var rowData = self._getRowById(rowId);
			if (!rowData) return;
			rowData = rowData.row;
			// Notify last selected row - see selectLastSelectedRow
			// Used by lookup page and standard page to store the lastSelectedRowId
			// false to not update UI because link destroy the page
			self.controller.notifSelectRow(self.id, rowId, rowData, false);
			if (!self.prototype.isLookup()) {
				// Open the link
				var links = self.builder.$itemProto.data("$links");
				var linkProto = (links && links.DASHBOARD) || (links && links.$details);
				if (linkProto) {
					var attrs = {};
					var link = sdataUtils.getLinkInfo(linkProto.$url, rowData);
					attrs["data-nav"] = link.page;
					attrs["data-nav-target"] = self.controller.openLinkInVignette() ? "vignette" : "application";
					if (link.sDataUrl) {
						attrs["data-sdata-url"] = link.sDataUrl;
					}
					if (link.parameters) {
						var params = utils.parseExpression(link.parameters, rowData);
						attrs["data-sdata-parameters"] = params;
					}
					eventListener.triggerNavigation(self.$$elmt, attrs);
				}
			} // Else if look up nothing - just notify
		},
		/**
		 * handle link to detail of the row
		 * Calculate information dao/proto/name for rorwDetail page
		 * Each time a rowDetail link is generated, it stores info in _rowDetailCache
		 * 		Path of array from root page
		 * 		Path of row ids
		 * This method retrieve dao/proto objects from stored info and stores them _rowDetailInfo
		 * 		rowDetail page needs _rowDetailInfo.dao in lodaData method
		 *  	pageHelpers._getRowdetailPage needs _rowDetailInfo.proto and _rowDetailInfo.pathBind to build rowDetail page proto
		 */
		_actRowDetail: function(rowId) {
			var self = this;
			try {
				// Info that has been set by the builder - Contains path of $binds and ids for each row displayed
				var info = self._rowDetailCache[rowId];
				if (!info) throw new Error("rowDetailGetDao - Unexpected null row info");
				var rootDao = self.getDao();
				// We need to start form the page because pathBind is the path of the array starting from page
				// -> rootDao is the page's Dao
				while (rootDao.parent) {
					rootDao = rootDao.parent;
				}
				var proto = self.prototype;
				// -> proto is the page's Proto
				while (proto.parent) {
					proto = proto.parent;
				}
				// Id of the row for a given path (given by index)
				var pathId = info.isCreate ? null : info.pathId;
				// Path of targeted array
				var pathBind = info.pathBind;
				var dao = rootDao,
					res;
				var protoPath = ["$properties"];
				for (var i = 0; i < pathBind.length; i++) {
					protoPath.push(pathBind[i]);
					// Get Proto and dao for the ith array
					proto = proto.getPrototype(protoPath.join("."));
					if (!info.isCreate) {
						dao = dao.getArrayData(pathBind[i], proto);
						// Read the row by id in dao
						res = self._getRowById(pathId[i], dao);
						if (!res) throw new Error("rowDetailGetDao - Row not found " + pathBind[i] + "." + pathId[i]);
						// Current dao
						dao = res.row;
					}
					// Current path rrot in protoypt
					protoPath = ["$item.$properties"];
				}
				proto = proto.getPrototype("$item", {
					$url: "",
					$typ: "rowdetail"
				});
				pathBind = info.pathBind.join('.');
				// Stores row Detail in info; RoxDeatil info will request his info in loadData method
				self._rowDetailInfo = {
					// Path of the array from root (page) - use dto calculated the id of the rowDetail page
					pathBind: pathBind,
					// dao of rowDetail page
					dao: info.isCreate ? daoSdata.getArrayEmptyRow(proto, pathBind) : dao.clone(),
					// Proto of row detail page
					proto: proto
				};
				// Trigger a navigation to rowDetail page
				var attrs = {
					"data-control-id": self.id,
					"data-parent-id": self.controller.id,
					"data-nav": "rowdetail",
					// rowId is the key passed by rowDetail page to this.rowDetailGetDao
					"data-params": rowId
				};
				if (self.controller.isVignette) {
					// It's the vignette which will load the page
					// We open row detail in the same vignette
					attrs["data-nav-target"] = "vignette";
				}
				// Notify last selected row - see selectLastSelectedRow - true to update UI because link doesn't destroy the page
				self.controller.notifSelectRow(self.id, rowId, null, true);
				eventListener.triggerNavigation(self.$$elmt, attrs);
			} catch (e) {
				globals.getModal().error("Error loading row detail page", e);
			}
		},
		getEmptyRow: function() {
			return daoSdata.getArrayEmptyRow(this.prototype, this.$bind);
		},
		/**
		 * Register a row in rowDetail cache to be able to reteive infortiaon on ckcik on 'rowDetail' Link (_actRowDetail)
		 */
		rowDetailAdd: function(id, data) {
			this._rowDetailCache[id] = data;
		},
		/**
		 * 	rowId:	Id of selected row - empty/null if creation
		 *  Return the dao of the selected row (see _actRowDetail)		 *
		 **/
		rowDetailGetDao: function(create) {
			// Read/ Edit row detail
			return this._rowDetailInfo.dao;
		},
		/**
		 * Return the prototype of a row detail page
		 */
		rowDetailGetPrototype: function() {
			return this._rowDetailInfo.proto;
		},
		/**
		 * Returns the id of the page used to store it into application page
		 * The rowDetail page is generated one time
		 */
		rowDetailGetPageName: function(root) {
			if (!this._rowDetailInfo) throw new Error("rowDetailGetPageName - Null details row data");
			// To store the generated page in aplication page we nee the full path of the selected row
			// By exmaple for AQMCRUDM -  if we add a $article to the array level 1 we display i the card array level 2
			// When we click on rowDetail we need to display the row of level 2 ADEVADEVICEL.ADEVADEVICELADEVICELL
			// Page name is 
			//		AQMCRUDM.$details.ADEVADEVICEL if no article in ADEVADEVICEL
			//		AQMCRUDM.$details.ADEVADEVICEL.ADEVADEVICELADEVICELL if there's an article in ADEVADEVICEL
			//		AQMCRUDM.$details.ADEVADEVICEL.ADEVADEVICELADEVICELL.ADEVADEVICELADEVICELLDLLLif there's an article in ADEVADEVICEL.ADEVADEVICELADEVICELL
			return root + "." + this._rowDetailInfo.pathBind;
		},
		/**
		 * handle delete row
		 */
		_actDelrow: function(rowid) {
			modal.simpleConfirm("Do you want to delete this row ?\n\nId=" + rowid, function(confirmed) {
				if (confirmed) {

				}
			});
		},
		/**
		 * Select the last selected row
		 * lastSelectedrow is stored in page context and restores on back
		 * It highlights the last selected row
		 * Done by builder because depends on the way array has been rendered
		 */
		selectLastSelectedRow: function(rowId, show) {
			this.builder.selectLastSelectedRow(rowId, show);
		},
		/**
		 * Refreshes the control
		 */
		refresh: function(controllerDao, options) {
			var self = this;
			if (self.builder == null) throw new Error("Null builder");
			self.builder.buildHtml(self._setArrayData(controllerDao), options);
		},
		/**
		 *	returns array rows
		 *		depends on the kind of page query/lookup or detail/edit
		 *		called one time to create the dao - then use getArrayData()
		 **/
		readArrayData: function(controllerDao) {
			var self = this;
			if (self.prototype.isQuery()) {
				return controllerDao.getQueryData(self.prototype);
			} else if (self.prototype.isLookup()) {
				return controllerDao.getLookupData(self.prototype);
			} else {
				return controllerDao.getArrayData(self.$bind, self.prototype);
			}
		},
		/**
		 *	Set array data - depends on array type
		 **/
		_setArrayData: function(controllerDao) {
			var self = this;
			// Clear control content
			self.empty();
			_destroyArrayData(self._arrayData);
			self._arrayData = controllerDao ? self.readArrayData(controllerDao) : {
				$resources: []
			};
			if (self._arrayData == null) throw new Error("Null arrayData");
			self.isEmpty = self._arrayData.$resources.length === 0;
			// Build the base structure common to all ctrls - Title and value
			var title = self.getTitle();
			if (self._displayTitle(title)) {
				if (!self.$$ttl) self.$$ttl = $(uiUtils.createDomElement('div', ["s-m-title"])).appendTo(self.$$elmt);
				self.$$ttl.text(title);
			} else if (self.$$ttl) {
				self.$$ttl.empty();
			}
			// After title
			self.$$value = $(uiUtils.createDomElement('div', ["s-m-value"], null, null, self.$$elmt));
			return self._arrayData;
		},
		_displayTitle: function(title) {
			if (title == null || title.trim().length === 0) return false;
			if (this.getAuthoring("$isTitleHidden") === true) return false;
			return this._displayArray();
		},
		_displayArray: function() {
			return this.controller.isEditMode() === true || this.isEmpty !== true || this.getAuthoring("$displayIfEmpty") === true;
		},
		/**
		 *	returns array rows
		 *		controllerDao optional
		 **/
		getArrayData: function() {
			return this._arrayData;
		},
		waitStart: function() {
			var self = this;
			if (!self._waiting) {
				// TODO - Optimization
				self._waiting = uiUtils.waitWheelCreate(self.$$elmt.parent());
				self._waiting.$$bckg.css({
					position: "absolute"
				});
				self._waiting.$$wheel.css({
					position: "absolute"
				});
			}
			uiUtils.waitWheelStart(self._waiting);
		},
		waitStop: function() {
			var self = this;
			if (self._waiting) {
				uiUtils.waitWheelStop(self._waiting);
			}
		},
		// arrayData is used for recursice search in arrays nested in arrays
		_getRowById: function(rowId, arrayData) {
			var self = this;
			var result = null;
			arrayData = arrayData || self._arrayData;
			if (!arrayData) return result;
			var idx = 0;
			arrayData.$resources.some(function(r) {
				if (r.getValue("$uuid") === rowId) {
					result = r;
					return true;
				}
				idx++;
			});
			return result ? {
				row: result,
				idx: idx
			} : null;
		},
		/**
		 * return the context to save. It will be be restored afer page has been loaded
		 */
		savedCtxCreate: function() {
			return this.builder.savedCtxCreate();
		},
		/**
		 * Called by the page to restore the context
		 */
		savedCtxRestore: function(ctx) {
			this.builder.savedCtxRestore(ctx);
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/field/ctrlReference',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/sdata/sdataUtils','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/controls/field/ctrlFieldBase','syracuse-tablet/html/js/ui/fontUtils'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

/**
 *  auth example
 *  {
 *  	$value: {
 *  		$theme: "A",
 *  		$valueFirst: false,
 *  		$position: "stack",
 *  		$refDescrHidden: false,
 *  		$refDescr: {
 *  			$theme: "B",
 *  			$fontSize: "small",
 *  			$withTitle: true,
 *  			$before: true
 *  		}
 *  	}
 *  };
 */

var _Klass = utils.defineClass(

	function CtrlReference(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
		// See ctrlQuantity - Control that displays the unit
		self.isUnit = self.options.isUnit === true;
		if (self.isUnit) {
			self.$isEditMode = false;
			self.cssType = "s-m-unit";
		} else {
			self.cssType = "s-m-ref";
		}
	}, Base, {
		/**
		 * Init the properties to allow reuse of this control
		 */
		initReuseProperties: function() {
			Base.prototype.initReuseProperties.call(this);
			this.picker = null;
		},
		getValue: function(prop) {
			var val = Base.prototype.getValue.call(this);
			return val ? val[prop || "$value"] || "" : "";
		},
		buildFieldTitle: function(fieldSlot, buildOptions) {
			var self = this;
			return self.isUnit ? null : Base.prototype.buildFieldTitle.call(self, fieldSlot, buildOptions);
		},
		buildFieldValue: function(fieldSlot, buildOptions) {
			var self = this;
			var parentElmt = Base.prototype.buildFieldValue.call(self, fieldSlot);
			var value = self.getValue();
			if (self.$isEditMode) {
				self.buildEditValue(parentElmt, self.getValue());
			} else {
				var descr = (self.getValue("$description") || "").trim();
				var title = (self.getValue("$title") || "").trim();
				if (self.isUnit) {
					self.buildUnitValue(parentElmt, value, descr, title);
				} else {
					self.buildDetailValue(parentElmt, value, descr, title);
				}
			}
		},
		buildEditValue: function(parentElmt, value) {
			var self = this;
			var bsInputGroup = uiUtils.createDomElement("div", ["input-group"], null, null, parentElmt);
			self.createMainInput(bsInputGroup, self.getFormattedValue(value));
			var $lookuplink = self.prototype.getDataByPath("$item.$links.$lookup");
			if (!$lookuplink) {
				// build lookup link
				throw new Error("ctrlReference - Expected $lookup link");
			} else {
				// get dom $lookup link parameters/attributes
				var span = uiUtils.createDomElement("span", ["input-group-btn"], null, null, bsInputGroup);
				var attrs = self._getLinkAttrs(sdataUtils.getLinkInfo($lookuplink.$url, self.getDao()), {
					"data-param": self.id,
					"data-parent-id": self.controller.id,
					"data-control-id": self.id,
					"title": self.prototype.resolveExpression($lookuplink.$title) || "Lookup"
				});
				self.picker = uiUtils.createDomElement("a", ["btn", "btn-default", "s-m-meta"], null, attrs, span);
				uiUtils.createDomElement("span", fontUtils.refFieldIcon(), null, null, self.picker);
			}
		},
		buildDetailValue: function(parentElmt, value, descr, title) {
			var self = this;
			// build container
			var container = self.addLink(parentElmt);

			// build container of reference value if any
			if (value.length > 0) {
				// set description content according to authoring value of $refDescFormat
				// Available values are desc, title, desctitle, and titledesc. Default is "desc"
				var descContent;
				var $refDescFormat = self.getAuthoring("$refDescFormat");
				switch ($refDescFormat) {
					case "title":
						descContent = title;
						break;
					case "desctitle":
						descContent = self._combineTexts(descr, title);
						break;
					case "titledesc":
						descContent = self._combineTexts(title, descr);
						break;
						// "desc" will be considered as default
					default:
						descContent = descr;
						break;
				}

				// build content and set position according to description content authoring position $refDescPosition
				// available values are bottom, right, left, top, none. Default is "right"
				var $refDescPosition = self.getAuthoring("$refDescPosition");
				var $$value = $("<div>").addClass("s-m-ref-val").text(value);
				var $$desc = $("<div>").addClass("s-m-descr").text(descContent);
				var arr;
				switch ($refDescPosition) {
					case "bottom":
						$(container).append($$value).append($$desc);
						break;
					case "left":
						$(container).append($$desc).append($$value);
						arr = [$$value, $$desc];
						$.each(arr, function(index, $$ee) {
							$$ee.css("display", "inline-block");
						});
						$$desc.css("padding-right", "5px");
						break;
					case "top":
						$(container).append($$desc).append($$value);
						break;
					case "none":
						$(container).append($$value);
						break;
					case "right": // "right" will be considered as default
					default:
						arr = [$$value, $$desc];
						$(container).append($$value).append($$desc);
						$.each(arr, function(index, $$ee) {
							$$ee.css("display", "inline-block");
						});
						$$desc.css("padding-left", "5px");
				}
			}
		},
		buildUnitValue: function(parentElmt, value, descr, title) {
			var self = this;
			var label = descr.length > 0 ? descr : title.length > 0 ? title : value;
			// TODO See how we display unit
			label = value || "";
			if (label && label.toLowerCase) label = label.toLowerCase().smCapitalize();
			uiUtils.createDomElement("span", ["s-m-descr"], label, null, self.addLink(parentElmt));
		},
		addLink: function(parentElmt) {
			var self = this;
			if (self.options.isArrayChild === true) return parentElmt;
			var $detaillink = self.prototype.getDataByPath("$item.$links.$details");
			// if links && $links.$details, container is an anchor, otherwise it is a simple div
			if ($detaillink) {
				// get dom link parameters/attributes (we consider only $details)
				return uiUtils.createDomElement("a", null, null, self._getLinkAttrs(sdataUtils.getLinkInfo($detaillink.$url, self.getDao()), {
					"title": self.prototype.resolveExpression($detaillink.$title) || "Detail"
				}), parentElmt);
			} else {
				return parentElmt;
			}
		},
		/**
		 * Set field value after a lookup selection
		 * 	rowData: data of selected row
		 */
		setLookupValue: function(rowData) {
			var self = this;
			// Field that contains the value
			var lookupField = self.prototype.getLookupValue();
			if (lookupField) {
				var val = rowData[lookupField];
				if (val != null) {
					self.setFieldValue(val);
					$(self.domInput).focus();
				}
			}
		},
		_getLinkAttrs: function(link, options) {
			var self = this;
			var attrs = {
				"href": "#",
				"data-nav": link.page,
				"data-sdata-url": link.sDataUrl
			};
			if (self.controller.isVignette) {
				// Its the vignette which will load the page
				attrs["data-nav-target"] = self.controller.openLinkInVignette() ? "vignette" : "application";
			}
			if (options) {
				for (var p in options) attrs[p] = options[p];
			}
			return attrs;
		},
		_combineTexts: function(el1, el2) {
			var res;
			// el1-el2 || el1 || el2
			res = (el1 && el2) ? (el1 === el2 ? el1 : el1 + "-" + el2) : (el1 || el2 || "");
			return res;
		}

	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/layout/layoutBase',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/structElmt','syracuse-tablet/html/js/ui/uiUtils'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/structElmt').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');

var _Klass = utils.defineClass(function LayoutBase(controller, type, article, opts) {
	var self = this;
	Base.call(self, controller, type, article, opts);
	self.title = article.$title;
}, Base, {
	/**
	 * Init the properties to allow reuse of this control
	 */
	initReuseProperties: function() {
		Base.prototype.initReuseProperties.call(this);
		this.$$header = null;
	},
	destroy: function() {
		var self = this;
		Base.prototype.destroy.call(self);
	},
	createId: function(typeName) {
		var self = this;
		return utils.readableuid(typeName, self.article.$layoutType);
	},
	buildHtml: function($$parent, controllerDao, buildOptions) {
		var self = this;
		Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);
		self.createRootElement(["s-m-layout"], $$parent);
		if (self.article.$title && (buildOptions == null || buildOptions.noTitle)) {
			self.buildTitle();
		}
	},

	onResize: function(evt) {
		this.children.forEach(function(child) {
			if (child.onResize) child.onResize(evt);
		});
	},
	buildTitle: function($$rootLyt, $$parent, controllerDao, destroyAfter) {
		this.$$header = $(uiUtils.createDomElement('header', null, this.article.$title, null, this.$$elmt));
	}
});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/layout/layoutRow',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/layout/layoutBase'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/layout/layoutBase').Klass;

/**
 */
var _Klass = utils.defineClass(

	function LayoutRow(controller, type, article, opts) {
		var self = this;
		Base.call(self, controller, type, article, opts);
	}, Base, {

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);
			self.$$elmt.addClass("s-m-row");
			self.$$elmt.addClass("row");
			self._setHeight();
			$.each(self.children, function(index, child) {
				child.buildHtml(self.$$elmt, controllerDao, buildOptions);
			});
		},
		_setHeight: function() {
			var self = this;
			if (self.article.$rowHeight) {
				self.$$elmt.css("height", self.article.$rowHeight);
			}
		}
	}
);

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/layout/layoutStack',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/layout/layoutBase'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/layout/layoutBase').Klass;

/**
 * cssOptions
 * 		cssLayout, cssCell: class added to default ones
 * default classes can  be overridden
 */
var _Klass = utils.defineClass(
	function LayoutStack(controller, type, article, opts) {
		var self = this;
		Base.call(self, controller, type, article, opts);
	}, Base, {
		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);
			self.$$elmt.addClass("s-m-stack");
			if (buildOptions && buildOptions.makeFullHeight === true) {
				self.$$elmt.height("100%");
			}
			$.each(self.children, function(index, child) {
				child.buildHtml(self.$$elmt, controllerDao, buildOptions);
			});
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/layout/layoutTab',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/layout/layoutBase','syracuse-tablet/html/js/ui/uiUtils'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/layout/layoutBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');

var _Klass = utils.defineClass(
	function LayoutTab(controller, type, article, opts) {
		var self = this;
		Base.call(self, controller, type, article, opts);
	}, Base, {
		/**
		 * Build Html recursively
		 */

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);
			self.$$elmt.addClass("s-m-tabs");
			var slot = uiUtils.createDomElement("div", [self.article.$layoutType]);
			$.each(self.children, function(index, layout) {
				layout.isTabSection = true;
				var item = uiUtils.createDomElement("div", ["s-m-layout-cell"], null, {
					"style": "display:" + (index != 0 ? "none" : "")
				}, slot);
				layout.buildHtml($(item), controllerDao, buildOptions);
			});
		},
		/**
		 * TODO - FDB - DOESNT WORK - Not attached to DOM
		 */
		buildTitle: function() {
			/*
			var self = this;
			var header = uiUtils.createDomElement('header', ["s-m-layout-header"]);
			var tabSlot = uiUtils.createDomElement("div", ["s-m-tabs-slot"]);
			var tabsContainer = uiUtils.createDomElement("ul", ["nav,nav-tabs"], null, {
				"role": "tablist"
			});
			$.each(self.children, function(index, layout) {
				var tabClass = index == 0 ? ["active"] : null;
				var tab = uiUtils.createDomElement("li", tabClass);
				var tabLink = uiUtils.createDomElement("a", ["s-m-tab"], layout.article.$title, {
					"href": "#"
				});
				tab.appendChild(tabLink);
				tabsContainer.appendChild(tab);
			});
			tabSlot.appendChild(tabsContainer);
			container.appendChild(header);
			*/
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/layout/layoutHubGroup',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/layout/layoutBase','syracuse-tablet/html/js/ui/uiUtils'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/layout/layoutBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');

var _validSizes = ["small", "medium", "wide", "large", "full"];

var _settings = {
	landscapeBaseSize: 90, // Base size to allow horizontal scrolling: 90 Nexus 10, 100 iPad 2, 120 Surface
	landscapePadX: 5,
	landscapePadY: 5,

	portraitPadX: 5,
	portraitPadY: 5,
	portraitWideMinWidth: 768
};

exports.minLandscapeHeigth = _settings.landscapeBaseSize * 4 + _settings.landscapePadY * 5 + 40;

/**
 * Layout node that can only be used inside layoutHub parent nodes
 * Renders a group of tiles using the available space from top to bottom and then wraps to the right
 * Child elements bound to this layout may set "$size" attribute to define their size:
 * - small		- four tiles will fit into one group from left to right
 * - medium		- two tiles fit into one group from left to right, also double height of "small"
 * - wide		- one tile fits into one group from left to right, same height as "medium"
 * - large		- same width as "wide" and double height of "wide"/"medium"
 * - full		- same width as "wide", uses one full column (rounded to tile size medium)
 */
var _Klass = utils.defineClass(
	function LayoutHubGroup(controller, type, article, opts) {
		var self = this;
		Base.call(self, controller, type, article, opts);
	}, Base, {
		/**
		 * Build full html structed but do not yet apply position and size attributes (Will be done in a later step or on resize)
		 */
		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);
			self.$$elmt.addClass("s-m-hub-group");

			self._buildCellStructure(controllerDao, buildOptions);
		},

		_buildCellStructure: function(controllerDao, buildOptions) {
			var self = this;
			self.cells = [];
			var cell = null;
			self.children.forEach(function(layout) {
				var size = (layout.article && layout.article.$size) || "medium";
				if (_validSizes.indexOf(size) < 0) {
					size = _validSizes[1];
					layout.article = layout.article || {};
					layout.article.$size = size;
				}
				if (!cell) {
					cell = self._createCell(size);
					cell.domItem = uiUtils.createDomElement("div", null, null, null, self.$$elmt);
					self.cells.push(cell);
				}
				if (size === "small") {
					layout.buildHtml($(cell.domItem), controllerDao, buildOptions);
					cell.children.push(layout);
					if (cell.children.length === 4) {
						cell = null;
					}
				} else {
					if (cell.children.length > 0) {
						cell = self._createCell(size);
						cell.domItem = uiUtils.createDomElement("div", null, null, null, self.$$elmt);
						self.cells.push(cell);
					}
					layout.buildHtml($(cell.domItem), controllerDao, buildOptions);
					cell.children.push(layout);
					cell = null;
				}
			});
		},

		_createCell: function(size) {
			var self = this;
			size = (size === "small" ? "medium" : size);
			var cell = {
				size: size,
				children: []
			};
			return cell;
		},

		onResize: function(evt, options) {
			this.calculateLayout(options);
			Base.prototype.onResize.call(this, evt);
		},


		calculateLayout: function(options) {
			var self = this;
			var size;

			self._headerSpace = self.$$header && self.$$header.height() || 0;
			self._width = 0;
			self._height = 0;

			self.hubGroupOptions = options;

			if (self.hubGroupOptions.orientation === "landscape") {
				self._calculateLayoutHorizontal();
			} else {
				self._calculateLayoutVertical();
			}

			self.cells.forEach(function(cell) {
				size = cell.size;
				cell.domItem.style.left = cell.x + "px";
				cell.domItem.style.top = (cell.y + self._headerSpace) + "px";
				cell.domItem.style.width = self._sizes[size].width + "px";
				cell.domItem.style.height = self._sizes[size].height + "px";
				cell.domItem.style.position = "absolute";

				if (cell.x + self._sizes[size].width > self._width) {
					self._width = cell.x + self._sizes[size].width;
				}
				if (cell.y + self._sizes[size].height > self._height) {
					self._height = cell.y + self._sizes[size].height;
				}

				var x = 0;
				var y = 0;
				cell.children.forEach(function(tileLayout) {
					size = (tileLayout.article && tileLayout.article.$size) || "medium";
					var domItem = tileLayout.$$elmt[0];
					domItem.style.left = x + "px";
					domItem.style.top = y + "px";
					domItem.style.width = self._sizes[size].width + "px";
					domItem.style.height = self._sizes[size].height + "px";
					domItem.style.position = "absolute";

					if (x !== 0) {
						x = 0;
						y += self._sizes[size].height + self.hubGroupOptions.padY;
					} else {
						x += self._sizes[size].width + self.hubGroupOptions.padX;
					}
				});
			});
			var style = self.$$elmt.get(0).style;
			if (self.hubGroupOptions.orientation === "landscape") {
				style.top = "0px";
				style.left = self.hubGroupOptions.posX + "px";
				style.width = (self._width + _settings.landscapePadX) + "px";
				style.height = (self.hubGroupOptions.maxHeight - self._headerSpace) + "px";
			} else {
				style.top = self.hubGroupOptions.posY + "px";
				style.left = "0px";
				self._width = self._width + _settings.portraitPadX;
				style.width = self._width + "px";
				self._height += self._headerSpace + _settings.portraitPadY;
				style.height = self._height + "px";
			}
		},

		/**
		 * Calc tile positions in horizontal scrolling model
		 */
		_calculateLayoutHorizontal: function() {
			var self = this;

			self.hubGroupOptions.baseSize = _settings.landscapeBaseSize;
			self.hubGroupOptions.padX = _settings.landscapePadX;
			self.hubGroupOptions.padY = _settings.landscapePadY;

			self.hubGroupOptions.maxGroupHeight = self.hubGroupOptions.maxHeight - self._headerSpace;
			self.hubGroupOptions.maxGroupWidth = 4 * self.hubGroupOptions.baseSize + 3 * self.hubGroupOptions.padX;

			self.hubGroupOptions.maxFullTileHeight = Math.floor((self.hubGroupOptions.maxGroupHeight + self.hubGroupOptions.padY) / (self.hubGroupOptions.baseSize + self.hubGroupOptions.padY) / 2) * (self.hubGroupOptions.baseSize + self.hubGroupOptions.padY) * 2 - self.hubGroupOptions.padY;

			self._sizes = {
				small: {
					width: self.hubGroupOptions.baseSize,
					height: self.hubGroupOptions.baseSize
				},
				medium: {
					width: self.hubGroupOptions.baseSize * 2 + self.hubGroupOptions.padX,
					height: self.hubGroupOptions.baseSize * 2 + self.hubGroupOptions.padY
				},
				wide: {
					width: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padX * 3,
					height: self.hubGroupOptions.baseSize * 2 + self.hubGroupOptions.padY
				},
				large: {
					width: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padX * 3,
					height: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padY * 3
				},
				full: {
					width: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padX * 3,
					height: self.hubGroupOptions.maxFullTileHeight
				}
			};

			var relX = 0;
			var relY = 0;
			var x = 0;
			var y = 0;

			self.cells.forEach(function(cell) {
				cell.w = self._sizes[cell.size].width;
				cell.h = self._sizes[cell.size].height;
				if ((y + cell.h > self.hubGroupOptions.maxGroupHeight) ||
					(y !== 0 && cell.size === "full")) // full size cell always use one full column 
				{
					y = 0;
					relX += self.hubGroupOptions.maxGroupWidth + self.hubGroupOptions.padX;
					x = relX;
				}
				if (cell.size === "medium") {
					if ((x - relX) + cell.w > self.hubGroupOptions.maxGroupWidth) {
						x = relX;
						y += cell.h + self.hubGroupOptions.padY;
					}
					if (y + cell.h > self.hubGroupOptions.maxGroupHeight) {
						y = 0;
						relX += self.hubGroupOptions.maxGroupWidth + self.hubGroupOptions.padX;
						x = relX;
					}
					cell.x = x;
					cell.y = y;
					x += cell.w + self.hubGroupOptions.padX;
				} else {
					if (x !== relX) {
						x = relX;
						y += self._sizes.medium.height + self.hubGroupOptions.padY;
					}
					if (y + cell.h > self.hubGroupOptions.maxGroupHeight) {
						y = 0;
						relX += self.hubGroupOptions.maxGroupWidth + self.hubGroupOptions.padX;
						x = relX;
					}
					cell.x = x;
					cell.y = y;
					y += cell.h + self.hubGroupOptions.padY;
				}
			});
		},

		/**
		 * Calc tile positions in horizontal scrolling model
		 */
		_calculateLayoutVertical: function() {
			var self = this;

			if (self.hubGroupOptions.maxWidth >= _settings.portraitWideMinWidth) {
				// Tablet default, display maximum of 8 tiles in a row in portrait mode
				self.hubGroupOptions.padX = _settings.portraitPadX;
				self.hubGroupOptions.padY = _settings.portraitPadY;
				self.hubGroupOptions.baseSize = Math.floor((self.hubGroupOptions.maxWidth - 9 * self.hubGroupOptions.padX) / 80) * 10;
				self.hubGroupOptions.maxGroupWidth = 8 * self.hubGroupOptions.baseSize + 7 * self.hubGroupOptions.padX;
				self.hubGroupOptions.maxGroupHeight = self.hubGroupOptions.maxHeight - self._headerSpace;
				self.hubGroupOptions.maxFullTileHeight = self.hubGroupOptions.maxGroupHeight - self.hubGroupOptions.padY;
			} else {
				// For smaller devices: display maximum of 4 tiles in a row in portrait mode
				self.hubGroupOptions.padX = _settings.portraitPadX;
				self.hubGroupOptions.padY = _settings.portraitPadY;
				self.hubGroupOptions.baseSize = Math.floor((self.hubGroupOptions.maxWidth - 5 * self.hubGroupOptions.padX) / 40) * 10;
				self.hubGroupOptions.maxGroupWidth = 4 * self.hubGroupOptions.baseSize + 3 * self.hubGroupOptions.padX;
				self.hubGroupOptions.maxGroupHeight = self.hubGroupOptions.maxHeight - self._headerSpace;
				self.hubGroupOptions.maxFullTileHeight = self.hubGroupOptions.maxGroupHeight - self.hubGroupOptions.padY;
			}

			self._sizes = {
				small: {
					width: self.hubGroupOptions.baseSize,
					height: self.hubGroupOptions.baseSize
				},
				medium: {
					width: self.hubGroupOptions.baseSize * 2 + self.hubGroupOptions.padX,
					height: self.hubGroupOptions.baseSize * 2 + self.hubGroupOptions.padY
				},
				wide: {
					width: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padX * 3,
					height: self.hubGroupOptions.baseSize * 2 + self.hubGroupOptions.padY
				},
				large: {
					width: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padX * 3,
					height: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padY * 3
				},
				full: {
					width: self.hubGroupOptions.baseSize * 4 + self.hubGroupOptions.padX * 3,
					height: self.hubGroupOptions.maxFullTileHeight
				}
			};

			var x = 0;
			var y = 0;
			var yInc = 0;
			self.cells.forEach(function(cell) {
				cell.w = self._sizes[cell.size].width;
				cell.h = self._sizes[cell.size].height;

				cell.x = x;
				cell.y = y;

				if (x + cell.w > self.hubGroupOptions.maxGroupWidth) {
					x = 0;
					y += yInc + self.hubGroupOptions.padY;
					cell.x = x;
					cell.y = y;
					yInc = cell.h;
					x += cell.w + self.hubGroupOptions.padX;
				} else {
					x += cell.w + self.hubGroupOptions.padX;
					yInc = cell.h > yInc ? cell.h : yInc;
				}
			});
		},

		getWidth: function() {
			return this._width;
		},
		getHeight: function() {
			return this._height;
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/layout/layoutHub',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/layout/layoutBase','syracuse-tablet/html/js/controls/layout/layoutHubGroup'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/layout/layoutBase').Klass;
var layoutHubGroup = require('syracuse-tablet/html/js/controls/layout/layoutHubGroup');

/**
 * Top level layout node that must only contain layoutHubGroups as children
 * This "hub" expands horizontally and only uses the available vertical space
 * Use this to define pages which only scroll horizontally
 */
var _Klass = utils.defineClass(
	function LayoutHub(controller, type, article, opts) {
		var self = this;
		Base.call(self, controller, type, article, opts);
	}, Base, {

		destroy: function() {
			Base.prototype.destroy.call(this);
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			buildOptions = buildOptions || {};
			buildOptions.noTitle = true;
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);
			self.$$elmt.addClass("s-m-hub");
			self.children.forEach(function(child) {
				child.buildHtml(self.$$elmt, controllerDao, buildOptions);
			});
		},
		/**
		 * Resize handler called by window.resize
		 */
		onResize: function(evt) {
			var self = this;
			var $$p = self.$$elmt.parent();
			var pos = self.$$elmt.position();
			var w = $$p.width();
			var h = $$p.height() - pos.top;
			var rel = w / h;
			var orientation = (rel > 1.2 && h >= layoutHubGroup.minLandscapeHeigth) ? "landscape" : "portrait";
			self.$$elmt.height(h);
			var posX = 0;
			var posY = 0;
			var opts;

			this.children.forEach(function(child) {
				opts = {
					posX: posX,
					posY: posY,
					maxHeight: h,
					maxWidth: w,
					orientation: orientation
				};
				child.onResize(evt, opts);
				if (orientation === "landscape") {
					posX += child.getWidth() + 10;
				} else {
					posY += child.getHeight() + 10;
				}
			});
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/layout/layoutTile',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/layout/layoutBase'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/layout/layoutBase').Klass;

var _Klass = utils.defineClass(function LayoutTile(controller, type, article, opts) {
	var self = this;
	Base.call(self, controller, type, article, opts);
}, Base, {
	buildHtml: function($$parent, controllerDao, buildOptions) {
		var self = this;
		Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);
		self.$$elmt.addClass("s-m-tile");
		self._setCellColorClass();
		$.each(self.children, function(index, child) {
			child.buildHtml(self.$$elmt, controllerDao, buildOptions);
		});
	},
	_setCellColorClass: function() {
		var self = this;
		var color = self.article.$bgColor;
		if (!color) {
			color = "lime";
		}
		self.$$elmt.addClass("s-m-bg-" + color);
	}
});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/layout/layoutCell',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/layout/layoutBase','syracuse-tablet/html/js/ui/uiUtils'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/layout/layoutBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');

var _Klass = utils.defineClass(function LayoutCell(controller, type, article, opts) {
	var self = this;
	Base.call(self, controller, type, article, opts);
}, Base, {
	/**
	 * Init the properties to allow reuse of this control
	 */
	initReuseProperties: function() {
		Base.prototype.initReuseProperties.call(this);
		this.$$cell = null;
	},
	buildHtml: function($$parent, controllerDao, buildOptions) {
		var self = this;
		Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions);
		self.$$elmt.addClass("s-m-cell");
		self.$$cell = $(uiUtils.createDomElement("div", ["cell"], null, null, self.$$elmt));
		self._setCellColorClass();
		self._setCellSizeClasses();
		$.each(self.children, function(index, child) {
			child.buildHtml(self.$$cell, controllerDao, buildOptions);
		});
	},
	_setCellColorClass: function() {
		var self = this;
		var color = self.article.$bgColor;
		if (!color) {
			color = "lime";
		}
		self.$$cell.addClass("s-m-bg-" + color);
	},
	_setCellSizeClasses: function() {
		var self = this;
		var sizes = [{
			$prop: "$widthXs",
			$prefix: "col-xs-"
		}, {
			$prop: "$widthSm",
			$prefix: "col-sm-"
		}, {
			$prop: "$widthMd",
			$prefix: "col-md-"
		}, {
			$prop: "$widthLg",
			$prefix: "col-lg-"
		}];
		var last = 12;
		sizes.forEach(function(size) {
			var val = self.article[size.$prop];
			if (val != null && val > 0 && val <= 12) {
				last = val;
			} else {
				val = last;
			}
			var cls = size.$prefix + val;
			self.$$elmt.addClass(cls);
		});
	}

});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/vignetteBase',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/controls/ctrlBase','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/ui/fontUtils','syracuse-tablet/html/js/application/pageLoader','syracuse-tablet/html/js/application/pageHelper','syracuse-tablet/html/js/ui/modal','syracuse-tablet/html/js/helpers/notifications','syracuse-tablet/html/js/helpers/logger'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var PageLoader = require('syracuse-tablet/html/js/application/pageLoader').Klass;
var pageHelper = require('syracuse-tablet/html/js/application/pageHelper');
var modal = require('syracuse-tablet/html/js/ui/modal');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("app");

var _waitConfig = {
	className: 'waiting-blocks',
	elements: 5,
	auto: true,
	speed: 200
};
var _templates = {
	main: '\
		<section/>\
		<footer style="display:none"/> \
		<div class="s-m-waiting bckg" style="display:none"/> \
		<div class="s-m-waiting wheel" style="display:none"/> \
	',
	iframe: '\
		<br><iframe src="{{url}}" style="position: absolute; top: 0px; left: 0px; height: 100vh; width: 100vh;"/>\
	',
	refreshbtn: '\
		<a href="#" data-action="vignetteRefresh" class="' + fontUtils.vignetteIcons("refresh") + '" style="float:right"></a>\
	',
	navbtns: '\
		<a href="#" data-action="vignetteBack" class="' + fontUtils.vignetteIcons("back") + '" style="display:none"></a>\
		<a href="#" data-action="vignetteHome" class="' + fontUtils.vignetteIcons("home") + '" style="display:none"></a>\
	',
	vignetteError: '\
		<a href="#" data-action="vignetteError">{{text}}</a>\
	',
	linkPage: '<a href="{{href}}" data-nav-target="application" data-nav="{{data-nav}}" data-gadget-id="{{data-gadget-id}}" data-application-name="{{data-application-name}}" class="s-m-link-page">{{title}}</a>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};


var _Klass = utils.defineClass(

	function(controller, article, prototype, opts) {
		var self = this;
		article.$article = article.$article || {};
		Base.call(self, controller, article, prototype, opts);
		self._currentPage = null;
		self._pageLoader = null;
		self._$$wait = null;
		self._stateStack = [];
		self._error = null;
		self.displayStyle = prototype.data("$displayStyle");
		self.openLinkInVignette = globals.$config("openLinkInVignette");
		self.enableRefresh = false;
	}, Base, {
		destroy: function() {
			var self = this;
			self._error = null;
			// destroy all pages attached to the vignette
			self.clearContent();
			uiUtils.waitPluginDestroy(self._$$wait);
			if (self._pageLoader = null) {
				self._pageLoader.destroy();
				self._pageLoader = null;
			}
			self._stateStack = [];
			Base.prototype.destroy.call(self);
		},
		/**
		 * If vignette contains a page return the control object identified by id
		 */
		getPageControl: function(ctrlId) {
			return this._currentPage && this._currentPage.getControl ? this._currentPage.getControl(ctrlId) : null;
		},
		getPage: function() {
			return this._currentPage;
		},
		onResize: function(evt) {
			// We don't propagate parent page resize if page has not been loaded
			// --> onResize will be called when page has been loaded
			// Parent resize event is propagated only if we resize / change display after vignette has been loaded
			if (this._loaded && this._currentPage && this._currentPage.state.options.$displayStyle === "$full") {
				log && log("vignette onResize " + this.id);
				this._currentPage.onResize(evt);
			} else {
				log && log("vignette onResize skipped " + this.id);
			}
		},
		/**
		 * Change current page - called from eventListener
		 * 	data-nav action has been clicked in a vignette's link
		 * 	we could have a parameter that indicates if the link has to be opened full page or inside the vignette
		 */
		changePage: function(state, options) {
			options = options || {};
			// Propagate openLinkInVignette to child page (- used to open reflinks...
			options.openLinkInVignette = this._linkInside();
			// Always full page
			options.$displayStyle = "$full";
			this._loadPage(state, options);
		},
		/**
		 * Refresh current page - called from eventListener
		 */
		refreshPage: function(options) {
			var self = this;
			if (!self._currentPage) throw new Error("No current page");
			if (self._error) this._removeError();
			self._currentPage.refresh(options, {
				waitStart: function(controlId) {
					// Wait managed by vignette
					self.waitStart();
				},
				waitStop: function(controlId) {
					self.waitStop();
				}
			}).then(function() {
				//	Eventually do something in vignette control	
			}).fail(function(e) {
				modal.error("Refresh page on vignette", e);
			});
		},
		hasBtnsBar: function() {
			return this._linkInside() || this.enableRefresh;
		},
		clearContent: function() {
			var self = this;
			if (self._$$content) {
				pageHelper.removeAllPages(self._$$content);
				self._$$content.empty();
			}
			// _currentPage has ben destroyed by removeAllPages
			if (self._currentPage) self._currentPage = null;
		},
		_linkInside: function(state) {
			if (this.openLinkInVignette === true) return true;
			var name;
			if (state == null) {
				name = this._currentPage ? this._currentPage.state.name : null;
			} else if ($.isPlainObject(state)) {
				name = state.name;
			} else {
				name = state;
			}
			if (name === "rowdetail") this.openLinkInVignette = true;
			if (this._currentPage && this._currentPage.isChild) this.openLinkInVignette = true;;
			return this.openLinkInVignette;
		},
		/**
		 * Load a page
		 * 	action: 	back for a back in vignette actions
		 * 				home for a home in vignette actions
		 */
		_loadPage: function(state, options, action) {
			var self = this;
			self._loaded = false;
			self._error = null;
			if (!self._linkInside(state) && self._stateStack.length > 0) {
				// Clear content only that case. Otherwise we have to store cached paged inside the vignette
				self.clearContent();
			}
			if (!self._pageLoader) {
				/**
				 * Page loader shared with application
				 * Load a page
				 */
				self._pageLoader = new PageLoader({
					waitStop: function() {
						self.waitStop();
					},
					waitStart: function() {
						self.waitStart();
					},
					getRootElmt: function() {
						return self._$$content;
					},
					getCurrentPage: function() {
						return self._currentPage;
					},
					setCurrentPage: function(page) {
						self._currentPage = page;
					},
					historyPush: function(state) {
						// Add state in stack in all case - We need it for link to row Detail
						self._stateStack.push(state);
					},
					succeeded: function(dstPage, parentNotifInfo) {
						if (self.hasBtnsBar()) {
							self.refreshBtnsBar();
						}
						if (parentNotifInfo && parentNotifInfo.notifId) {
							/**
							 * _pageNotify  to notify only the page
							 */
							if (dstPage.id === parentNotifInfo.parentId) {
								notifications.pageNotify(parentNotifInfo.notifId, self._currentPage, parentNotifInfo.notifData, parentNotifInfo.controlId);
							} else {
								modal.error("Child page notification warning", "Parent page is not the current page");
							}
						}
						// page has been loaded - Used to prevent multiple onresize calls to current page
						self._loaded = true;
						log && log("vignette loaded" + self.id);
						// Call resize handler each time a page has been loaded for calculations
						self.onResize(null);
					},
					loadingError: function(deferred, state, e) {
						self._displayError("Loading page [" + state.name + "] error", e);
						// No reject
						deferred.resolve();
					},
					/**
					 * Specific interface method for vignettes
					 * Returns the context of a page nested in a vignette and also context of the vignette (selection)
					 * Called by the pageLoader after the vignette has been displayed
					 */
					savedCtxVignette: function() {
						// It's the dashboard that manage the storage
						return self.controller.savedCtxVignette(self);
					}
				});
			}
			try {
				var pageInfo;
				var articleCopy;
				if (typeof state === "string") {
					options = options || {};
					options.vignette = true;
					articleCopy = options.article; // Backup of original article, this MUST NOT be cloned
					pageInfo = pageHelper.getPageInfo(state, options, self._currentPage);
				} else if (action === "back" || action === "home") {
					pageInfo = state;
				} else {
					throw new Error("Unexpected object state");
				}
				if (articleCopy && pageInfo.options) {
					pageInfo.options.article = articleCopy;
				}
				if (pageInfo.options && pageInfo.options.$displayStyle === "$full") {
					// action "home" is not a back. It's like an open page because we want to store the state in history
					return self._pageLoader.load(pageInfo, action === "back");
				} else if (options.gadget) {
					var deferred = $.Deferred();
					self._addPicker({
						"data-nav": pageInfo.name,
						"data-gadget-id": options.gadget.data("$uuid"),
						"title": options.gadget.data("$title")
					});
					deferred.resolve();
					return deferred.promise();
				} else {
					throw new Error("Unexpected vignette page");
				}
			} catch (e) {
				self._displayError("Loading page error", e);
			}
		},

		_loadRepresentation: function(gadget, name, options) {
			var self = this;
			var name = name || gadget.getPageName();
			options = $.extend({}, options);
			options.openLinkInVignette = self._linkInside(name);
			options.$displayStyle = self.displayStyle;
			options.gadget = gadget;
			options.article = self.article.$article; // sub article in case the layout of a vignette is defined in the dashboard layout
			options.layoutPath = self.getAuthoringPath() + "-0";
			return self._loadPage(name, options);
		},

		_displayError: function(msg, detail) {
			var self = this;
			self._loaded = true;
			self._error = {
				message: msg,
				detail: detail
			};
			self._$$content.hide();
			self.$$elmt.addClass("s-m-error");
			self.$$elmt.prepend(_getHtml("vignetteError", {
				text: "Loading failed"
			}));
			self.refreshBtnsBar();
		},

		_removeError: function() {
			this.$$elmt.children('a[data-action="vignetteError"]').remove();
			this.$$elmt.removeClass("s-m-error");
			this._$$content.show();
			this._error = null;
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			if (self._stateStack.length > 0) {
				// There could be cached pages

			} else {
				Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions, ["s-m-vignette"]);
				self.$$elmt.html(_getHtml("main", {}));
				self._$$content = self.$$elmt.children("section");
				self.$$footer = self.$$elmt.children("footer");
				self._$$wait = uiUtils.waitPluginCreate(self.$$elmt.children(".s-m-waiting.wheel"), _waitConfig);
				self._$$waitBckg = self.$$elmt.children(".s-m-waiting.bckg");
			}
		},

		/**
		 * First load of the page
		 */
		load: function(name, options) {
			var self = this;
			options = options || {};
			var deferred = $.Deferred();
			var _finalize = function() {
				deferred.resolve();
			};
			var _fail = function(e) {
				self._displayError(e);
				// Deferred is not rejected because error is displayed in the vignette
				_finalize();
			};
			try {
				var gadget = self.prototype.getVignetteGadget();
				if (gadget && gadget.isValid()) {
					switch (gadget.data("$type")) {
						case "$representation":
						case "$stats":
						case "$request":
							self._loadRepresentation(gadget, name, options).then(function() {
								_finalize();
							}).fail(function(e) {
								_fail(e);
							});
							break;
						case "$dashboard":
							self._loadDashboard(gadget);
							break;
						case "$application":
							self._loadApplication(gadget);
							break;
						case "$external":
							self._loadExternal(gadget);
							break;
						case "$gadgetMissing":
							self._displayError("Referenced gadget does not exist: " + gadget.data("$uuid"));
							break;
						default:
							self._displayError("Unsupported gadget type: " + gadget.data("$type"));
							break;
					}
				} else {
					self._displayError("Invalid gadget" + (gadget ? " [" + gadget.getInvalidReason() + "]" : ""), gadget ? gadget.getJSON() : "Null gadget");
				}
				_finalize();
			} catch (e) {
				_fail(e);
			} finally {
				return deferred.promise();
			}
		},

		_loadDashboard: function(gadget) {
			this._addPicker({
				"data-nav": globals.getDashboardName(gadget.data("dashboardName")),
				"data-gadget-id": gadget.data("$uuid"),
				"title": gadget.data("$title")
			});
		},

		_loadApplication: function(gadget) {
			this._addPicker({
				"data-nav": gadget.data("applicationName") + ".$application",
				"data-application-name": gadget.data("applicationName"),
				"title": gadget.data("$title")
			});
		},

		_loadExternal: function(gadget) {
			var self = this,
				url = gadget.data("externalUrl");
			self._addPicker({
				"href": url,
				"title": gadget.data("$title")
			});
			if (self.displayStyle !== "$link") {
				var iFrame = _getHtml("iframe", {
					url: url
				});
				$(iFrame).appendTo(self.$$elmt);
			}
		},

		_addPicker: function(context) {
			if (!context.href) context.href = "#";
			$(_getHtml("linkPage", context)).appendTo(this.$$elmt);
		},

		waitStart: function() {
			uiUtils.waitPluginEnable(this._$$wait);
			this._$$waitBckg.show();
		},
		waitStop: function() {
			uiUtils.waitPluginDisable(this._$$wait);
			this._$$waitBckg.hide();
		},

		refreshBtnsBar: function() {
			var self = this;
			var show = false;
			if (self._linkInside()) {
				if (!self.$$icnBack) {
					self.$$footer.prepend(_getHtml("navbtns"));
					self.$$icnBack = self.$$footer.children("[data-action=vignetteBack]");
					self.$$icnHome = self.$$footer.children("[data-action=vignetteHome]");
				}
				var l = self._stateStack.length;
				self.$$icnBack.toggle(l > 1);
				self.$$icnHome.toggle(l > 2);
				show = self._stateStack.length > 1;
			}
			if (self.enableRefresh) {
				if (!self.$$refresh) {
					self.$$footer.prepend(_getHtml("refreshbtn"));
					self.$$refresh = self.$$footer.children("[data-action=vignetteRefresh]");
				}
				show = true;
			}
			self.$$footer.toggle(show);
			self.$$elmt.toggleClass("footer", show);
		},

		_actVignetteHome: function() {
			var self = this;
			if (self._stateStack.length == 0) return;
			var state = self._stateStack[0];
			self._stateStack = []; // to force clearContent
			self._loadPage(state, null, "home");
		},

		_actVignetteBack: function() {
			var self = this;
			if (self._stateStack.length <= 1) return;
			self._stateStack.pop();
			// !!! true for BACK in order to unstack the current page
			self._loadPage(self._stateStack[self._stateStack.length - 1], null, "back");
		},
		_actVignetteError: function() {
			var self = this;
			modal.error("Vignette load error", self._error);
		},
		_actVignetteRefresh: function() {
			this.refreshPage({});
		},
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/page/ctrlPageHeader',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/sdata/sdataUtils','syracuse-tablet/html/js/controls/structElmt','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/ui/fontUtils','syracuse-tablet/html/js/helpers/logger'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var Base = require('syracuse-tablet/html/js/controls/structElmt').Klass;
var globals = require('syracuse-tablet/html/js/helpers/globals');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("pageHeader");

var _templates = {
	main: '\
		<div id="{{ctrlId}} class="s-m-control"> \
			<nav class="navbar navbar-inverse navbar-fixed-top" role="navigation">\
				<div class="container-fluid">\
					<div class="navbar-header">\
						<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#header-collapse-{{ctrlId}}">\
					        <span class="icon-bar"></span>\
					        <span class="icon-bar"></span>\
					        <span class="icon-bar"></span>\
						</button>\
						{{#if showHome}} \
							<ul class="nav navbar-nav">\
								<li>\
									<a href="#" data-action="historyBack">\
										<span class="' + fontUtils.pageIcon("back") + '" />\
									</a>\
								</li>\
								<li>\
									<a href="#" data-action="gotoWelcomeApplication">\
										<span class="' + fontUtils.pageIcon("home") + '" />\
									</a>\
								</li>\
							</ul>\
						{{/if}} \
						<span class="navbar-brand">{{title}}</span>\
					</div>\
					<div class="collapse navbar-collapse" id="header-collapse-{{ctrlId}}">\
						<ul class="nav navbar-nav">\
							<li></li>\
						</ul>\
						<ul class="nav navbar-nav navbar-right">\
							{{#if showAuthoring}} \
								<li> \
									<a href="#" data-action="designPage">\
										<span class="' + fontUtils.pageIcon("designPage") + '" />\
									</a>\
								</li> \
							{{/if}} \
							{{#if showLinks}} \
								<li>\
									<a href="#" data-action="clearCache">\
										<span class="' + fontUtils.pageIcon("clearCache") + '" />\
									</a>\
								</li>\
								<li>\
									<a href="#" data-action="switchContext"> \
										<span class="' + fontUtils.pageIcon("switchContext") + '" /><span class="s-m-nav-text">{{user}}</span>\
									</a>\
								</li>\
							{{/if}} \
						</ul>\
						<form style="display:none" class="navbar-form navbar-right" role="search">\
							<div class="form-group input-group-sm"">\
								<input type="text" class="form-control" placeholder="Search">\
							</div>\
							<button type="submit" class="btn btn-success">\
								<span class="' + fontUtils.pageIcon("search") + '"></span>\
							</button>\
						</form>\
					</div>\
				</div>\
			</nav> \
		</div>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/**
 * Page header Generate Html
 */
var _Klass = utils.defineClass(

	function(controller, $type) {
		var self = this;
		Base.call(self, controller, $type);
	}, Base, {

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			buildOptions = buildOptions.header || {};
			var _mainCtx = {
				title: buildOptions.title || "Sage ERP X3 - Mobile",
				user: globals.getUserName(),
				ctrlId: self.id,
				/* temporarily no authoring in child pages*/
				showAuthoring: !buildOptions.isChild && buildOptions.showAuthoring,
				showLinks: !buildOptions.isChild,
				showHome: !buildOptions.isChild && !globals.getApplication().isWelcomeApplication()
			};
			self.setRootElement(_getHtml("main", _mainCtx), $$parent);
			var $links = self.controller.prototype.data("$links");
			if ($links && Object.keys($links).length > 0) {
				// Process links and create link panel + header icon for open/close
				var linksCtx = [];
				$.each($links, function(name, value) {
					try {
						var link = sdataUtils.getLinkInfo(value.$url, controllerDao);
						linksCtx.push({
							"data-nav": link.page,
							"data-sdata-url": link.sDataUrl,
							"title": utils.parseExpression(value.$title, null, self.controller.prototype) || self.getLinkTitle(name)
						});
					} catch (e) {
						value = value || {};
						log && log("invalid link" + (value.$title || 'no title') + "\n\t" + (value.$url || 'no url'));
					}
				});
			}
		},

		// TODO
		getLinkTitle: function(facetValue) {
			switch (facetValue) {
				case "$edit":
					return "Edit";
				case "$query":
					return "List";
				case "$save":
					return "Save";
				case "$details":
					return "Detail";
				default:
					throw new Error("Facet " + facetValue + " not implemented yet");
			}
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/page/actionManager',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/sdata/sdataUtils','syracuse-tablet/html/js/ui/modal','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/sdata/sdataDispatcher','syracuse-tablet/html/js/sdata/sdataUtils','syracuse-tablet/html/js/ui/fontUtils','syracuse-tablet/html/js/helpers/notifications','syracuse-tablet/html/js/helpers/jsutils'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var modal = require('syracuse-tablet/html/js/ui/modal');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var dispatcher = require('syracuse-tablet/html/js/sdata/sdataDispatcher');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

/**
 * Default message display
 * TODO - Message + detail
 */
var _displayMessage = function(title, data, cb) {
	if (data === null) data = "";
	if (jsutils.isError(data)) {
		data = data.message;
	} else if (typeof data === "string") {
		// Nothing
	} else {
		var diags = sdataUtils.scanDiagnoses(data);
		if (diags.length > 0) {
			var msg = [];
			diags.forEach(function(d) {
				msg.push(d.$message);
			});
			data = msg.join('\n');
		} else {
			data = JSON.stringify(data, null, 2);
		}
	};
	modal.info(title, data, cb);
};
/**
 * Manage action on links given by prototype
 * Used by footer/navigation panel
 *
 * options
 * 		links: 			List of link to manage - see prototype.getLinks
 * 		noMessage 		true if caller doesn't want this object to display messages
 * 	    noRedirection	true allows the caller to do the redirection
 * 		callback: 		callback interface - not implemented - It's lighter than creating child classes
 */
var _Klass = utils.defineClass(

	function(options) {
		var self = this;
		self.options = options || {};
		self.options.$links = self.options.$links || [];
		// Add specific properties
		self.options.$links.forEach(function(l, idx) {
			l.css = [];
			if (l.$isHidden === true) l.css.push("hidden");
			if (l.$isDisabled === true) l.css.push("disabled");
			l.css = l.css.join(' ');
			if (!l.icon) l.icon = fontUtils.getIconByIdx(20 + idx);
			if (!l.$uuid) l.$uuid = utils.UUID();
		});
	}, null, {

		destroy: function() {
			var self = this;
			self.options = null;
		},

		getLinks: function() {
			return this.options.$links;
		},
		/**
		 * 	It's a draft - To improve
		 *  Triggers a link action/navigation and resolve/reject
		 *  		displayed eventually a message if diagnoses have been returned by server
		 * 	If options.noRedirection == true and a redirection is needed resolve with the following data
		 * 		{
		 * 			gotoPage:{
		 * 				name:"PageName",
		 * 				options{Pages options}
		 * 			}
		 * 		}
		 * 		It's the caller that calls application.changepage
		 *  control: control that triggered that action
		 */
		triggerLink: function(uuid, control) {
			var deferred = $.Deferred();
			try {
				var self = this;
				var link = null;
				if (self.getLinks().some(function(l) {
					if (l.$uuid === uuid) {
						link = l;
						return true;
					}
				})) {
					if (link.$confirm) {
						// Action with confirmation asked by server
						modal.simpleConfirm(link.$confirm, function(confirmed) {
							if (confirmed) {
								self._doLinkAction(link, control).then(function(data) {
									deferred.resolve(data);
								}).fail(function(e) {
									deferred.reject(e);
								});
							}
						});
					} else if (link.sdataurl && (link.$isAction === true || link.sdataurl.indexOf("$services") > 0)) {
						// Action which stays on the same page
						self._doLinkAction(link, control).then(function(data) {
							deferred.resolve(data);
						}).fail(function(e) {
							deferred.reject(e);
						});
					} else if (link.page) {
						// Navigation to a page
						var pageOpts = {
							"sdata-url": link.sdataurl,
							"sdata-method": link.$method
						};
						if (self.options.noRedirection === true) {
							deferred.resolve({
								gotoPage: {
									name: link.page,
									options: pageOpts
								}
							});
						} else {
							globals.getApplication().changePage(link.page, pageOpts);
						}
					} else {
						_displayMessage("Unexpected link type", link, function() {
							deferred.resolve();
						});
					}
				}
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},
		/**
		 * Send an action to server and process result
		 */
		_doLinkAction: function(link, control) {
			var self = this;
			var deferred = $.Deferred();
			try {
				var payload = control ? control.controller.dao.getActionPayload(link) : null;
				dispatcher.dispatch({
					$url: link.sdataurl,
					$method: link.$method || "GET"
				}, payload).then(function(data) {
					self._notify(deferred, true, link, data, self.options);
				}).fail(function(e) {
					if (!jsutils.isError(e) && $.isPlainObject(e)) {
						// $diagnose
						self._notify(deferred, false, link, e, self.options);
					} else {
						// Exception - we display the message
						_displayMessage("Action '" + link.title + "' failed", e, function() {
							deferred.reject(e);
						});
					}
				});
			} catch (e) {
				_displayMessage("Action '" + link.title + "' javascript exception", e, function() {
					deferred.reject(e);
				});
			} finally {
				return deferred.promise();
			}
		},
		/**
		 * Notify (the page controller) to do some stuff after an action succeeded
		 * Save/Delete...
		 */
		_notify: function(deferred, success, link, result) {
			notifications.publish("sm.action.link", success, link, result);
			deferred.resolve(result);
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/page/ctrlPageFooter',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/sdata/sdataUtils','syracuse-tablet/html/js/controls/structElmt','syracuse-tablet/html/js/ui/modal','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/sdata/sdataDispatcher','syracuse-tablet/html/js/sdata/sdataUtils','syracuse-tablet/html/js/controls/page/actionManager','syracuse-tablet/html/js/ui/fontUtils','syracuse-tablet/html/js/helpers/jsutils'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var Base = require('syracuse-tablet/html/js/controls/structElmt').Klass;
var modal = require('syracuse-tablet/html/js/ui/modal');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var dispatcher = require('syracuse-tablet/html/js/sdata/sdataDispatcher');
var sdataUtils = require('syracuse-tablet/html/js/sdata/sdataUtils');
var ActionManager = require('syracuse-tablet/html/js/controls/page/actionManager').Klass;
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

var _templates = {
	leftpanel: '\
		<li style="display:none">\
			<a href="#" data-action="sidePanel" data-params="toggle,left">\
				<span class="' + fontUtils.pageIcon("sidePanelL") + '"/>\
			</a>\
		</li>',
	rightpanel: '\
		<li style="display:none">\
			<a href="#" data-action="sidePanel" data-params="toggle,right">\
				<span class="' + fontUtils.pageIcon("sidePanelR") + '"/>\
			</a>\
		</li>',
	//we added navbar-left class for selection in  enablePanel
	main: '\
		<div id="{{ctrlId}} class="s-m-control"> \
			<nav class="navbar navbar-inverse navbar-fixed-bottom" role="navigation">\
				<div class="container-fluid">\
					<ul class="nav navbar-nav navbar-left">\
					</ul>\
					<ul class="nav navbar-nav navbar-right">\
						{{#each links}}\
							<li>\
								<a href="#" class="{{css}}" data-action="footerLink" data-params="{{$uuid}}" data-control-id="{{../ctrlId}}">\
									<i class="{{icon}}"/>\
									<span class="s-m-nav-text">{{title}}</span>\
								</a>\
							</li>\
						{{/each}}\
					</ul>\
				</div>\
			</nav> \
		</div>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	if (!tmpl) alert("footer template " + name + " not found");
	return tmpl(ctx);
};

/**
 * Page header Generate Html
 */
var _Klass = utils.defineClass(

	function(controller, $type, options) {
		var self = this;
		Base.call(self, controller, $type, options);
	}, Base, {

		destroy: function() {
			var self = this;
			if (self.actionManager) self.actionManager.destroy();
			self.actionManager = null;
			Base.prototype.destroy.call(self);
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			self.actionManager = new ActionManager({
				$links: self.controller.prototype.getLinks(controllerDao, "visible"),
				noMessage: false
			});
			self.setRootElement(_getHtml("main", {
				ctrlId: self.id,
				links: self.actionManager.getLinks()
			}), $$parent);
		},

		/**	
		 * Triggered by sm.side.panel.ready notification
		 * Displays or not the action show/hide panel according to availability or if panel not empty
		 * panel: 'leftpanel' or 'rightpanel'
		 * To improve according to the needs
		 */
		enablePanel: function(panel) {
			var self = this;
			if (!self.$$elmt || !panel) return;
			// trick to deal with css with left/right instead of leftPanel/rightPanel
			panel = panel.indexOf('left') >= 0 ? 'left' : 'right';
			var template = panel + "panel";
			// Should be called one time - No need to test - If two icons are displayed it means that there's an issue somewhere
			$(_getHtml(template)).appendTo(self.$$elmt.find(".navbar-" + panel)).show();
		},

		_actFooterLink: function(uuid) {
			var self = this;
			self.actionManager.triggerLink(uuid, self).then(function() {

			}).fail(function(e) {
				if (jsutils.isError(e)) {
					// We shouldn't expect an error except exceptions
					modal.error("Footer action error", e);
				}
			});
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/page/ctrlSidePanel',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/structElmt','syracuse-tablet/html/js/application/eventListener','syracuse-tablet/html/js/helpers/notifications'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/structElmt').Klass;
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _templates = {
	main: '\
			<div id="{{ctrlId}}" class="s-m-control" style="display:none"> \
				<nav class="navbar s-m-side-panel {{side}} navbar-inverse ctrl-evt-click" role="navigation">\
					<div class="container-fluid">\
						<div class="navbar-header">\
							<span class="navbar-brand" href="#"><span>{{title}}</span></a>\
						</div>\
					</div>\
					<ul class="nav navbar-nav">\
						{{{actionsHtml}}}\
					</ul>\
					<div class="s-m-side-panel-options">\
						<a href="#" data-action="resize" data-control-id="{{ctrlId}}"><i class="fa fa-2x fa-bars"></i></a>\
					</div>\
				</nav>\
			</div>'
};

/**
 * Base left/right panel control for dashBoards and regular pages
 * 	Adapted from Metro Bootstrap navbar-side
 */
var _Klass = utils.defineClass(

	function(controller, $type, side, options) {
		var self = this;
		if (["left", "right"].indexOf(side) < 0) throw new Error("side panel - Unexpected side");
		self.side = side;
		Base.call(self, controller, $type, options);
	}, Base, {

		/**
		 * context
		 * 	title:			panel title
		 * 	actionsHtml: 	html for action list items <li>
		 */
		buildHtml: function($$parent, context) {
			var self = this;
			context.ctrlId = self.id;
			context.side = self.side;
			var tmpl = Handlebars.compile(_templates.main);
			self.setRootElement(tmpl(context), $$parent);
			self.$$panel = self.$$elmt.find('.s-m-side-panel');
		},

		/**
		 * Reduce/Enlarge the size of the panel
		 * Notify the page (sidePanel) with resize side,action
		 * 		sidePanelToggle is also called by footer with toggle action to show/hide the panel
		 * The page call the toggle action below to get the width and shift the panel
		 */
		_actResize: function() {
			var self = this;
			self.$$panel.toggleClass('closed');
			eventListener.triggerAction(self.$$elmt, "sidePanel", "resize," + self.side);
		},

		/**
		 * Notify the page that the panel is loaded to show/hide the action in footer
		 */
		publishReady: function() {
			notifications.publish("sm.side.panel.ready", this.$type);
		},

		/**
		 * Toggle the panel
		 * 	action: toggle(click button footer), close(click dismiss) or resize (click resize icon inside the panel)
		 * 	callBack: shift the content for left panel
		 * 	This action is called by footer action and also by toggle data-action
		 */
		toggle: function(action, callBack) {
			var self = this;
			var e = self.$$elmt;
			// TODO - Do not call toggle if panel has not initialized - see test dashboards
			if (!e || !self.$$panel) return;
			var width = self.$$panel.width();
			// close -> Force hide - resize -> stay visible - toggle -> toggle
			e.toggle(action === "close" ? false : action === "resize" ? true : action === "toggle" ? undefined : undefined);
			if (callBack) callBack(e.is(':visible') === true ? width : 0);
		},
		onClick: function(evt) {
			var self = this;
			eventListener.triggerAction(self.$$elmt, "sidePanel", "close," + self.side);
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/page/regularActionPanel',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/page/ctrlSidePanel','syracuse-tablet/html/js/controls/page/actionManager'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/ctrlSidePanel').Klass;
var ActionManager = require('syracuse-tablet/html/js/controls/page/actionManager').Klass;

var _templates = {
	actionLink: '\
		{{#each links}}\
			<li>\
				<a href="#" class="{{css}}" data-action="actionLink" data-params="{{$uuid}}" data-control-id="{{../ctrlId}}">\
					<i style="font-size: large" class="{{icon}}"/>\
					<span>{{title}}</span>\
				</a>\
			</li>\
		{{/each}}'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

/**
 * Regular page action panel
 */
var _Klass = utils.defineClass(

	function(controller, $type, options) {
		var self = this;
		Base.call(self, controller, $type, "right", options);
	}, Base, {

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			self.actionManager = new ActionManager({
				$links: self.controller.prototype.getLinks(controllerDao, "hidden"),
				noMessage: false
			});
			var context = {
				title: "Actions",
				actionsHtml: _getHtml("actionLink", {
					ctrlId: self.id,
					links: self.actionManager.getLinks()
				})
			};
			Base.prototype.buildHtml.call(self, $$parent, context);
		},

		afterRender: function() {
			var self = this;
			if (self.actionManager.getLinks().length > 0) {
				self.publishReady();
			}
		},

		_actActionLink: function(uuid) {
			var self = this;
			self.actionManager.triggerLink(uuid).then(function() {

			}).fail(function() {

			});
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/page/dashboardActionPanel',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/page/ctrlSidePanel'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/ctrlSidePanel').Klass;

var _actions = '\
    <li class="active"><a href="#"><i class="fa fa-1x fa-home"></i> <span>RIGHT DASHBOARD</span></a></li>\
'

/**
 * Dashboard right panel not used
 * 	No needs until now
 */
var _Klass = utils.defineClass(

	function(controller, $type) {
		var self = this;
		Base.call(self, controller, $type, "right", {});
	}, Base, {

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			var context = {
				title: "Actions",
				actionsHtml: _actions
			};
			Base.prototype.buildHtml.call(self, $$parent, context);
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/page/navigationPanel',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/page/ctrlSidePanel','syracuse-tablet/html/js/application/settings','syracuse-tablet/html/js/helpers/notifications','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/ui/fontUtils'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/page/ctrlSidePanel').Klass;
var settings = require('syracuse-tablet/html/js/application/settings');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

var _templates = {
	navigLink: '<li class=""><a href="#" data-action="switchApp" data-params="{{appName}}" data-control-id="{{ctrlId}}"><i class="{{icon}}"></i>&nbsp;<span>{{title}}</span></a></li>'
};


var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[key] = Handlebars.compile(_templates[name]);
	}
	return tmpl(ctx);
};

var _fail = function(e) {
	globals.getModal().error("Error loading applications", e);
};

/**
 * Regular page left panel
 */
var _Klass = utils.defineClass(

	function(controller, $type, options) {
		var self = this;
		self._$$wait = null;
		Base.call(self, controller, $type, "left", options);
		self.appCount = 0;
	}, Base, {

		destroy: function() {
			var self = this;
			Base.prototype.destroy.call(self);
			uiUtils.waitPluginDestroy(self._$$wait);
			self._$$wait = null;
		},

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			var curApp = globals.getApplication(),
				title;
			try {
				var actionsHtml = [];
				globals.forEachApplicationJson(function(name, appInfo) {
					if (curApp.uuid != appInfo.$uuid) {
						actionsHtml.push(_getHtml("navigLink", {
							title: appInfo.title || appInfo.description || appInfo.applicationName,
							icon: (appInfo.iconName && fontUtils.getIconByName(appInfo.iconName)) || fontUtils.getIconByName("briefcase"),
							appName: appInfo.applicationName,
							ctrlId: self.id
						}));
						self.appCount++;
					} else {
						title = appInfo.title || appInfo.applicationName;
					}
				});
				var context = {
					title: title || "Navigation",
					actionsHtml: actionsHtml.join('')
				};
				Base.prototype.buildHtml.call(self, $$parent, context);
			} catch (e) {
				_fail(e);
			}
		},

		afterRender: function() {
			this.publishReady();
		},

		_actSwitchApp: function(appName) {
			var self = this;
			notifications.publish("sm.switch.app", appName);
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/ctrlTypeUnknown',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/ctrlBase'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;

/**
 * Base class for controls that display exactly one value/property
 */
var _Klass = utils.defineClass(

	function CtrlTypeUnknown(controller, article, prototype) {
		Base.call(this, controller, article, prototype);
	}, Base, {
		buildHtml: function($$parent, controllerDao, buildOptions) {
			Base.prototype.buildHtml.call(this, $$parent, controllerDao, buildOptions, ["s-m-unknown"]);
			this.$$elmt.html('<div class="s-m-value">Field ' + this.$bind + ' - Unknown type: ' + this.$type + '</div>');
		}
	}
);

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/ctrlUnfound',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/ctrlBase'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;

/**
 * Unfound fields in prototype
 */
var _Klass = utils.defineClass(

	function CtrlUnfound(controller, article, prototype) {
		Base.call(this, controller, article, prototype);
	}, Base, {
		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions, ["s-m-unfound"]);
			self.$$elmt.html('<div class="s-m-value">Field <b>' + self.$bind + '</b> unfound</div>');
		}
	}
);

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/chart/ctrlCubeChartTheme',['require','exports','module'],function (require, exports, module) {

var theme = {
	//colors: ['#007f64', '#34b233', '#4d4f53', '#9a9b9c', '#ff5800', '#009fda', '#6639b7' /*green brightgreen darkgrey midgray orange blue purple*/ , '#409f8b', '#67c566', '#7a7b7e', '#b3b4b5', '#ff8240', '#40b7e3', '#8c6bc9', /*75%*/ /*'#7fbfb1','#99d899','#a6a7a9','#cccdcd','#ffab7f','#7fcfec','#b29cdb',50%*/ ],
	colors: ['#BF7070', '#BFB730', '#7ABF30', '#7373FF', '#BF7730', '#BF3080', '#30BF9F', '#FF7373', '#FFF773', '#85FF00', '#3030BF', '#FF9F40', '#FF40BC', '#1699A6', '#FF0000', '#FFF100', '#00FF00', '#0000FF', '#FF7F00', '#FF00A6', '#00FFC6', '#A60000', '#A69C00', '#56A600', '#90B2FF', '#A65200', '#A6006C', '#00A681', '#FF4040', '#FFF440', '#A3FF40', '#3673FF', '#FFB873', '#FF76CE', '#73FFED'],
	chart: {
		borderRadius: '0',
		spacingTop: 10,
		backgroundColor: '#fff',
		borderColor: '#ccc',
		borderWidth: 1,
		className: 'dark-container',
		// backgroundColor: {
		//	linearGradient: [250, 250, 250, 400],
		// 	stops: [
		// 		[0, 'rgb(250, 250, 250)'],
		// 		[1, 'rgb(240, 240, 240)']
		// 	]
		// },
		resetZoomButton: {
			theme: {
				fill: 'white',
				stroke: '#dddddd',
				r: 0,
				states: {
					hover: {
						fill: '#00a1de',
						style: {
							color: 'white'
						}
					}
				}
			},
			position: {
				// align: 'right', // by default
				// verticalAlign: 'top', // by default
				x: -50,
				y: 5
			},
			relativeTo: 'chart'
		}
	},
	title: {
		style: {
			color: '#464646',
			font: 'bold 16px "Trebuchet MS", Verdana, sans-serif'
		}
	},
	subtitle: {
		style: {
			color: '#464646',
			font: 'bold 12px "Trebuchet MS", Verdana, sans-serif'
		}
	},
	xAxis: {
		gridLineColor: 'rgba(0, 0, 0, 0.05)',
		gridLineDashStyle: 'longdash',
		gridLineWidth: 1,
		labels: {
			style: {
				color: '#A0A0A0'
			}
		},
		lineColor: 'rgba(0, 0, 0, 0.2)',
		tickColor: 'rgba(0, 0, 0, 0.2)',
		title: {
			style: {
				color: '#464646',
				fontWeight: 'normal',
				fontSize: '20px',
				fontFamily: 'arial',
			}
		}
	},
	yAxis: {
		minorGridLineColor: 'rgba(0, 0, 0, 0.05)',
		minorTickInterval: 'auto',
		/*alternateGridColor: 'rgba(0, 0, 0, 0.02)',*/
		gridLineWidth: 2,
		gridLineColor: 'rgba(0, 0, 0, 0.07)',
		labels: {
			align: 'left',
			x: 0,
			y: 12,
			style: {
				color: '#A0A0A0'
			}
		},
		lineColor: 'rgba(0, 0, 0, 0.07)',
		/*minorTickInterval: null,*/

		title: {
			style: {
				color: '#CCC',
				fontSize: '16px',
				fontFamily: 'Georgia, Verdana, sans-serif',
				fontStyle: 'italic',
			}
		}
	},
	tooltip: { /*backgroundColor: 'rgba(250,250, 250, 0.75)',*/
		backgroundColor: '#464646',
		borderRadius: '0',
		style: {
			color: '#fff',
			/*fontFamily: '"georgia"',
			fontStyle: 'italic',*/
			fontSize: '12px',
			padding: '5px',
			whiteSpace: 'nowrap',

		}
	},
	toolbar: {
		itemStyle: {
			color: 'silver'
		}
	},
	plotOptions: {
		series: {
			marker: { /*	fillColor: '#FFFFFF',*/
				lineWidth: 2,
				lineColor: null,
				// inherit from series,
				radius: 4,
				states: {
					hover: {
						radius: 8,
						lineColor: null,
					}
				}
			}
		},
		area: {
			fillOpacity: 0.15

		},
		areaspline: {
			fillOpacity: 0.15
		},
		line: {
			dataLabels: {
				color: '#CCC'
			},
			marker: {
				lineColor: '#FFFFFF',
			}
		},
		spline: {
			marker: {
				lineColor: '#FFFFFF',
			}
		},
		scatter: {
			marker: {
				lineColor: '#FFFFFF'
			}
		},
		candlestick: {
			lineColor: '#FFFFFF',
			animation: {
				duration: 2000,
				easing: 'easeOutBounce'
			}
		},
		pie: {
			allowPointSelect: true,
			cursor: 'pointer',
			borderColor: 'rgba(250,250,250,0.3)',
			borderWidth: 0.5,
			dataLabels: {
				enabled: true,
				connectorWidth: 2,
				color: '#464646',
				style: {
					fontWeight: 'bold'
				}
			},
		},

	},
	legend: {
		borderRadius: 0,
		borderWidth: 1,
		// borderColor: '#dddddd',
		backgroundColor: 'white',
		//shadow: true,
		itemMarginTop: 8,
		itemStyle: {
			color: '#464646',
			fontFamily: '"arial"',
			fontWeight: 'bold',
			/*fontStyle: 'italic',*/
			fontSize: '8pt ',
		},
		itemHoverStyle: {
			color: '#00a1de'
		},
		itemHiddenStyle: {
			color: '#555'
		},
		title: {
			style: {
				color: '#464646',
				fontWeight: 'bold',
				fontSize: '8pt',
				fontFamily: 'arial',
			}
		}
	},
	credits: {
		enabled: false,
		style: {
			color: '#666'
		}
	},
	labels: {
		style: {
			color: '#CCC'
		}
	},

	exporting: {
		buttons: {
			drillUp: {
				symbolStroke: '#fff',
				symbolFill: 'rgba(250,250,250,0.5)',
				hoverSymbolStroke: '#fff',
				hoverSymbolFill: 'rgba(250,250,250,0.5)',

			},
			exportButton: {
				symbolStroke: '#fff',
				symbolFill: 'rgba(250,250,250,0.5)',
				hoverSymbolStroke: '#fff',
				hoverSymbolFill: 'rgba(250,250,250,0.5)',

			},
			printButton: {
				symbolStroke: '#fff',
				symbolFill: 'rgba(250,250,250,0.5)',
				hoverSymbolStroke: '#fff',
				hoverSymbolFill: 'rgba(250,250,250,0.5)',
			}
		}
	},

	// scroll charts
	rangeSelector: {
		buttonTheme: {
			fill: {
				linearGradient: [0, 0, 0, 20],
				stops: [
					[0.4, '#888'],
					[0.6, '#555']
				]
			},
			stroke: '#000000',
			style: {
				color: '#CCC',
				fontWeight: 'bold'
			},
			states: {
				hover: {
					fill: {
						linearGradient: [0, 0, 0, 20],
						stops: [
							[0.4, '#BBB'],
							[0.6, '#888']
						]
					},
					stroke: '#000000',
					style: {
						color: 'white'
					}
				},
				select: {
					fill: {
						linearGradient: [0, 0, 0, 20],
						stops: [
							[0.1, '#000'],
							[0.3, '#333']
						]
					},
					stroke: '#000000',
					style: {
						color: 'yellow'
					}
				}
			}
		},
		inputStyle: {
			backgroundColor: '#333',
			color: 'silver'
		},
		labelStyle: {
			color: 'silver'
		}
	},

	navigator: {
		handles: {
			backgroundColor: '#666',
			borderColor: '#AAA'
		},
		outlineColor: '#CCC',
		maskFill: 'rgba(16, 16, 16, 0.5)',
		series: {
			color: '#7798BF',
			lineColor: '#A6C7ED'
		}
	},

	scrollbar: {
		barBackgroundColor: {
			linearGradient: [0, 0, 0, 20],
			stops: [
				[0.4, '#888'],
				[0.6, '#555']
			]
		},
		barBorderColor: '#CCC',
		buttonArrowColor: '#CCC',
		buttonBackgroundColor: {
			linearGradient: [0, 0, 0, 20],
			stops: [
				[0.4, '#888'],
				[0.6, '#555']
			]
		},
		buttonBorderColor: '#CCC',
		rifleColor: '#FFF',
		trackBackgroundColor: {
			linearGradient: [0, 0, 0, 10],
			stops: [
				[0, '#000'],
				[1, '#333']
			]
		},
		trackBorderColor: '#666'
	},

	// special colors for some of the
	legendBackgroundColor: 'rgba(0, 0, 0, 0.5)',
	legendBackgroundColorSolid: 'rgb(35, 35, 70)',
	dataLabelsColor: '#444',
	textColor: '#C0C0C0',
	maskColor: 'rgba(255,255,255,0.3)'
};

var colors = theme.colors;

// Options for Org chart view
theme.orgChart = {
	node: {
		textColor: 'black ',
		borderColor: colors[1],
		borderWidth: 2,
		backgroundColor: 'white ',
		fontWeight: 'normal ',
		hover: {
			backgroundColor: colors[3],
			textColor: 'white '
		}
	},
	junction: {
		lineColor: colors[3],
		lineWidth: 2
	},
	dropMarker: {
		borderColor: colors[1],
		borderWidth: 0,
		backgroundColor: colors[4],
		backgroundOpacity: 1
	},
	tooltip: {
		backgroundColor: colors[1],
		backgroundOpacity: 1,
		borderWidth: 2,
		borderRadius: 0,
		borderColor: colors[2],
		style: {
			color: '#fff',
			/*fontFamily: '"georgia"',
			fontStyle: 'italic',*/
			fontSize: '12px',
			padding: '5px',
			whiteSpace: 'nowrap',
		}
	}
};

theme.version = Highcharts.version.split(".").map(function(e) {
	return parseInt(e, 10);
});

if (theme.version[0] === 2) {
	// theme.navigation = {
	// 	buttonOptions: {
	// 		borderRadius: 50,
	// 		height: 24,
	// 		width: 24,
	// 		backgroundColor: '#00acec',
	// 		borderColor: '#00a1de',
	// 		symbolX: 12,
	// 		symbolY: 12,
	// 	}
	// },
} else if (theme.version[0] === 3) {
	theme.navigation = {
		buttonOptions: {
			symbolStroke: '#DDDDDD',
			hoverSymbolStroke: '#FFFFFF',
			theme: {
				fill: {
					linearGradient: {
						x1: 0,
						y1: 0,
						x2: 0,
						y2: 1
					},
					stops: [
						[0.4, '#606060'],
						[0.6, '#333333']
					]
				},
				stroke: '#000000'
			}
		}
	};

	delete theme.exporting;
}

exports.theme = theme;
});

define('syracuse-tablet/html/js/controls/chart/ctrlCubeChartBase',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/ctrlBase','syracuse-tablet/html/js/helpers/formatApi','syracuse-tablet/html/js/controls/chart/ctrlCubeChartTheme','syracuse-tablet/html/js/helpers/locale'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/ctrlBase').Klass;
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var theme = require('syracuse-tablet/html/js/controls/chart/ctrlCubeChartTheme').theme;
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _merge = Highcharts.merge;
var objectClone = function(o) {
	return $.extend({}, o);
};

Highcharts.theme = theme;
Highcharts.setOptions(Highcharts.theme);

var colors = Highcharts.theme.colors;

var _style = function($style) {
	var map = {
		xy: "line",
		point: "scatter",
		stick: "column",
		radar: "spiderweb"
	};

	return $style && (map[$style] || $style);
};

function _isCubeValid(cube, proto) {
	return !!(cube && cube.$hierarchies && proto.$axes && proto.$axes.length > 0 && //
		proto.$axes[0].$hierarchies && proto.$axes[0].$hierarchies.length > 0);
}
/**
 * cube chart control class
 *
 * article:
 * $isLegendHidden: true/false
 * $isXLabelHidden: true/false
 * $isYLabelHidden: true/false
 * $isXLabelsHidden: true/false
 * $isYLabelsHidden: true/false
 * $style: line, spline, area, areaspline, bar, stick, pie
 */
var _Klass = utils.defineClass(function(controller, article, prototype, options) {
	var self = this;
	Base.call(self, controller, article, prototype, options);
	self.itemProto = prototype.getPrototype("$item");
}, Base, {
	_mergeMetaData: function(metadata) {
		var m = {};
		if (metadata && metadata.$cube) m.$cube = metadata.$cube;
		if (metadata && metadata.$axes) m.$axes = metadata.$axes;
		if (metadata && metadata.$style) m.$style = metadata.$style;
		if (metadata && metadata.$color) m.$color = metadata.$color;
		if (metadata && metadata.$isLegendHidden) m.$isLegendHidden = metadata.$isLegendHidden;
		if (metadata && metadata.$isXLabelHidden) m.$isXLabelHidden = metadata.$isXLabelHidden;
		if (metadata && metadata.$isYLabelHidden) m.$isYLabelHidden = metadata.$isYLabelHidden;
		if (metadata && metadata.$isXLabelsHidden) m.$isXLabelsHidden = metadata.$isXLabelsHidden;
		if (metadata && metadata.$isYLabelsHidden) m.$isYLabelsHidden = metadata.$isYLabelsHidden;
		this.currentMetaData = _merge(this.currentMetaData || {}, m);

		if (metadata && metadata.$item && metadata.$item.$properties && this.currentMetaData && this.currentMetaData.$cube && this.currentMetaData.$cube.$measures) {
			$.smForEachKey(this.currentMetaData.$cube.$measures, function(key, m) {
				if (metadata.$item.$properties[key] && metadata.$item.$properties[key].$title) {
					m.$title = metadata.$item.$properties[key].$title;
				} else {
					m.$title = key;
				}
			});
		}

		return this.currentMetaData;
	},

	_settingsFromValue: function() {
		var self = this,
			$cube = this.currentMetaData.$cube,
			icolor = 0,
			settings;

		if ($cube.$style === "spiderweb") {
			settings = {};
			settings.categories = Object.keys(self._meta.series).map(function(key) {
				return self._meta.series[key].options.name;
			});

			settings.series = {};
			self.dataset && self.dataset.reduce(function(res, current) {
				var serie = {
					name: self._getMeasureLabel(current, self._meta.xAxis[0].code),
					color: colors[icolor++],
					data: [],
					pointPlacement: 'on'
				};
				if (serie.name) {
					serie.id = "#s-" + serie.name;
					$.smForEachKey(self._meta.series, function(key, s) {
						if (!s.isHidden) self._pushData(serie, key, key, current);
					});
					res.series[serie.name] = serie;
				}
				return res;
			}, settings);
		} else {
			settings = {
				categories: [],
				series: {}
			};
			self.dataset && self.dataset.reduce(function(res, current) {
				var categoryName = self._getMeasureLabel(current, self._meta.xAxis[0].code);
				if (categoryName != null) {
					res.categories.push(categoryName);
					$.smForEachKey(self._meta.series, function(key, s) {
						var serie = res.series[key];
						if (!serie) {
							serie = objectClone(s.options);
							serie.data = [];
							res.series[key] = serie;
						}
						self._pushData(serie, categoryName, key, current);
					});
				}
				return res;
			}, settings);
		}
		return settings;
	},

	_pushData: function(serie, categoryName, key, data) {
		var val = parseFloat(data.$rawV && data.$rawV[key] && data.$rawV[key].v || data[key]) || 0;
		if (this.useLogarithmicAxis) {
			this.maxValue = Math.max(this.maxValue || -Infinity, val);
			this.minValue = Math.min(this.maxValue || Infinity, val);
		}
		serie.data.push([categoryName, val]);
	},

	_createChart: function(settings) {
		var self = this,
			options = _merge(self._getPref(), self._getOptions(self.$prototype));

		if (settings) {
			options.xAxis[0].categories = settings.categories;
			$.smForEachKey(settings.series, function(key, s) {
				var serie = objectClone(s),
					serieMeta = self._meta.series[key];
				if (options.chart.polar && serie && serie.type) {
					delete serie.type;
				}
				if (!(serieMeta && serieMeta.isHidden)) {
					options.series.push(serie);
				}
			});
		} else {
			$.smForEachKey(self._meta.series, function(key, s) {
				var serie = objectClone(s.options);
				if (options.chart.polar && serie && serie.type) {
					delete serie.type;
				}
				serie.data = [0];
				if (!s.isHidden) {
					options.series.push(serie);
				}
			});
		}
		if (!(self.$prototype.$cube && self.$prototype.$cube.$style == "spiderweb")) {
			options.series.reverse();
		}
		if (this.useLogarithmicAxis) {
			if ((this.maxValue || 0) / (this.minValue || 1) > 10) {
				options.yAxis.type = 'logarithmic';
			}
		}
		self._chart = new Highcharts.Chart(options);

		var legend = this._chart.legend;
		self.displayLegend = legend && legend.display;

		var chartSeries = self._chart.series,
			serie, serieMeta;
		for (var j = chartSeries.length - 1; j >= 0; j--) {
			serie = chartSeries[j];
			serieMeta = serie && serie.options.id && self._meta.series[serie.options.id.slice(3)];
			if (serieMeta && serieMeta.measure) {
				serieMeta.measure.$color = serieMeta.options.color = serie.color;
			}
		}
	},

	_getOptions: function(proto) {
		var self = this,
			$cube = this.currentMetaData.$cube,
			defOptions = Highcharts.getOptions(),
			buttons = defOptions.exporting.buttons,
			measuresTitle = this._getFieldEvalTitle(),
			axe = proto.$axes && proto.$axes[0] || {},
			axeTitle = axe.$hierarchies && measuresTitle[axe.$hierarchies[0][0]] || axe.$title,
			enuml;
		var options = {
			chart: {
				renderTo: this.$$chartSlot.get(0),
				zoomType: 'x',
				ignoreHiddenSeries: false,
				width: 50,
				height: 50
			},
			lang: {
				showHideLegend: self._localize.highCharts_showHideLegend
			},

			legend: {
				layout: 'vertical',
				align: 'right',
				verticalAlign: 'top',
				y: 60,
				x: -10,
				title: {
					text: ':::: ' + self._localize.highCharts_seriesTitle,
				},
				floating: true,
				draggable: true,
				zIndex: 20,
				enabled: !(this.currentMetaData.$isLegendHidden === true)
			},
			title: {
				text: ($cube && self._localizedText($cube.$title)) || '',
				margin: 5
			},
			xAxis: [{
				categories: [],
				title: {
					text: self._localizedText(axeTitle),
					enabled: !(this.currentMetaData.$isXLabelHidden === true)
				},
				labels: {
					rotation: -45,
					align: 'right',
					enabled: !(this.currentMetaData.$isXLabelsHidden === true)
				}
			}],

			yAxis: [{
				title: {
					text: '',
					enabled: !(this.currentMetaData.$isYLabelHidden === true)
				},
				labels: {
					align: 'right',
					enabled: !(this.currentMetaData.$isYLabelsHidden === true)
				}
			}],

			plotOptions: {
				series: {
					cursor: 'pointer',
					events: {},
					point: {
						events: {
							click: function(event) {

							}
						}
					},
					stacking: self._meta.stacking,
					animation: false
				}
			},

			tooltip: {
				formatter: function() {
					var seriesMeta = self._meta.series,
						serie = this.key && seriesMeta[this.key] || seriesMeta[this.series.options.id.slice(3)],
						measure = serie && serie.measure,
						data = this.series.processedYData,
						y = this.y;

					if (measure) {
						self._ensureFormatter(measure);
					}
					var label = this.series.name || measure && measure.$title,
						mformat = measure && measure.formatter;
					label = (label ? label + "<br>" : "") + (this.x || this.key) + ': <b> ' + (mformat ? mformat.format(y) : y) + '</b>';
					if (measure && (measure.$isNormalized) && data.length > 0) {
						var sum = data.reduce(function(a, b) {
							return a + b;
						});
						label += ' (' + (mformat ? mformat.formatValue(y / sum * 100) : y / sum * 100) + '%)';
					}

					return label;
				}
			},

			series: [],
		};
		if (Highcharts.theme.version[0] === 3) {
			// For Highcarts 3.0.0
			options.exporting = {
				type: 'image/png',
				url: 'http://export.highcharts.com/',
				buttons: {
					contextButton: { // docs
						//x: -10, // docs: x is different now
						symbol: 'menu',
						enabled: false,
						_titleKey: 'contextButtonTitle',
						menuItems: [{
							textKey: 'showHideLegend',
							onclick: function() {
								setTimeout(function() {
									self._toggleLegendDisplay();
								}, 100);
							}
						}]
					},
					legendButton: {
						enabled: false,
						textKey: 'showHideLegend',
						symbol: 'menu',
						onclick: function() {
							setTimeout(function() {
								self._toggleLegendDisplay();
							}, 100);
						}
					}
				}
			};
			var menuItems = options.exporting.buttons.contextButton.menuItems || [];
			if (this._printSupported()) {
				menuItems.push({
					text: 'Print chart',
					onclick: function() {
						this.print(self);
					}
				});
			}
			if (this._exportSupported()) {
				menuItems.push({
					separator: true
				});
				menuItems.push({
					textKey: 'downloadPNG',
					onclick: function() {
						this.exportChart();
					}
				});
				menuItems.push({
					textKey: 'downloadJPEG',
					onclick: function() {
						this.exportChart({
							type: 'image/jpeg'
						});
					}
				});
				menuItems.push({
					textKey: 'downloadPDF',
					onclick: function() {
						this.exportChart({
							type: 'application/pdf'
						});
					}
				});
				menuItems.push({
					textKey: 'downloadSVG',
					onclick: function() {
						this.exportChart({
							type: 'image/svg+xml'
						});
					}
				});
			}
		}

		if (options.xAxis[0].title.text !== options.title.text) {
			options.xAxis[0].title.text = (options.xAxis[0].title.text ? options.xAxis[0].title.text : options.title.text);
		}
		options.chart.type = self._meta.defaultStyle;

		return options;
	},

	_initializeMeta: function() {
		this._mergeMetaData(this.$prototype);
		this._mergeMetaData(this.article);

		var proto = this.$prototype;
		var cube = this.currentMetaData;

		this._meta = {
			xAxis: [{}],
			series: {},
			displaysOneMeasure: cube && cube.$displaysOneMeasure,
			hasMeasureSelector: cube && cube.$hasMeasureSelector,
			hasStyleSelector: cube && cube.$hasStyleSelector,
			defaultStyle: _style(cube.$style) || 'column',
			drill: {
				minLevel: 1,
				maxLevel: 0,
				currLevel: 1,
				currAxisHier: 0,
				levelsProperties: [],
				members: [],
				stack: [{
					$axes: proto.$axes,
					$item: proto.$item,
					$slicer: proto.$slicer
				}]
			}
		};
		this.__processMeta(proto, true);
	},

	_exportSupported: function() {
		return true;
	},

	_printSupported: function() {
		return true;
	},

	__processMeta: function(metaData, init) {
		this._processMeasures(metaData, init);
		this._processAxes(metaData, init);
	},

	_processMeasures: function(metaData, init) {
		this._mergeMetaData(metaData);

		var self = this,
			items = this.$prototype.$properties;

		// Get measures definition. If measures are not defined in the second axis members (Cf. specs),
		// we used all the measures defined in the cube
		var measures = this._getRestraintMeasures(),
			icolor = 0;
		if (measures) {
			$.smForEachKey(measures, function(key, m) {
				// Because duplicate properties is possible for cube definition... we keep the last defined
				var code = (m.$property || key);
				var measure = _merge(items[code], m);
				if (metaData && metaData.$item && metaData.$item.$properties) {
					measure = _merge(measure, metaData.$item.$properties[code]);
				}
				if (!measure.$title || measure.$title === "") {
					measure.$title = key;
				}
				// measures[key] = measure;
				var serie = self._meta.series[code];

				if (init) {
					self._ensureFormatter(measure);

					serie = self._meta.series[code] = {
						options: {
							id: '#s-' + code,
							// legendIndex: "",
							name: self._localizedText(measure.$title) || String.fromCharCode(160),
							// visible: measure.$title !== "" && !!(!self._meta.displaysOneMeasure || measure.$isDefault)
						},
						measure: measure
					};
				}
				if (serie) {
					serie.isHidden = measure.$title === "";
					serie.options.type = _style(measure.$style);
					serie.options.color = measure.$color || colors[icolor++];
					serie.options.name = self._localizedText(measure.$title) || String.fromCharCode(160);
					serie.options.visible = measure.$title !== "" && !! (!self._meta.displaysOneMeasure || measure.$isDefault);
				}

				if (measure.$isStacked || measure.$stackingGroup) {
					serie.options.stack = measure.$stackingGroup || 0; // a stack ID
					self._meta.stacking = measure.$isNormalized ? 'percent' : self._meta.stacking || 'normal';
				}
			});
		}
	},

	_getRestraintMeasures: function() {
		var proto = this.currentMetaData,
			$cube = proto.$cube,
			measures = $cube && $cube.$measures,
			restraintMeasures = measures;
		if (measures) {
			if (proto.$axes && proto.$axes.length > 1 && proto.$axes[1].$members && proto.$axes[1].$members[0][0].length > 0) {
				restraintMeasures = {};
				$.smForEach(proto.$axes[1].$members[0][0], function(measureCode) {
					restraintMeasures[measureCode] = measures[measureCode];
				});
			}
		}
		return restraintMeasures;
	},

	_processAxes: function(proto, init) {
		var cube = this.$prototype.$cube;
		if (!_isCubeValid(cube, proto)) return false;

		var self = this,
			currAxisHier = 0,
			axis0 = proto.$axes && proto.$axes[0];

		// TODO: review this
		// Get axis analysis
		var mainHLevelsTab = null;
		if (axis0) {
			$.smForEachKey(axis0.$hierarchies, function(idx, hierarchy) {
				if (!mainHLevelsTab && hierarchy.length > 1 && hierarchy[1] == 1) {
					mainHLevelsTab = cube.$hierarchies[hierarchy[0]].$properties;
					if (mainHLevelsTab) {
						self._meta.xAxis[0].code = mainHLevelsTab[hierarchy.length > 2 ? hierarchy[2] : 0];
						currAxisHier = idx;
					}
				}
			});
			if (!mainHLevelsTab && axis0.$hierarchies[0].length > 0) {
				mainHLevelsTab = cube.$hierarchies[axis0.$hierarchies[0][0]].$properties;
				if (mainHLevelsTab && mainHLevelsTab.length > 0) self._meta.xAxis[0].code = mainHLevelsTab[0];
			}
			// Get drill definition
			var properties;
			$.smForEach(axis0.$hierarchies, function(hierarchie) {
				properties = cube.$hierarchies[hierarchie[0]].$properties;
				$.smForEach(properties, function(property) {
					this.levelsProperties[this.maxLevel++] = property;
				}, self._meta.drill);
			});
			if (axis0.$members) {
				$.smForEach(axis0.$members, function(tuple) {
					$.smForEach(tuple, function(value) {
						if (value.length > 0) {
							this.members[(this.currLevel++) - 1] = value[0];
						}
					}, this);
				}, self._meta.drill);
			}
		}
		self._meta.drill.code = proto.$codeStat || "UNKNOWN";
		self._meta.drill.axis0FieldCode = self._meta.xAxis[0].code || "";
		self._meta.drill.maxLevel = Math.max(self._meta.drill.maxLevel, self._meta.drill.minLevel);
	},

	_getPref: function() {
		return Highcharts.getOptions();
	},

	_getMeasureLabel: function(measure, code) {
		// return cubeHelper.getMeasureLabel(measure, code, this.$prototype && this.$prototype.$properties);
		var label = this._localizedText(measure.$title);
		if (label) return label;
		var self = this;
		var item = self.$prototype.$properties[code];
		if (!item) return null;
		switch (item.$type) {
			case "application/x-choice":
				label = measure[code];
				item.$value.$enum.some(function(element, i, array) {
					if (element.$value === label) {
						label = this._localizedText(element.$title);
						return true;
					}
					return false;
				});
				break;
			case "application/x-date":
				item.formatter = formatApi.getFormatter(item.$type, locale.getDateFormat(item.$type));
				label = item.formatter.formatValue(measure[code]);
				break;
			case "application/x-integer":
			case "application/x-decimal":
				item.formatter = formatApi.getFormatter(item.$type, locale.getNumberFormat(item.$type));
				label = item.formatter.formatValue(measure[code]);
				break;
			default:
				label = "" + measure[code];
				break;
		}
		return label;
	},

	_toggleLegendDisplay: function() {
		var legend = this._chart.legend;
		legend && this._displayLegend(!legend.display);
	},

	_displayLegend: function(display) {
		var legend = this._chart.legend;
		if (!legend) return;
		if (display) {
			legend.group.show();
			legend.box.show();
		} else {
			legend.group.hide();
			legend.box.hide();
		}
		this.displayLegend = legend.display = display;
	},
	destroy: function() {
		var self = this;
		Base.prototype.destroy.call(self);

		this._chart && this._chart.destroy();
		this._chart = this._localize = this._meta = this.currentMetaData = null;
	}
});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/chart/ctrlCubeChart',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/chart/ctrlCubeChartBase','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/helpers/formatApi','syracuse-tablet/html/js/helpers/locale'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/chart/ctrlCubeChartBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var locale = require("syracuse-tablet/html/js/helpers/locale");

/**
 * cube chart control class
 */
var _Klass = utils.defineClass(function CtrlCubeChart(controller, article, prototype, options) {
	var self = this;
	Base.call(self, controller, article, prototype, options);
	self.itemProto = prototype.getPrototype("$item");
}, Base, {
	/**
	 * Init the properties to allow reuse of this control
	 */
	initReuseProperties: function() {
		Base.prototype.initReuseProperties.call(this);
		this.$$chartSlot = null;
		this.dataset = null;
	},

	buildHtml: function($$parent, controllerDao, buildOptions) {
		var self = this;
		Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions, ["s-m-chart"]);
		self.$$chartSlot = $(uiUtils.createDomElement('div', null, null, null, self.$$elmt));
		self.$$chartSlot.hide();
		self._buildChart();
	},

	_buildChart: function() {
		var self = this;

		// This block assigns some variables so that the implementations
		// in ctrlCubeChartBase which have been migrated from the desktop client
		// do not need to be modified too much!
		self.$prototype = self.prototype.json;
		self.$prototype.$properties = self.$prototype.$item.$properties;
		self._localize = {
			highCharts_showHideLegend: locale.text("highCharts_showHideLegend"),
			highCharts_seriesTitle: locale.text("highCharts_seriesTitle")
		};
		//

		self._initializeMeta();

		self.dataset = self.getDao().getQueryResources();

		var settings = self._settingsFromValue();
		self._createChart(settings);
	},

	_ensureFormatter: function(measure) {
		measure.formatApi = {
			format: function(val, localFormat) {
				return val;
			}
		};
	},

	_localizedText: function(key) {
		return key;
	},

	_getFieldEvalTitle: function() {
		return [];
	},

	destroy: function() {
		var self = this;
		Base.prototype.destroy.call(self);
		self.dataset = null;
	},
	/**
	 * Call by page on resize - TODO generalize the resize process
	 */
	onResize: function() {
		this.$$chartSlot.show();
		var chart = this.$$chartSlot.highcharts();
		if (chart) {
			chart.setSize(this.$$chartSlot.width(), this.$$chartSlot.height(), false);
		}
	}
});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/field/ctrlBinary',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/ui/fontUtils','syracuse-tablet/html/js/controls/field/ctrlFieldBase','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/helpers/locale'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var locale = require('syracuse-tablet/html/js/helpers/locale');


var _handlersMap = {
	"header": "_onClearClick",
	"section": "_onDocumentClick",
	"footer": "_onUploadClick",
	"a": "_onDocumentClick"
};

var _Klass = utils.defineClass(

	function CtrlBinary(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
		self.isImage = self.$type.indexOf("image") == 0;
		// Add cssType in root element
		self.cssType = self.isImage ? "s-m-img" : "s-m-binary";
	}, Base, {

		buildFieldValue: function(parentSlot, buildOptions) {
			var self = this;
			var value = self.getFormattedValue(self.getValue());
			// Create the image stuff under the standard s-m-value parent
			var imgParent = Base.prototype.buildFieldValue.call(self, parentSlot, buildOptions);
			var docUrl = self.prototype.data("$url", self.getDao()) || "";

			//TODO use $etag or else
			docUrl += '?salt=' + ((new Date()).getTime());

			var empty = value == null || value === "" || docUrl.length === 0;
			if (empty) $(imgParent).addClass("s-m-empty");
			// if FileReader not supported by the browser, we display detail view (fix for Safari)
			if (self.$isEditMode && typeof FileReader !== "undefined") {
				self._buildEditBinaryField(imgParent, docUrl, empty);
			} else {
				if (empty) {
					// Only icon
					$(imgParent).addClass(fontUtils.binaryIcon(self.cssType, "default"));
				} else {
					// link - Maybe we could manage a modal to display the image 
					var e = uiUtils.createDomElement("a", ["img-responsive"], null, {
						"href": "#"
					}, imgParent);
					if (self.isImage) {
						// Image with link
						e = uiUtils.createDomElement("img", ["img-responsive"], null, {
							src: docUrl
						}, e);
						//e.style.backgroundImage = 'url("' + docUrl + '")';
					} else {
						// Icon with link
						e = uiUtils.createDomElement("span", fontUtils.binaryIcon(self.cssType, "default"), null, null, e);
					}
				}
			}
		},
		_buildEditBinaryField: function(parentSlot, docUrl, empty) {
			var self = this;

			// layout structure
			var $$layout = $('\
				<div class="s-m-img-layout">\
					<header></header>\
					<section></section>\
					<footer></footer>\
				</div>');

			// building 3 components. clear button, core and upload button. All clickable.
			var clearBtn, uploadBtn, core;

			// build clear btn.
			clearBtn = uiUtils.createDomElement("a", ["ctrl-evt-click"], null, {
				"href": "#"
			}, $$layout.find("header"));
			clearBtn = uiUtils.createDomElement("span", fontUtils.getIconByName("close"), null, null, clearBtn);
			$(clearBtn).toggle(!empty);

			// build core
			core = uiUtils.createDomElement("a", ["img-responsive", "s-m-field-" + (self.isImage ? "img" : "bin"), "ctrl-evt-click"], null, {
				"href": "#"
			}, $$layout.find("section"));


			// *image* core
			if (self.isImage) {

				// build upload button only for image content
				uploadBtn = uiUtils.createDomElement("a", ["ctrl-evt-click"], locale.text("image.label." + (empty ? "addimage" : "changeimage")), {
					"href": "#"
				}, $$layout.find("footer"));

				// use default image if empty content
				if (empty) {
					core = uiUtils.createDomElement("span", [fontUtils.binaryIcon(self.cssType, "default") + " s-m-empty", "img-responsive"], null, null, core);
				} else {
					core = uiUtils.createDomElement("img", ["img-responsive"], null, {
						src: docUrl
					}, core);
				}

			} else {

				// *document* core
				core = uiUtils.createDomElement("span", [fontUtils.binaryIcon(self.cssType, "default"), empty ? "s-m-empty" : "", "s-m-doc"], null, null, core);
				$$layout.find("footer").css("display", "none");
			}

			parentSlot.appendChild($$layout[0]);

			// append <input> dom if image
			if (self.isImage) {
				var inputDom = uiUtils.createDomElement("input", ["ctrl-evt-change"], null, {
					"type": "file",
					"accept": "image/*"
				}, parentSlot);
			}
		},
		onClick: function(evt) {
			var self = this;
			var dom = evt.target.nodeName.toLowerCase() === "span" ? evt.target.parentNode : evt.target;
			var parentDom = dom.parentNode;
			self[_handlersMap[parentDom.nodeName.toLowerCase()]](evt, dom);
		},
		/*
			When clear button is clicked
			- Removes binary content
			- Hide clear button
			- Update upload button text if image
		*/
		_onClearClick: function(evt, dom) {
			var self = this;

			// get the clear btn
			var clearBtn = dom;

			// get core elmt (the anchor containing the image or the file)
			var core = self.$$elmt.find(".s-m-img-layout > section > a")[0];

			// remove image/doc
			uiUtils.empty(core);

			// update image/doc
			core = uiUtils.createDomElement("span", [fontUtils.binaryIcon(self.cssType, "default"), "s-m-empty"], null, null, core);

			// update dao
			self.setValue(null);

			// toggle clearBtn
			$(clearBtn).toggle();

			// update upload button
			if (self.isImage) {
				self.$$elmt.find(".s-m-img-layout > footer > a").text(locale.text("image.label.addimage"));
			}
		},
		/*
			When image is clicked
			- If not empty, open image
			- If empty, run upload image process

			When document is clicked
			- If empty, nothing
			- If not empty, open document
		*/
		_onDocumentClick: function(evt, dom) {
			var self = this;
			var value = self.getFormattedValue(self.getValue());
			var docUrl = self.prototype.data("$url", self.getDao) || "";
			var empty = value == null || value === "" || docUrl.length === 0;

			if (self.isImage) {
				if (empty) {
					// upload image
					self._onUploadClick(evt, dom);
				}
			}
		},
		/* 
		When upload button is clicked (or empty image), run upload and update dao
	*/
		_onUploadClick: function(evt, dom) {
			var self = this;
			var $$inputDom = self.$$elmt.find(".s-m-value > input");
			$$inputDom.trigger("click");
		},
		/*
		Runs image selection within the client device
		Updates dao
	*/
		onChange: function(evt) {
			var self = this;

			if (evt.target.nodeName.toLowerCase() === 'input') {
				var files = evt.target.files; // FileList object
				var res = {};
				if (files && files.length) {
					var f = files[0];
					if (!f.type.match('image.*')) return;
					res.$contentType = f.type;
					res.$fileName = f.name;
					res.$type = "image";

					var reader = new FileReader();
					reader.onload = (function(theFile, cont) {
						return function(e) {
							var i = e.target.result.indexOf("base64,");
							if (i > 0) cont.$value = e.target.result.substring(i + 7);
							else cont.$value = e.target.result;
							delete cont.$url;
							self.setValue(cont.$value);
							self._setImage(e.target.result);
						};
					})(f, res);
					reader.readAsDataURL(f);

				}
			}
		},
		/*
		Set image based on client image src
		*/
		_setImage: function(src) {
			var self = this;

			// get core elmt (the anchor containing the image)
			var core = self.$$elmt.find(".s-m-img-layout > section > a")[0];

			// remove image
			uiUtils.empty(core);

			// update image
			core = uiUtils.createDomElement("img", ["img-responsive"], null, {
				src: src
			}, core);

			// update upload button
			self.$$elmt.find(".s-m-img-layout > footer > a").text(locale.text("image.label.changeimage"));

			// toggle clearBtn
			self.$$elmt.find(".s-m-img-layout > header > a").toggle(true);
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/helpers/html-escape/lib/escape',['require','exports','module'],function (require, exports, module) {

function fixOptions(options) {
	options = options || {};
	options.allowedTags = (options.allowedTags || []).concat( //
		['h1', 'h2', 'h3', 'h4', 'h5', 'h6', //
			'blockquote', 'p', 'a', 'ul', 'ol', 'nl', 'li', //
			'b', 'i', 'strong', 'em', 'strike', 'code', //
			'hr', 'br', 'div', 'pre', //
			'table', 'thead', 'caption', 'tbody', 'tr', 'th', 'td', 'pre'
		]);
	options.allowedAttributes = (options.allowedAttributes || []).concat( //
		['class', 'href', 'src', 'name', 'target']);
	options.allowedSchemes = (options.allowedSchemes || []).concat( //
		['http', 'https', 'mailto']);
	return options;
}

function map(array) {
	return array.reduce(function(map, key) {
		map[key] = true;
		return map;
	}, {});
}

function escapeText(str) {
	return str.replace(/>/g, '&gt;');
}

function escapeComment(str) {
	return str.replace(/-->/g, '__>');
}

function escapeStyle(str) {
	// brutal: will cripple all occurrences of javascript, expression and url
	return str.replace(/\/\*.*?\*\//g, '').replace(/(\\|\b)(j\\?a\\?v\\?a\\?s\\?c\\?r\\?i\\?p\\?t|e\\?x\\?p\\?r\\?e\\?s\\?s\\?i\\?o\\?n|u\\?r\\?l)\b/ig, 'disabled-$1$2');
}

function escapeType(str) {
	// cripple type="text/javascript"
	return str.replace(/javascript/i, "disabled-javascript");
}

exports.escaper = function(options) {
	options = fixOptions(options);
	var allowedTags = map(options.allowedTags);
	var allowedAttributes = map(options.allowedAttributes);
	var allowedSchemes = map(options.allowedSchemes);
	var urlAttributes = /^(href|src|dynsrc|lowsrc|background)$/i;
	var preserve = options.preserve;
	var warn = options.warn;

	function checkChange(oldVal, newVal, prefix) {
		if (warn && newVal !== oldVal) warn(prefix + ": " + oldVal + " -> " + newVal);
		return newVal;
	}

	function escapeValue(key, val) {
		if (key === 'style') return checkChange(val, escapeStyle(val), "sanitized style");
		if (key === 'type') return checkChange(val, escapeType(val), "sanitized type attribute");
		return val;
	}

	function create() {
		var result = "";
		var inside = "text";

		function skipTillMarker(frag, marker, repl) {
			var i = frag.indexOf(marker);
			if (i >= 0) {
				if (preserve) result += escapeComment(frag.substring(0, i)) + repl + '-->';
				result += escapeText(frag.substring(i + marker.length));
				inside = "text";
			} else {
				if (preserve) result += escapeComment(frag);
			}
			return result;
		}

		function skipTillClosing(frag, tag, allowed) {
			var re = new RegExp('^/' + tag + '>', 'i');
			var m = re.exec(frag);
			if (m) {
				if (allowed) result += '</' + tag + '>';
				else if (preserve) result += '</' + tag + '>-->';
				result += escapeText(frag.substring(m[0].length));
				inside = "text";
			} else {
				if (allowed) result += escapeValue(tag, '<' + frag);
				else if (preserve) result += escapeComment('<' + frag);
			}
			return result;
		}

		function reject(frag, warn) {
			if (warn) warn("malformed element: " + frag);
			if (preserve) result += '<!--<' + escapeComment(frag) + '-->';
			return result;
		}

		function allowedValue(atb, val) {
			if (urlAttributes.test(atb)) {
				var colon = val.indexOf(':');
				if (colon < 0 || !allowedSchemes[val.substring(0, colon)]) return false;
			}
			return true;
		}

		function escapeTag(tag, closing, atbs, autoClosed) {
			if (closing) {
				result += '</' + tag + '>';
				atbs = atbs.trim();
				if (preserve && atbs) result += '<!--@' + escapeComment(atbs) + '-->';
				return;
			}
			result += '<' + tag;
			var end = 0;
			var re = /^\s*(\w+)(?:\s*=\s*(?:(["'])(.*?)\2|()([\w_-]+)))?/,
				m;
			while (m = re.exec(atbs)) {
				atbs = atbs.substring(m[0].length);
				var atb = m[1].toLowerCase();
				var quote = m[2] || '"';
				var val = m[3] || m[5];
				if (!allowedAttributes[atb] || !allowedValue(atb, val)) {
					if (warn) warn("forbidden attribute: " + atb);
					if (preserve) atb = "disabled-" + atb;
					else continue;
				}
				result += ' ' + atb + (val === undefined ? '' : '=' + quote + escapeValue(atb, val) + quote);
			}
			if (autoClosed) result += '/>';
			else result += '>';
			atbs = atbs.trim();
			if (warn && atbs) warn("malformed attribute: " + atbs);
			if (preserve && atbs) {
				result += '<!--@' + escapeComment(atbs) + '-->';
			}
		}

		return function(frag) {
			result = "";
			if (inside === "comment") return skipTillMarker('<' + frag, '-->', '');
			if (inside === "cdata") return skipTillMarker('<' + frag, ']]>', ']]');
			if (inside === "script") return skipTillClosing(frag, 'script');
			if (inside === "style") return skipTillClosing(frag, 'style', allowedTags.style);

			if (/^!--/.test(frag)) {
				inside = "comment";
				if (preserve) result += '<!-- '; // extra space marks as original comment for roundtripping
				return skipTillMarker(frag.substring(3), '-->', '');
			}
			if (/^!\[CDATA\[/.test(frag)) {
				inside = "cdata";
				if (warn) warn("forbidden CDATA");
				if (preserve) result += '<!--';
				return skipTillMarker(frag.substring(1), ']]>', ']]');
			}
			if (/^script\b/i.test(frag)) {
				inside = "script";
				if (warn) warn("forbidden *** SCRIPT *** element");
				if (preserve) result += '<!--';
				return skipTillClosing(frag, 'script');
			}
			if (/^style\b/i.test(frag)) {
				inside = "style";
				if (!allowedTags.style && warn) warn("forbidden STYLE element");
				if (preserve && !allowedTags.style) result += '<!--';
				return skipTillClosing(frag, 'style', allowedTags.style);
			}
			// Special contents have been intercepted.
			// Reject malformed tags
			var end = frag.indexOf('>');
			if (end < 0) return reject(frag, warn); // not closed
			var m = /^(\/?)(\w+)/.exec(frag);
			if (!m) return reject(frag, warn); // invalid syntax: tag name not found
			var tag = m[2].toLowerCase();
			if (!allowedTags[tag]) {
				if (warn && !m[1]) warn("forbidden " + tag.toUpperCase() + " element");
				if (preserve) reject(frag.substring(0, end + 1));
				escapeText(frag.substring(0, end + 1));
			} else {
				// tag is allowed
				var autoClosed = frag[end - 1] === '/';;
				escapeTag(tag, m[1], frag.substring(m[1].length + tag.length, autoClosed ? end - 1 : end), autoClosed);
			}
			result += escapeText(frag.substring(end + 1));
			return result;
		};
	};

	if (options.streaming) {
		return (function() {
			var process;
			return function(text) {
				if (text.indexOf('<') >= 0) throw new Error('internal error: bad HTML fragment');
				if (!process) {
					process = create();
					return escapeText(text);
				} else {
					return process(text);
				}
			};
		})();
	} else {
		return function(text) {
			var process = create();
			var frags = text.split('<');
			var result = escapeText(frags[0]);
			return frags.slice(1).reduce(function(r, frag) {
				return r + process(frag);
			}, result);
		};
	}
};
});

define('syracuse-tablet/html/js/helpers/html-escape/lib/unescape',['require','exports','module'],function (require, exports, module) {

exports.unescaper = function(options) {
	options = options || {};

	function uncomment(str) {
		return str.replace(/__>/g, '-->');
	}

	function process(str) {
		return str.replace(/disabled-(\w+=?)/g, '$1').replace(/(.?)<!--(.*?)-->/g, function(all, ch, commented) {
			if (commented[0] === ' ') return ch + '<!--' + commented.substring(1) + '-->';
			if (commented[0] === '[') return ch + '<!' + uncomment(commented) + '>';
			if (commented[0] === '<') return ch + uncomment(commented);
			if (commented[0] === '@') return uncomment(commented.substring(1)) + ch;
			throw new Error("cannot unescape: " + commented);
		});
	}
	if (options.streaming) {
		var buf = "";
		return function(str) {
			if (str === undefined) return process(buf);
			var start = Math.max(0, buf.length - 2);
			buf += str;
			var end = buf.indexOf('-->', start);
			if (end < 0) return '';
			var r = process(buf.substring(0, end + 3));
			buf = buf.substring(end + 3);
			return r;
		};
	} else {
		return process;
	}
};
});

define('syracuse-tablet/html/js/helpers/html-escape/index',['require','exports','module','./lib/escape','./lib/unescape'],function (require, exports, module) {
exports.escaper = require('./lib/escape').escaper;
exports.unescaper = require('./lib/unescape').unescaper;
});

define('syracuse-tablet/html/js/helpers/syracuse-rtf/lib/rtfparse',['require','exports','module'],function (require, exports, module) {

var lowerLetter = {},
	digit = {},
	LF = '\n'.charCodeAt(0),
	SP = ' '.charCodeAt(0),
	BSLASH = '\\'.charCodeAt(0),
	OPEN = '{'.charCodeAt(0),
	CLOSE = '}'.charCodeAt(0),
	DASH = '-'.charCodeAt(0),
	QUOTE = "\'".charCodeAt(0),
	STAR = "*".charCodeAt(0);

(function() {
	function add(clas, chs, i) {
		chs.split('').forEach(function(ch) {
			clas[ch.charCodeAt(0) + (i || 0)] = true;
		});
	}
	for (var i = 0; i <= 9; i++) add(digit, '0', i);
	for (var i = 0; i < 26; i++) add(lowerLetter, 'a', i);
})();

function builder(error) {
	var group = [],
		stack = [group];
	return {
		open: function() {
			var g = [];
			group.push(g);
			stack.push(g);
			group = g;
		},
		close: function() {
			if (stack.length <= 1) error("too many }");
			group = stack.pop();
			group = stack[stack.length - 1];
		},

		text: function(str) {
			group.push(str);
		},

		control: function(word, arg) {
			var obj = {
				word: word
			};
			if (arg != null) obj.arg = arg;
			group.push(obj);
		},

		/*star: function() {
			group.push({word: "*"});
		},*/

		getResult: function() {
			if (stack.length !== 1) error("missing }");
			return stack[0][0];
		}
	};
}

// returns tree. 
// intermediate nodes are arrays and correspond to rtf groups ({ ...})
// leaf nodes are either
// * strings (text elements)
// * control directives { word: w, arg: a }
exports.parse = function(str) {
	str = str.replace(/\r\n/g, '\n');
	var pos = 0,
		begText = 0,
		len = str.length,
		line = 1,
		bld = builder(error);

	function error(msg) {
		var end = str.indexOf(/[\n>]/, pos);
		if (end < 0) end = str.length;
		return new Error("Invalid RTF: " + msg + " at line " + line + " near " + str.substring(pos, end));
	}

	function flush() {
		if (pos > begText) bld.text(str.substring(begText, pos));
	}
	while (pos < len) {
		var ch = str.charCodeAt(pos);
		switch (ch) {
			case BSLASH:
				flush();
				var beg = ++pos;
				while (lowerLetter[ch = str.charCodeAt(pos)]) pos++;
				if (pos > beg) {
					var word = str.substring(beg, pos),
						arg = undefined;
					if (ch === DASH || digit[ch]) {
						beg = pos;
						pos++;
						while (digit[ch = str.charCodeAt(pos)]) pos++;
						arg = parseInt(str.substring(beg, pos), 10);
					}
					if (ch === SP || ch === LF || (word === "u" && ch !== BSLASH && ch !== OPEN && ch !== CLOSE)) {
						pos++;
					}
					bld.control(word, arg);
				} else if (ch === QUOTE) {

					var symb = String.fromCharCode(parseInt(str.substring(pos + 1, pos + 3), 16));
					bld.text(symb);
					pos = pos + 3;
				} else if (ch === STAR) {
					bld.control("*");
					pos++;
				}

				begText = pos;
				break;
			case OPEN:
				flush();
				bld.open();
				begText = ++pos;
				break;
			case CLOSE:
				flush();
				bld.close();
				begText = ++pos;
				break;
			case LF:
				flush(); // to discard newline from output
				line++;
				begText = ++pos;
				break;
			default:
				pos++;
		}
	}
	flush();
	return bld.getResult();
};
});

define('syracuse-tablet/html/js/helpers/syracuse-rtf/lib/rtfinterpret',['require','exports','module','./rtfparse'],function (require, exports, module) {

var rtfparser = require('./rtfparse');

exports.interpret = function(root) {

	var group;
	var documentModel = {
		deffont: "",
		fonts: {},
		colors: [],
		styles: {},
	};
	var fontfamgroups = {
		fnil: "Sans-serif",
		froman: "Sans-serif",
		fswiss: "Serif",
		fmodern: "Monospace",
		fscript: "Cursive",
		fdecor: "Cursive"
	};

	var supported = ["rtf", "ansi", "ansicpg", "deff", "fonttbl", "colortbl", "stylesheet", //
		"fs", "f", "cf", "highlight", "i", //
		"b", "ul", "strike", "plain", //
		"qc", "ql", "qr", "qj", "par", "pard", "pn"
	];

	function interpretFont(features, index, fonts) {
		var fname = features[0].word + features[0].arg;
		var font = (documentModel.fonts[fname] = {});
		for (var i = 1; i < features.length; i++) {
			interpretFontFeature(features[i], font);
		}
	}

	function interpretFontFeature(feature, font) {
		var sep;
		if (typeof feature == "string" && (sep = feature.indexOf(';')) > 0) {
			font.name = feature.substring(0, sep);
		}
	}

	function interpretStylesheet(features, index, styles) {
		var fname, style;
		if (features[0].word) {
			fname = features[0].word + features[0].arg;
			style = (documentModel.styles[fname] = {});
			for (var i = 1; i < features.length; i++) {
				interpretStyleFeature(features[i], style);
			}
		}
	}

	function interpretStyleFeature(feature, style) {
		var sep;
		if (typeof feature == "string" && (sep = feature.indexOf(';')) > 0) {
			style.name = feature.substring(0, sep);
		}
	}

	function interpretControl(node, parent, index) {
		switch (node.word) {
			case "rtf":
			case "ansi":
			case "ansicpg":
				break;
			case "stylesheet":
				parent.slice(1).filter(function(item) {
					// keep only arrays, remove newlines
					return Array.isArray(item);
				}).forEach(interpretStylesheet);
				//documentModel.stylesheet ="";
				break;
			case "deff":
				documentModel.deffont = "f" + node.arg;
				break;
			case "fonttbl":
				parent.slice(1).filter(function(item) {
					// keep only arrays, remove newlines
					return Array.isArray(item);
				}).forEach(interpretFont);
				break;
			case "colortbl":
				// semicolon counts for one item => skip 2 items first
				var i = 1;
				if (parent[i] === ';') {
					documentModel.colors.push([0, 0, 0]);
					i++;
				}
				while (i < parent.length) {
					documentModel.colors.push([parent[i].arg, parent[i + 1].arg, parent[i + 2].arg]);
					i += 4; // skip semicolon too
				} // while
				break;

			case "*":
				/*console.log(parent[index+1].word) ;*/
				if (supported.indexOf(parent[index + 1].word) == -1) parent.splice(index, parent.length - index);
				break;
		} //switch

	}

	function interpretNode(node, index, array) {
		if (Array.isArray(node)) {
			// child nodes will receive node as array argument.
			node.forEach(interpretNode);
		} else if (typeof node === "object") {
			interpretControl(node, array, index);
		}
	}

	/* on copie fonts et colors dans styles */
	interpretNode(root);
	return documentModel;
};
});

define('syracuse-tablet/html/js/helpers/syracuse-rtf/lib/buildhtml',['require','exports','module'],function (require, exports, module) {

// ===================================================================================================================================================
// ===================================================================================================================================================
// ===================================================================================================================================================
// ===================================================================================================================================================
//	<div class="s-rtf-root">
//	<div class="s-rtf-section">
//		<p></p>
//		<p></p>
//	</div>
//	<div class="s-rtf-section">
//		<ul>
//			<li></li>
//			<li></li>
//			<li></li>
//		</ul>
//	</div>
//</div>
var styleName = {
	cf: "color",
	highlight: "background-color"
};

function rgbToHex(rgb) {
	if (rgb) {
		return toHex(rgb[0]) + toHex(rgb[1]) + toHex(rgb[2]);
	} else {
		return "000000"; //default color
	}
}

function toHex(n) {
	return ("00" + n.toString(16)).slice(-2);
}

function twipsToPoint(t) {
	return t / 20;
}

function indentCount(t) {
	return t / 600;
}

function indentBulletCount(t) {
	return t / 420;
}

function twipsToPixel(t) {
	return t / 15;
}

function builder(documentModel) {
	var rtffonts = documentModel.fonts,
		deffont = documentModel.deffont,
		colors = documentModel.colors,
		styles = documentModel.styles,
		htmltext = "",
		$rootdiv = $("<div>").addClass('s-rtf-root'),
		$current = null,
		$section = null,
		$worker = null,
		context;

	newSection();

	function newWorker() {
		$current = $worker = $("<div>").addClass('s-rtf-worker').addClass('s-rtf-clean');
		return $worker.appendTo($section);
	}

	function newSection() {
		$section = $("<div>").addClass('s-rtf-section').addClass('s-rtf-clean');
		newWorker();
		return $section.appendTo($rootdiv);
	}

	function characterFormatting(node) {
		switch (node.word) {

			case "f":
				/*case "pnf":*/
				var fontface = rtffonts[node.word + node.arg].name;
				return $("<font face='" + fontface + "'>");

			case "fs":
				//case "pnfs":
				return $("<span style='font-size: " + node.arg / 2 + "pt;'>");
			case "tab":
				//case "pnfs":
				//return $("<span style='margin-left: 10pt'>");//be  carrefull depending on navigator
				return $("<blockquote>"); //be  carrefull depending on navigator
			case "cf":
				//if(!node.arg) return null;
			case "highlight":
				// do not use css() because it converts hex value into rgb style
				// return $("<span>").css(styleName[node.word], "#" + rgbToHex(colors[node.arg]));
				return $("<span style='" + styleName[node.word] + ": #" + rgbToHex(colors[node.arg]) + ";'>");

			case "b":
				return $("<b>");
			case "i":
				return $("<i>");
			case "ul":
				return $("<u>");
			case "strike":
				return $("<s>");
				/*
		case "plain":
			return ["<pre>", "</pre>"];
		case "list":
			return ["<ul>", "</ul>"];
		case "pntext":*/
				/*case "bullet":
			return $("<li>");
		case "line":
			return $("<br>");*/
			default:
				// ; //$("");
		}
	}

	function paragraphFormatting(elt, node) {
		elt.addClass('s-rtf-format');

		dirty();

		switch (node.word) {
			case "ql":
				return elt.attr("align", "left");
			case "qc":
				return elt.attr("align", "center");
			case "qr":
				return elt.attr("align", "right");
			case "qj":
				return elt.attr("align", "justify");
			case "li":
				// return elt.css("margin-left", twipsToPixel(node.arg) + "px");
				if (node.arg > 0)
					return elt.css("margin-left", twipsToPoint(node.arg) + "pt");
				else
					return elt;
			case "ri":
				// return elt.css("margin-right", twipsToPixel(node.arg) + "px");
				if (node.arg > 0)
					return elt.css("margin-right", twipsToPoint(node.arg) + "pt");
				else
					return elt;
			default:
				return elt;
		}

	}

	function dirty() {
		$worker && $worker.removeClass("s-rtf-clean");
		// if we want to always have a paragraph, uncomment this line
		// $worker && $worker.addClass("s-rtf-paragraph");
		$section && $section.removeClass("s-rtf-clean");
	}

	function append(elt) {
		dirty();
		$current.append(elt);
	}

	function wrapIn(elt) {
		dirty();
		$current = elt.appendTo($current);
	}

	context = (function() {
		var stack = [{
			format: {}
		}],
			current = stack[0];

		function flattenFormat() {
			var f, fmt = {};
			stack.forEach(function(ctx) {
				f = ctx.format;
				Object.keys(f).forEach(function(key) {
					if (typeof(fmt[key]) === "undefined") {
						fmt[key] = f[key];
					}
				});
			});
			return fmt;
		}

		return {
			open: function() {
				stack.push(current = {
					format: {}
				});
			},

			close: function(idx, parent) {
				stack.pop();
				current = stack[stack.length - 1];
				if (idx < parent.length - 1) {
					this.pending = true;
				}
			},

			update: function(prop, el) {
				if (el === null) {
					delete current.format[prop];
				} else {
					current.format[prop] = el;
				}
			},

			startOver: function() {
				if (!this.pending) return;
				var fmt = flattenFormat();
				Object.keys(fmt).forEach(function(key) {
					$current = fmt[key].clone().appendTo($current);
				});
				this.pending = false;
			}
		};
	})();

	return {
		text: function(str) {
			dirty();
			context && context.startOver();
			var content = $current.html();
			$current.html(content + str);
		},

		open: function() {
			context.open();
		},

		close: function(idx, parent) {
			$current = $worker;
			if ($current.length === 0) $current = $rootdiv;
			context.close(idx, parent);
		},

		control: function(node) {
			switch (node.word) {

				case "par":
					dirty();
					$worker.removeClass("s-rtf-worker").addClass("s-rtf-paragraph");
					$current = $worker = newWorker();
					context && (context.pending = true);
					break;

				case "pard":
					if (!$section.hasClass("s-rtf-clean")) {
						$section = newSection();
						context && (context.pending = true);
					}
					break;

				case "pn":
					$section.addClass("s-rtf-list");
					break;

				case "u":
					this.unicodechar(node.arg);
					break;

				case "qc":
				case "ql":
				case "qr":
				case "qj":
				case "ri":
					paragraphFormatting($section, node);
					break;
				case "li":
					if ($section.hasClass("s-rtf-list")) {
						$section.attr("indent", indentBulletCount(node.arg));
					} else {
						if (!$section.hasClass("s-rtf-clean") && !$section.hasClass("s-rtf-format")) {
							$section = newSection();
							context && (context.pending = true);
						}
						$section.addClass("s-rtf-left-indent");
						$section.attr("indent", indentCount(node.arg));
					}
					break;
				case "lquote":
				case "rquote":
					this.text("'");
					break;

				case "line":
					append("<br>");
					break;
				case "bullet":
					// var el = $("<li>");
					// var dd = 1;
					// if ($current.is("li")) {
					//	$current.parent().append(el);
					// } else {
					//	$current.append(el);
					// }
					// $current = el;
					break;

				case "i":
				case "b":
				case "strike":
				case "ulnone":
				case "ul":
					if (node.arg === 0 || node.word === "ulnone") {
						var tagname;
						if (node.word === "strike") {
							tagname = "s";
						} else if (node.word === "ulnone") {
							tagname = "u";
						} else {
							tagname = node.word;
						}
						if ($current.is(tagname)) {
							$current = $current.parent();
						} else {
							if ($current.html() !== "") {
								var tag = $current.closest(tagname);
								$current = tag.parent();
							}
						}

						context.update(node.word, null);
						break;
					}
				default:
					var el = characterFormatting(node);

					if (el) {
						context.update(node.word, el.clone());
						!context.pending && wrapIn(el);
					}
			}
			//console.log(node.word + "\n"+$rootdiv.html())
		},
		unicodechar: function(code) {
			dirty();
			var content = $current.html();
			$current.html(content + String.fromCharCode(code));
		},

		getHtml: function() {
			//console.log($rootdiv.html())
			// cleanup
			$rootdiv.find(".s-rtf-clean").remove();
			// replace <div> by <ul>
			var sections = $rootdiv.find(".s-rtf-section.s-rtf-list") //.removeAttr("class");
			sections.map(function(i, e) {
				var $e = $(e);
				var i = parseInt($e.attr("indent"), 10);
				var w = [];
				while (w.length < i) {
					w.push("<ul>");
				}
				$e.wrap(w.join("")).contents();
				//$e.removeAttr("indent");
			});
			var workers = sections.find(".s-rtf-paragraph");
			workers.wrap("<li>").contents().unwrap();
			//sections.unwrap();
			var indent = $rootdiv.find(".s-rtf-section.s-rtf-left-indent").removeClass("s-rtf-left-indent");
			indent.map(function(i, e) {
				var $e = $(e);
				var i = parseInt($e.attr("indent"), 10);
				var w = [];
				while (w.length < i) {
					w.push("<blockquote>");
				}
				$e.wrap(w.join("")).contents();
				$e.removeAttr("indent");
			});



			sections = $rootdiv.find(".s-rtf-section");

			// replace <div> by <p>
			sections.find(".s-rtf-paragraph").removeAttr("class").wrap("<p>").contents().unwrap();
			sections.find("div:empty").remove();



			// cleanup
			sections.find(".s-rtf-worker:empty").remove();
			sections.filter(":not(.s-rtf-format)").contents().unwrap();
			while ($rootdiv.find("span:empty").length) {
				$rootdiv.find("span:empty").remove();
			};
			$rootdiv.find(".s-rtf-worker").removeAttr("class").contents().unwrap();
			$rootdiv.find(".s-rtf-format").removeAttr("class");

			return $rootdiv.html();
		}
	};
}

// HTML builder
exports.buildHtml = function(root, documentModel) {
	var bld = builder(documentModel);

	function interpretNode(node, index, array) {
		if (typeof node == "string") {
			bld.text(node);
			return;
		}
		if (Array.isArray(node) && node.length > 0) {
			if (node[0]) {
				switch (node[0].word) {
					case 'fonttbl':
					case 'colortbl':
					case 'stylesheet':
					case 'pntxtb':
					case 'pntext':
					case 'pict':
						return;
				}
			}
			bld.open();
			node.forEach(interpretNode);
			bld.close(index, array);

			return;
		}

		if (typeof(node) === "object") {
			bld.control(node);

		}
	}

	interpretNode(root, 0, []);
	if (!root) return "<div></div>";
	return bld.getHtml();
};
});

define('syracuse-tablet/html/js/helpers/syracuse-rtf/lib/buildrtf',['require','exports','module'],function (require, exports, module) {
var colors = {
	"aliceblue": "#f0f8ff",
	"antiquewhite": "#faebd7",
	"aqua": "#00ffff",
	"aquamarine": "#7fffd4",
	"azure": "#f0ffff",
	"beige": "#f5f5dc",
	"bisque": "#ffe4c4",
	"black": "#000000",
	"blanchedalmond": "#ffebcd",
	"blue": "#0000ff",
	"blueviolet": "#8a2be2",
	"brown": "#a52a2a",
	"burlywood": "#deb887",
	"cadetblue": "#5f9ea0",
	"chartreuse": "#7fff00",
	"chocolate": "#d2691e",
	"coral": "#ff7f50",
	"cornflowerblue": "#6495ed",
	"cornsilk": "#fff8dc",
	"crimson": "#dc143c",
	"cyan": "#00ffff",
	"darkblue": "#00008b",
	"darkcyan": "#008b8b",
	"darkgoldenrod": "#b8860b",
	"darkgray": "#a9a9a9",
	"darkgreen": "#006400",
	"darkkhaki": "#bdb76b",
	"darkmagenta": "#8b008b",
	"darkolivegreen": "#556b2f",
	"darkorange": "#ff8c00",
	"darkorchid": "#9932cc",
	"darkred": "#8b0000",
	"darksalmon": "#e9967a",
	"darkseagreen": "#8fbc8f",
	"darkslateblue": "#483d8b",
	"darkslategray": "#2f4f4f",
	"darkturquoise": "#00ced1",
	"darkviolet": "#9400d3",
	"deeppink": "#ff1493",
	"deepskyblue": "#00bfff",
	"dimgray": "#696969",
	"dodgerblue": "#1e90ff",
	"firebrick": "#b22222",
	"floralwhite": "#fffaf0",
	"forestgreen": "#228b22",
	"fuchsia": "#ff00ff",
	"gainsboro": "#dcdcdc",
	"ghostwhite": "#f8f8ff",
	"gold": "#ffd700",
	"goldenrod": "#daa520",
	"gray": "#808080",
	"green": "#008000",
	"greenyellow": "#adff2f",
	"honeydew": "#f0fff0",
	"hotpink": "#ff69b4",
	"indianred ": "#cd5c5c",
	"indigo ": "#4b0082",
	"ivory": "#fffff0",
	"khaki": "#f0e68c",
	"lavender": "#e6e6fa",
	"lavenderblush": "#fff0f5",
	"lawngreen": "#7cfc00",
	"lemonchiffon": "#fffacd",
	"lightblue": "#add8e6",
	"lightcoral": "#f08080",
	"lightcyan": "#e0ffff",
	"lightgoldenrodyellow": "#fafad2",
	"lightgrey": "#d3d3d3",
	"lightgreen": "#90ee90",
	"lightpink": "#ffb6c1",
	"lightsalmon": "#ffa07a",
	"lightseagreen": "#20b2aa",
	"lightskyblue": "#87cefa",
	"lightslategray": "#778899",
	"lightsteelblue": "#b0c4de",
	"lightyellow": "#ffffe0",
	"lime": "#00ff00",
	"limegreen": "#32cd32",
	"linen": "#faf0e6",
	"magenta": "#ff00ff",
	"maroon": "#800000",
	"mediumaquamarine": "#66cdaa",
	"mediumblue": "#0000cd",
	"mediumorchid": "#ba55d3",
	"mediumpurple": "#9370d8",
	"mediumseagreen": "#3cb371",
	"mediumslateblue": "#7b68ee",
	"mediumspringgreen": "#00fa9a",
	"mediumturquoise": "#48d1cc",
	"mediumvioletred": "#c71585",
	"midnightblue": "#191970",
	"mintcream": "#f5fffa",
	"mistyrose": "#ffe4e1",
	"moccasin": "#ffe4b5",
	"navajowhite": "#ffdead",
	"navy": "#000080",
	"oldlace": "#fdf5e6",
	"olive": "#808000",
	"olivedrab": "#6b8e23",
	"orange": "#ffa500",
	"orangered": "#ff4500",
	"orchid": "#da70d6",
	"palegoldenrod": "#eee8aa",
	"palegreen": "#98fb98",
	"paleturquoise": "#afeeee",
	"palevioletred": "#d87093",
	"papayawhip": "#ffefd5",
	"peachpuff": "#ffdab9",
	"peru": "#cd853f",
	"pink": "#ffc0cb",
	"plum": "#dda0dd",
	"powderblue": "#b0e0e6",
	"purple": "#800080",
	"red": "#ff0000",
	"rosybrown": "#bc8f8f",
	"royalblue": "#4169e1",
	"saddlebrown": "#8b4513",
	"salmon": "#fa8072",
	"sandybrown": "#f4a460",
	"seagreen": "#2e8b57",
	"seashell": "#fff5ee",
	"sienna": "#a0522d",
	"silver": "#c0c0c0",
	"skyblue": "#87ceeb",
	"slateblue": "#6a5acd",
	"slategray": "#708090",
	"snow": "#fffafa",
	"springgreen": "#00ff7f",
	"steelblue": "#4682b4",
	"tan": "#d2b48c",
	"teal": "#008080",
	"thistle": "#d8bfd8",
	"tomato": "#ff6347",
	"turquoise": "#40e0d0",
	"violet": "#ee82ee",
	"wheat": "#f5deb3",
	"white": "#ffffff",
	"whitesmoke": "#f5f5f5",
	"yellow": "#ffff00",
	"yellowgreen": "#9acd32",
	// system colors
	"window": "#ffffff",
	"windowframe": "#000000",
	"windowtext": "#000000"
};

function colourNameToHex(color) {
	return colors[color.toLowerCase()];
}

function rtfContext() {
	return {
		open: function(key) {
			if (!this[key]) {
				this[key] = {};
				this[key].current = 0;
			}
			this[key].current++;
			this[key].pending = true;
			if (this[key].value && this[key].value[this[key].current - 1]) {
				this[key].value.pop();
			}
		},
		close: function(key) {
			this[key].current--;
			if (!this[key].current) this[key].pending = false;
			else this[key].pending = true;
		},
		current: function(key) {
			return (this[key] ? this[key].current : 0);
		},
		pending: function(key, val) {
			if (val !== undefined) {
				if (!this[key]) this[key] = {};
				this[key].pending = val;
			};
			return (this[key] ? this[key].pending : false);

		},
		value: function(key, val) {
			if (!this[key]) return 0;
			if (val !== undefined) {
				val = parseInt(val, 10);
				if (this[key].value === undefined) this[key].value = [];
				this[key].value.push(((this[key].current - 1) ? (this[key].value[this[key].current - 2] + val) : val));
				//this[key].value[this[key].current-1]=((this[key].current-2)? (this[key].value[this[key].current-2]+val):val);
			};
			// console.log("Value:" + this[key].value[this[key].current-1] + " val:"+val);
			return ((this[key] && this[key].value) ? this[key].value[this[key].current - 1] : 0);

		},
		nl: false,
		par: false,
		ulindent: 0
	};
};

function builder(documentModel) {
	var rtffonts = documentModel.fonts,
		colors = documentModel.colors,
		// deffont = null,
		rtftext = "",
		needSpace = false,
		ctx = rtfContext();

	function has(obj, key) {
		return Object.prototype.hasOwnProperty.call(obj, key);
	}

	function isEmpty(obj) {
		if (obj == null) return true;
		for (var key in obj)
			if (has(obj, key)) return false;
		return true;
	}

	if (!isEmpty(rtffonts)) {
		rtftext += "{\\fonttbl";
		Object.keys(rtffonts).forEach(function(key) {
			rtftext += "{\\" + key + " " + rtffonts[key].name + ";}";
		});
		rtftext += "}";
	}

	if (colors.length > 1) {
		rtftext += "{\\colortbl";
		colors.forEach(function(e) {
			if (e[0] === 0 && e[1] === 0 && e[2] === 0) {
				rtftext += ';';
			} else {
				rtftext += "\\red" + e[0] + "\\green" + e[1] + "\\blue" + e[2] + ";";
			}
		});
		rtftext += "}";
	}

	rtftext += "\\uc0\\pard";

	function fromHtmlTag(tag) {
		tag = tag.toLowerCase();
		switch (tag) {
			case "p":
				return "\\par";
			case "b":
				return "\\b";
			case "i":
				return "\\i";
			case "u":
				return "\\ul";
			case "s":
				return "\\strike";
			case "br":
				return "\\par";
			case "blockquote":
				return "";
				//	case "li":
				//		return "\\bullet";
			default:
				return ""; //<!-- " + tag + " -->"; "\\"+tag ;
		}
	}

	return {
		//header: function(){
		//	rtftext=header+rtftext ;
		//},
		open: function() {
			rtftext += "{";
			needSpace = false;
		},
		text: function(str) {
			var pos = 0,
				beg = pos,
				c;

			while (pos < str.length) {
				while (str.charCodeAt(pos) <= 128 && str.charCodeAt(pos) != 10) {
					pos++;
				}
				if (pos > beg) {
					rtftext += (needSpace ? " " : "") + str.substring(beg, pos);
				} else if (str.charCodeAt(pos) == 10) {
					rtftext += (needSpace ? " " : "");
				}
				needSpace = false;
				if (pos < str.length) {
					c = str.charCodeAt(pos);
					// replace nbsp and \n by space
					if (c === 160 || c === 10) {
						rtftext += " ";
					} else {
						this.controlarg("u", str.charCodeAt(pos));
					}
					pos++;
				}
				beg = pos;
			}
		},
		fragment: function(str) {
			rtftext += str;
			needSpace = false;
		},
		font: function(fid) {
			if (fid !== "") {
				rtftext += "\\" + fid;
				needSpace = true;
			}
		},
		controlarg: function(word, arg) {
			rtftext += "\\" + word + arg;
			needSpace = true;
		},
		control: function(word) {
			ctx.par = (word == "par");
			rtftext += "\\" + word;
			needSpace = true;
		},
		htmltag: function(word) {
			var rtf = fromHtmlTag(word);
			if (rtf) {
				ctx.par = (rtf == "\\par");
			}
			rtftext += rtf;
			needSpace = true;
		},
		star: function() {
			rtftext += "\\*";
			needSpace = false;
		},
		close: function() {
			if (!ctx.par) rtftext += "\\par";
			rtftext = "{\\rtf1\\ansi" + rtftext + "}";
			needSpace = false;
		},
		getRtf: function() {
			return rtftext;
		},
		context: ctx
	};
}

var tagMap = {
	"margin-left": "li",
	"margin-right": "ri",
	"margin-top": "sb",
	"margin-bottom": "sa"
},
	toTwips = (function(unit, v) {
		// see http://publib.boulder.ibm.com/infocenter/domhelp/v8r0/index.jsp?topic=%2Fcom.ibm.productivity.tools.help%2Ftext%2Fcommon%2F00%2F00000003.html
		var ratio = {
			"pt": 20,
			"px": 15,
			"mm": 56.7,
			"cm": 567,
			"in": 1440.18
		};

		return function(unit, v) {
			return v * (ratio[unit] || ratio["px"]);
		};
	})();

exports.buildRtf = function(html) {
	var documentModel = {};
	documentModel.deffont = "";
	documentModel.fonts = {};
	documentModel.colors = [];
	documentModel.styles = {};
	var fontfamgroups = {
		fnil: "Sans-serif",
		froman: "Sans-serif",
		fswiss: "Serif",
		fmodern: "Monospace",
		fscript: "Cursive",
		fdecor: "Cursive"
	};
	var align = {
		left: "ql",
		center: "qc",
		right: "qr",
		justify: "qj"
	};
	var pointPxTable = [{
		pt: 6,
		px: 7
	}, {
		pt: 7,
		px: 9
	}, {
		pt: 40,
		px: 50
	}];
	var bld;
	var $root = $('<div>').append(html);
	//var $root = $(html);
	var rtffonts = [];
	//var first = false ;
	function findColor(arr, obj) {
		if (!obj) return -1;
		for (var i = 0; i < arr.length; i++) {
			if (arr[i][0] == obj[0] && arr[i][1] == obj[1] && arr[i][2] == obj[2]) {
				return i;
			}
		}
		return -1;
	}

	function isLeftIndent(n) {
		return ($(n).is("div[style]") ? ($(n).attr('style').search("margin-left") > -1) : false);
	}

	function addFont(face) {
		rtffonts.indexOf(face) < 0 && rtffonts.push(face);
	}

	function findFont(fontname) {
		var fonts = documentModel.fonts,
			keys = Object.keys(fonts);
		for (var i = 0; i < keys.length; i++) {
			if (fonts[keys[i]].name === fontname) return keys[i];
		}
		return "";
	}

	function isList(n) {
		return (($(n).is("ul") || $(n).is("li")) || (n.childElementCount > 0 && n.firstChild.nodeName === "UL"));
	}

	function processNode(n, i) {
		var clr, idx, colorid;
		//console.log(((n.nodeType!==3)?n.nodeName:n.nodeValue) + " " + (n.id?n.id:""))
		if (bld.context.pending("blockquote") && !bld.context.current("list") && !$(n).is("blockquote") && !$(n).is("div") && !bld.context.current("list") && !isList(n)) {
			bld.control("li" + (bld.context.current("blockquote") * 600));
			bld.context.pending("blockquote", false);
		}
		if (n.nodeType === 3) { // TEXT node
			bld.text(n.nodeValue);
			bld.context.par = false;
			if (n.nextSibling && $(n.nextSibling).is("blockquote")) {
				bld.control("par");
			}
		} else if ($(n).is("*[style]") && !$(n).is("blockquote")) {
			var rules = $(n).attr('style').split(';');
			var drill = !(($(n).attr('style').search("text-align") > -1) && ($(n).attr('style').search("margin-left") > -1)),
				tal = null;
			if (n.nodeName == "B") {
				bld.htmltag(n.nodeName);
			}
			rules.forEach(function(e) {
				var stylerule = e.split(':');
				if (stylerule[0] != null) stylerule[0] = stylerule[0].replace(/^\s*/, '').replace(/\s*$/, '');
				if (stylerule[1] != null) stylerule[1] = stylerule[1].replace(/^\s*/, '').replace(/\s*$/, '');
				switch (stylerule[0]) {
					case 'color':
						if (stylerule[1].substring(0, 3) === 'rgb') {
							clr = rgbColor(stylerule[1]);
							idx = findColor(documentModel.colors, clr);
						} else {
							idx = findColorInColortbl(stylerule[1]);
						}

						colorid = "cf";
						bld.controlarg(colorid, idx);
						break;

					case 'background-color':
						if (stylerule[1].substring(0, 3) === 'rgb') {
							clr = rgbColor(stylerule[1]);
							idx = findColor(documentModel.colors, clr);
						} else {
							idx = findColorInColortbl(stylerule[1]);
						}

						colorid = "highlight";
						bld.controlarg(colorid, idx);
						break;

					case 'text-decoration':
						if (stylerule[1] === 'underline') bld.control('ul');
						else if (stylerule[1] === 'line-through') bld.control('strike');
						break;
					case 'font-style':
						if (stylerule[1] === 'italic') bld.control('i');
						break;
					case 'font-weight':
						if (stylerule[1] === 'bold') bld.control('b');
						break;

					case 'font-size':
						var tmp = $(n).attr("style");
						var m = /([0-9\.\-]+)([A-Za-z]*)/g.exec(stylerule[1]),
							unit = m[2] && m[2].toLowerCase();
						//console.log(unit)
						if (unit != "em") {
							var points = parseFloat(stylerule[1]);
							var halfpoints = Math.round(points * 2);
							bld.controlarg("fs", halfpoints);
							bld.context.fs = true;
						}
						break;
					case 'margin-left':
						var m = /([0-9\.\-]+)([A-Za-z]*)/g.exec(stylerule[1]),
							unit = m[2] && m[2].toLowerCase() || "px",
							val = parseInt(m[1], 10);
						if ($(n).is("ul")) {
							bld.context.ulindent = val / 40;
							bld.context.open("list");
						} else if ($(n).is("div") || $(n).is("p")) {
							bld.context.open("lindent");
							bld.context.value("lindent", val);
							bld.controlarg(tagMap[stylerule[0]], toTwips(unit, bld.context.value("lindent")));
							//bld.context.pending("lindent",false)
							if (tal) {
								bld.control(align[tal]);
							}
						};
						if (drill) {
							$(n).contents().each(visit);
							if (n.nodeName === "P") {
								bld.context.close("lindent");
								bld.control("par");
							} else if (n.nodeName === "DIV") {
								bld.context.close("lindent");
							};
							if (bld.context.current("lindent")) {
								bld.controlarg(tagMap[stylerule[0]], toTwips(unit, bld.context.value("lindent")));
							} else {
								bld.control("pard");
							}
							//bld.context.pending("lindent",false)
						};
						drill = true;
						break;
					case 'margin-right':
					case 'margin-top':
					case 'margin-bottom':
						var m = /([0-9\.\-]+)([A-Za-z]*)/g.exec(stylerule[1]),
							unit = m[2] && m[2].toLowerCase() || "px",
							val = parseInt(m[1], 10);
						bld.controlarg(tagMap[stylerule[0]], toTwips(unit, val));
						$(n).contents().each(visit);
						if (n.nodeName === "P") {
							bld.control("par");
						}
						bld.control("pard");
						break;
					case 'margin':
						$(n).contents().each(visit);
						if (n.nodeName === "P") {
							bld.control("par");
						}
						break;
					case 'text-align':
						if (drill) {
							bld.control("pard");
							var alignment = stylerule[1];
							bld.control(align[alignment]);
							$(n).contents().each(visit);
							bld.control("par");
							bld.control("pard");
						} else {
							tal = stylerule[1];
						}
						drill = true;
						break;
				}
			});
		} else if ($(n).is("font")) {
			if ($(n).is("font[face]")) {
				var face = $(n).attr("face");
				bld.font(findFont(face));
			}
			if ($(n).is("font[color]")) {
				idx = findColorInColortbl($(n).attr("color"));
				colorid = "cf"; //+ idx;
				bld.controlarg(colorid, idx);
			}
			if ($(n).is("font[bgcolor]")) {
				idx = findColorInColortbl($(n).attr("bgcolor"));
				colorid = "highlight"; //+ idx; //"cb"+(idx);
				bld.controlarg(colorid, idx);
			}
			//Even if "SIZE" attribute of "FONT" html tag is obsolete, when copy/paste from Word document, attribute could be present.
			if ($(n).is("font[size]")) {
				idx = findFontSize($(n).attr("size"));
				bld.controlarg("fs", idx);
			}
		} else if ($(n).is("div[align]")) {
			var alignment = $(n).attr("align");
			bld.control("pard");
			bld.control(align[alignment]);

			$(n).contents().each(visit);
			if (!(n.childElementCount > 0 && n.firstChild.nodeName === "P")) {
				bld.control("par");
			}
			bld.control("pard");
		} else if (n.nodeName === "UL") {
			bld.control("pard");
			bld.context.open("list");
		} else if (n.nodeName === "LI") {
			bld.fragment("{\\pntext");
			bld.font(findFont("Symbol"));
			bld.fragment("\\'B7\\tab}");
			if (bld.context.pending("list")) {
				var uls = bld.context.current("list") + bld.context.current("blockquote") + bld.context.ulindent;
				uls = uls + bld.context.current("lindent");
				bld.fragment("{\\*\\pn\\pnlvlblt\\pnf1\\pnindent0{\\pntxtb\\'B7}}\\f0\\li" + (uls * 420));
				bld.context.ulindent = 0;
				bld.context.pending("list", false);
			}
		} else if (n.nodeName === "P") {
			bld.control("par");
		} else {
			bld.htmltag(n.nodeName);
		}
	}

	function parseColor(color) {
		var match = /#(..)(..)(..)/.exec(color) || /#(..)(..)(..)/.exec(colourNameToHex(color));
		return match && match.slice(1).map(function(v) {
			return parseInt(v, 16);
		});
	}

	function findColorInColortbl(colorstr) {
		var parsedclr = parseColor(colorstr);
		/*if (parsedclr[0]==0 && parsedclr[1]==0 && parsedclr[2]==0)
			return 0 ;*/
		var idx = findColor(documentModel.colors, parsedclr);
		if (idx == -1) return -1;
		else return idx;
	}

	function findFontSize(size) {
		size = parseInt(size, 10);
		if (size < 0 || size > 7) return 0;
		return [0, 18, 20, 24, 28, 36, 48, 72][size];
	}

	function scan(n) {
		if (!n) return;
		n.each(visit);
	}

	function processColor(coln, atb) {
		coln.each(function(i, e) {
			var tmp = $(e).attr(atb);
			var rgb = parseColor(tmp);
			if (rgb && findColor(documentModel.colors, rgb) == -1) {
				documentModel.colors.push(rgb); /*(rgb[0]!=0 || rgb[1]!=0 || rgb[2]!=0) &&*/
			}
		});
	}

	function processColorStyle(coln) {
		var clr, idx;
		coln.each(function(i, e) {
			var s = $(e).attr("style"),
				styles = s && s.replace(/[\n\r]*\s*/g, '').split(';'),
				colorstyles = styles && styles.filter(function(e) {
					var rule = e.split(':');
					rule[0] = rule[0].replace(/^\s*/, '').replace(/\s*$/, '');
					return ['color', 'background-color', 'background'].indexOf(rule[0]) != -1;
				});

			var stylerule = colorstyles && colorstyles[0] && colorstyles[0].split(':');
			if (stylerule && stylerule[1]) {
				stylerule[1] = stylerule[1].replace(/^\s*/, '').replace(/\s*$/, '');
				if (stylerule[1].substring(0, 3) === 'rgb') {
					clr = rgbColor(stylerule[1]);
					idx = findColor(documentModel.colors, clr);
				} else {
					idx = findColorInColortbl(stylerule[1]);
					clr = parseColor(stylerule[1]);
				}
				if (idx == -1) {
					clr && documentModel.colors.push(clr);
				}
			}
		});
	}

	function extractFontsAndColors() {
		var fnts = $root.find('font[face]');
		var clrs = $root.find('font[color]');
		var bgclrs = $root.find('font[bgcolor]');
		var stylebgclrs = $root.find('*[style*="background-color"]');
		var styleclrs = $root.find('*[style*="color"]');
		addFont("MS Sans Serif"); //default
		fnts.each(function(i, e) {
			addFont($(e).attr("face"));
		});
		// For bullets
		if ($root.find("ul").length > 0) {
			addFont("Symbol");
		}

		// {\\f1\\fnil\\fcharset2 Symbol;		}
		/*if (documentModel.colors.length==0)
			documentModel.colors.push([0,0,0]) ;*/
		processColor(clrs, "color");
		processColor(bgclrs, "bgcolor");
		processColorStyle(stylebgclrs);
		processColorStyle(styleclrs);
	}

	function rgbColor(colorString) {
		var match = /\s*rgb\(\s*(\d+),\s*(\d+),\s*(\d+)\s*\);*/.exec(colorString);
		if (!match) return [];
		return match.slice(1).map(function(elt) {
			return parseInt(elt, 10);
		});
	}

	function visit(i, e) {
		var $e = $(e),
			$contents;
		//	    console.log("visit >>>>>>>>" + ((e.nodeType!==3)?e.nodeName:e.nodeValue) + " " + (e.id?e.id:""))
		if ($e.is("blockquote")) {
			bld.context.open("blockquote");
		} else if ($e.is("div[align]") || ($e.is('*[style*=text-align]') || $e.is('*[style*=margin]'))) {
			//console.log("div align || text-align || margin")
			processNode(e, i);
			if (e.nodeName === "UL" /*|| $e.is('div[style*=margin]')*/ ) {
				bld.control("pard");
			}
			return;
		}

		var grp, nl, sibling = e.nextSibling,
			crlf = (e.nodeName === "P" && e.childElementCount === 1 && e.firstChild.nodeName === "BR") //in somme case,on enter,  Chrome  can  build br in p;
			$contents = $e.contents();
		if (!$e.is("blockquote") && sibling && sibling.nodeName === "DIV" && !isLeftIndent(e) && !isLeftIndent(sibling)) {
			if (!(sibling.childElementCount > 0 && (sibling.firstChild.nodeName === "BR" || sibling.firstChild.nodeName === "P")) && !crlf) {
				nl = true;
			}
		} else if ($contents.length > 0 && sibling && !$e.is("ul") && !$e.is("li") && !$e.is("blockquote") && !$e.is("p")) {
			grp = true;
			bld.fragment("{");
		}
		if ($e.is("p[align]")) {
			var alignment = $e.attr("align");
			bld.control("pard");
			bld.control(align[alignment]);
		}
		if (!$e.is("p")) {
			processNode(e, i);
		}
		/*if (e.nodeName === "UL") {
			bld.control("pard");
		}*/
		$contents.each(visit);
		if (e.nodeName === "P" && !nl && !crlf) {
			processNode(e, i);
		}
		if (e.nodeName === "B" || $e.is('*[style*=font-weight]')) {
			bld.control("b0");
		}
		if (e.nodeName === "U" || $e.is('*[style*=text-decoration]')) {
			bld.control("ul0");
		}
		if ($e.is('*[style*=font-size]') && bld.context.fs) {
			bld.context.fs = false;
			if (!grp) {
				bld.control("fs16");
			}
		}
		if (e.nodeName === "I" || $e.is('*[style*=font-style]')) {
			bld.control("i0");
		}
		if ($e.is('*[style*=color]') && !$e.is('*[style*=background-color]') && !grp) {
			bld.control("cf0");
		}
		if (e.nodeName === "UL") {
			bld.context.close("list");
			bld.control("pard");
			bld.context.par = true;
			if (bld.context.current("blockquote")) {
				bld.context.pending("blockquote", true);
			}
			if (bld.context.current("lindent") && e.nextSibling && e.nextSibling.nodeType === 3) {
				bld.control("li" + toTwips("px", bld.context.value("lindent")));
			}
		} else if ($e.is("li")) {
			bld.control("par");
		}

		if (grp) {
			bld.fragment("}");
		}
		if ($e.is("blockquote") && bld.context.current("blockquote")) {
			if (bld.context.pending("blockquote")) {
				bld.context.close("blockquote");
				if (!bld.context.current("blockquote") && sibling && !$(sibling).html()) {
					bld.context.nl = true;
				}
			} else {
				if (!bld.context.par) {
					bld.control("par");
				}
				bld.control("pard");
				bld.context.close("blockquote");
			}
		}
		if (nl || bld.context.nl) {
			bld.context.nl = false;
			bld.control("par");
		}
	}

	function createFontTable() {
		var fname;
		for (var i = 0; i < rtffonts.length; i++) {
			fname = "f" + i;
			documentModel.fonts[fname] = {
				name: rtffonts[i]
			};
		}
	}

	documentModel.colors.push([0, 0, 0]);
	extractFontsAndColors();
	createFontTable();
	bld = builder(documentModel);
	//bld.header() ;
	//console.log("buildRtf --->"+$root.html());
	scan($root);

	bld.close();
	var rtftxt = bld.getRtf();
	//console.log("buildRtf --->"+rtftxt);
	return rtftxt;
};
});

define('syracuse-tablet/html/js/helpers/syracuse-rtf/lib/index',['require','exports','module','./rtfparse','./rtfinterpret','./buildhtml','./buildrtf'],function (require, exports, module) {
var rtfParser = require("./rtfparse"),
	rtfInterpreter = require("./rtfinterpret"),
	htmlBuilder = require("./buildhtml"),
	rtfBuilder = require("./buildrtf");

/// !doc
/// # RTF converter
/// Helper functions to convert RTF text from and to HTML.
/// 
/// `var convert = require('syracuse-rtf');`  
/// `var html = convert.toHtml(rtf, options);`  
/// `var rtf = convert.fromHtml(html, options);`  
// will see about options later
module.exports = {
	toHtml: function(rtf, options) {
		rtf = rtf || "";
		var root = rtfParser.parse(rtf);
		var model = rtfInterpreter.interpret(root);
		return htmlBuilder.buildHtml(root, model);
	},
	fromHtml: function(html, options) {
		return rtfBuilder.buildRtf(html);
	}
};
});

define('syracuse-tablet/html/js/helpers/syracuse-rtf/index',['require','exports','module','./lib/index'],function (require, exports, module) {
module.exports = require('./lib/index');
});

define('syracuse-tablet/html/js/controls/field/ctrlText',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/controls/field/ctrlFieldBase','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/helpers/html-escape/index','syracuse-tablet/html/js/ajax/ajax','syracuse-tablet/html/js/helpers/syracuse-rtf/index'],function (require, exports, module) {
var utils = require('syracuse-tablet/html/js/helpers/utils');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var uiUtils = require('syracuse-tablet/html/js/ui/uiUtils');
var escaper = require('syracuse-tablet/html/js/helpers/html-escape/index').escaper({
	warn: console.warn.bind(console),
	allowedAttributes: ["style"],
	allowedTags: ["span"]
});
var ajax = require('syracuse-tablet/html/js/ajax/ajax').getAjax().ajax;
var rtf = require('syracuse-tablet/html/js/helpers/syracuse-rtf/index');

var _Klass = utils.defineClass(

	function CtrlText(controller, article, prototype, options) {
		var self = this;
		Base.call(self, controller, article, prototype, options);
		self.cssType = "s-m-clob";
	}, Base, {
		buildFieldValue: function(parentSlot, buildOptions) {
			var self = this;
			var value = self.getFormattedValue(self.getValue());
			// Create the enriched text content under the standard s-m-value parent
			var parent = Base.prototype.buildFieldValue.call(self, parentSlot, buildOptions);
			// enriched text container div
			var textContainer = uiUtils.createDomElement("div", ["s-m-enriched-text"], null, null, parent);
			var docUrl = self.prototype.data("$url", self.getDao()) || "";
			ajax("GET", docUrl, null, null, {
				noJsonParsing: true
			}).then(function(result) {
				var responseText = result.responseText || "";
				var $$dataArr = [];
				switch (self.$type) {
					case "text/plain":
						self.buildFieldFromPlain(responseText, textContainer);
						break;
					case "text/html":
						self.buildFieldFromHtml(responseText, textContainer);
						break;
					case "text/rtf":
						self.buildFieldFromRtf(responseText, textContainer);
						break;
				}
			}).fail(function(e) {
				self.insertError(e.message);
				self.log(e);
			});
		},
		/**
		 * Display an error
		 */
		insertError: function(html) {
			var err = ['<div class="s-m-error">'];
			err.push(html);
			err.push("</div>");
			$(err.join('')).appendTo(this.$$elmt);
		},
		buildFieldFromPlain: function(data, parent) {
			$(parent).append($.parseHTML(escaper(data.replace(/\n/g, "<BR/>"))));
		},
		buildFieldFromRtf: function(data, parent) {
			this.buildFieldFromHtml(rtf.toHtml(data), parent);
		},
		buildFieldFromHtml: function(data, parent) {
			$(parent).append($.parseHTML(escaper(data)));
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/ctrlIcon',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/ui/fontUtils','syracuse-tablet/html/js/controls/ctrlBase'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var ctrlBase = require('syracuse-tablet/html/js/controls/ctrlBase');
var Base = ctrlBase.Klass;

/**
 * Icon used by arrays
 * Displays an icon according to the value of $icon in prototype
 * prototype properties
 * 		$url to attach a link to the icon
 * 		$action to attach an action/navigation to the icon
 * 			Contains all the parameters for the link (data-action, data-params...)
 */
var _Klass = utils.defineClass(

	function CtrlIcon(controller, article, prototype) {
		Base.call(this, controller, article, prototype);
	}, Base, {

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions, ["s-m-icon"]);
			self.$$elmt.html(ctrlBase.genHtmlCtrlLink(self.prototype, controllerDao, {
				tag: 'a',
				css: ''
			}, function(html) {
				html.push('<span class="');
				html.push(fontUtils.ctrlIcon(self.prototype.data('$icon')));
				html.push('"></span>');
			}));
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/ctrlButton',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/ui/fontUtils','syracuse-tablet/html/js/controls/ctrlBase'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var ctrlBase = require('syracuse-tablet/html/js/controls/ctrlBase');
var Base = ctrlBase.Klass;

/**
 * Icon used by arrays
 * Displays an icon according to the value of $icon in prototype
 * prototype properties
 * 		$url to attach a link to the icon
 * 		$action to attach an action/navigation to the icon
 * 			Contains all the parameters for the link (data-action, data-params...)
 */
var _Klass = utils.defineClass(

	function CtrlButton(controller, article, prototype) {
		Base.call(this, controller, article, prototype);
	}, Base, {

		buildHtml: function($$parent, controllerDao, buildOptions) {
			var self = this;
			Base.prototype.buildHtml.call(self, $$parent, controllerDao, buildOptions, ["s-m-btn"]);
			self.$$elmt.html(ctrlBase.genHtmlCtrlLink(self.prototype, controllerDao, {
				tag: 'button',
				css: 'btn btn-info btn-large'
			}, function(html) {
				var param = self.prototype.data('$icon') || "";
				if (param.length > 0) html.push('<i class="' + fontUtils.ctrlIcon(self.prototype.data('$icon')) + '"></i>');
				param = self.prototype.data('$text') || "";
				if (param.length > 0) html.push(param);
			}));
		}
	});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/chart/chartstheme',['require','exports','module'],function (require, exports, module) {

exports.ChartsTheme = {
	"colors": ["#2f7ed8", "#0d233a", "#8bbc21", "#910000", "#1aadce", "#492970", "#f28f43", "#77a1e5", "#c42525", "#a6c96a"],
	"symbols": ["circle", "diamond", "square", "triangle", "triangle-down"],
	"lang": {
		"loading": "Loading...",
		"months": ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
		"shortMonths": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
		"weekdays": ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
		"decimalPoint": ".",
		"numericSymbols": ["k", "M", "G", "T", "P", "E"],
		"resetZoom": "Reset zoom",
		"resetZoomTitle": "Reset zoom level 1:1",
		"thousandsSep": ","
	},
	"global": {
		"useUTC": true,
		"canvasToolsURL": "http://code.highcharts.com/3.0.2/modules/canvas-tools.js",
		"VMLRadialGradientURL": "http://code.highcharts.com/3.0.2/gfx/vml-radial-gradient.png"
	},
	"chart": {
		"borderColor": "#4572A7",
		"borderRadius": 5,
		"defaultSeriesType": "line",
		"ignoreHiddenSeries": true,
		"spacingTop": 10,
		"spacingRight": 10,
		"spacingBottom": 15,
		"spacingLeft": 10,
		"style": {
			"fontFamily": "\"Lucida Grande\", \"Lucida Sans Unicode\", Verdana, Arial, Helvetica, sans-serif",
			"fontSize": "12px"
		},
		"backgroundColor": "#FFFFFF",
		"plotBorderColor": "#C0C0C0",
		"resetZoomButton": {
			"theme": {
				"zIndex": 20
			},
			"position": {
				"align": "right",
				"x": -10,
				"y": 10
			}
		}
	},
	"title": {
		"text": "Chart title",
		"align": "center",
		"y": 15,
		"style": {
			"color": "#666",
			"fontSize": "16px"
		}
	},
	"subtitle": {
		"text": "",
		"align": "center",
		"y": 30,
		"style": {
			"color": "#4d759e"
		}
	},
	"plotOptions": {
		"line": {
			"allowPointSelect": false,
			"showCheckbox": false,
			"animation": {
				"duration": 1000
			},
			"events": {

			},
			"lineWidth": 2,
			"marker": {
				"enabled": true,
				"lineWidth": 0,
				"radius": 4,
				"lineColor": "#FFFFFF",
				"states": {
					"hover": {
						"enabled": true
					},
					"select": {
						"fillColor": "#FFFFFF",
						"lineColor": "#000000",
						"lineWidth": 2
					}
				}
			},
			"point": {
				"events": {

				}
			},
			"dataLabels": {
				"enabled": false,
				"align": "center",
				"x": 0,
				"y": 0,
				"style": {
					"color": "#666",
					"cursor": "default",
					"fontSize": "11px",
					"lineHeight": "14px"
				},
				"verticalAlign": "bottom"
			},
			"cropThreshold": 300,
			"pointRange": 0,
			"showInLegend": true,
			"states": {
				"hover": {
					"marker": {

					}
				},
				"select": {
					"marker": {

					}
				}
			},
			"stickyTracking": true
		},
		"area": {
			"allowPointSelect": false,
			"showCheckbox": false,
			"animation": {
				"duration": 1000
			},
			"events": {

			},
			"lineWidth": 2,
			"marker": {
				"enabled": true,
				"lineWidth": 0,
				"radius": 4,
				"lineColor": "#FFFFFF",
				"states": {
					"hover": {
						"enabled": true
					},
					"select": {
						"fillColor": "#FFFFFF",
						"lineColor": "#000000",
						"lineWidth": 2
					}
				}
			},
			"point": {
				"events": {

				}
			},
			"dataLabels": {
				"enabled": false,
				"align": "center",
				"x": 0,
				"y": 0,
				"style": {
					"color": "#666",
					"cursor": "default",
					"fontSize": "11px",
					"lineHeight": "14px"
				},
				"verticalAlign": "bottom"
			},
			"cropThreshold": 300,
			"pointRange": 0,
			"showInLegend": true,
			"states": {
				"hover": {
					"marker": {

					}
				},
				"select": {
					"marker": {

					}
				}
			},
			"stickyTracking": true,
			"threshold": 0
		},
		"spline": {
			"allowPointSelect": false,
			"showCheckbox": false,
			"animation": {
				"duration": 1000
			},
			"events": {

			},
			"lineWidth": 2,
			"marker": {
				"enabled": true,
				"lineWidth": 0,
				"radius": 4,
				"lineColor": "#FFFFFF",
				"states": {
					"hover": {
						"enabled": true
					},
					"select": {
						"fillColor": "#FFFFFF",
						"lineColor": "#000000",
						"lineWidth": 2
					}
				}
			},
			"point": {
				"events": {

				}
			},
			"dataLabels": {
				"enabled": false,
				"align": "center",
				"x": 0,
				"y": 0,
				"style": {
					"color": "#666",
					"cursor": "default",
					"fontSize": "11px",
					"lineHeight": "14px"
				},
				"verticalAlign": "bottom"
			},
			"cropThreshold": 300,
			"pointRange": 0,
			"showInLegend": true,
			"states": {
				"hover": {
					"marker": {

					}
				},
				"select": {
					"marker": {

					}
				}
			},
			"stickyTracking": true
		},
		"areaspline": {
			"allowPointSelect": false,
			"showCheckbox": false,
			"animation": {
				"duration": 1000
			},
			"events": {

			},
			"lineWidth": 2,
			"marker": {
				"enabled": true,
				"lineWidth": 0,
				"radius": 4,
				"lineColor": "#FFFFFF",
				"states": {
					"hover": {
						"enabled": true
					},
					"select": {
						"fillColor": "#FFFFFF",
						"lineColor": "#000000",
						"lineWidth": 2
					}
				}
			},
			"point": {
				"events": {

				}
			},
			"dataLabels": {
				"enabled": false,
				"align": "center",
				"x": 0,
				"y": 0,
				"style": {
					"color": "#666",
					"cursor": "default",
					"fontSize": "11px",
					"lineHeight": "14px"
				},
				"verticalAlign": "bottom"
			},
			"cropThreshold": 300,
			"pointRange": 0,
			"showInLegend": true,
			"states": {
				"hover": {
					"marker": {

					}
				},
				"select": {
					"marker": {

					}
				}
			},
			"stickyTracking": true,
			"threshold": 0
		},
		"column": {
			"allowPointSelect": false,
			"showCheckbox": false,
			"animation": {
				"duration": 1000
			},
			"events": {

			},
			"lineWidth": 2,
			"marker": null,
			"point": {
				"events": {

				}
			},
			"dataLabels": {
				"enabled": false,
				"align": null,
				"x": 0,
				"y": null,
				"style": {
					"color": "#666",
					"cursor": "default",
					"fontSize": "11px",
					"lineHeight": "14px"
				},
				"verticalAlign": null
			},
			"cropThreshold": 50,
			"pointRange": null,
			"showInLegend": true,
			"states": {
				"hover": {
					"marker": {

					},
					"brightness": 0.1,
					"shadow": false
				},
				"select": {
					"marker": {

					},
					"color": "#C0C0C0",
					"borderColor": "#000000",
					"shadow": false
				}
			},
			"stickyTracking": false,
			"borderColor": "#FFFFFF",
			"borderWidth": 1,
			"borderRadius": 0,
			"groupPadding": 0.2,
			"pointPadding": 0.1,
			"minPointLength": 0,
			"threshold": 0
		},
		"bar": {
			"allowPointSelect": false,
			"showCheckbox": false,
			"animation": {
				"duration": 1000
			},
			"events": {

			},
			"lineWidth": 2,
			"marker": null,
			"point": {
				"events": {

				}
			},
			"dataLabels": {
				"enabled": false,
				"align": null,
				"x": 0,
				"y": null,
				"style": {
					"color": "#666",
					"cursor": "default",
					"fontSize": "11px",
					"lineHeight": "14px"
				},
				"verticalAlign": null
			},
			"cropThreshold": 50,
			"pointRange": null,
			"showInLegend": true,
			"states": {
				"hover": {
					"marker": {

					},
					"brightness": 0.1,
					"shadow": false
				},
				"select": {
					"marker": {

					},
					"color": "#C0C0C0",
					"borderColor": "#000000",
					"shadow": false
				}
			},
			"stickyTracking": false,
			"borderColor": "#FFFFFF",
			"borderWidth": 1,
			"borderRadius": 0,
			"groupPadding": 0.2,
			"pointPadding": 0.1,
			"minPointLength": 0,
			"threshold": 0
		},
		"scatter": {
			"allowPointSelect": false,
			"showCheckbox": false,
			"animation": {
				"duration": 1000
			},
			"events": {

			},
			"lineWidth": 0,
			"marker": {
				"enabled": true,
				"lineWidth": 0,
				"radius": 4,
				"lineColor": "#FFFFFF",
				"states": {
					"hover": {
						"enabled": true
					},
					"select": {
						"fillColor": "#FFFFFF",
						"lineColor": "#000000",
						"lineWidth": 2
					}
				}
			},
			"point": {
				"events": {

				}
			},
			"dataLabels": {
				"enabled": false,
				"align": "center",
				"x": 0,
				"y": 0,
				"style": {
					"color": "#666",
					"cursor": "default",
					"fontSize": "11px",
					"lineHeight": "14px"
				},
				"verticalAlign": "bottom"
			},
			"cropThreshold": 300,
			"pointRange": 0,
			"showInLegend": true,
			"states": {
				"hover": {
					"marker": {

					}
				},
				"select": {
					"marker": {

					}
				}
			},
			"stickyTracking": false,
			"tooltip": {
				"headerFormat": "<span style=\"font-size: 10px; color:{series.color}\">{series.name}</span><br/>",
				"pointFormat": "x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>",
				"followPointer": true
			}
		},
		"pie": {
			"allowPointSelect": false,
			"showCheckbox": false,
			"animation": {
				"duration": 1000
			},
			"events": {

			},
			"lineWidth": 2,
			"marker": null,
			"point": {
				"events": {

				}
			},
			"dataLabels": {
				"enabled": true,
				"align": "center",
				"x": 0,
				"y": 0,
				"style": {
					"color": "#666",
					"cursor": "default",
					"fontSize": "11px",
					"lineHeight": "14px"
				},
				"verticalAlign": "bottom",
				"distance": 30
			},
			"cropThreshold": 300,
			"pointRange": 0,
			"showInLegend": false,
			"states": {
				"hover": {
					"marker": {

					},
					"brightness": 0.1,
					"shadow": false
				},
				"select": {
					"marker": {

					}
				}
			},
			"stickyTracking": false,
			"borderColor": "#FFFFFF",
			"borderWidth": 1,
			"center": [
				null, null
			],
			"clip": false,
			"colorByPoint": true,
			"ignoreHiddenPoint": true,
			"legendType": "point",
			"size": null,
			"slicedOffset": 10,
			"tooltip": {
				"followPointer": true
			}
		},
		"arearange": {
			"allowPointSelect": false,
			"showCheckbox": false,
			"animation": {
				"duration": 1000
			},
			"events": {

			},
			"lineWidth": 1,
			"marker": null,
			"point": {
				"events": {

				}
			},
			"dataLabels": {
				"enabled": false,
				"align": "center",
				"x": 0,
				"y": 0,
				"style": {
					"color": "#666",
					"cursor": "default",
					"fontSize": "11px",
					"lineHeight": "14px"
				},
				"verticalAlign": null,
				"xLow": 0,
				"xHigh": 0,
				"yLow": 0,
				"yHigh": 0
			},
			"cropThreshold": 300,
			"pointRange": 0,
			"showInLegend": true,
			"states": {
				"hover": {
					"marker": {

					}
				},
				"select": {
					"marker": {

					}
				}
			},
			"stickyTracking": true,
			"threshold": null,
			"tooltip": {
				"pointFormat": "<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.low}</b> - <b>{point.high}</b><br/>"
			},
			"trackByArea": true
		},
		"areasplinerange": {
			"allowPointSelect": false,
			"showCheckbox": false,
			"animation": {
				"duration": 1000
			},
			"events": {

			},
			"lineWidth": 1,
			"marker": null,
			"point": {
				"events": {

				}
			},
			"dataLabels": {
				"enabled": false,
				"align": "center",
				"x": 0,
				"y": 0,
				"style": {
					"color": "#666",
					"cursor": "default",
					"fontSize": "11px",
					"lineHeight": "14px"
				},
				"verticalAlign": null,
				"xLow": 0,
				"xHigh": 0,
				"yLow": 0,
				"yHigh": 0
			},
			"cropThreshold": 300,
			"pointRange": 0,
			"showInLegend": true,
			"states": {
				"hover": {
					"marker": {

					}
				},
				"select": {
					"marker": {

					}
				}
			},
			"stickyTracking": true,
			"threshold": null,
			"tooltip": {
				"pointFormat": "<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.low}</b> - <b>{point.high}</b><br/>"
			},
			"trackByArea": true
		},
		"columnrange": {
			"allowPointSelect": false,
			"showCheckbox": false,
			"animation": {
				"duration": 1000
			},
			"events": {

			},
			"lineWidth": 1,
			"marker": null,
			"point": {
				"events": {

				}
			},
			"dataLabels": {
				"enabled": false,
				"align": "center",
				"x": 0,
				"y": 0,
				"style": {
					"color": "#666",
					"cursor": "default",
					"fontSize": "11px",
					"lineHeight": "14px"
				},
				"verticalAlign": null,
				"xLow": 0,
				"xHigh": 0,
				"yLow": 0,
				"yHigh": 0
			},
			"cropThreshold": 300,
			"pointRange": null,
			"showInLegend": true,
			"states": {
				"hover": {
					"marker": {

					},
					"brightness": 0.1,
					"shadow": false
				},
				"select": {
					"marker": {

					},
					"color": "#C0C0C0",
					"borderColor": "#000000",
					"shadow": false
				}
			},
			"stickyTracking": true,
			"borderColor": "#FFFFFF",
			"borderWidth": 1,
			"borderRadius": 0,
			"groupPadding": 0.2,
			"pointPadding": 0.1,
			"minPointLength": 0,
			"threshold": null,
			"tooltip": {
				"pointFormat": "<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.low}</b> - <b>{point.high}</b><br/>"
			},
			"trackByArea": true
		},
		"gauge": {
			"allowPointSelect": false,
			"showCheckbox": false,
			"animation": {
				"duration": 1000
			},
			"events": {

			},
			"lineWidth": 2,
			"marker": {
				"enabled": true,
				"lineWidth": 0,
				"radius": 4,
				"lineColor": "#FFFFFF",
				"states": {
					"hover": {
						"enabled": true
					},
					"select": {
						"fillColor": "#FFFFFF",
						"lineColor": "#000000",
						"lineWidth": 2
					}
				}
			},
			"point": {
				"events": {

				}
			},
			"dataLabels": {
				"enabled": true,
				"align": "center",
				"x": 0,
				"y": 5,
				"style": {
					"color": "#666",
					"cursor": "default",
					"fontSize": "16px",
					"lineHeight": "24px",
					"fontWeight": "normal"
				},
				"verticalAlign": "top",
				"borderWidth": 0,
				"borderColor": null,
				"borderRadius": 3,
				"zIndex": 2
			},
			"cropThreshold": 300,
			"pointRange": 0,
			"showInLegend": false,
			"states": {
				"hover": {
					"marker": {

					}
				},
				"select": {
					"marker": {

					}
				}
			},
			"stickyTracking": true,
			"dial": {

			},
			"pivot": {

			},
			"tooltip": {
				"style": {
					"color": "#666"
				},
				"headerFormat": ""
			}
		},
		"boxplot": {
			"allowPointSelect": false,
			"showCheckbox": false,
			"animation": {
				"duration": 1000
			},
			"events": {

			},
			"lineWidth": 1,
			"marker": null,
			"point": {
				"events": {

				}
			},
			"dataLabels": {
				"enabled": false,
				"align": null,
				"x": 0,
				"y": null,
				"style": {
					"color": "#666",
					"cursor": "default",
					"fontSize": "11px",
					"lineHeight": "14px"
				},
				"verticalAlign": null
			},
			"cropThreshold": 50,
			"pointRange": null,
			"showInLegend": true,
			"states": {
				"hover": {
					"marker": {

					},
					"brightness": -0.3,
					"shadow": false
				},
				"select": {
					"marker": {

					},
					"color": "#C0C0C0",
					"borderColor": "#000000",
					"shadow": false
				}
			},
			"stickyTracking": false,
			"borderColor": "#FFFFFF",
			"borderWidth": 1,
			"borderRadius": 0,
			"groupPadding": 0.2,
			"pointPadding": 0.1,
			"minPointLength": 0,
			"threshold": null,
			"fillColor": "#FFFFFF",
			"medianWidth": 2,
			"tooltip": {
				"pointFormat": "<span style=\"color:{series.color};font-weight:bold\">{series.name}</span><br/>Minimum: {point.low}<br/>Lower quartile: {point.q1}<br/>Median: {point.median}<br/>Higher quartile: {point.q3}<br/>Maximum: {point.high}<br/>"
			},
			"whiskerLength": "50%",
			"whiskerWidth": 2
		},
		"errorbar": {
			"allowPointSelect": false,
			"showCheckbox": false,
			"animation": {
				"duration": 1000
			},
			"events": {

			},
			"lineWidth": 1,
			"marker": null,
			"point": {
				"events": {

				}
			},
			"dataLabels": {
				"enabled": false,
				"align": null,
				"x": 0,
				"y": null,
				"style": {
					"color": "#666",
					"cursor": "default",
					"fontSize": "11px",
					"lineHeight": "14px"
				},
				"verticalAlign": null
			},
			"cropThreshold": 50,
			"pointRange": null,
			"showInLegend": true,
			"states": {
				"hover": {
					"marker": {

					},
					"brightness": -0.3,
					"shadow": false
				},
				"select": {
					"marker": {

					},
					"color": "#C0C0C0",
					"borderColor": "#000000",
					"shadow": false
				}
			},
			"stickyTracking": false,
			"borderColor": "#FFFFFF",
			"borderWidth": 1,
			"borderRadius": 0,
			"groupPadding": 0.2,
			"pointPadding": 0.1,
			"minPointLength": 0,
			"threshold": null,
			"fillColor": "#FFFFFF",
			"medianWidth": 2,
			"tooltip": {
				"pointFormat": "<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.low}</b> - <b>{point.high}</b><br/>"
			},
			"whiskerLength": "50%",
			"whiskerWidth": null,
			"color": "#000000",
			"grouping": false,
			"linkedTo": ":previous"
		},
		"waterfall": {
			"allowPointSelect": false,
			"showCheckbox": false,
			"animation": {
				"duration": 1000
			},
			"events": {

			},
			"lineWidth": 1,
			"marker": null,
			"point": {
				"events": {

				}
			},
			"dataLabels": {
				"enabled": false,
				"align": null,
				"x": 0,
				"y": null,
				"style": {
					"color": "#666",
					"cursor": "default",
					"fontSize": "11px",
					"lineHeight": "14px"
				},
				"verticalAlign": null
			},
			"cropThreshold": 50,
			"pointRange": null,
			"showInLegend": true,
			"states": {
				"hover": {
					"marker": {

					},
					"brightness": 0.1,
					"shadow": false
				},
				"select": {
					"marker": {

					},
					"color": "#C0C0C0",
					"borderColor": "#000000",
					"shadow": false
				}
			},
			"stickyTracking": false,
			"borderColor": "#333",
			"borderWidth": 1,
			"borderRadius": 0,
			"groupPadding": 0.2,
			"pointPadding": 0.1,
			"minPointLength": 0,
			"threshold": 0,
			"lineColor": "#333",
			"dashStyle": "dot"
		},
		"bubble": {
			"allowPointSelect": false,
			"showCheckbox": false,
			"animation": {
				"duration": 1000
			},
			"events": {

			},
			"lineWidth": 0,
			"marker": {
				"enabled": true,
				"lineWidth": 1,
				"radius": 4,
				"lineColor": null,
				"states": {
					"hover": {
						"enabled": true
					},
					"select": {
						"fillColor": "#FFFFFF",
						"lineColor": "#000000",
						"lineWidth": 2
					}
				}
			},
			"point": {
				"events": {

				}
			},
			"dataLabels": {
				"enabled": false,
				"align": "center",
				"x": 0,
				"y": 0,
				"style": {
					"color": "white",
					"cursor": "default",
					"fontSize": "11px",
					"lineHeight": "14px",
					"textShadow": "0px 0px 3px black"
				},
				"verticalAlign": "middle",
				"inside": true
			},
			"cropThreshold": 300,
			"pointRange": 0,
			"showInLegend": true,
			"states": {
				"hover": {
					"marker": {

					}
				},
				"select": {
					"marker": {

					}
				}
			},
			"stickyTracking": false,
			"tooltip": {
				"headerFormat": "<span style=\"font-size: 10px; color:{series.color}\">{series.name}</span><br/>",
				"pointFormat": "({point.x}, {point.y}), Size: {point.z}",
				"followPointer": true
			},
			"minSize": 8,
			"maxSize": "20%",
			"zThreshold": 0
		}
	},
	"labels": {
		"style": {
			"position": "absolute",
			"color": "#3E576F"
		}
	},
	"legend": {
		"enabled": true,
		"align": "center",
		"layout": "horizontal",
		"borderWidth": 1,
		"borderColor": "#909090",
		"borderRadius": 5,
		"navigation": {
			"activeColor": "#274b6d",
			"inactiveColor": "#CCC"
		},
		"shadow": false,
		"itemStyle": {
			"cursor": "pointer",
			"color": "#274b6d",
			"fontSize": "12px"
		},
		"itemHoverStyle": {
			"color": "#000"
		},
		"itemHiddenStyle": {
			"color": "#CCC"
		},
		"itemCheckboxStyle": {
			"position": "absolute",
			"width": "13px",
			"height": "13px"
		},
		"symbolWidth": 16,
		"symbolPadding": 5,
		"verticalAlign": "bottom",
		"x": 0,
		"y": 0,
		"title": {
			"style": {
				"fontWeight": "bold"
			}
		}
	},
	"loading": {
		"labelStyle": {
			"fontWeight": "bold",
			"position": "relative",
			"top": "1em"
		},
		"style": {
			"position": "absolute",
			"backgroundColor": "white",
			"opacity": 0.5,
			"textAlign": "center"
		}
	},
	"tooltip": {
		"enabled": true,
		"animation": true,
		"backgroundColor": "rgba(255, 255, 255, .85)",
		"borderWidth": 1,
		"borderRadius": 3,
		"dateTimeLabelFormats": {
			"millisecond": "%A, %b %e, %H:%M:%S.%L",
			"second": "%A, %b %e, %H:%M:%S",
			"minute": "%A, %b %e, %H:%M",
			"hour": "%A, %b %e, %H:%M",
			"day": "%A, %b %e, %Y",
			"week": "Week from %A, %b %e, %Y",
			"month": "%B %Y",
			"year": "%Y"
		},
		"headerFormat": "<span style=\"font-size: 10px\">{point.key}</span><br/>",
		"pointFormat": "<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b><br/>",
		"shadow": true,
		"snap": 10,
		"style": {
			"color": "#333333",
			"cursor": "default",
			"fontSize": "12px",
			"padding": "8px",
			"whiteSpace": "nowrap"
		}
	},
	"credits": {
		"enabled": false,
		"text": "Highcharts.com",
		"href": "http://www.highcharts.com",
		"position": {
			"align": "right",
			"x": -10,
			"verticalAlign": "bottom",
			"y": -5
		},
		"style": {
			"cursor": "pointer",
			"color": "#909090",
			"fontSize": "9px"
		}
	}
};
});

define('syracuse-tablet/html/js/controls/field/ctrlGaugeChart',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/locale','syracuse-tablet/html/js/controls/field/ctrlFieldBase','syracuse-tablet/html/js/controls/chart/chartstheme'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var Base = require('syracuse-tablet/html/js/controls/field/ctrlFieldBase').Klass;
var chartsTheme = require('syracuse-tablet/html/js/controls/chart/chartstheme').ChartsTheme;

var _Klass = utils.defineClass(function CtrlGaugeChart(controller, article, prototype, opts) {
	var self = this;
	Base.call(self, controller, article, prototype, opts);
	self.formatter = self.initFormatter();
	// css to add to fieldSlot elmt
	self.cssType = null;
}, Base, {
	_defaultGaugeSegments: [{
		propStart: 0,
		propEnd: 0.25,
		valStart: null,
		valEnd: null,
		color: '#41A940'
	}, {
		propStart: 0.25,
		propEnd: 0.75,
		valStart: null,
		valEnd: null,
		color: '#FF5800'
	}, {
		propStart: 0.75,
		propEnd: 1,
		valStart: null,
		valEnd: null,
		color: '#CB3500'
	}],
	buildFieldValue: function(fieldSlot, buildOptions) {
		var self = this;

		var $$html = $("<div>").addClass("s-m-gauge-container");

		var localeDecimalSep = locale.getNumberDecimalSeparator();
		var localeThousandSep = locale.getNumberGroupSeparator();

		if (!self.chartsTheme) {
			self.chartsTheme = chartsTheme;
		}

		if (!self.chartsTheme.themeWasSet || self.chartsTheme.decimalPoint !== localeDecimalSep || self.chartsTheme.thousandsSep !== localeThousandSep) {
			self.chartsTheme.decimalPoint = localeDecimalSep;
			self.chartsTheme.thousandsSep = localeThousandSep;

			Highcharts.setOptions(self.chartsTheme);
			self.chartsTheme.themeWasSet = true;
		}

		self._renderGauge($$html);

		fieldSlot.appendChild($$html[0]);
	},
	buildFieldTitle: function(fieldSlot, buildOptions) {
		// override because nothing to do
	},
	_resolveExpr: function(expr, data, cp) {
		if (typeof expr !== "string") return expr;
		return expr.replace(/\{(\w+)\}/g, function(d0, d1) {
			if (data[d1] != null) return data[d1];
			if (cp[d1] != null) return cp[d1];
			return d0;
		});
	},
	// Merge default values for gauge segments with data comming from the authoring
	_mergeAuthoringAndDefaults: function() {
		var self = this;
		var $gauge = self.article.$gauge;
		if (!$gauge.segments) // Not authoring on segments
			return self._defaultGaugeSegments;
		if ($gauge.segments.length === 0) // Not authoring on segments
			return self._defaultGaugeSegments;

		var s, def, auth, res = [];
		for (s = 0; s < $gauge.segments.length; s++) {
			def = self._defaultGaugeSegments[Math.min(s, self._defaultGaugeSegments.length - 1)];
			auth = $gauge.segments[s];
			if (!auth) {
				// no authoring for this segment, use default
				res.push(def);
			} else {
				if ((auth.propStart == null || auth.propEnd == null) && (auth.valStart == null || auth.valEnd == null)) {
					// not range defined, use default, not authoring
					auth.propStart = def.propStart;
					auth.propEnd = def.propEnd;
					auth.valStart = def.valStart;
					auth.valEnd = def.valEnd;
				}
				if (auth.color == null) {
					auth.color = def.color;
				}
				res.push(auth);
			}
		}
		return res;
	},
	// Create segment definitions for gauge
	_createBands: function($c, cp, valMin, valMax) {
		var self = this;
		var bands = [];

		// Grey background is always present
		bands.push({
			from: valMin,
			to: valMax,
			color: '#ccc',
			innerRadius: '79%',
			outerRadius: '101%'
		});

		var data = self.getValue();
		var bandsDef = self._mergeAuthoringAndDefaults();
		var seg;
		var s;
		var band;
		var range = valMax - valMin;
		for (s = 0; s < bandsDef.length; s++) {
			seg = bandsDef[s];
			band = {
				innerRadius: '79%',
				outerRadius: '101%',
				color: seg.color
			};
			if (seg.valStart != null && seg.valEnd != null) {
				band.from = self._resolveExpr(seg.valStart, data, cp);
				band.to = self._resolveExpr(seg.valEnd, data, cp);
			} else if (seg.propStart != null && seg.propEnd != null) {
				band.from = valMin + range * self._resolveExpr(seg.propStart, data, cp);
				band.to = valMin + range * self._resolveExpr(seg.propEnd, data, cp);
			}
			bands.push(band);
		}
		return bands;
	},
	_getScale: function() {
		var self = this;

		function getScaleFromFormat($format) {
			var match = $format.match(/\.(.*)/g);
			return match.length >= 1 ? match.length : 0;
		}

		if (self.article.$scale) {
			return self.article.$scale;
		} else {
			if (self.article.$format) {
				return getScaleFromFormat(self.article.$format);
			} else {
				return 0;
			}
		}
	},
	_renderGauge: function($c) {

		var self = this;
		var gauge = self.article.$gauge;
		var labelColor = !self.$isEditMode ? "#34B233" : "#666";

		var val = self.getValue();
		var valMin = 0;
		var valMax = 100;

		if (gauge.$bindMin != null && gauge.$bindMax != null) {
			if (typeof gauge.$bindMin === "string") valMin = self.getDao().getValue(gauge.$bindMin);
			else valMin = gauge.$bindMin;
			if (typeof gauge.$bindMax === "string") valMax = self.getDao().getValue(gauge.$bindMax);
			else valMax = gauge.$bindMax;
		}

		try {
			if (typeof val === "string") val = parseFloat(val);
		} catch (e) {}
		try {
			if (typeof valMin === "string") valMin = parseFloat(valMin);
		} catch (e) {}
		try {
			if (typeof valMax === "string") valMax = parseFloat(valMax);
		} catch (e) {}

		var cp = self.prototype.json;

		var uom = "";
		if (cp.$unit && cp.$properties && cp.$properties[cp.$unit] && val && val[cp.$unit] && val[cp.$unit].$symbol) {
			uom = val[cp.$unit].$symbol;
		}

		var label = self.getTitle();
		var decimals = self._getScale();
		var plotBands = self._createBands($c, cp, valMin, valMax);
		self.$$chartSlot = $c;
		$c.highcharts({
			chart: {
				type: 'gauge',
				plotBackgroundColor: null,
				plotBackgroundImage: null,
				plotBorderWidth: 0,
				plotShadow: false,
				backgroundColor: null,
				height: 180,
				borderWidth: 0,
				spacingBottom: 35
			},
			title: {
				text: label,
				style: {
					color: labelColor,
					fontWeight: "normal",
					textTransform: "uppercase"
				},
				verticalAlign: "bottom",
				y: 27
			},
			pane: {
				startAngle: -90,
				endAngle: 90,
				center: ['50%', '90%'],
				size: 210,
				background: [{
					backgroundColor: '#FFF',
					borderWidth: 0
				}]
			},
			yAxis: {
				min: valMin,
				max: valMax,

				minorTickWidth: 1,
				minorTickInterval: 'auto',
				minorTickLength: 20,
				minorTickPosition: 'inside',
				minorTickColor: '#fff',

				tickPixelInterval: 30,
				tickWidth: 0,
				tickPosition: 'inside',
				tickLength: 15,
				tickColor: '#FFF',
				labels: {
					step: 1,
					rotation: 'auto',
					style: {
						color: "#666",
						cursor: "default",
						fontSize: "0.9em",
						fontFamily: "Arial",
						lineHeight: "14px"
					},
					distance: 10,
					y: 0,
					verticalAlign: 'center',
					align: 'center'
				},
				title: {
					text: uom,
					style: {
						color: "#666"
					}
				},
				plotBands: plotBands
			},
			plotOptions: {
				gauge: {
					dataLabels: {
						enabled: true,
						format: "{point.y:,." + decimals + "f}",
						style: {
							fontFamily: "Arial"
						}
					}
				}
			},
			exporting: {
				buttons: null
			},
			series: [{
				name: label,
				data: [val],
				tooltip: {
					valueSuffix: ' ' + uom
				}
			}]

		}, function() {});
	},
	onResize: function() {
		var self = this;
		var chart = self.$$chartSlot.highcharts();
		if (chart) {
			chart.setSize(self.$$chartSlot.width());
		}
	}
});

exports.Klass = _Klass;
});

define('syracuse-tablet/html/js/controls/ctrlFactoryDeps',['require','exports','module','syracuse-tablet/html/js/controls/field/ctrlAlphanum','syracuse-tablet/html/js/controls/field/ctrlAlphanum','syracuse-tablet/html/js/controls/field/ctrlAlphanum','syracuse-tablet/html/js/controls/field/ctrlProgress','syracuse-tablet/html/js/controls/field/ctrlNumeric','syracuse-tablet/html/js/controls/field/ctrlQuantity','syracuse-tablet/html/js/controls/field/ctrlCheckBox','syracuse-tablet/html/js/controls/field/ctrlCombo','syracuse-tablet/html/js/controls/field/ctrlDate','syracuse-tablet/html/js/controls/array/ctrlArray','syracuse-tablet/html/js/controls/field/ctrlReference','syracuse-tablet/html/js/controls/layout/layoutRow','syracuse-tablet/html/js/controls/layout/layoutStack','syracuse-tablet/html/js/controls/layout/layoutTab','syracuse-tablet/html/js/controls/layout/layoutHub','syracuse-tablet/html/js/controls/layout/layoutHubGroup','syracuse-tablet/html/js/controls/layout/layoutTile','syracuse-tablet/html/js/controls/layout/layoutCell','syracuse-tablet/html/js/controls/vignetteBase','syracuse-tablet/html/js/controls/page/ctrlPageHeader','syracuse-tablet/html/js/controls/page/ctrlPageFooter','syracuse-tablet/html/js/controls/page/regularActionPanel','syracuse-tablet/html/js/controls/page/dashboardActionPanel','syracuse-tablet/html/js/controls/page/navigationPanel','syracuse-tablet/html/js/controls/ctrlTypeUnknown','syracuse-tablet/html/js/controls/ctrlUnfound','syracuse-tablet/html/js/controls/chart/ctrlCubeChart','syracuse-tablet/html/js/controls/field/ctrlBinary','syracuse-tablet/html/js/controls/field/ctrlText','syracuse-tablet/html/js/controls/ctrlIcon','syracuse-tablet/html/js/controls/ctrlButton','syracuse-tablet/html/js/controls/field/ctrlGaugeChart','syracuse-tablet/html/js/controls/ctrlFactory'],function (require, exports, module) {

var Alphanum = require('syracuse-tablet/html/js/controls/field/ctrlAlphanum').Klass;
var PhoneField = require('syracuse-tablet/html/js/controls/field/ctrlAlphanum').PhoneField;
var EmailField = require('syracuse-tablet/html/js/controls/field/ctrlAlphanum').EmailField;
var ProgressField = require('syracuse-tablet/html/js/controls/field/ctrlProgress').Klass;
var Numeric = require('syracuse-tablet/html/js/controls/field/ctrlNumeric').Klass;
var Quantity = require('syracuse-tablet/html/js/controls/field/ctrlQuantity').Klass;
var CheckBox = require('syracuse-tablet/html/js/controls/field/ctrlCheckBox').Klass;
var Combo = require('syracuse-tablet/html/js/controls/field/ctrlCombo').Klass;
var Date = require('syracuse-tablet/html/js/controls/field/ctrlDate').Klass;
var Array = require('syracuse-tablet/html/js/controls/array/ctrlArray').Klass;
var Reference = require('syracuse-tablet/html/js/controls/field/ctrlReference').Klass;
var LayoutRow = require('syracuse-tablet/html/js/controls/layout/layoutRow').Klass;
var LayoutStack = require('syracuse-tablet/html/js/controls/layout/layoutStack').Klass;
var LayoutTab = require('syracuse-tablet/html/js/controls/layout/layoutTab').Klass;
var LayoutHub = require('syracuse-tablet/html/js/controls/layout/layoutHub').Klass;
var LayoutHubGroup = require('syracuse-tablet/html/js/controls/layout/layoutHubGroup').Klass;
var LayoutTile = require('syracuse-tablet/html/js/controls/layout/layoutTile').Klass;
var LayoutCell = require('syracuse-tablet/html/js/controls/layout/layoutCell').Klass;
var Vignette = require('syracuse-tablet/html/js/controls/vignetteBase').Klass;
var PageHeader = require('syracuse-tablet/html/js/controls/page/ctrlPageHeader').Klass;
var PageFooter = require('syracuse-tablet/html/js/controls/page/ctrlPageFooter').Klass;
var RegularActionPanel = require('syracuse-tablet/html/js/controls/page/regularActionPanel').Klass;
var DashboardActionPanel = require('syracuse-tablet/html/js/controls/page/dashboardActionPanel').Klass;
var NavigationPanel = require('syracuse-tablet/html/js/controls/page/navigationPanel').Klass;
var TypeUnknown = require('syracuse-tablet/html/js/controls/ctrlTypeUnknown').Klass;
var FieldUnfound = require('syracuse-tablet/html/js/controls/ctrlUnfound').Klass;
var CubeChart = require('syracuse-tablet/html/js/controls/chart/ctrlCubeChart').Klass;
var Binary = require('syracuse-tablet/html/js/controls/field/ctrlBinary').Klass;
var EnrichedText = require('syracuse-tablet/html/js/controls/field/ctrlText').Klass;
var Icon = require('syracuse-tablet/html/js/controls/ctrlIcon').Klass;
var Button = require('syracuse-tablet/html/js/controls/ctrlButton').Klass;
var Gauge = require('syracuse-tablet/html/js/controls/field/ctrlGaugeChart').Klass;

var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');

exports.init = function() {
	ctrlFactory.setImpl("Alphanum", Alphanum);
	ctrlFactory.setImpl("PhoneField", PhoneField);
	ctrlFactory.setImpl("EmailField", EmailField);
	ctrlFactory.setImpl("ProgressField", EmailField);
	ctrlFactory.setImpl("Numeric", Numeric);
	ctrlFactory.setImpl("Quantity", Quantity);
	ctrlFactory.setImpl("CheckBox", CheckBox);
	ctrlFactory.setImpl("Combo", Combo);
	ctrlFactory.setImpl("Date", Date);
	ctrlFactory.setImpl("Array", Array);
	ctrlFactory.setImpl("Reference", Reference);
	ctrlFactory.setImpl("LayoutRow", LayoutRow);
	ctrlFactory.setImpl("LayoutStack", LayoutStack);
	ctrlFactory.setImpl("LayoutTab", LayoutTab);
	ctrlFactory.setImpl("LayoutHub", LayoutHub);
	ctrlFactory.setImpl("LayoutHubGroup", LayoutHubGroup);
	ctrlFactory.setImpl("LayoutTile", LayoutTile);
	ctrlFactory.setImpl("LayoutCell", LayoutCell);
	ctrlFactory.setImpl("Vignette", Vignette);
	ctrlFactory.setImpl("PageHeader", PageHeader);
	ctrlFactory.setImpl("PageFooter", PageFooter);
	ctrlFactory.setImpl("RegularActionPanel", RegularActionPanel);
	ctrlFactory.setImpl("DashboardActionPanel", DashboardActionPanel);
	ctrlFactory.setImpl("NavigationPanel", NavigationPanel);
	ctrlFactory.setImpl("TypeUnknown", TypeUnknown);
	ctrlFactory.setImpl("FieldUnfound", FieldUnfound);
	ctrlFactory.setImpl("CubeChart", CubeChart);
	ctrlFactory.setImpl("Binary", Binary);
	ctrlFactory.setImpl("Text", EnrichedText);
	ctrlFactory.setImpl("Icon", Icon);
	ctrlFactory.setImpl("Gauge", Gauge);
	ctrlFactory.setImpl("Button", Button);
};
});

define('syracuse-tablet/html/js/sdata/sdataSort',['require','exports','module'],function (require, exports, module) {

/*
 *
 */

function _sdataSortArray(data, proto, orderBy) {

	var comparators = [];
	var properties = (proto.$properties.$resources && proto.$properties.$resources.$item && proto.$properties.$resources.$item.$properties) || proto.$properties;

	orderBy.forEach(function(exp) {
		var prop = exp.property;
		var sort = (exp.sort === "DESC" ? "DESC" : "ASC");
		var type = (properties[prop] && properties[prop].$type) || "application/x-string";

		if (type === "application/x-decimal") {
			if (sort === "ASC") {
				try {
					comparators.push(function(a, b) {
						var vala = a[prop];
						var valb = b[prop];
						return (+vala) - (+valb);
					});
				} catch (e) {}
				return 0;
			} else {
				try {
					comparators.push(function(a, b) {
						var vala = a[prop];
						var valb = b[prop];
						return (+valb) - (+vala);
					});
				} catch (e) {}
				return 0;
			}
		} else {
			if (sort === "ASC") {
				comparators.push(function(a, b) {
					try {
						var vala = a[prop];
						var valb = b[prop];
						if (vala > valb) {
							return 1;
						} else if (vala < valb) {
							return -1;
						}
					} catch (e) {}
					return 0;
				});
			} else {
				comparators.push(function(a, b) {
					try {
						var vala = a[prop];
						var valb = b[prop];
						if (vala > valb) {
							return -1;
						} else if (vala < valb) {
							return 1;
						}
					} catch (e) {}
					return 0;
				});
			}
		}
	});

	data.sort(function(a, b) {
		var c = 0;
		for (var i = 0; i < comparators.length; i++) {
			c = comparators[i](a, b);
			if (c !== 0) {
				break;
			}
		}
		return c;
	});
}
exports.sdataSortArray = _sdataSortArray;
});

define('syracuse-tablet/html/js/sdata/sdataCache',['require','exports','module','syracuse-tablet/html/js/helpers/logger','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/storage/storage','syracuse-tablet/html/js/sdata/sdatawhere/parser','syracuse-tablet/html/js/sdata/sdatawhere/whereUtils','syracuse-tablet/html/js/sdata/sdataSort'],function (require, exports, module) {

/*
 *
 */

var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("SDataCache");
var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var storageModule = require('syracuse-tablet/html/js/storage/storage');
var parser = require('syracuse-tablet/html/js/sdata/sdatawhere/parser').Parser;
var whereUtils = require('syracuse-tablet/html/js/sdata/sdatawhere/whereUtils');
var sdataSort = require('syracuse-tablet/html/js/sdata/sdataSort');

// all storage entries created by the case will be prefixed with this to be able to empty the cache w/o removing settings
var _cachePrefix = "$cache_";

function _SDataCache(storage) {
	this.storage = storage;
	this.context = null;
};

/*
 *
 */
var _SDataCacheClass = utils.defineClass(
	_SDataCache,
	null, {
		setContext: function(context) {
			log && log("Changing cache context: " + JSON.stringify(context));
			this.context = context;
		},

		cachePrefix: _cachePrefix,

		/**
		 * Put an instance of an sdata object into the cache
		 *
		 * Parameters:
		 * data
		 * {
		 *   $data: {} - Data to store in cache (mandatory)
		 *   $proto: {} - Prototype of data
		 *   $representation: "user.$details" - Representation of data
		 *   $key: "mawal" - Key of data
		 * }
		 * Note that $proto OR $representation AND $key must be set
		 *
		 * Return:
		 * Resolve:
		 * null
		 *
		 * Reject:
		 * Instance of Error
		 *
		 */
		put: function(data) {
			var deferred = $.Deferred();
			var self = this;
			try {
				if (!data.$data) {
					throw new Error("PUT: No data specified");
				}
				var repr;
				var key;
				if (data.$proto) {
					var $proto = self._getProto(data.$proto);
					repr = self._getRepresentation($proto);
					key = self._getKeyValue(data.$data, $proto);
				} else if (data.$representation && data.$key) {
					repr = data.$representation;
					key = data.$key;
				} else {
					throw new Error("PUT: Neither proto nor representation and key specified");
				}
				self.storage.put({
					$context: self.context,
					$collection: _cachePrefix + repr,
					$endpoint: data.$endpoint,
					$key: key,
					$data: {
						$item: data.$data
					}
				}).then(function(result) {
					deferred.resolve();
				}).fail(function(error) {
					deferred.reject(error);
				});
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		/**
		 * Query an array of instances from cache
		 *
		 * Parameters:
		 * data
		 * {
		 *   $proto: {} - Prototype of data
		 *   $representation: "user.$details" - Representation of data
		 *   $where: "user eq 'admin' - Optional where clause
		 *   $orderBy: [{ "property": "user", "sort" : "ASC"}, { "property": "login", "sort" : "desc"}] - Optional array of sort conditions
		 * }
		 * Note that $proto OR $representation must be set
		 *
		 * Return:
		 * Resolve:
		 * Matched instances of queried representation
		 * [
		 *   {},
		 *   {}
		 * ]
		 *
		 * Reject:
		 * Instance of Error
		 *
		 */
		query: function(data) {
			var deferred = $.Deferred();
			var self = this;
			try {
				var repr;
				if (data.$proto) {
					var $proto = self._getProto(data.$proto);
					repr = self._getRepresentation($proto);
				} else if (data.$representation) {
					if (data.$where) {
						throw new Error("QUERY: Where clause parsing requires prototype");
					}
					if (data.$orderBy) {
						throw new Error("QUERY: Order by requires prototype");
					}
					repr = data.$representation;
				} else {
					throw new Error("QUERY: Neither proto nor representation specified");
				}
				self.storage.query({
					$context: self.context,
					$endpoint: data.$endpoint,
					$collection: _cachePrefix + repr
				}).then(function(result) {
					var res = [];
					if (data.$where) {
						var exp = parser.parse(data.$where);
						result.$data.forEach(function(item, i) {
							if (whereUtils.execWhere(item.$item, exp, $proto)) {
								var d = item.$item;
								var m = result.$metaData[i];
								d.$cache = {
									$lastRead: m.$lastRead,
									$lastUpdated: m.$lastUpdated
								};
								res.push(d);
							}
						});
					} else {
						result.$data.forEach(function(item, i) {
							var d = item.$item;
							var m = result.$metaData[i];
							d.$cache = {
								$lastRead: m.$lastRead,
								$lastUpdated: m.$lastUpdated
							};
							res.push(d);
						});
					}
					if (data.$orderBy) {
						sdataSort.sdataSortArray(res, $proto, data.$orderBy);
					}
					// Exception are handled by ou jq deferred hack
					deferred.resolve(res);
				}).fail(function(error) {
					deferred.reject(error);
				});
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		/**
		 * Read one instance from cache using given key
		 *
		 * Parameters:
		 * data
		 * {
		 *   $key: "abc~def" - Key of object to read
		 *   $proto: {} - Prototype of data
		 *   $representation: "user.$details" - Representation of data
		 * }
		 * Note that $proto OR $representation must be set
		 *
		 * Return:
		 * Resolve:
		 * Instance for given key or null if no match
		 * { ... }
		 *
		 * Reject:
		 * Instance of Error
		 *
		 */
		read: function(data) {
			var deferred = $.Deferred();
			var self = this;
			try {
				var repr;
				if (!data.$key) {
					throw new Error("READ: No key specified");
				}
				if (data.$proto) {
					var $proto = self._getProto(data.$proto);
					repr = self._getRepresentation($proto);
				} else if (data.$representation) {
					repr = data.$representation;
				} else {
					throw new Error("READ: Neither proto nor representation specified");
				}
				self.storage.read({
					$context: self.context,
					$collection: _cachePrefix + repr,
					$endpoint: data.$endpoint,
					$key: data.$key
				}).then(function(result) {
					if (result.$status === storageModule.StatusCodes.OK) {
						var res = result.$data.$item;
						res.$cache = {
							$lastRead: result.$metaData.$lastRead,
							$lastUpdated: result.$metaData.$lastUpdated
						};
						deferred.resolve(res);
					} else {
						deferred.resolve(null);
					}
				}).fail(function(error) {
					deferred.reject(error);
				});
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		/**
		 * Delete instance from cache by given key
		 *
		 * Parameters:
		 * data
		 * {
		 *   $key: "abc~def" - Key of object to read
		 *   $proto: {} - Prototype of data
		 *   $representation: "user.$details" - Representation of data
		 * }
		 * Note that $proto OR $representation must be set
		 *
		 * Return:
		 * Resolve:
		 * null
		 *
		 * Reject:
		 * Instance of Error
		 *
		 */
		remove: function(data) {
			var deferred = $.Deferred();
			var self = this;
			try {
				var repr;
				if (!data.$key) {
					throw new Error("REMOVE: No key specified");
				}
				if (data.$proto) {
					var $proto = self._getProto(data.$proto);
					repr = self._getRepresentation($proto);
				} else if (data.$representation) {
					repr = data.$representation;
				} else {
					throw new Error("READ: Neither proto nor representation specified");
				}
				self.storage.remove({
					$context: self.context,
					$collection: _cachePrefix + repr,
					$endpoint: data.$endpoint,
					$key: data.$key
				}).then(function() {
					deferred.resolve();
				}).fail(function(error) {
					deferred.reject(error);
				});
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		/**
		 *
		 */
		clearCache: function() {
			var deferred = $.Deferred();
			var self = this;
			var re = new RegExp(self.cachePrefix.replace(/([\$\_]+)/g, "\\$1"));
			try {
				self.storage.clearCollection({
					$context: self.context,
					$collection: re
				})
					.then(function() {
						self.storage.clearCollection({
							$context: globals.getEmptyCacheCtx(),
							$collection: re
						});
					})
					.then(function() {
						deferred.resolve();
					}).fail(function(error) {
						deferred.reject(error);
					});
			} catch (e) {
				deferred.reject(e);
			} finally {
				return deferred.promise();
			}
		},

		_getProto: function(proto) {
			var itemProto = (proto.$properties.$resources && proto.$properties.$resources.$item) || proto;
			// item type of query and lookup is e.g. $queryItem
			// We want to use the base $type here ($query or $lookup)
			itemProto.$type = proto.$type;
			return itemProto;
		},
		_getRepresentation: function(proto) {
			return proto.$type.split(".").slice(1, 3).join(".").replace("$queryItem", "$query");
		},
		_getKeyValue: function(data, proto) {
			return proto.$key.replace(/\{(.*?)\}/g, function(m, p) {
				return data[p];
			});
		}
	}
);

exports.SDataCache = _SDataCacheClass;
});

define('syracuse-tablet/html/js/sdata/entities/test/example',['require','exports','module'],function (require, exports, module) {

var _data = [];
for (var i = 0; i < 100; i++) {
	_data.push({
		$uuid: i,
		name: "My name is: " + i,
		desc: "My desc is: " + i,
		desc2: "My desc2 is: " + i,
		amount: i * 100,
	});
}

exports.entity = {
	$entityName: "example",
	$value: "{name}",
	$properties: {
		name: {
			$type: "application/x-string",
			$title: "My name"
		},
		desc: {
			$type: "application/x-string",
			$title: "My description"
		},
		desc2: {
			$type: "application/x-string",
			$title: "My description 2"
		},
		amount: {
			$type: "application/x-integer",
			$title: "My amount",
			$isExcluded: false,
			$isHidden: false,
			$isMandatory: false,
			$isReadOnly: false,
			$isDisabled: false
		}
	},
	$relations: {
		values: {
			$type: "exampleChild"
		}
	},
	$articles: {
		$details: {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "6",
					"$items": [{
						"$bind": "name",
						"$isTitleHidden": false
					}]
				}, {
					"$bind": "desc",
					"$isTitleHidden": false
				}],
			}, {
				"$layoutType": "row",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "6",
					"$items": [{
						"$bind": "desc2",
						"$isTitleHidden": false
					}]
				}, {
					"$bind": "amount",
					"$isTitleHidden": false
				}]
			}]
		},
		$edit: {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "6",
					"$items": [{
						"$bind": "name",
						"$isTitleHidden": true
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "6",
					"$items": [{
						"$bind": "desc",
						"$isTitleHidden": true
					}]
				}],
			}, {
				"$layoutType": "row",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "6",
					"$items": [{
						"$bind": "desc2",
						"$isTitleHidden": false
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "6",
					"$items": [{
						"$bind": "amount",
						"$isTitleHidden": false
					}]
				}]
			}]
		}
	},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			// only works because op.$key is equal the array index and equal the $uuid
			deferred.resolve(_data[op.$key]);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _data
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/exampleHubLayout',['require','exports','module'],function (require, exports, module) {

var _data = [];
for (var i = 0; i < 100; i++) {
	_data.push({
		$uuid: i,
		name: "My name is: " + i,
		desc: "My desc is: " + i,
		desc2: "My desc2 is: " + i,
		amount: i * 100,
	});
}

exports.entity = {
	$entityName: "exampleHubLayout",
	$value: "{name}",
	$properties: {
		name: {
			$type: "application/x-string",
			$title: "My name"
		},
		desc: {
			$type: "application/x-string",
			$title: "My description"
		},
		desc2: {
			$type: "application/x-string",
			$title: "My description 2"
		},
		amount: {
			$type: "application/x-integer",
			$title: "My amount",
			$isExcluded: false,
			$isHidden: false,
			$isMandatory: false,
			$isReadOnly: false,
			$isDisabled: false
		}
	},
	$relations: {
		values: {
			$type: "exampleChild"
		}
	},
	$articles: {
		$details: {
			"$layoutType": "hub",
			"$items": [{
				"$layoutType": "hubGroup",
				"$title": "Layout group 1",
				"$items": [{
					"$layoutType": "tile",
					"$bgColor": "lime",
					"$size": "full",
					"$items": [{
						"$layoutType": "stack",
						"$items": [{
							"$layoutType": "row",
							"$items": [{
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "desc",
								"$isTitleHidden": false
							}],
						}]
					}]
				}, {
					"$layoutType": "tile",
					"$bgColor": "purple",
					"$size": "medium",
					"$items": [{
						"$layoutType": "stack",
						"$items": [{
							"$layoutType": "row",
							"$items": [{
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "desc",
								"$isTitleHidden": false
							}],
						}]
					}]
				}, {
					"$layoutType": "tile",
					"$bgColor": "magenta",
					"$size": "medium",
					"$items": [{
						"$layoutType": "stack",
						"$items": [{
							"$layoutType": "row",
							"$items": [{
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "desc",
								"$isTitleHidden": false
							}],
						}]
					}]
				}, {
					"$layoutType": "tile",
					"$bgColor": "teal",
					"$size": "wide",
					"$items": [{
						"$layoutType": "stack",
						"$items": [{
							"$layoutType": "row",
							"$items": [{
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "desc",
								"$isTitleHidden": false
							}],
						}]
					}]
				}]
			}, {
				"$layoutType": "hubGroup",
				"$title": "Layout group 2",
				"$items": [{
					"$layoutType": "tile",
					"$bgColor": "orange",
					"$size": "large",
					"$items": [{
						"$layoutType": "stack",
						"$items": [{
							"$layoutType": "row",
							"$items": [{
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "desc",
								"$isTitleHidden": false
							}],
						}]
					}]
				}, {
					"$layoutType": "tile",
					"$bgColor": "purple",
					"$size": "medium",
					"$items": [{
						"$layoutType": "stack",
						"$items": [{
							"$layoutType": "row",
							"$items": [{
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "desc",
								"$isTitleHidden": false
							}],
						}]
					}]
				}, {
					"$layoutType": "tile",
					"$bgColor": "magenta",
					"$size": "green",
					"$items": [{
						"$layoutType": "stack",
						"$items": [{
							"$layoutType": "row",
							"$items": [{
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "desc",
								"$isTitleHidden": false
							}],
						}]
					}]
				}, {
					"$layoutType": "tile",
					"$bgColor": "teal",
					"$size": "wide",
					"$items": [{
						"$layoutType": "stack",
						"$items": [{
							"$layoutType": "row",
							"$items": [{
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "name",
								"$isTitleHidden": false
							}, {
								"$bind": "desc",
								"$isTitleHidden": false
							}],
						}]
					}]
				}]
			}]
		},
		$edit: {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$widthMd": "6,6",
				"$items": [{
					"$bind": "name",
					"$isTitleHidden": true
				}, {
					"$bind": "desc",
					"$isTitleHidden": true
				}],
			}, {
				"$layoutType": "row",
				"$widthMd": "6,6",
				"$items": [{
					"$bind": "desc2",
					"$isTitleHidden": false
				}, {
					"$bind": "amount",
					"$isTitleHidden": false
				}]
			}]
		}
	},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			// only works because op.$key is equal the array index and equal the
			// $uuid
			deferred.resolve(_data[op.$key]);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _data
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testDatatypes',['require','exports','module'],function (require, exports, module) {

var _data = [];
var _switch = false;
for (var i = 0; i < 10; i++) {
	_data.push({
		$uuid: i,
		propString: "Simple String=" + i,
		propDate: "2014-03-" + (i + 20),
		propDateTime: "2014-06-" + (i + 10) + "T12:45:" + (i + 44) + ".123Z",
		propTime: "15:45:" + (i + 34),
		propTimeShort: "15:45:" + (i + 34),
		propInt: (i * 1000 + i * 10),
		propDecimal: Math.sqrt(i * 1000 + i * 10),
		propReal: Math.sqrt(i * 1000 + i * 30),
		propBoolean: (_switch = !_switch),
		propChoice: "mr",
		propQuantity: i * 123,
		propStringUnit: "EUR",
		propStringMandatory: "Mandatory",
		propDecimalMandatory: "",
		propStringMinMax: "",
		propStringMinMaxValue: "",
		propStringPattern: ""
	});
}

var _entity = {
	$entityName: "testDataTypes",
	$properties: {
		propString: {
			$type: "application/x-string",
			$isMandatory: false,
			$title: "My name (max len 25)",
			$maxLength: 25
		},
		propStringMandatory: {
			$type: "application/x-string",
			$isMandatory: true,
			$title: "String Madatory"
		},
		propStringMinMax: {
			$type: "application/x-string",
			$title: "String MinMaxLength(3-5)",
			$minLength: 3,
			$maxLength: 5
		},
		propStringMinMaxValue: {
			$type: "application/x-integer",
			$isMandatory: false,
			$title: "Integer MinMaxValue(3-50)",
			$minimun: "3",
			$maximun: "50"
		},
		propStringPattern: {
			$type: "application/x-string",
			$title: "Pattern",
			$maxLength: 40
		},
		propDate: {
			$type: "application/x-date",
			$isMandatory: false,
			$title: "Date"
		},

		propDateTime: {
			$type: "application/x-datetime",
			$isMandatory: false,
			$title: "Date+Time"
		},
		propTime: {
			$type: "application/x-time",
			$isMandatory: false,
			$title: "Time long",
			$format: "TT"
		},
		propTimeShort: {
			$type: "application/x-time",
			$isMandatory: false,
			$title: "Time",
		},
		propInt: {
			$type: "application/x-integer",
			$isMandatory: false,
			$title: "Integer (1-7000 Max)",
			$minimun: "1",
			$maximun: "7000"
		},

		propDecimalMandatory: {
			$type: "application/x-decimal",
			$isMandatory: true,
			$title: "Decimal mandatory(2.4)",
			$scale: 2,
			$precision: 4,
			$format: "0.00"
		},
		propDecimal: {
			$type: "application/x-decimal",
			$isMandatory: false,
			$title: "Decimal(4.7)",
			$scale: 4,
			$precision: 7,
			$format: "0.0000"
		},
		propReal: {
			$type: "application/x-real",
			$isMandatory: false,
			$title: "Real",
		},

		propBoolean: {
			$type: "application/x-boolean",
			$isMandatory: false,
			$title: "Boolean"
		},
		propChoice: {
			$type: "application/x-choice",
			$isMandatory: false,
			$title: "Choice",
			//$format: "$radios",
			$value: {
				$enum: [{
					$title: "Mr.",
					$value: "mr"
				}, {
					$title: "Mrs.",
					$value: "mrs"
				}],
				$type: "application/x-string"
			}
		},
		propQuantity: {
			$title: "Quantity",
			$type: "application/x-quantity",
			$value: {
				$title: "{$value} {$unit}",
				$type: "application/x-decimal",
				$scale: 9,
				$precision: 2,
				$format: "0.00"
			},
			$unit: "propStringUnit"
		},
		propStringUnit: {
			$type: "application/x-string",
			$isMandatory: false,
			$isExcluded: true,
			$title: "Unit for quantity"
		},
		propStringM: {
			$type: "application/x-string",
			$isMandatory: true,
			$title: "My name"
		},
		propDateM: {
			$type: "application/x-date",
			$isMandatory: true,
			$title: "Date (Mandatory)"
		},
		propDateTimeM: {
			$type: "application/x-datetime",
			$isMandatory: true,
			$title: "Date+Time (Mandatory)"
		},
		propTimeM: {
			$type: "application/x-time",
			$isMandatory: true,
			$title: "Time (Mandatory)",
		},
		propIntM: {
			$type: "application/x-integer",
			$isMandatory: true,
			$title: "Integer (Mandatory)",
		},
		propDecimalM: {
			$type: "application/x-decimal",
			$isMandatory: true,
			$title: "Decimal (Mandatory)",
		},
		propRealM: {
			$type: "application/x-real",
			$isMandatory: true,
			$title: "Real (Mandatory)",
		},
		propBooleanM: {
			$type: "application/x-boolean",
			$isMandatory: true,
			$title: "Boolean (Mandatory)"
		}
	},
	$relations: {},
	$articles: {},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			// template when creating a new record
			var i = 15;
			var tpl = {
				$uuid: i,
				propString: "Simple String=" + i,
				propDate: "2014-03-" + i,
				propDateTime: "2014-06-" + i + "T12:45:" + (i + 44) + ".234Z",
				propTime: "15:45:" + (i + 34),
				propInt: (i * 1000 + i * 10),
				propDecimal: Math.sqrt(i * 1000 + i * 10),
				propReal: Math.sqrt(i * 1000 + i * 30),
				propBoolean: (_switch = !_switch)
			};

			deferred.resolve(tpl);
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			// only works because op.$key is equal the array index and equal the $uuid
			deferred.resolve(_data[op.$key]);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _data
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};


exports.entity = _entity;
});

define('syracuse-tablet/html/js/sdata/entities/test/testFormats',['require','exports','module'],function (require, exports, module) {

var _data = [];
var _switch = false;
for (var i = 0; i < 10; i++) {
	_data.push({
		$uuid: i,
		propDate1: "2014-03-" + (i + 20),
		propDateTime1: "2014-06-" + (i + 10) + " 12:45:" + (i + 44),
		propTime1: "15:45:" + (i + 34),
		propInt1: (i * 1000 + i * 10),
		propDecimal1: Math.sqrt(i * 1000 + i * 10),
		propReal1: Math.sqrt(i * 1000 + i * 30),
		propDate2: "2014-03-" + (i + 20),
		propDateTime2: "2014-06-" + (i + 10) + " 12:45:" + (i + 44),
		propTime2: "15:45:" + (i + 34),
		propInt2: (i * 1000 + i * 10),
		propDecimal2: Math.sqrt(i * 1000 + i * 10),
		propReal2: Math.sqrt(i * 1000 + i * 30)

	});
}

exports.entity = {
	$entityName: "testFormats",
	$properties: {
		propDate1: {
			$type: "application/x-date",
			$title: "Date"
		},
		propDateTime1: {
			$type: "application/x-datetime",
			$title: "Date+Time"
		},
		propTime1: {
			$type: "application/x-time",
			$title: "Time",
		},
		propInt1: {
			$type: "application/x-integer",
			$title: "Integer",
		},
		propDecimal1: {
			$type: "application/x-decimal",
			$title: "Decimal",
		},
		propReal1: {
			$type: "application/x-real",
			$title: "Real",
		},
		propDate2: {
			$type: "application/x-date",
			$title: "Date"
		},
		propDateTime2: {
			$type: "application/x-datetime",
			$title: "Date+Time"
		},
		propTime2: {
			$type: "application/x-time",
			$title: "Time",
		},
		propInt2: {
			$type: "application/x-integer",
			$title: "Integer",
		},
		propDecimal2: {
			$type: "application/x-decimal",
			$title: "Decimal",
		},
		propReal2: {
			$type: "application/x-real",
			$title: "Real",
		},
	},
	$relations: {},
	$articles: {},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({});
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve(_data[op.$key]);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _data
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testFormatsReference',['require','exports','module'],function (require, exports, module) {


var $descriptionSamples = ["Labe", "Labuan", "La Rochelle", "Las Vegas", "Las Palmas", "Liege", "Libreville", "Lille", "Liverpool", "Leipzig", "Lucknow", "London"];
var $codeSamples = ["LEK", "LBU", "LRH", "LAS", "LPA", "LGG", "LBV", "LIL", "LPL", "LEJ", "LKO", "LON"];

var _data = {
	SITE_REF: {
		$description: "Paris",
		FCY: "PAR"
	},
	SITE_REF_1: {
		$description: "Yaounde",
		FCY: "YDE"
	},
	SITE_REF_2: {
		$description: "London",
		FCY: "LON"
	},
	SITE_REF_3: {
		$description: "Lisbon",
		FCY: "LIS"
	}
};

var _qData = [];
var j = -1;
var m = -1;
for (var i = 0; i < 3; i++) {
	_qData.push({
		$uuid: i,
		SITE_REF: {
			$description: $descriptionSamples[++j],
			FCY: $codeSamples[++m]
		},
		SITE_REF_1: {
			$description: $descriptionSamples[++j],
			FCY: $codeSamples[++m]
		},
		SITE_REF_2: {
			$description: $descriptionSamples[++j],
			FCY: $codeSamples[++m]
		},
		SITE_REF_3: {
			$description: $descriptionSamples[++j],
			FCY: $codeSamples[++m]
		}
	});
}

exports.entity = {
	$entityName: "testFormatsReference",
	$baseUrl: "http://localhost:8124/mobile1/x3/erp/SUPERV",
	$properties: {
		"SITE": {
			"$type": "application/x-string",
			"$maxLength": 5,
			"$isExcluded": true
		},
		"SITE_REF": {
			$type: "application/x-reference",
			$title: "Reference",
			$shortTitle: "Reference",
			$capabilities: "sort,filter",
			$item: {
				$url: "{$baseUrl}/testFormatsReference('{$key}')?representation=testFormatsReference.$lookup",
				$value: "{FCY}",
				"FCY": "{SITE}",
				"$key": "{FCY}",
				"$properties": {
					"FCY": {
						"$type": "application/x-string"
					}
				},
				"$links": {
					"$details": {
						"$title": "details",
						"$target": "",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/testFormatsReference('{SITE}')?representation=testFormatsReference.$details",
						"$method": "GET"
					},
					"$lookup": {
						"$title": "lookup",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/testFormatsReference?representation=testFormatsReference.$lookup",
						"$method": "GET"
					},
					"$query": {
						"$title": "query",
						"$target": "",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/testFormatsReference?representation=testFormatsReference.$query",
						"$method": "GET"
					},
					"SIT1": {
						"$title": "SIT1",
						"$target": "main",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "https://maps.google.de/maps?q={SITE}&t=Default",
						"$method": "GET"
					}
				}
			}
		},
		"SITE_REF_1": {
			$type: "application/x-reference",
			$title: "Reference 1",
			$shortTitle: "Reference 1",
			$capabilities: "sort,filter",
			$item: {
				$url: "{$baseUrl}/testFormatsReference('{$key}')?representation=testFormatsReference.$lookup",
				$value: "{FCY}",
				"FCY": "{SITE}",
				"$key": "{FCY}",
				"$properties": {
					"FCY": {
						"$type": "application/x-string"
					}
				},
				"$links": {
					"$details": {
						"$title": "details",
						"$target": "",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/testFormatsReference('{SITE}')?representation=testFormatsReference.$details",
						"$method": "GET"
					},
					"$lookup": {
						"$title": "lookup",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/testFormatsReference?representation=testFormatsReference.$lookup",
						"$method": "GET"
					},
					"$query": {
						"$title": "query",
						"$target": "",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/testFormatsReference?representation=testFormatsReference.$query",
						"$method": "GET"
					},
					"SIT1": {
						"$title": "SIT1",
						"$target": "main",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "https://maps.google.de/maps?q={SITE}&t=Default",
						"$method": "GET"
					}
				}
			}
		},
		"SITE_REF_2": {
			$type: "application/x-reference",
			$title: "Reference 2",
			$shortTitle: "Reference 2",
			$capabilities: "sort,filter",
			$item: {
				$url: "{$baseUrl}/testFormatsReference('{$key}')?representation=testFormatsReference.$lookup",
				$value: "{FCY}",
				"FCY": "{SITE}",
				"$key": "{FCY}",
				"$properties": {
					"FCY": {
						"$type": "application/x-string"
					}
				},
				"$links": {
					"$details": {
						"$title": "details",
						"$target": "",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/testFormatsReference('{SITE}')?representation=testFormatsReference.$details",
						"$method": "GET"
					},
					"$lookup": {
						"$title": "lookup",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/testFormatsReference?representation=testFormatsReference.$lookup",
						"$method": "GET"
					},
					"$query": {
						"$title": "query",
						"$target": "",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/testFormatsReference?representation=testFormatsReference.$query",
						"$method": "GET"
					},
					"SIT1": {
						"$title": "SIT1",
						"$target": "main",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "https://maps.google.de/maps?q={SITE}&t=Default",
						"$method": "GET"
					}
				}
			}
		},
		"SITE_REF_3": {
			$type: "application/x-reference",
			$title: "Reference 3",
			$shortTitle: "Reference 3",
			$capabilities: "sort,filter",
			$item: {
				$url: "{$baseUrl}/testFormatsReference('{$key}')?representation=testFormatsReference.$lookup",
				$value: "{FCY}",
				"FCY": "{SITE}",
				"$key": "{FCY}",
				"$properties": {
					"FCY": {
						"$type": "application/x-string"
					}
				},
				"$links": {
					"$details": {
						"$title": "details",
						"$target": "",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/testFormatsReference('{SITE}')?representation=testFormatsReference.$details",
						"$method": "GET"
					},
					"$lookup": {
						"$title": "lookup",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/testFormatsReference?representation=testFormatsReference.$lookup",
						"$method": "GET"
					},
					"$query": {
						"$title": "query",
						"$target": "",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/testFormatsReference?representation=testFormatsReference.$query",
						"$method": "GET"
					},
					"SIT1": {
						"$title": "SIT1",
						"$target": "main",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "https://maps.google.de/maps?q={SITE}&t=Default",
						"$method": "GET"
					}
				}
			}
		}
	},
	$relations: {},
	$articles: {
		$details: {
			"$layoutType": "stack",
			$items: [{
				$bind: "SITE_REF",
				$title: "Ref field 1"
			}, {
				$bind: "SITE_REF_1",
				$title: "Ref field 2"
			}, {
				$bind: "SITE_REF_2",
				$title: "Ref field 3"
			}, {
				$bind: "SITE_REF_3",
				$title: "Ref field 4"
			}]
		},
		$edit: {
			"$layoutType": "stack",
			$items: [{
				$bind: "SITE_REF",
				$title: "Ref field 1"
			}, {
				$bind: "SITE_REF_1",
				$title: "Ref field 2"
			}, {
				$bind: "SITE_REF_2",
				$title: "Ref field 3"
			}, {
				$bind: "SITE_REF_3",
				$title: "Ref field 4"
			}]
		}
	},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({});
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve(_data);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _qData
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testCharts',['require','exports','module'],function (require, exports, module) {

var _data = [{
	part: "Gear",
	value: 50,
	revenue: 40,
	margin: 10
}, {
	part: "Motor",
	value: 60,
	revenue: 40,
	margin: 20
}, {
	part: "Head drive",
	value: 60,
	revenue: 80,
	margin: -20
}, {
	part: "Handwheel",
	value: 70,
	revenue: 90,
	margin: 10
}, {
	part: "Crank",
	value: 70,
	revenue: 70,
	margin: 0
}, {
	part: "Saddle",
	value: 80,
	revenue: 30,
	margin: 50
}, {
	part: "Base",
	value: 20,
	revenue: 40,
	margin: -20
}, {
	part: "Spindle",
	value: 10,
	revenue: 0,
	margin: 10
}];


exports.entity = {
	$entityName: "testCharts",
	$properties: {
		part: {
			$type: "application/x-string",
			$title: "Item"
		},
		value: {
			$type: "application/x-decimal",
			$title: "Value",
			$format: "0.0000"
		},
		revenue: {
			$type: "application/x-decimal",
			$title: "Revenue",
			$format: "0.0000"
		},
		margin: {
			$type: "application/x-decimal",
			$title: "Margin",
			$format: "0.0000"
		}
	},

	// invoked after protype generation to do adjustments
	$prototype: function(proto) {

		// Add some chart information in $query prototype
		var res = proto.$properties && proto.$properties.$resources;
		if (res) {
			res.$axes = [{
				$title: "Item",
				$hierarchies: [
					["part"]
				]
			}, {
				$hierarchies: [
					["$measures"]
				]
			}];
			res.$cube = {
				$title: "Sales overview",
				$hierarchies: {
					part: {
						$properties: ["part"]
					}
				},
				$measures: {
					value: {},
					revenue: {},
					margin: {}
				}
			};
		}
	},
	$relations: {},
	$articles: {},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve(_data[op.$key]);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _data
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testConstraints',['require','exports','module'],function (require, exports, module) {

var _data = [];
var _switch = false;
for (var i = 0; i < 10; i++) {
	_data.push({
		$uuid: i,
		propString: "Test " + i,
		propString2: "Some text " + i,
		propString3: "Fill me " + i,
		propInt: (i * 1000 + i * 10),
		propInt2: (i * 1000 + i * 100),
		propDecimal: Math.sqrt(i * 1000 + i * 10),
		propDecimal2: Math.sqrt(i * 1000 + i * 100),
		propDecimal3: Math.sqrt(i * 1000 + i * 110),
		propDecimal4: Math.sqrt(i * 1000 + i * 120),
		propQuantity: i * 123,
		propStringUnit: "EUR"
	});
}

exports.entity = {
	$entityName: "testConstraints",
	$properties: {
		propString: {
			$title: "Test: $pattern=Test.*\\d$",
			$type: "application/x-string",
			$isMandatory: true,
			$pattern: "Test.*\\d$"
		},
		propString2: {
			$title: "Test: $minLength=5, $maxLength=15",
			$type: "application/x-string",
			$isMandatory: true,
			$minLength: 5,
			$maxLength: 15
		},
		propString3: {
			$title: "Test: $minLength=5, $maxLength=15, $pattern=Fill me.*\\d$",
			$type: "application/x-string",
			$isMandatory: true,
			$pattern: "Fill me.*\\d$",
			$minLength: 5,
			$maxLength: 15
		},
		propInt: {
			$title: "Test: $minimum=100, $maximum=200",
			$type: "application/x-integer",
			$isMandatory: true,
			$minimum: 100,
			$maximum: 200
		},
		propInt2: {
			$title: "Test: $exclusiveMinimum=100, $exclusiveMaximum=200",
			$type: "application/x-integer",
			$isMandatory: true,
			$exclusiveMinimum: 100,
			$exclusiveMaximum: 200
		},
		propDecimal: {
			$title: "Test: $format=0.0000",
			$type: "application/x-decimal",
			$isMandatory: true,
			$format: "0.0000"
		},
		propDecimal2: {
			$title: "Test: $format=0.00",
			$type: "application/x-decimal",
			$isMandatory: true,
			$format: "0.00"
		},
		propDecimal3: {
			$title: "Test: $precision=10",
			$type: "application/x-decimal",
			$isMandatory: true,
			$precision: 10
		},
		propDecimal4: {
			$title: "Test: $scale=3",
			$type: "application/x-decimal",
			$isMandatory: true,
			$scale: 3,
			$format: "0.00000"
		},
		propQuantity: {
			$title: "Test: $format=0.00",
			$isMandatory: true,
			$type: "application/x-quantity",
			$value: {
				$title: "{$value} {$unit}",
				$type: "application/x-decimal",
				$scale: 9,
				$precision: 2,
				$format: "0.00"
			},
			$unit: "propStringUnit"
		},
		propStringUnit: {
			$title: "Unit for quantity",
			$type: "application/x-string",
			$isMandatory: false,
			$isExcluded: true
		},
	},
	$relations: {},
	$articles: {},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			// template when creating a new record
			var i = 15;
			var tpl = {
				$uuid: i,
				propString: "Simple String=" + i,
				propInt: (i * 1000 + i * 10),
				propDecimal: Math.sqrt(i * 1000 + i * 10),
			};
			deferred.resolve(tpl);
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			// only works because op.$key is equal the array index and equal the $uuid
			deferred.resolve(_data[op.$key]);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _data
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testNavigateTo',['require','exports','module'],function (require, exports, module) {

var _data = [];

for (var i = 0; i < 10; i++) {
	_data.push({
		$uuid: i,
		name: "Customer group " + i,
		group: "" + i
	});

}

exports.entity = {
	$entityName: "testNavigateTo",
	$properties: {
		name: {
			$title: "Customer group name",
			$type: "application/x-string",
		},
		group: {
			$title: "Customer group",
			$type: "application/x-string",
		},
	},
	$prototype: function(proto) {

		// Add some chart information in $query prototype
		var res = proto.$properties && proto.$properties.$resources && proto.$properties.$resources.$item && proto.$properties.$resources.$item.$links || {};

		res["DASHBOARD"] = {
			$title: "Show details",
			$url: "{$baseUrl}/$mobileDashboards?dashboard=testContextDashboardChild&parameters=group%3D%7Bgroup%7D"
		};
	},
	$relations: {},
	$articles: {},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			// template when creating a new record
			var i = 15;
			var tpl = {
				$uuid: i,
				propString: "Simple String=" + i,
				propInt: (i * 1000 + i * 10),
				propDecimal: Math.sqrt(i * 1000 + i * 10),
			};
			deferred.resolve(tpl);
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			// only works because op.$key is equal the array index and equal the $uuid
			deferred.resolve(_data[op.$key]);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _data
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testNavigateToChild',['require','exports','module'],function (require, exports, module) {

var _data = [];

for (var i = 0; i < 10; i++) {
	for (var j = 0; j < 10; j++) {
		_data.push({
			$uuid: (i * 10) + j,
			name: "Customer " + (i * 10) + j,
			desc: "Belongs to group " + i,
			group: "" + i
		});
	}
}

exports.entity = {
	$entityName: "testNavigateToChild",
	$properties: {
		name: {
			$title: "Customer name",
			$type: "application/x-string",
		},
		desc: {
			$title: "Description",
			$type: "application/x-string",
		},
		group: {
			$title: "Customer group",
			$type: "application/x-string",
		},
	},
	$relations: {},
	$articles: {},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			// template when creating a new record
			var i = 15;
			var tpl = {
				$uuid: i,
				propString: "Simple String=" + i,
				propInt: (i * 1000 + i * 10),
				propDecimal: Math.sqrt(i * 1000 + i * 10),
			};
			deferred.resolve(tpl);
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			// only works because op.$key is equal the array index and equal the $uuid
			deferred.resolve(_data[op.$key]);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _data
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testPropertyHideShow',['require','exports','module'],function (require, exports, module) {

var _data = [];
var _switch = false;
for (var i = 0; i < 10; i++) {
	_data.push({
		$uuid: i,
		propStringShow: "Simple String=" + i,
		propStringHide: "Simple String=" + i,
		propStringReadOnly: "ReadOnly String=" + i,
		propStringDisabled: "Disabled=true String=" + i,
		propStringDisabledFalse: "Disabled=false String=" + i,

		propDate: "2014-03-" + (i + 20),
		propDateHide: "2014-03-" + (i + 20),
		propDateDisabled: "2014-03-" + (i + 20),
		propDateReadOnly: "2014-03-" + (i + 20),

		propDateTime: "2014-06-" + (i + 10) + "T12:45:" + (i + 44) + ".123Z",
		propDateTimeHide: "2014-06-" + (i + 10) + "T12:45:" + (i + 44) + ".123Z",
		propDateTimeDisabled: "2014-06-" + (i + 10) + "T12:45:" + (i + 44) + ".123Z",

		propTime: "15:45:" + (i + 34),
		propTimeHide: "15:45:" + (i + 34),
		propTimeDisabled: "15:45:" + (i + 34),


		propInt: (i * 1000 + i * 10),
		propIntHide: (i * 1000 + i * 10),
		propIntDisabled: (i * 1000 + i * 10),
		propIntReadOnly: (i * 1000 + i * 10),

		propDecimal: Math.sqrt(i * 1000 + i * 10),
		propDecimalHide: Math.sqrt(i * 1000 + i * 10),
		propDecimalDisabled: Math.sqrt(i * 1000 + i * 10),
		propDecimalReadOnly: Math.sqrt(i * 1000 + i * 10),

		propReal: Math.sqrt(i * 1000 + i * 30),

		propBoolean: (_switch = !_switch),
		propBooleanHidden: (_switch = !_switch),
		propBooleanDisabled: (_switch = !_switch),

		propChoice: "mr",
		propChoiceHidden: "mr",
		propChoiceDisabled: "mr",

		propQuantity: i * 123,
		propStringUnit: "EUR",
		propQuantityExcluded: i * 123,
		propStringUnitExcluded: "USD"

	});
}

exports.entity = {
	$entityName: "testPropertyHideShow",
	$properties: {
		propStringShow: {
			$type: "application/x-string",
			$isMandatory: true,
			$title: "String Mandatory $isHidden: false",
			$isHidden: false
		},
		propStringHide: {
			$type: "application/x-string",
			$isMandatory: false,
			$title: "String $isHidden: true",
			$isHidden: true
		},
		propStringReadOnly: {
			$type: "application/x-string",
			$title: "String $isReadOnly: true",
			$isReadOnly: true
		},
		propStringDisabledFalse: {
			$type: "application/x-string",
			$title: "String $isDisabled: false",
			$isDisabled: false
		},
		propStringDisabled: {
			$type: "application/x-string",
			$title: "String $isDisabled: true",
			$isDisabled: true
		},
		propDate: {
			$type: "application/x-date",
			$isMandatory: false,
			$title: "Date $isHidden: false",
			$isHidden: false
		},
		propDateHide: {
			$type: "application/x-date",
			$isMandatory: false,
			$title: "Date $isHidden: true",
			$isHidden: true
		},
		propDateDisabled: {
			$type: "application/x-date",
			$isMandatory: false,
			$title: "Date $isDisabled: true",
			$isDisabled: true
		},
		propDateReadOnly: {
			$type: "application/x-date",
			$isMandatory: false,
			$title: "Date $isReadOnly: true",
			$isReadOnly: true
		},

		propDateTime: {
			$type: "application/x-datetime",
			$isMandatory: false,
			$title: "Date+Time $isHidden: false",
			$isHidden: false
		},
		propDateTimeHide: {
			$type: "application/x-datetime",
			$isMandatory: false,
			$title: "Date+Time $isHidden: true",
			$isHidden: true
		},
		propDateTimeDisabled: {
			$type: "application/x-datetime",
			$isMandatory: false,
			$title: "Date+Time $isDisabled: true",
			$isDisabled: true
		},

		propTime: {
			$type: "application/x-time",
			$isMandatory: false,
			$title: "Time long",
			$format: "TT"
		},
		propTimeHide: {
			$type: "application/x-time",
			$isMandatory: false,
			$title: "Time $isHidden: true",
			$isHidden: true
		},
		propTimeDisabled: {
			$type: "application/x-time",
			$isMandatory: false,
			$title: "Time $isDisabled: true",
			$isDisabled: true
		},

		propInt: {
			$type: "application/x-integer",
			$isMandatory: false,
			$title: "Integer ($isHidden: false)",
			$isHidden: false
		},
		propIntHide: {
			$type: "application/x-integer",
			$isMandatory: false,
			$title: "Integer ($isHidden: true)",
			$isHidden: true
		},
		propIntDisabled: {
			$type: "application/x-integer",
			$isMandatory: false,
			$title: "Integer ($isDisabled: true)",
			$isDisabled: true
		},
		propIntReadOnly: {
			$type: "application/x-integer",
			$isMandatory: false,
			$title: "Integer ($isReadOnly: true)",
			$isReadOnly: true
		},
		propDecimal: {
			$type: "application/x-decimal",
			$isMandatory: false,
			$title: "Decimal $isHidden: false",
			$isHidden: false
		},
		propDecimalHide: {
			$type: "application/x-decimal",
			$isMandatory: false,
			$title: "Decimal $isHidden: true",
			$isHidden: true
		},
		propDecimalDisabled: {
			$type: "application/x-decimal",
			$isMandatory: false,
			$title: "Decimal $isDisabled: true",
			$isDisabled: true
		},
		propDecimalReadOnly: {
			$type: "application/x-decimal",
			$isMandatory: false,
			$title: "Decimal $isReadOnly: true",
			$isReadOnly: true
		},

		propReal: {
			$type: "application/x-real",
			$isMandatory: false,
			$title: "Real"
		},

		propBoolean: {
			$type: "application/x-boolean",
			$isMandatory: false,
			$title: "Boolean"
		},
		propBooleanHidden: {
			$type: "application/x-boolean",
			$isMandatory: false,
			$title: "Boolean ($isHidden: true)",
			$isHidden: true
		},
		propBooleanDisabled: {
			$type: "application/x-boolean",
			$isMandatory: false,
			$title: "Boolean ($isDisabled: true)",
			$isDisabled: true
		},

		propChoice: {
			$type: "application/x-choice",
			$isMandatory: false,
			$title: "Choice",
			//$format: "$radios",
			$value: {
				$enum: [{
					$title: "Mr.",
					$value: "mr"
				}, {
					$title: "Mrs.",
					$value: "mrs"
				}],
				$type: "application/x-string"
			}
		},
		propChoiceHidden: {
			$type: "application/x-choice",
			$isMandatory: false,
			$title: "Choice($isHidden: true)",
			$isHidden: true,
			//$format: "$radios",
			$value: {
				$enum: [{
					$title: "Mr.",
					$value: "mr"
				}, {
					$title: "Mrs.",
					$value: "mrs"
				}],
				$type: "application/x-string"
			}
		},
		propChoiceDisabled: {
			$type: "application/x-choice",
			$isMandatory: false,
			$title: "Choice ($isDisabled: true)",
			$isDisabled: true,
			//$format: "$radios",
			$value: {
				$enum: [{
					$title: "Mr.",
					$value: "mr"
				}, {
					$title: "Mrs.",
					$value: "mrs"
				}],
				$type: "application/x-string"
			}
		},
		propQuantity: {
			$title: "Quantity ($unit $isExcluded: false)",
			$type: "application/x-quantity",
			$value: {
				$title: "{$value} {$unit}",
				$type: "application/x-decimal",
				$scale: 9,
				$precision: 2,
				$format: "0.00"
			},
			$unit: "propStringUnit"
		},
		propStringUnit: {
			$type: "application/x-string",
			$isMandatory: false,
			$isExcluded: false,
			$title: "Unit for quantity ($isExcluded: false)"
		},
		propQuantityExcluded: {
			$title: "Quantity($unit $isExcluded: true)",
			$type: "application/x-quantity",
			$value: {
				$title: "{$value} {$unit}",
				$type: "application/x-decimal",
				$scale: 9,
				$precision: 2,
				$format: "0.00"
			},
			$unit: "propStringUnitExcluded"
		},
		propStringUnitExcluded: {
			$type: "application/x-string",
			$isMandatory: false,
			$isExcluded: true,
			$title: "Unit for quantity ($isExcluded: true)"
		}

	},
	$relations: {},
	$articles: {},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			// template when creating a new record
			var i = 15;
			var tpl = {
				$uuid: i,
				propString: "Simple String=" + i,
				propDate: "2014-03-" + i,
				propDateTime: "2014-06-" + i + "T12:45:" + (i + 44) + ".234Z",
				propTime: "15:45:" + (i + 34),
				propInt: (i * 1000 + i * 10),
				propDecimal: Math.sqrt(i * 1000 + i * 10),
				propReal: Math.sqrt(i * 1000 + i * 30),
				propBoolean: (_switch = !_switch)
			};

			deferred.resolve(tpl);
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			// only works because op.$key is equal the array index and equal the $uuid
			deferred.resolve(_data[op.$key]);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _data
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testGaugeChart',['require','exports','module'],function (require, exports, module) {

var _data = {
	"salesOp": "75.0000000000",
	"salesValue": "133000.0000000000",
	"salesValueMin": "100000.0000000000",
	"salesValueMax": "150000.0000000000"
};

var _entity = {
	$entityName: "testGaugeChart",
	$properties: {
		"salesOp": {
			"$title": "sale opportunity",
			"$type": "application/x-decimal",
			"$capabilities": "sort,filter"
		},
		"salesValue": {
			"$title": "sales value",
			"$type": "application/x-decimal",
			"$capabilities": "sort,filter"
		},
		"salesValueMin": {
			"$title": "sales value min",
			"$type": "application/x-decimal",
			"$capabilities": "sort,filter"
		},
		"salesValueMax": {
			"$title": "sales value max",
			"$type": "application/x-decimal",
			"$capabilities": "sort,filter"
		}
	},
	$relations: {},
	$articles: {},
	$services: {
		$read: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve(_data);
			return deferred.promise();
		}
	}
};

exports.entity = _entity;
});

define('syracuse-tablet/html/js/sdata/entities/test/testHomeDashboard',['require','exports','module'],function (require, exports, module) {
exports.dashboards = {
	"testHomeDashboard": {
		"$dashboardName": "testHomeDashboard",
		"$title": "Main test dashboard",
		"$description": "This dashboard links to different dashboards used for every kind of UI tests",
		"$vignettes": {
			"testLayoutsDashboard": {
				"$uuid": "testLayoutsDashboard",
				"$displayStyle": "$link"
			},
			"testTypesDashboard": {
				"$uuid": "testTypesDashboard",
				"$displayStyle": "$link"
			},
			"testTypesDashboard2": {
				"$uuid": "testTypesDashboard2",
				"$displayStyle": "$link"
			},
			"testFormatsDashboard": {
				"$uuid": "testFormatsDashboard",
				"$displayStyle": "$link"
			},
			"testGX3APPDashboard": {
				"$uuid": "testGX3APPDashboard",
				"$displayStyle": "$link"
			},
			"testSUPERVDashboard": {
				"$uuid": "testSUPERVDashboard",
				"$displayStyle": "$link"
			},
			"testChartsDashboard": {
				"$uuid": "testChartsDashboard",
				"$displayStyle": "$link"
			},
			"testSUPERVDashboard2": {
				"$uuid": "testSUPERVDashboard2",
				"$displayStyle": "$link"
			},
			"testGX3APPDashboard2": {
				"$uuid": "testGX3APPDashboard2",
				"$displayStyle": "$link"
			},
			"testConstraintsDashboard": {
				"$uuid": "testConstraintsDashboard",
				"$displayStyle": "$link"
			},
			"testContextDashboard": {
				"$uuid": "testContextDashboard",
				"$displayStyle": "$link"
			},
			"testPropertyHideShowDashboard": {
				"$uuid": "testPropertyHideShowDashboard",
				"$displayStyle": "$link"
			},
			"testAQTACTNPDashboard": {
				"$uuid": "testAQTACTNPDashboard",
				"$displayStyle": "$link"
			},
			"testSyDevDashboard": {
				"$uuid": "testSyDevDashboard",
				"$displayStyle": "$link"
			},
			"testGaugeChartDashboard": {
				"$uuid": "testGaugeChartDashboard",
				"$displayStyle": "$link"
			},
			"testGridDashboard": {
				"$uuid": "testGridDashboard",
				"$displayStyle": "$link"
			}
		},
		"$article": {
			"$layoutType": "hub",
			"$items": [{
				"$layoutType": "hubGroup",
				"$title": "Client only",
				"$items": [{
					"$layoutType": "tile",
					"$bgColor": "magenta",
					"$items": [{
						"$bind": "testLayoutsDashboard"
					}],
					"$size": "small"
				}, {
					"$layoutType": "tile",
					"$bgColor": "brown",
					"$items": [{
						"$bind": "testFormatsDashboard"
					}],
					"$size": "small"
				}, {
					"$layoutType": "tile",
					"$bgColor": "brown",
					"$items": [{
						"$bind": "testTypesDashboard"
					}],
					"$size": "small"
				}, {
					"$layoutType": "tile",
					"$bgColor": "red",
					"$items": [{
						"$bind": "testConstraintsDashboard",
					}],
					"$size": "small"
				}, {
					"$layoutType": "tile",
					"$bgColor": "lime",
					"$items": [{
						"$bind": "testChartsDashboard"
					}],
					"$size": "medium"
				}, {
					"$layoutType": "tile",
					"$bgColor": "blue",
					"$items": [{
						"$bind": "testContextDashboard"
					}],
					"$size": "medium"
				}, {
					"$layoutType": "tile",
					"$bgColor": "purple",
					"$items": [{
						"$bind": "testPropertyHideShowDashboard"
					}],
					"$size": "small"
				}, {
					"$layoutType": "tile",
					"$bgColor": "lime",
					"$items": [{
						"$bind": "testGaugeChartDashboard"
					}],
					"$size": "small"
				}]
			}, {
				"$layoutType": "hubGroup",
				"$title": "SUPERV endpoint",
				"$items": [{
					"$layoutType": "tile",
					"$bgColor": "green",
					"$items": [{
						"$bind": "testSUPERVDashboard"
					}]
				}, {
					"$layoutType": "tile",
					"$bgColor": "teal",
					"$items": [{
						"$bind": "testGridDashboard"
					}]
				}]
			}, {
				"$layoutType": "hubGroup",
				"$title": "GX3APP endpoint",
				"$items": [{
					"$layoutType": "tile",
					"$bgColor": "blue",
					"$items": [{
						"$bind": "testGX3APPDashboard"
					}]
				}, {
					"$layoutType": "tile",
					"$bgColor": "teal",
					"$items": [{
						"$bind": "testGX3APPDashboard2"
					}]
				}]
			}, {
				"$layoutType": "hubGroup",
				"$title": "SYDEV endpoint",
				"$items": [{
					"$layoutType": "tile",
					"$bgColor": "magenta",
					"$items": [{
						"$bind": "testSyDevDashboard"
					}],
				}]
			}, {
				"$layoutType": "hubGroup",
				"$title": "Default endpoint",
				"$items": [{
					"$layoutType": "tile",
					"$bgColor": "red",
					"$items": [{
						"$bind": "testAQTACTNPDashboard"
					}]
				}, {
					"$layoutType": "tile",
					"$bgColor": "brown",
					"$items": [{
						"$bind": "testTypesDashboard2",
					}],
					"$size": "medium"
				}]
			}]
		}
	}
};

exports.gadgets = {
	"testLayoutsDashboard": {
		"$type": "$dashboard",
		"$title": "Layout tests",
		"$description": "Layout tests",
		"dashboardName": "testLayoutsDashboard"
	},
	"testTypesDashboard": {
		"$type": "$dashboard",
		"$title": "Datatype tests",
		"$description": "Datatype tests",
		"dashboardName": "testTypesDashboard"
	},
	"testTypesDashboard2": {
		"$type": "$dashboard",
		"$title": "Datatype AQTCRUD",
		"$description": "Datatype AQTCRUD",
		"dashboardName": "testTypesDashboard2"
	},
	"testFormatsDashboard": {
		"$type": "$dashboard",
		"$title": "Formats tests",
		"$description": "Formats tests",
		"dashboardName": "testFormatsDashboard"
	},
	"testGX3APPDashboard": {
		"$type": "$dashboard",
		"$title": "GX3APP tests",
		"$description": "GX3APP tests",
		"dashboardName": "testGX3APPDashboard"
	},
	"testSUPERVDashboard": {
		"$type": "$dashboard",
		"$title": "SUPERV tests",
		"$description": "SUPERV tests",
		"dashboardName": "testSUPERVDashboard"
	},
	"testChartsDashboard": {
		"$type": "$dashboard",
		"$title": "Charts tests",
		"$description": "Charts tests",
		"dashboardName": "testChartsDashboard"
	},
	"testSUPERVDashboard2": {
		"$type": "$dashboard",
		"$title": "AQMCRUD",
		"$description": "AQMCRUD default endpoint",
		"dashboardName": "testSUPERVDashboard2"
	},
	"testGX3APPDashboard2": {
		"$type": "$dashboard",
		"$title": "GX3APP Cost",
		"$description": "GX3APP Cost",
		"dashboardName": "testGX3APPDashboard2"
	},
	"testConstraintsDashboard": {
		"$type": "$dashboard",
		"$title": "SData constraints",
		"$description": "SData constraints",
		"dashboardName": "testConstraintsDashboard"
	},
	"testContextDashboard": {
		"$type": "$dashboard",
		"$title": "Dashboard with context",
		"$description": "Dashboard with context",
		"dashboardName": "testContextDashboard"
	},
	"testPropertyHideShowDashboard": {
		"$type": "$dashboard",
		"$title": "Property Hide Show",
		"$description": "Dashboard PropertyHideShow",
		"dashboardName": "testPropertyHideShowDashboard"
	},
	"testAQTACTNPDashboard": {
		"$type": "$dashboard",
		"$title": "AQTACTNP Create facet",
		"$description": "AQTACTNP Create facet",
		"dashboardName": "testAQTACTNPDashboard"
	},
	"testSyDevDashboard": {
		"$type": "$dashboard",
		"$title": "Sydev entities",
		"$description": "Sydev entities",
		"dashboardName": "testSyDevDashboard"
	},
	"testGaugeChartDashboard": {
		"$type": "$dashboard",
		"$title": "Test gauge chart",
		"$description": "Test gauge chart",
		"dashboardName": "testGaugeChartDashboard"
	},
	"testGridDashboard": {
		"$type": "$dashboard",
		"$title": "Test grid authoring",
		"$description": "Test grid authoring",
		"dashboardName": "testGridDashboard"
	}

};
});

define('syracuse-tablet/html/js/sdata/entities/test/testLayoutsDashboard',['require','exports','module'],function (require, exports, module) {

exports.dashboards = {
	"testLayoutsDashboard": {
		"$dashboardName": "testLayoutsDashboard",
		"$title": "Layout test dashboard",
		"$description": "Test different kinds of layouts",
		"$vignettes": {
			"testLayoutHubDashboard": {
				"$uuid": "testLayoutHubDashboard",
				"$displayStyle": "$link"
			},
			"testLayoutRowsDashboard": {
				"$uuid": "testLayoutRowsDashboard",
				"$displayStyle": "$link"
			},
			"testLongQuery": {
				"$uuid": "testLongQuery",
				"$displayStyle": "$link"
			},
			"testHubLayoutEntity": {
				"$uuid": "testHubLayoutEntity",
				"$displayStyle": "$link"
			}
		},
		"$article": {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$rowHeight": "150px",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testLayoutHubDashboard"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testLayoutRowsDashboard"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testLongQuery"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testHubLayoutEntity"
					}]
				}]
			}]
		}
	},
	"testLayoutHubDashboard": {
		"$dashboardName": "testLayoutHubDashboard",
		"$title": "Hub dashboard (scroll horizontal)",
		"$description": "Horizontal scrolling dashboard",
		"$vignettes": {
			"testDummyTile": {
				"$uuid": "testDummyTile",
				"$displayStyle": "$full"
			},
		},
		"$article": {
			"$layoutType": "hub",
			"$items": [{
				"$layoutType": "hubGroup",
				"$title": "Layout group 1",
				"$items": [{
					"$layoutType": "tile",
					"$bgColor": "lime",
					"$items": [{
						"$bind": "testDummyTile",
						"$article": {
							"$layoutType": "stack",
							"$items": [{
								"$bind": "name",
							}, {
								"$bind": "name",
								"$labelPosition": "left"
							}, {
								"$bind": "desc",
								"$labelPosition": "top"
							}, {
								"$bind": "desc2",
								"$labelPosition": "right"
							}, {
								"$bind": "desc2",
								"$labelAlign": "right"
							}, {
								"$bind": "amount",
								"$labelPosition": "bottom"
							}, {
								"$bind": "amount",
								"$isTitleHidden": true
							}]
						}
					}],
					"$size": "full" // as wide as a column, as high as the screen (rounded/snapped to the next "medium" size tile coordinates)
				}, {
					"$layoutType": "tile",
					"$bgColor": "purple",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "medium" // square, half the width of a column
				}, {
					"$layoutType": "tile",
					"$bgColor": "teal",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "small" // square, quarter size of a column
				}, {
					"$layoutType": "tile",
					"$items": [{
						"$bgColor": "lime",
						"$bind": "testDummyTile"
					}],
					"$size": "small"
				}, {
					"$layoutType": "tile",
					"$bgColor": "brown",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "small"
				}, {
					"$layoutType": "tile",
					"$bgColor": "pink",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "wide" // fill width of a column, and half the height of the width
				}, {
					"$layoutType": "tile",
					"$bgColor": "orange",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "large" // square, width and heigth as big as a column
				}]
			}, {
				"$layoutType": "hubGroup",
				"$title": "Layout group 2",
				"$items": [{
					"$layoutType": "tile",
					"$bgColor": "blue",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "medium",
				}, {
					"$layoutType": "tile",
					"$bgColor": "red",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "medium",
				}, {
					"$layoutType": "tile",
					"$bgColor": "green",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "medium",
				}]
			}, {
				"$layoutType": "hubGroup",
				"$title": "Layout group 3",
				"$items": [{
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "wide"
				}, {
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "medium"
				}, {
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "medium"
				}]
			}, {
				"$layoutType": "hubGroup",
				"$title": "Layout group 4",
				"$items": [{
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "large"
				}, {
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "medium"
				}, {
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "medium"
				}]
			}, {
				"$layoutType": "hubGroup",
				"$title": "Layout group 5",
				"$items": [{
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "wide"
				}, {
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "full"
				}, {
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "small"
				}, {
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "small",
				}, {
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "small"
				}, {
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "small"
				}, {
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testDummyTile"
					}],
					"$size": "small"
				}]
			}]
		}
	},
	"testLayoutRowsDashboard": {
		"$dashboardName": "testLayoutRowsDashboard",
		"$title": "Row layout dashboard (scroll vertical)",
		"$description": "Vertical scrolling dashboard",
		"$vignettes": {
			"testDummyTile": {
				"$uuid": "testDummyTile",
				"$displayStyle": "$full"
			},
			"testDummyTileLink": {
				"$uuid": "testDummyTile",
				"$displayStyle": "$link"
			},
		},
		"$article": {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$rowHeight": "100px",
				"$items": [{
					"$layoutType": "cell",
					"$widthLg": "3",
					"$widthSm": "6",
					"$widthXs": "12",
					"$widthMd": "4",
					"$items": [{
						"$bind": "testDummyTileLink",
						"$article": {}
					}]
				}, {
					"$layoutType": "cell",
					"$widthLg": "3",
					"$widthSm": "6",
					"$widthXs": "12",
					"$widthMd": "4",
					"$items": [{
						"$bind": "testDummyTileLink",
						"$article": {}
					}]
				}, {
					"$layoutType": "cell",
					"$widthLg": "3",
					"$widthSm": "6",
					"$widthXs": "12",
					"$widthMd": "4",
					"$items": [{
						"$bind": "testDummyTileLink",
						"$article": {}
					}]
				}, {
					"$layoutType": "cell",
					"$widthLg": "3",
					"$widthSm": "6",
					"$widthXs": "12",
					"$widthMd": "12",
					"$items": [{
						"$bind": "testDummyTileLink",
						"$article": {}
					}]
				}]
			}, {
				"$layoutType": "row",
				"$rowHeight": "200px",
				"$items": [{
					"$layoutType": "cell",
					"$widthLg": "6",
					"$widthSm": "6",
					"$widthXs": "12",
					"$items": [{
						"$bind": "testDummyTile",
						"$article": {
							"$layoutType": "stack",
							"$items": [{
								"$bind": "name"
							}, {
								"$bind": "desc"
							}, {
								"$bind": "desc2"
							}, {
								"$bind": "amount"
							}]
						}
					}]
				}, {
					"$layoutType": "cell",
					"$widthLg": "6",
					"$widthSm": "6",
					"$widthXs": "12",
					"$items": [{
						"$bind": "testDummyTile",
						"$article": {
							"$layoutType": "stack",
							"$items": [{
								"$bind": "name"
							}, {
								"$bind": "desc"
							}, {
								"$bind": "desc2"
							}, {
								"$bind": "amount"
							}]
						}
					}]
				}, {
					"$layoutType": "cell",
					"$items": [{
						"$widthLg": "3",
						"$widthSm": "4",
						"$widthXs": "12",
						"$bind": "testDummyTile",
						"$article": {
							"$layoutType": "stack",
							"$items": [{
								"$bind": "name"
							}, {
								"$bind": "desc"
							}, {
								"$bind": "desc2"
							}, {
								"$bind": "amount"
							}]
						}
					}]
				}, {
					"$layoutType": "cell",
					"$items": [{
						"$widthLg": "3",
						"$widthSm": "12",
						"$widthXs": "12",
						"$bind": "testDummyTile",
						"$article": {
							"$layoutType": "stack",
							"$items": [{
								"$bind": "name"
							}, {
								"$bind": "desc"
							}, {
								"$bind": "desc2"
							}, {
								"$bind": "amount"
							}]
						}
					}]
				}]
			}]
		}
	}
};

exports.gadgets = {
	"testLayoutHubDashboard": {
		"$type": "$dashboard",
		"$title": "Hub Layout tests",
		"$description": "Hub Layout tests",
		"dashboardName": "testLayoutHubDashboard"
	},
	"testLayoutRowsDashboard": {
		"$type": "$dashboard",
		"$title": "Rows Layout tests",
		"$description": "Rows Layout tests",
		"dashboardName": "testLayoutRowsDashboard"
	},
	"testDummyTile": {
		"$type": "$representation",
		"$title": "Dummy",
		"$description": "Dummy",
		"entity": "example",
		"action": "$details",
		"representation": "example",
		"facet": "$details",
		"keyParameter": "5"
	},
	"testLongQuery": {
		"$type": "$representation",
		"$title": "Long query",
		"$description": "Query",
		"entity": "example",
		"action": "$query",
		"representation": "example",
		"facet": "$query"
	},
	"testHubLayoutEntity": {
		"$type": "$representation",
		"$title": "Hub Layout on Representation",
		"$description": "Hub Layout on Representation",
		"entity": "exampleHubLayout",
		"action": "$details",
		"representation": "exampleHubLayout",
		"facet": "$details",
		"keyParameter": "5"
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testTypesDashboard',['require','exports','module'],function (require, exports, module) {

exports.dashboards = {
	"testTypesDashboard": {
		"$dashboardName": "testTypesDashboard",
		"$title": "Datatypes test dashboard",
		"$description": "Test different kinds of datatypes",
		"$vignettes": {
			"testLinkQueryRecord": {
				"$uuid": "testDisplayQueryRecord",
				"$displayStyle": "$link"
			},
			"testLinkDetailsRecord": {
				"$uuid": "testDisplayDetailsRecord",
				"$displayStyle": "$link"
			},
			"testLinkEditRecord": {
				"$uuid": "testDisplayEditRecord",
				"$displayStyle": "$link"
			},
			"testLinkCreateRecord": {
				"$uuid": "testDisplayCreateRecord",
				"$displayStyle": "$link"
			},
			"testDisplayQueryRecord": {
				"$uuid": "testDisplayQueryRecord",
				"$displayStyle": "$full"
			},
			"testDisplayDetailsRecord": {
				"$uuid": "testDisplayDetailsRecord",
				"$displayStyle": "$full"
			},
			"testDisplayEditRecord": {
				"$uuid": "testDisplayEditRecord",
				"$displayStyle": "$full"
			},
			"testDisplayCreateRecord": {
				"$uuid": "testDisplayCreateRecord",
				"$displayStyle": "$full"
			}
		},
		"$article": {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$rowHeight": "100px",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testLinkQueryRecord"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testLinkDetailsRecord"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testLinkEditRecord"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testLinkCreateRecord"
					}]
				}]
			}, {
				"$layoutType": "row",
				"$rowHeight": "300px",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testDisplayQueryRecord"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testDisplayDetailsRecord"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testDisplayEditRecord"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testDisplayCreateRecord"
					}]
				}]
			}]
		}
	}
};

exports.gadgets = {
	"testDisplayDetailsRecord": {
		"$type": "$representation",
		"$title": "Details facet",
		"entity": "testDataTypes",
		"action": "$details",
		"representation": "testDataTypes",
		"facet": "$details",
		"keyParameter": "5"
	},
	"testDisplayEditRecord": {
		"$type": "$representation",
		"$title": "Edit facet",
		"entity": "testDataTypes",
		"action": "$edit",
		"representation": "testDataTypes",
		"facet": "$edit",
		"keyParameter": "5"
	},
	"testDisplayCreateRecord": {
		"$type": "$representation",
		"$title": "Create facet",
		"entity": "testDataTypes",
		"action": "$create",
		"representation": "testDataTypes",
		"facet": "$create",
		"keyParameter": "5"
	},
	"testDisplayQueryRecord": {
		"$type": "$representation",
		"$title": "Query facet",
		"entity": "testDataTypes",
		"action": "$query",
		"representation": "testDataTypes",
		"facet": "$query",
		"keyParameter": "5"
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testTypesDashboard2',['require','exports','module'],function (require, exports, module) {

exports.dashboards = {
	"testTypesDashboard2": {
		"$dashboardName": "testTypesDashboard2",
		"$title": "AQTCRUD default endpoint",
		"$description": "AQTCRUD Representation",
		"$vignettes": {
			"testLinkQueryRecord2": {
				"$uuid": "testDisplayQueryRecord2",
				"$displayStyle": "$link"
			},
			"testLinkDetailsRecord2": {
				"$uuid": "testDisplayDetailsRecord2",
				"$displayStyle": "$link"
			},
			"testLinkEditRecord2": {
				"$uuid": "testDisplayEditRecord2",
				"$displayStyle": "$link"
			},
			"testLinkCreateRecord2": {
				"$uuid": "testDisplayCreateRecord2",
				"$displayStyle": "$link"
			},
			"testDisplayQueryRecord2": {
				"$uuid": "testDisplayQueryRecord2",
				"$displayStyle": "$full"
			},
			"testDisplayDetailsRecord2": {
				"$uuid": "testDisplayDetailsRecord2",
				"$displayStyle": "$full"
			},
			"testDisplayEditRecord2": {
				"$uuid": "testDisplayEditRecord2",
				"$displayStyle": "$full"
			},
			"testDisplayCreateRecord2": {
				"$uuid": "testDisplayCreateRecord2",
				"$displayStyle": "$full"
			}
		},
		"$article": {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$rowHeight": "100px",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testLinkQueryRecord2"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testLinkDetailsRecord2"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testLinkEditRecord2"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testLinkCreateRecord2"
					}]
				}]
			}, {
				"$layoutType": "row",
				"$rowHeight": "300px",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testDisplayQueryRecord2"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testDisplayDetailsRecord2"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testDisplayEditRecord2"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testDisplayCreateRecord2"
					}]
				}]
			}]
		}
	}
};

exports.gadgets = {
	"testDisplayDetailsRecord2": {
		"$type": "$representation",
		"$title": "Details facet",
		"entity": "AQTCRUD",
		"action": "$details",
		"representation": "AQTCRUD",
		"facet": "$details",
		"keyParameter": "10"
	},
	"testDisplayEditRecord2": {
		"$type": "$representation",
		"$title": "Edit facet",
		"entity": "AQTCRUD",
		"action": "$edit",
		"representation": "AQTCRUD",
		"facet": "$edit",
		"keyParameter": "10"
	},
	"testDisplayCreateRecord2": {
		"$type": "$representation",
		"$title": "Create facet",
		"entity": "AQTCRUD",
		"action": "$create",
		"representation": "AQTCRUD",
		"facet": "$create"
	},
	"testDisplayQueryRecord2": {
		"$type": "$representation",
		"$title": "Query facet",
		"entity": "AQTCRUD",
		"action": "$query",
		"representation": "AQTCRUD",
		"facet": "$query"
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testFormatsDashboard',['require','exports','module'],function (require, exports, module) {

exports.dashboards = {
	"testFormatsDashboard": {
		"$dashboardName": "testFormatsDashboard",
		"$title": "Formatting test dashboard",
		"$description": "Test different kinds of formats",
		"$vignettes": {
			"testFormatEditRecord": {
				"$uuid": "testFormatEditRecord",
				"$displayStyle": "$full"
			},
			"testFormatReferenceDetail": {
				"$uuid": "testFormatReferenceDetail",
				"$displayStyle": "$full"
			},
			"testFormatReferenceEdit": {
				"$uuid": "testFormatReferenceEdit",
				"$displayStyle": "$full"
			},
			"testFormatReferenceQuery": {
				"$uuid": "testFormatReferenceQuery",
				"$displayStyle": "$full"
			}
		},
		"$article": {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$rowHeight": "300px",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "4",
					"$items": [{
						"$bind": "testFormatEditRecord"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "4",
					"$items": [{
						"$bind": "testFormatReferenceDetail"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "4",
					"$items": [{
						"$bind": "testFormatReferenceEdit"
					}]
				}]
			}, {
				"$layoutType": "row",
				"$rowHeight": "300px",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "4",
					"$items": [{
						"$bind": "testFormatReferenceQuery"
					}]
				}]
			}]
		}
	}
};

exports.gadgets = {
	"testFormatEditRecord": {
		"$type": "$representation",
		"$title": "Details facet",
		"entity": "testFormats",
		"action": "$edit",
		"representation": "testFormats",
		"facet": "$edit",
		"keyParameter": "5"
	},
	"testFormatReferenceDetail": {
		"$type": "$representation",
		"$title": "Details facet reference fields",
		"entity": "testFormatsReference",
		"action": "$details",
		"representation": "testFormatsReference",
		"facet": "$details",
		"keyParameter": "5"
	},
	"testFormatReferenceEdit": {
		"$type": "$representation",
		"$title": "Edit facet reference fields",
		"entity": "testFormatsReference",
		"action": "$edit",
		"representation": "testFormatsReference",
		"facet": "$edit",
		"keyParameter": "5"
	},
	"testFormatReferenceQuery": {
		"$type": "$representation",
		"$title": "Query facet reference fields",
		"entity": "testFormatsReference",
		"action": "$query",
		"representation": "testFormatsReference",
		"facet": "$query",
		"keyParameter": "5"
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testGX3APPDashboard',['require','exports','module'],function (require, exports, module) {

exports.dashboards = {
	"testGX3APPDashboard": {
		"$dashboardName": "testGX3APPDashboard",
		"$title": "Display data from GX3APP",
		"$description": "Test different representations on GX3APP",
		"$vignettes": {
			"testACTIVQuery": {
				"$uuid": "testACTIVQuery",
				"$displayStyle": "$full"
			},
			"testRequestVEN085": {
				"$uuid": "testRequestVEN085",
				"$displayStyle": "$full"
			}
		},

		"$article": {
			"$layoutType": "hub",
			"$items": [{
				"$layoutType": "hubGroup",
				"$title": "Some data...",
				"$items": [{
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testACTIVQuery"
					}],
					"$size": "full"
				}]
			}, {
				"$layoutType": "hubGroup",
				"$title": "Some fancy chart",
				"$items": [{
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testRequestVEN085"
					}],
					"$size": "large"
				}]
			}]
		},
	}
};

exports.gadgets = {
	"testACTIVQuery": {
		"$type": "$representation",
		"$title": "Query ACTIV",
		"entity": "ACTIV",
		"action": "$query",
		"representation": "ACTIV",
		"endpoint": "x3.erp.GX3APP",
		"facet": "$query"
	},
	"testRequestVEN085": {
		"$type": "$request",
		"$title": "Request VEN085",
		"requestName": "VEN085",
		"requestLevel": "1",
		"action": "$query",
		"endpoint": "x3.erp.GX3APP",
		"facet": "$query"
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testSUPERVDashboard',['require','exports','module'],function (require, exports, module) {

exports.dashboards = {
	"testSUPERVDashboard": {
		"$dashboardName": "testSUPERVDashboard",
		"$title": "Display Query AQMCRUD",
		"$description": "Test different representation",
		"$vignettes": {
			"testAQMDEVICEQuery": {
				"$uuid": "testAQMDEVICEQuery",
				"$displayStyle": "$full"
			},
			"testAQMDEVICEQueryLink": {
				"$uuid": "testAQMDEVICEQuery",
				"$displayStyle": "$link"
			},
		},
		"$article": {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$rowHeight": "500px",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "6",
					"$items": [{
						"$bind": "testAQMDEVICEQuery"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "1",
					"$items": [{
						"$bind": "testAQMDEVICEQueryLink"
					}]
				}]
			}]
		}
	}
};

exports.gadgets = {
	"testAQMDEVICEQuery": {
		"$type": "$representation",
		"$title": "Query AQMCRUD",
		"entity": "AQMDEVICE",
		"action": "$query",
		"representation": "AQMCRUD",
		"facet": "$query"
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testChartsDashboard',['require','exports','module'],function (require, exports, module) {

exports.dashboards = {
	"testChartsDashboard": {
		"$dashboardName": "testChartsDashboard",
		"$title": "Display some charts",
		"$description": "Test different kind of charts",
		"$vignettes": {
			"testRequestChart": {
				"$uuid": "testRequestChart",
				"$displayStyle": "$full"
			}
		},

		"$article": {
			"$layoutType": "hub",
			"$items": [{
				"$layoutType": "hubGroup",
				"$title": "Big chart (!)",
				"$items": [{
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testRequestChart"
					}],
					"$size": "full",

					/* if this node is present, the layout of 
					 * the gadget is comming from this layout embedded in the dashbaord */
					"$article": {
						"$layoutType": "stack",
						"$items": [{
							"$bind": "$resources",
							"$isTitleHidden": true,
							"$style": "bar" // default = stick = colum = bar chart
						}]
					}
				}, {
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testRequestChart"
					}],
					"$size": "large",

					/* if this node is present, the layout of 
					 * the gadget is comming from this layout embedded in the dashbaord */
					"$article": {
						"$layoutType": "stack",
						"$items": [{
							"$bind": "$resources",
							"$isTitleHidden": true,
							"$style": "bar"
						}]
					}
				}]
			}, {
				"$layoutType": "hubGroup",
				"$title": "Bar charts",
				"$items": [{
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testRequestChart"
					}],
					"$size": "large",

					/* if this node is present, the layout of 
					 * the gadget is comming from this layout embedded in the dashbaord */
					"$article": {
						"$layoutType": "stack",
						"$items": [{
							"$bind": "$resources",
							"$isTitleHidden": true,
							"$style": "stick" // default = stick = colum = bar chart
						}]
					}
				}, {
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testRequestChart"
					}],
					"$size": "large",

					/* if this node is present, the layout of 
					 * the gadget is comming from this layout embedded in the dashbaord */
					"$article": {
						"$layoutType": "stack",
						"$items": [{
							"$bind": "$resources",
							"$isTitleHidden": true,
							"$style": "bar"
						}]
					}
				}]
			}, {
				"$layoutType": "hubGroup",
				"$title": "Line charts",
				"$items": [{
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testRequestChart"
					}],
					"$size": "large",

					/* if this node is present, the layout of 
					 * the gadget is comming from this layout embedded in the dashbaord */
					"$article": {
						"$layoutType": "stack",
						"$items": [{
							"$bind": "$resources",
							"$isTitleHidden": true,
							"$style": "line"
						}]
					}
				}, {
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testRequestChart"
					}],
					"$size": "large",

					/* if this node is present, the layout of 
					 * the gadget is comming from this layout embedded in the dashbaord */
					"$article": {
						"$layoutType": "stack",
						"$items": [{
							"$bind": "$resources",
							"$isTitleHidden": true,
							"$style": "area"
						}]
					}
				}]
			}, {
				"$layoutType": "hubGroup",
				"$title": "Spline charts",
				"$items": [{
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testRequestChart",
					}],
					"$size": "large",

					/* if this node is present, the layout of 
					 * the gadget is comming from this layout embedded in the dashbaord */
					"$article": {
						"$layoutType": "stack",
						"$items": [{
							"$bind": "$resources",
							"$isTitleHidden": true,
							"$style": "spline"
						}]
					}
				}, {
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testRequestChart"
					}],
					"$size": "large",

					/* if this node is present, the layout of 
					 * the gadget is comming from this layout embedded in the dashbaord */
					"$article": {
						"$layoutType": "stack",
						"$items": [{
							"$bind": "$resources",
							"$isTitleHidden": true,
							"$style": "areaspline"
						}]
					}
				}]
			}, {
				"$layoutType": "hubGroup",
				"$title": "Pie chart",
				"$items": [{
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testRequestChart"
					}],
					"$size": "large",

					/* if this node is present, the layout of 
					 * the gadget is comming from this layout embedded in the dashbaord */
					"$article": {
						"$layoutType": "stack",
						"$items": [{
							"$bind": "$resources",
							"$isTitleHidden": true,
							"$style": "pie"
						}]
					}
				}]
			}, {
				"$layoutType": "hubGroup",
				"$title": "Test different sizes/legends",
				"$items": [{
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testRequestChart"
					}],
					"$size": "large",

					/* if this node is present, the layout of 
					 * the gadget is comming from this layout embedded in the dashbaord */
					"$article": {
						"$layoutType": "stack",
						"$items": [{
							"$bind": "$resources",
							"$isTitleHidden": true,
							"$isLegendHidden": false,
							"$style": "line"
						}]
					}
				}, {
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testRequestChart"
					}],
					"$size": "large",

					/* if this node is present, the layout of 
					 * the gadget is comming from this layout embedded in the dashbaord */
					"$article": {
						"$layoutType": "stack",
						"$items": [{
							"$bind": "$resources",
							"$isTitleHidden": true,
							"$isLegendHidden": true,
							"$style": "line"
						}]
					}
				}, {
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testRequestChart"
					}],
					"$size": "wide",

					/* if this node is present, the layout of 
					 * the gadget is comming from this layout embedded in the dashbaord */
					"$article": {
						"$layoutType": "stack",
						"$items": [{
							"$bind": "$resources",
							"$isTitleHidden": true,
							"$isLegendHidden": true,
							"$isXLabelHidden": true,
							"$isYLabelHidden": true,
							"$isXLabelsHidden": true,
							"$isYLabelsHidden": true,
							"$style": "line"
						}]
					}
				}, {
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testRequestChart"
					}],
					"$size": "medium",

					/* if this node is present, the layout of 
					 * the gadget is comming from this layout embedded in the dashbaord */
					"$article": {
						"$layoutType": "stack",
						"$items": [{
							"$bind": "$resources",
							"$isTitleHidden": true,
							"$isLegendHidden": true,
							"$isXLabelHidden": true,
							"$isYLabelHidden": true,
							"$isXLabelsHidden": true,
							"$isYLabelsHidden": true,
							"$style": "bar"
						}]
					}
				}]
			}]
		},
	}
};

exports.gadgets = {
	"testRequestChart": {
		"$type": "$request",
		"$title": "Request test",
		"requestName": "testCharts",
		"requestLevel": "1",
		"action": "$query",
		"facet": "$query"
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testSUPERVDashboard2',['require','exports','module'],function (require, exports, module) {

exports.dashboards = {
	"testSUPERVDashboard2": {
		"$dashboardName": "testSUPERVDashboard2",
		"$title": "AQMCRUD default endpoint",
		"$description": "Test representation AQMCRUD",
		"$vignettes": {
			"testAQTCRUDQuery": {
				"$uuid": "testAQTCRUDQuery",
				"$displayStyle": "$full"
			},
			"testAQTCRUDQueryLink": {
				"$uuid": "testAQTCRUDQuery",
				"$displayStyle": "$link"
			},
		},
		"$article": {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$rowHeight": "500px",
				"$widthXs": "6,1",
				"$items": [{
					"$bind": "testAQTCRUDQuery"
				}, {
					"$bind": "testAQTCRUDQueryLink"
				}]
			}]
		}
	}
};

exports.gadgets = {
	"testAQTCRUDQuery": {
		"$type": "$representation",
		"$title": "Query AQMCRUD",
		"entity": "AQMCRUD",
		"action": "$query",
		"representation": "AQMCRUD",
		"facet": "$query"
	},
	"testAQTCRUDQueryLink": {
		"$type": "$representation",
		"$title": "Query 10 AQMCRUD",
		"requestName": "10",
		"requestLevel": "1",
		"action": "$query",
		"facet": "$query"
	}

};
});

define('syracuse-tablet/html/js/sdata/entities/test/testGX3APPDashboard2',['require','exports','module'],function (require, exports, module) {

exports.dashboards = {
	"testGX3APPDashboard2": {
		"$dashboardName": "testGX3APPDashboard2",
		"$title": "Display data from GX3APP",
		"$description": "Test PRPCOSTCTR representation on GX3APP",
		"$vignettes": {
			"testPRPCOSTCTRQuery": {
				"$uuid": "testPRPCOSTCTRQuery",
				"$displayStyle": "$full"
			}
		},

		"$article": {
			"$layoutType": "hub",
			"$items": [{
				"$layoutType": "hubGroup",
				"$title": "Some data Spending cost...",
				"$items": [{
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testPRPCOSTCTRQuery"
					}],
					"$size": "full"
				}]

			}]
		},
	}
};
exports.gadgets = {
	"testPRPCOSTCTRQuery": {
		"$type": "$representation",
		"$title": "Query PRPCOSTCTR",
		"entity": "PRPCOSTCTR",
		"action": "$query",
		"representation": "PRPCOSTCTR",
		"endpoint": "x3.erp.GX3APP",
		"facet": "$query"
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testConstraintsDashboard',['require','exports','module'],function (require, exports, module) {

exports.dashboards = {
	"testConstraintsDashboard": {
		"$dashboardName": "testConstraintsDashboard",
		"$title": "Constraints test dashboard",
		"$description": "Test SData constraints: https://github.com/Sage-ERP-X3/platform/wiki/Resource-Prototypes#type-constraints",
		"$vignettes": {
			"testConstraintsEditRecord": {
				"$uuid": "testConstraintsEditRecord",
				"$displayStyle": "$full"
			}
		},
		"$article": {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$rowHeight": "500px",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "12",
					"$items": [{
						"$bind": "testConstraintsEditRecord"
					}]
				}]
			}]
		}
	}
};

exports.gadgets = {
	"testConstraintsEditRecord": {
		"$type": "$representation",
		"$title": "Edit facet",
		"entity": "testConstraints",
		"action": "$edit",
		"representation": "testConstraints",
		"facet": "$edit",
		"keyParameter": "5"
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testNavigateToDashboard',['require','exports','module'],function (require, exports, module) {

exports.dashboards = {
	"testContextDashboard": {
		"$dashboardName": "testContextDashboard",
		"$title": "Test dashboard parameters",
		"$description": "Test navigation to a dashboard with parameters",
		"$vignettes": {
			"testRecordLinkToDashboard": {
				"$uuid": "testRecordLinkToDashboard",
				"$displayStyle": "$full"
			},
			"testRecordLinkToDashboardLink": {
				"$uuid": "testRecordLinkToDashboardLink",
				"$displayStyle": "$full"
			},
			"testRecordLinkToDashboardSUPERV": {
				"$uuid": "testRecordLinkToDashboardSUPERV",
				"$displayStyle": "$full"
			},
		},
		"$article": {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$rowHeight": "300px",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "4",
					"$items": [{
						"$bind": "testRecordLinkToDashboard"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "4",
					"$items": [{
						"$bind": "testRecordLinkToDashboardLink"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "4",
					"$items": [{
						"$bind": "testRecordLinkToDashboardSUPERV"
					}]
				}]
			}]
		}
	},
	"testContextDashboardChild": {
		"$dashboardName": "testContextDashboardChild",
		"$title": "Child dashboard",
		"$description": "Child dashboard getting parameters that are applied to the first to vignettes but not to the last one using the same representation to gather data",
		"$vignettes": {
			"testRecordWithContext1": {
				"$uuid": "testRecordWithContext",
				"$displayStyle": "$full"
			},
			"testRecordWithContext2": {
				"$uuid": "testRecordWithContext",
				"$displayStyle": "$full"
			},
			"testRecordWithoutContext": {
				"$uuid": "testRecordWithoutContext",
				"$displayStyle": "$full"
			},
		},
		"$article": {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$rowHeight": "500px",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "4",
					"$items": [{
						"$bind": "testRecordWithContext1"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "4",
					"$items": [{
						"$bind": "testRecordWithContext2"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "4",
					"$items": [{
						"$bind": "testRecordWithoutContext"
					}]
				}]
			}]
		}
	},
	"testContextDashboardChildSUPERV": {
		"$dashboardName": "testContextDashboardChildSUPERV",
		"$title": "Child dashboard",
		"$description": "Child dashboard getting parameters",
		"$vignettes": {
			"testRecordWithContextSUPERV": {
				"$uuid": "testRecordWithContextSUPERV",
				"$displayStyle": "$full"
			},
		},
		"$article": {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$rowHeight": "300px",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "12",
					"$items": [{
						"$bind": "testRecordWithContextSUPERV"
					}]
				}]
			}]
		}
	}

};

exports.gadgets = {
	"testRecordLinkToDashboard": {
		"$type": "$representation",
		"$title": "Click to navigate",
		"entity": "testNavigateTo",
		"action": "$query",
		"representation": "testNavigateTo",
		"facet": "$query"
	},
	"testRecordWithContext": {
		"$type": "$representation",
		"$title": "Click to navigate",
		"entity": "testNavigateToChild",
		"action": "$query",
		"representation": "testNavigateToChild",
		"facet": "$query",
		"parameters": {
			"where": {
				"value": "group eq '{group}'"
			}
		}
	},
	"testRecordLinkToDashboardLink": {
		"$type": "$dashboard",
		"$title": "Open dashboard w/o params",
		"dashboardName": "testContextDashboardChild"
	},
	"testRecordWithoutContext": {
		"$type": "$representation",
		"$title": "Click to navigate",
		"entity": "testNavigateToChild",
		"action": "$query",
		"representation": "testNavigateToChild",
		"facet": "$query"
	},
	"testRecordLinkToDashboardSUPERV": {
		"$type": "$representation",
		"$title": "Click to navigate",
		"entity": "AQMDEVICEM",
		"action": "$query",
		"representation": "AQMDEVICEM",
		"facet": "$query",
		"endpoint": "x3.erp.SUPERV"
	},
	"testRecordWithContextSUPERV": {
		"$type": "$representation",
		"$title": "Click to navigate",
		"entity": "AQMDEVICEM",
		"action": "$query",
		"representation": "AQMDEVICEM",
		"facet": "$query",
		"endpoint": "x3.erp.SUPERV",
		"parameters": {
			"where": {
				"value": "CODE eq {CODE}"
			}
		}
	},
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testPropertyHideShowDashboard',['require','exports','module'],function (require, exports, module) {

exports.dashboards = {
	"testPropertyHideShowDashboard": {
		"$dashboardName": "testPropertyHideShowDashboard",
		"$title": "PropertyHideShow test dashboard",
		"$description": "Test different kinds of PropertyHideShow",
		"$vignettes": {
			"testLinkQueryRecordHS": {
				"$uuid": "testDisplayQueryRecordHS",
				"$displayStyle": "$link"
			},
			"testLinkDetailsRecordHS": {
				"$uuid": "testDisplayDetailsRecordHS",
				"$displayStyle": "$link"
			},
			"testLinkEditRecordHS": {
				"$uuid": "testDisplayEditRecordHS",
				"$displayStyle": "$link"
			},
			"testLinkCreateRecordHS": {
				"$uuid": "testDisplayCreateRecordHS",
				"$displayStyle": "$link"
			},
			"testDisplayQueryRecordHS": {
				"$uuid": "testDisplayQueryRecordHS",
				"$displayStyle": "$full"
			},
			"testDisplayDetailsRecordHS": {
				"$uuid": "testDisplayDetailsRecordHS",
				"$displayStyle": "$full"
			},
			"testDisplayEditRecordHS": {
				"$uuid": "testDisplayEditRecordHS",
				"$displayStyle": "$full"
			},
			"testDisplayCreateRecordHS": {
				"$uuid": "testDisplayCreateRecordHS",
				"$displayStyle": "$full"
			}
		},
		"$article": {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$rowHeight": "100px",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testLinkQueryRecordHS"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testLinkDetailsRecordHS"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testLinkEditRecordHS"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testLinkCreateRecordHS"
					}]
				}]
			}, {
				"$layoutType": "row",
				"$rowHeight": "300px",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testDisplayQueryRecordHS"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testDisplayDetailsRecordHS"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testDisplayEditRecordHS"
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testDisplayCreateRecordHS"
					}]
				}]
			}]
		}
	}
};

exports.gadgets = {
	"testDisplayDetailsRecordHS": {
		"$type": "$representation",
		"$title": "Details facet",
		"entity": "testPropertyHideShow",
		"action": "$details",
		"representation": "testPropertyHideShow",
		"facet": "$details",
		"keyParameter": "5"
	},
	"testDisplayEditRecordHS": {
		"$type": "$representation",
		"$title": "Edit facet",
		"entity": "testPropertyHideShow",
		"action": "$edit",
		"representation": "testPropertyHideShow",
		"facet": "$edit",
		"keyParameter": "5"
	},
	"testDisplayCreateRecordHS": {
		"$type": "$representation",
		"$title": "Create facet",
		"entity": "testPropertyHideShow",
		"action": "$create",
		"representation": "testPropertyHideShow",
		"facet": "$create",
		"keyParameter": "5"
	},
	"testDisplayQueryRecordHS": {
		"$type": "$representation",
		"$title": "Query facet",
		"entity": "testPropertyHideShow",
		"action": "$query",
		"representation": "testPropertyHideShow",
		"facet": "$query",
		"keyParameter": "5"
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testAQTACTNPDashboard',['require','exports','module'],function (require, exports, module) {

exports.dashboards = {
	"testAQTACTNPDashboard": {
		"$dashboardName": "testAQTACTNPDashboard",
		"$title": "AQTACTNP Facet Create",
		"$description": "Test Facet Create AQTACTNP",
		"$vignettes": {
			"testAQTACTNPCreate": {
				"$uuid": "testAQTACTNPCreate",
				"$displayStyle": "$full"
			}
		},
		"$article": {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$rowHeight": "500px",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "6",
					"$items": [{
						"$bind": "testAQTACTNPCreate"
					}]
				}]
			}]
		}
	}
};

exports.gadgets = {
	"testAQTACTNPCreate": {
		"$type": "$representation",
		"$title": "Facet Create AQTACTNP",
		"entity": "AQTACTNP",
		"action": "$create",
		"representation": "AQTACTNP",
		"facet": "$create"
	}

};
});

define('syracuse-tablet/html/js/sdata/entities/test/testSyDevDashboard',['require','exports','module'],function (require, exports, module) {

exports.dashboards = {
	"testSyDevDashboard": {
		"$dashboardName": "testSyDevDashboard",
		"$title": "Display Query AQMCRUDM from SyDev",
		"$description": "Test different representations on SyDev",
		"$vignettes": {
			"testSyDev_QAQT02_Request": {
				"$uuid": "testSyDev_QAQT02_Request",
				"$displayStyle": "$full"
			}
		},
		"$article": {
			"$layoutType": "hub",
			"$items": [{
				"$layoutType": "hubGroup",
				"$items": [{
					"$layoutType": "tile",
					"$items": [{
						"$bind": "testSyDev_QAQT02_Request"
					}],
					"$size": "full"
				}]
			}]
		}
	}
};

exports.gadgets = {
	"testSyDev_QAQT02_Request": {
		"$type": "$request",
		"$title": "Request QAQT02",
		"requestName": "QAQT02",
		"requestLevel": "99",
		"action": "$query",
		"endpoint": "x3.erp.SYDEV",
		"facet": "$query"
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testGridDashboard',['require','exports','module'],function (require, exports, module) {

exports.dashboards = {
	"testGridDashboard": {
		"$dashboardName": "testGridDashboard",
		"$title": "Arrays - Test dashboard",
		"$description": "Arrays - Test dashboard",
		"$vignettes": {
			"testAQMDEVICEQueryGrid": {
				"$uuid": "testAQMDEVICEQueryGrid",
				"$displayStyle": "$full"
			},
			"testAQMDEVICEDetailGrid": {
				"$uuid": "testAQMDEVICEDetailGrid",
				"$displayStyle": "$full"
			}
		},
		"$article": {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$rowHeight": "385px",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "6",
					"$items": [{
						"$bind": "testAQMDEVICEQueryGrid",
						"$article": {
							"$layoutType": "stack",
							"$items": [{
								"$bind": "$resources",
								"$title": "QUERY - $display=table",
								"$display": "table",
								"$article": {
									"$items": [{
										"$bind": "CODE"
									}, {
										"$bind": "CODECHR"
									}, {
										"$bind": "TEXTDES0"
									}, {
										"$bind": "CUR_REF"
									}]
								}
							}]
						}
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "6",
					"$items": [{
						"$bind": "testAQMDEVICEQueryGrid",
						"$article": {
							"$layoutType": "stack",
							"$items": [{
								"$bind": "$resources",
								"$title": "QUERY - $display=cardH - $cardsPerLine=1 - $emptycell=filled",
								"$display": "cardV",
								"$cardsPerRow": 1,
								"$emptycell": "filled",
								"$article": {
									"$items": [{
										"$bind": "CODE"
									}, {
										"$bind": "CODECHR"
									}, {
										"$bind": "TEXTDES0"
									}, {
										"$bind": "CUR_REF"
									}]
								}
							}]
						}
					}]
				}]
			}, {
				"$layoutType": "row",
				"$rowHeight": "385px",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "6",
					"$items": [{
						"$bind": "testAQMDEVICEQueryGrid",
						"$article": {
							"$layoutType": "stack",
							"$items": [{
								"$bind": "$resources",
								"$title": "$display=cardV - $cardsPerRow=2 - $emptycell=filled",
								"$display": "cardV",
								"$cardsPerRow": 2,
								"$emptycell": "filled",
								"$article": {
									"$items": [{
										"$bind": "CODE"
									}, {
										"$bind": "CODECHR"
									}, {
										"$bind": "TEXTDES0"
									}, {
										"$bind": "CUR_REF"
									}]
								}
							}]
						}
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "6",
					"$items": [{
						"$bind": "testAQMDEVICEDetailGrid",
						"$article": {
							"$layoutType": "stack",
							"$items": [{
								"$bind": "CODE"
							}, {
								"$bind": "CPY_REF"
							}, {
								"$bind": "SITE_REF"
							}, {
								"$bind": "CRY_REF"
							}, {
								"$bind": "ADEVCOLREF1",
								"$display": "table",
								"$article": {
									"$items": [{
										"$bind": "~data~"
									}]
								}
							}, {
								"$bind": "ADEVCOLREF2",
								"$display": "table",
								"$article": {
									"$items": [{
										"$bind": "~data~"
									}]
								}
							}, {
								"$bind": "ADEVCTINT",
								"$display": "table",
								"$article": {
									"$items": [{
										"$bind": "~data~"
									}]
								}
							}, {
								"$bind": "ADEVADEVICEL",
								"$display": "table",
								"$article": {
									"$items": [{
										"$bind": "ADEV_ADEVICEL_CODE"
									}, {
										"$bind": "SUBCODE"
									}, {
										"$bind": "TEXTDES"
									}, {
										"$bind": "ADEV_TEXTAXX"
									}, {
										"$bind": "ADEV_SITE_REF"
									}, {
										"$bind": "ADEV_UNIT_REF"
									}, {
										"$bind": "STATE"
									}, {
										"$bind": "DIVERS"
									}, {
										"$bind": "ADEVADEVICELADEVICELL"
									}]
								}
							}, {
								"$bind": "ADEVADEVICEL",
								"$display": "cardV",
								"$article": {
									"$items": [{
										"$bind": "ADEV_ADEVICEL_CODE"
									}, {
										"$bind": "SUBCODE"
									}, {
										"$bind": "TEXTDES"
									}, {
										"$bind": "ADEV_TEXTAXX"
									}, {
										"$bind": "ADEV_SITE_REF"
									}, {
										"$bind": "ADEV_UNIT_REF"
									}, {
										"$bind": "STATE"
									}, {
										"$bind": "DIVERS"
									}, {
										"$bind": "ADEVADEVICELADEVICELL"
									}]
								}
							}]
						}

					}]
				}]
			}, {
				"$layoutType": "row",
				"$rowHeight": "385px",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "6",
					"$items": [{
						"$bind": "testAQMDEVICEQueryGrid",
						"$article": {
							"$layoutType": "stack",
							"$items": [{
								"$bind": "$resources",
								"$title": "$display=cardH - $cardsPerLine=1 - $emptycell=filled",
								"$cardsPerLine": 1,
								"$display": "cardH",
								"$emptycell": "filled",
								"$article": {
									"$items": [{
										"$bind": "CODE"
									}, {
										"$bind": "CODECHR"
									}, {
										"$bind": "TEXTDES0"
									}, {
										"$bind": "CUR_REF"
									}]
								}
							}]
						}
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "6",
					"$items": [{
						"$bind": "testAQMDEVICEQueryGrid",
						"$article": {
							"$layoutType": "stack",
							"$items": [{
								"$bind": "$resources",
								"$title": "$display=cardH - $cardsPerLine=3 - $emptycell=filled",
								"$cardsPerLine": 3,
								"$emptycell": "filled",
								"$display": "cardH",
								"$article": {
									"$items": [{
										"$bind": "CODE"
									}, {
										"$bind": "CODECHR"
									}, {
										"$bind": "TEXTDES0"
									}, {
										"$bind": "CUR_REF"
									}]
								}
							}]
						}
					}]
				}]
			}]
		}
	}
};

exports.gadgets = {
	"testAQMDEVICEQueryGrid": {
		"$type": "$representation",
		"$title": "Query AQMCRUD",
		"entity": "AQMDEVICE",
		"action": "$query",
		"representation": "AQMCRUDM",
		"facet": "$query"
	},
	"testAQMDEVICEDetailGrid": {
		"$type": "$representation",
		"$title": "Detail AQMCRUD",
		"entity": "AQMDEVICE",
		"action": "$details",
		"representation": "AQMCRUDM",
		"facet": "$details",
		"keyParameter": "1"
	}

};
});

define('syracuse-tablet/html/js/sdata/entities/test/testGaugeChartDashboard',['require','exports','module'],function (require, exports, module) {

exports.dashboards = {
	"testGaugeChartDashboard": {
		"$dashboardName": "testGaugeChartDashboard",
		"$title": "Gauge chart test dashboard",
		"$description": "Test different gauge charts authoring",
		"$vignettes": {
			"testGauge": {
				"$uuid": "testGauge",
				"$displayStyle": "$full"
			}
		},
		"$article": {
			"$layoutType": "stack",
			"$items": [{
				"$layoutType": "row",
				"$items": [{
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testGauge",
						$article: {
							$layoutType: "stack",
							$items: [{
								$bind: "salesOp",
								/* GAUGE 1 */
								$gauge: {}
							}]
						}
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testGauge",
						$article: {
							$layoutType: "stack",
							$items: [{
								$bind: "salesOp",
								/* GAUGE 2 */
								"$gauge": {
									"segments": [{
										"propStart": 0,
										"propEnd": 0.75
									}, {
										"propStart": 0.75,
										"propEnd": 0.85
									}, {
										"propStart": 0.85,
										"propEnd": 1
									}]
								}
							}]
						}
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testGauge",
						$article: {
							$layoutType: "stack",
							$items: [{
								$bind: "salesValue",
								/* GAUGE 3 */
								"$gauge": {
									"$bindMin": "salesValueMin",
									"$bindMax": "salesValueMax",
									"segments": [{
										"propStart": 0,
										"propEnd": 0.75
									}, {
										"propStart": 0.75,
										"propEnd": 0.85
									}, {
										"propStart": 0.85,
										"propEnd": 1
									}]
								}
							}]
						}
					}]
				}, {
					"$layoutType": "cell",
					"$widthXs": "3",
					"$items": [{
						"$bind": "testGauge",
						$article: {
							$layoutType: "stack",
							$items: [{
								$bind: "salesValue",
								/* GAUGE 4 */
								"$gauge": {
									"$bindMin": "salesValueMin",
									"$bindMax": "salesValueMax",
									"segments": [{
										"valStart": 100000,
										"valEnd": 130000,
										"color": "#DF5353"
									}, {
										"valStart": 130000,
										"valEnd": 140000
									}, {
										"valStart": 140000,
										"valEnd": 150000,
										"color": "#55BF3B"
									}]
								}
							}]
						}
					}]
				}]
			}]
		}
	}
};

exports.gadgets = {
	"testGauge": {
		"$type": "$representation",
		"$title": "Gauge 1",
		"entity": "testGaugeChart",
		"action": "$details",
		"representation": "testGaugeChart",
		"facet": "$details"
	}
};
});

define('syracuse-tablet/html/js/sdata/entities/test/testApplication',['require','exports','module','syracuse-tablet/html/js/sdata/entities/clientContract','syracuse-tablet/html/js/sdata/entities/test/example','syracuse-tablet/html/js/sdata/entities/test/exampleHubLayout','syracuse-tablet/html/js/sdata/entities/test/testDatatypes','syracuse-tablet/html/js/sdata/entities/test/testFormats','syracuse-tablet/html/js/sdata/entities/test/testFormatsReference','syracuse-tablet/html/js/sdata/entities/test/testCharts','syracuse-tablet/html/js/sdata/entities/test/testConstraints','syracuse-tablet/html/js/sdata/entities/test/testNavigateTo','syracuse-tablet/html/js/sdata/entities/test/testNavigateToChild','syracuse-tablet/html/js/sdata/entities/test/testPropertyHideShow','syracuse-tablet/html/js/sdata/entities/test/testGaugeChart','syracuse-tablet/html/js/sdata/entities/test/testHomeDashboard','syracuse-tablet/html/js/sdata/entities/test/testLayoutsDashboard','syracuse-tablet/html/js/sdata/entities/test/testTypesDashboard','syracuse-tablet/html/js/sdata/entities/test/testTypesDashboard2','syracuse-tablet/html/js/sdata/entities/test/testFormatsDashboard','syracuse-tablet/html/js/sdata/entities/test/testGX3APPDashboard','syracuse-tablet/html/js/sdata/entities/test/testSUPERVDashboard','syracuse-tablet/html/js/sdata/entities/test/testChartsDashboard','syracuse-tablet/html/js/sdata/entities/test/testSUPERVDashboard2','syracuse-tablet/html/js/sdata/entities/test/testGX3APPDashboard2','syracuse-tablet/html/js/sdata/entities/test/testConstraintsDashboard','syracuse-tablet/html/js/sdata/entities/test/testNavigateToDashboard','syracuse-tablet/html/js/sdata/entities/test/testPropertyHideShowDashboard','syracuse-tablet/html/js/sdata/entities/test/testAQTACTNPDashboard','syracuse-tablet/html/js/sdata/entities/test/testSyDevDashboard','syracuse-tablet/html/js/sdata/entities/test/testGridDashboard','syracuse-tablet/html/js/sdata/entities/test/testGaugeChartDashboard'],function (require, exports, module) {

var clientContract = require('syracuse-tablet/html/js/sdata/entities/clientContract');

var _example = require('syracuse-tablet/html/js/sdata/entities/test/example');
var _exampleHubLayout = require('syracuse-tablet/html/js/sdata/entities/test/exampleHubLayout');
var _testDatatypes = require('syracuse-tablet/html/js/sdata/entities/test/testDatatypes');
var _testFormats = require('syracuse-tablet/html/js/sdata/entities/test/testFormats');
var _testFormatsReference = require('syracuse-tablet/html/js/sdata/entities/test/testFormatsReference');
var _testCharts = require('syracuse-tablet/html/js/sdata/entities/test/testCharts');
var _testConstraints = require('syracuse-tablet/html/js/sdata/entities/test/testConstraints');
var _testNavigateTo = require('syracuse-tablet/html/js/sdata/entities/test/testNavigateTo');
var _testNavigateToChild = require('syracuse-tablet/html/js/sdata/entities/test/testNavigateToChild');
var _testPropertyHideShow = require('syracuse-tablet/html/js/sdata/entities/test/testPropertyHideShow');
var _testGaugeChart = require('syracuse-tablet/html/js/sdata/entities/test/testGaugeChart');

var _testHomeDashboard = require('syracuse-tablet/html/js/sdata/entities/test/testHomeDashboard');
var _testLayoutsDashboard = require('syracuse-tablet/html/js/sdata/entities/test/testLayoutsDashboard');
var _testTypesDashboard = require('syracuse-tablet/html/js/sdata/entities/test/testTypesDashboard');
var _testTypesDashboard2 = require('syracuse-tablet/html/js/sdata/entities/test/testTypesDashboard2');
var _testFormatsDashboard = require('syracuse-tablet/html/js/sdata/entities/test/testFormatsDashboard');
var _testGX3APPDashboard = require('syracuse-tablet/html/js/sdata/entities/test/testGX3APPDashboard');
var _testSUPERVDashboard = require('syracuse-tablet/html/js/sdata/entities/test/testSUPERVDashboard');
var _testChartsDashboard = require('syracuse-tablet/html/js/sdata/entities/test/testChartsDashboard');
var _testSUPERVDashboard2 = require('syracuse-tablet/html/js/sdata/entities/test/testSUPERVDashboard2');
var _testGX3APPDashboard2 = require('syracuse-tablet/html/js/sdata/entities/test/testGX3APPDashboard2');
var _testConstraintsDashboard = require('syracuse-tablet/html/js/sdata/entities/test/testConstraintsDashboard');
var _testNavigateToDashboard = require('syracuse-tablet/html/js/sdata/entities/test/testNavigateToDashboard');
var _testPropertyHideShowDashboard = require('syracuse-tablet/html/js/sdata/entities/test/testPropertyHideShowDashboard');
var _testAQTACTNPDashboard = require('syracuse-tablet/html/js/sdata/entities/test/testAQTACTNPDashboard');
var _testSyDevDashboard = require('syracuse-tablet/html/js/sdata/entities/test/testSyDevDashboard');
var _testGridDashboard = require('syracuse-tablet/html/js/sdata/entities/test/testGridDashboard');

var _testGaugeChartDashboard = require('syracuse-tablet/html/js/sdata/entities/test/testGaugeChartDashboard');

var _testApplication = {
	"$application": {
		"$uuid": "clientTestApplication",

		"applicationName": "clientTestApplication",
		"title": "Client test application",
		"description": "Application for testing client features without server dependencies",
		"iconName": "gears",

		"$homeDashboard": {
			"$uuid": "testHomeDashboard",
			"dashboardName": "testHomeDashboard"
		},
	},
	"$dashboards": {},
	"$gadgets": {},
	"$pages": {
		/*
		 * Example on how to define a default article for an X3 representation
		 * that is used in a client side defined application
		 */
		"x3.erp.SUPERV.AQMCRUD.$details": {
			"$page": {
				"$article": {
					"$layoutType": "stack",
					"$items": [{
						"$bind": "CODE"
					}, {
						"$bind": "PBLOB"
					}, {
						"$bind": "CODECHR"
					}, {
						"$bind": "WCUR_REF"
					}, {
						"$bind": "FLGTEST"
					}, {
						"$bind": "WMENU"
					}, {
						"$bind": "SIMUL1"
					}, {
						"$bind": "PCLOB"
					}, {
						"$bind": "TEXTAXX"
					}, {
						"$bind": "TEXTE"
					}, {
						"$bind": "TPOSIF"
					}, {
						"$bind": "CUR_REF"
					}, {
						"$bind": "SITE_REF"
					}, {
						"$bind": "TDCB2"
					}, {
						"$bind": "TDCB3",
						"$gauge": {}
					}, {
						"$bind": "TDCB"
					}, {
						"$bind": "TDATE"
					}, {
						"$bind": "UNIT_REF"
					}, {
						"$bind": "CRY_REF"
					}, {
						"$bind": "TEL"
					}, {
						"$bind": "EMAIL"
					}, {
						"$bind": "TEXTPLAIN"
					}, {
						"$bind": "TEXTHTML"
					}, {
						"$bind": "TEXTRTF"
					}, {
						"$bind": "CREUSR_REF"
					}, {
						"$bind": "UPDUSR_REF"
					}, {
						"$bind": "ADEVCOLREF1"
					}, {
						"$bind": "ADEVCOLREF2"
					}, {
						"$bind": "ADEVCTINT"
					}, {
						"$bind": "ADEVADEVICEL"
					}]
				}
			}
		}
	}
};

function _addToApp(app) {
	if (app.gadgets) {
		Object.keys(app.gadgets).forEach(function(key) {
			if (_testApplication.$gadgets[key]) {
				console.log("Duplicate gadget name: " + key);
			}
			_testApplication.$gadgets[key] = app.gadgets[key];
		});
	}
	if (app.dashboards) {
		Object.keys(app.dashboards).forEach(function(key) {
			if (_testApplication.$dashboards[key]) {
				console.log("Duplicate dashboard name: " + key);
			}
			_testApplication.$dashboards[key] = app.dashboards[key];
		});
	}
}

exports.register = function() {
	clientContract.registerEntity(_example.entity);
	clientContract.registerEntity(_exampleHubLayout.entity);

	clientContract.registerEntity(_testDatatypes.entity);
	clientContract.registerEntity(_testFormats.entity);
	clientContract.registerEntity(_testFormatsReference.entity);
	clientContract.registerEntity(_testCharts.entity);
	clientContract.registerEntity(_testConstraints.entity);
	clientContract.registerEntity(_testNavigateTo.entity);
	clientContract.registerEntity(_testNavigateToChild.entity);
	clientContract.registerEntity(_testPropertyHideShow.entity);
	clientContract.registerEntity(_testGaugeChart.entity);

	_addToApp(_testHomeDashboard);
	_addToApp(_testLayoutsDashboard);
	_addToApp(_testTypesDashboard);
	_addToApp(_testTypesDashboard2);
	_addToApp(_testFormatsDashboard);
	_addToApp(_testGX3APPDashboard);
	_addToApp(_testSUPERVDashboard);
	_addToApp(_testChartsDashboard);
	_addToApp(_testSUPERVDashboard2);
	_addToApp(_testGX3APPDashboard2);
	_addToApp(_testConstraintsDashboard);
	_addToApp(_testNavigateToDashboard);
	_addToApp(_testPropertyHideShowDashboard);
	_addToApp(_testAQTACTNPDashboard);
	_addToApp(_testSyDevDashboard);
	_addToApp(_testGaugeChartDashboard);
	_addToApp(_testGridDashboard);

	clientContract.registerApp(_testApplication);
};
});

define('syracuse-tablet/html/js/sdata/entities/welcomeApplication',['require','exports','module','syracuse-tablet/html/js/sdata/entities/clientContract','syracuse-tablet/html/js/helpers/globals'],function (require, exports, module) {

var clientContract = require('syracuse-tablet/html/js/sdata/entities/clientContract');
var globals = require('syracuse-tablet/html/js/helpers/globals');

var _welcomeApplication = {
	"$application": {
		"$uuid": "$welcomeApplication",

		"applicationName": "$welcomeApplication",
		"title": "Welcome",
		"description": "Welcome",
		"iconName": "gears",

		"$homeDashboard": {
			"$uuid": "$welcomeDashboard",
			"dashboardName": "$welcomeDashboard"
		},
	},
	"$dashboards": {
		"$welcomeDashboard": {
			"$pageInfo": {
				// Don't remove it - used to identify application welcome page
				"isWelcomePage": true,
				"disableAuthoring": true
			},
			"$update": function(dashboard, appMetaData) {
				return _updateWelcomeDashboard(dashboard, appMetaData);
			},
			"$dashboardName": "$welcomeDashboard",
			"$title": "Welcome",
			"$description": "Welcome, this is your personal dashboard",
		}
	},
	"$gadgets": {
		"testLayoutsDashboard": {
			"$type": "$representation",
			"$title": "Query facet",
			"entity": "testDataTypes",
			"action": "$query",
			"representation": "testDataTypes",
			"facet": "$query",
			"keyParameter": "5"
		}
	}
};

/* we pass appMetaData as parameter to allow $update to refresh it (original appMetaData has been cloned) - see getAppDetail*/
function _updateWelcomeDashboard(dashboard, appMetaData) {
	dashboard.$vignettes = {
		"testLayoutsDashboard": {
			"$uuid": "testLayoutsDashboard",
			"$displayStyle": "$link"
		}
	};

	appMetaData.$gadgets = {};
	dashboard.$vignettes = {};
	dashboard.$article = {
		"$layoutType": "hub",
		"$items": [{
			"$layoutType": "hubGroup",
			"$title": "Applications",
			"$items": []
		}]
	};

	globals.forEachApplicationJson(function(appName, appInfo) {
		if (appInfo.applicationName !== appMetaData.$application.applicationName) {
			var name = "$welcome_" + appInfo.applicationName;
			var gadget = {
				"$type": "$application",
				"$title": appInfo.title,
				"applicationName": appInfo.applicationName
			};

			var vignette = {
				"$uuid": name
			};
			appMetaData.$gadgets[name] = gadget;
			dashboard.$vignettes[name] = vignette;
			dashboard.$article.$items[0].$items.push({
				$layoutType: "tile",
				$items: [{
					$bind: name
				}],
				$size: "wide"
			});
		}
	});
	return dashboard;
}

exports.register = function() {
	clientContract.registerApp(_welcomeApplication);
};
});

define('syracuse-tablet/html/js/init/initModules',['require','exports','module','syracuse-tablet/html/js/helpers/utils','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/locale','syracuse-tablet/html/js/application/appFactory','syracuse-tablet/html/js/application/appFactoryDeps','syracuse-tablet/html/js/controls/ctrlFactoryDeps','syracuse-tablet/html/js/ajax/ajax','syracuse-tablet/html/js/storage/storage','syracuse-tablet/html/js/sdata/sdataCache','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/ui/modal','syracuse-tablet/html/js/sdata/entities/test/testApplication','syracuse-tablet/html/js/sdata/entities/welcomeApplication'],function (require, exports, module) {

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var factory = require('syracuse-tablet/html/js/application/appFactory');
var appFactoryDeps = require('syracuse-tablet/html/js/application/appFactoryDeps');
var ctrlFactoryDeps = require('syracuse-tablet/html/js/controls/ctrlFactoryDeps');

var ajax = require('syracuse-tablet/html/js/ajax/ajax');
var storage = require('syracuse-tablet/html/js/storage/storage');
var sdataCache = require('syracuse-tablet/html/js/sdata/sdataCache');

var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var modal = require('syracuse-tablet/html/js/ui/modal');

//fully client side configured application to add tests later
var testApplication = require('syracuse-tablet/html/js/sdata/entities/test/testApplication');
var welcomeApplication = require('syracuse-tablet/html/js/sdata/entities/welcomeApplication');

exports.init = function() {
	var st;
	var cache;
	var deferred = new $.Deferred();

	st = storage.getStorage();
	st.init()
		.then(function() {
			cache = new sdataCache.SDataCache(st);
		})
		.then(function() {
			globals.init(true, st, cache, utils);
		})
		.then(function() {
			return appFactoryDeps.init();
		})
		.then(function() {
			return ctrlFactoryDeps.init();
		})
		.then(function() {
			ajax.init({}, locale);
		})
		.then(function() {
			welcomeApplication.register();
		})
		.then(function() {
			if (globals.isDvlpMode()) {
				testApplication.register();
			}
		})
		.then(function() {
			var app = factory.createApplication($("#s-m-app-id"));
			globals.setTabletApplication(app);

			globals.setModal(modal);
		})
		.then(function() {
			uiutils.triggerResizeInternal();
		})
		.then(function() {
			deferred.resolve();
		}).fail(function(e) {
			deferred.reject(e);
		});

	return deferred.promise();
};
});

define('syracuse-tablet/html/js/init/initLogin',['require','exports','module','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/application/authentication','syracuse-tablet/html/js/helpers/locale','syracuse-tablet/html/js/ui/modal','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/notifications','syracuse-tablet/html/js/sdata/sdataCommonResources','syracuse-tablet/html/js/init/initContext'],function (require, exports, module) {

var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var auth = require('syracuse-tablet/html/js/application/authentication');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var modal = require('syracuse-tablet/html/js/ui/modal');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var sdataCommonRes = require('syracuse-tablet/html/js/sdata/sdataCommonResources');

var initContext = require('syracuse-tablet/html/js/init/initContext');

var _gotoLogin = function(reason) {
	globals.getApplication().gotoLogin(reason);
};
/**
 * Set the context according to userProfile
 * Initialize the context and call initContext.init that notifies application that context has changed (display welcome app page)
 */
var _loginHandler = {
	// deferred is used to propagate error to the caller (login page) to display error message in asynchronous process
	// !! only one object that has been notify should resolve/reject the deferred
	notifLogin: function(userProfile, deferred) {
		var _fail = function(e) {
			if (deferred) {
				// We must resolve/reject the deferred if not null
				deferred.reject(e);
			} else {
				modal.error("notifLogin failed", e);
			}
		};
		try {
			var userCtx = {
				"$user": userProfile.user.$value,
				"$role": userProfile.selectedRole.code,
				"$lang": userProfile.selectedLocale.code
			};
			globals.setUserCtx(userCtx);
			globals.setUserProfile(userProfile);
			locale.setUserLocales(userProfile && userProfile.user && userProfile.user.locales);
			initContext.init(false, false)
				.then(function() {
					// We must resolve/reject the deferred if not null
					if (deferred) deferred.resolve();
				}).fail(function(e) {
					_fail(e);
				});
		} catch (e) {
			_fail(e);
		}
	}
};


exports.init = function() {
	notifications.subscribe(_loginHandler, ["sm.login"], 1);

	try {
		uiutils.waitWheelStart();
		return auth.check()
			.then(function(status) {
				if (status.authenticated === true) {
					return sdataCommonRes.getUserProfile();
				} else {
					return null;
				}
			})
			.then(function(profile) {
				uiutils.waitWheelStop();
				if (profile) {
					notifications.publish("sm.login", profile);
				} else {
					_gotoLogin("Please enter your credentials");
				}
				return $.smResolve();
			}).fail(function(e) {
				uiutils.waitWheelStop();
				auth.logout().then(function() {
					_gotoLogin("Please try login again");
				}).fail(function(e) {
					modal.error("exports.init failed", e);
				});
			});
	} catch (e) {
		_gotoLogin("Javascript exception");
		return $.smResolve();
	}
};
});

define('syracuse-tablet/html/js/main',['require','exports','module','syracuse-tablet/html/js/ui/modal','syracuse-tablet/html/js/ui/uiUtils','syracuse-tablet/html/js/helpers/globals','syracuse-tablet/html/js/helpers/jsutils','syracuse-tablet/html/js/init/initStyles','syracuse-tablet/html/js/init/initLocale','syracuse-tablet/html/js/init/initModules','syracuse-tablet/html/js/init/initLogin'],function (require, exports, module) {

//Initialization Sage Mobile jQuery plugins and native prototype object  (add method)
var modal = require('syracuse-tablet/html/js/ui/modal');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

var initStyles = require('syracuse-tablet/html/js/init/initStyles');
var initLocale = require('syracuse-tablet/html/js/init/initLocale');
var initModules = require('syracuse-tablet/html/js/init/initModules');
var initLogin = require('syracuse-tablet/html/js/init/initLogin');

window.onerror = function(errorMsg, url, lineNumber, error) {
	if (globals.application) {
		globals.application.waitWheelStop();
	} else {
		uiutils.waitWheelStop();
	}
	try {
		modal.error("Javascript error", {
			where: "window.onerror",
			exception: error,
			message: errorMsg + "\n" + (url ? "Url : " + jsutils.cleanStack(url) + "\nLineNumber : " + lineNumber : "")
		});
	} catch (e) {
		var msg = errorMsg + "\n" + (error ? +JSON.stringify(error, null, 2) : (url ? "Url : " + url + "\nLineNumber : " + lineNumber : ""));
		alert(msg);
	}
};

function _startup() {
	return initStyles.init()
		.then(function() {
			return initLocale.init();
		})
		.then(function() {
			return initModules.init();
		})
		.then(function() {
			return initLogin.init();
		}).fail(function(e) {
			modal.error("_startup error", e);
		});
}

$(document).ready(function() {
	if (document.location.href.indexOf("?circular") > -1) {
		xrayquire.showCycles(undefined, true);
	} else {
		_startup();
	}
});
});

