"use strict";


var environment = require('syracuse-tablet/html/js/helpers/environment');
var modules = require('syracuse-tablet/html/js/common/modules');
var controllerModule = require("syracuse-tablet/html/js/controllers/controller");
var siteLayout = require('syracuse-tablet/html/js/ui/siteLayout');

/**
 * Event model
 * 
 * DOM elements that want to make use of the event listener need to put data-nevent attribute
 * Whenever an event is raised, the closest element with data-nevent attribute is checked for
 * additional information (name of sdata-link or action) on how to handle the event.
 * 
 * The event is always dispatched to a control, the control is discovered by finding the closest DOM
 * element of the data-nevent element having a s-m-ctrl class
 * 
 * To be able to get the control object, the controller is discovered by finding the closest DOM
 * element of the s-m-ctrl element having a data-controller-id attribute
 * 
 * Like this, a control can have many different events/actions defined in the DOM (see below)
 * but handle them all in one control
 * 
 * <section data-controller-id="59"> 	
 *   <div class="s-m-ctrl" id="page438">
 *     <a href="#" data-nevent="" data-naction="home">
 *     <a href="#" data-nevent="" data-naction="pinPage">
 *     
 *     <a href="#" data-nevent="" data-sdata-action-name="$save">
 *     <a href="#" data-nevent="" data-sdata-link-name="$details">
 *     
 *     <a href="#" data-nevent="" data-sdata-link-name="$lookup" data-sdata-link-bind="CUR_REF">

 *     <a href="#" data-nevent="" data-nevent-ctrl-change="">
 *   </div>
 * </section> 
 * 
 */


/**
 * New event listener will catch everything 
 */
exports.registerEvents = function($$container) {

	$(window).on("resize", siteLayout.onWindowResize);
	if (environment.isMobile()) {
		// JQuery mobile helpers that provides Orientationchanged better than we can do
		$.event.special.orientationchange.setup();
		$(window).on("orientationchange", siteLayout.onWindowOrientation);
	}
	// Resize triggered internally
	$(window).on("resizeInternal", siteLayout.onWindowResizeInteral);

	// History management
	$(window).bind("popstate", function(event) {
		var state = event.originalEvent.state;
		// We've to check state to not call historyPop on click on href="#"
		// FIREFOX
		//		Previous fix #8072 - old code was  if (state || /Firefox/.test(navigator.userAgent)) {app.historyPop}
		//			FF was trigering only one event with null state on back
		//	    After fix #8072
		//			Now FF seems to trigger only one event with state != null except when we open the mobile client from another tab with window.open (like does the desktop)
		//			If the client is opened with window.open, the first click in the breadcrum or first back generates popstate with null state  (??)
		//			So the code below fixes this bug and works for all browsers FF
		// CHROME
		// 		When we click back 2 events are triggered (one with state == null that we skip)
		// IE
		// 		When we click back one event is triggered with state != null like FF
		if (state) {
			modules.get("appController").App.onBrowserBackButton(event);
		} else {
			event.preventDefault();
		}
	});

	// General click handler
	$$container.on("click", "[data-nevent]:not(.disabled)", function(e) {
		// Avoid double click - $$target is disabled 300ms to not trigger 2 actions
		var $$target = $(e.target).attr("disabled", true);
		_eventHandler(e, "click");
		setTimeout(function() {
			$$target.removeAttr("disabled")
		}, 300)
	});

	// Whenever a control registers to catch low level events for UX (e.g. blur)
	//!! no data-nevent on data-nevent-ctrl because there's a conflict with click (we do'nt want click to be handled)
	//!! Put data-nevent-ctrl-click to call onClick Method
	var events = ["blur", "focus", "change", "click"];
	events.forEach(function(event) {
		$$container.on(event, "[data-nevent-ctrl-" + event + "]:not(.disabled)", function(e) {
			_eventHandler(e, event);
		});
	});
}

/**
 * The way actions/links are processed doesn't include the original event in parameters (needed depending on the process)
 * It should have been propagated as first parameter (too hard to do the changes)
 * currentEvent stores the last event to make event available
 */
exports.currentEvent;
/**
 * 
 * @param event
 */
function _eventHandler(event, eventName) {
	exports.currentEvent = event;

	var type = eventName;
	var $$target = $(event.target);
	var controlRequest = false;

	var $$nevent;
	if ($$target.attr("data-nevent") != null) {
		$$nevent = $$target;
	} else if ($$target.attr("data-nevent-ctrl-" + type) != null) {
		$$nevent = $$target;
		controlRequest = true;
	} else {
		$$nevent = $$target.closest("[data-nevent]");
	}

	var $$ctrl;
	if ($$nevent.hasClass("s-m-ctrl")) {
		$$ctrl = $$nevent;
	} else {
		$$ctrl = $$nevent.closest(".s-m-ctrl");
	}
	// $$nevent controller overrides the one of $$ctrl
	// E.g: Inside a panel control we can add multiple controllers to control sub-panels (footer/Header multi-selection)
	var $$controller = $$nevent.is("[data-controller-id]") ? $$nevent : $$ctrl.is("[data-controller-id]") ? $$ctrl : $$ctrl.closest("[data-controller-id]");
	var controllerId = $$controller.attr("data-controller-id");

	var controller = controllerId && controllerModule.findController(controllerId)
	var ctrlId = $$ctrl.attr("id");

	var ctrl = ctrlId && controller && controller.getControlForEvent(ctrlId, type);

	// This is true whenever a control requests to handle a low level event like "blur" itself and not
	// want to interact with the controller
	var handled = false;
	if (controlRequest && ctrl) {
		// Usually, the control handles the raw-event like onClick, onChange, ...
		// if there is a data-naction attribute, the control does not receive a raw event
		// but pre-parsed information in an _act... function
		var dataAction = $$nevent.attr("data-naction")

		var method = "on" + type.smCapitalize();
		var func = ctrl[method];
		var args = [];
		var params;
		if (dataAction && $$nevent.is("select")) { // data-naction on select will send selected value to _act function
			method = "_act" + dataAction.smCapitalize();
			func = ctrl[method];
			params = $$nevent.val();
			if (params && typeof params === "string") {
				params = params.split(',');
				params.forEach(function(p, idx) {
					args.push(p.trim());
				});
			}
		} else {
			// Send raw event to control since there is no data-naction attribute
			args.push(event);
		}
		if (func) {
			handled = func.apply(ctrl, args);
		}
		if (handled) {
			// If low level events are handled by a control, the handler function can return true to stop processing or return
			// false to continue processing the event in the event handler further on.
			// In the first case, the control is responsible for stopping propagation etc. by doing:		
			// event.preventDefault();
			// event.stopPropagation();
			// Usage can be: Panel can have onClick to catch the click to close itself but the execution of the link is done in here
			return;
		}
	}

	// If not handled by a control explicitly, we check if it can be handled in a generic way

	if (type !== "click") { // We only handle click events further on
		return;
	}

	if (ctrl && controller) { // data related actions are only triggered if there was a control and controller found attached to the event
		// Did we click an sdata link?
		var $linkName = $$nevent.attr("data-sdata-link-name");
		var $linkBind = $$nevent.attr("data-sdata-link-bind");
		if ($linkName) {
			if (ctrl.onSdataLinkClicked) {
				ctrl.onSdataLinkClicked($linkName, $linkBind);
			} else if (controller.onSdataLinkClicked) {
				controller.onSdataLinkClicked($linkName, $linkBind);
			}
			/**
			 * No event.preventDefault/event.stopPropagation in order to let event bubbles to other components
			 * -> A bootstrap dropDownList is closed when we click outside the panel. if we trap the event here and event.stopPropagation dropDown stays open
			 * -> E.g: dropDownList in multi-selection header/footer
			 * event.preventDefault();
			 * event.stopPropagation();
			 */
			return;
		}

		// Did we click an sdata action?
		var $actionName = $$nevent.attr("data-sdata-action-name");
		if ($actionName) {
			if (ctrl.onSdataActionClicked) { // It's very unlikely a control will ever handle this because actions are page level events
				ctrl.onSdataActionClicked($actionName);
			} else if (controller.onSdataActionClicked) {
				controller.onSdataActionClicked($actionName);
			}
			/**
			 * No event.preventDefault/event.stopPropagation in order to let event bubbles to other components
			 * -> A bootstrap dropDownList is closed when we click outside the panel. if we trap the event here and event.stopPropagation dropDown stays open
			 * -> E.g: dropDownList in multi-selection header/footer
			 * event.preventDefault();
			 * event.stopPropagation();
			 */
			return;
		}
	}
	var dataAction = $$nevent.attr("data-naction");
	if (dataAction) {
		var args = [];
		var tmp = $.camelCase("-" + dataAction);
		if (tmp.indexOf("-") === 0) {
			tmp = tmp.substr(1);
		}
		var method = "_act" + tmp;
		var objectToCall;
		if (ctrl && ctrl[method]) {
			objectToCall = ctrl;
		} else if (ctrl && ctrl.onDataActionClicked) {
			args.push(dataAction);
			method = "onDataActionClicked";
			objectToCall = ctrl;
		} else if (controller && controller[method]) {
			objectToCall = controller;
		} else if (controller && controller.onDataActionClicked) {
			args.push(dataAction);
			method = "onDataActionClicked";
			objectToCall = controller;
		} else {
			var navStack = modules.get("navStack").findClosest($$nevent);
			var page = navStack && navStack.getTopPage();
			if (page && page[method]) {
				objectToCall = page;
			} else {
				var app = modules.get("appController").App;
				if (app && app[method]) {
					objectToCall = app;
				}
			}
		}
		if (objectToCall && method) {
			var dataParams = $$nevent.attr("data-params") || "";
			// Create a array of parameters with ','  as separator
			// Used to pass multiple parameters  data-params="filterSelected,{{id}}"
			dataParams = dataParams.split(',');
			dataParams.forEach(function(p, idx) {
				// Remove leading/trailing spaces
				args.push(p.trim());
			});
			// adds event as last parameter because it can be useful
			args.push(event);
			objectToCall[method].apply(objectToCall, args);
		}
		/**
		 * No event.preventDefault/event.stopPropagation in order to let event bubbles to other components
		 * -> A bootstrap dropDownList is closed when we click outside the panel. if we trap the event here and event.stopPropagation dropDown stays open
		 * -> E.g: dropDownList in multi-selection header/footer
		 * event.preventDefault();
		 * event.stopPropagation();
		 */
		return;
	}
}

/**
 * DOM attributes to set for identifying a data action (usually something handled by the client only)
 */
exports.getDataActionAttrs = function(controllerId, action, params, asHtml) {
	var attrs = {
		"href": "#",
		"data-nevent": "",
		"data-controller-id": controllerId,
		"data-naction": action,
		"data-params": params
	};
	return asHtml ? _objectToHtmlAttrs(attrs) : attrs;
};

/**
 * DOM attributes to set for identifying an sdata link
 */
exports.getSdataLinkAttrs = function(controllerId, $linkName, $bind, asHtml) {
	var attrs = {
		"href": "#",
		"data-nevent": "",
		//		Not used yet, controller is also found going up the DOM
		//	    Can be used later if DOM parent is not the controller of this control		
		//		"data-controller-id": controllerId,
		"data-sdata-link-name": $linkName,
		"data-sdata-link-bind": $bind // Optional for field level links
	};
	return asHtml ? _objectToHtmlAttrs(attrs) : attrs;
};

/**
 * DOM attributes to set for identifying an sdata action
 */
exports.getSdataActionAttrs = function(controllerId, $actionName, asHtml) {
	var attrs = {
		"href": "#",
		"data-nevent": "",
		//		Not used yet, controller is also found going up the DOM
		//	    Can be used later if DOM parent is not the controller of this control		
		//		"data-controller-id": controllerId,
		"data-sdata-action-name": $actionName
	};
	return asHtml ? _objectToHtmlAttrs(attrs) : attrs;
};

function _objectToHtmlAttrs(obj) {
	var html;
	for (var attr in obj) {
		var val = obj[attr];
		if (val === null) {
			continue;
		}
		if (val !== "") {
			//TODO: Escape val?
			val = '="' + val + '"';
		}

		if (!html) {
			html = attr + val;
		} else {
			html += ' ' + attr + val;
		}
	}
	return html;
}