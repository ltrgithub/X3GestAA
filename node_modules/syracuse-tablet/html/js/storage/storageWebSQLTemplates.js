"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var storageInterface = require('syracuse-tablet/html/js/storage/storageInterface');
var Base = require('syracuse-tablet/html/js/storage/storageWebSQLDrafts').Klass;
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("templates", false);
/**
 * WebSQL storage interface - TEMPLATES MANAGEMENT
 * Inherits from storageWebSQLSData only to split the code
 */

var _TMPL_INSERT = "INSERT INTO sdata_templates (id, endpoint, representation, title, dataSet, creation_date) values (?, ?, ?, ?, ?, ?)";
var _TMPL_DELETE_ALL = "DELETE FROM sdata_templates";
var _TMPL_DELETE = "DELETE FROM sdata_templates where id = ?";
var _TMPL_READ = "SELECT * FROM sdata_templates where id = ?";
var _TMPL_QUERY = "SELECT id, endpoint, representation, title, creation_date FROM sdata_templates";
var _TMPL_COUNT = "SELECT COUNT(*) AS counter FROM sdata_templates";
var _tables = {
	"sdata_templates": [
		"DROP TABLE IF EXISTS sdata_templates",
		"CREATE TABLE sdata_templates ( " +
		"id text, " +
		"endpoint text, " +
		"representation text, " +
		"title text, " +
		"dataSet text, " +
		"creation_date text" +
		")",
		"DROP INDEX IF EXISTS sdata_templates",
		"CREATE UNIQUE INDEX sdata_templates_id ON sdata_templates (id)"
	]
};

var _logError = function(title, status) {
	log && log(title + " ERROR");
	log && log(storageInterface.resultToString(status));
};
/**
 * Manages templates (edit/create facets) storage
 */
var _Klass = utils.defineClass(
	function() {
		Base.call(this);
	}, Base, {
		getTables: function() {
			var res = Base.prototype.getTables.call(this);
			$.extend(res, _tables);
			return res;
		},
		_tmplReadInfo: function(item) {
			if (!item) return null;
			try {
				return {
					"id": item.id,
					"endpoint": item.endpoint || "",
					"representation": item.representation || "",
					"title": item.title || "",
					"dataSet": item.dataSet ? JSON.parse(item.dataSet) : null,
					"creation_date": item["creation_date"]
				};
			} catch (e) {
				log && log("_tmplReadInfo", "KO", item.id);
				return null;
			}
		},
		/**
		 * Resolve with [resources]/[] or reject with a exception
		 */
		_tmplQuery: function(representation, endpoint) {
			var self = this;
			var deferred = $.Deferred();
			var req = _TMPL_QUERY;
			var params = [];
			if (representation || endpoint) {
				req += " where ";
				if (representation) {
					req += "representation = ?";
					params.push(representation);
					if (endpoint) {
						req += " and ";
					}
				}
				if (endpoint) {
					req += "endpoint = ?";
					params.push(endpoint);
				}
			}
			self._executeSql(req, params)
				.then(function(result) {
					log && log("_tmplQuery", "OK");
					if (!result || !result.rows || result.rows.length == 0) {
						return deferred.resolve([]);
					}
					var resources = [],
						rec;
					for (var i = 0; i < result.rows.length; i++) {
						rec = self._tmplReadInfo(result.rows.item(i));
						if (rec) {
							resources.push(rec);
						}
					}
					deferred.resolve(resources);
				}).fail(function(status) {
					_logError("_tmplQuery", status);
					deferred.reject(status.$exception || new Error(status.message));
				});
			return deferred.promise();
		},
		/**
		 * Resolve with data/null or reject with a exception
		 */
		_tmplRead: function(id) {
			var self = this;
			var deferred = $.Deferred();
			self._executeSql(_TMPL_READ, [id]).then(function(result) {
				log && log("_tmplRead", id, "OK");
				if (!result || !result.rows || result.rows.length == 0) {
					return deferred.resolve(null);
				}
				deferred.resolve(self._tmplReadInfo(result.rows.item(0)));
			}).fail(function(status) {
				_logError("_tmplRead", status);
				deferred.reject(status.$exception || new Error(status.message));
			});
			return deferred.promise();
		},
		/**
		 * Resolve or reject with a exception
		 */
		_tmplUpdate: function(id, ctx) {
			var self = this;
			return self._tmplRead(id).then(function(result) {
				if (!result || !ctx) return;
				return self._tmplSave($.extend(result, ctx), false);
			});
		},
		/**
		 * Resolve or reject with a exception
		 */
		_tmplDelete: function(id) {
			var self = this;
			var deferred = $.Deferred();
			self._executeSql(_TMPL_DELETE, [id]).then(function(result) {
				log && log("_tmplDelete", id, result ? "OK" : "KO");
				deferred.resolve();
			}).fail(function(status) {
				_logError("_tmplDelete", status);
				deferred.reject(status.$exception || new Error(status.message));
			});
			return deferred.promise();
		},
		/**
		 * Resolve or reject with a exception
		 */
		_tmplDeleteAll: function(representation, endpoint) {
			var self = this;
			var deferred = $.Deferred();
			self._executeSql(_TMPL_DELETE_ALL).then(function(result) {
				log && log("_tmplDeleteAll OK");
				deferred.resolve();
			}).fail(function(status) {
				_logError("_tmplDeleteAll", status);
				deferred.reject(status.$exception || new Error(status.message));
			});
			return deferred.promise();
		},
		/**
		 * Resolve with template context or reject with an exception
		 */
		_tmplSave: function(ctx, updateDate) {
			var self = this;
			var deferred = $.Deferred();
			if (!ctx || !ctx.id) {
				log && log("_tmplSave error", "Invalid parameters");
				deferred.reject(new Error("Invalid parameters"));
			} else {
				self._tmplDelete(ctx.id).then(function() {
					if (ctx["creation_date"] == null || updateDate) {
						ctx["creation_date"] = utils.getCurISODateTime(new Date());
					}
					return self._executeSql(_TMPL_INSERT, [ctx.id, ctx.endpoint, ctx.representation, ctx.title, JSON.stringify(ctx.dataSet), ctx.creation_date]);
				}).then(function() {
					log && log("_tmplSave", ctx.id, "OK");
					deferred.resolve(ctx);
				}).fail(function(status) {
					_logError("_tmplSave", status);
					deferred.reject(status.$exception || new Error(status.message));
				});
			}
			return deferred.promise();
		},
		_tmplCount: function() {
			return this._executeSql(_TMPL_COUNT, []).then(function(result) {
				return result && result.rows.length > 0 ? result.rows.item(0).counter : 0;
			}).fail(function(status) {
				_logError("_tmplCount", status);
				return 0;
			});
		},
		/**
		 * Templates
		 * op: Operation
		 */
		templateOperation: function(op) {
			switch (op) {
				case "save":
					return this._tmplSave(arguments[1], true);
				case "delete":
					return this._tmplDelete(arguments[1]);
				case "deleteAll":
					return this._tmplDeleteAll(arguments[1], arguments[2]);
				case "read":
					return this._tmplRead(arguments[1]);
				case "update":
					return this._tmplUpdate(arguments[1], arguments[2]);
				case "query":
					return this._tmplQuery(arguments[1], arguments[2], arguments[3]);
				case "readall":
					return this._tmplQuery(arguments[1]);
				case "count":
					return this._tmplCount();
				default:
					return $.smReject(storageInterface.buildErrResult("Unknown template operation[" + op + "]"));
			}
		}
	});

exports.Klass = _Klass;