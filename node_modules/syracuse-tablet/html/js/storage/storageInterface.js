"use strict";

/*
 * Default interface for mobile application metadata, favorites, drafts and templates, ...
 */


var utils = require('syracuse-tablet/html/js/helpers/utils');

function _StorageInterface() {
	this.infoString = "Interface only";
};

/*
 * All storage interfaces must inherit the "Not implemented" methods of this super class
 */
var storageInterfaceClass = utils.defineClass(
	_StorageInterface,
	null, {
		getInfo: function() {
			return this.infoString;
		},

		/*==================================
         * Init storage
         ==================================*/
		init: function(useTestDatabase) {
			throw new Error("Not implemented!");
		},

		/*==================================
         * App management
         ==================================*/
		queryAppConfigs: function() {
			throw new Error("Not implemented!");
		},
		createAppConfig: function(data) {
			throw new Error("Not implemented!");
		},
		readAppConfig: function(appid) {
			throw new Error("Not implemented!");
		},
		deleteAppConfig: function(id) {
			throw new Error("Not implemented!");
		},

		/*==================================
         *  Draft management
         ==================================*/

		// Create or update draft
		createDraft: function(data) {
			throw new Error("Not implemented!");
		},
		updateDraft: function(draftId, data) {
			throw new Error("Not implemented!");
		},
		readDraft: function(id) {
			throw new Error("Not implemented!");
		},
		deleteDraft: function(id) {
			throw new Error("Not implemented!");
		},
		saveDraft: function(draftURL, data) {
			throw new Error("Not implemented!");
		},

		/*==================================
		 *  Template management
		 ==================================*/
		queryTemplates: function(keys) {
			throw new Error("Not implemented!");
		},
		saveTemplate: function(keys, template) {
			throw new Error("Not implemented!");
		},
		deleteTemplate: function(templateUuid) {
			throw new Error("Not implemented!");
		},

		/*
		getSData: function(url, useFav, options) {
		};
		initData: function(config, data, doclean, cb) {
		};
		updData: function(oldUrl, data, cb) {
			mobiledb.updData(oldUrl, data, cb);
		};
		insData: function(url, data, cb) {
			mobiledb.insData(url, data, cb);
		};
		switchFav: function(url, data, cb) {
			mobiledb.switchFav(url, data, cb);
		};
		insertFav: function(appid, entity_url, data, cb) {
			mobiledb.insertFav(appid, entity_url, data, cb);
		};
		loadFavoriteList: function(options, cb) {
			mobiledb.loadFavoriteList(options, cb);
		};
		delData: function(url, cb) {
			mobiledb.delData(url, cb);
		};
		deleteDataByDraft: function(id, cb) {
			mobiledb.deleteDataByDraft(id, cb);
		};
		deleteDataByUrl: function(url, odata, cb) {
			mobiledb.deleteDataByUrl(url, odata, cb);
		};
		getSyncData: function(cb, sdataUrl) {
			mobiledb.getSyncData(cb, sdataUrl);
		};
		getSyncDataCount: function(cb) {
			mobiledb.getSyncCount(cb);
		};
		getModifiedData: function(purl, cb) {
			mobiledb.getModifiedData(purl, cb);
		};
		undoUpdate: function(url, cb) {
			mobiledb.undoUpdate(url, cb);
		};*/
		/*
		clearSdata: function(id, cb) {
			mobiledb.clearSdata(id, cb);
		};
		addCache: function(appid, entity, data, cb) {
			mobiledb.addCache(appid, entity, data, cb);
		};
		*/
	}
);

exports.StorageInterface = storageInterfaceClass;