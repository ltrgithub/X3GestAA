"use strict";

/*
 * Default interface for mobile application metadata, favorites, drafts and templates, ...
 */


var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

var _statusCodes = {
	OK: 1,
	NOT_FOUND: 2,
	ERROR: 3
};

/*
 * All storage interfaces must inherit the "Not implemented" methods of this super class
 */
exports.Klass = utils.defineClass(
	function(infoString, databaseVersion) {
		this.infoString = infoString;
		this.databaseName = exports.databaseName;
		this.databaseVersion = databaseVersion;
		this.useTestDatabase = false;
		this.db = null;
	},
	null, {
		getInfo: function() {
			return this.infoString;
		},

		/**
		 * Init storage
		 *
		 * Return:
		 * Resolve:
		 * {
		 *   $status: StatusCodes.OK,
		 *   $data: { }
		 * }
		 *
		 * Reject:
		 * {
		 *   $status: StatusCodes.ERROR,
		 *   $message: "Error message",
		 *   $exception: { ... }
		 * }
		 *
		 */
		init: function() {
			throw new Error("Not implemented!");
		},

		/**
		 * Query a list of items
		 *
		 * Parameters:
		 * opts: {
		 *   $context: {
		 *     $user,
		 *     $role,
		 *     $lang
		 *   },
		 *   $endpoint,
		 *   $collection: "users.$query",
		 *   $orderBy: "name, email" // optional
		 * }
		 *
		 * Return:
		 * Resolve:
		 * {
		 *   $status: StatusCodes.OK,
		 *   $data: [record1, record2, ...]
		 * }
		 *
		 * Reject:
		 * {
		 *   $status: StatusCodes.ERROR,
		 *   $message: "Error message",
		 *   $exception: { ... }
		 * }
		 *
		 */
		query: function(opts) {
			throw new Error("Not implemented!");
		},

		/**
		 * Does a create or update if record is there already
		 *
		 * Parameters:
		 * opts: {
		 *   $context: {
		 *     $user,
		 *     $role,
		 *     $lang
		 *   },
		     $endpoint,
		 *   $collection: "users.$query",
		 *   $data: {},
		 *   $key: "abc~def"
		 * }
		 *
		 * Return:
		 * Resolve:
		 * {
		 *   $status: StatusCodes.OK,
		 *   $data: { }
		 * }
		 *
		 * Reject:
		 * {
		 *   $status: StatusCodes.ERROR,
		 *   $message: "Error message",
		 *   $exception: { ... }
		 * }
		 *
		 */
		put: function(opts) {
			throw new Error("Not implemented!");
		},

		/**
		 * Reads exactly one record by it's key
		 *
		 * Parameters:
		 * opts: {
		 *   $context: {
		 *     $user,
		 *     $role,
		 *     $lang
		 *   },
		     $endpoint,
		 *   $collection: "users.$query",
		 *   $key: "abc~def"
		 * }
		 *
		 * Return:
		 * Resolve:
		 * {
		 *   $status: StatusCodes.OK or StatusCodes.NOT_FOUND
		 *   $data: { }
		 * }
		 *
		 * Reject:
		 * {
		 *   $status: StatusCodes.ERROR,
		 *   $message: "Error message",
		 *   $exception: { ... }
		 * }
		 *
		 */
		read: function(opts) {
			throw new Error("Not implemented!");
		},

		/**
		 * Delete exactly one record by it's key
		 *
		 * Parameters:
		 * opts: {
		 *   $context: {
		 *     $user,
		 *     $role,
		 *     $lang
		 *   },
		     $endpoint,
		 *   $collection: "users.$query",
		 *   $key: "abc~def"
		 * }
		 *
		 * Return:
		 * Resolve:
		 * {
		 *   $status: StatusCodes.OK or StatusCodes.NOT_FOUND
		 * }
		 *
		 * Reject:
		 * {
		 *   $status: StatusCodes.ERROR,
		 *   $message: "Error message",
		 *   $exception: { ... }
		 * }
		 *
		 */
		remove: function(opts) {
			throw new Error("Not implemented!");
		},

		/**
		 * Delete exactly one record by it's key
		 *
		 * Parameters:
		 * opts: {
		 *   $context: {
		 *     $user,
		 *     $role,
		 *     $lang
		 *   },
		     $endpoint,
		 *   $collection: "users.$query", // string or regex
		 * }
		 *
		 * Return:
		 * Resolve:
		 * {
		 *   $status: StatusCodes.OK
		 * }
		 *
		 * Reject:
		 * {
		 *   $status: StatusCodes.ERROR,
		 *   $message: "Error message",
		 *   $exception: { ... }
		 * }
		 *
		 */
		clearCollection: function() {
			throw new Error("Not implemented!");
		},
		computeCollectionSize: function() {
			throw new Error("Not implemented!");
		},
		clearDatabaseSupported: function() {
			return false;
		},
		/**
		 * Drafts and working copies
		 * op: Operation CRUD and Query
		 */
		draftOperation: function(op) {},
		/**
		 * Templates
		 * op: Operation CRUD and Query
		 */
		templateOperation: function(op) {}
	}
);

exports.resultToString = function(result) {
	if (!result) return "";
	if (jsutils.isError(result)) {
		return JSON.stringify(jsutils.convertToDiagnoses(result), null, 2);
	}
	var res = [];
	if (result.$status) res.push("status: " + result.$status);
	if (result.$message) res.push("Message: " + result.$message);
	if (result.$exception && result.$exception.message) res.push("Exception: " + result.$exception.message);
	if (result.$exception && result.$exception.stack) res.push("Stack: " + result.$exception.stack);
	return res.join('\n');
}

exports.buildResult = function(status, data, message, exception, metaData) {
	var res = {
		$status: status
	};
	if (data) res.$data = data;
	if (metaData) res.$metaData = metaData;
	if (message) res.$message = message;
	if (exception) res.$exception = exception;
	if (status === _statusCodes.ERROR) {
		res.$diagnoses = res.$diagnoses || [];
		res.$diagnoses.push({
			$severity: "error",
			$message: message
		});
	}
	return res;
}

exports.buildErrResult = function(message, exception) {
	return exports.buildResult(_statusCodes.ERROR, null, message, exception);
}
exports.StatusCodes = _statusCodes;

// Same db name for all kind of database - !!must be different from mobile application name
exports.databaseName = "sage-tablet-db";