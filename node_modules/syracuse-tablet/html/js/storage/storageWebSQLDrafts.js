"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var storageInterface = require('syracuse-tablet/html/js/storage/storageInterface');
var Base = require('syracuse-tablet/html/js/storage/storageWebSQLSData').Klass;
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("drafts", true);
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
/**
 * WebSQL storage interface - DRAFTS MANAGEMENT
 * Inherits from storageWebSQLSData only to split the code
 */

var _DRAFT_INSERT = "INSERT INTO sdata_drafts (id, endpoint, representation, comment, status, reason, dataSet, restoredContext, saveLink, title, creation_date) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
var _DRAFT_DELETE_ALL = "DELETE FROM sdata_drafts";
var _DRAFT_DELETE = "DELETE FROM sdata_drafts where id = ?";
var _DRAFT_READ = "SELECT * FROM sdata_drafts where id = ?";
var _DRAFT_READ_LIST = "SELECT id, endpoint, representation, comment, status, reason, title, creation_date FROM sdata_drafts";
var _DRAFT_COUNT = "SELECT COUNT(*) AS counter FROM sdata_drafts";
var _tables = {
	"sdata_drafts": [
		"DROP TABLE IF EXISTS sdata_drafts",
		"CREATE TABLE sdata_drafts ( " +
		"id text, " +
		"endpoint text, " +
		"representation text, " +
		"comment text, " +
		"status text, " +
		"reason text, " +
		"dataSet text, " +
		"restoredContext text, " +
		"saveLink text, " +
		"title text, " +
		"creation_date text" +
		")",
		"DROP INDEX IF EXISTS sdata_drafts_id",
		"CREATE UNIQUE INDEX sdata_drafts_id ON sdata_drafts (id)"
	],
	"sdata_wrkcpy": [
		// Workingcopy
		"DROP TABLE IF EXISTS sdata_wrkcpy",
		"CREATE TABLE sdata_wrkcpy ( " +
		"id text, " +
		"dataSet text, " +
		"creation_date text, " +
		"transaction_id text" +
		")",
		"DROP INDEX IF EXISTS sdata_wrkcpy_id",
		"CREATE UNIQUE INDEX sdata_wrkcpy_id ON sdata_wrkcpy (id)"
	]
};

var _logError = function(title, status) {
	log && log(title + " ERROR");
	log && log(storageInterface.resultToString(status));
};
var _Klass = utils.defineClass(
	function() {
		Base.call(this);
		this._wrkcpyAllDeleted = false;
		this._dataFormatter = formatApi.getFormatter("application/x-datetime");
	}, Base, {
		getTables: function() {
			var res = Base.prototype.getTables.call(this);
			$.extend(res, _tables);
			return res;
		},
		/**
		 * Resolve with true/false
		 */
		_wrkcpyExists: function(id) {
			var self = this;
			return self._executeSql("SELECT * FROM sdata_wrkcpy where id = ?", [id])
				.then(function(result) {
					if (result && result.rows && result.rows.length > 0) {
						return true;
					}
					return false;
				}).fail(function(status) {
					_logError("_wrkcpyExists", status);
					return false;
				});
		},
		/**
		 * Resolve with data/null
		 */
		_wrkcpyRead: function(id) {
			var self = this;
			return self._executeSql("SELECT * FROM sdata_wrkcpy where id = ?", [id])
				.then(function(result) {
					if (!result || !result.rows || result.rows.length == 0) return null;
					try {
						result = JSON.parse(result.rows.item(0).dataSet);
						log && log("_wrkcpyRead", id, "OK");
						return result;
					} catch (e) {
						log && log("_wrkcpyRead", "KO", id);
						return null;
					}
				}).fail(function(status) {
					_logError("_wrkcpyRead", status);
					return null;
				});
		},
		/**
		 * Resolve with  true/false
		 * Delete all the working copies that belong to transaction_id
		 */
		_wrkcpyDelete: function(id, transaction_id) {
			var self = this;
			var step;
			if (transaction_id != null) {
				// Delete all the working copy of the transaction (eg: multiple row detail working copies)
				step = self._executeSql("DELETE FROM sdata_wrkcpy where transaction_id = ?", [transaction_id]);
			} else {
				step = self._executeSql("DELETE FROM sdata_wrkcpy where id = ?", [id]);
			}
			return step.then(function(result) {
				log && log("_wrkcpyDelete", transaction_id, result ? "OK" : "KO");
				return true;
			}).fail(function(status) {
				_logError("_wrkcpyDelete", status);
				return false;
			});
		},
		/**
		 * Resolve with true/false
		 */
		_wrkcpyDeleteAll: function() {
			var self = this;
			if (self._wrkcpyAllDeleted === true) {
				// Optimization
				return $.smResolve(null);
			}
			return self._executeSql("DELETE FROM sdata_wrkcpy").then(function(result) {
				log && log("_wrkcpyDeleteAll OK");
				self._wrkcpyAllDeleted = true;
				return true;
			}).fail(function(status) {
				_logError("_wrkcpyDeleteAll", status);
				return false;
			});
		},
		/**
		 * Resolve with dataSet/null
		 */
		_wrkcpyCreate: function(dataSet, transactionId) {
			var self = this;
			if (!dataSet || !dataSet.$uuid) {
				log && log("_wrkcpyCreate error", "Invalid parameters");
				return $.smResolve(null);
			}
			return self._wrkcpyDelete(dataSet.$uuid).then(function() {
				return self._wrkcpyDoInsert(dataSet, transactionId);
			});
		},
		_wrkcpyDoInsert: function(dataSet, transactionId) {
			var self = this;
			transactionId = transactionId || dataSet.$uuid;
			return self._executeSql("INSERT INTO sdata_wrkcpy (dataSet, id, transaction_id) values (?, ?, ?)", [JSON.stringify(dataSet), dataSet.$uuid, transactionId])
				.then(function() {
					log && log("_wrkcpyDoInsert", dataSet.$uuid, "OK", "transactionId:" + transactionId);
					self._wrkcpyAllDeleted = false;
					return dataSet;
				}).fail(function(status) {
					_logError("_wrkcpyDoInsert", status);
					return null;
				});
		},
		_doUpdate: function(dataSet) {
			var self = this;
			return self._executeSql("UPDATE sdata_wrkcpy set dataSet = ? where id = ?", [JSON.stringify(dataSet), dataSet.$uuid]).then(function(result) {
				log && log("_doUpdate", "OK");
				return dataSet;
			}).fail(function(status) {
				_logError("_doUpdate", status);
				return null;
			});
		},
		_wrkcpyUpdate: function(dataSet, transactionId) {
			var self = this;
			if (!dataSet || !dataSet.$uuid) {
				log && log("_wrkcpyUpdate error", "Invalid parameters");
				return $.smResolve(null);
			}
			return self._wrkcpyExists(dataSet.$uuid).then(function(exists) {
				if (exists === true) {
					log && log("_wrkcpyUpdate UPDATE", dataSet.$uuid);
					return self._doUpdate(dataSet);
				} else {
					log && log("_wrkcpyUpdate CREATE", dataSet.$uuid);
					return self._wrkcpyDoInsert(dataSet, transactionId);
				}
			});
		},
		_readDraftInfo: function(item) {
			if (!item) return null;
			try {
				return {
					id: item.id,
					endpoint: item.endpoint || "",
					representation: item.representation || "",
					comment: item.comment || "",
					status: item.status || "none",
					reason: item.reason || "none",
					dataSet: item.dataSet ? JSON.parse(item.dataSet) : null,
					restoredContext: item.restoredContext ? JSON.parse(item.restoredContext) : null,
					saveLink: item.saveLink ? JSON.parse(item.saveLink) : null,
					title: item.title || "",
					creation_date: item.creation_date
				};
			} catch (e) {
				log && log("_readDraftInfo", "KO", item.id);
				return null;
			}
		},
		/**
		 * Resolve with [resources]/[]
		 */
		_draftReadList: function() {
			var self = this;
			return self._executeSql(_DRAFT_READ_LIST)
				.then(function(result) {
					if (!result || !result.rows || result.rows.length == 0) return [];
					var resources = [],
						rec;
					for (var i = 0; i < result.rows.length; i++) {
						rec = self._readDraftInfo(result.rows.item(i));
						if (rec) {
							resources.push(rec);
						}
					}
					log && log("_draftReadList", "OK");
					return resources;
				}).fail(function(status) {
					_logError("_draftReadList", status);
					return [];
				});
		},
		/**
		 * Resolve with data/null
		 */
		_draftRead: function(id) {
			var self = this;
			return self._executeSql(_DRAFT_READ, [id])
				.then(function(result) {
					if (!result || !result.rows || result.rows.length == 0) return null;
					log && log("_draftRead", id, "OK");
					return self._readDraftInfo(result.rows.item(0));
				}).fail(function(status) {
					_logError("_draftRead", status);
					return null;
				});
		},
		/**
		 * Resolve with  true/false
		 */
		_draftDelete: function(id) {
			var self = this;
			return self._executeSql(_DRAFT_DELETE, [id]).then(function(result) {
				log && log("_draftDelete", id, result ? "OK" : "KO");
				self._draftNotifyChanged();
				return true;
			}).fail(function(status) {
				_logError("_draftDelete", status);
				return false;
			});
		},
		/**
		 * Resolve with true/false
		 */
		_draftDeleteAll: function() {
			var self = this;
			return self._executeSql(_DRAFT_DELETE_ALL).then(function(result) {
				log && log("_draftDeleteAll OK");
				self._draftNotifyChanged();
				return true;
			}).fail(function(status) {
				_logError("_draftDeleteAll", status);
				return false;
			});
		},
		/**
		 * Resolve or reject with an exception
		 */
		_draftSave: function(ctx) {
			var self = this;
			var dreferred = $.Deferred();
			if (!ctx || !ctx.id) {
				log && log("_draftSave error", "Invalid parameters");
				return dreferred.reject(new Error("Invalid parameters"));
			}
			return self._draftDelete(ctx.id).then(function() {
				return self._executeSql(_DRAFT_INSERT, [ctx.id, ctx.endpoint, ctx.representation, ctx.comment, ctx.status, ctx.reason, JSON.stringify(ctx.dataSet), JSON.stringify(ctx.restoredContext), JSON.stringify(ctx.saveLink), ctx.title, ctx.creation_date])
					.then(function() {
						log && log("_draftSave", ctx.id, "OK");
						self._draftNotifyChanged();
						dreferred.resolve();
					}).fail(function(status) {
						_logError("_draftSave", status);
						dreferred.reject(status.$exception || new Error(status.message));
					});
			});
		},
		_draftCount: function(notify) {
			return this._executeSql(_DRAFT_COUNT).then(function(result) {
				var count = result && result.rows.length > 0 ? result.rows.item(0).counter : 0;
				if (notify) {
					notifications.publish("sm.drafts.changed", count);
				}
				return count;
			}).fail(function(status) {
				_logError("_draftCount", status);
				return 0;
			});
		},
		_draftNotifyChanged: function() {
			return this._draftCount(true);
		},
		/**
		 * Drafts
		 * op: Operation
		 * 		save
		 * 			args(1) create true/false
		 * 		read
		 * 		query
		 * 		delete
		 * 		switchStatus
		 */
		draftOperation: function(op) {
			switch (op) {
				case "wrkcpyUpdate":
					return this._wrkcpyUpdate(arguments[1]);
				case "wrkcpyRead":
					return this._wrkcpyRead(arguments[1]);
				case "wrkcpyDelete":
					return this._wrkcpyDelete(arguments[1]);
				case "wrkcpyCreate":
					return this._wrkcpyCreate(arguments[1], arguments[2]);
				case "wrkcpyDeleteAll":
					return this._wrkcpyDeleteAll(arguments[1]);
				case "draftSave":
					return this._draftSave(arguments[1]);
				case "draftDelete":
					return this._draftDelete(arguments[1]);
				case "draftDeleteAll":
					return this._draftDeleteAll();
				case "draftRead":
					return this._draftRead(arguments[1]);
				case "draftReadList":
					return this._draftReadList();
				case "draftCount":
					return this._draftCount(false);
				case "draftNotifyChanged":
					var self = this;
					setTimeout(function() {
						self._draftNotifyChanged();
					});
					return;
				default:
					return $.smReject(storageInterface.buildErrResult("Unknown Draft operation[" + op + "]"));
			}
		}
	});

exports.Klass = _Klass;