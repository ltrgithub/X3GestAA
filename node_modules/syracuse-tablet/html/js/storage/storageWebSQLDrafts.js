"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var storageInterface = require('syracuse-tablet/html/js/storage/storageInterface');
var Base = require('syracuse-tablet/html/js/storage/storageWebSQLSData').Klass;
/**
 * WebSQL storage interface - DRAFTS MANAGEMENT
 * Inherits from storageWebSQLSData only to split the code
 */

var _tables = {
	"sdata_drafts": [
		// Drafts - type="workingcopy" or "draft"
		"DROP TABLE IF EXISTS sdata_drafts",
		"CREATE TABLE sdata_drafts ( " +
		"id text, " +
		"endpoint text, " +
		"representation text, " +
		"type text, " +
		"status text, " +
		"dataSet text, " +
		"creation_date text" +
		")",
		"DROP INDEX IF EXISTS sdata_drafts_id",
		"CREATE UNIQUE INDEX sdata_drafts_id ON sdata_drafts (id)"
	],
	"sdata_wrkcpy": [
		// Workingcopy
		"DROP TABLE IF EXISTS sdata_wrkcpy",
		"CREATE TABLE sdata_wrkcpy ( " +
		"id text, " +
		"dataSet text, " +
		"creation_date text" +
		")",
		"DROP INDEX IF EXISTS sdata_wrkcpy_id",
		"CREATE UNIQUE INDEX sdata_wrkcpy_id ON sdata_wrkcpy (id)"
	]
};

var _Klass = utils.defineClass(
	function() {
		Base.call(this);
	}, Base, {
		getTables: function() {
			var res = Base.prototype.getTables.call(this);
			$.extend(res, _tables);
			return res;
		},
		_wrkcpyRead: function(id) {
			console.log("_wrkcpyRead", id);
			return this._executeSql("SELECT * FROM sdata_wrkcpy where id = ?", [id])
				.then(function(result) {
					if (result && result.rows && result.rows.length > 0) {
						result = result.rows.item(0).dataSet;
					} else {
						result = null;
					}
					if (result) {
						try {
							result = JSON.parse(result);
							console.log("_wrkcpyRead", JSON.stringify(result, null, 2));
						} catch (e) {
							result = null;
						}
					}
					console.log("_wrkcpyRead", id, result ? "OK" : "KO");
					return storageInterface.buildResultOK(result);
				});
		},
		_wrkcpyDelete: function(id) {
			console.log("_wrkcpyDelete", id);
			return this._executeSql("DELETE FROM sdata_wrkcpy where id = ?", [id]).then(function(result) {
				console.log("_wrkcpyDelete", id, result ? "OK" : "KO");
				return storageInterface.buildResultOK(result);
			});
		},
		_wrkcpyCreate: function(dataSet) {
			if (!dataSet || !dataSet.$uuid) {
				return $.smReject(storageInterface.buildErrResult("Invalid parameters"));
			}
			var self = this;
			console.log("_wrkcpyCreate", dataSet.$uuid);
			return self._wrkcpyDelete(dataSet.$uuid).then(function() {
				self._executeSql("INSERT INTO sdata_wrkcpy (dataSet, id) values (?, ?)", [JSON.stringify(dataSet), dataSet.$uuid])
					.then(function() {
						console.log("_wrkcpyCreate", dataSet.$uuid, "OK");
						return $.smResolve(storageInterface.buildResultOK(dataSet));
					});
			});
		},
		/**
		 * Drafts
		 * op: Operation
		 * 		save
		 * 			args(1) create true/false
		 * 		read
		 * 		query
		 * 		delete
		 * 		switchStatus
		 */
		draftOperation: function(op) {
			switch (op) {
				case "wrkcpyRead":
					return this._wrkcpyRead(arguments[1]);
				case "wrkcpyDelete":
					return this._wrkcpyDelete(arguments[1]);
				case "wrkcpyCreate":
					return this._wrkcpyCreate(arguments[1]);
				default:
					return $.smReject(storageInterface.buildErrResult("Unknown Draft operation[" + op + "]"));
			}
		}
	});

exports.Klass = _Klass;