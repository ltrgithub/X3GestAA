"use strict";

var storageInterface = require('syracuse-tablet/html/js/storage/storageInterface');
/**
 * WebSQL storage interface - DRAFTS MANAGEMENT
 * Members added to of _storageInterfaceWebSQLClass
 */

var _tables = {
	"sdata_drafts": [
		// Drafts - type="workingcopy" or "draft"
		"DROP TABLE IF EXISTS sdata_drafts",
		"CREATE TABLE sdata_drafts ( " +
		"id text, " +
		"endpoint text, " +
		"representation text, " +
		"type text, " +
		"status text, " +
		"dataSet text, " +
		"creation_date text" +
		")",
		"DROP INDEX IF EXISTS sdata_drafts_id",
		"CREATE UNIQUE INDEX sdata_drafts_id ON sdata_drafts (id)"
	],
	"sdata_wrkcpy": [
		// Workingcopy
		"DROP TABLE IF EXISTS sdata_wrkcpy",
		"CREATE TABLE sdata_wrkcpy ( " +
		"id text, " +
		"dataSet text, " +
		"creation_date text" +
		")",
		"DROP INDEX IF EXISTS sdata_wrkcpy_id",
		"CREATE UNIQUE INDEX sdata_wrkcpy_id ON sdata_wrkcpy (id)"
	]
};

var _members = {
	wrkcpyRead: function(id) {
		return this._executeSql("SELECT * FROM sdata_drafts where id = ?", [id])
			.then(function(result) {
				return storageInterface.buildResultOK(result);
			});
	},
	wrkcpyDelete: function(id) {
		return this._executeSql("DELETE FROM sdata_drafts where id = ?", [id]).then(function(result) {
			return storageInterface.buildResultOK(result);
		});
	},
	wrkcpyCreate: function(dataSet) {
		if (!dataSet || !dataSet.$uuid) {
			return $.smReject(storageInterface.buildErrResult("Invalid parameters"));
		}
		var self = this;
		return self.wrkcpyDelete(dataSet.$uuid).then(function() {
			self._executeSql("INSERT INTO sdata_drafts (dataSet, id) values (?, ?)", [JSON.stringify(dataSet), dataSet.$uuid])
				.then(function() {
					return $.smResolve(storageInterface.buildResultOK(dataSet));
				});
		});
	},
	/**
	 * Drafts
	 * op: Operation
	 * 		save
	 * 			args(1) create true/false
	 * 		read
	 * 		query
	 * 		delete
	 * 		switchStatus
	 */
	draftOperation: function(op) {
		switch (op) {
			case "wrkcpyRead":
				return this.wrkcpyRead(arguments[1]);
			case "wrkcpyDelete":
				return this.wrkcpyDelete(arguments[1]);
			case "wrkcpyCreate":
				return this.wrkcpyCreate(arguments[1]);
			default:
				return $.smReject(storageInterface.buildErrResult("Unknown Draft operation[" + op + "]"));
		}
	}
};

exports.members = _members;
exports.tables = _tables;