"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var storageInterface = require('syracuse-tablet/html/js/storage/storageInterface');
var Base = require('syracuse-tablet/html/js/storage/storageWebSQLSData').Klass;
var log = require('syracuse-tablet/html/js/helpers/logger').getLogger("wrkcpy", true);
/**
 * WebSQL storage interface - DRAFTS MANAGEMENT
 * Inherits from storageWebSQLSData only to split the code
 */

var _tables = {
	"sdata_drafts": [
		// Drafts - type="workingcopy" or "draft"
		"DROP TABLE IF EXISTS sdata_drafts",
		"CREATE TABLE sdata_drafts ( " +
		"id text, " +
		"endpoint text, " +
		"representation text, " +
		"type text, " +
		"status text, " +
		"dataSet text, " +
		"creation_date text" +
		")",
		"DROP INDEX IF EXISTS sdata_drafts_id",
		"CREATE UNIQUE INDEX sdata_drafts_id ON sdata_drafts (id)"
	],
	"sdata_wrkcpy": [
		// Workingcopy
		"DROP TABLE IF EXISTS sdata_wrkcpy",
		"CREATE TABLE sdata_wrkcpy ( " +
		"id text, " +
		"dataSet text, " +
		"creation_date text" +
		")",
		"DROP INDEX IF EXISTS sdata_wrkcpy_id",
		"CREATE UNIQUE INDEX sdata_wrkcpy_id ON sdata_wrkcpy (id)"
	]
};

var _logError = function(title, status) {
	log && log(title + " ERROR");
	log && log(storageInterface.resultToString(status));
};
var _Klass = utils.defineClass(
	function() {
		Base.call(this);
		this._wrkcpyAllDeleted = false;
	}, Base, {
		getTables: function() {
			var res = Base.prototype.getTables.call(this);
			$.extend(res, _tables);
			return res;
		},
		/**
		 * Resolve with true/false
		 */
		_wrkcpyExists: function(id) {
			var self = this;
			return self._executeSql("SELECT * FROM sdata_wrkcpy where id = ?", [id])
				.then(function(result) {
					if (result && result.rows && result.rows.length > 0) {
						return true;
					}
					return false;
				}).fail(function(status) {
					_logError("_wrkcpyExists", status);
					return false;
				});
		},
		/**
		 * Resolve with data/null
		 */
		_wrkcpyRead: function(id) {
			return this._executeSql("SELECT * FROM sdata_wrkcpy where id = ?", [id])
				.then(function(result) {
					if (!result || !result.rows || result.rows.length == 0) return null;
					try {
						result = JSON.parse(result.rows.item(0).dataSet);
						log && log("_wrkcpyRead", id, "OK");
						return result;
					} catch (e) {
						log && log("_wrkcpyRead", "KO", id);
						return null;
					}
				}).fail(function(status) {
					_logError("_wrkcpyRead", status);
					return null;
				});
		},
		/**
		 * Resolve with  true/false
		 */
		_wrkcpyDelete: function(id) {
			return this._executeSql("DELETE FROM sdata_wrkcpy where id = ?", [id]).then(function(result) {
				log && log("_wrkcpyDelete", id, result ? "OK" : "KO");
				return true;
			}).fail(function(status) {
				_logError("_wrkcpyDelete", status);
				return false;
			});
		},
		/**
		 * Resolve with true/false
		 */
		_wrkcpyDeleteAll: function() {
			var self = this;
			if (self._wrkcpyAllDeleted === true) {
				// Optimization
				return $.smResolve(null);
			}
			return self._executeSql("DELETE FROM sdata_wrkcpy").then(function(result) {
				log && log("_wrkcpyDeleteAll OK");
				self._wrkcpyAllDeleted = true;
				return true;
			}).fail(function(status) {
				_logError("_wrkcpyDeleteAll", status);
				return false;
			});
		},
		/**
		 * Resolve with dataSet/null
		 */
		_wrkcpyCreate: function(dataSet) {
			if (!dataSet || !dataSet.$uuid) {
				log && log("_wrkcpyCreate error", "Invalid parameters");
				return $.smResolve(null);
			}
			var self = this;
			return self._wrkcpyDelete(dataSet.$uuid).then(function() {
				return self._doInsert(dataSet);
			});
		},
		_doInsert: function(dataSet) {
			var self = this;
			return self._executeSql("INSERT INTO sdata_wrkcpy (dataSet, id) values (?, ?)", [JSON.stringify(dataSet), dataSet.$uuid])
				.then(function() {
					log && log("_doInsert", dataSet.$uuid, "OK");
					self._wrkcpyAllDeleted = false;
					return dataSet;
				}).fail(function(status) {
					_logError("_doInsert", status);
					return null;
				});
		},
		_doUpdate: function(dataSet) {
			return this._executeSql("UPDATE sdata_wrkcpy set dataSet = ? where id = ?", [JSON.stringify(dataSet), dataSet.$uuid]).then(function(result) {
				log && log("_doUpdate", "OK");
				return dataSet;
			}).fail(function(status) {
				_logError("_doUpdate", status);
				return null;
			});
		},
		_wrkcpyUpdate: function(dataSet) {
			if (!dataSet || !dataSet.$uuid) {
				log && log("_wrkcpyUpdate error", "Invalid parameters");
				return $.smResolve(null);
			}
			var self = this;
			return self._wrkcpyExists(dataSet.$uuid).then(function(exists) {
				if (exists === true) {
					log && log("_wrkcpyUpdate UPDATE", dataSet.$uuid);
					return self._doUpdate(dataSet);
				} else {
					log && log("_wrkcpyUpdate CREATE", dataSet.$uuid);
					return self._doInsert(dataSet);
				}
			});
		},
		/**
		 * Drafts
		 * op: Operation
		 * 		save
		 * 			args(1) create true/false
		 * 		read
		 * 		query
		 * 		delete
		 * 		switchStatus
		 */
		draftOperation: function(op) {
			switch (op) {
				case "wrkcpyUpdate":
					return this._wrkcpyUpdate(arguments[1]);
				case "wrkcpyRead":
					return this._wrkcpyRead(arguments[1]);
				case "wrkcpyDelete":
					return this._wrkcpyDelete(arguments[1]);
				case "wrkcpyCreate":
					return this._wrkcpyCreate(arguments[1]);
				case "wrkcpyDeleteAll":
					return this._wrkcpyDeleteAll(arguments[1]);
				default:
					return $.smReject(storageInterface.buildErrResult("Unknown Draft operation[" + op + "]"));
			}
		}
	});

exports.Klass = _Klass;