"use strict";

/*
 * Storage module (Selects implementation depending on what's available in the current browser
 */

var utils = require('syracuse-tablet/html/js/helpers/utils');
var _log = require('syracuse-tablet/html/js/helpers/logger').getLogger("storage");
var storageInterface = require('syracuse-tablet/html/js/storage/storageInterface');

var _localStorage = {
	_available: null,
	_log: false,
	_isAvailable: function() {
		if (_localStorage._available !== null) {
			return _localStorage._available;
		}
		_localStorage._available = false;
		try {
			window.localStorage.setItem("__test_availability__", "__test_availability__");
			_localStorage._available = true;
		} catch (e) {}
		return _localStorage._available;
	},
	getItem: function(key, removeAfter) {
		if (!_localStorage._isAvailable()) {
			_log && _log("local.unsupported.getItem(" + key + "):" + val);
			return;
		}
		var val = window.localStorage.getItem(key);
		_log && _log("local.getItem(" + key + "):" + val);
		if (true === removeAfter) {
			_localStorage.removeItem(key);
		}
		return val;
	},
	setItem: function(key, value) {
		if (!_localStorage._isAvailable()) {
			console.log("local.unsupported.setItem(" + key + "):" + value);
			return;
		}
		_log && _log("local.setItem(" + key + "):" + value);
		return window.localStorage.setItem(key, value);
	},
	removeItem: function(key) {
		if (!_localStorage._isAvailable()) {
			_log && _log("local.unspported.removeItem(" + key + ")");
			return;
		}
		_log && _log("local.removeItem(" + key + ")");
		return window.localStorage.removeItem(key);
	}
};

var _sessionStorage = {
	_available: null,
	_backupMap: {},
	_log: false,
	_isAvailable: function() {
		if (_sessionStorage._available !== null) {
			return _sessionStorage._available;
		}
		_sessionStorage._available = false;
		try {
			window.sessionStorage.setItem("__test_availability_session__", "__test_availability_session__");
			_sessionStorage._available = true;
		} catch (e) {}
		return _sessionStorage._available;
	},
	getItem: function(key) {
		if (!_sessionStorage._isAvailable()) {
			_log && _log("session.fallback.getItem(" + key + "):" + val);
			return _sessionStorage._backupMap[key];
		}
		var val = window.sessionStorage.getItem(key);
		_log && _log("session.getItem(" + key + "):" + val);
		return val;
	},
	setItem: function(key, value) {
		if (!_sessionStorage._isAvailable()) {
			_log && _log("session.fallback.setItem(" + key + "):" + value);
			_sessionStorage._backupMap[key] = value;
			return;
		}
		_log && _log("session.setItem(" + key + "):" + value);
		return window.sessionStorage.setItem(key, value);
	},
	removeItem: function(key) {
		if (!_sessionStorage._isAvailable()) {
			_log && _log("session.fallback.removeItem(" + key + ")");
			delete _sessionStorage._backupMap[key];
			return;
		}
		_log && _log("session.removeItem(" + key + ")");
		return window.sessionStorage.removeItem(key);
	}
};


var _impls = [
	require('syracuse-tablet/html/js/storage/storageWinJS'),
	require('syracuse-tablet/html/js/storage/storageWebSQL'),
	require('syracuse-tablet/html/js/storage/storageIndexedDB')
];

var _storageImpl;

// Choose the first supported storage engine
function _getStorageImpl() {
	if (_storageImpl) {
		return _storageImpl;
	}

	_impls.some(function(impl) {
		if (impl.isAvailable()) {
			var ctor = impl.StorageInterface;
			_storageImpl = new ctor();
			return true;
		}
		return false;
	});

	return _storageImpl;
}

exports.getStorage = _getStorageImpl;
exports.sessionStorage = _sessionStorage;
exports.localStorage = _localStorage;
exports.StatusCodes = storageInterface.StatusCodes;