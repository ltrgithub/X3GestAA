"use strict";
var authUtils = require('syracuse-tablet/html/js/authoring/authoringPropertiesGeneral');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var authHtml = require('syracuse-tablet/html/js/authoring/authoringHtml');
var eventListener = require('syracuse-tablet/html/js/application/eventListener');


var _properties = {

	"arrayDisplay": {
		"key": "$display",
		"default": "table",
		values: [{
			value: "table"
		}, {
			value: "card"
		}],
		createMarkup: authUtils.createMarkupRadio
	},

	// only card
	"arrayCardsPerRow": {
		"key": "$cardsPerRow",
		"default": "2",
		values: [{
			value: "1"
		}, {
			value: "2"
		}, {
			value: "3"
		}, {
			value: "4"
		}],
		createMarkup: authUtils.createMarkupRadio,
		refreshMarkup: authUtils.refreshMarkupRadio
	},

	// only card
	"arrayCardsMinWidth": function(controller, sel, data) {
		this.name = "arrayCardsMinWidth";
		this.label = null;
		this.key = "$minWidth";
		this["default"] = 1;
		this.min = 0;
		this.max = 20;
		this.step = 1;

		this.createMarkup = function($$parent, prop, sel, data) {
			this.ctrl = data.control;
			var value = authUtils.getValueOrDefault(this, sel, data);
			var $$panel = $(authHtml.execute("authPanelCardMinSizeSliderControl", {
				id: "auth_opt_" + this.name,
				value: value,
				min: this.min,
				max: this.max,
				step: this.step || 1,
				valText: this.val2Text ? this.val2Text(value) : value
			}));
			$$parent.append($$panel);
			var $$text = $("header", $$panel);
			this.$$slider = $("input", $$panel).slider({});
			this.$$slider.on("slide", jsutils.bindFn(this.ctrl.authOnSlideMinSize, this.ctrl, "slide"));
			this.$$slider.on("slideStart", jsutils.bindFn(this.ctrl.authOnSlideMinSize, this.ctrl, "start"));
			this.$$slider.on("slideStop", jsutils.bindFn(this._sliderSetValue, this, $$parent, sel, data, value));
		};

		this.destroyMarkup = function() {
			this.ctrl = null;
			if (this.$$slider) {
				// $$slider.find(".$$slider") to make sur the plugin has been initialized
				this.$$slider.slider('destroy');
				this.$$slider = null;
			}
			if (this.$$Button) {
				// $$slider.find(".$$slider") to make sur the plugin has been initialized
				this.$$Button.off("click");
				this.$$Button = null;
			}
		};

		this._sliderSetValue = function(slideEvt, $$parent, sel, data, originValue) {
			this.ctrl.authOnSlideMinSize(slideEvt, "stop");
			if (originValue != slideEvt.value) {
				authUtils.setValue(this, sel, data, slideEvt.value);
				authUtils.notifyChangePropUI($$parent, sel, data);
			}
		};


	},

	"arrayCardButton": function(controller, sel, data) {
		this.name = null;
		this.label = null;
		this.key = null;
		this.controller = controller;
		if (data) {
			this.control = data.control;
		}
		this.createButtonMarkup = function() {
			var saveDesign = this.isSaveButton();
			this.$$Button = $('<button id="' + "auth_opt_" + this.name + '" type="button" class="btn btn-default">' + (saveDesign ? "Save card design" : "Open card design") + '</button>');
			this.$$Button.on("click", jsutils.bindFn(this.onClickButton, this, saveDesign));
			return this.$$Button;
		};

		this.destroyButtonMarkup = function(context) {
			if (context && context.origin == "selection" && this.isSaveButton()) {
				// No destroy in that case - button remains displayed when we select a ctrl/layout
				// False to tell controller to remove the button
				return false;
			}
			this.control = null;
			this.controller = null;
			if (this.$$Button) {
				// $$slider.find(".$$slider") to make sur the plugin has been initialized
				this.$$Button.off("click");
				this.$$Button.remove();
				this.$$Button = null;
			}
		};

		this.onClickButton = function(evt, closeDesign) {
			if (closeDesign) {
				eventListener.triggerAction(this.controller.$$elmt, "saveCardDesign");
			} else if (this.control) {
				// Trigger a navigation to carddesign page
				var attrs = {
					"data-control-id": this.control.id,
					"data-parent-id": this.controller.id,
					"data-nav": "carddesign",
					"data-nav-target": "application"
				};
				eventListener.triggerNavigation(this.control.$$elmt, attrs);
			}
		};
		this.isSaveButton = function() {
			return this.controller && this.controller.state.type == "carddesign";
		};
	},

	// only card
	"arrayCardsEmptyCells": {
		"key": "$emptycell",
		"default": "nodisplay",
		values: [{
			value: "filled"
		}, {
			value: "withtitle"
		}, {
			value: "nodisplay"
		}],
		createMarkup: authUtils.createMarkupRadio,
		refreshMarkup: authUtils.refreshMarkupRadio
	},

	// only query array
	"arrayProtoFilters": function(controller, sel, data) {
		this.name = "arrayProtoFilters";
		this.label = null;
		this.key = "$filters";
		// No filters displayed by default for vignette
		this["default"] = controller.isVignette ? "none" : "list";
		this.values = [{
			value: "list"
		}, {
			value: "tabs"
		}, {
			value: "none"
		}];
		this.createMarkup = authUtils.createMarkupRadio;
		this.refreshMarkup = authUtils.refreshMarkupRadio;
	},

	// only query array - link to details values are created dynamically
	"arrayQueryLink": function(controller, sel, data) {
		var self = this;

		function init() {
			var links = data.control.prototype.getDataByPath("$item.$links");
			if (!links || links.length === 0) return;
			if (controller.isVignette) {
				// Add the capability to open query full page - Default option
				self["default"] = "$queryfullpage";
				self.values.push({
					value: "$queryfullpage",
					label: locale.text("auth.arrayQueryLink.queryfullpage")
				});
			}
			// Add $links
			$.each(links, function(key, link) {
				self.values.push({
					value: key,
					label: link.$title ? controller.prototype.resolveExpression(link.$title) + " - " + key : key
				});
			});
			self.isHidden = (self.values.length === 1 && self.values[0].value === "$details");
		}
		self.name = "arrayQueryLink";
		self.label = null;
		self.isHidden = true;
		self.values = [];
		self.key = "$detailsLink";
		self["default"] = "$details";
		self.createMarkup = authUtils.createMarkupRadio;
		self.refreshMarkup = authUtils.refreshMarkupRadio;
		init();
	},

	// Header - Pagination/Sort/Filters options
	"arrayHeader": function(controller, sel, data) {
		this.name = "arrayHeader";
		this.label = null;
		this.key = "$headerOptions";
		// No filters displayed by default for vignette
		this["default"] = controller.isVignette ? "none" : "all";
		this.values = [{
			value: "all"
		}, {
			value: "paginOnly"
		}, {
			value: "sortFilterOnly"
		}, {
			value: "none"
		}];
		this.createMarkup = authUtils.createMarkupRadio;
		this.refreshMarkup = authUtils.refreshMarkupRadio;
	},

	// Table mode only
	"arrayTableHeader": {
		"key": "$tableHeaderShow",
		"default": true,
		values: [{
			value: true
		}, {
			value: false
		}],
		createMarkup: authUtils.createMarkupRadio,
		refreshMarkup: authUtils.refreshMarkupRadio
	}
};

var _checkDisplay = function(sel, data, display) {
	return display === authUtils.getValueOrDefault(_properties.arrayDisplay, sel, data);
};

exports.initModuleProperties = function(dest) {
	authUtils.initProperties(_properties, dest);
};

exports.getModuleProperties = function($$elmt, controller, props, sel, data) {
	props.push(_properties.arrayDisplay, _properties.arrayHeader);
	if (_checkDisplay(sel, data, "card")) {
		props.push(_properties.arrayCardsPerRow, _properties.arrayCardsMinWidth, _properties.arrayCardsEmptyCells, _properties.arrayCardButton);
	} else if (_checkDisplay(sel, data, "table")) {
		props.push(_properties.arrayTableHeader);
	}

	if (controller.prototype.isQuery()) {
		props.push(_properties.arrayQueryLink);
	}
	if ((controller.prototype.isLookup() || controller.prototype.isQuery()) && controller.$filtersGet() && controller.$filtersGet().length > 1) {
		props.push(_properties.arrayProtoFilters);
	}
};

exports.getCardDesignBackButton = function(controller) {
	return new _properties.arrayCardButton(controller);
};