"use strict";
var authPropsGeneral = require('syracuse-tablet/html/js/authoring/authoringPropertiesGeneral');
var components = require('syracuse-tablet/html/js/authoring/authoringComponents');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var fieldOperators = require('syracuse-tablet/html/js/helpers/fieldOperators');
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');

var _noValue = "$$novalue$$";
var _maxCharWidth = 50;
var _defCharWidth = 20;
var _defPercentWidth = 20;
var _tableConfigKeys = ["$bind", "$title", "$type", "$titleOrig", "$widthType", "$widthVal", "$refDescFormat", "$refDescPosition"];
var _statusPalette = ["medium-purple", "darkgrey", "purple", "sagegreen", "blue", "orange", "skyblue", "lightgreen", "medium-grey", "green", "white", "black", "grey", "alert", "warning", "info"];

var _templates = {
	subtitle: '\
		<section {{#if id}}id="{{id}}"{{/if}} style="{{#if notHidden}}overflow:hidden;{{/if}}white-space:nowrap;text-overflow:ellipsis;{{#if margin}}margin-bottom:{{margin}}px;{{/if}}">\
			{{#if title}}<p>{{title}}</p>{{/if}}\
			<div></div>\
		</section>',
	subPropTitle: ' \
		<div class="panel panel-primary s-m-panel-auth-prop s-m-auth-prop-type-{{type}}"> \
			<div style="overflow:hidden;" class="panel-heading" role="tab" id="heading_{{id}}"> \
				<a style="width:100%;display:table;" data-toggle="collapse" data-parent="#{{#if parentId}}{{parentId}}{{/if}}{{#unless parentId}}accordion{{/unless}}" href="#collapse_{{id}}" {{#if expanded}} aria-expanded="true"{{/if}} aria-controls="collapse_{{id}}" {{#unless expanded}}class="collapsed"{{/unless}}>\
					<div style="display:table-row;white-space: nowrap;">\
						<h4 class="panel-title" style="display:table-cell;"> \
							{{label}}\
						</h4> \
						{{#if info}}<span style="padding-left: 10px;font-size:x-small;display:table-cell;text-align: right;"><i>{{info}}</i></span>{{/if}}\
					</div>\
				</a> \
			</div> \
			<div id="collapse_{{id}}" class="panel-collapse collapse {{#if expanded}}in{{/if}}" role="tabpanel" aria-labelledby="heading_{{id}}"> \
			</div> \
		</div>',
	statusLine: '\
		<span style="display:table;table-layout:fixed;width:100%">\
			<span style="display:table-row;">\
				<span style="display:table-cell;overflow:hidden;text-overflow:ellipsis;white-space: nowrap;">{{field}} {{operator}} {{value}}</span>\
				<span class="{{css}}" style="display:table-cell;width:{{sizeColor}}px;height:{{sizeColor}}px;margin-right:5px;"></span>\
			</span>\
		</span>'
};

var _tableDesignProperties = {

	arrayTableColumn: function(parent, colInfo) {
		this.name = "arrayTableColumn";
		this.label = colInfo.$title || colInfo.$bind;
		this.parent = parent;
		this.colInfo = colInfo;
		if (parent.isSingleArray || !this.colInfo.$widthType) {
			this.colInfo.$widthType = "auto";
		}
		this._myProperties = [];

		this.createMarkup = function($$parent) {
			this.$$parent = $$parent;
			if (!parent.isSingleArray) {
				this.colNameChoiceAdd();
				this.colWidthTypeAdd();
				this.colWidthValAdd();
			}
			this.colXrefAdd();
		};

		this._add2PropHeading = function(title, prop, $$forceParent) {
			var $$root = $(_getHtml('subtitle', {
				title: title,
				margin: 10,
				id: prop.name
			})).appendTo($$forceParent || this.$$parent).find("div");
			if (prop.name === "selectName") {
				$$root.css({
					textOverflow: "inherit"
				});
			}
			if (prop.createMarkup) {
				prop.createMarkup($$root);
				this._myProperties.push(prop);
			} else if (prop.jquery) {
				$$root.append(prop);
			}
			return prop;
		};
		// COL NAME CHOICE
		this.colNameChoiceAdd = function() {
			var idx = this.parent.getProtoValByBind(this.colInfo.$bind).idx;
			var selectOpts = [];
			this.parent._protoValue.forEach(function(v) {
				selectOpts.push({
					title: v.$title,
					value: v.$bind
				});
			});
			var opts = {
				value: this.colInfo.$bind,
				options: selectOpts,
				onChange: jsutils.bindFn(this.colNameSelect, this),
			};
			this._add2PropHeading(locale.text('auth.tableDesign.selColName'), components.newComponent("select", opts, "selectName"));
		};
		this.colNameSelect = function(event, prop) {
			this.colInfo = this.parent.getProtoValByBind($(event.target).val()).value;
			var $$title = prop.$$panel.closest(".panel-primary").find(".panel-title");
			$$title.text(this.colInfo.$title);
			$$title.next("span").find("i").text(this.colInfo ? this.colInfo.$bind : "");
			this.$$xrefroot.toggle(this.colInfo.$type === "application/x-reference");
		};
		// COL TYPE WIDTH	
		this.colWidthTypeAdd = function() {
			this._add2PropHeading(locale.text("auth.tableDesign.width"), components.newComponent("flatRadio", {
				btns: [{
					value: "auto",
					title: locale.text("auth.tableDesign.auto")
				}, {
					value: "fixed",
					title: locale.text("auth.tableDesign.fixed")
				}, {
					value: "percent",
					title: "%"
				}],
				onClick: jsutils.bindFn(this.colWidthTypeChanged, this),
				value: this.colInfo.$widthType || "auto"
			}));
		};
		this.colWidthTypeChanged = function(evt) {
			if ($(evt.target).val() !== this.colInfo.$widthType) {
				this.colInfo.$widthType = $(evt.target).val();
				this.colWidthValUpdt();
			}
		};
		// COL VALUE	
		this.colWidthValAdd = function() {
			var opts = {
				slideHandler: jsutils.bindFn(this.colWidthValSlide, this),
				stopHandler: jsutils.bindFn(this.colWidthValChange, this),
				value: this.colInfo.$widthVal || 0,
				min: 0,
				max: this.colInfo.$widthType === "percent" ? 100 : _maxCharWidth,
				margin: 0
			};
			this.propWidthVal = this._add2PropHeading(locale.text("auth.tableDesign.selWidth"), components.newComponent("genericSlider", opts));
			this.colWidthValUpdt(opts.value);
		};
		this.colWidthValSlide = function(val, prop) {
			return this.colInfo.$widthType === "percent" ? val + "%" : val + " " + locale.text("auth.tableDesign.characters");
		};
		this.colWidthValChange = function(val, prop) {
			this.colInfo.$widthVal = val;
		};
		this.colWidthValUpdt = function(forceValue) {
			var section = this.propWidthVal.$$panel.closest("section");
			if (this.colInfo.$widthType == "auto") {
				section.hide();
				return;
			}
			section.show();
			this.propWidthVal.update({
				value: forceValue || (this.colInfo.$widthType === "percent" ? _defPercentWidth : _defCharWidth),
				max: this.colInfo.$widthType === "percent" ? 100 : _maxCharWidth,
			});
		};
		// COL X-REFERENCE
		this.colXrefAdd = function() {
			var style = this.colInfo.$type !== "application/x-reference" ? "display:none" : "";
			this.$$xrefroot = $('<section class="xrefColumn" style="' + style + '" ></section>').appendTo(this.$$parent);
			// Description format - $refDescPosition, $refDescFormat are x-reference properties
			// First
			var pos = this.colInfo["$refDescPosition"] || "none";
			this._xrefDescrPos = this._createXRefSelect("pos", ["bottom", "right", "left", "top", "none"], pos);
			// Second
			this._xrefDescrFmt = this._createXRefSelect("fmt", ["desc", "title", "desctitle", "titledesc"], this.colInfo["$refDescFormat"] || "desc");
			// hide fmt if pos == none
			this.$$xrefroot.find("#selectDescrfmt").toggle(pos !== "none");
		};
		this._createXRefSelect = function(type, codes, def) {
			var selectOpts = [];
			var defIdx = codes.indexOf(def);
			if (defIdx == -1) defIdx = 0;
			var textRoot = "auth." + (type == "fmt" ? "refDescFormat" : "refDescPosition");
			codes.forEach(function(code, idx) {
				selectOpts.push({
					// Used by colXrefChange
					code: code,
					title: locale.text(textRoot + "." + code),
					value: idx
				});
			});
			var opts = {
				value: defIdx,
				options: selectOpts,
				onChange: jsutils.bindFn(this.colXrefChange, this, type)
			};
			this._add2PropHeading(locale.text(textRoot), components.newComponent("select", opts, "selectDescr" + type), this.$$xrefroot);
			return selectOpts;
		},
		this.colXrefChange = function(event, prop, type) {
			var idx = parseInt($(event.target).val(), 10);
			var ref = type === "fmt" ? this._xrefDescrFmt : this._xrefDescrPos;
			ref = ref[idx].code;
			if (type == "pos") {
				// hide fmt if pos == none
				this.$$xrefroot.find("#selectDescrfmt").toggle(ref !== "none");
			}
			this.colInfo["$refDesc" + (type === "fmt" ? "Format" : "Position")] = ref;
		};
		this.destroyMarkup = function() {
			this.parent = null;
			this.colInfo = null;
			// Before
			if (this._myProperties) {
				this._myProperties.forEach(function(p) {
					if (p.destroyMarkup) p.destroyMarkup();
				});
				this._myProperties = null;
			}
			// After
			if (this.$$parent) {
				this.$$parent.closest(".s-m-panel-auth-prop").remove();
				this.$$parent = null;
			}
		};
	}

};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};

var _properties = {
	"arrayStatusEnabled": {
		"key": "$statusEnabled",
		"default": false,
		"values": [{
			"value": false,
		}, {
			"value": true
		}],
		createMarkup: authPropsGeneral.createMarkupRadio,
		refreshMarkup: authPropsGeneral.refreshMarkupRadio
	},

	"arrayDisplay": {
		"key": "$display",
		"default": "table",
		values: [{
			value: "table"
		}, {
			value: "card"
		}],
		createMarkup: authPropsGeneral.createMarkupRadio
	},

	// only card
	"arrayCardsPerRow": {
		"key": "$cardsPerRow",
		"default": "2",
		values: [{
			value: "1"
		}, {
			value: "2"
		}, {
			value: "3"
		}, {
			value: "4"
		}],
		createMarkup: authPropsGeneral.createMarkupRadio,
		refreshMarkup: authPropsGeneral.refreshMarkupRadio
	},


	"arrayStatus": function(controller, sel, data) {
		this.name = "arrayStatus";
		this.label = null;
		this["default"] = null;
		this.key = "$status";
		this.ctrlArray = data.control;
		this.displayMode = this.ctrlArray.article.$display || "table";
		this._myProperties = [];
		/** 
		 	data structure data.articleSelection.$status
		 		[{
					field: "BPCNUM",
					$type: "application/x-string",
					operator: "eq",
					value: 10,
					color:{
						name: "red",
						css: "s-m-status-red",
						bgcolor: "#FF0000",
						color: "#FFFFFF"
					}
				}]
		*/
		this.initMarkup = function(controller, sel, data) {
			this._protoValue = this.ctrlArray.prototype.arrayTableGetColInfo();
			var authStatus = data.articleSelection[this.key] || [];
			this.statusList = [];
			var self = this,
				proto;
			authStatus.forEach(function(c) {
				proto = self.getFieldProto(c.field);
				if (proto != null) {
					c = $.extend({}, true, c);
					c.id = utils.UUID();
					self.statusList.push(c);
				}
			});
		};
		this.getFieldProto = function(bind) {
			var res = null;
			this._protoValue.some(function(v, idx) {
				if (v.$bind === bind) {
					res = v;
					return true;
				}
			});
			return res;
		};
		this.getRecordInfo = function(id) {
			if (!id) return null;
			var idx = -1;
			var rec = null;
			this.statusList.some(function(c, i) {
				if (c.id === id) {
					rec = c;
					idx = i;
					return true;
				}
			});
			return idx === -1 ? null : {
				record: rec,
				idx: idx
			};
		};
		this.destroyMarkup = function() {
			this.ctrl = null;
			this.$$parent = null;
			this._protoValue = null;
			this.ctrlArray = null;
			if (this._myProperties) {
				this._myProperties.forEach(function(p) {
					if (p.destroyMarkup) p.destroyMarkup();
				});
				this._myProperties = null;
			}
		};

		this.createMarkup = function($$parent, prop, sel, data) {
			this.ctrl = data.control;
			this.$$parent = $$parent;
			this.statusListAdd(sel, data);
			this.editSectionAdd();
		};
		this.statusListAdd = function(sel, data) {
			var opts = {
				css: "statuslist",
				doAction: jsutils.bindFn(this.listCallBackAction, this, sel, data),
				appendTitle: locale.text("auth.arrayStatus.append")
			};
			this.listComponent = components.newComponent("editableList", opts);
			this._addParam("statuslist", this.listComponent, true);
			this.updateStatusList();
		};
		this.editSectionAdd = function() {
			this.editStatusSection = this._addSubSection("editstatus");
			this.editStatusSection.$$panel.hide();
			this.editStatusSection.$$content.css("padding-left", "7px");
			this.editStatusSection.$$title.css("font-weight", "bold");
			var $$rootComponents = this.editStatusSection.$$content;
			this.paramFieldAdd($$rootComponents);
			this.paramOperatorAdd($$rootComponents);
			this.paramValueAdd($$rootComponents);
			this.paramColorAdd($$rootComponents);
		};
		this.listCallBackAction = function(action, recordId, listComponent, sel, data) {
			if (action === "append") {
				this._updateParams(null);
				return true;
			}
			if (action === "cancel") {
				this._resetParams();
				this.editStatusSection.$$panel.hide();
				return true;
			}
			var recInfo = this.getRecordInfo(recordId);
			if (action === "validate") {
				var newRecord = this.validateRecord(true);
				if (newRecord) {
					if (recInfo == null) {
						// Validate Append
						this.statusList.push(newRecord);
					} else {
						// Validate Edit
						this.statusList.splice(recInfo.idx, 1);
						this.statusList.splice(recInfo.idx, 0, newRecord);
					}
					this.updateStatusList(true, sel, data);
					// Clears params
					this._resetParams();
					// Removes validate/cancel - Switchs to e'Append status'
					return true;
				} else {
					return false;
				}
			}
			if (action === "deleteItem") {
				if (!recInfo) return false;
				this.statusList.splice(recInfo.idx, 1);
				this.updateStatusList(true, sel, data);
				return true;
			}
			if (action === "editItem") {
				if (!recInfo) return false;
				this._updateParams(recInfo.record);
				return true;
			}
		};
		this.validateRecord = function(errorMsg) {
			var self = this;
			var _fail = function(msg) {
				if (errorMsg === true) {
					var text = msg || locale.text("auth.arrayStatus.invalid");
					self.listComponent.toggleMessage(text, "error");
					setTimeout(function() {
						self.listComponent.toggleMessage(null);
					}, 2500);
				}
				return null;
			};
			var rec = {};
			rec.field = this.fieldComponent.getValue();
			rec.operator = this.operatorComponent.getValue();
			var proto = this.getFieldProto(rec.field);
			if (!proto) {
				return _fail();
			}
			rec.$type = proto.$type;
			rec.$format = proto.$format;
			rec.value = this.$$valueElmt.val() || "";
			var formatter = formatApi.getFormatter(rec.$type, proto.$format);
			if (formatter) {
				var errors = [];
				rec.value = formatter.parseValue(rec.value, errors);
				if (errors.length > 0) {
					return _fail(errors.join(''));
				}
				if (rec.value != null && rec.value != this.$$valueElmt.val()) {
					this.$$valueElmt.val(formatter.formatValueEdit(rec.value));
				}
			}
			if (rec.$type == "application/x-reference") {
				rec.value = (rec.value || "").toUpperCase();
			}
			rec.color = this.paletteComponent.getValue();
			rec.id = utils.UUID();
			if (rec.field == _noValue || rec.operator == _noValue || rec.color == null) {
				return _fail();
			}
			return rec;
		};
		this._updateParams = function(record) {
			var edit = record != null;
			record = record || {};
			this.editStatusSection.$$panel.show();
			this.fieldComponent.setValue(record.field || _noValue);
			this.updateOperators(record.$type, record.operator || _noValue);
			this.paletteComponent.setValue(record.color);
			var val = record.value;
			if (val != null) {
				var formatter = formatApi.getFormatter(record.$type, record.$format);
				val = formatter ? formatter.formatValueEdit(val) : val;
			}
			this.$$valueElmt.val(val == null ? "" : val);
		};
		this._resetParams = function() {
			this.editStatusSection.$$panel.hide();
			this.fieldComponent.setValue(_noValue);
			this.operatorComponent.clear();
			this.paletteComponent.setValue("");
			this.$$valueElmt.val("");
		};
		this.updateStatusList = function(updateAuthoring, sel, data) {
			var clearBefore = true;
			if (clearBefore) {
				this.listComponent.clear();
			}
			var records = [];
			this.statusList.forEach(function(c) {
				records.push({
					titleHtml: _getHtml("statusLine", {
						field: c.field,
						operator: c.operator,
						value: c.value,
						css: c.color ? c.color.css : "",
						sizeColor: 15
					}),
					id: c.id
				});
			});
			this.listComponent.insertRecords(records);
			if (updateAuthoring == true) {
				var value = [];
				this.statusList.forEach(function(c) {
					c = $.extend({}, true, c);
					delete c.id;
					value.push(c);
				});
				authPropsGeneral.setValue(this, sel, data, value);
				authPropsGeneral.notifyChangePropUI(this.$$parent, sel, data);
				return;
			}
		};
		this.paramFieldAdd = function($$root) {
			var selectOpts = [{
				"title": locale.text('auth.arrayStatus.novalue'),
				"value": _noValue
			}];
			this._protoValue.forEach(function(v, idx) {
				if (fieldOperators.acceptOperator(v.$type)) {
					selectOpts.push({
						title: v.$title,
						value: v.$bind
					});
				}
			});
			var opts = {
				value: _noValue,
				options: selectOpts,
				css: "statusField",
				onChange: jsutils.bindFn(this.onParamFieldSelect, this),
				isHidden: false
			};
			this.fieldComponent = components.newComponent("select", opts);
			this._addParam("field", this.fieldComponent, true, $$root, true);
		};

		this.paramOperatorAdd = function($$root) {
			var opts = {
				value: _noValue,
				options: [{
					"title": locale.text('auth.arrayStatus.novalue'),
					"value": _noValue
				}],
				css: "statusOperator",
				onChange: jsutils.bindFn(this.onParamOperatorSelect, this),
				isHidden: false
			};
			this.operatorComponent = components.newComponent("select", opts);
			this._addParam("operator", this.operatorComponent, true, $$root, true);
			this.updateOperators();
		};
		this.paramValueAdd = function($$root) {
			this.$$valueElmt = $('<input class="form-control statusValue"></input>');
			this._addParam("value", this.$$valueElmt, true, $$root);
		};
		this.paramColorAdd = function($$root) {
			var opts = {
				palette: [],
				dropUp: true
			};
			_statusPalette.forEach(function(c) {
				opts.palette.push({
					name: c,
					css: "s-m-status-" + c
				});
			});
			this.paletteComponent = components.newComponent("colorPalettePicker", opts);
			this._addParam("csscolor", this.paletteComponent, true, $$root, true);
		};
		this.onParamFieldSelect = function(event, prop) {
			var field = this.getFieldProto($(event.target).val());
			this.updateOperators(field.$type, "eq");
		};
		this.updateOperators = function(typeField, defValue) {
			defValue = defValue == null ? _noValue : defValue;
			var selectOpts = [{
				"title": locale.text('auth.arrayStatus.novalue'),
				"value": _noValue
			}];
			var ops = fieldOperators.getOperators(typeField, true);
			if (ops) {
				ops.forEach(function(v, idx) {
					selectOpts.push({
						title: v.title,
						value: v.value
					});
				});
			}
			this.operatorComponent.update(selectOpts, defValue);
		};
		this.onParamOperatorSelect = function(event, prop) {};
		this._addParam = function(prop, component, title, $$parent, mandatory) {
			var $$parent = $$parent || this.$$parent;
			var $$title;
			var $$root;
			if (title) {
				var res = this._addSubSection(prop, $$parent, mandatory);
				$$root = res.$$content;
				$$title = res.$$panel;
			} else {
				$$root = $$parent;
			}
			if (component == null) throw new Error("unexpected null component");
			var $$panel;
			if (component.createMarkup) {
				component.createMarkup($$root);
				this._myProperties.push(component);
				$$panel = component.$$panel;
			} else if (component.jquery) {
				$$root.append(component);
				$$panel = component;
			}
			return $$title ? $$title : $$panel;
		};
		this._addSubSection = function(textId, $$parent, mandatory) {
			var $$panel = $(_getHtml('subtitle', {
				title: locale.text('auth.arrayStatus.' + textId) + (mandatory === true ? "*" : ""),
				margin: 10,
				id: "arrayStatus" + textId.smCapitalize()
			})).appendTo($$parent || this.$$parent);
			return {
				$$panel: $$panel,
				$$content: $$panel.children("div"),
				$$title: $$panel.children("p")
			};
		};
	},

	// only card
	"arrayCardsMinWidth": function(controller, sel, data) {
		this.name = "arrayCardsMinWidth";
		this.label = null;
		this.key = "$minWidth";
		this["default"] = 1;
		this.min = 0;
		this.max = 20;
		this.step = 1;

		this.createMarkup = function($$parent, prop, sel, data) {
			this.ctrl = data.control;
			this.$$parent = $$parent;
			this.originValue = authPropsGeneral.getValueOrDefault(this, sel, data);
			var opts = {
				id: "auth_opt_" + this.name,
				value: this.originValue,
				min: this.min,
				max: this.max,
				step: this.step || 1,
				slideHandler: jsutils.bindFn(this.onSlide, this, "slide"),
				startHandler: jsutils.bindFn(this.onSlide, this, "start"),
				stopHandler: jsutils.bindFn(this.onSlide, this, "stop", sel, data)
			};
			this._slider = components.newComponent("genericSlider", opts);
			this._slider.createMarkup($$parent);
		};

		this.onSlide = function(value, prop, action, sel, data) {
			var res = this.ctrl.authOnSlideMinSize(value, action);
			if (action === "slide") return res;
			if (action === "stop" && this.originValue != value) {
				authPropsGeneral.setValue(this, sel, data, value);
				authPropsGeneral.notifyChangePropUI(this.$$parent, sel, data);
			}
		};

		this.destroyMarkup = function() {
			this.ctrl = null;
			this.$$parent = null;
			if (this.$$slider) {
				this.$$slider.slider('destroy');
				this.$$slider = null;
			}
			if (this.$$Button) {
				this.$$Button.off("click");
				this.$$Button = null;
			}
		};

		this._sliderSetValue = function(slideEvt, $$parent, sel, data, originValue) {
			this.ctrl.authOnSlideMinSize(slideEvt, "stop");
			if (originValue != slideEvt.value) {
				authPropsGeneral.setValue(this, sel, data, slideEvt.value);
				authPropsGeneral.notifyChangePropUI($$parent, sel, data);
			}
		};


	},
	/**
	 * Optional sel, data
	 * 	 not null when button property is created like a regular panel propety
	 *	 null when property is created from rightPanel (back from cardDesign to array)
	 */
	"arrayCardButton": function(controller, sel, data) {
		this.name = null;
		this.label = null;
		this.key = null;
		this.controller = controller;
		if (data) {
			this.control = data.control;
		}
		this.createButtonMarkup = function() {
			var saveDesign = this.isSaveButton();
			var text = locale.text("auth.tableDesign." + (saveDesign ? "saveDesign" : "openDesign"));
			this.$$Button = $('<button id="auth_opt_card_design" type="button" class="btn btn-default">' + text + '</button>');
			this.$$Button.on("click", jsutils.bindFn(this.onClickButton, this, saveDesign));
			return this.$$Button;
		};

		this.destroyButtonMarkup = function(context) {
			if (context && context.origin == "selection" && this.isSaveButton()) {
				// No destroy in that case - button remains displayed when we select a ctrl/layout
				// False to tell controller to remove the button
				return false;
			}
			this.control = null;
			this.controller = null;
			if (this.$$Button) {
				// $$slider.find(".$$slider") to make sur the plugin has been initialized
				this.$$Button.off("click");
				this.$$Button.remove();
				this.$$Button = null;
			}
		};

		this.onClickButton = function(evt, closeDesign) {
			if (closeDesign) {
				eventListener.triggerAction(this.controller.$$elmt, "saveCardDesign");
			} else if (this.control) {
				// Trigger a navigation to carddesign page
				var attrs = {
					"data-control-id": this.control.id,
					"data-parent-id": this.controller.id,
					"data-nav": "carddesign",
					"data-nav-target": "application"
				};
				eventListener.triggerNavigation(this.control.$$elmt, attrs);
			}
		};
		this.isSaveButton = function() {
			return this.controller && this.controller.state.type == "carddesign";
		};
	},

	// only card
	"arrayCardsEmptyCells": {
		"key": "$emptycell",
		"default": "nodisplay",
		values: [{
			value: "filled"
		}, {
			value: "withtitle"
		}, {
			value: "nodisplay"
		}],
		createMarkup: authPropsGeneral.createMarkupRadio,
		refreshMarkup: authPropsGeneral.refreshMarkupRadio
	},

	// only query array
	"arrayProtoFilters": function(controller, sel, data) {
		this.name = "arrayProtoFilters";
		this.label = null;
		this.key = "$filters";
		// No filters displayed by default for vignette
		this["default"] = controller.isVignette ? "none" : "list";
		this.values = [{
			value: "list"
		}, {
			value: "tabs"
		}, {
			value: "none"
		}];
		this.createMarkup = authPropsGeneral.createMarkupRadio;
		this.refreshMarkup = authPropsGeneral.refreshMarkupRadio;
	},

	// only query array - link to details values are created dynamically
	"arrayQueryLink": function(controller, sel, data) {
		this.name = "arrayQueryLink";
		this.label = null;
		this.isHidden = true;
		this.values = [];
		this.key = "$detailsLink";
		this["default"] = "$details";
		this.createMarkup = authPropsGeneral.createMarkupRadio;
		this.refreshMarkup = authPropsGeneral.refreshMarkupRadio;

		this.initMarkup = function(controller, sel, data) {
			var links = data.control.prototype.getDataByPath("$item.$links");
			if (!links || links.length === 0) return;
			if (controller.isVignette) {
				// Add the capability to open query full page - Default option
				this["default"] = "$queryfullpage";
				this.values.push({
					value: "$queryfullpage",
					label: locale.text("auth.arrayQueryLink.queryfullpage")
				});
			}
			var self = this;
			// Add $links
			$.each(links, function(key, link) {
				if (link && link.$method === "GET") {
					self.values.push({
						value: key,
						label: link.$title ? controller.prototype.resolveExpression(link.$title) + " - " + key : key
					});
				}
			});
			this.isHidden = (this.values.length === 1 && this.values[0].value === "$details");
		};
	},

	// Header - Pagination/Sort/Filters options
	"arrayHeader": function(controller, sel, data) {
		this.name = "arrayHeader";
		this.label = null;
		this.key = "$headerOptions";

		// No filters displayed by default for vignette
		this.values = [{
			"key": "showPagination",
			"default": controller.isVignette ? false : true
		}, {
			"key": "showSortFilter",
			"default": controller.isVignette ? false : true
		}, {
			"key": "showSearch",
			"default": controller.isVignette ? false : true
		}];
		this.createMarkup = authPropsGeneral.createMarkupCheckboxes;
		this.refreshMarkup = authPropsGeneral.refreshMarkupCheckboxes;
	},

	// Table mode only
	"arrayTableHeader": {
		"key": "$tableHeaderShow",
		"default": true,
		values: [{
			value: true
		}, {
			value: false
		}],
		createMarkup: authPropsGeneral.createMarkupRadio,
		refreshMarkup: authPropsGeneral.refreshMarkupRadio
	},

	// only card
	"arrayTableDesign": function(controller, sel, data) {
		this.isHidden = false;
		this.name = "arrayTableDesign";
		this.label = null;
		this.key = "$table";
		this.controller = controller;
		this.ctrlArray = data.control;
		this._generalProperties = [];
		this._columnProperties = [];
		this._protoValue = [];

		this.initMarkup = function(controller, sel, data) {
			this._protoValue = this.ctrlArray.prototype.arrayTableGetColInfo();
			this.isSingleArray = this.ctrlArray.prototype.isSingleArray() || this._protoValue.length <= 1;
			this._orginalValue = data.articleSelection.$table;
			var hasValue = this._orginalValue != null && this._orginalValue.length > 0;
			if (!hasValue) {
				this._orginalValue = null;
			}
			this._initProps(hasValue ? this._orginalValue : this._protoValue);
			if (!this.isSingleArray) {
				this.addPropNbColumns();
			} else {
				this.isHidden = this._protoValue.length === 0 || this._protoValue[0].$type !== "application/x-reference";
			}
			if (!this.isHidden) {
				this.addPropActionButtons(sel, data);
			}
		};

		this._initProps = function(props, createEntry) {
			var self = this;
			self._columnProperties = [];
			props.forEach(function(prop) {
				self._createColumnProperty(prop, createEntry);
			});
		};

		this.addPropNbColumns = function() {
			var opts = {
				slideHandler: function(val) {
					return val + " columns";
				},
				stopHandler: jsutils.bindFn(this.updateColumns, this),
				value: this._columnProperties.length,
				min: 1,
				max: this._protoValue.length,
				displayValue: "above"
			};
			this._generalProperties.push(components.newComponent("genericSlider", opts, "nbcolumns"));
		};

		this._updateNbCols = function() {
			var prop;
			this._generalProperties.some(function(p) {
				if (p.name === "nbcolumns") {
					prop = p;
					return true;
				}
			});
			prop.update({
				value: this._columnProperties.length
			});
		};

		this.addPropActionButtons = function(sel, data) {
			var btns = [{
				value: "save",
				title: locale.text("auth.tableDesign.save")
			}];
			this._generalProperties.push(components.newComponent("actionBtns", {
				btns: btns,
				onClick: jsutils.bindFn(this.onClickAction, this, sel, data)
			}));
		};

		this.onClickAction = function(evt, sel, data) {
			var action = $(evt.target).val();
			if (action === "save") {
				var value = [],
					entry;
				var self = this,
					conf;
				this._columnProperties.forEach(function(prop) {
					if (!prop.colInfo) return;
					entry = {};
					_tableConfigKeys.forEach(function(p) {
						conf = prop.colInfo[p];
						if (conf != null) {
							entry[p] = $.isPlainObject(conf) ? $.extend(true, {}, conf) : conf;
						}
					});
					value.push(entry);
				});
				//console.log(JSON.stringify(value, null, 2));
				authPropsGeneral.setValue(this, sel, data, value);
				authPropsGeneral.notifyChangePropUI(this.$$parent, sel, data);
				return;
			}
			// restore/all - Not used - Wait for the global undo button implementation to remove them
			if (action === "restore") {
				if (this._orginalValue) {
					this._clearColumns();
					this._initProps($.extend(true, [], this._orginalValue), true);
					this._updateNbCols();
					return;
				}
				action = "all";
			}
			if (action === "all") {
				this.updateColumns(null);
				this._updateNbCols();
				return;
			}
		};

		this.createMarkup = function($$parent, prop, sel, data) {
			this.$$parent = $$parent;
			this._accordionId = utils.UUID();
			this.$$myAccordion = $('<div id="' + this._accordionId + '" ></div>');
			$$parent.append(this.$$myAccordion);
			var self = this,
				$$entry;
			self._generalProperties.forEach(function(prop) {
				$$entry = $(_getHtml('subtitle', {
					title: prop.label ? prop.label || prop.name : null,
				}));
				// create sub-property
				prop.createMarkup($$entry.find("div"));
				self.$$myAccordion.append($$entry);
			});
			self._columnProperties.forEach(function(prop) {
				self._createColEntry(prop);
			});
		};

		this._createColEntry = function(prop) {
			var id = utils.UUID();
			var $$parent;
			if (!this.isSingleArray) {
				var $$propGroup = $(_getHtml("subPropTitle", {
					id: id,
					type: "child columns",
					label: prop.label,
					info: prop.colInfo ? prop.colInfo.$bind : null,
					expanded: false,
					parentId: this._accordionId
				}));
				$$parent = $$propGroup.find("#collapse_" + id);
				this.$$myAccordion.append($$propGroup);
			} else {
				this.$$myAccordion.append($$propGroup);
				$$parent = $('<div style="padding-left:10px;padding-right:10px;"></div>').appendTo(this.$$myAccordion);
			}
			// create sub-property
			prop.createMarkup($$parent);
		};

		this.destroyMarkup = function() {
			this.$$parent = null;
			this.ctrlArray = null;
			this.controller = null;
			this._getAllProps().forEach(function(p) {
				p.destroyMarkup();
			});
			this._generalProperties = null;
			this._columnProperties = null;
		};

		this._getAllProps = function() {
			return (this._generalProperties || []).concat(this._columnProperties || []);
		};

		this.updateColumns = function(nbCols) {
			if (this.$$myAccordion) {
				this.$$myAccordion.find(".collapse").collapse('hide');
			}
			var init = nbCols == null;
			nbCols = init ? this._protoValue.length : nbCols;
			var startFrom = 0;
			if (init) {
				this._clearColumns();
			} else if (this._columnProperties.length > 0) {
				for (var i = this._columnProperties.length - 1; i >= nbCols; i--) {
					this._columnProperties[i].destroyMarkup();
					this._columnProperties.splice(i, 1);
				}
				startFrom = this._columnProperties.length;
			}
			for (var i = startFrom; i < nbCols; i++) {
				this._createColumnProperty(this._protoValue[i], true);
			}
		};

		this._createColumnProperty = function(config, createEntry) {
			config.$title = this.controller.prototype.resolveExpression(config.$title) || config.$bind;
			var prop = new _tableDesignProperties.arrayTableColumn(this, config);
			this._columnProperties.push(prop);
			if (createEntry) {
				this._createColEntry(prop);
			}
			return prop;
		};

		this._clearColumns = function() {
			if (this._columnProperties) {
				this._columnProperties.forEach(function(p) {
					p.destroyMarkup();
				});
			}
			this._columnProperties = [];
		};

		this.getProtoValByIdx = function(idx) {
			if (idx < 0 || idx >= this._protoValue.length) throw new Error("unexpected bad index[" + idx + "]");
			return this._protoValue[idx];

		};

		this.getProtoValByBind = function(bind) {
			var res = null;
			this._protoValue.some(function(v, idx) {
				if (v.$bind === bind) {
					res = {
						idx: idx,
						value: v
					};
					return true;
				}
			});
			if (res == null) throw new Error("unexpected null value - bind=[" + bind + "]");
			return res;
		};

		this.getProtoValLength = function() {
			return this._protoValue.length;
		};
	}
};

var _checkDisplay = function(sel, data, display) {
	return display === authPropsGeneral.getValueOrDefault(_properties.arrayDisplay, sel, data);
};

exports.initModuleProperties = function(dest) {
	authPropsGeneral.initProperties(_properties, dest);
};

exports.getModuleProperties = function($$elmt, controller, props, sel, data) {
	var isQueryLookup = controller.prototype.isLookup() || controller.prototype.isQuery();
	var singleArray = data.control.prototype.isSingleArray();
	if (isQueryLookup) {
		// No pagination/Filters in detail fileds arrays
		props.push(_properties.arrayHeader);
	}
	if (isQueryLookup && controller.$filtersGet() && controller.$filtersGet().length > 1) {
		props.push(_properties.arrayProtoFilters);
	}
	if (controller.prototype.isQuery()) {
		props.push(_properties.arrayQueryLink);
	}
	if (!singleArray) {
		// Force table for single array
		props.push(_properties.arrayDisplay);
	}
	if (_checkDisplay(sel, data, "card")) {
		if (!singleArray) {
			props.push(_properties.arrayCardsPerRow, _properties.arrayCardsMinWidth, _properties.arrayCardsEmptyCells, _properties.arrayCardButton);
		}
	} else if (_checkDisplay(sel, data, "table")) {
		if (!singleArray) {
			props.push(_properties.arrayTableHeader);
		}
		props.push(_properties.arrayTableDesign);
	}
	if (!controller.prototype.isLookup()) {
		props.push(_properties.arrayStatusEnabled);
		if (data.control.getAuthoring("$statusEnabled") == true) {
			props.push(_properties.arrayStatus);
		}
	}
};

exports.getCardDesignBackButton = function(controller) {
	return new _properties.arrayCardButton(controller);
};