"use strict";
var authPropsGeneral = require('syracuse-tablet/html/js/authoring/authoringPropertiesGeneral');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _templates = {
	subtitle: '\
		<section {{#if id}}id="{{id}}"{{/if}} style="{{#if notHidden}}overflow:hidden;{{/if}}white-space:nowrap;text-overflow:ellipsis;{{#if margin}}margin-bottom:{{margin}}px;{{/if}}">\
			{{#if title}}<p>{{title}}</p>{{/if}}\
			<div></div>\
		</section>',
	subPropTitle: ' \
		<div class="panel panel-primary s-m-panel-auth-prop s-m-auth-prop-type-{{type}}"> \
			<div style="overflow:hidden;" class="panel-heading" role="tab" id="heading_{{id}}"> \
				<a style="width:100%;display:table;" data-toggle="collapse" data-parent="#{{#if parentId}}{{parentId}}{{/if}}{{#unless parentId}}accordion{{/unless}}" href="#collapse_{{id}}" {{#if expanded}} aria-expanded="true"{{/if}} aria-controls="collapse_{{id}}" {{#unless expanded}}class="collapsed"{{/unless}}>\
					<div style="display:table-row;white-space: nowrap;">\
						<h4 class="panel-title" style="display:table-cell;"> \
							{{label}}\
						</h4> \
						{{#if info}}<span style="padding-left: 10px;font-size:x-small;display:table-cell;text-align: right;"><i>{{info}}</i></span>{{/if}}\
					</div>\
				</a> \
			</div> \
			<div id="collapse_{{id}}" class="panel-collapse collapse {{#if expanded}}in{{/if}}" role="tabpanel" aria-labelledby="heading_{{id}}"> \
			</div> \
		</div>',
	statusLine: '\
		<span style="display:table;table-layout:fixed;width:100%">\
			<span style="display:table-row;">\
				<span style="display:table-cell;overflow:hidden;text-overflow:ellipsis;white-space: nowrap;">{{field}} {{operator}} {{value}}</span>\
				<span class="{{css}}" style="{{style}}display:table-cell;width:{{sizeColor}}px;height:{{sizeColor}}px;margin-right:5px;"></span>\
			</span>\
		</span>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};

var _properties = {

	"arrayDisplay": {
		"key": "$display",
		"default": "table",
		values: [{
			value: "table"
		}, {
			value: "card"
		}],
		createMarkup: authPropsGeneral.createMarkupRadio
	},

	// only query array
	"arrayProtoFilters": function(controller, sel, data) {
		this.name = "arrayProtoFilters";
		this.label = null;
		this.key = "$filters";
		// No filters displayed by default for vignette
		this["default"] = controller.isVignette ? "none" : "list";
		this.values = [{
			value: "list"
		}, {
			value: "tabs"
		}, {
			value: "none"
		}];
		this.createMarkup = authPropsGeneral.createMarkupRadio;
		this.refreshMarkup = authPropsGeneral.refreshMarkupRadio;
	},

	// only query array - link to details values are created dynamically
	"arrayQueryLink": function(controller, sel, data) {
		this.name = "arrayQueryLink";
		this.label = null;
		this.isHidden = true;
		this.values = [];
		this.key = "$detailsLink";
		this["default"] = "$details";
		this.createMarkup = authPropsGeneral.createMarkupRadio;
		this.refreshMarkup = authPropsGeneral.refreshMarkupRadio;

		this.initMarkup = function(controller, sel, data) {
			var links = data.control.prototype.getDataByPath("$item.$links");
			if (!links || links.length === 0) return;
			if (controller.isVignette) {
				// Add the capability to open query full page - Default option
				this["default"] = "$queryfullpage";
				this.values.push({
					value: "$queryfullpage",
					label: locale.text("auth.arrayQueryLink.queryfullpage")
				});
			}
			var self = this;
			// Add $links
			$.each(links, function(key, link) {
				if (link && link.$method === "GET") {
					self.values.push({
						value: key,
						label: link.$title ? controller.prototype.resolveExpression(link.$title) + " - " + key : key
					});
				}
			});
			this.isHidden = (this.values.length === 1 && this.values[0].value === "$details");
		};
	},

	// Options of array
	"arrayOptions": function(controller, sel, data) {
		this.name = "arrayOptions";
		this.label = null;
		this.key = "$arrayOptions";
		if (!data.control.isArrayField()) {
			this.values = [{
				"key": "showPagination",
				"default": controller.isVignette ? false : true
			}, {
				"key": "showSortFilter",
				"default": controller.isVignette ? false : true
			}, {
				"key": "showSearch",
				"default": controller.isVignette ? false : true
			}];
		} else {
			this.values = [];
		}
		this.values.push({
			"key": "rowIndex",
			"default": exports.checkDisplay(sel, data, "card")
		});
		this.createMarkup = authPropsGeneral.createMarkupCheckboxes;
		this.refreshMarkup = authPropsGeneral.refreshMarkupCheckboxes;
	}
};

exports.getHtml = _getHtml;

exports.checkDisplay = function(sel, data, display) {
	return display === authPropsGeneral.getValueOrDefault(_properties.arrayDisplay, sel, data);
};

exports.initModuleProperties = function(dest) {
	authPropsGeneral.initProperties(_properties, dest);
};

exports.getModuleProperties = function($$elmt, controller, props, sel, data) {
	if (!data.control.prototype.isSingleArray()) {
		// Force table for single array
		props.push(_properties.arrayDisplay);
	}
	props.push(_properties.arrayOptions);
	if (!data.control.isArrayField() && controller.$filtersGet() && controller.$filtersGet().length > 1) {
		props.push(_properties.arrayProtoFilters);
	}
	if (controller.prototype.isQuery()) {
		props.push(_properties.arrayQueryLink);
	}
};