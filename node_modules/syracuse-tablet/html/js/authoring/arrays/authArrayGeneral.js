"use strict";
var authPropsGeneral = require('syracuse-tablet/html/js/authoring/authoringPropertiesGeneral');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

var _templates = {
	subtitle: '\
		<section class="s-m-prop-subtitle" {{#if id}}id="{{id}}"{{/if}} style="{{#if notHidden}}overflow:hidden;{{/if}}white-space:nowrap;text-overflow:ellipsis;{{#if margin}}margin-bottom:{{margin}}px;{{/if}}">\
			{{#if title}}<p>{{title}}</p>{{/if}}\
			<div></div>\
		</section>',
	subPropTitle: ' \
		<div class="panel panel-primary s-m-panel-auth-prop s-m-auth-prop-type-{{type}}"> \
			<div style="overflow:hidden;" class="panel-heading" role="tab" id="heading_{{id}}"> \
				<a style="width:100%;display:table;" data-toggle="collapse" data-parent="#{{#if parentId}}{{parentId}}{{/if}}{{#unless parentId}}accordion{{/unless}}" href="#collapse_{{id}}" {{#if expanded}} aria-expanded="true"{{/if}} aria-controls="collapse_{{id}}" {{#unless expanded}}class="collapsed"{{/unless}}>\
					<div style="display:table-row;white-space: nowrap;">\
						<h4 class="panel-title" style="display:table-cell;"> \
							{{label}}\
						</h4> \
						{{#if info}}<span style="padding-left: 10px;font-size:x-small;display:table-cell;text-align: right;"><i>{{info}}</i></span>{{/if}}\
					</div>\
				</a> \
			</div> \
			<div id="collapse_{{id}}" class="panel-collapse collapse {{#if expanded}}in{{/if}}" role="tabpanel" aria-labelledby="heading_{{id}}"> \
			</div> \
		</div>',
	statusLine: '\
		<span style="display:table;table-layout:fixed;width:100%">\
			<span style="display:table-row;">\
				<span style="display:table-cell;overflow:hidden;text-overflow:ellipsis;white-space: nowrap;">{{field}} {{operator}} {{value}}</span>\
				<span class="{{css}}" style="{{style}}display:table-cell;width:{{sizeColor}}px;height:{{sizeColor}}px;margin-right:5px;"></span>\
			</span>\
		</span>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};

var _properties = {
	/**
	 * Optional sel, data
	 * 	 not null when button property is created like a regular panel propety
	 *	 null when property is created from rightPanel (back from cardDesign to array)
	 */
	"chartDetailButton": function(controller, sel, data) {
		this.name = null;
		this.label = null;
		this.key = null;
		this.controller = controller;
		this.control = data.control;
		this.createButtonMarkup = function() {
			this.$$OpenButton = $('<button id="auth_opt_chart_design" type="button" class="btn btn-default">' + locale.text("auth.chartDetail.openDesign") + '</button>');
			this.$$OpenButton.on("click", jsutils.bindFn(this.onClickButton, this));
			return this.$$OpenButton;
		};

		this.destroyButtonMarkup = function(context) {
			this.control = null;
			this.controller = null;
			if (this.$$OpenButton) {
				// $$slider.find(".$$slider") to make sur the plugin has been initialized
				this.$$OpenButton.off("click");
				this.$$OpenButton.remove();
				this.$$OpenButton = null;
			}
		};

		this.onClickButton = function(evt) {
			this.control.triggerOpenChartDetail();
			this.destroyButtonMarkup();
		};
	},
	"arrayDisplay": function(controller, sel, data) {
		this.name = "arrayDisplay";
		this.label = null;
		this.key = "$display";
		this["default"] = "table";
		this.values = [{
			value: "table"
		}];
		if (data.control.prototype.isSingleArray()) {
			this.values.push({
				value: "separator"
			});
		} else {
			this.values.push({
				value: "card"
			}, {
				value: "carousel"
			});
		}
		if (data.control.isArrayChart()) {
			this.values.push({
				value: "chart"
			});
		}
		this.createMarkup = authPropsGeneral.createMarkupRadio;
		this.refreshMarkup = authPropsGeneral.refreshMarkupRadio;
	},
	// only card
	"arraySeparator": {
		"key": "$separator",
		"default": "blank",
		values: [{
			value: "blank"
		}, {
			value: "dash"
		}, {
			value: "colon"
		}, {
			value: "semicolon"
		}],
		createMarkup: authPropsGeneral.createMarkupRadio,
		refreshMarkup: authPropsGeneral.refreshMarkupRadio
	},
	// only query array
	"arrayProtoFilters": function(controller, sel, data) {
		this.name = "arrayProtoFilters";
		this.label = null;
		this.key = "$filters";
		// No filters displayed by default for vignette
		this["default"] = controller.isVignette ? "none" : "list";
		this.values = [{
			value: "list"
		}, {
			value: "tabs"
		}, {
			value: "none"
		}];
		this.createMarkup = authPropsGeneral.createMarkupRadio;
		this.refreshMarkup = authPropsGeneral.refreshMarkupRadio;
	},

	// only query array - link to details values are created dynamically
	"arrayQueryLink": function(controller, sel, data) {
		this.name = "arrayQueryLink";
		this.label = null;
		this.isHidden = true;
		this.values = [];
		this.key = "$detailsLink";
		this["default"] = "$details";
		this.createMarkup = authPropsGeneral.createMarkupRadio;
		this.refreshMarkup = authPropsGeneral.refreshMarkupRadio;

		this.initMarkup = function(controller, sel, data) {
			var links = data.control.prototype.getDataByPath("$item.$links");
			if (!links || links.length === 0) return;
			if (controller.isVignette) {
				// Add the capability to open query full page - Default option
				this["default"] = "$queryfullpage";
				this.values.push({
					value: "$queryfullpage",
					label: locale.text("auth.arrayQueryLink.queryfullpage")
				});
			}
			var self = this;
			// Add $links
			$.each(links, function(key, link) {
				var method = (link && link.$method) || "GET";
				if (link && method === "GET") {
					// For system level links (starting with $, we only allow the ones we know they are supported right now)
					if (key.indexOf("$") !== 0 || ["$edit", "$details"].indexOf(key) > -1) {
						self.values.push({
							value: key,
							label: link.$title ? controller.prototype.resolveExpression(link.$title) + " - " + key : key
						});
					}
				}
			});
			this.isHidden = (this.values.length === 1 && this.values[0].value === "$details");
		};
	},

	// Options of array
	"arrayOptions": function(controller, sel, data) {
		this.name = "arrayOptions";
		this.label = null;
		this.key = "$arrayOptions";
		var ctrl = data.control;
		this.values = [];
		if (ctrl.$display === "card" && ctrl.isCarouselDisplay()) {
			// Only rowIndex for carousel
			this.values.push({
				"key": "rowIndex",
				"default": true
			});
		} else if (ctrl.isArrayChart() && ctrl.isHighChart()) {
			// Only pagination for array in chart display
			this.values.push({
				"key": "showPagination",
				"default": false
			});
		} else {
			// Other than chart display
			if (!ctrl.isArrayField()) {
				// Arrays outside a details page
				this.values.push({
					"key": "showPagination",
					"default": controller.isVignette ? false : true
				});
				if (!ctrl.isArrayChart()) {
					// Filter and search disabled for request and stats
					this.values.push({
						"key": "showSortFilter",
						"default": controller.isVignette ? false : true
					});
					this.values.push({
						"key": "showSearch",
						"default": controller.isVignette ? false : true
					});
				}
			}
			if (ctrl.$display === "table" && !ctrl.prototype.isSingleArray() && !ctrl.isArrayChart()) {
				this.values.push({
					"key": "showRowDetailLink",
					// No row detail link by default
					"default": false
				});
			}
			this.values.push({
				"key": "rowIndex",
				"default": ctrl.$display === "card"
			});
			if (ctrl.$display === "card") {
				this.values.push({
					"key": "hideEmptyRows",
					"default": false
				});
			}
		}
		this.createMarkup = authPropsGeneral.createMarkupCheckboxes;
		this.refreshMarkup = authPropsGeneral.refreshMarkupCheckboxes;
	}
};

exports.getHtml = _getHtml;

exports.initModuleProperties = function(dest) {
	authPropsGeneral.initProperties(_properties, dest);
};

exports.getModuleProperties = function($$elmt, controller, props, sel, data) {
	if (controller.state.type !== "chartdetail" && data.control.isArrayChart()) {
		// button to open the detail of the chart (to design it)
		props.push(_properties.chartDetailButton);
	}
	props.push(_properties.arrayDisplay);
	if (data.control.$display === "separator") {
		props.push(_properties.arraySeparator);
	} else {
		// For chart and other arrays
		props.push(_properties.arrayOptions);
		if (!sel.$$elmt.is(".s-m-control.s-m-chart")) {
			// For non-chart arrays
			if (!data.control.isArrayField() && controller.$filtersGet() && controller.$filtersGet().length > 1) {
				props.push(_properties.arrayProtoFilters);
			}
			if (controller.prototype.isQuery()) {
				props.push(_properties.arrayQueryLink);
			}
		}
	}
};