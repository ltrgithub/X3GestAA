"use strict";
var authComponents = require('syracuse-tablet/html/js/authoring/authoringComponents');
var authPropsGeneral = require('syracuse-tablet/html/js/authoring/authoringPropertiesGeneral');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

var _properties = {

	// only card
	"arrayCardsPerRow": {
		"key": "$cardsPerRow",
		"default": "2",
		values: [{
			value: "1"
		}, {
			value: "2"
		}, {
			value: "3"
		}, {
			value: "4"
		}],
		createMarkup: authPropsGeneral.createMarkupRadio,
		refreshMarkup: authPropsGeneral.refreshMarkupRadio
	},

	/*
	 * Color of tile and layout cell
	 */
	"arrayBgColor": {
		"key": "$arrayBgColor",
		"default": "",
		"colorChange": function(value, sel, data, prop) {
			authPropsGeneral.setValue(this, sel, data, (value ? value.id : ""));
			authPropsGeneral.notifyChangePropUI(this.$$parent, sel, data);
		},
		"createMarkup": function($$parent, prop, sel, data) {
			var opts = {
				color: "",
				palette: authPropsGeneral.getColorPalette(),
				dropUp: false,
				onSelectColor: jsutils.bindFn(this.colorChange, this, sel, data, prop)
			};
			this.paletteColor = authComponents.newComponent("colorPalettePicker", opts);
			this.paletteColor.createMarkup($$parent);
			this.paletteColor.setValue(authPropsGeneral.getColorInfo(data.control.article.$arrayBgColor));
		}
	},
	// only card
	"arrayCardsMinWidth": function(controller, sel, data) {
		this.name = "arrayCardsMinWidth";
		this.label = null;
		this.key = "$minWidth";
		this["default"] = 1;
		this.min = 0;
		this.max = 20;
		this.step = 1;

		this.createMarkup = function($$parent, prop, sel, data) {
			this.ctrl = data.control;
			this.$$parent = $$parent;
			this.originValue = authPropsGeneral.getValueOrDefault(this, sel, data);
			var opts = {
				id: "auth_opt_" + this.name,
				value: this.originValue,
				min: this.min,
				max: this.max,
				step: this.step || 1,
				slideHandler: jsutils.bindFn(this.onSlide, this, "slide"),
				startHandler: jsutils.bindFn(this.onSlide, this, "start"),
				stopHandler: jsutils.bindFn(this.onSlide, this, "stop", sel, data)
			};
			this._slider = authComponents.newComponent("genericSlider", opts);
			this._slider.createMarkup($$parent);
		};

		this.onSlide = function(value, prop, action, sel, data) {
			var res = this.ctrl.authOnSlideMinSize(value, action);
			if (action === "slide") return res;
			if (action === "stop" && this.originValue != value) {
				authPropsGeneral.setValue(this, sel, data, value);
				authPropsGeneral.notifyChangePropUI(this.$$parent, sel, data);
			}
		};

		this.destroyMarkup = function() {
			this.ctrl = null;
			this.$$parent = null;
			if (this.$$slider) {
				this.$$slider.slider('destroy');
				this.$$slider = null;
			}
		};

		this._sliderSetValue = function(slideEvt, $$parent, sel, data, originValue) {
			this.ctrl.authOnSlideMinSize(slideEvt, "stop");
			if (originValue != slideEvt.value) {
				authPropsGeneral.setValue(this, sel, data, slideEvt.value);
				authPropsGeneral.notifyChangePropUI($$parent, sel, data);
			}
		};


	},

	// only card
	"arrayCardsEmptyCells": {
		"key": "$emptycell",
		"default": "nodisplay",
		values: [{
			value: "filled"
		}, {
			value: "withtitle"
		}, {
			value: "nodisplay"
		}],
		createMarkup: authPropsGeneral.createMarkupRadio,
		refreshMarkup: authPropsGeneral.refreshMarkupRadio
	}
};

exports.initModuleProperties = function(dest) {
	authPropsGeneral.initProperties(_properties, dest);
};

exports.getModuleProperties = function($$elmt, controller, props, sel, data) {
	if (!data.control.isSingleArray()) {
		props.push(_properties.arrayCardsPerRow, _properties.arrayCardsMinWidth, _properties.arrayCardsEmptyCells, _properties.arrayBgColor);
	}
};