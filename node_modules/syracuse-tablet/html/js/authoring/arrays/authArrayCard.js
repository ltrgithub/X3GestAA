"use strict";
var authArrayGeneral = require('syracuse-tablet/html/js/authoring/arrays/authArrayGeneral');
var authComponents = require('syracuse-tablet/html/js/authoring/authoringComponents');
var authPropsGeneral = require('syracuse-tablet/html/js/authoring/authoringPropertiesGeneral');
var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

var _properties = {

	// only card
	"arrayCardsPerRow": {
		"key": "$cardsPerRow",
		"default": "2",
		values: [{
			value: "1"
		}, {
			value: "2"
		}, {
			value: "3"
		}, {
			value: "4"
		}],
		createMarkup: authPropsGeneral.createMarkupRadio,
		refreshMarkup: authPropsGeneral.refreshMarkupRadio
	},

	// only card
	"arrayCardsMinWidth": function(controller, sel, data) {
		this.name = "arrayCardsMinWidth";
		this.label = null;
		this.key = "$minWidth";
		this["default"] = 1;
		this.min = 0;
		this.max = 20;
		this.step = 1;

		this.createMarkup = function($$parent, prop, sel, data) {
			this.ctrl = data.control;
			this.$$parent = $$parent;
			this.originValue = authPropsGeneral.getValueOrDefault(this, sel, data);
			var opts = {
				id: "auth_opt_" + this.name,
				value: this.originValue,
				min: this.min,
				max: this.max,
				step: this.step || 1,
				slideHandler: jsutils.bindFn(this.onSlide, this, "slide"),
				startHandler: jsutils.bindFn(this.onSlide, this, "start"),
				stopHandler: jsutils.bindFn(this.onSlide, this, "stop", sel, data)
			};
			this._slider = authComponents.newComponent("genericSlider", opts);
			this._slider.createMarkup($$parent);
		};

		this.onSlide = function(value, prop, action, sel, data) {
			var res = this.ctrl.authOnSlideMinSize(value, action);
			if (action === "slide") return res;
			if (action === "stop" && this.originValue != value) {
				authPropsGeneral.setValue(this, sel, data, value);
				authPropsGeneral.notifyChangePropUI(this.$$parent, sel, data);
			}
		};

		this.destroyMarkup = function() {
			this.ctrl = null;
			this.$$parent = null;
			if (this.$$slider) {
				this.$$slider.slider('destroy');
				this.$$slider = null;
			}
			if (this.$$Button) {
				this.$$Button.off("click");
				this.$$Button = null;
			}
		};

		this._sliderSetValue = function(slideEvt, $$parent, sel, data, originValue) {
			this.ctrl.authOnSlideMinSize(slideEvt, "stop");
			if (originValue != slideEvt.value) {
				authPropsGeneral.setValue(this, sel, data, slideEvt.value);
				authPropsGeneral.notifyChangePropUI($$parent, sel, data);
			}
		};


	},
	/**
	 * Optional sel, data
	 * 	 not null when button property is created like a regular panel propety
	 *	 null when property is created from rightPanel (back from cardDesign to array)
	 */
	"arrayCardButton": function(controller, sel, data) {
		this.name = null;
		this.label = null;
		this.key = null;
		this.controller = controller;
		if (data) {
			this.control = data.control;
		}
		this.createButtonMarkup = function() {
			var saveDesign = this.isSaveButton();
			var text = locale.text("auth.tableDesign." + (saveDesign ? "saveDesign" : "openDesign"));
			this.$$Button = $('<button id="auth_opt_card_design" type="button" class="btn btn-default">' + text + '</button>');
			this.$$Button.on("click", jsutils.bindFn(this.onClickButton, this, saveDesign));
			return this.$$Button;
		};

		this.destroyButtonMarkup = function(context) {
			if (context && context.origin == "selection" && this.isSaveButton()) {
				// No destroy in that case - button remains displayed when we select a ctrl/layout
				// False to tell controller to remove the button
				return false;
			}
			this.control = null;
			this.controller = null;
			if (this.$$Button) {
				// $$slider.find(".$$slider") to make sur the plugin has been initialized
				this.$$Button.off("click");
				this.$$Button.remove();
				this.$$Button = null;
			}
		};

		this.onClickButton = function(evt, closeDesign) {
			if (closeDesign) {
				eventListener.triggerAction(this.controller.$$elmt, "saveCardDesign");
			} else if (this.control) {
				// Trigger a navigation to carddesign page
				var attrs = {
					"data-control-id": this.control.id,
					"data-parent-id": this.controller.id,
					"data-nav": "carddesign",
					"data-nav-target": "application"
				};
				eventListener.triggerNavigation(this.control.$$elmt, attrs);
			}
		};
		this.isSaveButton = function() {
			return this.controller && this.controller.state.type == "carddesign";
		};
	},

	// only card
	"arrayCardsEmptyCells": {
		"key": "$emptycell",
		"default": "nodisplay",
		values: [{
			value: "filled"
		}, {
			value: "withtitle"
		}, {
			value: "nodisplay"
		}],
		createMarkup: authPropsGeneral.createMarkupRadio,
		refreshMarkup: authPropsGeneral.refreshMarkupRadio
	}
};

exports.initModuleProperties = function(dest) {
	authPropsGeneral.initProperties(_properties, dest);
};

exports.getModuleProperties = function($$elmt, controller, props, sel, data) {
	if (!data.control.prototype.isSingleArray()) {
		props.push(_properties.arrayCardsPerRow, _properties.arrayCardsMinWidth, _properties.arrayCardsEmptyCells, _properties.arrayCardButton);
	}
};

exports.getCardDesignBackButton = function(controller) {
	return new _properties.arrayCardButton(controller);
};