"use strict";
var authPropsGeneral = require('syracuse-tablet/html/js/authoring/authoringPropertiesGeneral');
var authArrayGeneral = require('syracuse-tablet/html/js/authoring/arrays/authArrayGeneral');
var authComponents = require('syracuse-tablet/html/js/authoring/authoringComponents');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

var _maxCharWidth = 50;
var _defCharWidth = 20;
var _defPercentWidth = 20;
var _tableConfigKeys = ["$bind", "$title", "$type", "$titleOrig", "$widthType", "$widthVal", "$refDescFormat", "$refDescPosition"];

/**
 * Panel which displays the settings of a columns
 * 	FIELD - WIDTH - X-REFERENCE params
 */
var _TableColumnPanel = function(parent, colInfo) {
	this.name = "arrayTableColumn";
	this.label = colInfo.$title || colInfo.$bind;
	this.parent = parent;
	this.colInfo = colInfo;
	if (parent.isSingleArray || !this.colInfo.$widthType) {
		this.colInfo.$widthType = "auto";
	}
	this._myProperties = [];

	this.createMarkup = function($$parent) {
		this.$$parent = $$parent;
		if (!parent.isSingleArray) {
			this.colNameChoiceAdd();
			this.colWidthTypeAdd();
			this.colWidthValAdd();
		}
		this.colXrefAdd();
		this.colImageAdd();
	};

	this._add2PropHeading = function(title, prop, $$forceParent) {
		var $$root = $(authArrayGeneral.getHtml('subtitle', {
			title: title,
			margin: 10,
			id: prop.name
		})).appendTo($$forceParent || this.$$parent).find("div");
		if (prop.name === "selectName") {
			$$root.css({
				textOverflow: "inherit"
			});
		}
		if (prop.createMarkup) {
			prop.createMarkup($$root);
			this._myProperties.push(prop);
		} else if (prop.jquery) {
			$$root.append(prop);
		}
		return prop;
	};
	// COL NAME CHOICE
	this.colNameChoiceAdd = function() {
		var idx = this.parent.getFieldProto(this.colInfo.$bind).idx;
		var selectOpts = [];
		this.parent._protoValue.forEach(function(v) {
			selectOpts.push({
				title: v.$title,
				value: v.$bind
			});
		});
		var opts = {
			value: this.colInfo.$bind,
			options: selectOpts,
			onChange: jsutils.bindFn(this.colNameSelect, this),
		};
		this._add2PropHeading(locale.text('auth.tableDesign.selColName'), authComponents.newComponent("select", opts, "selectName"));
	};
	this.colNameSelect = function(event, prop) {
		this.colInfo = this.parent.getFieldProto($(event.target).val()).value;
		var $$title = prop.$$panel.closest(".panel-primary").find(".panel-title");
		$$title.text(this.colInfo.$title);
		$$title.next("span").find("i").text(this.colInfo ? this.colInfo.$bind : "");
		this.$$xrefroot.toggle(this.colInfo.$type === "application/x-reference");
	};
	// COL TYPE WIDTH	
	this.colWidthTypeAdd = function() {
		this._add2PropHeading(locale.text("auth.tableDesign.width"), authComponents.newComponent("flatRadio", {
			btns: [{
				value: "auto",
				title: locale.text("auth.tableDesign.auto")
			}, {
				value: "fixed",
				title: locale.text("auth.tableDesign.fixed")
			}, {
				value: "percent",
				title: "%"
			}],
			onClick: jsutils.bindFn(this.colWidthTypeChanged, this),
			value: this.colInfo.$widthType || "auto"
		}));
	};
	this.colWidthTypeChanged = function(evt) {
		if ($(evt.target).val() !== this.colInfo.$widthType) {
			this.colInfo.$widthType = $(evt.target).val();
			this.colWidthValUpdt();
		}
	};
	// COL VALUE	
	this.colWidthValAdd = function() {
		var opts = {
			slideHandler: jsutils.bindFn(this.colWidthValSlide, this),
			stopHandler: jsutils.bindFn(this.colWidthValChange, this),
			value: this.colInfo.$widthVal || 0,
			min: 0,
			max: this.colInfo.$widthType === "percent" ? 100 : _maxCharWidth,
			margin: 0
		};
		this.propWidthVal = this._add2PropHeading(locale.text("auth.tableDesign.selWidth"), authComponents.newComponent("genericSlider", opts));
		this.colWidthValUpdt(opts.value);
	};
	this.colWidthValSlide = function(val, prop) {
		return this.colInfo.$widthType === "percent" ? val + "%" : val + " " + locale.text("auth.tableDesign.characters");
	};
	this.colWidthValChange = function(val, prop) {
		this.colInfo.$widthVal = val;
	};
	this.colWidthValUpdt = function(forceValue) {
		var show = this.colInfo.$widthType !== "auto";
		this._toggleProp(this.propWidthVal, show);
		if (!show) {
			return;
		}
		this.propWidthVal.update({
			value: forceValue || (this.colInfo.$widthType === "percent" ? _defPercentWidth : _defCharWidth),
			max: this.colInfo.$widthType === "percent" ? 100 : _maxCharWidth,
		});
	};
	// COL X-REFERENCE
	this.colXrefAdd = function() {
		var style = this.colInfo.$type !== "application/x-reference" ? "display:none" : "";
		this.$$xrefroot = $('<section class="xrefColumn" style="' + style + '" ></section>').appendTo(this.$$parent);
		// Description format - $refDescPosition, $refDescFormat are x-reference properties
		// First
		var pos = this.colInfo["$refDescPosition"] || "none";
		this._xrefDescrPos = this._createXRefSelect("pos", ["bottom", "right", "left", "top", "none"], pos);
		// Second
		this._xrefDescrFmt = this._createXRefSelect("fmt", ["desc", "title", "desctitle", "titledesc"], this.colInfo["$refDescFormat"] || "desc");
		// hide fmt if pos == none
		this.$$xrefroot.find("#selectDescrfmt").toggle(pos !== "none");
	};
	this._createXRefSelect = function(type, codes, def) {
		var selectOpts = [];
		var defIdx = codes.indexOf(def);
		if (defIdx == -1) defIdx = 0;
		var textRoot = "auth." + (type == "fmt" ? "refDescFormat" : "refDescPosition");
		codes.forEach(function(code, idx) {
			selectOpts.push({
				// Used by colXrefChange
				code: code,
				title: locale.text(textRoot + "." + code),
				value: idx
			});
		});
		var opts = {
			value: defIdx,
			options: selectOpts,
			onChange: jsutils.bindFn(this.colXrefChange, this, type)
		};
		this._add2PropHeading(locale.text(textRoot), authComponents.newComponent("select", opts, "selectDescr" + type), this.$$xrefroot);
		return selectOpts;
	},
	this.colXrefChange = function(event, prop, type) {
		var idx = parseInt($(event.target).val(), 10);
		var ref = type === "fmt" ? this._xrefDescrFmt : this._xrefDescrPos;
		ref = ref[idx].code;
		if (type == "pos") {
			// hide fmt if pos == none
			this.$$xrefroot.find("#selectDescrfmt").toggle(ref !== "none");
		}
		this.colInfo["$refDesc" + (type === "fmt" ? "Format" : "Position")] = ref;
	};
	// COL IMAGE
	this.colImageAdd = function() {
		var style = this.colInfo.$type !== "image" ? "display:none" : "";
		this.$$imageroot = $('<section class="ximageColumn" style="' + style + '" ></section>').appendTo(this.$$parent);
		// Switch
		var displayIcon = this.colInfo["$imgDisplayIcon"] === true;
		var opts = {
			checked: displayIcon,
			size: "small",
			onSwitchChange: this.onDisplayIconChanged.bind(this)
		};
		this._add2PropHeading(locale.text("auth.imgcol.displayIcon"), authComponents.newComponent("switcher", opts), this.$$imageroot);
		// Icon
		opts = {
			palette: fontUtils.getColImageIconList(),
			dropUp: true,
			icon: this.colInfo["$imgIcon"] || fontUtils.getColImageDefIcon()
		};
		this.propImageIcon = this._add2PropHeading(locale.text("auth.imgcol.iconPicker"), authComponents.newComponent("iconPalettePicker", opts), this.$$imageroot);
		this._toggleProp(this.propImageIcon, displayIcon);
	};
	this.onDisplayIconChanged = function(event, status) {
		this._toggleProp(this.propImageIcon, status);
	};
	this._toggleProp = function(prop, show) {
		return prop.$$panel.closest("section").toggle(show);
	};
	this.destroyMarkup = function() {
		this.parent = null;
		this.colInfo = null;
		// Before
		if (this._myProperties) {
			this._myProperties.forEach(function(p) {
				if (p.destroyMarkup) p.destroyMarkup();
			});
			this._myProperties = null;
		}
		// After
		if (this.$$parent) {
			this.$$parent.closest(".s-m-panel-auth-prop").remove();
			this.$$parent = null;
		}
	};
};
/**
 * General properties for 'table' array
 */
var _properties = {
	// Header of the table
	"arrayTableHeader": {
		"key": "$tableHeaderShow",
		"default": true,
		values: [{
			value: true
		}, {
			value: false
		}],
		createMarkup: authPropsGeneral.createMarkupRadio,
		refreshMarkup: authPropsGeneral.refreshMarkupRadio
	},

	// Design of columns
	// 		Number of columns
	//		Parameters of each column
	"arrayTableDesign": function(controller, sel, data) {
		this.isHidden = false;
		this.name = "arrayTableDesign";
		this.label = null;
		this.key = "$table";
		this.controller = controller;
		this.ctrlArray = data.control;
		this._generalProperties = [];
		this._columnProperties = [];
		this._protoValue = [];

		this.initMarkup = function(controller, sel, data) {
			this._protoValue = this.ctrlArray.prototype.arrayTableGetColInfo();
			this.isSingleArray = this.ctrlArray.prototype.isSingleArray() || this._protoValue.length <= 1;
			this._orginalValue = data.articleSelection.$table;
			var hasValue = this._orginalValue != null && this._orginalValue.length > 0;
			if (!hasValue) {
				this._orginalValue = null;
			}
			this._initProps(hasValue ? this._orginalValue : this._protoValue);
			if (!this.isSingleArray) {
				this.addPropNbColumns();
			} else {
				this.isHidden = this._protoValue.length === 0 || this._protoValue[0].$type !== "application/x-reference";
			}
			if (!this.isHidden) {
				this.addPropActionButtons(sel, data);
			}
		};

		this._initProps = function(props, createEntry) {
			var self = this;
			self._columnProperties = [];
			props.forEach(function(prop) {
				self._createColumnProperty(prop, createEntry);
			});
		};

		this.addPropNbColumns = function() {
			var opts = {
				slideHandler: function(val) {
					return val + " columns";
				},
				stopHandler: jsutils.bindFn(this.updateColumns, this),
				value: this._columnProperties.length,
				min: 1,
				max: this._protoValue.length,
				displayValue: "above"
			};
			this._generalProperties.push(authComponents.newComponent("genericSlider", opts, "nbcolumns"));
		};

		this._updateNbCols = function() {
			var prop;
			this._generalProperties.some(function(p) {
				if (p.name === "nbcolumns") {
					prop = p;
					return true;
				}
			});
			prop.update({
				value: this._columnProperties.length
			});
		};

		this.addPropActionButtons = function(sel, data) {
			var btns = [{
				value: "save",
				title: locale.text("auth.tableDesign.save")
			}];
			this._generalProperties.push(authComponents.newComponent("actionBtns", {
				btns: btns,
				onClick: jsutils.bindFn(this.onClickAction, this, sel, data)
			}));
		};

		this.onClickAction = function(evt, sel, data) {
			var action = $(evt.target).val();
			if (action === "save") {
				var value = [],
					entry;
				var self = this,
					conf;
				this._columnProperties.forEach(function(prop) {
					if (!prop.colInfo) return;
					entry = {};
					_tableConfigKeys.forEach(function(p) {
						conf = prop.colInfo[p];
						if (conf != null) {
							entry[p] = $.isPlainObject(conf) ? $.extend(true, {}, conf) : conf;
						}
					});
					value.push(entry);
				});
				//console.log(JSON.stringify(value, null, 2));
				authPropsGeneral.setValue(this, sel, data, value);
				authPropsGeneral.notifyChangePropUI(this.$$parent, sel, data);
				return;
			}
			// restore/all - Not used - Wait for the global undo button implementation to remove them
			if (action === "restore") {
				if (this._orginalValue) {
					this._clearColumns();
					this._initProps($.extend(true, [], this._orginalValue), true);
					this._updateNbCols();
					return;
				}
				action = "all";
			}
			if (action === "all") {
				this.updateColumns(null);
				this._updateNbCols();
				return;
			}
		};

		this.createMarkup = function($$parent, prop, sel, data) {
			this.$$parent = $$parent;
			this._accordionId = utils.UUID();
			this.$$myAccordion = $('<div id="' + this._accordionId + '" ></div>');
			$$parent.append(this.$$myAccordion);
			var self = this,
				$$entry;
			self._generalProperties.forEach(function(prop) {
				$$entry = $(authArrayGeneral.getHtml('subtitle', {
					title: prop.label ? prop.label || prop.name : null,
				}));
				// create sub-property
				prop.createMarkup($$entry.find("div"));
				self.$$myAccordion.append($$entry);
			});
			self._columnProperties.forEach(function(prop) {
				self._createColEntry(prop);
			});
		};

		this._createColEntry = function(prop) {
			var id = utils.UUID();
			var $$parent;
			if (!this.isSingleArray) {
				var $$propGroup = $(authArrayGeneral.getHtml("subPropTitle", {
					id: id,
					type: "child columns",
					label: prop.label,
					info: prop.colInfo ? prop.colInfo.$bind : null,
					expanded: false,
					parentId: this._accordionId
				}));
				$$parent = $$propGroup.find("#collapse_" + id);
				this.$$myAccordion.append($$propGroup);
			} else {
				this.$$myAccordion.append($$propGroup);
				$$parent = $('<div style="padding-left:10px;padding-right:10px;"></div>').appendTo(this.$$myAccordion);
			}
			// create sub-property
			prop.createMarkup($$parent);
		};

		this.destroyMarkup = function() {
			this.$$parent = null;
			this.ctrlArray = null;
			this.controller = null;
			this._getAllProps().forEach(function(p) {
				p.destroyMarkup();
			});
			this._generalProperties = null;
			this._columnProperties = null;
		};

		this._getAllProps = function() {
			return (this._generalProperties || []).concat(this._columnProperties || []);
		};

		this.updateColumns = function(nbCols) {
			if (this.$$myAccordion) {
				this.$$myAccordion.find(".collapse").collapse('hide');
			}
			var init = nbCols == null;
			nbCols = init ? this._protoValue.length : nbCols;
			var startFrom = 0;
			if (init) {
				this._clearColumns();
			} else if (this._columnProperties.length > 0) {
				for (var i = this._columnProperties.length - 1; i >= nbCols; i--) {
					this._columnProperties[i].destroyMarkup();
					this._columnProperties.splice(i, 1);
				}
				startFrom = this._columnProperties.length;
			}
			for (var i = startFrom; i < nbCols; i++) {
				this._createColumnProperty(this._protoValue[i], true);
			}
		};

		this._createColumnProperty = function(config, createEntry) {
			var proto = this.getFieldProto(config.$bind, true);
			if (!proto) return null;
			// Update properties from prototype
			config.$title = this.controller.prototype.resolveExpression(proto.value.$title) || config.$bind;
			config.$type = proto.value.$type;
			config.$titleOrig = proto.value.$titleOrig;
			var prop = new _TableColumnPanel(this, config);
			this._columnProperties.push(prop);
			if (createEntry) {
				this._createColEntry(prop);
			}
			return prop;
		};

		this._clearColumns = function() {
			if (this._columnProperties) {
				this._columnProperties.forEach(function(p) {
					p.destroyMarkup();
				});
			}
			this._columnProperties = [];
		};

		this.getProtoValByIdx = function(idx) {
			if (idx < 0 || idx >= this._protoValue.length) throw new Error("unexpected bad index[" + idx + "]");
			return this._protoValue[idx];

		};

		this.getFieldProto = function(bind, noFail) {
			var res = null;
			this._protoValue.some(function(v, idx) {
				if (v.$bind === bind) {
					res = {
						idx: idx,
						value: v
					};
					return true;
				}
			});
			if (res == null && noFail !== true) throw new Error("unexpected null value - bind=[" + bind + "]");
			return res;
		};
	}
};

exports.initModuleProperties = function(dest) {
	authPropsGeneral.initProperties(_properties, dest);
};

exports.getModuleProperties = function($$elmt, controller, props, sel, data) {
	if (!data.control.prototype.isSingleArray()) {
		props.push(_properties.arrayTableHeader);
	}
	props.push(_properties.arrayTableDesign);
};