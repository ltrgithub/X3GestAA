"use strict";
var authPropsGeneral = require('syracuse-tablet/html/js/authoring/authoringPropertiesGeneral');
var authArrayGeneral = require('syracuse-tablet/html/js/authoring/arrays/authArrayGeneral');
var authComponents = require('syracuse-tablet/html/js/authoring/authoringComponents');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var fieldOperators = require('syracuse-tablet/html/js/helpers/fieldOperators');
var formatApi = require('syracuse-tablet/html/js/helpers/formatApi');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

var _noValue = "$$novalue$$";

var _properties = {

	"arrayStatusEnabled": function(controller, sel, data) {
		this.key = "$statusEnabled";
		this.name = "arrayStatusEnabled";
		this["default"] = "none";
		this.values = [{
			"value": "none",
		}, {
			"value": "mono"
		}];
		if (data.control.$display === "card") {
			this.values.push({
				"value": "multi"
			});
		}
		this.createMarkup = authPropsGeneral.createMarkupRadio;
		this.refreshMarkup = authPropsGeneral.refreshMarkupRadio;
	},

	"arrayStatus": function(controller, sel, data) {
		this.name = "arrayStatus";
		this.label = null;
		this["default"] = null;
		this.key = "$status";
		this.ctrlArray = data.control;
		this.isTable = (this.ctrlArray.article.$display || "table") === "table";
		this._myProperties = [];
		/** 
		 	data structure data.articleSelection.$status
		 		[{
					field: "BPCNUM",
					$type: "application/x-string",
					operator: "eq",
					value: 10,
					color:{
						name: "red",
						css: "s-m-color-ok",
						bgcolor: "#FF0000",
						color: "#FFFFFF"
					}
				}]
		*/
		this.initMarkup = function(controller, sel, data) {
			this._protoValue = this.ctrlArray.getColumnsInfo();
			var authStatus = data.articleSelection[this.key] || [];
			this.statusList = [];
			var self = this,
				proto;
			authStatus.forEach(function(c) {
				proto = self.getFieldProto(c.field);
				if (proto != null) {
					c = $.extend(true, {}, c);
					c.id = utils.UUID();
					self.statusList.push(c);
				}
			});
		};
		this.getFieldProto = function(bind) {
			var res = null;
			this._protoValue.some(function(v, idx) {
				if (v.$bind === bind) {
					res = v;
					return true;
				}
			});
			return res;
		};
		this.getRecordInfo = function(id) {
			if (!id) return null;
			var idx = -1;
			var rec = null;
			this.statusList.some(function(c, i) {
				if (c.id === id) {
					rec = c;
					idx = i;
					return true;
				}
			});
			return idx === -1 ? null : {
				record: rec,
				idx: idx
			};
		};
		this.destroyMarkup = function() {
			this.ctrl = null;
			this.$$parent = null;
			this._protoValue = null;
			this.ctrlArray = null;
			if (this._myProperties) {
				this._myProperties.forEach(function(p) {
					if (p.destroyMarkup) p.destroyMarkup();
				});
				this._myProperties = null;
			}
		};

		this.createMarkup = function($$parent, prop, sel, data) {
			this.ctrl = data.control;
			this.$$parent = $$parent;
			this.statusListAdd(sel, data);
			this.editSectionAdd();
		};
		this.statusListAdd = function(sel, data) {
			var opts = {
				css: "statuslist",
				doAction: jsutils.bindFn(this.listCallBackAction, this, sel, data),
				appendTitle: locale.text("auth.arrayStatus.append")
			};
			this.listStatusDisplayer = authComponents.newComponent("editableList", opts);
			this._addParam("statuslist", this.listStatusDisplayer, true);
			this.updateStatusList();
		};
		this.editSectionAdd = function() {
			this.editStatusSection = this._addSubSection("editstatus");
			this.editStatusSection.$$panel.hide();
			this.editStatusSection.$$content.css("padding-left", "7px");
			this.editStatusSection.$$title.css("font-weight", "bold");
			var $$rootComponents = this.editStatusSection.$$content;
			this.paramFieldAdd($$rootComponents);
			this.paramOperatorAdd($$rootComponents);
			this.paramValueAdd($$rootComponents);
			this.paramColorAdd($$rootComponents);
			this.paramIconAdd($$rootComponents);
		};
		this.listCallBackAction = function(action, recordId, listStatusDisplayer, sel, data) {
			if (action === "append") {
				this._updateParams(null);
				return true;
			}
			if (action === "cancel") {
				this._resetParams();
				this.editStatusSection.$$panel.hide();
				return true;
			}
			var recInfo = this.getRecordInfo(recordId);
			if (action === "validate") {
				var newRecord = this.validateRecord(true);
				if (newRecord) {
					if (recInfo == null) {
						// Validate Append
						this.statusList.push(newRecord);
					} else {
						// Validate Edit
						this.statusList.splice(recInfo.idx, 1);
						this.statusList.splice(recInfo.idx, 0, newRecord);
					}
					this.updateStatusList(true, sel, data);
					// Clears params
					this._resetParams();
					// Removes validate/cancel - Switchs to e'Append status'
					return true;
				} else {
					return false;
				}
			}
			if (action === "deleteItem") {
				if (!recInfo) return false;
				this.statusList.splice(recInfo.idx, 1);
				this.updateStatusList(true, sel, data);
				return true;
			}
			if (action === "editItem") {
				if (!recInfo) return false;
				this._updateParams(recInfo.record);
				return true;
			}
		};
		this.validateRecord = function(errorMsg) {
			var self = this;
			var _fail = function(msg) {
				if (errorMsg === true) {
					var text = msg || locale.text("auth.arrayStatus.invalid");
					self.listStatusDisplayer.toggleMessage(text, "error");
					setTimeout(function() {
						self.listStatusDisplayer.toggleMessage(null);
					}, 2500);
				}
				return null;
			};
			var rec = {};
			rec.field = this.fieldSelector.getValue();
			rec.operator = this.operatorSelector.getValue();
			var proto = this.getFieldProto(rec.field);
			if (!proto) {
				return _fail();
			}
			rec.$type = proto.$type;
			rec.$format = proto.$format;
			if (rec.$type === "application/x-boolean") {
				rec.value = this.componentBoolVal.getValue();
			} else {
				rec.value = this.$$valueElmt.val() || "";
			}
			var formatter = formatApi.getFormatter(rec.$type, proto.$format);
			if (formatter) {
				var errors = [];
				rec.value = formatter.parseValue(rec.value, errors);
				if (errors.length > 0) {
					return _fail(errors.join(''));
				}
				if (rec.value != null && rec.value != this.$$valueElmt.val()) {
					this.$$valueElmt.val(formatter.formatValueEdit(rec.value));
				}
			}
			if (rec.$type == "application/x-reference") {
				rec.value = (rec.value || "").toUpperCase();
			}
			if (this.paletteColor) {
				rec.color = this.paletteColor.getValue();
			}
			if (this.paletteIcon) {
				rec.icon = this.paletteIcon.getValue();
			}
			rec.id = utils.UUID();
			if (rec.field == _noValue || rec.operator == _noValue || rec.color == null) {
				return _fail();
			}
			return rec;
		};
		this._updateParams = function(record) {
			var edit = record != null;
			record = record || {};
			this.editStatusSection.$$panel.show();
			this.fieldSelector.setValue(record.field || _noValue);
			this.updateOperators(record.$type, record.operator || _noValue);
			if (this.paletteColor) {
				this.paletteColor.setValue(record.color);
			}
			if (this.paletteIcon) {
				this.paletteIcon.setValue(record.icon);
			}
			var val = record.value;
			if (val != null) {
				var formatter = formatApi.getFormatter(record.$type, record.$format);
				val = formatter ? formatter.formatValueEdit(val) : val;
			}
			// We create a section for booleans
			var isBool = record.$type === "application/x-boolean";
			this.$$valSection.toggle(!isBool);
			this.$$boolValSection.toggle(isBool);
			this.componentBoolVal.setValue(isBool && val === true);
			this.$$valueElmt.val(isBool || val == null ? "" : val);
		};
		this._resetParams = function() {
			this.editStatusSection.$$panel.hide();
			this.fieldSelector.setValue(_noValue);
			this.operatorSelector.clear();
			this.paletteColor.setValue("");
			this.$$valueElmt.val("");
		};
		this.updateStatusList = function(updateAuthoring, sel, data) {
			var clearBefore = true;
			if (clearBefore) {
				this.listStatusDisplayer.clear();
			}
			var records = [],
				style, css;
			this.statusList.forEach(function(c) {
				if (c.icon) {
					css = c.icon.css;
					style = "color:" + c.color.bgColor + ";font-size:1.4em;";
				} else {
					css = c.color ? c.color.css : "";
					style = "";
				}
				records.push({
					titleHtml: authArrayGeneral.getHtml("statusLine", {
						field: c.field,
						operator: c.operator,
						value: c.value,
						css: css,
						style: style,
						sizeColor: 15
					}),
					id: c.id
				});
			});
			this.listStatusDisplayer.insertRecords(records);
			if (updateAuthoring == true) {
				var value = [];
				this.statusList.forEach(function(c) {
					c = $.extend(true, {}, c);
					delete c.id;
					value.push(c);
				});
				authPropsGeneral.setValue(this, sel, data, value);
				authPropsGeneral.notifyChangePropUI(this.$$parent, sel, data);
				return;
			}
		};
		this.paramFieldAdd = function($$root) {
			var selectOpts = [{
				"title": locale.text('auth.arrayStatus.novalue'),
				"value": _noValue
			}];
			this._protoValue.forEach(function(v, idx) {
				if (fieldOperators.acceptOperator(v.$type)) {
					selectOpts.push({
						title: v.$title,
						value: v.$bind
					});
				}
			});
			var opts = {
				value: _noValue,
				options: selectOpts,
				css: "statusField",
				onChange: jsutils.bindFn(this.onParamFieldSelect, this),
				isHidden: false
			};
			this.fieldSelector = authComponents.newComponent("select", opts);
			this._addParam("field", this.fieldSelector, true, $$root, true);
		};

		this.paramOperatorAdd = function($$root) {
			var opts = {
				value: _noValue,
				options: [{
					"title": locale.text('auth.arrayStatus.novalue'),
					"value": _noValue
				}],
				css: "statusOperator",
				onChange: jsutils.bindFn(this.onParamOperatorSelect, this),
				isHidden: false
			};
			this.operatorSelector = authComponents.newComponent("select", opts);
			this._addParam("operator", this.operatorSelector, true, $$root, true);
			this.updateOperators();
		};
		this.paramValueAdd = function($$root) {
			this.$$valueElmt = $('<input class="form-control statusValue"></input>');
			var opts = {
				size: "small",
				onText: "True",
				offText: "False",

			};
			this.$$valSection = this._addParam("value", this.$$valueElmt, true, $$root).hide();
			this.componentBoolVal = authComponents.newComponent("switcher", opts);
			this.$$boolValSection = this._addParam("value", this.componentBoolVal, true, $$root).hide();
		};
		this.paramColorAdd = function($$root) {
			var opts = {
				palette: authPropsGeneral.getColorPalette(),
				dropUp: true
			};
			this.paletteColor = authComponents.newComponent("colorPalettePicker", opts);
			this._addParam("color", this.paletteColor, true, $$root, true);
		};
		this.paramIconAdd = function($$root) {
			var opts = {
				palette: fontUtils.getArrayStatusIconList(),
				dropUp: true
			};
			this.paletteIcon = authComponents.newComponent("iconPalettePicker", opts);
			this._addParam("icon", this.paletteIcon, true, $$root, false);
		};
		this.onParamFieldSelect = function(event, prop) {
			var field = this.getFieldProto($(event.target).val());
			this.updateOperators(field.$type, "eq");
			this.$$valSection.toggle(!this.$$boolValSection.toggle(field.$type === "application/x-boolean").is(":visible"));
		};
		this.updateOperators = function(typeField, defValue) {
			defValue = defValue == null ? _noValue : defValue;
			var selectOpts = [{
				"title": locale.text('auth.arrayStatus.novalue'),
				"value": _noValue
			}];
			var ops = fieldOperators.getOperators(typeField, true);
			if (ops) {
				ops.forEach(function(v, idx) {
					selectOpts.push({
						title: v.title,
						value: v.value
					});
				});
			}
			this.operatorSelector.update(selectOpts, defValue);
		};
		this.onParamOperatorSelect = function(event, prop) {};
		this._addParam = function(prop, component, title, $$parent, mandatory) {
			var $$parent = $$parent || this.$$parent;
			var $$title;
			var $$root;
			if (title) {
				var res = this._addSubSection(prop, $$parent, mandatory);
				$$root = res.$$content;
				$$title = res.$$panel;
			} else {
				$$root = $$parent;
			}
			if (component == null) throw new Error("unexpected null component");
			var $$panel;
			if (component.createMarkup) {
				component.createMarkup($$root);
				this._myProperties.push(component);
				$$panel = component.$$panel;
			} else if (component.jquery) {
				$$root.append(component);
				$$panel = component;
			}
			return $$title ? $$title : $$panel;
		};
		this._addSubSection = function(textId, $$parent, mandatory) {
			var $$panel = $(authArrayGeneral.getHtml('subtitle', {
				title: locale.text('auth.arrayStatus.' + textId) + (mandatory === true ? "*" : ""),
				margin: 10,
				id: "arrayStatus" + textId.smCapitalize()
			})).appendTo($$parent || this.$$parent);
			return {
				$$panel: $$panel,
				$$content: $$panel.children("div"),
				$$title: $$panel.children("p")
			};
		};
	}
};

exports.initModuleProperties = function(dest) {
	authPropsGeneral.initProperties(_properties, dest);
};

exports.getModuleProperties = function($$elmt, controller, props, sel, data) {
	if (!controller.dataset.prototype.isLookup()) {
		props.push(_properties.arrayStatusEnabled);
		var status = data.control.getAuthoring("$statusEnabled");
		if (status === "mono" || status === "multi") {
			props.push(_properties.arrayStatus);
		}
	}
};