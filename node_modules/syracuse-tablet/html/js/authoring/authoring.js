"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var authHelpers = require('syracuse-tablet/html/js/authoring/authoringHelpers');
var modal = require('syracuse-tablet/html/js/ui/modal');
var authProps = require('syracuse-tablet/html/js/authoring/authoringProperties');
var authHtml = require('syracuse-tablet/html/js/authoring/authoringHtml');

var _authInterface;
exports.startDesignPage = function() {
	if (!_authInterface) {
		_authInterface = new AuthInterface();
	}

	_authInterface.showAuthoringPanel();
};

var AuthInterface = utils.defineClass(function() {
	var self = this;
	self.$$authPanel = null;
	self.$$pageContent = $(".s-m-page.s-m-full > section.s-m-main-content");
}, null, {
	showAuthoringPanel: function() {
		var self = this;

		if (self.$$authPanelRight && self.$$authPanelRight.is(":visible")) {
			self._hideAuthPanel();
		} else {
			self._showAuthPanel();
			self._displayAuth(globals.getApplication().currentPage);
		}
	},

	notifPageLoaded: function(page) {
		var self = this;
		if (page && page.state && page.state.disableAuthoring) {
			authHelpers.disableAuthCss();
			self._hideAuthPanel();
			return;
		}

		if (page && !page.isVignette) {
			self._displayAuth(page);
		}
		self._hookDOMEvents();
		self._elementSelectionChanged();
	},

	// Called by panel if a property like color has been changed using the simple ui
	notifAuthChangePropUi: function(sel, data) {
		var self = this;
		var articlePage = authHelpers.toSortedJSON(data.articlePage);
		var articleSelection = authHelpers.toSortedJSON(data.articleSelection);
		self.$$authJSONPage.val(articlePage);
		self.$$authJSONSelection.val(articleSelection);
		self._updateLayoutPage(sel);
	},

	notifAuthChangeSelection: function(sel) {
		var self = this;
		self._elementSelectionChanged(sel);
	},

	_hookDOMEvents: function() {
		var self = this;
		authHelpers.disableAuthCss();
		authHelpers.enableAuthCss();
	},
	_initJSONArticles: function() {
		var self = this;
		self.$$authJSONPage.val("");
		self.$$authJSONSelection.val("");
		authHelpers.destroyPropertyPanel(self.$$authPanelControlSimple);
	},
	_displayAuth: function(page) {
		var self = this;
		self.currentPageName = page.state.authoringName;
		self.$$authPageName.text(self.currentPageName);
		self.$$authJSONPage.val(authHelpers.toSortedJSON(page.article));
	},

	_showAuthPanel: function() {
		var self = this;
		notifications.subscribe(self, ["sm.page.loaded"]);
		notifications.subscribe(self, ["sm.auth.change.selection"]);
		notifications.subscribe(self, ["sm.auth.change.prop.ui"]);

		self._ensureAuthPanel();
		self._updateLayout();
		self.$$authPanelRight.show();
		$('.btn', self.$$authPanelSave).eq(0).button("toggle");
		$('.nav-pills a[href="#authPanelControl"]').tab('show');
		self._updateLayout();
		self._hookDOMEvents();
		self._initJSONArticles();

		self.$$pageContent.css({
			right: self.$$authPanelRight.width() + 10
		});
		authProps.initProperties();
		globals.triggerResize();
	},
	_hideAuthPanel: function() {
		var self = this;
		self._ensureAuthPanel();
		var w = self.$$authPanelRight.width();
		self.$$authPanelRight.hide();
		self.$$pageContent.css({
			right: 0
		});
		$("#s-m-app-id").css("padding-right", "0px");
		authHelpers.disableAuthCss();
		globals.triggerResize();
		notifications.unsubscribe(self, ["sm.page.loaded"]);
	},
	_ensureAuthPanel: function() {
		var self = this;
		if (this.$$authPanel) {
			return;
		}

		var ctx = {
			label_control: locale.text("auth.panel.label_control"),
			label_edit: locale.text("auth.panel.label_page"),
			label_save: locale.text("auth.panel.label_save"),
			label_close: locale.text("auth.panel.label_close"),
			label_apply: locale.text("auth.panel.label_apply"),

			label_simple: locale.text("auth.panel.label_simple"),
			label_expert: locale.text("auth.panel.label_expert"),

			label_code: locale.text("auth.panel.label_code"),
			label_title: locale.text("auth.panel.label_title"),
			label_description: locale.text("auth.panel.label_description"),
			label_saveas_option: locale.text("auth.panel.label_saveas_option"),
			label_personal: locale.text("auth.panel.label_personal"),
			label_global: locale.text("auth.panel.label_global"),
			label_factory: locale.text("auth.panel.label_factory"),

			authCodeDefault: locale.text("auth.panel.authCodeDefault"),
			authTitleDefault: locale.text("auth.panel.authTitleDefault"),
			authDescriptionDefault: locale.text("auth.panel.authDescriptionDefault")
		};

		self.$$authPanelRight = $("#s-m-auth-id");
		self.$$authPanel = $(authHtml.execute("authPanelMainStructure", ctx));

		self.$$authPanelRight.append(self.$$authPanel);
		self.$$authJSONPage = $("#authJSONPage");
		self.$$authJSONSelection = $("#authJSONSelection");
		self.$$authPanelControlSimple = $("#authPanelControlSimple");
		self.$$authPanelControlExpert = $("#authPanelControlExpert");
		self.$$authPageName = $("#authPageName");
		self.$$authCode = $("#authCode");
		self.$$authTitle = $("#authTitle");
		self.$$authDescription = $("#authDescription");

		self.$$authPanelEdit = $("#authPanelEdit");
		self.$$authPanelSave = $("#authPanelSave");
		self.$$authControlName = $("#authControlName");

		$("#authPanelBtnSave").bind("click", self._onSave.bind(self));
		$("#authPanelBtnPageApply").bind("click", self._onApplyPage.bind(self));
		$("#authPanelBtnSelectionApply").bind("click", self._onApplySelection.bind(self));

		self.onResizeHandler = self.resizeHandler.bind(self);
		$(window).on("resize", self.onResizeHandler);
	},
	resizeHandler: function() {
		var self = this;
		self._updateLayout();
	},
	_elementSelectionChanged: function(sel) {
		var self = this;
		self.$$authJSONSelection.val("");
		authHelpers.destroyPropertyPanel(self.$$authPanelControlSimple);
		if (!sel) {
			return;
		}
		var data = authHelpers.getSelectionData(sel);
		var article = data && data.articleSelection;
		if (article) {
			self.$$authJSONSelection.val(authHelpers.toSortedJSON(article));
			authHelpers.createPropertyPanel(self.$$authPanelControlSimple, sel, data);
		}
	},
	_updateLayout: function() {
		var self = this;
		if (self.$$authPanelRight.is(":visible")) {
			self.$$authPanelRight.css("height", window.innerHeight - 100);
			$("#s-m-app-id").css("padding-right", self.$$authPanelRight.css("width"));

			self.$$authPanelRight.find(".tab-pane").css("height", window.innerHeight - 150);
			self.$$authJSONPage.css("height", (window.innerHeight - 220) + "px");
			self.$$authJSONSelection.css("height", (window.innerHeight - 250) + "px");
			self.$$authPanelControlSimple.css("height", (window.innerHeight - 250) + "px");
			self.$$authPanelControlExpert.css("height", (window.innerHeight - 250) + "px");
		}
	},
	_updateLayoutPage: function(sel) {
		var self = this;
		var page = globals.getApplication().currentPage;
		var article = self.$$authJSONPage.val();
		var articleParsed = authHelpers.validateJSON(article);
		if (!articleParsed) {
			return;
		}
		page.updateLayout(articleParsed)
			.then(function() {
				self._hookDOMEvents();
				// Since page has re-rendered, apply selection again
				authHelpers.selectElement(sel);
				self._elementSelectionChanged();
			})
			.fail(function(e) {
				utils.modalError("Error", e);
			});

	},
	_onSave: function() {
		var self = this;
		var article = self.$$authJSONPage.val();
		var articleParsed = authHelpers.validateJSON(article);
		if (!articleParsed) {
			return;
		}

		authHelpers.saveAuthoring(self.currentPageName, {
			code: self.$$authCode.val(),
			title: self.$$authTitle.val(),
			description: self.$$authDescription.val(),

			// "factory_variant", "personal_copy", "global_variant"
			// -> "shared_copy" not yet supported
			saveAs: $("input:radio:checked", self.$$authPanelSave)[0].id,
			article: articleParsed
		});
	},
	_onApplySelection: function() {
		var self = this;
		var sel = authHelpers.getSelection();
		if (!sel) {
			return;
		}
		var json = self.$$authJSONSelection.val();
		var articleSelection = authHelpers.validateJSON(json);
		if (!articleSelection) {
			return;
		}
		var data = authHelpers.getSelectionData(sel);
		if (!data) {
			return;
		}
		// remove old keys of node
		Object.keys(data.articleSelection).forEach(function(key) {
			delete data.articleSelection[key];
		});
		// Inject JSON into full page json tree
		Object.keys(articleSelection).forEach(function(key) {
			data.articleSelection[key] = articleSelection[key];
		});

		var articlePage = authHelpers.toSortedJSON(data.articlePage);
		self.$$authJSONPage.val(articlePage);
		self._updateLayoutPage(sel);
	},
	_onApplyPage: function() {
		var self = this;
		self._updateLayoutPage();
	},
	_onClose: function() {
		var self = this;
		self._hideAuthPanel();
	}
});