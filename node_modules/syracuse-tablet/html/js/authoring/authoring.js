"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var authoringSData = require('syracuse-tablet/html/js/authoring/authoringSData');
var modal = require('syracuse-tablet/html/js/ui/modal');

var _template = '\
	<div id="authPanel" draggable="true" class="modal-dialog"> \
		<div class="modal-content"> \
			<div class="modal-header"> \
				<div class="input-group"> \
					<div id="authPageName" class="form-control"></div> \
	 				<div class="input-group-btn"> \
						<button type="button" id="authPanelBtnClose" class="btn btn-default pull-right">{{label_close}}</button> \
					</div> \
				</div> \
			</div> \
			<div class="modal-body"> \
				<ul class="nav nav-pills" role="tablist"> \
					<li class="active"><a href="#authPanelEdit" role="tab" data-toggle="tab">{{label_edit}}</a></li> \
					<li><a href="#authPanelSave" role="tab" data-toggle="tab">{{label_save}}</a></li> \
				</ul> \
				<div class="tab-content"> \
					<div id="authPanelEdit" class="tab-pane panel-body active"> \
						<textarea  id="authJSON" type="text" \
					    rows="20">{{article}}</textarea> \
					    <div class="modal-footer"> \
							<button type="button" id="authPanelBtnApply" class="btn ">{{label_apply}}</button> \
						</div> \
					</div> \
					<div id="authPanelSave" class="tab-pane panel-body"> \
						<div class="form-group"> \
							<label>{{label_code}}</label> \
							<input class="form-control" id="authCode" value="{{authCodeDefault}}" /> \
						</div> \
						<div class="form-group"> \
							<label>{{label_title}}</label> \
							<input class="form-control" id="authTitle" value="{{authTitleDefault}}" /> \
						</div> \
						<div class="form-group"> \
							<label>{{label_description}}</label> \
							<input class="form-control" id="authDescription" value="{{authDescriptionDefault}}"  /> \
						</div> \
						<label>{{label_saveas_option}}</label> \
						<div class="btn-group btn-group-justified" data-toggle="buttons"> \
	  						<div class="btn-group"> \
	  							<label class="btn btn-primary"> \
	    							<input type="radio" name="options" id="personal_copy" checked>{{label_personal}} \
	  							</label> \
	  						</div> \
	    					<div class="btn-group"> \
	  							<label class="btn btn-primary"> \
	    							<input type="radio" name="options" id="global_variant"> {{label_global}} \
	  							</label> \
	  						</div> \
	    					<div class="btn-group"> \
	  							<label class="btn btn-primary active"> \
	    							<input type="radio" name="options" id="factory_variant">{{label_factory}} \
	  							</label> \
	  						</div> \
						</div> \
						<div class="modal-footer"> \
							<button type="button" id="authPanelBtnSave" class="btn">{{label_save}}</button> \
						</div> \
					</div> \
				</div> \
			</div> \
		</div> \
	</div>';

var _authInterface;

var AuthInterface = utils.defineClass(function() {
	var self = this;
	self.$$authPanel = null;
	self.authPanelTemplate = Handlebars.compile(_template);
}, null, {
	showAuthoringPanel: function() {
		var self = this;

		if (self.$$authPanel && self.$$authPanel.is(":visible")) {
			self._hideAuthPanel();
		} else {
			self._showAuthPanel();
			self._displayAuth(globals.getApplication().currentPage);
		}
	},

	notifPageLoaded: function(page) {
		var self = this;
		if (page && !page.isVignette) {
			self._displayAuth(page);
		}
	},

	_displayAuth: function(page) {
		var self = this;
		self.currentPageName = page.state.authoringName;
		self.$$authPageName.text(self.currentPageName);
		self.$$authJSON.val(JSON.stringify(page.article, null, "  "));

		$('.btn', self.$$authPanelSave).eq(0).button("toggle");
		$('.nav-pills a[href="#authPanelEdit"]').tab('show');
	},

	_showAuthPanel: function() {
		var self = this;
		notifications.subscribe(self, ["sm.page.loaded"]);
		self._ensureAuthPanel();
		self.$$authPanel.show();
	},
	_hideAuthPanel: function() {
		var self = this;
		self._ensureAuthPanel();
		self.$$authPanel.hide();
		notifications.unsubscribe(self, ["sm.page.loaded"]);
	},
	_ensureAuthPanel: function() {
		var self = this;
		if (this.$$authPanel) {
			return;
		}
		var ctx = {
			label_edit: locale.text("auth.panel.label_edit"),
			label_save: locale.text("auth.panel.label_save"),
			label_close: locale.text("auth.panel.label_close"),
			label_apply: locale.text("auth.panel.label_apply"),

			label_code: locale.text("auth.panel.label_code"),
			label_title: locale.text("auth.panel.label_title"),
			label_description: locale.text("auth.panel.label_description"),
			label_saveas_option: locale.text("auth.panel.label_saveas_option"),
			label_personal: locale.text("auth.panel.label_personal"),
			label_global: locale.text("auth.panel.label_global"),
			label_factory: locale.text("auth.panel.label_factory"),

			authCodeDefault: locale.text("auth.panel.authCodeDefault"),
			authTitleDefault: locale.text("auth.panel.authTitleDefault"),
			authDescriptionDefault: locale.text("auth.panel.authDescriptionDefault")
		};

		self.$$authPanel = $(self.authPanelTemplate(ctx));
		$("body").append(self.$$authPanel);
		self.$$authJSON = $("#authJSON");
		self.$$authPageName = $("#authPageName");
		self.$$authCode = $("#authCode");
		self.$$authTitle = $("#authTitle");
		self.$$authDescription = $("#authDescription");

		self.$$authPanelEdit = $("#authPanelEdit");
		self.$$authPanelSave = $("#authPanelSave");

		$("#authPanelBtnSave").bind("click", self._onSave.bind(self));
		$("#authPanelBtnClose").bind("click", self._onClose.bind(self));
		$("#authPanelBtnApply").bind("click", self._onApply.bind(self));
	},
	_updateLayout: function() {
		var self = this;
		var page = globals.getApplication().currentPage;
		var article = self.$$authJSON.val();
		var articleParsed = _validateJSON(article);
		if (!articleParsed) {
			return;
		}
		page.updateLayout(articleParsed).fail(function(e) {
			utils.modalError("Error", e);
		});

	},
	_onSave: function() {
		var self = this;
		var article = self.$$authJSON.val();
		var articleParsed = _validateJSON(article);
		if (!articleParsed) {
			return;
		}

		_saveAuthoring(self.currentPageName, {
			code: self.$$authCode.val(),
			title: self.$$authTitle.val(),
			description: self.$$authDescription.val(),

			// "factory_variant", "personal_copy", "global_variant"
			// -> "shared_copy" not yet supported
			saveAs: $("input:radio:checked", self.$$authPanelSave)[0].id,

			article: articleParsed
		});
	},
	_onApply: function() {
		var self = this;
		self._updateLayout();
	},
	_onClose: function() {
		var self = this;
		self._hideAuthPanel();
	}
});

function _saveAuthoring(page, opts) {

	var segs = page.split(".");

	var pageData = {
		application: segs[0], // x3
		contract: segs[1], // erp
		representation: segs[2], // ACTIV
		facet: segs[3], // $query

		roles: [],
		users: [],
		endpoints: [],

		saveAsOption: opts.saveAs,

		variantCode: opts.code,
		variantTitle: opts.title,
		variantDescription: opts.description,

		article: opts.article
	};

	return authoringSData.getPageVariants({
		application: segs[0],
		contract: segs[1],
		representation: segs[2],
		facet: segs[3]
	})
		.then(function(variants) {
			variants && variants.some(function(v) {
				var match = v.title === opts.title && v.code === opts.code && v.description === opts.description;

				// Did type change? Then create new variant
				if (opts.saveAs === "factory_variant" && v.isFactory !== true) {
					match = false;
				} else if (opts.saveAs === "global_variant" && (v.isFactory === true || v.personalCopy === true)) {
					match = false;
				} else if (opts.saveAs === "personal_copy" && v.personalCopy !== true) {
					match = false;
				}

				// If all matches, it's a save and not a save as
				if (match) {
					pageData.variant = v.$uuid;
				}
			});
		})
		.then(function() {
			return authoringSData.savePageDefinition(pageData);
		})
		.then(function(data) {
			modal.info(locale.text("auth.panel.save_ok_title"), locale.text("auth.panel.save_ok_text"));
		})
		.fail(function(e) {
			modal.info(locale.text("auth.panel.save_error_title"), locale.text("auth.panel.save_error_text") + "\n" + JSON.stringify(e));
		});
}

function _validateJSON(jsonText) {
	var obj;
	try {
		obj = JSON.parse(jsonText);

		// TODO: Logically check article content

		return obj;
	} catch (e) {
		modal.info(locale.text("auth.panel.save_error_title"), locale.text("auth.panel.save_error_json"));
	}
}

exports.startDesignPage = function() {
	if (!_authInterface) {
		_authInterface = new AuthInterface();
	}

	_authInterface.showAuthoringPanel();
};