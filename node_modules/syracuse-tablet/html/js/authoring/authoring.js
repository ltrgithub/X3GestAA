"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var authHelpers = require('syracuse-tablet/html/js/authoring/authoringHelpers');
var authoringPanelRight = require('syracuse-tablet/html/js/authoring/authoringPanelRight');
var authoringPanelLeft = require('syracuse-tablet/html/js/authoring/authoringPanelLeft');
var modal = require('syracuse-tablet/html/js/ui/modal');
var authProps = require('syracuse-tablet/html/js/authoring/authoringProperties');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');

var _authInterface;
exports.toggleDesignPage = function() {
	if (!_authInterface) {
		_authInterface = new AuthInterface();
	}

	_authInterface.toggleDesignPage();
};

var AuthInterface = utils.defineClass(function() {
	var self = this;
	self.$$authPanel = null;
	self.$$pageContent = $(".s-m-page.s-m-full > section.s-m-main-content");
	self.isActive = false;

	self.rightPanel = new authoringPanelRight.Panel();
	self.leftPanel = new authoringPanelLeft.Panel();

	notifications.subscribe(self, ["sm.page.loaded"]);
	notifications.subscribe(self, ["sm.auth.change.prop.ui"]);

	authProps.initProperties(authHelpers);

}, null, {
	toggleDesignPage: function() {
		var self = this;

		if (self.isActive) {
			self.disable();
		} else {
			self.enable();
		}
		uiutils.triggerResizeInternal();
	},

	enable: function() {
		var self = this;

		self.rightPanel.show();
		self.leftPanel.show();

		self.rightPanel.displayAuth(globals.getApplication().currentPage);

		authHelpers.enableAuthCss();

		self.isActive = true;
	},

	disable: function() {
		var self = this;

		self.rightPanel.hide();
		self.leftPanel.hide();
		self.isActive = false;

		authHelpers.disableAuthCss();

		self.isActive = false;
	},

	notifPageLoaded: function(page) {
		var self = this;
		if (!self.isActive) {
			return;
		}

		if (page && page.state && page.state.disableAuthoring) {
			authHelpers.disableAuthCss();
			self.toggleDesignPage();
			return;
		}

		if (page && !page.isVignette) {
			self.rightPanel.displayAuth(page);
		}
		self._hookDOMEvents();
	},

	// Called by panel if a property like color has been changed using the simple ui
	notifAuthChangePropUi: function(articlePage) {
		var self = this;
		self._updateLayoutPage(articlePage);
	},

	_updateLayoutPage: function(articlePage) {
		var self = this;
		var page = globals.getApplication().currentPage;
		try {
			var articleParsed = JSON.parse(articlePage);
		} catch (e) {
			// Never end up here because validated before
		}
		if (!articleParsed) {
			return;
		}
		var sel = authHelpers.getSelection();
		authHelpers.savePanelStates();
		page.updateLayout(articleParsed)
			.then(function() {
				authHelpers.enableAuthCss();
				// Since page has re-rendered, apply selection again
				if (sel) {
					authHelpers.selectElement(sel, false);
					var data = authHelpers.getSelectionData(sel);
					authHelpers.refreshPropertyPanels(sel, data);
				}
			})
			.fail(function(e) {
				modal.error("Error", e);
			});

	}
});