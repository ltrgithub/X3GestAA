"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var authHtml = require('syracuse-tablet/html/js/authoring/authoringHtml');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var modalChooseDevice = require('syracuse-tablet/html/js/ui/modals/modalChooseDevice');

exports.Panel = utils.defineClass(function() {
	var self = this;
	self.$$panel = null;
}, null, {
	show: function() {
		var self = this;

		self._ensurePanel();
		self.$$panel.show();

		self._initDefaults();
	},
	hide: function() {
		var self = this;
		self._ensurePanel();
		self.$$panel.hide();
	},

	_ensurePanel: function() {
		var self = this;
		if (this.$$panel) {
			return;
		}

		var ctx = {
			label_settings: locale.text("auth.device.settings"),
			label_save: locale.text("auth.panel.label_save"),
			label_close: locale.text("auth.panel.label_close"),
		};

		self.$$panel = $("#s-m-auth-panel-header-id");
		self.$$panel.append($(authHtml.execute("authPanelHeader", ctx)));

		self._getDomObjects();
		self._initDomEvents();

		notifications.subscribe(self, ["sm.main.layout.changed"]);
		notifications.subscribe(self, ["sm.auth.set.selection"]);
		notifications.subscribe(self, ["sm.auth.change.prop.ui"]);
	},

	_getDomObjects: function() {
		var self = this;
		self.$$orientation = $("#s-m-auth-orientation-id", self.$$panel);
	},

	_initDomEvents: function() {
		var self = this;
		// preview options
		$("#s-m-auth-settings-id").on("click", self._onChooseDevice.bind(self));
		$("#s-m-auth-scale-id").on("click", self._onScaleDevice.bind(self));
		$("#s-m-auth-vertical-id").on("click", self._onOrientation.bind(self));
		$("#s-m-auth-horizontal-id").on("click", self._onOrientation.bind(self));

		// save/close
		$("#auth-btn-save-id").on("click", self._onSave.bind(self));
		$("#auth-btn-close-id").on("click", self._onClose.bind(self));
	},

	_initDefaults: function() {
		var self = this;
	},

	notifMainLayoutChanged: function() {
		var self = this;
		var site = globals.getSiteLayout();
		var cur = site.getCurrentLayoutSettings();

		if (cur.pageParameters.forceAutoScale === true) {
			$("#s-m-auth-scale-id").addClass('active');
		} else {
			$("#s-m-auth-scale-id").removeClass('active');
		}
		if (cur.pageParameters.orientation === "landscape") {
			$("#s-m-auth-horizontal-id").addClass('active');
			$("#s-m-auth-vertical-id").removeClass('active');
		} else {
			$("#s-m-auth-horizontal-id").removeClass('active');
			$("#s-m-auth-vertical-id").addClass('active');
		}

	},

	// Called by panel if a property like color has been changed using the simple ui
	notifAuthChangePropUi: function(articlePage) {
		var self = this;
	},

	notifAuthSetSelection: function(path) {
		var self = this;
	},

	_setDeviceSize: function(size, orientation) {
		var self = this;
		var params = {
			layout: {
				pageParameters: {}
			}
		};

		if (size) {
			params.layout.pageParameters.device = size;
		}
		if (orientation) {
			params.layout.pageParameters.orientation = orientation;
		}
		uiutils.triggerResizeInternal(params);
	},

	_onClose: function() {
		var self = this;
		notifications.publish(["sm.auth.close"]);
	},

	_onSave: function() {
		var self = this;
		notifications.publish(["sm.auth.save"]);
	},

	_onChooseDevice: function(elmt) {
		var self = this;
		var site = globals.getSiteLayout();
		var cur = site.getCurrentLayoutSettings();

		var modal = new modalChooseDevice.Modal(cur.pageParameters.device);
		modal.show().then(function(result) {
			if (result != null) {
				self._setDeviceSize(result);
				notifications.publish(["sm.auth.display.changed"], "device");
			}
		});
	},
	_onScaleDevice: function(elmt) {
		var site = globals.getSiteLayout();
		var cur = site.getCurrentLayoutSettings();

		var params = {
			layout: {
				pageParameters: {
					forceAutoScale: cur.pageParameters.forceAutoScale === false
				}
			}
		};
		uiutils.triggerResizeInternal(params);
		notifications.publish(["sm.auth.display.changed"], "scale");
	},
	_onOrientation: function(elmt) {
		var self = this;
		var orient = $(elmt.currentTarget).attr("data-auth-orientation");
		if (orient) {
			self._setDeviceSize(null, orient);
			notifications.publish(["sm.auth.display.changed"], "orientation");
		}
	},
});