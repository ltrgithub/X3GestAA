"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var authHelpers = require('syracuse-tablet/html/js/authoring/authoringHelpers');
var authHtml = require('syracuse-tablet/html/js/authoring/authoringHtml');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var authArrayCard = require('syracuse-tablet/html/js/authoring/arrays/authArrayCard');

exports.Panel = utils.defineClass(function AuthoringPanelRight() {
	var self = this;
	self.$$panel = null;
	self.topButtons = [];
}, null, {
	show: function() {
		var self = this;

		self._ensurePanel();
		self._subscribe();

		self.$$panel.show();
		self.$$splitter.show();

		self._initDefaults();

		$('.btn', self.$$panelSave).eq(0).button("toggle");
		$('.nav-pills a[href="#authPanelControl"]').tab('show');
	},

	hide: function() {
		var self = this;
		self._ensurePanel();
		self.$$panel.hide();
		self.$$splitter.hide();
		self._unscribe();
	},
	_subscribe: function() {
		var self = this;
		notifications.subscribe(self, ["sm.main.layout.changed"]);
		notifications.subscribe(self, ["sm.auth.set.page"]);
		notifications.subscribe(self, ["sm.auth.set.selection"]);
		notifications.subscribe(self, ["sm.auth.change.prop.ui"]);
		notifications.subscribe(self, ["sm.auth.top.button"]);
	},

	_unscribe: function() {
		var self = this;
		notifications.unsubscribe(self, ["sm.main.layout.changed"]);
		notifications.unsubscribe(self, ["sm.auth.set.page"]);
		notifications.unsubscribe(self, ["sm.auth.set.selection"]);
		notifications.unsubscribe(self, ["sm.auth.change.prop.ui"]);
		notifications.unsubscribe(self, ["sm.auth.top.button"]);
	},

	notifMainLayoutChanged: function() {
		var self = this;
		self.$$panel.find(".tab-content").css({
			"height": self.$$panel.height() - 100
		});
	},

	_ensurePanel: function() {
		var self = this;
		if (this.$$panel) {
			return;
		}

		var ctx = {
			label_control: locale.text("auth.panel.label_control"),
			label_edit: locale.text("auth.panel.label_page"),
			label_apply: locale.text("auth.panel.label_apply"),

			label_simple: locale.text("auth.panel.label_simple"),
			label_expert: locale.text("auth.panel.label_expert"),

			label_control_title: locale.text("auth.panel.label_control_title"),
			label_control_type: locale.text("auth.panel.label_control_type"),
		};

		self.$$panel = $("#s-m-auth-panel-right-id");
		$(authHtml.execute("authPanelRightStructure", ctx)).appendTo(self.$$panel);
		self.$$panelRightStruct = self.$$panel.find("#authPanelControlTitle");

		self._getDomObjects();
		self._initSplitter();
		self._initDomEvents();
	},

	_getDomObjects: function() {
		var self = this;
		self.$$panelControlSimple = $("#authPanelControlSimple");
		self.$$panelControlExpert = $("#authPanelControlExpert");
		self.$$authPageName = $("#authPageName");
		self.$$panelControlTitle = $("#authPanelControlTitle");
		self.$$panelControlType = $("#authPanelControlType");

		self.$$panelEdit = $("#authPanelEdit");
	},

	_initDomEvents: function() {
		var self = this;
	},

	_initDefaults: function() {
		var self = this;
		self.$$panelControlTitle.text("");
		self.$$panelControlType.text(locale.text("auth.panel.label_control"));
		self.destroyPropertyPanel();
	},
	/**
	 * context	indicates the context of destroy: selection...
	 * 		origin	"selection" -> destroy called by a selection of ctrl.layout
	 * context is used by topButtons destroyButtonMarkup
	 * 		destroyButtonMarkup returns false if button has not been destroyed
	 * -> destroyButtonMarkup/createButtonMarkup facilitate the search for buttons properties
	 */
	destroyPropertyPanel: function(context) {
		if (this.topButtons) {
			var preserveButtons = [];
			this.topButtons.forEach(function(prop) {
				if (prop.destroyButtonMarkup) {
					if (prop.destroyButtonMarkup(context) === false) {
						preserveButtons.push(prop);
					};
				}
			});
			this.topButtons = preserveButtons;
		}
		if (this._propertyPanel) {
			this._propertyPanel.destroy();
			this._propertyPanel = null;
		}
	},

	notifAuthSetPage: function(page) {
		var self = this;
		self.currentPageName = page.state.authoringName;
		self.currentPageId = page.id;
		self.$$authPageName.text(self.currentPageName);
		self._initDefaults();
		if (page.state.type == "carddesign") {
			// Add back button from card design -> array
			notifications.publish("sm.auth.top.button", "add", authArrayCard.getCardDesignBackButton(page));
		}
	},


	// Called by panel if a property like color has been changed using the simple ui
	notifAuthChangePropUi: function(articlePage) {
		var self = this;
	},

	/**
	 * path = null to remove current selection
	 */
	notifAuthSetSelection: function(id) {
		var self = this;
		self.$$panelControlTitle.text("");
		self.$$panelControlType.text(locale.text("auth.panel.label_control"));

		var sel = id ? authHelpers.getSelectionById(id) : null;

		authHelpers.savePanelStates();
		self.destroyPropertyPanel({
			origin: "selection"
		});
		if (!sel) {
			return;
		}
		var data = authHelpers.getSelectionData(sel);
		if (data) {
			self.$$panelControlTitle.text(data.title || "");
			self.$$panelControlType.text(locale.text("auth.panel.label_control") + " " + data.type || "");
			var article = data.articleSelection;
			if (article) {
				this._propertyPanel = authHelpers.createPropertyPanel(self.$$panelControlSimple, sel, data);
			}
		}
	},

	getPageArticle: function() {
		return this.getPage().article;
	},

	getPage: function() {
		var page = $("#s-m-app-id").find("#" + this.currentPageId).smPageController();
		if (!page) throw new Error("Page not found " + this.currentPageId);
		if (!page.isActive()) throw new Error("Page not active " + this.currentPageId);
		return page;
	},

	_initSplitter: function() {
		var self = this;
		self.$$splitter = $("#s-m-auth-splitter-right-id");
		self.$$splitter.draggable({
			axis: "x",
			stop: function(e, ui) {
				var $$splitter = $(this);
				var pos = $$splitter.position();
				var width = $$splitter.width();
				var panelRightSize = $(window).width() - pos.left - width;
				uiutils.triggerResizeInternal({
					layout: {
						authPanelRight: {
							width: panelRightSize
						}
					}
				});
			}
		});
	},
	/**
	 * Ad a button at the top of property panel
	 */
	notifAuthTopButton: function(action, prop) {
		if (!this.$$panelRightStruct || !prop.createButtonMarkup) return;
		this.topButtons.push(prop);
		this.$$panelRightStruct.after(prop.createButtonMarkup(this.getPage()));
	}
});