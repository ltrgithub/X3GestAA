"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var authHelpers = require('syracuse-tablet/html/js/authoring/authoringHelpers');
var authHtml = require('syracuse-tablet/html/js/authoring/authoringHtml');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var authVal = require('syracuse-tablet/html/js/authoring/authoringVal');
var authProps = require('syracuse-tablet/html/js/authoring/authoringProperties');

exports.Panel = utils.defineClass(function() {
	var self = this;
	self.$$panel = null;
}, null, {
	show: function() {
		var self = this;

		self._ensurePanel();
		self.$$panel.show();
		self.$$splitter.show();

		self._initDefaults();

		$('.btn', self.$$panelSave).eq(0).button("toggle");
		$('.nav-pills a[href="#authPanelControl"]').tab('show');
	},
	hide: function() {
		var self = this;
		self._ensurePanel();
		self.$$panel.hide();
		self.$$splitter.hide();
	},

	notifMainLayoutChanged: function() {
		var self = this;
		self.$$panel.find(".tab-content").css({
			"height": self.$$panel.height() - 100
		});
	},

	_ensurePanel: function() {
		var self = this;
		if (this.$$panel) {
			return;
		}

		var ctx = {
			label_control: locale.text("auth.panel.label_control"),
			label_edit: locale.text("auth.panel.label_page"),
			label_save: locale.text("auth.panel.label_save"),
			label_close: locale.text("auth.panel.label_close"),
			label_apply: locale.text("auth.panel.label_apply"),

			label_simple: locale.text("auth.panel.label_simple"),
			label_expert: locale.text("auth.panel.label_expert"),

			label_code: locale.text("auth.panel.label_code"),
			label_title: locale.text("auth.panel.label_title"),
			label_description: locale.text("auth.panel.label_description"),
			label_saveas_option: locale.text("auth.panel.label_saveas_option"),
			label_personal: locale.text("auth.panel.label_personal"),
			label_global: locale.text("auth.panel.label_global"),
			label_factory: locale.text("auth.panel.label_factory"),

			label_control_title: locale.text("auth.panel.label_control_title"),
			label_control_type: locale.text("auth.panel.label_control_type"),


			authCodeDefault: locale.text("auth.panel.authCodeDefault"),
			authTitleDefault: locale.text("auth.panel.authTitleDefault"),
			authDescriptionDefault: locale.text("auth.panel.authDescriptionDefault")
		};

		self.$$panel = $("#s-m-auth-panel-right-id");
		self.$$panel.append($(authHtml.execute("authPanelRightStructure", ctx)));
		self._getDomObjects();
		self._initSplitter();

		$("#authPanelBtnSave").on("click", self._onSave.bind(self));
		$("#authPanelBtnPageApply").on("click", self._onApplyPage.bind(self));

		notifications.subscribe(self, ["sm.main.layout.changed"]);
		notifications.subscribe(self, ["sm.auth.set.selection"]);
		notifications.subscribe(self, ["sm.auth.change.prop.ui"]);
	},

	_getDomObjects: function() {
		var self = this;
		self.$$authJSONPage = $("#authJSONPage");
		self.$$panelControlSimple = $("#authPanelControlSimple");
		self.$$panelControlExpert = $("#authPanelControlExpert");
		self.$$authPageName = $("#authPageName");
		self.$$authCode = $("#authCode");
		self.$$authTitle = $("#authTitle");
		self.$$authDescription = $("#authDescription");
		self.$$panelControlTitle = $("#authPanelControlTitle");
		self.$$panelControlType = $("#authPanelControlType");

		self.$$panelEdit = $("#authPanelEdit");
		self.$$panelSave = $("#authPanelSave");
	},

	_initDefaults: function() {
		var self = this;
		self.$$authJSONPage.val("");
		self.$$panelControlTitle.text("");
		self.$$panelControlType.text("");
		authHelpers.destroyPropertyPanel(self.$$panelControlSimple);
	},

	displayAuth: function(page) {
		var self = this;
		self.currentPageName = page.state.authoringName;
		self.$$authPageName.text(self.currentPageName);
		self.$$authJSONPage.val(authVal.toSortedJSON(page.article));
	},


	// Called by panel if a property like color has been changed using the simple ui
	notifAuthChangePropUi: function(articlePage) {
		var self = this;
		self.$$authJSONPage.val(articlePage);
	},

	notifAuthSetSelection: function(path) {
		var self = this;

		self.$$panelControlTitle.text("");
		self.$$panelControlType.text("");

		var sel = authHelpers.getSelectionByPath(path);

		authHelpers.savePanelStates();

		authHelpers.savePanelStates();
		authHelpers.destroyPropertyPanel(self.$$panelControlSimple);
		if (!sel) {
			return;
		}
		var data = authHelpers.getSelectionData(sel);
		self.$$panelControlTitle.text(data.title);
		self.$$panelControlType.text(data.type);
		var article = data && data.articleSelection;
		if (article) {
			authHelpers.createPropertyPanel(self.$$panelControlSimple, sel, data);
		}
	},

	_onSave: function() {
		var self = this;
		var article = self.$$authJSONPage.val();
		var articleParsed = authVal.validateJSON(true, article, authProps.getAllProperties());
		if (!articleParsed) {
			return;
		}

		authHelpers.saveAuthoring(self.currentPageName, {
			code: self.$$authCode.val(),
			title: self.$$authTitle.val(),
			description: self.$$authDescription.val(),

			// "factory_variant", "personal_copy", "global_variant"
			// -> "shared_copy" not yet supported
			saveAs: $("input:radio:checked", self.$$panelSave)[0].id,
			article: articleParsed
		});
	},
	_onApplyPage: function() {
		var self = this;
		var articlePage = self.$$authJSONPage.val();
		var articleParsed = authVal.validateJSON(true, articlePage, authProps.getAllProperties());
		if (articleParsed) {
			articlePage = authVal.toSortedJSON(articleParsed);
			notifications.publish(["sm.auth.change.prop.ui"], articlePage);
		}
	},
	_initSplitter: function() {
		var self = this;
		self.$$splitter = $("#s-m-auth-splitter-right-id");
		self.$$splitter.draggable({
			axis: "x",
			stop: function(e, ui) {
				var $$splitter = $(this);
				var pos = $$splitter.position();
				var width = $$splitter.width();
				var panelRightSize = $(window).width() - pos.left - width;
				uiutils.triggerResizeInternal({
					layout: {
						authPanelRight: {
							width: panelRightSize
						}
					}
				});
			}
		});
	}
});