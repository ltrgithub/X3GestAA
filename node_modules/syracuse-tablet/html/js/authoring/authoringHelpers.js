"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var authoringSData = require('syracuse-tablet/html/js/authoring/authoringSData');
var modal = require('syracuse-tablet/html/js/ui/modal');
var authProps = require('syracuse-tablet/html/js/authoring/authoringProperties');
var authVal = require('syracuse-tablet/html/js/authoring/authoringVal');
var authHtml = require('syracuse-tablet/html/js/authoring/authoringHtml');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _lastHoverElement;

//Controls and layout classes that cannot be selected during authoring
var _elementsNoAuthoring = [".s-m-vignette", ".s-m-hub", ".s-m-array .s-m-control", ".s-m-array .s-m-layout"];

exports.enableAuthCss = function() {
	$(".s-m-control").addClass("s-m-auth");
	$(".s-m-layout").addClass("s-m-auth");
	_elementsNoAuthoring.forEach(function(e) {
		$(e).removeClass("s-m-auth");
	});

	$(".s-m-auth").on("click", _OnSelectionChange);

	$(".s-m-auth").mouseover(function(e) {
		var o = $(e.currentTarget);
		if (_lastHoverElement) {
			_lastHoverElement.removeClass("s-m-auth-hover");
		}
		o.addClass("s-m-auth-hover");
		_lastHoverElement = o;
		return false;
	});
	$(".s-m-auth").mouseout(function(e) {
		var o = $(e.currentTarget);
		o.removeClass("s-m-auth-hover");
	});
};

exports.disableAuthCss = function() {
	$(".s-m-auth").off("click", _OnSelectionChange);
	$(".s-m-auth").removeClass("s-m-auth");
};

exports.selectElement = function(sel, notify) {
	$(".s-m-auth-selected").removeClass("s-m-auth-selected");
	var $$elmt = $("[data-layout-path='" + sel.layoutPath + "']");
	var domItem = $$elmt[0];
	if (domItem) {
		_OnSelectionChange.apply(domItem, [notify]);
	}
};

function _OnSelectionChange(notify) {
	$(".s-m-auth-hover").removeClass("s-m-auth-hover");
	$(".s-m-auth-selected").removeClass("s-m-auth-selected");

	var $$s = $(this);
	$$s.addClass("s-m-auth-selected");

	var sel = exports.getSelection();
	var selData = exports.getSelectionData(sel);
	if (!selData || !selData.articleSelection) {
		$$s.removeClass("s-m-auth-selected");
	}
	if (notify !== false) {
		notifications.publish(["sm.auth.change.selection"], sel);
	}

	return false;
}


/*
 * Find control instance from DOM element
 */
function _findControl($$ctrl) {
	var app = globals.getApplication();
	var control;
	var ctrlId = $$ctrl.attr("id");
	if (!ctrlId) {
		return null;
	}
	if (app.currentPage.getType() === "dashboard") {
		var vignetteId = $$ctrl.closest(".s-m-control.s-m-vignette").attr("id");
		if (!vignetteId) {
			return null;
		}
		var vignette = app.currentPage.getControl(vignetteId);
		if (!vignette) {
			return null;
		}
		control = vignette.getPageControl(ctrlId);
	} else {
		control = app.currentPage.getControl(ctrlId);
	}
	return control;
};

exports.getSelection = function() {
	var $$lap = $(".s-m-auth-selected");
	if ($$lap.length !== 1) {
		return null;
	}
	var sel = {
		$$elmt: $$lap,
		layoutPath: $$lap.attr("data-layout-path")
	};
	return sel;
};

exports.getSelectionData = function(sel) {
	if (!sel || !sel.layoutPath) {
		return null;
	}
	var app = globals.getApplication();
	var article = $.extend(true, {}, app.currentPage.article);
	var node = {
		"$items": [article]
	};

	var elmts = sel.layoutPath.split("-");
	while (elmts.length > 0) {
		var idx = +elmts.shift();
		var children;
		if (node && node.$items) {
			children = node.$items;
		} else if (node.$article) {
			children = [node.$article];
		}
		node = children && children[idx];
	}

	var title;
	var type;
	var control = _findControl(sel.$$elmt);
	if (control) {
		title = control.prototype && control.prototype.data("$title") + " (" + control.$bind + ")";
		type = control.typeName;
	} else {
		title = locale.text("auth.label_layout");
		type = sel.$$elmt.attr("id");
		type = type.replace(/\d/g, "");
	}
	return {
		articlePage: article,
		articleSelection: node,
		title: title,
		type: type,
		control: control
	};
};

// sm.auth.articlechange.ui
exports.createPropertyPanel = function($$parent, sel, data) {
	var props = authProps.getProperties(sel, data);
	if (!props) {
		return;
	}

	var $$accord = $('<div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">');
	var id;
	var num = 0;
	var article = sel.articleSelection;
	props.forEach(function(prop) {
		id = "auth_prop_" + prop.name;
		var $$block = $(
			authHtml.execute("authPanelPropertyGroup", {
				id: id,
				expanded: num === 0,
				label: prop.label
			}));
		var $$content = $('#collapse_' + id, $$block);
		prop.createMarkup($$content, prop, sel, data);
		$$accord.append($$block);
		num++;
	});
	$$parent.append($$accord);
};

exports.refreshPropertyPanels = function(sel, data) {
	var props = authProps.getProperties(sel, data);
	if (!props) {
		return;
	}
	props.forEach(function(prop) {
		if (prop.refreshMarkup) {
			var id = "#collapse_auth_prop_" + prop.name;
			var $$panel = $(id);
			prop.refreshMarkup($$panel, prop, sel, data);
		}
	});
};

exports.destroyPropertyPanel = function($$parent) {
	$$parent.empty();
};

exports.saveAuthoring = function(page, opts) {

	var segs = page.split(".");

	var pageData = {
		application: segs[0], // x3
		contract: segs[1], // erp
		representation: segs[2], // ACTIV
		facet: segs[3], // $query

		roles: [],
		users: [],
		endpoints: [],

		saveAsOption: opts.saveAs,

		variantCode: opts.code,
		variantTitle: opts.title,
		variantDescription: opts.description,

		article: opts.article
	};

	return authoringSData.getPageVariants({
		application: segs[0],
		contract: segs[1],
		representation: segs[2],
		facet: segs[3]
	})
		.then(function(variants) {
			variants && variants.some(function(v) {
				var match = v.title === opts.title && v.code === opts.code && v.description === opts.description;

				// Did type change? Then create new variant
				if (opts.saveAs === "factory_variant" && v.isFactory !== true) {
					match = false;
				} else if (opts.saveAs === "global_variant" && v.isFactory === true) {
					match = false;
				} else if (opts.saveAs === "personal_copy" && v.isFactory === true) {
					match = false;
				}

				// If all matches, it's a save and not a save as
				if (match) {
					pageData.variant = v.$uuid;
				}
			});
		})
		.then(function() {
			return authoringSData.savePageDefinition(pageData);
		})
		.then(function(data) {
			modal.diagnoses(locale.text("auth.panel.save_ok_title"), {
				$diagnoses: data.diags
			});
		})
		.fail(function(e) {
			modal.diagnoses(locale.text("auth.panel.save_error_title"), e);
		});
};

exports.validateJSON = function(fullPage, jsonText) {
	var obj;
	try {
		obj = JSON.parse(jsonText);

		var errors = authVal.validate(fullPage, obj);
		if (errors.length > 0) {
			var text = "\n" + errors.join("\n");
			modal.info(locale.text("auth.panel.save_error_title"), locale.text("auth.panel.save_error_json") + text);
		} else {
			return obj;
		}
	} catch (e) {
		modal.info(locale.text("auth.panel.save_error_title"), locale.text("auth.panel.save_error_json"));
	}
};

exports.toSortedJSON = function(obj) {
	var toJSON = function() {
		var self = this;
		var that = {};
		var $items;

		Object.keys(self).forEach(function(key) {
			if (key !== "$items") {
				that[key] = self[key];
			} else {
				$items = self[key];
			}
		});
		if ($items) {
			that.$items = $items;
		}
		return that;
	};
	// Step one: Hook property ordering
	JSON.stringify(obj,
		function replacer(key, value) {
			if ($.isPlainObject(value)) {
				value.toJSON = toJSON;
			}
			return value;
		});
	// Build json
	var str = JSON.stringify(obj, null, " ");
	return str;
};

exports.injectJSON = function(data, articleSelection) {
	// remove old keys of node
	Object.keys(data.articleSelection).forEach(function(key) {
		delete data.articleSelection[key];
	});
	// Inject JSON into full page json tree
	Object.keys(articleSelection).forEach(function(key) {
		data.articleSelection[key] = articleSelection[key];
	});
};