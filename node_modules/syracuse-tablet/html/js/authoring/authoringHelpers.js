"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var authoringSData = require('syracuse-tablet/html/js/authoring/authoringSData');
var modal = require('syracuse-tablet/html/js/ui/modal');
var authProps = require('syracuse-tablet/html/js/authoring/authoringProperties');
var authHtml = require('syracuse-tablet/html/js/authoring/authoringHtml');

var _openPanels = [];

exports.selectElement = function(sel) {
	$(".s-m-auth-selected").removeClass("s-m-auth-selected");
	var $$elmt = $("[data-layout-path='" + sel.layoutPath + "']", $("#s-m-app-id"));
	var domItem = $$elmt[0];
};

/*
 * Find control instance from DOM element
 */
exports.findControl = function($$ctrl) {
	var app = globals.getApplication();
	var control;
	var ctrlId = $$ctrl.attr("id");
	if (!ctrlId) {
		return null;
	}
	if (app.currentPage.isDashboard()) {
		var vignetteId = $$ctrl.closest(".s-m-control.s-m-vignette").attr("id");
		if (!vignetteId) {
			return null;
		}
		var vignette = app.currentPage.getControl(vignetteId);
		if (!vignette) {
			return null;
		}
		// Caller looking for vignette?
		if (vignetteId === ctrlId) {
			return vignette;
		}
		control = vignette.getPageControl(ctrlId);
	} else {
		control = app.currentPage.getControl(ctrlId);
	}
	return control;
};

exports.getSelectionByPath = function(path) {
	var $$item = $("#s-m-app-id [data-layout-path=" + path + "]");
	return {
		$$elmt: $$item,
		layoutPath: $$item.attr("data-layout-path")
	};
};

exports.getSelectionData = function(sel) {
	if (!sel || !sel.layoutPath) {
		return null;
	}
	var app = globals.getApplication();
	var article = $.extend(true, {}, app.currentPage.article);
	var node = {
		"$items": [article]
	};

	var elmts = sel.layoutPath.split("-");
	while (elmts.length > 0) {
		var idx = +elmts.shift();
		var children;
		if (node && node.$items) {
			children = node.$items;
		} else if (node.$article) {
			children = [node.$article];
		}
		node = children && children[idx];
	}

	var title;
	var type;
	var control = exports.findControl(sel.$$elmt);
	if (control) {
		title = control.prototype && control.prototype.data("$title") + " (" + control.$bind + ")";
		type = control.typeName;
	} else {
		title = locale.text("auth.label_layout");
		type = sel.$$elmt.attr("id");
		type = type.replace(/\d/g, "");
	}
	return {
		articlePage: article,
		articleSelection: node,
		title: title,
		type: type,
		control: control
	};
};

// sm.auth.articlechange.ui
exports.createPropertyPanel = function($$parent, sel, data) {
	var props = authProps.getProperties(sel, data);
	if (!props) {
		return;
	}

	var $$accord = $('<div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">');
	var id;
	var num = 0;
	var article = sel.articleSelection;
	props.forEach(function(prop) {
		id = "auth_prop_" + prop.name;
		var expanded = _openPanels.indexOf("collapse_" + id) > -1;

		if (prop.createMarkup) {
			var $$block = $(
				authHtml.execute("authPanelPropertyGroup", {
					id: id,
					expanded: expanded,
					label: prop.label,
					type: prop.type || "default"
				}));
			var $$content = $('#collapse_' + id, $$block);
			prop.createMarkup($$content, prop, sel, data);
		} else {
			var $$block = $(
				authHtml.execute("authPanelPropertySeperator", {
					id: id,
					expanded: expanded,
					label: prop.label,
					type: prop.type || "default"
				}));
		}
		$$accord.append($$block);
		num++;
	});
	$$parent.append($$accord);
};

exports.refreshPropertyPanels = function(sel, data) {
	var props = authProps.getProperties(sel, data);
	if (!props) {
		return;
	}
	props.forEach(function(prop) {
		if (prop.refreshMarkup) {
			var id = "#collapse_auth_prop_" + prop.name;
			var $$panel = $(id);
			prop.refreshMarkup($$panel, prop, sel, data);
		}
	});
};

exports.destroyPropertyPanel = function($$parent) {
	$$parent.empty();
};

exports.savePanelStates = function() {
	var i;
	var panels = $(".panel-collapse.collapse.in", "#authPanelControlSimple");
	_openPanels = [];
	for (i = 0; i < panels.length; i++) {
		_openPanels.push(panels[i].id);
	}
};

exports.saveAuthoring = function(page, opts) {

	var segs = page.split(".");

	var pageData = {
		application: segs[0], // x3
		contract: segs[1], // erp
		representation: segs[2], // ACTIV
		facet: segs[3], // $query

		roles: [],
		users: [],
		endpoints: [],

		saveAsOption: opts.saveAs,

		variantCode: opts.code,
		variantTitle: opts.title,
		variantDescription: opts.description,

		article: opts.article
	};

	return authoringSData.getPageVariants({
		application: segs[0],
		contract: segs[1],
		representation: segs[2],
		facet: segs[3]
	})
		.then(function(variants) {
			variants && variants.some(function(v) {
				var match = v.title === opts.title && v.code === opts.code && v.description === opts.description;

				// Did type change? Then create new variant
				if (opts.saveAs === "factory_variant" && v.isFactory !== true) {
					match = false;
				} else if (opts.saveAs === "global_variant" && v.isFactory === true) {
					match = false;
				} else if (opts.saveAs === "personal_copy" && v.isFactory === true) {
					match = false;
				}

				// If all matches, it's a save and not a save as
				if (match) {
					pageData.variant = v.$uuid;
				}
			});
		})
		.then(function() {
			return authoringSData.savePageDefinition(pageData);
		})
		.then(function(data) {
			modal.diagnoses(locale.text("auth.panel.save_ok_title"), {
				$diagnoses: data.diags
			});
		})
		.fail(function(e) {
			modal.diagnoses(locale.text("auth.panel.save_error_title"), e);
		});
};