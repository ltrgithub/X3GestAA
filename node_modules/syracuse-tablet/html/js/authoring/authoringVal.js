"use strict";

var locale = require('syracuse-tablet/html/js/helpers/locale');

/*
 *
 * Simple article validation module
 *
 */

var _properties;

exports.setProperties = function(props) {
	_properties = props;
};

/*
 * fullPage: true = article is an object describing a full page so also nesting constraints can be checked
 * fullPage: false = article is an object describing a control or container so nesting constraints cannot be fully checked
 * article: Article object
 */
exports.validate = function(fullPage, article) {

	var errors = [];
	try {
		_checkNode(fullPage, null, article, errors);
	} catch (e) {
		errors.push(e.message);
	}
	return errors;
};

var _propertiesToCheck = {
	$layoutType: _checkLayoutType,
	$rowHeight: _checkRowHeight,
	$bgColor: _checkBgColor,
	$size: _checkTileSize,
	$widthXs: _checkCellSize,
	$widthSm: _checkCellSize,
	$widthMd: _checkCellSize,
	$widthLg: _checkCellSize
};

function _checkNode(fullPage, parent, node, errors) {

	Object.keys(_propertiesToCheck).forEach(function(key) {
		if (node[key] !== undefined) {
			_propertiesToCheck[key](fullPage, parent, node, key, errors);
		}
	});

	var children;
	if (node.$items) {
		children = node.$items;
	} else if (node.$article) {
		children = [node.$article];
	}
	if (children) {
		children.forEach(function(child) {
			_checkNode(fullPage, node, child, errors);
		});
	}
}

function _checkLayoutType(fullPage, parent, node, key, errors) {
	var type = node.$layoutType;
	var ptype = parent && parent.$layoutType;
	var known = ["stack", "row", "cell", "hub", "hubGroup", "tile"];
	if (known.indexOf(type) < 0) {
		errors.push(locale.text("auth.err.unknown.layout", [type]));
		return;
	}
	if (!fullPage) {
		return;
	}
	switch (type) {
		case "hub":
			if (parent != null) {
				errors.push(locale.text("auth.err.hub.notroot"));
			}
			break;
		case "hubGroup":
			if (ptype != "hub") {
				errors.push(locale.text("auth.err.hubgroup.nohub"));
			}
			break;
		case "tile":
			if (ptype != "hubGroup") {
				errors.push(locale.text("auth.err.tile.nohubgroup"));
			}
			break;
	}
}

function _checkRowHeight(fullPage, parent, node, key, errors) {
	var value = node[key];
	if (!value.match(/^[0-9]+px$/)) {
		errors.push(locale.text("auth.err.rowheight", [value]));
	}
}

function _checkBgColor(fullPage, parent, node, key, errors) {
	var value = node[key];

	var valid = _properties.tileColor.values.map(function(e) {
		return e.value;
	});
	if (valid.indexOf(value) < 0) {
		errors.push(locale.text("auth.err.bgColor", [key, valid.join(", "), value]));
	}
}

function _checkCellSize(fullPage, parent, node, key, errors) {
	var value = +node[key];
	if (!(value >= 1 && value <= 12)) {
		errors.push(locale.text("auth.err.cellSize", [key, value]));
	}
}

function _checkTileSize(fullPage, parent, node, key, errors) {
	var value = node[key];
	var valid = _properties.tileSize.values.map(function(e) {
		return e.value;
	});

	if (valid.indexOf(value) < 0) {
		errors.push(locale.text("auth.err.tileSize", [valid.join(", "), value]));
	}
}