"use strict";

var eventListener = require('syracuse-tablet/html/js/application/eventListener');
var authPropsGeneral = require('syracuse-tablet/html/js/authoring/authoringPropertiesGeneral');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var authComponents = require('syracuse-tablet/html/js/authoring/authoringComponents');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var _err = authPropsGeneral.err;
var _noValue = "$$novalue$$";
var _templates = {
	subtitle: '\
		<section {{#if id}}id="{{id}}"{{/if}} style="{{#if notHidden}}overflow:hidden;{{/if}}white-space:nowrap;text-overflow:ellipsis;{{#if margin}}margin-bottom:{{margin}}px;{{/if}}">\
			{{#if title}}<p>{{title}}</p>{{/if}}\
			<div></div>\
		</section>',
	serieTitle: ' \
		<div class="panel panel-primary s-m-panel-auth-prop s-m-auth-prop-type-{{type}}"> \
			<div style="overflow:hidden;" class="panel-heading" role="tab" id="heading_{{id}}"> \
				<a id="serie_{{id}}" style="width:100%;display:table;" data-toggle="collapse" data-parent="#{{#if parentId}}{{parentId}}{{/if}}{{#unless parentId}}accordion{{/unless}}" href="#collapse_{{id}}" {{#if expanded}} aria-expanded="true"{{/if}} aria-controls="collapse_{{id}}" {{#unless expanded}}class="collapsed"{{/unless}}>\
					<div style="display:table-row;white-space: nowrap;">\
						<h4 class="panel-title" style="display:table-cell;"> \
							{{label}}\
						</h4> \
					</div>\
				</a> \
			</div> \
			<div id="collapse_{{id}}" class="panel-collapse collapse {{#if expanded}}in{{/if}}" role="seriepanel" aria-labelledby="heading_{{id}}"> \
			</div> \
		</div>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};
var _SeriePanel = function(parent, serieInfo) {
	this.name = serieInfo.name;
	this.label = serieInfo.$title;
	this.parent = parent;
	this.bind = serieInfo.$bind;
	this.color = serieInfo.color;
	this.isHidden = serieInfo.isHidden;
};
var _properties = {
	"chartHeight": {
		"key": "$chartHeight",
		"default": "medium",
		"values": [{
			"value": "xsmall"
		}, {
			"value": "small"
		}, {
			"value": "medium"
		}, {
			"value": "large"
		}, {
			"value": "xlarge"
		}],
		createMarkup: authPropsGeneral.createMarkupRadio
	},
	"chartOpenDetail": {
		"key": "$openDetail",
		"default": false,
		"values": [{
			"value": true
		}, {
			"value": false
		}],
		createMarkup: function($$parent, prop, sel, data) {
			prop["default"] = data.control.controller.isVignette;
			authPropsGeneral.createMarkupRadio($$parent, prop, sel, data);
		}
	},
	"chartDisplay": {
		"key": "$display",
		"default": "chart",
		"values": [{
			"value": "table"
		}, {
			"value": "chart"
		}],
		createMarkup: function($$parent, prop, sel, data) {
			authPropsGeneral.createMarkupRadio($$parent, prop, sel, data);
		}
	},
	/*
	 *	$Chart type (pie, line bar)
	 */
	"chartStyle": function(controller, sel, data) {
		this.name = "chartStyle";
		this.key = "$style";
		this["default"] = "line";
		this._chartGetMeasureCountVisible = function() {
			var count = data.control.prototype.chartGetMeasureCount();
			if (data.articleSelection.$seriesOptions) {
				Object.keys(data.articleSelection.$seriesOptions).forEach(function(key) {
					if (data.articleSelection.$seriesOptions[key].isHidden) {
						count--;
					}
				});
			};
			return count;
		};
		this.values = [{
			value: "line"
		}, {
			value: "bar"
		}, {
			value: "column"
		}];
		if (this._chartGetMeasureCountVisible() === 1) {
			this.values.push({
				value: "pie"
			});
		};
		this.createMarkup = authPropsGeneral.createMarkupRadio;
	},
	"chartOptions": function(controller, sel, data) {
		var values = [{
			"key": "isTitleHidden",
			"default": false
		}];
		var valuesPie = [{
			"key": "isLabelsHidden",
			"default": false
		}];
		var valueslineBarColumn = [{
			"key": "isLegendHidden",
			"default": false
		}, {
			"key": "isGridLineHidden",
			"default": false
		}, {
			"key": "isXLabelHidden",
			"default": false
		}, {
			"key": "isXLabelsHidden",
			"default": false
		}, {
			"key": "isYLabelHidden",
			"default": false
		}, {
			"key": "isYLabelsHidden",
			"default": false
		}];
		this.name = "chartOptions";
		this.key = "$chartOptions";
		this.values = values.concat((data.articleSelection.$style === "pie") ? valuesPie : valueslineBarColumn);
		this.createMarkup = authPropsGeneral.createMarkupCheckboxes;
	},
	/*Not implemented for moment*/
	"chartInverted": {
		"key": "$inverted",
		"default": false,
		"values": [{
			"value": false
		}, {
			"value": true
		}],
		createMarkup: authPropsGeneral.createMarkupRadio
	},
	"seriesOptions": function(controller, sel, data) {
		this.name = "seriesOptions";
		this.key = "$seriesOptions";
		this._serieProperties = [];

		this.initMarkup = function(controller, sel, data) {
			this._protoValue = data.control.prototype.chartGetMeasureInfo();
			this._orginalValue = data.articleSelection[this.key];
			var hasValue = this._orginalValue != null;
			this._initProps(hasValue ? this._mergeValue() : this._protoValue);
		};
		this.createMarkup = function($$parent, prop, sel, data) {
			this.$$parent = $$parent;
			this._accordionId = utils.UUID();
			this.$$myAccordion = $('<div id="' + this._accordionId + '" ></div>');
			$$parent.append(this.$$myAccordion);
			var self = this;
			self._serieProperties.forEach(function(prop) {
				self._createSerieEntry(prop, sel, data);
			});
		};
		this.destroyMarkup = function() {
			if (this._serieProperties) {
				this._serieProperties.forEach(function(prop) {
					if (prop.destroyMarkup) {
						prop.destroyMarkup();
					}
				});
			}
			this._serieProperties = null;
			if (this.$$parent) {
				this.$$parent.closest(".s-m-panel-auth-prop").remove();
				this.$$parent = null;
			}
			if (this.$$parent) {
				this.$$myAccordion = null;
			}
		};
		this._mergeValue = function() {
			var res = {}, self = this;
			Object.keys(self._protoValue).forEach(function(key) {
				res[key] = $.extend(true, {}, self._protoValue[key]);
				Object.keys((self._orginalValue && self._orginalValue[key]) || {}).forEach(function(prop) {
					res[key][prop] = self._orginalValue[key][prop];
				});
			});
			return res;
		};
		this._initProps = function(props, createEntry) {
			var self = this;
			self._serieProperties = [];
			Object.keys(props).forEach(function(key) {
				self._createSerieProperty(props[key], createEntry);
			});
		};

		this._createSerieProperty = function(prop, createEntry) {
			var prop = new _SeriePanel(this, prop);
			this._serieProperties.push(prop);
			if (createEntry) {
				this._createSerieEntry(prop);
			}
		};
		this._createSerieEntry = function(prop, sel, data) {
			var id = prop.bind;
			var $$parent;
			var $$propGroup = $(_getHtml("serieTitle", {
				id: id,
				type: "child",
				label: prop.label,
				expanded: false,
				parentId: this._accordionId
			}));
			$$parent = $$propGroup.find("#collapse_" + id);
			this.$$myAccordion.append($$propGroup);
			this.paramHiddenAdd($$parent, sel, data, prop);
			if (data.articleSelection.$style !== "pie") {
				this.paramColorAdd($$parent, sel, data, prop);
			}
		};
		this.paramHiddenAdd = function($$root, sel, data, prop) {
			var opts = {
				size: "small",
				onText: "True",
				offText: "False",
				onSwitchChange: this.onSwitchChange.bind(this, sel, data, prop)

			};
			this.componentBoolVal = authComponents.newComponent("switcher", opts);
			this._addParam(prop, "isHidden", this.componentBoolVal, true, $$root, false);
			var value = this._getPropValue(prop.bind, 'isHidden') || false;
			this.componentBoolVal.setValue(!value);
		};
		this.onSwitchChange = function(sel, data, prop, event, value) {
			var seriesOptions = $.extend(true, {}, data.articleSelection[this.key]);
			seriesOptions[prop.bind] = seriesOptions[prop.bind] || {};
			seriesOptions[prop.bind].isHidden = !value;
			authPropsGeneral.setValue(this, sel, data, seriesOptions);
			authPropsGeneral.notifyChangePropUI(this.$$parent, sel, data);
		};
		this.paramColorAdd = function($$root, sel, data, prop) {
			var opts = {
				color: "",
				palette: authPropsGeneral.getColorPalette(),
				dropUp: true,
				onSelectColor: jsutils.bindFn(this.colorChange, this, sel, data, prop)
			};
			this.paletteColor = authComponents.newComponent("colorPalettePicker", opts);
			var param = this._addParam(prop, "color", this.paletteColor, true, $$root, false);
			if (this._getPropValue(prop.bind, 'isHidden')) {
				param.hide();
			}
			this.paletteColor.setValue(this._getPropValue(prop.bind, 'color'));
		};
		this._getPropValue = function(bind, property) {
			var res = null;
			this._serieProperties.forEach(function(prop) {
				if (prop.bind === bind) {
					res = prop[property];
				}
			});
			return res;
		};
		this.colorChange = function(value, sel, data, prop) {
			var seriesOptions = $.extend(true, {}, data.articleSelection[this.key]);
			seriesOptions[prop.bind] = seriesOptions[prop.bind] || {};
			seriesOptions[prop.bind].color = value;
			authPropsGeneral.setValue(this, sel, data, seriesOptions);
			authPropsGeneral.notifyChangePropUI(this.$$parent, sel, data);
		};
		this._addParam = function(prop, textId, component, title, $$parent, mandatory) {
			var $$parent = $$parent || this.$$parent;
			var $$title;
			var $$root;
			if (title) {
				var res = this._addSubSection(prop, textId, $$parent, mandatory);
				$$root = res.$$content;
				$$title = res.$$panel;
			} else {
				$$root = $$parent;
			}
			if (component == null) throw new Error("unexpected null component");
			var $$panel;
			if (component.createMarkup) {
				component.createMarkup($$root);
				this._serieProperties.push(component);
				$$panel = component.$$panel;
			} else if (component.jquery) {
				$$root.append(component);
				$$panel = component;
			}
			return $$title ? $$title : $$panel;
		};
		this._addSubSection = function(prop, textId, $$parent, mandatory) {
			var $$panel = $(_getHtml('subtitle', {
				title: locale.text('auth.seriesOptions.' + textId) + (mandatory === true ? "*" : ""),
				margin: 10,
				id: "seriesColor" + prop.bind.smCapitalize()
			})).appendTo($$parent || this.$$parent);
			return {
				$$panel: $$panel,
				$$content: $$panel.children("div"),
				$$title: $$panel.children("p")
			};
		};
	},
	/**
	 * Optional sel, data
	 * 	 not null when button property is created like a regular panel propety
	 *	 null when property is created from rightPanel (back from cardDesign to array)
	 */
	"chartDetailButton": function(controller, sel, data) {
		this.name = null;
		this.label = null;
		this.key = null;
		this.controller = controller;
		this.control = data.control;
		this.createButtonMarkup = function() {
			this.$$OpenButton = $('<button id="auth_opt_chart_design" type="button" class="btn btn-default">' + locale.text("auth.chartDetail.openDesign") + '</button>');
			this.$$OpenButton.on("click", jsutils.bindFn(this.onClickButton, this));
			return this.$$OpenButton;
		};

		this.destroyButtonMarkup = function(context) {
			this.control = null;
			this.controller = null;
			if (this.$$OpenButton) {
				// $$slider.find(".$$slider") to make sur the plugin has been initialized
				this.$$OpenButton.off("click");
				this.$$OpenButton.remove();
				this.$$OpenButton = null;
			}
		};

		this.onClickButton = function(evt) {
			eventListener.openChartDetailPage(this.control);
			this.destroyButtonMarkup();
		};
	},
	"axisLabels": function(controller, sel, data) {
		this.name = "axisLabels";
		this.key = "$axisLabels";
		this.labels = data.control.getCurrentDrillLevel();
		this.selectOpts = _getSelectOptions(data.control);
		if (this.selectOpts.length <= 1) return null;
		this.createMarkup = function($$parent, prop, sel, data) {
			var opts = {
				value: _noValue,
				options: [{
					"title": "",
					"value": _noValue
				}].concat(this.selectOpts),
				onChange: this.onChange.bind(this, $$parent, data)
			};
			this.fieldLabelList = authComponents.newComponent("select", opts, "selectLabel");
			this.fieldLabelList.createMarkup($$parent);
			if (data.articleSelection && data.articleSelection[this.key] && data.articleSelection[this.key][this.labels]) {
				this.fieldLabelList.setValue(data.articleSelection[this.key][this.labels]);
			};
		};
		this.onChange = function($$parent, data, event, componentSelect) {
			var axisOptions = $.extend(true, {}, data.articleSelection[this.key]);
			if (componentSelect.getValue() === _noValue && axisOptions[this.labels]) {
				delete(axisOptions[this.labels]);
			} else {
				axisOptions[this.labels] = componentSelect.getValue();
			}
			authPropsGeneral.setValue(this, sel, data, axisOptions);
			authPropsGeneral.notifyChangePropUI(this.$$parent, sel, data);
		};
	}
};

var _getSelectOptions = function(control) {
	var selectOpts = [];
	var measures = control.prototype.chartGetMeasureInfo();
	var $properties = control.prototype.getProperties(function(prop, $bind) {
		if (control.dataset && control.dataset.length > 0) {
			//Must be in dataset but not a measure
			return (control.dataset[0][$bind] !== undefined && measures[$bind] === undefined);
		} else {
			return false;
		}
	});
	Object.keys($properties).forEach(function(v) {
		if (!$properties[v].$title) {
			var ids = v.split("_");
			if (ids.lenght >= 2 && ids[0] === "C") {
				$properties[v].$title = ($properties[v.substr(2)] ? $properties[v.substr(2)].$title : "") + " (" + v + ")";
			}
		}
		if ($properties[v].$title) {
			selectOpts.push({
				'title': $properties[v].$title,
				'value': v
			});
		}
	});
	return selectOpts;
};
exports.initModuleProperties = function(dest) {
	authPropsGeneral.initProperties(_properties, dest);
};
exports.getModuleProperties = function($$elmt, controller, props, sel, data) {
	if (controller.state.type !== "chartdetail") {
		props.push(_properties.chartDisplay);
		props.push(_properties.chartOpenDetail);
		props.push(_properties.chartDetailButton);
	}
	if (data.control.needsHeight && data.control.needsHeight()) {
		props.push(_properties.chartHeight);
	}
	props.push(_properties.chartStyle, _properties.chartOptions, _properties.seriesOptions, _properties.axisLabels);
};

exports.getChartDetailButton = function(controller, sel, data) {
	return new _properties.chartDetailButton(controller, sel, data);
};