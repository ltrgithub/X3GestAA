"use strict";

var locale = require('syracuse-tablet/html/js/helpers/locale');

var _properties = {
	"$isTitleHidden": {
		"key": "$isTitleHidden",
		"default": false,
		"values": [{
			"value": true
		}, {
			"value": false
		}],
		createMarkup: _createMarkupRadio
	},
	"$labelPosition": {
		"key": "$labelPosition",
		"default": "left",
		"values": [{
			"value": "left"
		}, {
			"value": "top"
		}, {
			"value": "bottom"
		}, {
			"value": "right"
		}],
		createMarkup: _createMarkupRadio
	},
	"$labelAlign": {
		"key": "$labelAlign",
		"default": "left",
		"values": [{
			"value": "left"
		}, {
			"value": "right"
		}],
		createMarkup: _createMarkupRadio
	},
	"$theme": {
		"key": "$theme",
		"default": "a",
		"values": [{
			"value": "a"
		}, {
			"value": "b"
		}, {
			"value": "c"
		}],
		createMarkup: _createMarkupRadio
	},
	"$tileColor": {
		"key": "$tileColor",
		"default": "lime",
		"values": [{
			"value": "purple"
		}, {
			"value": "magenta"
		}, {
			"value": "teal"
		}, {
			"value": "brown"
		}, {
			"value": "lime"
		}, {
			"value": "pink"
		}, {
			"value": "orange"
		}, {
			"value": "blue"
		}, {
			"value": "red"
		}, {
			"value": "green"
		}],
		createMarkup: _createMarkupRadio
	},
	"$tileSize": {
		"key": "$size",
		"default": "medium",
		"values": [{
			"value": "small"
		}, {
			"value": "medium"
		}, {
			"value": "wide"
		}, {
			"value": "large"
		}, {
			"value": "full"
		}],
		createMarkup: _createMarkupRadio
	},
	"$layoutTitle": {
		"key": "$title",
		"default": "",
		createMarkup: _createMarkupInput
	},
};

// Controls and layout classes that cannot be selected during authoring
var _elementsNoAuthoring = [".s-m-vignette", ".s-m-hub"];
exports.elementsNoAuthoring = _elementsNoAuthoring;

var _initProperties;
/* TODO: Handle language change */
exports.initProperties = function() {
	if (_initProperties) {
		return;
	}

	var pre = "auth";
	Object.keys(_properties).forEach(function(prop) {
		var lk = pre + "." + prop;
		var p = _properties[prop];
		p.label = locale.text(lk);
		p.name = prop;
		if (p.values) {
			p.values.forEach(function(v) {
				var vk = lk + "." + ("" + v.value);
				v.label = locale.text(vk);
			});
		}
	});
	_initProperties = true;
};

var _layoutProps = {
	"stack": [],
	"hub-group": [_properties.$layoutTitle],
	"tile": [_properties.$tileColor, _properties.$tileSize]
};

exports.getProperties = function($$elmt) {

	// Layout nodes have simple static properties
	if ($$elmt.hasClass("s-m-layout")) {
		var props;
		Object.keys(_layoutProps).some(function(key) {
			var cls = "s-m-" + key;
			if ($$elmt.hasClass(cls)) {
				props = _layoutProps[key];
				return true;
			}
			return false;
		});
		return props;
	}

	if ($$elmt.hasClass("s-m-field")) {
		return [_properties.$isTitleHidden, _properties.$labelPosition, _properties.$labelAlign, _properties.$theme];
	}
};

function _createMarkupRadio(prop, value, $$parent) {
	var html = '<div class="btn-group" data-toggle="buttons">';
	var op = "option" + prop.name;
	value = value || prop["default"];
	var sel;
	prop.values.forEach(function(v) {
		var id = op + v.value;
		id = id.replace(/\$/g, '');
		var p = ' \
			<div class="btn-group"> \
			<label class="btn btn-primary" id="' + id + 'lab"> \
				<input type="radio" name="' + op + '" id="' + id + '" >' + v.label + '</label> \
			</div>';
		if (value === v.value) {
			sel = "#" + id + "lab";
		}
		html += p;
	});
	html += '</div>';
	var $$all = $(html);
	if (sel) {
		$(sel, $$all).eq(0).button("toggle");
	}
	$$parent.append($$all);
}

function _createMarkupInput(prop, value, $$parent) {
	var op = "option" + prop.name;
	value = value || prop["default"];
	$$parent.append($('<div class="form-group"> \
		<input class="form-control" id="' + op + '" value="' + value + '" /> \
		</div>'));
}