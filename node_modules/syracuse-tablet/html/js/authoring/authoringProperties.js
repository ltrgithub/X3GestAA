"use strict";

var locale = require('syracuse-tablet/html/js/helpers/locale');
var authHtml = require('syracuse-tablet/html/js/authoring/authoringHtml');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

var _properties = {
	"$isTitleHidden": {
		"key": "$isTitleHidden",
		"default": false,
		"values": [{
			"value": true
		}, {
			"value": false
		}],
		createMarkup: _createMarkupRadio
	},
	"$labelPosition": {
		"key": "$labelPosition",
		"default": "left",
		"values": [{
			"value": "left"
		}, {
			"value": "top"
		}, {
			"value": "bottom"
		}, {
			"value": "right"
		}],
		createMarkup: _createMarkupRadio
	},
	"$labelAlign": {
		"key": "$labelAlign",
		"default": "left",
		"values": [{
			"value": "left"
		}, {
			"value": "right"
		}],
		createMarkup: _createMarkupRadio
	},
	"$theme": {
		"key": "$theme",
		"default": "a",
		"values": [{
			"value": "a"
		}, {
			"value": "b"
		}, {
			"value": "c"
		}],
		createMarkup: _createMarkupRadio
	},
	"$tileColor": {
		"key": "$bgColor",
		"default": "lime",
		"values": [{
			"value": "purple"
		}, {
			"value": "magenta"
		}, {
			"value": "teal"
		}, {
			"value": "brown"
		}, {
			"value": "lime"
		}, {
			"value": "pink"
		}, {
			"value": "orange"
		}, {
			"value": "blue"
		}, {
			"value": "red"
		}, {
			"value": "green"
		}],
		createMarkup: _createMarkupRadioBgColor
	},
	"$tileSize": {
		"key": "$size",
		"default": "medium",
		"values": [{
			"value": "small"
		}, {
			"value": "medium"
		}, {
			"value": "wide"
		}, {
			"value": "large"
		}, {
			"value": "full"
		}],
		createMarkup: _createMarkupRadio
	},
	"$layoutTitle": {
		"key": "$title",
		"default": "",
		createMarkup: _createMarkupInput
	}
};

var _initProperties;
exports.initProperties = function() {
	/* 
	 * TODO: Handle language change
	 */
	if (_initProperties) {
		return;
	}

	var pre = "auth";
	Object.keys(_properties).forEach(function(prop) {
		var lk = pre + "." + prop;
		var p = _properties[prop];
		p.label = locale.text(lk);
		p.name = prop;
		if (p.values) {
			p.values.forEach(function(v) {
				var vk = lk + "." + ("" + v.value);
				v.label = locale.text(vk);
			});
		}
	});

	_initProperties = true;
};

/*
 * Which layout node supports which properties to edit in authoring
 */
var _layoutProps = {
	"stack": [],
	"hub-group": [_properties.$layoutTitle],
	"tile": [_properties.$tileColor, _properties.$tileSize],
	"cell": [_properties.$tileColor]
};

exports.getProperties = function($$elmt) {

	/*
	 * Layout nodes have simple static properties
	 */
	if ($$elmt.hasClass("s-m-layout")) {
		var props;
		Object.keys(_layoutProps).some(function(key) {
			var cls = "s-m-" + key;
			if ($$elmt.hasClass(cls)) {
				props = _layoutProps[key];
				return true;
			}
			return false;
		});
		return props;
	}

	if ($$elmt.hasClass("s-m-field")) {
		return [_properties.$isTitleHidden, _properties.$labelPosition, _properties.$labelAlign, _properties.$theme];
	}
};

function _getValueOrDefault(prop, sel, data) {
	var value = data.articleSelection && data.articleSelection[prop.key];
	value = value || prop["default"];
	return value;
}

function _setValue(prop, sel, data, value) {
	data.articleSelection[prop.key] = value;
}

function _createMarkupRadio($$parent, prop, sel, data) {

	var ctx = {
		group: "auth_opt_" + prop.name,
		options: []
	};

	var value = _getValueOrDefault(prop, sel, data);

	prop.values.forEach(function(v) {
		ctx.options.push({
			id: ctx.group + "_" + v.value,
			value: v.value,
			label: v.label
		});
	});

	var html = authHtml.execute("authPanelPropertyRadio", ctx);
	var $$all = $(html);
	$("label[data-s-m-auth-value='" + value + "']", $$all).eq(0).button("toggle");
	$("label", $$all).on("click", function(e) {
		var value = $(e.currentTarget).attr("data-s-m-auth-value");
		_setValue(prop, sel, data, value);
		notifications.publish(["sm.auth.change.prop.ui"], sel, data);
	});
	$$parent.append($$all);
}

function _createMarkupRadioBgColor($$parent, prop, sel, data) {
	return _createMarkupRadio($$parent, prop, sel, data);
}

function _createMarkupInput($$parent, prop, sel, data) {
	var value = _getValueOrDefault(prop, sel, data);
	var op = "option" + prop.name;
	value = value || prop["default"];
	$$parent.append($('<div class="form-group"> \
		<input class="form-control" id="' + op + '" value="' + value + '" /> \
		</div>'));
}