"use strict";

var authUtils = require('syracuse-tablet/html/js/authoring/authoringPropertiesGeneral');
var authoringPropertiesArrays = require('syracuse-tablet/html/js/authoring/authoringPropertiesArrays');
var authoringPropertiesGauge = require('syracuse-tablet/html/js/authoring/authoringPropertiesGauge');
var authoringPropertiesChart = require('syracuse-tablet/html/js/authoring/authoringPropertiesChart');

var _modules = [authoringPropertiesArrays, authoringPropertiesGauge];

var _ctrlFieldsProperties = {
	/*
	 * Titel hidden
	 */
	"isTitleHidden": {
		"key": "$isTitleHidden",
		"default": false,
		"values": [{
			"value": true
		}, {
			"value": false
		}],
		createMarkup: authUtils.createMarkupRadio,
		type: "default" // Default, just for header color selection
	},

	/* 
	 * Position of label
	 * left:   <label> <value>
	 *
	 * top:    <label>
	 * 		   <value>
	 */
	"labelPosition": {
		"key": "$labelPosition",
		"default": "left",
		"values": [{
			"value": "left"
		}, {
			"value": "top"
		}],
		createMarkup: authUtils.createMarkupRadio
	},

	/* 
	 * Text alignment of label
	 * left:   |<label>      |
	 * right:  |      <value>|
	 */
	"labelAlign": {
		"key": "$labelAlign",
		"default": "left",
		"values": [{
			"value": "left"
		}, {
			"value": "center",
			"isHidden": true
		}, {
			"value": "right"
		}],
		createMarkup: authUtils.createMarkupRadio,
		refreshMarkup: authUtils.refreshMarkupRadio
	},

	/* 
	 * Theme for control
	 */
	"theme": {
		"key": "$theme",
		"default": "a",
		"values": [{
			"value": "a"
		}, {
			"value": "b"
		}, {
			"value": "c"
		}],
		createMarkup: authUtils.createMarkupRadio
	},

	/*
	 * Reference field description position
	 * bottom: <value>
	 *         <desc>
	 *
	 * right:  <value> <desc>
	 * left:   <desc> <value>
	 *
	 * top:    <desc>
	 *         <value>
	 */
	"refDescPosition": {
		"key": "$refDescPosition",
		"default": "right",
		"values": [{
			"value": "bottom"
		}, {
			"value": "right"
		}, {
			"value": "left"
		}, {
			"value": "top"
		}, {
			"value": "none"
		}],
		createMarkup: authUtils.createMarkupRadio
	},

	/*
	 * Reference field description format
	 * desc:      <desc>
	 *         
	 * title:     <title>

	 * desctitle: <desc> - <title>
	 * -> If both values are equal, skip display of second value
	 * 
	 * titledesc: <title> - <desc>
	 * -> If both values are equal, skip display of second value
	 */
	"refDescFormat": {
		"key": "$refDescFormat",
		"default": "desc",
		"values": [{
			"value": "desc"
		}, {
			"value": "title"
		}, {
			"value": "desctitle"
		}, {
			"value": "titledesc"
		}],
		createMarkup: authUtils.createMarkupRadio
	},
	// only CLOB field (text plain, text html, text rtf)
	"textHeight": {
		"key": "$textHeight",
		"default": "medium",
		values: [{
			value: "small"
		}, {
			value: "medium"
		}, {
			value: "large"
		}, {
			value: "xlarge"
		}],
		createMarkup: authUtils.createMarkupRadio,
		refreshMarkup: authUtils.refreshMarkupRadio
	}

};

//Centered label is only possible on top or bottom positioned label
function _getLabelAlign(sel, data) {
	var valPos = authUtils.getValueOrDefault(_ctrlFieldsProperties.labelPosition, sel, data);

	var props = $.extend(true, {}, _ctrlFieldsProperties.labelAlign);
	props.values.forEach(function(val) {
		if (valPos === "left" && val.value === "center") {
			val.isHidden = true;
		} else {
			val.isHidden = false;
		}
	});
	return props;
}

exports.initModuleProperties = function(dest) {
	// Init fields properties
	authUtils.initProperties(_ctrlFieldsProperties, dest);
	// Init other type of fields properties
	_modules.forEach(function(module) {
		module.initModuleProperties(dest);
	});
};
exports.getModuleProperties = function($$elmt, controller, props, sel, data) {

	var labelAlign = _getLabelAlign(sel, data);

	// ctrlFieldBase
	if (sel.$$elmt.hasClass("s-m-field")) {
		[_ctrlFieldsProperties.isTitleHidden, _ctrlFieldsProperties.labelPosition, labelAlign, _ctrlFieldsProperties.theme].forEach(function(p) {
			props.push(p);
		});

		// Properties for reference fields only 
		if (data.type === "reference") {
			props.push(_ctrlFieldsProperties.refDescFormat);
			props.push(_ctrlFieldsProperties.refDescPosition);
		}
		// Properties for enriched text fields only (html, plain, rtf)
		if (data.type === "rtf" || data.type === "html" || data.type === "plain") {
			props.push(_ctrlFieldsProperties.textHeight);
		}
		// Properties for numeric field
		authoringPropertiesGauge.getModuleProperties($$elmt, controller, props, sel, data);
	} else if (sel.$$elmt.hasClass("s-m-array")) {
		var facet = data && data.control && data.control.prototype && data.control.prototype.getFacet();
		if ("query" !== facet) {
			[_ctrlFieldsProperties.isTitleHidden, _ctrlFieldsProperties.labelPosition, labelAlign, _ctrlFieldsProperties.theme].forEach(function(p) {
				props.push(p);
			});
		}

		// ctrlFieldArray
		authoringPropertiesArrays.getModuleProperties($$elmt, controller, props, sel, data);
	} else if ($$elmt.hasClass("s-m-chart")) {
		[_ctrlFieldsProperties.isTitleHidden, _ctrlFieldsProperties.labelPosition, labelAlign, _ctrlFieldsProperties.theme].forEach(function(p) {
			props.push(p);
		});

		// Properties for charts authoring
		authoringPropertiesChart.getModuleProperties($$elmt, controller, props, sel, data);

	}


};