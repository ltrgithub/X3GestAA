"use strict";

var authPropsGeneral = require('syracuse-tablet/html/js/authoring/authoringPropertiesGeneral');
var authHtml = require('syracuse-tablet/html/js/authoring/authoringHtml');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');

var _properties = {
	/*
	 * Color of tile and layout cell
	 */
	"tileColor": {
		"key": "$bgColor",
		"default": "lime",
		"values": [{
			"value": "transparent"
		}, {
			"value": "teal"
		}, {
			"value": "green"
		}, {
			"value": "brown"
		}, {
			"value": "lime"
		}, {
			"value": "red"
			/*		}, { disabled for now, does not fit nicely into the palette
			"value": "purple" */
		}, {
			"value": "pink"
		}, {
			"value": "magenta"
		}, {
			"value": "orange"
		}, {
			"value": "blue"
		}],
		createMarkup: _createMarkupRadioBgColor
	},

	/*
	 * Size of tile
	 */
	"tileSize": {
		"key": "$size",
		"default": "medium",
		"values": [{
			"value": "small"
		}, {
			"value": "medium"
		}, {
			"value": "wide"
		}, {
			"value": "large"
		}, {
			"value": "full"
		}, {
			"value": "all"
		}],
		createMarkup: authPropsGeneral.createMarkupRadio
	},

	/*
	 * Title of layout node
	 */
	"layoutTitle": {
		"key": "$title",
		"default": "",
		createMarkup: _createMarkupInputLocale
	},

	/*
	 * Title of layout node
	 */
	"layoutCollapsible": {
		"key": "$collapsible",
		"default": "notcollapsible",
		"values": [{
			"value": "notcollapsible"
		}, {
			"value": "expanded"
		}, {
			"value": "collapsed"
		}],
		createMarkup: authPropsGeneral.createMarkupRadio
	},

	/*
	 * Icon of a tile
	 */
	"tileIcon": {
		"key": "$icon",
		"default": "",
		createMarkup: _createMarkupIcon
	},

	/*
	 * Size of tile
	 *
	 * Handles the following elements: $widthXs, $widthSm, $widthMd, $widthLg
	 */
	"cellSize": {
		"default": 4,
		createMarkup: _createMarkupCellSize
	}
};


/*
 * Which layout node supports which properties to edit in authoring
 */
var _layoutProps = {
	"stack": [_properties.layoutTitle, _properties.layoutCollapsible],
	"row": [],
	"hub-group": [_properties.layoutTitle],
	"tile": [_properties.layoutTitle, _properties.tileColor, _properties.tileSize, , _properties.tileIcon],
	"cell": [_properties.tileColor, _properties.cellSize]
};


function _createMarkupRadioBgColor($$parent, prop, sel, data) {

	var ctx = {
		group: "auth_opt_" + prop.name,
		options: []
	};

	var value = authPropsGeneral.getValueOrDefault(prop, sel, data);

	prop.values.forEach(function(v) {
		ctx.options.push({
			id: ctx.group + "_" + v.value,
			value: "" + v.value,
			label: v.label,
			color: v.value
		});
	});

	var html = authHtml.execute("authPanelPropertyRadioColor", ctx);
	var $$panel = $(html);
	$("label[data-s-m-auth-value='" + ("" + value) + "']", $$panel).eq(0).button("toggle");
	$("label", $$panel).on("click", function(e) {
		var $$ct = $(e.currentTarget);
		var value = $$ct.attr("data-s-m-auth-value");
		$$ct.eq(0).button("toggle");

		/*
		 * Important! Use boolean datatype for boolean properties!
		 */
		if (value === "true") {
			value = true;
		} else if (value === "false") {
			value = false;
		}
		authPropsGeneral.setValue(prop, sel, data, value);
		authPropsGeneral.notifyChangePropUI($$parent, sel, data);
	});
	$$parent.append($$panel);
}


function _createMarkupInput($$parent, prop, sel, data) {
	var value = authPropsGeneral.getValueOrDefault(prop, sel, data);
	var html = authHtml.execute("authPanelPropertyInput", {
		id: "auth_opt_" + prop.name,
		value: value
	});
	var $$panel = $(html);
	$("input", $$panel).blur(function() {
		var value = $(this).val();
		authPropsGeneral.setValue(prop, sel, data, value);
		authPropsGeneral.notifyChangePropUI($$parent, sel, data);
	});
	$$parent.append($$panel);
}

function _createMarkupInputLocale($$parent, prop, sel, data) {
	var oldUUID = authPropsGeneral.getValueOrDefault(prop, sel, data);
	var value;
	oldUUID = oldUUID || "";
	if (oldUUID.indexOf("{@") < 0) {
		value = oldUUID; // Plain text in article
		oldUUID = "";
	} else {
		var loc = data.articlePage.$localization && data.articlePage.$localization[locale.getCurrentLocale()];
		value = oldUUID.replace(/\{\@(\S+)\}/g, function(m, g) {
			return loc && loc[g] || m;
		});
	}
	var html = authHtml.execute("authPanelPropertyInputLocale", {
		id: "auth_opt_" + prop.name,
		value: value,
		oldValue: value,
		oldUUID: oldUUID
	});
	var $$panel = $(html);
	$("input", $$panel).blur(function() {
		var value = $(this).val();
		var oldValue = $(this).attr("data-old-value");
		var oldUUID = $(this).attr("data-old-uuid");

		// If plain text value did not change and there is an uuid already, we just re assign the uuid
		// otherwise, plain text is set, which will result in recreation of a new uuid later during article generation 
		if (value === oldValue && oldUUID.length > 0) {
			value = oldUUID;
		}
		authPropsGeneral.setValue(prop, sel, data, value);
		authPropsGeneral.notifyChangePropUI($$parent, sel, data);
	});
	$$parent.append($$panel);
}

function _createMarkupCellSize($$parent, prop, sel, data) {
	var values = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
	var sizes = [{
		"prop": "widthXs",
		"label": locale.text("auth.cellSize.$widthXs"),
		"class": "s-m-auth-highlight-xs"
	}, {
		"prop": "widthSm",
		"label": locale.text("auth.cellSize.$widthSm"),
		"class": "s-m-auth-highlight-sm"
	}, {
		"prop": "widthMd",
		"label": locale.text("auth.cellSize.$widthMd"),
		"class": "s-m-auth-highlight-md"
	}, {
		"prop": "widthLg",
		"label": locale.text("auth.cellSize.$widthLg"),
		"class": "s-m-auth-highlight-lg"
	}];

	var html = authHtml.execute("authPanelPropertyCellSize", {
		id: "auth_opt_" + prop.name,
		sizes: sizes,
		values: values
	});
	var $$panel = $(html);
	var last = "12";
	sizes.forEach(function(size) {
		var value = data.articleSelection && data.articleSelection["$" + size.prop];
		value = value || last;
		last = value;
		$("label[data-s-m-auth-prop='" + size.prop + "'][data-s-m-auth-value='" + value + "']", $$panel).button("toggle");
	});

	$("label", $$panel).on("click", function(e) {
		var $$ct = $(e.currentTarget);
		$$ct.eq(0).button("toggle");
		sizes.forEach(function(size) {
			$$ct = $$panel.find("label.active[data-s-m-auth-prop='" + size.prop + "']");
			if ($$ct.length > 0) {
				var value = $$ct.attr("data-s-m-auth-value");
				data.articleSelection["$" + size.prop] = value;
			}
		});
		authPropsGeneral.notifyChangePropUI($$parent, sel, data);
	});
	$$parent.append($$panel);
}

function _createMarkupIcon($$parent, prop, sel, data) {

	var ctx = {
		group: "auth_opt_" + prop.name,
		options: []
	};

	var value = authPropsGeneral.getValueOrDefault(prop, sel, data);

	fontUtils.getTileIconList().forEach(function(v) {
		var css = fontUtils.getIconByName(v);
		ctx.options.push({
			id: ctx.group + "_" + v,
			value: v,
			icon: css
		});
	});

	var html = authHtml.execute("authPanelPropertyRadioIcon", ctx);
	var $$panel = $(html);
	$("label[data-s-m-auth-value='" + ("" + value) + "']", $$panel).eq(0).button("toggle");
	$("label", $$panel).on("click", function(e) {
		var $$ct = $(e.currentTarget);
		var value = $$ct.attr("data-s-m-auth-value");
		$$ct.eq(0).button("toggle");
		authPropsGeneral.setValue(prop, sel, data, value);
		authPropsGeneral.notifyChangePropUI($$parent, sel, data);
	});
	$$parent.append($$panel);
}

exports.properties = _properties;

exports.getModuleProperties = function($$elmt, controller, props, sel, data) {
	Object.keys(_layoutProps).some(function(key) {
		var cls = "s-m-" + key;
		if ($$elmt.hasClass(cls)) {
			_layoutProps[key].forEach(function(p) {
				props.push(p);
			});
		}
	});
};
exports.initModuleProperties = function(dest) {
	authPropsGeneral.initProperties(_properties, dest);
};