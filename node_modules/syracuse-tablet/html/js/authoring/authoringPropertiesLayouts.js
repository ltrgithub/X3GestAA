"use strict";

var authPropsGeneral = require('syracuse-tablet/html/js/authoring/authoringPropertiesGeneral');
var authHtml = require('syracuse-tablet/html/js/authoring/authoringHtml');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var fontUtils = require('syracuse-tablet/html/js/ui/fontUtils');
var authComponents = require('syracuse-tablet/html/js/authoring/authoringComponents');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var modal = require('syracuse-tablet/html/js/ui/modals/modal');

var _properties = {
	/*
	 * Color of tile and layout cell
	 */
	"tileColor": {
		"key": "$bgColor",
		"default": "",
		//For compatibility with previous version - used by modalConfigTiles
		"values": authPropsGeneral.getColorValues(),
		"colorChange": function(value, sel, data, prop) {
			authPropsGeneral.setValue(this, sel, data, (value ? value.id : ""));
			authPropsGeneral.notifyChangePropUI(this.$$parent, sel, data);
		},
		"createMarkup": function($$parent, prop, sel, data) {
			var opts = {
				color: "",
				palette: authPropsGeneral.getColorPalette(),
				dropUp: false,
				onSelectColor: jsutils.bindFn(this.colorChange, this, sel, data, prop)
			};
			this.paletteColor = authComponents.newComponent("colorPalettePicker", opts);
			this.paletteColor.createMarkup($$parent);
			this.paletteColor.setValue(authPropsGeneral.getColorInfo(data.articleSelection.$bgColor));
		}
	},
	/*
	 * Size of tile
	 */
	"tileSize": {
		"key": "$size",
		"default": "medium",
		"values": [{
			"value": "small"
		}, {
			"value": "medium"
		}, {
			"value": "wide"
		}, {
			"value": "large"
		}, {
			"value": "full"
		}, {
			"value": "all"
		}],
		createMarkup: authPropsGeneral.createMarkupRadio
	},

	/*
	 * Title of layout node
	 */
	"layoutTitle": function(controller, sel, data) {
		this.name = "layoutTitle";
		this.key = "$title";
		var titleList = controller.prototype.getAllX3Title();
		if (!titleList || !titleList.length) {
			this["default"] = "";
			this.createMarkup = _createMarkupInputLocale;
			return;
		};
		this.values = titleList;
		this.createMarkup = function($$parent, prop, sel, data) {
			var opts = {
				value: "",
				options: titleList,
				onChange: jsutils.bindFn(this.valueChange, this, sel, data, prop),
				dataSize: 20
			};
			this.titleSelect = authComponents.newComponent("select", opts);
			this.titleSelect.createMarkup($$parent);
			if (data.articleSelection && data.articleSelection.$title) {
				this.titleSelect.setValue(data.articleSelection.$title);
			};
		};
		this.valueChange = function(event, titleSelect, sel, data, prop) {
			authPropsGeneral.setValue(this, sel, data, titleSelect.getValue());
			authPropsGeneral.notifyChangePropUI(this.$$parent, sel, data);
		};
	},

	/*
	 * Title of layout node
	 */
	"layoutCollapsible": {
		"key": "$collapsible",
		"default": "notcollapsible",
		"values": [{
			"value": "notcollapsible"
		}, {
			"value": "expanded"
		}, {
			"value": "collapsed"
		}],
		createMarkup: authPropsGeneral.createMarkupRadio
	},

	/*
	 * Icon of a tile
	 */
	"tileIcon": {
		"key": "$icon",
		"default": "",
		createMarkup: _createMarkupIcon
	},

	/*
	 * Size of tile
	 *
	 * Handles the following elements: $widthXs, $widthSm, $widthMd, $widthLg
	 */
	"cellSize": function(controller, sel, data) {
		this["default"] = 4;
		this["name"] = "cellSize";

		this.destroyMarkup = function() {
			this.$$parent = null;
			if (this._$$panel) {
				this._$$panel.off();
				this._$$panel = null;
			}
		};

		this.createMarkup = function($$parent, prop, sel, data) {
				var self = this;
				self.$$parent = $$parent;
				var values = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
				self._sizes = [{
					"prop": "widthAll",
					"label": locale.text("auth.cellSize.widthAll"),
					"class": "s-m-auth-highlight-all"
				}, {
					"prop": "widthXs",
					"label": locale.text("auth.cellSize.$widthXs"),
					"class": "s-m-auth-highlight-xs"
				}, {
					"prop": "widthSm",
					"label": locale.text("auth.cellSize.$widthSm"),
					"class": "s-m-auth-highlight-sm"
				}, {
					"prop": "widthMd",
					"label": locale.text("auth.cellSize.$widthMd"),
					"class": "s-m-auth-highlight-md"
				}, {
					"prop": "widthLg",
					"label": locale.text("auth.cellSize.$widthLg"),
					"class": "s-m-auth-highlight-lg"
				}];
				self._$$panel = $(authHtml.execute("authPanelPropertyCellSize", {
					id: "auth_opt_" + prop.name,
					sizes: self._sizes,
					values: values,
					sameSize: locale.text("auth.cellSize.sameSize"),
				}));
				var last = "12";
				self._sizes.forEach(function(size) {
					var value = data.articleSelection && data.articleSelection["$" + size.prop];
					value = value || last;
					last = value;
					$("label[data-s-m-auth-prop='" + size.prop + "'][data-s-m-auth-value='" + value + "']", self._$$panel).button("toggle");
				});
				self._$$panel.on("click", "label.auth-btn-size-sel", jsutils.bindFn(self.onClickSize, this, sel, data));
				self._$$panel.on("click", 'input[type="checkbox"]', jsutils.bindFn(self.onClickSameSize, this, sel, data));
				self._$$panel.appendTo($$parent);
				self.toggleSameSize($$parent, data.articleSelection["$sameSize"]);
			},
			this.onClickSize = function(e, sel, data) {
				var self = this;
				var $$ct = $(e.currentTarget);
				$$ct.eq(0).button("toggle");
				self._sizes.forEach(function(size) {
					$$ct = self._$$panel.find("label.active[data-s-m-auth-prop='" + size.prop + "']");
					if ($$ct.length > 0) {
						var value = $$ct.attr("data-s-m-auth-value");
						data.articleSelection["$" + size.prop] = value;
					}
				});
				authPropsGeneral.notifyChangePropUI(this.$$parent, sel, data);
			},
			this.onClickSameSize = function(e, sel, data) {
				data.articleSelection["$sameSize"] = $(e.currentTarget).prop("checked");
				authPropsGeneral.notifyChangePropUI(this.$$parent, sel, data);
			},
			this.toggleSameSize = function($$parent, yes) {
				yes = yes === true;
				this._$$panel.find('section.widthAll').toggle(yes);
				this._$$panel.find('section:not(.widthAll)').toggle(!yes);
				this._$$panel.find('input[type="checkbox"]').prop("checked", yes);
			};
	},
	"layoutTheme": function(controller, sel, data) {
		if (data.articleSelection.$collapsible === undefined || data.articleSelection.$collapsible === "notcollapsible") return null;
		var level = data.control.$$elmt.parents(".s-m-stack").length;
		//if (level < 2) return null;
		this.name = "layoutTheme";
		this.key = "$theme";
		this["default"] = String.fromCharCode(96 + level);
		this.values = [];
		this.values.push({
			"value": String.fromCharCode(96 + level)
		});
		this.values.push({
			"value": "advanced"
		});
		this.createMarkup = authPropsGeneral.createMarkupRadio;
	}
};


/*
 * Which layout node supports which properties to edit in authoring
 */
var _layoutProps = {
	"stack": [_properties.tileColor, _properties.layoutTitle, _properties.layoutCollapsible, _properties.layoutTheme],
	"row": [_properties.tileColor],
	"hub-group": [_properties.layoutTitle],
	"tile": [_properties.layoutTitle, _properties.tileColor, _properties.tileSize, , _properties.tileIcon],
	"cell": [_properties.tileColor, _properties.cellSize]
};

function _createMarkupInput($$parent, prop, sel, data) {
	var value = authPropsGeneral.getValueOrDefault(prop, sel, data);
	var html = authHtml.execute("authPanelPropertyInput", {
		id: "auth_opt_" + prop.name,
		value: value
	});
	var $$panel = $(html);
	$("input", $$panel).blur(function() {
		var value = $(this).val();
		authPropsGeneral.setValue(prop, sel, data, value);
		authPropsGeneral.notifyChangePropUI($$parent, sel, data);
	});
	$$parent.append($$panel);
}

function _createMarkupInputLocale($$parent, prop, sel, data) {
	var oldUUID = authPropsGeneral.getValueOrDefault(prop, sel, data);
	var value;
	oldUUID = oldUUID || "";
	if (oldUUID.indexOf("{@") < 0) {
		value = oldUUID; // Plain text in article
		oldUUID = "";
	} else {
		var loc = data.articlePage.$localization && data.articlePage.$localization[locale.getCurrentLocale()];
		value = oldUUID.replace(/\{\@(\S+)\}/g, function(m, g) {
			return loc && loc[g] || m;
		});
		if (value === oldUUID) {
			value = data.control.controller.prototype.resolveExpression(oldUUID, null, true);
		};
	}
	var html = authHtml.execute("authPanelPropertyInputLocale", {
		id: "auth_opt_" + prop.name,
		value: value,
		oldValue: value,
		oldUUID: oldUUID
	});
	var $$panel = $(html);
	$("input", $$panel).blur(function() {
		var value = $(this).val();
		var oldValue = $(this).attr("data-old-value");
		var oldUUID = $(this).attr("data-old-uuid");

		// If plain text value did not change and there is an uuid already, we just re assign the uuid
		// otherwise, plain text is set, which will result in recreation of a new uuid later during article generation 
		if (value === oldValue) {
			if (oldUUID.length > 0) {
				value = oldUUID;
			}
			_setValue($$parent, prop, sel, data, value);
		} else {
			if (oldValue && value && utils.isLocalizationExits(data.articlePage.$localization, oldUUID)) {
				modal.simpleConfirmPromise({
					message: locale.text("auth.msg.keepTranslation")
				}).then(function(result) {
					if (result.action === "yes") {
						data.articleSelection.keepKey = oldUUID;
					}
					_setValue($$parent, prop, sel, data, value);
				});
			} else {
				_setValue($$parent, prop, sel, data, value);
			}
		}

	});
	$$parent.append($$panel);
}

function _setValue($$parent, prop, sel, data, value) {
	authPropsGeneral.setValue(prop, sel, data, value);
	authPropsGeneral.notifyChangePropUI($$parent, sel, data);
}

function _createMarkupIcon($$parent, prop, sel, data) {

	var ctx = {
		group: "auth_opt_" + prop.name,
		options: []
	};

	var value = authPropsGeneral.getValueOrDefault(prop, sel, data);
	ctx.options.push({
		id: ctx.group + "_none",
		value: "",
		icon: "fa fa-remove"
	});

	fontUtils.getTileIconList().forEach(function(v) {
		var css = fontUtils.getIconByName(v);
		ctx.options.push({
			id: ctx.group + "_" + v,
			value: v,
			icon: css
		});
	});

	var html = authHtml.execute("authPanelPropertyRadioIcon", ctx);
	var $$panel = $(html);
	$("label[data-s-m-auth-value='" + ("" + value) + "']", $$panel).eq(0).button("toggle");
	$("label", $$panel).on("click", function(e) {
		var $$ct = $(e.currentTarget);
		var value = $$ct.attr("data-s-m-auth-value");
		$$ct.eq(0).button("toggle");
		authPropsGeneral.setValue(prop, sel, data, value);
		authPropsGeneral.notifyChangePropUI($$parent, sel, data);
	});
	$$parent.append($$panel);
}

exports.properties = _properties;

exports.getModuleProperties = function($$elmt, controller, props, sel, data) {
	Object.keys(_layoutProps).some(function(key) {
		var cls = "s-m-" + key;
		if ($$elmt.hasClass(cls)) {
			_layoutProps[key].forEach(function(p) {
				props.push(p);
			});
		}
	});
};
exports.initModuleProperties = function(dest) {
	authPropsGeneral.initProperties(_properties, dest);
};