"use strict";
var authPropsGeneral = require('syracuse-tablet/html/js/authoring/authoringPropertiesGeneral');
var authArrayGeneral = require('syracuse-tablet/html/js/authoring/arrays/authArrayGeneral');
var authComponents = require('syracuse-tablet/html/js/authoring/authoringComponents');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');

var _getPage = function($$elmt, control) {
	if (control && control.isVignette()) {
		return control.getPage();
	} else if ($$elmt && $$elmt.is(".s-m-page")) {
		return $$elmt.smPageController();
	}
	return null;
};

var _noValue = "$$novalue$$";
var _properties = {

	"actionSettings": function(controller, sel, data) {
		this.name = "actionSettings";
		this.label = null;
		this["default"] = null;
		this.key = "$actionSettings";
		this._myProperties = [];
		this._page = _getPage(sel.$$elmt, data.control);

		this.initMarkup = function(controller, sel, data) {
			if (!this._page) return;
			var $links = this._page.getProtoLinks();
			this._$links = [];
			if ($links) {
				for (var l in $links) {
					var entry = $.extend({}, true, $links[l]);
					entry.name = l;
					entry.$title = this._page.prototype.resolveExpression(entry.$title) || entry.name;
					this._$links.push(entry);
				}
			}
			/**
			 * actionList = [{name: actionName, $title:"", options: [{id:footerHeader, checked:true/false},{id:refreshPager, checked:true/false}]}
			 */
			var list = data.articleSelection[this.key] || [];
			this._actionList = [];
			var self = this;
			list.forEach(function(act) {
				// Check if action is still in the proto
				if (self.getActionProto(act.name)) {
					act.$title = self._page.prototype.resolveExpression(act.$title) || entry.name;
					self._actionList.push($.extend({}, true, act));
				}
			});
		};
		this.getActionProto = function(name) {
			var res = null;
			this._$links.some(function(v, idx) {
				if (v.name === name) {
					res = v;
					return true;
				}
			});
			return res;
		};
		this.getActionInfo = function(actName) {
			if (!actName) return null;
			var idx = -1;
			var rec = null;
			this._actionList.some(function(c, i) {
				if (c.name === actName) {
					rec = c;
					idx = i;
					return true;
				}
			});
			return idx === -1 ? null : {
				record: rec,
				idx: idx
			};
		};
		this.destroyMarkup = function() {
			this._page = null;
			this.$$parent = null;
			this._$links = null;
			if (this._myProperties) {
				this._myProperties.forEach(function(p) {
					if (p.destroyMarkup) p.destroyMarkup();
				});
				this._myProperties = null;
			}
		};

		this.createMarkup = function($$parent, prop, sel, data) {
			if (!this._page) return;
			this.$$parent = $$parent;
			// First
			this.actionListAdd(sel, data);
			this.editSectionAdd();
			this.checkAppendButton();
		};
		this.actionListAdd = function(sel, data) {
			var opts = {
				css: "actionlist",
				doAction: jsutils.bindFn(this.listCallBackAction, this, sel, data),
				appendTitle: locale.text("auth.actionSettings.append")
			};
			this.listActionDisplayer = authComponents.newComponent("editableList", opts);
			this._addParam("actionlist", this.listActionDisplayer, true);
			this.updateActionList();
		};
		this.editSectionAdd = function() {
			this.editActionSection = this._addSubSection("editaction");
			this.editActionSection.$$panel.hide();
			this.editActionSection.$$content.css("padding-left", "7px");
			this.editActionSection.$$title.css("font-weight", "bold");
			var $$rootComponents = this.editActionSection.$$content;
			this.paramActionAdd($$rootComponents);
			this.paramOptionsAdd($$rootComponents);
		};
		// No append if no actions to add
		this.checkAppendButton = function() {
			if (!this.listActionDisplayer) return;
			this.listActionDisplayer.disableAppendBtn(this._actionList.length >= this._$links.length);
		};
		this.listCallBackAction = function(action, recordId, listActionDisplayer, sel, data) {
			if (action === "append") {
				this._updateParams(null);
				return true;
			}
			if (action === "cancel") {
				this._resetEditParams();
				this.editActionSection.$$panel.hide();
				this.checkAppendButton();
				return true;
			}
			var recInfo = this.getActionInfo(recordId);
			if (action === "validate") {
				var newRecord = this.validateRecord(true);
				if (newRecord) {
					if (recInfo == null) {
						// Validate Append
						this._actionList.push(newRecord);
					} else {
						// Validate Edit
						this._actionList.splice(recInfo.idx, 1);
						this._actionList.splice(recInfo.idx, 0, newRecord);
					}
					this.updateActionList(true, sel, data);
					// Clears params
					this._resetEditParams();
					// Removes validate/cancel - Switchs to e'Append status'
					this.checkAppendButton();
					return true;
				} else {
					return false;
				}
			}
			if (action === "deleteItem") {
				if (!recInfo) return false;
				this._actionList.splice(recInfo.idx, 1);
				this.checkAppendButton();
				this.updateActionList(true, sel, data);
				return true;
			}
			if (action === "editItem") {
				if (!recInfo) return false;
				this._updateParams(recInfo.record);
				return true;
			}
		};
		this.validateRecord = function(errorMsg) {
			var self = this;
			var rec = {};
			var _fail = function(msg) {
				if (errorMsg === true) {
					var text = msg || locale.text("auth.actionSettings.invalid");
					self.listActionDisplayer.toggleMessage(text, "error");
					setTimeout(function() {
						self.listActionDisplayer.toggleMessage(null);
					}, 2500);
				}
				return null;
			};
			rec.name = this.actionSelector.getValue();
			if (!rec.name || rec.name == _noValue) {
				return _fail();
			}
			var info = this.getActionProto(rec.name);
			if (!info) return _fail("Action not found " + rec.name);
			rec.$title = info.$title;
			rec.options = this.optionsList.getValue();
			var nbChecked = 0;
			rec.options.forEach(function(opt) {
				if (opt.checked) nbChecked++;
			});
			// No check is not allowed
			if (nbChecked == 0) {
				return _fail();
			}
			return rec;
		};
		this._updateParams = function(record) {
			var edit = record != null;
			record = record || {};
			this.editActionSection.$$panel.show();
			this.actionSelector.setValue(record.name || _noValue);
			this.optionsList.updateValue(record.options);
		};
		this._resetEditParams = function() {
			this.editActionSection.$$panel.hide();
			this.actionSelector.setValue(_noValue);
		};
		this.updateActionList = function(updateAuthoring, sel, data) {
			var clearBefore = true;
			if (clearBefore) {
				this.listActionDisplayer.clear();
			}
			var records = [];
			this._actionList.forEach(function(c) {
				records.push({
					titleHtml: "<span>" + (c.$title || c.name) + "</span>",
					id: c.name
				});
			});
			this.listActionDisplayer.insertRecords(records);
			if (updateAuthoring == true) {
				var value = [];
				this._actionList.forEach(function(c) {
					c = $.extend({}, true, c);
					value.push(c);
				});
				authPropsGeneral.setValue(this, sel, data, value);
				authPropsGeneral.notifyChangePropUI(this.$$parent, sel, data);
				return;
			}
		};
		this.paramActionAdd = function($$root) {
			var selectOpts = [{
				"title": locale.text('auth.actionSettings.novalue'),
				"value": _noValue
			}];
			var self = this;
			this._$links.forEach(function(v, idx) {
				// Filters actions that are not already in the list
				if (!self.getActionInfo(v.name)) {
					selectOpts.push({
						title: v.$title,
						value: v.name
					});
				}
			});
			var opts = {
				value: _noValue,
				options: selectOpts,
				css: "actionName",
				onChange: jsutils.bindFn(this.onParamActionSelect, this),
				isHidden: false
			};
			this.actionSelector = authComponents.newComponent("select", opts);
			this._addParam("action", this.actionSelector, true, $$root, true);
		};

		this.onParamActionSelect = function(event, prop) {};

		this.paramOptionsAdd = function($$root) {
			var opts = {
				list: []
			};
			["footerHeader", "refreshPage", "multiselection"].forEach(function(x) {
				opts.list.push({
					id: x,
					label: locale.text('auth.actionSettings.' + x)
				});
			});
			this.optionsList = authComponents.newComponent("checkboxList", opts);
			this._addParam("options", this.optionsList, true, $$root, true);
		};


		this._addParam = function(prop, component, title, $$parent, mandatory) {
			var $$parent = $$parent || this.$$parent;
			var $$title;
			var $$root;
			if (title) {
				var res = this._addSubSection(prop, $$parent, mandatory);
				$$root = res.$$content;
				$$title = res.$$panel;
			} else {
				$$root = $$parent;
			}
			if (component == null) throw new Error("unexpected null component [" + prop + "]");
			var $$panel;
			if (component.createMarkup) {
				component.createMarkup($$root);
				this._myProperties.push(component);
				$$panel = component.$$panel;
			} else if (component.jquery) {
				$$root.append(component);
				$$panel = component;
			}
			return $$title ? $$title : $$panel;
		};

		this._addSubSection = function(textId, $$parent, mandatory) {
			var $$panel = $(authArrayGeneral.getHtml('subtitle', {
				title: locale.text('auth.actionSettings.' + textId) + (mandatory === true ? "*" : ""),
				margin: 10,
				id: "actionSettings" + textId.smCapitalize()
			})).appendTo($$parent || this.$$parent);
			return {
				$$panel: $$panel,
				$$content: $$panel.children("div"),
				$$title: $$panel.children("p")
			};
		};
	}
};

exports.initModuleProperties = function(dest) {
	authPropsGeneral.initProperties(_properties, dest);
};

exports.getModuleProperties = function($$elmt, controller, props, sel, data) {
	var page = _getPage($$elmt, data.control);
	if (page && page.getProtoLinks()) {
		props.push(_properties.actionSettings);
	}
};