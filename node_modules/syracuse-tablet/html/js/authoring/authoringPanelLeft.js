"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var authHelpers = require('syracuse-tablet/html/js/authoring/authoringHelpers');
var authHtml = require('syracuse-tablet/html/js/authoring/authoringHtml');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');

var $$lastHoverList;

exports.Panel = utils.defineClass(function() {
	var self = this;
	self.$$panel = null;
}, null, {
	show: function() {
		var self = this;

		self._ensurePanel();
		self.$$panel.show();
		self.$$splitter.show();
	},

	hide: function() {
		var self = this;
		self._ensurePanel();
		self.$$panel.hide();
		self.$$splitter.hide();
	},

	notifMainLayoutChanged: function() {
		var self = this;
	},

	_ensurePanel: function() {
		var self = this;
		if (this.$$panel) {
			return;
		}
		var ctx = {
			label_phone: locale.text("auth.panel.label_phone"),
			label_mini_tablet: locale.text("auth.panel.label_mini_tablet"),
			label_tablet: locale.text("auth.panel.label_tablet"),
			label_large: locale.text("auth.panel.label_large"),
			label_landscape: locale.text("auth.panel.label_landscape"),
			label_portrait: locale.text("auth.panel.label_portrait")
		};

		self.$$panel = $("#s-m-auth-panel-left-id");
		self.$$panel.append($(authHtml.execute("authPanelLeftStructure", ctx)));

		self._getDomObjects();
		self._initSplitter();

		$("#auth_device_size .btn", self.$$panel).click(function() {
			var $$this = $(this);
			var id = $("input", $$this).attr("id");
			var segs = id.split("_");
			self._setDeviceSize(segs[segs.length - 1], null);
		});
		$("#auth_device_orientation .btn", self.$$panel).click(function() {
			var $$this = $(this);
			var id = $("input", $$this).attr("id");
			var segs = id.split("_");
			self._setDeviceSize(null, segs[segs.length - 1]);
		});

		notifications.subscribe(self, ["sm.main.layout.changed"]);
		notifications.subscribe(self, ["sm.auth.set.page"]);

		notifications.subscribe(self, ["sm.auth.set.selection"]);
		notifications.subscribe(self, ["sm.auth.remove.selection"]);

		notifications.subscribe(self, ["sm.auth.hover.in"]);
		notifications.subscribe(self, ["sm.auth.hover.out"]);
	},
	_getDomObjects: function() {
		var self = this;
		self.$$structureRoot = $("#auth-structure-root-id", self.$$panel);
	},
	_initSplitter: function() {
		var self = this;
		self.$$splitter = $("#s-m-auth-splitter-left-id");
		self.$$splitter.draggable({
			axis: "x",
			stop: function(e, ui) {
				var $$splitter = $(this);
				var pos = $$splitter.position();
				var width = $$splitter.width();
				var panelLeftSize = pos.left;
				uiutils.triggerResizeInternal({
					layout: {
						authPanelLeft: {
							width: panelLeftSize
						}
					}
				});
			}
		});
	},
	_setDeviceSize: function(size, orientation) {
		var self = this;
		var params = {
			layout: {
				authoringParameters: {}
			}
		};

		if (size) {
			params.layout.authoringParameters.device = size;
		}
		if (orientation) {
			params.layout.authoringParameters.orientation = orientation;
		}
		uiutils.triggerResizeInternal(params);
	},

	notifAuthSetPage: function(page) {
		var self = this;

		function _walkNode(node, $$parent, path) {
			var label = node.$layoutType || node.$bind;
			var $$item = $('<li class="s-m-auth-tree s-m-auth-tree-field">').appendTo($$parent);
			$$item.append('<p data-layout-path="' + path + '">' + label + '</p>');

			if (node && node.$items) {
				var $$ul = $('<ul class="s-m-auth-tree">').appendTo($$item);
				var i = 0;
				node.$items.forEach(function(item) {
					_walkNode(item, $$ul, path + "-" + i);
					i++;
				});
			} else if (node.$article && node.$article.$items) {
				var $$ul = $('<ul class="s-m-auth-tree">').appendTo($$item);
				_walkNode(node.$article, $$ul, path + "-1");
			}
		}

		self.$$structureRoot.empty();
		_walkNode(page.article, self.$$structureRoot, "0");

		$("li.s-m-auth-tree > p").mouseover(function(e) {
			var $$o = $(e.currentTarget);
			if ($$lastHoverList) {
				$$lastHoverList.removeClass("s-m-auth-hover");
				var path = $$lastHoverList.attr("data-layout-path");
				notifications.publishEx(["sm.auth.hover.out"], {
					exclude: [self]
				}, path);
			}
			$$o.addClass("s-m-auth-hover");
			$$lastHoverList = $$o;

			var path = $$o.attr("data-layout-path");
			notifications.publishEx(["sm.auth.hover.in"], {
				exclude: [self]
			}, path);
			return false;
		});
		$("li.s-m-auth-tree > p").mouseout(function(e) {
			var $$o = $(e.currentTarget);
			$$o.removeClass("s-m-auth-hover");
			var path = $$o.attr("data-layout-path");
			notifications.publishEx(["sm.auth.hover.out"], {
				exclude: [self]
			}, path);
		});

		$("li.s-m-auth-tree > p").click(function(e) {
			var $$o = $(e.currentTarget);
			var path;

			var $$old = $(".s-m-auth-selected", self.$$panel);
			$$old.removeClass("s-m-auth-selected");
			path = $$old.attr("data-layout-path");
			notifications.publishEx(["sm.auth.remove.selection"], {
				exclude: [self]
			}, path);

			$$o.addClass("s-m-auth-selected");
			path = $$o.attr("data-layout-path");
			notifications.publishEx(["sm.auth.set.selection"], {
				exclude: [self]
			}, path);
			return false;
		});
	},

	notifAuthSetSelection: function(path) {
		var self = this;
		var $$item = self._getItemByPath(path);
		$$item.addClass("s-m-auth-selected");

		self.$$panel.animate({
			scrollTop: $$item.offset().top
		}, 500);
	},

	notifAuthRemoveSelection: function(path) {
		var self = this;
		var $$item = self._getItemByPath(path);
		$$item.removeClass("s-m-auth-selected");
	},

	notifAuthHoverIn: function(path) {
		var self = this;
		var $$item = self._getItemByPath(path);
		$$item.addClass("s-m-auth-hover");
	},

	notifAuthHoverOut: function(path) {
		var self = this;
		var $$item = self._getItemByPath(path);
		$$item.removeClass("s-m-auth-hover");
	},

	_getItemByPath: function(path) {
		var self = this;
		return $("[data-layout-path=" + path + "]", self.$$panel);
	}
});