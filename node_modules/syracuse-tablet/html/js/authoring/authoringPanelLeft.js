"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var globals = require('syracuse-tablet/html/js/helpers/globals');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');
var HammerScroller = require('syracuse-tablet/html/js/helpers/hammerScroller');

var authHelpers = require('syracuse-tablet/html/js/authoring/authoringHelpers');
var authHtml = require('syracuse-tablet/html/js/authoring/authoringHtml');

var $$lastHoverList;

exports.Panel = utils.defineClass(function() {
	var self = this;
	self.$$panel = null;
	self.$$page = $("#s-m-app-id");
	self._bindsOnPage = [];
}, null, {
	show: function() {
		var self = this;

		self._ensurePanel();
		self.$$panel.show();
		self.$$splitter.show();
	},

	hide: function() {
		var self = this;
		self._ensurePanel();
		self.$$panel.hide();
		self.$$splitter.hide();
	},

	notifMainLayoutChanged: function() {
		var self = this;

		$("#s-m-auth-tree-box", self.$$panel).css({
			"height": self.$$panel.height() - 40
		});
		$("#s-m-auth-insert-box", self.$$panel).css({
			"height": self.$$panel.height() - 40
		});
	},

	_ensurePanel: function() {
		var self = this;
		if (this.$$panel) {
			return;
		}
		var ctx = {
			label_content: locale.text("auth.panel.label_content"),
			label_insert: locale.text("auth.panel.label_insert"),
			label_containers: locale.text("auth.panel.label_containers"),
			label_fields: locale.text("auth.panel.label_fields")
		};

		self.$$panel = $("#s-m-auth-panel-left-id");
		self.$$panel.append($(authHtml.execute("authPanelLeftStructure", ctx)));

		self._getDomObjects();
		self._initSplitter();

		notifications.subscribe(self, ["sm.main.layout.changed"]);
		notifications.subscribe(self, ["sm.auth.set.page"]);
		notifications.subscribe(self, ["sm.auth.change.prop.ui"]);

		notifications.subscribe(self, ["sm.auth.set.selection"]);
		notifications.subscribe(self, ["sm.auth.remove.selection"]);

		notifications.subscribe(self, ["sm.auth.hover.in"]);
		notifications.subscribe(self, ["sm.auth.hover.out"]);
		notifications.subscribe(self, ["sm.page.loaded"]);
	},

	_getDomObjects: function() {
		var self = this;
		self.$$structureRoot = $("#auth-structure-root-id", self.$$panel);
		self.$$prototypeRoot = $("#auth-lp-cnt-props-clpse", self.$$panel);
	},

	_initSplitter: function() {
		var self = this;
		self.$$splitter = $("#s-m-auth-splitter-left-id");
		self.$$splitter.draggable({
			axis: "x",
			stop: function(e, ui) {
				var $$splitter = $(this);
				var pos = $$splitter.position();
				var width = $$splitter.width();
				var panelLeftSize = pos.left;
				uiutils.triggerResizeInternal({
					layout: {
						authPanelLeft: {
							width: panelLeftSize
						}
					}
				});
			}
		});
	},

	notifAuthSetPage: function(page) {
		var self = this;
		self._resetScrollers();
		self._buildPageStructTree(page.article);
		self._buildProtoStructTree();
		self._initDomEvents();
		self._initScrollers();
		var orientation = page.article.$layoutType === "hub" ? "horizontal" : "vertical";
		$("#page_design_" + orientation, self.$$panel).eq(0).parent().button("toggle");
	},

	notifAuthChangePropUi: function(articlePage) {
		var self = this;
		if (!globals.getCurrentPage().isDashboard()) {
			self._resetScrollers();
			var article = JSON.parse(articlePage);
			self._buildPageStructTree(article);
			self._buildProtoStructTree();
			self._initDomEvents();
			self._initScrollers();
		}
	},

	notifPageLoaded: function(page) {
		var self = this;
		if (globals.getCurrentPage().isDashboard()) {
			self._resetScrollers();
			self._buildPageStructTree(globals.getCurrentPage().article);
			self._buildProtoStructTree();
			self._initDomEvents();
			self._initScrollers();
		}
	},

	notifAuthSetSelection: function(id) {
		var self = this;
		var $$item = self._getItemById(id);
		if ($$item.length > 0) {
			$$item.addClass("s-m-auth-selected");

			self.$$panel.animate({
				scrollTop: $$item.offset().top
			}, 500);
		}
	},

	notifAuthRemoveSelection: function(id) {
		var self = this;
		var $$item = self._getItemById(id);
		$$item.removeClass("s-m-auth-selected");
	},

	notifAuthHoverIn: function(id) {
		var self = this;
		var $$item = self._getItemById(id);
		$$item.addClass("s-m-auth-hover");
	},

	notifAuthHoverOut: function(id) {
		var self = this;
		var $$item = self._getItemById(id);
		$$item.removeClass("s-m-auth-hover");
	},

	_getItemById: function(id) {
		var self = this;
		return $('[data-ctrl-id="' + id + '"]', self.$$panel);
	},

	_buildPageStructTree: function(article) {
		var self = this;
		self._bindsOnPage = [];

		function _walkNode(node, $$parent, bindParent) {
			var nodeArticle = node.getArticle();
			var id = node.id;
			var typeClass;
			var label;

			if (node.isControl()) {
				var title = node.prototype && node.prototype.data("$title");
				typeClass = node.typeName;
				label = title ? title + " (" + nodeArticle.$bind + ")" : nodeArticle.$bind + " (" + nodeArticle.$bind + ")";
				var bind = bindParent != null ? bindParent + "." + node.$bind : node.$bind;
				self._bindsOnPage.push(bind);
			} else {
				typeClass = nodeArticle.$layoutType || node.typeName;
				label = nodeArticle.$title ? nodeArticle.$title + " (" + typeClass + ")" : typeClass;
			}

			var $$item = $('<li class="s-m-auth-tree s-m-auth-tree-' + typeClass + '">').appendTo($$parent);
			$$item.append('<p data-ctrl-id="' + id + '">' + label + '</p>');
			if (node.isVignette()) {
				self._bindsOnPage.push(node.$bind);
				var page = node.getPage();
				if (page) { // Page is set if content of vignette is not a link
					var rootLayout = page.rootLayout;
					var $$ul = $('<ul class="s-m-auth-tree">').appendTo($$item);
					_walkNode(rootLayout, $$ul, node.$bind);
				}
			} else {
				var nodeArticle = node.getArticle();

				if (node.children && node.children.length > 0) {
					article.$items = [];
					node.children.forEach(function(child) {
						var childArticle = {};
						article.$items.push(childArticle);
						var $$ul = $('<ul class="s-m-auth-tree">').appendTo($$item);
						_walkNode(child, $$ul, bindParent);
					});
				}
			}
		}

		var page = globals.getApplication().currentPage;
		var rootLayout = page.rootLayout;
		self.$$structureRoot.empty();
		var $$item = $('<li class="s-m-auth-tree s-m-auth-tree-page">').appendTo(self.$$structureRoot);
		$$item.append('<p data-ctrl-id="' + page.id + '">' + "page" + '</p>');
		var $$ul = $('<ul class="s-m-auth-tree">').appendTo($$item);

		_walkNode(rootLayout, $$ul);
	},

	/*
	 * Show page prototype tree, only show items that are not yet bound (referenced with $bind) on the page
	 * To only allow to add each field exactly one time.
	 */
	_buildProtoStructTree: function() {
		var self = this;
		var page = globals.getApplication().currentPage;

		self.$$prototypeRoot.empty();
		var $$item = $('<li class="s-m-auth-tree s-m-auth-tree-page">').appendTo(self.$$prototypeRoot);
		$$item.append('<p data-ctrl-id="' + page.id + '">' + "page" + '</p>');
		var $$ul = $('<ul class="s-m-auth-tree">').appendTo($$item);

		if (jsutils.isInstanceOf(page, "DashboardPage")) {
			var props = page.prototype.getPropertyNames();
			props.forEach(function(key) {
				self._addVignette(page, key, $$ul);
			});
		} else {
			self._addPage(page, $$ul);
		}
	},

	_addVignette: function(page, vignette, $$parent) {
		var self = this;
		var ctrlVignette = page.getControlByBind(vignette);
		if (!ctrlVignette) {
			return;
		}
		var proto = page.prototype;
		var prop = proto.property(vignette);
		var title = proto.property(vignette, "$title");
		var label = title ? title + " (" + vignette + ")" : vignette;

		var $$item = $('<li class="s-m-auth-tree s-m-auth-tree-vignette" data-auth-bind="' + vignette + '">').appendTo($$parent);
		$$item.append('<p>' + label + '</p>');
		var $$ul = $('<ul class="s-m-auth-tree">').appendTo($$item);

		page = ctrlVignette.getPage();
		// May be null if oage is inside the vignette and the vignette is not displaying the content but only a link
		if (page) {
			self._addPage(page, $$ul, vignette);
		}

		var $$children = $("li", $$ul);

		// vignette used on page already and also all it's children, so no need to show
		if (self._bindsOnPage.indexOf(vignette) > -1 && $$children.length <= 0) {
			$$item.remove();
		}
	},

	_addPage: function(page, $$parent, bindParent) {
		var self = this;
		var label = "?";
		var proto = page.prototype;
		var props = proto.getPropertyNames();
		props.forEach(function(key) {
			if (proto.property(key, "$isExcluded") !== true) {;
				var bind = bindParent != null ? bindParent + "." + key : key;
				if (self._bindsOnPage.indexOf(bind) < 0) {
					var title = proto.property(key, "$title");
					var type = proto.property(key, "$type");
					var typeClass = utils.getTypeName(type);
					var label = title ? title + " (" + key + ")" : key;
					var $$item = $('<li class="s-m-auth-tree s-m-auth-tree-' + typeClass + '" data-auth-bind="' + key + '" data-auth-bind-parent="' + bindParent + '">').appendTo($$parent);
					$$item.append('<p>' + label + '</p>');
				}
			}
		});
	},

	_initDomEvents: function() {
		var self = this;
		$("li.s-m-auth-tree > p", $("#auth-structure-root-id")).mouseover(function(e) {
			var $$o = $(e.currentTarget);
			if ($$lastHoverList) {
				$$lastHoverList.removeClass("s-m-auth-hover");
				var id = $$lastHoverList.attr("id");
				notifications.publishEx(["sm.auth.hover.out"], {
					exclude: [self]
				}, id);
			}
			$$o.addClass("s-m-auth-hover");
			$$lastHoverList = $$o;

			var id = $$o.attr("data-ctrl-id");
			notifications.publishEx(["sm.auth.hover.in"], {
				exclude: [self]
			}, id);
			return false;
		});

		$("li.s-m-auth-tree > p", $("#auth-structure-root-id")).mouseout(function(e) {
			var $$o = $(e.currentTarget);
			$$o.removeClass("s-m-auth-hover");
			var id = $$o.attr("data-ctrl-id");
			notifications.publishEx(["sm.auth.hover.out"], {
				exclude: [self]
			}, id);
		});

		$("li.s-m-auth-tree > p", $("#auth-structure-root-id")).click(function(e) {
			self.setSelection($(e.currentTarget));
			return false;
		});
	},

	/**
	 * Set current selection
	 * if $$newSel = null just remove the current selection
	 */
	setSelection: function($$newSel) {
		var self = this;
		var $$old = $(".s-m-auth-selected", self.$$panel);
		$$old.removeClass("s-m-auth-selected");
		var id = $$old.attr("data-ctrl-id");
		notifications.publishEx(["sm.auth.remove.selection"], {
			exclude: [self]
		}, id);
		if ($$newSel) {
			// new sitem to select
			$$newSel.addClass("s-m-auth-selected");
			id = $$newSel.attr("data-ctrl-id");
		} else {
			// just remove selection
			id = null;
		}
		notifications.publishEx(["sm.auth.set.selection"], {
			exclude: [self]
		}, id);
	},

	_resetScrollers: function() {
		var self = this;
		if (self._scrollers) {
			for (var s in self._scrollers) {
				self._scrollers[s].destroy();
			}
			self._scrollers = null;
		}
	},

	_initScrollers: function() {
		var self = this;
		self._resetScrollers();
		self._scrollers = HammerScroller.createSimpleScroller(self.$$panel);
	}
});