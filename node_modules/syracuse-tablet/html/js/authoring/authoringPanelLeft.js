"use strict";

var utils = require('syracuse-tablet/html/js/helpers/utils');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var uiutils = require('syracuse-tablet/html/js/ui/uiUtils');

var authHelpers = require('syracuse-tablet/html/js/authoring/authoringHelpers');
var authHtml = require('syracuse-tablet/html/js/authoring/authoringHtml');

var $$lastHoverList;

exports.Panel = utils.defineClass(function() {
	var self = this;
	self.$$panel = null;
	self.$$page = $("#s-m-app-id");
}, null, {
	show: function() {
		var self = this;

		self._ensurePanel();
		self.$$panel.show();
		self.$$splitter.show();
	},

	hide: function() {
		var self = this;
		self._ensurePanel();
		self.$$panel.hide();
		self.$$splitter.hide();
	},

	notifMainLayoutChanged: function() {
		var self = this;

		$("#s-m-auth-tree-box", self.$$panel).css({
			"height": self.$$panel.height()
		});
	},

	_ensurePanel: function() {
		var self = this;
		if (this.$$panel) {
			return;
		}
		var ctx = {};

		self.$$panel = $("#s-m-auth-panel-left-id");
		self.$$panel.append($(authHtml.execute("authPanelLeftStructure", ctx)));

		self._getDomObjects();
		self._initSplitter();

		notifications.subscribe(self, ["sm.main.layout.changed"]);
		notifications.subscribe(self, ["sm.auth.set.page"]);
		notifications.subscribe(self, ["sm.auth.change.prop.ui"]);

		notifications.subscribe(self, ["sm.auth.set.selection"]);
		notifications.subscribe(self, ["sm.auth.remove.selection"]);

		notifications.subscribe(self, ["sm.auth.hover.in"]);
		notifications.subscribe(self, ["sm.auth.hover.out"]);
	},

	_getDomObjects: function() {
		var self = this;
		self.$$structureRoot = $("#auth-structure-root-id", self.$$panel);
	},

	_initSplitter: function() {
		var self = this;
		self.$$splitter = $("#s-m-auth-splitter-left-id");
		self.$$splitter.draggable({
			axis: "x",
			stop: function(e, ui) {
				var $$splitter = $(this);
				var pos = $$splitter.position();
				var width = $$splitter.width();
				var panelLeftSize = pos.left;
				uiutils.triggerResizeInternal({
					layout: {
						authPanelLeft: {
							width: panelLeftSize
						}
					}
				});
			}
		});
	},

	notifAuthSetPage: function(page) {
		var self = this;
		self._buildPageStructTree(page.article);
		self._initDomEvents();

		var orientation = page.article.$layoutType === "hub" ? "horizontal" : "vertical";
		$("#page_design_" + orientation, self.$$panel).eq(0).parent().button("toggle");
	},

	notifAuthChangePropUi: function(articlePage) {
		var self = this;
		var article = JSON.parse(articlePage);
		self._buildPageStructTree(article);
		self._initDomEvents();
	},

	notifAuthSetSelection: function(path) {
		var self = this;
		var $$item = self._getItemByPath(path);
		if ($$item.length > 0) {
			$$item.addClass("s-m-auth-selected");

			self.$$panel.animate({
				scrollTop: $$item.offset().top
			}, 500);
		}
	},

	notifAuthRemoveSelection: function(path) {
		var self = this;
		var $$item = self._getItemByPath(path);
		$$item.removeClass("s-m-auth-selected");
	},

	notifAuthHoverIn: function(path) {
		var self = this;
		var $$item = self._getItemByPath(path);
		$$item.addClass("s-m-auth-hover");
	},

	notifAuthHoverOut: function(path) {
		var self = this;
		var $$item = self._getItemByPath(path);
		$$item.removeClass("s-m-auth-hover");
	},

	_getItemByPath: function(path) {
		var self = this;
		return $("[data-layout-path=" + path + "]", self.$$panel);
	},

	_buildPageStructTree: function(article) {
		var self = this;

		function _walkNode(node, $$parent, path, $$pageParent) {

			var label;
			var typeClass;
			var $$elmt = $("[data-layout-path=" + path + "]", $$pageParent);
			if (!$$elmt.hasClass("s-m-auth")) {
				return;
			}
			if (node.$layoutType) {
				label = node.$title ? node.$title + " (" + node.$layoutType + ")" : node.$layoutType;
				typeClass = node.$layoutType;
			} else {
				var control = authHelpers.findControl($$elmt);
				var title = control && control.prototype && control.prototype.data("$title", null, true);
				label = title ? title + " (" + node.$bind + ")" : node.$bind + " (" + node.$bind + ")";
				typeClass = control && control.typeName || "field";
			}

			var $$item = $('<li class="s-m-auth-tree s-m-auth-tree-' + typeClass + '">').appendTo($$parent);
			$$item.append('<p data-layout-path="' + path + '">' + label + '</p>');

			if (node && node.$items) {
				var $$ul = $('<ul class="s-m-auth-tree">').appendTo($$item);
				var i = 0;
				node.$items.forEach(function(item) {
					_walkNode(item, $$ul, path + "-" + i, $$elmt);
					i++;
				});
			} else if (node.$article && node.$article.$items) {
				var $$ul = $('<ul class="s-m-auth-tree">').appendTo($$item);
				_walkNode(node.$article, $$ul, path + "-0", $$elmt);
			}
		}

		self.$$structureRoot.empty();
		var $$item = $('<li class="s-m-auth-tree s-m-auth-tree-page">').appendTo(self.$$structureRoot);
		$$item.append('<p data-layout-path="0#page">' + "page" + '</p>');
		var $$ul = $('<ul class="s-m-auth-tree">').appendTo($$item);
		_walkNode(article, $$item, "0", self.$$page);
	},

	_initDomEvents: function() {
		var self = this;
		$("li.s-m-auth-tree > p").mouseover(function(e) {
			var $$o = $(e.currentTarget);
			if ($$lastHoverList) {
				$$lastHoverList.removeClass("s-m-auth-hover");
				var path = $$lastHoverList.attr("data-layout-path");
				notifications.publishEx(["sm.auth.hover.out"], {
					exclude: [self]
				}, path);
			}
			$$o.addClass("s-m-auth-hover");
			$$lastHoverList = $$o;

			var path = $$o.attr("data-layout-path");
			notifications.publishEx(["sm.auth.hover.in"], {
				exclude: [self]
			}, path);
			return false;
		});

		$("li.s-m-auth-tree > p").mouseout(function(e) {
			var $$o = $(e.currentTarget);
			$$o.removeClass("s-m-auth-hover");
			var path = $$o.attr("data-layout-path");
			notifications.publishEx(["sm.auth.hover.out"], {
				exclude: [self]
			}, path);
		});

		$("li.s-m-auth-tree > p").click(function(e) {
			var $$o = $(e.currentTarget);
			var path;

			var $$old = $(".s-m-auth-selected", self.$$panel);
			$$old.removeClass("s-m-auth-selected");
			path = $$old.attr("data-layout-path");
			notifications.publishEx(["sm.auth.remove.selection"], {
				exclude: [self]
			}, path);

			$$o.addClass("s-m-auth-selected");
			path = $$o.attr("data-layout-path");
			notifications.publishEx(["sm.auth.set.selection"], {
				exclude: [self]
			}, path);
			return false;
		});
	}
});