"use strict";

var authoringActions = require('syracuse-tablet/html/js/authoring/page/authoringActions');
var authoringChartDetail = require('syracuse-tablet/html/js/authoring/page/authoringChartDetail');
var authPropsGeneral = require('syracuse-tablet/html/js/authoring/authoringPropertiesGeneral');
var authComponents = require('syracuse-tablet/html/js/authoring/authoringComponents');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var locale = require('syracuse-tablet/html/js/helpers/locale');

var _getPage = function($$elmt, control) {
	if (control && control.isVignette()) {
		return control.getPage();
	} else if ($$elmt && $$elmt.is(".s-m-page")) {
		return $$elmt.smPageController();
	}
	return null;
};
var _properties = {
	"variants": function(controller, sel, data) {
		this.key = "$variant";
		this.views = controller.views;
		if (!this.views || this.views.length <= 1) {
			return;
		};
		var titles = [];
		var currentSelection;
		this.views.forEach(function(view, idx) {
			titles.push({
				"title": view.$title,
				"value": view.uuid || view.$url,
				"selected": view.$selected
			});
			if (view.$selected) currentSelection = view.uuid || view.$url;
		});
		this.applyMarkup = function($$parent, prop, sel, data) {
			var subsection = this._addSubSection($$parent);
			var opts = {
				css: "variants-list",
				value: currentSelection,
				options: titles,
				onChange: jsutils.bindFn(this.valueChange, this, sel, data, prop),
				dataSize: 20
			};
			this.viewSelect = authComponents.newComponent("select", opts);
			this.viewSelect.createMarkup(subsection.$$content);
			if (data.articleSelection && data.articleSelection.$variant) {
				this.viewSelect.setValue(data.articleSelection.$variant);
			};
		};

		this._addSubSection = function($$parent) {
			var title = locale.text("auth.page.views");
			var id = "pageViewsList";
			return authoringActions.addSubSection(title, id, $$parent);
		};

		this.valueChange = function(event, viewSelect, sel, data, prop) {
			var uuid = viewSelect.getValue();
			var self = this;
			var variants = data && data.page && data.page.variants;
			if (!variants) return;

			var variantSelected = $.smFind(variants, function(variant) {
				if (uuid.indexOf(variant.$uuid) > -1) {
					return true;
				};
				return false;
			});
			if (variantSelected) {
				this.views.forEach(function(view) {
					view.$selected = false;
					if (view.$url === uuid || view.uuid == uuid) {
						view.$selected = true;
					}
				});
				authPropsGeneral.notifyAuthVariantChange(JSON.parse(variantSelected.pageData.content).$article);
			}
		};
	}
};

var _modules = [authoringActions, authoringChartDetail];

exports.initModuleProperties = function(dest) {
	_modules.forEach(function(module) {
		module.initModuleProperties(dest);
	});
};

exports.getModuleProperties = function($$elmt, controller, props, sel, data) {
	data.page = _getPage($$elmt, data.control);
	if (data.page == null) return;
	if (data.page.state.type === "chartdetail") {
		authoringChartDetail.getModuleProperties($$elmt, controller, props, sel, data);
	}
	props.push(_properties.variants);
	// #6820 Also there are no actions, we show the options to allow to set the download option
	// else if (data.page.getProtoLinks()) {
	authoringActions.getModuleProperties($$elmt, controller, props, sel, data);
	//}
};