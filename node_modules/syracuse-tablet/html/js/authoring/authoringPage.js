"use strict";

var globals = require('syracuse-tablet/html/js/helpers/globals');
var utils = require('syracuse-tablet/html/js/helpers/utils');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var authHelpers = require('syracuse-tablet/html/js/authoring/authoringHelpers');
var authDrag = require('syracuse-tablet/html/js/authoring/authoringDrag');

var $$lastHoverElement;

//Controls and layout classes that cannot be selected during authoring
var _elementsNoAuthoring = [
	".s-m-array .s-m-control",
	".s-m-array .s-m-layout",
	".s-m-control.header",
	".s-m-control.footer",
	".s-m-control.navigationpanel",
	".s-m-control.pageactionpanelregular"
];

exports.AuthPage = utils.defineClass(
	function AuthPage() {
		var self = this;

		self.__onElementClick = self._onElementClick.bind(self);
		self.__onElementMouseOver = self._onElementMouseOver.bind(self);
		self.__onElementMouseOut = self._onElementMouseOut.bind(self);

		self.$$page = $("#s-m-app-id");
	}, null, {

		enable: function() {
			var self = this;
			self._subscribe();
		},

		disable: function() {
			var self = this;
			self._unscribe();
		},

		/*
		 * Enable hover and click events in page
		 */
		enableAuthCss: function() {
			var self = this;
			// !! disableAuthCss is not well managed and if we call enableAuthCss without having called disableAuthCss we add multiple handlers
			// TODO - Review the destroy/disable process
			self.disableAuthCss();
			$(".s-m-control").addClass("s-m-auth");
			$(".s-m-layout").addClass("s-m-auth");
			$(".s-m-layout").addClass("s-m-auth");
			$(".s-m-page").addClass("s-m-auth");

			_elementsNoAuthoring.forEach(function(e) {
				$(e).removeClass("s-m-auth");
			});

			$(".s-m-auth", self.$$page).on("click", self.__onElementClick);
			$(".s-m-auth", self.$$page).on("mouseover", self.__onElementMouseOver);
			$(".s-m-auth", self.$$page).on("mouseout", self.__onElementMouseOut);

			self._enableDrop();
		},

		/*
		 * Disable all events in page that were used for authoring interaction
		 */
		disableAuthCss: function() {
			var self = this;
			self._disableDrop();

			$(".s-m-auth", self.$$page).off("click", self.__onElementClick);
			$(".s-m-auth", self.$$page).off("mouseover", self.__onElementMouseOver);
			$(".s-m-auth", self.$$page).off("mouseout", self.__onElementMouseOut);

			$(".s-m-auth", self.$$page).removeClass("s-m-auth");
		},

		_subscribe: function() {
			var self = this;
			notifications.subscribe(self, ["sm.auth.hover.in"]);
			notifications.subscribe(self, ["sm.auth.hover.out"]);
			notifications.subscribe(self, ["sm.auth.set.selection"]);
			notifications.subscribe(self, ["sm.auth.remove.selection"]);
		},

		_unscribe: function() {
			var self = this;
			notifications.unsubscribe(self, ["sm.auth.hover.in"]);
			notifications.unsubscribe(self, ["sm.auth.hover.out"]);
			notifications.unsubscribe(self, ["sm.auth.set.selection"]);
			notifications.unsubscribe(self, ["sm.auth.remove.selection"]);
		},

		_enableDrop: function() {
			var self = this;
			var dragParam = {
				scroll: false,
				containment: $("body"),
				helper: function(event) {
					var $$source = $(event.target);
					return self._createDragHelper($$source);
				},
				appendTo: "body",
				revert: function($$drop) {
					return "invalid";
				},
				start: function() {},
				stop: function() {}
			};
			//			$(".s-m-auth.s-m-layout", self.$$panel).draggable(dragParam);
			//			$(".s-m-auth.s-m-control", self.$$panel).draggable(dragParam);

			$(".s-m-auth").droppable({
				greedy: true,
				hoverClass: "s-m-auth-hover-droptarget",
				tolerance: "pointer",
				drop: function(event, ui) {
					var $$helper = ui.helper;
					var $$draggable = ui.draggable;
					return authDrag.dropDrop($(this), $$helper, $$draggable);
				},
				accept: function($$draggable) {
					return authDrag.dropAccept($(this), $$draggable);
				},
				over: function(event, ui) {
					var $$helper = ui.helper;
					var $$draggable = ui.draggable;
					return authDrag.dropOver($(this), $$helper, $$draggable);
				}
			});
		},

		_disableDrop: function() {
			//			$(".s-m-auth.ui-draggable").draggable("destroy");
			$(".s-m-auth.ui-droppable").droppable("destroy");
		},

		_createDragHelper: function($$source) {
			var $$dragSource = authDrag.getClosestDragElement($$source);
			var control = authHelpers.findControl($$dragSource);
			if (!control) {
				return;
			}

			var $$helper = $('<p class="s-m-auth-drag-helper">');
			var text;
			if (control.prototype) {
				// it's a control
				text = control.prototype.data("$title");
				if (text) {
					text = text + "(" + control.$bind + ")";
				} else {
					text = control.$bind;
				}
			} else {
				// it's a layout
				text = control.title;
				if (text) {
					text = text + " (" + control.typeName + ")";
				} else {
					text = control.typeName;
				}
			}
			$$helper.text(text);
			return $$helper[0];
		},

		_onElementClick: function(e) {
			var self = this;
			var $$o = $(e.currentTarget);

			var $$old = $(".s-m-auth-selected", self.$$page);
			$$old.removeClass("s-m-auth-selected");
			var id = $$old.attr("id");
			notifications.publishEx(["sm.auth.remove.selection"], {
				exclude: [self]
			}, id);

			$$o.addClass("s-m-auth-selected");
			id = $$o.attr("id");
			notifications.publishEx(["sm.auth.set.selection"], {
				exclude: [self]
			}, id);
			// Scrolling needs shiftClick and altClick
			if (utils.stopClickEvent(e)) return false;
		},

		_onElementMouseOver: function(e) {
			var self = this;
			var $$o = $(e.currentTarget);
			if ($$lastHoverElement) {
				$$lastHoverElement.removeClass("s-m-auth-hover");
				notifications.publishEx(["sm.auth.hover.out"], {
					exclude: [self]
				}, $$lastHoverElement.attr("id"));
			}
			notifications.publishEx(["sm.auth.hover.in"], {
				exclude: [self]
			}, $$o.attr("id"));
			$$o.addClass("s-m-auth-hover");
			$$lastHoverElement = $$o;
			return false;
		},

		_onElementMouseOut: function(e) {
			var self = this;
			var $$o = $(e.currentTarget);
			$$o.removeClass("s-m-auth-hover");
			notifications.publishEx(["sm.auth.hover.out"], {
				exclude: [self]
			}, $$o.attr("id"));
		},

		notifAuthHoverIn: function(id) {
			var self = this;
			var $$pageItem = self._getItemById(id);
			$$pageItem.addClass("s-m-auth-hover");
		},

		notifAuthHoverOut: function(id) {
			var self = this;
			var $$pageItem = self._getItemById(id);
			$$pageItem.removeClass("s-m-auth-hover");
		},

		notifAuthSetSelection: function(id, noScroll) {
			var self = this;
			var $$item = self._getItemById(id);
			if ($$item && $$item.length > 0) {
				$$item.addClass("s-m-auth-selected");
				if (noScroll !== true) {
					self._scrollToVisibleArea($$item);
				}
			}
		},

		notifAuthRemoveSelection: function(id) {
			var self = this;
			var $$item = self._getItemById(id);
			$$item.removeClass("s-m-auth-selected");
		},

		_getItemById: function(id) {
			var self = this;
			return $("#" + id, self.$$page);
		},

		getCurrentSelectionId: function() {
			var self = this;
			var $$item = $(".s-m-auth-selected", self.$$page);
			return $$item.attr("id");
		},

		_scrollToVisibleArea: function($$item) {
			var self = this;
			var page = globals.getApplication().currentPage;
			var scroller =
				page && page._gestureMgr ||
				page && page.rootLayout && page.rootLayout._gestureMgr;
			if (scroller) {
				scroller.makeVisible($$item);
			}
		}
	});