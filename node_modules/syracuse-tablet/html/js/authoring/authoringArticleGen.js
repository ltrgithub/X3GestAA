"use strict";

var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var articleParser = require('syracuse-tablet/html/js/helpers/articleParser');

/*
 * Generator for articles of different page types and scrolling models
 *
 */

var _testFacet = /representation=.*\.\$(\w+)[&]*/;
var _getFacet = function($url) {
	var t = _testFacet.exec($url || "");
	return t != null && t.length == 2 ? t[1] : null;
};
exports.genNewArticle = function(opts, synch) {
	var proto;
	proto = opts.page.prototype;

	if (jsutils.isInstanceOf(opts.page, "DashboardPage")) {
		return exports.generateDashboardArticle(proto, opts.orientation, opts.template, synch);
	} else {
		return _generateRegularArticle(proto, opts.orientation, opts.template, synch);
	}
};

exports.generateDashboardArticle = function(proto, orientation, tpl, synch) {

	var article;
	proto = $.isPlainObject(proto) ? proto : proto.json;
	var props = proto.$properties;

	if (orientation === "horizontal") {
		article = {
			"$layoutType": "hub",
			"$items": [{
				"$layoutType": "hubGroup",
				"$title": "",
				"$items": []
			}]
		};

		// Just create root and return if requested
		if (tpl === false) {
			return $.smResolve(article);
		}

		Object.keys(props).forEach(function(key) {
			var prop = props[key];
			article.$items[0].$items.push({
				"$layoutType": "tile",
				"$size": "medium",
				"$items": [{
					"$bind": key,
				}]
			});

		});
	} else {
		article = {
			"$layoutType": "stack",
			"$items": []
		};

		// Just create root and return if requested
		if (tpl === false) {
			return $.smResolve(article);
		}

		var cellCount = 4;
		var row;
		Object.keys(props).forEach(function(key) {
			if (cellCount === 4) {
				cellCount = 0;
				row = {
					"$layoutType": "row",
					"$items": []
				};
				article.$items.push(row);
			}
			var prop = props[key];
			row.$items.push({
				"$layoutType": "cell",
				"$widthXs": 12,
				"$widthSm": 6,
				"$widthMd": 4,
				"$widthLg": 3,
				"$items": [{
					"$bind": key,
				}]
			});
		});
	}
	return synch === true ? article : $.smResolve(article);
};

function _generateRegularArticle(proto, orientation, tpl, synch) {
	proto = $.isPlainObject(proto) ? proto : proto.json;
	if (proto.$type === "application/x-array") {
		proto = proto.$item;
	}
	var props = proto.$properties;
	var $items, prop;
	var forceNoTitle = _getFacet(proto.$url) === "query";
	if (orientation === "horizontal") {
		article = {
			"$layoutType": "hub",
			"$items": [{
				"$layoutType": "hubGroup",
				"$title": "",
				"$items": []
			}]
		};

		// Just create root and return if requested
		if (tpl === false) {
			return $.smResolve(article);
		}

		var groupItems = article.$items[0].$items;
		var maxItemsPerGroup = 4;
		var itemsPerGroup = maxItemsPerGroup;
		var tileItems;
		var singlePropTypes = ["application/x-array", "application/x-document", "image"];
		for (var p in props) {
			prop = props[p];
			if (prop.$isExcluded !== true) {
				if (singlePropTypes.indexOf(prop.$type) > -1) {
					var tile = {
						"$layoutType": "tile",
						"$size": "large",
						"$items": []
					};
					groupItems.push(tile);
					tileItems = tile.$items;
					itemsPerGroup = maxItemsPerGroup;
				} else
				if (itemsPerGroup >= maxItemsPerGroup) {
					itemsPerGroup = 0;
					var tile = {
						"$layoutType": "tile",
						"$size": "large",
						"$items": []
					};
					groupItems.push(tile);
					tileItems = tile.$items;
				}
				itemsPerGroup = itemsPerGroup + 1;
				var a = {
					$bind: p
				};
				if (forceNoTitle) {
					a.$isTitleHidden = forceNoTitle;
				} else {
					a.$labelPosition = "top";
				}
				tileItems.push(a);
			}
		}

	} else {
		var article = {
			$layoutType: "stack",
			$items: []
		};

		// Just create root and return if requested
		if (tpl === false) {
			return $.smResolve(article);
		}
		if (!proto || !proto.$article || !proto.$article.$layout) {
			$items = article.$items;
			for (var p in props) {
				prop = props[p];
				if (prop.$isExcluded !== true) {
					var a = {
						$bind: p
					};
					if (forceNoTitle) {
						a.$isTitleHidden = forceNoTitle;
					}
					$items.push(a);
				}
			}
		} else {
			articleParser.coreLayout2DefaultLayout(proto, article, props);
		}
	}
	return synch === true ? article : $.smResolve(article);
};

function _generateDefaultRegularArticle(proto, acticle) {

}