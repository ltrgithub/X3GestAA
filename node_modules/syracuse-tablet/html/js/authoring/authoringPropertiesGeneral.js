"use strict";
var authHtml = require('syracuse-tablet/html/js/authoring/authoringHtml');
var authVal = require('syracuse-tablet/html/js/authoring/authoringVal');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var modal = require('syracuse-tablet/html/js/ui/modals/modal');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var globals = require('syracuse-tablet/html/js/helpers/globals');


var _properties = {
	/*
	 * Dummy to add a separator
	 */
	"SEPARATOR": {
		isSeparatror: true
	},

	/*
	 * Full JSON article of selection for experts
	 */
	"JSON": {
		"key": "$JSON",
		createMarkup: _createMarkupJSON,
		type: "expert"
	},
	/*
	 * Read only display of prototype
	 */
	"PROTOTYPE": {
		"key": "$PROTOYPE",
		createMarkup: _createMarkupPrototype,
		type: "expert"
	},

};


function _createMarkupJSON($$parent, prop, sel, data) {
	// This is only displayed if the full page is selected, so we always show the article of the page and not the article
	// of the selected UI compontent (UI component is always the page)
	var value = authVal.toSortedJSON(data.articlePage);
	var html = authHtml.execute("authPanelPropertyJSON", {
		id: "auth_opt_" + prop.name,
		value: value,
		label_apply: locale.text("auth.panel.label_apply"),
		label_display: locale.text("auth.panel.label_display")
	});
	var $$panel = $(html);
	var title = sel.$$elmt.text();
	var _getJson = function(validate) {
		var val = $("textarea", $$panel).val();
		var articleParsed;
		if (validate) {
			articleParsed = authVal.validateJSON(true, $("textarea", $$panel).val(), _properties);
		} else {
			try {
				articleParsed = JSON.parse(val);
			} catch (e) {
				return jsutils.convertToDiagnoses("Error validating JSON", e);
			}
		}
		return articleParsed ? authVal.toSortedJSON(articleParsed) : null;
	};
	$("a[data-action]", $$panel).click(function() {
		var act = $(this).attr("data-action");
		try {
			if (act === "jsonApply") {
				// Full page article exchange
				var articleString = _getJson(true);
				if (articleString) {
					notifications.publish(["sm.auth.change.prop.ui"], articleString);
				}
			} else if (act === "openInNewTab") {
				var articleString = _getJson(false);
				if (articleString) {
					var myWindow = window.open("about:blank", "sageMobileJsonAuthoring", undefined, true);
					setTimeout(function() {
						var title = globals.getApplication().currentPage.prototype;
						if (title) title = title.data("$title");
						title = title && title.length > 0 ? locale.text("auth.panel.label_page") + ": " + title + "\n" : "";
						myWindow.document.write("<html><body><pre>" + title + locale.text("auth.panel.label_date") + ": " + (new Date()).toLocaleString() + "</pre><pre>" + articleString + "</pre></body></html>");
					});
				}
			}
		} catch (e) {
			console.log(e.stack);
			throw (e);
		}
	});
	$$parent.append($$panel);
}

function _createMarkupPrototype($$parent, prop, sel, data) {
	var value = data.control && data.control.prototype && data.control.prototype.json;
	if (value) {
		value = JSON.stringify(value, null, " ");
	} else {
		value = locale.text("auth.PROTOTYPE_NONE");
	}
	var html = authHtml.execute("authPanelPropertyPROTOTYPE", {
		id: "auth_opt_" + prop.name,
		value: value
	});
	var $$panel = $(html);
	$$parent.append($$panel);
	//	$$parent.append($('<button type="button" class="btn btn-default">title</button>'));
}

var _initProperty = function(p) {
	var pre = "auth";
	var lk = pre + "." + p.name;
	if (p.label == null) {
		p.label = locale.text(lk);
	}
	if (p.values) {
		p.values.forEach(function(v, idx) {
			if ($.isPlainObject(v)) {
				var vk = lk + "." + ("" + ((v.value != null ? v.value : v.key)));
				if (v.label == null) {
					v.label = locale.text(vk);
				}
			} else {
				p.values[idx] = {
					label: v + "",
					valu: v
				};
			}
		});
	}
};
var _initProperties = function(properties, dest) {
	var pre = "auth";
	Object.keys(properties).forEach(function(prop) {
		var p = properties[prop];
		if (dest) {
			dest[prop] = p;
		}
		if (typeof p === "function") {
			return;
		}
		p.name = prop;
		_initProperty(p);
	});
};

var _err = function(title, ee) {
	modal.error(title, ee);
	return true;
};

function _getValueOrDefault(prop, sel, data) {
	var value = data.articleSelection && data.articleSelection[prop.key];
	value = (value != null) ? value : prop["default"];
	return value;
}

function _setValue(prop, sel, data, value) {
	data.articleSelection[prop.key] = value;

	// To flag control that has been changed
	data.articleSelection["$isDirty"] = data.articleSelection["$isDirty"] || {};
	data.articleSelection["$isDirty"][prop.key] = true;
}

function _notifyChangePropUI($$parent, sel, data) {
	var $$json = $("textarea#auth_opt_JSON");
	$$json.val(authVal.toSortedJSON(data.articleSelection));
	notifications.publish(["sm.auth.change.item.prop.ui"], data);
}

function _createMarkupRadio($$parent, prop, sel, data) {

	var ctx = {
		group: "auth_opt_" + prop.name,
		options: []
	};

	var value = _getValueOrDefault(prop, sel, data);
	var allHidden = true;

	prop.values.forEach(function(v) {
		ctx.options.push({
			id: ctx.group + "_" + v.value,
			value: "" + v.value,
			label: v.label,
			display: (v.isHidden ? "none" : "block")
		});
		allHidden = allHidden && v.isHidden;
	});

	var html = authHtml.execute("authPanelPropertyRadio", ctx);
	var $$panel = $(html);
	$("label[data-s-m-auth-value='" + ("" + value) + "']", $$panel).eq(0).button("toggle");
	$("label", $$panel).on("click", function(e) {
		var $$ct = $(e.currentTarget);
		var value = $$ct.attr("data-s-m-auth-value");
		$$ct.eq(0).button("toggle");

		/*
		 * Important! Use boolean datatype for boolean properties!
		 */
		if (value === "true") {
			value = true;
		} else if (value === "false") {
			value = false;
		}
		_setValue(prop, sel, data, value);
		_notifyChangePropUI($$parent, sel, data);
	});
	$$parent.append($$panel);

	if (allHidden) {
		$$parent.parent(".s-m-panel-auth-prop").hide();
	} else {
		$$parent.parent(".s-m-panel-auth-prop").show();
	}
}

function _refreshMarkupRadio($$parent, prop, sel, data) {
	var allHidden = true;
	prop.values.forEach(function(v) {
		var id = "auth_opt_" + prop.name + "_" + v.value;
		var $$btn = $("#" + id, $$parent);
		var display = v.isHidden ? "none" : "block";
		$$btn.css("display", display);
		allHidden = allHidden && v.isHidden;
	});
	if (allHidden) {
		$$parent.parent(".s-m-panel-auth-prop").hide();
	} else {
		$$parent.parent(".s-m-panel-auth-prop").show();
	}
}

function _createMarkupCheckboxes($$parent, prop, sel, data) {

	var ctx = {
		group: "auth_opt_" + prop.name,
		options: []
	};

	var value = _getValueOrDefault(prop, sel, data);
	var allHidden = true;

	var value = data.articleSelection && data.articleSelection[prop.key] || {};
	prop.values.forEach(function(v) {
		var cb = value[v.key] != null ? value[v.key] : v["default"];
		ctx.options.push({
			id: ctx.group + "_" + v.key,
			value: v.key,
			label: v.label,
			checked: cb,
			display: (v.isHidden ? "none" : "block")
		});
		allHidden = allHidden && v.isHidden;
	});

	var html = authHtml.execute("authPanelPropertyCheckbox", ctx);
	var $$panel = $(html);

	$("label", $$panel).on("click", function(e) {
		var $$ct = $(e.currentTarget);
		var key = $$ct.attr("data-s-m-auth-value");
		var value = $("input:checked", $$ct).length > 0;

		var v = data.articleSelection[prop.key] = data.articleSelection[prop.key] || {};
		v[key] = value;
		_notifyChangePropUI($$parent, sel, data);
	});
	$$parent.append($$panel);

	if (allHidden) {
		$$parent.parent(".s-m-panel-auth-prop").hide();
	} else {
		$$parent.parent(".s-m-panel-auth-prop").show();
	}
}

function _refreshMarkupCheckboxes($$parent, prop, sel, data) {
	var allHidden = true;
	prop.values.forEach(function(v) {
		var id = "auth_opt_" + prop.name + "_" + v.key;
		var $$btn = $("#" + id, $$parent);
		var display = v.isHidden ? "none" : "block";
		$$btn.css("display", display);
		allHidden = allHidden && v.isHidden;
	});
	if (allHidden) {
		$$parent.parent(".s-m-panel-auth-prop").hide();
	} else {
		$$parent.parent(".s-m-panel-auth-prop").show();
	}
}

exports.properties = _properties;
exports.err = _err;
exports.createMarkupRadio = _createMarkupRadio;
exports.refreshMarkupRadio = _refreshMarkupRadio;
exports.createMarkupCheckboxes = _createMarkupCheckboxes;
exports.refreshMarkupCheckboxes = _refreshMarkupCheckboxes;
exports.getValueOrDefault = _getValueOrDefault;
exports.setValue = _setValue;
exports.notifyChangePropUI = _notifyChangePropUI;
exports.initProperties = _initProperties;
exports.initProperty = _initProperty;
exports.getModuleProperties = function($$elmt, controller, props, sel, data) {
	// Always add JSON editting and proto display
	props.push(_properties.SEPARATOR);
	if ($$elmt.hasClass("s-m-page")) {
		props.push(_properties.JSON);
	}
	if (data && data.control && data.control.prototype) {
		props.push(_properties.PROTOTYPE);
	}
};
exports.initModuleProperties = function(dest) {
	exports.initProperties(_properties, dest);
};