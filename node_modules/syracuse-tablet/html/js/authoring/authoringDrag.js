"use strict";

var authHelpers = require('syracuse-tablet/html/js/authoring/authoringHelpers');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');

/*
	Drag and drop helpers
*/

/*
 * Gets the control/drag element a dragged DOM element belongs to
 * (The DOM element on drag start can be a child of the actual draggable, this is why we need to go up the tree)
 */
exports.getClosestDragElement = function($$source) {
	var $$draggable = $$source.closest(".ui-draggable");
	return $$draggable;
};

exports.dropDrop = function($$drop, $$helper, $$draggable) {
	var data = _getDropData($$drop, $$draggable);
	if (!_isDropAllowed(data)) {
		return;
	}

	if (data.action === "add_layout") {
		_addLayout(data);
	} else if (data.action == "add_bind") {
		_addBind(data);
	} else if (data.action == "move_ctrl") {
		_moveControl(data);
	}

};

exports.dropAccept = function($$drop, $$draggable) {
	var data = _getDropData($$drop, $$draggable);
	return _isDropAllowed(data);
};

exports.dropOver = function($$drop, $$helper, $$target) {

};

function _isDropAllowed(data) {
	if (!data.toType) {
		return false;
	}

	// Check layout constraints
	if (data.action === "add_layout") {
		if (data.bind == "stack") {
			if (data.toType !== "stack" && data.toType !== "cell" && data.toType !== "tile") {
				return false;
			}
		} else if (data.bind == "group") {
			if (data.toType !== "stack" && data.toType !== "hub") {
				return false;
			}
		} else if (data.bind == "tile") {
			if (data.toType !== "row" && data.toType !== "hubGroup") {
				return false;
			}
		}

		return true;
	}

	// Check adding of controls
	if (data.action === "add_bind") {
		// Controlls in a vignette may only be added to the vignette the control belongs too but not to another one
		if (data.parent != data.toParent) {
			return false;
		}
		// Controls may only be added in a stack
		if (data.toType === "stack" || data.toType === "tile" || data.toType === "cell") {
			return true;
		}

	}
	if (data.action === "move") {
		/* 
		 * Move of control
		 */
		if (data.ctrl && !data.ctrl.isLayout()) {
			data.action = "move_ctrl";
			if (data.parent != data.toParent) {
				return false;
			}

			var targetLayout;
			var container;
			if (data.toCtrl && data.toCtrl.isLayout()) {
				container = data.toCtrl;
				targetLayout = data.toType;
			} else if (data.toCtrl) {
				container = data.toCtrl.parent;
				targetLayout = container.$type;
			}

			data.toContainer = container;
			data.moveBeforeCtrl = data.toCtrl;

			// Controls may only be added in a stack
			if (targetLayout === "stack" || targetLayout === "tile" || targetLayout === "cell") {
				return true;
			}
		}
	}
	return false;
}

function _getDropData($$drop, $$draggable) {
	var action;
	var fromId;
	var toId;
	var bind;
	var parent;

	action = $$draggable.attr("data-auth-drag-action");
	switch (action) {
		case "move":
			fromId = $$draggable.attr("data-ctrl-id");
			break;
		case "add_bind":
			bind = $$draggable.attr("data-auth-bind");
			parent = $$draggable.attr("data-auth-bind-parent");
			parent = parent === "" ? null : parent;
			break;
		case "add_layout":
			bind = $$draggable.attr("data-auth-bind");
			break;
		default:
			// drop from page (events currently disabled)
			action = "move";
			fromId = $$draggable.attr("id");
			break;
	}

	var $$ctrl;

	var ctrl;
	if (fromId && fromId.length > 0) {
		$$ctrl = $("#" + fromId);
		ctrl = authHelpers.findControl($$ctrl);
		var v = ctrl && ctrl.controller.getParentVignette();
		if (v) {
			parent = v.$bind; // Name of the vignette that is bound to the controller of the current element
		}
	}

	// drop control or layout
	toId = $$drop.attr("data-ctrl-id"); // drop inside tree
	if (toId && toId.length > 0) {
		$$ctrl = $("#" + toId);
	} else {
		toId = $$drop.attr("id"); // Drop inside page
		$$ctrl = $$drop;
	}
	var toCtrl = authHelpers.findControl($$ctrl);
	var toParent;
	if (toCtrl) {
		if (toCtrl.controller.isVignette) {
			var v = toCtrl.controller.getParentVignette();
			if (v) {
				toParent = v.$bind; // Name of the vignette that is bound to the controller of the current element
			}
		}
	}
	return {
		action: action, // move, add_bind, add_layout
		bind: bind, // $bind or name of layout in case of add*
		ctrl: ctrl,
		type: ctrl && ctrl.$type, // Type of drag target
		parent: parent, // parent $bind (e.g. vignette name)
		fromId: fromId, // ctrlId (when dragging existing ctrl)
		toId: toId, // ctrlId of drop target
		toType: toCtrl && toCtrl.$type, // Type of drop target
		toCtrl: toCtrl,
		toParent: toParent
	};
}

function _addLayout(data) {
	var layoutType = "stack";

	switch (data.bind) {
		case "group":
			if (data.toType == "hub") {
				layoutType = "hubGroup";
			} else {
				layoutType = "row";
			}
			break;
		case "tile":
			if (data.toType == "hubGroup") {
				layoutType = "tile";
			} else {
				layoutType = "cell";
			}
			break;
		case "stack":
			layoutType = "stack";
			break;
	}

	var article = {
		$layoutType: layoutType
	};

	// Create new layout node
	ctrlFactory.createLayout(data.toCtrl.controller, data.toCtrl, article, {});
	notifications.publish(["sm.auth.change.item.prop.ui"]);
}

function _addBind(data) {
	var article = {
		$bind: data.bind
	};
	ctrlFactory.createBindControl(data.toCtrl.controller, data.toCtrl, article, {});
	notifications.publish(["sm.auth.change.item.prop.ui"]);
}

function _moveControl(data) {
	data.toContainer.moveChildBefore(data.ctrl, data.moveBeforeCtrl);
	notifications.publish(["sm.auth.change.item.prop.ui"]);
}