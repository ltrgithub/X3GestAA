"use strict";

var authHelpers = require('syracuse-tablet/html/js/authoring/authoringHelpers');
var ctrlFactory = require('syracuse-tablet/html/js/controls/ctrlFactory');
var notifications = require('syracuse-tablet/html/js/helpers/notifications');
var locale = require('syracuse-tablet/html/js/helpers/locale');
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var globals = require('syracuse-tablet/html/js/helpers/globals');

var _$$lastElements = [];


/*
	Drag and drop helpers
*/

/*
 * Gets the control/drag element a dragged DOM element belongs to
 * (The DOM element on drag start can be a child of the actual draggable, this is why we need to go up the tree)
 */
exports.getClosestDragElement = function($$source) {
	var $$draggable = $$source.closest(".ui-draggable");
	return $$draggable;
};

exports.dropDrop = function($$drop, $$helper, $$draggable) {
	// We always drop to the highest element in the stack which belongs to the drop description
	// visible in the UI
	$$drop = _$$lastElements.length > 0 && _$$lastElements[_$$lastElements.length - 1];
	_$$lastElements = []; // There may be more drop events, we ignore all subsequent ones
	if (!$$drop) {
		return;
	}

	var data = _getDropData($$drop, $$draggable);
	if (!_isDropAllowed(data)) {
		return;
	}

	if (data.action === "add_layout") {
		_addLayout(data);
	} else if (data.action == "add_bind") {
		_addBind(data);
	} else if (data.action == "move_ctrl") {
		_moveControl(data);
	} else if (data.action == "move_layout") {
		_moveLayout(data);
	}

};

exports.dropAccept = function($$drop, $$draggable) {
	var data = _getDropData($$drop, $$draggable);
	return true;
};

exports.dropOut = function($$drop, $$helper, $$draggable) {
	$$drop.removeClass("s-m-top-stack");
	var $$top = _updateHoverStack();
	if ($$top) {
		_updateDragHelper($$top, $$helper, $$draggable);
	}
};

exports.dropOver = function($$drop, $$helper, $$draggable) {
	_$$lastElements.push($$drop);
	_updateHoverStack();
	_updateDragHelper($$drop, $$helper, $$draggable);
};

function _updateHoverStack() {
	var newList = [];
	$.each(_$$lastElements, function(idx, $$last) {
		$$last.removeClass("s-m-top-stack");
		if ($$last.hasClass("s-m-auth-hover-droptarget")) {
			newList.push($$last);
		}
	});
	var $$last = newList[newList.length - 1];
	if ($$last) {
		$$last.addClass("s-m-top-stack");
	}
	_$$lastElements = newList;
	return $$last;
}

function _updateDragHelper($$drop, $$helper, $$draggable) {
	var data = _getDropData($$drop, $$draggable);
	var allowed = _isDropAllowed(data);

	$$helper.removeClass("drop_move");
	$$helper.removeClass("drop_add");
	$$helper.removeClass("drop_disabled");
	if (!allowed) {
		$$helper.addClass("drop_disabled");
		$('#s-m-auth-drag-helper-desc-id', $$helper).text("");
		return;
	}

	var desc = "";
	var title;

	if (data.moveBeforeCtrl) {
		title = _controlTitle(data.moveBeforeCtrl);
	} else {
		title = _controlTitle(data.toContainer);
	}

	switch (data.action) {
		case "add_layout":
			if (data.moveBeforeCtrl) {
				desc = locale.text("auth.drag.add.before", [title]);
			} else {
				desc = locale.text("auth.drag.add.intoend", [title]);
			}
			$$helper.addClass("drop_add");
			break;
		case "add_bind":
			if (data.moveBeforeCtrl) {
				desc = locale.text("auth.drag.add.before", [title]);
			} else {
				desc = locale.text("auth.drag.add.intoend", [title]);
			}
			$$helper.addClass("drop_add");
			break;
		case "move_ctrl":
			if (data.moveBeforeCtrl) {
				desc = locale.text("auth.drag.move.before", [title]);
			} else {
				desc = locale.text("auth.drag.move.intoend", [title]);
			}
			$$helper.addClass("drop_move");
			break;
		case "move_layout":
			if (data.moveBeforeCtrl) {
				desc = locale.text("auth.drag.move.before", [title]);
			} else {
				desc = locale.text("auth.drag.move.intoend", [title]);
			}
			$$helper.addClass("drop_move");
			break;
	}

	$('#s-m-auth-drag-helper-desc-id', $$helper).text(desc);
}

function _isDropAllowed(data) {
	if (!data.toType) {
		return false;
	}

	var targetLayout;
	var container;

	if (data.ctrl) {
		data.container = data.ctrl.parent;
	}

	if (data.toCtrl && data.toCtrl.isLayout()) {
		container = data.toCtrl;
		targetLayout = data.toType;
	} else if (data.toCtrl) {
		container = data.toCtrl.parent;
		targetLayout = container.$type;
		data.moveBeforeCtrl = data.toCtrl;
	}
	data.toContainer = container;

	// Check layout constraints
	if (data.action === "add_layout") {
		if (data.bind == "stack") {
			if (targetLayout !== "stack" && targetLayout !== "cell" && targetLayout !== "tile") {
				return false;
			}
		} else if (data.bind == "group") {
			if (targetLayout !== "stack" && targetLayout !== "hub") {
				return false;
			}
		} else if (data.bind == "tile") {
			if (targetLayout !== "row" && targetLayout !== "hubGroup" && targetLayout !== "stack" && targetLayout !== "hub") {
				return false;
			}
		}
		return true;
	}

	// Check adding of controls
	if (data.action === "add_bind") {
		// Controlls in a vignette may only be added to the vignette the control belongs too but not to another one
		if (data.parent != data.toParent) {
			return false;
		}
		// Controls may only be added in a stack
		if (targetLayout === "stack" || targetLayout === "tile" || targetLayout === "cell" || targetLayout === "hubGroup") {
			return true;
		}
	}

	if (data.action === "move") {
		/* 
		 * Move of control
		 */
		if (data.ctrl && !data.ctrl.isLayout()) {
			data.action = "move_ctrl";
			if (data.parent != data.toParent) {
				return false;
			}

			// Controls may only be added in a stack
			if (targetLayout === "stack" || targetLayout === "tile" || targetLayout === "cell" || targetLayout === "hubGroup") {
				return true;
			}
		} else if (data.ctrl && data.ctrl.isLayout()) {
			data.action = "move_layout";
			if (data.type == "stack") {
				if (targetLayout !== "stack" && targetLayout !== "cell" && targetLayout !== "tile") {
					return false;
				}
			} else if (data.type == "tile") {
				if (targetLayout !== "hubGroup") {
					return false;
				}
			} else if (data.type == "cell") {
				if (targetLayout !== "row") {
					return false;
				}
			} else if (data.type == "row") {
				if (targetLayout !== "stack" && targetLayout !== "cell" && targetLayout !== "tile") {
					return false;
				}
			} else if (data.type == "hubGroup") {
				if (targetLayout !== "hub") {
					return false;
				}
			}

			// Check drop into self
			var $$dropToChildren = data.toCtrl.$$elmt.closest("#" + data.ctrl.id);
			if ($$dropToChildren.length > 0) { // Drop layout into a children of itself
				return false;
			}

			// Check vignette scope
			var vignetteScopeOk = true;
			var $$fromVignette = data.ctrl.$$elmt.closest(".s-m-control.s-m-vignette");
			var $$toVignette = data.toCtrl.$$elmt.closest(".s-m-control.s-m-vignette");
			if ($$fromVignette.length !== $$toVignette.length) { // From/to vignette to non vignette scope or other way around
				vignetteScopeOk = false;
			} else if ($$toVignette.length === 0) { // No vignettes involved, always ok
				vignetteScopeOk = true;
			} else if ($$fromVignette.length === 1 && $$toVignette.length === 1) { // From vignette to vignette scope
				if ($$fromVignette.attr("id") === $$toVignette.attr("id")) {
					vignetteScopeOk = true; // Same vignette	
				} else {
					vignetteScopeOk = false; // Vignette a -> vignette b = not allowed
				}
			}
			return vignetteScopeOk;
		}
	}
	return false;
}

function _getDropData($$drop, $$draggable) {
	var action;
	var fromId;
	var toId;
	var bind;
	var parent;

	action = $$draggable.attr("data-auth-drag-action");
	switch (action) {
		case "move":
			fromId = $$draggable.attr("data-ctrl-id");
			break;
		case "add_bind":
			bind = $$draggable.attr("data-auth-bind");
			parent = $$draggable.attr("data-auth-bind-parent");
			parent = parent === "" ? null : parent;
			break;
		case "add_layout":
			bind = $$draggable.attr("data-auth-bind");
			break;
		default:
			// drop from page (events currently disabled)
			action = "move";
			fromId = $$draggable.attr("id");
			break;
	}

	var ctrl;
	var $$ctrl;
	if (fromId && fromId.length > 0) {
		$$ctrl = $("#" + fromId);
		ctrl = authHelpers.findControl($$ctrl);
		var v = ctrl && ctrl.controller.getParentVignette();
		if (v) {
			parent = v.$bind; // Name of the vignette that is bound to the controller of the current element
		}
	}

	// drop control or layout
	toId = $$drop.attr("data-ctrl-id"); // drop inside tree
	if (toId && toId.length > 0) {
		$$ctrl = $("#" + toId);
	} else {
		toId = $$drop.attr("id"); // Drop inside page
		$$ctrl = $$drop;
	}

	var toParent;
	var toCtrl = authHelpers.findControl($$ctrl);
	if (toCtrl) {
		if (toCtrl.controller.isVignette) {
			var v = toCtrl.controller.getParentVignette();
			if (v) {
				toParent = v.$bind; // Name of the vignette that is bound to the controller of the current element
			}
		}
	}

	if (!toCtrl && $$ctrl.is(".s-m-page,.s-m-full")) { // Dropping on the page is dropping into the page's root layout container
		toCtrl = globals.getApplication().currentPage.rootLayout;
	}

	return {
		//		$$draggable: $$draggable,	// Debugging
		//		$$drop: $$drop,				// Debugging

		action: action, // move, add_bind, add_layout
		bind: bind, // $bind or name of layout in case of add*
		ctrl: ctrl,
		type: ctrl && ctrl.$type, // Type of drag target
		parent: parent, // parent $bind (e.g. vignette name)
		fromId: fromId, // ctrlId (when dragging existing ctrl)
		toId: toId, // ctrlId of drop target
		toType: toCtrl && toCtrl.$type, // Type of drop target
		toCtrl: toCtrl,
		toParent: toParent
	};
}

function _addLayout(data) {
	var layoutType = "stack";
	var toContainer = data.toContainer;
	var parent;

	switch (data.bind) {
		case "group":
			if (data.toType == "hub") {
				layoutType = "hubGroup";
			} else {
				layoutType = "row";
			}
			break;
		case "tile":
			if (data.toType == "hubGroup") {
				layoutType = "tile";
			} else if (data.toType == "row") {
				layoutType = "cell";
			} else if (data.toType == "stack") {
				parent = ctrlFactory.createLayout(data.toCtrl.controller, toContainer, {
					$layoutType: "row"
				}, {});
				layoutType = "cell";
				toContainer = parent;
			} else if (data.toType == "hub") {
				parent = ctrlFactory.createLayout(data.toCtrl.controller, toContainer, {
					$layoutType: "hubGroup"
				}, {});
				layoutType = "tile";
				toContainer = parent;
			}

			break;
		case "stack":
			layoutType = "stack";
			break;
	}

	var article = {
		$layoutType: layoutType
	};

	// Create new layout node
	var ctrl = ctrlFactory.createLayout(data.toCtrl.controller, toContainer, article, {});

	// Move before desired sibling
	if (data.moveBeforeCtrl) {
		if (parent) { // Handle autoboxing
			data.toContainer.removeChildRef(parent);
			data.toContainer.addChildBefore(parent, data.moveBeforeCtrl);
		} else {
			toContainer.removeChildRef(ctrl);
			toContainer.addChildBefore(ctrl, data.moveBeforeCtrl);
		}
	}

	notifications.publish(["sm.auth.change.item.prop.ui"]);
}

function _addBind(data) {
	var article = {
		$bind: data.bind
	};
	var toContainer = data.toContainer;
	if (data.toType == "hubGroup") {
		var parent = ctrlFactory.createLayout(data.toCtrl.controller, toContainer, {
			$layoutType: "tile"
		}, {});
		toContainer = parent;
	}

	var ctrl = ctrlFactory.createBindControl(data.toCtrl.controller, toContainer, article, {});

	// Move before desired sibling
	if (data.moveBeforeCtrl) {
		data.toContainer.removeChildRef(ctrl);
		data.toContainer.addChildBefore(ctrl, data.moveBeforeCtrl);
	}

	notifications.publish(["sm.auth.change.item.prop.ui"]);
}

function _moveControl(data) {
	data.container.removeChildRef(data.ctrl);
	var toContainer = data.toContainer;
	if (data.toType == "hubGroup") {
		var parent = ctrlFactory.createLayout(data.toCtrl.controller, toContainer, {
			$layoutType: "tile"
		}, {});
		toContainer.removeChildRef(parent);
		toContainer.addChildBefore(parent, data.moveBeforeCtrl);
		parent.addChildBefore(data.ctrl, null);
	} else {
		toContainer.addChildBefore(data.ctrl, data.moveBeforeCtrl);
	}
	notifications.publish(["sm.auth.change.item.prop.ui"]);
}

function _moveLayout(data) {
	data.container.removeChildRef(data.ctrl);
	data.toContainer.addChildBefore(data.ctrl, data.moveBeforeCtrl);
	notifications.publish(["sm.auth.change.item.prop.ui"]);
}

function _controlTitle(ctrl) {
	var title = ctrl.prototype && ctrl.prototype.data("$title");

	if (!title) {
		title = ctrl.$bind;
	} else if (ctrl.$bind) {
		title = title + " (" + ctrl.$bind + ")";
	}

	if (!title) {
		title = ctrl.$type;
	}
	return title;
}