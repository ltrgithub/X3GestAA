"use strict";

/*
	Drag and drop helpers
*/

/*
 * Gets the control/drag element a dragged DOM element belongs to
 * (The DOM element on drag start can be a child of the actual draggable, this is why we need to go up the tree)
 */
exports.getClosestDragElement = function($$source) {
	var $$draggable = $$source.closest(".ui-draggable");
	return $$draggable;
};


exports.dropDrop = function($$drop, $$helper, $$draggable) {
	_isDropAllowed($$drop, $$draggable, $$helper);
};

exports.dropAccept = function($$drop, $$draggable) {
	_isDropAllowed($$drop, $$draggable);
	return true;
};

exports.dropOver = function($$drop, $$helper, $$target) {

};

function _isDropAllowed($$drop, $$draggable, $$helper) {

	var data = _getDropData($$drop, $$draggable, $$helper);
	console.log(data);
}

function _getDropData($$drop, $$draggable, $$helper) {
	var action;
	var fromId;
	var bind;
	var parent;

	if ($$draggable.hasClass("s-m-auth")) {
		// drop from page
		action = "move";
		fromId = $$draggable.attr("id");
	} else {
		action = $$draggable.attr("data-auth-drag-action");
		switch (action) {
			case "move":
				fromId = $$draggable.attr("data-ctrl-id");
				break;
			case "add_bind":
				bind = $$draggable.attr("data-auth-bind");
				parent = $$draggable.attr("data-auth-bind-parent");
				break;
			case "add_layout":
				bind = $$draggable.attr("data-auth-bind");
				break;
		}
	}
	return {
		action: action,
		bind: bind,
		parent: parent,
		fromId: fromId,
	};
}