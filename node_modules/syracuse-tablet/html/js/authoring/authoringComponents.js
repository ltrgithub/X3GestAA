"use strict";
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');


var _templates = {
	genericSlider: '\
		<div class="form-group" {{#if margin}}style="margin-bottom:{{margin}}px;"{{/if}}> \
			<section style="padding-left:10px;padding-right:10px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis">\
				<input id="{{id}}" type="text" data-slider-min="{{min}}" data-slider-max="{{max}}" data-slider-step="{{step}}"  data-slider-value="{{value}}" data-slider-orientation="horizontal" data-slider-tooltip="hide">\
				{{#if displayValue}}<p class="s-m-slider-value">{{#if valText}}{{valText}}{{/if}}{{#unless valText}}{{value}}{{/unless}}</p>{{/if}}\
			</section>\
		</div>',
	flatRadio: '\
		<div class="btn-group" style="margin-bottom:10px;" data-toggle="buttons">\
			{{#each btns}}\
				<label class="btn btn-primary">\
					<input type="radio" autocomplete="off" value="{{key}}">\
					{{label}}\
				</label>\
			{{/each}}\
		</div>',
	select: '\
		<div style="position:relative;{{#if margin}}margin-bottom:{{margin}}px;{{/if}}">\
		  <select class="selectpicker"  data-width="100%">\
		  	{{#each options}}\
		     	<option value="{{$key}}">{{$title}}</option>\
			{{/each}}\
		  </select>\
		</div>',
	actionBtns: '\
		<div style="text-align:center;">\
			<div class="btn-group" role="group" style="margin-bottom:10px;">\
				{{#each btns}}\
					<button type="button" class="btn btn-default" value="{{key}}">{{label}}</button>\
				{{/each}}\
			</div>\
		</div>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};

var _components = {
	"select": function(options, name) {
		if (!options || !options.options || options.options.length === 0 || !options.onChange) return;
		if (options.value == null) {
			options.value = Object.keys(options.options)[0];
		}
		this.name = name || "select";
		this.options = options;
		this.createMarkup = function($$parent) {
			this.$$panel = $(_getHtml("select", {
				options: options.options
			})).appendTo($$parent);
			this.$$select = this.$$panel.find("select");
			this.$$select.selectpicker();
			this.$$select.selectpicker('val', options.value);
			this.$$select.on('change', jsutils.bindFn(this.onChange, this));
			return this.$$panel;
		};
		this.onChange = function(event) {
			this.options.onChange(event, this);
		};
		this.destroyMarkup = function() {
			this.options.onChange = null;
			this.options = null;
			if (this.$$select) {
				this.$$select.off();
				this.$$select.selectpicker('destroy');
				this.$$select = null;
			}
		};
	},
	"flatRadio": function(options, name) {
		this.name = name || "flatRadio";
		this.options = options;
		this.createMarkup = function($$parent) {
			this.$$panel = $(_getHtml("flatRadio", {
				btns: this.options.btns
			})).appendTo($$parent).on('change', "input", this.options.onClick);
			this.$$panel.find('input[value="' + this.options.value + '"]').parent().button('toggle');
			return this.$$panel;
		};
		this.destroyMarkup = function() {
			this.options.onClick = null;
			this.options = null;
			if (this.$$panel) {
				this.$$panel.off();
				this.$$panel = null;
			}
		};
	},
	"actionBtns": function(options, name) {
		this.name = name || "actionBtns";
		this.options = options;
		this.createMarkup = function($$parent) {
			this.$$panel = $(_getHtml("actionBtns", {
				btns: this.options.btns
			})).on('click', this.options.onClick).appendTo($$parent);
			return this.$$panel;
		};
		this.destroyMarkup = function() {
			this.options.onClick = null;
			this.options = null;
			if (this.$$panel) {
				this.$$panel.off();
				this.$$panel = null;
			}
		};
	},
	/**
	 * options.slideHandler(value, this) 	optional - returns the text to display
	 * options.stopHandler(value, this) 	optional
	 * options.startHandler(value, this)	optional
	 *
	 */
	"genericSlider": function(options, name) {
		this.name = name || "genericSlider";
		this.options = options;
		this.label = options.label;
		this.createMarkup = function($$parent) {
			var displayValue = this.options.displayValue || this.options.slideHandler != null;
			this.$$panel = $(_getHtml("genericSlider", {
				value: this.options.value,
				min: this.options.min,
				max: this.options.max,
				step: this.options.step || 1,
				valText: this.options.value != null ? this.options.slideHandler ? this.options.slideHandler(this.options.value, this) : this.options.value : "",
				displayValue: displayValue,
				margin: this.options.margin + ""
			}));
			$$parent.append(this.$$panel);
			this.$$textValue = $(".s-m-slider-value", this.$$panel);
			this.$$slider = $("input", this.$$panel).slider({});
			if (displayValue) {
				this.$$slider.on("slide", jsutils.bindFn(this.onSlider, this, "slide"));
			}
			if (this.options.stopHandler) {
				this.$$slider.on("slideStop", jsutils.bindFn(this.onSlider, this, "stop"));
			}
			if (this.options.startHandler) {
				this.$$slider.on("slideStart", jsutils.bindFn(this.onSlider, this, "start"));
			}
			if (displayValue === "above") {
				this.$$panel.find(".s-m-slider-value").detach().prependTo(this.$$panel.find("section"));
			}

		};

		this.destroyMarkup = function() {
			this.options.startHandler = null;
			this.options.stopHandler = null;
			this.options.slideHandler = null;
			this.options = null;
			if (this.$$slider) {
				this.$$slider.off();
				this.$$slider.slider('destroy');
				this.$$slider = null;
			}
			if (this.$$panel) {
				this.$$panel.remove();
			}
		};

		this.onSlider = function(slideEvt, action) {
			if (action === "start") {
				this.options.startHandler(slideEvt.value, this);
				return;
			}
			if (action === "slide") {
				this.$$textValue.text(this.options.slideHandler ? this.options.slideHandler(slideEvt.value, this) : slideEvt.value);
				return;
			}
			if (action === "stop") {
				if (this.options.value != slideEvt.value) {
					this.options.value = slideEvt.value;
					this.options.stopHandler(slideEvt.value, this);
				}
				return;
			}
		};

		this.update = function(opts) {
			if (!opts) return;
			if (opts.min != null) this.$$slider.slider('setAttribute', 'min', opts.min);
			if (opts.max != null) this.$$slider.slider('setAttribute', 'max', opts.max);
			if (opts.step != null) this.$$slider.slider('setAttribute', 'step', opts.step);
			if (opts.value != null) {
				this.$$slider.slider('setValue', opts.value);
				this.$$textValue.text(this.options.slideHandler ? this.options.slideHandler(opts.value) : opts.value);
			}
		};
	}
};
/**
 * type:	genericSlider, flatRadio, select, actionBtns
 * opts:	depends on component
 * name:	name of property / optional
 */
exports.newComponent = function(type, opts, name) {
	var f = _components[type];
	if (!f) throw new Error("Unknown authoring component [" + type + "]");
	return new f(opts, name);
};