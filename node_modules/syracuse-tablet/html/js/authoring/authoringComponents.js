"use strict";
var jsutils = require('syracuse-tablet/html/js/helpers/jsutils');
var locale = require('syracuse-tablet/html/js/helpers/locale');


var _templates = {
	genericSlider: '\
		<div class="form-group" {{#if margin}}style="margin-bottom:{{margin}}px;"{{/if}}> \
			<section style="padding-left:10px;padding-right:10px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis">\
				<input id="{{id}}" type="text" data-slider-min="{{min}}" data-slider-max="{{max}}" data-slider-step="{{step}}"  data-slider-value="{{value}}" data-slider-orientation="horizontal" data-slider-tooltip="hide">\
				{{#if displayValue}}<p class="s-m-slider-value">{{#if valText}}{{valText}}{{/if}}{{#unless valText}}{{value}}{{/unless}}</p>{{/if}}\
			</section>\
		</div>',
	flatRadio: '\
		<div class="btn-group" style="margin-bottom:10px;" data-toggle="buttons">\
			{{#each btns}}\
				<label class="btn btn-primary">\
					<input type="radio" autocomplete="off" value="{{value}}">\
					{{title}}\
				</label>\
			{{/each}}\
		</div>',
	select: '\
		<div style="position:relative;{{#if margin}}margin-bottom:{{margin}}px;{{/if}}">\
		  <select class="selectpicker {{css}}"  data-width="100%">\
		  	{{#each options}}\
		     	<option value="{{value}}">{{title}}</option>\
			{{/each}}\
		  </select>\
		</div>',
	actionBtns: '\
		<div style="text-align:center;">\
			<div class="btn-group" role="group" style="margin-bottom:10px;">\
				{{#each btns}}\
					<button type="button" class="btn btn-default" value="{{value}}">{{title}}</button>\
				{{/each}}\
			</div>\
		</div>',
	colorPicker: '\
		<input type="text" {{#if id}}id="{{id}}"{{/if}} class="form-control {{css}}""></input>',
	editableList: '\
		<section class = "auth-editableList  {{css}}" {{#if id}}id="{{id}}"{{/if}} >\
			<ul class="list-group auth-editableList"></ul>\
			<div class="authMsg"></div>\
			<div class="btn-group btn-group-justified" role="group">\
				<a type="button" class="btn btn-default authLstAct" data-action="append">\
					<i class="fa fa-plus"></i>\
					<span>{{addTitle}}</span>\
				</a>\
				<a style="display:none" type="button" class="btn btn-default authLstAct" data-action="validate">\
					<i class="fa fa-check"></i>\
					<span>{{validateTitle}}</span>\
				</a>\
				<a style="display:none" type="button" class="btn btn-default authLstAct" data-action="cancel">\
					<i class="fa fa-times"></i>\
					<span>{{cancelTitle}}</span>\
				</a>\
			</div>\
		</section>',
	editableListItem: '\
		<li class="list-group-item {{css}}" data-params="{{id}}">\
			<span>\
				<span>{{#if title}}{{title}}{{/if}}{{#if titleHtml}}{{{titleHtml}}}{{/if}}</span>\
				<span class="fa fa-pencil" data-action="editItem"></span>\
				<span class="fa fa-times" data-action="deleteItem"></span>\
			</span>\
		</li>',
	colorPalettePicker: '\
		<section class="auth-colorPalettePicker {{dropDirection}}">\
			<div class="input-group" data-toggle="dropdown" aria-expanded="false">\
				<span class="form-control auth-paletteColor"></span>\
				<span class="input-group-addon"><div class="fa fa-times"></div></span>\
			</div>\
			<div class="dropdown-menu" style="width: 100%;width: 100%;padding-left: 5px;padding-right: 5px;">\
				<div class="auth-paletteRoot" data-toggle="buttons" style="width: 100%;white-space: normal;" >\
				</div>\
		  	</div>\
		</section>',
	colorPaletteItem: '\
		<div class="auth-paletteItem {{css}}" data-id="{{id}}" data-name="{{name}}" data-css="{{css}}">\
		</div>',
	iconPalettePicker: '\
		<section class="auth-iconPalettePicker {{dropDirection}}">\
			<div class="input-group" data-toggle="dropdown" aria-expanded="false">\
				<span class="form-control auth-paletteIcon"></span>\
				<span class="input-group-addon"><div class="fa fa-times"></div></span>\
			</div>\
			<div class="dropdown-menu">\
				<div class="auth-paletteRoot" data-toggle="buttons" style="width: 100%;white-space: normal;" >\
				</div>\
		  	</div>\
		</section>',
	iconPaletteItem: '\
		<div class="auth-paletteItem {{css}}" data-params="{{name}}" data-css="{{css}}">\
		</div>',
	switcher: '\
		 <input {{#if id}}id="{{id}}"{{/if}} type="checkbox">',
	checkboxList: ' \
		<section class="auth-checkboxList {{css}}" {{#if id}}id="{{id}}"{{/if}}/>',
	checkboxListContent: ' \
		<div class="btn-group s-m-list">\
			{{#each list}} \
				<div class="s-m-item btn-group" data-id = "{{id}}"> \
					<label> \
						<input type="checkbox" {{#if checked}}checked{{/if}}>{{label}} \
					</label> \
				</div> \
			{{/each}}\
		</div>'
};

var _getHtml = function(name, ctx) {
	var key = name + "compiled";
	var tmpl = _templates[key];
	if (!tmpl) {
		tmpl = _templates[name];
		tmpl = _templates[key] = Handlebars.compile(tmpl);
	}
	return tmpl(ctx);
};

var _components = {
	"editableList": function(options, name) {
		options = options || {};
		this.options = options;
		this.name = name || "editableList";
		this.createMarkup = function($$parent) {
			this.$$panel = $(_getHtml("editableList", {
				id: options.id,
				css: options.css || "",
				addTitle: options.appendTitle || locale.text("append"),
				validateTitle: options.validateTitle || locale.text("validate"),
				cancelTitle: options.cancelTitle || locale.text("cancel")
			})).appendTo($$parent);
			if (options.isHidden === true) {
				this.hide();
			}
			if (this.options.doAction) {
				this.$$panel.on('click', "[data-action]", jsutils.bindFn(this.onClick, this));
			}
			this.$$list = this.$$panel.find("ul");
			return this.$$panel;
		};
		this.onClick = function(event) {
			var $$target = $(event.target).closest("[data-action]");
			var action = $$target.attr("data-action");
			var id;
			if (action === "append" || action === "cancel") {
				id = "";
			} else if (action === "editItem" || action === "deleteItem") {
				id = $$target.closest("[data-params]").attr("data-params") || "";
			} else if (action === "validate") {
				id = $$target.attr("data-params") || "";
			}
			var done = this.options.doAction(action, id, this);
			if (done == true) {
				if (action === "deleteItem") {
					$$target.closest("li").off().remove();
				} else if (action === "editItem" || action === "append") {
					this.toggleEditStatus(true, id);
				} else if (action === "validate" || action === "cancel") {
					this.toggleEditStatus(false);
				}
			}
		};
		this.insertRecords = function(records) {
			if (!records || !this.$$list) return;
			if ($.isPlainObject(records)) records = [records];
			if (!Array.isArray(records)) return;
			var self = this;
			records.forEach(function(record) {
				if (!record || !record.id) return;
				var $$newRec = $(_getHtml("editableListItem", {
					id: record.id,
					css: record.css || "",
					titleHtml: record.titleHtml,
					title: record.title
				}));
				var $$oldRec = self.$$list.find('[data-params="' + record.id + '"]');
				if ($$oldRec.length > 0) {
					$$oldRec.before($$newRec);
					$$oldRec.remove();
				} else {
					$$newRec.appendTo(self.$$list);
				}
			});
		};
		this.destroyMarkup = function() {
			this.options = null;
			if (this.$$list) {
				this.$$list.off();
				this.$$list = null;
			}
			this.$$panel = null;
		};
		this.clear = function() {
			if (!this.$$list) return;
			this.$$list.find("li").remove();
		};
		this.toggleEditStatus = function(editMode, recordId) {
			if (!this.$$panel) return;
			this.$$panel.find('[data-action="append"]').toggle(editMode !== true);
			this.$$panel.find('[data-action="validate"]').toggle(editMode === true).attr("data-params", editMode === true ? recordId : "");
			this.$$panel.find('[data-action="cancel"]').toggle(editMode === true);
		};
		this.disableAppendBtn = function(disabled) {
			this.$$panel.find('[data-action="append"]').attr("disabled", disabled === true);
		};
		/**
		 * type info/warning/error
		 */
		this.toggleMessage = function(msgText, type) {
			if (!this.$$panel) return;
			var $$msg = this.$$panel.find('.authMsg');
			$$msg.empty().removeClass();
			if (msgText && msgText.trim().length > 0) {
				$$msg.text(msgText);
				if (type) {
					$$msg.addClass("s-m-" + type);
				}
			}
			$$msg.addClass("authMsg");
		};
	},
	"colorPicker": function(options, name) {
		options = options || {};
		this.options = options;
		this.name = name || "colorPicker";
		this.createMarkup = function($$parent) {
			this.$$picker = $(_getHtml("colorPicker", {
				id: options.id,
				css: options.css || "",
			})).appendTo($$parent);
			if (options.isHidden === true) {
				this.$$picker.hide();
			}
			this.$$picker.minicolors({
				control: options.control || "hue",
				defaultValue: options.value || '',
				inline: options.inline === true,
				letterCase: options.letterCase || 'lowercase',
				opacity: options.opacity === true,
				position: options.position || 'top left',
				theme: 'bootstrap',
				change: options.onChange ? jsutils.bindFn(this.onChange, this) : null
			});
			this.$$panel = this.$$picker;
			return this.$$panel;
		};
		this.onChange = function(event) {
			this.options.onChange(event, this);
		};
		this.destroyMarkup = function() {
			this.options.onChange = null;
			this.options = null;
			if (this.$$picker) {
				this.$$picker.minicolors('destroy');
				this.$$picker = null;
			}
		};
		this.getValue = function(type) {
			if (!this.$$picker) return;
			var meth;
			if (type === "rgbObject" || type === "rgbString" || type === "rgbaString") {
				meth = type;
			} else {
				meth = "value";
			}
			return this.$$picker.minicolors(meth);
		};
		this.setValue = function(valueHexa) {
			if (!this.$$picker) return;
			return this.$$picker.minicolors("value", valueHexa);
		};
	},
	"colorPalettePicker": function(options, name) {
		options = options || {};
		this.options = options;
		this.name = name || "colorPalettePicker";
		this.createMarkup = function($$parent) {
			var css = options.css || "";
			this.$$panel = $(_getHtml("colorPalettePicker", {
				id: options.id,
				css: css,
				dropDirection: options.dropUp === true ? "dropup" : "dropdown"
			})).appendTo($$parent);
			this.$$rootPalette = this.$$panel.find(".auth-paletteRoot");
			this.$$input = this.$$panel.find(".auth-paletteColor");
			this.$$clearBtn = this.$$panel.find(".input-group-addon").on('click', jsutils.bindFn(this.onClear, this));
			this.$$rootPalette.on('click', '[data-id]', jsutils.bindFn(this.onSelectColor, this));
			if (options.isHidden === true) {
				this.$$panel.hide();
			}
			if (options.palette) {
				this.updatePalette(options.palette);
			}
			this.setValue(options.color);
			return this.$$panel;
		};
		this.updatePalette = function(palette) {
			if (!palette) return;
			var html = [];
			palette.forEach(function(item) {
				if (item.items) {
					if (item.title) {
						html.push('<div class ="authPaletteSection">' + item.title + '</div>');
					}
					item.items.forEach(function(subItem) {
						subItem.name = subItem.name || subItem.id;
						html.push(_getHtml("colorPaletteItem", subItem));
					});
				} else {
					html.push(_getHtml("colorPaletteItem", item));
				}
			});
			this.$$rootPalette.html(html.join(''));
		};
		this.onClear = function(event) {
			if (!this.$$panel.is(".open")) {
				event.stopPropagation();
				this.setValue(null);
				if (this.options.onSelectColor) {
					this.options.onSelectColor(null);
				}
			}
		};
		this.onSelectColor = function(event) {
			var $$t = $(event.target);
			var value = {
				id: $$t.attr("data-id"),
				name: $$t.attr("data-name"),
				css: $$t.attr("data-css"),
				bgColor: $$t.css("background-color"),
				color: $$t.css("color")
			};
			this.setValue(value);
			if (this.options.onSelectColor) {
				this.options.onSelectColor(value);
			}
		};
		this.destroyMarkup = function() {
			if (this.$$rootPalette) {
				this.$$rootPalette.off();
				this.$$rootPalette = null;
			}
			this.options = null;
			this.$$clearBtn.off();
			this.$$clearBtn = this.$$input = this.$$panel = null;
		};
		this.getValue = function() {
			var $$selected = this.$$panel.find(".auth-paletteItem.current");
			if ($$selected.length == 0) return null;
			// Returns color and background-color in case the caller can't use css
			return {
				css: $$selected.attr("data-css") || "",
				name: $$selected.attr("data-name") || "",
				id: $$selected.attr("data-id") || "",
				bgColor: $$selected.css("background-color"),
				color: $$selected.css("color")
			};
		};
		this.setValue = function(color) {
			this.$$panel.find(".auth-paletteItem.current").removeClass("current");
			if (color) {
				this.$$panel.find('[data-id="' + color.id + '"]').addClass("current");
			}
			this.$$input.removeClass().addClass("form-control").text(color ? color.name : locale.text("auth.components.palette.nocolor"));
			if (color) {
				this.$$input.addClass(color.css);
			}
		};
	},
	"iconPalettePicker": function(options, name) {
		options = options || {};
		this.options = options;
		this.name = name || "iconPalettePicker";
		this.createMarkup = function($$parent) {
			var css = options.css || "";
			this.$$panel = $(_getHtml("iconPalettePicker", {
				id: options.id,
				css: css,
				dropDirection: options.dropUp === true ? "dropup" : "dropdown"
			})).appendTo($$parent);
			this.$$rootPalette = this.$$panel.find(".auth-paletteRoot");
			this.$$input = this.$$panel.find(".auth-paletteIcon");
			this.$$clearBtn = this.$$panel.find(".input-group-addon").on('click', jsutils.bindFn(this.onClear, this));
			this.$$rootPalette.on('click', '[data-params]', jsutils.bindFn(this.onSelectIcon, this));
			if (options.isHidden === true) {
				this.$$panel.hide();
			}
			if (options.palette) {
				this.updatePalette(options.palette);
			}
			this.setValue(options.icon);
			return this.$$panel;
		};
		this.updatePalette = function(palette) {
			if (!palette) return;
			var html = [];
			palette.forEach(function(item) {
				html.push(_getHtml("iconPaletteItem", item));
			});
			this.$$rootPalette.html(html.join(''));
		};
		this.onClear = function(event) {
			if (!this.$$panel.is(".open")) {
				event.stopPropagation();
				this.setValue(null);
			}
		};
		this.onSelectIcon = function(event) {
			var $$t = $(event.target);
			var old = this.getValue();
			var value = {
				name: $$t.attr("data-params"),
				css: $$t.attr("data-css")
			};
			if (old && old.name == value.name && old.css == value.css) return;
			this.setValue(value);
			if (this.options.onSelectIcon) {
				this.options.onSelectIcon(value);
			}
		};
		this.destroyMarkup = function() {
			if (this.$$rootPalette) {
				this.$$rootPalette.off();
				this.$$rootPalette = null;
			}
			this.options = null;
			this.$$clearBtn.off();
			this.$$clearBtn = this.$$input = this.$$panel = null;
		};
		this.getValue = function() {
			var $$selected = this.$$panel.find(".auth-paletteItem.current");
			if ($$selected.length == 0) return null;
			return {
				css: $$selected.attr("data-css") || "",
				name: $$selected.attr("data-params") || ""
			};
		};
		this.setValue = function(icon) {
			this.$$panel.find(".auth-paletteItem.current").removeClass("current");
			if (icon) {
				this.$$panel.find('[data-params="' + icon.name + '"]').addClass("current");
			}
			this.$$input.removeClass().addClass("form-control").empty();
			if (icon) {
				this.$$input.html('<div class="iconIcon ' + icon.css + '"></div><div class="iconName">' + icon.name + '</div>');
			} else {
				this.$$input.text(locale.text("auth.components.palette.noicon"));
			}
		};
	},
	"select": function(options, name) {
		options = options || {};
		if (!options.onChange) throw new Error("select component - onChange is mandatory");
		// Allows empty option because we can use update method
		options.options = options.options || [];
		if (options.value == null) {
			options.value = Object.keys(options.options)[0];
		}
		this.name = name || "select";
		this.options = options;
		this.createMarkup = function($$parent) {
			this.$$panel = $(_getHtml("select", {
				options: options.options || [],
				css: options.css || ""
			})).appendTo($$parent);
			this.$$select = this.$$panel.find("select");
			this.$$select.selectpicker();
			this.$$select.selectpicker('val', options.value);
			this.$$select.on('change', jsutils.bindFn(this.onChange, this));
			if (options.isHidden === true) {
				this.$$select.selectpicker('hide');
			}
			return this.$$panel;
		};
		this.onChange = function(event) {
			this.options.onChange(event, this);
		};
		this.destroyMarkup = function() {
			this.options.onChange = null;
			this.options = null;
			if (this.$$select) {
				this.$$select.off();
				this.$$select.selectpicker('destroy');
				this.$$select = null;
			}
		};
		this.getValue = function() {
			if (!this.$$select) return;
			return this.$$select.selectpicker('val');
		};
		this.setValue = function(value) {
			if (!this.$$select) return;
			return this.$$select.selectpicker('val', value);
		};
		this.update = function(selectOpts, defValue) {
			if (!this.$$select) return;
			selectOpts = selectOpts || [];
			this.$$select.find("option").remove();
			var self = this;
			selectOpts.forEach(function(v, idx) {
				self.$$select.append('<option value="' + v.value + '">' + v.title + '</option>');
			});
			if (defValue == null && selectOpts.length > 0) {
				defValue = selectOpts[0].value;
			}
			if (defValue != null) {
				this.$$select.selectpicker('val', defValue);
			}
			this.$$select.selectpicker('refresh');
		};
		this.clear = function() {
			this.update(null);
		};
	},
	"flatRadio": function(options, name) {
		this.name = name || "flatRadio";
		this.options = options;
		this.createMarkup = function($$parent) {
			this.$$panel = $(_getHtml("flatRadio", {
				btns: this.options.btns
			})).appendTo($$parent).on('change', "input", this.options.onClick);
			this.$$panel.find('input[value="' + this.options.value + '"]').parent().button('toggle');
			return this.$$panel;
		};
		this.destroyMarkup = function() {
			this.options.onClick = null;
			this.options = null;
			if (this.$$panel) {
				this.$$panel.off();
				this.$$panel = null;
			}
		};
	},
	"switcher": function(options, name) {
		this.name = name || "switcher";
		this.options = options;
		this.createMarkup = function($$parent) {
			this.$$panel = $(_getHtml("switcher", {
				id: this.options.id
			})).appendTo($$parent);
			this.setValue(this.options.checked);
			this.$$panel.bootstrapSwitch('onText', this.options.onText || locale.text("auth.switcher.onText"));
			this.$$panel.bootstrapSwitch('offText', this.options.offText || locale.text("auth.switcher.offText"));
			this.$$panel.bootstrapSwitch('size', this.options.size || "small");
			this.$$panel.bootstrapSwitch('onColor', this.options.onColor || "default");
			this.$$panel.bootstrapSwitch('offColor', this.options.offColor || "default");
			if (this.options.onSwitchChange) {
				this.$$panel.bootstrapSwitch('onSwitchChange', jsutils.bindFn(this.onSwitchChange, this));
			}
			return this.$$panel;
		};
		this.onSwitchChange = function(event, state) {
			this.options.onSwitchChange(event, state);
		};
		this.destroyMarkup = function() {
			this.options = null;
			if (this.$$panel) {
				this.$$panel.bootstrapSwitch('destroy');
				this.$$panel = null;
			}
		};
		this.getValue = function(value) {
			if (!this.$$panel) return;
			return this.$$panel.bootstrapSwitch('state');
		};
		this.setValue = function(value) {
			if (!this.$$panel) return;
			this.$$panel.bootstrapSwitch('state', value === true, true);
		};
	},
	"actionBtns": function(options, name) {
		this.name = name || "actionBtns";
		this.options = options;
		this.createMarkup = function($$parent) {
			this.$$panel = $(_getHtml("actionBtns", {
				btns: this.options.btns
			})).on('click', this.options.onClick).appendTo($$parent);
			return this.$$panel;
		};
		this.destroyMarkup = function() {
			this.options.onClick = null;
			this.options = null;
			if (this.$$panel) {
				this.$$panel.off();
				this.$$panel = null;
			}
		};
	},
	/**
	 * options.slideHandler(value, this) 	optional - returns the text to display
	 * options.stopHandler(value, this) 	optional
	 * options.startHandler(value, this)	optional
	 *
	 */
	"genericSlider": function(options, name) {
		this.name = name || "genericSlider";
		this.options = options;
		this.label = options.label;
		this.createMarkup = function($$parent) {
			var displayValue = this.options.displayValue || this.options.slideHandler != null;
			this.$$panel = $(_getHtml("genericSlider", {
				value: this.options.value,
				min: this.options.min,
				max: this.options.max,
				step: this.options.step || 1,
				valText: this.options.value != null ? this.options.slideHandler ? this.options.slideHandler(this.options.value, this) : this.options.value : "",
				displayValue: displayValue,
				margin: this.options.margin + ""
			}));
			$$parent.append(this.$$panel);
			this.$$textValue = $(".s-m-slider-value", this.$$panel);
			this.$$slider = $("input", this.$$panel).slider({});
			if (displayValue) {
				this.$$slider.on("slide", jsutils.bindFn(this.onSlider, this, "slide"));
			}
			if (this.options.stopHandler) {
				this.$$slider.on("slideStop", jsutils.bindFn(this.onSlider, this, "stop"));
			}
			if (this.options.startHandler) {
				this.$$slider.on("slideStart", jsutils.bindFn(this.onSlider, this, "start"));
			}
			if (displayValue === "above") {
				this.$$panel.find(".s-m-slider-value").detach().prependTo(this.$$panel.find("section"));
			}

		};

		this.destroyMarkup = function() {
			this.options.startHandler = null;
			this.options.stopHandler = null;
			this.options.slideHandler = null;
			this.options = null;
			if (this.$$slider) {
				this.$$slider.off();
				this.$$slider.slider('destroy');
				this.$$slider = null;
			}
			if (this.$$panel) {
				this.$$panel.remove();
			}
		};

		this.onSlider = function(slideEvt, action) {
			if (action === "start") {
				this.options.startHandler(slideEvt.value, this);
				return;
			}
			if (action === "slide") {
				this.$$textValue.text(this.options.slideHandler ? this.options.slideHandler(slideEvt.value, this) : slideEvt.value);
				return;
			}
			if (action === "stop") {
				if (this.options.value != slideEvt.value) {
					this.options.value = slideEvt.value;
					this.options.stopHandler(slideEvt.value, this);
				}
				return;
			}
		};

		this.update = function(opts) {
			if (!opts) return;
			if (opts.min != null) this.$$slider.slider('setAttribute', 'min', opts.min);
			if (opts.max != null) this.$$slider.slider('setAttribute', 'max', opts.max);
			if (opts.step != null) this.$$slider.slider('setAttribute', 'step', opts.step);
			if (opts.value != null) {
				this.$$slider.slider('setValue', opts.value);
				this.$$textValue.text(this.options.slideHandler ? this.options.slideHandler(opts.value) : opts.value);
			}
		};
	},
	/**
	 * lis:[{label, checked}]
	 */
	"checkboxList": function(options, name) {
		options = options || {};
		this.options = options;
		this.name = name || "checkboxList";
		this.createMarkup = function($$parent) {
			this.$$panel = $(_getHtml("checkboxList", {
				id: options.id,
				css: options.css || ""
			})).appendTo($$parent);
			if (options.isHidden === true) {
				this.hide();
			}
			if (this.options.onClick) {
				this.$$panel.on('click', 'input[type="checkbox"]', jsutils.bindFn(this.onClick, this));
			}
			this._createList(options.list);
			return this.$$panel;
		};
		this.destroyMarkup = function() {
			if (this.$$panel) {
				this.$$panel.find('input[type="checkbox"]').off();
				this.$$panel.off();
				this.$$panel = null;
			}
			this.options = null;
		};
		this.onClick = function(evt) {
			var $$input = $(evt.target);
			this.options.onClick($$input.closest(".s-m-item").attr("data-id"), $$input.is(":checked"));
		};
		/**
		 * Format	array 	-> [{id:id1, checked: true},{id2, checked: false}]
		 * Format	object 	-> {id1: true, id2:false}
		 * Default is object
		 */
		this.getValue = function(format) {
			if (!this._$$list) return null;
			var obj = format !== "array";
			var res = obj ? {} : [];
			this._$$list.find(".s-m-item").each(function() {
				var $$this = $(this);
				if (!$$this.is(":visible")) return;
				var checked = $$this.find("input:checkbox").prop("checked") === true;
				var id = $$this.attr("data-id");
				if (obj) {
					res[id] = checked;
				} else {
					res.push({
						checked: checked,
						id: id
					});
				}
			});
			return res;
		};
		this.setValue = function(list) {
			this.updateValue(list);
		};
		this.reset = function() {
			this.updateValue(null);
		};
		/**
		 * accept list
		 * 	{id1: true, id2:false}
		 * 	[{id:id1, checked: true},{id2, checked: false}]
		 */
		this.updateValue = function(list) {
			if (!this.$$panel) return;
			var self = this;
			self._$$list.find("[data-id]").each(function() {
				$(this).val(false);
			});
			list = this._checkInputList(list);
			if (list.length === 0) return;
			list.forEach(function(itm) {
				if (!itm || !itm.id) return;
				var $$item = self._$$list.find('[data-id="' + itm.id + '"]');
				if ($$item.length === 0) return;
				if (itm.isHidden === true) $$item.hide();
				if (itm.checked !== true) return;
				$$item.attr("data-id", itm.id);
				$$item.find("input:checkbox").prop("checked", itm.checked === true);
				$$item.find("label").text(itm.label);
			});
		};
		/**
		 * accept list
		 * 	{id1: true, id2:false}
		 * 	[{id:id1, checked: true},{id2, checked: false}]
		 */
		this._createList = function(list) {
			if (!this.$$panel) return;
			if (this._$$list) this._$$list.remove();
			list = this._checkInputList(list);
			var newList = [];
			list.forEach(function(itm) {
				if (itm.id) {
					itm.id = itm.id;
					itm.checked = itm.checked === true;
					itm.label = itm.label || itm.id;
					newList.push(itm);
				}
			});
			this._$$list = $(_getHtml("checkboxListContent", {
				list: newList
			})).appendTo(this.$$panel);
		};
		this._arrayToPlainobject = function() {

		};
		// accept {id1: true, id2:false} and return [{id:id1, checked: true},{id2, checked: false}]
		this._checkInputList = function(list) {
			if (!list) return [];
			if (Array.isArray(list)) return list;
			if (!$.isPlainObject(list)) return [];
			var res = [];
			for (var p in list) {
				res.push({
					id: p,
					checked: list[p] === true
				});
			}
			return res;
		};
	}
};
/**
 * type:	genericSlider, flatRadio, select, actionBtns
 * opts:	depends on component
 * name:	name of property / optional
 */
exports.newComponent = function(type, opts, name) {
	var f = _components[type];
	if (!f) throw new Error("Unknown authoring component [" + type + "]");
	return new f(opts, name);
};