"use strict";

var _data = [];
var _switch = false;
for (var i = 0; i < 10; i++) {
	_data.push({
		$uuid: "" + i,
		propDate1: "2014-03-" + (i + 20),
		propDateTime1: "2014-06-" + (i + 10) + " 12:45:" + (i + 44),
		propTime1: "15:45:" + (i + 34),
		propInt1: (i * 1000 + i * 10),
		propDecimal1: Math.sqrt(i * 1000 + i * 10),
		propReal1: Math.sqrt(i * 1000 + i * 30),
		propDate2: "2014-03-" + (i + 20),
		propDateTime2: "2014-06-" + (i + 10) + " 12:45:" + (i + 44),
		propTime2: "15:45:" + (i + 34),
		propInt2: (i * 1000 + i * 10),
		propDecimal2: Math.sqrt(i * 1000 + i * 10),
		propReal2: Math.sqrt(i * 1000 + i * 30),
		propString: "Test"

	});
}

exports.entity = {
	$entityName: "testFormats",
	$properties: {
		propDate1: {
			$type: "application/x-date",
			$title: "Date"
		},
		propDateTime1: {
			$type: "application/x-datetime",
			$title: "Date+Time"
		},
		propTime1: {
			$type: "application/x-time",
			$title: "Time",
		},
		propInt1: {
			$type: "application/x-integer",
			$title: "Integer",
		},
		propDecimal1: {
			$type: "application/x-decimal",
			$title: "Decimal",
		},
		propReal1: {
			$type: "application/x-real",
			$title: "Real",
		},
		propDate2: {
			$type: "application/x-date",
			$title: "Date"
		},
		propDateTime2: {
			$type: "application/x-datetime",
			$title: "Date+Time"
		},
		propTime2: {
			$type: "application/x-time",
			$title: "Time",
		},
		propInt2: {
			$type: "application/x-integer",
			$title: "Integer",
		},
		propDecimal2: {
			$type: "application/x-decimal",
			$title: "Decimal",
		},
		propReal2: {
			$type: "application/x-real",
			$title: "Real",
		},
		propString: {
			$type: "application/x-string",
			$title: "String",
		},
	},
	$relations: {},
	$articles: {},
	$services: {
		$new: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({});
			return deferred.promise();
		},
		$read: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve(_data[op.$key]);
			return deferred.promise();
		},
		$query: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve({
				$resources: _data
			});
			return deferred.promise();
		},
		$save: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		},
		$delete: function(op, data) {
			var deferred = $.Deferred();
			deferred.resolve();
			return deferred.promise();
		}
	}
};