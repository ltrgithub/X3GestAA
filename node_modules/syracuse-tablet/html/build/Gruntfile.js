"use strict";

module.exports = function(grunt) {
	// Project configuration.
	grunt.initConfig({
		pkg: grunt.file.readJSON('package.json'),
		copy: {

			/*
			 * copy bootstrap to metro-bootstrap to resolve dependencies quickly
			 */
			bootstrap: {
				expand: true,
				cwd: 'node_modules/bootstrap',
				src: '**/*.*',
				dest: 'node_modules/metro-bootstrap/app/bower_components/bootstrap',
			},

			/*
			 * Copy dependencies maintained in build folder to application folder
			 */
			deps_bootstrap_fonts: {
				expand: true,
				cwd: 'node_modules/bootstrap/dist/fonts',
				src: '**/*.*',
				dest: '../fonts',
			},
			deps_bootstrap_js: {
				expand: true,
				cwd: 'node_modules/bootstrap/dist',
				src: 'js/*.*',
				dest: '../deps/bootstrap',
			},
			deps_bootstrap_select_js: {
				expand: true,
				cwd: 'node_modules/bootstrap-select/dist',
				src: 'js/*.*',
				dest: '../deps/bootstrap-select',
			},
			deps_bootstrap_select_css: {
				expand: true,
				cwd: 'node_modules/bootstrap-select/dist',
				src: 'css/*.*',
				dest: '../deps/bootstrap-select',
			},
			deps_font_awesome: {
				expand: true,
				cwd: 'node_modules/font-awesome',
				src: ['css/*.*', 'fonts/*.*'],
				dest: '../deps/font-awesome',
			},


			js_precompile: {
				expand: true,
				cwd: '..',
				src: ['js/**/*.*', '!**/resources/**'],
				dest: 'tmp',
				/*
				options: {
					process: function (content, srcpath) {
						content = "define(function(require, exports, module) {\n" + content + "\n});";
				        return content;
				     }
				}
				*/
			},

			dist_deps: {
				expand: true,
				cwd: '..',
				src: ['deps/**/*.*', 'js/startup.js', 'js/helpers/nativePrototypes.js', 'js/helpers/jqueryPlugins.js', 'js/resources/**/*.*'],
				dest: '../../dist',
			},

			dist_css_gen: {
				expand: true,
				cwd: '..',
				src: ['css/gen/*.*'],
				dest: '../../dist',
			},
			dist_css_fonts: {
				expand: true,
				cwd: '..',
				src: ['css/fonts/*.*'],
				dest: '../../dist',
			},
			dist_img: {
				expand: true,
				cwd: '..',
				src: ['img/**/*.*'],
				dest: '../../dist',
			}
		},

		clean: {
			/*
			 * remove copied bootstrap in metro-bootstrap
			 */
			bootstrap: [
				'node_modules/metro-bootstrap/app/bower_components'
			]
		},

		less: {
			development: {
				options: {
					compress: false,
					yuicompress: false,
					optimization: 2
				},
				files: {
					'../css/gen/windows.css': '../less/windows/main.less',
					'../css/gen/ios.css': '../less/ios/main.less',
					'../css/gen/android.css': '../less/android/main.less'
				}
			},
			release: {
				options: {
					compress: true,
					yuicompress: true,
					optimization: 2
				},
				files: {
					'../css/gen/windows.min.css': '../less/windows/main.less',
					'../css/gen/ios.min.css': '../less/ios/main.less',
					'../css/gen/android.min.css': '../less/android/main.less'
				}
			}

		},

		requirejs: {
			compile_min_debug: {
				options: {
					cjsTranslate: true,
					findNestedDependencies: true,
					baseUrl: '../../../',
					name: 'syracuse-tablet/html/js/main',
					out: '../../dist/js/main.joined.js',
					optimize: 'none'
				}
			},
			compile_min_release: {
				options: {
					cjsTranslate: true,
					findNestedDependencies: true,
					baseUrl: '../../../',
					name: 'syracuse-tablet/html/js/main',
					out: '../../dist/js/main.min.js'
				}
			}

		},


		concat: {
			options: {
				banner: '"use strict";\n',
				stripBanners: true
			},
			use_strict: {
				files: {
					'../js/main.joined.js': ['../js/main.joined.js'],
					'../js/main.min.js': ['../js/main.min.js']
				}
			},
		},


		cssmin: {
			"default": {
				files: [{
					expand: true,
					src: ['../css/default.css'],
					dest: '../../dist/css',
					ext: '.min.css'
				}]
			}
		}
	});

	grunt.loadNpmTasks('grunt-contrib-less');
	grunt.loadNpmTasks('grunt-contrib-copy');
	grunt.loadNpmTasks('grunt-contrib-clean');
	grunt.loadNpmTasks('grunt-contrib-requirejs');
	grunt.loadNpmTasks('grunt-contrib-concat');
	grunt.loadNpmTasks('grunt-contrib-cssmin');

	grunt.registerTask('default', ['update_dev']);

	// Update 3rd party css, compile less
	grunt.registerTask('update_dev', ['copy:bootstrap',
		'less:development',
		'copy:deps_bootstrap_js',
		'copy:deps_bootstrap_fonts',
		'copy:deps_font_awesome',
		'clean:bootstrap'
	]);

	grunt.registerTask('release', [
		'copy:bootstrap',
		'less:development',
		'less:release',
		'copy:deps_bootstrap_js',
		'copy:deps_bootstrap_fonts',
		'copy:deps_bootstrap_select_js',
		'copy:deps_bootstrap_select_css',
		'copy:deps_font_awesome',
		'requirejs:compile_min_debug',
		'requirejs:compile_min_release',
		'concat:use_strict',
		'clean:bootstrap',

		'copy:dist_deps',
		'copy:dist_img',
		'copy:dist_css_gen',
		'copy:dist_css_fonts',
		'cssmin:default',
	]);
};