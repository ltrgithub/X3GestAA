"use strict";

module.exports = function(grunt) {
	var fs = require('fs');

	var buildTime = new Date().toJSON().toString();

	// Project configuration.
	grunt.initConfig({
		pkg: grunt.file.readJSON('package.json'),
		copy: {

			/*
			 * copy bootstrap to metro-bootstrap to resolve dependencies quickly
			 */
			bootstrap: {
				expand: true,
				cwd: 'node_modules/bootstrap',
				src: '**/*.*',
				dest: 'node_modules/metro-bootstrap/app/bower_components/bootstrap',
			},

			/*
			 * Copy dependencies maintained in build folder to application folder
			 */
			deps_bootstrap_fonts: {
				expand: true,
				cwd: 'node_modules/bootstrap/dist/fonts',
				src: '**/*.*',
				dest: '../css/fonts',
			},
			deps_bootstrap_js: {
				expand: true,
				cwd: 'node_modules/bootstrap/dist',
				src: 'js/*.*',
				dest: '../deps/bootstrap',
			},
			deps_bootstrap_select_js: {
				expand: true,
				cwd: 'node_modules/bootstrap-select/dist',
				src: 'js/*.*',
				dest: '../deps/bootstrap-select',
			},
			deps_bootstrap_select_css: {
				expand: true,
				cwd: 'node_modules/bootstrap-select/dist',
				src: 'css/*.*',
				dest: '../deps/bootstrap-select',
			},
			deps_bootstrap_slider_js_1: {
				expand: true,
				cwd: 'node_modules/bootstrap-slider/dist',
				src: '*.js',
				dest: '../deps/bootstrap-slider/js',
			},
			deps_bootstrap_slider_js_2: {
				expand: true,
				cwd: 'node_modules/bootstrap-slider/js',
				src: 'bootstrap-slider.js',
				dest: '../deps/bootstrap-slider/js',
			},
			deps_bootstrap_slider_css: {
				expand: true,
				cwd: 'node_modules/bootstrap-slider/dist',
				src: 'css/*.*',
				dest: '../deps/bootstrap-slider',
			},
			deps_font_awesome: {
				expand: true,
				cwd: 'node_modules/font-awesome',
				src: ['css/*.*', 'fonts/*.*'],
				dest: '../deps/font-awesome',
			},

			deps_bootstrap_switch_js: {
				expand: true,
				cwd: 'node_modules/bootstrap-switch/dist',
				src: 'js/*.*',
				dest: '../deps/bootstrap-switch',
			},
			deps_bootstrap_switch_css: {
				expand: true,
				cwd: 'node_modules/bootstrap-switch/dist/css/bootstrap3',
				src: '*.*',
				dest: '../deps/bootstrap-switch/css',
			},

			deps_bootstrap_ios_css: {
				expand: true,
				cwd: 'node_modules/ios-bootstrap/dist/css',
				src: '*.*',
				dest: '../deps/ios-bootstrap/css',
			},
			deps_bootstrap_ios_font: {
				expand: true,
				cwd: 'node_modules/ios-bootstrap/dist/fonts',
				src: '*.*',
				dest: '../deps/ios-bootstrap/font',
			},
			deps_mobile_detect: {
				expand: true,
				cwd: 'node_modules/mobile-detect',
				src: 'mobile-detect*.js',
				dest: '../deps/mobile-detect',
			},
			deps_bowser: {
				expand: true,
				cwd: 'node_modules/bowser',
				src: 'bowser.js',
				dest: '../deps/bowser',
			},

			js_precompile: {
				expand: true,
				cwd: '..',
				src: ['js/**/*.*', '!**/resources/**'],
				dest: 'tmp',
				/*
				options: {
					process: function (content, srcpath) {
						content = "define(function(require, exports, module) {\n" + content + "\n});";
				        return content;
				     }
				}
				*/
			},

			dist_deps: {
				expand: true,
				cwd: '..',
				/*
				 * jsutils.js is used in html pages (open_link)
				 */
				src: ['deps/**/*.*', 'js/startup.js', 'js/helpers/nativePrototypes.js', 'js/helpers/jqueryPlugins.js', 'js/helpers/jsutils.js', 'js/resources/**/*.*'],
				dest: '../../dist',
				filter: function(path) {
					var normed = path.replace(/\\/g, "/");
					if (normed.indexOf("/js/resources/locales/") > -1) {
						return _checkLanguageSupported(normed);
					}
					return true;
				}
			},

			dist_css_gen: {
				expand: true,
				cwd: '..',
				src: ['css/gen/*.*'],
				dest: '../../dist',
			},
			dist_css_fonts: {
				expand: true,
				cwd: '..',
				src: ['css/fonts/*.*', '/deps/font-awesome/fonts/*'],
				dest: '../../dist',
			},
			dist_font_awesome: {
				expand: true,
				cwd: '../deps/font-awesome/',
				src: ['fonts/**/*'],
				dest: '../../dist',
			},
			dist_img: {
				expand: true,
				cwd: '..',
				src: ['img/**/*.*'],
				dest: '../../dist',
			},
			//Copied to make the css working in dist version
			dist_font_foco: {
				expand: true,
				cwd: '../css',
				src: ['fonts/foco*.*'],
				dest: '../../dist/',
			},

			//Copied to make the css working in dist version
			dist_font_sage: {
				expand: true,
				cwd: '../css',
				src: ['fonts/sage*.*'],
				dest: '../../dist/',
			},

			winjs: {
				expand: true,
				cwd: '../..',
				src: ['dist/**/*.*'],
				dest: '../../native/win8/Surface/syracuse-tablet',
			}
		},

		clean: {
			/*
			 * remove copied bootstrap in metro-bootstrap
			 */
			bootstrap: [
				'node_modules/metro-bootstrap/app/bower_components'
			],

			// Delete files that must not be included in the distribution package
			dist_non_min: {
				options: {
					force: true
				},
				src: [
					'../../dist/deps/bootstrap/js/*', '!../../dist/deps/bootstrap/js/*min*',
					'../../dist/deps/bootstrap-select/js/*', '!../../dist/deps/bootstrap-select/js/*min*',
					'../../dist/deps/bootstrap-slider/js/*', '!../../dist/deps/bootstrap-slider/js/*min*',

					'../../dist/deps/bootstrap-slider/css/*', '!../../dist/deps/bootstrap-slider/css/*min*',

					'../../dist/deps/bootstrap-switch/js/*', '!../../dist/deps/bootstrap-switch/js/*min*',
					'../../dist/deps/bootstrap-switch/css/*', '!../../dist/deps/bootstrap-switch/css/*min*',

					'../../dist/deps/font-awesome/css/*', '!../../dist/deps/font-awesome/css/*min*',
				]
			}
		},

		less: {
			development: {
				options: {
					compress: false,
					yuicompress: false,
					optimization: 2
				},
				files: {
					'../css/gen/windows.css': '../less/windows/main.less',
					'../css/gen/ios.css': '../less/ios/main.less',
					'../css/gen/android.css': '../less/android/main.less',
					//					'../css/gen/surface.css': '../less/surface/main.less'
				}
			},
			release: {
				options: {
					compress: true,
					yuicompress: true,
					optimization: 2
				},
				files: {
					'../css/gen/windows.min.css': '../less/windows/main.less',
					'../css/gen/ios.min.css': '../less/ios/main.less',
					'../css/gen/android.min.css': '../less/android/main.less',
					//					'../css/gen/surface.min.css': '../less/surface/main.less'
				}
			}

		},

		requirejs: {
			compile_min_debug: {
				options: {
					cjsTranslate: true,
					findNestedDependencies: true,
					baseUrl: '../../../',
					name: 'syracuse-tablet/html/js/main',
					out: '../../dist/js/main.joined.js',
					optimize: 'none'
				}
			},
			compile_min_release: {
				options: {
					cjsTranslate: true,
					findNestedDependencies: true,
					optimize: "uglify", // this is the default but we set it here for documentation
					uglify: {
						// Important because we use function.prototype.name
						mangle: false
					},

					baseUrl: '../../../',
					name: 'syracuse-tablet/html/js/main',
					out: '../../dist/js/main.min.js'
				}
			}

		},


		concat: {
			options: {
				banner: '"use strict";\n',
				stripBanners: true
			},
			use_strict: {
				files: {
					'../js/main.joined.js': ['../js/main.joined.js'],
					'../js/main.min.js': ['../js/main.min.js']
				}
			},
		},


		cssmin: {
			"default": {
				files: [{
					expand: true,
					src: ['../css/default.css'],
					dest: '../../dist/css',
					ext: '.min.css'
				}]
			}
		},

		manifest: {
			index: {
				options: {
					basePath: "../../dist",
					preferOnline: true,
					verbose: true,
					timestamp: false,
					hash: true,
					network: ["*"],
					fileNameMapper: function(name) {
						var path = "../../dist/" + name;
						var stat = fs.statSync(path);
						if (stat.isFile()) {
							return name;
						}
						return null;
					}
				},
				src: ["**/*.*", "!index.appcache"],
				dest: "../../dist/index.appcache"
			}
		},
		license_finder: {
			production: {
				options: {
					production: true,
					depth: 1
				}
			}
		},

		'string-replace': {
			buildTimeStamp: {
				files: [{
					expand: true,
					cwd: "../../dist",
					src: "*.html",
					dest: "../../dist/"
				}],
				options: {
					replacements: [{
						pattern: /window\.\_\_sageBuildTimestamp.*function.*\".*\";.* }/g,
						//pattern: /buildTimestamp/g,
						replacement: function() {
							return 'window.__sageBuildTimestamp = function() { return "' + buildTime + '"; }';
						}
					}]
				}
			},
			buildTimeStampDev: {
				files: [{
					expand: true,
					cwd: "..",
					src: "*.html",
					dest: ".."
				}],
				options: {
					replacements: [{
						pattern: /window\.\_\_sageBuildTimestamp.*function.*\".*\";.* }/g,
						//pattern: /buildTimestamp/g,
						replacement: function() {
							return 'window.__sageBuildTimestamp = function() { return "devmode-' + buildTime + '"; }';
						}
					}]
				}
			}
		}
	});

	grunt.loadNpmTasks('grunt-contrib-less');
	grunt.loadNpmTasks('grunt-contrib-copy');
	grunt.loadNpmTasks('grunt-contrib-clean');
	grunt.loadNpmTasks('grunt-contrib-requirejs');
	grunt.loadNpmTasks('grunt-contrib-concat');
	grunt.loadNpmTasks('grunt-contrib-cssmin');
	grunt.loadNpmTasks('grunt-manifest');
	grunt.loadNpmTasks('grunt-license-finder');
	grunt.loadNpmTasks('grunt-string-replace');


	grunt.registerTask('default', ['update_dev']);

	// Update 3rd party css, compile less
	grunt.registerTask('update_dev', ['copy:bootstrap',
		'less:development',
		'copy:deps_bootstrap_js',
		'copy:deps_bootstrap_fonts',
		'copy:deps_font_awesome',
		'clean:bootstrap'
	]);

	grunt.registerTask('css', ['copy:bootstrap',
		'less:development',
		'copy:deps_bootstrap_js',
	]);

	grunt.registerTask('release', [
		'copy:bootstrap',
		'less:development',
		'less:release',
		'copy:deps_bootstrap_js',
		'copy:deps_bootstrap_fonts',
		'copy:deps_bootstrap_select_js',
		'copy:deps_bootstrap_select_css',
		'copy:deps_bootstrap_slider_js_1',
		'copy:deps_bootstrap_slider_js_2',
		'copy:deps_bootstrap_slider_css',
		'copy:deps_font_awesome',
		'copy:deps_bootstrap_switch_js',
		'copy:deps_bootstrap_switch_css',
		'copy:deps_bootstrap_ios_css',
		'copy:deps_bootstrap_ios_font',
		'copy:deps_mobile_detect',
		'copy:deps_bowser',

		'requirejs:compile_min_debug',
		'requirejs:compile_min_release',

		'clean:bootstrap',

		'copy:dist_deps',
		'copy:dist_img',
		'copy:dist_css_gen',
		'copy:dist_css_fonts',
		'copy:dist_font_awesome',
		'copy:dist_font_foco',
		'copy:dist_font_sage',

		'clean:dist_non_min',

		'cssmin:default',

		'string-replace:buildTimeStamp',
		'string-replace:buildTimeStampDev',

		// Must be last task executed to include all files
		'manifest:index',
	]);

	grunt.registerTask('winjs', function() {
		grunt.task.run("release");
		grunt.task.run("copy:winjs");
	});

	grunt.registerTask('lic', ['license_finder:production']);
};

var fs = require('fs');

// In /js/resources/locales/ there is a high number of locale files not used at the moment.
// We only copy the ones to the dist directory for which there is a similar language in the strings-*json resource directory
function _checkLanguageSupported(path) {
	var result = /locales\/\w+-(\w+)-(\w+)\.json/.exec(path);
	if (result.length < 3) {
		return true;
	}
	var lang = result[1];
	var strings = path.substring(0, path.length - result[0].length) + "strings-" + lang + ".json";
	var accept = false;
	try {
		accept = fs.statSync(strings).isFile();
	} catch (err) {
		accept = false;
	}
	//console.log("Accept: " + result[0] + ": " + accept);
	return accept;
}