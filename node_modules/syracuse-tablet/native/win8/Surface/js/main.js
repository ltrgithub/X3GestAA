
"use strict";

(function() {

	var _webView;

	// APIs that are callable from inside the webview container
	var _containerAPI = {};

	// called from webview JS code to exchange data with wrapper application
	var _scriptNotify = function(ev) {
		try {
			var req = JSON.parse(ev.value);
			var $domain = req.$domain;
			var $funcName = req.$funcName;
			var $data = req.$data;
			var $execCallback = req.$execCallback;
			var $uuid = req.$uuid;

			var api;
			var func;
			var resultData;
			var error;
			var res;
			var resString;

			api = $SAGE.getContainerAPI($domain);
			func = api && api[$funcName];
			if (func) {
				var resultPromise = func($data);
				resultPromise.then(
					function(resultData) {
						if ($execCallback) {
							res = {
								$uuid: $uuid,
								$data: resultData
							};
							resString = JSON.stringify(res);
							console.log("IN:" + ev.value);
							console.log("OUT:" + resString);
							_webView.invokeScriptAsync("winjsCallbackHook", resString).start();
						}
					},
					function(errorData) {
						res = {
							$uuid: $uuid,
							$error: errorData
						};
						resString = JSON.stringify(res);
						_webView.invokeScriptAsync("winjsCallbackHook", resString).start();
					});
			} else {
				error = {
					$message: "No interface to handle " + $domain + "." + $funcName + "()",
					$received: dataString
				};
			}
		} catch (ex) {
			error = {
				$message: ex.message,
				$received: dataString
			};
			res = {
				$uuid: $uuid,
				$error: error
			};
			resString = JSON.stringify(res);
			_webView.invokeScriptAsync("winjsCallbackHook", resString).start();
		}
	};

	window.$SAGE = {
		init: function(webView, url) {
			_webView = webView;
			_webView.addEventListener("MSWebViewScriptNotify", _scriptNotify);

			_webView.addEventListener("MSWebViewNavigationCompleted", function() {});

			_webView.navigate(url);
		},
		registerContainerAPI: function(domain, module) {
			_containerAPI[domain] = module;
		},
		getContainerAPI: function(domain) {
			return _containerAPI[domain];
		}
	};

	// Test callback hooks
	window.$SAGE.registerContainerAPI("testWinJSCallback", {
		testOK: function(data) {
			return new WinJS.Promise(
				function(resolve, reject, progress) {
					resolve("Got: " + data);
				});
		},
		testKO: function(data) {
			return new WinJS.Promise(
				function(resolve, reject, progress) {
					reject("Error: " + data);
				});
		}
	});

	var app = WinJS.Application;
	var activation = Windows.ApplicationModel.Activation;

	app.onactivated = function(args) {
		if (args.detail.kind === activation.ActivationKind.launch) {
			if (args.detail.previousExecutionState !== activation.ApplicationExecutionState.terminated) {
				// TODO: This application has been newly launched. Initialize
				// your application here.
			} else {
				// TODO: This application has been reactivated from suspension.
				// Restore application state here.
			}
			args.setPromise(WinJS.UI.processAll());
		}
	};

	app.oncheckpoint = function(args) {
		// TODO: This application is about to be suspended. Save any state
		// that needs to persist across suspensions here. You might use the
		// WinJS.Application.sessionState object, which is automatically
		// saved and restored across suspension. If you need to complete an
		// asynchronous operation before your application is suspended, call
		// args.setPromise().
	};

	app.start();
})();