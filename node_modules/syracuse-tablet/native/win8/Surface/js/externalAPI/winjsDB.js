
"use strict";

(function() {
	var _storageDir = WinJS.Application.local.folder;
	var _storageFileName = "storage.json";
	var _storageData;

	var _writeFlushStorageToDisk = function() {
		return _storageDir.createFileAsync(_storageFileName, Windows.Storage.CreationCollisionOption.openIfExists)
			.then(function(file) {
				var json = JSON.stringify(_storageData);
				return Windows.Storage.FileIO.writeTextAsync(file, json);
			});
	};

	var _init = function(data) {
		return _storageDir.createFileAsync(_storageFileName, Windows.Storage.CreationCollisionOption.openIfExists)
			.then(function(file) {
				return Windows.Storage.FileIO.readTextAsync(file);
			})
			.then(function(fileContents) {
				if (fileContents) {
					_storageData = JSON.parse(fileContents);
				} else {
					_storageData = {
						apps: []
					};
				}
			});
	};
	var _queryAppConfigs = function() {
		return new WinJS.Promise(function(resolve, reject, progress) {
			resolve(_storageData.apps);
		});
	};
	var _createAppConfig = function(param) {
		var data = param.app;
		return new WinJS.Promise(function(resolve, reject, progress) {
			var apps = _storageData.apps;
			var match = false;
			apps = apps.map(function(app) {
				if (app.id === data.id) {
					match = true;
					return data; // replace existing
				} else {
					return app;
				}
			});
			if (!match) {
				apps.push(data);
			}
			_storageData.apps = apps;
			resolve(data);
		})
			.then(function(data) {
				return _writeFlushStorageToDisk().then(function(resolve) {
					return new WinJS.Promise(function(resolve, reject, progress) {
						resolve(data);
					});
				});
			});
	};
	var _readAppConfig = function(param) {
		var appid = param.appid;
		return new WinJS.Promise(function(resolve, reject, progress) {
			var apps = _storageData.apps;
			if (!apps.some(function(app) {
				if (app.id === appid) {
					resolve(app);
					return true;
				}
				return false;
			})) {
				resolve(null);
			}
		});
	};
	var _deleteAppConfig = function(param) {
		var appid = param.appid;
		return new WinJS.Promise(function(resolve, reject, progress) {
			var apps = _storageData.apps;
			var i;
			for (i = 0; i < apps.length; i++) {
				if (apps[i].id === appid) {
					apps.splice(i, 1);
					break;
				}
			}
			resolve(null);

			_storageData.apps = apps;
		})
			.then(function(data) {
				return _writeFlushStorageToDisk().then(function(resolve) {
					return new WinJS.Promise(function(resolve, reject, progress) {
						resolve(data);
					});
				});
			});
	};

	window.$SAGE.registerContainerAPI("winjsDB", {
		init: _init,
		queryAppConfigs: _queryAppConfigs,
		createAppConfig: _createAppConfig,
		readAppConfig: _readAppConfig,
		deleteAppConfig: _deleteAppConfig
	});
})();