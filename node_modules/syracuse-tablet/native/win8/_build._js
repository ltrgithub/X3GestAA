"use strict";
var fs = require('streamline-fs');
var path = require('path');

var root = path.join(__dirname, "../..").replace(/\\/g, "/");
var dest = path.join(__dirname, "Surface/syracuse-tablet").replace(/\\/g, "/");

if (typeof String.prototype.endsWith !== 'function') {
	String.prototype.endsWith = function(suffix) {
		return this.indexOf(suffix, this.length - suffix.length) !== -1;
	};
}

function walkDir(_, dir, beforeWalk, afterWalk) {
	if (fs.existsSync(dir)) {
		var files = fs.readdirSync(dir);
		files.forEach_(_, function(_, file) {
			file = path.join(dir, file).replace(/\\/g, "/");;
			var stats = fs.stat(file, _);
			var walk = beforeWalk && beforeWalk(_, file, stats);
			if (!stats.isFile() && (walk == null || walk === true)) {
				walkDir(_, file, beforeWalk, afterWalk);
			}
			afterWalk && afterWalk(_, file, stats);
		});
	}
};

function copyFile(_, src, dest) {

}

// cleanup old
walkDir(_, dest, null, function(_, file, stats) {
	if (!stats.isFile()) {
		fs.rmdirSync(file);
	} else {
		fs.unlinkSync(file);
	}
});
try {
	fs.rmdirSync(dest);
} catch (ignore) {}
try {
	fs.mkdirSync(dest);
} catch (ignore) {}

var fileHandlers = [
	// transform JS files not belonging to 3rd party libs
	{
		matcher: function(_, file, stats) {
			return (!stats.isFile());
		},
		handler: function(_, file, stats) {
			var destFile = path.join(dest, file.substr(root.length)).replace(/\\/g, "/");
			fs.mkdirSync(destFile);
		}
	},
	// transform JS files not belonging to 3rd party libs
	{
		matcher: function(_, file, stats) {
			return (file.indexOf("/deps/") === -1 && file.endsWith(".js"));
		},
		handler: function(_, file, stats) {
			var destFile = path.join(dest, file.substr(root.length)).replace(/\\/g, "/");
			var content = fs.readFile(file, 'utf8', _);
			content = "define(function(require, exports, module) {\n" + content + "\n});";
			fs.writeFile(destFile, content, _);
		}
	},
	// transform index.html
	{
		matcher: function(_, file, stats) {
			return (file.endsWith("index.html"));
		},
		handler: function(_, file, stats) {
			var destFile = path.join(dest, file.substr(root.length)).replace(/\\/g, "/");
			var content = fs.readFile(file, 'utf8', _);
			var newContent = content.replace("'baseUrl' : \"/requireJS\"", "'baseUrl' : \"/\"");
			if (newContent === content) {
				throw new Error("Content of html file was not changed, there is something wrong:" + file);
			}
			fs.writeFile(destFile, newContent, _);
		}
	},
	// just copy the rest
	{
		matcher: function(_, file, stats) {
			return true;
		},
		handler: function(_, file, stats) {
			var destFile = path.join(dest, file.substr(root.length)).replace(/\\/g, "/");
			var content = fs.readFile(file, _);
			fs.writeFile(destFile, content, _);
		}
	}

];

// copy and transform new files
walkDir(_, root, function(_, file, stats) {
	if (file.indexOf("syracuse-tablet/html") !== -1 ||
		file.indexOf("syracuse-tablet/test") !== -1) {
		fileHandlers.some_(_, function(_, handler) {
			if (handler.matcher(_, file, stats)) {
				handler.handler(_, file, stats);
				return true;
			}
			return false;
		});
		return true;
	}
	return false;
});