
var fs = require('fs');
const path = require('path');
var baseDir = path.resolve(__dirname, '../html/js/mocks');

//handleDir(baseDir);
handleFile ("testChartsHubDashboard");

function handleDir(dir) {
    var files = fs.readdirSync(dir);
    (files || []).forEach(function(file) {
    	file = path.resolve(dir, file);
    	var stat = fs.statSync(file);
        if (stat.isFile()) {
            handleFile(file);
        } else {
        	handleDir(file);
        }
    })
}


function handleFile(file) { 
	var f = "/Users/frederic/Documents/_SYRACUSE/Syracuse/node_modules/syracuse-tablet/html/js/mocks/mobileDashboard/" + file

	try {
		var fileData = f + "-data.json";
		var data = fs.readFileSync(fileData, "utf8");
		var json = JSON.parse(data);
		var changed = false;
		
		var res = transformDashboard(json, fileData);
		json = res.json;
		changed = changed || res.changed;
	
		if (changed) {
			console.log("Changed: " + fileData);
			fs.writeFileSync(fileData, JSON.stringify(json, null, 4));
		}
	} catch (e) {
		console.log(fileData);
		throw e;
	}
	try {
		var fileArticle = f + "-article.json";
		var data = fs.readFileSync(fileArticle, "utf8");
		var json = JSON.parse(data);
		console.log("Changed: " + fileArticle);
		fs.writeFileSync(fileArticle, JSON.stringify(json, null, 4));
	} catch (e) {
		console.log(fileArticle);
		throw e;
	}
}

function transformDashboard(json, file) {
	// No dashboard
	if (!json.dashboardName && !json.$dashboardName) {
		return {
			json: json,
			changed: false
		};
	}
	var changedGadgets = false;
	
	Object.keys(json.$mobileGadgets).forEach(function(gName) {
		var g = json.$mobileGadgets[gName];
		if (g.$type === "$representation") {
			var d = getLocalEntityData(g.entity||g.representation, g.representation, g.facet);
			if (d) {
				g.$url = d.$url;
				g.$method = d.$method;
			}
			changedGadgets = true;
		} else if (g.$type === "$dashboard") {
			g.$url = "{$hostPort}/mobile2/$client/$local/$dataset/mobileDashboard('" + g.dashboardName + "')";
			g.$method = "GET";
			changedGadgets = true;
		}
	});
	
	// already ok
	if (!json.$vignettes && json.vignettes && !changedGadgets) {
		return {
			json: json,
			changed: false
		};
	}
	if (!json.vignettes) {
		json.vignettes = [];
		Object.keys(json.$vignettes||{}).forEach(function(vName) {
			var v = json.$vignettes[vName]; 
			var vn = {
				"persistentId": vName,
				"displayStyle": v.$displayStyle || v.displayStyle || "$full",
				"gadget": 
				{
					"$uuid": v.$uuid
				}
			}
			json.vignettes.push(vn);
		});
	}

	
	json.dashboardName = json.$dashboardName;
	json.title = json.$title;
	json.description = json.$description;
		
	delete json.$vignettes;
	delete json.$title;
	delete json.$description;
	
	return {
		json: json,
		changed: true
	}
}

//http://localhost:8124/mobile2/$client/$local/$dataset/testFormatReference?representation=testFormatReference.$query
function getLocalEntityData(entity, repr, $facet) {
	var methods = {
		"$details": "GET",
		"$edit": "PUT",
		"$query": "GET",
		"$create": "POST",
	};
	
	if (!methods[$facet]) {
		throw new Error("Facet not handled: " + $facet);
	}

	if (entity != entity.toUpperCase()) { // To guess client side entity
		var url = "{$hostPort}/mobile2/$client/$local/$dataset/" + entity + "&representation=" + repr + "." + $facet;

		return {
			$url: url,
			$method: "GET"
		}
	}
}
