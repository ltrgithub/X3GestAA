// SKIPT THIS TEST: hijack is broken
process.exit();

var module = QUnit.module;

var sys = require("util");
var helpers = require("syracuse-core/lib/helpers");
var hasKey = helpers.object.has;

var hijack = require("../../../runner/hijack").hijack;
hijack("/usr/local/lib/node/socket.io/index", "../fixtures/socketIOServerStub");
hijack("syracuse-session/lib/sessionManager", "../fixtures/sessionManagerStub");

var liveServer = require('syracuse-live/lib/liveServer').liveServer;
var ioStub = require("../fixtures/socketIOServerStub");

var paul = {
	firstName : "Paul",
	lastName : "Dupont",
	$key : "123456"
};

var pierre = {
	firstName : "Pierre",
	lastName : "Durand",
	$key : "789456"
}

module("liveServer", {
	setup: function() {
		liveServer.listen({});
	},
	teardown : function(){
		ioStub._reset();
	}
});

test("client connections", function() {
	var client = ioStub._addClient(paul);
	var client = ioStub._addClient();
	//TODO : Maybe shouldn't accept clients without user (only with "anonymous" user)
	ok(true, "should accept new clients with or withou a user objet in session (authenticated or unauthenticated users)");
});

test("client disconnection", function() {
	var client = ioStub._addClient();
	client.emit("disconnect");
	client = ioStub._addClient(paul);
	client.emit("disconnect");
	client = ioStub._addClient();
	var client2 = ioStub._addClient(pierre);
	client.emit("disconnect");
	client2.emit("disconnect");
	ok(true, "client should be able to disconnect");
});

test("clients registering to channels", function() {
	var client = ioStub._addClient(paul);
	client.emit("message", "+chats");
	var called = 0;
	client.on("send", function(message) {
		called++;
	});
	liveServer.channels("chats").broadcast("coucou");
	liveServer.channels("chats2").broadcast("coucou");
	same(called, 1, "after registering to chat channel, client should be notified if there is a broadcast on it");
	called = 0;
	client.emit("message", "-chats");
	client.emit("message", "+chats,+chats2");
	liveServer.channels("chats").broadcast("coucou");
	liveServer.channels("chats2").broadcast("coucou");
	same(called, 2, "after registering to multiples channels, client should be notified if there is a broadcast on it");
});

test("cleaning channel list", function() {
	var client = ioStub._addClient(paul);
	client.emit("message", "+chats");
	ok(liveServer.channels("chats").exist, "channel added");
	client.emit("disconnect");
	ok(!liveServer.channels("chats").exist, "channel deleted");
	
	client = ioStub._addClient(paul);
	client.emit("message", "+chats");
	var client2 = ioStub._addClient(pierre);
	client2.emit("message", "+chats");
	ok(liveServer.channels("chats").exist, "channel exist");
	client.emit("disconnect");
	ok(liveServer.channels("chats").exist, "channel exist");
	client2.emit("disconnect");
	ok(!liveServer.channels("chats").exist, "channel deleted");
	
	client = ioStub._addClient(paul);
	client.emit("message", "+chats");
	client2 = ioStub._addClient(pierre);
	client2.emit("message", "+chats");
	ok(liveServer.channels("chats").exist, "channel exist");
	client.emit("disconnect");
	ok(liveServer.channels("chats").exist, "channel exist");
	client2.emit("message", "-chats");
	ok(!liveServer.channels("chats").exist, "channel deleted");
});

test("broadcasting", function() {
	var client = ioStub._addClient(paul);
	client.emit("message", "+chats");
	var client2 = ioStub._addClient(pierre);
	client2.emit("message", "+otherChannel");
	var called = 0;
	var called2 = false;
	client.on("send", function(message) {
		called++;
	});
	var called = false;
	client2.on("send", function(message) {
		called2 = true;
	});
	liveServer.channels("chats").broadcast("coucou");
	same(called, 1, "after registering to chat channel, client should be notified if there is a broadcast on it");
	ok(!called2, "if the client hasn't registered to the channel, it should not be notified if there is a broadcast on it");
	client.emit("message", "-chats");
	liveServer.channels("chats").broadcast("coucou");
	same(called, 1, "if the client unregister to the channel, it should not be notified");
	client.emit("disconnect");
});

test("broadcast with except users list", function() {
	var client = ioStub._addClient(paul);
	client.emit("message", "+chats");
	var client2 = ioStub._addClient(pierre);
	client2.emit("message", "+chats");
	var called = false;
	var called2 = false;
	client.on("send", function(message) {
		called = true;
	});
	client2.on("send", function(message) {
		called2 = true;
	});
	liveServer.channels("chats").broadcast("titi", paul.$key);
	ok(!called, "user in except value should not be notified");
	ok(called2, "user not in except value should be notified");
	called = false;
	called2 = false;
	liveServer.channels("chats").broadcast("titi", [paul.$key, pierre.$key]);
	ok(!called, "user not in except array should be notified");
	ok(!called2, "user not in except array should be notified");
});

test("send", function() {
	var client = ioStub._addClient(paul);
	client.emit("message", "+chats");
	var client2 = ioStub._addClient(pierre);
	client2.emit("message", "+chats");
	var called = false;
	var called2 = false;
	client.on("send", function(message) {
		called = true;
	});
	var called = false;
	client2.on("send", function(message) {
		called2 = true;
	});
	liveServer.channels("chats").send("coucou", paul.$key);
	ok(called, "if user in value, should be notified");
	ok(!called2, "if user in value, should not be notified");
	called = false;
	called2 = false;
	liveServer.channels("chats").send("coucou", [paul.$key, pierre.$key]);
	ok(called, "if user in array, should be notified");
	ok(called2, "if user in array, should not be notified");
	called = false;
	called2 = false;
	liveServer.channels("chats").send("coucou");
	ok(!called, "if no user in value, noboby should be notified");
	ok(called2, "if no user in value, noboby should be notified");
});