// borrowed uni compatibility templates from https://github.com/laverdet/node-fibers/blob/master/src/fibers.cc#L24-124
// Handle legacy V8 API
#include <uv.h>
#include <node_object_wrap.h>
namespace uni {
#if NODE_MODULE_VERSION >= 0x000D
  typedef void CallbackType;
  typedef v8::FunctionCallbackInfo<v8::Value> FunctionCallbackInfo;
  typedef v8::Local<Value> BufferType;
#define UNI_RETURN(scope, args, res) { args.GetReturnValue().Set(res); return; }
#define UNI_THROW(ex) { Isolate::GetCurrent()->ThrowException(ex); return; }
#define UNI_SCOPE(scope) HandleScope scope(Isolate::GetCurrent()) 
#define UNDEFINED() Undefined(Isolate::GetCurrent())
#define NULL_VALUE() Null(Isolate::GetCurrent())
#define STRING_NEW(bytes) String::NewFromUtf8(Isolate::GetCurrent(), bytes)
#define STRING_NEW2(bytes, len) String::NewFromUtf8(Isolate::GetCurrent(), bytes, String::kNormalString, len)
#define STRING_NEW_SYMBOL(bytes) String::NewFromUtf8(Isolate::GetCurrent(), bytes)
#define BOOLEAN_NEW(val) Boolean::New(Isolate::GetCurrent(), val)
#define OBJECT_NEW() Object::New(Isolate::GetCurrent())
#define DATE_NEW(val) Date::New(Isolate::GetCurrent(), val)
#define NUMBER_NEW(val) Number::New(Isolate::GetCurrent(), val)
#define INTEGER_NEW(val) Integer::New(Isolate::GetCurrent(), val)
#define ARRAY_NEW(val) Array::New(Isolate::GetCurrent(), val)
#define BUFFER_NEW(a, b, c, d) Buffer::New(Isolate::GetCurrent(), a, b, c, d)
#define FUNCTION_TEMPLATE_NEW(val) FunctionTemplate::New(Isolate::GetCurrent(), val)
#define CURRENT_CONTEXT() Isolate::GetCurrent()->GetCurrentContext()
#define MAKE_CALLBACK(a, b, c, d) MakeCallback(Isolate::GetCurrent(), a, b, c, d)
#define RESET() Reset()

  template <class T>
  void Reset(Persistent<T>& persistent, Handle<T> handle) {
    persistent.Reset(Isolate::GetCurrent(), handle);
  }
  template <class T>
  Handle<T> Deref(Persistent<T>& handle) {
    return Local<T>::New(Isolate::GetCurrent(), handle);
  }
  template <class T>
  Local<T> HandleToLocal(Handle<T> handle) {
    return handle;
  }
  inline Handle<Value> BufferToHandle(BufferType buf) {
    return buf;
  }
  inline Local<Date> DateCast(Local<Value> date) {
    return Local<Date>::Cast(date);
  }
#else
  typedef Handle<Value> CallbackType;
  typedef Arguments FunctionCallbackInfo;
  typedef node::Buffer* BufferType;
#define UNI_RETURN(scope, args, res) return scope.Close(res)
#define UNI_THROW(ex) return ThrowException(ex)
#define UNI_SCOPE(scope) HandleScope scope
#define UNDEFINED() Undefined()
#define NULL_VALUE() Null()
#define STRING_NEW(bytes) String::New(bytes)
#define STRING_NEW2(bytes, len) String::New(bytes, len)
#define STRING_NEW_SYMBOL(bytes) String::NewSymbol(bytes)
#define BOOLEAN_NEW(val) Boolean::New(val)
#define NUMBER_NEW(val) Number::New(val)
#define OBJECT_NEW() Object::New()
#define DATE_NEW(val) Date::New(val)
#define INTEGER_NEW(val) Integer::New(val)
#define ARRAY_NEW(val) Array::New(val)
#define BUFFER_NEW(a, b, c, d) Buffer::New(Isolate::GetCurrent())
#define FUNCTION_TEMPLATE_NEW(val) FunctionTemplate::New(val)
#define CURRENT_CONTEXT() Context::GetCurrent()
#define MAKE_CALLBACK(a, b, c, d) MakeCallback(a, b, c, d)
#define RESET() Dispose()

  template <class T>
  void Reset(Persistent<T>& persistent, Handle<T> handle) {
    persistent = Persistent<T>::New(handle);
  }
  template <class T>
  Handle<T> Deref(Persistent<T>& handle) {
    return Local<T>::New(handle);
  }
  template <class T>
  Local<T> HandleToLocal(Handle<T> handle) {
    return Local<T>::New(handle);
  }
  inline Handle<Value> BufferToHandle(BufferType buf) {
    return buf->handle_;
  }
  inline Local<Date> DateCast(Local<Value> date) {
    return Date::Cast(*date);
  }
#endif
}
