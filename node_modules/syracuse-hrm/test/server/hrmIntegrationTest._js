"use strict";

var helpers = require('syracuse-core/lib/helpers');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require('streamline-mongodb');
var jsonImport = require("syracuse-import/lib/jsonImport");
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var globals = require("streamline/lib/globals");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var hrmHelper = require('syracuse-hrm/lib/hrmHelper');
var wizardHelper = require('syracuse-hrm/lib/wizardHelper');
var lb = require('syracuse-hrm/lib/hrmLoadBalancer');

var traces = false;

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;

helpers.pageFileStorage = false;

var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_demo");

var port = 3004;

var data_mongo = {
	"$prototypes": {
		"navigationPage": {
			"$key": "pageName",
			"modules": {
				"$key": "code"
			},
			"$localized": ["title", "description"]
		},
		"application": {
			"$key": [
				"application",
				"contract"
			]
		},
		"endPoint": {
			"$key": "description",
			"applicationRef": {
				"$key": [
					"application",
					"contract"
				]
			},
			"x3servers": {
				"$key": "description"
			}
		}
	},
	"$items": [{
		"$type": "application",
		"description": "X3 Hrm",
		"application": "x3",
		"contract": "hrm",
		"protocol": "syracuse"
	}, {
		"$type": "endPoint",
		"description": "HRM0",
		"applicationRef": {
			"application": "x3",
			"contract": "hrm"
		},
		"dataset": "hrm0",
		"enableSearch": false,
		"databaseDriver": "mongodb",
		"databaseHost": "localhost",
		"databasePort": 27000,
		"x3server": "X3 Developpement Server",
		"x3SolutionName": "SOLPAIEV6_1",
		"x3ServerFolder": "PAIEV6_1"
	}, {
		"$type": "endPoint",
		"description": "HRM1",
		"applicationRef": {
			"application": "x3",
			"contract": "hrm"
		},
		"dataset": "hrm1",
		"enableSearch": false,
		"databaseDriver": "mongodb",
		"databaseHost": "localhost",
		"databasePort": 27000,
		"x3server": "X3 Developpement Server",
		"x3SolutionName": "SOLPAIEV6_1",
		"x3ServerFolder": "PAIEV6_2"
	}, {
		"$type": "endPoint",
		"description": "HRM2",
		"applicationRef": {
			"application": "x3",
			"contract": "hrm"
		},
		"dataset": "hrm2",
		"enableSearch": false,
		"databaseDriver": "mongodb",
		"databaseHost": "localhost",
		"databasePort": 27000,
		"x3server": "X3 Developpement Server",
		"x3SolutionName": "SOLPAIEV6_2",
		"x3ServerFolder": "PAIEV6_1"
	}, {
		"$type": "endPoint",
		"description": "HRM3",
		"applicationRef": {
			"application": "x3",
			"contract": "hrm"
		},
		"dataset": "hrm3",
		"enableSearch": false,
		"databaseDriver": "mongodb",
		"databaseHost": "localhost",
		"databasePort": 27000,
		"x3server": "X3 Developpement Server",
		"x3SolutionName": "SOLPAIEV6_2",
		"x3ServerFolder": "PAIEV6_2"
	}, {
		"$type": "navigationPage",
		"title": "title_home_page",
		"pageName": "home",
		"modules": []
	}],
	"$localization": {
		"en-us": {
			"title_home_page": "Home Page"
		}
	}
};

var setSessionContext = function(_, forceEp) {
	globals.context = globals.context || {};
	globals.context.session = {
		id: helpers.uuid.generate(),
		getUserLogin: function(_) {
			return "admin";
		},
		getUserProfile: function(_) {
			return {
				user: function(_) {
					// getting the administration ORM
					var db = adminHelper.getCollaborationOrm(_);
					return db.fetchInstance(_, db.model.getEntity(_, "user"), {
						jsonWhere: {
							login: "admin"
						}
					});
				},
				getDefaultX3Endpoints: function(_) {
					return [];
				},
				selectedEndpoint: function(_) {
					return forceEp;
				}
			};
		},
		getSecurityProfile: function(_) {
			return null;
		},
		getData: function(code) {
			return null;
		}
	};
	return true;
};

function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_demo");
}

var importTracer = null; //console.log;

var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets.mongodb_demo.hostname, endPoint.datasets.mongodb_demo.port, {});
	var db = adminTestFixtures.newMongoDb(endPoint.datasets.mongodb_demo.database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");
	start();
});

//start syracuse server
asyncTest("initialize syracuse test server", 1, function(_) {
	require('syracuse-main/lib/syracuse').startServers(_, port);
	ok(true, "server initialized");

	//activate traces
	if (traces) {
		adminTestFixtures.setTracesOn("hrmLoadBalancer");
	}
	start();
});

function onlyInfo(diags) {
	return adminTestFixtures.onlyInfo(diags);
}


function getEp(_, db, dataset) {
	return db.fetchInstance(_, db.getEntity(_, "endPoint"), {
		jsonWhere: {
			dataset: dataset
		}
	});
}

var db;
var ep = [];


asyncTest("data setup", function(_) {
	db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_demo);
	// import
	var diag = [];
	jsonImport.jsonImport(_, db, "syracuse-admin-demo.json", {
		$diagnoses: diag,
		tracer: importTracer,
	});
	//console.log("import demo db diags (134): "+sys.inspect(diag));
	ok(onlyInfo(diag), "Demo database import ok");

	diag = [];
	jsonImport.jsonImportFromJson(_, db, data_mongo, {
		$diagnoses: diag,
		tracer: importTracer,
	});
	ok(onlyInfo(diag), "Custom data import ok");

	var app = db.fetchInstance(_, db.getEntity(_, "application"), {
		jsonWhere: {
			description: "X3 Hrm"
		}
	});
	ok(app.$uuid != null, "Application X3 Hrm ok");

	ep.push(getEp(_, db, "hrm0"));
	ok(ep[0] && ep[0].$uuid != null && ep[0].description(_) === "HRM0", "Endpoint hrm1 ok");
	ep.push(getEp(_, db, "hrm1"));
	ok(ep[1] && ep[1].$uuid != null && ep[1].description(_) === "HRM1", "Endpoint hrm2 ok");
	ep.push(getEp(_, db, "hrm2"));
	ok(ep[2] && ep[2].$uuid != null && ep[2].description(_) === "HRM2", "Endpoint hrm3 ok");
	ep.push(getEp(_, db, "hrm3"));
	ok(ep[3] && ep[3].$uuid != null && ep[3].description(_) === "HRM3", "Endpoint hrm4 ok");

	start();
});

var ws = [{
	host: "server_0",
	http: "28880"
}, {
	host: "server_1",
	http: "8080",
	sslEnabled: true,
	https: "8043"

}, {
	host: "server_2",
	http: "28980",
	sslEnabled: true,
	https: "28943"
}, {
	host: "server_3",
	http: "80"
}];

asyncTest("installation with wizard helper API", 5, function(_) {
	setSessionContext(_, ep[0]);
	var siteName = "SITE_0";
	// servers 0 + 1
	var diags = wizardHelper.install(_, siteName, ws.slice(0, 2), false, true).$diagnoses;
	ok(onlyInfo(diags), "HRM Site " + siteName + " installation ok");

	siteName = "SITE_0_BIS";
	// no servers --> This Site will be used only for proxy selection tests
	diags = wizardHelper.install(_, siteName, [], false, false).$diagnoses;
	ok(onlyInfo(diags), "HRM Site " + siteName + " installation ok");

	setSessionContext(_, ep[1]);
	siteName = "SITE_1";
	// server 2
	diags = wizardHelper.install(_, siteName, ws.slice(2, 3), false, true).$diagnoses;
	ok(onlyInfo(diags), "HRM Site " + siteName + " installation ok");

	setSessionContext(_, ep[2]);
	siteName = "SITE_2";
	// no servers
	diags = wizardHelper.install(_, siteName, [], false, true).$diagnoses;
	ok(onlyInfo(diags), "HRM Site " + siteName + " installation ok");

	setSessionContext(_, ep[3]);
	siteName = "SITE_3";
	// servers 1 + 2 + 3
	diags = wizardHelper.install(_, siteName, ws.slice(1), true, true).$diagnoses;
	ok(onlyInfo(diags), "HRM Site " + siteName + " installation ok");

	start();
});


function getSiteOptions(_, siteName, _ep) {
	return {
		site: siteName,
		solution: _ep.x3SolutionName(_),
		folder: _ep.x3ServerFolder(_)
	};
}

function getSite(_, siteName, _ep) {
	return hrmHelper.getHrmSite(_, db, getSiteOptions(_, siteName, _ep));
}

var sites = [],
	servers = [];

asyncTest("check installation data", function(_) {
	var siteName;
	for (var i = 0; i < ep.length; i++) {
		siteName = "SITE_" + i;
		sites.push(getSite(_, siteName, ep[i]));
		ok(sites[i] && sites[i].$uuid != null && sites[i].name(_) === siteName, "Retrieve HRM Site " + siteName + " with helper ok");

	}
	// Store also SITE_0_BIS
	siteName = "SITE_0_BIS";
	sites.push(getSite(_, siteName, ep[0]));
	ok(sites[4] && sites[4].$uuid != null && sites[4].name(_) === siteName, "Retrieve HRM Site " + siteName + " with helper ok");

	strictEqual(sites[0] && sites[0].servers(_).getLength(), 2, "Servers count for " + sites[0].name(_) + " OK [" + sites[0].servers(_).getLength() + "]");
	strictEqual(sites[1] && sites[1].servers(_).getLength(), 1, "Servers count for " + sites[1].name(_) + " OK [" + sites[1].servers(_).getLength() + "]");
	strictEqual(sites[2] && sites[2].servers(_).getLength(), 0, "Servers count for " + sites[2].name(_) + " OK [" + sites[2].servers(_).getLength() + "]");
	strictEqual(sites[3] && sites[3].servers(_).getLength(), 3, "Servers count for " + sites[3].name(_) + " OK [" + sites[3].servers(_).getLength() + "]");
	strictEqual(sites[4] && sites[4].servers(_).getLength(), 0, "Servers count for " + sites[4].name(_) + " OK [" + sites[4].servers(_).getLength() + "]");


	servers.push(hrmHelper.getHrmServer(_, db, ws[0]));
	strictEqual(servers[0] && servers[0].toString(_), ws[0].host + ":" + ws[0].http, "Server OK [" + (servers[0] && servers[0].toString(_)) + "]");

	servers.push(hrmHelper.getHrmServer(_, db, ws[1]));
	strictEqual(servers[1] && servers[1].toString(_), ws[1].host + ":" + ws[1].http + " (SSL: " + ws[1].https + ")", "Server OK [" + (servers[1] && servers[1].toString(_)) + "]");

	servers.push(hrmHelper.getHrmServer(_, db, ws[2]));
	strictEqual(servers[2] && servers[2].toString(_), ws[2].host + ":" + ws[2].http + " (SSL: " + ws[2].https + ")", "Server OK [" + (servers[2] && servers[2].toString(_)) + "]");

	servers.push(hrmHelper.getHrmServer(_, db, ws[3]));
	strictEqual(servers[3] && servers[3].toString(_), ws[3].host + ":" + ws[3].http, "Server OK [" + (servers[3] && servers[3].toString(_)) + "]");


	start();
});


asyncTest("round robin load balancer tests", 14, function(_) {
	var opt = {
		ignoreAvailability: true
	};

	// site0 : servers 0 + 1
	// site1 : server 2
	// site2 : no servers
	// site3 : servers 1 + 2 + 3 / but only site 1 is SSL compliant

	var context = globals.context;

	// First attempt on site0 --> must be the first site's asociated server
	var optSite0 = getSite(_, "SITE_0", ep[0]);
	var server = lb.selectServer(_, context, optSite0, opt);
	// server 0
	strictEqual(server && server.toString(_), ws[0].host + ":" + ws[0].http, "First selected server for site0 OK [" + (server && server.toString(_)) + "]");

	// Second attempt on same site0 --> must be the second site's asociated server
	server = lb.selectServer(_, context, optSite0, opt);
	// server 1
	strictEqual(server && server.toString(_), ws[1].host + ":" + ws[1].http + " (SSL: " + ws[1].https + ")", "Second selected server for site0 OK [" + (server && server.toString(_)) + "]");

	// First attempt on site3 --> must not use the first site's asociated server because it was already used once
	var optSite3 = getSite(_, "SITE_3", ep[3]);
	server = lb.selectServer(_, context, optSite3, opt);
	// server 2
	strictEqual(server && server.toString(_), ws[2].host + ":" + ws[2].http + " (SSL: " + ws[2].https + ")", "First selected server for site3 OK [" + (server && server.toString(_)) + "]");

	// First attempt on site1 --> must use the first site's asociated server because it's the only one
	var optSite1 = getSite(_, "SITE_1", ep[1]);
	server = lb.selectServer(_, context, optSite1, opt);
	// server 2
	strictEqual(server && server.toString(_), ws[2].host + ":" + ws[2].http + " (SSL: " + ws[2].https + ")", "First selected server for site1 OK [" + (server && server.toString(_)) + "]");

	// First attempt on site2 --> must fail because of no server associated
	var optSite2 = getSite(_, "SITE_2", ep[2]);
	try {
		server = lb.selectServer(_, context, optSite2, opt);
	} catch (e) {
		// no server
		ok(true, "Server selection failed for site2 OK [" + e.message + "]");
	}

	// Second attempt on site3 --> must use the third site's asociated server
	server = lb.selectServer(_, context, optSite3, opt);
	// server 3
	strictEqual(server && server.toString(_), ws[1].host + ":" + ws[1].http + " (SSL: " + ws[1].https + ")", "Second selected server for site3 OK [" + (server && server.toString(_)) + "]");

	// Third attempt on site3 --> must use the first site's asociated server
	server = lb.selectServer(_, context, optSite3, opt);
	// server 1
	strictEqual(server && server.toString(_), ws[2].host + ":" + ws[2].http + " (SSL: " + ws[2].https + ")", "Third selected server for site3 OK [" + (server && server.toString(_)) + "]");

	// Fourth attempt on site3 --> must use the same server because because forced
	server = lb.selectServer(_, context, optSite3, {
		host: ws[1].host,
		http: ws[1].http,
		sslEnabled: ws[1].sslEnabled,
		https: ws[1].https,
		ignoreAvailability: true
	});
	// server 1
	strictEqual(server && server.toString(_), ws[1].host + ":" + ws[1].http + " (SSL: " + ws[1].https + ")", "Fourth forced selected server for site3 OK [" + (server && server.toString(_)) + "]");

	try {
		// Second attempt on site1 (without ignoreAvailability --> must fail because server will be banned
		server = lb.selectServer(_, context, optSite1, null);
	} catch (e) {
		// no server
		ok(true, "Server selection failed for site1 OK [" + e.message + "]");
	}

	// Fifth attempt on site3 --> must use the third site's asociated server because the second was banned just before
	server = lb.selectServer(_, context, optSite3, opt);
	// server 3
	strictEqual(server && server.toString(_), ws[2].host + ":" + ws[2].http + " (SSL: " + ws[2].https + ")", "Fifth selected server for site3 OK [" + (server && server.toString(_)) + "]");

	// Third attempt on site0 --> must use the first site's asociated server
	server = lb.selectServer(_, context, optSite0, opt);
	// server 0
	strictEqual(server && server.toString(_), ws[0].host + ":" + ws[0].http, "Third selected server for site0 OK [" + (server && server.toString(_)) + "]");

	try {
		// Sixth attempt on site3 (without ignoreAvailability --> must fail because all servers will be banned
		server = lb.selectServer(_, context, optSite3, null);
	} catch (e) {
		// no server
		ok(true, "Server selection failed for site3 OK [" + e.message + "]");
	}

	// Fourth attempt on site0 --> must use the first site's asociated server because the other must be banned
	server = lb.selectServer(_, context, optSite0, opt);
	// server 0
	strictEqual(server && server.toString(_), ws[1].host + ":" + ws[1].http + " (SSL: " + ws[1].https + ")", "Fourth selected server for site0 OK [" + (server && server.toString(_)) + "]");

	try {
		// Seventh attempt on site3 --> must fail because all servers have been banned
		server = lb.selectServer(_, context, optSite3, opt);
	} catch (e) {
		// no server
		ok(true, "Server selection failed for site3 OK [" + e.message + "]");
	}

	start();
});

test("stop  tests", 0, function() {
	doStop = true;
	start();
});