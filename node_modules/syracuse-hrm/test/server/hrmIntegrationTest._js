"use strict";

var helpers = require('syracuse-core/lib/helpers');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require('streamline-mongodb');
var jsonImport = require("syracuse-import/lib/jsonImport");
var uuid = require('syracuse-core/lib/uuid');
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var globals = require("streamline/lib/globals");
var proxy = require('syracuse-main/lib/proxy');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;

var hrmHelper = require('syracuse-hrm/lib/hrmHelper');
var wizardHelper = require('syracuse-hrm/lib/wizardHelper');
var lb = require('syracuse-hrm/lib/hrmLoadBalancer');
var proxyHelper = require('syracuse-hrm/lib/hrmProxyHelper');


//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;

helpers.pageFileStorage = false;

var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_demo");

var port = 3004;

var data_mongo = {
	"$prototypes": {
		"navigationPage": {
			"$key": "pageName",
			"modules": {
				"$key": "code"
			},
			"$localized": ["title", "description"]
		},
		"application": {
			"$key": [
				"application",
				"contract"
			]
		},
		"endPoint": {
			"$key": "description",
			"applicationRef": {
				"$key": [
					"application",
					"contract"
				]
			},
			"x3servers": {
				"$key": "description"
			}
		}
	},
	"$items": [{
		"$type": "application",
		"description": "X3 Hrm",
		"application": "x3",
		"contract": "hrm",
		"protocol": "syracuse"
	}, {
		"$type": "endPoint",
		"description": "HRM0",
		"applicationRef": {
			"application": "x3",
			"contract": "hrm"
		},
		"dataset": "hrm0",
		"enableSearch": false,
		"databaseDriver": "mongodb",
		"databaseHost": "localhost",
		"databasePort": 27000,
		"x3server": "X3 Developpement Server",
		"x3SolutionName": "SOLPAIEV6_1",
		"x3ServerFolder": "PAIEV6_1"
	}, {
		"$type": "endPoint",
		"description": "HRM1",
		"applicationRef": {
			"application": "x3",
			"contract": "hrm"
		},
		"dataset": "hrm1",
		"enableSearch": false,
		"databaseDriver": "mongodb",
		"databaseHost": "localhost",
		"databasePort": 27000,
		"x3server": "X3 Developpement Server",
		"x3SolutionName": "SOLPAIEV6_1",
		"x3ServerFolder": "PAIEV6_2"
	}, {
		"$type": "endPoint",
		"description": "HRM2",
		"applicationRef": {
			"application": "x3",
			"contract": "hrm"
		},
		"dataset": "hrm2",
		"enableSearch": false,
		"databaseDriver": "mongodb",
		"databaseHost": "localhost",
		"databasePort": 27000,
		"x3server": "X3 Developpement Server",
		"x3SolutionName": "SOLPAIEV6_2",
		"x3ServerFolder": "PAIEV6_1"
	}, {
		"$type": "endPoint",
		"description": "HRM3",
		"applicationRef": {
			"application": "x3",
			"contract": "hrm"
		},
		"dataset": "hrm3",
		"enableSearch": false,
		"databaseDriver": "mongodb",
		"databaseHost": "localhost",
		"databasePort": 27000,
		"x3server": "X3 Developpement Server",
		"x3SolutionName": "SOLPAIEV6_2",
		"x3ServerFolder": "PAIEV6_2"
	}, {
		"$type": "navigationPage",
		"title": "title_home_page",
		"pageName": "home",
		"modules": []
	}],
	"$localization": {
		"en-us": {
			"title_home_page": "Home Page"
		}
	}
};

var setSessionContext = function(_, forceEp) {
	globals.context = globals.context || {};
	globals.context.session = {
		id: helpers.uuid.generate(),
		getUserLogin: function(_) {
			return "admin";
		},
		getUserProfile: function(_) {
			return {
				user: function(_) {
					// getting the administration ORM
					var db = adminHelper.getCollaborationOrm(_);
					return db.fetchInstance(_, db.model.getEntity(_, "user"), {
						jsonWhere: {
							login: "admin"
						}
					});
				},
				getDefaultX3Endpoints: function(_) {
					return [];
				},
				selectedEndpoint: function(_) {
					return forceEp;
				}
			};
		},
		getSecurityProfile: function(_) {
			return null;
		},
		getData: function(code) {
			return null;
		}
	};
	return true;
};

function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_demo");
}

var importTracer = null; //console.log;

var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets.mongodb_demo.hostname, endPoint.datasets.mongodb_demo.port, {});
	var db = adminTestFixtures.newMongoDb(endPoint.datasets.mongodb_demo.database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");
	start();
});

//start syracuse server
asyncTest("initialize syracuse test server", 1, function(_) {
	require('syracuse-main/lib/syracuse').startServers(_, port);
	ok(true, "server initialized");
	start();
});

function onlyInfo(diags) {
	return adminTestFixtures.onlyInfo(diags);
}


function getEp(_, db, dataset) {
	return db.fetchInstance(_, db.getEntity(_, "endPoint"), {
		jsonWhere: {
			dataset: dataset
		}
	});
}

var db;
var ep = [];


asyncTest("data setup", function(_) {
	db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_demo);
	// import
	var diag = [];
	jsonImport.jsonImport(_, db, "syracuse-admin-demo.json", {
		$diagnoses: diag,
		tracer: importTracer,
	});
	//console.log("import demo db diags (134): "+sys.inspect(diag));
	ok(onlyInfo(diag), "Demo database import ok");

	diag = [];
	jsonImport.jsonImportFromJson(_, db, data_mongo, {
		$diagnoses: diag,
		tracer: importTracer,
	});
	ok(onlyInfo(diag), "Custom data import ok");

	var app = db.fetchInstance(_, db.getEntity(_, "application"), {
		jsonWhere: {
			description: "X3 Hrm"
		}
	});
	ok(app.$uuid != null, "Application X3 Hrm ok");

	ep.push(getEp(_, db, "hrm0"));
	ok(ep[0] && ep[0].$uuid != null && ep[0].description(_) === "HRM0", "Endpoint hrm1 ok");
	ep.push(getEp(_, db, "hrm1"));
	ok(ep[1] && ep[1].$uuid != null && ep[1].description(_) === "HRM1", "Endpoint hrm2 ok");
	ep.push(getEp(_, db, "hrm2"));
	ok(ep[2] && ep[2].$uuid != null && ep[2].description(_) === "HRM2", "Endpoint hrm3 ok");
	ep.push(getEp(_, db, "hrm3"));
	ok(ep[3] && ep[3].$uuid != null && ep[3].description(_) === "HRM3", "Endpoint hrm4 ok");

	start();
});

var ws = [{
	host: "server_0",
	port: "28880"
}, {
	host: "server_1",
	port: "8080"
}, {
	host: "server_2",
	port: "28980"
}, {
	host: "server_3",
	port: "80"
}];

asyncTest("installation with wizard helper API", 5, function(_) {
	setSessionContext(_, ep[0]);
	var siteName = "SITE_0";
	// servers 0 + 1
	var diags = wizardHelper.install(_, siteName, ws.slice(0, 2), true);
	ok(onlyInfo(diags), "HRM Site " + siteName + " installation ok");

	siteName = "SITE_0_BIS";
	// no servers --> This Site will be used only for proxy selection tests
	diags = wizardHelper.install(_, siteName, [], false);
	ok(onlyInfo(diags), "HRM Site " + siteName + " installation ok");

	setSessionContext(_, ep[1]);
	siteName = "SITE_1";
	// server 2
	diags = wizardHelper.install(_, siteName, ws.slice(2, 3), true);
	ok(onlyInfo(diags), "HRM Site " + siteName + " installation ok");

	setSessionContext(_, ep[2]);
	siteName = "SITE_2";
	// no servers
	diags = wizardHelper.install(_, siteName, [], true);
	ok(onlyInfo(diags), "HRM Site " + siteName + " installation ok");

	setSessionContext(_, ep[3]);
	siteName = "SITE_3";
	// servers 1 + 2 + 3
	diags = wizardHelper.install(_, siteName, ws.slice(1), true);
	ok(onlyInfo(diags), "HRM Site " + siteName + " installation ok");

	start();
});


function getSiteOptions(_, siteName, _ep) {
	return {
		site: siteName,
		solution: _ep.x3SolutionName(_),
		folder: _ep.x3ServerFolder(_)
	};
}

function getSite(_, siteName, _ep) {
	return hrmHelper.getHrmSite(_, db, getSiteOptions(_, siteName, _ep));
}

var sites = [],
	servers = [];

asyncTest("check installation data", function(_) {
	var siteName;
	for (var i = 0; i < ep.length; i++) {
		siteName = "SITE_" + i;
		sites.push(getSite(_, siteName, ep[i]));
		ok(sites[i] && sites[i].$uuid != null && sites[i].name(_) === siteName, "Retrieve HRM Site " + siteName + " with helper ok");

	}
	// Store also SITE_0_BIS
	siteName = "SITE_0_BIS";
	sites.push(getSite(_, siteName, ep[0]));
	ok(sites[4] && sites[4].$uuid != null && sites[4].name(_) === siteName, "Retrieve HRM Site " + siteName + " with helper ok");

	strictEqual(sites[0] && sites[0].servers(_).getLength(), 2, "Servers count for " + sites[0].name(_) + " OK [" + sites[0].servers(_).getLength() + "]");
	strictEqual(sites[1] && sites[1].servers(_).getLength(), 1, "Servers count for " + sites[1].name(_) + " OK [" + sites[1].servers(_).getLength() + "]");
	strictEqual(sites[2] && sites[2].servers(_).getLength(), 0, "Servers count for " + sites[2].name(_) + " OK [" + sites[2].servers(_).getLength() + "]");
	strictEqual(sites[3] && sites[3].servers(_).getLength(), 3, "Servers count for " + sites[3].name(_) + " OK [" + sites[3].servers(_).getLength() + "]");
	strictEqual(sites[4] && sites[4].servers(_).getLength(), 0, "Servers count for " + sites[4].name(_) + " OK [" + sites[4].servers(_).getLength() + "]");

	for (var j = 0; j < ws.length; j++) {
		servers.push(hrmHelper.getHrmServer(_, db, ws[j]));
		strictEqual(servers[j] && servers[j].toString(_), ws[j].host + ":" + ws[j].port, "Server OK [" + (servers[j] && servers[j].toString(_)) + "]");
	}

	start();
});


asyncTest("round robin load balancer tests", 14, function(_) {
	var opt = {
		ignoreAvailability: true
	};

	// site0 : servers 0 + 1
	// site1 : server 2
	// site2 : no servers
	// site3 : servers 1 + 2 + 3

	// First attempt on site0 --> must be the first site's asociated server
	var optSite0 = getSiteOptions(_, "SITE_0", ep[0]);
	var server = lb.selectServer(_, optSite0, opt);
	// server 0
	ok(server && server.toString(_) === ws[0].host + ":" + ws[0].port, "First selected server for site0 OK [" + (server && server.toString(_)) + "]");

	// Second attempt on same site0 --> must be the second site's asociated server
	server = lb.selectServer(_, optSite0, opt);
	// server 1
	ok(server && server.toString(_) === ws[1].host + ":" + ws[1].port, "Second selected server for site0 OK [" + (server && server.toString(_)) + "]");

	// First attempt on site3 --> must not use the first site's asociated server because it was already used once
	var optSite3 = getSiteOptions(_, "SITE_3", ep[3]);
	server = lb.selectServer(_, optSite3, opt);
	// server 2
	ok(server && server.toString(_) === ws[2].host + ":" + ws[2].port, "First selected server for site3 OK [" + (server && server.toString(_)) + "]");

	// First attempt on site1 --> must use the first site's asociated server because it's the only one
	var optSite1 = getSiteOptions(_, "SITE_1", ep[1]);
	server = lb.selectServer(_, optSite1, opt);
	// server 2
	ok(server && server.toString(_) === ws[2].host + ":" + ws[2].port, "First selected server for site1 OK [" + (server && server.toString(_)) + "]");

	// First attempt on site2 --> must fail because of no server associated
	var optSite2 = getSiteOptions(_, "SITE_2", ep[2]);
	try {
		server = lb.selectServer(_, optSite2, opt);
	} catch (e) {
		// no server
		ok(true, "Server selection failed for site2 OK [" + e.message + "]");
	}

	// Second attempt on site3 --> must use the third site's asociated server
	server = lb.selectServer(_, optSite3, opt);
	// server 3
	ok(server && server.toString(_) === ws[3].host + ":" + ws[3].port, "Second selected server for site3 OK [" + (server && server.toString(_)) + "]");

	// Third attempt on site3 --> must use the first site's asociated server
	server = lb.selectServer(_, optSite3, opt);
	// server 1
	ok(server && server.toString(_) === ws[1].host + ":" + ws[1].port, "Third selected server for site3 OK [" + (server && server.toString(_)) + "]");

	// Fourth attempt on site3 --> must use the same server because because forced
	server = lb.selectServer(_, optSite3, {
		host: ws[1].host,
		port: ws[1].port,
		ignoreAvailability: true
	});
	// server 1
	ok(server && server.toString(_) === ws[1].host + ":" + ws[1].port, "Fourth forced selected server for site3 OK [" + (server && server.toString(_)) + "]");

	try {
		// Second attempt on site1 (without ignoreAvailability --> must fail because server will be banned
		server = lb.selectServer(_, optSite1, {
			isUnitTest: true
		});
	} catch (e) {
		// no server
		ok(true, "Server selection failed for site1 OK [" + e.message + "]");
	}

	// Fifth attempt on site3 --> must use the third site's asociated server because the second was banned just before
	server = lb.selectServer(_, optSite3, opt);
	// server 3
	ok(server && server.toString(_) === ws[3].host + ":" + ws[3].port, "Fifth selected server for site3 OK [" + (server && server.toString(_)) + "]");

	// Third attempt on site0 --> must use the first site's asociated server
	server = lb.selectServer(_, optSite0, opt);
	// server 0
	ok(server && server.toString(_) === ws[0].host + ":" + ws[0].port, "Third selected server for site0 OK [" + (server && server.toString(_)) + "]");

	try {
		// Sixth attempt on site3 (without ignoreAvailability --> must fail because all servers will be banned
		server = lb.selectServer(_, optSite3, {
			isUnitTest: true
		});
	} catch (e) {
		// no server
		ok(true, "Server selection failed for site3 OK [" + e.message + "]");
	}

	// Fourth attempt on site0 --> must use the first site's asociated server because the other must be banned
	server = lb.selectServer(_, optSite0, opt);
	// server 0
	ok(server && server.toString(_) === ws[0].host + ":" + ws[0].port, "Fourth selected server for site0 OK [" + (server && server.toString(_)) + "]");

	try {
		// Seventh attempt on site3 --> must fail because all servers have been banned
		server = lb.selectServer(_, optSite3, opt);
	} catch (e) {
		// no server
		ok(true, "Server selection failed for site3 OK [" + e.message + "]");
	}

	start();
});


function registerProxy(_, site, server) {
	var webServerBaseUrl = "http://" + server.host(_) + ":" + server.port(_);
	// Instanciate proxy
	var p = new proxy.Proxy(_, webServerBaseUrl);

	// set $uuid, just for unit test
	var $uuid = uuid.generate();
	p.$uuid = $uuid;
	// Store proxy in httpSession
	return proxyHelper.storeInHttpSession(globals.context, {
		solution: site.endpoint(_).x3SolutionName(_),
		folder: site.endpoint(_).x3ServerFolder(_),
		site: site.name(_),
		jsid: $uuid,
		proxy: p
	});
}

function getProxy(_, site, server, jsid) {
	return proxyHelper.getProxyInstance(globals.context, site.endpoint(_).x3SolutionName(_), site.endpoint(_).x3ServerFolder(_), site.name(_), server.host(_), server.port(_), jsid);
}

var proxies = [];
asyncTest("proxy selector tests", 35, function(_) {

	// !!! The goal of this test is to validate the proxy selection alogorithm.
	// !!! We don't care about sites and servers associations here.
	globals.context = globals.context || {};
	globals.context.httpSession = {};

	// register first proxy
	proxies[0] = registerProxy(_, sites[0], servers[0]);
	// Check context
	var proxyStored = globals.context.httpSession.hrm.sessions.SOLPAIEV6_1.PAIEV6_1.SITE_0[proxies[0].$uuid];
	strictEqual(proxyStored && proxyStored.$uuid, proxies[0].$uuid, "proxy0 registered and stored for site0 OK");

	// ** Retrieve proxy for same site, same solution, same folder
	var p = getProxy(_, sites[0], servers[0], proxies[0].$uuid);
	strictEqual(p.$uuid, proxies[0].$uuid, "proxy0 found for initial site (site0) with correct JSESSIONID OK");

	p = getProxy(_, sites[0], servers[0], "bad_uuid");
	strictEqual(p.$uuid, proxies[0].$uuid, "proxy0 found for initial site (site0) with bad JSESSIONID OK");

	p = getProxy(_, sites[0], servers[1], null);
	ok(!p, "proxy0 not taken into account for initial site (site0) with wrong base url OK");

	/////

	// ** Retrieve proxy for other site, same solution, same folder
	p = getProxy(_, sites[4], servers[0], null);
	strictEqual(p.$uuid, proxies[0].$uuid, "proxy0 found for other site (site4) OK");

	// Check context
	proxyStored = globals.context.httpSession.hrm.sessions.SOLPAIEV6_1.PAIEV6_1.SITE_0_BIS[proxies[0].$uuid];
	strictEqual(proxyStored && proxyStored.$uuid, proxies[0].$uuid, "proxy0 propagated for site4 OK");

	p = getProxy(_, sites[4], servers[1], null);
	ok(!p, "proxy0 not taken into account for other site (site4) with wrong base url OK");



	// ** Retrieve proxy for other site, same solution, other folder
	p = getProxy(_, sites[1], servers[0], null);
	strictEqual(p.$uuid, proxies[0].$uuid, "proxy0 (never registred for site1) match to site0's OK");

	// Check context
	proxyStored = globals.context.httpSession.hrm.sessions.SOLPAIEV6_1.PAIEV6_2.SITE_1[proxies[0].$uuid];
	strictEqual(proxyStored && proxyStored.$uuid, proxies[0].$uuid, "proxy0 propagated for site1 OK");

	p = getProxy(_, sites[1], servers[1], null);
	ok(!p, "proxy0 not taken into account for other site (site1) with wrong base url OK");

	// register second proxy
	proxies[1] = registerProxy(_, sites[1], servers[1]);
	// Check context
	proxyStored = globals.context.httpSession.hrm.sessions.SOLPAIEV6_1.PAIEV6_2.SITE_1[proxies[1].$uuid];
	strictEqual(proxyStored && proxyStored.$uuid, proxies[1].$uuid, "proxy1 registered and stored for site1 OK");

	p = getProxy(_, sites[1], servers[1], proxies[1].$uuid);
	strictEqual(p.$uuid, proxies[1].$uuid, "proxy1 found for initial site (site1) with correct JSESSIONID OK");

	p = getProxy(_, sites[1], servers[1], "bad_uuid");
	strictEqual(p.$uuid, proxies[1].$uuid, "proxy1 found for initial site (site1) with bad JSESSIONID OK");

	/////

	// ** Retrieve proxy for other site, other solution, other folder (but same name)
	p = getProxy(_, sites[2], servers[0], null);
	strictEqual(p.$uuid, proxies[0].$uuid, "proxy0 (never registred for site2) match to site0's OK");

	// Check context
	proxyStored = globals.context.httpSession.hrm.sessions.SOLPAIEV6_2.PAIEV6_1.SITE_2[proxies[0].$uuid];
	strictEqual(proxyStored && proxyStored.$uuid, proxies[0].$uuid, "proxy0 propagated for site0 OK");

	p = getProxy(_, sites[2], servers[1], null);
	strictEqual(p.$uuid, proxies[1].$uuid, "proxy1 (never registred for site2) match to site1's OK");

	// Check context
	proxyStored = globals.context.httpSession.hrm.sessions.SOLPAIEV6_2.PAIEV6_1.SITE_2[proxies[1].$uuid];
	strictEqual(proxyStored && proxyStored.$uuid, proxies[1].$uuid, "proxy1 propagated for site2 OK");

	p = getProxy(_, sites[2], servers[2], null);
	ok(!p, "proxy0 and proxy1 are not taken into account for other site (site2) with wrong base url OK");

	// register third proxy
	proxies[2] = registerProxy(_, sites[2], servers[2]);
	// Check context
	proxyStored = globals.context.httpSession.hrm.sessions.SOLPAIEV6_2.PAIEV6_1.SITE_2[proxies[2].$uuid];
	strictEqual(proxyStored && proxyStored.$uuid, proxies[2].$uuid, "proxy2 registered and stored for site2 OK");

	p = getProxy(_, sites[2], servers[2], proxies[2].$uuid);
	strictEqual(p.$uuid, proxies[2].$uuid, "proxy2 found for initial site (site2) with correct JSESSIONID OK");

	p = getProxy(_, sites[2], servers[2], "bad_uuid");
	strictEqual(p.$uuid, proxies[2].$uuid, "proxy2 found for initial site (site2) with bad JSESSIONID OK");

	/////

	// ** Retrieve proxy for other site, other solution, other folder (but same name)
	p = getProxy(_, sites[3], servers[0], null);
	strictEqual(p.$uuid, proxies[0].$uuid, "proxy0 (never registred for site3) match to site0's OK");

	// Check context
	proxyStored = globals.context.httpSession.hrm.sessions.SOLPAIEV6_2.PAIEV6_2.SITE_3[proxies[0].$uuid];
	strictEqual(proxyStored && proxyStored.$uuid, proxies[0].$uuid, "proxy0 propagated for site3 OK");

	p = getProxy(_, sites[3], servers[1], null);
	strictEqual(p.$uuid, proxies[1].$uuid, "proxy1 (never registred for site3) match to site1's OK");

	// Check context
	proxyStored = globals.context.httpSession.hrm.sessions.SOLPAIEV6_2.PAIEV6_2.SITE_3[proxies[1].$uuid];
	strictEqual(proxyStored && proxyStored.$uuid, proxies[1].$uuid, "proxy1 propagated for site3 OK");

	p = getProxy(_, sites[3], servers[2], null);
	strictEqual(p.$uuid, proxies[2].$uuid, "proxy2 (never registred for site3) match to site2's OK");

	// Check context
	proxyStored = globals.context.httpSession.hrm.sessions.SOLPAIEV6_2.PAIEV6_2.SITE_3[proxies[2].$uuid];
	strictEqual(proxyStored && proxyStored.$uuid, proxies[2].$uuid, "proxy2 propagated for site3 OK");

	p = getProxy(_, sites[3], servers[3], null);
	ok(!p, "proxy0, proxy1 and proxy2 are not taken into account for other site (site3) with wrong base url OK");

	// register third proxy
	proxies[3] = registerProxy(_, sites[3], servers[3]);
	// Check context
	proxyStored = globals.context.httpSession.hrm.sessions.SOLPAIEV6_2.PAIEV6_2.SITE_3[proxies[3].$uuid];
	strictEqual(proxyStored && proxyStored.$uuid, proxies[3].$uuid, "proxy3 registered and stored for site3 OK");

	p = getProxy(_, sites[3], servers[3], proxies[3].$uuid);
	strictEqual(p.$uuid, proxies[3].$uuid, "proxy3 found for initial site (site3) with correct JSESSIONID OK");

	p = getProxy(_, sites[3], servers[3], "bad_uuid");
	strictEqual(p.$uuid, proxies[3].$uuid, "proxy3 found for initial site (site3) with bad JSESSIONID OK");

	/////

	// ** Retrieve proxies previously not found
	p = getProxy(_, sites[0], servers[1], null);
	p = getProxy(_, sites[0], servers[2], null);
	p = getProxy(_, sites[0], servers[3], null);
	//
	p = getProxy(_, sites[1], servers[2], null);
	p = getProxy(_, sites[1], servers[3], null);
	//
	p = getProxy(_, sites[2], servers[3], null);

	strictEqual(Object.keys(globals.context.httpSession.hrm.sessions.SOLPAIEV6_1.PAIEV6_1.SITE_0).length, 4, "All proxies retrieved for site1 OK");
	strictEqual(Object.keys(globals.context.httpSession.hrm.sessions.SOLPAIEV6_1.PAIEV6_2.SITE_1).length, 4, "All proxies retrieved for site1 OK");
	strictEqual(Object.keys(globals.context.httpSession.hrm.sessions.SOLPAIEV6_2.PAIEV6_1.SITE_2).length, 4, "All proxies retrieved for site1 OK");
	strictEqual(Object.keys(globals.context.httpSession.hrm.sessions.SOLPAIEV6_2.PAIEV6_2.SITE_3).length, 4, "All proxies retrieved for site1 OK");

	start();

});

test("stop  tests", 0, function() {
	doStop = true;
	start();
});