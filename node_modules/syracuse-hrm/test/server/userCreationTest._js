"use strict";

var helpers = require('syracuse-core/lib/helpers');
var config = require('config'); // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require('streamline-mongodb');
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var globals = require("streamline/lib/globals");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var uc = require('syracuse-hrm/lib/userCreation');


//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;

helpers.pageFileStorage = false;

var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_demo");

var port = (config.unit_test && config.unit_test.serverPort) || 3004;


var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets.mongodb_demo.hostname, endPoint.datasets.mongodb_demo.port, {});
	var db = adminTestFixtures.newMongoDb(endPoint.datasets.mongodb_demo.database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");
	start();
});

//start syracuse server
asyncTest("initialize syracuse test server", 1, function(_) {
	require('syracuse-main/lib/syracuse').startServers(_, port);
	ok(true, "server initialized");
	start();
});

var ep = [];
var db;

function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_demo");
}


asyncTest("user deactivation", 8, function(_) {
	db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_demo);
	var user = db.fetchInstance(_, db.getEntity(_, "user"), {
		jsonWhere: {
			login: "guest"
		}
	});
	strictEqual( !! user, true, "guest exists");
	if (user)
		strictEqual(user.active(_), true, "guest active");
	var res = uc.deactivate(_, "guest");
	try {
		res = JSON.parse(res);
	} catch (e) {
		strictEqual(false, true, "Parse error " + e);
	}
	strictEqual(res && res.$diagnoses && res.$diagnoses.length === 1, true, "1 Diagnose");
	if (res && res.$diagnoses)
		strictEqual(res.$diagnoses[0].$severity, "success", "success diagnose");
	var user = db.fetchInstance(_, db.getEntity(_, "user"), {
		jsonWhere: {
			login: "guest"
		}
	});
	strictEqual( !! user, true, "guest exists");
	if (user)
		strictEqual(user.active(_), false, "guest inactive");
	var res = uc.deactivate(_, "xz7e1q"); // non existing user
	try {
		res = JSON.parse(res);
	} catch (e) {
		strictEqual(false, true, "Parse error " + e);
	}
	strictEqual(res && res.$diagnoses && res.$diagnoses.length === 1, true, "1 Diagnose");
	if (res && res.$diagnoses)
		strictEqual(res.$diagnoses[0].$severity, "error", "error diagnose for non existing user");
	start();
});


test("stop  tests", 0, function() {
	doStop = true;
	start();
});