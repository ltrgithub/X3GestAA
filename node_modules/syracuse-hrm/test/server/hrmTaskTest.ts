"use strict";

var helpers = require('@sage/syracuse-core').helpers;
var locale = require('@sage/syracuse-core').locale;
var uuid = helpers.uuid;

var config = require('config'); // must be first syracuse require
var registry = require("../../../../src/sdata/sdataRegistry");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var ez = require('ez-streams');
var mongodb = require('mongodb');
var dataModel = require("../../../../src/orm/dataModel");

var x3Mock = require("syracuse-x3/test/fixtures/x3Mock");
var x3MockServer;
var x3port = 3005;

var jsonImport = require("syracuse-import/lib/jsonImport");

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;

helpers.pageFileStorage = false;
var acceptLanguage = "fr,fr-fr";

var tracer;

var contractUrl = "/sdata/syracuse/collaboration/mongodb_admin_test/";

var port = (config.unit_test && config.unit_test.serverPort) || 3004;
var baseUrl = "http://localhost:" + port;
var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_admin_test");

import { assert } from 'chai';
Object.keys(assert).forEach(key => {
	if (key !== 'isNaN') global[key] = assert[key];
});

describe(module.id, () => {

	function _encodePass(login, pass) {
		return adminTestFixtures.encodePassword(login, pass);
	}

	function onlyInfo(diags) {
		return adminTestFixtures.onlyInfo(diags);
	}

	function hasErrors(body) {
		var hasErr = body.$diagnoses && body.$diagnoses.some(function(diag) {
			return diag.$severity == "error" || diag.severity === "error";
		});
		if (!hasErr) {
			for (var key in body) {
				if (typeof body[key] === "object") hasErr = hasErr || (body[key] && hasErrors(body[key]));
			}
		}
		return hasErr;
	}

	function getCookie(_, login, pass, status) {
		var resp = adminTestFixtures.getCookie(_, baseUrl, login, pass, true, status);
		acceptLanguage = resp.headers["content-language"] || acceptLanguage;
		return resp.headers["set-cookie"];
	}

	function post(_, cookie, url, data, statusCode, returnFullResponse) {
		var response = ez.devices.http.client({
			method: "post",
			url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
			headers: {
				"content-type": "application/json",
				"Accept-Language": acceptLanguage,
				cookie: cookie
			}
		}).end(JSON.stringify(data)).response(_);
		strictEqual(response.statusCode, statusCode || 201, "status verified : post " + url);
		if (returnFullResponse) return {
			headers: response.headers,
			body: JSON.parse(response.readAll(_))
		};
		else return JSON.parse(response.readAll(_));
	}

	function put(_, cookie, url, data, statusCode, returnFullResponse) {

		//console.log("request \n url=" + url + "\ndata=" + JSON.stringify(data, null, 2));

		var response = ez.devices.http.client({
			method: "put",
			url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
			headers: {
				"content-type": "application/json",
				"Accept-Language": acceptLanguage,
				cookie: cookie
			}
		}).end(JSON.stringify(data)).response(_);
		strictEqual(response.statusCode, statusCode || 200, "status verified : put " + url);
		if (returnFullResponse) return {
			headers: response.headers,
			body: JSON.parse(response.readAll(_))
		};
		else return JSON.parse(response.readAll(_));
	}

	function get(_, cookie, url, statusCode, facet) {
		var type = facet || "generic.$details";
		//console.log(url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/" + url);
		var response = ez.devices.http.client({
			method: "get",
			url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/" + url,
			headers: {
				cookie: cookie,
				"Accept-Language": acceptLanguage,
				accept: "application/json;vnd.sage=syracuse"
			}
		}).end().response(_);
		strictEqual(response.statusCode, statusCode || 200, "status verified : get " + url);
		return JSON.parse(response.readAll(_));
	}

	function del(_, cookie, url, statusCode) {
		var response = ez.devices.http.client({
			method: "delete",
			url: baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/" + url,
			headers: {
				cookie: cookie
			}
		}).end().response(_);
		strictEqual(response.statusCode, statusCode || 200, "status verified : del " + url);
		return JSON.parse(response.readAll(_));
	}


	it('init database', function(_) {
		locale.setCurrent(_, "en-US");
		var server = new mongodb.Server(endPoint.datasets["mongodb_admin_test"].hostname, endPoint.datasets["mongodb_admin_test"].port, {});
		var db = adminTestFixtures.newMongoDb(config.collaboration.dataset, server, {});
		db = db.open(_);
		db.dropDatabase(_);
		//
		ok(true, "mongodb initialized");

	});

	//start syracuse server
	it('initialize syracuse test server', function(_) {
		require('syracuse-main/lib/syracuse').startServers(_, port);
		ok(true, "server initialized");
	});

	function _addGroupToUser(_, userUuid, cookie, groupUuid, index) {
		// Fetch user WC
		var body = post(_, cookie, "users('" + userUuid + "')/$workingCopies?trackingId=" + uuid.generate(), {});

		//console.log('body ' + JSON.stringify(body, null, 2));
		// add the group to the group list
		tracer && tracer("add group to user start");
		body = put(_, cookie, body.$url, {
			$key: userUuid,
			$etag: body.$etag,
			groups: [{
				$uuid: groupUuid,
				$index: index || 0
			}]
		});
		tracer && tracer("link user group body(1): " + sys.inspect(body, null, 4));
		body = put(_, cookie, body.$url, {
			$key: userUuid,
			$etag: body.$etag,
			$actions: {
				$save: {
					$isRequested: true
				}
			}
		});
		//		tracer && tracer("link user group body(2): "+sys.inspect(body,null,4));
	}

	it('initialize x3 application mock server', function(_) {
		//tracer && tracer("creating server");
		x3MockServer = x3Mock.create(_, x3port);
		ok(true, "server created");
	});

	function _getModel() {
		return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_admin_test");
	}

	it('initialize data for hrm task test ', function(_) {
		var diag = [];
		var dataset = endPoint.datasets["mongodb_admin_test"];
		var db = dataModel.getOrm(_, _getModel(), dataset);

		jsonImport.jsonImport(_, db, "syracuse-admin-demo-hrm.json", {
			$diagnoses: diag
		});
		ok(onlyInfo(diag), "mongodb_admin_test import ok");
	});


	it('initialization for hrm task test ', function(_) {
		var cookie = getCookie(_, 'admin', 'admin', 200);

		// create supdvlp solution
		// x3solution
		var app = adminHelper.getApplication(_, "x3", "hrm");

		var endpoint = adminHelper.getEndpoint(_, {
			dataset: "HRMDVLP_PAIEV6"
		});
		var endpointUUID = endpoint.$uuid;

		// create user AP
		var user = {
			login: "AP",
			firstName: "Obi Wan",
			lastName: "Kenobi",
			password: _encodePass("AP", "AP"),
			endpoints: [{
				$index: 0,
				$uuid: uuid.generate(),
				login: "ADMIN",
				endpoint: {
					$uuid: endpointUUID
				}
			}]
		};
		var body = post(_, cookie, "users/$template/$workingCopies?trackingId=" + uuid.generate(), {});
		var data = helpers.object.clone(user);
		user.$uuid = body.$uuid;
		data.$key = user.$uuid;
		data.$etag = body.$etag;
		data.$actions = {
			$save: {
				$isRequested: true
			}
		};
		tracer && tracer("create user =======================");
		body = put(_, cookie, body.$url, data);
		tracer && tracer("create user body: " + sys.inspect(body, null, 4));
		ok(onlyInfo(body.$actions.$save.$diagnoses), "create user: " + user.login + " ok");
		// get admin group
		var dbAdmin = adminHelper.getCollaborationOrm(_);
		var adminGroup = dbAdmin.fetchInstance(_, dbAdmin.model.getEntity(_, "group"), {
			jsonWhere: {
				description: "Super administrators"
			}
		});
		var user = dbAdmin.fetchInstance(_, dbAdmin.model.getEntity(_, "user"), {
			jsonWhere: {
				login: "AP"
			}
		});
		_addGroupToUser(_, user.$uuid, cookie, adminGroup.$uuid, 0);
	});

	it('Test x3 task behavior ', function(_) {


		var cookie = getCookie(_, 'AP', 'AP', 200);

		// get the working copy of x3 task
		var resp = get(_, cookie, "hrmTasks/$template/$workingCopies?representation=hrmTask.$edit&$method=POST", 201, "$edit");

		var url = resp.$url;
		/*{
     "$etag":2,
     "$uuid":"9ef67c33-ec1e-4be4-b945-7994322d7b10",
     "endpoint":{"$uuid":"a879499c-593f-4e0c-be53-30a53285da80"},
     "$url":"http://localhost:8124/sdata/syracuse/collaboration/syracuse/$workingCopies('7df19c9c-8c0e-4d73-9bda-67a5fb423602')?representation=hrmTask.$edit&count=50"
     }
     */
		var endpoint = adminHelper.getEndpoint(_, {
			dataset: "SUPERV"
		});
		resp = put(_, cookie, url, {
			$uuid: resp.$uuid,
			$etag: resp.$etag,
			endpoint: {
				$uuid: endpoint.$uuid
			},
			$url: url
		}, 200, "$edit");

		ok(resp.body.$diagnoses[0].$severity === "warning", "Warning : Entity does not exist for endpoint");


		endpoint = adminHelper.getEndpoint(_, {
			dataset: "HRMDVLP_PAIEV6"
		});
		resp = put(_, cookie, url, {
			$uuid: resp.$uuid,
			$etag: resp.$etag,
			endpoint: {
				$uuid: endpoint.$uuid
			},
			$url: url
		}, 200, "$edit");
		ok(true, JSON.stringify(resp));
		ok(!(resp.body && resp.body.$diagnoses), "Successfull endpoint change");
	});

	it('cleanup', function() {
		if (x3MockServer) {
			x3MockServer.close();
		}
	});
});