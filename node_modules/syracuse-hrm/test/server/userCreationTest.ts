"use strict";

var helpers = require('@sage/syracuse-core').helpers;

var config = require('config'); // must be first syracuse require
var dataModel = require("@sage/syracuse-lib/src/orm/dataModel");
var registry = require("@sage/syracuse-lib/src/sdata/sdataRegistry");
var mongodb = require('mongodb');
var adminTestFixtures = require("@sage/syracuse-lib/test/collaboration/fixtures/adminTestFixtures");
var globals = require('streamline-runtime').globals;
var adminHelper = require("@sage/syracuse-lib/src/collaboration/helpers").AdminHelper;
var uc = require('../../lib/userCreation');
var apis = require('@sage/syracuse-core').apis;


//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;

helpers.pageFileStorage = false;

var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_demo");

var port = (config.unit_test && config.unit_test.serverPort) || 3004;

import { assert } from 'chai';
Object.keys(assert).forEach(key => {
	if (key !== 'isNaN') global[key] = assert[key];
});

describe(module.id, () => {

	it('init database', function(_) {
		var server = new mongodb.Server(endPoint.datasets.mongodb_demo.hostname, endPoint.datasets.mongodb_demo.port, {});
		var db = adminTestFixtures.newMongoDb(endPoint.datasets.mongodb_demo.database, server, {});
		db = db.open(_);
		db.dropDatabase(_);
		ok(true, "mongodb initialized");
	});

	//start syracuse server
	it('initialize syracuse test server', function(_) {
		apis.get('test-runner').startServers(_, port);
		ok(true, "server initialized");
	});

	var ep = [];
	var db;

	function _getModel() {
		return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_demo");
	}


	it('user deactivation', function(_) {
		db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_demo);
		var user = db.fetchInstance(_, db.getEntity(_, "user"), {
			jsonWhere: {
				login: "guest"
			}
		});
		strictEqual(!!user, true, "guest exists");
		if (user)
			strictEqual(user.active(_), true, "guest active");
		var res = uc.deactivate(_, "guest");
		strictEqual(res && res.$diagnoses && res.$diagnoses.length === 1, true, "1 Diagnose");
		if (res && res.$diagnoses)
			strictEqual(res.$diagnoses[0].$severity, "success", "success diagnose");
		var user = db.fetchInstance(_, db.getEntity(_, "user"), {
			jsonWhere: {
				login: "guest"
			}
		});
		strictEqual(!!user, true, "guest exists");
		if (user)
			strictEqual(user.active(_), false, "guest inactive");
		var res = uc.deactivate(_, "xz7e1q"); // non existing user
		strictEqual(res && res.$diagnoses && res.$diagnoses.length === 1, true, "1 Diagnose");
		if (res && res.$diagnoses)
			strictEqual(res.$diagnoses[0].$severity, "error", "error diagnose for non existing user");
	});

	it('user reactivation', function(_) {
		var res = uc.deactivate(_, "guest"); // deactivate first
		db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_demo);
		var user = db.fetchInstance(_, db.getEntity(_, "user"), {
			jsonWhere: {
				login: "guest"
			}
		});
		strictEqual(!!user, true, "guest exists");
		if (user)
			strictEqual(user.active(_), false, "guest inactive");
		var res = uc.reactivate(_, "guest");
		strictEqual(res && res.$diagnoses && res.$diagnoses.length === 1, true, "1 Diagnose");
		if (res && res.$diagnoses)
			strictEqual(res.$diagnoses[0].$severity, "success", "success diagnose");
		var user = db.fetchInstance(_, db.getEntity(_, "user"), {
			jsonWhere: {
				login: "guest"
			}
		});
		strictEqual(!!user, true, "guest exists");
		if (user)
			strictEqual(user.active(_), true, "guest active");
		var res = uc.deactivate(_, "xz7e1q"); // non existing user
		strictEqual(res && res.$diagnoses && res.$diagnoses.length === 1, true, "1 Diagnose");
		if (res && res.$diagnoses)
			strictEqual(res.$diagnoses[0].$severity, "error", "error diagnose for non existing user");
	});
});