"use strict";

var adminHelper = require("@sage/syracuse-lib/src/collaboration/helpers").AdminHelper;
var locale = require('streamline-locale');
var globals = require('streamline-runtime').globals;
var hrmHelper = require('./hrmHelper');

exports.$exported = true;

/// !doc
/// 
/// # HRM Site Wizard Helper  
/// This helper module facilitate installation and uninstallation needed to be able to have HRM portals links on Syracuse navigation page.  
/// To use this module do `var wizardHelper = require('./wizardHelper')`.  
/// All the methods are asynchronous.  
/// 

/// 
/// -------------
/// ### install :
/// ``` javascript
/// wizardHelper.install(_, siteName, webServers, sslmode, devmode);  
/// ```
/// It allows to create HRM site, menu item, menu block and menu module automatically.  
/// 
/// * `siteName` : `String` : is the name of the HRM site.  
/// * `webServers` is an array of objects that represent Safe X3 Web Servers.  
/// Each object must contain two properties :  
///     * host : `String`. The hostname of the server.   
///     * http : `String`. The HTTP port of the Tomcat server.  
///     * sslEnabled : `Boolean`. Defines if the web server is configured to handle HTTPS.  
///     * https : `String`. The HTTPS port of the Tomcat server.  
/// 
/// ``` javascript
///    var webServers = [{  
///         host: "server_1",  
///         http: "28880"  
///         sslEnabled: true,  
///         https: "28843"
///    }, {  
///         host: "server_2",  
///         http: "8080"  
///    }];  
/// ```  
/// 
/// * `sslmode` : `Boolean` : define if the site is accessible throught HTTP or HTTPS.    
/// * `devmode` : `Boolean` : define if severals menu items have to be created (one global and one per server).  
/// 
exports.install = function(_, siteName, webServers, sslmode, devmode) {
	var db = adminHelper.getCollaborationOrm(_);
	var selectedEp = globals.context.session.getUserProfile(_).selectedEndpoint(_);
	// Get/update or create hrmSite instance
	var options = {
		name: siteName,
		devmode: (devmode > 0),
		secure: (sslmode > 0),
		ep: selectedEp,
		webServers: webServers
	};
	var hrmSite = hrmHelper.getHrmSite(_, db, {
		solution: selectedEp.getSolutionName(_),
		folder: selectedEp.x3ServerFolder(_),
		site: siteName
	});

	if (!hrmSite) {
		hrmSite = hrmHelper.createHrmSite(_, db, options);
	} else {
		hrmHelper.updateHrmSite(_, db, hrmSite, options);
	}
	return hrmSite.install(_);
};

/// 
/// -------------
/// ### uninstall :
/// ``` javascript
/// wizardHelper.uninstall(_, siteName);  
/// ```
/// It allows to remove HRM site, menu items, menu block and menu module automatically.  
/// 
/// * `siteName` : `String` : is the name of the HRM site.  
/// 
exports.uninstall = function(_, siteName) {
	var db = adminHelper.getCollaborationOrm(_);
	var selectedEp = globals.context.session.getUserProfile(_).selectedEndpoint(_);
	var hrmSite = hrmHelper.getHrmSite(_, db, {
		solution: selectedEp.getSolutionName(_),
		folder: selectedEp.x3ServerFolder(_),
		site: siteName
	});
	var res;
	if (hrmSite) {
		res = hrmSite.uninstall(_);
		if (hrmSite.deleteSelf(_) === true) {
			res.$diagnoses.push(hrmHelper.formatDiagnosis("info", locale.format(module, "removeSiteOk", hrmSite.name(_))));
		} else {
			res.$diagnoses.push(hrmHelper.formatDiagnosis("error", locale.format(module, "removeSiteFailed", hrmSite.name(_))));
		}
	} else {
		res = {
			$diagnoses: [hrmHelper.formatDiagnosis("warning", locale.format(module, "noSite", siteName))]
		};
	}
	return res;
};