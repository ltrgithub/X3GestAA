"use strict";
var locale = require('streamline-locale');
var globals = require('streamline-runtime').globals;
var authHelper = require('syracuse-auth/lib/helpers');

exports.$exported = true;

/* Parameters:
 * - login: Login of the newly created Syracuse user
 * - reflogin: HRM user login of the reference user (it's not a Syracuse login)
 * - usr_code : new parameter that is HRM user's code
 * - usr: Login of the newly created X3 user
 * - title, firstname, lastname, email: title (i. e. 'mr', 'mrs'), first name, last name, email of the newly created Syracuse user (and of the newly created X3 user too)
 * - tel: telephone of the newly created X3 user
 * - fax: Fax of the newly created X3 user
 * - range: 1: only do action for current endpoint and all endpoints of different applications, 3: do action for all endpoints
 * return value: JSON structure with $diagnoses array (may have length 0)
 */
function user(_, login, reflogin, usr_code, usr, title, firstname, lastname, email, tel, fax, range) {
	// console.log("Login '" + login + "' reflogin '" + reflogin + "' usr_code '" + usr_code + "' usr '" + usr + "' title '" + title + "' firstname '" + firstname + "' lastname '" + lastname + "' email '" + email + "' tel '" + tel + "' fax '" + fax + "' range '" + range);

	function _addError(message, description) {
		if (description) {
			diagnoses.push({
				$severity: "error",
				$message: message,
				endpoint: description
			});
		} else {
			diagnoses.push({
				$severity: "error",
				$message: message,
			});
		}
	}

	function _addMessage(severity, message, description) {
		diagnoses.push({
			$severity: severity,
			$message: message,
			endpoint: description
		});
	}

	function _hasError() {
		return diagnoses.some(function(diag) {
			return diag.$severity === "error";
		});
	}

	function makeResult() {
		var result = {
			$diagnoses: diagnoses
		};
		if (x3RefUser2) {
			result.referenceUser = x3RefUser2;
		}
		return JSON.stringify(result);
	}

	var diagnoses = [];
	if (!login) {
		_addError(locale.format(module, "emptySyraUser"));
		return makeResult();
	}
	// get current endpoint
	var ep = globals && globals.context && globals.context.sdataContext && globals.context.sdataContext.endpoint;

	if (!ep) {
		ep = globals && globals.context && globals.context.session && globals.context.session.getUserProfile(_);
		if (ep) ep = ep.selectedEndpoint(_);
		if (!ep) {
			_addError(locale.format(module, "noEndpoint"));
			return makeResult();
		}
	}
	// log name of current endpoint
	// console.log("HRM user creation " + ep.description(_));
	var x3RefUser2;
	// Syracuse user
	var adminHelpers = require('syracuse-collaboration/lib/helpers');
	var db = adminHelpers.AdminHelper.getCollaborationOrm(_);
	var whereClause = '(code eq "license")';
	var users = db.model.getEntity(_, "user");
	// find users which have a user endpoint with correct login and a user endpoint with current endpoint 
	// (cannot find out whether both conditions are simultaneously satisfied for same user endpoint)
	var ref_users = db.fetchInstances(_, users, {
		jsonWhere: {
			'endpoints.login': reflogin,
			'endpoints.endpoint._uuid': ep.$uuid
		}
	});
	// the query above will also find users where 'reflogin' is the login of one user endpoint and 'ep.$uuid' is the UUID of another user endpoint.
	// have to find out explicitly whether login name and endpoint really fit together
	var ref_user;
	ref_users.some_(_, function(_, ref_user0) {
		var endps = ref_user0.endpoints(_).toArray(_);
		if (endps.some_(_, function(_, endp) {
			if (endp.login(_) === reflogin && endp.endpoint(_).$uuid === ep.$uuid) return true;
			return false;
		})) {
			ref_user = ref_user0;
			return true;
		}
		return false;
	});
	if (!ref_user) {
		// reference user does not exist
		_addError(locale.format(module, "noRefUser"));
		return makeResult();
	}

	// find out whether Syracuse user already exists
	var newSyraUser = db.fetchInstance(_, users, {
		jsonWhere: {
			login: login
		}
	});
	var createUser = !newSyraUser;
	if (newSyraUser) {
		if (newSyraUser.email(_) !== email) {
			_addError(locale.format(module, "wrongEmail", login));
			return makeResult();
		}
		if (!newSyraUser.active(_)) {
			_addError(locale.format(module, "notActive", login));
			return makeResult();
		}
		if (newSyraUser.firstName(_) !== firstname) {
			_addError(locale.format(module, "wrongFirst", login));
			return makeResult();
		}
		if (newSyraUser.lastName(_) !== lastname) {
			_addError(locale.format(module, "wrongLast", login));
			return makeResult();
		}
		if (newSyraUser.title(_) !== title) {
			_addError(locale.format(module, "wrongTitle", login));
			return makeResult();
		}
		_addMessage("info", locale.format(module, "existingSyraUser", login));
	} else {
		newSyraUser = users.createInstance(_, db, null);
		newSyraUser.login(_, login);
		newSyraUser.title(_, title);
		newSyraUser.firstName(_, firstname);
		newSyraUser.lastName(_, lastname);
		newSyraUser.email(_, email);
		newSyraUser.active(_, true);
		// obtain standard authentication method - only for basic
		var authent = authHelper.getStandardSetting(_).method;
		if (authent === "basic") newSyraUser.changePassword(_, true);
		newSyraUser.setPassword(_, login);
	}

	// set teams, groups from reference user
	var items = ref_user.authorTeams(_).toArray(_);
	var targetItems = newSyraUser.authorTeams(_);
	items.forEach_(_, function(_, item) {
		targetItems.set(_, item);
	});
	var items = ref_user.memberTeams(_).toArray(_);
	var targetItems = newSyraUser.memberTeams(_);
	items.forEach_(_, function(_, item) {
		targetItems.set(_, item);
	});
	var items = ref_user.groups(_).toArray(_);
	var targetItems = newSyraUser.groups(_);
	items.forEach_(_, function(_, item) {
		targetItems.set(_, item);
	});
	// set endpoints from reference user
	var items = ref_user.endpoints(_).toArray(_);
	var targetItems = newSyraUser.endpoints(_);
	var targetEndpoints = targetItems.toArray(_).map_(_, function(_, te) {
		return te.endpoint(_).$uuid;
	});
	var createSyracuseUser = false; // create Syracuse user only when at least one X3 user has been created successfully
	items.forEach_(_, function(_, item) {
		// get endpoint
		var endpoint = item.endpoint(_);
		var description = endpoint.description(_);
		// endpoint already exists
		if (targetEndpoints.indexOf(endpoint.$uuid) >= 0) return;
		// current endpoint? Return user name
		if (endpoint.$uuid === ep.$uuid) {
			x3RefUser2 = item.login(_);
		} else {
			// different applications
			if (range < 3 && ep.applicationRef(_).$uuid === endpoint.applicationRef(_).$uuid)
				return;
		}
		var orm = endpoint.getOrm(_);
		var ent = orm.getEntity(_, "ASYRAUS");
		if (!ent) {
			_addError(locale.format(module, "noEntity", description), description);
			return;
		}
		var x3RefUser = orm.fetchInstance(_, ent, {
			jsonWhere: {
				LOGIN: item.login(_)
			}
		});
		if (!x3RefUser) {
			// continue with next item
			return _addError(locale.format(module, "noX3Ref", item.login(_)), description);
		}
		var newX3User = orm.fetchInstance(_, ent, {
			jsonWhere: {
				USR: usr_code
			}
		});
		if (newX3User)
			return _addError(locale.format(module, "usrExists", usr_code), description);
		var newX3User = orm.fetchInstance(_, ent, {
			jsonWhere: {
				LOGIN: usr
			}
		});
		if (!newX3User) {
			newX3User = ent.createInstance(_, orm, null);
			// console.log("US " + require('util').format(x3RefUser._data));
			newX3User.USR(_, usr_code);
			newX3User.LOGIN(_, usr);
			newX3User.ENAFLG(_, true);
			newX3User.ADDEML(_, email);
			newX3User.FIRSTNAME(_, firstname);
			newX3User.LASTNAME(_, lastname);
			newX3User.CODMET(_, x3RefUser.CODMET(_));
			newX3User.TELEP(_, tel);
			newX3User.FAX(_, fax);
			newX3User.USRCONXTD(_, x3RefUser.USRCONXTD(_));
			newX3User.PRFMEN(_, x3RefUser.PRFMEN(_));
			newX3User.PRFFCT(_, x3RefUser.PRFFCT(_));
			newX3User.save(_);
			var diags = [];
			newX3User.getAllDiagnoses(_, diags, {
				addEntityName: true,
				addPropName: true
			});
			var ok = true;
			diags.forEach(function(diag) {
				diag.endpoint = description;
				if (diag.$severity === "error") ok = false;
				diagnoses.push(diag);
			});
			if (ok) createSyracuseUser = true;

		} else {
			_addMessage("warning", locale.format(module, "loginExists", usr), description);
			createSyracuseUser = true;
		}
		var newEndpoint = targetItems.add(_);
		newEndpoint.endpoint(_, endpoint);
		newEndpoint.login(_, usr);
	});
	if (createSyracuseUser) {
		newSyraUser.save(_);
		newSyraUser.getAllDiagnoses(_, diagnoses);
		if (!_hasError()) {
			_addMessage("success", createUser ? locale.format(module, "syraUserCreated", login) : locale.format(module, "syraUserUpdated", login));
		}
	}

	return makeResult();
}

exports.user = user;

function _addError(diagnoses, message) {
	diagnoses.push({
		$severity: "error",
		$message: message,
	});
}


function _addMessage(diagnoses, severity, message) {
	diagnoses.push({
		$severity: severity,
		$message: message,
	});
}

function makeResult(diagnoses) {
	var result = {
		$diagnoses: diagnoses
	};
	return JSON.stringify(result);
}

function _hasError(diagnoses) {
	return diagnoses.some(function(diag) {
		return diag.$severity === "error";
	});
}

function _addMessage(diagnoses, severity, message, description) {
	diagnoses.push({
		$severity: severity,
		$message: message,
		endpoint: description
	});
}

/* Deactivate a user
 * Parameters:
 * - user: Login of Syracuse user
 * return value: JSON structure with $diagnoses array
 */
function deactivate(_, user) {

	var diagnoses = [];



	// Syracuse user
	var adminHelpers = require('syracuse-collaboration/lib/helpers');
	var db = adminHelpers.AdminHelper.getCollaborationOrm(_);
	var users = db.model.getEntity(_, "user");
	// find users which have a user endpoint with correct login and a user endpoint with current endpoint 
	// (cannot find out whether both conditions are simultaneously satisfied for same user endpoint)
	var ref_user = db.fetchInstance(_, users, {
		jsonWhere: {
			'login': user,
		}
	});
	if (!ref_user) {
		_addError(diagnoses, locale.format(module, "noUser", user));
		return makeResult(diagnoses);
	}
	ref_user.active(_, false);
	ref_user.save(_);
	ref_user.getAllDiagnoses(_, diagnoses, {
		addEntityName: true,
		addPropName: true
	});
	if (diagnoses.length === 0) {
		_addMessage(diagnoses, "success", locale.format(module, "userDeactivated", user));
	}
	return makeResult(diagnoses);


}
exports.deactivate = deactivate;