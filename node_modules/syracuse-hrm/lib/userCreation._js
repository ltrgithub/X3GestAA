"use strict";
var locale = require("syracuse-core/lib/locale");
var globals = require('streamline-runtime').globals;
exports.$exported = true;

/* Parameters:
 * - login: Login of the newly created Syracuse user
 * - reflogin: Login of the Syracuse reference user
 * - title, firstname, lastname, email: title, first name, last name, email of the newly created Syracuse user
 * - usr: Login of the newly created X3 user
 * - tel: telephone of the newly created X3 user
 * - fax: Fax of the newly created X3 user
 * - range: 1: only do action for current endpoint, 2: only do action for other endpoints, 3: do action for all endpoints
 * return value: JSON structure with $diagnoses array (may have length 0) and an optional attribute "referenceUser" with the login name of the X3 reference user
 */
function user(_, login, reflogin, title, firstname, lastname, email, usr, tel, fax, range) {
	function _addError(message) {
		diagnoses.push({
			$severity: "error",
			$message: message
		});
	}

	function makeResult() {
		var l = diagnoses.length;
		while (--l >= 0) {
			if (diagnoses[l].$severity === "success") diagnoses.splice(l, 1);
		}
		var result = {
			$diagnoses: diagnoses
		};
		if (x3RefUser2) {
			result.referenceUser = x3RefUser2;
		}
		return JSON.stringify(result);
	}

	// get current endpoint
	var up = globals && globals.context && globals.context.session && globals.context.session.getUserProfile(_);
	if (up) {
		up = up.selectedEndpoint(_);
	};
	if (!up) _addError(locale.format(module, "noEndpoint"));
	var x3RefUser2;
	// Syracuse user
	var locale = require("syracuse-core/lib/locale");
	var adminHelpers = require('syracuse-collaboration/lib/helpers');
	var db = adminHelpers.AdminHelper.getCollaborationOrm(_);
	var whereClause = '(code eq "license")';
	var users = db.model.getEntity(_, "user");
	var diagnoses = [];
	var ref_user = db.fetchInstance(_, users, {
		jsonWhere: {
			login: reflogin
		}
	});
	if (!ref_user) {
		// reference user does not exist
		_addError(locale.format(module, "noRefUser"));
		return makeResult();
	}
	var newSyraUser = users.createInstance(_, db, null);
	newSyraUser.login(_, login);
	newSyraUser.title(_, title);
	newSyraUser.firstName(_, firstname);
	newSyraUser.lastName(_, lastname);
	newSyraUser.email(_, email);
	newSyraUser.active(_, true);
	newSyraUser.changePassword(_, true);
	newSyraUser.setPassword(_, login);
	// set teams, groups from reference user
	var items = ref_user.authorTeams(_).toArray(_);
	var targetItems = newSyraUser.authorTeams(_);
	items.forEach_(_, function(_, item) {
		targetItems.set(_, item);
	});
	var items = ref_user.memberTeams(_).toArray(_);
	var targetItems = newSyraUser.memberTeams(_);
	items.forEach_(_, function(_, item) {
		targetItems.set(_, item);
	});
	var items = ref_user.groups(_).toArray(_);
	var targetItems = newSyraUser.groups(_);
	items.forEach_(_, function(_, item) {
		targetItems.set(_, item);
	});
	// set endpoints from reference user
	var items = ref_user.endpoints(_).toArray(_);
	var targetItems = newSyraUser.endpoints(_);
	items.forEach_(_, function(_, item) {
		// get endpoint
		var endpoint = item.endpoint(_);
		// current endpoint? Return user name
		if (endpoint.$uuid === up.$uuid) {
			x3RefUser2 = item.login(_);
			if ((range & 0x02) === 0) return;
		} else {
			if ((range & 0x01) === 0) return;
		}
		var newEndpoint = targetItems.add(_);
		newEndpoint.endpoint(_, endpoint);
		newEndpoint.login(_, usr);
		var orm = endpoint.getOrm(_);
		var ent = orm.getEntity(_, "ASYRAUS");
		var x3RefUser = orm.fetchInstance(_, ent, {
			jsonWhere: {
				USR: item.login(_)
			}
		});
		if (!x3RefUser) {
			// continue with next item
			return _addError(locale.format(module, "noX3Ref", item.login(_), endpoint.description(_)));
		}
		var newX3User = ent.createInstance(_, orm, null);
		// console.log("US " + require('util').format(x3RefUser._data));
		newX3User.USR(_, usr);
		newX3User.ENAFLG(_, true);
		newX3User.ADDEML(_, email);
		newX3User.FIRSTNAME(_, firstname);
		newX3User.LASTNAME(_, lastname);
		newX3User.CODMET(_, x3RefUser.CODMET(_));
		newX3User.TELEP(_, tel);
		newX3User.FAX(_, fax);
		newX3User.USRCONXTD(_, x3RefUser.USRCONXTD(_));
		newX3User.PRFMEN(_, x3RefUser.PRFMEN(_));
		newX3User.PRFFCT(_, x3RefUser.PRFFCT(_));
		newX3User.save(_);
		newX3User.getAllDiagnoses(_, diagnoses, {
			addEntityName: true,
			addPropName: true
		});
	});
	newSyraUser.save(_);
	newSyraUser.getAllDiagnoses(_, diagnoses);
	console.log("DIAG " + JSON.stringify(diagnoses));
	return makeResult();
}

exports.user = user;