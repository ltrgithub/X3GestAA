"use strict";
exports.$exported = true;

/* Parameters:
 * - login: Login of the newly created Syracuse user
 * - reflogin: Login of the Syracuse reference user
 * - title, firstname, lastname, email: title, first name, last name, email of the newly created Syracuse user
 * - usr: Login of the newly created X3 user
 * - tel: telephone of the newly created X3 user
 * - fax: Fax of the newly created X3 user
 * - ret_val: Must be array. Value with index 0 will be filled with name of reference X3 user
 * return value: empty string if there is no error; string with error message if there is an error
 */
function user(_, login, reflogin, title, firstname, lastname, email, usr, tel, fax, ret_val) {
	function _addError(message) {
		diagnoses.push({
			$severity: "error",
			$message: message
		});
	}
	// Syracuse user
	var locale = require("syracuse-core/lib/locale");
	var adminHelpers = require('syracuse-collaboration/lib/helpers');
	var db = adminHelpers.AdminHelper.getCollaborationOrm(_);
	var whereClause = '(code eq "license")';
	var users = db.model.getEntity(_, "user");
	var diagnoses = [];
	var ref_user = db.fetchInstance(_, users, {
		jsonWhere: {
			login: reflogin
		}
	});
	if (!ref_user) {
		// reference user does not exist
		_addError(locale.format(module, "noRefUser"));
		return JSON.stringify(diagnoses);
	}
	var new_user = users.createInstance(_, db, null);
	new_user.login(_, login);
	new_user.title(_, title);
	new_user.firstName(_, firstname);
	new_user.lastName(_, lastname);
	new_user.email(_, email);
	new_user.active(_, true);
	new_user.changePassword(_, true);
	new_user.setPassword(_, login);
	// set teams, groups from reference user
	var items = ref_user.authorTeams(_).toArray(_);
	var targetItems = new_user.authorTeams(_);
	items.forEach_(_, function(_, item) {
		targetItems.set(_, item);
	});
	var items = ref_user.memberTeams(_).toArray(_);
	var targetItems = new_user.memberTeams(_);
	items.forEach_(_, function(_, item) {
		targetItems.set(_, item);
	});
	var items = ref_user.groups(_).toArray(_);
	var targetItems = new_user.groups(_);
	items.forEach_(_, function(_, item) {
		targetItems.set(_, item);
	});
	// set endpoints from reference user
	var items = ref_user.endpoints(_).toArray(_);
	var targetItems = new_user.endpoints(_);
	items.forEach_(_, function(_, item) {
		// get endpoint
		var endpoint = item.endpoint(_);
		var newEndpoint = targetItems.add(_);
		newEndpoint.endpoint(_, endpoint);
		newEndpoint.login(_, usr);
		var orm = endpoint.getOrm(_);
		var ent = orm.getEntity(_, "ASYRAUS");
		var ent2 = orm.getEntity(_, "AUTILIS");
		var x3RefUser = orm.fetchInstance(_, ent2, {
			jsonWhere: {
				LOGIN: item.login(_)
			}
		});
		if (!x3RefUser) {
			// continue with next item
			return _addError(locale.format(module, "noX3Ref", item.login(_), endpoint.description(_)));
		}
		var newUser = ent.createInstance(_, orm, null);
		console.log("US " + require('util').format(x3RefUser._data));
		newUser.USR(_, usr);
		newUser.ENAFLG(_, true);
		newUser.ADDEML(_, email);
		newUser.FIRSTNAME(_, firstname);
		newUser.LASTNAME(_, lastname);
		newUser.CODMET(_, x3RefUser.CODMET(_) || "ACHE");
		// TODO: following 5 lines
		// newUser.TELEP(_, tel);
		// newUser.FAX(_, fax);
		// newUser.USRCONXTD(_, x3Refuser.USRCONXTD(_));
		// newUser.PRFMEN(_, x3RefUser.PRFMEN(_));
		// newUser.PRFFCT(_, x3RefUser.PRFFCT(_));
		newUser.save(_);
		newUser.getAllDiagnoses(_, diagnoses);
	});
	new_user.save(_);
	new_user.getAllDiagnoses(_, diagnoses);
	console.log("DIAG " + JSON.stringify(diagnoses));
	var l = diagnoses.length;
	while (--l >= 0) {
		if (diagnoses[l].$severity === "success") diagnoses.splice(l, 1);
	}
	if (diagnoses.length) return JSON.stringify(diagnoses);
	else return "";
}

exports.user = user;