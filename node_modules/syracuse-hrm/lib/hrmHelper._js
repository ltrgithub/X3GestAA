"use strict";

var hasErrors = exports.hasErrors = function(body, k) {
	var msg;
	var hasErr = body && body.$diagnoses && body.$diagnoses.some(function(diag) {
		if (diag.$severity === "error") {
			msg = "Error related to field " + k + " : " + diag.$message;
			return msg;
		} else return false;
	});
	if (!hasErr) {
		for (var key in body) {
			if (typeof body[key] === "object") {
				hasErr = hasErr || hasErrors(body[key], key);
				if (hasErr) return hasErr;
			}
		}
	}
	return msg || hasErr;
};

exports.getInstance = function(_, db, entity, propName, name) {
	var filter = {
		sdataWhere: propName + " eq '" + name + "'"
	};
	return db.fetchInstance(_, entity, filter);
};


exports.getInstances = function(_, db, entity, propName, name) {
	var filter = {
		sdataWhere: propName + " like '" + name + "%'"
	};
	return db.fetchInstances(_, entity, filter);
};

exports.saveAndCheckErrors = function(_, inst) {
	var sav = inst.save(_);
	//console.log("SAV: "+JSON.stringify(sav,null,2));
	var err = hasErrors(sav);
	if (err) {
		throw new Error(err);
	}
};

exports.isItemInProp = function(_, inst, item, prop) {
	var items = inst[prop](_);
	if (items.getLength() > 0) {
		items = items.toArray(_);

		return items.some(function(it) {
			return it.$uuid === item.$uuid;
		});
	}
	return false;
};
//
//
exports.createHrmSite = function(_, db, options) {
	var entity = db.model.getEntity(_, "hrmSite");
	var inst = entity.createInstance(_, db, null);
	updateHrmSite(_, db, inst, options);
	return inst;
};

var updateHrmSite = exports.updateHrmSite = function(_, db, inst, options) {
	inst.name(_, options.name);
	inst.devmode(_, options.devmode);
	inst.endpoint(_, options.ep);
	// Create xtend servers instances
	for (var i in options.webServers) {
		var srv = getHrmServer(_, db, options.webServers[i]);
		if (!srv) {
			srv = createHrmServer(_, db, options.webServers[i]);
		} else {
			srv = updateHrmServer(_, srv, options.webServers[i]);
		}
		inst.servers(_).set(_, srv);
	}
	var err = hasErrors(inst.save(_));
	if (err) throw new Error(err);
};

exports.getHrmSite = function(_, db, options) {
	if (!options || !options.site || !options.solution || !options.folder) return;
	var filter = {
		sdataWhere: "name eq '" + options.site + "' and endpoint.x3ServerFolder eq '" + options.folder + "' and endpoint.x3SolutionName eq '" + options.solution + "'"
	};
	return db.fetchInstance(_, db.model.getEntity(_, "hrmSite"), filter);
};

var createHrmServer = exports.createHrmServer = function(_, db, options) {
	var entity = db.model.getEntity(_, "hrmServer");
	var inst = entity.createInstance(_, db, null);
	updateHrmServer(_, inst, options);
	return inst;
};

var updateHrmServer = exports.updateHrmServer = function(_, inst, options) {
	inst.host(_, options.host);
	inst.port(_, options.http);
	inst.secure(_, options.ssl || false);
	inst.portssl(_, options.https);
	var err = hasErrors(inst.save(_));
	if (err) throw new Error(err);
	return inst;
};

var getHrmServer = exports.getHrmServer = function(_, db, options) {
	var filter = {
		sdataWhere: "host eq '" + options.host + "' and port eq '" + options.port + "'"
	};
	return db.fetchInstance(_, db.model.getEntity(_, "hrmServer"), filter);
};