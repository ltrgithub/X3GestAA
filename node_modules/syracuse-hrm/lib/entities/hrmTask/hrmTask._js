"use strict";

var globals = require('streamline/lib/globals');
var config = require('config'); // must be first syracuse require
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var locale = require("syracuse-core/lib/locale");

var entityName = "SYRACUSRMNG";
var actionName = "SYRUSRMNG";

var serviceShouldbeDisable = function(instance) {
	var diagnoses = instance.$diagnoses || [];
	return instance.runInProgress || diagnoses.length > 0;
};

exports.entity = {
	$isPersistent: false,
	$canSave: false,
	$titleTemplate: "HRM Schedule action",
	$descriptionTemplate: "Administration task to schedule HRM action",
	$properties: {
		entityName: {
			$title: "Entity",
			$description: "name of HRM class",
			$type: "string",
			$isDisabled: true
		},
		actionName: {
			$title: "Action Name",
			$description: "name of HRM action",
			$type: "string",
			$isDisabled: true
		}
	},
	$relations: {
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$isMandatory: true,
			$lookupFilter: function(_, instance) {
				var userProf = globals.context.session.data.userProfile;
				var items = instance.getHRMEndpoints(_, userProf);

				items = items.map(function(item) {
					return {
						$uuid: item.$uuid
					};
				});

				if (items.length) return {
					$or: items
				};
				else return {
					$uuid: {
						$in: []
					}
				};
			},
			$propagate: function(_, instance, val) {
				try {
					if (instance.x3task) {
						instance.x3task.endpoint(_, val);
						instance.x3task.className(_, "SYRACUSRMNG");
						if (instance.x3task.$diagnoses.length === 0) {
							var model = instance.getModel(_);
							var entityAction = model.getEntity(_, "x3ClassAction");
							var instanceAction = entityAction.createInstance(_, model, null);
							instanceAction.action(_, actionName);
							instance.x3task.actionName(_, instanceAction);
						}
						instance.$diagnoses = instance.x3task.$diagnoses || [];
					}
				} catch (e) {
					instance.thrownEntityError(_, instance, val, e);
				}
			}

		}
	},
	$init: function(_, instance) {

		instance.runInProgress = false;

		//Visual only because we need to inform the user
		instance.entityName(_, entityName);
		instance.actionName(_, actionName);

		var model = instance.getModel(_);

		var entityTask = model.getEntity(_, "x3Task");
		var instanceTask = entityTask.createInstance(_, model, null);

		var userProf = globals.context.session.getUserProfile(_);
		var endpointSelected = userProf && userProf.selectedEndpoint(_);
		if (endpointSelected.contract(_) !== "hrm") {
			var endpoints = instance.getHRMEndpoints(_, userProf);
			if (endpoints.length > 0) {
				endpointSelected = endpoints[0];
			}
		}

		instance.endpoint(_, endpointSelected);

		instanceTask.endpoint(_, endpointSelected);
		instanceTask.className(_, entityName);

		var entityAction = model.getEntity(_, "x3ClassAction");
		var instanceAction = entityAction.createInstance(_, model, null);
		instanceAction.action(_, actionName);
		instanceTask.actionName(_, instanceAction);
		instance.x3task = instanceTask;
		instance.x3task.$diagnoses = instance.x3task.$diagnoses || [];
		instance.$diagnoses = instance.x3task.$diagnoses;

	},
	$functions: {
		instanciateAndAssignAction: function(_, x3task) {
			var model = instance.getModel(_);
			var entityAction = model.getEntity(_, "x3ClassAction");
			var instanceAction = entityAction.createInstance(_, model, null);
			instanceAction.action(_, actionName);
			x3task.actionName(_, instanceAction);
		},
		getModel: function(_) {
			var dbAdmin = adminHelper.getCollaborationOrm(_);
			return dbAdmin.model;
		},
		thrownEntityError: function(_, instance, val, e) {
			instance.$diagnoses = instance.$diagnoses || [];
			instance.$diagnoses.push({
				$severity: "error",
				$message: locale.format(module, "badHRMClass", val, instance.endpoint(_).description(_)) + " : " + e,
				$stack: e.stack
			});
		},
		getHRMEndpoints: function(_, userProf) {
			return userProf.user(_).getUserEndpointsList(_, userProf.selectedRole(_) && userProf.selectedRole(_).$uuid)
				.filter_(_, function(_, ep) {
					return ep.protocol(_) === 'x3' && ep.contract(_) === 'hrm';
				});
		},
		execTask: function(_, diags) {
			this.x3task.execTask(_, diags);
		},
		scheduledExecute: function(_, diags) {
			this.execTask(_, diags);
		}
	},

	$services: {
		run: {
			$method: "POST",
			$title: "Execute now",
			$isMethod: true,
			$isDisabled: serviceShouldbeDisable,
			$parameters: {},
			//			$urlParameters: "scheduler={schedulerId}",
			$execute: function(_, context, instance, parameters) {

				instance.runInProgress = true;
				instance.$diagnoses = instance.$diagnoses || [];
				instance.execTask(_, instance.$diagnoses);
				instance.runInProgress = false;
			}
		},
		schedule: {
			$method: "POST",
			$title: "Schedule action",
			$isMethod: true,
			$isDisabled: serviceShouldbeDisable,
			$parameters: {
				$actions: {
					$select: {
						$url: "{$baseUrl}/automates?representation=automate.$select"
					}
				}
			},
			//			$urlParameters: "scheduler={schedulerId}",
			$execute: function(_, context, instance, parameters) {

				if (!parameters || !parameters.$select) {
					return;
				}
				parameters.$select.forEach_(_, function(_, s) {
					function existsError(d) {
						return d.$severity === "error";
					}

					var x3task = instance.x3task;
					var a = instance._db.fetchInstance(_, x3task._db.getEntity(_, "automate"), s.$uuid);
					if (!a) {
						return;
					}

					var diag = a.defineNewTask(_, locale.format(module, "taskLabel"), x3task);
					diag.forEach(function(d) {
						instance.$addDiagnose(d.$severity, d.$message);
					});
					if (!diag.some(existsError)) {
						instance.$addDiagnose("success", locale.format(module, "taskCreated", a.description(_)));
					}
				});
			}
		}
	}
};