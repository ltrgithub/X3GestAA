"use strict";

var helpers = require("syracuse-core/lib/helpers");
var Context = require("syracuse-sdata/lib/sdataContext").Context;
var proxy = require('syracuse-main/lib/proxy');
var locale = require("syracuse-core/lib/locale");
var querystring = require('querystring');
var config = require('config');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var lb = require('syracuse-hrm/lib/hrmLoadBalancer');
var httpClient = require("syracuse-httpclient/lib/httpClient");
var hrmSession = require('syracuse-hrm/lib/hrmSession');
var hrmHelper = require('syracuse-hrm/lib/hrmHelper');
var Session = hrmSession.Session;

var trace = config && config.hrm && config.hrm.proxy && config.hrm.proxy.trace;

function initHrm(_, context, suburl) {

	var params = querystring.parse(context.rawQuery);
	var solution = params.SOL;
	var folder = params.FLDR;
	var site = params.SITE;

	trace && trace("Init context: " + JSON.stringify(params, null, 2));

	var syrport = context.request.connection.localPort;
	var sid = proxy.getCookie(context.request.headers.cookie, "syracuse.sid." + syrport);

	solution = solution || context.request.hrmSolution;
	folder = folder || context.request.hrmFolder;
	site = site || context.request.hrmSite;

	var db = adminHelper.getCollaborationOrm(_);
	// Retrieve HRM Site instance
	var _site = hrmHelper.getHrmSite(_, db, {
		solution: solution,
		folder: folder,
		site: site
	});

	if (!_site) {
		throw new Error(locale.format(module, "hrmSiteNotFound", site.toString(), context.request && context.request.url));
	}
	if (_site.secure(_) && !context.secure) {
		throw new Error(locale.format(module, "httpsOnly", site.toString(), context.request && context.request.url));
	} else if (!_site.secure(_) && context.secure) {
		throw new Error(locale.format(module, "httpOnly", site.toString(), context.request && context.request.url));
	}

	// Call load balancer server selection
	var server = lb.selectServer(_, context, _site, {
		host: params.SRVHOST,
		port: params.SRVPORT
	});

	// Instanciate session
	var s = new Session(_, sid, _site, server, trace);

	// process authentication requests -> if fail request classic auth portal
	var resp = s.connect(_, context, null, suburl);

	// Decide what encoding to use for the response...
	var encoding = resp.headers['content-type'] && resp.headers['content-type'].indexOf('charset=utf-8') !== -1 ? "utf-8" : "binary";

	// Send response
	context.response.writeHead(resp.statusCode, resp.headers);
	var buf;
	while ((buf = resp.read(_))) {
		context.response.write(_, buf, encoding);
	}
	context.response.end();
}

function forward(_, context, path, solution, folder, site) {
	solution = solution || context.request.hrmSolution;
	folder = folder || context.request.hrmFolder;
	site = site || context.request.hrmSite;
	var params = querystring.parse(context.rawQuery);
	var host = params.SRVHOST;
	var port = params.SRVPORT;
	var dlk = params.DLK;

	// Identify what proxy to use thanks to httpSession informations
	var s = hrmSession.getSession(_, context, solution, folder, site, host, port);
	if (s) {

		if (dlk && dlk === "ADLKLOGOUT") {
			var resp = s.disconnect(_, context);

			resp.headers.location = context.httpSession.host + "/syracuse-main/html/main.html?url=?representation=home.$navigation";
			resp.headers["set-cookie"] = resp.headers["set-cookie"] || [];

			context.response.writeHead(302, resp.headers);
			var buf;
			while ((buf = resp.read(_))) {
				context.response.write(_, buf, "utf8");
			}
			context.response.end();
			return;
		}

		// write specific head to inform XTEND that Syracuse is asking
		context.request.headers["xtd-syracuse"] = true;
		// If session found, forward request
		s.forward(_, context, path);
	} else {
		// Else, initialize connection
		if (!s) trace && trace("No session proxy found !!! New Tomcat session will be created.");
		var query = {};
		if (solution) query.SOL = solution;
		if (folder) query.FLDR = folder;
		if (site) query.SITE = site;
		if (host) query.SRVHOST = host;
		if (port) query.SRVPORT = port;
		context.rawQuery = querystring.stringify(query);
		initHrm(_, context, "/xtend/page?" + context.rawQuery);
	}
}

var _shrmMap = {
	walk: function(_, context, name) {
		context.request.hrmSolution = name;
		context.request.rsrcKind = "shrm";
		return _dispatch(_, context, _folderMap);
	}
};

var _xtendMap = {
	walk: function(_, context, name) {
		switch (name) {
			case "page":
				var params = querystring.parse(context.rawQuery);
				var solution = params.SOL;
				var folder = params.FLDR;
				var site = params.SITE;

				// If no language specified -> set hrm portal language with Syracuse selected locale
				var up = context.getUserProfile(_);
				//console.log("UP: "+require('util').inspect(up,null,2));
				var lang = params.LANG;
				if (!lang) {
					params.LANG = locale.x3Language(up.selectedLocale(_).code(_));
					trace && trace("Propagate Syracuse language: " + params.LANG);
					context.rawQuery = querystring.stringify(params);
				}
				// else -> propagate portal language to Syracuse user profile
				else if (lang !== locale.x3Language(up.selectedLocale(_).code(_))) {
					trace && trace("Change Syracuse language: " + lang);
					var pref = up.user(_).getUserLocaleByCode(_, locale.defaultIso(lang));
					up.selectedLocale(_, pref);
					context.httpSession.setUserProfile(_, up);
				}
				//
				return forward(_, context, "/xtend/page/" + context.toWalk(), solution, folder, site);

			case "svc":
				context.request.rsrcKind = "svc";
				return _dispatch(_, context, _solutionMap);
			case "ajax":
				context.request.rsrcKind = "ajax";
				return _dispatch(_, context, _solutionMap);
			case "remote":
				context.request.rsrcKind = "static";
				return _dispatch(_, context, _solutionMap);
				// TODO: handle this new path
			case "shrmportal":
				context.request.rsrcKind = "simple";
				return _dispatch(_, context, _solutionMap);
			case "X_HTML":
				return _dispatch(_, context, _siteMap);
			default:
				return _dispatch(_, context, _xtendMap);
		}
	},
	get: function(_, context, walkedUrl) {
		return forward(_, context, "/" + walkedUrl);
	},
	post: function(_, context, walkedUrl) {
		return forward(_, context, "/" + walkedUrl);
	},
	put: function(_, context, walkedUrl) {
		return forward(_, context, "/" + walkedUrl);
	},
	"delete": function(_, context, walkedUrl) {
		return forward(_, context, "/" + walkedUrl);
	}
};

var _solutionMap = {
	walk: function(_, context, name) {
		context.request.hrmSolution = name;
		return _dispatch(_, context, _folderMap);
	}
};

var _folderMap = {
	walk: function(_, context, name) {
		context.request.hrmFolder = name;
		switch (context.request.rsrcKind) {
			case "shrm":
			case "svc":
			case "ajax":
				return _dispatch(_, context, _siteMap);
			case "static":
				return _dispatch(_, context, _xtendMap);
			default:
				return _dispatch(_, context, _xtendMap);
		}
	}
};

var _siteMap = {
	walk: function(_, context, name) {
		context.request.hrmSite = name;
		return _dispatch(_, context, _xtendMap);
	}
};

function _parseSegment(segment) {
	var match = /^([^\/(]*)\('([^']*)'\)$/.exec(segment);
	return match ? {
		name: match[1],
		id: match[2]
	} : {
		name: segment
	};
}

function _dispatch(_, context, map) {
	//console.log("Walked: " + context.walked());
	var seg = context.walkUrl();
	if (seg == null) {
		// we reached the end of the URL, dispatch method
		//var method = context.request.method.toLowerCase();
		var method = context.method;
		if (map[method]) {
			var walkedUrl = context.walked().split("/").slice(3).join('/');
			return map[method](_, context, walkedUrl);
		}
		throw context.badMethod(method);
	} else {
		var pair = _parseSegment(seg);
		if (pair.id) context.isExpressionId = pair.isExpressionId;
		if (pair.name[0] === '$') {
			var name = pair.name.substring(1);
			if (map[name]) {
				return map[name](_, context, pair.id);
			}
		} else if (map.walk) {
			return map.walk(_, context, pair.name, pair.id);
		}
		throw context.badRequest(locale.format(module, "unexpectedSegment", seg));
	}
}

function _logRequest(_, context) {
	if (!context.request.headers["x-history-title"]) return;
	//
	var db = adminHelper.getCollaborationOrm(_);
	var h = db.model.getEntity(_, "navHistory").factory.createInstance(_, null, db);
	h.title(_, context.request.headers["x-history-title"]);
	h.agent(_, context.request.headers["x-history-agent"]);
	h.url(_, context.request.url);
	h.save(_);
}

function _doIt(_, context) {
	try {
		var protocol = context.walkUrl();
		if (protocol !== "xtend" && protocol !== "shrmportal") throw new Error(locale.format(module, "badUrl", protocol));
		// fire and forget log call
		_logRequest(!_, context);
		_dispatch(_, context, protocol === "xtend" ? _xtendMap : _shrmMap);
	} catch (ex) {
		if (ex.httpStatus) {
			return context.reply(_, ex.httpStatus, ex.message);
		} else if (ex.stack) {
			return context.reply(_, 500, ex.safeStack);
		} else {
			return context.reply(_, 500, ex.toString());
		}
	}
}

exports.dispatcher = function(options) {
	return function(_, request, response) {
		var context = new Context(request, response, options);
		request.context = context;
		try {
			_doIt(_, context);
		} catch (err) {
			helpers.log.exception(module, err);
			context.reply(_, 500, err.safeStack);
		}
	};
};