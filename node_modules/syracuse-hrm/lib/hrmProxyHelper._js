"use strict";

var nodeconfig = require('syracuse-main/lib/nodeconfig');

var trace = nodeconfig.config && nodeconfig.config.hrm && nodeconfig.config.hrm.proxy && nodeconfig.config.hrm.proxy.trace;

var storeInHttpSession = exports.storeInHttpSession = function(context, options) {
	//console.log("Store new proxy: "+JSON.stringify(options,null,2));
	context.httpSession.hrm = context.httpSession.hrm || {};
	context.httpSession.hrm.sessions = context.httpSession.hrm.sessions || {};
	context.httpSession.hrm.sessions[options.solution] = context.httpSession.hrm.sessions[options.solution] || {};
	context.httpSession.hrm.sessions[options.solution][options.folder] = context.httpSession.hrm.sessions[options.solution][options.folder] || {};
	context.httpSession.hrm.sessions[options.solution][options.folder][options.site] = context.httpSession.hrm.sessions[options.solution][options.folder][options.site] || {};

	context.httpSession.hrm.sessions[options.solution][options.folder][options.site][options.jsid] = options.proxy;
	context.httpSession.hrm.lastProxyUsed = options.proxy;

	return options.proxy;
};

exports.getProxyInstance = function(context, solution, folder, site, host, port, JSESSIONID) {

	function findInSessionMap(proxies, _solution, _folder, _site) {
		if (proxies) {
			var keys = Object.keys(proxies);
			var match, _jsid;
			for (var i in keys) {
				_jsid = keys[i];
				trace && trace("Check proxy instance in : solution [" + (_solution || solution) + "] ; folder [" + (_folder || folder) + "] ; site [" + (_site || site) + "] ; jsession [" + _jsid + "]");
				if (proxies[_jsid].baseUrl === baseUrl) {
					match = proxies[_jsid];
					match.nextForcedHeader = {
						key: "set-cookie",
						value: match["original-set-cookie"]
					};
					break;
				}
			}
			if (match && _jsid) return {
				mess: "Matching proxy configuration found [" + _jsid + "] on current site",
				jsid: _jsid,
				proxy: match
			};
		}
	}

	function findInSiteMap(sites, isCurrent, _solution, _folder) {
		if (sites) {
			var keys = Object.keys(sites);
			var match, _site;
			for (var i in keys) {
				_site = keys[i];
				if (isCurrent || (_solution !== solution && _folder !== folder && _site !== site)) {
					match = findInSessionMap(sites[_site], _solution, _folder, _site);
					if (match) break;
				}
			}
			if (match && _site) return {
				mess: "Matching proxy configuration found [" + match.jsid + "] on current folder ; site [" + _site + "]",
				site: _site,
				jsid: match.jsid,
				proxy: match.proxy
			};
		}
	}

	function findInFolderMap(folders, isCurrent, _solution) {
		if (folders) {
			var keys = Object.keys(folders);
			var match, _folder;
			for (var i in keys) {
				_folder = keys[i];
				if (isCurrent || (_solution !== solution && _folder !== folder)) {
					match = findInSiteMap(folders[_folder], false, _solution, _folder);
					if (match) break;
				}
			}
			if (match && _folder) return {
				mess: "Matching proxy configuration found [" + match.jsid + "] on current solution ; folder [" + _folder + "] ; site [" + match.site + "]",
				folder: _folder,
				site: match.site,
				jsid: match.jsid,
				proxy: match.proxy
			};
		}
	}

	function findInSolutionMap(items, isCurrent) {
		if (items) {
			var keys = Object.keys(items);
			var match, _solution;
			for (var i in keys) {
				_solution = keys[i];
				if (isCurrent || (_solution !== solution)) {
					match = findInFolderMap(items[_solution], false, _solution);
					if (match) break;
				}
			}
			if (match && _solution) return {
				mess: "Matching proxy configuration found [" + match.jsid + "] on solution [" + _solution + "] ; folder [" + match.folder + "] ; site [" + match.site + "]",
				solution: _solution,
				folder: match.folder,
				site: match.site,
				jsid: match.jsid,
				proxy: match.proxy
			};
		}
	}

	//console.log("GLOBAL PROXIES MAP: "+JSON.stringify(context.httpSession && context.httpSession.hrm && context.httpSession.hrm.sessions,null,2));
	var baseUrl, p;
	if (solution && folder && site) {
		var globalMap = context.httpSession && context.httpSession.hrm && context.httpSession.hrm.sessions;
		var solMap = globalMap && globalMap[solution];
		var folMap = solMap && solMap[folder];
		var sitMap = folMap && folMap[site];
		p = sitMap && sitMap[JSESSIONID];

		// if target is specifically wanted, we try to find a matching proxy instance
		// else the last used proxy is taken
		if (host && port) {
			baseUrl = "http://" + host + ":" + port;
			if (!p || p.baseUrl !== baseUrl) {
				// Try to find matching proxy previously instanciated for same site
				var res = findInSessionMap(sitMap);
				if (!(res && res.jsid && res.proxy)) res = findInSiteMap(folMap, true);
				if (!(res && res.jsid && res.proxy)) res = findInFolderMap(solMap, true);
				if (!(res && res.jsid && res.proxy)) res = findInSolutionMap(globalMap, true);

				if (res && res.jsid && res.proxy) {
					res.solution = solution;
					res.folder = folder;
					res.site = site;
					p = storeInHttpSession(context, res);
					trace && trace(res.mess);
				} else {
					p = null;
				}
			} else {
				trace && trace("Keep current proxy configuration");
			}
		}
	} else {
		p = context.httpSession && context.httpSession.hrm && context.httpSession.hrm.lastProxyUsed;
		if (p) trace && trace("Select latest proxy configuration used because of special resource: " + context.request.url);
	}
	if (p) trace && trace("***\nSelected proxy configuration base url: " + p.baseUrl + "\n***");
	return p;
};