"use strict";

var flows = require("streamline/lib/util/flows");
var locale = require("syracuse-core/lib/locale");
var nodeconfig = require('syracuse-main/lib/nodeconfig');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var hrmHelper = require('syracuse-hrm/lib/hrmHelper');


var traceLB = nodeconfig.config && nodeconfig.config.hrm && nodeconfig.config.hrm.loadbalancer && nodeconfig.config.hrm.loadbalancer.trace;
var loadBalancer = {};

var balanceFunnel = flows.funnel(1);

exports.selectServer = function(_, options) {

	var db = adminHelper.getCollaborationOrm(_);
	var res = null;
	balanceFunnel(_, function(_) {

		function getServer(_, uuid) {
			return servers.filter(function(s) {
				return s.$uuid === uuid;
			})[0];
		}

		var solution = options.SOL;
		var folder = options.FLDR;
		var site = options.SITE;

		// Retrieve HRM Site instance
		var _site = hrmHelper.getHrmSite(_, db, {
			solution: solution,
			folder: folder,
			site: site
		});
		if (!_site) throw new Error(locale.format(module, "hrmSiteNotFound", JSON.stringify(options, null, 2)));
		traceLB && traceLB("Begin server selection for site [" + _site.name(_) + "]");

		var servers = _site.servers(_).toArray(_);
		if (servers.length === 0) throw new Error(locale.format(module, "noWebServerOnHrmSite", _site.name(_)));


		loadBalancer[solution] = loadBalancer[solution] || {};
		loadBalancer[solution][folder] = loadBalancer[solution][folder] || {};
		var list = loadBalancer[solution][folder][site] = loadBalancer[solution][folder][site] || [];
		// remove banned servers and and create a map of uuids
		var bannedList = [];
		var realList = servers.filter_(_, function(_, s) {
			var isBanned = s.banned(_);
			if (isBanned) bannedList.push(s.$uuid);
			return !isBanned;
		}).map(function(s) {
			return s.$uuid;
		});
		traceLB && traceLB("Servers linked to site :" + JSON.stringify(realList, null, 2));
		traceLB && traceLB("Banned servers :" + JSON.stringify(bannedList, null, 2));
		// ***
		// Synchronize list and real list
		// ***

		for (var i in list) {
			// Remove servers from list if not configured anymore
			if (realList.indexOf(list[i]) === -1) delete list[i];
			// Remove servers from list if banned
			if (bannedList.indexOf(list[i]) !== -1) delete list[i];
		}
		// Concatenate list and real list to be sure to handle all configured servers
		var both = list.concat(realList);
		// remove twins
		list = both.filter(function(item, pos) {
			return both.indexOf(item) == pos;
		});
		// 
		var idx = 0;
		if (options.SRVHOST && options.SRVPORT) {
			var srvUuid;
			for (var j in servers) {
				if (servers[j].host(_) === options.SRVHOST && servers[j].port(_) === options.SRVPORT) {
					srvUuid = servers[j].$uuid;
					break;
				}
			}
			if (!srvUuid) throw new Error(locale.format(module, "noServerMatchInConf", options.SRVHOST + ":" + options.SRVPORT));
			idx = list.indexOf(srvUuid);
			if (idx === -1) {
				// Check if banned
				if (bannedList.indexOf(srvUuid) !== -1)
					throw new Error(locale.format(module, "serverBanned", options.SRVHOST + ":" + options.SRVPORT));
				throw new Error(locale.format(module, "noServerMatchInLB", options.SRVHOST + ":" + options.SRVPORT));
			}
		}
		// ***
		// Select server to use and Apply round robin algorithm : the first become the last...
		// ***
		var selectedUuid = list[idx];

		traceLB && traceLB("***\nLB List before apply round robin :" + JSON.stringify(list, null, 2));
		traceLB && traceLB("Selected server :" + JSON.stringify(selectedUuid, null, 2) + "\n***");

		var server = getServer(_, selectedUuid);
		if (!server) throw new Error(locale.format(module, "noServerAvailable"));

		var lastIdx = idx;
		// check availability
		if (!server.isServerRunning(_)) {
			// As not available, remove it from LB list
			list.splice(lastIdx, 1);
			traceLB && traceLB(locale.format(module, "serverNotAvailable", server.host(_), server.port(_)));
			if (options.SRVHOST && options.SRVPORT) {
				throw new Error(locale.format(module, "serverNotAvailable", server.host(_), server.port(_)));
			}
			for (var k in list) {
				server = getServer(_, list[k]);
				if (server.isServerRunning(_)) {
					traceLB && traceLB(locale.format(module, "serverAvailable", server.host(_), server.port(_)));
					selectedUuid = list[k];
					lastIdx = k;
					break;
				} else {
					// As not available, remove it from LB list
					list.splice(k, 1);
					traceLB && traceLB(locale.format(module, "serverNotAvailable", server.host(_), server.port(_)));
				}
			}
		}

		if (list.length > 1) {
			list.splice(lastIdx, 1);
			list.push(selectedUuid);
		}
		traceLB && traceLB("Selected server : " + server.$uuid + "\n***");
		traceLB && traceLB("***\nLB List after apply round robin :" + JSON.stringify(list, null, 2));

		loadBalancer[solution][folder][site] = list;
		res = getServer(_, selectedUuid);
	});
	if (!res) throw new Error("Funnel failed");
	return res;
};