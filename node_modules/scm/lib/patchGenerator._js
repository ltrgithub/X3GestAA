"use strict";
var supervisor = require("etna-supervisor/lib/supervisor");
var nodeLocalConfig = require('config');
var gitWrapper = require('etna-etl/lib/gitWrapper');
var path = require("path");
var ez = require("ez-streams");
var file = ez.devices.file;
var fs = require("streamline-fs");


exports.newGenerator = function(_, config) {

	config.patch = config.patch || {};
	config.patch.langs = config.patch.langs || ["ENG", "FRA"]
	config.patch.comment = config.patch.comment || "test";
	config.patch.version = config.patch.version || 1;
	config.patch.product = config.patch.product || "X3";

	var superv = supervisor.create(_, config);
	var settingsTable = "AAA";

	try {
		// Make sure the settings table exists
		superv.sqlDriver.getTableDef(_, superv.folderName, settingsTable);
	} catch (err) {
		console.log("ERROR : " + err);
		var tableDef = {
			schemaName: superv.folderName,
			tableName: settingsTable,
			columns: [{
				name: "GITSHA1",
				isNullable: true,
				type: "nvarchar",
				maxLength: 40
			}],
			indexes: [],
		};
		superv.sqlDriver.createTableFromTableDefinition(_, tableDef);
		config.trace && config.trace("Settings table '" + settingsTable + "' was created.")
	}

	function getGitWrapper() {
		var options = {
			folder: config.gitFolder
		};
		return new gitWrapper.git(options);
	}

	function parseJSONValue(key, val) {
		if (/^##\w+##$/.test(key))
		{
			// Special tags : ##texts##, ##comments##, ...
			return val;
		}
		var result = {};
		if (Array.isArray(val)) {
			result.value = [];
			result.type = "array";
			val.forEach(function(arrayItem, itemIdx) {
				result.value.push(parseJSONValue(key + "[" + itemIdx + "]", arrayItem));
			});
		} else if ("string" === typeof(val)) {
			// String : S|xxxxx
			// String with specific option (type option) : S:TF|xxxxxxxx
			var parts = /^S(\:[^|"]+)?\|(.*)$/.exec(val);
			if (parts) {
				result = {
					type: "string",
					value: parts[2]
				};
				if (" " === result.value)
					result.value = "";
				if (parts[1]) {
					if (parts[1].indexOf('T') != -1) {
						// This text is a formula, some characters must be mapped
						// Replace ',' with #254
						result.value = result.value.replace(/,/g, String.fromCharCode(255))
						// Replace #10 with #255
						result.value = result.value.replace(/\r/g, String.fromCharCode(254))
					}
				}
			} else if (/^C\|/.test(val)) {
				// Clobs
				result = {
					type: "clob",
					value: val.substring(2)
				};
			} else if (/^N\|/.test(val)) {
				// Decimals are stored as strings in json
				result = {
					type: "decimal",
					value: parseFloat(val.substring(2))
				};
			} else if (/^D\|/.test(val)) {
				// Date (without time part)
				// D:2009-12-31 -> 20091231
				val = val.substring(2);
				result = {
					type: "date",
					value: val == "NULL" ? null : parseInt(val.replace(/\-/g, ""))
				};
			} else if (/^T\|/.test(val)) {
				// Timestamp
				// T|2003-09-11T00:00:00.000Z -> 2003-09-11T00:00:00Z
				parts = /(\d+)-(\d+)-(\d+)T(\d+):(\d+):(\d+).(\d+)Z/.exec(val.substring(2));
				// This is date time : just remove the millis
				result = {
					type: "timestamp",
					value: parts[1] + "-" + parts[2] + "-" + parts[3] + "T" + parts[4] + ":" + parts[5] + ":" + parts[6] + "Z"
				};
			} else {
				// should never happen
				console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX " + key + " : " + val);
			}
		} else if (!isNaN(val)) {
			result = {
				type: "number",
				value: val
			};
			// Nothing to do : this is a number. Keep it as it.
		} else {
			// should never happen .. may be an object
			console.log("YYYYYYYYYYYYYYYYYYYYYYYYYYYY " + key);
		}
		return result;
	}

	function processElement(_, writer, elt, eltConfig) {
		// Compute the title of the block
		var blockTitle;
		if (eltConfig.titleFunction) {
			blockTitle = invokeTitleFunction(eltConfig.titleFunction, elt);
		} else {
			var pk = eltConfig.primaryKey || eltConfig.patchPK;
			if (!pk) {
				if (!eltConfig.orderBy)
					throw new Error("'orderBy' property is missing on element " + (eltConfig.title ? eltConfig.title : eltConfig.tableName));
				pk = eltConfig.orderBy.split(',')[0];
			}
			blockTitle = parseJSONValue(pk, elt[pk]).value;
		}

		writer.write(_, "3,\"" + eltConfig.abbrev + "\"," + blockTitle + "\n");

		var allLines = {};

		function enqueueItem(_, lineType, name, dimension, values, valueType) {
			var line = lineType + ',"' + name + '",' + dimension;
			if (25 === lineType) {
				// Clob
				line += "\r\n" + values.length + "\r\n" + values + "\r\n" + "**********";
			} else {
				if (!Array.isArray(values))
					values = [values];
				values.forEach(function(value) {
					line += ',';
					if (typeof(value) == "string") {
						if (value == " ")
							value = "";
						line += '"' + value + '"';
					} else {
						if ((4 === lineType) && valueType && ("date" === valueType) && !value) {
							// null dates are written as 000000
							value = "000000";
						}
						line += value;
					}
				});
			}

			allLines[name] = allLines[name] || [];
			allLines[name].push(line);
		}

		function padDatePart(part, length) {
			// convert any int value into string
			part = "" + part;
			while (part.length < length)
				part = "0" + part;
			return part;
		}

		if (elt["##texts##"]) {
			var texts = elt["##texts##"];
			Object.keys(texts).forEach_(_, function(_, columnName) {
				if (!elt.hasOwnProperty(columnName))
					return;
				var textIds = elt[columnName];
				if (!Array.isArray(textIds))
					textIds = [textIds];

				// Some texts can have multiple dimensions (AWINDOW.INTMSK for instance)
				textIds.forEach_(_, function(_, textId, textDimension) {

					config.patch.langs.forEach_(_, function(_, langCode) {
						var valsToWrite = [
							texts[columnName][textDimension][langCode] || "",
							langCode,
							textId,
						];

						if (elt["##comments##"] && elt["##comments##"][columnName] && elt["##comments##"][columnName][textDimension] && elt["##comments##"][columnName][textDimension][langCode])
							valsToWrite.push(elt["##comments##"][columnName][textDimension][langCode]);
						else
							valsToWrite.push("");
						enqueueItem(_, 5, columnName, textDimension, valsToWrite);
					});

					enqueueItem(_, 5, columnName, textDimension, ["", "***"]);
				});

				delete(elt[columnName]);
			});
			// val.forEach_(_, function(_, arrayItem, itemIdx) {
			// 	enqueueItem(_, 5, key, itemIdx, arrayItem);
			// });
		}
		delete(elt["##texts##"]);
		delete(elt["##comments##"]);

		Object.keys(elt).forEach_(_, function(_, key) {
			var val = parseJSONValue(key, elt[key]);
			if ("array" == val.type) {
				val.value.forEach_(_, function(_, arrayItem, itemIdx) {
					enqueueItem(_, 4, key, itemIdx, arrayItem.value, arrayItem.type);
				});
			} else if ("clob" == val.type) {
				enqueueItem(_, 25, key, 0, val.value, val.type);
			} else {
				enqueueItem(_, 4, key, 0, val.value, val.type);
			}
		});

		Object.keys(allLines).sort().forEach_(_, function(_, lines) {
			allLines[lines].forEach_(_, function(_, line) {
				writer.write(_, line + "\n");
			});
		});
		writer.write(_, "6,\"" + eltConfig.abbrev + "\"\n");
	}

	function invokeTitleFunction(fct, elt) {
		var arg = {};
		Object.keys(elt).forEach(function(key) {
			arg[key] = parseJSONValue(key, elt[key]).value;
		});
		return fct(arg);
	}

	function processATableElement(_, writer, entityExportConfig, elt) {

		var title;
		if (elt["##texts##"]) {
			title = elt["##texts##"][entityExportConfig.textLinks[0]][0]["ENG"];
		} else {
			if (entityExportConfig.titleFunction)
				title = invokeTitleFunction(entityExportConfig.titleFunction, elt);
			else
				throw new Error("No localized label are defined for element '" + entityExportConfig.title + "', you must provide a 'titleFunction' function.")
		}
		var header = '"' + entityExportConfig.abbrev + '","' + parseJSONValue(entityExportConfig.primaryKey, elt[entityExportConfig.primaryKey]).value + '","' + title + '"';
		writer.write(_, "2," + header + "\n");
		var children = [];
		if (entityExportConfig.children) {
			// The configuration describes some child-node, we have to keep them in a separate list.
			// They will be processed later.
			Object.keys(entityExportConfig.children).forEach(function(childName) {
				// For instance, in tables.js, childName == 'COLUMNS' or 'INDEXES'
				if (elt[childName]) {
					// note : elt[childName] is an array. Each item describes a child (i.e. one index or one column)
					elt[childName].forEach(function(c) {
						children.push({
							name: childName,
							node: c
						});
					});
					// We have to delete the child, otherwise it would be exposed as a value in the .dat file
					delete(elt[childName]);
				}
			});
		}
		processElement(_, writer, elt, entityExportConfig);

		// Now, we can process the children
		children.forEach_(_, function(_, child) {
			processElement(_, writer, child.node, entityExportConfig.children[child.name]);
		});

		writer.write(_, "7," + header + "\n");
	}

	function _generatePatch(_, filesList, options) {

		function openWriter(_, shortFilename) {
			var patchFilename = config.patchFolder + "/" + shortFilename + ".dat";
			filenames.push(patchFilename);
			var writer = file.text.writer(patchFilename, "utf8");
			console.log("Generate patch file: " + patchFilename);
			writer.write(_, '1,"' + config.patch.comment + '","' + config.patch.langs.join("/") + '","' + config.patch.version + '","","' + config.patch.product + '","1",\n');
			return writer;
		}

		function closeWriter(_, writer) {
			writer.write(_, '8,"' + config.patch.comment + '"\n');
			writer.write(_);
		}

		var filenames = [];

		var writer;

		if (options.oneFile) {
			writer = openWriter(_, "patch");
		}

		var normalizedMetaFolder = path.normalize(config.metaFolder + "/").toLowerCase();
		// console.log(normalizedMetaFolder);

		filesList.forEach_(_, function(_, filename) {
			console.log("Processing file " + filename);
			var normalizedFilePath = path.normalize(config.gitFolder + "/" + filename).toLowerCase();
			if (!normalizedFilePath.substr(0, normalizedMetaFolder.length) == normalizedMetaFolder) {
				// This file is not a metadata file
				return;
			}
			var relativeFilePath = normalizedFilePath.substr(normalizedMetaFolder.length);
			//var parts = normalizedFilePath.slice('')
			var parts = relativeFilePath.split(path.sep);

			console.log(parts);
			// parts[0] = module name (superv, common, sales, stocks, ...)
			// parts[1] = metadata type (datatype, entity, table, classe, ...)
			// parts[2] = entity type (atable, atype, ...)

			var elt = JSON.parse(fs.readFile(normalizedFilePath, 'utf8', _));
			if (!options.oneFile) {
				writer = openWriter(_, parts[parts.length - 2] + "_" + parts[parts.length - 1]);
			}
			var entityExportConfig = require("etna-etl/lib/entities/" + parts[parts.length - 2]).entity;
			console.log(normalizedFilePath);
			processATableElement(_, writer, entityExportConfig, elt);
			if (!options.oneFile) {
				closeWriter(_, writer);
			}
		});
		if (options.oneFile) {
			closeWriter(_, writer);
			if (options.x3PatchToCompare) {
				setTimeout(~_, 1000);
				comparePatchFiles(_, filenames[0], options.x3PatchToCompare);
			}
		}

		return filenames;
	}

	function comparePatchFiles(_, filename1, filename2) {
		function parseFile(_, filename) {
			var parts = {};
			var reader = ez.devices.file.text.reader(filename, "utf8").transform(ez.transforms.lines.parser());
			var currentBlockId;
			var currentBlockIdPrefix;
			while (true) {
				var line = reader.read(_);
				if (!line)
					break;
				console.log(filename + "/" + line);
				// Try to parse sth like 1,"test","ENG/FRA","1","","X3","1",
				var result = /^1,\"(.*)\",\"([\w,\/]*)\",\"(\w*)\",\"(\w*)\",\"(\w*)\",\"(\w*)\"/.exec(line);
				if (result) {
					// Start of a 1..8 block
					parts["HEADER"] = line;
					continue;
				}
				// Try to parse sth like 2,"ACLA","TCAWRKHISSUI","Workflow tracking archive"
				result = /^2,\"(\w+)\",\"(\w+)\",\"(.+)\"/.exec(line);
				if (result) {
					// Start of a 2..7 block
					currentBlockIdPrefix = result[1] + "." + result[2];
					parts[currentBlockIdPrefix + ".ITEM_HEADER"] = line;
					continue;
				}
				// Try to parse sth like 3,"ACLAF","ABROBJ"
				result = /^3,\"(\w+)\",\"?([^\"]+)\"?/.exec(line);
				if (result) {
					// Start of a 3..6 block
					currentBlockId = currentBlockIdPrefix + "." + result[1] + ":" + result[2];
					parts[currentBlockId] = "";
					continue;
				}
				// Try to parse sth like 6,"ACLA"
				result = /^6,\"(\w+)\"/.exec(line);
				if (result) {
					// End of 3..6 block
					currentBlockId = null;
					continue;
				}
				// Try to parse sth like 7,"ACLA","TCAWRKHISSUI","Workflow tracking archive"
				result = /^7,\"(\w+)\",\"(\w+)\",\"(.+)\"/.exec(line);
				if (result) {
					// End of 2..7 block
					currentBlockIdPrefix = null;
					continue;
				}
				result = /^8,\"(.*)\"/.exec(line);
				if (result) {
					// End of 1..8 block
					// Nothing special to be done. should be the end of the file
					continue;
				}
				if (!currentBlockId)
					console.log("**************** " + line);
				parts[currentBlockId] += line;
			}
			return parts;
		}

		function compareParts(filename1, parts1, filename2, parts2) {
			Object.keys(parts1).forEach(function(key) {
				var part1 = parts1[key];
				var part2 = parts2[key];
				if (!part2)
					throw new Error("Could not find key " + key + " in file " + filename2);
				if (part1 !== part2) {
					console.log("------------- " + filename1);
					console.log(part1);
					console.log("------------- " + filename2);
					console.log(part2);
					console.log("-------------");
					throw new Error("Content mismatch : " + key);
				}
			});

		}

		console.log(">>>>>>>>>>>>>>>>> " + filename1);
		var parts1 = parseFile(_, filename1);
		var parts2 = parseFile(_, filename2);
		compareParts(filename1, parts1, filename2, parts2);
		compareParts(filename2, parts2, filename1, parts1);
	}

	return {

		/// Returns the sha1 that was last synchronized
		getLastSyncdHead: function(_) {
			var head;
			try {
				superv.sqlDriver.withConnection(_, function(_, cnx) {
					var row = superv.sqlDriver.reader(_, cnx, "select GITSHA1 from " + settingsTable).toArray(_)[0];
					if (!row) {
						config.trace && config.trace("First sync : full sync");
						return null;
					}
					head = row.GITSHA1;
				});
			} catch (err) {
				console.log("ERROR : " + err.message);
			}
			config.trace && config.trace("Incremental sync from sha1 : " + head);
			return head;
		},

		/// Stores the sha1 that was last synchronized
		setLastSyncdHead: function(_, sha1) {
			try {
				superv.sqlDriver.withConnection(_, function(_, cnx) {
					superv.sqlDriver.execute(_, cnx, "delete from " + settingsTable);
					superv.sqlDriver.execute(_, cnx, "insert into " + settingsTable + " (GITSHA1) values (" + superv.sqlDriver.param(0) + ")", [sha1]);
				});
			} catch (err) {
				console.log("ERROR : " + err.message);
			}
			config.trace && config.trace("HEAD '" + sha1 + "' written");
		},

		listModifiedFiles: function(_, fromSha1, toSha1) {
			var allText = '';
			var result = getGitWrapper().diffStat(_, fromSha1, toSha1);
			//var result = getGitWrapper().getLog(_);
			return result.diffs.map(function(diff) {
				switch (diff.touch) {

					case 'A': // Add
					case 'M': // Modified
						return diff.filename;
					case 'D': // Deleted
						// STDEN : ignored for now
						return;
					default:
						// STDEN : ignored for now
						return;
				}
			});
		},

		generatePatch: function(_, filesList, options) {
			return _generatePatch(_, filesList, options);
		}
	}
};
