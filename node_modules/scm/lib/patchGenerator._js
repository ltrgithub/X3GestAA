"use strict";
var supervisor = require("etna-supervisor/lib/supervisor");
var nodeLocalConfig = require('config');
var gitWrapper = require('etna-etl/lib/gitWrapper');
var path = require("path");
var ez = require("ez-streams");
var file = ez.devices.file;
var fs = require("streamline-fs");


exports.newGenerator = function(_, config) {

	config.git = config.git || {};
	config.patch = config.patch || {};
	config.patch.langs = config.patch.langs || ["ENG", "FRA"]
	config.patch.comment = config.patch.comment || "test";
	config.patch.version = config.patch.version || 1;
	config.patch.product = config.patch.product || "X3";
	config.settingsTable = config.settingsTable || "_SETTINGS";

	// Normalize the meta folder
	config.metaSubFolder = path.join(config.metaSubFolder + "/").toLowerCase();
	var superv = supervisor.create(_, config);

	try {
		// Make sure the settings table exists
		superv.sqlDriver.getTableDef(_, superv.folderName, config.settingsTable);
	} catch (err) {
		console.log("ERROR : " + err);
		var tableDef = {
			schemaName: superv.folderName,
			tableName: config.settingsTable,
			columns: [{
				name: "GITSHA1",
				isNullable: true,
				type: "nvarchar",
				maxLength: 40
			}],
			indexes: [],
		};
		superv.sqlDriver.createTableFromTableDefinition(_, tableDef);
		config.trace && config.trace("Settings table '" + tableDef.tableName + "' was created.")
	}

	function getGitWrapper() {
		var options = {
			folder: config.solutionPath,
			trace: config.git.trace,
		};
		return new gitWrapper.git(options);
	}

	function parseJSONValue(key, val) {

		if (/^##\w+##$/.test(key)) {
			// Special tags : ##texts##, ##comments##, ...
			return {
				type: "extra",
				value: val
			};
		}
		var result = {};
		if (Array.isArray(val)) {
			result.value = [];
			result.type = "array";
			val.forEach(function(arrayItem, itemIdx) {
				result.value.push(parseJSONValue(key + "[" + itemIdx + "]", arrayItem));
			});
		} else if ("string" === typeof(val)) {
			// String : S|xxxxx
			// String with specific option (type option) : S:TF|xxxxxxxx
			var parts = /^S(\:[^|"]+)?\|(.*)$/.exec(val);
			if (parts) {
				result = {
					type: "string",
					value: parts[2]
				};
				if (" " === result.value)
					result.value = "";
				if (parts[1]) {
					if (parts[1].indexOf('T') != -1) {
						// This text is a formula, some characters must be mapped
						// Replace ',' with #254
						result.value = result.value.replace(/,/g, String.fromCharCode(255))
						// Replace #10 with #255
						result.value = result.value.replace(/\r/g, String.fromCharCode(254))
					}
				}
			} else if (/^C\|/.test(val)) {
				// Clobs
				result = {
					type: "clob",
					value: val.substring(2)
				};
			} else if (/^N\|/.test(val)) {
				// Decimals are stored as strings in json
				result = {
					type: "decimal",
					value: parseFloat(val.substring(2))
				};
			} else if (/^D\|/.test(val)) {
				// Date (without time part)
				// D:2009-12-31 -> 20091231
				val = val.substring(2);
				result = {
					type: "date",
					value: val == "NULL" ? null : parseInt(val.replace(/\-/g, ""))
				};
			} else if (/^T\|/.test(val)) {
				// Timestamp
				// T|2003-09-11T00:00:00.000Z -> 2003-09-11T00:00:00Z
				parts = /(\d+)-(\d+)-(\d+)T(\d+):(\d+):(\d+).(\d+)Z/.exec(val.substring(2));
				// This is date time : just remove the millis
				result = {
					type: "timestamp",
					value: parts[1] + "-" + parts[2] + "-" + parts[3] + "T" + parts[4] + ":" + parts[5] + ":" + parts[6] + "Z"
				};
			} else {
				// should never happen
				throw new Error("Unknown value type : " + val);
			}
		} else if (!isNaN(val)) {
			result = {
				type: "number",
				value: val
			};
			// Nothing to do : this is a number. Keep it as it.
		} else {
			// should never happen .. may be an object
		}
		return result;
	}

	function processElement(_, writer, elt, eltConfig) {
		// Compute the title of the block
		var blockTitle;
		if (eltConfig.titleFunction) {
			blockTitle = invokeTitleFunction(eltConfig.titleFunction, elt);
		} else {
			var pk = eltConfig.primaryKey || eltConfig.patchPK;
			if (!pk) {
				if (!eltConfig.orderBy)
					throw new Error("'orderBy' property is missing on element " + (eltConfig.title ? eltConfig.title : eltConfig.tableName));
				pk = eltConfig.orderBy.split(',')[0];
			}
			blockTitle = parseJSONValue(pk, elt[pk]).value;
		}

		writer.write(_, "3,\"" + eltConfig.abbrev + "\"," + blockTitle + "\n");

		var allLines = {};

		function formatValues(lineType, name, dimension, values, valueType) {
			var line = lineType + ',"' + name + '",' + dimension;
			if (25 === lineType) {
				// Clob
				line += "\r\n" + values.length + "\r\n" + values + "\r\n" + "**********";
			} else {
				if (!Array.isArray(values))
					values = [values];
				values.forEach(function(value) {
					line += ',';
					if (typeof(value) == "string") {
						if (value == " ")
							value = "";
						line += '"' + value + '"';
					} else {
						if ((4 === lineType) && valueType && ("date" === valueType) && !value) {
							// null dates are written as 000000
							value = "000000";
						}
						line += value;
					}
				});
			}
			return line;
		}

		function enqueueItem(lineType, name, dimension, values, valueType) {
			allLines[name] = allLines[name] || [];
			allLines[name].push(formatValues(lineType, name, dimension, values, valueType));
		}

		function padDatePart(part, length) {
			// convert any int value into string
			part = "" + part;
			while (part.length < length)
				part = "0" + part;
			return part;
		}

		if (elt["##texts##"]) {
			var texts = elt["##texts##"];
			Object.keys(texts).forEach_(_, function(_, columnName) {
				if (!elt.hasOwnProperty(columnName))
					return;
				var textIds = elt[columnName];
				if (!Array.isArray(textIds))
					textIds = [textIds];

				// Some texts can have multiple dimensions (AWINDOW.INTMSK for instance)
				textIds.forEach_(_, function(_, textId, textDimension) {

					config.patch.langs.forEach_(_, function(_, langCode) {
						var valsToWrite = [
							texts[columnName][textDimension][langCode] || "",
							langCode,
							textId,
						];

						if (elt["##comments##"] && elt["##comments##"][columnName] && elt["##comments##"][columnName][textDimension] && elt["##comments##"][columnName][textDimension][langCode])
							valsToWrite.push(elt["##comments##"][columnName][textDimension][langCode]);
						else
							valsToWrite.push("");
						enqueueItem(5, columnName, textDimension, valsToWrite);
					});

					enqueueItem(5, columnName, textDimension, ["", "***"]);
				});

				delete(elt[columnName]);
			});
			// val.forEach_(_, function(_, arrayItem, itemIdx) {
			// 	enqueueItem(5, key, itemIdx, arrayItem);
			// });
			delete(elt["##texts##"]);
			delete(elt["##comments##"]);
		}

		Object.keys(elt).forEach_(_, function(_, key) {
			if (/^##\w+##$/.test(key)) {
				// Special tags : ##texts##, ##comments##, ##extraTables##, ...
				return;
			}

			var val = parseJSONValue(key, elt[key]);
			if ("array" == val.type) {
				val.value.forEach_(_, function(_, arrayItem, itemIdx) {
					enqueueItem(4, key, itemIdx, arrayItem.value, arrayItem.type);
				});
			} else if ("clob" == val.type) {
				enqueueItem(25, key, 0, val.value, val.type);
			} else {
				enqueueItem(4, key, 0, val.value, val.type);
			}
		});

		Object.keys(allLines).sort().forEach_(_, function(_, lines) {
			allLines[lines].forEach_(_, function(_, line) {
				writer.write(_, line + "\n");
			});
		});

		if (elt["##extraTables##"] && elt["##extraTables##"].ATEXTRA) {
			var texts = elt["##extraTables##"].ATEXTRA;
			Object.keys(texts).forEach_(_, function(_, columnName) {
				var atLeastOneText = false;
				config.patch.langs.forEach_(_, function(_, langCode) {
					var valsToWrite = [
						texts[columnName][langCode] || "",
						langCode,
					];
					var textVals = texts[columnName];
					// Note : textVals is an object indexed by ATEXTRA.IDENT2_0.
					if (textVals) {
						// Here, we only consider the first ATEXTRA.IDENT2_0.
						var t = texts[columnName][Object.keys(texts[columnName])[0]];
						if (t[langCode]) {
							writer.write(_, formatValues(9, columnName, 0, [t[langCode], langCode, "" + elt[eltConfig.primaryKey], Object.keys(texts[columnName])[0]]) + "\n");
							atLeastOneText = true;
						}
					}
				});
				if (atLeastOneText)
					writer.write(_, formatValues(9, columnName, 0, ["", "***"]) + "\n");
			});
			// val.forEach_(_, function(_, arrayItem, itemIdx) {
			// 	enqueueItem(5, key, itemIdx, arrayItem);
			// });
			delete(elt["##extraTables##"])
		}

		writer.write(_, "6,\"" + eltConfig.abbrev + "\"\n");
	}

	function invokeTitleFunction(fct, elt) {
		var arg = {};
		Object.keys(elt).forEach(function(key) {
			arg[key] = parseJSONValue(key, elt[key]).value;
		});
		var title = fct(arg);
		if (title && title["ENG"])
			title = title["ENG"];
		return title;
	}

	function processMetaElement(_, writer, entityExportConfig, elt) {
		var title;
		if (elt["##texts##"]) {
			title = elt["##texts##"][entityExportConfig.textLinks[0]][0]["ENG"];
		} else {
			if (entityExportConfig.mainTitleFunction)
				title = invokeTitleFunction(entityExportConfig.mainTitleFunction, elt);
			else
				throw new Error("No localized label are defined for element '" + entityExportConfig.title + "', you must provide a 'mainTitleFunction' function.")
		}
		var header = '"' + entityExportConfig.abbrev + '","' + parseJSONValue(entityExportConfig.primaryKey, elt[entityExportConfig.primaryKey]).value + '","' + title + '"';
		writer.write(_, "2," + header + "\n");
		var children = [];
		if (entityExportConfig.children) {
			// The configuration describes some child-node, we have to keep them in a separate list.
			// They will be processed later.
			Object.keys(entityExportConfig.children).forEach(function(childName) {
				// For instance, in tables.js, childName == 'COLUMNS' or 'INDEXES'
				if (elt[childName]) {
					// note : elt[childName] is an array. Each item describes a child (i.e. one index or one column)
					elt[childName].forEach(function(c) {
						children.push({
							name: childName,
							node: c
						});
					});
					// We have to delete the child, otherwise it would be exposed as a value in the .dat file
					delete(elt[childName]);
				}
			});
		}
		processElement(_, writer, elt, entityExportConfig);

		// Now, we can process the children
		children.forEach_(_, function(_, child) {
			processElement(_, writer, child.node, entityExportConfig.children[child.name]);
		});

		writer.write(_, "7," + header + "\n");
	}

	/// returns whether a relative filename describes a .json meta file (relative to solutionFolder)
	function isMetaFile(relativeFilename) {
		// Normalize the filename
		relativeFilename = path.join(relativeFilename).toLowerCase();
		if (!relativeFilename.substr(0, config.metaSubFolder.length) == config.metaSubFolder) {
			// This file is not a metadata file
			return false;
		}
		return /\.json$/.test(relativeFilename);
	}

	function _generatePatches(_, filesList, options) {


		function openWriter(_, shortFilename) {
			var patchFilename = config.patchSubFolder + "/" + shortFilename + ".dat";
			filenames.push(patchFilename);
			var writer = file.text.writer(patchFilename, "utf8");
			config.trace && config.trace("\tGenerating patch file: " + path.join(config.solutionPath, patchFilename));

			writer.write(_, '1,"' + config.patch.comment + '","' + config.patch.langs.join("/") + '","' + config.patch.version + '","","' + config.patch.product + '","1",\n');
			return writer;
		}

		function closeWriter(_, writer) {
			writer.write(_, '8,"' + config.patch.comment + '"\n');
			writer.write(_);
		}

		var filenames = [];
		var writer;

		// Note : the gitWrapper may have changed the current folder
		process.chdir(config.solutionPath);

		var patchFolder = path.join(config.solutionPath, config.patchSubFolder);
		if (!fs.exists(patchFolder, _)) {
			config.trace && config.trace("Create output folder " + patchFolder);
			fs.mkdir(patchFolder, _);
		}

		options = options || {};
		if (options.oneFile) {
			writer = openWriter(_, "patch");
		}

		filesList.forEach_(_, function(_, filename) {
			// Normalize the filename
			filename = path.join(filename); //.toLowerCase();
			// Note filename looks like "META_SUB_FOLDER/SUPERV/TABLES/ABANK.json"
			config.trace && config.trace("Processing file " + path.join(config.solutionPath, filename));
			if (!isMetaFile(filename)) {
				// This file is not a metadata file
				return;
			}

			// Only keep SUPERV/TABLES/ABANK.json 
			// (Caution config.metaSubFolder may have more than one level)
			filename = filename.substr(config.metaSubFolder.length);
			var parts = filename.split(path.sep);

			// parts[0] = module name (superv, common, sales, stocks, ...)
			// parts[1] = metadata type (datatype, entity, table, classe, ...)
			// parts[2] = entity name (with .json)  (atable.JSON, abank.json, ...)
			parts[2] = parts[2].substring(0, parts[2].length - 5); // remove the '.json'

			var elt = JSON.parse(fs.readFile(config.metaSubFolder + "/" + filename, 'utf8', _));
			if (!options.oneFile) {
				writer = openWriter(_, parts[1] + "_" + parts[2]);
			}
			var entityExportConfig = require("etna-etl/lib/entities/" + parts[1]).entity;
			processMetaElement(_, writer, entityExportConfig, elt);
			if (!options.oneFile) {
				closeWriter(_, writer);
			}
		});
		if (options.oneFile) {
			closeWriter(_, writer);
		}

		return filenames;
	}

	function _comparePatchFiles(_, filename1, filename2) {
		function parseFile(_, filename) {
			var parts = {};
			var reader = ez.devices.file.text.reader(filename, "utf8").transform(ez.transforms.lines.parser());
			var currentBlockId;
			var currentBlockIdPrefix;
			while (true) {
				var line = reader.read(_);
				if (!line)
					break;
				// Try to parse sth like 1,"test","ENG/FRA","1","","X3","1",
				var result = /^1,\"(.*)\",\"([\w,\/]*)\",\"(\w*)\",\"(\w*)\",\"(\w*)\",\"(\w*)\"/.exec(line);
				if (result) {
					// Start of a 1..8 block
					parts["HEADER"] = line;
					continue;
				}
				// Try to parse sth like 2,"ACLA","TCAWRKHISSUI","Workflow tracking archive"
				result = /^2,\"(\w+)\",\"(\w+)\",\"(.+)\"/.exec(line);
				if (result) {
					// Start of a 2..7 block
					currentBlockIdPrefix = result[1] + "." + result[2];
					parts[currentBlockIdPrefix + ".ITEM_HEADER"] = line;
					continue;
				}
				// Try to parse sth like 3,"ACLAF","ABROBJ"
				result = /^3,\"(\w+)\",\"?([^\"]+)\"?/.exec(line);
				if (result) {
					// Start of a 3..6 block
					currentBlockId = currentBlockIdPrefix + "." + result[1] + ":" + result[2];
					parts[currentBlockId] = "";
					continue;
				}
				// Try to parse sth like 6,"ACLA"
				result = /^6,\"(\w+)\"/.exec(line);
				if (result) {
					// End of 3..6 block
					currentBlockId = null;
					continue;
				}
				// Try to parse sth like 7,"ACLA","TCAWRKHISSUI","Workflow tracking archive"
				result = /^7,\"(\w+)\",\"(\w+)\",\"(.+)\"/.exec(line);
				if (result) {
					// End of 2..7 block
					currentBlockIdPrefix = null;
					continue;
				}
				result = /^8,\"(.*)\"/.exec(line);
				if (result) {
					// End of 1..8 block
					// Nothing special to be done. should be the end of the file
					continue;
				}
				if (parts[currentBlockId].length)
					parts[currentBlockId] += "\n";
				parts[currentBlockId] += line;
			}
			return parts;
		}

		function compareParts(filename1, parts1, filename2, parts2) {
			Object.keys(parts1).forEach(function(key) {
				var part1 = parts1[key];
				var part2 = parts2[key];
				if (!part2)
					throw new Error("Could not find key " + key + " in file " + filename2);
				var lines1 = part1.split("\n");
				var lines2 = part2.split("\n");
				var same = lines1.length == lines2.length;
				same = same && !lines1.some(function(line1) {
					var idx2 = lines2.indexOf(line1);
					if (idx2 == -1) {
						config.trace && config.trace("Could not find string '" + line1 + "' from file " + filename2);
						return true;
					}
					return false;
				});

				if (!same) {
					config.trace && config.trace("------------- " + filename1);
					config.trace && config.trace(part1);
					config.trace && config.trace("------------- " + filename2);
					config.trace && config.trace(part2);
					config.trace && config.trace("-------------");
					throw new Error("Content mismatch : " + key);
				}
			});

		}
		var parts1 = parseFile(_, filename1);
		var parts2 = parseFile(_, filename2);
		compareParts(filename1, parts1, filename2, parts2);
		compareParts(filename2, parts2, filename1, parts1);
	}

	/// Stores the sha1 that was last synchronized
	function setLastSyncdSha1(_, sha1) {
		try {
			superv.sqlDriver.withConnection(_, function(_, cnx) {
				superv.sqlDriver.execute(_, cnx, "delete from " + config.settingsTable);
				superv.sqlDriver.execute(_, cnx, "insert into " + config.settingsTable + " (GITSHA1) values (" + superv.sqlDriver.param(0) + ")", [sha1]);
			});
		} catch (err) {
			console.log("ERROR : " + err.message);
		}
		config.trace && config.trace("'" + sha1 + "' written as the last sync'd head.");
	}

	function listModifiedFiles(_, fromSha1, toSha1) {
		var result;
		if (fromSha1) {
			// Return only the files that where modified in the range fromSha1..toSha1
			result = getGitWrapper().diffStat(_, fromSha1, toSha1 || this.getGitHead(_));
		} else {
			// Retrieve all versionned files
			result = getGitWrapper().diffStat(_);
		}
		return result.diffs.map(function(diff) {
			switch (diff.touch) {

				case 'A': // Add
				case 'M': // Modified
					return diff.filename;
				case 'D': // Deleted
					// STDEN : ignored for now
					return;
				default:
					// STDEN : ignored for now
					return;
			}
		}).filter(function(d) {
			// Remove 'undefined' entries
			return d;
		});
	}

	function applyPatches(_, patchFilenames) {
		if (!patchFilenames.length)
			return;
		console.log("******* TODO ***********");
		console.log("apply the following patches : ");
		patchFilenames.forEach(function(patchFilename) {
			console.log("\t-" + patchFilename);
		})
	}



	return {

		/// Returns the sha1 that was last synchronized
		getLastSyncdSha1: function(_) {
			var sha1;
			try {
				superv.sqlDriver.withConnection(_, function(_, cnx) {
					var row = superv.sqlDriver.reader(_, cnx, "select GITSHA1 from " + config.settingsTable).toArray(_)[0];
					if (!row) {
						return null;
					}
					sha1 = row.GITSHA1;
				});
			} catch (err) {
				console.log("ERROR : " + err.message);
			}
			return sha1;
		},

		getGitHead: function(_) {
			return getGitWrapper().getHead(_);
		},

		generatePatches: function(_, filesList, options) {
			var results = _generatePatches(_, filesList, options);
			if (options.oneFile && options.x3PatchToCompare) {
				setTimeout(~_, 1000);
				config.trace && config.trace("Comparing generated file '" + filenames[0] + "' with reference file '" + options.x3PatchToCompare + "'");
				_comparePatchFiles(_, filenames[0], options.x3PatchToCompare);
			}
			return results;
		},


		synchronize: function(_, options) {
			options = options || {};
			var lastSyncdSha1;
			if (!options.full)
				lastSyncdSha1 = this.getLastSyncdSha1(_);
			if (config.trace) {
				if (lastSyncdSha1)
					config.trace("Last sync'd head = " + lastSyncdSha1);
				else
					config.trace("Last sync'd head = not set => full sync");
			}
			var gitHead = this.getGitHead(_);
			config.trace && config.trace("Git head = " + gitHead.sha1);
			// First : retrieve the files that have been changed (or created) between the two revisions			
			var files = listModifiedFiles(_, lastSyncdSha1, gitHead.sha1).filter(isMetaFile);
			var results;
			if (files.length) {
				results = _generatePatches(_, files, options);
				setLastSyncdSha1(_, gitHead.sha1);
			} else {
				config.trace && config.trace("Already up-to-date, no patch needed.")
				results = [];
			}
			return applyPatches(_, results);
		},

		comparePatchFiles: function(_, filename1, filename2) {
			return _comparePatchFiles(_, filename1, filename2);
		},
	}
};
