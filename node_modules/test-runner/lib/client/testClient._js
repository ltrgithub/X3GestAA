"use strict";

var qunit = QUnit;
var helpers = require("syracuse-core/lib/helpers");
var jsonRequest = require("streamline/lib/streams/jsonRequest");

var pair = (document.location + "").split('?');
var base = pair[0];
var qs = helpers.url.parseQueryString(pair[1] || "");

function loadFiles(_, files) {
	files.forEach_(_, function(_, file) {
		require.async(file, _);
	});
}

function advertise(str) {
	$('#qunit-userAgent').text(str);
}

function runClient(files, _) {
	qunit.init();
	loadFiles(_, files);
	qunit.moduleStart = function(name) {
		advertise("running " + name + " ...");
	};
	qunit.done = function(failures, total) {
		advertise("done!");
		if (window.SyracuseUnit && window.SyracuseUnit._doneCallback) {
			window.SyracuseUnit._doneCallback(failures, total);
		}
	};
	qunit.start();
}

function runServer(files, _) {
	var started = new Date();
	var $files = $("#qunit-tests");
	$files.empty();
	var $ol = $('<ol/>'),
		mod, name;
	var totalOk = 0,
		totalFail = 0;
	var ok = 0,
		fail = 0;

	function cleanModule(mod) {
		var i = mod.indexOf('/node_modules/');
		return i < 0 ? mod : mod.substring(i + 14);
	}

	function finish() {
		var clas = fail ? "fail" : "pass";
		var counts = " <b class='counts'>(<b class='failed'>" + fail + "</b>, <b class='passed'>" + ok + "</b>, " + (ok + fail) + ")</b>";
		var $b = $('<strong>' + cleanModule(mod) + ": " + name + counts + '</strong>');
		$ol.hide();
		var $li = $('<li class="' + clas + '"/>');
		$li.append($b);
		$li.append($ol);
		$b.click(function() {
			$li.find('ol').toggle();
		});
		$files.append($li);
	}

	function escape(s) {
		return (s || '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\n/g, "<br/>");
	}

	files.forEach_(_, function(_, file) {
		advertise("running " + file + " ...");
		var results = jsonRequest.send(_, '/tests/start', [file]);
		results.forEach(function(result) {
			if (result.module != mod || result.name != name) {
				mod && finish();
				mod = result.module;
				name = result.name;
				ok = 0;
				fail = 0;
				$ol = $('<ol/>');
			}
			var clas = result.errorStack ? "fail" : "pass";
			var message = escape(result.message) + (result.errorStack ? "<br/>" + escape(result.errorStack) : "");
			var $li = $('<li class="' + clas + '">' + message + "</li>");
			$ol.append($li);
			result.errorStack ? (fail++, totalFail++) : (ok++, totalOk++);
		});
	});
	mod && finish();
	advertise("done!");
	$('#qunit-banner').addClass(totalFail ? "qunit-fail" : "qunit-pass");
	var summary = ['Tests completed in ', + new Date() - started, ' milliseconds.<br/>',
		'<span class="passed">', totalOk,
		'</span> tests of <span class="total">', totalOk + totalFail,
		'</span> passed, <span class="failed">', totalFail, '</span> failed.'
	].join('');
	$files.append($('<p id="qunit-testresult" class="result"/>').html(summary));
}

function _li(title, files) {
	var $files = $("#qunit-tests");
	var href = base + files;
	$files.append('<li class="pass"><a href="' + href + '">' + title + '</a></li>');

}

exports.main = function(_) {
	try {
		var x3Filter ="syracuse-x3/test/server/x3";
		var files = jsonRequest.send(_, '/tests/files');
		if (!qs.rc && !qs.rs) {
			_li("ALL ETNA TESTS", "?rs=" + files.server.filter(function(val) {
				return (val.substring(0, 4) === "etna") || (val.toLowerCase().substring(0, x3Filter.length) === x3Filter);
			}).join(','));
			_li("ALL CLIENT TESTS", "?rc=" + files.client.join(','));
			files.client.forEach(function(file) {
				_li(file, "?rc=" + file);
			});
			_li("ALL SERVER TESTS", "?rs=" + files.server.join(','));
			files.server.forEach(function(file) {
				_li(file, "?rs=" + file);
			});
			_li("ALL X3 TESTS", "?rs=" + files.server.filter(function(val) {
				return val.toLowerCase().substring(0, x3Filter.length) == x3Filter;
			}).join(','));

		}
		if (qs.rc) {
			runClient(qs.rc.split(","), _);
		}
		if (qs.rs) {
			runServer(qs.rs.split(","), _);
		}
	} catch (ex) {
		advertise(ex.message, true);
		$('#qunit-banner').addClass("qunit-fail");
		console.log(ex.message + "\n" + ex.stack);
	}
};
if (require.main == module) exports.main(!_);
