var QUnit = require('../support/qunit/qunit/qunit.js');

module.exports = function(options) {
    console.error("WRAPPER HERE");
	require('coffee-script');
	if (options.etna) require('etna-engine/lib/register'); // must be before streamline!
	require('streamline').register(options.streamline);
	var globals = require('streamline/lib/globals');
	if (options.tenantId != null) globals.context.tenantId = options.tenantId;
	require('syracuse-core/lib/localeWrapper');

	var oldAsyncTest = QUnit.asyncTest;
	QUnit.asyncTest = function(testName, expected, callback) {
		if (arguments.length === 2) {
			callback = expected;
			expected = null;
		}

		callback = function(cb) {
			return oldAsyncTest(testName, expected, callback(_ >> cb));
		};
	};

	var oldStart = QUnit.start;
	QUnit.start = function() {
		if (!QUnit.config.currentModule) return;
		console.log('======> UNIT TEST', QUnit.config.currentModule.split('node_modules/').pop());

		if (typeof global.MAIN === "function") {
			require("etna-supervisor/lib/supervisor").create(function(err, superv) {
				if (err) throw err;
				require("etna-engine/lib/runtime/variables").initStack(superv);
				globals.context.x3frame.loc.file = options.code;
				global.MAIN(function(err) {
					if (err) throw err;
					oldStart();
				});
			}, "SUPERV");
		} else {
			oldStart();
		}
	};
    console.error("WRAPPER DONE REPLACE");
    var oldDone = QUnit.done;
    QUnit.done = function() {
        console.error("KILLING");
        if (oldDone) oldDone();
        setTimeout(~_, 100);
        process.exit();
    }
};
