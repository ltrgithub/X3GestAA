"use strict";

var sys = require("util");
var pathUtil = require("path");
var fs = require("fs");
var nodeQUnit = require("../../deps/node-qunit/lib/index");
var spawn = require("child_process").spawn;
var streamline = require("streamline/lib/compiler/register");
var readers = require("streamline/lib/streams/readers");

nodeQUnit.options.coverage = false;
nodeQUnit.options.errorsOnly = true;
nodeQUnit.options.errorStack = true;
nodeQUnit.options.summary = true;

var root = pathUtil.join(__dirname, "../../..");

function doDir(_, path, depth, result, tier){
	function _dirOk(file){
		switch (depth) {
			case 0:
				return true;
			case 1:
				return file == "test";
			case 2:
				return file == "common" || file == tier;
			default:
				return false;
		}
	}
	
	var files = fs.readdir(root + path, _);
	files.forEach_(_, function(_, file, i){
		var fpath = path + "/" + file;
		var stats = fs.lstat(root + fpath, _);
		if (stats.isDirectory()) {
			if (_dirOk(file)) 
				doDir(_, fpath, depth + 1, result, tier);
		}
		else if (stats.isFile()) {
			var match;
			if (depth == 3 && (match = /(^[^.].*)\._?js/.exec(file))) {
				var name = path + "/" + match[1];
				if (tier === 'client' && name.indexOf('--fibers') > 0)
					return;
				if (name[name.length - 1] != "_") 
					result.push(name.substring(1));
			}
		}
	});
}

function _getFiles(_, tier){
	var result = [];
	doDir(_, "", 0, result, tier);
	return result;
}

function _runServer(_, files){
	var results = [];
	files.forEach_(_, function(_, file){
		var opts = {
			code: file,
			tests: [file],
			coverage: false,
			errorsOnly: false,
			errorStack: true,
			summary: true,
			streamline: streamline.options
		}
		var child = spawn(process.execPath, [__dirname + "/../../deps/node-qunit/lib/bootstrap.js", JSON.stringify(opts)]);
		child.stdout.setEncoding("utf8");
		var reader = new readers.Reader(child.stdout);
		child.stderr.setEncoding("utf8");
		child.stderr.on("data", function(data){
			console.error(data);
		});
		var str;
		while ((str = reader.readItem(_)) != null) {
			if (str[0] == "{") 
				results.push(str);
			else 
				console.log(str);
		}
	})
	return "[" + results.join(',') + "]";
}

exports.dispatch = function(_, request, response){
	try {
		function jsonReply(obj){
			var json = typeof obj === "string" ? obj : JSON.stringify(obj);
			response.writeHead(200, {
				'content-type': 'application/json',
				//'content-length': json.length
			});
			response.end(json, "utf8");
		}
		
		var result;
		switch (request.url) {
			case '/tests/files':
				jsonReply({
					client: _getFiles(_, "client"),
					server: _getFiles(_, "server")
				});
				break;
			case '/tests/start':
				jsonReply(_runServer(_, JSON.parse(request.readAll(_))));
				break;
			default:
				response.writeHead(404);
				response.end("resource not found: " + request.url);
		}
	} 
	catch (ex) {
		response.writeHead(500);
		response.end(ex.message + '\n' + ex.stack);
	}
};
exports.run = function(_){
	var files = _getFiles(_, "server").map_(_, function(_, f){
		f = root + "/" + f;
		return {
			code: f,
			tests: f
		}
	});
	nodeQUnit.run(files, function(report){
		// summary option is set => report is already printed
		// console.log(JSON.stringify(report));
	});
}
