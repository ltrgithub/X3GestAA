"use strict";

var pathUtil = require("path");
var fs = require('streamline-fs');
var nodeQUnit = require("../../deps/node-qunit/lib/index");
var spawn = require("child_process").spawn;
var streamline = require("streamline/lib/compiler/register");
var readers = require("streamline/lib/streams/readers");
var globals = require("streamline/lib/globals");
var datetime = require("syracuse-core/lib/types/datetime");

nodeQUnit.options.coverage = false;
nodeQUnit.options.errorsOnly = true;
nodeQUnit.options.errorStack = true;
nodeQUnit.options.summary = true;

var root = pathUtil.join(__dirname, "../../..");

function doDir(_, path, depth, result, tier) {
	function _dirOk(file) {
		switch (depth) {
		case 0:
			return true;
		case 1:
			return file == "test";
		case 2:
			return file == "common" || file == tier;
		default:
			return false;
		}
	}

	var files = fs.readdir(root + path, _);
	files.forEach_(_, function(_, file, i) {
		var fpath = path + "/" + file;
		var stats = fs.lstat(root + fpath, _);
		if (stats.isDirectory()) {
			if (_dirOk(file)) doDir(_, fpath, depth + 1, result, tier);
		} else if (stats.isFile()) {
			var match;
			if (depth == 3 && (match = /(^[^.].*)\._?js$/.exec(file))) {
				var name = path + "/" + match[1];
				if (tier === 'client' && name.indexOf('--fibers') > 0) return;
				if (name[name.length - 1] != "_") result.push(name.substring(1));
			}
		}
	});
}

function _getFiles(_, tier) {
	var result = [];
	doDir(_, "", 0, result, tier);
	return result;
}

function recordResults(_, file, results) {
	try {
		var m = /([^\/]+)\/test\/([^\/]+)\/([^\/]+)(?:\._?js)?$/.exec(file);
		if (!m) throw new Error("bad test file name: " + file);
		var packName = m[1],
			scope = m[2],
			testName = m[3];
		var db = require('syracuse-development/lib/helpers').getOrm(_);
		var pack = db.fetchInstance(_, db.model.getEntity(_, "package"), {
			jsonWhere: {
				name: packName,
			}
		});
		if (!pack) throw new Error("cannot record results: package not found: " + packName);
		var test = db.fetchInstance(_, db.model.getEntity(_, "unitTest"), {
			jsonWhere: {
				"package._uuid": pack._data._id,
				scope: scope,
				name: testName
			}
		});
		if (!test) throw new Error("cannot record results: unit test not found: " + file);
		var ok = results.every(function(result) {
			return result.errorStack == null;
		});
		test.pass(_, ok);
		test.lastRun(_, datetime.now());
		test.save(_);
		if (test.hasErrors(_)) throw new Error("unit test save failed: " + file);
	} catch (ex) {
		console.log(ex.stack);
	}
}

function _runServer(_, files, verbose) {
	var results = [];
	files.forEach_(_, function(_, file) {
		var opts = {
			code: file,
			tests: [file],
			coverage: false,
			errorsOnly: false,
			errorStack: true,
			summary: true,
			streamline: streamline.options,
			tenantId: globals.context.tenantId,
		};
		var nodeOpts = [];
		var harmony = false;
		try {
			eval("(function*(){})");
			nodeOpts.push("--harmony");
			harmony = true;
		} catch (ex) {}

		if (!harmony && /galaxy/.test(file)) return;
		//verbose && console.log("running " + file);
		console.log("======> UNIT TEST " + file);

		var logpath = root + '/' + file + '.testlog';
		var logfd = fs.openSync(logpath, 'w');

		function log(str) {
			var buf = new Buffer(str + '\n', "utf8");
			console.log(str);
			fs.writeSync(logfd, buf, 0, buf.length);
		}
		try {
			var child = spawn(process.execPath, nodeOpts.concat([__dirname + "/../../deps/node-qunit/lib/bootstrap.js", JSON.stringify(opts)]));
			child.stdout.setEncoding("utf8");
			var reader = new readers.Reader(child.stdout);
			child.stderr.setEncoding("utf8");
			child.stderr.on("data", function(data) {
				log(data);
			});
			var str;
			while ((str = reader.readItem(_)) != null) {
				if (str[0] == "{") {
					try {
						var result = JSON.parse(str);
						if (!harmony && result.errorStack && result.errorStack.indexOf("SyntaxError: Unexpected token *") >= 0) {
							result.message = "TEST SKIPPED (requires V8 generators)";
							delete result.errorStack;
							str = JSON.stringify(result);
						}
						if (result.message !== undefined) {
							verbose && console.log(str);
							results.push(result);
						} else log(str);
					} catch (ex) {
						log(str);
					}
				} else log(str);
			}
		} finally {
			fs.closeSync(logfd);
		}
		recordResults(_, file, results);
	});
	return JSON.stringify(results);
}

exports.dispatch = function(_, request, response) {
	function jsonReply(obj) {
		var json = typeof obj === "string" ? obj : JSON.stringify(obj);
		response.writeHead(200, {
			'content-type': 'application/json',
			//'content-length': json.length
		});
		response.end(json, "utf8");
	}
	try {
		var result;
		switch (request.url) {
		case '/tests/files':
			jsonReply({
				client: _getFiles(_, "client"),
				server: _getFiles(_, "server")
			});
			break;
		case '/tests/start':
			jsonReply(_runServer(_, JSON.parse(request.readAll(_))));
			break;
		default:
			response.writeHead(404);
			response.end("resource not found: " + request.url);
		}
	} catch (ex) {
		response.writeHead(500);
		response.end(ex.message + '\n' + ex.stack);
	}
};

function runIt(_) {
	var arg = process.argv[2];
	var files = _getFiles(_, "server").filter(function(f) {
		return !arg || f.indexOf(arg) === 0;
	});
	_runServer(_, files, true);
	//nodeQUnit.run(files, function(report) {
	// summary option is set => report is already printed
	// console.log(JSON.stringify(report));
	//});
};

exports.run = function() {
	runIt(_ >>
	function(err) {
		if (err) throw err;
	});
};