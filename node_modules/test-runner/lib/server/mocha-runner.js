"use strict";
require('npm-shadow')();

var fs = require('fs');
var fsp = require('path');
var chai = require('chai');

global.QUnit = {
	module: function(name) {}
};

global.equals = chai.assert.equal;
global.deepEqual = chai.assert.deepEqual;
global.strictEqual = chai.assert.strictEqual;
global.ok = chai.assert.ok;

global.test = function(name, count, fn) {
	if (typeof count === 'function') fn = count;
	it(name, function() {
		fn();
	});
}

global.asyncTest = function(name, count, fn) {
	if (typeof count === 'function') fn = count;
	it(name, function(done) {
		global.start = function() {
			global.start = null;
			var d = done;
			done = null;
			d();
		}
		fn(function(err) {
			if (err) throw err;
		});
	});
}

function clearRequireCache(cb) {
	Object.keys(require.cache).forEach(function(k) {
		if (/(syracuse|test)-/.test(k) && 
			!/\.node$/.test(k) && 
			!/syracuse-core.*error/.test(k)) {
			//console.error("DEL ", k);
			delete require.cache[k];
		}
	});
	require('syracuse-core/streamline-loader')({ cache: true });
	require('syracuse-core').locale.setCurrent(function(err) {
		if (err) throw err;
		require('test-runner/lib/server/init-apis');
		cb();
	}, 'en-US');
}

function run(paths) {
	function runOne() {
		var path = paths.shift();
		if (!path) return;
		describe(path, function() {
			this.timeout(10000);
			clearRequireCache(function(err) {
				require(path);
				after(runOne);				
			});
		});
	}
	runOne();
}

function runAll(dir, level) {
	var paths = [];
	fs.readdirSync(dir).forEach(function(name) {
		var f = fsp.join(dir, name);
		var stat = fs.lstatSync(f);
		if (stat.isDirectory()) {
			if (name === 'test') runAll(f, 1);
			else if (level === 1 && /^(common|server)$/.test(name)) runAll(f, 2);
			else runAll(f, 0);
		} else if (/\._?js$/.test(name) && level === 2) {
			paths.push(f);
		}
	});
	run(paths);
}

runAll(process.cwd(), 0);
