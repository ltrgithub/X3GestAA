"use strict";
require('npm-shadow')();
require('syracuse-core/streamline-loader')({ cache: true });

var fs = require('fs');
var fsp = require('path');
var chai = require('chai');

var istanbul = require('istanbul');
var instrumenter = new istanbul.Instrumenter();
istanbul.hook.hookRequire(function(file) {
	return /node_modules.syracuse-orm.lib/.test(file);
}, function(code, filename) {
	console.error("INSTRUMENTING", filename);
	code = require('streamline').transform(code, {
		filename: filename,
		runtime: 'fibers',
		babel: {
			compact: false,
		}
	}).code;
	fs.writeFileSync(filename.replace(/\._?js/, '-tmp.js'), code, 'utf8');
	code = instrumenter.instrumentSync(code, filename.replace(/\._?js$/, '-tmp.js'));
	return code;
}, {
	extensions: ['.js', '._js'],
});
var collector = new istanbul.Collector();

global.QUnit = {
	module: function(name) {}
};

global.equals = chai.assert.equal;
global.deepEqual = chai.assert.deepEqual;
global.strictEqual = chai.assert.strictEqual;
global.ok = chai.assert.ok;

global.test = function(name, count, fn) {
	if (typeof count === 'function') fn = count;
	it(name, function() {
		fn();
	});
}

global.asyncTest = function(name, count, fn) {
	if (typeof count === 'function') fn = count;
	it(name, function(done) {
		global.start = function() {
			global.start = null;
			var d = done;
			done = null;
			d();
		}
		fn(function(err) {
			if (err) throw err;
		});
	});
}

function clearRequireCache(cb) {
	Object.keys(require.cache).forEach(function(k) {
		if (/(syracuse|test)-/.test(k) && 
			!/\.node$/.test(k)) {
			delete require.cache[k];
		}
	});
	require('streamline-runtime').globals.context = {};
	require('syracuse-core').locale.setCurrent(function(err) {
		if (err) throw err;
		require('test-runner/lib/server/init-apis');
		cb();
	}, 'en-US');
}

function run(paths, cb) {
	function runOne() {
		var path = paths.shift();
		console.error("RUNONE", path)
		if (!path) return cb();
		describe(path, function() {
			this.timeout(120000);
			clearRequireCache(function(err) {
				require(path);
				collector.add(global.__coverage__);
				after(runOne);				
			});
		});
	}
	runOne();
}

function getPaths(dir) {
	var paths = [];
	function doDir(dir, level) {
		fs.readdirSync(dir).forEach(function(name) {
			var f = fsp.join(dir, name);
			var stat = fs.lstatSync(f);
			if (stat.isDirectory()) {
				if (name === 'test') doDir(f, 1);
				else if (level === 1 && /^(common|server)$/.test(name)) doDir(f, 2);
				else doDir(f, 0);
			} else if (/\._?js$/.test(name) && level === 2) {
				paths.push(f);
			}
		});
	}
	doDir(dir, 0);
	return paths; //.slice(0, 1);
}

run(getPaths(process.cwd(), 0), function() {
	console.error("REPORT");
	var reporter = new istanbul.Reporter();
	reporter.add('text');
	reporter.add('html');
	//reporter.addAll([ 'lcov', 'clover' ]);
    reporter.write(collector, true, function () {
        console.log('All reports generated');
    });
});
