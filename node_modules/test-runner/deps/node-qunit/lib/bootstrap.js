var qunit = require("./qunit"),
	path = require("path"),
	options = JSON.parse(process.argv[2]) || {};
//console.error("OPTIONS: " + JSON.stringify(options));
//force streamline lines option for stack-trace unit test
var config =  require('../../../../../nodelocal').config;
config.streamline.fast = false;
config.streamline.lines = "preserve";
require('coffee-script/lib/coffee-script/extensions');
if (options.etna) require('etna-engine/lib/register'); // must be before streamline!
require('streamline').register(config.streamline);
var globals = require('streamline/lib/globals');
if (options.tenantId != null) globals.context.tenantId = options.tenantId;
require('syracuse-core/lib/localeWrapper');
require('./qunitWrapper');

// hacks to pass nodelocal config to tests in public packages (ez-mongodb for example)
config.collaboration = config.collaboration || {};
process.env.MONGO_HOST = config.collaboration.hostname || "localhost";
process.env.MONGO_PORT = config.collaboration.port || 27017;
process.env.HTTP_PORT = (config.unit_test && config.unit_test.serverPort) || 3004;

// add paths to require
if (options.paths) {
	require.paths.push.apply(require.paths, options.paths);
}

function handleError(ex) {
	console.log(JSON.stringify({
		module: "bootstrap",
		name: options.code,
		message: ex.message,
		errorStack: ex.stack
	}));

	if(process.stdout.write("")) {
		process.exit(0);
	} else {
		process.stdout.on('drain',function(){
			process.exit(0);
		});
		process.stdout.write("");
	};
}

try {
	// require code
	var mod = require(options.code.replace(/\.js$/, ""));
	qunit.extend(global, mod);

	// require tests
	options.tests.forEach(function(test) {
		require(test.replace(/\.js$/, ""));
	});
	if (options.coverage) {
		QUnit.done = function() {
			console.log(
			JSON.stringify({
				cov: _$jscoverage
			}));
		};
	}
	if (typeof mod.MAIN === "function") {
		try {
			require("etna-supervisor/lib/supervisor").create(function(err, superv) {
				if (err) return handleError(err);
				try {
					require("etna-engine/lib/runtime/variables").initStack(superv);
					globals.context.x3frame.loc.file = options.code;
					mod.MAIN(function(err) {
						if (err) return handleError(err);
						try {
							QUnit.begin();
						} catch (ex) {
							handleError(ex);
						}
					});
				} catch (ex) {
					handleError(ex);
				}
			}, (config.unit_test || {}).etna);
		} catch (ex) {
			handleError(ex);
		}
	} else {
		QUnit.begin();
	}
} catch (ex) {
	handleError(ex);
}
