"use strict";
//
/* global QUnit: false, ok: false, asyncTest: false, test: false, equal: false, strictEqual: false, same: false, start: false, stop: false */
var fs = require('streamline-fs');
var fsp = require("path");
var sys = require("util");
var helpers = require('syracuse-core/lib/helpers');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var streams = require('streamline/lib/streams/streams');
var locale = require("syracuse-core/lib/locale");
var uuid = require("syracuse-core/lib/uuid");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var x3pool = require("syracuse-x3/lib/pool");
var textTranslation = require("syracuse-translation/lib/translation");
var messageStore = require("syracuse-translation/lib/messageStore");
// var transHelper = require("syracuse-translation/lib/helper");
//
var transConfig = config.translation || {};
var cfg = transConfig.test || {};

var tracer = console.log;
var rootpath = fsp.dirname(process.cwd());
var baseUrl = "http://localhost:8124";
var acceptLanguage = "fr,fr-fr";

var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});

var sess;
var sessionInfo = {
	locale: "en-US"
};

function cdoc(ep, chp1, chp2, lan) {
	return "/sdata/x3/erp/" + ep + "/CDOC('C_ZZTRANS~%C2%A8~CONTENTS~%C2%A8~" + chp1 + "~%C2%A8~" + (chp2 || chp1 || "") + "~%C2%A8~" + (lan || "") + "')";
}

asyncTest("init", function(_) {
	sess = session(_);
	start();
});

// asyncTest("Translation ...", function(_) {
// 	var ep = adminHelper.getEndpoint(_, {
// 		dataset: cfg.endPointRead || "SUPERV"
// 	});

// 	var reply = x3pool.jsonSend(_, sessionInfo, ep, {
// 		head: {
// 			"accept": "application/json;vnd.sage=syracuse",
// 			"content-type": "application/json; charset=UTF-8",
// 			"method": "POST",
// 			"url": actParams.$workingCopyUrl + '&trackingId=' + helpers.uuid.generate()
// 		},
// 		body: {}
// 	});

// });

/*asyncTest("Translation read", function(_) {
	sess = session(_, cfg.login || "guest", cfg.password || "guest");
	var ep = cfg.endPointRead || "SUPERV";
	var contents = sess.get(_, cdoc(ep, 10031, 10031, "FRA"));
	var match = /FRA\t10031\t1/.exec(contents);
	ok(match, "start with " + match);

	contents = sess.get(_, cdoc(ep, 10031));
	match = /[A-Z]{3}\t10031\t1/.exec(contents);
	ok(match, "start with " + match);

	contents = sess.get(_, cdoc(ep, 10031, 10032));
	match = /[A-Z]{3}\t10031\t1/.exec(contents);
	ok(match, "start with " + match);

	start();
});
*/
function disabled0() {}
/*
asyncTest("Translation update", function(_) {
	var id = uuid.generate();
	var chp = cfg.updateChapter || 10046;
	var ep = cfg.endPointRead || "SUPERV",
		contractUrl = "/sdata/x3/erp/" + ep;
	console.log("=== create workingCopie ===");
	var body = sess.post(_, contractUrl + "/ZZTRANS('" + chp + "~~')/$workingCopies?representation=ZZTRANS.$edit&trackingId=" + id, null, 200);
	strictEqual(body.$trackingId, id, "trackingId " + id);

	console.log("=== update workingCopie ===");
	var data = "FRA\t" + chp + "\t1\tLe certificat n'a pas le format PEM\n";
	data += 'BRI\t' + chp + '\t1\tCertificate does not have PEM format\n';
	data += 'CHI\t' + chp + '\t1\t证书没有PEM格式\n';
	body = sess.put(_, contractUrl + "/CDOC('C_ZZTRANS~%C2%A8~CONTENTS~%C2%A8~" + id + "')", data, 200, {
		debug: false
	});
	console.log("Result\n" + JSON.stringify(body, null, "\t") + "\n");

	console.log("=== save workingCopie ===");
	body = sess.put(_, contractUrl + "/$workingCopies('" + id + "')?representation=ZZTRANS.$edit", {
		"CHP1": chp,
		"$actions": {
			"$save": {
				"$isRequested": true
			}
		}
	});
	console.log("Result\n" + JSON.stringify(body, null, "\t") + "\n");
	console.log("=== get contents ===");
	body = sess.get(_, cdoc(ep, chp), 200);
	var regex = new RegExp("BRI\\t" + chp + "\\t1");
	var match = regex.exec(body);
	ok(match, " start with " + match);

	console.log("=== delete contents ===");
	body = sess.del(_, contractUrl + "/ZZTRANS('" + chp + "~~')?representation=ZZTRANS.$details", 200);
	console.log("Result\n" + JSON.stringify(body, null, "\t") + "\n");

	console.log("=== get contents ===");
	body = sess.get(_, cdoc(ep, chp), 204);
	start();
});
*/
// asyncTest("Translation delete", function(_) {
// 	var id = uuid.generate();
// 	var chp = cfg.updateChapter || 10046;
// 	var ep = cfg.endPointRead || "SUPERV";
// 	var body = sess.delete(_, cdoc(ep, chp));
// 	body = sess.get(_, cdoc(ep, chp), 204);
// 	ok(body === "", "no content");

// 	start();
// });

// zaxdtcor.write_mess("FRA" + chr$(9) + "10043" + chr$(9) + "1" + chr$(9) + "message FRA 1" + chr$(10) + "ENG" + chr$(9) + "10043" + chr$(9) + "1" + chr$(9) + "message ENG 1" + chr$(10))
// zaxdtcor.write_mess("FRA" + chr$(9) + "10043" + chr$(9) + "1" + chr$(9) + "Le certificat n'a pas le format PEM" + chr$(10))
// FRA	10031	1	"Le certificat n'a pas le format PEM"
function disabled() {
	asyncTest("localizationKeys basic", function(_) {
		var json = {
			"$prototypes": {
				"localePreference": {
					"$key": "code"
				},
				"storageVolume": {
					"$key": "code",
					"$localized": ["description"]
				},
				"application": {
					"$key": ["application", "contract"],
					"$localized": ["description"]
				},
				"role": {
					"$key": "code",
					"$localized": ["description"],
					"securityProfile": {
						"$key": "code"
					}
				},
				"setting": {},
				"endPoint": {
					"$key": "description.fr-fr",
					"$localized": ["description"],
					"applicationRef": {
						"$key": ["application", "contract"]
					}
				},
				"notificationEvent": {
					"$key": "code",
					"$localized": ["description", "titleTemplate", "textTemplate"]
				},
				"group": {
					"$key": "description.en-us",
					"$localized": ["description"],
					"role": {
						"$key": "code"
					}
				},
				"user": {
					"$key": "lastName",
					"groups": {
						"$key": "description.en-us",
						"$localized": ["description"]
					}
				},
				"securityProfile": {
					"$key": "code",
					"$localized": ["description"],
					"profileItems": {
						"$key": "code",
						"$localized": ["description"]
					}
				},
				"securityProfileItem": {
					"$key": "code",
					"$localized": ["description"]
				}
			},
			"$items": [{
				"$type": "securityProfile",
				"code": "ADMIN",
				"description": "description_902f36d7-96d7-4211-8e49-9f2f7aa1cb29",
				"authoringLevel": "admin",
				"profileItems": [{
					"code": "myProfile",
					"description": "description_29cc9d96-4cbb-4baa-a126-30a890d7aac6",
					"canCreate": true,
					"canRead": true,
					"canWrite": true,
					"canDelete": true,
					"canExecute": true
				}, {
					"code": "users",
					"description": "description_f575e4cd-3afa-4bc7-8e81-285d321b6c0c",
					"canCreate": true,
					"canRead": true,
					"canWrite": true,
					"canDelete": true,
					"canExecute": true
				}, {
					"code": "technicalSettings",
					"description": "description_8d0bbe70-5104-4b8b-bf42-0e1ca26d2b69",
					"canCreate": true,
					"canRead": true,
					"canWrite": true,
					"canDelete": true,
					"canExecute": true
				}, {
					"code": "authoring",
					"description": "description_5bc9b226-9224-434c-a241-80b70d8988bf",
					"canCreate": true,
					"canRead": true,
					"canWrite": true,
					"canDelete": true,
					"canExecute": true
				}, {
					"code": "collaborationArea",
					"description": "description_42e3da25-7961-452d-9195-ec4c39b0a130",
					"canCreate": true,
					"canRead": true,
					"canWrite": true,
					"canDelete": true,
					"canExecute": true
				}, {
					"code": "maintenanceAndStatus",
					"description": "description_91993d8a-1a61-4245-8b44-4e7c9612e224",
					"canCreate": true,
					"canRead": true,
					"canWrite": true,
					"canDelete": true,
					"canExecute": true
				}, {
					"code": "importData",
					"description": "description_5cc4833f-9731-4aef-9c61-4d752bcfad09",
					"canCreate": true,
					"canRead": true,
					"canWrite": true,
					"canDelete": true,
					"canExecute": true
				}, {
					"code": "exportData",
					"description": "description_3cda9ad1-fba3-42c9-b431-70c9d7d94a17",
					"canCreate": true,
					"canRead": true,
					"canWrite": true,
					"canDelete": true,
					"canExecute": true
				}]
			}, {
				"$type": "storageVolume",
				"code": "SI_REPORTS",
				"description": "description_80f24f88-88f3-485f-b65c-4f0ba4c34cfd",
				"storageType": "db_file"
			}, {
				"$type": "storageVolume",
				"code": "SI_TEMPLATES",
				"description": "description_22788243-a3df-4e87-8d6d-2c2fd3963ea4",
				"storageType": "db_file"
			}, {
				"$type": "storageVolume",
				"code": "STD",
				"description": "description_cd87a599-ed76-47f0-b1df-98b66cf2bb84",
				"storageType": "db_file"
			}, {
				"$type": "storageVolume",
				"code": "WORD_TEMPLATE_MAILMERGE",
				"description": "description_e7389c3d-c112-49f6-b5e0-909612726384",
				"storageType": "db_file"
			}, {
				"$type": "storageVolume",
				"code": "WORD_TEMPLATE_REPORT",
				"description": "description_7f4c8f18-f4d4-413d-9ec1-40d70ae8c947",
				"storageType": "db_file"
			}, {
				"$type": "storageVolume",
				"code": "PRINTS",
				"storageType": "db_file",
				"description": {
					"default": "Temporary volume for prints",
					"fr-FR": "Volume temporaire pour les impressions",
					"en-US": "Temporary volume for "
				}
			}]
		},
			proto = json.$prototypes;

		var keys = textTranslation.localizationKeys(json);
		ok(keys["description_902f36d7-96d7-4211-8e49-9f2f7aa1cb29"], "ADMIN securityProfile.description");
		ok(keys["description_29cc9d96-4cbb-4baa-a126-30a890d7aac6"], "ADMIN securityProfile.profileItems.description");
		ok(keys["description_7f4c8f18-f4d4-413d-9ec1-40d70ae8c947"], "WORD_TEMPLATE_REPORT storageVolume.description");

		tracer && tracer("keys=" + JSON.stringify(keys));
		// ok(true, "*** disabled ***")

		start();
	});
}

// asyncTest("localizationKeys dashboard user", function(_) {
// 	var content = fs.readFile(fsp.join(__dirname, "../../../../import/x3-dashboards-user.json"), "utf8", _),
// 		json = JSON.parse(content);
// 	var keys = textTranslation.localizationKeys(json);
// 	ok(!keys["title_7645c9d3-e205-4b1b-b7b0-b4691299885c"], "'Test Bruno' unused title");
// 	ok(keys["title_d01a177f-89ea-41c9-a0e5-0829ccbc0a92"], "USR_X3REFV7_ADMIN_MFASM dashboardDef.title");
// 	ok(keys["description_333f2e1b-31d8-4711-83eb-f17ef883e82a"], "STD_GESFAS menuItem.description");

// 	tracer && tracer("dashboard user keys=" + JSON.stringify(keys));

// 	start();
// });

asyncTest("Traverse source resources", function(_) {
	var rootDir = fsp.resolve(__dirname, "../../../..");
	// transHelper.walk(_, rootDir, {
	// 	proceed: false,
	// 	visitDir: function(file, path, rootDir) {
	// 		this.proceed = file == "resources";
	// 		return file && (file.charAt(0) != "." || file != "test");
	// 	},
	// 	leaveDir: function(file, path, rootDir) {
	// 		this.proceed = fsp.basename(fsp.dirname(path)) == "resources";
	// 	},
	// 	visitFile: function(file, path, rootDir) {
	// 		if (this.proceed)
	// 			console.log(file + ", " + path);
	// 	}
	// })

	ok(true, "*** nothing ***");
	start();
});

// asyncTest("store", function(_) {
// 	var store = textTranslation.store();
// 	start();
// });

function session(_, login, pass) {

	var cookie, maxlen = 400;
	login = login || "admin";
	pass = pass || "admin";

	function getCookie(_, login, pass) {
		var response = new streams.httpRequest({
			url: baseUrl + "/syracuse-main/html/main.html",
			user: login,
			password: pass
		}).end().response(_);
		response.readAll(_);
		strictEqual(response.statusCode, 200, "user authenticated");
		return response.headers["set-cookie"];
	}

	function post(_, url, data, statusCode) {
		console.log("\nPOST " + url + "\n");
		var ctype = "text/plain;charset=UTF-8";
		if (typeof(data) === "object") {
			ctype = "application/json;vnd.sage=syracuse; charset=utf-8";
			data = JSON.stringify(data);
		}
		var response = streams.httpRequest({
			method: "post",
			url: url.indexOf("http") === 0 ? url : baseUrl + url,
			headers: {
				"content-type": ctype,
				"accept": "application/json;vnd.sage=syracuse; charset=utf-8",
				cookie: cookie
			}
		}).end(data).response(_);

		return readResp(_, response, statusCode);
	}

	function put(_, url, data, statusCode, options) {
		options = options || {};
		console.log("\nPUT " + url + "\n");
		console.log("  data: " + JSON.stringify(data) + "\n");
		var ctype = "text/plain;charset=utf-8";
		if (typeof(data) === "object") {
			ctype = "application/json;vnd.sage=syracuse; charset=utf-8";
			data = JSON.stringify(data);
		}
		var headers = {
			"content-type": ctype,
			"accept": "application/json;vnd.sage=syracuse; charset=utf-8",
			"x-file-name": "foo.txt",
			cookie: cookie
		};

		if (options.debug) {
			headers["pragma"] = "debug-immediate";
		}

		var response = streams.httpRequest({
			method: "put",
			url: url.indexOf("http") === 0 ? url : baseUrl + url,
			headers: headers
		}).end(data).response(_);

		return readResp(_, response, statusCode);
	}

	function get(_, url, statusCode) {
		console.log("\nGET " + url + "\n");
		var response = streams.httpRequest({
			method: "get",
			url: url.indexOf("http") === 0 ? url : baseUrl + url,

			headers: {
				cookie: cookie,
				"Accept-Language": acceptLanguage,
				accept: "application/json;vnd.sage=syracuse; charset=utf-8"
			}
		}).end().response(_);
		return readResp(_, response, statusCode);
	}

	function del(_, url, statusCode) {
		console.log("\nDELETE " + url + "\n");
		var response = streams.httpRequest({
			method: "delete",
			url: url.indexOf("http") === 0 ? url : baseUrl + url,

			headers: {
				cookie: cookie,
				"Accept-Language": acceptLanguage,
				accept: "application/json;vnd.sage=syracuse; charset=utf-8"
			}
		}).end().response(_);
		return readResp(_, response, statusCode);
	}

	function readResp(_, response, statusCode) {
		var resp = response.readAll(_);
		ok(statusCode && (response.statusCode === statusCode) || !statusCode && (response.statusCode >= 200) && (response.statusCode < 300), "status " + response.statusCode);
		console.log(">>>\n");
		if (resp && resp.length > maxlen)
			console.log(resp.substr(0, 3 * maxlen / 4) + "\n...\n" + resp.substr(-maxlen / 4));
		else
			console.log(resp);
		if (response.headers["content-type"] === "text/plain")
			return resp;
		else
			return JSON.parse(resp);
	}

	function getCdoc(_, ep, chp1, chp2, lan) {
		return get(_, "/sdata/x3/erp/" + ep + "/CDOC('C_ZZTRANS~%C2%A8~CONTENTS~%C2%A8~" + chp1 + "~%C2%A8~" + (chp2 || chp1 || "") + "~%C2%A8~" + (lan || "") + "')");
	}

	cookie = getCookie(_, login, pass);

	return {
		get: get,
		post: post,
		put: put,
		del: del,
		getCdoc: getCdoc
	};
}