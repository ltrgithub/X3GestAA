"use strict";
var fs = require('streamline-fs');
var fsp = require("path");
var sys = require("util");
var helpers = require('syracuse-core').helpers;
var uuid = helpers.uuid;
var globals = require('streamline-runtime').globals;

var types = require('syracuse-core').types;
var config = require('config'); // must be first
// syracuse                                                             // require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require('mongodb');
var ez = require('ez-streams');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var jsonExport = require("syracuse-import/lib/jsonExport");
var jsonImport = require("syracuse-import/lib/jsonImport");
var locale = require('streamline-locale');
var textTranslation = require("syracuse-translation/lib/translation");
//
var tracer; // = console.log;
var rootpath = fsp.dirname(process.cwd());
//
// force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;
helpers.pageFileStorage = false;

var testAdmin = require('syracuse-core').apis.get('test-admin');
var endPoint = testAdmin.modifyCollaborationEndpoint("mongodb_admin_test");

var port = (config.unit_test && config.unit_test.serverPort) || 3004;
var baseUrl = "http://localhost:" + port;
var contractUrl = "/sdata/syracuse/collaboration/mongodb_admin_test/";
var acceptLanguage = "fr,fr-fr";

var profileId;

var cookie = "";

function trace(str) {
	var f = "C:\\trace\\trace_client.log";
	var strn = str + "\n";
	var options = {
		flag: 'a+'
	};
	fs.appendFileSync(f, new Buffer(strn, 'utf8'), options);
}

function trace_update(str) {
	var f = "C:\\trace\\trace_update.log";
	var strn = str + "\n";
	var options = {
		flag: 'a+'
	};
	fs.appendFileSync(f, new Buffer(strn, 'utf8'), options);
}

function onlyInfo(diags) {
	return diags.every(function(diag) {
		return diag.$severity === "info";
	});
}

function _getModel() {
	return dataModel.make(
		registry.applications.syracuse.contracts.collaboration,
		"mongodb_admin_test");
}

// crnit : make unit tests fail on purpose. Will fix that
/*function getCookie(_, login, pass) {
	var response = new ez.devices.http.client({
		url: baseUrl + "/syracuse-main/html/main.html",
		user: login || "guest",
		password: pass || "guest"
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	return response.headers["set-cookie"];
}
*/

function post(_, cookie, url, data, statusCode) {

	var response = ez.devices.http.client({
		method: "post",
		url: url.indexOf("http") === 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);

	var responsetext = response.readAll(_);
	//console.log(sys.inspect(response));
	strictEqual(response.statusCode, statusCode || 201, "status verified: ");

	return JSON.parse(responsetext);

}

function put(_, cookie, url, data, statusCode) {

	var response = ez.devices.http.client({
		method: "put",
		url: url.indexOf("http") === 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);

	strictEqual(response.statusCode, statusCode || 200, "status verified");
	var resp = response.readAll(_);

	return JSON.parse(resp);
}

function get(_, cookie, url, statusCode, facet) {
	var type = facet || "generic.$details";
	var response = ez.devices.http.client({
		method: "get",
		url: url.indexOf("http") === 0 ? url : baseUrl + contractUrl + url,

		headers: {
			cookie: cookie,
			"Accept-Language": acceptLanguage,
			accept: "application/json;vnd.sage=syracuse"
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified ");
	var resp = response.readAll(_);

	return JSON.parse(resp);
}

QUnit.module(module.id);

test('TRANSLATION UNIT TESTS DISABLED FOR NOW', 1, function() {
	ok(true, "work in progress");
});

if (false) {
	asyncTest("init database", 1, function(_) {

		var server = new mongodb.Server(
			endPoint.datasets.mongodb_admin_test.hostname,
			endPoint.datasets.mongodb_admin_test.port, {});
		var db = testAdmin.newMongoDb("mongodb_admin_test", server, {});
		db = db.open(_);
		db.dropDatabase(_);
		//
		ok(true, "mongodb initialized");

		start();
	});

	//start syracuse server
	asyncTest("initialize syracuse test server", 1, function(_) {
		require('syracuse-main/lib/syracuse').startServers(_, port);
		ok(true, "server initialized");
		start();
	});

	var x3sId;
	var applicationId;
	var adminEp;

	asyncTest("create administration endpoint: ", 5, function(_) {

		cookie = getCookie(_);
		console.log("create administration endpoint");
		var appli = adminHelper.getApplication(_, "syracuse", "collaboration");
		ok(appli != null, "Application fetch ok");
		applicationId = appli.$uuid;
		console.log("applicationId " + appli.$uuid);

		var body = post(_, cookie, "endPoints/$template/$workingCopies?trackingId=" + uuid.generate(), {});
		var data = {
			description: "Administration",
			dataset: "mongodb_admin_test",
			enableSearch: false,
			protocol: "syracuse",
			databaseDriver: "mongodb",
			databaseHost: "localhost",
			databasePort: config.collaboration.port || 27017
		};

		data.$key = body.$uuid;
		data.$etag = body.$etag;
		data.applicationRef = {
			$uuid: applicationId
		};

		data.$actions = {
			$save: {
				$isRequested: true
			}
		};
		body = put(_, cookie, body.$url, data);

		adminEp = get(_, cookie, "endPoints('" + body.$uuid + "')");
		start();
	});

	function deleteFolderRecursive(_, path) {
		var files = [];
		if (fs.existsSync(path)) {
			files = fs.readdir(path, _);
			console.log("files : " + sys.inspect(files));
			files.forEach_(_, function(_, file, idx) {
				var curPath = fsp.join(path, file);
				console.log("curPath : " + sys.inspect(curPath));
				if (fs.stat(curPath, _).isDirectory()) { // recursion
					deleteFolderRecursive(_, curPath);
				} else { // delete file  
					console.log("delete file  : " + sys.inspect(curPath));
					fs.unlinkSync(curPath);
				}
			});
			console.log("remove empty folder: " + path);
			files = fs.readdir(path, _);
			console.log("files : " + sys.inspect(files));
			//fs.rmdir(path, _);
		}
	}

	asyncTest("index construction", 6, function(_) {

		cookie = getCookie(_);

		var testdir = "syracuse-translation/test/server";
		var dpath = fsp.join(__dirname, "resources");
		if (!fs.existsSync(dpath)) fs.mkdir(dpath, "7777", _);
		var inputJson = {};
		inputJson.key1 = "First key";
		inputJson.key2 = "Second key";
		inputJson.key3 = "Third key";
		var fpath = fsp.join(dpath, "/unitTest-en.json");
		var unitTest = "unitTest";
		fs.writeFile(fpath, JSON.stringify(inputJson), "utf8", _);

		var ep = adminHelper.getCollaborationEndpoint(_);
		var body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit", {
			endpoint: {
				$uuid: ep.$uuid,
				$key: ep.$key,
				description: ep.description
			},
			$actions: {
				fromSyracuseToX3: {
					$isRequested: true,
					$parameters: {
						dir: testdir,
						indexdir: testdir
					}
				}
			}
		});

		var indexpath = fsp.join(__dirname, "../../../", testdir, "index.json");

		var fd = fs.open(indexpath, "r", null, _);
		var indextmp = fs.readFile(indexpath, "utf8", _);
		var index = JSON.parse(indextmp);
		strictEqual(index.count, 3, "records counter");
		var abspath = fsp.join(__dirname, "resources", unitTest + "-en.json");
		var relpath = fsp.relative(rootpath, abspath).replace(/\\/g, '\/');

		var obj = index[relpath];

		strictEqual(obj.key1.text, inputJson.key1, "key1");
		var key2 = fsp.join(relpath, "key2").replace(/\\/g, '\/');
		strictEqual(obj.key2.text, inputJson.key2, "key2");
		var key3 = fsp.join(relpath, "key3").replace(/\\/g, '\/');
		strictEqual(obj.key3.text, inputJson.key3, "key3");

		deleteFolderRecursive(_, dpath);

		fs.close(fd, _);
		//fs.unlink(indexpath,_) ;
		start();
	});

	function testUpdtSyrFunc(_) {
		//tracer = trace;
		cookie = getCookie(_);

		var testdir = "syracuse-translation/test/server";
		var unitTest = "unitTest";
		var dpath = fsp.join(__dirname, "resources");
		if (!fs.existsSync(dpath)) fs.mkdir(dpath, "0777", _);
		var inputJson = {};
		inputJson.key4 = "Forth key";
		inputJson.key5 = "Fifth key";
		inputJson.key6 = "Sixth key";
		inputJson.key7 = "Un message beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup trop trop trop trop trop trop trop trop long";
		inputJson.key9 = "ninth key";
		inputJson.key10 = "Un autre message beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup trop trop trop trop trop trop trop trop long";

		var fpath = fsp.join(dpath, "/unitTest-en.json");

		fs.writeFile(fpath, JSON.stringify(inputJson, null, 2), "utf8", _);

		var appli = adminHelper.getCollaborationApplication(_);
		var ep = adminHelper.getCollaborationEndpoint(_);

		var indexpath = fsp.join(__dirname, "../../../", testdir, "index.json");
		var fd = fs.open(indexpath, "r", null, _);
		var indextmp = fs.readFile(indexpath, "utf8", _);
		var index = JSON.parse(indextmp);

		tracer && tracer("1st extraction");
		var body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit", //
			{
				endpoint: {
					$uuid: ep.$uuid,
					$key: ep.$key,
					description: ep.description
				},
				$actions: {
					fromSyracuseToX3: {
						$isRequested: true,
						$parameters: {
							dir: testdir,
							indexdir: testdir,
							maxNbRecords: 10
						}
					}
				}
			});

		var abspath = fsp.join(__dirname, "resources", unitTest + "-en.json");
		var relpath = fsp.relative(rootpath, abspath).replace(/\\/g, '\/');
		var obj = index[relpath];

		var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
		var entity = db.getEntity(_, "APLSTD", "$query");

		var rec = db.fetchInstance(_, entity, {
			sdataWhere: "LANCHP eq 10031 and LAN eq 'ENG' and LANNUM eq 4"
		});
		ok(rec != null, "record created");
		var msg = rec.LANMES(_);
		strictEqual(msg, inputJson["key4"], "before update");

		rec = db.fetchInstance(_, entity, {
			sdataWhere: "LANCHP eq 10031 and LAN eq 'ENG' and LANNUM eq 7"
		});
		ok(rec != null, "check existance : 1st part of splitted long message");
		strictEqual(rec.LANMES(_), "Un message beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup trop trop trop &>8", "check content : 1st part of splitted long message ");

		rec = db.fetchInstance(_, entity, {
			sdataWhere: "LANCHP eq 10031 and LAN eq 'ENG' and LANNUM eq 8"
		});
		ok(rec != null, "check existance : 2nd part of splitted long message");
		strictEqual(rec.LANMES(_), "trop trop trop trop trop long", "check content : 2nd part of splitted long message ");

		rec = db.fetchInstance(_, entity, {
			sdataWhere: "LANCHP eq 10031 and LAN eq 'ENG' and LANNUM eq 9"
		});
		ok(rec != null, "check existance with the right id: message following a splitted long message");
		strictEqual(rec.LANMES(_), "ninth key", "check content of  message following a splitted long message ");

		/*var res=db.fetchInstances(_, entity);
    res.forEach_(_,function(_,r){
        tracer && tracer ("inst: "+JSON.stringify(r.serializeInstance(_),null,2)) ;
    });*/

		rec = db.fetchInstance(_, entity, {
			sdataWhere: "LANCHP eq 10031 and LAN eq 'ENG' and LANNUM eq 10"
		});
		ok(rec != null, "check exists in the current chapter: long message, 1st part");
		strictEqual(rec.LANMES(_), "Un autre message beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup trop trop &>10032.1", "check content : 2nd part of the long message ");

		rec = db.fetchInstance(_, entity, {
			sdataWhere: "LANCHP eq 10032 and LAN eq 'ENG' and LANNUM eq 1"
		});

		ok(rec != null, "check exists in teh next chapter: long message, 2nd part");
		strictEqual(rec.LANMES(_), "trop trop trop trop trop trop long", "check content : 2nd part of the long message ");

		fpath = fsp.join(__dirname, "../server/resources/unitTest-en.json");
		var input = fs.readFile(fpath, "utf8", _);
		var parsed = JSON.parse(input);
		inputJson.key4 = inputJson.key4 + " changed";
		inputJson.key7 = inputJson.key7 + " changed";
		fs.writeFile(fpath, JSON.stringify(inputJson, null, 2), "utf8", _);

		tracer && tracer("2nd extraction");
		body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit", //
			{
				endpoint: {
					$uuid: ep.$uuid,
					$key: ep.$key,
					description: ep.description
				},
				$actions: {
					fromSyracuseToX3: {
						$isRequested: true,
						$parameters: {
							dir: testdir,
							indexdir: testdir
						}
					}
				}
			});

		indextmp = fs.readFile(indexpath, "utf8", _);
		index = JSON.parse(indextmp);
		obj = index[relpath];

		var rec7 = db.fetchInstance(_, entity, {
			sdataWhere: "LANCHP eq 10031 and LAN eq 'ENG' and LANNUM eq 7"
		});
		ok(rec7 != null, "record fetched, long message, 1st part ");
		var msg7 = rec7.LANMES(_);

		tracer && tracer("msg7=" + msg7);
		strictEqual(msg7, "Un message beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup trop trop trop &>8", "after update long message, same chapter");

		var rec8 = db.fetchInstance(_, entity, {
			sdataWhere: "LANCHP eq 10031 and LAN eq 'ENG' and LANNUM eq 8"
		});
		ok(rec8 != null, "record fetched, long message, 2nd part");
		var msg8 = rec8.LANMES(_);

		tracer && tracer("msg8=" + msg8);
		strictEqual(msg8, "trop trop trop trop trop long changed", "after update long message, same chapter");

		rec = db.fetchInstance(_, entity, {
			sdataWhere: "LANCHP eq 10031 and LAN eq 'ENG' and LANNUM eq " + obj.key4.id
		});
		ok(rec != null, "record created");
		var msg = rec.LANMES(_);
		tracer && tracer("msg=" + msg);
		strictEqual(msg, inputJson["key4"], "after update");

		var tmp = inputJson["key4"];
		inputJson["key4"] = inputJson["key4"] + " conlict";
		fs.writeFile(fpath, JSON.stringify(inputJson), "utf8", _);

		rec.LANMES(_, msg + " conflict1");
		rec.save(_);

		inputJson["key7"] = inputJson["key7"] + ' ' + inputJson["key7"];
		fs.writeFile(fpath, JSON.stringify(inputJson, null, 2), "utf8", _);

		tracer && tracer("3rd extraction");
		var body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit", //
			{
				endpoint: {
					$uuid: ep.$uuid,
					$key: ep.$key,
					description: ep.description
				},
				$actions: {
					fromSyracuseToX3: {
						$isRequested: true,
						$parameters: {
							dir: testdir,
							indexdir: testdir
						}
					}
				}
			});

		var diag = body.$diagnoses;

		ok(diag, "diagnoses");
		tracer && tracer("diagnoses: " + sys.inspect(diag));
		strictEqual(diag[0].$severity, "warning", "conflict warning raised");
		strictEqual(diag[0].$message, 'conflict Syracuse/node_modules/syracuse-translation/test/server/resources/unitTest-en.json:key4 : Forth key changed conflict1', "warning message");
		//restore
		inputJson["key4"] = tmp;
		fs.writeFile(fpath, JSON.stringify(inputJson), "utf8", _);

		rec.LANMES(_, tmp);
		rec.save(_);

		var res = db.fetchInstances(_, entity);
		res.forEach_(_, function(_, r) {
			tracer && tracer("*****************inst: " + JSON.stringify(r.serializeInstance(_), null, 2));
		});

		indextmp = fs.readFile(indexpath, "utf8", _);
		index = JSON.parse(indextmp);
		obj = index[relpath];

		var rec7 = db.fetchInstance(_, entity, {
			sdataWhere: "LANCHP eq 10031 and LAN eq 'ENG' and LANNUM eq 7"
		});
		ok(rec7 != null, "record fetched, long message, 1st part ");
		var msg7 = rec7.LANMES(_);

		var rec7part2 = db.fetchInstance(_, entity, {
			sdataWhere: "LANCHP eq 10031 and LAN eq 'ENG' and LANNUM eq 8"
		});

		ok(rec7part2 != null, "record fetched, long message, 2nd part ");
		var msg7part2 = rec7part2.LANMES(_);
		//DARY
		var match = /&>(([0-9]+)\.)?([0-9]+)$/.exec(msg7part2);
		ok(match != null, " 2nd part indicates  the following chunk");

		//var line = match[0];
		var nextchapter = parseInt(match[2]);
		var nextlinenumber = parseInt(match[3]);

		strictEqual(nextchapter, 10032, "next chunk indicator, chapter number ");
		strictEqual(nextlinenumber, 2, "next chunk indicator, linenumber");

		tracer && tracer("msg7part2 =" + msg7part2);
		strictEqual(msg7part2, "trop trop trop trop trop long changed Un message beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup &>10032.2", "after update long message, 2nd part");

		var rec7part3 = db.fetchInstance(_, entity, {
			sdataWhere: "LANCHP eq " + nextchapter + " and LAN eq 'ENG' and LANNUM eq " + nextlinenumber
		});
		ok(rec7part3 != null, "record fetched, long message, 2nd part ");
		var msg7part3 = rec7part3.LANMES(_);

		tracer && tracer("msg7part3 =" + msg7part3);
		strictEqual(msg7part3, "beaucoup beaucoup beaucoup trop trop trop trop trop trop trop trop long changed", "after update long message, 3rd part");

		fs.close(fd, _);
		//fs.unlink(indexpath,_) ;
		start();
	}

	function testUpdtX3Func(_) {
		//tracer = trace_update;

		cookie = getCookie(_);

		var testdir = "syracuse-translation/test/server";
		var unitTest = "unitTest";
		var dpath = fsp.join(__dirname, "resources");
		var fpath = fsp.join(dpath, unitTest + "-en.json");

		var ep = adminHelper.getCollaborationEndpoint(_);
		var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
		var model = db.model;

		var entityTablan = db.getEntity(_, "TABLAN");
		var eng = entityTablan.createInstance(_, db);
		eng.LAN(_, "ENG");
		eng.LANISO(_, "en-US");
		eng.save(_);
		//var diags=[];
		//eng.getAllDiagnoses(_,diags);
		//console.log("diags: "+sys.inspect(diags)) ;
		var fr = entityTablan.createInstance(_, db);
		fr.LAN(_, "FRA");
		fr.LANISO(_, "fr-FR");
		fr.save(_);

		var entity = db.getEntity(_, "APLSTD");
		var rec = db.fetchInstance(_, entity, {
			sdataWhere: "LANCHP eq 10031 and LAN eq 'ENG' and LANNUM eq 5"
		});
		ok(rec != null, "record to change fetched");
		var expected = rec.LANMES(_) + " updated on X3 side";
		rec.LANMES(_, expected);
		rec.save(_);

		rec = db.fetchInstance(_, entity, {
			sdataWhere: "LANCHP eq 10031 and LAN eq 'ENG' and LANNUM eq 5"
		});
		strictEqual(expected, rec.LANMES(_), " updated on X3 side");

		var expectedFr = "traduction française";
		//create the french translation

		var recFR = entity.createInstance(_, db);

		recFR.LANCHP(_, 10031);
		recFR.LANNUM(_, 5);
		recFR.LANMES(_, expectedFr);
		recFR.LAN(_, "FRA");
		recFR.save(_);

		recFR = db.fetchInstance(_, entity, {
			sdataWhere: "LANCHP eq 10031 and LAN eq 'FRA' and LANNUM eq 5"
		});
		strictEqual(expectedFr, recFR.LANMES(_), "french translation created on X3 ");

		var expectedLong = "Un message beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup trop trop trop trop trop trop trop trop long" //
			+
			" updated on X3 side";

		var rec = db.fetchInstance(_, entity, {
			sdataWhere: "LANCHP eq 10031 and LAN eq 'ENG' and LANNUM eq 7"
		});
		ok(rec != null, "record to change fetched");
		rec.LANMES(_, expectedLong);
		rec.save(_);

		var expectedLong1 = "Un autre message beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup beaucoup trop trop trop trop trop trop trop trop long" //
			+
			" updated on X3 side";

		var rec = db.fetchInstance(_, entity, {
			sdataWhere: "LANCHP eq 10031 and LAN eq 'ENG' and LANNUM eq 10"
		});
		ok(rec != null, "record to change fetched");
		rec.LANMES(_, expectedLong1);
		rec.save(_);

		var body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit", //
			{
				endpoint: {
					$uuid: ep.$uuid,
					$key: ep.$key,
					description: ep.description
				},
				$actions: {
					fromX3toSyracuse: {
						$isRequested: true,
						$parameters: {
							dir: testdir,
							indexdir: testdir
						}
					}
				}
			});

		var input = fs.readFile(fpath, "utf8", _);
		var parsed = JSON.parse(input);

		strictEqual(expected, parsed["key5"], "Syracuse resource updated: eng");
		strictEqual(expectedLong, parsed["key7"], "Syracuse resource updated: long message");
		strictEqual(expectedLong1, parsed["key10"], "Syracuse resource updated: long message, splitted on 2 chapters");

		tracer && tracer("*********expected :" + expectedLong1);
		tracer && tracer("*********got :" + parsed["key10"]);

		fpath = fsp.join(dpath, unitTest + "-fr-fr.json");
		input = fs.readFile(fpath, "utf8", _);
		parsed = JSON.parse(input);

		strictEqual(expectedFr, parsed["key5"], "Syracuse resource created: fr");

		//deleteFolderRecursive(_, dpath);
		var indexpath = fsp.join(__dirname, "../../../", testdir, "index.json");

		//fs.close(fd,_) ;
		fs.unlink(indexpath, _);

		start();
	}

	function cleanup(_) {
		var testdir = "syracuse-translation/test/server";
		var dpath = fsp.join(__dirname, "resources");
		deleteFolderRecursive(_, dpath);
		start();
	}

	function cleanupTestdir(_) {
		var testdir = "syracuse-translation/test/server";
		var dpath = fsp.join(__dirname, "resources");
		console.log("cleanupTestdir: " + dpath);
		fs.rmdir(dpath, _);
		start();
	}

	asyncTest("update of the message in syracuse", 33, testUpdtSyrFunc);
	asyncTest("update of the message in X3", 11, testUpdtX3Func);
	asyncTest("clean up", 1, cleanup);
	asyncTest("clean up testdir", 1, cleanupTestdir);
}