var module = QUnit.module;
var fs = require('fs');
var fsp = require("path");
var sys = require("util");
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;

var types = require('syracuse-core/lib/types/allTypes');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first
// syracuse                                                             // require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require("mongodb");
var streams = require('streamline/lib/streams/streams');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var jsonExport = require("syracuse-import/lib/jsonExport");
var jsonImport = require("syracuse-import/lib/jsonImport");
var locale = require("syracuse-core/lib/locale");
var textTranslation = require("syracuse-translation/lib/resourcesExtract");
//
var tracer = console.log;
// var tracer = null;
//
// force basic auth
config.session = config.session || {};
config.session.auth = "basic";
helpers.pageFileStorage = false;

var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_admin_test");

var baseUrl = "http://localhost:3004"
var contractUrl = "/sdata/syracuse/collaboration/mongodb_admin_test/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";

var profileId;

var cookie = "";

function onlyInfo(diags) {
    return diags.every(function (diag) {
        return diag.severity == "info";
    });
}

function _getModel() {
    return dataModel.make(
    registry.applications.syracuse.contracts.collaboration,
        "mongodb_admin_test");
}

function getCookie(_, login, pass) {
    var response = new streams.httpRequest({
        url: baseUrl + "/syracuse-main/html/main.html",
        user: login || "guest",
        password: pass || "guest"
    }).end().response(_);
    response.readAll(_);
    strictEqual(response.statusCode, 200, "user authenticated");
    return response.headers["set-cookie"];
}


function post(_, cookie, url, data, statusCode) {
    
    var response = streams.httpRequest({
        method: "post",
        url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
        headers: {
            "content-type": "application/json",
            cookie: cookie
        }
    }).end(JSON.stringify(data)).response(_);

    var responsetext = response.readAll(_);
    //console.log(sys.inspect(response));
    strictEqual(response.statusCode, statusCode || 201, "status verified: ");

    return JSON.parse(responsetext);

}

function put(_, cookie, url, data, statusCode) {

    //console.log("PUT DATA: " + sys.inspect(data));
    var response = streams.httpRequest({
        method: "put",
        url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
        headers: {
            "content-type": "application/json",
            cookie: cookie
        }
    }).end(JSON.stringify(data)).response(_);
    strictEqual(response.statusCode, statusCode || 200, "status verified");
    return JSON.parse(response.readAll(_));
}

function get(_, cookie, url, statusCode, facet) {
   
    var type = facet || "generic.$details";
    var response = streams.httpRequest({
        method: "get",
        url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
        // url: url.indexOf("http") == 0 ? url : baseUrl +
        // "sdata/syracuse/collaboration/syracuse/" + url,
        // url:
        // "http://localhost:3004/sdata/syracuse/collaboration/mongodb_admin_test/exportProfiles",
        headers: {
            cookie: cookie,
            "Accept-Language": acceptLanguage,
            accept: "application/json;vnd.sage=syracuse"
        }
    }).end().response(_);
    strictEqual(response.statusCode, statusCode || 200, "status verified ");
    var resp = response.readAll(_);

    // console.log("Response : "+JSON.stringify(JSON.parse(resp),null,2));
    return JSON.parse(resp);
}

function del(_, cookie, url, statusCode) {
    var response = streams.httpRequest({
        method: "delete",
        url: baseUrl + contractUrl + url,
        headers: {
            cookie: cookie
        }
    }).end().response(_);
    strictEqual(response.statusCode, statusCode || 200, "status verified");
    return JSON.parse(response.readAll(_));
}

var doStop = false;
module("textTranslation", {
    setup: function () {},
    teardown: function () {
        if (doStop) {
            setTimeout(function () {
                process.kill(process.pid);
            }, 100)
        }
    }
});


asyncTest("init database", 1, function (_) {
    console.log("UT1") ;
    var server = new mongodb.Server(
    endPoint.datasets["mongodb_admin_test"].hostname,
    endPoint.datasets["mongodb_admin_test"].port, {});
    var db = new mongodb.Db(config.collaboration.dataset, server, {});
    db = db.open(_);
    db.dropDatabase(_);
    //
    ok(true, "mongodb initialized");

    start();
});

// start syracuse server
var syracuse;
// wait server initialization
asyncTest("initialize syracuse test server", 1, function (_) {
    syracuse = require('syracuse-main/lib/syracuse');
    syracuse.initializerStatus.on("initialized", function () {
        ok(true, "server initialized");
        syracuse.server.listen(null, port);
        start();
    });
});

var x3sId;
var applicationId;
var adminEp;

asyncTest("create administration endpoint: ", 7, function (_) {
    
    console.log("UT2") ;
    cookie = getCookie(_);
    console.log("create administration endpoint");
    var appli = adminHelper.getApplication(_, "syracuse", "collaboration");
    ok(appli != null, "Application fetch ok");
    applicationId = appli.$uuid;
    console.log("applicationId " + appli.$uuid);
    var body = post(_, cookie, "x3servers/$template/$workingCopies?trackingId=" + uuid.generate(), {});
    var data = {
        description: "X3 S1",
        serverHost: "localhost",
        serverPort: 1,
        serverTimeout: 1
    };
    //console.log("create x3server  after post "+JSON.stringify(body,null,2) );

    data.$key = body.$uuid;
    data.$etag = body.$etag;

    data.$actions = {
        $save: {
            $isRequested: true
        }
    };
    body = put(_, cookie, body.$url, data);

    // create endpoints
    x3sId = body.$uuid;

    //console.log("create administration endpoint before post");
    var body = post(_, cookie, "endPoints/$template/$workingCopies?trackingId=" + uuid.generate(), {});
    //console.log("create administration endpoint after post");
    var data = {
        description: "Administration",
        dataset: "mongodb_admin_test",
        enableSearch: false,
        protocol: "syracuse",
        databaseDriver: "mongodb",
        databaseHost: "localhost",
        databasePort: 27017
    };

    data.$key = body.$uuid;
    data.$etag = body.$etag;
    data.applicationRef = {
        $uuid: applicationId
    };

    data.$actions = {
        $save: {
            $isRequested: true
        }
    };
    body = put(_, cookie, body.$url, data);

    adminEp = get(_, cookie, "endPoints('" + body.$uuid + "')");
    // console.log("ADMIN ENDPOINT: "+ JSON.stringify(adminEp,null,2)) ;
    start();
});

 function deleteFolderRecursive(_,path) {
    var files = [];
    if( fs.existsSync(path) ) {
        files = fs.readdir(path,_);
        console.log("files : "+sys.inspect(files));
        files.forEach_(_,function(_,file,index){
            var curPath = fsp.join(path ,file);
            if(fs.stat(curPath,_).isDirectory()) { // recurse
                deleteFolderRecursive(_,curPath);
            } else { // delete file    
                fs.unlinkSync(curPath);
            }
        });
        console.log("remove empty folder") ;
        fs.rmdir(path,_);
    }
    }


asyncTest("update of the message in syracuse", 6, function (_) {
    

    try {
        var testdir = "syracuse-translation/test/server";
        
        var dpath = fsp.join(__dirname, "resources");
        console.log("******************dpath :"+dpath) ;
        //var input = fs.readFile(fpath, "utf8", _);
        fs.mkdir(dpath,"0777" ,_) ;
        var inputJson={} ;
        inputJson["test0"] = "This is for test purpose";
        var fpath = fsp.join(dpath, "/unitTest-en.json");
      
        fs.writeFile(fpath, JSON.stringify(inputJson), "utf8", _);

        cookie = getCookie(_);
        //var appli=adminHelper.getApplication(_, "syracuse", "collaboration");
        var appli = adminHelper.getCollaborationApplication(_);
        var ep = adminHelper.getCollaborationEndpoint(_);
        //console.log("EP URL: " + ep.getBaseUrl(_));

        var body = post(_, cookie, "textTranslations/$template/$workingCopies?trackingId=" + uuid.generate(), {});
        //console.log("POST:" + JSON.stringify(body, null, 2));
        var data = {
            code: "test",
            description: "TEST1",
            application: {
                $uuid: appli.$uuid,
                $key: appli.$key,
                description: appli.description
            },
            endpoint: {
                $uuid: ep.$uuid,
                $key: ep.$key,
                description: ep.description
            }
        };

        data.$key = body.$uuid;
        data.$etag = body.$etag;
        data.$actions = {
            $save: {
                $isRequested: true
            }
        };
        body = put(_, cookie, body.$url, data);
        //console.log("PUT:" + JSON.stringify(body, null, 2));

        var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
        var model = db.model;
        var entity = model.getEntity("textTranslation");
        var profileInst = db.fetchInstance(_, entity, {
            jsonWhere: {
                code: "test"
            }
        });
        
        //console.log("1st extraction");
        textTranslation.extractTexts(_, profileInst, {
            baseurl: baseUrl,
            dir: testdir
        });
        cookie = getCookie(_);
       
       // var fpath = fsp.join(__dirname, "../server/resources/unitTest-en.json");
       // var input = fs.readFile(fpath, "utf8", _);
        //var parsed = JSON.parse(input);
        //console.log("PARSED: " + JSON.stringify(parsed, 2, null));
        //parsed["test0"] = parsed["test0"] + " changed";
        inputJson["test0"] = inputJson["test0"] + " changed";
        fs.writeFile(fpath, JSON.stringify(inputJson), "utf8", _);

        //console.log("2nd extraction");
        textTranslation.extractTexts(_, profileInst, {
            baseurl: baseUrl,
            dir: testdir
        });

        /*cookie = getCookie(_);
        var body = get(_, cookie, baseUrl + contractUrl + "ZZAPLSTDs?sdataWhere=(lan eq 'XXX' and lanmes eq 'test0' or lanmes eq 'test0_obsolete')");
        console.log("GET RESOURCES: "+ JSON.stringify(body,null,2)) ;
        var res = body.$resources;
        */


        var entity = db.model.getEntity(_, "ZZAPLSTD", "$query");
        var obj=db.fetchInstance(_,entity,{sdataWhere: "lanchp eq 10030 and lan eq 'XXX' and lanmes eq 'test0'"});
        var enObj=db.fetchInstance(_,entity,{sdataWhere: "lanchp eq 10030 and lan eq 'ENG' and lannum eq "+obj.lannum(_)});
        var msg=enObj.lanmes(_) ;
        var obs=db.fetchInstance(_,entity,{sdataWhere: "lanchp eq 10030 and lan eq 'ENG' and lanmes eq 'This is for test purpose'"});
        console.log("obs lannum: "+obs.lannum(_)) ;
        var keyObsolete=db.fetchInstance(_,entity,{sdataWhere: "lanchp eq 10030 and lan eq 'XXX' and lannum eq "+obs.lannum(_)});
        var updtKey=keyObsolete.lanmes(_) ;   
            

        strictEqual(msg, "This is for test purpose changed", "create new entry for test0") ;
        strictEqual(updtKey, "test0_obsolete", "update the key for the obsolete message") ;

        console.log("CALL: deleteFolderRecursive!!!!!!!") ;
        deleteFolderRecursive(_,dpath) ;

    } catch (ex) {
        console.error(ex);
    }



    //fs.rmdir(dpath ,_) ;
    start();
});






asyncTest("stop  tests", 0, function (_) {
    doStop = true;
    start();
});