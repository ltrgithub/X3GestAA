"use strict";
var module = QUnit.module;
var fs = require('fs');
var fsp = require("path");
var sys = require("util");
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;
var globals = require('streamline/lib/globals');
var types = require('syracuse-core/lib/types/allTypes');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first
// syracuse                                                             // require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require("mongodb");
var streams = require('streamline/lib/streams/streams');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var jsonExport = require("syracuse-import/lib/jsonExport");
var jsonImport = require("syracuse-import/lib/jsonImport");
var locale = require("syracuse-core/lib/locale");
var textTranslation = require("syracuse-translation/lib/translation");

var rootpath=fsp.dirname(process.cwd());
var tracer = null;
//var tracer = console.log;

// force basic auth
config.session = config.session || {};
config.session.auth = "basic";
helpers.pageFileStorage = false;

var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_admin_test");

var baseUrl = "http://localhost:3004";
var contractUrl = "/sdata/syracuse/collaboration/mongodb_admin_test/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";

var profileId;

var cookie = "";

globals.context = globals.context || {};


/*function trace_update_dotnet(str) {
    var f = "C:\\trace\\trace_update_dotnet.log";
    var strn = str + "\n";
    var options = {
        flag : 'a+'
    };
    fs.appendFileSync(f, new Buffer(strn, 'utf8'), options);
}


function trace_dotnet_extract(str) {
    
    var f =  "C:\\trace\\trace_dotnet_extract.log";
    var strn = str + "\n";
    var options = {
        flag : 'a+'
    };
    fs.appendFileSync(f, new Buffer(strn, 'utf8'), options);
}*/


function onlyInfo(diags) {
    return diags.every(function (diag) {
        return diag.severity == "info";
    });
}

function _getModel() {
    return dataModel.make(
    registry.applications.syracuse.contracts.collaboration,
        "mongodb_admin_test");
}

function getCookie(_, login, pass) {
    var response = new streams.httpRequest({
        url: baseUrl + "/syracuse-main/html/main.html",
        user: login || "guest",
        password: pass || "guest"
    }).end().response(_);
    response.readAll(_);
    strictEqual(response.statusCode, 200, "user authenticated");
    return response.headers["set-cookie"];
}


function post(_, cookie, url, data, statusCode) {
    var response = streams.httpRequest({
        method: "post",
        url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
        headers: {
            "content-type": "application/json",
            cookie: cookie
        }
    }).end(JSON.stringify(data)).response(_);

    var responsetext = response.readAll(_);
    strictEqual(response.statusCode, statusCode || 201, "status verified: ");

    return JSON.parse(responsetext);

}

function put(_, cookie, url, data, statusCode) {
    
    var response = streams.httpRequest({
        method: "put",
        url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
        headers: {
            "content-type": "application/json",
            cookie: cookie
        }
    }).end(JSON.stringify(data)).response(_);
     
    strictEqual(response.statusCode, statusCode || 200, "status verified");
    var resp=response.readAll(_) ;
  
    return JSON.parse(resp);
}

function get(_, cookie, url, statusCode, facet) {
    var type = facet || "generic.$details";
    var response = streams.httpRequest({
        method: "get",
        url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
        
        headers: {
            cookie: cookie,
            "Accept-Language": acceptLanguage,
            accept: "application/json;vnd.sage=syracuse"
        }
    }).end().response(_);
    strictEqual(response.statusCode, statusCode || 200, "status verified ");
    var resp = response.readAll(_);

   
    return JSON.parse(resp);
}

function del(_, cookie, url, statusCode) {
    var response = streams.httpRequest({
        method: "delete",
        url: baseUrl + contractUrl + url,
        headers: {
            cookie: cookie
        }
    }).end().response(_);
    strictEqual(response.statusCode, statusCode || 200, "status verified");
    return JSON.parse(response.readAll(_));
}

var doStop = false;
module("dotnetTranslation", {
    setup: function () {},
    teardown: function () {
        if (doStop) {
            setTimeout(function () {
                process.kill(process.pid);
            }, 100)
        }
    }
});


asyncTest("init database", 1, function (_) {
  
    var server = new mongodb.Server(
    endPoint.datasets["mongodb_admin_test"].hostname,
    endPoint.datasets["mongodb_admin_test"].port, {});
    //var db = new mongodb.Db(config.collaboration.dataset, server, {});
    var db = new mongodb.Db("mongodb_admin_test", server, {});
    db = db.open(_);
    db.dropDatabase(_);
    //
    ok(true, "mongodb initialized");

    start();
});

// start syracuse server
var syracuse;
// wait server initialization
asyncTest("initialize syracuse test server", 1, function (_) {
    syracuse = require('syracuse-main/lib/syracuse');
    syracuse.initializerStatus.on("initialized", function () {
        ok(true, "server initialized");
        syracuse.server.listen(null, port);
        start();
    });
});

var x3sId;
var applicationId;
var adminEp;

asyncTest("create administration endpoint: ", 5, function (_) {
   
    cookie = getCookie(_);
    
    var appli = adminHelper.getApplication(_, "syracuse", "collaboration");
    ok(appli != null, "Application fetch ok");
    applicationId = appli.$uuid;
  
    var body = post(_, cookie, "endPoints/$template/$workingCopies?trackingId=" + uuid.generate(), {});
    var data = {
        description: "Administration",
        dataset: "mongodb_admin_test",
        enableSearch: false,
        protocol: "syracuse",
        databaseDriver: "mongodb",
        databaseHost: "localhost",
        databasePort: 27017
    };

    data.$key = body.$uuid;
    data.$etag = body.$etag;
    data.applicationRef = {
        $uuid: applicationId
    };

    data.$actions = {
        $save: {
            $isRequested: true
        }
    };
    body = put(_, cookie, body.$url, data);

    adminEp = get(_, cookie, "endPoints('" + body.$uuid + "')");
   
    start();
});

 function deleteFolderRecursive(_,path) {
    var files = [];
    if( fs.existsSync(path) ) {
        files = fs.readdir(path,_);
        tracer && tracer("files : "+sys.inspect(files));
        files.forEach_(_,function(_,file,idx){
            var curPath = fsp.join(path ,file);
            if(fs.stat(curPath,_).isDirectory()) { // recurse
                deleteFolderRecursive(_,curPath);
            } else { // delete file    
                fs.unlinkSync(curPath);
            }
        });
        tracer && tracer("remove empty folder") ;
        fs.rmdir(path,_);
    }
    }


    //asyncTest("test " + profileDescr, test.nbrc, testCheck)} ,10);


asyncTest("index construction", 5, function (_) {
    tracer= trace_dotnet_extract ;
    var context={request: {}} ;
    cookie = getCookie(_);
    context.request.headers={
        host : "localhost",
          "accept" : "application/json",
          "content-type" : "application/json",
          cookie : cookie
        }

  
        var testdir = "syracuse-translation/test/server";
        var dpath = fsp.join(__dirname, "dotnet");

        if( ! fs.existsSync(dpath) ) 
            fs.mkdir(dpath,"7777" ,_) ;
        var inputXml="before"+'<data name="first key">\n'+ // 
        '<value>first ressource</value>\n'+ //
        '</data>\n' + // 
        '<data name="$second key" xml:space="preserve">\n' + //
        '<value>second ressource</value>\n'+ // 
        '</data>\n'+ //
        '<data name="&gt;&gt;$third key" xml:space="preserve">\n' + //
        '<value>dotnet internal  ressourcer</value>\n' + // 
        '</data>'+ //
        '<data name="forth key" type="System.Drawing.Size, System.Drawing">\n'+ // 
        '<value>4</value>\n'+ //
        '</data>\n' + //
        +"after" ;

        
        var fpath = fsp.join(dpath, "/unitTest.resx");
        fs.writeFile(fpath, inputXml, "utf8", _);

        var appli = adminHelper.getCollaborationApplication(_);
        var ep = adminHelper.getCollaborationEndpoint(_);
        
        var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
        var model = db.model;
      
       
        var body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit", {
        endpoint: {
             $uuid: ep.$uuid,
             $key: ep.$key,
             description: ep.description
        },
        $actions: {
            fromSyracuseToX3Dotnet: {
                $isRequested: true,
                $parameters : {
                dir: testdir,
                indexdir : testdir,
                unitTestFlg: true 
            }
            }
        }
    });
       
        var indexpath=fsp.join( __dirname, "../../../",testdir,"indexDotnet.json") ;
        tracer && tracer( "indexpath: "+ indexpath) ;
        
        var fd=fs.open(indexpath, "r",null, _);
        var indextmp=fs.readFile(indexpath, "utf8", _);
        var index=JSON.parse(indextmp) ;
        strictEqual(index.count,2, "records counter") ;
        var abspath=fsp.join(__dirname, "dotnet","unitTest.resx") ;
        var relpath=fsp.relative(rootpath,abspath).replace(/\\/g,'\/') ;
        tracer && tracer( "relpath: "+ relpath) ;
        
        var obj=index[relpath] ;

        strictEqual(obj["first key"].text,"first ressource", "first key") ;
        strictEqual(obj["$second key"].text,"second ressource" , "$second key") ;
        
        
        fs.close(fd,_) ;
       //fs.unlink(indexpath,_) ;
   
    start();
});


function testUpdtSyrFunc(_) {
    tracer= trace_dotnet_extract ;
    var context={request :{}} ;
    cookie = getCookie(_);
    context.request.headers={
            host : "localhost",
          "accept" : "application/json",
          "content-type" : "application/json",
          cookie : cookie
        }

    
         var inputXml="before"+'<data name="key3">\n'+ // 
        '<value>third resource</value>\n'+ //
        '</data>\n' + // 
        '<data name="key4" xml:space="preserve">\n' + //
        '<value>forth resource</value>\n'+ // 
        '</data>\n'+ //
        +"after" ;


        var testdir = "syracuse-translation/test/server";
        
        var dpath = fsp.join(__dirname, "dotnet");
        if (! fs.existsSync(dpath) )
            fs.mkdir(dpath,"0777" ,_) ;
        var fpath = fsp.join(dpath, "unitTestExtraction.resx");
        fs.writeFile(fpath, inputXml, "utf8", _);

         var appli = adminHelper.getCollaborationApplication(_);
        var ep = adminHelper.getCollaborationEndpoint(_);
        
        var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
        var model = db.model;

        var entity=db.getEntity(_,"APLSTD") ;
        var count=db.count(_,entity, {sdataWhere: "LANCHP eq 10033 and LAN eq 'ENG'"}) ;
       
       tracer && tracer("1st extraction");
        var body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit", {
        endpoint: {
             $uuid: ep.$uuid,
             $key: ep.$key,
             description: ep.description
        },
        $actions: {
            fromSyracuseToX3Dotnet: {
                $isRequested: true,
                $parameters : {
                dir: testdir,
                indexdir : testdir,
                unitTestFlg: true 
            }
            }
        }
    });
 
    var msg ;
    var res=db.fetchInstances(_,entity/*,{sdataWhere: "LANCHP eq 10033 and LAN eq 'ENG' and LANNUM ne 0"}*/);
   
    tracer && tracer("RES: ") ;
    res.forEach_(_,function(_,r){ 
        tracer && tracer ("rec: "+ JSON.stringify(r.serializeInstance(_),null,2)) }) ;
        var rec=db.fetchInstance(_,entity,{sdataWhere: "LANCHP eq 10033 and LAN eq 'ENG' and LANNUM eq 3"/*+(count+1).toString()*/});
        ok(rec != null, "third resource injected");
        msg=rec.LANMES(_) ;
        strictEqual(msg, "third resource" , "third resource") ;
         var rec=db.fetchInstance(_,entity,{sdataWhere: "LANCHP eq 10033 and LAN eq 'ENG' and LANNUM eq 4"/*+(count+2).toString()*/});
        ok(rec != null, "forth resource injected");
        msg=rec.LANMES(_) ;
        strictEqual(msg, "forth resource" , "forth resource") ;

        var appli = adminHelper.getCollaborationApplication(_);
        var ep = adminHelper.getCollaborationEndpoint(_);
        
        
        var body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit",//
         {
            endpoint: {
                $uuid: ep.$uuid,
                $key: ep.$key,
                description: ep.description
            },
            $actions  : {
                fromSyracuseToX3Dotnet: {
                $isRequested: true,
                $parameters : {
                                dir: testdir,
                                indexdir: testdir,
                                unitTestFlg: true } 
                                }
            }});
          
        
        var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
        var model = db.model;
        var techEntity = model.getEntity("translationTool");
        var profileInst = db.fetchInstance(_, techEntity, {
            jsonWhere: {
                code: "test"
            }
        });
       
        
        var indexpath=fsp.join(__dirname, "../../../",testdir, "indexDotnet.json") ;
        var fd=fs.open(indexpath, "r",null, _);
        var indextmp=fs.readFile(indexpath, "utf8", _);
        var index=JSON.parse(indextmp) ;
        var abspath=fsp.join(__dirname, "dotnet","unitTestExtraction.json") ;
        var relpath=fsp.relative(rootpath,abspath).replace(/\\/g,'\/') ;
        var obj=index[relpath] ;


         var inputXml="before"+'<data name="key3">\n'+ // 
        '<value>third resource changed</value>\n'+ //
        '</data>\n' + // 
        '<data name="key4" xml:space="preserve">\n' + //
        '<value>forth resource+</value>\n'+ // 
        '</data>\n'+ //
        "after" ;  


        var fd=fs.open(fpath, "w","0666", _);
        fs.writeFile(fpath, inputXml, "utf8", _);
       fs.close(fd,_);
        var rec4=db.fetchInstance(_,entity,{sdataWhere: "LANCHP eq 10033 and LAN eq 'ENG' and LANNUM eq 4"});
        ok(rec4!=null,"forth ressource retrieved") ;
        rec4.LANMES(_,"forth resource-") ;
        rec4.save(_) ;
        
        tracer && tracer("2nd extraction");
        var body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit",//
         {
            endpoint: {
                $uuid: ep.$uuid,
                $key: ep.$key,
                description: ep.description
            },
            $actions  : {
                fromSyracuseToX3Dotnet: {
                $isRequested: true,
                $parameters : {
                                dir: testdir,
                                indexdir: testdir,
                                unitTestFlg: true } 
                                }
            }});


        var rec3=db.fetchInstance(_,entity,{sdataWhere: "LANCHP eq 10033 and LAN eq 'ENG' and LANNUM eq 3"});
        
        strictEqual(rec3.LANMES(_),  "third resource changed",  "third resource changed") ;
        var diag=body.$diagnoses;
        tracer && tracer("diag[0].message: "+diag[0].message) ;
        strictEqual(diag[0].severity, "warning" , "conflict warning raised") ;
        strictEqual(diag[0].message, 'conflict Syracuse/node_modules/syracuse-translation/test/server/dotnet/unitTestExtraction.resx:key4 : forth resource-',"warning message") ;
        
        //restore
        rec3.LANMES(_,"third resource");
        rec3.save(_) ;
   
    start();
}

function testUpdtX3Func(_) {
    tracer= trace_update_dotnet ;
    var context={request :{}} ;
    cookie = getCookie(_);
    context.request.headers={
            host : "localhost",
          "accept" : "application/json",
          "content-type" : "application/json",
          cookie : cookie
        }

        var testdir = "syracuse-translation/test/server";
        var unitTest="unitTest" ;
        var dpath = fsp.join(__dirname, "dotnet");
        var fpath = fsp.join(dpath, "unitTest.resx");

        tracer && tracer("extraction before update");

        var ep = adminHelper.getCollaborationEndpoint(_);
        var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
        var model = db.model;
       
        var body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit",//
         {
            endpoint: {
                $uuid: ep.$uuid,
                $key: ep.$key,
                description: ep.description
            },
            $actions  : {
                fromSyracuseToX3Dotnet: {
                $isRequested: true,
                $parameters : {
                                dir: testdir,
                                indexdir: testdir,
                                unitTestFlg: true } 
                                }
            }});

   
         var entityTablan=db.getEntity(_,"TABLAN") ;
         var eng=entityTablan.createInstance(_,db ) ;
         eng.LAN(_,"ENG") ;
         eng.LANISO(_, "en-US") ;  
         eng.save(_) ;
       
         var fr=entityTablan.createInstance(_,db) ;
         fr.LAN(_,"FRA") ;
         fr.LANISO(_, "fr-FR") ;
         fr.save(_);
          
        
        var entity=db.getEntity(_,"APLSTD") ;
        var rec=db.fetchInstance(_,entity,{sdataWhere: "LANCHP eq 10033 and LAN eq 'ENG' and LANNUM eq 3"});
        if (rec){
            var expected=rec.LANMES(_)+" updated on X3 side";
            rec.LANMES(_, expected) ;
            rec.save(_)
        }
        rec=db.fetchInstance(_,entity,{sdataWhere: "LANCHP eq 10033 and LAN eq 'ENG' and LANNUM eq 3"});
        strictEqual(expected , rec.LANMES(_)," updated on X3 side") ;

        var expectedFr="traduction française";
        //create the french translation

       var recFR= entity.createInstance(_,db) ;

        recFR.LANCHP(_, 10033);
        recFR.LANNUM(_, 3);
        recFR.LANMES(_, expectedFr);
        recFR.LAN(_, "FRA");
        recFR.save(_);

        recFR=db.fetchInstance(_,entity,{sdataWhere: "LANCHP eq 10033 and LAN eq 'FRA' and LANNUM eq 3"});
        strictEqual(expectedFr , recFR.LANMES(_),"french translation created on X3 ") ;
        
        tracer && tracer("x3->Syracuse "+baseUrl);
        var body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit",//
         {
            endpoint: {
                $uuid: ep.$uuid,
                $key: ep.$key,
                description: ep.description
            },
            $actions  : {
                fromX3toSyracuseDotnet: {
                $isRequested: true,
                $parameters :  {
            dir: testdir,
            indexdir: testdir,
        }
            }}});
       

       var fpath = fsp.join(dpath, "unitTestExtraction.resx");
        var xml= fs.readFile(fpath, "utf8", _);
        var regex = /<data*\sname="([\s\S]*?)"([\s\S]*?)<value>([\s\S]*?)<\/value>([\s\S]*?)<\/data>/gm
        var matches = {};
        var match;
        while (match = regex.exec(xml)) {
            var line = match[0];
            var key = match[1];
            var text = match[3];
            matches[key]=text;
            //xml.replace(text,text+" modification") ;
        }
        
        strictEqual(expected , matches["key3"] ,"Syracuse resource updated: eng") ;

        fpath = fsp.join(dpath, "unitTestExtraction.fr-fr.resx");
        xml = fs.readFile(fpath, "utf8", _);
        matches = {};
        
        while (match = regex.exec(xml)) {
            var line = match[0];
            var key = match[1];
            var text = match[3];
            matches[key]=text;
            //xml.replace(text,text+" modification") ;
        }
        strictEqual(expectedFr , matches["key3"] ,"Syracuse resource created: fr") ;
        
        deleteFolderRecursive(_,dpath) ;
         var indexpath=fsp.join(__dirname, "../../../",testdir, "indexDotnet.json") ;
        fs.unlink(indexpath,_) ;
       
    deleteFolderRecursive(_,dpath) ;
    start();
}

asyncTest("update of the message in syracuse", 12, testUpdtSyrFunc);
asyncTest("update of the message in X3", 7, testUpdtX3Func);



function stopFunc(_) {
    doStop = true;
    start();
}

//setTimeout(function(){
    asyncTest("stop  tests", 0,stopFunc);
//} ,120);