"use strict";
//
/* global QUnit: false, ok: false, asyncTest: false, test: false, equal: false, strictEqual: false, same: false, start: false, stop: false */
var fs = require('streamline-fs');
var fsp = require("path");
var sys = require("util");
var helpers = require('syracuse-core/lib/helpers');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var streams = require('streamline/lib/streams/streams');
var locale = require("syracuse-core/lib/locale");
var uuid = require("syracuse-core/lib/uuid");
var messageStore = require("syracuse-translation/lib/messageStore");

var tracer = console.log;

var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});

var set = new messageStore.MessageSet();
var chp1 = 10031,
	chp2 = 10036,
	count = 1900,
	max = 1999;

asyncTest("Message set init", function(_) {
	var chp, id;

	function init(lan) {
		set.init(chp, id, lan, chp + " " + id + " " + lan);
	}

	for (chp = chp1; chp <= chp2; chp++) {
		for (id = 1; id <= count; id++) {
			["BRI", "ENG", "FRA"].forEach(init);
		}
	}

	var col = set.getAll();
	strictEqual(Object.keys(col).length, chp2 - chp1 + 1, "Chapter count ok");
	strictEqual(Object.keys(col[chp1]).length, count, "Unit count ok");

	var eq = true;
	var verified = true;
	var stateVerified = true;
	set.traverse(function(context, chp, id, lan, text, state) {
		if (text === undefined)
			return;
		eq = text === (chp + " " + id + " " + lan);
		verified = verified && eq;
		if (!eq) {
			strictEqual(text, chp + " " + id + " " + lan);
		}
		stateVerified = stateVerified && (state == "clean");
	});
	ok(verified, "all messages are verified");
	ok(stateVerified, "all messages state are verified");

	start();
});

asyncTest("Message creation", function(_) {
	var chp = chp1,
		id;

	function create(lan) {
		set.setText(chp, id, lan, chp + " " + id + " " + lan);
	}

	for (id = count + 1; id <= max; id++) {
		["BRI", "ENG", "FRA"].forEach(create);
	}

	var col = set.getAll();
	strictEqual(Object.keys(col[chp1]).length, max, "Unit count ok");

	var eq = true;
	var verified = true;
	var stateVerified = true;
	var notVerified;
	set.traverse(function(context, chp, id, lan, text, state) {
		if (text === undefined)
			return;
		eq = text === (chp + " " + id + " " + lan);
		verified = verified && eq;
		if (!eq) {
			strictEqual(text, chp + " " + id + " " + lan);
		}
		eq = id > count ? state == "created" : state == "clean";
		if (!eq) {
			strictEqual(state, id > count ? "created" : "clean", "Verify state of " + chp + " " + id + " " + lan);
		}
		stateVerified = stateVerified && eq;
	});
	ok(verified, "all messages are verified");
	ok(stateVerified, "all messages state are verified");

	start();
});

asyncTest("Stop", function(_) {
	doStop = true;

	start();
});