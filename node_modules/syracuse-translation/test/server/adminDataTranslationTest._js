"use strict";
var fs = require('streamline-fs');
var fsp = require("path");
var sys = require("util");
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;

var types = require('syracuse-core/lib/types/allTypes');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first
// syracuse                                                             // require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require('streamline-mongodb');
var streams = require('streamline/lib/streams/streams');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var jsonExport = require("syracuse-import/lib/jsonExport");
var jsonImport = require("syracuse-import/lib/jsonImport");
var locale = require("syracuse-core/lib/locale");
var translation = require("syracuse-translation/lib/translation");
//
var tracer = console.log;
var rootpath = fsp.dirname(process.cwd());
// var tracer = null;
//
// force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;
helpers.pageFileStorage = false;

var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_admin_test");

var baseUrl = "http://localhost:3004";
var contractUrl = "/sdata/syracuse/collaboration/mongodb_admin_test/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";
var adminChapter = 10036;
var profileId;

var cookie = "";

function onlyInfo(diags) {
	return diags.every(function(diag) {
		return diag.$severity === "info";
	});
}

function _getModel() {
	return dataModel.make(
	registry.applications.syracuse.contracts.collaboration,
		"mongodb_admin_test");
}

function getCookie(_, login, pass) {

	var response = new streams.httpRequest({
		url: baseUrl + "/syracuse-main/html/main.html",
		user: login || "guest",
		password: pass || "guest"
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	return response.headers["set-cookie"];
}

function getCookie1(_, login, pass) {
	var baseUrl1 = "http://localhost:8124";
	var response = new streams.httpRequest({
		url: baseUrl1 + "/syracuse-main/html/main.html",
		user: login || "guest",
		password: pass || "guest"
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	return response.headers["set-cookie"];
}

function post(_, cookie, url, data, statusCode) {
	var response = streams.httpRequest({
		method: "post",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			accept: "application/json",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);

	var responsetext = response.readAll(_);
	strictEqual(response.statusCode, statusCode || 201, "status verified: ");
	return JSON.parse(responsetext);

}

function put(_, cookie, url, data, statusCode) {

	var response = streams.httpRequest({
		method: "put",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);

	strictEqual(response.statusCode, statusCode || 200, "status verified");
	var resp = response.readAll(_);
	return JSON.parse(resp);
}

function get(_, cookie, url, statusCode, facet) {
	var type = facet || "generic.$details";
	var response = streams.httpRequest({
		method: "get",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		// url: url.indexOf("http") == 0 ? url : baseUrl +
		// "sdata/syracuse/collaboration/syracuse/" + url,
		// url:
		// "http://localhost:3004/sdata/syracuse/collaboration/mongodb_admin_test/exportProfiles",
		headers: {
			cookie: cookie,
			"Accept-Language": acceptLanguage,
			accept: "application/json;vnd.sage=syracuse"
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified ");
	var resp = response.readAll(_);

	// console.log("Response : "+JSON.stringify(JSON.parse(resp),null,2));
	return JSON.parse(resp);
}

function del(_, cookie, url, statusCode) {
	var response = streams.httpRequest({
		method: "delete",
		url: baseUrl + contractUrl + url,
		headers: {
			cookie: cookie
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});

asyncTest("init database", 1, function(_) {

	var server = new mongodb.Server(
	endPoint.datasets["mongodb_admin_test"].hostname,
	endPoint.datasets["mongodb_admin_test"].port, {});
	var db = adminTestFixtures.newMongoDb(config.collaboration.dataset, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");

	start();
});

//start syracuse server
asyncTest("initialize syracuse test server", 1, function(_) {
	require('syracuse-main/lib/syracuse').startServers(_, port);
	ok(true, "server initialized");
	start();
});

var x3sId;
var applicationId;
var adminEp;

asyncTest("create administration endpoint: ", 5, function(_) {
	cookie = getCookie(_);
	var appli = adminHelper.getApplication(_, "syracuse", "collaboration");
	ok(appli != null, "Application fetch ok");
	applicationId = appli.$uuid;
	
	data = {
			description: "Administration",
			dataset: "mongodb_admin_test",
			enableSearch: false,
			protocol: "syracuse",
			databaseDriver: "mongodb",
			databaseHost: "localhost",
			databasePort: 27017,
			applicationRef : {
					$uuid: applicationId
				},
				$actions : {
					$save: {
						$isRequested: true
					}
				}
		};
	body = post(_, cookie, "endPoints/$template/$workingCopies?trackingId=" + uuid.generate(), data);

	adminEp = get(_, cookie, "endPoints('" + body.$uuid + "')");

	start();
});

function deleteFolderRecursive(_, path) {
	var files = [];
	if (fs.existsSync(path)) {
		files = fs.readdir(path, _);
		tracer && tracer("files : " + sys.inspect(files));
		files.forEach_(_, function(_, file, idx) {
			var curPath = fsp.join(path, file);
			if (fs.stat(curPath, _).isDirectory()) { // recurse
				deleteFolderRecursive(_, curPath);
			} else { // delete file    
				fs.unlinkSync(curPath);
			}
		});
		tracer && tracer("remove empty folder");
		fs.rmdir(path, _);
	}
}

//asyncTest("test " + profileDescr, test.nbrc, testCheck)} ,10);

asyncTest("index construction", 6, function(_) {
	/*var context = {
		request: {}
	};*/
	cookie = getCookie(_);
	/*context.request.headers = {
		host: "localhost",
		"accept": "application/json",
		"content-type": "application/json",
		cookie: cookie
	};*/

	var testdir = "syracuse-translation/test/server";
	var dpath = fsp.join(__dirname, "resources");
	if (!fs.existsSync(dpath)) fs.mkdir(dpath, "7777", _);
	var inputJson = {
		"$prototypes": {
			"application": {
				"$key": [
					"application",
					"contract"],
				"$localized": [
					"title"],
				"menuItems": {
					"$key": "title"
				}
			},
			"menuItem": {
				"$key": "title",
				"$localized": [
					"title",
					"title"]
			}
		},
		"$items": [{
			"$type": "application",
			"application": "x3",
			"contract": "erp"
		}, {
			"$type": "application",
			"application": "syracuseTest",
			"contract": "collaboration",
			"menuItems": [
				"title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2",
				"title_3d4299f4-15a0-439e-b506-5e9ad7c143b7",
				"title_53a3cffa-33ab-4f57-86cd-bb576036c9fe"]
		}, {
			"$type": "menuItem",
			"title": "title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2",
			"linkType": "$dashboard"
		}, {
			"$type": "menuItem",
			"title": "title_3d4299f4-15a0-439e-b506-5e9ad7c143b7",
			"linkType": "$dashboard"
		}, {
			"$type": "menuItem",
			"title": "title_53a3cffa-33ab-4f57-86cd-bb576036c9fe",
			"linkType": "$dashboard"
		}

		],
		"$localization": {
			"en-us": {
				"title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2": "menuItemA",
				"title_3d4299f4-15a0-439e-b506-5e9ad7c143b7": "menuItemB",
				"title_53a3cffa-33ab-4f57-86cd-bb576036c9fe": "menuItemC"
			},
			"fr-fr": {}
		}
	};

	var fpath = fsp.join(dpath, "translation-export.json");
	fs.writeFile(fpath, JSON.stringify(inputJson), "utf8", _);

	var appli = adminHelper.getCollaborationApplication(_);
	var ep = adminHelper.getCollaborationEndpoint(_);

	var body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit", //
	{
		endpoint: {
			$uuid: ep.$uuid,
			$key: ep.$key,
			description: ep.description
		},
		$actions: {
			fromSyracuseToX3Admin: {
				$isRequested: true,
				$parameters: {
					dir: dpath,
					indexdir: testdir,
					exportFile: "translation-export.json"
				}
			}
		}
	});

	var indexpath = fsp.join(__dirname, "../../../", testdir, "indexAdmin.json");
	tracer && tracer("indexpath: " + indexpath);

	//var fd = fs.open(indexpath, "r", null, _);
	var indextmp = fs.readFile(indexpath, "utf8", _);
	var index = JSON.parse(indextmp);
	console.log("****INDEX: "+JSON.stringify(index,null,2)) ;
	strictEqual(index.count, 3, "records counter");
	var expected = inputJson["$localization"]['en-us'];

	strictEqual(index["translation-export.json"]["title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2"].text, expected["title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2"], "menuItemA");
	strictEqual(index["translation-export.json"]["title_3d4299f4-15a0-439e-b506-5e9ad7c143b7"].text, expected["title_3d4299f4-15a0-439e-b506-5e9ad7c143b7"], "menuItemB");
	strictEqual(index["translation-export.json"]["title_53a3cffa-33ab-4f57-86cd-bb576036c9fe"].text, expected["title_53a3cffa-33ab-4f57-86cd-bb576036c9fe"], "menuItemC");

	//deleteFolderRecursive(_,dpath) ;

	
	fs.unlink(indexpath, _);

	start();
});

function testUpdtSyrFunc(_) {
	
	cookie = getCookie(_);
	

	var testdir = "syracuse-translation/test/server";
	var unitTest = "unitTest";
	var dpath = fsp.join(__dirname, "resources");

	var appli = adminHelper.getCollaborationApplication(_);
	var ep = adminHelper.getCollaborationEndpoint(_);

	var body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit", //
	{
		endpoint: {
			$uuid: ep.$uuid,
			$key: ep.$key,
			description: ep.description
		},
		$actions: {
			fromSyracuseToX3Admin: {
				$isRequested: true,
				$parameters: {
					dir: dpath,
					indexdir: testdir,
					exportFile: "translation-export.json"
				}
			}
		}
	});

	var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
	var model = db.model;

	var entity = db.getEntity(_, "APLSTD");

	body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit", //
	{
		endpoint: {
			$uuid: ep.$uuid,
			$key: ep.$key,
			description: ep.description
		},
		$actions: {
			fromSyracuseToX3Admin: {
				$isRequested: true,
				$parameters: {
					dir: dpath,
					indexdir: testdir,
					exportFile: "translation-export.json"
				}
			}
		}
	});

	var fpath = fsp.join(dpath, "translation-export.json");

	var input = fs.readFile(fpath, "utf8", _);
	var inputJson = JSON.parse(input);
	var expected = inputJson["$localization"]["en-us"];

	var entity = db.getEntity(_, "APLSTD", "$query");
	var rec = db.fetchInstance(_, entity, {
		sdataWhere: "LANCHP eq " + adminChapter + " and LAN eq 'ENG' and LANNUM eq 1"
	});
	ok(rec != null, "record created");
	var msg = rec.LANMES(_);
	strictEqual(msg, expected["title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2"], "before update");

	inputJson["$localization"]["en-us"]["title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2"] = "menuItemAAA";
	fs.writeFile(fpath, JSON.stringify(inputJson), "utf8", _);

	var body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit", //
	{
		endpoint: {
			$uuid: ep.$uuid,
			$key: ep.$key,
			description: ep.description
		},
		$actions: {
			fromSyracuseToX3Admin: {
				$isRequested: true,
				$parameters: {
					dir: dpath,
					indexdir: testdir,
					exportFile: "translation-export.json"
				}
			}
		}
	});

	rec = db.fetchInstance(_, entity, {
		sdataWhere: "LANCHP eq " + adminChapter + " and LAN eq 'ENG' and LANNUM eq 1"
	});
	ok(rec != null, "record created");
	var msg = rec.LANMES(_);
	strictEqual(msg, "menuItemAAA", "after update");

	inputJson['$localization']['en-us']["title_3d4299f4-15a0-439e-b506-5e9ad7c143b7"] = "menuItemBD";
	fs.writeFile(fpath, JSON.stringify(inputJson), "utf8", _);

	body = get(_, cookie, "APLSTDs?sdataWhere=(LANCHP eq " + adminChapter + " and LAN eq 'ENG' and LANNUM eq 2)");

	var data = body.$resources[0];
	data.$etag = data.$etag + 1;
	data.LANMES = "menuItemBF";

	data.$actions = {
		$save: {
			$isRequested: true
		}
	};
	body = put(_, cookie, "APLSTDs('" + data.$uuid + "')?representation=APLSTD.$edit", data);

	body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit", //
	{
		endpoint: {
			$uuid: ep.$uuid,
			$key: ep.$key,
			description: ep.description
		},
		$actions: {
			fromSyracuseToX3Admin: {
				$isRequested: true,
				$parameters: {
					dir: dpath,
					indexdir: testdir,
					exportFile: "translation-export.json"
				}
			}
		}
	});

	var diag = body.$diagnoses;
	tracer && tracer("diag: " + sys.inspect(diag));
	strictEqual(diag[0].$severity, "warning", "conflict warning raised");
	strictEqual(diag[0].$message, 'conflict translation-export.json:title_3d4299f4-15a0-439e-b506-5e9ad7c143b7 : menuItemBF', "warning message");
	start();
}

function testUpdtX3Func(_) {
	var ep = adminHelper.getCollaborationEndpoint(_);

	cookie = getCookie(_);

	var testdir = "syracuse-translation/test/server";
	var dpath = fsp.join(__dirname, "resources");
	var fpath = fsp.join(dpath, "translation-export.json");

	var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
	var entity = db.getEntity(_, "APLSTD");
	var rec = db.fetchInstance(_, entity, {
		sdataWhere: "LANCHP eq " + adminChapter + " and LAN eq 'ENG' and LANNUM eq 3"
	});

	var expected = rec.LANMES(_) + " updated on X3 side";
	rec.LANMES(_, expected);
	rec.save(_);
	var diags = [];
	rec.getAllDiagnoses(_, diags);

	strictEqual(diags.length, 0, "successfully updated on X3 side");

	var expectedFr = "traduction française";
	//create the french translation

	var recFR = entity.createInstance(_, db);

	recFR.LANCHP(_, adminChapter);
	recFR.LANNUM(_, 3);
	recFR.LANMES(_, expectedFr);
	recFR.LAN(_, "FRA");
	recFR.save(_);
	rec.getAllDiagnoses(_, diags);
	strictEqual(diags.length, 0, "french translation successfully created on X3 side");

	var entityTablan = db.getEntity(_, "TABLAN");
	var eng = entityTablan.createInstance(_, db);
	eng.LAN(_, "ENG");
	eng.LANISO(_, "en-US");
	eng.save(_);

	eng.getAllDiagnoses(_, diags);
	strictEqual(diags.length, 0, "english language registered in TABLAN");

	var fr = entityTablan.createInstance(_, db);
	fr.LAN(_, "FRA");
	fr.LANISO(_, "fr-FR");
	fr.save(_);
	fr.getAllDiagnoses(_, diags);
	strictEqual(diags.length, 0, "french language registered in TABLAN");

	var body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit", //
	{
		endpoint: {
			$uuid: ep.$uuid,
			$key: ep.$key,
			description: ep.description
		},
		$actions: {
			fromX3toSyracuseAdmin: {
				$isRequested: true,
				$parameters: {
					dir: dpath,
					indexdir: testdir,
					exportFile: "translation-export.json"
				}
			}
		}
	});

	var input = fs.readFile(fpath, "utf8", _);
	var parsed = JSON.parse(input);

	strictEqual(expected, parsed["$localization"]['en-us']["title_53a3cffa-33ab-4f57-86cd-bb576036c9fe"], "Syracuse resource updated: eng");
	strictEqual(expectedFr, parsed["$localization"]['fr-fr']["title_53a3cffa-33ab-4f57-86cd-bb576036c9fe"], "Syracuse resource created: fr");

	deleteFolderRecursive(_, dpath);
	var indexpath = fsp.join(__dirname, "../../../", testdir, "indexAdmin.json");

	tracer && tracer("deleting " + indexpath);
	fs.unlink(indexpath, _);

	start();
}

asyncTest("update of the admin resource on syracuse side", 13, testUpdtSyrFunc);
asyncTest("update of the message in X3", 8, testUpdtX3Func);

function stopFunc(_) {
	doStop = true;
	start();
}

//setTimeout(function(){
asyncTest("stop  tests", 0, stopFunc);
//} ,120);
