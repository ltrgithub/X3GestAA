"use strict";
var module = QUnit.module;
var fs = require('fs');
var fsp = require("path");
var sys = require("util");
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;

var types = require('syracuse-core/lib/types/allTypes');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first
// syracuse                                                             // require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require("mongodb");
var streams = require('streamline/lib/streams/streams');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var jsonExport = require("syracuse-import/lib/jsonExport");
var jsonImport = require("syracuse-import/lib/jsonImport");
var locale = require("syracuse-core/lib/locale");
var translation = require("syracuse-translation/lib/translation");
//
var tracer = console.log;
var rootpath=fsp.dirname(process.cwd());
// var tracer = null;
//
// force basic auth
config.session = config.session || {};
config.session.auth = "basic";
helpers.pageFileStorage = false;

var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_admin_test");

var baseUrl = "http://localhost:3004";
var contractUrl = "/sdata/syracuse/collaboration/mongodb_admin_test/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";

var profileId;

var cookie = "";

function onlyInfo(diags) {
    return diags.every(function (diag) {
        return diag.severity == "info";
    });
}

function _getModel() {
    return dataModel.make(
    registry.applications.syracuse.contracts.collaboration,
        "mongodb_admin_test");
}

function getCookie(_, login, pass) {
    
    var response = new streams.httpRequest({
        url: baseUrl + "/syracuse-main/html/main.html",
        user: login || "guest",
        password: pass || "guest"
    }).end().response(_);
    response.readAll(_);
    strictEqual(response.statusCode, 200, "user authenticated");
    return response.headers["set-cookie"];
}



function post(_, cookie, url, data, statusCode) {
    console.log("post url: "+url);
    var response = streams.httpRequest({
        method: "post",
        url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
        headers: {
            "content-type": "application/json",
            accept: "application/json",
            cookie: cookie
        }
    }).end(JSON.stringify(data)).response(_);

    var responsetext = response.readAll(_);
    //console.log(sys.inspect(responsetext));
    strictEqual(response.statusCode, statusCode || 201, "status verified: ");
    console.log(JSON.stringify(responsetext,null,2));
    return JSON.parse(responsetext);

}

function put(_, cookie, url, data, statusCode) {
    //console.log("PUT  url: " + url);
    //console.log("PUT  baseUrl + contractUrl + url: " + baseUrl + contractUrl + url);
    
    var response = streams.httpRequest({
        method: "put",
        url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
        headers: {
            "content-type": "application/json",
            cookie: cookie
        }
    }).end(JSON.stringify(data)).response(_);
     
    strictEqual(response.statusCode, statusCode || 200, "status verified");
    var resp=response.readAll(_) ;
    //console.log("PUT  resp: " + sys.inspect(resp));
    return JSON.parse(resp);
}

function get(_, cookie, url, statusCode, facet) {
    var type = facet || "generic.$details";
    var response = streams.httpRequest({
        method: "get",
        url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
        // url: url.indexOf("http") == 0 ? url : baseUrl +
        // "sdata/syracuse/collaboration/syracuse/" + url,
        // url:
        // "http://localhost:3004/sdata/syracuse/collaboration/mongodb_admin_test/exportProfiles",
        headers: {
            cookie: cookie,
            "Accept-Language": acceptLanguage,
            accept: "application/json;vnd.sage=syracuse"
        }
    }).end().response(_);
    strictEqual(response.statusCode, statusCode || 200, "status verified ");
    var resp = response.readAll(_);

    // console.log("Response : "+JSON.stringify(JSON.parse(resp),null,2));
    return JSON.parse(resp);
}

function del(_, cookie, url, statusCode) {
    var response = streams.httpRequest({
        method: "delete",
        url: baseUrl + contractUrl + url,
        headers: {
            cookie: cookie
        }
    }).end().response(_);
    strictEqual(response.statusCode, statusCode || 200, "status verified");
    return JSON.parse(response.readAll(_));
}

var doStop = false;
module("textTranslation", {
    setup: function () {},
    teardown: function () {
        if (doStop) {
            setTimeout(function () {
                process.kill(process.pid);
            }, 100)
        }
    }
});


/*asyncTest("test create", 1, function (_) {


    var cooki = getCookie1(_);
    

tracer && tracer("create test" );
        var uid=helpers.uuid.generate() ;
        var data = {
            '$uuid' : uid ,
            'LANCHP': 10030,
            'LANNUM': 1307, 
            'LAN': 'ENG',
            'LANMES': "dary's test hahaha"
    };
    
            
    
        console.log("data: "+JSON.stringify(data,null,2)) ;
        //var body = post(_, cooki, "http://localhost:8124/sdata/x3/erp/SUPERV/ZZAPLSTD?representation=ZZAPLSTD.$edit" , data);
        var body = post(_, cooki, "http://localhost:8124/sdata/X3/erp/SUPERV/ZZAPLSTD?representation=ZZAPLSTD.$edit" , data);
        
//var body = get(_, cooki, "http://localhost:8124/sdata/syracuse/collaboration/syracuse/ZZAPLSTDs" , data);
        
      //   console.log("****test create***get: "+sys.inspect(body.$resources));

         console.log("****test create***post: "+sys.inspect(body.$properties.$diagnoses));
//var body = get(_, cooki, "http://localhost:8124/sdata/syracuse/collaboration/syracuse/ZZAPLSTDs" , );
   
});*/

asyncTest("init database", 1, function (_) {
    console.log("UT1") ;
    var server = new mongodb.Server(
    endPoint.datasets["mongodb_admin_test"].hostname,
    endPoint.datasets["mongodb_admin_test"].port, {});
    var db = new mongodb.Db(config.collaboration.dataset, server, {});
    db = db.open(_);
    db.dropDatabase(_);
    //
    ok(true, "mongodb initialized");

    start();
});

// start syracuse server
var syracuse;
// wait server initialization
asyncTest("initialize syracuse test server", 1, function (_) {
    syracuse = require('syracuse-main/lib/syracuse');
    syracuse.initializerStatus.on("initialized", function () {
        ok(true, "server initialized");
        syracuse.server.listen(null, port);
        start();
    });
});

var x3sId;
var applicationId;
var adminEp;

asyncTest("create administration endpoint: ", 7, function (_) {
    
    console.log("UT2") ;
    cookie = getCookie(_);
    console.log("create administration endpoint");
    var appli = adminHelper.getApplication(_, "syracuse", "collaboration");
    ok(appli != null, "Application fetch ok");
    applicationId = appli.$uuid;
    console.log("applicationId " + appli.$uuid);
    var body = post(_, cookie, "x3servers/$template/$workingCopies?trackingId=" + uuid.generate(), {});
    var data = {
        description: "X3 S1",
        serverHost: "localhost",
        serverPort: 1,
        serverTimeout: 1
    };
    //console.log("create x3server  after post "+JSON.stringify(body,null,2) );

    data.$key = body.$uuid;
    data.$etag = body.$etag;

    data.$actions = {
        $save: {
            $isRequested: true
        }
    };
    body = put(_, cookie, body.$url, data);

    // create endpoints
    x3sId = body.$uuid;

    //console.log("create administration endpoint before post");
    var body = post(_, cookie, "endPoints/$template/$workingCopies?trackingId=" + uuid.generate(), {});
    //console.log("create administration endpoint after post");
    var data = {
        description: "Administration",
        dataset: "mongodb_admin_test",
        enableSearch: false,
        protocol: "syracuse",
        databaseDriver: "mongodb",
        databaseHost: "localhost",
        databasePort: 27017
    };

    data.$key = body.$uuid;
    data.$etag = body.$etag;
    data.applicationRef = {
        $uuid: applicationId
    };

    data.$actions = {
        $save: {
            $isRequested: true
        }
    };
    body = put(_, cookie, body.$url, data);

    adminEp = get(_, cookie, "endPoints('" + body.$uuid + "')");
    // console.log("ADMIN ENDPOINT: "+ JSON.stringify(adminEp,null,2)) ;
    start();
});

 function deleteFolderRecursive(_,path) {
    var files = [];
    if( fs.existsSync(path) ) {
        files = fs.readdir(path,_);
        console.log("files : "+sys.inspect(files));
        files.forEach_(_,function(_,file,idx){
            var curPath = fsp.join(path ,file);
            if(fs.stat(curPath,_).isDirectory()) { // recurse
                deleteFolderRecursive(_,curPath);
            } else { // delete file    
                fs.unlinkSync(curPath);
            }
        });
        console.log("remove empty folder") ;
        fs.rmdir(path,_);
    }
    }


    //asyncTest("test " + profileDescr, test.nbrc, testCheck)} ,10);


asyncTest("index construction", 8, function (_) {
    var context={request: {}} ;
    cookie = getCookie(_);
    context.request.headers={
        host : "localhost",
          "accept" : "application/json",
          "content-type" : "application/json",
          cookie : cookie
        }

    try {
        var testdir = "syracuse-translation/test/server";
        var dpath = fsp.join(__dirname, "resources");
        if( !fs.existsSync(dpath) ) 
            fs.mkdir(dpath,"7777" ,_) ;
        var inputJson={
    "$prototypes": {
        "application": {
            "$key": [
                "application",
                "contract"
            ],
            "$localized": [
                "title"
            ],
            "menuItems": {
                "$key": "title"
            }
        },
        "menuItem": {
            "$key": "title",
            "$localized": [
                "title",
                "title"
            ]
        }
    },
    "$items": [
        {
            "$type": "application",
            "application": "x3",
            "contract": "erp"
        },
        {
            "$type": "application",
            "application": "syracuseTest",
            "contract": "collaboration",
            "menuItems": [
                "title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2",
                "title_3d4299f4-15a0-439e-b506-5e9ad7c143b7",
                "title_53a3cffa-33ab-4f57-86cd-bb576036c9fe"
            ]
        },
        {
            "$type": "menuItem",
            "title": "title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2",
            "linkType": "$dashboard"
        },
        {
            "$type": "menuItem",
            "title": "title_3d4299f4-15a0-439e-b506-5e9ad7c143b7",
            "linkType": "$dashboard"
        },
        {
            "$type": "menuItem",
            "title": "title_53a3cffa-33ab-4f57-86cd-bb576036c9fe",
            "linkType": "$dashboard"
        }
       
    ],
    "$localization": {
        "en-us": {
            "title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2": "menuItemA",
            "title_3d4299f4-15a0-439e-b506-5e9ad7c143b7": "menuItemB",
            "title_53a3cffa-33ab-4f57-86cd-bb576036c9fe": "menuItemC"
        },
        "fr-fr": {}
    }
} ;

        
        var fpath = fsp.join(dpath, "translation-export.json");
        fs.writeFile(fpath, JSON.stringify(inputJson), "utf8", _);


       var appli = adminHelper.getCollaborationApplication(_);
        var ep = adminHelper.getCollaborationEndpoint(_);
        
        var body = post(_, cookie, "textTranslations/$template/$workingCopies?trackingId=" + uuid.generate(), {});
        var data = {
            code: "test",
            description: "TEST1",
            application: {
                $uuid: appli.$uuid,
                $key: appli.$key,
                description: appli.description
            },
            endpoint: {
                $uuid: ep.$uuid,
                $key: ep.$key,
                description: ep.description
            }
        };

        data.$key = body.$uuid;
        data.$etag = body.$etag;
        data.$actions = {
            $save: {
                $isRequested: true
            }
        };
        body = put(_, cookie, body.$url, data);
        
        var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
        var model = db.model;
        var techEntity = model.getEntity("textTranslation");
        var profileInst = db.fetchInstance(_, techEntity, {
            jsonWhere: {
                code: "test"
            }
        });
        var entity=db.getEntity(_,"ZZAPLSTD") ;
        console.log("EXTRACT ADMIN RESOURCES") ;
        console.log("dir "+dpath) ;
        console.log("indexdir "+testdir) ;
        translation.extractAdminResources(_, profileInst, {
            baseurl: baseUrl,
            dir: dpath,
            indexdir : testdir,
            exportFile : "translation-export.json",
            burl :true,
            unitTestFlg: true 
        },context);
        cookie = getCookie(_);
        //console.log("TESTDIR : "+testdir);
        var indexpath=fsp.join( __dirname, "../../../",testdir,"indexAdmin.json") ;
        //console.log( "indexpath: "+ indexpath) ;
        
        var fd=fs.open(indexpath, "r",null, _);
        var indextmp=fs.readFile(indexpath, "utf8", _);
        var index=JSON.parse(indextmp) ;
        strictEqual(index.count,3, "records counter") ;
        var expected=inputJson["$localization"]['en-us'] ;
        
        strictEqual(index["translation-export.json"]["title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2"].text,expected["title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2"] , "menuItemA") ;
        strictEqual(index["translation-export.json"]["title_3d4299f4-15a0-439e-b506-5e9ad7c143b7"].text,expected["title_3d4299f4-15a0-439e-b506-5e9ad7c143b7"] , "menuItemB") ;
        strictEqual(index["translation-export.json"]["title_53a3cffa-33ab-4f57-86cd-bb576036c9fe"].text,expected["title_53a3cffa-33ab-4f57-86cd-bb576036c9fe"] , "menuItemC") ;
      
        //deleteFolderRecursive(_,dpath) ;
        
        fs.close(fd,_) ;
        fs.unlink(indexpath,_) ;
    } catch (ex) {
        console.error(ex);
    }
    
    console.log() 
    start();
});


function testUpdtSyrFunc(_) {
    var context={request :{}} ;
    cookie = getCookie(_);
    context.request.headers={
            host : "localhost",
          "accept" : "application/json",
          "content-type" : "application/json",
          cookie : cookie
        }

    try {
        var testdir = "syracuse-translation/test/server";
        var unitTest="unitTest" ;
        var dpath = fsp.join(__dirname, "resources");
       

       
        var appli = adminHelper.getCollaborationApplication(_);
        var ep = adminHelper.getCollaborationEndpoint(_);
        
        var body = post(_, cookie, "textTranslations/$template/$workingCopies?trackingId=" + uuid.generate(), {});
          var data = {
            code: "test",
            description: "TEST1",
            application: {
                $uuid: appli.$uuid,
                $key: appli.$key,
                description: appli.description
            },
            endpoint: {
                $uuid: ep.$uuid,
                $key: ep.$key,
                description: ep.description
            }
        };

        data.$key = body.$uuid;
        data.$etag = body.$etag;
        data.$actions = {
            $save: {
                $isRequested: true
            }
        };
        body = put(_, cookie, body.$url, data);
        
        var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
        var model = db.model;
        var techEntity = model.getEntity("textTranslation");
        var profileInst = db.fetchInstance(_, techEntity, {
            jsonWhere: {
                code: "test"
            }
        });
        var entity=db.getEntity(_,"ZZAPLSTD") ;
        console.log("update Syracuse test");
        console.log("1st extraction");
        translation.extractAdminResources(_, profileInst, {
            baseurl: baseUrl,
            dir: dpath,
            indexdir : testdir,
            exportFile : "translation-export.json",
            burl :true,
            unitTestFlg: true 
        },context);

        var fpath = fsp.join(dpath, "translation-export.json");
      
        var input= fs.readFile(fpath, "utf8", _);
        var inputJson=JSON.parse(input) ;
        var expected=inputJson["$localization"]["en-us"];

        var entity = db.getEntity(_, "ZZAPLSTD", "$query");
        var rec=db.fetchInstance(_,entity,{sdataWhere: "LANCHP eq 10032 and LAN eq 'ENG' and LANNUM eq 3"});
        if (!rec)
            console.log("NON CREE ") ;
        else{
            var msg=rec.LANMES(_) ;
            strictEqual(msg,expected["title_53a3cffa-33ab-4f57-86cd-bb576036c9fe"] , "before update") ;
        }



       
        inputJson["$localization"]["en-us"]["title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2"] = "menuItemAAA";
        fs.writeFile(fpath, JSON.stringify(inputJson), "utf8", _);

        console.log("2nd extraction");
        translation.extractAdminResources(_, profileInst, {
            baseurl: baseUrl,
            dir: dpath,
            indexdir : testdir,
            exportFile : "translation-export.json",
            burl :true,
            unitTestFlg: true 
        },context);
        console.log("after 2nd extraction") ;
        //var recs=db.fetchInstances(_,entity,{sdataWhere: "LANCHP eq 10032 and LAN eq 'ENG' and LANNUM eq 1"});
        //console.log("recs: "+sys.inspect(recs) );
        rec=db.fetchInstance(_,entity,{sdataWhere: "LANCHP eq 10032 and LAN eq 'ENG' and LANNUM eq 1"});
        if (!rec)
            console.log("NON CREE ") ; 
        else {
        
        var msg=rec.LANMES(_) ;
        console.log("msg="+msg) ;
        strictEqual(msg,"menuItemAAA" , "after update") ;
        }


        inputJson['$localization']['en-us']["title_3d4299f4-15a0-439e-b506-5e9ad7c143b7"]="menuItemBD" ;
       
        fs.writeFile(fpath, JSON.stringify(inputJson), "utf8", _);
        
        
        
        var body = get(_, cookie, "ZZAPLSTDs?sdataWhere=(LANCHP eq 10032 and LAN eq 'ENG' and LANNUM eq 2)");
        console.log("GET: "+JSON.stringify(body)) ;
        var data=body.$resources[0] ;
        data.$etag = data.$etag+1;
        data.LANMES= "menuItemBF";

        data.$actions = {
            $save: {
                $isRequested: true
            }
        };
        body = put(_, cookie, "ZZAPLSTDs('" + data.$uuid + "')?representation=ZZAPLSTD.$edit" , data);
    
        //body = get(_, cookie, "ZZAPLSTDs?sdataWhere=(lanchp eq 10032 and LAN eq 'ENG')");
        //console.log("GET: "+JSON.stringify(body.$resources,null,2)) ;
        
        console.log("3rd extraction");
        translation.extractAdminResources(_, profileInst, {
            baseurl: baseUrl,
            dir: dpath,
            indexdir: testdir,
            exportFile : "translation-export.json",
            burl :true,
            unitTestFlg: true 
        },context);
        
        var diag=[];
        profileInst.getAllDiagnoses(_, diag);
        console.log ("diag: "+sys.inspect(diag));
        strictEqual( diag[0].severity, "warning" , "conflict warning raised") ;
        strictEqual( diag[0].message, 'update conflict for resource title_3d4299f4-15a0-439e-b506-5e9ad7c143b7, choose between  menuItemBD(syracuse version)  and   menuItemBF(X3 version) ',"warning message") ;
        

        //deleteFolderRecursive(_,dpath) ;
        
        //fs.close(fd,_) ;
        //fs.unlink(indexpath,_) ;

    } catch (ex) {
        console.error(ex);
    }
    start();
}

function testUpdtX3Func(_) {
    console.log("update X3 test");
    var context={request :{}} ;
    cookie = getCookie(_);
    context.request.headers={
            host : "localhost",
          "accept" : "application/json",
          "content-type" : "application/json",
          cookie : cookie
        }

        var testdir = "syracuse-translation/test/server";
        //var unitTest="unitTest" ;
        var dpath = fsp.join(__dirname, "resources");
        var fpath = fsp.join(dpath, "translation-export.json");

    try {
        
        var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
        var model = db.model;
        var techEntity = model.getEntity("textTranslation");
        var profileInst = db.fetchInstance(_, techEntity, {
            jsonWhere: {
                code: "test"
            }
        });
        var entity=db.getEntity(_,"ZZAPLSTD") ;
       // var rec = db.fetchInstance(_, entity, {
        //sdataWhere: "lanchp eq 10031 and LAN eq 'ENG' and LANNUM eq 1"});
        var body = get(_, cookie, "ZZAPLSTDs?sdataWhere=(LANCHP eq 10032 and LAN eq 'ENG' and LANNUM eq 3)");
       
        //console.log("GET: "+JSON.stringify(body.$resources,null,2)) ;
        var data=body.$resources[0] ;
        data.$etag = data.$etag+1;
        var expected=data.LANMES+" updated on X3 side";
        data.LANMES= data.LANMES+" updated on X3 side";

        data.$actions = {
            $save: {
                $isRequested: true
            }
        };
        //console.log("****testUpdtX3Func****GET: " + JSON.stringify(body) ) ;
        
        body = put(_, cookie, "ZZAPLSTDs('" + data.$uuid + "')?representation=ZZAPLSTD.$edit" , data);
        //console.log("****testUpdtX3Func****PUT: " + JSON.stringify(body) ) ;
        
        body = get(_, cookie, "ZZAPLSTDs?sdataWhere=(LANCHP eq 10032 and LAN eq 'ENG' and LANNUM eq 3)");
        
        //console.log("------------GET: "+JSON.stringify(body,null,2)) ;
        var dataX3=body.$resources[0] ;
         console.log("dataX3: "+JSON.stringify(dataX3,null,2)); 
        strictEqual(expected , dataX3.LANMES," updated on X3 side") ;
       
        //console.log("****testUpdtX3Func****GET: " + JSON.stringify(body.$resources) ) ;
        //var body = get(_, cookie, "ZZAPLSTDs?sdataWhere=(lanchp eq 10031 and LAN eq 'ENG' and LANNUM eq 1)");
       var expectedFr="traduction française";
       //create the french translation
       dataX3={
            LANCHP: 10032,
            LANNUM: data.LANNUM,
            LAN: 'FRA',
            LANMES: expectedFr,
            $actions: {
                $save: {
                    $isRequested: true
                }
            }
        } ;
        body = post(_, cookie, "ZZAPLSTDs/$template/$workingCopies?representation=ZZAPLSTD.$edit&trackingId="+uuid.generate(), {});
        
        //console.log("RESULT post: " + JSON.stringify(body, null, 2));
        
        dataX3.$uuid=body.$uuid ;
        dataX3.$key=body.$uuid ;
        dataX3.$etag=body.$etag;

        
       body = put(_, cookie, body.$url, dataX3);

        //console.log("RESULT: " + JSON.stringify(body, null, 2));
        
        body = get(_, cookie, "ZZAPLSTDs?sdataWhere=(LANCHP eq 10032 and LAN eq 'FRA' and LANNUM eq 3)");
       
       strictEqual(expectedFr , body.$resources[0].LANMES,"french translation created on X3 ") ;
        

        console.log("x3->Syracuse "+baseUrl);
        translation.updateAdminResources(_, profileInst, {
            baseurl: baseUrl,
            dir: dpath,
            indexdir: testdir,
            exportFile : "translation-export.json" ,
            burl :true,
            unitTestFlg: true 
        },context);

        var input = fs.readFile(fpath, "utf8", _);
        var parsed = JSON.parse(input);
        
        strictEqual(expected , parsed["$localization"]['en-us']["title_53a3cffa-33ab-4f57-86cd-bb576036c9fe"] ,"Syracuse resource updated: eng") ;
        strictEqual(expectedFr , parsed["$localization"]['fr-fr']["title_53a3cffa-33ab-4f57-86cd-bb576036c9fe"] ,"Syracuse resource created: fr") ;
        
        //TODO: deleteFolderRecursive(_,dpath) ;
         //var indexpath=fsp.join(__dirname, "../../../",testdir, "index.json") ;
        
        //fs.close(fd,_) ;
        //fs.unlink(indexpath,_) ;
        } catch (ex) {
        console.error(ex);
    }
    start();
}

asyncTest("update of the admin resource on syracuse side", 9, testUpdtSyrFunc);
asyncTest("update of the message in X3", 13, testUpdtX3Func);






function stopFunc(_) {
    doStop = true;
    start();
}

//setTimeout(function(){
    asyncTest("stop  tests", 0,stopFunc);
//} ,120);