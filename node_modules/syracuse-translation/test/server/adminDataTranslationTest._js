"use strict";
var fs = require('streamline-fs');
var fsp = require("path");
var sys = require("util");
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;

var types = require('syracuse-core/lib/types/allTypes');
var config = require('config'); // must be first
// syracuse                                                             // require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require('streamline-mongodb');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var jsonExport = require("syracuse-import/lib/jsonExport");
var jsonImport = require("syracuse-import/lib/jsonImport");
var locale = require("syracuse-core/lib/locale");
var translation = require("syracuse-translation/lib/translation");
//
var StubFiler = require("../fixtures/stubFiler").StubFiler;
//
var rootpath = fsp.dirname(process.cwd());
var tracer; // = console.log;
//
// force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;
helpers.pageFileStorage = false;

var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_admin_test");

var baseUrl = "http://localhost:3004";
var contractUrl = "/sdata/syracuse/collaboration/mongodb_admin_test/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";
var adminChapter = 10036;
var profileId;
//
var maxMsgLen = 123;

var cookie = "";

function onlyInfo(diags) {
	return diags.every(function(diag) {
		return diag.$severity === "info";
	});
}

function _getModel() {
	return dataModel.make(
		registry.applications.syracuse.contracts.collaboration,
		"mongodb_admin_test");
}

var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});

return test('TRANSLATION UNIT TESTS DISABLED FOR NOW', 1, function() {
	ok(true, "work in progress");
});

var db;
asyncTest("init database", 1, function(_) {

	var server = new mongodb.Server(
		endPoint.datasets["mongodb_admin_test"].hostname,
		endPoint.datasets["mongodb_admin_test"].port, {});
	db = adminTestFixtures.newMongoDb(config.collaboration.dataset, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");

	start();
});

//start syracuse server
asyncTest("initialize syracuse test server", 1, function(_) {
	require('syracuse-main/lib/syracuse').startServers(_, port);
	ok(true, "server initialized");
	start();
});

asyncTest("get database handle", 0, function(_) {
	db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);

	start();
});


var x3sId;
var applicationId;
var adminEp;

asyncTest("create administration endpoint: ", 2, function(_) {
	adminEp = db.fetchInstance(_, db.getEntity(_, "endPoint"), {
		application: "syracuse",
		contract: "collaboration",
		dataset: "syracuse"
	});
	ok(adminEp != null, "Got old collaboration endpoint ok");
	adminEp.dataset(_, "mongodb_admin_test");
	adminEp.save(_);
	// check if api is ok
	adminEp = adminHelper.getCollaborationEndpoint(_);
	ok(adminEp != null, "Collaboration EP modified ok");

	start();
});

var sampleJson = {
	"$prototypes": {
		"application": {
			"$key": [
				"application",
				"contract"
			],
			"$localized": [
				"title"
			],
			"menuItems": {
				"$key": "title"
			}
		},
		"menuItem": {
			"$key": "title",
			"$localized": [
				"title",
				"title"
			]
		}
	},
	"$items": [{
			"$type": "application",
			"application": "x3",
			"contract": "erp"
		}, {
			"$type": "application",
			"application": "syracuseTest",
			"contract": "collaboration",
			"menuItems": [
				"title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2",
				"title_3d4299f4-15a0-439e-b506-5e9ad7c143b7",
				"title_53a3cffa-33ab-4f57-86cd-bb576036c9fe"
			]
		}, {
			"$type": "menuItem",
			"title": "title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2",
			"linkType": "$dashboard"
		}, {
			"$type": "menuItem",
			"title": "title_3d4299f4-15a0-439e-b506-5e9ad7c143b7",
			"linkType": "$dashboard"
		}, {
			"$type": "menuItem",
			"title": "title_53a3cffa-33ab-4f57-86cd-bb576036c9fe",
			"linkType": "$dashboard"
		}

	],
	"$localization": {
		"en-us": {
			"title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2": "menuItemAen",
			"title_3d4299f4-15a0-439e-b506-5e9ad7c143b7": "menuItemBen",
			"title_53a3cffa-33ab-4f57-86cd-bb576036c9fe": "menuItemCen",
			"title_veryLongMessage": "This is a message of more than 123 characters. In fact it makes precisely 128 characters. With this stub to fill in 1234567890123"
		},
		"fr-fr": {
			"title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2": "menuItemAfr",
			"title_3d4299f4-15a0-439e-b506-5e9ad7c143b7": "menuItemBfr"
		}
	}
};

var indexFiler;

asyncTest("index construction", 9, function(_) {
	var inputFiler = new StubFiler();
	inputFiler.writeFile("stub_file", JSON.stringify(sampleJson), "utf8", _);
	//
	var opt = {};
	opt.exportFile = "stub_file";
	opt.dir = "./";
	opt.inputFiler = inputFiler;
	opt.indexdir = "./";
	opt.indexFiler = indexFiler = new StubFiler();
	opt.$diagnoses = [];
	opt.endpoint = adminEp;
	opt.longMessagesStrategy = "truncate";
	opt.extractAllLanguages = true;
	//
	translation.extractAdminResources(_, opt);
	// en checks
	var index = JSON.parse(opt.indexFiler.readFile("indexAdmin-en-us.json", "utf8", _));
	tracer && tracer("index: " + JSON.stringify(index, null, 2));
	strictEqual(index.count, 4, "records counter");
	var expected = sampleJson["$localization"]['en-us'];
	strictEqual(index["stub_file"]["title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2"].text, expected["title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2"], "menuItemAen");
	strictEqual(index["stub_file"]["title_3d4299f4-15a0-439e-b506-5e9ad7c143b7"].text, expected["title_3d4299f4-15a0-439e-b506-5e9ad7c143b7"], "menuItemBen");
	strictEqual(index["stub_file"]["title_53a3cffa-33ab-4f57-86cd-bb576036c9fe"].text, expected["title_53a3cffa-33ab-4f57-86cd-bb576036c9fe"], "menuItemCen");
	strictEqual(index["stub_file"]["title_veryLongMessage"].text, "This is a message of more than 123 characters. In fact it makes precisely 128 characters. With this stub to fill in 1234567", "long message truncation");
	//
	tracer && tracer("diags (318): " + sys.inspect(opt.$diagnoses));
	strictEqual(opt.$diagnoses[0].$severity, "warning", "got truncate warning");
	// fr checks
	var index = JSON.parse(opt.indexFiler.readFile("indexAdmin-fr-fr.json", "utf8", _));
	tracer && tracer("index: " + JSON.stringify(index, null, 2));
	strictEqual(index.count, 2, "records counter");
	var expected = sampleJson["$localization"]['fr-fr'];
	strictEqual(index["stub_file"]["title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2"].text, expected["title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2"], "menuItemAfr");
	strictEqual(index["stub_file"]["title_3d4299f4-15a0-439e-b506-5e9ad7c143b7"].text, expected["title_3d4299f4-15a0-439e-b506-5e9ad7c143b7"], "menuItemBfr");

	start();
});

asyncTest("update of the admin resource on syracuse side", 8, function testUpdtSyrFunc(_) {
	// !!! depends of previous test for APLSTD table !!!
	var entity = db.getEntity(_, "APLSTD");
	var rec;
	// check french
	rec = db.fetchInstance(_, entity, {
		sdataWhere: "LANCHP eq " + adminChapter + " and LAN eq 'FRA' and LANNUM eq 1"
	});
	ok(rec != null, "record created");
	// check english
	rec = db.fetchInstance(_, entity, {
		sdataWhere: "LANCHP eq " + adminChapter + " and LAN eq 'ENG' and LANNUM eq 1"
	});
	ok(rec != null, "record created");
	var msg = rec.LANMES(_);
	var expected = sampleJson["$localization"]["en-us"];
	strictEqual(msg, expected["title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2"], "before update");
	// modify a message
	sampleJson["$localization"]["en-us"]["title_73df3cab-42b9-4dbf-b04b-00f177ceb1d2"] = "menuItemAAA";
	var inputFiler = new StubFiler();
	inputFiler.writeFile("stub_file", JSON.stringify(sampleJson), "utf8", _);
	// extract
	var opt = {};
	opt.exportFile = "stub_file";
	opt.dir = "./";
	opt.inputFiler = inputFiler;
	opt.indexdir = "./";
	opt.indexFiler = indexFiler;
	opt.endpoint = adminEp;
	opt.longMessagesStrategy = "truncate";
	opt.extractAllLanguages = true;
	//
	translation.extractAdminResources(_, opt);

	rec = db.fetchInstance(_, entity, {
		sdataWhere: "LANCHP eq " + adminChapter + " and LAN eq 'ENG' and LANNUM eq 1"
	});
	ok(rec != null, "record created");
	var msg = rec.LANMES(_);
	strictEqual(msg, "menuItemAAA", "after update");
	// simulate message conflicts
	sampleJson['$localization']['en-us']["title_3d4299f4-15a0-439e-b506-5e9ad7c143b7"] = "menuItemBD";
	inputFiler.writeFile("stub_file", JSON.stringify(sampleJson), "utf8", _);
	rec = db.fetchInstance(_, entity, {
		sdataWhere: "LANCHP eq " + adminChapter + " and LAN eq 'ENG' and LANNUM eq 2"
	});
	rec.LANMES(_, "menuItemBF");
	rec.save(_);
	// check if rec is saved
	rec = db.fetchInstance(_, entity, {
		sdataWhere: "LANCHP eq " + adminChapter + " and LAN eq 'ENG' and LANNUM eq 2"
	});
	strictEqual(rec.LANMES(_), "menuItemBF", "text modified in database");
	// extract
	var opt = {};
	opt.exportFile = "stub_file";
	opt.dir = "./";
	opt.inputFiler = inputFiler;
	opt.indexdir = "./";
	opt.indexFiler = indexFiler;
	opt.endpoint = adminEp;
	opt.$diagnoses = [];
	opt.longMessagesStrategy = "truncate";
	opt.extractAllLanguages = true;
	//
	translation.extractAdminResources(_, opt);

	var diag = opt.$diagnoses;
	tracer && tracer("diag: " + sys.inspect(diag));
	strictEqual(diag[0].$severity, "warning", "conflict warning raised");
	strictEqual(diag[0].$message, 'conflict stub_file:title_3d4299f4-15a0-439e-b506-5e9ad7c143b7 : menuItemBF', "warning message");

	start();
});

function testUpdtX3Func(_) {
	var dataFiler = new StubFiler();
	dataFiler.writeFile("stub_file", JSON.stringify(sampleJson), "utf8", _);
	//
	var entity = db.getEntity(_, "APLSTD");
	var rec = db.fetchInstance(_, entity, {
		sdataWhere: "LANCHP eq " + adminChapter + " and LAN eq 'ENG' and LANNUM eq 3"
	});

	var expected = rec.LANMES(_) + " updated on X3 side";
	rec.LANMES(_, expected);
	rec.save(_);
	var diags = [];
	rec.getAllDiagnoses(_, diags);

	strictEqual(diags.length, 0, "successfully updated on X3 side");

	var expectedFr = "traduction française";
	//create the french translation

	var recFR = entity.createInstance(_, db);

	recFR.LANCHP(_, adminChapter);
	recFR.LANNUM(_, 3);
	recFR.LANMES(_, expectedFr);
	recFR.LAN(_, "FRA");
	recFR.save(_);
	rec.getAllDiagnoses(_, diags);
	strictEqual(diags.length, 0, "french translation successfully created on X3 side");

	var entityTablan = db.getEntity(_, "TABLAN");
	var eng = entityTablan.createInstance(_, db);
	eng.LAN(_, "ENG");
	eng.LANISO(_, "en-US");
	eng.save(_);

	eng.getAllDiagnoses(_, diags);
	strictEqual(diags.length, 0, "english language registered in TABLAN");

	var fr = entityTablan.createInstance(_, db);
	fr.LAN(_, "FRA");
	fr.LANISO(_, "fr-FR");
	fr.save(_);
	fr.getAllDiagnoses(_, diags);
	strictEqual(diags.length, 0, "french language registered in TABLAN");

	// inject
	var opt = {};
	opt.exportFile = "stub_file";
	opt.dir = "./";
	opt.dataFiler = dataFiler;
	opt.indexdir = "./";
	opt.indexFiler = indexFiler;
	opt.endpoint = adminEp;
	opt.$diagnoses = [];
	//
	translation.updateAdminResources(_, null, opt, null);
	//
	var input = dataFiler.readFile("stub_file", "utf8", _);
	var parsed = JSON.parse(input);
	//
	strictEqual(expected, parsed["$localization"]['en-us']["title_53a3cffa-33ab-4f57-86cd-bb576036c9fe"], "Syracuse resource updated: eng");
	strictEqual(expectedFr, parsed["$localization"]['fr-fr']["title_53a3cffa-33ab-4f57-86cd-bb576036c9fe"], "Syracuse resource created: fr");

	start();
}

asyncTest("update of the message in X3", 6, testUpdtX3Func);

function stopFunc(_) {
	doStop = true;
	start();
}

asyncTest("stop  tests", 0, stopFunc);