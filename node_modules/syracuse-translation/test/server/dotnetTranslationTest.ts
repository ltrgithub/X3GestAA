"use strict";
var fs = require('streamline-fs');
var fsp = require("path");
var sys = require("util");
var helpers = require('@sage/syracuse-core').helpers;
var uuid = helpers.uuid;
var globals = require('streamline-runtime').globals;
var types = require('@sage/syracuse-core').types;
var config = require('config'); // must be first
// syracuse                                                             // require
var dataModel = require("../../../../src/orm/dataModel");
var registry = require("../../../../src/sdata/sdataRegistry");
var mongodb = require('mongodb');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var jsonExport = require("syracuse-import/lib/jsonExport");
var jsonImport = require("syracuse-import/lib/jsonImport");
var locale = require('streamline-locale');
var translation = require("syracuse-translation/lib/translation");
var StubFiler = require("../fixtures/stubFiler").StubFiler;
//

var rootpath = fsp.dirname(process.cwd());
var tracer; // = console.log;

// force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;
helpers.pageFileStorage = false;

var testAdmin = require('@sage/syracuse-core').apis.get('test-admin');
var endPoint = testAdmin.modifyCollaborationEndpoint("mongodb_admin_test");

var port = (config.unit_test && config.unit_test.serverPort) || 3004;
var baseUrl = "http://localhost:" + port;
var contractUrl = "/sdata/syracuse/collaboration/mongodb_admin_test/";
var acceptLanguage = "fr,fr-fr";

var profileId;
var dotnetChapter = 10041;

var cookie = "";

function trace_update_dotnet(str) {
	var f = "C:\\trace\\trace_update_dotnet.log";
	var strn = str + "\n";
	var options = {
		flag: 'a+'
	};
	fs.appendFileSync(f, new Buffer(strn, 'utf8'), options);
}

function trace_dotnet_extract(str) {

	var f = "C:\\trace\\trace_dotnet_extract.log";
	var strn = str + "\n";
	var options = {
		flag: 'a+'
	};
	fs.appendFileSync(f, new Buffer(strn, 'utf8'), options);
}

function onlyInfo(diags) {
	return diags.every(function(diag) {
		return diag.$severity === "info";
	});
}

function _getModel() {
	return dataModel.make(
		registry.applications.syracuse.contracts.collaboration,
		"mongodb_admin_test");
}


import { assert } from 'chai';
Object.keys(assert).forEach(key => {
	if (key !== 'isNaN') global[key] = assert[key];
});

describe(module.id, () => {

	it('TRANSLATION UNIT TESTS DISABLED FOR NOW', function() {
		ok(true, "work in progress");
	});

	if (false) {
		it('init database', function(_) {

			var server = new mongodb.Server(
				endPoint.datasets.mongodb_admin_test.hostname,
				endPoint.datasets.mongodb_admin_test.port, {});
			//var db = testAdmin.newMongoDb(config.collaboration.dataset, server, {});
			var db = testAdmin.newMongoDb("mongodb_admin_test", server, {});
			db = db.open(_);
			db.dropDatabase(_);
			//
			ok(true, "mongodb initialized");

		});

		//start syracuse server
		it('initialize syracuse test server', function(_) {
			require('syracuse-main/lib/syracuse').startServers(_, port);
			ok(true, "server initialized");
		});

		var x3sId;
		var applicationId;
		var adminEp;
		var db;

		it('get database handle', function(_) {
			db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);

		});


		it('create administration endpoint: ', function(_) {
			adminEp = db.fetchInstance(_, db.getEntity(_, "endPoint"), {
				application: "syracuse",
				contract: "collaboration",
				dataset: "syracuse"
			});
			ok(adminEp != null, "Got old collaboration endpoint ok");
			adminEp.dataset(_, "mongodb_admin_test");
			adminEp.save(_);
			// check if api is ok
			adminEp = adminHelper.getCollaborationEndpoint(_);
			ok(adminEp != null, "Collaboration EP modified ok");

		});

		var sampleXML = "before" + "<data name=\"first key\">\n" + // 
			'<value>first ressource</value>\n' + //
			'</data>\n' + // 
			'<data name="$second key" xml:space="preserve">\n' + //
			'<value>second ressource</value>\n' + // 
			'</data>\n' + //
			'<data name="&gt;&gt;$third key" xml:space="preserve">\n' + //
			'<value>dotnet internal  ressource</value>\n' + // 
			'</data>' + //
			'<data name="forth key" type="System.Drawing.Size, System.Drawing">\n' + // 
			'<value>4</value>\n' + //
			'</data>\n' + //
			"after";

		var indexFiler;

		it('index construction', function(_) {
			var inputFiler = new StubFiler();
			inputFiler.writeFile("unitTest.resx", sampleXML, _);
			//
			var dpath = fsp.join(__dirname, "dotnet");
			//
			var opt = {};
			opt.exportFile = "unitTest.resx";
			opt.dir = "./";
			opt.inputFiler = inputFiler;
			opt.indexdir = "./";
			opt.indexFiler = indexFiler = new StubFiler();
			opt.$diagnoses = [];
			opt.endpoint = adminEp;
			//
			translation.extractDotnetResources(_, null, opt, null);
			// en checks
			var index = JSON.parse(opt.indexFiler.readFile("indexDotnet.json", "utf8", _));
			strictEqual(index.count, 2, "records counter");

			var abspath = fsp.join(opt.dir, "unitTest.resx");
			var relpath = fsp.relative(rootpath, abspath).replace(/\\/g, '\/');
			var obj = index[relpath];

			strictEqual(obj["first key"].text, "first ressource", "first key");
			strictEqual(obj["$second key"].text, "second ressource", "$second key");

		});

		function testUpdtSyrFunc(_) {
			var inputXml = "before" + '<data name="key3">\n' + // 
				'<value>third resource</value>\n' + //
				'</data>\n' + // 
				'<data name="key4" xml:space="preserve">\n' + //
				'<value>forth resource</value>\n' + // 
				'</data>\n' + //
				+
				"after";

			var inputFiler = new StubFiler();
			inputFiler.writeFile("unitTestExtraction.resx", inputXml, _);
			//
			var dpath = fsp.join(__dirname, "dotnet");
			//
			var entity = db.getEntity(_, "APLSTD");
			var count = db.count(_, entity, {
				sdataWhere: "LANCHP eq " + dotnetChapter + " and LAN eq 'ENG'"
			});
			//
			tracer && tracer("1st extraction");
			//
			var opt = {};
			opt.exportFile = "unitTestExtraction.resx";
			opt.dir = "./";
			opt.inputFiler = inputFiler;
			opt.indexdir = "./";
			opt.indexFiler = indexFiler; // reuse
			opt.$diagnoses = [];
			opt.endpoint = adminEp;
			//
			translation.extractDotnetResources(_, null, opt, null);
			//
			var msg;
			var res = db.fetchInstances(_, entity);

			tracer && tracer("RES: ");
			res.forEach_(_, function(_, r) {
				tracer && tracer("rec (226): " + JSON.stringify(r.serializeInstance(_), null, 2));
			});
			var rec = db.fetchInstance(_, entity, {
				sdataWhere: "LANCHP eq " + dotnetChapter + "  and LAN eq 'ENG' and LANNUM eq 3"
			});
			ok(rec != null, "third resource injected");
			msg = rec.LANMES(_);
			strictEqual(msg, "third resource", "third resource");
			var rec = db.fetchInstance(_, entity, {
				sdataWhere: "LANCHP eq " + dotnetChapter + " and LAN eq 'ENG' and LANNUM eq 4"
			});
			ok(rec != null, "forth resource injected");
			msg = rec.LANMES(_);
			strictEqual(msg, "forth resource", "forth resource");

			//
			translation.extractDotnetResources(_, null, opt, null);
			//

			var index = JSON.parse(opt.indexFiler.readFile("indexDotnet.json", "utf8", _));
			var abspath = fsp.join(opt.dir, "unitTestExtraction.resx");
			var relpath = fsp.relative(rootpath, abspath).replace(/\\/g, '\/');
			var obj = index[relpath];

			var inputXml = "before" + '<data name="key3">\n' + // 
				'<value>third resource changed</value>\n' + //
				'</data>\n' + // 
				'<data name="key4" xml:space="preserve">\n' + //
				'<value>forth resource+</value>\n' + // 
				'</data>\n' + //
				"after";

			inputFiler.writeFile("unitTestExtraction.resx", inputXml, _);
			//
			var rec4 = db.fetchInstance(_, entity, {
				sdataWhere: "LANCHP eq " + dotnetChapter + " and LAN eq 'ENG' and LANNUM eq 4"
			});
			ok(rec4 != null, "forth ressource retrieved");
			rec4.LANMES(_, "forth resource-");
			rec4.save(_);
			//
			var opt = {};
			opt.exportFile = "unitTestExtraction.resx";
			opt.dir = "./";
			opt.inputFiler = inputFiler;
			opt.indexdir = "./";
			opt.indexFiler = indexFiler;
			opt.$diagnoses = [];
			opt.endpoint = adminEp;
			//
			tracer && tracer("2nd extraction");
			translation.extractDotnetResources(_, null, opt, null);
			//
			var rec3 = db.fetchInstance(_, entity, {
				sdataWhere: "LANCHP eq " + dotnetChapter + " and LAN eq 'ENG' and LANNUM eq 3"
			});

			strictEqual(rec3.LANMES(_), "third resource changed", "third resource changed");
			var diag = opt.$diagnoses;
			tracer && tracer("diag[0].message: " + diag[0].message);
			strictEqual(diag[0].$severity, "warning", "conflict warning raised");
			strictEqual(diag[0].$message, 'conflict Syracuse/unitTestExtraction.resx:key4 : forth resource-', "warning message");

			//restore
			rec3.LANMES(_, "third resource");
			rec3.save(_);

		}

		function testUpdtX3Func(_) {
			/*	tracer && tracer("extraction before update");

	var inputFiler = new StubFiler();
	inputFiler.writeFile("unitTest.resx", sampleXML, _);
	//
	var opt = {};
	opt.exportFile = "unitTest.resx";
	opt.dir = "./";
	opt.inputFiler = inputFiler;
	opt.indexdir = "./";
	opt.indexFiler = indexFiler;
	opt.$diagnoses = [];
	opt.endpoint = adminEp;
	//
	translation.extractDotnetResources(_, null, opt, null);
	//
	var entityTablan = db.getEntity(_, "TABLAN");
	var eng = entityTablan.createInstance(_, db);
	eng.LAN(_, "ENG");
	eng.LANISO(_, "en-US");
	eng.save(_);

	var fr = entityTablan.createInstance(_, db);
	fr.LAN(_, "FRA");
	fr.LANISO(_, "fr-FR");
	fr.save(_);

	var entity = db.getEntity(_, "APLSTD");
	var rec = db.fetchInstance(_, entity, {
		sdataWhere: "LANCHP eq " + dotnetChapter + " and LAN eq 'ENG' and LANNUM eq 3"
	});
	if (rec) {
		var expected = rec.LANMES(_) + " updated on X3 side";
		rec.LANMES(_, expected);
		rec.save(_);
	}
	rec = db.fetchInstance(_, entity, {
		sdataWhere: "LANCHP eq " + dotnetChapter + " and LAN eq 'ENG' and LANNUM eq 3"
	});
	strictEqual(expected, rec.LANMES(_), " updated on X3 side");

	var expectedFr = "traduction fran�aise";
	//create the french translation

	var recFR = entity.createInstance(_, db);

	recFR.LANCHP(_, dotnetChapter);
	recFR.LANNUM(_, 3);
	recFR.LANMES(_, expectedFr);
	recFR.LAN(_, "FRA");
	recFR.save(_);

	recFR = db.fetchInstance(_, entity, {
		sdataWhere: "LANCHP eq " + dotnetChapter + " and LAN eq 'FRA' and LANNUM eq 3"
	});
	strictEqual(expectedFr, recFR.LANMES(_), "french translation created on X3 ");

	tracer && tracer("x3->Syracuse " + baseUrl);
	//
	opt.dataFiler = inputFiler;
	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! TODO !!!!!!!!!!!!!!!!!!!!!!!!!!!
	translation.updateDotnetResources(_, null, opt, null);
	//

	fpath = fsp.join(dpath, "unitTestExtraction.resx");
	var xml = fs.readFile(fpath, "utf8", _);
	var regex = /<data*\sname="([\s\S]*?)"([\s\S]*?)<value>([\s\S]*?)<\/value>([\s\S]*?)<\/data>/gm;
	var matches = {};
	var match;
	while (match = regex.exec(xml)) {
		var line = match[0];
		var key = match[1];
		var text = match[3];
		matches[key] = text;
		//xml.replace(text,text+" modification") ;
	}

	strictEqual(expected, matches["key3"], "Syracuse resource updated: eng");

	fpath = fsp.join(dpath, "unitTestExtraction.fr-fr.resx");
	xml = fs.readFile(fpath, "utf8", _);
	matches = {};

	while (match = regex.exec(xml)) {
		var line = match[0];
		var key = match[1];
		var text = match[3];
		matches[key] = text;
		//xml.replace(text,text+" modification") ;
	}
	strictEqual(expectedFr, matches["key3"], "Syracuse resource created: fr");
*/
		}


		function testLongMessage(_) {
			/*	tracer= trace_dotnet_extract ;
	
	cookie = getCookie(_);
	

	var inputXml = "before" + '<data name="long">\n' + // 
	'<value>This workbook is published on X3, it will be saved on X3. If You want to save a copy of it, please use "Save as" feature.'+// 
	'Do You want to proceed with Save?This workbook is published on X3, it will be saved on X3. If You want to save a copy of it, please use "Save as" feature.'+// 
	'Do You want to proceed with Save?'+//
	'</value>\n' + //
	'</data>\n' + // 
	"after";

	var testdir = "syracuse-translation/test/server";

	var dpath = fsp.join(__dirname, "dotnet");
	if (!fs.existsSync(dpath)) fs.mkdir(dpath, "0777", _);
	var fpath = fsp.join(dpath, "unitTestLongMsg.resx");
	fs.writeFile(fpath, inputXml, "utf8", _);

	var appli = adminHelper.getCollaborationApplication(_);
	var ep = adminHelper.getCollaborationEndpoint(_);

	var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_admin_test);
	var model = db.model;

	var entity = db.getEntity(_, "APLSTD");
	var count = db.count(_, entity, {
		sdataWhere: "LANCHP eq " + dotnetChapter + " and LAN eq 'ENG'"
	});


	var body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit", {
		endpoint: {
			$uuid: ep.$uuid,
			$key: ep.$key,
			description: ep.description
		},
		$actions: {
			fromSyracuseToX3Dotnet: {
				$isRequested: true,
				$parameters: {
					dir: testdir,
					indexdir: testdir
				}
			}
		}
	});


	var rec = db.fetchInstance(_, entity ,{sdataWhere: "LANCHP eq "+dotnetChapter+" and LAN eq 'ENG' and LANNUM eq 5"} );
	ok (rec!==null,"long message 1st part injected in X3") ;
	var expected="This workbook is published on X3, it will be saved on X3. If You want to save a copy of it, please use \"Save &>6" ;
	strictEqual(rec.LANMES(_),expected,"long message 1st part") ;
	var rec2 = db.fetchInstance(_, entity ,{sdataWhere: "LANCHP eq "+dotnetChapter+" and LAN eq 'ENG' and LANNUM eq 6"} );
	ok (rec2!==null,"long message 2nd part injected in X3") ;
	expected="as\" feature.Do You want to proceed with Save?This workbook is published on X3, it will be saved on X3. If You &>7" ;
	strictEqual(rec2.LANMES(_),expected,"long message 2nd part") ;
	var rec3 = db.fetchInstance(_, entity ,{sdataWhere: "LANCHP eq "+dotnetChapter+" and LAN eq 'ENG' and LANNUM eq 7"} );
	ok (rec3!==null,"long message 3rd part injected in X3") ;
	expected="want to save a copy of it, please use \"Save as\" feature.Do You want to proceed with Save?" ;
	strictEqual(rec3.LANMES(_),expected,"long message 3rd part") ;
	
	var modified2="as\" feature.Do You want to proceed with Save?This workbook is published on X3, ******** &>7" ;
	var modified3="it will be saved on X3. If You want to save a copy of it, please use \"Save as\" feature.Do You want to proceed with Save?" ;
	
	rec2.LANMES(_,modified2) ;
	rec2.save(_) ;
	rec3.LANMES(_,modified3) ;
	rec3.save(_) ;
	
	
	tracer && tracer("update dotnet resources") ;
	 body = post(_, cookie, "translationTools/$template/$workingCopies?representation=translationTool.$edit", {
		endpoint: {
			$uuid: ep.$uuid,
			$key: ep.$key,
			description: ep.description
		},
		$actions: {
			fromX3toSyracuseDotnet: {
				$isRequested: true,
				$parameters: {
					dir: testdir,
					indexdir: testdir
				}
			}
		}
	});

	
	expected = 'This workbook is published on X3, it will be saved on X3. If You want to save a copy of it, please use "Save as" feature.Do You want to proceed with Save?This workbook is published on X3, ******** it will be saved on X3. If You want to save a copy of it, please use "Save as" feature.Do You want to proceed with Save?';
	
		var regex = /<data*\sname="([\s\S]*?)"([\s\S]*?)<value>([\s\S]*?)<\/value>([\s\S]*?)<\/data>/gm;
		var xml = fs.readFile(fpath, "utf8", _);
		var matches = {};
		var match ;
		while (match = regex.exec(xml)) {
			var line = match[0];
			var key = match[1];
			var text = match[3];
			matches[key] = text;
		}
	
		strictEqual(matches.long,expected,"update on X3 side") ;
		
	
	
	
	var indexpath = fsp.join(__dirname, "../../../", testdir, "indexDotnet.json");
	fs.unlink(indexpath, _);

	deleteFolderRecursive(_, dpath);
	*/
		}

		it('update of the message in syracuse', testUpdtSyrFunc);
		it('update of the message in X3', testUpdtX3Func);
		it('long message', testLongMessage);
	}
});