"use strict";
var fs = require('fs');
var fsp = require("path");
var sys = require("util");
var helpers = require("syracuse-core/lib/helpers");
var flows = require("streamline/lib/util/flows");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var resourceHelpers = require("syracuse-core/lib/resource/util");
var locale = require("syracuse-core/lib/locale");
var httpHelper = require("syracuse-sdata/lib/httpHelper");
var uuid = helpers.uuid;
var streams = require('streamline/lib/streams/streams');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first

var acceptLanguage = "fr,fr-fr";

var tracer = console.log;
//var tracer = null;
config.session = config.session || {};
config.session.auth = "basic";

helpers.pageFileStorage = false;

var contractUrl;


var rootpath = fsp.dirname(process.cwd());

function _getLanguages(_) {
   // console.log("_getLanguages");

    var db = adminHelper.getCollaborationOrm(_);
    var localePrefs = db.fetchInstances(_, db.model.getEntity("localePreference"));
    var isoCodesStr="" ;
    localePrefs.forEach_(_, function (_, e,idx) {
       
          isoCodesStr+=" '" +e.code(_) ;
          if (idx<localePrefs.length-1) 
            isoCodesStr+="', " ;
          else 
            isoCodesStr+="' " ;
        // langiso[e.code(_)]=x3langs[e.code(_)] ;
    });
   // console.log("isoCodesStr: "+isoCodesStr) ;
    var isoCodes=localePrefs.map_(_, function (_, e) {
        return e.code(_) ;
  
        // langiso[e.code(_)]=x3langs[e.code(_)] ;
    });
   // console.log("ISO CODES: "+sys.inspect(isoCodes)) ;


    var bUrl = "http://localhost:8124";
    //var cntrUrl = "/sdata/syracuse/collaboration/syracuse/";
    var cntrUrl = "/sdata/x3/erp/SUPERV/";
    var cookie = getCookie(_);

    var x3langs = get(_, cookie, bUrl + cntrUrl + "TABLAN?representation=TABLAN.$query&where=LANISO in ("+ isoCodesStr+")");
    console.log("x3langs: " + sys.inspect(x3langs));

    
    //var contractUrl=ep.getBaseUrl(_);
    //console.log("****_getLanguages contractUrl******: "+contractUrl) ;
    //var db = ep.getOrm(_);
    //console.log("***ENDPOINT: "+sys.inspect(endPoint)) ;
    //var entity = db.getEntity(_, "ZZAPLSTD" , "$query");
    //console.log("****ENTITY TABLAN******: "+sys.inspect(entity)) ;
    /*var langs = db.fetchInstances(_, entity);
    var x3langs={} ;
    langs.forEach_(_, function(_, e) {
      x3langs[e.LAN(_)]=e.LANISO(_) ;  
    }) ;

    console.log("X3LANGS: "+sys.inspect(x3langs) ) ;*/

    var langiso = {};
    x3langs.$resources.forEach_(_, function (_, e) {
      // console.log("lan: "+e.LAN+' iso code: '+e.LANISO) ;
        langiso[e.LAN]=e.LANISO.toLowerCase() ;

        /* if (langiso[e.LAN] ==="en-us" )
            langiso[e.LAN]="en" ;*/
    });
    //console.log("langiso: " + sys.inspect(langiso));
    return langiso;
}



var langFname = {
    "ENG": "-en.json",
    "FRA": "-fr.json"
};

function getCookie(_, login, pass) {

    var response = new streams.httpRequest({
        url: "http://localhost:8124/syracuse-main/html/main.html",
        user: login || "guest",
        password: pass || "guest"
    }).end().response(_);

    response.readAll(_);

    return response.headers["set-cookie"];
}

function get(_, cookie, url, statusCode, facet) {
   // console.log("GET: " + url);
   // console.log("cookie: " + sys.inspect(cookie));

    var type = facet || "generic.$details";
    var response = streams.httpRequest({
        method: "get",
        url: (url && url.indexOf("http") == 0) ? url : contractUrl //
        + url,
        headers: {
            cookie: cookie,
            "Accept-Language": acceptLanguage,
            accept: "application/json;vnd.sage=syracuse"
        }
    }).end().response(_);
  var resp = response.readAll(_);
    //console.log(JSON.stringify(resp)) ;
    return JSON.parse(resp);
}

function post(_, headers, url, data, statusCode, adminUrl) {

    var header = {
        host: headers.host,
        accept: "application/json",
        "content-type": "application/json",
        cookie: headers.cookie,
        authorization: headers.authorization,
        connection: headers.connection
    }
    //console.log("Header" + JSON.stringify(header, null, 2));

   // console.log("contractUrl: " + url);

    var response = streams.httpRequest({
        method: "post",
        url: (url && url.indexOf("http") == 0) ? url : contractUrl //
        + url,
        headers: header
    }).end(JSON.stringify(data)).response(_);

    var responsetext = response.readAll(_);

    var resp = JSON.parse(responsetext); 
//    console.log("PP: " +JSON.stringify(resp,null,2)); 
    return resp;
}

function put(_, headers, url, data, statusCode) {
   // console.log("PUT: " + url);
    var header = {
        host: headers.host,
        accept: "application/json",
        cookie: headers.cookie,
        authorization: headers.authorization,
        connection: headers.connection
    }
    var response = streams.httpRequest({
        method: "put",
        url: (url && url.indexOf("http") == 0) ? url : contractUrl + url,
        headers: header

    }).end(JSON.stringify(data)).response(_);
    var responseText = response.readAll(_);
    var resp = JSON.parse(responseText);
    //console.log("PUT: " + JSON.stringify(resp));
    return resp;
}


function _findKeyMessage(_, coll, searchProp, searchVal) {
    console.log("looking for: " + searchProp + ' =' + searchVal);
    var id = -1;
    coll.forEach_(_, function (_, item) {
        //console.log("item["+searchProp+"]: "+item[searchProp](_));
        if (item[searchProp](_) == searchVal) {
            //console.log(" ITEM: "+sys.inspect(item)) ;
            if (!item.LANNUM(_))
                console.log("Missing value for LANNUM");
            id = item.LANNUM(_);
        }
    });
    return id;
}

function _findMessage(_, coll, searchProp, searchVal) {
    var msg = null;
   // console.log("_findMessage: " + searchVal);
    coll.forEach_(_, function (_, item) {
      //console.log("**ITEM: "+sys.inspect(item)) ;
        if (!item[searchProp](_)) {
           // console.log("_findMessage searchProp " + searchProp + " is undefined");
           // console.log("ITEM: " + sys.inspect(item._data));
            return null;
        }

        //console.log("ITEM.lannum: "+ sys.inspect(item.lannum(_))) ;
        if (item[searchProp](_) == searchVal) {
            msg = item.LANMES(_);
        }

    });

    return msg;
}

function _findItem(_, coll, searchProp, searchVal) {
    var it = null;

    coll.forEach_(_, function (_, item) {
        if (item[searchProp](_) == searchVal) {
            it = item;
        }
    });

    return it
}

function ckeckDiagnoses(obj) {
    //tracer.trace(util.inspect(obj));

    if (obj && obj.$diagnoses) {
        for (var i in obj.$diagnoses) {
            if (obj.$diagnoses[i] != null) {
                if (obj.$diagnoses[i].severity === "error") {
                    throw new Error(obj.$diagnoses[i].severity + ": " + util.inspect(obj.$diagnoses[i].message));
                } else {
                    tracer && tracer(obj.$diagnoses[i].severity + ": " + util.inspect(obj.$diagnoses[i].message));
                }
            }
        }
    }
    if (obj && obj.$properties) {
        Object.keys(obj.$properties).forEach(function (elt) {
            if (obj.$properties[elt] && obj.$properties[elt].$diagnoses != null && obj.$properties[elt].$diagnoses.length !== 0) {
                obj.$properties[elt].$diagnoses.forEach(function (diag) {
                    if (diag.severity === "error") {
                        throw new Error(diag.severity + " in element: " + elt + " : " + diag.message);
                    } else {
                        tracer && tracer(diag.severity + " in element: " + elt + " : " + diag.message);
                    }
                });
            }
        });
    }
    if (obj && obj.$actions) {
        Object.keys(obj.$actions).forEach(function (elt) {
            if (obj.$actions[elt] && obj.$actions[elt].$diagnoses != null && obj.$actions[elt].$diagnoses.length !== 0) {
                obj.$actions[elt].$diagnoses.forEach(function (diag) {
                    if (diag.severity === "error") {
                        throw new Error(diag.severity + " in element: " + elt + " : " + diag.message);
                    } else {
                        tracer && tracer(diag.severity + " in element: " + elt + " : " + diag.message);
                    }
                });
            }
        });
    }

}


function _createEntry(_, contractUrl,headers,chapter, id, message,ut) {
        //tracer && tracer("_createEntry chapter:" + chapter + " id:" + id + ' text:' + message + "contractUrl: " + contractUrl);
        
 var data = {
            $uuid :uuid.generate() ,
            LANCHP: chapter ,
            LANNUM: id, 
            LAN: 'ENG',
            LANMES: message,
            $actions: {
                $save: {
                    $isRequested: true
                }
            }
        };
        console.log("_createEntry data: "+JSON.stringify(data,null,2)) ;
        // console.log("_createEntry ut: "+sys.inspect(ut)) ;
        if (ut) 
            var body =post(_, headers, contractUrl + "/ZZAPLSTDs?representation=ZZAPLSTD.$edit" , data);
        else
             var body =post(_, headers, contractUrl + "/APLSTD?representation=APLSTD.$edit" , data);
         //if (id===1){
            //console.log("_createEntry data: "+JSON.stringify(data,null,2)) ;
            //console.log("****_createEntry***post: "+sys.inspect(body));
        //}
        // console.log("****_createEntry***post: "+sys.inspect(body.$properties.LAN));
         
        //console.log("HEADERS: "+sys.inspect(self.context.request.headers));
        /*var trackingId = uuid.generate();
        //body = post(_, self.context.request.headers, contractUrl+"/ZZAPLSTD/$template/$workingCopies?representation=ZZAPLSTD.$edit&trackingId="+trackingId, {});
        var data = {
            lanchp: chapter ,
            LANNUM: id, //index[dirkey][key].id,
            LAN: 'ENG',
            LANMES: message,
            $actions: {
                $save: {
                    $isRequested: true
                }
            }
        };
        var body = post(_, headers, contractUrl + "/ZZAPLSTDs/$template/$workingCopies?representation=ZZAPLSTD.$edit&trackingId=" + trackingId, {});
          //console.log("RESULT post: " + JSON.stringify(body, null, 2));

        data.$key = body.$uuid;
        data.$uuid = body.$uuid;
        data.$etag = body.$etag;

       // body = post(_, self.context.request.headers, contractUrl + "/ZZAPLSTD?representation=ZZAPLSTD.$edit", data);
        
        //var putBody = put(_, self.context.request.headers, (body.$url).replace('{$baseUrl}', contractUrl), data);
        var putBody = put(_,headers, contractUrl+"/$workingCopies('"+ trackingId+"')?representation=ZZAPLSTD.$edit", data);

        //console.log("RESULT: " + JSON.stringify(putBody, null, 2));
        */
    }



function _updateEntry(_, endPoint,key, text, chapter ,lannum) {
    tracer && tracer ("_updateEntry " + lannum+ ' new value: '+text);
    var db = endPoint.getOrm(_);
    var entity = db.getEntity(_, "APLSTD", "$query");
    var msg = db.fetchInstance(_, entity, {
        sdataWhere: "LANCHP eq "+chapter+"and LAN eq 'ENG' and LANNUM eq " + lannum
    });
    tracer && tracer("old value: "+msg.LANMES(_)) ;
    msg.LANMES(_, text);
    msg.save(_);
    //ckeckDiagnoses(result) ;
}



exports.deleteAll = function (_, instance, options, context) {
    //console.log("DELETING!!!!!!!!!!!!!!") ;
    contractUrl = instance.endpoint(_).getBaseUrl(_);
    var endPoint = instance.endpoint(_);
    var index;
    options = options || {};
    var burl = (options.baseurl) ? options.baseurl : "http://localhost:8124";
    contractUrl = burl + contractUrl;
    console.log("URL: " + contractUrl);

    var db = endPoint.getOrm(_);
    var entity = db.getEntity(_, "APLSTD", "$query");
    var x3Records = db.fetchInstances(_, entity, {
        sdataWhere: "lanchp eq 10032  and LANNUM ne 0"
    }); //and LAN eq 'ENG'

    console.log("x3Records: " + x3Records.length);
    x3Records.forEach_(_, function (_, rec) {
        rec.deleteSelf(_);
    });

}



exports.extractResources = function (_, instance, options, context) {
    var self = this;
    self.context = context;


    
    
        function extract(_, file) {

            function _checkEntry(_, key, message) {
                var relpath = fsp.relative(rootpath, fpath);
                //var idxkey=fsp.join(relpath,key).replace(/\\/g,'\/') ;
                var dirkey = relpath.replace(/\\/g, '\/');
                var seg = index[dirkey];
                if (!seg)
                    seg = index[dirkey] = {};
                if (!seg[key]) //add to the index
                    seg[key] = {
                        id: index.count + 1,
                        text: message
                };
                index.count++;

                //tracer && tracer("index["+dirkey+"]["+key+"]="+index[dirkey][key]) ;
                var x = index[dirkey];
                var x3message = _findMessage(_, x3Records, "LANNUM", x[key].id);

                if (x3message) {
                    //tracer && tracer("x3message " + x3message)
                    
                    if (parsed[key] !== index[dirkey][key].text) {
                        tracer && tracer("modifyed in Syracuse" + index[dirkey] + ' ' + index[dirkey][key]);
                        if (x3message !== index[dirkey][key].text) {
                            tracer && tracer(" update conflict for " + dirkey + ":" + key);
                            instance.$addDiagnose("warning", locale.format(module, "updateConflict", dirkey + ":" + key, parsed[key], x3message));
                        } else {
                          index[dirkey][key].text=parsed[key] ;
                          _updateEntry(_, endPoint ,key, parsed[key], 10031, index[dirkey][key].id);
                        }
                    }
                    
                } else {
                    tracer && tracer("inject message " + dirkey + ":" + key);
                    //console.log("unitTestFlg: "+unitTestFlg) ;
                    try{
                    _createEntry(_, contractUrl,self.context.request.headers,10031 ,index[dirkey][key].id, message,unitTestFlg);
                    } 
                    catch(ex){
                        console.log("exception in createEntry: "+ex.stack) ;
                       // console.log("index: "+JSON.stringify(index,null,2)) ;
                        var fd = fs.open(indexpath, "w","0666", _);
                        fs.writeFile(indexpath, JSON.stringify(index), "utf8", _);
                        fs.close(fd, _);
                    }

                }
            }

            var pos = file.indexOf("-en.json");
            if (pos != -1) {
                var name = file.substring(0, pos);
                var fpath = fsp.join(dir, "resources", file);
               // console.log("fpath: " + fpath);
                var input = fs.readFile(fpath, "utf8", _);
                var parsed = JSON.parse(input);
                //console.log("PARSED: " + JSON.stringify(parsed,null,2));
                flows.eachKey(_, parsed, _checkEntry);
            }
        };

        function walk(_, file) {
            var path = fsp.join(dir, file); // dir + '\\' + file;
            //console.log("PATH "+path) ;
            var stat = fs.stat(path, _);

            if (stat.isDirectory()) {
                if (file === "resources") {

                    var dircontent = fs.readdir(path, _);
                    //console.log("call extract " + sys.inspect(dircontent));
                    dircontent.forEach_(_, extract);
                } else {
                    var dircontent = fs.readdir(path, _);
                    var temp = dir;
                    dir = path;
                    dircontent.forEach_(_, walk);
                    dir = temp;
                }
            }
        }

        tracer && tracer("extract texts");
        contractUrl = instance.endpoint(_).getBaseUrl(_);
        var endPoint = instance.endpoint(_);
        var index;
        options = options || {};
        var burl = (options.baseurl) ? options.baseurl : "http://localhost:8124";
        contractUrl = burl + contractUrl;
        //tracer && tracer("url: " + contractUrl);
        var unitTestFlg=options.unitTestFlg ;

        var db = endPoint.getOrm(_);
        var entity = db.getEntity(_, "APLSTD", "$query");
        var x3Records = db.fetchInstances(_, entity, {
            sdataWhere: "lanchp eq 10031 and LAN eq 'ENG' and LANNUM ne 0"
        });

        var dir;
        var indexdir;
        if (options.dir)
            dir = fsp.join(__dirname, "../../", options.dir);
        else
            dir = fsp.join(__dirname, "../../", "");
       

        if (options.indexdir)
            indexdir = fsp.join(__dirname, "../../", options.indexdir);
        else
            indexdir = fsp.join(__dirname, "../lib");
        //tracer && tracer("INDEXDIR: " + indexdir);

        var indexpath = fsp.join(indexdir, "/index.json");
        //tracer && tracer("indexpath: " + indexpath);
        var exists = fs.existsSync(indexpath);
        var data="" ;
        if (exists) {
            var fd = fs.open(indexpath, "r","0666", _);
            data = fs.readFile(indexpath, "utf8", _);
            fs.close(fd, _);
        } 
        if (data == "") {
            index = {
                count: 0
            };
            tracer && tracer("data is empty ");
        } else
            index = JSON.parse(data);

        var dircontent = fs.readdir(dir, _);
        dircontent.forEach_(_, walk);
        fd = fs.open(indexpath, "w+", "0666", _);
        fs.writeFile(indexpath, JSON.stringify(index), "utf8", _);
        fs.close(fd, _);
    }


    exports.updateResources = function (_, instance, options, context) {
        tracer && tracer("update resources");
        var self = this;
        self.context = context;
        options = options || {};
        var burl = (options.baseurl) ? options.baseurl : "http://localhost:8124";
        var contractUrl = instance.endpoint(_).getBaseUrl(_);

        contractUrl = burl + contractUrl;
        tracer && tracer("url: " + contractUrl);

        var endPoint = instance.endpoint(_);
        var db = endPoint.getOrm(_);

        langFname=_getLanguages(_) ;
        tracer && tracer("languages: "+JSON.stringify(langFname)) ;
        var index;


        var entity = db.getEntity(_, "APLSTD", "$query");

        var x3Records = [];
        var cursor = db.createCursor(_, entity, {
            sdataWhere: "LANCHP eq 10031 and LANNUM ne 0"
        });
        var inst;
        while (inst = cursor.next(_)) {
            if (!inst.LANNUM(_))
                tracer && tracer("ERROR: incorrect record,lannum is missing");


            if (!x3Records[inst.LANNUM(_)])
                var rec = x3Records[inst.LANNUM(_)] = {};
            rec[inst.LAN(_)] = inst.LANMES(_);
        };

        //console.log("X3RECORDS: " + sys.inspect(x3Records));
        var dir;
        var indexdir;
        if (options.dir)
            dir = fsp.join(__dirname, "../../", options.dir);
        else
            dir = fsp.join(__dirname, "../../", "");
        

        if (options.indexdir)
            indexdir = fsp.join(__dirname, "../../", options.indexdir);
        else
            indexdir = fsp.join(__dirname, "../lib");
       

        var indexpath = fsp.join(indexdir, "/index.json");
        tracer && tracer("indexpath: " + indexpath);

        var fd = fs.open(indexpath, "a+",  "0666",_);
        var data = fs.readFile(indexpath, "utf8", _);

        fs.close(fd, _);

        if (data == "") {
            index = {
                count: 0
            };
            tracer && tracer("data is empty");
        } else
            index = JSON.parse(data);



        flows.eachKey(_, index, function (_, k) {

            function loadLocalData(_, rec, dataBuffers) {
                //console.log("B dataBuffers" + sys.inspect(dataBuffers));
                flows.eachKey(_, rec, function (_, lang, txt) {

                    var fd = fileHandlers[lang];
                    if (!fd) {
                        var file ;
                        var exists ;
                        var data ;
                      /* if (langiso[e.LAN] ==="en-us" )
            langiso[e.LAN]="en" ;*/  
                        //if (lang==='ENG')
                        file = fsp.join(rootpath, dirname, base +"-"+langFname[lang]+".json");
                        //console.log("FILE: "+file) ;
                       
                        //try{
                        exists = fs.existsSync(file);
                        if (exists) {
                             filePaths[lang] = file;
                            fd = fileHandlers[lang] = fs.open(file, "r", "0666", _);
                            data = fs.readFile(file, "utf8", _);
                            //fs.truncateSync(file) ;
                            dataBuffers[lang] = JSON.parse(data);
                        } else {

                            var parts=langFname[lang].split('-');
                            file = fsp.join(rootpath, dirname, base +"-"+parts[0]+".json");
                            exists = fs.existsSync(file);
                             if (exists) {
                                 fd = fileHandlers[lang] = fs.open(file, "r", "0666", _);
                                data = fs.readFile(file, "utf8", _);
                                dataBuffers[lang] = JSON.parse(data);
                             }
                             else if (lang == "ENG") {
                                tracer && tracer("resources file deleted or moved: " + file);
                                instance.$addDiagnose("warning", locale.format(module, "missingFile", "file {0} is present is indexed for translation, but deleted or moved. Please update the index manually!", file));
                                return;
                            }
                            else
                                dataBuffers[lang] = {};
                        }
                    }
                });
                //console.log("E dataBuffers" + JSON.stringify(dataBuffers, null, 2));
            }


            function saveData(_, rec, dataBuffers, fileHandlers) {
                
                flows.eachKey(_, filePaths, function (_, lang, file) {
                    var fd = fileHandlers[lang];
                    //console.log("lang: "+lang) ;
                    if (fd)
                        fs.close(fd, _);

                    fd = fileHandlers[lang] = fs.open(file, "w+", "0666", _);

                    if (fd) {
                        fs.writeFile(file, JSON.stringify(dataBuffers[lang]), "utf8", _);
                        fs.close(fd, _);
                    } else {
                        tracer && tracer("Error open file " + file);
                    }
                });
            }

            var base = fsp.basename(k, "-en.json").replace(/\//g, fsp.sep);
            var dirname = fsp.dirname(k).replace(/\//g, fsp.sep);
            var fileHandlers = {};
            var filePaths = {};
            var dataBuffers = {};
            //console.log("index["+k+"]="+sys.inspect(index[k])) ;
            if (k === "count")
                return;
            flows.eachKey(_, index[k], function (_, key, el) {

                //console.log("KEY: "+key+ " id: "+el.id) ;
                //console.log("EL: "+sys.inspect(el)) ;

                var rec = x3Records[el.id]
                //console.log("RECORD: "+ sys.inspect(rec) ) ;
                if (rec) {

                    loadLocalData(_, rec, dataBuffers);
                   // console.log("REC: " + sys.inspect(rec));
                    flows.eachKey(_, langFname, function (_, lang, ext) {
                        //var data = dataBuffers[lang];

                        if (rec[lang]) {
                           // console.log("lang: " + lang);
                           // console.log("rec[lang]: " + sys.inspect(rec[lang]));


                            if (lang != 'ENG')
                                dataBuffers[lang][key] = rec[lang];
                            else if (rec[lang] !== index[k][key].text) {
                                tracer && tracer("modifyed in X3" + index[k] + ' ' + index[k][key]);

                                if (dataBuffers[lang][key] !== index[k][key].text)
                                //tracer && tracer("modifyed in Syracuse too" + index[k]+' '+index[k][key]);
                                {
                                    tracer && tracer(" update conflict for " + k + ":" + key);
                                    //console.log("INST: "+sys.inspect(instance));

                                    instance.$addDiagnose("warning", locale.format(module, "updateConflict", k + ":" + key, dataBuffers[lang][key], rec[lang]));

                                    var diag = [];

                                    instance.getAllDiagnoses(_, diag);

                                    //console.log("********DIAGNOSES: "+sys.inspect(diag)) ;


                                } else
                                    dataBuffers[lang][key] = rec[lang];
                            }
                        }
                    });
                    //tracer && tracer("data buffers: " + sys.inspect(dataBuffers));
                }
            });
            saveData(_, rec, dataBuffers, fileHandlers, filePaths);
        });
    }

    exports.extractAdminResources = function (_, instance, options, context) {
        function _extract(_,fname) {
            
            var fpath=fsp.join(path, fname);
            tracer && tracer("_extract path: "+path) ;
            var fd = fs.open(fpath, "a+","0666", _);
            var contentStr = fs.readFile(fpath, "utf8", _);
            fs.close(fd, _);
            var jsonContent = JSON.parse(contentStr);
             //console.log("jsonContent: "+JSON.stringify(jsonContent,null,2)) ;
            var localization=jsonContent["$localization"] ;
            if (localization)
              var localizationRef=localization['en-us'] ;
            if (!localizationRef){
              instance.$addDiagnose('error',locale.format(module, "noLocalizationRef",resourcesPath));
              return ;
            }

            var unitTestFlg=options.unitTestFlg ;

            //console.log("localization de reférence: "+JSON.stringify(localizationRef,null,2)) ;
            if (!index[fname])
                index[fname]={} ;
            flows.eachKey(_, localizationRef, function (_, key, val) {
              if (!index[fname][key]){
                index[fname][key]={} ;
                index[fname][key].text= val ;
                index[fname][key].id=index.count+1 ;
                index.count++ ;
              }
              //console.log("**fff*INDEX: "+JSON.stringify(index)) ;
               var x3message = _findMessage(_, x3Records, "LANNUM", index[fname][key].id);
                    if (x3message) {
                        //console.log("x3message " + x3message)
                       
                       // console.log("_checkEntry message " + x3message);
                       // console.log("localizationRef[key] :" + localizationRef[key]);
                       // console.log("index["+fname+"]["+key+"].text :"+index[fname][key].text) ;
                        if (localizationRef[key] !== index[fname][key].text) {
                            tracer && tracer("modifyed in Syracuse " + index[fname][key].text + ' ' + localizationRef[key]);
                            if (x3message !== index[fname][key].text) {
                                tracer && tracer(" update conflict for " +  key);
                                instance.$addDiagnose("warning", locale.format(module, "updateConflict",  key, localizationRef[key], x3message));
                            } else{
                              tracer && tracer("update entry") ;
                              index[fname][key].text=localizationRef[key] ;
                                _updateEntry(_, endPoint,key, localizationRef[key], 10032, index[fname][key].id);
                          }
                        }
                       } else {
                        
                        tracer && tracer("inject message "  + key);

                         _createEntry(_, contractUrl,self.context.request.headers, 10032 ,index[fname][key].id, val,unitTestFlg);
                    }
        });
    }



    var self = this;
    self.context = context;

    var endPoint = instance.endpoint(_);
    var db = endPoint.getOrm(_);

    var contractUrl = instance.endpoint(_).getBaseUrl(_);
        
        var index;
        options = options || {};
        var burl = (options.baseurl) ? options.baseurl : "http://localhost:8124";
        contractUrl = burl + contractUrl;
        //console.log("URL: " + contractUrl);


      var entity = db.getEntity(_, "APLSTD", "$query");
      var x3Records = db.fetchInstances(_, entity, {
            sdataWhere: "LANCHP eq 10032 and LAN eq 'ENG' and LANNUM ne 0"
        });
       


    tracer && tracer("extract admin resources: ") ;
    //console.log("X3RECORDS: " + sys.inspect(x3Records));
        var dir;
        var indexdir;
        if (options.dir)
            dir = options.dir ;
        else
            dir = fsp.join(__dirname, "../../", "");
        //console.log("DIR: " + dir);

        if (options.indexdir)
            indexdir = fsp.join(__dirname, "../../", options.indexdir);
        else
            indexdir = fsp.join(__dirname, "../lib");
        //console.log("INDEXDIR: " + indexdir);

        var indexpath = fsp.join(indexdir, "indexAdmin.json");
        tracer && tracer("indexpath: " + indexpath);

        var fd = fs.open(indexpath, "a+", "0666", _);
        var data = fs.readFile(indexpath, "utf8", _);

        fs.close(fd, _);

        if (data == "") {
            index = {
                count: 0
            };
            tracer && tracer("data is empty ");
        } else
            index = JSON.parse(data);

        if (options.exportFile){
            var path = dir;

            _extract(_,options.exportFile);
        }
        else{
            var path = fsp.join(__dirname, "../../../import");
            var stat = fs.stat(path, _);
                //console.log("DOSSIER IMPORT extract path: "+path) ;
                if (stat.isDirectory()) {
                        var dircontent = fs.readdir(path, _);
                        //console.log("call extract " + sys.inspect(dircontent));
                        dircontent.forEach_(_, _extract);

                }
            }
        fd = fs.open(indexpath, "w","0666", _);
        //console.log("write index to indexpath: "+indexpath) ;
        fs.writeFile(indexpath, JSON.stringify(index), "utf8", _);
        fs.close(fd, _);   
}


exports.updateAdminResources = function (_, instance, options, context) {

        function _update(_,fname) {

            console.log("_update fname: "+fname) ;
            var fpath=fsp.join(path, fname);
            console.log("fpath: "+fpath) ;
            var fd = fs.open(fpath, "a+", "0666", _);
            var contentStr = fs.readFile(fpath, "utf8", _);
           
            fs.close(fd, _);
        var jsonContent = JSON.parse(contentStr);
        var localization=jsonContent["$localization"] ;

            langFname=_getLanguages(_) ;
            console.log("LANGS: "+sys.inspect(langFname)) ;
        
            flows.eachKey(_, index[fname], function (_, locCode, el) {
                   
              if (locCode==='count')
                return ;
                var rec = x3Records[el.id] ;
                    if (rec) {   
                        flows.eachKey(_, langFname, function (_, lang, isolang) { 
                           
                            if (rec[lang]) {
                               if (!localization[isolang])
                                  localization[isolang]={} ;
                                localization[isolang][locCode] = rec[lang] ;
                      }
                          });
                }
        });
          fs.writeFile(fpath, JSON.stringify(jsonContent,null,2), "utf8", _);
}


      tracer && tracer("update Admin resources");
        var self = this;
        self.context = context;
        options = options || {};
        var burl = (options.baseurl) ? options.baseurl : "http://localhost:8124";
        var contractUrl = instance.endpoint(_).getBaseUrl(_);

        contractUrl = burl + contractUrl;
        tracer && tracer("url: " + contractUrl);

        var endPoint = instance.endpoint(_);
        var db = endPoint.getOrm(_);
         var entity = db.getEntity(_, "APLSTD", "$query");

         var x3Records = [];
        var cursor = db.createCursor(_, entity, {
            sdataWhere: "LANCHP eq 10032  and LANNUM ne 0"
        });
         
        var inst;
        while (inst = cursor.next(_)) {
            if (!inst.LANNUM(_))
                tracer && tracer("ERROR: incorrect record,lannum is missing");
              
            tracer && tracer("x3 record "+inst.LANNUM(_) +'-'+inst.LAN(_) +'-'+ inst.LANMES(_)) ;
            if (!x3Records[inst.LANNUM(_)])
                var rec = x3Records[inst.LANNUM(_)] = {};
            rec[inst.LAN(_)] = inst.LANMES(_);
        };


        console.log("X3RECORDS: " + sys.inspect(x3Records));
        var dir;
        var indexdir;
        var index ;
        if (options.dir)
            dir = options.dir;
        else
            dir = fsp.join(__dirname, "../../", "");

        if (options.indexdir)
            indexdir = fsp.join(__dirname, "../../", options.indexdir);
        else
            indexdir = fsp.join(__dirname, "../lib");
        

        var indexpath = fsp.join(indexdir, "/indexAdmin.json");
        console.log("indexpath: " + indexpath);

        var fd = fs.open(indexpath, "a+", "0666", _);
          console.log("opened: "+sys.inspect(fd)) ;
        var data = fs.readFile(indexpath, "utf8", _);
        console.log("read: "+sys.inspect(data)) ;
        fs.close(fd, _);

        if (data == "") {
            index = {
                count: 0
            };
            tracer && tracer("data est vide");
        } else
            index = JSON.parse(data);



        if (options.exportFile){
            //var fname = fsp.join(dir, options.exportFile);
            console.log("exportFile: " + options.exportFile);
            var path = dir ;

            _update(_,options.exportFile);
        }
        else{
        
            var path = fsp.join(__dirname, "../../../import");
            //console.log("****DOSSIER IMPORT path: "+path) ;
            var stat = fs.stat(path, _);
        
                if (stat.isDirectory()) {
                        var dircontent = fs.readdir(path, _);
                        //console.log("call _update " + sys.inspect(dircontent));
                        dircontent.forEach_(_, _update);
         
                          }
                  }
        //var resourcesPath = fsp.join(dir, options.exportFile);
        //console.log("indexpath: " + indexpath);          
                  
    
  }