"use strict";
var fs = require('fs');
var fsp = require("path");
var sys = require("util");
var helpers = require("syracuse-core/lib/helpers");
var flows = require("streamline/lib/util/flows");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var resourceHelpers = require("syracuse-core/lib/resource/util");
var locale = require("syracuse-core/lib/locale");
var httpHelper = require("syracuse-sdata/lib/httpHelper");
var uuid = helpers.uuid;
var streams = require('streamline/lib/streams/streams');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first

var acceptLanguage = "fr,fr-fr";


function trace(str) {
    var f = "C:\\trace\\trace_client.log";
  var strn=str+"\n" ;
  var options = {
    flag: 'a+'
  };
    fs.appendFileSync(f, new Buffer(strn, 'utf8'), options);
  
} 

function trace_update(str) {
    var f = "C:\\trace\\trace_update.log";
  var strn=str+"\n" ;
  var options = {
    flag: 'a+'
  };
    fs.appendFileSync(f, new Buffer(strn, 'utf8'), options);
} 

function trace_update_admin(str) {
    var f = "C:\\trace\\trace_update_admin.log";
  var strn=str+"\n" ;
  var options = {
    flag: 'a+'
  };
    fs.appendFileSync(f, new Buffer(strn, 'utf8'), options);
} 
function trace_extract_admin(str) {
    var f = "C:\\trace\\trace_extract_admin.log";
  var strn=str+"\n" ;
  var options = {
    flag: 'a+'
  };
    fs.appendFileSync(f, new Buffer(strn, 'utf8'), options);
} 

function trace_dotnet_extract(str) {
    var f = "C:\\trace\\trace_dotnet_extract.log";
  var strn=str+"\n" ;
  var options = {
    flag: 'a+'
  };
    fs.appendFileSync(f, new Buffer(strn, 'utf8'), options);
} 

var tracer = null ;

//var tracer = console.log;
config.session = config.session || {};
config.session.auth = "basic";

helpers.pageFileStorage = false;




var rootpath = fsp.dirname(process.cwd());




/*var langFname = {
    "ENG": "-en.json",
    "FRA": "-fr.json"
};

function getCookie(_, login, pass) {

    var response = new streams.httpRequest({
        url: "http://localhost:8124/syracuse-main/html/main.html",
        user: login || "guest",
        password: pass || "guest"
    }).end().response(_);

    response.readAll(_);

    return response.headers["set-cookie"];
}

function get(_, cookie, url, statusCode, facet) {
    // console.log("GET: " + url);
    // console.log("cookie: " + sys.inspect(cookie));

    var type = facet || "generic.$details";
    var response = streams.httpRequest({
        method: "get",
        url: (url && url.indexOf("http") == 0) ? url : contractUrl //
        + url,
        headers: {
            cookie: cookie,
            "Accept-Language": acceptLanguage,
            accept: "application/json;vnd.sage=syracuse"
        }
    }).end().response(_);
    var resp = response.readAll(_);
    //console.log(JSON.stringify(resp)) ;
    return JSON.parse(resp);
}*/




function _findKeyMessage(_, coll, searchProp, searchVal) {
    //console.log("looking for: " + searchProp + ' =' + searchVal);
    var id = -1;
    coll.forEach_(_, function (_, item) {
        //console.log("item["+searchProp+"]: "+item[searchProp](_));
        if (item[searchProp](_) == searchVal) {
            //console.log(" ITEM: "+sys.inspect(item)) ;
            if (!item.LANNUM(_))
                console.log("Missing value for LANNUM");
            id = item.LANNUM(_);
        }
    });
    return id;
}

function _findMessage(_, coll, searchProp, searchVal) {
    var msg = null;
    // console.log("_findMessage: " + searchVal);
    coll.forEach_(_, function (_, item) {
        //console.log("**ITEM: "+sys.inspect(item)) ;
        if (!item[searchProp](_)) {
            // console.log("_findMessage searchProp " + searchProp + " is undefined");
            // console.log("ITEM: " + sys.inspect(item._data));
            return null;
        }

        //console.log("ITEM.lannum: "+ sys.inspect(item.lannum(_))) ;
        if (item[searchProp](_) == searchVal) {
            msg = item.LANMES(_);
        }

    });

    return msg;
}

function _findItem(_, coll, searchProp, searchVal) {
    var it = null;

    coll.forEach_(_, function (_, item) {
        if (item[searchProp](_) == searchVal) {
            it = item;
        }
    });

    return it
}






//provisoire
exports.deleteAll = function (_, instance, options, context) {
    //console.log("DELETING!!!!!!!!!!!!!!") ;
    console.log("*******Delete instance: "+JSON.stringify(instance.serializeInstance(_),null,2)) ;
  
    
    var endPoint =  instance.endpoint(_); //  instance.getProductionEndpoint(_, instance);
    var index;
    options = options || {};
    
    var db = endPoint.getOrm(_);
    var entity = db.getEntity(_, "APLSTD", "$query");
    var x3Records = db.fetchInstances(_, entity, {
        sdataWhere: "lanchp eq 10032  and LANNUM ne 0 and LANNUM gt 81"
    }); //and LAN eq 'ENG'

    console.log("x3Records: " + x3Records.length);
    x3Records.forEach_(_, function (_, rec) {
        rec.deleteSelf(_);
    });

}






function _getLanguages(_,instance) {
    tracer && tracer("_getLanguages");
    var db = adminHelper.getCollaborationOrm(_);
    var localePrefs = db.fetchInstances(_, db.model.getEntity("localePreference"));
    var isoCodesStr = "";
    localePrefs.forEach_(_, function (_, e, idx) {
        isoCodesStr += " '" + e.code(_);
        if (idx < localePrefs.length - 1)
            isoCodesStr += "', ";
        else
            isoCodesStr += "' ";
    });
   
    var isoCodes = localePrefs.map_(_, function (_, e) {
        return e.code(_);
    });
     tracer && tracer("ISO CODES: "+sys.inspect(isoCodes)) ;

    var entity=db.getEntity(_, 'TABLAN', "$query");
    var where = "LANISO in  (" ;
    isoCodes.forEach_(_, function(_ ,code,idx){
        if( idx===0)
            where+='"'+code+'"';
        else {
            where+=', ' ;
            where+='"'+code+'"' ;
        }

        }) ;
 where+=")";

    tracer && tracer("WHERE: "+where) ;

     var dbX3 = instance.endpoint(_).getOrm(_) ;
    var langs = dbX3.fetchInstances(_, entity, {sdataWhere : where}) ; 
    var x3langs={} ;
    langs.forEach_(_, function(_, e) {
        tracer && tracer(e.LAN(_)+'  : ' + e.LANISO(_)) ;
            x3langs[e.LAN(_)]=e.LANISO(_).toLowerCase() ;  
    }) ;

     tracer && tracer("X3LANGS: "+sys.inspect(x3langs) ) ;

    
    return x3langs ;
}


function _hasErrors(_, inst) {
        return inst.getAllDiagnoses(_).some(function (d) {
            return d.severity === "error";
        });
    }

function _createEntry(_, endpoint,  chapter, id, message, ut) {
    

    tracer && tracer("_createEntry chapter:" + chapter + " id:" + id + ' text:' + message );
    try {
        var db = endpoint.getOrm(_);
        var entity = db.getEntity(_, "APLSTD", "$edit");

        var msg = entity.createInstance(_, db);
        msg.LANCHP(_, chapter);
        msg.LANNUM(_, id);
        msg.LAN(_, "ENG");
        msg.LANMES(_, message);
        var diags = [];
        msg.save(_);

        msg.getAllDiagnoses(_, diags);
        if (_hasErrors(_, msg)) {
            tracer && tracer("id: "+id) ;
            tracer && tracer("diagnose after save : " + sys.inspect(diags));
            return false;
        }
         tracer && tracer("success") ;
       

       
       
    } catch (e) {
        tracer && tracer(e.message ? e.message : e)
    }
     return true;
}



function _updateEntry(_, endPoint, key, text, chapter, lannum) {
    tracer && tracer("_updateEntry " + lannum + ' new value: ' + text);
    var db = endPoint.getOrm(_);
   
    var  entity = db.getEntity(_, "APLSTD", "$query");
    var msg = db.fetchInstance(_, entity, {
        sdataWhere: "LANCHP eq " + chapter + "and LAN eq 'ENG' and LANNUM eq " + lannum
    });
    tracer && tracer("old value: " + msg.LANMES(_));
    msg.LANMES(_, text);
    msg.save(_);
    var diags=[] ;
    msg.getAllDiagnoses(_, diags);
        if (_hasErrors(_, msg)) {
            tracer && tracer("id: "+lannum) ;
            tracer && tracer("updateEntry: diagnose after save : " + sys.inspect(diags));
           // return false;
        }
        else
         tracer && tracer("success") ;
    //ckeckDiagnoses(result) ;
}


/**************************TRANSLATION OF TEXTS IN JSON FILES IN THE RESSOURCE FOLDERS********************/

//Syracuse->X3
exports.extractResources = function (_, instance, options, context) {
    var self = this;
    self.context = context;
    //tracer=trace ;
    tracer && tracer("parameters: "+sys.inspect(options)) ;

    function extract(_, file) {

        function _checkEntry(_, key, message) {
            var relpath = fsp.relative(rootpath, fpath);
            var dirkey = relpath.replace(/\\/g, '\/');
            var success = false;
            var seg = index[dirkey];

            
            if (index[dirkey] && index[dirkey][key]) {
                tracer && tracer("index["+dirkey+"]["+key+"]="+index[dirkey][key]) ;

                var x3message = _findMessage(_, x3Records, "LANNUM", index[dirkey][key].id);
                if (x3message) {
                    //tracer && tracer("x3message " + x3message)
                    if (parsed[key] !== seg[key].text) {
                        tracer && tracer("modifyed in Syracuse" + index[dirkey] + ' ' + index[dirkey][key]);
                        if (x3message !== index[dirkey][key].text) {
                            tracer && tracer(" update conflict for " + dirkey + ":" + key);
                            instance.$addDiagnose("warning", locale.format(module, "updateConflict", dirkey + ":" + key, parsed[key], x3message));
                        } else {
                            index[dirkey][key].text = parsed[key];
                            _updateEntry(_, endPoint, key, parsed[key], 10031, seg[key].id);
                        }
                    }
                } else {
                     tracer && tracer("inject message " + dirkey + ":" + key);
                    
                    try {            
                        success = _createEntry(_, instance.endpoint(_),  10031, index[dirkey][key].id, message, unitTestFlg);
                    } catch (ex) {
                        console.log(" exception in createEntry: " + ex.stack);
                        // console.log("index: "+JSON.stringify(index,null,2)) ;
                        var fd = fs.open(indexpath, "w", "0666", _);
                        fs.writeFile(indexpath, JSON.stringify(index, null, "\t"), "utf8", _);
                        fs.close(fd, _);
                    }
                }

            } else {

                if (!(typeof message=="string" )){
                    instance.$addDiagnose('error', locale.format(module, "incorrectType", dirkey ,key));
                   
                     tracer && tracer("Value is not a string ; Christie should fix the format") ;
                     tracer && tracer(sys.inspect(message)) ;
                    return ;
                }
                if (message.length>123 ){
                    tracer && tracer("Message too long") ;
                     instance.$addDiagnose('error', locale.format(module, "msgTooLong", dirkey ,key, message));
                    return;
                }

                // tracer && tracer("inject message " + dirkey + ":" + key);
               
                try {
                    var id = index.count + 1;
                    success = _createEntry(_, instance.endpoint(_),  10031, id, message, unitTestFlg);
                } catch (ex) {
                    tracer &&  tracer(_,"exception in createEntry: " + ex.stack);
                }
                if (success){
                    if (!index[dirkey] )
                        index[dirkey] = {};

                    if (!index[dirkey][key]) { //add to the index
                        index[dirkey][key] = {
                            id: id ,
                            text: message
                        };
                        index.count++;
                    }
            }

            }
        };

        var pos = file.indexOf("-en.json");
        if (pos != -1) {
            var name = file.substring(0, pos);
            var fpath = fsp.join(dir, "resources", file);
            // console.log("fpath: " + fpath);
            var input = fs.readFile(fpath, "utf8", _);
            try {
            var parsed = JSON.parse(input);
        } catch(e){
            instance.addDiagnose (module,"incorrectJsonFormat", fpath ) ;
        }
            //console.log("PARSED: " + JSON.stringify(parsed,null,2));
            flows.eachKey(_, parsed, _checkEntry);
        }
    };

    function walk(_, file) {
        var path = fsp.join(dir, file); // dir + '\\' + file;
        //console.log("PATH "+path) ;
        var stat = fs.stat(path, _);

        if (stat.isDirectory()) {
            if (file === "resources") {

                var dircontent = fs.readdir(path, _);
                //console.log("call extract " + sys.inspect(dircontent));
                dircontent.forEach_(_, extract);
            } else {
                var dircontent = fs.readdir(path, _);
                var temp = dir;
                dir = path;
                dircontent.forEach_(_, walk);
                dir = temp;
            }
        }
    };

    tracer && tracer("extract texts");
   
    var endPoint = instance.endpoint(_);
    var index;
    options = options || {};
   
    var unitTestFlg = options.unitTestFlg;
    tracer && tracer("endPoint: "+JSON.stringify(endPoint.serializeInstance(_),null,2));
    var db = endPoint.getOrm(_);
   //tracer && tracer("db: "+sys.inspect(db));

    var entity ;
     entity = db.getEntity(_, "APLSTD", "$query");
 tracer && tracer("aaa ");
    var x3Records = db.fetchInstances(_, entity, {
        sdataWhere: "LANCHP eq 10031 and LAN eq 'ENG' and LANNUM ne 0"
    });
 tracer && tracer("x3Records "+sys.inspect(x3Records));
    var dir;
    var indexdir;
    if (options.dir)
        dir = fsp.join(__dirname, "../../", options.dir);
    else
        dir = fsp.join(__dirname, "../../", "");


    if (options.indexdir)
        indexdir = fsp.join(__dirname, "../../", options.indexdir);
    else
        indexdir = fsp.join(__dirname, "../lib");
    tracer && tracer("INDEXDIR: " + indexdir);

    var indexpath = fsp.join(indexdir, "/index.json");
    tracer && tracer("indexpath: " + indexpath);
    var exists = fs.existsSync(indexpath);
    var data = "";
    if (exists) {
        var fd = fs.open(indexpath, "r", "0666", _);
        data = fs.readFile(indexpath, "utf8", _);
        fs.close(fd, _);
    }
    if (data == "") {
        index = {
            count: 0
        };
        tracer && tracer("data is empty ");
    } else
        index = JSON.parse(data);

    var dircontent = fs.readdir(dir, _);
    dircontent.forEach_(_, walk);
    fd = fs.open(indexpath, "w+", "0666", _);

    fs.writeFile(indexpath, JSON.stringify(index, null, "\t"), "utf8", _);
    fs.close(fd, _);
}


//X3->Syracuse
exports.updateResources = function (_, instance, options, context) {
    //tracer=trace_update ;
    tracer && tracer("update resources");
    var self = this;
    self.context = context;
    options = options || {};
   // var burl = (options.baseurl) ? options.baseurl : "http://localhost:8124";
    //var contractUrl = instance.endpoint(_).getBaseUrl(_);

    //contractUrl = burl + contractUrl;
    //tracer && tracer("url: " + contractUrl);

    var endPoint = instance.endpoint(_);
    var db = endPoint.getOrm(_);

     tracer && tracer("endPoint name "+endPoint.dataset(_));

    var langFname = _getLanguages(_,instance);
    tracer && tracer("languages: " + JSON.stringify(langFname));
    var index;

    var entity = db.getEntity(_, "APLSTD", "$query");

    var x3Records = [];
    var cursor = db.createCursor(_, entity, {
        sdataWhere: "LANCHP eq 10031 and LANNUM ne 0"
    });
    var inst;
    while (inst = cursor.next(_)) {
        if (!inst.LANNUM(_))
            tracer && tracer("ERROR: incorrect record,lannum is missing");
            //TODO instance.addDiagnose() ;
        if (!x3Records[inst.LANNUM(_)])
            var rec = x3Records[inst.LANNUM(_)] = {};
        rec[inst.LAN(_)] = inst.LANMES(_);
        tracer && tracer("x3Records["+inst.LANNUM(_)+"]="+inst.LANMES(_)) ;
    };

    tracer && tracer("X3RECORDS: " + sys.inspect(x3Records));
    var dir;
    var indexdir;
    if (options.dir)
        dir = fsp.join(__dirname, "../../", options.dir);
    else
        dir = fsp.join(__dirname, "../../", "");

    if (options.indexdir)
        indexdir = fsp.join(__dirname, "../../", options.indexdir);
    else
        indexdir = fsp.join(__dirname, "../lib");

    var indexpath = fsp.join(indexdir, "/index.json");
    tracer && tracer("indexpath: " + indexpath);

    var fd = fs.open(indexpath, "a+", "0666", _);
    var data = fs.readFile(indexpath, "utf8", _);

    fs.close(fd, _);

    if (data == "") {
        index = {
            count: 0
        };
        tracer && tracer("data is empty");
    } else
        index = JSON.parse(data);


    flows.eachKey(_, index, function (_, k) {

        function loadLocalData(_, rec, dataBuffers) {
            console.log("B dataBuffers" + sys.inspect(dataBuffers));
            flows.eachKey(_, rec, function (_, lang, txt) {

                var fd = fileHandlers[lang];
                if (!fd) {
                    var file;
                    var exists;
                    var data;
                  
                    if (langFname[lang] ==="en-us")
                        file = fsp.join(rootpath, dirname, base + "-en"  + ".json");
                    else
                        file = fsp.join(rootpath, dirname, base + "-" + langFname[lang] + ".json");
                    //console.log("FILE: "+file) ;

                    exists = fs.existsSync(file);
                    if (exists) {
                        filePaths[lang] = file;
                        fd = fileHandlers[lang] = fs.open(file, "r", "0666", _);
                        data = fs.readFile(file, "utf8", _);
                        dataBuffers[lang] = JSON.parse(data);
                    } else {
                        //ChRISTIE : NE PAS SUPPRIMER AVANT DE VALIDER LA DOC
                        /*var parts = langFname[lang].split('-');
                        file = fsp.join(rootpath, dirname, base + "-" + parts[0] + ".json");
                        exists = fs.existsSync(file);
                        if (exists) {
                            fd = fileHandlers[lang] = fs.open(file, "r", "0666", _);
                            data = fs.readFile(file, "utf8", _);
                            dataBuffers[lang] = JSON.parse(data);
                        } else */if (lang == "ENG") {
                            tracer && tracer("resources file deleted or moved: " + file);
                            instance.$addDiagnose("warning", locale.format(module, "missingFile", file));
                            return;
                        } else
                            dataBuffers[lang] = {};
                    }
                }
            });
        }


        function saveData(_, rec, dataBuffers, filePaths, fileHandlers) {
            var fileHandlers={} ;
            tracer && tracer("save data filePaths: "+JSON.stringify(filePaths)) ;
            flows.eachKey(_, filePaths, function (_, lang, file) {
                var fd = fileHandlers[lang];
                if (fd)
                    fs.close(fd, _);

                fd = fileHandlers[lang] = fs.open(file, "w+", "0666", _);

                if (fd) {
                     tracer && tracer("write to file: "+file+ " content: "+JSON.stringify(dataBuffers[lang])) ;
                    fs.writeFile(file, JSON.stringify(dataBuffers[lang], null, "\t"), "utf8", _);
                    fs.close(fd, _);
                } else {
                    tracer && tracer("Error open file " + file);
                }
            });
        }

        var base = fsp.basename(k, "-en.json").replace(/\//g, fsp.sep);
        var dirname = fsp.dirname(k).replace(/\//g, fsp.sep);
        var fileHandlers = {};
        var filePaths = {};
        var dataBuffers = {};
        tracer && tracer("index["+k+"]="+JSON.stringify(index[k],null,2)) ;
        if (k === "count")
            return;
        flows.eachKey(_, index[k], function (_, key, el) {

            var rec = x3Records[el.id]
            if (rec) {
                loadLocalData(_, rec, dataBuffers);
                flows.eachKey(_, langFname, function (_, lang, ext) {
                    if (rec[lang]) {
                       tracer && tracer("lang: " + lang);
                        tracer && tracer("rec[lang]: " + sys.inspect(rec[lang]));
                        if (!filePaths[lang]){
                            var file ;
                            if (lang==='ENG')
                               file = fsp.join(rootpath, dirname, base + "-en" + ".json");
                            else
                                file = fsp.join(rootpath, dirname, base + "-" + langFname[lang] + ".json");
                    
                            filePaths[lang]=file ;
                            tracer && tracer ("filePaths["+lang+"]="+filePaths[lang]);
                            }
                        if (lang != 'ENG')
                            dataBuffers[lang][key] = rec[lang];
                        else if (rec[lang] !== index[k][key].text) {
                            tracer && tracer("modifyed in X3 " + k + ' ' + key+' old value: '+index[k][key].text + //
                            " new value: " + k + ' ' + key+' txt: '+rec[lang]);

                            if (dataBuffers[lang][key] !== index[k][key].text)
                            {
                                tracer && tracer(" update conflict for " + k + ":" + key);
                                instance.$addDiagnose("warning", locale.format(module, "updateConflict", k + ":" + key, dataBuffers[lang][key], rec[lang]));
                            } else{
                                tracer && tracer("update record lang: "+lang+ "key: "+key ) ;
                                dataBuffers[lang][key] = rec[lang];
                            }
                        }
                    }
                });
                tracer && tracer("data buffers: " + sys.inspect(dataBuffers));
            }
        });
        
        saveData(_, rec, dataBuffers,  filePaths,fileHandlers);
    });

/*if(!instance.$diagnoses || !instance.$diagnoses.some(function(d) {
                       return d.severity === "error"
    })) {
        options.$diagnoses && options.$diagnoses.push({
            severity: "success",
            message: locale.format(module, "updateCompleted", 3)
        });
    }
    else 
         options.$diagnoses && options.$diagnoses.push({
            severity: "success",
            message: locale.format(module, "updateCompleted", 0)
        });*/
}




/**************************TRANSLATION OF SYRACUSE ADMIN RESSOURCES********************/

//Syracuse->X3
exports.extractAdminResources = function (_, instance, options, context) {
   // tracer=trace_extract_admin ;
    function _extract(_, fpath,fname) {
        var success=false ;
        //var fpath = fsp.join(path, fname);
        tracer && tracer("_extract path: " + fpath);
        var fd = fs.open(fpath, "a+", "0666", _);
        var contentStr = fs.readFile(fpath, "utf8", _);
        fs.close(fd, _);
        var jsonContent = JSON.parse(contentStr);
        var localization = jsonContent["$localization"];
        if (localization)
            var localizationRef = localization['en-us'];
        if (!localizationRef) {
            instance.$addDiagnose('error', locale.format(module, "noLocalizationRef", fname));
            return;
        }

        var unitTestFlg = options.unitTestFlg;

        flows.eachKey(_, localizationRef, function (_, key, val) {
            if (index[fname] && index[fname][key]) {
                var x3message = _findMessage(_, x3Records, "LANNUM", index[fname][key].id);
                if (x3message) {
                    // console.log("_checkEntry message " + x3message);
                    // console.log("localizationRef[key] :" + localizationRef[key]);
                    // console.log("index["+fname+"]["+key+"].text :"+index[fname][key].text) ;
                    if (localizationRef[key] !== index[fname][key].text) {
                        tracer && tracer("modifyed in Syracuse " + index[fname][key].text + ' ' + localizationRef[key]);
                        if (x3message !== index[fname][key].text) {
                            tracer && tracer(" update conflict for " + key);
                            instance.$addDiagnose("warning", locale.format(module, "updateConflict", key, localizationRef[key], x3message));
                        } else {
                            tracer && tracer("update entry");
                            index[fname][key].text = localizationRef[key];
                            _updateEntry(_, endPoint, key, localizationRef[key], 10032, index[fname][key].id);
                        }
                    }
                } else {
                    tracer && tracer("inject message " + key);
                    _createEntry(_, instance.endpoint(_),  10032, index[fname][key].id, val, unitTestFlg);
                }
        }
        else{
          tracer && tracer("inject message " + key);
          var id = index.count + 1 ;
          success= _createEntry(_, instance.endpoint(_),  10032, id, val, unitTestFlg);
          if (!success)
            instance.$addDiagnose('error', locale.format(module, "createEntryfail", key,fname));
          if (!index[fname] && success) 
           index[fname] = {};
          if (!index[fname][key] && success)  {
                index[fname][key] = {};
                index[fname][key].text = val;
                index[fname][key].id = id;
                index.count++;
            }

        }

        });
    }


    var self = this;
    self.context = context;

    var endPoint = instance.endpoint(_);
    var db = endPoint.getOrm(_);

    var contractUrl = instance.endpoint(_).getBaseUrl(_);

    var index;
    options = options || {};
    var burl = (options.baseurl) ? options.baseurl : "http://localhost:8124";
    contractUrl = burl + contractUrl;
    //console.log("URL: " + contractUrl);


    var entity = db.getEntity(_, "APLSTD", "$query");
    var x3Records = db.fetchInstances(_, entity, {
        sdataWhere: "LANCHP eq 10032 and LAN eq 'ENG' and LANNUM ne 0"
    });



    tracer && tracer("extract admin resources: ");
    //console.log("X3RECORDS: " + sys.inspect(x3Records));
    var dir;
    var indexdir;
    if (options.dir)
        dir = options.dir;
    else
        dir = fsp.join(__dirname, "../../", "");
    //console.log("DIR: " + dir);

    if (options.indexdir)
        indexdir = fsp.join(__dirname, "../../", options.indexdir);
    else
        indexdir = fsp.join(__dirname, "../lib");
    //console.log("INDEXDIR: " + indexdir);

    var indexpath = fsp.join(indexdir, "indexAdmin.json");
    tracer && tracer("indexpath: " + indexpath);

    var fd = fs.open(indexpath, "a+", "0666", _);
    var data = fs.readFile(indexpath, "utf8", _);

    fs.close(fd, _);

    if (data == "") {
        index = {
            count: 0
        };
        tracer && tracer("data is empty ");
    } else
        index = JSON.parse(data);

    if (options.exportFile) {
        var path = dir;

        _extract(_, options.exportFile);
    } else {
        var path = fsp.join(__dirname, "../../../import");
        var stat = fs.stat(path, _);
        if (stat.isDirectory()) {
            var dircontent = fs.readdir(path, _);
            
            dircontent.forEach_(_, function(_,fnam) {
                _extract(_, fsp.join(path,fnam),fnam);

        });
    }
}
    fd = fs.open(indexpath, "w", "0666", _);
    fs.writeFile(indexpath, JSON.stringify(index, null, "\t"), "utf8", _);
    fs.close(fd, _);
}

//X3->Syracuse
exports.updateAdminResources = function (_, instance, options, context) {
    tracer=trace_update_admin ;
    function _update(_, fname) {

        
        var fpath = fsp.join(path, fname);
       tracer && tracer("-update fpath: " + fpath);
        var fd = fs.open(fpath, "a+", "0666", _);
        var contentStr = fs.readFile(fpath, "utf8", _);

        fs.close(fd, _);
        var jsonContent = JSON.parse(contentStr);
        var localization = jsonContent["$localization"];

        var langFname = _getLanguages(_,instance);
        tracer && tracer("LANGS: " + sys.inspect(langFname));

        flows.eachKey(_, index[fname], function (_, locCode, el) {

            if (locCode === 'count')
                return;
            var rec = x3Records[el.id];
            if (rec) {
                flows.eachKey(_, langFname, function (_, lang, isolang) {
                    if (rec[lang]) {
                        tracer && tracer ("update "+ localization[isolang][locCode]+" with "+rec[lang]) ;
                        if (!localization[isolang])
                            localization[isolang] = {};
                        localization[isolang][locCode] = rec[lang];
                    }
                });
            }
        });
        fs.writeFile(fpath, JSON.stringify(jsonContent, null, "\t"), "utf8", _);
    }


    tracer && tracer("update Admin resources");
    var self = this;
    self.context = context;
    options = options || {};
    //var burl = (options.baseurl) ? options.baseurl : "http://localhost:8124";
    //var contractUrl = instance.endpoint(_).getBaseUrl(_);

   // contractUrl = burl + contractUrl;
    //tracer && tracer("url: " + contractUrl);

    var endPoint = instance.endpoint(_);
    var db = endPoint.getOrm(_);
    var entity = db.getEntity(_, "APLSTD", "$query");

    var x3Records = [];
    var cursor = db.createCursor(_, entity, {
        sdataWhere: "LANCHP eq 10032  and LANNUM ne 0"
    });

    var inst;
    while (inst = cursor.next(_)) {
        if (!inst.LANNUM(_)){
            tracer && tracer("ERROR: incorrect record,lannum is missing");
            instance.$addDiagnose('error', locale.format(module, "incorrectRecord", inst.LANCHP(_), inst.LAN(_) ,inst.LANMES(_) ));
        }

       // tracer && tracer("x3 record " + inst.LANNUM(_) + '-' + inst.LAN(_) + '-' + inst.LANMES(_));
        if (!x3Records[inst.LANNUM(_)])
            var rec = x3Records[inst.LANNUM(_)] = {};
        rec[inst.LAN(_)] = inst.LANMES(_);
    };


    tracer && tracer("X3RECORDS: " + sys.inspect(x3Records));
    var exclude = ["syracuse-admin-demo.json" , "syracuse-sprint1-demo.json"] ;
    var dir;
    var indexdir;
    var index;
    if (options.dir)
        dir = options.dir;
    else
        dir = fsp.join(__dirname, "../../", "");

    if (options.indexdir)
        indexdir = fsp.join(__dirname, "../../", options.indexdir);
    else
        indexdir = fsp.join(__dirname, "../lib");


    var indexpath = fsp.join(indexdir, "/indexAdmin.json");
    tracer && tracer("indexpath: " + indexpath);

    var fd = fs.open(indexpath, "a+", "0666", _);
    
    var data = fs.readFile(indexpath, "utf8", _);
    //tracer && tracer("index file content: " + sys.inspect(data));
    fs.close(fd, _);

    if (data == "") {
        index = {
            count: 0
        };
        tracer && tracer("empty data ");
    } else
        index = JSON.parse(data);

    if (options.exportFile) {
        //var fname = fsp.join(dir, options.exportFile);
        //tracer && tracer("exportFile: " + options.exportFile);
        var path = dir;

        _update(_, options.exportFile);
    } else {

        var path = fsp.join(__dirname, "../../../import");
        //console.log("****DOSSIER IMPORT path: "+path) ;
        var stat = fs.stat(path, _);

        if (stat.isDirectory()) {
            var dircontent = fs.readdir(path, _);
            dircontent.filter(function(elt){
                if (exclude.indexOf(elt)==-1)
                    return true ;
                else 
                    return false ;
            }) ;
            dircontent.forEach_(_, _update);
        }
    }  
}


/**************************TRANSLATION OF DOTNET RESSOURCES ********************/


//Syracuse->X3
exports.extractDotnetResources = function (_, instance, options, context) {
   var self = this;
    self.context = context;
    tracer=trace_dotnet_extract ;
    tracer && tracer("parameters: "+sys.inspect(options)) ;

    function extract(_, file) {

        function _checkEntry(_, key, message) {
            var relpath = fsp.relative(rootpath, fpath);
            var dirkey = relpath.replace(/\\/g, '\/');
            var success = false;
            var seg = index[dirkey];

            
            if (index[dirkey] && index[dirkey][key]) {
                tracer && tracer("index["+dirkey+"]["+key+"]="+index[dirkey][key]) ;

                var x3message = _findMessage(_, x3Records, "LANNUM", index[dirkey][key].id);
                if (x3message) {
                    //tracer && tracer("x3message " + x3message)
                    if (parsed[key] !== seg[key].text) {
                        tracer && tracer("modifyed in Syracuse" + index[dirkey] + ' ' + index[dirkey][key]);
                        if (x3message !== index[dirkey][key].text) {
                            tracer && tracer(" update conflict for " + dirkey + ":" + key);
                            instance.$addDiagnose("warning", locale.format(module, "updateConflict", dirkey + ":" + key, parsed[key], x3message));
                        } else {
                            index[dirkey][key].text = parsed[key];
                            _updateEntry(_, endPoint, key, parsed[key], 10031, seg[key].id);
                        }
                    }
                } else {
                     tracer && tracer("inject message " + dirkey + ":" + key);
                    try {            
                        success = _createEntry(_, instance.endpoint(_),  10031, index[dirkey][key].id, message, unitTestFlg);
                    } catch (ex) {
                        console.log(" exception in createEntry: " + ex.stack);
                        // console.log("index: "+JSON.stringify(index,null,2)) ;
                        var fd = fs.open(indexpath, "w", "0666", _);
                        fs.writeFile(indexpath, JSON.stringify(index, null, "\t"), "utf8", _);
                        fs.close(fd, _);
                    }
                }

            } else {

                if (!(typeof message=="string" )){
                    instance.$addDiagnose('error', locale.format(module, "incorrectType", dirkey ,key));
                   
                     tracer && tracer("Value is not a string ; Christie should fix the format") ;
                     tracer && tracer(sys.inspect(message)) ;
                    return ;
                }
                if (message.length>123 ){
                    tracer && tracer("Message too long") ;
                     instance.$addDiagnose('error', locale.format(module, "msgTooLong", dirkey ,key, message));
                    return;
                }

                // tracer && tracer("inject message " + dirkey + ":" + key);
                //console.log("unitTestFlg: "+unitTestFlg) ;
                try {
                    var id = index.count + 1;
                    success = _createEntry(_, instance.endpoint(_),  10031, id, message, unitTestFlg);
                } catch (ex) {
                    tracer &&  tracer(_,"exception in createEntry: " + ex.stack);
                }
                if (success){
                    if (!index[dirkey] )
                        index[dirkey] = {};

                    if (!index[dirkey][key]) { //add to the index
                        index[dirkey][key] = {
                            id: id ,
                            text: message
                        };
                        index.count++;
                    }
            }

            }
        };

       
        if ( fsp.extname(file)!=".resx")
            return ;
            
               
                var basename=fsp.basename(file,".resx");
                var langext=fsp.extname(basename) ;
                if (langext!="")
                    return ;
            
            
            var fpath = fsp.join(dir,file);
             console.log("process file : " + fpath);
            var input = fs.readFile(fpath, "utf8", _);
            try {
            //var parsed = JSON.parse(input);
        } catch(e){
            //instance.addDiagnose (module,"incorrectJsonFormat", fpath ) ;
        }
            //console.log("PARSED: " + JSON.stringify(parsed,null,2));
            //flows.eachKey(_, parsed, _checkEntry);
        //}
    };

    function walk(_, file) {
        var path = fsp.join(dir, file); // dir + '\\' + file;
        //console.log("PATH "+path) ;
        var stat = fs.stat(path, _);

        if (stat.isDirectory()) {
                var dircontent = fs.readdir(path, _);
                var temp = dir;
                dir = path;
                dircontent.forEach_(_, walk);
                dir = temp;
        }
        else extract(_,file) ;
    };

    tracer && tracer("extract dotnet ressources ");
   
    var endPoint = instance.endpoint(_);
    var index;
    options = options || {};
   
    var unitTestFlg = options.unitTestFlg;
    tracer && tracer("endPoint: "+JSON.stringify(endPoint.serializeInstance(_),null,2));
    var db = endPoint.getOrm(_);
  
    var entity ;
     entity = db.getEntity(_, "APLSTD", "$query");
 tracer && tracer("aaa ");
    var x3Records = db.fetchInstances(_, entity, {
        sdataWhere: "LANCHP eq 10030 and LAN eq 'ENG' and LANNUM ne 0"
    });
 tracer && tracer("x3Records "+sys.inspect(x3Records));
    var dir;
    var indexdir;
    if (options.dir)
        dir = fsp.join(__dirname, "../../", options.dir);
    else
        dir = fsp.join(__dirname, "../../../dotnet");


    if (options.indexdir)
        indexdir = fsp.join(__dirname, "../../", options.indexdir);
    else
        indexdir = fsp.join(__dirname, "../lib");
    tracer && tracer("INDEXDIR: " + indexdir);

    var indexpath = fsp.join(indexdir, "/indexDotnet.json");
    tracer && tracer("indexpath: " + indexpath);
    var exists = fs.existsSync(indexpath);
    var data = "";
    if (exists) {
        var fd = fs.open(indexpath, "r", "0666", _);
        data = fs.readFile(indexpath, "utf8", _);
        fs.close(fd, _);
    }
    if (data == "") {
        index = {
            count: 0
        };
        tracer && tracer("data is empty ");
    } else
        index = JSON.parse(data);

    var dircontent = fs.readdir(dir, _);
    dircontent.forEach_(_, walk);
    fd = fs.open(indexpath, "w+", "0666", _);

    fs.writeFile(indexpath, JSON.stringify(index, null, "\t"), "utf8", _);
    fs.close(fd, _);
}

