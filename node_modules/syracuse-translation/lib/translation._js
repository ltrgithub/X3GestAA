var fs = require('fs');
var fsp = require("path");
var sys = require("util");
var helpers = require("syracuse-core/lib/helpers");
var flows = require("streamline/lib/util/flows");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var resourceHelpers = require("syracuse-core/lib/resource/util");
var locale = require("syracuse-core/lib/locale");
var httpHelper = require("syracuse-sdata/lib/httpHelper");
var uuid = helpers.uuid;
var streams = require('streamline/lib/streams/streams');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first


var tracer = console.log;
//var tracer = null;
config.session = config.session || {};
config.session.auth = "basic";

helpers.pageFileStorage = false;

var contractUrl;


var rootpath = fsp.dirname(process.cwd());


function post(_, headers, url, data, statusCode, adminUrl) {
    //console.log("Header"+JSON.stringify(headers,null,2));

    var header = {
        host: headers.host,
        accept: "application/json",
        cookie: headers.cookie,
        authorization: headers.authorization,
        connection: headers.connection
    }

    var response = streams.httpRequest({
        method: "post",
        url: (url && url.indexOf("http") == 0) ? url : contractUrl //
        + url,
        headers: header
    }).end(JSON.stringify(data)).response(_);
    var responsetext = response.readAll(_);
    var resp = JSON.parse(responsetext);
    return resp;

}

function put(_, headers, url, data, statusCode) {
    
    var header = {
        host: headers.host,
        accept: "application/json",
        cookie: headers.cookie,
        authorization: headers.authorization,
        connection: headers.connection
    }
    var response = streams.httpRequest({
        method: "put",
        url: (url && url.indexOf("http") == 0) ? url : contractUrl + url,
        headers: header
        
    }).end(JSON.stringify(data)).response(_);
    var responseText = response.readAll(_);
    var resp = JSON.parse(responseText);
      return resp;
}


function _findKeyMessage(_, coll, searchProp, searchVal) {
    console.log("looking for: " + searchProp + ' =' + searchVal);
    var id = -1;
    coll.forEach_(_, function (_, item) {
        //console.log("item["+searchProp+"]: "+item[searchProp](_));
        if (item[searchProp](_) == searchVal) {
            //console.log(" ITEM: "+sys.inspect(item)) ;
            if (!item.LANNUM(_))
                console.log("Missing value for LANNUM");
            id = item.LANNUM(_);
        }
    });
    return id;
}

function _findMessage(_, coll, searchProp, searchVal) {
    var msg = null;
    console.log("_findMessage: " + searchVal);
    coll.forEach_(_, function (_, item) {

        if (!item[searchProp](_)) {
            console.log("_findMessage searchProp " + searchProp + " is undefined");
            console.log("ITEM: "+ sys.inspect(item._data)) ;
            return null;
        }

        //console.log("ITEM.lannum: "+ sys.inspect(item.lannum(_))) ;
        if (item[searchProp](_) == searchVal) {
            msg = item.LANMES(_);
        }

    });

    return msg;
}

function _findItem(_, coll, searchProp, searchVal) {
    var it = null;

    coll.forEach_(_, function (_, item) {
        if (item[searchProp](_) == searchVal) {
            it = item;
        }
    });

    return it
}

function ckeckDiagnoses(obj) {
    //tracer.trace(util.inspect(obj));

    if (obj && obj.$diagnoses) {
        for (var i in obj.$diagnoses) {
            if (obj.$diagnoses[i] != null) {
                if (obj.$diagnoses[i].severity === "error") {
                    throw new Error(obj.$diagnoses[i].severity + ": " + util.inspect(obj.$diagnoses[i].message));
                } else {
                    tracer && tracer(obj.$diagnoses[i].severity + ": " + util.inspect(obj.$diagnoses[i].message));
                }
            }
        }
    }
    if (obj && obj.$properties) {
        Object.keys(obj.$properties).forEach(function (elt) {
            if (obj.$properties[elt] && obj.$properties[elt].$diagnoses != null && obj.$properties[elt].$diagnoses.length !== 0) {
                obj.$properties[elt].$diagnoses.forEach(function (diag) {
                    if (diag.severity === "error") {
                        throw new Error(diag.severity + " in element: " + elt + " : " + diag.message);
                    } else {
                        tracer && tracer(diag.severity + " in element: " + elt + " : " + diag.message);
                    }
                });
            }
        });
    }
    if (obj && obj.$actions) {
        Object.keys(obj.$actions).forEach(function (elt) {
            if (obj.$actions[elt] && obj.$actions[elt].$diagnoses != null && obj.$actions[elt].$diagnoses.length !== 0) {
                obj.$actions[elt].$diagnoses.forEach(function (diag) {
                    if (diag.severity === "error") {
                        throw new Error(diag.severity + " in element: " + elt + " : " + diag.message);
                    } else {
                        tracer && tracer(diag.severity + " in element: " + elt + " : " + diag.message);
                    }
                });
            }
        });
    }

}


exports.deleteAll = function (_, instance, options, context) {
    //console.log("DELETING!!!!!!!!!!!!!!") ;
    contractUrl = instance.endpoint(_).getBaseUrl(_);
    var endPoint = instance.endpoint(_);
    var index;
    options = options || {};
    var burl = (options.baseurl) ? options.baseurl : "http://localhost:8124";
    contractUrl = burl + contractUrl;
    console.log("URL: " + contractUrl);

    var db = endPoint.getOrm(_);
    var entity = db.getEntity(_, "ZZAPLSTD", "$query");
    var x3Records = db.fetchInstances(_, entity, {
        sdataWhere: "lanchp eq 10031 and LAN eq 'ENG' and LANNUM ne 0"
    });

    console.log("x3Records: " + x3Records.length);
    x3Records.forEach_(_, function (_, rec) {
        rec.deleteSelf(_);
    });

}


exports.extractResources = function (_, instance, options, context) {
    var self = this;
    self.context = context;


    function _updateEntry(_, key, text, lannum) {
        console.log("UPDATE ENTRY " + lannum);
        var db = endPoint.getOrm(_);
        var entity = db.getEntity(_, "ZZAPLSTD", "$query");
        var msg = db.fetchInstance(_, entity, {
            sdataWhere: "lanchp eq 10031 and LAN eq 'ENG' and LANNUM eq " + lannum
        });
        msg.LANMES(_, text);
        msg.save(_);
        //ckeckDiagnoses(result) ;
    }

    function _createEntry(_, dirkey, key, message) {
        tracer && tracer("_createEntry " + dirkey + ":" + key + ' ' + message + "contractUrl: " + contractUrl);
        console.log("_createEntry contractUrl: " + contractUrl);

        //console.log("HEADERS: "+sys.inspect(self.context.request.headers));
        var trackingId = uuid.generate();
        //body = post(_, self.context.request.headers, contractUrl+"/ZZAPLSTD/$template/$workingCopies?representation=ZZAPLSTD.$edit&trackingId="+trackingId, {});
        //body = post(_, self.context.request.headers, contractUrl+"/ZZAPLSTD/$workingCopies?representation=ZZAPLSTD.$edit&trackingId="+trackingId, {});
        var data={
            lanchp: 10031,
            LANNUM: index[dirkey][key].id,
            LAN: 'ENG',
            LANMES: message,
            $actions: {
                $save: {
                    $isRequested: true
                }
            }
        } ;

        var body = post(_, self.context.request.headers, contractUrl + "/ZZAPLSTDs/$template/$workingCopies?representation=ZZAPLSTD.$edit&trackingId=" + trackingId, {});
        data.$uuid=body.$uuid ;
        data.$key=body.$uuid ;
        data.$etag=body.$etag;
        var putBody = put(_, self.context.request.headers, contractUrl + "/$workingCopies('" + trackingId + "')?representation=ZZAPLSTD.$edit", data);

        console.log("RESULT: " + JSON.stringify(putBody, null, 2));

        /*      data= {};
      //data.$key = body.$uuid;
      //data.$uuid = body.$uuid;
      //data.$etag = body.$etag+1;

      data.lanchp=10031 ;
      data.lannum= index[key].id ; 
      data.lan='ENG' ;
      data.lanmes=message ;
      data.$actions = {
        $save : {
          $isRequested : true
        }
      };*/
        //body = post(_, self.context.request.headers, contractUrl+"/ZZAPLSTD?representation=ZZAPLSTD.$edit", data);

        //body = put(_, self.context.request.headers, contractUrl+"/ZZAPLSTD/$template/$workingCopies?representation=ZZAPLSTD.$edit&trackingId="+trackingId, data);


        //console.log("Body: "+JSON.stringify(body,null,2));
        //body = post(_, cookie, contractUrl+"/AUTILIS/$workingCopies?representation=AUTILIS.$edit&trackingId=" + uuid.generate(), {});
        //body = post(_, self.context.request.headers, contractUrl+"/$workingCopies('"+ uuid.generate()+"')?representation=ZZAPLSTD.$edit" , {});
        //console.log("AFTER POST : "+JSON.stringify(body)) ;
        //var urlforput=body.$url.replace("{$baseUrl}",body.$baseUrl) ;
        //bodyput = put(_,self.context.request.headers,urlforput, data);

        //bodyput = put(_,self.context.request.headers, contractUrl+"/$workingCopies('"+ body.$uuid+"')?representation=ZZAPLSTD.$edit", data);
        //bodyput = put(_,self.context.request.headers, contractUrl+"/$workingCopies?representation=ZZAPLSTD.$edit", data);
        //console.log("URL for PUT: "+body.$url) ;
        //bodyput = put(_,self.context.request.headers, body.$url.replace("{$baseUrl}",body.$baseUrl), data);
        //bodyput = post(_,self.context.request.headers, body.$url.replace("{$baseUrl}",body.$baseUrl), data);

        //console.log("Body after put: "+JSON.stringify(bodyput,null,2));

        //console.log("AFTER PUT : "+JSON.stringify(bodyput)) ;
        /*var data={lanchbp : 10031, //
                lannum : index[key].id ,//
                lan : 'ENG',
                lanmes : message
              }

    var db = endPoint.getOrm(_);
    var entity = db.getEntity(_, "ZZAPLSTD", "$query");
    //var entity = db.model.getEntity("ZZAPLSTD");
    var msg=entity.createInstance(_,db,data) ;
console.log("MSG: "+sys.inspect(msg)) ;
   
    var result=msg.save(_) ;
    ckeckDiagnoses(result) ;
console.log("MSG: "+sys.inspect(msg.getAllDiagnoses())) ;

    var x3Recordss=db.fetchInstances(_,entity,{sdataWhere: "lanchp eq 10031 and lan eq 'ENG'"});
 */
    }



    function extract(_, file) {

        function _checkEntry(_, key, message) {
            var relpath = fsp.relative(rootpath, fpath);
            //var idxkey=fsp.join(relpath,key).replace(/\\/g,'\/') ;
            var dirkey = relpath.replace(/\\/g, '\/');
            var seg = index[dirkey];
            if (!seg)
                seg = index[dirkey] = {};
            if (!seg[key]) //add to the index
                seg[key] = {
                    id: index.count + 1,
                    text: message
            };
            index.count++;

            //tracer && tracer("index["+dirkey+"]["+key+"]="+index[dirkey][key]) ;
            var x = index[dirkey];
            var x3message = _findMessage(_, x3Records, "LANNUM", x[key].id);

            if (x3message) {
                console.log("x3message " + x3message)
                console.log("found");
                console.log("_checkEntry message "+x3message) ;
                console.log("parsed[key] :"+parsed[key]) ;
                //console.log("index[idxkey].text :"+index[idxkey].text) ;
                if (parsed[key] !== index[dirkey][key].text) {
                    tracer && tracer("modifyed in Syracuse" + index[dirkey]+' '+index[dirkey][key]);
                    if (x3message !== index[dirkey][key].text) {
                        tracer && tracer(" update conflict for " + dirkey + ":" + key);
                        instance.$addDiagnose("warning", locale.format(module, "updateConflict", dirkey + ":" + key, parsed[key], x3message));
                    } else
                        _updateEntry(_, key, message, index[dirkey][key].id);
                }
                //else {console.log("message found , not modified")}
            } else {
                console.log("not found");
                console.log("inject message " + dirkey + ":" + key);
                _createEntry(_, dirkey, key, message);


            }
        }

        var pos = file.indexOf("-en.json");
        if (pos != -1) {
            var name = file.substring(0, pos);
            var fpath = fsp.join(dir, "resources", file);
            console.log("fpath: " + fpath);
            var input = fs.readFile(fpath, "utf8", _);
            var parsed = JSON.parse(input);
            console.log("PARSED: " + JSON.stringify(parsed));
            flows.eachKey(_, parsed, _checkEntry);
        }
    };

    function walk(_, file) {
        var path = fsp.join(dir, file); // dir + '\\' + file;
        //console.log("PATH "+path) ;
        var stat = fs.stat(path, _);

        if (stat.isDirectory()) {
            if (file === "resources") {

                var dircontent = fs.readdir(path, _);
                console.log("call extract " + sys.inspect(dircontent));
                dircontent.forEach_(_, extract);
            } else {
                var dircontent = fs.readdir(path, _);
                var temp = dir;
                dir = path;
                dircontent.forEach_(_, walk);
                dir = temp;
            }
        }
    }

    console.log("EXTRACTING!!!!!!!!!!!!!!"  );
    contractUrl = instance.endpoint(_).getBaseUrl(_);
    var endPoint = instance.endpoint(_);
    var index;
    options = options || {};
    var burl = (options.baseurl) ? options.baseurl : "http://localhost:8124";
    contractUrl = burl + contractUrl;
    console.log("URL: " + contractUrl);
    //cookie=getCookie(_) ;

    var db = endPoint.getOrm(_);
    //console.log("***ENDPOINT*** :"+sys.inspect(endPoint)) ;
    var entity = db.getEntity(_, "ZZAPLSTD", "$query");
    var x3Records = db.fetchInstances(_, entity, {
        sdataWhere: "lanchp eq 10031 and LAN eq 'ENG' and LANNUM ne 0"
    });
   
    //console.log("x3Records: " + x3Records.length);

    
    var dir;
    var indexdir;
    if (options.dir)
        dir = fsp.join(__dirname, "../../", options.dir);
    else
        dir = fsp.join(__dirname, "../../", "");
    tracer && tracer("DIR: " + dir);

    if (options.indexdir)
        indexdir = fsp.join(__dirname, "../../", options.indexdir);
    else
        indexdir = fsp.join(__dirname, "../lib");
    //tracer && tracer("INDEXDIR: " + indexdir);

    var indexpath = fsp.join(indexdir, "/index.json");
    tracer && tracer("indexpath: " + indexpath);
    var fd = fs.open(indexpath, "a+", 0666, _);
    var data = fs.readFile(indexpath, "utf8", _);

    fs.close(fd, _);

    if (data == "") {
        index = {
            count: 0
        };
        tracer && tracer("data est vide");
    } else
        index = JSON.parse(data);

    var dircontent = fs.readdir(dir, _);
    dircontent.forEach_(_, walk);
    fd = fs.open(indexpath, "w", 0666, _);
    fs.writeFile(indexpath, JSON.stringify(index), "utf8", _);
    fs.close(fd, _);
}


exports.updateResources = function (_, instance, options, context) {

    var self = this;
    self.context = context;
    //console.log("UPDATE RESOURCES");

    contractUrl = instance.endpoint(_).getBaseUrl(_);
    var endPoint = instance.endpoint(_);

    var index;
    options = options || {};
    var burl = (options.baseurl) ? options.baseurl : "http://localhost:8124";

    contractUrl = burl + contractUrl;
    console.log("URL: " + contractUrl);


    var db = endPoint.getOrm(_);
    var entity = db.getEntity(_, "ZZAPLSTD", "$query");

    var x3Records = [];
    var cursor = db.createCursor(_, entity, {
        sdataWhere: "lanchp eq 10031 and LAN eq 'ENG' and LANNUM ne 0"
    });
    var inst;
    while (inst = cursor.next(_)) {
        if (!inst.LANNUM(_))
            tracer && tracer("ERROR: incorrect record,lannum is missing");


        if (!x3Records[inst.LANNUM(_)])
            var rec = x3Records[inst.LANNUM(_)] = {};
        rec[inst.LAN(_)] = inst.LANMES(_);
    };

    //console.log("X3RECORDS: " + sys.inspect(x3Records));
    var dir;
    var indexdir;
    if (options.dir)
        dir = fsp.join(__dirname, "../../", options.dir);
    else
        dir = fsp.join(__dirname, "../../", "");
    console.log("DIR: " + dir);

    if (options.indexdir)
        indexdir = fsp.join(__dirname, "../../", options.indexdir);
    else
        indexdir = fsp.join(__dirname, "../lib");
    console.log("INDEXDIR: " + indexdir);

    var indexpath = fsp.join(indexdir, "/index.json");
    console.log("indexpath: " + indexpath);

    var fd = fs.open(indexpath, "a+", 0666, _);
    var data = fs.readFile(indexpath, "utf8", _);

    fs.close(fd, _);

    if (data == "") {
        index = {
            count: 0
        };
        tracer && tracer("data est vide");
    } else
        index = JSON.parse(data);

    var langFname = {
        "ENG": "-en.json",
        "FRA": "-fr.json"
    };

    flows.eachKey(_, index, function (_, k) {

        function getLocalData(_, rec, dataBuffers) {
            console.log("B dataBuffers" + sys.inspect(dataBuffers));
            flows.eachKey(_, rec, function (_, lang, txt) {
                //console.log("getLocalData X3TEXT: "+txt) ;
                var fd = fileHandlers[lang];
                if (!fd) {
                    var file = fsp.join(rootpath, dirname, base + langFname[lang]);
                    //console.log("FILE: "+file) ;
                    filePaths[lang] = file;
                    fd = fileHandlers[lang] = fs.open(file, "r", 0666, _);
                    if (!fd) {
                        tracer && tracer("Error open file " + file);
                        return;
                    }

                    var data = fs.readFile(file, "utf8", _);
                    //fs.truncateSync(file) ;
                    dataBuffers[lang] = JSON.parse(data);
                }
            });
            //console.log("E dataBuffers" + JSON.stringify(dataBuffers, null, 2));
        }


        function saveData(_, rec, dataBuffers, fileHandlers) {
            //console.log("saveData: dataBuffers" + sys.inspect(dataBuffers)) ;
            //console.log("saveData: fileHandlers" + sys.inspect(fileHandlers)) ;
            flows.eachKey(_, filePaths, function (_, lang, file) {
                var fd = fileHandlers[lang];
                //console.log("lang: "+lang) ;
                fs.close(fd, _);
                fd = fileHandlers[lang] = fs.open(file, "w+", 0666, _);

                if (fd) {
                    //console.log("to be written: "+JSON.stringify(dataBuffers[lang])) 
                    fs.writeFile(file, JSON.stringify(dataBuffers[lang]), "utf8", _);
                    fs.close(fd, _);
                }
            });
            console.log("save data end: ");
        }

        var base = fsp.basename(k, "-en.json").replace(/\//g, fsp.sep);
        var dirname = fsp.dirname(k).replace(/\//g, fsp.sep);
        var fileHandlers = {};
        var filePaths = {};
        var dataBuffers = {};
        //console.log("index["+k+"]="+sys.inspect(index[k])) ;
        if (k === "count")
            return;
        flows.eachKey(_, index[k], function (_, key, el) {

            //console.log("KEY: "+key+ " id: "+el.id) ;
            //console.log("EL: "+sys.inspect(el)) ;

            var rec = x3Records[el.id]
            //console.log("RECORD: "+ sys.inspect(rec) ) ;
            if (rec) {
                getLocalData(_, rec, dataBuffers);
                var data = dataBuffers["ENG"];

                data[key] = rec["ENG"];
                if (rec["FRA"]) {
                    data = dataBuffers["FRA"];
                    data[key] = rec["FRA"];
                }
            }
        });
        saveData(_, rec, dataBuffers, fileHandlers, filePaths);
    });
}