"use strict";
var config = require('syracuse-main/lib/nodeconfig').config;
// var tracer = require('syracuse-core').getTracer("translation.text");
var http = require("ez-streams").devices.http;
var STATUS_CODES = require('http').STATUS_CODES;
var baseUrl = (config.textsServer || {}).url;
var httpSession;
var acceptLanguage = "en,en-us,fr,fr-fr";

exports.$exported = true;

baseUrl = baseUrl || "http://localhost:8999";
if (baseUrl.charAt(baseUrl.length - 1) === "/") {
	baseUrl = baseUrl.substr(0, baseUrl.length - 1);
}

// =================================================================
// = ATEXTE functions
// =================================================================
exports.getText = function(_, num, lan) {
	var resp = _get(_, _apiPath("ATEXTE", [num, lan]));
	var result = (resp.body || [])[0];
	return _wrapResult(result.TEXTE, result ? resp.status : 404);
};

exports.createText = function(_, product, lan, text, comment) {
	var data = {
		"TEXTE": text,
		"COMMENT": comment,
		"LAN": lan,
		"product": product
	};
	var resp = _post(_, _apiPath("ATEXTE"), data);
	var result = (resp.body || [])[0];
	return _wrapResult(result.NUMERO, result ? resp.status : 404);
};

exports.updateText = function(_, num, lan, text, comment) {
	var data = {
		"TEXTE": text,
		"COMMENT": comment
	};
	var resp = _put(_, _apiPath("ATEXTE", [num, lan]), data);
	var result = (resp.body || [])[0];
	return _wrapResult(result.NUMERO, result ? resp.status : 404);
};

// =================================================================
// = APLSTD functions
// =================================================================
exports.getMessage = function(_, product, chp, num, lan) {
	var resp = _get(_, _apiPath("APLSTD", [product, chp, num, lan]));
	var result = (resp.body || [])[0];
	return _wrapResult(result.LANMES, result ? resp.status : 404);
};

exports.createMessage = function(_, product, chp, lan, text) {
	var data = {
		"LANMES": text,
		"LAN": lan
	};
	var resp = _post(_, _apiPath("APLSTD", [product, chp]), data);
	var result = (resp.body || [])[0];
	return _wrapResult(result.LANNUM, result ? resp.status : 404);
};

exports.updateMessage = function(_, product, chp, num, lan, text) {
	var data = {
		"LANMES": text
	};
	var resp = _put(_, _apiPath("APLSTD", [product, chp, num, lan]), data);
	var result = (resp.body || [])[0];
	return _wrapResult(result.LANNUM, result ? resp.status : 404);
};

// =================================================================
// = Search similar texts
// =================================================================
exports.search = function(_, collec, selector, projection) {
	try {
		var data = {
			query: {
				collection: collec,
				selector: selector,
				projection: projection
			}
		};
		// console.error("search query=" + JSON.stringify(data, null, 2));
		var resp = _post(_, _apiPath("search"), data);

		var result = (resp.body || []);
		// console.error("search result=" + JSON.stringify(result, null, 2));
		return _wrapResult(result, result ? resp.status : 404);
	} catch (e) {
		// console.error("search ERROR: " + e.message);
		return _wrapResult(e.message + "\n" + e.stack, 500);
	}
};

// example of 4GL call: func atxtsvc.search_similar("ATEXTE", "FRA", "sauvegarde")
exports.searchSimilar = function(_, collec, lan, text) {
	var texts = [];
	for (var i = text.length; i; --i) {
		texts.push("^" + text.substring(0, i));
	}
	var selText = {
		"TEXTE": {
			"$regex": '(' + texts.join('|') + ')',
			"$options": "i"
		}
	};
	var selector = lan && lan.length ? {
		"$and": [{
				"LAN": lan
			},
			selText
		]
	} : selText;

	var projection = {
		"NUMERO": 1,
		"TEXTE": 1,
		"COMMENT": 1,
		"LAN": 1,
	};
	return exports.search(_, collec, selector, projection);
};

function _apiPath(sub, segments) {
	segments = (segments || []).reverse();
	while (segments.length > 0 && !segments[0]) segments.shift();
	segments = segments.reverse().map(function(s) {
		return s || "-";
	});
	return ["/api", sub].concat(segments).join("/");
}

function _wrapResult(result, status, message) {
	return {
		statusCode: "" + (status || 200),
		header: {
			"statusCode": "" + (status || 200),
			"message": message || STATUS_CODES[status || 200],
			"content-type": "application/json",
			"content-length": result && result.length ? result.length.toString() : "0"
		},
		body: result
	};
}

function _get(_, url, options) {
	// console.error("\nGET " + url + "\n");
	options = options || {};
	var response = http.client({
		method: "get",
		url: url.indexOf("http") === 0 ? url : baseUrl + url,
		headers: {
			"Accept-Language": acceptLanguage,
		}
	}).end().response(_);
	return _readResp(_, response);
}


function _post(_, url, data, options) {
	// console.error("\nPOST " + url + "\n");
	options = options || {};
	var ctype = "text/plain";
	if (data && typeof(data) === "object") {
		ctype = "application/json";
		data = JSON.stringify(data);
	}
	var resp = http.client({
		method: 'post',
		url: url.indexOf("http") === 0 ? url : baseUrl + url,
		headers: {
			'content-type': ctype
		}
	}).end(data).response(_);

	return _readResp(_, resp);
}

function _put(_, url, data, options) {
	options = options || {};
	// console.error("\nPUT " + url + "\n");
	// console.error(JSON.stringify(data) + "\n");
	var ctype = options.contentType || "text/plain;charset=UTF-8";
	if (data && typeof(data) === "object") {
		ctype = "application/json;vnd.sage=syracuse; charset=utf-8";
		data = JSON.stringify(data);
	}
	var headers = {
		"content-type": ctype,
		"accept": "application/json;vnd.sage=syracuse; charset=utf-8",
		"x-file-name": options.xfilename,
	};

	if (options.debug) {
		headers["pragma"] = "debug-immediate";
	}

	var response = http.client({
		method: "put",
		url: url.indexOf("http") === 0 ? url : baseUrl + url,
		headers: headers
	}).end(data).response(_);

	return _readResp(_, response);
}


function _del(_, url, options) {
	// console.error("\nDELETE " + url + "\n");
	var response = http.client({
		method: "delete",
		url: url.indexOf("http") === 0 ? url : baseUrl + url,

		headers: {
			"Accept-Language": acceptLanguage,
			accept: "application/json;vnd.sage=syracuse; charset=utf-8"
		}
	}).end().response(_);
	return _readResp(_, response);
}


function _readResp(_, response) {
	var resp = {
		status: response.statusCode,
		headers: response.headers,
		body: response.readAll(_)
	};
	// console.error("status=" + (resp && (resp.status + ", length=" + (resp.body && resp.body.length))));
	if (/application\/json/.test(response.headers["content-type"]))
		resp.body = JSON.parse(resp.body);
	return resp;
}