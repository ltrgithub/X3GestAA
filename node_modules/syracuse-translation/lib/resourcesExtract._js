"use strict";
var fs = require('fs');
var fsp = require("path");
var sys = require("util");
var helpers = require("syracuse-core/lib/helpers");
var flows = require("streamline/lib/util/flows");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var resourceHelpers = require("syracuse-core/lib/resource/util");
var locale = require("syracuse-core/lib/locale");
var httpHelper = require("syracuse-sdata/lib/httpHelper");
var uuid = helpers.uuid;
var streams = require('streamline/lib/streams/streams');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first
    
//var Singleton=0 ;
//var tracer = console.log;
var tracer = null;
config.session = config.session || {};
config.session.auth = "basic";

helpers.pageFileStorage = false;
//var baseUrl = "http://localhost:8124"
var baseUrl = "http://localhost:3004"
var contractUrl = "/sdata/syracuse/collaboration/mongodb_admin_test/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";

var cookie = "";

function getCookie(_, login, pass) {
  var response = new streams.httpRequest({
    url : baseUrl + "/syracuse-main/html/main.html",
    user : login || "guest",
    password : pass || "guest"
  }).end().response(_);
  response.readAll(_);
  //strictEqual(response.statusCode, 200, "user authenticated");
  return response.headers["set-cookie"];
}


function post(_, cookie, url, data, statusCode, adminUrl) {
  var response = streams.httpRequest(
      {
        method : "post",
        url : url.indexOf("http") == 0 ? url : 
            contractUrl //
            + url,
        headers : {
          "content-type" : "application/json",
          cookie : cookie
        }
      }).end(JSON.stringify(data)).response(_);
  var responsetext=response.readAll(_) ;
  //strictEqual(response.statusCode, statusCode || 201, "status verified: ");
  return JSON.parse(responsetext);

}

function put(_, cookie, url, data, statusCode) {
  var response = streams.httpRequest(
      {
        method : "put",
        url : url.indexOf("http") == 0 ? url : contractUrl+ url,
        headers : {
          "content-type" : "application/json",
          cookie : cookie
        }
      }).end(JSON.stringify(data)).response(_);
  //strictEqual(response.statusCode, statusCode || 200, "status verified");
  return JSON.parse(response.readAll(_));
}

function get(_, cookie, url, statusCode, facet) {
  console.log("GET "+url) ;
  var type = facet || "generic.$details";
  var response = streams.httpRequest(
      {
        method : "get",
        url : url.indexOf("http") == 0 ? url : 
            contractUrl //
            + url,
        headers : {
          cookie : cookie,
          "Accept-Language" : acceptLanguage,
          accept : "application/json;vnd.sage=syracuse"
        }
      }).end().response(_);
  //strictEqual(response.statusCode, statusCode || 200, "status verified ");
  var resp = response.readAll(_);
  //console.log("RE "+resp) ;
  return JSON.parse(resp);
}


function _findKeyMessage(_,coll, searchProp, searchVal) {
  console.log("looking for: "+searchProp+' ='+searchVal);
  var id = -1;
  coll.forEach_(_,function(_,item) {
    //console.log("item["+searchProp+"]: "+item[searchProp](_));
    if (item[searchProp](_) == searchVal) {
      id = item.lannum(_);
    }
  });
  return id;
}

function _findMessage(_,coll, searchProp, searchVal) {
  var msg= null ;
  console.log("_findMessage: "+searchVal) ;
  coll.forEach_(_,function(_,item) {
    if (item[searchProp](_) == searchVal) {
      msg=item.lanmes(_) ;
    }
  });

  return msg ;
}

function _findItem(_,coll, searchProp, searchVal) {
  var it= null ;
  
  coll.forEach_(_,function(_,item) {
    if (item[searchProp](_) == searchVal) {
      it=item ;
    }
  });

  return it
}


exports.extractTexts = function (_,instance ,options) {

  

  

  function _updateEntry(_, key, text,lannum){
    console.log("UPDATE ENTRY "+ lannum) ;
    var db = endPoint.getOrm(_);
    var entity = db.model.getEntity(_, "ZZAPLSTD", "$query");
    var msg=db.fetchInstance(_,entity,{sdataWhere: "lanchp eq 10030 and lan eq 'ENG' and lannum eq "+lannum}) ;
    msg.lanmes(_,text);
    msg.save(_) ;
  }

  function _createEntry(_, key, message){
  console.log("_createEntry "+key+' '+message) ;
  cookie = getCookie(_);

      body = post(_, cookie, contractUrl+"/ZZAPLSTDs/$template/$workingCopies?trackingId=" + uuid.generate(), {});
      data= {};
      data.$key = body.$uuid;
      data.$etag = body.$etag;
      data.lanchp=10030 ;
      data.lannum= index[key].id ; // count ;//index[key]
      data.lan='ENG' ;
      data.lanmes=message ;
      data.$actions = {
        $save : {
          $isRequested : true
        }
      };
   
      bodyput = put(_,cookie, body.$url, data);

    }
   


 
  function extract(_, file){

     function _checkEntry(_, key, message){
      var  idxkey= fsp.join(fpath,key)
      if (!index[idxkey]){
        //add to the index  
        index[idxkey]={id: index.count, text : message } ;
        index.count++;
      }
      var x3message = _findMessage(_,x3Records, "lannum",index[idxkey].id ) ;
      console.log("x3message "+x3message) 
      if (x3message){
        console.log("_checkEntry message "+x3message) ;
        var idxkey=fsp.join(fpath,key) ;
        console.log("parsed[key] :"+parsed[key]) ;
        console.log("index[idxkey].text :"+index[idxkey].text) ;
        if (parsed[key]!==index[idxkey].text){
          console.log("modifyed in Syracuse"+idxkey ) ;
          if (x3message!==index[idxkey].text)
            console.log("ERROR modified by the interpretors") ;
          else 
            _updateEntry(_, key, message, index[idxkey].id) ;
        }
        //else {console.log("message found , not modified")}
      }
      else {
          console.log("inject message "+idxkey) ;
          _createEntry(_, idxkey, message);
        }
    }

      var pos=file.indexOf("-en.json") ;
       if (pos!=-1) {
          var name=file.substring(0,pos) ;
          var fpath =  fsp.join( dir,"resources", file);
          var input=fs.readFile(fpath, "utf8", _);
          var parsed=JSON.parse(input) ;
          
          flows.eachKey(_, parsed, _checkEntry ) ;
       }
      };
    
   function walk(_, file) {
      var path=  fsp.join( dir,file);// dir + '\\' + file;
      console.log("PATH "+path) ;
      var stat=fs.stat(path, _) ;
     
      if (stat.isDirectory() ){
          if (file==="resources"){
           
              var dircontent=fs.readdir(path, _ ) ;
              //console.log("call extract "+sys.inspect(dircontent)) ;
              dircontent.forEach_(_,extract) ;
          }else {
              var dircontent=fs.readdir(path, _ ) ;
              var temp=dir ;
              dir=path;
              dircontent.forEach_(_, walk) ;
              dir=temp;
              }
          }
   }
  
    console.log("EXTRACTING!!!!!!!!!!!!!!"/*+sys.inspect(instance.endpoint(_))*/) ;
    contractUrl=instance.endpoint(_).getBaseUrl(_) ;
    var endPoint=instance.endpoint(_) ;
    var index ;
    options = options || {};
    var burl=(options.baseurl)?options.baseurl :"" ;
    contractUrl= burl+ contractUrl ;
    console.log("URL: "+ contractUrl) ;
    cookie=getCookie(_) ;
   
    var db = endPoint.getOrm(_);
    var entity = db.model.getEntity(_, "ZZAPLSTD", "$query");
    var x3Records=db.fetchInstances(_,entity,{sdataWhere: "lanchp eq 10030 and lan eq 'ENG'"});
    console.log("x3Records: "+x3Records.length) ;

    var dir ;
    var indexdir ;
    if (options.dir)
      dir=  fsp.join(__dirname, "../../", options.dir) ;
    else 
      dir= fsp.join(__dirname, "../../", "");
    console.log("DIR: "+dir) ;


    if (options.indexdir)
      indexdir=  fsp.join(__dirname, "../../", options.indexdir) ;
    else 
      indexdir= fsp.join(__dirname, "../../lib");
      console.log("INDEXDIR: "+indexdir) ;
       
    var indexpath=fsp.join(indexdir, "/index.json") ;
    console.log( "indexpath: "+ indexpath) ;
    //if( Singleton=1)
    //var fd=fs.open(indexpath, "r",0666, _);
    //else {
    var fd=fs.open(indexpath, "a+",0666, _);
    // Singleton=1 ;
  //}


    var data=fs.readFile(indexpath, "utf8", _);
    
    fs.close(fd,_);

    if (data==""){
      index={count: 0} ;
      console.log("data est vide");
    }
    else
      index=JSON.parse(data) ;
    console.log("****INDEX: " + sys.inspect(index)) ;

    var dircontent=fs.readdir(dir, _) ;


    //fs.writeFile(indexpath, JSON.stringify(inputJson), "utf8", _);

    //console.log("READDIR: "+sys.inspect(dircontent) );
    //dir="C:\\_devs_syracuse\\V_B1\\Syracuse\\node_modules\\syracuse-soap\\lib\\server\\" ;
    console.log("dircontent: "+sys.inspect(dircontent)) ;
    dircontent.forEach_(_, walk) ;


    fd=fs.open(indexpath, "w",0666, _);
    fs.writeFile(indexpath, JSON.stringify(index), "utf8", _);
    //var dataa=fs.readFile(indexpath, "utf8", _);
    //console.log("DATA: "+sys.inspect(dataa)) ;
    //extract(_, "ormExecutor-en.json") ;
    fs.close(fd,_);
 } 


    