var fs = require('fs');
var fsp = require("path");
var sys = require("util");
var helpers = require("syracuse-core/lib/helpers");
var flows = require("streamline/lib/util/flows");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var resourceHelpers = require("syracuse-core/lib/resource/util");
var locale = require("syracuse-core/lib/locale");
var httpHelper = require("syracuse-sdata/lib/httpHelper");
var uuid = helpers.uuid;
var streams = require('streamline/lib/streams/streams');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first
    

//var tracer = console.log;
var tracer = null;
config.session = config.session || {};
config.session.auth = "basic";

helpers.pageFileStorage = false;
//var baseUrl = "http://localhost:8124"
var baseUrl = "http://localhost:3004"
var contractUrl = "/sdata/syracuse/collaboration/mongodb_admin_test/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";

var cookie = "";

function getCookie(_, login, pass) {
  var response = new streams.httpRequest({
    url : baseUrl + "/syracuse-main/html/main.html",
    user : login || "guest",
    password : pass || "guest"
  }).end().response(_);
  response.readAll(_);
  //strictEqual(response.statusCode, 200, "user authenticated");
  return response.headers["set-cookie"];
}


function post(_, cookie, url, data, statusCode, adminUrl) {
  var response = streams.httpRequest(
      {
        method : "post",
        url : url.indexOf("http") == 0 ? url : 
            contractUrl //
            + url,
        headers : {
          "content-type" : "application/json",
          cookie : cookie
        }
      }).end(JSON.stringify(data)).response(_);
  var responsetext=response.readAll(_) ;
  //strictEqual(response.statusCode, statusCode || 201, "status verified: ");
  return JSON.parse(responsetext);

}

function put(_, cookie, url, data, statusCode) {
  var response = streams.httpRequest(
      {
        method : "put",
        url : url.indexOf("http") == 0 ? url : contractUrl+ url,
        headers : {
          "content-type" : "application/json",
          cookie : cookie
        }
      }).end(JSON.stringify(data)).response(_);
  //strictEqual(response.statusCode, statusCode || 200, "status verified");
  return JSON.parse(response.readAll(_));
}

function get(_, cookie, url, statusCode, facet) {
  console.log("GET "+url) ;
  var type = facet || "generic.$details";
  var response = streams.httpRequest(
      {
        method : "get",
        url : url.indexOf("http") == 0 ? url : 
            contractUrl //
            + url,
        headers : {
          cookie : cookie,
          "Accept-Language" : acceptLanguage,
          accept : "application/json;vnd.sage=syracuse"
        }
      }).end().response(_);
  //strictEqual(response.statusCode, statusCode || 200, "status verified ");
  var resp = response.readAll(_);
  //console.log("RE "+resp) ;
  return JSON.parse(resp);
}


function _findKeyMessage(_,coll, searchProp, searchVal) {
  console.log("looking for: "+searchProp+' ='+searchVal);
  var id = -1;
  coll.forEach_(_,function(_,item) {
    //console.log("item["+searchProp+"]: "+item[searchProp](_));
    if (item[searchProp](_) == searchVal) {
      id = item.lannum(_);
    }
  });
  return id;
}

function _findMessage(_,coll, searchProp, searchVal) {
  var msg= null ;
  
  coll.forEach_(_,function(_,item) {
    if (item[searchProp](_) == searchVal) {
      msg=item.lanmes(_) ;
    }
  });

  return msg
}

function _findItem(_,coll, searchProp, searchVal) {
  var it= null ;
  
  coll.forEach_(_,function(_,item) {
    if (item[searchProp](_) == searchVal) {
      it=item ;
    }
  });

  return it
}


exports.extractTexts = function (_,instance ,options) {

  function _findX3message(_,keyRecords,engRecords, key ){
   var id = _findKeyMessage(_,keyRecords,"lanmes", key);
   if (id>=0) {
    //console.log("found id "+id) ;
    var msg = _findMessage(_,engRecords, "lannum", id) ;
    console.log("found ENG Msg for key "+ key+" is "+ msg ) ;
    return msg ;
    }
    else {
      //console.log("not found");
      return null ;
    }
  }

  function _removeEntry(_, key,keyRecords){
    console.log("_removeEntry " + key) ;
      cookie = getCookie(_);
      var rec=_findItem(_,keyRecords,"lanmes" , key ) ;
      var bodyput = put(_,cookie, contractUrl+"/ZZAPLSTDs('"+ rec.$uuid+"')", {$etag: rec.$etag+1,
        lanmes: rec.lanmes(_)+'_obsolete'});
      //console.log("after update: "+JSON.stringify(bodyput,null,2)) ;
  }

  function _createEntry(_, key, message){
  console.log("_createEntry "+key+' '+message) ;
  cookie = getCookie(_);

      var body = post(_, cookie, contractUrl+"/ZZAPLSTDs/$template/$workingCopies?trackingId=" + uuid.generate(), {});
      var data = {};
      data.$key = body.$uuid;
      data.$etag = body.$etag;
      data.lanchp=10030 ;
      data.lan='XXX' ;
      data.lanmes=key ;
      data.$actions = {
        $save : {
          $isRequested : true
        }
      };
      //console.log("after post: "+JSON.stringify(body,null,2) ) ;
     
      bodyput = put(_,cookie, body.$url, data);
      
      //console.log("after put: "+JSON.stringify(bodyput,null,2) ) ;
      body = post(_, cookie, contractUrl+"/ZZAPLSTDs/$template/$workingCopies?trackingId=" + uuid.generate(), {});
      data= {};
      data.$key = body.$uuid;
      data.$etag = body.$etag;
      data.lanchp=10030 ;
      data.lan='ENG' ;
      data.lanmes=message ;
      data.$actions = {
        $save : {
          $isRequested : true
        }
      };
   
      bodyput = put(_,cookie, body.$url, data);

    }
   


 
  function extract(_, file){

     function _checkEntry(_, key, message){
    
    var x3message = _findX3message(_,keyRecords, engRecords, key ) ;
    console.log("x3message "+x3message) 
    if (x3message){
      console.log("_checkEntry message "+x3message) ;
     if (parsed[key]!==parsedref[key]){
        console.log("remove message "+key ) ;
        _removeEntry(_, key,keyRecords) ;
        _createEntry(_, key, message) ;
      }
      else {console.log("message found , not modified")}
    }else {
      console.log("inject message "+key) ;
      _createEntry(_, key, message);
      }
  }



      var pos=file.indexOf("-en.json") ;
       if (pos!=-1) {
          var name=file.substring(0,pos) ;
          //console.log("extract "+file) ;
           var fpath =  fsp.join( dir,"resources", file);
           var fpathref =  fsp.join( dir,"resources", name+"-ref.json");
          //console.log("extract "+fpath) ;
          var input=fs.readFile(fpath, "utf8", _);
          var parsed=JSON.parse(input) ;
          //console.log("extr "+JSON.stringify(input,null,2)) ;
          var existref=fs.existsSync(fpathref) ;
          if (existref){
            var inputref=fs.readFile(fpathref, "utf8", _);
            var parsedref=JSON.parse(inputref) ;
          //console.log(sys.inspect(input)) ;
          }
          else{
            fs.writeFile(fpathref, input ,"utf8", _);
            parsedref=parsed ;
          }
          
          
          flows.eachKey(_, parsed, _checkEntry ) ;
          //console.log("DD: "+JSON.stringify(parsed, null,2));
       }
      };
    
   function walk(_, file) {
      var path=  fsp.join( dir,"", file);// dir + '\\' + file;
      //console.log("PATH "+path) ;
      var stat=fs.stat(path, _) ;
     
      if (stat.isDirectory() ){
          if (file==="resources"){
           
              var dircontent=fs.readdir(path, _ ) ;
              //console.log("call extract "+sys.inspect(dircontent)) ;
              dircontent.forEach_(_,extract) ;
          }else {
              var dircontent=fs.readdir(path, _ ) ;
              var temp=dir ;
              dir=path;
              dircontent.forEach_(_, walk) ;
              dir=temp;
              }
          }
   }
  
    console.log("EXTRACTING!!!!!!!!!!!!!!"/*+sys.inspect(instance.endpoint(_))*/) ;
    contractUrl=instance.endpoint(_).getBaseUrl(_) ;
    var endPoint=instance.endpoint(_) ;
    
    options = options || {};
    var burl=(options.baseurl)?options.baseurl :"" ;
    contractUrl= burl+ contractUrl ;
    console.log("URL: "+ contractUrl) ;
    cookie=getCookie(_) ;
    //body = get(_, cookie, contractUrl+"/ZZAPLSTDs" );

    //instance.endpoint(_).getOrm()

    var db = endPoint.getOrm(_);
   
  
    var entity = db.model.getEntity(_, "ZZAPLSTD", "$query");
    var keyRecords=db.fetchInstances(_,entity,{sdataWhere: "lanchp eq 10030 and lan eq 'XXX'"});
    var engRecords=db.fetchInstances(_,entity,{sdataWhere: "lanchp eq 10030 and lan eq 'ENG'"});

    console.log("keyRecords: "+keyRecords.length) ;
    console.log("engRecords: "+engRecords.length) ;

    var dir ;
    if (options.dir)
      dir=  fsp.join(__dirname, "../../", options.dir) ;
    else 
      dir= fsp.join(__dirname, "../../", "");
    console.log("DIR: "+dir) ;
       
    var indexpath=fsp.join(__dirname, "/index.json") ;
    console.log( "**********indexpath: "+ indexpath) ;
    fs.open(indexpath, "w+",null, _);

    var dircontent=fs.readdir(dir, _) ;

    //fs.writeFile(fpath, JSON.stringify(inputJson), "utf8", _);

    //console.log("READDIR: "+sys.inspect(dircontent) );
    //dir="C:\\_devs_syracuse\\V_B1\\Syracuse\\node_modules\\syracuse-soap\\lib\\server\\" ;
    console.log("dircontent: "+sys.inspect(dircontent)) ;
    dircontent.forEach_(_, walk) ;

    //extract(_, "ormExecutor-en.json") ;

 } 


    