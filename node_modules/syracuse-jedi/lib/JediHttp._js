"use strict";

// JavaScript Document
var fs = require('fs');
var ez = require('ez-streams');
var Jedi = require('jedi/lib/jedi.js');

var JediHttp = function(_url, _structure, _options) {
	Jedi.call(this, _structure, _options);
	/*dbg*/
	this.jedi.log(3, "new JediHttp(", _url, ")");
	/*dbg*/
	console.log("JediHttp debug:", this.debug);
	this.url = _url;
	this.options = _options;
	this.encoding = 'ascii';

	if (_options != null) {}
};

JediHttp.prototype.read = function(_, transform) {
	/*dbg*/
	this.jedi.log(3, "JediHttp.read", this.url);
	var item;
	var lStructure = this.structure;

	// Create the request.
	// The options are the same as for node's http.request call.
	// But the call also accepts a simple URL for the GET case
	// But streams.requestRequest does not take any callback parameter.
	// Instead, the callback is passed to the response(_) method (a few lines below).
	var req = ez.devices.http.client({
		url: this.url,
		proxy: process.env.http_proxy
	});

	// In the case of a POST request, this is where you would send
	// the body with req.write calls.
	// End the request and get a response object (asynchronously)
	var resp = req.end().response(_);

	var readBuffer = resp.checkStatus(200).readAll(_);
	/*dbg*/
	this.jedi.log(3, "JediHttp.read Buffer:", readBuffer);

	while ((item = lStructure.extract(readBuffer, false)) != null) {
		/*dbg*/
		this.jedi.log(3, "transform:", item);
		var rStructure = transform(_, item);
		if (null != rStructure && rStructure.name != lStructure.name) {
			/*dbg*/
			this.jedi.log(3, "rStructure:", rStructure.name);
			rStructure.next = lStructure.next;
			this.setTypeMethods(lStructure);
		}
		readBuffer = lStructure.next;
	}
	if (readBuffer.length) {
		item = lStructure.extract(readBuffer, true);
		if (item != null) {
			transform(_, item);
		}
	}
};

JediHttp.prototype.write = function(_, _value, _structure) {
	/*dbg*/
	this.jedi.log(3, "JediHttp.write");
};

JediHttp.prototype.extract = Jedi.prototype.extract;
JediHttp.prototype.parse = Jedi.prototype.parse;
JediHttp.prototype.write = Jedi.prototype.write;
JediHttp.prototype.close = Jedi.prototype.close;
JediHttp.prototype.setTypeMethods = Jedi.prototype.setTypeMethods;

module.exports = JediHttp;