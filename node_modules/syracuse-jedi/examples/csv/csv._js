"use strict";
// JavaScript Document
var fs = require('fs');
var path = require("path");
var jsonfile = require('syracuse-jedi/lib/jsonfile');

var config = require('config');
var tracer = (config.jedi && config.jedi.debug) ? config.jedi.debug : null;

function CCP2QIF(_fIn, _fOut, _) {
	console.log("convert", _fIn, "to", _fOut);

	var types = jsonfile.read(_, "node_modules/syracuse-jedi/examples/csv/tc/types.json");
	var transactions = jsonfile.read(_, "node_modules/syracuse-jedi/examples/csv/tc/transactions.json");
	var lastOpeFile = "node_modules/syracuse-jedi/examples/csv/tc/lastOperation.json";
	var lastOperation = jsonfile.read(_, lastOpeFile);

	var lastOperationDate;

	if (null == lastOperation) {
		lastOperationDate = new Date(1970, 0, 1);
	} else {
		lastOperationDate = new Date(lastOperation.date);
	}

	var sCcpOperation = {
		"$name": "sCcpOperation",
		"$properties": {
			"entete": {
				"$type": "array",
				"$maxItems": 8,
				"$item": {
					"$type": "object",
					"$after": "\r\n",
					"$properties": {
						"line": {
							"$type": "string"
						}
					}
				}
			},
			"operations": {
				"$type": "array",
				"$item": {
					"$type": "object",
					"$after": "\r\n",
					"$properties": {
						"date": {
							"$type": "date",
							"$format": "DD/MM/YYYY",
							"$after": ";"
						},
						"libelle": {
							"$type": "string",
							"$before": "\"",
							"$after": "\";"
						},
						"montant": {
							"$type": "number",
							"$format": "000000,00",
							"$after": ";"
						}
					}
				}
			}
		}
	};
	var sQif = {
		"$name": "sQif",
		"$before": "!Type:Bank\r\n",
		"$properties": {
			"operations": {
				"$type": "array",
				"$item": {
					"$type": "object",
					"$after": "^\r\n",
					"$properties": {
						"date": {
							"$type": "date",
							"$before": "D",
							"$format": "MM/DD/YY",
							"$after": "\r\n"
						},
						"montant": {
							"$type": "number",
							"$before": "U",
							"$format": "#########0,00",
							"$after": "\r\n"
						},
						"montantT": {
							"$type": "number",
							"$before": "T",
							"$format": "#########0,00",
							"$after": "\r\n"
						},
						"type": {
							"$type": "string",
							"$before": "N",
							"$after": "\r\n"
						},
						"libelle": {
							"$type": "string",
							"$before": "P",
							"$after": "\r\n",
							"$length": 40
						},
						"memo": {
							"$type": "string",
							"$before": "M",
							"$after": "\r\n",
							"$length": 40
						},
						"categorie": {
							"$type": "string",
							"$before": "L",
							"$after": "\r\n"
						}
					}
				}
			}
		}
	};

	var solde = 0;
	var lastOperation = null;
	var nbLines = 0;

	var JediFile = require('syracuse-jedi/lib/jediFile');

	var rflow = new JediFile(_fIn, 'r');
	var wflow = new JediFile(_fOut, 'w');

	var qif = {
		"operations": []
	};
	var bankStatement = rflow.parse(_, sCcpOperation);

	if ("operations" in bankStatement) {
		for (var i in bankStatement.operations) {
			if (bankStatement.operations[i].date > lastOperationDate) {
				if (null == lastOperation) {
					lastOperation = bankStatement.operations[i];
				}
				var token;
				bankStatement.operations[i].type = "";
				for (var type in types) {
					token = bankStatement.operations[i].libelle.substring(0, type.length);
					if (token == type) {
						bankStatement.operations[i].type = types[type];
						bankStatement.operations[i].libelle = bankStatement.operations[i].libelle.trim();
						if (types[type] == "CHEQUE") {
							bankStatement.operations[i].type = bankStatement.operations[i].libelle;
							bankStatement.operations[i].libelle = type + bankStatement.operations[i].type;
						}
						break;
					}
				}
				bankStatement.operations[i].categorie = '';
				for (var c in transactions) {
					if (bankStatement.operations[i].libelle.indexOf(c) >= 0) {
						bankStatement.operations[i].categorie = transactions[c].categorie;
						bankStatement.operations[i].memo = bankStatement.operations[i].libelle;
						if ("libelle" in transactions[c]) {
							bankStatement.operations[i].libelle = transactions[c].libelle;
						} else {
							bankStatement.operations[i].libelle = c;
						}
						break;
					}
				}

				bankStatement.operations[i].montantT = bankStatement.operations[i].montant;

				qif.operations.push(bankStatement.operations[i]);
				solde += bankStatement.operations[i].montant;
			}
		}
	}
	console.log(qif);
	wflow.write(_, qif, sQif);

	if (null != lastOperation) {
		jsonfile.write(_, lastOpeFile, lastOperation);
	}
	return solde;
}

console.log(process.argv);
console.log("csv file:", process.argv[3]);
if (process.argv.length >= 3) {
	var ccp2Qif = new CCP2QIF(process.argv[3], process.argv[3] + ".qif");
	console.log("solde:", ccp2Qif(_));
}