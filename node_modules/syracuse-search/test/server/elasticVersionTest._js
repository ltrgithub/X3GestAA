
"use strict";

/*global QUnit, start, ok*/

var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require('streamline-mongodb');
var sys = require("util");
var factory = require("syracuse-orm/lib/factory");
var jsonImport = require("syracuse-import/lib/jsonImport");
var jsonExport = require("syracuse-import/lib/jsonExport");
var datetime = require("syracuse-core/lib/types/datetime");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");

var elasticVersion = require("syracuse-search/lib/elasticVersion");
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;

var baseUrl = "http://localhost:3004";
var port = 3004;
var streams = require('streamline/lib/streams/streams');

var recOptions = {
	recMode: config.qunit && config.qunit.online ? "REC" : "PLAY",
	path: "node_modules/syracuse-search/test/server/"
};

var tracer = console.log;

function debugTrace(mesg) {
	if (tracer) {
		tracer(mesg);
	}
}

var elasticBaseUrl = "http://localhost:9200";

var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});

var db;

asyncTest("init database", 1, function(_) {
	locale.setCurrent(_, "en-us");
	db = adminTestFixtures.initializeTestEnvironnement(_);
	ok(db != null, "Environnement initialized");
	//
	start();
});


asyncTest("get version from search engine", 1, function(_) {
	var v = elasticVersion.getElasticVersion(_, elasticBaseUrl);
	ok(true, "Search engine running - Version: " + v.join("."));

	debugTrace("Search engine running - Version: " + v.join("."));

	start();
});

asyncTest("test version checking", 3, function(_) {
	var min = elasticVersion.getSupportedVersion(_, "min");
	ok(true, "Minimum version for tests - Version: " + min.join("."));
	debugTrace("Minimum Version: " + min.join("."));

	var max = elasticVersion.getSupportedVersion(_, "max");
	ok(true, "Maximum version for tests - Version: " + max.join("."));
	debugTrace("Maximum Version: " + max.join("."));

	var rec = elasticVersion.getSupportedVersion(_, "rec");
	ok(true, "Recommended version for tests - Version: " + rec.join("."));
	debugTrace("Recommended Version: " + rec.join("."));

	var opt = {
		version: ""
	};
	opt.version = createVersion(min[0], min[1], min[2]);

	start();
});

asyncTest("stop  tests", 0, function(_) {
	debugTrace("Are we actually doing anything??");
	doStop = true;
	start();
});