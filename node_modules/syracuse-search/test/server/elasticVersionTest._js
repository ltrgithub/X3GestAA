"use strict";

/* global QUnit: false, asyncTest: false, test: false, strictEqual: false, ok: false, start: false, stop: false */

var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var elasticVersion = require("syracuse-search/lib/elasticVersion");

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;

var tracer = console.log;

function debugTrace(mesg) {
	if (tracer) {
		tracer(mesg);
	}
}

function createVersion(major, minor, incr) {
	return major + "." + minor + "." + incr;
}

var elasticBaseUrl = "http://localhost:9200";

var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});

asyncTest("get version from search engine", 1, function(_) {
	var v = elasticVersion.getElasticVersion(_, elasticBaseUrl);
	ok(true, "Search engine running - Version: " + v.join("."));

	debugTrace("Search engine running - Version: " + v.join("."));

	start();
});

asyncTest("test version checking", 23, function(_) {
	var opts = {
		version: "",
		minVersion: [1, 90, 30],
		recVersion: [3, 10, 10],
		maxVersion: [5, 2, 5]
	};

	var v = elasticVersion.getElasticVersion(_, elasticBaseUrl);
	ok(true, "Current version: " + v.join("."));

	var min = elasticVersion.getSupportedVersion("min");
	ok(true, "Current Supported minimum version: " + min.join("."));
	ok(true, "Minimum version for tests: " + opts.minVersion.join("."));

	var max = elasticVersion.getSupportedVersion("max");
	ok(true, "Current Supported maximum version: " + min.join("."));
	ok(true, "Maximum version for tests: " + opts.maxVersion.join("."));

	var rec = elasticVersion.getSupportedVersion("rec");
	ok(true, "Current Supported recommended version: " + min.join("."));
	ok(true, "Recommended version for tests: " + opts.recVersion.join("."));

	// ------------------------------------------------
	// Minimum version tests
	// ------------------------------------------------
	// Check default version
	try {
		elasticVersion.checkVersion(_, elasticBaseUrl);
		ok(true, "Current version is okay: " + v.join("."));
	} catch (e) {
		debugTrace("Version check fail: " + e.message);
		ok(false, "Version check fail: " + e.message);
	}

	// Check minimum version
	opts.version = createVersion(opts.minVersion[0], opts.minVersion[1], opts.minVersion[2]);
	try {
		elasticVersion.checkVersion(_, elasticBaseUrl, opts);
		ok(true, "Minimum version is okay: " + opts.version);
	} catch (e) {
		debugTrace("Version check fail: " + e.message);
		ok(false, "Version check fail: " + e.message);
	}

	// Check increment version less than minimum
	opts.version = createVersion(opts.minVersion[0], opts.minVersion[1], opts.minVersion[2] - 1);
	try {
		elasticVersion.checkVersion(_, elasticBaseUrl, opts);
		ok(false, "Version less than min not detected: " + opts.version);
	} catch (e) {
		debugTrace("Version check fail: " + e.message);
		ok(true, "Valid version check: " + e.message);
	}

	// Check minor version less than minimum
	opts.version = createVersion(opts.minVersion[0], opts.minVersion[1] - 1, opts.minVersion[2]);
	try {
		elasticVersion.checkVersion(_, elasticBaseUrl, opts);
		ok(false, "Version less than min not detected: " + opts.version);
	} catch (e) {
		debugTrace("Version check fail: " + e.message);
		ok(true, "Valid version check: " + e.message);
	}

	// Check major version less than minimum
	opts.version = createVersion(opts.minVersion[0] - 1, opts.minVersion[1], opts.minVersion[2]);
	try {
		elasticVersion.checkVersion(_, elasticBaseUrl, opts);
		ok(false, "Version less than min not detected: " + opts.version);
	} catch (e) {
		debugTrace("Version check fail: " + e.message);
		ok(true, "Valid version check: " + e.message);
	}

	// ------------------------------------------------
	// Recommended version tests
	// ------------------------------------------------
	// Check recommended version
	opts.version = createVersion(opts.recVersion[0], opts.recVersion[1], opts.recVersion[2] - 1);
	try {
		elasticVersion.checkVersion(_, elasticBaseUrl, opts);
		ok(true, "Recommended version is okay: " + opts.version);
	} catch (e) {
		debugTrace("Version check fail: " + e.message);
		ok(false, "Version check fail: " + e.message);
	}

	// Check increment version less than recommended
	opts.version = createVersion(opts.recVersion[0], opts.recVersion[1], opts.recVersion[2] - 1);
	try {
		elasticVersion.checkVersion(_, elasticBaseUrl, opts);
		ok(true, "Version greater than min less than recommended is okay: " + opts.version);
	} catch (e) {
		debugTrace("Version check fail: " + e.message);
		ok(false, "Version check fail: " + e.message);
	}

	// Check minor version less than recommended
	opts.version = createVersion(opts.recVersion[0], opts.recVersion[1] - 1, opts.recVersion[2]);
	try {
		elasticVersion.checkVersion(_, elasticBaseUrl, opts);
		ok(true, "Version greater than min less than recommended is okay: " + opts.version);
	} catch (e) {
		debugTrace("Version check fail: " + e.message);
		ok(false, "Version check fail: " + e.message);
	}

	// Check major version less than recommended
	opts.version = createVersion(opts.recVersion[0] - 1, opts.recVersion[1], opts.recVersion[2]);
	try {
		elasticVersion.checkVersion(_, elasticBaseUrl, opts);
		ok(true, "Version greater than min less than recommended is okay: " + opts.version);
	} catch (e) {
		debugTrace("Version check fail: " + e.message);
		ok(false, "Version check fail: " + e.message);
	}

	// Check increment version greater than recommended
	opts.version = createVersion(opts.recVersion[0], opts.recVersion[1], opts.recVersion[2] + 1);
	try {
		elasticVersion.checkVersion(_, elasticBaseUrl, opts);
		ok(true, "Version greater than recommended less than max is okay: " + opts.version);
	} catch (e) {
		debugTrace("Version check fail: " + e.message);
		ok(false, "Version check fail: " + e.message);
	}

	// Check minor version greater than recommended
	opts.version = createVersion(opts.recVersion[0], opts.recVersion[1] + 1, opts.recVersion[2]);
	try {
		elasticVersion.checkVersion(_, elasticBaseUrl, opts);
		ok(true, "Version greater than recommended less than max is okay: " + opts.version);
	} catch (e) {
		debugTrace("Version check fail: " + e.message);
		ok(false, "Version check fail: " + e.message);
	}

	// Check major version greater than recommended
	opts.version = createVersion(opts.recVersion[0] + 1, opts.recVersion[1], opts.recVersion[2]);
	try {
		elasticVersion.checkVersion(_, elasticBaseUrl, opts);
		ok(true, "Version greater than recommended less than max is okay: " + opts.version);
	} catch (e) {
		debugTrace("Version check fail: " + e.message);
		ok(false, "Version check fail: " + e.message);
	}

	// ------------------------------------------------
	// Maximum version tests
	// ------------------------------------------------
	// Check maximum version
	opts.version = createVersion(opts.maxVersion[0], opts.maxVersion[1], opts.maxVersion[2] - 1);
	try {
		elasticVersion.checkVersion(_, elasticBaseUrl, opts);
		ok(true, "Maximum version is okay: " + opts.version);
	} catch (e) {
		debugTrace("Version check fail: " + e.message);
		ok(false, "Version check fail: " + e.message);
	}

	// Check increment version greater than maximum
	opts.version = createVersion(opts.maxVersion[0], opts.maxVersion[1], opts.maxVersion[2] + 1);
	try {
		elasticVersion.checkVersion(_, elasticBaseUrl, opts);
		ok(false, "Version greater than max not allowed: " + opts.version);
	} catch (e) {
		debugTrace("Version check fail: " + e.message);
		ok(true, "Valid version check: " + e.message);
	}

	// Check minor version greater than maximum
	opts.version = createVersion(opts.maxVersion[0], opts.maxVersion[1] + 1, opts.maxVersion[2]);
	try {
		elasticVersion.checkVersion(_, elasticBaseUrl, opts);
		ok(false, "Version greater than max not allowed: " + opts.version);
	} catch (e) {
		debugTrace("Version check fail: " + e.message);
		ok(true, "Valid version check: " + e.message);
	}

	// Check major version greater than maximum
	opts.version = createVersion(opts.maxVersion[0] + 1, opts.maxVersion[1], opts.maxVersion[2]);
	try {
		elasticVersion.checkVersion(_, elasticBaseUrl, opts);
		ok(false, "Version greater than max not allowed: " + opts.version);
	} catch (e) {
		debugTrace("Version check fail: " + e.message);
		ok(true, "Valid version check: " + e.message);
	}


	start();
});

asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});