"use strict";

/* global QUnit: false, it: false, strictEqual: false, ok: false, start: false, stop: false */
/*global QUnit, start, ok */

var config = require('config'); // must be first syracuse require
var elasticVersion = require('../../lib/elasticVersion');
var searchEngine = require('../../lib/elasticSearch');

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;

var tracer; // = console.error;

function createVersion(major, minor, incr) {
	return major + "." + minor + "." + incr;
}

import { assert } from 'chai';
Object.keys(assert).forEach(key => {
	if (key !== 'isNaN') global[key] = assert[key];
});

describe(module.id, () => {

	var elasticBaseUrl = searchEngine.getBaseUrl();

	it('get version from search engine', function(_) {
		var v = elasticVersion.getElasticVersion(_, elasticBaseUrl);
		ok(true, "Search engine running - Version: " + v.join("."));

	});

	it('test version checking', function(_) {
		var opts = {
			version: "",
			minVersion: [1, 90, 30],
			recVersion: [3, 10, 10],
			maxVersion: [5, 2, 5]
		};

		var v = elasticVersion.getElasticVersion(_, elasticBaseUrl);
		ok(true, "Current version: " + v.join("."));

		var min = elasticVersion.getSupportedVersion("min");
		ok(true, "Current Supported minimum version: " + min.join("."));
		ok(true, "Minimum version for tests: " + opts.minVersion.join("."));

		var max = elasticVersion.getSupportedVersion("max");
		ok(true, "Current Supported maximum version: " + max.join("."));
		ok(true, "Maximum version for tests: " + opts.maxVersion.join("."));

		var rec = elasticVersion.getSupportedVersion("rec");
		ok(true, "Current Supported recommended version: " + rec.join("."));
		ok(true, "Recommended version for tests: " + opts.recVersion.join("."));

		// ------------------------------------------------
		// Minimum version tests
		// ------------------------------------------------
		// Check default version
		try {
			elasticVersion.checkVersion(_, elasticBaseUrl);
			ok(true, "Current version is okay: " + v.join("."));
		} catch (e) {
			ok(false, "Version check fail: " + e.message);
		}

		// Check minimum version
		opts.version = createVersion(opts.minVersion[0], opts.minVersion[1], opts.minVersion[2]);
		try {
			elasticVersion.checkVersion(_, elasticBaseUrl, opts);
			ok(true, "Minimum version is okay: " + opts.version);
		} catch (e) {
			ok(false, "Version check fail: " + e.message);
		}

		// Check increment version less than minimum
		opts.version = createVersion(opts.minVersion[0], opts.minVersion[1], opts.minVersion[2] - 1);
		try {
			elasticVersion.checkVersion(_, elasticBaseUrl, opts);
			ok(false, "Version less than min not detected: " + opts.version);
		} catch (e) {
			ok(true, "Valid version check: " + e.message);
		}

		// Check minor version less than minimum
		opts.version = createVersion(opts.minVersion[0], opts.minVersion[1] - 1, opts.minVersion[2]);
		try {
			elasticVersion.checkVersion(_, elasticBaseUrl, opts);
			ok(false, "Version less than min not detected: " + opts.version);
		} catch (e) {
			ok(true, "Valid version check: " + e.message);
		}

		// Check major version less than minimum
		opts.version = createVersion(opts.minVersion[0] - 1, opts.minVersion[1], opts.minVersion[2]);
		try {
			elasticVersion.checkVersion(_, elasticBaseUrl, opts);
			ok(false, "Version less than min not detected: " + opts.version);
		} catch (e) {
			ok(true, "Valid version check: " + e.message);
		}

		// ------------------------------------------------
		// Recommended version tests
		// ------------------------------------------------
		// Check recommended version
		opts.version = createVersion(opts.recVersion[0], opts.recVersion[1], opts.recVersion[2] - 1);
		try {
			elasticVersion.checkVersion(_, elasticBaseUrl, opts);
			ok(true, "Recommended version is okay: " + opts.version);
		} catch (e) {
			ok(false, "Version check fail: " + e.message);
		}

		// Check increment version less than recommended
		opts.version = createVersion(opts.recVersion[0], opts.recVersion[1], opts.recVersion[2] - 1);
		try {
			elasticVersion.checkVersion(_, elasticBaseUrl, opts);
			ok(true, "Version greater than min less than recommended is okay: " + opts.version);
		} catch (e) {
			ok(false, "Version check fail: " + e.message);
		}

		// Check minor version less than recommended
		opts.version = createVersion(opts.recVersion[0], opts.recVersion[1] - 1, opts.recVersion[2]);
		try {
			elasticVersion.checkVersion(_, elasticBaseUrl, opts);
			ok(true, "Version greater than min less than recommended is okay: " + opts.version);
		} catch (e) {
			ok(false, "Version check fail: " + e.message);
		}

		// Check major version less than recommended
		opts.version = createVersion(opts.recVersion[0] - 1, opts.recVersion[1], opts.recVersion[2]);
		try {
			elasticVersion.checkVersion(_, elasticBaseUrl, opts);
			ok(true, "Version greater than min less than recommended is okay: " + opts.version);
		} catch (e) {
			ok(false, "Version check fail: " + e.message);
		}

		// Check increment version greater than recommended
		opts.version = createVersion(opts.recVersion[0], opts.recVersion[1], opts.recVersion[2] + 1);
		try {
			elasticVersion.checkVersion(_, elasticBaseUrl, opts);
			ok(true, "Version greater than recommended less than max is okay: " + opts.version);
		} catch (e) {
			ok(false, "Version check fail: " + e.message);
		}

		// Check minor version greater than recommended
		opts.version = createVersion(opts.recVersion[0], opts.recVersion[1] + 1, opts.recVersion[2]);
		try {
			elasticVersion.checkVersion(_, elasticBaseUrl, opts);
			ok(true, "Version greater than recommended less than max is okay: " + opts.version);
		} catch (e) {
			ok(false, "Version check fail: " + e.message);
		}

		// Check major version greater than recommended
		opts.version = createVersion(opts.recVersion[0] + 1, opts.recVersion[1], opts.recVersion[2]);
		try {
			elasticVersion.checkVersion(_, elasticBaseUrl, opts);
			ok(true, "Version greater than recommended less than max is okay: " + opts.version);
		} catch (e) {
			ok(false, "Version check fail: " + e.message);
		}

		// ------------------------------------------------
		// Maximum version tests
		// ------------------------------------------------
		// Check maximum version
		opts.version = createVersion(opts.maxVersion[0], opts.maxVersion[1], opts.maxVersion[2] - 1);
		try {
			elasticVersion.checkVersion(_, elasticBaseUrl, opts);
			ok(true, "Maximum version is okay: " + opts.version);
		} catch (e) {
			ok(false, "Version check fail: " + e.message);
		}

		// Check increment version greater than maximum
		opts.version = createVersion(opts.maxVersion[0], opts.maxVersion[1], opts.maxVersion[2] + 1);
		try {
			elasticVersion.checkVersion(_, elasticBaseUrl, opts);
			ok(false, "Version greater than max not allowed: " + opts.version);
		} catch (e) {
			ok(true, "Valid version check: " + e.message);
		}

		// Check minor version greater than maximum
		opts.version = createVersion(opts.maxVersion[0], opts.maxVersion[1] + 1, opts.maxVersion[2]);
		try {
			elasticVersion.checkVersion(_, elasticBaseUrl, opts);
			ok(false, "Version greater than max not allowed: " + opts.version);
		} catch (e) {
			ok(true, "Valid version check: " + e.message);
		}

		// Check major version greater than maximum
		opts.version = createVersion(opts.maxVersion[0] + 1, opts.maxVersion[1], opts.maxVersion[2]);
		try {
			elasticVersion.checkVersion(_, elasticBaseUrl, opts);
			ok(false, "Version greater than max not allowed: " + opts.version);
		} catch (e) {
			ok(true, "Valid version check: " + e.message);
		}
	});
});