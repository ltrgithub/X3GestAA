"use strict";
/* jshint -W079 */
/* jshint unused: false */
/* global QUnit: false, it: false, strictEqual: false, ok: false, start: false, stop: false */

/*global QUnit, start, ok*/
var helpers = require('@sage/syracuse-core').helpers;
var sys = require("util");
var config = require('config'); // must be first syracuse require
var port = (config.unit_test && config.unit_test.serverPort) || 3004;
var dataModel = require("syracuse-orm/lib/dataModel");
var elasticQuery = require("syracuse-search/lib/elasticQuery");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var locale = require('streamline-locale');

var searchEngine = require('syracuse-search/lib/elasticSearch');

QUnit.module(module.id);

it('test format resource type date', function(_) {
	var propItem = {
		$type: "application/x-date",
	};
	var shortDate = "dd/MM/yyyy";
	var context = {
		getUserProfile: function(_) {
			return {
				selectedLocale: function(_) {
					return {

						numberGroupSize: function(_) {
							return 3;
						},
						shortDate: function(_) {
							return shortDate;
						}
					};
				}
			};
		}
	};

	var resVal = elasticQuery.formatValue(_, "2013-12-03", propItem, context); // format date dd/mm/yyyy
	strictEqual(resVal, "03/12/2013", " format date dd/MM/yyyy");

	var resVal = elasticQuery.formatValue(_, "2013-00-03", propItem, context); // format invalide date dd/mm/yyyy
	strictEqual(resVal, "03/12/2012", " format date dd/MM/yyyy");

	var shortDate = "MM/dd/yyyy";
	var resVal = elasticQuery.formatValue(_, "2013-05-03", propItem, context); // format invalide date dd/mm/yyyy
	strictEqual(resVal, "05/03/2013", " format date MM/dd/yyyy");

	var resVal = elasticQuery.formatValue(_, "2013-04-03", propItem, context); // format invalide date dd/mm/yyyy
	strictEqual(resVal, "04/03/2013", " format date MM/dd/yyyy");



});

it('test format resource type decimal', function(_) {
	var propItem = {
		$type: "application/x-decimal",
		$maxLength: 6.2
	};
	locale.setCurrent(_, 'en-US'); // gs="'"	ds="."
	ok(true, "locale en-US");

	var context = {
		getUserProfile: function(_) {
			return {
				selectedLocale: function(_) {
					return {

						numberGroupSize: function(_) {
							return 3;
						},
						shortDate: function(_) {
							return shortDate;
						}
					};
				}
			};
		}
	};

	var resVal = elasticQuery.formatValue(_, "300.00", propItem, context); // already correct format passed in string
	strictEqual(resVal, "300.00", " already correct format passed in string");

	var resVal = elasticQuery.formatValue(_, "300", propItem, context); // not a decimal pass in string
	strictEqual(resVal, "300.00", " not a decimal pass in string");

	var resVal = elasticQuery.formatValue(_, 300.00, propItem, context); // not a decimal pass as a float
	strictEqual(resVal, "300.00", " not a decimal pass as a float");


	var resVal = elasticQuery.formatValue(_, 300, propItem, context); // not a decimal pass as a integer
	strictEqual(resVal, "300.00", " not a decimal pass as a integer");

	var resVal = elasticQuery.formatValue(_, 300.001111, propItem, context); // not a decimal pass as a float with too many decimal number
	strictEqual(resVal, "300.00", " not a decimal pass as a float with too many decimal number");

	var resVal = elasticQuery.formatValue(_, "<em>300.001111</em>", propItem, context); // with highlight
	strictEqual(resVal, "<em>300.00</em>", " with highlight");

	var resVal = elasticQuery.formatValue(_, 300000.001, propItem, context); // test seperator each 3 digit
	strictEqual(resVal, "300,000.00", " test seperator each 3 digit");

	try {
		var resVal = elasticQuery.formatValue(_, "test", propItem, context); // non numeric but type decimal
		ok(false, " pass a non numeric value");
	} catch (e) {
		ok(true, " pass a non numeric value");

	}
	try {
		var resVal = elasticQuery.formatValue(_, "<em>test</em>", propItem, context); // non numeric with highlight but type decimal
		ok(false, " pass a non numeric value with highlight");
	} catch (e) {
		ok(true, " pass a non numeric value with highlight");
	}
	// change separator

	locale.setCurrent(_, 'fr-FR'); // gs="'"	ds="."
	ok(true, "locale fr-FR");

	var resVal = elasticQuery.formatValue(_, "300.00", propItem, context); // already correct format passed in string
	strictEqual(resVal, "300,00", " already correct format passed in string");

	var resVal = elasticQuery.formatValue(_, "300", propItem, context); // not a decimal pass in string
	strictEqual(resVal, "300,00", " not a decimal pass in string");

	var resVal = elasticQuery.formatValue(_, 300.00, propItem, context); // not a decimal pass as a float
	strictEqual(resVal, "300,00", " not a decimal pass as a float");


	var resVal = elasticQuery.formatValue(_, 300, propItem, context); // not a decimal pass as a integer
	strictEqual(resVal, "300,00", " not a decimal pass as a integer");

	var resVal = elasticQuery.formatValue(_, 300.001111, propItem, context); // not a decimal pass as a float with too many decimal number
	strictEqual(resVal, "300,00", " not a decimal pass as a float with too many decimal number");

	var resVal = elasticQuery.formatValue(_, "<em>300.001111</em>", propItem, context); // with highlight
	strictEqual(resVal, "<em>300,00</em>", " with highlight");

	var resVal = elasticQuery.formatValue(_, 300000.001, propItem, context); // test seperator each 3 digit
	strictEqual(resVal, "300 000,00", " test seperator each 3 digit");

	try {
		var resVal = elasticQuery.formatValue(_, "test", propItem, context); // non numeric but type decimal
		ok(false, " pass a non numeric value");
	} catch (e) {
		ok(true, " pass a non numeric value");

	}
	try {
		var resVal = elasticQuery.formatValue(_, "<em>test</em>", propItem, context); // non numeric with highlight but type decimal
		ok(false, " pass a non numeric value");
	} catch (e) {
		ok(true, " pass a non numeric value");

	}

	propItem.$type = "application/x-string";

	var resVal = elasticQuery.formatValue(_, "300.00", propItem, context); // already correct format passed in string
	strictEqual(resVal, "300.00", " with no type decimal :  already correct format passed in string");

	var resVal = elasticQuery.formatValue(_, "300", propItem, context); // not a decimal pass in string
	strictEqual(resVal, "300", " with no type decimal : not a decimal pass in string");

	var resVal = elasticQuery.formatValue(_, 300.00, propItem, context); // not a decimal pass as a float
	strictEqual(resVal, 300, " with no type decimal : not a decimal pass as a float");


	var resVal = elasticQuery.formatValue(_, 300, propItem, context); // not a decimal pass as a integer
	strictEqual(resVal, 300, " with no type decimal : not a decimal pass as a integer");

	var resVal = elasticQuery.formatValue(_, 300.001111, propItem, context); // not a decimal pass as a float with too many decimal number
	strictEqual(resVal, 300.001111, " with no type decimal : not a decimal pass as a float with too many decimal number");

	var resVal = elasticQuery.formatValue(_, "<em>300.001111</em>", propItem, context); // with highlight
	strictEqual(resVal, "<em>300.001111</em>", " with no type decimal : with highlight");

	var resVal = elasticQuery.formatValue(_, 300000.001, propItem, context); // test seperator each 3 digit
	strictEqual(resVal, 300000.001, " with no type decimal : test seperator each 3 digit");

	var resVal = elasticQuery.formatValue(_, "test", propItem, context); // non numeric but type decimal
	strictEqual(resVal, "test", " with no type decimal : pass a non numeric value");

	var resVal = elasticQuery.formatValue(_, "<em>test</em>", propItem, context); // non numeric with highlight but type decimal
	strictEqual(resVal, "<em>test</em>", " with no type decimal : pass a non numeric value");

	// a decimal without maxlength
	propItem = {
		$type: "application/x-decimal",
	};
	var resVal = elasticQuery.formatValue(_, 300000.001, propItem, context); // test seperator each 3 digit
	strictEqual(resVal, 300000.001, " a decimal without maxlength");

});