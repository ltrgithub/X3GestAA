"use strict";

var Context = require("syracuse-sdata/lib/sdataContext").Context;
var elasticQuery = require("./elasticQuery");
var elasticIndex = require("./elasticIndex");

var tracer = console.log;
var serverConfig = exports.serverConfig = {};

var _operationMap = {
	_update: require("./elasticIndex").updateIndex,
	_delete: require("./elasticIndex").deleteIndex,
	_search: require("./elasticQuery").search,
	_xsearch: require("./elasticQuery").fsearch,
	_fsearch: require("./elasticQuery").xsearch
};

var _methodMap = {
	"put": require("./elasticIndex").updateIndex,
	"delete": require("./elasticIndex").deleteIndex,
	"get": elasticQuery.search
};

// url is like /search/[contract/][application/][entity/]_update
// or like /search?[index=contract&][type=entity][q=[field:]value&...]
exports.dispatch = function(_, request, response) {
	var context = new Context(request, response);
	var segments = request.url.split("?")[0].split("/");

	// operation is last segment
	var operation = segments[segments.length - 1];
	var application = (segments.length > 3) ? segments[2] : null;
	var contract = (segments.length > 4) ? segments[3] : null;
	var dataset = (segments.length > 5) ? segments[4] : null;
	var entity = (segments.length > 6) ? segments[5] : null;
	tracer && tracer("elasticSearch url segments: " + contract + "," + application + "," + dataset + "," + entity + "," + operation + " method=" + context.method);

	if (operation && _operationMap[operation]) {
		tracer && tracer("Search invoked via operation map");
		_operationMap[operation](_, context, contract, application, dataset, entity);
	} else if (context.method && _methodMap[context.method]) {
		tracer && tracer("Search invoked via method map");
		_methodMap[context.method](_, context, contract, application, dataset, entity);
	} else {
		context.reply(_, 404);
	}
	//		context.response.writeHead("301",{Location:request.url.replace("/search", "/syracuse-main/html/search.html")});
	//
	context.response.end();
};

exports.setup = function(configOptions) {
	configOptions = configOptions || {};
	//
	tracer = configOptions.tracer;
	//
	serverConfig.hostname = configOptions.hostname || "localhost";
	serverConfig.port = configOptions.port || 9200;
	serverConfig.baseUrl = "http://" + serverConfig.hostname + ":" + serverConfig.port;
	//
	elasticIndex.tracer = tracer;
	elasticIndex.serverConfig = serverConfig;
	//
	elasticQuery.tracer = tracer;
	elasticQuery.serverConfig = serverConfig;
};

exports.search = elasticQuery.search;
exports.fsearch = elasticQuery.fsearch;
exports.xsearch = elasticQuery.xsearch;
exports.updateIndex = elasticIndex.updateIndex;
exports.deleteIndex = elasticIndex.deleteIndex;