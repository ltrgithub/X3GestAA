"use strict";

var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");
var streams = require("streamline/lib/streams/streams");
var elasticHelpers = require("syracuse-search/lib/helpers");
var helpers = require('syracuse-core/lib/helpers');
var forEachKey = helpers.object.forEachKey;
var jsurl = require("jsurl");
//var indexMeta = require("syracuse-search/lib/indexMeta");
var sys = require("util");
var locale = require("syracuse-core/lib/locale");
var datetime = require("syracuse-core/lib/types/datetime");
var parser = require('syracuse-sdata/lib/parser/parser');


var httpHelper = require("syracuse-sdata/lib/httpHelper");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var Parser = require("syracuse-sdata/lib/parser/parser").Parser;
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require

exports.tracer = null;
exports.serverConfig = null;
var elasticVersion = null;

var formatDate = [
	"dd-mm-yy",
];

function _indexToContract(indexName) {
	var parts = indexName.split(".");
	return sdataRegistry.getContract(parts[0], parts[1], false);
}

function _getTypeTitle(mapping, typeName) {
	var title = typeName;
	Object.keys(mapping).forEach(function(idx) {
		var map = mapping[idx][typeName];
		if (map && map._meta && map._meta.$classTitle) title = map._meta.$classTitle;
	});
	return title;
}

function _addFacets(query, contract) {
	if (!contract || !contract.searchFacets) return;
	query.facets = query.facets || {
		type: {
			terms: {
				field: "_type"
			}
		}
	};
	forEachKey(contract.searchFacets, function(key, facet) {
		query.facets[key] = {
			terms: {
				fields: ["facet_" + key]
			}
		};
	});
}




function _addFilters(query, filters) {
	if (!filters) return;
	if (!Object.keys(filters).some(function(k) {
		return (k !== "type");
	})) return;
	//
	query.filtered = query.filtered || {};
	var filter = query.filtered.filter = query.filtered.filter || {};
	filter.and = filter.and || [];
	forEachKey(filters, function(key, facet) {
		if (key === "type") return;
		//
		var part = {
			query: {
				terms: {}
			}
		};
		part.query.terms["facet_" + key] = facet.slice(0);
		filter.and.push(part);
	});
}

function _replaceSearchDollar(value) {
	var result;
	if (value === "$id")
		result = value.replace('$id', '_id');
	else if (value === "$type")
		result = value.replace('$type', '_type');
	else
		result = value;
	return result;
}

function _makeFilterFromSdata(where) {
	function _left(where) {
		var result = "";
		if (!where) return result;
		switch (where.type) {
			case "operator":
				switch (where.value.code) {
					case ".":
						result = _left(where.children[0]) + "." + _left(where.children[1]);
						break;
					default:
						throw new Error("_left : \"" + where.value.code + "\" not yet implemented");
				}
				break;
			default:
				result = _replaceSearchDollar(where.value);

		}
		return result;
	}

	function _format(value, isDate) {
		if (!value) return value;
		return isDate ? new Date(value) : ((typeof value === "object") && value.toString()) ? value.toString() : value;
	}

	var result = {};
	var isDate = false;
	switch (where.type) {
		case "operator":
			switch (where.value.code) {
				case "and":
					if (where.children.length < 2) throw new Error("Invalid \"AND\" condition");
					result = {
						and: [_makeFilterFromSdata(where.children[0]), _makeFilterFromSdata(where.children[1])]
					};
					break;
				case "or":
					if (where.children.length < 2) throw new Error("Invalid \"OR\" condition");
					result = {
						or: [_makeFilterFromSdata(where.children[0]), _makeFilterFromSdata(where.children[1])]
					};
					break;
				case "=":
					var val = _format(where.children[1].value, isDate);
					if (val == null) {
						result.missing = {
							field: _left(where.children[0])
						};
					} else {
						result.query = {
							field: {}
						};
						result.query.field[_left(where.children[0])] = (val && val === "$all" ? "_all" : val);
					}
					break;
				case "like":
					var right = where.children[1] && _format(where.children[1].value, isDate);
					if (right.charAt(0) != "%") right = "^" + right;
					right = right.replace(/%/g, ".*");
					result.regexp = {};
					result.regexp[_left(where.children[0])] = right;
					break;
				case "in":
					right = where.children.slice(1).map(function(c) {
						return c && _format(c.value, isDate);
					});
					result.terms = {};
					result.terms[_left(where.children[0])] = right;
					break;

				default:
					// range ?
					if (["<", "<=", ">=", ">", "between"].indexOf(where.value.code)) {
						var rg;
						if (typeof where.children[1] === "number") rg = result.numeric_range = {};
						else rg = result.range = {};
						var l = rg[_left(where.children[0])] = {};
						var r = _format(where.children[1].value, isDate);
						switch (where.value.code) {
							case "<":
								l.lt = r;
								break;
							case "<=":
								l.lte = r;
								break;
							case ">":
								l.gt = r;
								break;
							case ">=":
								l.gte = r;
								break;
							case "between":
								l.gte = r;
								l.lte = _format(where.children[2].value, isDate);
								break;
						}
					}
			}
			break;
		default:
			throw new Error(where.type + " not yet implemented");
	}
	return result;
}

exports._addSdataWhere = function _addSdataWhere(query, where) { // export for unit test
	// accept string sdata clause or parsed sdata clause
	if (where && (typeof where === "string")) where = Parser.parse(where);
	//
	query.filtered = query.filtered || {};
	// crnit 140228 >>>: DO NOT replace query.filtered.filter as filters should cumulate: ex. filters (as in facet filters) + where + rights
	// operator should be AND in this case, if other is requires it should be in parameters
	//	return query.filtered.filter = _makeFilterFromSdata(where);
	//
	var filter = query.filtered.filter = query.filtered.filter || {};
	filter.and = filter.and || [];
	//
	filter.and.push(_makeFilterFromSdata(where));
	// crnit 140228 <<<
};



var _prototype = {};

function _updateResource(_, hit, properties, resource) {
	// get prototype store in elasticSearch
	function _fromHighlight(hglt, kk) {
		return hglt && hglt[kk] && kk !== "$url" ? (hglt[kk].length > 1 ? hglt[kk] : hglt[kk][0]) : null;
	}

	function _fromSource(src, kk) {
		function _makeValue(it) {
			return typeof it === "object" && it.hasOwnProperty("$value") ? it.$value : it;
		}
		var k = kk.indexOf(".") !== -1 ? kk.split(".").slice(-1) : kk;
		var ss = src[k];
		if (Array.isArray(ss)) return ss.map(_makeValue);
		else return _makeValue(ss);
	}
	var sSource = hit._source;
	var sHighlight = hit.highlight;

	var baseUrl = [exports.serverConfig.baseUrl].join('/');
	var options = {
		method: "GET"
	};
	var prop;
	var type = hit._type;
	var index = hit._index;
	var adminEP = adminHelper.getCollaborationEndpoint(_);
	var locale = hit._index.substring(hit._index.lastIndexOf("."));
	if (type === "function") {
		type = "menuItem";
		index = adminEP.application(_) + "." + adminEP.contract(_) + "." + adminEP.dataset(_) + locale;
	}
	options.url = baseUrl + "/" + index + "_entities" + "/$entities/" + type;
	if (_prototype[options.url]) {
		prop = _prototype[options.url];
	} else {
		var proto = JSON.parse(streams.httpRequest(options).end().response(_).readAll(_));
		// manage summary for syracuse but use search for x3
		if (!proto._source) prop = {};
		else prop = proto._source.$prototype.$properties.$resources ? proto._source.$prototype.$properties.$resources.$item.$properties : proto._source.$prototype.$properties;
		_prototype[options.url] = prop;
	}

	if (prop) {
		var res = {

		};

		/*
		 * look on all property of the prototype to create  $resource array
		 *   item of each $resource  must follow protocol describe in issue github 3163
		 *
		 */
		Object.keys(prop).map(function(k) {
			var hh = k; // highlight key (i.e :  CTY.TOTO)

			function _getSubProperties(propItem) {
				if (!propItem) return null;
				if (Object.keys(propItem).length === 0) {
					return null;
				} else if (propItem.$item && Object.keys(propItem.$item).indexOf("$properties") > 0) {
					return propItem.$item.$properties;
				} else {
					return _getSubProperties(propItem.$item);
				}
			}

			/*
			 * propItem : object that represent the current prototype property
			 * hh : the highlight key is associate to the current property
			 */

			function getRecord(propItem, hh) {
				var res = {
					properties: {},
					resource: {}
				};
				if (typeof propItem === "object") {
					switch (propItem.$type) {
						case "application/x-reference":
							// crnit: TODO: we should format references so they be compatible with standard reference format ($query)
							// check if properties is date and is highlight -> elastic search doesn't manage that 
							var p = {
								$isSummary: propItem.$isSummary || propItem.$type === "application/x-date" ? true : false,
								$isHighlight: (sHighlight && (sHighlight[hh] || sHighlight[hh + ".$value"]) ? true : false),
								$title: propItem.$title
							};
							var r = _fromHighlight(sHighlight, hh) || _fromHighlight(sHighlight, hh + ".$value") || _fromSource(sSource, hh) || _fromSource(sSource, hh + ".$value");
							res.properties = p;
							res.resource = r;
							break;
						case "application/x-array":
						case "application/x-object":
							if (propItem.$item.$type === "application/x-reference") {
								res = getRecord(propItem.$item, hh);
								res.properties.$title = propItem.$title;
							} else {
								var psub = _getSubProperties(propItem);
								if (psub) {
									Object.keys(psub).map(function(key) {
										var hl = hh !== "" ? hh + "." + key : key;
										var resp = getRecord(psub[key], hl);
										res.properties[key] = resp.properties;
										if (resp.resource) {
											res.resource[key] = resp.resource;
										}
									});
								}
							}

							break;
						default:
							// check if properties is date and is highlight -> elastic search doesn't manage that 
							var p = {
								$isSummary: propItem.$isSummary || propItem.$type === "application/x-date" ? true : false,
								$isHighlight: (sHighlight && sHighlight[hh] ? true : false),
								$title: propItem.$title
							};
							var r = _fromHighlight(sHighlight, hh) || _fromSource(sSource, hh);
							res.properties = p;
							res.resource = r;

					}
				}
				return res;
			}



			var res = getRecord(prop[k], hh);
			properties[k] = res.properties;
			resource[k] = res.resource || resource[k];
		});
	}

}


function _makeFunctionResource(_, endpoint, mapping, hit, isMultiEP) {

	var title = _getTypeTitle(mapping, hit._type);
	// items base url
	var localized = isMultiEP ? locale.format(module, "functionMultiDescription", hit._source.$description, endpoint.description(_)) : locale.format(module, "functionMonoDescription", hit._source.$description);
	var r = {
		$url: hit._source.$url,
		$baseUrl: endpoint.getBaseUrl(_),
		$uuid: hit._id,
		$resultTypeTitle: title,
		$representation: hit._type,
		$title: localized,
		title: localized,

		icon: (hit._source.$icon ? {
			$url: hit._source.$icon,
			$type: "image"
		} : null)


	};
	var prop = {};
	_updateResource(_, hit, prop, r);
	r.$properties = prop;

	if (hit._source.linkType === "$function") r.$baseUrl = r.$baseUrl.replace("/sdata/", "/trans/");
	return r;
}

function _makeResource(_, mapping, hit, representation, resFormat) {
	var title = _getTypeTitle(mapping, hit._type);
	// items base url
	// hint: for now, $description goes into title and description is a concatenation of all fields
	var r;
	switch (resFormat) {
		case "$query":
		case "$lookup":
		case "$select":
			r = hit._source;
			break;
		default:
			var prop = {};
			r = {
				$url: hit._source.$url,
				$uuid: hit._id,
				$resultTypeTitle: title,
				$representation: hit._type,
				$title: hit.highlight && hit.highlight.$description ? hit.highlight.$description : hit._source.$description,
				title: hit.highlight && hit.highlight.$description ? hit.highlight.$description : hit._source.$description, // to be remove
				$description: hit.highlight && hit.highlight.description ? hit.highlight.description : hit._source.description,
				icon: (hit._source.$icon ? {
					$url: hit._source.$icon,
					$type: "image"
				} : null)
			};

			_updateResource(_, hit, prop, r);

			r.$properties = prop;

	}
	// substitute representation for given representation
	if (representation !== "queryResult") r.$url = r.$url.replace(/representation=.*\.\$/, "representation=" + representation + ".$");
	//
	r.$key = hit._id;
	return r;
}

//select existing indexes available to the user

function _selectIndexes(_, elasticBaseUrl, userProfile, sources, selectedIndexName) {
	function _addIndex(_, indexName, localeCode) {
		var idx = indexName + "." + localeCode.toLowerCase();
		if (elasticHelpers.indexExists(_, elasticBaseUrl, idx)) indexes.push(idx);
		else(localeCode !== elasticHelpers.fallbackLocale) && _addIndex(_, indexName, elasticHelpers.fallbackLocale);
	}

	function _addEP(_, ep, localeCode) {
		var idx = ep.getIndexName(_, localeCode || locale.current);
		if (elasticHelpers.indexExists(_, elasticBaseUrl, idx)) {
			indexes.push(idx);
		} else(localeCode !== elasticHelpers.fallbackLocale) && _addEP(_, ep, elasticHelpers.fallbackLocale);
	}
	//
	var indexes = [];
	if (sources.indexOf("data") >= 0) {
		if (selectedIndexName) _addIndex(_, selectedIndexName, locale.current);
		else {
			if (userProfile) {
				if (userProfile.selectedEndpoint(_)) _addEP(_, userProfile.selectedEndpoint(_));
				else {
					userProfile.endpoints(_).toArray(_).forEach_(_, function(_, endpoint) {
						_addEP(_, endpoint);
					});
				}
			}
		}
	}
	if (sources.indexOf("functions") >= 0) {
		var epF = userProfile.selectedEndpoint(_);
		_addIndex(_, elasticHelpers.functionIndexName + "." + epF.application(_).toLowerCase() + "." + epF.contract(_).toLowerCase() + "." + epF.dataset(_).toLowerCase(), locale.current);
		// add syracuse collaboration index function
		_addIndex(_, elasticHelpers.functionIndexName + "." + "syracuse" + "." + "collaboration" + "." + "syracuse", locale.current);

	}
	//
	return indexes;
}

// select endpoints available to the user

function _selectEndpoints(_, userProfile) {
	var eps = [];
	if (userProfile) {
		if (userProfile.selectedEndpoint(_)) {
			eps.push(userProfile.selectedEndpoint(_));
		} else {
			eps = userProfile.endpoints(_).toArray(_).slice(0);
		}
	}
	return eps;
}



//issue 3171 check if string is a date and convert to the right string to search else return query entered

function _convertDateToString(_, q, up) {
	function getDateStr(_, arr) {
		// check with local preference if start with d,m or year

		if (arr.length === 3) {

			if (arr[2].length === 4) {

				var dateFormat = up.selectedLocale(_) && up.selectedLocale(_).shortDate(_) ? up.selectedLocale(_).shortDate(_) : "mm/dd/yyyy";
				var d = new Date(datetime.parse(q, dateFormat).value);
				var date = d.getDate();
				var month = d.getMonth() + 1;
				var year = d.getFullYear();
				// it's a date -> create a new query in x3 raw date format and elastic search format
				return year + "-" + (month < 10 ? "0" + month : month) + "-" + (date < 10 ? "0" + date : date);
			} else if (arr[0].length === 4) {
				return arr.join("-");
			}
		}
		return arr.join("-");
	}


	// try to get date from all kind of format
	var r = /(\d*)[^A-Za-z_0-9](\d*)[^A-Za-z_0-9](\d*)/.exec(q);
	r = r && r.slice(1);
	//console.log("regexp " + JSON.stringify(r, null, 2));
	if (r && r.length > 1) {

		return getDateStr(_, r);
	}

	/*var d = new Date(q);
    //console.log("date " + d);
    if (d.getFullYear()) {
        var date = d.getDate();
        var month = d.getMonth() + 1;
        var year = d.getFullYear();
        // it's a date -> create a new query in x3 raw date format and elastic search format
        return year + "-" + (month < 10 ? "0" + month : month) + "-" + (date < 10 ? "0" + date : date);
    }*/
	return null;

}

function _addX3RightFilter(_, allRight, search, user, endpoint, isFunction) {

	var attr = "$access";
	var right = (allRight ? (isFunction ? allRight.$functions : allRight.$accessCodes) : null);
	var repRight = allRight ? allRight.$authorizedRepresentations : null;


	var condition = "";
	if (right && Object.keys(right).length > 0) { //simple right
		search.query.filtered.filter = {};
		if (!isFunction) {
			condition = "$access eq $all";

		}
		Object.keys(right).map(function(it) {
			var cond = " $access eq " + it;
			condition = condition ? condition + " or " + cond : cond;
		});
	}
	if (repRight && Object.keys(repRight).length > 0) {
		Object.keys(repRight).forEach(function(key) {

			//filter with condition
			var cond = "( " + repRight.condition + " ) and $type eq " + key;
			condition = condition ? condition + " or " + cond : cond;
		});
	}
	if (condition) {
		_addSdataWhere(search.query, condition);
	}
	_addCacheFilter(_, search, user, endpoint, isFunction);


}


function preProcessSearch(_, q, up, searchType, allowLeading) {

	// If the search string contains any character to suggest it is a regulaer
	// expression then assume specialised knowledge and pass it straight on
	if (q.indexOf(/[\!\$\%\^\&\(\)\_\+\|\~\=\{\}\[\]:\";\'<>]*/) >= 0) {
		return q;
	}

	// Split the query string into individual terms
	var terms = [];
	if (q.indexOf(" ") > 0) {
		terms = q.split(" ");
	} else {
		terms[0] = q;
	}

	var qstr = "";
	for (var t = 0; t < terms.length; t++) {
		var term = terms[t];
		if (!allowLeading) {
			if (term.charAt(0) === "*" || term.charAt(0) === "?") {
				throw new Error("Leading wildcard not allowed in search");
			}
		}
		// Append a space between the search terms
		if (qstr !== "")
			qstr += " ";
		//console.log("term "+term);


		// Regex that should catch all numerical date representations
		var termDate = _convertDateToString(_, term, up);
		exports.tracer && exports.tracer("Date converted to X3 format=> " + termDate);
		if (termDate) {
			term = termDate;
		} else {
			var tlower = term.toLowerCase();
			// Boolean operators simply get appended
			if (tlower !== "or" && tlower !== "and") {
				// ordinary search term - add wildcard if required
				if (searchType === "startsWith") {
					term += "*";
				}
			}
		}
		// Finally append the term
		qstr += term;
	}

	return qstr;
}

function defineExactQuery(searchConfig, q) {
	var allowLeading = (searchConfig.allowLeadingWildcard) ? searchConfig.allowLeadingWildcard : false;

	var query = {

		query_string: {
			query: q, // Exact matches
			default_operator: "AND",
			analyze_wildcard: true,
			allow_leading_wildcard: allowLeading
		}
	};

	return query;
}

function defineFuzzyQuery(searchConfig, q) {
	var minSimilarity = (searchConfig.minSimilarity) ? searchConfig.minSimilarity : 0.5;
	var ignoreFrequency = (searchConfig.ignoreFrequency) ? searchConfig.ignoreFrequency : true;

	var query = {
		fuzzy_like_this: {
			like_text: q,
			max_query_terms: 20,
			min_similarity: minSimilarity,
			ignore_tf: ignoreFrequency,
		}
	};

	return query;
}

function defineExactPlusFuzzyQuery(searchConfig, q) {
	var minSimilarity = (searchConfig.minSimilarity) ? searchConfig.minSimilarity : 0.5;
	var ignoreFrequency = (searchConfig.ignoreFrequency) ? searchConfig.ignoreFrequency : true;
	var allowLeading = (searchConfig.allowLeadingWildcard) ? searchConfig.allowLeadingWildcard : false;

	var query = {
		bool: {
			should: [{
				custom_boost_factor: {
					query: {
						query_string: {
							query: q, // Exact matches
							boost: 100.0,
							//default_operator: "AND",
							analyze_wildcard: true,
							allow_leading_wildcard: allowLeading
						}
					},
					boost_factor: 2.5
				}
			}, {
				constant_score: {
					query: {
						fuzzy_like_this: {
							like_text: q,
							max_query_terms: 20,
							min_similarity: minSimilarity,
							ignore_tf: ignoreFrequency,
							boost: 1.0
						}
					},
					boost: 1.0
				}
			}]
		}
	};

	return query;
}

function _addSyracuseRightFilter(_, allRight, search, user, endpoint, isFunction) {

	var attr = (!isFunction ? "$type" : "representationRef.entity");
	if (!allRight)
		return;
	var right = allRight.$entities;

	if (right && Object.keys(right).length > 0) { //simple right
		search.query.filtered.filter = {};



		var condition = "";
		Object.keys(right).forEach(function(it) {

			// add specific filter restriction regarding condition
			if (right[it].condition && !isFunction) { // can access if condition is ok
				// replace of $uuid
				var cond = "( " + right[it].condition.replace(".$uuid", ".$key").replace("$uuid", "$id") + " ) and " + attr + " eq " + it;

				condition = condition ? condition + " or " + cond : cond;
			} else {
				var cond = attr + " eq " + it;
				condition = !condition ? cond : condition + " or " + cond;
			}
		});
		if (condition) _addSdataWhere(search.query, condition);

	}
	// add cache for store filter
	_addCacheFilter(_, search, user, endpoint, isFunction);

}

function _addCacheFilter(_, search, user, endpoint, isFunction) {

	var queryFilter = search.query.filtered.filter;
	if (queryFilter) {
		var keyFilter = Object.keys(queryFilter).length > 0 ? Object.keys(queryFilter)[0] : null;
		var filter = queryFilter[keyFilter];
		if (filter && (keyFilter === "or" || keyFilter === "and")) {
			search.query.filtered.filter[keyFilter] = {
				filters: filter,
				_cache: true,
				_cacheKey: endpoint.dataset(_) + "_" + user.getEndpointLogin(_, endpoint.$uuid) + "_" + (isFunction ? "function" : "data")

			};
		}
	}
}

exports.search = function(_, context, configOverride) {
	// Default search, find terms that start with the search phrase
	var configOverride = config.searchEngine || {};
	configOverride.searchType = "startsWith";
	return exports.tsearch(_, context, configOverride);
};

// Exact search, find only the terms in the search phrase
exports.xsearch = function(_, context) {
	var configOverride = config.searchEngine || {};
	configOverride.searchType = "exact";
	return exports.tsearch(_, context, configOverride);
};

// Fuzzy search, find terms like those in the search phrase
exports.fsearch = function(_, context) {
	var configOverride = config.searchEngine || {};
	configOverride.searchType = "fuzzy";
	return exports.tsearch(_, context, configOverride);
};

var rights = {};

//Unit test interface allows the configuration to be overridden
exports.tsearch = function(_, context, configOverride) {
	// Allow config from nodelocal.js to be overridden to make sure that
	// unit tests have the correct config settings
	var searchConfig = configOverride || config.searchEngine || {};

	// get version of elastic search
	var urlSegs = [exports.serverConfig.baseUrl];
	if (!elasticVersion) {
		var options = {
			url: urlSegs.join("/"),
			method: "GET"
		};
		var req = streams.httpRequest(options);
		var about = JSON.parse(req.end().response(_).readAll(_));
		elasticVersion = about.version.number.split(".");
	}
	var sources = (context.parameters.source || "data").split(",");
	var filters = jsurl.parse(context.parameters.filters);
	var where = context.parameters.where;
	var adminEP = adminHelper.getCollaborationEndpoint(_);
	var up = context.getUserProfile(_);
	var user = up.user(_);
	var currentEndpoint = up.selectedEndpoint(_);
	var isFunction = context.parameters.source === "functions";
	// get authorized function and authorization from x3
	var right = searchConfig && searchConfig.activateRight ? up.getAccessRightAuthorizations(_) : null;

	if (right && !right.cache) { // purge after reload right (new http session)
		// purge syraucse collaboration cache filter
		var options = {
			url: urlSegs.join("/") + "/_cache/clear?filter_keys=syracuse_" + up.login(_) + "_" + (isFunction ? "function" : "data"),
			method: "GET"
		};
		streams.httpRequest(options).end();

		// purge x3 endpoint cache filter
		var options = {
			url: urlSegs.join("/") + "/_cache/clear?filter_keys=" + currentEndpoint.dataset(_) + "_" + user.getEndpointLogin(_, currentEndpoint.$uuid) + "_" + (isFunction ? "function" : "data"),
			method: "GET"
		};
		streams.httpRequest(options).end();

	}

	var allEntities = [];
	var elasticBaseUrl = exports.serverConfig.baseUrl;
	var indexNames = _selectIndexes(_, elasticBaseUrl, up, sources, (filters && filters.index && filters.index[0]) || context.searchIndexName);
	var endpoints = _selectEndpoints(_, up);
	exports.tracer && exports.tracer("elasticQuery.indexNames: " + sys.inspect(indexNames));
	if (!indexNames.length) return context.reply(_, httpHelper.HttpStatus.NotFound, locale.format(module, "noIndexAvailable", locale.current, elasticHelpers.fallbackLocale));
	//
	//console.log("elasticQuery.context.parameters: " + sys.inspect(context));
	var contextEntity = context.searchEntityName || context.representation.entity;
	var entityName = context.parameters.entity || (contextEntity !== "queryResult" ? contextEntity : "");
	if (entityName) allEntities.push(entityName);
	// entity filter; overrides any entity parameters
	if (filters && filters.type) allEntities = filters.type.slice(0);
	// TODO : entity filter - when user has entity restrictions, generate an entity name like entity1,entity2,entityN
	//
	indexNames.length && urlSegs.push(indexNames.join(","));
	allEntities.length && urlSegs.push(allEntities.join(","));
	// Get Mappings
	var options = {
		url: urlSegs.join("/") + "/_mapping",
		method: "GET"
	};
	var req = streams.httpRequest(options);
	var mappings = JSON.parse(req.end().response(_).readAll(_));
	// if there is one entity only, mappings won't have the index name node. So add it to simplify code
	/*	if((allEntities.length === 1) && (indexNames.length === 1))
		mappings = {
			"index": mappings
		}*/
	var mapKeys = mappings && Object.keys(mappings);
	if (mapKeys && mapKeys.length)
	// first level is NOT an index name ?
		if (indexNames.indexOf(mapKeys[0]) < 0)
		// normalize mappings structure
			mappings = {
				"index": mappings
			};
		//
		// exports.tracer && exports.tracer("elasticQuery.search mappings. Url: " + urlSegs.join("/") + "/_mapping ; result" + sys.inspect(mappings, null, 5));
		// Search
	options = {
		url: urlSegs.join("/") + "/_search",
		method: "POST"
	};

	req = streams.httpRequest(options);
	var q = context.parameters.q || context.parameters.search;
	var searchType = searchConfig.searchType || "startsWith";
	var queryDate;

	try {
		q = preProcessSearch(_, q, up, searchType, searchConfig.allowLeadingWildcard);
	} catch (e) {
		return context.reply(_, httpHelper.HttpStatus.NotFound, locale.format(module, "badSearchString", q));
	}

	// Set up the skeleton of the search before we decide which
	// type of query we will actually be using.
	var search = {
		from: context.parameters.startIndex - 1,
		size: context.parameters.count,
		query: {
			filtered: {
				query: {}
			}
		},
		highlight: {
			fields: {
				"*": {}
			}
		}
	};
	var facetsMap = {};
	indexNames.forEach_(_, function(_, indexName) {
		facetsMap = elasticHelpers.getIndexFacets(_, elasticBaseUrl, indexName, {
			tracer: exports.tracer
		}).reduce(function(prev, f) {
			prev[f.code] = f;
			return prev;
		}, facetsMap);
	});
	_addFacets(search, {
		searchFacets: facetsMap
	});

	// issue 2918 prevent elastic search syntax error 
	if (q.indexOf("/") >= 0) {
		q = q.replace(/\//g, "");
	}

	switch (searchType) {
		case "fuzzy":
			// Exact + fuzzy gives better results than just a fuzzy query
			// search.query = defineFuzzyQuery(searchConfig, q);
			search.query.filtered.query = defineExactPlusFuzzyQuery(searchConfig, q);
			break;
		case "exact":
		case "startsWith":
		default:
			// Exact and startsWith both use the same query type,
			// wildcards are inserted during pre-processing
			search.query.filtered.query = defineExactQuery(searchConfig, q);
			break;
	}
	exports.tracer && exports.tracer("elasticQuery.search query: " + JSON.stringify(search.query, null, "\t"));

	// add management of right for the 2 kind of request.
	if (right && !right.$entities) {
		_addX3RightFilter(_, right, search, user, currentEndpoint, isFunction);
	} else {
		_addSyracuseRightFilter(_, right, search, user, currentEndpoint, isFunction);
	}
	//console.log("search " + JSON.stringify(search, null, 2));


	exports.tracer && exports.tracer("elasticQuery.search facetsMap: " + sys.inspect(facetsMap, null, 4));
	//
	filters && _addFilters(search.query, filters);
	where && _addSdataWhere(search.query, where);
	//
	exports.tracer && exports.tracer("elasticQuery.search query: " + JSON.stringify(search.query, null, "\t"));
	//
	//.log("------------");
	exports.tracer && exports.tracer("search " + JSON.stringify(search, null, 2));
	console.log("search " + JSON.stringify(search, null, 2));
	req.write(_, JSON.stringify(search));

	//console.log("url " + require("util").inspect(options));


	// added for unit test in order to validate the request send to elastic search 
	context.searchRequest = search;
	var resp = req.end().response(_);
	var respData = JSON.parse(resp.readAll(_));
	exports.tracer && exports.tracer("elasticQuery.search response: " + sys.inspect(respData, null, 5));
	//
	if (respData.error) return context.reply(_, respData.status, respData.error);
	//
	var resultRes = {
		$resources: []
	};
	// create resources
	var fEp = endpoints.slice(0);
	if (adminEP && up.endpoints && up.endpoints(_).get(_, adminEP.$uuid) && !fEp.some_(_, function(_, ep) {
		return ep.protocol(_) === "syracuse";
	})) fEp.push(adminEP);
	if (respData.hits && respData.hits.hits) respData.hits.hits.forEach_(_, function(_, hit) {

		//console.log("--------------type "+hit._type);
		// replace source element by hightlight when necessary
		if (hit._type === "function") {
			var r = hit._source.$rawData;
			r && _selectEndpoints(_, up).forEach_(_, function(_, e) {
				if (r.endpoint && (e.$uuid !== r.endpoint)) return;
				if (r.application && (e.applicationRef(_).$uuid !== r.application)) return;
				if (resultRes.$resources.length >= search.size) return;
				resultRes.$resources.push(_makeFunctionResource(_, e, mappings, hit, endpoints.length > 1));
			});
		} else resultRes.$resources.push(_makeResource(_, mappings, hit, context.representation ? context.representation.entity : context.searchEntityName, context.representation.type));

	});
	// create search facets

	function membersMap(item) {
		var facetMember = {
			$title: item.term,
			$value: item.term,
			$count: item.count,
			$links: {}
		};
		if (facet === "type") facetMember.$title = _getTypeTitle(mappings, item.term);
		// filters
		if (filters && filters[facet])
			if (Array.isArray(filters[facet]) && (filters[facet].indexOf(item.term) >= 0)) facetMember.$selected = true;
			// links
		return facetMember;
	}
	var facet;
	if (respData.facets) {
		resultRes.$searchFacets = [];
		for (facet in respData.facets) {
			var facetDef = {};
			if (facet === "type") facetDef = {
				$title: "Type"
			};
			else facetDef = facetsMap[facet];
			resultRes.$searchFacets.push({
				$facet: facet,
				$title: facetDef.description,
				$missing: respData.facets[facet].missing,
				$members: (respData.facets[facet].terms || []).map(membersMap)
			});
		}
	}
	//
	resultRes.query = context.parameters.q || context.parameters.search;

	context.totalCount = respData && respData.hits && respData.hits.total;
	//}

	context.replySearchResults(_, 200, resultRes);

	// purge list of prototype read - optim search 
};