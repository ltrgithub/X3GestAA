"use strict";

var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");
var streams = require("streamline/lib/streams/streams");
var elasticHelpers = require("syracuse-search/lib/helpers");
var helpers = require('syracuse-core/lib/helpers');
var forEachKey = helpers.object.forEachKey;
var jsurl = require("jsurl");
//var indexMeta = require("syracuse-search/lib/indexMeta");
var sys = require("util");
var locale = require("syracuse-core/lib/locale");
var httpHelper = require("syracuse-sdata/lib/httpHelper");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var Parser = require("syracuse-sdata/lib/parser/parser").Parser;

exports.tracer = null;
exports.serverConfig = null;

function _indexToContract(indexName) {
	var parts = indexName.split(".");
	return sdataRegistry.getContract(parts[0], parts[1], false);
}

function _getTypeTitle(mapping, typeName) {
	var title = typeName;
	Object.keys(mapping).forEach(function(idx) {
		var map = mapping[idx][typeName];
		if (map && map._meta && map._meta.$classTitle) title = map._meta.$classTitle;
	});
	return title;
}

function _addFacets(query, contract) {
	if (!contract || !contract.searchFacets) return;
	query.facets = query.facets || {
		type: {
			terms: {
				field: "_type"
			}
		}
	};
	forEachKey(contract.searchFacets, function(key, facet) {
		query.facets[key] = {
			terms: {
				fields: ["facet_" + key]
			}
		};
	});
}

function _addFilters(query, filters) {
	if (!filters) return;
	if (!Object.keys(filters).some(function(k) {
		return (k !== "type");
	})) return;
	//
	var filter = query.filtered.filter = query.filtered.filter || {};
	filter.and = filter.and || [];
	forEachKey(filters, function(key, facet) {
		if (key === "type") return;
		//
		var part = {
			query: {
				terms: {}
			}
		};
		part.query.terms["facet_" + key] = facet.slice(0);
		filter.and.push(part);
	});
}

function _makeFilterFromSdata(where) {
	function _left(where) {
		var result = "";
		if (!where) return result;
		switch (where.type) {
			case "operator":
				switch (where.value.code) {
					case ".":
						result = _left(where.children[0]) + "." + _left(where.children[1]);
						break;
					default:
						throw new Error("_left : \"" + where.value.code + "\" not yet implemented");
				}
				break;
			default:
				result = where.value;
		}
		return result;
	}

	function _format(value, isDate) {
		return isDate ? new Date(value) : ((typeof value === "object") && value.toString()) ? value.toString() : value;
	}

	var result = {};
	var isDate = false;
	switch (where.type) {
		case "operator":
			switch (where.value.code) {
				case "and":
					if (where.children.length < 2) throw new Error("Invalid \"AND\" condition");
					result = {
						and: [_makeFilterFromSdata(where.children[0]), _makeFilterFromSdata(where.children[1])]
					};
					break;
				case "or":
					if (where.children.length < 2) throw new Error("Invalid \"OR\" condition");
					result = {
						or: [_makeFilterFromSdata(where.children[0]), _makeFilterFromSdata(where.children[1])]
					};
					break;
				case "=":
					result.query = {
						field: {}
					};
					result.query.field[_left(where.children[0])] = _format(where.children[1].value, isDate);
					break;
				case "like":
					var right = where.children[1] && _format(where.children[1].value, isDate);
					if (right.charAt(0) != "%") right = "^" + right;
					right = right.replace(/%/g, ".*");
					result.regexp = {};
					result.regexp[_left(where.children[0])] = right;
					break;
				case "in":
					right = where.children.slice(1).map(function(c) {
						return c && _format(c.value, isDate);
					});
					result.terms = {};
					result.terms[_left(where.children[0])] = right;
					break;
				default:
					// range ?
					if (["<", "<=", ">=", ">", "between"].indexOf(where.value.code)) {
						var rg;
						if (typeof where.children[1] === "number") rg = result.numeric_range = {};
						else rg = result.range = {};
						var l = rg[_left(where.children[0])] = {};
						var r = _format(where.children[1].value, isDate);
						switch (where.value.code) {
							case "<":
								l.lt = r;
								break;
							case "<=":
								l.lte = r;
								break;
							case ">":
								l.gt = r;
								break;
							case ">=":
								l.gte = r;
								break;
							case "between":
								l.gte = r;
								l.lte = _format(where.children[2].value, isDate);
								break;
						}
					}
			}
			break;
		default:
			throw new Error(where.type + " not yet implemented");
	}
	return result;
}

function _addSdataWhere(query, where) {
	// accept string sdata clause or parsed sdata clause
	if (where && (typeof where === "string")) where = Parser.parse(where);
	//
	return query.filtered.filter = _makeFilterFromSdata(where);
	//
	var filter = query.filtered.filter = query.filtered.filter || {};
	filter.and = filter.and || [];
	//
	filter.and.push(_makeFilterFromSdata(where));
}

function _getDescriptionResult(source) {
	var r;
	if (Array.isArray(source)) {
		r = source.map(function(item) {
			return _getDescriptionResult(item);
		}).filter(function(item) {
			return item;
		}).join(", ");
	} else if (typeof source === "object") {
		r = Object.keys(source).filter(function(k) {
			//			return ((k[0] != "$") && (Array.isArray(source[k]) || (typeof source[k] !== "object")));
			return (k[0] !== "$");
		}).map(function(k) {
			return _getDescriptionResult(source[k]);
		}).filter(function(item) {
			return item;
		}).join(", ");
	} else r = (typeof source === "string" ? source : source.toString());
	return (r.length > 512) ? r.substr(0, 512) + " ..." : r;
}

function _makeFunctionResource(_, endpoint, mapping, hit, isMultiEP) {
	var title = _getTypeTitle(mapping, hit._type);
	// items base url
	var localized = isMultiEP ? locale.format(module, "functionMultiDescription", hit._source.$description, endpoint.description(_)) : locale.format(module, "functionMonoDescription", hit._source.$description);
	var r = {
		$url: hit._source.$url,
		$baseUrl: endpoint.getBaseUrl(_),
		$uuid: hit._id,
		type: title,
		$representation: hit._type,
		title: localized,
		description: _getDescriptionResult(hit._source),
		icon: (hit._source.$icon ? {
			$url: hit._source.$icon,
			$type: "image"
		} : null),
		$properties: {
			title: {
				$links: {
					$details: {
						$type: "application/json;vnd.sage=syracuse",
						$url: "{$url}",
						$method: hit._source.$method
					}
				}
			}
		}
	};
	if (hit._source.linkType === "$function") r.$baseUrl = r.$baseUrl.replace("/sdata/", "/trans/");
	return r;
}

function _makeResource(mapping, hit, representation, resFormat) {
	var title = _getTypeTitle(mapping, hit._type);
	// items base url
	// hint: for now, $description goes into title and description is a concatenation of all fields
	var r;
	switch (resFormat) {
		case "$query":
		case "$lookup":
		case "$select":
			r = hit._source;
			break;
		default:
			r = {
				$url: hit._source.$url,
				$uuid: hit._id,
				type: title,
				$representation: hit._type,
				title: hit._source.$description,
				description: _getDescriptionResult(hit._source),
				icon: (hit._source.$icon ? {
					$url: hit._source.$icon,
					$type: "image"
				} : null),
				$properties: {
					title: {
						$links: {
							$details: {
								$type: "application/json;vnd.sage=syracuse",
								$url: "{$url}"
							}
						}
					}
				}
			};
	}
	// substitute representation for given representation
	if (representation !== "queryResult") r.$url = r.$url.replace(/representation=.*\.\$/, "representation=" + representation + ".$");
	//
	r.$key = hit._id;
	return r;
}

//select existing indexes available to the user

function _selectIndexes(_, elasticBaseUrl, userProfile, sources, selectedIndexName) {
	function _addIndex(_, indexName, localeCode) {
		var idx = indexName + "." + localeCode.toLowerCase();
		if (elasticHelpers.indexExists(_, elasticBaseUrl, idx)) indexes.push(idx);
		else(localeCode !== elasticHelpers.fallbackLocale) && _addIndex(_, indexName, elasticHelpers.fallbackLocale);
	}

	function _addEP(_, ep, localeCode) {
		var idx = ep.getIndexName(_, localeCode || locale.current);
		if (elasticHelpers.indexExists(_, elasticBaseUrl, idx)) {
			indexes.push(idx);
		} else(localeCode !== elasticHelpers.fallbackLocale) && _addEP(_, ep, elasticHelpers.fallbackLocale);
	}
	//
	var indexes = [];
	if (sources.indexOf("data") >= 0) {
		if (selectedIndexName) _addIndex(_, selectedIndexName, locale.current);
		else {
			if (userProfile) {
				if (userProfile.selectedEndpoint(_)) _addEP(_, userProfile.selectedEndpoint(_));
				else {
					userProfile.endpoints(_).toArray(_).forEach_(_, function(_, endpoint) {
						_addEP(_, endpoint);
					});
				}
			}
		}
	}
	if (sources.indexOf("functions") >= 0) _addIndex(_, elasticHelpers.functionIndexName, locale.current);
	//
	return indexes;
}

// select endpoints available to the user

function _selectEndpoints(_, userProfile) {
	var eps = [];
	if (userProfile) {
		if (userProfile.selectedEndpoint(_)) eps.push(userProfile.selectedEndpoint(_));
		else {
			eps = userProfile.endpoints(_).toArray(_).slice(0);
		}
	}
	return eps;
}

exports.search = function(_, context) {
	var sources = (context.parameters.source || "data").split(",");
	var filters = jsurl.parse(context.parameters.filters);
	var where = context.parameters.where;
	var adminEP = adminHelper.getCollaborationEndpoint(_);
	var up = context.getUserProfile(_);
	// TODO: as we cannot match an entity and his index, we should execute search one index at a time
	// to allow search on index1.entity1 and index2.entity2 but not index1.entity2
	// for now just push entities into allEntities.
	//
	// load index names
	var allEntities = [];
	var elasticBaseUrl = exports.serverConfig.baseUrl;
	var indexNames = _selectIndexes(_, elasticBaseUrl, up, sources, (filters && filters.index && filters.index[0]) || context.searchIndexName);
	var endpoints = _selectEndpoints(_, up);
	exports.tracer && exports.tracer("elasticQuery.indexNames: " + sys.inspect(indexNames));
	if (!indexNames.length) return context.reply(_, httpHelper.HttpStatus.NotFound, locale.format(module, "noIndexAvailable", locale.current, elasticHelpers.fallbackLocale));
	//
	//exports.tracer && exports.tracer("elasticQuery.context.parameters: " + sys.inspect(context));
	var contextEntity = context.searchEntityName || context.representation.entity;
	var entityName = context.parameters.entity || (contextEntity !== "queryResult" ? contextEntity : "");
	if (entityName) allEntities.push(entityName);
	// entity filter; overrides any entity parameters
	if (filters && filters.type) allEntities = filters.type.slice(0);
	// TODO : entity filter - when user has entity restrictions, generate an entity name like entity1,entity2,entityN
	//
	var urlSegs = [exports.serverConfig.baseUrl];
	indexNames.length && urlSegs.push(indexNames.join(","));
	allEntities.length && urlSegs.push(allEntities.join(","));
	// Get Mappings
	var options = {
		url: urlSegs.join("/") + "/_mapping",
		method: "GET"
	};
	var req = streams.httpRequest(options);
	var mappings = JSON.parse(req.end().response(_).readAll(_));
	// if there is one entity only, mappings won't have the index name node. So add it to simplify code
	/*	if((allEntities.length === 1) && (indexNames.length === 1))
		mappings = {
			"index": mappings
		}*/
	var mapKeys = mappings && Object.keys(mappings);
	if (mapKeys && mapKeys.length)
	// first level is NOT an index name ?
		if (indexNames.indexOf(mapKeys[0]) < 0)
		// normalize mappings structure
			mappings = {
				"index": mappings
			};
		//
	exports.tracer && exports.tracer("elasticQuery.search mappings. Url: " + urlSegs.join("/") + "/_mapping ; result" + sys.inspect(mappings, null, 5));
	// Search
	options = {
		url: urlSegs.join("/") + "/_search",
		method: "POST"
	};
	req = streams.httpRequest(options);
	var q = context.parameters.q || context.parameters.search;
	var search = {
		from: context.parameters.startIndex - 1,
		size: context.parameters.count,
		query: {
			filtered: {
				query: {
					query_string: {
						default_field: "_all",
						query: q + (q[q.length - 1] !== "*" ? "*" : ""), // experimental, add * after the query to have incremental search
						default_operator: "AND",
						analyze_wildcard: true
					}
				}
				/*,
				filter: { // right management example
					and: [{
						or: [{
							query: {
								field: {
									authorizations: "Administrator"
								}
							}
						}, {
							missing: {
								field: "authorizations"
							}
						}]
					}]
				}*/
			}
		}
	};
	//
	var facetsMap = {};
	indexNames.forEach_(_, function(_, indexName) {
		facetsMap = elasticHelpers.getIndexFacets(_, elasticBaseUrl, indexName, {
			tracer: exports.tracer
		}).reduce(function(prev, f) {
			prev[f.code] = f;
			return prev;
		}, facetsMap);
	});
	_addFacets(search, {
		searchFacets: facetsMap
	});
	exports.tracer && exports.tracer("elasticQuery.search facetsMap: " + sys.inspect(facetsMap, null, 4));
	//
	filters && _addFilters(search.query, filters);
	where && _addSdataWhere(search.query, where);
	//
	exports.tracer && exports.tracer("elasticQuery.search query: " + sys.inspect(search, null, 8));
	//
	req.write(_, JSON.stringify(search));
	var resp = req.end().response(_);
	var respData = JSON.parse(resp.readAll(_));
	exports.tracer && exports.tracer("elasticQuery.search response: " + sys.inspect(respData, null, 5));
	//
	if (respData.error) return context.reply(_, respData.status, respData.error);
	//
	var resultRes = {
		$resources: []
	};
	// create resources
	var fEp = endpoints.slice(0);
	if (up.endpoints(_).get(_, adminEP.$uuid) && !fEp.some_(_, function(_, ep) {
		return ep.protocol(_) === "syracuse";
	})) fEp.push(adminEP);
	if (respData.hits && respData.hits.hits) respData.hits.hits.forEach_(_, function(_, hit) {
		if (hit._type === "function") {
			var r = hit._source.$rawData;
			r && fEp.forEach_(_, function(_, e) {
				if (r.endpoint && (e.$uuid !== r.endpoint)) return;
				if (r.application && (e.applicationRef(_).$uuid !== r.application)) return;
				resultRes.$resources.push(_makeFunctionResource(_, e, mappings, hit, endpoints.length > 1));
			});
		} else resultRes.$resources.push(_makeResource(mappings, hit, context.representation.entity, context.representation.type));
	});
	// create search facets

	function membersMap(item) {
		var facetMember = {
			$title: item.term,
			$value: item.term,
			$count: item.count,
			$links: {}
		};
		if (facet === "type") facetMember.$title = _getTypeTitle(mappings, item.term);
		// filters
		if (filters && filters[facet])
			if (Array.isArray(filters[facet]) && (filters[facet].indexOf(item.term) >= 0)) facetMember.$selected = true;
			// links
		return facetMember;
	}
	var facet;
	if (respData.facets) {
		resultRes.$searchFacets = [];
		for (facet in respData.facets) {
			var facetDef = {};
			if (facet === "type") facetDef = {
				$title: "Type"
			};
			else facetDef = facetsMap[facet];
			resultRes.$searchFacets.push({
				$facet: facet,
				$title: facetDef.description,
				$missing: respData.facets[facet].missing,
				$members: (respData.facets[facet].terms || []).map(membersMap)
			});
		}
	}
	//
	resultRes.query = q;
	if (resultRes.$resources.length < search.size) {
		context.totalCount = resultRes.$resources.length;
	} else {
		context.totalCount = respData && respData.hits && respData.hits.total;
	}
	context.replySearchResults(_, 200, resultRes);
};