"use strict";

var streams = require("streamline/lib/streams/streams");
var locale = require("syracuse-core/lib/locale");
var sys = require("util");

var logger = require("syracuse-trace").getLogger("search");
exports.functionIndexName = "sage.x3.functions";
exports.fallbackLocale = "en-us";

exports.indexExists = function(_, baseUrl, indexName, options) {
	var opt = options || {};
	var par = {
		url: baseUrl + "/" + indexName,
		method: 'HEAD'
	};
	logger.debug() && logger.debug("elasticIndex.index indexExists: url: " + par.url);
	// TODO: configure if elasticSearch really exists for this server
	try {
		var resp = streams.httpRequest(par).end().response(_);
		logger.debug() && logger.debug("elasticIndex.index exists status: " + resp.statusCode);
		resp.readAll(_);
		return (resp.statusCode === 200);
	} catch (e) {
		if (!opt.silent) {
			if (e.code === "ECONNREFUSED") {
				throw new Error(locale.format(module, "connRefused", baseUrl));
			}

			// Re-throw the original error		    
			throw e;
		}
		return false;
	}
};


exports.getIndexFacets = function(_, baseUrl, indexName, options) {
	var opt = options || {};
	// TODO: real pagination
	var par = {
		url: baseUrl + "/" + indexName + "/$facet/_search?q=*&size=1000",
		method: 'GET'
	};
	logger.debug() && logger.debug("elasticIndex.index getIndexFacets: url: " + par.url);
	var resp = streams.httpRequest(par).end().response(_);
	logger.debug() && logger.debug("elasticIndex.index getIndexFacets status: " + resp.statusCode);
	var content = resp.readAll(_);
	logger.debug() && logger.debug("elasticIndex.index getIndexFacets content: " + content);
	if (resp.statusCode === 200) {
		content = JSON.parse(content);
		return ((content.hits && content.hits.hits) || []).map(function(h) {
			return h._source;
		});
	}

	// Return an empty array
	return [];
};

exports.checkStartSearchEngine = function(_, baseUrl, diag, onlyError, asInfo) {

	diag = diag || [];
	try {
		var par = {
			url: baseUrl,
			method: 'GET'
		};

		var resp = streams.httpRequest(par).end().response(_);
		if (resp.statusCode === 200) {
			if (!onlyError) {
				diag.push({
					$severity: "info",
					$message: locale.format(module, "searchEngineOK", baseUrl)
				});
				logger.info() && logger.info("Search engine is ok " + baseUrl);
			}
		} else {
			diag.push({
				$severity: asInfo ? "info" : "error",
				$message: locale.format(module, "searchEngineNotOK") + "\n [" + resp.statusCode + "]"
			});
			logger.error() && logger.error("Search engine is not ok " + "\n [" + resp.statusCode + "]");
		}
	} catch (e) {
		diag.push({
			$severity: asInfo ? "info" : "error",
			$message: locale.format(module, "searchEngineNotOK") + "\n [" + e.stack + "]"
		});
		logger.error() && logger.error("Search engine is not ok " + "\n [" + e.stack + "]");
	}

	return;
};