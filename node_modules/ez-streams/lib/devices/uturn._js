"use strict";

var generic = require('./generic');

var lastId = 0;

module.exports = {
	/// !doc
	/// ## Special device that transforms a writer into a reader
	/// 
	/// `var ez = require('ez-streams');`
	/// 
	/// * `uturn = ez.devices.uturn.create()`  
	///   creates a uturn device.  
	///   The device has two properties: a `uturn.writer` to which you can write,   
	///   and a `uturn.reader` from which you can read.  
	create: function(parent, stopParent) {
		var xcb, xerr, xval, state = 0, done = false;
		var debugId = ++lastId;
		var bouncer = function(st) {
			return _(function(cb, val) {
				console.error(debugId + ": UTURN: " + (st === 1 ? "READING" : "WRITING"));
				setImmediate(function() {
					if (st === -1 && val === undefined) done = true;
					if (done) val = undefined;
					if (xerr) return cb(xerr);
					if (state === st) return cb(new Error(st === 1 ? "already reading" : "already writing"));
					if (state === -st) {
						// reverse operation pending
						try {
							xcb(null, val);
						} catch (e) {
							xerr = xerr || e;
						}
						cb(xerr, xval);
						xval = undefined;
						xcb = null;
						state = 0;
					} else if (done) {
						// state === 0 - nothing pending but read or write after eof
						cb(xerr);
					} else {
						// state === 0 - nothing pending
						xval = val;
						xcb = cb;
						state = st;
					}			
				});
			}, 0);
		};
		var end = function(err) {
			console.error(debugId + ": UTURN: end, done=" + done + ", xcb=" + typeof xcb);
			setImmediate(function() {
				if (done) return;
				xerr = xerr || err;
				done = true;
				if (state !== 0) {
					state = 0;
					xcb(xerr);
					xcb = null;
				}
			});
		};
		var stopper = function(st) {
			var stopped = false;
			return function(arg) {
				console.error(debugId + ": UTURN STOP: st=" + st + ", arg=" + arg + ", xcb=" + typeof xcb);
				if (stopped) return;
				stopped = true;
				done = true;
				if (arg && arg !== true) xerr = xerr || arg;
				if (st === 1) api.writer.orphan = true;
				else api.reader.orphan = true;
				this.ended = true;
				if (parent && (arg || stopParent || (st === 1 && api.reader.orphan))) parent.stop(arg);
				if (arg) {
					if (st === 1) api.writer.stop(arg);
					else api.reader.stop(arg);
				}

				setImmediate(function() {
					if (xcb) console.error("UTURN: IMMEDIATE ")
					if (xcb) xcb(xerr);
					xcb = null;
					state = 0;
				});
			};
		}
		var api = {
			reader: generic.reader(bouncer(1), stopper(1)),
			writer: generic.writer(bouncer(-1), stopper(-1)),
			end: end,
		};
		return api;
	},
};