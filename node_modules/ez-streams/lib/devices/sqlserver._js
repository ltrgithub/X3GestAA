"use strict";

var generic = require('./generic');
var tds = require('tedious');
var dru = require('etna-util/lib/drivers-util') ;

var map = [];

var req;

module.exports = {
    /// * `reader = ez.devices.mysql.reader(connection, sql, args)`   
    reader: function (connection, sql, args) {
        var received = [],
            error, callback, done;
        var low = 0,
            high = 3;

        // handle the pause/resume dance
        var paused = false;

        function push(record) {
            received.push(record);
            if (received.length === high) {
                connection.socket.pause();
                paused = true;
            }
        }

        function shift() {
            if (received.length === low + 1) {
                paused = false;
                connection.socket.resume();
            }
            return received.shift();
        }

        // override release because we need to destroy if connection is released before the end of the reader
        // would be nice to have an API to abort the query without destroying the connection
        var release = connection.release;
        connection.release = function () {
            if (paused) this.destroy();
            else release.call(this);
        }


        function sendResult(columns) {
            return send(null, dru.tdsColumnsToRow(columns));
        }

        function send(err, result) {
            var cb = callback;
            callback = null;
            if (cb) {
                if(result) {
                    cb(err, result);
                } else {
                    done = true;
                    cb(null);
                }
            }
            else {
                error = error || err;
                if (result){
                    push(result);  
                } 
                else {
                    done = true;
                }
            }
        }

        var reader = generic.reader(_(function (cb) {
            if (error) return cb(error);
            if (received.length) return cb(null, shift());
            if (done) return cb(null,null);

            callback = cb;
        }, 0));
        reader.context = {};

        var req = new tds.Request(sql, function (err, rowCount) {
            return send(null, null);
        });

		dru.tdsAddParameters( req, args ) ;

        //req.on('error', send)                 
        req.on('row', sendResult)
        //stmt.on('columnMetadata', function(fields) { reader.context.fields = fields;} );*/
        done = false;

        connection.execSql(req);

        return reader;
    },
    /// * `writer = ez.devices.mysql.writer(connection, sql)`  

    writer: function (connection, sql) {
        var done;
        return generic.writer(function (_, obj) {
            var req = new tds.Request(sql, ~_);

            if (obj === undefined) done = true;
            if (!done) {
                var vals = Array.isArray(obj) ? obj : Object.keys(obj).map(function (k) {
                    return obj[k];
                });
                for (i = 0; i < vals.length; i++)
                    req.addParameter(i, vals[i]);

                connection.execSql(req);
            }
        });
    },
};