"use strict";

var helpers = require('syracuse-core/lib/helpers');

exports.SadFsqFile = helpers.defineClass(function(option) {
	this.path = option.path ? option.path : null;
	this.name = option.name ? option.name : null;
	this.extension = option.extension ? option.extension : null;
	this.folder = option.folder ? option.folder : null;
	this.volume = option.volume ? option.volume : null;
	this.server = option.server ? option.server : null;
	this.canonical = option.canonical ? option.canonical : null;
	if (option && option.describer) {
		var idx = option.describer.indexOf(",");
		if (idx !== -1) {
			if (idx === 0) throw new Error("non canonical path TODO");

			option.describer.split(',').map(function(item, i) {
				switch (i) {
					case 0:
						this.path = item;
						break;
					case 1:
						this.name = item;
						break;
					case 2:
						this.extension = item;
						break;
					case 3:
						this.folder = item;
						break;
					case 4:
						this.volume = item;
						break;
					case 5:
						this.server = item;
						break;
					default:
						throw new Error("too many part in canonical describer (max 6). TODO");
				}
			});
		} else {
			var lastIdxSep = option.describer.lastIndexOf('\\');
			if (lastIdxSep === -1) lastIdxSep = option.describer.lastIndexOf('/');
			if (lastIdxSep !== -1) {
				this.path = option.describer.substring(0, lastIdxSep).replace("\\", "/");
				this.name = option.describer.substring(lastIdxSep + 1);
				// get extension
				var spl = this.name.split('.');
				this.extension = spl.length > 1 ? spl[1] : null;
				this.name = spl[0];
			}
		}
	}

	// calcul canonicalName if necessaire
	if (!this.canonical) {
		this.canonical = "";
		if (this.path && this.path.indexOf('!') === 0) {
			if (this.server) {
				this.canonical += this.server;
			}
			this.canonical += "@";
		} else {
			this.canonical += "@";
			if (this.folder) {
				this.canonical += this.folder + ".";
			}
		}
		if (this.path) {
			if (this.path.indexOf('!')) {
				this.canonical += this.path.substring(1);
			} else {
				this.canonical += this.path;
			}
		}
		if (this.canonical.charAt(this.canonical.length - 1) !== '/') this.canonical += "/";
		if (this.name) this.canonical += this.name;
		if (this.extension) this.canonical + (this.name ? '$' : '.') + this.extension;

	}

	this.binary = option.binary ? option.binary : new Buffer([]); // binary readed or to write (setted during readFile or writeFile)
	this.fileInfo = {};
	this.err = [];
	this.fd = option.fd ? option.fd : null;
	this.pid = option.pid ? option.pid : null;
}, null, {});