"use strict";

var helpers = require('syracuse-core/lib/helpers');
var T_EFF = 10; //delete file
var T_ERR = 6; //get error message
var T_INI = 1; //initializatio of server
var T_KUS = 15; //stop processus
var T_OUF = 2; //open file
var T_OUP = 4; //open pip
var T_OUS = 3; //open system file
var T_PAT = 8; //get absolute path
var T_PRM = 7; //get access right

function hasError(buffer) {
	return buffer[0] & 0x80 !== 0;
}

exports.SadFsqComm = helpers.defineClass(function(_, stream) {
	this.stream = stream;
}, null, {
	// write buffer in remote file
	_getBufLaunch: function(_) { //TODO
	},
	processLaunch: function(_) { //TODO
	},

	_getBufSEBF: function(_) { //TODO
	},
	processSEBF: function(_) { //TODO

	},

	// close remote open file
	_getBufSFER: function(_) { // TODO
	},
	processSFER: function(_) { // TODO
	},

	// read all buffer from remote file
	_getBufSLBF: function(_, sadFile) { // TODO
	},
	processSLBF: function(_, sadFile) { // TODO
	},

	// 
	_getBufTOUS: function(_) { // TODO 
	},
	processTOUS: function(_) { // TODO 
	},

	// get Erro r
	_getBufTERR: function(_, sadFile) { // TODO 

		// order
		var orderBuf = new Buffer([T_ERR]);
		return Buffer.concat([new Buffer([0x00]), new Buffer([0x01]), orderBuf]);
	},
	processTERR: function(_, sadFile) { // TODO 
	},


	// delete file 
	_getBufTEFF: function(_, sadFile) { // TODO 
	},
	processTEFF: function(_, sadFile) { // TODO 
	},

	// kill remote processus
	_getBufTKUS: function(_) { // TODO
	},
	processTKUS: function(_) { // TODO
	},

	// open remote file 
	_getBufTOUF: function(sadFile, openMod) {
		var fileDescriberBuff = new Buffer(sadFile.canonicalName, 'utf-8');

		// len util 
		var lenUtilBuf = new Buffer(2);
		lenUtilBuf.writeInt16BE(fileDescriberBuff.length + 6, 0);


		// order
		var orderBuf = new Buffer([T_OUF]);

		//file descr buff len + 2
		var fdbufflen = new Buffer(2);
		fdbufflen.writeInt16BE(fileDescriberBuff.length + 2, 0);

		// file descr len 
		var fdlen = new Buffer(2);
		fdlen.writeInt16BE(sadFile.fileDescriber.length, 0);


		var openModBuff = new Buffer(openMod, 'utf-8');
		var openModBuffLen = new Buffer(2);
		openModBuffLen.writeInt16BE(openModBuff.length + 2, 0);
		var openModLen = new Buffer(2);
		openModLen.writeInt16BE(openMod.length, 0); // openMod length

		return Buffer.concat([new Buffer([0x00]), lenUtilBuf, orderBuf, fdbufflen, fdlen, fileDescriberBuff, openModBuffLen, openModLen, openModBuff]);

	},
	processTOUF: function(_, sadFile, openMod) { //TODO
		// write open order
		this.stream.write(_, _getBufTOUF(sadFile));
		// read result 
		var buf = this.stream.read(_, 4);
		if (hasError(buf)) {
			//get Error
			sadFile.err = 256 - buf.readUInt8();
		} else {
			sadFile.fileNum = buf.readInt8();
		}

	},

	// create remote process
	_getBufTOUP: function(_) { //TODO
	},
	processTOUP: function(_) { //TODO
	},

	// get remote file path
	_getBufTPAT: function(_) { //TODO
	},
	processTPAT: function(_) { //TODO
	},
	// get file information
	_getBufTPRM: function(sadFile, option) { //TODO
		if (option !== "size" && option !== "stamp") {
			throw new Error("not valid option for get Info . TODO");
		}
		var fileDescriberBuff = new Buffer(sadFile.canonical, 'utf-8');

		// len util 
		var lenUtilBuf = new Buffer(2);
		lenUtilBuf.writeInt16BE(fileDescriberBuff.length + 6, 0);


		// order
		var orderBuf = new Buffer([T_PRM]);

		// option size or stamp 
		var optionBuf = new Buffer([option === "size" ? 8 : 10]);

		//file descr buff len + 2
		var fdbufflen = new Buffer(2);
		fdbufflen.writeInt16BE(fileDescriberBuff.length + 2, 0);

		// file descr len 
		var fdlen = new Buffer(2);
		fdlen.writeInt16BE(sadFile.canonical.length, 0);

		return Buffer.concat([new Buffer([0x00]), lenUtilBuf, orderBuf, optionBuf, fdbufflen, fdlen, fileDescriberBuff]);

	},
	processTPRM: function(_, sadFile) { //TODO
	}

});