"use strict";

var helpers = require('syracuse-core/lib/helpers');

var tracer = console.log;

var T_INI = {
	descr: "T_INI",
	id: 1,
	len: 6,
	lenUtil: ["canonical"]
}; //initializatio of server
var T_OUF = {
	descr: "T_OUF",
	id: 2,
	len: 9,
	lenUtil: ["canonical", "openMod"]
}; //open file
var T_OUS = {
	descr: "T_OUS",
	id: 3,
	len: 6,
	lenUtil: ["canonical"]
}; //open system file
var T_OUP = {
	descr: "T_OUP",
	id: 4,
	len: 9,
	lenUtil: ["canonical", "openMod"]
}; //open pip
var T_ERR = {
	descr: "T_ERR",
	id: 6,
	len: 5,
	lenUtil: ["canonical"]
}; //get error message
var T_PRM = {
	descr: "T_PRM",
	id: 7,
	len: 6,
	lenUtil: ["canonical"]
}; //get access right
var T_PAT = {
	descr: "T_PAT",
	id: 8,
	len: 5,
	lenUtil: ["canonical"]
}; //get absolute path
var T_EFF = {
	descr: "T_EFF",
	id: 10,
	len: 5,
	lenUtil: ["canonical"]
}; //delete file
var T_KUS = {
	descr: "T_KUS",
	id: 15,
	len: 6,
	lenUtil: ["canonical"]
}; //stop processus

function hasError(buffer) {
	return buffer[0] & 0x80 !== 0;
}

function getBuffers(order, params) {
	var buffers = {};
	var sadFile = params.sadFile;
	switch (order) {
		case T_INI: //initializatio of server
		case T_OUF: //open file
		case T_OUS: //open system file
		case T_OUP: //open pip
		case T_ERR: //get error message
		case T_PRM: //get access right
		case T_PAT: //get absolute path
		case T_EFF: //delete file
			break;
		case T_KUS: //stop processus
			break;
		default:
			throw new Error("bad order");
	}
	buffers.infoId = {
		descr: "information id",
		buf: function() {
			var infoId = 8; // size by default;
			if (params.infoId && params.infoId === "stamp") {
				infoId = 10;
			}
			var buf = new Buffer(1);
			buf.writeInt8(infoId, 0);
			return buf;
		}
	};
	// init
	buffers.init = {
		descr: "Init buffer",
		buf: function() {
			return new Buffer([0x00]);
		}
	};
	// canonical
	buffers.canonical = {
		descr: "Canonical name",
		buf: function() {
			return new Buffer(sadFile.canonical, 'utf-8');
		}
	};

	// order
	buffers.order = {
		descr: "Order [" + order.descr + "]",
		buf: function() {
			return new Buffer([order.id]);
		}
	};
	buffers.openMod = {
		descr: "OpenMod Buffer",
		buf: function() {
			return new Buffer(params.openMod ? params.openMod : "", "utf-8");
		}

	};

	buffers.openModLen = {
		descr: "OpenMod size",
		buf: function() {
			var openModLen = new Buffer(2);
			openModLen.writeInt16BE((params.openMod ? params.openMod.length : 0), 0);
			return openModLen;
		}
	};

	buffers.openModBufLen = {
		descr: "OpenMod buffer size",
		buf: function() {
			var openModBufLen = new Buffer(2);
			openModBufLen.writeInt16BE(buffers.openMod.buf().length + 2, 0);
			return openModBufLen;
		}

	};


	// file descr buffer length + 2
	buffers.canonicalBufLen = {
		descr: "File descriptor size",
		buf: function() {
			var canonicalBufLen = new Buffer(2);
			canonicalBufLen.writeInt16BE(buffers.canonical.buf().length + 2, 0);
			return canonicalBufLen;
		}
	};

	// canonical (nb character) length
	buffers.canonicalLen = {
		descr: "Nb char of file descriptor",
		buf: function() {
			var canonicalLen = new Buffer(2);
			canonicalLen.writeInt16BE(sadFile.canonical.length, 0);
			return canonicalLen;
		}
	};
	// len util 
	buffers.lenUtil = {
		descr: "Length to follow",
		buf: function() {
			var lenUtil = new Buffer(2);
			var size = 0;
			for (var i in order.lenUtil) {
				var item = buffers[order.lenUtil[i]];
				size += item.buf().length;
			}
			lenUtil.writeInt16BE(size + order.len, 0);
			return lenUtil;
		}
	};


	return buffers;

}

function bufferConcat(table) {
	var buf = new Buffer([]);
	table.map(function(item, i) {
		if (item.buf) {
			var b = item.buf();
			tracer && tracer("Buffer[" + i + "] (" + item.descr + ") = " + b.toString('hex'));
			buf = Buffer.concat([buf, b]);
		} else {
			tracer & tracer("no method buf for item ");
		}
	});
	return buf;
}

/// !doc
/// 
/// # SadFsqComm module
/// 
/// DO NOT USE THIS MODULE DIRECTLY !!!  
/// This documentation is only provided to understand the protocol layer !  
/// 
/// To interface with adxadmin server, please refer to [SadFsqClient module API](https://github.com/Sage-ERP-X3/Syracuse/blob/master/node_modules/syracuse-adxadmin/lib/sadfsq/sadfsqClient.md "SadFsqClient module API").
/// 
/// ---
exports.SadFsqComm = helpers.defineClass(function(_, stream) {
	this.stream = stream;
}, null, {

	/// #Connection
	/// 
	/// This chapter describes connection sequence with AdxAdmin server component.  
	/// 
	/// 
	/// ##**Connection**
	/// 
	/// Opening classic TCP/IP socket on 'server:port' with print server.  
	/// 
	///   - **First step** : open session.  
	///      - Request 1 :  
	///         - **2-bytes** : fixed to identify connection type.  
	///      - Reply 1 :  
	///         - **4-bytes** : corresponding to the connection ID gave by the print server.  
	/// 
	/// ---
	/// 
	// write buffer in remote file
	_getBufLaunch: function(_) { //TODO
	},
	processLaunch: function(_) { //TODO
	},


	/// #Remote files management
	/// 
	/// This chapter describes different sequences that allow to manage remote files with AdxAdmin server component.  
	/// 
	/// 
	_getBufSEBF: function(_) { //TODO
	},
	processSEBF: function(_) { //TODO

	},

	// close remote open file
	_getBufSFER: function(_) { // TODO
	},
	processSFER: function(_) { // TODO
	},

	// read all buffer from remote file
	_getBufSLBF: function(_, sadFile) { // TODO
	},
	processSLBF: function(_, sadFile) { // TODO
	},

	// 
	_getBufTOUS: function(_) { // TODO 
	},
	processTOUS: function(_) { // TODO 
	},

	/// ##**Action T_EFR**
	/// 
	/// Get error.  
	/// 
	///    - Request :  
	///       - **1-byte** : fixed: 0x00. 
	///       - **2-bytes** : (Short) The length to follow. fixed: 0x00,0x01 
	///       - **1-byte** : order id = 6. 
	///    - Reply :  
	///       - **X-bytes** : TODO.  
	/// 
	/// ---
	/// 
	_getBufTERR: function() { // TODO 
		// order
		return new Buffer([0x00, 0x00, 0x01, 0x06]);
	},

	processTERR: function(_) { // TODO 
	},

	/// ##**Action T_EFF**
	/// 
	/// Delete remote file.  
	/// 
	///    - Request :  
	///       - **1-byte** : fixed: 0x00. 
	///       - **2-bytes** : (Short) The length to follow. 
	///       - **1-byte** : order id = 10. 
	///       - **2-bytes** : (short) The file descriptor buffer length + 2. 
	///       - **2-bytes** : (short) The file descriptor characters count. 
	///       - **N-bytes** : The canonical file descriptor string (utf-8). 
	///    - Reply :  
	///       - **X-bytes** : TODO.  
	/// 
	/// ---
	/// 
	_getBufTEFF: function(sadFile) { // TODO 
		var buffers = getBuffers(T_EFF, {
			sadFile: sadFile
		});
		return bufferConcat([buffers.init, buffers.lenUtil, buffers.order, buffers.canonicalBufLen, buffers.canonicalLen, buffers.canonical]);

	},
	processTEFF: function(_, sadFile) { // TODO 

	},

	/// ##**Action T_KUS**
	/// 
	/// Kill remote processus.  
	/// 
	///    - Request :  
	///       - **1-byte** : fixed: 0x00. 
	///       - **2-bytes** : (Short) The length to follow. 
	///       - **1-byte** : order id = 7. 
	///       - **X-bytes** : TODO
	///    - Reply :  
	///       - **X-bytes** : TODO.  
	/// 
	/// ---
	/// 
	_getBufTKUS: function(_) { // TODO
	},
	processTKUS: function(_) { // TODO
	},

	/// ##**Action T_OUF**
	/// 
	/// Open remote file.  
	/// 
	///    - Request :  
	///       - **1-byte** : fixed: 0x00. 
	///       - **2-bytes** : (Short) The length to follow. 
	///       - **1-byte** : order id = 2. 
	///       - **2-bytes** : (short) The file descriptor buffer length + 2. 
	///       - **2-bytes** : (short) The file descriptor characters count. 
	///       - **N-bytes** : The canonical file descriptor string (utf-8). 
	///       - **2-bytes** : (short) The open mode buffer length + 2. 
	///       - **2-bytes** : (short) The open mode characters count. 
	///       - **N-bytes** : The open mode string (utf-8). 
	///    - Reply :  
	///       - **X-bytes** : TODO.  
	/// 
	/// ---
	/// 
	_getBufTOUF: function(sadFile, openMod) {
		var buffers = getBuffers(T_OUF, {
			sadFile: sadFile,
			openMod: openMod
		});
		return bufferConcat([buffers.init, buffers.lenUtil, buffers.order, buffers.canonicalBufLen, buffers.canonicalLen, buffers.canonical, buffers.openModBufLen, buffers.openModLen, buffers.openMod]);


	},
	processTOUF: function(_, sadFile, openMod) { //TODO
		// write open order
		this.stream.write(_, _getBufTOUF(sadFile));
		// read result 
		var buf = this.stream.read(_, 4);
		if (hasError(buf)) {
			//get Error
			sadFile.err = 256 - buf.readUInt8();
		} else {
			sadFile.fileNum = buf.readInt8();
		}

	},

	/// ##**Action T_OUP**
	/// 
	/// Open remote process.  
	/// 
	///    - Request :  
	///       - **1-byte** : fixed: 0x00. 
	///       - **2-bytes** : (Short) The length to follow. 
	///       - **1-byte** : order id = 4. 
	///       - **2-bytes** : (short) The command line buffer length + 2. 
	///       - **2-bytes** : (short) The command line characters count. 
	///       - **N-bytes** : The command line string (utf-8). 
	///       - **2-bytes** : (short) The open mode buffer length + 2. 
	///       - **2-bytes** : (short) The open mode characters count. 
	///       - **N-bytes** : The open mode string (utf-8). 
	///    - Reply :  
	///       - **X-bytes** : TODO.  
	/// 
	/// ---
	/// 
	_getBufTOUP: function(sadFile, openMod) {
		var buffers = getBuffers(T_OUP, {
			sadFile: sadFile,
			openMod: openMod
		});
		return bufferConcat([buffers.init, buffers.lenUtil, buffers.order, buffers.canonicalBufLen, buffers.canonicalLen, buffers.canonical, buffers.openModBufLen, buffers.openModLen, buffers.openMod]);

	},
	processTOUP: function(_) { //TODO
	},

	/// ##**Action T_PAT**
	/// 
	/// Get remote file path.  
	/// 
	///    - Request :  
	///       - **1-byte** : fixed: 0x00. 
	///       - **2-bytes** : (Short) The length to follow. 
	///       - **1-byte** : order id = 8. 
	///       - **2-bytes** : (short) The file descriptor buffer length + 2. 
	///       - **2-bytes** : (short) The file descriptor characters count. 
	///       - **N-bytes** : The canonical file descriptor string (utf-8). 
	///    - Reply :  
	///       - **X-bytes** : TODO.  
	/// 
	/// ---
	/// 
	_getBufTPAT: function(sadFile) { // TODO 
		var buffers = getBuffers(T_PAT, {
			sadFile: sadFile
		});
		return bufferConcat([buffers.init, buffers.lenUtil, buffers.order, buffers.canonicalBufLen, buffers.canonicalLen, buffers.canonical]);
	},
	processTPAT: function(_) { //TODO
	},

	/// ##**Action T_PRM**
	/// 
	/// Get file information.  
	/// 
	///    - Request :  
	///       - **1-byte** : fixed: 0x00. 
	///       - **2-bytes** : (Short) The length to follow. 
	///       - **1-byte** : order id = 7. 
	///       - **1-byte** : info id. Can be 'size' (8) or 'stamp' (10)
	///       - **2-bytes** : (short) The file descriptor buffer length + 2. 
	///       - **2-bytes** : (short) The file descriptor characters count. 
	///       - **N-bytes** : The canonical file descriptor string (utf-8). 
	///    - Reply :  
	///       - **X-bytes** : TODO.  
	/// 
	/// ---
	/// 
	_getBufTPRM: function(sadFile, option) { //TODO

		var buffers = getBuffers(T_PRM, {
			sadFile: sadFile,
			infoId: option
		});
		return bufferConcat([buffers.init, buffers.lenUtil, buffers.order, buffers.infoId, buffers.canonicalBufLen, buffers.canonicalLen, buffers.canonical]);

	},
	processTPRM: function(_, sadFile) { //TODO
	}

});