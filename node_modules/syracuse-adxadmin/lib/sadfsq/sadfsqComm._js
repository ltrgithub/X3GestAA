"use strict";

var helpers = require('syracuse-core/lib/helpers');

var tracer = console.log;

var T_INI = {
	descr: "T_INI",
	id: 1,
	len: 6,
	lenUtil: ["canonical"]
}; //initializatio of server
var T_OUF = {
	descr: "T_OUF",
	id: 2,
	len: 9,
	lenUtil: ["canonical", "openMod"]
}; //open file
var T_SLBF = {
	descr: "T_SLBF",
	id: 5,
	len: 5,
	lenUtil: []
}; // read
var T_SEBF = {
	descr: "T_SEBF",
	id: 8,
	len: 5,
	lenUtil: []
}; // write 
var T_OUP = {
	descr: "T_OUP",
	id: 4,
	len: 9,
	lenUtil: ["canonical", "openMod"]
}; //open pip
var T_SFER = {
	descr: "T_SFER",
	id: 1,
	len: 1,
	lenUtil: []
}; // close file
var T_ERR = {
	descr: "T_ERR",
	id: 6,
	len: 5,
	lenUtil: ["canonical"]
}; //get error message
var T_PRM = {
	descr: "T_PRM",
	id: 7,
	len: 6,
	lenUtil: ["canonical"]
}; //get access right
var T_PAT = {
	descr: "T_PAT",
	id: 8,
	len: 5,
	lenUtil: ["canonical"]
}; //get absolute path
var T_EFF = {
	descr: "T_EFF",
	id: 10,
	len: 5,
	lenUtil: ["canonical"]
}; //delete file
var T_KUS = {
	descr: "T_KUS",
	id: 15,
	len: 6,
	lenUtil: []
}; //stop processus

function hasError(buffer) {
	return buffer[0] & 0x80 !== 0;
}

function getBuffers(order, params) {
	var buffers = {};
	var sadFile = params.sadFile;
	buffers.infoId = {
		descr: "information id",
		buf: function() {
			var infoId = 8; // size by default;
			if (params.infoId && params.infoId === "stamp") {
				infoId = 10;
			}
			var buf = new Buffer(1);
			buf.writeInt8(infoId, 0);
			return buf;
		}
	};

	buffers.lenToRead = {
		descr: "length of bytes to read",
		buf: function() {
			var buf = new Buffer(4);
			buf.writeInt32BE(params.lenToRead, 0);
			return buf;
		}
	};
	buffers.binaryLen = {
		descr: "length of bytes to read",
		buf: function() {
			var buf = new Buffer(4);
			buf.writeInt32BE(sadFile.binary.length, 0);
			return buf;
		}
	};
	buffers.binary = {
		descr: "binary to write",
		buf: function() {
			return sadFile.binary;
		}
	};

	// init
	buffers.init = {
		descr: "Init buffer",
		buf: function() {
			return new Buffer([0x00]);
		}
	};
	// canonical
	buffers.canonical = {
		descr: "Canonical name",
		buf: function() {
			return new Buffer(sadFile.canonical, 'utf-8');
		}
	};

	// order
	buffers.order = {
		descr: "Order [" + order.descr + "]",
		buf: function() {
			return new Buffer([order.id]);
		}
	};
	buffers.openMod = {
		descr: "OpenMod Buffer",
		buf: function() {
			return new Buffer(params.openMod ? params.openMod : "", "utf-8");
		}

	};

	buffers.openModLen = {
		descr: "OpenMod size",
		buf: function() {
			var openModLen = new Buffer(2);
			openModLen.writeInt16BE((params.openMod ? params.openMod.length : 0), 0);
			return openModLen;
		}
	};

	buffers.openModBufLen = {
		descr: "OpenMod buffer size",
		buf: function() {
			var openModBufLen = new Buffer(2);
			openModBufLen.writeInt16BE(buffers.openMod.buf().length + 2, 0);
			return openModBufLen;
		}

	};


	// file descr buffer length + 2
	buffers.canonicalBufLen = {
		descr: "File descriptor size",
		buf: function() {
			var canonicalBufLen = new Buffer(2);
			canonicalBufLen.writeInt16BE(buffers.canonical.buf().length + 2, 0);
			return canonicalBufLen;
		}
	};

	// canonical (nb character) length
	buffers.canonicalLen = {
		descr: "Nb char of file descriptor",
		buf: function() {
			var canonicalLen = new Buffer(2);
			canonicalLen.writeInt16BE(sadFile.canonical.length, 0);
			return canonicalLen;
		}
	};
	// file descriptor 
	buffers.fd = {
		descr: "remote file descriptor (identification of remote file)",
		buf: function() {
			return new Buffer([sadFile.fd]);
		}
	};
	buffers.signal = { // kill signal (1,..,9)
		descr: " signal send to process ",
		buf: function() {
			return new Buffer([params.signal]);
		}
	};


	buffers.pid = { // use fd
		descr: "processus pid ",
		buf: function() {
			var buf = new Buffer(4);
			buf.writeInt32BE(sadFile.pid, 0);
			return buf;
		}
	};

	// len util 
	buffers.lenUtil = {
		descr: "Length to follow",
		buf: function() {
			var lenUtil = new Buffer(2);
			var size = 0;
			for (var i in order.lenUtil) {
				var item = buffers[order.lenUtil[i]];
				size += item.buf().length;
			}
			lenUtil.writeInt16BE(size + order.len, 0);
			return lenUtil;
		}
	};


	return buffers;

}

function bufferConcat(table) {
	var buf = new Buffer([]);
	table.map(function(item, i) {
		if (item.buf) {
			var b = item.buf();
			tracer && tracer("Buffer[" + i + "] (" + item.descr + ") = " + b.toString('hex'));
			buf = Buffer.concat([buf, b]);
		} else {
			tracer & tracer("no method buf for item ");
		}
	});
	return buf;
}

/// !doc
/// 
/// # SadFsqComm module
/// 
/// DO NOT USE THIS MODULE DIRECTLY !!!  
/// This documentation is only provided to understand the protocol layer !  
/// 
/// To interface with adxadmin server, please refer to [SadFsqClient module API](https://github.com/Sage-ERP-X3/Syracuse/blob/master/node_modules/syracuse-adxadmin/lib/sadfsq/sadfsqClient.md "SadFsqClient module API").
/// 
/// ---
exports.SadFsqComm = helpers.defineClass(function(_, stream) {
	this.stream = stream;
}, null, {

	/// #Connection
	/// 
	/// This chapter describes connection sequence with AdxAdmin server component.  
	/// 
	/// 
	/// ##**Connection**
	/// 
	/// Opening classic TCP/IP socket on 'server:port' with print server.  
	/// 
	///   - **First step** : open session.  
	///      - Request 1 :  
	///         - **2-bytes** : fixed to identify connection type.  
	///      - Reply 1 :  
	///         - **4-bytes** : corresponding to the connection ID gave by the print server.  
	/// 
	/// ---
	/// 
	// write buffer in remote file
	_getBufLaunch: function(_) { //TODO
	},
	processLaunch: function(_) { //TODO
	},


	/// #Remote files management
	/// 
	/// This chapter describes different sequences that allow to manage remote files with AdxAdmin server component.  
	/// 
	/// 
	/// ##**Action T_EBF**
	/// 
	/// Write buffer to remote file file.  
	/// 
	///    - Request :  
	///       - **1-byte** : The file descriptor identifier. 
	///       - **2-bytes** : (Short) The length to follow. 
	///       - **1-byte** : order id = 8. 
	///       - **4-bytes** : (integer) The length of the binary to write. 
	///       - **N-bytes** : The binary content. 
	///    - Reply :  
	///       - **X-bytes** : TODO.  
	/// 
	/// ---
	/// 

	_getBufSEBF: function(sadFile) { //TODO
		var buffers = getBuffers(T_SEBF, {
			sadFile: sadFile
		});
		return bufferConcat([buffers.fd, buffers.lenUtil, buffers.order, buffers.binaryLen, buffers.binary]);
	},
	processSEBF: function(_) { //TODO

	},

	/// ##**Action T_FER**
	/// 
	/// Close remote opened file.  
	/// 
	///    - Request :  
	///       - **1-byte** : The file descriptor identifier. 
	///       - **2-bytes** : (Short) The length to follow. 
	///       - **1-byte** : order id = 1. 
	///    - Reply :  
	///       - **X-bytes** : TODO.  
	/// 
	/// ---
	/// 
	_getBufSFER: function(sadFile) {
		var buffers = getBuffers(T_SFER, {
			sadFile: sadFile,
		});
		return bufferConcat([buffers.fd, buffers.lenUtil, buffers.order]);
	},

	processSFER: function(_) { // TODO
	},

	/// ##**Action T_LBF**
	/// 
	/// Read all buffer from remote file.  
	/// 
	///    - Request :  
	///       - **1-byte** : The file descriptor identifier. 
	///       - **2-bytes** : (Short) The length to follow. 
	///       - **1-byte** : order id = 5. 
	///       - **4-bytes** : (integer) The length to read. 
	///    - Reply :  
	///       - **X-bytes** : TODO.  
	/// 
	/// ---
	/// 
	_getBufSLBF: function(sadFile, lenToRead) { // TODO
		var buffers = getBuffers(T_SLBF, {
			sadFile: sadFile,
			lenToRead: lenToRead
		});
		return bufferConcat([buffers.fd, buffers.lenUtil, buffers.order, buffers.lenToRead]);

	},
	processSLBF: function(_, sadFile) { // TODO
	},

	// 

	/// ##**Action T_ERR**
	/// 
	/// Get error.  
	/// 
	///    - Request :  
	///       - **1-byte** : fixed: 0x00. 
	///       - **2-bytes** : (Short) The length to follow. fixed: 0x00,0x01 
	///       - **1-byte** : order id = 6. 
	///    - Reply :  
	///       - **X-bytes** : TODO.  
	/// 
	/// ---
	/// 
	_getBufTERR: function() { // TODO 
		// order
		return new Buffer([0x00, 0x00, 0x01, 0x06]);
	},

	processTERR: function(_) { // TODO 
	},

	/// ##**Action T_EFF**
	/// 
	/// Delete remote file.  
	/// 
	///    - Request :  
	///       - **1-byte** : fixed: 0x00. 
	///       - **2-bytes** : (Short) The length to follow. 
	///       - **1-byte** : order id = 10. 
	///       - **2-bytes** : (short) The descriptor buffer length + 2. 
	///       - **2-bytes** : (short) The descriptor characters count. 
	///       - **N-bytes** : The descriptor string (utf-8). 
	///    - Reply :  
	///       - **X-bytes** : TODO.  
	/// 
	/// ---
	/// 
	_getBufTEFF: function(sadFile) { // TODO 
		var buffers = getBuffers(T_EFF, {
			sadFile: sadFile
		});
		return bufferConcat([buffers.init, buffers.lenUtil, buffers.order, buffers.canonicalBufLen, buffers.canonicalLen, buffers.canonical]);

	},
	processTEFF: function(_, sadFile) { // TODO 

	},

	/// ##**Action T_KUS**
	/// 
	/// Kill remote processus.  
	/// 
	///    - Request :  
	///       - **1-byte** : fixed: 0x00. 
	///       - **2-bytes** : (Short) The length to follow. 
	///       - **1-byte** : order id = 7. 
	///       - **1-byte** : signal.
	///       - **4-bytes** : (integer) PID. 
	///    - Reply :  
	///       - **X-bytes** : TODO.  
	/// 
	/// ---
	/// 
	_getBufTKUS: function(sadFile, signal) { // TODO
		var buffers = getBuffers(T_KUS, {
			sadFile: sadFile,
			signal: signal
		});
		return bufferConcat([buffers.init, buffers.lenUtil, buffers.order, buffers.signal, buffers.pid]);
	},
	processTKUS: function(_) { // TODO
	},

	/// ##**Action T_OUF**
	/// 
	/// Open remote file.  
	/// 
	///    - Request :  
	///       - **1-byte** : fixed: 0x00. 
	///       - **2-bytes** : (Short) The length to follow. 
	///       - **1-byte** : order id = 2. 
	///       - **2-bytes** : (short) The descriptor buffer length + 2. 
	///       - **2-bytes** : (short) The descriptor characters count. 
	///       - **N-bytes** : The descriptor string (utf-8). 
	///       - **2-bytes** : (short) The open mode buffer length + 2. 
	///       - **2-bytes** : (short) The open mode characters count. 
	///       - **N-bytes** : The open mode string (utf-8). 
	///    - Reply :  
	///       - **X-bytes** : TODO.  
	/// 
	/// ---
	/// 
	_getBufTOUF: function(sadFile, openMod) {
		var buffers = getBuffers(T_OUF, {
			sadFile: sadFile,
			openMod: openMod
		});
		return bufferConcat([buffers.init, buffers.lenUtil, buffers.order, buffers.canonicalBufLen, buffers.canonicalLen, buffers.canonical, buffers.openModBufLen, buffers.openModLen, buffers.openMod]);


	},
	processTOUF: function(_, sadFile, openMod) { //TODO
		// write open order
		this.stream.write(_, _getBufTOUF(sadFile));
		// read result 
		var buf = this.stream.read(_, 4);
		if (hasError(buf)) {
			//get Error
			sadFile.err = 256 - buf.readUInt8();
		} else {
			sadFile.fileNum = buf.readInt8();
		}

	},

	/// ##**Action T_OUP**
	/// 
	/// Open remote process.  
	/// 
	///    - Request :  
	///       - **1-byte** : fixed: 0x00. 
	///       - **2-bytes** : (Short) The length to follow. 
	///       - **1-byte** : order id = 4. 
	///       - **2-bytes** : (short) The command line buffer length + 2. 
	///       - **2-bytes** : (short) The command line characters count. 
	///       - **N-bytes** : The command line string (utf-8). 
	///       - **2-bytes** : (short) The open mode buffer length + 2. 
	///       - **2-bytes** : (short) The open mode characters count. 
	///       - **N-bytes** : The open mode string (utf-8). 
	///    - Reply :  
	///       - **X-bytes** : TODO.  
	/// 
	/// ---
	/// 
	_getBufTOUP: function(sadFile, openMod) {
		var buffers = getBuffers(T_OUP, {
			sadFile: sadFile,
			openMod: openMod
		});
		return bufferConcat([buffers.init, buffers.lenUtil, buffers.order, buffers.canonicalBufLen, buffers.canonicalLen, buffers.canonical, buffers.openModBufLen, buffers.openModLen, buffers.openMod]);

	},
	processTOUP: function(_) { //TODO
	},

	/// ##**Action T_PAT**
	/// 
	/// Get remote file path.  
	/// 
	///    - Request :  
	///       - **1-byte** : fixed: 0x00. 
	///       - **2-bytes** : (Short) The length to follow. 
	///       - **1-byte** : order id = 8. 
	///       - **2-bytes** : (short) The descriptor buffer length + 2. 
	///       - **2-bytes** : (short) The descriptor characters count. 
	///       - **N-bytes** : The descriptor string (utf-8). 
	///    - Reply :  
	///       - **X-bytes** : TODO.  
	/// 
	/// ---
	/// 
	_getBufTPAT: function(sadFile) { // TODO 
		var buffers = getBuffers(T_PAT, {
			sadFile: sadFile
		});
		return bufferConcat([buffers.init, buffers.lenUtil, buffers.order, buffers.canonicalBufLen, buffers.canonicalLen, buffers.canonical]);
	},
	processTPAT: function(_) { //TODO
	},

	/// ##**Action T_PRM**
	/// 
	/// Get file information.  
	/// 
	///    - Request :  
	///       - **1-byte** : fixed: 0x00. 
	///       - **2-bytes** : (Short) The length to follow. 
	///       - **1-byte** : order id = 7. 
	///       - **1-byte** : info id. Can be 'size' (8) or 'stamp' (10)
	///       - **2-bytes** : (short) The descriptor buffer length + 2. 
	///       - **2-bytes** : (short) The descriptor characters count. 
	///       - **N-bytes** : The descriptor string (utf-8). 
	///    - Reply :  
	///       - **X-bytes** : TODO.  
	/// 
	/// ---
	/// 
	_getBufTPRM: function(sadFile, option) { //TODO

		var buffers = getBuffers(T_PRM, {
			sadFile: sadFile,
			infoId: option
		});
		return bufferConcat([buffers.init, buffers.lenUtil, buffers.order, buffers.infoId, buffers.canonicalBufLen, buffers.canonicalLen, buffers.canonical]);

	},
	processTPRM: function(_, sadFile) { //TODO
	}

});