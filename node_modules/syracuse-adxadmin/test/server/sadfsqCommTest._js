"use strict";
/* jshint -W079 */
/* jshint unused: false */
/* global QUnit: false, asyncTest: false, test: false, strictEqual: false, start: false, stop: false */
var helpers = require('syracuse-core/lib/helpers');
var nodeconfig = require('syracuse-main/lib/nodeconfig');
var flows = require('streamline/lib/util/flows');
var SadFsqFile = require('syracuse-adxadmin/lib/sadfsq/sadfsqFile').SadFsqFile;
var fs = require('fs');

var SadFsqComm = require('syracuse-adxadmin/lib/sadfsq/sadfsqComm').SadFsqComm;
var util = require('util');

var done;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});

var comm;
asyncTest("Communicator class instaciation", function(_) {
	comm = new SadFsqComm(_);
	start();
});

test("write buffer CONNECT : connect sadfsq client", function() {
	var buff = comm._writeBufConnect({
		user: "apisu",
		password: "CRYPT:xkvvaTccvr",
		secured: true,
	});
	var bytes = new Buffer([0x6A, 0x1D, 0x05, 0x61, 0x70, 0x69, 0x73, 0x75, 0x05, 0x61, 0x70, 0x69, 0x73, 0x75, 0x10, 0x43, 0x52, 0x59, 0x50, 0x54, 0x3A, 0x78, 0x6B, 0x76, 0x76, 0x61, 0x54, 0x63, 0x63, 0x76, 0x72]);
	strictEqual(buff.toString('hex'), bytes.toString('hex'), "Connect");

	start();
});

test("write buffer PAT : get file path", function() {
	var sadFsqFile = new SadFsqFile({
		canonical: "@SUPERV./toto$txt"
	});
	var buff = comm._writeBufPAT(sadFsqFile);
	var bytes = new Buffer([0x00, 0x00, 0x16, 0x08, 0x00, 0x13, 0x00, 0x11, 0x40, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x2E, 0x2F, 0x74, 0x6F, 0x74, 0x6F, 0x24, 0x74, 0x78, 0x74]);
	strictEqual(buff.toString('hex'), bytes.toString('hex'), "file " + sadFsqFile.canonical + " PAT");

	start();
});

test("read buffer PAT : get file path", function() {
	var buf = new Buffer([0x01, 0x41, 0x2F, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x69, 0x74, 0x73, 0x2F, 0x76, 0x31, 0x36, 0x30, 0x2F, 0x53, 0x4F, 0x4C, 0x53, 0x55, 0x50, 0x56, 0x36, 0x2F, 0x64, 0x6F, 0x73, 0x73, 0x69, 0x65, 0x72, 0x73, 0x2F, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x2F, 0x74, 0x6D, 0x70, 0x2F, 0x7A, 0x7A, 0x76, 0x70, 0x6F, 0x73, 0x79, 0x73, 0x5F, 0x33, 0x37, 0x32, 0x39, 0x38, 0x32, 0x30, 0x33, 0x2E, 0x74, 0x72, 0x61]);
	strictEqual(comm._hasError(buf.slice(0, 1)), false, "error missing ok"); // del byte that define if it's an error // not validate here 
	var len = comm._readBufPAT(buf.slice(1, 2), 0); // size of buffer to read
	strictEqual(len, 65, "buffer size to read ok");

	var path = comm._readBufPAT(buf.slice(2), 1);
	strictEqual(path, "/produits/v160/SOLSUPV6/dossiers/SUPERV/tmp/zzvposys_37298203.tra", "file path ok");

	start();
});

test("write buffer PRM : read file info", function() {
	var sadFsqFile = new SadFsqFile({
		canonical: "@SUPERV./toto$txt"
	});
	var buff = comm._writeBufPRM(sadFsqFile, "size");
	var bytes = new Buffer([0x00, 0x00, 0x17, 0x07, 0x08, 0x00, 0x13, 0x00, 0x11, 0x40, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x2e, 0x2f, 0x74, 0x6f, 0x74, 0x6f, 0x24, 0x74, 0x78, 0x74]);
	strictEqual(buff.toString('hex'), bytes.toString('hex'), "file " + sadFsqFile.canonical + " PRM");

	sadFsqFile = new SadFsqFile({
		canonical: "@SUPERV.tmp/TCA_TEST$json"
	});
	buff = comm._writeBufPRM(sadFsqFile, "size");
	bytes = new Buffer([0x00, 0x00, 0x1F, 0x07, 0x08, 0x00, 0x1B, 0x00, 0x19, 0x40, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x2E, 0x74, 0x6D, 0x70, 0x2F, 0x54, 0x43, 0x41, 0x5F, 0x54, 0x45, 0x53, 0x54, 0x24, 0x6A, 0x73, 0x6F, 0x6E]);
	strictEqual(buff.toString('hex'), bytes.toString('hex'), "file " + sadFsqFile.canonical + " PRM");
	start();
});

test("read buffer PRM : read file info", function() {
	var buf = new Buffer([0x00, 0x00, 0x00, 0x05, 0x8A]);
	strictEqual(comm._hasError(buf.slice(0, 1)), false, "error missing ok"); // del byte that define if it's an error // not validate here 
	var size = comm._readBufPRM(buf.slice(1, 5), "size"); // size of buffer to read
	strictEqual(size, 1418, "info id [size] ok ");
	start();
});

test("write buffer EFF : delete file", function() {
	var sadFsqFile = new SadFsqFile({
		canonical: "@SUPERV./toto$txt"
	});
	var buff = comm._writeBufEFF(sadFsqFile);
	var bytes = new Buffer([0x00, 0x00, 0x16, 0x0A, 0x00, 0x13, 0x00, 0x11, 0x40, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x2E, 0x2F, 0x74, 0x6F, 0x74, 0x6F, 0x24, 0x74, 0x78, 0x74]);
	strictEqual(buff.toString('hex'), bytes.toString('hex'), "file " + sadFsqFile.canonical + " EFF");

	start();
});

test("write buffer ERR : get error", function(_) {
	var buff = comm._writeBufERR();
	var bytes = new Buffer([0x00, 0x00, 0x01, 0x06]);
	strictEqual(buff.toString('hex'), bytes.toString('hex'), " TERR");
	start();
});

test("read buffer ERR : get error", function() {
	var buf = new Buffer([0x00, 0x35, 0x2F, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x69, 0x74, 0x73, 0x2F, 0x76, 0x31, 0x36, 0x30, 0x2F, 0x53, 0x4F, 0x4C, 0x53, 0x55, 0x50, 0x56, 0x36, 0x2F, 0x64, 0x6F, 0x73, 0x73, 0x69, 0x65, 0x72, 0x73, 0x2F, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x2F, 0x74, 0x6D, 0x70, 0x2F, 0x74, 0x65, 0x73, 0x74, 0x2E, 0x74, 0x65, 0x73, 0x74]);
	var len = comm._readBufERR(buf.slice(1, 2), 0); // size of buffer to read
	strictEqual(len, 53, "buffer size to read ok");

	var mess = comm._readBufERR(buf.slice(2), 1);
	strictEqual(mess, "/produits/v160/SOLSUPV6/dossiers/SUPERV/tmp/test.test", "file path ok");

	start();
});

test("write buffer OUF : open file", function(_) {
	var sadFsqFile = new SadFsqFile({
		canonical: "@SUPERV.tmp/zzvposys_37298203$tra"
	});
	var buff = comm._writeBufOUF(sadFsqFile, "r");
	var bytes = new Buffer([0x00, 0x00, 0x2B, 0x02, 0x00, 0x23, 0x00, 0x21, 0x40, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x2E, 0x74, 0x6D, 0x70, 0x2F, 0x7A, 0x7A, 0x76, 0x70, 0x6F, 0x73, 0x79, 0x73, 0x5F, 0x33, 0x37, 0x32, 0x39, 0x38, 0x32, 0x30, 0x33, 0x24, 0x74, 0x72, 0x61, 0x00, 0x03, 0x00, 0x01, 0x72]);
	strictEqual(buff.toString('hex'), bytes.toString('hex'), "file " + sadFsqFile.canonical + " OUF Buffer");

	sadFsqFile = new SadFsqFile({
		path: "c:/",
		name: "AEXP1",
		extension: "json"

	});
	buff = comm._writeBufOUF(sadFsqFile, "r");
	bytes = new Buffer([0x00, 0x00, 0x18, 0x02, 0x00, 0x10, 0x00, 0x0E, 0x40, 0x63, 0x3A, 0x2F, 0x41, 0x45, 0x58, 0x50, 0x31, 0x24, 0x6A, 0x73, 0x6F, 0x6E, 0x00, 0x03, 0x00, 0x01, 0x72]);
	strictEqual(buff.toString('hex'), bytes.toString('hex'), "file " + sadFsqFile.canonical + " OUF Buffer");
});

test("read buffer OUF : open file", function() {
	var buf = new Buffer([0x02]);
	var fd = comm._readBufOUF(buf);
	strictEqual(fd, 2, " open File ");
	start();
});

test("write buffer EBF : write file", function(_) {

	var filebin = new Buffer([0x6a, 0x61, 0xc3, 0xb9, 0x6d, 0x6b, 0x6c, 0x64, 0x6a, 0x66, 0x6d, 0xc3, 0xb9, 0x61, 0x6b, 0x6c, 0x65, 0x6e, 0x6d, 0x6c, 0x61, 0x6b, 0x64, 0x6e, 0x6d, 0x63, 0x61, 0x6b, 0x64, 0x6e, 0x6d, 0xc3, 0xb9, 0x61, 0x6c, 0x6b, 0x64, 0x76, 0x61, 0x0a, 0x64, 0x61, 0x6b, 0x6e, 0x2c, 0x76, 0x61, 0x64, 0x70, 0x76, 0x61, 0x2a, 0x64, 0x6c, 0x76, 0x0a, 0x61, 0x70, 0x64, 0x6c, 0x2c, 0x76, 0x0a, 0x61, 0x6c, 0x61, 0x6d, 0x64, 0x3b, 0x3a, 0x76, 0x0a, 0x41, 0x64, 0x78, 0x6d, 0x3b, 0x76, 0x61, 0x0a, 0x64, 0x6d, 0x3b, 0x76, 0x61, 0x0a, 0x64, 0x6d, 0x3b, 0x76, 0x61, 0x64, 0x76, 0x2c, 0x61, 0x71, 0xc3, 0xb9, 0x64, 0x6b, 0x76, 0x61, 0xc3, 0xb9, 0x21, 0x64, 0x6b, 0x2c, 0x76, 0x61, 0x64, 0x76, 0x61, 0x64, 0x6c, 0x76, 0x61, 0x0a, 0x64, 0x76, 0x3b, 0x61, 0x2a, 0x6d, 0x64, 0x2c, 0x76, 0x61, 0x64, 0x2c, 0x76, 0x61, 0x0a, 0x64, 0x76, 0x61, 0x64, 0x6c, 0x76, 0x61, 0x2a, 0x64, 0x76, 0x2c, 0x61, 0x0a, 0x64, 0x2c, 0x76, 0x61, 0x2a, 0x64, 0x2c, 0x61, 0x0a, 0x64, 0x61, 0x0a, 0x3b, 0x0a]);
	var fd = 2;
	var buff = comm._writeBufEBF(fd, filebin.slice(0, 150));
	var bytes = Buffer.concat([new Buffer([0x02, 0x00, 0x05, 0x08, 0x00, 0x00, 0x00, 0x96]), filebin.slice(0, 150)]);
	strictEqual(buff.toString('hex'), bytes.toString('hex'), " EBF Buffer write  150 bytes");

	buff = comm._writeBufEBF(fd, filebin.slice(151));
	bytes = Buffer.concat([new Buffer([0x02, 0x00, 0x05, 0x08, 0x00, 0x00, 0x00, 0x09]), filebin.slice(151)]);
	strictEqual(buff.toString('hex'), bytes.toString('hex'), " EBF Buffer write  23 bytes");
});

test("write buffer LBF : read file", function(_) {
	var buff = comm._writeBufLBF(2, 32768);
	var bytes = new Buffer([0x02, 0x00, 0x05, 0x05, 0x00, 0x00, 0x80, 0x00]);
	strictEqual(buff.toString('hex'), bytes.toString('hex'), "file LBF Buffer");
});

test("read buffer LBF : read file", function() {
	// get result buffer
	var buf = Buffer.concat([new Buffer([0x00, 0x00, 0x00, 0x05, 0x8a]), fs.readFileSync(__dirname + "/data/SLBF_read.json")]); // file that contains binary to check 
	strictEqual(comm._hasError(buf.slice(0, 1)), false, "error missing ok"); // del byte that define if it's an error // not validate here 
	var len = comm._readBufLBF(buf.slice(1, 5), 0);
	strictEqual(len, 1418, " get length to read ok");
	var binary = new Buffer([]);
	var buff = comm._readBufLBF(buf.slice(6), 1, binary);
	strictEqual(buff.toString('hex'), buf.slice(6).toString('hex'), " set buffer to sadFile");
	start();
});

test("write buffer OUP : open process", function(_) {

	var sadFsqFile = new SadFsqFile({
		canonical: "ls "
	});
	var buff = comm._writeBufOUP(sadFsqFile, "r");
	var bytes = new Buffer([0x00, 0x00, 0x0D, 0x04, 0x00, 0x05, 0x00, 0x03, 0x6C, 0x73, 0x20, 0x00, 0x03, 0x00, 0x01, 0x72]);
	strictEqual(buff.toString('hex'), bytes.toString('hex'), "file " + sadFsqFile.canonical + " OUF Buffer");

});

test("read buffer OUP : open process", function() {
	var buf = new Buffer([0x02]);
	var pid = comm._readBufOUP(buf);
	strictEqual(pid, 2, " launch process");

	start();
});

test("write buffer KUS : kill process", function(_) {
	var pid = 1223456;
	var buff = comm._writeBufKUS(pid, 9);
	var bytes = new Buffer([0x00, 0x00, 0x06, 0x0F, 0x09, 0x00, 0x12, 0xAB, 0x20]);
	strictEqual(buff.toString('hex'), bytes.toString('hex'), " KUS Buffer");
});

test("kill", function() {
	done = true;
	start();
});