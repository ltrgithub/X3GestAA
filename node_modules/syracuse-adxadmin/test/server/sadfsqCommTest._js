"use strict";
/* jshint -W079 */
/* jshint unused: false */
/* global QUnit: false, asyncTest: false, test: false, strictEqual: false, start: false, stop: false */
var helpers = require('syracuse-core/lib/helpers');
var nodeconfig = require('syracuse-main/lib/nodeconfig');
var flows = require('streamline/lib/util/flows');
var SadFsqFile = require('syracuse-adxadmin/lib/sadfsq/sadfsqFile').SadFsqFile;

var SadFsqComm = require('syracuse-adxadmin/lib/sadfsq/sadfsqComm').SadFsqComm;
var util = require('util');

var done;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});

var comm;
asyncTest("Communicator class instaciation", function(_) {
	comm = new SadFsqComm(_);
	start();
});

////////////////////////////////////////////////////////
//test("written buffer T_EFF : delete file with canonical name", function() {
//	var sadFsqFile = new SadFsqFile({
//		canonical: "@SUPERV./toto$txt"
//	});
//	var buff = comm._getBufTEFF(sadFsqFile);
//	var bytes = new Buffer([0x00, 0x00, 0x16, 0x0A, 0x00, 0x13, 0x00, 0x11, 0x40, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x2E, 0x2F, 0x74, 0x6F, 0x74, 0x6F, 0x24, 0x74, 0x78, 0x74]);
//	strictEqual(buff.toString('hex'), bytes.toString('hex'), "file " + sadFsqFile.canonical + " T_EFF");
//
//	start();
//});
//
//test("buffer T_PAT : get remote file path", function() {
//	var sadFsqFile = new SadFsqFile({
//		canonical: "@SUPERV./toto$txt"
//	});
//	var buff = comm._getBufTPAT(sadFsqFile);
//	var bytes = new Buffer([0x00, 0x00, 0x16, 0x08, 0x00, 0x13, 0x00, 0x11, 0x40, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x2E, 0x2F, 0x74, 0x6F, 0x74, 0x6F, 0x24, 0x74, 0x78, 0x74]);
//	strictEqual(buff.toString('hex'), bytes.toString('hex'), "file " + sadFsqFile.canonical + " T_PAT");
//
//	start();
//});

test("buffer T_OUP : create remote process", function() {
	var sadFsqFile = new SadFsqFile({
		canonical: "ls"
	});
	var buff = comm._getBufTOUP(sadFsqFile, "r");
	var bytes = new Buffer([0x00, 0x00, 0x0D, 0x04, 0x00, 0x05, 0x00, 0x03, 0x6C, 0x73, 0x20, 0x00, 0x03, 0x00, 0x01, 0x72]);
	strictEqual(buff.toString('hex'), bytes.toString('hex'), "file " + sadFsqFile.canonical + " T_OUP");

	start();
});


////////////////////////////////////////////////////////
//asyncTest("written buffer TOUF : open a remote file", function(_) {
//	var sadFsqFile = new SadFsqFile({
//		canonical: "@SUPERV.tmp/zzvposys_37298203$tra"
//	});
//	var buff = comm._getBufTOUF(sadFsqFile, "r");
//	var bytes = new Buffer([0x00, 0x00, 0x2B, 0x02, 0x00, 0x23, 0x00, 0x21, 0x40, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x2E, 0x74, 0x6D, 0x70, 0x2F, 0x7A, 0x7A, 0x76, 0x70, 0x6F, 0x73, 0x79, 0x73, 0x5F, 0x33, 0x37, 0x32, 0x39, 0x38, 0x32, 0x30, 0x33, 0x24, 0x74, 0x72, 0x61, 0x00, 0x03, 0x00, 0x01, 0x72]);
//	strictEqual(buff.toString('hex'), bytes.toString('hex'), "file " + sadFsqFile.canonical + " TOUF Buffer OK");
//
//});
//
//asyncTest("written buffer TERR : get a error", function(_) {
//	var buff = comm._getBufTERR();
//	var bytes = new Buffer([0x00, 0x00, 0x01, 0x06]);
//	strictEqual(buff.toString('hex'), bytes.toString('hex'), " TERR");
//
//});
//
//
//test("written buffer TPRM : get info of a remote file", function() {
//	var sadFsqFile = new SadFsqFile({
//		canonical: "@SUPERV./toto$txt"
//	});
//	var buff = comm._getBufTPRM(sadFsqFile, "size");
//	var bytes = new Buffer([0x00, 0x00, 0x17, 0x07, 0x08, 0x00, 0x13, 0x00, 0x11, 0x40, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x2e, 0x2f, 0x74, 0x6f, 0x74, 0x6f, 0x24, 0x74, 0x78, 0x74]);
//	strictEqual(buff.toString('hex'), bytes.toString('hex'), "file " + sadFsqFile.canonical + " TPRM");
//
//	start();
//});


test("kill", function() {
	done = true;
	start();
});