"use strict";

/* jshint -W079 */
///* jshint unused: false */
/* global QUnit: false, ok: false, asyncTest: false, test: false, strictEqual: false, start: false */

var nodeconfig = require('syracuse-main/lib/nodeconfig').config;
var SadFsqClient = require('syracuse-adxadmin/lib/sadfsq/sadfsqClient').SadFsqClient;
var sadMod = require('syracuse-adxadmin/lib/sadfsq/sadfsqClient').Mod;

var tests = [

	//	{
	//		str: "test buffer quite simple: AZERTY",
	//		fileOptions: {
	//			path: "c:/",
	//			name: "AEXP1",
	//			extension: "json"
	//
	//		}
	//	},
	{
		str: "test buffer quite simple: AZERTY",
		fileOptions: {
			folder: "SUPERV",
			path: "tmp",
			name: "test",
			extension: "tst"
		}
	},
	//{
	//	str: "test buffer more complex: <>-*/+.!?:;,",
	//	fileOptions:{
	//		folder: "SUPERV",
	//		path: "tmp",
	//		name: "test2",
	//		extension: "tst"
	//	}
	//},
	//{
	//	str: "test buffer really more complex: &é'([-|è_ç@à$£¤µ%§°}{]#~`²",
	//	fileOptions:{
	//		canonical: "@SUPERV.tmp/test3$tst"
	//	}
	//}
];

var done;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});

var sadfs;
var sadfs2;

function completeTest(param, i) {

	var bufStr = new Buffer(param.str, "utf-8");
	var fileOptions = param.fileOptions;

	asyncTest("client class instanciation", function(_) {
		var sadUnitConfig = nodeconfig.x3sadfsq && nodeconfig.x3sadfsq.qunit || {};
		var connCtx = {
			server: sadUnitConfig.server ? sadUnitConfig.server : "sodaix02",
			port: sadUnitConfig.port ? sadUnitConfig.port : 17000,
			user: sadUnitConfig.user ? sadUnitConfig.user : "apisu",
			pass: sadUnitConfig.pass ? sadUnitConfig.pass : "CRYPT:xkvvaTccvr",
			secure: sadUnitConfig.secure ? true : false
		};
		//console.log("connCtx: "+JSON.stringify(connCtx,null,2));
		var recOptions = {
			recMode: sadUnitConfig.online ? "REC" : "PLAY",
			fileName: "apiTest_" + i + ".json"
		};
		if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file
		sadfs = new SadFsqClient(_, connCtx.server, connCtx.port, connCtx.user, connCtx.pass, connCtx.secure, recOptions);
		sadfs2 = new SadFsqClient(_, connCtx.server, connCtx.port, connCtx.user, connCtx.pass, connCtx.secure, recOptions);

		strictEqual(sadfs.stream != null, true, "Stream is opened");
		start();
	});

	asyncTest("open and close new file", 1, function(_) {
		var fd = sadfs.open(_, fileOptions, "w");
		sadfs.close(_, fd);
		ok(true, "open and close file ok");
		start();
	});
	asyncTest("rename file", function(_) {
		var fileOptionsBis = {
			folder: fileOptions.folder,
			path: fileOptions.path,
			name: "test2",
			extension: fileOptions.extension
		};
		strictEqual(false, sadfs.exists(_, fileOptionsBis), "new file not exists ");
		strictEqual(true, sadfs.exists(_, fileOptions), "old file exists");

		sadfs.rename(_, fileOptions, fileOptionsBis);


		strictEqual(true, sadfs.exists(_, fileOptionsBis) && !sadfs.exists(_, fileOptions), "old file correctly renamed");

		sadfs.rename(_, fileOptionsBis, fileOptions);

		strictEqual(true, sadfs.exists(_, fileOptions) && !sadfs.exists(_, fileOptionsBis), "new file correctly renamed");

		start();
	});


	asyncTest("open and close new file in system mode", 1, function(_) {
		var fd = sadfs._openSys(_, fileOptions, sadMod.O_APPEND | sadMod.O_WRONLY | sadMod.O_CREAT, 0x1c0);
		sadfs.close(_, fd);
		ok(true, "open and close file ok");
		start();
	});

	asyncTest("writeFile", function(_) {
		sadfs.writeFile(_, fileOptions, bufStr, {
			flag: "w"
		});
		strictEqual(true, true, "write ok "); // just to display that the write is ok. if it's not it raise an exception
		start();
	});

	asyncTest("readFile", function(_) {
		var res = sadfs.readFile(_, fileOptions, {
			flag: "r",
			encoding: "utf-8"
		});
		strictEqual(res, param.str, "content ok: " + res);
		start();
	});

	asyncTest("path", function(_) {
		var path = sadfs.path(_, fileOptions);
		strictEqual(path != null, true, "get path " + path);

		start();
	});

	asyncTest("info", 12, function(_) {
		var res = sadfs.stat(_, fileOptions);
		var keys = Object.keys(res);
		for (var i in keys) {
			strictEqual(res[keys[i]] != null, true, keys[i] + ": " + res[keys[i]] + " OK");
		}
		var res2 = sadfs.stat(_, fileOptions, ["size"]);
		strictEqual(res2.size, res.size, "size: " + res2.size + " OK");
		start();
	});



	asyncTest("write and flush", function(_) {
		var buffer = new Buffer(param.str, "utf-8");

		var fd = sadfs.open(_, fileOptions, "w");
		sadfs.write(_, fd, buffer, 0, buffer.length, 0);
		ok(true, "Write...");
		var size = sadfs.stat(_, fileOptions, ["size"]).size;
		strictEqual(size, 0, "Size before flush: " + size);
		ok(true, "Flush...");
		sadfs.flush(_, fd);
		size = sadfs.stat(_, fileOptions, ["size"]).size;
		strictEqual(size, 32, "Size after flush: " + size);
		sadfs.close(_, fd);

		var buffer2 = new Buffer("test", "utf-8");
		var buffer3 = new Buffer("buff", "utf-8");
		fd = sadfs.open(_, fileOptions, "r+");
		sadfs.write(_, fd, buffer2, 0, buffer2.length, 5);
		var buffer4 = new Buffer(4);
		sadfs.read(_, fd, buffer4, 0, 4, 5);
		strictEqual(buffer4.toString("utf-8"), "test", "Write at the middle of the file OK");

		sadfs.write(_, fd, buffer3, 0, buffer3.length, 5);
		sadfs.read(_, fd, buffer4, 0, 4, 5);
		strictEqual(buffer4.toString("utf-8"), "buff", "Revert modification OK");

		sadfs.close(_, fd);
		ok(true, "Close");
		start();
	});

	/*asyncTest("test check exist OEF", function(_) {
		var fd = sadfs.open(_, fileOptions, "r");
		sadfs.seek(_, fd, 2, 0, false);
		console.log("seek " + sadfs.getPosition(_, fd));
		strictEqual(true, sadfs.feof(_, fd), "check ok");
		sadfs.close(_, fd);
		start();
	});*/
	asyncTest("read", function(_) {
		var fd = sadfs.open(_, fileOptions, "r");
		var buffer = new Buffer(80);

		var len = sadfs.read(_, fd, buffer, 0, 8);
		strictEqual(len, 8, "Size read 1 ok: " + len);
		strictEqual(buffer.slice(0, 8).toString('hex'), bufStr.slice(0, 8).toString('hex'), "Buffer content 1 ok");

		len = sadfs.read(_, fd, buffer, 8, 8);
		strictEqual(len, 8, "Size read 2 ok: " + len);
		strictEqual(buffer.slice(8, 16).toString('hex'), bufStr.slice(8, 16).toString('hex'), "Buffer content 2 ok");

		var position = sadfs.getPosition(_, fd);
		strictEqual(position, 16, "Position ok");

		len = sadfs.read(_, fd, buffer, 16, 0);
		strictEqual(len, 0, "Size read 3 ok: " + len);

		len = sadfs.read(_, fd, buffer, 16, 64);
		strictEqual(len, bufStr.length - 16, "Size read 4 ok: " + len);
		strictEqual(buffer.slice(16, bufStr.length).toString('hex'), bufStr.slice(16).toString('hex'), "Buffer content 4 ok");

		position = sadfs.getPosition(_, fd);
		strictEqual(position, bufStr.length, "Position ok");

		len = sadfs.read(_, fd, buffer, 8, 10, 8);
		strictEqual(len, 10, "Size read 5 ok: " + len);
		strictEqual(buffer.slice(8, 18).toString('hex'), bufStr.slice(8, 18).toString('hex'), "Buffer content 5 (with defined position) ok");

		sadfs.close(_, fd);
		strictEqual(param.str, buffer.slice(0, bufStr.length).toString('utf-8'), "Content ok: " + param.str);
		start();
	});

	asyncTest("seek and get position", 12, function(_) {
		var fd = sadfs.open(_, fileOptions, "r");
		var position = sadfs.getPosition(_, fd);
		strictEqual(position, 0, "Init Position: " + position);

		sadfs.seek(_, fd, 0, 8);
		position = sadfs.getPosition(_, fd);
		strictEqual(position, 8, "Seek BOF positive: " + position);

		try {
			sadfs.seek(_, fd, 0, -8, false);
		} catch (e) {
			ok(true, "Seek BOF negative failed: " + e.message);
		}

		try {
			sadfs.seek(_, fd, 0, 50);
		} catch (e) {
			ok(true, "Seek BOF too big (STRICT): " + e.message);
		}

		sadfs.seek(_, fd, 1, 8);
		position = sadfs.getPosition(_, fd);
		strictEqual(position, 16, "Seek CUR positive: " + position);

		sadfs.seek(_, fd, 1, -8);
		position = sadfs.getPosition(_, fd);
		strictEqual(position, 8, "Seek CUR negative: " + position);

		sadfs.seek(_, fd, 1, 50, false);
		position = sadfs.getPosition(_, fd);
		strictEqual(position, 58, "Seek CUR positive too big: " + position);
		try {
			sadfs.seek(_, fd, 1, 50);
		} catch (e) {
			ok(true, "Seek CUR positive too big (STRICT): " + e.message);
		}

		try {
			sadfs.seek(_, fd, 1, -50);
		} catch (e) {
			ok(true, "Seek CUR negative too big: " + e.message);
		}

		sadfs.seek(_, fd, 2, -8);
		position = sadfs.getPosition(_, fd);
		strictEqual(position, 24, "Seek EOF negative: " + position);

		sadfs.seek(_, fd, 2, 8, false);
		position = sadfs.getPosition(_, fd);
		strictEqual(position, 40, "Seek EOF positive: " + position);
		try {
			sadfs.seek(_, fd, 2, 8);
		} catch (e) {
			ok(true, "Seek EOF positive (STRICT): " + e.message);
		}

		try {
			sadfs.seek(_, fd, 2, -50, false);
		} catch (e) {
			ok(true, "Seek EOF too big failed: " + e.message);
		}

		sadfs.close(_, fd);
		start();
	});
	asyncTest("exists", 1, function(_) {
		strictEqual(true, sadfs.exists(_, fileOptions), "File exists");
		start();
	});

	asyncTest("process test", function(_) {
		var rep = sadfs.exec(_, "ls", {
			encoding: 'utf-8'
		});

		strictEqual(rep.pid != null, true, "create process ok pid=[ " + rep.pid + " ]");
		strictEqual(rep.stdout != null, true, "process stdout : " + rep.stdout);

		start();
	});

	/*asyncTest("process kill", function(_) {
		var rep = sadfs.exec(_, "vi");

		strictEqual(rep.pid != null, true, "create process ok pid=[ " + rep.pid + " ]");
		strictEqual(rep.stdout == null, true, "process stdout : ");
		sadfs.kill(_, rep.pid, 9);

		start();
	});*/



	/*asyncTest("lock",1, function(_) {
		var fd = sadfs.open(_,fileOptions,"r+");
		var size = sadfs.fstat(_,fd,["size"]).size;
		strictEqual(1,sadfs.lock(_,fd,2,6,0),"lock ok");
		strictEqual(0,sadfs.lock(_,fd,2,5,1),"byte lock ok");
		
		start();
	});*/

	asyncTest("append", function(_) {
		sadfs.appendFile(_, fileOptions, " append added", {
			encoding: 'utf-8'
		});
		strictEqual(param.str + " append added", sadfs.readFile(_, fileOptions).toString('utf-8'), "append file  ok");
		start();
	});

	asyncTest("truncate file", function(_) {
		var fd = sadfs.open(_, fileOptions, "w+");
		var buffer = new Buffer("test1234", 'utf-8');
		sadfs.write(_, fd, buffer, 0, buffer.length, 0);
		// try truncate an opened file
		sadfs.ftruncate(_, fd, 4);
		sadfs.close(_, fd);
		var truncData = sadfs.readFile(_, fileOptions, {
			encoding: "utf-8"
		});
		strictEqual("1234", truncData, "file truncate ok " + truncData);
		start();
	});

	asyncTest("truncate without an opened file", function(_) {
		var fd = sadfs.open(_, fileOptions, "w+");
		var buffer = new Buffer("test1234", 'utf-8');
		sadfs.write(_, fd, buffer, 0, buffer.length, 0);
		sadfs.close(_, fd);
		// try truncate an opened file
		sadfs.truncate(_, fileOptions, 4);
		var truncData = sadfs.readFile(_, fileOptions, {
			encoding: "utf-8"
		});
		strictEqual("1234", truncData, "file truncate ok " + truncData);
		start();
	});


	asyncTest("unlink", function(_) {
		sadfs.unlink(_, fileOptions);
		ok(true, "File removed");
		start();
	});

	asyncTest("not exists", 1, function(_) {
		strictEqual(false, sadfs.exists(_, fileOptions), "File not exists");
		start();
	});


	asyncTest("client disconnect", function() {
		sadfs.disconnect();
		sadfs2.disconnect();
		strictEqual(sadfs.stream == null, true, "Stream is closed");
		start();
	});

}


for (var i = 0; i < tests.length; i++) {
	completeTest(tests[i], i);
}
test("kill", function() {
	done = true;
	start();
});