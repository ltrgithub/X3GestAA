"use strict";

/* jshint -W079 */
/* jshint unused: false */
/* global QUnit: false, ok: false, asyncTest: false, test: false, strictEqual: false, start: false, stop: false */
var helpers = require('syracuse-core/lib/helpers');
var nodeconfig = require('syracuse-main/lib/nodeconfig');
var flows = require('streamline/lib/util/flows');
var SadFsqFile = require('syracuse-adxadmin/lib/sadfsq/sadfsqFile').SadFsqFile;
var fs = require('fs');

var SadFsqClient = require('syracuse-adxadmin/lib/sadfsq/sadfsqClient').SadFsqClient;
var util = require('util');

var fileOptions = [{
	folder: "SUPERV",
	path: "tmp",
	name: "test",
	extension: "tst"
}, {
	folder: "SUPERV",
	path: "tmp",
	name: "TCA_TEST",
	extension: "json"
}];

var done;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});

var client;
asyncTest("Client class instanciation", function(_) {

	client = new SadFsqClient(_, "sodaix02", 17000, "apisu", "CRYPT:xkvvaTccvr", true);
	strictEqual(client.stream != null, true, "Stream is opened");
	start();
});


//





asyncTest("writeFile in utf-8", function(_) {
	var buffer = new Buffer("test write buffer", "utf-8");
	client.writeFile(_, fileOptions[0], buffer, {
		flag: "w"
	});
	strictEqual(true, true, "write ok "); // just to display that the write is ok. if it's not it raise an exception
	start();
});

asyncTest("get file path", function(_) {

	var path = client.getFilePath(_, fileOptions[0]);
	strictEqual(path, "/produits/v160/SOLSUPV6/dossiers/SUPERV/tmp/test.tst", "get path ok");

	start();
});

asyncTest("Get file info", 12, function(_) {

	var res = client.stat(_, fileOptions[0]);
	console.log("RES: " + JSON.stringify(res, null, 2));
	var keys = Object.keys(res);
	for (var i in keys) {
		strictEqual(res[keys[i]] != null, true, keys[i] + ": " + res[keys[i]] + " OK");
	}
	var res2 = client.stat(_, fileOptions[0], ["size"]);
	strictEqual(res2.size, res.size, "size: " + res2.size + " OK");
	start();
});


asyncTest("open and close new file", function(_) {

	try {
		var fd = client.open(_, fileOptions[0], "w");
		client.close(_, fd);
		ok(true, "open and close file ok");
	} catch (e) {
		// nothin		
	}
	start();
});


asyncTest("write in utf-8", function(_) {
	var buffer = new Buffer("test write buffer 2", "utf-8");
	var fd = client.open(_, fileOptions[0], "w");
	client.write(_, fd, buffer, 0, buffer.length, 0);
	client.close(_, fd);
	strictEqual(true, true, "write ok "); // just to display that the write is ok. if it's not it raise an exception
	start();
});

asyncTest("readFile small in utf-8", function(_) {
	var res = client.readFile(_, fileOptions[0], {
		flag: "r",
		encoding: "utf-8"
	});
	strictEqual("test write buffer 2", res, "content ok");
	start();
});

asyncTest("read small in utf-8", function(_) {
	var fd = client.open(_, fileOptions[0], "r");
	var i = 0;
	var buffer = new Buffer(17);
	while (i < 17) {
		client.read(_, fd, buffer, i, 1);
		i++;
	}
	client.close(_, fd);
	strictEqual("test write buffer", buffer.toString('utf-8'), "content ok");
	start();
});

asyncTest("Delete file", function(_) {

	var path = client.unlink(_, fileOptions[0]);
	strictEqual(true, true, "content ok");
	start();
});

asyncTest("check open file", 1, function(_) {

	try {
		client.open(_, fileOptions[0], "r");
	} catch (e) {
		ok(true, e.message);
	}
	start();
});

asyncTest("Client disconnect", function(_) {

	client.disconnect();
	strictEqual(client.stream == null, true, "Stream is closed");
	start();
});


test("kill", function() {
	done = true;
	start();
});