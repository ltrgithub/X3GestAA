"use strict";

/* jshint -W079 */
/* jshint unused: false */
/* global QUnit: false, ok: false, asyncTest: false, test: false, strictEqual: false, start: false, stop: false */
var helpers = require('syracuse-core/lib/helpers');
var nodeconfig = require('syracuse-main/lib/nodeconfig').config;
var flows = require('streamline/lib/util/flows');
var SadFsqFile = require('syracuse-adxadmin/lib/sadfsq/sadfsqFile').SadFsqFile;
var fs = require('fs');

var SadFsqClient = require('syracuse-adxadmin/lib/sadfsq/sadfsqClient').SadFsqClient;
var util = require('util');

var fileOptions = [{
	folder: "SUPERV",
	path: "tmp",
	name: "test",
	extension: "tst"
}, {
	folder: "SUPERV",
	path: "tmp",
	name: "test2",
	extension: "tst"

}];

var strToWrite = "test buffer write 2";
var sizeWrittenBuf = 19;
var done;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});

var client;

function completeTest(j) {
	asyncTest("Client class instanciation", function(_) {
		var sadUnitConfig = nodeconfig.x3sadfsq && nodeconfig.x3sadfsq.qunit && nodeconfig.x3sadfsq.qunit || {};
		var connCtx = {
			server: sadUnitConfig.server ? sadUnitConfig.server : "sodaix02",
			port: sadUnitConfig.port ? sadUnitConfig.port : 17000,
			user: sadUnitConfig.user ? sadUnitConfig.user : "apisu",
			pass: sadUnitConfig.pass ? sadUnitConfig.pass : "CRYPT:xkvvaTccvr",
			secure: sadUnitConfig.secure ? true : false
		};
		var recOptions = {
			recMode: sadUnitConfig.online ? "REC" : "PLAY",
			fileName: "apiTest.json"
		};
		if (recOptions.recMode === "REC") recOptions["override"] = true; // always override file
		client = new SadFsqClient(_, connCtx.server, connCtx.port, connCtx.user, connCtx.pass, connCtx.secure, recOptions);
		strictEqual(client.stream != null, true, "Stream is opened");
		start();
	});


	//
	asyncTest("open and close new file", 1, function(_) {

		try {
			var fd = client.open(_, fileOptions[j], "w");
			client.close(_, fd);
			ok(true, "open and close file ok");
			start();
		} catch (e) {
			// nothin		
			console.error(e.stack);
			ok(false, "open and close file " + e.message + " " + e.stack);
		}
	});


	asyncTest("writeFile in utf-8", function(_) {
		var buffer = new Buffer("test write buffer", "utf-8");
		client.writeFile(_, fileOptions[j], buffer, {
			flag: "w"
		});
		strictEqual(true, true, "write ok "); // just to display that the write is ok. if it's not it raise an exception
		start();
	});

	asyncTest("get file path", function(_) {

		var path = client.getFilePath(_, fileOptions[j]);
		strictEqual(path != null, true, "get path " + path);

		start();
	});

	asyncTest("Get file info", 12, function(_) {

		var res = client.stat(_, fileOptions[j]);
		var keys = Object.keys(res);
		for (var i in keys) {
			strictEqual(res[keys[i]] != null, true, keys[i] + ": " + res[keys[i]] + " OK");
		}
		var res2 = client.stat(_, fileOptions[j], ["size"]);
		strictEqual(res2.size, res.size, "size: " + res2.size + " OK");
		start();
	});



	asyncTest("write in utf-8", function(_) {
		var buffer = new Buffer(strToWrite, "utf-8");
		var fd = client.open(_, fileOptions[j], "w");
		client.write(_, fd, buffer, 0, buffer.length, 0);
		client.close(_, fd);
		strictEqual(true, true, "write ok "); // just to display that the write is ok. if it's not it raise an exception
		start();
	});

	asyncTest("readFile small in utf-8", function(_) {
		var res = client.readFile(_, fileOptions[j], {
			flag: "r",
			encoding: "utf-8"
		});
		strictEqual(strToWrite, res, "content ok");
		start();
	});

	asyncTest("read small in utf-8", function(_) {
		var fd = client.open(_, fileOptions[j], "r");
		var i = 0;
		var buffer = new Buffer(47);
		var len = client.read(_, fd, buffer, 0, 27);
		strictEqual(len, sizeWrittenBuf, "size read ok");
		len = client.read(_, fd, buffer, 28, 20);
		strictEqual(len, 0, "size read ok");
		client.close(_, fd);
		strictEqual(strToWrite, buffer.toString('utf-8').substring(0, 19), "content ok");
		start();
	});

	asyncTest("Delete file", function(_) {

		var path = client.unlink(_, fileOptions[j]);
		strictEqual(true, true, "content ok");
		start();
	});

	asyncTest("check open file", 1, function(_) {

		try {
			client.open(_, fileOptions[j], "r");
		} catch (e) {
			ok(true, e.message);
		}
		start();
	});

	asyncTest("Client disconnect", function(_) {

		client.disconnect();
		strictEqual(client.stream == null, true, "Stream is closed");
		start();
	});
}

for (var i = 0; i < fileOptions.length; i++) {
	completeTest(i);
}
test("kill", function() {
	done = true;
	start();
});