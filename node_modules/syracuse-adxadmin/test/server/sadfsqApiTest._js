"use strict";

/* jshint -W079 */
/* jshint unused: false */
/* global QUnit: false, asyncTest: false, test: false, strictEqual: false, start: false, stop: false */
var helpers = require('syracuse-core/lib/helpers');
var nodeconfig = require('syracuse-main/lib/nodeconfig');
var flows = require('streamline/lib/util/flows');
var SadFsqFile = require('syracuse-adxadmin/lib/sadfsq/sadfsqFile').SadFsqFile;
var fs = require('fs');

var SadFsqClient = require('syracuse-adxadmin/lib/sadfsq/sadfsqClient').SadFsqClient;
var util = require('util');

var done;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});

var client;
asyncTest("Client class instanciation", function(_) {

	client = new SadFsqClient(_, "sodaix02", 17000, "apisu", "CRYPT:xkvvaTccvr", true);
	strictEqual(client.stream != null, true, "Stream is opened");
	start();
});

asyncTest("Get file info", function(_) {
	var options = {
		folder: "SUPERV",
		path: "tmp",
		name: "TCA_TEST",
		extension: "json"
	};
	var attributes = [
		"mode",
		"inode",
		"dev_id1",
		"dev_id2",
		"nb_links",
		"uid",
		"gid",
		"size",
		"last_access",
		"last_modification",
		"last_status_change"
	];
	var res = client.getFileInfo(_, options, attributes);
	for (var i in attributes) {
		strictEqual(res[attributes[i]] != null, true, attributes[i] + ": " + res[attributes[i]] + " OK");
	}
	start();
});

asyncTest("readFile small in utf-8", function(_) {
	var options = {
		folder: "SUPERV",
		path: "tmp",
		name: "test",
		extension: "tst"
	};
	var res = client.readFile(_, options, {
		flag: "r",
		encoding: "utf-8"
	});
	strictEqual("test\n", res, "content ok");
	start();
});

asyncTest("read small in utf-8", function(_) {
	var options = {
		folder: "SUPERV",
		path: "tmp",
		name: "test",
		extension: "tst"
	};
	var fd = client.open(_, options, "r");
	// get file size
	var info = client.getFileInfo(_, options, ["size"]);
	strictEqual(5, info.size, "size ok");
	var i = 0;
	var buffer = new Buffer(info.size);
	while (i < info.size) {
		client.read(_, fd, buffer, i, 1);
		i++;
	}
	strictEqual("test\n", buffer.toString('utf-8'), "content ok");
	start();
});








test("kill", function() {
	done = true;
	start();
});