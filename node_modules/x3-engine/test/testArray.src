Call INIT(trtcou,38) From XUNIT
Call SIMPLE_TEST
Call SORT_TEST
Call INSERT_TEST
Call DELETE_TEST
Call FINISH From XUNIT
Return "That's all folks"

$FILL
Onerrgo ERROR
Global Char STRINGS(1)(10)
Global Integer INTS(10)
Global Char LETTERS, DIGITS, LSORT, DSORT, LBYD, DBYL
LETTERS = "DAAFBCBBAF"
DIGITS =  "5531244153"
LSORT =   "AAABBBCDFF"
DSORT =   "1123344555"
LBYD  =   "BFBAFBCAAD"
DBYL  =   "3551244513"
LSORTPART = "DAABBCFBAF"
ISORTPART = "5532441153"

For I = 0 To 9 : STRINGS(I) = mid$(LETTERS, I+1, 1) : INTS(I) = VAL(mid$(DIGITS, I+1, 1)) : Next I
Return

$ERROR
	CallJS sync print("ERROR"-errm) From "x3-engine/lib/helpers"
End

FunProg DUMP_S(AR)
	Variable Char AR()()
End sigma(DIM(AR,-1), DIM(AR,-1) + DIM(AR,1) - 1, AR(indcum))

FunProg DUMP_I(AR)
	Variable Integer AR()
End sigma(DIM(AR,-1), DIM(AR,-1) + DIM(AR,1) - 1, num$(AR(indcum)))

SubProg SLICE_NOBASE(S1, S2, I1, I2) 
	Variable Char S1()(), S2()()
	Variable Integer I1(), I2()
    Call CHECK_EQUAL("Char slice 3..5", func DUMP_S(S1), mid$(LETTERS, 4, 3)) From XUNIT
    Call CHECK_EQUAL("Char slice 3..", func DUMP_S(S2), right$(LETTERS, 4)) From XUNIT
    Call CHECK_EQUAL("Integer slice 3..5", func DUMP_I(I1), mid$(DIGITS, 4, 3)) From XUNIT
    Call CHECK_EQUAL("Integer slice 3..", func DUMP_I(I2), right$(DIGITS, 4)) From XUNIT
End
	
SubProg SLICE_BASE(S1, S2) 
	Variable Char S1()(1..), S2()(3..)
    Call CHECK_EQUAL("Char slice 3..5", func DUMP_S(S1), mid$(LETTERS, 4, 3)) From XUNIT
    Call CHECK_EQUAL("Char slice 3..", func DUMP_S(S2), right$(LETTERS, 4)) From XUNIT
    Call CHECK_EQUAL("S1(1)", S1(1), mid$(LETTERS, 4, 1)) From XUNIT
    Call CHECK_EQUAL("S1(3)", S1(3), mid$(LETTERS, 6, 1)) From XUNIT
    Call CHECK_EQUAL("S2(3)", S2(3), mid$(LETTERS, 4, 1)) From XUNIT
    Call CHECK_EQUAL("S2(9)", S2(9), mid$(LETTERS, 10, 1)) From XUNIT
End

SubProg SORT_BASE(S, I) 
	Variable Char S()(4..), I()(2..)
	Call CHECK_EQUAL("S indexing", S(4), 'D') From XUNIT
	Call CHECK_EQUAL("S indexing", S(13), 'F') From XUNIT
	Call CHECK_EQUAL("I indexing", I(2), 5) From XUNIT
	Call CHECK_EQUAL("I indexing", I(11), 3) From XUNIT
    Sorta S,I
    Call CHECK_EQUAL("Sorta S,D", func DUMP_S(STRINGS), LSORT) From XUNIT
    Call CHECK_EQUAL("Sorta S,D", func DUMP_I(INTS), DBYL) From XUNIT
	Call CHECK_EQUAL("S indexing", S(4), 'A') From XUNIT
	Call CHECK_EQUAL("S indexing", S(13), 'F') From XUNIT
	Call CHECK_EQUAL("I indexing", I(2), 3) From XUNIT
	Call CHECK_EQUAL("I indexing", I(11), 3) From XUNIT
    Sorta I,S
	Call CHECK_EQUAL("I indexing", I(2), 1) From XUNIT
	Call CHECK_EQUAL("I indexing", I(11), 5) From XUNIT
End

SubProg SIMPLE_TEST()
    Gosub FILL
    Call CHECK2("func DUMP_S(STRINGS) From testArray", LETTERS) From XUNIT
    Call CHECK2("func DUMP_I(INTS) From testArray", DIGITS) From XUNIT
    Call SLICE_NOBASE(STRINGS(3..5), STRINGS(3..), INTS(3..5), INTS(3..))
    Call SLICE_BASE(STRINGS(3..5), STRINGS(3..))
End

SubProg SORT_TEST()
    Gosub FILL
    Sorta STRINGS,INTS
    Call CHECK_EQUAL("Sorta S,D", func DUMP_S(STRINGS), LSORT) From XUNIT
    Call CHECK_EQUAL("Sorta S,D", func DUMP_I(INTS), DBYL) From XUNIT
    Sorta INTS,STRINGS
    Call CHECK_EQUAL("Sorta D,S", func DUMP_I(INTS), DSORT) From XUNIT
    Call CHECK_EQUAL("Sorta D,S", func DUMP_S(STRINGS), LBYD) From XUNIT
    Gosub FILL
    Call SORT_BASE(STRINGS, INTS)
    Gosub FILL
    Sorta STRINGS(2..6),INTS(2..6)
    Call CHECK_EQUAL("Sorta partial", func DUMP_S(STRINGS), LSORTPART) From XUNIT
    Call CHECK_EQUAL("Sorta partial", func DUMP_I(INTS), ISORTPART) From XUNIT
End

SubProg INSERT_TEST()
	Gosub FILL
	Insa 2, 3 STRINGS, INTS
	STRINGS(2) = 'X' : STRINGS(3) = 'Y' : STRINGS(4) = 'Z'
	Call CHECK_EQUAL("Insa S", func DUMP_S(STRINGS), left$(LETTERS, 2)+"XYZ"+mid$(LETTERS, 3, 5)) From XUNIT
	Call CHECK_EQUAL("Insa I", func DUMP_I(INTS), left$(DIGITS, 2)+"000"+mid$(DIGITS, 3, 5)) From XUNIT
	Gosub FILL
	Insa 2, 3, 7 STRINGS, INTS
	STRINGS(2) = 'X' : STRINGS(3) = 'Y' : STRINGS(4) = 'Z'
	Call CHECK_EQUAL("Insa S", func DUMP_S(STRINGS), left$(LETTERS, 2)+"XYZ"+mid$(LETTERS, 3, 3) +right$(LETTERS, 9)) From XUNIT
	Call CHECK_EQUAL("Insa I", func DUMP_I(INTS), left$(DIGITS, 2)+"000"+mid$(DIGITS, 3, 3) + right$(DIGITS, 9)) From XUNIT
End

SubProg DELETE_TEST()
	Gosub FILL
	Dela 2, 3 STRINGS, INTS
	STRINGS(7) = 'X' : STRINGS(8) = 'Y' : STRINGS(9) = 'Z'
	Call CHECK_EQUAL("Dela S", func DUMP_S(STRINGS), left$(LETTERS, 2)+right$(LETTERS, 6)+"XYZ") From XUNIT
	Call CHECK_EQUAL("Dela I", func DUMP_I(INTS), left$(DIGITS, 2)+right$(DIGITS, 6)+"000") From XUNIT
	Gosub FILL
	Dela 2, 3, 7 STRINGS, INTS
	STRINGS(5) = 'X' : STRINGS(6) = 'Y' : STRINGS(7) = 'Z'
	Call CHECK_EQUAL("Dela S", func DUMP_S(STRINGS), left$(LETTERS, 2)+mid$(LETTERS, 6, 3)+"XYZ"+right$(LETTERS, 9)) From XUNIT
	Call CHECK_EQUAL("Dela I", func DUMP_I(INTS), left$(DIGITS, 2)+mid$(DIGITS, 6, 3)+"000"+right$(DIGITS, 9)) From XUNIT
End

