"use strict";

var db = require('./db');
var trace; // = console.log;

function quote(str) {
	return "`" + str + "`";
}

function sqlColType(col) {
	switch (col.type) {
	case "string":
		return col.maxLength < 256 ? "VARCHAR(" + col.maxLength + ")" : "TEXT";
	case "number":
		return col.scale ? "DECIMAL(" + col.precision + "," + col.scale + ")" : "INTEGER";
	case "date":
		return "date";
	default:
		throw new Error("unsupported column type: " + col.type);
	}
}

function execute(_, db, sql, args) {
	//console.log(sql);
	try {
		db.query(sql, args || []).execute(_);
	} catch (ex) {
		console.error("EXCEPTION: " + ex);
		throw ex;
	}
}

function createTable(_, db, desc) {
	execute(_, db, "DROP TABLE IF EXISTS " + quote(desc.name));
	var sql = "CREATE TABLE " + quote(desc.name) + " (" + Object.keys(desc.columns).map(function(colName) {
		return quote(colName + "_0") + " " + sqlColType(desc.columns[colName]);
	}) + ")";
	trace && trace(sql);
	execute(_, db, sql);
	Object.keys(desc.indexes).forEach_(_, function(_, indName) {
		var index = desc.indexes[indName];
		index.name = indName;
		sql = "CREATE " + (index.unique ? "UNIQUE " : "") + "INDEX " + quote(indName) //
		+ " ON " + quote(desc.name) + " (" + index.columns.map(function(col) {
			return quote(col.substring(1) + "_0") + (col[0] === '_' ? " DESC" : " ASC");
		}) + ")";
		trace && trace(sql);
		execute(_, db, sql);
	});
}

function fillTable(_, db, desc, rows) {
	var sql = "INSERT INTO " + quote(desc.name) + " (" + Object.keys(desc.columns).map(function(col) {
		return quote(col + "_0")
	}) + ") VALUES (" + Object.keys(desc.columns).map(function() {
		return "?"
	}) + ")";
	//console.log(sql);
	rows.forEach_(_, function(_, row) {
		db.query(sql, row).execute(_);
	});
}
exports.createTestTable = function(_, frame, json) {
	var desc = JSON.parse(json);
	Object.keys(desc.columns).forEach(function(name) {
		desc.columns[name].name = name;
	});

	var conn = db.connect(_, frame);
	createTable(_, conn, desc);
	frame.context.tableDescs[desc.name] = desc;
}