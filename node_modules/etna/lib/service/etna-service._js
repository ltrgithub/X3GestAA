"use strict";

const config = require('config');
const flows = require('streamline-runtime').flows;
const ez = require('ez-streams');
const helpers = require('syracuse-core').helpers;
const etnaDispatch = require('../supervisor/server').httpDispatch;

const sessions = {};

function httpError(status, message) {
	const err = new Error(message);
	err.httpStatus = status;
	return err;
}

function cookieName(port) {
	return "etna.session.id." + port;
}

function createSession(_, request, response) {
	const data = JSON.parse(request.reader.readAll(_));
	const id = helpers.uuid.generate();
	sessions[id] = {
		id: id,
		data: data,
	};
	var cookies = request.headers["set-cookie"] || [];
	const name = cookieName(request.connection.localPort);

	// multiple cookies
	if (!Array.isArray(cookies)) cookies = [cookies];
	else cookies = cookies.filter((cookie) => cookie.indexOf(name) < 0);

	const cookie = name + '=' + id + '; path=/;Secure;';
	cookies.push(cookie);
	response.writeHead(201, {
		location: '/sessions/' + id,
		'set-cookie': cookies,
	});
	response.write(_);
}

function deleteSession(_, request, response) {
	const m = /\/sessions\/([\w-]*)/.exec(request.url);
	if (!m) throw httpError(400, "bad url: ", request.url);
	const id = m[1];
	if (!sessions[id]) throw httpError(404, "session not found: ", id);
	delete session[id];

	var cookies = request.headers["set-cookie"] || [];
	if (!Array.isArray(cookies)) cookies = [cookies];
	const name = cookieName(request.connection.localPort);
	cookies = cookies.filter((cookie) => cookie.indexOf(name) < 0);

	response.writeHead(204, {
		'set-cookie': cookie
	});
	response.write(_);
}

function sessionRequest(_, request, response) {
	switch (request.method) {
		case "POST":
			createSession(_, request, response);
			break;
		case "DELETE":
			deleteSession(_, request, response);
			break;
		default:
			throw httpError(405, "invalid method: " + request.method);
	}
}

function dispatch(_, request, response) {
	if (/\/sessions\//.test(request)) sessionRequest(_, request, response);
	else {
		var cookies = helpers.http.parseCookie(request.headers.cookie);
		var sessionId = cookies[cookieName(request.connection.localPort)];
		if (!sessionId) throw httpError(400, "session cookie missing");
		var session = sessions[sessionId];
		if (!session) throw httpError(400, "session not found: " + sessionId);
		etnaDispatch(_, session.data, request, response);
	}
}

const server = ez.devices.http.server(function(request, response, _) {
	try {
		dispatch(_, request, response);
	} catch (ex) {
		console.error(ex.stack);
		response.writeHead(ex.httpStatus || 500, {});
		response.write(_, "error " + (ex.httpStatus || 500));
		response.write(_);
	}
});

server.listen(flows.check, config.port || 8125);