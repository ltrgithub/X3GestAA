"use strict";

const config = require('config');
const flows = require('streamline-runtime').flows;
const ez = require('ez-streams');
const helpers = require('syracuse-core').helpers;
const etnaDispatch = require('../supervisor/server').httpDispatch;
const trace = console.error;
const lodash = require('lodash');

const sessions = {};

function httpError(status, message) {
	const err = new Error(message);
	err.httpStatus = status;
	return err;
}

function cookieName(port) {
	return "etna.session.id." + port;
}

function getCookies(request, id) {
	var cookies = request.headers["set-cookie"] ? request.headers["set-cookie"].split(',') : [];
	const name = cookieName(request.connection.localPort);
	// remove previous cookie, if any
	cookies = cookies.filter((cookie) => cookie.indexOf(name) < 0);
	if (id) cookies.push(name + '=' + id + '; path=/;Secure;');
	return cookies;
}

function createSession(_, request, response) {
	const data = JSON.parse(request.reader.readAll(_));
	const id = helpers.uuid.generate();
	sessions[id] = {
		id: id,
		data: data,
		state: {},
	};
	response.writeHead(201, {
		location: '/sessions/' + id,
		'set-cookie': getCookies(request, id),
	});
	response.write(_);
}

function deleteSession(_, request, response) {
	const m = /\/sessions\/([\w-]*)/.exec(request.url);
	if (!m) throw httpError(400, "bad url: ", request.url);
	const id = m[1];
	if (!sessions[id]) throw httpError(404, "session not found: ", id);
	delete session[id];

	response.writeHead(204, {
		'set-cookie': getCookies(request, null),
	});
	response.write(_);
}

function sessionRequest(_, request, response) {
	switch (request.method) {
		case "POST":
			createSession(_, request, response);
			break;
		case "DELETE":
			deleteSession(_, request, response);
			break;
		default:
			throw httpError(405, "invalid method: " + request.method);
	}
}

function dispatch(_, request, response) {
	trace && trace("ETNA-SERVICE", request.method, request.url);
	if (/\/sessions(\/|$)/.test(request.url)) sessionRequest(_, request, response);
	else {
		var cookies = helpers.http.parseCookie(request.headers.cookie);
		var sessionId = cookies[cookieName(request.connection.localPort)];
		if (!sessionId) throw httpError(400, "session cookie missing");
		var session = sessions[sessionId];
		if (!session) throw httpError(400, "session not found: " + sessionId);
		request.session = session.state;
		const writeHead = response.writeHead;
		response.writeHead = function(status, headers) {
			return writeHead.call(response, status, lodash.extend({
				'set-cookie': request.headers.cookie,
			}, headers));
		};
		etnaDispatch(_, session.data, request, response);
	}
}

const server = ez.devices.http.server(function(request, response, _) {
	try {
		dispatch(_, request, response);
	} catch (ex) {
		console.error(ex.stack);
		response.writeHead(ex.httpStatus || 500, {
			'set-cookie': getCookies(request, null), // reset cookie
		});
		response.write(_, "error " + (ex.httpStatus || 500));
		response.write(_);
	}
});

server.listen(flows.check, config.port || 8125);

// trap SIGINT - otherwise we get 100% CPU on CTRL-C
process.on('SIGINT', function() {
	setTimeout(process.exit, 100);
});