"use strict";

const tds = require('tedious');
const bcd = require('etna/lib/engine/runtime/bcd');
const Blbfile = require('etna/lib/engine/runtime/tblbfile').Blbfile;

function oraDriverTypes(rows) {
	rows.map(function (row) {
		Object.keys(result).forEach(function (k) {
			// ..............
		});
	});
}

function tdsUuid(val) {
	return val.reduce(function (p, c, i) {
		return (i === 1 ? p.toString(16) + c.toString(16) : p + c.toString(16)).toUpperCase();
	});
}

exports.tdsColumnsToRow = function (columns) {
	var col, exi, row, _i, _len;
	var colName, colValue;

	if (!columns) return null;

	row = {};
	for (_i = 0, _len = columns.length; _i < _len; _i++) {
		col = columns[_i];

		//  uuid  driver format

		if (col.metadata.colName.substring(0, 2) === 'U#') {
			colName = col.metadata.colName.substring(2);
			colValue = col.value.toString('hex').toUpperCase();
		} else {
			colName = col.metadata.colName;
			colValue = col.value;
		}

		// modify row foramat
		exi = row[colName];
		if (exi != null) {
			if (exi instanceof Array) {
				exi.push(colValue);
			} else {
				row[colName] = [exi, colValue];
			}
		} else {
			row[colName] = colValue;
		}
	}
	return row;
};

exports.tdsAddParameters = function (req, args) {

	function processParam(name, type, value) {
		const param = req.parametersByName[name];

		if (param) param.value = value;

		else req.addParameter(name, type, value);
	}

	for (var i = 0; args && i < args.length; i++) {
		if (args[i] instanceof Buffer) processParam("p" + i, tds.TYPES.Binary, args[i]);
		else if (args[i] instanceof Blbfile) processParam("p" + i, tds.TYPES.VarBinary, args[i].value);
		else if (args[i] instanceof Date) processParam("p" + i, tds.TYPES.DateTime, args[i]);
		else if (typeof args[i] === "number") processParam("p" + i, tds.TYPES.Int, args[i]);
		else processParam("p" + i, tds.TYPES.NVarChar, args[i]);
	}
};