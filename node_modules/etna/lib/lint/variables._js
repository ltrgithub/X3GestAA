"use strict";

var glob = require('streamline/lib/globals');
var util = require("./util");

var trace ;//= console.log;

exports.instructions = {
	DEFAULT: function(scope, exp) {
		return function defaultfn$do(_) {

		};
	},
	CLALEV: function(arg) {
		return function clalev$do(_) {
		};
	},
	V: function(field) {
		var loc = util.sourceLoc;
		return function v$do(_, operation, val, silent, strict) {
            var frame = glob.context.x3frame;
			var dicts = frame.dicts;
			for (var i = 0, len = dicts.length; i < len; i++) {
				var dict = dicts[i];
				if(dict.types && dict.types[field] !== undefined) return;
            }
            if(frame.checkV === true) {
	            trace && trace("undeclared variable "+field);
	            frame.context.undecl.types[field] = loc;
	        }
        };
	},
	TYPE: function(letter, field) {
		return function typev$do(_) {
		};
	},
	DIM: function(letter, field, rhs) {
		return function dim$do(_) {
		};
	},
	DYNTYPE: function(arg) {
		return function dyntype$do(_) {
		};
	},
	DYNDIM: function(arg) {
		return function dyndim$do(_) {
		};
	},
	CV: function(letter, abbrev, field, silent) {
		var loc = util.sourceLoc;
		return function cv$do(_, operation, val, silent, strict) {
			var lint = glob.context.lint;
			var frame = glob.context.x3frame;
			var dict;
			switch (letter) {
				case 'L':
					dict = frame;
					break;
				case 'V':
					dict = frame.context.globals;
					break;
				case 'S':
					dict = frame.context.sys;
					break;
				case 'F':
				case '?':
					dict = frame.context.tables;
					break;
				case 'M':
				case 'G':
					if(lint.update > 6) lint.addDiagnose("obsolete",'unknown class letter: [' + letter + ']',loc);
					break;	
				default:
					lint.addDiagnose("error",'unknown class letter: [' + letter + ']',loc);
					break;
	
			}
			if (dict) {
                if (dict.types && dict.types[field] !== undefined) return;
                if(frame.checkV === true) {
	                trace && trace("undeclared variable "+field);
	                frame.context.undecl.types[field] = loc;
	            }
			}           
		};
	},
	DECL: function(key, field, using, lens0, ranges0) {
		return function decl$do(_) {
        	var frame = glob.context.x3frame;
			var dict = key[0] === 'V' ? frame.context.globals : glob.context.x3frame;
			trace && trace("DECL "+field+" " +key);
			dict.types[field] = key;
            if(key[0] === 'V' && frame.context.undecl.types) delete frame.context.undecl.types[field];
		};
	},
	CA: function(field, exps) {
		return function ca$do(_) {
		};
	},
	GET: function(obj, prop) {
		return function get$do(_) {
		};
	},
	SET: function(lhs, rhs, silent) {
		return function set$do(_) {
			if(typeof rhs === "function" && rhs.value === undefined) rhs(_);
			lhs && lhs(_, true);
		};
	},
	ASSIGN: function(lhs, rhs, silent) {
		return function assign$do(_) {
		};
	},
	RAZ: function(exps) {
		return function raz$do(_) {
		};

	},
	SNAP: function(target) {
		return function dot$do(_, assign, val, silent) {
		};
	},
	PROP: function(target, name) {
		return function dot$do(_, assign, val, silent) {
		};
	},
	ATT: function(target, property, attribut) {
		return function att$do(_, assign, val, silent) {
		};

	},
	AGETATTR: function(target, property, attribut) {
		return function agetattr$do(_, silent) {
		};
	},
	ASETATTR: function(target, property, attribut, val) {
		return function asetattr$do(_, silent) {
		};
	},
	XMET: function(target, name, args) { // fmet and callmet
		return function dot$do(_) {
		};
	},
	VAR: function(key, field) {
		return function var$do(_) {
		};
	},
	FILEVAL: function(abbrev, vars, from) {
		return function dot$do(_) {
		};
	},
	NEW: function(clas) {
		return function new$do(_) {
		};
	},
	FREE: function(allocGroup, isGroup) {
		return function free$do(_) {};
	},
	FREEZE: function(target) { 
		return function freeze$do(_) {}
	},
	KILL: function(exps) {
		return function raz$do(_) {
		};
	},
	CLA: function(letter, abbrev) {
		return function cla$do(_, operation, val, silent, strict) {
		};
	},
	AADD: function(target, position) {
		return function aadd$do(_, silent) {
		};
	},
	ADEL: function(target, position) {
		return function adel$do(_, silent) {
		};
	},
	ASETCOLUMNATTR: function(target, collection, column, attribute, val) {
		return function asetcolumnattr$do(_, silent) {
		};
	},
	AGETCOLUMNATTR: function(target, collection, column, attribute) {
		return function agetcolumnattr$do(_, silent) {
		};
	},

	AGETTEXT: function(target, property) {
		return function agettext$do(_, silent) {
		};
	},
	ASETTEXT: function(target, property, intit) {
		return function asettext$do(_, silent) {
		};
	},
	AGETTEXTLAN: function(target, property, lan) {
		return function agettextlan$do(_, silent) {
		};
	},
	ASETTEXTLAN: function(target, property, intit, lan) {
		return function asettextlan$do(_, silent) {
		};
	},
	AGETTEXTRA: function(target, property) {
		return function agettextra$do(_, silent) {
		};
	},
	AGETTEXTRALAN: function(target, property, lan) {
		return function agettextralan$do(_, silent) {
		};
	},
	ASETTEXTRALAN: function(target, property, intit, lan) {
		return function asettextralan$do(_, silent) {
		};
	},
};