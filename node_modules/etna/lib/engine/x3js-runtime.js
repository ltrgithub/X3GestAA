"use strict";

// ensure x3 functions are installed in prototypes.
require('./runtime'); 
const tbcd = require('./runtime/tbcd');

function eq(a, b) {
	if (a == null) return b == null;
	if (b == null) return false;
	if (a.x3Compare) return a.x3Compare(b) === 0;
	if (b.x3Compare) return b.x3Compare(a) === 0;
	return a === b;
}

function compare(a, b) {
	if (a == null || b == null) throw new Error("cannot compare " + a + " and " + b);
	if (a.x3Compare) return a.x3Compare(b);
	if (b.x3Compare) return -b.x3Compare(a);
	throw new Error("cannot compare " + typeof a + " and " + typeof b);
}

function op2(name, alt) {
	return function(a, b) {
		var f = a != null && (a[name] || a[alt]);
		if (!f) throw new Error("cannot apply " + (alt || name) + " to " + a);
		return f.call(a, b);
	};
}

function op1(name) {
	return function(a, b) {
		var f = a && a[name];
		if (!f) throw new Error("cannot apply " + name + " to " + a);
		return f.call(a);
	};
}

function plus(a) {
	if (a && a.x3Minus) return a;
	throw new Error("cannot apply x3Plus to " + a);
}

module.exports = {
	bcd: s => tbcd.fromString(s),
	add: op2('x3jsAdd', 'x3Add'),
	sub: op2('x3jsSub', 'x3Sub'),
	mul: op2('x3Mul'),
	div: op2('x3Div'),
	plus: plus,
	minus: op1('x3Minus'),
	eq: eq,
	ne: (a, b) => !eq(a, b),
	lt: (a, b) => compare(a, b) < 0,
	le: (a, b) => compare(a, b) <= 0,
	gt: (a, b) => compare(a, b) > 0,
	ge: (a, b) => compare(a, b) >= 0,
};

