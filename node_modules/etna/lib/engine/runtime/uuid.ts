"use strict";

import * as core  from 'syracuse-core';
import * as tuuid from './tuuid';

function _UUID(value: string) {
	if (typeof value === 'undefined') {
		this.value = core.helpers.uuid.generate('');
		return this;
	} else if (typeof value === 'string') {
		if (/^[0-9a-fA-F]{8}[0-9a-fA-F]{4}[0-9a-fA-F]{4}[0-9a-fA-F]{4}[0-9a-fA-F]{12}$/.test(value)) {
			this.value = value;
			return this;
		} else if (/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(value)) {
			this.value = value.replace(/-/g, '');
			return this;
		}
	}
	return undefined;
}

_UUID.prototype.toString = function () {
	//return this.value;
	var start = 0;
	const suuid = this.value;

	return [8, 4, 4, 4, 12].map(len => {
		const s = suuid.substring(start, start + len);

		start += len;
		return s;
	}).join('-');
};

export function isUUID(uuid: any) {
	return uuid instanceof _UUID;
};

export function nullUuidString() {
	return "00000000000000000000000000000000";
};

exports.UUID = _UUID;
exports.generate = tuuid.generate;

export const functions = {
	GETUUID: {
		count: 0,
		fn() {
			return tuuid.generate();
		}
	},
	NULLUUID: {
		count: 0,
		fn() {
			return tuuid.NULL;
		}
	},
	TOUUID: {
		count: 1,
		fn(s: any) {
			return tuuid.x3ToUuid(s);
		}
	},
	UUID$: {
		count: 0,
		fn() {
			return tuuid.generate();
		}
	}
};