import { _ } from 'streamline-runtime';

import * as types from './types';
import * as errors from './errors';
import * as tdouble from './tdouble';
import * as tinteger from './tinteger';
import * as tstring from './tstring';
import * as tdatetime from './tdatetime';
import * as tbcd from './tbcd';
const basedate = require('syracuse-core').types.date;
const datetime = require('syracuse-core').types.datetime;
import { Blbfile } from './tblbfile';
import { Clbfile } from './tclbfile';

const SP = ' '.charCodeAt(0);

export function x3Trim(s: string, opt: number) {
	const trimFuncs = [function () {
		// left
		var len = s.length;
		for (var i = 0; i < len && s.charCodeAt(i) === SP; i++);
		return i === 0 ? s : s.substring(i);
	}, function () {
		// right
		var len = s.length;
		for (var i = len - 1; i >= 0 && s.charCodeAt(i) === SP; i--);
		return i === len ? s : s.substring(0, i + 1);
	}, function () {
		// both
		var len = s.length;
		for (var i = 0; i < len && s.charCodeAt(i) === SP; i++);
		for (var j = len - 1; j >= i && s.charCodeAt(j) === SP; j--);
		return s.substring(i, j + 1);
	}, function () {
		// token
		var len = s.length;
		for (var i = 0; i < len && s.charCodeAt(i) === SP; i++);
		for (var j = i; j < len && s.charCodeAt(j) !== SP; j++);
		return s.substring(i, j);
	}, function () {
		// all
		return s.replace(/ /g, '');
	}, function () {
		// adjacent
		return s.replace(/[ ]+/g, ' ');
	}];

	if (!trimFuncs[opt]) return s;

	return trimFuncs[opt]();
};

export function badTypeConversion(detail: string) {
	//return new X3Error(10, "bad operand" + x? (": "+x + " (type " + x.constructor.name + ")"):"");
	return new errors.X3Error(10, "bad type conversion: " + detail);
};

export function badOperand(x: any) {
	//return new X3Error(10, "bad operand" + x? (": "+x + " (type " + x.constructor.name + ")"):"");
	return new errors.X3Error(10, "bad operand" + (x ? ": " + x + " (type " + x.constructor.name + ")" : ""));
};

export function badArgumentType(x: any) {
	return new errors.X3Error(10, "bad argument: " + x + " (type " + x.constructor.name + ")");
};

export function checkNumber(x: any) {
	if (!x.x3IsNumeric || !x.x3IsNumeric()) throw badArgumentType(x);
};

export function checkInteger(x: any) {
	if (!x3IsInteger(x)) throw badArgumentType(x);
};

export function checkArray(x: any) {
	if (!Array.isArray(x)) throw badArgumentType(x);
};

export function checkMonoArray(x: any) {
	if (!Array.isArray(x)) throw badArgumentType(x);
	if (x[0] !== 1) throw new errors.X3Error(55, "bad array dimension: " + x[0]);
};

export function checkNotZero(x: any) {
	if (!x.x3IsZero || !x.x3IsZero()) throw new errors.X3Error(53, "zero not allowed");
};

export function x3IsDouble(val: any) {
	return val instanceof tdouble.Double;
};

export function x3IsInteger(x: any) {
	return typeof x === 'number';
};

export function x3IsString(x: any) {
	return typeof x === 'string';
};

export function x3IsBCD(x: any) {
	return x instanceof tbcd.BCD;
};

export const x3IsDate = basedate.isDate;

export const x3IsUuid = Buffer.isBuffer;

export const x3IsDatetime = datetime.isDatetime;

export function x3IsBlbfile(x: any) {
	return x instanceof Blbfile;
};

export function x3IsClbfile(x: any) {
	return x instanceof Clbfile;
};

export function x3IsInstance(x: any) {
	return x && (x.$$type === "Instance" || x.$exported);
};

export function x3Typename(x: any) {
	if (x === null) return "null";
	if (x === undefined) return "undefined";
	if (exports.x3IsString(x)) return "String";
	if (exports.x3IsInteger(x)) return "Integer";
	if (exports.x3IsDouble(x)) return "Double";
	if (exports.x3IsDate(x)) return "Date";
	if (exports.x3IsDatetime(x)) return "Datetime";
	if (exports.x3IsBlbfile(x)) return "Blbfile";
	if (exports.x3IsClbfile(x)) return "Clbfile";
	if (exports.x3IsUuid(x)) return "Uuident";
	if (exports.x3IsBCD(x)) return "BCD";
	if (Array.isArray(x)) return "Array";
	return "Object";
};

export function x3ToString(v: any, strict?: boolean) {
	if (typeof v === "string") return v;
	if (v instanceof Clbfile) return v.value;
	if (strict || v == null || typeof v.x3ToString !== 'function') throw badOperand(v);
	return v.x3ToString();
};


export function any(x: any) { return x; }
export function arrayOfAny(x: any[]) { return x; }

export interface X3Session {
	dbConnection: types.Connection;
}
export function currentSession(): X3Session {
	return any(_.context).x3session;
}
export function currentFrame(): types.Frame {
	return any(_.context).x3frame;
}