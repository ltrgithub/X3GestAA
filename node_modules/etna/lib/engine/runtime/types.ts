import { _ } from "streamline-runtime";
import * as ez from "ez-streams";
import * as core from 'syracuse-core';
import { Slots } from './slots';
import { DBTable } from './dbtable';
//import { DBTableSQL } from './dbtablesql';
//import * as superv from '../../supervisor/supervisor';

export interface FrameGClass {
	inFrontOf: FrameGClass;
}

export interface FrameWhereContext {
	revert: boolean;
}

export interface SysValues {
	ADXDCS: number;
}
export interface Sys {
	values: SysValues;
}

export interface FrameContext {
	tables: { [abbrev: string]: DBTable };
	gclass: { [abbrev: string]: FrameGClass };
	tableSlots: Slots;
	superv: any; // see later
	sys: Sys;
}

export interface Prog {
	name: string;
}

export interface Frame {
	context: FrameContext;
	abbrev: string;
	whereContext: FrameWhereContext;
	tryingSql: boolean;
	values: { [name: string]: any };
	types: { [name: string]: string };
	orderBase: number;
	orderCount: number;
	prog: Prog;
}

export interface VariableType {

}
export interface VariableDict {
	types: VariableType[];
	values: any[];
}

export type VariableOp = {
	fn: (frame: Frame, dict: VariableDict, field: string, val?: any, silent?: boolean, strict?: boolean) => any;
	error: (_: _, frame: Frame, field: string, val?: any, silent?: boolean, strict?: boolean) => void;
}

export interface Expression<T> {
	(_: _, op?: VariableOp): T;
	value?: T;
}

export interface ParseNode {
	tag: string;
}

export interface Connection {

}

export interface DriverReaderOptions {

}
export interface Driver {
	nullDate(): core.types.date.DateValue;
	lockClause0(): string;
	param(i: number): string;
	reader(_: _, cnx: Connection, sql: string, args: any[], opts?: DriverReaderOptions): ez.Reader<Row>;
	isUniqueViolated(err: any): boolean;
	isLocked(err: any): boolean; 
}

export type Row = { [name: string]: any };

export interface RowDescType {
	fromSql(_: _, val: any): any;
}
export interface RowDesc {
	name: string;
	type: RowDescType;
}
