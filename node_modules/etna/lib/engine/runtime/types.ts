import { _ } from "streamline-runtime";
import * as ez from "ez-streams";
import * as core from 'syracuse-core';
import { File } from './files';
import { GClass } from './gclass';
import { Slots } from './slots';
import { DBTableParent } from './dbtableparent';
import { Supervisor } from '../../supervisor/supervisor';
import { Connection } from '../drivers/types';

export interface EtnaConfig {
	session?: {
		userName?: string;
	}
}

export interface QueryContext {
	tables?: string[];
	noabbrev?: boolean;
	revert?: boolean;
}

export interface SysValues {
	ADXDCS: number;
	FSTAT: number;
	ADXSQLREC: number;
	ADXIFS: string;
	ADXIRS: string;
	ADXIUM: number;
	ADXTUL: string;
	ADXTUC: string;
	ADXTUT: string;
	ADXDLREC: number;
	ADXUPREC: number;
	ADXLOG: number;
}
export interface Sys {
	values: SysValues;
}

export interface FrameContext {
	globals: VariableDict;
	tables: { [abbrev: string]: DBTableParent };
	gclass: { [abbrev: string]: GClass };
	files: { [abbrev: string]: File };
	tableSlots?: Slots;
	superv: Supervisor;
	sys: Sys;
	err?: any;
}

export interface Location {
	file?: string;
	module?: string;
	line?: number;
	strict?: boolean;
}

export type InstanceIndex = {
	name: string;
	etnaType?: string;
}[];

export interface ProgArg {
	abrev?: string;
	type: string;
	typ?: number; // optional typtyp
	value: any;
	set?: (_: _, val: any) => void;
}

export interface ProgArgMembers {
	name?: string;
	path?: string[];
	jsName?: string;
}

export interface ProgArgsVars {
	THIS?: ProgArg;
	ASTATUS?: ProgArg;
	CURPRO?: ProgArg;
	CURPTH?: ProgArg;
	_AOLDVAL?: ProgArg;
	_ANEWVAL?: ProgArg;
	ARET_VALUE?: ProgArg;
	WCLOB?: ProgArg;
	ARULE?: ProgArg;
	AEVENT?: ProgArg;
	AOPERATION?: ProgArg;
	AMETHOD?: ProgArg;
	[name: string]: any; // should be ProgArg - fix later
}

export type ProgArgs = ProgArgsVars & ProgArgMembers;

export interface Prog {
	name: string;
	loc?: Location;
	body: any;
	params: string[];
	module: any;
}

export interface SubFrame {
	prevSub?: SubFrame;
	name?: string;
	loc?: Location;
	debug?: any;
	debugStepMark?: number;
}

export interface Frame extends SubFrame {
	context: FrameContext;
	prev?: Frame;
	sub?: SubFrame | Frame;
	abbrev?: string;
	whereContext?: QueryContext;
	tryingSql?: boolean;
	values: { [name: string]: any };
	types: { [name: string]: string };
	orderBase?: number;
	orderCount?: number;
	prog?: Prog;
	stackLevel: number;
	loopLevel: number;
	errgo?: (_: _) => void;
	dicts?: VariableDict[];
	tablePos?: number;
	loginName?: string;
	fcall?: string;
}

export interface VariableDict {
	types: { [name: string]: string };
	values: { [name: string]: any };
}

export interface VariableType {	
}
export type VariableOp = {
	fn: (frame: Frame, dict: VariableDict, field: string, val?: any, silent?: boolean, strict?: boolean) => any;
	error: (_: _, frame: Frame, field: string, val?: any, silent?: boolean, strict?: boolean) => void;
}

export interface Expression<T> {
	(_: _, op?: VariableOp, val?: any, silent?: boolean, strict?: boolean): T;
	value?: T;
}

export interface Instruction<T> {
	(): Expression<T>;
}

export interface Function {
	count: number;
	fn(): any;
}

export interface RowDescType {
	fromSql(_: _, val: any): any;
}
export interface RowDesc {
	name: string;
	type: RowDescType;
}

export interface NodeData {
	$type: string;
	$item: NodeProto;
}

export interface NodeLink {
	$type?: string;
	$title?: string;
	$url?: string;
	$target?: string;
}

export interface LinkNodeProto {
	$target?: string;
	$method?: string;
	$url?: string;
	$title?: string;
	$type?: string;
	$confirm?: string;
	$officeAddinSetup?: string;
	$parameters?: LinkParamsNodeProto;
	$kind?: string;
	$isHidden?: boolean;
	$isDisabled?: boolean;
	$links?: { [name: string]: LinkNodeProto; };
	$debug?: any;
	$invocationMode?: string;
	$capabilities?: string;
}

export interface ParamPropertiesNodeProto {
	$type?: string;
	$title?: string;
	dummy?: any; // $ missing !!
}

export interface LinkParamsNodeProto {
	$method?: string;
	$url?: string;
	$properties?: ParamPropertiesNodeProto;
	msoCurrentRepresentation?: string; // $ missing!!
}

export interface PropertyRefProto {
	$url: string;
	$value: any;
	$key: string;
	$properties: { [name: string]: NodeProto }
}

export interface NodeProto {
	$url?: string;
	$type?: string;
	$key?: string;
	$value?: any;
	$title?: string;
	$shortTitle?: string;
	$description?: string;
	$isReadOnly?: boolean;
	$isMandatory?: boolean;
	$isHidden?: boolean;
	$isExcluded?: boolean;
	$isDisabled?: boolean;
	$capabilities?: string;
	$format?: string;
	$maxLength?: number;
	$precision?: number;
	$scale?: number;
	$minItems?: number;
	$maxItems?: number;
	$item?: NodeProto;
	$properties?: { [name: string]: NodeProto };
	$instanceUrl?: string;
	$x3Format?: string;
	$unit?: string;
	$acceptedTypes?: string[];
	$links?: {
		$localize?: NodeLink;
		[name: string]: NodeLink; 
	};
	[name: string]: any;
}

export interface PropertyProto {
	$item?: any;
	$type?: string;
	$capabilities?: string;
}

export interface PropertiesProto {
	$resources?: PropertyProto;
	[name: string]: PropertyProto;
}

export interface LinkProto {
	$url?: string;
	$type?: string;
	$method?: string;
	$title?: string;
	$target?: string;
	$isHidden?: boolean;
	$isDisabled?: boolean;
}

export interface LinksProto {
	[name: string]: LinkProto; 
}

export interface Layout {
	$items?: Article[];
}

export interface Article {
	$layout?: Layout;
	$category?: string;
	$title?: string;
	$bind?: string;
	$order?: number;
	$kind?: string;
	$menus?: Menu;
}

export interface Menu extends Article {
	$CODMENU?: string;
	$PARMENU?: string;
	$isBoxCollapsable?: boolean;
	$opened?: boolean;
}

export interface FilterProto {
}

export interface DiagnosisProto {
}

export interface ReturnProto {
}

export interface ActionProto {
	$diagnoses?: DiagnosisProto[];
	$return?: ReturnProto;
	$isDisabled?: boolean;
	$isHidden?: boolean;
	$isRequested?: boolean;
	$links?: LinksProto;
}

export interface ActionsProto {
	$save?: ActionProto;
	[name: string]: ActionProto;
}

export interface ServiceProto {
	$baseUrl?: string;
	$prototype?: string;
	$representation?: string;
	$url?: string;
	$type?: string;
	$etag?: number;
	ETag?: number;
	$uuid?: string;
	$actions?: ActionsProto;
	$diagnoses?: DiagnosisProto[];
}

export interface X3FormatProto {
	stdType: string;
	chars: string;
}
export interface PageProto {
	$article?: Article;
	$filters?: { [name: string]: FilterProto; };
	$actxUser?: string;
	$actxLogin?: string;
	$actxFolder?: string;
	$actxSolution?: string;
	$actxLan?: string;
	$actxLanDef?: string;
	$actxLanIso?: string;
	$actxLegCur?: string;
	$actxNbLeg?: string;
	$baseType?: string;
	$type?: string;
	$representation?: string;
	$prototype?: string;
	$device?: string;
	$title?: string;
	$collaborationUrl?: string;
	$baseUrl?: string;
	$repUrl?: string;
	$instanceUrl?: string;
	$x3FormatExt?: { [name: string]: X3FormatProto; };
	$url?: string;
	$itemsPerPage?: number;
	$properties?: PropertiesProto;
	$links?: LinksProto;
	$actions?:  { [name: string]: ActionProto; };
}

export interface ValueNode {
	$code: string;
	$value: string;
	$title: string;
	$locale: string;
}

export interface DataNode {
	$uuid?: string;
	$links?: LinksProto;
	$diagnoses?: DiagnosisProto[];
	$values?: ValueNode[];
	$access?: string;
	$isDeleted?: boolean;
	$index?: number;
	$url?: string;
	[name: string]: any;
}

export interface Feed {
	$itemsPerPage?: number;
	$resources?: DataNode[];
	$links?: LinksProto;
}

export interface ResourceNode {
	$trackingId?: string;
	$baseUrl?: string;
	$prototype?: string;
	$representation?: string;
	$url?: string;
	$type?: string;
	$etag?: any;
	ETag?: any;
	$actions?: ActionsProto;
	$httpMethod?: string;
}

export interface QueryParams {
	$orderBy: string;
	$query: string;
	$params: any;
}

export interface X3Session {
	dbConnection: Connection;
	transactionLevel: number;
	userName: string;
	locale: string;
}

export interface X3Prog<T> {
	name?: string;
	params: string[];
	body: (_: _) => T;
}
