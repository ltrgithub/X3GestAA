"use strict";
var fs = require('streamline-fs');
var helpers = require('syracuse-core').helpers;
var config = require("etna/configRuntime");

var _defaultDir = "DefaultDir";
var _isWin = /^win/.test(process.platform);
var _dirsep = (_isWin) ? "\\" : "/";
var _slash = "/".charCodeAt(0);
var _dot = ".".charCodeAt(0);
var _dotdot = ":".charCodeAt(0);

// -----------------------------------------------------------
function _patabs(pat) {
	return (
		(pat.charCodeAt(0) === _slash) ||
		(pat.charCodeAt(1) === _dotdot) ||
		(
			(pat.charCodeAt(0) === _dot) &&
			(
				(pat.charCodeAt(1) === _slash) ||
				(!(pat.charCodeAt(1))) ||
				((pat.charCodeAt(1) === _dot) && ((pat.charCodeAt(2) === _slash) || (!(pat.charCodeAt(2)))))
			)
		)
	);
}

// -----------------------------------------------------------
function _fromString(can, canstr) {

	//replace \\	
	var str = canstr.replace(/\\/g, "/");

	// host
	var p = str.lastIndexOf("@");
	if (p >= 0) {
		if (p > 0) can.host = str.slice(0, p);
		str = str.substr(p + 1);
	}

	// volume
	p = str.lastIndexOf("%");
	if ((p >= 0) && (!(_patabs(str)))) {
		if (p > 0) can.volume = str.slice(0, p);
		str = str.substr(p + 1);
	}

	// app
	p = str.lastIndexOf(".");
	if ((p >= 0) && (!(_patabs(str)))) {
		if (p > 0) can.application = str.slice(0, p);
		str = str.substr(p + 1);
	}

	for (var i = str.length; i > 0; i--) {
		if ((str.charCodeAt(i - 1) === _slash) ||
			(i === 2) && (str.charCodeAt(1) === _dotdot))
			break;
	}

	if (i > 0) {
		var si = i;
		if (!(str.charCodeAt(i))) {
			// root case			
			if (i === 1) {
				//case '/'
				i++;
			} else if (str.charCodeAt(1) === _dotdot) {
				if (i === 3) {
					//case 'c:/'
					i++;
				} else if (i === 2) {
					//case 'c:'
					var dd = str.slice(0, 1) + ":/";
					i = 4;
				}
			}
		}
		can.directory = dd || str.slice(0, i - 1);
		str = str.substr(si);
	}

	p = str.lastIndexOf("$");
	if (p >= 0) {
		can.extention = str.substr(p + 1);
		if (p > 0) can.name = str.slice(0, p);
	} else if (str !== "") can.name = str;

	return (can);
}


var X3path = helpers.defineClass(function(_, superv, dir, nam, ext, app, vol, hst) { // constructor
	var self = this;
	var p, fca;
	var result = "";

	_fromString(self, nam);

	if ((self.directory === undefined) && (dir !== ""))
		self.directory = dir;

	fca = (self.directory && _patabs(self.directory)) ? true : false;

	// host
	if (self.host === undefined) {
		p = app.lastIndexOf("@");
		if (p >= 0) {
			self.host = app.slice(0, p);
			app = app.substr(p + 1);
		} else if (hst !== "")
			self.host = hst;
	}

	// volume
	if ((self.volume === undefined) && (!(fca))) {
		p = app.lastIndexOf("%");
		if (p >= 0) {
			self.volume = app.slice(0, p);
			app = app.substr(p + 1);
		} else if (vol !== "")
			self.volume = vol;
	}

	// application
	if ((self.application === undefined) && (!(fca)))
		self.application = app;

	// extention
	if ((self.extention === undefined) && (ext !== ""))
		self.extention = ext;

	// find host of  a known appication
	// ....

	// find the right application path
	//could we accept still accept this
	// I don't think so, it used sript and file

	if (self.application === "")
		self.application = superv.folderName;
	// we simply get the current application


	// rebuild self string
	if (self.host) result += hst + "@";
	if (self.application) result += self.application + ".";
	if (self.directory) result += self.directory + "/";
	if (self.name) result += self.name;
	if (self.extention) result += "$" + self.extention;

	self.string = result;

	self.volumes = self.getFolderVolumes(superv);

	return (self);

}, null, { // Pass null if no parent class - public methods follow

	toString: function(_) {
		var self = this;
		var vol, pat;

		if (self.volume) {
			for (var i = 0; i < this.volumes.length; i++) {
				if (self.volume === this.volumes[i].name) {
					vol = this.volumes[i].path;
					break;
				}
			}
			if (!(vol)) return "";
		}

		if (self.directory && _patabs(self.directory)) {
			pat = "";
		} else if ((!(self.application)) || self.application === "" || self.application === "!") {
			pat = (vol) ? vol.path : _defaultDir; // should nt exist
		} else {
			if (!(vol)) pat = self.getApplicationVolumes(_, self.application);
			else pat = vol;
			if (!(pat)) pat = _defaultDir;
			pat += _dirsep + self.application;
		}

		if (self.directory) pat += (pat === "") ? self.directory.replace(/\//g, _dirsep) : _dirsep + self.directory.replace(/\//g, _dirsep);
		if (self.name) pat += _dirsep + self.name;
		if (self.extention) pat += "." + self.extention;

		return pat;
	},

	toCanString: function() {
		var self = this;
		return self.string;
	},
	getFolderVolumes: function(superv) {
		var dir = config.sandbox.directories;
		var vol = dir.reduce(function(vol, obj) {
			if (obj.volume) {
				var path = obj.path.replace(/\{(\w+)\}/, function(str, p1, offset, s) {
					return superv[p1];
				});
				vol.push({
					name: obj.volume,
					path: path
				});
			}
			return vol;
		}, []);
		return (vol);
	},
	getApplicationVolumes: function(_, app) {
		for (var i = 0; i < this.volumes.length; i++) {
			try {
				fs.stat(this.volumes[i].path + _dirsep + app, _);
				return this.volumes[i].path;
			} catch (e) {
				if (e.code !== 'ENOENT') return this.volumes[i].path;
			}
		}
		return undefined;
	}


});

exports.X3path = X3path;

/*
exports.filpath = filpath ;
exports.buildPath = buildPath ;
*/

/*
var res = _fromString("machine@SUPERV.TRT/filname$adx");
var res = _fromString("machine@SUPERV.TRT/SUB/filname$adx");
var res = _fromString("machine@SUPERV.TRT/SUB/filname");
var res = _fromString("machine@SUPERV.filname");
var res = _fromString("machine@SUPERV.filname$adx");
var res = _fromString("machine@/home/adonix/toto$adx");
var res = _fromString("machine@/adonix/toto$adx");
var res = _fromString("machine@toto$adx");
var res = _fromString("@SUPERV.TRT/adonix$adx");
var res = _fromString("SUPERV.TRT/adonix$adx");
var res = _fromString("c:/");
var res = _fromString("c:\\");
var res = _fromString("/");
var res = _fromString("@/");
var res = _fromString("@c:");
var res = _fromString("@c:/");
var res = _fromString("@c:\\");
var res = _fromString("SUPERV.TRT/TRALALA/adonix$");
var res = _fromString("/machin/chose/adonix$adx");
var res = _fromString("C:\\taratata\\adonix$adx");

var can;
can = filpath(_, "", "", "", "", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "TRT", "fic", "src", "X3", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "TRT", "", "", "X3", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "TRT", "", "", "X3", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "", "X3.adxora", "", "", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "", "X3.TRT/adxora", "", "", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "", "X3.TRT/adxora", "json", "", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "", "X3.TRT/adxora", "json", "SUPERV", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "", "X3.TRT/adxora", "json", "", "", "taratata");
console.log(can);
console.log(buildPath(_, can));
*/