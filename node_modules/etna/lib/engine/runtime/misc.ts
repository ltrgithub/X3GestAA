import { _ } from 'streamline-runtime';
import * as types from './types';
const flows = require('streamline-runtime').flows;
import * as util from './util';
import * as basic from './basic';
import * as errors from './errors';

export const instructions = {
	CALLJS(mode: string, ns: types.Expression<any>, name: string, args: types.Expression<any[]>) {
		return function calljs$do(_: _) {
			const nsVal = ns(_);

			var mod: any;
			try {
				mod = require(nsVal);
			} catch (ex) {
				throw ex.errn ? ex : new errors.X3Error(20, ex.message);
			}
			const fn = mod[name];
			if (!fn) throw new errors.X3Error(4, "unknown JS function: " + nsVal + "." + name);
			const vals = args(_);

			switch (mode) {
				case "sync":
					return fn.apply(this, vals);
				case "async":
					return flows.apply(_, fn, this, vals, 0);
				default:
					throw new errors.X3Error(26, "invalid Calljs mode: " + mode);
			}
		};
	},
	BOX(kind: string, args: types.Expression<any>[]) {
		const aargs = basic.instructions.A(args);

		return function log$do(_: _) {
			const message = aargs(_).join('\t');
			const logger = kind === 'error' ? console.error : console.log;

			logger(message);
		};
	},

	CLOSEMESBOX() {
		return function closemesbox$do(_: _) {
			//compilation compatibility
		};
	},

	DBGETNA(args: types.Expression<any>[]) {
		const aargs = args ? basic.instructions.A(args) : null;

		return function dbg$do(_: _) {
			const val = aargs(_);

			setTimeout(_, val[0] ? val[0] : 5000);
			if ("keep me") debugger;
		};
	},

	SLEEP(args: types.Expression<any>[]) {
		const aargs = args ? basic.instructions.A(args) : null;

		return function sleep$do(_: _) {
			const val = aargs(_);

			setTimeout(_, 1000 * (val[0] ? val[0] : 1));
		};
	}
};

export const functions = {
	XCRYPT: {
		count: 1,
		fn(key: void) {
			throw new errors.X3Error(33, "NIY: XCRYPT");
		}
	},
	LEN2: {
		count: 1,
		fn(key: void) {
			throw new errors.X3Error(33, "NIY: LEN2");
		}
	},
	APPX3: {
		count: 1,
		fn(key: void) {
			throw new errors.X3Error(33, "NIY: APPX3");
		}
	}
};