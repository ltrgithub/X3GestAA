"use strict";

import { X3Error } from './errors';
import * as util from './util';
const base = require('syracuse-core').types.date;
const NULLORIGIN = base.make(1599, 12, 31);
const MIN = base.make(1600, 1, 1);
const MAX = base.make(9999, 12, 31);
const NULL = base.make(0, 0, 0);
const _prototype = Object.getPrototypeOf(base.today());

_prototype.x3ToString = function () {
	return this.x3IsZero() ? "000000" : this.toString("yyyyMMdd");
};

_prototype.x3ToJson = function () {
	return this.x3IsZero() ? "0000-00-00" : this.toString("yyyy-MM-dd");
};

_prototype.x3NumDollar = function () {
	return this.x3IsZero() ? "00/00/0000" : this.toString("dd/MM/yyyy");
};

_prototype.x3ToInteger = function () {
	throw util.badOperand();
};

_prototype.x3Val = function () {
	return this.x3IsZero() ? 0 : this.x3ToString();
};

_prototype.x3ToDouble = function () {
	throw util.badOperand();
};

_prototype.x3ToDate = function () {
	return this;
};

_prototype.x3ToDatetime = function () {
	throw util.badOperand();
};

_prototype.x3ToBCD = function () {
	throw util.badOperand();
};

_prototype.x3Serialize = function (l) {
	const dif = this.x3Sub(exports.MIN) + 1;

	return dif.x3Serialize(l);

	/*
 	switch(l) {
 		case 3 :
 		case 4 :
 			var dif = this.x3Sub(exports.MIN)+1;
 			return dif.x3Serialize(4) ;
 		default :
 			throw new X3Error( 26, "Bad date long") ;
 	}
 	*/
};

_prototype.x3IsNumeric = function () {
	return false;
};

_prototype.x3IsZero = function () {
	return !this || !this.year || !this.month || !this.day;
};

_prototype.x3IsUndefined = _prototype.x3IsZero;

_prototype.x3IsEmpty = function () {
	throw util.badOperand(this);
};

_prototype.x3Compare = function (v) {
	return this.compare(v) > 0 ? 1 : this.compare(v) < 0 ? -1 : 0;
};

_prototype._addOrSub = function (v, op) {
	if (v.x3IsNumeric()) {
		var d = this.x3IsZero() ? MIN : this;
		var diff = op * v.x3ToInteger();

		if (this.x3IsZero()) diff -= 1;
		var r = d.addDays(diff >= 0 ? Math.floor(diff) : Math.ceil(diff));
		if (!r.x3IsZero() && r < NULLORIGIN.valueOf()) throw new X3Error(56, "");
		if (r.compare(MAX) > 0) throw new X3Error(56, "");
		return r;
	}
	if (util.x3IsDate(v)) return this.daysDiff(v);
	if (util.x3IsString(v) || util.x3IsClbfile(v)) return this.x3ToString().x3Add(v);
	throw util.badOperand();
};

_prototype.x3Add = function (v) {
	const date = this._addOrSub(v, 1);

	return date > MAX.valueOf() ? MAX : date;
};

_prototype.x3Sub = function (v) {
	const date = this._addOrSub(v, -1);

	return date < MIN.valueOf() ? NULL : date;
};

_prototype.x3Mul = function (v) {
	throw util.badOperand(v);
};

_prototype.x3Div = function (v) {
	throw util.badOperand(v);
};

_prototype.x3Mod = function (v) {
	throw util.badOperand(v);
};

_prototype.x3Pow = function (v) {
	throw util.badOperand(v);
};

_prototype.x3Xor = function (v) {
	throw util.badOperand(v);
};

_prototype.x3Abs = function (v) {
	throw util.badOperand(v);
};

_prototype.x3Truncate = function (v) {
	return new Date(this._value);
};

_prototype.x3Nday = function (origin) {
	return this.x3IsZero() ? new Number(-1) : new Number(this.daysDiff(origin));
};

_prototype.x3AddDays = function (n) {
	if (n.x3IsNumeric()) {
		if (n < 0) return NULL;
		var date = this._addOrSub(n, 1);
		if (date < MIN) return MIN;
		else if (date > MAX) return MAX;
		return date;
	}
};

_prototype.x3AddMonths = function (months) {
	if (months.x3IsNumeric()) {
		var d = this.addMonths(months.valueOf());
		if (d.x3Compare(MIN) < 0 || d.x3Compare(MAX) > 0) throw new X3Error(56, "out off limit");
		return d;
	}
};

Object.defineProperty(_prototype, 'x3Year', {
	get() {
		return this.x3IsZero() ? 0 : this.year;
	},
	set(year) {
		this.year = year;
	},
	enumerable: false
});

_prototype.x3ToSql = function (driver) {
	return this.x3IsZero() ? driver.nullDate() : this.toJsDate(true);
};

_prototype.x3Clone = function () {
	return new this.constructor(this._value);
};

_prototype.x3Type = function () {
	return 3;
};

export function parse(str, format) {
	const date = base.parse(str, format);

	if (!date.year || !date.month || date.month > 12 || !date.day || date.day > 31) return NULL;
	return date.compare(MIN) < 0 ? NULL : date;
};

exports.make = base.make;
exports.year = base.year;
exports.today = base.today;
exports.dayName = base.dayName;
exports.today = base.today;
exports.makeInWeek = base.makeInWeek;
exports.monthName = base.monthName;
exports.fromJsDate = base.fromJsDate;
exports.toJsDate = base.toJsDate;
exports.isDate = base.isDate;

exports.MIN = MIN;
exports.NULL = NULL;
exports.MAX = MAX;