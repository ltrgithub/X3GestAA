"use strict";

const bcd = require('./tbcd');
const db = require('./db');
const glob = require('streamline/lib/globals');

/*
 * Eval
 */


const Parser = require("../parser").Parser;

var instructions;

const util = require('./util');
const errors = require('./errors');
const X3Error = errors.X3Error;


function buildLiteral(node) {
	return util.instructions.C(node.value);
}

function buildDecimal(node) {
	return util.instructions.C(bcd.fromString(node.value));
}

var _buildExports;
var _buildRequire;

const builders = {
	STRING: buildLiteral,
	DECIMAL: buildDecimal,
	INTEGER: buildLiteral,
	IDENT(node) {
		return instructions.SQLV(node.value);
	},
	CLAS(node) {
		return instructions.SQLCV(node.letter, node.abbrev, node.field.toUpperCase());
	},
	OP(node) {
		return instructions["SQL" + node.op].apply(null, node.args.map(_build));
	},
	FCALL(node) {
		return instructions.SQLF(node.name, (node.args || []).map(_build));
	},
	EVALUE(node) {
		return instructions.SQLEVALUE(_buildRequire, _buildExports, _build(node.arg));
	},
	INDEX(node) {
		return instructions.SQLINDEX(_build(node.target), node.args.map(_build));
	},
	DATE(node) {
		return instructions.DATE(node.year, node.month, node.day);
	}
};


function _build(node) {
	const builder = builders[node.tag];

	if (!builder) throw new X3Error(200, "unsupported eval construct: " + node.tag);
	return builder(node);
}

exports.functions = {
	EVALUE: { // parser needs it in this table but fn will never be called
		count: -1
	}
};

exports.instructions = {
	EVALUE(req, ns, arg) {
		return function evalue$do(_) {
			const frame = glob.context.x3frame;
			const ctx = frame.whereContext;


			instructions = instructions || require('./db').instructions;
			var argVal = arg(_);
			if (Array.isArray(argVal) && argVal[0] == 1) {
				var exp = "";
				for (var i = 0; i < argVal[2].length; i++) {
					exp += argVal[2][i];
				}
				argVal = exp;
			}
			argVal = util.x3ToString(argVal, true);
			try {
				var node = new Parser(argVal, "eval").parseExp(true);
				_buildRequire = req;
				_buildExports = ns;
				var fn = _build(node);
				return fn(_, ctx);
			} catch (e) {
				if (e.errn === 200) throw new X3Error(5, "Illegal character");
				else if (e.errn === 13) throw new X3Error(26, "Internal error");
				throw e;
			}
		};
	}
};