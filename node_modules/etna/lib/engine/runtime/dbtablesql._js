"use strict";

const util = require('./util');
const helpers = require('syracuse-core').helpers;
const tracer = require('syracuse-core').getTracer("etna.engine");
const variables = require('./variables');

const DBTableParent = require('./dbtableparent').DBTableParent;
const DBCursor = require('./dbcursor').DBCursor;

class DBTableSQL extends DBTableParent {
	constructor(driver, abbrev, superv, loc, qry) {
		super(driver, abbrev, superv, loc);
		this.query = qry;
	}
	init(_) {
		return this;
	}
	declVar(type, name) {
		const self = this;

		self.values[name] = variables.types[type[1]].def;
		self.types[name] = type;
	}
	x3OpenFor(_, fieldList) {
		const self = this;
		const utilDriver = require("etna/lib/engine/drivers/util");

		/* query describe  */

		const desc = self.driver.describeQuery(_, self.query, self.superv.folderName);
		const descobj = {};

		for (var i = 0; i < desc.length; i++) {
			descobj[desc[i].name] = {
				"name": fieldList[i].name,
				"typtyp": fieldList[i].typtyp,
			};
		}
		const maptrim = utilDriver.mapFromSql(self.driver, self.abbrev, descobj);

		// execution ---------------------------------------
		const dbrd = {};
		const tables = {};
		tables[self.abbrev] = self;

		const rdr = self.driver.reader(_, self.query, [], dbrd);
		return new DBCursor(rdr, tables, maptrim, [], null, 0, "for");
	}
	x3CloseFor() {}
}

exports.DBTableSQL = DBTableSQL;