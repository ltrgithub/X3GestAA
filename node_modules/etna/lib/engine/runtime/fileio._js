"use strict";

var fs = require('streamline-fs');
var X3path = require('./x3path').X3path;
var File = require('./files').File;
var util = require('./util');
var variables = require('./variables');
var arrays = require('./arrays');
var X3Error = require('./errors').X3Error;
var config = require("etna/lib/util/nodeconfig").config.etna;
var glob = require('streamline/lib/globals');
var fs = require('streamline-fs');
/* 
 * Sequential I/0
 */
var defabv = {
	"r+": "###",
	"w": "##",
	"r": "#"
};

exports.functions = {
	DIR$: {
		count: 0,
		fn: function() {
			return process.cwd();
		}
	},
	FILEXIST: {
		count: 3,
		async: true,
		fn: function(_, machine, folder, name) {
			var frame = glob.context.x3frame;
			var xp = new X3path(_, frame.context.superv, "TRT", name, "adx", frame.context.superv.folderName, "", machine);
			try {
				var stat = fs.stat(xp.toString(_), _);
				return 1;
			} catch (ex) {
				if (ex.code === 'ENOENT') return 0;
				else throw ex;
			}
		}
	},
	FILINFO: {
		count: 2,
		async: true,
		fn: function(_, path, what) {
			var frame = glob.context.x3frame;
			var stat;

			var xp = new X3path(_, frame.context.superv, path, "", "", "", "");
			if (xp === "") throw new X3Error(20, "");

			try {
				stat = fs.stat(xp.toString(_), _);
			} catch (ex) {
				if (ex.code === 'ENOENT') return -20;
				else throw ex;
			}
			//console.log("FILINFO: " + path + ": " + require("sys").inspect(stat));
			switch (what) {
				case 0:
					// mode 
					return stat.mode;
				case 1:
					return stat.ino;
				case 2:
					// device id, 
				case 3:
					// device id, char or block mode (who cares?)
					return stat.dev;
				case 4:
					// link number
					return stat.nlink;
				case 5:
					return stat.uid;
				case 6:
					return stat.gid;
				case 7:
					return stat.size;
				case 8:
					return stat.uid;
				case 9:
					return stat.atime;
				case 10:
					return stat.mtime;
				case 11:
					return stat.ctime;
				default:
					// cannot find 
					throw new X3Error(10, "bad filinfo action: " + what);
			}
		},
	},
	FILCOM: {
		//count: 6,
		// some args are optional (for ex only 4 in AVOLUME_CSTD line 665)
		fn: function(folder, name, ext, app, drive, host) {
			folder = util.x3ToString(folder, true);
			name = util.x3ToString(name, true);
			ext = util.x3ToString(ext, true);
			app = app || "test";
			return config.tmpRoot + "/" + app + (folder ? "/" + folder : "") + "/" + name + (ext ? "." + ext : "");
		}
	},
	FILPATH: {
		async: true,
		count: -1,
		fn: function(_, dir, nam, ext, app, vol, hst) {
			var frame = glob.context.x3frame;

			// app, vol and hst are optionnals
			dir = util.x3ToString(dir, true);
			nam = util.x3ToString(nam, true);
			ext = util.x3ToString(ext, true);

			if (app) app = util.x3ToString(app);
			if (vol) vol = util.x3ToString(vol, true);
			if (hst) hst = util.x3ToString(hst, true);

			// see later
			var xp = new X3path(_, frame.context.superv, dir, nam, ext, app || "", vol || "", hst || "");
			return xp.toString(_);
		}
	},
	DELFILE: {
		async: true,
		count: 1,
		fn: function(_, name) {
			var frame = glob.context.x3frame;
			name = util.x3ToString(name, true);

			var xp = new X3path(_, frame.context.superv, name, "", "", "", "");

			try {
				fs.unlink(xp.toString(_), _);
				return 0;
			} catch (ex) {
				return -20;
			}

		}
	},
	RENAMEFILE: {
		async: true,
		count: 2,
		fn: function(_, oldf, newf) {
			var frame = glob.context.x3frame;
			oldf = util.x3ToString(oldf, true);
			newf = util.x3ToString(newf, true);

			var xpo = new X3path(_, frame.context.superv, oldf, "", "", "", "");
			var xpn = new X3path(_, frame.context.superv, newf, "", "", "", "");

			try {
				fs.rename(xpo.toString(_), xpn.toString(_), _);
				return 0;
			} catch (ex) {
				return -20;
			}
		}
	}
};

function findFile(frame, abbrev) {
	var file = frame.context.files[abbrev];
	if (!file) throw new X3Error(7, "Sequential file abbrev not found: " + abbrev);
	return file;
}

function closeFile(frame, abbrev) {
	if (abbrev === "") {
		if (frame.context.files["###"])
			frame.context.files["###"] = null;
		else if (frame.context.files["##"])
			frame.context.files["##"] = null;
		else frame.context.files["#"] = null;
	} else frame.context.files[abbrev] = null;
}

function findFileS(frame, abbrev) {
	var file;
	if (abbrev === "")
		file = frame.context.files["###"] || frame.context.files["##"] || frame.context.files["#"];
	else
		file = frame.context.files[abbrev];

	if (!file) throw new X3Error(7, "Sequential file abbrev not found: " + abbrev);
	return file;
}

function findFileW(frame, abbrev) {
	var file;
	if (abbrev === "")
		file = frame.context.files["###"] || frame.context.files["##"];
	else
		file = frame.context.files[abbrev];

	if (!file) throw new X3Error(7, "Sequential file abbrev not found: " + abbrev);
	return file;
}

function findFileR(frame, abbrev) {
	var file;
	if (abbrev === "")
		file = frame.context.files["###"] || frame.context.files["#"];
	else
		file = frame.context.files[abbrev];

	if (!file) throw new X3Error(7, "Sequential file abbrev not found: " + abbrev);
	return file;
}

exports.instructions = {
	OPEN: function(abbrev, name, mode, seek) {
		seek = seek || util.instructions.C(0);
		return function open$do(_) {
			var frame = glob.context.x3frame;
			var nameVal = name(_);
			var seekVal = seek(_);

			var xp = new X3path(_, frame.context.superv, nameVal, "", "", "", "");
			var fl = new File(frame.context.sys);

			fl.x3open(_, xp, seekVal, mode);

			// abbrev management
			if (abbrev === "") abbrev = defabv[mode];

			frame.context.files[abbrev] = fl;
		};
	},
	CLOSE: function(abbrev) {
		return function close$do(_) {
			var frame = glob.context.x3frame;
			var file = findFileS(frame, abbrev, 1);

			file.x3close(_);
			closeFile(frame, abbrev);
		};
	},
	IOMODE: function(abbrev, mode, value) {
		mode = mode.toLowerCase();
		return function iomode$do(_) {
			var frame = glob.context.x3frame;
			var file = findFile(frame, abbrev);
			var val = value(_);

			file[mode] = (val === "" || val === 0) ? undefined : val;
		};
	},
	SEEK: function(abbrev, mode, _direction, value) {
		return function seek$do(_) {
			var frame = glob.context.x3frame;
			var file = findFileS(frame, abbrev);

			var direction = (typeof _direction === "function") ? _direction(_) : parseInt(_direction);
			if (direction === null) direction = 0;
			var val = (typeof value === "function") ? value(_) : parseInt(value);
			file.x3seek(_, mode, direction, val);
		};
	},
	WRSEQ: function(abbrev, exps) {
		return function wrseq$do(_) {
			var frame = glob.context.x3frame;
			var file = findFileW(frame, abbrev);
			var vals = exps(_);

			if (vals[vals.length - 1] !== null)
				var newline = 1;
			else {
				vals.pop();
				var newline = 0;
			}
			return file.x3write(_, vals, newline);
		};
	},
	RDSEQ: function(abbrev, vars) {
		return function rdseq$do(_) {
			var frame = glob.context.x3frame;
			var file = findFileR(frame, abbrev);
			var f, s, i = 0,
				index = 0;

			// read the line
			var vals = file.x3read(_);
			if (vals.length === 0) {
				glob.context.x3frame.context.sys.values.FSTAT = 1;
				while (vars[i]) {
					f = vars[i++];
					f(_, variables.vOperations.RAZ);

				}

				return 0;
			} else
				glob.context.x3frame.context.sys.values.FSTAT = 0;

			// loop on all variables and values
			while (vars[i]) {
				f = vars[i++];
				s = f(_);

				//console.log(s);
				if (Array.isArray(s)) {
					var fidx;
					if (s[1] > 1)
						throw new X3Error(26, "More than 1 dimension is not supported");
					var min = s[3];
					var max = (s[6]) ? s[3] + s[6] - 1 : s[4];

					for (var j = min; j <= max; j++) {
						fidx = arrays.instructions.INDEX(vars[i - 1], [util.instructions.C(j)]);
						fidx(_, true, vals[index++]);
						if (index >= vals.length) break;
					}
				} else {

					f(_, variables.vOperations.SET, vals[index++], 0);
					if (index >= vals.length) break;
				}
			}
			return 0;
		};
	},
	PUTSEQ: function(abbrev, nbr, vars) {
		return function putseq$do(_) {
			var frame = glob.context.x3frame;
			var file = findFileW(frame, abbrev);
			var vals = [];
			var size = [];
			var vnbr = nbr(_);
			var f, s, inf, i = 0;

			// prepare values and length
			while (vars[i]) {
				f = vars[i++];
				vals.push(f(_));

				inf = f(_, variables.vOperations.GETINFO);
				if (inf.vsize) size.push(inf.vsize);
				else size.push(0);
			}

			return file.x3put(_, vnbr, vals, size);
		};
	},
	GETSEQ: function(abbrev, nbr, vars, sized) {
		return function putseq$do(_) {
			var frame = glob.context.x3frame;
			var file = findFileR(frame, abbrev);
			var size = [];
			var vsized = (sized) ? sized(_) : undefined;
			var f, inf, v, i = 0,
				n = 0;

			// set variables loop
			while (vars[i]) {
				f = vars[i++];
				v = f(_);
				inf = f(_, variables.vOperations.GETINFO);

				if (Array.isArray(v)) {
					var fidx;
					if (v[1] > 1)
						throw new X3Error(26, "More than 1 dimension is not supported");
					var min = v[3];
					var max = (v[6]) ? v[3] + v[6] - 1 : v[4];

					for (var j = min; j <= max; j++) {
						// get value
						var val = file.x3get(_, inf.vsize);
						if (!(val)) {
							glob.context.x3frame.context.sys.values.FSTAT = 1;
							return (0);
						}
						// set value in table variable
						fidx = arrays.instructions.INDEX(vars[i - 1], [util.instructions.C(j)]);
						fidx(_, true, val);
						if (++n >= nbr) break;
					}
					if (n >= nbr) break;
				} else {
					// get value
					// hack on sized
					var val = file.x3get(_, ((i === 1) && (vsized)) ? vsized : inf.vsize);
					if (!(val)) {
						glob.context.x3frame.context.sys.values.FSTAT = 1;
						return (0);
					}
					// set value
					f(_, variables.vOperations.SET, val, 0);
					if (++n >= nbr) break;
				}
			}
			glob.context.x3frame.context.sys.values.FSTAT = 0;
			return (0);
		};
	},
};