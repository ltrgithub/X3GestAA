import { Driver } from '../drivers/types';
import * as util from './util';
import * as tdate from './tdate';
import * as tdatetime from './tdatetime';
const datetime = require('syracuse-core').types.datetime;
import * as tbcd from './tbcd';
import { X3Error } from './errors';

export class Clbfile {
	value: string;
	constructor(v: string) {
		if (typeof v === "string") {
			this.value = v;
		} else throw util.badOperand(v);
	}
	// we delegate almost everything to tstring - keeps things simple.
	toString() {
		return this.value;
	}
	valueOf() {
		return this.value;
	}
	x3IsNumeric() {
		return false;
	}
	x3AssertOverflow(type: string) {
		return true;
	}
	x3Minus() {
		throw this.value.x3Minus();
	}
	x3ToDouble() {
		return this.value.x3ToDouble();
	}
	x3ToString() {
		return this.value;
	}
	x3ToBCD() {
		return this.value.x3ToBCD();
	}
	x3Serialize(len: number) {
		return this.value.x3Serialize(len);
	}
	x3ToInteger() {
		return this.value.x3ToInteger();
	}
	x3ToDate() {
		return this.value.x3ToDate();
	}
	x3ToUuid() {
		return this.value.x3ToUuid();
	}
	x3ToDatetime() {
		return this.value.x3ToDatetime();
	}
	x3IsZero() {
		return this.value.x3IsZero();
	}
	x3IsEmpty() {
		return this.value.x3IsEmpty();
	}
	x3IsUndefined() {
		return this.value.x3IsUndefined();
	}
	x3Length() {
		return this.value.x3Length();
	}
	x3Compare(b: any) {
		return this.value.x3Compare(b);
	}
	x3Add(b: any) {
		return this.value.x3Add(b);
	}
	x3Sub(b: any) {
		return this.value.x3Sub(b);
	}
	x3Mul(b: any) {
		return this.value.x3Mul(b);
	}
	x3Div(b: any) {
		return this.value.x3Div(b);
	}
	x3Mod(b: any) {
		return this.value.x3Mod(b);
	}
	x3Pow(b: any) {
		return this.value.x3Pow(b);
	}
	x3Xor(b: any) {
		return this.value.x3Xor(b);
	}
	x3Abs() {
		return this.value.x3Abs();
	}
	x3Truncate(v: number) {
		return this.value.x3Truncate(v);
	}
	x3ToSql(driver: Driver) {
		return this.value.x3ToSql(driver);
	}
	x3Val() {
		return this.value.x3Val();
	}
	x3Clone() {
		return new Clbfile(this.value);
	}
	x3ToClbfile() {
		return this.x3Clone();
	}
	x3Type() {
		return 523;
	}
}

;

export const functions = {
	APPEND: {
		count: 2,
		fn(clb: any, arg: any) {
			if (!util.x3IsClbfile(clb)) {
				console.log("Clbfile APPEND:" + clb + " arg:" + arg);
				throw util.badOperand(clb);
			}
			clb.value += util.x3ToString(arg, true);
		}
	}
};