"use strict";

const fs = require('streamline-fs');
const config = require("etna/configRuntime");
const _defaultDir = "DefaultDir";
const _isWin = /^win/.test(process.platform);
const _dirsep = _isWin ? "\\" : "/";
const _slash = "/".charCodeAt(0);
const _dot = ".".charCodeAt(0);
const _dotdot = ":".charCodeAt(0);

// -----------------------------------------------------------

function _patabs(pat) {
	return pat.charCodeAt(0) === _slash || pat.charCodeAt(1) === _dotdot || pat.charCodeAt(0) === _dot && (pat.charCodeAt(1) === _slash || !pat.charCodeAt(1) || pat.charCodeAt(1) === _dot && (pat.charCodeAt(2) === _slash || !pat.charCodeAt(2)));
}

// -----------------------------------------------------------
function _fromString(can, canstr) {

	//replace \\	
	var str = canstr.replace(/\\/g, "/");

	// host
	var p = str.lastIndexOf("@");
	if (p >= 0) {
		if (p > 0) can.host = str.slice(0, p);
		str = str.substr(p + 1);
	}

	// volume
	p = str.lastIndexOf("%");
	if (p >= 0 && !_patabs(str)) {
		if (p > 0) can.volume = str.slice(0, p);
		str = str.substr(p + 1);
	}

	// app
	p = str.lastIndexOf(".");
	if (p >= 0 && !_patabs(str)) {
		if (p > 0) can.application = str.slice(0, p);
		str = str.substr(p + 1);
	}

	for (var i = str.length; i > 0; i--) {
		if (str.charCodeAt(i - 1) === _slash || i === 2 && str.charCodeAt(1) === _dotdot) break;
	}

	if (i > 0) {
		var si = i;
		if (!str.charCodeAt(i)) {
			// root case			
			if (i === 1) {
				//case '/'
				i++;
			} else if (str.charCodeAt(1) === _dotdot) {
				if (i === 3) {
					//case 'c:/'
					i++;
				} else if (i === 2) {
					//case 'c:'
					var dd = str.slice(0, 1) + ":/";
					i = 4;
				}
			}
		}
		can.directory = dd || str.slice(0, i - 1);
		str = str.substr(si);
	}

	p = str.lastIndexOf("$");
	if (p >= 0) {
		can.extention = str.substr(p + 1);
		if (p > 0) can.name = str.slice(0, p);
	} else if (str !== "") can.name = str;

	return can;
}

export class X3path {
	constructor(_, superv, dir, nam, ext, app, vol, hst) {
		var p, fca;
		var result = "";

		_fromString(this, nam);

		if (this.directory === undefined && dir !== "") this.directory = dir;

		fca = this.directory && _patabs(this.directory) ? true : false;

		// host
		if (this.host === undefined) {
			p = app.lastIndexOf("@");
			if (p >= 0) {
				this.host = app.slice(0, p);
				app = app.substr(p + 1);
			} else if (hst !== "") this.host = hst;
		}

		// volume
		if (this.volume === undefined && !fca) {
			p = app.lastIndexOf("%");
			if (p >= 0) {
				this.volume = app.slice(0, p);
				app = app.substr(p + 1);
			} else if (vol !== "") this.volume = vol;
		}

		// application
		if (this.application === undefined && !fca) this.application = app;

		// extention
		if (this.extention === undefined && ext !== "") this.extention = ext;

		// find host of  a known appication
		// ....

		// find the right application path
		//could we accept still accept this
		// I don't think so, it used sript and file

		if (this.application === "") this.application = superv.folderName;
		// we simply get the current application

		// rebuild this string
		if (this.host) result += hst + "@";
		if (this.application) result += this.application + ".";
		if (this.directory) result += this.directory + "/";
		if (this.name) result += this.name;
		if (this.extention) result += "$" + this.extention;

		this.string = result;

		this.volumes = this.getFolderVolumes(superv);
	}

	toString(_) {
		var vol, pat;

		if (this.volume) {
			for (var i = 0; i < this.volumes.length; i++) {
				if (this.volume === this.volumes[i].name) {
					vol = this.volumes[i].path;
					break;
				}
			}
			if (!vol) return "";
		}

		if (this.directory && _patabs(this.directory)) {
			pat = "";
		} else if (!this.application || this.application === "" || this.application === "!") {
			pat = vol ? vol.path : _defaultDir; // should nt exist
		} else {
				if (!vol) pat = this.getApplicationVolumes(_, this.application);
				else pat = vol;
				if (!pat) pat = _defaultDir;
				pat += _dirsep + this.application;
			}

		if (this.directory) pat += pat === "" ? this.directory.replace(/\//g, _dirsep) : _dirsep + this.directory.replace(/\//g, _dirsep);
		if (this.name) pat += _dirsep + this.name;
		if (this.extention) pat += "." + this.extention;

		return pat;
	}

	toCanString() {
		return this.string;
	}

	getFolderVolumes(superv) {
		const dir = config.sandbox.directories;
		const vol = dir.reduce((vol, obj) => {
			if (obj.volume) {
				var path = obj.path.replace(/\{(\w+)\}/, function (str, p1, offset, s) {
					return superv[p1];
				});
				vol.push({
					name: obj.volume,
					path: path
				});
			}
			return vol;
		}, []);

		return vol;
	}

	getApplicationVolumes(_, app) {
		for (var i = 0; i < this.volumes.length; i++) {
			try {
				fs.stat(this.volumes[i].path + _dirsep + app, _);
				return this.volumes[i].path;
			} catch (e) {
				if (e.code !== 'ENOENT') return this.volumes[i].path;
			}
		}
		return undefined;
	}
};

;

/*
exports.filpath = filpath ;
exports.buildPath = buildPath ;
*/

/*
var res = _fromString("machine@SUPERV.TRT/filname$adx");
var res = _fromString("machine@SUPERV.TRT/SUB/filname$adx");
var res = _fromString("machine@SUPERV.TRT/SUB/filname");
var res = _fromString("machine@SUPERV.filname");
var res = _fromString("machine@SUPERV.filname$adx");
var res = _fromString("machine@/home/adonix/toto$adx");
var res = _fromString("machine@/adonix/toto$adx");
var res = _fromString("machine@toto$adx");
var res = _fromString("@SUPERV.TRT/adonix$adx");
var res = _fromString("SUPERV.TRT/adonix$adx");
var res = _fromString("c:/");
var res = _fromString("c:\\");
var res = _fromString("/");
var res = _fromString("@/");
var res = _fromString("@c:");
var res = _fromString("@c:/");
var res = _fromString("@c:\\");
var res = _fromString("SUPERV.TRT/TRALALA/adonix$");
var res = _fromString("/machin/chose/adonix$adx");
var res = _fromString("C:\\taratata\\adonix$adx");

var can;
can = filpath(_, "", "", "", "", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "TRT", "fic", "src", "X3", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "TRT", "", "", "X3", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "TRT", "", "", "X3", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "", "X3.adxora", "", "", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "", "X3.TRT/adxora", "", "", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "", "X3.TRT/adxora", "json", "", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "", "X3.TRT/adxora", "json", "SUPERV", "", "");
console.log(can);
console.log(buildPath(_, can));
can = filpath(_, "", "X3.TRT/adxora", "json", "", "", "taratata");
console.log(can);
console.log(buildPath(_, can));
*/