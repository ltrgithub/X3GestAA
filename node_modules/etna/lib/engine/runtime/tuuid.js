"use strict";
var X3Error = require('./errors').X3Error;
var util = require('./util');
var uuid = require('syracuse-core').uuid;
var helpers = require('syracuse-core').helpers;
var Blbfile = require('./tblbfile').Blbfile;

var _uuidRE0 = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;
var _uuidRE1 = /^[0-9a-fA-F]{32}$/;

function _toHex(b) {
	b = b & 0xff;
	return b < 16 ? "0" + b.toString(16) : b.toString(16);
}

function _fromHex(str, i) {
	var code = str.charCodeAt(i);
	return code < 0x3A ? code - 0x30 : code < 0x47 ? code + 10 - 0x41 : code + 10 - 0x61;
}

function _toBytes(str) {

	if (!str && (str.length !== 36 && str.length !== 32)) throw new X3Error(151, str);
	if (!_uuidRE0.test(str) && !_uuidRE1.test(str)) throw new X3Error(151, str);

	str = str.replace(/-/g, '');
	var bytes = new Buffer(16);
	for (var i = 0; i < 16; i++) {
		var j = i;
		var b = (_fromHex(str, 2 * j) << 4) + _fromHex(str, 2 * j + 1);
		bytes[i] = (b >= 128 ? b - 256 : b);
	}
	return bytes;
}

function make() {
	var r = new Buffer(16);
	for (var i = 0; i < r.length; i++) {
		r[i] = 0;
	}
	return r;
}

Buffer.prototype.x3Minus = function() {
	throw util.badOperand(this);
};

Buffer.prototype.x3ToInteger = function() {
	throw util.badOperand(this);
};

Buffer.prototype.x3ToString = function() {
	var s = '';
	for (var i = 0; i < this.length; i++) {
		if (i == 4 || i == 6 || i == 8 || i == 10) s += '-';
		var j = i;
		var b = this[j];
		s += _toHex(b);
	}
	return s;
};

Buffer.prototype.x3ToSqlString = function() {
	var s = "";
	for (var i = 0; i < this.length; i++) {
		var b = this[i];
		s += _toHex(b);
	}
	return s;
};

Buffer.prototype.x3ToDouble = function() {
	throw util.badOperand(this);
};

Buffer.prototype.x3ToBCD = function() {
	throw util.badOperand(this);
};

Buffer.prototype.x3ToDate = function() {
	throw util.badOperand(this);
};

Buffer.prototype.x3ToDatetime = function() {
	throw util.badOperand(this);
};

Buffer.prototype.x3ToUuid = function() {
	return this;
};

Buffer.prototype.x3Serialize = function() {
	return this;
};

Buffer.prototype.x3IsNumeric = function() {
	return false;
};

Buffer.prototype.x3IsZero = function() {
	for (var i = 0; i < this.length; i++) {
		if (this[i]) return false;
	}
	return true;
};
Buffer.prototype.x3IsUndefined = Buffer.prototype.x3IsZero;


Buffer.prototype.x3Compare = function(b) {
	if (!util.x3IsUuid(b))
		throw util.badOperand(this);

	for (var i = 0; i < this.length; i++) {
		if (this[i] < b[i]) return -1;
		else if (this[i] > b[i]) return 1;
	}
	return 0;
};

Buffer.prototype.x3Add = function(b) {
	throw util.badOperand(b);
};

Buffer.prototype.x3Sub = function(b) {
	throw util.badOperand(b);
};

Buffer.prototype.x3Mul = function(b) {
	throw util.badOperand(b);
};

Buffer.prototype.x3Div = function(b) {
	throw util.badOperand(b);
};

Buffer.prototype.x3Mod = function(b) {
	throw util.badOperand(b);
};

Buffer.prototype.x3Pow = function(b) {
	throw util.badOperand(b);
};

Buffer.prototype.x3Xor = function(b) {
	throw util.badOperand(b);
};

Buffer.prototype.x3Abs = function() {
	throw util.badOperand(this);
};

Buffer.prototype.x3Truncate = function(v) {
	throw util.badOperand(v);
};

Buffer.prototype.x3ToSql = function(driver) {
	return driver.toSqlUuid(this);
};

Buffer.prototype.x3Clone = function() {
	var r = new Buffer(16);
	for (var i = 0; i < r.length; i++) {
		r[i] = this[i];
	}
	return r;
};

Buffer.prototype.x3Type = function() {
	return 525;
};


function generate() {
	var s = uuid.generate();
	return _toBytes(s);
}

function x3ToUuid(s) {
	return _toBytes(s);
}

exports.NULL = make();
exports.generate = generate;
exports.x3ToUuid = x3ToUuid;