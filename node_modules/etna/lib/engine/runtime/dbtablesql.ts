import { _ } from 'streamline-runtime';
import * as core from 'syracuse-core';
import { Driver, SqlColumnDesc, SqlColumnsDesc } from '../drivers/types';
import * as util from './util';
const tracer = core.getTracer("etna.engine");
import * as variables from './variables';
import { DBTableParent } from './dbtableparent';
import { DBCursor } from './dbcursor';
import { Supervisor } from '../../supervisor/supervisor'
import * as utilDriver from '../drivers/util';

export class DBTableSQL extends DBTableParent {
	query: string;
	constructor(driver: Driver, abbrev: string, superv: Supervisor, loc: number, qry: string) {
		super(driver, abbrev, superv, loc);
		this.query = qry;
	}
	init(_: _) {
		return this;
	}
	declVar(type: string, name: string) {
		this.values[name] = variables.types[type[1]].default;
		this.types[name] = type;
	}
	x3OpenFor(_: _,  fieldList: SqlColumnDesc[]) {
		/* query describe  */

		const desc = this.driver.describeQuery(_, this.query, this.superv.folderName);
		const descobj: SqlColumnsDesc = {};

		for (var i = 0; i < desc.length; i++) {
			descobj[desc[i].name] = {
				name: fieldList[i].name,
				typtyp: fieldList[i].typtyp
			};
		}
		const maptrim = utilDriver.mapFromSql(this.driver, this.abbrev, descobj);

		// execution ---------------------------------------
		const dbrd = {};
		const tables: { [name: string]: DBTableParent } = {};
		tables[this.abbrev] = this;

		const rdr = this.driver.reader(_, this.query, [], dbrd);
		return new DBCursor(rdr, tables, maptrim, [], null, 0, "for");
	}
	x3CloseFor() {}
}

;