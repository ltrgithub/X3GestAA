"use strict";

var util = require('util');
var Slot = require("etna/lib/supervisor/slot").Slot;


class SlotText extends Slot {
	constructor(parent, property) {
		super(parent, property);
	}


	_get(_, raw) {
		if (this.property && this.property.data && typeof this._value !== 'string') {
			// The texte is cached by the supervisor:
			this._value = this.$parent.supervisor.loadText(_, this._value || 0) || "";
		}
		return super._get(_,raw);
	}

	oldValue(_) {
		return (this._value !== undefined) ? this.$parent.supervisor.findText(_, this._value) : this.property.type.defaultValue;		
	}

	_set(_, value, raw) {
		if (value && typeof value === 'string') {
			// replace the string by a number
			if (value !== this._get(_, true)) {
				// new text
				value = this.$parent.supervisor.findText(_, value) || this.$parent.supervisor.findText(_, this._value);
			}
		}
		return super._set(_, value, raw);
	}

	/*
	_get cannot be used for database operations because it returns a string instread of an id
	for text
	*/
	_getSql(_) {
		// Insert a number instead of a string in the database !
		return  (typeof this._value === 'string') ? this.$parent.supervisor.findText(_, this._value) : this._value;
	}

	insertSlot(_) {
		if (typeof this._value === 'string') {
			this._value = this.$parent.supervisor.findText(_, this._value) || 0;
			//TODO this.$parent.supervisor.addText(_, this._value);
		}
	}
	updateSlot(_) { return this.insertSlot(_);}
	

}

exports.SlotText = SlotText;

exports.newSlotText = function(property) {
	return function(_, parent) {
		return new SlotText(parent, property);
	};
};
