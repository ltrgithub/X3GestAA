"use strict";

var glob = require('streamline/lib/globals');
var util = require('util');
var tdate = require('etna/lib/engine/runtime/tdate');
var tdatetime = require('etna/lib/engine/runtime/tdatetime');
var tuuid = require('etna/lib/engine/runtime/tuuid');
var SlotLob = require("etna/lib/supervisor/slotlob").SlotLob;
var tblbfile = require('etna/lib/engine/runtime/tblbfile');
var Blbfile = tblbfile.Blbfile;

var util = require('etna/lib/engine/runtime/util');

class SlotBlob extends SlotLob {
	constructor(parent, property) {
		super(parent, property);
	}

	_set(_, value, raw) {
		if (value !== undefined && typeof value === 'string') {
			//dbg:console.log(this.name+" =>Blbfile");
			value = tblbfile.fromBase64(value);
		}
		return super._set(_, value, raw);
	}

	_get(_,raw) {
		if(raw) return this._value;// For resource.toJson  
		
		if(!this._value) {
			var data = this.read(_);
			if(data !== undefined) this._value = new Blbfile(data);
		}
		return super._get(_,raw);
	}

	
	read(_) {
		if(this.property.type.readMedia) {
			return this._value = this.property.type.readMedia(_,this);
		}
		return undefined;//TODO
	}

	insertSlotExtended(_) {
		if(this.property.data.LOBTAB  !==  "ABLOB") return constants.CST_AOK;

		console.log("insertSlotExtended isBlbFile:",util.x3IsBlbfile(this._value));

		var actx = glob.context.x3session.actx;
		var keys = this.getKeys(_);
		var record = {
			CODBLB:keys.CODBLB,
			IDENT1:keys.IDENT1,
			IDENT2:keys.IDENT2,
			IDENT3:keys.IDENT3,
			NAMBLB:' ',
			TYPBLB:' ',
			CNTTYP:' ',
			CREUSR:actx.$USER(_),
			CREDAT:tdate.today(),
			UPDUSR:actx.$USER(_),
			CREDATTIM:tdatetime.now(),
			UPDDATTIM:tdatetime.now(),
			AUUID:tuuid.generate(),
			BLOB:this._value
		}		
		//dbg:console.log("insertLob name:"+slot.name+" keys:",keys);

		// Does the blob exist ?
		var param = this.$parent.supervisor.sqlDriver.param;
		var i = 0;
		var rs = this.$parent.supervisor.sqlReader(_, "select "+Object.keys(record).map((p) => {return p+'_0';}).join(',')+" From ABLOB Where " +
				Object.keys(record).slice(0,4).map( (p) => { return p+'_0='+param(i++);}).join(" and "),
				Object.keys(record).slice(0,4).map( (p) => { return record[p];		  })).toArray(_);

		if(!rs.length) {
			i = 0;
			var sql = "insert into ABLOB (" + Object.keys(record).map((p) => {return p+'_0';}).join(',') + ") values (" + Object.keys(record).map( (p) => {
				return param(i++);
			}).join(',') + ")";
			return this.$parent.supervisor.executeSql(_, sql, Object.keys(record).map( (p) => { return record[p];}) );
		}

		Object.keys(record).forEach((p) => {if(rs[0][p]) record[p] = rs[0][p];});
		record.BLOB = this._value;
		record.UPDUSR = actx.$USER(_);
		record.UPDDATTIM = tdatetime.now();

		// Update record with data stored in the database :
		i = 0;
		var values = Object.keys(record).slice(4).map( (p) => { return record[p];});
		values = values.concat(Object.keys(record).slice(0,4).map( (p) => { return record[p];}));

		var sql = "update ABLOB SET "+ Object.keys(record).slice(4).map((p) => p+'_0='+param(i++)).join(',') +" where " + 
					 Object.keys(record).slice(0,4).map((p) => p+'_0='+param(i++)).join(" and ");
		return this.$parent.supervisor.executeSql(_, sql, values);
	}

	updateSlotExtended(_) { 
		return this.insertSlotExtended(_);
	}

	deleteSlotExtended(_) { 
		var param = this.$parent.supervisor.sqlDriver.param;
		var keys = this.getKeys(_);
		//dbg:console.log("deleteLob name:"+slot.name+" keys:",keys);
		var params = [keys.CODBLB, keys.IDENT1, keys.IDENT2, keys.IDENT3];
		var i = 0;
		var sql = "delete From " + this.table + " Where" +
			" CODBLB_0=" + param(i++) + " and IDENT1_0=" + param(i++) + " and IDENT2_0=" + param(i++) + " and IDENT3_0=" + param(i++);
		return this.$parent.supervisor.executeSql(_, sql, params);
	}	
}

exports.SlotBlob = SlotBlob;

exports.newSlotBlob = function(property) {
	return function(_, parent) {
		return new SlotBlob(parent, property);
	};
};
