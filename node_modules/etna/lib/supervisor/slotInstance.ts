"use strict";

const util = require('util');
import { Slot } from '../supervisor/slot';
import * as mapping from '../supervisor/mapping';

export class SlotInstance extends Slot {
	constructor(parent, property) {
		super(parent, property);
		this.instance = null;
		this.prop = property;
	}

	initFromParent(_: _,  parent) {
		const property = this.prop;
		const instance = property.supervisor.new(_, 'Instance', property.collection.class, parent).afterCreate(_);

		instance.collection = property.collection;
		if (property.collection) instance.initMaps(_, property.collection, parent);
		instance.proName = property.name;
		instance.proJsName = property.jsName;
		this.instance = instance;
	}

	get(_: _,  raw) {
		const instance = this.instance;
		if (instance.$lazyLoading) {
			instance.class.loadInstances(_, instance.$parent, //
				mapping.getIndex(_, instance.supervisor, instance.class.data.dataChildren.ownMapping), instance.relKeys, 1, //
				(_, record) => {
				instance.record = record;
			}).toArray(_);
			instance.afterCreate(_, instance.record);
			instance.$lazyLoading = false;
		}
		return instance;
	}

	oldValue(_: _) {
		throw new Error("invalid oldValue call");
	}

	set(_: _,  value, raw) {
		throw new Error("invalid set call");
	}

	deleteDiagnoses(_: _) {
		this.instance.deleteDiagnoses(_);
	}

	getDiagnoses(_: _) {
		return this.instance.getDiagnoses(_);
	}

	addDiagnose(_: _,  severity, message, category) {
		return this.instance.addDiagnose(_, severity, message, category);
	}

	onMapChange(_: _,  property, value) {
		return this.instance.onMapChange(_, property, value);
	}

	controlFormat(_: _) {}

	fromRecord(_: _,  record, colnIndex) {
		return this.instance.fromRecord(_, record, colnIndex);
	}
}