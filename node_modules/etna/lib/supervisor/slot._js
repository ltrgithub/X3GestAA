"use strict";
var glob = require('streamline/lib/globals');

var X3Error = require("etna/lib/engine/runtime/errors").X3Error;
var format = require('etna/lib/engine/runtime/format');
var util = require('etna/lib/engine/runtime/util');

var constants = require("etna/lib/supervisor/constants");
var attributes = require("etna/lib/supervisor/attributes");
var Diagnosis = require("etna/lib/supervisor/meta/diagnosis");

var tracerSup = require('syracuse-core').getTracer("etna.supervisor");

class Slot {
	constructor(parent, property) {
		// care of the name if and only if the property belongs to 
		// an instance which which belongs to a collection : 
		if (property && property.type) {
			this.property = property;
			this._value = this.property.type.defaultValue;
		} else {
			this.property = {
				name: ""
			};
			this._value = property;
		}
		this.bindAttributes(parent);
	}
	get name() {
		return this.property.name;
	}

	get jsName(){
		return this.property.jsName;
	}

	get column(){
		return (this.property.column) ? this.property.column.name : undefined;
	}

	set value(value){
		if (!this.getAttribute("$isReadOnly")) this._value = value;
		else throw new X3Error(147, (this.name ? this.name : '') + "is readonly");
	}
	get value() {
		return this._value;
	}

	get isUndefined(){
		return this._value === undefined || (this._value.x3IsUndefined && this._value.x3IsUndefined());
	}

	get type(){
		return this.property.type;
	}
	

	get isClob(){
		return this.property.type.isClob;
	}

	get isBlob() {
		return this.property.type.isBlob;
	}

	get isLob() {
		return this.property.type.isLob;
	}

	deleteDiagnoses(_) {
		this.diagnoses = undefined;
	}

	getDiagnoses(_) {
		if (this.diagnoses) {
			var self = this;
			return this.diagnoses.map_(_, function(_, d) {
				d.set(_, "PRO", self.name);
				d.set(_, "LAB", self.getLabel(_));
				return d;
			});
		} else return [];
	}

	addDiagnose(_, severity, message, category) {
		Diagnosis.trace(severity, this.name + " :'" + message + "'");
		this.diagnoses = this.diagnoses || [];
		this.diagnoses.push(this.$parent.supervisor.new(_, 'Diagnosis', severity, message, "", category));
		return severity;
	}

	getLabel(_) {
		return (this.property.data.INTFLD) ? this.property.supervisor.loadText(_, this.property.data.INTFLD) : "";
	}

	controlFormat(_) {
		var isFormatInvalid = false;

		if (this.property.regex) {
			isFormatInvalid = !this.property.regex.test(this._value);
			//dbg:console.log("'"+this._value+"' format:"+this.$x3Format+ " isFormatInvalid:"+isFormatInvalid);
		} else if (this.property.type.data.TYPTYP === 1 && this.property.data.NOLIB) {
			// local menu
			var menu = this.$parent.supervisor.loadEnum(_, this.property.data.NOLIB);
			//isFormatInvalid = menu && menu.length && (this._value < menu[0].$value || this._value > menu[menu.length - 1].$value);
			isFormatInvalid = menu && menu.length && (this._value < 0 || this._value > menu[menu.length - 1].$value);
		}
		if (isFormatInvalid)
			return this.addDiagnose(_, constants.CST_AERROR, this.$parent.supervisor.loadMess(_, 100, 149));

		return constants.CST_AOK;
	}

	controlOthers(_) {
		return constants.CST_AOK;
	}

	get(_, raw) {
		// Call the GET accessor if and only if is set in the dictionary
		if (!raw && this.property.data && this.property.data.FLGACCGET === 2) {
			//  Add a _getCalls member if and only if the GET event has to be supported
			this._getCalls = (this._getCalls || 0) + 1;
			//dbg:console.error("DBG property " + this.name + " GET -> this._getCalls:" + this._getCalls);
			if (this._getCalls === 1) this.$parent.propertyGetValue(_, this);
			this._getCalls -= 1;
		}
		//dbg:console.error("DBG property " + this.name + " GET = " + this._value + " (" + typeof this._value + "):"+this._value);
		return this._value;
	}

	getSql(_) {
		//dbg:console.log("getSql:"+this.property.name);
		return this.get(_, true);
	}

	oldValue(_) {
		return (this._value !== undefined) ? this._value : this.property.type.defaultValue;		
	}

	set(_, value, raw) {
		//dbg:console.error("property " + this.name + " SET -> (type: " + this.property.type.etnaType+ "):"+value);
		if (this.getAttribute("$isReadOnly")) {
			throw new X3Error(147, (this.name ? this.name : '') + " is readonly");
		}
		// get the current value
		if (!raw) var oldValue = {
			type: "L" + this.property.type.etnaType,
			value: this.oldValue(_)
		};

		if (value === undefined || value === null) {
			// undefined = RAZ of the property !
			// null = value set by the delta:
			raw = true;
			value = this.property.type.defaultValue;
		}

		this._value = this.property.set(value);

		if (!raw) {
			// Protect the set from infinite loops:  
			this._setCalls = (this._setCalls || 0) + 1;
			//dbg:console.error(this._setCalls+".property " + this.name + ":"+this._value);
			if (this._setCalls === 1) {
				// Control the new value:
				this.deleteDiagnoses(_);
				var status = this.controlFormat(_);
				//dbg:console.error(this._setCalls+".property controlFormat:" + status);
				if (status !== constants.CST_AERROR) {
					status = this.controlOthers(_);
					//dbg:console.error(this._setCalls+".property controlOthers:" + status);
					if (status !== constants.CST_AERROR) {
						status = this.$parent.propertyControlValue(_, this, oldValue, this._value);
						if (status !== constants.CST_AERROR) {
							// Propagate the value : 
							this.propagateValue(_, oldValue);
						}
					}
				}
			}
			//dbg:console.error(this._setCalls+".property " + this.name + "<");
			this._setCalls -= 1;
		}
	}

	fromRecord(_, record, colnIndex) {
		//dbg:console.error(this.$parent.meta.name+"."+this.name+".fromRecord:",record);
		if (this.column) {
			if (record[this.column] !== undefined) {
				if (colnIndex !== undefined) this._value = record[this.column][colnIndex];
				else this._value = record[this.column];

				if(this.property.type.readMedia) {
					this._value = this.property.type.readMedia(_, this);
				} else {
					this._value = this._value ? this.property.type.fromSql(_, this._value) : this.property.type.defaultValue;
				}
			} else {
				this._value = this.property.type.defaultValue;
			}
		} else {
			// interfaces :
			if (record[this.name]) this._value = record[this.name];
		}
	}
	clone(parent) {
		var from = this;
		var to = new Slot(parent, this.property);
		to._value = from._value;
		to.$parent = from.$parent;
		attributes.clone(from, to);
		to.snapshotof = from;

		// Clone the diagnoses :
		if (this.diagnoses) to.diagnoses = this.diagnoses.slice();
		return to;
	}
	
	revertTo() {
		if (!this.snapshotof) return;
		this.snapshotof._value = this._value;
		attributes.revertTo(this, this.snapshotof);
	}

	propagateValue(_, oldValue) {
		//dbg:console.error(this.name + " propagate old:'"+oldValue.value+"' new:'"+this._value+"'");
		// 1. bonds ?
		if (this.property.proMaps) {
			var self = this;
			this.property.proMaps.forEach_(_, function(_, map) {
				var slot = self.$parent.slot(_, map.REFLNK);
				slot && slot.onMapChange(_, map.KEYMAP, self._value);
			});
		}
		// 2. Call scripts :
		//if(this.$parent.propertyPropagateValue && (oldValue.value === undefined || oldValue.value.x3Compare(this._value) !== 0)){
		if (this.$parent.propertyPropagateValue && oldValue.value.x3Compare(this._value) !== 0) {
			this.$parent.propertyPropagateValue(_, this, oldValue, this._value);
		}

	}
	setAsMandatory(_) {
		this.$isMandatory = true;
		if (this.property.type && this.property.type.data.TYPTYP === 1 && this.property.data.NOLIB) {
			// local menu => set a default value
			var menu = this.$parent.supervisor.loadEnum(_, this.property.data.NOLIB);
			if (menu && menu.length && (this._value < menu[0].$value || this._value > menu[menu.length - 1].$value)) {
				this._value = menu[0].$value;
			}
		}
	}

	toJson(_,value) {
		return this.property.type.toJson(_,this , value);
	}
};

attributes.addAttributes(Slot.prototype);
exports.Slot = Slot;
exports.newSlot = function(property) {
	return function(parent) {
		return new Slot(parent, property);
	};
};