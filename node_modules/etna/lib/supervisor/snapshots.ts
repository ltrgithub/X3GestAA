"use strict";

import { X3Error } from '../engine/runtime/errors';
import * as attributes from '../supervisor/attributes';
//import { BaseInstance } from './meta/baseInstance';
const snapshots = ["Snapshot", "Syssnapshot"];

type BaseInstance = any;
type Prototype = any;

export function addSnapshots(_prototype: Prototype) {

	snapshots.forEach(snapshot => {
		const lsnapshot = snapshot.toLowerCase();
		const property = "$" + lsnapshot;
		const attEnable = "$is" + snapshot + "Enabled";

		_prototype["enable" + snapshot] = function () {
			this.setIntAttribute(attEnable, true);
			//dbg:console.error("dbg enable "+snapshot+" on "+this.$$type +" "+attEnable+"="+ this.getIntAttribute(attEnable));
		};

		_prototype["revertTo" + snapshot] = function () {
			this.setIntAttribute(attEnable, false);
			const from = this[property];
			const to = from.revertTo();
			// release the snapshot :
			to[property] = undefined;
		};

		_prototype["disable" + snapshot] = function () {
			this.setIntAttribute(attEnable, false);
			//dbg:console.error("dbg snapshot "+  attEnable + ":"+ this.getIntAttribute(attEnable));

			// Release the "$snapshot" property
			this[property] = undefined;

			// propagate disable to children :
			const _this = this;
			const children = _this.getChildren();

			Object.keys(children).forEach(child => {
				if (children[child]["disable" + snapshot]) children[child]["disable" + snapshot]();
			});
		};

		_prototype[lsnapshot] = function () {
			// var e = new Error("dummy");
			// //dbg:console.error("dbg called from "+ e.stack);//.split("\\n")[2]);

			// ! attEnable is a inherited attribute : getIntAttribute should walk through parents to the top
			const enabled = this.getIntAttribute(attEnable);
			//dbg:console.error("dbg "+lsnapshot+" on "+this.$$type +" " +attEnable+"="+enabled);

			if (!enabled) return null;

			if (this.snapshotof) {
				// Cannot create a snapshot of a snapshot :
				throw new X3Error(155, "");
			}

			if (this.getIntAttribute(attEnable)) {
				//dbg:console.error("dbg "+lsnapshot+" property:"+property+"="+!!this[property]);

				if (!this[property]) {
					// Let's create the snapshot by cloning 'this'
					//dbg:console.error("snapshot "+lsnapshot+" create");
					var clone = this.clone();
					clone.snapshotof = this;

					//dbg:console.error("snapshot set "+property+ " with clone");
					this[property] = clone;
					if (this.$parent) {
						//dbg:console.error("snapshot "+lsnapshot+" create->parent");

						// Set the parent of the snapshot :
						// this.parent[snapshot]() create the parent's snapshot if necessary !
						var parent = this.$parent[lsnapshot]();
						clone.$parent = parent;
						// update parent with the newly created snapshot :
						parent && parent.updateProperty(this, clone);
					}
					clone.$_isReadOnly = true;
				} else {
					//dbg:console.error("dbg "+lsnapshot+" property:"+property+" undefined");
				}
			}
			// Return the snapshot :
			//dbg:console.error("snapshot  < snapshot")
			return this[property];
		};
	});

	// Add a function 'snapshots' to the prototype :
	_prototype.snapshots = function () {
		const _this = this;
		//dbg:console.error("snapshot  snapshot.snapshots");

		snapshots.forEach(snapshot => {
			_this[snapshot.toLowerCase()]();
		});
	};

	// Add a function 'releaseSnapshot' to the prototype :
	_prototype.releaseSnapshot = function (instance: BaseInstance) {
		const _this = this;
		//dbg:console.error("snapshot  snapshot.snapshots");

		snapshots.some(snapshot => {
			const property = "$" + snapshot.toLowerCase();

			if (_this[property] == instance) {
				_this[property] = undefined;
				return true;
			}
			return false;
		});
	};
}

export const getIntAttributes = addSnapshots;