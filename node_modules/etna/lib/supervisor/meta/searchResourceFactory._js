"use strict";

const util = require("etna/lib/supervisor/util");
const Helper = util.Helper;
const glob = require('streamline/lib/globals');

class SearchResourceFactory extends Helper {
	constructor(superv, clas) {
		super();
		this.supervisor = superv;
		this.class = clas;
		this.properties = {}; // exposed properties only
	}

	init(_) {
		const self = this;

		if (this.class.data.ACCSTR) {
			this.$access = function (property) {
				return function (_, instance) {
					return instance.get(_, property);
				};
			}(this.class.data.ACCSTR);
		}

		this.properties = Object.keys(this.class.properties).filter(function (property) {
			return self.class.properties[property].isSearchable && !/.*_REF$/.test(property) || self.class.properties[property].collection;
		}).reduce_(_, function (_, r, property) {
			const prop = self.class.properties[property];
			const rProp = r[property] = prop.clone();

			rProp.resourceFactory = self;
			rProp.tag = property;

			if (prop.collection) {
				var targetResourceFactory = prop.collection.class.searchResourceFactory(_);
				if (targetResourceFactory) {
					rProp.collection = prop.collection;
					rProp.targetResourceFactory = targetResourceFactory;
				}
			}
			return r;
		}, {});
		return this;
	}

	fillTypeNode(_, node) {
		node.$type = "application/x-array"; //this.collection.data.MAXCOL > 1 ? "application/x-array" : "application/x-object";
		node.$item = this.searchItemProto(_);
	}

	searchItemProto(_, facet) {
		const proto = {
			$title: this.supervisor.loadText(_, this.class.data.INTCLA) + " {$key}"
		};

		if (facet) {
			proto.$key = this.class.keyExpression();
			proto.$url = "{$baseUrl}/" + this.class.name + "('{$key}')?representation=" + this.class.name + ".searchItem";
		}
		proto.$properties = {};

		const self = this;

		Object.keys(self.properties).forEach_(_, function (_, name) {
			proto.$properties[name] = self.properties[name].prototypeNode(_);
		});
		return proto;
	}

	searchProto(_) {
		const actx = glob.context.x3session.actx;


		return {
			$baseUrl: "{$baseUrl}",
			$baseType: "application/json;vnd.sage=syracuse;vnd.sage.syracuse.representation=x3.erp." + actx.$AFOLDER(_),
			$classTitle: this.supervisor.loadText(_, this.class.data.INTCLA),
			$url: "{$baseUrl}/" + this.class.name + "?representation=" + this.class.name + ".$search",
			$prototype: "{$baseUrl}/$prototypes('{$representation}.$thumb')",
			$type: "{$baseType}." + this.class.name + ".$search",
			$properties: {
				$resources: {
					$type: "application/x-array",
					$item: this.searchItemProto(_, "$searchItem")
				}
			},
			$links: {
				$search$details: {
					$title: "Detail",
					$default: true,
					$url: "{$baseUrl}/" + this.class.name + "('{$key}')?representation=" + this.class.name + ".$details",
					$devices: "desktop"
				}
			}
		};
	}
};

exports.constructor = SearchResourceFactory;