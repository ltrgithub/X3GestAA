"use strict";

const util = require("etna/lib/supervisor/util");
const Helper = util.Helper;
const constants = require("etna/lib/supervisor/constants");
const btime = require('syracuse-core').types.datetime;
const traceSup = require('syracuse-core').getTracer("etna.supervisor");

var errorcounter = 0;

const enumSeverity = {
	0: "success",
	1: "success",
	2: "info",
	3: "warning",
	4: "error"
};


exports.severity = function (code) {
	const e = new Error("debug");

	return enumSeverity[code] || code;
};

exports.trace = function (code, message) {
	const severity = exports.severity(code);
	const toLog = function (severity, message) {
		return severity + ": " + message;
	};
	//dbg:console.log("+ "+toLog(severity, message));

	switch (severity) {
		case "error":
			traceSup.error && traceSup.error(toLog(severity, message));
			break;
		case "info":
		case "warning":
			traceSup.info && traceSup.info(toLog(severity, message));
			break;
		case "success":
			traceSup.debug && traceSup.debug(toLog(severity, message));
			break;
		default:
			break;
	}
};

class Diagnosis extends Helper {
	constructor(superv, severity, message, stackTrace, category) {
		super();

		// basic property
		this.$exported = true;
		this.supervisor = superv;
		this.severity = severity;
		this.message = message;
		this.stackTrace = stackTrace;
		this.category = category || 0;
		this.counter = errorcounter++;
		// assign in cloning
		this.environment = "";
		this.copy = 0;

		// asssign in getDiagnoses
		this.label = "";
		this.PRO = "";
	}
	init(_) {
		return this;
	}
	dataNode() {
		return {
			$severity: exports.severity(this.severity),
			$message: this.message,
			$stackTrace: this.stackTrace
		};
	}
	get(_, name) {
		switch (name) {
			case 'DEL':
				return 1; // 1 stands for CST_ANO
			case 'MES':
				return this.message;
			case 'PRO':
				return this.PRO;
			case 'STA':
				return this.severity;
			case 'LAB':
				return this.label;
			case 'CAT':
				return this.category;
			case 'CPY':
				return this.copy;
			case 'ENV':
				return this.environment;
		}
	}

	set(_, name, value) {
		switch (name) {
			case 'DEL':
				return 1; // 1 stands for CST_ANO
			case 'MES':
				return this.message = value;
			case 'PRO':
				return this.PRO = value;
			case 'STA':
				return this.severity = value;
			case 'LAB':
				return this.label = value;
			case 'CAT':
				return this.category = value;
			case 'CPY':
				return this.copy = value;
			case 'ENV':
				return this.environment = value;
		}
	}
	x3Compare(b) {
		return this === b;
	}
	sortOnTime(d) {
		return this.counter - d.counter;
	}
	sortOnSeverity(d) {
		return d.severity - this.severity;
	}
	clone(_, env) {
		const cpy = this.supervisor.new(_, 'Diagnosis', this.severity, this.message, this.stackTrace, this.category);

		cpy.label = this.label;
		cpy.counter = this.counter;
		cpy.PRO = this.PRO;
		if (env !== undefined) {
			cpy.copy = 1;
			cpy.environment = env;
		} else {
			cpy.copy = this.copy;
			cpy.environment = this.environment;
		}
		return cpy;
	}

};
exports.constructor = Diagnosis;