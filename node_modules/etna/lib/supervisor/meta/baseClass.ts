import { _ } from 'streamline-runtime';
const glob = require('streamline/lib/globals');
import * as util from '../util';
const Helper = util.Helper;
import * as activ from '../meta/activ';
import { Diagnosis } from '../dyn/types';
import { Index, Property, Table } from './types';
import { Supervisor } from '../supervisor';
import { BaseClassMeta } from '../metadata/class';

export abstract class BaseClass extends Helper {
	name: string;
	supervisor: Supervisor;
	data: BaseClassMeta;
	diagnoses: Diagnosis[];
	_scripts: any[];
	_$index: { name: string }[];
	tableIndex: Index;
	table: Table;
	properties: { [name: string]: Property };
	jsModules: string[];
	relations: any;
	cache: any;
	parent: any;
	keyItems: any[];
	membersByJsName: { [name: string]: any };
	x3jsHandler: any;

	constructor(superv: Supervisor, data: BaseClassMeta) {
		super();
		this.supervisor = superv;
		this.data = data;
		this.diagnoses = [];
		// Call derived constructor :
	}

	property(name: string) {
		const prop = this.properties[name];

		if (!prop) throw new Error("prop not found: " + this.name + "." + name);
		return prop;
	}

	scripts(_: _) {
		if (this._scripts === undefined) {
			this._scripts = this.supervisor.loadScripts(_, this) || null;
		}
		return this._scripts;
	}

	isActivated(_: _) {
		return activ.getActiv(_, this.supervisor, this.data.CODACT) > 0;
	}

	ASETERROR(_: _, path: string, msg: string, severity: number) {
		this.diagnoses.push(this.supervisor.new<Diagnosis>(_, 'Diagnosis', severity, path, msg));
		return severity;
	}

	get ACTX() {
		return glob.context.x3session.actx;
	}

	get _index() {
		if (this._$index === undefined) {
			var index = this.tableIndex;

			if (index) {
				this._$index = [];
				index.columns.forEach(col => {
					this._index.push(this.properties[col.name]);
				});
			} else {
				var descript = this.data.DESCRIPT || this.data.KEYINT;

				if (descript && descript.length) {
					this._$index = [];
					var match = descript.match(/[-+]?\w+/g);
					if (match) {
						for (var i = 0; i < match.length; i++) {
							var name = match[i];
							var column = name;
							switch (name.charAt(0)) {
								case '+':
									column = name.substring(1);
									name = column + " asc";
									break;
								case '-':
									column = name.substring(1);
									name = column + " desc";
									break;
							}
							this._$index[i] = {
								name: name
							};
						}
					}
				}
			}
		}
		return this._$index;
	}
}