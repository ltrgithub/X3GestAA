"use strict";

var util = require("etna/lib/supervisor/util");

exports.constructor = util.defineClass(function(superv, table, data) {
	this.supervisor = superv;
	this.table = table;
	this.data = data;
}, null, {
	init: function(_) {
		this.direction = [];
		this.columns = [];

		var match = this.data.DESCRIPT.match(/[-+]?\w+/g);
		if (match) {
			for (var i = 0; i < match.length; i++) {
				var name = match[i];
				switch (name.charAt(0)) {
					case '+':
						this.direction.push(1);		
						this.columns.push(this.table.column(name.substring(1)));				
						break;
					case '-':
						this.direction.push(-1);		
						this.columns.push(this.table.column(name.substring(1)));				
						break;
					default:
						this.direction.push(1);		
						this.columns.push(this.table.column(name));				
						break;
				}
			}
		}
		return this;
	},
	name: {
		get: function() {
			return this.data.CODIND;
		}
	},
	unique: {
		get: function() {
			return (this.data.HOMONYM === 1) ? true : false;
		}
	},
	hasColumn: function(name) {
		return this.columns.some(function(elt) {
			return elt.name === name;
		});
	},
	sqlNames: function() {
		return this.columns.map(function(elt) {
			return elt.name + '_0';
		});
	},
	keyExpression: function(_) {
		return this.columns.map(function(elt) {
			return '{' + elt.name + '}';
		}).join('~');
	},
});