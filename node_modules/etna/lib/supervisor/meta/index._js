"use strict";

const util = require("etna/lib/supervisor/util");

class Index {
	constructor(superv, table, data) {
		this.supervisor = superv;
		this.table = table;
		this.data = data;
	}
	init(_) {
		this.direction = [];
		this.columns = [];

		const addColumn = (name, direction) => {
			if (name) {
				var column = this.table.column(name);
				if (column) {
					this.direction.push(direction);
					this.columns.push(column);
				}
			}
		};

		const match = this.data.DESCRIPT.match(/[-+]?\w+/g);

		if (match) {
			for (var i = 0; i < match.length; i++) {
				var name = match[i];
				switch (name.charAt(0)) {
					case '+':
						addColumn(name.substring(1), 1);
						break;
					case '-':
						addColumn(name.substring(1), -1);
						break;
					default:
						addColumn(name, 1);
						break;
				}
			}
		}
		return this;
	}
	get name() {
		return this.data.CODIND;
	}
	get unique() {
		return this.data.HOMONYM === 1 ? true : false;
	}
	hasColumn(name) {
		return this.columns.some(elt => elt.name === name);
	}
	sqlNames() {
		return this.columns.map(elt => elt.name + '_0');
	}
	keyExpression() {
		return this.columns.map(elt => {
			return '{' + elt.name + '}';
		}).join('~');
	}
};
exports.constructor = Index;