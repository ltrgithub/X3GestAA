"use strict";

var util = require("etna/lib/supervisor/util");

class Index {
	constructor(superv, table, data) {
		this.supervisor = superv;
		this.table = table;
		this.data = data;
	}
	init(_) {
		this.direction = [];
		this.columns = [];

		var addColumn = function(self, name,direction) {
			if(name) {
				var column = self.table.column(name);
				if(column) {
					self.direction.push(direction);		
					self.columns.push(column);				
				}
			}
		}

		var match = this.data.DESCRIPT.match(/[-+]?\w+/g);
		if (match) {
			for (var i = 0; i < match.length; i++) {
				var name = match[i];
				switch (name.charAt(0)) {
					case '+': addColumn(this,name.substring(1), 1); break;
					case '-': addColumn(this,name.substring(1),-1); break;
					default:  addColumn(this,name             , 1); break;
				}
			}
		}
		return this;
	}
	get name() {
		return this.data.CODIND;
	}
	get unique() {
		return (this.data.HOMONYM === 1) ? true : false;
	}
	hasColumn(name) {
		return this.columns.some(function(elt) {
			return elt.name === name;
		});
	}
	sqlNames() {
		return this.columns.map(function(elt) {
			return elt.name + '_0';
		});
	}
	keyExpression(_) {
		return this.columns.map(function(elt) {
			return '{' + elt.name + '}';
		}).join('~');
	}
};
exports.constructor = Index;
