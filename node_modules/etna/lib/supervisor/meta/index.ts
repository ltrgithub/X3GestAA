import { _ } from 'streamline-runtime';
import * as util from '../util';
import { IndexMeta } from '../metadata/table';
import { Column, Table } from './types';
import { Supervisor } from '../supervisor';

export class Index {
	supervisor: Supervisor;
	table: Table;
	data: IndexMeta;
	direction: number[];
	columns: Column[];
	constructor(superv: Supervisor, table: Table, data: IndexMeta) {
		this.supervisor = superv;
		this.table = table;
		this.data = data;
	}
	init(_: _) {
		this.direction = [];
		this.columns = [];

		const addColumn = (name: string, direction: number) => {
			if (name) {
				var column = this.table.column(name);
				if (column) {
					this.direction.push(direction);
					this.columns.push(column);
				}
			}
		};

		const match = this.data.DESCRIPT.match(/[-+]?\w+/g);

		if (match) {
			for (var i = 0; i < match.length; i++) {
				var name = match[i];
				switch (name.charAt(0)) {
					case '+':
						addColumn(name.substring(1), 1);
						break;
					case '-':
						addColumn(name.substring(1), -1);
						break;
					default:
						addColumn(name, 1);
						break;
				}
			}
		}
		return this;
	}
	get name() {
		return this.data.CODIND;
	}
	get unique() {
		return this.data.HOMONYM === 1 ? true : false;
	}
	hasColumn(name: string) {
		return this.columns.some(elt => elt.name === name);
	}
	sqlNames() {
		return this.columns.map(elt => elt.name + '_0');
	}
	keyExpression() {
		return this.columns.map(elt => {
			return '{' + elt.name + '}';
		}).join('~');
	}
};
export const Constructor = Index;