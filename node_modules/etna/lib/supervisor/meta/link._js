"use strict";

var util = require("etna/lib/supervisor/util");
var activ = require("etna/lib/supervisor/meta/activ");

var tabValActx = {
	"ACTX.USER": "$actxUser",
	"GACTX.USER": "$actxUser",
	"ACTX.LOGIN": "$actxLogin",
	"GACTX.LOGIN": "$actxLogin",
	"ACTX.FOLDER": "$actxFolder",
	"GACTX.FOLDER": "$actxFolder",
	"ACTX.SOLUTION": "$actxSolution",
	"GACTX.SOLUTION": "$actxSolution",
	"ACTX.LAN": "$actxLan",
	"GACTX.LAN": "$actxLan",
	"ACTX.LANISO": "$actxLanIso",
	"GACTX.LANISO": "$actxLanIso",
	"ACTX.AFOLD.ANBLEG": "$actxNbLeg",
	"GACTX.AFOLD.ANBLEG": "$actxNbLeg",
	"ACTX.AFOLD.ALEGCUR": "$actxLegCur",
	"GACTX.AFOLD.ALEGCUR": "$actxLegCur"
};

var enumStdLinks = {
	1: { // Link to create a record
		name: "$create",
		toFacet: "$edit",
		requiredBehaviors: [1]
	},
	2: { // Link to display a record
		name: "$details",
		toFacet: "$details",
	},
	3: { // Link to modify a record
		name: "$edit",
		toFacet: "$edit",
		requiredBehaviors: [1, 2]
	},
	4: { // link to delete a record
		name: "$delete",
		requiredBehaviors: [3]
	},
	5: { // link to list records
		name: "$query",
		toFacet: "$query",
	},
	6: { // link to duplicate a record
		name: "$duplicate",
		toFacet: "$edit",
		requiredBehaviors: [1]
	},
	7: { // link to export a record in excel
		name: "$excel",
		requiredBehaviors: [5]
	},
	8: { // link to export a list of records in excel
		name: "$excel",
		requiredBehaviors: [5]
	},
	9: { // Selection
		name: "$lookup",
		toFacet: "$lookup"
	},
	10: { // Summary
		name: "$summary",
		toFacet: "$summary"
	},
	11: { // Link to print a record in PDF
		name: "$print",
		requiredBehaviors: [4]
	},
	12: { // Link to print a list of records in PDF
		name: "$print",
		requiredBehaviors: [4]
	},
	13: { // Link to export a record in Word
		name: "$wordreport",
		requiredBehaviors: [6]
	},
	14: { // Link to export a list of records in Word
		name: "$wordreport",
		requiredBehaviors: [6]
	},
	15: { // Link to mailmerge a record
		name: "$wordmailmerge",
		requiredBehaviors: [7]
	},
	16: { // Link to mailmerge a list of records
		name: "$wordmailmerge",
		requiredBehaviors: [7]
	},
	17: {
		name: "$save"
	},
	18: {
		name: "$abort"
	}
};
exports.enumStdLinks = enumStdLinks;


class Link {
	constructor(superv, anchor, data) {
		this.supervisor = superv;
		this.anchor = anchor;
		this.data = data;
	}

	init(_) {
		return this;
	}
	get name() {
		return (this.data.FLGSTDLNK === 2 && enumStdLinks[this.data.CMPLNK]) ? enumStdLinks[this.data.CMPLNK].name : this.data.CODLNK;
	}
	isActivated(_) {
		return (activ.getActiv(_, this.supervisor, this.data.ACVLNK) > 0);
	}
	prepareKeyparams(repr) {
		function fvalkey(value, typint) {
			if (value === undefined) return "";
			if (value === "") return "";
			if (~["AVOID.ACHAR", "AVOID.ADATE", "AVOID.ADATTIM", "AVOID.ACLOB", "AVOID.ABLOB"].indexOf(value)) return "";
			if (~["AVOID.AUUIDENT"].indexOf(value)) return "00000000-0000-0000-0000-000000000000";
			if (~["AVOID.ASHORT", "AVOID.AINT", "AVOID.ADEC", "AVOID.ALIB", "AVOID.ATINYINT"].indexOf(value)) return "0";
			if (~["AVOID.AINS"].indexOf(value)) return "null";
			if (value.charAt(0) === "'" || value.charAt(0) === '"') return value.substring(1, value.length - 1);
			if (typint === 8) { //#AML10030 : date YYYYMMDD
				if (~["000000", "00000000"].indexOf(value)) return "";
				if (value.length === 8) return value.substring(0, 4) + '-' + value.substring(4, 2) + '-' + value.substring(6);
				return value;
			}
			if (~[1, 2, 3].indexOf(typint) && !isNaN(value)) return parseInt(value);
			return value;
		}
		/*
		 *		function fvalparOld(value, typint) {
		 *			if (value === undefined) return "";
		 *			if (value === "") return "";
		 *			if (~["AVOID.ACHAR", "AVOID.ADATE", "AVOID.ADATTIM", "AVOID.AUUIDENT", "AVOID.ACLOB", "AVOID.ABLOB"].indexOf(value)) return '""';
		 *			if (~["AVOID.ASHORT", "AVOID.AINT", "AVOID.ADEC", "AVOID.ALIB", "AVOID.ATINYINT"].indexOf(value)) return "0";
		 *			if (~["AVOID.AINS"].indexOf(value)) return "null";
		 *			if (value.charAt(0) === "'" || value.charAt(0) === '"') return value.substring(1, value.length - 1) === "" ? '""' : value.substring(1, value.length - 1);
		 *			if (typint === 8) { //#AML10030 : date YYYYMMDD
		 *				if (~["000000", "00000000"].indexOf(value)) return '""';
		 *				if (value.length === 8) return value.substring(0, 4) + '-' + value.substring(4, 2) + '-' + value.substring(6);
		 *				return value;
		 *			}
		 *			if (~[1, 2, 3].indexOf(typint) && !isNaN(value)) return parseInt(value);
		 *			return value;
		 *		}
		 */
		function fvalpar(value, typint) {
			return fvalkey(value, typint);
		}

		function prepParam(repr, paramData, key) {
			if (/^\=num.*$/.test(paramData.VALEUR)) paramData.VALEUR = paramData.VALEUR.substring(6, paramData.VALEUR.length - 1);
			else if (/^\=val.*$/.test(paramData.VALEUR)) paramData.VALEUR = paramData.VALEUR.substring(5, paramData.VALEUR.length - 1);
			var propData = util.find(repr.data.EXPORTED_PROPERTIES, 'CODPRO', paramData.VALEUR);
			if (propData) paramData.alias = propData.ALIAS;
			else if (tabValActx[paramData.VALEUR]) paramData.alias = tabValActx[paramData.VALEUR];
			else {
				if (key === true) paramData.value = fvalkey(paramData.VALEUR, paramData.TYPINT);
				else paramData.value = fvalpar(paramData.VALEUR, paramData.TYPINT);
			}
			return paramData;
		}

		//prepare keys+params
		this.params = [];
		this.keys = [];
		if (this.data.PARAMS) {
			var self = this;
			var keyParams = this.data.PARAMS.filter(function(paramData) {
				//return paramData.TYPPAR === 3 && paramData.TYPKEY === 2 && paramData.CODLNK === self.data.oCODLNK && paramData.AFFLNK === self.data.oAFFLNK && paramData.CODFLD === self.data.ANCLNK;
				return paramData.TYPPAR === 3 && paramData.TYPKEY === 2;
			}).reduce(function(r, paramData) {
				r.push(prepParam(repr, paramData, true));
				return r;
			}, []);
			this.keys = keyParams;
			this.params = this.data.PARAMS.filter(function(paramData) {
				//return paramData.TYPPAR === 3 && paramData.TYPKEY === 1 && paramData.CODLNK === self.data.oCODLNK && paramData.AFFLNK === self.data.oAFFLNK && paramData.CODFLD === self.data.ANCLNK;
				return paramData.TYPPAR === 3 && paramData.TYPKEY === 1;
			}).reduce(function(r, paramData) {
				r.push(prepParam(repr, paramData, false));
				return r;
			}, []);
		}
	}
	prototypeNode(_) {
		var node = {
			$title: this.supervisor.loadText(_, this.data.INTLNK),
		};
		switch (this.data.TYPLNK) {
			case 1:
				// representation
				if (this.data.CMPLNK !== 17 && this.data.CMPLNK !== 18) {
					node.$type = "application/json;vnd.sage=syracuse";
					switch (this.data.TARLNK) {
						case 2:
							node.$target = "blank";
							break;
						case 3:
							node.$target = "embedded";
							break;
						default:
							if (this.data.CMPLNK !== 9) node.$target = "";
							else if (this.data.ATTLNK !== 3) {
								if (this.anchor.facet === "$edit" || (this.anchor.resourceFactory && this.anchor.resourceFactory.facet === "$edit")) node.$target = "blank";
								else node.$target = "";
							}
					}
				}
				switch (this.data.CMPLNK) {
					case 1:
						// create
						node.$method = "POST";
						node.$url = this.url(_, "$edit", false, true, true) + this.paramsEntExpression(_);
						break;
					case 2:
						// details
						node.$url = this.url(_, "$details", true, false);
						break;
					case 3:
						// edit
						node.$method = "POST";
						node.$url = this.url(_, "$edit", true, true) + this.paramsEntExpression(_);
						break;
					case 4:
						// delete
						node.$method = "DELETE";
						node.$url = this.url(_, "$query", true, false);
						node.$confirm = this.supervisor.loadMess(_, 124, 209);
						break;
					case 5:
						// query
						node.$url = this.url(_, "$query", false, false) + this.paramsEntExpression(_) + this.paramsFilterExpression(_);
						break;
					case 6:
						// duplicate - TODO: fix URL
						node.$method = "POST";
						node.$url = this.url(_, "$edit", true, true);
						break;
					case 7:
						// excel details
						node.$type = "application/syracuse-excel-worksheet";
						node.$confirm = this.supervisor.loadMess(_, 124, 236);
						node.$officeAddinSetup = "/msoffice/lib/general/addIn/SyracuseOfficeAddinsSetup.EXE";
						node.$url = this.url(_, "$details", true, false) + '&role={$role}&where={$where}&filter={$filter}&excelReportMode={excelReportMode}&doc_uuid={document}';
						var params = {};
						params.$method = "POST";
						if (this.anchor.facet === "$summary") {
							params.msoCurrentRepresentation = "{$representation}.$summary";
							params.$url = "{$collaborationUrl}" + "/msoExcelReportModes/$template/$workingCopies?representation=msoExcelReportMode.$summary&role={$role}&where={$where}&filter={$filter}&excelReportMode={excelReportMode}&doc_uuid={document}";
						} else {
							params.msoCurrentRepresentation = "{$representation}.$details";
							params.$url = "{$collaborationUrl}" + "/msoExcelReportModes/$template/$workingCopies?representation=msoExcelReportMode.$details&role={$role}&where={$where}&filter={$filter}&excelReportMode={excelReportMode}&doc_uuid={document}";
						}
						var props = {};
						props.dummy = {};
						props.$title = "dummy";
						props.$type = "application/x-string";
						params.$properties = props;
						node.$parameters = params;
						break;
					case 8:
						// excel list
						node.$type = "application/syracuse-excel-worksheet";
						node.$confirm = this.supervisor.loadMess(_, 124, 236);
						node.$officeAddinSetup = "/msoffice/lib/general/addIn/SyracuseOfficeAddinsSetup.EXE";
						node.$url = this.url(_, "$query", false, false) + '&role={$role}&where={$where}&filter={$filter}&excelReportMode={excelReportMode}&doc_uuid={document}';
						var params = {};
						params.$url = "{$collaborationUrl}" + "/msoExcelReportModes/$template/$workingCopies?representation=msoExcelReportMode.$query&role={$role}&where={$where}&filter={$filter}&excelReportMode={excelReportMode}&doc_uuid={document}";
						params.$method = "POST";
						params.msoCurrentRepresentation = "{$representation}.$query";
						var props = {};
						props.dummy = {};
						props.$title = "dummy";
						props.$type = "application/x-string";
						params.$properties = props;
						node.$parameters = params;
						break;
					case 9:
						// lookup
						if (this.data.ATTLNK === 3) node.$url = this.url(_, "$lookup", false, false) + this.paramsFilterExpression(_);
						else node.$url = this.url(_, "$lookup", true, false) + this.paramsFilterExpression(_);
						break;
					case 10:
						// summary
						node.$url = this.url(_, "$summary", true, false);
						if (node.$target === "" && this.anchor.resourceFactory.facet === "$edit") node.$target = "blank";
						break;
					case 11:
						// pdf details
						node.$type = "application/pdf";
						node.$url = this.url(_, "$details", true, false);
						break;
					case 12:
						// pdf list
						node.$type = "application/pdf";
						node.$url = this.url(_, "$query", false, false);
						break;
					case 13:
						// word details
						node.$type = "application/syracuse-word-report";
						node.$url = this.url(_, "$details", true, false) + '&role={$role}&where={$where}&filter={$filter}&reportMode={reportMode}&doc_uuid={document}';
						var params = {};
						params.$method = "POST";
						if (this.anchor.facet === "$summary") {
							params.msoCurrentRepresentation = "{$representation}.$summary";
							params.$url = "{$collaborationUrl}" + "/msoReportModes/$template/$workingCopies?representation=msoReportMode.$summary&role={$role}&where={$where}&filter={$filter}&reportMode={reportMode}&doc_uuid={document}";
						} else {
							params.msoCurrentRepresentation = "{$representation}.$details";
							params.$url = "{$collaborationUrl}" + "/msoReportModes/$template/$workingCopies?representation=msoReportMode.$details&role={$role}&where={$where}&filter={$filter}&reportMode={reportMode}&doc_uuid={document}";
						}
						var props = {};
						props.dummy = {};
						props.$title = "dummy";
						props.$type = "application/x-string";
						params.$properties = props;
						node.$parameters = params;
						break;
					case 14:
						// word list
						node.$type = "application/syracuse-word-report";
						node.$url = this.url(_, "$query", false, false) + '&role={$role}&where={$where}&filter={$filter}&reportMode={reportMode}&doc_uuid={document}';
						var params = {};
						params.$url = "{$collaborationUrl}" + "/msoReportModes/$template/$workingCopies?representation=msoReportMode.$query&role={$role}&where={$where}&filter={$filter}&reportMode={reportMode}&doc_uuid={document}";
						params.$method = "POST";
						params.msoCurrentRepresentation = "{$representation}.$query";
						var props = {};
						props.dummy = {};
						props.$title = "dummy";
						props.$type = "application/x-string";
						params.$properties = props;
						node.$parameters = params;
						break;
					case 15:
						// word mail merge
						node.$type = "application/syracuse-word-mailmerge";
						node.$url = this.url(_, "$query", true, false) + '&role={$role}&where={$where}&filter={$filter}&createMode={creationMode}&doc_uuid={document}';
						var params = {};
						params.$method = "POST";
						if (this.anchor.facet === "$summary") {
							params.$url = "{$collaborationUrl}" + "/msoMailMergeDocSels/$template/$workingCopies?representation=msoMailMergeDocSel.$summary&role={$role}&where={$where}&filter={$filter}";
							params.msoCurrentRepresentation = "{$representation}.$summary";
						} else {
							params.$url = "{$collaborationUrl}" + "/msoMailMergeDocSels/$template/$workingCopies?representation=msoMailMergeDocSel.$details&role={$role}&where={$where}&filter={$filter}";
							params.msoCurrentRepresentation = "{$representation}.$details";
						}
						props = {};
						props.dummy = {};
						props.$title = "dummy";
						props.$type = "application/x-string";
						params.$properties = props;
						node.$parameters = params;
						break;
					case 16:
						// word mail merge
						node.$type = "application/syracuse-word-mailmerge";
						node.$url = this.url(_, "$query", false, false) + '&role={$role}&where={$where}&filter={$filter}&createMode={creationMode}&doc_uuid={document}';
						var params = {};
						params.$url = "{$collaborationUrl}" + "/msoMailMergeDocSels/$template/$workingCopies?representation=msoMailMergeDocSel.$query&role={$role}&where={$where}&filter={$filter}";
						params.$method = "POST";
						params.msoCurrentRepresentation = "{$representation}.$query";
						var props = {};
						props.dummy = {};
						props.$title = "dummy";
						props.$type = "application/x-string";
						params.$properties = props;
						node.$parameters = params;
						break;
					case 17:
						// save
						//#SAM 108421 $style -> $kind
						//node.$style = "main";
						node.$kind = "main";
						node.$isHidden = true;
						//node.$isRequested = false;
						node.$isDisabled = false;
						//#SAM 108421 redirect only on details
						Object.keys(this.links).filter(function(name) {
							return name == "$details";
						}).forEach_(_, function(_, name) {
							node.$links = node.$links || {};
							//#SAM 108421 redirect only on details
							//node.$links[name] = this.links[name].prototypeNode(_);
							//delete node.$links[name].$target;
							node.$links["$redirect"] = this.links[name].prototypeNode(_);
							delete node.$links["$redirect"].$target;
						}, this);
						break;
					case 18:
						// cancel
						node.$isHidden = true;
						//node.$isRequested = false;
						node.$isDisabled = false;
						Object.keys(this.links).forEach_(_, function(_, name) {
							node.$links = node.$links || {};
							node.$links[name] = this.links[name].prototypeNode(_);
							delete node.$links[name].$target;
						}, this);
						break;
					default:
						node.$debug = this.data;
				}
				break;
			case 2:
				// method -- see later
				node.$debug = this.data;
				break;
			case 3:
				if (this.anchor.isExtra === true) var repr = this.anchor.class;
				else var repr = this.anchor.representation;
				node.$type = "application/json;vnd.sage=syracuse";
				node.$method = "POST";
				node.$target = "";
				if (this.data.FLGASYLNK == 2) {
					node.$invocationMode = "async";
					node.$capabilities = "abort";
				}
				node.$parameters = {};
				node.$url = "{$baseUrl}/" + this.data.CLALNK + "('" + this.keyExpression() + "')/" + //
				"$services/" + this.data.CODLNK + "?representation=" + repr.name + "." + this.anchor.facet + this.params3Expression(_, node.$parameters);
				break;
			case 4:
				// convergence
				node.$type = "application/json;vnd.sage=syracuse";
				node.$target = "main";
				//node.$method = "POST";
				if (this.data.CMPLNK === 1)
					node.$url = this.supervisor.transUrl + "/$sessions?f=" + this.data.CODFNCLNK + '/2//C/';
				else {
					node.$url = this.supervisor.transUrl + "/$sessions?f=" + this.data.CODFNCLNK + '/2//M/' + this.params4Expression(_);
				}
				break;
			case 5:
				switch (this.data.CMPLNK) {
					case 19:
						if (this.data.AFFLNK !== 1) throw new Error("bad anchor type for x-binary link: " + this.data.AFFLNK);
						//node.$type = "application/x-binary";
						//node.$url = "{$baseUrl}/TEXT('" + this.anchor.representation.name + "~" + this.anchor.name + "~" + this.anchor.class.keyExpression() + "')";
						break;
					default:
						// free
						node.$debug = this.data;
						node.$type = "application/json;vnd.sage=syracuse";
						node.$target = "main";
						node.$url = this.data.FREELNK;
				}
				break;
			default:
				console.error('Bad CMPLNK on link' + this.name);
				node.$debug = this.data;
		}
		// ATTLNK:
		// 1: simple link
		// 2: details
		// 3: lookup
		// 4: summary
		return node;
	}
	paramsFilterExpression(_) {
		function getSep(type) {
			switch (type) {
				case 7:
				case 11:
					return "'";
					break;
				case 8:
				case 12:
					return "@";
					break;
			}
			return "";
		}
		var filter = "";
		this.params.filter(function(paramData) {
			return paramData.PARFIL === 2 && (paramData.alias || paramData.value);
		}).forEach(function(paramData) {
			filter = (filter !== "" ? filter + ' and ' : "") +
				"(" + paramData.CODPAR + " eq " + getSep(paramData.TYPINT) + (paramData.alias ? '{' + paramData.alias + '}' : (paramData.value === '""' ? '' : paramData.value)) + getSep(paramData.TYPINT) + ")";
		});
		if (filter) return '&where=' + filter;
		else return "";
	}
	paramsEntExpression(_) {
		return this.params.filter(function(paramData) {
			return paramData.PARENT === 2 && (paramData.alias || paramData.value);
		}).map(function(paramData) {
			return '&' + paramData.CODPAR + "=" + (paramData.alias ? '{' + paramData.alias + '}' : paramData.value);
		}).join('');
	}
	params3Expression(_, parameters) {
		return this.params.map(function(paramData) {
			if (paramData.alias)
				parameters[paramData.CODPAR] = '{' + paramData.alias + '}';
			else
				parameters[paramData.CODPAR] = "" + paramData.value; //convert to string
			return '&' + paramData.CODPAR + "={" + paramData.CODPAR + "}";
		}).join('');
	}
	params4Expression(_) {
		function isAfcObjGES3(_, link) {
			//VVV when ETL will be OK replace withMongoDB read
			var param = link.supervisor.sqlDriver.param;
			var params = [];
			var wheres = [];
			params.push(link.data.CODFNCLNK);
			wheres.push("CODINT_0=" + param(params.length - 1));
			var sql = "select ACTION_0,CODPAR_0,VALPAR_0 from AFONCTION  where (" + wheres.join(" and ") + ")";
			var self = link;
			var recordset = link.supervisor.sqlReader(_, sql, params).toArray(_);
			if (recordset.length > 0) {
				if (recordset[0].ACTION === "GOBJET" && recordset[0].CODPAR === "OBJET" && recordset[0].VALPAR !== "") {
					var valpar = recordset[0].VALPAR;
					if (valpar.charAt(0) === "'" || valpar.charAt(0) === '"') var obj = valpar.substring(1, valpar.length - 1);
					else var obj = valpar;
					var param2 = link.supervisor.sqlDriver.param;
					var params2 = [];
					var wheres2 = [];
					params2.push(obj);
					wheres2.push("ABREV_0=" + param2(params2.length - 1));
					var sql2 = "select TYPGES_0 from AOBJET  where (" + wheres2.join(" and ") + ")";
					var recordset2 = link.supervisor.sqlReader(_, sql2, params2).toArray(_);
					if (recordset2.length > 0) {
						if (recordset2[0].TYPGES === 3) return true;
					}

				}
			}
			return false;
		}
		//ATTENTION key2+key1+key3+key4.......
		//except for combined objects (TYPGES=3) with 2 keys
		if (this.keys.length === 2 && isAfcObjGES3(_, this) === true) {
			var expKeys = this.keys.map(function(paramData) {
				return (paramData.alias ? '{' + paramData.alias + '}' : paramData.value);
			}, this).join('~') || "";
		} else {
			var expKeys = "";
			var no = 1;
			this.keys.forEach(function(paramData) {
				if (no === 2) {
					expKeys = (paramData.alias ? '{' + paramData.alias + '}' : paramData.value) + "~" + expKeys;
				} else {
					expKeys = (expKeys !== "" ? expKeys + "~" : "") + (paramData.alias ? '{' + paramData.alias + '}' : paramData.value);
				}
				no = no + 1;
			});
		}
		var params = this.params.map(function(paramData) {
			return '~' + paramData.CODPAR + "~" + (paramData.alias ? '{' + paramData.alias + '}' : (paramData.value === '""' ? '' : paramData.value));
		}, this).join('');
		return expKeys + (params ? '/params' + params : "");
	}
	keyExpression() {
		return this.keys.map(function(paramData) {
			return (paramData.alias ? '{' + paramData.alias + '}' : paramData.value);
		}, this).join('~');
	}
	url(_, facet, withKey, withWorkingCopy, withTemplate) {
		//console.log("data:",this.data);
		var key = withKey ? "('" + this.keyExpression() + "')" : "";
		var workingCopy = withWorkingCopy ? "/$workingCopies" : "";
		var template = withTemplate ? "/$template" : "";
		var url = "{$baseUrl}/" + this.data.CLALNK + key + template + workingCopy + "?representation=" + this.data.REPLNK + "." + facet;
		return url;
	}
};
exports.constructor = Link;
