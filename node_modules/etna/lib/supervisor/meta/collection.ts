import { _ } from 'streamline-runtime';
import * as core from 'syracuse-core';
import { DriverReaderOptions } from '../../engine/drivers/types';
import * as util from '../util';
import { CollectionMeta, ClassLinkMeta } from '../metadata/class';
import { BaseClass, ColumnDesc, Property } from './types';
import { Supervisor } from '../supervisor';
const tracerJs = core.getTracer("etna.supervisor");

export class Collection {
	supervisor: Supervisor;
	data: CollectionMeta;
	class: BaseClass;
	property: Property;
	mappingData: ClassLinkMeta;
	ofIndexedProperties: boolean;
	count: number;
	constructor(superv: Supervisor, clas: BaseClass, data: CollectionMeta) {
		this.supervisor = superv;
		this.class = clas;
		this.data = data;
	}
	init(_: _) {
		return this;
	}
	get name() {
		return this.data.CODCOL;
	}
	get jsName() {
		return this.data._proxyName;
	}
	get isInstance() {
		return this.mappingData && this.mappingData.TYPLNK === 3;
	}
	get nbrPro() {
		return this.class.data.PROPERTIES.length;
	}
	getSql(_: _, colNames: string[], tableNames: string[], wheres: string[], params: string[], descs: ColumnDesc[], 
		cache: any, raw: boolean, sqlOpts?: DriverReaderOptions) {
		const properties = this.class.properties;
		tracerJs.debug && tracerJs.debug("collection.getSql:" + Object.keys(properties));
		this.class.cache = cache;
		Object.keys(properties).forEach_(_, (_, name) => {
			properties[name].getSql && properties[name].getSql(_, colNames, tableNames, wheres, params, descs, cache, raw, sqlOpts);
		}, this);
	}
};

export const Constructor = Collection;