"use strict";

var glob = require('streamline/lib/globals');
var util = require("etna/lib/supervisor/util");
var Helper = util.Helper;
var activ = require("etna/lib/supervisor/meta/activ");

class BaseClass extends Helper {
	constructor(superv,data) {
		super();
		this.supervisor = superv;
		this.data = data;
		this.diagnoses = [];
		// Call derived constructor :
	}

	scripts(_) {
		if (this._scripts === undefined) {
			this._scripts = this.supervisor.loadScripts(_, this) || null;
		}
		return this._scripts;
	}

	isActivated(_) {
		return (activ.getActiv(_, this.supervisor, this.data.CODACT) > 0);
	}

	ASETERROR(_, path, msg, severity) {
		this.diagnoses.push(this.supervisor.new(_, 'Diagnosis', severity, path, msg));
		return severity;
	}

	get ACTX(){
		return glob.context.x3session.actx;
	}

	get _index() {
		if (this._$index === undefined) {
			var index = this.tableIndex;

			if (index) {
				this._$index = [];
				var self = this;
				Object.keys(index.columns).forEach(function(c) {
					self._index.push(self.properties[index.columns[c].name]);
				});
			} else {
				var descript = this.data.DESCRIPT || this.data.KEYINT;

				if (descript && descript.length) {
					this._$index = [];
					var match = descript.match(/[-+]?\w+/g);
					if (match) {
						for (var i = 0; i < match.length; i++) {
							var name = match[i];
							var column = name;
							switch (name.charAt(0)) {
								case '+':
									column = name.substring(1);
									name = column + " asc";
									break;
								case '-':
									column = name.substring(1);
									name = column + " desc";
									break;
							}
							this._$index[i] = {
								name: name
							};
						}
					}
				}
			}
		}
		return this._$index;
	}
};

exports.BaseClass = BaseClass;