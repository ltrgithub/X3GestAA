"use strict";

var glob = require('streamline/lib/globals');
var util = require("etna/lib/supervisor/util");
var activ = require("etna/lib/supervisor/meta/activ");

exports.defineClass = function(constructor, parent, members) {
	// Add base members :

	members.scripts = function(_) {
		if (this._scripts === undefined) {
			this._scripts = this.supervisor.loadScripts(_, this) || null;
		}
		return this._scripts;
	};

	members.isActivated = function(_) {
		return (activ.getActiv(_, this.supervisor, this.data.CODACT) > 0);
	};

	members.ASETERROR = function(_, path, msg, severity) {
		this.diagnoses.push(this.supervisor.new(_, 'Diagnosis', severity, path, msg));
		return severity;
	};

	members.ACTX = {
		get: function() {
			return glob.context.x3session.actx;
		}
	};

	members._index = {
		get: function() {
			if (this._$index === undefined) {
				var index = this.tableIndex;

				if (index) {
					this._$index = [];
					var self = this;
					Object.keys(index.columns).forEach(function(c) {
						self._index.push(self.properties[index.columns[c].name]);
					});
				} else {
					var descript = this.data.DESCRIPT || this.data.KEYINT;

					if (descript && descript.length) {
						this._$index = [];
						var match = descript.match(/[-+]?\w+/g);
						if (match) {
							for (var i = 0; i < match.length; i++) {
								var name = match[i];
								var column = name;
								switch (name.charAt(0)) {
									case '+':
										column = name.substring(1);
										name = column + " asc";
										break;
									case '-':
										column = name.substring(1);
										name = column + " desc";
										break;
								}
								this._$index[i] = {
									name: name
								};
							}
						}
					}
				}
			}
			return this._$index;
		}
	};

	return util.defineClass(function(superv, data, group) {
		this.supervisor = superv;
		this.data = data;
		this.diagnoses = [];

		// Call derived constructor :
		constructor.apply(this, arguments);
	}, parent, members);
};