"use strict";

var util = require('util');
var constants = require("etna/lib/supervisor/constants");
var Slot = require("etna/lib/supervisor/slot").Slot;

class SlotLob extends Slot {
	constructor(parent, property) {
		super(parent, property);
		this._value = undefined;
	}

	contentType(_) {
		return this.property.type.contentType(_,this);
	}

	read(_) {
		return this.property.type.readLob(_,this);
	}

	getKeys(_) {
		var instance = this.$parent;
		var keyMaps = this.property.keyMaps(_);

		var keys = Object.keys(keyMaps).reduce_(_, (_,r,  key) => {
			r[key] = keyMaps[key](_, instance);
			return r;
		},{});
		//dbg:console.log("SlotLob keys:",keys);
		return keys;
	}


	insertSlot(_) {
		if(!this._value ) return constants.CST_AOK;
		if(this.property.type.insertMedia) return this.property.type.insertMedia(_,this, this._value);

		var sqlDriver = this.$parent.supervisor.sqlDriver;
		var param = sqlDriver.param;
		var keys = this.getKeys(_);
		//dbg:console.log("insertLob name:"+slot.name+" keys:",keys);
		var params = [keys.CODBLB, keys.IDENT1, keys.IDENT2, keys.IDENT3, this._value];

		var i = 0;
		var sql = "insert into " + this.table + " (" + ['CODBLB_0','IDENT1_0','IDENT2_0','IDENT3_0',this.field].join(',') + //
		") values (" + params.map((p)=> param(i++)).join(',') + ")";
		return this.$parent.supervisor.executeSql(_, sql, params);
	}

	updateSlot(_) { 
		if(!this._value ) return constants.CST_AOK;
		if(this.property.type.updateMedia) return this.property.type.updateMedia(_,this, this._value);

		var sqlDriver = this.$parent.supervisor.sqlDriver;
		var param = sqlDriver.param;
		var keys = this.getKeys(_);
		//dbg:console.log("updateLob name:"+slot.name+" keys:",keys);
		var params = [keys.CODBLB, keys.IDENT1, keys.IDENT2, keys.IDENT3, this._value];

		var i = 0;
		var updateWheres = " CODBLB_0=" + param(i++) + " and IDENT1_0=" + param(i++) + " and IDENT2_0=" + param(i++) + " and IDENT3_0=" + param(i++);

		var sql = "update " + this.table + " T set " + this.field + " = " + param(i++) + " where " + updateWheres;
		return this.$parent.supervisor.executeSql(_, sql, params);
	}

	deleteSlot(_) { 
		if(!this._value ) return constants.CST_AOK;
		if(this.property.type.deleteMedia) return this.property.type.deleteMedia(_,this, this._value);

		var sqlDriver = this.$parent.supervisor.sqlDriver;
		var param = sqlDriver.param;
		var keys = this.getKeys(_);
		//dbg:console.log("deleteLob name:"+slot.name+" keys:",keys);
		var params = [keys.CODBLB, keys.IDENT1, keys.IDENT2, keys.IDENT3];
		var i = 0;
		var sql = "delete From " + this.table + " Where" +
			" CODBLB_0=" + param(i++) + " and IDENT1_0=" + param(i++) + " and IDENT2_0=" + param(i++) + " and IDENT3_0=" + param(i++);
		return this.$parent.supervisor.executeSql(_, sql, params);
	}
}

exports.SlotLob = SlotLob;

exports.newSlotLob = function(property) {
	return function(_, parent) {
		return new SlotLob(parent, property);
	};
};
