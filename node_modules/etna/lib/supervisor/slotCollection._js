"use strict";

const X3Error = require("etna/lib/engine/runtime/errors").X3Error;
const attributes = require("etna/lib/supervisor/attributes");
const snapshots = require("etna/lib/supervisor/snapshots");
const variables = require('etna/lib/engine/runtime/variables');
const tuuid = require('etna/lib/engine/runtime/tuuid');
const tracerJs = require('syracuse-core').getTracer("etna.supervisor");
const util = require("etna/lib/supervisor/util");
const mapping = require("etna/lib/supervisor/mapping");
const constants = require("etna/lib/supervisor/constants");
const Cache = require("etna/lib/supervisor/cache").Cache;
const Diagnosis = require("etna/lib/supervisor/meta/diagnosis");

class SlotCollection {
	constructor(parent, collection) {
		this.supervisor = parent.supervisor;
		this.collection = collection;

		// Empty array
		this.lines = [];
		this.bindAttributes(parent);
		this.proName = "";
		this.$uuid = tuuid.generate();
		function bindOperation(self, flag, fct) {
			self[fct] = !self.collection.mappingData || self.collection.mappingData[flag] === 2 ? self['_' + fct] : function (_) {
				return constants.CST_AOK;
			};
		}
		bindOperation(this, "FLGD", "delete");
		bindOperation(this, "FLGC", "insert");
		bindOperation(this, "FLGU", "update");
	}

	get $$type() {
		return "SlotCollection";
	}

	get name() {
		return this.collection.name;
	}

	get PROCOL() {
		return this.collection.data.PROCOL;
	}

	get class() {
		return this.collection.class;
	}

	get deletedLines() {
		const snapshot = this.$snapshot;

		return snapshot ? snapshot.lines.filter(function (line) {
			return line.$astalin === constants.CST_ADEL;
		}) : [];
	}

	deleteChildren() {
		this.lines = [];
		return this;
	}

	x3Maxtab() {
		return this.lines.length;
	}

	get(_) {
		const self = this;

		if (this.$lazyLoading) {
			this.lines = this.collection.class.loadInstances(_, self.$parent, mapping.getIndex(_, this.supervisor, this.collection.mappingData), this.relKeys).map(function (_, instance) {
				instance.$parent = self;
				instance.APARENT = self.$parent;
				return instance;
			}).toArray(_);
			this.$lazyLoading = false;
		}
		return this;
	}

	// for X3Son :
	set(_, lines) {
		if (lines && Array.isArray(lines) && lines.length && lines[0].class && lines[0].class.name === this.class.name) {
			this.lines = lines;
			for (var i = 0; i < lines.length; i++) {
				this.lines[i].$parent = this;
				this.lines[i].APARENT = this.$parent;
			}
		}
		return this;
	}

	fromRecord(_, record) {
		tracerJs.debug && tracerJs.debug("col " + this.name + ".fromRecord:" + JSON.stringify(record));

		if (this.collection.mappingData) {
			this.$lazyLoading = true;
			// Compute the collection keys for the lazy load :
			this.relKeys = mapping.getKeys(_, this.collection.mappingData, record);
		} else {
			// no mapping - denormalized
			var count;
			if (this.collection.data.PROCOL) {
				var procol = this.collection.data.PROCOL;
				count = record[procol];
			}
			if (count === undefined) {
				count = Math.max(0, this.collection.count);
			}

			if (!this.collection.class) return console.error("ignoring collection " + this.collection.name), [];

			if (count) {
				var self = this;
				var cache = new Cache();

				Object.keys(this.collection.class.properties).forEach_(_, function (_, p) {
					const property = self.collection.class.properties[p];

					if (!/_REF$/.test(p)) {
						if (property.isAtextra) cache.addProperty(_, property);
						else if (property.isReference()) cache.addReference(_, property);
					}
				});

				for (var i = 0; i < count; i++) {
					var line = this.$parent.supervisor.new(_, 'Instance', this.collection.class, this).afterCreate(_, record, i);
					line.$uuid = tuuid.generate(); // Don't reuse the uuid of the parent !
					line.$index = i;
					line.APARENT = this.$parent;
					line.$astalin = 0;
					this.lines[i] = line;
					cache.isActivated && cache.register(_, line);
				}
			}
		}
	}

	crud(_, fname, f) {
		var status;
		try {
			// The BEFORE is managed by the parent:
			status = this.$parent.action(_, fname + "_BEFORE", null, this.collection);
			if (status === constants.CST_AERROR) return status;

			var line = f(_, this);

			// The AFTER is managed by the line:
			return line.action(_, fname + "_AFTER");
		} catch (e) {
			console.error(e);
			console.error(e.stack);
			var status = this.$parent.addDiagnose(_, constants.CST_AERROR, e.message);
			return Math.max(status, this.$parent.action(_, fname + "_ABORT", this.key));
		}
	}

	AINIT(_) {
		tracerJs.debug && tracerJs.debug("col " + this.name + " _ainit");
		return constants.CST_AOK;
	}

	newline(_) {
		const line = this.$parent.supervisor.new(_, 'Instance', this.class, this).afterCreate(_);
		// Modify the APARENT of the line :
		line.APARENT = this.$parent;
		line.AINIT(_);

		// Update properties defined by the parent :
		const self = this;

		this.collection.mappingData && this.collection.mappingData.MAPS.filter(function (map) {
			return !!map.PROMAP;
		}).forEach_(_, function (_, map) {
			line.set(_, map.KEYMAP, self.$parent.get(_, map.PROMAP));
		});

		// init
		line.$astalin = constants.CST_ANEW;
		return line;
	}

	setASTALIN(status) {
		this.$astalin = constants.CST_AUPD;
		this.$parent.setASTALIN(this.$astalin);
	}

	add(_, position, uuid) {
		tracerJs.debug && tracerJs.debug("col " + this.name + " add:" + position);

		const self = this;

		this.$lazyLoading && this.get(_);
		if (self.getAttribute("$isReadOnly") || self.collection.data.MAXCOL && self.lines.length === self.collection.data.MAXCOL) return -1;

		// Let's take snaps of the collection if necessary :
		self.snapshots();

		var insertedAt = 1;
		// Controled by the parent :
		self.crud(_, 'ADDLINE', function ADDLINE(_, col) {
			const line = col.newline(_);

			if (uuid !== undefined) line.$uuid = uuid;

			if (position === variables.constants.CST_AFIRSTPOS) {
				col.lines.unshift(line);
			} else if (position === variables.constants.CST_ALASTPOS) {
				col.lines.push(line);
				insertedAt = col.lines.length;
			} else {
				// Insert the line in the collection
				col.lines.splice(position - 1, 0, line);
				insertedAt = position;
			}
			col.setASTALIN(constants.CST_AUPD);
			return line;
		});
		return insertedAt;
	}

	del(_, position) {
		tracerJs.debug && tracerJs.debug("col " + this.name + " del:" + position);

		const self = this;

		this.$lazyLoading && this.get(_);

		if (this.getAttribute("$isReadOnly") || !this.lines.length || position !== -1 && (position < 1 || position > this.lines.length)) {
			tracerJs.error && tracerJs.error("SlotCollection " + this.name + " del refused");
			return -1;
		}

		const deleteAt = (position === constants.CST_ALASTPOS ? this.lines.length : position) - 1;
		const deletedLine = this.lines[deleteAt];


		deletedLine.activeLoading && deletedLine.activeLoading(_);

		// Let's take snaps of the collection if necessary :
		this.snapshots();

		// Controled by the parent :
		var deletedAt = -1;
		self.crud(_, 'ADELLINE', function ADELLINE(_, col) {
			deletedAt = deleteAt;
			// Mark the line as deleted : 
			col.lines[deletedAt].$astalin = constants.CST_ADEL;
			// Remove the line :
			col.lines = col.lines.slice(0, deletedAt).concat(col.lines.slice(deletedAt + 1));
			col.setASTALIN(constants.CST_AUPD);
			return deletedLine;
		});
		return deletedAt;
	}
	empty(_) {
		for (var i = 1, max = this.x3Maxtab(); i <= max; i++) {
			this.del(_, constants.CST_ALASTPOS);
		}
	}

	index(_, position) {
		// MINCOL=2 : At least one line:
		if (position > this.lines.length && !(position == 1 && !this.lines.length && this.collection.data.MINCOL === 2)) {
			throw new X3Error(8, "collection index out of range: " + position);
		}
		var line = this.lines[position - 1];
		if (!line) {
			// Create an empty line
			line = this.newline(_);
			this.lines[position - 1] = line;
		}
		return line;
	}

	find(key, val) {
		for (var i = 0, len = this.lines.length; i < len; i++) {
			var line = this.lines[i];
			if (line !== null && line[key].x3Compare(val) === 0) {
				return line;
			}
		}
		return null;
	}

	clone() {
		const to = new SlotCollection(this.$parent, this.collection);

		to.lines = this.lines.slice(0);

		attributes.clone(this, to);
		to.snapshotof = this;
		return to;
	}

	revertTo(input) {
		if (!this.snapshotof) return this;

		const to = this.snapshotof;

		to.lines = [];
		for (var i = 0, len = this.lines.length; i < len; i++) {
			var from = this.lines[i];
			to.lines[i] = from.revertTo();
			to.lines[i].releaseSnapshot(from);
		}
		attributes.revertTo(this, this.snapshotof);
		return to;
	}

	getChildren() {
		return this.lines;
	}

	updateProperty(from, to) {
		for (var i = 0, len = this.lines.length; i < len; i++) {
			if (this.lines[i] == from) {
				this.lines[i] = to;
				break;
			}
		}
	}

	setColumnAttribute(column, attribut, value) {
		this.snapshots();
		return this.setColAttribute(column, attribut, value);
	}

	applyToEach(_, f, operation) {

		var status = constants.CST_AOK;

		const operations = {
			2: "insert", //CST_ANEW
			4: "update", //CST_AUPD
			16: "delete" //CST_ADEL
		};

		// applyToEach is to be applied on all lines + deleted lines

		var lines = this.lines.concat(this.deletedLines);

		if (operation === undefined) {
			// Sort the lines (insert/update/delete)
			lines = lines.sort(function (line1, line2) {
				return line2.$astalin - line1.$astalin;
			});
		}
		// tracerJs.debug && tracerJs.debug("col "+ this.name+ (operation?"."+operation:"")+ "      lines:"+lines.length);

		for (var i = 0, len = lines.length; i < len; i++) {
			var line = lines[i];
			if (line !== null) {
				var op = operation || operations[line.$astalin];
				if (op) {
					tracerJs.debug && tracerJs.debug("col " + this.name + ".apply " + op + " on line " + (i + 1));
					status = f(_, line, op, i + 1);
					if (status === constants.CST_AERROR) return status;
				}
			}
		}
		return status;
	}

	onMapChange(_, property, value) {
		return this.applyToEach(_, function (_, line, operation) {
			return line[operation](_, property, value);
		}, "onMapChange");
	}

	onControl(_, type, operation) {
		if (!/^Update$/.test(operation)) return this.applyToEach(_, function (_, line, operation) {
			return line[type](_, operation);
		}, operation);

		// Update:
		return this.applyToEach(_, function (_, line, typeOperation) {
			return line[type](_, typeOperation.toUpperCase());
		});
	}

	executeControl(_, type) {
		return this.applyToEach(_, function (_, line, typeOperation) {
			return line[typeOperation](_, type);
		}, "executeControl");
	}

	_insert(_) {
		return this.applyToEach(_, function (_, line, operation) {
			return line[operation](_);
		}, "insert");
	}

	_update(_) {
		return this.applyToEach(_, function (_, line, operation) {
			return line[operation](_);
		});
	}

	_delete(_) {
		return this.applyToEach(_, function (_, line, operation) {
			return line[operation](_);
		}, "delete");
	}

	_activeLoading(_) {
		return this.applyToEach(_, function (_, line, operation) {
			return line[operation] && line[operation](_);
		}, "activeLoading");
		this._activeLoading = undefined;
	}

	addDiagnose(_, severity, message, category) {
		Diagnosis.trace(severity, this.name + " :'" + message + "'");
		this.diagnoses = this.diagnoses || [];
		this.diagnoses.push(this.$parent.supervisor.new(_, 'Diagnosis', severity, message, "", category));
		return severity;
	}

	getDiagnoses(_) {
		var res = [];
		const self = this;


		this.lines.forEach_(_, function (_, line, lineNo) {
			const lerr = line.getDiagnoses(_);

			res = res.concat(lerr.map_(_, function (_, d) {
				const pro = d.get(_, "PRO");

				d.set(_, "PRO", self.name + '(' + (lineNo + 1) + ')' + (pro !== "" ? '.' + pro : ""));
				return d;
			}));
		});
		return res;
	}

	deleteDiagnoses(_) {
		this.lines.forEach_(_, function (_, line) {
			line.deleteDiagnoses(_);
		});
	}

	getDelta(_, snapshot) {
		var lines = this.lines;
		if (this.deletedLines.length) return lines; // Return the whole collection

		var lineIndex = 0;
		const diffLines = snapshot.lines.reduce(function (r, line) {
			const uuid = line.$uuid.x3ToString();
			//dbg:console.error("snapshot line:"+uuid);

			r[uuid] = ++lineIndex;
			return r;
		}, {});


		lineIndex = 0;
		const self = this;

		lines.forEach_(_, function (_, line) {
			const uuid = line.$uuid.x3ToString();

			++lineIndex;
			//dbg:console.error("collection line:"+uuid);
			if (diffLines[uuid] && line.$syssnapshot === undefined) {
				//dbg:console.error("remove "+uuid+" from diffLines");
				delete diffLines[uuid];
			} else {
				//dbg:console.error("keep line "+uuid+" from diffLines");
				var line = self.index(_, lineIndex);
				line.$index = lineIndex - 1;
				diffLines[uuid] = line;
			}
		});

		// The list to send = modified lines
		lines = [];
		Object.keys(diffLines).forEach_(_, function (_, uuid) {
			//dbg:console.error("keep line "+uuid);
			lines.push(diffLines[uuid]);
		});
		return lines;
	}

	x3Compare(b) {
		return this === b;
	}

	pluck(_, property) {
		this.$lazyLoading && this.get(_);
		return this.lines.map_(_, function (_, line) {
			return line.get(_, property);
		});
	}

	initFromParent(_, parent) {
		const instanceCollection = this;
		if (instanceCollection.PROCOL) {
			var procol = parent.slot(_, instanceCollection.PROCOL);
			if (procol) {
				// Change the get of the PROCOL property so that it automatically returns
				// The number of elements in the associated collection :
				procol.get = function (_, raw) {
					tracerJs.debug && tracerJs.debug(instanceCollection.PROCOL + ".get " + instanceCollection.proName + ".x3Maxtab()");
					const instance = this.$parent;
					const collection = instance.slot(_, instanceCollection.proName);

					return collection.x3Maxtab();
				};
			}
		}
	}
};

attributes.addAttributes(SlotCollection.prototype);
attributes.addColAttributes(SlotCollection.prototype);
snapshots.addSnapshots(SlotCollection.prototype);
exports.SlotCollection = SlotCollection;

exports.newSlotCollection = function (property) {
	return function (parent) {
		const instanceCollection = new SlotCollection(parent, property.collection);

		instanceCollection.proName = property.name;
		instanceCollection.proJsName = property.jsName;
		return instanceCollection;
	};
};