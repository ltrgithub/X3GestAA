"use strict";
var attributes = require("etna/lib/supervisor/attributes");
var X3Error = require("etna/lib/engine/runtime/errors").X3Error;
var helpers = require('syracuse-core').helpers;

var tracerJs = require('syracuse-core').getTracer("etna.supervisor");


var InstanceReference = helpers.defineClass(function(parent, property) {
	// care of the name if and only if the property belongs to 
	// an instance which which belongs to a collection : 
	if (property.type) {
		this.property = property;
	} else {
		this.property = {
			name: ""
		};
	}
	this.referenceName = property.name;
	this.reference = null;
	this._value = null;
	this.bindAttributes(parent);
}, null, {
	name: {
		get: function() {
			return this.property.name;
		},
		enumerable: false,
	},
	column: {
		get: function() {
			return;
		},
		enumerable: false,
	},
	value: {
		set: function(value) {
			throw new X3Error(147, (this.name ? this.name : '') + "is readonly");
		},
		get: function() {
			return this._value || {};
		},
		enumerable: false,
	},
	_get: function(_) {
		var reference = this.$parent._get(_, this.referenceName);
		if (reference != this.reference) {
			// Load reference's attributes:
			this._value = this.$parent.properties[this.name].loadReference(_, this.$parent);

			if (!this._value) this._value = {
				"$title": ""
			};
			else if (!this._value.$title) this._value.$title = "";

			if (this._value) {
				var _this = this;
				Object.keys(_this._value).forEach_(_, function(_, attribute) {
					var value = _this._value[attribute];
					if (/^\$(description|title|symbol)$/.test(attribute))
						_this.$attributes.setResource(_, attribute, value);
					else
						_this.setAttribute(attribute, value);
				});
			}
		}
		return this._value || {};
	},
	_set: function(_, value, raw) {
		//dbg:console.log("InstanceReference set:",value);
		var keyParams = this.property.keyParams;
		var refKeys = Object.keys(value).filter(function(key) {
			return key[0] !== '$';
		});
		for (var i = 0; i < keyParams.length; i++) {
			//dbg:console.error("InstanceReference set parent."+keyParams[i].FLDCLA+" with:"+value[refKeys[i]]);
			this.$parent.set(_, keyParams[i].FLDCLA, value[refKeys[i]]);
		}

	},
	fromRecord: function(_, record, colnIndex) {},
	toRecord: function(record) {},
	clone: function(parent) {},
	revertTo: function() {},
	deleteDiagnoses: function(_) {},
});

attributes.addAttributes(InstanceReference.prototype);
exports.InstanceReference = InstanceReference;
exports.newInstanceReference = function(propery) {
	return function(_, parent) {
		return new InstanceReference(parent, propery);
	};
};