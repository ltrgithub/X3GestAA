import { _ } from 'streamline-runtime';
const glob = require('streamline/lib/globals');
import * as ez from 'ez-streams';
import { SlotLob } from './slotLob';
import * as tblbfile from '../../engine/runtime/tblbfile';
import * as constants from '../constants';
import { Property } from '../meta/property';

export class SlotBlob extends SlotLob {
	table: string; // ??

	constructor(parent: any, property: Property) {
		super(parent, property);
	}

	set(_: _,  value: any, raw?: boolean) {
		if (value !== undefined && typeof value === 'string') {
			//dbg:console.log(this.name+" =>Blbfile");
			value = tblbfile.fromBase64(value);
		}
		super.set(_, value, raw);
		this.$wasUpdated = true;
	}

	get(_: _,  raw?: boolean) {
		if (raw) return this._value = this._value || new tblbfile.Blbfile();

		if (!this._value) {
			var data = this.read(_);
			this._value = data || new tblbfile.Blbfile();
		}
		return super.get(_, raw);
	}

	read(_: _) {
		if (this.property.type.readMedia) {
			return new tblbfile.Blbfile(this.property.type.readMedia(_, this));
		}
		return this.readRecord(_, "ABLOB", "BLOB");
	}

	insertSlotExtended(_: _) {
		if (!this.$wasUpdated || this.property.data.LOBTAB !== "ABLOB") return constants.CST_AOK;
		const keys = this.getKeys(_);

		return this.updateRecord(_, "ABLOB", "BLOB", {
			CODBLB: keys['CODBLB'],
			IDENT1: keys['IDENT1'],
			IDENT2: keys['IDENT2'],
			IDENT3: keys['IDENT3'],
			NAMBLB: ' ',
			TYPBLB: 0,
			CNTTYP: ' '
		}, ez.devices.buffer.reader);
	}

	updateSlotExtended(_: _) {
		return this.insertSlotExtended(_);
	}

	deleteSlotExtended(_: _) {
		const param = this.$parent.supervisor.sqlDriver.param;
		const keys = this.getKeys(_);
		//dbg:console.log("deleteLob name:"+slot.name+" keys:",keys);

		const params = [keys['CODBLB'], keys['IDENT1'], keys['IDENT'], keys['IDENT3']];

		var i = 0;
		const sql = "delete From " + this.table + " Where" + " CODBLB_0=" + param(i++) + " and IDENT1_0=" + param(i++) + " and IDENT2_0=" + param(i++) + " and IDENT3_0=" + param(i++);

		return this.$parent.supervisor.executeSql(_, sql, params);
	}
}

;

