import { _ } from 'streamline-runtime';
const util = require('util');
import { Record } from '../../engine/drivers/types';
import * as types from '../../engine/runtime/types';
import { Slot } from './slot';
import { Property } from '../meta/property';
import { Instance } from './instance';
import * as constants from '../constants';
import * as mapping from '../mapping';

export class SlotInstance extends Slot {
	instance: Instance;
	prop: Property;

	constructor(parent: any, property: Property) {
		super(parent, property);
		this.instance = null;
		this.prop = property;
	}

	initFromParent(_: _,  parent: any) {
		const property = this.prop;
		const instance = property.supervisor.new(_, 'Instance', property.collection.class, parent).afterCreate(_);

		instance.collection = property.collection;
		if (property.collection) instance.initMaps(_, property.collection, parent);
		instance.proName = property.name;
		instance.proJsName = property.jsName;
		this.instance = instance;
	}

	get(_: _,  raw?: boolean) {
		const instance = this.instance;
		if (instance.$lazyLoading) {
			instance.class.loadInstances(_, instance.$parent, //
				mapping.getIndex(_, instance.supervisor, instance.class.data.dataChildren.ownMapping), instance.relKeys, 1, //
				(_, record) => {
				instance.record = record;
				return instance;
			}).toArray(_);
			instance.afterCreate(_, instance.record);
			instance.$lazyLoading = false;
		}
		return instance;
	}

	oldValue(_: _) {
		throw new Error("invalid oldValue call");
	}

	set(_: _,  value: any, raw?: boolean) {
		throw new Error("invalid set call");
	}

	deleteDiagnoses(_: _) {
		this.instance.deleteDiagnoses(_);
	}

	getDiagnoses(_: _) {
		return this.instance.getDiagnoses(_);
	}

	addDiagnose(_: _,  severity: number, message: string, category: number) {
		return this.instance.addDiagnose(_, severity, message, category);
	}

	onMapChange(_: _,  property: string, value: any) {
		return this.instance.onMapChange(_, property, value);
	}

	controlFormat(_: _) {
		return constants.CST_AOK;
	}

	fromRecord(_: _,  record: Record, colnIndex: number) {
		return this.instance.fromRecord(_, record, colnIndex);
	}
}