import { _ } from 'streamline-runtime';
const glob = require('streamline/lib/globals');
import { Record } from '../../engine/drivers/types';
import * as types from '../../engine/runtime/types';
import * as util from '../util';
import { Property } from '../meta/property';
import { Slot } from './slot';

export class SlotAtextra extends Slot {
	$wasRead: boolean;
	$wasUpdated: boolean;
	_atextra: any;

	constructor(parent: any, property: Property) {
		super(parent, property);
	}

	get(_: _,  raw?: boolean) {
		if (this.property && this.property.data && this._value === undefined) {
			this._value = this.property.loadAtextra(_, this.$parent);
			this.$wasRead = true;
		}
		return super.get(_, raw);
	}

	set(_: _,  value: string, raw?: boolean) {
		super.set(_, value, raw);
		this.$wasUpdated = this.$wasRead && value !== this._value || true;
	}

	fromRecord(_: _,  record: Record, colnIndex: number) {
		this._value = undefined;
	}

	clone(parent: any) {
		// TODO: investigate because super.clone does not instantiate in the correct class
		const to = super.clone(parent);

		if (this._atextra) {
			util.any(to)._atextra = Object.keys(this._atextra).reduce((r, lan) => {
				r[lan] = this._atextra[lan];
				return r;
			}, util.any({}));
		}
		return to;
	}

	insertSlot(_: _) {
		this.$wasUpdated && this.property.updateAtextra(_, this.$parent, this._value);

		if (this._atextra) {
			Object.keys(this._atextra).forEach_(_, (_, lan) => {
				this.property.updateAtextra(_, this.$parent, this._atextra[lan], lan);
			});
			this._atextra = undefined;
		}
	}
	updateSlot(_: _) {
		return this.insertSlot(_);
	}

	deleteSlot(_: _) {
		return this.property.deleteAtextra(_, this.$parent);
	}

	getAtextra(_: _,  lan: string) {
		if (this._atextra && this._atextra[lan]) return this._atextra[lan];

		this._atextra = this._atextra || {};
		return this._atextra[lan] = lan === glob.context.x3session.actx.$LAN(_) ? this.get(_) : this.property.getAtextra(_, this.$parent, lan);
	}

	setAtextra(_: _,  text: string, lan: string) {
		// Store it for later used (update!)
		this._atextra = this._atextra || {};
		this._atextra[lan] = text;
		if (lan === glob.context.x3session.actx.$LAN(_)) {
			this.set(_, text);
		}
	}
}

export function newSlotAtextra(property: Property) { return ((parent: any) => new SlotAtextra(parent, property)); }
