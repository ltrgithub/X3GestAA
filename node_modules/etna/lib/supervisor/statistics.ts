"use strict";
/*
http://localhost:8124/sdata/x3/erp/etnaOracle/STATS('DOM')?representation=STATS~DOM.$cube
*/

const glob = require('streamline/lib/globals');
const util = require("etna/lib/supervisor/util");
const HttpError = util.HttpError;
const bcd = require("etna/lib/engine/runtime/bcd");
const Clbfile = require('etna/lib/engine/runtime/tclbfile').Clbfile;
const runtime = require("etna/lib/engine/runtime/runtime");
const ASYR = require("etna/lib/supervisor/builtins/ASYR");
const ASYRSND = require("etna/lib/supervisor/builtins/ASYRSND");
const ASYRRCV = require("etna/lib/supervisor/builtins/ASYRRCV");
const tracerJs = require('syracuse-core').getTracer("etna.supervisor");

function loadScript(_, script) {
	try {
		var mod = runtime.requireScript(_, "WMSTS" + script);
		mod.$4gl = true;
		return mod;
	} catch (e) {
		throw new HttpError(404, "statistic not found: " + script);
	}
}

exports.proto = function (_, httpContext, script, facet) {
	const mod = loadScript(_, script);
	const psyr = new ASYR.Constructor(httpContext);
	const args = {
		ACTX: {
			type: "AY",
			value: glob.context.x3session.actx
		},
		PSYR: {
			type: "AY",
			value: psyr
		},
		WCLOB: {
			type: "AT",
			value: new Clbfile("")
		},
		TIME_UPD: {
			type: "AN",
			value: bcd.fromDouble(0)
		},
		LEVEL_NUM: {
			type: "BS",
			value: 0
		},
		TYPE_REPRES: {
			type: "BS",
			value: "$query"
		}
	};

	runtime.executeProg(_, mod, "PROTO_JSON", args);
	return args.WCLOB.value.x3ToString();
};

exports.query = function (_, httpContext, script, query) {
	const mod = loadScript(_, script);
	const asnd = new ASYRSND.Constructor(httpContext);
	const arcv = new ASYRRCV.Constructor(httpContext.superv, httpContext.qs);
	const args = {
		ASND: {
			type: "LY",
			value: asnd
		},
		ARCV: {
			type: "LY",
			value: arcv
		}
	};

	runtime.executeProg(_, mod, "$GET", args);
	tracerJs.debug && tracerJs.debug(args.ASND.value.DATA);
	return args.ASND.value.DATA.toString("utf8");
};