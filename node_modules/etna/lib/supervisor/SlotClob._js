"use strict";

var glob = require('streamline/lib/globals');
var util = require('util');
var tdate = require('etna/lib/engine/runtime/tdate');
var tdatetime = require('etna/lib/engine/runtime/tdatetime');
var tuuid = require('etna/lib/engine/runtime/tuuid');
var Clbfile = require('etna/lib/engine/runtime/tclbfile').Clbfile;
var SlotLob = require("etna/lib/supervisor/slotlob").SlotLob;

class SlotClob extends SlotLob {
	constructor(parent, property) {
		super(parent, property);
	}

	_set(_, value, raw) {
		if (value !== undefined && value instanceof Buffer) {
			value = new Clbfile(value.toString());
		}
		return super._set(_, value, raw);
	}

	_get(_,raw) {
		if(raw) return "";// For resource.toJson  
		
		if(!this._value) {
			var data = this.read(_);
			this._value = (typeof data === 'string') ? new Clbfile(data) : data;
		}
		return super._get(_,raw);
	}

	read(_) {
		if(this.property.type.readMedia) {
			var data = this.property.type.readMedia(_, this);
			this._value =  (typeof data === 'string') ? new Clbfile(data) : data;
			return this._value;
		}

		if(this.property.data.LOBTAB !== "ACLOB") return;
		var keys = this.getKeys(_);
		var i = 0;
		var param = this.$parent.supervisor.sqlDriver.param;
		var rs = this.$parent.supervisor.sqlReader(_, "select CLOB_0 From ACLOB Where " +
				Object.keys(keys).map((p) => { return p+'_0='+ param(i++);}).join(' and '), 
				Object.keys(keys).map((p) => { return keys[p];			 })).toArray(_);

		return (rs.length) ? this.property.type.fromSql(_, rs[0]['CLOB']) : undefined; 
	} 


	insertSlotExtended(_) {
		if(this.property.data.LOBTAB !== "ACLOB") return constants.CST_AOK;

		var actx = glob.context.x3session.actx;
		var keys = this.getKeys(_);
		var record = {
			CODBLB:keys.CODBLB,
			IDENT1:keys.IDENT1,
			IDENT2:keys.IDENT2,
			IDENT3:keys.IDENT3,
			NAMBLB:' ',
			TYPDOC:' ',
			CNTTYP:' ',
			CREUSR:actx.$USER(_),
			CREDAT:tdate.today(),
			UPDUSR:actx.$USER(_),
			CREDATTIM:tdatetime.now(),
			UPDDATTIM:tdatetime.now(),
			AUUID:tuuid.generate(),
			CLOB:this._value
		}
		var param = this.$parent.supervisor.sqlDriver.param;

		// Does the clob exist ?
		var i = 0;
		var rs = this.$parent.supervisor.sqlReader(_, "select "+Object.keys(record).map((p) => {return p+'_0';}).join(',')+" From ACLOB Where " +
				Object.keys(record).slice(0,4).map( (p) => { return p+'_0='+param(i++);}).join(" and "),
				Object.keys(record).slice(0,4).map( (p) => { return record[p];		  })).toArray(_);
	
		if(!rs.length) {
			i =0;
			var sql = "insert into ACLOB (" + Object.keys(record).map((p) => {return p+'_0';}).join(',') + ") values (" + Object.keys(record).map( (p) => {
				return param(i++);
			}).join(',') + ")";
			return this.$parent.supervisor.executeSql(_, sql, Object.keys(record).map( (p) => { return record[p];}) );
		}
		// Update record with data stored in the database :
		Object.keys(record).forEach((p) => {if(rs[0][p]) record[p] = rs[0][p];});
		record.CLOB = this._value;
		record.UPDUSR = actx.$USER(_);
		record.UPDDATTIM = tdatetime.now();

		var i = 0;

		var values = Object.keys(record).slice(4).map( (p) => { return record[p];});
		values = values.concat(Object.keys(record).slice(0,4).map( (p) => { return record[p];}));

		var sql = "update ACLOB SET "+ Object.keys(record).slice(4).map((p) => p+'_0='+param(i++)).join(',') +" where " + 
					 Object.keys(record).slice(0,4).map((p) => p+'_0='+param(i++)).join(" and ");
		return this.$parent.supervisor.executeSql(_, sql, values);
	}

	updateSlotExtended(_) { 
		return this.insertSlotExtended(_);

	}

	deleteSlotExtended(_) { 
		if(this.property.data.LOBTAB !== "ACLOB") return;

		var param = this.$parent.supervisor.sqlDriver.param;
		var keys = this.getKeys(_);
		var params = [keys.CODBLB, keys.IDENT1, keys.IDENT2, keys.IDENT3];
		var i = 0;
		var sql = "delete From ACLOB Where" +
			" CODBLB_0=" + param(i++) + " and IDENT1_0=" + param(i++) + " and IDENT2_0=" + param(i++) + " and IDENT3_0=" + param(i++);
		return this.$parent.supervisor.executeSql(_, sql, params);
	}

}

exports.SlotClob = SlotClob;

exports.newSlotClob = function(property) {
	return function(_, parent) {
		return new SlotClob(parent, property);
	};
};
