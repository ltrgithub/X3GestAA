"use strict";
exports.$exported = true;

var jsRunner = require('syracuse-x3/lib/jsRunner');
var glob = require('streamline/lib/globals');
var tracerJs = require('syracuse-core').getTracer("etna.supervisor");

function exexJs(_, actx, fct, args) {
	var data = {
		"function": fct,
		"mode": "wait",
		"args": args,
		"callbackIndex": 0,
		"returning_code": 0
	};
	return jsRunner.execute(_, "syracuse-sdata/lib/asyncTrack", data).body;
}

exports.ASYNCTRACK = function(_, actx, phase, detail, progress) {
	exexJs(_, actx, "asyncTrack", [phase, detail, progress]);
};

exports.ADDDIAGNOSE = function(_, actx, message, severity) {
	switch (severity) {
		case 0:
		case 1:
			severity = "success";
			break;
		case 2:
			severity = "info";
			break;
		default:
			severity = "error";
			break;
	}
	exexJs(_, actx, "addDiagnose", [severity, message]);
};

exports.ABORTREQUESTED = function(_, actx) {
	var res = exexJs(_, actx, "abortRequested");
	return (res == "true") ? 1 : 0;
};

exports.ADDLINKDOWNLOAD = function(_, actx, type, filename) {
	var superv = glob.context.x3frame.context.superv;
	var typepro = superv.load(_, 'Typepro', type);

	var link = {
		$title: "Download",
		$filename: filename,
		$type: typepro ? typepro.data.PROTYP : "",
	};

	var match = filename.match(/\[(\w+)\]\/(.*)/);
	if (match) {
		var keys = ["C_AVOLFIL", "CONTENTS", match[1], match[2]];
		link.$url = superv.baseUrl + "/BDOC('" + keys.join("~%C2%A8~") + "')";
		exexJs(_, actx, "addLink", ["$download", link]);
	}
};