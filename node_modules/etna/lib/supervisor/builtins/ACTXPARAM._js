"use strict";

const date = require('etna/lib/engine/runtime/tdate');
const X3Error = require("etna/lib/engine/runtime/errors").X3Error;
const glob = require('streamline/lib/globals');
const utilDriver = require("etna/lib/engine/drivers/util");
const util = require("etna/lib/supervisor/util");
const Helper = util.Helper;
const traceSup = require('syracuse-core').getTracer("etna.supervisor");
const constants = require('etna/lib/supervisor/constants');
const tdate = require('etna/lib/engine/runtime/tdate');
const HttpError = util.HttpError;


class ACTXPARAM extends Helper {
	constructor(superv) {
		super();
		this.supervisor = superv;
		this.$exported = true;
		this.cache = {
			levcod: {}
		};
		this.userCache = {
			parameter: {}
		};
		this.tableg = [];
		this.tabcpy = [];
		this.tabfcy = [];
	}
	init(_) {
		this.class = null;
		return this;
	}
	get(_, name) {
		switch (name) {
			case "LIST_FCY":
				var fcy = this._fcy(_);
				return [1, "", fcy, 1, fcy.length];
			case "LIST_CPY":
				var cpy = this._cpy(_);
				return [1, "", cpy, 1, cpy.length];
		}
	}
	AGETVALNUM(_, levcod, code, parameter) {
		//dbg:console.log("PARAM.AGETVALNUM:", levcod, code, parameter)
		return parseInt(this._getParam(_, levcod, code, parameter, "NUM").value);
	}
	AGETVALCHAR(_, levcod, code, parameter) {
		return this._getParam(_, levcod, code, parameter, "CHAR").value;
	}
	AGETVALDATE(_, levcod, code, parameter) {
		return this._getParam(_, levcod, code, parameter, "DATE").value;
	}
	AGETUSERVALNUM(_, parameter) {
		return parseInt(this._getParamUser(_, parameter, "NUM").value);
	}
	AGETUSERVALCHAR(_, parameter) {
		//dbg:console.log("PARAM.AGETUSERVALCHAR:"+parameter)
		return this._getParamUser(_, parameter, "CHAR").value;
	}
	AGETUSERVALDATE(_, parameter) {
		return this._getParamUser(_, parameter, "DATE").value;
	}
	jsParamValue(param) {
		var val = param.value;
		if (val == null) return val;
		switch (param.typval) {
			case 1:
				// string
				return val;
			case 2:
				// numeric
				return parseFloat(val);
			case 3:
				// date
				val = val == '00000000' ? null : tdate.parse(val, 'yyyyMMdd');
				return val;
			case 4:
				// menu
				val = parseInt(val);
				if (param.nolib === 1) return val === 2 ? true : val === 1 ? false : null;
				else {
					if (val !== (val & 0xff)) throw convertError('tiny int', val);
					return val;
				}
			default:
				throw new Error(`invalid parameter type code: ${ param.typval }`);
		}
	}
	getJsValue(_, levcod, code, parameter) {
		var param;
		if (levcod === constants.CST_ALEVUSR) param = this._getParamUser(_, parameter, "AUTO");
		else param = this._getParam(_, levcod, code, parameter, "AUTO");
		if (param == null) throw new Error(`parameter not found: ${ parameter }`);
		return this.jsParamValue(param);
	}
	_addParamUserCache(parameter, value, adopar) {
		var param = this.userCache.parameter[parameter];
		if (!param) {
			param = this.userCache.parameter[parameter] = {
				value: value,
				typval: adopar.TYPVAL,
				nolib: adopar.NOLIB
			};
		}
		return param;
	}
	_addParamCache(levcod, code, parameter, value, adopar) {
		if (!this.cache.levcod[levcod]) {
			this.cache.levcod[levcod] = {
				code: {}
			};
		}
		if (!this.cache.levcod[levcod].code[code]) {
			this.cache.levcod[levcod].code[code] = {
				parameter: {}
			};
		}
		var param = this.cache.levcod[levcod].code[code].parameter[parameter];
		if (!param) {
			param = this.cache.levcod[levcod].code[code].parameter[parameter] = {
				value: value,
				typval: adopar.TYPVAL,
				nolib: adopar.NOLIB
			};
		}
		return param;
	}
	_leg(_) {
		if (this.tableg.length > 0) return this.tableg;
		const self = this;
		const sqlDriver = self.supervisor.sqlDriver;
		const wadoval = self.supervisor.sqlReader(_, "select A.VALEUR_0 from ADOVAL A Where A.CMP_0=' ' and A.FCY_0=' ' and A.PARAM_0='DOSLEG'").toArray(_);

		if (wadoval[0] === undefined) throw new HttpError(404, "Incorrect param DOSLEG");
		self.tableg = wadoval[0].VALEUR.split("~");
		return self.tableg;
	}
	_cpy(_) {
		if (this.tabcpy.length > 0) return this.tabcpy;
		const self = this;
		const sqlDriver = self.supervisor.sqlDriver;

		self.tabcpy = self.supervisor.sqlReader(_, "select C.CPY_0 from COMPANY C").toArray(_).reduce((wcpy, cpy) => {
			wcpy.push(cpy.CPY);
			return wcpy;
		}, []);
		return self.tabcpy;
	}
	_fcy(_) {
		if (this.tabfcy.length > 0) return this.tabfcy;
		const self = this;
		const sqlDriver = self.supervisor.sqlDriver;

		self.tabfcy = self.supervisor.sqlReader(_, "select F.FCY_0 from FACILITY F").toArray(_).reduce((wfcy, fcy) => {
			wfcy.push(fcy.FCY);
			return wfcy;
		}, []);
		return self.tabfcy;
	}
	_getLegFromCpy(_, folder, cpy) {
		const sqlDriver = this.supervisor.sqlDriver;
		const param = sqlDriver.param;

		var params;
		var value = "";
		const self = this;

		params = [cpy];
		const wparam = self.supervisor.sqlReader(_, "select A.LEG_0 from COMPANY A Where A.CPY_0=" + param(0), params).toArray(_);

		if (wparam[0]) {
			value = wparam[0].LEG;
		}
		return value;
	}
	_getCpyFromSite(_, folder, site) {
		const sqlDriver = this.supervisor.sqlDriver;
		const param = sqlDriver.param;

		var params;
		var value = "";
		const self = this;

		params = [site];
		const wparam = self.supervisor.sqlReader(_, "select A.LEGCPY_0 from FACILITY A Where A.FCY_0=" + param(0), params).toArray(_);

		if (wparam[0]) {
			value = wparam[0].LEGCPY;
		}
		return value;
	}
	_getLegFromSite(_, folder, site) {
		var cpy = "";
		var leg = "";
		cpy = this._getCpyFromSite(_, folder, site);
		if (cpy !== "") {
			leg = this._getLegFromCpy(_, folder, cpy);
		}
		return leg;
	}
	_requestAdovalBase(_, levcod, code, parameter) {
		const sqlDriver = this.supervisor.sqlDriver;
		const param = sqlDriver.param;

		var params;
		var value;
		const self = this;

		params = [levcod, code, parameter];
		const wparam = self.supervisor.sqlReader(_, "select A.VALEUR_0 from ADOVAL A Where A.CMP_0=" + param(0) + " and A.FCY_0=" + param(1) + " and A.PARAM_0=" + param(2), params).toArray(_);

		if (wparam[0]) {
			value = wparam[0].VALEUR;
		}
		return value;
	}
	_getParam(_, levcod, code, parameter, action) {
		if (this.cache.levcod[levcod] !== undefined && this.cache.levcod[levcod].code[code] !== undefined && this.cache.levcod[levcod].code[code].parameter[parameter] !== undefined) {
			return this.cache.levcod[levcod].code[code].parameter[parameter];
		}
		return this._getParams(_, levcod, code, [parameter], action)[parameter];
	}
	_getParams(_, levcod, code, parameters, action) {
		if (!parameters) throw new HttpError(404, "Incorrect param");
		var values = {};
		if (this.cache.levcod[levcod] !== undefined && this.cache.levcod[levcod].code[code] !== undefined) {
			var ok = true;
			var cache = this.cache.levcod[levcod].code[code].parameter;
			values = parameters.reduce((r, p) => {
				if (cache[p] === undefined) ok = false;
				else r[p] = cache[p] ? {
					value: cache[p].value,
					typval: cache[p].typval,
					nolib: cache[p].nolib
				} : {};
				return r;
			}, {});
			if (ok) return values;
		}

		//manage CACHE

		// not found in chache , search in database		
		const sqlDriver = this.supervisor.sqlDriver;
		const param = sqlDriver.param;
		const actx = glob.context.x3session.actx;

		var value;
		const self = this;

		var leg;
		var cpy;

		// read param in ADOPAR to have the definiton
		var select = "select A.VALDEF_0,A.NIVDEF_0,A.PARAM_0,A.TYPVAL_0,A.NOLIB_0 from ADOPAR A Where A.PARAM_0";
		if (parameters.length === 1) {
			select += "=" + param(0);
		} else {
			select += " in (" + parameters.map((val, i) => param(i)).join(',') + ") order by A.PARAM_0";
		}
		//dbg:console.error("select:"+select+":",parameters);
		const wadopar = self.supervisor.sqlReader(_, select, parameters).toArray(_);

		for (var i = 0; i < wadopar.length; i++) {
			var parameter = wadopar[i].PARAM;
			if (action !== undefined) self.controlType(action, wadopar[i]);

			if (wadopar[i].NIVDEF === 4 && wadopar[i].VALDEF !== 2) throw new HttpError(400, parameter + " parameter can only be defined at User level");

			switch (levcod) {
				case 1:
					//  looking for value at "Dossier" level
					value = self._requestAdovalBase(_, " ", " ", parameter);
					break;
				case 5:
					// looking for value at "L�gislation" level
					if (code !== "" && self._leg(_).indexOf(code) < 0) throw new HttpError(404, code + " Legislation code does not exist");

					if (wadopar[i].NIVDEF === 1) {
						// case 1 : Parameter defined at "Dossier" level
						value = self._requestAdovalBase(_, " ", " ", parameter);
					} else {
						// Parameter defined at "Leg/Soc/Site/User" level
						value = self._requestAdovalBase(_, "*", code, parameter);
						if (value !== undefined) break;
						value = self._requestAdovalBase(_, " ", " ", parameter);
						break;
					}
					break;
				case 2:
					// looking for value at "Soci�t�" level
					if (code !== "" && self._cpy(_).indexOf(code) < 0) throw new HttpError(404, code + " Company code does not exist");

					if (wadopar[i].NIVDEF === 1) {
						// case 1 : Parameter defined at "Dossier" level
						value = self._requestAdovalBase(_, " ", " ", parameter);
						if (value !== undefined) break;
					} else if (wadopar[i].NIVDEF === 5) {
						//Parameter defined at "L�gislation" level						
						leg = self._getLegFromCpy(_, actx.$AFOLDER(_), code);
						if (leg !== "") {
							value = self._requestAdovalBase(_, "*", leg, parameter);
							if (value !== undefined) break;
							value = self._requestAdovalBase(_, " ", " ", parameter);
							if (value !== undefined) break;
						}
					} else {
						//case 3 : Parameter defined at "Soc/Site/User" level					
						value = self._requestAdovalBase(_, code, " ", parameter);
						if (value !== undefined) break;
						leg = self._getLegFromCpy(_, actx.$AFOLDER(_), code);
						value = self._requestAdovalBase(_, "*", leg, parameter);
						if (value !== undefined) break;
						value = self._requestAdovalBase(_, " ", " ", parameter);
						if (value !== undefined) break;
					}
					break;
				case 3:
					//looking for value at "Site" level
					if (code !== "" && self._fcy(_).indexOf(code) < 0) throw new HttpError(404, code + " Site code does not exist");

					if (wadopar[i].NIVDEF === 1) {
						// case 1 : Parameter defined at "Dossier" level
						value = self._requestAdovalBase(_, " ", " ", parameter);
						if (value !== undefined) break;
					} else if (wadopar[i] === 5) {
						// case 2Parameter defined at "L�gislation" level
						leg = self._getLegFromSite(_, actx.$AFOLDER(_), code);
						if (leg !== "") {
							value = self._requestAdovalBase(_, "*", leg, parameter);
							if (value !== undefined) break;
							value = self._requestAdovalBase(_, " ", " ", parameter);
							if (value !== undefined) break;
						}
					} else if (wadopar[i].NIVDEF === 2) {
						// case 3 : Parameter defined at "Soci�t�" level
						cpy = self._getCpyFromSite(_, actx.$AFOLDER(_), code);
						if (cpy !== "") {
							value = self._requestAdovalBase(_, cpy, " ", parameter);
							if (value !== undefined) break;
							leg = self._getLegFromCpy(_, actx.$AFOLDER(_), cpy);
							if (leg !== "") {
								value = self._requestAdovalBase(_, "*", leg, parameter);
								if (value !== undefined) break;
							}
						}
						value = self._requestAdovalBase(_, " ", " ", parameter);
						if (value !== undefined) break;
					} else {
						// case 4 : Parameter defined at "Site/User" level
						value = self._requestAdovalBase(_, " ", code, parameter);
						if (value !== undefined) break;
						cpy = self._getCpyFromSite(_, actx.$AFOLDER(_), code);
						if (cpy !== "") {
							value = self._requestAdovalBase(_, cpy, " ", parameter);
							if (value !== undefined) break;
							leg = self._getLegFromCpy(_, actx.$AFOLDER(_), code);
							if (leg !== "") {
								value = self._requestAdovalBase(_, "*", leg, parameter);
								if (value !== undefined) break;
							}
						}
						value = self._requestAdovalBase(_, " ", " ", parameter);
						if (value !== undefined) break;
					}
					break;
			}
			if (value === undefined) {
				switch (action) {
					case "CHAR":
						value = "";
						break;
					case "NUM":
						value = 0;
						break;
					case "DATE":
						value = 0;
						break;
					case "AUTO":
						switch (wadopar[i].TYPVAL) {
							case 1:
								value = '';break; // string
							case 2:
								value = 0;break; //
							case 3:
								value = 0;break; // date
							case 4:
								value = 0;break;
							default:
								throw new Error(`invalid TYPVAL: ${ wadopar[i].TYPVAL }`);
						}
						break;
					default:
						throw new Error(`invalid data type conversion: ${ action }`);
						break;
				}
			}
			traceSup.debug && traceSup.debug([parameter, levcod, code].join(',') + "=" + value);
			values[parameter] = this._addParamCache(levcod, code, parameter, value, wadopar[i]);
		}
		return values;
	}
	controlType(action, record) {
		switch (action) {
			case "CHAR":
				//1:alpha 4:local menu
				if ([1, 4].indexOf(record.TYPVAL) < 0) throw new HttpError(400, record.PARAM + " parameter is not of the right type : alpha (" + record.TYPVAL + ")");
				break;
			case "NUM":
				if (record.TYPVAL !== 2 && record.TYPVAL !== 4) throw new HttpError(400, record.PARAM + " parameter is not of the right type : numeric (" + record.TYPVAL + ")");
				break;
			case "DATE":
				if (record.TYPVAL !== 3) throw new HttpError(400, record.PARAM + " parameter is not of the right type : date (" + record.TYPVAL + ")");
				break;
		}
	}
	_getParamUser(_, parameter, action) {
		if (!parameter) throw new HttpError(404, "Incorrect param");

		//manage CACHE
		if (this.userCache.parameter[parameter]) return this.userCache.parameter[parameter];

		// not found in chache , search in database		
		const sqlDriver = this.supervisor.sqlDriver;
		const param = sqlDriver.param;
		const actx = glob.context.x3session.actx;

		var params;
		var value;
		const self = this;
		// read param in ADOPAR to have the definiton

		params = [parameter];
		const wadopar = self.supervisor.sqlReader(_, "select A.CHAPITRE_0,A.VALDEF_0,A.NIVDEF_0,A.PARAM_0,A.TYPVAL_0,A.NOLIB_0 from ADOPAR A Where A.PARAM_0=" + param(0), params).toArray(_);
		const values = {};

		if (wadopar[0] === undefined) throw new HttpError(404, `Invalid parameter ${ parameter }`);

		if (wadopar[0].NIVDEF !== 4) throw new HttpError(400, parameter + " is not defined at User level");

		self.controlType(action, wadopar[0]);

		params = [actx.$USER(_), parameter];
		var wadovalaus = self.supervisor.sqlReader(_, "select A.CODUSR_0,A.PARAM_0,A.VALEUR_0 from ADOVALAUS A Where A.CODUSR_0=" + param(0) + " and A.PARAM_0=" + param(1), params);
		wadovalaus = wadovalaus.toArray(_);
		if (wadovalaus[0] !== undefined) {
			value = wadovalaus[0].VALEUR;
			this._addParamUserCache(parameter, value, wadopar[0]);
		}

		if (wadopar[0].VALDEF === 2) {
			var profil = "";
			params = [actx.$USER(_)];
			var waus = self.supervisor.sqlReader(_, "select A.CODMET_0,A.PRFFCT_0 from AUTILIS A Where A.USR_0=" + param(0), params).toArray(_);
			if (waus[0] === undefined) throw new HttpError(404, "Incorrect user");
			profil = waus[0].PRFFCT;
			if (profil === "") {
				params = [waus[0].CODMET];
				var wame = self.supervisor.sqlReader(_, "select A.PRFFCT_0 from AMETUTI A Where A.CODMET_0=" + param(0), params).toArray(_);
				if (wame[0] === undefined) throw new HttpError(404, "Incorrect profile");
			}
			if (profil) {
				var module = 0;
				params = [wadopar[0].CHAPITRE];
				var wadi = self.supervisor.sqlReader(_, "select A.N1_0 from ATABDIV A Where A.NUMTAB_0=901 and A.CODE_0=" + param(0), params).toArray(_);
				if (wadi[0] === undefined) throw new HttpError(404, "Incorrect module");

				params = [profil];
				if (wadi[0].N1 > 0 && wadi[0].N1 <= 20) {
					var nummdl = wadi[0].N1 - 1;

					params = [profil];
					var waft = self.supervisor.sqlReader(_, "select A.FCYDEF_" + nummdl + " from AFCTFCT A Where A.PRFCOD_0=" + param(0), params).toArray(_);
					if (waft[0] !== undefined) {
						value = self._getParam(_, 3, waft[0].FCYDEF, parameter, action).value;
						if (value !== undefined) this._addParamUserCache(parameter, value, wadopar[0]);
					}
					value = self._getParam(_, 1, "", parameter, action).value;
				}
			}
		}
		return this._addParamUserCache(parameter, value, wadopar[0]);
	}
};

exports.constructor = ACTXPARAM;