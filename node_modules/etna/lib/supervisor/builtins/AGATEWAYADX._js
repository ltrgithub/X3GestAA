"use strict";
var X3SON = require("etna/lib/engine/x3son");
var util = require("etna/lib/supervisor/util");
var variables = require('etna/lib/engine/runtime/variables');
var Clbfile = require('etna/lib/engine/runtime/tclbfile').Clbfile;

var constants = require("etna/lib/supervisor/constants");

exports.constructor = util.defineClass(function(superv, body) {
	this.supervisor = superv;
	this.$exported = true;
	this.parameters = {};
	this.body = body;
}, null, {
	init: function(_) {
		this.body && this.parse(_,this.body);
		return this;
	},
	get: function(_, name) {},
	xmet: function(name) {
		return /^ASET\w*$/.test(name) ? this.xmetSetParameter : this.xmetGetParameter;
	},
	parse: function(_,body) {
		this.parameters = {};
		var strings = X3SON.parse(_, body);
		for (var i = 0; i < strings.length; i++) {
			var pro = strings[i].x3ToString();
			var value = X3SON.parse(_, strings[++i].x3ToString());
			this.parameters[pro] = value;
		}		
	},
	stringify: function(_) {
		var self = this;
		var strings = Object.keys(this.parameters).reduce_(_, function(_, r, p) {
			r.push(new Clbfile(p));
			r.push(new Clbfile(X3SON.stringify(_, self.parameters[p])));
			return r;
		}, []);
		return X3SON.stringify(_, strings);
	},

	xmetGetParameter: function(_) {
		var args = arguments.length > 0 ? Array.prototype.slice.call(arguments, 1) : [];
		var param = args[0](_);

		if (Array.isArray(this.parameters[param])) {
			// Get the callee's array 
			var arrArg = args[1](_, variables.vOperations.GET);
			// Set the array's value:
			arrArg[2] = this.parameters[param];
		} else {
			args[1](_, variables.vOperations.SET, this.parameters[param]);
		}

		return constants.CST_AOK;
	},
	xmetSetParameter: function(_) {
		var args = arguments.length > 0 ? Array.prototype.slice.call(arguments, 1) : [];
		var param = args[0](_);
		var value = args[1](_);
		this.parameters[param] = (Array.isArray(value)) ? value[2] : value;
		return constants.CST_AOK;
	},
	ARPC: function(_,script,operation) {
		var parameters = this.stringify(_);
		var result = require("syracuse-x3/lib/gateway").gateway(_,script, operation, parameters);
		console.log("ARPC:",result);
		this.parse(_,result.parameters);
	}
});