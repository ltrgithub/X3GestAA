"use strict";
var X3SON = require("etna/lib/engine/x3son");
var util = require("etna/lib/supervisor/util");
var Helper = util.Helper;
var variables = require('etna/lib/engine/runtime/variables');
var Clbfile = require('etna/lib/engine/runtime/tclbfile').Clbfile;

var constants = require("etna/lib/supervisor/constants");

class AGATEWAYADX extends Helper {
	constructor(superv, body) {
		super();
		this.supervisor = superv;
		this.$exported = true;
		this.parameters = {};
		this.body = body;
	}
	init(_) {
		this.parameters = {};
		if(this.body) {
			var strings = X3SON.parse(_, this.body);
			for (var i = 0; i < strings.length; i++) {
				var pro = strings[i].x3ToString();
				var value = X3SON.parse(_, strings[++i].x3ToString());
				this.parameters[pro] = value;
			}
		}
		return this;
	}
	get(_, name) {}
	xmet(name) {
		if (/^ASET\w*$/.test(name)) return this.xmetSetParameter;
		if (/^AGET\w*$/.test(name)) return this.xmetGetParameter;
		return this.xmetARPC;
	}
	stringify(_) {
		var self = this;
		var strings = Object.keys(this.parameters).reduce_(_, function(_, r, p) {
			r.push(new Clbfile(p));
			r.push(new Clbfile(X3SON.stringify(_, self.parameters[p])));
			return r;
		}, []);
		return X3SON.stringify(_, strings);
	}
	xmetGetParameter(_) {
		var args = arguments.length > 0 ? Array.prototype.slice.call(arguments, 1) : [];
		var param = args[0](_);

		if (Array.isArray(this.parameters[param])) {
			// Get the callee's array 
			var arrArg = args[1](_, variables.vOperations.GET);
			// Set the array's value:
			arrArg[2] = this.parameters[param];
		} else {
			args[1](_, variables.vOperations.SET, this.parameters[param]);
		}

		return constants.CST_AOK;
	}
	xmetSetParameter(_) {
		var args = arguments.length > 0 ? Array.prototype.slice.call(arguments, 1) : [];
		var param = args[0](_);
		var value = args[1](_);
		this.parameters[param] = (Array.isArray(value)) ? value[2] : value;
		return constants.CST_AOK;
	}
	xmetARPC(_) {
		var args = arguments.length > 0 ? Array.prototype.slice.call(arguments, 1) : [];
		var script = args[0](_);
		var fct    = args[1](_);
		var parameters = this.stringify(_);

		var gateway = require("syracuse-x3/lib/gateway");
		// console.log("ARPC:",script,fct,parameters);
		this.body = gateway.gateway(_,script,fct,parameters);
		this.init(_);
		return constants.CST_AOK;
	}
};

exports.constructor  = AGATEWAYADX;
