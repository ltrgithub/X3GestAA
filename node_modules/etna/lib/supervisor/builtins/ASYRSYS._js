"use strict";

exports.$exported = true;

const glob = require('streamline/lib/globals');
const constants = require("etna/lib/supervisor/constants");
const fs = require('streamline-fs');
const traceSup = require('syracuse-core').getTracer("etna.supervisor");

module.exports = {
	MACHINE: {
		params: ["DOSSIER", "MACHINE", "APPLI"],
		body(_) {
			const frame = glob.context.x3frame;
		}
	},
	// GET_OS(ACTX,MACHINE,OS)

	// EXIST(CHAINE,EXIST)
	EXIST: {
		params: ['FILE', 'EXIST'],
		body(_) {
			const frame = glob.context.x3frame;

			frame.values.EXIST = fs.exists(frame.values.FILE, _);
		}
	},
	// EXISTE_STC("""",nomap,[L]CODCLA,[L]OK)"

	// EXISTE_ADX(MACHINE,APPLI,CODTRT,OKTRT)
	EXISTE_ADX: {
		params: ['MACHINE', 'APPLI', 'CODTRT', 'OKTRT'],
		body(_) {
			const frame = glob.context.x3frame;

			traceSup.debug && traceSup.debug("ASYRSYS.EXISTE_ADX:" + [frame.values.MACHINE, frame.values.APPLI, frame.values.CODTRT, frame.values.OKTRT].join(','));
			frame.values.OKTRT = 1;
			traceSup.debug && traceSup.debug("EXISTE_ADX return:", frame.values.OK);
		}
	},
	// _EFFACE(FICANU,STAT)
	// _GETFULLPATH(IN_REPERT)
	// _COPIE(FILE_FROM,FILE_TO,ERROR)
	// _MOVE(FICNEW,FICSRC,STAT)
	// COPYFILE(ILE_FROM,FILE_TO,MESSAGE)
	// DELETEFILE(FILE,MESSAGE)
	DELETEFILE: {
		params: ['FILE', 'MESSAGE'],
		body(_) {
			const frame = glob.context.x3frame;

			frame.result = constants.CST_AOK;

			traceSup.error && traceSup.error("DELETEFILE:", frame.values.FILE.x3ToString());
			try {
				fs.unlink(frame.values.FILE.x3ToString(), _);
			} catch (e) {
				traceSup.error && traceSup.error("exception in DELETEFILE:", e.message);
			}
			return constants.CST_AOK;
		}
	}
};