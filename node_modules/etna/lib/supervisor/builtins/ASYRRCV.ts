import { _ } from 'streamline-runtime';
import * as util from '../../supervisor/util';
const Helper = util.Helper;

function Collection(name) {
	this.name = name;
	this.collection = true;
	this.values = [];
	this.add = function (value) {
		this.values.push(value);
	};
	this.index = function (_: _,  offset) {
		if (offset > this.values.length) throw new X3Error(8, "Index incorrect ARCV." + name + ":" + JSON.stringify(this.values));
		return this.values[offset - 1];
	};
	this.x3Maxtab = function () {
		return this.values.length;
	};
}

export class ASYRRCV extends Helper {
	constructor(superv, qs) {
		super();
		this.supervisor = superv;
		this.$exported = true;
		this.qs = qs;
		this.PARAMVAL = new Collection("PARAMVAL");
		this.PARAMCOD = new Collection("PARAMCOD");
		Object.keys(qs).forEach(key => {
			this.PARAMCOD.add(key);
			this.PARAMVAL.add(qs[key]);
		});
	}
	get(_: _,  name) {
		switch (name) {
			case "PARAMVAL":
				return this.PARAMVAL;
			case "PARAMCOD":
				return this.PARAMCOD;
		}
	}
	paramval(_: _,  paramcod) {
		for (var i = 1, max = this.PARAMCOD.x3Maxtab(); i <= max; i++) {
			if (this.PARAMCOD.index(_, i) === paramcod) return this.PARAMVAL.index(_, i);
		}
		return "";
	}
};
