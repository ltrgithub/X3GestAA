import { _ } from 'streamline-runtime';
import { Record } from '../../engine/drivers/types';
import * as types from '../../engine/runtime/types';
import * as ez from 'ez-streams';
const glob = require('streamline/lib/globals');
import * as activ from '../meta/activ';
import { Resource } from '../dyn/types';

exports.$EVENTS = function (_: _,  action: string, resource: Resource) {
	switch (action) {
		case "AQUERY_OPEN":
			return AQUERY_OPEN(_);
		case "AQUERY_TRANS_AFTER":
			return AQUERY_TRANS_AFTER(_, resource);
		case "AQUERY_CLOSE":
			return AQUERY_CLOSE(_);
	}
};

function AQUERY_OPEN(_: _) {
	//dbg:console.log("AQUERY_OPEN");
	const session = glob.context.x3session;
	const superv = glob.context.x3frame.context.superv;

	session.$queryCtx = superv.mongoStore.collection("ASHW", _).find({
		DEFREP: 2
	}).toArray(_);
}

function AQUERY_TRANS_AFTER(_: _,  resource: Resource) {
	const frame = glob.context.x3frame;
	const session = glob.context.x3session;
	const superv = frame.context.superv;

	var astatus = superv.constants.CST_AERROR;
	const instance = resource.get(_, "CLA");
	const codact = instance.get(_, "CODACT");

	if (instance.get(_, "TYPCLA") !== 2 || codact && activ.getActiv(_, superv, codact) <= 0) {
		instance.set(_, "FLGSEARCH", 1);
	} else if (instance.get(_, "FLGSEARCH") === 2) {
		var rs = ez.devices.generic.empty.reader.transform(function (_: _,  reader: ez.Reader<void>, writer: ez.Writer<Record>) {
			session.$queryCtx.forEach_(_, (_: _, record: Record) => {
				writer.write(_, record);
			});
		}).filter({
			CODCLA: instance.get(_, "CODCLA")
		}).filter((_, record) => true).toArray(_);
			//record.ENAFAC && record.ENAFAC[0] === 2)
		if (rs.length) astatus = superv.constants.CST_AOK;
	}
	return astatus;
}

function AQUERY_CLOSE(_: _) {
	//dbg:console.log("AQUERY_CLOSE");
	const session = glob.context.x3session;

	session.$queryCtx = undefined;
}