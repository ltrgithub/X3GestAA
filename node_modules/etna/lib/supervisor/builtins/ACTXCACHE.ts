import { _ } from 'streamline-runtime';
import * as util from '../../supervisor/util';
import { types as coreTypes }  from 'syracuse-core';
const Helper = util.Helper;
import * as constants from '../../supervisor/constants';
import * as variables from '../../engine/runtime/variables';
import * as bcd from '../../engine/runtime/bcd';
import { Supervisor } from '../../supervisor/supervisor';
import { Class } from '../../supervisor/meta/class';

export class ACTXCACHE extends Helper {
	supervisor: Supervisor;
	$exported: boolean;
	cache: any;
	constructor(superv: Supervisor) {
		super();
		this.supervisor = superv;
		this.$exported = true;
		this.cache = {};
	}
	init(_: _) {
		this.class = null;
		return this;
	}
	get(_: _,  name: string) {
		if (!this.cache[name]) {
			var clas = this.cache[name] = this.supervisor.load(_, 'Class', name);
			clas.parent = this;
		}
		return this.cache[name];
	}
};

function getInstance(_: _,  clas: Class, key: string) {
	const cache = clas.parent.cache[clas.name];

	if (cache[key] === undefined) {
		var instance = clas.createInstance(_);
		var status = instance.read(_, [key]);
		if (status !== constants.CST_AERROR) {
			cache[key] = instance;
		} else {
			cache[key] = null;
		}
	}
	return cache[key];
}

exports.getInstance = getInstance;

function getProp(_: _,  clas: Class, key: string, prop: string, type: string) {
	const instance = getInstance(_, clas, key);
	return instance ? instance.get(_, prop) : variables.types[type].default;
};

export const cacheMethods = {
	AGETVALNUM(_: _,  key: string, prop: string): number {
		return getProp(_, this, key, prop, 'I');
	},
	AGETVALDAT(_: _,  key: string, prop: string): coreTypes.date.DateValue {
		return getProp(_, this, key, prop, 'D');
	},
	AGETVALDEC(_: _,  key: string, prop: string): bcd.BCD {
		return getProp(_, this, key, prop, 'N');
	},
	AGETVALCHAR(_: _,  key: string, prop: string): string {
		return getProp(_, this, key, prop, 'S');
	}
};