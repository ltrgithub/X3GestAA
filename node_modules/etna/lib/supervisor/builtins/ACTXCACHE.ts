"use strict";

const util = require("etna/lib/supervisor/util");
const Helper = util.Helper;
const constants = require("etna/lib/supervisor/constants");
const variables = require('etna/lib/engine/runtime/variables');

class ACTXCACHE extends Helper {
	constructor(superv) {
		super();
		this.supervisor = superv;
		this.$exported = true;
		this.cache = {};
	}
	init(_) {
		this.class = null;
		return this;
	}
	get(_, name) {
		if (!this.cache[name]) {
			var clas = this.cache[name] = this.supervisor.load(_, 'Class', name);
			clas.parent = this;
		}
		return this.cache[name];
	}
};

exports.Constructor = ACTXCACHE;

function getInstance(_, clas, key) {
	const cache = clas.parent.cache[clas.name];

	if (cache[key] === undefined) {
		var instance = clas.createInstance(_);
		var status = instance.read(_, [key]);
		if (status !== constants.CST_AERROR) {
			cache[key] = instance;
		} else {
			cache[key] = null;
		}
	}
	return cache[key];
}

exports.getInstance = getInstance;

function getProp(_, clas, key, prop, type) {
	const instance = getInstance(_, clas, key);
	return instance ? instance.get(_, prop) : variables.types[type].default;
};

export const cacheMethods = {
	AGETVALNUM(_, key, prop) {
		return getProp(_, this, key, prop, 'I');
	},
	AGETVALDAT(_, key, prop) {
		return getProp(_, this, key, prop, 'D');
	},
	AGETVALDEC(_, key, prop) {
		return getProp(_, this, key, prop, 'N');
	},
	AGETVALCHAR(_, key, prop) {
		return getProp(_, this, key, prop, 'S');
	}
};