"use strict";
var ez = require("ez-streams");
var glob = require('streamline/lib/globals');
var activ = require("etna/lib/supervisor/meta/activ");

exports.$EVENTS = function(_, action, resource) {
	switch (action) {
		case "AQUERY_OPEN":
			return AQUERY_OPEN(_, resource);
		case "AQUERY_TRANS_AFTER":
			return AQUERY_TRANS_AFTER(_, resource);
		case "AQUERY_CLOSE":
			return AQUERY_CLOSE(_, resource);
	}
};

function AQUERY_OPEN(_) {
	//dbg:console.log("AQUERY_OPEN");
	var session = glob.context.x3session;
	var superv = glob.context.x3frame.context.superv;
	session.$queryCtx = superv.mongoStore.collection("ASHW", _).find({
		DEFREP: 2
	}).toArray(_);
}

function AQUERY_TRANS_AFTER(_, resource) {
	var frame = glob.context.x3frame;
	var session = glob.context.x3session;
	var superv = frame.context.superv;
	var astatus = superv.constants.CST_AERROR;
	var instance = resource.get(_, "CLA");
	var codact = instance.get(_, "CODACT");
	if ((instance.get(_, "TYPCLA") !== 2) || (codact && activ.getActiv(_, superv, codact) <= 0)) {
		instance.set(_, "FLGSEARCH", 1);
	} else if (instance.get(_, "FLGSEARCH") === 2) {
		var rs = ez.devices.generic.empty.reader.transform(function(_, reader, writer) {
			session.$queryCtx.forEach_(_, function(_, record) {
				writer.write(_, record);
			});
		}).filter({
			CODCLA: instance.get(_, "CODCLA")
		})
			.filter(function(_, record) {
				return true;
				(record.ENAFAC && record.ENAFAC[0] === 2);
			}).toArray(_);
		if (rs.length) astatus = superv.constants.CST_AOK;
	}
	return astatus;
}

function AQUERY_CLOSE(_) {
	//dbg:console.log("AQUERY_CLOSE");
	var session = glob.context.x3session;
	session.$queryCtx = undefined;
}