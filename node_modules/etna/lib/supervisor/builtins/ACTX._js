"use strict";
const glob = require('streamline/lib/globals');
const flows = require('streamline-runtime').flows;

const util = require("etna/lib/supervisor/util");
const Slot = require("etna/lib/supervisor/slot").Slot;
const attributes = require("etna/lib/supervisor/attributes");
const X3Error = require("etna/lib/engine/runtime/errors").X3Error;
const ACTXCACHE = require("etna/lib/supervisor/builtins/ACTXCACHE").constructor;
const ACTXPARAM = require("etna/lib/supervisor/builtins/ACTXPARAM").constructor;
const AVOID = require("etna/lib/supervisor/builtins/AVOID").constructor;

const variables = require('etna/lib/engine/runtime/variables');
const system = require('etna/lib/engine/runtime/system');
const X3Rights = require("etna/lib/supervisor/X3Rights").X3Rights;
const tracerJs = require('syracuse-core').getTracer("etna.supervisor");
const constants = require("etna/lib/supervisor/constants");

const Helper = util.Helper;


// Store context ACTX per session in glob 
// Use cache of sessions

exports.init = function(_, session, superv) {
	glob.context.session = glob.context.session || {
		// for unit tests
		userName: "AQCORE",
		locale: "fr-FR",
	};
	glob.context.session.etnaContexts = glob.context.session.etnaContexts || {};
	var x3Session = glob.context.session.etnaContexts[superv.endpointName];
	if (!x3Session) {
		glob.context.session.etnaContexts[superv.endpointName] = x3Session = {
			dbConnection: null,
			supervisor: superv,
			funnel: flows.funnel(1),
		}
	}
	glob.context.x3session = x3Session;

	// Initialize glob.context.x3frame
	variables.initStack(superv);
	x3Session.funnel(_, _ => {
		if (!x3Session.actx) {
			x3Session.actx = new ACTX(superv).init(_,session.userName, session.locale);
		} else {
			x3Session.actx.$LANISO(_, session.locale);
		}
	});
	x3Session.actx.initSession(_);		
}

class SlotBuiltIn extends Slot {
	constructor(parent, fct) {
		super(parent,null);
		this.fct = fct;
	}

	get(_) {
		return this.$parent[this.fct](_);
	}

	set(_, value) {
		if (this.getAttribute("$isReadOnly")) {
			throw new X3Error(147, (this.name ? this.name : '') + " is readonly");
		}

		return this.$parent[this.fct](_,value);
	}
}

class SlotActxProperty extends Slot {
	constructor(parent) {
		super(parent,null);
		this.value = null;;
	}

	get(_) {
		return this.value;
	}

	set(_, value) {
		if (this.getAttribute("$isReadOnly")) {
			throw new X3Error(147, (this.name ? this.name : '') + " is readonly");
		}
		return this.value = value;
	}
}

class SlotChapter extends Slot {
	constructor(parent, chapter) {
		super(parent,null);
		this.chapter = chapter;
	}

	get(_) {
		return this.chapter;
	}

	set(_, value) {
		throw new X3Error(147, (this.name ? this.name : '') + " is readonly");
	}
}



class Chapter extends Helper {
	constructor(superv , parent ,name, builtinProperties) {
		super();
		this.supervisor = superv;
		this.parent = parent;
		this.$name = name;
		this.builtinProperties = builtinProperties || [];
		this.$exported = true;
		this.isContext = true;
		this.slots = {};
	}
	init(_) {
		return this;
	}

	// Lazy loading of slots:
	slot(_, name) {
		//dbg:console.log("Chapter.slot("+name+") builtinProperties:"+this.builtinProperties)
		if (this.slots[name]) return this.slots[name];
		if(name === undefined) 	throw new X3Error(6, "ACTX undefined property");

		tracerJs.debug && tracerJs.debug("loadProperty name:" + name);

		if (this.builtinProperties.indexOf(name) >= 0) {
			//dbg:console.log("loadProperty builtin:" + name);
			this.slots[name] = new SlotBuiltIn(this, "$"+name);
		} else {
			var recDb = this.supervisor.mongoStore.collection('ACONTEXT', _).find({
					CODCTX:name
				}).toArray(_)[0];

			if (recDb) {
				//dbg:console.log("ACTX => Slot:"+name);
				var wprop = {
					"FLDCLA": name,
					"CODTYP": recDb.CODTYP,
					"TYPCLA": 99,
					"LONG": recDb.LNGTYP,
				};
				var property = this.supervisor.new(_, 'Property', this, wprop);
				this.slots[name] = new SlotActxProperty(this,property);

				var dime;
				if (recDb.FORDIM && recDb.FORDIM[0]) dime = recDb.FORDIM[0];
				
				var trtini;
				if (recDb.TRTINI) trtini = recDb.TRTINI;
				if (recDb.FORINI) trtini = "this." + name + " = " + recDb.FORINI;
				if (trtini) {
					var wcript = "\n$METHODS \n";
					wcript += trtini + '\n';
					wcript += "Return";
					//wcript = "$METHODS \n this.IRS(1) = 'TOTO' \n this.IRS(2) = 'TOTA' \n Return" ;
					//console.log("wcript " + wcript);
					try {
						//dbg:console.log("ACTX loadScriptBase");
						var script = this.supervisor.loadScriptBase(_, wcript, name);
						var astatus = 0;
						var handler = script.METHODS;
						var frame = glob.context.x3frame;

						var prev = frame;
						var cx = prev.context;
						var sl = prev ? prev.stackLevel + 1 : 0;
						glob.context.x3frame = frame = {
							values: {},
							types: {},
							context: cx,
							prev: prev,
							stackLevel: sl,
							loopLevel: 0,
							loc: {
								file: module.id,
								line: 0
							}
						};
						// current sub is the prog itself
						frame.sub = frame;
						frame.dicts = [frame, cx.globals, cx.sys];
						try {
							util.declVar(frame, 'THIS', 'LY', this);
							//dbg:console.log("ACTX execute script");
							handler(_);
						} finally {
							glob.context.x3frame = prev;
						}
					
					} catch (e) {
						console.error("exception in script "+ script , e.stack);
					}
				}	
			} else {
				recDb = this.supervisor.mongoStore.collection('ACONTEXT', _).find({
					CHAPTER: name
				}).toArray(_)[0];
				if (recDb) throw new Error("NIY ACTX property " + name);
				this.slots[name] = new Chapter(this.supervisor , this ,name)				
			}
		}
		// Protect the property :
		this.slots[name].$isReadOnly = true;
		this.slots[name].$_isReadOnly = true;
		return this.slots[name];
	}	

	set(_, name, value) {
		tracerJs.debug && tracerJs.debug(this.$name + " set:" + name);
		this.slot(_, name).set(_,value);
	}
	get(_, name) {
		tracerJs.debug && tracerJs.debug(this.$name + " get:" + name);
		return this.slot(_, name).get(_);
	}

	setPropertyAttribute(_, property, attribut, value) {
		return this.slot(_, property).setAttribute(attribut, value);
	}

	getPropertyAttribute(_, property, attribut) {
		return this.slot(_, property).getAttribute(attribut);
	}
};
attributes.addAttributes(Chapter.prototype);

class AFOLD extends Chapter {
	constructor(parent) {
		super(parent.supervisor, parent ,"AFOLD", ["ALANGDEF","AMODULE","ALEGCUR","ALISTLEG","ANBLEG","AVERSION","AHISTO"]);
	}

	$ALANGDEF(_) {
		return this.parent.$LANDEF(_);
	}

	$AMODULE(_) {
		var flags = new Array(11).join('2');
		if (!this.amodule) {
			var actx = this.parent;
			var wadoval = actx.supervisor.sqlReader(_, "select A.PARAM_0, A.VALEUR_0 from ADOVAL A Where A.CMP_0=' ' and A.FCY_0=' ' and A.PARAM_0 in ('MODULE1','MODULE2')").toArray(_);
			var values = wadoval.reduce(function(r, record) {
				if (record.VALEUR) r[record.PARAM] = record.VALEUR;
				return r;
			}, {
				MODULE1: flags,
				MODULE2: flags
			});
			var modules = (values.MODULE1 + values.MODULE2).split('').map(function(c) {
				return parseInt(c);
			});
			this.amodule = [1, 0, modules, 1, modules.length];
		}
		return this.amodule;
	}

	$ALEGCUR(_) {
		return this.alegcur = (this.alegcur || (this.$ALISTLEG(_).length  === 1 ?this.$ALISTLEG(_)[0]:""));
	}

	$ALISTLEG(_) {
		return this.alistleg = (this.alistleg || this.supervisor.$LEGISLATIONS(_,this.parent));
	}

	$ANBLEG(_) {
		return this.$ALISTLEG(_).length;
	}

	$AVERSION(_) {
		return system.functions.VER$.fn(0);
	}

	$AHISTO(_) {
		return 1;//1 = false
	}
}

class AINTL extends Chapter {
	constructor(parent) {
		super(parent.supervisor, parent ,"AINTL", ["TWODIGITYEAR","SHORTDATE","LONGDATE","SHORTTIME","LONGTIME","SHORTDATETIM","LONGDATETIM","DECIMALSEP","THOUSANDSEP"]);
	}

	adxfmt(idx) {
		return glob.context.x3frame.context.sys.values.ADXFMT2[2][idx];
	}
	$TWODIGITYEAR(_) {
		return glob.context.x3frame.context.sys.values.ADXDCS;
	}
	$SHORTDATE(_) {
		return this.adxfmt(0);
	}
	$LONGDATE(_) {
		return this.adxfmt(1);
	}
	$SHORTTIME(_) {
		return this.adxfmt(2);
	}
	$LONGTIME(_) {
		return this.adxfmt(3);
	}
	$SHORTDATETIM(_) {
		return this.adxfmt(4);
	}
	$LONGDATETIM(_) {
		return this.adxfmt(5);
	}
	$DECIMALSEP(_) {
		return this.adxfmt(6);
	}
	$THOUSANDSEP(_) {
		return this.adxfmt(7);
	}
}


class ACTX extends Chapter {
	constructor(superv) {
		super(superv, null, "ACTX", ["ASOLUTION", "AFOLDER", "LANISO", "LAN", "LANDEF", "USER", "LOGIN"]);
		this._x3Rights = new X3Rights(superv);
		this.AGETCRITROLE = {
			params: ['ACTX', 'AOBJ', 'ABRFIC', 'ACRITROLE', 'AFLGERR'],
			body: function(_) {
				var frame = glob.context.x3frame;
				// Set ACRITROLE and mark it as variable for CallProg
				frame.types.ACRITROLE = "AS";
				frame.values.ACRITROLE = "(1=1)";
				// Set AFLGERR and mark it as variable for CallProg
				frame.types.AFLGERR = "AI";
				frame.values.AFLGERR = variables.constants.CST_ATRUE;

				frame.result = variables.constants.CST_ATRUE;
			}
		};
		// TODO FIRSTDAYWEEK:function(){ return "";},
		// TODO NBGROUPSEP:function(){ return "";},
	}

	init(_, userName, locale) {
		// set LOGIN+USER
		this.$LOGIN(_, userName);
		// set LANISO+LAN
		this.$LANISO(_, locale);

		// set system variables related to the context
		this.supervisor.initSysVar(_,this);
		return this;
	}

	initSession(_) {
		// Add supervisor system variables 
		var context = glob.context.x3frame.context;
		var sys = this.supervisor.sys;
		Object.keys(sys).forEach(p => util.declVar(context.sys, p, 'CS', sys[p].slice()));	
	
		// Add supervisor global variables 
		var globals = context.globals;
		util.declVar(globals, 'GACTX', 'VY', this);
		util.declVar(globals, 'AVOID', 'VY', new AVOID());
		util.declVar(globals, 'GADONIX', 'VI', this.$ADONIX(_));
		util.declVar(globals, 'GDIMFIC', 'VI', 250);
		util.declVar(globals, 'GPRODUIT', 'VI', -1);
		util.declVar(globals, 'GUTF8', 'VI', 0);
		util.declVar(globals, 'GADOVERS', 'VS', "L");
		util.declVar(globals, 'GSILENCE', 'VI', 0);
		util.declVar(globals, 'GSERVEUR', 'VI', 0);
		util.declVar(globals, 'GWEBSERV', 'VI', 0);
		util.declVar(globals, 'GIMPORT', 'VI', 1);// For test ?
		util.declVar(globals, 'GTRACE', 'VS', "");
		//util.declVar(globals, 'GLEGFIL', 'VS', this.$LEGFIL(_));
	}	
	
	// Lazy loading of slots:
	slot(_, name) {
		//dbg:console.log("ACTX.slot("+name+")")
		if (this.slots[name]) return this.slots[name];
		// Special treatments for ACTX :
		switch(name) {
			case "APARAM": return this.slots.APARAM = new SlotChapter(this,this.$APARAM(_));
			case "ACACHE": return this.slots.ACACHE = new SlotChapter(this,this.$ACACHE(_));
			case "AFOLD" : return this.slots.AFOLD  = new SlotChapter(this,new AFOLD(this));
			case "AINTL" : return this.slots.AINTL  = new SlotChapter(this,new AINTL(this));
		}
		return super.slot(_,name);
	}	

	getRights(_) {
		return this.rights = (this.rights || this._x3Rights.getRights(_, this.$LOGIN(_)));	
	}

	getRightsEtag(_) {
		return this._x3Rights._etag
	}

	getJsonRights(_) {
		var toJson = function(res) {
			return Object.keys(res).reduce( (r,p) => {
				if(Array.isArray(res[p])){
					r[p] = res[p].join(',');
				} else if(typeof res[p] === 'object') {
					r[p] = toJson(res[p]);
				} else {
					r[p] = res[p];
				}
				return r;
			},{});
		}
		var res = this.getRights(_);
		return res ? toJson(res) : {};
	}

	$ASOLUTION(_ , solution) {
		return this.solution = (solution !== undefined) ? solution : (this.solution  || glob.context.x3session.supervisor.solutionName);
	}

	$AFOLDER(_ , folder) {
		return this.folder = (folder !== undefined) ? folder : (this.folder  || glob.context.x3session.supervisor.folderName);
	}

	$LANISO(_, laniso) {
		if(laniso !== undefined  && (!this.laniso || this.laniso.toLowerCase() !== laniso.toLowerCase())) {
			var self = this;
			var rTablan = self.supervisor.sqlReader(_,
				"select LAN_0,LANISO_0 from TABLAN where (LOWER(LANISO_0)=" + self.supervisor.sqlDriver.param(0) + ")", [laniso.toLowerCase()]).limit(1).toArray(_);

			if (rTablan[0] !== undefined) {
				this.laniso = rTablan[0].LANISO;
				this.$LAN(_, rTablan[0].LAN);

			} else {
				var rTablan = self.supervisor.sqlReader(_,
					"select LAN_0,LANISO_0 from TABLAN where (LAN_0=" + self.supervisor.sqlDriver.param(0) + ")", [self.$LANDEF(_)]).limit(1).toArray(_);
				this.laniso = rTablan[0].LANISO;
				this.$LAN(_, rTablan[0].LAN);
			}
			glob.context.x3frame.context.sys.values.MESSNAME = this.$LAN(_);
			var newlaniso = this.$LANISO(_);

			require('streamline-locale').setCurrent(_, newlaniso);
			(function($) {
				var locales = {
					' .': /^fr.*/i,
					',.': /^en.*/i
				};

				Object.keys(locales).some(function(key) {
					if (locales[key].test(newlaniso)) {
						$.ADXSCA = $.ADXSCA.substring(0, 2) + key + $.ADXSCA.substring(4);
						return;
					}
				});
			})(glob.context.x3frame.context.sys.values);			
		} else {
			this.laniso = this.laniso || "";
		}
		return this.laniso;
	}

	$LANDEF(_, landef) {
		//dbg:console.log("ACTX.LANDEF:"+!!this.supervisor);
		if (landef !== undefined) {
			this.landef = landef;
		} else if(this.landef === undefined) {
			this.landef = this.landef || this.supervisor.$LANDEF(_);
		};
		return this.landef;
	}

	$LAN(_, lan) {
		return this.lan = (lan !== undefined) ? lan : (this.lan || this.$LANDEF(_));
	}

	$USER(_, user) {
		return this.user = (user !== undefined) ? user : (this.user || glob.context.x3frame.context.sys.values.ADXUSR.toUpperCase());
	}

	$LOGIN(_, login) {
		if(login !== undefined) {
			this.login = login;
			var rUser = this.supervisor.sqlReader(_,
				"select USR_0 ,CODMET_0, PRFFCT_0, ENAFLG_0, USRCONNECT_0 from AUTILIS where (LOGIN_0=" + this.supervisor.sqlDriver.param(0) + ")", [login.toUpperCase()]).limit(1).toArray(_);

			if (rUser[0]) {

				if (rUser[0].ENAFLG !== 2) {
					throw new util.HttpError(401, this.supervisor.loadMess(_, 130, 70));
				} else if (rUser[0].USRCONNECT !== 2) {
					throw new util.HttpError(401, this.supervisor.loadMess(_, 123, 279));
				}
				this.$USER(_, rUser[0].USR);

				//ADXUSR=LOGIN
				glob.context.x3frame.context.sys.values.ADXUSR = login;

				this.getRights(_);

			} else
				throw new util.HttpError(401, this.supervisor.loadMess(_, 130, 70));
		} else {
			this.login = this.login || glob.context.x3frame.context.sys.values.ADXUSR.toUpperCase();
		}		
		return this.login; 
	}

	$ADONIX(_) {
		return this.adonix = (this.adonix || this.supervisor.$ADONIX(_,this));
	}

	$LEGFIL(_) {
		return this.legfil = (this.legfil || this.$APARAM(_).AGETUSERVALCHAR(_, "LEGFIL") || "");
	}

	$APARAM(_) {
		return this.aparam = this.aparam || new ACTXPARAM(this.supervisor).init(_)
	}

	$ACACHE(_) {
		return this.acache = this.acache || new ACTXCACHE(this.supervisor).init(_)
	}

	//keep this name ACTX_SET_LOGIN for X3 compatibility
	ACTX_SET_LANISO(_, laniso) {
		return this.$LANISO(_, laniso)
	}

	ASETERROR(_, path, msg, severity) {
		this.diagnoses = this.diagnoses || []; 
		this.diagnoses.push(this.supervisor.new(_, 'Diagnosis', severity, path, msg));
		return severity;
	}


	ASETATTRPROP(_, property, attribut, value) {
		try {
			return this.setPropertyAttribute(_, property, attribut, value);
		} catch (ex) {
			return constants.CST_AERROR;
		}
	}
};

attributes.addAttributes(ACTX.prototype);
exports.constructor = ACTX;
