"use strict";

const glob = require('streamline-runtime').globals;
const runtime = require('etna/lib/engine/runtime/runtime');

const PREDICATES = {
	startsWith: function(str, ignoreCase) {
		return {
			$regex: "^" + str,
			$options: ignoreCase ? 'i' : undefined,
		};
	}
}
class JsContext {
	constructor(args) {
		this.args = args;
	}
	cache(_, jsClassName, key, jsPropName) {
		// load class by js name to get its 4GL name
		var clas = this.args.THIS.value.supervisor.loadClassByJsName(_, jsClassName);
		if (!clas) throw new Error('cache class not found: ' + jsClassName);
		// lookup prop by js name to get its 4GL name
		var prop = clas.membersByJsName[jsPropName];
		if (!prop) throw new Error('cache property not found: ' + jsClassName + '.' + jsPropName);

		var acache = glob.context.x3session.actx.get(_, 'ACACHE');
		var cl = acache.get(_, clas.name);
		//console.error("CACHE LOOKUP", clas.name, key, prop.name);
		return cl.AGETVALNUM(_, key, prop.name);
	}
	message(_, id, chapter, swtch) {
		return runtime.functions.MESS.fn(_, id, chapter, swtch);
	}
	error(_, text) {
		this.args.THIS.value.ASETERROR(_, this.args.CURPTH, text, 4); // CST_AERROR == 4
	}
	get predicates() {
		return PREDICATES;
	}
	get classes() {
		return this.args.THIS.value.supervisor.api.classes;
	}
}

exports.JsContext = JsContext;