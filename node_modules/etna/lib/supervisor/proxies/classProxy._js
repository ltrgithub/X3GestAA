"use strict";

require('harmony-reflect'); // to get ES6 Proxy API
const instanceProxy = require('./instanceProxy');

class ClassWrapper {
	constructor(clas) {
		this.class = clas;
	}
	create(_, values) {
		console.error("CREATING " + this.class.name);
		var instance = this.class.supervisor.new(_, 'Instance', this.class).afterCreate(_);
		var proxy = instanceProxy(instance);
		Object.keys(values).forEach_(_, function(_, name) {
			proxy[name](_, values[name]);
		});
		return proxy;
	}
	query(_) {
		return this.class.queryInstances(_).map((_, instance) => instanceProxy(instance));
	}
}

class ClassesHandler {
	constructor(supervisor) {
		this.supervisor = supervisor;
		this.getters = {};
	}
	get(name) {
		return this.getters[name] || ((_) => {
			var filter = /^[A-Z_]*$/.test(name) ? {
				CODCLA: name
			} : {
				_proxyName: name
			};
			const clas = this.supervisor.mongoStore.collection("ACLASSE", _).find(filter).toArray(_)[0];
			if (!clas) throw new Error("class not found: " + name);
			var wrapper = new ClassWrapper(this.supervisor.load(_, 'Class', clas.CODCLA));
			// create fast getter
			this.getters[name] = (_) => wrapper;
			return wrapper;
		});
	}
}

exports.create = function(supervisor) {
	return Proxy(supervisor, {
		get: function(supervisor, name) {
			//console.error("PROXY GET", name);
			supervisor.classesHandler = supervisor.classesHandler || new ClassesHandler(supervisor);
			return supervisor.classesHandler.get(name);
		},
	});
}