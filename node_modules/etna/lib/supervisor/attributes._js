"use strict";

const X3Error = require("etna/lib/engine/runtime/errors").X3Error;
const util = require("etna/lib/supervisor/util");
const variables = require('etna/lib/engine/runtime/variables');
const constants = require("etna/lib/supervisor/constants");
const extAttributesMeta = {
	$isReadOnly: false,
	$isHidden: false,
	$isDisabled: false,
	$isMandatory: false,
	$symbol: "",
	$label: "",
	$style: "",
	$index: 0,
	$scale: 0,
	$precision: 0
};
const extAttributesObject = {
	$isLoaded: false,
	$contentType: "",
	$filename: ""
};
// External attributes
// build by merging extAttributesMeta and extAttributesObject

const extAttributes = Object.keys(extAttributesObject).reduce(function (r, name) {
	r[name] = extAttributesObject[name];
	return r;
}, Object.keys(extAttributesMeta).reduce(function (r, name) {
	r[name] = extAttributesMeta[name];
	return r;
}, {}));

// Upper casse name of externale attributes

const uExtAttributes = Object.keys(extAttributes).reduce(function (r, name) {
	r[name.toUpperCase()] = name;
	return r;
}, {});

// Internal attributes

const intAttributes = {
	$_isReadOnly: false,
	$isLobFound: false,
	$isRequested: false,
	$isEditMode: false,
	$isExcluded: false,
	$isDeleted: false,
	$lazyLoading: false,
	$_rightAccess: false,
	$isSnapshotEnabled: false,
	$isSyssnapshotEnabled: false,
	$wasRead: false,
	$wasUpdated: false,
	$x3Format: "",
	$acceptedTypes: ""
};
const inheritedAttributes = ["$isReadOnly", "$isHidden", "$isExcluded", "$isDisabled", "$isSnapshotEnabled", "$isSyssnapshotEnabled"];
const resAttributes = {
	$title: "",
	$description: ""
};
const attNames = {};


var position = 0;

[extAttributes, intAttributes].forEach(function (attributes) {
	Object.keys(attributes).forEach(function (key) {
		attNames[position] = key;
		const mask = 1 << position;
		const def = attributes[key];
		const attType = typeof attributes[key];

		if (attType === "boolean") {
			attributes[key] = {
				position: position,
				get: function (name, mask, def) {
					return function (data) {
						if (!(data._fUsed & mask)) {
							if (!def) data._fAttributes &= ~mask; // clear the bit
							else data._fAttributes |= mask; // set the bit
							data._fUsed |= mask; // bit used
						}
						return !!(data._fAttributes & mask);
					};
				}(key, mask, def),
				set: function (name, mask) {
					return function (data, value) {
						if (!value) data._fAttributes &= ~mask; // clear the bit
						else data._fAttributes |= mask; // set the bit
						data._fUsed |= mask; // bit used
						return value;
					};
				}(key, mask)
			};
		} else {
			attributes[key] = {
				position: position,
				get: function (name, mask, def) {
					return function (data) {
						if (!(data._fUsed & mask)) {
							data._attributes[name] = def;
							data._fUsed |= mask; // bit used
						}
						return data._attributes[name];
					};
				}(key, mask, def),
				set: function (name, mask) {
					return function (data, value) {
						data._attributes[name] = value;
						data._fUsed |= mask; // bit used
						return true;
					};
				}(key, mask)
			};
		}
		attributes[key].attType = attType;
		position++;
	});
});

Object.keys(resAttributes).forEach(function (key) {
	attNames[position] = key;
	const mask = 1 << position;
	const def = resAttributes[key];

	resAttributes[key] = {
		position: position,
		get: function (name, mask, def) {
			return function (_, data, lan) {
				if (!(data._fUsed & mask) || lan) {
					// reload if lan is defined
					data._attributes[name] = data._resources && data._resources[name] && data._resources[name](_, lan) || def;
					data._fUsed |= mask; // bit used
				}
				return data._attributes[name];
			};
		}(key, mask, def),
		set: function (name, mask) {
			return function (_, data, value, lan) {
				data._attributes[name] = value;
				data._fUsed |= mask; // bit used
				return value;
			};
		}(key, mask)
	};
	position++;
});

function Attributes() {
	this._fUsed = 0;
	this._fAttributes = 0;
	this._attributes = {};
	this._resources = {};
	return this;
}

function clone(src, dst) {
	dst.$attributes._fUsed = src.$attributes._fUsed;
	dst.$attributes._fAttributes = src.$attributes._fAttributes;
	typeof src.$attributes._attributes === 'object' && src.$attributes._attributes && Object.keys(src.$attributes._attributes).map(function (name) {
		dst.$attributes._attributes[name] = src.$attributes._attributes[name];
	});

	typeof src.$attributes._resources === 'object' && src.$attributes._resources && Object.keys(src.$attributes._resources).map(function (name) {
		dst.$attributes._resources[name] = src.$attributes._resources[name];
	});
}

function revertTo(src, dst) {
	// clean attributes :
	dst.$attributes._fUsed = 0;
	dst.$attributes._fAttributes = 0;
	dst.$attributes._attributes = src.$attributes._attributes ? {} : null;
	dst.$attributes._resources = src.$attributes._resources ? {} : null;
	// clone attributes :
	clone(src, dst);
	// except :
	dst.$isSnapshotEnabled = false;
	dst.$isSyssnapshotEnabled = false;
}

Attributes.prototype.setResources = function (resources) {
	this._resources = resources;
};

Attributes.prototype.setAttribute = function ($attribute, value) {
	var attribute = $attribute;

	if (extAttributes[attribute]) {
		if (attribute === "$isReadOnly" && intAttributes.$_isReadOnly.get(this) === true) {
			return extAttributes[attribute].get(this);
		}
		return extAttributes[attribute].set(this, value);
	}
	// second chance for casse issue:
	attribute = uExtAttributes[attribute.toUpperCase()];

	if (attribute !== undefined) {
		return this.setAttribute(attribute, value);
	}
	throw new X3Error(147, "unknown attribute " + $attribute);
};

Attributes.prototype.getAttribute = function (attribute) {
	// direct access if the casse of the attribute is correct :
	if (extAttributes[attribute]) return extAttributes[attribute].get(this);
	// second chance :
	attribute = uExtAttributes[attribute.toUpperCase()];

	if (extAttributes[attribute]) return extAttributes[attribute].get(this);
	throw new X3Error(50, "unknown attribute " + attribute);
};

Attributes.prototype.setIntAttribute = function (attribute, value) {
	if (intAttributes[attribute]) return intAttributes[attribute].set(this, value);
};

Attributes.prototype.getIntAttribute = function (attribute) {
	if (intAttributes[attribute]) return intAttributes[attribute].get(this);
};

Attributes.prototype.setResource = function (_, resource, value, lan) {
	if (resAttributes[resource]) return resAttributes[resource].set(_, this, value, lan);
};

Attributes.prototype.getResource = function (_, resource, lan) {
	if (resAttributes[resource]) return resAttributes[resource].get(_, this, lan);
};

// getAttributes doesn't expose internal attributes :
Attributes.prototype.getAttributes = function (_) {
	const result = {};

	var fUsed = this._fUsed;
	var position = 0;
	while (fUsed) {
		if (fUsed & 1) {
			var name = attNames[position];
			if (extAttributes[name]) result[name] = extAttributes[name].get(this);
			else if (resAttributes[name]) result[name] = resAttributes[name].get(_, this);
		}
		fUsed = fUsed >> 1;
		position++;
	}
	return result;
};

Attributes.prototype.getDeltaAttributes = function (_, from) {
	const result = {};

	var fThisUsed = this._fUsed;
	var fFromUsed = from._fUsed;
	var position = 0;
	while (fThisUsed) {
		if (fThisUsed & 1) {
			var name = attNames[position];
			if ((fFromUsed & 1) === 0) {
				// The attribute wasn't set in from :
				if (extAttributes[name]) result[name] = extAttributes[name].get(this);
				else if (resAttributes[name]) result[name] = resAttributes[name].get(_, this);
			} else {
				// Compare values :
				if (extAttributes[name]) {
					var value = extAttributes[name].get(this);
					if (extAttributes[name].get(from) !== value) result[name] = value;
				} else if (resAttributes[name]) {
					var value = resAttributes[name].get(_, this);
					if (resAttributes[name].get(_, from) !== value) result[name] = value;
				}
			}
		}
		// Shift flags:
		fThisUsed = fThisUsed >> 1;
		fFromUsed = fFromUsed >> 1;
		position++;
	}
	return result;
};

function addIntAttributes(_prototype) {
	Object.defineProperty(_prototype, "$attributes", {
		get() {
			this.$$attributes = this.$$attributes || new Attributes();
			return this.$$attributes;
		},
		enumerable: false
	});

	_prototype.bindAttributes = function (parent, resources) {
		this.$parent = parent;
		this.$$attributes = undefined;
		if (resources) this.$attributes.setResources(resources);

		this.initColAttributes && this.initColAttributes();
	};

	_prototype.setAttribute = function (attribute, value) {
		return variables.x3Val(this.$attributes.setAttribute(attribute, value));
	};

	_prototype.ASETATTR = function (attribute, value) {
		try {
			return this.setAttribute(attribute, value);
		} catch (ex) {
			return constants.CST_AERROR;
		}
	};

	_prototype.getAttribute = function (attribute, $name) {
		// Let's try the first level
		var value = this.$attributes.getAttribute(attribute);

		if (!value && inheritedAttributes.indexOf(attribute) >= 0) {
			var name = $name || this.name;
			//dbg:console.log("\tname:"+name);
			if (name && this.$colAttributes && this.$colAttributes[name]) {
				//dbg:console.log("\tgetAttribute "+attribute+" 2");
				value = this.$colAttributes[name].getAttribute(attribute);
			}
			if (!value && this.$parent) {
				// Value can be equal to false!
				//dbg:console.log("\tgetAttribute "+attribute+" 3 name:"+name);
				value = this.$parent.getAttribute(attribute, name);
			}
		}
		return value;
	};

	_prototype.setResources = function (resources) {
		return this.$attributes.setResources(resources);
	};

	_prototype.getAttributes = function (_) {
		return this.$attributes.getAttributes(_);
	};
	_prototype.getDeltaAttributes = function (_, from) {
		return this.$attributes.getDeltaAttributes(_, from.$attributes);
	};

	_prototype.setIntAttribute = function (attribute, value) {
		return this.$attributes.setIntAttribute(attribute, value);
	};

	_prototype.getIntAttribute = function (attribute) {
		var value = this.$attributes.getIntAttribute(attribute);
		if (!value && this.$parent && inheritedAttributes.indexOf(attribute) >= 0) {
			value = this.$parent.getIntAttribute(attribute);
		}
		return value;
	};

	Object.keys(intAttributes).forEach(function (attribute) {
		Object.defineProperty(_prototype, attribute, {
			set(value) {
				return this.setIntAttribute(attribute, value);
			},
			get() {
				return this.getIntAttribute(attribute);
			},
			enumerable: false
		});
	});
}

function addExtAttributes(_prototype) {
	Object.keys(extAttributes).forEach(function (attribute) {
		Object.defineProperty(_prototype, attribute, {
			set(value) {
				return this.setAttribute(attribute, value);
			},
			get() {
				return this.getAttribute(attribute);
			},
			enumerable: false
		});
	});
}

function addResources(_prototype) {
	Object.keys(resAttributes).forEach(function (resource) {
		_prototype["set" + resource] = function (_, value, lan) {
			this.$attributes.setResource(_, resource, value, lan);
		};
		_prototype["get" + resource] = function (_, lan) {
			return this.$attributes.getResource(_, resource, lan);
		};
	});
}

function addColAttributes(_prototype) {
	_prototype.initColAttributes = function () {
		this.$colAttributes = [];
	};
	_prototype.setColAttribute = function (column, attribute, value) {
		if (this.$colAttributes[column] === undefined) {
			this.$colAttributes[column] = new Attributes();
		}
		return this.$colAttributes[column].setAttribute(attribute, value);
	};

	_prototype.getColAttribute = function (column, attribute) {
		if (this.$colAttributes[column] === undefined) {
			this.$colAttributes[column] = new Attributes();
		}
		var value = this.$colAttributes[column].getAttribute(attribute);
		if (!value && inheritedAttributes.indexOf(attribute) >= 0) {
			value = this.getAttribute(attribute);
		}
		return value;
	};
}

function addAttributes(_prototype) {
	addIntAttributes(_prototype);
	addExtAttributes(_prototype);
	addResources(_prototype);
}

function isAttributeBoolean($attribute) {
	var attribute = $attribute;
	// direct access if the casse of the attribute is correct :
	if (extAttributes[attribute]) return extAttributes[attribute].attType === "boolean";
	if (intAttributes[attribute]) return intAttributes[attribute].attType === "boolean";
	// second chance :
	attribute = uExtAttributes[attribute.toUpperCase()];

	if (extAttributes[attribute]) return extAttributes[attribute].attType === "boolean";
	return false;
}

function isAttributeNumber($attribute) {
	var attribute = $attribute;
	// direct access if the casse of the attribute is correct :
	if (extAttributes[attribute]) return extAttributes[attribute].attType === "number";
	if (intAttributes[attribute]) return intAttributes[attribute].attType === "number";
	// second chance :
	attribute = uExtAttributes[attribute.toUpperCase()];

	if (extAttributes[attribute]) return extAttributes[attribute].attType === "number";
	return false;
}

exports.Attributes = Attributes;
exports.extAttributesObject = extAttributesObject;
exports.extAttributesMeta = extAttributesMeta;
exports.addExtAttributes = addExtAttributes;
exports.addIntAttributes = addIntAttributes;
exports.addResources = addResources;
exports.addColAttributes = addColAttributes;
exports.addAttributes = addAttributes;
exports.extAttributes = extAttributes;
exports.clone = clone;
exports.revertTo = revertTo;

exports.isAttributeBoolean = isAttributeBoolean;
exports.isAttributeNumber = isAttributeNumber;