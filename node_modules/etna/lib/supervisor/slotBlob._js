"use strict";

const glob = require('streamline/lib/globals');
const ez = require('ez-streams');
const SlotLob = require("etna/lib/supervisor/slotlob").SlotLob;
const tblbfile = require('etna/lib/engine/runtime/tblbfile');
const constants = require("etna/lib/supervisor/constants");
const Blbfile = tblbfile.Blbfile;

class SlotBlob extends SlotLob {
	constructor(parent, property) {
		super(parent, property);
	}

	_set(_, value, raw) {
		if (value !== undefined && typeof value === 'string') {
			//dbg:console.log(this.name+" =>Blbfile");
			value = tblbfile.fromBase64(value);
		}
		super._set(_, value, raw);
		this.$wasUpdated = true;
	}

	_get(_,raw) {
		if(raw) return this._value = this._value || new Blbfile();   
		
		if(!this._value) {
			var data = this.read(_);
			this._value =  data || new Blbfile();
		}
		return super._get(_,raw);
	}

	read(_) {
		if(this.property.type.readMedia) {
			return new Blbfile(this.property.type.readMedia(_,this));
		}
		return this.readRecord(_,"ABLOB","BLOB");
	}

	insertSlotExtended(_) {
		if(!this.$wasUpdated || this.property.data.LOBTAB  !==  "ABLOB") return constants.CST_AOK;
		var keys = this.getKeys(_);
		return this.updateRecord(_,"ABLOB","BLOB", {
			CODBLB:keys.CODBLB,
			IDENT1:keys.IDENT1,
			IDENT2:keys.IDENT2,
			IDENT3:keys.IDENT3,
			NAMBLB:' ',
			TYPBLB:0,
			CNTTYP:' '
		},
		ez.devices.buffer.reader);
	}

	updateSlotExtended(_) { 
		return this.insertSlotExtended(_);
	}

	deleteSlotExtended(_) { 
		var param = this.$parent.supervisor.sqlDriver.param;
		var keys = this.getKeys(_);
		//dbg:console.log("deleteLob name:"+slot.name+" keys:",keys);
		var params = [keys.CODBLB, keys.IDENT1, keys.IDENT2, keys.IDENT3];
		var i = 0;
		var sql = "delete From " + this.table + " Where" +
			" CODBLB_0=" + param(i++) + " and IDENT1_0=" + param(i++) + " and IDENT2_0=" + param(i++) + " and IDENT3_0=" + param(i++);
		return this.$parent.supervisor.executeSql(_, sql, params);
	}	
}

exports.SlotBlob = SlotBlob;

exports.newSlotBlob = function(property) {
	return function(parent) {
		return new SlotBlob(parent, property);
	};
};
