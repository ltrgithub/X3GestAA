"use strict";

const glob = require('streamline/lib/globals');
const tdate = require('etna/lib/engine/runtime/tdate');
const tdatetime = require('etna/lib/engine/runtime/tdatetime');
const tuuid = require('etna/lib/engine/runtime/tuuid');
const constants = require("etna/lib/supervisor/constants");
const Slot = require("etna/lib/supervisor/slot").Slot;

class SlotLob extends Slot {
	constructor(parent, property) {
		super(parent, property);
		this._value = undefined;
	}

	contentType(_) {
		return this.property.type.contentType(_, this);
	}

	getKeys(_) {
		const instance = this.$parent;
		const keyMaps = this.property.keyMaps(_);
		const keys = Object.keys(keyMaps).reduce_(_, (_, r, key) => {
			const val = keyMaps[key](_, instance);

			r[key] = val === "" ? " " : val;
			return r;
		}, {});
		//dbg:console.log("SlotLob keys:",keys);

		return keys;
	}

	insertSlot(_) {
		if (!this._value) return constants.CST_AOK;
		if (this.property.type.insertMedia) return this.property.type.insertMedia(_, this, this._value);
		return this.insertSlotExtended(_); //Else
	}

	updateSlot(_) {
		if (!this._value) return constants.CST_AOK;
		if (this.property.type.updateMedia) return this.property.type.updateMedia(_, this, this._value);
		return this.updateSlotExtended(_); //Else
	}

	deleteSlot(_) {
		if (!this._value) return constants.CST_AOK;
		if (this.property.type.deleteMedia) return this.property.type.deleteMedia(_, this, this._value);
		return this.deleteSlotExtended(_); //Else
	}

	readRecord(_, lobTable, lobField) {
		if (this.property.data.LOBTAB !== lobTable) return;
		const keys = this.getKeys(_);

		var i = 0;
		const param = this.$parent.supervisor.sqlDriver.param;
		const rs = this.$parent.supervisor.sqlReader(_, "select " + lobField + "_0 From " + lobTable + " Where " + Object.keys(keys).map(p => p + '_0=' + param(i++)).join(' and '), Object.keys(keys).map(p => keys[p])).toArray(_);

		return rs.length ? this.property.type.fromSql(_, rs[0][lobField]) : undefined;
	}

	updateRecord(_, lobTable, lobField, record, reader) {
		const actx = glob.context.x3session.actx;
		const driver = this.$parent.supervisor.sqlDriver;
		const param = driver.param;

		record[lobField] = this._value;
		record.CREUSR = actx.$USER(_);
		record.CREDAT = tdate.today();
		record.UPDUSR = actx.$USER(_);
		record.CREDATTIM = tdatetime.now();
		record.UPDDATTIM = tdatetime.now();
		record.AUUID = tuuid.generate();

		const executeSql = function (_, self, sql, i, values) {
			const name = param(i++);

			sql += " returning " + lobField + "_0 into " + name;
			const result = self.$parent.supervisor.executeSql(_, sql, values, {
				outputVars: [{
					name: name.substring(1),
					type: self.property.type.sqlType()
				}]
			});
			//dbg:console.log("executeSql result:",result);

			if (result.updateCount) {
				//dbg:console.log("executeSql pipe:",result.outputVars[0]);
				reader(self._value.value).pipe(_, result.outputVars[0]);
			}
			return result;
		};
		// Does the lob exist ?


		var i = 0;
		const lobPlaceholder = driver.lobPlaceholder(this.property.type.sqlType());
		const columns = Object.keys(record);
		const columns2 = columns.filter(k => k !== lobField);
		const rs = this.$parent.supervisor.sqlReader(_, "select " + columns2.map(p => p + '_0').join(',') + " From " + lobTable + " Where " + columns2.slice(0, 4).map(p => p + '_0=' + param(i++)).join(" and "), columns2.slice(0, 4).map(p => record[p])).toArray(_);

		var sql;
		if (!rs.length) {
			i = 0;
			sql = "insert into " + lobTable + " (" + columns.map(p => p + '_0').join(',') + ") values (" + columns.map(p => p === lobField ? lobPlaceholder : param(i++)).join(',') + ")";
			return executeSql(_, this, sql, i, columns2.map(p => record[p]));
		}
		columns2.forEach(p => {
			if (rs[0][p]) record[p] = rs[0][p];
		});
		record.UPDUSR = actx.$USER(_);
		record.UPDDATTIM = tdatetime.now();

		// Update record with data stored in the database :
		i = 0;
		var values = columns2.slice(4).map(p => record[p]);
		values = values.concat(columns.slice(0, 4).map(p => record[p]));

		sql = "update " + lobTable + " SET " + columns.slice(4).map(p => p + '_0=' + (p === lobField ? lobPlaceholder : param(i++))).join(',') + " where " + columns.slice(0, 4).map(p => p + '_0=' + param(i++)).join(" and ");

		return executeSql(_, this, sql, i, values);
	}
}

exports.SlotLob = SlotLob;

exports.newSlotLob = function (property) {
	return function (parent) {
		return new SlotLob(parent, property);
	};
};