"use strict";

var util = require('util');
var constants = require("etna/lib/supervisor/constants");
var Slot = require("etna/lib/supervisor/slot").Slot;

class SlotLob extends Slot {
	constructor(parent, property) {
		super(parent, property);
		this._value = undefined;
	}

	contentType(_) {
		return this.property.type.contentType(_,this);
	}


	getKeys(_) {
		var instance = this.$parent;
		var keyMaps = this.property.keyMaps(_);

		var keys = Object.keys(keyMaps).reduce_(_, (_,r,  key) => {
			var val = keyMaps[key](_, instance);
			r[key] = val === "" ? " ":val;
			return r;
		},{});
		//dbg:console.log("SlotLob keys:",keys);
		return keys;
	}

	insertSlot(_) {
		if(!this._value ) return constants.CST_AOK;
		if(this.property.type.insertMedia) return this.property.type.insertMedia(_,this, this._value);
		return this.insertSlotExtended(_);//Else
	}

	updateSlot(_) { 
		if(!this._value ) return constants.CST_AOK;
		if(this.property.type.updateMedia) return this.property.type.updateMedia(_,this, this._value);
		return this.updateSlotExtended(_);//Else
	}

	deleteSlot(_) { 
		if(!this._value ) return constants.CST_AOK;
		if(this.property.type.deleteMedia) return this.property.type.deleteMedia(_,this, this._value);
		return this.deleteSlotExtended(_);//Else
	}
}

exports.SlotLob = SlotLob;

exports.newSlotLob = function(property) {
	return function(_, parent) {
		return new SlotLob(parent, property);
	};
};
