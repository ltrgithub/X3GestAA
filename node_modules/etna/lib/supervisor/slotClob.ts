"use strict";

const glob = require('streamline/lib/globals');
import * as ez from 'ez-streams';
import { Clbfile } from '../engine/runtime/tclbfile';
import * as constants from '../supervisor/constants';
import { SlotLob } from '../supervisor/slotLob';

export class SlotClob extends SlotLob {
	constructor(parent, property) {
		super(parent, property);
	}

	set(_: _,  value, raw) {
		if (value !== undefined && value instanceof Buffer) {
			value = new Clbfile(value.toString());
		}
		super.set(_, value, raw);
		this.$wasUpdated = true;
	}

	get(_: _,  raw) {
		if (raw) return this._value = this._value || new Clbfile("");

		if (this._value === undefined) {
			var data = this.read(_);
			this._value = typeof data === 'string' ? new Clbfile(data) : data;
		}
		return super.get(_, raw);
	}

	read(_: _) {
		if (this.property.type.readMedia) {
			var data = this.property.type.readMedia(_, this);
			this._value = typeof data === 'string' ? new Clbfile(data) : data;
			return this._value;
		}
		return this.readRecord(_, "ACLOB", "CLOB");
	}

	insertSlotExtended(_: _) {
		if (!this.$wasUpdated || this.property.data.LOBTAB !== "ACLOB") return constants.CST_AOK;
		const keys = this.getKeys(_);

		return this.updateRecord(_, "ACLOB", "CLOB", {
			CODBLB: keys.CODBLB,
			IDENT1: keys.IDENT1,
			IDENT2: keys.IDENT2,
			IDENT3: keys.IDENT3,
			NAMBLB: ' ',
			TYPDOC: ' ',
			CNTTYP: ' '
		}, ez.devices.string.reader);
	}

	updateSlotExtended(_: _) {
		return this.insertSlotExtended(_);
	}

	deleteSlotExtended(_: _) {
		if (this.property.data.LOBTAB !== "ACLOB") return;

		const param = this.$parent.supervisor.sqlDriver.param;
		const keys = this.getKeys(_);
		const params = [keys.CODBLB, keys.IDENT1, keys.IDENT2, keys.IDENT3];

		var i = 0;
		const sql = "delete From ACLOB Where" + " CODBLB_0=" + param(i++) + " and IDENT1_0=" + param(i++) + " and IDENT2_0=" + param(i++) + " and IDENT3_0=" + param(i++);

		return this.$parent.supervisor.executeSql(_, sql, params);
	}
}

;

export function newSlotClob(property) { return (parent => new SlotClob(parent, property)); }
