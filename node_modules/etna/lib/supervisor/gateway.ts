"use strict";

const globals = require('streamline-runtime').globals;
const runtime = require("etna/lib/engine/runtime/runtime");
const etnaClient = require("etna/lib/supervisor/client");
const AGATEWAYADX = require("etna/lib/supervisor/builtins/AGATEWAYADX");
const trace = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");

exports.$exported = true;

export function gateway(_: _,  script_name, operation_name, payload) {
	const context = globals.context;
	const endpoint = require("syracuse-collaboration/lib/helpers").AdminHelper.getEndpoint(_, {
		dataset: globals.context.endpointDataset
	});

	const client = etnaClient.getClient(_, context.session, endpoint);
	const resp = client.jsonSend(_, {
		head: {
			url: "/sdata/x3/erp/" + globals.context.endpointDataset + "/$service/rpc?module=" + script_name + "&name=" + operation_name,
			method: "POST"
		},
		payload: payload
	});

	trace.debug && trace.debug("gateway response:" + resp.body);
	return resp.body;
};

export function rpc(_: _,  context) {
	const body = context.request.readAll(_);

	trace.debug && trace.debug("rpc module:" + context.qs.module);
	trace.debug && trace.debug("rpc name: " + context.qs.name);
	trace.debug && trace.debug("rpc body: " + body);

	try {
		var _this = new AGATEWAYADX.Constructor(context.superv, body).init(_);

		var module = runtime.requireScript(_, context.qs.module);
		var args = {
			THIS: {
				type: "LY",
				value: _this
			},
			FUNCTION: {
				type: "AS" + context.qs.name.length,
				value: context.qs.name
			}
		};
		runtime.executeProg(_, module, "$GATEWAY", args);
		context.response.end(_this.stringify(_));
	} catch (e) {
		console.error("GATEWAY:" + e.stack);
	}
};