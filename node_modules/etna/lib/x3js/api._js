"use strict";
/// !doc
/// [x3js dev guide](x3js-development-guide) > [x3js APIs](x3js-apis) > x3js module
///
/// # x3js module
///
/// The `x3js` module is the module that you should import at the top of all `.x3js` source files:
///
/// ```javascript
/// import * as x3js from 'x3js';
/// ```

const runtime = require('etna/lib/engine/runtime/runtime');
const tdate = require('etna/lib/engine/runtime/tdate');
const tdatetime = require('etna/lib/engine/runtime/tdatetime');
const tblbfile = require('etna/lib/engine/runtime/tblbfile');
const constants = require('etna/lib/supervisor/constants');
const classProxy = require('./class-proxy');
const tableProxy = require('./table-proxy');
const enumProxy = require('./enum-proxy');
const messageProxy = require('./message-proxy');
const parameters = require('./parameters');
const util = require('../supervisor/util');
const uuid = require('syracuse-core').uuid; // don't use tuuid - we want strings not buffers
const x3jsUtil = require('./util');

const STRING_API = {
	format: (fmt, val) => runtime.functions.FORMAT$.fn(fmt, val)
};

const BLOB_API = {
	fromBase64: str => new tblbfile.Blbfile(new Buffer(str, 'base64'))
};

const PREDICATES = {
	startsWith(str, ignoreCase) {
		return {
			$regex: "^" + str,
			$options: ignoreCase ? 'i' : undefined
		};
	}
};

const CONSTANTS = Object.keys(constants).filter(k => /^CST_A/.test(k)).reduce((r, k) => {
	r[k.substring(5)] = constants[k];
	return r;
}, {});

const addType = t => obj => (obj = obj || {}, obj.type = t, obj);

module.exports = x3jsUtil.fiberize({
	///
	/// #### Data types
	///
	/// * `x3js.string` 
	///   [string utilities](x3js-string).
	get string() {
		return STRING_API;
	},
	/// * `x3js.date` 
	///   [date utilities](x3js-date).
	get date() {
		return tdate;
	},
	/// * `x3js.datetime` 
	///   [datetime utilities](x3js-datetime).
	get datetime() {
		return tdatetime;
	},
	/// * `x3js.uuid`
	///   [UUID utilities](x3js-uuid).
	get uuid() {
		return uuid;
	},
	// TODO: review
	get blob() {
		return BLOB_API;
	},
	// TODO: review
	get predicates() {
		return PREDICATES;
	},
	// meta helpers
	booleanProperty: addType('boolean'),
	integerProperty: addType('integer'),
	shortProperty: addType('short'),
	decimalProperty: addType('decimal'),
	dateProperty: addType('date'),
	datetimeProperty: addType('datetime'),
	uuidProperty: addType('uuid'),
	
	stringProperty: arg => {
		if (typeof arg === 'number') return {
			type: 'string',
			maxLength: arg,
		};
		return addType('string')(arg);
	},
	enumProperty: arg => {
		if (arg && arg.$proxyType === 'enum') return {
			type: 'enum',
			enum: arg,
		};
		return addType('enum')(arg);
	},
	
	message: arg => arg,
	// TODO: do we really need this one?
	constants: CONSTANTS,
	///
	/// #### Defining dictionary artifacts
	///
	/// * `x3js.defineClass(def)` 
	///   defines a [class](x3js-class-manager).
	defineClass(_, def) {
		return classProxy.define(_, def);
	},
	/// * `x3js.defineEnum(def)` 
	///   defines an [enum](x3js-enums).
	defineEnum(def) {
		return enumProxy.define(def);
	},
	/// * `x3js.defineMessages(def)` 
	///   defines a [message list](x3js-user-messages).
	defineMessages(def) {
		return messageProxy.define(def);
	},
	/// * `x3js.defineUnitTest(def)` 
	///   defines a [unit test](x3js-unit-test).
	defineUnitTest(def) {
		return require('./unit-test').define(def);
	},
	///
	/// #### Accessing metadata artifacts
	///
	/// * `x3js.getClass('moduleName.ClassName')` 
	///   returns a [class artifact](x3js-class-manager).
	getClass(path) {
		return classProxy.load(path);
	},
	/// * `x3js.table('moduleName.TABLENAME')` 
	///   returns a [table artifact](x3js-table-manager).
	table(path) {
		return tableProxy.load(path);
	},
	/// * `x3js.getEnum('moduleName.EnumName')` 
	///   returns an [enum artifact](x3js-enums).
	getEnum(path) {
		return enumProxy.load(path);
	},
	/// * `x3js.messages('moduleName.MessagesName')` 
	///   returns a [message list artifact](x3js-user-messages).
	messages(path) {
		return messageProxy.load(path);
	},
	///
	/// #### Accessing parameters API
	///
	/// * `x3js.parameters`
	///   [parameters API](x3js-parameters) 
	get parameters() {
		return parameters;
	},

	///
	/// #### Unit tests assertions
	///
	/// * `x3js.assert` 
	///   Returns assert API for unit tests 
	get assert() {
		return require('./unit-test').assert;
	},

	tryCatch(fn) {
		try {
			return [null, fn.call(this)];
		} catch (ex) {
			return [ex];
		}
	},
});
