"use strict";
const BaseReader = require('./baseReader').BaseReader;
const WhereConverter = require('./tableWhere').WhereConverter;

class TableQuery extends BaseReader {
	constructor(supervisor, tableName, alias) {
		super();
		this.supervisor = supervisor;
		this.tables = [{
			name: tableName,
			alias: alias || '',
		}];
		this.wheres = [];
		this.order = null;
		this.reader = null;
	}
	join(tableName, alias, condition) {
		this.tables.push({
			name: tableName,
			alias: alias,
		});
		this.wheres.push(condition)
		return this;
	}
	where(clause) {
		this.wheres.push(clause);
		return this;
	}
	orderBy(order) {
		if (this.order) throw new Error("query already has an order by clause");
		this.order = order;
		return this;
	}
	read(_) {
		if (this.reader == null) this.reader = createReader(_, this);
		return this.reader.read(_);
	}
	stop(_) {
		if (this.reader) this.reader.stop(_);
		this.reader = null;
	}
}

function mapRecord(_, rec) {
	return Object.keys(rec).reduce((r, k) => {
		const pair = k.split('$');
		if (pair.length > 1) {
			(r[pair[0]] = r[pair[0]] || {})[pair[1]] = rec[k];
		} else {
			r[k] = rec[k];
		}
		return r;
	}, {});
}

function createReader(_, query) {
	const tables = query.tables.map_(_, (_, t) => {
		return {
			name: t.name,
			alias: t.alias || t.name,
			meta: query.supervisor.load(_, 'Table', t.name),
		};
	});
	const sqlOpts = {
		typesmap: [],
	};
	const args = [];
	const colNames = [];
	const tableDecls = [];
	const wheres = [];
	const orderBys = [];
	tables.forEach_(_, (_, t) => {
		tableDecls.push(t.name + (t.alias ? ' ' + t.alias : ''));
		const prefix = t.alias ? t.alias + '.' : '';
		Object.keys(t.meta.columns).forEach_(_, function(_, name) {
			const col = t.meta.columns[name];
			colNames.push(col.sqlNames(prefix, t.alias, sqlOpts));
			col.sqlTypesMap(sqlOpts.typesmap);
		});
	});
	if (query.order) Object.keys(query.order).forEach_(_, (_, o) => {
		var dir = query.order[o];
		if (dir === 0) return;
		orderBys.push(o + '_0 ' + (dir > 0 ? 'asc' : 'desc'));
	});
	var sql = 'select ' + colNames.join(',') + ' from ' + tableDecls.join(', ');
	if (query.wheres.length) sql += ' where ' + new WhereConverter(tables, args).toSql(_, query.wheres);
	if (orderBys.length > 0) sql += ' order by ' + orderBys.join(', ');
	console.error("EXECUTING", sql, args);
	return query.supervisor.sqlReader(_, sql, args, sqlOpts).map(function(_, rec) {
		return mapRecord(_, rec);
	});
}

exports.TableQuery = TableQuery;
