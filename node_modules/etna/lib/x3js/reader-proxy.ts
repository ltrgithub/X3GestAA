import { _ } from 'streamline-runtime';
import * as ez from 'ez-streams';
import * as x3jsUtil from './util';

function unwrap(fn: Function) {
    return function(_: _,  ...args: any[]) {
        return fn.apply(this, args);
    }
};

class Wrapper<T> {
    reader: ez.Reader<T>;
    constructor(reader: ez.Reader<T>) {
        this.reader = reader;
    }
    read() {
        return x3jsUtil.wait(_ => this.reader.read(_));
    }
    stop(arg: any) {
        return x3jsUtil.wait(_ => this.reader.stop(_, arg));
    }
    forEach(fn: (elt: T, index: number, array: T[]) => void) {
       return x3jsUtil.wait(_ => this.reader.forEach(_, unwrap(fn)));
    }
    map<U>(fn: (elt: T, index: number, array: T[]) => U) {
        return new Wrapper(this.reader.map(unwrap(fn)));
    }
    limit(n: number) {
        return new Wrapper(this.reader.limit(n));
    }
}

export default function<T>(reader: ez.Reader<T>) {
    return new Wrapper(reader);
}