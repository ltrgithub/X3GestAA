import { _ } from 'streamline-runtime';
import * as mongodb from 'mongodb';

export interface OrmInstanceMethods {
    // all our instances have these methods
	name(_: _, val?: string): string;
	source(_: _, val?: string): string;
	sourceState(_: _, val?: string): string;
	status(_: _, val?: string): string;
	module(_: _, val?: string): string;
	comment(_: _, val?: string): string;
    missingMappings(_: _): any[];
    conflictingMappings(_: _): any[];
    // private ORM stuff that is exposed to us
	_meta: {
        name: string; 
        $relations: any; // refine later
    };
    _db: {}; // refine later
	_parent: OrmInstance;
    save(_: _): void;
    hasErrors(_: _): boolean;
    $addDiagnose(severity: string, message: string, propName?: string): void;
    $addError(message: string, propName?: string): void;
    getAllDiagnoses(_: _, diagnoses: any[], options: any): void;
    serializeInstance(_: _): any;
}
export interface OrmInstanceProperties {
    [name: string]: (_: _, val?: any) => any;
}

export type OrmInstance = OrmInstanceMethods & OrmInstanceProperties;

export interface OrmProperty {
    $title?: string;
    $type?: string;
    $default?: any;
    $enum?: { $title: string; $value: any }[];
    $isDisabled?: boolean | ((_: _,  instance?: OrmInstance) => boolean);
    $isReadOnly?: boolean | ((_: _,  instance?: OrmInstance) => boolean);
    $isNullable?: boolean | ((_: _,  instance?: OrmInstance) => boolean);
    $isMandatory?: boolean | ((_: _,  instance?: OrmInstance) => boolean);
    $propagate?: ((_: _,  instance: OrmInstance, value: any) => void);
}

export interface OrmService {
    $method?: string,
    $isMethod?: boolean,
    $facets?: string[],
    $title?: string,
    $permanent?: boolean,
    $confirm?: string,
    $execute?: (_: _,  context: OrmContext, instance: OrmInstance) => any;    
}

export interface OrmModelDb {
        model: OrmModel;
        db: mongodb.Db;
}

export interface OrmContext {
    query: { [name: string]: string };
    db: OrmModelDb;
    tracker: OrmTracker;
    response: any; // refine later
}

export interface OrmWorkingCopy {
    $fillFromParameters(_: _, parameters: any): void;
}

export interface OrmFactory {
    createInstance(_: _, data: any, connection: OrmModelDb, context: OrmContext, initialId: string): OrmInstance;
}

export interface OrmEntity {
	$properties: { 
        [name: string]: OrmProperty;
    };
    $services: {
        [name: string]: OrmService;
    };
    $init: (_: _,  wc: OrmWorkingCopy, context: OrmContext) => void;
    factory: OrmFactory;
}

export interface OrmTracker {
    phase: string;
    phaseDetail: string;
    progress: number;
    $diagnoses: any[];
}

export interface OrmModel {
    getEntity(_: _, name: string): OrmEntity;
}

export interface Endpoint {
    useEtna(_: _): boolean;
    getEtnaConfig(_: _, x3Session: any): any; // refine later
}
