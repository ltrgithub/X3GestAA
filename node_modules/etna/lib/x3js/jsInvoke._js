"use strict";
const camelCache = {}

function camelify(name) {
	return camelCache[name] || (camelCache[name] = name.split('_').map(function(s, i) {
		return i === 0 ? s.toLowerCase() : s[0] + s.substring(1).toLowerCase();
	}).join(''));
}

var instanceProxy;

function eventName(str) {
	return /^ADD/.test(str) ? 'ADD_' + str.substring(3) : str.substring(1);
}

function labelValue(label, args) {
	switch (label) {
		case '$properties': return args.ARULE.value;
		case '$events': return eventName(args.AEVENT.value);
		case '$operations': return args.AOPERATION.value;
		case '$methods': return args.AMETHOD.value;
		default: throw new Error("bad label: " + label);
	}
}

module.exports = function(_, mod, label, args) {
	instanceProxy = instanceProxy || require('./instanceProxy');
	const fns = mod.body[label];
	if (!fns) return 0;
	var member = mod.body;
	while (args.path.length > 1) {
		member = member.$relations[args.path.shift()];
		if (!member) return 0;
	};
	member = member[label];
	if (!member) return 0;
	if (args.path.length === 1) member = member[args.path[0]];
	if (!member) return 0;
	var action = camelify('$' + labelValue(label, args));
	const fn = member[action];
	if (!fn) return 0;
	console.error("INVOKEJS", mod.name, label, args.path, action);
	const proxy = instanceProxy.create(args.THIS.value);
	//console.error("INVOKEJS", label, args.path, action);
	const arg1 = args.path.length > 0
		? args.path.reduce_(_, (_, r, p) => r && r[p].get(_), proxy) 
		: undefined;
	try {
		const jsKeys = Object.keys(args).filter(k => args[k].isParam);
		const jsArgs = jsKeys.map(k => args[k].value);
		var result;
		if (jsArgs.length === 0) {
			result = fn.call(proxy, _, arg1);
		} else {
			var result = fn.apply_(_, proxy, jsArgs, 0);
			if (!Array.isArray(result)) result = [result];
			jsKeys.forEach_(_, (_, k) => {
				if (args[k].set && result.length > 0) args[k].value = result.shift(); 
			});
			if (result.length > 1) throw new Error("function " + label + " returns too many results");
			result = result[0];
		}
		if (args.ARET_VALUE && result !== undefined) {
			args.ARET_VALUE.value = result;
			return undefined;
		} else {
			return result;
		}
	} catch (ex) {
		console.error("JSINVOKE FAILED1", ex);
		console.error("JSINVOKE FAILED", ex.stack);
		return 4;
	}
}

