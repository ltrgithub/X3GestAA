/// !doc
/// [x3js dev guide](x3js-development-guide) > [x3js APIs](x3js-apis) > x3js unit test
///
/// # x3js unit test
///
/// TBD

import { _ } from 'streamline-runtime';
import * as core from 'syracuse-core';
import * as util from '../engine/runtime/util';
const flows = require('streamline-runtime').flows;
const date = core.types.date;
const datetime = core.types.datetime;
const tbcd = require('../engine/runtime/tbcd');

export interface UnitTestCaseDef {
	name: string;
	execute: () => void;
}

export interface UnitTestDef {
	module: string;
	name: string;
	cases: UnitTestCaseDef[];
}

export function define(def: UnitTestDef) {
	if (!def.module) throw new Error(`unit test module missing`);
	if (!def.name) throw new Error(`unit test name missing`);
	if (!def.cases) throw new Error(`${ def.name }: unit test cases missing`);
	const cx = util.currentContext();
	describe(def.name, function () {
		def.cases.filter(cas => !!cas.execute).forEach(cas => {
			it(cas.name, function (done) {
				const execute = (_: _) => {
					cas.execute.call(this);
				};
				return flows.withContext(() => {
					execute.call(this, done);
				}, cx)();
			});
		});
	});
};

function normalize(x: any) {
	if (!x) return x;
	if (typeof x !== 'object') return x;
	if (Array.isArray(x)) return x.map(normalize);
	if (date.isDate(x)) return 'date: ';
}

const chai = require('chai');
export const assert = {
	ok: chai.assert.ok,
	notOk: chai.assert.notOk,
	equal: chai.assert.deepEqual,
	notEqual(x: any, y: any, message: string) {
		if (date.isDate(x) && date.isDate(y) && x.x3Compare(y) === 0) y = x;
		if (datetime.isDatetime(x) && datetime.isDatetime(y) && x.x3Compare(y) === 0) y = x;
		if (x instanceof tbcd.BCD && y instanceof tbcd.BCD && x.x3Compare(y) === 0) y = x;
		return chai.assert.notEqual(x, y, message);
	},
	throws: chai.assert.throws,
	fail: chai.assert.fail,
};
