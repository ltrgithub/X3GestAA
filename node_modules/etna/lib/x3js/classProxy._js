"use strict";
/// !doc
/// [x3js dev guide](x3js-development-guide) > [x3js APIs](x3js-apis) > x3js class manager
/// 
/// # x3js class manager
/// 
/// Every X3 application folder has a class manager, which give access to the folder's classes.
///
/// The class manager is usually obtained from an existing instance, as `instance.$classes`.
/// 
/// The classes themselves can be obtained with:
/// 
/// ```javascript
///  const MyClass = instance.$classes.MyClass$;
/// ```
/// where _MyClass_ is the name of a class. For example: `const Bank = instance.$classes.Bank$`.
/// 
/// Once you have a handle to a class, you can use it to create instances of the class, query the class, etc., 
/// with the API described below.
/// 
/// Note: you should never store a reference to a class in a global script variable because classes are specific to 
/// a folder. You should always retrieve classes via the `$classes` property of another object.

require('harmony-reflect'); // to get ES6 Proxy API
const instanceProxy = require('./instanceProxy');
const ClassQuery = require('./classQuery').ClassQuery;
const x3jsUtil = require('./util');

function resolveKey(clas, key) {
	if (typeof key !== 'object') key = [key];
	if (Array.isArray(key)) {
		return key.reduce((r, v, i) => {
			if (i >= clas.tableIndex.columns.length) throw new Error("too many values in key: " + key.length);
			r[clas.tableIndex.columns[i].name] = x3jsUtil.fromJs(v);
			return r;
		}, {});
	} else {
		throw new Error("NIY: key passed as object");
	}
}

class ClassWrapper {
	constructor(clas) {
		this.class = clas;
	}
	/// 
	/// #### Creating an instance
	/// 
	/// * `MyClass.create(_, values = {})`: returns a new instance of `MyClass`.  
	///   `values` provides initial values for the properties of the new instance.
	create(_, values) {
		const instance = this.class.supervisor.new(_, 'Instance', this.class).afterCreate(_);
		const proxy = instanceProxy.create(instance);
		if (values) Object.keys(values).forEach_(_, function(_, name) {
			proxy[name](_, values[name]);
		});
		return proxy;
	}
	/// 
	/// #### Query and read
	/// 
	/// * `MyClass.query()`:  creates a query on `MyClass`.  
	///   See the [class query API](x3js-class-query) for details on the query object returned by this call.
	query() {
		if (arguments.length > 0) throw new Error("query: bad arg count");
		return new ClassQuery(this.class);
	}
	/// * `MyClass.read(_, key)`:  reads an instance of `MyClass`, given a key value.  
	/// `key` may be:
	///   * a single value (simple primary key)
	///   * an array (composite primary key)
	///   * a JS object which will give the column names and their values.
	read(_, key) {
		return instanceProxy.create(this.class.readInstance(_, null, resolveKey(this.class, key)));
	}
}

// internal - don't document
class ClassesHandler {
	constructor(supervisor) {
		this.supervisor = supervisor;
		this.getters = {};
	}
	get(name) {
		return this.getters[name] || { get : (_) => {
			const clas = this.supervisor.loadClassByJsName(_, name);
			if (!clas) throw new Error("class not found: " + name);
			const wrapper = new ClassWrapper(clas);
			// create fast getter
			this.getters[name] = { get: (_) => wrapper };
			return wrapper;
		}};
	}
}

// internal - don't document
exports.create = function(supervisor) {
	return new Proxy(supervisor, {
		get: function(supervisor, name) {
			//console.error("PROXY GET", name);
			supervisor.classesHandler = supervisor.classesHandler || new ClassesHandler(supervisor);
			return supervisor.classesHandler.get(name);
		},
	});
}
