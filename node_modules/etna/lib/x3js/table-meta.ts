import { _ } from 'streamline-runtime';
import { Supervisor } from '../supervisor/supervisor';
import { ClassDef  } from './class-proxy';
///
/// Metadata attributes in X3JS source files
///

import * as typeMeta from './type-meta';

export function fromClassScript(_: _, supervisor: Supervisor, script: ClassDef) {
	const table = script.tableDef;
	const CODFIC = table.name || script.name.toUpperCase();
	return {
		// header
		CODFIC: CODFIC,
		ABRFIC: table.abbrev || table.name || script.name.toUpperCase(),
		INTITFIC: 0,
		// general tab - characteristics
		CODACT: script.activityCode || '',
		MODULE: supervisor.moduleCode(script.module),
		// general tab - table management
		TYPDBA: 3, // database type: folder?
		FLG130: 1, // compatible with previous version: false
		NBENREG: 0, // number of records
		GENTRA: 1, // generate translated text
		ZERO: 1, // reset to zero
		SECURE: 1, // open access
		// general tab - folder management
		TYPFIC: 2, // table type (2: supervisor)
		CRE: 3, // copy type (3: conditional copy)
		OPT: 14, // copy option (14: bank)
		FLGLEG: 1, // copy legislation: false
		TYPDLV: 5, // delivery type (5: delivered empty)
		// general tab - special columns
		INTIT: '', // title column
		INITIC: '', // short title column
		SYMBOL: '', // symbol column
		COLFMT: '', // format column
		COLLNG: '', // length column
		COLDEC: '', // decimals column
		// audit tab
		AUDCRE: 1, // creation
		AUDUPD: 1, // update
		AUDDEL: 1, // delete
		AUDWRK: 1, // workflow
		AUDCLE: 1, // tracking key
		AUDBI: 1, // BI
		AUDSDA: 1, // sdata
		ASDCLE: 1, // sdata key
		// misc
		STA: 0, // ??
		UPDFLG: 0, // ??

		COLUMNS: Object.keys(script.properties).map((name, i) => {
			const prop = script.properties[name];
			if (prop.name && prop.name !== name) throw new Error(`invalid name attribute on property ${ name }: ${prop.name}`);
			prop.name = name;
			const type = typeMeta.fromProperty(supervisor, prop);
			return {
				CODFIC: CODFIC,
				CODZONE: prop.columnName || 'X3JS_' + name.toUpperCase(),
				CODACT: prop.activityCode || '',
				DIME: prop.columnRepeat || 1,
				// type info
				CODTYP: type.CODTYP,
				LONG: type.LONG || 0,
				NOLIB: type.NOLIB || 0,
				// foreign key
				LIEN: '',
				EXPLIEN: '',
				// texts:
				NOABREG: 0,
				NOCOURT: 0,
				NOLONG: 0,
				// flags and options
				OPTION: '',
				ANNUL: 0,
				OBLIG: prop.mandatory ? 2 : 1,
				VERIF: 1,
				ZERO: 1,
				// misc
				CHPLEG: 0, // what?,
				NUMLIG: i + 1
			};
		}),
		INDEXES: (table.indexes || []).map((ind, i) => {
			if (!ind.properties) throw new Error('bad index: properties missing: ' + ind.name);
			return {
				CODFIC: CODFIC,
				CODACT: ind.activityCode || '',
				CODIND: ind.name,
				DESCRIPT: ind.properties.split(',').map(s => {
					const pname = s.substring(1);
					const prop = script.properties[pname];
					if (!prop) throw new Error(`index ${ ind.name }: bad property: ${ pname }`);
					return prop.columnName || 'X3JS_' + pname.toUpperCase();
				}).join('+'), // see later about asc/desc encoding
				HOMONYM: /unique/.test(ind.is) ? 2 : 1,
				ORDIND: /clustered/.test(ind.is) ? 2 : 1,
				NIVDEC: 0, // what?
				NUMLIG: i + 1
			};
		})
	};
};