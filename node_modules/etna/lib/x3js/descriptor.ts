import { _ } from 'streamline-runtime';
import * as ez from 'ez-streams';
import { OrmInstance } from './orm';
import { PropertyData } from '../supervisor/meta/property';

export interface RulesDescriptor {
	readOnlyProperty?: (_: _, instance: OrmInstance) => boolean;
}

export interface Descriptor {
	type: 'object' | 'string' | 'number' | 'enum' | 'flags' | 'event' | 'integer' | 'boolean' | 'type';
	title?: string;
	rules?: RulesDescriptor;
	properties?: { [name: string]: PropertyDescriptor };
	collections?: { [name: string]: CollectionDescriptor };
	dictConstants?: { [name: string]: number };
	parentCodes?: { [name: string]: string };
	dictKey?: string;
}

export interface FullDescriptor<T> extends Descriptor {
	defineMethod?: string;
	singular: string;
	plural: string;
	subdir: string;
	entityName: string;
	metaName?: string;
	hasSourceFile: boolean;
	metaFilter?: { [name: string]: any };
	metaSort?: { [name: string]: any };
	metaTransform?: (_: _, reader: ez.Reader<T>, writer: ez.Writer<T>) => void;
	sourceDeclarations?: string;
}

export interface PropertyDescriptor extends Descriptor {
	dictCode?: string;
	dictCodes?: { [flag: string]: string; };
	dict?: {
		typeCode: string;
		enum: string;
		classCode: string;
		maxLength: string;
	};
	enum?: string;
	flags?: string[];
	defaultValue?: any;
	isMandatory?: boolean;
	localization?: string;
	forMeta?: (data: any) => any;
	mapping?: 'typtyp' | 'addressOrValue';
}

export interface CollectionDescriptor extends Descriptor {
	key?: string;
	metaCode?: string;
	codeGen?: string;
	dictKey?: string;
	dictIgnore?: (meta: any) => boolean;
	dictFinish?: (meta: any) => void;
	genName?: (meta: any) => string;
	orderCode?: string;
	localizedKey?: string;
	specialKey?: string;
	mapping?: 'denormalized';
	countCode?: string;
	cardinality?: number;
}