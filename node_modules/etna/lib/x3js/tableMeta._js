"use strict";
/// !doc
/// 
/// Metadata attributes in X3JS source files
/// 

const TYPES = {
	boolean(prop) {
		return {
			CODTYP: 'M',
			LONG: '4',
			NOLIB: 1,
		};
	},
	enum(prop) {
		if (!prop.choices) throw new Error("choices missing in enum: " + prop.name);
		return {
			CODTYP: 'M',
			LONG: 4,
			NOLIB: prop.choices,
		};
	},
	short(prop) {
		return {
			CODTYP: 'C',
			LONG: 4,
		};
	},
	integer(prop) {
		return {
			CODTYP: 'L',
			LONG: 8,
		};
	},
	decimal(prop) {
		const precision = prop.precision;
		if (precision == null) throw new Error("precision missing: " + prop.name);
		const scale = prop.scale || 0;
		return {
			CODTYP: 'DCB',
			LONG: (precision - scale) + scale / 10,
		};
	},
	double(prop) {
		return {
			CODTYP: 'CTD',
		};
	},
	string(prop) {
		return {
			CODTYP: prop.maxLength > 0 ? 'A': 'AC0',
			LONG: prop.maxLength || '1', // weird for blob
		};
	},
	date(prop) {
		return {
			CODTYP: 'D',
		};
	},
	datetime(prop) {
		return {
			CODTYP: 'ADATIM',
		};
	},
	uuid(prop) {
		return {
			CODTYP: 'AUUID',
		};
	},
	binary(prop) {
		return {
			CODTYP: 'AB0',
			LONG: 1,
		};
	},
};

exports.fromClassScript = function(supervisor, script) {
	if (!script.module) throw new Error("scripts module missing: " + script.name);
	const table = script.table || {};
	const CODFIC = table.name || script.name.toUpperCase();
	function CODTYP(prop) {
		switch (prop.type) {
			case 'enum': return 'M';
			case 'short': return 'C';
			case 'integer': return 'L';
			case 'decimal': return 'DCB';
			case 'double': return 'CTD';
			case 'string': return prop.maxLength != null ? 'A' : 'AC0';
			case 'date': return 'D';
			case 'datetime': return 'ADATIM';
			case 'uuid': return 'AUUID';
			case 'binary': return 'AB0';
			default: throw new Error("bad type: " + prop.sqlType);
		}
	}
	return {
		// header
		CODFIC: CODFIC,
		ABRFIC: table.abbrev || table.name || script.name.toUpperCase(),
		INTITFIC: 0,
		// general tab - characteristics
		CODACT: script.activityCode || '',
		MODULE: supervisor.moduleCode(script.module),
		// general tab - table management
		TYPDBA: 3, // database type: folder?
		FLG130: 1, // compatible with previous version: false
		NBENREG: 0, // number of records
		GENTRA: 1, // generate translated text
		ZERO: 1, // reset to zero
		SECURE: 1, // open access
		// general tab - folder management
		TYPFIC: 2, // table type (2: supervisor)
		CRE: 3, // copy type (3: conditional copy)
		OPT: 14, // copy option (14: bank)
		FLGLEG: 1, // copy legislation: false
		TYPDLV: 5, // delivery type (5: delivered empty)
		// general tab - special columns
		INTIT: '', // title column
		INITIC: '', // short title column
		SYMBOL: '', // symbol column
		COLFMT: '', // format column
		COLLNG: '', // length column
		COLDEC: '', // decimals column
		// audit tab
		AUDCRE: 1, // creation
		AUDUPD: 1, // update
		AUDDEL: 1, // delete
		AUDWRK: 1, // workflow
		AUDCLE: 1, // tracking key
		AUDBI: 1, // BI
		AUDSDA: 1, // sdata
		ASDCLE: 1, // sdata key
		// misc
		STA: 0, // ??
		UPDFLG: 0, // ??

		COLUMNS: Object.keys(script.$properties).map((name, i) => {
			const prop = script.$properties[name];
			const typefn = TYPES[prop.type];
			if (typefn == null) throw new Error('bad property type: ' + prop.name + ': ' + prop.type);
			const type = typefn(prop);
			var col = Object.assign({
				CODFIC: CODFIC,
				CODZON: prop.columnName || name.toUpperCase(),
				CODACT: prop.activityCode || '',
				DIME: prop.columnRepeat || 1,
				// type info
				LONG: 0,
				NOLIB: 0,
				// foreign key
				LIEN: '',
				EXPLIEN: '', 
				// texts:
				NOABREG: 0,
				NOCOURT: 0,
				NOLONG: 0,
				// flags and options
				OPTION: '',
				ANNUL: 0,
				OBLIG: prop.mandatory ? 2 : 1,
				VERIF: 1,
				ZERO: 1,
				// misc
				CHPLEG: 0, // what?,
				NUMLIG: i + 1,
			}, type);
			return col;	
		}),
		INDEXES: (table.indexes || []).map((ind, i) => {
			if (!ind.code) throw new Error('bad index: code missing');
			if (!ind.columns) throw new Error('bad index: columns missing: ' + ind.code);
			return {
				CODFIC: CODFIC,
				CODACT: ind.activityCode || '',
				CODIND: ind.code,
				DESCRIPT: Object.keys(ind.columns).join('+'), // see later about asc/desc encoding
				HOMONYM: ind.nonUnique ? 2 : 1,
				ORDIND: ind.clustered ? 2: 1,
				NIVDEC: 0, // what?
				NUMLIG: i + 1,
			}
		})
	}
}