"use strict";

const util = require('etna/lib/supervisor/util');
const instanceProxy = require('./instanceProxy');

function wrapValue(v) {
	if (util.isInstance(v)) return instanceProxy.create(v);
	return v;
}

const methods = {
	$error(_, message) {
		this.collection.class.ASETERROR(_, util.path(this.$parent, this.collection.jsName), message, 4);
	}
}

exports.create = collection => {
	if (!collection) return null;
	return Proxy(collection, {
		get(collection, name) {
			if (name === 'length') {
				return collection.lines.length;
			} else if (/^(forEach|map|filter|every|some|reduce|reduceRight|sort)$/.test(name)) {
				return function() {
					var fn = arguments[0];
					arguments[0] = function() {
						arguments[0] = wrapValue(arguments[0]);
						return fn.apply(this, arguments);
					}
					return collection.lines[name].apply(collection.lines, arguments);
				};
			} else if (methods[name]) {
				return methods[name].bind(collection);
			} else {
				var i = parseInt(name);
				if (!isNaN(i)) 
					return wrapValue(collection.lines[i]);
				else if (/^(inspect|toString|constructor)$/.test(name)) 
					return (collection[name] && collection[name].bind(collection));
				else 
					throw new Error("invalid collection member: " + name);
			}
		},
	});
}
