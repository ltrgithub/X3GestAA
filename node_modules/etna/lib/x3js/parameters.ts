/// !doc
/// [x3js dev guide](x3js-development-guide) > [x3js APIs](x3js-apis) > x3js parameters
///
/// # x3js parameters
///

import { _ } from 'streamline-runtime';
const glob = require('streamline-runtime').globals;
import * as constants from '../supervisor/constants';
import * as x3jsUtil from './util';

function checkContext() {
	if (!glob.context.x3session) throw new Error('invalid context: no x3 session');
}

export default {
	///
	/// * `x3js.parameters.folder(_, paramCode)` 
	/// * `x3js.parameters.user(_, paramCode)` 
	/// * `x3js.parameters.site(_, siteCode, paramCode)` 
	/// * `x3js.parameters.company(_, companyCode, paramCode)` 
	/// * `x3js.parameters.legislation(_, legCode, paramCode)` 
	///   returns parameter value. 
	folder(paramCode: string, def?: any) {
		checkContext();
		return x3jsUtil.wait(_ => glob.context.x3session.actx.get(_, 'APARAM').getJsValue(_, constants.CST_ALEVFOLD, '', paramCode, def));
	},
	user(paramCode: string, def?: any) {
		checkContext();
		return x3jsUtil.wait(_ => glob.context.x3session.actx.get(_, 'APARAM').getJsValue(_, constants.CST_ALEVUSR, '', paramCode, def));
	},
	site(siteCode: string, paramCode: string, def?: any) {
		checkContext();
		return x3jsUtil.wait(_ => glob.context.x3session.actx.get(_, 'APARAM').getJsValue(_, constants.CST_ALEVFCY, siteCode, paramCode, def));
	},
	company(companyCode: string, paramCode: string, def?: any) {
		checkContext();
		return x3jsUtil.wait(_ => glob.context.x3session.actx.get(_, 'APARAM').getJsValue(_, constants.CST_ALEVCPY, companyCode, paramCode, def));
	},
	legislation(legCode: string, paramCode: string, def?: any) {
		checkContext();
		return x3jsUtil.wait(_ => glob.context.x3session.actx.get(_, 'APARAM').getJsValue(_, constants.CST_ALEVLEG, legCode, paramCode, def));
	}
}
