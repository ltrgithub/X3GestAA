"use strict";

const fromName = {
	boolean(prop) {
		return {
			CODTYP: 'M',
			LONG: '4',
			NOLIB: 1,
		};
	},
	enum(prop) {
		if (!prop.choices) throw new Error("choices missing in enum: " + prop.name);
		return {
			CODTYP: 'M',
			LONG: 4,
			NOLIB: prop.choices,
		};
	},
	short(prop) {
		return {
			CODTYP: 'C',
			LONG: 4,
		};
	},
	integer(prop) {
		return {
			CODTYP: 'L',
			LONG: 8,
		};
	},
	decimal(prop) {
		const precision = prop.precision;
		if (precision == null) throw new Error("precision missing: " + prop.name);
		const scale = prop.scale || 0;
		return {
			CODTYP: 'DCB',
			LONG: (precision - scale) + scale / 10,
		};
	},
	double(prop) {
		return {
			CODTYP: 'CTD',
		};
	},
	string(prop) {
		return {
			CODTYP: prop.maxLength > 0 ? 'A': 'AC0',
			LONG: prop.maxLength || '1', // weird for blob
		};
	},
	date(prop) {
		return {
			CODTYP: 'D',
		};
	},
	datetime(prop) {
		return {
			CODTYP: 'ADATIM',
		};
	},
	uuid(prop) {
		return {
			CODTYP: 'AUUID',
		};
	},
	binary(prop) {
		return {
			CODTYP: 'AB0',
			LONG: 1,
		};
	},
};

exports.fromProperty = prop => {
	const typefn = fromName[prop.type];
	if (typefn == null) throw new Error(prop.name + ': bad property type: ' + prop.type);
	return typefn(prop);	
};
