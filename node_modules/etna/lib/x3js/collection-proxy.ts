"use strict";
/// !doc
/// [x3js dev guide](x3js-development-guide) > [x3js APIs](x3js-apis) > x3js collection
///
/// # x3js collection
///
/// A collection holds a list of child instances, for example the lines of a sales order instance.
///
/// Collections are not created independently, they belong their parent instance.
/// They are accessed like instance properties, for example:
///
/// ``` javascript
/// const myLines = mySalesOrder.lines$`;
/// if (myLines.length > 0) { ... }
/// ```

import { _ } from 'streamline-runtime';
import * as ez from 'ez-streams';
import * as util from '../supervisor/util';
import * as x3jsUtil from '../x3js/util';
import * as instanceProxy from './instance-proxy';
import * as constants from '../supervisor/constants';
import { SlotCollection } from '../supervisor/dyn/types';


function path(col: SlotCollection) {
	return util.path(col.$parent, col.collection.jsName);
}

export const methods: { [name: string]: any; } = {
	///
	/// #### Direct access to child instances
	///
	/// * `coln.length`: the length of the collection.
	// implemented in proxy.

	/// * `coln[i]`: the ith element of the collection, an instance. 
	///   `i` must vary between 0 and `coln.length - 1`. 
	///   `null` is returned if `i` is out of range.
	// implemented in proxy.

	///
	/// #### Adding and removing elements
	///
	/// * `coln.add(data = {}, i = null)`: adds an child instance to `coln`. 
	///   `data` is the initial data for the child instance. 
	///   `i` is the index at which the child will be added.
	///   If omitted (or `null`), the child is added at the end. 
	///   Returns the new child instance which has been created and added to the collection.
	add(data: any, i?: number) {
		return x3jsUtil.wait(_ => {
			const x3Pos = this.add(_, i == null ? this.lines.length + 1 : i + 1);
			const line = this.index(_, x3Pos);
			Object.keys(this.collection.class.properties).forEach_(_, (_, k) => {
				if (data[k] !== undefined) line.set(_, k, data[k]);
			});
			return line;
		});
	},
	/// * `coln.remove(i)`: removes the child at index `i`.
	remove(i: number) {
		return x3jsUtil.wait(_ => {
			this.del(_, i + 1);
		});
	},
	/// * `coln.removeAll(_)`: removes all elements from the collection.
	removeAll() {
		return x3jsUtil.wait(_ => {
			this.empty(_);
		});
	},

	///
	/// #### Reader and conversion to array
	///
	/// Collections implement the ez-streams reader API. 
	/// You can use this API to filter, transform, pipe, iterate, etc. 
	/// For example:
	///
	/// ``` javascript
	/// mySalesOrder.lines$
	/// .filter((_, line) => line.qty$ >= 10)
	/// .forEach(_, (_, line) => {
	///   // do something with line
	/// });
	/// ```
	/// See https://github.com/Sage/ez-streams/blob/master/README.md for details.
	///
	/// Note: you can use this API to convert the collection to a JavaScript array:
	///
	/// ``` javascript
	/// var linesArray = mySalesOrder.lines$.toArray(_);
	/// ```
	// this one called implicitly by proxy -- do not document
	reader() {
		var i = 0;
		return ez.devices.generic.reader(_ => i < this.lines.length ? instanceProxy.create(this.index(_, ++i)) : undefined, _ => i = 0);
	},

	///
	/// #### Collection level error, warning and info messages
	///
	/// * `coln.error(_, text)`: adds error `text` to `coln`.
	error(text: string) {
		return x3jsUtil.wait(_ => {
			this.collection.class.ASETERROR(_, path(this), text, constants.CST_AERROR);
		});
	},
	/// * `coln.warn(_, text)`: adds warning `text` to `coln`.
	warn(text: string) {
		return x3jsUtil.wait(_ => {
			this.collection.class.ASETERROR(_, path(this), text, constants.CST_AWARNING);
		});
	},
	/// * `coln.info(_, text)`: adds info `text` to `coln`.
	info(text: string) {
		return x3jsUtil.wait(_ => {
			this.collection.class.ASETERROR(_, path(this), text, constants.CST_AINFO);
		});
	}
};

export function create(collection: SlotCollection): typeof methods {
	if (!collection) return null;
	const emptyReader: any = ez.devices.generic.empty.reader;
	return new Proxy(collection, {
		get(collection: SlotCollection, name: string) {
			if (name === 'length') {
				return collection.lines.length;
			} else if (methods[name]) {
				return methods[name].bind(collection);
			} else {
				var i = parseInt(name);
				if (!isNaN(i)) return instanceProxy.create(collection.lines[i]);
				else if (/^(inspect|toString|constructor)$/.test(name)) {
					return (collection as any)[name] && (collection as any)[name].bind(collection);
				} else if (emptyReader[name]) {// make it
					return emptyReader[name].bind(methods['reader'].call(collection));
				} else {
					throw new Error("invalid collection member: " + name);
				}
			}
		}
	});
};