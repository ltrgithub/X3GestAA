"use strict";
const util = require('../supervisor/util');
const x3jsUtil = require('./util');

function isReadOnly(_, instance) {
	if (instance._parent) return isReadOnly(_, instance._parent);
	return /^(4gl|incomplete)$/.test(instance.status(_));
}

module.exports = {
	type: 'object',
	defineMethod: 'defineEnum',
	hasSourceFile: true,
	subdir: 'enums',
	singular: 'enum',
	plural: 'enums',
	dictKey: 'LANCHP',
	entityName: 'x3jsEnum',
	metaName: 'APLSTD',
	metaFilter: {
		LAN: 'ENG',
	},
	metaSort: {
		LANCHP: 1,
		LANNUM: 1,
	},
	metaTransform(_, reader, writer) {
		var result, LANCHP = -Infinity;
		const flush = _ => {
			if (result) writer.write(_, result);
			result = null;
		};
		reader.forEach(_, (_, metaData) => {
			if (!metaData.LANCHP) return;
			//console.error(metaData);
			if (LANCHP !== metaData.LANCHP) {
				flush(_);
				LANCHP = metaData.LANCHP;
				result = Object.assign({}, metaData);
				result.ENTRIES = [];
			}
			if (metaData.LANNUM != null) {
				result.ENTRIES.push(metaData);
			}
		});
		flush(_);
	},	
	properties: {
		module: {
			type: 'string',
		},
		name: {
			type: 'string',
		},
		dictId: {
			type: 'integer',
			dictCode: 'LANCHP',
		},
		title: {
			type: 'string',
			dictCode: 'LANMES',
		},
	},
	collections: {
		values: {
			type: 'object',
			key: 'name',
			metaCode: 'ENTRIES',
			codeGen: 'dictIdOnly',
			orderCode: 'LANNUM',
			genName(meta) { return util.upcase((meta.LANMES || '').substring(0, 30)) },
			properties: {
				dictId: {
					type: 'integer',
					dictCode: 'LANNUM',
				},
				title: {
					type: 'string',
					dictCode: 'LANMES',
				},
			},
			rules: {
				readOnlyProperty: isReadOnly,
			},
		},
	},
	rules: {
		readOnlyProperty: isReadOnly,
	}
};
