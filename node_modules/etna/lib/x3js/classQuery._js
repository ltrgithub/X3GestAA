"use strict";
/// !doc
/// [x3js dev guide](x3js-development-guide) > [x3js APIs](x3js-apis) > x3js class query
/// 
/// # x3js class query
/// 
/// _class query_ objects are returned by a `query` call on a class:
/// 
/// ```javascript
///  const MyClass = instance.$classes.MyClass$;
///  const query = MyClass.query(); // query object
///  ```
/// 
/// Class query objects have an `execute(_)`  method which produces an `ez-streams`  _reader_ on which 
/// you can chain methods to filter, transform, pipe, iterate, etc.
/// See [ez-streams documentation](https://github.com/Sage/ez-streams/blob/master/README.md) for details.
/// 
/// For example, you can read a class, transform the instances returned by the query
/// and write the result to a JSON file in a single statement:
/// 
/// ```javascript
/// MyClass.query()
/// .where({ user: 'ME' }) // select only my instances
/// .orderBy({ createdDate: +1 }) // order by ascending creation date
/// .execute(_) // execute the query to get an ez-streams reader
/// .map(myInstanceMapper)
/// .transform(ez.transforms.json.formatter()) // convert records to JSON
/// .pipe(_, ez.devices.file.text.writer('myfile.json')); // pipe to the output file
/// ```
const ez = require('ez-streams');
const Cache = require("etna/lib/supervisor/cache").Cache;
const instanceProxy = require('./instanceProxy');

function combineFilters(f1, f2) {
	return Object.keys(f2).reduce((r, k) => {
		if (r[k]) {

		}
	}, Object.assign({}, f1));
}

class ClassQuery {
	constructor(clas, options) {
		this.class = clas;
		this.wheres = [];
		this.where(options && options.where);
		this.orderBy = options && options.orderBy;
	}
	/// 
	/// #### Building a query
	/// 
	/// * `query.where(condition)`: adds a _where_ clause to the query.  
	///    `condition` is described in [instance filters](x3js-instance-filters).  
	///    Returns `this` for chaining.
	where(condition) {
		if (condition) this.options.filters.push(condition);
		return this;
	}
	/// * `query.orderBy(order)`: specifies the _order by_ clause of the query.  
	///   `order`  is an object with column names as keys and +1 / -1 values (asc / desc respectively).  
	///    Returns `this` for chaining.
	orderBy(order) {
		this.orderBy = order;
	}
	/// 
	/// #### Executing a query
	/// 
	/// * `query.execute(_)`:  executes the query and returns an ez-streams reader on 
	///   which other methods can be chained.
	execute(_) {
		const clas = this.class;
		const recordMapper = (_, record) => {
			return instanceProxy.create(clas.supervisor.new(_, 'Instance', clas).afterCreate(_, record));
		};

		const properties = clas.properties;
		const param = clas.supervisor.sqlDriver.param;
		const tableNames = [clas.table.name + ' T'];
		const columnNames = [];
		const wheres = [];
		var orderBy;
		const descs = [];
		const params = [];
		const sqlOpts = {};
		const cache = new Cache();

		// add link with ACCES if ACCSTR is filled.
		if (clas.data.ACCSTR) {
			tableNames.push("ACCES ACC");
			params.push(glob.context.x3session.actx.$USER(_));
			wheres.push("ACC.USR_0 = " + param(params.length - 1));
			wheres.push("ACC.CODACC_0 = T." + clas.data.ACCSTR + "_0");
			wheres.push("ACC.CONSUL_0 = 2");
		}

		Object.keys(properties).forEach_(_, function(_, name) {
			if (properties[name].getSql) properties[name].getSql(_, columnNames, tableNames, wheres, params, descs, cache, false, sqlOpts);
		});

		if (this.orderBy) {
			orderBy = Object.keys(this.orderBy).map(k => {
				const prop = clas.membersByJsName[k];
				if (!prop) throw new Error("sort property not found: " + clas.jsName + '.' + k);
				return prop.column.sqlName() + (this.options.sort[k] < 0 ? ' desc' : ' asc');
			});
		} else {
			// sort by primary key
			orderBy = clas.tableIndex && clas.tableIndex.sqlNames().map(name => name + ' asc');
		}
		if (this.wheres.length > 0) {
			const filters = this.wheres.length === 1 ? this.wheres[0] : {
				$and: this.wheres,
			};
			var qsel = clas.queryToSelect(_, filters, params);
			if (qsel !== "") wheres.push(qsel);
		}
		var sql = "select T.UPDTICK_0, " + columnNames.join(',') + " from " + tableNames.join(',');
		if (wheres.length) sql += " where (" + wheres.join(') and (') + ')';
		if (orderBy.length) sql += " order by " + orderBy.join(',');
		var reader = this.class.supervisor.sqlReader(_, sql, params, sqlOpts).map(recordMapper);
		// investigate cache later
		// if (cache.isActivated) reader = reader.transform(cache.transform());
		return reader;
	}
}

exports.ClassQuery = ClassQuery;
