"use strict";
/// !doc
/// [x3js dev guide](x3js-development-guide) > [x3js APIs](x3js-apis) > x3js enums
///
/// # x3js enums
///
/// Enums are lists of integer constants.
///
/// Enums values have localized texts which are managed in the database (SQL for now, mongo later).
///
/// #### Defining an enum
///
/// An enum is defined with the `x3js.defineEnum(...)` function:
///
/// ``` javascript
/// import * as x3js from 'x3js';
///
/// export default x3js.defineEnum({
/// 	name: 'HighLow',
/// 	dictId: 6,
/// 	values: {
/// 		HIGH: 1,
/// 		LOW: 2,
/// 	}
/// });
/// ```
///
/// #### Using an enum
///
/// ``` javascript
/// import HighLow from '../../system/enums/high-low');
///
/// // assigning one of its values
/// obj.level$ = HighLow.HIGH;
/// ```
///
/// Note; an exception will be thrown if you mistype the enum code (`HighLow.HIGGH` for example).

require('harmony-reflect'); // to get ES6 Proxy API
const runtime = require('etna/lib/engine/runtime/runtime');
const glob = require('streamline-runtime').globals;
const x3jsUtil = require('./util');

class EnumHandler {
	constructor(def) {
		this.def = def;
	}
	get $proxyType() { return 'enum'; }
	/*
	get def() {
		if (this._def) return this._def;
		const supervisor = glob.context.x3session && glob.context.x3session.supervisor;
		if (!supervisor) throw new Error("cannot access enum: no supervisor in context");
		const path = this.path;
		const segs = path.split('.');
		if (segs.length !== 2) throw new Error(`invalid enum path syntax: ${ path }`);
		const script = supervisor.loadJsScriptSync('enums', segs.join('.'));

		if (!script) throw new Error(`enum script not found: ${ path }`);
		if (!script.default) throw new Error(`no default in enum script: ${ path }`);
		return this._def = script.default;
	}*/
	///
	/// #### Retrieving member names
	///
	/// * `MyEnum.$name(val)`: reverse lookup 
	///   Returns the name given an enum value.
	$name(val) {
		const keys = Object.keys(this.def.values);
		// fast return when enum has all values between 1 and max

		if (this.def.values[keys[val - 1]] === val) return keys[val - 1];
		// slower lookup
		for (var i = 0; i < keys.length; i++) {
			if (this.def.values[keys[i]] === val) return keys[i];
		}
		return null;
	}
	/// * `MyEnum.$names()`: returns the list of enum names, as an array of strings.
	$names() {
		return Object.keys(this.def.values);
	}
	/// * `MyEnum.$values()`: returns the list of enum values, as an array of integers.
	$values() {
		return Object.keys(this.def.values).map(name => this.def.values[name]);
	}
	///
	/// #### Retrieving localized texts
	///
	/// * `MyEnum.$text(_, val)`: returns localized text for the enum value.
	$text(_, val) {
		const text = runtime.functions.MESS.fn(_, val, this.def.dictId, 1);
		if (text == null) throw new Error(`${ this.def.name }: invalid id, text is null`);
		return text;
	}
}

x3jsUtil.fiberize(EnumHandler);

const proxies = {};

exports.define = def => {
	if (!def.module) throw new Error(`enum module missing`);
	if (!def.name) throw new Error(`enum name missing`);
	//if (!def.dictId) throw new Error(`${def.name}: dict code missing`);
	if (!def.values) throw new Error(`${ def.name }: values missing`);
	var key = def.module + '.' + def.name;
	return proxies[key] || (proxies[key] = new Proxy(new EnumHandler(def), {
		get(handler, name) {
			if (name[0] === '$') {
				const member = handler[name];
				if (!member) throw new Error(`${ handler.name }: invalid member: ${ name }`);
				return typeof member === 'function' ? member.bind(handler) : member;
			}
			const val = handler.def.values[name];
			if (val == null) throw new Error(`invalid enum value: ${ name }, expected one of ${ Object.keys(handler.$values).join(', ') }`);
			return val;
		},
		ownKeys(handler) {
			return Object.keys(handler.$values);
		}		
	}));
};
