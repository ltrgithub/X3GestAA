/// !doc
/// [x3js dev guide](x3js-development-guide) > [x3js APIs](x3js-apis) > x3js parameters
///
/// # x3js parameters
///

const glob = require('streamline-runtime').globals;
const constants = require('etna/lib/supervisor/constants');

function checkContext() {
	if (!glob.context.x3session) throw new Error('invalid context: no x3 session');
}

module.exports = {
	///
	/// * `x3js.parameters.folder(_, paramCode)` 
	/// * `x3js.parameters.user(_, paramCode)` 
	/// * `x3js.parameters.site(_, siteCode, paramCode)` 
	/// * `x3js.parameters.company(_, companyCode, paramCode)` 
	/// * `x3js.parameters.legislation(_, legCode, paramCode)` 
	///   returns parameter value. 
	folder(_, paramCode, def) {
		checkContext();
		return glob.context.x3session.actx.get(_, 'APARAM').getJsValue(_, constants.CST_ALEVFOLD, '', paramCode, def);
	},
	user(_, paramCode, def) {
		checkContext();
		return glob.context.x3session.actx.get(_, 'APARAM').getJsValue(_, constants.CST_ALEVUSR, '', paramCode, def);
	},
	site(_, siteCode, paramCode, def) {
		checkContext();
		return glob.context.x3session.actx.get(_, 'APARAM').getJsValue(_, constants.CST_ALEVFCY, siteCode, paramCode, def);
	},
	company(_, companyCode, paramCode, def) {
		checkContext();
		return glob.context.x3session.actx.get(_, 'APARAM').getJsValue(_, constants.CST_ALEVCPY, companyCode, paramCode, def);
	},
	legislation(_, legCode, paramCode, def) {
		checkContext();
		return glob.context.x3session.actx.get(_, 'APARAM').getJsValue(_, constants.CST_ALEVLEG, legCode, paramCode, def);
	}
};