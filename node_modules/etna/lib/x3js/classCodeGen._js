"use strict";

const babylon = require('babylon');
const generate = require('babel-generator').default;
const traverse = require('babel-traverse').default;
const fs = require('fs');
const fsp = require('path');
const x3jsUtil = require('./util');
const jsEscape = x3jsUtil.jsEscape;

function propertyTemplate(_, prop) {
	return `${prop.jsName}: {
		dictCode: '${prop.name}',
		title: '${jsEscape(prop.title(_, 'ENG'))}',
	}`;
}

function propertyFilter(prop) {
	return !x3jsUtil.isSysProperty(prop.name);
}

function template(_, clas) {
	return `import * as x3js from 'x3js';

	export default x3js.defineClass({
  		module: '${clas.moduleName}',
  		name: '${clas.jsName}',
  		title: '${jsEscape(clas.title(_, 'ENG'))}',
  		dictCode: '${clas.data.CODCLA}',
  		properties: {${Object.keys(clas.properties)
  			.filter(k => propertyFilter(clas.properties[k]))
  			.map_(_, (_, k) => propertyTemplate(_, clas.properties[k])).join(',')}},
	});`;
}

function mkdirp(_, path) {
	if (fs.exists(path, _, _)) return;
	mkdirp(_, fsp.join(path, '..'));
	console.error(`creating directory ${path}`);
	fs.mkdir(path, _);
}

function removeSourceInfo(ast) {
	traverse(ast, {
  		enter(path) {
  			delete path.node.loc;
  		}
	});
	delete ast.loc;
	ast.tokens = [];
}

exports.generateSourceFile = function(_, clas) {
	const path = clas.supervisor.findJsScript(_, 'classes', clas.jsPath, true);
	// ENABLE LATER
	//const source = fs.exists(path, _, _) ? fs.readFile(path, 'utf8', _) : template(_, clas);
	const source = template(_, clas);
	const ast = babylon.parse(source, { sourceType: 'module' });
	removeSourceInfo(ast);
	//console.error(ast);
	const output = generate(ast, {}, '');
	mkdirp(_, fsp.dirname(path));
	fs.writeFile(path, output.code, 'utf8', _);
	clas.x3jsSourceFile = path;
	return output;
}

