#<AdxTL>@(#)0.0.0.0 $Revision$
Local Clbfile RESULT
Call OUVRE_TRACE("QLFAR_FORMULA") From LECFIC
RESULT = func TESTSUITE()

Call FERME_TRACE From LECFIC
GTRACE = "QLFAR_FORMULA_"+GACTX.USER
Call LEC_TRACE From LECFIC

End

Funprog TESTSUITE()
Local Integer EX
# There are 3 format types - String, Date and Numeric with various options in each type

Callmet GACTX.ACTX_SET_LANISO("fr-FR")
Call TESTSUITE_START("FORMULA", "X3 script formulas") From AXUNIT
Call ADD_TESTCASE("TC_EVALUE", "Evalue", 33) From AXUNIT
Call ADD_TESTCASE("TC_PARSE", "Parse", 16) From AXUNIT
Call ADD_TESTCASE("TC_ASSIGN", "Assign", 35) From AXUNIT

Local Clbfile  SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("FORMULA", "FORMULA")
End SUITE_RESULT


Subprog TC_EVALUE
Local Integer EX
Onerrgo ERROR

Local Char TT(255)
Local Libelle  ALIBELLE
Local Shortint ASHORTINT
Local Date     ADATE
Local Integer  AINT
Local Double   ADOUBLE
Local Decimal  ADECIMAL
Local Char     ACHAR10(50)
Local Schar    ASCHAR
Local Blbfile  ABLOB(2)
Local Clbfile  ACLOB(2)
Local Uuident  AUUID
Local Datetime ADATETIME
Local Tinyint  ATINYINT

TT="Check case sensitivity"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Local Integer AINT2
AINT2 = 7
AINT=evalue("aint2+12")
Call CHECK_EQUAL(AINT,19) From AXUNIT

TT="Evalue Libelle"
Call CHECK_EQUAL(TT,TT) From AXUNIT
ALIBELLE=evalue("1+1")
Call CHECK_EQUAL(ALIBELLE,2) From AXUNIT
#
TT="Evalue Shortint"
Call CHECK_EQUAL(TT,TT) From AXUNIT
ASHORTINT = 75
ASHORTINT = evalue("ASHORTINT + 150")
Call CHECK_EQUAL(ASHORTINT,225) From AXUNIT
#
TT="Evalue Date"
Call CHECK_EQUAL(TT,TT) From AXUNIT
ADATE=[31/01/2014]
ADATE=evalue("ADATE+17")
Call CHECK_EQUAL(ADATE,[17/02/2014]) From AXUNIT

TT="Evalue integer"
Call CHECK_EQUAL(TT,TT) From AXUNIT
AINT=1000
AINT = evalue("AINT+2000")
Call CHECK_EQUAL(AINT,3000) From AXUNIT

TT="Evalue double"
Call CHECK_EQUAL(TT,TT) From AXUNIT
ADOUBLE = 50.17
ADOUBLE = evalue("ADOUBLE+3987.23")
Call CHECK_EQUAL(ADOUBLE,4037.40) From AXUNIT

TT="Evalue decimal"
Call CHECK_EQUAL(TT,TT) From AXUNIT
ADECIMAL = 1000.25
ADECIMAL = evalue("ADECIMAL+1200.50")
Call CHECK_EQUAL(ADECIMAL,2200.75) From AXUNIT

TT="Evalue char"
Call CHECK_EQUAL(TT,TT) From AXUNIT
ACHAR = "ABC"
ACHAR = evalue("ACHAR+'DEF'")
Call CHECK_EQUAL(ACHAR,"ABCDEF") From AXUNIT

TT="Evalue schar"
Call CHECK_EQUAL(TT,TT) From AXUNIT
ASCHAR = "ABC"
ASCHAR = evalue("ASCHAR+'DEF'")
Call CHECK_EQUAL(ASCHAR,"ABCDEF") From AXUNIT

TT="Evalue clbfile"
Call CHECK_EQUAL(TT,TT) From AXUNIT
ACLOB="AAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
ACLOB = evalue("ACLOB+'B'")
Call CHECK_EQUAL(ACLOB,"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB") From AXUNIT

TT="Evalue uuident"
Call CHECK_EQUAL(TT,TT) From AXUNIT
AUUID = evalue("getuuid")
Call CHECK_NOTEQUAL(AUUID,NullUuid) From AXUNIT

TT="Evalue datetime"
Local Datetime ADATETIME2
Call CHECK_EQUAL(TT,TT) From AXUNIT
ACHAR="2012-10-03T07:55:30Z"
ADATETIME2 = gdatetime$(ACHAR)
ADATETIME = evalue("gdatetime$(ACHAR)")
Call CHECK_EQUAL(ADATETIME,ADATETIME2) From AXUNIT

TT="Evalue Tinyint"
Call CHECK_EQUAL(TT,TT) From AXUNIT
ATINYINT=evalue("1+3")
Call CHECK_EQUAL(ATINYINT,4) From AXUNIT

TT="Evalue global variable"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Local Integer TMP
ATINYINT=evalue("[V]CST_AYES")
Call CHECK_EQUAL(ATINYINT,2) From AXUNIT

TT="Evalue system variable"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Local Integer TMP
TMP=evalue("[S]adxdcs")
Call CHECK_EQUAL(TMP,[S]adxdcs) From AXUNIT

TT="Evalue - string array"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Local Char STR_ARRAY(30)(1..3)
Local Integer TMP
STR_ARRAY(1)="1+12+13+"
STR_ARRAY(2)="14+15"
STR_ARRAY(3)="2+31"
# Equal to 1+12+13+14+152+31 = 223
TMP=evalue(STR_ARRAY)
Call CHECK_EQUAL(TMP,223) From AXUNIT

TT="Evalue returns error"
EX=6
ACHAR=evalue("A+B+C")
End


Subprog TC_PARSE
Local Integer EX
Onerrgo ERROR
Local Char TT(255)
Local Integer VALID
TT="Parse"
Call CHECK_EQUAL(TT,TT) From AXUNIT

[L]VALID=parse("1+1",0)
Call CHECK_EQUAL([L]VALID,0) From AXUNIT

[L]VALID = parse("ASHORTINT + 150")
Call CHECK_EQUAL([L]VALID,0) From AXUNIT

[L]VALID = parse("ASHORTINT + 150",0)
Call CHECK_EQUAL([L]VALID,0) From AXUNIT

[L]VALID=parse("ADATE+17")
Call CHECK_EQUAL([L]VALID,0) From AXUNIT

[L]VALID=parse("ADATE+17",0)
Call CHECK_EQUAL([L]VALID,0) From AXUNIT

[L]VALID = parse("AINT+2000",0)
Call CHECK_EQUAL([L]VALID,0) From AXUNIT

[L]VALID = parse("ADOUBLE+3987.23",0)
Call CHECK_EQUAL([L]VALID,0) From AXUNIT

[L]VALID = parse("ADECIMAL+1200.50",0)
Call CHECK_EQUAL([L]VALID,0) From AXUNIT

[L]VALID = parse("ACHAR+'DEF'",0)
Call CHECK_EQUAL([L]VALID,0) From AXUNIT

[L]VALID = parse("ASCHAR+'DEF'",0)
Call CHECK_EQUAL([L]VALID,0) From AXUNIT

[L]VALID = parse("ACLOB+'B'",0)
Call CHECK_EQUAL([L]VALID,0) From AXUNIT

[L]VALID = parse("getuuid",0)
Call CHECK_EQUAL([L]VALID,0) From AXUNIT

[L]VALID = parse("gdatetime$(ACHAR)",0)
Call CHECK_EQUAL([L]VALID,0) From AXUNIT

[L]VALID = parse("A+B+C",0)
Call CHECK_EQUAL([L]VALID,0) From AXUNIT

TT="Parse error - 5"
Call CHECK_EQUAL(TT,TT) From AXUNIT
EX=5
[L]VALID = parse("DATE",0)
End


Subprog TC_ASSIGN
Local Char TT(255)
Local Integer EX
Onerrgo ERROR
Local Libelle  ALIBELLE
Local Shortint ASHORTINT
Local Date     ADATE
Local Integer  AINT
Local Double   ADOUBLE
Local Decimal  ADECIMAL
Local Char     ACHAR(50)
Local Schar    ASCHAR
Local Clbfile  ACLOB(2)
Local Uuident  AUUID
Local Datetime ADATETIME
Local Tinyint  ATINYINT
#
TT="Check case sensitivity"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Assign "aint" With 7
Call CHECK_EQUAL(AINT,7) From AXUNIT

TT="Assign Libelle"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Assign "ALIBELLE" With 7
Call CHECK_EQUAL(ALIBELLE,7) From AXUNIT
#
TT="Assign Shortint"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Assign "ASHORTINT" With -17000
Call CHECK_EQUAL(ASHORTINT,-17000) From AXUNIT
#
TT="Assign Date"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Assign "ADATE" With "20000131"
Call CHECK_EQUAL(ADATE,[31/01/2000]) From AXUNIT

TT="Assign Date + days"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Assign "ADATE" With [31/01/2000]+17
Call CHECK_EQUAL(ADATE,[17/02/2000]) From AXUNIT

TT="Assign integer"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Assign "AINT" With 72000
Call CHECK_EQUAL(AINT,72000) From AXUNIT

TT="Assign double"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Assign "ADOUBLE" With 3987.23
Call CHECK_EQUAL(ADOUBLE,3987.23) From AXUNIT

TT="Assign decimal"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Assign "ADECIMAL" With 1200.50
Call CHECK_EQUAL(ADECIMAL,1200.50) From AXUNIT

TT="Assign char"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Assign "ACHAR" With "Text"
Call CHECK_EQUAL(ACHAR,"Text") From AXUNIT

TT="Assign schar"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Assign "ASCHAR" With "ABC"
Call CHECK_EQUAL(ASCHAR,"ABC") From AXUNIT

TT="Assign clbfile"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Assign "ACLOB" With "ZZZZZZZZZZZZZZZZZZZ"+"12312313"
Call CHECK_EQUAL(ACLOB,"ZZZZZZZZZZZZZZZZZZZ12312313") From AXUNIT

TT="Assign uuident"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Assign "AUUID" With getUuid
Call CHECK_NOTEQUAL(AUUID,NullUuid) From AXUNIT

TT="Assign datetime"
Local Datetime ADATETIME2
Call CHECK_EQUAL(TT,TT) From AXUNIT
ACHAR="2012-10-03T07:55:30Z"
ADATETIME2 = gdatetime$(ACHAR)
Assign "ADATETIME" With gdatetime$(ACHAR)
Call CHECK_EQUAL(ADATETIME,ADATETIME2) From AXUNIT

TT="Assign Tinyint"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Assign "ATINYINT" With 7
Call CHECK_EQUAL(ATINYINT,7) From AXUNIT

TT="Assign global variable"
Call CHECK_EQUAL(TT,TT) From AXUNIT
Global Char GTMP(10)
Assign "GTMP" With "ABCD"
Call CHECK_EQUAL(GTMP,"ABCD") From AXUNIT

TT="Assign generates error=13-Numeric capacity exceeded"
Call CHECK_EQUAL(TT,TT) From AXUNIT
EX=13
Assign "ATINYINT" With -12

TT="Assign generates error=10-Type incomapatiblity"
Call CHECK_EQUAL(TT,TT) From AXUNIT
EX=10
Assign "ACHAR" With getUuid

TT="Assign generates error=6-Variable does not exist"
Call CHECK_EQUAL(TT,TT) From AXUNIT
EX=6
Assign "INV_VARIABLE" With getUuid

#TT="Assign generates error=10-Type incompatibility on class assignment"
#Call CHECK_EQUAL(TT,TT) From AXUNIT
#Local Instance MY_OBJECT Using C_ACHR
#EX=10
#Assign "MY_OBJECT" With NewInstance C_ACHR AllocGroup Null
End

$ERROR
Call CHECK_EQUAL(errn, EX) From AXUNIT
EX = 0
Resume
