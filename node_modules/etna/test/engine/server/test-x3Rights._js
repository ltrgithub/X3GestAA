"use strict";
QUnit.module(module.id);

var glob = require('streamline/lib/globals');
var runtime = require("etna/lib/engine/runtime/runtime");
var helper = require("etna/test/engine/fixtures/helper");
var bactx = require("etna/lib/supervisor/builtins/ACTX");
var ACTX = require("etna/lib/supervisor/builtins/ACTX").constructor;
var trace = console.log;

var script;
var superv;

asyncTest("start", function(_) {
	var supervisor = require('etna/lib/supervisor/supervisor');
	var config = require("etna/lib/util/nodeconfig").config;
	var etnaConfig = helper.getEtnaConfigForUnitTest(_, config.unit_test.etnaEndPoint);
	superv = supervisor.create(_, etnaConfig);
	require("etna/lib/engine/runtime/variables").initStack(superv);
	require("etna/lib/supervisor/builtins/ACTX").init(_, etnaConfig.session, superv);
	ok(true, "start");
	start();
});


function initStack() {
	var frame = glob.context.x3frame;
	frame.values = {};
	frame.types = {};
	return frame.values;
}

asyncTest("TC_X3RIGHTS", function(_) {
	var locals = initStack();
	var login = "ADC";
	try {
		var actx = new ACTX(glob.context.x3session.actx.supervisor).init(_,login,"fr-fr");
	} catch (ex) {
		ok(ex.statusCode === 401, login + " login undefined");
	}
	login = "AQCR";
	var actx = new ACTX(glob.context.x3session.actx.supervisor).init(_,login,"fr-fr");
	var loginOk = actx.getJsonRights(_);
	ok(loginOk !== undefined, login + " correct login");
	ok(loginOk.hasOwnProperty("_accessCodes") === true, "accessCodes");
	ok(loginOk.hasOwnProperty("_authorizedFunctions") === true, "authorizedFunctions");
	ok(loginOk.hasOwnProperty("_authorizedRepresentations") === true, "authorizedRepresentations");
	start();
});
