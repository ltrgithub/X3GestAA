"use strict";
var done;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});

var fs = require("fs");
var Parser = require("etna/lib/engine/parser").Parser;
var jsgen = require('etna/lib/engine/jsgen');

var glob = require('streamline/lib/globals');
var runtime = require("etna/lib/engine/runtime/runtime");

glob.context.x3frame = {
	context: {
		messages: {
			200: "200"
		}
	}
};

function compile(source, expected) {
	try {
		var path = '.';
		var parsed = new Parser(source, path).parse();
		console.log(JSON.stringify(parsed.node));
		var transformed = jsgen.generate(parsed.node, path);
		console.log(JSON.stringify(transformed));
		ok(true == expected, "OK : " + source);
	} catch (e) {
		console.log(e.message);
		ok(false == expected, "NOK : " + source);
	}
}

asyncTest("attributes", function(_) {
	compile("INS1.C03P01.$isReadOnly = [V]CST_ATRUE", true);
	compile("INS1.$isReadOnly = [V]CST_ATRUE", true);
	compile("INS1.COL(0).$isReadOnly = [V]CST_ATRUE", true);
	compile("INS1.COL(1).$isReadOnly = [V]CST_ATRUE", true);
	compile("ATT = INS1.$isReadOnly", true);
	compile("ASTATUS = fmet INS1.C03P01.ASETATTR('$isReadOnly',[V]CST_ATRUE)", true);
	compile("ATTRIBUTE = fmet INS1.C03P01.AGETATTR('$isReadOnly')", true);
	compile('Callmet INS1.COL.ASETCOLUMNATTR("C03P02","$isHidden"  ,[V]CST_AFALSE)', true);
	compile('Call CHECK_EQUAL(Fmet INS1.COL.AGETCOLUMNATTR("C03P02","$isReadOnly"),[V]CST_ATRUE) From AXUNIT', true);
	compile('INS1.COL(0).C03P02.$isReadOnly = [V]CST_ATRUE', true);
	compile('Call CHECK_EQUAL(INS1.COL(0).C03P02.$isReadOnly,[V]CST_AFALSE) From AXUNIT', true);
	compile("INS1.$isReadOnly.PROP = [V]CST_ATRUE", false);

	start();
});

asyncTest("Local", function(_) {
	compile('MESSAGE = GOT_MSG(I).MES', true);
	compile('Local Instance UOM1 Using C_TABUNIT', true);
	compile('Local Instance UOM1, UOM2 Using C_TABUNIT', true);
	compile('Local Instance UOM1 C_TABUNIT', false);
	start();
});

asyncTest("max", function(_) {
	compile('LANNUM = max(this.APARENT.AST(1..maxtab(this.APARENT.AST)).LANNUM)', true);
	start();
});

asyncTest("DIM", function(_) {
	compile('RESULT = dim(AINSTANCE)', true);
	compile('RESULT = dim(AINSTANCE.ACTX)', true);
	compile('RESULT = dim(AINSTANCE.ACTX.LAN)', true);
	compile('If dim(AINSTANCE.ACTX.LAN)>0\nEndif', true);

	start();
});

asyncTest("FOR", function(_) {
	compile('For I=0 To J-1\nNEXT I', true);
	compile('For [L]I=0 To J-1\nNEXT [L]I', true);
	compile('If WMAJCOD="M":  Rewrite [CAL2] : Else : Write [CAL2] : Endif', true);
	compile('adxifs = tab$', true);
	start();
});

asyncTest("DECL", function(_) {
	compile('Local Integer AI(10)', true);
	compile('Local Integer AI([F:LEN])', true);
	start();
});


test("stop", function() {
	done = true;
	start();
});