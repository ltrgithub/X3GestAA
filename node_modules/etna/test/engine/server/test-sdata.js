"use strict";
QUnit.module(module.id);
var Sdata = require("etna/lib/engine/compilers/sdatagen");
var dates = require('etna/lib/engine/runtime/dates');
var base = require('syracuse-core').types.datetime;
var datetime = require('syracuse-core').types.datetime;

function testExpression(expression, expected) {
	var tab = {};
	tab["GACTX.USER"] = '"VPO"';
	tab["[V]CST_ANO"] = "false";
	tab["[V]CST_AYES"] = "true";
	tab["[F:ATB]FLG"] = "EXPPROPFLG";
	var filter = Sdata.x3ToSdata(tab, expression);
	var got = filter();
	strictEqual(expected, got);
}

test('basic', 34, () => {
	testExpression("FIELD01 = 123", '(FIELD01 eq 123)');
	testExpression("FIELD01 = 'F1_020'", '(FIELD01 eq "F1_020")');
	testExpression("FIELD01 <> 'F1_020'", '(FIELD01 ne "F1_020")');
	testExpression("FIELD01 >= 'F1_020'", '(FIELD01 ge "F1_020")');
	testExpression("'F1_020' > FIELD01", '("F1_020" gt FIELD01)');
	testExpression("FIELD01 <= 'F1_020'", '(FIELD01 le "F1_020")');
	testExpression("FIELD01 < 'F1_020'", '(FIELD01 lt "F1_020")');
	testExpression("'F1_020' >= FIELD01", '("F1_020" ge FIELD01)');
	testExpression("left$(FIELD01,5) = 'F1_01'", '(left(FIELD01, 5) eq "F1_01")');
	testExpression("FIELD01 = 'F1_020' or FIELD01 = 'F1_040'", '((FIELD01 eq "F1_020") or (FIELD01 eq "F1_040"))');
	testExpression("FIELD01 >= 'F1_020' and  FIELD01 <='F1_035'", '((FIELD01 ge "F1_020") and (FIELD01 le "F1_035"))');
	testExpression("FIELD01 >= 'F1_020' and  FIELD02 <='F2_010'", '((FIELD01 ge "F1_020") and (FIELD02 le "F2_010"))');
	testExpression("[F:ATB]FIELD01 = 123", '([F:ATB]FIELD01 eq 123)');
	testExpression("[F:ATB]FLG = [V]CST_ANO", '(EXPPROPFLG eq false)');
	testExpression("[F:ATB]FLG <> [V]CST_AYES", '(EXPPROPFLG ne true)');

	testExpression("[F:ACV]TYP=1 |[F:ACV]TYP=3", '(([F:ACV]TYP eq 1) or ([F:ACV]TYP eq 3))');
	testExpression("[F:TUN]UOMTYP=3|[F:TUN]UOMTYP=4", '(([F:TUN]UOMTYP eq 3) or ([F:TUN]UOMTYP eq 4))');
	testExpression("[F:EXS]VISA<>'' & [F:EXS]STA<>3", '(([F:EXS]VISA ne "") and ([F:EXS]STA ne 3))');
	testExpression("mid$(STASTO,1,1)='A'", '(left(STASTO, 1) eq "A")');
	testExpression("mid$(STASTO,2,1)='A'", '(substring(STASTO, 2, 1) eq "A")');
	testExpression("mid$(STASTO,2,3)='AAA'", '(substring(STASTO, 2, 3) eq "AAA")');
	testExpression("len(PLI)<>0", '(length(PLI) ne 0)');

	testExpression("(A=1)|(B=2 & A=1)", '((A eq 1) or ((B eq 2) and (A eq 1)))');
	testExpression("(A=1|B=2) & (A=1)", '(((A eq 1) or (B eq 2)) and (A eq 1))');
	testExpression("A=1 & B=2", '((A eq 1) and (B eq 2))');
	testExpression("A=1 & B=2 & C=3", '((A eq 1) and ((B eq 2) and (C eq 3)))');
	testExpression("A=1 & B=2 | C=3", '(((A eq 1) and (B eq 2)) or (C eq 3))');
	testExpression("A=1 & B=2 | C=3 | D=4", '(((A eq 1) and (B eq 2)) or ((C eq 3) or (D eq 4)))');
	testExpression("A=1 & B=2 | C=3 & D=4", '(((A eq 1) and (B eq 2)) or ((C eq 3) and (D eq 4)))');

	testExpression("[F:AWS]DEST=GACTX.USER", '([F:AWS]DEST eq "VPO")');
	testExpression("find([F:AWS]CODWRK,'POCSIGNOT','POCSIGREJ','POCSIGNCR')<>0",
		'([F:AWS]CODWRK in ("POCSIGNOT", "POCSIGREJ", "POCSIGNCR"))');
	testExpression("([F:AWS]CODEVT='POCSIG') & find([F:AWS]CODWRK,'POCSIGNOT','POCSIGREJ','POCSIGNCR')<>0",
		'(([F:AWS]CODEVT eq "POCSIG") and ([F:AWS]CODWRK in ("POCSIGNOT", "POCSIGREJ", "POCSIGNCR")))');
	testExpression("([F:AWS]CODEVT='POCSIG') & find([F:AWS]CODWRK,'POCSIGNOT','POCSIGREJ','POCSIGNCR')<>0 & [F:AWS]FLGSIG=2",
		'(([F:AWS]CODEVT eq "POCSIG") and (([F:AWS]CODWRK in ("POCSIGNOT", "POCSIGREJ", "POCSIGNCR")) and ([F:AWS]FLGSIG eq 2)))');
	testExpression("([F:AWS]CODEVT='POCSIG') & find([F:AWS]CODWRK,'POCSIGNOT','POCSIGREJ','POCSIGNCR')<>0 & [F:AWS]FLGSIG=2 & [F:AWS]DEST=GACTX.USER",
		'(([F:AWS]CODEVT eq "POCSIG") and (([F:AWS]CODWRK in ("POCSIGNOT", "POCSIGREJ", "POCSIGNCR")) and (([F:AWS]FLGSIG eq 2) and ([F:AWS]DEST eq "VPO"))))');
});

test('date', 6, () => {
	var today = dates.functions.DATE$.fn();
	ok(true, "today:" + today.toString("yyyyMMdd"));
	//testExpression("FIELD02 = date$", "(FIELD02 eq @215-01-21@)");
	testExpression("FIELD02 = date$", "(FIELD02 eq @" + today.toString("yyyy-MM-dd") + "@)");

	var yesterday = today.x3Sub(1);
	ok(true, "yesterday:" + yesterday);
	var expected = "@" + yesterday.toString("yyyy-MM-dd") + "@";
	testExpression("FIELD02 = (date$-1)", "(FIELD02 eq @" + yesterday.toString("yyyy-MM-dd") + "@)");

	testExpression("ORDDAT>=[01/01/2012]", '(ORDDAT ge @2012-01-01@)');

	testExpression("[F:SQH]VLYDAT <> [0/0/0] & [F:SQH]VLYDAT < date$  & [F:SQH]QUOSTA = 1",
		'(([F:SQH]VLYDAT ne @@) and (([F:SQH]VLYDAT lt @' + datetime.now().toString("yyyy-MM-dd") + '@) and ([F:SQH]QUOSTA eq 1)))');
});