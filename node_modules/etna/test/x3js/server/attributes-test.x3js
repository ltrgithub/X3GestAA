"use strict";

import * as x3js from 'x3js';
import * as helper from 'etna/test/engine/fixtures/helper';
import * as config from 'config';

QUnit.module(module.id, {});

function nop() {}

if (typeof Proxy !== "undefined" && config.unit_test && config.unit_test.etnaEndPoint) {
	var folder;

	asyncTest("connect ", 1, _ => {
		folder = helper.getTestFolder(_);
		ok(folder != null);
		start();
	});

	asyncTest("get and set property-level attributes", 36, _ => {
		const Datatypes = folder.classes.system$Datatypes;
		const obj1 = Datatypes.create(_, {
			id: 1,
		});
		// test only two properties
		['boolVal', 'stringVal'].forEach(name => {
			['isMandatory', 'isHidden', 'isDisabled'].forEach(atb => {
				equal(obj1[name][atb], false);
				obj1[name][atb] = true;
				equal(obj1[name][atb], true);
			});
			['symbol', 'label', 'style'].forEach((atb, i) => {
				equal(obj1[name][atb], '');
				obj1[name][atb] = 'foo' + i;
				equal(obj1[name][atb], 'foo' + i);
			});
			['index', 'scale', 'precision'].forEach((atb, i) => {
				equal(obj1[name][atb], 0);
				obj1[name][atb] = i + 3;
				equal(obj1[name][atb], i + 3);
			});
		});
		start();
	});

	asyncTest("isReadOnly attributes is effective", 4, _ => {
		const Datatypes = folder.classes.system$Datatypes;
		const obj1 = Datatypes.create(_, {
			id: 1,
		});
		obj1.intVal$ = 3;
		equal(obj1.intVal$, 3);
		obj1.intVal.isReadOnly = true;
		asyncThrows(_, _ => { obj1.intVal$ = 4; }, /is readonly/);
		equal(obj1.intVal$, 3);
		obj1.intVal.isReadOnly = false;
		obj1.intVal$ = 4;
		equal(obj1.intVal$, 4);
		// For now, assume that other attributes are correctly handled by ETNA
		// Will write more ambitious tests later.
		start();
	});

	asyncTest("get and set throw with invalid attribute name", 2, _ => {
		const Datatypes = folder.classes.system$Datatypes;
		const obj1 = Datatypes.create(_, {
			id: 1,
		});
		throws(() => { return obj1.boolVal.isFoo; }, /invalid property method or attribute/);
		throws(() => { obj1.boolVal.isFoo = true; }, /invalid property method or attribute/);
		start();
	});

	asyncTest("set throws with invalid attribute value type", 3, _ => {
		const Datatypes = folder.classes.system$Datatypes;
		const obj1 = Datatypes.create(_, {
			id: 1,
		});
		throws(() => { obj1.boolVal.isMandatory = 'hello'; }, /invalid attribute type/);
		throws(() => { obj1.boolVal.symbol = 3; }, /invalid attribute type/);
		throws(() => { obj1.boolVal.scale = 'hello'; }, /invalid attribute type/);
		start();
	});

} else if (typeof Proxy === "undefined") {
	test("TEST SKIPPED: Proxies are not available. Start node.js with --harmony-proxies option", 0, nop);
} else {
	test("TEST SKIPPED: ETNA endpoint is not configured", 0, nop);
}