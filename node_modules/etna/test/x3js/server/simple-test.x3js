"use strict";

import * as x3js from 'x3js';
import * as helper from 'etna/test/engine/fixtures/helper';
import * as config from 'config';

QUnit.module(module.id, {});

function nop() {}

if (typeof Proxy !== "undefined" && config.unit_test && config.unit_test.etnaEndPoint) {
	var folder;

	asyncTest("connect ", 1, (_) => {
		folder = helper.getTestFolder(_);
		ok(folder != null);
		start();
	});

	asyncTest("$save and $trySave", 3, (_) => {
		const Simple = folder.classes.system$Simple;
		const obj1 = Simple.create(_, {
			id: 1,
		});
		asyncThrows(_, _ => obj1.$save(_), /save failed/, 'save without mandatory string throws');
		equal(obj1.$trySave(_), false, 'trySave without mandatory string returns false');
		// TODO: check diagnoses
		console.error(obj1.$diagnoses)
		obj1.mandatoryString$ = 'abc';
		equal(obj1.$trySave(_), true, 'trySave with mandatory string returns true');
		start();
	});

	asyncTest("$delete and $tryDelete", 7, (_) => {
		const Simple = folder.classes.system$Simple;
		const obj1 = Simple.create(_, {
			id: 2,
		});
		asyncThrows(_, _ => obj1.$delete(_), /delete failed/, 'delete invalid instance');
		equal(obj1.$diagnoses.length, 1, 'diagnosis count');
		ok(/Record does not exist/.test(obj1.$diagnoses[0].message), 'message contains `Record not found`');
		equal(obj1.$tryDelete(_), false, 'tryDelete invalid instance returns false');
		// TODO: fix - diagnoses are not reset by second attempt to delete
		//equal(obj1.$diagnoses.length, 1, 'diagnosis count');
		//console.error(obj1.$diagnoses);
		const obj2 = Simple.read(_, 1);
		ok(obj2 != null, "obj2 exists");
		equal(obj2.$tryDelete(_), true, 'tryDelete valid instance returns true');
		equal(obj2.$diagnoses.length, 0, 'diagnosis count');
		start();
	});

} else if (typeof Proxy === "undefined") {
	test("TEST SKIPPED: Proxies are not available. Start node.js with --harmony-proxies option", 0, nop);
} else {
	test("TEST SKIPPED: ETNA endpoint is not configured", 0, nop);
}