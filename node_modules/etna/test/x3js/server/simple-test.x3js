"use strict";

import * as x3js from 'x3js';
import * as helper from 'etna/test/engine/fixtures/helper';
import * as config from 'config';

QUnit.module(module.id, {});

function nop() {}

// async throws assertion
function throws(_, fn, expected, message) {
	if (typeof expected === "string") {
		message = expected;
		expected = null;
	}
	try {
		fn(_);
		ok(false, message);
	} catch (ex) {
		if (expected) ok(expected.test(ex), message + ': ' + ex.message);
		else ok(true, message + ': ' + ex.message);
	}
}


if (typeof Proxy !== "undefined" && config.unit_test && config.unit_test.etnaEndPoint) {
	var folder;

	asyncTest("connect ", 1, (_) => {
		folder = helper.getTestFolder(_);
		ok(folder != null);
		start();
	});

	asyncTest("$save and $trySave", 3, (_) => {
		const Simple = folder.classes.Simple$;
		const obj1 = Simple.create(_, {
			id: 1,
		});
		throws(_, _ => obj1.$save(_), /save failed/, 'save without mandatory string throws');
		equal(obj1.$trySave(_), false, 'trySave without mandatory string returns false');
		obj1.mandatoryString$ = 'abc';
		equal(obj1.$trySave(_), true, 'trySave with mandatory string returns true');
		start();
	});

	asyncTest("$delete and $tryDelete", 4, (_) => {
		const Simple = folder.classes.Simple$;
		const obj1 = Simple.create(_, {
			id: 2,
		});
		throws(_, _ => obj1.$delete(_), /delete failed/, 'delete invalid instance');
		equal(obj1.$tryDelete(_), false, 'tryDelete invalid instance returns false');
		const obj2 = Simple.read(_, 1);
		ok(obj2 != null, "obj2 exists");
		equal(obj2.$tryDelete(_), true, 'tryDelete valid instance returns true');
		console.error(obj2.$diagnoses);
		start();
	});

} else if (typeof Proxy === "undefined") {
	test("TEST SKIPPED: Proxies are not available. Start node.js with --harmony-proxies option", 0, nop);
} else {
	test("TEST SKIPPED: ETNA endpoint is not configured", 0, nop);
}