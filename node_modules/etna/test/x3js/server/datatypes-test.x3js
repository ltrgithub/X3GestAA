"use strict";

import * as x3js from 'x3js';
import * as helper from 'etna/test/engine/fixtures/helper';
import * as config from 'config';

QUnit.module(module.id, {});

function nop() {}

if (typeof Proxy !== "undefined" && config.unit_test && config.unit_test.etnaEndPoint) {
	var api;

	asyncTest("connect ", 1, (_) => {
		api = helper.getTestFolder(_);
		ok(api != null);
		start();
	});

	asyncTest("query empty table", 1, (_) => {
		const Datatypes = api.classes.Datatypes$;
		var count = 0;
		Datatypes.query()
		.execute(_)
		.forEach(_, (_, b) => {
			console.error(count, b.boolVal$, b.intVal$);
			count++;
		});
		ok(count == 0, "query worked");
		start();
	});

	asyncTest("api roundtrip", 6, (_) => {
		const Datatypes = api.classes.Datatypes$;
		const dateVal = x3js.date.make(2016, 3, 18);
		const datetimeVal = x3js.datetime.make(2016, 3, 18, 20, 0, 0);
		const uuidVal =  x3js.uuid.generate();
		const obj = Datatypes.create(_, {
			boolVal: true,
			//enumVal: 'abc',
			intVal: 5,
			decimalVal: 0.3,
			//doubleVal: 6.02e23,
			stringVal: "hello",
			dateVal: dateVal,
			datetimeVal: datetimeVal,
			uuidVal: uuidVal,
		});
		equal(obj.boolVal$, true, "verifying bool property");
		//strictEqual(obj.enumVal$, 'abc', "verifying enum property");
		strictEqual(obj.intVal$, 5, "verifying int property");
		equals(obj.decimalVal$, 0.3, "verifying decimal property");
		equal(obj.dateVal$, dateVal, "verifying date property");
		equal(obj.datetimeVal$, datetimeVal, "verifying datetime property");
		equal(obj.uuidVal$, uuidVal, "verifying uuid property");
		start();
	});

	asyncTest("database roundtrip", 6, (_) => {
		const Datatypes = api.classes.Datatypes$;
		const dateVal = x3js.date.make(2016, 3, 18);
		const datetimeVal = x3js.datetime.make(2016, 3, 18, 20, 0, 0);
		const uuidVal =  x3js.uuid.generate();
		const obj1 = Datatypes.create(_, {
			id: 1,
			boolVal: true,
			//enumVal: 'abc',
			intVal: 5,
			decimalVal: 0.3,
			//doubleVal: 6.02e23,
			stringVal: "hello",
			dateVal: dateVal,
			datetimeVal: datetimeVal,
			uuidVal: uuidVal,
		});
		obj1.$save(_);

		const obj2 = Datatypes.read(_, 1);
		strictEqual(obj2.boolVal$, true, "verifying bool property");
		//strictEqual(obj2.enumVal$, 'abc', "verifying enum property");
		strictEqual(obj2.intVal$, 5, "verifying int property");
		equals(obj2.decimalVal$, 0.3, "verifying decimal property");
		equal(obj2.dateVal$, dateVal, "verifying date property");
		equal(obj2.datetimeVal$, datetimeVal, "verifying datetime property");
		equal(obj2.uuidVal$, uuidVal, "verifying uuid property");
		start();
	});

} else if (typeof Proxy === "undefined") {
	test("TEST SKIPPED: Proxies are not available. Start node.js with --harmony-proxies option", 0, nop);
} else {
	test("TEST SKIPPED: ETNA endpoint is not configured", 0, nop);
}