"use strict";

import * as x3js from 'x3js';
import * as helper from 'etna/test/engine/fixtures/helper';
import * as config from 'config';

QUnit.module(module.id, {});

function nop() {}

if (typeof Proxy !== "undefined" && config.unit_test && config.unit_test.etnaEndPoint) {
	var folder;

	asyncTest("connect ", 1, _ => {
		folder = helper.getTestFolder(_);
		ok(folder != null);
		start();
	});

	function checkUserParam(_, name, type) {
		const val = folder.userParam(_, name);
		if (type !== 'date')
			strictEqual(typeof val, type, `user param ${name}: value=${val}`);
		else
			ok(x3js.date.isDate(val), `user param ${name}: value=${val}`);
	}

	function checkFolderParam(_, name, type) {
		const val = folder.folderParam(_, name);
		if (type !== 'date')
			strictEqual(typeof val, type, `user param ${name}: value=${val}`);
		else
			ok(x3js.date.isDate(val), `user param ${name}: value=${val}`);
	}
	
	function checkLegislationParam(_, leg, name, type) {
		const val = folder.legislationParam(_, leg, name);
		if (type !== 'date')
			strictEqual(typeof val, type, `user param ${name}: value=${val}`);
		else
			ok(x3js.date.isDate(val), `user param ${name}: value=${val}`);
	}
	
	asyncTest("user parameters of various types", 5, _ => {
		checkUserParam(_, 'CHGDAT', 'boolean');
		checkUserParam(_, 'CHGDAT', 'boolean'); // twice, to test cache
		checkUserParam(_, 'CALNBRDEC', 'number');
		checkUserParam(_, 'AUZFCT', 'string');
		checkUserParam(_, 'DATSTADEB', 'date');
		start();
	});
	asyncTest("folder parameters of various types", 6, _ => {
		checkFolderParam(_, 'CTY', 'boolean');
		checkFolderParam(_, 'CTY', 'boolean'); // twice, to test cache
		checkFolderParam(_, 'ADMUSR', 'string');
		checkFolderParam(_, 'CHGTYP', 'number');
		checkFolderParam(_, 'CPYMAXLEN', 'number');
		checkFolderParam(_, 'STRDAT', 'date');
		start();
	});
	asyncTest("legislation parameter", 1, _ => {		
		checkLegislationParam(_, 'FRA', 'EECTYPCUR', 'number');
		start();
	});
	asyncTest("product parameter", 1, _ => {
		const typdos = folder.folderParam(_, 'TYPDOS');
		ok(typdos >= 0 && typdos <= 4, `check TYPEDOS: ${typdos}`);
		start();
	});
	asyncTest("get parameter from instance", 1, _ => {
		const obj = folder.classes.system$Datatypes.create(_, {});
		const val = obj.$folder.folderParam(_, 'CTY');
		strictEqual(typeof val, 'boolean', `folder param CTY: value=${val}`);
		start();
	});

} else if (typeof Proxy === "undefined") {
	test("TEST SKIPPED: Proxies are not available. Start node.js with --harmony-proxies option", 0, nop);
} else {
	test("TEST SKIPPED: ETNA endpoint is not configured", 0, nop);
}