"use strict";
const x3js = require('x3js');

module.exports = {
  $properties: {
    rateDate: {
      $propagate(_) {
        this.loadRates(_);
      },
    },
  },
  $relations: {
    coltch: {
      $properties: {
        rateType: {
          $propagate(_, val) {
            this.getRate(_);
          },
        },
        destinationCurrency: {
          $init(_) {
            this.destinationCurrency$ = this.$parent.destinationCurrency$;
          },
          $propagate(_, val) {
            this.getRate(_);
          },
        },
        rateDate: {
          $init(_) {
            this.rateDate$ = x3js.date.today();
          },
          $propagate(_, val) {
            this.getRate(_);
          },
        },
        equal: {
          $init(_) {
            this.equal$ = "=";
          },
        },
        currency: {
          $propagate(_, val) {
            this.monetarySymbol$ = this.$cache(_, 'CurrencyTable', this.currency$, "monetarySymbol");
            this.getRate(_);
          },
        },
        diviso: {
          $init(_) {
            this.diviso$ = 1;
          }, 
          $control(_, val) {
            if (this.diviso$ <= 0) {
              this.diviso.$error(_, "Value must be greater than 0");
            }
          },
          $propagate(_, val) {
            this.propagateRate(_);
          },
        },
        rate: {
          $init(_) {
            this.rate$ = 1;
          }, 
          $control(_, val) {
            if (this.rate$ <= 0) {
              this.rate.$error(_, "Value must be greater than 0");
            }
          },
          $propagate(_, val) {
            this.propagateRate(_);
          },
        },
      },
      $events: {
        $addLineBefore(_) {
          console.error("UNIT TEST GOT ADD LINE BEFORE")
        },
      },
      $methods: {
        getRate(_) {
          if (this.rateType$ > 0 && this.destinationCurrency$ != "" && this.currency$ != "" && this.rateDate != null) {
            if (this.$classes.CurrencyRates$.$read(_, [this.rateType$, this.destinationCurrency$, this.currency$, this.rateDate$])) {
              this.rate.$error(_, this.$message(_, 33, 137, 1));
            }
          }
        }, 
        propagateRate(_) {
          this.reverse = this.rate$ != 0 ? this.diviso$ / this.rate$ : 0;
        },
      },
    },
  },
  $events: {
    $read(_) {
      this.monetarySymbol$ = this.$cache(_, 'CurrencyTable', this.destinationCurrency$, "monetarySymbol");
      this.rateDate$ = x3js.date.today();
      this.loadRates(_);
    },
    $insertControlBefore(_) {
      this.controlConsistency(_);
    },
    $insert(_) {
      const coltch = this.coltch$;
      for (var i = 0; i < coltch.length; i ++) {
        const rate = coltch[i];
        if (rate.$status == "new") {
          rate.destinationCurrency$ = this.destinationCurrency$;
          const status = rate.$insert(_);
          console.error('UNIT TEST INSERT STATUS', i, status);
          if (status > 0) return status;
        }
      }
      console.error('UNIT TEST INSERT AFTER LOOP');
      return 0;
    },
    $updateControlBefore(_) {
      this.controlConsistency(_);
    },
    $update(_) {
      this.$snapshot.coltch$.forEach_(_, (_, rate) => {
        if (rate.$status == "delete") {
          // assumes that $delete throws
          rate.$delete(_);
        }
      });
      this.coltch$.forEach_(_, (_, rate) => {
        if (rate.$status == "updated") {
          rate.destinationCurrency$ == this.destinationCurrency$;
          // assumes that $update throws
          rate.$update(_);
        }
      });
      this.coltch$.forEach_(_, (_, rate) => {
        if (rate.$status == "new") {
          rate.destinationCurrency$ == this.destinationCurrency$;
          // assumes that $update throws
          rate.$insert(_);
        }
      });

    },
    $delete(_) {
      this.$snapshot.coltch$.forEach_(_, (_, rate) => {
        rate.$delete(_);
      });
    },
  },
  $methods: {
    loadRates(_) {
      const euro = 'EUR'; //this.$parameter(LEVFOLD, AFOLDER, "EURO");
      this.$tables.$query('TABCHANGE', 'TCH')
      .join('TABCUR', 'TCU', {
        'TCU.TCU0': '{{TCH.CUR}}',
      }).filter({
          'TCH.CURDEN': this.destinationCurrency$,
          'TCH.SELCHGSTRDAT': { $le: this.rateDate$ },
          $or: [{
            'TCU.CUR': { $ne: euro },
          }, {
            'TCU.CUR': euro,
            'TCU.EURDAT': { $gt: this.rateDate$ },
          }]
      }).sort({
        'TCH.CURDEN': 1,
        'TCH.CHGTYP': 1,
        'TCH.SELCHGSTRDAT': -1,        
      }).forEach(_, (_, rec) => {
        if (rec.TCU.CUR == euro || (rec.TCU.EURFLG != x3js.constants.YES) ||
          (rec.TCU.EURFLG == x3js.constants.YES && rec.TCU.EURDAT > this.rateDate$)) {
          const data = Object.assign(rec.TCH, rec.TCU, {
            CURSYMDEN: this.monetarySymbol$,
            EQUAL: '=',
            CURSYM: this.$cache(_, 'CurrencyTable', rec.TCH.CUR, "monetarySymbol"),
          });
          if (!data.CURSYM) data.CURSYM = data.CUR;
          this.coltch$.$add(_, data, { from: 'record' });
        }
      });
    },
    controlConsistency(_) {
      const that = this;
      if (this.coltch$.length == 0) {
        // There must be at least one line
        this.coltch$.$error(_, this.$message(_, 178,123,1));
        return;
      }
      if (this.coltch$.some_(_, (_, rate) => {
        return this.coltch$.some_(_, (_, r) => {
          if (r.rateType$ == rate.rateType$ && 
            r.destinationCurrency$ == rate.destinationCurrency$ &&
            r.currency$ == rate.currency$ && 
            r.rateDate$ == rate.rateDate$) 
            return true;
          else if (this.$classes.CurrencyRates$.$read(_, [r.rateType$, r.destinationCurrency$, r.currency$, r.rateDate$])) 
            return true;
          else
            return false;
        });
      })) {
        // Exchange rate already exists for this date
        this.rate$.$error(_, this.$message(_, 53,133,1));
        return;
      }
      // Mandatory fields
      this.coltch$.forEach_(_, (_, rate) => {
        rate.rateDate.$isMandatory = true;
        rate.diviso.$isMandatory = true;
        rate.rate.$isMandatory = false;
      });
    },
  },
};
