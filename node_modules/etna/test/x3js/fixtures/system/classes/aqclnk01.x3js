import * as x3js from 'x3js';

const TableDictionary = x3js.class('system.TableDictionary');
const Aqclnk01 = x3js.class('system.Aqclnk01');
const Autilis = x3js.class('system.Autilis');
const AQCLNK01 = x3js.table('system.AQCLNK01');

export default x3js.defineClass({
  name: 'Aqclnk01',
  properties: {},
  events: {
    readAfter(_) {
      this.calculation$ = this.field01$ + ' ' + this.field02$;
      this.priceCalculation$ = this.field01$ + ' ' + this.field02$;
    },
  },
  operations: {
    clean(_) {
      AQCLNK01.deleteAllRecords(_);
    },
    setup(_) {
      this.$withTransaction(_, (_) => {
        for (var i = 1; i <= 100; i++) {
          const j = 1 + (i - 1) % 10;
          const k = i % 5;
          var rec = {
            CREUSR: "AQC",
            CREDATTIM: x3js.datetime.make(2015, 5, 31),
            AUUID: x3js.uuid.generate(),
            ACCESS: ["AQCACS1", "AQCACS2"][j - 1] || "",
            FIELD01: "F1_" + x3js.string.format("N0:3", i),
            FIELD02: "F2_" + x3js.string.format("N0:3", j),
          }
          if (k) {
            const f03 = "R01P01_" + x3js.string.format("N0:2", k);
            Object.assign(rec, {
              FIELD3: f03,
              FIELD4: f03,
              FIELD5: f03,
              FIELD6: f03,
            });
          }
          AQCLNK01.insertRecord(_, rec);
        }
      });
    },
    op1(_, f1) {
      if (parseInt(f1.substring(3)) < 50) {
        const rec = AQCLNK01.readRecord(_, f1);
        return rec.CREDATTIM.date;
      } else {
        return x3js.date.NULL;
      }
    },
    op2(_, f1) {
      const filler = "My'Return" + '"Value&Char';
      if (f1 == '' || parseInt(f1.substring(3)) < 50) {
        return f1 + ' ' + 'x'.repeat(250 - (f1 + filler).length - 1) + filler;
      } else {
        return f1 + ' ' + filler;
      }
    },
    op3(_, f1) {
      return f1 ? 2 * parseInt(f1.substring(3)) : 0;
    },
    op4(_, f1) {
      return 1.35 * parseInt(f1.substring(3));
    },
    op5(_, f1) {
      if (parseInt(f1.substring(3)) < 50) {
        const watb = TableDictionary.read(_, "AQCLNK01");
        return "AQCLNK01 CFG=" + watb.configurationFile$;
      } else {
        const A = 'A'.charCodeAt(0);
        var s = f1 + "=";
        for (var i = 0; i <= 50; i++)
        s += String.fromCharCode(A + i);
        return s;
      }
    },
    op6(_, f1) {
      if (parseInt(f1.substring(3)) < 50) {
        const aql01 = Aqclnk01.read(_, f1);
        const waus = Autilis.read(_, aql01.user$);
        return waus.photo$;
      } else {
        return x3js.blob.fromBase64("R0lGODlhBgAJAJECAPj3+NXt/wAAAAAAACH5BAEAAAIALAAAAAAGAAkAAAINlC+AqQfREmygOrYiKgA7");
      }
    },
    opp1(_, f1, p1, p2, p3, p4, p7, p8, p11, p12) {
      // fix uuid.toString and datetime.toString later (p11)
      // skip p7 if empty to mimic space collapsing of 4GL `-` string operator
      return [f1.trim(), p1, p2, p3, p4].concat(p7 ? [p7] : []).concat([p8.toString('dd/MM/yyyy'), p11.x3ToString(), p12.x3ToString()]).join(' ');
    },
    opp2(_, f1, p1, p2, p3, p4, p7, p8, p11, p12) {
      ++p1;
      ++p2;
      ++p3;
      ++p4;
      p7 += 'X';
      p8 = p8 + 1;
      p11 = p11 != null ? x3js.uuid.NULL : p11;
      if (p12.value == null) p12 = x3js.date.MIN.at(p12.time); // hack until we eliminate date.x3IsZero
      else p12 = (p12.date + 1).at(p12.time);
      var str = [f1.trim(), p1, p2, p3, p4].concat(p7 ? [p7] : []).concat([p8.toString('dd/MM/yyyy'), p11.x3ToString(), p12.x3ToString()]).join(' ');
      return [p1, p2, p3, p4, p7, p8, p11, p12, str];
    },
  },
  methods: { 
    meth1(_, p1, p2, p3, p4, p7, p8, p11, p12) {
      var str = [this.field01$.trim(), p1, p2, p3, p4].concat(p7 ? [p7] : []).concat([p8.toString('dd/MM/yyyy'), p11.x3ToString(), p12.x3ToString()]).join(' ');
      this.string$ = str;
      return str;
    },
    meth2(_, p1, p2, p3, p4, p7, p8, p11, p12) {
      ++p1;
      ++p2;
      ++p3;
      ++p4;
      p7 += 'X';
      p8 = p8 + 1;
      p11 = p11 != null ? x3js.uuid.NULL : p11;
      if (p12.value == 0) p12 = (x3js.date.NULL + 1).at(p12.time); // hack until we eliminate date.x3IsZero
      else p12 = (p12.date + 1).at(p12.time);
      var str = [this.field01$.trim(), p1, p2, p3, p4].concat(p7 ? [p7] : []).concat([p8.toString('dd/MM/yyyy'), p11.x3ToString(), p12.x3ToString()]).join(' ');
      this.string$ = str;
      return [p1, p2, p3, p4, p7, p8, p11, p12, str];
    },
    mgetdat(_) {
      if (parseInt(this.field01$.substring(3)) < 50) {
        var res;
        const rec = AQCLNK01.readRecord(_, this.field01$);
        res = rec.CREDATTIM.date;
      } else {
        res = x3js.date.NULL;
      }
      this.date$ = res;
      return res;
    },
    mgetch(_) {
      const filler = "My'Return" + '"Value&Char';
      const f1 = this.field01$;
      var res;
      if (f1 == '' || parseInt(f1.substring(3)) < 50) {
        res = f1 + ' ' + 'x'.repeat(250 - (f1 + filler).length - 1) + filler;
      } else {
        res = f1 + ' ' + filler;
      }
      this.string$ = res;
      return res;
    },
    mgetint(_) {
      const res = 2 * parseInt(this.field01$.substring(3));
      this.integer$ = res;
      return res;
    },
    mgetrate(_) {
      const res = 1.35 * parseInt(this.field01$.substring(3));
      this.decimal$ = res;
      return res;
    },
  },
});