import * as x3js from 'x3js';

export default x3js.defineClass({
  name: 'BankSortCodes',
  module: 'system',
  dictCode: 'ABANK',
  properties: {
    code: {
      dictCode: 'BAN',
      control(_, val) {
        const len = this.$classes.system$Country.cache(_, this.countryCode$).lengthOfBank$;
        if (val.length !== len) this.code.error(_, this.$message(_, 111, 123, 1) + ' ' + this.countryCode$ + ' (' + len + ')');
      },
    },
    countryCode: {
      dictCode: 'CRY',
      control(_, val) {
          if (this.$classes.system$Country.cache(_, val).lengthOfBank$ < 1 || 
            this.$classes.system$Country.cache(_, val, 'bankControl') !== x3js.YES) {
            this.countryCode.error(_, val + ' ' + this.$message(_, 172, 133, 1));
          }
        }
    },
    validFrom: {
      dictCode: 'VLYSTR',
    },
    validTo: {
      dictCode: 'VLYEND',
      control(_, val) {
          if (val && this.validFrom$ && val < this.validFrom$) {
            this.validTo.error(_, this.$message(_, 90, 121, 1));
          }
        }
    },
  },
  events: {
    updateAfter(_) {
      if (this.$snapshot.validFrom$ != this.validFrom$ || 
        this.$snapshot.validTo$ != this.validTo$) {
        const len = this.$classes.system$Country.cache(_, this.countryCode$).lengthOfBank$;
        this.$classes.system$BankIdStatement.query(_).execute(_).filter({
          countryCode: this.countryCode$,
          bankIdNumber: x3js.predicates.startsWith(this.code$.substring(0, len)),
        }).forEach(_, (_, bid) => {
          try {
            if (bid.validFrom$ < this.validFrom$) 
              bid.validFrom$ = this.validFrom$;
            if (bid.validTo$ == null || bid.validTo$ > this.validTo$) 
              bid.validTo$ = this.validTo$;
            if (bid.$status == x3js.UPDATE) bid.$update(_);
          } catch (ex) {
            this.$error(_, bid.entity$ + ' ' + bid.bankIdNumber$ + ' ' + this.$message(_, 42, 9003, 1) + ': ' + ex.message);
          }
        });
      }
    },
    deleteControlBefore(_) {
      var len = this.$classes.system$Country.cache(_, this.countryCode$).lengthOfBank$;
      if (this.$classes.system$BankIdStatement.query(_).execute(_).some(_, {
        countryCode: this.countryCode$,
        bankIdNumber: x3js.predicates.startsWith(this.code$.substring(0, len)),
      })) {
        this.$error(_, this.$message(_, 174, 133, 1));
      }
    },
  },
});