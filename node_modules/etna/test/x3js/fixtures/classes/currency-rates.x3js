import * as x3js from 'x3js';

export default {
  $properties: {
    rateDate: {
      $propagate(_) {
        this.loadRates(_);
      },
    },
  },
  $relations: {
    rates: {
      $properties: {
        rateType: {
          $propagate(_, val) {
            this.getRate(_);
          },
        },
        destinationCurrency: {
          $init(_) {
            this.destinationCurrency$ = this.$parent.destinationCurrency$;
          },
          $propagate(_, val) {
            this.getRate(_);
          },
        },
        rateDate: {
          $init(_) {
            this.rateDate$ = x3js.date.today();
          },
          $propagate(_, val) {
            this.getRate(_);
          },
        },
        equal: {
          $init(_) {
            this.equal$ = "=";
          },
        },
        currency: {
          $propagate(_, val) {
            this.monetarySymbol$ = this.$classes.CurrencyTable$.cache(_, this.currency$).monetarySymbol$;
            this.getRate(_);
          },
        },
        diviso: {
          $init(_) {
            this.diviso$ = 1;
          }, 
          $control(_, val) {
            if (this.diviso$ <= 0) {
              this.diviso.error(_, "Value must be greater than 0");
            }
          },
          $propagate(_, val) {
            this.propagateRate(_);
          },
        },
        rate: {
          $init(_) {
            this.rate$ = 1;
          }, 
          $control(_, val) {
            if (this.rate$ <= 0) {
              this.rate.error(_, "Value must be greater than 0");
            }
          },
          $propagate(_, val) {
            this.propagateRate(_);
          },
        },
      },
      $methods: {
        getRate(_) {
          if (this.rateType$ > 0 && 
            this.destinationCurrency$ != "" && this.currency$ != "" && this.rateDate != null) {

            if (this.$classes.CurrencyRate$.read(_, [this.rateType$, this.destinationCurrency$, this.currency$, this.rateDate$])) {
              this.rate.error(_, this.$message(_, 33, 137, 1));
            }
          }
        }, 
        propagateRate(_) {
          this.reverse = this.rate$ != 0 ? this.diviso$ / this.rate$ : 0;
        },
      },
    },
  },
  $events: {
    $read(_) {
      this.monetarySymbol$ = this.$classes.CurrencyTable$.cache(_, this.destinationCurrency$).monetarySymbol$;
      this.rateDate$ = x3js.date.today();
      this.loadRates(_);
    },
    $insertControlBefore(_) {
      this.controlConsistency(_);
    },
    $insert(_) {
      const rates = this.rates$;
      for (var i = 0; i < rates.length; i ++) {
        const rate = rates[i];
        if (rate.$status == "new") {
          rate.destinationCurrency$ = this.destinationCurrency$;
          const status = rate.$insert(_);
          if (status > 0) return status;
        }
      }
      return 0;
    },
    $updateControlBefore(_) {
      this.controlConsistency(_);
    },
    $update(_) {
      this.$snapshot.rates$
      .filter((_, rate) => rate.$status == "deleted")
      .forEach(_, (_, rate) => {
        rate.$delete(_);
      });
      this.rates$
      .filter((_, rate) => rate.$status == "updated")
      .forEach(_, (_, rate) => {
        rate.destinationCurrency$ == this.destinationCurrency$;
        rate.$save(_);
      });
      this.rates$
      .filter((_, rate) => rate.$status == "new")
      .forEach(_, (_, rate) => {
        rate.destinationCurrency$ == this.destinationCurrency$;
        rate.$save(_);
      });

    },
    $delete(_) {
      console.error("!!TABCHANGE DELETE!!", this.$snapshot.rates$.length, this.rates$.length);
      // TODO review this - should delete from $snapshot but this.$snapshot.rates$ is empty!
      this.rates$.forEach(_, (_, rate) => {
      console.error("!!BEFOER TABCHANGE RATE DELETE!!")
        rate.$delete(_);
      console.error("!!AFTER TABCHANGE RATE DELETE!!")
      });
    },
  },
  $methods: {
    loadRates(_) {
      this.rates$.removeAll(_);
      const euro = 'EUR'; //this.$parameter(LEVFOLD, AFOLDER, "EURO");
      this.$tables.TABCHANGE$.query('TCH')
      .join('TABCUR', 'TCU', {
        'TCU.CUR': '{{TCH.CUR}}',
      }).where({
          'TCH.CURDEN': this.destinationCurrency$,
          'TCH.CHGSTRDAT': { $lte: this.rateDate$ },
          $or: [{
            // it is EUR
            'TCU.CUR': euro,
          }, {
            // not in EURO zone
            'TCU.EURFLG': { $ne: x3js.constants.YES },
          }, {
            // in EURO zone and euro entry date > our rateDate
            'TCU.EURFLG': x3js.constants.YES,
            'TCU.EURDAT': { $gt: this.rateDate$ },
          }]
      }).orderBy({
        'TCH.CURDEN': 1,
        'TCH.CHGTYP': 1,
        'TCH.CHGSTRDAT': -1,        
      }).execute(_).forEach(_, (_, rec) => {
        const data = Object.assign(rec.TCH, rec.TCU, {
          CURSYMDEN: this.monetarySymbol$,
          EQUAL: '=',
          CURSYM: this.$classes.CurrencyTable$.cache(_, rec.TCH.CUR).monetarySymbol$,
        });
        if (!data.CURSYM) data.CURSYM = data.CUR;
        this.rates$.add(_, data);
      });
    },
    controlConsistency(_) {
      const that = this;
      if (this.rates$.length == 0) {
        // There must be at least one line
        this.rates$.error(_, this.$message(_, 178,123,1));
        return;
      }
      if (this.rates$.some(_, (_, rate) => {
        return this.rates$.some(_, (_, r) => {
          if (r.rateType$ == rate.rateType$ && 
            r.destinationCurrency$ == rate.destinationCurrency$ &&
            r.currency$ == rate.currency$ && 
            r.rateDate$ == rate.rateDate$) 
            return true;
          else if (this.$classes.CurrencyRates$.$read(_, [r.rateType$, r.destinationCurrency$, r.currency$, r.rateDate$])) 
            return true;
          else
            return false;
        });
      })) {
        // Exchange rate already exists for this date
        this.rates$.error(_, this.$message(_, 53,133,1));
        return;
      }
      // Mandatory fields
      this.rates$.forEach(_, (_, rate) => {
        rate.rateDate.isMandatory = true;
        rate.diviso.isMandatory = true;
        rate.rate.isMandatory = false;
      });
    },
  },
};
