Local Clbfile TMP_CLBFILE(2)
TMP_CLBFILE= func TESTSUITE()
Call FERME_TRACE From LECFIC

Call LEC_TRACE From LECFIC
End

#**
#* Subprog SETUP called at the beginning of the unit test suite to clean then environment
#*!c
Subprog SETUP
Local Integer STATUS
Local Instance INS Using C_AQCRULE
INS = NewInstance C_AQCRULE

# Create a simple instance
Callmet INS.AINIT()
[L]STATUS = fmet INS.AREAD("AQC01")
If [L]STATUS = [V]CST_AOK
 Callmet INS.ADELETE()
Endif
End

Subprog TEARDOWN
End


#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()
Call TESTSUITE_START("AQCRULE", "Test suite for Class AQCRULE") From AXUNIT
Call ADD_TESTCASE("AQCRULE_BASIC","AINSERT + AREAD + AUPDATE + ADELETE",9) From AXUNIT
Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("AQCRULE", "SYRA_AQCRULE")
End SUITE_RESULT


#**
#* AQCRULE_BASIC
#*
#*!
Subprog AQCRULE_BASIC()
Local Integer STATUS
Local Instance INS Using C_AQCRULE
INS = NewInstance C_AQCRULE

# Create a simple instance
Call CHECK_NOTEQUAL("AQCRULE.AINIT('')","") From AXUNIT
[L]STATUS = fmet INS.AINIT()
Call CHECK_NOTEQUAL([L]STATUS,[V]CST_AERROR) From AXUNIT
Call CHECK_EQUAL(INS.RULE1,"RULE_INIT") From AXUNIT
INS.FIELD01 = "AQC01"
INS.RULE1 = "STEP1"
Call CHECK_EQUAL(INS.RULE1,"STEP1_CONTROL_PROPAGATE") From AXUNIT
[L]STATUS = fmet INS.AINSERT()
Call CHECK_NOTEQUAL([L]STATUS,[V]CST_AERROR) From AXUNIT
FreeGroup INS


INS = NewInstance C_AQCRULE
[L]STATUS = fmet INS.AREAD("AQC01")
Call CHECK_NOTEQUAL([L]STATUS,[V]CST_AERROR) From AXUNIT
Call CHECK_EQUAL(INS.RULE1,"STEP1_CONTROL_PROPAGATE") From AXUNIT
INS.RULE1 = "STEP2"
[L]STATUS = fmet INS.AUPDATE()
Call CHECK_NOTEQUAL([L]STATUS,[V]CST_AERROR) From AXUNIT
Call CHECK_EQUAL(INS.RULE1,"STEP2_CONTROL_PROPAGATE") From AXUNIT

FreeGroup INS

End

