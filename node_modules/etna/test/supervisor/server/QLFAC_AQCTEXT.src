Local Clbfile RESULT
RESULT =  func TESTSUITE()

GTRACE="QLFAC_AQCTEXT_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!
Subprog SETUP
# Database cleaning
Local File AQCTEXT [AQCTXT]
Trbegin [AQCTXT]
Delete [AQCTXT] Where TEST="TEST1"
Commit
Close Local File [AQCTXT]
Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT
End

#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()


Call TESTSUITE_START("AQCTEXT", "Test suite for Class AQCTEXT") From AXUNIT

Call ADD_TESTCASE("AQCTEXT_CREATION","Creation ATX, AX3, AXX text",2) From AXUNIT
Call ADD_TESTCASE("AQCTEXT_READ","Read and verify text",4) From AXUNIT
#Call ADD_TESTCASE("AQCTEXT_UPDATE","Update text",6) From AXUNIT
#Call ADD_TESTCASE("AQCTEXT_DELETE","Deletion text",1) From AXUNIT

Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("AQCTEXT", "SYRA_AQCTEXT")

End SUITE_RESULT

#**
#* Create
#*!
Subprog AQCTEXT_CREATION()
Local Integer MY_STATUS
Local Instance MY_INSTANCE Using C_AQCTEXT
MY_INSTANCE = NewInstance C_AQCTEXT AllocGroup null

# Initialize Instance
[L]MY_STATUS = fmet MY_INSTANCE.AINIT()
Call CHECK_EQUAL("Initialize"-num$([L]MY_STATUS),"Initialize"-num$([V]CST_AOK)) From AXUNIT

#**
#* Insert row

#*!
MY_INSTANCE.TEST     = "TEST1"
MY_STATUS = fmet MY_INSTANCE.TEXT_ATX.ASETTEXT("ZTest my text")
MY_INSTANCE.TEXT_AXX = "ZText my translation text AXX"
MY_INSTANCE.TEXT_AX3 = "ZText my translation text AX3"

[L]MY_STATUS = fmet MY_INSTANCE.AINSERT()
Call CHECK_EQUAL("AINSERT"+num$([L]MY_STATUS),"AINSERT"+num$([V]CST_AOK)) From AXUNIT

FreeGroup MY_INSTANCE
End

#**
#* Read text
#*!
Subprog AQCTEXT_READ()
Local Integer MY_STATUS
Local Instance MY_INSTANCE Using C_AQCTEXT
MY_INSTANCE = NewInstance With C_AQCTEXT


[L]MY_STATUS = fmet MY_INSTANCE.AREAD("TEST1")
Call CHECK_EQUAL("Read"-num$([L]MY_STATUS),"Read"-num$([V]CST_AOK)) From AXUNIT

# Check results
Call CHECK_EQUAL("ATX"-fmet MY_INSTANCE.TEXT_ATX.AGETTEXT(), "ATX"-"ZTest my text") From AXUNIT
Call CHECK_EQUAL("AXX"-MY_INSTANCE.TEXT_AXX, "AXX"-"ZText my translation text AXX") From AXUNIT
Call CHECK_EQUAL("AX3"-MY_INSTANCE.TEXT_AX3, "AX3"-"ZText my translation text AX3") From AXUNIT

FreeGroup MY_INSTANCE
End

#**
#* Update an unit
#*!
Subprog AQCTEXT_UPDATE()
Local Integer MY_STATUS,ILINE
Local Instance MY_INSTANCE Using C_AQCTEXT
MY_INSTANCE = NewInstance C_AQCTEXT AllocGroup null

[L]MY_STATUS = fmet MY_INSTANCE.AREAD("TEST1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

MY_STATUS = fmet MY_INSTANCE.TEXT_ATX.ASETTEXT("ZTest update my text")
MY_INSTANCE.TEXT_AXX = "ZText update my AXX"
MY_INSTANCE.TEXT_AX3 = "ZText update my AX3"

[L]MY_STATUS = fmet MY_INSTANCE.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS

[L]MY_STATUS = fmet MY_INSTANCE.AREAD("TEST1")
Call CHECK_EQUAL("Read"-num$([L]MY_STATUS),"Read"-num$([V]CST_AOK)) From AXUNIT

# Check results
Call CHECK_EQUAL("ATX"-fmet MY_INSTANCE.TEXT_ATX.AGETTEXT(), "ATX"-"ZTest update my text") From AXUNIT
Call CHECK_EQUAL("AXX"-MY_INSTANCE.TEXT_AXX, "AXX"-"ZText update my AXX") From AXUNIT
Call CHECK_EQUAL("AX3"-MY_INSTANCE.TEXT_AX3, "AX3"-"ZText update my AX3") From AXUNIT

FreeGroup MY_INSTANCE
End


#**
#* Delete an unit
#*!
Subprog AQCTEXT_DELETE()
Local Integer MY_STATUS
Local Instance MY_INSTANCE Using C_AQCTEXT
MY_INSTANCE = NewInstance C_AQCTEXT AllocGroup null

[L]MY_STATUS = fmet MY_INSTANCE.AREAD("TEST1")
[L]MY_STATUS = fmet MY_INSTANCE.ADELETE()
Call CHECK_EQUAL("Delete"-num$([L]MY_STATUS),"Delete"-num$([V]CST_AOK)) From AXUNIT

FreeGroup MY_INSTANCE
End

#**
#* Write errors to log
#*!
$WRITE_ERRORS
  Local Integer I
  For I=1 To maxtab(MY_INSTANCE.AERROR)
    If  MY_INSTANCE.AERROR(I)<>null & MY_INSTANCE.AERROR(I).DEL<>2
      Call CHECK_EQUAL(MY_INSTANCE.AERROR(I).PRO-":"-MY_INSTANCE.AERROR(I).MES,MY_INSTANCE.AERROR(I).PRO-":"-MY_INSTANCE.AERROR(I).MES) From AXUNIT
    Endif
  Next I
Return

