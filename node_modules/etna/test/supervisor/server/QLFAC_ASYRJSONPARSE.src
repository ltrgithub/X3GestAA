# author:eboyard
# date:10/11/2011
# Testsuite for ASYRJSONPARSE: Requirement 75283
Global Integer DBG_QLFSUP_ASYRJSONPARSE: DBG_QLFSUP_ASYRJSONPARSE=1

Local Clbfile SUITE_RESULT
SUITE_RESULT =  func TESTSUITE()
Call FERME_TRACE From LECFIC
#GTRACE = "QLFAC_ASYRJSONPARSE_"+GACTX.USER
Call LEC_TRACE From LECFIC

End

#------------------------------------------------------------------------------#
#* The main entry point of the unit test suite for Requirement 75283
#*
#------------------------------------------------------------------------------#
Funprog TESTSUITE()
If dim(DBG_QLFSUP_ASYRJSONPARSE) < 0
 Global Integer DBG_QLFSUP_ASYRJSONPARSE
 DBG_QLFSUP_ASYRJSONPARSE=0
Endif

Call TESTSUITE_START("REQ-75283", "SUP - Génération JSON") From AXUNIT


If 1=1 & find(GACTX.USER,"ERB","MB","SD","RBU")
    Call OUVRE_TRACE("ASYRJSONPARSE") From LECFIC
Endif

Call ADD_TESTCASE("TC001","TC001 - Parse a well formatted JSON",1) From AXUNIT
Call ADD_TESTCASE("TC002","TC002 - Parse a well formatted JSON",1) From AXUNIT
Call ADD_TESTCASE("TC003","TC003 - Parse a bad formatted JSON",1) From AXUNIT
Call ADD_TESTCASE("TC004","TC004 - Parse a bad object",1) From AXUNIT
Call ADD_TESTCASE("TC005","TC005 - Parse a bad object",1) From AXUNIT
Call ADD_TESTCASE("TC006","TC006 - Parse a JSON containing the word 'true'",1) From AXUNIT
Call ADD_TESTCASE("TC007","TC007 - Parse a JSON containing the word 'tru'",1) From AXUNIT
Call ADD_TESTCASE("TC008","TC008 - Parse a JSON containing the word 'false'",1) From AXUNIT
Call ADD_TESTCASE("TC009","TC009 - Parse a JSON containing the word 'fals'",1) From AXUNIT
Call ADD_TESTCASE("TC010","TC010 - Parse a JSON containing the word 'null'",1) From AXUNIT
Call ADD_TESTCASE("TC011","TC011 - Parse a JSON containing the word 'nul'",1) From AXUNIT
Call ADD_TESTCASE("TC012","TC012 - Parse a JSON containing a good array",1) From AXUNIT
Call ADD_TESTCASE("TC013","TC013 - Parse a JSON containing a bad array",1) From AXUNIT
Call ADD_TESTCASE("TC014","TC014 - Parse a JSON containing a bad object",1) From AXUNIT
Call ADD_TESTCASE("TC015","TC015 - Parse an empty string",1) From AXUNIT
Call ADD_TESTCASE("TC016","TC016 - Parse part of a JSON",1) From AXUNIT
Call ADD_TESTCASE("TC017","TC017 - Parse a JSON containing the number '1'",1) From AXUNIT
Call ADD_TESTCASE("TC018","TC018 - Parse a JSON containing the number '-1'",1) From AXUNIT
Call ADD_TESTCASE("TC019","TC019 - Parse the 'statistics' JSON generated by the STAT treatment",1) From AXUNIT
Call ADD_TESTCASE("TC020","TC020 - Parse a CLOB",1) From AXUNIT


Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("REQ-75283", "SUP - Génération JSON")

If 1=1 & find(GACTX.USER,"ERB","MB","SD")
    Call FERME_TRACE From LECFIC
    Call LEC_TRACE From LECFIC
    #GTRACE = "QLFSUP_ASYRJSONPARSE_"+GACTX.USER
    Call LEC_TRACE From LECFIC
Endif

End SUITE_RESULT



#------------------------------------------------#
# PRINTNODE
#------------------------------------------------#
Subprog PRINTNODE(LEVEL,NODES,NODE)
Value Integer LEVEL
Variable Instance  NODES  Using C_ASYRJSO
Variable Instance  NODE  Using C_ASYRJSO

Local Char INDENT(80)

#INDENT = string$(LEVEL,chr$(9))
INDENT = string$(3*LEVEL,"*")

Call ECR_TRACE(INDENT+ '"' + NODE.PRO + '":' + '"' + NODE.CNT+'"',0) From GESECRAN

If null <> NODE.SUB
    Call PRINTNODE(LEVEL+1,NODES,NODE.SUB)
Endif

If null <> NODE.NEX
    Call PRINTNODE(LEVEL,NODES,NODE.NEX)
Endif
End

#------------------------------------------------#
# PRINTNODES
#------------------------------------------------#
Subprog PRINTNODES(NODES,NODE,MESSAGE)
Variable Instance  NODES  Using C_ASYRJSO
Variable Instance  NODE  Using C_ASYRJSO

Value Char MESSAGE()

Call ECR_TRACE("PRINTNODES:"+MESSAGE,0) From GESECRAN
Call PRINTNODE(0,NODES,NODE)
End


#------------------------------------------------#
# COMPAREJSONARRAYS
#------------------------------------------------#
Funprog COMPAREJSONARRAYS(LNODES,LNODE,RNODES,RNODE)
Variable Instance  LNODES  Using C_ASYRJSO
Variable Instance  LNODE  Using C_ASYRJSO
Variable Instance  RNODES  Using C_ASYRJSO
Variable Instance  RNODE  Using C_ASYRJSO

If 1=0 : Call ECR_TRACE(LNODE.PRO + ":'" + LNODE.CNT + "'",0) From GESECRAN : Endif

If null = LNODE
    If 1=0 : Call ECR_TRACE("LNODE is NULL",0) From GESECRAN : Endif
    End 0
Endif

If null = RNODE
    If 1=0 : Call ECR_TRACE("RNODE is NULL",0) From GESECRAN : Endif
    End 0
Endif


If LNODE.PRO <> RNODE.PRO
    If 1=0 : Call ECR_TRACE("PRO ERROR:'" + LNODE.PRO + "'<>'" + RNODE.PRO + "'",0) From GESECRAN : Endif
    End 0
Endif

If LNODE.CNT <> RNODE.CNT
    If 1=0 : Call ECR_TRACE("CNT ERROR:'" + LNODE.CNT+ "'<>'" + RNODE.CNT+ "'",0) From GESECRAN : Endif
    End 0
Endif

If null <> LNODE.SUB and null <> RNODE.SUB
    If not(func COMPAREJSONARRAYS(LNODES,LNODE.SUB,RNODES,RNODE.SUB))
        End 0
    Endif
Elsif (null <> LNODE.SUB and null = RNODE.SUB) or (null = LNODE.SUB and null <> RNODE.SUB)
    If 1=0 : Call ECR_TRACE("SUB ERROR:LNODE.SUB <> RNODE.SUB",0) From GESECRAN : Endif
    End 0
Endif

If null <> LNODE.NEX and null <> RNODE.NEX
    End func COMPAREJSONARRAYS(LNODES,LNODE.NEX,RNODES,RNODE.NEX)
Elsif (null <> LNODE.NEX and null = RNODE.NEX) or (null = LNODE.NEX and null <> RNODE.NEX)
    If 1=0 : Call ECR_TRACE("SUB ERROR:LNODE.NEX<> RNODE.NEX",0) From GESECRAN : Endif
    End 0
Endif
End 1


#------------------------------------------------#
# COPYNODE
#------------------------------------------------#
Funprog COPYNODE(INODE,ONODES,FATHER)
Variable Instance  INODE Using C_ASYRJSO
Variable Instance  ONODES Using C_ASYRJSO
Variable Instance  FATHER Using C_ASYRJSO

Local Integer NBJ
NBJ = maxtab(ONODES)
NBJ = NBJ+1
ONODES(NBJ) = NewInstance [REP] With C_ASYRJSO
ONODES(NBJ).PRO = INODE.PRO
ONODES(NBJ).CNT = INODE.CNT
ONODES(NBJ).TYP = INODE.TYP

ONODES(NBJ).NEX = null
ONODES(NBJ).SUB = null
ONODES(NBJ).FAT = null

If null <> FATHER
    If null = FATHER.SUB
        FATHER.SUB = ONODES(NBJ)
    Endif
Endif

If null <> INODE.SUB
    ONODES(NBJ).SUB = func COPYNODE(INODE.SUB,ONODES,ONODES(NBJ))
Endif

If null <> INODE.NEX
    ONODES(NBJ).NEX = func COPYNODE(INODE.NEX,ONODES,FATHER)
Endif
End ONODES(NBJ)


#------------------------------------------------#
# COPYJSO
#------------------------------------------------#
Subprog COPYJSO(INODES,ONODES)
Variable Instance  INODES Using C_ASYRJSO
Variable Instance  ONODES Using C_ASYRJSO
Local Instance  ONODE Using C_ASYRJSO

ONODE = null
#Call PRINTNODES(INODES,INODES(1),"COPYJSO.before")
Call COPYNODE(INODES(1),ONODES,ONODE)
#Call PRINTNODES(ONODES,ONODES(1),"COPYJSO.after")

End


#------------------------------------------------#
# TESTFILE
#------------------------------------------------#
Funprog TESTFILE(FILENAM)
Value Char    FILENAM()
Local Char    LINE(255)
Local Clbfile JSON(5)
Local Char    PATH(255)

PATH="#@D:\syracuse\_samples\clintJson\"+FILENAM+".TXT"

Local Instance  NODES(1..) Using C_ASYRJSO
Local Instance  NODE  Using C_ASYRJSO


Openi PATH
adxifs="" : adxirs=chr$(13)+chr$(10)
adxium=GASCII

While 1
    Rdseq LINE
    Append JSON,LINE
    Break (fstat<>0)
Wend

Openi

Local Instance ENV Using =[V]CST_C_NAME_CLASS_CONTEXT
ENV = NewInstance [ENV] With =[V]CST_C_NAME_CLASS_CONTEXT
Local Integer SUCCESS
SUCCESS= func ASYRJSONPARSE.PARSEJSON(ENV,JSON,NODES,NODE)

If 1=0
    If SUCCESS
        Call PRINTNODES(NODES,NODE,"TESTFILE")
    Else
        Call ECR_TRACE("Bad JSON",0) From GESECRAN
    Endif
Endif


FreeGroup NODES(1)
FreeInstance [ENV]

End SUCCESS

#------------------------------------------------#
# TESTCLOB
#------------------------------------------------#
Funprog TESTCLOB(JSON)
Variable Clbfile JSON

Local Instance ENV Using =[V]CST_C_NAME_CLASS_CONTEXT
Local Instance  NODES(1..) Using C_ASYRJSO
Local Instance  NODE  Using C_ASYRJSO
Local Integer SUCCESS

ASTATUS=0
SUCCESS=0

ENV = NewInstance [ENV] With =[V]CST_C_NAME_CLASS_CONTEXT

ASTATUS = func ASYRJSONPARSE.PARSEJSON(ENV,JSON,NODES,NODE)

If ASTATUS=0 & (maxtab(NODES)>0 )# & NODES(1) <> null)
 Local Integer I
 #For I=1 to maxtab(NODES)
 # Infbox NODES(I).PRO
 #next I

 FreeGroup NODE
Endif

If ASTATUS=0
 SUCCESS=1
Endif
FreeInstance [ENV]
Infbox "END:"+num$(SUCCESS)
End SUCCESS


#------------------------------------------------#
# TC001
#------------------------------------------------#
Subprog TC001()
Local Clbfile JSON
Append JSON, '{"qlf":"simple text:\"QLF\","}'

Call CHECK_TRUE(func TESTCLOB(JSON)) From AXUNIT
End

#------------------------------------------------#
# TC002
# Lecture d'un fichier contenant un flux json
# correctement formaté: QLFSUP_75283_P1_TC002
#------------------------------------------------#
Subprog TC002()
Local Clbfile JSON
Append JSON, '{'
Append JSON, '   "$baseUrl":"http://syra_server/x3/demo",'
Append JSON, '   "$baseType":"application/json; vnd.sage.syracuse.representation=x3.erp.demo",'
Append JSON, '   "$url":"{$baseUrl}/conssta?&codeStat={$codeStat}&dateStart={$dateStart}&dateEnd={$dateEnd}&keyValue1={$keyValue1}&keyValue2={$keyValue2}&keyValue3={$keyValue3}",'
Append JSON, '   "$title":"Test Flash",'
Append JSON, '   "$type":"{$baseType}.statistics",'
Append JSON, '   "$methods":"GET",'
Append JSON, '   "$":{'
Append JSON, '      "$resources":{'
Append JSON, '         "$type":"application/x-collection",'
Append JSON, '         "$axes":['
Append JSON, '            {'
Append JSON, '               "$title":"Articles vendus",'
Append JSON, '               "$hierarchies":['
Append JSON, '                  ['
Append JSON, '                     "article_h"'
Append JSON, '                  ]'
Append JSON, '               ]'
Append JSON, '            },'
Append JSON, '            {'
Append JSON, '               "$title":"measures",'
Append JSON, '               "$hierarchies":['
Append JSON, '                  ['
Append JSON, '                     "$measures"'
Append JSON, '                  ]'
Append JSON, '               ]'
Append JSON, '            }'
Append JSON, '         ],'
Append JSON, '         "$cube":{'
Append JSON, '            "$mode":"table",'
Append JSON, '            "$style":"xy",'
Append JSON, '            "$displaysOneMeasure":false,'
Append JSON, '            "$title":"Coûts articles",'
Append JSON, '            "$hierarchies":{'
Append JSON, '               "article_h":{'
Append JSON, '                  "$title":"Articles",'
Append JSON, '                  "$properties":['
Append JSON, '                     "ARTICLE"'
Append JSON, '                  ],'
Append JSON, '                  "$members":['
Append JSON, ''
Append JSON, '                  ],'
Append JSON, '                  "$isDefault":true'
Append JSON, '               }'
Append JSON, '            },'
Append JSON, '            "$measures":{'
Append JSON, '               "matiere_premiere":{'
Append JSON, '                  "$property":"matiere_premiere",'
Append JSON, '                  "$title":"Matière premiere",'
Append JSON, '                  "$mode":"sum",'
Append JSON, '                  "$style":"stick",'
Append JSON, '                  "$isStacked":false,'
Append JSON, '                  "$isNormalized":false,'
Append JSON, '                  "$isDefault":true'
Append JSON, '               },'
Append JSON, '               "main_oeuvre":{'
Append JSON, '                  "$property":"main_oeuvre",'
Append JSON, '                  "$title":"Main d OEUVRE",'
Append JSON, '                  "$MODE":"sum",'
Append JSON, '                  "$STYLE":"STICK",'
Append JSON, '                  "$ISSTACKED":false,'
Append JSON, '                  "$ISNORMALIZED":false'
Append JSON, '               },'
Append JSON, '               "COUT_MACHINE":{'
Append JSON, '                  "$PROPERTY":"COUT_MACHINE",'
Append JSON, '                  "$TITLE":"COUT MACHINE",'
Append JSON, '                  "$MODE":"sum",'
Append JSON, '                  "$STYLE":"STICK",'
Append JSON, '                  "$ISSTACKED":false,'
Append JSON, '                  "$ISNORMALIZED":false'
Append JSON, '               }'
Append JSON, '            }'
Append JSON, '         },'
Append JSON, '         "$ITEM":{'
Append JSON, '            "$":{'
Append JSON, '               "ARTICLE":{'
Append JSON, '                  "$TITLE":"INTITULÉ ARTICLE",'
Append JSON, '                  "$TYPE":"APPLICATION/X-STRING"'
Append JSON, '               },'
Append JSON, '               "CODE":{'
Append JSON, '                  "$TITLE":"CODE ARTICLE",'
Append JSON, '                  "$TYPE":"APPLICATION/X-STRING"'
Append JSON, '               },'
Append JSON, '               "MATIERE_PREMIERE":{'
Append JSON, '                  "$TITLE":"MATIERE PREMIÈRE",'
Append JSON, '                  "$TYPE":"APPLICATION/X-Decimal"'
Append JSON, '               },'
Append JSON, '               "MAIN_OEUVRE":{'
Append JSON, '                  "$TITLE":"main doeuvre",'
Append JSON, '                  "$type":"application/x-decimal"'
Append JSON, '               },'
Append JSON, '               "cout_machine":{'
Append JSON, '                  "$title":"Coût machine",'
Append JSON, '                  "$type":"application/x-decimal"'
Append JSON, '               }'
Append JSON, '            },'
Append JSON, '            "$links":{'
Append JSON, '               "$details":{'
Append JSON, '                  "$title":"Details",'
Append JSON, '                  "$url":"{$baseUrl}/article('+"'"+'{$key}+'+"'"+')",'
Append JSON, '                  "$type":"{$baseType}.article.$details"'
Append JSON, '               },'
Append JSON, '               "$edit":{'
Append JSON, '                  "$title":"Edit",'
Append JSON, '                  "$url":"{$url}/$workingCopies",'
Append JSON, '                  "$type":"{$baseType}.article.$edit",'
Append JSON, '                  "$method":"POST"'
Append JSON, '               },'
Append JSON, '               "$delete":{'
Append JSON, '                  "$title":"Delete",'
Append JSON, '                  "$url":"{$url}",'
Append JSON, '                  "$type":null,'
Append JSON, '                  "$method":"DELETE"'
Append JSON, '               }'
Append JSON, '            }'
Append JSON, '         }'
Append JSON, '      }'
Append JSON, '   }'
Append JSON, '}'
Call CHECK_TRUE(func TESTCLOB(JSON)) From AXUNIT
End

#------------------------------------------------#
# TC003
# Lecture d'un fichier contenant un flux json
# mal formaté: QLFSUP_75283_P1_TC003
#------------------------------------------------#
Subprog TC003()
Local Clbfile JSON
Append JSON, '{'
Append JSON, '   "$baseUrl":"http://syra_server/x3/demo",'
Append JSON, '   "$baseType":"application/json; vnd.sage.syracuse.representation=x3.erp.demo",'
Append JSON, '   "$url":"{$baseUrl}/conssta?&codeStat={$codeStat}&dateStart={$dateStart}&dateEnd={$dateEnd}&keyValue1={$keyValue1}&keyValue2={$keyValue2}&keyValue3={$keyValue3}",'
Append JSON, '   "$title":"Test Flash",'
Append JSON, '   "$type":"{$baseType}.statistics",'
Append JSON, '   "$methods":"GET",'
Append JSON, '   "$":{'
Append JSON, '      "$resources":{'
Append JSON, '         "$type":"application/x-collection",'
Append JSON, '         "$axes":['
Append JSON, '            {'
Append JSON, '               "$title":"Articles vendus",'
Append JSON, '               "$hierarchies":['
Append JSON, '                  ['
Append JSON, '                     "article_h"'
Append JSON, '                  ]'
Append JSON, '               ]'
Append JSON, '            },'
Append JSON, '            {'
Append JSON, '               "$title":"measures",'
Append JSON, '               "$hierarchies":['
Append JSON, '                  ['
Append JSON, '                     "$measures"'
Append JSON, '                  ]'
Append JSON, '               ]'
Append JSON, '            }'
Append JSON, '         ],'
Append JSON, '         "$cube":{'
Append JSON, '            "$mode":"table",'
Append JSON, '            "$style":"xy",'
Append JSON, '            "$displaysOneMeasure":false,'
Append JSON, '            "$title":"Coûts articles",'
Append JSON, '            "$hierarchies":{'
Append JSON, '               "article_h":{'
Append JSON, '                  "$title":"Articles",'
Append JSON, '                  "$properties":['
Append JSON, '                     "ARTICLE"'
Append JSON, '                  ],'
Append JSON, '                  "$members":['
Append JSON, ''
Append JSON, '                  ],'
Append JSON, '                  "$isDefault":true'
Append JSON, '               }'
Append JSON, '            },'
Append JSON, '            "$measures":{'
Append JSON, '               "matiere_premiere":{'
Append JSON, '                  "$property":"matiere_premiere",'
Append JSON, '                  "$title":"Matière premiere",'
Append JSON, '                  "$mode":"sum",'
Append JSON, '                  "$style":"stick",'
Append JSON, '                  "$isStacked":false,'
Append JSON, '                  "$isNormalized":false,'
Append JSON, '                  "$isDefault":true'
Append JSON, '               },'
Append JSON, '               "main_oeuvre":{'
Append JSON, '                  "$property":"main_oeuvre",'
Append JSON, '                  "$title":"Main d'+"'"+'oeuvre",'
Append JSON, '                  "$mode":"sum",'
Append JSON, '                  "$style":"stick",'
Append JSON, '                  "$isStacked":false,'
Append JSON, '                  "$isNormalized":false'
Append JSON, '               },'
Append JSON, '               "cout_machine":{'
Append JSON, '                  "$property":"cout_machine",'
Append JSON, '                  "$title":"Cout machine",'
Append JSON, '                  "$mode":"sum",'
Append JSON, '                  "$style":"stick",'
Append JSON, '                  "$isStacked":false,'
Append JSON, '                  "$isNormalized":false'
Append JSON, '               }'
Append JSON, '            }'
Append JSON, '         },'
Append JSON, '         "$item":{'
Append JSON, '            "$":{'
Append JSON, '               "ARTICLE":{'
Append JSON, '                  "$title":"Intitulé article",'
Append JSON, '                  "$type":"application/x-string"'
Append JSON, '               },'
Append JSON, '               "code":{'
Append JSON, '                  "$title":"Code article",'
Append JSON, '                  "$type":"application/x-string"'
Append JSON, '               },'
Append JSON, '               "matiere_premiere":{'
Append JSON, '                  "$title":"Matiere première",'
Append JSON, '                  "$type":"application/x-decimal"'
Append JSON, '               },'
Append JSON, '               "main_oeuvre":{'
Append JSON, '                  "$title":"Main d'+"'"+'oeuvre",'
Append JSON, '                  "$type":"application/x-decimal"'
Append JSON, '               },'
Append JSON, '               "cout_machine":{'
Append JSON, '                  "$title":"Coût machine",'
Append JSON, '                  "$type":"application/x-decimal"'
Append JSON, '               }'
Append JSON, '            },'
Append JSON, '            "$links":{'
Append JSON, '               "$details":{'
Append JSON, '                  "$title":"Details",'
Append JSON, '                  "$url":"{$baseUrl}/article('+"'"+'{$key}'+"'"+')",'
Append JSON, '                  "$type":"{$baseType}.article.$details"'
Append JSON, '               },'
Append JSON, '               "$edit":{'
Append JSON, '                  "$title":"Edit",'
Append JSON, '                  "$url":"{$url}/$workingCopies",'
Append JSON, '                  "$type":"{$baseType}.article.$edit",'
Append JSON, '                  "$method":"POST"'
Append JSON, '               "$delete":{'
Append JSON, '                  "$title":"Delete",'
Append JSON, '                  "$url":"{$url}",'
Append JSON, '                  "$type":null,'
Append JSON, '                  "$method":"DELETE"'
Append JSON, '               }'
Append JSON, '            }'
Append JSON, '         }'
Append JSON, '      }'
Append JSON, '   }'
Append JSON, '}'
Call CHECK_TRUE(not(func TESTCLOB(JSON))) From AXUNIT
End

#------------------------------------------------#
# TC004
# Lecture d'un fichier contenant un flux json
# mal formaté: QLFSUP_75283_P1_TC004
#------------------------------------------------#
Subprog TC004()
Local Clbfile JSON
Append JSON, '{'
Append JSON, ' "node1":{'
Append JSON, '   "node1.1":"node 1.1"'
Append JSON, ' "node2":{'
Append JSON, '   "node2.1":"node 2.1"'
Append JSON, ' }'
Append JSON, '}'

Call CHECK_TRUE(not(func TESTCLOB(JSON))) From AXUNIT
End

#------------------------------------------------#
# TC005
# Lecture d'un fichier contenant un flux json
# mal formaté: QLFSUP_75283_P1_TC005
#------------------------------------------------#
Subprog TC005()
Local Clbfile JSON
Append JSON, '{'
Append JSON, ' "node1":{'
Append JSON, '   "node1.1":"node 1.1"'
Append JSON, '   "node1.2":"node 1.2"'
Append JSON, ' },'
Append JSON, ' "node2":{'
Append JSON, '   "node2.1":"node 2.1"'
Append JSON, ' }'
Append JSON, '}'

Call CHECK_TRUE(not(func TESTCLOB(JSON))) From AXUNIT
End

#------------------------------------------------#
# TC006
# Good word 'true'
#------------------------------------------------#
Subprog TC006()
Local Clbfile JSON
Append JSON, '{'
Append JSON, '  "true":true'
Append JSON, '}'

Call CHECK_TRUE(func TESTCLOB(JSON)) From AXUNIT
End

#------------------------------------------------#
# TC007
# Bad word 'true'
#------------------------------------------------#
Subprog TC007()
Local Clbfile JSON
Append JSON, '{'
Append JSON, '  "true":tru'
Append JSON, '}'

Call CHECK_TRUE(not(func TESTCLOB(JSON))) From AXUNIT
End

#------------------------------------------------#
# TC008
# Good word 'false'
#------------------------------------------------#
Subprog TC008()
Local Clbfile JSON
Append JSON, '{'
Append JSON, '  "false":false'
Append JSON, '}'
Call CHECK_TRUE(func TESTCLOB(JSON)) From AXUNIT
End

#------------------------------------------------#
# TC009
# Bad word 'false'
#------------------------------------------------#
Subprog TC009()
Local Clbfile JSON
Append JSON, '{'
Append JSON, '  "false":fals'
Append JSON, '}'
Call CHECK_TRUE(not(func TESTCLOB(JSON))) From AXUNIT
End

#------------------------------------------------#
# TC010
# Good word 'null'
#------------------------------------------------#
Subprog TC010()
Local Clbfile JSON
Append JSON, '{'
Append JSON, '  "null":null'
Append JSON, '}'
Call CHECK_TRUE(func TESTCLOB(JSON)) From AXUNIT
End

#------------------------------------------------#
# TC011
# Bad word 'null'
#------------------------------------------------#
Subprog TC011()
Local Clbfile JSON
Append JSON, '{'
Append JSON, '  "null":nul'
Append JSON, '}'
Call CHECK_TRUE(not(func TESTCLOB(JSON))) From AXUNIT
End

#------------------------------------------------#
# TC012: good array
#------------------------------------------------#
Subprog TC012()
Local Clbfile JSON
Append JSON, '{'
Append JSON, '    "array": ['
Append JSON, '        "item1",'
Append JSON, '        "item2"'
Append JSON, '    ]'
Append JSON, '}'

Call CHECK_TRUE(func TESTCLOB(JSON)) From AXUNIT
End

#------------------------------------------------#
# TC013: bad array
#------------------------------------------------#
Subprog TC013()
Local Clbfile JSON
Append JSON, '{'
Append JSON, '    "array": ['
Append JSON, '        "item1",'
Append JSON, '        "item2"'
Append JSON, '}'

Call CHECK_TRUE(not(func TESTCLOB(JSON))) From AXUNIT
End

#------------------------------------------------#
# TC014: bad object
#------------------------------------------------#
Subprog TC014()
Local Clbfile JSON
Append JSON, '{'
Append JSON, '    "array": ['
Append JSON, '        "item1",'
Append JSON, '        "item2"'
Append JSON, '    ]'
Call CHECK_TRUE(not(func TESTCLOB(JSON))) From AXUNIT
End

#------------------------------------------------#
# TC015: emtpy string
#------------------------------------------------#
Subprog TC015()
Local Clbfile JSON
Call CHECK_TRUE(func TESTCLOB(JSON)) From AXUNIT
End

#------------------------------------------------#
# TC016: part of a json
#------------------------------------------------#
Subprog TC016()
Local Clbfile JSON
Append JSON, '{'
Append JSON, '    "array": ['
Append JSON, '        "item1'
Call CHECK_TRUE(not(func TESTCLOB(JSON))) From AXUNIT
End

#------------------------------------------------#
# TC017: number=1
#------------------------------------------------#
Subprog TC017()
Local Clbfile JSON
Append JSON, '{'
Append JSON, '  "one":1'
Append JSON, '}'
Call CHECK_TRUE(func TESTCLOB(JSON)) From AXUNIT
End

#------------------------------------------------#
# TC018: number=-1
#------------------------------------------------#
Subprog TC018()
Local Clbfile JSON
Append JSON, '{'
Append JSON, '  "one":-1'
Append JSON, '}'
Call CHECK_TRUE(func TESTCLOB(JSON)) From AXUNIT
End

#------------------------------------------------#
# TC019: Parse the 'statistics' JSON generated by
# THE STAT treatment
#------------------------------------------------#
Subprog TC019()
Local Clbfile JSON
Append JSON, '{'
Append JSON, '"$baseUrl":"http://syracuse/hello",'
Append JSON, '"$url":"{$baseUrl}/stats('+"'"+'dom'+"'"+')?representation=$cube('+"'"+'dom'+"'"+')",'
Append JSON, '"$title":"Statistiques fichier ",'
Append JSON, '"$type":"application/json; vnd.sage=syracuse.presentation=x3.erp.superv/stat('+"'"+'dom'+"'"+')",'
Append JSON, '"$methods":"GET",'
Append JSON, '"dateStart":"    -  -  ",'
Append JSON, '"dateEnd":"    -  -  ",'
Append JSON, '"codeStat":"dom",'
Append JSON, '"$":{'
Append JSON, '  "dateStat":{'
Append JSON, '   "$type":"application/x-date",'
Append JSON, '   "$capabilities":"sort,filter"'
Append JSON, '  },'
Append JSON, '  "zzmModule":{'
Append JSON, '   "$title":"Module",'
Append JSON, '   "$type":"application/x-integer",'
Append JSON, '   "$maxLength":15,'
Append JSON, '   "$capabilities":"sort,filter",'
Append JSON, '   "$isHidden":"false"'
Append JSON, '  },'
Append JSON, '  "zzmClenum1":{'
Append JSON, '   "$title":"ClÃ© primaire de l'+"'"+'objet",'
Append JSON, '   "$type":"application/x-string",'
Append JSON, '   "$maxLength":10,'
Append JSON, '   "$capabilities":"sort,filter",'
Append JSON, '   "$isHidden":"false"'
Append JSON, '  },'
Append JSON, '  "zzmUpdusr":{'
Append JSON, '   "$title":"Utilisateur",'
Append JSON, '   "$type":"application/x-string",'
Append JSON, '   "$thumb":{'
Append JSON, '    "$type":"application/json",'
Append JSON, '    "$url":"{$baseUrl}/autilis({usr})",'
Append JSON, '    "usr":{'
Append JSON, '     "$type":"application/x-string",'
Append JSON, '     "$constraints":{'
Append JSON, '      "$maxLength":5'
Append JSON, '     }'
Append JSON, '    },'
Append JSON, '    "$links":{'
Append JSON, '     "$details":{'
Append JSON, '      "$type":"{$basetype}.autilis.$details",'
Append JSON, '      "$title":"Type de clÃ© {usr}",'
Append JSON, '      "$url":"{$baseType}.autilis.$details"'
Append JSON, '     }'
Append JSON, '    }'
Append JSON, '   },'
Append JSON, '   "$maxLength":3,'
Append JSON, '   "$capabilities":"sort,filter",'
Append JSON, '   "$isHidden":"false"'
Append JSON, '  },'
Append JSON, '  "zzmCpy":{'
Append JSON, '   "$title":"SociÃ©tÃ©",'
Append JSON, '   "$type":"application/x-string",'
Append JSON, '   "$thumb":{'
Append JSON, '    "$type":"application/json",'
Append JSON, '    "$url":"{$baseUrl}/company({cpy})",'
Append JSON, '    "cpy":{'
Append JSON, '     "$type":"application/x-string",'
Append JSON, '     "$constraints":{'
Append JSON, '      "$maxLength":5'
Append JSON, '     }'
Append JSON, '    },'
Append JSON, '    "$links":{'
Append JSON, '     "$details":{'
Append JSON, '      "$type":"{$basetype}.company.$details",'
Append JSON, '      "$title":" {cpy}",'
Append JSON, '      "$url":"{$baseType}.company.$details"'
Append JSON, '     }'
Append JSON, '    }'
Append JSON, '   },'
Append JSON, '   "$maxLength":3,'
Append JSON, '   "$capabilities":"sort,filter",'
Append JSON, '   "$isHidden":"false"'
Append JSON, '  },'
Append JSON, '  "zzmCur":{'
Append JSON, '   "$title":"Devise",'
Append JSON, '   "$type":"application/x-string",'
Append JSON, '   "$thumb":{'
Append JSON, '    "$type":"application/json",'
Append JSON, '    "$url":"{$baseUrl}/tabcur({cur})",'
Append JSON, '    "cur":{'
Append JSON, '     "$type":"application/x-string",'
Append JSON, '     "$constraints":{'
Append JSON, '      "$maxLength":3'
Append JSON, '     }'
Append JSON, '    },'
Append JSON, '    "$links":{'
Append JSON, '     "$details":{'
Append JSON, '      "$type":"{$basetype}.tabcur.$details",'
Append JSON, '      "$title":" {cur}",'
Append JSON, '      "$url":"{$baseType}.tabcur.$details"'
Append JSON, '     }'
Append JSON, '    }'
Append JSON, '   },'
Append JSON, '   "$maxLength":3,'
Append JSON, '   "$capabilities":"sort,filter",'
Append JSON, '   "$isHidden":"false"'
Append JSON, '  },'
Append JSON, '  "amount1":{'
Append JSON, '   "$type":"application/x-decimal",'
Append JSON, '   "$title":"Montant test 2"'
Append JSON, '  },'
Append JSON, '  "amount2":{'
Append JSON, '   "$type":"application/x-decimal",'
Append JSON, '   "$title":"Nombre 2"'
Append JSON, '  },'
Append JSON, '  "amount3":{'
Append JSON, '   "$type":"application/x-decimal",'
Append JSON, '   "$title":"mt1 n+1"'
Append JSON, '  },'
Append JSON, '  "amount4":{'
Append JSON, '   "$type":"application/x-decimal",'
Append JSON, '   "$title":"nb1 n+1"'
Append JSON, '  }'
Append JSON, '},'
Append JSON, '"$cube":{'
Append JSON, '  "$mode":"table",'
Append JSON, '  "$title":"",'
Append JSON, '  "$hierarchies":{'
Append JSON, '   "zzmModule":{'
Append JSON, '    "$title":"Module",'
Append JSON, '    "$properties":['
Append JSON, '     "zzmModule"'
Append JSON, '    ],'
Append JSON, '    "zzmClenum1_zzmUpdusr_zzmCpy":{'
Append JSON, '     "$title":"ClÃ© primaire de l'+"'"+'objet/Utilisateur/SociÃ©tÃ©",'
Append JSON, '     "$properties":['
Append JSON, '      "zzmClenum1",'
Append JSON, '      "zzmUpdusr",'
Append JSON, '      "zzmCpy"'
Append JSON, '     ],'
Append JSON, '     "zzmCur":{'
Append JSON, '      "$title":"Devise",'
Append JSON, '      "$properties":['
Append JSON, '       "zzmCur"'
Append JSON, '      ]'
Append JSON, '     },'
Append JSON, '     "date":{'
Append JSON, '      "properties":['
Append JSON, '       "dateStat"'
Append JSON, '      ],'
Append JSON, '      "periods":"YSQMD"'
Append JSON, '     }'
Append JSON, '    },'
Append JSON, '    "$measures":{'
Append JSON, '     "amount1":{'
Append JSON, '      '
Append JSON, '     },'
Append JSON, '     "amount2":{'
Append JSON, '      '
Append JSON, '     },'
Append JSON, '     "amount3":{'
Append JSON, '      '
Append JSON, '     },'
Append JSON, '     "amount4":{'
Append JSON, '      '
Append JSON, '     }'
Append JSON, '    }'
Append JSON, '   }'
Append JSON, '  }'
Append JSON, '}'
Append JSON, '}'

Call CHECK_TRUE(func TESTCLOB(JSON)) From AXUNIT
End


#------------------------------------------------#
# TC020: Parse a CLOB
#
#------------------------------------------------#
Subprog TC020()
Local Clbfile JSON
Append JSON, '{'
Append JSON, '    "CLOB": "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901'
&  + '2345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234'
&  + '567890'
&  + '123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"'
Append JSON, '}'
Call CHECK_TRUE(func TESTCLOB(JSON)) From AXUNIT
End

