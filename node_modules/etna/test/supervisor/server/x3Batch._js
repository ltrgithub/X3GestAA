"use strict";
var module = QUnit.module;
var assert = require("assert");
var config = require('config'); // must be first syracuse require
var x3Helper = require("etna/test/supervisor/fixtures/x3Helper");
var helpers = require('syracuse-core').helpers;

var tracer; // = console.log;
var doStop = false;

module(config.unit_test.x3endpoint.folder + ".x3Batch");

var baseUrl = "/sdata/x3/erp/" + config.unit_test.x3endpoint.dataset + "/";

if (!config.unit_test || !config.unit_test.x3endpoint || !config.unit_test.run || !config.unit_test.run.x3Batch) {
	test('X3 BATCH UNIT TESTS DISABLED FOR NOW', 1, function() {
		ok(true, "work in progress");
	});
} else {
	if ((config.unit_test || {}).x3endpoint) {
		(function test(_) {
			asyncTest("start", function(_) {
				if (config.unit_test.x3endpoint.serverPort != config.unit_test.x3endpoint.localPort) {
					ok(x3Helper.initDatabase(_), "syracuse mongodb database initialized");
					x3Helper.initialize(_);
					ok(x3Helper.createObjects(_), "createObjects");
					start();
				} else {
					ok(true, "start");
				}
				start();
			});


			var cookie = null;

			function _getCookie(_) {
				cookie = cookie || x3Helper.getCookie(_);
				//!ok("cookie"   ,"cookie"   +JSON.stringify(cookie));
				return cookie;
			}

			var Batch = function(_class, _repName) {
				var className = _class;
				var repName = _repName;
				var batch = {};
				batch.$url = x3Helper.x3Url(_class + "/$batch?representation=" + repName + ".$edit");
				batch.$resources = [];

				this.delete = function(_, _key) {
					var _resource = {};
					_resource.$httpMethod = "DELETE";
					_resource.$key = _key;
					_resource.$url = baseUrl + className + "('" + _key + "')?representation=" + repName + ".$edit";
					batch.$resources.push(_resource);
				};

				this.create = function(_, _resource) {
					_resource.$httpMethod = "POST";
					_resource.$url = baseUrl + className + "?representation=" + repName + ".$edit";
					batch.$resources.push(_resource);
				};

				this.update = function(_, _resource, _key) {
					_resource.$httpMethod = "PUT";
					_resource.$httpifMatch = 1;
					_resource.$baseUrl = baseUrl;
					_resource.$prototype = "{$baseUrl}/$prototype('{$representation}.$thumb')";
					_resource.$representation = className;
					_resource.$url = baseUrl + className + "('" + _key + "')?representation=" + repName + ".$edit";
					_resource.$type = "application/json;vnd.sage=syracuse";
					_resource.$etag = 1;
					_resource.$actions = {
						"$save": {
							"$isHidden": false,
							"$isDisabled": false,
							"$links": {
								"$query": {
									"$isHidden": false
								},
								"$details": {
									"$isHidden": false
								},
								"$edit": {
									"$isHidden": false
								}
							}
						},
						"$abort": {
							"$isHidden": false,
							"$isDisabled": false,
							"$links": {
								"$query": {
									"$isHidden": false
								},
								"$details": {
									"$isHidden": false
								}
							}
						}
					};

					batch.$resources.push(_resource);
					/*dbg*/
					//ok(true,"DBG batch:"+JSON.stringify(batch));
				};

				this.get = function(_, _param) {
					var _resource = {};
					_resource.$httpMethod = "GET";
					_resource.$url = x3Helper.x3Url(className + "?representation=" + repName + ".$query");
					if (typeof(_param) == 'string') {
						_resource.$url += "&" + _param;
					}
					batch.$resources.push(_resource);
				};

				this.post = function(_) {
					/*dbg*/
					ok(true, "DBG post:" + JSON.stringify(batch));
					var response = x3Helper.post(_, _getCookie(_), batch.$url, batch);
					/*dbg*/
					ok(true, "DBG response:" + JSON.stringify(response));
					return response;
				};
			};

			var Representation = function(_class, _repName) {
				var className = _class;
				var repName = _repName;
				repName = (typeof _repName == "undefined") ? _class : _repName;

				var uuid = helpers.uuid.generate();

				this.get_facet = function(_, _key, _facet) {
					// Get the $details prototype :
					this.proDetails = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('" + repName + "." + _facet + "')"), 200);
					/*dbg*/ //ok(true,repName+".$details prototype");

					var data = x3Helper.get(_, _getCookie(_), x3Helper.x3Url(className + "(%27" + _key + "%27)?representation=" + repName + "." + _facet + ""), 200);
					/*dbg*/
					ok(true, "DBG read:" + JSON.stringify(data));
					return data;
				};

				this.read = function(_, _key) {
					return this.get_facet(_, _key, "$details");
				};

				this.edit = function(_, _key) {
					var data = this.get_facet(_, _key, "$edit");
					ok(data.ETag > 0, "ETag");
					return data;
				};
			};

			/*******************************************************************************
	         testIssue1475 :
	        *******************************************************************************/

			function testIssue1475() {
				asyncTest("AQCQRY02 Create OK" + x3Helper.gitHubIssue(1475), function(_) {
					var data = {
						"FIELD01": 200,
						"FIELD02": 2001
					};
					var batch = new Batch("AQCQRY02", "AQCQRY02");
					batch.delete(_, data.FIELD01);
					batch.create(_, data);
					batch.post(_);

					var representation = new Representation("AQCQRY02");
					var response = representation.read(_, data.FIELD01);
					strictEqual(data.FIELD01, response.FIELD01, "FIELD01=" + data.FIELD01);
					strictEqual(data.FIELD02, response.FIELD02, "FIELD02=" + data.FIELD02);
					var response = representation.edit(_, data.FIELD01);
					start();
				});

				asyncTest("AQCQRY02 CRUD OK" + x3Helper.gitHubIssue(1475), function(_) {
					var data1 = {
						"FIELD01": 201,
						"FIELD02": 2011
					};
					var batch = new Batch("AQCQRY02", "AQCQRY02");
					batch.delete(_, data1.FIELD01);
					batch.create(_, data1);
					var data2 = {
						"FIELD01": 201,
						"FIELD02": 2012
					};
					batch.update(_, data2, 201);
					var response = batch.post(_);

					strictEqual(200, response.$resources[0].$httpStatus, "$httpStatus:" + response.$resources[0].$httpStatus);
					strictEqual(201, response.$resources[1].$httpStatus, "$httpStatus:" + response.$resources[1].$httpStatus);
					strictEqual(200, response.$resources[2].$httpStatus, "$httpStatus:" + response.$resources[2].$httpStatus);

					var representation = new Representation("AQCQRY02");
					var response = representation.read(_, 201);
					strictEqual( 201, response.FIELD01, "FIELD01=" + response.FIELD01);
					strictEqual(2012, response.FIELD02, "FIELD02=" + response.FIELD02);
					start();
				});

				asyncTest("AQCQRY02 GET", function(_) {
					var batch = new Batch("AQCQRY02", "AQCQRY02");
					batch.get(_);
					batch.post(_);
					start();
				});
			}

			/*******************************************************************************
	         testIssue1704 :
	        *******************************************************************************/

			function testIssue1704() {
				asyncTest("AQCQRY02 Delete" + x3Helper.gitHubIssue(1704), function(_) {
					var batch = new Batch("AQCQRY02", "AQCQRY02");
					var data = {
						"FIELD01": 123,
						"FIELD02": 2001
					};
					batch.delete(_, data.FIELD01);
					var response = batch.post(_);
					/*dbg*/
					strictEqual(404, response.$resources[0].$httpStatus, "$httpStatus:" + response.$resources[0].$httpStatus);
					start();
				});

			}

			/*******************************************************************************
	         testIssue2362 :
	        *******************************************************************************/

			function testIssue2362() {
				asyncTest("AQMDEVICE Delete" + x3Helper.gitHubIssue(2362), function(_) {
					var batch = new Batch("AQMDEVICE", "AQMDEVICE");
					var data = {
						"CODE": 740
					};
					batch.delete(_, data.CODE);
					var response = batch.post(_);
					/*dbg*/
					strictEqual(403, response.$resources[0].$httpStatus, "$httpStatus:" + response.$resources[0].$httpStatus);
					start();
				});

			}

			/*******************************************************************************
	         testIssue2306 :
	        *******************************************************************************/

			function testIssue2306() {
				asyncTest("AQMFIELDSM Update" + x3Helper.gitHubIssue(2306), function(_) {
					var batch = new Batch("AQMFIELDSM", "AQMFIELDSM");
					var data = {
						"CODE": 40,
						"TEXTDES": "D�signation 40",
						"CODECHR": "code40",
						"TDATE": "2013-06-17",
						"TEXTE": "My Texte en fran�ais",
						"CREDATTIM": "0000-00-00T00:00:00Z",
						"UPDDATTIM": "0000-00-00T00:00:00Z",
						"CUR": "j",
						"CUR_REF": {
							"$title": ""
						},
						"SITE": "AMB",
						"SITE_REF": {
							"$title": "Ambilly",
							"$description": "Ambilly"
						},
						"$uuid": "d655c289-4833-4d20-99a8-38034265fc0f",
						"$properties": {
							"CODE": {
								"$isMandatory": true,
								"$isReadOnly": true
							},
							"CODECHR": {
								"$isMandatory": true
							}
						}
					};
					batch.update(_, data, data.CODE);
					var response = batch.post(_);
					/*dbg*/
					strictEqual(400, response.$resources[0].$httpStatus, "$httpStatus:" + response.$resources[0].$httpStatus);
					start();
				});

			}


			/*******************************************************************************
	         testIssue2306 :
	        *******************************************************************************/

			function testIssueAQMDEVICE() {
				function checkProperty(_object, _name, _expected) {
					strictEqual(_expected, _object[_name], _name + ":" + _object[_name]);
				}
				asyncTest("AQMDEVICE $create 1", function(_) {
					var batch = new Batch("AQMDEVICE", "AQMCRUDM");
					var data = {
						"CODE": 1000,
						"SIMUL1": false,
						"CUR": "EUR",
						"CUR_REF": {
							"$title": "Euro",
							"$description": "EURO",
							"$symbol": "€"
						},
						"SITE": "ASN",
						"SITE_REF": {
							"$title": "",
							"$description": "Asnières"
						},
						"FLGTEST": false,
						"MODULE": 1,
						"TDATE": "2014-01-08",
						"TEXTE": "Text de la clé 11134",
						"WMENU": 1,
						"CODECHR": "qunit",
						"ADEVCTINT": [
							88
						]
					};

					batch.delete(_, data.CODE);
					batch.create(_, data, data.CODE);
					var response = batch.post(_);

					checkProperty(response.$resources[1], "$httpStatus", 201);
					checkProperty(response.$resources[1], "CODE", 1000);
					checkProperty(response.$resources[1], "SIMUL1", false);
					checkProperty(response.$resources[1], "CUR", "EUR");
					checkProperty(response.$resources[1], "SITE", "ASN");
					checkProperty(response.$resources[1], "MODULE", 1);
					checkProperty(response.$resources[1], "WMENU", 1);
					checkProperty(response.$resources[1], "CODECHR", "qunit");
					start();
				});

				asyncTest("AQMDEVICE $create 2", function(_) {
					var batch = new Batch("AQMDEVICE", "AQMCRUDM");
					var data = {
						"WMENU": 1,
						"MODULE": 1,
						"CODE": 1000,
						"CUR": "EUR",
						"CODECHR": "qunit",
						"SITE": "ASN",
						"SIMUL1": false,
						"ADEVADEVICEL": [{
							"SUBCODE": 898,
							"TEXTDES": "qunit",
							"ADEV_TEXTAXX": "",
							"ADEV_SITE": "ASN",
							"ADEV_UNIT": "",
							"STATE": false,
							"$uuid": "88880452-3122-4560-a1e0-aa88272463c4"
						}]
					};

					batch.delete(_, data.CODE);
					batch.create(_, data, data.CODE);
					var response = batch.post(_);

					checkProperty(response.$resources[1], "$httpStatus", 201);
					checkProperty(response.$resources[1], "CODE", 1000);
					checkProperty(response.$resources[1], "SIMUL1", false);
					checkProperty(response.$resources[1], "CUR", "EUR");
					checkProperty(response.$resources[1], "SITE", "ASN");
					checkProperty(response.$resources[1], "MODULE", 1);
					checkProperty(response.$resources[1], "WMENU", 1);
					checkProperty(response.$resources[1], "CODECHR", "qunit");
					ok(response.$resources[1]["ADEVADEVICEL"], "ADEVADEVICEL");
					strictEqual(1, response.$resources[1]["ADEVADEVICEL"].length, "ADEVADEVICEL size");
					checkProperty(response.$resources[1]["ADEVADEVICEL"][0], "SUBCODE", 898);
					checkProperty(response.$resources[1]["ADEVADEVICEL"][0], "TEXTDES", "qunit");
					checkProperty(response.$resources[1]["ADEVADEVICEL"][0], "ADEV_SITE", "ASN");
					checkProperty(response.$resources[1]["ADEVADEVICEL"][0], "STATE", false);

					start();
				});


				asyncTest("AQMDEVICE $create 3", function(_) {
					var batch = new Batch("AQMDEVICE", "AQMCRUDM");
					var data = {
						"WMENU": 1,
						"MODULE": 1,
						"CODE": 1000,
						"CUR": "EUR",
						"CODECHR": "qunit",
						"SITE": "ASN",
						"SIMUL1": false,
						"ADEVADEVICEL": [{
							"SUBCODE": 898,
							"TEXTDES": "qunit",
							"ADEV_TEXTAXX": "",
							"ADEV_SITE": "ASN",
							"ADEV_UNIT": "",
							"STATE": false,
							"$uuid": "88880452-3122-4560-a1e0-aa88272463c4"
						}],
						"ADEVCTINT": [
							88
						]
					};

					batch.delete(_, data.CODE);
					batch.create(_, data, data.CODE);
					var response = batch.post(_);

					checkProperty(response.$resources[1], "$httpStatus", 201);
					checkProperty(response.$resources[1], "CODE", 1000);
					checkProperty(response.$resources[1], "SIMUL1", false);
					checkProperty(response.$resources[1], "CUR", "EUR");
					checkProperty(response.$resources[1], "SITE", "ASN");
					checkProperty(response.$resources[1], "MODULE", 1);
					checkProperty(response.$resources[1], "WMENU", 1);
					checkProperty(response.$resources[1], "CODECHR", "qunit");
					ok(response.$resources[1]["ADEVADEVICEL"], "ADEVADEVICEL");
					strictEqual(1, response.$resources[1]["ADEVADEVICEL"].length, "ADEVADEVICEL size");
					checkProperty(response.$resources[1]["ADEVADEVICEL"][0], "SUBCODE", 898);
					checkProperty(response.$resources[1]["ADEVADEVICEL"][0], "TEXTDES", "qunit");
					checkProperty(response.$resources[1]["ADEVADEVICEL"][0], "ADEV_SITE", "ASN");
					checkProperty(response.$resources[1]["ADEVADEVICEL"][0], "STATE", false);
					ok(response.$resources[1]["ADEVCTINT"], "ADEVCTINT");
					strictEqual(1, response.$resources[1]["ADEVCTINT"].length, "ADEVCTINT size");
					strictEqual(88, response.$resources[1]["ADEVCTINT"][0], "ADEVCTINT(0)");

					start();
				});


				asyncTest("AQMDEVICE $create 4", function(_) {
					var batch = new Batch("AQMDEVICE", "AQMCRUDM");
					var data = {
						"WMENU": 1,
						"MODULE": 1,
						"CODE": 1000,
						"CODECHR": "TestOffLine1",
						"SITE": "BY8",
						"SITE_REF": {
							"$description": "Nouveau"
						},
						"ADEVCTINT": [
							10,
							20
						],
						"ADEVADEVICEL": [{
							"SUBCODE": 10,
							"TEXTDES": "Level1",
							"ADEV_TEXTAXX": "",
							"ADEV_SITE": "BY8",
							"ADEV_UNIT": "",
							"STATE": false,
							"ADEV_SITE_REF": {
								"$description": "Nouveau"
							},
							"ADEVADEVICELADEVICELL": [{
								"SUBCODEL": 1011,
								"ADEV_ADEVICELL_TEXTDE": "Level 11",
								"ADEVADEVICELADEVICELLDLLL": [{
									"SUBCODELL": 10121,
									"ADEV_DLLL_TEXTDES": "Level 21",
									"$uuid": "9d3e4d31-5e71-4f3f-b340-b0cb9196af2e"
								}],
								"$uuid": "33740957-fe50-4f48-8e59-22dfee37d7d9"
							}],
							"$uuid": "b5eb5e18-daa4-4699-ab5b-09a8d10ee270"
						}]
					};

					batch.delete(_, data.CODE);
					batch.create(_, data, data.CODE);
					var response = batch.post(_);
					/*dbg*/
					strictEqual(201, response.$resources[1].$httpStatus, "$httpStatus:" + response.$resources[1].$httpStatus);
					start();
				});

			}

			function testIssue3207() {
				function checkProperty(_object, _name, _expected) {
					strictEqual(_expected, _object[_name], _name + ":" + _object[_name]);
				}

				asyncTest("Issue 3207" + x3Helper.gitHubIssue(3207), function(_) {
					var representation = new Representation("AQMDEVICE", "AQMCRUDM");
					var response = representation.read(_, "30");
					strictEqual(7, response["ADEVADEVICEL"].length, "ADEVADEVICEL size");
					for (var i = 0; i < response["ADEVADEVICEL"].length; i++) {
						ok("$properties" in response["ADEVADEVICEL"][i], "$properties");
						["ADEV_UNIT", "STATE"].forEach(function(property) {
							ok(property in response["ADEVADEVICEL"][i].$properties, property);
							ok("$isHidden" in response["ADEVADEVICEL"][i].$properties[property], "$isHidden");
							ok(response["ADEVADEVICEL"][i].$properties[property].$isHidden, "isHidden=true");
						});
					}
					start();
				});
			}

			testIssue1475();
			testIssue1704();
			//testIssueAQMDEVICE(); Scripts not up-to-date !
			////!testIssue3207();
			////!testIssue2362(); Test was changed ??
			////!testIssue2306(); representation removed ??


			asyncTest("stop server", 0, function(_) {
				x3Helper.stopServer();
				start();
			});
		})(_);
	}

	//******************************************************************************

	asyncTest("stop  tests", 0, function(_) {
		doStop = true;
		start();
	});
	// JavaScript Document
}