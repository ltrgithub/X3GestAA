#<AdxTL>@(#)0.0.0.0 $Revision$
Local Integer MY_STATUS
Local Instance MY_LOG Using C_ALOG
MY_LOG = NewInstance C_ALOG AllocGroup null
[L]MY_STATUS = fmet MY_LOG.ASETNAME("QLFAC_ALNKSUB_"+GACTX.USER)
[L]MY_STATUS = fmet MY_LOG.ABEGINLOG("QLFAC_ALNKSUB")

Local Clbfile RESULT
RESULT =  func TESTSUITE()
FreeGroup MY_LOG
GTRACE="QLFAC_ALNKSUB_"+GACTX.USER
Call LEC_TRACE From LECFIC

End

#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!
Subprog SETUP
# Database cleaning
Local File ALNKSUB [ALB]
Trbegin [ALB]
Delete [ALB] Where CRY="AR" and (COD="AA" | COD="BB" | COD="BA")
Commit
Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT
End

#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()


Call TESTSUITE_START("ALNKSUB", "Test suite for Class ALNKSUB") From AXUNIT

Call ADD_TESTCASE("ALNKSUB_CREATION","Creation of Unit AA",8) From AXUNIT
Call ADD_TESTCASE("ALNKSUB_READ","Read Unit AA",1) From AXUNIT
Call ADD_TESTCASE("ALNKSUB_UPDATE","Update Unit AA",1) From AXUNIT
Call ADD_TESTCASE("ALNKSUB_DELETE","Deletion of Unit AA",1) From AXUNIT

Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("ALNKSUB", "SYRA_ALNKSUB")

End SUITE_RESULT

#**
#* Create
#*!
Subprog ALNKSUB_CREATION()
Local Integer MY_STATUS
Local Instance QLFALB Using C_ALNKSUB
QLFALB = NewInstance C_ALNKSUB AllocGroup null

# Initialize Instance
[L]MY_STATUS = fmet QLFALB.AINIT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

#**
#* This insert fails - has invalid type value

#*!
QLFALB.CRY = ""
QLFALB.TYP = 1

Local Integer ILINE
ILINE=fmet QLFALB.ADDLINE("COLALB", [V]CST_ALASTPOS)
QLFALB.COLALB(ILINE).POS = "123*"
QLFALB.COLALB(ILINE).COD = "BA"

[L]MY_STATUS = fmet QLFALB.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

Local Integer I
For I=1 To maxtab(QLFALB.AERROR)
 If  QLFALB.AERROR(I).STA=[V]CST_AERROR & QLFALB.AERROR(I)<>null & QLFALB.AERROR(I).DEL<>2
   Call CHECK_NOTEQUAL(QLFALB.AERROR(I).PRO-":"-QLFALB.AERROR(I).MES,"") From AXUNIT
 Endif
Next I
FreeGroup QLFALB

# Test default subdivision
QLFALB = NewInstance C_ALNKSUB AllocGroup null

Local File TABCOUNTRY  [TCY]

Filter [TCY] Where  ETATFLG=1 and ETATFLG2=2
Read[TCY]Last

If !fstat
  # Initialize instance
  [L]MY_STATUS = fmet QLFALB.AINIT()
  Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
  QLFALB.CRY = [TCY]CRY
  Call CHECK_EQUAL(QLFALB.TYP,3) From AXUNIT
Endif

FreeGroup QLFALB

QLFALB = NewInstance C_ALNKSUB AllocGroup null

# Initialize Instance
[L]MY_STATUS = fmet QLFALB.AINIT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

#**
#* This insert succeeds
#*!

QLFALB.CRY = "AR"
QLFALB.TYP = 2                # Subdivision 1

ILINE=fmet QLFALB.ADDLINE("COLALB", [V]CST_ALASTPOS)
QLFALB.COLALB(ILINE).CRY = "AR"
QLFALB.COLALB(ILINE).POS = "123*"
QLFALB.COLALB(ILINE).COD = "BA"
[L]MY_STATUS = fmet QLFALB.AINSERT()
Call CHECK_EQUAL("Subdivision 1"-num$([L]MY_STATUS),"Subdivision 1"-num$([V]CST_AOK)) From AXUNIT

FreeGroup QLFALB
End

#**
#* Read an unit
#*!
Subprog ALNKSUB_READ()
Local Integer MY_STATUS
Local Instance QLFALB Using C_ALNKSUB
QLFALB = NewInstance With C_ALNKSUB

[L]MY_STATUS = fmet QLFALB.AREAD("AR",2)
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

FreeGroup QLFALB
End

#**
#* Update an unit
#*!
Subprog ALNKSUB_UPDATE()
Local Integer MY_STATUS,ILINE
Local Instance QLFALB Using C_ALNKSUB
QLFALB = NewInstance C_ALNKSUB AllocGroup null

[L]MY_STATUS = fmet QLFALB.AREAD("AR",2)

ILINE=fmet QLFALB.ADDLINE("COLALB", [V]CST_ALASTPOS)
QLFALB.COLALB(ILINE).POS = "124*"
QLFALB.COLALB(ILINE).COD = "BA"

[L]MY_STATUS = fmet QLFALB.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

FreeGroup QLFALB
End

#**
#* Delete an unit
#*!
Subprog ALNKSUB_DELETE()
Local Integer MY_STATUS
Local Instance QLFALB Using C_ALNKSUB
QLFALB = NewInstance C_ALNKSUB AllocGroup null

[L]MY_STATUS = fmet QLFALB.AREAD("AR",2)
[L]MY_STATUS = fmet QLFALB.ADELETE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

FreeGroup QLFALB
End

Funprog GETERRMES(INS,PRO,ERRTYP)
Variable Instance INS Using OBJECT
Value Char    PRO
Value Integer ERRTYP
Local Char MES(250)
Local Integer I
For I=1 To maxtab(INS.AERROR)
 If  INS.AERROR(I).PRO=[L]PRO & INS.AERROR(I).STA=[L]ERRTYP & INS.AERROR(I)<>null & INS.AERROR(I).DEL<>2
   MES=INS.AERROR(I).MES : Break
 Endif
Next I
End MES

