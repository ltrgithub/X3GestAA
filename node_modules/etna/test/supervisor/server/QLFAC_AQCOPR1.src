# Test operations and methods

Local Clbfile TMP_CLBFILE(2)
TMP_CLBFILE= func TESTSUITE()
GTRACE = "QLFAC_AQCOPR1_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

Subprog SETUP
End


Funprog TESTSUITE()
  Call ADD_TESTCASE("TC_CLASS","TC_CLASS" ,19) From AXUNIT
End func AXUNIT.RUN_TESTSUITE("QLFAC_AQCOPR1", "Operations and methods")

Subprog TC_CLASS
Local Char TC(255),EVENT(50)
Local Integer MY_STATUS,LINE
Local Instance MY_INSTANCE Using C_AQCOPR1
MY_INSTANCE = NewInstance C_AQCOPR1
Local Date YDATE
Local Clbfile YCLBFILE
Local Blbfile YBLBFILE
Local Char YCHAR(50)
Local Integer YINT
Local Tinyint YTINYINT
Local Decimal YDECIMAL

Local Instance MY_BANK Using C_ABANK
MY_BANK = NewInstance C_ABANK

[L]MY_STATUS = fmet MY_INSTANCE.AINIT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AINFO) From AXUNIT

MY_INSTANCE.ACHAR = "TEST1"

# Methods
[L]YDATE = fmet MY_INSTANCE.AQCMET1()
[L]YCLBFILE = fmet MY_INSTANCE.AQCMET2()

# AOPERATIONs
[L]YDATE = fmet MY_INSTANCE.AQCOP1([L]YCHAR,[L]YDATE,[L]YTINYINT)
[L]YCHAR = fmet MY_INSTANCE.AQCOP2("ABC",MY_BANK)
[L]YINT = fmet MY_INSTANCE.AQCOP3([L]YCHAR,1,3,[L]YINT)
[L]YDECIMAL = fmet MY_INSTANCE.AQCOP4("123.456")
[L]YCLBFILE = fmet MY_INSTANCE.AQCOP5([L]YCHAR,[L]YDATE,[L]YTINYINT)
[L]YBLBFILE = fmet MY_INSTANCE.AQCOP6([L]YCHAR)

[L]LINE = fmet MY_INSTANCE.ADDLINE("COLAQCOPR11",[V]CST_ALASTPOS)

# Child method and operation
Infbox ">>> [L]LINE:"+num$([L]LINE)

[L]YDATE = fmet MY_INSTANCE.COLAQCOPR11([L]LINE).AQCOP11_OPR1(MY_INSTANCE.ACHAR, MY_INSTANCE.COLAQCOPR11([L]LINE).YASHORTINT,datetime$,3)
[L]YDATE = fmet MY_INSTANCE.COLAQCOPR11([L]LINE).AQCOP11_MET1()

Local Char EVENT(30)
EVENT="ALL"
Gosub EVENTS_DATA

Gosub DISPLAY_MESSAGES

FreeGroup MY_INSTANCE

End

#**
#* Write messages to log
#*!
$WRITE_MESSAGES
For I=1 To maxtab(MY_INSTANCE.AERROR)
 If  MY_INSTANCE.AERROR(I)<>null & MY_INSTANCE.AERROR(I).DEL<>2
   Call CHECK_NOTEQUAL(MY_INSTANCE.AERROR(I).PRO-":"-MY_INSTANCE.AERROR(I).MES,"") From AXUNIT
 Endif
Next I
If MY_INSTANCE.COLAQCOPR11<>null
  For I=1 To maxtab(MY_INSTANCE.COLAQCOPR11.AERROR)
   If  MY_INSTANCE.COLAQCOPR11.AERROR(I)<>null & MY_INSTANCE.COLAQCOPR11.AERROR(I).DEL<>2
     Call CHECK_NOTEQUAL(MY_INSTANCE.COLAQCOPR11.AERROR(I).PRO-":"-MY_INSTANCE.COLAQCOPR11.AERROR(I).MES,"") From AXUNIT
   Endif
  Next I
  Callmet MY_INSTANCE.COLAQCOPR11.ADELETEERROR([V]CST_ALLERRORS)
Endif

Callmet MY_INSTANCE.ADELETEERROR([V]CST_ALLERRORS)
Return

$DISPLAY_MESSAGES
  Local Integer I,NB_MSG
  Local Char MESSAGES(250)(1..)
  NB_MSG=func AGETMESSAGES(MY_INSTANCE,MESSAGES)
  Call CHECK_NOTEQUAL("EVENT ["+EVENT+"]","") From AXUNIT
  # Check messages
  Case EVENT
    When "ALL"                   : Call COMPARE_MESSAGES(EVENT,MESSAGES,EVENTS_ALL)

    When Default:  : Call CHECK_EQUAL("["+EVENT+"] not found","") From AXUNIT
  Endcase
  # clear messages
  Callmet MY_INSTANCE.ADELETEERROR(CST_ALLERRORS)
Return

$EVENTS_DATA
Local Integer IDX : IDX=0
Local Char EVENTS_ALL(255)(0..)
IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [EVENTS] Action CURPTH=[] AEVENT=[AINIT] AMETHOD=[] AOPERATION=[]'
IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [METHODS] Action CURPTH=[] AEVENT=[] AMETHOD=[AQCMET1] AOPERATION=[]'
IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [METHODS] Action CURPTH=[] AEVENT=[] AMETHOD=[AQCMET2] AOPERATION=[]'
IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [OPERATIONS] Action CURPTH=[] AEVENT=[] AMETHOD=[] AOPERATION=[AQCOP1]'
IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [OPERATIONS] Action CURPTH=[] AEVENT=[] AMETHOD=[] AOPERATION=[AQCOP2]'
IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [OPERATIONS] Action CURPTH=[] AEVENT=[] AMETHOD=[] AOPERATION=[AQCOP3]'
IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [OPERATIONS] Action CURPTH=[] AEVENT=[] AMETHOD=[] AOPERATION=[AQCOP4]'
IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [OPERATIONS] Action CURPTH=[] AEVENT=[] AMETHOD=[] AOPERATION=[AQCOP5]'
IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [OPERATIONS] Action CURPTH=[] AEVENT=[] AMETHOD=[] AOPERATION=[AQCOP6]'
IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [EVENTS] Action CURPTH=[COLAQCOPR11] AEVENT=[ADDLINE_BEFORE] AMETHOD=[] AOPERATION=[]'
IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR11 Execute [EVENTS] Action CURPTH=[] AEVENT=[AINIT] AMETHOD=[] AOPERATION=[]'
IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR11 Execute [EVENTS] Action CURPTH=[COLAQCOPR11] AEVENT=[AINIT] AMETHOD=[] AOPERATION=[]'
IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR11 Execute [EVENTS] Action CURPTH=[] AEVENT=[ADDLINE_AFTER] AMETHOD=[] AOPERATION=[]'
IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR11 Execute [EVENTS] Action CURPTH=[COLAQCOPR11] AEVENT=[ADDLINE_AFTER] AMETHOD=[] AOPERATION=[]'
IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR11 Execute [OPERATIONS] Action CURPTH=[] AEVENT=[] AMETHOD=[] AOPERATION=[AQCOP11_OPR1]'
IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR11 Execute [METHODS] Action CURPTH=[] AEVENT=[] AMETHOD=[AQCOP11_MET1] AOPERATION=[]'

#IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [EVENTS] Action CURPTH=[] AEVENT=[AINIT]'
#IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [METHODS] Action AMETHOD=[AQCMET1]'
#IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [METHODS] Action AMETHOD=[AQCMET2]'
#IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [OPERATIONS] Action OPERATION=[AQCOP1]'
#IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [OPERATIONS] Action OPERATION=[AQCOP2]'
#IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [OPERATIONS] Action OPERATION=[AQCOP3]'
#IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [OPERATIONS] Action OPERATION=[AQCOP4]'
#IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [OPERATIONS] Action OPERATION=[AQCOP5]'
#IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [OPERATIONS] Action OPERATION=[AQCOP6]'
#IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR1 Execute [EVENTS] Action CURPTH=[COLAQCOPR11] AEVENT=[ADDLINE_BEFORE]'
#IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR11 Execute [EVENTS] Action CURPTH=[] AEVENT=[AINIT]'
#IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR11 Execute [EVENTS] Action CURPTH=[] AEVENT=[AINIT]'
#IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR11 Execute [EVENTS] Action CURPTH=[COLAQCOPR11] AEVENT=[AINIT]'
#IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR11 Execute [EVENTS] Action CURPTH=[] AEVENT=[ADDLINE_AFTER]'
#IDX+=1 : EVENTS_ALL(IDX)='C_AQCOPR11 Execute [EVENTS] Action CURPTH=[] AEVENT=[ADDLINE_AFTER]'
#IDX+=1 : EVENTS_ALL(IDX)='Execute Class [METHODS] AMETHOD=[AQCOP11_MET1]'
Return

Subprog COMPARE_MESSAGES(EVENT,GOT_MSG, EXPECTED_MSG)
Value Char EVENT
Value Char GOT_MSG()
Variable Char EXPECTED_MSG()()
Local Char GOT_MESSAGE(255), EXPECTED_MESSAGE(255)
Local Integer  I
MAXMSG = min(maxtab(GOT_MSG),maxtab(EXPECTED_MSG))
For I=1 To MAXMSG
  Call CHECK_EQUAL(GOT_MSG(I),EXPECTED_MSG(I)) From AXUNIT
Next

If maxtab(GOT_MSG)<maxtab(EXPECTED_MSG)
  For I=maxtab(GOT_MSG)+1 To maxtab(EXPECTED_MSG)
    Call CHECK_EQUAL("Missing got message",EXPECTED_MSG(I)) From AXUNIT
  Next
Elsif maxtab(GOT_MSG)>maxtab(EXPECTED_MSG)
  For I=maxtab(EXPECTED_MSG)+1 To maxtab(GOT_MSG)
    Call CHECK_EQUAL(GOT_MSG(I),"Missing expected message") From AXUNIT
  Next
Endif

End

Funprog AGETERRORS(OBJ,ERRORS)
Variable Instance OBJ Using OBJECT
Variable Instance ERRORS(1..) Using C_AERROR

Local Integer  NBERRORS
Local Integer AI,ASTATUS

For AI=1 To maxtab(OBJ.AERROR)
   If OBJ.AERROR(AI)<>null & OBJ.AERROR(AI).DEL<>2
    NBERRORS += 1
    ERRORS(NBERRORS) = OBJ.AERROR(AI)
   Endif
Next AI

If OBJ.COLAQCOPR11<>null
  For AI=1 To maxtab(OBJ.COLAQCOPR11.AERROR)
   If  OBJ.COLAQCOPR11.AERROR(AI)<>null & OBJ.COLAQCOPR11.AERROR(AI).DEL<>2
    NBERRORS += 1
    ERRORS(NBERRORS) = OBJ.COLAQCOPR11.AERROR(AI)
   Endif
  Next
Endif

End NBERRORS

Funprog AGETMESSAGES(OBJ,ERRORS)
Variable Instance OBJ Using OBJECT
Variable Char ERRORS()
Local Integer MY_STATUS, ERR_STATUS,ERR_CATEGORY
Local Integer  NBERRORS
Local Integer AI
Local Char ERR_PROPERTY(250),ERR_PROPERTY_LABEL(250),ERR_MESSAGE(250),ERR_ENVIRONMENT(250)

[L]MY_STATUS = fmet OBJ.ASEARCHINFOS([V]CST_ALL,AVOID.ACHAR,[V]CST_AFATAL,0)
Call CHECK_EQUAL([L]MY_STATUS, [V]CST_AOK) From AXUNIT
While [L]MY_STATUS = [V]CST_AOK
  [L]MY_STATUS = fmet OBJ.AGETNEXTINFOS( [L]ERR_STATUS, [L]ERR_PROPERTY, [L]ERR_PROPERTY_LABEL, [L]ERR_MESSAGE, [L]ERR_CATEGORY, [L]ERR_ENVIRONMENT)
  If [L]MY_STATUS = [V]CST_AOK
    If [L]ERR_STATUS <> [V]CST_ADEL and [L]ERR_STATUS <> [V]CST_ANEWDEL
      NBERRORS+=1
      ERRORS(NBERRORS)=[L]ERR_MESSAGE
    Endif
  Endif
Wend

End NBERRORS

