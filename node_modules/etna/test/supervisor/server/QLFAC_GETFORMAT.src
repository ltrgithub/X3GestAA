Local Clbfile RESULT
RESULT = func TESTSUITE()
Call FERME_TRACE From LECFIC
#GTRACE = "QLFAC_GETFORMAT_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

#------------------------------------------------------------------------------#
Funprog TESTSUITE()
Call ADD_TESTCASE("TEST_GETFORMAT","Subprog GETFORMAT*",7) From AXUNIT
Call ADD_TESTCASE("TEST_CONTROLFORMAT","Subprog CONTROLFORMAT*",22) From AXUNIT
End func AXUNIT.RUN_TESTSUITE("REQ-89655","Getformat for Data-types")

#------------------------------------------------------------------------------#
Subprog TEST_GETFORMAT()

Local Char     AFORMAT(20) , SPECIAL(10) , DEV(10) , UNIT(10) , CAR(250)  , CRY(30) , TYP(10)
Local Char     CHAINE(250) , FMT(50)
Local Decimal  DEC
Local Shortint ASTATUS , OK

Local Instance TCY Using C_TABCOUNTRY
TCY = NewInstance With C_TABCOUNTRY
Local File TABCOUNTRY [TCY] , TABCUR [TCU] , TABUNIT [TUN] , ATYPE [ATY]

DEV = func ADP_TOOL.GET_PARAM(GACTX.AFOLDER,1,"","SYSCUR")
Local File =nomap+".ADOVAL" [AD__]
Read [AD__]ADW0="";"";"SYSCUR"
Call CHECK_EQUAL("system currency="+DEV,"system currency="+[F:AD__]VALEUR) From AXUNIT
Close Local File [AD__]

CAR = "Test"
CRY = "FR"
Read [TCY]TCY0 = CRY
ASTATUS = func ASYRTRTATY.GETFORMATADL(TCY,"NAM1",CAR,AFORMAT,CRY)
Call CHECK_EQUAL("Format adress"-CRY+"="+AFORMAT,"Format adress"-CRY+"="+[F:TCY]ADRCODFMT) From AXUNIT

CRY = "US"
Read [TCY]TCY0 = CRY
If [F:TCY]ETAT=2 & [F:TCY]ETATFLG=2
 CHAINE = [F:TCY]ETATFMT
Elsif [F:TCY]ETAT=3 & [F:TCY]ETATFLG2=2
 CHAINE = [F:TCY]ETATFMT2
Endif
ASTATUS = func ASYRTRTATY.GETFORMATSAT(TCY,"SAT",CAR,AFORMAT,CRY,SPECIAL)
Call CHECK_EQUAL("Format sat"-CRY+"="+AFORMAT,"Format sat"-CRY+"="+CHAINE) From AXUNIT

CRY = "FR"
Read [TCY]TCY0 = CRY
CHAINE = [F:TCY]POSCODFMT
ASTATUS = func ASYRTRTATY.GETFORMATPOS(TCY,"POSCOD",CAR,AFORMAT,CRY)
Call CHECK_EQUAL("Format post"-CRY+"="+AFORMAT,"Format post"-CRY+"="+CHAINE) From AXUNIT

DEC = 23.6
DEV  = "EUR"
Read [TCU]TCU0 = DEV
CHAINE = [F:TCU]CURFMT1+"#"
ASTATUS = func ASYRTRTATY.GETFORMATMD3(TCY,"EDIBPRTYP",DEC,AFORMAT,DEV)
Call CHECK_EQUAL("Format md3"-DEV+"="+AFORMAT,"Format md3"-DEV+"="+CHAINE) From AXUNIT

UNIT = "B40"
Call FMTQTY(UNIT,CHAINE)
ASTATUS = func ASYRTRTATY.GETFORMATQTY(TCY,"EDIBPRTYP",DEC,AFORMAT,UNIT)
Call CHECK_EQUAL("Format unit"-UNIT+"="+AFORMAT,"Format unit"-UNIT+"="+CHAINE) From AXUNIT

TYP = "ATB"
Read [ATY]CODTYP=TYP
FMT = [F:ATY]FORTYP
ASTATUS = func ASYRTRTATY.GETFORMAT(TCY,"EDIBPRTYP",CAR,AFORMAT,TYP)
Call CHECK_EQUAL("Format generic"-TYP+"="+AFORMAT,"Format generic"-TYP+"="+FMT) From AXUNIT

FreeInstance

End

#------------------------------------------------------------------------------#
Subprog TEST_CONTROLFORMAT()

Local Char     AFORMAT(20) , SPECIAL(10) , DEV(10) , UNIT(10) , CAR(250)  , CRY(30) , TYP(10)
Local Char     CHAINE(250) , FMT(50)
Local Decimal  DEC
Local Shortint ASTATUS

Local Instance TCY Using C_TABCOUNTRY
TCY = NewInstance With C_TABCOUNTRY
Local File TABCOUNTRY [TCY] , TABCUR [TCU] , TABUNIT [TUN] , ATYPE [ATY] , POSCOD [POS]

CRY = ""
CAR = string$(45,"A")
ASTATUS = func ASYRTRTATY.CONTROLADL(TCY,"NAM1",CAR,CRY)
Call CHECK_EQUAL("control adress without country"-CAR-"status="+num$(ASTATUS),"control adress without country"-CAR-"status=0") From AXUNIT

CRY = "FR"
CAR = string$(80,"A")
ASTATUS = func ASYRTRTATY.CONTROLADL(TCY,"NAM1",CAR,CRY)
Call CHECK_EQUAL("control adress"-CRY-CAR-"status="+num$(ASTATUS),"control adress"-CRY-CAR-"status=4") From AXUNIT

CAR = "06130"
CRY  = "FR"
CHAINE = "status=0"
Read [POS]POS0(2)=CRY;CAR
If fstat
 Read [TCY]TCY0 = CRY
 If [F:TCY]POSCODCTL=2
  CHAINE = "status=3"
 Endif
Endif
ASTATUS = func ASYRTRTATY.CONTROLPOS(TCY,"EDIBPRTYP",CAR,CRY)
Call CHECK_EQUAL("control pos"-CRY-CAR-"status="+num$(ASTATUS),"control pos"-CRY-CAR-CHAINE) From AXUNIT


CAR = "06131"
CRY  = "FR"
CHAINE = "status=0"
Read [POS]POS0(2)=CRY;CAR
If fstat
 Read [TCY]TCY0 = CRY
 If [F:TCY]POSCODCTL=2
  CHAINE = "status=3"
 Endif
Endif
ASTATUS = func ASYRTRTATY.CONTROLPOS(TCY,"EDIBPRTYP",CAR,CRY)

Call CHECK_EQUAL("control pos"-CRY-CAR-"status="+num$(ASTATUS),"control pos"-CRY-CAR-CHAINE) From AXUNIT

CAR = "A6130"
CRY  = "FR"
ASTATUS = func ASYRTRTATY.CONTROLPOS(TCY,"EDIBPRTYP",CAR,CRY)

Call CHECK_EQUAL("control pos"-CRY-CAR-"status="+num$(ASTATUS),"control pos"-CRY-CAR-"status=4") From AXUNIT

CRY  = "FR"
Read [TCY]TCY0 = CRY
For CAR="Grasse","GRASSE","new-york"
 CHAINE = "status=0"
 OK = 0
 For [POS]POS1 Where CRY=[L]CRY & toupper([POS]POSCTY)=toupper([L]CAR)
  OK = 1 : Break
 Next POS
 If !OK & [F:TCY]POSCODCTL=2
  CHAINE = "status=3"
 Endif
 ASTATUS = func ASYRTRTATY.CONTROLCTY(TCY,"EDIBPRTYP",CAR,CRY)
 Call CHECK_EQUAL("control cty"-CRY-CAR-"status="+num$(ASTATUS),"control cty"-CRY-CAR-CHAINE) From AXUNIT
Next CAR

CAR = "000000006130"
CRY  = "FR"
ASTATUS = func ASYRTRTATY.CONTROLEEC(TCY,"EDIBPRTYP",CAR,CRY)

Call CHECK_EQUAL("control eec"-CRY-CAR-"status="+num$(ASTATUS),"control eec"-CRY-CAR-"status=3") From AXUNIT

For CAR="22","82","FL"
 If CAR="22" | CAR="82"
  CRY="FR"
 Else
  CRY="US"
 Endif
 CHAINE = "status=0"
 Read [TCY]TCY0 = CRY
 If [F:TCY]ETATCTL=2 & find([F:TCY]ETAT,2,3)
  OK = 0
  Local File TABSUBDIV [ATU] , ATEXTRA [AXX]
  For [ATU]ATU0 Where [F:ATU]CRY=[L]CRY & [F:ATU]TYP=[F:TCY]ETAT & toupper(COD)=toupper([L]CAR)
   OK = 1 : Break
  Next ATU
  If !OK
   For [AXX] Where CODFIC="TABSUBDIV" & ZONE="INTIT" & IDENT1=[L]CRY+"~"+num$([F:TCY]ETAT)
    If toupper([F:AXX]TEXTE)=toupper([L]CAR)
     OK = 1 : Break
    Endif
   Next AXX
  Endif
  If !OK
   CHAINE = "status=4"
  Endif
  LogicClose File [ATU] , [AXX]
 Endif
 ASTATUS = func ASYRTRTATY.CONTROLSAT(TCY,"SAT",CAR,CRY,SPECIAL)
 Call CHECK_EQUAL("control sat"-CRY-CAR-"status="+num$(ASTATUS),"control sat"-CRY-CAR-CHAINE) From AXUNIT
Next CAR

DEC = 1332.3
DEV  = "USD"
ASTATUS = func ASYRTRTATY.CONTROLMD2(TCY,"EDIBPRTYP",DEC,DEV)
Call CHECK_EQUAL("control md2"-DEV-num$(DEC)-"status="+num$(ASTATUS),"control md2"-DEV-num$(DEC)-"status=0") From AXUNIT

DEC = 15.50
DEV  = "FRF"
ASTATUS = func ASYRTRTATY.CONTROLMD2(TCY,"EDIBPRTYP",DEC,DEV)
Call CHECK_EQUAL("control md2"-DEV-num$(DEC)-"status="+num$(ASTATUS),"control md2"-DEV-num$(DEC)-"status=0") From AXUNIT

DEC = 23.6
DEV  = "EUR"
ASTATUS = func ASYRTRTATY.CONTROLMD3(TCY,"EDIBPRTYP",DEC,DEV)
Call CHECK_EQUAL("control md3"-DEV-num$(DEC)-"status="+num$(ASTATUS),"control md3"-DEV-num$(DEC)-"status=0") From AXUNIT

DEC = 12523.6539
DEV  = "EUR"
ASTATUS = func ASYRTRTATY.CONTROLMD3(TCY,"EDIBPRTYP",DEC,DEV)
Call CHECK_EQUAL("control md3"-DEV-num$(DEC)-"status="+num$(ASTATUS),"control md3"-DEV-num$(DEC)-"status=4") From AXUNIT

DEC = 12523.6539
DEV  = "EUR"
ASTATUS = func ASYRTRTATY.CONTROLMD4(TCY,"EDIBPRTYP",DEC,DEV)
Call CHECK_EQUAL("control md4"-DEV-num$(DEC)-"status="+num$(ASTATUS),"control md4"-DEV-num$(DEC)-"status=4") From AXUNIT

DEC = 12523.6539
ASTATUS = func ASYRTRTATY.CONTROLMD5(TCY,"EDIBPRTYP",DEC)
Call CHECK_EQUAL("control md5"-num$(DEC)-"status="+num$(ASTATUS),"control md5"-num$(DEC)-"status=0") From AXUNIT

FMT = "##[:]##[:]##[:]##[:]##"
CRY  = "~#"
Trbegin [TCY]
 Raz [F:TCY]
 [F:TCY]TELFMT = FMT
 [F:TCY]CRY = CRY
 Write [TCY]
Commit

CAR = "496300350"
ASTATUS = func ASYRTRTATY.CONTROLTEL(TCY,"EDIBPRTYP",CAR,CRY)
Call CHECK_EQUAL("control tel"-FMT-CAR-CRY-"status="+num$(ASTATUS),"control tel"-FMT-CAR-CRY-"status=0") From AXUNIT

CAR = "0496300350"
ASTATUS = func ASYRTRTATY.CONTROLTEL(TCY,"EDIBPRTYP",CAR,CRY)
Call CHECK_EQUAL("control tel"-FMT-CAR-CRY-"status="+num$(ASTATUS),"control tel"-FMT-CAR-CRY-"status=0") From AXUNIT

Trbegin [TCY]
 Delete [TCY] Where [F:TCY]CRY=[L]CRY
Commit

CAR = "123"
TYP  = "ATB"
Read [ATY]CODTYP=TYP
If left$([F:ATY]FORTYP,1)="A"
 CHAINE = "status=4"
Else
 CHAINE = "status=0"
Endif
ASTATUS = func ASYRTRTATY.CONTROLFORMAT(TCY,"EDIBPRTYP",CAR,TYP)
Call CHECK_EQUAL("control type donnée"-TYP-CAR-"status="+num$(ASTATUS),"control type donnée"-TYP-CAR-CHAINE) From AXUNIT

CAR = "ATABLE123"
TYP  = "ATB"
ASTATUS = func ASYRTRTATY.CONTROLFORMAT(TCY,"EDIBPRTYP",CAR,TYP)
Call CHECK_EQUAL("control type donnée"-TYP-CAR-"status="+num$(ASTATUS),"control type donnée"-TYP-CAR-"status=0") From AXUNIT

FreeInstance

End

#--------------------------------------------------------------#
Funprog FMTQTY(UNIT,FMT)
Value    Char UNIT
Variable Char FMT
Local Integer LNG , DEC
Local Integer ASTATUS
Local File ATYPE [ATY] , TABUNIT [TUN]
FMT = ""
Read [ATY]CODTYP="QTY"
LNG = [F:ATY]LNGTYP
If LNG=0 : LNG = 15 : Endif
Case UNIT
 When "#" : FMT = num$(LNG)+"#"
 When "0" : FMT = num$(int(LNG))+"F"
 When "1" : FMT = num$(LNG-1)+".#"
 When "2" : FMT = num$(LNG-2)+".2#"
 When "3" : FMT = num$(LNG-3)+".3#"
 When "4" : FMT = num$(LNG-4)+".4#"
 When "5" : FMT = num$(LNG-5)+".5#"
 When "6" : FMT = num$(LNG-6)+".6#"
 When Default
  If UNIT<>""
   Read [TUN]TUN0 = UNIT
   DEC = [F:TUN]UOMDEC
  Else
   DEC = 0
  Endif
  If DEC<0 : # théorique
   FMT = num$(int(LNG))+"F"
  Elsif DEC=0
   FMT = num$(LNG)+"#"
  Else
   FMT = num$(LNG-DEC)+"."+num$(DEC)+"#"
  Endif
Endcase
End

