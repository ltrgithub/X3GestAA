#<AdxTL>@(#)0.0.0.0 $Revision$
# Qualification ACONSTANT

Local Integer MY_STATUS
Local Instance MY_LOG Using C_ALOG
MY_LOG = NewInstance C_ALOG AllocGroup null
[L]MY_STATUS = fmet MY_LOG.ASETNAME("QLFAC_ACONSTANT_"+GACTX.USER)
[L]MY_STATUS = fmet MY_LOG.ABEGINLOG("QLFAC_ACONSTANT")

Local Clbfile RESULT
RESULT =  func TESTSUITE()
FreeGroup MY_LOG
End

#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!
Subprog SETUP
  # Database cleaning
  Local File ACONSTANT [ACST]
  Local File ADOCCLB [ADH]
  Local File ADOCUMENT [ADO]

  Onerrgo ERROR_SETUP_NOTFOUND
  Trbegin [ACST],[ADH],[ADO]
  Delete [ACST]ACST0 = "ZUTST"
  Delete [ADH]ADH0 = "ENG";"ACST";"ZUTST";10;20
  Delete [ADO]ADO0 = "ENG";"ACST";"ZUTST";10;20
  Commit
  Onerrgo
  Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT

  Global Shortint GDIMFIC             : # Dimension variable chemin d'acc√®s
  GDIMFIC = 250
  Global Char     GADOVERS(1)  
  
  Close Local File[ACST]
  Close Local File[ADH]
  Close Local File[ADO]
End

$ERROR_SETUP_NOTFOUND
Resume

#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

  # Start the test suite
  Call TESTSUITE_START("ACONSTANT", "Constants")                                        From AXUNIT

  Call ADD_TESTCASE("ACONSTANT_AINSERT","Creation of ACONSTANT record ZUTST",4)         From AXUNIT
  Call ADD_TESTCASE("ACONSTANT_AREAD","Read ACONSTANT record ZUTST",6)                  From AXUNIT
  Call ADD_TESTCASE("ACONSTANT_AUPDATE","Update ACONSTANT record ZUTST",7)              From AXUNIT
  Call ADD_TESTCASE("ACONSTANT_ADELETE","Delete ACONSTANT record ZUTST",2)              From AXUNIT

  # Run the test and return the result
  Local Clbfile RESULT_SUITE
  RESULT_SUITE=func AXUNIT.RUN_TESTSUITE("ACONSTANT","ACONSTANT test")

End RESULT_SUITE


Subprog ACONSTANT_AINSERT()
  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_ACONSTANT
  MYINSTANCE = NewInstance C_ACONSTANT AllocGroup null

  # Initialize Instance
  [L]ASTATUS = fmet MYINSTANCE.AINIT()
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT

  [L]ASTATUS = fmet MYINSTANCE.ASETATTRIBUTE("INTIT","$isMandatory","false")
  #Insert an invalid record.  In this case, Category cannot start with "A" if
  #Constant doesn't start with "A".
  MYINSTANCE.CODVAR = ""
  MYINSTANCE.INTIT = "test"
  MYINSTANCE.MODULE = 3
  MYINSTANCE.TYPVAR = 1
  MYINSTANCE.VALCHAR = "Test characters"
  MYINSTANCE.FLGSUP = 1
  MYINSTANCE.CATEG = "ACOL"


  [L]ASTATUS = fmet MYINSTANCE.AINSERT
  Call LOG_LINE("Check the AINSERT method - fail in this scenario") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AERROR) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup MYINSTANCE


  #Create and insert a valid record
  MYINSTANCE = NewInstance C_ACONSTANT AllocGroup null
  # Initialize Instance
  [L]ASTATUS = fmet MYINSTANCE.AINIT()
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT

  [L]ASTATUS = fmet MYINSTANCE.ASETATTRIBUTE("INTIT","$isMandatory","false")
  MYINSTANCE.CODVAR = "ZUTST"
  MYINSTANCE.INTIT ="Table"
  MYINSTANCE.MODULE = 3
  MYINSTANCE.TYPVAR = 1
  MYINSTANCE.VALCHAR = "Test characters"
  MYINSTANCE.FLGSUP = 1

  [L]ASTATUS = fmet MYINSTANCE.AINSERT
  Call LOG_LINE("Check the AINSERT method for valid record") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS
  #
  FreeGroup MYINSTANCE
End


Subprog ACONSTANT_AREAD

  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_ACONSTANT
  MYINSTANCE = NewInstance C_ACONSTANT AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AREAD("ZUTST")

  Call LOG_LINE("Check the AREAD method") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  Call LOG_LINE("Verify the values read") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.INTIT ,"Table") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.MODULE,3) From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.TYPVAR,1) From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.VALCHAR,"Test characters") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.FLGSUP,1) From AXUNIT

  FreeGroup MYINSTANCE
End


Subprog ACONSTANT_AUPDATE

  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_ACONSTANT
  MYINSTANCE = NewInstance C_ACONSTANT AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AREAD("ZUTST")

  Call LOG_LINE("Check the AREAD method from ACONSTANT_AUPDATE") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  MYINSTANCE.MODULE = 4
  MYINSTANCE.TYPVAR = 2
  MYINSTANCE.VALCHAR = ""
  MYINSTANCE.VALINT = 5
  [L]ASTATUS = fmet MYINSTANCE.AUPDATE()
  Call LOG_LINE("Check the AUPDATE method") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  #Re-read updated record to ensure fields were properly updated
  FreeGroup MYINSTANCE
  MYINSTANCE = NewInstance C_ACONSTANT AllocGroup null
  [L]ASTATUS = fmet MYINSTANCE.AREAD("ZUTST")
  Call LOG_LINE("Check the AREAD method from ACTIV_AUPDATE") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  Call LOG_LINE("Verify the updated values") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.MODULE,4) From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.TYPVAR,2) From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.VALCHAR,"") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.VALINT,5) From AXUNIT

  FreeGroup MYINSTANCE
End


Subprog ACONSTANT_ADELETE

  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_ACONSTANT
  MYINSTANCE = NewInstance C_ACONSTANT AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AREAD("ZUTST")

  Call LOG_LINE("Check the AREAD method from ACONSTANT_ADELETE") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  Call LOG_LINE("Check the ADELETE method") From AXUNIT
  [L]ASTATUS = fmet MYINSTANCE.ADELETE()
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup MYINSTANCE
End


#**
#* Write errors to log
#*!
$WRITE_ERRORS
Local Integer I
For I=1 To maxtab(MYINSTANCE.AERROR)
 If  MYINSTANCE.AERROR(I)<>null & MYINSTANCE.AERROR(I).STA=[V]CST_AERROR & MYINSTANCE.AERROR(I).DEL<>2
   Call LOG_LINE(MYINSTANCE.AERROR(I).PRO-":"-MYINSTANCE.AERROR(I).MES) From AXUNIT
 Endif
Next I
Return
