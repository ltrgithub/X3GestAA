Call OUVRE_TRACE("QLFAC_ACTIV") From LECFIC
Local Clbfile RESULT

RESULT =  func TESTSUITE()
Call FERME_TRACE From LECFIC
GTRACE = "QLFAC_ACTIV_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

#Test from ZRONRUNTEST
#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!
Subprog SETUP

  # Database cleaning
  Local File ACTIV [ACV]
  Local File ADOSACT [ADA]

  Onerrgo ERROR_SETUP_NOTFOUND
  Trbegin [ACV],[ADA]
  Delete [ACV]CODACT = "ZUTST"
  Delete [ADA]ADA0 = nomap;"ZUTST"
  Commit
  Onerrgo
  Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT

  Close Local File [ACV]
  Close Local File [ADA]
End

$ERROR_SETUP_NOTFOUND
Resume


#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

  # Start the test suite
  Call TESTSUITE_START("ACTIV", "Activity codes")                               From AXUNIT

  Call ADD_TESTCASE("ACTIV_AINSERT","Creation of ACTIV record ZUTST",2)         From AXUNIT
  #Call ADD_TESTCASE("ACTIV_AREAD","Read ACTIV record ZUTST",11)                 From AXUNIT
  #Call ADD_TESTCASE("ACTIV_AUPDATE","Update ACTIV record ZUTST",5)              From AXUNIT
  #Call ADD_TESTCASE("ACTIV_ADELETE","Delete ACTIV record ZUTST",2)              From AXUNIT

  # Run the test and return the result
  Local Clbfile RESULT_SUITE
  RESULT_SUITE=func AXUNIT.RUN_TESTSUITE("ACTIV","ACTIV test")

End RESULT_SUITE


Subprog ACTIV_AINSERT()
  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_ACTIV

  MYINSTANCE = NewInstance C_ACTIV AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AINIT()
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT

  #Try to create and insert an invalid record.  In this case, Maximum dimension field (DIMMAX) is less than
  #Minimum dimension field (DIMFIL)
  MYINSTANCE.CODACT = "ZUTST"
  MYINSTANCE.LIBACT = 1
  MYINSTANCE.INTIT = "ZUTST Description"
  MYINSTANCE.FLACT = 2
  MYINSTANCE.FLGSUP = 1
  MYINSTANCE.MODULE = 3
  MYINSTANCE.TYP = 2
  MYINSTANCE.DIMFIL = 60
  MYINSTANCE.DIMMAX = 45
  MYINSTANCE.DIME = 55
  MYINSTANCE.DEP = 1

  [L]ASTATUS = fmet MYINSTANCE.AINSERT
  Call LOG_LINE("Check the AINSERT method - should fail in this scenario") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AERROR) From AXUNIT
  Gosub WRITE_ERRORS
  #TODO 
  End

  #Create and insert a valid record
  FreeGroup MYINSTANCE
  MYINSTANCE = NewInstance C_ACTIV AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AINIT()
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT

  MYINSTANCE.CODACT = "ZUTST"
  MYINSTANCE.LIBACT = 1
  MYINSTANCE.INTIT = "ZUTST Description"
  MYINSTANCE.FLACT = 2
  MYINSTANCE.FLGSUP = 1
  MYINSTANCE.MODULE = 3
  MYINSTANCE.TYP = 2
  MYINSTANCE.DIMFIL = 45
  MYINSTANCE.DIMMAX = 60
  MYINSTANCE.DIME = 55
  MYINSTANCE.DEP = 1

  [L]ASTATUS = fmet MYINSTANCE.AINSERT
  Call LOG_LINE("Check the AINSERT method for valid record") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS
  #
  FreeGroup MYINSTANCE
End


Subprog ACTIV_AREAD

  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_ACTIV
  MYINSTANCE = NewInstance C_ACTIV AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AREAD("ZUTST")

  Call LOG_LINE("Check the AREAD method") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  Call LOG_LINE("Verify the values read") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.LIBACT,0) From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.INTIT,"ZUTST Description") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.FLACT,2) From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.FLGSUP,1) From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.MODULE,3) From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.TYP,2) From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.DIMFIL,45) From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.DIMMAX,60) From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.DIME,55) From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.DEP,1) From AXUNIT

  FreeGroup MYINSTANCE
End


Subprog ACTIV_AUPDATE

  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_ACTIV
  MYINSTANCE = NewInstance C_ACTIV AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AREAD("ZUTST")

  Call LOG_LINE("Check the AREAD method from ACTIV_AUPDATE") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  MYINSTANCE.DIMMAX = 70
  MYINSTANCE.DIME = 60
  [L]ASTATUS = fmet MYINSTANCE.AUPDATE()
  Call LOG_LINE("Check the AUPDATE method") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  #Re-read updated record to ensure fields were properly updated
  FreeGroup MYINSTANCE
  MYINSTANCE = NewInstance C_ACTIV AllocGroup null
  [L]ASTATUS = fmet MYINSTANCE.AREAD("ZUTST")
  Call LOG_LINE("Check the AREAD method from ACTIV_AUPDATE") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  Call LOG_LINE("Verify the updated values") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.DIMMAX,70) From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.DIME,60) From AXUNIT

  FreeGroup MYINSTANCE
End


Subprog ACTIV_ADELETE
  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_ACTIV
  MYINSTANCE = NewInstance C_ACTIV AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AREAD("ZUTST")

  Call LOG_LINE("Check the AREAD method from ACTIV_ADELETE") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  Call LOG_LINE("Check the ADELETE method") From AXUNIT
  [L]ASTATUS = fmet MYINSTANCE.ADELETE()
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup MYINSTANCE
End


#**
#* Write errors to log
#*!
$WRITE_ERRORS
Local Integer I
For I=1 To maxtab(MYINSTANCE.AERROR)
 If  MYINSTANCE.AERROR(I)<>null & MYINSTANCE.AERROR(I).STA=[V]CST_AERROR & MYINSTANCE.AERROR(I).DEL<>2
   Call LOG_LINE(MYINSTANCE.AERROR(I).PRO-":"-MYINSTANCE.AERROR(I).MES) From AXUNIT
 Endif
Next I
Return

