Local Integer MY_STATUS
Local Instance MY_LOG Using C_ALOG
MY_LOG = NewInstance C_ALOG AllocGroup null
[L]MY_STATUS = fmet MY_LOG.ASETNAME("QLFAC_AMENLOC_"+GACTX.USER)
[L]MY_STATUS = fmet MY_LOG.ABEGINLOG("QLFAC_AMENLOC")

Local Clbfile RESULT
RESULT =  func TESTSUITE()
FreeGroup MY_LOG
GTRACE="QLFAC_AMENLOC_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!
Subprog SETUP
# Database cleaning
Local File AMENLOC [AML]
Local File APLSTD [AST]
Onerrgo ERROR_SETUP_NOTFOUND
Trbegin [AML]
Delete [AML]MENLOC = 29998
Delete [AST] Where LANCHP=29998
Delete [AST] Where LANCHP=0 and LANNUM=29998
Commit
Onerrgo
Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT
End

$ERROR_SETUP_NOTFOUND
Resume

#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

Call TESTSUITE_START("AMENLOC", "Test suite for Class AMENLOC") From AXUNIT

Call ADD_TESTCASE("AMENLOC_CREATION","Creation of AMENLOC 29998",4) From AXUNIT
Call ADD_TESTCASE("AMENLOC_READ","Read AMENLOC 29998",1) From AXUNIT
Call ADD_TESTCASE("AMENLOC_UPDATE","Update AMENLOC 29998",2) From AXUNIT
Call ADD_TESTCASE("AMENLOC_DELETE","Deletion of AMENLOC 29998",0) From AXUNIT

Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("AMENLOC", "SYRA_AMENLOC")

End SUITE_RESULT

#**
#* Creation of a unit
#* Properties of Class AMENLOC
#*
#*!
Subprog AMENLOC_CREATION()
Local Integer I,MY_STATUS
Local Instance QLFAC Using C_AMENLOC
QLFAC = NewInstance C_AMENLOC AllocGroup null

# Initialize Instance
[L]MY_STATUS = fmet QLFAC.AINIT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

# Load invalid instance-already exists
QLFAC.MENLOC = 1
QLFAC.TITCHP = "Description 29998"

# Expect error -
[L]MY_STATUS = fmet QLFAC.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup QLFAC


QLFAC = NewInstance C_AMENLOC AllocGroup null


# Initialize Instance
[L]MY_STATUS = fmet QLFAC.AINIT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

# Load mandatory values
QLFAC.MENLOC = 29998
QLFAC.TITCHP = "Description 29998"
QLFAC.LONG=5
QLFAC.MINI=1
QLFAC.MAXI=12
QLFAC.MENLOCAL = [V]CST_AYES

I=fmet QLFAC.ADDLINE("AST",[V]CST_ALASTPOS)
QLFAC.AST(I).CODE="A"
QLFAC.AST(I).LANMES="Line 1"

I=fmet QLFAC.ADDLINE("AST",[V]CST_ALASTPOS)
QLFAC.AST(I).CODE="B"
QLFAC.AST(I).LANMES="Line 2"

# Expect OK
[L]MY_STATUS = fmet QLFAC.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup QLFAC

End


#**
#* Read a AMENLOC
#*!
Subprog AMENLOC_READ()
Local Integer MY_STATUS
Local Instance QLFAC Using C_AMENLOC
QLFAC = NewInstance C_AMENLOC AllocGroup null

[L]MY_STATUS = fmet QLFAC.AREAD(29998)
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS

FreeGroup QLFAC
End

#**
#* Update a AMENLOC
#*!
Subprog AMENLOC_UPDATE()
Local Integer MY_STATUS
Local Instance QLFAC Using C_AMENLOC
QLFAC = NewInstance C_AMENLOC AllocGroup null

[L]MY_STATUS = fmet QLFAC.AREAD(29998)
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS
If [L]MY_STATUS = [V]CST_AOK
  QLFAC.TITCHP = "Updated DES"
  #TODO QLFAC.AST(1).LANMES = "Line msg updated"

  [L]MY_STATUS = fmet QLFAC.AUPDATE()
  Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS
Endif
FreeGroup QLFAC
End

#**
#* Delete a AMENLOC
#*!
Subprog AMENLOC_DELETE()
Local Integer MY_STATUS
End
Local Instance QLFAC Using C_AMENLOC
QLFAC = NewInstance C_AMENLOC AllocGroup null

[L]MY_STATUS = fmet QLFAC.AREAD(29998)
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS
If [L]MY_STATUS = [V]CST_AOK
  [L]MY_STATUS = fmet QLFAC.ADELETE()
  Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS
Endif

FreeGroup QLFAC
End


#**
#* Write errors to log
#*!
$WRITE_ERRORS
Local Integer I
For I=1 To maxtab(QLFAC.AERROR)
 If  QLFAC.AERROR(I)<>null & QLFAC.AERROR(I).STA=[V]CST_AERROR & QLFAC.AERROR(I).DEL<>2
   Call LOG_LINE(QLFAC.AERROR(I).PRO-":"-QLFAC.AERROR(I).MES) From AXUNIT
 Endif
Next I
Return

