Local Integer ASTATUS
Local Instance MY_LOG Using C_ALOG
MY_LOG = NewInstance C_ALOG AllocGroup null
[L]ASTATUS = fmet MY_LOG.ASETNAME("QLFAC_GACCOUNT_"+GACTX.USER)
[L]ASTATUS = fmet MY_LOG.ABEGINLOG("QLFAC_GACCOUNT")

Local Clbfile RESULT
RESULT =  func TESTSUITE()
FreeGroup MY_LOG
#GTRACE = "QLFAC_GACCOUNT_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!
Subprog SETUP
  # Database cleaning
  Local File GACCOUNT [GAC]

  Onerrgo ERROR_SETUP_NOTFOUND
  Trbegin [GAC]
    Delete [GAC]GAC0 = "ZUT1000000" # Typ=1
    Delete [GAC]GAC0 = "ZUT200"     # Typ=1, not created
    Delete [GAC]GAC0 = "ZUT300"     # Typ=2
    Delete [GAC]GAC0 = "ZUT4000000" # Typ=1
  Commit
  Onerrgo

  Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT
End

$ERROR_SETUP_NOTFOUND
Resume


#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

  # Start the test suite
  Call TESTSUITE_START("GACCOUNT", "G/L Accounts testing") From AXUNIT

  # Assumptions: OPTLNGCPT = Yes, LNGCPT = 10 #6

  Call ADD_TESTCASE( "TODO"                    , "IN PROGRESS", 1 ) From AXUNIT
  #TODO Call ADD_TESTCASE( "GACCOUNT_AINSERT_VALID"                    , "Creation of valid GACCOUNT record ZUT1000000 using value 'ZUT1'", 17 ) From AXUNIT
  #TODO Call ADD_TESTCASE( "GACCOUNT_AINSERT_VALID_2"                  , "Creation of valid GACCOUNT record ZUT300, TYP=2", 15 ) From AXUNIT
  #TODO Call ADD_TESTCASE( "GACCOUNT_AINSERT_VALID_3"                  , "Creation of valid GACCOUNT record ZUT400       ", 15 ) From AXUNIT
  #TODO Call ADD_TESTCASE( "GACCOUNT_AINSERT_INVALID_DUPLICATE_ACCSHO" , "Creation of GACCOUNT record ZUT200 with duplicate ACCSHO"   , 5  ) From AXUNIT
  #TODO Call ADD_TESTCASE( "GACCOUNT_AREAD"                            , "Read GACCOUNT record ZUT1000000"                            , 13 ) From AXUNIT
  #TODO Call ADD_TESTCASE( "GACCOUNT_AUPDATE"                          , "Update GACCOUNT record ZUT1000000"                          , 15 ) From AXUNIT
  #TODO Call ADD_TESTCASE( "GACCOUNT_AUPDATE_2"                        , "Update GACCOUNT record ZUT300"                              , 15 )  From AXUNIT
  #TODO Call ADD_TESTCASE( "GACCOUNT_AUPDATE_3"                        , "Update GACCOUNT record ZUT1000000 with Bad dimension"       , 17)  From AXUNIT
  #TODO Call ADD_TESTCASE( "GACCOUNT_SET_TYP_2"                        , "Update of disabled property on GACCOUNT record ZUT400"      , 29 ) From AXUNIT
  #TODO Call ADD_TESTCASE( "GACCOUNT_ADELETE"                          , "Delete GACCOUNT record ZUT1000000"                          , 12 ) From AXUNIT

  #TODO Call ADD_TESTCASE( "GACCOUNT_AINSERT_INVALID_SHORT_ACCSHO"     , "Creation of GACCOUNT record ZUT200 with short ACCSHO"       , 3 ) From AXUNIT
  #TODO Call ADD_TESTCASE( "GACCOUNT_AINSERT_INVALID_FCY"              , "Creation of GACCOUNT record ZUT200 with invalid FCY"        , 4 ) From AXUNIT    #Enable When COMPANY/SITE CLASS IS READY
  #TODO Call ADD_TESTCASE( "GACCOUNT_AINSERT_INVALID_ACS"             , "Creation of GACCOUNT record ZUT200 with invalid ACS"        , 7 ) From AXUNIT     #CHANGE To ACTX.USER not PERMITTED
  #TODO Call ADD_TESTCASE( "GACCOUNT_AINSERT_INVALID_VLYSTR"           , "Creation of GACCOUNT record ZUT200 with invalid VLYSTR"     , 7 ) From AXUNIT
  #TODO Call ADD_TESTCASE( "GACCOUNT_AINSERT_INVALID_VLYEND"           , "Creation of GACCOUNT record ZUT200 with invalid VLYEND"     , 7 ) From AXUNIT

  # Run the test and return the result
  Local Clbfile RESULT_SUITE
  RESULT_SUITE=func AXUNIT.RUN_TESTSUITE("GACCOUNT","GACCOUNT test")

End RESULT_SUITE


#**
#* Write errors to log
#*!
$WRITE_ERRORS
  Local Integer I
  For I=1 To maxtab(ACCOUNT.AERROR)
    If  ACCOUNT.AERROR(I)<>null & ACCOUNT.AERROR(I).DEL<>2
      Call CHECK_EQUAL(ACCOUNT.AERROR(I).PRO-":"-ACCOUNT.AERROR(I).MES,ACCOUNT.AERROR(I).PRO-":"-ACCOUNT.AERROR(I).MES) From AXUNIT
    Endif
  Next I
Return


####################################################################################################

Subprog TODO()
  Call CHECK_NOTEQUAL("IN PROGRESS","") From AXUNIT
End

Subprog GACCOUNT_AINSERT_VALID()
  Local Integer ASTATUS
  Local Instance ACCOUNT Using C_GACCOUNT
  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null

  [L]ASTATUS = fmet ACCOUNT.AINIT()
  Call CHECK_EQUAL("AINIT"-num$([L]ASTATUS), "AINIT"-num$([V]CST_AOK)) From AXUNIT

  ACCOUNT.ACC    = "ZUT100"
  Call CHECK_EQUAL(ACCOUNT.ACC,"ZUT100") From AXUNIT
  ACCOUNT.DES    = "Insert Valid Account Test"
  ACCOUNT.DESSHO = "Ins Test"
  ACCOUNT.ACS    = "USA"
  ACCOUNT.ACCSHO = "ZT"
  ACCOUNT.TYP    = 1
  ACCOUNT.FCY    = "451"
  ACCOUNT.CNA    = "X0001"
  ACCOUNT.CUR    = "ANG"
  ACCOUNT.CLS    = 7
  ACCOUNT.VLYSTR = [27/10/2012]
  ACCOUNT.VLYEND = [21/01/2024]

  [L]ASTATUS = fmet ACCOUNT.AINSERT()
  Call CHECK_EQUAL("Insert new record ZUT100"-num$([L]ASTATUS),"Insert new record ZUT100"-num$([V]CST_AOK)) From AXUNIT
  Call CHECK_EQUAL(ACCOUNT.ACC,"ZUT1000000") From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup ACCOUNT
  ACCOUNT = null
  Call VERIFY_RECORD("ZUT1000000")
End

# Type=2 accumulation record
Subprog GACCOUNT_AINSERT_VALID_2()
  Local Integer ASTATUS
  Local Instance ACCOUNT Using C_GACCOUNT
  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null

  [L]ASTATUS = fmet ACCOUNT.AINIT()
  Call CHECK_EQUAL("AINIT"-num$([L]ASTATUS), "AINIT"-num$([V]CST_AOK)) From AXUNIT

  ACCOUNT.ACC    = "ZUT300"
  ACCOUNT.DES    = "Insert Valid Account Test"
  ACCOUNT.DESSHO = "Ins Test"
  ACCOUNT.ACS    = AVOID.ACHAR
  ACCOUNT.ACCSHO = AVOID.ACHAR
  ACCOUNT.TYP    = 2
  ACCOUNT.FCY    = AVOID.ACHAR
  ACCOUNT.CNA    = "X0001"
  ACCOUNT.CUR    = AVOID.ACHAR
  ACCOUNT.CLS    = 7
  ACCOUNT.VLYSTR = AVOID.ADATE
  ACCOUNT.VLYEND = AVOID.ADATE

  [L]ASTATUS = fmet ACCOUNT.AINSERT()
  Call CHECK_EQUAL("Insert new record"-num$([L]ASTATUS),"Insert new record"-num$([V]CST_AOK)) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup ACCOUNT
  ACCOUNT = null

  Call VERIFY_RECORD("ZUT300")  # test so see appending takes place

End

Subprog GACCOUNT_AINSERT_VALID_3()
  Local Integer ASTATUS
  Local Instance ACCOUNT Using C_GACCOUNT
  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null

  [L]ASTATUS = fmet ACCOUNT.AINIT()
  Call CHECK_EQUAL("AINIT"-num$([L]ASTATUS), "AINIT"-num$([V]CST_AOK)) From AXUNIT

  ACCOUNT.ACC    = "ZUT400"
  ACCOUNT.DES    = "Insert Valid Account Test 4"
  ACCOUNT.DESSHO = "Ins Test4"
  ACCOUNT.ACS    = "USA"
  ACCOUNT.ACCSHO = "Z4"
  ACCOUNT.TYP    = 1
  ACCOUNT.FCY    = "451"
  ACCOUNT.CNA    = "X0001"
  ACCOUNT.CUR    = "ANG"
  ACCOUNT.CLS    = 7
  ACCOUNT.VLYSTR = [27/10/2012]
  ACCOUNT.VLYEND = [21/01/2024]

  [L]ASTATUS = fmet ACCOUNT.AINSERT()
  Call CHECK_EQUAL("Insert new record ZUT400"-num$([L]ASTATUS),"Insert new record ZUT400"-num$([V]CST_AOK)) From AXUNIT
  Gosub WRITE_ERRORS

  Call VERIFY_RECORD("ZUT4000000")

End

Subprog GACCOUNT_AINSERT_INVALID_DUPLICATE_ACCSHO()
  Local Integer ASTATUS
  Local Instance ACCOUNT Using C_GACCOUNT
  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null

  [L]ASTATUS = fmet ACCOUNT.AINIT()
  Call CHECK_EQUAL("AINIT"-num$([L]ASTATUS), "AINIT"-num$([V]CST_AOK)) From AXUNIT

  ACCOUNT.ACC    = "ZUT2"
  ACCOUNT.DES    = "Insert Valid Account Test 2"
  ACCOUNT.DESSHO = "Ins Test2"
  ACCOUNT.ACS    = "USA"
  ACCOUNT.ACCSHO = "ZT"
  ACCOUNT.TYP    = 1
  ACCOUNT.FCY    = "AHB"
  ACCOUNT.CNA    = "X0001"
  ACCOUNT.CUR    = "ANG"
  ACCOUNT.CLS    = 7
  ACCOUNT.VLYSTR = [27/10/2012]
  ACCOUNT.VLYEND = [21/01/2024]

  [L]ASTATUS = fmet ACCOUNT.AINSERT()
  Call CHECK_EQUAL("AINSERT method called"-num$([L]ASTATUS),"AINSERT method called"-num$([V]CST_AERROR)) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup ACCOUNT
  ACCOUNT = null
End

Subprog GACCOUNT_AINSERT_INVALID_SHORT_ACCSHO()
  Local Integer ASTATUS
  Local Instance ACCOUNT Using C_GACCOUNT
  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null

  [L]ASTATUS = fmet ACCOUNT.AINIT()
  Call CHECK_EQUAL("AINIT"-num$([L]ASTATUS), "AINIT"-num$([V]CST_AOK)) From AXUNIT

  ACCOUNT.ACC    = "ZUT2"
  ACCOUNT.DES    = "Insert Valid Account Test 2"
  ACCOUNT.DESSHO = "Ins Test2"
  ACCOUNT.ACS    = "USA"
  ACCOUNT.ACCSHO = "Z"
  ACCOUNT.TYP    = 1
  ACCOUNT.FCY    = "451"
  ACCOUNT.CNA    = "X0001"
  ACCOUNT.CUR    = "ANG"
  ACCOUNT.CLS    = 7
  ACCOUNT.VLYSTR = [27/10/2012]
  ACCOUNT.VLYEND = [21/01/2024]

  [L]ASTATUS = fmet ACCOUNT.AINSERT()
  Call CHECK_EQUAL("AINSERT method called"-num$([L]ASTATUS),"AINSERT method called"-num$([V]CST_AERROR)) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup ACCOUNT
  ACCOUNT = null
End

Subprog GACCOUNT_AINSERT_INVALID_FCY()
  Local Integer ASTATUS
  Local Instance ACCOUNT Using C_GACCOUNT
  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null

  [L]ASTATUS = fmet ACCOUNT.AINIT()
  Call CHECK_EQUAL("AINIT"-num$([L]ASTATUS), "AINIT"-num$([V]CST_AOK)) From AXUNIT

  ACCOUNT.ACC    = "ZUT2"
  ACCOUNT.DES    = "Insert Valid Account Test 2"
  ACCOUNT.DESSHO = "Ins Test2"
  ACCOUNT.ACS    = "USA"
  ACCOUNT.ACCSHO = "ZT"
  ACCOUNT.TYP    = 1
  ACCOUNT.FCY    = "YAM"
  ACCOUNT.CNA    = "X0001"
  ACCOUNT.CUR    = "ANG"
  ACCOUNT.CLS    = 7
  ACCOUNT.VLYSTR = [27/10/2012]
  ACCOUNT.VLYEND = [21/01/2024]

  [L]ASTATUS = fmet ACCOUNT.AINSERT()
  Call CHECK_EQUAL("AINSERT method called"-num$([L]ASTATUS),"AINSERT method called"-num$([V]CST_AERROR)) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup ACCOUNT
  ACCOUNT = null
End

Subprog GACCOUNT_AINSERT_INVALID_VLYSTR()
  Local Integer ASTATUS
  Local Instance ACCOUNT Using C_GACCOUNT
  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null

  [L]ASTATUS = fmet ACCOUNT.AINIT()
  Call CHECK_EQUAL("AINIT"-num$([L]ASTATUS), "AINIT"-num$([V]CST_AOK)) From AXUNIT

  ACCOUNT.ACC    = "ZUT2"
  ACCOUNT.DES    = "Insert Valid Account Test 2"
  ACCOUNT.DESSHO = "Ins Test2"
  ACCOUNT.ACS    = "USA"
  ACCOUNT.ACCSHO = "Z2"
  ACCOUNT.TYP    = 1
  ACCOUNT.FCY    = "AHB"
  ACCOUNT.CNA    = "X0001"
  ACCOUNT.CUR    = "ANG"
  ACCOUNT.CLS    = 7
  ACCOUNT.VLYSTR = [27/10/2026]
  ACCOUNT.VLYEND = [21/01/2024]

  [L]ASTATUS = fmet ACCOUNT.AINSERT()
  Call CHECK_EQUAL("AINSERT method called"-num$([L]ASTATUS),"AINSERT method called"-num$([V]CST_AERROR)) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup ACCOUNT
  ACCOUNT = null
End

Subprog GACCOUNT_AINSERT_INVALID_VLYEND()
  Local Integer ASTATUS
  Local Instance ACCOUNT Using C_GACCOUNT
  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null

  [L]ASTATUS = fmet ACCOUNT.AINIT()
  Call CHECK_EQUAL("AINIT"-num$([L]ASTATUS), "AINIT"-num$([V]CST_AOK)) From AXUNIT

  ACCOUNT.ACC    = "ZUT2"
  ACCOUNT.DES    = "Insert Valid Account Test 2"
  ACCOUNT.DESSHO = "Ins Test2"
  ACCOUNT.ACS    = "USA"
  ACCOUNT.ACCSHO = "Z2"
  ACCOUNT.TYP    = 1
  ACCOUNT.FCY    = "YAM"
  ACCOUNT.CNA    = "X0001"
  ACCOUNT.CUR    = "ANG"
  ACCOUNT.CLS    = 7
  ACCOUNT.VLYSTR = [27/10/2012]
  ACCOUNT.VLYEND = [21/01/2010]

  [L]ASTATUS = fmet ACCOUNT.AINSERT()
  Call CHECK_EQUAL("AINSERT method called"-num$([L]ASTATUS),"AINSERT method called"-num$([V]CST_AERROR)) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup ACCOUNT
  ACCOUNT = null
End

# Test Invalid access code
Subprog GACCOUNT_AINSERT_INVALID_ACS()
  Local Integer ASTATUS
  Local Instance ACCOUNT Using C_GACCOUNT
  Local Char WUSR(8)
  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null

  [L]ASTATUS = fmet ACCOUNT.AINIT()
  Call CHECK_EQUAL("AINIT"-num$([L]ASTATUS), "AINIT"-num$([V]CST_AOK)) From AXUNIT

  WUSR = ACCOUNT.ACTX.USER
  Onerrgo INVALID_ACS
  ACCOUNT.ACTX.USER = 'ADMIN'
  Onerrgo

  FreeGroup ACCOUNT
  ACCOUNT = null

# User does not have access

ACCOUNT = NewInstance C_GACCOUNT AllocGroup null

WALLACS= GACTX.ALLACS=[V]CST_AYES
Onerrgo INVALID_ALLACS
GACTX.ALLACS=[V]CST_ANO
Onerrgo

  FreeGroup ACCOUNT
  ACCOUNT = null

# Account number too long for accumulation type account
  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null

  [L]ASTATUS = fmet ACCOUNT.AINIT()
  Call CHECK_EQUAL("AINIT"-num$([L]ASTATUS), "AINIT"-num$([V]CST_AOK)) From AXUNIT

  ACCOUNT.ACC    = "ZUT4567890"
  ACCOUNT.DES    = "Insert Long Account Test"
  ACCOUNT.DESSHO = "Ins Test"
  ACCOUNT.ACS    = AVOID.ACHAR
  ACCOUNT.ACCSHO = AVOID.ACHAR
  ACCOUNT.TYP    = 2
  ACCOUNT.FCY    = AVOID.ACHAR
  ACCOUNT.CNA    = "X0001"
  ACCOUNT.CUR    = AVOID.ACHAR
  ACCOUNT.CLS    = 1
  ACCOUNT.VLYSTR = AVOID.ADATE
  ACCOUNT.VLYEND = AVOID.ADATE

  [L]ASTATUS = fmet ACCOUNT.AINSERT()
  Call CHECK_EQUAL("AINSERT method called for accumulation account too long"-num$([L]ASTATUS),"AINSERT method called for accumulation account too long"-num$([V]CST_AERROR)) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup ACCOUNT
  ACCOUNT = null

End

Subprog GACCOUNT_AREAD()
  Call VERIFY_RECORD("ZUT1000000")
End

Subprog VERIFY_RECORD(ACCNUM)
  Value Char ACCNUM

  # Read record and validate it's contents against a direct read of the table.
  Local Integer ASTATUS
  Local Instance ACCOUNT Using C_GACCOUNT
  Local File GACCOUNT [GAC]

  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null

  Read [F:GAC]GAC0=ACCNUM

  [L]ASTATUS = fmet ACCOUNT.AREAD(ACCNUM)
  Call CHECK_EQUAL("VERIFY_RECORD : Read and verify record "+ACCNUM-num$([L]ASTATUS),"VERIFY_RECORD : Read and verify record "+ACCNUM-num$([V]CST_AOK)) From AXUNIT
  Gosub WRITE_ERRORS

  Call CHECK_EQUAL( ACCOUNT.ACC    , [F:GAC]ACC    ) From AXUNIT
  Call CHECK_EQUAL( ACCOUNT.DES    , [F:GAC]DES    ) From AXUNIT
  Call CHECK_EQUAL( ACCOUNT.DESSHO , [F:GAC]DESSHO ) From AXUNIT
  Call CHECK_EQUAL( ACCOUNT.ACS    , [F:GAC]ACS    ) From AXUNIT
  Call CHECK_EQUAL( ACCOUNT.ACCSHO , [F:GAC]ACCSHO ) From AXUNIT
  Call CHECK_EQUAL( ACCOUNT.TYP    , [F:GAC]TYP    ) From AXUNIT
  Call CHECK_EQUAL( ACCOUNT.FCY    , [F:GAC]FCY    ) From AXUNIT
  Call CHECK_EQUAL( ACCOUNT.CNA    , [F:GAC]CNA    ) From AXUNIT
  Call CHECK_EQUAL( ACCOUNT.CUR    , [F:GAC]CUR    ) From AXUNIT
  Call CHECK_EQUAL( ACCOUNT.CLS    , [F:GAC]CLS    ) From AXUNIT
  Call CHECK_EQUAL( ACCOUNT.VLYSTR , [F:GAC]VLYSTR ) From AXUNIT
  Call CHECK_EQUAL( ACCOUNT.VLYEND , [F:GAC]VLYEND ) From AXUNIT

  LogicClose File [GAC]

  FreeGroup ACCOUNT
  ACCOUNT = null
End

Subprog GACCOUNT_AUPDATE
  # Test updating a record.
  Local Integer ASTATUS
  Local Instance ACCOUNT Using C_GACCOUNT

  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null

  [L]ASTATUS = fmet ACCOUNT.AREAD("ZUT1000000")
  Call LOG_LINE("Read record ZUT1000000") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  ACCOUNT.DES    = "Updated DES Value"
  ACCOUNT.DESSHO = "Upd SHO"

  [L]ASTATUS = fmet ACCOUNT.AUPDATE()
  Call LOG_LINE("Update DES and DESSHO") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup ACCOUNT
  ACCOUNT = null

  #Re-read updated record to ensure fields were properly updated
  Call VERIFY_RECORD("ZUT1000000")
End

Subprog GACCOUNT_AUPDATE_2
  Local Integer ASTATUS
  Local Instance ACCOUNT Using C_GACCOUNT
  # CNA validation
  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null
  # this.TYP=2
  [L]ASTATUS = fmet ACCOUNT.AREAD("ZUT300")
  Call LOG_LINE("Read record ZUT300") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

   ACCOUNT.CNA = "BADDIMENS"

  [L]ASTATUS = fmet ACCOUNT.AUPDATE()
  Call LOG_LINE("Update with Bad dimension") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup ACCOUNT
  ACCOUNT = null

   Call VERIFY_RECORD("ZUT300")

End


Subprog GACCOUNT_AUPDATE_3
  Local Integer ASTATUS
  Local Instance ACCOUNT Using C_GACCOUNT
  # CNA validation
  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null
  [L]ASTATUS = fmet ACCOUNT.AREAD("ZUT1000000")
  Call LOG_LINE("Read record ZUT1000000") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

   ACCOUNT.CNA = "BADDIMENS"

  [L]ASTATUS = fmet ACCOUNT.AUPDATE()
  Call LOG_LINE("Update with Bad dimension") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AERROR) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup ACCOUNT
  ACCOUNT = null

   Call VERIFY_RECORD("ZUT1000000")

End
####################################################################################################

Subprog GACCOUNT_ADELETE
  Local Integer ASTATUS
  Local Instance ACCOUNT Using C_GACCOUNT

  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null

  [L]ASTATUS = fmet ACCOUNT.AREAD("ZUT1000000")
  Call LOG_LINE("Read record ZUT1000000") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  [L]ASTATUS = fmet ACCOUNT.ADELETE()
  Call LOG_LINE("Delete record ZUT1000000") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup ACCOUNT
  ACCOUNT = null
  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null

  [L]ASTATUS = fmet ACCOUNT.AREAD("ZUT1000000")
  Call LOG_LINE("Read record ZUT1000000") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AERROR) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup ACCOUNT
  ACCOUNT = null

  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null

  [L]ASTATUS = fmet ACCOUNT.AREAD("ZUT300")
  Call LOG_LINE("Read record ZUT300") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  [L]ASTATUS = fmet ACCOUNT.ADELETE()
  Call LOG_LINE("Delete record ZUT300") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup ACCOUNT
  ACCOUNT = null
  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null
  [L]ASTATUS = fmet ACCOUNT.AREAD("ZUT300")
  Call LOG_LINE("Read record ZUT300") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AERROR) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup ACCOUNT
  ACCOUNT = null

  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null

  [L]ASTATUS = fmet ACCOUNT.AREAD("ZUT4000000")
  Call LOG_LINE("Read record ZUT4000000") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  [L]ASTATUS = fmet ACCOUNT.ADELETE()
  Call LOG_LINE("Delete record ZUT4000000") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup ACCOUNT
  ACCOUNT = null
  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null
  [L]ASTATUS = fmet ACCOUNT.AREAD("ZUT4000000")
  Call LOG_LINE("Read record ZUT4000000") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AERROR) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup ACCOUNT
  ACCOUNT = null

End

####################################################################################################

Subprog GACCOUNT_SET_TYP_2

  # create new record
  Local Integer ASTATUS
  Local Instance ACCOUNT Using C_GACCOUNT

  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null

 # read record
  [L]ASTATUS = fmet ACCOUNT.AREAD("ZUT4000000")
  Call LOG_LINE("Read ZUT4000000") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  # change TYP to 2
  ACCOUNT.TYP = 2

  [L]ASTATUS = fmet ACCOUNT.AUPDATE()
  Call LOG_LINE("Update TYP to 2 - Account too long") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AERROR) From AXUNIT
  Gosub WRITE_ERRORS

  # read record
  FreeGroup ACCOUNT
  ACCOUNT = null
  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null
  [L]ASTATUS = fmet ACCOUNT.AREAD("ZUT300")
  Call LOG_LINE("Read ZUT300") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  # verify TYP value
  Call LOG_LINE("Check TYP value") From AXUNIT
  Call CHECK_EQUAL(num$(ACCOUNT.TYP),"2") From AXUNIT
  Gosub WRITE_ERRORS

  # verify values of disabled fields

  # verify ACCSHO value
  Call LOG_LINE("Check ACCSHO value is null") From AXUNIT
  Call CHECK_EQUAL(ACCOUNT.ACCSHO,AVOID.ACHAR) From AXUNIT
  Gosub WRITE_ERRORS

  # verify CLS value
  Call LOG_LINE("Check CLS value is zero") From AXUNIT
  Call CHECK_EQUAL(num$(ACCOUNT.CLS),num$(AVOID.AINT)) From AXUNIT
  Gosub WRITE_ERRORS

  # verify CUR value
  Call LOG_LINE("Check CUR value is null") From AXUNIT
  Call CHECK_EQUAL(ACCOUNT.CUR,AVOID.ACHAR) From AXUNIT
  Gosub WRITE_ERRORS

  # verify FCY value
  Call LOG_LINE("Check FCY value is null") From AXUNIT
  Call CHECK_EQUAL(ACCOUNT.FCY,AVOID.ACHAR) From AXUNIT
  Gosub WRITE_ERRORS

  # verify VLYSTR value
  Call LOG_LINE("Check VLYSTR value is null") From AXUNIT
  Call CHECK_EQUAL(ACCOUNT.VLYSTR,AVOID.ADATE) From AXUNIT
  Gosub WRITE_ERRORS

  # verify VLYEND value
  Call LOG_LINE("Check VLYEND value is null") From AXUNIT
  Call CHECK_EQUAL(ACCOUNT.VLYEND,AVOID.ADATE) From AXUNIT
  Gosub WRITE_ERRORS

  # verify CNA value
  Call LOG_LINE("Check CNA value is null") From AXUNIT
  Call CHECK_EQUAL(ACCOUNT.CNA,AVOID.ACHAR) From AXUNIT
  Gosub WRITE_ERRORS

  # try to set a disabled property
  ACCOUNT.CUR = "EUR"

  [L]ASTATUS = fmet ACCOUNT.AUPDATE()
  Call LOG_LINE("Update CUR to 'EUR'") From AXUNIT
  #Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT ###################
  Gosub WRITE_ERRORS

  FreeGroup ACCOUNT
  ACCOUNT = null
  ACCOUNT = NewInstance C_GACCOUNT AllocGroup null
  [L]ASTATUS = fmet ACCOUNT.AREAD("ZUT300")
  Call LOG_LINE("Read ZUT300") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  Call VERIFY_RECORD("ZUT300")

  # verify CUR value
  Call LOG_LINE("Check CUR value is null") From AXUNIT
  Call CHECK_EQUAL(ACCOUNT.CUR,"") From AXUNIT
  Gosub WRITE_ERRORS

End

$INVALID_ACS
Call CHECK_EQUAL("Cannot change ACTX.USER","Cannot change ACTX.USER") From AXUNIT
Resume

$INVALID_ALLACS
Call CHECK_EQUAL("Cannot change GACTX.ALLACS","Cannot change GACTX.ALLACS") From AXUNIT
Resume
