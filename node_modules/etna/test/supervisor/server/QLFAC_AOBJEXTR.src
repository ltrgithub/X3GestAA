Local Integer MY_STATUS
Local Instance MY_LOG Using C_ALOG
MY_LOG = NewInstance C_ALOG AllocGroup null
[L]MY_STATUS = fmet MY_LOG.ASETNAME("QLFAC_AOBJEXTR_"+GACTX.USER)
[L]MY_STATUS = fmet MY_LOG.ABEGINLOG("QLFAC_AOBJEXTR")

Local Clbfile RESULT
RESULT =  func TESTSUITE()
FreeGroup MY_LOG
GTRACE = "QLFAC_AOBJEXTR_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!
Subprog SETUP
# Database cleaning
Local File AOBJEXTR [AOR]
Local File ATEXTRA  [AXX]
Onerrgo ERROR_SETUP_NOTFOUND
Trbegin [AOR]
Delete [AOR] Where NUMTAB = 99
Delete [AOR] Where NUMTAB = 98
Delete [AXX] Where CODFIC="AOBJEXTR" & IDENT1="99"
Delete [AXX] Where CODFIC="AOBJEXTR" & IDENT1="98"
Commit
Onerrgo
Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT
End

$ERROR_SETUP_NOTFOUND
Resume

#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

Call TESTSUITE_START("AOBJEXTR", "Test suite for Class AOBJEXTR") From AXUNIT

Call ADD_TESTCASE("AOBJEXTR_CREATION","Creation of AOBJEXTR 99",6) From AXUNIT
Call ADD_TESTCASE("AOBJEXTR_READ","Read AOBJEXTR 99",1) From AXUNIT
Call ADD_TESTCASE("AOBJEXTR_UPDATE","Update AOBJEXTR 99",4) From AXUNIT
Call ADD_TESTCASE("AOBJEXTR_DELETE","Deletion of AOBJEXTR 99",6) From AXUNIT

Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("AOBJEXTR", "SYRA_AOBJEXTR")

End SUITE_RESULT

#**
#* Creation of a unit
#* Properties of Class AOBJEXTR
#*
#*!
Subprog AOBJEXTR_CREATION()
Local Integer I,MY_STATUS
Local Instance QLFAC Using C_AOBJEXTR
QLFAC = NewInstance C_AOBJEXTR AllocGroup null

# Initialize Instance
[L]MY_STATUS = fmet QLFAC.AINIT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

# Load invalid instance-already exists
QLFAC.NUMTAB = 99
QLFAC.INTIT = "Description 99"

# Expect error - at least one line must be added
[L]MY_STATUS = fmet QLFAC.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup QLFAC


QLFAC = NewInstance C_AOBJEXTR AllocGroup null

# Initialize Instance
[L]MY_STATUS = fmet QLFAC.AINIT()
Call CHECK_EQUAL("Initialize"-num$([L]MY_STATUS),"Initialize"-num$([V]CST_AOK)) From AXUNIT

# Load mandatory values
QLFAC.NUMTAB = 99
QLFAC.INTIT = "Description 99"


I=fmet QLFAC.ADDLINE("AOR",[V]CST_ALASTPOS)
QLFAC.AOR(I).CODLOC="A"
QLFAC.AOR(I).CODEXT="B"
QLFAC.AOR(I).CODINTIT="B Title" #####

I=fmet QLFAC.ADDLINE("AOR",[V]CST_ALASTPOS)
QLFAC.AOR(I).CODLOC="C"
QLFAC.AOR(I).CODEXT="D"
QLFAC.AOR(I).CODINTIT="D Title" #####

# Expect OK
[L]MY_STATUS = fmet QLFAC.AINSERT()
Call CHECK_NOTEQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

Gosub WRITE_ERRORS
FreeGroup QLFAC

##### New for Line deletion test
QLFAC = NewInstance C_AOBJEXTR AllocGroup null

# Initialize Instance
[L]MY_STATUS = fmet QLFAC.AINIT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

# Load mandatory values
QLFAC.NUMTAB = 98
QLFAC.INTIT = "Description 98"


I=fmet QLFAC.ADDLINE("AOR",[V]CST_ALASTPOS)
QLFAC.AOR(I).CODLOC="A"
QLFAC.AOR(I).CODEXT="B"
QLFAC.AOR(I).CODINTIT="B Title"

I=fmet QLFAC.ADDLINE("AOR",[V]CST_ALASTPOS)
QLFAC.AOR(I).CODLOC="C"
QLFAC.AOR(I).CODEXT="D"
QLFAC.AOR(I).CODINTIT="D Title"

# Expect OK
[L]MY_STATUS = fmet QLFAC.AINSERT()
Call CHECK_NOTEQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup QLFAC
#####


End


#**
#* Read a AOBJEXTR
#*!
Subprog AOBJEXTR_READ()
Local Integer MY_STATUS
Local Instance QLFAC Using C_AOBJEXTR
QLFAC = NewInstance C_AOBJEXTR AllocGroup null

[L]MY_STATUS = fmet QLFAC.AREAD(99)
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS

FreeGroup QLFAC
End

#**
#* Update a AOBJEXTR
#*!
Subprog AOBJEXTR_UPDATE()
Local Integer MY_STATUS, I
Local Instance QLFAC Using C_AOBJEXTR
QLFAC = NewInstance C_AOBJEXTR AllocGroup null

[L]MY_STATUS = fmet QLFAC.AREAD(99)
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS

If [L]MY_STATUS = [V]CST_AOK
  QLFAC.INTIT = "Updated DES"

  [L]MY_STATUS = fmet QLFAC.AUPDATE()
  Call CHECK_NOTEQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
  Gosub WRITE_ERRORS
Endif
FreeGroup QLFAC

###### New
QLFAC = NewInstance C_AOBJEXTR AllocGroup null

[L]MY_STATUS = fmet QLFAC.AREAD(99)   #
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS

If [L]MY_STATUS = [V]CST_AOK
  QLFAC.AOR(1).CODINTIT = "Updated Title 1"
  [L]MY_STATUS = fmet QLFAC.AUPDATE()
  Call CHECK_NOTEQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
  Gosub WRITE_ERRORS
Endif
FreeGroup QLFAC
######
End

#**
#* Delete a AOBJEXTR
#*!
Subprog AOBJEXTR_DELETE()
Local Integer MY_STATUS
Local Instance QLFAC Using C_AOBJEXTR
QLFAC = NewInstance C_AOBJEXTR AllocGroup null

[L]MY_STATUS = fmet QLFAC.AREAD(99)
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS
If [L]MY_STATUS = [V]CST_AOK
  [L]MY_STATUS = fmet QLFAC.ADELETE()
  Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS
Endif

FreeGroup QLFAC

###### New below for line deletion test
Local Instance QLFAC Using C_AOBJEXTR
QLFAC = NewInstance C_AOBJEXTR AllocGroup null

[L]MY_STATUS = fmet QLFAC.AREAD(98)
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS
QLFAC.AOR(2).ASTALIN = [V]CST_ADEL
[L]MY_STATUS = fmet QLFAC.ADELETE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS


FreeGroup QLFAC

Local Instance QLFAC Using C_AOBJEXTR
QLFAC = NewInstance C_AOBJEXTR AllocGroup null

[L]MY_STATUS = fmet QLFAC.AREAD(98)
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS
If [L]MY_STATUS = [V]CST_AOK
  [L]MY_STATUS = fmet QLFAC.ADELETE()
  Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS
Endif

FreeGroup QLFAC



######
End


#**
#* Write errors to log
#*!
$WRITE_ERRORS
Local Integer I
For I=1 To maxtab(QLFAC.AERROR)
 If  QLFAC.AERROR(I)<>null & QLFAC.AERROR(I).STA=[V]CST_AERROR & QLFAC.AERROR(I).DEL<>2
   Call LOG_LINE(QLFAC.AERROR(I).PRO-":"-QLFAC.AERROR(I).MES) From AXUNIT
 Endif
Next I
Return

