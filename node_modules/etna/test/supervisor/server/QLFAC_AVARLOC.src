Local Clbfile RESULT

RESULT =  func TESTSUITE()
Call FERME_TRACE From LECFIC
GTRACE = "QLFAC_AVARLOC_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!
Subprog SETUP

  # Database cleaning
  Local File AVARLOC [AVR]

  Onerrgo ERROR_SETUP_NOTFOUND
  Trbegin [AVR]
  Delete [AVR]AVR0 = 2;"ZUTST";"ZROFLI"
  Commit
  Onerrgo
  Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT

  Close Local File [AVR]
End

$ERROR_SETUP_NOTFOUND
Resume


#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

  # Start the test suite
  Call TESTSUITE_START("AVARLOC", "Formula wizard setup")                               From AXUNIT

  Call ADD_TESTCASE("AVARLOC_AINSERT","Creation of AVARLOC record 2;ZUTST;ZROFLI",4)         From AXUNIT
  Call ADD_TESTCASE("AVARLOC_AREAD","Read AVARLOC record 2;ZUTST;ZROFLI",5)                 From AXUNIT
  Call ADD_TESTCASE("AVARLOC_AUPDATE","Update AVARLOC record 2;ZUTST;ZROFLI",4)              From AXUNIT
  Call ADD_TESTCASE("AVARLOC_ADELETE","Delete AVARLOC record 2;ZUTST;ZROFLI",2)              From AXUNIT

  # Run the test and return the result
  Local Clbfile RESULT_SUITE
  RESULT_SUITE=func AXUNIT.RUN_TESTSUITE("AVARLOC","AVARLOC test")

End RESULT_SUITE


Subprog AVARLOC_AINSERT()
  Local Integer ASTATUS,ALINE
  Local Instance MYINSTANCE Using C_AVARLOC
  Local Integer NUM

  MYINSTANCE = NewInstance C_AVARLOC AllocGroup null

  # Initialize Instance
  [L]ASTATUS = fmet MYINSTANCE.AINIT()
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT

  #Try to create and insert an invalid record.  In this case, TYP Function is selected and ZROFLI is not a valid subprogram.
  MYINSTANCE.TYP = 3
  MYINSTANCE.FCT = "ZUTST"
  [L]ALINE = fmet MYINSTANCE.ADDLINE("COLAVR",[V]CST_ALASTPOS)

  MYINSTANCE.COLAVR(ALINE).COD="ZROFLI"
  ASTATUS = fmet MYINSTANCE.COLAVR(ALINE).INTIT.ASETTEXT("Z Test title")


  [L]ASTATUS = fmet MYINSTANCE.AINSERT
  Call LOG_LINE("Check the AINSERT method - should fail in this scenario") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AERROR) From AXUNIT
  Gosub WRITE_ERRORS
  FreeGroup MYINSTANCE

  #Create and insert a valid record
  MYINSTANCE = NewInstance C_AVARLOC AllocGroup null

  # Initialize Instance
  [L]ASTATUS = fmet MYINSTANCE.AINIT()
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT

  # The collection is created with one line :
  MYINSTANCE.TYP = 2
  MYINSTANCE.FCT = "ZUTST"
  MYINSTANCE.COLAVR(1).COD="ZROFLI"
  ASTATUS = fmet MYINSTANCE.COLAVR(1).INTIT.ASETTEXT("Z Test title")

  [L]ASTATUS = fmet MYINSTANCE.AINSERT
  Call LOG_LINE("Check the AINSERT method for valid record") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS
  #
  FreeGroup MYINSTANCE
End


Subprog AVARLOC_AREAD

  Local Integer NUM
  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_AVARLOC
  MYINSTANCE = NewInstance C_AVARLOC AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AREAD(2,"ZUTST")

  Call LOG_LINE("Check the AREAD method") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  Call LOG_LINE("Verify the values read") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.TYP,2) From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.FCT,"ZUTST") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.COLAVR(1).COD,"ZROFLI") From AXUNIT
  Call CHECK_EQUAL(fmet MYINSTANCE.COLAVR(1).INTIT.AGETTEXT(),"Z Test title") From AXUNIT

  FreeGroup MYINSTANCE
End


Subprog AVARLOC_AUPDATE()
  Local Integer NUM
  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_AVARLOC
  MYINSTANCE = NewInstance C_AVARLOC AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AREAD(2,"ZUTST")
  Call LOG_LINE("Check the AREAD method from AVARLOC_AUPDATE") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  [L]ASTATUS = fmet MYINSTANCE.COLAVR(1).INTIT.ASETTEXT("Test 2")
  [L]ASTATUS = fmet MYINSTANCE.AUPDATE()
  Call LOG_LINE("Check the AUPDATE method") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  #Re-read updated record to ensure fields were properly updated
  FreeGroup MYINSTANCE

  MYINSTANCE = NewInstance C_AVARLOC AllocGroup null
  [L]ASTATUS = fmet MYINSTANCE.AREAD(2,"ZUTST")
  Call LOG_LINE("Check the AREAD method from AVARLOC_AUPDATE") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  Call LOG_LINE("Verify the updated value") From AXUNIT
  Call CHECK_EQUAL(fmet MYINSTANCE.COLAVR(1).INTIT.AGETTEXT(),"Test 2") From AXUNIT

  FreeGroup MYINSTANCE
End


Subprog AVARLOC_ADELETE

  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_AVARLOC
  MYINSTANCE = NewInstance C_AVARLOC AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AREAD(2,"ZUTST")
  Call LOG_LINE("Check the AREAD method") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  Call LOG_LINE("Check the ADELETE method") From AXUNIT
  [L]ASTATUS = fmet MYINSTANCE.ADELETE()
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup MYINSTANCE
End


#**
#* Write errors to log
#*!
$WRITE_ERRORS
Local Integer I
For I=1 To maxtab(MYINSTANCE.AERROR)
 If  MYINSTANCE.AERROR(I)<>null & MYINSTANCE.AERROR(I).STA=[V]CST_AERROR & MYINSTANCE.AERROR(I).DEL<>2
   Call LOG_LINE(MYINSTANCE.AERROR(I).PRO-":"-MYINSTANCE.AERROR(I).MES) From AXUNIT
 Endif
Next I
Return

