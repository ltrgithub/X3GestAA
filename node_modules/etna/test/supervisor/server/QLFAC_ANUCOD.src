# Notes :
# QLFAC_ANUCOD - Test instance deletion actions
# - Class Method Actions
#   test the event ADELETE





Local Clbfile TMP_CLBFILE(2)
Local Integer ERR
Local Char ERRMSG(250)

If ERR
  Infbox ERRMSG
  End
Endif

TMP_CLBFILE= func TESTSUITE()
Call FERME_TRACE From LECFIC

#GTRACE = "QLFAC_ANUCOD_"+GACTX.USER
Call LEC_TRACE From LECFIC
End


Subprog SETUP
Local File QLFANUCOD2 [AQCANU02]
Trbegin [AQCANU02]
For I=65 To 75
  [AQCANU02]FOREIGNKEY1 = string$(5,I)
  Write [F:AQCANU02]   # Errors do not matter - filling in missing data
Next
Commit

Local File QLFANUCOD1 [AQCANU01]
Trbegin [AQCANU01]
[AQCANU01]INDEX1 ="INDEX_2"
[AQCANU01]FOREIGNKEY1 = "BBBBB"
Write [F:AQCANU01]
Commit

Local File QLFANUCOD1A [AQCANU1A]
Trbegin [AQCANU1A]
[AQCANU1A]INDEX1 ="YYYYY"
[AQCANU1A]FOREIGNKEY1 = "BBBBB"
Write [F:AQCANU1A]
Commit
End

Funprog TESTSUITE()
  Call ADD_TESTCASE("TC_BLOCKDELETE","TC_BLOCKDELETE" ,4) From AXUNIT
  Call ADD_TESTCASE("TC_CASCADEDELETE_1","TC_CASCADEDELETE_1" ,6) From AXUNIT
  Call ADD_TESTCASE("TC_CASCADEDELETE_2","TC_CASCADEDELETE_2" ,6) From AXUNIT
  Call ADD_TESTCASE("TC_CASCADEDELETE_5","TC_CASCADEDELETE_5" ,432) From AXUNIT
  Call ADD_TESTCASE("TC_CASCADEDELETE_6","TC_CASCADEDELETE_6" ,27) From AXUNIT
##  Call ADD_TESTCASE("TC_OTHERDELETE_7","TC_OTHERDELETE_7" ,28) From AXUNIT
End func AXUNIT.RUN_TESTSUITE("QLFAC_ANUCOD", "QLFAC_ANUCOD")

Subprog TC_BLOCKDELETE
Local Char TC(255),EVENT(50)
Local Integer MY_STATUS,ASTATUS,I
Local Instance MY_INSTANCE Using C_QLFANUCOD2
MY_INSTANCE = NewInstance C_QLFANUCOD2 AllocGroup null

TC="Block delete of child when used by other entity"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]MY_STATUS = fmet MY_INSTANCE.AREAD("BBBBB")
Call CHECK_EQUAL(num$([L]MY_STATUS)-"Read",num$([V]CST_AOK)-"Read") From AXUNIT
If [L]MY_STATUS=[V]CST_AOK
  [L]MY_STATUS = fmet MY_INSTANCE.ADELETE()
  For I=1 To maxtab(MY_INSTANCE.AERROR)
    Call CHECK_EQUAL(num$([L]MY_STATUS)-MY_INSTANCE.AERROR(I).MES,num$([V]CST_AERROR)-MY_INSTANCE.AERROR(I).MES) From AXUNIT
  Next
Endif

FreeGroup MY_INSTANCE


End


Subprog TC_CASCADEDELETE_1
Local Char TC(255),EVENT(50)
Local Integer MY_STATUS,ASTATUS,I
Local Instance MY_INSTANCE3 Using C_QLFANUCOD3
MY_INSTANCE3 = NewInstance C_QLFANUCOD3 AllocGroup null

TC="cascade - insert rows to be deleted"
Call CHECK_EQUAL(TC,TC) From AXUNIT

[L]ASTATUS = fmet MY_INSTANCE3.AINIT()
If [L]ASTATUS<>[V]CST_AOK
  Call CHECK_EQUAL(num$([L]MY_STATUS)-"Unable to initialize cascade data", num$([L]MY_STATUS)-"Unable to initialize cascade data") From AXUNIT
Endif

MY_INSTANCE3.INDEX1 = "CASCADEDEL"
MY_INSTANCE3.FOREIGNKEY1 = "FOREIGNKEY"
Local Integer I, LINE_NO

For I=1 To 5
  [L]LINE_NO = fmet MY_INSTANCE3.ADDLINE("QCOL",[V]CST_ALASTPOS)
  MY_INSTANCE3.QCOL(LINE_NO).INDEX1=MY_INSTANCE3.INDEX1
  MY_INSTANCE3.QCOL(LINE_NO).LINENO=LINE_NO
  MY_INSTANCE3.QCOL(LINE_NO).FOREIGNKEY1=MY_INSTANCE3.FOREIGNKEY1
Next
[L]ASTATUS = fmet MY_INSTANCE3.AINSERT()
If [L]ASTATUS=[V]CST_AOK
  Call CHECK_EQUAL(num$([L]MY_STATUS)-"Cascade delete data inserted",num$([L]MY_STATUS)-"Cascade delete data inserted") From AXUNIT
Endif


TC="cascasde - delete children"
Call CHECK_EQUAL(TC,TC) From AXUNIT

[L]MY_STATUS = fmet MY_INSTANCE3.AREAD("CASCADEDEL")                                    # Primary key = "CASCADEDEL"
Call CHECK_EQUAL(num$([L]MY_STATUS)-"Read",num$([V]CST_AOK)-"Read") From AXUNIT
If [L]MY_STATUS=[V]CST_AOK
  [L]MY_STATUS = fmet MY_INSTANCE3.ADELETE()
 Call CHECK_EQUAL([L]MY_STATUS, [V]CST_AOK) From AXUNIT
  If [L]MY_STATUS = [V]CST_AOK
    Call CHECK_EQUAL("cascaded delete on QLFANUCOD3 index 'CASCADEDEL'","cascaded delete on QLFANUCOD3 index 'CASCADEDEL'") From AXUNIT
    For I=1 To maxtab(MY_INSTANCE3.AERROR)
      Call CHECK_EQUAL(num$([L]MY_STATUS)-MY_INSTANCE3.AERROR(I).MES,num$([V]CST_AOK)-MY_INSTANCE3.AERROR(I).MES) From AXUNIT
    Next
  Endif
Endif

FreeGroup MY_INSTANCE3
End


Subprog TC_CASCADEDELETE_2
Local Char TC(255),EVENT(50)
Local Integer MY_STATUS,ASTATUS,I
Local Instance MY_INSTANCE4 Using C_QLFANUCOD4
MY_INSTANCE4 = NewInstance C_QLFANUCOD4 AllocGroup null

TC="cascade - insert rows to be deleted"
Call CHECK_EQUAL(TC,TC) From AXUNIT

[L]ASTATUS = fmet MY_INSTANCE4.AINIT()
If [L]ASTATUS<>[V]CST_AOK
  Call CHECK_EQUAL(num$([L]MY_STATUS)-"Unable to initialize cascade data", num$([L]MY_STATUS)-"Unable to initialize cascade data") From AXUNIT
Endif

MY_INSTANCE4.INDEX1 = "CASCADEDEL"
MY_INSTANCE4.FOREIGNKEY1 = "FOREIGNKEY"
Local Integer I, LINE_NO, IB, SUBLINE_NO

For I=1 To 5
  [L]LINE_NO = fmet MY_INSTANCE4.ADDLINE("COLA",[V]CST_ALASTPOS)
  MY_INSTANCE4.COLA(LINE_NO).INDEX1=MY_INSTANCE4.INDEX1
  MY_INSTANCE4.COLA(LINE_NO).LINENO=LINE_NO
  For IB=1 To 3
    [L]SUBLINE_NO = fmet MY_INSTANCE4.COLA(LINE_NO).ADDLINE("COLB",[V]CST_ALASTPOS)
    MY_INSTANCE4.COLA(LINE_NO).COLB(SUBLINE_NO).INDEX1=MY_INSTANCE4.INDEX1
    MY_INSTANCE4.COLA(LINE_NO).COLB(SUBLINE_NO).LINENO=LINE_NO
    MY_INSTANCE4.COLA(LINE_NO).COLB(SUBLINE_NO).SUBLINENO=SUBLINE_NO
  Next
Next

[L]ASTATUS = fmet MY_INSTANCE4.AINSERT()
If [L]ASTATUS=[V]CST_AOK
  Call CHECK_EQUAL(num$([L]MY_STATUS)-"Cascade delete data inserted",num$([L]MY_STATUS)-"Cascade delete data inserted") From AXUNIT
Else
  Call CHECK_NOTEQUAL(num$([L]MY_STATUS)-"Cascade delete data insert failed",num$([L]MY_STATUS)-"Cascade delete data insert failed") From AXUNIT
Endif

TC="cascasde - delete Parent-Child-SubChild"
Call CHECK_EQUAL(TC,TC) From AXUNIT

[L]MY_STATUS = fmet MY_INSTANCE4.AREAD("CASCADEDEL")                                    # Primary key = "CASCADEDEL"
Call CHECK_EQUAL(num$([L]MY_STATUS)-"Read",num$([V]CST_AOK)-"Read") From AXUNIT
If [L]MY_STATUS=[V]CST_AOK
  [L]MY_STATUS = fmet MY_INSTANCE4.ADELETE()
  If [L]MY_STATUS = [V]CST_AOK
    Call CHECK_EQUAL("cascaded delete on QLFANUCOD3 index 'CASCADEDEL'","cascaded delete on QLFANUCOD3 index 'CASCADEDEL'") From AXUNIT
    For I=1 To maxtab(MY_INSTANCE4.AERROR)
      Call CHECK_EQUAL(num$([L]MY_STATUS)-MY_INSTANCE4.AERROR(I).MES,num$([V]CST_AOK)-MY_INSTANCE4.AERROR(I).MES) From AXUNIT
    Next
  Endif
Endif
FreeGroup MY_INSTANCE4
TC = "freegroup [MY_INSTANCE4]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
End


Subprog TC_CASCADEDELETE_5
Local Char TC(255),EVENT(50)
Local Integer MY_STATUS,ASTATUS,I
Local Instance MY_INSTANCE5 Using C_QLFANUCOD5
If MY_INSTANCE5<>null
  FreeGroup MY_INSTANCE5
Endif
MY_INSTANCE5 = NewInstance C_QLFANUCOD5 AllocGroup null
TC = "Remove rows that may be left over from previous tests"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Local File QLFANUCOD5 [QANU5]
Local File QLFANUCOD5A [QANU5A]
Local File QLFANUCOD5B [QANU5B]
Local File QLFANUCOD5C [QANU5C]
Local File QLFANUCOD5D [QANU5D]
Local File QLFANUCOD5E [QANU5E]
TC = "Rows in tables at start"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD5=["+num$(nbrecord([QANU5]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD5A=["+num$(nbrecord([QANU5A]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD5B=["+num$(nbrecord([QANU5B]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD5C=["+num$(nbrecord([QANU5C]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD5D=["+num$(nbrecord([QANU5D]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD5E=["+num$(nbrecord([QANU5E]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Trbegin [QANU5]
Delete [QANU5] Where 1=1
Delete [QANU5A] Where 1=1
Delete [QANU5B] Where 1=1
Delete [QANU5C] Where 1=1
Delete [QANU5D] Where 1=1
Delete [QANU5E] Where 1=1
Commit
Close Local File [QANU5],[QANU5A],[QANU5B],[QANU5C],[QANU5D],[QANU5E]

TC="cascade - insert rows to be deleted"
Call CHECK_EQUAL(TC,TC) From AXUNIT

[L]ASTATUS = fmet MY_INSTANCE5.AINIT()
If [L]ASTATUS<>[V]CST_AOK
  Call CHECK_EQUAL(num$([L]MY_STATUS)-"Unable to initialize cascade data", num$([L]MY_STATUS)-"Unable to initialize cascade data") From AXUNIT
Endif

MY_INSTANCE5.INDEX1 = "CASCADEDEL"

Local Integer I,IA, IB, IC, ID, SUBLINE_NO,SUBLINE_NOA, SUBLINE_NOB, SUBLINE_NOC, SUBLINE_NOD

For I=1 To 5
  [L]SUBLINE_NO = fmet MY_INSTANCE5.ADDLINE("COL",[V]CST_ALASTPOS)
  MY_INSTANCE5.COL(SUBLINE_NO).INDEX1=MY_INSTANCE5.INDEX1
  MY_INSTANCE5.COL(SUBLINE_NO).SUBLINE_NO=SUBLINE_NO
  For IA=1 To 3
    [L]SUBLINE_NOA = fmet MY_INSTANCE5.COL(SUBLINE_NO).ADDLINE("COLA",[V]CST_ALASTPOS)
    MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).INDEX1=MY_INSTANCE5.INDEX1
    MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).SUBLINE_NO=SUBLINE_NO
    MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).SUBLINE_NOA=SUBLINE_NOA
    For IB=1 To 3
      [L]SUBLINE_NOB = fmet MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).ADDLINE("COLB",[V]CST_ALASTPOS)
      MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).INDEX1=MY_INSTANCE5.INDEX1
      MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).SUBLINE_NO=SUBLINE_NO
      MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).SUBLINE_NOA=SUBLINE_NOA
      MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).SUBLINE_NOB=SUBLINE_NOB
        For IC= 1 To 3
          [L]SUBLINE_NOC = fmet MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).ADDLINE("COLC",[V]CST_ALASTPOS)
          MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).INDEX1=MY_INSTANCE5.INDEX1
          MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).SUBLINE_NO=SUBLINE_NO
          MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).SUBLINE_NOA=SUBLINE_NOA
          MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).SUBLINE_NOB=SUBLINE_NOB
          MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).SUBLINE_NOC=SUBLINE_NOC
           For ID= 1 To 3
            TC="I=["+num$(I)+"]"
            TC-="IA=["+num$(IA)+"]"
            TC-="IB=["+num$(IB)+"]"
            TC-="IC=["+num$(ID)+"]"
            TC-="ID=["+num$(ID)+"]"
            #TC-="Freeheap=["+num$(freeheap)+"]"
            #TC-="Freemem=["+num$(freemem)+"]"
            Call CHECK_EQUAL(TC,TC) From AXUNIT
            [L]SUBLINE_NOD = fmet MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).ADDLINE("COLD",[V]CST_ALASTPOS)
            MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).COLD(SUBLINE_NOD).INDEX1=MY_INSTANCE5.INDEX1
            MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).COLD(SUBLINE_NOD).SUBLINE_NO=SUBLINE_NO
            MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).COLD(SUBLINE_NOD).SUBLINE_NOA=SUBLINE_NOA
            MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).COLD(SUBLINE_NOD).SUBLINE_NOB=SUBLINE_NOB
            MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).COLD(SUBLINE_NOD).SUBLINE_NOC=SUBLINE_NOC
            MY_INSTANCE5.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).COLD(SUBLINE_NOD).SUBLINE_NOD=SUBLINE_NOD
          Next
        Next
    Next
  Next
Next

[L]ASTATUS = fmet MY_INSTANCE5.AINSERT()
If [L]ASTATUS=[V]CST_AOK
  Call CHECK_EQUAL(num$([L]MY_STATUS)-"Cascade delete data inserted",num$([L]MY_STATUS)-"Cascade delete data inserted") From AXUNIT
Else
  Call CHECK_EQUAL(num$([L]MY_STATUS)-"Cascade delete data insert failed",num$([L]MY_STATUS)-"Cascade delete data insert failed") From AXUNIT
End
Endif

Local File QLFANUCOD5 [QANU5]
Local File QLFANUCOD5A [QANU5A]
Local File QLFANUCOD5B [QANU5B]
Local File QLFANUCOD5C [QANU5C]
Local File QLFANUCOD5D [QANU5D]
Local File QLFANUCOD5E [QANU5E]
TC="Rows in tables after insert"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD5=["+num$(nbrecord([QANU5]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD5A=["+num$(nbrecord([QANU5A]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD5B=["+num$(nbrecord([QANU5B]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD5C=["+num$(nbrecord([QANU5C]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD5D=["+num$(nbrecord([QANU5D]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD5E=["+num$(nbrecord([QANU5E]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Close Local File [QANU5],[QANU5A],[QANU5B],[QANU5C],[QANU5D],[QANU5E]


TC="cascasde - delete Parent-Child-SubChild"
Call CHECK_EQUAL(TC,TC) From AXUNIT

[L]MY_STATUS = fmet MY_INSTANCE5.AREAD("CASCADEDEL",0)                                    # Primary key = "CASCADEDEL"
Call CHECK_EQUAL(num$([L]MY_STATUS)-"Read",num$([V]CST_AOK)-"Read") From AXUNIT
If [L]MY_STATUS=[V]CST_AOK
  [L]MY_STATUS = fmet MY_INSTANCE5.ADELETE()
  If [L]MY_STATUS = [V]CST_AOK
    Call CHECK_EQUAL("cascaded delete on QLFANUCOD5 index 'CASCADEDEL'","cascaded delete on QLFANUCOD5 index 'CASCADEDEL'") From AXUNIT
    For I=1 To maxtab(MY_INSTANCE5.AERROR)
      Call CHECK_EQUAL(num$([L]MY_STATUS)-MY_INSTANCE5.AERROR(I).MES,num$([V]CST_AOK)-MY_INSTANCE5.AERROR(I).MES) From AXUNIT
    Next
  Else  
    Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
  Endif
Endif
Local File QLFANUCOD5 [QANU5]
Local File QLFANUCOD5A [QANU5A]
Local File QLFANUCOD5B [QANU5B]
Local File QLFANUCOD5C [QANU5C]
Local File QLFANUCOD5D [QANU5D]
Local File QLFANUCOD5E [QANU5E]
TC="Rows in tables after delete"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD5=["+num$(nbrecord([QANU5]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD5A=["+num$(nbrecord([QANU5A]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD5B=["+num$(nbrecord([QANU5B]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD5C=["+num$(nbrecord([QANU5C]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD5D=["+num$(nbrecord([QANU5D]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD5E=["+num$(nbrecord([QANU5E]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Close Local File [QANU5],[QANU5A],[QANU5B],[QANU5C],[QANU5D],[QANU5E]
FreeGroup MY_INSTANCE5
End


Subprog TC_CASCADEDELETE_6
Local Char TC(255),EVENT(50)
Local Integer MY_STATUS,ASTATUS,I
Local Instance MY_INSTANCE6 Using C_QLFANUCOD6
If MY_INSTANCE6<>null
  FreeGroup MY_INSTANCE6
Endif
MY_INSTANCE6 = NewInstance C_QLFANUCOD6 AllocGroup null
TC = "Remove rows that may be left over from previous tests"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Local File QLFANUCOD6 [QANU6]
Local File QLFANUCOD6A [QANU6A]
Local File QLFANUCOD6B [QANU6B]
Local File QLFANUCOD6C [QANU6C]
Local File QLFANUCOD6D [QANU6D]
Local File QLFANUCOD6X [QANU6X]
TC = "Rows in tables at start"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD6=["+num$(nbrecord([QANU6]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD6A=["+num$(nbrecord([QANU6A]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD6B=["+num$(nbrecord([QANU6B]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD6C=["+num$(nbrecord([QANU6C]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD6D=["+num$(nbrecord([QANU6D]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD6X=["+num$(nbrecord([QANU6X]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Trbegin [QANU6]
Delete [QANU6] Where 1=1
Delete [QANU6A] Where 1=1
Delete [QANU6B] Where 1=1
Delete [QANU6C] Where 1=1
Delete [QANU6D] Where 1=1
Delete [QANU6X] Where 1=1
Commit
Close Local File [QANU6],[QANU6A],[QANU6B],[QANU6C],[QANU6D],[QANU6X]

TC="cascade - insert rows to be deleted"
Call CHECK_EQUAL(TC,TC) From AXUNIT

[L]ASTATUS = fmet MY_INSTANCE6.AINIT()
If [L]ASTATUS<>[V]CST_AOK
  Call CHECK_EQUAL(num$([L]MY_STATUS)-"Unable to initialize cascade data", num$([L]MY_STATUS)-"Unable to initialize cascade data") From AXUNIT
Endif

MY_INSTANCE6.INDEX1 = "CASCADEDEL"
MY_INSTANCE6.REF.INDEX1 = "CASCADEDEL"
MY_INSTANCE6.REF.REF = "CASCADEDEL"



Local Integer I,IA, IB, IC, ID, SUBLINE_NO,SUBLINE_NOA, SUBLINE_NOB, SUBLINE_NOC, SUBLINE_NOD

For I=1 To 5
  [L]SUBLINE_NO = fmet MY_INSTANCE6.ADDLINE("COL",[V]CST_ALASTPOS)
  MY_INSTANCE6.COL(SUBLINE_NO).INDEX1=MY_INSTANCE6.INDEX1
  MY_INSTANCE6.COL(SUBLINE_NO).SUBLINE_NO=SUBLINE_NO
  For IA=1 To 3
    [L]SUBLINE_NOA = fmet MY_INSTANCE6.COL(SUBLINE_NO).ADDLINE("COLA",[V]CST_ALASTPOS)
    MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).INDEX1=MY_INSTANCE6.INDEX1
    MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).SUBLINE_NO=SUBLINE_NO
    MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).SUBLINE_NOA=SUBLINE_NOA
    For IB=1 To 3
      [L]SUBLINE_NOB = fmet MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).ADDLINE("COLB",[V]CST_ALASTPOS)
      MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).INDEX1=MY_INSTANCE6.INDEX1
      MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).SUBLINE_NO=SUBLINE_NO
      MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).SUBLINE_NOA=SUBLINE_NOA
      MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).SUBLINE_NOB=SUBLINE_NOB
        For IC= 1 To 3
          [L]SUBLINE_NOC = fmet MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).ADDLINE("COLC",[V]CST_ALASTPOS)
          MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).INDEX1=MY_INSTANCE6.INDEX1
          MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).SUBLINE_NO=SUBLINE_NO
          MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).SUBLINE_NOA=SUBLINE_NOA
          MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).SUBLINE_NOB=SUBLINE_NOB
          MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).SUBLINE_NOC=SUBLINE_NOC
#           For ID= 1 To 3
#            TC="I=["+num$(I)+"]"
#            TC-="IA=["+num$(IA)+"]"
#            TC-="IB=["+num$(IB)+"]"
#            TC-="IC=["+num$(ID)+"]"
#            TC-="ID=["+num$(ID)+"]"
#            TC-="Freeheap=["+num$(freeheap)+"]"
#            TC-="Freemem=["+num$(freemem)+"]"
#            Call CHECK_EQUAL(TC,TC) From AXUNIT
#            [L]SUBLINE_NOD = fmet MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).ADDLINE("COLD",[V]CST_ALASTPOS)
#            MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).COLD(SUBLINE_NOD).INDEX1=MY_INSTANCE6.INDEX1
#            MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).COLD(SUBLINE_NOD).SUBLINE_NO=SUBLINE_NO
#            MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).COLD(SUBLINE_NOD).SUBLINE_NOA=SUBLINE_NOA
#            MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).COLD(SUBLINE_NOD).SUBLINE_NOB=SUBLINE_NOB
#            MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).COLD(SUBLINE_NOD).SUBLINE_NOC=SUBLINE_NOC
#            MY_INSTANCE6.COL(SUBLINE_NO).COLA(SUBLINE_NOA).COLB(SUBLINE_NOB).COLC(SUBLINE_NOC).COLD(SUBLINE_NOD).SUBLINE_NOD=SUBLINE_NOD
#          Next
        Next
    Next
  Next
Next

[L]ASTATUS = fmet MY_INSTANCE6.AINSERT()
If [L]ASTATUS=[V]CST_AOK
  Call CHECK_EQUAL(num$([L]MY_STATUS)-"Cascade delete data inserted",num$([L]MY_STATUS)-"Cascade delete data inserted") From AXUNIT
Else
  Call CHECK_EQUAL(num$([L]MY_STATUS)-"Cascade delete data insert failed",num$([L]MY_STATUS)-"Cascade delete data insert failed") From AXUNIT
Endif

Local File QLFANUCOD6 [QANU6]
Local File QLFANUCOD6A [QANU6A]
Local File QLFANUCOD6B [QANU6B]
Local File QLFANUCOD6C [QANU6C]
Local File QLFANUCOD6D [QANU6D]
Local File QLFANUCOD6X [QANU6X]
TC="Rows in tables after insert"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD6=["+num$(nbrecord([QANU6]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD6A=["+num$(nbrecord([QANU6A]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD6B=["+num$(nbrecord([QANU6B]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD6C=["+num$(nbrecord([QANU6C]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD6D=["+num$(nbrecord([QANU6D]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD6X=["+num$(nbrecord([QANU6X]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Close Local File [QANU6],[QANU6A],[QANU6B],[QANU6C],[QANU6D],[QANU6X]

TC="cascasde - delete Parent-Child-SubChild"
Call CHECK_EQUAL(TC,TC) From AXUNIT

[L]MY_STATUS = fmet MY_INSTANCE6.AREAD("CASCADEDEL",0)                                    # Primary key = "CASCADEDEL"
Call CHECK_EQUAL(num$([L]MY_STATUS)-"Read",num$([V]CST_AOK)-"Read") From AXUNIT
If [L]MY_STATUS=[V]CST_AOK
  [L]MY_STATUS = fmet MY_INSTANCE6.ADELETE()
  If [L]MY_STATUS = [V]CST_AOK
    Call CHECK_EQUAL("cascaded delete on QLFANUCOD6 index 'CASCADEDEL'","cascaded delete on QLFANUCOD6 index 'CASCADEDEL'") From AXUNIT
    For I=1 To maxtab(MY_INSTANCE6.AERROR)
      Call CHECK_EQUAL(num$([L]MY_STATUS)-MY_INSTANCE6.AERROR(I).MES,num$([V]CST_AOK)-MY_INSTANCE6.AERROR(I).MES) From AXUNIT
    Next
  Endif
Endif
Local File QLFANUCOD6 [QANU6]
Local File QLFANUCOD6A [QANU6A]
Local File QLFANUCOD6B [QANU6B]
Local File QLFANUCOD6C [QANU6C]
Local File QLFANUCOD6D [QANU6D]
Local File QLFANUCOD6X [QANU6X]

TC="Rows in tables after delete"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD6=["+num$(nbrecord([QANU6]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD6A=["+num$(nbrecord([QANU6A]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD6B=["+num$(nbrecord([QANU6B]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD6C=["+num$(nbrecord([QANU6C]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD6D=["+num$(nbrecord([QANU6D]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD6X=["+num$(nbrecord([QANU6X]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Close Local File [QANU6],[QANU6A],[QANU6B],[QANU6C],[QANU6D],[QANU6X]
FreeGroup MY_INSTANCE6
End

Subprog TC_OTHERDELETE_7
Local Char TC(255),EVENT(50)
Local Integer MY_STATUS,ASTATUS,I
Local Instance MY_INSTANCE7 Using C_QLFANUCOD7
If MY_INSTANCE7<>null
  FreeGroup MY_INSTANCE7
Endif
MY_INSTANCE7 = NewInstance C_QLFANUCOD7 AllocGroup null
TC = "Remove rows that may be left over from previous tests"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Local File QLFANUCOD7 [QANU7]
Local File QLFANUCOD7X [QANU7X]
TC = "Rows in tables at start"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD7=["+num$(nbrecord([QANU7]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD7X=["+num$(nbrecord([QANU7X]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Trbegin [QANU7]
Delete [QANU7] Where 1=1
Delete [QANU7X] Where 1=1
Commit
Close Local File [QANU7],[QANU7X]

TC="other - insert rows to be deleted"
Call CHECK_EQUAL(TC,TC) From AXUNIT
[L]ASTATUS = fmet MY_INSTANCE7.AINIT()
If [L]ASTATUS<>[V]CST_AOK
  Call CHECK_EQUAL(num$([L]MY_STATUS)-"Unable to initialize other data", num$([L]MY_STATUS)-"Unable to initialize other data") From AXUNIT
Endif


MY_INSTANCE7.INDEX1 = "OTHER"
MY_INSTANCE7.REF = "OTHER"



Local Integer I,IA, IB, IC, ID, SUBLINE_NO,SUBLINE_NOA, SUBLINE_NOB, SUBLINE_NOC, SUBLINE_NOD


[L]ASTATUS = fmet MY_INSTANCE7.AINSERT()
If [L]ASTATUS=[V]CST_AOK
  Call CHECK_EQUAL(num$([L]MY_STATUS)-"other delete data inserted",num$([L]MY_STATUS)-"other delete data inserted") From AXUNIT
Else
  Call CHECK_EQUAL(num$([L]MY_STATUS)-"other delete data insert failed",num$([L]MY_STATUS)-"other delete data insert failed") From AXUNIT
Endif

Local File QLFANUCOD7 [QANU7]
Local File QLFANUCOD7X [QANU7X]
TC="Rows in tables after insert"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD7=["+num$(nbrecord([QANU7]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD7X=["+num$(nbrecord([QANU7X]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Close Local File [QANU7],[QANU7X]

TC="cascasde - delete Parent-Child-SubChild"
Call CHECK_EQUAL(TC,TC) From AXUNIT

[L]MY_STATUS = fmet MY_INSTANCE7.AREAD("OTHERDEL")                                    # Primary key = "OTHER"
Call CHECK_EQUAL(num$([L]MY_STATUS)-"Read",num$([V]CST_AOK)-"Read") From AXUNIT
If [L]MY_STATUS=[V]CST_AOK
  [L]MY_STATUS = fmet MY_INSTANCE7.ADELETE()
  If [L]MY_STATUS = [V]CST_AOK
    Call CHECK_EQUAL("other delete on QLFANUCOD7 index 'OTHER'","other delete on QLFANUCOD7 index 'OTHER'") From AXUNIT
    For I=1 To maxtab(MY_INSTANCE7.AERROR)
      Call CHECK_EQUAL(num$([L]MY_STATUS)-MY_INSTANCE7.AERROR(I).MES,num$([V]CST_AOK)-MY_INSTANCE7.AERROR(I).MES) From AXUNIT
    Next
  Endif
Endif
Local File QLFANUCOD7 [QANU7]
Local File QLFANUCOD7X [QANU7X]

TC="Rows in tables after delete"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD7=["+num$(nbrecord([QANU7]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
TC = "QLFANUCOD7X=["+num$(nbrecord([QANU7X]))+"]"
Call CHECK_EQUAL(TC,TC) From AXUNIT
Close Local File [QANU7],[QANU7X]
FreeGroup MY_INSTANCE7
End
