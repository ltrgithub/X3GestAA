# TODO : uncomment test on IMAGES (needs the support of BLOB)
# TODO : Fix decimals issues (INS.FIELD06)
# TODO : add support of NullUuid() instead of NullUuid
# TODO : add support of getUuid() instead of getUuid
Local Clbfile TMP_CLBFILE(2)
TMP_CLBFILE= func TESTSUITE()
Call FERME_TRACE From LECFIC

#GTRACE = "QLFAC_AQCQRY06_"+GACTX.USER
Call LEC_TRACE From LECFIC

#Local Char FIC(255)
#FIC = heapdmp( )
#Infbox "HEAPDMP: " + FIC

End

#**
#* Subprog SETUP called at the beginning of the unit test suite to clean then environment
#*!c
Subprog SETUP
Local Instance INS Using C_AQCQRY06
INS = NewInstance C_AQCQRY06 AllocGroup null

# Create a simple instance
Callmet INS.AINIT()       # Calls standard AINIT class method to initialize the new instance
INS.FIELD01 =  "AQC06_F1" : Callmet INS.ADELETE()# Only the index is expected for AINIT; errors on more fields.
INS.FIELD01 =  "AQC06_F2" : Callmet INS.ADELETE()
INS.FIELD01 =  "AQC062_F1" : Callmet INS.ADELETE()
INS.FIELD01 =  "AQC062_F2" : Callmet INS.ADELETE()
#Delete the instance

End

Subprog TEARDOWN
End

#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

Call TESTSUITE_START("AQCQRY06", "Test suite for Class AQCQRY06") From AXUNIT
Call ADD_TESTCASE("AQCQRY06_BASIC","AINSERT + AREAD + AUPDATE + ADELETE",220) From AXUNIT
Call ADD_TESTCASE("AQCQRY06_CONTROLS","AINSERT CONTROLS",15) From AXUNIT
Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("AQCQRY06", "SYRA_AQCQRY06")
End SUITE_RESULT

#**
#* AQCQRY06_BASIC CRUD
#*
#*!
Subprog AQCQRY06_BASIC()
Local Integer MY_STATUS, WNBERR
Local Instance INS Using C_AQCQRY06
INS = NewInstance C_AQCQRY06 AllocGroup null

[L]MY_STATUS = fmet INS.AREAD("AQC06_F1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

# Create a simple instance
[L]MY_STATUS = fmet INS.AINIT()
INS.FIELD01 =  "AQC06_F1"  # fmet call of AINIT allows more than indexed fields - Callmet only permit index fields.
INS.FIELD02 =  "AQC06_F2"
INS.FIELD03 =  1

#TEST AINSERT
Call CHECK_NOTEQUAL("AQCQRY06.AINSERT('Missing Mandatory properties')","") From AXUNIT
[L]MY_STATUS = fmet INS.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT # Should fail due to mandatory fields missing
WNBERR=9
Gosub WRITE_ERRORS

[L]MY_STATUS=[V]CST_AOK

[L]MY_STATUS = fmet INS.AINIT() ###

INS.FIELD01 =  "AQC062_F1"  # fmet call of AINIT allows more than indexed fields - Callmet only permit index fields.
INS.FIELD02 =  "AQC062_F2"

INS.FIELD03 =  1 # not mandatory L
INS.FIELD04 =  "AQC062_F4" # mandatory A
INS.FIELD05 =  123456.12345 # mandatory DCB
INS.FIELD06 =  123456789012345.1234 # mandatory MD1
#INS.FIELD07 = 1 # M # INS.FIELD07 is mandatory, but INIT sets it to 1 so no error.
#INS.FIELD08 = 3 # mandatory MM - no default  GH 7098
INS.FIELD09 = 888.88 # mandatory CTD
INS.FIELD10 =  9999 # mandatory C
INS.FIELD11 = [05/05/2015] # mandatory D
INS.FIELD16 = "AAAA" # not mandatory ABR
INS.FIELD17 = 1234 # not mandatory C
INS.FIELD18 = "BBBB" # not mandatory C
INS.CPY = "AAA"
WCODBLB = 'ZEWI'
WIMAGE=1
Gosub IMAGE_SET
Raz WIMAGE
INS.FIELD13="This is a test of BCLOB entry" # Mandatory CLOB
INS.FIELD14=datetime$ #INS.CREDATTIM # mandatory date time (GH 7104)
INS.FIELD15=NullUuid
INS.FIELD15=getUuid  # mandatory
INS.CRY='US' # not mandatory
INS.CTIME="1234" # not mandatory

Call CHECK_NOTEQUAL("AQCQRY06.AINSERT('Inserting with Mandatory properties')","") From AXUNIT
[L]MY_STATUS = fmet INS.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
WNBERR=0
Gosub WRITE_ERRORS

#TEST AREAD
Call CHECK_NOTEQUAL("AQCQRY06.AREAD('AQC062_F1') (1)","") From AXUNIT
[L]MY_STATUS = fmet INS.AREAD("AQC062_F1") # Index value
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Call CHECK_EQUAL(INS.FIELD01, "AQC062_F1") From AXUNIT
Call CHECK_EQUAL(INS.FIELD02, "AQC062_F2") From AXUNIT
Call CHECK_EQUAL(INS.FIELD03, 1) From AXUNIT
Call CHECK_EQUAL(INS.FIELD04, "AQC062_F4") From AXUNIT
Call CHECK_EQUAL(INS.FIELD05, 123456.12345) From AXUNIT
Call CHECK_EQUAL(INS.FIELD06, 123456789012345.1234) From AXUNIT
Call CHECK_EQUAL(INS.FIELD07, 1) From AXUNIT
Call CHECK_EQUAL(INS.FIELD08, 1) From AXUNIT  #GH 7098
Call CHECK_EQUAL(INS.FIELD09, 888.88) From AXUNIT
Call CHECK_EQUAL(INS.FIELD10, 9999) From AXUNIT
Call CHECK_EQUAL(INS.FIELD11, [05/05/2015]) From AXUNIT
Call CHECK_EQUAL(INS.FIELD13,"This is a test of BCLOB entry") From AXUNIT
#Call CHECK_EQUAL(INS.FIELD14,INS.CREDATTIM) From AXUNIT (GH 7104)
Call CHECK_NOTEQUAL(INS.FIELD15,NullUuid) From AXUNIT

WNBERR=0
Gosub WRITE_ERRORS

#Try to insert twice the same record
Call CHECK_NOTEQUAL("AQCQRY06.AINSERT('AQC062_F1') twice","") From AXUNIT
[L]MY_STATUS = fmet INS.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
WNBERR=1
Gosub WRITE_ERRORS

# TEST AUPDATE to Null of (AVOID) mandatory property.
INS.FIELD04 =  AVOID.ACHAR  # ""
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE Mandatory('INS.FIELD04 = ')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
WNBERR=1
Gosub WRITE_ERRORS

INS.FIELD05 =  AVOID.ADEC  # 0
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE Mandatory('INS.FIELD05 =  0')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
WNBERR=2
Gosub WRITE_ERRORS


INS.FIELD06 =  AVOID.ADEC  # 0
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE Mandatory('INS.FIELD06 =  0')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

INS.FIELD07 =  AVOID.ADEC  # 0
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE Mandatory('INS.FIELD07 =  0')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT


INS.FIELD08 =  AVOID.ADEC  # 0  GH 7098
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE Mandatory('INS.FIELD08 =  0')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

INS.FIELD09 =  AVOID.ADEC  # 0
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE Mandatory('INS.FIELD09 =  0')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

INS.FIELD10 =  AVOID.ADEC  # 0
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE Mandatory('INS.FIELD10 =  0')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

INS.FIELD11 =  AVOID.ADATE # [0/0/0]
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE Mandatory('INS.FIELD11 =  0')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

INS.FIELD13 =  AVOID.ACHAR # " "
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE Mandatory('INS.FIELD13 =  ' ')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

INS.FIELD14 =  AVOID.ADATTIM
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE Mandatory('INS.FIELD14 =  ' ')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

INS.FIELD15 =  AVOID.AUUID  # NullUuid
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE Mandatory('INS.FIELD15 =  ' ')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

WNBERR=63
Gosub WRITE_ERRORS

[L]MY_STATUS=[V]CST_AOK



#TEST AUPDATE
INS.FIELD02 =  "AQC062_F2_2"
INS.FIELD03 =  2
INS.FIELD04 =  "AQC062_F4_2"
INS.FIELD05 =  1234567890.123
INS.FIELD06 =  987654321.123
INS.FIELD07 =  3
INS.FIELD08 = 2 # Mandatory MM   GH 7098
INS.FIELD09 =  val("222.22")
INS.FIELD10 =  val("8888")
INS.FIELD11 = [20/06/2015]
INS.FIELD18 = "AABBCCDDE"
INS.CPY="AAA"
WCODBLB = 'titi'
#TODO LATER Gosub IMAGE_SET
INS.FIELD13 = "This is a test of CLOB entry 2222"
INS.FIELD14 = datetime$ # [BRJOU] added
INS.FIELD15 = getUuid
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE('Updating with Mandatory fields')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

[L]MY_STATUS = fmet INS.AREAD("AQC062_F1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Call CHECK_EQUAL(INS.FIELD01, "AQC062_F1") From AXUNIT
Call CHECK_EQUAL(INS.FIELD02, "AQC062_F2_2") From AXUNIT
Call CHECK_EQUAL(INS.FIELD03, 2) From AXUNIT
Call CHECK_EQUAL(INS.FIELD04, "AQC062_F4_2") From AXUNIT
Call CHECK_EQUAL(INS.FIELD07, 3) From AXUNIT
Call CHECK_EQUAL(INS.FIELD08, 2) From AXUNIT # GH 7098
Call CHECK_EQUAL(INS.FIELD09, 222.22) From AXUNIT
Call CHECK_EQUAL(INS.FIELD10, 8888) From AXUNIT
Call CHECK_EQUAL(INS.FIELD11, [20/06/2015]) From AXUNIT
#Call CHECK_EQUAL(INS.FIELDACB, "New Test of Clob entry text") From AXUNIT
Call CHECK_EQUAL(INS.FIELD13, "This is a test of CLOB entry 2222") From AXUNIT
Call CHECK_NOTEQUAL(INS.FIELD15, NullUuid) From AXUNIT
WNBERR=0
Gosub WRITE_ERRORS

#Format tests

# Interrogate data types

INS.CPY= "APN"  #format$("K4:20X", toupper("APN"))  # toupper(WVALUE))  "
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE('CPY datatype lowsdfdsfercase')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
WNBERR=0
Gosub WRITE_ERRORS

INS.FIELD18 = "aabb"
INS.FIELD18 = func FORMATVAL("ZA2", INS.FIELD18)
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE(ZA2 datatype)","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

Local Integer LTIME
LTIME = time : INS.CTIME = format$("N00:2", int(LTIME/3600)) +format$("N00:2", int((LTIME -(int(LTIME/3600) *3600)) /60))
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE('Time format')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

INS.DATEF = format$("D:DDMMYYYY",INS.FIELD11)
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE('Date format DDMMYYYY')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

Call CHECK_NOTEQUAL("AQCQRY06.AREAD('AQC062_F1') (2)","") From AXUNIT
[L]MY_STATUS = fmet INS.AREAD("AQC062_F1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Call CHECK_EQUAL(INS.DATEF, "20062015") From AXUNIT

INS.DATEF = format$("D:YYYYMMDD",INS.FIELD11)
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE('Date format YYYYMMDD')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

INS.LIBEL = format$("N3:13.3",abs(INS.FIELD06))
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE('Amount format 3:13.3')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

INS.FIELD19 = format$("K:80X",mess(3,918,1)+" "+ month$(9)+" : "+
&          num$(INS.FIELD05))
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE('Local menu Text format')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

Local Date WFIELD11 : WFIELD11 = INS.FIELD11
INS.FIELD04 = format$("DD1", INS.FIELD11)
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE('DD1 date format')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

WNBERR=0
Gosub WRITE_ERRORS

Call CHECK_NOTEQUAL("AQCQRY06.AREAD('AQC062_F1') (3)","") From AXUNIT
[L]MY_STATUS = fmet INS.AREAD("AQC062_F1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Call CHECK_EQUAL(INS.DATEF, "20150620") From AXUNIT
Case GACTX.LAN
 When "FRA" :
  Call CHECK_EQUAL(vireblc(INS.LIBEL,4), "987654321.123") From AXUNIT
  Call CHECK_EQUAL(vireblc(INS.FIELD19,4), "TotalSeptembre:1234567890.123") From AXUNIT
  Call CHECK_EQUAL(INS.FIELD04, "20/06") From AXUNIT
 When Default:
  Call CHECK_EQUAL(vireblc(INS.LIBEL,4), "987,654,321.123") From AXUNIT
  Call CHECK_EQUAL(vireblc(INS.FIELD19,4), "TotalSeptember:1234567890.123") From AXUNIT
  Call CHECK_EQUAL(INS.FIELD04, "06/20") From AXUNIT
Endcase


INS.FIELD04 = format$("DD3", INS.FIELD11)
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE('DD3 date format')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

Call CHECK_NOTEQUAL("AQCQRY06.AREAD('AQC062_F1') (4)","") From AXUNIT
[L]MY_STATUS = fmet INS.AREAD("AQC062_F1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Case GACTX.LAN
 When "FRA" :
  Call CHECK_EQUAL(left$(vireblc(INS.FIELD04,4),8), "20Juin15") From AXUNIT
 When Default :
  Call CHECK_EQUAL(left$(vireblc(INS.FIELD04,4),9), "June20,15") From AXUNIT
Endcase

INS.FIELD04 = format$("DD2", INS.FIELD11)
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE('DD2 date format')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

Call CHECK_NOTEQUAL("AQCQRY06.AREAD('AQC062_F1') (5)","") From AXUNIT
[L]MY_STATUS = fmet INS.AREAD("AQC062_F1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Case GACTX.LAN
 When "FRA" :
  Call CHECK_EQUAL(INS.FIELD04, "20/06/15") From AXUNIT
 When "FRA" :
  Call CHECK_EQUAL(INS.FIELD04, "06/20/15") From AXUNIT
Endcase

INS.FIELD04 = format$("DD4", INS.FIELD11)
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE('DD4 date format')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

Call CHECK_NOTEQUAL("AQCQRY06.AREAD('AQC062_F1') (6)","") From AXUNIT
[L]MY_STATUS = fmet INS.AREAD("AQC062_F1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Case GACTX.LAN
 When "FRA" :
  Call CHECK_EQUAL(left$(INS.FIELD04,17), "20 Juin      2015") From AXUNIT
 When Default :
  Call CHECK_EQUAL(left$(INS.FIELD04,17), "June      20,2015") From AXUNIT
Endcase

INS.FIELD04 = format$("DD2", INS.FIELD11)
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE('DD2 date format')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

Call CHECK_NOTEQUAL("AQCQRY06.AREAD('AQC062_F1') (7)","") From AXUNIT
[L]MY_STATUS = fmet INS.AREAD("AQC062_F1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Case GACTX.LAN
 When "FRA" :
Call CHECK_EQUAL(left$(INS.FIELD04,18), "20/06/15") From AXUNIT
When Default :
  Call CHECK_EQUAL(left$(INS.FIELD04,18), "06/20/15") From AXUNIT
Endcase

INS.CPY="apn"
INS.CPY= func FORMATVAL("CPY", INS.CPY)
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE('CPY datatype lowercase')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
WNBERR=2
Gosub WRITE_ERRORS

INS.FIELD16 = "aa11bb22"
INS.FIELD16 = func FORMATVAL("ABR", INS.FIELD16)
Call CHECK_NOTEQUAL("AQCQRY06.AUPDATE('ABR datatype lowercase')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
WNBERR=3
Gosub WRITE_ERRORS

#TEST ADELETE

Call CHECK_NOTEQUAL("AQCQRY06.ADELETE() First","") From AXUNIT
[L]MY_STATUS = fmet INS.ADELETE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
WNBERR=0
Gosub WRITE_ERRORS

Call CHECK_NOTEQUAL("AQCQRY06.AREAD('AQC06_F1')","") From AXUNIT
[L]MY_STATUS = fmet INS.AREAD("AQC06_F1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT :#NOT FOUND

#Try to delete twice
Call CHECK_NOTEQUAL("AQCQRY06.ADELETE() Twice","") From AXUNIT
[L]MY_STATUS = fmet INS.ADELETE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

FreeGroup INS

#If freeheap>3000000
#  # We have enough memory
#Else
#  # Let's enhance maxmem to get more memory
#  maxheap+=2000000
#Endif
#Infbox "Freeheap 2: " + num$(freeheap)
#Infbox "Freemem 2: " + num$(freemem)
End

#**
#* AQCQRY06_CONTROLS
#*
#*!
Subprog AQCQRY06_CONTROLS()
Local Integer MY_STATUS, WLIN, WNBERR
Local Instance INS Using C_AQCQRY06
INS = NewInstance C_AQCQRY06 AllocGroup null

# Create a simple instance
[L]MY_STATUS = fmet INS.AINIT()

#Try to insert with no key
Call CHECK_NOTEQUAL("AQCQRY06.AINSERT('')","") From AXUNIT
[L]MY_STATUS = fmet INS.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
WNBERR=10
Gosub WRITE_ERRORS

#Try to insert a record whose access code isn't defined
INS.FIELD01 =  "AQC02_F1"
INS.FIELD02 =  "AQC02_F2"
INS.FIELD03 =  2
INS.ACCESS ="01234567890123456789"
[L]MY_STATUS = fmet INS.AINSERT()
Call CHECK_EQUAL(INS.ACCESS, "0123456789") From AXUNIT # truncates value and returns status 4 since not a valid access code

#TODO Control OTHERS on reference Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

FreeGroup INS
#If freeheap>3000000
#  # We have enough memory
#Else
#  # Let's enhance maxmem to get more memory
#  maxheap+=3000000
#Endif
End


# Blob read
$IMAGE_SET
If WIMAGE
  If INS.ACTX.AFOLDER="" | INS.ACTX.AFOLDER=nomap
    Local File ABLOB [ABB]
  Else
    Local File =this.ACTX.AFOLDER+".ABLOB" [ABB]
  Endif
Else
[F:ABB]CODBLB = WCODBLB
[F:ABB]IDENT1 = ''
[F:ABB]IDENT2 = ''
[F:ABB]IDENT3 = ''
Read [ABB] =
If !fstat
 INS.PHOTO = [F:ABB]BLOB
Endif
Endif

Return

# Format set
Funprog FORMATVAL(WFIELD, WVALUE)
Value Char WFIELD
Value Char WVALUE
  Local Char WSTR(250)
  Case WFIELD
    When "ABR"     : WSTR = format$("K4:20X" ,tolower(WVALUE))
    When "C"       : WSTR = format$("N:8.2", (WVALUE))
    When "CPY"     : WSTR = format$("K4:20X", tolower(WVALUE))
    When "ZA2"     : WSTR = format$("K:4A"  , toupper(WVALUE))
    When "NEG"     : WSTR = format$("ND-:5.2", (WVALUE))
  Endcase
End WSTR

#**
#* Write errors to log
#*!
$WRITE_ERRORS
If dim(WNBERR)>0
Call CHECK_NOTEQUAL(num$(WNBERR)-"errors to ckeck","") From AXUNIT
Endif
Local Integer I,WCOUNT
Local Char WMES(20)
For I=1 To maxtab(INS.AERROR)
 If  INS.AERROR(I)<>null & INS.AERROR(I).STA=[V]CST_AERROR & INS.AERROR(I).DEL<>2
   #Call LOG_LINE(INS.AERROR(I).PRO-":"-INS.AERROR(I).MES) From AXUNIT
   WCOUNT+=1
   WMES="Error"
   If dim(WNBERR)>0
    WMES-=num$(WCOUNT)
   Endif
   WMES-=" -->"
   Call CHECK_NOTEQUAL(WMES-INS.AERROR(I).PRO-":"-INS.AERROR(I).MES,"") From AXUNIT
 Endif
Next I
If dim(WNBERR)>0
   Call CHECK_EQUAL(WCOUNT,WNBERR) From AXUNIT
Endif
Callmet INS.ADELETEERROR(CST_ALLERRORS)
Return
