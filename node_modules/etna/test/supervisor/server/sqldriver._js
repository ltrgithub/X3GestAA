"use strict";

var globals = require('streamline/lib/globals');

var ez = require('ez-streams');
var flows = require("streamline/lib/util/flows");

var util = require("etna/lib/supervisor/util");
var bcd = require('etna/lib/engine/runtime/bcd');
var tuuid = require('etna/lib/engine/runtime/tuuid');
var tdatetime = require('etna/lib/engine/runtime/tdatetime');
var tdate = require('etna/lib/engine/runtime/tdate');
var BCD = require('etna/lib/engine/runtime/tbcd').BCD;
var tbcd = require('etna/lib/engine/runtime/tbcd');
var config = require("etna/lib/util/nodeconfig").config;
var drvutil = require("etna/lib/engine/drivers/util");

var supervisor = require("etna/lib/supervisor/supervisor");

var helper = require("etna/test/engine/fixtures/helper");

var tracer; // = console.log;

QUnit.module(module.id);

function sqlInsert(_, driver, cnx, table, value) {
	//console.log("sqlInsert "+JSON.stringify(value));

	// Add mandatory fields :
	var dtm0 = new Date();
	var dtm1 = new Date();
	dtm0.setMilliseconds(0);
	dtm1.setMilliseconds(0);
	value.CREDATTIM = tdatetime.fromJsDate(dtm0);
	value.UPDDATTIM = tdatetime.fromJsDate(dtm1);

	value.CREUSR = "JUNIT";
	value.UPDUSR = "JUNIT";
	value.AUUID = tuuid.generate();

	var columns = Object.keys(value).reduce(function(previousValue, currentValue, index, array) {
		previousValue.push(array[index] + "_0");
		return previousValue;
	}, []);

	//DBG:ok(true,"columns:"+JSON.stringify(columns));

	var sql = "insert into " + driver.escape(table) + " (" + columns.join(',') + ") values (" + Object.keys(columns).map(function(column) {
		return driver.param(parseInt(column));
	}).join(',') + ")";
	//DBG:ok(true,"insert:"+sql);

	var values = Object.keys(value).reduce(function(previousValue, currentValue, index, array) {
		previousValue.push(value[array[index]]);
		return previousValue;
	}, []);
	//DBG:ok(true,"values:"+JSON.stringify(values));
	//setTimeout(_, 5000);

	var prm = drvutil.toSql(values, driver);

	driver.execute(_, cnx, sql, prm);
}

function randomDCB(integer, decimals) {
	var v = ((Math.random() > 0.5) ? 1 : -1) * Math.floor((Math.pow(10, integer + decimals) - 1) * Math.random()) / Math.pow(10, decimals);
	return new BCD(bcd.fromString(v + ""));
}

var sqlDriver;

function testConnect(_) {
	try {
		var config = require("etna/lib/util/nodeconfig").config;
		var etnaConfig = helper.getEtnaConfigForUnitTest(_, config.unit_test.etnaEndPoint);

		ok(true, "driver:"+etnaConfig.sql.driver);
		sqlDriver = require('etna/lib/engine/drivers/' + etnaConfig.sql.driver)(etnaConfig.sql);
		sqlDriver.withConnection(_, function(_, cnx) {
			ok(true, "Connected");
			var array = sqlDriver.reader(_, cnx, "select CONTROLFILE_TYPE from v$database").toArray(_)[0];
			ok(array.length !== 0, "read ok");
	
		});
	} catch (e) {
		console.log(e);
		ok(false, "Connection failed:" + JSON.stringify(e));
	}
	start();
}

function testAQCDBTYPES(_) {
	try {
		sqlDriver.withConnection(_, function(_, cnx) {
			try {

				sqlDriver.execute(_, cnx, "delete from AQCDBTYPES");

				var array = sqlDriver.reader(_, cnx, "select * from AQCDBTYPES", []).toArray(_);
				strictEqual(array.length, 0, "array.length:" + array.length);

				var rows = 0;
				var maxRows = 2;
				var now = new Date();
				var values = [];
				var a250 = "";
				for (var i = 1; i <= 246; i++) {
					a250 += String.fromCharCode(32 + (i % 94));
				}
				a250 += "àçéè";

				for (var i = 1; i <= maxRows; i++) {
					//var day = tdate.fromJsDate(  Date.UTC(now.getFullYear(), now.getMonth(), now.getDate()));
					var day = tdate.make(now.getFullYear(), now.getMonth() + 1, now.getDate());

					//day.setDate(day.getDate() - ((i - 1) % 10));

					var value = {
						IDX: i,
						C5: Math.floor(Math.pow(2, 16) * Math.random()) - Math.pow(2, 15), // random value in the range [-32768, +32767]
						A10: "A" + i,
						A250: "A" + i, //TODO
						DTM: day,
						L8: Math.floor(Math.pow(2, 32) * Math.random()) - Math.pow(2, 31), //random value in the range [-2^31, +2^31].
						//DCB9_2: randomDCB(9, 2)
						DCB9_2: tbcd.fromString("1.234")
					};
					console.log('insert:\n' + JSON.stringify(value));

					sqlInsert(_, sqlDriver, cnx, "AQCDBTYPES", value);
					values.push(value);
					rows += 1;
				}
				strictEqual(rows, maxRows, "inserted rows:" + rows);

				var ftrim = drvutil.maptrim(sqlDriver, [2, 2, 7, 7, 8, 3, 4, 12, 12, 7, 7, 11]);


				array = sqlDriver.reader(_, cnx, "select IDX_0, C5_0, A10_0, A250_0, DTM_0, L8_0, DCB9_2_0,CREDATTIM_0,UPDDATTIM_0,CREUSR_0,UPDUSR_0,AUUID_0 from AQCDBTYPES order by IDX_0", []).toArray(_);
				/*var row = array[0] ;
				row = ftrim(row) ;*/

				[0, maxRows - 1].forEach_(_, function(_, i) {
					var row = array[i];
					row = ftrim(_, row);
					console.log("read:\n" + JSON.stringify(row));
					Object.keys(values[i]).forEach(function(key) {
						var cmp = values[i][key].x3Compare(row[key]);
						strictEqual(cmp, 0, "Value of [" + i + "]." + key + "=" + row[key].x3ToString());
					});
					console.log("done");
				});
			} catch (e) {
				console.error(e.stack);
				ok(false, "exception:" + e);
			}
		});
	} catch (e) {
		ok(false, "Connection failed:" + JSON.stringify(e));
	}
	start();
};

asyncTest("Connection ", testConnect);
asyncTest("AQCDBTYPES ", testAQCDBTYPES);
asyncTest("scm ", function(_) {
	const max = 10;
	let connections=0;
	for(var i=0;i<max;i++) {
		var etnaConfig = helper.getEtnaConfigForUnitTest(_, config.unit_test.etnaEndPoint);
		var superv = supervisor.create(_, etnaConfig);
		try {
			superv.sqlDriver.withConnection(_, function(_, cnx) {
				superv.sqlDriver.reader(_, cnx, "select CONTROLFILE_TYPE from v$database").toArray(_)[0];
			});
			connections++;
		} catch (err) {
		}
		superv.release(_);
	}
	ok(max===connections,connections+" connections ok");
	start();
});
