
Local Clbfile RESULT
RESULT =  func TESTSUITE()
GTRACE = "QLFAC_AQCINDEX_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

Funprog TESTSUITE()

Call TESTSUITE_START("AQCINDEX", "Test indices") From AXUNIT

Call ADD_TESTCASE("AQCINDEX_OPEN","Local File Open with descending index",1) From AXUNIT
Call ADD_TESTCASE("AQCINDEX_CREATE","Create instance",2) From AXUNIT
Call ADD_TESTCASE("AQCINDEX_READ","Read instance",1) From AXUNIT
Call ADD_TESTCASE("AQCINDEX_UPDATE","Update instance",2) From AXUNIT
Call ADD_TESTCASE("AQCINDEX_DELETE","Delete instance",2) From AXUNIT

Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("AQCINDEX", "Indices")

End SUITE_RESULT

Subprog SETUP()
Local File AQCINDEX [AQCIND]
Trbegin [AQCIND]
  Delete [AQCIND] Where CRY="US"
Commit
Close Local File [AQCIND]
End

Subprog AQCINDEX_OPEN()
Local Integer EX

Onerrgo OPEN_ERROR
Local File AQCINDEX [AQCIND1]
If !EX
  Call CHECK_NOTEQUAL("Open successful","") From AXUNIT
Endif
Onerrgo
End

Subprog AQCINDEX_CREATE()
Local Integer EX
Local Integer MY_STATUS
Local Instance MY_INSTANCE Using C_AQCINDEX
MY_INSTANCE = NewInstance C_AQCINDEX AllocGroup null

[L]MY_STATUS = fmet MY_INSTANCE.AINIT()
Call CHECK_EQUAL("Initialize"-num$([L]MY_STATUS),"Initialize"-num$([V]CST_AOK)) From AXUNIT

MY_INSTANCE.CRY = "US"
MY_INSTANCE.TCU = "USD"
MY_INSTANCE.MYKEY2 = "1"

[L]MY_STATUS = fmet MY_INSTANCE.AINSERT()
Call CHECK_EQUAL("Insert"-num$([L]MY_STATUS),"Insert"-num$([V]CST_AOK)) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup MY_INSTANCE
End


Subprog AQCINDEX_READ()
Local Integer EX
Local Integer MY_STATUS
Local Instance MY_INSTANCE Using C_AQCINDEX
MY_INSTANCE = NewInstance C_AQCINDEX AllocGroup null
# index=CRY-TCU
[L]MY_STATUS = fmet MY_INSTANCE.AREAD("US","USD")
Call CHECK_EQUAL("Read 'US~USD'"-num$([L]MY_STATUS),"Read 'US~USD'"-num$([V]CST_AOK)) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup MY_INSTANCE
End

Subprog AQCINDEX_UPDATE()
Local Integer EX
Local Integer MY_STATUS
Local Instance MY_INSTANCE Using C_AQCINDEX
MY_INSTANCE = NewInstance C_AQCINDEX AllocGroup null

[L]MY_STATUS = fmet MY_INSTANCE.AREAD("US","USD")
Call CHECK_EQUAL("Read for update"-num$([L]MY_STATUS),"Read for update"-num$([V]CST_AOK)) From AXUNIT

MY_INSTANCE.DCB = 1234.123

[L]MY_STATUS = fmet MY_INSTANCE.AUPDATE()
Call CHECK_EQUAL("Update"-num$([L]MY_STATUS),"Update"-num$([V]CST_AOK)) From AXUNIT
Gosub WRITE_ERRORS

FreeGroup MY_INSTANCE
End

Subprog AQCINDEX_DELETE()
Local Integer EX
Local Integer MY_STATUS
Local Instance MY_INSTANCE Using C_AQCINDEX
MY_INSTANCE = NewInstance C_AQCINDEX AllocGroup null

[L]MY_STATUS = fmet MY_INSTANCE.AREAD("US","USD")
Call CHECK_EQUAL("Read for delete"-num$([L]MY_STATUS),"Read for delete"-num$([V]CST_AOK)) From AXUNIT
Gosub WRITE_ERRORS

[L]MY_STATUS = fmet MY_INSTANCE.ADELETE()
Call CHECK_EQUAL("Delete"-num$([L]MY_STATUS),"Delete"-num$([V]CST_AOK)) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup MY_INSTANCE
End



$OPEN_ERROR
EX=-1
Call CHECK_EQUAL("Open Failed"-num$(errn)-num$(errm),"") From AXUNIT
Resume
#**
#* Write errors to log
#*!
$WRITE_ERRORS
Local Integer I
For I=1 To maxtab(MY_INSTANCE.AERROR)
 If  MY_INSTANCE.AERROR(I)<>null  & MY_INSTANCE.AERROR(I).DEL<>2
   Call CHECK_NOTEQUAL(MY_INSTANCE.AERROR(I).PRO-":"-MY_INSTANCE.AERROR(I).MES,"") From AXUNIT
 Endif
Next I
Return

