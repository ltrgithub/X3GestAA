"use strict";

const helper = require("etna/test/engine/fixtures/helper");
const date = require('syracuse-core').types.date;
const config = require('config');

QUnit.module(module.id, {});

function nop() {}

if (typeof Proxy !== "undefined" && config.unit_test && config.unit_test.etnaEndPoint) {
	var ROOT;

	asyncTest("connect ", 1, (_) => {
		const etnaConfig = helper.getEtnaConfigForUnitTest(_, config.unit_test.etnaEndPoint);
		ok(etnaConfig != null, "test endpoint exists");
		const supervisor = require('etna/lib/supervisor/supervisor').create(_, etnaConfig);
		require("etna/lib/engine/runtime/variables").initStack(supervisor);
		require("etna/lib/supervisor/builtins/ACTX").init(_, etnaConfig.session, supervisor);
		ROOT = require('etna/lib/supervisor/proxies/dataset').create(_, supervisor);
		//tracerJs.debug && tracerJs.debug(JSON.stringify(config.session));

		start();
	});

	asyncTest("query new style", 1, (_) => {
		const Banks = ROOT.classes.Banks(_);
		var count = 0;
		Banks.query(_)
		.filter({ bank: /3/ })
		.forEach(_, (_, b) => {
			console.error(count, b.bank(_), b.validFrom(_));
			count++;
		});
		ok(count > 2, "query worked");
		start();
	});

	asyncTest("query old style", 1, (_) => {
		const ABANK = ROOT.classes.ABANK(_);
		var count = 0;
		ABANK.query(_)
		.filter({ BAN: /3/ })
		.forEach(_, (_, b) => {
			console.error(count, b.BAN(_), b.VLYSTR(_));
			count++;
		});
		ok(count > 2, "query worked");
		start();
	});

	asyncTest("basic create new style", 2, (_) => {
		const Banks = ROOT.classes.Banks(_);
		var bank = Banks.create(_, {
			country: "FR",
			bank: "ZABA2",
		});
		ok(bank != null, "Banks instance exists");
		console.error("KEYS", Object.getOwnPropertyNames(bank));
		bank.validFrom(_, date.today());
		strictEqual(bank.bank(_), "ZABA2", "verifying bank property");
		start();
	});

	asyncTest("basic create old style", 2, (_) => {
		const ABANK = ROOT.classes.ABANK(_);
		var bank = ABANK.create(_, {
			CRY: "FR",
			BAN: "ZABA2",
		});
		ok(bank != null, "Banks instance exists");
		console.error("KEYS", Object.getOwnPropertyNames(bank));
		bank.VLYSTR(_, date.today());
		strictEqual(bank.BAN(_), "ZABA2", "verifying bank property");
		start();
	});
} else if (typeof Proxy === "undefined") {
	test("TEST SKIPPED: Proxies are not available. Start node.js with --harmony-proxies option", 0, nop);
} else {
	test("TEST SKIPPED: ETNA endpoint is not configured", 0, nop);
}