#<AdxTL>@(#)0.0.0.0 $Revision$

# Qualification ABANK

Local Integer MY_STATUS
Local Instance MY_LOG Using C_ALOG
MY_LOG = NewInstance C_ALOG AllocGroup null
[L]MY_STATUS = fmet MY_LOG.ASETNAME("QLFAC_ABANK_"+GACTX.USER)
[L]MY_STATUS = fmet MY_LOG.ABEGINLOG("QLFAC_ABANK")

Local Clbfile RESULT
RESULT =  func TESTSUITE()
FreeGroup MY_LOG
End

#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!c
Subprog SETUP
# Database cleaning
Local File ABANK [ABN]
Onerrgo ERROR_SETUP_NOTFOUND
Trbegin [ABN]
Delete [ABN] Where BAN = "ZABA1"
Commit
Onerrgo
Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT
End

$ERROR_SETUP_NOTFOUND
Resume

#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

Call TESTSUITE_START("ABANK", "Test suite for Class ABANK") From AXUNIT

Call ADD_TESTCASE("ABANK_CREATION","Creation of ABANK ZABA1",2) From AXUNIT
Call ADD_TESTCASE("ABANK_READ","Read ABANK ZABA1",1) From AXUNIT
Call ADD_TESTCASE("ABANK_UPDATE","Update ABANK ZABA1",2) From AXUNIT
Call ADD_TESTCASE("ABANK_DELETE","Deletion of ABANK ZABA1",2) From AXUNIT

Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("ABANK", "SYRA_ABANK")

End SUITE_RESULT

#**
#* Creation of a unit
#* Properties of Class ABANK
#*
#*!
Subprog ABANK_CREATION()
Local Integer MY_STATUS
Local Instance QLFABN Using C_ABANK
QLFABN = NewInstance C_ABANK AllocGroup null

# Initialize Instance
[L]MY_STATUS = fmet QLFABN.AINIT()

QLFABN.CRY = "US"
QLFABN.BAN = AVOID.ACHAR          # Invalid

# Expect error mandatory fields not supplied.
[L]MY_STATUS = fmet QLFABN.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup QLFABN

QLFABN = NewInstance C_ABANK AllocGroup null
# Load mandatory values
QLFABN.CRY = "FR"
QLFABN.BAN = "ZABA1"

# Expect OK
[L]MY_STATUS = fmet QLFABN.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup QLFABN

End


#**
#* Read a ABANK
#*!
Subprog ABANK_READ()
Local Integer MY_STATUS
Local Instance QLFABN Using C_ABANK
QLFABN = NewInstance C_ABANK AllocGroup null

[L]MY_STATUS = fmet QLFABN.AREAD("FR","ZABA1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS

FreeGroup QLFABN
End

#**
#* Update a ABANK
#*!
Subprog ABANK_UPDATE()
Local Integer MY_STATUS
Local Instance QLFABN Using C_ABANK
QLFABN = NewInstance C_ABANK AllocGroup null

[L]MY_STATUS = fmet QLFABN.AREAD("FR","ZABA1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS

QLFABN.PAB= "12345"

[L]MY_STATUS = fmet QLFABN.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS

FreeGroup QLFABN
End

#**
#* Delete a ABANK
#*!
Subprog ABANK_DELETE()
Local Integer MY_STATUS

Local Instance QLFABN Using C_ABANK
QLFABN = NewInstance C_ABANK AllocGroup null

[L]MY_STATUS = fmet QLFABN.AREAD("FR","ZABA1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS

[L]MY_STATUS = fmet QLFABN.ADELETE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS

FreeGroup QLFABN
End


#**
#* Write errors to log
#*!
$WRITE_ERRORS
Local Integer I
For I=1 To maxtab(QLFABN.AERROR)
 If  QLFABN.AERROR(I)<>null & QLFABN.AERROR(I).STA=[V]CST_AERROR & QLFABN.AERROR(I).DEL<>2
   Call LOG_LINE(QLFABN.AERROR(I).PRO-":"-QLFABN.AERROR(I).MES) From AXUNIT
 Endif
Next I
Return
