Local Instance MY_LOG Using C_ALOG
Local Clbfile RESULT
RESULT =  func TESTSUITE()
#GTRACE = "QLFAC_AQCPROC03_"+GACTX.USER
Call LEC_TRACE From LECFIC
End


#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!
Subprog SETUP

# Database cleaning
Local File AQCPROC03 [AQCP03]

Onerrgo ERROR_SETUP_NOTFOUND
Trbegin [AQCP03]
  Delete [AQCP03]CODE = "TEST1"
  Delete [AQCP03]CODE = "TEST2"
Commit
Onerrgo
Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT

Close Local File [AQCP03]

# Create a simple instance
Local Instance REF Using C_AQCPROR01
REF = NewInstance C_AQCPROR01 AllocGroup null

[L]MY_STATUS = fmet REF.AREAD("R01P01_00")
if([L]MY_STATUS = [V]CST_AERROR) 
  [L]MY_STATUS = fmet REF.AINIT()
  REF.R01P01 = "R01P01_00"
  REF.INTDES = "INT_DES1_00"
  REF.INTSHO =  "INT_SHO1_00"
  [L]MY_STATUS = fmet REF.AINSERT()
Endif

End

$ERROR_SETUP_NOTFOUND
Resume

#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

  # Start the test suite
  Call TESTSUITE_START("AQCPROC03", "Sizing elements") From AXUNIT

  Call ADD_TESTCASE("AQCPROC03_INSERT_VALID", "Insert valid record TEST1", 13) From AXUNIT
  Call ADD_TESTCASE("AQCPROC03_AREAD", "Read AQCPROC03 record TEST1", 1) From AXUNIT
  Call ADD_TESTCASE("AQCPROC03_AUPDATE", "Update AQCPROC03 record TEST1", 3) From AXUNIT
  Call ADD_TESTCASE("AQCPROC03_ADELETE", "Delete AQCPROC03 record TEST1", 4) From AXUNIT

  # Run the test and return the result
  Local Clbfile RESULT_SUITE
  RESULT_SUITE=func AXUNIT.RUN_TESTSUITE("AQCPROC03","AQCPROC03 test")

End RESULT_SUITE


#**
#* Write errors to log
#*!
$WRITE_ERRORS
Local Integer I
Local Char RPROP(255)
Local Integer RSTATUS
Local Char RPROP_LAB(255)
Local Char RERR_MESS(255)
Local Integer RCATEGORY
Local Char RENVIRONMENT(255)

If pat(ver$(0),"etna*")>0
  MY_STATUS = fmet MY_INSTANCE.ASEARCHINFOS( [V]CST_ALL, "", [V]CST_AFATAL, 0)
  while MY_STATUS = [V]CST_AOK
    MY_STATUS = fmet MY_INSTANCE.AGETNEXTINFOS( RSTATUS, RPROP, RPROP_LAB, RERR_MESS, RCATEGORY, RENVIRONMENT)
    if MY_STATUS = [V]CST_AOK
      Call CHECK_NOTEQUAL(RPROP-":"-RERR_MESS,"") From AXUNIT
    Endif
  Wend

Else
  For I=1 To maxtab(MY_INSTANCE.AERROR)
   If  MY_INSTANCE.AERROR(I)<>null & MY_INSTANCE.AERROR(I).DEL<>2
     Call CHECK_EQUAL(MY_INSTANCE.AERROR(I).PRO-":"-MY_INSTANCE.AERROR(I).MES,MY_INSTANCE.AERROR(I).PRO-":"-MY_INSTANCE.AERROR(I).MES) From AXUNIT
   Endif
  Next I
  If MY_INSTANCE.COL<>null
    For I=1 To maxtab(MY_INSTANCE.COL.AERROR)
     If  MY_INSTANCE.COL.AERROR(I)<>null & MY_INSTANCE.COL.AERROR(I).DEL<>2
       Call CHECK_EQUAL(MY_INSTANCE.COL.AERROR(I).PRO-":"-MY_INSTANCE.COL.AERROR(I).MES,MY_INSTANCE.COL.AERROR(I).PRO-":"-MY_INSTANCE.COL.AERROR(I).MES) From AXUNIT
     Endif
    Next I
  Endif
Endif
[L]MY_STATUS = fmet MY_INSTANCE.ADELETEERROR([V]CST_ALLERRORS)
Return

####################################################################################################

Subprog AQCPROC03_INSERT_VALID()
  Local Integer MY_STATUS,LINE
  Local Instance MY_INSTANCE Using C_AQCPROC03

  MY_INSTANCE = NewInstance C_AQCPROC03 AllocGroup null
  # Initialize Instance
  [L]MY_STATUS = fmet MY_INSTANCE.AINIT()
  Call CHECK_EQUAL("Initialize"-num$([L]MY_STATUS),"Initialize"-num$([V]CST_AOK)) From AXUNIT
  Gosub WRITE_ERRORS

  # Create a valid record
  MY_INSTANCE.C03P01 = "TEST1"
  LINE = fmet MY_INSTANCE.ADDLINE("COL",[V]CST_ALASTPOS)
  [L]MY_STATUS = fmet MY_INSTANCE.COL.AINIT()
  Call CHECK_EQUAL("Initialize array"-num$([L]MY_STATUS),"Initialize array"-num$([V]CST_AOK)) From AXUNIT

  MY_INSTANCE.COL(LINE).C03P03="R01P01_00"

  [L]MY_STATUS = fmet MY_INSTANCE.AINSERT()
  Call CHECK_EQUAL("Valid AQCPROC03 record"-num$([L]MY_STATUS),"Valid AQCPROC03 record"-num$([V]CST_AOK)) From AXUNIT
  Gosub WRITE_ERRORS
  FreeGroup MY_INSTANCE
  MY_INSTANCE = null

  MY_INSTANCE = NewInstance C_AQCPROC03 AllocGroup null
  # Initialize Instance
  [L]MY_STATUS = fmet MY_INSTANCE.AINIT()
  Call CHECK_EQUAL("Initialize"-num$([L]MY_STATUS),"Initialize"-num$([V]CST_AOK)) From AXUNIT
  Gosub WRITE_ERRORS

  # Missing mandatory - nvalid record
  MY_INSTANCE.C03P01 = "TEST1"
  LINE = fmet MY_INSTANCE.ADDLINE("COL",[V]CST_ALASTPOS)
  [L]MY_STATUS = fmet MY_INSTANCE.COL.AINIT()
  Call CHECK_EQUAL("Initialize array"-num$([L]MY_STATUS),"Initialize array"-num$([V]CST_AOK)) From AXUNIT
  [L]MY_STATUS = fmet MY_INSTANCE.COL(LINE).ASETATTRIBUTE("DESCRIPTION","$isMandatory","true")
  MY_INSTANCE.COL(LINE).C03P03="R01P01_00"

  [L]MY_STATUS = fmet MY_INSTANCE.AINSERT()
  Call CHECK_EQUAL("Missing mandatory value Invalid AQCPROC03 record"-num$([L]MY_STATUS),"Missing mandatory value Invalid AQCPROC03 record"-num$([V]CST_AERROR)) From AXUNIT
  Gosub WRITE_ERRORS
  FreeGroup MY_INSTANCE
  MY_INSTANCE = null

  # Create an valid record - reference missing
  MY_INSTANCE = NewInstance C_AQCPROC03 AllocGroup null
  # Initialize Instance
  [L]MY_STATUS = fmet MY_INSTANCE.AINIT()
  Call CHECK_EQUAL("Initialize"-num$([L]MY_STATUS),"Initialize"-num$([V]CST_AOK)) From AXUNIT
  Gosub WRITE_ERRORS

  # Create an invalid record - reference missing
  MY_INSTANCE.C03P01 = "TEST1"
  LINE = fmet MY_INSTANCE.ADDLINE("COL",[V]CST_ALASTPOS)
  [L]MY_STATUS = fmet MY_INSTANCE.COL.AINIT()
  Call CHECK_EQUAL("Initialize array"-num$([L]MY_STATUS),"Initialize array"-num$([V]CST_AOK)) From AXUNIT
  MY_INSTANCE.COL(LINE).C03P03="Test line"
  
  [L]MY_STATUS = fmet MY_INSTANCE.AINSERT()
  Call CHECK_EQUAL("Invalid AQCPROC03 record"-num$([L]MY_STATUS),"Invalid AQCPROC03 record"-num$([V]CST_AERROR)) From AXUNIT
  Gosub WRITE_ERRORS
  FreeGroup MY_INSTANCE
  MY_INSTANCE = null

  MY_INSTANCE = NewInstance C_AQCPROC03 AllocGroup null
  # Initialize Instance
  [L]MY_STATUS = fmet MY_INSTANCE.AINIT()
  Call CHECK_EQUAL("Initialize"-num$([L]MY_STATUS),"Initialize"-num$([V]CST_AOK)) From AXUNIT
  Gosub WRITE_ERRORS

  # valid record
  MY_INSTANCE.C03P01 = "TEST2"
  MY_INSTANCE.AQCDESCR = "Test instance description"
  LINE = fmet MY_INSTANCE.ADDLINE("COL",[V]CST_ALASTPOS)
  [L]MY_STATUS = fmet MY_INSTANCE.COL.AINIT()
  # add line 2
  LINE = fmet MY_INSTANCE.ADDLINE("COL",[V]CST_ALASTPOS)
  [L]MY_STATUS = fmet MY_INSTANCE.COL.AINIT()
  Call CHECK_EQUAL("Initialize array"-num$([L]MY_STATUS),"Initialize array"-num$([V]CST_AOK)) From AXUNIT
  [L]MY_STATUS = fmet MY_INSTANCE.COL(LINE).ASETATTRIBUTE("DESCRIPTION","$isMandatory","true")
  MY_INSTANCE.COL(LINE).C03P02=2
  MY_INSTANCE.COL(LINE).C03P03="R01P01_00"
  MY_INSTANCE.COL(LINE).DESCRIPTION ="Test mandatory description"
  Gosub WRITE_ERRORS

  [L]MY_STATUS = fmet MY_INSTANCE.AINSERT()
  Call CHECK_EQUAL("Valid AQCPROC03 record"-num$([L]MY_STATUS),"Valid AQCPROC03 record"-num$([V]CST_AOK)) From AXUNIT
  Gosub WRITE_ERRORS
  FreeGroup MY_INSTANCE
  MY_INSTANCE = null

End

####################################################################################################

Subprog AQCPROC03_AREAD()
  Call VERIFY_RECORD("TEST2")
End

Subprog VERIFY_RECORD(CODE)
  Value Char CODE

  # Read record and validate it's contents against a direct read of the table.
  Local Integer MY_STATUS
  Local Instance MY_INSTANCE Using C_AQCPROC03

  MY_INSTANCE = NewInstance C_AQCPROC03 AllocGroup null

  [L]MY_STATUS = fmet MY_INSTANCE.AREAD(CODE)
  Call LOG_LINE("Read record "+CODE) From AXUNIT
  Call CHECK_EQUAL("Read record "+CODE-num$([L]MY_STATUS),"Read record "+CODE-num$([V]CST_AOK)) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup MY_INSTANCE
  MY_INSTANCE = null
End

####################################################################################################

Subprog AQCPROC03_AUPDATE
  # Test updating a record.
  Local Integer MY_STATUS,LINE
  Local Instance MY_INSTANCE Using C_AQCPROC03

  MY_INSTANCE = NewInstance C_AQCPROC03 AllocGroup null

  [L]MY_STATUS = fmet MY_INSTANCE.AREAD("TEST1")
  Call CHECK_EQUAL("Read record TEST1"-num$([L]MY_STATUS),"Read record TEST1"-num$([V]CST_AOK)) From AXUNIT
  Gosub WRITE_ERRORS

  MY_INSTANCE.COL(1).C03P02=10

  [L]MY_STATUS = fmet MY_INSTANCE.AUPDATE()
  Call CHECK_EQUAL("Update"-num$([L]MY_STATUS),"Update"-num$([V]CST_AOK)) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup MY_INSTANCE
  MY_INSTANCE = null

  #Re-read updated record to ensure fields were properly updated
  Call VERIFY_RECORD("TEST1")
End

####################################################################################################

Subprog AQCPROC03_ADELETE()
  Local Integer MY_STATUS
  Local Instance MY_INSTANCE Using C_AQCPROC03

  MY_INSTANCE = NewInstance C_AQCPROC03 AllocGroup null

  [L]MY_STATUS = fmet MY_INSTANCE.AREAD("TEST1")
  Call CHECK_EQUAL("Read record TEST1"-num$([L]MY_STATUS),"Read record TEST1"-num$([V]CST_AOK)) From AXUNIT
  Gosub WRITE_ERRORS

  [L]MY_STATUS = fmet MY_INSTANCE.ADELETE()
  Call CHECK_EQUAL("Delete record TEST1"-num$([L]MY_STATUS),"Delete record TEST1"-num$([V]CST_AOK)) From AXUNIT
  Gosub WRITE_ERRORS

  [L]MY_STATUS = fmet MY_INSTANCE.AREAD("TEST1")
  Call CHECK_EQUAL("Try to read record TEST1"-num$([L]MY_STATUS),"Try to read record TEST1"-num$([V]CST_AERROR)) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup MY_INSTANCE
  MY_INSTANCE = null
End

