# Unit test QLFAC_TABCOUNTRY
Local Integer ASTATUS
Local Instance MY_LOG Using C_ALOG
MY_LOG = NewInstance C_ALOG AllocGroup null
[L]ASTATUS = fmet MY_LOG.ASETNAME("QLFAC_TABCOUNTRY_"+GACTX.USER)
[L]ASTATUS = fmet MY_LOG.ABEGINLOG("QLFAC_TABCOUNTRY")

Local Clbfile RESULT
RESULT =  func TESTSUITE()
FreeGroup MY_LOG
GTRACE = "QLFAC_TABCOUNTRY_"+GACTX.USER
Call LEC_TRACE From LECFIC
End


#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!
Subprog SETUP
# Database cleaning
Local File TABCOUNTRY [TCY]
Onerrgo ERROR_SETUP_NOTFOUND
Trbegin [TCY]
Delete [TCY]TCY0 = "ZTC"
Commit
Onerrgo
Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT
End

$ERROR_SETUP_NOTFOUND
Resume
#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

Call TESTSUITE_START("TABCOUNTRY", "Test suite for Class TABCOUNTRY") From AXUNIT

Call ADD_TESTCASE("TABCOUNTRY_CREATION","Creation of TABCOUNTRY ZTC",8) From AXUNIT
Call ADD_TESTCASE("TABCOUNTRY_READ","Read TABCOUNTRY ZTC",1) From AXUNIT
Call ADD_TESTCASE("TABCOUNTRY_UPDATE","Update TABCOUNTRY ZTC",2) From AXUNIT
Call ADD_TESTCASE("TABCOUNTRY_DELETE","Deletion of TABCOUNTRY ZTC",2) From AXUNIT

Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("TABCOUNTRY", "QLFAC_TABCOUNTRY")

End SUITE_RESULT

#**
#* Creation of a TABCOUNTRY
#*
#*!
Subprog TABCOUNTRY_CREATION()
Local Integer ASTATUS
Local Integer ILINE

Local Instance QLFTCY Using C_TABCOUNTRY
QLFTCY = NewInstance C_TABCOUNTRY AllocGroup null

[L]ASTATUS = fmet QLFTCY.AINIT()
Call CHECK_EQUAL("AINIT"-num$([L]ASTATUS),"AINIT"-num$([V]CST_AOK)) From AXUNIT

# Invalid Country
QLFTCY.CRY    = "ZZZ"
QLFTCY.LAN    = "ABC"
QLFTCY.CUR    = "DEF"

# Expect error mandatory fields not supplied.
[L]ASTATUS = fmet QLFTCY.AINSERT()
Call CHECK_EQUAL("Fail insert ZZZ"-num$([L]ASTATUS),"Fail insert ZZZ"-num$([V]CST_AERROR)) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup QLFTCY

QLFTCY = NewInstance C_TABCOUNTRY AllocGroup null
[L]ASTATUS = fmet QLFTCY.AINIT()
Call CHECK_EQUAL("AINIT"-num$([L]ASTATUS),"AINIT"-num$([V]CST_AOK)) From AXUNIT

# Load country values
QLFTCY.CRY        = "ZTC"
QLFTCY.CRYDES     = "QLF country"
QLFTCY.LAN        = "ENG"
QLFTCY.CUR        = "USD"
QLFTCY.EECFLG     = [V]CST_ANO
QLFTCY.FLGSEPA    = [V]CST_ANO
QLFTCY.EECDAT     = AVOID.ADATE
QLFTCY.CTLPRG     = AVOID.ACHAR
QLFTCY.ISO        = "US"
QLFTCY.ISONUM     = "840"
QLFTCY.CINSEE     = AVOID.ACHAR
QLFTCY.EECCOD     = AVOID.ACHAR
QLFTCY.CRYVATNUM  = AVOID.ACHAR
QLFTCY.CRNFMTFLG  = [V]CST_AYES
QLFTCY.CRNFMT  = "20X"
QLFTCY.CRNOBL  = 1
QLFTCY.NIDFMTFLG = [V]CST_ANO
QLFTCY.NIDFMT  = "10X"
QLFTCY.EECFMTFLG = [V]CST_ANO
QLFTCY.EECFMT  = "10X"
QLFTCY.NAFFMTFLG = [V]CST_AYES
QLFTCY.NAFFMT    = "10X"
QLFTCY.CRTFMTFLG = [V]CST_AYES
QLFTCY.CRTFMT    = "20X"
QLFTCY.CRTOBL    = [V]CST_ANO
QLFTCY.SOCNUMFMT = AVOID.ACHAR
QLFTCY.SOCNUMFLG1= 0
QLFTCY.SOCNUMFLG2= 0
QLFTCY.SOCNUMFMT2= AVOID.ACHAR
QLFTCY.CONTINENT = "AMN"
QLFTCY.ETATFLG   = [V]CST_AYES
QLFTCY.ETATFMT   = "35X"
QLFTCY.ETATFLG2  = [V]CST_AYES
QLFTCY.ETATFMT2  = "35X"
QLFTCY.ETAT      = [V]CST_AYES
QLFTCY.ETATCTL   = [V]CST_AYES
QLFTCY.ADRNAM1   = "Line 1"
QLFTCY.ADRNAM2   = "Line 2"
QLFTCY.ADRNAM3   = "Line 3"
QLFTCY.ADRCODFMT = "32X"
QLFTCY.POSCODFMT = "10X"
QLFTCY.MINZIP  = 0
QLFTCY.POSCODCTL = [V]CST_AYES
QLFTCY.POSOBL    = [V]CST_AYES
QLFTCY.CTYCODFMT = "40X"
QLFTCY.CTYUPP    = [V]CST_AYES
QLFTCY.CTYNUMFMT = "5B"
QLFTCY.TELFMT    = "[(+1)]14#"
QLFTCY.TELTCY    = AVOID.ACHAR
QLFTCY.TELREG    = AVOID.ACHAR
QLFTCY.BIDFMT    = "30X"
QLFTCY.PABFMT    = "32X"
QLFTCY.BIDCTL    = [V]CST_AYES
QLFTCY.BANLNG    = 3
QLFTCY.FLIBAN    = [V]CST_ANO
QLFTCY.BIDCLS    = AVOID.ACHAR


# Expect OK
[L]ASTATUS = fmet QLFTCY.AINSERT()
Call CHECK_EQUAL("Valid insert ZTC"-num$([L]ASTATUS),"Valid insert ZTC"-num$([V]CST_AOK)) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup QLFTCY
End


#**
#* Read a TABCOUNTRY
#*!
Subprog TABCOUNTRY_READ()
Local Integer ASTATUS

Local Instance QLFTCY Using C_TABCOUNTRY
QLFTCY = NewInstance C_TABCOUNTRY AllocGroup null

[L]ASTATUS = fmet QLFTCY.AREAD("ZTC")
Call CHECK_EQUAL("Read ZTC"-num$([L]ASTATUS),"Read ZTC"-num$([V]CST_AOK)) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup QLFTCY
End

#**
#* Update a TABCOUNTRY
#*!
Subprog TABCOUNTRY_UPDATE()
Local Integer ASTATUS
Local Instance QLFTCY Using C_TABCOUNTRY
QLFTCY = NewInstance C_TABCOUNTRY AllocGroup null

[L]ASTATUS = fmet QLFTCY.AREAD("ZTC")
Call CHECK_EQUAL("Read ZTC"-num$([L]ASTATUS),"Read ZTC"-num$([V]CST_AOK)) From AXUNIT
Gosub WRITE_ERRORS

QLFTCY.CRYDES = "Country Description"
If [L]ASTATUS = [V]CST_AOK
  [L]ASTATUS = fmet QLFTCY.AUPDATE()
  Call CHECK_EQUAL("Update ZTC"-num$([L]ASTATUS),"Update ZTC"-num$([V]CST_AOK)) From AXUNIT
  Gosub WRITE_ERRORS
Endif

FreeGroup QLFTCY
End

#**
#* Delete a TABCOUNTRY
#*!
Subprog TABCOUNTRY_DELETE()
Local Integer ASTATUS
Local Instance QLFTCY Using C_TABCOUNTRY
QLFTCY = NewInstance C_TABCOUNTRY AllocGroup null

[L]ASTATUS = fmet QLFTCY.AREAD("ZTC")
Call CHECK_EQUAL("Read ZTC"-num$([L]ASTATUS),"Read ZTC"-num$([V]CST_AOK)) From AXUNIT
Gosub WRITE_ERRORS

If [L]ASTATUS = [V]CST_AOK
  [L]ASTATUS = fmet QLFTCY.ADELETE()
  Call CHECK_EQUAL("Delete ZTC"-num$([L]ASTATUS),"Delete ZTC"-num$([V]CST_AOK)) From AXUNIT
  Gosub WRITE_ERRORS
Endif
FreeGroup QLFTCY
End

$WRITE_ERRORS
Local Integer I
For I=1 To maxtab(QLFTCY.AERROR)
 If  QLFTCY.AERROR(I)<>null & QLFTCY.AERROR(I).DEL<>2
   Call CHECK_EQUAL(QLFTCY.AERROR(I).PRO-":"-QLFTCY.AERROR(I).MES,QLFTCY.AERROR(I).PRO-":"-QLFTCY.AERROR(I).MES) From AXUNIT
 Endif
Next I
Return

