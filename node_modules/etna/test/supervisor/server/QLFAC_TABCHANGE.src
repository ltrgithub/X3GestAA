Local Clbfile RESULT
RESULT =  func TESTSUITE()
GTRACE = "QLFAC_TABCHANGE_"+GACTX.USER
Call LEC_TRACE From LECFIC
End


#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!
Subprog SETUP
# Database cleaning
Local File TABCHANGE [TCH]
Local File TABCUR [TCU]
Onerrgo ERROR_SETUP_NOTFOUND
Trbegin [TCH]
Delete [TCH] Where CURDEN = "ZTC"
Delete [TCU] Where CUR    = "ZTC"
Commit
Onerrgo
Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT
End

$ERROR_SETUP_NOTFOUND
Resume

#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

Call TESTSUITE_START("TABCHANGE", "Test suite for Class TABCHANGE") From AXUNIT

Call ADD_TESTCASE("TABCUR_CREATION","Creation of TABCUR ZTC",1) From AXUNIT
Call ADD_TESTCASE("TABCHANGE_CREATION","Creation of TABCHANGE ZTC",2) From AXUNIT
Call ADD_TESTCASE("TABCHANGE_READ","Read TABCHANGE ZTC",1) From AXUNIT
Call ADD_TESTCASE("TABCHANGE_UPDATE","Update TABCHANGE ZTC",2) From AXUNIT
Call ADD_TESTCASE("TABCHANGE_DELETE","Deletion of TABCHANGE ZTC",2) From AXUNIT
Call ADD_TESTCASE("TABCUR_DELETE","Deletion of TABCUR ZTC",2) From AXUNIT

Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("TABCHANGE", "SYRA_TABCHANGE")

End SUITE_RESULT

#**
#* Creation of a unit
#* Properties of Class TABCHANGE
#*
#*!
Subprog TABCHANGE_CREATION()

Local Integer I,ASTATUS
Local Instance QLFTCH Using C_TABCHANGE
QLFTCH = NewInstance C_TABCHANGE AllocGroup null

# Initialize Instance
[L]ASTATUS = fmet QLFTCH.AINIT()
QLFTCH.CURDEN = "ZTC"

# Test mandatory property failure

I=fmet QLFTCH.ADDLINE("COLTCH",[V]CST_ALASTPOS)
[L]ASTATUS = fmet QLFTCH.COLTCH(I).AINIT()
QLFTCH.COLTCH(I).CURDEN = "ZTC"
QLFTCH.COLTCH(I).CUR=""

# Expect error mandatory fields not supplied.
[L]ASTATUS = fmet QLFTCH.AINSERT()
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AERROR) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup QLFTCH

QLFTCH = NewInstance C_TABCHANGE AllocGroup null
QLFTCH.CURDEN="ZTC"
# Test valid entry
# Initialize Instance
[L]ASTATUS = fmet QLFTCH.AINIT()
QLFTCH.CURDEN = "ZTC"

# Properties required
I=fmet QLFTCH.ADDLINE("COLTCH",[V]CST_ALASTPOS)
QLFTCH.COLTCH(I).CURDEN = "ZTC"
QLFTCH.COLTCH(I).CHGDIV=1
QLFTCH.COLTCH(I).CHGRAT=1
QLFTCH.COLTCH(I).CHGSTRDAT = date$
QLFTCH.COLTCH(I).CUR = "USD"
QLFTCH.COLTCH(I).CHGTYP = 1


# Expect OK
[L]ASTATUS = fmet QLFTCH.AINSERT()
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup QLFTCH

End


#**
#* Read a TABCHANGE
#*!
Subprog TABCHANGE_READ()
Local Integer ASTATUS
Local Instance QLFTCH Using C_TABCHANGE
QLFTCH = NewInstance C_TABCHANGE AllocGroup null

[L]ASTATUS = fmet QLFTCH.AREAD("ZTC",1)
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS

FreeGroup QLFTCH
End

#**
#* Update a TABCHANGE
#*!
Subprog TABCHANGE_UPDATE()
Local Integer ASTATUS
Local Instance QLFTCH Using C_TABCHANGE
QLFTCH = NewInstance C_TABCHANGE AllocGroup null

[L]ASTATUS = fmet QLFTCH.AREAD("ZTC",1)
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS
If [L]ASTATUS = [V]CST_AOK
  QLFTCH.COLTCH(1).CHGRAT = 5
  [L]ASTATUS = fmet QLFTCH.AUPDATE()
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS
Endif
FreeGroup QLFTCH
End

#**
#* Delete a TABCHANGE
#*!
Subprog TABCHANGE_DELETE()
Local Integer ASTATUS

Local Instance QLFTCH Using C_TABCHANGE
QLFTCH = NewInstance C_TABCHANGE AllocGroup null

[L]ASTATUS = fmet QLFTCH.AREAD("ZTC",1)
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS
If [L]ASTATUS = [V]CST_AOK

  [L]ASTATUS = fmet QLFTCH.ADELETE()
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS
Endif

FreeGroup QLFTCH
End

#**
#* Create a temporary currency (TABCUR)
#*!
Subprog TABCUR_CREATION()
Local Integer ASTATUS

Local Instance QLFTCU Using C_TABCUR
QLFTCU = NewInstance C_TABCUR AllocGroup null

# Load mandatory values
QLFTCU.CUR           = "ZTC"
QLFTCU.INTDES        = "Description ZTC"
QLFTCU.INTSHO        = "Des"
QLFTCU.CURRND        = 0.01
QLFTCU.DCURFMT1      = 13.2
QLFTCU.DCURFMT2      = 6.2
QLFTCU.DCURFMT3      = 13.2
QLFTCU.CURSYM        = "$"
QLFTCU.DECNBR        = 2
QLFTCU.ISOCOD        = "USD"

# Expect OK
[L]ASTATUS = fmet QLFTCU.AINSERT()
Call CHECK_EQUAL("TABCUR Insert"-num$([L]ASTATUS),"TABCUR Insert"-num$([V]CST_AOK)) From AXUNIT
# Write errors
Local Integer I
For I=1 To maxtab(QLFTCU.AERROR)
 If  QLFTCU.AERROR(I)<>null & QLFTCU.AERROR(I).DEL<>2
   Call LOG_LINE(QLFTCU.AERROR(I).PRO-":"-QLFTCU.AERROR(I).MES) From AXUNIT
 Endif
Next I

FreeGroup QLFTCU
End

#**
#* Delete a TABCUR
#*!
Subprog TABCUR_DELETE()
Local Integer ASTATUS
Local Instance QLFTCU Using C_TABCUR
QLFTCU = NewInstance C_TABCUR AllocGroup null

[L]ASTATUS = fmet QLFTCU.AREAD("ZTC")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT

[L]ASTATUS = fmet QLFTCU.ADELETE()
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT

FreeGroup QLFTCU
End

#**
#* Write errors to log
#*!
$WRITE_ERRORS
Local Integer I
For I=1 To maxtab(QLFTCH.AERROR)
 If  QLFTCH.AERROR(I)<>null & QLFTCH.AERROR(I).DEL<>2
   Call LOG_LINE(QLFTCH.AERROR(I).PRO-":"-QLFTCH.AERROR(I).MES) From AXUNIT
 Endif
Next I
Return

