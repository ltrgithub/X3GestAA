Local Clbfile TMP_CLBFILE(2)
TMP_CLBFILE= func TESTSUITE()
Call FERME_TRACE From LECFIC

GTRACE = "QLFAC_AQCPROR01_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

#**
#* Subprog SETUP called at the beginning of the unit test suite to clean then environment
#*!c
Subprog SETUP
End

Subprog TEARDOWN
End


#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

Call TESTSUITE_START("AQCPROR01", "Test suite for Class AQCPROR01") From AXUNIT
Call ADD_TESTCASE("AQCPROR01_BASIC","AINSERT + AREAD + AUPDATE + ADELETE",68) From AXUNIT
Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("AQCPROR01", "SYRA_AQCPROR01")
End SUITE_RESULT


#**
#* AQCPROR01_BASIC
#*
#*!
Subprog AQCPROR01_BASIC()
Local Integer MY_STATUS
Local Instance INS Using C_AQCPROR01
INS = NewInstance C_AQCPROR01 AllocGroup null

Call AINSERT(1)
Call AINSERT(2)
Call AINSERT(3)
Call AINSERT(4)

Call AREAD(1)
Call AREAD(2)
Call AREAD(3)
Call AREAD(4)

Call AUPDATE(1)
Call AUPDATE(2)
Call AUPDATE(3)
Call AUPDATE(4)

Call ADELETE(1)
Call ADELETE(2)
Call ADELETE(3)
Call ADELETE(4)

End


Subprog AINSERT(ID)
Value Integer ID

Local Integer MY_STATUS
Local Char IKEY(20)
Local Instance INS Using C_AQCPROR01
INS = NewInstance C_AQCPROR01 AllocGroup null

# Create a simple instance
Callmet INS.AINIT()
IKEY = "R01P01_0"+ num$(ID)
[L]MY_STATUS = fmet INS.AREAD(IKEY)
If [L]MY_STATUS = [V]CST_AOK
 Callmet INS.ADELETE()
Endif

# Create a simple instance
INS = NewInstance C_AQCPROR01 AllocGroup null

[L]MY_STATUS = fmet INS.AINIT()
INS.R01P01 = IKEY
INS.INTDES = "INTDES "+num$(ID)
INS.INTSHO =  "INTSHO "+num$(ID)
Call CHECK_NOTEQUAL("AQCPROR01.AINSERT('"+IKEY+"')","") From AXUNIT
[L]MY_STATUS = fmet INS.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup INS
End

Subprog AREAD(ID)
Value Integer ID
Local Integer MY_STATUS
Local Char IKEY(20)
Local Instance INS Using C_AQCPROR01
INS = NewInstance C_AQCPROR01 AllocGroup null

# Create a simple instance
Callmet INS.AINIT()
IKEY = "R01P01_0"+ num$(ID)
[L]MY_STATUS = fmet INS.AREAD(IKEY)
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Call CHECK_EQUAL(INS.R01P01 , IKEY) From AXUNIT
Call CHECK_EQUAL(INS.INTDES , "INTDES "+num$(ID)) From AXUNIT
Call CHECK_EQUAL(INS.INTSHO , "INTSHO "+num$(ID)) From AXUNIT

End

Subprog AUPDATE(ID)
Value Integer ID
Local Integer MY_STATUS
Local Char IKEY(20)
Local Instance INS Using C_AQCPROR01
INS = NewInstance C_AQCPROR01 AllocGroup null

# Create a simple instance
Callmet INS.AINIT()
IKEY = "R01P01_0"+ num$(ID)
[L]MY_STATUS = fmet INS.AREAD(IKEY)
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
INS.INTDES = "INTDES "+num$(ID)
INS.INTSHO =  "INTSHO "+num$(ID)
Call CHECK_NOTEQUAL("AQCPROR01.AUPDATE('R01P01_01')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup INS

INS = NewInstance C_AQCPROR01 AllocGroup null
[L]MY_STATUS = fmet INS.AREAD(IKEY)
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Call CHECK_EQUAL(INS.R01P01 , IKEY) From AXUNIT
Call CHECK_EQUAL(INS.INTDES , "INTDES "+num$(ID)) From AXUNIT
Call CHECK_EQUAL(INS.INTSHO , "INTSHO "+num$(ID)) From AXUNIT
Gosub WRITE_ERRORS
Call CHECK_EQUAL(MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup INS

End


Subprog ADELETE(ID)
Value Integer ID
Local Integer MY_STATUS
Local Char IKEY(20)
Local Instance INS Using C_AQCPROR01
INS = NewInstance C_AQCPROR01 AllocGroup null

# Create a simple instance
Callmet INS.AINIT()
IKEY = "R01P01_0"+ num$(ID)
[L]MY_STATUS = fmet INS.AREAD(IKEY)

Call CHECK_EQUAL(MY_STATUS,[V]CST_AOK) From AXUNIT
Call CHECK_NOTEQUAL("AQCPROR01.ADELETE()","") From AXUNIT
Callmet INS.ADELETE()
[L]MY_STATUS = fmet INS.AREAD(IKEY)
Call CHECK_EQUAL(MY_STATUS,[V]CST_AERROR) From AXUNIT
End


#**
#* Write errors to log
#*!
$WRITE_ERRORS
Local Integer I
For I=1 To maxtab(INS.AERROR)
 If  INS.AERROR(I)<>null & INS.AERROR(I).STA=[V]CST_AERROR & INS.AERROR(I).DEL<>2
   Call CHECK_NOTEQUAL(INS.AERROR(I).PRO-":"-INS.AERROR(I).MES, "") From AXUNIT
 Endif
Next I
Callmet INS.ADELETEERROR(CST_ALLERRORS)
Return
