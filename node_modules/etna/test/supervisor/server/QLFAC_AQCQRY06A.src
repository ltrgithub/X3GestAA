#<AdxTL>@(#)2.0.0.0 $Revision$
Local Clbfile TMP_CLBFILE(2)
TMP_CLBFILE= func TESTSUITE()
Call FERME_TRACE From LECFIC

GTRACE = "QLFAC_AQCQRY06A_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

#**
#* Subprog SETUP called at the beginning of the unit test suite to clean then environment
#*!c
Subprog SETUP
Local Instance INS Using C_AQCQRY06A
INS = NewInstance C_AQCQRY06A AllocGroup null

# Create a simple instance
[L]MY_STATUS = fmet INS.AREAD("AQC06_F1")
if([L]MY_STATUS <> [V]CST_AERROR) : Callmet INS.ADELETE() : Endif

#Delete the instance
Callmet INS.ADELETE()

End

Subprog TEARDOWN
End

#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

Call TESTSUITE_START("AQCQRY06A", "Test suite for Class AQCQRY06A") From AXUNIT
Call ADD_TESTCASE("AQCQRY06A_BASIC","AINSERT + AREAD + AUPDATE + ADELETE",27) From AXUNIT
Call ADD_TESTCASE("AQCQRY06A_CONTROLS","AINSERT CONTROLS",5) From AXUNIT
Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("AQCQRY06A", "SYRA_AQCQRY06A")
End SUITE_RESULT

#**
#* AQCQRY06A_BASIC CRUD
#*
#*!
Subprog AQCQRY06A_BASIC()
Local Integer MY_STATUS
Local Instance INS Using C_AQCQRY06A
INS = NewInstance C_AQCQRY06A AllocGroup null

# Create a simple instance
[L]MY_STATUS = fmet INS.AINIT()
INS.FIELD01 =  "AQC06_F1"  # fmet call of AINIT allows more than indexed fields - Callmet only permit index fields.
INS.FIELD02 =  "AQC06_F2"
INS.FIELD05 = 1212 ################

#TEST AINSERT
Call CHECK_NOTEQUAL("AQCQRY06A.AINSERT('Missing Mandatory properties')","") From AXUNIT
[L]MY_STATUS = fmet INS.AINSERT()
INS.FIELD03 =  1
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT #
Gosub WRITE_ERRORS

INS.FIELD03 =  1 # not mandatory L
INS.FIELD04 =  "AQC06_F4" # mandatory A
INS.FIELD05 =  123456.12345 # mandatory DCB
INS.FIELD06 =  123456789012345.1234 # mandatory MD1
INS.FIELD07 = 1 # M # INS.FIELD07 is Mandatory, but INIT sets it to 1 so no error.
INS.FIELD09 = 888.88 # mandatory CTD
INS.FIELD10 =  9999 # mandatory C
INS.FIELD11 = [05/05/2015] # mandatory D


#INS.FIELD12=  filpath("\\Syracuse\Syracuse\database\database\dump\SUPDVLP-SUPERV","dakota","jpg") #, #"http://"+WHOST+":27880/data/qualifier/images/Sage_logo.jpg"
# #filpath(nomap+"\RES","inconnuh","jpg","X3_PUB")
#INS.FIELD12= filpath("tmp\ABRA Files","dakota","jpg")
#Openi filpath("..\..\..\..\tmp\ABRA Files","dakota","jpg")
##########Openi filpath("//icons.iconarchive.com/icons/uiconstock/e-commerce/128","sage-icon","png")

INS.FIELD13="This is a test of CLOB entry" # Mandatory CLOB
INS.FIELD14=INS.CREDATTIM # mandatory date time (GH 7104)
INS.FIELD15=getUuid  # Mandatory

Call CHECK_NOTEQUAL("AQCQRY06A.AUPDATE('Inserting with Mandatory properties')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()

Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS

#TEST AREAD
Call CHECK_NOTEQUAL("AQCQRY06A.AREAD('AQCQRY06A')","") From AXUNIT
[L]MY_STATUS = fmet INS.AREAD("AQC06_F1") # Index value
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Call CHECK_EQUAL(INS.FIELD01, "AQC06_F1") From AXUNIT
Call CHECK_EQUAL(INS.FIELD02, "AQC06_F2") From AXUNIT
Call CHECK_EQUAL(INS.FIELD03, 1) From AXUNIT
Call CHECK_EQUAL(INS.FIELD04, "AQC06_F4") From AXUNIT
Call CHECK_EQUAL(INS.FIELD05, 123456.12345) From AXUNIT
Call CHECK_EQUAL(INS.FIELD06, 123456789012345.1234) From AXUNIT
Call CHECK_EQUAL(INS.FIELD07, 1) From AXUNIT
Call CHECK_EQUAL(INS.FIELD09, 888.88) From AXUNIT
Call CHECK_EQUAL(INS.FIELD10, 9999) From AXUNIT
Call CHECK_EQUAL(INS.FIELD11, [05/05/2015]) From AXUNIT
#Call CHECK_EQUAL(INS.FIELD12, filpath(nomap+"\RES","inconnuh","jpg","X3_PUB")]) From AXUNIT
#Call CHECK_EQUAL(INS.FIELD12,filpath("tmp\ABRA Files","dakota","jpg")) From AXUNIT
Call CHECK_EQUAL(INS.FIELD13,"This is a test of CLOB entry") From AXUNIT
#Call CHECK_NOTEQUAL(INS.FIELD15,NullUuid()) From AXUNIT

Gosub WRITE_ERRORS
Call CHECK_EQUAL("Field05"-num$(INS.FIELD05),"Field05"-num$(123456.12345)) From AXUNIT
#
#FreeGroup INS
#End
###########################################


#Try to insert twice the same record
Call CHECK_NOTEQUAL("AQCQRY06A.AINSERT('AQC06_F1') twice","") From AXUNIT
[L]MY_STATUS = fmet INS.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
Gosub WRITE_ERRORS

# TEST AUPDATE to Null of (AVOID) mandatory property.
INS.FIELD04 =  AVOID.ACHAR  # ""
Call CHECK_NOTEQUAL("AQCQRY06A.AUPDATE Mandatory('INS.FIELD04 = ')","") From AXUNIT  # GH 7110
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

INS.FIELD05 =   AVOID.ADEC  # 0
Call CHECK_NOTEQUAL("AQCQRY06A.AUPDATE Mandatory('INS.FIELD05 =  0')","") From AXUNIT  # GH 7110
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

Gosub WRITE_ERRORS
[L]MY_STATUS = [V]CST_AOK

INS.FIELD05 = 1234.123
Call CHECK_EQUAL("Field05"-num$(INS.FIELD05),"Field05"-num$(1234.123)) From AXUNIT
INS.FIELD06 =  AVOID.ADEC  # 0
Call CHECK_NOTEQUAL("AQCQRY06A.AUPDATE Mandatory('INS.FIELD06 =  0')","") From AXUNIT  # GH 7110
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL("Valid update 1"-num$([L]MY_STATUS),"Valid update 1"-num$([V]CST_AOK)) From AXUNIT
Gosub WRITE_ERRORS

FreeGroup INS
End

INS.FIELD07 =  AVOID.ADEC  # 0
Call CHECK_NOTEQUAL("AQCQRY06A.AUPDATE Mandatory('INS.FIELD07 =  0')","") From AXUNIT  # GH 7110
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL("Invalid update"-num$([L]MY_STATUS),"Invalid update"-num$([V]CST_AERROR)) From AXUNIT

#
#INS.FIELD08 =  AVOID.ADEC  # 0
#Call CHECK_NOTEQUAL("AQCQRY06A.AUPDATE Mandatory('INS.FIELD08 =  0')","") From AXUNIT
#[L]MY_STATUS = fmet INS.AUPDATE()
#Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
#
INS.FIELD09 =  AVOID.ADEC  # 0
Call CHECK_NOTEQUAL("AQCQRY06A.AUPDATE Mandatory('INS.FIELD09 =  0')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL("Invalid update"-num$([L]MY_STATUS),"Invalid update"-num$([V]CST_AERROR)) From AXUNIT

INS.FIELD10 =  AVOID.ADEC  # 0
Call CHECK_NOTEQUAL("AQCQRY06A.AUPDATE Mandatory('INS.FIELD10 =  0')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL("Invalid update"-num$([L]MY_STATUS),"Invalid update"-num$([V]CST_AERROR)) From AXUNIT

INS.FIELD11 =  AVOID.ADATE # [0/0/0]
Call CHECK_NOTEQUAL("AQCQRY06A.AUPDATE Mandatory('INS.FIELD11 =  0')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL("Invalid update"-num$([L]MY_STATUS),"Invalid update"-num$([V]CST_AERROR)) From AXUNIT

INS.FIELD13 =  AVOID.ACHAR # " "
Call CHECK_NOTEQUAL("AQCQRY06A.AUPDATE Mandatory('INS.FIELD13 =  ' ')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL("Invalid update"-num$([L]MY_STATUS),"Invalid update"-num$([V]CST_AERROR)) From AXUNIT

#INS.FIELD14 =  [0/0/0] AVOID.ADATE
#Call CHECK_NOTEQUAL("AQCQRY06A.AUPDATE Mandatory('INS.FIELD14 =  ' ')","") From AXUNIT
#[L]MY_STATUS = fmet INS.AUPDATE()
#Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

INS.FIELD15 =  AVOID.AUUID  # NullUuid()
Call CHECK_NOTEQUAL("AQCQRY06A.AUPDATE Mandatory('INS.FIELD15 =  ' ')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL("Invalid update"-num$([L]MY_STATUS),"Invalid update"-num$([V]CST_AERROR)) From AXUNIT


#TEST AUPDATE
INS.FIELD02 =  "AQC06_F2_2"
INS.FIELD03 =  2
INS.FIELD04 =  "AQC06_F4_2"
INS.FIELD05 =  1234567890.123
INS.FIELD06 =  987654321.123
INS.FIELD07 =  3
#INS.FIELD08 = 2 # Mandatory MM
INS.FIELD09 =  val("222.22")
INS.FIELD10 =  val("8888")
INS.FIELD11 = [06/05/2015]
INS.FIELD13 = "This is a test of CLOB entry 2222"
INS.FIELD15 = getUuid()
Call CHECK_NOTEQUAL("AQCQRY06A.AUPDATE('Updating with Mandatory fields')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL("Valid update 2"-num$([L]MY_STATUS),"Valid update 2"-num$([V]CST_AOK)) From AXUNIT

[L]MY_STATUS = fmet INS.AREAD("AQC06_F1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Call CHECK_EQUAL(INS.FIELD01, "AQC06_F1") From AXUNIT
Call CHECK_EQUAL(INS.FIELD02, "AQC06_F2_2") From AXUNIT
Call CHECK_EQUAL(INS.FIELD03, 2) From AXUNIT
Call CHECK_EQUAL(INS.FIELD04, "AQC06_F4_2") From AXUNIT
Call CHECK_EQUAL(INS.FIELD07, 3) From AXUNIT
#Call CHECK_EQUAL(INS.FIELD08, 2) From AXUNIT
Call CHECK_EQUAL(INS.FIELD09, 222.22) From AXUNIT
Call CHECK_EQUAL(INS.FIELD10, 8888) From AXUNIT

Call CHECK_EQUAL(INS.FIELD11, [06/05/2015]) From AXUNIT
#Call CHECK_EQUAL(INS.FIELDACB, "New Test of Clob entry text") From AXUNIT
Call CHECK_EQUAL(INS.FIELD13, "This is a test of CLOB entry 2222") From AXUNIT
Call CHECK_NOTEQUAL(INS.FIELD15, NullUuid()) From AXUNIT
Gosub WRITE_ERRORS

#TEST ADELETE
[L]MY_STATUS = fmet INS.ADELETE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS

[L]MY_STATUS = fmet INS.AREAD("AQC06_F1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT :#NOT FOUND

#Try to delete twice
[L]MY_STATUS = fmet INS.ADELETE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

FreeGroup INS
End

#**
#* AQCQRY06A_CONTROLS
#*
#*!
Subprog AQCQRY06A_CONTROLS()
Local Integer MY_STATUS
Local Instance INS Using C_AQCQRY06A
INS = NewInstance C_AQCQRY06A AllocGroup null

# Create a simple instance
[L]MY_STATUS = fmet INS.AINIT()

#Try to insert with no key
Call CHECK_NOTEQUAL("AQCQRY06A.AINSERT('')","") From AXUNIT
[L]MY_STATUS = fmet INS.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
Gosub WRITE_ERRORS

#Try to insert a record whose access code isn't defined
INS.FIELD01 =  "AQC02_F1"
INS.FIELD02 =  "AQC02_F2"
INS.FIELD03 =  2
INS.ACCESS ="01234567890123456789"
[L]MY_STATUS = fmet INS.AINSERT()
Call CHECK_EQUAL(INS.ACCESS, "0123456789") From AXUNIT
#TODO Control OTHERS on reference Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

FreeGroup INS

End

#**
#* Write errors to log
#*!
$WRITE_ERRORS
Local Integer I
For I=1 To maxtab(INS.AERROR)
 If  INS.AERROR(I)<>null & INS.AERROR(I).DEL<>2
   Call CHECK_EQUAL(INS.AERROR(I).PRO-":"-INS.AERROR(I).MES,INS.AERROR(I).PRO-":"-INS.AERROR(I).MES) From AXUNIT
 Endif
Next I
Return

