Local Integer ASTATUS
Local Instance MY_LOG Using C_ALOG
MY_LOG = NewInstance C_ALOG AllocGroup null
[L]ASTATUS = fmet MY_LOG.ASETNAME("QLFAC_ADIMENSION_"+GACTX.USER)
[L]ASTATUS = fmet MY_LOG.ABEGINLOG("QLFAC_ADIMENSION")

Local Clbfile RESULT
RESULT =  func TESTSUITE()

FreeGroup MY_LOG
GTRACE = "QLFAC_ADIMENSION_"+GACTX.USER
Call LEC_TRACE From LECFIC
End


#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!
Subprog SETUP

  # Database cleaning
  Local File ADIMENSION [ADM]

  Onerrgo ERROR_SETUP_NOTFOUND
  Trbegin [ADM]
    Delete [ADM]ADM0 = "ZUNITTEST"
  Commit
  Onerrgo
  Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT

  Close Local File [ADM]
End

$ERROR_SETUP_NOTFOUND
Resume

#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

  # Start the test suite
  Call TESTSUITE_START("ADIMENSION", "Sizing elements") From AXUNIT

  Call ADD_TESTCASE("ADIMENSION_INSERT_VALID",          "Insert valid record ZUNITTEST",        3) From AXUNIT
  Call ADD_TESTCASE("ADIMENSION_INSERT_DUPLICATE_CODE", "Invalid insertion of ZUNITTEST again", 2) From AXUNIT
  Call ADD_TESTCASE("ADIMENSION_AREAD",                 "Read ADIMENSION record ZUNITTEST",     5) From AXUNIT
  Call ADD_TESTCASE("ADIMENSION_AUPDATE",               "Update ADIMENSION record ZUNITTEST",   7) From AXUNIT
  Call ADD_TESTCASE("ADIMENSION_ADELETE",               "Delete ADIMENSION record ZUNITTEST",   3) From AXUNIT

  # Run the test and return the result
  Local Clbfile RESULT_SUITE
  RESULT_SUITE=func AXUNIT.RUN_TESTSUITE("ADIMENSION","ADIMENSION test")

End RESULT_SUITE


#**
#* Write errors to log
#*!
$WRITE_ERRORS
Local Integer I
For I=1 To maxtab(MYINSTANCE.AERROR)
 If  MYINSTANCE.AERROR(I)<>null & MYINSTANCE.AERROR(I).STA=[V]CST_AERROR & MYINSTANCE.AERROR(I).DEL<>2
   Call LOG_LINE(MYINSTANCE.AERROR(I).PRO-":"-MYINSTANCE.AERROR(I).MES) From AXUNIT
 Endif
Next I
Return

####################################################################################################

Subprog ADIMENSION_INSERT_VALID()
  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_ADIMENSION

  MYINSTANCE = NewInstance C_ADIMENSION AllocGroup null

  # Initialize Instance
  [L]ASTATUS = fmet MYINSTANCE.AINIT()
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT

  # Create a valid record
  MYINSTANCE.COD    = "ZUNITTEST"
  MYINSTANCE.MODULE = 7
  MYINSTANCE.RANG   = 42

  [L]ASTATUS  = fmet MYINSTANCE.DES.ASETTEXT("Test")
  Call LOG_LINE("Set DES to 'Test'") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  [L]ASTATUS = fmet MYINSTANCE.AINSERT
  Call LOG_LINE("Create valid ADIMENSION record") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup MYINSTANCE
  MYINSTANCE = null
End

####################################################################################################

Subprog ADIMENSION_INSERT_DUPLICATE_CODE()
  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_ADIMENSION

  MYINSTANCE = NewInstance C_ADIMENSION AllocGroup null

  # Initialize Instance
  [L]ASTATUS = fmet MYINSTANCE.AINIT()
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT

  # Try to use an existing code. Should fail.
  MYINSTANCE.COD    = "ZUNITTEST"
  MYINSTANCE.MODULE = 7
  MYINSTANCE.RANG   = 43

  [L]ASTATUS = fmet MYINSTANCE.AINSERT()
  Call LOG_LINE("Try to insert a record with an existing code") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AERROR) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup MYINSTANCE
  MYINSTANCE = null
End

####################################################################################################

Subprog ADIMENSION_AREAD()
  Call VERIFY_RECORD("ZUNITTEST")
End

Subprog VERIFY_RECORD(CODE)
  Value Char CODE

  # Read record and validate it's contents against a direct read of the table.
  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_ADIMENSION
  Local File ADIMENSION [ADM]

  MYINSTANCE = NewInstance C_ADIMENSION AllocGroup null

  Read [F:ADM]ADM0=CODE

  [L]ASTATUS = fmet MYINSTANCE.AREAD(CODE)
  Call LOG_LINE("Read record "+CODE) From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  Call LOG_LINE("Verify the values read") From AXUNIT
  Call CHECK_EQUAL( MYINSTANCE.COD    , [F:ADM]COD    ) From AXUNIT
  #Call CHECK_EQUAL( MYINSTANCE.DES    , [F:ADM]DES    ) From AXUNIT
  Call CHECK_EQUAL( MYINSTANCE.MODULE , [F:ADM]MODULE ) From AXUNIT
  Call CHECK_EQUAL( MYINSTANCE.ORDRE  , [F:ADM]ORDRE  ) From AXUNIT
  Call CHECK_EQUAL( MYINSTANCE.RANG   , [F:ADM]RANG   ) From AXUNIT

  LogicClose File [ADM]

  FreeGroup MYINSTANCE
  MYINSTANCE = null
End

####################################################################################################

Subprog ADIMENSION_AUPDATE
  # Test updating a record.
  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_ADIMENSION

  MYINSTANCE = NewInstance C_ADIMENSION AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AREAD("ZUNITTEST")
  Call LOG_LINE("Read record ZUNITTEST") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  MYINSTANCE.RANG = 37

  [L]ASTATUS = fmet MYINSTANCE.AUPDATE()
  Call LOG_LINE("Update Sequence to 37, ORDRE should also change") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup MYINSTANCE
  MYINSTANCE = null

  #Re-read updated record to ensure fields were properly updated
  Call VERIFY_RECORD("ZUNITTEST")
End

####################################################################################################

Subprog ADIMENSION_ADELETE()
  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_ADIMENSION

  MYINSTANCE = NewInstance C_ADIMENSION AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AREAD("ZUNITTEST")
  Call LOG_LINE("Read record ZUNITTEST") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  [L]ASTATUS = fmet MYINSTANCE.ADELETE()
  Call LOG_LINE("Delete record ZUNITTEST") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  [L]ASTATUS = fmet MYINSTANCE.AREAD("ZUNITTEST")
  Call LOG_LINE("Read record ZUNITTEST") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AERROR) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup MYINSTANCE
  MYINSTANCE = null
End
