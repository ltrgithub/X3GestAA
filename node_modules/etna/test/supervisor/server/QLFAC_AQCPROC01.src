Local Clbfile TMP_CLBFILE(2)
TMP_CLBFILE= func TESTSUITE()
Call FERME_TRACE From LECFIC

#GTRACE = "QLFAC_AQCPROC01_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

#**
#* Subprog SETUP called at the beginning of the unit test suite to clean then environment
#*!c
Subprog SETUP
Local Integer MY_STATUS
Local Instance INS Using C_AQCPROC01
INS = NewInstance C_AQCPROC01

# Create a simple instance
Callmet INS.AINIT()
[L]MY_STATUS = fmet INS.AREAD("AQC01")
If [L]MY_STATUS = [V]CST_AOK
 Callmet INS.ADELETE()
Endif

Local Instance REF Using C_AQCPROR01
REF = NewInstance C_AQCPROR01 AllocGroup null

# Create a simple instance
[L]MY_STATUS = fmet REF.AREAD("R01P01_00")
if([L]MY_STATUS = [V]CST_AERROR) 
	[L]MY_STATUS = fmet REF.AINIT()
	REF.R01P01 = "R01P01_00"
	REF.INTDES = "INT_DES1_00"
	REF.INTSHO =  "INT_SHO1_00"
	[L]MY_STATUS = fmet REF.AINSERT()
Endif

Subprog TEARDOWN
End


#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

Call TESTSUITE_START("AQCPROC01", "Test suite for Class AQCPROC01") From AXUNIT
Call ADD_TESTCASE("AQCPROC01_BASIC","AINSERT + AREAD + AUPDATE + ADELETE",13) From AXUNIT
Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("AQCPROC01", "SYRA_AQCPROC01")
End SUITE_RESULT


#**
#* AQCPROC01_BASIC
#*
#*!
Subprog AQCPROC01_BASIC()
Local Integer MY_STATUS
Local Instance INS Using C_AQCPROC01
INS = NewInstance C_AQCPROC01

# Create a simple instance
Callmet GACTX.ACTX_SET_LANISO("fr-FR")

[L]MY_STATUS = fmet INS.AINIT()
INS.C01P01="AQC01"
INS.DESCRIPTION="FRA AQC01"
Call CHECK_NOTEQUAL("AQCPROC01.AINSERT('AQC01')","") From AXUNIT
[L]MY_STATUS = fmet INS.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AINFO) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup INS

INS = NewInstance C_AQCPROC01
[L]MY_STATUS = fmet INS.AREAD("AQC01")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AINFO) From AXUNIT
Call CHECK_EQUAL(INS.C01P01,"AQC01") From AXUNIT
Call CHECK_EQUAL(INS.DESCRIPTION,"FRA AQC01") From AXUNIT

Callmet GACTX.ACTX_SET_LANISO("en-US")
INS.DESCRIPTION="ENG AQC01"
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AINFO) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup INS

INS = NewInstance C_AQCPROC01
[L]MY_STATUS = fmet INS.AREAD("AQC01")
Call CHECK_EQUAL(INS.C01P01,"AQC01") From AXUNIT
Call CHECK_EQUAL(INS.DESCRIPTION,"ENG AQC01") From AXUNIT
Gosub WRITE_ERRORS
FreeGroup INS

Callmet GACTX.ACTX_SET_LANISO("fr-FR")
INS = NewInstance C_AQCPROC01
[L]MY_STATUS = fmet INS.AREAD("AQC01")
Call CHECK_EQUAL(MY_STATUS,[V]CST_AINFO) From AXUNIT
Call CHECK_EQUAL(INS.C01P01,"AQC01") From AXUNIT
Call CHECK_EQUAL(INS.DESCRIPTION,"FRA AQC01") From AXUNIT

Call CHECK_NOTEQUAL("AQCPROC01.ADELETE()","") From AXUNIT
Callmet INS.ADELETE()
[L]MY_STATUS = fmet INS.AREAD("AQC01")
Call CHECK_EQUAL(MY_STATUS,[V]CST_AERROR) From AXUNIT
End
#**
#* Write errors to log
#*!
$WRITE_ERRORS
Local Integer I
For I=1 To maxtab(INS.AERROR)
 If  INS.AERROR(I)<>null & INS.AERROR(I).STA=[V]CST_AERROR & INS.AERROR(I).DEL<>2
   Call CHECK_NOTEQUAL(INS.AERROR(I).PRO-":"-INS.AERROR(I).MES, "") From AXUNIT
 Endif
Next I
Callmet INS.ADELETEERROR(CST_ALLERRORS)
Return
