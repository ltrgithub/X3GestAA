Local Clbfile TMP_CLBFILE(2)
TMP_CLBFILE= func TESTSUITE()
Call FERME_TRACE From LECFIC

#GTRACE = "QLFAC_AQCQRY01_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

#**
#* Subprog SETUP called at the beginning of the unit test suite to clean then environment
#*!c
Subprog SETUP
Local Instance INS Using C_AQCQRY01
INS = NewInstance C_AQCQRY01 AllocGroup null

# Create a simple instance
Callmet INS.AINIT()
INS.FIELD01 =  "AQC01_F1" : Callmet INS.ADELETE()
INS.FIELD01 =  "AQC02_F1" : Callmet INS.ADELETE()

End

Subprog TEARDOWN
End

#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

Call TESTSUITE_START("AQCQRY01", "Test suite for Class AQCQRY01") From AXUNIT
Call ADD_TESTCASE("AQCQRY01_BASIC","AINSERT + AREAD + AUPDATE + ADELETE",18) From AXUNIT
Call ADD_TESTCASE("AQCQRY01_CONTROLS","AINSERT CONTROLS",3) From AXUNIT
Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("AQCQRY01", "SYRA_AQCQRY01")
End SUITE_RESULT

#**
#* AQCQRY01_BASIC
#*
#*!
Subprog AQCQRY01_BASIC()
Local Integer MY_STATUS
Local Instance INS Using C_AQCQRY01
INS = NewInstance C_AQCQRY01 AllocGroup null

# Create a simple instance
[L]MY_STATUS = fmet INS.AINIT()
INS.FIELD01 =  "AQC01_F1"
INS.FIELD02 =  "AQC01_F2"
INS.FIELD03 =  1

#TEST AINSERT
Call CHECK_NOTEQUAL("AQCQRY01.AINSERT('AQC01_F1')","") From AXUNIT
[L]MY_STATUS = fmet INS.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS

#TEST AREAD
Call CHECK_NOTEQUAL("AQCQRY01.AREAD('AQC01_F1')","") From AXUNIT
[L]MY_STATUS = fmet INS.AREAD("AQC01_F1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Call CHECK_EQUAL(INS.FIELD01, "AQC01_F1") From AXUNIT
Call CHECK_EQUAL(INS.FIELD02, "AQC01_F2") From AXUNIT
Call CHECK_EQUAL(INS.FIELD03, 1) From AXUNIT
Gosub WRITE_ERRORS


#Try to insert twice the same record
Call CHECK_NOTEQUAL("AQCQRY01.AINSERT('AQC01_F1') twice","") From AXUNIT
[L]MY_STATUS = fmet INS.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
Gosub WRITE_ERRORS

#TEST AUPDATE
INS.FIELD02 =  "AQC01_F2_2"
INS.FIELD03 =  2
Call CHECK_NOTEQUAL("AQCQRY01.AUPDATE('AQC01_F1')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

[L]MY_STATUS = fmet INS.AREAD("AQC01_F1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Call CHECK_EQUAL(INS.FIELD01, "AQC01_F1") From AXUNIT
Call CHECK_EQUAL(INS.FIELD02, "AQC01_F2_2") From AXUNIT
Call CHECK_EQUAL(INS.FIELD03, 2) From AXUNIT
Gosub WRITE_ERRORS

#TEST ADELETE
[L]MY_STATUS = fmet INS.ADELETE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS

[L]MY_STATUS = fmet INS.AREAD("AQC01_F1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT :#NOT FOUND

#Try to delete twice
[L]MY_STATUS = fmet INS.ADELETE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

FreeGroup INS
End

#**
#* AQCQRY01_CONTROLS
#*
#*!
Subprog AQCQRY01_CONTROLS()
Local Integer MY_STATUS
Local Instance INS Using C_AQCQRY01
INS = NewInstance C_AQCQRY01 AllocGroup null

# Create a simple instance
[L]MY_STATUS = fmet INS.AINIT()

#Try to insert with no key
Call CHECK_NOTEQUAL("AQCQRY01.AINSERT('')","") From AXUNIT
[L]MY_STATUS = fmet INS.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
Gosub WRITE_ERRORS

#Try to insert a record whose access code isn't defined
INS.FIELD01 =  "AQC02_F1"
INS.FIELD02 =  "AQC02_F2"
INS.FIELD03 =  2
INS.ACCESS ="01234567890123456789"
[L]MY_STATUS = fmet INS.AINSERT()
Call CHECK_EQUAL(INS.ACCESS, "0123456789") From AXUNIT
#TODO Control OTHERS on reference Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

FreeGroup INS
End

#**
#* Write errors to log
#*!
$WRITE_ERRORS
Local Integer I
For I=1 To maxtab(INS.AERROR)
 If  INS.AERROR(I)<>null & INS.AERROR(I).STA=[V]CST_AERROR & INS.AERROR(I).DEL<>2
   Call LOG_LINE(INS.AERROR(I).PRO-":"-INS.AERROR(I).MES) From AXUNIT
 Endif
Next I
Return
