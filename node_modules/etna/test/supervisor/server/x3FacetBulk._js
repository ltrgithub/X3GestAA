"use strict";
// JavaScript Document
const assert = require("assert");
const x3Helper = require("etna/test/supervisor/fixtures/x3Helper");
const config = require('config'); // must be first syracuse require

var tracer; // = console.log;

QUnit.module("x3FacetBulk");

var cookie = null;

function _getCookie(_) {
	cookie = cookie || x3Helper.getCookie(_);
	//!ok("cookie"   ,"cookie"   +JSON.stringify(cookie));
	return cookie;
}

//******************************************************************************

function checkJSON(_, _representation) {
	var name = _representation + ".$bulk";
	try {
		var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url(_representation + "?representation=" + _representation + ".$bulk&count=500"), 200);
		/*dbg*/
		ok(true, "prototype=" + JSON.stringify(prototype));
		strictEqual(true, true, "The JSON of " + _representation + ".$bulk is well formed");
	} catch (e) {
		strictEqual(true, false, "The JSON of " + _representation + ".$bulk isn't well formed");
	}
	var query = x3Helper.get(_, _getCookie(_), x3Helper.x3Url(_representation + "?representation=" + _representation + ".$query&count=10"), 200);
	/*dbg*/
	//ok(true,"DBG query:"+JSON.stringify(query));

	var bulk = x3Helper.get(_, _getCookie(_), x3Helper.x3Url(_representation + "?representation=" + _representation + ".$bulk&count=10"), 200);
	/*dbg*/
	//ok(true,"DBG bulk:"+JSON.stringify(bulk));

	for (var p in query.$resources[0]) {
		ok(p in bulk.$resources[0], p + " is present");
		//!strictEqual(query.$resources[0][p],bulk.$resources[0][p],"'"+query.$resources[0][p]+"'='"+bulk.$resources[0][p]+"'");
	}
}

asyncTest("ACLAIDX    ", (_) => {
	checkJSON(_, "ACLAIDX");
	start();
});
asyncTest("AFCTIDX    ", (_) => {
	checkJSON(_, "AFCTIDX");
	start();
});
//TODO asyncTest("AREPIDX    ", (_) => {
// 	checkJSON(_, "AREPIDX");
// 	start();
// });
asyncTest("ATABLE     ", (_) => {
	checkJSON(_, "ATABLE");
	start();
});
asyncTest("ATYPE      ", (_) => {
	checkJSON(_, "ATYPE");
	start();
});
asyncTest("AVOLUME    ", (_) => {
	checkJSON(_, "AVOLUME");
	start();
});
asyncTest("TABCOUNTRY ", (_) => {
	checkJSON(_, "TABCOUNTRY");
	start();
});
asyncTest("TABLAN     ", (_) => {
	checkJSON(_, "TABLAN");
	start();
});
asyncTest("TABUNIT    ", (_) => {
	checkJSON(_, "TABUNIT");
	start();
});
asyncTest("AQCPROC01  ", (_) => {
	checkJSON(_, "AQCPROC01");
	start();
});
asyncTest("AQCPROC02  ", (_) => {
	checkJSON(_, "AQCPROC02");
	start();
});
asyncTest("AQCPROC03  ", (_) => {
	checkJSON(_, "AQCPROC03");
	start();
});
asyncTest("AQCPROC04  ", (_) => {
	checkJSON(_, "AQCPROC04");
	start();
});
asyncTest("AQCPROC05  ", (_) => {
	checkJSON(_, "AQCPROC05");
	start();
});
asyncTest("AQCPROC06  ", (_) => {
	checkJSON(_, "AQCPROC06");
	start();
});
asyncTest("AQCPROC07  ", (_) => {
	checkJSON(_, "AQCPROC07");
	start();
});

// asyncTest("POSCOD     ", (_) => {
// 	checkJSON(_, "POSCOD");
// 	start();
// });

// asyncTest("APSADX" + x3Helper.gitHubIssue(5076), (_) => {
// 	checkJSON(_, "APSADX");
// 	start();
// });

//******************************************************************************
