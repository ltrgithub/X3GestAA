"use strict";
const assert = require("assert");
const x3Helper = require("etna/test/supervisor/fixtures/x3Helper");
const config = require('config'); // must be first syracuse require

QUnit.module("x3Requester");


//if (!config.unit_test || !config.unit_test.x3endpoint) {
var cookie = null;

function _getCookie(_) {
	cookie = cookie || x3Helper.getCookie(_);
	return cookie;
}
//******************************************************************************

function _checkPrototype(_, _representation, _facet, _statusCode) {
	var urlKeys = [];
	var proNames = [];


	var test = {
		done: 0,
		ok: 0,
		nok: 0,
		success: false,
		messages: [],
	}; /*dbg*/
	//ok(true, "_checkPrototype:"+_representation+"."+_facet);

	function _ok(value, message) {
		test.done++;

		try {
			assert.ok(value);
			test.ok++;
		} catch (err) {
			test.nok++;
			test.messages.push("NOK: " + message);
			tracer && tracer("_ok NOK: " + message);
		}
		test.success = (test.done == test.ok);
	};

	function _strictEqual(actual, expected, message) {
		test.done++;

		try {
			assert.strictEqual(actual, expected);
			test.ok++;
		} catch (err) {
			test.nok++;
			test.messages.push("NEQ: " + message + ", expected='" + expected + "', got='" + actual + "'");
			tracer && tracer("_strictEqual NOK: " + message);
		}
		test.success = (test.done == test.ok);
	};

	function _checkUrl(_url) {
		tracer && tracer("*** $url :", _url);
		var urlpart = _url.match(/('.+')/g);
		if (urlpart) {
			for (var i in urlpart) {
				var keys = urlpart[i].match(/\{\w+}/g);
				for (var j in keys) {
					urlKeys.push(keys[j].substring(1, keys[j].length - 1));
				}
			}
		}
	}

	function _checkLink(link, _link) {
		try {
			_ok(_link.$title !== undefined, "link.$title");
			_ok(_link.$type !== undefined, "link.$type");
			_ok(_link.$url !== undefined, "link.$url");
			_checkUrl(_link.$url);
		} catch (err) {
			test.messages.push("Link:" + link + " error=" + err);
			tracer && tracer("_checkLink NOK: " + "Link:" + link + " error=" + err);
		}
	}

	function _checkLinks(_node) {
		if ("$links" in _node) {
			for (var link in _node.$links) {
				_checkLink(link, _node.$links[link]);
			}
		}
	}

	function _checkProperties(_properties) {
		for (var p in _properties) {
			proNames.push(p);

			_checkLinks(_properties[p]);
			_ok("$type" in _properties[p], p + ".$type");

			if (_properties[p].$type == "application/x-reference") {
				_ok("$item" in _properties[p], p + ".$item");
				_ok("$value" in _properties[p].$item, p + ".$value");
				_ok(_properties[p].$item.$value.length > 0, p + ".$value");
				_checkLinks(_properties[p].$item);
				_ok("$url" in _properties[p].$item, p + ".$item.$url");
				_ok("$value" in _properties[p].$item, p + ".$item.$value");
				_ok("$key" in _properties[p].$item, p + ".$item.$key");
				_ok("$properties" in _properties[p].$item, p + ".$item.$properties");
				var symbol;
				if ("$symbol" in _properties[p].$item) {
					symbol = _properties[p].$item.$symbol.substring(1, _properties[p].$item.$symbol.length - 1);
				}
				for (var pr in _properties[p].$item.$properties) {
					_ok("$type" in _properties[p].$item.$properties[pr], p + "." + pr + ".$type");
					if (pr != symbol) {
						_ok(pr in _properties[p].$item, p + ".$item." + pr);
					}
				}
			} else if (_properties[p].$type == "application/x-choice") {
				_ok("$value" in _properties[p], p + ".$value");
				_ok("$type" in _properties[p].$value, p + ".$value.$type");
				_ok("$enum" in _properties[p].$value, p + ".$value.$enum");
				_ok(toString.call(_properties[p].$value.$enum) == '[object Array]', p + ".$value.$enum is an array");
				for (var e in _properties[p].$value.$enum) {
					_ok("$value" in _properties[p].$value.$enum[e], p + ".$value.$enum(" + e + ").$value");
					_ok("$title" in _properties[p].$value.$enum[e], p + ".$value.$enum(" + e + ").$title");
				}
			} else if (_properties[p].$type == "application/x-array") {
				_ok("$item" in _properties[p], p + ".$item");
				_ok("$type" in _properties[p].$item, p + ".$item.$type");

				if (_properties[p].$item.$type == "application/json") {
					_ok("$properties" in _properties[p].$item, p + ".$item.$properties");
					_checkProperties(_properties[p].$item.$properties);
				} else if (_properties[p].$item.$type == "application/x-reference") {
					_checkLinks(_properties[p].$item.$item);
					_ok("$value" in _properties[p].$item.$item, p + ".$value");
					if ("$value" in _properties[p].$item.$item) {
						proNames.push(_properties[p].$item.$item.$value.substring(1, _properties[p].$item.$item.$value.length - 1));
					}
				}
			}
		}
	}

	function _getBinds(_node) {
		var binds = [];
		for (var n in _node) {
			if (n == "$bind") {
				tracer && tracer("push $bind:", _node[n]);
				binds.push(_node[n]);
			}
			if (n == "$layout") {
				binds = binds.concat(_getBinds(_node.$layout));
			}
			if (n == "$items") {
				for (var item in _node.$items) {
					binds = binds.concat(_getBinds(_node.$items[item]));
				}
			}
		}
		return binds;
	}

	var name = _representation + ".$" + _facet;
	try {
		var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('" + _representation + ".$" + _facet + "')"), _statusCode);
		// TEMPORARY HACK TO CAPTURE PROTOS
		//require('streamline-fs').writeFile(__dirname + "/../../../../results/x3/" +  _representation + "-$" + _facet + ".json", JSON.stringify(prototype, null, 2), "utf8");
		tracer && tracer("prototype=", JSON.stringify(prototype, null, 2));
		_strictEqual(true, true, "The JSON is well formed");
	} catch (e) {
		//tracer && tracer(e);
		if (_statusCode == 200) {
			_strictEqual(true, false, "The JSON isn't well formed");
		}
		return test;
	}
	if (_statusCode != 200) {
		return test;
	}

	function cutBaseUrl(s) {
		return (s) ? s.substring(s.indexOf('/sdata')) : "";
	}
	_strictEqual(cutBaseUrl(prototype.$baseUrl), "/sdata/x3/erp/" + config.unit_test.etnaEndPoint, "$baseUrl");
	_strictEqual(prototype.$baseType, "application/json;vnd.sage=syracuse;vnd.sage.syracuse.representation=x3.erp." + prototype.$actxFolder, "$baseType");
	if (_facet in {
		"details": "",
		"edit": "",
		"summary": ""
	}) {
		_strictEqual(prototype.$url, "{$baseUrl}/" + _representation + "('{$key}')?representation=" + _representation + ".$" + _facet, "$url");
	} else {
		_strictEqual(prototype.$url, "{$baseUrl}/" + _representation + "?representation=" + _representation + ".$" + _facet, "$url");
	}
	_strictEqual(prototype.$prototype, "{$baseUrl}/$prototype('{$representation}.$thumb')", "$prototype");
	_strictEqual(prototype.$representation, _representation, "$representation");
	_ok(prototype.$title, "$title");
	_strictEqual(prototype.$type, "{$baseType}." + _representation + ".$" + _facet, "$type");
	_ok("$properties" in prototype, "$properties");
	var properties;
	properties = prototype.$properties;

	if (_facet in {
		"query": "",
		"lookup": ""
	}) {
		_ok("$itemsPerPage" in prototype, "$itemsPerPage");
		_ok("$resources" in properties, "QUERY $resources");
		_ok("$type" in properties.$resources, "QUERY $resources.$type");
		_strictEqual(properties.$resources.$type, "application/x-array", "QUERY $resources.$type");
		_ok("$item" in properties.$resources, "QUERY $resources.$item");
		_strictEqual(properties.$resources.$item.$url, "{$baseUrl}/" + _representation + "('{$key}')?representation=" + _representation + ".$queryItem", "QUERY $resources.$url");
		_strictEqual(properties.$resources.$item.$type, "application/json;vnd.sage=syracuse", "QUERY $resources.$type");
		_ok("$key" in properties.$resources.$item, "QUERY $resources.$item.$key");
		_ok("$value" in properties.$resources.$item, "QUERY $resources.$item.$value");

		_ok("$properties" in properties.$resources.$item, "QUERY $resources.$item.$properties");
		properties = properties.$resources.$item.$properties;
	}

	_checkProperties(properties);
	_checkLinks(prototype);

	if ("$article" in prototype) {
		var binds = _getBinds(prototype.$article);
		//tracer && tracer(binds.join(",")); 
		for (var b in binds) {
			tracer && tracer("?bind:", binds[b]);
			_ok(proNames.indexOf(binds[b]) != -1, "bind:{" + binds[b] + "}");
		}
	}
	if (config.unit_test.etnaEndPoint !== 'etnaOracle') _ok("$localization" in prototype, "$localization");

	tracer && tracer("*** keys:", urlKeys);
	tracer && tracer("*** properties", proNames);
	for (var k in urlKeys) {
		_ok(proNames.indexOf(urlKeys[k]) != -1, "key:{" + urlKeys[k] + "}");
	}
	strictEqual(test.nok, 0, (test.nok ? test.nok + "/" + test.done + " assertions failed:" : test.ok + " assertions ok") + '\n' + test.messages.join('\n'));
	return test;
}


function _compareJSON(_, _representation, _facet) {
	var name = _representation + ".$" + _facet;
	var exceptions = ["AQCLNK01/query/Type/$properties.$resources.$item.$properties/REP_CREUSR_REF", // Not a reference on query facet
		"AQCLNK01/query/Type/$properties.$resources.$item.$properties.REP_CREUSR/$isReadOnly",
		"AQCLNK01/query/Type/$properties.$resources.$item.$properties.REP_CREUSR/$capabilities",
		"ATABLE/details/Type/$properties.ATBATZ.$item.$properties.LIEN/$isExcluded", // Not a reference on details facet
		"ATABLE/details/Type/$properties.ATBATZ.$item.$properties.LIEN/$links",
		"ATABLE/details/Type/$properties.ATBATZ.$item.$properties/LIEN_REF",
		"ATABLE/details/Type/$article.$layout.$items.1.$layout.$items.0.$layout.$items/1", //ATBATZAMP not in Bind (not useful)
		"ATABLE/edit/Type/$article.$layout.$items.1.$layout.$items.0.$layout.$items/1", //ATBATZAMP not in Bind (not useful)
	];
	var wEndPoint1 = "";
	var wEndPoint2 = "";
	var wCollab1 = "/sdata/syracuse/collaboration/syracuse";
	var wCollab2 = "{$collaborationUrl}";

	function _compareObjects(o1, o2) {
		var test = {
			success: true,
			messages: []
		};

		function _compare(o1, o2, path, message) {
			tracer && tracer("_compare(o1, o2)");
			for (var p in o1) {
				tracer && tracer("_compare:", p, toString.call(o1[p]));
				var exception = false;
				if (p === "$baseUrl") {
					wEndPoint1 = o1[p].split('/')[4];
					wEndPoint2 = o2[p].split('/')[4];
				}
				//if (["$baseUrl", "$localization", "$title", "$shortTitle", "capabilities"].indexOf(p) < 0) {
				if (["$x3Format", "$baseUrl", "$collaborationUrl", "$localization", "$title", "$shortTitle", "$actxLan", "$actxLanDef", "$actxLanIso", "$actxUser", "$actxLogin", "$actxLegCur", "$actxNbLeg", "$actxFolder", "$actxSolution"].indexOf(p) < 0) {
					tracer && tracer("_compare:", p, toString.call(o1[p]), toString.call(o2[p]));
					if (toString.call(o2[p]).indexOf("Undefined") >= 0) {
						if (p === "$capabilities" && /^\$properties.*$/.test(path) && ["details", "edit", "summary"].indexOf(_facet) >= 0) {
							exception = true;
						} else if (exceptions.indexOf(_representation + "/" + _facet + "/" + "Type/" + path + "/" + p) >= 0) {
							exception = true;
						} else {
							test.success = false;
							test.messages.push("Type " + path + ": " + p + " " + message);
							tracer && tracer("type undefined ", test.messages[test.messages.length - 1]);
							return test;
						}
					}

					if (exception === false) {
						try {
							tracer && tracer(toString.call(o1[p]), " ? ", toString.call(o2[p]));
							assert.strictEqual(toString.call(o1[p]), toString.call(o2[p]));
							tracer && tracer("JSON type OK ", toString.call(o1[p]));
						} catch (err) {
							test.success = false;
							test.messages.push(path + ": " + p + " " + toString.call(o1[p]) + " <> " + toString.call(o2[p]));
							tracer && tracer("not equal type ", test.messages[test.messages.length - 1]);
							return test;
						}
						tracer && tracer("indexOf", toString.call(o1[p]).indexOf("Object"));
						if ((toString.call(o1[p]).indexOf("Object") >= 0) || (toString.call(o1[p]).indexOf("Array") >= 0)) {
							test = _compare(o1[p], o2[p], path + (path ? "." : "") + p, message);
							if (!test.success) return test;
						} else {
							try {
								if (["$properties.$resources.$item.$links.$delete.$confirm", "$links.$delete.$confirm", "$properties.$resources.$item.$key",
									"$properties.$resources.$item.$value", "$key", "$value"
								].indexOf((path + (path ? "." : "") + p)) < 0 && ["$where"].indexOf(p) < 0) {
									if (p === "$url") {
										o1[p] = o1[p].replace(wEndPoint1, wEndPoint2);
										o1[p] = o1[p].replace(wCollab1, wCollab2);
										o2[p] = o2[p].replace(wEndPoint1, wEndPoint2);
										o2[p] = o2[p].replace(wCollab1, wCollab2);
									}
									assert.strictEqual(o1[p], o2[p]);
									tracer && tracer("JSON value OK ", o1[p]);
								}
							} catch (err) {
								if (exceptions.indexOf(_representation + "/" + _facet + "/" + "Value/" + path + "/" + p) < 0) {
									test.success = false;
									test.messages.push("Value " + path + ": " + p + " " + o1[p] + " <> " + o2[p]);
									tracer && tracer("not equal value ", test.messages[test.messages.length - 1]);
									return test;
								}
							}
						}
					}
				}
			}
			return test;
		}

		test = _compare(o1, o2, "", "should be present");
		if (!test.success) {
			test.messages.push("\nComparison : fixtures <> " + _representation + ".$" + _facet);
			return test;
		}
		test = _compare(o2, o1, "", "should not be present");
		if (!test.success) {
			test.messages.push("\nComparison : " + _representation + ".$" + _facet + " <> fixtures ");
			return test;
		}
		return test;
	}

	var p1 = {};
	try {
		p1 = require("syracuse-x3/test/fixtures/" + _representation.toLowerCase() + "_" + _facet);
	} catch (e) {
		ok(false, "require failed with error " + e);
		return test;
	}
	var p2 = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('" + _representation + ".$" + _facet + "')"), 200);
	var test = _compareObjects(p1, p2);
	ok(test.success, _representation + ".$" + _facet + " : " + (test.messages.join('\n') || "OK"));

}

function _compareJSONs(_, _representation, Detail, Edit, Query, Lookup, Summary) {
	var facets = [];
	if (Detail === true) facets.push("details");
	if (Edit === true) facets.push("edit");
	if (Query === true) facets.push("query");
	if (Lookup === true) facets.push("lookup");
	if (Summary === true) facets.push("summary");

	for (var i in facets) {
		_compareJSON(_, _representation, facets[i]);
	}
}



/*
 * issue - AQCREQ3 SAM 101237 : Queries' prototypes
 */
function _checkRequesterPrototype(_, query, facet) {
	facet = facet || "$query";
	var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('QUERY~" + query + "~1." + facet + "')"), 200);
	ok(prototype.$url == "{$baseUrl}/QUERY('" + query + "')?representation=QUERY~" + query + ".$query&role={$role}", "prototype.$url=[" + prototype.$url + "]");
	console.log("$baseUrl=[" + prototype.$baseUrl + "]");
	console.log("$title=[" + prototype.$title + "]");
	ok(prototype.$title, "$title=[" + prototype.$title + "]");
	ok(prototype.$methods == "GET", "prototype.$methods=[" + prototype.$methods + "]");
	ok(prototype.codeRequest == query, "prototype.codeRequest=[" + prototype.codeRequest + "]");
	ok(prototype.$links, "$links");
	ok(prototype.$links.Excel.$title == "Excel", "prototype.$links.Excel.$title=[" + prototype.$links.Excel.$title + "]");
	ok(prototype.$links.Excel.$type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "prototype.$links.Excel.$title=[" + prototype.$links.Excel.$type + "]");
	ok(prototype.$links.Excel.$url == "{$baseUrl}/QUERY('" + query + "')?representation=QUERY~" + query + "~1.$bulk&level=1&role={$role}&cube={ifCube}&startRecord={first_record}", "prototype.$links.Excel.$title=[" + prototype.$links.Excel.$url + "]");
	//ok(prototype.$links.$refresh.$title == "Refresh", "prototype.$links.$refresh.$title=[" + prototype.$links.$refresh.$title + "]");
	ok(prototype.$links.$refresh.$type == "application/json;vnd.sage=syracuse", "prototype.$links.$refresh.$title=[" + prototype.$links.$refresh.$type + "]");
	ok(prototype.$links.$refresh.$url == "{$baseUrl}/QUERY('" + query + "')?representation=QUERY~" + query + "~{level_c}.$query&level={level_c}&role={$role}&cube={ifCube}&startRecord={first_record}&view={$clink}&portview={$portview}&recordsPerPage={$itemsPerPage}&forcedExecution=true", "prototype.$links.Refresh.$title=[" + prototype.$links.$refresh.$url + "]");
	ok(prototype.$properties.$resources.$item.$properties.line_no.$title == "No Ligne", "prototype.$properties.$resources.$item.$properties.line_no.$title=[" + prototype.$properties.$resources.$item.$properties.line_no.$title + "]");
	ok(prototype.$properties.$resources.$item.$properties.line_no.$type == "application/x-integer", "prototype.$properties.$resources.$item.$properties.line_no.$type=[" + prototype.$properties.$resources.$item.$properties.line_no.$type + "]");
	if (query == "AQCREQ3") {
		ok(prototype.$properties.$resources.$cube.$mode == "table", "prototype.$properties.$resources.$cube.$mode=[" + prototype.$properties.$resources.$cube.$mode + "]");
		ok(prototype.$properties.$resources.$cube.$title == "Test", "prototype.$properties.$resources.$cube.$title=[" + prototype.$properties.$resources.$cube.$title + "]");
		ok(prototype.$properties.$resources.$axes[0].$hierarchies == "CRY", "prototype.$properties.$resources.$axes[0].$hierarchies=[" + prototype.$properties.$resources.$axes[0].$hierarchies + "]");
		ok(prototype.$properties.$resources.$axes[1].$title == "$measures", "prototype.$properties.$resources.$axes[1].$title=[" + prototype.$properties.$resources.$axes[1].$title + "]");
		ok(prototype.$properties.$resources.$axes[1].$hierarchies == "$measures", "prototype.$properties.$resources.$axes[1].$hierarchies=[" + prototype.$properties.$resources.$axes[1].$hierarchies + "]");
	}

}

function _checkRequesterPayloadAQCREQ3_3(_, query, facet) {
	facet = facet || "$query";
	var payload = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("QUERY('" + query + "')?representation=QUEY~" + query + "~3." + facet + "&level=3"), 200);
	ok(payload.$totalResults == 100, "payload.$totalResults=[" + payload.$totalResults + "]");
	ok(payload.$itemsPerPage == 20, "payload.$itemsPerPage=[" + payload.$itemsPerPage + "]");
	ok(payload.headerMessage !== "", "payload.headerMessage=[" + payload.headerMessage + "]");
	//ok(payload.levelMessage == "3 / 3 >> AN > ", "payload.levelMessage=[" + payload.levelMessage + "]");
	ok(payload.levelMessage == "3 / 3", "payload.levelMessage=[" + payload.levelMessage + "]");
	var i;
	for (i = 0; i < Math.min(payload.$itemsPerPage, payload.$totalResults); i++) {
		ok(payload.$resources[i].line_no == i + 1, "payload.$resources[i].line_no(" + payload.$resources[i].line_no + ")");
	}
	ok("AN" == payload.$resources[0].CRY, "CRY(0)=[" + payload.$resources[0].CRY + "]");
	ok("AR" == payload.$resources[8].CRY, "CRY(8)=[" + payload.$resources[8].CRY + "]");
	ok("CA" == payload.$resources[16].CRY, "CRY(16)=[" + payload.$resources[16].CRY + "]");
}

function _checkRequesterPayloadAQCREQ3_2(_, query, facet) {
	facet = facet || "$query";
	var payload = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("QUERY('" + query + "')?representation=QUERY~" + query + "~2." + facet + "&level=2"), 200);
	ok(payload.$totalResults == 13, "payload.$totalResults=[" + payload.$totalResults + "]");
	ok(payload.$itemsPerPage == 20, "payload.$itemsPerPage=[" + payload.$itemsPerPage + "]");
	var i;
	for (i = 0; i < Math.min(payload.$itemsPerPage, payload.$totalResults); i++) {
		ok(payload.$resources[i].line_no == i + 1, "payload.$resources[i].line_no(" + payload.$resources[i].line_no + ")");
	}
	ok("AN" == payload.$resources[0].CRY, "CRY(0)=AN");
	ok("AR" == payload.$resources[1].CRY, "CRY(1)=AR");
	ok("FR" == payload.$resources[6].CRY, "CRY(6)=FR");
	ok("US" == payload.$resources[12].CRY, "CRY(12)=US");
}

function _checkRequesterPayloadAQCREQ3_1(_, query, facet) {
	facet = facet || "$query";
	var payload = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("QUERY('" + query + "')?representation=QUERY~" + query + "~1." + facet + "&level=1"), 200);
	ok(payload.$totalResults == 13, "payload.$totalResults=[" + payload.$totalResults + "]");
	ok(payload.$itemsPerPage == 20, "payload.$itemsPerPage=[" + payload.$itemsPerPage + "]");
	var i;
	for (i = 0; i < Math.min(payload.$itemsPerPage, payload.$totalResults); i++) {
		ok(payload.$resources[i].line_no == i + 1, "payload.$resources[i].line_no(" + payload.$resources[i].line_no + ")");
	}
	ok("AN" == payload.$resources[0].CRY, "CRY(0)=AN");
	ok("AR" == payload.$resources[1].CRY, "CRY(1)=AR");
	ok("FR" == payload.$resources[6].CRY, "CRY(6)=FR");
	ok("US" == payload.$resources[12].CRY, "CRY(12)=US");
}

function testPrototypeAQCREQ3() {
	asyncTest("Requester-Prototype" + x3Helper.gitHubIssue(5975), (_) => {
		_checkRequesterPrototype(_, "AQCREQ3");
		start();
	});
}

function testPayloadAQCREQ3() {
	asyncTest("Requester-Payload" + x3Helper.gitHubIssue(5975), (_) => {
		_checkRequesterPayloadAQCREQ3_1(_, "AQCREQ3");
		_checkRequesterPayloadAQCREQ3_2(_, "AQCREQ3");
		_checkRequesterPayloadAQCREQ3_3(_, "AQCREQ3");
		start();
	});
}

/*
 * issue - AQCREQ1 SAM 101237 : Queries' prototypes
 */
function _checkRequesterPayloadAQCREQ1_1(_, query, facet) {
	facet = facet || "$query";
	var payload = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("QUERY('" + query + "')?representation=QUERY~" + query + "~1." + facet), 200);
	ok(payload.$totalResults == 10000, "payload.$totalResults=[" + payload.$totalResults + "]");
	ok(payload.$itemsPerPage == 20, "payload.$itemsPerPage=[" + payload.$itemsPerPage + "]");
	var i;
	for (i = 0; i < Math.min(payload.$itemsPerPage, payload.$totalResults); i++) {
		ok(payload.$resources[i].line_no == i + 1, "payload.$resources[i].line_no(" + payload.$resources[i].line_no + ")");
	}
}

function _checkRequesterPayloadAQCREQ11_1(_, query, facet) {
	facet = facet || "$query";
	var payload = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("QUERY('" + query + "')?representation=QUERY~" + query + "~1." + facet), 200);
	ok(payload.$totalResults == 10000, "payload.$totalResults=[" + payload.$totalResults + "]");
	ok(payload.$itemsPerPage == 20, "payload.$itemsPerPage=[" + payload.$itemsPerPage + "]");
	var i;
	for (i = 0; i < Math.min(payload.$itemsPerPage, payload.$totalResults); i++) {
		ok(payload.$resources[i].line_no == i + 1, "payload.$resources[i].line_no(" + payload.$resources[i].line_no + ")");
	}
}

function _checkRequesterPayloadAQCREQ2_1(_, query, facet) {
	facet = facet || "$query";
	var payload = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("QUERY('" + query + "')?representation=QUERY~" + query + "~1." + facet + "&level=1"), 200);
	ok(payload.$totalResults !== 0, "payload.$totalResults=[" + payload.$totalResults + "]");
	ok(payload.$itemsPerPage == 20, "payload.$itemsPerPage=[" + payload.$itemsPerPage + "]");
	var i;
	for (i = 0; i < Math.min(payload.$itemsPerPage, payload.$totalResults); i++) {
		ok(payload.$resources[i].line_no == i + 1, "payload.$resources[i].line_no(" + payload.$resources[i].line_no + ")");
	}
	ok("AN" == payload.$resources[0].CRY, "CRY(0)=AN");
	ok("AR" == payload.$resources[1].CRY, "CRY(1)=AR");
}

function _checkRequesterPayloadAQCREQ2_2(_, query, facet) {
	facet = facet || "$query";
	var payload = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("QUERY('" + query + "')?representation=QUERY~" + query + "~2." + facet + "&level=2"), 200);
	ok(payload.$totalResults !== 0, "payload.$totalResults=[" + payload.$totalResults + "]");
	ok(payload.$itemsPerPage == 20, "payload.$itemsPerPage=[" + payload.$itemsPerPage + "]");
	var i;
	for (i = 0; i < Math.min(payload.$itemsPerPage, payload.$totalResults); i++) {
		ok(payload.$resources[i].line_no == i + 1, "payload.$resources[i].line_no(" + payload.$resources[i].line_no + ")");
	}
	ok("AN" == payload.$resources[0].CRY, "CRY(0)=AN");
	ok("AN" == payload.$resources[1].CRY, "CRY(1)=AN");

}

function testPrototypeAQCREQ1() {
	asyncTest("Requester-Prototype" + x3Helper.gitHubIssue(5975), (_) => {
		_checkRequesterPrototype(_, "AQCREQ1");
		start();
	});
}

function testPayloadAQCREQ1() {
	asyncTest("Requester-Payload" + x3Helper.gitHubIssue(5975), (_) => {
		_checkRequesterPayloadAQCREQ1_1(_, "AQCREQ1", "$query");
		start();
	});
}

function testPrototypeAQCREQ11() {
	asyncTest("Requester-Prototype" + x3Helper.gitHubIssue(5975), (_) => {
		_checkRequesterPrototype(_, "AQCREQ11");
		start();
	});
}

function testPayloadAQCREQ11() {
	asyncTest("Requester-Payload" + x3Helper.gitHubIssue(5975), (_) => {
		_checkRequesterPayloadAQCREQ11_1(_, "AQCREQ11");
		start();
	});
}

function testPrototypeAQCREQ2() {
	asyncTest("Requester-Prototype" + x3Helper.gitHubIssue(5975), (_) => {
		_checkRequesterPrototype(_, "AQCREQ2");
		start();
	});
}

function testPayloadAQCREQ2() {
	asyncTest("Requester-Payload" + x3Helper.gitHubIssue(5975), (_) => {
		_checkRequesterPayloadAQCREQ2_1(_, "AQCREQ2");
		_checkRequesterPayloadAQCREQ2_2(_, "AQCREQ2");
		start();
	});
}

testPrototypeAQCREQ1();
testPayloadAQCREQ1();

testPrototypeAQCREQ11();
testPayloadAQCREQ11();

testPrototypeAQCREQ2();
testPayloadAQCREQ2();

