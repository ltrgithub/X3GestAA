
# Currency - CRUD

Local Integer MY_STATUS
Local Instance MY_LOG Using C_ALOG
MY_LOG = NewInstance C_ALOG AllocGroup null
[L]MY_STATUS = fmet MY_LOG.ASETNAME("QLFAC_TABCUR_"+GACTX.USER)
[L]MY_STATUS = fmet MY_LOG.ABEGINLOG("QLFAC_TABCUR")

Local Clbfile RESULT
RESULT =  func TESTSUITE()
FreeGroup MY_LOG
#GTRACE = "QLFAC_TABCUR_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!
Subprog SETUP
# Database cleaning
If clalev([F:TCU])=0 : Local File TABCUR [TCU] : Endif
Onerrgo ERROR_SETUP_NOTFOUND
Trbegin [TCU]
Delete [TCU]TCU0 = "ZCU"
Commit
Onerrgo
Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT
End

$ERROR_SETUP_NOTFOUND
Resume
#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

Call TESTSUITE_START("TABCUR", "Test suite for Class TABCUR") From AXUNIT

Call ADD_TESTCASE("TABCUR_CREATION","Creation of TABCUR ZCU",9) From AXUNIT
Call ADD_TESTCASE("TABCUR_READ","Read TABCUR ZCU",1) From AXUNIT
Call ADD_TESTCASE("TABCUR_UPDATE","Update TABCUR ZCU",2) From AXUNIT
#Call ADD_TESTCASE("TABCUR_DELETE","Deletion of TABCUR ZCU",2) From AXUNIT

Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("TABCUR", "SYRA_TABCUR")

End SUITE_RESULT

#**
#* Creation of a TABCUR
#*
#*!
Subprog TABCUR_CREATION()
Local Integer MY_STATUS

Local Instance QLFTCU Using C_TABCUR
QLFTCU = NewInstance C_TABCUR AllocGroup null

# Initialize Instance
[L]MY_STATUS = fmet QLFTCU.AINIT()
Call CHECK_EQUAL("AINIT"-num$([L]MY_STATUS),"AINIT"-num$([V]CST_AOK)) From AXUNIT

#**
#* Mandatory Properties of Class TABCUR
#* INTSHO
#* INTDES
#* DECNBR
#* CURSYM
#* EURRAT set as mandatory depending on EURFLG
#*!
QLFTCU.CUR    = "ZCU"

# Expect error mandatory fields not supplied.
[L]MY_STATUS = fmet QLFTCU.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
Gosub WRITE_ERRORS

FreeGroup QLFTCU

QLFTCU = NewInstance C_TABCUR AllocGroup null

# Initialize Instance
[L]MY_STATUS = fmet QLFTCU.AINIT()
Call CHECK_EQUAL("AINIT"-num$([L]MY_STATUS),"AINIT"-num$([V]CST_AOK)) From AXUNIT

# Load mandatory values
# Load mandatory values
QLFTCU.CUR           = "ZCU"
QLFTCU.INTDES        = "Description ZCU"
QLFTCU.INTSHO        = "Des"
QLFTCU.CURRND        = 0.01
QLFTCU.DCURFMT1      = 13.2
QLFTCU.DCURFMT2      = 6.2
QLFTCU.DCURFMT3      = 13.2
QLFTCU.CURSYM        = "$"
QLFTCU.DECNBR        = 2
QLFTCU.ISOCOD        = "USD"

# Expect OK
[L]MY_STATUS = fmet QLFTCU.AINSERT()
Call CHECK_EQUAL("Valid insert"-num$([L]MY_STATUS),"Valid insert"-num$([V]CST_AOK)) From AXUNIT
Gosub WRITE_ERRORS

FreeGroup QLFTCU
End


#**
#* Read a TABCUR
#*!
Subprog TABCUR_READ()
Local Integer MY_STATUS

Local Instance QLFTCU Using C_TABCUR
QLFTCU = NewInstance C_TABCUR AllocGroup null

[L]MY_STATUS = fmet QLFTCU.AREAD("ZCU")
Call CHECK_EQUAL("Read"-num$([L]MY_STATUS),"Read"-num$([V]CST_AOK)) From AXUNIT

FreeGroup QLFTCU
End

#**
#* Update a TABCUR
#*!
Subprog TABCUR_UPDATE()
Local Integer MY_STATUS
Local Instance QLFTCU Using C_TABCUR
QLFTCU = NewInstance C_TABCUR AllocGroup null

[L]MY_STATUS = fmet QLFTCU.AREAD("ZCU")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

QLFTCU.INTDES = "Currency DES"
QLFTCU.INTSHO = "Upd SHO"

[L]MY_STATUS = fmet QLFTCU.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

FreeGroup QLFTCU
End

#**
#* Delete a TABCUR
#*!
Subprog TABCUR_DELETE()
Local Integer MY_STATUS
Local Instance QLFTCU Using C_TABCUR
QLFTCU = NewInstance C_TABCUR AllocGroup null

[L]MY_STATUS = fmet QLFTCU.AREAD("ZCU")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

[L]MY_STATUS = fmet QLFTCU.ADELETE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

FreeGroup QLFTCU
End

$WRITE_ERRORS
Local Integer I
Local Char RPROP(255)
Local Integer RSTATUS
Local Char RPROP_LAB(255)
Local Char RERR_MESS(255)
Local Integer RCATEGORY
Local Char RENVIRONMENT(255)

If pat(ver$(0),"etna*")>0
  MY_STATUS = fmet QLFTCU.ASEARCHINFOS( [V]CST_ALL, "", [V]CST_AFATAL, 0)
  while MY_STATUS = [V]CST_AOK
    MY_STATUS = fmet QLFTCU.AGETNEXTINFOS( RSTATUS, RPROP, RPROP_LAB, RERR_MESS, RCATEGORY, RENVIRONMENT)
    if MY_STATUS = [V]CST_AOK
      Call CHECK_NOTEQUAL(RPROP-":"-RERR_MESS,"") From AXUNIT
    Endif
  Wend
Else
	For I=1 To maxtab(QLFTCU.AERROR)
	 If  QLFTCU.AERROR(I)<>null & QLFTCU.AERROR(I).DEL<>2
	   Call CHECK_EQUAL(QLFTCU.AERROR(I).PRO-":"-QLFTCU.AERROR(I).MES,QLFTCU.AERROR(I).PRO-":"-QLFTCU.AERROR(I).MES) From AXUNIT
	 Endif
	Next I
Endif
Return

