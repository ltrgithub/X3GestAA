
Local Integer MY_STATUS
Local Instance MY_LOG Using C_ALOG
MY_LOG = NewInstance C_ALOG AllocGroup null
[L]MY_STATUS = fmet MY_LOG.ASETNAME("QLFAC_POSCOD_"+GACTX.USER)
[L]MY_STATUS = fmet MY_LOG.ABEGINLOG("QLFAC_POSCOD")

Local Clbfile RESULT
RESULT =  func TESTSUITE()
FreeGroup MY_LOG

##GTRACE = "QLFAC_POSCOD_"+GACTX.USER
#Call LEC_TRACE From LECFIC
End

#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!
Subprog SETUP
# Database cleaning
If clalev([F:POS])=0 : Local File POSCOD [POS] : Endif
Onerrgo ERROR_SETUP_NOTFOUND
Trbegin [POS]
Delete [POS] Where POSCOD = "111112222"
Commit
Onerrgo
Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT
End

$ERROR_SETUP_NOTFOUND
Resume
#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

Call TESTSUITE_START("POSCOD", "Test suite for Class POSCOD") From AXUNIT

Call ADD_TESTCASE("POSCOD_CREATION","Creation of POSCOD 111112222",8) From AXUNIT
Call ADD_TESTCASE("POSCOD_READ","Read POSCOD 111112222",1) From AXUNIT
Call ADD_TESTCASE("POSCOD_UPDATE","Update POSCOD 111112222",2) From AXUNIT
Call ADD_TESTCASE("POSCOD_DELETE","Deletion of POSCOD 111112222",2) From AXUNIT

Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("POSCOD", "SYRA_POSCOD")

End SUITE_RESULT

#**
#* Creation of a POSCOD
#*
#*!
Subprog POSCOD_CREATION()
Local Integer MY_STATUS

Local Instance QLFPOS Using C_POSCOD
QLFPOS = NewInstance C_POSCOD AllocGroup null
# Initialize Instance
[L]MY_STATUS = fmet QLFPOS.AINIT()
Call CHECK_EQUAL("Initialize"-num$([L]MY_STATUS),"Initialize"-num$([V]CST_AOK)) From AXUNIT

#**
#* Mandatory Properties of Class POSCOD
#* CRY        [CRY]
#* POSCOD     [POS]
#* POSCTY     [CTY]
#* POSCTYCOD  [A]
#*!
QLFPOS.POSCOD    = "111112222"
QLFPOS.CRY       = "XX"
QLFPOS.POSCTY    = ""
QLFPOS.POSCTYCOD = ""

# Expect error mandatory fields not supplied.
[L]MY_STATUS = fmet QLFPOS.AINSERT()
Call CHECK_EQUAL("Missing mandatory properties"-num$([L]MY_STATUS),"Missing mandatory properties"-num$([V]CST_AERROR)) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup QLFPOS

# Build standard postal code that is valid to insert
QLFPOS = NewInstance C_POSCOD AllocGroup null
# Initialize Instance
[L]MY_STATUS = fmet QLFPOS.AINIT()
Call CHECK_EQUAL("Initialize"-num$([L]MY_STATUS),"Initialize"-num$([V]CST_AOK)) From AXUNIT

# Load mandatory values
QLFPOS.CRY       = "US"
QLFPOS.POSCOD    = "111112222"
QLFPOS.POSCTY    = "WILMERDING"
QLFPOS.POSCTYCOD = "Z123"
QLFPOS.SATCOD    = "FL"
# Expect OK
[L]MY_STATUS = fmet QLFPOS.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Call CHECK_EQUAL("Valid Insert"-num$([L]MY_STATUS),"Valid Insert"-num$([V]CST_AOK)) From AXUNIT
Gosub WRITE_ERRORS

FreeGroup QLFPOS
End


#**
#* Read a POSCOD
#*!
Subprog POSCOD_READ()
Local Integer MY_STATUS

Local Instance QLFPOS Using C_POSCOD
QLFPOS = NewInstance C_POSCOD  AllocGroup null

[L]MY_STATUS = fmet QLFPOS.AREAD("US","111112222","WILMERDING","Z123")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup QLFPOS
End

#**
#* Update a POSCOD
#*!
Subprog POSCOD_UPDATE()
Local Integer MY_STATUS
Local Instance QLFPOS Using C_POSCOD
QLFPOS = NewInstance C_POSCOD AllocGroup null

[L]MY_STATUS = fmet QLFPOS.AREAD("US","111112222","WILMERDING","Z123")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

QLFPOS.SATCOD = "SC"

[L]MY_STATUS = fmet QLFPOS.AUPDATE()
Call CHECK_EQUAL("Update POSCOD"-num$([L]MY_STATUS),"Update POSCOD"-num$([V]CST_AOK)) From AXUNIT
Gosub WRITE_ERRORS

FreeGroup QLFPOS
End

#**
#* Delete a POSCOD
#*!
Subprog POSCOD_DELETE()
Local Integer MY_STATUS
Local Instance QLFPOS Using C_POSCOD
QLFPOS = NewInstance C_POSCOD AllocGroup null

[L]MY_STATUS = fmet QLFPOS.AREAD("US","111112222","WILMERDING","Z123")
Call CHECK_EQUAL("Delete POSCOD"-num$([L]MY_STATUS),"Delete POSCOD"-num$([V]CST_AOK)) From AXUNIT
Gosub WRITE_ERRORS

[L]MY_STATUS = fmet QLFPOS.ADELETE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup QLFPOS
End

$WRITE_ERRORS
# Write errors
Local Integer I
For I=1 To maxtab(QLFPOS.AERROR)
 If  QLFPOS.AERROR(I)<>null & QLFPOS.AERROR(I).DEL<>2
   Call CHECK_EQUAL(QLFPOS.AERROR(I).PRO-":"-QLFPOS.AERROR(I).MES,QLFPOS.AERROR(I).PRO-":"-QLFPOS.AERROR(I).MES) From AXUNIT
 Endif
Next I
Return

