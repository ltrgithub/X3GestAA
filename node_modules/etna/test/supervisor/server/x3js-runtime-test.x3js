"use strict";
const tdate = require('etna/lib/engine/runtime/tdate');

QUnit.module(module.id);

function throws(fn, expected, message) {
	if ( typeof expected === "string" ) {
		message = expected;
		expected = null;
	}
	try {
		fn();
		ok(false, message);
	} catch (ex) {
		if (expected) ok(expected.test(ex), message + ' ' + ex.message);
		else ok(true, message);
	}
}

test('null', 8, () => {
	ok(null == null, 'null == null');
	ok(null == undefined, 'null == undefined');
	ok(undefined == null, 'undefined == null');
	ok(undefined == undefined, 'undefined == undefined');
	ok({} != null, '{} != null');
	ok([] != null, '[] != null');
	ok(0 != null, '0 != null');
	throws(() => 0 > null, /cannot compare/, '0 > null throws');
});

test('sanity', 1, () => {
	throws(() => [] == 0, /bad operand/, '[] == 0 throws');
});

test('bcd', 6, () => {
	ok(0.1 + 0.2 == 0.3, '0.1 + 0.2 == 0.3');
	ok(0.5 + 0.5 == 1, '0.5 + 0.5 == 1');
	ok(0.1e0 + 0.2e0 != 0.3e0, '0.1e0 + 0.2e0 != 0.3e0');
	ok(0.1e0 + 0.2 == 0.3, '0.1e0 + 0.2 == 0.3'); // promotion to decimal
	ok(0.5e0 + 0.5e0 == 1, '0.5e0 + 0.5e0 == 1');
	throws(() => 1 + "", /bad operand/, '1 + "" throws');
});

test('date', 6, () => {
	ok(tdate.MIN > tdate.NULL, 'tdate.MIN > tdate.NULL');
	ok(tdate.MIN < tdate.today(), 'tdate.MIN < tdate.today()');
	ok(tdate.MAX > tdate.today(), 'tdate.MAX > tdate.today()');
	ok(tdate.today() + 1 > tdate.today(), 'tdate.today() + 1 > tdate.today()');
	ok(tdate.today() - 1 < tdate.today(), 'tdate.today() - 1 < tdate.today()');
	strictEqual("" + tdate.MIN, '1600-01-01', '"" + tdate.MIN');
});

