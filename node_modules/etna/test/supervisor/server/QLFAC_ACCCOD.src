Call OUVRE_TRACE("QLFAC_ACCCOD") From LECFIC
Local Clbfile RESULT

RESULT =  func TESTSUITE()
Call FERME_TRACE From LECFIC
GTRACE = "QLFAC_ACCCOD_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

#Test from ZRONRUNTEST
#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!
Subprog SETUP

  # Database cleaning
  Local File ACCCOD [ACS]

  Onerrgo ERROR_SETUP_NOTFOUND
  Trbegin [ACS]
  Delete [ACS]ACS0 = "ZACCCOD"
  Commit
  Onerrgo
  Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT

  Close Local File [ACS]
End

$ERROR_SETUP_NOTFOUND
Resume


#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

  # Start the test suite
  Call TESTSUITE_START("ACCCOD", "Access codes")                               From AXUNIT

  Call ADD_TESTCASE("ACCCOD_AINSERT","Creation of  access code record ZACCCOD",2)         From AXUNIT
  Call ADD_TESTCASE("ACCCOD_AREAD","Read access code record ZACCCOD",3)                 From AXUNIT
  Call ADD_TESTCASE("ACCCOD_AUPDATE","Update access code record ZACCCOD",4)              From AXUNIT
  Call ADD_TESTCASE("ACCCOD_ADELETE","Delete access code record ZACCCOD",2)              From AXUNIT

  # Run the test and return the result
  Local Clbfile RESULT_SUITE
  RESULT_SUITE=func AXUNIT.RUN_TESTSUITE("ACCCOD","Access code  test")

End RESULT_SUITE


Subprog ACCCOD_AINSERT()
  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_ACCCOD
  MYINSTANCE = NewInstance C_ACCCOD AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AINIT()
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT

  MYINSTANCE.CODACC = "ZACCCOD"
  MYINSTANCE.INTACC = "ZACCCOD Description INTACC"
  MYINSTANCE.DESACC = "ZACCCOD Description DESACC"

  [L]ASTATUS = fmet MYINSTANCE.AINSERT
  Call LOG_LINE("Check the AINSERT method for valid record") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS
  #
  FreeGroup MYINSTANCE
End


Subprog ACCCOD_AREAD

  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_ACCCOD
  MYINSTANCE = NewInstance C_ACCCOD AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AREAD("ZACCCOD")

  Call LOG_LINE("Check the AREAD method") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  Call LOG_LINE("Verify the values read") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.INTACC,"ZACCCOD Description INTACC") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.DESACC,"ZACCCOD Description DESACC") From AXUNIT

  FreeGroup MYINSTANCE
End


Subprog ACCCOD_AUPDATE

  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_ACCCOD
  MYINSTANCE = NewInstance C_ACCCOD AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AREAD("ZACCCOD")

  Call LOG_LINE("Check the AREAD method from ACCCOD_AUPDATE") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  MYINSTANCE.INTACC = "ZACCCOD Description INTACC 1"
  [L]ASTATUS = fmet MYINSTANCE.AUPDATE()
  Call LOG_LINE("Check the AUPDATE method") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  #Re-read updated record to ensure fields were properly updated
  FreeGroup MYINSTANCE
  MYINSTANCE = NewInstance C_ACCCOD AllocGroup null
  [L]ASTATUS = fmet MYINSTANCE.AREAD("ZACCCOD")
  Call LOG_LINE("Check the AREAD method from ACCCOD_AUPDATE") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  Call LOG_LINE("Verify the updated values") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.INTACC,"ZACCCOD Description INTACC 1") From AXUNIT

  FreeGroup MYINSTANCE
End


Subprog ACCCOD_ADELETE
  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_ACCCOD
  MYINSTANCE = NewInstance C_ACCCOD AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AREAD("ZACCCOD")

  Call LOG_LINE("Check the AREAD method from ACCCOD_ADELETE") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  Call LOG_LINE("Check the ADELETE method") From AXUNIT
  [L]ASTATUS = fmet MYINSTANCE.ADELETE()
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup MYINSTANCE
End


#**
#* Write errors to log
#*!
$WRITE_ERRORS
Local Integer I
For I=1 To maxtab(MYINSTANCE.AERROR)
 If  MYINSTANCE.AERROR(I)<>null & MYINSTANCE.AERROR(I).STA=[V]CST_AERROR & MYINSTANCE.AERROR(I).DEL<>2
   Call LOG_LINE(MYINSTANCE.AERROR(I).PRO-":"-MYINSTANCE.AERROR(I).MES) From AXUNIT
 Endif
Next I
Return

