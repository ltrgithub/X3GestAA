"use strict";

module.exports = {
  className: 'AQCLNK01',
  properties: {},
  events: {
    readAfter: function(_, context) {
      this.CCALC$ = this.FIELD01$ + ' ' + this.FIELD02$;
      this.CCALC2$ = this.FIELD01$ + ' ' + this.FIELD02$;
    },
  },
  operations: {
    clean: function(_, context) {
      context.tables.AQCLNK01$.clear(_);
    },
    setup: function(_, context) {
      const table = context.tables.AQCLNK01$;
      context.withTransaction(_, function(_) {
        for (var i = 1; i <= 100; i++) {
          const j = 1 + (i - 1) % 10;
          const k = i % 5;
          var rec = {
            CREUSR: "AQC",
            CREDATTIM: context.datetime.make(2015, 5, 31),
            AUUID: context.uuid.generate(),
            ACCESS: ["AQCACS1", "AQCACS2"][j - 1] || "",
            FIELD01: "F1_" + context.string.format("N0:3", i),
            FIELD02: "F2_" + context.string.format("N0:3", j),
          }
          if (k) {
            const f03 = "R01P01_" + context.string.format("N0:2", k);
            Object.assign(rec, {
              FIELD03: f03,
              FIELD04: f03,
              FIELD05: f03,
              FIELD06: f03,
            });
          }
          table.insertRecord(_, rec);
        }
      });
    },
    op1: function(_, context, f1) {
      if (parseInt(f1.substring(3)) < 50) {
        const rec = context.tables.AQCLNK01$.readRecord(_, f1);
        return rec.CREDATTIM.date;
      } else {
        return context.date.NULL;
      }
    },
    op2: function(_, context, f1) {
      const filler = "My'Return" + '"Value&Char';
      if (f1 == '' || parseInt(f1.substring(3)) < 50) {
        return f1 + ' ' + 'x'.repeat(250 - (f1 + filler).length - 1) + filler;
      } else {
        return f1 + ' ' + filler;
      }
    },
    op3: function(_, context, f1) {
      return f1 ? 2 * parseInt(f1.substring(3)) : 0;
    },
    op4: function(_, context, f1) {
      return 1.35 * parseInt(f1.substring(3));
    },
    op5: function(_, context, f1) {
      if (parseInt(f1.substring(3)) < 50) {
        const watb = context.classes.TableDictionary$.read(_, "AQCLNK01");
        return "AQCLNK01 CFG=" + watb.FICCFG$;
      } else {
        const A = 'A'.charCodeAt(0);
        var s = f1 + "=";
        for (var i = 0; i <= 50; i++)
        s += String.fromCharCode(A + i);
        return s;
      }
    },
    op6: function(_, context, f1) {
      if (parseInt(f1.substring(3)) < 50) {
        const aql01 = context.classes.AQCLNK01$.read(_, f1);
        const waus = context.classes.AUTILIS$.read(_, aql01.CREUSR$);
        return waus.AUSPIC$;
      } else {
        return context.blob.fromBase64("R0lGODlhBgAJAJECAPj3+NXt/wAAAAAAACH5BAEAAAIALAAAAAAGAAkAAAINlC+AqQfREmygOrYiKgA7");
      }
    },
    opp1: function(_, context, f1, p1, p2, p3, p4, p7, p8, p11, p12) {
      // fix uuid.toString and datetime.toString later (p11)
      // skip p7 if empty to mimic space collapsing of 4GL `-` string operator
      return [f1.trim(), p1, p2, p3, p4].concat(p7 ? [p7] : []).concat([p8.toString('dd/MM/yyyy'), p11.x3ToString(), p12.x3ToString()]).join(' ');
    },
    opp2: function(_, context, f1, p1, p2, p3, p4, p7, p8, p11, p12) {
      ++p1;
      ++p2;
      ++p3;
      ++p4;
      p7 += 'X';
      p8 = p8 + 1;
      P11 = p11 != null ? context.uuid.NULL : p11;
      if (p12.value == 0) p12 = (context.date.NULL + 1).at(p12.time); // hack until we eliminate date.x3IsZero
      else p12 = (p12.date + 1).at(p12.time);
      var str = [f1.trim(), p1, p2, p3, p4].concat(p7 ? [p7] : []).concat([p8.toString('dd/MM/yyyy'), p11.x3ToString(), p12.x3ToString()]).join(' ');
      return [p1, p2, p3, p4, p7, p8, p11, p12, str];
    },
  },
  methods: { 
    meth1: function(_, context, p1, p2, p3, p4, p7, p8, p11, p12) {
      var str = [this.FIELD01$.trim(), p1, p2, p3, p4].concat(p7 ? [p7] : []).concat([p8.toString('dd/MM/yyyy'), p11.x3ToString(), p12.x3ToString()]).join(' ');
      this.RES2$ = str;
      return str;
    },
    meth2: function(_, context, p1, p2, p3, p4, p7, p8, p11, p12) {
      ++p1;
      ++p2;
      ++p3;
      ++p4;
      p7 += 'X';
      p8 = p8 + 1;
      P11 = p11 != null ? context.uuid.NULL : p11;
      if (p12.value == 0) p12 = (context.date.NULL + 1).at(p12.time); // hack until we eliminate date.x3IsZero
      else p12 = (p12.date + 1).at(p12.time);
      var str = [this.FIELD01$.trim(), p1, p2, p3, p4].concat(p7 ? [p7] : []).concat([p8.toString('dd/MM/yyyy'), p11.x3ToString(), p12.x3ToString()]).join(' ');
      this.RES2$ = str;
      return [p1, p2, p3, p4, p7, p8, p11, p12, str];
    },
    mgetdat: function(_, context) {
      if (parseInt(this.FIELD01$.substring(3)) < 50) {
        var res;
        const rec = context.tables.AQCLNK01$.readRecord(_, this.FIELD01$);
        res = rec.CREDATTIM.date;
      } else {
        res = context.date.NULL;
      }
      this.RES1$ = res;
      return res;
    },
    mgetch: function(_, context) {
      const filler = "My'Return" + '"Value&Char';
      const f1 = this.FIELD01$;
      var res;
      if (f1 == '' || parseInt(f1.substring(3)) < 50) {
        res = f1 + ' ' + 'x'.repeat(250 - (f1 + filler).length - 1) + filler;
      } else {
        res = f1 + ' ' + filler;
      }
      this.RES2$ = res;
      return res;
    },
    mgetint: function(_, context) {
      const res = 2 * parseInt(this.FIELD01$.substring(3));
      this.RES3$ = res;
      return res;
    },
    mgetrate: function(_, context) {
      const res = 1.35 * parseInt(this.FIELD01$.substring(3));
      this.RES4$ = res;
      return res;
    },
  },
};