"use strict";

const x3js = require('x3js');

module.exports = {
  className: 'Bank',
  properties: {
    bank: {
      control: function(_, val) {
        const len = this.$cache(_, 'Acry', this.country$, 'lengthOfBank');
        if (val.length !== len) this.bank.$error(_, this.$message(_, 111, 123, 1) + ' ' + this.country$ + ' (' + len + ')');
      },
    },
    country: {
        control: function(_, val) {
          if (this.$cache(_, 'Acry', val, 'lengthOfBank') < 1 || 
            this.$cache(_, 'Acry', val, 'bankControl') !== x3js.YES) {
            this.country.$error(_, val + ' ' + this.$message(_, 172, 133, 1));
          }
        }
    },
    validTo: {
        control: function(_, val) {
          if (val && this.validFrom$ && val < this.validFrom$) {
            this.validTo.$error(_, this.$message(_, 90, 121, 1));
          }
        }
    },
  },
  events: {
    updateAfter: function(_) {
      if (this.$snapshot.validFrom$ != this.validFrom$ || 
        this.$snapshot.validTo$ != this.validTo$) {
        const len = this.$cache(_, 'Acry', this.country$, 'lengthOfBank');
        this.$classes.BankIdStatement$.query(_).filter({
          country: this.country$,
          bankIdNumber: x3js.predicates.startsWith(this.bank$.substring(0, len)),
        }).forEach(_, (_, bid) => {
          try {
            if (bid.validFrom$ < this.validFrom$) 
              bid.validFrom$ = this.validFrom$;
            if (bid.validTo$ == null || bid.validTo$ > this.validTo$) 
              bid.validTo$ = this.validTo$;
            if (bid.$status == x3js.UPDATE) bid.$update(_);
          } catch (ex) {
            this.$error(_, bid.entity$ + ' ' + bid.bankIdNumber$ + ' ' + this.$message(_, 42, 9003, 1) + ': ' + ex.message);
          }
        });
      }
    },
    deleteControlBefore: function(_) {
      var len = this.$cache(_, 'Acry', this.country$, 'lengthOfBank');
      if (this.$classes.BankIdStatement$.query(_).some(_, {
        country: this.country$,
        bankIdNumber: x3js.predicates.startsWith(this.bank$.substring(0, len)),
      })) {
        this.$error(_, this.$message(_, 174, 133, 1));
      }
    },
  },
};