"use strict";
var check = require('syracuse-license/lib/check');
var date = require('syracuse-core/lib/types/date');
var util = require('util');

QUnit.module(module.id);

var today = date.today();

// returns exception message for invocation
function callException(data, newLicenses) {
	try {
		check._p(data, newLicenses);
		return "";
	} catch (e) {
		return e.toString();
	};
	return "";
}

// General remark: test data do not have checksums, because they are not tested in _parseLicenses
test('Some error situations', 6, function() {
	var policyR = {
		"product": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"modules": [{
			"code": "A",
			"keyFunctions": ["A1", "A2", "A3"],
			"condition": "License"
		}, {
			"code": "C",
			"keyFunctions": ["C1", "C2"]
		}],
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"functions": ["A1", "A2", "C2"]
		}, {
			"code": "B2",
			"title": "B2t",
			"functions": ["A1", "A2", "A3"]
		}],
		"signature": "",
		"signatureText": "",
		"fileType": "Policy",
		"partnerId": ""
	};
	var policy = JSON.stringify(policyR);
	var licenseR = {
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"validity": [today.addDays(-2).toString(), today.addDays(5).toString()],
		"licensedTo": {
			"name": "Test"
		},
		"modules": [{
			"code": "A",
			"title": "A1t",
			"validity": [today.addDays(-1).toString(), today.addDays(0).toString()]
		}],
		"sessionControl": "concurrent",
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"max": 5
		}, {
			"code": "B2",
			"title": "B2t",
			"max": 1
		}],
		"maxSessions": 2,
		"signature": "",
		"signatureText": "",
		"fileType": "License",
		"partnerId": ""
	};
	var license = JSON.stringify(licenseR);
	strictEqual(callException([
		[], null], [license, policy]), "Error: No product or policy information available", "Call without product");
	var licenseR = {
		"product": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"validity": [today.addDays(-2).toString(), today.addDays(5).toString()],
		"licensedTo": {
			"name": "Test"
		},
		"modules": [{
			"code": "A",
			"title": "A1t",
			"validity": [today.addDays(-1).toString(), today.addDays(0).toString()]
		}],
		"sessionControl": "concurrent",
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"max": 5
		}, {
			"code": "B2",
			"title": "B2t",
			"max": 1
		}],
		"maxSessions": 2,
		"signature": "",
		"signatureText": "",
		"fileType": "License",
		"partnerId": ""
	};
	var license = JSON.stringify(licenseR);
	strictEqual(callException([
		[], null], [license, policy]), "Error: No product or policy information available", "Call without policy");
	var licenseR = {
		"product": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"licensedTo": {
			"name": "Test"
		},
		"modules": [{
			"code": "A",
			"title": "A1t",
			"validity": [today.addDays(-1).toString(), today.addDays(0).toString()]
		}],
		"sessionControl": "concurrent",
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"max": 5
		}, {
			"code": "B2",
			"title": "B2t",
			"max": 1
		}],
		"maxSessions": 2,
		"signature": "",
		"signatureText": "",
		"fileType": "License",
		"partnerId": ""
	};
	var license = JSON.stringify(licenseR);
	strictEqual(callException([
		[], null], [policy, license]), "Error: Missing validity in file type 'License' for product 'ERPSTD' version 1.0", "No validity");
	var licenseR = {
		"product": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"validity": ["", today.addDays(5).toString()],
		"licensedTo": {
			"name": "Test"
		},
		"modules": [{
			"code": "A",
			"title": "A1t",
			"validity": [today.addDays(-1).toString(), "407-356-99"]
		}],
		"sessionControl": "concurrent",
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"max": 5
		}, {
			"code": "B2",
			"title": "B2t",
			"max": 1
		}],
		"maxSessions": 2,
		"signature": "",
		"signatureText": "",
		"fileType": "License",
		"partnerId": ""
	};
	var license = JSON.stringify(licenseR);
	strictEqual(callException([
		[], null], [policy, license]), "Error: Missing validity start in file type 'License' for product 'ERPSTD' version 1.0", "Missing valid from");
	var licenseR = {
		"product": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"validity": [today.addDays(-1).toString(), today.addDays(5).toString()],
		"licensedTo": {
			"name": "Test"
		},
		"modules": [{
			"code": "A",
			"title": "A1t",
			"validity": ["123-456-78", today.addDays(0).toString()]
		}],
		"sessionControl": "concurrent",
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"max": 5
		}, {
			"code": "B2",
			"title": "B2t",
			"max": 1
		}],
		"maxSessions": 2,
		"signature": "",
		"signatureText": "",
		"fileType": "License",
		"partnerId": ""
	};
	var license = JSON.stringify(licenseR);
	strictEqual(callException([
		[], null], [license, policy]), "Error: Validity start has wrong format 123-456-78 in file type 'License' for product 'ERPSTD' version 1.0", "Wrong valid from format in module");
	var licenseR = {
		"product": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"validity": [today.addDays(-1).toString(), today.addDays(5).toString()],
		"licensedTo": {
			"name": "Test"
		},
		"modules": [{
			"code": "Adifferent", // module which is not covered by policy file: also date check!
			"title": "A1t",
			"validity": [today.addDays(0).toString(), "123-456-78"]
		}],
		"sessionControl": "concurrent",
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"max": 5
		}, {
			"code": "B2",
			"title": "B2t",
			"max": 1
		}],
		"maxSessions": 2,
		"signature": "",
		"signatureText": "",
		"fileType": "License",
		"partnerId": ""
	};
	var license = JSON.stringify(licenseR);
	strictEqual(callException([
		[], null], [license, policy]), "Error: Validity end has wrong format 123-456-78 in file type 'License' for product 'ERPSTD' version 1.0", "Wrong valid to format in module");

});


////////////////////////////////////////////////////////////////////////

test('Only new files, 1 licensed module', 14, function() {
	var policyR = {
		"product": {
			"code": "ERP",
			"version": "7.0",
			title: {
				"en-US": "X3"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"modules": [{
			"code": "A",
			"keyFunctions": ["A1", "A2", "A3"]
		}],
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"functions": ["A1", "A2", "No key function"]
		}, {
			"code": "B2",
			"title": "B2t",
			"functions": ["A1", "A2", "A3"]
		}],
		"signature": "",
		"signatureText": "",
		"fileType": "Policy",
		"partnerId": ""
	};
	var policy = JSON.stringify(policyR);
	var licenseR = {
		"product": {
			"code": "ERP",
			"version": "7.0",
			title: {
				"en-US": "X3"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"validity": [today.addDays(-2).toString(), today.addDays(5).toString()],
		"licensedTo": {
			"name": "Test"
		},
		"modules": [{
			"code": "A",
			"title": "A1t",
			"validity": [today.addDays(-1).toString(), today.addDays(0).toString()]
		}],
		"sessionControl": "concurrent",
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"max": 5
		}, {
			"code": "B2",
			"title": "B2t",
			"max": 1
		}],
		"maxSessions": 2,
		"signature": "",
		"signatureText": "",
		"fileType": "License",
		"partnerId": ""
	};
	var license = JSON.stringify(licenseR);
	strictEqual(check._p(null, [license, policy]), null, "Call with null");


	var res = check._p([
		[], null], [license, policy]);
	strictEqual(res[0].length, 2, "number of raw licenses");
	strictEqual(res[1].concurrent, true, "session control flag");
	strictEqual(res[1].licensedTo.name, licenseR.licensedTo.name, "correct licensee");
	strictEqual(res[1].keyFunctions.length, 3, "3 key functions");
	strictEqual(res[1].badges["B1"].max, 5, "Badge max");
	strictEqual(res[1].badges["B1"].title, "B1t", "Badge title");
	strictEqual(res[1].badges["B1"].func.length, 2, "Number of functions");
	strictEqual(res[1].expires[0].module, "A", "first expire module");
	strictEqual(res[1].expires[0].partner, "", "first expire partner");
	strictEqual(res[1].expires[0].expire, today.toString(), "first expire date");
	strictEqual(res[1].nextCheck, today.addDays(0).toString(), "next check");
	strictEqual(res[1].previousCheck, today.addDays(-1).toString(), "previous check");
	strictEqual(res[1].maxSessions, 2, "maxSessions");
});
// module expired
test('Only new files, 1 expired module', 11, function() {
	var policyR = {
		"product": {
			"code": "ERP",
			"version": "7.0",
			title: {
				"en-US": "X3"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"modules": [{
			"code": "A",
			"keyFunctions": ["A1", "A2", "A3"],
			"condition": "license"
		}],
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"functions": ["A1", "A2", "No key function"]
		}, {
			"code": "B2",
			"title": "B2t",
			"functions": ["A1", "A2", "A3"]
		}],
		"signature": "",
		"signatureText": "",
		"fileType": "Policy",
		"partnerId": ""
	};
	var policy = JSON.stringify(policyR);
	var licenseR = {
		"product": {
			"code": "ERP",
			"version": "7.0",
			title: {
				"en-US": "X3"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"validity": [today.addDays(-3).toString(), today.addDays(5).toString()],
		"licensedTo": {
			"name": "Test"
		},
		"modules": [{
			"code": "A",
			"title": "A1t",
			"validity": [null, today.addDays(-1).toString()]
		}],
		"sessionControl": "concurrent",
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"max": 5
		}, {
			"code": "B2",
			"title": "B2t",
			"max": 1
		}],
		"signature": "",
		"signatureText": "",
		"fileType": "License",
		"partnerId": ""
	};
	var license = JSON.stringify(licenseR);
	var res = check._p([
		[], null], [license, policy]);
	strictEqual(res[0].length, 2, "number of raw licenses");
	strictEqual(res[1].concurrent, true, "session control flag");
	strictEqual(res[1].licensedTo.name, licenseR.licensedTo.name, "correct licensee");
	strictEqual(res[1].keyFunctions.length, 3, "3 key functions");
	strictEqual(res[1].badges["B1"].max, 5, "Badge max");
	strictEqual(res[1].badges["B1"].title, "B1t", "Badge title");
	strictEqual(res[1].badges["B1"].func.length, 0, "Number of functions");
	strictEqual(res[1].badges["B1"].allFunc, "A1,A2,No key function", "List of all functions");
	strictEqual(res[1].expires.length, 0, "No expire modules");
	strictEqual(res[1].nextCheck, today.addYears(1000).toString(), "Next check");
	strictEqual(res[1].previousCheck, today.toString(), "Previous check");
});
// module not yet valid
test('Only new files, 1 future module', 10, function() {
	var policyR = {
		"product": {
			"code": "ERP",
			"version": "7.0",
			title: {
				"en-US": "X3"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"modules": [{
			"code": "A",
			"keyFunctions": ["A1", "A2", "A3"]
		}],
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"functions": ["A1", "A2", "No key function"]
		}, {
			"code": "B2",
			"title": "B2t",
			"functions": ["A1", "A2", "A3"]
		}],
		"signature": "",
		"signatureText": "",
		"fileType": "Policy",
		"partnerId": ""
	};
	var policy = JSON.stringify(policyR);
	var licenseR = {
		"licensedTo": {
			"name": "Test"
		},
		"product": {
			"code": "ERP",
			"version": "7.0",
			title: {
				"en-US": "X3"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"validity": [today.addDays(-3).toString(), today.addDays(5).toString()],
		"modules": [{
			"code": "A",
			"title": "A1t",
			"validity": [today.addDays(2).toString(), today.addDays(3).toString()]
		}],
		"sessionControl": "concurrent",
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"max": 5
		}, {
			"code": "B2",
			"title": "B2t",
			"max": 1
		}],
		"signature": "",
		"signatureText": "",
		"fileType": "License",
		"partnerId": ""
	};
	var license = JSON.stringify(licenseR);
	var res = check._p([
		[], null], [license, policy]);
	strictEqual(res[0].length, 2, "number of raw licenses");
	strictEqual(res[1].concurrent, true, "session control flag");
	strictEqual(res[1].licensedTo.name, licenseR.licensedTo.name, "correct licensee");
	strictEqual(res[1].keyFunctions.length, 3, "3 key functions");
	strictEqual(res[1].badges["B1"].max, 5, "Badge max");
	strictEqual(res[1].badges["B1"].title, "B1t", "Badge title");
	strictEqual(res[1].badges["B1"].func.length, 0, "Number of functions");
	strictEqual(res[1].expires.length, 0, "No expire module");
	strictEqual(res[1].nextCheck, today.addDays(1).toString(), "Next check");
	strictEqual(res[1].previousCheck, today.addYears(-1000).toString(), "Previous check");
});

// detect new data
test('Detection of new data', 15, function() {
	var policyR = {
		"product": {
			"code": "ERP",
			"version": "7.0",
			title: {
				"en-US": "X3"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"modules": [{
			"code": "A",
			"keyFunctions": ["A1", "A2", "A3"]
		}],
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"functions": ["A1", "A2", "No key function"]
		}, {
			"code": "B2",
			"title": "B2t",
			"functions": ["A1", "A2", "A3"]
		}],
		"signature": "",
		"signatureText": "",
		"fileType": "Policy",
		"partnerId": ""
	};
	var policy = JSON.stringify(policyR);
	var licenseR = {
		"licensedTo": {
			"name": "Test"
		},
		"product": {
			"code": "ERP",
			"version": "7.0",
			title: {
				"en-US": "X3"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"validity": [today.addDays(-3).toString(), today.addDays(5).toString()],
		"modules": [{
			"code": "A",
			"title": "A1t",
			"validity": [today.addDays(-3).toString(), today.addDays(3).toString()]
		}],
		"sessionControl": "concurrent",
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"max": 5
		}, {
			"code": "B2",
			"title": "B2t",
			"max": 1
		}],
		"signature": "",
		"signatureText": "",
		"fileType": "License",
		"partnerId": ""
	};
	var license = JSON.stringify(licenseR);
	var res = check._p([
		[], null], [license, policy]);
	var res0 = res[0];
	var res1 = res[1];
	var resNext = check._p(res);
	strictEqual(res[0], res0, "No change in argument 0 when no new licenses");
	strictEqual(res[1], res1, "No change in argument 1 when no new licenses");
	strictEqual(resNext[1].nextCheck, today.addDays(3).toString(), "Correct next check date");
	resNext = check._p(res, []);
	strictEqual(resNext[0], res0, "No change in argument 0 when no new licenses");
	strictEqual(resNext[1], res1, "No change in argument 1 when no new licenses");
	resNext = check._p(res, [license]);
	strictEqual(resNext[0], res0, "No change in argument 0 when already existing license added");
	strictEqual(resNext[1], res1, "No change in argument 1 when already existing license added");
	res.nextCheck = today.toString();
	resNext = check._p(res, [license]);
	strictEqual(resNext[0], res0, "No change in argument 0 when current check date");
	strictEqual(resNext[1], res1, "No change in argument 1 when current check date");
	res[1].nextCheck = today.addDays(-1).toString();
	resNext = check._p(res, [license]);
	strictEqual(resNext[0], res0, "No change in argument 0 when old check date");
	strictEqual(resNext[1] !== res1, true, "Change in argument 1 when old check date");
	strictEqual(resNext[1].nextCheck, today.addDays(3).toString(), "Correct next check date");
	// change license
	licenseR.licensedTo.name = "Test1";
	var licenseChanged = JSON.stringify(licenseR);
	resNext = check._p(res, [licenseChanged]);
	strictEqual(resNext[0] !== res0, true, "Change in argument 0 when different license");
	strictEqual(resNext[1] !== res1, true, "Change in argument 1 when different license");
	strictEqual(resNext[1].licensedTo.name, licenseR.licensedTo.name, "Correct licensee");

});

// partner licenses
test('Partner licenses', 19, function() {
	var policyR = {
		"product": {
			"code": "ERP",
			"version": "7.0",
			title: {
				"en-US": "X3"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"modules": [{
			"code": "A",
			"keyFunctions": ["A1", "A2", "A3"]
		}, {
			"code": "C",
			"keyFunctions": ["C1", "C2"]
		}],
		"languages": [{
			"code": "langX",
			"condition": "always"
		}],
		"legislations": [{
			"code": "legX",
			"condition": "always"
		}],
		"activityCodes": [{
			"code": "actX",
			"condition": "always"
		}],
		"parameterKits": [{
			"code": "parX",
			"condition": "always"
		}],
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"functions": ["A1", "A2", "C2"]
		}, {
			"code": "B2",
			"title": "B2t",
			"functions": ["A1", "A2", "A3"]
		}],
		"signature": "",
		"signatureText": "",
		"fileType": "Policy",
		"partnerId": ""
	};
	var policy = JSON.stringify(policyR);
	var licenseR = {
		"licensedTo": {
			"name": "Test"
		},
		"product": {
			"code": "ERP",
			"version": "7.0",
			title: {
				"en-US": "X3"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"validity": [today.addDays(-3).toString(), today.addDays(5).toString()],
		"modules": [{
			"code": "A",
			"title": "A1t",
			"validity": [today.addDays(3).toString(), today.addDays(3).toString()]
		}, {
			"code": "C",
			"title": "C1t",
			"validity": [null, today.addDays(5).toString()]
		}],
		"sessionControl": "concurrent",
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"max": 5
		}, {
			"code": "B2",
			"title": "B2t",
			"max": 1
		}],
		"signature": "",
		"signatureText": "",
		"fileType": "License",
		"partnerId": ""
	};
	var license = JSON.stringify(licenseR);
	var policyPartnerR = {
		"product": {
			"code": "ERP",
			"version": "7.0",
			title: {
				"en-US": "X3"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"modules": [{
			"code": "A",
			"keyFunctions": ["A1", "A2"]
		}, {
			"code": "C",
			"keyFunctions": ["C1", "C2", "C5"]
		}, {
			"code": "double",
			"keyFunctions": ["A3"]
		}],
		"languages": [{
			"code": "langX",
			"condition": "never"
		}],
		"legislations": [{
			"code": "legX",
			"condition": "never"
		}],
		"activityCodes": [{
			"code": "actX",
			"condition": "never"
		}],
		"parameterKits": [{
			"code": "parX",
			"condition": "never"
		}],
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"functions": ["A1", "A2", "C5"]
		}, {
			"code": "B2",
			"title": "B2t",
			"functions": ["A1", "A2", "A3"]
		}],
		"signature": "",
		"signatureText": "",
		"fileType": "Policy",
		"partnerId": "P"
	};
	var policyPartner = JSON.stringify(policyPartnerR);
	var licensePartnerR = {
		"licensedTo": {
			"name": "TestPartner"
		},
		"product": {
			"code": "ERP",
			"version": "7.0",
			title: {
				"en-US": "X3"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en_US": "X3S"
			}
		},
		"validity": [today.addDays(-3).toString(), today.addDays(5).toString()],
		"modules": [{
			"code": "C",
			"title": "C1t",
			"validity": [null, today.addDays(-5).toString()]
		}, {
			"code": "A",
			"title": "A1t",
			"validity": [today.addDays(-3).toString(), today.addDays(4).toString()]
		}],
		"sessionControl": "",
		"badges": [{
			"code": "B1",
			"title": "B1t",
			"max": 5
		}, {
			"code": "B2",
			"title": "B2t",
			"max": 1
		}],
		"signature": "",
		"signatureText": "",
		"fileType": "License",
		"partnerId": "P"
	};
	var licensePartner = JSON.stringify(licensePartnerR);
	var diagnoses = [];
	var res = check._p([
		[], null], [license, policy, licensePartner, policyPartner], diagnoses);
	strictEqual(res[0].length, 4, "number of raw licenses");
	strictEqual(res[1].concurrent, true, "session control flag");
	strictEqual(res[1].licensedTo.name, licenseR.licensedTo.name, "correct licensee");
	strictEqual(res[1].keyFunctions.length, 5, "3 key functions");
	strictEqual(res[1].badges["B1"].max, 5, "Badge max");
	strictEqual(res[1].badges["B1"].title, "B1t", "Badge title");
	strictEqual(res[1].badges["B1"].func.length, 1, "Number of functions");
	strictEqual(res[1].badges["B1"].func[0], "C2", "Name of function C2");
	strictEqual(res[1].expires.length, 1, "first expire module");
	strictEqual(res[1].nextCheck, today.addDays(2).toString(), "next check");
	strictEqual(res[1].previousCheck, today.addYears(-1000).toString(), "previous check");
	strictEqual(res[1].partners[0], "", "First license Sage");
	strictEqual(res[1].partners[1], "P", "Second license Partner");
	strictEqual(res[1].partners.length, 2, "Number of real licenses");
	strictEqual(res[1].languages.langX, 1, "Language licensed");
	strictEqual(res[1].legislations.legX, 1, "Legislation licensed licensed");
	strictEqual(res[1].parameterKits.parX, 1, "Parameter kit licensed");
	strictEqual(res[1].activityCodes.actX, 1, "Activity code licensed");

	console.log("DIAG " + util.format(diagnoses));
	strictEqual(diagnoses.length, 9, "Number of diagnoses");
});

// test for splitting input into licenses
test('Input splitting', 9, function() {
	var input1 = "Preliminary text ,.-\n%&/{ a: {} }Final text";
	var res = check._s(input1);
	strictEqual(res.length, 1, "Number of items 1");
	strictEqual(res[0], "{ a: {} }", "Correct content of item");
	var input2 = "Preliminary text ,.-\n%&/{ a: {} }\n{ b: [] }\n text";
	var res = check._s(input2);
	strictEqual(res.length, 2, "Number of items 2");
	strictEqual(res[0], "{ a: {} }", "Correct content of item 0");
	strictEqual(res[1], "{ b: [] }", "Correct content of item 1");
	var input2 = "Preliminary text ,.-\n%&/{ a: {},b:{} }---\n====================\nTTT { b: [], c:5 }\n\n\n { a:{}, b:{'c':{}}} text";
	var res = check._s(input2);
	strictEqual(res.length, 3, "Number of items 3");
	strictEqual(res[0], "{ a: {},b:{} }", "Correct content of item 0");
	strictEqual(res[1], "{ b: [], c:5 }", "Correct content of item 1");
	strictEqual(res[2], "{ a:{}, b:{'c':{}}}", "Correct content of item 2");
});


test('Policy conditions', 6, function() {
	var policyR = {
		"product": {
			"code": "ERP",
			"version": "7.0",
			title: {
				"en-US": "X3"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"languages": [{
			"code": "A",
			"condition": "never"
		}, {
			"code": "B",
			"condition": "always"
		}, {
			"code": "C",
			"condition": "license"
		}, {
			"code": "D",
			"condition": "license"
		}, {
			"code": "E",
			"condition": "license"
		}, ],
		"badges": [],
		"signature": "",
		"signatureText": "",
		"fileType": "Policy",
		"partnerId": ""
	};
	var policy = JSON.stringify(policyR);
	var license = JSON.stringify({
		"product": {
			"code": "ERP",
			"version": "7.0",
			title: {
				"en-US": "X3"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"languages": [{
			"code": "A"
		}, {
			"code": "B",
			"validity": [today.addDays(-2).toString(), today.addDays(-1).toString()]
		}, {
			"code": "C",
			"validity": [today.addDays(-2).toString(), today.addDays(-1).toString()]
		}, {
			"code": "D",
			"validity": [today.addDays(-2).toString(), today.addDays(10).toString()]
		}, {
			"code": "E",
			"validity": [today.addDays(2).toString(), today.addDays(10).toString()]
		}, ],
		"validity": [today.addDays(-2).toString(), today.addDays(5).toString()],
		"licensedTo": {
			"name": "Test"
		},
		"sessionControl": "concurrent",
		"maxSessions": 2,
		"signature": "",
		"signatureText": "",
		"fileType": "License",
		"partnerId": ""
	});
	var res = check._p([
		[], null], [license, policy]);
	strictEqual(res[0].length, 2, "number of raw licenses");
	strictEqual(res[1].languages.A, 0, "language A never possible");
	strictEqual(res[1].languages.B, 1, "language B always possible");
	strictEqual(res[1].languages.C, 0, "language C not licensed any more");
	strictEqual(res[1].languages.D, 1, "language D licensed");
	strictEqual(res[1].languages.E, 0, "language E not yet licensed");
});

test('Total license validity', 8, function() {
	var policyR = {
		"product": {
			"code": "ERP",
			"version": "7.0",
			title: {
				"en-US": "X3"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"languages": [{
			"code": "A",
			"condition": "license"
		}],
		"badges": [],
		"signature": "",
		"signatureText": "",
		"fileType": "Policy",
		"partnerId": ""
	};
	var policy = JSON.stringify(policyR);
	var licenseR = {
		"product": {
			"code": "ERP",
			"version": "7.0",
			title: {
				"en-US": "X3"
			}
		},
		"policy": {
			"code": "ERPSTD",
			"version": "1.0",
			title: {
				"en-US": "X3S"
			}
		},
		"languages": [{
			"code": "A",
		}],

		"validity": [today.addDays(-2).toString(), today.addDays(-1).toString()],
		"licensedTo": {
			"name": "Test"
		},
		"sessionControl": "concurrent",
		"maxSessions": 2,
		"signature": "",
		"signatureText": "",
		"fileType": "License",
		"partnerId": ""
	};
	var license = JSON.stringify(licenseR);
	var res = check._p([
		[], null], [license, policy]);
	strictEqual(res[0].length, 2, "number of raw licenses");
	strictEqual(res[1].languages.A, 0, "license not yet valid");

	licenseR.validity = [today.addDays(2).toString(), today.addDays(5).toString()];
	var license = JSON.stringify(licenseR);
	var res = check._p([
		[], null], [license, policy]);
	strictEqual(res[0].length, 2, "number of raw licenses");
	strictEqual(res[1].languages.A, 0, "license not yet valid");

	licenseR.validity = [today.addDays(-2).toString(), today.addDays(5).toString()];
	var license = JSON.stringify(licenseR);
	var res = check._p([
		[], null], [license, policy]);
	strictEqual(res[0].length, 2, "number of raw licenses");
	strictEqual(res[1].languages.A, 1, "license valid");

	licenseR.product.code = "XXX";
	var license = JSON.stringify(licenseR);
	var res = check._p([
		[], null], [license, policy]);
	strictEqual(res[0].length, 2, "number of raw licenses");
	strictEqual(res[1].languages.A, 0, "license does not fit to policy");
});