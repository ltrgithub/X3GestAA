"use strict";
var check = require('syracuse-license/lib/check')
var date = require('syracuse-core/lib/types/date');
var util = require('util')

var qmodule = QUnit.module;

qmodule('parseLicense');

var today = date.today();

// returns exception message for invocation
function callException(data, newLicenses) {
	try {
		check._p(data, newLicenses);
		return "";
	} catch (e) { return e.toString() };
	return "";
}

// General remark: test data do not have checksums, because they are not tested in _parseLicenses

test('Only new files, 1 licensed module', 15, function(){
	var policyR = {
			  "modules": [ {"code": "A",
				  "keyFunctions": ["A1", "A2", "A3"]
				   }],
				  "badges": [{
				    "code": "B1",
				    "title": "B1t",
				    "functions": ["A1", "A2", "No key function"]
				  }, {
				    "code": "B2",
				    "title": "B2t",
				    "functions": ["A1", "A2", "A3"]
				  }],
				  "signature": "",
				  "signatureText": "",
				  "fileType": "Policy",
				  "partnerId": ""
				};
	var policy = JSON.stringify(policyR)
	var licenseR = {
		  "licensedTo": {
			    "name": "Test"
			  },
			  "modules": [{
			    "code": "A",
			    "title": "A1t",
			    "validity": [today.addDays(-1).toString(), today.addDays(0).toString()]
			  }],
			  "sessionControl": "concurrent",
			  "badges": [{
			    "code": "B1",
			    "title": "B1t",
			    "multi": 2,
			    "max": 5
			  }, {
			    "code": "B2",
			    "title": "B2t",
			    "max": 1
			  }],
			  "signature": "",
			  "signatureText": "",
			  "fileType": "License",
			  "partnerId": ""
			}
	var license = JSON.stringify(licenseR);
   strictEqual(check._p(null, [license, policy]), null, "Call with null");
   strictEqual(callException([[],null],[license]), "Error: No policy file", "No policy file");
   var res = check._p([[],null],[license, policy]);
   strictEqual(res[0].length, 2, "number of raw licenses")
   strictEqual(res[1].concurrent, true, "session control flag")
   strictEqual(res[1].licensedTo.name, licenseR.licensedTo.name, "correct licensee");
   strictEqual(res[1].keyFunctions.length, 3, "3 key functions");
   strictEqual(res[1].badges["B1"].max, 5, "Badge max")
   strictEqual(res[1].badges["B1"].title, "B1t", "Badge title")
   strictEqual(res[1].badges["B1"].multi, 2, "Multiple sessions for same user")
   strictEqual(res[1].badges["B1"].func.length, 2, "Number of functions")
   strictEqual(res[1].badges["B2"].multi, 1, "Multiple sessions for same user")
   strictEqual(res[1].expires[0].module, "A", "first expire module")
   strictEqual(res[1].expires[0].partner, "", "first expire partner")
   strictEqual(res[1].expires[0].expire, today.toString(), "first expire date")   
   strictEqual(res[1].nextCheck, today.addDays(0).toString(), "next check")
});
   // module expired
test('Only new files, 1 expired module', 9, function(){
	var policyR = {
			  "modules": [ {"code": "A",
				  "keyFunctions": ["A1", "A2", "A3"]
				   }],
				  "badges": [{
				    "code": "B1",
				    "title": "B1t",
				    "functions": ["A1", "A2", "No key function"]
				  }, {
				    "code": "B2",
				    "title": "B2t",
				    "functions": ["A1", "A2", "A3"]
				  }],
				  "signature": "",
				  "signatureText": "",
				  "fileType": "Policy",
				  "partnerId": ""
				};
	var policy = JSON.stringify(policyR)
	var licenseR = {
		  "licensedTo": {
			    "name": "Test"
			  },
			  "modules": [{
			    "code": "A",
			    "title": "A1t",
			    "validity": [null, today.addDays(-1).toString()]
			  }],
			  "sessionControl": "concurrent",
			  "badges": [{
			    "code": "B1",
			    "title": "B1t",
			    "max": 5
			  }, {
			    "code": "B2",
			    "title": "B2t",
			    "max": 1
			  }],
			  "signature": "",
			  "signatureText": "",
			  "fileType": "License",
			  "partnerId": ""
			}
	var license = JSON.stringify(licenseR);
   var res = check._p([[],null],[license, policy]);
   strictEqual(res[0].length, 2, "number of raw licenses")
   strictEqual(res[1].concurrent, true, "session control flag")
   strictEqual(res[1].licensedTo.name, licenseR.licensedTo.name, "correct licensee");
   strictEqual(res[1].keyFunctions.length, 3, "3 key functions");
   strictEqual(res[1].badges["B1"].max, 5, "Badge max")
   strictEqual(res[1].badges["B1"].title, "B1t", "Badge title")
   strictEqual(res[1].badges["B1"].func.length, 0, "Number of functions")
   strictEqual(res[1].expires.length, 0, "No expire modules")
   strictEqual(res[1].nextCheck, today.addYears(1000).toString(), "Next check")
   
});
   
   // module not yet valid
   test('Only new files, 1 future module', 9, function(){
		var policyR = {
				  "modules": [ {"code": "A",
					  "keyFunctions": ["A1", "A2", "A3"]
					   }],
					  "badges": [{
					    "code": "B1",
					    "title": "B1t",
					    "functions": ["A1", "A2", "No key function"]
					  }, {
					    "code": "B2",
					    "title": "B2t",
					    "functions": ["A1", "A2", "A3"]
					  }],
					  "signature": "",
					  "signatureText": "",
					  "fileType": "Policy",
					  "partnerId": ""
					};
		var policy = JSON.stringify(policyR)
	var licenseR = {
		  "licensedTo": {
			    "name": "Test"
			  },
			  "modules": [{
			    "code": "A",
			    "title": "A1t",
			    "validity": [today.addDays(2).toString(), today.addDays(3).toString()]
			  }],
			  "sessionControl": "concurrent",
			  "badges": [{
			    "code": "B1",
			    "title": "B1t",
			    "max": 5
			  }, {
			    "code": "B2",
			    "title": "B2t",
			    "max": 1
			  }],
			  "signature": "",
			  "signatureText": "",
			  "fileType": "License",
			  "partnerId": ""
			}
	var license = JSON.stringify(licenseR);
  var res = check._p([[],null],[license, policy]);
  strictEqual(res[0].length, 2, "number of raw licenses")
  strictEqual(res[1].concurrent, true, "session control flag")
  strictEqual(res[1].licensedTo.name, licenseR.licensedTo.name, "correct licensee");
  strictEqual(res[1].keyFunctions.length, 3, "3 key functions");
  strictEqual(res[1].badges["B1"].max, 5, "Badge max")
  strictEqual(res[1].badges["B1"].title, "B1t", "Badge title")
  strictEqual(res[1].badges["B1"].func.length, 0, "Number of functions")
  strictEqual(res[1].expires.length, 0, "No expire module")
  strictEqual(res[1].nextCheck, today.addDays(1).toString(), "Next check")
});


   // detect new data
   test('Detection of new data', 15, function(){
		var policyR = {
				  "modules": [ {"code": "A",
					  "keyFunctions": ["A1", "A2", "A3"]
					   }],
					  "badges": [{
					    "code": "B1",
					    "title": "B1t",
					    "functions": ["A1", "A2", "No key function"]
					  }, {
					    "code": "B2",
					    "title": "B2t",
					    "functions": ["A1", "A2", "A3"]
					  }],
					  "signature": "",
					  "signatureText": "",
					  "fileType": "Policy",
					  "partnerId": ""
					};
		var policy = JSON.stringify(policyR)
	var licenseR = {
		  "licensedTo": {
			    "name": "Test"
			  },
			  "modules": [{
			    "code": "A",
			    "title": "A1t",
			    "validity": [today.addDays(-3).toString(), today.addDays(3).toString()]
			  }],
			  "sessionControl": "concurrent",
			  "badges": [{
			    "code": "B1",
			    "title": "B1t",
			    "max": 5
			  }, {
			    "code": "B2",
			    "title": "B2t",
			    "max": 1
			  }],
			  "signature": "",
			  "signatureText": "",
			  "fileType": "License",
			  "partnerId": ""
			}
	var license = JSON.stringify(licenseR);
  var res = check._p([[],null],[license, policy]);
  var res0 = res[0];
  var res1 = res[1];
  var resNext = check._p(res)
  strictEqual(res[0], res0, "No change in argument 0 when no new licenses")
  strictEqual(res[1], res1, "No change in argument 1 when no new licenses")
  strictEqual(resNext[1].nextCheck,  today.addDays(3).toString(), "Correct next check date")
  resNext = check._p(res, [])
  strictEqual(resNext[0], res0, "No change in argument 0 when no new licenses")
  strictEqual(resNext[1], res1, "No change in argument 1 when no new licenses")
  resNext = check._p(res, [license])
  strictEqual(resNext[0], res0, "No change in argument 0 when already existing license added")
  strictEqual(resNext[1], res1, "No change in argument 1 when already existing license added")
  res.nextCheck = today.toString();
  resNext = check._p(res, [license])
  strictEqual(resNext[0], res0, "No change in argument 0 when current check date")
  strictEqual(resNext[1], res1, "No change in argument 1 when current check date")
  res[1].nextCheck = today.addDays(-1).toString();
  resNext = check._p(res, [license])
  strictEqual(resNext[0], res0, "No change in argument 0 when old check date")
  strictEqual(resNext[1] !== res1, true, "Change in argument 1 when old check date")
  strictEqual(resNext[1].nextCheck,  today.addDays(3).toString(), "Correct next check date")
 // change license
  licenseR.licensedTo.name = "Test1"
	var licenseChanged = JSON.stringify(licenseR);
  resNext = check._p(res, [licenseChanged])
  strictEqual(resNext[0] !== res0, true, "Change in argument 0 when different license")
  strictEqual(resNext[1] !== res1, true, "Change in argument 1 when different license")
  strictEqual(resNext[1].licensedTo.name, licenseR.licensedTo.name, "Correct licensee")
  
   });

   // partner licenses
   test('Partner licenses', 14, function(){
		var policyR = {
				  "modules": [ {"code": "A",
					  "keyFunctions": ["A1", "A2", "A3"]
					   }, {"code": "C",
					  "keyFunctions": ["C1", "C2"]
					   }],
					  "badges": [{
					    "code": "B1",
					    "title": "B1t",
					    "functions": ["A1", "A2", "C2"]
					  }, {
					    "code": "B2",
					    "title": "B2t",
					    "functions": ["A1", "A2", "A3"]
					  }],
					  "signature": "",
					  "signatureText": "",
					  "fileType": "Policy",
					  "partnerId": ""
					};
		var policy = JSON.stringify(policyR)
	var licenseR = {
		  "licensedTo": {
			    "name": "Test"
			  },
			  "modules": [{
			    "code": "A",
			    "title": "A1t",
			    "validity": [today.addDays(3).toString(), today.addDays(3).toString()]
			  }, { "code": "C",
				  "title": "C1t",
				  "validity": [null, today.addDays(5).toString()]}],
			  "sessionControl": "concurrent",
			  "badges": [{
			    "code": "B1",
			    "title": "B1t",
			    "max": 5
			  }, {
			    "code": "B2",
			    "title": "B2t",
			    "max": 1
			  }],
			  "signature": "",
			  "signatureText": "",
			  "fileType": "License",
			  "partnerId": ""
			}
	var license = JSON.stringify(licenseR);
		var policyPartnerR = {
				  "modules": [ {"code": "A",
					  "keyFunctions": ["A1", "A2", "A3"]
					   },{"code": "C",
					  "keyFunctions": ["C1", "C2", "C5"]
					   }],
					  "badges": [{
					    "code": "B1",
					    "title": "B1t",
					    "functions": ["A1", "A2", "C5"]
					  }, {
					    "code": "B2",
					    "title": "B2t",
					    "functions": ["A1", "A2", "A3"]
					  }],
					  "signature": "",
					  "signatureText": "",
					  "fileType": "Policy",
					  "partnerId": "P"
					};
		var policyPartner = JSON.stringify(policyPartnerR)
	var licensePartnerR = {
		  "licensedTo": {
			    "name": "TestPartner"
			  },
			  "modules": [{ "code": "C",
				  "title": "C1t",
				  "validity": [null, today.addDays(-3).toString()]}, {
			    "code": "A",
			    "title": "A1t",
			    "validity": [today.addDays(-3).toString(), today.addDays(4).toString()]
			  }],
			  "sessionControl": "",
			  "badges": [{
			    "code": "B1",
			    "title": "B1t",
			    "max": 5
			  }, {
			    "code": "B2",
			    "title": "B2t",
			    "max": 1
			  }],
			  "signature": "",
			  "signatureText": "",
			  "fileType": "License",
			  "partnerId": "P"
			}
	var licensePartner = JSON.stringify(licensePartnerR);
	strictEqual(callException([[],null], [license, policy, licensePartner]), "Error: No policy file for partner P", "Missing policy file for partner");
	
  var res = check._p([[],null],[license, policy, licensePartner, policyPartner]);
  strictEqual(res[0].length, 4, "number of raw licenses")
  strictEqual(res[1].concurrent, true, "session control flag")
  strictEqual(res[1].licensedTo.name, licenseR.licensedTo.name, "correct licensee");
  strictEqual(res[1].keyFunctions.length, 5, "3 key functions");
  strictEqual(res[1].badges["B1"].max, 5, "Badge max")
  strictEqual(res[1].badges["B1"].title, "B1t", "Badge title")
  strictEqual(res[1].badges["B1"].func.length, 1, "Number of functions")
  strictEqual(res[1].badges["B1"].func[0], "C2", "Name of function C2")
  strictEqual(res[1].expires.length, 1, "first expire module")
  strictEqual(res[1].nextCheck, today.addDays(2).toString(), "next check")
  strictEqual(res[1].partners[0], "", "First license Sage")
  strictEqual(res[1].partners[1], "P", "First license Partner")
  strictEqual(res[1].partners.length, 2, "Number of real licenses")
  
   });
   