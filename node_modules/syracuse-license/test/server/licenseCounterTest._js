"use strict";
var util = require('util');
var tracer; // = console.log;
var globals = require("streamline/lib/globals");
QUnit.module(module.id);

var step = require('syracuse-license/lib/check')._st;
var newLicense = require('syracuse-license/lib/check')._nl;
var licenseData = {
	WS_SIZE_LIMIT: 2, // GB
	WS_PERIOD: "DAY", // (a string: DAY, MONTH or YEAR).
	WS_GRACE_SLOWDOWN: 5, // (slowdown factor when limit is exceeded, 5 for 5 times slower)
	WS_GRACE_LIMIT: 25, // (as a percentage that we add to WS_SIZE_LIMIT)
};
var licenseData2 = {
	WS_SIZE_LIMIT: 2, // GB
	WS_PERIOD: "MONTH", // (a string: DAY, MONTH or YEAR).
	WS_GRACE_SLOWDOWN: 6, // (slowdown factor when limit is exceeded, 5 for 5 times slower)
	WS_GRACE_LIMIT: 25, // (as a percentage that we add to WS_SIZE_LIMIT)
};

//function _step(_, length, poolMetadata, data, licenseData, timeString)
var poolMetadata = {
	"x3ServerHost": "aws-x3-indv7",
	"x3ServerPort": 17100,
	"x3Solution": "X3V7",
	"x3Folder": "X3TESTV7",
	"locale": "en-US",
	"userName": "admin",
	"product": {
		"code": "x",
		"version": "7"
	}
};


// General remark: These unit tests simulate different servers and the database. Therefore they use the internal functions
// of the Web service part of check._js and put in special parameters
// The database content is always in the "$" attribute. So when switching between different servers, the "$" attribute must
// be copied.
// When deliberately changing "database" contents, the contents of "$" must be cloned so that not the "local" data object
// is not changed, too. 

asyncTest('step test', 29, function(_) {
	try {

		var licenseData3 = {
			WS_SIZE_LIMIT: 1, // GB
			WS_PERIOD: "YEAR", // (a string: DAY, MONTH or YEAR).
			WS_GRACE_SLOWDOWN: 8, // (slowdown factor when limit is exceeded, 5 for 5 times slower)
			WS_GRACE_LIMIT: 25, // (as a percentage that we add to WS_SIZE_LIMIT)
		};
		var data = {};
		// _step(_, length, poolMetadata, data, key, licenseData, timeString)
		var result = step(_, 1 << 30, poolMetadata, data, 'A', licenseData, '2015-05-05T09:00:00.000Z');
		strictEqual(result, 0, "Load 1 GB of 2");
		strictEqual(data.x.counter, 1 << 30, "Correct counter 1");
		var result = step(_, 1 << 30, poolMetadata, data, 'A', licenseData, '2015-05-05T09:01:00.000Z');
		strictEqual(result, 0, "Load 2 GB of 2");
		strictEqual(data.x.counter, 2147483648, "Correct counter 2");
		var result = step(_, 1, poolMetadata, data, 'A', licenseData, '2015-05-05T09:02:00.000Z');
		strictEqual(result, 5, "Load 2 GB of 2 plus 1");
		var result = step(_, (1 << 29) - 1, poolMetadata, data, 'A', licenseData, '2015-05-05T09:03:00.000Z');
		strictEqual(result, 5, "Load 2 GB of 2 plus 25%");
		strictEqual(data.x.counter, 2684354560, "Correct counter 3");
		var result = step(_, 1, poolMetadata, data, 'A', licenseData, '2015-05-05T09:04:00.000Z');
		strictEqual(result, -1, "Load 2 GB of 2 plus 25% plus 1");
		strictEqual(data.x.counter, 2684354561, "Correct counter 3");
		// new period
		var result = step(_, 7, poolMetadata, data, 'A', licenseData, '2015-05-06T00:04:00.000Z');
		strictEqual(result, 0, "New day");
		strictEqual(data.x.counter, 7, "Correct counter 3");
		newLicense(data);
		var result = step(_, 1 << 30, poolMetadata, data, 'A', licenseData2, '2015-05-06T09:00:00.000Z');
		strictEqual(result, 0, "Load 1 GB of 2 plus 7");
		strictEqual(data.x.counter, 1073741831, "Correct counter 4");
		var result = step(_, (1 << 30) - 7, poolMetadata, data, 'A', licenseData2, '2015-05-17T09:00:00.000Z');
		strictEqual(result, 0, "Load 2 GB of 2");
		strictEqual(data.x.counter, 2147483648, "Correct counter 5");
		var result = step(_, 1, poolMetadata, data, 'A', licenseData2, '2015-05-27T09:00:00.000Z');
		strictEqual(result, 6, "Load 2 GB of 2 plus 1");
		strictEqual(data.x.counter, 2147483649, "Correct counter 6");
		var result = step(_, 1, poolMetadata, data, 'A', licenseData2, '2015-06-01T09:00:00.000Z');
		strictEqual(result, 0, "Load 1");
		strictEqual(data.x.counter, 1, "Correct counter 7");
		newLicense(data);
		var result = step(_, 6, poolMetadata, data, 'A', licenseData3, '2015-06-06T09:00:00.000Z');
		strictEqual(result, 0, "Load 6");
		strictEqual(data.x.counter, 7, "Correct counter 8");
		var result = step(_, (1 << 30) - 7, poolMetadata, data, 'A', licenseData3, '2015-11-17T09:00:00.000Z');
		strictEqual(result, 0, "Load 1 GB of 1");
		strictEqual(data.x.counter, 1073741824, "Correct counter 9");
		var result = step(_, 1 << 28, poolMetadata, data, 'A', licenseData3, '2015-12-27T09:00:00.000Z');
		strictEqual(result, 8, "Load 1.25 GB of 1");
		strictEqual(data.x.counter, 1342177280, "Correct counter 10");
		var result = step(_, 1, poolMetadata, data, 'A', licenseData3, '2015-12-31T09:00:00.000Z');
		strictEqual(result, -1, "Load 1.25 GB of 1 plus 1");
		strictEqual(data.x.counter, 1342177281, "Correct counter 11");
		var result = step(_, 1, poolMetadata, data, 'A', licenseData3, '2016-12-31T09:00:00.000Z');
		strictEqual(result, 0, "Load 1");
		strictEqual(data.x.counter, 1, "Correct counter 12");

	} catch (e) {
		console.log(e.stack);

	} finally {

		start();
	}
});

asyncTest('server restart test', 4, function(_) {
	try {

		var data = {};
		// _step(_, length, poolMetadata, data, key, licenseData, timeString)
		var result = step(_, 12, poolMetadata, data, 'A', licenseData, '2015-05-05T09:00:00.000Z');
		// "$" attribute contains database content (in this mock situation for tests)
		var dataB = {
			"$": data.$
		};
		var result = step(_, 15, poolMetadata, dataB, 'B', licenseData, '2015-05-05T09:00:00.000Z');
		// simulate restart: clear all non-persistent data
		data = {
			"$": dataB.$
		};
		var result = step(_, 13, poolMetadata, data, 'A', licenseData, '2015-05-05T10:00:00.000Z');
		strictEqual(data.x.counter, 25, "Take values from database");
		strictEqual(data.x.total, 15, "Take values from database");

		var data = {};
		// _step(_, length, poolMetadata, data, key, licenseData, timeString)
		var result = step(_, 12, poolMetadata, data, 'A', licenseData, '2015-05-05T09:00:00.000Z');
		// "$" attribute contains database content (in this mock situation for tests)
		var dataB = {
			"$": data.$
		};
		var result = step(_, 15, poolMetadata, data, 'B', licenseData, '2015-05-05T09:00:00.000Z');
		// simulate restart: clear all non-persistent data
		data = {
			"$": dataB.$
		};
		var result = step(_, 13, poolMetadata, data, 'A', licenseData, '2015-05-06T10:00:00.000Z');
		strictEqual(data.x.counter, 13, "Ignore values from database (because too old)");
		strictEqual(data.x.total, 0, "Ignore values from database");

	} catch (e) {
		console.log(e.stack);

	} finally {

		start();
	}
});


asyncTest('step test with different servers', 27, function(_) {
	// 3 different data objects simulate 3 servers. The "$" attribute corresponds to the database content;
	try {
		var dataA = {};
		var dataB = {};
		var dataC = {};
		// _step(_, length, poolMetadata, data, key, licenseData, timeString)
		var result = step(_, 1, poolMetadata, dataA, 'A', licenseData, '2015-05-05T09:00:00.000Z');
		strictEqual(result, 0, "Load 1 A");
		strictEqual(dataA.x.counter, 1, "Correct counter 1");
		strictEqual(dataA.x.total, 0, "Correct total 0");
		dataB.$ = dataA.$;
		var result = step(_, 1, poolMetadata, dataB, 'B', licenseData, '2015-05-05T09:00:00.000Z');
		strictEqual(result, 0, "Load 1 B");
		strictEqual(dataB.x.counter, 1, "Correct counter 1");
		strictEqual(dataB.x.total, 1, "Correct total 1");
		dataA.$ = dataB.$;
		var result = step(_, 1, poolMetadata, dataA, 'A', licenseData, '2015-05-05T09:10:00.000Z');
		strictEqual(result, 0, "Load 2 A (with contact)");
		strictEqual(dataA.x.counter, 2, "Correct counter 2");
		strictEqual(dataA.x.total, 1, "Correct total 1");
		dataB.$ = dataA.$;
		var result = step(_, 2, poolMetadata, dataB, 'B', licenseData, '2015-05-05T09:05:00.000Z');
		strictEqual(result, 0, "Load 2 B (without contact)");
		strictEqual(dataB.x.counter, 3, "Correct counter 2");
		strictEqual(dataB.x.total, 1, "Correct total 1");
		dataA.$ = dataB.$;
		var result = step(_, 1 << 30, poolMetadata, dataA, 'A', licenseData, '2015-05-05T09:15:00.000Z');
		strictEqual(result, 0, "Load 4 A (without contact)");
		strictEqual(dataA.x.counter, 1073741826, "Correct counter 1073741826");
		strictEqual(dataA.x.total, 1, "Correct total still 1");
		dataB.$ = dataA.$;
		var result = step(_, 1 << 30, poolMetadata, dataB, 'B', licenseData, '2015-05-05T09:15:00.000Z');
		strictEqual(result, 0, "Load 4 B (with contact)");
		strictEqual(dataB.x.counter, 1073741827, "Correct counter 1073741827");
		strictEqual(dataB.x.total, 2, "Correct total 1");
		dataA.$ = dataB.$;
		var result = step(_, 3, poolMetadata, dataA, 'A', licenseData, '2015-05-05T09:25:00.000Z');
		strictEqual(result, 5, "Load 4 A (with contact)");
		strictEqual(dataA.x.counter, 1073741829, "Correct counter 1073741829");
		strictEqual(dataA.x.total, 1073741827, "Correct total 1073741827");
		dataC.$ = dataA.$;
		var result = step(_, 4, poolMetadata, dataC, 'C', licenseData, '2015-05-05T09:25:00.000Z');
		strictEqual(result, 5, "Load 4 C (with contact)");
		strictEqual(dataC.x.counter, 4, "Correct counter 1");
		strictEqual(dataC.x.total, 2147483656, "Correct total 21474083656");
		var result = step(_, 1, poolMetadata, dataC, 'C', licenseData, '2015-05-06T09:25:00.000Z');
		strictEqual(result, 0, "Load 5 next day (with contact)");
		strictEqual(dataC.x.counter, 1, "Correct counter 1");
		strictEqual(dataC.x.total, 0, "Correct total 0");
	} catch (e) {
		console.log(e.stack);
	} finally {
		start();

	}

});

asyncTest('error conditions', 5, function(_) {
	try {

		// _step(_, length, poolMetadata, data, key, licenseData, timeString)
		var data = {};
		var result = step(_, 19, poolMetadata, data, 'A', licenseData2, '2015-05-05T08:00:00.000Z');
		var dataB = {
			"$": data.$
		};
		var result = step(_, 19, poolMetadata, dataB, 'B', licenseData2, '2015-05-05T08:01:00.000Z');
		data.$ = dataB.$;
		// again contact with data
		var result = step(_, 19, poolMetadata, data, 'A', licenseData2, '2015-05-05T08:10:00.000Z');
		// make counter smaller
		data.$ = JSON.parse(JSON.stringify(data.$)); // duplicate object
		data.$.data["B/x"] = data.$.data["B/x"].substr(1);
		var error = false;
		try {
			var result = step(_, 19, poolMetadata, data, 'A', licenseData2, '2015-05-05T09:10:00.000Z');
			error = false;
		} catch (e) {
			error = true;
		}
		strictEqual(true, error, "Error occurred when making counter smaller");

		// earlier timestamp
		var data = {
			"$": {
				data: {
					"B/x": "25;2015-05-05T09:00:00.000Z;---"
				}
			}
		};
		// _step(_, length, poolMetadata, data, key, licenseData, timeString)
		var result = step(_, 19, poolMetadata, data, 'A', licenseData2, '2015-05-05T09:00:00.000Z');
		// make counter smaller
		data.$ = JSON.parse(JSON.stringify(data.$)); // duplicate object
		data.$.data["B/x"] = '19;2015-05-05T08:44:44.000Z;---';

		try {
			var result = step(_, 19, poolMetadata, data, 'A', licenseData2, '2015-05-06T09:10:00.000Z');
			error = false;
		} catch (e) {
			error = true;
		}
		strictEqual(true, error, "Error occurred when making timestamp lower");

		// earlier timestamp
		var data = {
			"$": {
				data: {
					"B/x": "25;2015-05-05T09:00:00.000Z;---"
				}
			}
		};
		var result = step(_, 19, poolMetadata, data, 'A', licenseData2, '2015-05-05T09:00:00.000Z');
		// make counter smaller
		data.$ = JSON.parse(JSON.stringify(data.$)); // duplicate object
		data.$.data["B/x"] = '25;2015-05-05T10:00:00.000Z;---';
		try {
			var result = step(_, 19, poolMetadata, data, 'A', licenseData2, '2015-05-06T09:10:00.000Z');
			error = false;
		} catch (e) {
			error = true;
		}
		strictEqual(false, error, "No error occurred when making timestamp higher");

		// allowed cases for counter decrease: before beginning of current license
		var data = {
			"$": {
				data: {
					"B/x": "25;2015-05-05T09:00:00.000Z;---"
				}
			}
		};
		var result = step(_, 19, poolMetadata, data, 'A', licenseData2, '2015-05-05T10:00:00.000Z');
		var dataB = {
			"$": data.$
		};
		var result = step(_, 19, poolMetadata, data, 'B', licenseData2, '2015-05-05T11:00:00.000Z');
		data.$ = dataB.$;
		var error = false;
		try {
			var result = step(_, 19, poolMetadata, data, 'A', licenseData2, '2015-05-05T11:10:00.000Z');
			error = false;
		} catch (e) {
			error = true;
		}
		strictEqual(false, error, "No error occurred when counter decrease before beginning of current license");

		// allowed cases for counter decrease: before beginning of period
		var data = {
			"$": {
				data: {
					"B/x": "25;2015-05-05T09:00:00.000Z;---"
				}
			}
		};
		var result = step(_, 19, poolMetadata, data, 'A', licenseData2, '2015-05-05T10:00:00.000Z');
		var dataB = {
			"$": data.$
		};
		var result = step(_, 19, poolMetadata, data, 'B', licenseData2, '2015-06-05T11:00:00.000Z');
		data.$ = dataB.$;
		var error = false;
		try {
			var result = step(_, 19, poolMetadata, data, 'A', licenseData2, '2015-06-05T11:10:00.000Z');
			error = false;
		} catch (e) {
			error = true;
		}
		strictEqual(false, error, "No error occurred when counter decrease before beginning of period");

	} catch (e) {
		console.log(e.stack);
	} finally {
		start();
	}
})