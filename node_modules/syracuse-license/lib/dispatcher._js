"use strict";

var check = require('syracuse-license/lib/check');
var mock = require('syracuse-load/lib/mock');
var url = require('url');
var syracuse;

exports.dispatcher = function(config) {
	var routes = {
		test: function(_, request, response) {
			response.writeHead(200, {
				"Content-Type": "text/plain"
			});
			console.log("LICENSETEST");
			response.end('OK');
		},
		check: function(_, request, response) {
			console.log("LIC CHECK");
			check.checkNamed(_); // no instance here in order to avoid infinite loop!
			console.log("LIC CHECK");
			response.writeHead(200, {
				"Content-Type": "text/plain"
			});
			response.end('OK');
		},
		update: function(_, request, response) {
			var content = request.readAll(_).toString("utf8");
			console.log("Update request");
			var updateResult = check.updateLicense(content, _);
			response.writeHead(200, {
				"Content-Type": "text/plain"
			});
			response.end(updateResult ? 'Valid license' : 'No valid license');
		},
		set: function(_, request, response) {
			var content = request.readAll(_);
			if (content) content = content.toString("utf8");
			else {
				response.writeHead(400, {
					"Content-Type": "text/plain"
				});
				response.end("No content");
				return;
			}
			var diagnoses = [];
			var extra = {};
			try {
				check.licenseChange(content, diagnoses, _, extra);
			} catch (e) {
				response.writeHead(400, {
					"Content-Type": "text/plain"
				});
				response.end("Error: " + e);
				return;
			}
			response.writeHead(200, {
				"Content-Type": "text/plain"
			});
			response.end("Call: " + JSON.stringify(diagnoses) + "\nPropagation: " + (extra.error || extra.answer));
			return;
		}
	};
	return function(_, request, response) {
		// block special functions when not authorized
		syracuse = syracuse || require('syracuse-main/lib/syracuse');
		if (syracuse.server instanceof mock.MockStreamServer && !request.fromNanny && !request._request.fromNanny) {
			response.writeHead("404", {});
			return response.end("Resource not found.");
		}
		var route = routes[request.url.split('/')[2]];
		if (!route) throw new Error("bad url: " + request.url);
		return route(_, request, response);
	};
};