"use strict";

var mongodb = require('streamline-mongodb');

exports.newStore = function(config, files, readFile) {
	var trace = config.trace;
	var jsondir = config.output;

	var mongoConfig = config.mongo || {};
	var server = new mongodb.Server(mongoConfig.host || "localhost", mongoConfig.port || 27017, {});
	var db = new mongodb.Db(mongoConfig.database || "x3meta", server, {
		w: 1 //"majority"
	});

	return {
		open: function(_) {
			db.open(_);
			return this;
		},
		createTables: function(_) {
			trace && trace("dropping old collections ...");
			var t0 = Date.now();
			var tableNames = db.collectionNames(_).map(function(o) {
				return o.name.substring(o.name.lastIndexOf('.') + 1);
			}).filter(function(s) {
				return files.TABLES[s];
			});
			tableNames.forEach_(_, function(_, name) {
				console.log("dropping " + name);
				db.dropCollection(name, _);
			});
			trace && trace(tableNames.length + " collections dropped in " + Math.round((Date.now() - t0) / 1000) + " seconds");
		},
		fillTables: function(_, entity) {
			trace && trace("inserting " + entity.title + " metadata ...");
			var t0 = Date.now();
			var meta = readFile(_, files.TABLES[entity.tableName]);
			var names = Object.keys(files[entity.subdir] || {});
			var coln = db.collection(entity.tableName, _);
			names.forEach_(_, function(_, name) {
				var data = readFile(_, files[entity.subdir][name]);
				coln.insert(data, _);
			});
			trace && trace(entity.title + ": " + names.length + " resources created in " + Math.round((Date.now() - t0) / 1000) + " seconds");
		},
		fillTexts: function(_) {
			trace && trace("inserting texts ...");
			var t0 = Date.now();
			var names = files.TEXTS;
			var colnATEXTE = db.collection("ATEXTE", _);
			var colnATEXTRA = db.collection("ATEXTRA", _);
			names.forEach_(_, function(_, name) {
				var data = readFile(_, name);
				if (data.TEXTS) colnATEXTRA.insert(data.TEXTS, _);
				else if (Array.isArray(data)) colnATEXTE.insert(data, _);
				else console.log("bad text file: " + name);
			});
			var colnAPLSTD = db.collection("APLSTD", _);
			files.MENUS.forEach_(_, function(_, name) {
				var data = readFile(_, name);
				colnAPLSTD.insert(data, _);
			});
			trace && trace("TEXTS: " + (names.length + files.MENUS.length) + " resources created in " + Math.round((Date.now() - t0) / 1000) + " seconds");
		},
		readInstance: function(_, entity, key) {
			var filter = {};
			filter[entity.primaryKey] = key;
			return db.collection(entity.tableName, _).find(filter, _).toArray(_)[0];
		},
	};
};
