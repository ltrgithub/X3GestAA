"use strict";

// tool under construction
// parses 4GL source files to extract the call graph.
var fs = require('streamline-fs');
var config = require('../../../nodelocal').config.etna;
if (!config) throw new Error("etna section missing in nodelocal.js");
var rootDir = config.SUPERV.scriptsRoot;
var Parser = require('etna/lib/engine/parser').Parser;

function processFile(_, f) {
	var deps = {};

	function scanNode(_, node, modName) {
		node.seen = true;
		if (/^(CALL|GOTO|GOSUB)$/.test(node.tag)) {
			var from = node.from && node.from.tag === "STRING" ? node.from.value : null;
			if (from === modName) from = null;
			var name = node.tag === "CALL" ? node.name : node.label;
			name = name.tag === "STRING" ? name.value : null;
			if (from && name) {
				var o = deps[from] = deps[from] || {};
				o[name] = (o[name] || 0) + 1;
			}
			//console.log(node);
		}
		Object.keys(node).forEach_(_, function(_, k) {
			if (node[k] && typeof node[k] === "object" && !node[k].seen) scanNode(_, node[k], modName);
		});
	}

	try {
		//console.log("processing " + f);
		var src = fs.readFile(rootDir + '/' + f, "utf8", _);
		var parser = new Parser(src, f);
		var result = parser.parse();
		scanNode(_, result.node, f.substring(0, f.length - 4));
		//console.log(deps);
	} catch (ex) {
		console.log(f + ": ERROR: " + ex.message);
	}
}

fs.readdir(rootDir, _).forEach_(_, function(_, f) {
	if (/\.src$/.test(f)) processFile(_, f);
});