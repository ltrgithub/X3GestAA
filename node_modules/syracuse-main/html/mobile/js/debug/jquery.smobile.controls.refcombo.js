(function($) {
	var that = $.smobile || {};
	$.smobile = that;
	that.controls.RoleRefCombo = {
		handler: function(c, after) {
			var controller = this,  options= c.data || {};
			var html = ['<div data-role="fieldcontain" id="'+c.id+'">'];
			html.push('<div class="s-m-state-block s-m-error" data-role="none" id="'+c.id+'_error"></div>');
			html.push('<label class="ui-input-text" for="'+c.id+'_i">'+c.data.label+': </label>');
			html.push('<select type="'+(c.data.type || "text") +'" id="'+c.id+'_i"');
			$.helpers.addJqmData(c.data,html); 
			if (options.$mandatory) html.push(' data-placeholder="true"');
			html.push('>');
			//OK
			controller.getData(options.bind, null, null, function(data) {
				var _key = (data?data.$key:"");
				if (options.$mandatory) 
					html.push("<option value=\"\""+ (_key?"":" selected=\"selected\"") +">"+ (options.title || "Choose one...") + "</option>");
				$.sdata.execURL($.sdata.config.baseURL + options.entity+ (options.orderBy?('?orderBy='+encodeURIComponent(options.orderBy)):'')+ (options.selected?('?selected='+encodeURIComponent(options.selected)):'') , { $type: $.sdata.sdataActions.view.id, success: function(data, headers) {
					var array = (data && data.$resources)?data.$resources:[];
					$.helpers.each(array, function(value, index, next) {
						html.push("<option value=\"" + value.$url +"\""+ ((_key == value.$key)?" selected=\"selected\"":"") + ">");
						controller.getData(options.display, value, value.$key, function(bdata) {
							html.push(bdata+ "</option>");
							next();
						});				
					}, function() {
						html.push('</select>');
						html.push('</div>');
						after({ 
							html: html.join(''),
							bind: options.bind,
							options: options				
						});
					});
					
				}});
				
			});
			
		},
		checkValue:  function($c, c) {
			var controller = this;
			var $select = $c.find( '#'+ c.id + "_i");
			var value = $select.find('option:selected').val();
			var e = $c.find('#'+ c.id + "_error");
			e.html("");
			if (c.options.$mandatory) {
				if (!value) {
					var error = {field: $c, message: $.helpers.format(that.locale().ui.mandatory_field,[c.options.label])};
					controller.pushError(error);
					e.html(error.message);
				}
			} 
		},
		
		events: function($c, c) {
			var controller = this;
			var $select = $c.find( '#'+ c.id + "_i");
			//OK
			controller.getData(c.bind, null, null, function(data) {
				var cd = data;
				$select.bind( "change", function(event, ui) {
					var _aftercchange = controller.afterChangeHnd(c);
					var new_uri= $select.find('option:selected').val();
					if (!cd || (cd.$url != new_uri)) {
						var nd = (new_uri?{$key: $.helpers.sdataURL2key(new_uri), $url: new_uri }:null);
						controller.setData(c.bind, nd);
						controller.notifyChange();
						if (_aftercchange) _aftercchange();
					}
				});		
			
			});
		}
		
	};

	that.controls.CompositionList={
		add: function($c, c, data, controller, after) {
			controller.getData(c.options.bind_title, data, "", function(tt) {
				var html = [];
				that.controls.CompositionList._addItem(data,html,tt, c);
				$($c[0].lastChild).before(html.join(''));
				return after();
			});
		},
		_addItem: function(value, html, title, c) {
			if (!value.$key && !value.$uuid) value.$uuid = $.helpers.uuid();
			html.push('<li id="'+ (value.$key || value.$uuid) + '">');
			html.push('<a href="#" data-bt="view">'+title+'</a>');
			html.push('<a href="#" data-bt="remove">'+$.helpers.messages.edit_rmv+'</a>');
			html.push('</li>');
		},
		rmv: function($c, id) {
			$c.find(id).remove();
		},
		handler: function(c, after) {
			var controller = this;
			var  html = [], options= c.data || {};
			html.push('<div class="ui-body">');
    		html.push('<ul id="'+c.id + '" data-role="listview"');
			html.push(' data-inset="true" data-split-icon="delete"');			
			if (options.css) html.push(' class="' + options.css + '"');
			html.push('>');
			html.push('<li data-role="list-divider">'+ options.title + '</ui>');
			//OK
			controller.getData(options.bind, null, [], function(data) {
				data = data || [];
				$.helpers.each(data, function(value, index, next) {	
					controller.getData(options.bind_title, value, "", function(tt) {
						that.controls.CompositionList._addItem(value,html,tt, c);
						next();
					});
					
				}, function() {
					if (true){
						html.push('<li>');
						//html.push('<div class="ui-grid-a">');
						//html.push('<div class="ui-block-a"></div>');
						html.push('<div class="ui-block">');
						html.push('<a id="'+c.id+'_new" data-role="button" data-shadow="false" data-corners="false" data-mini="true" data-theme="b" href="#" data-icon="plus" data-iconpos="left">');
						html.push('Photo');
						html.push('</a>');
						//html.push('</div>');
						html.push('</li>');
						html.push('</ul>');
						html.push('</div>');
					}
					return after({ 
						html: html.join(''),
						bind: options.bind,
						options: options				
					});			
				
				});
			});
			
		},
		refresh: function($c) {
			$c.listview('refresh');
		},
		_findItem: function(id, bind, controller, after) {
			var list;
			controller.getData(bind, null, [], function(data) {
				data = data || []; 
				list = data;
				var i = list.length;
				while (i--) {
					var d = list[i];
					if ((id == d.$key) || (id == d.$uuid))
						return after(list, i);
				}
				return after(list, -1);
			});
		
		},
		events: function($c, c) {
			var controller = this;
			var $new = $c.find( '#'+ c.id + "_new");
			$new.bind( "click", function(event) {
				var ctrl = controller, data ={};
				var entity = ctrl.config.entity;
				if (entity && $.sdata.config && $.sdata.config.entities && $.sdata.config.entities[entity]) {
					var schema = $.sdata.config.entities[entity].$schema;
					if (schema && schema.properties[c.bind] && schema.properties[c.bind].item) {
						data = $.sdata.initFromSchema(schema.properties[c.bind].item);
					}
				}	
				if (c.options.ui) {
					that.loadDialog(c.options.ui, function(name, uiData) {
						uiData.actions = uiData.actions || {};
						uiData.actions.success=function(item) {
							if (item) {
								controller.getData(c.options.bind, null, [], function(data) {
									data = data || []; 
									item.$uuid = $.helpers.uuid();
									data.push(item);
									controller.notifyChange();
									that.controls.CompositionList.add($c, c, item, controller, function(){
										that.controls.CompositionList.refresh($c);
									}); 
									
								});
							}
							
							
						}
						that.createDialog(uiData, data);
					});
				}
			});

			var _findParent = function(e,tag) {
				while (e) {	
					if (e.tagName == tag) 
						return e;
					e = e.parentNode;
				}
				return null;
			};	
				
			$c.bind("click", function(event) {
				var a = _findParent(event.target, "A");
				if (a) {
					var bt = $(a).attr("data-bt");
					if (bt == "remove") {
						a = _findParent(a, "LI");
						if (a.id) {	
							that.controls.CompositionList._findItem(a.id, c.options.bind, controller, function(items, index){
								if (index >= 0) {
									items.splice(index, 1);
									$(a).remove();
									controller.notifyChange();
								}
							});
						
						}
					} else if (bt == "view") {
						a = _findParent(a, "LI");
						if (a.id) {	
							that.controls.CompositionList._findItem(a.id, c.options.bind, controller, function(items, index){
								if (index >= 0) {
									var itemData = {}
									$.extend(true, itemData, items[index]);
									if (c.options.ui) {
										that.loadDialog(c.options.ui, function(name, uiData) {
											uiData.actions = uiData.actions || {};
											uiData.actions.success=function(item) {
												if (item) {
													if (JSON.stringify(item) !=  JSON.stringify(items[index])) {
														items[index] = item;
														controller.notifyChange();
														var uuid = item.$uuid || item.$key;
														var $li = $("#"+uuid), html=[];
														var nc = $li[0].nextSibling;
														$li.remove();
														controller.getData(c.options.bind_title, item, "", function(tt) {
															that.controls.CompositionList._addItem(item,html,tt, c);
															$(nc).before(html.join(''));
															$c.listview('refresh');
														});
														
													}
												}
											}
											that.createDialog(uiData, itemData);
										});
									}
									
								}
							});
						
						}
					}
				}
				event.preventDefault();
			});					
			
		}
		
	};
	
	
})(jQuery);    


