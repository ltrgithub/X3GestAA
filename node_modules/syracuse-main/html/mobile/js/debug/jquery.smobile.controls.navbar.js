"use strict"; 
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	var $proto = $.proto;
	var $sdata = $.sdata;
	that.controls = that.controls || {};
	var _theme = 'g';
	var _typedItems = {
		sync: function(item) {
			item.title =$helpers.locale().ui.sync_item;
			item.hash = that.PAGES.send.id;
			item.icon = "arrow-u";
		},
		help: function(item) {
			item.title =$helpers.locale().maintoolbar.help;
			item.hash = that.PAGES.about.id;
			item.icon = "info";
		},
		settings: function(item) {
			if (!$sdata.capabilities.showSettings)  item.hidden = true;
			item.title =$helpers.locale().maintoolbar.settings;
			item.hash = that.PAGES.settings.id;
			item.icon = "gear";
		},
		next: function(item,controller) {
			item.title =$helpers.locale().maintoolbar.next;
			item.icon = "arrow-r";
			item.action = "next";
			var ccd = controller.getCurrentData();
			item.hidden = ! (ccd && ccd.$links && ccd.$links.$next);
			item.refresh = true;
			
		},
		previous: function(item, controller) {
			item.title =$helpers.locale().maintoolbar.previous;
			item.icon = "arrow-l";
			item.action = "previous";
			var ccd = controller.getCurrentData();
			item.hidden = ! (ccd && ccd.$links && ccd.$links.$previous);
			item.refresh = true;
			
		},
		home: function(item) {
			item.title =$helpers.locale().maintoolbar.home;
			item.hash = $.smobile.PAGES.home.id;
			item.icon = "home";
		},
		setup: function(item) {
			item.title =$helpers.locale().maintoolbar.setup;
			item.hash = $.smobile.PAGES.apps.id;
			item.icon = "plus";
		},
		mainmenu: function(item) {
			item.title =$helpers.locale().maintoolbar.home;
			item.hash = $.smobile.PAGES.start.id;
			item.icon = "home";
		}
	};	
	that.controls.NavBar={
		refresh: function(controller, options, $c, id) {	
			var html = [];
			var items = options.actions ||[];  
			if (!options.canRefresh) return; 
			var ccd = controller.getCurrentData();
			html = [];
			var params = {actions:[], hafter: [], assync: null, canRefresh: false};
			that.controls.NavBar.createitems(controller, id, options.items, params, html, 0, false, options);
			options.actions= (params.actions.length?params.actions:null);
			var $parent = $c.parent();
			$parent.html(html.join(''));
			$parent.trigger('create');
			$c = $('#'+id);
			that.controls.NavBar.events.apply(controller, [$c,{options:options}]);
		},
		createitems: function(controller, id, items, params, html, syncCount, addasync, optionsParent) {
			if (optionsParent) {
				html.push('<div data-role="navbar" id="'+id+'"');
				$helpers.addJqmData(optionsParent,html); 
				html.push('>');
			}
		
			html.push('<ul id="'+id+'_ul">');
			items.forEach(function(item) {
				item.navbar = true;
				// template items (sync / help )
				if (item.type && _typedItems[item.type]) 
					_typedItems[item.type](item, controller);
				
				if (item.refresh) params.canRefresh  = true;
				if (item.hidden) return;
				if (item.icon) {
					item.jmdata = item.jmdata || {};
					item.jmdata["data-icon"] = item.icon;
				}
				var aid = "";
				if (item.action)  {
					aid = id+'_'+item.action;
				}
				if (item.action) {
					params.actions.push({id: aid, action:item.action});
					html.push('<li id="'+aid+'"');
				} else {
					html.push('<li style="position:relative;"');
					if (aid) html.push(' id="'+aid+'"');
				}
				html.push(' class="');
				html.push('"');
				html.push('>');
				if (item.bind && item.url)  {
					var page = controller.getPageData();
					item.url = $proto.parseExpression(item.url, {data: controller.exprData(), $prototype: $proto.getProto(page)},"$url");
				}
				if (item.service && item.link) {
					controller.alinks = controller.alinks || {};
					var cdid = $helpers.uuid();
					item.actionParams = cdid;
					controller.alinks[cdid] = {$title:item.link.$title, url:item.link.$url, $method: item.link.$method, $parameters:item.link.$parameters};
				
					
				}				
				var url = that.ui.sdata_link(null, item);
				if (url) item.url = url;
				that._addLink(html, item, controller, function() {
					html.push($helpers.htmlEncode(item.title));
				});
				if (item.type === "sync") {
					var hid = id + "_sync"
					html.push('<div class="s-m-notify-sync');
					if (!syncCount) html.push(' s-m-hidden');
					html.push('" id="'+ hid+ '" data-role="none">');
					html.push(syncCount || "0");
					html.push('</div">');
					if (addasync) {
						params.assync = that.controls.NavBar.asynchandler.bind({controller: controller, id: hid});
					}
				}
				if (item.action === "popup" ) {
					params.hafter.push('<div data-role="popup" id="'+ item.popupId+ '">');
					params.hafter.push('<ul data-role="listview" data-inset="true" style="min-width:210px;">');
					item.items.forEach(function(ii) {
						ii.action="service";
						params.hafter.push('<li>');
						ii.controlId = $helpers.uuid();
						params.actions.push({id: ii.controlId, action:ii.action, url:ii.$url,parameters: ii.$parameters,  method: ii.$method, popupId: item.popupId, bind:""});
						that._addLink(params.hafter, ii, controller, function() {
							params.hafter.push($helpers.htmlEncode(ii.$title));
						});
						params.hafter.push('</li>');
					});
					params.hafter.push('</ul></div>');
				}
				
				html.push('</li>');
			});
			html.push('</ul>');
			if (optionsParent) html.push('</div>');
		
		},	
		_handler: function(controller, c, after, syncCount, addasync){
			var options = c.data;
			var id = c.id;
			var items = options.items ||[];  
			var params = {actions:[], hafter: [], assync: null, canRefresh: false};
			var html = [];
			that.controls.NavBar.createitems(controller, id, items, params, html, syncCount, addasync, options);	
			var l = {
				html: html.join('')+ params.hafter.join(''), 
				action: (params.actions.length > 0), 
				options:{actions: (params.actions.length?params.actions:null), jmdata: options.jmdata, canRefresh: params.canRefresh, items: items},
				async: params.assync
			}; 
			return after(l); 
		
		},
		sync: false,
		handler: function(c, after){
			var items = c.data.items || [];  
			var calcSync = false;
			var controller = this;
			items.forEach(function(item){
				if (item.type === "sync") 
					calcSync=true;
			});
			if (calcSync && $sdata.config && $sdata.config.id) {
				that.controls.NavBar._handler(controller, c, after, 0, true);
			} else that.controls.NavBar._handler(controller, c, after, 0);
		},
		asynchandler: function() {
			var obj = this;
			var hid = obj.id;
			return $sdata.getSyncCount(function(count) {
				if (count) {
					var $n = $('#'+hid);
					$n.html(count + "");
					$n.removeClass('s-m-hidden');
				}
			});
		},
		events: function($c, c) {
			var controller = this;
			$c.click(function(e) {
				var options = c.options;
				if (options.disabled) return;
				options.disabled = true;
				// find parent by tag 
				var target = e.target;
				while (target && target.tagName && (target.tagName.toUpperCase() != 'LI'))
					target = target.parentNode;
				if (target && target.id) {
					var ca = null;
					if (options && options.actions) {
						options.actions.forEach(function(act) {
							if (act.id === target.id) {
								ca = act;
							}
						});
					}
					if (ca) {
						var hnd = controller["action" + ca.action];
						if (hnd) {
							if (ca.popupId)
								$('#'+ca.popupId).popup('close');
							hnd.call(controller, 
								{
									success: function(data, error, noback) {
										options.disabled = false;
										if (!error && !noback) $.smobile.doBack(controller);
									}
								},
								ca
								
							);
							e.preventDefault();
							return;
						}
					
					}
					//
				}
				options.disabled  = false;
			});
			return;
		}
	};
	that.controls.panelView={
		sync: true,
		syncHandler: function(c, left) {
			var controller = this, inApp = false;
			if (left &&controller && controller.config && controller.config.page && controller.config.page.page) {
				var pi = controller.config.page.page;
				if (!pi.useAppId) {
					var items = c.options.items[0].items;
					if (pi.isHome) {
						if (items[0].type == "mainmenu")
							items.splice(0, 1);
					}
				}
			}
			if (!c.options.loaded) {
				that.controls.panelView._create_items(c.options, controller);
			}
			if (left) return; 
			return $sdata.getSyncCount(function(count) {
				var $c = $(".s-m-notify-sync");
				$c.html(count+ "");
				if (count)
					$c.removeClass('s-m-hidden');	
				else
					$c.addClass('s-m-hidden');
			});
		
		},
		_create_items: function(options, controller) {
			var  html = [];
			var items = options.items || [], links,page, proto, linksloaded;
			
			options.loaded = true;
			items.forEach(function(item, index){
				if (item.code) {
					switch(item.code) {
						case "filtersort":
							var fsitems = controller.getFilterFields();
							if (fsitems) 
								item.items.push({title: $helpers.locale().ui.filter, icon:"filter", action:"filter"});
							fsitems = controller.getSortFields();
							if (fsitems) {
								options.sortItems = fsitems;
								
								item.items.push({title: $helpers.locale().ui.sort, icon:"sort", action:"sort"});
							}
							break;
						case "actions":	
							if (!linksloaded) {
								linksloaded = true;
								page = controller.getPageData();
								proto = $proto.getProto(page);
								links = $proto.extractLinks( proto, proto, controller.getCurrentData(), true);
							}
							if (links) {
								links.forEach(function(link) {	
									//link
									if (link.method === "POST") {
										var cdid = $helpers.uuid();
										controller.alinks = controller.alinks || {};
										controller.alinks[cdid] = {url:link.$url, $method: link.$method, $parameters: link.$parameters};
										item.items.push({title: link.$title, icon:"service", action:"service", actionData: '{"id":"'+cdid+'"}'});
									}
									
								});
							}
							break;
						
						case "links":
							if (!linksloaded) {
								linksloaded = true;
								page = controller.getPageData();
								proto = $proto.getProto(page);
								links = $proto.extractLinks( proto, proto, controller.getCurrentData(), true);
							}
							if (links) {
								links.forEach(function(link) {	
									if (link.method === "GET") {
										var cdid = $helpers.uuid();
										controller.alinks = controller.alinks || {};
										controller.alinks[cdid] = {url:link.$url, $method: link.$method, $parameters: link.$parameters};
										item.items.push({title: link.$title, icon:"link", action:"link", actionData: '{"id":"'+cdid+'"}'});
									}
									
								});
							}
							break;
						
					
					}
				}
				if (item.items && item.items.length) {
					if (item.title)
						html.push('<li data-role="list-divider">'+$helpers.htmlEncode(item.title)+'</li>');
					item.items.forEach(function(ii, index){
						var count = null;
						if (ii.type === "sync") {
							options.syncHandler = that.controls.panelView.syncHandler;
							count = 0;
						}
						if (ii.type && _typedItems[ii.type]) 
							_typedItems[ii.type](ii, controller);
						ii.jqData = ii.jqData || "";
						html.push('<li class="' + "ui-li-has-icon " + $helpers.ui.consts.panel_icon  +'"');
						html.push(' data-corners="false" data-role="fieldcontain" data-shadow="false" data-iconshadow="true" data-icon="false" data-iconpos="right" data-theme="'+ _theme +'">');
						that._addLink(html, ii, controller, function() {
							html.push(that.ui.panelItem(ii.title, ii.icon, ii.description, count));
	
						});
						html.push('</li>');
					});
				}
			});
			var $ul = $("#"+options.id);
			$ul.html(html.join(''));
			$ul.listview("refresh");
			
		},
		handler: function(c, after) {
			var controller = this;
			
			var  html = [], options= c.data || [];
			html.push('<ul id="'+c.id + '" data-role="listview"');
			html.push(' data-divider-theme="'+ _theme +'"')
			html.push(' data-theme="'+ _theme +'"')
			html.push(' data-inset="false"')
			html.push(' data-icon="false"')
			html.push('>');
			options.loaded = false;
			options.syncHandler = that.controls.panelView.syncHandler;
			options.id = c.id;

			html.push('</ul>');
			return after({ 
				html: html.join(''),
				bind: true,
				options: options				
			});
		},
		events: function($c, c) {
			var controller = this;
			$c.click(function(e) {
				var options = c.options;
				if (options.disabled) return;
				
				options.disabled = true;
				// find parent by tag 
				var target = $helpers.getTarget(e);
				if (target) {
					var act = $(target).attr("data-action"), actp;
					if (act === "filter")  {
						if (that.openFilterDlg) { // declared on jquery.smobile.controls.filter.js
							that.openFilterDlg(controller, controller.extraData.filters);
							e.preventDefault();
						}
					} else if (act === "sort")  {
						if (that.openSortDlg) { // declared on jquery.smobile.controls.filter.js
							var order = that.controls.SDataSorter._getOrderBy(controller);
							that.openSortDlg(controller, order, options.sortItems);
							e.preventDefault();
						}
						e.preventDefault();
					} else if (act) {
						var hnd = controller["action" + act];
						if (hnd) {
							e.preventDefault();
							$helpers.clearErrors();
							var actp = $(target).attr("data-action-param");						
							if (actp) actp = JSON.parse(actp);
							return hnd.call(controller, 
								{
									success: function(data, error, noback) {
										options.disabled = false;
										if (!error && !noback) $.smobile.doBack(controller);
									}
								},
								actp
								
							);
						}
					}
					
				}
				options.disabled = false;
			
			});
		}

		
	};	
})(jQuery);    
