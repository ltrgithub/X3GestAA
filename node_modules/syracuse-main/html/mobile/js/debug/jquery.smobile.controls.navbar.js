"use strict";
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	var $proto = $.proto;
	var $sdata = $.sdata;
	that.controls = that.controls || {};
	var _theme = 'g';
	var _typedItems = {
		sync: function(item) {
			item.title = $helpers.locale().ui.sync_item;
			item.hash = that.PAGES.send.id;
			item.icon = "sync";
		},
		help: function(item) {
			item.title = $helpers.locale().maintoolbar.help;
			item.hash = that.PAGES.about.id;
			item.icon = "info";
		},
		settings: function(item) {
			if (!$sdata.capabilities.showSettings) item.hidden = true;
			item.title = $helpers.locale().maintoolbar.settings;
			item.hash = that.PAGES.settings.id;
			item.icon = "gear";
		},
		next: function(item, controller) {
			item.title = $helpers.locale().maintoolbar.next;
			item.icon = "arrow-r";
			item.action = "next";
			var ccd = controller.getCurrentData();
			item.hidden = !(ccd && ccd.$links && ccd.$links.$next);
			item.refresh = true;

		},
		previous: function(item, controller) {
			item.title = $helpers.locale().maintoolbar.previous;
			item.icon = "arrow-l";
			item.action = "previous";
			var ccd = controller.getCurrentData();
			item.hidden = !(ccd && ccd.$links && ccd.$links.$previous);
			item.refresh = true;

		},
		home: function(item) {
			item.title = $helpers.locale().maintoolbar.home;
			item.hash = $.smobile.PAGES.home.id;
			item.icon = "home";
		},
		setup: function(item) {
			item.title = $helpers.locale().maintoolbar.setup;
			item.hash = $.smobile.PAGES.apps.id;
			item.icon = "setup";
		},
		mainmenu: function(item) {
			item.title = $helpers.locale().maintoolbar.home;
			item.hash = $.smobile.PAGES.start.id;
			item.icon = "home";
		}
	};
	that.controls.panelView = {
		sync: true,
		syncHandler: function(c, left) {
			var controller = this,
				inApp = false;
			if (left && controller && controller.config && controller.config.page && controller.config.page.page) {
				var pi = controller.config.page.page;
				if (!pi.useAppId) {
					var items = c.options.items[0].items;
					if (pi.isHome) {
						if (items[0].type == "mainmenu") items.splice(0, 1);
					}
				}
			}
			if (!c.options.loaded) {
				that.controls.panelView._create_items(c.options, controller);
			}
			if (left) return;
			if (c.options.links) {
				c.options.links.forEach(function(linkid) {

					controller.actionlink({
						success: function(data) {
							if (data && data.url) {
								$('#' + linkid).attr("href", that.ui.urlHref(data.url, controller));
							}
						}

					}, {
						id: linkid
					});
				});
			}
			return $sdata.getSyncCount(function(count) {
				var $c = $(".s-m-notify-sync");
				$c.html(count + "");
				if (count) $c.removeClass('s-m-hidden');
				else $c.addClass('s-m-hidden');
			});

		},
		_create_items: function(options, controller) {
			var html = [];
			var items = options.items || [],
				links, page, proto, linksloaded;
			options.links = [];

			options.loaded = true;
			items.forEach(function(item, index) {
				if (item.code) {
					switch (item.code) {
						case "filtersort":
							var fsitems = controller.getFilterFields();
							if (fsitems) item.items.push({
								title: $helpers.locale().ui.filter,
								icon: "filter",
								action: "filter"
							});
							fsitems = controller.getSortFields();
							if (fsitems) {
								options.sortItems = fsitems;

								item.items.push({
									title: $helpers.locale().ui.sort,
									icon: "sort",
									action: "sort"
								});
							}
							break;
						case "actions":
							if (!linksloaded) {
								linksloaded = true;
								page = controller.getPageData();
								proto = $proto.getProto(page);
								links = $proto.extractLinks(proto, proto, controller.getCurrentData(), true);
							}
							if (links) {
								links.forEach(function(link) {
									//link
									if (link.method === "POST") {
										var cdid = $helpers.uuid();
										controller.alinks = controller.alinks || {};
										controller.alinks[cdid] = {
											url: link.$url,
											$method: link.$method,
											$parameters: link.$parameters
										};
										item.items.push({
											title: link.$title,
											icon: "service",
											action: "service",
											actionData: '{"id":"' + cdid + '"}'
										});
									}

								});
							}
							break;

						case "links":
							if (!linksloaded) {
								linksloaded = true;
								page = controller.getPageData();
								proto = $proto.getProto(page);
								links = $proto.extractLinks(proto, proto, controller.getCurrentData(), true);
							}
							if (links) {
								links.forEach(function(link) {
									if (link.method === "GET") {
										var cdid = $helpers.uuid();
										controller.alinks = controller.alinks || {};
										controller.alinks[cdid] = {
											url: link.$url,
											$method: link.$method,
											$parameters: link.$parameters
										};
										item.items.push({
											controlId: cdid,
											title: link.$title,
											icon: "link",
											action: "nolink",
											actionData: '{"id":"' + cdid + '"}'
										});
										options.links.push(cdid);
									}

								});
							}
							break;

					}
				}
				if (item.items && item.items.length) {
					if (item.title) html.push('<li data-role="list-divider">' + $helpers.htmlEncode(item.title) + '</li>');
					item.items.forEach(function(ii, index) {
						var count = null;
						if (ii.type === "sync") {
							options.syncHandler = that.controls.panelView.syncHandler;
							count = 0;
						}
						if (ii.type && _typedItems[ii.type]) _typedItems[ii.type](ii, controller);
						ii.jqData = ii.jqData || "";
						html.push('<li class="' + "ui-li-has-icon " + $helpers.ui.consts.panel_icon + '"');
						html.push(' data-corners="false" data-role="fieldcontain" data-shadow="false" data-iconshadow="true" data-icon="false" data-iconpos="right" data-theme="' + _theme + '">');
						that._addLink(html, ii, controller, function() {
							html.push(that.ui.panelItem(ii.title, ii.icon, ii.description, count));

						});
						html.push('</li>');
					});
				}
			});
			var $ul = $("#" + options.id);
			$ul.html(html.join(''));
			$ul.listview("refresh");

		},
		handler: function(c, after) {
			var controller = this;
			var html = [],
				options = c.data || [];
			html.push('<ul class="s-m-list"  id="' + c.id + '" data-role="listview"');
			html.push(' data-divider-theme="' + _theme + '"');
			html.push(' data-theme="' + _theme + '"');
			html.push(' data-inset="false"');
			html.push(' data-icon="false"');
			html.push('>');
			options.loaded = false;
			options.syncHandler = that.controls.panelView.syncHandler;
			options.id = c.id;
			html.push('</ul>');
			return after({
				html: html.join(''),
				bind: true,
				options: options
			});
		},
		events: function($c, c) {
			var controller = this;
			$c.click(function(e) {
				var options = c.options;
				if (controller.disabled) return;
				controller.disabled = true;
				// find parent by tag 
				var target = $helpers.getTarget(e);
				if (target) {
					var act = $(target).attr("data-action"),
						actp;
					if (act === "filter") {
						if (that.openFilterDlg) { // declared in jquery.smobile.controls.filter.js
							that.openFilterDlg(controller, controller.extraData.filters);
							e.preventDefault();
						}
					} else if (act === "sort") {
						if (that.openSortDlg) { // declared in jquery.smobile.controls.filter.js
							var order = that.controls.SDataSorter._getOrderBy(controller);
							that.openSortDlg(controller, order, options.sortItems);
							e.preventDefault();
						}
						e.preventDefault();
					} else if (act) {
						var hnd = controller["action" + act];
						if (hnd) {
							e.preventDefault();
							$helpers.clearErrors();
							var actp = $(target).attr("data-action-param");
							if (actp) actp = JSON.parse(actp);
							return hnd.call(controller, {
								success: function(data, error, noback) {
									try {
										var $panel = $('#' + controller.prefix + 'rpanel');
										$panel.panel("close");
									} catch (ex) {}
									controller.disabled = false;
									if (!error && !noback) $.smobile.doBack(controller);
								}
							},
							actp

							);
						}
					}

				}
				controller.disabled = false;

			});
		}

	};
})(jQuery);