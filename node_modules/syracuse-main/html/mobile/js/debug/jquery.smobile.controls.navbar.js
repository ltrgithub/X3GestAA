(function($) {
	'use strict';
	var that = $.smobile;
	that.controls = that.controls || {};
	that.controls.NavBar={
		_typedItems:{
			sync: function(item) {
				item.title =that.locale().ui.sync_item;
				item.hash = that.PAGES.send.id;
				item.icon = "arrow-u";
			},
			help: function(item) {
				item.title =that.locale().maintoolbar.help;
				item.hash = that.PAGES.about.id;
				item.icon = "info";
			},
			settings: function(item) {
				if (!$.sdata.capabilities.showSettings)  item.hidden = true;
				item.title =that.locale().maintoolbar.settings;
				item.hash = that.PAGES.settings.id;
				item.icon = "gear";
			},
			next: function(item) {
				item.title =that.locale().maintoolbar.next;
				item.icon = "arrow-r";
				item.action = "next";
				
			},
			previous: function(item) {
				item.title =that.locale().maintoolbar.previous;
				item.icon = "arrow-l";
				item.action = "previous";
				
			},
			home: function(item) {
				item.title =that.locale().maintoolbar.home;
				item.hash = $.smobile.PAGES.home.id;
				item.icon = "home";
			},
			setup: function(item) {
				item.title =that.locale().maintoolbar.setup;
				item.hash = $.smobile.PAGES.apps.id;
				item.icon = "plus";
			},
			services: function(item) {
				item.title = that.locale().ui.actions_item;
				item.icon = "gear";
				item.action = "popup";
				item.popupId = $.helpers.uuid();
				
			},
			mainmenu: function(item) {
				item.title =that.locale().maintoolbar.home;
				item.hash = $.smobile.PAGES.start.id;
				item.icon = "home";
			}
		},
		refresh: function(controller, options, $c, id) {	
			var html = [];
			var items = options.actions ||[];  
			var ccd = controller.getCurrentData();
			items.forEach(function(actionID) {
				var $a = $c.find( "#"+actionID.id);
				var ca = actionID.action;
				if (ca === "previous") {
					if (!ccd.$links || !ccd.$links.$previous) {
						// set disabled
						$a.addClass("ui-disabled");
					} else 
						$a.removeClass("ui-disabled");
				} else if (ca === "next") {
					if (!ccd.$links || !ccd.$links.$next) {
						// set disabled
						$a.addClass("ui-disabled");
					} else 
						$a.removeClass("ui-disabled");
					 
				}
			});
		},
		_handler: function(controller, c, after, syncCount){
			var options = c.data;
			var items = options.items ||[];  
			var html = ['<div data-role="navbar" id="'+c.id+'"'];
			$.helpers.addJqmData(options,html); 
			html.push('>');
			html.push('<ul>');
			var actions=[], hafter=[];;
			items.forEach(function(item) {
				item.navbar = true;
				// template items (sync / help )
				if (item.type && that.controls.NavBar._typedItems[item.type]) 
					that.controls.NavBar._typedItems[item.type](item);
				if (item.hidden) return;
				if (item.icon) {
					item.jmdata = item.jmdata || {};
					item.jmdata["data-icon"] = item.icon;
				}
				if (item.action) {
					var aid = c.id+'_'+item.action;
					actions.push({id: aid, action:item.action});
					html.push('<li id="'+aid+'"');
				} else
					html.push('<li style="position:relative;"');
				html.push('class="');
				html.push('"');
				html.push('>');
				if (item.bind && item.url)  {
					var page = controller.getPageData();
					item.url = $.proto.parseExpression(item.url, {data: controller.exprData(), $prototype: $.proto.getProto(page)},"$url");
				}
				var url = that.ui.sdata_link(null, item);
				if (url) item.url = url;
				that._addLink(html, item, controller, function() {
					html.push($.helpers.htmlEncode(item.title));
				});
				if (item.type === "sync") {
					html.push('<div class="s-m-notify-sync');
					if (!syncCount) html.push(' s-m-hidden');
					html.push('" data-role="none">');
					html.push(syncCount || "0");
					html.push('</div">');
				}
				if (item.action === "popup" ) {
					hafter.push('<div data-role="popup" id="'+ item.popupId+ '">');
					hafter.push('<ul data-role="listview" data-inset="true" style="min-width:210px;">');
					item.items.forEach(function(ii) {
						ii.action="service";
						hafter.push('<li>');
						ii.controlId = $.helpers.uuid();
						actions.push({id: ii.controlId, action:ii.action, url:ii.$url, method: ii.$method, popupId: item.popupId, bind:""});
						that._addLink(hafter, ii, controller, function() {
							hafter.push($.helpers.htmlEncode(ii.$title));
						});
						hafter.push('</li>');
					});
					hafter.push('</ul></div>');
				}
				
				html.push('</li>');
			});
			html.push('</ul>');
			html.push('</div>');
			var l = {html: html.join('')+ hafter.join(''), action: (actions.length > 0), options:{actions: (actions.length?actions:null)}}; 
			return after(l); 
		
		},
		handler: function(c, after){
			var items = c.data.items || [];  
			var calcSync = false;
			var controller = this;
			items.forEach(function(item){if (item.type == "sync") calcSync=true;});
			if (calcSync && $.sdata.config && $.sdata.config.id) {
				$.sdata.getSyncCount(function(value){ that.controls.NavBar._handler(controller, c, after, value); });			
			} else that.controls.NavBar._handler(controller, c, after, 0);
		},
		events: function($c, c) {
			var controller = this;
			if (c.options.actions) {
				var ccd = controller.getCurrentData();
				c.options.actions.forEach(function(actionID) {
					var $a = $( "#"+actionID.id);
					var ca = actionID.action;
					if (ca === "popup") {
						//
						return;
					}
					if (ca === "previous") {
						if (!ccd.$links || !ccd.$links.$previous) {
							// set disabled
							$a.addClass("ui-disabled");
							
						}
					} else if (ca === "next") {
						if (!ccd.$links || !ccd.$links.$next) {
							// set disabled
							$a.addClass("ui-disabled");
						}
					}
					if ($a.length) {
						$a.click(function(e) {
							if (c.options.disabled) return;
							c.options.disabled = true;
							var hnd = controller["action" + ca];
							if (actionID.popupId)
								$('#'+actionID.popupId).popup('close');
							hnd.call(controller, 
								{
									success: function(data, error, noback) {
										c.options.disabled = false;
										if (!error && !noback) $.smobile.doBack(controller);
									}
								},
								actionID
								
							);
							e.preventDefault();
							//setTimeout(function() {c.options.disabled = false;},500)
						});
					} 
				});
			}
		}
	};
})(jQuery);    
