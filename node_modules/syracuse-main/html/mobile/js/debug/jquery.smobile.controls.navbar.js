(function($) {
	'use strict';
	var that = $.smobile;
	that.controls = that.controls || {};
	that.controls.NavBar={
		_typedItems:{
			sync: function(item) {
				item.title =that.locale().ui.sync_item;
				item.hash = that.PAGES.send.id;
				item.icon = "arrow-u";
			},
			help: function(item) {
				item.title =that.locale().maintoolbar.help;
				item.hash = that.PAGES.about.id;
				item.icon = "info";
			},
			home: function(item) {
				item.title =that.locale().maintoolbar.home;
				item.hash = $.smobile.PAGES.home.id;
				item.icon = "home";
			},
			setup: function(item) {
				item.title =that.locale().maintoolbar.setup;
				item.hash = $.smobile.PAGES.apps.id;
				item.icon = "plus";
			},
			mainmenu: function(item) {
				item.title =that.locale().maintoolbar.home;
				item.hash = $.smobile.PAGES.start.id;
				item.icon = "home";
			}
		},
		_handler: function(controller, c, after, syncCount){
			var options = c.data;
			var items = options.items ||[];  
			var html = ['<div data-role="navbar" id="'+c.id+'"'];
			$.helpers.addJqmData(options,html); 
			html.push('>');
			html.push('<ul>');
			var actions=[];
			items.forEach(function(item, index) {
				item.navbar = true;
				// template items (sync / help )
				if (item.type && that.controls.NavBar._typedItems[item.type]) 
					that.controls.NavBar._typedItems[item.type](item);
				if (item.icon) {
					item.jmdata = item.jmdata || {};
					item.jmdata["data-icon"] = item.icon;
				}
				if (item.action) {
					var aid = c.id+'_'+item.action;
					actions.push({id: aid, action:item.action});
					html.push('<li id="'+aid+'">');
				} else
					html.push('<li class="u-m-relative">');
				if (item.bind && item.url)  {
					var page = controller.getPageData();
					item.url = $.proto.parseExpression(item.url, {data: controller.data, $prototype: $.proto.getProto(page)});
				}
				var url = that.ui.sdata_link(null, item);
				if (url) item.url = url;
				
				that._addLink(html, item, controller, function() {
					html.push(item.title);
				});
				if (item.type == "sync") {
					html.push('<div class="s-m-notify-sync');
					if (!syncCount) html.push(' s-m-hidden');
					html.push('" data-role="none">');
					html.push(syncCount || "0");
					html.push('</div">');
				}
				html.push('</li>');
			});
			html.push('</ul>');
			html.push('</div>');
			var l = {html: html.join(''), action: (actions.length > 0), options:{actions: (actions.length?actions:null)}}; 
			return after(l); 
		
		},
		handler: function(c, after){
			var items = c.data.items || [];  
			var calcSync = false;
			var controller = this;
			items.forEach(function(item){if (item.type == "sync") calcSync=true;});
			if (calcSync && $.sdata.config && $.sdata.config.id) {
				$.sdata.getSyncCount({ success: function(value){ that.controls.NavBar._handler(controller, c, after, value); }});			
			} else that.controls.NavBar._handler(controller, c, after, 0);
		},
		events: function($c, c) {
			var controller = this;
			if (c.options.actions) {
				c.options.actions.forEach(function(actionID) {
					var $a = $c.find( "#"+actionID.id);
					var ca = actionID.action;
					if ($a.length) {
						$a.click(function(e) {
							if (c.options.disabled) return;
							c.options.disabled = true;
							var hnd = controller["action" + ca];
							hnd.call(controller, 
								{
									success: function() {
										$.smobile.doBack(controller);
									}
								}
							);
							e.preventDefault();
							setTimeout(function() {c.options.disabled = false;},500)
							
						});
					} 
				});
			}
		}
	};
})(jQuery);    
