(function($) {
	var that = $.smobile || {};
	$.smobile = that;
	that.controls.SDataChart={
		handler: function(c, after) {
			var controller = this;
			var html = [], options= c.data || {};
			var chartsButton = {"button" : ["Pie", "Lines", "Bars"]}; 
			c.data.chartsButton = chartsButton;
			var chartsTypeButton = function (data, html){
				html.push('<div id="ChartSelectors" data-role="controlgroup" data-type="horizontal">');
				data.button.forEach(function(title){
					html.push('<a id="'+title.toLowerCase()+'" href=# data-role="button"');
					if (data.active == title) {
						html.push('class = ui-btn-active'); 
					};
					html.push('>'+title+'</a>');
				
				});
				html.push('</div>') 
			};
			if (c.data.configurations.typeSelector){
				chartsTypeButton(chartsButton, html)
			};
			html.push('<div id="SDataChart">'); 
			html.push('</div>');
				return after({ 
				html: html.join(''),
				bind: options.bind,
				options: options				
				});	
		}, 
		events: function($c, c){
			var controller = this;
			var selectedChart = c.options.configurations.chartType; 
			controller.getData(c.bind, null, [], function(data) {
				var parsedData = []; 
				var createPlot = function(data, configurations){
					var plotarea = $("#SDataChart");
	    			plotarea.css("height", c.options.css.height);  
	    			plotarea.css("width", $(window).width() - 50);
	    			var finalData = []; 
					if(typeof data[0] == 'undefined')
						finalData = c.options.data; 
					else
						finalData = parsedData;
					if (!isArray(finalData[0].data) && selectedChart != "pie")
						$("#SDataChart").html("This dataset is not compatible with this type of chart"); 
					else
						return $.plot(plotarea, finalData, configurations);	
				}; 

				var generate = function(label, value){
					parsedData.push({label: label, data: value.$count}); 

				}; 
				var bindSelectorButton = function(data){
					if (data.options.configurations.typeSelector){
						var conf = data.options.chartsButton; 
						conf.button.forEach(function(id){
							$('#'+id.toLowerCase()).bind({
								  click: function() {
								  	selectedChart = id.toLowerCase(); 
								  	setSelectedButton(conf.button, id.toLowerCase()); 
								 }
							});
						});
					};
				}; 

				var bindChartsEvent = function(){
					$("#SDataChart").bind("plothover", onHoverChart);
					$("#SDataChart").bind("plotclick", onClickChart);
				}; 

				var setSelectedButton = function(buttonsList, selectedId){
						buttonsList.forEach(function(id){
							if($('#'+id.toLowerCase()).hasClass('ui-btn-active')){
								$('#'+id.toLowerCase()).removeClass('ui-btn-active'); 
							}
						});
						$('#'+selectedId).addClass('ui-btn-active');
						refreshChart(selectedId); 
					 	
				};

				var refreshChart = function(selectedChart){
						var newSerie = {}; 
					  	newSerie[selectedChart] = {"show" : true}; 
					 	c.options.configurations.series = newSerie; 
						createPlot(parsedData, c.options.configurations);
				}; 

				var onHoverChart = function(event, pos, obj){
					if (!obj) return;
					var percent = parseFloat(obj.series.percent).toFixed(2);
					$("#hover").html('<span style="font-weight: bold; color: '+obj.series.color+'">'+obj.series.label+' ('+percent+'%)</span>');
				};

				var onClickChart = function(event, pos, obj){
					if (!obj) return;
					var percent = parseFloat(obj.series.percent).toFixed(2);
					//TODO: link to the right list. 
					alert(''+obj.series.label+': '+percent+'%');
				};

				function isArray(obj) {
    				return obj.constructor == Array;
				};

				$.helpers.each(data, function(value, index, next) {
					if (that.hasTemplate(c.options.axis.label)){
						var asTemplate = that.parseTemplate(c.options.axis.label);
						return that.execTemplate(asTemplate, value, controller, function(label) {
							//Valid template
							generate(label, value); 
							next();
						});
					}
					//Default label if not valid
					generate(c.options.axis.label, value); 
					next();  
				}, function(){
					bindSelectorButton(c); 
					bindChartsEvent();
					setSelectedButton(c.options.chartsButton.button, selectedChart); 
	
				}); 
			}); 
		}		
	};
})(jQuery);