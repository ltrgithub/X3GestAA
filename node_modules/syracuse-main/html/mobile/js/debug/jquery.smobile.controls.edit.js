'use strict';
(function($) {
	var that = $.smobile;
	that.controls = that.controls || {};
	that.controls.Edit={
		_getBindEditDefValue: function(c, type) {
			if (type == "date") {
				return new Date(); 
			} else if (type == "number") {
				return 0;
			}
			return "";
		},
		_nativeToString: function(value, type) {
			if (type ==  "number") return (value || 0) + "";
			if (type ==  "date") {
				if ($.scroller) {
					return $.scroller.formatDate($.helpers.messages.dateFormat, value, $.helpers.msFormat()); 
				}
				else
					return $.helpers.date.dateTimeToLocalDate(value);
					
			}
			return (value || "");
		},
		handler: function(c, after, layoutClass) {
			var options= c.data;
			var controller = this;
			var plc = c.data.inline;
			var html = (plc?[]:['<div data-role="fieldcontain" id="'+c.id+'">']);
			var _end = function(label) {
				html.push('<label class="ui-input-text" for="'+c.id+'_i">'+label+': </label>');
				html.push('<input ');
				var itype = (c.data.type || "text");
				if ((itype ==  "date") && $.scroller) itype = "text";
				html.push('type="'+itype +'" name="'+c.id+'" id="'+c.id+'_i" ');
				html.push('value="');
				var _afterGetValue = function(value) {
					html.push(that.controls.Edit._nativeToString(value, options.type));
					html.push('"');
					html.push('/>');
					if (!plc) html.push('</div>');
					
					return after({ 
						html: html.join(''),
						bind: options.bind,
						options: options
					});
				};
				var cv = null;
				if (controller.config.inCreate && options.autoInit) {
					cv = that.controls.Edit._getBindEditDefValue(c, options.type);
					controller.setData(options.bind, cv.toISOString());
					_afterGetValue(cv);
					
				} else {
					if (options.type == "date"){
						//OK
						controller.getData(options.bind, null,  new Date().toISOString(), function(value){
							var dd = Date.parseISO8601(value);
							return _afterGetValue(dd);
						});
					} else {
						//OK
						controller.getData(options.bind, null, "", _afterGetValue);
					}
				}
			
			}
			
			html.push('<div class="ui-m-state-block ui-m-error" data-role="none" id="'+c.id+'_error"></div>');
			if (that.hasTemplate(c.data.label)) {
				var ct = that.parseTemplate(c.data.label);
				return that._template("", ct, controller.data, controller, function(tv) {
					_end(tv);
				});
			} else {
				_end(c.data.label);
			}
		},
		checkValue:  function($c, c) {
			var controller = this;
			var $input = $c.find( '#'+ c.id + "_i");
			var e = $c.find('#'+ c.id + "_error");
			e.html("");
			if (c.options.$mandatory) {
				if ($input[0].value == "") {
					var error = {field: $c, message: $.helpers.format($.helpers.messages.field_requires,[c.options.label])};
					controller.pushError(error);
					e.html(error.message);
				}
			} 
		},
		events: function($c, c) {
			var controller = this;
			var $input = $c.find( '#'+ c.id + "_i");
			if ((c.options.type == "date") && $.scroller) {
				$input.scroller($.helpers.msSettings());
			}	
			$input.blur(function() {
				var _aftercchange = controller.afterChangeHnd(c);
				if (c.bind) {
					if (c.options.type == "number") {
						//OK
						controller.getData(c.bind, null, 0, function(onvalue){
							var nnvalue = parseFloat($input[0].value);
							if (isNaN(nnvalue)) nnvalue = onvalue;
							var _after = function() {
								if (c.options.decimals != null) {
									nnvalue = parseFloat(nnvalue.toFixed(c.options.decimals));
								}
								$input[0].value = nnvalue;
								controller.checkChange(c.id, nnvalue, _aftercchange);
							
							}
							if ((c.options.decimals == null) && c.options.bindDecimals) {
								//OK
								controller.getData(c.options.bindDecimals, null, 0, function(decimals) {
									c.options.decimals =decimals;
									_after();
								});
							} else _after();

						});
                                                
					} else if ( c.options.type== "date") {
						var value = $input.val();
						if ($.scroller) {
							value = $.scroller.parseDate($.helpers.messages.dateFormat, value, $.helpers.msFormat());
							value = $.helpers.date.dateTimeToLocalDate(value);
						}
						//OK
						controller.getData(c.bind, null,  new Date().toISOString(), function(orig){
							var newValue = $.helpers.date.checkString(value, orig);
							if (value != newValue) {
								var s = newValue;
								if ($.scroller) {
									s = $.scroller.formatDate($.helpers.messages.dateFormat, $.helpers.date.isoToDate(value), $.helpers.msFormat()); 
								}
								$input.val(s);
							}
							if ($.helpers.date.dateTimeToLocalDate(Date.parseISO8601(orig)) != newValue) {
								controller.checkChange(c.id, $.helpers.date.dateStringToIso(newValue), _aftercchange);
							}
						});
					} else {
						controller.checkChange(c.id, $input.val(), _aftercchange);
					}
				}
			});
		}
	};
})(jQuery);    
