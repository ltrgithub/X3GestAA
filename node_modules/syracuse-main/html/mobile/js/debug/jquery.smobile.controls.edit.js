'use strict';
(function($) {
	var that = $.smobile;
	that.controls = that.controls || {};
	that.controls.Edit={
		_getBindEditDefValue: function(c, type) {
			if (type == "date") {
				return new Date(); 
			} else if (type == "number") {
				return 0;
			}
			return "";
		},
		_nativeToString: function(value, type) {
			if (type ==  "number") return (value || 0) + "";
			if (type ==  "date") {
				if ($.scroller) {
					return $.scroller.formatDate($.helpers.messages.dateFormat, value, $.helpers.msFormat()); 
				}
				else
					return $.helpers.date.dateTimeToLocalDate(value);
					
			}
			return (value || "");
		},
		createEdit: function(controller, c) {
			var options= c.data;
			var plc = options.inline;
			var html = (plc?[]:['<div data-role="fieldcontain" id="'+c.id+'">']);
			html.push('<div class="ui-m-state-block ui-m-error" data-role="none" id="'+c.id+'_error"></div>');
			html.push('<label class="ui-input-text" for="'+c.id+'_i">'+$.helpers.htmlEncode(options.label)+': </label>');
			html.push('<input ');
			var itype = (options.type || "text");
			if ((itype ==  "date") && $.scroller) itype = "text";
			html.push('type="'+itype +'" name="'+c.id+'" id="'+c.id+'_i" ');
			html.push('value="');
			var cv = null;
			if (controller.config.inCreate && options.autoInit) {
				cv = that.controls.Edit._getBindEditDefValue(c, options.type);
				controller.setData(options.bind, cv.toISOString());
			} else if (options.type == "date") {
				//OK
				cv = controller.getValue(options.bind, null,  new Date().toISOString());
				cv = Date.parseISO8601(cv);
			} else {
				cv = controller.getValue(options.bind, null, "");
			}
			html.push(that.controls.Edit._nativeToString(cv, options.type));
			html.push('"/>');
			if (!plc) html.push('</div>');
			return { 
				html: html.join(''),
				bind: options.bind,
				options: options
			};
		},
		handler: function(c, after) {
			return  after(that.controls.Edit.createEdit(this, c));
		},
		checkValue:  function($c, c) {
			var controller = this;
			var $input = $c.find( '#'+ c.id + "_i");
			var e = $c.find('#'+ c.id + "_error");
			e.html("");
			if (c.options.$mandatory) {
				if ($input[0].value == "") {
					var error = {field: $c, message: $.helpers.format($.helpers.messages.field_requires,[c.options.label])};
					controller.pushError(error);
					e.html(error.message);
				}
			} 
		},
		events: function($c, c) {
			var controller = this;
			var $input = $c.find( '#'+ c.id + "_i");
			if ((c.options.type == "date") && $.scroller) {
				$input.scroller($.helpers.msSettings());
			}	
			$input.blur(function() {
				var _aftercchange = controller.afterChangeHnd(c), value, ovalue, nnvalue;
				if (c.bind) {
					if (c.options.type == "number") {
						//OK
						value = controller.getValue(c.bind, null, 0);
						nnvalue = parseFloat($input[0].value);
						if (isNaN(nnvalue)) nnvalue = value;
						var decimals = c.options.decimals; 
						if ((c.options.decimals == null) && c.options.bindDecimals) 
							decimals = controller.getValue(c.options.bindDecimals, null, 0);
						if (decimals != null) nnvalue = parseFloat(nnvalue.toFixed(decimals));
						$input[0].value = nnvalue;
						controller.checkChange(c.id, nnvalue, _aftercchange);
					} else if ( c.options.type== "date") {
						value = $input.val();
						if ($.scroller) {
							value = $.scroller.parseDate($.helpers.messages.dateFormat, value, $.helpers.msFormat());
							value = $.helpers.date.dateTimeToLocalDate(value);
						}
						ovalue = controller.getValue(c.bind, null, new Date().toISOString());
						nnvalue = $.helpers.date.checkString(value, ovalue);
						if (value != nnvalue) {
							var s = nnvalue;
							if ($.scroller) 
								s = $.scroller.formatDate($.helpers.messages.dateFormat, $.helpers.date.isoToDate(value), $.helpers.msFormat()); 
							$input.val(s);
						}
						if ($.helpers.date.dateTimeToLocalDate(Date.parseISO8601(ovalue)) != nnvalue) 
							controller.checkChange(c.id, $.helpers.date.dateStringToIso(nnvalue), _aftercchange);
					} else {
						controller.checkChange(c.id, $input.val(), _aftercchange);
					}
				}
			});
		}
	};
})(jQuery);    
