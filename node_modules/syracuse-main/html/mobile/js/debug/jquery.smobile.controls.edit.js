(function($) {
	'use strict';
	var that = $.smobile;
	var $helpers = $.helpers;
	var $scroller = $.scroller;
	that.controls = that.controls || {};
	
	that.controls.Edit={
		_nativeToString: function(value, type) {
			if (type ==  "number") return (value || 0) + "";
			if (type ==  "date") {
				if (!value) return "";
				return $scroller.formatDate($helpers.dateSettings.dateFormat, value); 
			} else if (type ==  "datetime") {
				if (!value) return "";
				return $scroller.formatDate($helpers.dateSettings.dateFormat + "  " + $helpers.dateSettings.timeFormat, value); 
			} else if (type ==  "time") {
				return value.format();  
			} 
			return (value || "");
		},
		_getvalue: function(options,controller)  { 
			var cv = null;
			if (options.type == "date") {
				//OK
				var saveDate = true;
				cv = controller.getValue(options.bind, null, null);
				if (cv != null) {
					try {
						cv = Date.parseISO8601(cv);
					} catch (ex) {
						cv = new Date();
						saveDate = true;
					}
				} else {
					if (options.$isMandatory && controller.config.inCreate) {
						cv = new Date();
						saveDate = true;
					}
				}
				if (saveDate) {
					//controller.setValue(options.bind, cv);
					// notify changes : controller.donotify
				}
			} else if (options.type == "time") {
				cv = controller.getValue(options.bind, null, 0);
				var saveTime = true;
				try {
					cv = $helpers.Time.parse(cv);
				} catch (ex) {
					cv = new $helpers.Time(0);
					saveTime = true;
				}
			} else if (options.type == "datetime") {
				cv = controller.getValue(options.bind, null, 0);
				var saveDateTime = true;
				if (cv != null) {
					try {
						cv = Date.parseISO8601(cv);
					} catch (ex) {
						cv = new Date();
						saveDateTime = true;
					}
				} else {
					if (options.$isMandatory && controller.config.inCreate) {
						cv = new Date();
						saveDateTime = true;
					}
				}
			} else if (options.type == "number") {
				cv = controller.getValue(options.bind, null, 0);
			} else {
				cv = controller.getValue(options.bind, null, "");
			}
			return that.controls.Edit._nativeToString(cv, options.type);
		},
			
		
		createEdit: function(controller, c) {
			var options= c.data;
			var html = ['<div data-role="fieldcontain" id="'+c.id+'">'];
			that.ui.addErrors(controller, options.bind, c.id, html);		
			html.push('<label class="ui-input-text" for="'+c.id+'_i">'+$helpers.htmlEncode(options.label)+ (options.$isMandatory?"*":"")+'</label>');
			html.push('<input ');
			var itype = (options.type || "text");
			if ((itype ==  "date") || (itype ==  "time") || (itype ==  "datetime")) itype = "text";
			html.push('type="'+itype +'" name="'+c.id+'" id="'+c.id+'_i" ');
			if (options.$isReadOnly) {
				html.push('readonly="true" ');
			}			
			html.push('value="');
			var cv = that.controls.Edit._getvalue(options, controller);
			
			html.push($helpers.htmlEncode(cv));
			html.push('"');
			if (options.$pattern) 
				html.push(' pattern="'+ options.$pattern + '"');
			if (options.$minimum) html.push(' min="'+ options.$minimum + '"');
			if (options.$maximum) html.push(' max="'+ options.$maximum + '"');
			if (options.$maxLength) html.push(' maxlength="'+options.$maxLength+'"');
			if (options.$isMandatory) html.push(' required="required"');
			html.push('/>');
			
			html.push('</div>');
			return { 
				html: html.join(''),
				bind: options.bind,
				options: options
			};
		},
		refresh: function(controller, options, $c, id) {
			var $input = $( '#'+ id + "_i");
			$input.val(that.controls.Edit._getvalue(options, controller));
			that.ui.refreshErrors(controller, options.bind, id);
		},
		sync: true,
		handler: function(c, after) {
			return  after(that.controls.Edit.createEdit(this, c));
		},
		checkValue:  function($c, c) {
			var controller = this;
			var $input = $c.find( '#'+ c.id + "_i");
			var e = $c.find('#'+ c.id + "_error");
			e.html("");
			var opts = c.options, error;
			if (opts.$isMandatory && ($input[0].value === "")) {
				error = {field: $c, message: $helpers.format($helpers.locale().ui.mandatory_field,[opts.label])};
				controller.pushError(error);
				e.html(error.message);
			}  else if (opts.$minLength && ($input[0].value.length < opts.$minLength)) {
				error = {field: $c, message: $helpers.format($helpers.locale().ui.minlength_field,[opts.label])};
				controller.pushError(error);
				e.html(error.message);
			}
			
		},
		
		_checkDateTime: function(c, controller) {
			var $input = $( '#'+ c.id + "_i"), value, ovalue, nnvalue, _aftercchange = controller.afterChangeHnd(c);
			if ( c.options.type== "date") {
				value = $input.val();
				if (!value) 
					return controller.checkChange(c.id, value, _aftercchange);
				try {
					value = $scroller.parseDate($helpers.dateSettings.dateFormat, value);
				} catch(ex) {
					value = new Date();
				}
				value = value.toISOString();
				ovalue = controller.getValue(c.bind, null, "");
				nnvalue = $helpers.date.checkString(value, ovalue);
				if (value != nnvalue) {
					var s = $scroller.formatDate($helpers.dateSettings.dateFormat, $helpers.date.isoToDate(value)); 
					$input.val(s);
				}
				if (ovalue != nnvalue) 
					controller.checkChange(c.id, nnvalue, _aftercchange);
			} else if ( c.options.type== "time") {
				value = $input.val();
				ovalue = controller.getValue(c.bind, null, "");
				if (!value) 
					value = $helpers.Time.parse(ovalue).format();
				try {
					value = $helpers.Time.parseTime(value);
				} catch(ex) {
					value = $helpers.Time.parse("00:00");
				}
				$input.val(value.format());
				value = value.toISO();
				if (value != ovalue) 
					controller.checkChange(c.id, value, _aftercchange);
			} else if ( c.options.type== "datetime") {
				value = $input.val();
				if (!value) 
					return controller.checkChange(c.id, value, _aftercchange);
				try {
					value = $scroller.parseDate($helpers.dateSettings.dateFormat + ' ' +$helpers.dateSettings.timeFormat, value);
				} catch(ex) {
					value = new Date();
				}
				value = value.toISOString();
				ovalue = controller.getValue(c.bind, null, "");
				var s = $scroller.formatDate($helpers.dateSettings.dateFormat + ' ' +$helpers.dateSettings.timeFormat, $helpers.date.isoToDate(value)); 
				$input.val(s);
				if (ovalue != value) 
					controller.checkChange(c.id, value, _aftercchange);
			}

		},
		events: function($c, c) {
			var controller = this;
			var $input = $c.find( '#'+ c.id + "_i");
			if (c.options.type == "date") 
				$input.scroller({ preset: 'date'});
			else if (c.options.type == "datetime") 
				$input.scroller({ preset: 'datetime'});
			else if (c.options.type == "time") 
				$input.scroller({ preset: 'time'});
			$input.blur(function() {
				var _aftercchange = controller.afterChangeHnd(c), value, ovalue, nnvalue;
				if (c.bind) {
					if (c.options.type == "number") {
						//OK
						value = controller.getValue(c.bind, null, 0);
						nnvalue = parseFloat($input[0].value);
						if (isNaN(nnvalue)) nnvalue = value;
						var decimals = c.options.decimals; 
						if ((c.options.decimals == null) && c.options.bindDecimals) 
							decimals = controller.getValue(c.options.bindDecimals, null, 0);
						if (decimals != null) nnvalue = parseFloat(nnvalue.toFixed(decimals));
						$input[0].value = nnvalue;
						controller.checkChange(c.id, nnvalue, _aftercchange);
					} else if ( c.options.type== "datetime") {
						window.setTimeout(function() {that.controls.Edit._checkDateTime(c, controller);}, 0);
					} else if ( c.options.type== "time") {
						window.setTimeout(function() {that.controls.Edit._checkDateTime(c, controller);}, 0);
					} else if ( c.options.type== "date") {
						window.setTimeout(function() {that.controls.Edit._checkDateTime(c, controller);}, 0);
					} else {
						controller.checkChange(c.id, $input.val(), _aftercchange);
					}
				}
			});
		}
	};
})(jQuery);    
