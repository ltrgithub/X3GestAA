"use strict"; 
$(function(){
	var cache = window.applicationCache;
	/*if (cache) {
		function onUpdateReady() {
		  alert('found new version!');
		}
		cache.addEventListener('updateready', onUpdateReady);
		if(cache.status === cache.UPDATEREADY) {
		  onUpdateReady();
		}	
	
	}*/
	function setJMobileEvents() {
		$(document).bind("pagebeforechange", function( e, data ) {
			var $helpers = $.helpers;
			var $sdata = $.sdata;
			if (!window.location.hash) {
				e.preventDefault();
				return;
			}
			var force = false, np;
			if (typeof data.toPage === "string") {
				force = true;
				$.mobile.$start = false;
				$.mobile.hashListeningEnabled = true;
				np = data.toPage;
			} else if ($.mobile.$start) {
				force = true;
				$.mobile.$start = false;
				$.mobile.hashListeningEnabled = true;
				np = window.location.href;
				data = null;
			}
			
			if (!force)  {
				//Bug jquery Mobile 1.2 back && forward avec "page-template"
				if (data && data.toPage.length && (data.toPage[0].id == "page-template")) {
					data =null;
					np = window.location.href;
					force = true;
				}
			}
			// We only want to handle changePage() calls where the caller is
			// asking us to load a page by URL
			if (force) {
				$.proto.auth.notifyParent("pagechange", null, {name:""});
				// We are being asked to load a page by URL, but we only
				// want to handle URLs that request the data for a specific
				// category.
				var u = $.mobile.path.parseUrl(np), dataUrl;
				var page = $.smobile.pageName(u.hash);
				if (page) {
					if (page && page.page && page.page.isHome) {
						$.mobile.urlHistory.clearForward();
					}
					var activePage = $.mobile.activePage, npcontroller, doremove=false;
					var $foundPage = page.domid?$("#" +page.domid):false;
					if ($foundPage && $foundPage.length) {
						// Page found in dom
						npcontroller = $.smobile.pageController($($foundPage[0]));
						var cpp = {transition: "none"};
						if (!$sdata.config) {
							e.preventDefault();
							$.mobile.changePage($foundPage, cpp);
							$.smobile.removeAllPages([$foundPage[0].id], true);
							return;
						} else {
							e.preventDefault();
							if (npcontroller) {
								npcontroller.notifyAuthoring('pageload');
								doremove = page.page.isHome;
								if (npcontroller.needRefresh) {
									npcontroller.needRefresh = false
									if (npcontroller.child) 
										npcontroller.doRefresh();
								}
							}
							var $n = $foundPage.find(".s-m-notify-sync");
							if ($n && $n.length) 
								return $sdata.getSyncCount(function(count) {
									$n.html("" + count);
									if (count) {
										if ($n.hasClass('s-m-hidden')) $n.removeClass('s-m-hidden');
									} else {
										if (!$n.hasClass('s-m-hidden'))	$n.addClass('s-m-hidden');
									}
									$.mobile.changePage($foundPage, cpp);
									if (doremove) $.smobile.removeAllPages([$foundPage[0].id], true);
								});
							else {
								$.mobile.changePage($foundPage, cpp);
								if (doremove) $.smobile.removeAllPages([$foundPage[0].id], true);
							}
						}
						return;

					}
					var options = data?data.options:{} ;
					options.allowSamePageTransition = true;
					options.showLoadMsg = true;
					// load page 
					$.mobile.loading('show', {theme: "a", text: $helpers.locale().ui.loading});
					e.preventDefault();
					$.smobile.loadPage(u.hash, page, function(uiId, ui, error, afterdata) {
						if (!ui) {
							$.mobile.loading('hide');
							return $.smobile.doBack(null);
							if ((page.page.id != $.smobile.PAGES.errors.id)) {
								if ($helpers.hasErrors())
									$.smobile.showErrors();					
								else {
									if (error && (typeof error === "object") && error.action) 
										$.smobile.silentAction(error);
									else
										$.smobile.showError(options, error || "");
								}
							}
							return;
						}
						$sdata.startLoad();
						$.smobile.parseURL(u, page, function(href, resData, error, info) {
							if (info && info.stop) 	{
								$sdata.endLoad();
								return;
							}
							if (error)  {
								$sdata.endLoad();
								$.mobile.loading('hide');
								if ((page.page.id != $.smobile.PAGES.errors.id)) {
									if ($helpers.hasErrors())
										$.smobile.showErrors();					
									else {
										if (resData)
											$.smobile.showError(options, resData || '');
										if (href) window.location.href = href;
									}
									return;
								}
							}
							if (afterdata) afterdata(resData);
							options.dataUrl = href;
							var cp = $.smobile.createPage(page);
							var $ptemplate = cp.$template, $page=cp.$page;
							$.smobile.buildPage(uiId, activePage, $page, ui, resData, info, page, $ptemplate, function() {
								var controller = $.jqmData($page[0], "controller");
								if ($helpers.hasErrors()) {
									$sdata.endLoad();
									if (controller && !controller.hasErrorView) { 
										controller.remove();
										$page.remove();
										return $.smobile.showErrors();
									}
								} 
								if (ui.actions) {
									controller.pageActions = ui.actions;
									ui.actions = null;
								}
								if (!controller.pageOptions.dialog && options.dataUrl) {
									$page.attr('data-url',$.smobile.hashOfUrl(options.dataUrl));
								}
								var co = data?data.options:{};
								if (controller.pageOptions.changeHash != null) co.changeHash=controller.pageOptions.changeHash;
								controller.notifyAuthoring('pageload');
								$.mobile.changePage($page, co);
								controller.bindData();
								$sdata.endLoad();
							});
						});
					});
					// Make sure to tell changePage() we've handled this call so it doesn't
					// have to do anything.
					//e.preventDefault();
				} else {
					var action = $.smobile.actionName(u.hash);
					if (action) {
						e.preventDefault();
						$.smobile.execAction(u.hash, action, function(refresh) {
							if (refresh)$.smobile.refreshPage();
						});
					}
				}
			}
		});
		$(document).bind( "pagehide", function(fromPage, data) {
			var $helpers = $.helpers;
			if (!window.location.hash) return;
			if (fromPage.target != data.nextPage[0]) {
				var currentController = $.jqmData(fromPage.target, "controller");
				var nextController = $.jqmData(data.nextPage[0], "controller");
				if (currentController && currentController.pageInfo && currentController.pageInfo.page.cache) {
					//this page must be cached (home page by example) : don't  remove current page
					//$helpers.log("cache current page: this page can be cached");
					return;
				}
				var dialog = $.smobile.pageIsDialog(data.nextPage);
				var detail = (dialog?false:$.smobile.pageIsDetail(data.nextPage));
				if (detail || dialog) {
					// next page is dialog/detail don't  remove current page
					if (nextController.child === currentController)  {
						$.smobile.removePage(fromPage.target);
					} else {	
						$helpers.log("cache current page: next page is  detail/dialog");
					}
					return;
				}
				if (currentController){
					if (currentController && currentController.config && currentController.config.ui && (currentController.config.ui.indexOf(".$query") > 0))
						return;
					if (currentController && currentController.pageActions && currentController.pageActions.close) {
						currentController.pageActions.close.apply(currentController);
					}
					$.smobile.removePage(fromPage.target);
				}
				
			}
		});

	};
	function mobileStart() {
		setJMobileEvents();
		var setDefaultTransition = function(){
			var winwidth = $(window).width(),
			trans ="slide";
			//if( winwidth >= 1000 )
			//	trans = "none";
			//else if ( winwidth >= 650 )	
			//	trans = "fade";
			trans = "none";
			$.mobile.defaultPageTransition = trans;
		};
		setDefaultTransition();
		$( window).bind( "throttledresize", setDefaultTransition );
		if (window.location.hash) {
			$.mobile.$start =true;
			$.mobile.initializePage();
		} else {
			setTimeout(function() {
				window.location.hash = "#start";
				$.mobile.$start =true; 
				$.mobile.initializePage();
			}, 0);
		}
	}
	if ($.sdata.capabilities.loadLocale && $.sdata.capabilities.localeLoader) {	
		// load locale
		$.sdata.capabilities.localeLoader(function() {
			mobileStart();
		});
	} else 
		mobileStart();
});
