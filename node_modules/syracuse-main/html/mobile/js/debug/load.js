//if ((page != "errors") && (page != "main")) {
$(function(){
	var setDefaultTransition = function(){
		var winwidth = $(window).width(),
		trans ="slide";
		//if( winwidth >= 1000 )
		//	trans = "none";
		//else if ( winwidth >= 650 )	
		//	trans = "fade";
		trans = "none";
		$.mobile.defaultPageTransition = trans;
	};
	setDefaultTransition();
	$( window).bind( "throttledresize", setDefaultTransition );
	if (window.location.hash) {
		$.mobile.$start =true;
		$.mobile.initializePage();
	} else {
		setTimeout(function() {
			window.location.hash = "#start";
			$.mobile.$start =true; 
			$.mobile.initializePage();
		}, 0);
	}
	
});
$(document).bind( "pagebeforechange", function( e, data ) {
	
	if (!window.location.hash) return;
	var force = false, np;
	if (typeof data.toPage === "string") {
		force = true;
		$.mobile.$start = false;
		$.mobile.hashListeningEnabled = true;
		np = data.toPage;
	} else if ($.mobile.$start) {
		force = true;
		$.mobile.$start = false;
		$.mobile.hashListeningEnabled = true;
		np = window.location.href;
		data = null;
	}
	if (!force)  {
		//Bug jquery Mobile 1.2 back && forward avec "page-template"
		if (data && data.toPage.length && (data.toPage[0].id == "page-template")) {
			data =null;
			np = window.location.href;
			force = true
		}
	}
	// We only want to handle changePage() calls where the caller is
	// asking us to load a page by URL
	if ( force ) {
		// We are being asked to load a page by URL, but we only
		// want to handle URLs that request the data for a specific
		// category.
		var u = $.mobile.path.parseUrl(np), oldpage, doHashChange = true, dataUrl, trans;
		var page = $.smobile.pageName(u.hash);
		if (page) {
			var dialog =false, detail = false, oldController;
			if (data && data.options && data.options.fromPage) {
				dialog = $.smobile.pageIsDialog(data.options.fromPage);
				if (!dialog) detail = $.smobile.pageIsDetail(data.options.fromPage);
				oldController = $.smobile.pageController(data.options.fromPage);
				if (!oldController) {
					if (dialog) {
						doHashChange = false;
						trans = "none";
						//dialog ---> back or dialog --> close 
						// data.options.fromPage  is an ordinary dialog page : combo/calendar etc 
						oldpage = $.smobile.lastPage();
						if (oldpage) page.domid = oldpage.id;  //return to old page 
					}
				} else {
					if (dialog) {
						// dialog --> back 
						doHashChange = false;
						trans = "none";
						oldpage = $.smobile.lastPage();
						if (oldpage) page.domid = oldpage.id;  //return to old page
					} else if (detail) {
						oldpage = $.smobile.prevPage(oldController.pageInfo.domid);
						if (oldpage) {
							doHashChange = true;
							var curl = window.location.href;
							if (oldpage.href == window.location.href) {
								 page.domid = oldpage.id;
								 dataUrl = window.location.href;
							} else {
								var idx = curl.indexOf('#');
								if (idx) curl = curl.substring(0, idx+1) + encodeURIComponent(curl.substr(idx+1));
								if (oldpage.href == curl) {
									page.domid = oldpage.id;
									dataUrl = curl;
								} else	oldpage = null;
							}
						}
					}
				}
			}
			var $foundPage = page.domid?$("#" +page.domid):false;
			if ($foundPage && $foundPage.length) {
				//console.log("Page found ...");
				if (!$.sdata.config) {
					$.smobile.removePage($foundPage[0]);
					$.smobile.removeAllPages();
				} else {
					var $n = $foundPage.find(".u-m-notify-sync");
					e.preventDefault();
					var cpp = {changeHash: doHashChange, transition: "none"};
					if (doHashChange && dataUrl) cpp.dataUrl = dataUrl;
					if (trans) cpp.transition =trans;
					if ($n && $n.length) {
						return $.sdata.getSyncCount({
							success: function(count) {
								$n.html("" + count);
								if (count) {
									if ($n.hasClass('u-m-hidden'))
										$n.removeClass('u-m-hidden');
								} else {
									if (!$n.hasClass('u-m-hidden'))	
										$n.addClass('u-m-hidden');
								}
								$.mobile.changePage($foundPage, cpp);
							}
						});
					} else {
						$.mobile.changePage($foundPage, cpp);
					}
					return;
				}
			} else if (oldpage) {
				$.smobile.removeAllPages();
			}
      	
			var options = data?data.options:{} ;
			options.allowSamePageTransition = true;
			options.showLoadMsg = true;
			// load page 
			$.mobile.showPageLoadingMsg("a", $.helpers.messages.loading);
			$.smobile.startDate = new Date();
			$.smobile.loadPage(u.hash, page, function(uiId, ui, error) {
				if (!ui) {
					$.mobile.hidePageLoadingMsg();
					if ((page.page.id != $.smobile.PAGES.errors.id)) {
						if ($.helpers.hasErrors())
							$.smobile.showErrors();					
						else {
							if (error && (typeof error === "object") && error.action) 
								$.smobile.silentAction(error);
							else
								$.smobile.showError(options, error || "");
						}
					}
					return;
				}
				$.sdata.startLoad();
				$.smobile.parseURL(u, page, function(href, resData, error, info) {	
					if (info && info.stop) 	{
						$.sdata.endLoad();
						return;
					}
					if (error)  {
						$.sdata.endLoad();
						$.mobile.hidePageLoadingMsg();
						if ((page.page.id != $.smobile.PAGES.errors.id)) {
							if ($.helpers.hasErrors())
								$.smobile.showErrors();					
							else {
								if (resData)
									$.smobile.showError(options, resData || '');
								if (href) window.location.href = href;
							}
							return;
						}
					}
					options.dataUrl = href;
					var cp = $.smobile.createPage(page);
					var $ptemplate = cp.$template, $page=cp.$page;
					$.smobile.buildPage(uiId, null, $page, ui, resData, info, page, $ptemplate, function() {
						var controller = $.jqmData($page[0], "controller");
						if ($.helpers.hasErrors()) {
							$.sdata.endLoad();
							if (controller && !controller.hasErrorView) { 
								controller.remove();
								$page.remove();
								return $.smobile.showErrors();
							}
						} 
						var co = data?data.options:{changeHash:false};
						if (controller.pageOptions.changeHash != null) co.changeHash=controller.pageOptions.changeHash;
						if (co.changeHash && !controller.pageInfo.page.cache  && !controller.pageOptions.dialog)
							$.smobile.pushPage({id: controller.pageInfo.pageId, detail:controller.pageOptions.detail, dialog: controller.pageOptions.dialog, href:data.options.dataUrl});
						$.mobile.changePage($page, co);
						controller.bindData();
						$.sdata.endLoad();
					});
				});
			});
			// Make sure to tell changePage() we've handled this call so it doesn't
			// have to do anything.
			e.preventDefault();
		} else {
			var action = $.smobile.actionName(u.hash);
			if (action) {
				e.preventDefault();
				$.smobile.execAction(u.hash, action, function(refresh) {
					if (refresh)$.smobile.refreshPage();
				});
			}
		}
	}
});




$(document).bind( "pagehide", function(fromPage, data) {
	if (!window.location.hash) return;
	if (fromPage.target != data.nextPage[0]) {
		var currentController = $.jqmData(fromPage.target, "controller");
		var nextController = $.jqmData(data.nextPage[0], "controller");
		if (currentController && currentController.pageInfo && currentController.pageInfo.page.cache) {
			//this page must be cached (home page by example) : don't  remove current page
			//console.log("cache current page: this page can be cached");
			return;
		}
		var dialog = $.smobile.pageIsDialog(data.nextPage);
		var detail = (dialog?false:$.smobile.pageIsDetail(data.nextPage));
		
		if (detail || dialog) {
			// next page is dialog/detail don't  remove current page
			if (detail && nextController && currentController) 
				nextController.pageInfo.prevPageDomid = currentController.pageInfo.domid;
			//console.log("cache current page: next page is  detail/dialog");
			return;
		}
		if (currentController){
			if (currentController.pageInfo.prevPageDomid) {	
				if (nextController && (nextController.pageInfo.domid != currentController.pageInfo.prevPageDomid)) {
					var pp = $('#' +  currentController.pageInfo.prevPageDomid);
					if (pp && pp.length)
						$.smobile.removePage( pp[0]);
				}
			}
			$.smobile.removePage(fromPage.target);
		}
		
	}
});





