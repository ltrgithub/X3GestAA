"use strict"; 
(function($) {
	var that = $.smobile;
	that.controls = that.controls || {};
	var $helpers = $.helpers; // == require
	var $proto = $.proto;     // == require
	/* used for $query or $lookup */
	that.controls.SingleField={
		sync: true,
		handler: function(c, after) {
			var controller = this, protoProp, fieldData;
			var  options= c.data || {};
			var page = controller.getPageData();
			if (!page)  return after({ html: "",options: {}});
			var html = [];
			var edit = (options.facet === "$edit") || (options.facet === "$create");
			var cp = $proto.getProto(page, options.$bind), pp= cp;
			var entityProto = $proto.getProto(page);
			if (cp.$rtype === "application/x-reference") pp= cp.$protoparent;
			var $article = options.$article;
			if (edit) {
				var $article = options.$article;
				options.$article = null;
				var controls =[];
				var cp = $proto.getProto(page, options.$bind), cc = null, ft = cp.$type || cp.$rtype;
				var scc ={id: c.id + "_" + options.$bind, data: {inline: false, bind: options.$bind}};
				var opts = scc.data;
				if (cp.$isReadOnly)  opts.$isReadOnly = true;
				if (cp.$isDisabled)  opts.$isDisabled = true;
				var title = $proto.parseExpression(pp.$shortTitle || pp.$title, {data: null, $prototype: pp},"$title");
				switch (ft) {
					case "application/x-reference":
						opts.type = "text";
						protoProp = cp.$protoparent;
						fieldData = controller.getValue(options.$bind);
						opts.label = title;
						opts.$article = $article;
						scc.id = c.id + "_" + options.$bind;
						if (cp.$links && cp.$links.$lookup && cp.$links.$lookup.$url) {
							opts.$lookupurl = $proto.parseExpression( cp.$links.$lookup.$url, {data: controller.exprData(fieldData), $prototype: cp},"$url");
						}
							
						if (cp.$isMandatory) opts.$isMandatory = true;
						cc = that.controls.Lookup.createLookup(controller, scc);
						cc.id = scc.id;
						cc.uiClass = "Lookup";
						cc.scid = "_" + options.$bind;
						break;
					
					case "application/x-string": 
					case "application/x-password": 
						opts.type = "text";
						opts.label = title;
						scc.id = c.id + "_" + options.$bind;
						opts.$minLength = cp.$minLength;
						opts.$maxLength = cp.$maxLength;
						opts.$article = $article;
						if (cp.$format == "$email") opts.type = "email";
						else if (cp.$format == "$url") opts.type = "url";
						else if (cp.$format == "$phone") opts.type = "tel";
						if (ft === "application/x-password") opts.type = "password";
						if (cp.$isMandatory) opts.$isMandatory = true;
						cc = that.controls.Edit.createEdit(controller, scc);
						cc.id = scc.id;
						cc.uiClass = "Edit";
						cc.scid = "_" + options.$bind;
						break;
					case "application/x-choice": 
						var items = [];
						opts.items = items;
						opts.$isMandatory = true; 
						opts.$article = $article;
						cp.$value.$enum.forEach(function(value) {
							items.push({value:value.$value, title:$proto.execExpression(value.$title, cp)});
							
						})
						opts.label = title;
						scc.id = c.id + "_" + options.$bind;
						cc = that.controls.Combo.createCombo(controller, scc);
						cc.id = scc.id;
						cc.uiClass = "Combo";
						cc.scid = "_" + options.$bind;
						break;
					case "application/x-integer": 
					case "application/x-real": 
					case "application/x-decimal": 
						opts.type = "number";
						opts.decimals = 0;
						opts.$article = $article;
						if (cp.$format != null) 
							opts.decimals =  $helpers.format2decimals(cp.$format);
						else if (cp.$scale != null) 
							opts.decimals = cp.$scale;
						opts.label = title;
						if (opts.$article.$minimum != null) opts.$minimum = opts.$article.$minimum; 
						if (opts.$article.$maximum != null)  opts.$maximum = opts.$article.$maximum;
						if (cp.$minimum != null) opts.$minimum = cp.$minimum; 
						if (cp.$maximum != null) opts.$maximum = cp.$maximum;
						if ((opts.$minimum != null) && (opts.$maximum != null) && (opts.$minimum || opts.$maximum)) 
							opts.type = "range";
						opts.$isMandatory = true;
						scc.id = c.id + "_" + options.$bind;
						cc = that.controls.Edit.createEdit(controller, scc);
						cc.id = scc.id;
						cc.uiClass = "Edit";
						cc.scid = "_" + options.$bind;
						break;
					case "application/x-boolean": 
						opts.label = title;
						opts.$article = $article;
						scc.id = c.id + "_" + options.$bind;
						cc = that.controls.CheckBox.createCheckBox(controller, scc);
						cc.id = scc.id;
						cc.uiClass = "CheckBox";
						cc.scid = "_" + options.$bind;
						break;
					case "image": 
						opts.label = title;
						opts.$article = $article;
						scc.id = c.id + "_" + options.$bind;
						cc = that.controls.Picture.createPicture(controller, scc);
						cc.id = scc.id;
						cc.uiClass = "Picture";
						cc.scid = "_" + options.$bind;
						break;
					case "application/x-date": 
						opts.type = "date";
						opts.$article = $article;
						opts.label = title;
						opts.$isMandatory = cp.$isMandatory;
						scc.id = c.id + "_" + options.$bind;
						cc = that.controls.Edit.createEdit(controller, scc);
						cc.id = scc.id;
						cc.uiClass = "Edit";
						cc.scid = "_" + options.$bind;
						break;
					case "application/x-time": 
						opts.type = "time";
						opts.$article = $article;
						opts.label = title;
						opts.$isMandatory = cp.$isMandatory;
						scc.id = c.id + "_" + options.$bind;
						cc = that.controls.Edit.createEdit(controller, scc);
						cc.id = scc.id;
						cc.uiClass = "Edit";
						cc.scid = "_" + options.$bind;
						break;
					case "application/x-datetime": 
						opts.type = "datetime";
						opts.$article = $article;
						opts.label = title;
						opts.$isMandatory = cp.$isMandatory;
						scc.id = c.id + "_" + options.$bind;
						cc = that.controls.Edit.createEdit(controller, scc);
						cc.id = scc.id;
						cc.uiClass = "Edit";
						cc.scid = "_" + options.$bind;
						break;
				}
				if (cc) {
					controls.push(cc);
				}	
				if (controls.length)
					return after(controls);
				else
					return after(null);
			} else {
				var labelAfter = false, cssl ;
				html.push('<div>');
				if (!$article.$isTitleHidden) {
					cssl = ["s-m-style", "s-m-label"];
						+$helpers.htmlEncode($proto.execExpression(cp.$shortTitle || cp.$title, cp))
					if (cp.$type === "image") {
						$article.$label = $article.$label || {};
						$article.$label.$styles = $article.$label.$styles || [];
						$article.$label.$styles.push("top");
					}
						
					if ($article.$label) {
						$proto.auth.mobileExtentions(cssl, $article.$label);
						labelAfter = $article.$label.$after;
					}
					if (!labelAfter) {
						html.push('<label class="' + cssl.join(' ') + '">');
						html.push($proto.parseExpression(pp.$shortTitle || pp.$title || "", {data: null, $prototype: pp},"$title", {html:true}));
						html.push('</label>');
					}
				}
				var css =  ["s-m-style s-m-value"];
								
				$proto.auth.mobileExtentions(css, $article);
				html.push('<div class="' + css.join(' ') + '"');
				if ($article.$style)  html.push(' style="'+ $article.$style + '"');
				html.push('>');
				var valproto= controller.getProtoDataValue(options.$bind);
				if (cp.$rtype === "application/x-reference") {
					fieldData = controller.getValue(options.$bind);
					var toptions = that.controls.types.addReference(cp, fieldData, controller);
					that._addLink(html, toptions, controller);
				} else {
					var updproto = {};
					$proto.updproto(updproto, cp);
					if ($proto.isNumeric(cp.$type)) {
						if ($article.$maximum)  updproto.$maximum = $article.$maximum;
						if ($article.$minimum)   updproto.$maximum = $article.$maximum;
						$proto.updproto(updproto, valproto);
						if ((updproto.$maximum != null) && (updproto.$minimum != null)) {
							//html.push("***");
						}
						
					}
					html.push($proto.htmlValue(controller.data,entityProto, updproto,{$bind: options.$bind, $type: cp.$type}));
				}
				html.push('</div>');
				if (labelAfter) {
					html.push('<label class="' + cssl.join(' ') + '">');
					html.push($proto.parseExpression(pp.$shortTitle || pp.$title || "", {data: null, $prototype: pp},"$title", {html:true}));
					html.push('</label>');
				}
				html.push('</div>');
				return after({ 
					html: html.join(''),
					bind: options.bind,
					options: options				
				});
			}
		}		
	};
})(jQuery);    
