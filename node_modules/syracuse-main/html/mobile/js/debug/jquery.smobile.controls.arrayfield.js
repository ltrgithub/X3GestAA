(function($) {
	'use strict';
	var that = $.smobile;
	that.controls = that.controls || {};
	/* used for $query or $lookup */
	var _controls = that.controls;
	// move in  controls
	_controls.types = _controls.types || {};
	_controls.types.addReference = function($proto, data) {
		var res = {};
		if (data.$value)
			res.value = data.$value;
		else
			res.value = $.helpers.htmlEncode($.proto.parseExpression($proto.$value, {data: data, $prototype: $proto}));
		if ($proto.$links && $proto.$links.$details) {
			var url= $.proto.parseExpression($proto.$links.$details.$url, {data: data, $prototype: $proto});
			var purl = $.sdata.parseSdataUri(url);
			if (purl && purl.query && purl.query.representation && $.sdata.config.pages[purl.query.representation]) {
				res.url = url;
			}
		}
		return res;
	}
	var _table_header = function(html, fields, $prototype) {
		html.push('<table data-role="table" data-mode="reflow" class="ui-responsive table-stroke ui-table ui-table-reflow">');
		html.push('<thead><tr>');
		var prop = $prototype.$properties;
		fields.forEach(function(field, index){
			var $proto = prop[field];
			if (!index)
				html.push('<th data-priority="persist">'); 
			else
				html.push('<th data-priority="' + index +'">'); 
			html.push($.helpers.htmlEncode(prop[field].$title));
			html.push('</th>');
		});
		html.push('</tr></thead>');
		html.push('<tbody>');
	};	
	var _table_row = function(html, fields, $prototype, value, controller) {
		html.push('<tr>');
		var prop = $prototype.$properties;
		fields.forEach(function(field){
			var $proto = prop[field];
			html.push('<td>');
			if ($proto.$type === "application/x-reference") {
				//ok
				var options = _controls.types.addReference($proto, value[field]);
				that._addLink(html, options, controller);
			}  else {
				//TODO
				html.push(value[field]);
			}
			html.push('</td>');
		});
		html.push('</tr>');
	};
	var _table_end = function(html) {
	
		html.push('</tbody>');
		html.push('</table>');
	};
	var _cards = function(html, fields, $prototype, value, controller) {
		html.push('<table data-role="table" data-mode="reflow" class="ui-responsive table-stroke ui-table ui-table-reflow">');
		html.push('<thead><tr>');
		html.push('<th data-priority="1"></th>'); // title
		html.push('<th data-priority="persist"></th>'); // value
		html.push('</tr></thead>');
		html.push('<tbody>');
		var prop = $prototype.$properties;
		fields.forEach(function(field){
			var $proto = prop[field.$bind];
			html.push('<tr><td>');
			html.push($.helpers.htmlEncode($proto.$title));
			html.push('</td><td>');
			if ($proto.$type === "application/x-reference") {
				//ok
				var options = _controls.types.addReference($proto, value[field.$bind]);
				that._addLink(html, options, controller);
			}  else {
				//
				html.push(value[field.$bind]);
			}
			html.push('</td><tr>');
		});
		html.push('</tbody>');
		html.push('</table>');
	}
	_controls.ArrayField={
		handler: function(c, after) {
			var controller = this;
			var  html = [], options= c.data || {};
			var field = options.field;
			var page = controller.getPageData();
			if (!page)  return after({ html: "",options: {}});
			var edit = (options.facet === "$edit") || (options.facet === "$create");
			var cpt = field.$proto.$rtype; //see $.helpers.linkParents
			var protoProp = field.$proto.$protoparent.$properties[field.$bind];
			var fieldData = controller.getValue(field.$bind, null, cpt===("application/x-reference")?null:[]);
			if (edit) {
				var scc ={id: c.id + "_" + field.$bind, data: {inline: false, bind: field.$bind}};
				var opts = scc.data, cc, cp = field.$proto;
				switch (cpt) {
					case "application/x-reference":
						opts.type = "text";
						opts.label = cp.$title;
						scc.id = c.id + "_" + field.$bind;
						if (protoProp.$links && protoProp.$links.$lookup && protoProp.$links.$lookup.$url) {
							opts.$lookupurl = $.proto.parseExpression( protoProp.$links.$lookup.$url, {data: controller.data, $prototype: $.proto.getProto(page)});
							opts.$lookupurl = opts.$lookupurl + "&control="+encodeURIComponent(scc.id);
						}
							
						if (cp.$isMandatory) opts.$isMandatory = true;
						cc = that.controls.Lookup.createLookup(controller, scc);
						cc.id = scc.id;
						cc.uiClass = "Lookup";
						cc.scid = "_" + field.$bind;
						break;
					case "application/x-array": 
						if (field.$proto.$type === "application/x-reference") {	
							opts.title = field.$title;
							opts.jmdata = $.proto.jqmDataArray();
							scc.id = c.id + "_" + field.$bind;
							protoProp = field.$proto;
							if (protoProp.$links && protoProp.$links.$lookup && protoProp.$links.$lookup.$url) {
								opts.$lookupurl = $.proto.parseExpression( protoProp.$links.$lookup.$url, {data: controller.data, $prototype: $.proto.getProto(page)});
								opts.$lookupurl = opts.$lookupurl + "&control="+encodeURIComponent(scc.id);
							}
							cc = that.controls.ArrayRef.createArrayRef(controller, scc, fieldData);
							cc.id = scc.id;
							cc.uiClass = "ArrayRef";
							cc.scid = "_" + field.$bind;
						}
						break;
					
				}
				if (cc)
					return after([cc]);
				else
					return after(null);
				
			 } else {
				html.push('<ul id="'+c.id + '" data-role="listview"');
				$.helpers.addJqmData(options,html); 
				html.push('>');
				html.push('<li data-role="list-divider">');
				html.push($.helpers.htmlEncode(field.$title));
				html.push('</li>')
				if (cpt === "application/x-reference") {
					if (fieldData) {
						// lookup 
						var options = _controls.types.addReference(field.$proto, fieldData);
						html.push('<li>'); 
						that._addLink(html, options, controller);
						html.push('</li>');
					}
				} else if (cpt === "application/x-array") {
					if (fieldData && fieldData.length) {
						// x-array
						if (field.$proto.$type === "application/x-reference") {
							fieldData.forEach(function(value){
								var options = _controls.types.addReference(field.$proto, value);
								html.push('<li>'); 
								that._addLink(html, options, controller);
								html.push('</li>');
							});
						} else if ((field.$proto.$type === "application/x-object") || (field.$proto.$type === "application/json")) {
							if (field.cards) {
								fieldData.forEach(function(value){
									html.push('<li>'); 
									if (field.items) 
										_cards(html, field.items, field.$proto, value, controller);
									html.push('</li>'); 
								});
							} else {
								if (field.items) {
									html.push('<div>'); 
									_table_header(html, field.items, field.$proto);
									fieldData.forEach(function(value){
										_table_row(html, field.items, field.$proto, value, controller);
										
									});
									_table_end(html);
									html.push('</div>'); 
								}
								
							}
							
						} else {
							fieldData.forEach(function(value){
								html.push('<li>' + value || "" + '</li>');
							});
						}
					}
				}
				html.push('</ul>');
				return after({ 
					html: html.join(''),
					bind: options.bind,
					options: options				
				});
				
			}
			
		}		
	};
})(jQuery);    
