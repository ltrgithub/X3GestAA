(function($) {
	'use strict';
	var that = $.smobile;
	that.controls = that.controls || {};
	/* used for $query or $lookup */
	var _controls = that.controls;
	// move in  controls
	_controls.types = _controls.types || {};
	_controls.types.addReference = function($proto, data, controller) {
		var res = {};
		var cd = data;
		$proto = $proto.$item || $proto;
		if (data &&  Array.isArray(data)) {
			cd = data[data.length-1];
		}
		var isuuid = $.proto.useUuid($proto);
		if (isuuid && !cd) {
			res.value = "";
			return res;
		}
		
		if (cd && cd.hasOwnProperty("$value")) 
			res.value = cd.$value;
		else {
			if ($proto.$value) 
				res.value = $.proto.parseExpression($proto.$value, {data: controller.exprData(data), $prototype: $proto},"$value");
			else
				res.value = $.proto.parseExpression($proto.$key, {data: controller.exprData(data), $prototype: $proto},"$key");
		}
		if ($proto.$links && $proto.$links.$details) {
			var url= $.proto.parseExpression($proto.$links.$details.$url, {data: controller.exprData(data), $prototype: $proto},"$url");
			var purl = $.sdata.parseSdataUri(url);
			if (purl && purl.query && purl.query.representation && $.sdata.config.pages[purl.query.representation]) {
				res.url = url;
			}
		}
		return res;
	}
	_controls.types._table_header = function(html, fields, $prototype, edit) {
		html.push('<table data-role="table" data-mode="reflow" class="ui-responsive table-stroke"');
		html.push('>');
		html.push('<thead><tr>');
		var prop = $prototype.$properties;
		var first = true;
		fields.forEach(function(field, index){
			var $proto = prop[field];
			if ($proto.$isHidden) return; 
			if (first) {
				first = false;
				html.push('<th data-priority="persist">'); 
			} else
				html.push('<th data-priority="' + index +'">'); 
			html.push($.helpers.htmlEncode($.proto.parseExpression(prop[field].$title, {data: null, $prototype: $prototype},"$title")));
			html.push('</th>');
		});
		if (edit) {
			html.push('<th data-priority="' + fields.length +'"></th>');
			html.push('<th data-priority="' + fields.length + 1  +'"></th>');
		}
		html.push('</tr></thead>');
		html.push('<tbody>');
	};	
	_controls.types._table_row = function(html, fields, $prototype, value, controller, edit, index) {
		html.push('<tr>');
		var prop = $prototype.$properties;
		var first = true;
		fields.forEach(function(field){
			var $proto = prop[field];
			if ($proto.$isHidden) return; 
			if (first)
				html.push('<th>');
			else
				html.push('<td>');
			if ($proto.$type === "application/x-reference") {
				//ok
				var options = _controls.types.addReference($proto, [value, value[field]], controller);
				that._addLink(html, options, controller);
			}  else {
				//TODO
				html.push(value[field]);
			}
			if (first) {
				html.push('</th>');
				first = false;
			} else
				html.push('</td>');
		});
		if (edit) {
			html.push('<td>');
			html.push('<a href="#" data-role="button" data-shadow="false" data-corners="false" data-index="'+index+'" data-action="edit" data-mini="true" data-icon="edit"');
			html.push('>'+that.locale().ui.edit_item+'</a>');
			html.push('</td>');
			html.push('<td>');
			html.push('<a href="#" data-role="button" data-shadow="false" data-corners="false" " data-index="'+index+'" data-action="delete" data-mini="true"data-icon="delete"');
			html.push('>'+that.locale().ui.remove_item+'</a>');
			html.push('</td>');
		}
		html.push('</tr>');
	};
	_controls.types._table_end = function(html, edit) {
	
		html.push('</tbody>');
		html.push('</table>');
	};
	_controls.types._cards = function(html, fields, $prototype, value, controller, edit, index) {
		var id;
		html.push('<table data-role="table" data-mode="reflow" class="ui-responsive table-stroke"');
		html.push('>');
		html.push('<thead><tr>');
		html.push('<th data-priority="1"></th>'); // title
		html.push('<th data-priority="persist"></th>'); // value
		html.push('</tr></thead>');
		html.push('<tbody>');
		var prop = $prototype.$properties;
		fields.forEach(function(field){
			var $proto = prop[field.$bind];
			html.push('<tr>');
			html.push('<th>');
			html.push($.helpers.htmlEncode($.proto.parseExpression($proto.$title, {data: null, $prototype: $prototype},"$title")));
			html.push('</th><td>');
			if ($proto.$type === "application/x-reference") {
				//ok
				var options = _controls.types.addReference($proto, value[field.$bind], controller);
				that._addLink(html, options, controller);
			}  else {
				//
				field.$type = $proto.$type;	
				html.push($.proto.htmlValue(value,$prototype, $proto,field));
				//
			}
			html.push('</td>');
			html.push('</tr>');
		});
		
		if (edit) {
			html.push('<tr>');
			html.push('<td>');
			html.push('<a href="#" data-role="button" data-shadow="false" data-corners="false" data-index="'+index+'" data-action="edit" data-mini="true" data-icon="edit"');
			html.push('>'+that.locale().ui.edit_item+'</a>');
			html.push('</td>');
			html.push('<td>');
			html.push('<a href="#" data-role="button" data-shadow="false" data-corners="false" " data-index="'+index+'" data-action="delete" data-mini="true"data-icon="delete"');
			html.push('>'+that.locale().ui.remove_item+'</a>');
			html.push('</td>');
			html.push('</tr>');
			
		}
		
		html.push('</tbody>');
		html.push('</table>');
	}
	//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
	_controls.ArrayField={
		handler: function(c, after) {
			var controller = this;
			var  html = [], options= c.data || {};
			var field = options.field;
			var page = controller.getPageData();
			if (!page)  return after({ html: "",options: {}});
			var edit = (options.facet === "$edit") || (options.facet === "$create");
			var cpt = field.$proto.$rtype; //see $.helpers.linkParents
			var protoProp = field.$proto.$protoparent;
			var fieldData = controller.getValue(field.$bind, null, cpt===("application/x-reference")?null:[]);
			var cp = field.$proto.$item || field.$proto;
			if (edit) {
				var scc ={id: c.id + "_" + field.$bind, data: {inline: false, bind: field.$bind}};
				var opts = scc.data, cc;
				switch (cpt) {
					case "application/x-reference":
						opts.type = "text";
						opts.label = $.proto.parseExpression(protoProp.$title, {data: null, $prototype: cp},"$title");
						scc.id = c.id + "_" + field.$bind;
						if (cp.$links && cp.$links.$lookup && cp.$links.$lookup.$url) {
							opts.$lookupurl = $.proto.parseExpression( cp.$links.$lookup.$url, {data: controller.exprData(fieldData), $prototype: cp},"$url");
							opts.$lookupurl = opts.$lookupurl + "&control="+$.helpers.encodeURIComponent(scc.id);
						}
							
						if (cp.$isMandatory) opts.$isMandatory = true;
						cc = that.controls.Lookup.createLookup(controller, scc);
						cc.id = scc.id;
						cc.uiClass = "Lookup";
						cc.scid = "_" + field.$bind;
						break;
					case "application/x-array": 
						switch (field.$proto.$type) {
							case "application/x-reference":
								opts.title = $.proto.parseExpression(protoProp.$title, {data: null, $prototype: cp},"$title");
								opts.jmdata = $.proto.jqmDataArray();
								scc.id = c.id + "_" + field.$bind;
								
								//protoProp = field.$proto.$item || field.$proto;
								if (cp.$links && cp.$links.$lookup && cp.$links.$lookup.$url) {
									opts.$lookupurl = $.proto.parseExpression( cp.$links.$lookup.$url, {data: controller.exprData(fieldData), $prototype: cp},"$url");
									opts.$lookupurl = opts.$lookupurl + "&control="+$.helpers.encodeURIComponent(scc.id);
								}
								cc = that.controls.ArrayRef.createArrayRef(controller, scc, fieldData);
								cc.id = scc.id;
								cc.uiClass = "ArrayRef";
								cc.scid = "_" + field.$bind;
								break;
							case "application/x-object":
							case "application/json": // for old compatibility
								opts.title = $.proto.execExpression(field.$title, field.$proto.$item || field.$proto);
								opts.jmdata = $.proto.jqmDataArray();
								opts.cards = field.cards;
								opts.items = field.items;
								scc.id = c.id + "_" + field.$bind;
								cc = that.controls.ArrayObjectRef.createArrayObjectRef(controller, scc, fieldData);
								cc.id = scc.id;
								cc.uiClass = "ArrayObjectRef";
								cc.scid = "_" + field.$bind;
								break;
							case  "application/x-choice":
								var map = {};
								cp.$value.$enum.forEach(function(value) {
									map[value.$value + ""] = value.$title;
								})
								fieldData.forEach(function(value){
									html.push('<li>' + $.helpers.htmlEncode(map[value+""]) + '</li>');
								});
								break;
									
							default: 
								fieldData.forEach(function(value){
									html.push('<li>' + value || "" + '</li>');
								});
								break;								
						}						
						break;
					
				}
				if (cc)
					return after([cc]);
				else
					return after(null);
				
			 } else {
				html.push('<ul id="'+c.id + '" data-role="listview"');
				$.helpers.addJqmData(options,html); 
				html.push('>');
				var ct = "";
				switch (cpt) {
					case "application/x-reference":
						ct = $.helpers.htmlEncode($.helpers.htmlEncode($.proto.execExpression(protoProp.$title, protoProp)));
						if (ct)
							html.push('<li data-role="list-divider">'+ct+'</li>');
						// lookup 
						var options = _controls.types.addReference(field.$proto, fieldData, controller);
						html.push('<li>'); 
						that._addLink(html, options, controller);
						html.push('</li>');
						break;
					case "application/x-array":
						ct = $.helpers.htmlEncode($.helpers.htmlEncode($.proto.execExpression(field.$title, field.$proto.$item || field.$proto)));
						if (ct)
							html.push('<li data-role="list-divider">'+ct+'</li>');
						if (fieldData) {
							// x-array
							switch (field.$proto.$type) {
								case  "application/x-reference": 
									if (fieldData.length) 
										fieldData.forEach(function(value){
											var options = _controls.types.addReference(field.$proto.$item || field.$proto, value, controller);
											html.push('<li>'); 
											that._addLink(html, options, controller);
											html.push('</li>');
										});
									break;
								case  "application/x-object":
								case  "application/json":
									if (field.cards) {
										fieldData.forEach(function(value, index){
											html.push('<li>'); 
											if (field.items) 
												_controls.types._cards(html, field.items, field.$proto, value, controller,false, index);
											html.push('</li>'); 
										});
									} else {
										if (field.items) {
											html.push('<li>'); 
											html.push('<div class="ui-body">'); 
											_controls.types._table_header(html, field.items, field.$proto);
											fieldData.forEach(function(value, index){
												_controls.types._table_row(html, field.items, field.$proto, value, controller, false, index);
												
											});
											_controls.types._table_end(html);
											html.push('</div>'); 
											html.push('</li>'); 
										}
										
									}
									break;
								case  "application/x-choice":
									var map = {};
									cp.$value.$enum.forEach(function(value) {
										map[value.$value + ""] = value.$title;
									})
									fieldData.forEach(function(value){
										html.push('<li>' + $.helpers.htmlEncode(map[value+""]) + '</li>');
									});
									
									break;
									
								default: 
									fieldData.forEach(function(value){
										html.push('<li>' + value || "" + '</li>');
									});
									break;
							}
						}
						break;
				}
				html.push('</ul>');
				return after({ 
					html: html.join(''),
					bind: options.bind,
					options: options				
				});
				
			}
			
		}		
	};
})(jQuery);    
