'use strict';
(function($) {
	var that = $.smobile;
	that.controls = that.controls || {};
	/* used for $query or $lookup */
	var _controls = that.controls;
	// move in  controls
	_controls.types = _controls.types || {};
	_controls.types.addReference = function($proto, data) {
		var res = {};
		res.value = $.helpers.htmlEncode($.proto.parseExpression($proto.$value, {data: data, $prototype: $proto}));
		if ($proto.$links && $proto.$links.$details) {
			var url= $.proto.parseExpression($proto.$links.$details.$url, {data: data, $prototype: $proto});
			var purl = $.sdata.parseSdataUri(url);
			if (purl && purl.query && purl.query.representation && $.sdata.config.pages[purl.query.representation]) {
				res.url = url;
			}
		}
		return res;
	}
	var _table_header = function(html, fields, $prototype) {
		html.push('<table data-role="table" data-mode="reflow" class="ui-responsive table-stroke ui-table ui-table-reflow">');
		html.push('<thead><tr>');
		var prop = $prototype.$properties;
		fields.forEach(function(field, index){
			var $proto = prop[field];
			if (!index)
				html.push('<th data-priority="persist">'); 
			else
				html.push('<th data-priority="' + index +'">'); 
			html.push($.helpers.htmlEncode(prop[field].$title));
			html.push('</th>');
		});
		html.push('</tr></thead>');
		html.push('<tbody>');
	};	
	var _table_row = function(html, fields, $prototype, value, controller) {
		html.push('<tr>');
		var prop = $prototype.$properties;
		fields.forEach(function(field){
			var $proto = prop[field];
			html.push('<td>');
			if ($proto.$type === "application/x-reference") {
				var options = _controls.types.addReference($proto, value[field]);
				that._addLink(html, options, controller);
			}  else {
				//TODO
				html.push(value[field]);
			}
			html.push('</td>');
		});
		html.push('</tr>');
	};
	var _table_end = function(html) {
	
		html.push('</tbody>');
		html.push('</table>');
	};
	var _cards = function(html, fields, $prototype, value, controller) {
		html.push('<table data-role="table" data-mode="reflow" class="ui-responsive table-stroke ui-table ui-table-reflow">');
		html.push('<thead><tr>');
		html.push('<th data-priority="1"></th>'); // title
		html.push('<th data-priority="persist"></th>'); // value
		html.push('</tr></thead>');
		html.push('<tbody>');
		var prop = $prototype.$properties;
		fields.forEach(function(field){
			var $proto = prop[field.$bind];
			html.push('<tr><td>');
			html.push($.helpers.htmlEncode($proto.$title));
			html.push('</td><td>');
			if ($proto.$type === "application/x-reference") {
				var options = _controls.types.addReference($proto, value[field.$bind]);
				that._addLink(html, options, controller);
			}  else {
				//
				html.push(value[field.$bind]);
			}
			html.push('</td><tr>');
		});
		html.push('</tbody>');
		html.push('</table>');
	}
	_controls.ArrayField={
		handler: function(c, after) {
			var controller = this;
			var  html = [], options= c.data || {};
			var field = options.field;
			var page = controller.getPageData();
			if (!page)  return after({ html: "",options: {}});
			html.push('<ul id="'+c.id + '" data-role="listview"');
			$.helpers.addJqmData(options,html); 
			html.push('>');
			html.push('<li data-role="list-divider">');
			html.push($.helpers.htmlEncode(field.$title));
			html.push('</li>')
			var cpt = field.$proto.$protoparent.$properties[field.$bind].$type;
			var fieldData = controller.getValue(field.$bind, null, cpt===("application/x-reference")?null:[]);
			if (cpt === "application/x-reference") {
				if (fieldData) {
					var options = _controls.types.addReference(field.$proto, fieldData);
					html.push('<li>'); 
					that._addLink(html, options, controller);
					html.push('</li>');
				}
			} else if (cpt === "application/x-array") {
				if (fieldData && fieldData.length) {
					debugger;
					// x-array
					if (field.$proto.$type === "application/x-reference") {
						fieldData.forEach(function(value){
							var options = _controls.types.addReference(field.$proto, value);
							html.push('<li>'); 
							that._addLink(html, options, controller);
							html.push('</li>');
						});
					} else if ((field.$proto.$type === "application/x-object") || (field.$proto.$type === "application/json")) {
						if (field.cards) {
							fieldData.forEach(function(value){
								html.push('<li>'); 
								if (field.items) 
									_cards(html, field.items, field.$proto, value, controller);
								html.push('</li>'); 
							});
						} else {
							if (field.items) {
								html.push('<div>'); 
								_table_header(html, field.items, field.$proto);
								fieldData.forEach(function(value){
									_table_row(html, field.items, field.$proto, value, controller);
									
								});
								_table_end(html);
								html.push('</div>'); 
							}
							
						}
						
					} else {
						fieldData.forEach(function(value){
							html.push('<li>' + value || "" + '</li>');
						});
					}
				}
			}
			html.push('</ul>')
			return after({ 
				html: html.join(''),
				bind: options.bind,
				options: options				
			});
			
		}		
	};
})(jQuery);    
