(function($) {
	var $helpers = $.helpers;
	var $sdata = $.sdata;
	var that = $.smobile || {};
	that.staticui = that.staticui || {};
	var ui = that.staticui;
	var capabilities = $sdata.capabilities;
	function updLocale(value, next) {
		// number thousandSep && numberDecimalSeparator
		if (value.numberGroupSeparator != null)
			$helpers.number.thousandSep = value.numberGroupSeparator;
		if (value.numberDecimalSeparator != null)
			$helpers.number.decimalSep = value.numberDecimalSeparator;
		//
		return next();
	};
	function activateLocale(sl, next) {
		var currentlang = $helpers.extractLang(sl);
		if (!currentlang) {
			var cl = $helpers.extractLang($helpers.browserLanguage());
			// download and activate language
			return $sdata.downloadLocale(cl, function(bl){
				if (bl) {
					// seave last used language
					$helpers.setLanguage(bl+"-"+ bl.toUpperCase());
				}
				return next();
			});
		}
		var activelang = $helpers.currentLocale();
		if (currentlang != activelang) {
			return $sdata.downloadLocale(currentlang, function(bl){
				if (bl) {
					// seave last used language
					$helpers.setLanguage(sl);
				}
				return next();
			});
		}
		 $helpers.setLanguage(sl);
		return next();
	};
	capabilities.installUrl = "/sdata/syracuse/collaboration/syracuse/dashboardDefs/$service/mobilePortlets";
	capabilities.authUrl = "/sdata/syracuse/collaboration/syracuse/userProfiles/$service/current";
	capabilities.loadLocale=true;
	capabilities.localeLoader = function(next) {
		// get saved language 
		if ($helpers.online() && (!capabilities.authRequired || !capabilities.auth)) {
			return $sdata.GET($sdata.sdataHost +  _auth.authurl, function(data, headers){
				if (data) { 
					var localeConfig = data.selectedLocale;
					return updLocale(localeConfig, function() {
						return activateLocale(localeConfig.code, next);
					});
					
				}
				activateLocale($helpers.language(), next);
			});
		
		} 
		//use last used language or browser language
		activateLocale($helpers.language(), next);
	};
	ui.settings = function() {	
		var locale = $helpers.locale();
		return {
			"$title": locale.administration.title,
			"content": { 
				"cp": {"layout":"BlockBodyLayout", "data" : {}},
				"e0": {"uiClass":"Edit", "data" : { "label": locale.ui.sdatahost, "bind": "host" }, "parent": "cp" },
				"e1": {"uiClass":"Edit", "data" : { "label": locale.ui.user, "bind": "user" }, "parent": "cp" },
				"pass": {"uiClass":"Edit", "data" : { "type":"password", "label": locale.ui.password, "bind": "password" }, "parent": "cp" },
				"ok": {"uiClass":"Button", "data" : {  "value": locale.ui.save_item, "action":"savesettings", "jmdata": {"data-icon": "check","data-iconpos": "left"}}, "parent": "cp" },
				"errors" : {"uiClass":"ErrorView", "parent": "cp"}
			},
			actions: {
				savesettings: function(after) {
					var cd = this.data;
					var settings = $helpers.settings();
					var settings = $helpers.settings();
					settings.sdata =  settings.sdata || {};
					settings.sdata.sdataHost = cd.host;
					$sdata.sdataHost = that.sdataHost;
					settings.connect =  settings.connect || {};
					settings.connect.user = cd.user;
					settings.connect.password = cd.password;
					$helpers.settings("", settings);
					$.smobile.goHome(this);
					after(false);
				}
			
			}
		};
	};
	ui.settings_data = function() {
		var cd = {};
		var settings = $helpers.settings();
		settings.sdata =  settings.sdata || {};
		cd.host = settings.sdata.sdataHost || "";
		settings.connect =  settings.connect || {};
		cd.user = settings.connect.user || "";
		cd.password = settings.connect.password || "";
		return cd;
	};
	var _auth = {
		lastCheck: null,
		checkInterval: 0,
		authurl: capabilities.authUrl,
		detect: function(auth) {
			var res = "unknown";
			auth = auth || "";
			if (auth) auth = auth.toUpperCase();
			if (auth.indexOf("BASIC")===0)
				res = "basic";
			else if (auth.indexOf("DIGEST")===0 )
				res = "digest";
			return res;
		},
		connect: function(next) {
			var settings = $helpers.settings();	
			settings.connect =  settings.connect || {};
			$helpers.clearErrors();
			if (_auth.lastCheck && ((new Date() - _auth.lastCheck) < _auth.checkInterval)) 
				return 
			$sdata.GET($sdata.sdataHost +  _auth.authurl, function(data, headers){
				if (headers && (headers.status === 401)) {
					var sauth = _auth.detect(headers["WWW-Authenticate"]);
					if (sauth === "basic") {
						settings.connect =  settings.connect || {};
						var user = settings.connect.user || "";
						var password = settings.connect.password || "";
						var aheaders = {Authorization: 'Basic '+ window.btoa(user+":"+password)};
						$helpers.clearErrors();
						return $sdata.GET($sdata.sdataHost +  _auth.authurl, function(data, headers){
							_auth.lastCheck = ($helpers.hasErrors()?null:new Date());
							if (data) { 
								var localeConfig = data.selectedLocale;
								updLocale(localeConfig, function() {
									return activateLocale(localeConfig.code, function() {
										return next(data, $helpers.hasErrors());
									});
								});
							}
							activateLocale($helpers.language(), function(){
								return next(data, $helpers.hasErrors());
							});
						}, aheaders, {Authenticate: true});
					} else {
						_auth.lastCheck = null;
						return next(null, true);
					}
				}
				_auth.lastCheck = ($helpers.hasErrors()?null:new Date());
				return next(null, $helpers.hasErrors());
			}, {}, {Authenticate: true});
		}
	};
	$sdata.capabilities.auth = function(next) {
		return _auth.connect(next);
	}
})(jQuery);    

