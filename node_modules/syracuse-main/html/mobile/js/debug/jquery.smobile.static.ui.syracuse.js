(function($) {
	var that = $.smobile || {};
	that.staticui = that.staticui || {};
	var ui = that.staticui;
	$.sdata.capabilities.showSettings = true;
	$.sdata.capabilities.authRequired = true;
	
	$.sdata.capabilities.installUrl = "/sdata/syracuse/collaboration/syracuse/dashboardDefs/$service/mobilePortlets";
	
	ui.settings = function() {	
		var locale = $.smobile.locale();
		return {
			"$title": locale.administration.title,
			"content": { 
				"cp": {"layout":"BlockBodyLayout", "data" : {}},
				"e0": {"uiClass":"Edit", "data" : { "label": locale.ui.sdatahost, "bind": "host" }, "parent": "cp" },
				"e1": {"uiClass":"Edit", "data" : { "label": locale.ui.user, "bind": "user" }, "parent": "cp" },
				"pass": {"uiClass":"Edit", "data" : { "type":"password", "label": locale.ui.password, "bind": "password" }, "parent": "cp" },
				"ok": {"uiClass":"Button", "data" : {  "value": locale.ui.save_item, "action":"savesettings", "jmdata": {"data-icon": "check","data-iconpos": "left"}}, "parent": "cp" },
				"errors" : {"uiClass":"ErrorView", "parent": "cp"}
			},
			actions: {
				savesettings: function(after) {
					var cd = this.data;
					var settings = $.helpers.settings();
					settings.sdata =  settings.sdata || {};
					settings.sdata.sdataHost = cd.host;
					$.sdata.sdataHost = that.sdataHost;
					settings.connect =  settings.connect || {};
					settings.connect.user = cd.user;
					settings.connect.password = cd.password;
					$.helpers.settings(settings);
					$.smobile.goHome(this);
					after(false);
				}
			
			}
		};
	};
	ui.settings_data = function() {
		var cd = {};
		var settings = $.helpers.settings();
		settings.sdata =  settings.sdata || {};
		cd.host = settings.sdata.sdataHost || "http://host:port";
		settings.connect =  settings.connect || {};
		cd.user = settings.connect.user || "";
		cd.password = settings.connect.password || "";
		return cd;
	};
	var _auth = {
		authurl: "/sdata/syracuse/collaboration/syracuse/dashboardDefs/$service/mobilePortlets",
		detect: function(auth) {
			var res = "unknown";
			auth = auth || "";
			if (auth) auth = auth.toUpperCase();
			if (auth.indexOf("BASIC")===0)
				res = "basic";
			else if (auth.indexOf("DIGEST")===0 )
				res = "digest";
			return res;
		},
		connect: function(next) {
			var settings = $.helpers.settings();	
			settings.connect =  settings.connect || {};
			$.helpers.clearErrors();
			$.sdata.GET($.sdata.sdataHost +  _auth.authurl, function(data, headers){
				if (headers && (headers.status === 401)) {
					var sauth = _auth.detect(headers["WWW-Authenticate"]);
					if (sauth === "basic") {
						settings.connect =  settings.connect || {};
						var user = settings.connect.user || "";
						var password = settings.connect.password || "";
						var aheaders = {Authorization: 'Basic '+ window.btoa(user+":"+password)};
						$.helpers.clearErrors();
						return $.sdata.GET($.sdata.sdataHost +  _auth.authurl, function(data, headers){
							return next(null, $.helpers.hasErrors());
						}, aheaders, {Authenticate: true});
					} else 
						return next(null, true);
				}
				return next(null, $.helpers.hasErrors());
			}, {}, {Authenticate: true});
		}
	};
	$.sdata.capabilities.auth = function(next) {
		return _auth.connect(next);
	}
})(jQuery);    


/*

				if (options.returnErrors) {
					var cheaders =  {
						status: jqXHR?jqXHR.status:200, 
						"WWW-Authenticate": jqXHR?jqXHR.getResponseHeader("WWW-Authenticate"):""
					};
					return next(null, cheaders);
				}
				
	var _auth = {
		_detect: function(auth) {
			var res = "unknown";
			auth = auth || "";
			if (auth) auth = auth.toUpperCase();
			if (auth.indexOf("BASIC")===0)
				res = "basic";
			else if (auth.indexOf("DIGEST")===0 )
				res = "digest";
			return res;
		}, 
		continue_auth: function(method, url, data, next, headers, options) {
			if (method === "GET")
				that.GET(url, next, headers, options);
			else
				that.post(url, data, next, headers, options);
		},
		dologin: function(after, fopen) {
			var settings = null;
			var ssettings = window.localStorage["mobile-settings"];
			if (ssettings) settings = JSON.parse(ssettings);
			var  connectData = settings?settings.connect:{keep:true, user: "", password:""};
			if (connectData.user && !fopen) 
				return after(connectData);
			var uiData =  $.smobile.staticui.login();
			uiData.actions = {
				connect: function(doafter){
					var self = this;
					var cd = {user: self.data.user, password: self.data.password, keep: self.data.keep};
					settings = settings ||  {};
					settings.connect =  cd.keep?cd:null;
					window.localStorage["mobile-settings"] = JSON.stringify(settings);
					doafter(false);
					self.pageActions.close = null;
					self.$page.dialog('close');
					cd.dialog = true;
					after(cd);
				},
				close: function(doafter){
					after(null);
				}
			};
			return $.smobile.createDialog(uiData, connectData);
		}
		
	};
	
	that.auth_detect = function(after) {
		if ($.helpers.online()) {
			var url = "";
			if (that.sdataAuthDetect)  url = that.sdataHost + that.sdataAuthDetect;
			if (!url) return after(null, false, false)
			that.GET(url, function(cd, headers) {
				if (headers && headers.status === 401) {
					var auth = headers["WWW-Authenticate"];
					if (auth && auth.toUpperCase().indexOf("Basic")) {
						$.helpers.alert("basic");
			}
					
					
				}
				after(null, false, false)
			}, {}, {returnErrors:true, ignoreAuth: true})
		} else
			return after(null, false, true)
	};
	that.doLogin = function(auth, method, url, data, next, headers, options) {
		if ((auth === "basic") || true) {
			var hAuthorization = (headers?headers.Authorization:"") || "";
			_auth.dologin(function(connectData){
				if (!connectData || !connectData.user) {
					return _auth.continue_auth(method, url, data, next, headers, options);
				}
				var hh = $.extend(true, {}, headers || {});
				hh.Authorization = 'Basic '+ window.btoa(connectData.user+":"+connectData.password);
				if (!connectData.dialog) {
					if (options) options.ignoreAuth = false; //force reauth
				} else {
					if (options) options.ignoreAuth = true; //force reauth
				}				
				return _auth.continue_auth(method, url, data, next, hh, options);
			}, (hAuthorization != ""));
		} else 
			_auth.continue_auth(method, url, data, next, headers, options);
	};
				
				
*/
