(function($) {
	'use strict';
	var that = $.proto || {};
	$.proto = that;
	//$.proto.forceSync = true;
	
	var _exp = function(data) {	
		this.stack = [];
		if (data) this.stack.push(data);
	};
	_exp.prototype = {
		push: function(data) {
			this.stack.unshift(data);
		},
		data: function() {
			if (this.stack.length) return this.stack[this.stack.length-1];
			return null;
		},
		parent: function(data) {
			var ii = this.stack.indexOf(data);
			if (ii>0)  return this.stack[ii-1];
			return null;
		}
		
	};
	
	var _basicTypes = ["application/x-string", "application/x-password", "application/x-integer", "application/x-real", 
		"application/x-decimal", "application/x-boolean", "application/x-date", "application/x-time", 
		"application/x-datetime", "application/x-choice",
		"image"];
	that.trace = {
		expressions: false
	}
	that.isExpression = function(strValue) {
		return (strValue.indexOf("{") >= 0);
	};
	that.sdataKey = {
		"workingCopies": "$workingCopies"
	};
	that.exprData = function(data) { 
		return new _exp(data);
	}
	that.htmlValue = function(data,proto,cp,field) {
		var value = data[field.$bind];
		var exprData = $.proto.exprData(data);
		exprData = $.proto.exprData(data);
		if (cp.$isHidden) return "";
		if (value === null) value ="";
		switch (field.$type) {
			case "application/x-password": 
			case "application/x-string": 	
				if (cp.$format && value) {
					if (cp.$format ==="$email") {
						return '<a href="mailto:'+value+'">' + value + '</a>';
					} else if (cp.$format==="$phone") {
						return '<a href="tel://'+value+'">' + value + '</a>';
					}
				}
				return $.helpers.htmlEncode(value);
			case "application/x-integer": 
				return $.helpers.htmlEncode(value + "");
			case "application/x-real": 
				return $.helpers.htmlEncode(value + "");
			case "application/x-decimal": 
				// todo
				return $.helpers.htmlEncode(value + "");
			case "application/x-date": 
				// todo
				if (value) value = $.scroller.formatDate($.helpers.dateSettings.dateFormat, new Date(value));
				return $.helpers.htmlEncode(value + "");
			case "application/x-datetime": 
				// todo
				return $.helpers.htmlEncode(value + "");
			case "application/x-time": 
				// todo
				return $.helpers.htmlEncode(value + "");
			case "application/x-boolean": 
				return '<span class="ui-checkbox"><center class="ui-icon ui-icon-checkbox-' + (value?"on":"off") + '"> </center></span>';
			case "application/x-choice": 
				var enums = cp.$value.$enum;
				for (var i = 0, len = enums.length; i<len; i++) 
					if (enums[i].$value === value)
						return $.helpers.htmlEncode(enums[i].$title);
				break;
			case "image":
				if (value) {
					if (value.$value) {
						return '<image class="s-image-detail" src="'+"data:"+(value.$contentType || "image/jpeg")+";base64,"+value.$value+'"/>';
					} else  {
						var url = value.$url;
						if (!url && cp.$url) {
							url = that.parseExpression(cp.$url, {data: exprData, $prototype: cp},"$url");
						}
						if (url) {
							var curl = url;
							if (that.isExpression(url)) {
								curl = that.parseExpression(url, {data: exprData, $prototype: proto},"$url"); 
							}
							return '<image class="s-image-detail" src="'+curl+'"/>';
						} else 	if (value.$value) {
							return '<image class="s-image-detail" src="'+"data:"+(value.$contentType || "image/jpeg")+";base64,"+value.$value+'"/>';

						}
					}
					
				}
				break;
			default:
				debugger;
				
		}
		return null;
	};
	
	
	that.settings = {
		"CollapsibleLayout": {
			jmdata: function(root) { return {"data-mini":"false", "data-theme":"c", "data-content-theme":"d", "data-inset": "true" }}
		},
		"CollapsibleSetsLayout": {
			jmdata: function() { return {"data-mini":"false", "data-theme":"a", "data-content-theme":"a", "data-inset":"true"}}
		}
	};
	
	that.getArticle = function(data, bind) {
		var article = data.$article;
		if (article) return article;
		article =  data.$prototype; 
		return article.$article;
	};
	that.extractFirstProp = function(exp) {
		var res = exp;
		var i = res.indexOf("}");
		if (i >= 0) res = res.substring(0,i);
		i = res.indexOf("{");
		if (i >= 0) res = res.substring(i+1);
		return res;
	};
	that.getProto = function(data, bind) {
		if (!bind) return data.$prototype || data.$; 
		var proto = data.$prototype;
		if (proto && proto.$properties)
			proto = proto.$properties;
		else
			proto = data.$properties;
		if (proto) {
			proto =  proto[bind]; 
			if (proto) {
				switch (proto.$type)  {
					case "application/x-array": 
						proto = proto.$item;
						if (proto.$item) proto = proto.$item; //for x-reference and x-object
						
						break
					case "application/x-reference": 
						if (proto.$item) proto = proto.$item;
						break
					case "application/x-object": 
						if (proto.$item) proto = proto.$item;
						break
				}
			}
			return proto;
		} else 
			return null;
	};
	that.linkParents = function(data, parent, path) {
		if (!data) return;
		var cd = data;
		var list = [];
		if (!cd.$protoparent) cd.$protoparent = parent;
		if (!cd.$rprotoparent) cd.$rprotoparent = parent;
		if (cd.$properties) {
			Object.keys(cd.$properties).forEach(function(property) {
				var pv = cd.$properties[property];
				switch (pv.$type) {
					case "application/x-array": 
						pv.$protoparent = cd;
						pv.$rprotoparent = cd;
						pv.$item.$rtype = "application/x-array";
						pv.$item.$protoparent= pv;
						pv.$item.$rprotoparent = cd;
						var item = pv.$item;
						if (item && item.$item) {
							item = item.$item;
							item.$rprotoparent = cd;
							item.$protoparent = pv.$item;
							item.$rtype = "application/x-array";
						} 
						list.push(item);
						break;
					case "application/x-reference": 
						pv.$protoparent = cd;
						pv.$rprotoparent = cd;
						pv.$item.$protoparent= pv;
						pv.$item.$rprotoparent = cd;
						pv.$item.$rtype="application/x-reference"; 
						list.push(pv.$item); 
						break;
					case "application/x-object": 
						if (!pv.$item) return;
						pv.$protoparent = cd;
						pv.$rprotoparent = cd;
						pv.$item.$protoparent= pv;
						pv.$item.$rprotoparent = cd;
						list.push(pv.$item); 
						pv.$item.$rtype = "application/x-object";
						break;
					default: {
						pv.$protoparent = cd;
						pv.$rprotoparent = cd;
						
					}
				}
			});			
		}
		list.forEach(function(nd){
			that.linkParents(nd, cd);
		});
	};
	that.layoutParser = function(map, data, propname, protos, fields) {
		var cmap = map, doreturn = false;
		if (data.$isHidden) return;
		var prototypes = protos.slice();
		var cp = prototypes[prototypes.length-1];
		if (data.$category && data.$title) {
			var tt = data.$title;
			if ((data.$category === "section") && data.$layout && data.$layout.$items && 
				(data.$layout.$items.length === 1) && (data.$layout.$items[0].$category === "block")) {
				data = {$layout: data.$layout.$items[0].$layout};
			}
			//add section 
			cmap.fields = cmap.fields || [];
			var obj = {$isSection: true, fields: []};
			obj.title = that.parseExpression(tt, {data:null, $prototype: cp},"$title"); 
			cmap.fields.push(obj);
			cmap = obj;
		}
		if (data.$bind) {
			cp = (cp && cp.$properties)?cp.$properties[data.$bind]:null;
			if (!cp || !cp.$type) return;
			if  (cp.$isHidden) return;
			if (cp.$type === "application/x-array") {
				if (data.$bind=="$resources") {
					prototypes.push(cp.$item);
				} else {
					if (!cp.$item) return;
					cmap.fields =  cmap.fields || [];
					var proto = {$type: cp.$type, $bind: data.$bind, $title: cp.$title, $proto: cp.$item};
					cmap.fields.push(proto);
					switch (cp.$item.$type) {
						case"application/x-reference": 
							break;
						case "application/json": 
						case "application/x-object":
							var spmap = {}, cf = [];
							prototypes.push(cp.$item);
							var layoutData = data.$layout || data.$cards, cards=false;  
							// find list of items to show
							if (layoutData) { 
								that.layoutParser(spmap, layoutData, '', prototypes, cf);
								doreturn = true;
							}
							if (!cf.length) {
								Object.keys(cp.$item.$properties).forEach(function(cpn){
									if (cpn.charAt(0) === "$") return;
									var cpv = cp.$item.$properties[cpn];
									if (cp.$isHidden) return;
									cf.push(cpn);
								});
							} else if (data.$cards) {
								cards=true;
							}
							proto.items = cf;
							proto.cards = cards;
							if (!cp.$item) return;
							break;
						default: 
							if (_basicTypes.indexOf(cp.$item.$type) < 0) 
								return;
							else {
								// basic type
							}
							return;
							break;
					}
				}
			} else if (cp.$type === "application/x-object") {
				if (!cp.$item) return;
				//TODO
				return;
			} else if (cp.$type === "application/x-reference") { 
				if (!cp.$item)  return;
				cp = cp.$item;
				cmap.fields =  cmap.fields || [];
				var proto = {$type: "application/x-reference", $bind: data.$bind, $title: cp.$title, $proto: cp };
				cmap.fields.push(proto);
				return;
			} else if (_basicTypes.indexOf(cp.$type) < 0) {
				//stop ?
				return; 
			} else {
				if (fields) fields.push(data);
				cmap.fields =  cmap.fields || [];
				var proto = {$type: cp.$type, $bind: data.$bind};
				cmap.fields.push(proto);
				return;
			}
		}
		if (doreturn) return; 
		Object.keys(data).forEach(function(pn) {
			var value = data[pn];
			if (!value) return;
			if (Array.isArray(value)) {
				value.forEach(function(item) {
					if (typeof item == "object") {
						that.layoutParser(cmap, item, pn, prototypes, fields);
					}
				});
				
			} else if (typeof value == "object") {
				that.layoutParser(cmap, value, pn, prototypes, fields);
				
			}
		});
	};
	
	
	that.useUuid=function(proto) {
		return (proto.$key === "{$uuid}");
	};
	//ok
	that.getRefFromValue=function(value, cp) {
		if (!value) return null;
		var cv = {};
		if (that.useUuid(cp)) {
			cv.$uuid = value.$uuid;
			cv.$key = value.$key || value.$uuid;
		}
		// additional propertiers (no expressions)
		Object.keys(cp.$properties).forEach(function(key){
			cv[key]=value[key];
		});
		return cv;
	};
	that.setArrayRef=function(cv, cp, data, bind) {
		var isuuid = $.proto.useUuid(cp);
		if (isuuid) return cv;
		var nd = {};
		Object.keys(cp.$properties).forEach(function(propName) {
			var  pi = cp.$properties;
			if (pi.isReadOnly) {
				if (cv) delete cv[propName];
				// don't  propagate value to parent
				return;
			}
			
			// propagate value to parent
			var value = (cv?cv[propName]:"") || "";
			var exp = cp[propName];
			if (!exp) exp = "{"+ propName + "}"; // default expression
			if (!exp || (exp.charAt(0) != "{") || (exp.charAt(exp.length-1)!= "}") ) {
				// don't  propagate value to parent
				return 
			}
			if (cv) delete cv[propName];
			var realPropName = exp.substring(1,exp.length-1);
			nd[realPropName] = value;
			
		});
		return nd;
	};
	that.proto2Instance=function(cp) {
		var res = {}, d;
		//$template for references
		Object.keys(cp.$properties).forEach(function(propName) {
			var  pi = cp.$properties[propName];
			if (propName.charAt(0) === "$") return;
			switch (pi.$type) {
				case "application/x-password": 
				case "application/x-string": 
					res[propName] = "";
					break;
				case "application/x-decimal": 
				case "application/x-real": 
					res[propName] = 0.0;
					break;
				case "application/x-integer": 
					res[propName] = 0;
					break;
				case "application/x-boolean": 
					res[propName] = false;
					break;
				case "application/x-date":
					d = new Date();
					res[propName] = $.helpers.date.checkString(d.toISOString());
					break;
				case "application/x-datetime": 
					d = new Date();
					res[propName] = d.toISOString();
					break;
				case "application/x-time": 
					d = $.helpers.Time.parse("00:00");
					res[propName] = d.toISO();
					break;
				case "application/x-choice": 
					res[propName] = pi.$value.$enum[0].$value;
					break;
			}
		});
		return res;
	};
	that.setRef=function(cv, cp, data, bind) {
		var isuuid = $.proto.useUuid(cp);	
		var topdata = data.data();
		if (isuuid) {
			// reference by uuid
			topdata[bind] = cv;
			return;
		}
		// reference by code(s)
		Object.keys(cp.$properties).forEach(function(propName) {
			var  pi = cp.$properties;
			if (pi.isReadOnly) {
				if (cv) delete cv[propName];
				// don't  propagate value to parent
				return;
			}
			
			// propagate value to parent
			var value = (cv?cv[propName]:"") || "";
			var exp = cp[propName];
			if (!exp) exp = "{"+ propName + "}"; // default expression
			if (!exp || (exp.charAt(0) != "{") || (exp.charAt(exp.length-1)!= "}") ) {
				// don't  propagate value to parent
				return 
			}
			if (cv) delete cv[propName];
			var realPropName = exp.substring(1,exp.length-1);
			if (cp.$rprotoparent.$properties[realPropName]) {
				topdata[realPropName] = value;
			}
		});
		if (!cv) {
			delete topdata[bind]
		} else {
			if (Object.keys(cv).length)
				topdata[bind] = cv;
		}
	};
	//for 
	that._protoProp = function(proto, prop) {	
		if (prop === "$baseUrl")  return {value:$.sdata.config.baseUrl, found: true, stop:true}; 
		var p = proto;
		if (prop.charAt(0) == "@") {
			while (p) {
				if (p && p.$localization && p.$localization.hasOwnProperty(prop)) return {value:p.$localization[prop], found: true, stop:true};
				p = p.$rprotoparent;
			}
		} else {
			while (p) {
				if (p.hasOwnProperty(prop)) return {value:p[prop], found: true}
				p = p.$protoparent;
			}
		}
		return {found: false};
	};
	that._dataProp = function(data, prop) {
		if (prop === "$baseUrl")  return {value:$.sdata.config.baseUrl, found: true, stop:true}; 
		var cd = data.data();
		while (cd) {
			if (cd.hasOwnProperty(prop))
				return {value: cd[prop],  found: true}
			cd = data.parent(cd);
		}	
		return {value: "", found: false};
		
	};
	that.execExpression = function(expression, proto, data, level) {
		level = level || 0;
		expression = (expression || "")+"";
		if (!level) {
			if (expression.indexOf("{") < 0) {
				if (data) {
					var value = that._dataProp(data, expression);
					if (value.found) return value.value;
				}
			}
		}
		var res =  expression.replace(/\{(.*?)\}/g, function(match, prop) {
			var dvalue, pvalue;
			if (!level  && proto && !proto.noRef && proto.$protoparent && (proto.$protoparent.$type === "application/x-reference")) {
				pvalue = that._protoProp(proto,prop);
				if (!pvalue.found) {
					dvalue = data?that._dataProp(data, prop):{found:false};
					if (!dvalue.found)  {
						if (that.trace.expressions) {
							console.log(expression);
							console.log("Not found:" + prop);
							console.log("----------------------------------");
						};
					}
					
					return dvalue.value || "";
				} else {
					if (pvalue.stop) return pvalue.value || "";
					if (pvalue.value.indexOf("{") >= 0) {
						var cp = proto;
						if (pvalue.value.indexOf("{"+prop+"}") >= 0) {	
							cp = proto.$protoparent;
						}
						return that.execExpression(pvalue.value, cp, data, level+1);
					} else {
						dvalue = data?that._dataProp(data, prop):{found:false};
						if (!dvalue.found)  {
							if (that.trace.expressions) {
								console.log(expression);
								console.log("Not found:" + prop);
								console.log("----------------------------------");
							}
						}
						return dvalue.value || "";
					}
				}
			} else {
				dvalue = data?that._dataProp(data, prop):{found:false};
				if (dvalue.found) return dvalue.value || "";
				pvalue = (proto?that._protoProp(proto,prop):{found:false});
				if (!pvalue.found) {
					if (that.trace.expressions) {
						console.log(expression);
						console.log("Not found:" + prop);
						console.log("----------------------------------");
					}
					return ""; //return "{"+ prop+ "}";
				}
				if (pvalue.stop) return pvalue.value;
				if (pvalue.value.indexOf("{") >= 0) 
					return that.execExpression(pvalue.value, proto, data, level+1);
				return pvalue.value || "";
			}
		});
		return res || "";
	};
	that.parseExpression = function(expression, data, propName) {
		return that.execExpression(expression, data.$prototype, data.data);
	};
	var _canGroup = function(element) {
		return (_basicTypes.indexOf(element.$type) >= 0) || (element.$type === "application/x-reference");
	};
	that.jqmDataArray = function() { return {"data-inset": "true", "data-mini": "true", "data-theme":"d", "data-divider-theme":"e"}; };
	that.generateForm = function(map, cid, content, parentId, root, facet) {
		var hasOnlySections = true;
		var cp = parentId, sections = [];
		var groupControl = null;
		if (root) {
			cp = "c" + cid;
			cid++;
			content[cp] = {layout:"BlockBodyLayout", data: {}, parent: parentId};
			root = false;
		}
		if (map.fields) {
			map.fields.forEach(function(field) {
				if (field.$isSection) {
					groupControl = null;
					var o= null;
					if (field.title) 
						o = {layout:"CollapsibleLayout", data:{facet: facet, jmdata: that.settings.CollapsibleLayout.jmdata(root), text: field.title, collapsed: false, size: 6}};
					if (o) {
						if (cp) o.parent = cp;
						var np = "c"+cid;
						cid++;
						content[np] = o;
						if (field.fields && field.fields.length) 
							cid = that.generateForm(field, cid, content, np, false, facet);
						sections.push(o);
					}
				} else {
					hasOnlySections = false;
					var e = null;
					var canGroup = _canGroup(field);
					if (canGroup) {
						if (!groupControl) {
							e = {uiClass:"MultiField", data:{facet: facet, fields:[]}};
							if (cp) e.parent = cp;
							var eid = "e" + cid;
							cid++;
							content[eid] = e;
							groupControl = e;
						}
						groupControl.data.fields.push(field);
						
					} else  {
						groupControl = null;
						e = {uiClass:"ArrayField", data:{facet: facet, field: field}};
						e.data.jmdata = that.jqmDataArray();
						if (cp) e.parent = cp;
						var eid = "e" + cid;
						cid++;
						content[eid] = e;
					}
				}
			});
		}	
		if (hasOnlySections) {
			if (root) {
				content[cp].layout = "CollapsibleSetsLayout";
				content[cp].data.jmdata = that.settings.CollapsibleSetsLayout.jmdata();
				sections.forEach(function(section, index){
					section.data.collapsed = (index != 0);
				});
			} 
		}
		return cid;
	};
})(jQuery);


(function($) {
	'use strict';
	var that = $.helpers || {};
	var _compat = function() {
		if (!Array.isArray) 
			Array.isArray = function (arg) {  
				return ((arg != null) && (arg.splice != null));  
			};  
		if (!Function.prototype.bind) {  
		  Function.prototype.bind = function (oThis) {  
			if (typeof this !== "function") {  
			  // closest thing possible to the ECMAScript 5 internal IsCallable function  
			  throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");  
			}  
		  
			var aArgs = Array.prototype.slice.call(arguments, 1),   
				fToBind = this,   
				fNOP = function () {},  
				fBound = function () {  
				  return fToBind.apply(this instanceof fNOP  
										 ? this  
										 : oThis || window,  
									   aArgs.concat(Array.prototype.slice.call(arguments)));  
				};  
		  
			fNOP.prototype = this.prototype;  
			fBound.prototype = new fNOP();  
		  
			return fBound;  
		  };  
		} 	
		if(!Object.keys) Object.keys = function(o){  
			if (o !== Object(o))  
				throw new TypeError('Object.keys called on non-object');  
			var ret=[],p;  
			for(p in o) if(Object.prototype.hasOwnProperty.call(o,p)) ret.push(p);  
			return ret;  
		}	
		var supportISO = false;
		try {
			var d = new Date("2011-11-08T23:00:00.000Z");
			if (isNaN(d)) supportISO = false;
		} catch(e) {
			supportISO = false;
		}
		
		if (supportISO) {
			Date.parseISO8601 = function(s) {return new Date(s);};
		} else {
			Date.parseISO8601 = function (s){
				var m = /^(\d{4})(-(\d{2})(-(\d{2})(T(\d{2}):(\d{2})(:(\d{2})(\.(\d+))?)?(Z|((\+|-)(\d{2}):(\d{2}))))?)?)?$/.exec(s);
				if(m === null)
					throw new Error("Invalid ISO String");
				var d = new Date;
				d.setUTCFullYear(+m[1]);
				d.setUTCMonth(m[3] ? (m[3] >> 0) - 1 : 0);
				d.setUTCDate(m[5] >> 0);
				d.setUTCHours(m[7] >> 0);
				d.setUTCMinutes(m[8] >> 0);
				d.setUTCSeconds(m[10] >> 0);
				d.setUTCMilliseconds(m[12] >> 0);
				if(m[13] && m[13] !== "Z"){
					var h = m[16] >> 0,
						i = m[17] >> 0,
						ss = m[15] === "+";
					d.setUTCHours((m[7] >> 0) + ss ? -h : h);
					d.setUTCMinutes((m[8] >> 0) + ss ? -i : i);
				}
				return d;
			};		
		};
	}
    _compat();
	if (!window.console) window.console = {
		log: function() {}
	};
	$.helpers = that;
	$.helpers.online = function() {
		return true;
	};
	$.helpers.extend = function(proto, object) {
		for (var p in object) proto[p] = object[p];
	};
	var _errors = {
		http: 1,
		db: 2,
		exception: 3,
		sdata: 4
	};
	that.slashAtEnd=function(url) {
		if (url && (url.charAt(url.length-1) != "/")) url = url + "/";
		return url;
	};
	that.displayDateFormat =  "YYYY-MM-DD";
	that._diag = function(data, path , res) {
		if (!data) return;
		var $d = data.$diagnoses;
		if ($d && $d.length) {
			if (path) 
				res[path]= {message:  $d[0].message};
			else
				res.message = $d[0].message;
		}
		Object.keys(data).forEach(function(value) {
			var o = data[value];
			var $dd = o.$diagnoses;
			if ($dd && $dd.length) {
				res[value]= {message:  $dd[0].message};
				if (!res.message) res.message =  value +': ' +res[value].message;
			}
			if ((typeof o == "object") && (o.$ || o.$properties)) {
				that._diag((o.$ || o.$properties), (path?(path+"."+value):value), res);
			}
		});
	};
	that.http = {
		parseCookie: function(cookie) {
			var cookies = cookie || "";
			var res = {};
			cookies.split(";").forEach( function(cookie) {
				var parts = cookie.split("=");
				if ((parts.length >= 2) && parts[0] && parts[1]) {
					res[parts[0].trim()] = parts[1].trim();
				}
			});
			return res;
		},
		setCookie: function(name, value, path, expireDate) {
			if (!value && (value=="")) expireDate=new Date();
			try {
				window.document.cookie = name+"="+value+((expireDate != null)?("; expires="+expireDate.toGMTString()):"")+(path?("; path="+path):"/");
			} catch(e) {
			}
		}
	};
	that.extractErrors = function(data, defaultMsg) {
		var res = {message : defaultMsg};
		if (data && data.$diagnoses) {
			that._diag(data, "", res);
			return res;
		}
		if (!data || (!data.$ && !data.$properties) ) return res;
		that._diag(data.$ || data.$properties, "", res);
		return res;
	};
	that.format = function (value, params) {
		value = value.replace(/\{([0-9]\})*/g, function($0, $1, $2 ) {
			return params[parseInt($1)];
		});
		return value;
		
	};	
	that.uuid = function() {
		return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
			var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
			return v.toString(16);
		});
	};
	that.htmlEncode=function(value){ return $('<div/>').text(value).html(); };
	that.htmlDecode=function(value){ return $('<div/>').html(value).text(); };
	
	//remove
	that.FUNCS = {
		H: function(value, before, after) {
			if (value) return before+value+after;
			return "";
		},
		ERROR: function(value) {
			return that.FUNCS.H(value,  "<p class=\"ui-m-margin-0 ui-m-error\"><strong>", "</strong><br/p>");
		},
		INFO: function(value) {
			return that.FUNCS.H(value,  "<p class=\"ui-m-margin-0 ui-m-ok\">", "</p>");
		},
		TITLE_LW: function(value) {
			return that.FUNCS.H(value,  "<p class=\"ui-m-margin-0\"><strong>", "</strong></p>");
		}
	};
	
	that.ERRORS = _errors;
	that.pushdbError = function(ex) {
		if (ex) that.pushError({type: _errors.db, title: that.messages.db_exception, data: {message:ex.message}});
	},
	that.pushException = function(ex, solution) {
		that.pushError({
			type: _errors.exception, 
			title: that.messages.app_exception, data: {message:ex.message, solution: solution}
		});
		
	};
	that.pushAjaxError = function(jqXHR, textStatus, errorThrown, url, method) {
		var serror = errorThrown;
		method = method || "GET";
		var diag = null;
		if (jqXHR.responseText && (jqXHR.responseText.indexOf("$diagnoses") > 0)) {
			try {
				diag = JSON.parse(jqXHR.responseText);
			} catch(ex) {
			}
		}
		if (diag && diag.$diagnoses && diag.$diagnoses.length) {
			serror = diag.$diagnoses[0].message;
		} else if (errorThrown && errorThrown.message) {
			serror = errorThrown.message;
		} else if (jqXHR.statusText) {
			serror = jqXHR.statusText;
		}
		if (!serror) serror = $.smobile.locale().ui.unknownError;
		if ((jqXHR.status == 200) || (jqXHR.status == 201)) {
			that.pushError({type: _errors.exception, title: that.messages.app_exception, data: {message:serror}});
		} else 
			that.pushError({type: _errors.http, title: method + " " + url ,  data: { message: (jqXHR.status?(jqXHR.status+" - "):"")+serror }});
	};
	that._errkey=function(warning) {
		return (warning?"mobile_errors":"mobile_errors");
	};
	that._localStorage = true;
	try {
		if (!window.sessionStorage) that._localStorage = false;
	} catch (ex) {
		that._localStorage = false;
	}
	
	that._pushError = function(error, warning) {
		var key = that._errkey(warning);
		if (that._localStorage) {
			var errors = window.sessionStorage.getItem(key);
			if (!errors) 
				errors = []
			else
				errors = JSON.parse(errors);
			errors.push(error);
			window.sessionStorage.setItem(key,JSON.stringify(errors));
		} else  {
			if (!that[key]) that[key] = [];
			that[key].push(error);
		}
	};
	that._hasErrors=function(warning) {
		var key = that._errkey(warning);
		if (that._localStorage) {
			var errors = window.sessionStorage.getItem(key);
			if (errors)  {
				errors = JSON.parse(errors);
				return (errors.length > 0); 
			} 
			return false;
		} else	return (that[key] && that[key].length);
	};
	that._clearErrors=function(warning) {
		var key = that._errkey(warning);
		if (that._localStorage) 
			window.sessionStorage.removeItem(key);
		else
			delete that[key];
	};
	that._lastErrors=function(warning) {
		var key = that._errkey(warning);
		if (that._localStorage)  {
			var errors = window.sessionStorage.getItem(key);
			if (errors)  return JSON.parse(errors);
			return null;
		} else
			return that[key];
	};
	
	that.pushError = function(error) { that._pushError(error, false); };
	that.hasErrors = function() { return that._hasErrors(false); };
	that.clearErrors=function() { that._clearErrors(false); };
	that.lastErrors=function(warning) { return that._lastErrors(false);};
	that.pushWarn = function(error) { that._pushError(error, true); };
	that.hasWarns = function() { return that._hasErrors(true); };
	that.clearWarns=function() { that._clearErrors(true); };
	that.lastWarns=function(warning) { return that.lastErrors(true);};
	
	that.each=function(array, fn, next, parallel){
		array = array || [];
		if (!array.length)  return next();
		if (next == null) {
			return array.forEach(fn);
		}
		
		parallel = parallel || 1;
		var pending = 0;
		var i = 0, len= array.length;
		(function advance(){
			if (i == len && !pending) 
				return next();
			while (i < len && pending < parallel) {
				pending++;
				var j = i++;
				fn(array[j], j, function(){
					pending--;
					advance();
				})
			}
		})();
	};
	
	that.forEachKey=function(object, body, next, parallel){
		if (next) {
			if (object == null) 
				return next();
			return that.each(Object.keys(object), function(key, i, next){
				return body(key, object[key], next)
			}, next, parallel)
		}
		else {
			for (var key in object) 
				body(key, object[key]);
		}
	};
	
	that.sdataURL2key = function(uri) {
		var match = /^.*\(\'(.*)\'\)$/.exec(uri);
		if (match && (match.length==2)) return match[1];
		return "";
	};
	that.applySDataSort = function(sort, res) {
		var sh = null;
		if (sort.length === 1) 
			sh = function(a, b) {
				var so=sort[0], v1=a[so.name], v2 = b[so.name];
				if (v1=== v2) return 0;
				if (v1 > v2) 
					return (so.asc?1:-1);
				return (so.asc?-1:1);
			}
		else
			sh = function(a, b) {
				var v1, v2;
				for (var i= 0, len= sort.length; i<len; i++) {
					var so= sort[i];
					v1 = a[so.name];
					v2 = b[so.name];
					if (v1 == v2) continue;
					if (v1 > v2) {
					
						return (so.asc?1:-1);
					} else {
						return (so.asc?-1:1);
					}	
				}
				return 0
			};
		res.sort(sh);
	};	
	/**
	* @param {{jmdata: Object}} options
	*/	 
	
	that.addJqmData=function(options, html, filter, inline, inlinePrefix) {
		if (options.jmdata) Object.keys(options.jmdata).forEach(function(name) {
			if (filter && (filter.indexOf(name) < 0)) return;
			var value = options.jmdata[name];
			var qu = ((options.jmdata == "true") || (options.jmdata == "false"))?"":"\""; 
			if (inline) 
				html.push(' '+ inlinePrefix + value); 
			else
				html.push(' '+name+'='+qu +value +qu); 
		});			
	};
	that.encodeURIComponent=function(query) {
		return encodeURIComponent(query).replace(/\'/g,'%27');
			
	};
	that.encodeJsmQuery=function(query) {
		return that.encodeURIComponent(query);
			
	};
	that.decodeJsmQuery=function(query) {
		if (query.indexOf("=") > 0) return  query;
		return decodeURIComponent(query);
	};
	that.hashFirst=function() {
		return true;
	};
	
	
	/**
	* @param {{orderBy: string}} query
	*/	 
	that.sdataSort = function(query) {
		if (query && query.orderBy) {
			var orders = query.orderBy.split(',');
			orders.forEach(function(value, index) {
				value = value.trim(); 
				var s = value.split(' ');
				if (s.length == 2) {
					orders[index] = {name: s[0], asc: (s[1] != 'desc')};
				} else 
					orders[index] = {name: value, asc: true};
			});
			return orders;
		}
		return null;
	};
	
	that.number = {
		decimalSep: '',
		decimalSeparator: function() {
			if (that.decimalSep) return that.decimalSep; 
			var n = 1.1;
			n = n.toLocaleString().substring(1, 2);
			that.decimalSep = n;
			return n;
		}
		
	};
	var _pad2= function(i) {
		var res = "" + i;
		if (res.length==1) res = "0"+res;
		return res;
	};
	that.date = {
		isoToDate: function(diso) {return Date.parseISO8601(diso);},
		dateMY: function(dd) {
			return that.messages.monthsOfYear[dd.getMonth()] + ' '+ dd.getFullYear();
		},
		dateMY2: function(mm, yyyy) {
			return that.messages.monthsOfYear[mm] + ' '+ yyyy;
		},
		dateym: function(dd) {
			return dd.getFullYear() + '-' + _pad2(dd.getMonth()+1);
		},
		str2dateym: function(value) {
			var dd = that.date.isoToDate(value);
			return dd.getFullYear() + '-' + _pad2(dd.getMonth()+1);
		},
		str2dateYM: function(value) {
			var dd = that.date.isoToDate(value);
			return that.date.dateMY(dd);
		},
		
		dateTimeToLocalDate: function(dd) {
			return dd.getFullYear() + '-' + _pad2(dd.getMonth()+1)+ '-'+ _pad2(dd.getDate());
		},
		checkString: function(val, orig) {
			if (!orig) return  val.substring(0,10);
			try {
				var cv = val.substring(0,10);
				var ov = orig.substring(0,10);
				if (ov == cv) return orig;
				return cv;
			} catch(ex) {
				return orig;
			}
		},
		dateStringToIso: function(val) {
			var suffix = new Date().toISOString().substring(10);
			var date = Date.parseISO8601(val+suffix);
			return date.toISOString();
		}
		
	};
})(jQuery);    



(function($) {
	var that = $.helpers || {};
	$.helpers = that;
	$.helpers.Time = function(value) {
		value = (value + 86400 * 365 * 10000) % 86400;
		this._value = value;
	};
	var _pad2 = function(val) {
		var s = val.toString();
		return (s.length == 1) ? "0" + s : s;
	};
	
	$.helpers.Time.prototype = {
		hour: function(){ return Math.floor(this._value / 3600); },
		minute: function(){return Math.floor(this._value / 60) % 60;},
		second: function(){ return this._value % 60; },
		value: function(){ return this._value;},
		toISO: function(){ var self = this; return _pad2(self.hour()) + ":" + _pad2(self.minute()) + ":" + _pad2(self.second());},
		format: function() {
			var self = this;
			var hh= self.hour();
			var mm= self.minute();
			var sec= self.second();
			var format = that.dateSettings.timeFormat || "HH:ii"; 
			var  ms= mm + "", mms = _pad2(mm),  ss= sec + "", sss = _pad2(sec);
			var  Hs= hh + "", HHs = _pad2(hh);
			if (that.dateSettings.ampmText) {
				var ampm = "AM"
				if (hh > 13) {
					hh =  hh - 12;
					Hs= hh + "", HHs = _pad2(hh);
					ampm = "PM"
				}
				return format.replace(/ii/, mms).replace(/i/, ms).replace(/ss/, sss).replace(/s/, ss).replace(/hh/, HHs).replace(/h/, Hs).replace(/A/, ampm);
			} else 
				return format.replace(/ii/, mms).replace(/i/, ms).replace(/ss/, sss).replace(/s/, ss).replace(/HH/, HHs).replace(/H/, Hs);
		}
	};
	$.helpers.Time.parse = function(str) {
		str = str || "00:00";
		if (str.length != 5 && str.length != 8) 
			throw new Error("bad time format, expected hh:mm or hh:mm:ss, got " + str);
		var value = str.length == 8 ? parseInt(str.substring(0, 2), 10) * 3600 + parseInt(str.substring(3,5), 10) * 60 + 
			parseInt(str.substring(6.8), 10) : parseInt(str.substring(0, 2), 10) * 3600 + parseInt(str.substring(3, 5), 10) * 60;
		return new $.helpers.Time(value);
	};
	$.helpers.Time.parseTime = function(str) {
		var sd = $.scroller.formatDate($.helpers.dateSettings.dateFormat, new Date());
		var dd1 =  $.scroller.parseDate($.helpers.dateSettings.dateFormat + ' ' + $.helpers.dateSettings.timeFormat, sd + ' ' + str);
		var dd2 =  $.scroller.parseDate($.helpers.dateSettings.dateFormat + ' ' + $.helpers.dateSettings.timeFormat, sd + ' ' + new $.helpers.Time('00:00').format());
		var res = new $.helpers.Time((dd1- dd2)/1000);
		return res;
	};
	
	that.messages = {
		http_error : "Http Error",
		app_exception: "Application Exception",
		db_exception: "Database Exception",
		nothing_to_send: "No changes to send.",
		menu_apps: "Root Menu",
		datasets: "Societies",
		entities: "Entities",
		resources: "Resources"
	};
	that.lang2DateSettings = function(langDate) {	
		var date = new Date();
		if (!langDate) langDate = {
			"amDesignator": "AM",
			"pmDesignator": "PM",
			"dateElementOrder": "mdy",
			"dayNames": ["Sunday", "Monday", "Tuesday", "Wednesday","Thursday","Friday", "Saturday"],
			"abbreviatedDayNames": ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
			"monthNames": ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
			"abbreviatedMonthNames": ["Jan","Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
			"formatPatterns": { "shortDate": "M/d/yyyy","shortTime": "h:mm tt"}
		};
		var res = {
			ampmText: (langDate.amDesignator || langDate.pmDesignator)?'&nbsp;':'',
			dateFormat: langDate.formatPatterns.shortDate.toLowerCase().replace(/yyyy/,'yy'),
			dateOrder: langDate.dateElementOrder.replace(/m/, 'mm').replace(/y/, 'yy').replace(/d/, 'dd'),
			dayNames: langDate.dayNames,
			dayNamesShort: langDate.abbreviatedDayNames,
			monthNames: langDate.monthNames,
			monthNamesShort: langDate.abbreviatedMonthNames,
			timeFormat: langDate.formatPatterns.shortTime.replace(/tt/g,'A').replace(/m/g,'i'),
			yearText: $.smobile.locale().datetime.year,
			monthText: $.smobile.locale().datetime.month,
			dayText: $.smobile.locale().datetime.day,
			minuteText: $.smobile.locale().datetime.minutes,
			hourText: $.smobile.locale().datetime.hour,
			secText: $.smobile.locale().datetime.seconds
		
		};
		res.endYear = date.getFullYear() + 20;
		if (res.ampmText) 
			res.timeFormat = res.timeFormat.replace(/H/g, 'h')
		else
			res.timeFormat = res.timeFormat.replace(/h/, 'H');
		res.timeWheels = res.timeFormat.replace(/:/g,'').replace(/ /g,'')
		
		return res;
	};
	that.dateSettings =  that.lang2DateSettings(null);
	if ($.scroller) {
		$.scroller.setDefaults(that.dateSettings);
	}

	
	 
})(jQuery);



 