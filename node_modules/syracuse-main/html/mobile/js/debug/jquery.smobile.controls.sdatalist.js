
(function($) {
	'use strict';
	var that = $.smobile;
	that.controls = that.controls || {};
	/* used for $query or $lookup */
	that.controls.SDataList={
		refresh: function(controller, options, $c, id) {	
			var html = [];
			that.controls.SDataList.createItems(controller, options, html);
			$c.html(html.join('')).listview("refresh");
		},
		createItems: function(controller, options, html) {
			var page = controller.getPageData();
			var cp = $.proto.getProto(page);
			var article = $.proto.getArticle(page, options.bind);
			var ccd = controller.getCurrentData();
			var defArticle = {
				icon: {}, 
				hint: {},
				title: {propName: "$value"},
				description: {propName: "$description"}
			};
			var binds= [];
			if (article) {
				var map = {};
				$.proto.layoutParser(map, article, "$article", [cp], binds);
				cp = $.proto.getProto(page, options.bind);		
				binds.forEach(function(item){
					switch(item.$mobile) {
						case "icon":
							defArticle.icon.propName = item.$bind;
							break;
						case "hint":
							defArticle.hint.propName = item.$bind;
							break;
						case "title":
							defArticle.title.propName = item.$bind;
							break;
						case "description":
							defArticle.description.propName = item.$bind;
							break;
					}
					
				});
			} else cp = $.proto.getProto(page, options.bind);
			Object.keys(defArticle).forEach(function(pn) {	
				var item = defArticle[pn];
				if (item.propName) {
					if (item.propName.indexOf("$") == 0) {
						item.expression = cp[item.propName];
						if (item.expression) item.protoValue = true;
					}  else 
						item.expression = item.propName;
					
				}
			});
			
			var detail = null;
			if (cp.$links && cp.$links.$details) {
				detail = cp.$links.$details.$url;
				if (cp.$links.$details.$isHidden) detail = "";
			}
			var resources = controller.getValue(options.bind, null, []);
			resources.forEach(function(value, index) {
				var cd = {};
				var desc = defArticle.description.protoValue?value[defArticle.description.propName]:null,
					title = defArticle.title.protoValue?value[defArticle.title.propName]:null,
					icon = defArticle.icon.protoValue?value[defArticle.icon.propName]:null,
					hint = defArticle.hint.protoValue?value[defArticle.hint.propName]:null
				
				if  ((desc == null) && defArticle.description.expression) 
					desc = $.proto.parseExpression(defArticle.description.expression, {data: controller.exprData(value), $prototype: cp}, defArticle.description.propName);	
				else
					desc = "";
				if  ((title == null) && defArticle.title.expression) 
					title = $.proto.parseExpression(defArticle.title.expression, {data: controller.exprData(value), $prototype: cp},defArticle.title.propName);	
				else
					title = "";
				if  ((icon == null) && defArticle.icon.expression) 
					icon = $.proto.parseExpression(defArticle.icon.expression, {data: controller.exprData(value), $prototype: cp},defArticle.icon.propName);	
				else
					icon = "";
				if  ((hint == null) && defArticle.hint.expression) 
					hint = $.proto.parseExpression(defArticle.hint.expression, {data: controller.exprData(value), $prototype: cp},defArticle.hint.propName);	
				else
					hint = "";
				if (defArticle.icon.expression)  {
					if (icon && (typeof icon != "object")) icon = null;
					if (icon) {
						if ((icon.$type === "image"))  {
							var curl = icon.$url;  
							if (!curl && !icon.$value && defArticle.icon.propName) {
								if (cp.$properties &&  cp.$properties[defArticle.icon.propName]) {
									curl = cp.$properties[defArticle.icon.propName].$url;
								}
								
							}
							if (curl) {
								icon = $.proto.parseExpression(curl, {data: controller.exprData(value), $prototype: cp},"$url");
							} else if (icon.$value) {
								icon = "data:"+(icon.$contentType || "image/jpeg")+";base64,"+icon.$value;
							} else
								icon = null;
						} else icon = null;
					}
				}
				var content =  $.smobile.ui.sdataentry(title, desc, defArticle.icon.expression, icon, defArticle.hint.expression, hint);
				html.push('<li');
				$.helpers.addJqmData(cd,html); 
				if (defArticle.icon.expression) {
					html.push(' class="' + that.ui.consts.normal_icon  +'"');
					cd.css = [that.ui.consts.normal_icon];
				} 
				html.push('>');
				if (detail)  cd.url = $.proto.parseExpression(detail, {data: controller.exprData(value), $prototype: cp},"$url");
				if (options.$lookup) {
					cd.action = "validate"
					cd.actionParams = index + "";
				}
				that._addLink(html, cd, controller, function() {
					html.push(content);
				});	
			});
			
		},
		handler: function(c, after) {
			var controller = this;
			var  html = [], options= c.data || {};
			var page = controller.getPageData();
			if (!page)  return after({ html: "",options: {}});
			var cp = $.proto.getProto(page);
			var article = $.proto.getArticle(page, options.bind);
			if (!cp)  return after({ html: "",options: {}});
			html.push('<ul id="'+c.id + '" data-role="listview" data-filter="true"');
			$.helpers.addJqmData(options,html); 
			//html.push(' data-inset="true"');			
			html.push('>');
			that.controls.SDataList.createItems(controller, options, html);
			html.push('</ul>');
			return after({ 
				html: html.join(''),
				bind: options.bind,
				options: options				
			});
		
		},
		events: function($c, c) {
			var controller = this;
			if  (c.options.$lookup) {
				$c.click(function(e) {
					e.preventDefault();
					if (e && e.target) {
						var target = e.target;
						while (target && target.tagName && (target.tagName.toUpperCase() != 'A'))
							target = target.parentNode;
						if (!target) return;
						var p = $(target).attr("data-action");
						if (p != "") {
							p = parseInt(p, 10);
							if (controller.getCurrentData()) {
								var item = controller.getCurrentData().$resources[p];
								
								if (controller.parent) {
									if (controller.config && controller.config.url && controller.config.url.query && controller.config.url.query.control) {
										var cc = controller.parent.controls[controller.config.url.query.control];
										if (cc) {
											var ccp = that.controls[cc.uiClass];
											if (ccp.setValue) return ccp.setValue(controller.parent, cc, item, that.doBack);
										}
									}
								}						
								
							}
						}
					}
					that.doBack();
				});
			}
			$c.on("listviewbeforefilter", function (e, data) {
				var $ul = $(this),
				$input = $( data.input ),
				value = $input.val();
				e.preventDefault();
			});			
			
		}

	};
})(jQuery);    
