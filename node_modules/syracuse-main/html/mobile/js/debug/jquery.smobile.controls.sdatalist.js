(function($) {
	'use strict';
	var that = $.smobile;
	that.controls = that.controls || {};
	
	/* used for $query or $lookup */
	that.controls.SDataList={
		refresh: function(controller, options, $c, id) {	
			var html = [];
			that.controls.SDataList.createItems(controller, options, html);
			$c.html(html.join('')).listview("refresh");
		},
		createItems: function(controller, options, html) {
			var page = controller.getPageData();
			var cp = $.proto.getProto(page);
			var article = $.proto.getArticle(page, options.bind);
			var ccd = controller.getCurrentData();
			var defArticle = {
				icon: {}, 
				hint: {},
				title: {propName: "$value"},
				description: {propName: "$description"}
			};
			var binds= [];
			if (article) {
				var map = {};
				$.proto.layoutParser(map, article, "$article", [cp], binds);
				cp = $.proto.getProto(page, options.bind);		
				binds.forEach(function(item){
					switch(item.$mobile) {
						case "icon":
							defArticle.icon.propName = item.$bind;
							break;
						case "hint":
							defArticle.hint.propName = item.$bind;
							break;
						case "title":
							defArticle.title.propName = item.$bind;
							break;
						case "description":
							defArticle.description.propName = item.$bind;
							break;
					}
					
				});
			} else cp = $.proto.getProto(page, options.bind);
			Object.keys(defArticle).forEach(function(pn) {	
				var item = defArticle[pn];
				if (item.propName) {
					if (item.propName.indexOf("$") == 0) {
						item.expression = cp[item.propName];
						if (item.expression) item.protoValue = true;
					}  else 
						item.expression = item.propName;
					
				}
			});
			
			var detail = null;
			if (cp.$links && cp.$links.$details) {
				detail = cp.$links.$details.$url;
				if (cp.$links.$details.$isHidden) detail = "";
			}
			var resources = controller.getValue(options.bind, null, []);
			resources.forEach(function(value, index) {
				var cd = {};
				var desc = defArticle.description.protoValue?value[defArticle.description.propName]:null,
					title = defArticle.title.protoValue?value[defArticle.title.propName]:null,
					icon = defArticle.icon.protoValue?value[defArticle.icon.propName]:null,
					hint = defArticle.hint.protoValue?value[defArticle.hint.propName]:null
				
				if  (desc == null) {
					if  (defArticle.description.expression) 
						desc = $.proto.parseExpression(defArticle.description.expression, {data: controller.exprData(value), $prototype: cp}, defArticle.description.propName);	
					else
						desc = "";
				}
				if  (title == null){
					if (defArticle.title.expression) 
						title = $.proto.parseExpression(defArticle.title.expression, {data: controller.exprData(value), $prototype: cp},defArticle.title.propName);	
					else
						title = "";
				}	
				if  (icon == null) {
					if (defArticle.icon.expression) 
						icon = $.proto.parseExpression(defArticle.icon.expression, {data: controller.exprData(value), $prototype: cp},defArticle.icon.propName);	
					else
						icon = "";
				}
				if  (hint == null) {
					if (defArticle.hint.expression) 
						hint = $.proto.parseExpression(defArticle.hint.expression, {data: controller.exprData(value), $prototype: cp},defArticle.hint.propName);	
					else
						hint = "";
				}
				if (defArticle.icon.expression)  {
					if (icon && (typeof icon != "object")) icon = null;
					if (icon) {
						if ((icon.$type === "image"))  {
							var curl = icon.$url;  
							if (!curl && !icon.$value && defArticle.icon.propName) {
								if (cp.$properties &&  cp.$properties[defArticle.icon.propName]) {
									curl = cp.$properties[defArticle.icon.propName].$url;
								}
							}
							if (curl) {
								icon = $.proto.parseExpression(curl, {data: controller.exprData(value), $prototype: cp},"$url");
							} else if (icon.$value) {
								icon = "data:"+(icon.$contentType || "image/jpeg")+";base64,"+icon.$value;
							} else
								icon = null;
						} else icon = null;
					}
				}
				var content =  $.smobile.ui.sdataentry(title, desc, defArticle.icon.expression, icon, defArticle.hint.expression, hint);
				html.push('<li');
				$.helpers.addJqmData(cd,html); 
				if (defArticle.icon.expression) {
					html.push(' class="' + that.ui.consts.normal_icon  +'"');
					cd.css = [that.ui.consts.normal_icon];
				} 
				html.push('>');
				if (detail)  cd.url = $.proto.parseExpression(detail, {data: controller.exprData(value), $prototype: cp},"$url");
				if (options.$lookup) {
					cd.action = "validate"
					cd.actionParams = index + "";
				}
				that._addLink(html, cd, controller, function() {
					html.push(content);
				});	
			});
			
		},
		handler: function(c, after) {
			var controller = this;
			var  html = [], options= c.data || {};
			var page = controller.getPageData();
			if (!page)  return after({ html: "",options: {}});
			var cp = $.proto.getProto(page);
			var article = $.proto.getArticle(page, options.bind);
			if (!cp)  return after({ html: "",options: {}});
			if ($.sdata.capabilities.showSearch) {
				html.push('<div class=""><table class="s-m-design" cellpadding="0" cellspacing="0" border="0"><tbody><tr>');
				html.push('<td class="all"><input id="'+c.id + '_search" data-type="text"  data-mini="true" /></td>');
				html.push('<td class="space"></td>');
				html.push('<td class="button"><a id="'+c.id + '_sbutton" href="#" data-role="button" data-mini="true" data-icon="search">'+that.locale().ui.search+'</a></td>');
				html.push('</tr></tbody></table></div>');
			} else {
				html.push('<form id="'+c.id + '_search_form">');
				html.push('<input id="'+c.id + '_search" data-type="search"  data-mini="true" />');
				html.push('</form>');
			}
			if (!options.$lookup) {
				if (!cp.$filters)
					cp.$filters  = {"pending": { $title: "Pending", $where:"" }, "signed": { $title: "Signed", $where:""}};
			}
			html.push('<ul id="'+c.id + '" data-role="listview" data-filter="false"');
			$.helpers.addJqmData(options,html); 
			//html.push(' data-inset="true"');			
			html.push('>');
			that.controls.SDataList.createItems(controller, options, html);
			html.push('</ul>');
			return after({ 
				html: html.join(''),
				bind: options.bind,
				options: options				
			});
		
		},
		events: function($c, c) {
			var controller = this;
			if  (c.options.$lookup) {
				$c.click(function(e) {
					e.preventDefault();
					if (e && e.target) {
						var target = e.target;
						while (target && target.tagName && (target.tagName.toUpperCase() != 'A'))
							target = target.parentNode;
						if (!target) return;
						var p = $(target).attr("data-action");
						if (p != "") {
							p = parseInt(p, 10);
							if (controller.getCurrentData()) {
								var item = controller.getCurrentData().$resources[p];
								
								if (controller.parent) {
									if (controller.config && controller.config.url && controller.config.url.query && controller.config.url.query.control) {
										var cc = controller.parent.controls[controller.config.url.query.control];
										if (cc) {
											var ccp = that.controls[cc.uiClass];
											if (ccp.setValue) return ccp.setValue(controller.parent, cc, item, that.doBack);
										}
									}
								}						
								
						 	}
						} 
					}
					that.doBack();
				});
			}
			var _execSearch = function(e) {
				e.preventDefault();
				var purl = controller.config.url;
				var cv = ($('#'+c.id + "_search")[0].value || "");
				var sv = (purl.query?(purl.query.search||""):"");
				if (sv !== cv) {
					if (!cv) 
						delete purl.query.search;
					else {
						purl.query = purl.query || {};
						purl.query.search = cv;
					}
					$.sdata.getUri(purl);
					$.mobile.loading('show', {theme: "a", text: $.smobile.locale().ui.loading});
					$.sdata.execURL(purl.uri, {
						error: function(data) {
							$.mobile.loading('hide');
						},
						success: function(cd) {
							$.mobile.loading('hide');
							if (cd) {
								// refresh sdatalist && footer
								controller.data = cd;	
								controller.doRefresh();
							}
							
						}
					});  					
				}
			};
			if ($.sdata.capabilities.showSearch) 
				$('#'+c.id + "_sbutton").click(function(e) {_execSearch(e)});
			else
				$('#' + c.id + "_search_form").submit(function(e) {_execSearch(e);});
		}
	};
	that.controls.SdataSort = {
		handler: function(c, after) {
			var controller = this;
			var  html = [], options= c.data || {};
			options.items = controller.getSortFields();
			if (options.items) {
				html.push('<a href="#'+c.id+'_sortpopup" id="'+c.id +'" class="ui-btn-right" xdata-iconpos="notext" data-inline="true" data-icon="arrow-d" data-rel="popup">'+that.locale().ui.sort+ '</a>');
				
				html.push('<div id="'+c.id+'_sortpopup" data-corners="false" data-role="popup">');
				html.push('<ul data-mini="true" data-role="listview" id="'+ c.id+'_lv" style="min-width:210px;">');
				html.push('</ul></div>');
			}
			
			
			return after({ 
				html: html.join(''),
				bind: true,
				options: options				
			});
		},
		_getOrderBy: function(controller) {
			var url = controller.options.url; 
			var orderBy = url.query.orderBy  || "";
			var proto = $.sdata.url2proto(url);
			if (!orderBy && proto.$properties.$resources.$item.$defaultOrder) orderBy = proto.$properties.$resources.$item.$defaultOrder;
			if (orderBy) {
				var ob = orderBy.split(',')[0].split(' ');
				orderBy = ob[0];
				var asc = (ob.length > 1)?ob[1].toLowerCase():'asc';
			}
			return {orderBy: orderBy, asc:asc};
		},
		events: function($c, c) {;
			var controller = this;
			$c.click(function(e) {	
				var order = that.controls.SdataSort._getOrderBy(controller);
				var  lv = $('#'+c.id + '_lv');
				if (lv && lv.length) {
					var html = [];
					html.push('<li data-role="list-divider">'+that.locale().ui.sort+'</li>');
					c.options.items.forEach(function(cd) {
						var icon = (cd.value === order.orderBy)?((order.asc === 'asc')?"arrow-d":"arrow-u"):"false";
						html.push('<li data-icon="'+ icon +'"><a href="#" data-field-name="'+ cd.value+ '">'+cd.title+'</a></li>');
					});
					lv.html(html.join(''));
					lv.listview("refresh");
					
				}
			});
			var  $list = $('#'+c.id + '_lv');
			$list.click(function(e) {	
				e.preventDefault();
				if (e && e.target) {
					var target = e.target;
					while (target && target.tagName && (target.tagName.toUpperCase() !== 'A'))
						target = target.parentNode;
					if (!target) return;
					var p = $(target).attr("data-field-name");
					var url = controller.options.url; 
					var order = that.controls.SdataSort._getOrderBy(controller);
					
					if (order.orderBy === p)  
						order.asc = (order.asc==='asc')?"desc":"asc";
					else {
						order.orderBy = p;
						order.asc = 'asc';
					}
					order.orderBy = order.orderBy + ' ' + order.asc;
					url.query.orderBy = order.orderBy;
					$.sdata.getUri(url);
					$('#'+c.id+'_sortpopup').popup('close');
					$.mobile.loading('show', {theme: "a", text: $.smobile.locale().ui.loading});
					
					$.sdata.execURL(url.uri, {
						error: function(data) {
							$.mobile.loading('hide');
						},
						success: function(cd) {
							$.mobile.loading('hide');
							if (cd) {
								// refresh sdatalist && footer
								controller.data = cd;	
								controller.doRefresh();
							}
							
						}
					});  			
					
				}
				
			});
			
		}
		
	};
	
})(jQuery);    
