
(function($) {
	'use strict';
	var that = $.smobile;
	that.controls = that.controls || {};
	/* used for $query or $lookup */
	that.controls.SDataList={
		handler: function(c, after) {
			var controller = this;
			var  html = [], options= c.data || {};
			var page = controller.getPageData();
			if (!page)  return after({ html: "",options: {}});
			var cp = $.proto.getProto(page);
			var article = $.proto.getArticle(page, options.bind);
			if (!cp)  return after({ html: "",options: {}});
			var ccd = controller.getCurrentData();
			var hasPagination = (ccd.$startIndex != null) && (ccd.$totalResults =!null) && (ccd.$itemsPerPage =!null);
			var pagination = null;
			if (hasPagination) {
				hasPagination =  (ccd.$totalResults > ccd.$itemsPerPage);
				if (hasPagination) {
					pagination.prev = ccd.$startIndex > 1; 
					if (pagination.prev) {
						pagination.prev = {si: Math.max(ccd.$startIndex-ccd.$itemsPerPage, 1), count: ccd.$itemsPerPage }; 
					}
					pagination.next = (ccd.$startIndex -1 + ccd.$itemsPerPage) < ccd.$totalResults; 
					if (pagination.next) {
						pagination.next = {si: ccd.$startIndex+ccd.$itemsPerPage, count: ccd.$itemsPerPage }; 
					}
				}
			}
			html.push('<ul id="'+c.id + '" data-role="listview" data-filter="true"');
			//html.push('<ul id="'+c.id + '" data-role="listview"');
			$.helpers.addJqmData(options,html); 
			//html.push(' data-inset="true"');			
			html.push('>');
			var defArticle = {
				icon: {}, 
				hint: {},
				title: {propName: "$value"},
				description: {propName: "$description"}
			};
				
			var binds= [];
			if (article) {
				var map = {};
				$.proto.layoutParser(map, article, "$article", [cp], binds);
				cp = $.proto.getProto(page, options.bind);		
				
				binds.forEach(function(item){
					switch(item.$mobile) {
						case "icon":
							defArticle.icon.propName = item.$bind;
							break;
						case "hint":
							defArticle.hint.propName = item.$bind;
							break;
						case "title":
							defArticle.title.propName = item.$bind;
							break;
						case "description":
							defArticle.description.propName = item.$bind;
							break;
					}
					
				});
			} else cp = $.proto.getProto(page, options.bind);
			Object.keys(defArticle).forEach(function(pn) {	
				var item = defArticle[pn];
				if (item.propName) {
					if (item.propName.indexOf("$") == 0) {
						item.expression = cp[item.propName];
						if (item.expression) item.protoValue = true;
					}  else 
						item.expression = item.propName;
					
				}
			});
			
			var detail = null;
			if (cp.$links && cp.$links.$details) {
				detail = cp.$links.$details.$url;
				if (cp.$links.$details.$isHidden) detail = "";
			}
			//html.push('<li data-role="fieldcontain">');
			//html.push('<input type="search" name="search" id="search-basic" value="" />');
			//html.push('</li>');
			
			
			
			var resources = controller.getValue(options.bind, null, []);
			resources.forEach(function(value, index) {
				var cd = {};
				var desc = defArticle.description.protoValue?value[defArticle.description.propName]:null,
					title = defArticle.title.protoValue?value[defArticle.title.propName]:null,
					icon = defArticle.icon.protoValue?value[defArticle.icon.propName]:null,
					hint = defArticle.hint.protoValue?value[defArticle.hint.propName]:null
				
				if  ((desc == null) && defArticle.description.expression) 
					desc = $.proto.parseExpression(defArticle.description.expression, {data: controller.exprData(value), $prototype: cp}, defArticle.description.propName);	
				else
					desc = "";
				if  ((title == null) && defArticle.title.expression) 
					title = $.proto.parseExpression(defArticle.title.expression, {data: controller.exprData(value), $prototype: cp},defArticle.title.propName);	
				else
					title = "";
				if  ((icon == null) && defArticle.icon.expression) 
					icon = $.proto.parseExpression(defArticle.icon.expression, {data: controller.exprData(value), $prototype: cp},defArticle.icon.propName);	
				else
					icon = "";
				if  ((hint == null) && defArticle.hint.expression) 
					hint = $.proto.parseExpression(defArticle.hint.expression, {data: controller.exprData(value), $prototype: cp},defArticle.hint.propName);	
				else
					hint = "";
				if (defArticle.icon.expression)  {
					if (icon && (typeof icon != "object")) icon = null;
					if (icon) {
						if ((icon.$type === "image"))  {
							if (icon.$url) {
								icon = $.proto.parseExpression(icon.$url, {data: controller.exprData(value), $prototype: cp},"$url");
							} else if (icon.$value) {
								icon = "data:"+(icon.$contentType || "image/jpeg")+";base64,"+icon.$value;
							} else
								icon = null;
						} else icon = null;
					}
				}
				var content =  $.smobile.ui.sdataentry(title, desc, defArticle.icon.expression, icon, defArticle.hint.expression, hint);
				html.push('<li');
				$.helpers.addJqmData(cd,html); 
				if (defArticle.icon.expression) {
					html.push(' class="' + that.ui.consts.normal_icon  +'"');
					cd.css = [that.ui.consts.normal_icon];
				} 
				html.push('>');
				if (detail)  cd.url = $.proto.parseExpression(detail, {data: controller.exprData(value), $prototype: cp},"$url");
				if (options.$lookup) {
					cd.action = "validate"
					cd.actionParams = index + "";
				}
				that._addLink(html, cd, controller, function() {
					html.push(content);
				});	
			});
			html.push('</ul>');
			return after({ 
				html: html.join(''),
				bind: options.bind,
				options: options				
			});
		
		},
		events: function($c, c) {
			if  (!c.options.$lookup) return;
			var controller = this;
			$c.click(function(e) {
				e.preventDefault();
				if (e && e.target) {
					var target = e.target;
					// twice
					if (target.tagName.toUpperCase() != 'A') target = target.parentNode;
					if (target.tagName.toUpperCase() != 'A') target = target.parentNode;
					var p = $(target).attr("data-action");
					if (p != "") {
						p = parseInt(p, 10);
						if (controller.getCurrentData()) {
							var item = controller.getCurrentData().$resources[p];
							
							if (controller.parent) {
								if (controller.config && controller.config.url && controller.config.url.query && controller.config.url.query.control) {
									var cc = controller.parent.controls[controller.config.url.query.control];
									if (cc) {
										var ccp = that.controls[cc.uiClass];
										if (ccp.setValue) return ccp.setValue(controller.parent, cc, item, that.doBack);
									}
								}
							}						
							
						}
					}
				}
				that.doBack();
			});
		}

	};
})(jQuery);    
