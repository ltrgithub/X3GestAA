"use strict"; 
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	var $proto = $.proto;
	var $auth = $proto.auth;
	var $sdata = $.sdata;
	that.controls = that.controls || {};
	/* used for $query or $lookup */
	that.controls.SDataList={
		field2proto: function (controller, fn) {
			var pc = controller;
			var pd =pc.getPageData(), res=[];
			if (pd && pd.$prototype && pd.$prototype.$properties &&  pd.$prototype.$properties.$resources &&  pd.$prototype.$properties.$resources.$item) {
				return pd.$prototype.$properties.$resources.$item.$properties[fn];
			}
			return null;
		},
		rightValue: function (controller, filter) {
			var cp = that.controls.SDataList.field2proto(controller,filter.field);
			var cv, value = filter.value;
			switch (cp.$type) {
				case "application/x-password": 
				case "application/x-string": 
					cv = value.replace(/'/g, "\\'");
					if (filter.op === "like") cv = '%'+cv +'%';
					else if (filter.op === "like_s") cv = cv +'%';
					cv = "'" + cv + "'";
					return cv;
				case "application/x-integer": 
					return value;
				case "application/x-real": 
					return value;
				case "application/x-decimal": 
					return value;
				case "application/x-date": 
					if (!value) return null;
					return '@' + value + '@';
				case "application/x-datetime": 
					return '@' + value + '@';
				case "application/x-time": 
					return null;
				case "application/x-boolean": 
					return value?"true":"false";
				case "application/x-choice": 
					if (cp.$value.$type ==="application/x-string") {
						return "'" + value.replace(/'/g, "\\'") + "'";
					} else
						return value + "";
					break;
				case "application/x-reference": 
					cv = value.replace(/'/g, "\\'");
					cv = "'" + cv + "'";
					return cv;				
				default:
					break;
					
			}
			return null;
		},
		refresh: function(controller, options, $c, id) {	
			var html = [];
			that.controls.SDataList.createItems(controller, options, html);
			$c.html(html.join('')).listview("refresh");
		},
		createItems: function(controller, options, html) {
			var page = controller.getPageData();
			var pageproto = $proto.getProto(page);
			var cp = $proto.getProto(page, options.bind);		
			var coptions = {}, info={list:true, noCache: $proto.auth.designMode};
			var $article = $proto.getArticle(page, options.bind);
			$article = $auth.checkQueryArticle(cp, $article, info);
			var detail = null;
			if (cp.$links && cp.$links.$details) {
				detail = cp.$links.$details.$url;
				if (cp.$links.$details.$isHidden) detail = "";
			}
			var resources = controller.getValue(options.bind, null, []);
			resources.forEach(function(value, index) {
				var cd = {};
				var chtml = [];
				$proto.auth.sdi($article, chtml, coptions, controller, cp, value, info);
				var content = chtml.join('');
				//
				
				html.push('<li');
				$helpers.addJqmData(cd,html); 
				if (info.$image) {
					html.push(' class="' + $helpers.ui.consts.normal_icon  +'"');
					cd.css = [$helpers.ui.consts.normal_icon];
				} 
				html.push('>');
				if (detail)  
					cd.url = $proto.parseExpression(detail, {data: controller.exprData(value), $prototype: cp},"$url");
				if (options.$lookup) {
					cd.action = "validate"
					cd.actionParams = index + "";
				}
				that._addLink(html, cd, controller, function() {
					html.push(content);
				});	
			});
			
		},
		sync: true,
		handler: function(c, after) {
			var controller = this;
			var  html = [], options= c.data || {};
			var page = controller.getPageData();
			if (!page)  return after({ html: "",options: {}});
			var cp = $proto.getProto(page);
			var article = $proto.getArticle(page, options.bind);
			
			if (!cp)  return after({ html: "",options: {}});
			if ($sdata.capabilities.showSearch) {
				html.push('<div class=""><table class="s-m-design" cellpadding="0" cellspacing="0" border="0"><tbody><tr>');
				html.push('<td class="space"></td>');
				html.push('<td class="all"><input id="'+c.id + '_search" data-type="text"  data-mini="true" /></td>');
				html.push('<td class="space"></td>');
				html.push('<td class="button"><a id="'+c.id + '_sbutton" href="#" data-role="button" data-mini="true" data-icon="search">'+$helpers.locale().ui.search+'</a></td>');
				html.push('</tr></tbody></table></div>');
			} else {
				html.push('<form class="s-m-space" id="'+c.id + '_search_form">');
				html.push('<input id="'+c.id + '_search" data-type="search"  data-mini="true" />');
				html.push('</form>');
			}
			if (!options.$lookup) {
				var $filters = cp.$filters;
				if (article && article.$filters) $filters =  article.$filters;
				var filters = $filters?Object.keys($filters):null;
				if (filters && filters.length && controller.config && controller.config.url) {
					var purl = controller.config.url;
					var af = ((purl.query && purl.query.filter)?purl.query.filter:"");
					var sf = (sf != ""); 
					html.push('<div data-role="navbar" id = "'+ c.id+ '_filter"><ul>');
					filters.forEach(function(filter, i) {
						var cf = $filters[filter];
						html.push('<li><a data-action-filter="'+ filter +'" href="#"');
						if (sf && (filter == af)) {
							sf = false;
							html.push(' class="ui-btn-active"');
						}
						html.push('>');
						html.push($helpers.htmlEncode($proto.parseExpression(cf.$shortTitle || cf.$title, {data: null, $prototype: cp}, "$title")));	
						html.push('</a></li>');
					});
					html.push('</ul></div>');
				}
			}
			html.push('<ul id="'+c.id + '" data-role="listview" data-filter="false"');
			$helpers.addJqmData(options,html); 
			//html.push(' data-inset="true"');			
			html.push('>');
			that.controls.SDataList.createItems(controller, options, html);
			html.push('</ul>');
			return after({ 
				html: html.join(''),
				bind: options.bind,
				options: options				
			});
		
		},
		_clickLookup: function(e) {
			var controller = this;
			e.preventDefault();
			if (e && e.target) {
				var target = e.target;
				while (target && target.tagName && (target.tagName.toUpperCase() != 'A'))
					target = target.parentNode;
				if (!target) return;
				var p = $(target).attr("data-action");
				if (p != "") {
					p = parseInt(p, 10);
					if (controller.getCurrentData()) {
						var item = controller.getCurrentData().$resources[p];
						
						if (controller.parent) {
							if (controller.config && controller.config.url && controller.config.url.query && controller.config.url.query.control) {
								var cc = controller.parent.controls[controller.config.url.query.control];
								if (cc) {
									var ccp = that.controls[cc.uiClass];
									if (ccp.setValue) return ccp.setValue(controller.parent, cc, item, that.doBack);
								}
							}
						}						
						
					}
				} 
			}
			that.doBack();		
		},
		events: function($c, c) {
			var controller = this;
			var ceid = c.id;
			if  (c.options.$lookup) 
				$c.click(that.controls.SDataList._clickLookup.bind(controller));
			else
				$('#' + ceid + "_filter").click(that.controls.SDataList._execFilter.bind({id: ceid, controller: controller}));

			if ($sdata.capabilities.showSearch) 
				$('#'+ceid + "_sbutton").click(that.controls.SDataList._execSearch.bind({id: ceid, controller: controller}));
			else
				$('#' + ceid + "_search_form").submit(that.controls.SDataList._execSearch.bind({id: ceid, controller: controller}));
		},
		_execUrl: function(purl, controller, after) {
			$sdata.getUri(purl);
			$.mobile.loading('show', {theme: "a", text: $helpers.locale().ui.loading});
			$helpers.clearErrors();
			$sdata.execURL(purl.uri, {
				error: function(data) {
					$.mobile.loading('hide');
					if (after)  after();
				},
				success: function(cd) {
					$.mobile.loading('hide');
					if (cd) {
						controller.config.url = purl;
						// refresh sdatalist && footer
						controller.data = cd;	
						controller.doRefresh();
					} else {
						if ($helpers.hasErrors()) {
							controller.config.url = purl;
							// refresh sdatalist && footer
							controller.data = {$ressources: []};	
							controller.doRefresh();
						}
					}
					
					
					if (after) after();
					
				}
			});  								
		},
		_execSearch: function(e) {
			var obj = this;
			var controller = obj.controller;
			var id = obj.id;
			e.preventDefault();
			var purl = controller.config.url;
			var cv = ($('#'+id + "_search")[0].value || "");
			var sv = (purl.query?(purl.query.search||""):"");
			if (sv !== cv) {
				if (!cv) 
					delete purl.query.search;
				else {
					purl.query = purl.query || {};
					purl.query.search = cv;
				}
				that.controls.SDataList._execUrl(purl, controller);
			}
		},
		applyFilter: function(controller, after) {
			var purl = controller.config.url;
			var filters = controller.extraData.filters;
			var lastFilter = controller.extraData.lastFilter || "";
			var newFilter = "", stag = "";
			if (filters) {
				filters.forEach(function(filter){
					if (filter.op !== "none") {
						var cf = '(' + filter.field + ' ' + (filter.op==="like_s"?"like":filter.op) + ' ' + that.controls.SDataList.rightValue(controller, filter) + ')'
						newFilter = newFilter + stag + cf;
						stag = ' and ';
					}
					
				});
			}
			if (lastFilter != newFilter) {
				if (newFilter) {
					purl.query = purl.query || {};
					purl.query.where = newFilter;
				} else {
					if (purl.query) delete purl.query.where;
				}
				controller.extraData.lastFilter = newFilter;
				that.controls.SDataList._execUrl(purl, controller, after);	
				
			} else after();
		},
		_execFilter: function(e) {
			var obj = this;
			var controller = obj.controller;
			var id = obj.id;
			e.preventDefault();
			var target = e.target;
			while (target && target.tagName && (target.tagName.toUpperCase() != 'A'))
				target = target.parentNode;
			if (!target) return;
			
			var purl = controller.config.url;
			var cv = $(target).attr("data-action-filter") || "";
			var sv = (purl.query?(purl.query.filter||""):"");
			if (sv !== cv) {
				if (!cv) 
					delete purl.query.filter;
				else {
					purl.query = purl.query || {};
					purl.query.filter = cv;
				}
				that.controls.SDataList._execUrl(purl, controller);
			}
		}
	};
	that.controls.SdataSort = {
		sync: true,
		handler: function(c, after) {
			var controller = this;
			var  html = [], options= c.data || {};
			var filters = controller.getFilterFields();
			options.items = controller.getSortFields();
			if (filters || options.items) {
				html.push('<div id="'+c.id+'" data-type="horizontal" data-role="controlgroup" class="ui-btn-right">');
			}
			if (filters) {
				html.push('<a href="#" id="'+c.id+'_filter" data-role="button" data-iconpos="notext" data-inline="true" data-icon="search">'+$helpers.locale().ui.filter+ '</a>');
				
				/*
				*	html.push
				*/
			}
			if (options.items) {
				html.push('<a href="#'+c.id + '_sortpopup" id="'+c.id+'_sort"  data-role="button" data-iconpos="notext" data-inline="true" data-icon="arrow-d" data-rel="popup">'+$helpers.locale().ui.sort+ '</a>');	
				html.push('<div id="'+c.id+'_sortpopup" data-corners="false" data-role="popup">');
				html.push('<ul data-mini="true" data-role="listview" id="'+ c.id+'_lv" style="min-width:210px;">');
				html.push('</ul></div>');
			}
			if (filters || options.items) {
				html.push('</div>');
			}
						
			
			return after({ 
				html: html.join(''),
				bind: true,
				options: options				
			});
		},
		_getOrderBy: function(controller) {
			var url = controller.options.url; 
			var orderBy = url.query.orderBy  || "";
			var proto = $sdata.url2proto(url);
			if (!orderBy && proto.$properties.$resources.$item.$defaultOrder) 
				orderBy = proto.$properties.$resources.$item.$defaultOrder;
			if (orderBy) {
				var ob = orderBy.split(',')[0].split(' ');
				orderBy = ob[0];
				var asc = (ob.length > 1)?ob[1].toLowerCase():'asc';
			}
			return {orderBy: orderBy, asc:asc};
		},
		events: function($c, c) {;
			var controller = this;
			$c.click(function(e) {	
				var target = e.target;
				while (target  && target.tagName && (target.tagName.toUpperCase() != 'A'))
					target = target.parentNode;
				if (target) {
					if (target.id ===  (c.id + '_sort')) {
						var order = that.controls.SdataSort._getOrderBy(controller);
						var  lv = $('#'+c.id + '_lv');
						if (lv && lv.length) {
							var html = [];
							html.push('<li data-role="list-divider">'+$helpers.locale().ui.sort+'</li>');
							c.options.items.forEach(function(cd) {
								var icon = (cd.value === order.orderBy)?((order.asc === 'asc')?"arrow-d":"arrow-u"):"false";
								html.push('<li data-icon="'+ icon +'"><a href="#" data-field-name="'+ cd.value+ '">'+$helpers.htmlEncode(cd.title)+'</a></li>');
							});
							lv.html(html.join(''));
							lv.listview("refresh");
							
						}
					} else if (target.id ===  (c.id + '_filter')) {	
						//
						if (that.openFilterDlg) { // declared on jquery.smobile.controls.filter.js
							//
							that.openFilterDlg(controller, controller.extraData.filters);
						}
					}
				}
			});
			var  $list = $('#'+c.id + '_lv');
			$list.click(function(e) {	
				e.preventDefault();
				if (e && e.target) {
					var target = e.target;
					while (target && target.tagName && (target.tagName.toUpperCase() !== 'A'))
						target = target.parentNode;
					if (!target) return;
					var p = $(target).attr("data-field-name");
					var url = controller.options.url; 
					var order = that.controls.SdataSort._getOrderBy(controller);
					if (order.orderBy === p)  
						order.asc = (order.asc==='asc')?"desc":"asc";
					else {
						order.orderBy = p;
						order.asc = 'asc';
					}
					order.orderBy = order.orderBy + ' ' + order.asc;
					url.query.orderBy = order.orderBy;
					$sdata.getUri(url);
					$('#'+c.id+'_sortpopup').popup('close');
					$.mobile.loading('show', {theme: "a", text: $helpers.locale().ui.loading});
					$sdata.execURL(url.uri, {
						error: function(data) {
							$.mobile.loading('hide');
						},
						success: function(cd) {
							$.mobile.loading('hide');
							if (cd) {
								// refresh sdatalist && footer
								controller.data = cd;	
								controller.doRefresh();
							}
							
						}
					});  			
					
				}
				
			});
			
		}
		
	};
	
})(jQuery);    
