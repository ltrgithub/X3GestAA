"use strict"; 
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	var $proto = $.proto;
	that.controls = that.controls || {};
	that.controls.Lookup={
		createLookup: function(controller, c) {
			var options= c.data || {};
			var page = controller.getPageData();
			var cp = $proto.getProto(page, options.bind);
			if (options.$lookupurl) options.$lookupurl = options.$lookupurl + "&control="+$helpers.encodeURIComponent(c.id);
			var html = ['<div data-role="fieldcontain" id="'+c.id+'">'];
			that.ui.addErrors(controller, options.bind, c.id, html);
			html.push('<label id="'+c.id+'_l" class="ui-input-text" for="'+c.id+'_i">');
			if (options.$lookupurl) {
				var cd = {url: options.$lookupurl};
				that._addLink(html, cd, controller, function() {
					html.push($helpers.htmlEncode(options.label)+(options.$isMandatory?"*":""));
				});	
			} else html.push($helpers.htmlEncode(options.label)+(options.$isMandatory?"*":""))
			html.push('</label>');
			html.push('<input ');
			html.push('type="text" name="'+c.id+'" id="'+c.id+'_i" ');
			html.push('value="');
			var cv = controller.getValue(options.bind, null, null);	
			var val = "";
			var isuuid = $proto.useUuid(cp);
			if (isuuid && !cv) {
				//val = "";
			} else if (cv && cv.hasOwnProperty("$value")) 
				val = cv.$value;
			else {
				if (cp.$value) 
					val = $proto.parseExpression(cp.$value, {data: controller.exprData(cv), $prototype: cp},"$value");
				else
					val = $proto.parseExpression(cp.$key, {data: controller.exprData(cv), $prototype: cp},"$key");
			}
			html.push($helpers.htmlEncode(val || ""));
			html.push('"');
			html.push('/>');
			html.push('</div>');
			options.$lookup = 1;
			return { 
				html: html.join(''),
				bind: options.bind,
				action: options.action,
				options: options
			};
		},	
		refresh: function(controller, options, $c, id) {
			var $input = $( '#'+ id + "_i");
			if (options.refreshHandler) 
				return options.refreshHandler(controller,$input, options.bind);
			
			var page = controller.getPageData();
			// proto of reference
			var cp = $proto.getProto(page, options.bind); 
			// value of reference
			var ivalue = $proto.parseExpression(cp.$value, {data: controller.exprData(controller.getValue(options.bind, null, null)), $prototype: cp},"$value") || "";
			$input.val(ivalue);
			that.ui.refreshErrors(controller, options.bind, id);
		},
		setValue: function(controller, c, value, next) {
			if (c.options.setValueHandler) 
				return c.options.setValueHandler(controller,value, next);
			//value is the selected ressource
			//var $input = $( '#'+ c.id + "_i");
			var page = controller.getPageData();
			// proto of reference
			var cp = $proto.getProto(page, c.options.bind); 
			// value of reference
			var cv = $proto.getRefFromValue(value, cp);
			var setvalue = true;
			var newkey = "", oldkey = "";
			var isuuid = $proto.useUuid(cp);
			// calculate new $key
			if (isuuid) 
				newkey = cv.$key || cv.$uuid;
			else {	
				cp.noRef = true;
				newkey = $proto.parseExpression(cp.$key, {data: $proto.exprData(cv), $prototype: cp},"$key");
				delete cp.noRef;
			}
			// calculate old $key
			var ov = controller.getValue(c.options.bind, null, null);
			if (isuuid) 
				oldkey = (ov?(ov.$key || ov.$uuid):"");
			else
				oldkey = $proto.parseExpression(cp.$key, {data: controller.exprData(ov), $prototype: cp},"$key");
			setvalue = (oldkey != newkey);
			
			if (setvalue) {
				$proto.setRef(cv,cp,controller.exprData(), c.options.bind);
				controller.notifyChange();
				controller.setNeedRefresh();
				return next();
			}
			return next();
		},
		sync: true,
		handler: function(c, after, layoutClass) {
			return after(that.controls.Lookup.createLookup(this, c));
		},
		events: function($c, c) {
			var controller = this;
			var $input = $c.find( '#'+ c.id + "_i");
			$input.blur(function() {
				if (c.options.exitHandler) {
					return c.options.exitHandler(controller, $input.val());
				}
				if (c.bind) {
					var _aftercchange = controller.afterChangeHnd(c);
					controller.checkChange(c.id, {$value: $input.val()}, _aftercchange);
				}
			});
		}
	};
	that.controls.Lookup.checkValue = that.controls.Edit.checkValue;
	
})(jQuery);