(function($) {
	'use strict';
	var that = $.smobile;
	that.controls = that.controls || {};
	that.controls.ArrayRef={
		_createItem: function(html, cp, value, index, controller) {
			html.push('<li>'); 
			html.push('<a href="#">'); 
			var ioptions = that.controls.types.addReference(cp, value, controller);
			html.push($.helpers.htmlEncode(ioptions.value));
			html.push('</a>');
			html.push('<a href="#" ');
			html.push('data-action="'+index+ '"');				
			html.push('>');
			html.push('</a>'); 
			html.push('</li>');
		
		},
		createArrayRef: function(controller, c, fieldData) {
			if (fieldData == null)  fieldData = controller.getValue(c.data.bind, null, []);
			var options= c.data || {};
			var page = controller.getPageData();
			var cp = $.proto.getProto(page, options.bind);
			var  html = [];
			//html.push('<div class="ui-body">');
    		html.push('<ul id="'+c.id + '" data-role="listview"');
			html.push(' data-inset="true" data-split-icon="delete"');			
			$.helpers.addJqmData(options,html); 
			html.push('>');
			html.push('<li data-role="list-divider">'+ options.title + '</li>');
			fieldData.forEach(function(value, index){
				that.controls.ArrayRef._createItem(html, cp, value, index, controller)
			});
			html.push('<li id="'+c.id + '_last">');
			html.push('<div class="ui-block">');
			html.push('<a id="'+c.id+'_new" data-role="button" data-shadow="false" data-corners="false" data-mini="true" data-theme="d" data-icon="plus" data-iconpos="left" ');
			html.push('href="');
			html.push(that._urlHref(options.$lookupurl, controller));
			html.push('">');
			html.push(that.locale().ui.add_item);
			html.push('</a>');
			html.push('</li>');
			html.push('</ul>');
			//html.push('</div>');
			options.$lookup = 1;
			return { 
				html: html.join(''),
				bind: options.bind,
				action: options.action,
				options: options
			};
		},	
		setValue: function(controller, c, value, next) {
			var $ul = $( '#'+ c.id + "");
			var page = controller.getPageData();
			var cp = $.proto.getProto(page, c.options.bind);
			var cv = $.proto.getRefFromValue(value, cp);
			var isuuid = $.proto.useUuid(cp);
			var newkey = "", oldkey="";
			if (cv) {
				newkey = cv.$key;
				if (!newkey) newkey = $.proto.parseExpression(cp.$key, {data: controller.exprData(cv), $prototype: cp},"$key");
			}
			var fieldData = controller.getValue(c.options.bind, null, []);
			var i = fieldData.length;
			
			while (i--) {
				var co = fieldData[i];
				if (isuuid) {
					if (co.$uuid === cv.$uuid) return next();
				} else 	{
					oldkey = $.proto.parseExpression(cp.$key, {data: controller.exprData(co), $prototype: cp},"$key");
					if (oldkey === newkey) return next();
				}				
			}
			var nd = {};
			if (isuuid) {
				nd.$iuuid = cv.$uuid;
				nd.$key = cv.$key;
			}
			cv = $.proto.setArrayRef(cv,cp,controller.exprData(nd), c.options.bind);
			fieldData.push(cv);
			controller.setData(c.options.bind, fieldData);
			controller.notifyChange();
			var html = []
			that.controls.ArrayRef._createItem(html, cp, cv, fieldData.length-1, controller);
			var $li = $( '#'+ c.id + "_last");
			$li.before(html.join(''));
			$ul.listview("refresh");
			return next();
		},

		handler: function(c, after, layoutClass) {
			return after(that.controls.ArrayRef.createArrayRef(this, c));
		},
		events: function($c, c) {
			var controller = this;
			var $ul = $c;
			$ul.click(function(e) {
				if (e && e.target) {
					var target = e.target;
					// lift up 2 levels
					if (target.tagName.toUpperCase() != 'A') target = target.parentNode;
					if (target.tagName.toUpperCase() != 'A') target = target.parentNode;
					var p = $(target).attr("data-action");
					if (p && (p != '')) {
						p = parseInt(p, 10); 
						var fieldData = controller.getValue(c.options.bind, null, []);
						fieldData.splice(p,1);
						controller.notifyChange();
						$($ul.children()[p+1]).remove();
					}
				}
			});
		}
	};
	
})(jQuery);