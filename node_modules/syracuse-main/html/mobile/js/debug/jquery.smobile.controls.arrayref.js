"use strict"; 
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	var $proto = $.proto;
	that.controls = that.controls || {};
	that.controls.ArrayRef={
		_createItem: function(html, cp, value, index, controller, field) {
			html.push('<li class="s-m-slist-item" data-icon="s-noicon" data-corners="false"  data-iconpos="right">'); 
			html.push('<a href="#">'); 
			var ioptions = that.controls.types.addReference(cp, value, controller, field, true);
			html.push($helpers.htmlEncode(ioptions.value));
			if (ioptions.title) {
				html.push('<span class="s-m-linkdesc"> ' +$helpers.htmlEncode(ioptions.title) + '<span>'); 
			}
			html.push('</a>');
			html.push('<div class="s-m-custom-icon" data-action="delete" data-action-param="'+index+'"><div data-action-param="'+index+'" data-action="delete" class="ui-icon ui-icon-s-delete-dark"></div></div>');
			html.push('</li>');
		
		},
		refresh: function(controller, options, $c, id) {	
			var fieldData = controller.getValue(options.bind, null, []);
			var page = controller.getPageData();
			var cp =$proto.getProto(page, options.bind);
			var  html = [];
			if (!options.$isTitleHidden)
				html.push('<li data-role="list-divider">'+ options.title + '</li>');
			fieldData.forEach(function(value, index){
				that.controls.ArrayRef._createItem(html, cp, value, index, controller, options.bind, true);
			});
			var save =$('#' +id +'_last').detach();
			$c.html(html.join(''));
			$c.append(save);
			$c.listview("refresh");
			
		},
		
		createArrayRef: function(controller, c, fieldData) {
			if (fieldData == null)  fieldData = controller.getValue(c.data.bind, null, []);
			var options= c.data || {};
			var page = controller.getPageData();
			var cp = $proto.getProto(page, options.bind);
			if (options.$lookupurl) options.$lookupurl = options.$lookupurl + "&control="+$helpers.encodeURIComponent(c.id);
			var  html = [];
    		html.push('<ul id="'+c.id + '" class="s-m-list" data-role="listview" data-inset="true"');
			//html.push(' data-split-icon="delete" data-split-theme="d"');			
			$helpers.addJqmData(options,html); 
			html.push('>');
			if (options.title && !options.$isTitleHidden)
				html.push('<li data-role="list-divider">'+ options.title + '</li>');
			fieldData.forEach(function(value, index){
				that.controls.ArrayRef._createItem(html, cp, value, index, controller, options.bind)
			});
			html.push('<li id="'+c.id + '_last">');
			html.push('<div style="text-align: right">');
			html.push('<a id="'+c.id+'_new" class="s-m-min40 ui-btn-right" data-role="button" data-mini="true" data-inline="true" data-theme="f" data-icon="plus" data-iconpos="top" ');
			html.push('href="');
			html.push(that.ui.urlHref(options.$lookupurl, controller));
			html.push('">');
			html.push($helpers.locale().ui.add_item);
			html.push('</a>');
			html.push('</div>');
			html.push('</li>');
			html.push('</ul>');
			
			that.ui.addLinks(c.id, controller, html, cp, c.data.bind);
			options.$lookup = 1;
			return { 
				html: html.join(''),
				bind: options.bind,
				action: options.action,
				options: options
			};
		},	
		

		setValue: function(controller, c, value, next) {
			var $ul = $( '#'+ c.id + "");
			var page = controller.getPageData();
			// proto of reference
			var cp = $proto.getProto(page, c.options.bind); 
			// value of reference
			var cv = $proto.getRefFromValue(value, cp);
			var setvalue = true;
			var newkey = "", oldkey = "";
			var isuuid = $proto.useUuid(cp);
			// calculate new $key
			if (isuuid) 
				newkey = cv.$key || cv.$uuid;
			else {	
				cp.noRef = true;
				newkey = $proto.parseExpression(cp.$key, {data: $proto.exprData(cv), $prototype: cp},"$key");
				delete cp.noRef;
			}
			var fieldData = controller.getValue(c.options.bind, null, []);
			var i = fieldData.length;
			while (i--) {
				var co = fieldData[i];
				if (isuuid) {
					oldkey = co.$key || co.$uuid;
					if (oldkey === newkey) return next();
				} else 	{
					oldkey = $proto.parseExpression(cp.$key, {data: controller.exprData(co), $prototype: cp},"$key");
					if (oldkey === newkey) return next();
				}				
			}
			if (cp.$protoparent.$maxItems && fieldData.length >= cp.$protoparent.$maxItems) return next();	
			var nd = $proto.setArrayRef(cv,cp,controller.exprData(), c.options.bind);
			fieldData.push(nd);
			controller.setData(c.options.bind, fieldData, null)
			controller.notifyChange();
			controller.setNeedRefresh();
			return next();	
		},

		handler: function(c, after, layoutClass) {
			return after(that.controls.ArrayRef.createArrayRef(this, c));
		},
		events: function($c, c) {
			var controller = this;
			var $ul = $c;
			$ul.click(function(e) {
				var target = e.target;
				//var target = $helpers.getTarget(e);
				//if (!target) return;
				var p = $(target).attr("data-action");
				if (p && (p === 'delete')) {
					p = parseInt($(target).attr("data-action-param"), 10); 
					e.preventDefault();
					p = parseInt(p, 10); 
					var fieldData = controller.getValue(c.options.bind, null, []);
					fieldData.splice(p,1);
					controller.notifyChange();
					$($ul.children()[p+1]).remove();
				}
			});
		}
	};
	
})(jQuery);