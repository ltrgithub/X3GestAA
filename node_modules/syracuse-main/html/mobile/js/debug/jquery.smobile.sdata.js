/*
*/

(function($) {
	var that = $.sdata || {};
	$.sdata = that;
	var _status = {
		ORIGINAL: 0,
		CREATED: 1,
		MODIFIED: 2,
		DELETED: 3
	};
	var _consts = {
		vnd_sage: "syracuse"
	};
	that.sdataHost = window.location.protocol + "//" + window.location.host;
	that.sdataAdmin = that.sdataHost + '/sdata/syracuse/collaboration/syracuse/dashboardDefs/$service/mobilePortlets';
	that.store = function(url) {
		return false;
	};
	that.$url = function(data, url) {
		url = url || data.$url;
		if (data.$baseURI && (url.indexOf(data.$baseURI)<0))
			return data.$baseURI + url;
		else
			return url;
	};
	that.$purl = function(url) {
		url = url || "";
		var burl = that.config.baseUrl;
		if (burl && (url.indexOf(burl)<0))
			return burl + url;
		else
			return url;
	};
	that.authName = "none";
	that.authModule={
		authName: "none",
		checkConnected: function(options) {
			return options.success();
		},
		connect: function(options) {
			return options.success();
		},
		connectedUser: function() {
			return {id: "", caption: ""};
		},
		disconnect: function(options) {
			return options.success();
		}
	};
	var _sdata_types = {
		ENTITY: 0,
		TEMPLATE: 1,
		UNKNOWN: 10
	};
	
	that.STATUS = _status;
	that.TYPES = _sdata_types;
	that.options = {
		statefulServerPrtocol: true
	};
	that.sdataActions = {
		"view": {id: "view", representation: "$view"},
		"edit": {id:"edit", representation: "$edit"},
		"new": {id:"new", representation: "$edit"}
	};
	that.funcs = {
		yearMonth: function(value) {
			return $.helpers.date.str2dateym(value);
		},
		yearMONTH: function(value) {
			return $.helpers.date.str2dateYM(value);
		},
		thisMonth: function(value) {
			var dd = $.helpers.date.isoToDate(value);
			var yy = dd.getFullYear(), mm = dd.getMonth(), day = 1;
			var start = new Date(yy, mm+1, 1, 0, 0, 0, 0);
			var end =  new Date(new Date(yy, mm+2, 1, 0, 0, 0, 0) - 1/24/60/60/1000);
			return '@' + start.toISOString() + '@ and @' + end.toISOString() + '@';
		}, 
		asString: function(value) {
			return "'" + value.replace("'", "''") + "'";
		}
		
	};
	
	var _rID = /^(.*)\(\'(.*)\'\)$/i;
	that.config = {
		id : "",
		baseUrl: "",
		resources: {}
		
	};
	
	
	var _private = {
		groups: {
			$count: function() {
			},
			$sum: function() {
			}
		},
		funcs: {
			month: function(value) {
				var date = $.helpers.date.isoToDate(value);
				return date.getMonth();
			},
			year: function(value) {
				var date = $.helpers.date.isoToDate(value);
				return date.getFullYear()
			}
		},
		_parseQuery: function(query) {
			var params = {};
			if (query) {
				query.replace(/([^&=;]*)=?([^&;]*)/g, function($0, $1, $2 ) {
					if ($1) params[$1] = decodeURIComponent($2);
				});
			}
			return params;
		},
		
		_execSDATA: function (url, options) {
			if (url.createActivity || url.editActivity) {
				/* 
				 *  New edit activity  -- CREATE OR EDOIT
				 *  Ex:   http://host/sdata/app/-/-/salesOrders/$template/$workingCopies?trackingId=xxx
				 *  Ex:   http://host/sdata/app/-/-/salesOrders('id')/$workingCopies?trackingId=xxx
				 */
				return _private._startEditActivity(url, options);
			} else if (url.entity == $.proto.sdataKey.workingCopies) {
				
				return _private._loadDraft(url, options);
			} else {
				_private.makeURL(url);
				return that.sendSDataRequest(url, options);
			}
		},
		makeURL: function (url) {
			var u = [url.base, url.application, '/' +url.contract, '/'+ url.dataset];
			u.push('/'+ url.entity);
			if (url.id) u.push("('"+url.id+"')");
			if (url.template) u.push("/$template");
			if (url.createActivity) u.push("/" + $.proto.sdataKey.workingCopies);
			if (url.editActivity) u.push("/" + $.proto.sdataKey.workingCopies);
			if (url.createActivity || url.editActivity) {
				url.query =  url.query || {};
				if (!url.query.trackingId) url.query.trackingId = $.helpers.uuid();
			}
			if (url.query) {
				var keys = Object.keys(url.query);
				if (keys) keys.forEach(function (value, index) {
					if (index) u.push('&'); else u.push('?');
					u.push(value + '='+ encodeURIComponent(url.query[value]));
				});
			}
			url.uri = u.join('');
		},
		logSdata:  function(desc, url) {
			if ($.helpers.log) {
				console.log(desc);
				console.log((url.method || "GET") + ": " + url.uri);
			}
		},
		_protoFromschema: function(template) {
			var res = {};
			if (template) {
				Object.keys(template.properties).forEach(function(propName) {
					var ps = template.properties[propName];
					if (ps.type == "string") 
						res[propName] = "";
					else if (ps.type == "integer")
						res[propName] = 0;
					else if (ps.type == "decimal")
						res[propName] = 0.0;
					else if (ps.type == "boolean")
						res[propName] = false;
					else if (ps.type == "object") {
						/* composition */
						res[propName] = _private._protoFromschema(ps);
					} else if (typeof ps.type == "object") {
						/* reference */
						if (ps.type.$ref) 
							res[propName] = null;
					}
						
				});
				
			}	
			return res;
			
		},
		_loadDraft: function(url, options) {
			that.loadDraft(url.id, function(draft) {
				if (!draft) return options.success(null, {status: 404});
				var response = draft.data;
				response.$info = {original_url:  draft.original_url}
				return options.success(response, {status: 200});
			});
			
		},
		/**
		* @param {{$title: string, $ui:  string, $type: string}} options
		*/	 
		_startEditActivity: function(url, options) {
			_private.makeURL(url, true);
			_private.logSdata("Virtual operation: Start edit activity ", url);
			/*  Simulate  stateful server  protocol */
			var newUrl = $.extend(newUrl, url);
			var sendURL  = $.extend(true, {}, url);
			delete sendURL.query.trackingId;
			if (sendURL.createActivity) {
				//SEND  GET  /$template
				delete sendURL.createActivity;
			} else if (sendURL.editActivity) {
				//SEND  GET on entity(id)
				delete sendURL.editActivity;
			}
			
			_private._execSDATA(sendURL, {
				success: function(data, headers) {
					sendURL.query = {representation: sendURL.query.representation};
					_private.makeURL(sendURL, true);
					var ourl = sendURL.uri;
					if (headers.status > 300) {
						if ((headers.status == 404) && sendURL.template) {
							$.helpers.pushException({message: $.helpers.format(that.locale.sdata.S404, [newUrl.uri])}, that.locale.actions.syncronize);
						}	
						return options.success(null, headers);
					}
					if (!data.$key && !data.$uuid) data.$uuid = $.helpers.uuid();
					//	
					data.$trackingId = url.query.trackingId;
					sendURL.entity=$.proto.sdataKey.workingCopies;
					sendURL.template=false;
					sendURL.id = url.query.trackingId;
					_private.makeURL(sendURL);
					if (options.$init) {
						$.extend(data, options.$init); //TODO
					}
					var draftData = {
						id: data.$trackingId, 
						data: data,
						original_data: $.extend(true, {}, data),
						representation: sendURL.query.representation, 
						original_url: ourl 
					};
					delete draftData.original_data.$trackingId;
					that.createDraft(draftData, function(draft) {
						var response = draft.data;
						//save original data
						odata =$.extend(true, {}, response);
						response.$info = {original_url: draft.original_url};
						return options.success(response, {status:201, location: sendURL.uri});
					});
				}
			});
			
		},	
		_parseSE: function(param){
			var res = {prefix:param, content: ""};
			var match = _rID.exec(param);
			if (match && (match.length == 3)) {
				res.prefix = match[1];
				res.content = match[2]; 
			}
			return res;
			
		},
		parseSDataURL:function(url) {
			var a= url.split("/sdata/"), res = null, s;
			if (a.length == 2) {
				res = {base: a[0] +"/sdata/",   query: {}, sdata: "sdata", origUri: url}
				a = a[1].split("?");
				if (a.length == 2) 
					res.query= _private._parseQuery(a[1]);
				a = a[0].split('/');
				if (a.length < 3) return null;
				res.application = a[0];
				res.contract = a[1];
				res.dataset = a[2];
				if (a.length < 4) return res;
				res.entity = a[3];
				var p = _private._parseSE(res.entity);
				res.entity = p.prefix;
				res.id = p.content; 
				if (a.length > 4) {
					s = a[4]
					if (s == '$template')  
						res.template=true;
					else if  ((s == $.proto.sdataKey.workingCopies) && res.id) 
						res.editActivity=true;
				}
				if (a.length > 5) {
					s = a[5];
					if (res.template && (s == $.proto.sdataKey.workingCopies)) 
						res.createActivity = true;
				}
			} 
			return res;
		}
	};
	that.initFromSchema= function(schema) { return _private._protoFromschema(schema); };
	that._cleanHeaders = function(value) {
		if (value) {
			delete value.$httpMethod;
			delete value.$httpStatus;
			delete value.$httpMessage;
			delete value.$uuid;
		}
	};
	that.loadAuth = function(after) {
		if (that.authName == that.authModule.authName) return after();
		var url = "js/auth/jquery.smobile.auth." + that.authName+".min.js";
		$.ajax({
			url: url ,
			dataType: "script",
			success: function() {
				after();
			},
			error: function(jqXHR, textStatus, errorThrown) {
				$.helpers.pushAjaxError(jqXHR, textStatus, errorThrown, url, "GET");
				after();
			}
		});
	};
	that.execBatch = function(syncData, options, resync) {
		if (!syncData && !resync) return options.success();
		that.loadAuth(function() {
			that.authModule.checkConnected({
				success: function() {return that._execBatch(syncData, options, resync);},
				fail : function() {
					that.authModule.connect({
						success: function() { return that._execBatch(syncData, options, resync); },
						fail: function() {if (options.success) options.success();}
					});
				}
			});
		});
	};
	that._execBatch = function(syncData, options, resync) {
		$.mobile.showPageLoadingMsg("a", $.helpers.messages.sending);
		var _dosync = function(opt) {
			var urls = [];
			var after = function() {if (opt.success) return opt.success();};
			
			Object.keys($.sdata.config.entities).forEach(function(en) {
				var value = $.sdata.config.entities[en];
				if (!value.localStore) return;
				var obj = {type: "entity"};
				if (value.template) {
					obj.url = $.sdata.config.baseUrl + en + '/$template';
					obj.entity = en;
					obj.onlyOne = true;
					urls.push(obj);
					obj = {type: "entity"};
				}
				obj.url = $.sdata.config.baseUrl +  en;
				urls.push(obj);
			}); 
			var insertData= [], ci=null, cd=null, fail = false;
			$.helpers.each(urls, function(value, index, next) {
				if (fail || $.helpers.hasErrors()) {
					fail = true;
					return next();
				}
				$.sdata.GET(value.url, function(data) {
					if (fail || $.helpers.hasErrors()) {
						fail = true;
						return next();
					}
					
					if (!ci) {
						ci = value;
						cd = data;
						that.initData(value, cd, {
							success: function() {
								ci = null;
								cd = null;
								next(); 
							},
							fail: function() {
								fail = true;
								ci = null;
								cd = null;
								next();
							}
						});				
					} else {
						insertData.push({value: value, data: data});
						return next();
					}
				}, {"Cache-Control":"no-cache", "Pragma": "no-cache"});
			}, function() {
				if (!fail) {
					return that.initData(insertData, null, {
						success: function() {
							if (after) after();
						},
						fail: function() {
							if (after) after();
						}
					});				
					
				} else {
					if (after) after();
				}
			},3);			
			return;
		};
		var _resync = function(opt) {
			if (!$.helpers.hasErrors() && resync) {
				return _dosync({ success: function() {
					$.mobile.hidePageLoadingMsg();
					if (opt.success) return opt.success();
				}});
			} else {
				$.mobile.hidePageLoadingMsg();
				if (opt.success) return opt.success();
				return;
			}
			
		};
		if (!syncData)  {
			return _resync(options);
		}
		$.helpers.each(Object.keys(syncData), function(entity, ii, doNext) {
			var res = syncData[entity];
			var entity_url = that.config.baseUrl + entity; 
			var toSend =  {
				$url: entity_url + "/$batch",
				$resources: []
				
			};
			var infos = [];
			res.forEach(function(value) {
				var d;
				if (value.$info.status == $.sdata.STATUS.CREATED) {
					infos.push(value.$info);
					d = value;
					d.$httpMethod= "POST";
					d.$url = entity_url;
					delete d.$info;
				} else if (value.$info.status == $.sdata.STATUS.MODIFIED) {
					infos.push(value.$info);
					d = value;
					d.$httpMethod= "PUT";
					d.$httpifMatch = d.$etag;
					delete d.$info;
				} else if (value.$info.status == $.sdata.STATUS.DELETED) {
					infos.push(value.$info);
					d = {};
					d.$httpMethod= "DELETE";
					d.$httpifMatch = value.$etag;
					d.$url = value.$url;
				}
				if (d) toSend.$resources.push(d);
			});
			if (toSend.$resources.length) {
				$.ajax({
				  headers: {
					"Accept": "application/json"
				  },
				  type: "POST",
				  dataType: "json",
				  contentType: "application/json; charset=utf-8",
				  url: toSend.$url,
				  data: JSON.stringify(toSend),
				  success: function(cd){
					if (cd.$resources) {
						$.helpers.each(cd.$resources, 
							/**
							* @param {{$httpMethod: string, $httpStatus: string, $uuid: string}} value
							*/	 
							function(value, index, next) {
							var send = toSend.$resources[index];
							if (send.$httpMethod == "PUT") {
								if (value.$httpStatus == 200) {
									//PUT was successful. Resource has been updated.
									that._cleanHeaders(value);
									return $.sdata.updData(that.$url({$baseURI: that.config.baseUrl}, value.$url), value, {$delete: true},  {
										success: next, 
										fail: next
									});
								} else if (value.$httpStatus == 400) {
									//Generic status for consumer side error.Client MUST modify the request before resubmitting.
									that._cleanHeaders(value);
									errors = $.helpers.extractErrors(value, value.$httpMessage);
									$.helpers.pushException({message: errors.message}, $.helpers.messages.sdata_m_before);
									that._cleanHeaders(send);
									send.$etag = value.$etag;
									value.$info = {last_error: errors.message, ui: infos[index].ui};
									return $.sdata.updData(that.$url({$baseURI: that.config.baseUrl}, value.$url), value, {$delete: true, oldValue:send}, {
										success: next,
										fail : next
									});
								} else if (value.$httpStatus == 410) {
									errors = $.helpers.extractErrors(value, value.$httpMessage);
									$.helpers.pushException({message: errors.message}, $.helpers.messages.sdata_410);
									that._cleanHeaders(value);
									return $.sdata.delData(that.$url({$baseURI: that.config.baseUrl}, send.$url), {success: next, fail: next});
									
								} else if (value.$httpStatus == 412) {
									//The If-Match header was provided but does not match the state of the resource on the provider side.
									errors = $.helpers.extractErrors(value, value.$httpMessage);
									$.helpers.pushException({message: errors.message}, $.helpers.messages.sdata_412);
									that._cleanHeaders(value);
									return $.sdata.updData(that.$url({$baseURI: that.config.baseUrl}, value.$url), value, {$delete: true}, {
										success: next,
										fail : next
									});
								}  else if (value.$httpStatus == 500) {
									errors = $.helpers.extractErrors(value, value.$httpMessage);
									return $.sdata.updData(that.$url({$baseURI: that.config.baseUrl}, send.$url), {$info:{last_error: errors.message}}, {$updateInfo: true}, {success: next, fail:next});
									
								} else if (value.$httpStatus == 503) {
									//Transient provider error. Client MAY retry the request.
									errors = $.helpers.extractErrors(value, value.$httpMessage);
									$.helpers.pushException({message: errors.message}, $.helpers.messages.sdata_503);
								}
								
							} else if (send.$httpMethod == "POST") {
								var old = value.$uuid, errors;
								var purl = $.sdata.parseSdataUri(that.$url({$baseURI: that.config.baseUrl}, value.$url));
								purl.id = old;
								if (value.$httpStatus == 201) {
									//POST was successful. Resource has been created.
									that._cleanHeaders(value);
									return $.sdata.updData($.sdata.getUri(purl), value, {$delete: true}, {success: next, fail:next});
								} else if (value.$httpStatus == 202) {
									//An asynchronous POST was accepted. 
									$.helpers.pushException({message: $.helpers.messages.sdata_apost_notimplemented});
								} else if (value.$httpStatus == 400) {
									//Generic status for consumer side error.
									//Client MUST modify the request before resubmitting.
									errors = $.helpers.extractErrors(value, value.$httpMessage);
									$.helpers.pushException({message: errors.message}, $.helpers.messages.sdata_m_before);
									return $.sdata.updData($.sdata.getUri(purl), {$info:{last_error: errors.message}}, {$updateInfo: true}, {success: next, fail:next});
								}  else if (value.$httpStatus == 403) {
									//Consumer is not authorized to create the resource.
									errors = $.helpers.extractErrors(value, value.$httpMessage);
									$.helpers.pushException({message: errors.message}, $.helpers.messages.sdata_c_canceled);
									return $.sdata.undoUpdate(that.$url({$baseURI: that.config.baseUrl}, send.$url), next);									
									// delete
								}  else if (value.$httpStatus == 404) {
									//One of the elements specified in the URL does not exist. For example, application name, contract name, or resource kind.
									errors = $.helpers.extractErrors(value, value.$httpMessage);
									return $.sdata.updData($.sdata.getUri(purl), {$info:{last_error: errors.message}}, {$updateInfo: true}, {success: next, fail:next});
								}  else if (value.$httpStatus == 409) {
									//The resource cannot be created because of a conflict with existing resources. For example a violation on a unique index.
									errors = $.helpers.extractErrors(value, value.$httpMessage);
									$.helpers.pushException({message: errors.message}, $.helpers.messages.sdata_m_before);
									return $.sdata.updData($.sdata.getUri(purl), {$info:{last_error: errors.message}}, {$updateInfo: true}, {success: next, fail:next});
									//Delete resource	
								} else if (value.$httpStatus == 503) {
									//Transient provider error. Client MAY retry the request.
									errors = $.helpers.extractErrors(value, value.$httpMessage);
									$.helpers.pushException({message: errors.message}, $.helpers.messages.sdata_503);
								}  else if (value.$httpStatus == 500) {
									errors = $.helpers.extractErrors(value, value.$httpMessage);
									return $.sdata.updData($.sdata.getUri(purl), {$info:{last_error: errors.message}}, {$updateInfo: true}, {success: next, fail:next});
								}
								
							}  else if (send.$httpMethod == "DELETE") {
								if ((value.$httpStatus == 200) || (value.$httpStatus == 410)) {
									//DELETE was successful. Resource has been deleted.
									return $.sdata.delData(that.$url({$baseURI: that.config.baseUrl}, send.$url), {success: next, fail: next});
								} else if (value.$httpStatus == 400) {
									//Generic status for consumer side error.
									//Client MUST modify the request before resubmitting.
									that._cleanHeaders(value);
									errors = $.helpers.extractErrors(value, value.$httpMessage);
									$.helpers.pushException({message: errors.message}, $.helpers.messages.sdata_m_before);
									errors = $.helpers.extractErrors(value, value.$httpMessage);
									return $.sdata.updData(that.$url({$baseURI: that.config.baseUrl}, send.$url), {$info:{last_error: errors.message}}, {$updateInfo: true}, {success: next, fail:next});
								}  else if (value.$httpStatus == 403) {
									//Consumer is not authorized to create the resource.
									errors = $.helpers.extractErrors(value, value.$httpMessage);
									$.helpers.pushException({message: errors.message}, $.helpers.messages.sdata_d_canceled);
									return $.sdata.undoUpdate(that.$url({$baseURI: that.config.baseUrl}, send.$url), next);		
								} else if (value.$httpStatus == 412) {
									//The If-Match header was provided but does not match the state of the resource on the provider side.
									errors = $.helpers.extractErrors(value, value.$httpMessage);
									$.helpers.pushException({message: errors.message}, $.helpers.messages.sdata_d_412);
									that._cleanHeaders(value);
									return $.sdata.updData(that.$url({$baseURI: that.config.baseUrl}, value.$url), value, {$delete: true}, {
										success: next,
										fail : next
									});
								} else if (value.$httpStatus == 500) {
									//Generic status for consumer side error.
									//Client MUST modify the request before resubmitting.
									that._cleanHeaders(value);
									errors = $.helpers.extractErrors(value, value.$httpMessage);
									$.helpers.pushException({message: errors.message}, $.helpers.messages.sdata_m_before);
									errors = $.helpers.extractErrors(value, value.$httpMessage);
									return $.sdata.updData(that.$url({$baseURI: that.config.baseUrl}, send.$url), {$info:{last_error: errors.message}}, {$updateInfo: true}, {success: next, fail:next});
								} else if (value.$httpStatus == 503) {
									//Transient provider error. Client MAY retry the request.
									errors = $.helpers.extractErrors(value, value.$httpMessage);
									$.helpers.pushException({message: errors.message}, $.helpers.messages.sdata_503);
								}
														
							}	
							next();
							
						}, function() {
							doNext();
						});
					
					} else doNext();
				  },
				  error: function(jqXHR, textStatus, errorThrown) {
					$.helpers.pushAjaxError(jqXHR, textStatus, errorThrown, toSend.$url, "POST");
					doNext();
				  }
				});
			} else doNext();
		}, function() { 	
			return _resync(options);
		});
	};
	
	that.createDraft = function(data, cb) {
		cb(data);
	};
	that.saveDraft = function(draftid, data, cb) {
		cb();
	};
	that.deleteDraft = function(workingCopy_url, options) {
		options.success();
	};
	that.undoUpdate = function(url, cb) {
		cb();
	};
	that.deleteDataByDraft = function(url, cb) {
		cb();
	};
	that.updateDraft = function(draftURL, data, options) {
	};
	that.loadDraft = function(draftURL, cb) {
		cb(null);
	};
	that.initData = function(config, data, options) {
		options.success();
	};
	that.updData = function(oldURL, data, op, options) {
		options.success();
	};
	that.getSyncData = function(cb) {
		cb(null);
	};
	that.execWhere = function(dataContext, exp) {
		return true;
	};
	that.parseWhere = function(exp, entity, ecache) {
		return null;
	};
	that.groupFunc = function(fn) {
		if (!fn) return false;
		return (_private.groups[fn] != null);
		
	};	
	that._parseProp = function(p, func) {
		p = p.trim();
		var res = {name: p, func: null};
		if (!func) return res;
		if (p[p.length-1] == ")") {
			var i = p.indexOf("(");
			if (i > 0) {
				res.func = p.substr(0, i);
				if (res.func == "$count") 
					res.name = "$count";
				else
					res.name = p.substr(i+1,  p.length-i-2);
				
			}
		}
		return res;
	};
	that.getFunc = function(func) {
		return _private.funcs[func];
	};
	that.applyFunc = function(v, func) {
		var hnd = that.getFunc(func);
		if (hnd) return hnd(v);
		return v;
	};
	that.addSelected = function(data, selected, value, create) {
		selected.forEach(function(field, index){
			if (field.group) {
				if (create) {
					if (field.name == "$count") 
						value.$count = 1;
				} else {
					if (field.name == "$count")
						value.$count++;
				}
				
			} else if (create) {
				var v = $.sdata.syncGetValue(data,field.name);
				if (field.func) v = $.sdata.applyFunc(v, field.func); 
				var  co = value; 
				if (field.func) {
					co[field.func+ "("+ field.name +")"] = v;
				} else {
					var s = field.name.split(".");
					for (var j = 0, len = s.length-1; j<len; j++) {
						if (!co[s[j]]) co[s[j]] = {};
						co = co[s[j]];
					}
					co[s[s.length-1]] = v;
				}
			}	
		});	
	};
	that._reduceFields = function(fields, parent, res, func) {
		if (fields && fields.props) {
			fields.props.forEach(function(field){
				if (field.props) {
					func = field.func?field.func:func;
					that._reduceFields(field, field.name, res, func);
				} else {
					var ff = parent?func:field.func; 
					if (parent) {
						res.push({name: parent+"."+field.name, func: ff, group: that.groupFunc(ff)});
					} else 
						res.push({name: field.name, func:ff, group: that.groupFunc(ff)});
				}
			});
		}
		return res;
	};
	that.parseField = function(value, entity, ecache) {
		var p = value.split('.');
		if (p.length > 1) {
			var ecfg = entity?that.config.entities[entity]:null; 
			if (ecfg && ecfg.$schema)
				ecfg = ecfg.$schema.properties
			else
				ecfg = null;	
			if (!ecfg) return;
			value = p.shift();
			if (ecfg && ecfg[value] &&  ecfg[value].type &&  ecfg[value].type.$ref) {
				var surl = that.parseSdataUri(ecfg[value].type.$ref);
				if (that.config.entities[surl.entity]) {
					ecache[surl.entity] = true;
					that.parseField(p.join('.'), surl.entity, ecache);
				}
			}
		}
	};
	that.parseFields = function(o, value, entity, elist, func, group) {
		var ecfg = entity?that.config.entities[entity]:null; 
		if (ecfg && ecfg.$schema)
			ecfg = ecfg.$schema.properties
		else
			ecfg = null;
		var res = o || {
			entity: entity,
			props: []
		};
		value.split(",").forEach(function(e) {
			var link =false;
			e =  that._parseProp(e, func);
			if (e.name == "*") 
				res.all = true;
			else if (e.name.indexOf("/") > 0) {
				var links = e.name.split("/");
				var s = links[0], surl;
				if (ecfg && ecfg[s] &&  ecfg[s].type &&  ecfg[s].type.$ref) {
					surl = that.parseSdataUri(ecfg[s].type.$ref);
					if (that.config.entities[surl.entity]) link = true;
				}
				var ns = {name: s, props: []};
				if (link) {
					elist[surl.entity] = true;
					ns.entity = surl.entity;
				}
				res.props.push(ns);
				links.shift();
				that.parseFields(ns, links.join("/"), (link?surl.entity:""), elist, false, false);
			} else res.props.push(e);
		});
		return that._reduceFields(res, "",[], null);
	};
	that.execSelected = function(data, purl) {
		return data;
	};
	that.getSyncCount = function(options) {
		if (that.useCacheCount) {
			options.success(that.syncCount);
		} else that.getSyncDataCount(function(value) {
				that.syncCount = value;
				that.useCacheCount = true;
				options.success(value);
		});
	};
	that.getSyncDataCount = function(cb) {
		cb(0);
	};
	that.getModifiedData = function(purl, cb) { 
		cb(null);
	};	
	that.translateURL =  function (url) {
		var i;
		if (that.urlmap) {
			i = that.urlmap.key.indexOf(url);
			if (i>=0) return that.urlmap.value[i];
		} else if (that.hack_replace) {
			i = url.indexOf(that.hack_replace.src);
			if (i == 0) url = that.hack_replace.dst + url.substring(that.hack_replace.src.length);
		}
		
		return url;
	};
	that.post = function(url,data, next, headers, options) {
		if ($.helpers.log) {
			console.log("POST " + url);
		}
		var h = {"Accept": "application/json;vnd.sage="+ _consts.vnd_sage};
		if (headers) {
			$.extend(h, headers);
		}
		var curl = that.translateURL(url);
		$.ajax({
		  headers: h,
		  type: "POST",
		  dataType: "json",
		  data: JSON.stringify(data),
		  url: curl,
		  contentType: "application/json; charset=utf-8",
		  success: function(cd){
			if (that.hack_replace && (url != curl)) {
				var reg = new RegExp(that.hack_replace.src.replace(/\//g, "\/"), "g");
				cd = JSON.parse(JSON.stringify(cd).replace(reg, that.hack_replace.dst));
			}	
			if ($.helpers.log) {
				console.log("Response: ");
				console.log(cd);
			}
			next(cd);
		  },
		  error: function(jqXHR, textStatus, errorThrown) {
			if (options && options.ignoreErrors) return next(null);
			$.helpers.pushAjaxError(jqXHR, textStatus, errorThrown, url, "POST");
			next(null);
		  }
		});
	
	};	
	that.GET = function(url, next, headers, options) {
		if ($.helpers.log) {
			console.log("GET " + url);
		}
		var h = {"Accept": "application/json;vnd.sage="+ _consts.vnd_sage};
		if (headers) {
			$.extend(h, headers);
		}
		var curl = that.translateURL(url);
		$.ajax({
		  headers: h,
		  type: "GET",
		  dataType: "json",
		  url: curl,
		  success: function(cd, textStatus, jqXHR){
			if (that.hack_replace && (url != curl)) {
				var reg = new RegExp(that.hack_replace.src.replace(/\//g, "\/"), "g");
				cd = JSON.parse(JSON.stringify(cd).replace(reg, that.hack_replace.dst));
			}	
			if ($.helpers.log) {
				console.log("Response: ");
				console.log(cd);
			}
			var rheaders =  {status: jqXHR?jqXHR.status:200, location: jqXHR?jqXHR.getResponseHeader("Location"):""};
			next(cd, rheaders);
		  },
		  error: function(jqXHR, textStatus, errorThrown) {
			if (options && options.ignoreErrors) return next(null);
			$.helpers.pushAjaxError(jqXHR, textStatus, errorThrown, url, "GET");
			var rheaders =  {status: jqXHR?jqXHR.status:200, location: jqXHR?jqXHR.getResponseHeader("Location"):""};
			next(null, rheaders);
		  }
		});
	
	};
	/* streamline compatible */ 
	that.applicationDetails = function(appData, cb) {
		var cd = {baseURL: appData.baseURL};
		var purl = that.parseSdataUri(appData.baseURL);
		cd.applicationName = purl.application;
		cd.contractName = purl.contract;
		cd.endpointName = purl.dataset;
		that.post(that.$url(appData, appData.url), cd, function(data) {
			cb(data);
		});
	};
	that.syncGetValue = function(data, field) {
		var values = field.split('.');
		var doContinue = false;
		var cd = data, oldData=null;
		if (!data) return null;
		values.forEach(function(name, idx) {
			if (doContinue) return;
			oldData = cd;
			cd = cd[name];
			var cacheid = cd?(cd.$key || cd.$uuid):false;
			if (cacheid && that.loadCache && that.loadCache[cacheid]) {
				cd = that.loadCache[cacheid].data;
			}
			doContinue = (cd == null);
		});
		return cd;
	};
	/*
	* 
	*/
	that.applicationList= function(options) {
		var url = that.sdataAdmin;
		var purl = that.parseSdataUri(url);
		that.GET(url, function(data) {
			var res = [];
			var burl = "";
			if (data && data.$resources) { 
				if (data.$baseUrl) {
					burl = data.$baseUrl;
					delete data.$baseUrl;
				}
				data.$resources.forEach(function(cd) {
					if (cd && cd.endpoints && cd.endpoints.length) {
						var ad = {
							url: cd.installUrl,
							title: cd.title, 
							description: cd.description || cd.title, 
							icon: cd.icon || "", 
							baseURL : purl.base + cd.applicationName + "/" + cd.contract  + "/", 
							datasets:cd.endpoints 
						};
						if (burl && (adurl.indexOf(burl)<0)) ad.url = burl + ad.url;
						if (ad.url && (ad.url.charAt(0) =="/")) ad.url = that.sdataHost + ad.url;
						delete cd.endpoints;
						res.push(ad);
					}
				});
			}
			if (options.success) options.success(res); 
		});			
	};
	that.removeFromDB = function(id, options) {
		options.success();
	};
	
	that.delData = function(url, options) {
		options.success();
	};
	that.sendSDataRequest = function(url, options) {
		_private.logSdata("Real operation: Send SDATA request: ", url);
		var ecache = {};
		var old = options.success;
		if (that.store(url.uri)) {		
			if (!url.id && !url.template) {
				if (url.query && (url.query.selected || url.query._groupBy  || url.query.where)) {
					if (url.query.selected) url.pselected = that.parseFields(null, url.query.selected, url.entity, ecache, true, false);
					if (url.query._groupBy) url.pgroupBy = that.parseFields(null, url.query._groupBy, url.entity, ecache, true, true);
					if (url.query.where) url.pwhere = that.parseWhere(url.query.where, url.entity, ecache);
					ecache = Object.keys(ecache);
					if (ecache.length) {
						options.$prefetch = options.$prefetch || [];
						options.$prefetch = options.$prefetch.concat(ecache);
						
					}
					
				}			
				
			}
		} else {
			// load from local DB
			return that.getModifiedData(url, function(data) {
				if (url.id) {
					if (data && data[url.id]) {
						if (data[url.id].status ===  $.sdata.STATUS.DELETED) {
							return options.success(null, {status:404});
						} else {
							return options.success(data[url.id].data, {status:200});
						}	
					}
					that.execGetSData(url, options);	
				} else {
					if (data && Object.keys(data).length)  {
						that.execGetSData(url, {success: function(sdata, headers){
							if (sdata && sdata.$resources) {
								var ii = sdata.$resources.length, key, res;
								while (ii--) {
									res = sdata.$resources[ii];
									key = res.$uuid || res.$key;
									if (data[key]) {
										if (data[key].status ===  $.sdata.STATUS.DELETED)
											 sdata.$resources.splice(ii, 1);
										else
											sdata.$resources[ii] = data[key].data;
									}
								}
							}
							options.success(sdata, headers);
							
						}});
					} else {
						that.execGetSData(url, options);
					}
				}
				
					
			});
			
			
		}
		var setCache = (options.$prefetch && !url.id && !url.template) && !that.loadCache;
		if (setCache) that.startLoad();
		options.success = function(data, headers) {
			if (setCache) that.endLoad();
			if ($.helpers.log) {
				console.log("Response: ");
				console.log(data);
			}
			if (old) old(data, headers);
		};
		if (options.$prefetch && !url.id) {
				$.helpers.each(options.$prefetch, function(value, index, next) {
					var furl = _private.parseSDataURL(url.base + url.application + '/' + url.contract + '/' + url.dataset + '/' + value);
					that.execGetSData(furl, {
						success: function(data, headers) {
							if (data && data.$resources) 
								data.$resources.forEach(function(value) {
									that.loadCache[value.$key || value.$uuid] = {data: value, headers: {status: 200}};
								});
							return next();
						}
					});
					
				}, function(){
					that.execGetSData(url, options);
					
				});

			
		} else 
			that.execGetSData(url, options);
	};
	that.execGetSData = function(uri, options) {
		var local = ($.sdata.config.entities[uri.entity] && $.sdata.config.entities[uri.entity].sync);
		var cachequery = (!local && $.sdata.offline && $.sdata.config.entities[uri.entity] && $.sdata.config.entities[uri.entity].cache);
		if (!local && !cachequery) {
			that.GET(uri.uri, options.success);
		} else {
			that.getSData(uri, options);
		}
	
	};
		

	that.getSData = function(uri, options) {
		if (options.success) options.success("Not found", {status: 404});
	};
	that.execURL=function(url, options)  {
		if (that.config && that.config.baseUrl) url = that.$url({$baseURI: that.config.baseUrl}, url);
		var sdataURL = _private.parseSDataURL(url);
		if (sdataURL) { 
			_private._execSDATA(sdataURL, options);
		} else if (options.success) {
			options.success("Not Implemented", {status: 500});
		}
	};
	that.parseSdataUri= function(uri) {
		return _private.parseSDataURL(uri);
	};
	that.getUri= function(puri) {
		_private.makeURL(puri);
		return puri.uri;
	};
	that.entityUri= function(url) {
		var u = [url.base, url.application, '/' +url.contract, '/'+ url.dataset];
		u.push('/'+ url.entity);
		return u.join('');
	};
	
	that.getBaseUrl= function(puri) {
		return [puri.base, puri.application, '/' +puri.contract, '/'+ puri.dataset, '/'].join('');
	};
	that.entityMeta= function(entity) {
		if (that.config.entities)  return that.config.entities[entity];
		return null;
	};
	that.getInstalledApps=function(grouped, options) {
		options.success([]);
	};
	that.startLoad = function() {
	},
	that.endLoad = function() {
	},
	that.installApp=function(data, options) {
		options.success();
	};
	
})(jQuery);    
