//TODO replace fff
(function($) {
	var version = 4;
	var that = $.sdatadb || {};
	$.sdatadb = that;
	var dbName = "sage-mge-test";
	var _checkDBHandler = function(db,options) {
		if (!db) {
			if (options)  {
				if (options.fail)  {
					options.fail(null);
				} else if (options.success) {
					options.success(null);
				}
			}
			return false;
		}
		return true;
	};
	
	if ( "webkitIndexedDB" in window ) {
		window.indexedDB      = window.webkitIndexedDB;
		window.IDBTransaction = window.webkitIDBTransaction;
		window.IDBKeyRange    = window.webkitIDBKeyRange;
		window.IDBDatabaseException = window.webkitIDBDatabaseException;
	}	
	var indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB;
	var _tables = {
		migration: { columns: { version:  {def: "version text"} }},
		draft: { columns: {
					workingCopy_url:  {def: "workingCopy_url TEXT PRIMARY KEY"},
					id:  {def: "id TEXT"},
					title:  {def: "title TEXT"},
					data:  {def: "data TEXT"},
					entity_url:  {def: "entity_url TEXT"},
					original_url:  {def: "original_url TEXT"},
					original_type:  {def: "original_type TEXT"},
					workingCopy_type:  {def: "workingCopy_type TEXT"},
					ui_url:  {def: "ui_url TEXT"}
					//, ui_type:  {def: "ui_type TEXT"} 
					
				}
		},
		sdata: {columns:{
					url:  {def: "url TEXT PRIMARY KEY"}, /* ressource or template */
					entity_url:  {def: "entity_url TEXT"}, /* used for select */
					data:  {def: "data TEXT"},
					original_data:  {def: "original_data TEXT"},
					url_type: {def: "url_type integer"},// remove it
					status: {def: "status integer"}, // modified, original, deleted  
					sync_status: {def: "sync_status integer"}, // not used,  remove it
					ui_url:  {def: "ui_url TEXT"}, // representation: 
					//ui_type:  {def: "ui_type TEXT"},  remove
					updated:  {def: "updated TEXT"}, // $updated
					last_error:  {def: "last_error TEXT"}
					
				}
		},
		apps: {columns:{
					id:  {def: "id TEXT PRIMARY KEY"}, /* uuid of application*/
					url:  {def: "url TEXT"},   /* url of application*/
					title:  {def: "title TEXT"},  /* application name (title)*/
					description:  {def: "description TEXT"},  /* application description + (endpoint) */
					icon:  {def: "icon TEXT"}, /* Icon name */
					baseURL:  {def: "baseURL TEXT"}, /* baseURL for mobile application http(s)://host:port/sdata/application/contract/dataset/ */
					version:  {def: "version TEXT"}, /* not used */
					data:  {def: "data TEXT"} /* application structure*/
				}
		}
		
	};
	var _sqlLiteGetSQL = function(tableName) {
		var sql = ["CREATE TABLE IF NOT EXISTS"];
		sql.push(tableName);
		sql.push("(");
		var columns = _tables[tableName].columns;
		Object.keys(columns).forEach(function(columnName, index){
			sql.push((index?",":"") +  columns[columnName].def);
		});
		sql.push(")");
		return sql.join(" ");
	};	
	var _applySort = function(purl, res, options) {
		var sort = $.helpers.sdataSort(purl.query);
		if (sort) {
			$.helpers.applySDataSort(sort, res);
		}
	
	};	
	
	var _acceptStatut = function(row, options) {
		if (options.$modified) { 
			return (row.status != $.sdata.STATUS.ORIGINAL)
		} else if (row.status >= $.sdata.STATUS.DELETED)
			return false;
		return true;
	};	
	var _addInfo = function(row, data) {
		if (data) {
			data.$info = {
				status: row.status,
				last_error:  row.last_error
			};
		}
		return data;
	};	
	var _addResource = function(row, data, resources,purl, values, map, _after) {
		if (data) {
			/* apply where */
			if (!$.sdata.execWhere(data, purl.pwhere)) return _after();
			/* get selected */
			var selected= data; 
			
			if (purl.pgroupBy) {
				var key = "", stag ="", filter ="", create = false;
				purl.pgroupBy.forEach(function(field, index){
					var v = $.sdata.syncGetValue(selected,field.name);
					if (field.func) v = $.sdata.applyFunc(v, field.func); 
					key = key  + stag + v;
					stag = "#";
				});
				var i = values.indexOf(key);
				if (i < 0) {
					create = true;
					values.push(key);
					i = values.length-1; 
					map[i+""] = {};
				}
				$.sdata.addSelected(data, purl.pselected, map[i+""], create);
			} else {
				selected.$info = {
					status: row.status,
					last_error:  row.last_error
				};
				resources.push(selected);
			}
		}
		_after();
	};	
	
	
	/**
	* @param {{url: string, data: {$updated: string, $info: Object}}} data
	*/	 
	var _checkSdataData = function(data) { 	
			data.url = $.sdata.$url(data, data.url);
			data.sync_status = data.sync_status || 0;
			data.updated = data.data.$updated || (new Date()).toISOString();
			data.url_type =  data.url_type || $.sdata.TYPES.ENTITY;
			data.original_data = data.original_data || null;
			data.ui_url = data.ui_url || "";
			data.ui_type= data.ui_type || "";
			data.last_error = data.last_error || "";
			var purl = $.sdata.parseSdataUri(data.url); 
			data.status =  data.status || $.sdata.STATUS.ORIGINAL;
			delete purl.id;
			delete purl.query;
			data.entity_url = $.sdata.getUri(purl); 
			if (data.data) delete data.data.$info;
		};
	var _addInfoPlus = function(row, data) {
		_addInfo(row, data);
		data.$info.ui = row.ui_url;
		data.$info.url = row.url;
		return data;
	
	};
	
	var _indexDB = {
		version : version,
		_createObjectStore: function(db) {
			if(db.objectStoreNames.contains("draft")) db.deleteObjectStore("draft");
			if(db.objectStoreNames.contains("sdata")) db.deleteObjectStore("sdata");
			if(db.objectStoreNames.contains("apps")) db.deleteObjectStore("apps");
			var objectStore = db.createObjectStore("draft", { keyPath: "workingCopy_url" });
			objectStore.createIndex("entity_url", "entity_url", { unique: true }); 
			objectStore = db.createObjectStore("sdata", { keyPath: "url" });
			objectStore.createIndex("entity_url", "entity_url", { unique: false }); 
			objectStore.createIndex("status", "status", { unique: false }); 
			objectStore = db.createObjectStore("apps", { keyPath:"id"});
			objectStore.createIndex("url", "url", { unique: false}); 
		},
		_openDB: function(options) {
			try {
				var  request = indexedDB.open(dbName, _indexDB.version);
			} catch(ex) {
				$.helpers.pushException(ex, $.helpers.messages.no_db_support_sol);
				return options.success(null);			
			}
			try {
				request.onupgradeneeded = function(e) {
					var old = options.success;
					options.success = null;
					var db = (e.target.result || e.target.source);
					_indexDB._createObjectStore(db);
				};	
			} catch(ex) {
			}
			request.onsuccess = function(e) {
				var db = (e.target.result || e.target.source);
				if (!db.setVersion && (_indexDB.version != db.version)) {
					var sdv = db.setVersion(_indexDB.version);
					sdv.onsuccess =function(e) {
						_indexDB._createObjectStore(db);
						options.success(db);
					};
					sdv.oerror = function(e) {
						$.helpers.pushdbError(e);
						if (options.success) return options.success(null);
					};
				} else {
					if (options.success) return options.success(db);
				}
			};
			request.oerror = function(e) {
				$.helpers.pushdbError(e);
				if (options.success) options.success(null);
			};
		},
		/**
		* @param {{$key: string, $info: Object, $links: Object}} data
		*/	 
		
		_saveDraft:  function(db, draftURL, data, options) {
			if (!_checkDBHandler(db, options)) return;
			var tx = db.transaction(["draft"], IDBTransaction.READ_ONLY); 
			var objectStore = tx.objectStore("draft");  
			var request = objectStore.get(draftURL);
			request.onsuccess= function(event) {
				if (event.target.result) {
					var cdata = event.target.result;
					var purl = $.sdata.parseSdataUri(cdata.original_url); 
					if (purl.template) {
						purl.template = false;
						purl.editActivityRequest = false;
						delete purl.query;
						var insData = {
							url_type: $.sdata.TYPES.ENTITY,
							status : $.sdata.STATUS.CREATED,
							ui_url:  cdata.ui_url,
							ui_type:  cdata.ui_type,
							data:data
						};
						if (!purl.id) {
							purl.id = data.$uuid;
						} else {
							if (purl.id == data.$key) insData.status = $.sdata.STATUS.MODIFIED;
						}
						insData.url = $.sdata.getUri(purl); 
						
						delete purl.id;
						insData.entity_url = $.sdata.getUri(purl); 
						delete insData.data.$links;
						delete insData.data.$info;
						var tnx = db.transaction(["sdata", "draft"], IDBTransaction.READ_WRITE); 
						var sdata = tnx.objectStore("sdata");  
						var sdr = sdata.get(insData.url);
						var _after = function(event) {
							//var tx = db.transaction(["sdata", "draft"], IDBTransaction.READ_WRITE); 
							if (event.target && event.target.result) {
								var old = event.target.result;
								if ((old.status == $.sdata.STATUS.MODIFIED) || (old.status == $.sdata.STATUS.ORIGINAL)) {
									insData.status = $.sdata.STATUS.MODIFIED;
									if (old.status == $.sdata.STATUS.ORIGINAL) 
										insData.original_data = old.data;
									else 
										insData.original_data = old.original_data;
									if (JSON.stringify(insData.original_data) == JSON.stringify(insData.data)) {
										delete insData.original_data;
										insData.status = $.sdata.STATUS.ORIGINAL;
									}	
									
								}
								return _indexDB._delSdata(db, tnx, insData.url, {success: function(){
									_indexDB._addSdata(db, tnx,insData, sdata, {success: function(){
										_indexDB._deleteDraft(db, tnx,  draftURL, {success: function(){
											if (options.success) options.success();
											
										}});
									}});
								}});
							} else {
								_indexDB._addSdata(db, tnx,insData, sdata, {success: function(){
									_indexDB._deleteDraft(db, tnx,  draftURL, {success: function(){
										if (options.success) options.success();
										
									}});
								}});
							}
						};	
						sdr.onerror=_after;
						sdr.onsuccess = _after;
						return;
					} 
					if (options.success) options.success();
			
				} else if (options.success) options.success();
			};
			request.onerror= function(event) {
				if (options.success) options.success();
			};
		
		},
		_deleteSdata:  function(db, tx, url, options) {	
			if (!_checkDBHandler(db, options)) return;
			// OK
			options = options || {};
			tx = tx || db.transaction(["sdata"], IDBTransaction.READ_WRITE); 
			try {
				var objectStore = tx.objectStore("sdata");  
				var request = objectStore["delete"](url);
				request.onsuccess= function(event) {
					if (options.success) options.success();
				};
				request.onerror= function(event) {
					$.helpers.pushdbError(event);
					if (options.fail) return options.fail();
				};
			}catch(ex) {
				$.helpers.pushdbError(ex);
				if (options.fail) return options.fail();
			}
		},
		_sdataOperation:  function(db, sdataUrl, options, tx, op, newData) {
			if (!_checkDBHandler(db, options)) return;
			tx = tx || db.transaction(["sdata"], IDBTransaction.READ_WRITE); 
			var oldData = null;
			var sdata = tx.objectStore("sdata");  
			var keyR = IDBKeyRange.only(sdataUrl);
			var delreq = sdata.openCursor(keyR); 
			
			delreq.onerror = delreq.onsuccess = function(event) {  	
				var cr = event.target.result;
				if (cr) {
					if (cr.value.status == $.sdata.STATUS.ORIGINAL) 	
						oldData = cr.value.data;
					else {
						oldData = cr.value.original_data;
						if (!oldData && (cr.value.status == $.sdata.STATUS.DELETED))
							oldData = cr.value.data;
					}
					cr["delete"]();  
					cr["continue"]();  
				} else	{
					if (op == "remove") {
						if (options.success) options.success();
					} else if ((op == "mark_deleted") || (op == "cancel")) {
						var st = (op == "mark_deleted")?$.sdata.STATUS.DELETED:$.sdata.STATUS.ORIGINAL;
						if (oldData) {
							return _indexDB._addSdata(db, tx, {url: sdataUrl, data: oldData, status: st}, sdata, options);
						} else {
							if (options.success) options.success();
						}
					
					} else if ((op == "add") && newData) {
						return _indexDB._addSdata(db, tx, {url: sdataUrl, data: oldData, status: $.sdata.STATUS.ORIGINAL}, sdata, options);
						
					} else if (options.success) options.success();
				}
			};
		},
		_deleteDataByDraft:  function(db, draftURL, options, tx) {
			if (!_checkDBHandler(db, options)) return;
			options = options || {};
			tx = tx || db.transaction(["draft", "sdata"], IDBTransaction.READ_WRITE); 
			try {
				var objectStore = tx.objectStore("draft");  
				var keyRange = IDBKeyRange.only(draftURL);
				var request = objectStore.openCursor(keyRange); 
				var sdataUrl = "";	
				request.onsuccess = function(event) {  	
					var cr = event.target.result;
					if (cr) {
						sdataUrl =  $.sdata.$purl(cr.value.data.$url);
						if (!sdataUrl) {
							var purl = $.sdata.parseSdataUri(cr.value.entity_url);  
							delete purl.query;
							delete purl.template;
							delete purl.editActivityRequest;
							sdataUrl = $.sdata.getUri(purl); 
						}
						cr["delete"]();  
						cr["continue"]();  
					} else {
						if (sdataUrl) {
							return _indexDB._sdataOperation(db, sdataUrl, options, tx, "mark_deleted");
						} else	if (options.success) options.success();
					}
				};				
				request.onerror= function(event) {
					if (options.success) options.success();
				};
			}catch(ex) {
				console.log(ex);
			 
			}
		},
		_deleteSDataByUrl:  function(db, url, options, tx) {
			if (!_checkDBHandler(db, options)) return;
			options = options || {};
			tx = tx || db.transaction(["sdata"], IDBTransaction.READ_WRITE);
			return _indexDB._sdataOperation(db, url, options, tx, "mark_deleted");	
		},
		
		
		_deleteDraft:  function(db, tx,  draftURL, options) {
			if (!_checkDBHandler(db, options)) return;
			options = options || {};
			tx = tx || db.transaction(["draft"], IDBTransaction.READ_WRITE); 
			try {
				var objectStore = tx.objectStore("draft");  
				var request = objectStore["delete"](draftURL);
				request.onsuccess= function(event) {
					if (options.success) options.success();
				};
				request.onerror= function(event) {
					if (options.success) options.success();
				};
			}catch(ex) {
				console.log(ex);
			 
			}
		},
		_updateDraft : function(db, draftURL, data, options) {
			options = options || {};
			if (!_checkDBHandler(db, options)) return;
			var tx = db.transaction(["draft"], IDBTransaction.READ_ONLY); 
			var objectStore = tx.objectStore("draft");  
			var request = objectStore.get(draftURL);
			request.addEventListener('success', function(event) {
				if (event.target.result) {
					var cd = event.target.result;
					cd.data  = data;
					var tnx = db.transaction(["draft"], IDBTransaction.READ_WRITE); 
					var os = tnx.objectStore("draft");  
					var dr= os["delete"](draftURL);
					dr.onsuccess= function(event) {
						var tnx = db.transaction(["draft"], IDBTransaction.READ_WRITE); 
						var os = tnx.objectStore("draft");  
						var prequest = os.add(cd);
						prequest.onsuccess= function(event) {
							if (options.success) options.success(data);
						};
						prequest.onerror= function(event) {
							if (options.success) options.success(data);
						};
					};
					dr.onerror= function(event) {
						if (options.success) options.success(data);
					};
				} else if (options.success) options.success(data);
			}, false);
			request.addEventListener('error', function(event) {
				if (options.success) options.success(data);
			}, false);
		},
		_addSdata: function(db, tx, data, objectStore, options) {
			if (!_checkDBHandler(db, options)) return;
			tx = tx || db.transaction(["sdata"], IDBTransaction.READ_WRITE); 
			objectStore = objectStore || tx.objectStore("sdata"); 
			_checkSdataData(data);
			var request = objectStore.add(data);
			request.onsuccess=request.onerror=function() {
				options.success();
			};
		},
		_delSdata: function(db, tx, url, options) {
			if (!_checkDBHandler(db, options)) return;
			tx = tx || db.transaction(["sdata"], IDBTransaction.READ_WRITE); 
			var objectStore = tx.objectStore("sdata"); 
			var request = objectStore["delete"](url);
			request.onsuccess=request.onerror=function() {
				options.success();
			};
		},
		_insertDraft : function(db, tx, data, options) {
			if (!_checkDBHandler(db, options)) return;
			tx = tx || db.transaction(["draft"], IDBTransaction.READ_WRITE); 
			var objectStore = tx.objectStore("draft");  
			var request = objectStore.add(data);
			request.onsuccess= function(event) {
				if (options.success) options.success(data);
				
			};
			request.onerror= function(event) {
				if (options.success) options.success(data);
			};
		},
		_getSData:  function(db, purl, options) {	
			if (!_checkDBHandler(db, options)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_ONLY), request; 
			var objectStore = tx.objectStore("sdata"); 
			try {	
				if (purl.id ||  purl.template) {
					request =  objectStore.get(purl.uri);
					request.onsuccess = function(event) {
						if (event.target.result && _acceptStatut(event.target.result, options)) {
							options.success(_addInfo(event.target.result, event.target.result.data),  {status:200});
						} else options.success(null, {status:404});
					};
					request.onerror= function(event) {	
						options.success(null, {status:404});
					}
				} else if (purl.entity) {
					var result = {
						$url: purl.uri,
						"$resources": []
					};
					var newUrl = {query: null}, gmap=[], gvalues = {};
					$.extend(newUrl, purl);
					delete newUrl.query;
					var e_url = $.sdata.getUri(newUrl); 
					
					var index = objectStore.index("entity_url"); 
					var keyRange = IDBKeyRange.only(e_url);
					request = index.openCursor(keyRange);  
					request.onsuccess = function(event) {  	
						var cr = event.target.result;
						if (cr) {
							if (_acceptStatut(cr.value, options))  
								_addResource(cr.value, cr.value.data, result.$resources, purl, gmap, gvalues, function(){
									cr["continue"]();  
								});
							
						} else {
							if (purl.pgroupBy) 
								for (var ii in gvalues) result.$resources.push(gvalues[ii]);	
							_applySort(purl,result.$resources, options); 
							options.success(result, {status:200});
						}
					};
					request.onerror = function(event) {  
						if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
							options.success(result, {status:200});
						} else options.success("", {status:500});
					}					
				}
			} catch(ex) {
				console.log(ex);
			}
		},
		_updsdataInfo: function (db, tx, url, info, options) {
			if (!_checkDBHandler(db, options)) return;
			var objectStore = tx.objectStore("sdata"); 
			var keyRange = IDBKeyRange.only(url);
			var request = objectStore.openCursor(keyRange);  
			request.onsuccess = function(event) {  	
				var cr = event.target.result;
				if (cr) {
					if (info) {
						if (info.last_error != null) {
							cr.value.last_error = info.last_error;
						}  
						var rr = cr.update(cr.value);
						rr.onsuccess = function() {	
							cr["continue"]();
						}
						rr.onerror = function() {	
							cr["continue"]();
						}
					} else  cr["continue"]();
				} else {
					options.success();
				}
			};
			request.onerror = function(event) {
				options.success();
			};					
		
		},
		_getSyncData:  function(db, options) {
			if (!_checkDBHandler(db, options)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_ONLY); 
			var objectStore = tx.objectStore("sdata");  
			var index = objectStore.index("status"); 
			var keyRange = IDBKeyRange.lowerBound($.sdata.STATUS.ORIGINAL, true);
			if (options.count) {
				var crequest = index.openCursor(keyRange), cc=0; 
				crequest.onsuccess = function(event) {
					var cr = event.target.result;
					if (cr) {
						cc++;
						cr["continue"]();  
					} else {
						options.success(cc);
					}
				};
				crequest.onerror = function(event) {
					 options.success(0);
				}	
				
			} else {
				var data = null;
				var request = index.openCursor(keyRange);  
				request.onsuccess = function(event) {
					var cr = event.target.result;
					if (cr) {
						var purl = $.sdata.parseSdataUri(cr.value.url); 
						if ($.sdata.getBaseUrl(purl) == $.sdata.config.baseURL) {
							data = data || {};
							var list = data[purl.entity] || [];
							data[purl.entity] = list;
							var rdata = cr.value.data;
							_addInfoPlus(cr.value, rdata);
							list.push(rdata);
						}
						cr["continue"]();  
					} else {
						options.success(data);
					}
				};
				request.onerror = function(event) {
					 options.success(null);
				}	
			}
		}, 
		_undoUpdate: function(db, url, options) {	
			if (!_checkDBHandler(db, options)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_WRITE); 
			return _indexDB._sdataOperation(db, url, options, tx, "cancel");
		},		
		_installApp: function(db, data, options) {
			if (!_checkDBHandler(db, options)) return;
			var tx = db.transaction(["apps"], IDBTransaction.READ_WRITE); 
			var objectStore = tx.objectStore("apps"); 
			var index = objectStore.index("url"); 
			var keyRange = IDBKeyRange.only(data.url);
			var request = index.openCursor(keyRange);
			var doInsert = function() {
				var reqt = objectStore.add(data);
				reqt.onerror = function(event) {  
					$.helpers.pushdbError(event);
					options.success();
				};
				reqt.onsuccess = function(event) {  	
					options.success();
				}
				
			};
			request.onsuccess = function(event) {  	
				var cr = event.target.result;
				if (cr) {
					if (cr.value.baseURL == data.baseURL)
						cr["delete"]();  
					cr["continue"]();  
				} else {
					doInsert();
				}
			};
			request.onerror = function(event) {  
				if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
					doInsert();
				} else {
					$.helpers.pushdbError(event);
					options.success();
				}
			};					
			
		},
		_removeFromDB: function(db, urls, options) {
			if (!_checkDBHandler(db, options)) return;
			var tx = db.transaction(["apps", "sdata"], IDBTransaction.READ_WRITE);
			var sdata  = tx.objectStore("sdata");
			var sdindex = sdata.index("entity_url"); 
			var apps  = tx.objectStore("apps");
			$.helpers.each(urls, function(value, index, next) {
				if ((value.type == "template") || (value.type == "resource")) {
					var rmvreq = sdata["delete"](value.url); 
					rmvreq.onsuccess = function(event) { 
						next();
					}
					rmvreq.onerror = function(event) {
						if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) 
							return next();
						$.helpers.pushdbError(event);
						next();
					}
					return; 
					
				} else	if (value.type == "entity") {
					var keyRange = IDBKeyRange.only(value.url);
					var rmvereq = sdindex.openCursor(keyRange);  
					rmvereq.onsuccess = function(event) {  
						var cr = event.target.result;
						if (cr) {
							cr["delete"]();  
							cr["continue"]();  
						} else {
							next();
						}
					};
					rmvereq.onerror = function(event) {  
						if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
							next();
						} else {
							$.helpers.pushdbError(event);
							next();
						}
					}	
					return; 					
				
				}  else	if (value.type == "application") {
					var rmvapp = apps["delete"](value.url); 
					rmvapp.onsuccess = function(event) { 
						next();
					}
					rmvapp.onerror = function(event) {
						if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) 
							return next();
						$.helpers.pushdbError(event);
						next();
					}
					return; 
				} else 	next();
			
			}, options.success);
			
		},
		_getAppConfig: function(db, appId, options) {
			if (!_checkDBHandler(db, options)) return;
			var tx = db.transaction(["apps"], IDBTransaction.READ_ONLY); 
			var objectStore = tx.objectStore("apps"); 
			var request = objectStore.get(appId);
			request.onsuccess = function(event) {  	
				var cr = event.target.result;
				if (cr) {
					cr.data.id = cr.id;
					options.success(cr.data);
				}
			};
			request.onerror = function(event) {  
				if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
					options.success(null);
				} else {
					$.helpers.pushdbError(event);
					options.success(null);
				}
			};					
		},
		_getInstalledApps: function(db, grouped, options) {
			if (!_checkDBHandler(db, options)) return;
			var tx = db.transaction(["apps"], IDBTransaction.READ_ONLY); 
			var objectStore = tx.objectStore("apps"); 
			var index = objectStore.index("url"); 
			var request = index.openCursor();
			var results = [];
			request.onsuccess = function(event) {  	
				var cr = event.target.result;
				if (cr) {
					var data = cr.value;
					results.push({id:data.id, url: data.url,  title: data.title,
						description:data.description, icon: data.icon, 
						baseURL: data.baseURL, version: data.version
						});
					cr["continue"]();  
				} else {
					options.success(results);
				}
			};
			request.onerror = function(event) {  
				if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
					options.success(results);
				} else {
					$.helpers.pushdbError(event);
					options.success(results);
				}
			};					
		},
		_delData:  function(db, url, options) {	
			if (!_checkDBHandler(db, options)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_WRITE); 
			_indexDB._deleteSdata(db, tx, url, options);
		}, 
		_updData:  function(db, oldUrl, data, op, options) {	
			if (!_checkDBHandler(db, options)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_WRITE); 
			var info = null;
			if (data.$info) {
				info = data.$info;
				delete data.$info;
			}
			if (op.$delete) {
				var _after = function() {
					var insdata = {url:$.sdata.$purl(data.$url),  data: data};
					if (op.oldValue) {
						insdata.status = $.sdata.STATUS.MODIFIED;
						insdata.original_data = insdata.data;
						insdata.data = op.oldValue;
						if (info && info.ui) insdata.ui_url = info.ui;
					}					
					if (info) {
						if (info.last_error) insdata.last_error = info.last_error;
					}
					_indexDB._addSdata(db, tx,insdata, null, options);
				}
				/* delete sdata entry */
				_indexDB._deleteSdata(db, tx, oldUrl, {
					success: _after,
					fail: function () {
						if (options.fail) options.fail();
					}
				});
			} else if (op.$updateInfo) {
				_indexDB._updsdataInfo(db, tx, oldUrl, info, options);
			} else  options.success();
		}, 
		_initData:  function(db, config, data, options) {	
			if (!_checkDBHandler(db, options)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_WRITE), request; 
			tx.oncomplete = function(event) {
			};
			tx.onabort = function(event) {
			};
			var fail = false;
			var objectStore = tx.objectStore("sdata"); 
			if (data) {
				return _indexDB._initData_one(db, config, data, tx, objectStore, options);
			} else {
				$.helpers.each(config, function(value, index, next) {
					if (fail) return next();
					if (options.setConfig) {
						$.sdata.config = {baseURL:value.$baseURI};
					}
					return _indexDB._initData_one(db, value.value, value.data, tx, objectStore, {
						success: next,
						success: next,
						fail: function(){
							fail = true;
							return next();
						}
					});
				}, function() {
					if (options.success) options.success();
				});
			}
		
		},
		_initData_one:  function(db, config, data, tx, objectStore, options) {	
			var delopts =  {
				success: function() {
					if (data) {
						if (config.onlyOne) {
							var cd = {data: data, url: config.url};
							return _indexDB._addSdata(db, tx,cd, objectStore, {success: function(){
								if (options.success) options.success();
							}});
						} else if (data.$resources) {
							var burl = data.$baseUrl;
							return $.helpers.each(data.$resources, function(cr, index, next) {
								var cd = {data: cr, url: $.sdata.$purl(cr.$url)};
								if (burl) cd.$baseURI = burl;
								return _indexDB._addSdata(db, tx,cd, objectStore,  {success: function(){
									next();
								}});
							
							}, function() {
								options.success(db);
							},10);
						}
					}
					if (options.success) options.success();
				}
			};
			var keyRange, request;
			if (config.onlyOne) {
				keyRange = IDBKeyRange.only(config.url);
				request = objectStore.openCursor(keyRange);  
			} else {
				var index = objectStore.index("entity_url"); 
				keyRange = IDBKeyRange.only(config.url);
				request = index.openCursor(keyRange);  
			}
			request.onsuccess = function(event) {  	
				var cr = event.target.result;
				if (cr) {
					cr["delete"]();  
					cr["continue"]();  
				} else {
					delopts.success();
				}
			};
			request.onerror = function(event) {  
				if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
					delopts.success();
				} else delopts.success();
			}					
			
		},
		
		_loadDraft : function(db, draftURL, options) {
			if (!_checkDBHandler(db, options)) return;
			var tx = db.transaction(["draft"]); 
			var objectStore = tx.objectStore("draft"); 
			try {		
				var request =  objectStore.get(draftURL);
				request.onsuccess = function(event) {
					if (event.target.result) {
						options.success(event.target.result);
					} else options.success(null);
				};
				request.onerror= function(event) {	
					options.success(null);
				}
			} catch(ex) {
			}
		},
		_createDraft : function(db, data, options) {
			if (!_checkDBHandler(db, options)) return;
			var purl = $.sdata.parseSdataUri(data.original_url);
			delete purl.query;
			var like= $.sdata.getUri(purl);
			data.entity_url=like;
			var tx = db.transaction(["draft"], IDBTransaction.READ_ONLY); 
			var objectStore = tx.objectStore("draft");  
			var index = objectStore.index("entity_url"); 
			try {		
				var request =  index.get(like);
				request.onsuccess = function(event) {  
					if (event.target.result) {
						var tx = db.transaction(["draft"], IDBTransaction.READ_WRITE); 	
						var nos = tx.objectStore("draft");  
						var drequest = nos["delete"](event.target.result.workingCopy_url);
						drequest.addEventListener('success', function(event) {
							_indexDB._insertDraft(db, tx, data, options)
						}, false);
						drequest.addEventListener('error', function(event) {
							options.success(data);
						}, false);
						
						
					} else
						_indexDB._insertDraft(db, null, data, options)
				};
				request.onerror = function(event) {  
					if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
						_indexDB._insertDraft(db, null, data, options)
					}
				}
			} catch(ex) {
			}
		}
		
	};
	
	var _private = {
		_addSdata: function(db, tx, data, options) {
			if (!_checkDBHandler(db, options)) return;
			_checkSdataData(data);
			tx.executeSql("INSERT INTO sdata(url, entity_url, data, original_data, sync_status, url_type, status, ui_url, ui_type, updated, last_error) values(?,?,?,?,?,?,?,?,?,?,?)", [
							data.url,
							data.entity_url,
							JSON.stringify(data.data),
							JSON.stringify(data.original_data),
							data.sync_status,
							data.url_type,
							data.status,
							data.ui_url,
							data.ui_type,
							data.updated,
							data.last_error
						], 
					function (tx, result) { 
						options.success();
					}, function(tx, error) {
						options.success();
			});
		},
		_delSdata: function(db, tx, url, options) {
			if (!_checkDBHandler(db, options)) return;
			tx.executeSql("delete from sdata where url= ?", [url], 
					function (tx, result) { 
						options.success();
					}, function(tx, error) {
						options.success();
			});
		},
		
		_saveDraft:  function(db, draftURL, data, options) {
			if (!_checkDBHandler(db, options)) return;
			_private._execOpen(db, 'SELECT * FROM draft where workingCopy_url=?', 
				[draftURL], { success: function (rows) {
					if (rows && rows.length) {
						var cdata = rows.item(0);
						var purl = $.sdata.parseSdataUri(cdata.original_url); 
						if (purl.template) {
							purl.template = false;
							purl.editActivityRequest = false;
							delete purl.query;
							var insData = {
								url_type: $.sdata.TYPES.ENTITY,
								status : $.sdata.STATUS.CREATED,
								ui_url:  cdata.ui_url,
								ui_type:  cdata.ui_type,
								original_data: null,
								data:data
							};
							if (!purl.id) {
								purl.id = data.$uuid;
							} else {
								if (purl.id == data.$key) insData.status = $.sdata.STATUS.MODIFIED;
							}
							insData.url = $.sdata.getUri(purl); 
							delete purl.id;
							insData.entity_url = $.sdata.getUri(purl); 
							delete insData.data.$links;
							delete insData.data.$info;
							
							var _after = function(rows) {
								if (rows && rows.length) {
									var old = rows.item(0);
									if ((old.status == $.sdata.STATUS.MODIFIED) || (old.status == $.sdata.STATUS.ORIGINAL)) {
										insData.status = $.sdata.STATUS.MODIFIED;
										if (old.status == $.sdata.STATUS.ORIGINAL) 
											insData.original_data = JSON.parse(old.data);
										else 
											insData.original_data = JSON.parse(old.original_data);
										if (JSON.stringify(insData.original_data) == JSON.stringify(insData.data)) {	
											delete insData.original_data;
											insData.status = $.sdata.STATUS.ORIGINAL;
										}	
									}
									return db.transaction(function(tnx) {
										return _private._delSdata(db, tnx, insData.url, {success: function(){
											_private._addSdata(db, tnx,insData, {success: function(){
												_private._deleteDraft(db, tnx,  draftURL, {success: function(){
													if (options.success) options.success();
													
												}});
											}});
										}});
									});
								} else {
									db.transaction(function(tnx) {
										_private._addSdata(db, tnx,insData, {success: function(){
											_private._deleteDraft(db, tnx,  draftURL, {success: function(){
												if (options.success) options.success();
												
											}});
										}});
									});
								}
							};	
							
							_private._execOpen(db, 'SELECT * FROM sdata where url=?', 
								[insData.url], { 
									success: function (rows) {
										_after(rows);
									}, 
									fail: function() {
										_after(null);
									}
								}
							);
							
						} else 	if (options.success) options.success();
						
					} else 	if (options.success) options.success();			
				}, 
				fail: function(){
					if (options.success) options.success();
				}
			});
		},
		_droptables: function(db, tx, options) {
			if (!_checkDBHandler(db, options)) return;
			var _exec = function(tx) {
				$.helpers.each(["draft", "sdata", "apps"], function(table, index, next) {
					tx.executeSql('drop table if exists '+ table, [], function (tx, result) {
					next();
					}, function(tx, error) {
						console.log(error);	
						next();
					});
				}, function() {
					options.success(db);
				});
			};
			if (tx) 
				_exec(tx);
			else
				db.transaction(_exec);
		
		},
		_createtables: function(db, tx, options) {
			if (!_checkDBHandler(db, options)) return;
			var _exec = function(tx) {
				$.helpers.each(["draft", "sdata", "apps"], function(table, index, next) {
					tx.executeSql(_sqlLiteGetSQL(table), [], function (tx, result) { 
						next();
					}, function(tx, error) {
						$.helpers.pushdbError(error);
						next();
					});
				}, function() {
					options.success(db);
				});
			};
			if (tx) 
				_exec(tx);
			else
				db.transaction(_exec);
		
		},
		_openDB: function(options) {
			if (window.openDatabase) {
				var error = function(tx, error){
					alert(error.message);
				};
				var maxsize = 200000;
				try {
					var db = openDatabase(dbName, "1.0", "HTML 5 Database for ligne Mobile",maxsize);
				} catch(ex) {
					$.helpers.pushException(ex, $.helpers.messages.no_db_support_sol);
					return options.success(null);			
				}
				if (!db)  {
					$.helpers.pushException({message: $.helpers.messages.no_db_support}, $.helpers.messages.no_db_support_sol);
					return options.success(null);			
				}
				
				if (db) {
					db.transaction(function(tx) {
						tx.executeSql(_sqlLiteGetSQL("migration"), [], function (tx, result) { 
							tx.executeSql('select version from migration', [], function (tx, results) { 
								if (results.rows && results.rows.length) {
									var oldVersion = results.rows.item(0).version;
									if (oldVersion == (version + "")) {
										return options.success(db);
									} else {
										_private._droptables(db, tx, { success: function() {
											_private._createtables(db, tx, {success: function() {
												tx.executeSql('update migration set version=?', [version + ""], function (tx, result) { 
													return options.success(db);
												}, error);
												
											}});
										
										}});
										
									}
								} else {
									tx.executeSql('insert into migration (version) values (?)', [version], function (tx, result) { 
										_private._createtables(db, tx, options);
									}, error);
								}
								
							}, error);
						}, error);
					});
				} else  {
					alert("Failed to open the database on disk.  This is probably because the version was bad or there is not enough space left in this domain's quota");
				}
			} 
		}, 
		_execOpen : function(db, sql, params, options) {
			if (!_checkDBHandler(db, options)) return;
			var oldFail = options.fail;
			options.fail = function(tx, ex) {
				$.helpers.pushdbError(ex);
				if (oldFail) oldFail();
			};
			var failTran = function(tx, error) {
				$.helpers.pushdbError(error);
				if (oldFail) oldFail();
			};
			db.readTransaction(function(tx) {
				tx.executeSql(sql, params,function (tx, results) {
					 var rows = results.rows;
					 options.success(rows);
				}, options.fail);
			}, failTran);
		},
		_execSQL : function(db, tx, sql, params, options) {
			var oldFail = options.fail;
			options.fail = function(ex) {
				$.helpers.pushdbError(ex);
				if (oldFail) oldFail();
			};
			var failTran = function(tx, error) {
				$.helpers.pushdbError(error);
				if (oldFail) oldFail();
			};
			if (tx) {
				tx.executeSql(sql, params,function (tx, results) {
					 options.success();
				}, options.fail);
			} else {
				db.transaction(function(tx) {
					tx.executeSql(sql, params,function (tx, results) {
						 options.success();
					}, options.fail);
				}, failTran);
			}
		},
		_deleteSdata:  function(db, tx, url, options) {
			if (!_checkDBHandler(db, options)) return;
			_private._execSQL(db, tx, 'DELETE from sdata where url=?', [url], options);
		},
		_insertDraft : function(db, tx, data, options) {	
			if (!_checkDBHandler(db, options)) return;
			_private._execSQL(db, tx, 'INSERT INTO draft (workingCopy_url, id, title, data, entity_url, original_url, original_type, workingCopy_type, ui_url, ui_type) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', 
				[data.workingCopy_url, data.id, data.title, JSON.stringify(data.data), data.entity_url, data.original_url, data.original_type, data.workingCopy_type, data.ui_url, data.ui_type], { success: function () {
					if (options.success) options.success(data);
			}});
		},
		_deleteDraftByIndex : function(db, tx, entity_url, options) {
			if (!_checkDBHandler(db, options)) return;
			_private._execSQL(db, tx, 'DELETE from draft where entity_url=?', 
				[entity_url], { 
					success: function () {
						if (options.success) options.success();
					},
					fail: function () {
						if (options.success) options.success();
					}
					
			});
		},
		_deleteDraft : function(db, tx, workingCopy_url, options) {
			if (!_checkDBHandler(db, options)) return;
			_private._execSQL(db, tx, 'DELETE from draft where workingCopy_url=?', 
				[workingCopy_url], { 
					success: function () {
						if (options.success) options.success();
					},
					fail: function () {
						if (options.success) options.success();
					}
			});
		},
		_deleteDataByDraft:  function(db, draftURL, options, tx) {
			if (!_checkDBHandler(db, options)) return;
			_private._execOpen(db, 'SELECT * FROM draft where workingCopy_url=?', 
				[draftURL], { 
				success: function (rows) {
					if (rows && rows.length) {
						var row = rows.item(0);
						var rdata = JSON.parse(row.data);
						var sdataUrl = $.sdata.$purl(rdata.$url);
						if (!sdataUrl) {
							var purl = $.sdata.parseSdataUri(row.entity_url);  
							delete purl.query;
							delete purl.template;
							delete purl.editActivityRequest;
							sdataUrl = $.sdata.getUri(purl); 
						}
						db.transaction(function(tx) {
							_private._deleteDraft(db, tx,  draftURL, {
								success: function(){
									if (sdataUrl) {
										return _private._sdataOperation(db, sdataUrl, options, tx, "mark_deleted");
									} else if (options.success) options.success();
									
								},
								fail: function(){
									if (options.success) options.success();
								}
							});
						});
					} else 
						if (options.success) options.success();
					
				},
				fail: function() {
					if (options.success) options.success();
				}
			});
		},
		
		_deleteSDataByUrl:  function(db, url, options, tx) {
			if (!_checkDBHandler(db, options)) return;
			db.transaction(function(tx) {
				return _private._sdataOperation(db, url, options, tx, "mark_deleted");
			});			
			
		},
		
		_sdataOperation:  function(db, sdataUrl, options, tx, op, newData) {
			var oldData = null;
			var doRemove = false;
			var after = function() {
				var _insertSDATA = function() {
					if (op == "remove") {
						if (options.success) options.success();
					} else if ((op == "mark_deleted") || (op == "cancel")) {
						var st = (op == "mark_deleted")?$.sdata.STATUS.DELETED:$.sdata.STATUS.ORIGINAL;
						if (oldData) {
							return _private._addSdata(db, tx, {url: sdataUrl, data: oldData, status: st}, options);
						} else {
							if (options.success) options.success();
						}
					
					} else if ((op == "add") && newData) {
						return _private._addSdata(db, tx, {url: sdataUrl, data: oldData, status: $.sdata.STATUS.ORIGINAL}, options);
						
					} else if (options.success) options.success();
				}
				if (doRemove) {
					tx.executeSql('DELETE FROM sdata where url=?', [sdataUrl],
						function() {
							_insertSDATA();
						}, 
						function() {
							//TODO ERROR	
							options.success();
						}
					);
				} else _insertSDATA();
			};
			tx.executeSql('SELECT * FROM sdata where url=?', [sdataUrl],
				function (tx, results) {
					var rows = results.rows;
					if (rows && rows.length) {
						var row = rows.item(0);
						if (row.status == $.sdata.STATUS.ORIGINAL) 	
							oldData = JSON.parse(row.data);
						else {
							oldData = row.original_data?JSON.parse(row.original_data):null;
							if (!oldData && (row.status == $.sdata.STATUS.DELETED))
								oldData = JSON.parse(row.data);
						}
						doRemove = true;
					 }
					 after();
				}, after
			);			
		},
		_createDraft : function(db, data, options) {
			if (!_checkDBHandler(db, options)) return;
			var purl = $.sdata.parseSdataUri(data.original_url);
			delete purl.query;
			var like= $.sdata.getUri(purl);
			data.entity_url=like;
			var _success = function (rows) {
				if (rows && rows.length) {
					db.transaction(function(tx) {
						_private._deleteDraftByIndex(db, tx, like, {
							success: function(){
									_private._insertDraft(db, tx, data, options);
								}
							}
						);
					});
				} else 
					_private._insertDraft(db, null,  data, options);
			};
			var _fail = function (error) {
				_private._insertDraft(db, null,  data, options);
			};
			_private._execOpen(db, 'SELECT data FROM draft where entity_url=?', 
				[like], {success: _success, fail: _fail });
		},
		_updateDraft : function(db, draftURL, data) {
			if (!_checkDBHandler(db, null)) return;
			_private._execSQL(db, null, 'UPDATE draft set data=? where workingCopy_url=?', 
				[JSON.stringify(data), draftURL], {success: function (){}});
		},
		_getSData:  function(db, purl, options) {
			if (!_checkDBHandler(db, options)) return;
			try {	
				if (purl.id ||  purl.template) {
					_private._execOpen(db, 'SELECT * FROM sdata where url=?', [purl.uri], { success: function (rows) {
						if (rows.length && _acceptStatut(rows.item(0), options)) {
							var row = rows.item(0);
							options.success(_addInfo(row, JSON.parse(row.data)), 
								{status: 200}
							);
						} else {
							options.success(null, {status: 404});
						}
					
					}, fail: function() {alert("fffffffffffff");}});
				
				} else if (purl.entity) {
					var result = {
						$url: purl.uri,
						"$resources": []
					};
					var newUrl = {query: null}, gmap=[], gvalues = {};
					$.extend(newUrl, purl);
					delete newUrl.query;
					var e_url = $.sdata.getUri(newUrl); 
					_private._execOpen(db, 'SELECT * FROM sdata where entity_url=?', [e_url], { success: function (rows) {
						if (rows.length) {
							var ha = new Array(rows.length);
							$.helpers.each(ha, function(value, index, next) {
								var row = rows.item(index);
								if (_acceptStatut(row, options))
									return _addResource(row, JSON.parse(row.data), result.$resources, purl, gmap, gvalues, function() {
										next();
									});
								return next();
							
							}, function() {
								if (purl.pgroupBy) 
									for (var ii in gvalues) result.$resources.push(gvalues[ii]);	
								_applySort(purl,result.$resources, options); 
								options.success(result, {status: 200});
							});
						} else {
							options.success(result, {status: 200});
						}
					
					}, fail: function() {alert("fffffffffffffffff");}});
				}
			} catch(ex) {
				console.log(ex);
			}
		},
		
		
		_loadDraft : function(db, draftURL, options) {
			if (!_checkDBHandler(db, options)) return;
			_private._execOpen(db, 'SELECT * FROM draft where workingCopy_url=?', [draftURL], { success: function (rows) {
				if (rows.length) {
					var row = rows.item(0);
					options.success({
							workingCopy_url: row.workingCopy_url,
							workingCopy_type: row.workingCopy_type,
							ui_url: row.ui_url,
							ui_type: row.ui_type,
							id: row.id,
							title: row.title,
							entity_url: row.entity_url,
							original_url: row.original_url,
							original_type: row.original_type,
							data: JSON.parse(row.data)
						}
					);
				} else {
					options.success(null);
				}
			
			}});
		
		},
		_getSyncData:  function(db, options) {	
			if (!_checkDBHandler(db, options)) return;
			var data = null;
			if (options.count) {
				_private._execOpen(db, 'SELECT count(*) as sync FROM sdata where status > ? and url like ?', 
					[$.sdata.STATUS.ORIGINAL, $.sdata.config.baseURL+'%'], { 
						success: function (rows) {
							if (rows && rows.length) {
								options.success(rows.item(0).sync);
							} else options.success(0);
						},
						fail: function() {
							options.success(0);
						}
					});
			} else {
				_private._execOpen(db, 'SELECT * FROM sdata where status > ? and url like ?', 
					[$.sdata.STATUS.ORIGINAL, $.sdata.config.baseURL+'%'], { 
						success: function (rows) {
							if (rows && rows.length) {
								for (var i = 0, len=rows.length; i<len; i++) {
									var row = rows.item(i);
									data = data || {};
									var purl = $.sdata.parseSdataUri(row.url); 
									var list = data[purl.entity] || [];
									data[purl.entity] = list;
									var rdata = JSON.parse(row.data);
									_addInfoPlus(row, rdata);
									list.push(rdata);
								
								}
								options.success(data);
							} else options.success(null);
						},
						fail: function() {
							options.success(null);
						}
					});
			}
		}, 
		_delData:  function(db, url, options) {	
			if (!_checkDBHandler(db, options)) return;
			if (!options.fail) options.fail = options.success;
			db.transaction(function(tx) {
				_private._deleteSdata(db, tx, url, options);
			})
		}, 
		_installApp: function(db, data, options) {
			if (!_checkDBHandler(db, options)) return;
			var _failTran = function(tx, error) {	
				$.helpers.pushdbError(error);
				if (options.success) return options.success();
			};
			
			db.transaction(function(tx) {
				var _after = function() {
					tx.executeSql("INSERT INTO apps(id, url, title, description, icon, baseURL, version, data) values(?,?,?,?,?,?,?,?)", 
						[data.id, data.url, data.title, data.description, data.icon, data.baseURL, data.version, JSON.stringify(data.data)],
						function (tx, result) { 
							if (options.success) return options.success();
						}, function(tx, error) {
							$.helpers.pushdbError(error);
							if (options.success) return options.success();
					});

				};
				tx.executeSql("delete from apps where url=? and baseURL= ?", 
					[data.url, data.baseURL], 
					function (tx, result) { 
						_after();
					}, function(tx, error) {
						_after();
					}
				);
			});
		},
		_removeFromDB: function(db, urls, options) {	
			if (!_checkDBHandler(db, options)) return;
			var _failTran = function(tx, error) {	
				$.helpers.pushdbError(error);
				if (options.success) return options.success();
			};
			db.transaction(function(tx) {
				$.helpers.each(urls, function(value, index, next) {
					if ((value.type == "template") || (value.type == "resource")) {
						return _private._execSQL(db, tx, 'DELETE from sdata where url=?', [value.url], {
							success: function(){ next();},
							fail: function(){ next();}
						});
					} else	if (value.type == "entity") {
						return _private._execSQL(db, tx, 'DELETE from sdata where entity_url=?', [value.url], {
							success: function(){ next();},
							fail: function(){ next();}
						});
					}  else	if (value.type == "application") {
						return _private._execSQL(db, tx, 'DELETE from apps where id=?', [value.url], {
							success: function(){ next();},
							fail: function(){ next();}
						});
						
					} else next();
				}, options.success);
			}, _failTran);
		},
		_getAppConfig: function(db, appId, options) {
			if (!_checkDBHandler(db, options)) return;
			_private._execOpen(db, 'SELECT * FROM apps where id=?', 
				[appId], { 
					success: function (rows) {
						if (rows && rows.length) {
							var cr = rows.item(0);
							var cdata = null;
							try {cdata = JSON.parse(cr.data); }catch(ex) {}
							cdata = cdata || {};
							cdata.id = cr.id;
							options.success(cdata);
						} else 
							options.success(null);
					
					}, 
					fail: function() {
						options.success(null);
					}
				}
			);
		},
		_getInstalledApps: function(db, grouped, options) {	
			if (!_checkDBHandler(db, options)) return;
			var results = [];
			_private._execOpen(db, 'SELECT * FROM apps ORDER BY  url', 
				[], { 
					success: function (rows) {
						if (rows && rows.length) {
							for(var i=0, len = rows.length; i< len; i++) {
								var data = rows.item(i);
								results.push({id:data.id, url: data.url, title: data.title,
									description:data.description, icon: data.icon, 
									baseURL: data.baseURL, version: data.version
								});
							}
						}
						options.success(results);
					}, 
					fail: function() {
						options.success(results);
					}
				}
			);
		},
		_undoUpdate:  function(db, url, options) {	
			if (!_checkDBHandler(db, options)) return;
			db.transaction(function(tx) {
				_private._sdataOperation(db, url, options, tx, "cancel");
			})
		},		
		_updsdataInfo: function (db, tx, url, info, options) {
			if (!_checkDBHandler(db, options)) return;
			var params = [];
			var sql = [];
			if (info.last_error != null) {
				sql.push('last_error=?'); 
				params.push(info.last_error);
			} 
			if (sql.length) {
				params.push(url);
				_private._execSQL(db, null, 'UPDATE sdata set '+ sql.join(", ")+ ' where url=?', 
					params, options);
			} else options.success();
		},
		_updData:  function(db, oldUrl, data, op, options) {	
			if (!_checkDBHandler(db, options)) return;
			var info = null;
			if (data.$info) {
				info = data.$info;
				delete data.$info;
			}
			var _failTran = function(tx, error) {	
				$.helpers.pushdbError(error);
				if (options.fail) return options.fail();
			};
			if (op.$delete)  {
				db.transaction(function(tx) {
					var _after = function() {
						var insdata = {url:$.sdata.$purl(data.$url),  data: data};
						if (op.oldValue) {
							insdata.status = $.sdata.STATUS.MODIFIED;
							insdata.original_data = insdata.data;
							insdata.data = op.oldValue;
							if (info && info.ui) insdata.ui_url = info.ui;
						}					
						
						if (info) {
							if (info.last_error) insdata.last_error = info.last_error;
						}
						_private._addSdata(db, tx, insdata, options);
					}
					_private._deleteSdata(db, tx, oldUrl, {
						success: _after,
						fail: function() {
							if (options.fail) return options.fail();
						}
					});
				}, _failTran)
			} else if (op.$updateInfo) {
				db.transaction(function(tx) {
					_private._updsdataInfo(db, tx, oldUrl, info, options);
				}, _failTran);
			} else  options.success();
		}, 
		_initData:  function(db, config, data, options) {
			if (!_checkDBHandler(db, options)) return;
			if (!options.fail) options.fail = options.success;
			db.transaction(function(tx) {
				if (data) {
					return _private._initData_one(db, config, data, tx, options);			
				} else {
					var fail = false;
					$.helpers.each(config, function(value, index, next) {
						if (fail) return next();
						if (options.setConfig) {
							$.sdata.config = {baseURL:value.$baseURI};
						}
						return _private._initData_one(db, value.value, value.data, tx, {
							success: next,
							fail: function(){
								fail = true;
								return next();
							}
						});
					}, function() {
						if (options.success) options.success();
					});				
				}	
			}, options.fail);
		},
		_initData_one:  function(db, config, data, tx, options) {	
			var afterDel = {
				success: function() {
					if (data) {
						if (config.onlyOne) {
							return _private._addSdata(db, tx,{data: data, url: config.url}, {success: function(){
								if (options.success) options.success();
							}});
						} else if (data.$resources) {
							return $.helpers.each(data.$resources, function(cr, index, next) {
								return _private._addSdata(db, tx,{data: cr, url: $.sdata.$purl(cr.$url)}, {success: function(){
									next();
								}});
							
							}, function() {
								options.success();
							});
						}
					} else	
						options.success();
				}, 
				fail: function() {
					options.fail();
					
				}
			};
			if (config.onlyOne) {
				return _private._delSdata(db, tx, config.url, afterDel);
			} else {
				return tx.executeSql("delete from sdata where entity_url= ?", [config.url],  afterDel.success, afterDel.fail);
			}
		}
		
	};
	
	/**
	 * @constructor
	 */
	function IndexedDBHandler() {
		this.init();
	};
	IndexedDBHandler.prototype = {
		init : function(){
			
		},
		check: function(dbcall, open) {
			var self = this;
			if (open) {
				return _indexDB._openDB({success: function(db) {
					if (!db) 
						$.helpers.pushdbError({message: $.helpers.messages.open_db_error});
					dbcall(db);
				}});
			}
			if (!self.db)  {
				_indexDB._openDB({success: function(db) {
					self.db = db;
					if (!self.db) {
						$.helpers.pushdbError({message: $.helpers.messages.open_db_error});
					}
					dbcall(self.db);
				}});
			} else dbcall(self.db);
		},
		createDraft:  function(data, options) {
			var self = this;
			self.check(function(db) { _indexDB._createDraft(db, data, options);});
		},
		updateDraft:  function(draftURL, data) {
			var self = this;
			self.check(function(db) { _indexDB._updateDraft(db, draftURL, data);});
		},
		deleteDraft:  function(draftURL, options) {
			var self = this;
			self.check(function(db) { 
				_indexDB._deleteDraft(db, null, draftURL, options);
			});
		},
		deleteDataByDraft:  function(draftURL, options) {
			var self = this;
			self.check(function(db) { 
				_indexDB._deleteDataByDraft(db, draftURL, options, null);
			});
		},
		
		deleteSDataByUrl:  function(url, options) {
			var self = this;
			self.check(function(db) { 
				_indexDB._deleteSDataByUrl(db, url, options, null);
			});
		},
		
		
		saveDraft:  function(draftURL, data, options) {
			var self = this;
			self.check(function(db) { 
				_indexDB._saveDraft(db, draftURL, data, options);
			});
		},
		loadDraft:  function(draftURL, options) {
			var self = this;
			self.check(function(db) { _indexDB._loadDraft(db, draftURL, options);});
		},
		getSData:  function(purl, options) {
			var self = this;
			self.check(function(db) {
				_indexDB._getSData(db, purl, options);
			});
		},
		
		initData:  function(config, data, options) {
			var self = this;
			self.check(function(db) { 
				_indexDB._initData(db, config, data, options);
			});
		},
		delData:  function(url, options) {	
			var self = this;
			self.check(function(db) { _indexDB._delData(db, url, options);});
		},
		undoUpdate:  function(url, options) {	
			var self = this;
			self.check(function(db) { _indexDB._undoUpdate(db, url, options);});
		},
		installApp:  function(data, options) {	
			var self = this;
			self.check(function(db) { _indexDB._installApp(db, data, options);});
		},
		removeFromDB: function(urls, options) {
			var self = this;
			self.check(function(db) { _indexDB._removeFromDB(db, urls, options);});
		},
		getAppConfig: function(appId, options) {
			var self = this;
			self.check(function(db) { _indexDB._getAppConfig(db, appId, options);});
		},
		
		getInstalledApps:  function(grouped, options) {	
			var self = this;
			self.check(function(db) { _indexDB._getInstalledApps(db, grouped, options);});
		},
		
		getSyncData:  function(options) {	
			var self = this;
			self.check(function(db) { _indexDB._getSyncData(db, options);});
		},
		getSyncCount:  function(options) {	
			var self = this;
			options.count = true;
			self.check(function(db) { _indexDB._getSyncData(db, options);});
		},
		
		updData:  function(oldUrl, data, op, options) {
			var self = this;
			self.check(function(db) { _indexDB._updData(db, oldUrl, data, op, options);});
		}
	};
	/**
	 * @constructor
	 */
	function DataBaseHandler() {
		this.init();
	};
	DataBaseHandler.prototype = {
		init : function(){
			
		},
		check: function(dbcall, open) {
			var self = this;
			if (open) {
				return _private._openDB({success: function(db) {
					if (!db) $.helpers.pushdbError({message: $.helpers.messages.open_db_error});
					dbcall(db);
				}});
			}
			if (!self.db)  {
				_private._openDB({success: function(db) {
					self.db = db;
					if (!self.db) $.helpers.pushdbError({message: $.helpers.messages.open_db_error});
					dbcall(self.db);
				}});
			} else dbcall(self.db);
		},
		createDraft:  function(data, options) {
			var self = this;
			self.check(function(db) { _private._createDraft(db, data, options);});
		},
		updateDraft:  function(draftURL, data) {
			var self = this;
			self.check(function(db) { _private._updateDraft(db, draftURL, data);});
		},
		deleteDraft:  function(draftURL, options) {
			var self = this;
			self.check(function(db) { _private._deleteDraft(db, null, draftURL, options);});
		},
		deleteDataByDraft:  function(draftURL, options) {
			var self = this;
			self.check(function(db) { 
				_private._deleteDataByDraft(db, draftURL, options, null);
			});
		},
		
		deleteSDataByUrl:  function(url, options) {
			var self = this;
			self.check(function(db) { 
				_private._deleteSDataByUrl(db, url, options, null);
			});
		},
		
		saveDraft:  function(draftURL, data, options) {
			var self = this;
			self.check(function(db) { 
				_private._saveDraft(db, draftURL, data, options);
			});
		},
		loadDraft:  function(draftURL, options) {
			var self = this;
			self.check(function(db) { _private._loadDraft(db, draftURL, options);});
		},
		getSData:  function(purl, options) {
			var self = this;
			self.check(function(db) { _private._getSData(db, purl, options);});
		},
		initData:  function(config, data, options) {
			var self = this;
			self.check(function(db) { _private._initData(db, config, data, options);});
		},
		delData:  function(url, options) {	
			var self = this;
			self.check(function(db) { _private._delData(db, url, options);});
		},
		undoUpdate:  function(url, options) {	
			var self = this;
			self.check(function(db) { _private._undoUpdate(db, url, options);});
		},
		getInstalledApps:  function(grouped, options) {	
			var self = this;
			self.check(function(db) { _private._getInstalledApps(db, grouped, options);});
		},
		installApp:  function(data, options) {	
			var self = this;
			self.check(function(db) { _private._installApp(db, data, options);});
		},
		removeFromDB: function(urls, options) {
			var self = this;
			self.check(function(db) { _private._removeFromDB(db, urls, options);});
		},
		
		getAppConfig: function(appId, options) {
			var self = this;
			self.check(function(db) { _private._getAppConfig(db, appId, options);});
		},
		getSyncData:  function(options) {	
			var self = this;
			self.check(function(db) { _private._getSyncData(db, options);});
		},
		getSyncCount:  function(options) {	
			var self = this;
			options.count = true;
			self.check(function(db) { _private._getSyncData(db, options);});
		},
		
		updData:  function(oldUrl, data, op, options) {
			var self = this;
			self.check(function(db) { _private._updData(db, oldUrl, data, op, options);});
		}		
		
		
	};
	if (indexedDB && !window.openDatabase) {
		var idb = new IndexedDBHandler();
		$.sdata.createDraft = function(data, options) { 
			$.sdata.useCacheCount = false;
			idb.createDraft(data, options); 
		};
		$.sdata.updateDraft = function(draftURL, data) { 
			$.sdata.useCacheCount = false;
			idb.updateDraft(draftURL, data); 
		};
		$.sdata.loadDraft = function(draftURL, options) { 
			idb.loadDraft(draftURL, options); 
		};
		$.sdata.deleteDraft = function(draftURL, options) { 
			$.sdata.useCacheCount = false;
			idb.deleteDraft(draftURL, options); 
		};
		$.sdata.saveDraft = function(draftURL, data, options) { 
			$.sdata.useCacheCount = false;
			idb.saveDraft(draftURL, data, options); 
		};
		$.sdata.getSData = function(url, options) { 
			idb.getSData(url, options); 
		};
		$.sdata.initData = function(config, data, options) { 
			$.sdata.useCacheCount = false;
			idb.initData(config, data, options); 
		};
		$.sdata.updData = function(oldUrl, data, op, options) { 
			$.sdata.useCacheCount = false;
			idb.updData(oldUrl, data, op, options); 
		};
		$.sdata.delData = function(url, options) { 
			$.sdata.useCacheCount = false;
			idb.delData(url, options); 
		};
		$.sdata.deleteDataByDraft = function(draftURL, options) { 
			$.sdata.useCacheCount = false;
			idb.deleteDataByDraft(draftURL, options); 
		};
		$.sdata.deleteSDataByUrl = function(url, options) { 
			$.sdata.useCacheCount = false;
			idb.deleteSDataByUrl(url, options); 
		};
		$.sdata.getSyncData = function(options) { idb.getSyncData(options); };
		$.sdata.getSyncDataCount = function(options) { idb.getSyncCount(options); };
		$.sdata.undoUpdate = function(url, options) { 
			$.sdata.useCacheCount = false;
			idb.undoUpdate(url, options); 
		};
		$.sdata.getInstalledApps = function(grouped, options) { idb.getInstalledApps(grouped, options); };
		$.sdata.installApp = function(data, options) { idb.installApp(data, options); };
		$.sdata.getAppConfig = function(appid, options) { idb.getAppConfig(appid, options); };
		$.sdata.removeFromDB = function(urls, options) { idb.removeFromDB(urls, options); };
		
	} else if (window.openDatabase) {
		var mobiledb = new DataBaseHandler();
		$.sdata.createDraft = function(data, options) { 
			$.sdata.useCacheCount = false;
			mobiledb.createDraft(data, options); 
		};
		$.sdata.updateDraft = function(draftURL, data) { 
			$.sdata.useCacheCount = false;
			mobiledb.updateDraft(draftURL, data); 
		};
		$.sdata.loadDraft = function(draftURL, options) { mobiledb.loadDraft(draftURL, options); };
		$.sdata.deleteDraft = function(draftURL, options) { 
			$.sdata.useCacheCount = false;
			mobiledb.deleteDraft(draftURL, options); 
		};
		$.sdata.saveDraft = function(draftURL, data, options) { 
			$.sdata.useCacheCount = false;
			mobiledb.saveDraft(draftURL, data, options); 
		};
		$.sdata.getSData = function(url, options) { mobiledb.getSData(url, options); };
		$.sdata.initData = function(config, data, options) {
			$.sdata.useCacheCount = false;
			mobiledb.initData(config, data, options); 
		};
		$.sdata.updData = function(oldUrl, data, op, options) {
			$.sdata.useCacheCount = false;
			mobiledb.updData(oldUrl, data, op, options); 
		};
		$.sdata.delData = function(url, options) { 
			$.sdata.useCacheCount = false;
			mobiledb.delData(url, options); 
		};
		$.sdata.deleteDataByDraft = function(draftURL, options) { 
			$.sdata.useCacheCount = false;
			mobiledb.deleteDataByDraft(draftURL, options); 
		};
		$.sdata.deleteSDataByUrl = function(url, options) { 
			$.sdata.useCacheCount = false;
			mobiledb.deleteSDataByUrl(url, options); 
		};
		$.sdata.getSyncData = function(options) { mobiledb.getSyncData(options); };
		$.sdata.getSyncDataCount = function(options) { mobiledb.getSyncCount(options); };
		$.sdata.undoUpdate = function(url, options) { 
			$.sdata.useCacheCount = false;
			mobiledb.undoUpdate(url, options); 
		};
		$.sdata.getInstalledApps = function(grouped, options) { mobiledb.getInstalledApps(grouped, options); };
		$.sdata.installApp = function(data, options) { mobiledb.installApp(data, options); };
		$.sdata.getAppConfig = function(appid, options) { mobiledb.getAppConfig(appid, options); };
		$.sdata.removeFromDB = function(urls, options) { mobiledb.removeFromDB(urls, options); };
	} 

})(jQuery);    
