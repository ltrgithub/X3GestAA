//TODO replace fff
(function($) {
	'use strict';
	var version = 1;
	var that = $.sdatadb || {};
	$.sdatadb = that;
	var dbName = "sage-mge-test";
	var _checkDBHandler = function(db,cb) {
		if (!db) {
			cb(null, true);
			return false;
		}
		return true;
	};
	
	if ( "webkitIndexedDB" in window ) {
		window.indexedDB      = window.webkitIndexedDB;
		window.IDBTransaction = window.webkitIDBTransaction;
		window.IDBKeyRange    = window.webkitIDBKeyRange;
		window.IDBDatabaseException = window.webkitIDBDatabaseException;
	}	
	var indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB;
	if (indexedDB) {
		if (!window.IDBTransaction.READ_WRITE) {
			window.IDBTransaction.READ_ONLY = "readonly";
			window.IDBTransaction.READ_WRITE = "readwrite";
		}
	}
	var _tables = {
		migration: { columns: { version:  {def: "version text"} }},
		draft: { columns: {
					id:  {def: "id TEXT  PRIMARY KEY"}, // uuuid of working copy
					appid:  {def: "appid TEXT"}, //application id
					original_url:  {def: "original_url TEXT"}, //original url  template or resource
					representation:  {def: "representation TEXT"}, // representation 
					data:  {def: "data TEXT"},
					original_data:  {def: "original_data TEXT"}
				}
		},
		sdata: {columns:{
					appid:  {def: "appid TEXT"}, /*application id */
					url:  {def: "url TEXT PRIMARY KEY"}, /* appid + ressource or template */
					entity_url:  {def: "entity_url TEXT"}, /* used for select */
					data:  {def: "data TEXT"},
					original_data:  {def: "original_data TEXT"},
					status: {def: "status integer"}, // modified, original, deleted  
					representation:  {def: "representation TEXT"}, // representation 
					updated:  {def: "updated TEXT"}, // $updated
					last_error:  {def: "last_error TEXT"}
				}
		},
		apps: {columns:{
					id:  {def: "id TEXT PRIMARY KEY"}, /* uuid of application*/
					url:  {def: "url TEXT"},   /* url of application*/
					title:  {def: "title TEXT"},  /* application name (title)*/
					description:  {def: "description TEXT"},  /* application description + (endpoint) */
					icon:  {def: "icon TEXT"}, /* Icon name */
					baseURL:  {def: "baseURL TEXT"}, /* baseURL for mobile application http(s)://host:port/sdata/application/contract/dataset/ */
					version:  {def: "version TEXT"}, /* not used */
					data:  {def: "data TEXT"} /* application structure*/
				}
		}
		
	};
	var _sqlLiteGetSQL = function(tableName) {
		var sql = ["CREATE TABLE IF NOT EXISTS"];
		sql.push(tableName);
		sql.push("(");
		var columns = _tables[tableName].columns;
		Object.keys(columns).forEach(function(columnName, index){
			sql.push((index?",":"") +  columns[columnName].def);
		});
		sql.push(")");
		return sql.join(" ");
	};	
	var _applySort = function(purl, res, options) {
		var sort = $.helpers.sdataSort(purl.query);
		if (sort) {
			$.helpers.applySDataSort(sort, res);
		}
	
	};	
	
	var _acceptStatut = function(row, options) {
		if (options.$modified) { 
			return (row.status != $.sdata.STATUS.ORIGINAL)
		} else if (row.status >= $.sdata.STATUS.DELETED)
			return false;
		return true;
	};	
	var _addInfo = function(row, data) {
		if (data) {
			data.$info = {
				status: row.status,
				last_error:  row.last_error
			};
		}
		return data;
	};	
	var _addResource = function(row, data, resources,purl, values, map, _after) {
		if (data) {
			/* apply where */
			if (!$.sdata.execWhere(data, purl.pwhere)) return _after();
			/* get selected */
			var selected= data; 
			
			if (purl.pgroupBy) {
				var key = "", stag ="", filter ="", create = false;
				purl.pgroupBy.forEach(function(field, index){
					var v = $.sdata.syncGetValue(selected,field.name);
					if (field.func) v = $.sdata.applyFunc(v, field.func); 
					key = key  + stag + v;
					stag = "#";
				});
				var i = values.indexOf(key);
				if (i < 0) {
					create = true;
					values.push(key);
					i = values.length-1; 
					map[i+""] = {};
				}
				$.sdata.addSelected(data, purl.pselected, map[i+""], create);
			} else {
				selected.$info = {
					status: row.status,
					last_error:  row.last_error
				};
				resources.push(selected);
			}
		}
		_after();
	};	
	
	
	/**
	* @param {{url: string, data: {$updated: string, $info: Object}}} data
	*/	 
	var _checkSdataData = function(data) {
			data.appid = $.sdata.config.id;
			var purl = $.sdata.parseSdataUri(data.url); 
			if (data.url.indexOf("?appid=") < 0)
				data.url = data.url + "?appid="+$.sdata.config.id;
			delete purl.id;
			delete purl.query;
			data.entity_url = $.sdata.getUri(purl); 
			if (data.data) {
				delete data.data.$info;
				delete data.data.$trackingId;
			}
			data.status =  data.status || $.sdata.STATUS.ORIGINAL;
			data.updated = (data.data?(data.data.$updated || data.data.$updDate || (new Date()).toISOString()):(new Date()).toISOString());
			data.last_error = data.last_error || "";
			data.representation = data.representation || "";
		};
	var _addInfoPlus = function(purl, row, data, proto) {
		_addInfo(row, data);
		delete purl.query;
		data.$info.representation = row.representation;
		data.$info.url = $.sdata.getUri(purl); 
		data.$info.title = $.proto.parseExpression(proto.$value, {data: data, $prototype: proto});
		return data;
	};
	
	var _indexDB = {
		version : version,
		_createObjectStore: function(db) {
			if(db.objectStoreNames.contains("draft")) db.deleteObjectStore("draft");
			if(db.objectStoreNames.contains("sdata")) db.deleteObjectStore("sdata");
			if(db.objectStoreNames.contains("apps")) db.deleteObjectStore("apps");
			var objectStore = db.createObjectStore("draft", { keyPath: "id" });
			objectStore.createIndex("appid", "appid", { unique: false }); 
			objectStore.createIndex("original_url", "original_url", { unique: false }); 
			
			objectStore = db.createObjectStore("sdata", { keyPath: "url" });
			objectStore.createIndex("appid", "appid", { unique: false }); 
			objectStore.createIndex("entity_url", "entity_url", { unique: false }); 
			objectStore.createIndex("status", "status", { unique: false }); 
			objectStore = db.createObjectStore("apps", { keyPath:"id"});
			objectStore.createIndex("url", "url", { unique: false}); 
		},
		_openDB: function(ccb) {
			var upgrade = false;
			var cb = function(data, error) {
				if (!upgrade) ccb(data, error);
			}
			try {
				var  request = indexedDB.open(dbName, _indexDB.version);
			} catch(ex) {
				$.helpers.pushException(ex,$.smobile.locale().ui.no_db_support_sol);
				return cb(null, ex);			
			}
			try {
				request.onupgradeneeded = function(e) {
					upgrade = true;
					var db = (e.target.result || e.target.source);
					_indexDB._createObjectStore(db);
				};	
			} catch(ex) {
			}
			request.onsuccess = function(e) {
				var db = (e.target.result || e.target.source);
				if (!db.setVersion && (_indexDB.version != db.version)) {
					var sdv = db.setVersion(_indexDB.version);
					sdv.onsuccess =function(e) {
						_indexDB._createObjectStore(db);
						cb(db);
					};
					sdv.onerror = function(e) {
						$.helpers.pushdbError(e);
						cb(null, e);
					};
				} else {
					cb(db);
				}
			};
			request.onerror = function(e) {
				$.helpers.pushdbError(e);
				cb(null, e);
			};
		},
		//ok
		_getSDataByUrl: function(url, objectstore, cb) {
			var lurl = (url.indexOf("?appid=") < 0)?(url +"?appid=" + $.sdata.config.id):url;		
			var sdr = objectstore.get(lurl);
			sdr.onerror=function(event) {cb(null, event);};
			sdr.onsuccess=function(event) {cb(event.target.result);};
		},
		//ok
		_rmvSDataByUrl: function(url, objectstore, cb) {
			var lurl = (url.indexOf("?appid=") < 0)?(url +"?appid=" + $.sdata.config.id):url;
			var sdr = objectstore["delete"](lurl);
			sdr.onerror=function(event) {cb(null, event);};
			sdr.onsuccess=function(event) {cb(null);};
		},
		//ok
		_insertSdata: function(data, objectStore, cb) {
			_checkSdataData(data);
			var request = objectStore.add(data);
			request.onerror=function(event) {
				cb(null, event);
			};
			request.onsuccess=function(event) {
				cb(null);
			};
		},
		//ok
		_updSDataByUrl: function(url, data, objectStore, cb) {
			_checkSdataData(data);
			var request = objectStore.put(data);
			request.onerror=function(event) {
				cb(null, event);
			};
			request.onsuccess=function(event) {
				cb(null);
			};
		},
		//ok
		_saveDraft:  function(db, id, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["draft"], IDBTransaction.READ_ONLY); 
			var objectStore = tx.objectStore("draft");  
			var request = objectStore.get(id);
			request.onsuccess= function(event) {
				if (event.target.result) {	
					var cdata = event.target.result;
					var purl = $.sdata.parseSdataUri(cdata.original_url); 
					//save data in database 
					var tnx = db.transaction(["sdata", "draft"], IDBTransaction.READ_WRITE), createActivity=false; 
					if (purl.template) {
						createActivity = true
						purl.template = false;
						purl.id = cdata.data.$uuid;
					}
					purl.createActivity = false;
					purl.editActivity = false;
					delete purl.query;
					var url = $.sdata.getUri(purl); 
					var insData = {
						url: url,
						representation: cdata.representation,
						data: data,
						original_data: cdata.original_data
					}
					delete cdata.original_data;
					var sdataObj = tnx.objectStore("sdata");
					_indexDB._getSDataByUrl(url, sdataObj, function(data, error) {
						//$.sdata.STATUS.MODIFIED
						if (data) {
							if (data.status === $.sdata.STATUS.DELETED) {
								// deleted
								return _indexDB._deleteDraft(db, tnx,  id, function(data, error){
									cb({status: 404});
								});
							}
							if ((data.status === $.sdata.STATUS.ORIGINAL) || (data.status === $.sdata.STATUS.MODIFIED)) {
								if (data.status === $.sdata.STATUS.ORIGINAL) { 
									insData.original_data = $.extend(true, {}, data.data);
									insData.status = $.sdata.STATUS.MODIFIED;
								} else if (data.status === $.sdata.STATUS.MODIFIED) {
									insData.original_data = $.extend(true, {}, data.original_data);
									insData.status = $.sdata.STATUS.MODIFIED;
								}
								delete insData.data.$info;
								delete insData.data.$trackingId;
								if (insData.original_data) {
									delete insData.original_data.$info;
									delete insData.original_data.$trackingId;
									if (JSON.stringify(insData.original_data) === JSON.stringify(insData.data)) {
										delete insData.original_data;
										insData.status = $.sdata.STATUS.ORIGINAL;
										if (!$.sdata.store(insData.url)) {
											// delete sdata record & delete draft
											return _indexDB._rmvSDataByUrl(insData.url, sdataObj, function(data, error) {	
												_indexDB._deleteDraft(db, tnx,  id, function(data, error){
														cb({status: 200});
												});
											});
										}
									}									
								}
							} else {
								//$.sdata.STATUS.CREATED
								insData.status = $.sdata.STATUS.CREATED;
							}
							// update sdata record and delete draft								
							return _indexDB._updSDataByUrl(insData.url, insData, sdataObj, function(data, error) {	
								_indexDB._deleteDraft(db, tnx,  id, function(data, error){
										cb({status: 200});
								});
							});
						} else {
							if (createActivity) { 
								insData.status = $.sdata.STATUS.CREATED;
								delete insData.original_data;
								
							} else {
								insData.status = $.sdata.STATUS.MODIFIED;
							}
							delete insData.data.$info;
							delete insData.data.$trackingId;
							if (insData.original_data) {
								delete insData.original_data.$info;
								delete insData.original_data.$trackingId;
								if (JSON.stringify(insData.original_data) === JSON.stringify(insData.data)) {
									delete insData.original_data;
									insData.status = $.sdata.STATUS.ORIGINAL;
									return _indexDB._deleteDraft(db, tnx,  id, function(data, error){
										cb({status: 404});
									});
								}									
							}
							// create record  && delete draft
							_indexDB._insertSdata(insData, sdataObj, function(data, error) {	
								_indexDB._deleteDraft(db, tnx,  id, function(data, error){
									cb({status: 200});
								});
							});
						}
					});
				} else  {
					cb({status: 404});
				}
			};
			request.onerror= function(event) {
				$.helpers.pushdbError(event);
				cb({status: 404}, event);
			};
		},
		//OK
		_deleteDataByDraft:  function(db, id, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var tx =  db.transaction(["draft", "sdata"], IDBTransaction.READ_WRITE); 
			try {
				var objectStore = tx.objectStore("draft");  
				var request = objectStore.get(id); 
				request.onsuccess = function(event) {  	
					if (event.target.result) {	
						var cdata = event.target.result;
						var url = cdata.original_url;
						var sdataObj = tx.objectStore("sdata");
						_indexDB._markSdataSeleted(url,sdataObj, (cdata.original_data?cdata.original_data:cdata.data), function(data, error){
							return _indexDB._deleteDraft(db, tx,  id, function(data, error){
								cb(null);
							});
							
						});
						
						//
					} else cb(null);
				
				}
				request.onerror = function(event) {  
					cb(null);
				}
			}catch(ex) {
				console.log(ex);
			}
		},
		//ok
		_markSdataSeleted: function(o_url, sdataObj, odata, cb) {
			var purl = $.sdata.parseSdataUri(o_url), createActivity = false; 
			var rep = (purl.query?purl.query.representation:"")
			if (purl.template) {
				createActivity = true
				purl.template = false;
				purl.id = odata.$uuid;
			}
			delete purl.query;
			purl.createActivity = false;
			purl.editActivity = false;
			var url = $.sdata.getUri(purl); 
			_indexDB._getSDataByUrl(url, sdataObj, function(data, error) {	
				if (data) {
					if (data.status === $.sdata.STATUS.DELETED) {
						return cb(null);
					} else if (data.status === $.sdata.STATUS.MODIFIED) {
						
						// mark deleted
						var insData = {
							appid: data.appid,
							url: data.url,
							data: data.original_data?data.original_data:data.data,
							original_data: null,
							status:  $.sdata.STATUS.DELETED,
							representation: data.representation
						};
						return _indexDB._updSDataByUrl(insData.url, insData, sdataObj, function(data, error) {	
							return cb(null);
						});
					} else if (data.status === $.sdata.STATUS.CREATED) {
						// remove sdata record 
						return _indexDB._rmvSDataByUrl(url, sdataObj, function(data, error) {	
							return cb(null);
						});
					}
				} else {
					if (createActivity) return cb(null);
					// edit 
					var newData = {
						url: url,
						data: odata,
						original_data: null,
						status:  $.sdata.STATUS.DELETED,
						representation: rep
					};
					_indexDB._insertSdata(newData, sdataObj, function(data, error) {	
						return cb(null);
					});
				}
			});
		},
		
		//OK
		_deleteDraft:  function(db, tx,  id, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var tx = tx || db.transaction(["draft"], IDBTransaction.READ_WRITE); 
			try {
				var objectStore = tx.objectStore("draft");  
				var request = objectStore["delete"](id);
				request.onsuccess= function(event) { cb(null); }
				request.onerror= function(event) { 
					$.helpers.pushdbError(event);
					cb(null, event); 
				}
			} catch(ex) {
				$.helpers.pushdbError(ex);
				cb(null, ex);
			}
		},
		//OK
		_uninstallDraft:  function(draft, sdata,id, cb) {
			try {	
				var index = draft.index("appid"); 
				var keyRange = IDBKeyRange.only(id);
				var request = index.openCursor(keyRange);  
				request.onsuccess = function(event) {  
					if (event.target.result) {
						var cr = event.target.result;
						cr["delete"]();  
						cr["continue"]();
					} else
						_indexDB._uninstallSdata(sdata, id, cb);
				};
				request.onerror = function(event) {  
					_indexDB._uninstallSdata(sdata, id, cb);
				}
			}catch(ex) {
				console.log(ex);
			}
		},
		_uninstallSdata:  function(sdata,  id, cb) {
			var index = sdata.index("appid"); 
			var keyRange = IDBKeyRange.only(id);
			try {	
				var request = index.openCursor(keyRange);  
				request.onsuccess = function(event) {  
					if (event.target.result) {
						var cr = event.target.result;
						cr["delete"]();  
						cr["continue"]();
					} else
						cb();
				};
				request.onerror = function(event) {  
					cb();
				}
			}catch(ex) {
				console.log(ex);
			}
		},
		//OK
		_updateDraft : function(db, draftId, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			try {
				var tx = db.transaction(["draft"], IDBTransaction.READ_ONLY); 
				var objectStore = tx.objectStore("draft"); 
				var request = objectStore.get(draftId);
				request.onsuccess = function(event) {
					if (event.target.result) {
						var cd = event.target.result;
						cd.data  = data;
						_indexDB._deleteDraft(db, null, draftId, function(data, error){
							if (error) return cb(null, event);
							var tnx = db.transaction(["draft"], IDBTransaction.READ_WRITE); 
							var os = tnx.objectStore("draft"); 
							var prequest = os.add(cd);
							prequest.onsuccess= function(event) {
								cb(null);
							};
							prequest.onerror= function(event) {
								cb(null, event);
							};
						});
					} else cb(null);
				};
				request.oerror=function(event) {
					cb(null, event);;
				};
			} catch (ex) {
				console.log(ex);
			}
		},
		/*
		_addSdata: function(db, tx, data, objectStore, options) {
			if (!_checkDBHandler(db, options)) return;
			tx = tx || db.transaction(["sdata"], IDBTransaction.READ_WRITE); 
			objectStore = objectStore || tx.objectStore("sdata"); 
			_checkSdataData(data);
			var request = objectStore.add(data);
			request.onsuccess=request.onerror=function() {
				options.success();
			};
		},
		_delSdata: function(db, tx, url, options) {
			if (!_checkDBHandler(db, options)) return;
			tx = tx || db.transaction(["sdata"], IDBTransaction.READ_WRITE); 
			var objectStore = tx.objectStore("sdata"); 
			var request = objectStore["delete"](url);
			request.onsuccess=request.onerror=function() {
				options.success();
			};
		},
		*/
		_insertDraft : function(db, tx, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var objectStore = tx.objectStore("draft");  
			var request = objectStore.add(data);
			request.onsuccess= function(event) {
				cb(data);
				
			};
			request.onerror= function(event) {
				$.helpers.pushdbError(event);
				cb(null, event);
			};
		},
		_getSData:  function(db, purl, options) {	
			if (!_checkDBHandler(db, options.success)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_ONLY), request; 
			var objectStore = tx.objectStore("sdata"); 
			try {	
				if (purl.id ||  purl.template) {
					request =  objectStore.get(purl.uri);
					request.onsuccess = function(event) {
						if (event.target.result && _acceptStatut(event.target.result, options)) {
							options.success(_addInfo(event.target.result, event.target.result.data),  {status:200});
						} else options.success(null, {status:404});
					};
					request.onerror= function(event) {	
						options.success(null, {status:404});
					}
				} else if (purl.entity) {
					var result = {
						$url: purl.uri,
						"$resources": []
					};
					var newUrl = {query: null}, gmap=[], gvalues = {};
					$.extend(newUrl, purl);
					delete newUrl.query;
					var e_url = $.sdata.getUri(newUrl); 
					
					var index = objectStore.index("entity_url"); 
					var keyRange = IDBKeyRange.only(e_url);
					request = index.openCursor(keyRange);  
					request.onsuccess = function(event) {  	
						var cr = event.target.result;
						if (cr) {
							if (_acceptStatut(cr.value, options))  
								_addResource(cr.value, cr.value.data, result.$resources, purl, gmap, gvalues, function(){
									cr["continue"]();  
								});
							
						} else {
							if (purl.pgroupBy) 
								for (var ii in gvalues) result.$resources.push(gvalues[ii]);	
							_applySort(purl,result.$resources, options); 
							options.success(result, {status:200});
						}
					};
					request.onerror = function(event) {  
						if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
							options.success(result, {status:200});
						} else options.success("", {status:500});
					}					
				}
			} catch(ex) {
				console.log(ex);
			}
		},
		_getModifiedData:  function(db, purl, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_ONLY); 
			var objectStore = tx.objectStore("sdata");  
			var index = objectStore.index("status"); 
			var appid = ($.sdata.config?$.sdata.config.id:"");
			var eu = $.sdata.entityUri(purl);
			var keyRange = IDBKeyRange.lowerBound($.sdata.STATUS.ORIGINAL, true);
			var crequest = index.openCursor(keyRange), res={}; 
			crequest.onsuccess = function(event) {
				var cr = event.target.result;
				if (cr) {
					if ((cr.value.appid === appid) && (cr.value.entity_url === eu)) {	
						var data = cr.value.data;
						res[data.$uuid || data.$key] = cr.value;
					}
					cr["continue"]();  
				} else {
					cb(res);
				}
			};
			crequest.onerror = function(event) {
				 cb(res);
			}	
		},
		//ok
		_getSyncData:  function(db, count, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_ONLY); 
			var objectStore = tx.objectStore("sdata");  
			var index = objectStore.index("status"); 
			var appid = ($.sdata.config?$.sdata.config.id:"");
			var keyRange = IDBKeyRange.lowerBound($.sdata.STATUS.ORIGINAL, true);
			if (count) {
				var crequest = index.openCursor(keyRange), cc=0; 
				crequest.onsuccess = function(event) {
					var cr = event.target.result;
					if (cr) {
						if (cr.value.appid === appid) cc++;
						cr["continue"]();  
					} else {
						cb(cc);
					}
				};
				crequest.onerror = function(event) {
					 cb(0);
				}	
				
			} else {
				var data = null;
				var request = index.openCursor(keyRange);  
				request.onsuccess = function(event) {
					var cr = event.target.result;
					if (cr) {
						if (cr.value.appid === appid) {
							var purl = $.sdata.parseSdataUri(cr.value.url); 
							data = data || {};
							var list = data[purl.entity] || [];
							data[purl.entity] = list;
							var rdata = cr.value.data;
							_addInfoPlus(purl, cr.value, rdata, $.sdata.config.pages[cr.value.representation].$prototype);
							list.push(rdata);
						}
						cr["continue"]();  
					} else {
						cb(data);
					}
				};
				request.onerror = function(event) {
					 cb(null);
				}	
			}
		}, 
		// ok
		_undoUpdate:  function(db, url, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var tx =  db.transaction(["sdata"], IDBTransaction.READ_WRITE); 
			try {
				var sdataObj = tx.objectStore("sdata");
				_indexDB._getSDataByUrl(url, sdataObj, function(data, error) {
					if (data) {
						if (!$.sdata.store(url) || (data.status===$.sdata.STATUS.CREATED)) {
							// delete sdata record
							return _indexDB._rmvSDataByUrl(url, sdataObj, function(data, error) {
								cb(null);
							});	
							
						} else {
							var insData = {
								appid: data.appid,
								url: data.url,
								data: data.original_data?JSON.parse(data.original_data):JSON.parse(data.data),
								original_data: null,
								status:  $.sdata.STATUS.ORIGINAL,
								representation: data.representation
							};
							return _indexDB._updSDataByUrl(url, insData, sdataObj, function(data, error) {	
								cb(null);
							});
						}
					}
					cb(null);
					
				});
			}catch(ex) {
				console.log(ex);
			}
		},
		
		_installApp: function(db, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["apps"], IDBTransaction.READ_WRITE); 
			var objectStore = tx.objectStore("apps"); 
			var index = objectStore.index("url"); 
			var keyRange = IDBKeyRange.only(data.url);
			var request = index.openCursor(keyRange);
			var doInsert = function() {
				var reqt = objectStore.add(data);
				reqt.onerror = function(event) {  
					$.helpers.pushdbError(event);
					cb();
				};
				reqt.onsuccess = function(event) {  	
					cb();
				}
				
			};
			request.onsuccess = function(event) {  	
				var cr = event.target.result;
				if (cr) {
					if (cr.value.baseURL == data.baseURL)
						cr["delete"]();  
					cr["continue"]();  
				} else {
					doInsert();
				}
			};
			request.onerror = function(event) {  
				if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
					doInsert();
				} else {
					$.helpers.pushdbError(event);
					cb();
				}
			};					
			
		},
		//ok
		_removeFromDB: function(db, id, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["apps", "draft", "sdata"], IDBTransaction.READ_WRITE);
			var sdata = tx.objectStore("sdata");
			var draft = tx.objectStore("draft");
			_indexDB._uninstallDraft(draft, sdata,  id, function(){
				var apps  = tx.objectStore("apps");
				var rmvapp  =  apps["delete"](id);
				rmvapp.onsuccess = function(event) { 
					cb();
				}
				rmvapp.onerror = function(event) {
					if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) 
						return cb();
					$.helpers.pushdbError(event);
					cb();
				}
				
			});
		},
		_getAppConfig: function(db, appId, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["apps"], IDBTransaction.READ_ONLY); 
			var objectStore = tx.objectStore("apps"); 
			var request = objectStore.get(appId);
			request.onsuccess = function(event) {  	
				var cr = event.target.result;
				if (cr) {
					cr.data.id = cr.id;
					var res = $.extend(true, {}, cr.data);
					res.$info = {url: cr.url, version: cr.version, title:cr.title, icon: cr.icon};
					cb(res);
				} else 
					cb(null);
			};
			request.onerror = function(event) {  
				$.helpers.pushdbError(event);
				cb(null, event);
			};					
		},
		_getInstalledApps: function(db, grouped, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["apps"], IDBTransaction.READ_ONLY); 
			//var tx = db.transaction("apps", "readonly");//IDBTransaction.READ_ONLY); 
			var objectStore = tx.objectStore("apps"); 
			var index = objectStore.index("url"); 
			var request = index.openCursor();
			var results = [];
			request.onsuccess = function(event) {  	
				var cr = event.target.result;
				if (cr) {
					var data = cr.value;
					results.push({id:data.id, url: data.url,  title: data.title,
						description:data.description, icon: data.icon, 
						baseURL: data.baseURL, version: data.version
						});
					cr["continue"]();  
				} else {
					cb(results);
				}
			};
			request.onerror = function(event) {  
				if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
					cb(results);
				} else {
					$.helpers.pushdbError(event);
					cb(results);
				}
			};					
		},
		//ok 
		_delData:  function(db, url, cb) {	
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_WRITE); 
			var sdata = tx.objectStore("sdata"); 
			_indexDB._rmvSDataByUrl(url, sdata, cb);
		}, 
		//ok
		_updData:  function(db, oldUrl, data, cb) {	
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_WRITE); 
			var sdata = tx.objectStore("sdata"); 
			data.url = oldUrl;
			var _updSdata = function() {
				if ((data.status === $.sdata.STATUS.ORIGINAL) && !$.sdata.store(oldUrl))
					return _indexDB._rmvSDataByUrl(oldUrl, sdata, function(dd, error) {	
						cb(null, error);
					});
				else
					return _indexDB._updSDataByUrl(oldUrl, data, sdata, function(dd, error) {	
						cb(null, error);
					});
			
			}			
			if (data.$load) {
				delete data.$load;
				_indexDB._getSDataByUrl(data.url, sdata, function(gdata, error) {
					Object.keys(data).forEach(function (value) {
						gdata[value] = data[value];
					});
					data = gdata;
					_updSdata();
				});
			} else {
				_updSdata();
			}
			
		}, 
		_initData:  function(db, config, data, options) {	
			if (!_checkDBHandler(db, options.success)) return;
			var tx = db.transaction(["sdata"], IDBTransaction.READ_WRITE), request; 
			tx.oncomplete = function(event) {
			};
			tx.onabort = function(event) {
			};
			var fail = false;
			var objectStore = tx.objectStore("sdata"); 
			if (data) {
				return _indexDB._initData_one(db, config, data, tx, objectStore, options);
			} else {
				$.helpers.each(config, function(value, index, next) {
					if (fail) return next();
					if (options.setConfig) {
						$.sdata.config = {baseURL:value.$baseURI};
					}
					return _indexDB._initData_one(db, value.value, value.data, tx, objectStore, {
						success: next,
						fail: function(){
							fail = true;
							return next();
						}
					});
				}, function() {
					if (options.success) options.success();
				});
			}
		
		},
		_initData_one:  function(db, config, data, tx, objectStore, options) {	
			var delopts =  {
				success: function() {
					if (data) {
						if (config.onlyOne) {
							var cd = {data: data, url: config.url};
							return _indexDB._addSdata(db, tx,cd, objectStore, {success: function(){
								if (options.success) options.success();
							}});
						} else if (data.$resources) {
							var burl = data.$baseUrl;
							return $.helpers.each(data.$resources, function(cr, index, next) {
								var cd = {data: cr, url: $.sdata.$purl(cr.$url)};
								if (burl) cd.$baseURI = burl;
								return _indexDB._addSdata(db, tx,cd, objectStore,  {success: function(){
									next();
								}});
							
							}, function() {
								options.success(db);
							},10);
						}
					}
					if (options.success) options.success();
				}
			};
			var keyRange, request;
			if (config.onlyOne) {
				keyRange = IDBKeyRange.only(config.url);
				request = objectStore.openCursor(keyRange);  
			} else {
				var index = objectStore.index("entity_url"); 
				keyRange = IDBKeyRange.only(config.url);
				request = index.openCursor(keyRange);  
			}
			request.onsuccess = function(event) {  	
				var cr = event.target.result;
				if (cr) {
					cr["delete"]();  
					cr["continue"]();  
				} else {
					delopts.success();
				}
			};
			request.onerror = function(event) {  
				if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
					delopts.success();
				} else delopts.success();
			}					
			
		},
		
		_loadDraft : function(db, id, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var tx = db.transaction(["draft"]); 
			var objectStore = tx.objectStore("draft"); 
			try {		
				var request =  objectStore.get(id);
				request.onsuccess = function(event) {
					if (event.target.result)
						cb(event.target.result);
					else 
						cb(null);
				};
				request.onerror= function(event) {
					$.helpers.pushdbError(event);
					cb(null);
				}
			} catch(ex) {
			}
		},
		_createDraft : function(db, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			// start an edit activity
			data.appid = $.sdata.config.id;
			var tx = db.transaction(["draft"], IDBTransaction.READ_WRITE); 
			var objectStore = tx.objectStore("draft");  
			var index = objectStore.index("original_url"); 
			var keyRange = IDBKeyRange.only(data.original_url);
			try {	
				var request = index.openCursor(keyRange);  
				request.onsuccess = function(event) {  
					if (event.target.result) {
						var cr = event.target.result;
						if (cr.value.appid === data.appid)
							cr["delete"]();  
						cr["continue"]();
					} else
						_indexDB._insertDraft(db, tx, data, cb);
				}
				request.onerror = function(event) {  
					if (event.target.errorCode == IDBDatabaseException.NOT_FOUND_ERR) {
						_indexDB._insertDraft(db, null, data, cb)
					}
				}
			} catch(ex) {
				$.helpers.pushdbError(ex);
				return cb(null, ex);
			}
		}
		
	};
	
	var _private = {
		_addSdata: function(db, tx, data, options) {
			if (!_checkDBHandler(db, options.success)) return;
			_checkSdataData(data);
			tx.executeSql("INSERT INTO sdata(url, entity_url, data, original_data, sync_status, url_type, status, ui_url, ui_type, updated, last_error) values(?,?,?,?,?,?,?,?,?,?,?)", [
							data.url,
							data.entity_url,
							JSON.stringify(data.data),
							JSON.stringify(data.original_data),
							data.sync_status,
							data.url_type,
							data.status,
							data.ui_url,
							data.ui_type,
							data.updated,
							data.last_error
						], 
					function (tx, result) { 
						options.success();
					}, function(tx, error) {
						options.success();
			});
		},
		_delSdata: function(db, tx, url, options) {
			if (!_checkDBHandler(db, options.success)) return;
			tx.executeSql("delete from sdata where url= ?", [url], 
					function (tx, result) { 
						options.success();
					}, function(tx, error) {
						options.success();
			});
		},
		
		//ok
		_getSDataByUrl: function(url, tx, cb) {
			var lurl = (url.indexOf("?appid=") < 0)?(url +"?appid=" + $.sdata.config.id):url;
			tx.executeSql('SELECT * FROM sdata where url=?', [lurl],
				function (tx, results) {
					var rows = results.rows;
					if (rows && rows.length) {
						var row = rows.item(0);
						cb({
							appid:  row.appid,
							url:  row.url,
							entity_url:  row.entity_url,
							data: (row.data?JSON.parse(row.data):null),
							original_data: (row.original_data?JSON.parse(row.original_data):null),
							status:  row.status,
							representation: row.representation,
							updated: row.updated,
							last_error: row.last_error
						});
						
					} else cb(null);
				}, 
				function(tx, error) {
					cb(null, error);
				}
			);
		},
		//ok
		_rmvSDataByUrl: function(url, tx, cb) {
			var lurl = (url.indexOf("?appid=") < 0)?(url +"?appid=" + $.sdata.config.id):url;
			tx.executeSql('DELETE FROM sdata where url=?', [lurl],
				function (tx, results) {
					 cb(null);
				}, 
				function(tx, error) {
					cb(null, error);
				}
			);
		},
		//ok
		_insertSdata: function(data, tx, cb) {
			_checkSdataData(data);
			tx.executeSql('INSERT INTO sdata(appid, url, entity_url, data, original_data,status, representation, updated, last_error) values(?,?,?,?,?,?,?,?,?)', 
				[
					data.appid, data.url, data.entity_url, (data.data?JSON.stringify(data.data):""),
					(data.original_data?JSON.stringify(data.original_data):""), data.status,
					data.representation, data.updated, data.last_error
				],
				function (tx, results) {
					cb(null);
				}, 
				function(tx, error) {
					cb(null, error);
				}
			);
		},
		//ok
		_updSDataByUrl: function(url, data, tx, cb) {
			_checkSdataData(data);
			tx.executeSql('Update sdata set appid=?, url=?, entity_url=?, data=?, original_data=? ,status=?, representation=?, updated=?, last_error=? where url=?', 
				[
					data.appid, data.url, data.entity_url, (data.data?JSON.stringify(data.data):""),
					(data.original_data?JSON.stringify(data.original_data):""), data.status,
					data.representation, data.updated, data.last_error, data.url
				],
				function (tx, results) {
					cb(null);
				}, 
				function(tx, error) {
					cb(null, error);
				}
			);
		},
		//ok
		_saveDraft:  function(db, id, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			_private._execOpen(db, 'SELECT * FROM draft where id=?', 
				[id], function (rows, error) {
						if (error)  {
							$.helpers.pushdbError(error);
							return cb({status: 404});
						}
						if (rows && rows.length) {
							var row = rows.item(0);
							var cdata = {
								id: row.id,
								appid: row.appid,
								original_url: row.original_url,
								representation: row.representation,
								data: (row.data?JSON.parse(row.data):null),
								original_data: (row.original_data?JSON.parse(row.original_data):null)
							};
							var purl = $.sdata.parseSdataUri(cdata.original_url); 
							//save data in database 
							
							var _failTran = function(tx, error) {		
								$.helpers.pushdbError(error);
								return cb(null, error);
							};
							
							db.transaction(function(tnx) {
								var createActivity=false; 
								if (purl.template) {
									createActivity = true
									purl.template = false;
									purl.id = cdata.data.$uuid;
								}
								purl.createActivity = false;
								purl.editActivity = false;
								delete purl.query;
								var url = $.sdata.getUri(purl); 
								var insData = {
									url: url,
									representation: cdata.representation,
									data: data,
									original_data: cdata.original_data
								}
								delete cdata.original_data;
								_private._getSDataByUrl(url, tnx, function(data, error) {
									//$.sdata.STATUS.MODIFIED
									if (data) {
										if (data.status === $.sdata.STATUS.DELETED) {
											// deleted
											return _private._deleteDraft(db, tnx,  id, function(data, error){
												cb({status: 404});
											});
										}
										if ((data.status === $.sdata.STATUS.ORIGINAL) || (data.status === $.sdata.STATUS.MODIFIED)) {
											if (data.status === $.sdata.STATUS.ORIGINAL) { 
												insData.original_data = $.extend(true, {}, data.data);
												insData.status = $.sdata.STATUS.MODIFIED;
											} else if (data.status === $.sdata.STATUS.MODIFIED) {
												insData.original_data = $.extend(true, {}, data.original_data);
												insData.status = $.sdata.STATUS.MODIFIED;
											}
											delete insData.data.$info;
											delete insData.data.$trackingId;
											if (insData.original_data) {
												delete insData.original_data.$info;
												delete insData.original_data.$trackingId;
												if (JSON.stringify(insData.original_data) === JSON.stringify(insData.data)) {
													delete insData.original_data;
													insData.status = $.sdata.STATUS.ORIGINAL;
													if (!$.sdata.store(insData.url)) {
														// delete sdata record & delete draft
														return _private._rmvSDataByUrl(insData.url, tnx, function(data, error) {	
															_private._deleteDraft(db, tnx,  id, function(data, error){
																	cb({status: 200});
															});
														});
													}
												}
											}
										} else {
											//$.sdata.STATUS.CREATED
											insData.status = $.sdata.STATUS.CREATED;
										}
										// update sdata record and delete draft								
										return _private._updSDataByUrl(insData.url, insData, tnx, function(data, error) {	
											_private._deleteDraft(db, tnx,  id, function(data, error){
													cb({status: 200});
											});
										});
									} else {
										if (createActivity) { 
											insData.status = $.sdata.STATUS.CREATED;
											delete insData.original_data;
											
										} else {
											insData.status = $.sdata.STATUS.MODIFIED;
										}
										delete insData.data.$info;
										delete insData.data.$trackingId;
										if (insData.original_data) {
											delete insData.original_data.$info;
											delete insData.original_data.$trackingId;
											if (JSON.stringify(insData.original_data) === JSON.stringify(insData.data)) {
												delete insData.original_data;
												insData.status = $.sdata.STATUS.ORIGINAL;
												return _private._deleteDraft(db, tnx,  id, function(data, error){
													cb({status: 404});
												});
											}
										}
										// create record  && delete draft
										_private._insertSdata(insData, tnx, function(data, error) {	
											_private._deleteDraft(db, tnx,  id, function(data, error){
												cb({status: 200});
											});
										});
									}
								})
							},_failTran);
							
						} else 	cb({status: 404});
				});
		},
		_droptables: function(db, tx, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var _exec = function(tx) {
				$.helpers.each(["draft", "sdata", "apps"], function(table, index, next) {
					tx.executeSql('drop table if exists '+ table, [], function (tx, result) {
					next();
					}, function(tx, error) {
						console.log(error);	
						next();
					});
				}, function() {
					cb(db);
				});
			};
			if (tx) 
				_exec(tx);
			else
				db.transaction(_exec);
		
		},
		_createtables: function(db, tx, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var _exec = function(tx) {
				$.helpers.each(["draft", "sdata", "apps"], function(table, index, next) {
					tx.executeSql(_sqlLiteGetSQL(table), [], function (tx, result) { 
						next();
					}, function(tx, error) {
						$.helpers.pushdbError(error);
						next();
					});
				}, function() {
					cb(db);
				});
			};
			if (tx) 
				_exec(tx);
			else
				db.transaction(_exec);
		
		},
		_openDB: function(cb) {
			if (window.openDatabase) {
				var error = function(tx, error){
					alert(error.message);
				};
				var maxsize = 200000;
				try {
					var db = openDatabase(dbName, "1.0", "HTML 5 Database for Mobile",maxsize);
				} catch(ex) {
					$.helpers.pushException(ex, $.smobile.locale().ui.no_db_support_sol);
					return cb(null);			
				}
				if (!db)  {
					$.helpers.pushException({message: $.smobile.locale().ui.no_db_support}, $.smobile.locale().ui.no_db_support_sol);
					return cb(null);			
				}
				
				if (db) {
					db.transaction(function(tx) {
						tx.executeSql(_sqlLiteGetSQL("migration"), [], function (tx, result) { 
							tx.executeSql('select version from migration', [], function (tx, results) { 
								if (results.rows && results.rows.length) {
									var oldVersion = results.rows.item(0).version;
									if (oldVersion == (version + "")) {
										return cb(db);
									} else {
										_private._droptables(db, tx, function() {
											_private._createtables(db, tx, function() {
												tx.executeSql('update migration set version=?', [version + ""], function (tx, result) { 
													return cb(db);
												}, error);
												
											});
										
										});
										
									}
								} else {
									tx.executeSql('insert into migration (version) values (?)', [version], function (tx, result) { 
										_private._createtables(db, tx, cb);
									}, error);
								}
								
							}, error);
						}, error);
					});
				} else  {
					alert("Failed to open the database on disk.  This is probably because the version was bad or there is not enough space left in this domain's quota");
				}
			} 
		}, 
		_execOpen : function(db, sql, params, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var failTran = function(tx, error) {
				$.helpers.pushdbError(error);
				cb(null, true);
			};
			db.readTransaction(function(tx) {
				tx.executeSql(sql, params,function (tx, results) {
					 var rows = results.rows;
					 cb(rows);
				}, failTran);
			}, failTran);
		},
		_execSQL : function(db, tx, sql, params, options) {
			var oldFail = options.fail;
			options.fail = function(tx, ex) {
				$.helpers.pushdbError(ex);
				if (oldFail) oldFail();
			};
			var failTran = function(tx, error) {
				$.helpers.pushdbError(error);
				if (oldFail) oldFail();
			};
			if (tx) {
				tx.executeSql(sql, params,function (tx, results) {
					 options.success();
				}, options.fail);
			} else {
				db.transaction(function(tx) {
					tx.executeSql(sql, params,function (tx, results) {
						 options.success();
					}, options.fail);
				}, failTran);
			}
		},
		//ok 
		_insertDraft : function(db, tx, data, cb) {	
			if (!_checkDBHandler(db, cb)) return;
			_private._execSQL(db, tx, 'INSERT INTO draft (id, appid, original_url, representation, original_data,  data) values(?,?,?,?,?,?)', 
				[data.id, data.appid  , data.original_url, data.representation, 
					data.original_data?JSON.stringify(data.original_data):"", JSON.stringify(data.data)], { success: function () {
					cb(data);
			}});
		},
		//ok
		_deleteDraft : function(db, tx, id, cb) {
			if (!_checkDBHandler(db, cb)) return;
			_private._execSQL(db, tx, 'DELETE from draft where id=?', 
				[id], { 
					success: function () { cb(null); },
					fail: function () { cb(null); }
			});
		},
		
		//ok
		_markSdataSeleted: function(o_url, tx, odata, cb) {
			var purl = $.sdata.parseSdataUri(o_url), createActivity = false; 
			var rep = (purl.query?purl.query.representation:"")
			if (purl.template) {
				createActivity = true
				purl.template = false;
				purl.id = odata.$uuid;
			}
			delete purl.query;
			purl.createActivity = false;
			purl.editActivity = false;
			var url = $.sdata.getUri(purl); 
			_private._getSDataByUrl(url, tx, function(data, error) {	
				if (data) {
					if (data.status === $.sdata.STATUS.DELETED) {
						return cb(null);
					} else if (data.status === $.sdata.STATUS.MODIFIED) {
						
						// mark deleted
						var insData = {
							appid: data.appid,
							url: data.url,
							data: data.original_data?data.original_data:data.data,
							original_data: null,
							status:  $.sdata.STATUS.DELETED,
							representation: data.representation
						};
						return _private._updSDataByUrl(insData.url, insData, tx, function(data, error) {	
							return cb(null);
						});
					} else if (data.status === $.sdata.STATUS.CREATED) {
						// remove sdata record 
						return _private._rmvSDataByUrl(url, tx, function(data, error) {	
							return cb(null);
						});
					}
				} else {
					if (createActivity) return cb(null);
					// edit 
					var newData = {
						url: url,
						data: odata,
						original_data: null,
						status:  $.sdata.STATUS.DELETED,
						representation: rep
					};
					_private._insertSdata(newData, tx, function(data, error) {	
						return cb(null);
					});
				}
			});
		},
		
		//ok
		_deleteDataByDraft:  function(db, id, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var _failTran = function(tx, error) {		
				$.helpers.pushdbError(error);
				cb(null, error);
			};
			db.transaction(function(tx) {
				tx.executeSql('SELECT * FROM draft where id=?', [id],function (tx, rows) {
					if (rows && rows.rows && rows.rows.length) {
						var row = rows.rows.item(0);
						var cdata = {
							id: row.id,
							appid: row.appid,
							original_url: row.original_url,
							representation: row.representation,
							data: (row.data?JSON.parse(row.data):null),
							original_data: (row.original_data?JSON.parse(row.original_data):null)
						};
						
						var url = cdata.original_url;
						_private._markSdataSeleted(url,tx, (cdata.original_data?cdata.original_data:cdata.data), function(data, error){
							return _private._deleteDraft(db, tx, id, function(data, error){
								cb(null);
							});
							
						});
					} else cb(null);
				}, _failTran);
			}, _failTran);
		},
		
		_createDraft: function(db, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			// start an edit activity
			data.appid = $.sdata.config.id;
			db.transaction(function(tx) {
				_private._execSQL(db, tx, 'DELETE from draft where original_url=? and appid=?' , [data.original_url, data.appid], {
					success: function() {
						_private._insertDraft(db, tx, data, cb);
					},
					fail: function(error) {
						_private._insertDraft(db, tx, data, cb);
					}
				});			
			},  function(tx, error) {
					$.helpers.pushdbError(error);
					cb(null, error);
			});
		},
		//ok
		_updateDraft : function(db, draftId, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			_private._execSQL(db, null, 'UPDATE draft set data=? where id=?', 
				[JSON.stringify(data), draftId], {success: cb});
		},
		_getSData:  function(db, purl, options) {
			if (!_checkDBHandler(db, options.success)) return;
			try {	
				if (purl.id ||  purl.template) {
					_private._execOpen(db, 'SELECT * FROM sdata where url=?', [purl.uri], function (rows, error) {
						if (error) {
							return options.success(null, {status: 404});
						}
						if (rows.length && _acceptStatut(rows.item(0), options)) {
							var row = rows.item(0);
							options.success(_addInfo(row, JSON.parse(row.data)), 
								{status: 200}
							);
						} else {
							options.success(null, {status: 404});
						}
					
					});
				
				} else if (purl.entity) {
					var result = {
						$url: purl.uri,
						"$resources": []
					};
					var newUrl = {query: null}, gmap=[], gvalues = {};
					$.extend(newUrl, purl);
					delete newUrl.query;
					var e_url = $.sdata.getUri(newUrl); 
					_private._execOpen(db, 'SELECT * FROM sdata where entity_url=?', [e_url], function (rows, error) {
						if (error) {
							return options.success(result, {status: 404});
						}
						if (rows.length) {
							var ha = new Array(rows.length);
							$.helpers.each(ha, function(value, index, next) {
								var row = rows.item(index);
								if (_acceptStatut(row, options))
									return _addResource(row, JSON.parse(row.data), result.$resources, purl, gmap, gvalues, function() {
										next();
									});
								return next();
							
							}, function() {
								if (purl.pgroupBy) 
									for (var ii in gvalues) result.$resources.push(gvalues[ii]);	
								_applySort(purl,result.$resources, options); 
								options.success(result, {status: 200});
							});
						} else {
							options.success(result, {status: 200});
						}
					
					});
				}
			} catch(ex) {
				console.log(ex);
			}
		},
		_loadDraft : function(db, id, cb) {
			if (!_checkDBHandler(db, cb)) return;
			_private._execOpen(db, 'SELECT * FROM draft where id=?', [id], function (rows, error) {
				if (error) return cb(null);
				if (rows.length) {
					var row = rows.item(0);
					cb({
							appid: row.appid,
							id: row.id,
							original_url: row.original_url,
							data: JSON.parse(row.data)
						}
					);
				} else {
					cb(null);
				}
			
			});
		
		},
		
		_getModifiedData:  function(db, purl, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var res={}, eu = $.sdata.entityUri(purl); 
								
			var appid = ($.sdata.config?$.sdata.config.id:"");
			_private._execOpen(db, 'SELECT * FROM sdata where status > ? and appid = ? and entity_url = ?', 
				[$.sdata.STATUS.ORIGINAL, appid, eu], function (rows, error) {
					if (error) return cb(res);
					if (rows && rows.length) {
						for (var i = 0, len=rows.length; i<len; i++) {
							var row = rows.item(i);
							var data = JSON.parse(row.data);
							res[data.$uuid || data.$key] = {
								data: data,
								status: row.status
							};
						}
						cb(res)
					} else cb(res);
				});
		},
		_getSyncData:  function(db, count, cb) {	
			if (!_checkDBHandler(db, cb)) return;
			var data = null;
			var appid = ($.sdata.config?$.sdata.config.id:"");
			if (count) {
				_private._execOpen(db, 'SELECT count(*) as sync FROM sdata where status > ? and appid = ?', 
					[$.sdata.STATUS.ORIGINAL, appid], function (rows, error) {
						if (error) return cb(0);
						if (rows && rows.length) {
							cb(rows.item(0).sync);
						} else cb(0);
					});
			} else {
				_private._execOpen(db, 'SELECT * FROM sdata where status > ? and appid = ?', 
					[$.sdata.STATUS.ORIGINAL, appid], function (rows, error) {
						if (error) return cb(null);
						if (rows && rows.length) {
							for (var i = 0, len=rows.length; i<len; i++) {
								var row = rows.item(i);
								data = data || {};
								var purl = $.sdata.parseSdataUri(row.url); 
								var list = data[purl.entity] || [];
								data[purl.entity] = list;
								var rdata = JSON.parse(row.data);
								_addInfoPlus(purl, row, rdata, $.sdata.config.pages[row.representation].$prototype);
								list.push(rdata);
							
							}
							cb(data);
						} else cb(null);
					});
			}
		}, 
		//ok
		_delData:  function(db, url, cb) {	
			if (!_checkDBHandler(db, cb)) return;
			db.transaction(function(tx) {
				return _private._rmvSDataByUrl(url, tx, cb);
			});
		}, 
		_installApp: function(db, data, cb) {
			if (!_checkDBHandler(db, cb)) return;
			var _failTran = function(tx, error) {	
				$.helpers.pushdbError(error);
				cb();
			};
			
			db.transaction(function(tx) {
				var _after = function() {
					tx.executeSql("INSERT INTO apps(id, url, title, description, icon, baseURL, version, data) values(?,?,?,?,?,?,?,?)", 
						[data.id, data.url, data.title, data.description, data.icon, data.baseURL, data.version, JSON.stringify(data.data)],
						function (tx, result) { 
							cb();
						}, function(tx, error) {
							$.helpers.pushdbError(error);
							cb();
					});

				};
				tx.executeSql("delete from apps where url=? and baseURL= ?", 
					[data.url, data.baseURL], 
					function (tx, result) { 
						_after();
					}, function(tx, error) {
						_after();
					}
				);
			});
		},
		//ok
		_removeFromDB: function(db, id, cb) {	
			if (!_checkDBHandler(db, cb)) return;
			var _failTran = function(tx, error) {		
				$.helpers.pushdbError(error);
				return cb();
			};
			db.transaction(function(tx) {
				var _removeApp =  function() {
					return _private._execSQL(db, tx, 'DELETE from apps where id=?', [id], {
						success: function(){ cb();},
						fail: function(){ cb();}
					});
				};

				var _removeDrafts= function() {
					return _private._execSQL(db, tx, 'DELETE from draft where appid=?', [id], {
						success: function(){ _removeApp();},
						fail: function(){ _removeApp();}
					});
				};
				return _private._execSQL(db, tx, 'DELETE from sdata where appid=?', [id], {
					success: function(){ _removeDrafts();},
					fail: function(){ _removeDrafts();}
				});
			}, _failTran);
		},
		_getAppConfig: function(db, appId, cb) {
			if (!_checkDBHandler(db, cb)) return;
			_private._execOpen(db, 'SELECT * FROM apps where id=?', 
				[appId], function (rows, error) {
					if (error) cb(null);
					if (rows && rows.length) {
						var cr = rows.item(0);
						var cdata = null;
						try {cdata = JSON.parse(cr.data); }catch(ex) {}
						cdata = cdata || {};
						cdata.id = cr.id;
						cdata.$info = {url: cr.url, version: cr.version, title:cr.title, icon: cr.icon};
						cb(cdata);
					} else 
						cb(null);
				}
			);
		},
		_getInstalledApps: function(db, grouped, cb) {	
			if (!_checkDBHandler(db, cb)) return;
			var results = [];
			_private._execOpen(db, 'SELECT * FROM apps ORDER BY url', 
				[], function (rows, error) {
					if (error) return cb(results);
					if (rows && rows.length) {
						for(var i=0, len = rows.length; i< len; i++) {
							var data = rows.item(i);
							results.push({id:data.id, url: data.url, title: data.title,
								description:data.description, icon: data.icon, 
								baseURL: data.baseURL, version: data.version
							});
						}
					}
					cb(results);
				}
			);
		},
		//ok
		_undoUpdate:  function(db, url, cb) {
			if (!_checkDBHandler(db, cb)) return;
			db.transaction(function(tx) {
				_private._getSDataByUrl(url, tx, function(data, error) {
					if (data) {
						if (!$.sdata.store(url) || (data.status===$.sdata.STATUS.CREATED)) {
							// delete sdata record
							return _private._rmvSDataByUrl(url, tx, function(data, error) {
								cb(null);
							});	
							
						} else {
							var insData = {
								appid: data.appid,
								url: data.url,
								data: data.original_data?data.original_data:data.data,
								original_data: null,
								status:  $.sdata.STATUS.ORIGINAL,
								representation: data.representation
							};
							return _private._updSDataByUrl(url, insData, tx, function(data, error) {	
								cb(null);
							});
						}
					}
					cb(null);
					
				});
			})
		},
		
		//ok
		_updData:  function(db, oldUrl, data, cb) {	
			if (!_checkDBHandler(db, cb)) return;
			db.transaction(function(tx) {
				data.url = oldUrl;
				var _updSdata = function() {
					if ((data.status === $.sdata.STATUS.ORIGINAL) && !$.sdata.store(oldUrl))
						return _private._rmvSDataByUrl(oldUrl, tx, function(dd, error) {	
							cb(null, error);
						});
					else
						return _private._updSDataByUrl(oldUrl, data, tx, function(dd, error) {	
							cb(null, error);
						});
				
				}			
				if (data.$load) {
					delete data.$load;
					_private._getSDataByUrl(data.url, tx, function(gdata, error) {
						Object.keys(data).forEach(function (value) {
							gdata[value] = data[value];
						});
						data = gdata;
						_updSdata();
					});
				} else {
					_updSdata();
				}
			
				
			});
		}, 
		_initData:  function(db, config, data, options) {
			if (!_checkDBHandler(db, options.success)) return;
			if (!options.fail) options.fail = options.success;
			db.transaction(function(tx) {
				if (data) {
					return _private._initData_one(db, config, data, tx, options);			
				} else {
					var fail = false;
					$.helpers.each(config, function(value, index, next) {
						if (fail) return next();
						if (options.setConfig) {
							$.sdata.config = {baseURL:value.$baseURI};
						}
						return _private._initData_one(db, value.value, value.data, tx, {
							success: next,
							fail: function(){
								fail = true;
								return next();
							}
						});
					}, function() {
						if (options.success) options.success();
					});				
				}	
			}, options.fail);
		},
		_initData_one:  function(db, config, data, tx, options) {	
			var afterDel = {
				success: function() {
					if (data) {
						if (config.onlyOne) {
							return _private._addSdata(db, tx,{data: data, url: config.url}, {success: function(){
								if (options.success) options.success();
							}});
						} else if (data.$resources) {
							return $.helpers.each(data.$resources, function(cr, index, next) {
								return _private._addSdata(db, tx,{data: cr, url: $.sdata.$purl(cr.$url)}, {success: function(){
									next();
								}});
							
							}, function() {
								options.success();
							});
						}
					} else	
						options.success();
				}, 
				fail: function() {
					options.fail();
					
				}
			};
			if (config.onlyOne) {
				return _private._delSdata(db, tx, config.url, afterDel);
			} else {
				return tx.executeSql("delete from sdata where entity_url= ?", [config.url],  afterDel.success, afterDel.fail);
			}
		}
		
	};
	
	/**
	 * @constructor
	 */
	function IndexedDBHandler() {
		this.init();
	};
	IndexedDBHandler.prototype = {
		init : function(){
			
		},
		check: function(dbcall, open) {
			var self = this;
			if (open) {
				return _indexDB._openDB(function(db, errors) {
					if (!db) 
						$.helpers.pushdbError({message: $.smobile.locale().ui.open_db_error});
					dbcall(db);
				});
			}
			if (!self.db)  {
				_indexDB._openDB(function(db, errors) {
					self.db = db;
					if (!self.db) {
						$.helpers.pushdbError({message: $.smobile.locale().ui.open_db_error});
					}
					dbcall(self.db);
				});
			} else dbcall(self.db);
		},
		createDraft:  function(data, cb) {
			var self = this;
			self.check(function(db) { _indexDB._createDraft(db, data, cb);});
		},
		updateDraft:  function(draftId, data, cb) {
			var self = this;
			self.check(function(db) { _indexDB._updateDraft(db, draftId, data, cb);});
		},
		deleteDraft:  function(id, cb) {
			var self = this;
			self.check(function(db) { 
				_indexDB._deleteDraft(db, null, id, cb);
			});
		},
		deleteDataByDraft:  function(id, cb) {
			var self = this;
			self.check(function(db) { 
				_indexDB._deleteDataByDraft(db, id, cb);
			});
		},
		
		
		saveDraft:  function(draftURL, data, cb) {
			var self = this;
			self.check(function(db) { 
				_indexDB._saveDraft(db, draftURL, data, cb);
			});
		},
		loadDraft:  function(id, cb) {
			var self = this;
			self.check(function(db) { _indexDB._loadDraft(db, id, cb);});
		},
		getSData:  function(purl, options) {
			var self = this;
			self.check(function(db) {
				_indexDB._getSData(db, purl, options);
			});
		},
		
		initData:  function(config, data, options) {
			var self = this;
			self.check(function(db) { 
				_indexDB._initData(db, config, data, options);
			});
		},
		delData:  function(url, cb) {	
			var self = this;
			self.check(function(db) { _indexDB._delData(db, url, cb);});
		},
		undoUpdate:  function(url, cb) {	
			var self = this;
			self.check(function(db) { _indexDB._undoUpdate(db, url, cb);});
		},
		installApp:  function(data, cb) {	
			var self = this;
			self.check(function(db) { _indexDB._installApp(db, data, cb);});
		},
		removeFromDB: function(id, cb) {
			var self = this;
			self.check(function(db) { _indexDB._removeFromDB(db, id, cb);});
		},
		getAppConfig: function(appId, cb) {
			var self = this;
			self.check(function(db) { _indexDB._getAppConfig(db, appId, cb);});
		},
		
		getInstalledApps:  function(grouped, cb) {	
			var self = this;
			self.check(function(db) { _indexDB._getInstalledApps(db, grouped, cb);});
		},
		
		getSyncData:  function(cb) {	
			var self = this;
			self.check(function(db) { _indexDB._getSyncData(db, false, cb);});
		},
		getModifiedData:  function(purl, cb) {
			var self = this;
			self.check(function(db) { _indexDB._getModifiedData(db, purl, cb);});
		},
		
		getSyncCount:  function(cb) {	
			var self = this;
			self.check(function(db) { _indexDB._getSyncData(db, true, cb);});
		},
		
		updData:  function(oldUrl, data, cb) {
			var self = this;
			self.check(function(db) { _indexDB._updData(db, oldUrl, data, cb);});
		}
	};
	/**
	 * @constructor
	 */
	function DataBaseHandler() {
		this.init();
	};
	DataBaseHandler.prototype = {
		init : function(){
			
		},
		check: function(dbcall, open) {
			var self = this;
			if (open) {
				return _private._openDB(function(db,errors) {
					if (!db) $.helpers.pushdbError({message: $.smobile.locale().ui.open_db_error});
					dbcall(db);
				});
			}
			if (!self.db)  {
				_private._openDB(function(db,errors) {
					self.db = db;
					if (!self.db) $.helpers.pushdbError({message: $.smobile.locale().ui.open_db_error});
					dbcall(self.db);
				});
			} else dbcall(self.db);
		},
		createDraft:  function(data, cb) {
			var self = this;
			self.check(function(db) { _private._createDraft(db, data, cb);});
		},
		updateDraft:  function(draftId, data, cb) {
			var self = this;
			self.check(function(db) { _private._updateDraft(db, draftId, data, cb);});
		},
		deleteDraft:  function(id, cb) {
			var self = this;
			self.check(function(db) { _private._deleteDraft(db, null, id, cb);});
		},
		deleteDataByDraft:  function(id, cb) {
			var self = this;
			self.check(function(db) { 
				_private._deleteDataByDraft(db, id, cb);
			});
		},
		
		
		saveDraft:  function(draftURL, data, cb) {
			var self = this;
			self.check(function(db) { 
				_private._saveDraft(db, draftURL, data, cb);
			});
		},
		loadDraft:  function(id, cb) {
			var self = this;
			self.check(function(db) { _private._loadDraft(db, id, cb);});
		},
		getSData:  function(purl, options) {
			var self = this;
			self.check(function(db) { _private._getSData(db, purl, options);});
		},
		initData:  function(config, data, options) {
			var self = this;
			self.check(function(db) { _private._initData(db, config, data, options);});
		},
		delData:  function(url, cb) {	
			var self = this;
			self.check(function(db) { _private._delData(db, url, cb);});
		},
		undoUpdate:  function(url, cb) {	
			var self = this;
			self.check(function(db) { _private._undoUpdate(db, url, cb);});
		},
		getInstalledApps:  function(grouped, cb) {	
			var self = this;
			self.check(function(db) { _private._getInstalledApps(db, grouped, cb);});
		},
		installApp:  function(data, cb) {	
			var self = this;
			self.check(function(db) { _private._installApp(db, data, cb);});
		},
		removeFromDB: function(id, cb) {
			var self = this;
			self.check(function(db) { _private._removeFromDB(db, id, cb);});
		},
		
		getAppConfig: function(appId, cb) {
			var self = this;
			self.check(function(db) { _private._getAppConfig(db, appId, cb);});
		},
		getSyncData:  function(cb) {	
			var self = this;
			self.check(function(db) { _private._getSyncData(db, false, cb);});
		},
		getSyncCount:  function(cb) {	
			var self = this;
			self.check(function(db) { _private._getSyncData(db, true, cb);});
		},
		getModifiedData:  function(purl, cb) {
			var self = this;
			self.check(function(db) { _private._getModifiedData(db, purl, cb);});
		},
		updData:  function(oldUrl, data, cb) {
			var self = this;
			self.check(function(db) { _private._updData(db, oldUrl, data, cb);});
		}		
		
		
	};
	if (indexedDB && !window.openDatabase) {
		var idb = new IndexedDBHandler();
		$.sdata.createDraft = function(data, cb) { 
			$.sdata.useCacheCount = false;
			idb.createDraft(data, cb); 
		};
		$.sdata.updateDraft = function(draftId, data, cb) { 
			$.sdata.useCacheCount = false;
			if (!cb) cb = function() {};
			idb.updateDraft(draftId, data, cb); 
		};
		$.sdata.loadDraft = function(id, cb) { 
			idb.loadDraft(id, cb); 
		};
		$.sdata.deleteDraft = function(id, options) { 
			$.sdata.useCacheCount = false;
			idb.deleteDraft(id, options); 
		};
		$.sdata.saveDraft = function(draftURL, data, cb) { 
			$.sdata.useCacheCount = false;
			idb.saveDraft(draftURL, data, cb); 
		};
		$.sdata.getSData = function(url, options) { 
			idb.getSData(url, options); 
		};
		$.sdata.initData = function(config, data, options) { 
			$.sdata.useCacheCount = false;
			idb.initData(config, data, options); 
		};
		$.sdata.updData = function(oldUrl, data, cb) { 
			$.sdata.useCacheCount = false;
			idb.updData(oldUrl, data, cb); 
		};
		$.sdata.delData = function(url, cb) { 
			$.sdata.useCacheCount = false;
			idb.delData(url, cb); 
		};
		$.sdata.deleteDataByDraft = function(id, cb) { 
			$.sdata.useCacheCount = false;
			idb.deleteDataByDraft(id, cb); 
		};
		$.sdata.getSyncData = function(cb) { idb.getSyncData(cb); };
		$.sdata.getSyncDataCount = function(cb) { idb.getSyncCount(cb); };
		$.sdata.getModifiedData = function(purl, cb) { idb.getModifiedData(purl,cb); };
		$.sdata.undoUpdate = function(url, cb) { 
			$.sdata.useCacheCount = false;
			idb.undoUpdate(url, cb); 
		};
		$.sdata.getInstalledApps = function(grouped, cb) { idb.getInstalledApps(grouped, cb); };
		$.sdata.installApp = function(data, cb) { idb.installApp(data, cb); };
		$.sdata.getAppConfig = function(appid, cb) { idb.getAppConfig(appid, cb); };
		$.sdata.removeFromDB = function(id, cb) { idb.removeFromDB(id, cb); };
		
	} else if (window.openDatabase) {
		var mobiledb = new DataBaseHandler();
		$.sdata.createDraft = function(data, cb) { 
			$.sdata.useCacheCount = false;
			mobiledb.createDraft(data, cb); 
		};
		$.sdata.updateDraft = function(draftId, data, cb) { 
			$.sdata.useCacheCount = false;
			if (!cb) cb = function() {};
			mobiledb.updateDraft(draftId, data, cb); 
		};
		$.sdata.loadDraft = function(id, cb) { mobiledb.loadDraft(id, cb); };
		$.sdata.deleteDraft = function(id, options) { 
			$.sdata.useCacheCount = false;
			mobiledb.deleteDraft(id, options); 
		};
		$.sdata.saveDraft = function(draftURL, data, cb) { 
			$.sdata.useCacheCount = false;
			mobiledb.saveDraft(draftURL, data, cb); 
		};
		$.sdata.getSData = function(url, options) { mobiledb.getSData(url, options); };
		$.sdata.initData = function(config, data, options) {
			$.sdata.useCacheCount = false;
			mobiledb.initData(config, data, options); 
		};
		$.sdata.updData = function(oldUrl, data, cb) {
			$.sdata.useCacheCount = false;
			mobiledb.updData(oldUrl, data, cb); 
		};
		$.sdata.delData = function(url, cb) { 
			$.sdata.useCacheCount = false;
			mobiledb.delData(url, cb); 
		};
		$.sdata.deleteDataByDraft = function(id, cb) { 
			$.sdata.useCacheCount = false;
			mobiledb.deleteDataByDraft(id, cb); 
		};
		$.sdata.getSyncData = function(cb) { mobiledb.getSyncData(cb); };
		$.sdata.getSyncDataCount = function(cb) { mobiledb.getSyncCount(cb); };
		$.sdata.getModifiedData = function(purl, cb) { mobiledb.getModifiedData(purl,cb); };
		$.sdata.undoUpdate = function(url, cb) { 
			$.sdata.useCacheCount = false;
			mobiledb.undoUpdate(url, cb); 
		};
		$.sdata.getInstalledApps = function(grouped, cb) { mobiledb.getInstalledApps(grouped, cb); };
		$.sdata.installApp = function(data, cb) { mobiledb.installApp(data, cb); };
		$.sdata.getAppConfig = function(appid, cb) { mobiledb.getAppConfig(appid, cb); };
		$.sdata.removeFromDB = function(id, cb) { mobiledb.removeFromDB(id, cb); };
	} 

})(jQuery);    
