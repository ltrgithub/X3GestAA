"use strict";
(function($) {
	var that = $.smobile || {};
	$.smobile = that;

	var $helpers = $.helpers;
	var $proto = $.proto;
	var consts = $helpers.ui.consts;

	that.ui = that.ui || {};
	that.ui.menuItem = function(title, description, icon) {
		icon = icon || consts.default_menu_name;
		title = (title || "").trim();
		description = (description || "").trim();
		if (title.length == 0) {
			title = description;
			description = "";
		};
		if (title.equalsIgnoreCase(description)) description = "";
		if (title.length == 0) title = $helpers.locale().ui.notitle;
		var css = icon.split(".");
		if (css.length == 1) css.splice(0, 0, consts.default_menu_class);
		var res = '<div class="' + consts.menu_icon_size + ' ' + css.join(" ") + '"></div><h3>' + title + '</h3>';
		if (title.description > 0) res += '<p><strong>' + description + '</strong></p>';
		return res
	};
	that.ui.iconItem = function(title, description, icon) {
		icon = icon || consts.default_icon_name;
		var css = icon.split(".");
		if (css.length == 1) css.splice(0, 0, consts.default_icon_class);
		return '<div class="' + consts.normal_icon_size + ' ' + css.join(" ") + '"></div><h3>' + title + '</h3><p><strong>' + description + '</strong></p>';
	};
	that.ui.panelItem = function(title, icon, description, count) {
		icon = icon || consts.default_panel_name;
		var css = icon.split(".");
		if (css.length == 1) css.splice(0, 0, consts.default_panel_class);
		var res = '<div class="' + consts.panel_icon_size + ' ' + css.join(" ") + '"></div>' + $helpers.htmlEncode(title);
		if (description) res += '<p class="s-m-pspace">' + $helpers.htmlEncode(description) + '</p>';
		if (count != null) {
			res += '<span class="s-m-notify-sync ui-li-count s-m-hidden">0</span>';
		}
		return res;
	};
	that.ui.sdata_link = function(data, options) {
		var url = "";
		if (options.url) {
			url = options.url;
		} else if (options.facet) {
			var cd = {
				$role: $.sdata.config.role || "",
				$baseUrl: $.sdata.config.baseUrl,
				$pluralType: options.entity,
				$representation: options.representation || ""
			};
			if (options.facet == "$dashboard") {
				url = options.dashboard + ".$dashboard";
			} else if (options.facet == "$query") {
				url = "{$baseUrl}/{$pluralType}?representation={$representation}.$query&role={role}" + (options.params ? ("&" + options.params) : "");
				url = $proto.parseExpression(url, {
					data: $proto.exprData(cd)
				}, "$url");
			} else if (options.facet == "$create") {
				var ce = ".$create";
				var value = $.sdata.config.pages[options.representation + ce];
				if (!value) {
					// use edit
					ce = ".$edit";
					value = $.sdata.config.pages[options.representation + ce];
				}
				url = "{$baseUrl}/{$pluralType}/$template/$workingCopies?representation={$representation}" + ce + "&role={role}" + (options.params ? ("&" + options.params) : "");
				url = $proto.parseExpression(url, {
					data: $proto.exprData(cd)
				}, "$url");
			}
		}
		return url;
	}
	that.ui.urlHref = function(url, controller) {
		var res = [($helpers.hashFirst() ? ('#' + that.linkDetailPage(controller)) : "")];
		res.push($helpers.encodeJsmQuery('?url=' + $helpers.encodeURIComponent(url)));
		res.push(($helpers.hashFirst() ? ("") : '#' + that.linkDetailPage(controller)));
		return res.join("");

	};
	that.controls = {};
	that.ui.refreshErrors = function(controller, bind, id) {
		var errors = controller.getDiagnoses(bind);
		var $e = $('#' + id + '_error');
		$e.html(errors ? errors.join('<br/>') : "");
		return (errors ? $e : null);
	};
	that.ui.addErrors = function(controller, bind, id, html) {
		html.push('<div class="s-m-state-block s-m-error" data-role="none" id="' + id + '_error">');
		var errors = controller.getDiagnoses(bind);
		if (errors) {
			html.push(errors.join('<br/>'));
		}
		html.push('</div>');
	};
	that.ui.addLinks = function(id, controller, html, cp, bind) {
		var page = controller.getPageData();
		var proto = $proto.getProto(page);
		var links = $proto.extractLinks(cp, proto, controller.getCurrentData(), true);
		if (links && links.length) {
			// add inline buttons 
			links.forEach(function(link) {
				controller.alinks = controller.alinks || {};
				var cdid = $helpers.uuid();
				controller.alinks[cdid] = {
					bind: bind,
					$title: link.$title,
					url: link.$url,
					$method: link.$method,
					$parameters: link.$parameters
				};
				html.push('<a href="#actionservice" data-role="button" data-action-global="true"  data-action="' + cdid + '" data-iconpos="left" data-mini="true" data-theme="d" data-icon="gear" data-inline="true">' + link.$title + '</a>');
			});
		}
	};
	that._addLink = function(html, options, controller, oncontent) {
		var ccss = options.css || [],
			closeA = false;
		if (options.disabled) ccss.push("ui-disabled");
		if (options.$isHidden) ccss.push("s-m-hidden");
		if (options.url || options.hash || options.action) {
			closeA = true;
			if (options.action) {
				if (options.action === "popup") {
					html.push('<a href="#' + options.popupId + '"');
					html.push(' data-rel="popup"');
				} else {
					html.push('<a href="#"');
					if (!options.actionParams) options.actionParams = options.action;
				}
			} else if (options.hash) {

				if ((controller.applicationId) && (options.hash.indexOf(that.hash_sep) < 0)) {
					var pc = that.PAGES[options.hash];
					if (pc && (pc.useAppId == 2)) options.hash = options.hash + that.hash_sep + $helpers.encodeURIComponent(controller.applicationId);
				}
				html.push('<a href="#' + options.hash + '"');
			} else {
				/*url*/
				if (options.linkType == "$external") {
					html.push('<a href="' + options.url + '"');
				} else {
					html.push('<a href="');
					html.push(that.ui.urlHref(options.url, controller));
					html.push('"');
				}
			}

			if (options.actionParams) html.push(" data-action='" + options.actionParams + "'");
			if (options.actionData) html.push(" data-action-param='" + options.actionData + "'");

			$helpers.addJqmData(options, html);
			if (options.controlId) html.push(' id="' + options.controlId + '"');
			if (ccss.length) html.push(' class="' + ccss.join(" ") + '"');
			if (options.linkId) html.push(" id='" + options.linkId + "'");
			html.push('>');
		}
		if (options.value != null) {
			html.push($helpers.htmlEncode(options.value));
			if (options.title) {

				html.push('<span class="s-m-linkdesc"> ' + $helpers.htmlEncode(options.title) + '<span>');
			}
		} else if (oncontent) oncontent();
		if (closeA) html.push('</a>');
	};
	that.controls.Html = {
		sync: true,
		handler: function(c, after) {
			var controller = this;
			var options = c.data;
			var l = {
				html: options.html,
				options: options
			};
			options.html = null;
			return after(l);
		}
	};
	that.addControl = function(parentLayout, c, after) {
		var controller = this;
		var id = c.id;
		var obj = that.controls[c.uiClass];
		if (obj && obj.handler) {
			obj.handler.apply(controller, [c, function(ctrl) {
				if (ctrl) {
					if (Array.isArray(ctrl)) ctrl.forEach(function(cc) {
						parentLayout.childs.push(cc);
					});
					else parentLayout.childs.push(ctrl);
				}
				after(ctrl);
			},
			parentLayout.layoutClass]);
		} else after(null);
	};
	that.setEvents = function($c, c) {
		var controller = this;
		var obj = that.controls[c.uiClass];
		if (obj && obj.events) {
			return obj.events.apply(controller, [$c, c]);
		}
		return null;
	};

})(jQuery);