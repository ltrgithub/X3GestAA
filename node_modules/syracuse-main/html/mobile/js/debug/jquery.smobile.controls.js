(function($) {
	'use strict';
	var that = $.smobile || {};
	var consts= {
		normal_icon: "s-m-icon-space",
		normal_icon_size: "s-m-icon-size",
		normal_noimage: "s-m-noimage",
		
		menu_icon: "s-m-menu-space",
		menu_icon_size: "s-m-menu-size",
		default_menu_name: "sage.empty",
		default_menu_class: "sage",

		default_icon_name: "sage.empty",
		default_icon_class: "sage"
	};	
	that.ui = that.ui || {};
	that.ui.consts = consts;
	that.ui.menuItem = function(title, description, icon) {
		icon  =  icon || consts.default_menu_name;
		var css = icon.split(".");
		if (css.length == 1) css.splice(0, 0, consts.default_menu_class);
		return '<div class="'+consts.menu_icon_size+ ' ' + css.join(" ") + '"></div><h3>'+title +'</h3><p><strong>'+description+'</strong></p>';
	};
	that.ui.iconItem = function(title, description, icon) {
		icon  =  icon || consts.default_icon_name;
		var css = icon.split(".");
		if (css.length == 1) css.splice(0, 0, consts.default_icon_class);
		return '<div class="'+consts.normal_icon_size+ ' ' + css.join(" ") + '"></div><h3>'+title +'</h3><p><strong>'+description+'</strong></p>';
	};
	that.ui.sdataentry= function(title, description, hasIcon, icon, hashint, hint) {
		var image = "";
		if (!title) {
			title = description;
			description = '';
		}
		if (hasIcon) {
			image = '<div class="'+consts.normal_icon_size+' ' + consts.normal_noimage + '"';
			if (icon) {
				image = image + ' style="background: transparent url(\''+  icon.replace(/'/g, "\\'") + '\') no-repeat center center; background-size: 100% 100%"';
				
			}
			image = image + '></div>'
		}	
		var hhint = "";
		if (hint) 
			hhint = "<span class='ui-li-aside'>"+ hint + "</span>";
		/*return image+ ''+ title+'' + (description?('<p>'+description+'</p>'):'') 
		+ "<p>There are 3 updates for the home on your watchlist: 1 updated MLS listing and 2 homes under contract.</p>"
		+ hhint;	*/		
		return image+ '<h3>'+ title+'</h3>' + (description?('<p class="s-m-margin-0">'+description+'</p>'):'') + hhint;
		return image+ '<h3>'+ title+'</h3>' + (description?('<p><strong>'+description+'</strong></p>'):'') 
		+ '<p class="x2">There are 3 updates for the <span class="s-ms-red">home on your </span>watchlist: 1 updated <span class="s-ms-blue">MLS</span> listing and 2 homes under contract.</p>'
		+ '<p class="x2"><b>Code:</b>  <span class="s-ms-red">RED</span> <span style="float: right" class="s-ms-blue">BLUE</span>CCCCc</p>'
		+ hhint;
	};
	
	that.ui.sdata_link = function(data, options) {
		var url = "";
		if (options.url) {
		} else  if (options.facet) {
			var cd = {
				$role: $.sdata.config.role || "",
				$baseUrl: $.sdata.config.baseUrl,
				$pluralType: options.entity,
				$representation: options.representation || "" 
			};
			if (options.facet == "$dashboard") {
				url = options.dashboard+".$dashboard";
			} else if (options.facet == "$query") {
				url = "{$baseUrl}/{$pluralType}?representation={$representation}.$query&role={role}" + (options.params?("&"+options.params):"");
				url = $.proto.parseExpression(url, {data: $.proto.exprData(cd)},"$url");
			} else if (options.facet == "$create") {
				var value = $.sdata.config.pages[options.representation+".$edit"]
				url = "{$baseUrl}/{$pluralType}/$template/$workingCopies?representation={$representation}.$edit&role={role}" + (options.params?("&"+options.params):"");
				url = $.proto.parseExpression(url, {data: $.proto.exprData(cd)},"$url");
			}
		}
		return url;
	}
	that.ui.urlHref = function(url, controller) {
		var res = [($.helpers.hashFirst()?('#' +$.smobile.linkDetailPage(controller)):"")];
		res.push($.helpers.encodeJsmQuery('?url='+$.helpers.encodeURIComponent(url)));
		res.push(($.helpers.hashFirst()?(""):'#' +$.smobile.linkDetailPage(controller)));
		return res.join("");
		
	};
	$.smobile = that;
	that.controls={};
	that.ui.refreshErrors=function(controller, bind, id) {
		var errors = controller.getDiagnoses(bind);
		$('#'+id+'_error').html(errors?errors.join('<br/>'):"");
	};
	that.ui.addErrors=function(controller, bind, id, html) {
		html.push('<div class="s-m-state-block s-m-error" data-role="none" id="'+id+'_error">');
		var errors = controller.getDiagnoses(bind);
		if (errors) {
			html.push(errors.join('<br/>'));
		}
		html.push('</div>');
	};
	that.ui.addLinks=function(id, controller, html, cp, bind) {
		var page = controller.getPageData();
		var proto  = $.proto.getProto(page);
		var links = $.proto.extractLinks( cp, proto, controller.getCurrentData(), true);
		if (links &&  links.length)  {
			// add inline buttons 
			links.forEach(function(link){
				controller.alinks = controller.alinks || {};
				var cdid = $.helpers.uuid();
				controller.alinks[cdid] = {bind: bind, $title:link.$title, url:link.$url, $method: link.$method};
				html.push('<a href="#actionservice" data-role="button" data-action="'+ cdid+ '" data-iconpos="left" data-mini="true" data-theme="d" data-icon="gear" data-inline="true">'+link.$title+ '</a>');
			});
		}
	};
	that._addLink = function(html, options, controller, oncontent) {
		var ccss = options.css || [], closeA = false;
		if (options.disabled) ccss.push("ui-disabled");
		if (options.url || options.hash || options.action) {
			closeA = true;
			if (options.action){
				if (options.action === "popup") {
					html.push('<a href="#' + options.popupId + '"');
					html.push(' data-rel="popup"');
				} else 
					html.push('<a href="#"');
				if (options.actionParams) html.push(" data-action='"+ options.actionParams+ "'");
			} else if (options.hash) {
				if ((controller.applicationId) &&  (options.hash.indexOf($.smobile.hash_sep) < 0)) {
					var pc = $.smobile.PAGES[options.hash];
					if (pc && (pc.useAppId == 2)) 
						options.hash = options.hash + $.smobile.hash_sep + $.helpers.encodeURIComponent(controller.applicationId);
				}
				if (options.navbar && !controller.applicationId) {
					if (controller.pageInfo.page.id == options.hash) ccss.push("ui-btn-active"); 
				}
				html.push('<a href="#'+options.hash + '"');
				if (options.actionParams) html.push(" data-action='"+ options.actionParams+ "'");
			} else {
				/*url*/
				if (options.linkType == "$external") {
					html.push('<a href="'+options.url + '"');
				} else {
					html.push('<a href="');
					html.push(that.ui.urlHref(options.url, controller));
					html.push('"');
				}	
			}
				
			$.helpers.addJqmData(options,html); 
			if (options.controlId) html.push(' id="'+options.controlId+'"');
			if (ccss.length) html.push(' class="'+ccss.join(" ")+'"');;
			html.push('>');
		}
		if (options.value != null) {
			html.push(options.value);
		} else if (oncontent) oncontent();
		if (closeA) html.push('</a>');
	};
	that.controls.Html={
		sync: true,
		handler: function(c, after) {
			var controller = this;
			var options= c.data;
			var l= { 
				html: options.html,
				options: options
			};
			options.html = null;
			return after(l);
		}
	};
	that.addControl = function(parentLayout, c, after) {
		var controller = this;
		var id = c.id;
		var obj= that.controls[c.uiClass];
		if (obj && obj.handler) {
			obj.handler.apply(controller, [c, function(ctrl) {
				if (ctrl) {
					if (Array.isArray(ctrl)) 
						ctrl.forEach(function(cc) {parentLayout.childs.push(cc);});
					else 
						parentLayout.childs.push(ctrl);
				}
				after(ctrl);
			}, parentLayout.layoutClass]);
		} else after(null);
	};
	that.setEvents = function($c, c) {
		var controller = this;
		var obj= that.controls[c.uiClass];
		if (obj && obj.events) {
			return obj.events.apply(controller, [$c, c]);
		}
		return null;
	};
	
	
})(jQuery);    
