(function($) {
	var that = $.smobile || {};
	var consts= {
		normal_icon: "s-m-icon-space",
		normal_icon_size: "s-m-icon-size",
		normal_noimage: "s-m-noimage",
		
		menu_icon: "s-m-menu-space",
		menu_icon_size: "s-m-menu-size",
		default_menu_name: "menu.empty",
		default_menu_class: "menu",

		default_icon_name: "sage.empty",
		default_icon_class: "sage"
	};	
	that.ui = that.ui || {};
	that.ui.consts = consts;
	that.ui.menuItem = function(title, description, icon) {
		icon  =  icon || consts.default_menu_name;
		var css = icon.split(".");
		if (css.length == 1) css.splice(0, 0, consts.default_menu_class);
		return '<div class="ui-m-home '+consts.menu_icon_size+ ' ' + css.join(" ") + '"></div><h3>'+title +'</h3><p><strong>'+description+'</strong></p>';
	};
	that.ui.iconItem = function(title, description, icon) {
		icon  =  icon || consts.default_icon_name;
		var css = icon.split(".");
		if (css.length == 1) css.splice(0, 0, consts.default_icon_class);
		return '<div class="ui-m-home '+consts.normal_icon_size+ ' ' + css.join(" ") + '"></div><h3>'+title +'</h3><p><strong>'+description+'</strong></p>';
	};
	that.ui.sdataentry= function(title, description, hasIcon, icon, hashint, hint) {
		var image = "";
		if (!title) {
			title = description;
			description = '';
		}
		if (hasIcon) {
			image = '<div class="ui-m-home '+consts.normal_icon_size+' ' + consts.normal_noimage + '"';
			if (icon) {
				image = image + ' style="background: transparent url(\''+  icon.replace(/'/g, "\\'") + '\') no-repeat center center; background-size: 100% 100%"';
				
			}
			image = image + '></div>'
		}	
		hhint = "";
		if (hint) 
			hhint = "<span class='ui-li-count'>"+ hint + "</span>";
		return image+ ''+ title+'' + (description?('<p class="s-m-margin-0">'+description+'</p>'):'') + hhint;
	};
	
	that.ui.sdata_link = function(data, options) {
		var url = "";
		if (options.url) {
		} else  if (options.facet) {
			if (options.facet == "$query") {
				cd = {
					$role: $.sdata.config.role || "",
					$baseUrl: $.sdata.config.baseUrl,
					$pluralType: options.entity,
					$representation: options.representation
				};
				url = "{$baseUrl}/{$pluralType}?representation={$representation}.$query&role={role}";
				url = $.proto.parseExpression(url, {data: cd});
			}
		}
		return url;
	}
	
	that._rg = new RegExp("\\$([^(^\\$]+?)\\(([^)]*)\\)", "g");
	$.smobile = that;
	that.controls={};
	that.renders={};
	var _tu = {};
	_tu._findB = function(chars) {
		var res = {before: chars, args: "", after: "", end: true};
		var i = chars.indexOf("("), c, bc=0, len, quote=false;
		if (i > 0) {
			res.before = chars.substr(0 , i);
			res.after = chars.substr(i+1);
			i=0;
			var args = [], argc = 0;
			len = res.after.length;
			while (i<len) {
				c = res.after[i];
				if (c == '(')
					bc++;
				else if (c == ')') {
					if (bc == 0) {
						args.push(res.after.substr(argc, i-argc));
						res.args = args;
						res.after = res.after.substr(i+1, len);
						if (res.after) res.end = false;
						return res;
					}
					bc--;
				} else if ((c == ',') && (bc == 0) && !quote) {
					args.push(res.after.substr(argc, i-argc));
					argc = i+1;
				} else if (c == '"') {
					//TODO
				}
				i++
			}
			res.before="";
		} else  {
			res.before="";
		}
		return res;
	};
	_tu._findDEnd=function(chars) {
		var res = {before: chars, after: "", end: true};
		var len = chars.length, i = 0;
		var b=0;
		while (i<len) {
			var c = chars[i];
			if (c == "(")  b++;
			if ([" ","<", ":", "'", "\"", ")", "-", ',', "\t", "\n","\r"].indexOf(c)  >= 0) {
				if (c == ")") {
					b--;
					if (b >=0) {
						i++;
						continue;
						
					}
				}
				res.before = chars.substr(0, i);
				res.after = chars.substr(i , len);
				res.end = (res.after == "");
				break;
			}
			i++;
		}
		return res;
	};
	_tu._findBF = function(parent, chars, list, args) {
		var res = {before: chars, after:"", op: "", end: true};
		var len = chars.length, i = 0, d, c;
		while (i<len) {
			c = chars[i];
			if (["#", "$"].indexOf(c)  >= 0) {
				res.end = (i == (len-1));
				if (!res.end) {
					res.op = c;
					res.before = chars.substr(0 , i);
					res.after = chars.substr(i+1 , len)
					if (c == "#") {
						d = _tu._findDEnd(res.after);
						res.field = d.before;
						res.after="";
						if (!d.end) {
							list.push({parent: res, value: d.after, args: false});
						}
					} else /*if (c == "$") */ {
						res.op = c;
						res.before = chars.substr(0 , i);
						res.after = chars.substr(i+1 , len)
						d = _tu._findB(res.after)
						if (!d.before) {
							res.before = chars;
							res.op = "";
							res.end = true;
							res.after ="";
							i++;
							continue;
						}
						res.func = d.before;
						if (d.args) {
							for (var j=0, ll=d.args.length; j<ll; j++)  
								list.push({parent: res, value: d.args[j], args: true});
						}
						
						res.after="";
						if (!d.end)  list.push({parent: res, value: d.after, args: false});
					
					}
				}
				break;
			}
			i++;
		}
		if (parent) {
			if (args) {
				parent.args = parent.args || [];
				parent.args.push(res);
			} else {
				parent.childs = parent.childs || [];
				parent.childs.push(res);
			}
		}
		return res;
	};
	that.hasTemplate = function(value) {
		return (value.indexOf("#") >= 0);
	},
	that.parseTemplate = function(value) {
		var list = [];
		var exp = _tu._findBF(null, value, list, false);
		while (list.length)  {
			var o = list.shift();
			if (o.value) _tu._findBF(o.parent, o.value, list, o.args);
		}
		return exp;
		
	};
	that.execTemplate = function(template, data, controller, afterExec) {
		var res = [];
		var _func = function(o, _afterExec) {
			if (o.before) res.push(o.before);
			var _continue = function () {
				if (o.after) res.push(o.after);
				if (o.childs) {
					$.helpers.each(o.childs, function(child, ci, nn) {
						_func(child, nn);
					}, _afterExec)
					
				} else _afterExec();
			};
			
			if (o.op == '#') {
				var cv = controller.getData(o.field, data, null, function(cv){
					if (cv == null) cv = "";	
					res.push(cv);				
					return _continue();
				});
			} else if (o.op == '$') {
				var args = [];
				$.helpers.each(o.args, function(arg, ai, nn) {
					that.execTemplate(arg, data, controller, function(tr){
						args.push(tr);
						nn();
						
					});
				
				}, function() {
					var ff = $.helpers.FUNCS[o.func];
					if (ff) res.push(ff.apply($.helpers, args));
					_continue();
				});
			} else _continue();
		};
		_func(template, function() {
			if (afterExec) afterExec(res.join(""));
		});
		return "ppp";
	};
	
	that._template = function(value, template, data, controller, next) {
		if (template) 
			return that.execTemplate(template, data, controller, next);
		return next(value);
	};
	that._initData = function(data, map, selfData, controller, after) {
		if (!selfData) return;
		var _caf = function(srcData, value) {
			if (value.type == "ref") {
				if (srcData) {
					srcData = {
						$key: srcData.$key,
						$url: $.sdata.$url(srcData)
					};
				}
			}
			controller.setData(value.dst, srcData, data);
		};
		$.helpers.each(map, function(value, index, next) {
			if (value.src == "self") {
				_caf(selfData, value);
				return next();
			} else 
				//OK
				controller.getData(value.src, selfData, null, function(bdata) {
					_caf(bdata, value);
					return next();
				});
		
		},after);
	};
	that._addLink = function(html, options, controller, oncontent) {
		var ccss = options.css || [], closeA = false;
		if (options.disabled) ccss.push("ui-disabled");
		if (options.url || options.hash || options.action) {
			closeA = true;
			if (options.action){
				html.push('<a href="#"');
			} else if (options.hash) {
				if ((controller.applicationId) &&  (options.hash.indexOf($.smobile.hash_sep) < 0)) {
					var pc = $.smobile.PAGES[options.hash];
					if (pc && (pc.useAppId == 2)) 
						options.hash = options.hash + $.smobile.hash_sep + encodeURIComponent(controller.applicationId);
				}
				if (options.navbar && !controller.applicationId) {
					if (controller.pageInfo.page.id == options.hash) ccss.push("ui-btn-active"); 
				}
				html.push('<a href="#'+options.hash + '"');
			} else {
				/*url*/
				if (options.linkType == "$external") {
					html.push('<a href="'+options.url + '"');
				} else {
					html.push('<a href="' + ($.helpers.hashFirst()?('#' +$.smobile.linkDetailPage(controller)):""));
					html.push($.helpers.encodeJsmQuery('?url='+encodeURIComponent(options.url)));
					html.push(($.helpers.hashFirst()?(""):'#' +$.smobile.linkDetailPage(controller)));
					html.push('"');
				}	
			}
				
			$.helpers.addJqmData(options,html); 
			if (options.controlId) html.push(' id="'+options.controlId+'"');
			if (ccss.length) html.push(' class="'+ccss.join(" ")+'"');;
			html.push('>');
		}
		if (options.value != null) {
			html.push(options.value);
		} else if (oncontent) oncontent();
		if (closeA) html.push('</a>');
	};
	that.controls.CheckBox={
		handler: function(c, after, layoutClass) {
			var options= c.data;
			var controller = this;
			var plc = c.data.inline;
			var html = (plc?[]:['<div data-role="fieldcontain" id="'+c.id+'">']);
			html.push('<input type="checkbox" name="'+c.id+'_i" id="'+c.id+'_i" ');
			
			var _complete= function() {
				if (!plc) html.push('</div>');
				return after({ 
					html: html.join(''),
					bind: options.bind,
					action: options.action,
					options: options
				});
			}
			var _createLabel = function(label) {
				html.push('<label for="'+c.id+'_i">'+label+'</label>');
				_complete();
			};
			var _afterGetValue = function(value) {
				if (value) html.push("checked");
				html.push('/>');
				if (that.hasTemplate(c.data.label)) {
					var ct = that.parseTemplate(c.data.label);
					return that._template("", ct, controller.data, controller, function(tv) {
						_createLabel(tv);
					});
				} else {
					_createLabel(c.data.label);
				}
			};
			if (options.bind) {
				return controller.getData(options.bind, null,  false, function(value){
					return _afterGetValue(value);
				});
			
			} else 
				return _afterGetValue(c.data.value);
		},
		events: function($c, c) {
			var controller = this;
			var $input = $c.find( '#'+ c.id + "_i");
			$input.change(function(target) {
				var _aftercchange = controller.afterChangeHnd(c);
				controller.checkChange(c.id, $input[0].checked, _aftercchange);
			});
			
		}
	
	};
	that.controls.Html={
		handler: function(c, after) {
			var controller = this;
			var options= c.data;
			var _end = function(value) {
				var l= { 
					html: value,
					options: options
				};
				delete options.html;
				return after(l);
			};
			if (that.hasTemplate(options.html)) {
				var ct = that.parseTemplate(options.html);
				return that._template("", ct, controller.data, controller, function(tv) {
					_end(tv);
				});
			}
			_end(options.html);
			
		}
	};
	that.controls.Button={
		_typedButtons: {
			dialog_cancel: {
				jmdata: {
					"data-icon": "refresh",
					"data-iconpos": "left"
				},
				defaults: {
					action: "dialog_cancel"
				}
				
			},
			dialog_ok: {
				jmdata: {
					"data-icon": "check",
					"data-iconpos": "left"
				},
				defaults: {
					action: "dialog_ok"
				}
				
			},
			cancel: {
				jmdata: {
					"data-icon": "refresh",
					"data-iconpos": "top"
				},
				defaults: {
					action: "cancel"
				}
				
			},
			action: {
				jmdata: {
					"data-icon": "gear",
					"data-iconpos": "top"
				},
				defaults: {
					action: ""
				}
				
			},
			add: {
				jmdata: {
					"data-iconpos": "top",
					"data-icon": "add"
				}
			},
			back: {
				jmdata: {
					"data-icon": "arrow-l"
				},
				defaults: {
					action: "back"
				}
				
			
			},
			
			save: {
				jmdata: {
					"data-iconpos": "top",
					"data-icon": "check"
				},
				defaults: {
					action: "save"
				}
			},
			"delete": {
				jmdata: {
					"data-iconpos": "top",
					"data-icon": "delete"
				},
				defaults: {
					action: "delete"
				}
			}
			
			
		},
		_stdActions: {
			dialog_cancel: function() {
				var controller = this;
				controller.$page.dialog('close');
				
				
			},
			dialog_ok: function() {
				var controller = this;
				if (!controller.checkData()) return false;
				var data = controller.data;
				var s = controller.pageActions?controller.pageActions.success:null;
				controller.$page.dialog('close');
				if (s) s(data);
			}
				
		},
	
		handler: function(c, after) {
			var controller = this;
			var  html = [], options= c.data || {};
			var jmdata = {};
			options.controlId = c.id;
			if (options.type) {
				var tb= that.controls.Button._typedButtons[options.type];
				if (tb) {
					$.extend(jmdata, tb.jmdata);
					if (tb.defaults) Object.keys(tb.defaults).forEach(function(name) {
						if (options[name] == null) options[name]=tb.defaults[name];
					});
					
				}
			}
			if (options.jmdata) $.extend(jmdata, options.jmdata);
			$.extend(jmdata, {"data-role": "button"});
			options.jmdata = jmdata;
			//TODO
			that._createLink(html, options, controller, function() {
				return after({html: html.join(''), action: options.action, options: options});
				
			});
			
		},
		events: function($c, c) {
			var controller = this;
			$c.click(function(e) {
				if (c && c.action) {
					if (c.options.disabled) return;
					var old = c.options.disabled;
					c.options.disabled = true;
					if (that.controls.Button._stdActions[c.action]) {
						that.controls.Button._stdActions[c.action].call(controller);
					} else {
						var hnd = controller["action" + c.action];
						setTimeout(function() {c.options.disabled = false;},500);
						return hnd.call(controller, 
							{
								success: function() {
									$.smobile.doBack(controller);
								}
							}
						);
						
					}
					c.options.disabled = false;
					
				}
				e.preventDefault();
			});
		}

	};
	that.addControl = function(parentLayout, c, after) {
		var controller = this;
		var id = c.id;
		var obj= that.controls[c.uiClass];
		if (obj && obj.handler) {
			obj.handler.apply(controller, [c, function(ctrl) {
				if (ctrl && Array.isArray(ctrl)) {
					ctrl.forEach(function(cc) {parentLayout.childs.push(cc);});
				} else 
					parentLayout.childs.push(ctrl);
				after(ctrl);
			}, parentLayout.layoutClass]);
		} else after(null);
	};
	that.setEvents = function($c, c) {
		var controller = this;
		var obj= that.controls[c.uiClass];
		if (obj && obj.events) {
			return obj.events.apply(controller, [$c, c]);
		}
		return null;
	};
	
	
})(jQuery);    
