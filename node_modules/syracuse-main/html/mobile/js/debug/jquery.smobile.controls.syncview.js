(function($) {
	var that = $.smobile || {};
	$.smobile = that;
	that.controls.SyncCheck = {
		handler : function(c, after) {
			var self = this;
			c.data = {label: $.helpers.messages.sync_data, value: false, action: " "};
			return that.controls.CheckBox.handler.apply(self, [c, after]);
			
		},
		events : function($c, c) {
			var controller = this;
			var $input = $c.find( '#'+ c.id + "_i");
			$input.change(function(target) {
				var value = $input[0].checked;
				controller.resync = value;
			});
		}
		
	};
	
	that.controls.SyncFooter = {
		handler : function(c, after) {
			var controller = this;
			return $.sdata.getSyncCount({
				success: function(count) { 
					if (count) {
						c.data={ 
							"items": [
								{ text: $.helpers.messages.cancel_all, action: "undo" , "jmdata": {"data-icon":"delete", "data-transition": "none"} },
								{ text: $.helpers.messages.send_all, action: "sync", "jmdata": {"data-icon":"arrow-u", "data-transition": "none"} }
							]
						};
					} else {
						c.data={ 
							"items": [
								{ text: $.helpers.messages.resync_data, action: "sync", "jmdata": {"data-icon":"arrow-d", "data-transition": "none"} }
							]
						};
					}
					return that.controls.NavBar.handler.apply(controller, [c, after]);
				}
			});
				
		},
		events : function($c, c) {
			var controller = this;
			return that.controls.NavBar.events.apply(controller, [$c, c]);
		}
		
	};
	
	that.controls.SyncView = {
		handler: function(c, after) {
			var controller = this, html = [];
			controller.hasSyncView = true;
			var layout= {icon: true };	
			var _ondata = function() {
				html.push('<ul id="'+c.id + '" data-role="listview" data-split-icon="back" data-split-theme="d"');
				html.push(' data-inset="true"');
				html.push('>');
			}
			var _afterGetData = function(data) {
				html.push('</ul>');
				after({ 
					html: html.join(''),
					bind: " "
				});
			};
			$.sdata.getSyncData({
				success: function(data) {
					controller.data = data;
					if (data) {
						_ondata();
						$.helpers.each(Object.keys(data), function(value, index, ff) {
							var meta = $.sdata.entityMeta(value);
							if (!meta) return ff();
							html.push('<li data-role="list-divider">');
							html.push(meta.title|| value);
							html.push('</li>');
							var list  = data[value];
							$.helpers.each(list, function(cd, index, next) {
								html.push('<li');
								var css = [];
								if (layout.icon) css.push("ui-li-has-icon");
								if (layout.icon_size) css.push(layout.icon_size);
								if (css.length) html.push(' class="' + css.join(" ")+'"');
								html.push('>');
								var coptions = {};
								coptions.text = $.helpers.FUNCS.STATUS(cd.$info.status)+(cd[meta.titleProp] || "...") + $.helpers.FUNCS.ERROR(cd.$info.last_error);
								var hafter = ['?'];
								hafter.push("url=" + encodeURIComponent(cd.$info.url));
								var param = $.helpers.encodeJsmQuery(hafter.join(''));
								var msg = "";
								if (cd.$info.status == $.sdata.STATUS.DELETED) {
									html.push('<a href="#">');
									html.push(coptions.text);
									html.push("</a>");
									msg = $.helpers.messages.cancel_delete;
									html.push("<a href=\"#action-cancel"+ param +"\">"+ msg + "</a>");
									html.push('</li>');
									next();
								} else {
									coptions.ui = cd.$info.ui;
									coptions.entity = value;
									coptions.entityId = (cd.$key ||cd.$uuid);
									coptions.entityAction =  $.sdata.sdataActions.edit.id;
									that._createLink(html, coptions, controller, function() {
										if (cd.$info.status == $.sdata.STATUS.CREATED) 
											msg = $.helpers.messages.cancel_create
										else
											msg = $.helpers.messages.cancel_update;
										html.push("<a href=\"#action-cancel"+ param +"\">"+ msg + "</a>");
										html.push('</li>');
										next();
									});
								}
							}, ff);
							
						}, function() {
							_afterGetData(data);
						});
					} else
						_afterGetData(data);
				},
				fail: function() {
					_afterGetData(null);
				}
			});
		}
	};
})(jQuery);    


