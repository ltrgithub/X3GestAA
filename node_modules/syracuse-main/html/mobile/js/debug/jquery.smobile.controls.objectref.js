"use strict"; 
(function($) {
	var that = $.smobile;
	var $helpers = $.helpers;
	var $proto = $.proto;
	that.controls = that.controls || {};
	var _controls = that.controls;
	_controls.ArrayObjectRef={
		_renderContent: function(controller, options, cp, id, html, fieldData, createList) {
			if (options.title && !options.$isTitleHidden) html.push('<li data-role="list-divider">'+ options.title + '</li>');
			html.push('<li');	
			if (createList) {
				var iid = $helpers.uuid();
				html.push(' id="'+iid+'"');
				createList.push("#"+iid);
			}
			html.push('>');	
			if (!options.cards) {
				html.push('<div class="ui-body">');
				_controls.types._table_header(html, options.items,cp, true, createList);					
			}
			fieldData.forEach(function(value, index){
				if (options.cards)
					_controls.types._cards(html, options.items|| [], cp, value, controller,true,index, createList);
				else 
					_controls.types._table_row(html, options.items|| [], cp, value, controller, true,index, createList);
			});
			if (!options.cards) {
				_controls.types._table_end(html, true);
				html.push('</div>'); 
			}
			html.push('</li>'); 
		},
		_addLast: function(controller, options, cp, id, html, fieldData) {
			html.push('<li id="'+id + '_last">');
			html.push('<div class="ui-block">');
			html.push('<a id="'+id+'_new" data-role="button" data-action="new" data-mini="true" data-theme="f" data-icon="plus" data-iconpos="left" ');
			html.push('href="#">');
			html.push($helpers.locale().ui.add_item);
			html.push('</a>');
			html.push('</li>');
		},
		refresh: function(controller, options, $c, id) {	
			var fieldData = controller.getValue(options.bind, null, []);
			var page = controller.getPageData();
			var cp = $proto.getProto(page, options.bind);
			var  html = [], cl= [];
			_controls.ArrayObjectRef._renderContent(controller, options, cp, id, html, fieldData, cl);
			var save =$('#' +id +'_last').detach();
			$c.html(html.join(''));
			$c.append(save);
			cl.forEach(function(id) {
				$(id).trigger('create');
			});
			$c.listview("refresh");
		},

		createArrayObjectRef: function(controller, c, fieldData) {
			if (fieldData == null)  fieldData = controller.getValue(c.data.bind, null, []);
			var options= c.data || {};
			var page = controller.getPageData();
			var cp = $proto.getProto(page, options.bind);
			var  html = [];
    		html.push('<ul id="'+c.id + '" data-role="listview"');
			html.push(' data-inset="true" data-split-theme="d" data-split-theme="d"');			
			$helpers.addJqmData(options,html); 
			html.push('>');
			_controls.ArrayObjectRef._renderContent(controller, options, cp, c.id, html, fieldData, null);
			_controls.ArrayObjectRef._addLast(controller, options, cp, c.id, html, fieldData);
			html.push('</ul>');
			that.ui.addLinks(c.id, controller, html, cp, c.data.bind);
			return { 
				html: html.join(''),
				bind: options.bind,
				action: options.action,
				options: options
			};
		},	
		

		setValue: function(controller, c, value, next) {
			var $ul = $( '#'+ c.id + "");
			return next();		
		},
		sync: true,
		handler: function(c, after, layoutClass) {
			return after(_controls.ArrayObjectRef.createArrayObjectRef(this, c));
		},
		events: function($c, c) {
			var controller = this;
			var $ul = $c;
			$ul.click(function(e) {
				if (e && e.target) {
					var target = e.target, cp, ui, layout, cd, ooptions;
					// lift up 2 levels
					while (target && target.tagName && (target.tagName.toUpperCase() != 'A'))
						target = target.parentNode;
					var p = $(target).attr("data-action");
					if (p === "delete") {
						p = $(target).attr("data-index");
						p = parseInt(p, 10); 
						var fieldData = controller.getValue(c.options.bind, null, []);
						fieldData.splice(p,1);
						controller.notifyChange();
						var tag = (c.options.cards?"TABLE":"TR");
						while (target && (target.tagName.toUpperCase() != tag)) {
							target = target.parentNode;
						}
						if (target)  $(target).remove();
						 
					} else if (p === "edit") {
						p = $(target).attr("data-index");
						p = parseInt(p, 10); 
						var page = controller.getPageData();
						cp = $proto.getProto(page, c.options.bind);
						var efieldData = controller.getValue(c.options.bind, null, []);
						layout = c.options.$article;
						if (!layout || (!layout.$layout && !layout.$cards)) layout = {$bind: c.options.bind, $layout: {$items: c.options.items}};
						cd = $.extend(true, {},efieldData[p]);
						ooptions = {
							canDelete: false,
							actions: {
								save_detail: function() {
									var self = this;
									if (self.pageOptions && self.pageOptions.info) {
										var fieldData = self.parent.getValue(self.pageOptions.info.bind, null, []);
										fieldData[self.pageOptions.info.index] = self.data;
										self.parent.notifyChange();
									}
									$.smobile.doBack(self);
								},
								cancel_detail: function() {
									var self = this;
									$.smobile.doBack(self);
								},
								delete_detail: function() {
									var self = this;
									$.smobile.doBack(self);
								}
								
							}
						};
						
						ui = that.detailUiData(controller, cp, cd, layout, ooptions);
						ui.uiData.options = {
							info: {
								index: p,
								bind: c.options.bind
							}
							
						}
						
						that.createDetail(ui.uiData, cd, controller);
						controller.setNeedRefresh();
					} else if (p === "new") {
						var page = controller.getPageData();
						cp = $proto.getProto(page, c.options.bind);
						var nfieldData = controller.getValue(c.options.bind, null, []);
						if (cp.$protoparent.$maxItems && (nfieldData.length >= cp.$protoparent.$maxItems)) return;
						var nv = $proto.proto2Instance(cp);
						layout = c.options.$article;
						if (!layout || (!layout.$layout && !layout.$cards)) layout = {$bind: c.options.bind, $layout: {$items: c.options.items}};
						ooptions = {
							canDelete: false,
							actions: {
								save_detail: function() {
									var self = this;
									var self = this;
									if (self.pageOptions && self.pageOptions.info) {
										var fieldData = self.parent.getValue(self.pageOptions.info.bind, null, []);
										fieldData.push(self.data);
										self.parent.setData(self.pageOptions.info.bind, fieldData, null);
										self.parent.notifyChange();
									}
									$.smobile.doBack(self);
								},
								cancel_detail: function() {
									var self = this;
									$.smobile.doBack(self);
								},
								delete_detail: function() {
									var self = this;
									$.smobile.doBack(self);
								}
								
							}
						};
						ui = that.detailUiData(controller, cp,nv, layout, ooptions);
						ui.uiData.options = {
							info: {
								index: -1,
								bind: c.options.bind
							}
							
						}
						
						
						that.createDetail(ui.uiData, nv, controller);
						
						controller.setNeedRefresh();
					}
				}
			});
		}
	};
	
})(jQuery);
