"use strict"; 
(function($) {
	$.proto = $.proto || {};
	var $proto = $.proto;
	var $helpers = $.helpers;
	var that = $proto.auth || {};
	$proto.auth = that;
	
	function _scanObj(obj, match, trace) {
		var  i;
		if (Array.isArray(obj)) {
			i = obj.length;
			while (i--) {
				var ci = obj[i];
				if (ci && (typeof ci === "object")) {
					if (trace) trace(ci, obj);
					ci = _scanObj(ci, match, trace);
					if (ci) return ci;
				}
				
			}
			return null;
		}
		var matchObj = match(obj);
		if (matchObj) return matchObj;
		var keys = Object.keys(obj);
		i = keys.length;
		while (i--) {
			var p = keys[i];
			if (p.charAt(0) === "_") continue;
			var o = obj[keys[i]];
			if (o && (typeof o === "object")) {
				if (trace) trace(o, obj);
				o= _scanObj(o, match, trace);
				if (o) return o;
			
			}
		}
		return null;
	}
	
	// get only the layout for $resources.$item
	function  _filterItem(article) {
		article = _scanObj(article, function(o) { 
			if (o.$bind === "$resources") {
				if (o.$cards && o.$cards.$layout) return o.$cards.$layout;
				if (o.$layout) return  o.$layout;
				return o;
			}
			return null;
		});
		return article;
	};
	// get default layout for lists
	function  _defaultArticle(proto, imageProp, info) {
		var article = {
			$layout: {
				$layoutType: "stack",
				$items: [{
					$bind: "$resources",
					$format: "cards",
					$cards: {
						$layout: {
							$layoutType: "stack",
							$items: [
								{$bind: "$title", $isTitle: true},
								{$bind: "$description", $lines: 2}
							]
							
						}
					}
				}]
			}
		};
		if (imageProp) {
			info.$image = imageProp;
			article.$image = imageProp;
		}
		return _filterItem(article);
	};
	// scan check and correct $article (layout of lists) 
	function  _checkListViewArticle(proto, article, info) {
		// check if exists an image property 
		var imageProp = null;
		Object.keys(proto.$properties).forEach(function(pn) {
			var p = proto.$properties[pn];
			if (!imageProp && (p.$type === "image")) {
				imageProp = pn;
			}
		});
		if (!article) {
			// no layout / get default layout
			return _defaultArticle(proto, imageProp, info);
		} else {
			if (imageProp && !article.$image) {
				// get out image from layout 
				// 
				var obj = _scanObj(article, function(o) {
					if (o.$bind === imageProp)  return o;
					return null;
				}, function(child, parent) {
					if (Array.isArray(parent)) 
						child._parent=parent._parent;
					else
						child._parent=parent;
				});
				if (obj) {
					info.$image = imageProp;
					article.$image = imageProp;
					// try to remove image de design : the image is 
					if (obj._parent) {
						var cl = obj._parent, remove = true;
						while (remove)  {
							if (!cl.$items) {
								obj = cl;
								cl = cl._parent;
								if (!cl) break;
							} else { 
								var ii = cl.$items.indexOf(obj);
								if (ii >= 0) {
									cl.$items.splice(ii, 1);
									if (!cl.$items.length) {
										obj = cl;
										cl = cl._parent;
										//go up
									} else {
										remove = false;
										if ((cl.$layoutType === "row") && cl.$widths) {
											// for row layout update widths 
											var widths = cl.$widths.split(",");
											var oldw = parseFloat(widths[ii]);
											widths.splice(ii, 1);
											var neww = parseFloat(widths[0]);
											neww = neww + oldw;
											widths[0] = neww + '%';
											cl.$widths = widths.join(",")
											
										}
									}
									
									
								} else 
									remove = false;  //never
							}
						}
					}
				} else {
					article.$image = ""
				}
				// remove circular references
				_scanObj(article, function(o) { return null}, function(child, parent) {
					child._parent=null;
				});
			} else {
				info.$image = article.$image;
			
			}
			article =_filterItem(article);
			if (!article)
				return _defaultArticle(proto, imageProp, info);
			return article;
		}
	};
	that.checkQueryArticle = _checkListViewArticle;
	function _execRowlayout($layout,html, options, controller, cp, cd, exprData, info) {
		var widths;
		if (!$layout.$widths)  {
			if (!$layout.$items.length) return;
			var size = parseInt(10000/$layout.$items.length, 10)/100; //33.33
			var j = $layout.$items.length;
			widths= new Array(j); 
			while(j--) widths[j] = size;
		}
		widths = $layout.$widths.split(",");
		html.push('<div class="s-m-l-table">');
		widths.forEach(function(width, index) {
			if ((width.indexOf("%") < 0) && (width.indexOf("px") < 0)) 
				width = width + '%';
			html.push('<div class="s-m-l-row" style="width:'+ width+ '">');
			info.root = false;
			_execLayoutItem($layout.$items[index],html, options, controller, cp, cd, exprData, info);
			html.push('</div>');
			
		});
		html.push('</div>');
	}	
	function hasOnlyFields($layout) {
		var i = $layout.$items.length;
		while (i--) {
			if (!$layout.$items[i].$bind) {
				return false;
				break;
			}
		}
		return true;
	}	
			
	function _execStackLayout($layout,html, options, controller, cp, cd, exprData, info) {
		var addContainer = !hasOnlyFields($layout);
		$layout.$items.forEach(function(item) {
			if (!addContainer) 
				info.defContainer = "p";
			else
				html.push('<div class="s-m-l-stack">');
				
			_execLayoutItem(item,html, options, controller, cp, cd, exprData, info);
			if (!addContainer) 
				info.defContainer = "";
			else
				html.push('</div>');
		});
	}
	function _execInlineLayout($layout,html, options, controller, cp, cd, exprData, info) {
		var addContainer = !hasOnlyFields($layout);
		var tag = (addContainer?'div':'p');
		tag = "div"
		html.push('<'+tag+' class="s-m-l-inline">');
		
		$layout.$items.forEach(function(item, index) {
			if ($layout.$sep) {
				html.push($helpers.htmlEncode(" "));
			}
			_execLayoutItem(item,html, options, controller, cp, cd, exprData, info);
		});
		html.push('</'+tag+'>');
	};
	
	function _execField(item,html, options, controller, cp, cd, exprData, info) {
		var css = [];
		//$theme: A-Z
		//$styles: ["aside", "u", "i"]
		//$lines: 1-3
		//$isTitle -- is a title ?
		var tag = "span";
		if (info.defContainer) tag = info.defContainer;
		var defTag = tag;
		if (item.$isTitle || (item.$bind==="$title" && (item.$isTitle !== false))) {
			tag = "h3";
			css.push("title")
		}
		if (item.$theme) 
			css.push("theme"+ item.$theme);
		if (item.$styles)
			item.$styles.forEach(function(style) {
				if (style === "aside") {
					style = "ui-li-aside";
				}
				css.push(style);
			});
		if (item.$lines) css.push("s-line-"+item.$lines);			
		if (css.length || info.defContainer) {
			css.push("s-m-style");
			html.push('<'+tag+' class="'+ css.join(' ') + '">');
		}
		var exp = item.$bind;
		if (item.$expression) 
			exp = item.$expression;
		else {
			if (exp && (exp.charAt(0) === "$")) exp = '{'+ exp+ '}'
		}
		var ev =  $proto.parseExpression(exp, exprData,item.$bind, {html:true, list: true, onlyValue:false, keepBrackets: true});
		html.push(ev);
		if (css.length) 
			html.push('</'+ tag +'>');
	}
	
	function _execLayoutItem(item,html, options, controller, cp, cd, exprData, info) {
		var np, info = info || {};
		var layoutType = item.$layoutType;
		if (!layoutType && item.$items) layoutType = "stack";
		if (layoutType) {
			switch (layoutType) {
				case "stack":
				case "tabs":
					info.root = false;
					_execStackLayout(item,html, options, controller, cp, cd, exprData, info)
					break;
				case "inline":
					// for inline stacks
					info.root = false;
					_execInlineLayout(item,html, options, controller, cp, cd, exprData, info)
					break;
				case "row":
					info.root = false;
					_execRowlayout(item,html, options, controller, cp, cd, exprData, info)
					break;
			}
		} else if (item.$bind) {
			if (item.$format == "cards") {
				var layout =item.$cards.$layout;
				info.root = false;
				_execLayoutItem(layout,html, options, controller, cp, cd, exprData, info);
			} else {
				_execField(item,html, options, controller, cp, cd, exprData, info);
			}
		}
	}
	function _execListViewArticle($article,html, options, controller, cp, cd, layoutInfo) {
		//$article -- is $layout of item
		var cl = null;
		var $layout = $article;
		var consts = $helpers.ui.consts; 
		var expData = {data: controller.exprData(cd), $prototype: cp};
		if (layoutInfo.$image) {
			html.push('<div class="'+consts.normal_image_size+' ' + consts.normal_noimage + '"');
			var icon = cd[layoutInfo.$image];
			if (icon) {
				if (icon.$value) {
					icon = "data:"+(icon.$contentType || "image/jpeg")+";base64,"+icon.$value;
				} else {
					var curl = icon.$url;
					if (!curl && cp.$properties &&  cp.$properties[layoutInfo.$image]) 
						curl = cp.$properties[layoutInfo.$image].$url;
					if (curl) 
						icon = $proto.parseExpression(curl, expData,"$image");
					else
						icon = null;
					
				}
				if (icon) 
					html.push(' style="background: transparent url(\''+  icon.replace(/'/g, "\\'") + '\') no-repeat center center; background-size: 100% 100%"');
			}
			html.push('></div>');
			
			
		}
		_execLayoutItem($layout,html, options, controller, cp, cd, expData, {root: true, list:true});
	};
	that.sdi = _execListViewArticle;	
		
})(jQuery);

