(function($) {
	'use strict';
	var that = $.smobile || {};
	var $helpers = $.helpers;
	var $sdata = $.sdata;
	var $proto = $.proto;
	var q_parser = /([^&=;]*)=?([^&;]*)/g; //  query parser
	that._uiCache= {};
	
	that.PAGES = {
		"start": {ui: "start.$static", useAppId: false, isHome:true, db: false, addBack: false}, /* start page */
		"errors": {ui: "errors.$static", useAppId: false, db: false, addBack: true}, /*error page  */
		"apperrors": {ui: "apperrors.$static", useAppId: 2, db: false, addBack: true, home: true}, /*error page  */
		"home": {ui: "home.$static", useAppId: 2, isHome: true, db: true, addBack: true, cache: true}, /*home page of application  */
		"about": {ui: "about.$static", useAppId: false, db: false, addBack: true, home: true}, /*about sage*/
		"settings": {ui: "settings.$static", useAppId: false, db: false, addBack: true, home: true}, /*settings sage*/
		"send": {ui: "send.$static", useAppId: 2, home: true, addBack: true}, /*send page  */
		"page": {useAppId: 2, db: true, addBack: true, home: true},  /* regular  page */
		"dialog": {useAppId: 1, db: true, addBack: true, home: false},  /*regular  page */
		"apps": {ui: "applications.$static", useAppId: 0, db: false, addBack: true, home: true}  /*application manager* */
	};
	Object.keys(that.PAGES).forEach(function(id){
		that.PAGES[id].id = id;
	});
	
	that.mainFooter = function() { return "mainfooter";};
	that.pageIsDialog = function(page) {
		return  (page.attr( "data-" + $.mobile.ns + "role") === "dialog");
	};
	that.pageController = function(page) {
		return  $.jqmData(page[0], "controller");
	};
	that.pageIsDetail = function(page) {
		return ($.jqmData(page[0], 'detail') === "detail");
	};
	that.hash_sep = "-";
	$.smobile = that;
	
	that.PAGES.start.enhanceHandler = function(pdata, after) {
		// add installed applications
		var items = (pdata && pdata.content && pdata.content.menu && pdata.content.menu.data && pdata.content.menu.data.items)?pdata.content.menu.data.items:null;
		if (!items) return after(pdata);
		
		$sdata.getInstalledApps(false, function(installed) {
				var locale = $helpers.locale();
				if (installed && installed.length) {
					installed.forEach(function(app) {
						items.push({data: 
							{
								title:app.title, 
								description: app.description, 
								icon: app.icon,  
								hash: that.PAGES.home.id + that.hash_sep + $helpers.encodeURIComponent(app.id)
							}});
					});
				} else {
					items.push({data:{title: locale.applicationmanager.title, divider:true}});
					items.push({data:{
							title: locale.applicationmanager.title, 
							description: locale.applicationmanager.description,
							icon: "sage.appmanager", 
							hash: that.PAGES.apps.id
						}});
				
				}
				after(pdata);
			});
		
	};
	that.PAGES.apps.enhanceHandler = function(pdata, after) {
		var locale = $helpers.locale();
		if (pdata) pdata.$title = locale.applicationmanager.title;
		after(pdata);
	};
	that.linkDetailPage = function(controller) {
		if (controller.applicationId)  {
			return that.PAGES.page.id + that.hash_sep + $helpers.encodeURIComponent(controller.applicationId);
		} else return that.PAGES.page.id;
	};
	var _parseRepresentation = function(param) {
		if (param.representation) {
			var a = param.representation.split(".");
			if (a.length >= 2) {
				param.representation = a[0];
				param.facet = a[1];
			} 
		}
	};
	var _parsePageURI = function(query, page) {
		var params= {}, pRegex = new RegExp("#"+page, "");
		var qq = $helpers.decodeJsmQuery(query), ii;
		ii = qq.indexOf('?');
		if (ii > 0) {
			qq.substring(ii+1).replace(q_parser, function($0, $1, $2 ) {
				if ($1) params[$1] = decodeURIComponent($2);
			});
		}
		if (params.url) {
			params.dataurl = "";
			ii = params.url.indexOf("?");
			if (ii >= 0) {
				params.dataurl = params.url.substr(0, ii);
				qq = params.url.substr(ii+1);
				qq.replace(q_parser, function($0, $1, $2 ) {
					if ($1) params[$1] = decodeURIComponent($2);
				});
			} else {
				ii = params.url.indexOf(".$dashboard");
				if (ii >= 0) params.representation = params.url;
			
			}
		}	
		_parseRepresentation(params);
		return params;
	};
	
	var _pageName = function (hash) {
	    if (!hash) return null;
		var isEncoded = (hash.indexOf("=") < 0);
		//hashFormat:   [#]pagename[-appid[-pageId]][encodeURIComponent(?query)]
	    var ch = (hash[0] === "#")?hash.substring(1):hash;
		var idx = ch.indexOf((isEncoded?$helpers.encodeJsmQuery("?"):"?")); 	
		if (idx > 0) ch = ch.substring(0, idx);
		var res = { page: null };
		idx = ch.indexOf(that.hash_sep);
		if (idx > 0)  {
			res.page = that.PAGES[ch.substring(0, idx)];
			res.application = decodeURIComponent(ch.substr(idx+1));
			// 36 is 
			if (res.application.length > 36) {
				res.pageId = res.application.substr(36+1)
				res.application = res.application.substr(0, 36)
			}

		} else {
			res.page = that.PAGES[ch];
			res.application ="";
		}
		if (!res.page) return null;
		if ((res.page.useAppId===2) && !res.application) return null; // no appid found
		if ((res.page.useAppId===1) && !res.application) {
			res.application = ($sdata.config?$sdata.config.id:"");
		}
		if (!res.pageId) res.pageId = $helpers.uuid();
		res.pageName = res.page.id + (res.application?(that.hash_sep+$helpers.encodeURIComponent(res.application)):"");
		res.domid =(that.PAGES.home.id === res.page.id)?res.application:res.pageId;
		if (that.PAGES.home.id === res.page.id) 
			res.longPageName = res.pageName
		else
			res.longPageName = res.page.id + (res.application?(that.hash_sep+$helpers.encodeURIComponent(res.application+ '-'+ res.pageId)):"");
		return res;
	};
	that.ACTIONS = {
		"home" : {
			name: "home",
			execute: function(params, after) {
				that.goHome(null);
				after(null);
			}
		},
		"action-cancel" : {
			name: "action-cancel",
			execute: function(params, after) {
				var fafter = function() {
					$sdata.getSyncDataCount(function(count) {
							if (!count) {
								that.doBack(null); 
								after(false);
							} else after(true);
					});
				};
				$sdata.undoUpdate(params.url, fafter);	
			}
		}
		
		
	}
	var _actionName = function (hash) {
	    if (!hash) return null;
		var a = Object.keys(that.ACTIONS);
		var pn = "", i = a.length;
		while (i--) {
			var s=a[i];
			var ii = hash.indexOf(s);
			if ((ii === 0) || (ii === 1)) 
				return that.ACTIONS[s];
		}
		return null
	};
	var _execAction = function (hash, action, after) {
		var params = _parsePageURI(hash, action.name);
		return action.execute(params, after);
		
	};
	
	var _createHtml = function (cl, res) {
		if (cl.before) {
			res.push(cl.before);
			cl.before = null;
		}
		if (cl.html) {
			res.push(cl.html);
			cl.html = null;
		}
		if (cl.childs) {
			cl.childs.forEach(function(child){
				_createHtml(child, res);
			});
		}
		if (cl.after) {
			res.push(cl.after);
			cl.after = null;
		}
	};
	var _hasErrorControl = function(controls) {
		for (var name in controls) 
			if (controls[name].uiClass === "ErrorView") return true;
		return false;
	};
	var _createPage = function(controller, controls, html, after) {
		Object.keys(controls).forEach(function(id, index) {
			var c = controls[id];
			var parent = html[c.parent] || html.root;
			c.id = controller.prefix+id;
			if (c.layout) { 
				var l = $.smobile.addLayout.apply(controller, [parent, c]);
				html[id] = l;
				if (l.childs && l.childs.length) l.childs.forEach(function(child) { html[child.id] = child;});
			} else if (c.uiClass) {
				$.smobile.addControl.apply(controller, [parent, c, function(ctrl) {
					if (ctrl && Array.isArray(ctrl)) {
						ctrl.forEach(function(cc){
							html[id+cc.scid] = cc;
							if (cc.bind || cc.action) 
								controller.registerControl({id: c.id+cc.scid, bind: cc.bind, action:cc.action,  options: cc.options, uiClass: cc.uiClass, refresh: cc.refresh});
						});
					} else {
						if (ctrl) {
							html[id] = ctrl;
							if (ctrl.bind || ctrl.action) 
								controller.registerControl({id: c.id, bind: ctrl.bind, action:ctrl.action,  options: ctrl.options, uiClass: c.uiClass, refresh: ctrl.refresh});
							if (ctrl.async) {
								controller.asyncs = controller.asyncs || [];
								controller.asyncs.push(ctrl.async);
								ctrl.async = null;
							}
						}
					}
				}]);
			} 
		});
		after();
	};
	var _buildPage = function (pagename, $currentPage, $page, ui, data, info, pageInfo, $template, cb) {
		var sd = new Date();
		var page = $page[0], html = {root: {before: "", after:"", childs: []}}, parentController = null; 
		var hhtml = {root: {before: "", after:"", childs: []}}
		var fhtml = {root: {before: "", after:"", childs: []}}
		if ($currentPage && $currentPage[0]) {
			parentController = $.jqmData($currentPage[0], "controller");
		}
		if (info.url) {
			info.url =$sdata.parseSdataUri(info.url); 
		}
		$page.uiController({id: pagename, ui: pagename, entity: info.entity, inCreate: info.$createActivity, page: pageInfo, url: info.url});
		var controller = $.jqmData(page, "controller");
		controller.pageInfo = pageInfo;
		if ((pageInfo.page.useAppId === 2) && pageInfo.application) {
			controller.applicationId = pageInfo.application; 
			controller.homeRef = '#' + that.PAGES.home.id + that.hash_sep + $helpers.encodeURIComponent(controller.applicationId);
		} else  if (pageInfo.page.useAppId == false) {
			controller.applicationId = "";
			controller.homeRef = "#"+that.PAGES.start.id;
		}
		
		if (ui.$page) {
			controller.page = ui.$page;
			delete ui.$page;
		}
		controller.data = data || {};
		controller.pageOptions = ui.options || {};
		if (controller.pageOptions.detail && parentController) {
			controller.parent = parentController;
			parentController.child = controller;
			controller.applicationId = parentController.applicationId;
			
			if (ui.$prototype) controller.detailpagedata = {$prototype: ui.$prototype};
		}
		var $header = $page.children( ":jqmData(role=header)" ),
			$content = $page.children( ":jqmData(role=content)").children(".content-primary"),
			$footer = $page.children( ":jqmData(sagerole=footer)" );
		ui.header = ui.header  || {title : {uiClass: "Html", data: {html: "<h1></h1>"}}};
		ui.footer = ui.footer  || {};
		ui.content = ui.content || {};
		
		_createPage(controller, ui.footer, fhtml, function(){
			_createPage(controller, ui.header, hhtml, function() {
				if (!_hasErrorControl(ui.content)) 
					$helpers.clearErrors();
				else 
					controller.hasErrorView = true;
				_createPage(controller, ui.content, html, function(){
					var content = [], pgtitle;
					_createHtml(hhtml.root, content);
					$header.html(content.join(''));
					var $h = $header.find( "h1" );
					if ($h && $h.length)  pgtitle =  ui.$title || (controller.data?controller.data.$title:"") || "";
					var _afterSetTitle = function() {
						if (pageInfo && pageInfo.page && pageInfo.page.home) { 
							if ((ui.$facet !== "$lookup") && (ui.$facet !== "$query"))
								$header.append('<a href="'+ (controller.homeRef?controller.homeRef:pageInfo.page.home)+'" data-'+ $.mobile.ns +'icon="home" data-'+ $.mobile.ns +'iconpos="notext" data-'+ $.mobile.ns +'direction="reverse" class="ui-btn-right jqm-home">'+$helpers.locale().maintoolbar.home+'</a>');
							
						} else	if (pageInfo && pageInfo.page && (pageInfo.page.id == that.PAGES.home.id)) { 
							$header.append('<a href="#'+ that.PAGES.start.id+'" data-'+ $.mobile.ns +'icon="gear" data-'+ $.mobile.ns +'iconpos="notext" data-direction="reverse" class="ui-btn-right jqm-home">'+$helpers.locale().ui.root_menu_tip+'</a>');
						}
						content = [];
						_createHtml(html.root, content);
						$content.html(content.join(''));
						content = [];
						_createHtml(fhtml.root, content);
						$footer.html(content.join(''));
						//$page.page();
						if (controller.pageOptions.dialog) {
							$page.removeAttr('data-'+ $.mobile.ns +'role');
							$page.attr('data-'+ $.mobile.ns +'role', 'dialog');
							controller.pageOptions.detail = false;
						} else if (controller.pageOptions.detail) 
							$.jqmData($page[0], "detail", 'detail');
						if (ui.actions) {
							for (var action in ui.actions) controller["action" +action] =  ui.actions[action];
						}
						//$page.attr( "data-" + $.mobile.ns + "external-page", true ).one( 'pagecreate', $.mobile._bindPageRemove );
						var f = $('#' + $page[0].id);
						if (f.length) {
							$page.remove();
							return;
						}
								
						if ($template) 
							$page.insertBefore($template);
						else
							$page.appendTo($("body"));
						cb();
					};
					if (pgtitle) 
						$h.html(pgtitle);
					_afterSetTitle();
					
				}); 
			}); 
		});
	};
	that._loadStaticUI = function(name) { return that.staticui[name](); }
	
	var _private =  { 
		menu2link: function(menuItem, mi) {	
			if (menuItem.linkType == "$representation") {
				mi.entity = menuItem.entity;
				mi.representation = menuItem.representation;
				mi.facet = menuItem.facet || "$query";
				mi.params = menuItem.params || "";
			} else	if (menuItem.linkType == "$dashboard") {
				mi.facet = menuItem.facet || "$dashboard";
				mi.dashboard = menuItem.dashboard;
				mi.facet = "$dashboard";
			}

		},
		representation2ui: function(params, data) {	
			var cd = {}, iaddErrorView = true;
			if (params.facet ==  "$dashboard") {
				cd =  {
					"content": {
						"menu": { "uiClass":"MainMenu", "data" :{"items": []}} 
					}
				};
				data.forEach(function(menuItem){
					var mi = { title: menuItem.title, description:menuItem.description, icon: menuItem.icon};
					_private.menu2link(menuItem, mi);
					cd.content.menu.data.items.push({data:mi});
				});
				cd.$facet = "$dashboard";
				iaddErrorView = false;
			} else if ((params.facet ===  "$query") || (params.facet ===  "$lookup")) {
				cd =  {
					"content": {
						"items": { "uiClass":"SDataList", "data" :{"bind": "$resources"}} 
					},
					"header": {
						"title": {"uiClass": "Html", "data": {"html": "<h1></h1>"}},
						"tsort": { "uiClass":"SdataSort", "data" :{}} 
					}
				};
				var isLookup = (params.facet ===  "$lookup");
				if (isLookup) {	
					cd.options = {detail: true}
					cd.content.items.data.$lookup = 1; 
				}
				if (data && data.$prototype && data.$prototype.$title) 
					cd.$title = $proto.parseExpression(data.$prototype.$title, {data: null, $prototype: data.$prototype},"$title");
				cd.$page = params.representation + "." +  params.facet;
				cd.$facet = params.facet;
				cd.$representation = params.representation;
			} else if ((params.facet ==  "$details") || (params.facet ==  "$edit") || (params.facet ==  "$create")) {
				cd =  {"content": {}};
				var map = {};
				if (data.$article || data.$prototype.$article)
					$proto.layoutParser(map, data.$article || data.$prototype.$article, "$article", [data.$prototype]);
				$proto.generateForm(map, 0, cd.content, "", true, params.facet);
				if (data && data.$prototype && data.$prototype.$title)
					cd.$title = $proto.parseExpression(data.$prototype.$title, {data: null, $prototype: data.$prototype},"$title");
				cd.$page = params.representation + "." +  params.facet;
				cd.$facet = params.facet;
				cd.$representation = params.representation;
			} else cd = data;
			if (iaddErrorView && cd && cd.content) {
				cd.content.error = {uiClass: "ErrorView"};
			}			
			
			return cd;
			
		},
		getCtxItems: function(facet, representation, data) {
			var res = {exclude: false, items: []}, url, ppurl, links;
			var page = $sdata.config.pages[representation + "." + facet];
			if (page) {
				if (facet === "$details")  {
					//add $edit link if exists
					if (page.$prototype.$links.$edit && !page.$prototype.$links.$edit.$isHidden) {
						url = $proto.parseExpression(page.$prototype.$links.$edit.$url, {data: $proto.exprData(data), $prototype: page.$prototype},"$url");
						ppurl = $sdata.parseSdataUri(url); 
						if (ppurl && ppurl.query && ppurl.query.representation && $sdata.config.pages[ppurl.query.representation]) {
							res.items.push({title:$helpers.locale().ui.edit_item, icon: "edit", url: page.$prototype.$links.$edit.$url, bind:true});
						}
					}
					links = $proto.extractLinks(page.$prototype, page.$prototype, data, true);
					if (links && links.length) {
						//remove this 
						if (links.length > 2) links.length = 2;
						links.forEach(function(link) {	
							res.items.push({service:true, title:link.$title, icon: "gear", hash: "actionservice", bind:true, link: {$title:link.$title, $url:link.$url,$method: link.$method, $parameters:link.$parameters}});
						});
					}
					
				} else if ((facet === "$edit") || (facet === "$create")) {
					res.exclude = true;
					links = $proto.extractLinks(page.$prototype, page.$prototype, data, true);
					res.items = [
						{ title: $helpers.locale().ui.cancel_item, action: "cancel" , "jmdata": {"data-icon":"refresh", "data-transition": "none"} },
						{ title: $helpers.locale().ui.remove_item, action: "delete", "jmdata": {"data-icon":"delete", "data-transition": "none"} },
						{ title: $helpers.locale().ui.save_item, action: "save", "jmdata": {"data-icon":"check", "data-transition": "none"} }
					];
					if (links && links.length) {
						res.items.push({type:"services", items: links});
					}
				}
			}
			return res;
		
		},
		concatItems: function(context, stditems, appItems) {
			if (context.exclude) return  context.items || [];
			context.items = context.items || [];
			var items = context.items.concat(appItems, stditems);
			return items;
		},
		enhanceFooter: function(data) {
			var max_items = 4, uiData = this.ui, footer = this.footer;
			if (uiData.footer) return;
			uiData.footer = footer;
			if (footer && uiData && uiData.$facet && $sdata.config) {	
				if ((uiData.$facet === "$query") || (uiData.$facet === "$lookup")) {
					// standard buttons prev/home/next  
					uiData.footer.footer.data.items =
						footer.footer.data.items = [
							{ type: "previous"},
							{ type: "home"},
							{ type: "next"} 
						];
					return;
				}
				var items = footer.footer.data.items; // standard items 
				var defItems = $sdata.config.footer; // application shortcuts
				var context = _private.getCtxItems(uiData.$facet, uiData.$representation, data); // context items
				footer.footer.data.items = _private.concatItems(context, items, defItems);
				
			}
			while (footer.footer.data.items.length > max_items) 
				footer.footer.data.items.pop();
		}
	};
	that.detailUiData = function(controller, cp, data, items, options) {
		var res = {};
		var repData = {$prototype: cp, $article: {$items:items}};
		res.uiData = _private.representation2ui({facet: "$edit", representation:"x-object"}, repData);
		res.uiData.$prototype = cp;
		res.uiData.footer = {
			"footer" : {
				"uiClass":"NavBar", 
				"data":{ 
					"items": [
						{ title: $helpers.locale().ui.ok_item, action: "saveDetail", "jmdata": {"data-icon":"check", "data-transition": "none"} }
					]
				}
			}
		};
		if (options && options.canDelete) {
			res.uiData.footer.footer.data.items.push({ title: $helpers.locale().ui.remove_item, action: "deleteDetail", "jmdata": {"data-icon":"delete", "data-transition": "none"} });
		}
		
		
		return res;
	}
	var _loadDataAndDesign = function (query, page, cb) {
		var pageData=null, uiData={}, params = _parsePageURI(query, page.pageName);
		if (!params.representation && page.page.ui) {
			params.representation=page.page.ui;
			_parseRepresentation(params);
		}
		if (!params.representation) return cb("", null, null, null);
		
		var _afterEnhance = function(footer) {
			var  _afterData; 
			if (!page.page.db) {
				var cd = that._loadStaticUI(params.representation);
				if (!cd) return cb(params.representation, uiData, pageData, null);
				uiData = cd;
				var _afterData = _private.enhanceFooter.bind({ui: uiData, footer: footer});
				if (page.page.enhanceHandler) 
					page.page.enhanceHandler(uiData, function(newUiData) {
						return cb(params.representation, newUiData, pageData, _afterData);
					});
				else
					return cb(params.representation, uiData, pageData, _afterData);
			} else {
				var uimap = null, rep = params.representation;
				if (page.page.isHome) {
					params.representation = $sdata.config.home;
					rep = params.representation;
					params.facet = "$dashboard";
				}
				if (params.facet == "$dashboard") {
					uimap = $sdata.config.dashboards;
				} else if (params.facet) {
					rep = params.representation + "." + params.facet;
					uimap = $sdata.config.pages;
				}
				if (uimap && uimap[rep]) {
					uiData = uimap[rep];
					uiData = _private.representation2ui(params, uiData);
					if (uiData) {
						_afterData = _private.enhanceFooter.bind({ui: uiData, footer: footer});
						if (page.page.isHome) {
							uiData.$title = $sdata.config.title;
						}
						if (page.page.enhanceHandler) 
							page.page.enhanceHandler(uiData, function(newUiData) {
								return cb(rep, newUiData, pageData, _afterData);
							});
						else {
							return cb(rep, uiData, pageData, _afterData);
						}
					}  else {
						return cb("", null, null, null);
					}
				} else
					return cb("", null, null, null);
			}
		};
		var _load_page = function() {
			var footer = null;
			if ((page.page.useAppId == 2) && (!$sdata.config || ($sdata.config.id != page.application))) {
				$sdata.getAppConfig(page.application, function(config, error) {
						$sdata.config = config;
						if (!$sdata.config) {
							return cb("", null, {action: "start"}, null);
						}
						if ($sdata.config.pages) {
							Object.keys($sdata.config.pages).forEach(function(pagename){
								var cp = $sdata.config.pages[pagename];
								if (cp.$prototype){
									$proto.linkParents(cp.$prototype, null);
								}
							})
						}
						footer = that.staticui.appFooter();
						_afterEnhance(footer);
					});
				
			} else {
				if (!page.page.useAppId) {
					$sdata.config = null;
					$sdata.useCacheCount = false;
					footer = that._loadStaticUI(that.mainFooter());
				} else {
					footer = that.staticui.appFooter();
				}
				_afterEnhance(footer);
				
			}
			
		}
		_load_page();
		
	};
	that.removePage=function(page) {
		var controller = $.jqmData(page, "controller");
		if (controller) {
			console.log("Remove page" + (controller?(": " + controller.pageInfo.page.id +"-"+ (controller.pageInfo.pageId || "")):""));
			controller.remove();
		}
		var $t = $(page);
		$.removeWithDependents($t);
	
	};
	that.removeAllPages=function(exclude) {
		exclude = exclude || [];
		exclude.push("page-template");
		
		var $pages = $('div[data-role="page"]');
		if ($pages &&  $pages.length) {
			var i = $pages.length, page;
			while (i--) {
				page = $pages[i];
				if (exclude.indexOf(page.id) < 0) 
					that.removePage(page);
			}
		}
	};
	that.hashOfUrl=function(url) {
		var ii = url.indexOf('#');
		if (ii>=0) return url.substring(ii);
		return "";
	};
	that.pageName=_pageName;
	that.actionName=_actionName;
	that.loadPage = function (query, page, cb) {
		_loadDataAndDesign(query, page, cb);
	};
	that.execAction = _execAction;
	that.buildPage = _buildPage;
	that.refreshPage = function() {
		return window.location.reload();
		window.setTimeout(function() {
			return $.mobile.changePage(window.location.hash, 
					{	
						//changeHash: true,
						allowSamePageTransition: true,
						transition: "none"
					}
				);	
		
		},0)
		//return;
	};
	that.goHome = function(controller, appid) {
		var hash = "#"+that.PAGES.start.id;
		if (!controller && $.mobile.activePage) {
			controller =  $.jqmData($.mobile.activePage[0], "controller");
		}
		if (controller && controller.applicationId) appid = controller.applicationId;
		if (appid)
			hash = '#' + that.PAGES.home.id + that.hash_sep + $helpers.encodeURIComponent(appid);
		$.mobile.changePage(hash, 
			{	
				allowSamePageTransition: true,
				reverse: true
			}
		);
	};
	that.doBack = function(controller) {
		$.mobile.back();
	};
	
	that.showErrors = function(controller) {
		if (controller && controller.hasErrorView) {
			//return that.refreshPage();
			return controller.doRefresh();
		}
		var appid = "", hash="#errors";
		if ($sdata.config && $sdata.config.id) {
			appid =  $sdata.config.id;
			hash = "#apperrors-"+appid;
			
		}
		$.mobile.changePage(hash, 
			{	
				allowSamePageTransition: true
			}
		);
	};
	that.showSends = function(controller) {
		if ($sdata.config && $sdata.config.id) {
			$.mobile.changePage("#send-"+$sdata.config.id, 
				{	
					allowSamePageTransition: true
				}
			);
		}
	};
	
	that.createPage = function(page) {
		var $ptemplate = $("#page-template");
		var $page=$ptemplate.clone().attr('data-'+$.mobile.ns +'url', page.pageName).attr('id', page.domid)
		if (page.page.addBack) {
			$page.attr( "data-" + $.mobile.ns + "add-back-btn", "true");
		}
		return {$page: $page, $template: $ptemplate};
	};
	that.createDialog = function(uiData, pageData) {
		var page = _pageName('#dialog'), uiId = "dialog";
		var cp = that.createPage(page);
		if (uiData.footer) uiData.footer = null; 
		var options =  {transition: 'pop', role: 'dialog', changeHash: true};
		$.smobile.buildPage(uiId, $.mobile.activePage, cp.$page, uiData, pageData, {$createActivity: true}, page, cp.$template, function() {
			var controller = $.jqmData(cp.$page[0], "controller");
			cp.$page.find(".s-m-footer").remove();
			if (uiData.actions) {
				controller.pageActions = uiData.actions;
				delete uiData.actions;
			}
			$.mobile.changePage(cp.$page, options);
			controller.bindData();
		});
		
	};
	that.createDetail = function(uiData, pageData, parent) {
		uiData.options = uiData.options ||  {};
		uiData.options.detail = true;
		var page = _pageName(parent?('#page-'+parent.applicationId+'-' + $helpers.uuid()):"#dialog"), uiId = "dialog";
		var cp = that.createPage(page);
		cp.$page.attr('data-url','#'+ page.longPageName)		
		var options =  {transition: "slide", changeHash: true};
		//elf.options.url.entity 
		$.smobile.buildPage(uiId, $.mobile.activePage, cp.$page, uiData, pageData, {$createActivity: true}, page, cp.$template, function() {
			var controller = $.jqmData(cp.$page[0], "controller");
			if (parent) controller.options.url= parent.options.url;
			if (uiData.actions) {
				controller.pageActions = uiData.actions;
				delete uiData.actions;
			}
			$.mobile.changePage(cp.$page, options);
			controller.bindData();
		});
		
	};
	
	that.showError = function(settings, msg) {
		$.mobile.showPageLoadingMsg( $.mobile.pageLoadErrorMessageTheme, msg || $.mobile.pageLoadErrorMessage, true );
		// hide after delay
		setTimeout( $.mobile.hidePageLoadingMsg,3000);
	};
	that.silentAction = function(error) {  
		if (error.action === "start") {
			that.goHome(null);
		}
	};
	
	that.addLayout = function(parentLayout, layoutData) { return null; };
	that.addControl = function(parentLayout, c, after) { after();};
	that.setEvents = function(c, $c) { return null;};
	that.parseURL = function(u, page, cb) {
		var doEncodeHref = true;
		var filter = null, initData=null, url={method:"GET"};
		var params = _parsePageURI(u.search || u.hash, page.pageName);
		var base = u.domain+ u.pathname + ($helpers.hashFirst()?('#' + page.longPageName):"");
		if (!params.representation && page.page.ui) params.representation=page.page.ui;
		var options = {url: params.url};
		if (params.url && (params.facet !== "$dashboard"))  {
			var opts = {$title:params.title, $method:url.method, $init: initData, $filter:filter,  $ui: params.ui, $type: params.type, 
				success: function(data, headers) {
					headers = headers || {};
					var href =  u.domain+ u.pathname;  
					if (headers.location) {
						if (headers.location.indexOf("http") != 0) 
							delete headers.location;
					}
					var newURI = headers.location?headers.location:params.url;
					options.url = newURI;
					if (headers.status > 300) {
						if (page.application)
							href = href + "#" +that.PAGES.home.id + that.hash_sep + page.application;
						else
							href = href + "#" +that.PAGES.start.id;
						return cb(href , data, true, options);
					} else if (headers.status == 100) {
						options.stop = true;
						return cb("", data, false, {stop: true});
					} else {				
						var search = '?url=' + $helpers.encodeURIComponent(newURI);
						search = base + (doEncodeHref?$helpers.encodeJsmQuery(search):search) + ($helpers.hashFirst()?"":('#' + page.longPageName));
						return cb(search, data, false, options);
					}
					
				}
			};
			if (url && url.options) $.extend(opts, url.options);
			return $sdata.execURL(params.url, opts);
		}
		var ch = base;
		if ((params.facet === "$dashboard") && params.url) {
			var ch = '?url=' + $helpers.encodeURIComponent(params.url);
			ch = base + (doEncodeHref?$helpers.encodeJsmQuery(ch):ch) + ($helpers.hashFirst()?"":('#' + page.longPageName));
			options.url = params.url;
		}
		var cpd = null;
		if (page.page && !page.page.db && !page.page.useAppId && that.staticui[page.page.id + "_data"])  {
			cpd = that.staticui[page.page.id + "_data"]();
		}
		return cb(ch, cpd, false, options); 
	};
	that.load = function(appData, progress, after) {
		$sdata.authenticate(function(ad, error, offline) {
			if (error) {
				if (after) after();
			} else {
				return that._load(appData, progress, after); 
			}
		});
	}
	
		
	that._installDatainLocalDB = function(urls, after, doDelete) {
		var len = urls.length + 1, count = 1, fail = false;
		var entities = {};
		$helpers.each(urls, function(url, index, next) {
			if (fail || $helpers.hasErrors()) {
				fail = true;
				return next();
			}
			var purl = $sdata.parseSdataUri(url.url); 
			var key = $sdata.url2entity(purl);
			if (entities[key]) return next();
			entities[key] = true;
			$sdata.GET(url.url, function(data, headers) {
				if (fail || $helpers.hasErrors()) {
					fail = true;
					return next();
				}
				if (data && data.$resources  && data.$resources.length) {
					// find best eniity prototype 
					var proto = $sdata.bestProto(purl);
					var cfg = {id:url.appid, url: purl, $prototype: proto};
					if (proto) {
						return $sdata.initData(cfg, data.$resources, true, next)
					}
				} 
				return next();
				
			});
		}, function() {
			if (after) after();
		});
		
	},
	that._saveAppsInDB = function(after, apps, fail, progress, count, len) {
		$helpers.each(apps, function(capp, index, next) {
			if (fail || $helpers.hasErrors()) {
				fail = true;
				return next();
			}
			if (capp.data) {
				var urls = [];
				if (capp.data && capp.data.entities) {
					Object.keys(capp.data.entities).forEach(function(representation) {
						var config = capp.data.entities[representation];
						if (config.sync || $proto.forceSync) {
							config.sync = true;
							var url = {
								appid: capp.id, 
								url: capp.baseURL + "/" + config.pluralType + "?representation=" + representation+".$bulk" + "&role=", 
								entity: capp.baseURL + "/" + config.pluralType,
								config: capp.data,
								representation: representation
							};
							urls.push(url);
						}
					});
					
				}
			
			}			
			$sdata.installApp(capp, function(resdata, error) {
				if (!error) {
					count++;
					if (progress) progress(count, len, "Done");
				} else fail = true;
				if (fail || $helpers.hasErrors()) {
					fail = true;
					return next();
				}
				$sdata.clearSdata(capp.id, function() { 
					$sdata.config = capp.data;
					$sdata.config.id = capp.id;
					$sdata.config.$info = {url: capp.url, version: capp.version, title:capp.title, icon: capp.icon};
					return that._installDatainLocalDB(urls, next, true); 
				});
			});
		}, function() {
			if (progress) progress(len, len, "Done");
			if (after) after();
		});
	};
	
	that._load = function(appData, progress, after) {	
		var apps = [];
		if (appData.$reinstall) {
			delete appData.$reinstall;
			if ($sdata.config && $sdata.config.id) {
				var cd = {};
				cd.id = $sdata.config.id;	
				cd.baseURL = $sdata.config.baseUrl;
				cd.description = $sdata.config.description;
				cd.url = $sdata.config.$info.url;
				cd.title = $sdata.config.$info.title;
				cd.icon = $sdata.config.$info.icon;
				cd.version = $sdata.config.$info.version;
				apps.push(cd);
			} else 	
				return after();
		} else {
			var datasets = appData.datasets;
			delete appData.datasets;
			datasets.forEach(function(dataset) {
				if (dataset.selected === false) return;
				var cd = $.extend(true, {},appData);
				cd.id = $helpers.uuid();	
				cd.baseURL = cd.baseURL + dataset.dataset;
				cd.description = cd.description + " ("+dataset.description + ")";
				cd.version = cd.version || "0.000";
				apps.push(cd);
			});
		}
		var len=apps.length*2+1, count = 0;
		if (progress) progress(0, len, "");
		var fail = false;
		$helpers.each(apps, function(capp, index, next) {
			if (fail || $helpers.hasErrors()) {
				fail = true;
				return next();
			}
		
			$sdata.applicationDetails(capp, function(data) {	
				count++;
				if (progress) progress(count, len, "Done");
				capp.data = data;
				if (!data) {
					if (fail || $helpers.hasErrors()) {
						fail = true;
						return next();
					}
				}
				if (data) {
					data.title = capp.title;
					data.description = capp.description;
					data.baseUrl = capp.baseURL;
				}
				return next();
			});
		},function() {
			if (fail){
				if (after) return after();
			}
			that._saveAppsInDB(after, apps, false, progress, count, len); 
		});
	};
})(jQuery);    

(function($){
	var $helpers = $.helpers;
	var $proto = $.proto;
	var $sdata = $.sdata;
	/**
	* @constructor
	*/
	var Controller = function($page, options){
		var self = this;
		self.$page = $page;
		self.page = $page[0];
		if (options.id) options.id = options.id.replace(/\./g, "_").replace(/\$/g, "_");;
		var old = $.jqmData(self.page, "controller");
		if (old) old.remove();
		$.jqmData(self.page, "controller", this);
		self.options = options;
		self.controls = {};
		return self.init();
	};
	Controller.prototype = {
		defaults: {id: "empty"},
		init: function() {
			var self = this;
			self.config = $.extend({}, self.defaults, self.options);
			self.prefix = self.config.id + "_";
			self.ui = self.config.ui;
			self.hasErrorView = false;
			self.errors = [];
			return this;
		}, 
		exprData: function(propData) {
			var self = this;
			var res = $proto.exprData();
			var cc = self;
			if (propData) {
				if (Array.isArray(propData)) {
					propData.forEach(function(value){
						if (value) res.push(value)
					});
				} else res.push(propData);
			}
			while (true) {
				res.push(cc.data)
				if (cc.parent && cc.$bind)
					cc = cc.parent;	
				else 
					break;
			}
			return res;
			
		},
		clearErrors: function() {
			var self = this;
			
			self.errors.length=0;
		},
		hasErrors: function() {
			return this.errors.length >0;
		},
		pushError: function(error) {
			var self = this;
			self.errors.push(error);
		},
		getPageData: function() {
			var self = this;
			if (!self.page) return null;
			if (self.detailpagedata) return self.detailpagedata;
			if (!$sdata.config || !$sdata.config.pages || !$sdata.config.pages[self.page]) return null;
			var data = $sdata.config.pages[self.page];
			return data;
		},	
		getSortFields: function() {
			var self = this;
			if (!self.page) return null;
			var page = self.page + "";
			if ((page.indexOf(".$query") > 0) || (page.indexOf(".$lookup") > 0) || (page.indexOf(".$select") > 0)) {
				var pd = self.getPageData(), res=[];
				if (!pd.$prototype || !pd.$prototype.$properties) return;
				var proto = pd.$prototype.$properties.$resources.$item;
				
				Object.keys(proto.$properties).forEach(function(name) {
					var prop = proto.$properties[name];
					if (prop.$capabilities && (prop.$capabilities.indexOf('sort') >= 0)) {
						res.push({value: name, title: $proto.parseExpression(prop.$title, {data: null, $prototype: proto},"$title"), type:prop.$type});
					}
				});
				if (res.length) return res;
				
			};
			return null;
		},	
		afterChangeHnd: function(c) {
			var self = this, f;
			if (c.options && c.options.action && self["action"+c.options.action]) {
				f = self["action"+c.options.action];
				return f.bind(self);
			}
			return null;
		},
		checkData: function() {
			var self = this;
			self.clearErrors();
			Object.keys(self.controls).forEach(function(name){
				var control = self.controls[name];
				var f = $.smobile.controls[control.uiClass].checkValue;
				if (f) {
					var $c=$('#' + control.id);
					if ($c) {
						f.apply(self, [$c, control]);
					}
				}
				
			});
			if (self.hasErrors()) return false;
			return true;
			
		},
		checkChange: function(cid, value, next) {
			var self = this, oldValue;
			var ctrl = self.controls[cid];
			if (ctrl && ctrl.bind) {
				var isLookup = ctrl.options && ctrl.options.$lookup;
				oldValue = self.getValue(ctrl.bind, null, "");
				if (isLookup) {
					// value is {$value:"text", $key:"key", $key:"uuid"}
					if (value) {
						if (value.$value != null) {
							value[ctrl.options.$display] = value.$value;
							delete value.$value;
						
						}
						if ((value[ctrl.options.$display] === "") && !value.$key && !value.$uuid)
							value = null;
					}
					if (value === null) {
						if (oldValue != null) {
							self.setData(ctrl.bind,value);
							self.notifyChange();
						}
					} else if (value.$key) {
						if (!oldValue || (oldValue.$key != value.$key)) {
							self.setData(ctrl.bind,value);
							self.notifyChange();
						}
					} else if (value.$uuid) {
						if (!oldValue || (oldValue.$uuid != value.$uuid)) { 
							self.setData(ctrl.bind,value);
							self.notifyChange();
						}
					} else {
						if (value[ctrl.options.$display] != null)  {
							if (!oldValue || (oldValue[ctrl.options.$display] != value[ctrl.options.$display])) {
								self.setData(ctrl.bind,value);
								self.notifyChange();
							}
						} else if (oldValue != null) {
							self.setData(ctrl.bind,null);
							self.notifyChange();
						}
						
					}
					
				} else if (oldValue != value) {
					self.setData(ctrl.bind,value);
					self.notifyChange();
				}
				if (next) return next();
			}
			if (next) return next();
			
		},
		editActivity:function() {
			//
			var self = this;
			return (self.options && self.options.url && (self.options.url.entity === $proto.sdataKey.workingCopies)); 
		},
		draftId:function() {
			var self = this;
			return self.options.url.id; 
		},
		notifyChange: function() {
			var self = this;
			if (self.editActivity()) {
				if (self.parent) 
					self.parent.notifyChange();
				else
					$sdata.updateDraft(self.draftId(), self.data);
			}
		},
		getDiagnoses: function(bind) {
			var cd =  this.data;
			if (!cd) return null;
			cd = cd.$properties || cd.$;
			if (!cd) return null;
			cd = cd[bind]
			if (!cd) return null;
			cd = cd.$diagnoses;
			if (!cd) return null;
			var res = [];
			cd.forEach(function(diag) {
				if (diag.severity === "error") {
					if (res.indexOf(diag.message)) {
						res.push(diag.message);
					}
				}
			});
			return res.length?res:null;
			
		},
		getValue: function(bind, data, defValue) {
			var cd =  data || this.data, name;
			var values = bind.split('.');
			while (values.length) {
				if (!cd) break;
				name = values.shift();
				cd = cd[name];
			}
			if (cd==null) cd = defValue;
			return cd;
		},
		getProtoDataValue: function(bind, data, defValue) {
			var cd =  data || this.data, name;
			if (cd) cd = cd.$properties; 
			var values = bind.split('.');
			while (values.length) {
				if (!cd) break;
				name = values.shift();
				cd = cd[name];
			}
			if (cd==null) cd = defValue;
			return cd;
		},
		allData: function(value) {
			var controller  = this;
			while (controller.parent) controller = controller.parent;
			if (value) {
				controller.data = value;
			} else 
				return controller.getCurrentData();
		},
		serviceData: function() {
			var controller  = this;
			while (controller.parent) controller = controller.parent;
			if (!controller.editActivity()) return null;
			return controller.getCurrentData();
				
		},
		getCurrentData: function() {
			return this.data;
		},
		setData: function(bind, value, data) {
			var cd =  data || this.data;
			var values = bind.split('.');
			for (var i=0, len=values.length-1; i<len; i++) {
				var nv = cd[values[i]];
				if (!nv) {
					nv = {};
					cd[values[i]] = nv
				};
				cd = nv;
			}
			cd[values[values.length-1]]=value;
		},
		actioncancel: function(options) {
			var self = this;
			if (self.editActivity()) {
				return $sdata.deleteDraft(self.draftId(), options.success);
			}
			if (options.success) options.success();
		},
		actionsaveDetail: function(options) {
			var self = this;
			$.smobile.doBack(self);
		},
		actiondeleteDetail: function(options) {
			var self = this;
			$.smobile.doBack(self);
		},
		actionsave: function(options) {
			var self = this;
			if (!self.checkData())  {
				return options.success(null, true);
			}
			$helpers.clearErrors();
			if (self.editActivity()) {
				return $sdata.saveDraft(self.draftId(), self.data, function() {
					self.removeCachePages();
					if ($helpers.hasErrors()) { 
						return options.success();
					}
					self._sendLocalData(options.success);
						
				});
			}
			options.success();
		},
		setNeedRefresh: function() {
			var self = this;
			var ctrl =  self;
			while (ctrl) {
				ctrl.needRefresh = true;
				ctrl = ctrl.parent;
			}
		},
		doRefresh: function(options) {
			var self = this;
			Object.keys(self.controls).forEach(function(cn) {
				var c = self.controls[cn];
				if (c.uiClass) {
					var f = ($.smobile.controls[c.uiClass]?$.smobile.controls[c.uiClass].refresh:null);
					if (f) {
						if (c.id) {
							f(self, c.options, $('#'+c.id), c.id);
						}
					}
				}
			});
		},
		actionnext: function(options) {
			var self = this;
			var ccd = self.getCurrentData();
			var _after =  function(s) { 
				if (options.success) options.success(null, false, true); 
			};
			if (ccd.$links && ccd.$links.$next) {
				var url = $proto.parseExpression(ccd.$links.$next.$url, {data: null, $prototype: $proto.getProto(self.getPageData())},"$url");
				if (url) {
					$.mobile.loading('show', {theme: "a", text: $helpers.locale().ui.loading});
					$sdata.execURL(url, {
						error: function(data) {
							$.mobile.loading('hide');
							_after();
						},
						success: function(cd) {
							$.mobile.loading('hide');
							if (cd) {
								// refresh sdatalist && footer
								self.data = cd;	
								self.doRefresh();
							}
							_after();
							
						}
					});  			
				} else _after();
			} else _after();
		},
		actionprevious: function(options) {
			var self = this;
			var ccd = self.getCurrentData();
			var _after =  function() { if (options.success) options.success(null, false, true); };
			if (ccd.$links && ccd.$links.$previous) {
				var url = $proto.parseExpression(ccd.$links.$previous.$url, {data: null, $prototype: $proto.getProto(self.getPageData())},"$url");
				if (url) {
					$.mobile.loading('show', {theme: "a", text: $helpers.locale().ui.loading});
					$sdata.execURL(url, {
						error: function(data) {
							$.mobile.loading('hide');
							_after();
						},
						success: function(cd) {
							$.mobile.loading('hide');
							if (cd) {
								// refresh sdatalist && footer
								self.data = cd;	
								self.doRefresh();
							}
							_after();
						}
					});  			
				}  else _after();
			} else _after();
		},
		actionservice: function(options, params) {
			var controller = this;
			var _after =  function() { if (options.success) options.success(null, false, true); };
			if (!$helpers.online()) return _after();
			var page = controller.getPageData();
			if (!params.url) return _after();
			var paramData = null;
			if (params.$parameters) {
				paramData = {};
				Object.keys(params.$parameters).forEach(function(pn){
					paramData[pn] =  $proto.parseExpression(params.$parameters[pn], {data: controller.exprData(), $prototype: $proto.getProto(page, params.bind)},"$parameters");
				});
			
			}
			var url = $proto.parseExpression(params.url, {data: controller.exprData(paramData), $prototype: $proto.getProto(page, params.bind)},"$url");
			$helpers.clearErrors();
			$sdata.authenticate(function(ad, error, offline) {
				if (error || offline) _after();
				var postData = controller.serviceData(), edit=true;
				if (!postData) {
					postData = {};
					if (params.$parameters) {
						postData = paramData;
					}
					edit = false;
				}
				$sdata.post(url, postData, function(data) {
					var cd  = data;
					if (edit) {
						cd = controller.allData();
						$helpers.clearErrors();
						if (cd) {
							controller.allData(cd)
							controller.doRefresh();
							controller.notifyChange();
						}
					} else {
						controller.removeCachePages();
						var cd  = data;
						if (cd) {
							var errors = $helpers.extractErrors(cd, "");
							if (errors  && errors  && errors.errors.length) {
								errors.errors.forEach(function(err){
									$helpers.pushException(err,"");
									
								});
								
							} else {
								errors = $helpers.extractWarns(cd, "");
								if (errors  && errors  && errors.errors.length) {
									errors.errors.forEach(function(err){
										$helpers.pushWarning(err,"");
										
									});
								}
							}
						}
					}
					_after();
				});
			});		
			
		},
		installApplication: function(options, data) {
			var hasDatasets = false;
			if (!data) {
				if (options.fail) return options.fail();
				return;
			}
			$helpers.clearErrors();
			if (data.datasets) {
				var i = data.datasets.length;
				while(i--) {
					hasDatasets = !(data.datasets[i].selected === false);
					if (hasDatasets) break;
				}
			} 
			if (!hasDatasets) {
				if ( options.fail) {
					return options.fail();
				}
				return;
			}
			var self = this;
			$.smobile.load(data, function(index, count, msg) {
				if ((index == 0) && count) $.mobile.loading('show', {theme:"a", text: $helpers.locale().ui.installing});
				else if (index == count) $.mobile.loading('hide');
			}, function() {
				$.mobile.loading('hide');
				if ($helpers.hasErrors()) {
					if ( options.fail) options.fail();
					$.smobile.showErrors(self);
				} else if (options.success) options.success();
			});
		},
		removeApplication: function(options, id) {
			$helpers.clearErrors();
			var self = this;
			$sdata.removeFromDB(id, function() {
				if ($helpers.hasErrors()) {
					$.smobile.showErrors(self);
				} else if (options.success) options.success();
			});
		},
		_sendLocalData: function(after) {
			var self = this;
			if (!$helpers.online()) {
				if (after) after();
				return;
			}
			$sdata.getSyncData(function(data, error) {
				if (!error && data) {
					var opts = {
						success: function() {
							if ($helpers.hasErrors()) { 
								$.smobile.showSends(self);
								return;
							}
							if (after) after();
						}
					}				
					return $sdata.execBatch(data, opts);				
				}
			});
		},
		removeCachePages: function() { 
			var cont = this;
			var exclude = [];
			while (true) {
				if (cont && cont.config && cont.config.page &&  cont.config.page.pageId)
					exclude.push( cont.config.page.pageId);
				if (cont.parent && cont.$bind)
					cont = cont.parent;	
				else 
					break;
			}
			
			$.smobile.removeAllPages(exclude);
		},
		actionsync: function(options) {
			$helpers.clearErrors();
			var self = this, errors=[], reload = self.resync;
			var opts = {
				success: function() {
					if ($helpers.hasErrors()) { 
						if (options.success) options.success(null, true, true);
						$.smobile.showErrors(self);
						return;
					}
					if ( reload) {
						$.smobile.removeAllPages([self.config.page.pageId]);
						return $.smobile.goHome(self);
						
					}
					if (options.success) options.success(null);
				}
			}
			var _resync = (self.resync?$.smobile.load:null);
			delete self.resync;
			return $sdata.execBatch(self.data, opts, _resync);
		},
		actionresync: function(options) {
			var self = this;
			return self.actionsync(options);
		},
		actionundo: function(options) {
			$helpers.clearErrors();
			var self = this, errors=[];
			if (self.data) {
				$helpers.each(Object.keys(self.data), function(value, index, next) {
					var list = self.data[value];
					if (list && list.length) {
						$helpers.each(list, function(value, index, next) {
							var url = value.$info.url;
							$sdata.undoUpdate( value.$info.url, next)
						}, next);
					} else next();
				}, function() { if (options.success) options.success();})
			} else 
				if (options.success) options.success();
		},
		actiondelete: function(options) {
			var self = this;
			$helpers.clearErrors();
			if (self.editActivity()) {
				return $sdata.deleteDataByDraft(self.draftId(), function() {
					if ($helpers.hasErrors()) { 
						return options.success(null, true);
					}
					var after = function() {$.smobile.goHome(self);};
					self._sendLocalData(after);
				});
			}
			if (options.success) options.success();
		},
		remove: function() {
			$.jqmRemoveData(this.page, "controller");
			this.$page = null;
			this.page = null;
			if (this.pageInfo) this.pageInfo.page= null;
			if (this.options && this.options.page) this.options.page= null;
			if (this.parent) {
				this.data = null;
				this.parent = null;
			}
			this.child = null;
			this.detailpagedata = null;
			$helpers.cleanUp(this);
		},
		registerControl: function(data) {
			var self = this;
			self.controls[data.id] = data;
		},
		controlByClass: function(uiClass) {
			var self = this;
			for (var p in self.controls) {
				var o = self.controls[p];
				if (o.uiClass == uiClass) return o;
			}
			return null;
		},
		bindData: function(cb) {
			var self = this;
			Object.keys(self.controls).forEach(function (id) {
				var c = self.controls[id];
				var $c=$('#' + c.id);
				if ($c) $.smobile.setEvents.apply(self, [$c, c]);
			});
			self.$page.click(function(e){
				if (e && e.target) {
					var target = e.target;
					while (target  && target.tagName && (target.tagName.toUpperCase() !== 'A')) {
						target = target.parentNode;
					}
					if (target &&  target.href && target.href.indexOf("#actionservice") >= 0) {
						e.preventDefault();
						var p = $(target).attr("data-action");
						if (p && self.alinks && self.alinks[p]) {
							self.actionservice({success: function(){
								if ($helpers.hasErrors()) { 
									$.smobile.showErrors(self);
									$helpers.clearErrors();
									return;
								}

							}}, self.alinks[p]);
						}
					}
				}
			});
			if (self.asyncs) {
				var i = self.asyncs.length;
				while (i--) {
					self.asyncs[i]();
					self.asyncs[i] = null;
				}
				self.asyncs = null;
			}
			if (cb) cb();
		}
	};
	$.fn.uiController = function(options){
		new Controller(this, options);
		return this;
	};
})(jQuery);



