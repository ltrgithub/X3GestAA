
(function($) {
	'use strict';
	var that = $.smobile;
	that.controls = that.controls || {};
	that.controls.Button={
		_typedButtons: {
			dialog_cancel: {
				jmdata: {
					"data-icon": "refresh",
					"data-iconpos": "left"
				},
				defaults: {
					action: "dialog_cancel"
				}
				
			},
			dialog_ok: {
				jmdata: {
					"data-icon": "check",
					"data-iconpos": "left"
				},
				defaults: {
					action: "dialog_ok"
				}
				
			},
			cancel: {
				jmdata: {
					"data-icon": "refresh",
					"data-iconpos": "top"
				},
				defaults: {
					action: "cancel"
				}
				
			},
			action: {
				jmdata: {
					"data-icon": "gear",
					"data-iconpos": "top"
				},
				defaults: {
					action: ""
				}
				
			},
			add: {
				jmdata: {
					"data-iconpos": "top",
					"data-icon": "add"
				}
			},
			back: {
				jmdata: {
					"data-icon": "arrow-l"
				},
				defaults: {
					action: "back"
				}
				
			
			},
			
			save: {
				jmdata: {
					"data-iconpos": "top",
					"data-icon": "check"
				},
				defaults: {
					action: "save"
				}
			},
			"delete": {
				jmdata: {
					"data-iconpos": "top",
					"data-icon": "delete"
				},
				defaults: {
					action: "delete"
				}
			}
			
			
		},
		_stdActions: {
			dialog_cancel: function() {
				var controller = this;
				controller.$page.dialog('close');
				
				
			},
			dialog_ok: function() {
				var controller = this;
				if (!controller.checkData()) return false;
				var data = controller.data;
				var s = controller.pageActions?controller.pageActions.success:null;
				controller.$page.dialog('close');
				if (s) s(data);
			}
				
		},
		handler: function(c, after) {
			var controller = this;
			var  html = [], options= c.data || {};
			var jmdata = {};
			options.controlId = c.id;
			if (options.type) {
				var tb= that.controls.Button._typedButtons[options.type];
				if (tb) {
					$.extend(jmdata, tb.jmdata);
					if (tb.defaults) Object.keys(tb.defaults).forEach(function(name) {
						if (options[name] == null) options[name]=tb.defaults[name];
					});
					
				}
			}
			if (options.jmdata) $.extend(jmdata, options.jmdata);
			$.extend(jmdata, {"data-role": "button"});
			options.jmdata = jmdata;
			//TODO
			//that._createLink(html, options, controller, function() {
			//	return after({html: html.join(''), action: options.action, options: options});
			//});
			return after({html: html.join(''), action: options.action, options: options});
			
		},
		events: function($c, c) {
			var controller = this;
			$c.click(function(e) {
				if (c && c.action) {
					if (c.options.disabled) return;
					var old = c.options.disabled;
					c.options.disabled = true;
					if (that.controls.Button._stdActions[c.action]) {
						that.controls.Button._stdActions[c.action].call(controller);
					} else {
						var hnd = controller["action" + c.action];
						setTimeout(function() {c.options.disabled = false;},500);
						return hnd.call(controller, 
							{
								success: function() {
									$.smobile.doBack(controller);
								}
							}
						);
						
					}
					c.options.disabled = false;
					
				}
				e.preventDefault();
			});
		}
	};
})(jQuery);    
