(function($) {
	var that = $.smobile || {};
	$.smobile = that;
	that.controls.Photo = {
		_setPhoto: function(controller, $c, c) {
			var $image = $c.find('#'+ c.id + "_image");
			var _doNodata = function() {
				$c.addClass("u-m-no-image");
				$image.addClass("u-m-dn");
			};
			var _showImg = function() {
				$c.removeClass("u-m-no-image");
				$image.removeClass("u-m-dn");
			};
			controller.getData(c.options.bind, null,  false, function(value){
				if (!value) {
					if (c.options.bind_url)  {
						controller.getData(c.options.bind_url, null,  false, function(value){
							if (value) {
								value = $.sdata.$purl(value);
								value = $.sdata.translateURL(value);
								$image.attr("src",value);
								_showImg();
							} else 
								_doNodata();
						});
					} else _doNodata();
						
				} else {
					controller.getData(c.options.bind_ct, null,  false, function(ct){
						ct = ct || "image/jpeg";

						$image[0].src = "data:"+ct+";base64,"+value;
						_showImg();
					});
				}
			});
			
		},
		handler: function(c, after){
			var options = c.data; 
			var html =[];
			html.push('<div class="ui-m-state-block ui-m-error" data-role="none" id="'+c.id+'_error"></div>');
			if (options.label) 
				html.push('<center>'+ options.label + '<center>');
			html.push('<div id="'+c.id+'" class="ui-body u-m-image-container u-m-no-image"><center>');
			html.push('<img class="u-m-image u-m-dn" id="'+c.id+'_image" src=""/>');
			html.push('</center></div>'); 			
			
			/*
			* bind --> photo data value 
			* bindUri --> photo data url
			*
			*/
			var res = function() {
				return after({ 
					html: html.join(''),
					bind: options.bind,
					options: options
				});
			};
			return res();
		},
		checkValue:  function($c, c) {
			var controller = this;
			var e = $('#'+ c.id + "_error");
			e.html("");
			if (c.options.$mandatory) {
				return controller.getData(c.options.bind_url, null,  false, function(value){
					if (!value) {
						return controller.getData(c.options.bind, null,  false, function(value){
							if (!value) {
								var error = {field: $c, message: $.helpers.format($.helpers.messages.field_requires,[c.options.label])};
								controller.pushError(error);
								e.html(error.message);
							}
						})
					}
				});
			} 
		},
		events: function($c, c) {
			var controller = this;
			var $new = $c;
			$new.bind( "click", function(event, ui) {
				var ctrl = controller, data ={};
				if (navigator.camera && navigator.camera.getPicture) {
					navigator.camera.getPicture(function(data) {
						controller.setData(c.options.bind, data);
						if (c.options.bind_ct) controller.setData(c.options.bind_ct, "image/jpeg");
						that.controls.Photo._setPhoto(controller, $c, c);
					}, function() {}, {
						quality : 50
					});				
				}
			});
			that.controls.Photo._setPhoto(controller, $c, c);
		}
	};
	
	that.controls.NetworkCheck = {
		handler: function(c, after){
			var html = ['<p><a id="'+ c.id + '"  href=#>'+c.data.text+"</a></p>"];
			html.push('</div>');
			var options = c.data; 
			var res = function() {
				return after({ 
					html: html.join(''),
					bind: true
				});
			};
			return res();
		},
		events: function($c, c) {
			$c.bind( "click", function(event) {
				if (navigator.network && navigator.network.connection) {
					var Connection = window.Connection;
					var states = {};
					states[Connection.UNKNOWN]  = 'Unknown connection';
					states[Connection.ETHERNET] = 'Ethernet connection';
					states[Connection.WIFI]     = 'WiFi connection';
					states[Connection.CELL_2G]  = 'Cell 2G connection';
					states[Connection.CELL_3G]  = 'Cell 3G connection';
					states[Connection.CELL_4G]  = 'Cell 4G connection';
					states[Connection.NONE]     = 'No network connection';
					confirm('Connection type:\n ' + states[navigator.network.connection.type]);
				
				}
				event.preventDefault();
			});
		}
	};
	that.controls.Vibrate = {
		handler: that.controls.NetworkCheck.handler,
		events: function($c, c) {
			$c.bind( "click", function(event) {
				if (navigator.notification && navigator.notification.vibrate) 	
					navigator.notification.vibrate(0);
				event.preventDefault();
			});
		}
			
	};	
})(jQuery);