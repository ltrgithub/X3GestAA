"use strict"; 
(function($) {
	var that = $.smobile;
	that.controls = that.controls || {};
	var $helpers = $.helpers; // == require
	var $proto = $.proto;     // == require
	/* used for $query or $lookup */
	that.controls.MultiField={
		sync: true,
		handler: function(c, after) {
			var controller = this, protoProp, fieldData;
			var  options= c.data || {};
			var edit = (options.facet === "$edit") || (options.facet === "$create");
			var page = controller.getPageData();
			if (!page)  return after({ html: "",options: {}});
			if (edit) {
				var controls = [];
				// for each field create a control
				options.fields.forEach(function(field){
					var cp = $proto.getProto(page, field.$bind), cc = null, ft = field.$type;
					var scc ={id: c.id + "_" + field.$bind, data: {inline: false, bind: field.$bind}};
					var opts = scc.data;
					var pp = controller.getProtoDataValue(field.$bind, null, null);
					if (pp)
						cp = $.extend({}, cp, pp);
					if (cp.$isReadOnly)  opts.$isReadOnly = true;
					var title = $proto.execExpression(cp.$title, cp);
					switch (ft) {
						case "application/x-reference":
							opts.type = "text";
							protoProp = cp.$protoparent;
							fieldData = controller.getValue(field.$bind);
							opts.label = $proto.parseExpression(protoProp.$title, {data: null, $prototype: cp},"$title");
							scc.id = c.id + "_" + field.$bind;
							if (cp.$links && cp.$links.$lookup && cp.$links.$lookup.$url) {
								opts.$lookupurl = $proto.parseExpression( cp.$links.$lookup.$url, {data: controller.exprData(fieldData), $prototype: cp},"$url");
							}
								
							if (cp.$isMandatory) opts.$isMandatory = true;
							cc = that.controls.Lookup.createLookup(controller, scc);
							cc.id = scc.id;
							cc.uiClass = "Lookup";
							cc.scid = "_" + field.$bind;
							break;
						
						case "application/x-string": 
						case "application/x-password": 
							opts.type = "text";
							opts.label = title;
							scc.id = c.id + "_" + field.$bind;
							opts.$minLength = cp.$minLength;
							opts.$maxLength = cp.$maxLength;
							if (cp.$format == "$email") opts.type = "email";
							else if (cp.$format == "$url") opts.type = "url";
							else if (cp.$format == "$phone") opts.type = "tel";
							if (ft === "application/x-password") opts.type = "password";
							if (cp.$isMandatory) opts.$isMandatory = true;
							cc = that.controls.Edit.createEdit(controller, scc);
							cc.id = scc.id;
							cc.uiClass = "Edit";
							cc.scid = "_" + field.$bind;
							break;
						case "application/x-choice": 
							var items = [];
							opts.items = items;
							opts.$isMandatory = true; 
							cp.$value.$enum.forEach(function(value) {
								items.push({value:value.$value, title:value.$title});
							})
							opts.label = title;
							scc.id = c.id + "_" + field.$bind;
							cc = that.controls.Combo.createCombo(controller, scc);
							cc.id = scc.id;
							cc.uiClass = "Combo";
							cc.scid = "_" + field.$bind;
							break;
						case "application/x-integer": 
						case "application/x-real": 
						case "application/x-decimal": 
							opts.type = "number";
							opts.decimals = 0;
							if (cp.$format != null) 
								opts.decimals =  $helpers.format2decimals(cp.$format);
							else if (cp.$scale != null) 
								opts.decimals = cp.$scale;
							opts.label = title;
							opts.$minimum = cp.$minimum; 
							opts.$maximum = cp.$maximum;
							if ((cp.$minimum != null) && (cp.$maximum != null) && (ft === "application/x-integer") ) 
								opts.type = "range";
							opts.$isMandatory = true;
							scc.id = c.id + "_" + field.$bind;
							cc = that.controls.Edit.createEdit(controller, scc);
							cc.id = scc.id;
							cc.uiClass = "Edit";
							cc.scid = "_" + field.$bind;
							break;
						case "application/x-boolean": 
							opts.label = title;
							scc.id = c.id + "_" + field.$bind;
							cc = that.controls.CheckBox.createCheckBox(controller, scc);
							cc.id = scc.id;
							cc.uiClass = "CheckBox";
							cc.scid = "_" + field.$bind;
							break;
						case "image": 
							opts.label = title;
							scc.id = c.id + "_" + field.$bind;
							cc = that.controls.Picture.createPicture(controller, scc);
							cc.id = scc.id;
							cc.uiClass = "Picture";
							cc.scid = "_" + field.$bind;
							break;
						case "application/x-date": 
							opts.type = "date";
							opts.label = title;
							opts.$isMandatory = cp.$isMandatory;
							scc.id = c.id + "_" + field.$bind;
							cc = that.controls.Edit.createEdit(controller, scc);
							cc.id = scc.id;
							cc.uiClass = "Edit";
							cc.scid = "_" + field.$bind;
							break;
						case "application/x-time": 
							opts.type = "time";
							opts.label = title;
							opts.$isMandatory = cp.$isMandatory;
							scc.id = c.id + "_" + field.$bind;
							cc = that.controls.Edit.createEdit(controller, scc);
							cc.id = scc.id;
							cc.uiClass = "Edit";
							cc.scid = "_" + field.$bind;
							break;
						case "application/x-datetime": 
							opts.type = "datetime";
							opts.label = title;
							opts.$isMandatory = cp.$isMandatory;
							scc.id = c.id + "_" + field.$bind;
							cc = that.controls.Edit.createEdit(controller, scc);
							cc.id = scc.id;
							cc.uiClass = "Edit";
							cc.scid = "_" + field.$bind;
							break;
					}
					if (cc) {
						controls.push(cc);
					}	
				});	
				if (controls.length)
					return after(controls);
				else
					return after(null);
			} else {
				var html = [];
				html.push('<table data-role="table" data-mode="reflow" class="ui-responsive s-m-table table-stroke">');
				html.push('<thead><tr>');
				html.push('<th class="s-m-header-empty" data-priority="1"></th>'); // title
				html.push('<th class="s-m-header-empty" data-priority="persist"></th>'); // value
				html.push('</tr></thead><tbody>');
				
				//html.push('<table class="s-m-fieldlist"><tbody>');
				//html.push('<tr><td class="title"></td><td class="value"></td></tr>');
				var entityProto = $proto.getProto(page);
				options.fields.forEach(function(field){
					var cp = $proto.getProto(page, field.$bind);
					html.push('<tr><td>');
					if (cp.$rtype === "application/x-reference") {	
						protoProp = cp.$protoparent;
						html.push('<strong>'+$helpers.htmlEncode($proto.execExpression(protoProp.$title, protoProp))+ '</strong>');
					} else
						html.push('<strong>'+$helpers.htmlEncode($proto.execExpression(cp.$title, cp))+ '</strong>');
					html.push('</td><td>');
					if (cp.$rtype === "application/x-reference") {
						//protoProp = cp.$protoparent
						fieldData = controller.getValue(field.$bind);
						var toptions = that.controls.types.addReference(cp, fieldData, controller);
						that._addLink(html, toptions, controller);
					} else
						html.push($proto.htmlValue(controller.data,entityProto, cp,field));
					html.push('</td><tr>');
				});
				html.push('</tbody></table>');
				return after({ 
					html: html.join(''),
					bind: options.bind,
					options: options				
				});
			}
		}		
	};
})(jQuery);    
