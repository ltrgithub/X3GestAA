'use strict';
(function($) {
	var that = $.smobile;
	that.controls = that.controls || {};
	/* used for $query or $lookup */
	that.controls.MultiField={
		handler: function(c, after) {
			var controller = this;
			var  html = [], options= c.data || {};
			var page = controller.getPageData();
			if (!page)  return after({ html: "",options: {}});
			html.push('<table class="s-m-fieldlist"><tbody>');
			html.push('<th><td class="title"></td><td class="value"></td></th>');
			var entityProto = $.proto.getProto(page);
			options.fields.forEach(function(field){
				var cp = $.proto.getProto(page, field.$bind);
				html.push('<tr><td>');
				html.push('<strong>'+$.helpers.htmlEncode(cp.$title)+ '</strong>');
				html.push('</td><td>');
				html.push($.proto.htmlValue(controller.data,entityProto, cp,field));
				html.push('</td><tr>');
			});
			html.push('</tbody></table>');
			
			return after({ 
				html: html.join(''),
				bind: options.bind,
				options: options				
			});

			
			
			var cp = $.proto.getProto(page);
			var article = $.proto.getArticle(page, options.bind);
			
			if (!cp)  return after({ html: "",options: {}});
			html.push('<ul id="'+c.id + '" data-role="listview"');
			$.helpers.addJqmData(options,html); 
			//html.push(' data-inset="true"');			
			html.push('>');
			var defArticle = {
				icon: {}, 
				hint: {},
				title: {propName: "$value"},
				description: {propName: "$description"}
			};
			var binds= [];
			if (article) {
				var map = {};
				$.proto.layoutParser(map, article, "$article", [cp], binds);
				cp = $.proto.getProto(page, options.bind);		
				
				binds.forEach(function(item){
					switch(item.$mobile) {
						case "icon":
							defArticle.icon.propName = item.$bind;
							break;
						case "hint":
							defArticle.hint.propName = item.$bind;
							break;
						case "title":
							defArticle.title.propName = item.$bind;
							break;
						case "description":
							defArticle.description.propName = item.$bind;
							break;
					}
					
				});
			}
			Object.keys(defArticle).forEach(function(pn) {	
				var item = defArticle[pn];
				if (item.propName) {
					if (item.propName.indexOf("$") == 0) {
						item.expression = cp[item.propName];
						if (item.expression) item.protoValue = true;
					}  else 
						item.expression = item.propName;
					
				}
			});
			
			var detail = null;
			if (cp.$links && cp.$links.$details) {
				detail = cp.$links.$details.$url;
				if (cp.$links.$details.$isHidden) detail = "";
			}
			
			var resources = controller.getValue(options.bind, null, []);
			resources.forEach(function(value, index) {
				var cd = {};
				var desc = defArticle.description.protoValue?value[defArticle.description.propName]:null,
					title = defArticle.title.protoValue?value[defArticle.title.propName]:null,
					icon = defArticle.icon.protoValue?value[defArticle.icon.propName]:null,
					hint = defArticle.hint.protoValue?value[defArticle.hint.propName]:null
				
				if  ((desc == null) && defArticle.description.expression) 
					desc = $.proto.parseExpression(defArticle.description.expression, {data: value, $prototype: cp});	
				else
					desc = "";
				if  ((title == null) && defArticle.title.expression) 
					title = $.proto.parseExpression(defArticle.title.expression, {data: value, $prototype: cp});	
				else
					title = "";
				if  ((icon == null) && defArticle.icon.expression) 
					icon = $.proto.parseExpression(defArticle.icon.expression, {data: value, $prototype: cp});	
				else
					icon = "";
				if  ((hint == null) && defArticle.hint.expression) 
					hint = $.proto.parseExpression(defArticle.hint.expression, {data: value, $prototype: cp});	
				else
					hint = "";
				if (defArticle.icon.expression)  {
					if (icon && (typeof icon != "object")) icon = null;
					if (icon) {
						if ((icon.$type === "image") &&  icon.$url)  {
							icon = $.proto.parseExpression(icon.$url, {data: value, $prototype: cp});
						} else icon = null;
					}
				}
				var content =  $.smobile.ui.sdataentry(title, desc, defArticle.icon.expression, icon, defArticle.hint.expression, hint);
				html.push('<li');
				$.helpers.addJqmData(cd,html); 
				if (defArticle.icon.expression) {
					html.push(' class="' + that.ui.consts.normal_icon  +'"');
					cd.css = [that.ui.consts.normal_icon];
				} 
				html.push('>');
				if (detail)  cd.url = $.proto.parseExpression(detail, {data: value, $prototype: cp});
				that._addLink(html, cd, controller, function() {
					html.push(content);
				});	
			});
			html.push('</ul>');
			return after({ 
				html: html.join(''),
				bind: options.bind,
				options: options				
			});
		
		}		
	};
})(jQuery);    
