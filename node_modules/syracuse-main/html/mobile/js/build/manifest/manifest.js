var fs = require('fs');

function mkmanifest(params){
	var aFileList = [];
	var traverseFileSystem = function (currentPath) {
		var files = fs.readdirSync(currentPath);
		
		files.forEach(function(item){
			//exclude .git files
			//if(currentPath.indexOf(".git")==-1 && item.indexOf(".git")==-1) {
				var currentFile = currentPath + '/' + item;
				var stats = fs.statSync(currentFile);
				if (stats.isFile()) {
					aFileList.push(currentFile.split(params.path)[1]);
				} else if (stats.isDirectory()) {
					traverseFileSystem(currentFile);
				}
			//}			
		});
	};
	
	traverseFileSystem(params.path);
	var contents = "CACHE MANIFEST\n";
	contents += "# version " + params.version + "\n\n";
	//Cache section
	contents += "CACHE:\n";	
	if (params.content) contents += params.content;	
	if(params.prefix) 
		aFileList.forEach(function(item, index){ aFileList[index] = params.prefix + item });
	if(params.exclude) {
		var regex = [];
		params.exclude.forEach(function(exp) {
			var rg = new RegExp(exp, 'i');
			regex.push(rg);
		});
		
		aFileList = aFileList.filter(function(item) { 
			var match = false;
			regex.forEach(function(rg) {
				if (match) return; 
				match = rg.test(item);
				match = (match?true:false);
				
			})
			return !match;
		});
	} 
	aFileList.forEach(function(item){ contents += item + "\n"; });

	//Network section
	if(params.network) {
		contents += "\nNETWORK:\n"
		params.network.forEach(function(item){ contents += item + "\n"; });
	}
	
	//Fallback section
	if(params.fallback) {
		contents += "\nFALLBACK:\n"
		params.fallback.forEach(function(item){ contents += item + "\n"; });
	}
	var path = params.path;
	if (params.dst) path = params.dst;
	fs.writeFile(path + '/' + params.filename + '.appcache', contents, function (err) {
	     if (err)
	       throw err;
	});
	/*
	fs.writeFile(path + '/' + ".htaccess", "AddType text/cache-manifest .manifest", function (err) {
	     if (err)
	       throw err;
	});	
	*/
	console.log("Cache manifest file generated : " + params.filename + ".appcache\n");
	console.log('You have to update <html> tag : <html manifest="/' + params.filename + '.appcache">')
	console.log(contents);	
	
}

exports.mkmanifest = mkmanifest;