"use strict";
// Note about circular references: nodeconfig.config contains all global configuration information. 
// Any information except config.sdata.endpoints is available in  
var config = {};
var util = require('util');
var os = require('os');
//var sdataRegistry = require("syracuse-sdata/lib/sdataRegistry");
var helpers = require('syracuse-core/lib/helpers');

var fs = require('fs'),
	path = require('path');

try {
	var nodelocal = require("../../../nodelocal") || {};
	config = nodelocal.config || {};
} catch (ex) {
	console.log(ex);
}

config.hosting = config.hosting || {};
//maybe set single tenant
for (var i = 2; i < process.argv.length; i++) {
	if (process.argv[i] === "tenantId=") {
		config.hosting.multiTenant = false;
		console.log("Switch to single tenant mode");
		break;
	}
}
config.system = config.system || {};
config.system.root = config.system.root || path.join(__dirname, "../../..");

// read git branch configuration
var gitHeadPath = path.join(__dirname, "../../..", ".git", "HEAD");
if (nodelocal.branch_configs && fs.existsSync(gitHeadPath)) {
	var parts = (fs.readFileSync(gitHeadPath).toString("utf8") || "").split(":");
	if ((parts[0] || "").trim() === "ref") {
		var branch = (parts[1] || "").split("/").pop().trim();
		nodelocal.branch_configs.some(function(it) {
			if (it.branch && branch.match(it.branch)) {
				helpers.object.extend(config, it.config, true, true);
				console.log("Using branch config '" + it.branch + "' for branch '" + branch + "'");
				return true;
			}
		});
	}
}
//

config.collaboration = config.collaboration || {};
config.collaboration.driver = config.collaboration.driver || "mongodb";
config.collaboration.port = config.collaboration.port || 27017;
config.collaboration.hostname = config.collaboration.hostname || "localhost";
config.collaboration.application = config.collaboration.application || "syracuse";
config.collaboration.contract = config.collaboration.contract || "collaboration";
config.collaboration.dataset = config.collaboration.dataset || "syracuse";

config.sdata = config.sdata || {};
config.sdata.pubkeyName = config.sdata.pubkeyName || "SYRASVR1";
config.sdata.signAlgorithm = config.sdata.signAlgorithm || "RSA-SHA256";

config.system = config.system || {};

// no circular references up to now. This object can be exported and used by other code
exports.config = config;

// the endpoints require a lot of other code and make circular references. Therefore this code will be loaded later
config.sdata.endpoints = [{
	contract: "syracuse-collaboration/lib/contract",
	datasets: {
		syracuse: {
			driver: config.collaboration.driver,
			port: config.collaboration.port,
			hostname: config.collaboration.hostname,
			connectionString: config.collaboration.connectionString,
			databaseName: config.collaboration.databaseName,
			localInitScript: config.collaboration.localInitScript
		}
	}
}, {
	contract: "syracuse-search/lib/contract",
	datasets: {
		syracuse: {
			driver: config.collaboration.driver,
			port: config.collaboration.port,
			connectionString: config.collaboration.connectionString,
			hostname: config.collaboration.hostname
		}
	}
}, {
	contract: "syracuse-development/lib/contract",
	datasets: {
		development: {
			driver: config.collaboration.driver,
			port: config.collaboration.port,
			connectionString: config.collaboration.connectionString,
			hostname: config.collaboration.hostname
		}
	}
}];

//
if (config.enableSupportFeatures) {
	config.sdata.endpoints.push({
		contract: require("support-tool/lib/contract").contract,
		datasets: {
			tools: {
				driver: config.collaboration.driver,
				port: config.collaboration.port,
				connectionString: config.collaboration.connectionString,
				hostname: config.collaboration.hostname
			}
		},
		init: function() {
			var contract = require("syracuse-collaboration/lib/contract").contract;
			//var contract = sdataRegistry.getContract(collab.application, collab.contract, true);
			if (contract && contract.dbMeta) {
				// Add autmatic import on collaboration contract
				if (contract.dbMeta.automaticImport) contract.dbMeta.automaticImport.push('syracuse-support-init.json', 'syracuse-support-sitemap.json');
			}
		},
		exec: function() {
			require("support-tool/lib/helpers").registerTraceEntities(function(err, result) {
				if (err) throw err;
				return result;
			});
		}
	});
}
// register extra services without any dataset yet.
// they will be configured via admin UI
if (config.skyAutomation) {
	["sky-automation"].forEach(function(name) {
		config.sdata.endpoints.push({
			contract: name + '/lib/contract',
			datasets: [],
		});
	});
}

// Default studio config used for eclipse proxy
config.studio = config.studio || {};
config.studio.dbgp = config.studio.dbgp || {};
config.studio.dbgp.longPollingMillis = config.studio.dbgp.longPollingMillis || 60000;
config.studio.dbgp.trackingMillis = config.studio.dbgp.trackingMillis || 4000;