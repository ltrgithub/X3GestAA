"use strict";

var helpers = require('@sage/syracuse-core').helpers;
var httpClient = require("../../../src/httpclient/httpClient");
var forEachKey = helpers.object.forEachKey;

var getCookie = exports.getCookie = function(cookies, key) {
	if (cookies) {
		var cook = Array.isArray(cookies) ? cookies.join(';').split(';') : cookies.split(';');
		for (var i = 0; i < cook.length; i++) {
			var idx = cook[i].indexOf(key + "=");
			if (idx !== -1) {
				return cook[i].substring(key.length + 1 + idx);
			}
		}
	}
	return null;
};

// remove twins
var purgeCookies = exports.purgeCookies = function(cookies) {
	cookies = cookies.replace(/;\s/g, ";");
	var cook = cookies.split(';');
	var listOkKeys = {};
	var purged = [];
	for (var i = 0; i < cook.length; i++) {
		var eqIdx = cook[i].indexOf("=");
		var key = eqIdx !== -1 ? cook[i].split('=')[0] : cook[i];
		if (listOkKeys[key] != null) {
			purged.splice(listOkKeys[key], 1, cook[i]);
		} else {
			listOkKeys[key] = purged.push(cook[i]) - 1;
		}
	}
	return purged.join(';');
};

var manageCookie = exports.manageCookie = function(map, id, headers) {
	var cookies = headers['set-cookie'];
	if (cookies) {
		if (Array.isArray(cookies)) {
			cookies = cookies.join(';');
		}
		map[id] = purgeCookies(map[id] ? map[id] + "; " + cookies : cookies);
	}
};

exports.Proxy = helpers.defineClass(function(_, baseUrl, options) {
	this.baseUrl = baseUrl;
	this.trace = options.trace;
	this.mapCookie = {};
	this.secure = options.secure;

	this.nextForcedHeader = []; //Must be : this.nextForcedHeader = [{key: "key", value: "value"}]
}, null, {
	forward: function(_, context, subPath, addedRespHeaders) {

		function computeEncoding(headers) {
			var ct = headers['content-type'] || headers['Content-Type'];
			if (ct && ct.toLowerCase().indexOf('charset=utf-8') !== -1) {
				return "utf8";
			}
			return "binary";
		}

		var request = context.request;
		var headers = {}; // local copy of request header
		if (request.headers)
			for (var k in request.headers) {
				headers[k] = request.headers[k];
			}
		var reqCookies = headers.cookie;
		var syrSessionId;
		if (reqCookies) {
			var port = request.connection.localPort;
			syrSessionId = getCookie(reqCookies, "syracuse.sid." + port);
		}
		if (!this.mapCookie[syrSessionId]) {
			if (Array.isArray(reqCookies)) {
				reqCookies = reqCookies.join(';');
			}
			this.mapCookie[syrSessionId] = reqCookies;
		}

		if (this.mapCookie[syrSessionId]) {
			headers.cookie = this.mapCookie[syrSessionId];
		}

		var options = {
			url: this.baseUrl + subPath + (context.rawQuery ? ("?" + context.rawQuery) : ""),
			method: context.method,
			headers: headers
		};
		if (this.secure) {
			options.rejectUnauthorized = false;
			options.strictSSL = false;
		}

		// Check charset to use eventually utf8 encoding
		// var encoding = computeEncoding(options.headers);
		this.trace.debug && this.trace.debug("request: " + JSON.stringify(options, null, 2));
		var clientReq = httpClient.httpRequest(_, options);
		var buf;
		while ((buf = request.read(_))) {
			clientReq.write(_, buf);
		}
		var response = clientReq.end().response(_);
		// Force binary encoding in response
		// encoding = "binary";
		// response.setEncoding(encoding);

		manageCookie(this.mapCookie, syrSessionId, response.headers);

		if (this.nextForcedHeader.length !== 0) {
			this.nextForcedHeader.forEach(function(h) {
				response.headers[h.key] = h.value;
			});
			this.nextForcedHeader = [];
		}

		forEachKey(addedRespHeaders, function(key, value) {
			response.headers[key] = value;
		});
		response.headers['x-syra-proxy-dest-baseurl'] = this.baseUrl;
		context.response.writeHead(response.statusCode, response.headers);
		this.trace.debug && this.trace.debug("response: " + JSON.stringify({
			status: response.statusCode,
			headers: response.headers
		}, null, 2));
		// this reads all of the response body
		while ((buf = response.read(_))) {
			context.response.write(_, buf);
		}
		context.response.end();

	}
});