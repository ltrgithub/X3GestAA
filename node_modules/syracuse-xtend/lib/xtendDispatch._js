"use strict";

var helpers = require("syracuse-core/lib/helpers");
var Context = require("syracuse-sdata/lib/sdataContext").Context;
var proxy = require('syracuse-main/lib/proxy');
var registry = require("syracuse-sdata/lib/sdataRegistry");
var dataModel = require("syracuse-orm/lib/dataModel");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var locale = require("syracuse-core/lib/locale");
var globals = require("streamline/lib/globals");
var querystring = require('querystring');
var httpClient = require("syracuse-httpclient/lib/httpClient");
var nodeconfig = require('syracuse-main/lib/nodeconfig');
var util = require('util');

var trace = nodeconfig.config && nodeconfig.config.xtend && nodeconfig.config.xtend.proxy && nodeconfig.config.xtend.proxy.trace;

function getSite(_, options) {
	if (!options || !options.SITE || !options.SOL || !options.FLDR) return;
	var filter = {
		sdataWhere: "name eq '" + options.SITE + "' and endpoint.x3ServerFolder eq '" + options.FLDR + "' and endpoint.x3SolutionName eq '" + options.SOL + "'"
	};
	var db = adminHelper.getCollaborationOrm(_);
	return db.fetchInstance(_, db.model.getEntity(_, "siteHRM"), filter);
}


function forward(_, context, path) {
	//var sid = proxy.getCookie(context.request.headers.cookie, "syracuse.sid");
	var p = context.httpSession.hrmProxy;

	return p.proxy.forward(_, context, path);
}

var _xtendMap = {};

function _parseSegment(segment) {
	var match = /^([^\/(]*)\('([^']*)'\)$/.exec(segment);
	return match ? {
		name: match[1],
		id: match[2]
	} : {
		name: segment
	};
}

function _dispatch(_, context, map) {

	var seg = context.walkUrl();
	if (seg == null) {
		// we reached the end of the URL, dispatch method
		//var method = context.request.method.toLowerCase();
		var method = context.method;
		if (map[method]) return map[method](_, context);
		else throw context.badMethod(method);
	} else {
		// Call initHrm to store proxy instance in httpSession
		initHrm(_, context);
		var pair = _parseSegment(seg);
		if (pair.name)
			return forward(_, context, "/xtend/" + pair.name + "/" + context.toWalk());
	}
}

function initHrm(_, context) {
	function hasChanged(_, opt) {
		if (!opt || !opt.SITE || !opt.SOL || !opt.FLDR) return false;
		var s = context.httpSession.hrmProxy.site;
		return s.name(_) !== opt.SITE || s.endpoint(_).getSolutionName(_) !== opt.SOL || s.endpoint(_).getX3FolderName(_) !== opt.FLDR;
	}
	var params = querystring.parse(context.rawQuery);
	if (!context.httpSession.hrmProxy || hasChanged(_, params)) {
		var site = getSite(_, params);
		if (!site) throw new Error("No HRM site found for parameters : " + JSON.stringify(params));
		var servers = site.servers(_).toArray(_);
		if (servers.length === 0) throw new Error("No XTend server defined on HRM site '" + site.name(_) + "'");

		// TODO TCA: implement load balancing (round robin)
		var webServerUrl = "http://" + servers[0].host(_) + ":" + servers[0].port(_);

		context.httpSession.hrmProxy = {
			site: site,
			proxy: new proxy.Proxy(_, webServerUrl, trace)
		};
	}
}

function _logRequest(_, context) {
	if (!context.request.headers["x-history-title"]) return;
	//
	var db = adminHelper.getCollaborationOrm(_);
	var h = db.model.getEntity(_, "navHistory").factory.createInstance(_, null, db);
	h.title(_, context.request.headers["x-history-title"]);
	h.agent(_, context.request.headers["x-history-agent"]);
	h.url(_, context.request.url);
	h.save(_);
}

function _doIt(_, context) {
	try {
		var protocol = context.walkUrl();
		if (protocol !== "xtend") throw new Error(locale.format(module, "badUrl", protocol));

		// fire and forget log call
		_logRequest(!_, context);

		_dispatch(_, context, _xtendMap);
	} catch (ex) {
		console.error("ERROR: " + ex.stack);
		if (ex.httpStatus) {
			return context.reply(_, ex.httpStatus, ex.message);
		} else if (ex.stack) {
			return context.reply(_, 500, ex.message);
		} else {
			return context.reply(_, 500, ex.toString());
		}
	}
}

exports.dispatcher = function(config) {
	// setup config here
	//	_config = (config && config.x3fusion) || {};
	//	tracer = config && config.x3fusion && config.x3fusion.tracer;
	//	profiler = config && config.x3fusion && config.x3fusion.profiler;
	//
	return function(_, request, response) {
		var context = new Context(request, response, config);
		request.context = context;
		try {
			_doIt(_, context);
		} catch (err) {
			helpers.log.exception(module, err);
			context.reply(_, 500, err.message + "\n" + err.stack);
		}
	};
};