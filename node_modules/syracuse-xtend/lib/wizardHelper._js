"use strict";

var helpers = require("syracuse-core/lib/helpers");
var Context = require("syracuse-sdata/lib/sdataContext").Context;
var registry = require("syracuse-sdata/lib/sdataRegistry");
var dataModel = require("syracuse-orm/lib/dataModel");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var locale = require("syracuse-core/lib/locale");
var globals = require("streamline/lib/globals");
var util = require('util');

exports.$exported = true;

var trace = console.log;

// internal use only
var hasErrors = exports.hasErrors = function(body, k) {
	var msg;
	var hasErr = body && body.$diagnoses && body.$diagnoses.some(function(diag) {
		if (diag.$severity === "error") {
			msg = "Error related to field " + k + " : " + diag.$message;
			return msg;
		} else return false;
	});
	if (!hasErr) {
		for (var key in body) {
			if (typeof body[key] === "object") hasErr = hasErr || hasErrors(body[key], key);
		}
	}
	return msg || hasErr;
};

var install = exports.install = function(_, solution, folder, site, xtendInfos, devmode) {
	function setHRMSite(_) {
		function createXtendServer(_, host, port) {
			var inst = xentity.createInstance(_, db, null);
			inst.host(_, host);
			inst.port(_, port);
			return inst;
		}

		function getHRMSite(_) {
			var filter = {
				sdataWhere: "name eq '" + site + "'"
			};
			return db.fetchInstance(_, entity, filter);
		}

		function createHRMSite(_) {
			var inst = entity.createInstance(_, db, null);
			updateHRMSite(_, inst);
			return inst;
		}

		function updateHRMSite(_, inst) {
			inst.name(_, site);
			inst.devmode(_, (devmode > 0));
			inst.endpoint(_, selectedEp);
			// Create xtend servers instances
			inst.servers(_).reset(_);
			for (var i in xtendInfos) {
				var srv = createXtendServer(_, xtendInfos[i].host, xtendInfos[i].port);
				inst.servers(_).set(_, srv);
			}
			var err = hasErrors(inst.save(_));
			if (err) throw new Error(err);
		}
		//
		var xentity = db.getEntity(_, "xtendServer");
		var entity = db.getEntity(_, "siteHRM");
		// Get/update or create siteHRM instance
		var siteHRM = getHRMSite(_);
		if (!siteHRM) {
			siteHRM = createHRMSite(_);
		} else {
			updateHRMSite(_, siteHRM);
		}
		return siteHRM;
	}

	var db = adminHelper.getCollaborationOrm(_);

	var app = adminHelper.getApplication(_, "x3", "hrm");
	var selectedEp = globals.context.session.getUserProfile(_).selectedEndpoint(_);



	var _site = setHRMSite(_);
	return _site.publish(_, solution, folder, site, xtendInfos, devmode);

};