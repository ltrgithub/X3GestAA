"use strict";

var helpers = require("syracuse-core/lib/helpers");
var Context = require("syracuse-sdata/lib/sdataContext").Context;
var registry = require("syracuse-sdata/lib/sdataRegistry");
var dataModel = require("syracuse-orm/lib/dataModel");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var locale = require("syracuse-core/lib/locale");
var globals = require("streamline/lib/globals");
var util = require('util');

exports.$exported = true;

var trace = console.log;

// internal use only
var hasErrors = exports.hasErrors = function(body, k) {
	var msg;
	var hasErr = body && body.$diagnoses && body.$diagnoses.some(function(diag) {
		if (diag.$severity === "error") {
			msg = "Error related to field " + k + " : " + diag.$message;
			return msg;
		} else return false;
	});
	if (!hasErr) {
		for (var key in body) {
			if (typeof body[key] === "object") hasErr = hasErr || hasErrors(body[key], key);
		}
	}
	return msg || hasErr;
};

function getHRMSite(_, db, entity, name) {
	var filter = {
		sdataWhere: "name eq '" + name + "'"
	};
	return db.fetchInstance(_, entity, filter);
}

/// !doc
/// 
/// # HRM Site Wizard Helper  
/// This helper module facilitate installation and uninstallation needed to be able to have HRM portals links on Syracuse navigation page.  
/// To use this module do `var wizardHelper = require('syracuse-xtend/lib/wizardHelper')`.  
/// All the methods are asynchronous.  
/// 

/// 
/// -------------
/// ### install :
/// ``` javascript
/// wizardHelper.install(_, siteName, webServers, devmode);  
/// ```
/// It allows to create HRM site, menu item, menu block and menu module automatically.  
/// 
/// * `siteName` : `String` : is the name of the HRM site.  
/// * `webServers` is an array of objects that represent Safe X3 Web Servers.  
/// Each object must contain two properties :  
///     * host : `String`. The hostname of the server.   
///     * port : `Integer`. The port of the Tomcat server.  
/// 
/// ``` javascript
///    var webServers = [{  
///         host: "server_1",  
///         port: 28880  
///    }, {  
///         host: "server_2",  
///         port: 8080  
///    }];  
/// ```  
/// 
/// * `devmode` : `String` : define if severals menu items have to be created (one global and one per server ).  
/// 
exports.install = function(_, siteName, webServers, devmode) {

	function createXtendServer(_, host, port) {
		var inst = xentity.createInstance(_, db, null);
		inst.host(_, host);
		inst.port(_, port);
		return inst;
	}

	function createHRMSite(_) {
		var inst = entity.createInstance(_, db, null);
		updateHRMSite(_, inst);
		return inst;
	}

	function updateHRMSite(_, inst) {
		function isServerExist(_, host, port) {
			var srvs = inst.servers(_);
			if (srvs.getLength() > 0) {
				srvs = inst.servers(_).toArray(_);
				for (var i in srvs) {
					if (srvs[i].host(_) === host && srvs[i].port(_) === port)
						return true;
				}
			}
			return false;
		}

		inst.name(_, siteName);
		inst.devmode(_, (devmode > 0));
		inst.endpoint(_, selectedEp);
		// Create xtend servers instances
		for (var i in webServers) {
			if (!isServerExist(_, webServers[i].host, webServers[i].port)) {
				var srv = createXtendServer(_, webServers[i].host, webServers[i].port);
				inst.servers(_).set(_, srv);
			}
		}
		var err = hasErrors(inst.save(_));
		if (err) throw new Error(err);
	}

	// BEGIN INSTALL CLOSURE
	var db = adminHelper.getCollaborationOrm(_);
	var app = adminHelper.getApplication(_, "x3", "hrm");
	var selectedEp = globals.context.session.getUserProfile(_).selectedEndpoint(_);


	var xentity = db.getEntity(_, "xtendServer");
	var entity = db.getEntity(_, "siteHRM");
	// Get/update or create siteHRM instance
	var siteHRM = getHRMSite(_, db, entity, siteName);
	if (!siteHRM) {
		siteHRM = createHRMSite(_);
	} else {
		updateHRMSite(_, siteHRM);
	}

	return siteHRM.install(_);

};

/// 
/// -------------
/// ### uninstall :
/// ``` javascript
/// wizardHelper.uninstall(_, siteName);  
/// ```
/// It allows to remove HRM site, menu items, menu block and menu module automatically.  
/// 
/// * `siteName` : `String` : is the name of the HRM site.  
/// 
exports.uninstall = function(_, siteName) {
	var db = adminHelper.getCollaborationOrm(_);
	var entity = db.getEntity(_, "siteHRM");
	var siteHRM = getHRMSite(_, db, entity, siteName);
	var _diagnoses = siteHRM.uninstall(_);
	if (siteHRM.deleteSelf(_) === true) {
		_diagnoses.push({
			$severity: "info",
			$message: locale.format(module, "removeSiteOk", siteHRM.name(_))
		});
	} else {
		_diagnoses.push({
			$severity: "error",
			$message: locale.format(module, "removeSiteFailed", siteHRM.name(_))
		});
	}
	return _diagnoses;
};