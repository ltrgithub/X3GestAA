"use strict";



var helpers = require("syracuse-core/lib/helpers");
var Context = require("syracuse-sdata/lib/sdataContext").Context;
var registry = require("syracuse-sdata/lib/sdataRegistry");
var dataModel = require("syracuse-orm/lib/dataModel");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var locale = require("syracuse-core/lib/locale");
var globals = require("streamline/lib/globals");
var util = require('util');

exports.$exported = true;

var trace = console.log;

var GLOBAL_PREFIX = "STD_X3_HRM";
var PREFIX_MENU_ITM = GLOBAL_PREFIX + "_SITE_";
var MENU_BLOCK_NAME = GLOBAL_PREFIX + "_SITE";
var MODULE_NAME = GLOBAL_PREFIX + "_SITES";

function hasErrors(body, k) {
	var msg;
	var hasErr = body && body.$diagnoses && body.$diagnoses.some(function(diag) {
		if (diag.$severity === "error") {
			return msg = "Error related to field " + k + " : " + diag.$message;
		} else return false;
	});
	if (!hasErr) {
		for (var key in body) {
			if (typeof body[key] === "object") hasErr = hasErr || hasErrors(body[key], key);
		}
	}
	return msg || hasErr;
}

function isItemInProp(_, inst, item, prop) {
	var items = inst[prop](_).toArray(_);
	for (var i in items) {
		if (items[i].$uuid === item.$uuid)
			return true;
	}
	return false;
}

var install = exports.install = function(_, solution, folder, site, xtendInfos, devmode) {

	function getHomeNavigationPage(_) {
		var filter = {
			sdataWhere: "pageName eq 'home'"
		};
		var entity = db.getEntity(_, "navigationPage");
		return db.fetchInstance(_, entity, filter);
	}

	function setHRMSite(_) {
		function createXtendServer(_, host, port) {
			var inst = xentity.createInstance(_, db, null);
			inst.host(_, host);
			inst.port(_, port);
			return inst;
		}

		function getHRMSite(_) {
			var filter = {
				sdataWhere: "name eq '" + site + "'"
			};
			return db.fetchInstance(_, entity, filter);
		}

		function createHRMSite(_) {
			var inst = entity.createInstance(_, db, null);
			updateHRMSite(_, inst);
			return inst;
		}

		function updateHRMSite(_, inst) {
			inst.name(_, site);
			inst.endpoint(_, selectedEp);
			// Create xtend servers instances
			inst.servers(_).reset(_);
			for (var i in xtendInfos) {
				var srv = createXtendServer(_, xtendInfos[i].host, xtendInfos[i].port);
				inst.servers(_).set(_, srv);
			}
			var err = hasErrors(inst.save(_));
			if (err) throw new Error(err);
		}
		//
		var xentity = db.getEntity(_, "xtendServer");
		var entity = db.getEntity(_, "siteHRM");
		// Get/update or create siteHRM instance
		var siteHRM = getHRMSite(_);
		if (!siteHRM) {
			siteHRM = createHRMSite(_);
		} else {
			updateHRMSite(_, siteHRM);
		}
		return siteHRM;
	}


	function setMenuItem(_) {
		function getMenuItem(_, name) {
			var filter = {
				sdataWhere: "code eq '" + name + "'"
			};
			return db.fetchInstance(_, entity, filter);
		}

		function createMenuItem(_, name, solution, folder, site) {
			var inst = entity.createInstance(_, db, null);
			updateMenuItem(_, inst, name, solution, folder, site);
			return inst;
		}

		function updateMenuItem(_, inst, name, solution, folder, site) {
			inst.code(_, name);
			inst.title(_, site);
			inst.description(_, site + " (" + solution + "/" + folder + ")");
			inst.linkType(_, "$hrm");
			inst.application(_, app);
			inst.endpoint(_, selectedEp);
			inst.hrmSite(_, _site);
			var sav = inst.save(_);
			var err = hasErrors(sav);
			if (err) {
				throw new Error(err);
			}
		}
		//
		var entity = db.getEntity(_, "menuItem");
		var menuItemName = PREFIX_MENU_ITM + solution + "_" + folder + "_" + site;

		var menuItems = [];

		var menuItem = getMenuItem(_, menuItemName);
		if (!menuItem) {
			menuItem = createMenuItem(_, menuItemName, solution, folder, site);
		} else {
			updateMenuItem(_, menuItem, menuItemName, solution, folder, site);
		}
		menuItems.push(menuItem);

		if (devmode) {
			var arr = _site.servers(_).toArray(_);
			for (var i in arr) {
				var mName = menuItemName + "_DEV" + i;
				var sName = site + " (" + arr[i].host(_) + ":" + arr[i].port(_) + ")";
				menuItem = getMenuItem(_, mName);
				if (!menuItem) {
					menuItem = createMenuItem(_, mName, solution, folder, sName);
				} else {
					updateMenuItem(_, menuItem, mName, solution, folder, sName);
				}
				menuItems.push(menuItem);
			}
		}

		return menuItems;
	}

	function setMenuBlock(_, itemsToAdd) {
		function getMenuBlock(_) {
			var filter = {
				sdataWhere: "code eq '" + MENU_BLOCK_NAME + "'"
			};
			return db.fetchInstance(_, entity, filter);
		}

		function createMenuBlock(_) {
			var inst = entity.createInstance(_, db, null);
			updateMenuBlock(_, inst);
			return inst;
		}

		function updateMenuBlock(_, inst) {


			inst.code(_, MENU_BLOCK_NAME);
			inst.title(_, "Sites");
			inst.description(_, "HRM Sites");
			inst.application(_, app);

			// Add menu item in Menu block if it's not already setted
			for (var i in itemsToAdd) {
				if (!isItemInProp(_, inst, itemsToAdd[i], "items"))
					inst.items(_).set(_, itemsToAdd[i]);
			}
			if (!isItemInProp(_, inst, selectedEp, "endpoints"))
				inst.endpoints(_).set(_, selectedEp);

			var sav = inst.save(_);
			var err = hasErrors(sav);
			if (err) {
				throw new Error(err);
			}
		}
		//
		var entity = db.getEntity(_, "menuBlock");
		var menuBlock = getMenuBlock(_);
		if (!menuBlock) {
			menuBlock = createMenuBlock(_);
		} else {
			updateMenuBlock(_, menuBlock);
		}
		return menuBlock;
	}



	function setMenuModule(_, submoduleToAdd) {
		function getMenuModule(_) {
			var filter = {
				sdataWhere: "code eq '" + MODULE_NAME + "'"
			};
			return db.fetchInstance(_, entity, filter);
		}

		function createMenuModule(_) {
			var inst = entity.createInstance(_, db, null);
			updateMenuModule(_, inst);
			return inst;
		}

		function updateMenuModule(_, inst) {
			inst.code(_, MODULE_NAME);
			inst.title(_, "HRM Sites");
			inst.description(_, "HRM Sites");
			inst.application(_, app);

			// Add menu item in Menu block if it's not already setted
			for (var i in submoduleToAdd) {
				if (!isItemInProp(_, inst, submoduleToAdd[i], "submodules"))
					inst.submodules(_).set(_, submoduleToAdd[i]);
			}
			if (!isItemInProp(_, inst, selectedEp, "endpoints"))
				inst.endpoints(_).set(_, selectedEp);

			var homePage = getHomeNavigationPage(_);
			if (!isItemInProp(_, inst, homePage, "navigationPages"))
				inst.navigationPages(_).set(_, homePage);


			var sav = inst.save(_);
			var err = hasErrors(sav);
			if (err) {
				throw new Error(err);
			}
		}
		//
		var entity = db.getEntity(_, "menuModule");
		var menuModule = getMenuModule(_);
		if (!menuModule) {
			menuModule = createMenuModule(_);
		} else {
			updateMenuModule(_, menuModule);
		}
		return menuModule;
	}



	var db = adminHelper.getCollaborationOrm(_);

	var app = adminHelper.getApplication(_, "x3", "hrm");
	var selectedEp = globals.context.session.getUserProfile(_).selectedEndpoint(_);



	var _site = setHRMSite(_);
	var _menuItems = setMenuItem(_);

	var _menuBlock = setMenuBlock(_, _menuItems);
	var _menuModule = setMenuModule(_, [_menuBlock]);


	return "The HRM Portal is available in the home navigation page";
};