"use strict";

var config = require('config');
var globals = require('streamline/lib/globals');
var sa = require("syracuse-orm/lib/storageArea");
var jsxml = require('js-xml');
var fs = require("streamline-fs");
var os = require("os");

var _TMPDIR = require("os").tmpdir();


exports.entity = {
	$capabilities: "",
	$titleTemplate: "EDI Cache Entity",
	$descriptionTemplate: " ",
	$properties: {
		id: {
			$title: "id", // id of the edi process context , must be unique (ex X3 name + type )
		},
		type: {
			$title: "type of flow", // class json/ representation etc...
			$default: "jsoncache"
		},
		etag: {
			$title: "ETag",
		},
		json: { // json correspond to the context used for a edi process
			$title: "object",
			$type: "json",
			$isHidden: true
		},
		xmlPathId: {
			$title: "Xml paths document id",
			//$isHidden: true,
			$propagate: function(_, instance, val) {
				globals.context.session.xmlPathId = val;
			}
		},
		xsdFiles: {
			$title: "list of xsd file as a json array"
		}


	},
	$relations: {

	},

	$functions: {
		getMainXsdFilePath: function(_) {
			var xsd = null;
			if (this.xsdFiles(_)) {
				var sep = os.platform() === "win32" ? "\\" : "/";

				var p = JSON.parse(this.xsdFiles(_))
					// retrive the xsd files content depending of the uuid
				var pathFirst = "";
				Array.isArray(p) && p.forEach_(_, function(_, obj) {
					xsd = sa.readAll(_, {
						jsonWhere: {
							$uuid: obj.uuid
						}
					}).toString('utf8');
					//
					var rg = new RegExp('schemaLocation=\"(.*.xsd)\"', "g");

					var fileName = rg.exec(xsd);
					fileName = fileName && fileName[1] ? fileName[1] : null;
					if (fileName) {
						var fname = fileName;
						if (fileName.indexOf("/") !== -1) {
							var f = fileName.split("/");
							fname = f[f.length - 1];
						}
						xsd = xsd.replace(rg, "schemaLocation=\"" + _TMPDIR + sep + fname + "\"");
					}
					// write this file in a temp folder in order to be able to use it as a validation
					var path = _TMPDIR + sep + obj.fileName;
					fs.writeFile(path, xsd, _);
					if (!pathFirst) pathFirst = path;
				})
			}

			// merge files to have one only xsd file in order to validate 

			return pathFirst;
		},

	},
	$services: {},

	$uniqueConstraints: [
		["id", "type"]
	]

};