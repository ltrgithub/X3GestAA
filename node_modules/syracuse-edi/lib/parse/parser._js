"use strict";
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var trace = config.edi && config.edi.parser && config.edi.parser.trace;
var SEQFILE_LIB = require('syracuse-edi/lib/enumType').SEQFILE_LIB;

var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var protoHelp = require('syracuse-edi/lib/helpers');
/**
 * Created by apisu on 01/07/2014.
 * parse of the edi file to a json structure regarding a specific context
 */


///
/// ### function parse that create a json file from Edi sequential file(s)
///  parse(_,buff,ediCached[,json])
///     filesBuff : buffer of the files read in string or binary
///     ediCached : contains all element for generation
exports.parse = function(_, opt) {

	var process = opt.process;
	var input = opt.input;
	var json = opt.json;
	var seqFile = opt.process.sequentialFile(_);
	if (!seqFile || Object.keys(seqFile).length === 0) {
		throw new Error("sequential File identified by '" + opt.process.idSequentialFile(_) + "' not found in syracuse");
	}
	// retrieve prototype
	var facet = "$details";
	var entity = opt && opt.process.endPoint(_).getModel(_).getEntity(_, process.x3RepName(_), facet);
	var prototype = entity && entity.getPrototype(_, entity.name, facet);

	trace && trace("serializer " + SEQFILE_LIB[seqFile.TYPFIL]);
	return _mapParse[SEQFILE_LIB[seqFile.TYPFIL]](input, seqFile.ESFESFD, prototype, json);

};

var _mapParse = {
	delimited: function(input, elems, prototype, json) {

	},
	fixedLength: function(input, elems, prototype, json) {
		var jsonToGen = json || {};

		Object.keys(input).forEach(function(filename) {
			//nb of readed character
			var lines = input[filename];
			if (lines.indexOf("\n")) {
				lines = lines.split('\n');
			} else {
				lines = [lines];
			}
			lines && lines.forEach(function(line) {
				var newRecord = true;
				elems.filter(function(prev, cur) {
					return elems[cur] && elems[cur].FILNAM === filename;
				}).forEach(function(item) {
					var realLoc = item.LOC - 1;
					var propertyName = item.EXPRESSION.substring(item.EXPRESSION.indexOf(".") + 1);
					if (realLoc < line.length) {
						// extract the value
						var val = line.substring(realLoc, realLoc + item.LNG);

						val = _removeSpace(val.replace("/\n|\r/g", ""));
						if (val) {
							if (_addInJson(propertyName, prototype, jsonToGen, {
								value: val,
								newRecord: newRecord
							})) {
								newRecord = false;
							};
						}
					}
				});
				//console.log(JSON.stringify(jsonToGen, null, 2));
			});
		});
		return jsonToGen;
	}
};

exports.mapParse = _mapParse;

/*
 *  this function allow to return the object where we have to assign the property receive from the parsing with the value
 *   parameter :
 *      key : key that is defined to sequential File that indicate the property name of the x3 instance
 *      jsonRoot : the json root object to generate. it's an empty object at the begininng
 *      prototype :  the prototype of the classe that we want to create at the end of the process. This allow to know the type of each property
 *   return  :
 *      {
 *          key : key of the property in this last level
 *          json : the json object or array where we have to assign the property with value. In the case of array we have alos to retrieve which instance in the object
 *          property : the property item that describe the property defined by the key 'key'
 *      }
 */
function _getJsonObject(key, jsonRoot, prototype) {
	function _createEmptyItem(propItem) { // depending of the typ fo the property, it create a empty object or empty array
		return propItem && propItem.$type === "application/x-array" ? [] : {};
	}

	// get the root property level

	var properties = prototype.$properties;

	var json = jsonRoot;
	var jsonKey = key.split('.');
	// create the last element
	if (jsonKey && jsonKey.length > 1) {
		for (var i = 0; i < jsonKey.length && properties; i++) {
			var item = jsonKey[i];

			var propTemp = properties[item] || protoHelp.getSubProperties(properties) && protoHelp.getSubProperties(properties)[item] || null;
			if (!propTemp) {
				item = prototype.$instanceUrl.substring(prototype.$instanceUrl.indexOf("/") + 1) + jsonKey.slice(0, i + 1).join(""); // hack item is identify by concat of all parent node
				propTemp = properties[item] || protoHelp.getSubProperties(properties) && protoHelp.getSubProperties(properties)[item] || null;
			}
			properties = propTemp;
			if (properties && i < jsonKey.length - 1) { // we get only the object level and not the property
				json[item] = json[item] || _createEmptyItem(properties);
				json = json[item];
			}

			// log warning
			if (!properties) {
				console.log("property " + key + " doesn't exists for the entity " + prototype.$representation);
			}
		};
	} else { // case of property in root level
		properties = properties[key];

		if (!properties) {
			console.log("property " + key + " doesn't exists for the entity " + prototype.$representation);
		}
	}
	if (properties) {
		return {
			key: jsonKey[jsonKey.length - 1],
			"json": json,
			property: properties
		};
	} else {
		return null;
	}

}

function _formatType(propItem, str) {
	switch (propItem.$type) {
		case "application/x-decimal":
			return parseFloat(str, 10);
			break;
		case "application/x-integer":
			return parseInt(str, 10);
			break;
		case "application/x-boolean":
			return Boolean(str);
			break;
		default:
			return str;
	}
}
/*
 * set the value to the right property in the json file
 *  _addInJson(propertyName, prototype, jsonToGen, value[, index])
 *  parameter :
 *      propertyName : full name fo the property (i.e : AAA.TEST.AB.CODE)
 *      prototype : object that represent the prototype of the X3 class
 *      jsonToGen : json already generate on which we have to add a property
 *      value : object that contains value of the property and if the value is at the end of th record
 *          i.e {
 *                  value : "val",
 *                  endRec : true
 *              }
 */
function _addInJson(propertyName, prototype, jsonToGen, value) {
	// can't have  array of object of array regarding the seqentialFile. we can't associate a file to a specific array of a object that are a element of a array
	var resJson = _getJsonObject(propertyName, jsonToGen, prototype);

	if (resJson) {
		if (Array.isArray(resJson.json)) {
			var arr = resJson.json;
			if (value.newRecord) {
				arr.push({});
			}
			var item = arr[arr.length - 1];
			item[resJson.key] = _formatType(resJson.property, value.value);
			trace && trace("item :" + JSON.stringify(item) + "-  key :" + resJson.key + "- val:" + JSON.stringify(_formatType(resJson.property, value.value)));

		} else {
			resJson.json[resJson.key] = _formatType(resJson.property, value.value);
		}
		return true;
	}
	return false;
}

function _removeSpace(str) {
	var i = 0;
	while ([" ", "\n", "\r"].indexOf(str[i]) !== -1 && i++ < str.length) {}

	str = str.substring(i);
	var i = str.length - 1;
	while ([" ", "\n", "\r"].indexOf(str[i]) !== -1 && i-- >= 0) {}
	str = str.substring(0, i + 1);
	return str;
}