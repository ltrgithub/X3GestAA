"use strict";
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var trace = config.edi && config.edi.cache && config.edi.cache.trace;
var EDIClass = require('./helpers').EDIClass;


exports.exported = true;

function _createEdiEntity(_, opt) {
	// check if json is a string that represent a json object
	if (typeof opt === "string") {
		opt = JSON.parse(opt);
	}
	if (opt && typeof opt.jsons !== "object") {
		throw new Error("can't store a non json object");
	}

	var ediCache = new EDIClass(_, opt.entity).createInstance(_);
	if (opt.etag) {
		ediCache.etag(_, opt.etag);
	}
	if (opt.id) {
		ediCache.id(_, opt.id); // sas, message mappign etc..
	}
	ediCache.type(_, opt.type); // sas, message mappign etc..
	ediCache.json(_, opt.jsons); // all entity has cache
	ediCache.save();
	return ediCache;
}

/// !doc
///
/// ## dropAllEdiCacheEntity(_) :
/// This function allow to delete all the edi store in mongodb
///
exports.dropAllEdiCacheEntity = function(_) {
	new EDIClass(_).dropAllInstance(_);

};

/// ## var uuid = createEdiCacheEntity(_,opt) :
/// This function allow to create a Edi Entity in mongodb database. It possible to create 1 entity or several in the same time
///         opt : object that describe the entity to create. This object must contains at least a json object to be store and an id that deosn't need to be unique
///         uuid : the uuid of the created entity that identified it in mongod
///
/// ```javascript
/// var opt = {
///     id : "id of the entity (i.e : INVOIC)",
///     type : "type of the entity (SeqFile, ..)",
///     etag : "etag of entity when it's stored",
///     json : {"":...}
/// };
/// uuid = "uuid of the edi entity created"
/// ```
///
/// if this function is called with in option parameter a array of json for the parameter json. it will store for each element of the array
/// a cache entity with for id  = opt.id +"_ "+index of the json element in the array". In that case it will return a array of uuid.
///
/// ```javascript
/// var opt = {
///    id : "id of the entity (i.e : INVOIC)",
///    type : "type of the entity (SeqFile, ..)",
///    etag : "etag of entity when it's stored",
///    json : [{..} , {...} , {...}]
/// };
/// uuid = ["uuid1","uuid2","uuid3"]
/// ```
///
/// in any case, if it failed it return a error.
///

exports.createEdiCacheEntity = function(_, opt) {
	if (Array.isArray(opt.jsons)) {
		var uuids = [];
		var objs = [];
		var i = 0;
		opt.jsons.forEach_(_, function(_, item) {
			var optItem = {
				jsons: item,
				type: opt.type
			};
			if (opt.etag)
				optItem.etag = opt.etag;
			optItem.id = opt.id + "_" + i;
			var obj = _createEdiEntity(_, optItem);
			objs.push(obj);
			uuids.push(obj.$uuid);
			i++;
		});
		return uuids.length === 0 ? null : uuids;
	} else {
		return _createEdiEntity(_, opt).$uuid;
	}
};


/// ## var instance = getEdiCacheEntity(_,opt) :
/// This function allow to get an entity of several entity identified by a uuid
///     opt : json object that contains the element to get the entity. this can contains a uuid, a list of uuid or a sdatafilter
///     instance : the edi entity instance loaded if it's found else null
///
/// ```javascript
/// var opt = {
///             uuid : "uuid of the entity to get"
/// }
///
/// ```
///
/// or
///
/// ```javascript
/// var opt = {
///   uuid : ["uuid1","uuid2","uuid3"]
/// }
///
/// ```
///
/// or
///
/// ```javascript
/// var opt = {
///   filter : { "sdataWhere" : "sdata filter" }
/// }
///
/// ```
///
exports.getEdiCacheEntity = function(_, opt) {
	if (opt.uuid) {
		if (Array.isArray(opt.uuid)) {
			var jsons = [];
			opt.uuid.forEach_(_, function(_, item) {
				var ediSasInst = new EDIClass(_).getInstance(_, {
					"jsonWhere": {
						"$uuid": item
					}
				});
				if (ediSasInst) {
					var objItem = {};
					objItem[item] = ediSasInst;
					jsons.push(objItem);
				}
			});
			return jsons.length === 0 ? null : jsons;
		} else {
			var ediSasInst = new EDIClass(_).getInstance(_, {
				"jsonWhere": {
					"$uuid": opt.uuid
				}
			});
			return ediSasInst;
		}
	} else if (opt.filter) {
		return new EDIClass(_).getInstance(_, opt.filter);
	}
};

/// ## var json = getEdiCacheJson(_,opt) :
/// This function allow to get the json of an entity or  of several entity identified by a uuid
///     opt : json object that contains the element to get the entity. this can contains a uuid, a list of uuid or a sdatafilter
///     json : the javascript object with as a key the uuid of the entity object and as a value the json object store in mongodb. Can be a single object or an array of object
///
/// ```javascript
/// var opt = {
///    uuid : "uuid of the entity to get"
/// }
///
/// json =  {"uuid" : {...} }
/// ```
///
/// or
///
/// ```javascript
/// var opt = {
///    uuid : ["uuid1","uuid2","uuid3"]
/// }
///
/// json = [{"uuid1":{...} , {"uuid2":{...} }, {"uuid3": {...}}]
///
/// ```
///
exports.getEdiCacheJson = function(_, opt) {
	if (opt.uuid) {
		if (Array.isArray(opt.uuid)) {
			var jsons = [];
			opt.uuid.forEach_(_, function(_, item) {
				var ediSasInst = new EDIClass(_).getInstance(_, {
					"jsonWhere": {
						"$uuid": item
					}
				});
				if (ediSasInst) {
					var objItem = {};
					objItem[item] = ediSasInst.json(_);
					jsons.push(objItem);
				}
			});
			return jsons.length === 0 ? null : jsons;
		} else {
			var ediSasInst = new EDIClass(_).getInstance(_, {
				"jsonWhere": {
					"$uuid": opt.uuid
				}
			});
			return ediSasInst && ediSasInst.json(_);
		}
	}
	return null;
};

/// ## removeEdiCacheEntity(_,opt) :
/// This function allow to remove the json of an entity or  of several entity identified by a uuid
///     opt : json object that contains the element to get the entity. this can contains a uuid, a list of uuid or a sdatafilter
///
/// ```javascript
/// var opt = {
///    uuid : "uuid of the entity to get"
/// }
///
/// ```
///
/// or
///
/// ```javascript
/// var opt = {
///    uuid : ["uuid1","uuid2","uuid3"]
/// }
///
/// ```
///
exports.removeEdiCacheEntity = function(_, uuids) {
	var arr = uuids;
	if (!Array.isArray(uuids)) {
		arr = [arr];
	}
	arr.forEach_(_, function(_, item) {
		new EDIClass(_).deleteInstance(_, {
			"jsonWhere": {
				"$uuid": item
			}
		});
	});
};