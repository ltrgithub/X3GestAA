"use strict";
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var trace = config.edi && config.edi.cache && config.edi.cache.trace;
var EDIClass = require('./helpers').EDIClass;
var ediEntityTracer = require("syracuse-trace/lib/helper").getTracer("edi.entity");


exports.$exported = true;

function _createEdiEntity(_, opt) {

	// check if json is a string that represent a json object
	if (typeof opt === "string") {
		opt = JSON.parse(opt);
	}
	if (opt && typeof opt.json !== "object") {
		throw new Error("can't store a non json object");
	}
	var ediCache = new EDIClass(_, opt && opt.db, opt.entity).createInstance(_);
	if (opt.etag) {
		ediCache.etag(_, opt.etag);
	}
	if (opt.id) {
		ediCache.id(_, opt.id); // sas, message mappign etc..
	}
	ediCache.type(_, opt.type); // sas, message mappign etc..
	ediCache.json(_, opt.json); // all entity has cache


	return ediCache;

}

/// !doc
///
/// ## dropAllEdiCacheEntity(_) :
/// This function allow to delete all the edi store in mongodb
///
exports.dropAllEdiCacheEntity = function(_, opt) {
	new EDIClass(_, opt && opt.db).dropAllInstance(_);

};

/// ## var uuid = createEdiCacheEntity(_,opt) :
/// This function allow to create a Edi Entity in mongodb database. It possible to create 1 entity or several in the same time
///         opt : object that describe the entity to create. This object must contains at least a json object to be store and an id that deosn't need to be unique
///         uuid : the uuid of the created entity that identified it in mongod
///
/// ```javascript
/// var opt = {
///     id : "id of the entity (i.e : INVOIC)",
///     type : "type of the entity (SeqFile, ..)",
///     etag : "etag of entity when it's stored",
///     json : {"":...},
/// };
/// uuid = "uuid of the edi entity created"
/// ```
///
/// if this function is called with in option parameter a array of json for the parameter json. it will store for each element of the array
/// a cache entity with for id  = opt.id +"_ "+index of the json element in the array". In that case it will return a array of uuid.
///
/// ```javascript
/// var opt = {
///    id : "id of the entity (i.e : INVOIC)",
///    type : "type of the entity (SeqFile, ..)",
///    etag : "etag of entity when it's stored",
///    json : [{..} , {...} , {...}]
/// };
/// uuid = ["uuid1","uuid2","uuid3"]
/// ```
///
/// in any case, if it failed it return a error.
///

exports.createEdiCacheEntity = function(_, opt) {
	ediEntityTracer.debug && ediEntityTracer.debug("createEdiCacheEntity id = " + opt.id + ", type=" + opt.type + ", etag=" + opt.etag);
	var uuids;
	var objs = [];
	try {
		if (Array.isArray(opt.json)) {
			uuids = [];
			var i = 0;
			opt.json.forEach_(_, function(_, item) {
				var optItem = {
					json: item,
					type: opt.type
				};
				optItem.db = opt.db;
				if (opt.etag)
					optItem.etag = opt.etag;
				optItem.id = opt.id + "_" + i;
				var obj = _createEdiEntity(_, optItem);

				objs.push(obj);
				uuids.push(obj.$uuid);
				i++;
			});

			return uuids.length === 0 ? null : uuids;
		} else {
			objs.push(_createEdiEntity(_, opt));
			uuids = _createEdiEntity(_, opt).$uuid;
			return uuids;
		}
	} finally {
		ediEntityTracer.debug && ediEntityTracer.debug("createEdiCacheEntity done uuid = " + JSON.stringify(uuids));
		// save if we ask to rollback in any error at the end
		objs && objs.forEach(_, function(_, itemToSave) {
			itemToSave.save(_);
		});
	}
};


/// ## var instances = getEdiCacheEntity(_,opt) :
/// This function allow to get an entity of several entity identified by a uuid
///     opt : json object that contains the element to get the entity. this can contains a uuid, a list of uuid or a sdatafilter
///     instance : the edi entity instance loaded if it's found or array of object {uuid: instance)} else null
///
/// possible value for parameter opt and instances  :
/// ```javascript
/// var opt = {
///    uuid : "uuid of the entity to get"
/// }
///
/// instances = { mongodb instance }
/// ```
///
/// or
///
/// ```javascript
/// var opt = {
///   uuid : ["uuid1","uuid2","uuid3"]
/// }
///
/// instances = [{ mongodb instance },...]
///
/// ```
///
/// or
///
/// ```javascript
/// var opt = {
///   filter : { "sdataWhere" : "sdata filter" }
/// }
///
/// var opt = {
///   filter : { "jsonWhere" : {"mongo filter" }}
/// }
///
///
/// instances = [{ mongodb instance },...]

///
/// ```
///
exports.getEdiCacheEntity = _getEdiCacheEntity;

function _getEdiCacheEntity(_, opt) {
	ediEntityTracer.debug && ediEntityTracer.debug("_getEdiCacheEntity opt = " + JSON.stringify(opt));
	try {
		if (opt.uuid) {
			if (Array.isArray(opt.uuid)) {
				var json = [];
				opt.uuid.forEach_(_, function(_, item) {
					var ediSasInst = new EDIClass(_, opt && opt.db).getInstance(_, {
						"jsonWhere": {
							"$uuid": item
						}
					});
					if (ediSasInst) {
						json.push(ediSasInst);
					}
				});
				return json.length === 0 ? null : json;
			} else {
				var ediSasInst = new EDIClass(_, opt && opt.db).getInstance(_, {
					"jsonWhere": {
						"$uuid": opt.uuid
					}
				});
				return ediSasInst;
			}
		} else if (opt.filter) {
			return new EDIClass(_, opt && opt.db).getInstance(_, opt.filter);
		}
	} finally {
		ediEntityTracer.debug && ediEntityTracer.debug("_getEdiCacheEntity done ");
	}

};

/// ## var json = getEdiCacheJson(_,opt) :
/// This function allow to get the json of an entity or  of several entity identified by a uuid
///     opt : json object that contains the element to get the entity. this can contains a uuid, a list of uuid or a sdatafilter
///     json : the javascript object with as a key the uuid of the entity object and as a value the json object store in mongodb. Can be a single object or an array of object
///
/// ```javascript
/// var opt = {
///    uuid : "uuid of the entity to get"
/// }
///
/// json =  {"uuid" : {...} }
/// ```
///
/// or
///
/// ```javascript
/// var opt = {
///    uuid : ["uuid1","uuid2","uuid3"]
/// }
///
/// json = [{"uuid1":{...} , {"uuid2":{...} }, {"uuid3": {...}}]
///
/// ```
///
exports.getEdiCacheJson = function(_, opt) {
	ediEntityTracer.debug && ediEntityTracer.debug("getEdiCacheJson opt = " + JSON.stringify(opt));
	try {
		if (opt.uuid) {
			if (Array.isArray(opt.uuid)) {
				var jsons = [];
				opt.uuid.forEach_(_, function(_, item) {
					var ediSasInst = new EDIClass(_, opt && opt.db).getInstance(_, {
						"jsonWhere": {
							"$uuid": item
						}
					});
					if (ediSasInst) {
						var objItem = {};
						objItem[item] = ediSasInst.json(_);
						jsons.push(objItem);
					}
				});
				return jsons.length === 0 ? null : jsons;
			} else {
				var ediSasInst = new EDIClass(_, opt && opt.db).getInstance(_, {
					"jsonWhere": {
						"$uuid": opt.uuid
					}
				});
				return ediSasInst && ediSasInst.json(_);
			}
		}
		return null;
	} finally {
		ediEntityTracer.debug && ediEntityTracer.debug("getEdiCacheJson done ");
	}
};

/// ## updateEdiCacheEntity(_,opt) :
/// This function allow to update the json of an entity or  of several entity identified by a uuid
///     opt : json object that contains the element to get the entity. this can contains a uuid, a list of uuid or a sdatafilter
///
/// raise an exception if on the update failed.
///
/// ```javascript
/// var opt = {
///    elems : [{uuid : "uuid of the entity to update", json: {..json object to set ..} }, {..}, .. ],
///    rollbackOnError : true | false
///
///
/// }
/// ```
///
exports.updateEdiCacheEntity = function(_, opt) {
	ediEntityTracer.debug && ediEntityTracer.debug("updateEdiCacheEntity opt = " + JSON.stringify(opt));
	var instances;
	try {
		if (opt.elems) {
			// check if the elem exists for each uuid in mongodb
			var changes = {};
			opt.elems.forEach(_, function(_, elem) {
				changes[elem.uuid] = elem.json;
			});
			instances = _getEdiCacheEntity(_, {
				uuid: Object.keys(changes)
			});
			instances.forEach(_, function(_, instance) {
				instance.json(_, changes[instance.$uuid]);
			});
			return uuids.length === 0 ? null : uuids;
		}
	} finally {
		ediEntityTracer.debug && ediEntityTracer.debug("updateEdiCacheEntity done ");
		instances.forEach(_, function(_, inst) {
			inst.save(_);
		});
	}
};

/// ## removeEdiCacheEntity(_,opt) :
/// This function allow to remove the json of an entity or  of several entity identified by a uuid
///     opt : json object that contains the element to get the entity. this can contains a uuid, a list of uuid or a sdatafilter
///
/// ```javascript
/// var opt = {
///    uuid : "uuid of the entity to get"
/// }
///
/// ```
///
/// or
///
/// ```javascript
/// var opt = {
///    uuid : ["uuid1","uuid2","uuid3"]
/// }
///
/// ```
///
exports.removeEdiCacheEntity = function(_, opt) {
	ediEntityTracer.debug && ediEntityTracer.debug("removeEdiCacheEntity opt = " + JSON.stringify(opt));
	try {
		var arr = opt.uuid;
		if (!Array.isArray(arr)) {
			arr = [arr];
		}
		arr.forEach_(_, function(_, item) {
			new EDIClass(_, opt && opt.db).deleteInstance(_, {
				"jsonWhere": {
					"$uuid": item
				}
			});
		});
	} finally {
		ediEntityTracer.debug && ediEntityTracer.debug("removeEdiCacheEntity ");
	}
};