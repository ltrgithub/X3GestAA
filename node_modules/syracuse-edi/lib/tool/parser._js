"use strict";
var config = require('config'); // must be first syracuse require
var trace = config.edi && config.edi.parser && config.edi.parser.trace;
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var parseHelp = require('syracuse-edi/lib/tool/helpers');
var decimal = require("syracuse-core/lib/types/decimal");
var datetime = require("syracuse-core/lib/types/datetime");
var log = require("syracuse-trace/lib/helper").getTracer("edi.parser");
var locale = require("syracuse-core/lib/locale");

/**
 * Created by apisu on 01/07/2014.
 * parse of the edi file to a json structure regarding a specific context
 */


///
/// ### function parse that create a json file from Edi sequential file(s)
///  parse(_,buff,ediCached[,json])
///     filesBuff : buffer of the files read in string or binary
///     ediCached : contains all element for generation
exports.parse = function(_, opt) {
	log.info && log.info("parse ");

	var input = opt.input;
	var json = opt.json;

	if (!Object.keys(opt.prototype).length) {
		throw new Error(locale.format(module, "noPrototype", opt.repName));
	}
	log.debug && log.debug("parser used " + opt.configParser.parser);


	if (_mapParse[opt.configParser.parser]) {
		return _mapParse[opt.configParser.parser](input, opt.configParser, opt.prototype, json);
	} else {
		throw new Error(locale.format(module, "findParser", opt.configParser.parser));
	}

};

function getPrimaryKey(jsonInstance, item, config) {
	// retrieve the instance and compute the key

	var primarykey = "";
	config.linkKey && config.linkKey[item.fileName] && config.linkKey[item.fileName].primary && config.linkKey[item.fileName].primary.split("+").forEach(function(elemKey) {
		var jsIsnt = jsonInstance;

		if (elemKey.indexOf(".") !== -1) {
			elemKey.split(".").forEach(function(key) {
				if (Array.isArray(jsIsnt)) {
					jsIsnt = jsIsnt[0];
				}
				jsIsnt = jsIsnt[key];
			});
		} else {
			jsIsnt = jsIsnt[elemKey];
		}
		if (jsIsnt)
			primarykey += jsIsnt;
		else {
			log.warn && log.warn("can't compute primary key : property " + i + "no in the jsonInstance parsed");
		}
	});
	return primarykey;

}

function getForeignKey(jsonInstance, item, config) {
	// retrieve the instance and compute the key

	var foreignKey = "";
	config.linkKey && config.linkKey[item.fileName] && config.linkKey[item.fileName].foreign && config.linkKey[item.fileName].foreign.split("+").forEach(function(elemKey) {
		var jsIsnt = jsonInstance;

		if (elemKey.indexOf(".") !== -1) {
			elemKey.split(".").forEach(function(key) {
				if (Array.isArray(jsIsnt)) {
					jsIsnt = jsIsnt[0];
				}
				jsIsnt = jsIsnt[key];
			});
		} else {
			jsIsnt = jsIsnt[elemKey];
		}
		if (jsIsnt)
			foreignKey += jsIsnt;
		else {
			log.warn && log.warn("can't compute primary key : property " + i + "no in the jsonInstance parsed");
		}
	});
	return foreignKey;
}

function getSubProperty(prefixExp, prototype, configParser) {
	var propertySubPref;
	if (prefixExp && prefixExp.indexOf(".") !== -1) {
		propertySubPref = prefixExp.split(".").slice(-1).reduce(function(previousValue, currentValue, index, array) {
			return parseHelp.getProperty(previousValue ? previousValue : prototype, currentValue);
		});
	} else {
		propertySubPref = prototype;
	}
	propertySubPref.$instanceUrl = prototype.$instanceUrl;
	return propertySubPref;
}

function pushJson(configParser, lastItem, res, mapJson, jsonInstance) {

	function mergeJSON(source1, source2) {
		var mergedJSON = source2;
		for (var attrname in source1) {
			if (mergedJSON.hasOwnProperty(attrname)) {
				if (source1[attrname] != null) {
					if (source1[attrname].constructor == Object) {

						mergedJSON[attrname] = mergeJSON(source1[attrname], mergedJSON[attrname]);
					} else if (Array.isArray(source1[attrname])) {
						source1[attrname].forEach(function(item) {
							mergedJSON[attrname].push(item);
						});
					}
				}
			} else { //else copy the property from source1
				mergedJSON[attrname] = source1[attrname];

			}
		}
		return mergedJSON;
	}

	//var prefixExp = configParser.exppressionPrefix[lastItem.fileName];
	var primarykey = getPrimaryKey(jsonInstance, lastItem, configParser);
	var ext_primarykey = lastItem.fileId + "_" + primarykey;
	mapJson[ext_primarykey] = jsonInstance;
	if (configParser.linkKey[lastItem.fileName].fatherFileId) {
		var foreignkey = configParser.linkKey[lastItem.fileName].fatherFileId + "_" + getForeignKey(jsonInstance, lastItem, configParser);

		// find the right subproperty to associate father and son
		if (foreignkey) {
			if (mapJson[foreignkey]) {
				// merge current instance with mapJson foreignKey
				mapJson[foreignkey] = mergeJSON(jsonInstance, mapJson[foreignkey]);
			}
		}
	} else {
		mapJson[primarykey] = jsonInstance;
		res[primarykey] = jsonInstance;
	}
	return res;
}


var _mapParse = {
	sepRecord: function(json, configSerializer, prototype) {
		log.info && log.info("parse sepRecord");

		var mapJson = json || {};
		var jsonInstance = {};

		var res;

		log.debug && log.debug("json " + JSON.stringify(json));
		Object.keys(input).forEach(function(filename) {
			//nb of readed character
			log.debug && log.debug("file parsed " + filename);

			var records = input[filename];
			if (records.indexOf(configParser.sepRecord)) {
				records = records.split(configParser.sepRecord);
			} else {
				records = [records];
			}
			if (records) {

				records.forEach(function(record) {
					var recFlag = record.split(configParser.sepField).slice(0, 1)[0];

					var recValues = record.split(configParser.sepField).slice(1);
					log.debug && log.debug("records fields " + JSON.stringify(recValues));
					elems.filter(function(prev, cur) {
						return configParser.elems[cur] && configParser.elems[cur].fileName === filename && configParser.elems[cur].flag === recFlag;
					}).forEach(function(item, idx, arr) {
						if (idx < recValues.length) {
							log.debug && log.debug("process item " + item.expression);

							var propertyName = item.expression;

							// extract the value
							var val = recValues[idx];


							if (val) {
								_addToJsonObject(propertyName, jsonInstance, prototype, item, val);
							}
							if (idx == arr.length - 1 && Object.keys(jsonInstance).length) { // last element treated
								res = pushJson(configParser, lastItem, res, mapJson, jsonInstance);
								jsonInstance = {};
							}
						}
					});
					//console.log(JSON.stringify(jsonToGen, null, 2));
				});
			} else {
				throw new Error(locale.format(module, "fileEmpty"));
			}
		});
		return mapJson;
	},
	sepField: function(json, configParser, prototype) {
		log.info && log.info("parse sepRecord");

		var mapJson = json || {};
		var jsonInstance = {};

		var res;
		log.debug && log.debug("json " + JSON.stringify(json));
		Object.keys(input).forEach(function(filename) {
			//nb of readed character
			log.debug && log.debug("file parsed " + filename);

			var records = input[filename];

			var recFlag = record.split(configParser.sepField).slice(0, 1)[0];

			var recValues = record.split(configParser.sepField).slice(1);
			log.debug && log.debug("records fields " + JSON.stringify(recValues));
			elems.filter(function(prev, cur) {
				return configParser.elems[cur] && configParser.elems[cur].fileName === filename && configParser.elems[cur].flag === recFlag;
			}).forEach(function(item, idx, arr) {
				if (idx < recValues.length) {
					log.debug && log.debug("process item " + item.expression);

					var prefixExp = configParser.exppressionPrefix[item.fileName];

					var propertyName = item.expression.indexOf(configParser.exppressionPrefix[item.fileName]) === 0 ? item.expression.substring(configParser.exppressionPrefix[item.fileName].length) : item.expression;
					var propertySubPref = getSubProperty(prefixExp, prototype, configParser);

					// extract the value
					var val = recValues[idx];


					if (val) {
						_addToJsonObject(propertyName, jsonInstance, propertySubPref, item, val);
					}
					if (idx == arr.length - 1 && Object.keys(jsonInstance).length) { // last element treated
						res = pushJson(configParser, lastItem, res, mapJson, jsonInstance);
						jsonInstance = {};
					}
				}
			});

			//console.log(JSON.stringify(jsonToGen, null, 2));

		});
		return res;
	},
	delimited: function(input, configParser, prototype, json) {
		log.info && log.info("parse delimited");

		var mapJson = json || {};
		var jsonInstance = {};

		var res = {};
		log.debug && log.debug("json " + JSON.stringify(json));
		Object.keys(input).forEach(function(filename) {
			//nb of readed character
			log.debug && log.debug("file parsed " + filename);

			var records = input[filename];
			if (records.indexOf(configParser.sepRecord)) {
				records = records.split(configParser.sepRecord);
			} else {
				records = [records];
			}
			if (records) {

				records.forEach(function(record) {
					var recFlag = record.split(configParser.sepField).slice(0, 1)[0];
					if (recFlag.charAt(0) === configParser.delimField && recFlag.charAt(recFlag.length - 1) === configParser.delimField) {
						recFlag = recFlag.slice(1, recFlag.length - 1);

					} else {
						throw new Error(locale.format(module, "recDelim", recFlag));
					}
					var recValues = record.split(configParser.sepField).slice(1);
					log.debug && log.debug("records fields " + JSON.stringify(recValues));
					elems.filter(function(prev, cur) {
						return configParser.elems[cur] && configParser.elems[cur].fileName === filename && configParser.elems[cur].flag === recFlag;
					}).forEach(function(item, idx, arr) {
						if (idx < recValues.length) {
							log.debug && log.debug("process item " + item.expression);

							// remove prefix if exists and start w
							var prefixExp = configParser.exppressionPrefix[item.fileName];

							var propertyName = item.expression.indexOf(configParser.exppressionPrefix[item.fileName]) === 0 ? item.expression.substring(configParser.exppressionPrefix[item.fileName].length) : item.expression;
							var propertySubPref = getSubProperty(prefixExp, prototype, configParser);
							// extract the value
							var val = recValues[idx];


							if (val && val.charAt(0) === sContext.delimField && val.charAt(val.length - 1) === configParser.delimField) {
								val = val.slice(1, val.length - 1);
							} else {
								throw new Error(locale.format(module, "fieldDelim", val));
							}
							if (val) {
								// TODO set prototype that correspond to the level in order to create the json instance
								_addToJsonObject(propertyName, jsonInstance, propertySubPref, item, val);
							}
						}
						if (idx == arr.length - 1 && Object.keys(jsonInstance).length) { // last element treated
							res = pushJson(configParser, item, mapJson, jsonInstance);
							jsonInstance = {};

						}

					});
					//console.log(JSON.stringify(jsonToGen, null, 2));
				});
			} else {
				throw new Error(locale.format(module, "fileEmpty"));
			}
		});
		return res;
	},
	fixedLength: function(input, configParser, prototype, json) {

		log.info && log.info("parse fixed length");

		var res = {};
		var mapJson = json || {};
		var jsonInstance = {};


		log.debug && log.debug("json " + JSON.stringify(json));
		Object.keys(input).forEach(function(filename) {
			//nb of readed character
			log.debug && log.debug("file parsed " + filename);

			var lines = input[filename];
			if (lines && lines.indexOf("\n")) {
				lines = lines.split('\n');
			} else {
				lines = [lines];
			}
			lines && lines.forEach(function(line) {

				configParser.elems.filter(function(prev, cur) {
					return configParser.elems[cur] && configParser.elems[cur].fileName === filename;
				}).forEach(function(item, idx, arr) {

					log.debug && log.debug("process item " + item.expression);

					// TODO need to identify the key - hack we use the elem of loc=1
					var realLoc = item.offset;
					var prefixExp = configParser.exppressionPrefix[item.fileName];
					var propertyName = prefixExp.indexOf(".") && item.expression.indexOf(prefixExp) === 0 ? item.expression.substring(prefixExp.lastIndexOf(".")) : item.expression;

					var propertySubPref = getSubProperty(prefixExp, prototype, configParser);


					if (realLoc < line.length) {

						// extract the value
						var val = parseHelp.removeSpace(line.substring(realLoc, realLoc + item.length).replace("/\n|\r/g", ""));
						log.debug && log.debug("process item value" + val);

						if (val) {
							_addToJsonObject(propertyName, jsonInstance, propertySubPref, item, val);
						}
					}
					if (idx === arr.length - 1 && Object.keys(jsonInstance).length) { // we've finish to creat the JSON associate to the line- we have to compute the key and foreign key in order to push it in the final json structure
						res = pushJson(configParser, item, res, mapJson, jsonInstance);
						jsonInstance = {};
					}
				});
				//console.log(JSON.stringify(jsonToGen, null, 2));
			});
		});

		return res;
	}
};

exports.mapParse = _mapParse;

/*
 *  this function allow to return the object where we have to assign the property receive from the parsing with the value
 *   parameter :
 *      key : key that is defined to sequential File that indicate the property name of the x3 instance
 *      jsonRoot : the json root object to generate. it's an empty object at the begininng
 *      prototype :  the prototype of the classe that we want to create at the end of the process. This allow to know the type of each property
 *   return  :
 *      {
 *          key : key of the property in this last level
 *          json : the json object or array where we have to assign the property with value. In the case of array we have alos to retrieve which instance in the object
 *          property : the property item that describe the property defined by the key 'key'
 *      }
 */
function _addToJsonObject(key, jsonRoot, prototype, item, value) {
	function _createEmptyItem(propItem) { // depending of the typ fo the property, it create a empty object or empty array
		return propItem && propItem.$type === "application/x-array" ? [] : {};
	}

	function _getInstanceName() {
		return prototype.$instanceUrl.substring(prototype.$instanceUrl.indexOf("/") + 1);
	}

	// get the root property level

	var properties = prototype.$properties ? prototype.$properties : prototype;
	var json = jsonRoot;

	var jsonKey = key.split('.');
	var stop = false;
	// create the last element
	if (jsonKey && jsonKey.length > 1) {
		for (var i = 0; i < jsonKey.length - 1 && !stop; i++) {
			var elemKey = jsonKey[i];
			var propTemp = parseHelp.getProperty(properties, elemKey);

			if (!propTemp) {
				elemKey = _getInstanceName() + jsonKey.slice(0, i + 1).join(""); // hack item is identify by concat of all parent node
				propTemp = parseHelp.getProperty(properties, elemKey);
			}
			properties = propTemp; // we get the properties of the current key until the end
			if (properties) { // we get only the object level and not the property
				json[elemKey] = json[elemKey] || _createEmptyItem(properties); // assign to json[item to create object
				json = json[elemKey];

				if (Array.isArray(json)) { // if it's an array we have to push an object if there many elemnt on the collecton or only the value
					if (properties.$item.$type === "application/json") { // if the array must ocntain json object
						if (json.length === 0 || (i === jsonKey.length - 2 && item.newRecord)) { // if there nothin we create or we are on the level n-2 (level of the array)
							// add a property to set which item creat a new record in array
							item.newRecord = true;
							json.push({});
						}
						json = json[json.length - 1]; // json to return is the last ojbect in the array
					} else { // the array contain primitve value
						stop = true; // don't analyse the reste because the property name in the prototype not correspond of seqFile description
						// case of collection that contain primitive field and not json object
					}
				}
			} else { // failed for that key
				stop = true;
				log.warn && log.warn("property " + key + " doesn't exists for the entity " + prototype.$representation);
			}
		}

		// get the property description corresponding  to the item. If the collection contain a json object we need to get the properties desciption of the item else concerve the array property descirption
		if (properties && properties.$item && properties.$item.$type === "application/json") {
			properties = parseHelp.getProperty(properties, jsonKey[jsonKey.length - 1]);
		}

	} else { // case of property in root level
		properties = properties[key];
		if (!properties) {
			log.warn && log.warn("property " + key + " doesn't exists for the entity " + prototype.$representation);
		}
	}

	if (properties) {
		if (properties.$type === "application/x-array") {
			log.debug && log.debug("add in array  value " + _formatType(properties, value));
			json.push(_formatType(properties.$item, value));
		} else {
			log.debug && log.debug("add " + jsonKey[jsonKey.length - 1] + " value " + _formatType(properties, value));
			json[jsonKey[jsonKey.length - 1]] = _formatType(properties, value);
		}
	} //else  do nothin
}

function _formatType(propItem, str) {

	switch (propItem.$type) {
		case "application/x-decimal":
			// create format
			var float = parseFloat(str, 10);
			if (!float) {
				throw new Error(locale.format(module, "formatValue", str, propItem.$type));
			}
			return float;
		case "application/x-integer":
			var int = parseInt(str, 10);
			if (!int) {
				throw new Error(locale.format(module, "formatValue", str, propItem.$type));
			}
			return int;
		case "application/x-boolean":
			return int;
		case "application/x-boolean":
			return Boolean(str);
		case "application/x-date":
			var date = datetime.parse(str, "dd/MM/yyyy");

			return date.toString("yyyy-MM-dd");

		default:
			return str;
	}
}