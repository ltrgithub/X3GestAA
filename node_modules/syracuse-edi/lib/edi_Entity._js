"use strict";
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var EdiClass = require('./helpers').EdiClass;
var ediEntityTracer = require("syracuse-trace/lib/helper").getTracer("edi.entity");
var locale = require('streamline-locale');


exports.$exported = true;

function _createEdiEntity(_, opt) {

	// check if json is a string that represent a json object
	if (typeof opt === "string") {
		opt = JSON.parse(opt);
	}
	if (opt && typeof opt.json !== "object") {
		throw new Error(locale.format(module, "storeJson"));
	}
	// check if data is already exists in mongo identified by id and type that are defined as a key for EdiCache and raise an error if it's the case
	var filder = {
		"jsonWhere": {
			"id": opt.id,
			"type": opt.type
		}
	};
	var klass = new EdiClass(_, opt && opt.db, opt.entity);

	if (klass.getInstance(_, filder) !== null) {
		throw new Error(locale.format(module, "cantCreate", opt.id, opt.type));
	} else {

		var ediCache = new EdiClass(_, opt && opt.db, opt.entity).createInstance(_);
		if (opt.etag) {
			ediCache.etag(_, opt.etag);
		}
		if (opt.id) {
			ediCache.id(_, opt.id); // sas, message mappign etc..
		}
		ediCache.type(_, opt.type); // sas, message mappign etc..
		ediCache.json(_, opt.json); // all entity has cache

		return ediCache;
	}


}

/// !doc
///
/// ## dropAllEdiCacheEntity(_) :
/// This function allow to delete all the edi store in mongodb
///
exports.dropAllEdiCacheEntity = function(_, opt) {
	new EdiClass(_, opt && opt.db).dropAllInstance(_);

};

/// ## var uuid = createEdiCacheEntity(_,opt) :
/// This function allow to create a Edi Entity in mongodb database. It possible to create 1 entity or several in the same time
///         opt : object that describe the entity to create. This object must contains at least a json object to be store and an id that deosn't need to be unique
///         uuid : the uuid of the created entity that identified it in mongod
///
/// ```javascript
/// var opt = {
///     id : "id of the entity (i.e : INVOIC)",
///     type : "type of the entity (SeqFile, ..)",
///     etag : "etag of entity when it's stored",
///     json : {"":...},
/// };
/// uuid = "uuid of the edi entity created"
/// ```
///
/// if this function is called with in option parameter a array of json for the parameter json. it will store for each element of the array
/// a cache entity with for id  = opt.id +"_ "+index of the json element in the array". In that case it will return a array of uuid.
///
/// ```javascript
/// var opt = {
///    id : "id of the entity (i.e : INVOIC)",
///    type : "type of the entity (SeqFile, ..)",
///    etag : "etag of entity when it's stored",
///    json : [{..} , {...} , {...}]
/// };
/// uuid = ["uuid1","uuid2","uuid3"]
/// ```
///
/// in any case, if it failed it return a error.
///

exports.createEdiCacheEntity = function(_, opt) {
	ediEntityTracer.debug && ediEntityTracer.debug("createEdiCacheEntity id = " + opt.id + ", type=" + opt.type + ", etag=" + opt.etag + " custom db specified " + (opt.db !== null));
	var uuids;
	var objs = [];
	try {
		if (Array.isArray(opt.json)) {
			uuids = [];
			var i = 0;
			opt.json.forEach_(_, function(_, item) {
				var optItem = {
					json: item,
					type: opt.type
				};
				optItem.db = opt.db;
				if (opt.etag)
					optItem.etag = opt.etag;
				optItem.id = opt.id + "_" + i;
				var obj = _createEdiEntity(_, optItem);
				//obj.save(_);
				objs.push(obj);
				uuids.push(obj.$uuid);
				i++;
			});

			return uuids.length === 0 ? null : uuids;
		} else {
			var inst = _createEdiEntity(_, opt);
			objs.push(inst);
			//inst.save(_);
			uuids = inst.$uuid;
			return uuids;
		}
	} catch (e) {
		// log exception
		ediEntityTracer.error && ediEntityTracer.error(" message " + e.message + " stack " + e.stack);

		throw e;
	} finally {
		// save if we ask to rollback in any error at the end
		for (var i = 0; objs && i < objs.length; i++) {
			objs[i].save(_);
		}
		ediEntityTracer.info && ediEntityTracer.info("createEdiCacheEntity done uuid = " + JSON.stringify(uuids));

	}
};


/// ## var instances = getEdiCacheEntity(_,opt) :
/// This function allow to get an entity of several entity identified by a uuid
///     opt : json object that contains the element to get the entity. this can contains a uuid, a list of uuid or a sdatafilter
///     instance : the edi entity instance loaded if it's found or array of object {uuid: instance)} else null
///
/// possible value for parameter opt and instances  :
/// ```javascript
/// var opt = {
///    uuid : "uuid of the entity to get"
/// }
///
/// instances = { mongodb instance }
/// ```
///
/// or
///
/// ```javascript
/// var opt = {
///   uuid : ["uuid1","uuid2","uuid3"]
/// }
///
/// instances = [{ mongodb instance },...]
///
/// ```
///
/// or
///
/// ```javascript
/// var opt = {
///     filter : {
///         jsonWhere :  {
///             "id" : "value id",
///             "type" : "value type "
///         }
///     }
/// }
///
///
///
/// instances = [{ mongodb instance },...]
///
/// ```
///
exports.getEdiCacheEntity = _getEdiCacheEntity;

function _getEdiCacheEntity(_, opt) {
	ediEntityTracer.debug && ediEntityTracer.debug("_getEdiCacheEntity uuid = " + JSON.stringify(opt.uuid) + " custom db specified " + (opt.db !== null));
	try {
		if (opt.uuid) {
			if (Array.isArray(opt.uuid)) {
				var insts = [];
				opt.uuid.forEach_(_, function(_, item) {
					var filder = {
						"jsonWhere": {
							"$uuid": item
						}
					};
					ediEntityTracer.debug && ediEntityTracer.debug("filter " + JSON.stringify(filder));
					var ediSasInst = new EdiClass(_, opt && opt.db).getInstance(_, filder);
					ediEntityTracer.debug && ediEntityTracer.debug("instance exists " + (ediSasInst !== null));

					if (ediSasInst) {
						insts.push(ediSasInst);
					} else {
						throw new Error(locale.format(module, "findUuid", item));
					}
				});

				return insts.length === 0 ? null : insts;
			} else {
				var filder = {
					"jsonWhere": {
						"$uuid": opt.uuid
					}
				};
				ediEntityTracer.debug && ediEntityTracer.debug("filter " + JSON.stringify(filder));
				var ediSasInst = new EdiClass(_, opt && opt.db).getInstance(_, filder);
				ediEntityTracer.debug && ediEntityTracer.debug("instance exists " + (ediSasInst !== null));

				return ediSasInst;
			}
		} else if (opt.filter) {
			return new EdiClass(_, opt && opt.db).getInstance(_, opt.filter);
		}
	} catch (e) {
		// log exception
		ediEntityTracer.error && ediEntityTracer.error(" message " + e.message + " stack " + e.stack);

		throw e;
	} finally {
		ediEntityTracer.info && ediEntityTracer.info("_getEdiCacheEntity done on " + ((opt.uuid && JSON.stringify(opt.uuid)) || (opt.filter && JSON.stringify(opt.filter))));
	}

};

/// ## var json = getEdiCacheJson(_,opt) :
/// This function allow to get the json of an entity or  of several entity identified by a uuid
///     opt : json object that contains the element to get the entity. this can contains a uuid, a list of uuid or a sdatafilter
///     json : the javascript object with as a key the uuid of the entity object and as a value the json object store in mongodb. Can be a single object or an array of object
///
/// ```javascript
/// var opt = {
///    uuid : "uuid of the entity to get"
/// }
///
/// json =  {"uuid" : {...} }
/// ```
///
/// or
///
/// ```javascript
/// var opt = {
///    uuid : ["uuid1","uuid2","uuid3"]
/// }
///
/// json = [{"uuid1":{...} , {"uuid2":{...} }, {"uuid3": {...}}]
///
///
/// var opt = {
///     filter : {
///         jsonWhere :  {
///             "id" : "value id",
///             "type" : "value type "
///         }
///     }
/// }
/// ```
///
exports.getEdiCacheJson = function(_, opt) {
	ediEntityTracer.debug && ediEntityTracer.debug("getEdiCacheJson uuid = " + JSON.stringify(opt.uuid) + " custom db specified " + (opt.db != null));
	try {
		if (opt.uuid) {
			if (Array.isArray(opt.uuid)) {
				var jsons = [];
				opt.uuid.forEach_(_, function(_, item) {
					var ediSasInst = new EdiClass(_, opt && opt.db).getInstance(_, {
						"jsonWhere": {
							"$uuid": item
						}
					});
					if (ediSasInst) {
						var objItem = {};
						objItem[item] = ediSasInst.json(_);
						jsons.push(objItem);
					} else {
						throw new Error(locale.format(module, "findUuid", item));
					}
				});
				return jsons.length === 0 ? null : jsons;
			} else {
				var ediSasInst = new EdiClass(_, opt && opt.db).getInstance(_, {
					"jsonWhere": {
						"$uuid": opt.uuid
					}
				});
				return ediSasInst && ediSasInst.json(_);
			}
		} else if (opt.filter) {
			var ediSasInst = new EdiClass(_, opt && opt.db).getInstance(_, opt.filter);
			return ediSasInst && ediSasInst.json(_);
		}
		return null;
	} catch (e) {
		// log exception
		ediEntityTracer.error && ediEntityTracer.error(" message " + e.message + " stack " + e.stack);

		throw e;
	} finally {
		ediEntityTracer.debug && ediEntityTracer.debug("getEdiCacheJson done ");
	}
};

/// ## updateEdiCacheEntity(_,opt) :
/// This function allow to update the json of an entity or  of several entity identified by a uuid
///     opt : json object that contains the element to get the entity. this can contains a uuid, a list of uuid or a sdatafilter
///
/// raise an exception if on the update failed.
///
/// ```javascript
/// var opt = {
///    elems : [{uuid : "uuid of the entity to update", json: {..json object to set ..} }, {..}, .. ],
///
///
/// }
/// ```
///
exports.updateEdiCacheEntity = function(_, opt) {
	ediEntityTracer.debug && ediEntityTracer.debug("updateEdiCacheEntity elems = " + JSON.stringify(opt.elems) + " custom db specified " + (opt.db !== null));
	var instances;
	var changes = {};

	try {
		if (opt.elems) {
			// check if the elem exists for each uuid in mongodb
			opt.elems.forEach_(_, function(_, elem) {
				changes[elem.uuid] = elem.json;
			});
			instances = _getEdiCacheEntity(_, {
				uuid: Object.keys(changes),
				db: opt.db
			});
			if (!instances || instances.length !== Object.keys(changes).length) {
				ediEntityTracer.debug && ediEntityTracer.debug(" instance " + require('util').inspect(instances));
				ediEntityTracer.debug && ediEntityTracer.debug(" change " + JSON.stringify(Object.keys(changes)));

				throw new Error(locale.format(module, "findUuid", JSON.stringify(Object.keys(changes))));
			}
			instances.forEach_(_, function(_, instance) {
				instance.json(_, changes[instance.$uuid]);
				//instance.save(_);
			});
		}
	} catch (e) {
		// log exception
		ediEntityTracer.error && ediEntityTracer.error(" message " + e.message + " stack " + e.stack);

		throw e;
	} finally {
		instances && instances.forEach_(_, function(_, inst) {
			inst.save(_);
		});
		ediEntityTracer.info && ediEntityTracer.info("updateEdiCacheEntity done on " + Object.keys(changes));

	}
};

/// ## removeEdiCacheEntity(_,opt) :
/// This function allow to remove the json of an entity or  of several entity identified by a uuid
///     opt : json object that contains the element to get the entity. this can contains a uuid, a list of uuid or a sdatafilter
///
/// ```javascript
/// var opt = {
///    uuid : "uuid of the entity to get"
/// }
///
/// ```
///
/// or
///
/// ```javascript
/// var opt = {
///    uuid : ["uuid1","uuid2","uuid3"]
/// }
///
/// var opt = {
///     filter : {
///         jsonWhere :  {
///             "id" : "value id",
///             "type" : "value type "
///         }
///     }
/// }
///
/// ```
///
exports.removeEdiCacheEntity = function(_, opt) {
	ediEntityTracer.debug && ediEntityTracer.debug("removeEdiCacheEntity uuid = " + JSON.stringify(opt.uuid) + " custom db specified " + (opt.db !== null));
	try {
		if (opt.uuid) {
			var arr = opt.uuid;
			if (!Array.isArray(arr)) {
				arr = [arr];
			}
			arr.forEach_(_, function(_, item) {
				new EdiClass(_, opt && opt.db).deleteInstance(_, {
					"jsonWhere": {
						"$uuid": item
					}
				});
			});
		} else if (opt.filter) {
			new EdiClass(_, opt && opt.db).deleteInstance(_, opt.filter);
		}
	} catch (e) {
		// log exception
		ediEntityTracer.error && ediEntityTracer.error(" message " + e.message + " stack " + e.stack);

		throw e;
	} finally {
		ediEntityTracer.info && ediEntityTracer.info("removeEdiCacheEntity done on =" + JSON.stringify(opt.uuid));
	}
};