"use strict";
/* jshint -W079 */
/* jshint unused: false */
/* global QUnit: false, asyncTest: false, test: false, strictEqual: false, ok: false, start: false, stop: false */

/*global QUnit, start, ok*/
var syracuse = require('syracuse-main/lib/syracuse');
var helpers = require('syracuse-core/lib/helpers');
var streams = require("streamline/lib/streams/streams");
var sys = require("util");
var config = require('config'); // must be first syracuse require
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var parser = require("syracuse-edi/lib/parse/parser");
var serializer = require("syracuse-edi/lib/parse/serializer");

var fs = require("streamline-fs");
var upath = require('path');

var globals = require('streamline/lib/globals');
var _defDataDir = upath.join(__dirname, "../server/data/");

globals.context.session = {
	id: helpers.uuid.generate(),
	getUserLogin: function(_) {
		return "guest";
	},
	getUserProfile: function(_) {

		return {
			user: function(_) {
				// getting the administration ORM
				var db = adminHelper.getCollaborationOrm(_);

				// the metamodel is associated to the orm
				var model = db.model;

				var entity = db.model.getEntity(_, "user");
				// fetchInstance(callback, entity, filter)
				return db.fetchInstance(_, entity, {
					jsonWhere: {
						login: "guest"
					}
				});

			}
		};
	},
	getSecurityProfile: function(_) {
		return null;
	}
};
var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});

asyncTest("parser fixed size ", function(_) {
	var fileBuff = {};
	fileBuff["CABFAC"] = fs.readFile(_defDataDir + "ediFiles/CABFAC.txt", 'utf-8', _);
	fileBuff["LINFAC"] = fs.readFile(_defDataDir + "ediFiles/LINFAC.txt", 'utf-8', _);

	var seqFile = JSON.parse(fs.readFile(_defDataDir + "context/seqFile.json", 'utf-8', _));
	var prototype = JSON.parse(fs.readFile(_defDataDir + "context/BadProto.json", 'utf-8', _));

	var res = {};
	//parser.parseFixedSize( fileBuff, seqFile,prototype,res);


	var seqFile = JSON.parse(fs.readFile(_defDataDir + "context/seqFile.json", 'utf-8', _));
	var prototype = JSON.parse(fs.readFile(_defDataDir + "context/fakePrototype.json", 'utf-8', _));

	var res = {};
	parser.parseFixedSize(fileBuff, seqFile, prototype, res);
	start();
});
asyncTest("serialized fixed size ", function(_) {


	var json = {
		"ESIH1SID": [{
			"NUM": "FCC11014VEN00000014",
			"SIDLIN": 1000,
			"ITMREF": "CDROM",
			"ITMDES": "CD-ROM 16X",
			"SAU": "Un",
			"QTY": 3,
			"GROPRI": 1000000,
			"NETPRI": 1000000,
			"AMTLIN": 30000
		}, {
			"NUM": "FCC11014VEN00000012",
			"SIDLIN": 2000,
			"ITMREF": "CDROM1",
			"ITMDES": "CD-ROM1 16X",
			"SAU": "Un",
			"QTY": 2,
			"GROPRI": 1000000,
			"NETPRI": 1000000,
			"AMTLIN": 20000
		}],
		"NUM": "FCC11014VEN00000014",
		"BPR": "ESP0001",
		"CPY": "110",
		"FCY": "C110",
		"BPAPAY": "A01",
		"CUR": "EUR",
		"PTE": "CHEQ100COMPTANT",
		"AMTATI": 75880,
		"AMTNOT": 66000,
		"SIVTYP": "FAC",
		"ACCDAT": "24/02/2014"
	};
	var seqFile = JSON.parse(fs.readFile(_defDataDir + "context/seqFile.json", 'utf-8', _));
	var fileBuff = {};
	var prototype = JSON.parse(fs.readFile(_defDataDir + "context/fullPrototype.json", 'utf-8', _));

	fileBuff["CABFAC"] = fs.readFile(_defDataDir + "ediFiles/CABFAC.txt", 'utf-8', _);

	fileBuff["LINFAC"] = fs.readFile(_defDataDir + "ediFiles/LINFAC.txt", 'utf-8', _);

	var res = serializer.serializeFixedSize(json, seqFile, prototype);
	strictEqual(res !== null, true, "with correct json and good proto,  generate string for files ok ");

	strictEqual(res["CABFAC"], fileBuff["CABFAC"] + "  ", "with correct json and good proto,  generate cabfac ok") // space at the end are remove automatically on certains IDE;
	strictEqual(res["LINFAC"], fileBuff["LINFAC"], "with correct json and good proto,  generate cabfac ok") // space at the end are remove automatically on certains IDE;

	var json = {
		"ESIH1SID": [{
			"NUM": "FCC11014VEN00000014",
			"SIDLIN": 1000,
			"ITMREF": "CDROM",
			"ITMDES": "CD-ROM 16X",
			"SAU": "Un",
			"QTY": 3,
			"GROPRI": 1000000,
			"NETPRI": 1000000,
			"AMTLIN": 30000
		}, {
			"NUM": "FCC11014VEN00000012",
			"SIDLIN": 2000,
			"ITMREF": "CDROM1",
			"ITMDES": "CD-ROM1 16X",
			"SAU": "Un",
			"QTY": 2,
			"GROPRI": 1000000,
			"NETPRI": 1000000,
			"AMTLIN": 20000
		}],
		"NUM": "FCC11014VEN00000014",
		"BPR": "ESP0001",
		"CPY": "110",
		"FCY": "C110",
		"BPAPAY": "A01",
		"CUR": "EUR",
		"PTE": "CHEQ100COMPTANT",
		"AMTATI": 75880,
		"AMTNOT": 66000,
		"SIVTYP": "FAC",
		"ACCDAT": "24/02/2014"
	};
	var prototype = JSON.parse(fs.readFile(_defDataDir + "context/BadProto.json", 'utf-8', _));

	try {
		var res = serializer.serializeFixedSize(json, seqFile, prototype);
		ok(false, "can't serialize , some properties doesn't match prototype " + e.message);

	} catch (e) {
		ok(true, "can't serialize , some properties doesn't match prototype " + e.message);
	}

	prototype = JSON.parse(fs.readFile(_defDataDir + "context/fullPrototype.json", 'utf-8', _));
	json.NONEXISTPROP = "test";
	var res = serializer.serializeFixedSize(json, seqFile, prototype);
	strictEqual(res !== null, true, "with correct json and good proto,  generate string for files ok ");

	strictEqual(res["CABFAC"], fileBuff["CABFAC"] + "  ", "with non exists property json and good proto,  generate cabfac ok") // space at the end are remove automatically on certains IDE;
	strictEqual(res["LINFAC"], fileBuff["LINFAC"], "with non exists property json and good proto,  generate cabfac ok") // space at the end are remove automatically on certains IDE;


	start();


});


asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});