"use strict";

var config = require('config'); // must be first syracuse require
var helpers = require('@sage/syracuse-core').helpers;
var uuid = helpers.uuid;
var forEachKey = helpers.object.forEachKey;
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require('mongodb');
var sys = require("util");
var factory = require("syracuse-orm/lib/factory");
var jsonImport = require("syracuse-import/lib/jsonImport");
var jsonExport = require("syracuse-import/lib/jsonExport");
var datetime = require("@sage/syracuse-core").types.datetime;
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var fs = require("streamline-fs");
var _defDataDir = require("path").join(__dirname, "../server/data/");
var ez = require('ez-streams');
var EdiProcess = require("syracuse-edi/lib/edi_Process");
var EdiEntity = require("syracuse-edi/lib/edi_Entity");
var EdiType = require("syracuse-edi/lib/enumType").EdiType;
var ediSadUnitConfig = config.edi && config.edi.unit && config.edi.unit.sadfsq || {};
var protocolDirectory = require("syracuse-edi/lib/protocolHandler/directoryProtocol");
var SadFsqClient = require('syracuse-x3/lib/clients/sadfsq/sadfsqClient').SadFsqClient;
var sa = require("syracuse-orm/lib/storageArea");
var jsxml = require('js-xml');
var globals = require('streamline-runtime').globals;
var sqMap = require("syracuse-edi/lib/helpers").seqentialFilePropertyMap;


//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;

helpers.pageFileStorage = false;

var tracer; // = console.error;

//
var requestCount = 0;
var MAX_REQUESTS = 11;

var port = (config.unit_test && config.unit_test.serverPort) || 3004;
var baseUrl = "http://localhost:" + port;
var contractUrl = "/sdata/syracuse/collaboration/unit_test/";
var acceptLanguage = "fr,fr-fr";

var franceID = "";
var usID = "";
var printUuid = "";
var dbName = "unit_test";
var endpoint = adminTestFixtures.modifyCollaborationEndpoint(dbName);

var endpointTest;
var cookie = "";
var x3sId;
var applicationId;
var adminEp;


function getNewSadFsq(_, endpoint, recOptions) {
	return new SadFsqClient(_, endpoint, "apisu", "apisu", false, {}, recOptions);
}

function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "unit_test");
}

function get(_, cookie, url, statusCode, fullResponse) {
	return adminTestFixtures.get(_, cookie, url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/unit_test/" + url, statusCode, fullResponse);
}

function post(_, cookie, url, data, statusCode, fullResponse) {
	return adminTestFixtures.post(_, cookie, url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/unit_test/" + url, data, statusCode, fullResponse);
}

function put(_, cookie, url, data, statusCode, fullResponse) {
	return adminTestFixtures.put(_, cookie, url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/unit_test/" + url, data, statusCode, fullResponse);
}

function del(_, cookie, url, statusCode, fullResponse) {
	return adminTestFixtures.del(_, cookie, url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/unit_test/" + url, statusCode, fullResponse);
}
globals.context.session = {
	id: helpers.uuid.generate(),
	getUserLogin: function(_) {
		return "admin";
	},
	getUserProfile: function(_) {

		return {
			user: function(_) {
				// getting the administration ORM
				// var db = adminHelper.getCollaborationOrm(_);

				// the metamodel is associated to the orm
				var model = db.model;

				var entity = db.model.getEntity(_, "user");
				// fetchInstance(callback, entity, filter)
				return db.fetchInstance(_, entity, {
					jsonWhere: {
						login: "admin"
					}
				});

			}
		};
	},
	getSecurityProfile: function(_) {
		return null;
	},
	getData: function(key) {
		if (key === "userLogin") return "admin";
		return null;
	},
};
var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {}
});

function onlyInfo(diags) {
	return adminTestFixtures.onlyInfo(diags);
}

var db;
asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endpoint.datasets["unit_test"].hostname, endpoint.datasets["unit_test"].port, {});
	db = adminTestFixtures.newMongoDb(endpoint.datasets["unit_test"].database, server, {});
	db = db.open(_);
	db.dropDatabase(_);

	ok(true, "mongodb initialized");
	start();
});

//start syracuse server
asyncTest("initialize syracuse test server", 1, function(_) {
	require('syracuse-main/lib/syracuse').startServers(_, port);
	ok(true, "server initialized");
	start();
});

var prototype_EDISIH1;
var prototype_EDISIHEndFlag;
var baseUrl = "http://localhost:3004";
var db;
var prototype_EDISIH1SCOL;
var prototype_EDIS0H2;
var prototype_EDISIH1FACTURA;

function readFile(filepath, encoding, _) {
	var read = fs.readFile(_defDataDir + filepath, encoding, _);
	if (read.indexOf('\r') === -1) {
		read = read.replace(/\n/g, "\r\n");
	}
	return read;
}
var endpointTest;
globals.context = globals.context || {};
globals.context.session = {
	id: helpers.uuid.generate(),
	getUserLogin: function(_) {
		return "admin";
	},
	getUserProfile: function(_) {

		return {
			user: function(_) {
				// getting the administration ORM
				var db = adminHelper.getCollaborationOrm(_);

				// the metamodel is associated to the orm
				var model = db.model;

				var entity = db.model.getEntity(_, "user");
				// fetchInstance(callback, entity, filter)
				return db.fetchInstance(_, entity, {
					jsonWhere: {
						login: "admin"
					}
				});

			},
			selectedLocale: function(_) {
				return adminHelper.getCollaborationOrm(_).fetchInstance(_, db.model.getEntity(_, "localePreference"), {
					sdataWhere: "code eq 'en-us'"
				});
			}
		};
	},
	getSecurityProfile: function(_) {
		return null;
	},
	getData: function(code) {
		return null;
	}
};
QUnit.module(module.id, {});
var endpoint, db;
var prototype_EDISIH1;
var prototype_EDISIHEndFlag;
var port = (config.unit_test && config.unit_test.serverPort) || 3004;
var baseUrl = "http://localhost:" + port;

var prototype_EDISIH1SCOL;
var prototype_EDIS0H2;
var prototype_EDISIH1FACTURA;




function _initPrototypeCache(_, database) {
	EdiEntity.dropAllEdiCacheEntity(_, {
		db: database
	});
	EdiProcess.removeAllEdiProcess(_, {
		db: database
	});
}

asyncTest("start test environment ", function(_) {


	prototype_EDISIH1 = JSON.parse(readFile("context/EDISIH1_$details.json", 'utf-8', _));
	prototype_EDISIH1SCOL = JSON.parse(readFile("context/EDISIH1SCOL_$details.json", 'utf-8', _));
	prototype_EDIS0H2 = JSON.parse(readFile("context/EDISOH2_$details.json", 'utf-8', _));
	prototype_EDISIH1FACTURA = JSON.parse(readFile("context/EDISIH1FACTURA_$details.json", 'utf-8', _));
	prototype_EDISIHEndFlag = JSON.parse(readFile("context/EDISIHEndFlag.json", 'utf-8', _));

	start();

});

asyncTest("data setup", 1, function(_) {
	db = dataModel.getOrm(_, _getModel(), endpoint.datasets.unit_test);
	// import
	var diag = [];

	jsonImport.jsonImport(_, db, "syracuse-admin-demo.json", {
		$diagnoses: diag
	});
	ok(onlyInfo(diag), "Demo database import ok");

	start();
});

asyncTest("init test environment ", function(_) {
	function post(_, cookie, url, data, statusCode) {
		var response = ez.devices.http.client({
			method: "post",
			url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
			headers: {
				"content-type": "application/json",
				cookie: cookie
			}
		}).end(JSON.stringify(data)).response(_);
		var resp = JSON.parse(response.readAll(_));
		strictEqual(response.statusCode, statusCode || 201, "status verified");
		return resp;
	}

	// create GX3APP endpoint
	var body, appId;
	var cookie = adminTestFixtures.getCookie(_, baseUrl, "admin", "admin");
	var app = adminHelper.getApplication(_, "x3", "erp");
	if (app) {
		appId = app.$uuid;
	}

	// create x3 server
	body = post(_, cookie, "x3solutions", {
		code: "X3 stub server",
		description: "X3 stub server",
		solutionName: "X3DVLP",
		serverHost: "aws-x3-devx3",
		serverPort: 2050,
		proxy: false,
		application: {
			$uuid: appId
		},
		serverTimeout: 60000
	}, 201);
	var x3solutionId = body.$uuid;

	// create endpoint
	//tracer && tracer("x3 endpoint route creating ep");
	body = post(_, cookie, "endPoints", {
		description: "X3 gx3app",
		applicationRef: {
			$uuid: appId
		},
		dataset: "GX3APP",
		enableSearch: false,
		protocol: "x3",
		x3solution: {
			$uuid: x3solutionId
		},
		x3ServerFolder: "GX3APP"
	}, 201);
	endpointTest = adminHelper.getEndpoint(_, {
		application: "x3",
		contract: "erp",
		dataset: "GX3APP"
	});
	start();
});

var uuidJSonSOH;
asyncTest("API store json", function(_) {
	// test create instance
	_initPrototypeCache(_, db);
	var jsons2 = [{
		"json1": "test1"
	}];
	var uuids = EdiEntity.createEdiCacheEntity(_, {
		json: jsons2,
		type: "sas",
		id: "jsons2",
		db: db
	});
	strictEqual(uuids.length === 1, true, "create EdiCacheEntity with an array of 1 json " + JSON.stringify(uuids));

	var jsons1 = [{
		"json2": "test1"
	}, {
		"json4": "toto"
	}, {
		"json5": "tat"
	}];
	var uuids2 = EdiEntity.createEdiCacheEntity(_, {
		json: jsons1,
		type: "sas",
		id: "json1",
		db: db
	});
	strictEqual(uuids2.length === 3, true, "create EdiCacheEntity with an array of 3 json " + JSON.stringify(uuids2));
	// create the same entity --> must failed
	try {
		EdiEntity.createEdiCacheEntity(_, {
			json: jsons1,
			type: "sas",
			id: "json1",
			db: db
		});
		ok(false, "forbidden to create same entity failed ");
	} catch (e) {
		ok(true, "forbidden to create same entity failed ok");

	}

	var uuid = EdiEntity.createEdiCacheEntity(_, {
		json: {
			"json6": "test1"
		},
		type: "sas",
		id: "json6",
		db: db
	});
	strictEqual(uuids != null, true, "create EdiCacheEntity with an json object " + JSON.stringify(uuid));

	// test retrieve  instance
	try {
		var json1 = EdiEntity.getEdiCacheJson(_, {
			uuid: uuid,
			db: db
		});
		strictEqual(JSON.stringify(json1), '{"json6":"test1"}', "get EdiCacheEntity json from a uuid=[" + uuid + "] : " + JSON.stringify(json1));
	} catch (e) {
		ok(false, " get EdiCacheEntity json from a uuid " + e.stack);
	}

	// test with filter
	try {
		var jsonFilter = EdiEntity.getEdiCacheJson(_, {
			filter: {
				jsonWhere: {
					id: "json6",
					type: "sas"
				}
			},
			db: db
		});
		strictEqual(JSON.stringify(jsonFilter), '{"json6":"test1"}', "get EdiCacheEntity with filter json from a uuid=[" + uuid + "] : " + JSON.stringify(jsonFilter));
	} catch (e) {
		ok(false, " get EdiCacheEntity json from a uuid " + e.stack);
	}

	try {
		json1 = EdiEntity.getEdiCacheJson(_, {
			uuid: uuids2,
			db: db
		});
		strictEqual(json1.length === jsons1.length, true, "get EdiCacheEntity json from a uuid=[" + JSON.stringify(uuids2) + "]");
		for (var i = 0; i < json1.length; i++) {
			strictEqual(JSON.stringify(json1[i][uuids2[i]]), JSON.stringify(jsons1[i]), "get EdiCacheEntity json from a uuid=[" + JSON.stringify(json1[i]) + "]");
		}
	} catch (e) {
		ok(false, " get EdiCacheEntity json from a uuid " + e.stack);
	}

	try {
		json1 = EdiEntity.getEdiCacheJson(_, {
			uuid: uuids,
			db: db
		});
		strictEqual(json1.length === jsons2.length, true, "get EdiCacheEntity json from a uuid=[" + JSON.stringify(uuids) + "]");
		for (var i = 0; i < json1.length; i++) {
			strictEqual(JSON.stringify(json1[i][uuids[i]]), JSON.stringify(jsons2[i]), "get EdiCacheEntity json from a uuid=[" + JSON.stringify(json1[i]) + "]");
		}
	} catch (e) {
		ok(false, " get EdiCacheEntity json from a uuid " + e.stack);
	}

	// test delete instance
	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuid,
		db: db
	});
	strictEqual(EdiEntity.getEdiCacheJson(_, {
		uuid: uuid,
		db: db
	}) === null, true, "remove EdiCacheEntity json from a uuid=[" + uuid + "] ok ");

	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuids2,
		db: db
	});
	try {
		EdiEntity.getEdiCacheJson(_, {
			uuid: uuids2,
			db: db
		});
		ok(false, "remove EdiCacheEntity json from a uuid=[" + JSON.stringify(uuids2) + "] ok ");
	} catch (e) {
		ok(true, "remove EdiCacheEntity json from a uuid=[" + JSON.stringify(uuids2) + "] ok ");

	}
	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuids,
		db: db
	});
	strictEqual(EdiEntity.getEdiCacheJson(_, {
		uuid: uuids[0],
		db: db
	}) === null, true, "remove EdiCacheEntity json from a uuid=[" + JSON.stringify(uuids) + "] ok ");

	// test get non exists data
	strictEqual(EdiEntity.getEdiCacheJson(_, {
		uuid: "test uuid dummy",
		db: db
	}) === null, true, "get EdiCacheEntity json from a uuid=[test uuid dummy] ok ");

	// test remove non exists data
	EdiEntity.removeEdiCacheEntity(_, {
		uuid: "test uuid dummy",
		db: db
	});

	// create a instance with a bad data
	try {
		uuids = EdiEntity.createEdiCacheEntity(_, {
			json: "test with bad data",
			type: "sas",
			id: "testDummy",
			db: db
		});
		ok(false, "test create edi instance with bad json data passe in a string ");
		EdiEntity.removeEdiCacheEntity(_, {
			uuid: uuids,
			db: db
		});

	} catch (e) {
		ok(true, "test create edi instance with bad json data passe in a string ");
	}


	// test create multiple instance
	uuids = EdiEntity.createEdiCacheEntity(_, {
		json: [{}, {
			"id": "test2"
		}, {
			"id": "test3"
		}],
		type: "sas",
		id: "testdummyArray",
		db: db
	});
	ok(uuids.length, 3, "test create edi instance with 3 json data ");
	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuids,
		db: db
	});

	try {
		uuids = EdiEntity.createEdiCacheEntity(_, {
			json: ["test with bad data", {
				"id": "test2"
			}, {
				"id": "test3"
			}],
			type: "sas",
			id: "testdummyArray",
			db: db
		});
		ok(false, "test create edi instance with bad json data passed in a string ");
		EdiEntity.removeEdiCacheEntity(_, {
			uuid: uuids,
			db: db
		});

	} catch (e) {
		ok(true, "test create edi instance with bad json data passe in an array ");
	}

	// test with etag like seqFile
	var uuidsSeqFile = EdiEntity.createEdiCacheEntity(_, {
		json: {
			test: "testSeqFile",
			test2: {
				test2: "testSeqFile2"
			}
		},
		type: "seqFile",
		etag: "AAAA",
		id: "testSeqFile",
		db: db
	});
	strictEqual(uuidsSeqFile != null, true, "create EdiCacheEntity seqFile  " + JSON.stringify(uuidsSeqFile));

	var seqFile = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuidsSeqFile,
		db: db
	});
	strictEqual(seqFile != null, true, "get EdiCacheEntity  from a uuid=[" + JSON.stringify(uuidsSeqFile) + "] ok ");
	strictEqual(seqFile.etag(_), "AAAA", " get EdiCacheEntity check etag ok");
	strictEqual(seqFile.id(_), "testSeqFile", " get EdiCacheEntity check id ok");
	strictEqual(seqFile.type(_), "seqFile", " get EdiCacheEntity check type ok");
	strictEqual(JSON.stringify(seqFile.json(_)), '{\"test\":\"testSeqFile\",\"test2\":{\"test2\":\"testSeqFile2\"}}', " get EdiCacheEntity check json ok");

	// test with filter
	var seqFile = EdiEntity.getEdiCacheEntity(_, {
		filter: {
			id: "testSeqFile",
			type: "seqFile"
		},
		db: db
	});
	strictEqual(seqFile != null, true, "get EdiCacheEntity  with filter from a uuid=[" + JSON.stringify(uuidsSeqFile) + "] ok ");
	strictEqual(seqFile.etag(_), "AAAA", " get EdiCacheEntity   with filter check etag ok");
	strictEqual(seqFile.id(_), "testSeqFile", " get EdiCacheEntity   with filter check id ok");
	strictEqual(seqFile.type(_), "seqFile", " get EdiCacheEntity   with filter check type ok");
	strictEqual(JSON.stringify(seqFile.json(_)), '{\"test\":\"testSeqFile\",\"test2\":{\"test2\":\"testSeqFile2\"}}', " get EdiCacheEntity  with filter check json ok");


	var uuidsSeqFile = EdiEntity.createEdiCacheEntity(_, {
		json: {
			test: "testSeqFile",
			test2: {
				test2: "testSeqFile2"
			}
		},
		type: "seqFile",
		etag: "AAAA",
		id: "testSeqFile2",
		db: db
	});

	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuidsSeqFile,
		db: db
	});

	var seqFile = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuidsSeqFile,
		db: db
	});
	strictEqual(seqFile == null, true, "drop all  EdiCacheEntity  ok ");

	// test get list of entity
	var uuidsMul = [];
	uuidsMul.push(EdiEntity.createEdiCacheEntity(_, {
		json: {},
		type: "test1",
		etag: "AAAA",
		id: "test1",
		db: db
	}));
	uuidsMul.push(EdiEntity.createEdiCacheEntity(_, {
		json: {},
		type: "test2",
		etag: "AAAA",
		id: "test2",
		db: db
	}));
	strictEqual(uuidsMul && uuidsMul.length === 2, true, "create 2 entity ");
	var test = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuidsMul,
		db: db
	});
	strictEqual(test && test.length == 2, true, "get multiple entity ok");

	// get multi with one non exists uuid
	uuidsMul.push("uuid-dummy");
	try {
		var test = EdiEntity.getEdiCacheEntity(_, {
			uuid: uuidsMul,
			db: db
		});
		ok(false, "get multiple entity with bad uuid ok");

	} catch (e) {
		ok(true, "get multiple entity with bad uuid ok");
	}


	start();
});
// t
asyncTest("test retrieve cache from a process ", function(_) {
	_initPrototypeCache(_, db);

	var uuid = [];

	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: {
			"messageMapping": {}
		},
		type: EdiType.MESSAGEMAPPING,
		id: "test",
		etag: "etagDummy",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: {
			"seqFile": {}
		},
		type: EdiType.SEQFILE,
		id: "test",
		etag: "etagDummy",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: {
			"protocol": {}
		},
		type: EdiType.PROTOCOL,
		id: "test",
		etag: "etagDummy",
		db: db
	}));

	strictEqual(uuid.length == 3, true, "create cache entity ok");
	var ediProcess = EdiProcess.createEdiProcess(_, {
		idProcess: "idProcessTest",
		messageMapping: uuid[0],
		sequentialFile: uuid[1],
		protocol: uuid[2],
		repName: "testClass",
		db: db
	});

	strictEqual(ediProcess != null, true, " ediProcess created ");

	strictEqual(JSON.stringify(ediProcess.sequentialFile(_)), "{\"seqFile\":{}}", " retrieve seqFile  ok  created ");
	strictEqual(JSON.stringify(ediProcess.messageMapping(_)), "{\"messageMapping\":{}}", " retrieve messageMapping ok  created ");
	strictEqual(JSON.stringify(ediProcess.protocol(_)), "{\"protocol\":{}}", " retrieve protocol ok  created ");


	//delete all entity
	EdiProcess.removeEdiProcess(_, {
		idProcess: "idProcessTest",
		db: db
	});
	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuid,
		db: db
	});

	start();
});
asyncTest("cache process id context identifier", function(_) {
	_initPrototypeCache(_, db);

	// store in mongodb all needed to perform the test
	var seqFileJson = JSON.parse(readFile("context/seqFileSIH.json", 'utf-8', _));
	// var messageMappingJson = readFile("context/messageMapping.json", 'utf-8', _);
	var protocolJson = JSON.parse(readFile("context/protocol.json", 'utf-8', _));

	var uuids = [];
	uuids.push(EdiEntity.createEdiCacheEntity(_, {
		json: seqFileJson,
		type: EdiType.SEQFILE,
		id: "sf",
		etag: "etagDummy",
		db: db
	}));

	uuids.push(EdiEntity.createEdiCacheEntity(_, {
		json: protocolJson,
		type: EdiType.PROTOCOL,
		id: "protocol",
		etag: "etagDummy",
		db: db
	}));
	var cache = EdiProcess.createEdiProcess(_, {
		idProcess: "idProcessEdi1",
		messageMapping: "mm",
		sequentialFile: uuids[0],
		protocol: uuids[1],
		repName: "testClass",
		folder: "GX3APP",
		db: db
	});

	strictEqual(cache !== null, true, "create EdiProcess ok");

	strictEqual(cache.idProcess(_), "idProcessEdi1", "create EdiProcess  idProcess ok ");
	strictEqual(cache.idMessageMapping(_), "mm", "create EdiProcess  messageMapping ok ");
	strictEqual(cache.idSequentialFile(_) !== null, true, "create EdiProcess  sequentialFile ok , uuid seqFile " + cache.idSequentialFile(_));
	strictEqual(cache.idProtocol(_) !== null, true, "create EdiProcess  protocol ok uuid protocol " + cache.idProtocol(_));
	strictEqual(cache.folder(_), "GX3APP", "create EdiProcess  folder ok ");
	strictEqual(cache.endPoint(_) != null, true, "create EdiProcess :needs endPoint GX3APP in syracuse database ok ");

	cache = EdiProcess.getEdiProcess(_, {
		idProcess: "idProcessEdi1",
		db: db
	});
	strictEqual(cache != null, true, "get EdiProcess ok");

	strictEqual(cache.idProcess(_), "idProcessEdi1", "get EdiProcess  idProcess ok ");
	strictEqual(cache.idSequentialFile(_) !== null, true, "create EdiProcess  sequentialFile ok , uuid seqFile " + cache.idSequentialFile(_));
	strictEqual(cache.idProtocol(_) !== null, true, "create EdiProcess  protocol ok uuid protocol " + cache.idProtocol(_));

	cache = EdiProcess.removeEdiProcess(_, {
		idProcess: "idProcessEdi1",
		db: db
	});

	cache = EdiProcess.getEdiProcess(_, {
		idProcess: "idProcessEdi1",
		db: db
	});
	strictEqual(cache === null, true, "get EdiProcess ok");

	start();
});

asyncTest("read receipt file", function(_) {
	_initPrototypeCache(_, db);

	var recOptions = {
		recMode: ediSadUnitConfig.online ? "REC" : "PLAY",
		fileName: "read_receipt1.json",
		path: "node_modules/syracuse-edi/test/server/data/sadrec"
	};
	if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file

	// store in mongodb all needed to perform the test
	var seqFileJson = JSON.parse(readFile("context/seqFileSIH.json", 'utf-8', _));
	// var messageMappingJson = readFile("context/messageMapping.json", 'utf-8', _);
	var protocolJson = JSON.parse(readFile("context/protocol.json", 'utf-8', _));

	var opt = {
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		}
	};
	var buffList = protocolDirectory.getReceiptFiles(_, protocolJson, seqFileJson, sqMap, null, opt); // for unit test
	strictEqual(Object.keys(buffList).length === 5, true, " list file to read (nbreaded=[" + JSON.stringify(Object.keys(buffList)) + "] ok");
	strictEqual(typeof buffList[Object.keys(buffList)[0]], "string", "all buffer has be decoded in string ok");

	recOptions.fileName = "moveEnd.json";
	var sadfs = getNewSadFsq(_, endpointTest, recOptions);

	// firstaval, remove all archive directory
	// remove files in archive folder to unit test
	sadfs.rmdir(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/EDIARC/"
	}, {
		flag: "r",
		encoding: "utf-8"
	});

	// create a test file
	var write = sadfs.writeFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/RECEIPT/testMoveEnd.txt"
	}, "test", {
		flag: "w",
		encoding: "utf-8"
	});
	strictEqual(true, sadfs.exists(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/RECEIPT/testMoveEnd.txt"
	}), " file create ok ");

	recOptions.fileName = "moveArchive.json";

	protocolDirectory.mvReceiptArchiveFiles(_, protocolJson, {
		"testMoveEnd.txt": ""
	}, null, opt); // for unit test
	// check existance of test file
	recOptions.fileName = "moveEndExists.json";
	var sadfs = getNewSadFsq(_, endpointTest, recOptions);

	strictEqual(false, sadfs.exists(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/RECEIPT/testMoveEnd.txt"
	}), " file doesn't exists ok ");
	start();
});

asyncTest("write issue file", function(_) {
	_initPrototypeCache(_, db);

	var recOptions = {
		recMode: ediSadUnitConfig.online ? "REC" : "PLAY",
		fileName: "write_issue1.json",
		path: "node_modules/syracuse-edi/test/server/data/sadrec"
	};
	if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file

	// store in mongodb all needed to perform the test
	// var messageMappingJson = readFile("context/messageMapping.json", 'utf-8', _);
	var protocolJson = JSON.parse(readFile("context/protocol.json", 'utf-8', _));
	var output = {
		"test.txt": {
			content: "string to write "
		}
	};
	var opt = {
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		encoding: "utf8",
		unittest: true

	};


	protocolDirectory.writeIssueFiles(_, protocolJson, null, null, output, opt); // for unit test
	recOptions.fileName = "write_check.json";
	var sadfs = getNewSadFsq(_, endpointTest, recOptions);

	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/test.txt"
	}, {
		flag: "r",
		encoding: "utf-8"
	});
	strictEqual(read != null, true, " write issue file ok  ");
	strictEqual(read, output["test.txt"].content, " check content of written file ok ");

	sadfs.unlink(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/test.txt"
	});
	try {
		recOptions.fileName = "write_checkunlink.json";

		var sadfs = getNewSadFsq(_, endpoint, recOptions);

		var read = sadfs.readFile(_, {
			path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/test.txt"
		}, {
			flag: "r",
			encoding: "utf-8"
		});
		ok(false, "unlink file ok " + read);

	} catch (e) {
		ok(true, "unlink file ok");
	}

	start();
});

asyncTest("decode file API", function(_) {
	_initPrototypeCache(_, db);

	var recOptions = {
		recMode: ediSadUnitConfig.online ? "REC" : "PLAY",
		fileName: "decodeFile1.json",
		path: "node_modules/syracuse-edi/test/server/data/sadrec"
	};
	if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file

	// store in mongodb all needed to perform the test
	var seqFileJson = JSON.parse(readFile("context/seqFileSIH.json", 'utf-8', _));
	// var messageMappingJson = readFile("context/messageMapping.json", 'utf-8', _);
	var protocolJson = JSON.parse(readFile("context/protocol.json", 'utf-8', _));
	var uuid = [];
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: seqFileJson,
		type: EdiType.SEQFILE,
		id: "test",
		etag: "etagDummy",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: {},
		type: EdiType.MESSAGEMAPPING,
		id: "test",
		etag: "etagDummy",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: protocolJson,
		type: EdiType.PROTOCOL,
		id: "test",
		etag: "etagDummy",
		db: db
	}));

	var option = {
		messageMapping: uuid[1],
		sequentialFile: uuid[0],
		protocol: uuid[2],
		prototype: prototype_EDISIH1,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		repName: "EDISIH1",
		folder: "GX3APP",
		db: db,
		unittest: true
			//moveEnd : true

	};
	var uuidList = EdiProcess.decodeEdiFiles(_, "idProcess", option);

	strictEqual(uuidList != null, true, "decoded file ok and return a uuid = " + JSON.stringify(uuidList));
	// check if the json generate exists
	uuidList.forEach_(_, function(_, item) {
		var entityGen = EdiEntity.getEdiCacheEntity(_, {
			uuid: item.uuid,
			db: db
		});
		strictEqual(entityGen != null, true, "json generate exists in syracuse mongodb database identify by uuid = " + item.uuid);

		strictEqual(JSON.stringify(entityGen.json(_)), '{"NUM":"FCC11014VEN00000014","BPR":"ESP0001","CPY":"110","FCY":"C110","BPAPAY":"A01","CUR":"EUR","PTE":"CHEQ100COMPTANT","AMTATI":75880,"AMTNOT":66000,"SIVTYP":"FAC","ACCDAT":"2014-02-24","ESIH1SID":[{"NUM":"FCC11014VEN00000014","SIDLIN":1000,"ITMREF":"CDROM","ITMDES":"CD-ROM 16X","SAU":"Un","QTY":3,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":30000},{"NUM":"FCC11014VEN00000014","SIDLIN":2000,"ITMREF":"CDROM1","ITMDES":"CD-ROM1 16X","SAU":"Un","QTY":2,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":20000},{"NUM":"FCC11014VEN00000014","SIDLIN":1000,"ITMREF":"CDROM","ITMDES":"CD-ROM 16X","SAU":"Un","QTY":3,"GROPRI":1000000},{"NUM":"FCC11014VEN00000014","SIDLIN":2000,"ITMREF":"CDROM1","ITMDES":"CD-ROM1 16X","SAU":"Un","QTY":2,"GROPRI":1000000},{"NUM":"FCC11014VEN00000014","SIDLIN":1000,"ITMREF":"CDROM","ITMDES":"CD-ROM 16X","SAU":"Un","QTY":3,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":30000},{"NUM":"FCC11014VEN00000014","SIDLIN":2000,"ITMREF":"CDROM1","ITMDES":"CD-ROM1 16X","SAU":"Un","QTY":2,"GROPRI":1000000}]}', "json generate from files ok");

	});
	var option = {
		messageMapping: uuid[1],
		sequentialFile: uuid[0],
		protocol: uuid[2],
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		prototype: prototype_EDISIH1,
		repName: "EDISIH1",
		folder: "GX3APP",
		db: db,
		unittest: true


	};
	var uuidList = EdiProcess.decodeEdiFiles(_, "idProcessSad", option);


	strictEqual(uuidList != null, true, "decoded file ok and return a uuid = " + JSON.stringify(uuidList));
	// check if the json generate exists
	uuidList.forEach_(_, function(_, item) {
		var entityGen = EdiEntity.getEdiCacheEntity(_, {
			uuid: item.uuid,
			db: db
		});
		strictEqual(entityGen != null, true, "json generate exists in syracuse mongodb database identify by uuid = " + item.uuid);
		strictEqual(JSON.stringify(entityGen.json(_)), '{"NUM":"FCC11014VEN00000014","BPR":"ESP0001","CPY":"110","FCY":"C110","BPAPAY":"A01","CUR":"EUR","PTE":"CHEQ100COMPTANT","AMTATI":75880,"AMTNOT":66000,"SIVTYP":"FAC","ACCDAT":"2014-02-24","ESIH1SID":[{"NUM":"FCC11014VEN00000014","SIDLIN":1000,"ITMREF":"CDROM","ITMDES":"CD-ROM 16X","SAU":"Un","QTY":3,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":30000},{"NUM":"FCC11014VEN00000014","SIDLIN":2000,"ITMREF":"CDROM1","ITMDES":"CD-ROM1 16X","SAU":"Un","QTY":2,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":20000},{"NUM":"FCC11014VEN00000014","SIDLIN":1000,"ITMREF":"CDROM","ITMDES":"CD-ROM 16X","SAU":"Un","QTY":3,"GROPRI":1000000},{"NUM":"FCC11014VEN00000014","SIDLIN":2000,"ITMREF":"CDROM1","ITMDES":"CD-ROM1 16X","SAU":"Un","QTY":2,"GROPRI":1000000},{"NUM":"FCC11014VEN00000014","SIDLIN":1000,"ITMREF":"CDROM","ITMDES":"CD-ROM 16X","SAU":"Un","QTY":3,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":30000},{"NUM":"FCC11014VEN00000014","SIDLIN":2000,"ITMREF":"CDROM1","ITMDES":"CD-ROM1 16X","SAU":"Un","QTY":2,"GROPRI":1000000}]}', "json generate from files ok");

	});

	// decode file wihtout cache
	var option = {
		messageMapping: {},
		sequentialFile: seqFileJson,
		protocol: protocolJson,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		prototype: prototype_EDISIH1,
		repName: "EDISIH1",
		folder: "GX3APP",
		db: db,
		unittest: true


	};
	var uuidList = EdiProcess.decodeEdiFiles(_, "idProcessWithoutCache", option);

	strictEqual(uuidList != null, true, "decoded file without cache ok and return a uuid = " + JSON.stringify(uuidList));
	// check if the json generate exists
	uuidList.forEach_(_, function(_, item) {
		var entityGen = EdiEntity.getEdiCacheEntity(_, {
			uuid: item.uuid,
			db: db
		});
		strictEqual(entityGen != null, true, "json generate without cache exists in syracuse mongodb database identify by uuid = " + item.uuid);

		strictEqual(JSON.stringify(entityGen.json(_)), '{"NUM":"FCC11014VEN00000014","BPR":"ESP0001","CPY":"110","FCY":"C110","BPAPAY":"A01","CUR":"EUR","PTE":"CHEQ100COMPTANT","AMTATI":75880,"AMTNOT":66000,"SIVTYP":"FAC","ACCDAT":"2014-02-24","ESIH1SID":[{"NUM":"FCC11014VEN00000014","SIDLIN":1000,"ITMREF":"CDROM","ITMDES":"CD-ROM 16X","SAU":"Un","QTY":3,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":30000},{"NUM":"FCC11014VEN00000014","SIDLIN":2000,"ITMREF":"CDROM1","ITMDES":"CD-ROM1 16X","SAU":"Un","QTY":2,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":20000},{"NUM":"FCC11014VEN00000014","SIDLIN":1000,"ITMREF":"CDROM","ITMDES":"CD-ROM 16X","SAU":"Un","QTY":3,"GROPRI":1000000},{"NUM":"FCC11014VEN00000014","SIDLIN":2000,"ITMREF":"CDROM1","ITMDES":"CD-ROM1 16X","SAU":"Un","QTY":2,"GROPRI":1000000},{"NUM":"FCC11014VEN00000014","SIDLIN":1000,"ITMREF":"CDROM","ITMDES":"CD-ROM 16X","SAU":"Un","QTY":3,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":30000},{"NUM":"FCC11014VEN00000014","SIDLIN":2000,"ITMREF":"CDROM1","ITMDES":"CD-ROM1 16X","SAU":"Un","QTY":2,"GROPRI":1000000}]}', "json generate without cache from files ok");


	});


	// case entity that doesn't exists
	option.repName = "NOTEXISTCLASS";
	option.prototype = {};
	try {
		var uuid = EdiProcess.decodeEdiFiles(_, "idProcessNonExist", option);
		ok(false, "decoded file with non exists file ok ");
	} catch (e) {
		ok(true, "decoded file with non exists file ok ");
	}

	// case entity that doesn't exists
	option.repName = "EDISIH1";
	option.prototype = prototype_EDISIH1;
	option.sequentialFile = {};
	try {
		var uuid = EdiProcess.decodeEdiFiles(_, "idProcessBadSeqFile", option);
		ok(false, "decoded file without correct sequentielFile  ok ");
	} catch (e) {
		ok(true, "decoded file without correct sequentielFile  ok ");
	}

	var option = {
		messageMapping: {},
		sequentialFile: seqFileJson,
		protocol: protocolJson,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		prototype: prototype_EDISIH1,
		repName: "EDISIH1",
		db: db,
		unittest: true

	};

	var uuid = EdiProcess.decodeEdiFiles(_, "idProcessNoCustomFolder", option);
	strictEqual(uuidList != null, true, "decoded file without cache ok and return a uuid = " + JSON.stringify(uuidList));
	// check if the json generate exists
	uuidList.forEach_(_, function(_, item) {
		var entityGen = EdiEntity.getEdiCacheEntity(_, {
			uuid: item.uuid,
			db: db
		});
		strictEqual(entityGen != null, true, "json generate without cache exists in syracuse mongodb database identify by uuid = " + item.uuid);

		strictEqual(JSON.stringify(entityGen.json(_)), '{"NUM":"FCC11014VEN00000014","BPR":"ESP0001","CPY":"110","FCY":"C110","BPAPAY":"A01","CUR":"EUR","PTE":"CHEQ100COMPTANT","AMTATI":75880,"AMTNOT":66000,"SIVTYP":"FAC","ACCDAT":"2014-02-24","ESIH1SID":[{"NUM":"FCC11014VEN00000014","SIDLIN":1000,"ITMREF":"CDROM","ITMDES":"CD-ROM 16X","SAU":"Un","QTY":3,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":30000},{"NUM":"FCC11014VEN00000014","SIDLIN":2000,"ITMREF":"CDROM1","ITMDES":"CD-ROM1 16X","SAU":"Un","QTY":2,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":20000},{"NUM":"FCC11014VEN00000014","SIDLIN":1000,"ITMREF":"CDROM","ITMDES":"CD-ROM 16X","SAU":"Un","QTY":3,"GROPRI":1000000},{"NUM":"FCC11014VEN00000014","SIDLIN":2000,"ITMREF":"CDROM1","ITMDES":"CD-ROM1 16X","SAU":"Un","QTY":2,"GROPRI":1000000},{"NUM":"FCC11014VEN00000014","SIDLIN":1000,"ITMREF":"CDROM","ITMDES":"CD-ROM 16X","SAU":"Un","QTY":3,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":30000},{"NUM":"FCC11014VEN00000014","SIDLIN":2000,"ITMREF":"CDROM1","ITMDES":"CD-ROM1 16X","SAU":"Un","QTY":2,"GROPRI":1000000}]}', "json generate without cache from files ok");
	});


	start();
});

asyncTest("generate EDI file API", function(_) {
	_initPrototypeCache(_, db);

	var recOptions = {
		recMode: ediSadUnitConfig.online ? "REC" : "PLAY",
		fileName: "generateFile1.json",
		path: "node_modules/syracuse-edi/test/server/data/sadrec"
	};
	if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file

	// store in mongodb all needed to perform the test
	var seqFileJson = JSON.parse(readFile("context/seqFileSIH.json", 'utf-8', _));

	var protocolJson = JSON.parse(readFile("context/protocol.json", 'utf-8', _));

	var jsonSIH = {
		"ESIH1SID": [{
			"NUM": "FCC11014VEN00000014",
			"SIDLIN": 1000,
			"ITMREF": "CDROM",
			"ITMDES": "CD-ROM 16X",
			"SAU": "Un",
			"QTY": 3,
			"GROPRI": 1000000,
			"NETPRI": 1000000,
			"AMTLIN": 30000
		}, {
			"NUM": "FCC11014VEN00000014",
			"SIDLIN": 2000,
			"ITMREF": "CDROM1",
			"ITMDES": "CD-ROM1 16X",
			"SAU": "Un",
			"QTY": 2,
			"GROPRI": 1000000,
			"NETPRI": 1000000,
			"AMTLIN": 20000
		}],
		"NUM": "FCC11014VEN00000014",
		"BPR": "ESP0001",
		"CPY": "110",
		"FCY": "C110",
		"BPAPAY": "A01",
		"CUR": "EUR",
		"PTE": "CHEQ100COMPTANT",
		"AMTATI": 75880,
		"AMTNOT": 66000,
		"SIVTYP": "FAC",
		"ACCDAT": "2014-02-24"
	};
	var fileBuff = {};
	fileBuff["CABFAC"] = readFile("ediFiles/CABFAC", 'utf-8', _);
	fileBuff["LINFAC"] = readFile("ediFiles/LINFAC", 'utf-8', _);
	var uuidjson = EdiEntity.createEdiCacheEntity(_, {
		json: jsonSIH,
		id: "sas",
		etag: "etagDummy",
		db: db
	});
	var uuid = [];
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: {},
		type: EdiType.MESSAGEMAPPING,
		id: "test",
		etag: "etagDummy",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: seqFileJson,
		type: EdiType.SEQFILE,
		id: "test",
		etag: "etagDummy",
		db: db
	}));

	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: protocolJson,
		type: EdiType.PROTOCOL,
		id: "test",
		etag: "etagDummy",
		db: db
	}));

	// test edi file without valid option
	var option = {
		protocol: uuid[2],
		prototype: prototype_EDISIH1,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		repName: "EDISIH1",
		folder: "GX3APP",
		fileNames: {
			C: "CABFAC",
			L: "LINFAC"
		},
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		db: db,
		unittest: true

	};
	try {
		var result = EdiProcess.generateEdiFiles(_, "idProcess", option);
	} catch (e) {
		ok(true, "not valid option uuiid, sequentialFile and messageMapping not present ");
	}
	var option = {
		messageMapping: uuid[0],
		sequentialFile: uuid[1],
		protocol: uuid[2],
		prototype: prototype_EDISIH1,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		repName: "EDISIH1",
		folder: "GX3APP",
		fileNames: {
			C: "CABFAC",
			L: "LINFAC"
		},
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		db: db,
	};
	try {
		var result = EdiProcess.generateEdiFiles(_, "idProcess", option);
	} catch (e) {
		ok(true, "not valid option uuid not present ");
	}

	var option = {
		messageMapping: uuid[0],
		sequentialFile: uuid[1],
		protocol: uuid[2],
		flow: "test dummy",
		prototype: prototype_EDISIH1,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		repName: "EDISIH1",
		folder: "GX3APP",
		fileNames: {
			C: "CABFAC1",
			L: "LINFAC1"
		},
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		uuid: [uuidjson],
		db: db,
		unittest: true

	};
	var result = EdiProcess.generateEdiFiles(_, "idProcess", option);

	strictEqual(result.length, 1, "result length ok ");
	strictEqual(result[0].fileNames && result[0].fileNames.length, 2, "result fileNames ok ");
	strictEqual(result[0].uuid, uuidjson, "result uuid ok ");
	strictEqual(result[0].purgeCache, true, "result purge Cache  ok ");

	// check if the file generate exists and is ok
	var endpoint = endpointTest;
	recOptions.fileName = "checkGenerateEdi1.json";
	var sadfs = getNewSadFsq(_, endpointTest, recOptions);
	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/CABFAC1"
	}, {
		flag: "r",
		encoding: "utf-8"
	});


	fileBuff["CABFAC1"] = readFile("ediFiles/CABFAC1", 'utf-8', _);
	fileBuff["LINFAC1"] = readFile("ediFiles/LINFAC1", 'utf-8', _);
	strictEqual(read, fileBuff["CABFAC1"], "file  CABFAC generate ok");

	read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/LINFAC1"
	}, {
		flag: "r",
		encoding: "utf-8"
	});


	strictEqual(read, fileBuff["LINFAC1"], "file LINFAC generate ok");

	var uuidjson = EdiEntity.createEdiCacheEntity(_, {
		json: jsonSIH,
		id: "sas",
		etag: "etagDummy",
		db: db
	});
	var option = {
		messageMapping: {},
		sequentialFile: seqFileJson,
		protocol: protocolJson,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		prototype: prototype_EDISIH1,
		repName: "EDISIH1",
		folder: "GX3APP",
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		uuid: [uuidjson],
		fileNames: {
			C: "CABFAC",
			L: "LINFAC"
		},
		keepCache: true,
		db: db,
		unittest: true

	};
	recOptions.fileName = "generateEdiJsonCache.json";

	result = EdiProcess.generateEdiFiles(_, "idProcessJsonCache", option);
	strictEqual(result.length, 1, "result length ok ");

	strictEqual(result[0].fileNames.length, 2, "result fileNames ok ");
	strictEqual(result[0].uuid, uuidjson, "result uuid ok ");
	strictEqual(!result[0].purgeCache, true, "result purge Cache false ok ");



	// cehck with context passed in paraemeter instead of using the cache
	var option = {
		messageMapping: {},
		sequentialFile: seqFileJson,
		protocol: protocolJson,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		prototype: prototype_EDISIH1,
		repName: "EDISIH1",
		folder: "GX3APP",
		fileNames: {
			C: "CABFAC2",
			L: "LINFAC2"
		},
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		uuid: [uuidjson],
		db: db,
		unittest: true

	};
	recOptions.fileName = "generateEdi2.json";

	result = EdiProcess.generateEdiFiles(_, "idProcessWithoutCache", option);
	strictEqual(result.length, 1, "result length ok ");

	strictEqual(result[0].fileNames.length, 2, "result fileNames ok ");
	strictEqual(result[0].uuid, uuidjson, "result uuid ok ");
	strictEqual(result[0].purgeCache, true, "result purge Cache  ok ");

	// check if the file generate exists and is ok
	var endpoint = endpointTest;
	recOptions.fileName = "checkGenerateEdi2.json";
	var sadfs = getNewSadFsq(_, endpointTest, recOptions);
	fileBuff["CABFAC2"] = readFile("ediFiles/CABFAC2", 'utf-8', _);
	fileBuff["LINFAC2"] = readFile("ediFiles/LINFAC2", 'utf-8', _);
	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/CABFAC2"
	}, {
		flag: "r",
		encoding: "utf-8"
	});
	strictEqual(read, fileBuff["CABFAC2"], "file  CABFAC without cache generate ok");
	read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/LINFAC2"
	}, {
		flag: "r",
		encoding: "utf-8"
	});
	strictEqual(read, fileBuff["LINFAC2"], "file LINFAC without cache generate ok");

	var uuidjson = EdiEntity.createEdiCacheEntity(_, {
		json: jsonSIH,
		id: "sas",
		etag: "etagDummy",
		db: db
	});
	var uuidjson2 = EdiEntity.createEdiCacheEntity(_, {
		json: jsonSIH,
		id: "sas2",
		etag: "etagDummy",
		db: db
	});
	var option = {
		messageMapping: {},
		sequentialFile: seqFileJson,
		protocol: protocolJson,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		prototype: prototype_EDISIH1,
		repName: "EDISIH1",
		folder: "GX3APP",
		fileNames: {
			C: "CABFAC3",
			L: "LINFAC3"
		},
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		uuid: [uuidjson, uuidjson2],
		db: db,
		unittest: true

	};
	// generate multiple instance of rep in 1 seqFile
	recOptions.fileName = "generateEdi3.json";

	result = EdiProcess.generateEdiFiles(_, "idProcessWithoutCache2", option);
	strictEqual(result.length, 2, "result length ok ");
	strictEqual(result[0].fileNames.length, 2, "result fileNames ok ");
	strictEqual(result[0].uuid, uuidjson, "result uuid ok ");

	var endpoint = endpointTest;
	recOptions.fileName = "checkGenerateEdiCache2.json";
	var sadfs = getNewSadFsq(_, endpointTest, recOptions);
	fileBuff["CABFAC3"] = readFile("ediFiles/CABFAC3", 'utf-8', _);
	fileBuff["LINFAC3"] = readFile("ediFiles/LINFAC3", 'utf-8', _);
	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/CABFAC3"
	}, {
		flag: "r",
		encoding: "utf-8"
	});

	strictEqual(read, fileBuff["CABFAC3"], "file  CABFAC without cache generate ok");
	read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/LINFAC3"
	}, {
		flag: "r",
		encoding: "utf-8"
	});
	strictEqual(read, fileBuff["LINFAC3"], "file LINFAC without cache generate ok");


	// generate with multiple endFlag in the same file and not only one


	var seqFileJson = JSON.parse(readFile("context/seqFileSIHMultipleEndFlag.json", 'utf-8', _));
	var SIHJson = JSON.parse(readFile("context/jsonSIHmultipleEndFlag.json", 'utf-8', _));

	var uuidJSONMultiple = EdiEntity.createEdiCacheEntity(_, {
		json: SIHJson,
		type: EdiType.JSONCACHE,
		id: "testMultiple",
		etag: "etagDummy",
		db: db
	});
	var option = {
		messageMapping: {},
		sequentialFile: seqFileJson,
		protocol: protocolJson,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		prototype: prototype_EDISIHEndFlag,
		repName: "EDISIH",
		folder: "GX3APP",
		fileNames: {
			C: "CABFAC4",
			L: "LINFAC4",
			O: "OBSFAC4"

		},
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		uuid: [uuidJSONMultiple],
		db: db,
		unittest: true

	};
	recOptions.fileName = "generateEdi4.json";

	result = EdiProcess.generateEdiFiles(_, "idProcessMultiple", option);
	strictEqual(result.length, 1, "result length ok ");
	strictEqual(result[0].fileNames.length, 3, "result fileNames ok ");
	strictEqual(result[0].uuid, uuidJSONMultiple, "result uuid ok ");

	var endpoint = endpointTest;
	recOptions.fileName = "checkGenerateEdiCache3.json";
	var sadfs = getNewSadFsq(_, endpoint, recOptions);
	fileBuff["CABFAC4"] = readFile("ediFiles/CABFAC4", 'utf-8', _);
	fileBuff["LINFAC4"] = readFile("ediFiles/LINFAC4", 'utf-8', _);
	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/CABFAC4"
	}, {
		flag: "r",
		encoding: "utf-8"
	});


	strictEqual(read, fileBuff["CABFAC4"], "file  CABFAC with multiple end flag");
	recOptions.fileName = "checkGenerateEdiCache4.json";

	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/LINFAC4"
	}, {
		flag: "r",
		encoding: "utf-8"
	});
	strictEqual(read, fileBuff["LINFAC4"], "file  LINFAC with multiple end flag");


	try {
		var read = sadfs.readFile(_, {
			path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/OBSFAC4"
		}, {
			flag: "r",
			encoding: "utf-8"
		});
		ok(false, "file OBSFAC4 can't be read and is not dumped ");

	} catch (e) {
		ok(true, "file OBSFAC4 can't be read and is not dumped " + e.message);
	}


	var seqFileJson = JSON.parse(readFile("context/seqFileTruncate.json", 'utf-8', _));
	var SIHJson = JSON.parse(readFile("context/jsonTruncate.json", 'utf-8', _));
	uuidJSONMultiple = EdiEntity.createEdiCacheEntity(_, {
		json: SIHJson,
		type: EdiType.JSONCACHE,
		id: "testTruncate",
		etag: "etagDummy",
		db: db
	});
	var option = {
		messageMapping: {},
		sequentialFile: seqFileJson,
		protocol: protocolJson,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		prototype: prototype_EDISIHEndFlag,
		repName: "EDISIH",
		folder: "GX3APP",
		fileNames: {
			H: "CABFAC5"
		},
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		uuid: [uuidJSONMultiple],
		db: db,
		unittest: true

	};
	recOptions.fileName = "generateEdi5.json";

	result = EdiProcess.generateEdiFiles(_, "idProcessTruncate", option);
	strictEqual(result.length, 1, "result length ok ");
	strictEqual(result[0].fileNames.length, 1, "result fileNames ok ");
	strictEqual(result[0].uuid, uuidJSONMultiple, "result uuid ok ");


	var endpoint = endpointTest;
	recOptions.fileName = "checkGenerateEdiCache4.json";
	var sadfs = getNewSadFsq(_, endpointTest, recOptions);
	fileBuff["CABFAC5"] = readFile("ediFiles/CABFAC5", 'utf-8', _);
	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/CABFAC5"
	}, {
		flag: "r",
		encoding: "utf-8"
	});

	strictEqual(read, fileBuff["CABFAC5"], "file  CABFAC with multiple end flag");

	var seqFileJson = JSON.parse(readFile("context/seqFileallIn1file.json", 'utf-8', _));
	uuidJSONMultiple = EdiEntity.createEdiCacheEntity(_, {
		json: SIHJson,
		type: EdiType.JSONCACHE,
		id: "testTruncate",
		etag: "etagDummy",
		db: db
	});
	var option = {
		messageMapping: {},
		sequentialFile: seqFileJson,
		protocol: protocolJson,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		prototype: prototype_EDISIHEndFlag,
		repName: "EDISIH",
		folder: "GX3APP",
		fileNames: {
			H: "CABFAC6"
		},
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		uuid: [uuidJSONMultiple],
		db: db,
		unittest: true,
		keepCache: true,

	};
	recOptions.fileName = "generateEdi6.json";

	result = EdiProcess.generateEdiFiles(_, "idProcessallin1file", option);
	strictEqual(result.length, 1, "result length ok ");
	strictEqual(result[0].fileNames.length, 1, "result fileNames ok ");
	strictEqual(result[0].uuid, uuidJSONMultiple, "result uuid ok ");
	var endpoint = endpointTest;
	recOptions.fileName = "checkGenerateEdiCache5.json";
	var sadfs = getNewSadFsq(_, endpointTest, recOptions);
	fileBuff["CABFAC6"] = readFile("ediFiles/CABFAC6", 'utf-8', _);
	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/CABFAC6"
	}, {
		flag: "r",
		encoding: "utf-8"
	});

	strictEqual(read, fileBuff["CABFAC6"], "file  CABFAC with multiple flag, all in 1 file");

	var option = {
		messageMapping: {},
		sequentialFile: seqFileJson,
		protocol: protocolJson,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		prototype: prototype_EDISIHEndFlag,
		repName: "EDISIH",
		folder: "GX3APP",
		fileNames: {
			H: "CABFAC6"
		},
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		uuid: [uuidJSONMultiple],
		db: db,
		unittest: true,
		test: true

	};
	recOptions.fileName = "generateEdi7.json";
	strictEqual(result.length, 1, "result length ok ");
	strictEqual(result[0].fileNames.length, 1, "result fileNames ok ");
	strictEqual(result[0].uuid, uuidJSONMultiple, "result uuid ok ");

	result = EdiProcess.generateEdiFiles(_, "idProcessallin2file", option);

	var endpoint = endpointTest;
	recOptions.fileName = "checkGenerateEdiCache6.json";
	var sadfs = getNewSadFsq(_, endpointTest, recOptions);
	fileBuff["CABFAC6"] = readFile("ediFiles/CABFAC6", 'utf-8', _);
	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUETEST/CABFAC6"
	}, {
		flag: "r",
		encoding: "utf-8"
	});

	strictEqual(read, fileBuff["CABFAC6"], "file  CABFAC with multiple flag, all in 1 file");

	// test the uuidJSONMultiple doesn't exists anymore - no asked to keep the cache
	var inst = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuidJSONMultiple,
		db: db
	});
	strictEqual(inst, null, "cache entity no more present ok");

	start();
});

asyncTest("generate import file API", function(_) {
	_initPrototypeCache(_, db);

	var recOptions = {
		recMode: ediSadUnitConfig.online ? "REC" : "PLAY",
		fileName: "generateFile2.json",
		path: "node_modules/syracuse-edi/test/server/data/sadrec"
	};
	if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file

	// store in mongodb all needed to perform the test
	var messageMappingJson = JSON.parse(readFile("context/messageMappingSOH.json", 'utf-8', _));

	var protocolJson = JSON.parse(readFile("context/protocol.json", 'utf-8', _));
	var jsonSOH = JSON.parse(readFile("context/jsonImport.json", 'utf-8', _));
	var fileBuff = readFile("context/importSOH.csv", 'utf-8', _);

	var uuid = [];
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: messageMappingJson,
		type: EdiType.MESSAGEMAPPING,
		id: "test",
		etag: "etagDummy",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: {},
		type: EdiType.SEQFILE,
		id: "test",
		etag: "etagDummy",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: protocolJson,
		id: "test",
		etag: "etagDummy",
		type: EdiType.PROTOCOL,
		db: db
	}));
	var uuidjson = EdiEntity.createEdiCacheEntity(_, {
		json: jsonSOH,
		id: "sas",
		etag: "etagDummy",
		type: "sas",
		db: db
	});

	var option = {
		messageMapping: uuid[0],
		sequentialFile: uuid[1],
		protocol: uuid[2],
		prototype: prototype_EDIS0H2,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		repName: "EDISOH2",
		folder: "GX3APP",

		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		uuid: [uuidjson],
		fileName: "test",
		db: db,
		unittest: true

	};
	var result = EdiProcess.generateImportFiles(_, "idProcess", option);
	// check if the file generate exists and is ok
	var endpoint = endpointTest;
	recOptions.fileName = "checkGenerateImport.json";
	var sadfs = getNewSadFsq(_, endpointTest, recOptions);
	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/import/test"
	}, {
		flag: "r",
		encoding: "utf-8"
	});


	strictEqual(read, fileBuff, "file import generate ok");
	sadfs.unlink(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/import/test"
	});

	var uuidjson = EdiEntity.createEdiCacheEntity(_, {
		json: jsonSOH,
		id: "sas",
		etag: "etagDummy",
		type: "sas",
		db: db
	});
	// with context directly in parameter instead of use cache
	var option = {
		messageMapping: messageMappingJson,
		sequentialFile: {},
		protocol: protocolJson,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		prototype: prototype_EDIS0H2,
		repName: "EDISOH2",
		folder: "GX3APP",

		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		uuid: [uuidjson],
		fileName: "test2",
		db: db,
		unittest: true,
		test: true

	};
	recOptions.fileName = "generateImport3.json";

	var result = EdiProcess.generateImportFiles(_, "idProcessWithoutCache", option);

	// check if the file generate exists and is ok
	var endpoint = endpointTest;
	recOptions.fileName = "checkGenerateImport3.json";
	var sadfs = getNewSadFsq(_, endpointTest, recOptions);

	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/importtest/test2"
	}, {
		flag: "r",
		encoding: "utf-8"
	});

	strictEqual(read, fileBuff, "file import without cache generate ok");
	sadfs.unlink(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/importtest/test2"
	});


	start();
});

asyncTest("generate import file API with failure during pushed files", function(_) {
	_initPrototypeCache(_, db);

	var recOptions = {
		recMode: ediSadUnitConfig.online ? "REC" : "PLAY",
		fileName: "generateFileFailedWrite.json",
		path: "node_modules/syracuse-edi/test/server/data/sadrec"
	};
	if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file

	// store in mongodb all needed to perform the test
	var messageMappingJson = JSON.parse(readFile("context/messageMappingSOH.json", 'utf-8', _));
	var protocolJsonOk = JSON.parse(readFile("context/protocol.json", 'utf-8', _));

	var protocolJson = JSON.parse(readFile("context/protocolWrongPath.json", 'utf-8', _));
	var jsonSOH = JSON.parse(readFile("context/jsonImport.json", 'utf-8', _));
	var fileBuff = readFile("context/importSOH.csv", 'utf-8', _);

	var uuid = [];
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: messageMappingJson,
		type: EdiType.MESSAGEMAPPING,
		id: "test",
		etag: "etagDummy",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: {},
		type: EdiType.SEQFILE,
		id: "test",
		etag: "etagDummy",
		db: db
	}));
	var uuidProtocol = EdiEntity.createEdiCacheEntity(_, {
		json: protocolJson,
		id: "test",
		etag: "etagDummy",
		type: EdiType.PROTOCOL,
		db: db
	});
	var uuidjson = EdiEntity.createEdiCacheEntity(_, {
		json: jsonSOH,
		id: "sas",
		etag: "etagDummy",
		type: "sas",
		db: db
	});

	var option = {
		messageMapping: uuid[0],
		sequentialFile: uuid[1],
		protocol: uuidProtocol,
		prototype: prototype_EDIS0H2,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		repName: "EDISOH2",
		folder: "GX3APP",
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		uuid: [uuidjson],

		path: "/home1/adonix/GX3APP/POUET/TMP/TESTAP/import",
		fileName: "test",
		db: db,
		unittest: true

	};
	try {
		EdiProcess.generateImportFiles(_, "idProcessFailed", option);

		ok(false, "generate not raised exception ");

	} catch (e) {
		ok(true, "generate raise exception " + e.message);
	}
	// check if document are store in storage Area
	var doc = sa.getDocumentInstance(_, {
		sdataWhere: "description eq idProcessFailed"
	}, "EDI");
	strictEqual(doc && doc.length != 0, true, "document saved in storage area");
	var docBuf = sa.readAll(_, {
		jsonWhere: {
			$uuid: doc.$uuid
		}
	}).toString('utf-8');

	strictEqual(docBuf, fileBuff, "document saved content ok");


	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuidProtocol
	});
	var uuidProt = EdiEntity.createEdiCacheEntity(_, {
		json: protocolJsonOk,
		id: "test2",
		etag: "etagDummy",
		type: EdiType.PROTOCOL,
		db: db
	});
	option.path = "/home1/adonix/GX3APP/TMP/TESTAP/import";
	option.protocol = uuidProt;
	recOptions.fileName = "generateFileFailedWriteOK.json";
	var uuidjson = EdiEntity.createEdiCacheEntity(_, {
		json: jsonSOH,
		id: "sas",
		etag: "etagDummy",
		type: "sas",
		db: db
	});
	option.uuid = [uuidjson];
	var result = EdiProcess.generateImportFiles(_, "idProcessFailed", option);

	console.log("result " + JSON.stringify(result));
	strictEqual(result[0].uuid, uuidjson, "recall generate to write uuid ok");
	strictEqual(result[0].fileNames[0] != null, true, "recall generate to write file : " + result[0].fileNames[0] + " ");

	var doc = sa.getDocumentInstance(_, {
		sdataWhere: "description eq idProcessFailed"
	}, "EDI");
	strictEqual(doc === null, true, "document saved removed in storage area");

	// check if the file generate exists and is ok
	var endpoint = endpointTest;
	recOptions.fileName = "checkGenerateImportFailed.json";
	var sadfs = getNewSadFsq(_, endpointTest, recOptions);
	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/import/test"
	}, {
		flag: "r",
		encoding: "utf-8"
	});

	strictEqual(read, fileBuff, "file import generate ok");
	sadfs.unlink(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/import/test"
	});

	start();
});


asyncTest("test update edi entity ", function(_) {
	// clean
	EdiEntity.dropAllEdiCacheEntity(_, {
		db: db
	});
	EdiProcess.removeAllEdiProcess(_, {
		db: db
	});

	// create a sample entity

	var uuid = EdiEntity.createEdiCacheEntity(_, {
		json: {
			test: "test"
		},
		type: "test",
		id: "testUpdate",
		etag: "etagDummy",
		db: db
	});
	var uuid2 = EdiEntity.createEdiCacheEntity(_, {
		json: {
			test: "test2"
		},
		type: "test",
		id: "testUpdate2",
		etag: "etagDummy",
		db: db
	});

	strictEqual(uuid != null, true, "create of entity testUpdate ok");
	//check if it's create  and if value is correctly store
	var inst = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuid,
		db: db
	});
	strictEqual(inst != null, true, "instance exists in mongo (stored ok)");
	strictEqual(inst.$uuid, uuid, "uuid  " + inst.$uuid);
	strictEqual(inst.type(_), "test", "type  " + inst.type(_));
	strictEqual(inst.id(_), "testUpdate", "id  " + inst.id(_));
	strictEqual(inst.etag(_), "etagDummy", "etag " + inst.etag(_));
	strictEqual(JSON.stringify(inst.json(_)), '{"test":"test"}', "json  " + JSON.stringify(inst.json(_)));

	// update the value
	EdiEntity.updateEdiCacheEntity(_, {
		elems: [{
			uuid: uuid,
			json: {
				test: "testUpdate"
			}
		}],
		db: db
	});

	// check the change
	var inst = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuid,
		db: db
	});
	strictEqual(inst != null, true, "instance exists in mongo (updated ok)");
	strictEqual(inst.$uuid, uuid, "uuid  " + inst.$uuid);
	strictEqual(inst.type(_), "test", "type  " + inst.type(_));
	strictEqual(inst.id(_), "testUpdate", "id  " + inst.id(_));
	strictEqual(inst.etag(_), "etagDummy", "etag " + inst.etag(_));
	strictEqual(JSON.stringify(inst.json(_)), '{"test":"testUpdate"}', "json  " + JSON.stringify(inst.json(_)));

	// update the value
	EdiEntity.updateEdiCacheEntity(_, {
		elems: [{
			uuid: uuid,
			json: ""
		}],
		db: db
	});

	// check the change
	var inst = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuid,
		db: db
	});
	strictEqual(inst != null, true, "instance exists in mongo (updated ok)");
	strictEqual(inst.$uuid, uuid, "uuid  " + inst.$uuid);
	strictEqual(inst.type(_), "test", "type  " + inst.type(_));
	strictEqual(inst.id(_), "testUpdate", "id  " + inst.id(_));
	strictEqual(inst.etag(_), "etagDummy", "etag " + inst.etag(_));
	strictEqual(JSON.stringify(inst.json(_)), '\"\"', "json  " + JSON.stringify(inst.json(_)));

	// test update 2 entities
	EdiEntity.updateEdiCacheEntity(_, {
		elems: [{
			uuid: uuid,
			json: {
				test: "testUpdate2"
			}
		}, {
			uuid: uuid2,
			json: {
				test: "test2Update"
			}
		}],
		db: db
	});
	var inst = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuid,
		db: db
	});
	strictEqual(inst != null, true, "update 2 entity : instance exists in mongo (updated ok)");
	strictEqual(inst.$uuid, uuid, "update 2 entity : uuid  " + inst.$uuid);
	strictEqual(inst.type(_), "test", "update 2 entity : type  " + inst.type(_));
	strictEqual(inst.id(_), "testUpdate", "update 2 entity : id  " + inst.id(_));
	strictEqual(inst.etag(_), "etagDummy", "update 2 entity : etag " + inst.etag(_));
	strictEqual(JSON.stringify(inst.json(_)), '{"test":"testUpdate2"}', "update 2 entity : json  " + JSON.stringify(inst.json(_)));

	var inst = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuid2,
		db: db
	});
	strictEqual(inst != null, true, "update 2 entity : instance exists in mongo (updated ok)");
	strictEqual(inst.$uuid, uuid2, "update 2 entity : uuid  " + inst.$uuid);
	strictEqual(inst.type(_), "test", "update 2 entity : type  " + inst.type(_));
	strictEqual(inst.id(_), "testUpdate2", "update 2 entity : id  " + inst.id(_));
	strictEqual(inst.etag(_), "etagDummy", "update 2 entity : etag " + inst.etag(_));
	strictEqual(JSON.stringify(inst.json(_)), '{"test":"test2Update"}', "update 2 entity : json  " + JSON.stringify(inst.json(_)));
	// test with non exists entity
	try {
		EdiEntity.updateEdiCacheEntity(_, {
			elems: [{
				uuid: "testDummy",
				json: {
					test: "testUpdate"
				}
			}],
			db: db
		});
		ok(false, "update non exists entity exception not raised ");
	} catch (e) {
		ok(true, "update non exists entity raise exception " + e.message);
	}

	try {

		EdiEntity.updateEdiCacheEntity(_, {
			elems: [{
				uuid: uuid,
				json: {
					test: "testUpdate2"
				}
			}, {
				uuid: "uuid-dummy",
				json: {
					test: "test2UpdateDummy"
				}
			}],
			db: db
		});
		ok(false, "update multiple instance with on non exists entity raise exception ");

	} catch (e) {
		ok(true, "update multiple instance with on non exists entity raise exception " + e.message);
	}

	start();
});



asyncTest("test parsing xsd file with storage area", function(_) {
	// store content in storage area
	var jsXsd = readFile("context/xsdSample.xsd", 'utf-8', _);
	var doc = sa.open(_, null);
	sa.write(_, doc, {
		description: "xsdSample",
		content: {
			contentType: "application/xml",
			fileName: "xsdSample.xsd",
		}
	}, new Buffer(jsXsd, "utf8"));
	var d = sa.close(_, doc, true);


	var uuid = EdiProcess.parseXsd(_, {
		xsdUuid: [d.$uuid],
		id: "testxsdStorage",
		db: db
	}).uuid;
	strictEqual(uuid != null, true, "result contains an uuid");
	var resStored = EdiProcess.getXmlPath(_, {
		uuid: uuid,
		startIndex: 1,
		count: 20,
	});


	console.log(JSON.stringify(resStored));

	strictEqual(JSON.stringify(resStored), '{"startIndex":1,"count":20,"elems":[{"id":1,"path":"shiporder.item[0..n].price","type":"decimal"},{"id":2,"path":"shiporder.item[0..n].quantity","type":"positiveInteger"},{"id":3,"path":"shiporder.item[0..n].note","type":"string"},{"id":4,"path":"shiporder.item[0..n].title","type":"string"},{"id":5,"path":"shiporder.shipto.country","type":"string"},{"id":6,"path":"shiporder.shipto.city","type":"string"},{"id":7,"path":"shiporder.shipto.address","type":"string"},{"id":8,"path":"shiporder.shipto.name","type":"string"},{"id":9,"path":"shiporder.orderperson","type":"string"},{"id":10,"path":"shiporder.$.orderid","type":"string"}],"totalResult":10}', "result ok");

	// delete of document that store xml
	EdiProcess.removeXmlPath(_, {
		uuid: uuid
	});
	//strictEqual(JSON.stringify(result.json), '{"shiporder.item.price":{"path":"shiporder.item.price","type":"decimal"},"shiporder.item.quantity":{"path":"shiporder.item.quantity","type":"positiveInteger"},"shiporder.item.note":{"path":"shiporder.item.note","type":"string"},"shiporder.item.title":{"path":"shiporder.item.title","type":"string"},"shiporder.shipto.country":{"path":"shiporder.shipto.country","type":"string"},"shiporder.shipto.city":{"path":"shiporder.shipto.city","type":"string"},"shiporder.shipto.address":{"path":"shiporder.shipto.address","type":"string"},"shiporder.shipto.name":{"path":"shiporder.shipto.name","type":"string"},"shiporder.orderperson":{"path":"shiporder.orderperson","type":"string"},"shiporder.$.orderid":{"path":"shiporder.$.orderid","type":"string"}}', "result json ok");

	// test upate of the data
	var jsXsd = readFile("context/xsdSample2.xsd", 'utf-8', _);
	var doc = sa.open(_, null);
	sa.write(_, doc, {
		description: "xsdSample",
		content: {
			contentType: "application/pdf",
			fileName: "xsdSample.xsd",
		}
	}, new Buffer(jsXsd, "utf8"));
	var d = sa.close(_, doc, true);

	var uuid = EdiProcess.parseXsd(_, {
		xsdUuid: [d.$uuid],
		id: "testxsdStorage"
	}).uuid;
	d.deleteSelf(_);

	strictEqual(uuid != null, true, "result contains an uuid");
	var resStored = EdiProcess.getXmlPath(_, {
		uuid: uuid,
		startIndex: 1,
		count: 20
	});


	strictEqual(JSON.stringify(resStored), '{"startIndex":1,"count":20,"elems":[{"id":1,"path":"shiporder.item[0..n].price","type":"decimal"},{"id":2,"path":"shiporder.item[0..n].quantity","type":"positiveInteger"},{"id":3,"path":"shiporder.item[0..n].note","type":"string"},{"id":4,"path":"shiporder.item[0..n].title","type":"string"},{"id":5,"path":"shiporder.shipto.country","type":"string"},{"id":6,"path":"shiporder.shipto.city","type":"string"},{"id":7,"path":"shiporder.shipto.address","type":"string"},{"id":8,"path":"shiporder.shipto.name","type":"string"},{"id":9,"path":"shiporder.orderperson","type":"string"},{"id":10,"path":"shiporder.$.orderid","type":"ng","restriction":{"base":"xs:string","pattern":"[0-9]{6}"}}],"totalResult":10}', "result ok");

	// remove document xml path
	EdiProcess.removeXmlPath(_, {
		uuid: uuid
	});

	var jsXsd = readFile("context/facturae.xsd", 'utf-8', _);

	var doc = sa.open(_, null);
	sa.write(_, doc, {
		description: "facturae",
		content: {
			contentType: "application/xml",
			fileName: "facturae.xsd",
		}
	}, new Buffer(jsXsd, "utf8"));
	var d = sa.close(_, doc, true);


	var uuid = EdiProcess.parseXsd(_, {
		xsdUuid: [d.$uuid],
		id: "facturae"
	}).uuid;


	var resStored = EdiProcess.getXmlPath(_, {
		uuid: uuid,
		startIndex: 1,
		count: 20,
	});
	strictEqual(resStored.totalResult, 472, " size of xml path ok");
	strictEqual(resStored.count, 20, " size of xml path ok");


	var jsXsd = readFile("context/xmldsig-core-schema.xsd", 'utf-8', _);

	var doc = sa.open(_, null);
	sa.write(_, doc, {
		description: "facturae",
		content: {
			contentType: "application/xml",
			fileName: "xmldsig-core-schema.xsd",
		}
	}, new Buffer(jsXsd, "utf8"));
	var d2 = sa.close(_, doc, true);


	var uuid = EdiProcess.parseXsd(_, {
		xsdUuid: [d.$uuid, d2.$uuid],
		id: "xmldsig-core-schema"
	}).uuid;

	var resStored = EdiProcess.getXmlPath(_, {
		uuid: uuid,
		startIndex: 1,
		count: 20
	});
	strictEqual(resStored.totalResult, 486, " size of xml path ok");
	strictEqual(resStored.count, 20, " size of xml path ok");


	start();
});

asyncTest("decode/Generate Edi File Xml File", function(_) {

	var recOptions = {
		recMode: ediSadUnitConfig.online ? "REC" : "PLAY",
		fileName: "decodeFileXml1.json",
		path: "node_modules/syracuse-edi/test/server/data/sadrec"
	};
	if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file

	var jsXsd = readFile("context/xsdSample.xsd", 'utf-8', _);
	var doc = sa.open(_, null);
	sa.write(_, doc, {
		description: "xsdSample",
		content: {
			contentType: "application/xml",
			fileName: "xsdSample.xsd",
		}
	}, new Buffer(jsXsd, "utf8"));
	var d = sa.close(_, doc, true);

	var jsXsd = readFile("context/xsdSampleGenWork.xsd", 'utf-8', _);
	var doc = sa.open(_, null);
	sa.write(_, doc, {
		description: "xsdSampleGenWork",
		content: {
			contentType: "application/xml",
			fileName: "xsdSampleGenWork.xsd",
		}
	}, new Buffer(jsXsd, "utf8"));
	var dGenWork = sa.close(_, doc, true);

	var uuid = EdiProcess.parseXsd(_, {
		xsdUuid: [d.$uuid],
		id: "testxsdApi"
	}).uuid;

	var uuidGenWork = EdiProcess.parseXsd(_, {
		xsdUuid: [dGenWork.$uuid],
		id: "testxsdApiGenWork"
	}).uuid;
	/// store in mongodb all needed to perform the test
	var xmlFile = JSON.parse(readFile("context/xmlFileTestEdiApi.json", 'utf-8', _));
	xmlFile.UUIDXMLTYP = uuidGenWork;
	var xmlFileFailed = JSON.parse(readFile("context/xmlFileTestXmlFail.json", 'utf-8', _));
	xmlFileFailed.UUIDXMLTYP = uuid;
	// var messageMappingJson = readFile("context/messageMapping.json", 'utf-8', _);
	var protocolJson = JSON.parse(readFile("context/protocol.json", 'utf-8', _));
	var prototype = JSON.parse(readFile("context/SHIPTO_$details.json", 'utf-8', _));

	var uuid = [];
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: xmlFile,
		type: EdiType.XMLFILE,
		id: "test",
		etag: "etagDummy",
		db: db
	}));
	// test mapping
	try {
		EdiProcess.validateMapping(_, {
			xmlFile: uuid[0],
			prototype: prototype,
		}); // validate with mongo entity
		ok(true, "mapping  valide with json file ")

	} catch (e) {
		ok(false, "mapping not valide with json file " + e.stack)

	}


	try {
		EdiProcess.validateMapping(_, {
			xmlFile: uuid[0]
		}); // validate with mongo entity
		ok(true, "mapping valide with mongo file ")

	} catch (e) {
		ok(false, "mapping not valide with mongo file " + e.stack)

	}
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: protocolJson,
		type: EdiType.PROTOCOL,
		id: "test",
		etag: "etagDummy",
		db: db
	}));

	var option = {
		xmlFile: uuid[0],
		protocol: uuid[1],
		prototype: prototype,
		sadfsq: {
			recOptions: recOptions
		},
		folder: "GX3APP",
		db: db,
		unittest: true
			//moveEnd : true

	};
	recOptions.fileName = "decodeFileXml1.json";
	var uuidList = EdiProcess.decodeEdiFiles(_, "idProcessXml", option);

	var inst = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuidList && uuidList[0].uuid,
		db: db
	});

	strictEqual(inst != null, true, "update 2 entity : instance exists in mongo (updated ok)");
	strictEqual(inst.$uuid, uuidList[0].uuid, "update 2 entity : uuid  " + inst.$uuid);
	strictEqual(inst.type(_), "idProcessXml", "update 2 entity : type  " + inst.type(_));
	strictEqual(inst.id(_), uuidList[0].id, "update 2 entity : id  " + inst.id(_));
	strictEqual(JSON.stringify(inst.json(_)), '{"item":[{"price":"123.45","quantity":"745","note":"str1234","title":"str1234"},{"price":"123.46","quantity":"746","note":"str1235","title":"str1235"},{"price":"123.47","quantity":"748","note":"str1237","title":"str1237"},{"price":"123.48","quantity":"748","note":"str1238","title":"str1238"}],"personne":"str1234","orderId":"str1234"}', " json generate ok " + JSON.stringify(inst.json(_)));


	var xmlFileFail = EdiEntity.createEdiCacheEntity(_, {
		json: xmlFileFailed,
		type: EdiType.XMLFILE,
		id: "testFailed",
		etag: "etagDummy",
		db: db
	});

	var option = {
		xmlFile: xmlFileFail, // read another xmlFile
		protocol: uuid[1],
		prototype: prototype,
		sadfsq: {
			recOptions: recOptions
		},
		folder: "GX3APP",
		db: db,
		unittest: true
			//moveEnd : true

	};
	try {
		recOptions.fileName = "decodeFileXml2.json";
		var uuidList = EdiProcess.decodeEdiFiles(_, "idProcessXmlFailed", option);
		ok(false, "failed on xml validation ");

	} catch (e) {
		ok(true, "failed on xml validation " + e);
		strictEqual(e.message, "xsd validation failed \nError: Element 'test': This element is not expected. Expected is ( address ).\n", "correct error ok");

	}
	recOptions.fileName = "generateFileXml1.json";

	var option = {
		xmlFile: xmlFileFail,
		protocol: uuid[1],
		prototype: prototype,
		sadfsq: {
			recOptions: recOptions
		},
		folder: "GX3APP",
		db: db,
		unittest: true,
		fileNames: {
			"FACTURAE": "FACTURAE.xml"
		},
		uuid: [inst.$uuid]
			//moveEnd : true

	};
	try {
		recOptions.fileName = "generateFileXml1.json";
		var uuidList = EdiProcess.generateEdiFiles(_, "idProcessXmlFailed2", option);
		ok(false, "generate xml failed not ok")
	} catch (e) {
		ok(true, "generate xml failed ok " + e.message)

	}

	var option = {
		xmlFile: uuid[0],
		protocol: uuid[1],
		prototype: prototype,
		sadfsq: {
			recOptions: recOptions
		},
		folder: "GX3APP",
		db: db,
		unittest: true,
		fileNames: {
			"FACTURAE": "FACTURAE.xml"
		},
		uuid: [inst.$uuid],
		keepCache: true
			//moveEnd : true
	};
	recOptions.fileName = "generateFileXmlr21.json";
	var uuidList = EdiProcess.generateEdiFiles(_, "idProcessXml2", option);
	var endpoint = endpointTest;
	recOptions.fileName = "checkGenerateXmlFile.json";
	var sadfs = getNewSadFsq(_, endpointTest, recOptions);
	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/FACTURAE.xml"
	}, {
		flag: "r",
		encoding: "utf-8"
	});

	strictEqual(read, '<shiporder orderid="str1234">\n\t<orderperson>str1234</orderperson>\n\t<item>\n\t\t<title>str1234</title>\n\t\t<note>str1234</note>\n\t\t<quantity>745</quantity>\n\t\t<price>123.45</price>\n\t</item>\n\t<item>\n\t\t<title>str1235</title>\n\t\t<note>str1235</note>\n\t\t<quantity>746</quantity>\n\t\t<price>123.46</price>\n\t</item>\n\t<item>\n\t\t<title>str1237</title>\n\t\t<note>str1237</note>\n\t\t<quantity>748</quantity>\n\t\t<price>123.47</price>\n\t</item>\n\t<item>\n\t\t<title>str1238</title>\n\t\t<note>str1238</note>\n\t\t<quantity>748</quantity>\n\t\t<price>123.48</price>\n\t</item>\n</shiporder>', "file import generate ok");
	sadfs.unlink(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/FACTURAE.xml"
	});


	/*/ test with xsd that contain import
	var jsXsd = readFile("context/xsdSampleTestImport1.xsd", 'utf-8', _);
	var doc = sa.open(_, null);
	sa.write(_, doc, {
		description: "xsdTestImport1",
		content: {
			contentType: "application/xml",
			fileName: "xsdSampleTestImport1.xsd",
		}
	}, new Buffer(jsXsd, "utf8"));
	var dImport1 = sa.close(_, doc, true);

	var jsXsd = readFile("context/xsdSampleTestImport2.xsd", 'utf-8', _);
	var doc = sa.open(_, null);
	sa.write(_, doc, {
		description: "xsdTestImport1",
		content: {
			contentType: "application/xml",
			fileName: "xsdSampleTestImport2.xsd",
		}
	}, new Buffer(jsXsd, "utf8"));
	var dImport2 = sa.close(_, doc, true);

	var xmlPathuuid = EdiProcess.parseXsd(_, {
		xsdUuid: [dImport1.$uuid, dImport2.$uuid],
		id: "testXsdImport"
	}).uuid;
	var xmlFile = JSON.parse(readFile("context/xmlFileTestEdiApi.json", 'utf-8', _));
	xmlFile.UUIDXMLTYP = xmlPathuuid;


	var uuidImport = EdiEntity.createEdiCacheEntity(_, {
		json: xmlFile,
		type: EdiType.XMLFILE,
		id: "testImport",
		etag: "etagDummy",
		db: db
	});
	var option = {
		xmlFile: uuidImport,
		protocol: uuid[1],
		prototype: prototype,
		sadfsq: {
			recOptions: recOptions
		},
		folder: "GX3APP",
		db: db,
		unittest: true,
		fileNames: {
			"FACTURAE": "FACTURAE.xml"
		},
		uuid: [inst.$uuid]
	};
	recOptions.fileName = "generateFileXml3.json";
	var uuidList = EdiProcess.generateEdiFiles(_, "idProcessXmlImport", option);

	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/FACTURAE.xml"
	}, {
		flag: "r",
		encoding: "utf-8"
	});

	strictEqual(read, '<shiporder orderid="str1234">\n\t<orderperson>str1234</orderperson>\n\t<item>\n\t\t<title>str1234</title>\n\t\t<note>str1234</note>\n\t\t<quantity>745</quantity>\n\t\t<price>123.45</price>\n\t</item>\n\t<item>\n\t\t<title>str1235</title>\n\t\t<note>str1235</note>\n\t\t<quantity>746</quantity>\n\t\t<price>123.46</price>\n\t</item>\n\t<item>\n\t\t<title>str1237</title>\n\t\t<note>str1237</note>\n\t\t<quantity>748</quantity>\n\t\t<price>123.47</price>\n\t</item>\n\t<item>\n\t\t<title>str1238</title>\n\t\t<note>str1238</note>\n\t\t<quantity>748</quantity>\n\t\t<price>123.48</price>\n\t</item>\n</shiporder>', "file import generate ok");
	sadfs.unlink(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/FACTURAE.xml"
	});

	/*/ // test with xsd that contain import
	var jsXsd = readFile("context/xmldsig-core-schema.xsd", 'utf-8', _);
	var doc = sa.open(_, null);
	sa.write(_, doc, {
		description: "xmldsig-core-schema.xsd",
		content: {
			contentType: "application/xml",
			fileName: "xmldsig-core-schema.xsd",
		}
	}, new Buffer(jsXsd, "utf8"));
	var dImport1 = sa.close(_, doc, true);

	var jsXsd = readFile("context/facturae.xsd", 'utf-8', _);
	var doc = sa.open(_, null);
	sa.write(_, doc, {
		description: "facturae",
		content: {
			contentType: "application/xml",
			fileName: "facturae.xsd",
		}
	}, new Buffer(jsXsd, "utf8"));
	var dImport2 = sa.close(_, doc, true);

	var xmlPathuuid = EdiProcess.parseXsd(_, {
		xsdUuid: [dImport1.$uuid, dImport2.$uuid],
		id: "facturaeTest"
	}).uuid;
	var xmlFile = JSON.parse(readFile("context/xmlFileFacturae.json", 'utf-8', _));
	xmlFile.UUIDXMLTYP = xmlPathuuid;


	var uuidImport = EdiEntity.createEdiCacheEntity(_, {
		json: xmlFile,
		type: EdiType.XMLFILE,
		id: "facturaeTest",
		etag: "etagDummy",
		db: db
	});

	var j = JSON.parse(readFile("context/instFacturae.json", 'utf-8', _));
	prototype = JSON.parse(readFile("context/facturaeTestProto.json", 'utf-8', _));

	var uuid = EdiEntity.createEdiCacheEntity(_, {
		id: "facturaeTest",
		type: "ediCache",
		etag: "ediCache",
		json: j,
		db: db
	});

	var protocolJson = JSON.parse(readFile("context/protocol.json", 'utf-8', _));

	var option = {
		xmlFile: uuidImport,
		protocol: protocolJson,
		prototype: prototype,
		sadfsq: {
			recOptions: recOptions
		},
		folder: "GX3APP",
		db: db,
		noWrite: true,
		unittest: true,
		fileNames: {
			"FACTURAE": "FACTURAETest2.xml"
		},
		uuid: [uuid]
	};
	recOptions.fileName = "generateFileXml3.json";
	var uuidList = EdiProcess.generateEdiFiles(_, "facturaeTest", option);


	start();
});

asyncTest("test Facturae - ", function(_) {

	var recOptions = {
		recMode: ediSadUnitConfig.online ? "REC" : "PLAY",
		fileName: "testFacturaeXmlReal.json",
		path: "node_modules/syracuse-edi/test/server/data/sadrec"
	};

	var jsXsd = readFile("context/facturae2.xsd", 'utf-8', _);
	var doc = sa.open(_, null);
	sa.write(_, doc, {
		description: "facturae2",
		content: {
			contentType: "application/xml",
			fileName: "facturae2.xsd",
		}
	}, new Buffer(jsXsd, "utf8"));
	var d1 = sa.close(_, doc, true);

	var jsXsd = readFile("context/xmldsig-core-schema.xsd", 'utf-8', _);
	var doc = sa.open(_, null);
	sa.write(_, doc, {
		description: "xmldsig-core-schema",
		content: {
			contentType: "application/xml",
			fileName: "xmldsig-core-schema.xsd",
		}
	}, new Buffer(jsXsd, "utf8"));
	var d2 = sa.close(_, doc, true);

	var uuid = EdiProcess.parseXsd(_, {
		xsdUuid: [d1.$uuid, d2.$uuid],
		id: "testFacturaeRealCase",
		db: db
	}).uuid;
	var xmlFileFacturae = JSON.parse(readFile("context/xmlFileFacturae.json", 'utf-8', _))
	xmlFileFacturae.UUIDXMLTYP = uuid;
	// test facturae with 2 file to read
	var option = {
		xmlFile: xmlFileFacturae,
		protocol: JSON.parse(readFile("context/protocol.json", 'utf-8', _)),
		prototype: JSON.parse(readFile("context/EDISIHFA_$details.json", 'utf-8', _)),
		sadfsq: {
			recOptions: recOptions
		},
		folder: "GX3APP",
		db: db,
		unittest: true,
		keepCache: true
			//moveEnd : true
	};
	/* deactivate temporary try { // test with bad mapping or prototype that reference a protopath that doesn't exist
		var uuidList = EdiProcess.decodeEdiFiles(_, "idProcessXmlFacturae", option);
	} catch (e) {
		strictEqual(e.message, "Mapping with JSON element ETCC_FCT.FCTAMTCUR: part ETCC_FCT does not exist in prototype", "failed test ok with bad prototype or mapping");
	}

	/*recOptions.fileName = "testFacturaeXmlReal2.json";
		var option = {
			xmlFile: xmlFileFacturae,
			protocol: JSON.parse(readFile("context/protocol.json", 'utf-8', _)),
			prototype: JSON.parse(readFile("context/EDISIHFACE_$details.json", 'utf-8', _)),
			sadfsq: {
				recOptions: recOptions
			},
			folder: "GX3APP",
			db: db,
			unittest: true,
			keepCache: true
				//moveEnd : true
		};
		var uuidList = EdiProcess.decodeEdiFiles(_, "idProcessXmlFacturae", option);

		var inst = EdiEntity.getEdiCacheEntity(_, {
			uuid: uuidList && uuidList[0].uuid,
			db: db
		});

		strictEqual(inst != null, true, "update 2 entity : instance exists in mongo (updated ok)");
		strictEqual(inst.$uuid, uuidList[0].uuid, "update 2 entity : uuid  " + inst.$uuid);
		strictEqual(inst.type(_), "idProcessXml", "update 2 entity : type  " + inst.type(_));
		strictEqual(inst.id(_), uuidList[0].id, "update 2 entity : id  " + inst.id(_));
		strictEqual(JSON.stringify(inst.json(_)), '{"item":[{"price":"123.45","quantity":"745","note":"str1234","title":"str1234"},{"price":"123.46","quantity":"746","note":"str1235","title":"str1235"},{"price":"123.47","quantity":"748","note":"str1237","title":"str1237"},{"price":"123.48","quantity":"748","note":"str1238","title":"str1238"}],"personne":"str1234","orderId":"str1234"}', " json generate ok " + JSON.stringify(inst.json(_)));
*/
	start()
});

asyncTest("clean edi entity mongodb", 0, function(_) {

	EdiEntity.dropAllEdiCacheEntity(_, {
		db: db
	});
	EdiProcess.removeAllEdiProcess(_, {
		db: db
	});
	start();
});

asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});