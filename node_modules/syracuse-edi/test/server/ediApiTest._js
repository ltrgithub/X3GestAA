"use strict";
/* jshint -W079 */
/* jshint unused: false */
/* global QUnit: false, asyncTest: false, test: false, strictEqual: false, ok: false, start: false, stop: false */

/*global QUnit, start, ok*/
var syracuse = require('syracuse-main/lib/syracuse');
var helpers = require('syracuse-core/lib/helpers');
var streams = require("streamline/lib/streams/streams");
var sys = require("util");
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var EdiProcess = require("syracuse-edi/lib/EdiProcess");
var globals = require('streamline/lib/globals');

globals.context = globals.context || {};
globals.context.session = {
	id: helpers.uuid.generate(),
	getUserLogin: function(_) {
		return "guest";
	},
	getUserProfile: function(_) {

		return {
			user: function(_) {
				// getting the administration ORM
				var db = adminHelper.getCollaborationOrm(_);

				// the metamodel is associated to the orm
				var model = db.model;

				var entity = db.model.getEntity(_, "user");
				// fetchInstance(callback, entity, filter)
				return db.fetchInstance(_, entity, {
					jsonWhere: {
						login: "guest"
					}
				});

			}
		};
	},
	getSecurityProfile: function(_) {
		return null;
	}
};
var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});

asyncTest("API store json", function(_) {
	// test create instance
	var jsons2 = [{
		"json1": "test1"
	}];
	var uuids = EdiProcess.createEdiCacheEntity(_, {
		jsons: jsons2,
		type: "sas"
	});
	strictEqual(uuids.length === 1, true, "create EdiCacheEntity with an array of 1 json " + JSON.stringify(uuids));

	var jsons1 = [{
		"json2": "test1"
	}, {
		"json4": "toto"
	}, {
		"json5": "tat"
	}];
	var uuids2 = EdiProcess.createEdiCacheEntity(_, {
		jsons: jsons1,
		type: "sas"
	});
	strictEqual(uuids2.length === 3, true, "create EdiCacheEntity with an array of 3 json" + JSON.stringify(uuids2));

	var uuid = EdiProcess.createEdiCacheEntity(_, {
		jsons: {
			"json6": "test1"
		},
		type: "sas"
	});
	strictEqual(uuids != null, true, "create EdiCacheEntity with an json object" + JSON.stringify(uuid));

	// test retrieve  instance
	try {
		var json1 = EdiProcess.getEdiCacheJson(_, {
			uuid: uuid
		});
		strictEqual(JSON.stringify(json1), '{"json6":"test1"}', "get EdiCacheEntity json from a uuid=[" + uuid + "] : " + JSON.stringify(json1));
	} catch (e) {
		ok(false, " get EdiCacheEntity json from a uuid " + e.stack);
	}

	try {
		json1 = EdiProcess.getEdiCacheJson(_, {
			uuid: uuids2
		});
		strictEqual(json1.length === jsons1.length, true, "get EdiCacheEntity json from a uuid=[" + JSON.stringify(uuids2) + "]");
		for (var i = 0; i < json1.length; i++) {
			strictEqual(JSON.stringify(json1[i][uuids2[i]]), JSON.stringify(jsons1[i]), "get EdiCacheEntity json from a uuid=[" + JSON.stringify(json1[i]) + "]");
		}
	} catch (e) {
		ok(false, " get EdiCacheEntity json from a uuid " + e.stack);
	}

	try {
		json1 = EdiProcess.getEdiCacheJson(_, {
			uuid: uuids
		});
		strictEqual(json1.length === jsons2.length, true, "get EdiCacheEntity json from a uuid=[" + JSON.stringify(uuids) + "]");
		for (var i = 0; i < json1.length; i++) {
			strictEqual(JSON.stringify(json1[i][uuids[i]]), JSON.stringify(jsons2[i]), "get EdiCacheEntity json from a uuid=[" + JSON.stringify(json1[i]) + "]");
		}
	} catch (e) {
		ok(false, " get EdiCacheEntity json from a uuid " + e.stack);
	}

	// test delete instance
	EdiProcess.removeEdiCacheEntity(_, uuid);
	strictEqual(EdiProcess.getEdiCacheJson(_, {
		uuid: uuid
	}) === null, true, "remove EdiCacheEntity json from a uuid=[" + uuid + "] ok ");

	EdiProcess.removeEdiCacheEntity(_, uuids2);
	strictEqual(EdiProcess.getEdiCacheJson(_, {
		uuid: uuids2
	}) === null, true, "remove EdiCacheEntity json from a uuid=[" + JSON.stringify(uuids2) + "] ok ");

	EdiProcess.removeEdiCacheEntity(_, uuids);
	strictEqual(EdiProcess.getEdiCacheJson(_, {
		uuid: uuids
	}) === null, true, "remove EdiCacheEntity json from a uuid=[" + JSON.stringify(uuids) + "] ok ");

	// test get non exists data
	strictEqual(EdiProcess.getEdiCacheJson(_, {
		uuid: "test uuid bidon"
	}) === null, true, "get EdiCacheEntity json from a uuid=[test uuid bidon] ok ");

	// test remove non exists data
	EdiProcess.removeEdiCacheEntity(_, "test uuid bidon");

	// create a instance with a bad data
	try {
		uuids = EdiProcess.createEdiCacheEntity(_, {
			jsons: "test with bad data",
			type: "sas"
		});
		ok(false, "test create edi instance with bad json data passe in a string ");
		EdiProcess.removeEdiCacheEntity(_, uuids);

	} catch (e) {
		ok(true, "test create edi instance with bad json data passe in a string ");
	}

	try {
		uuids = EdiProcess.createEdiCacheEntity(_, {
			jsons: ["test with bad data", "test2", "test3"],
			type: "sas"
		});
		ok(false, "test create edi instance with bad json data passe in a string ");
		EdiProcess.removeEdiCacheEntity(_, uuids);

	} catch (e) {
		ok(true, "test create edi instance with bad json data passe in an array ");
	}

	// test with etag like seqFile
	var uuidsSeqFile = EdiProcess.createEdiCacheEntity(_, {
		jsons: {
			test: "testSeqFile",
			test2: {
				test2: "testSeqFile2"
			}
		},
		type: "seqFile",
		etag: "AAAA"
	});
	strictEqual(uuidsSeqFile != null, true, "create EdiCacheEntity seqFile  " + JSON.stringify(uuidsSeqFile));

	var seqFile = EdiProcess.getEdiCacheEntity(_, {
		uuid: uuidsSeqFile
	});
	strictEqual(seqFile != null, true, "get EdiCacheEntity  from a uuid=[" + JSON.stringify(uuidsSeqFile) + "] ok ");
	strictEqual(seqFile.etag(_), "AAAA", " get EdiCacheEntity check etag ok");
	strictEqual(seqFile.type(_), "seqFile", " get EdiCacheEntity check type ok");
	strictEqual(JSON.stringify(seqFile.json(_)), '{\"test\":\"testSeqFile\",\"test2\":{\"test2\":\"testSeqFile2\"}}', " get EdiCacheEntity check json ok");
	EdiProcess.removeEdiCacheEntity(_, uuidsSeqFile);


	start();
});

asyncTest("cache process id context identifier", function(_) {
	var cache = EdiProcess.createEdiProcess(_, "idProcessEdi1", {
		messageMapping: "mm",
		sequentialFile: "sf",
		ediFlow: "ef",
		protocol: "protocol"
	});

	strictEqual(cache !== null, true, "create EdiProcess ok");

	strictEqual(cache.idProcess(_), "idProcessEdi1", "create EdiProcess  idProcess ok ");
	strictEqual(cache.idMessageMapping(_), "mm", "create EdiProcess  messageMapping ok ");
	strictEqual(cache.idSequentialFile(_), "sf", "create EdiProcess  sequentialFile ok ");
	strictEqual(cache.idEdiFlow(_), "ef", "create EdiProcess  ediFlow ok ");
	strictEqual(cache.idProtocol(_), "protocol", "create EdiProcess  protocol ok ");

	cache = EdiProcess.getEdiProcess(_, "idProcessEdi1");
	strictEqual(cache != null, true, "get EdiProcess ok");

	strictEqual(cache.idProcess(_), "idProcessEdi1", "get EdiProcess  idProcess ok ");
	strictEqual(cache.idMessageMapping(_), "mm", "get EdiProcess  messageMapping ok ");
	strictEqual(cache.idSequentialFile(_), "sf", "get EdiProcess  sequentialFile ok ");
	strictEqual(cache.idEdiFlow(_), "ef", "get EdiProcess  ediFlow ok ");
	strictEqual(cache.idProtocol(_), "protocol", "get EdiProcess  protocol ok ");

	cache = EdiProcess.removeEdiProcess(_, "idProcessEdi1");

	cache = EdiProcess.getEdiProcess(_, "idProcessEdi1");
	strictEqual(cache === null, true, "get EdiProcess ok");

	start();
});

asyncTest("cache sequential File", function(_) {


	start();
});

asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});