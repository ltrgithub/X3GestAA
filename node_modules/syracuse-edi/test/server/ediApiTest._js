"use strict";
/* jshint -W079 */
/* jshint unused: false */
/* global QUnit: false, asyncTest: false, test: false, strictEqual: false, ok: false, start: false, stop: false */

/*global QUnit, start, ok*/
var syracuse = require('syracuse-main/lib/syracuse');
var helpers = require('syracuse-core/lib/helpers');
var streams = require("streamline/lib/streams/streams");
var sys = require("util");
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var EdiProcess = require("syracuse-edi/lib/EdiProcess");
var EdiEntity = require("syracuse-edi/lib/EdiEntity");
var EdiType = require("syracuse-edi/lib/enumType").EdiType;
var fs = require("streamline-fs");
var globals = require('streamline/lib/globals');
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var mongodb = require('streamline-mongodb');
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");

var _defDataDir = require("path").join(__dirname, "../server/data/");


function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "unit_test");
}

globals.context = globals.context || {};
globals.context.session = {
	id: helpers.uuid.generate(),
	getUserLogin: function(_) {
		return "guest";
	},
	getUserProfile: function(_) {

		return {
			user: function(_) {
				// getting the administration ORM
				var db = adminHelper.getCollaborationOrm(_);

				// the metamodel is associated to the orm
				var model = db.model;

				var entity = db.model.getEntity(_, "user");
				// fetchInstance(callback, entity, filter)
				return db.fetchInstance(_, entity, {
					jsonWhere: {
						login: "guest"
					}
				});

			}
		};
	},
	getSecurityProfile: function(_) {
		return null;
	}
};
var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});
var endpoint, db;

asyncTest("init test environment ", function(_) {
	endpoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_demo");
	db = dataModel.getOrm(_, _getModel(), endpoint.datasets.mongodb_demo);
	start();
});

asyncTest("API store json", function(_) {
	// test create instance
	var jsons2 = [{
		"json1": "test1"
	}];
	var uuids = EdiEntity.createEdiCacheEntity(_, {
		jsons: jsons2,
		type: "sas",
		id: "jsons2",
		db: db
	});
	strictEqual(uuids.length === 1, true, "create EdiCacheEntity with an array of 1 json " + JSON.stringify(uuids));

	var jsons1 = [{
		"json2": "test1"
	}, {
		"json4": "toto"
	}, {
		"json5": "tat"
	}];
	var uuids2 = EdiEntity.createEdiCacheEntity(_, {
		jsons: jsons1,
		type: "sas",
		id: "json1",
		db: db
	});
	strictEqual(uuids2.length === 3, true, "create EdiCacheEntity with an array of 3 json " + JSON.stringify(uuids2));

	var uuid = EdiEntity.createEdiCacheEntity(_, {
		jsons: {
			"json6": "test1"
		},
		type: "sas",
		id: "json6",
		db: db
	});
	strictEqual(uuids != null, true, "create EdiCacheEntity with an json object " + JSON.stringify(uuid));

	// test retrieve  instance
	try {
		var json1 = EdiEntity.getEdiCacheJson(_, {
			uuid: uuid,
			db: db
		});
		strictEqual(JSON.stringify(json1), '{"json6":"test1"}', "get EdiCacheEntity json from a uuid=[" + uuid + "] : " + JSON.stringify(json1));
	} catch (e) {
		ok(false, " get EdiCacheEntity json from a uuid " + e.stack);
	}

	try {
		json1 = EdiEntity.getEdiCacheJson(_, {
			uuid: uuids2,
			db: db
		});
		strictEqual(json1.length === jsons1.length, true, "get EdiCacheEntity json from a uuid=[" + JSON.stringify(uuids2) + "]");
		for (var i = 0; i < json1.length; i++) {
			strictEqual(JSON.stringify(json1[i][uuids2[i]]), JSON.stringify(jsons1[i]), "get EdiCacheEntity json from a uuid=[" + JSON.stringify(json1[i]) + "]");
		}
	} catch (e) {
		ok(false, " get EdiCacheEntity json from a uuid " + e.stack);
	}

	try {
		json1 = EdiEntity.getEdiCacheJson(_, {
			uuid: uuids,
			db: db
		});
		strictEqual(json1.length === jsons2.length, true, "get EdiCacheEntity json from a uuid=[" + JSON.stringify(uuids) + "]");
		for (var i = 0; i < json1.length; i++) {
			strictEqual(JSON.stringify(json1[i][uuids[i]]), JSON.stringify(jsons2[i]), "get EdiCacheEntity json from a uuid=[" + JSON.stringify(json1[i]) + "]");
		}
	} catch (e) {
		ok(false, " get EdiCacheEntity json from a uuid " + e.stack);
	}

	// test delete instance
	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuid,
		db: db
	});
	strictEqual(EdiEntity.getEdiCacheJson(_, {
		uuid: uuid,
		db: db
	}) === null, true, "remove EdiCacheEntity json from a uuid=[" + uuid + "] ok ");

	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuids2,
		db: db
	});
	strictEqual(EdiEntity.getEdiCacheJson(_, {
		uuid: uuids2,
		db: db
	}) === null, true, "remove EdiCacheEntity json from a uuid=[" + JSON.stringify(uuids2) + "] ok ");

	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuids,
		db: db
	});
	strictEqual(EdiEntity.getEdiCacheJson(_, {
		uuid: uuids,
		db: db
	}) === null, true, "remove EdiCacheEntity json from a uuid=[" + JSON.stringify(uuids) + "] ok ");

	// test get non exists data
	strictEqual(EdiEntity.getEdiCacheJson(_, {
		uuid: "test uuid bidon",
		db: db
	}) === null, true, "get EdiCacheEntity json from a uuid=[test uuid bidon] ok ");

	// test remove non exists data
	EdiEntity.removeEdiCacheEntity(_, {
		uuid: "test uuid bidon",
		db: db
	});

	// create a instance with a bad data
	try {
		uuids = EdiEntity.createEdiCacheEntity(_, {
			jsons: "test with bad data",
			type: "sas",
			id: "testBidon",
			db: db
		});
		ok(false, "test create edi instance with bad json data passe in a string ");
		EdiEntity.removeEdiCacheEntity(_, {
			uuid: uuids,
			db: db
		});

	} catch (e) {
		ok(true, "test create edi instance with bad json data passe in a string ");
	}

	try {
		uuids = EdiEntity.createEdiCacheEntity(_, {
			jsons: ["test with bad data", "test2", "test3"],
			type: "sas",
			id: "testbidonArray",
			db: db
		});
		ok(false, "test create edi instance with bad json data passe in a string ");
		EdiEntity.removeEdiCacheEntity(_, {
			uuid: uuids,
			db: db
		});

	} catch (e) {
		ok(true, "test create edi instance with bad json data passe in an array ");
	}

	// test with etag like seqFile
	var uuidsSeqFile = EdiEntity.createEdiCacheEntity(_, {
		jsons: {
			test: "testSeqFile",
			test2: {
				test2: "testSeqFile2"
			}
		},
		type: "seqFile",
		etag: "AAAA",
		id: "testSeqFile",
		db: db
	});
	strictEqual(uuidsSeqFile != null, true, "create EdiCacheEntity seqFile  " + JSON.stringify(uuidsSeqFile));

	var seqFile = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuidsSeqFile,
		db: db
	});
	strictEqual(seqFile != null, true, "get EdiCacheEntity  from a uuid=[" + JSON.stringify(uuidsSeqFile) + "] ok ");
	strictEqual(seqFile.etag(_), "AAAA", " get EdiCacheEntity check etag ok");
	strictEqual(seqFile.id(_), "testSeqFile", " get EdiCacheEntity check id ok");
	strictEqual(seqFile.type(_), "seqFile", " get EdiCacheEntity check type ok");
	strictEqual(JSON.stringify(seqFile.json(_)), '{\"test\":\"testSeqFile\",\"test2\":{\"test2\":\"testSeqFile2\"}}', " get EdiCacheEntity check json ok");
	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuidsSeqFile,
		db: db
	});

	var uuidsSeqFile = EdiEntity.createEdiCacheEntity(_, {
		jsons: {
			test: "testSeqFile",
			test2: {
				test2: "testSeqFile2"
			}
		},
		type: "seqFile",
		etag: "AAAA",
		id: "testSeqFile",
		db: db
	});

	EdiEntity.dropAllEdiCacheEntity(_, {
		db: db
	});
	var seqFile = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuidsSeqFile,
		db: db
	});
	strictEqual(seqFile == null, true, "drop all  EdiCacheEntity  ok ");

	start();
});
// t
asyncTest("test retrieve cache from a process ", function(_) {
	var uuid = [];

	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		jsons: {
			"messageMapping": {}
		},
		type: EdiType.MESSAGEMAPPING,
		id: "test",
		etag: "etagBidon",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		jsons: {
			"seqFile": {}
		},
		type: EdiType.SEQFILE,
		id: "test",
		etag: "etagBidon",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		jsons: {
			"protocol": {}
		},
		type: EdiType.PROTOCOL,
		id: "test",
		etag: "etagBidon",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		jsons: {
			"ediFlow": {}
		},
		type: EdiType.EDIFLOW,
		id: "test",
		etag: "etagBidon",
		db: db
	}));
	strictEqual(uuid.length == 4, true, "create cache entity ok");
	var ediProcess = EdiProcess.createEdiProcess(_, {
		idProcess: "idProcessTest",
		messageMapping: "test",
		sequentialFile: "test",
		protocol: "test",
		ediFlow: "test",
		db: db
	});

	strictEqual(ediProcess != null, true, " ediProcess created ");

	strictEqual(JSON.stringify(ediProcess.sequentialFile(_)), "{\"seqFile\":{}}", " retrieve seqFile  ok  created ");
	strictEqual(JSON.stringify(ediProcess.messageMapping(_)), "{\"messageMapping\":{}}", " retrieve messageMapping ok  created ");
	strictEqual(JSON.stringify(ediProcess.protocol(_)), "{\"protocol\":{}}", " retrieve protocol ok  created ");
	strictEqual(JSON.stringify(ediProcess.ediFlow(_)), "{\"ediFlow\":{}}", " retrieve ediFlow ok  created ");


	//delete all entity
	EdiProcess.removeEdiProcess(_, {
		idProcess: "idProcessTest",
		db: db
	});
	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuid,
		db: db
	});

	start();
});
asyncTest("cache process id context identifier", function(_) {
	var cache = EdiProcess.createEdiProcess(_, {
		idProcess: "idProcessEdi1",
		messageMapping: "mm",
		sequentialFile: "sf",
		ediFlow: "ef",
		protocol: "protocol",
		db: db
	});

	strictEqual(cache !== null, true, "create EdiProcess ok");

	strictEqual(cache.idProcess(_), "idProcessEdi1", "create EdiProcess  idProcess ok ");
	strictEqual(cache.idMessageMapping(_), "mm", "create EdiProcess  messageMapping ok ");
	strictEqual(cache.idSequentialFile(_), "sf", "create EdiProcess  sequentialFile ok ");
	strictEqual(cache.idEdiFlow(_), "ef", "create EdiProcess  ediFlow ok ");
	strictEqual(cache.idProtocol(_), "protocol", "create EdiProcess  protocol ok ");

	cache = EdiProcess.getEdiProcess(_, {
		idProcess: "idProcessEdi1",
		db: db
	});
	strictEqual(cache != null, true, "get EdiProcess ok");

	strictEqual(cache.idProcess(_), "idProcessEdi1", "get EdiProcess  idProcess ok ");
	strictEqual(cache.idMessageMapping(_), "mm", "get EdiProcess  messageMapping ok ");
	strictEqual(cache.idSequentialFile(_), "sf", "get EdiProcess  sequentialFile ok ");
	strictEqual(cache.idEdiFlow(_), "ef", "get EdiProcess  ediFlow ok ");
	strictEqual(cache.idProtocol(_), "protocol", "get EdiProcess  protocol ok ");

	cache = EdiProcess.removeEdiProcess(_, {
		idProcess: "idProcessEdi1",
		db: db
	});

	cache = EdiProcess.getEdiProcess(_, {
		idProcess: "idProcessEdi1",
		db: db
	});
	strictEqual(cache === null, true, "get EdiProcess ok");

	start();
});

asyncTest("read receipt file", function(_) {
	var ediSadUnitConfig = config.edi && config.edi.unit && config.edi.unit.sadfsq || {};
	var recOptions = {
		recMode: ediSadUnitConfig.online ? "REC" : "PLAY",
		fileName: "read_receipt1.json",
		path: "node_modules/syracuse-edi/test/server/data/sadrec"
	};
	// store in mongodb all needed to perform the test
	var seqFileJson = JSON.parse(fs.readFile(_defDataDir + "context/seqFile.json", 'utf-8', _));
	// var messageMappingJson = fs.readFile(_defDataDir + "context/messageMapping.json", 'utf-8', _);
	var protocolJson = JSON.parse(fs.readFile(_defDataDir + "context/protocol.json", 'utf-8', _));

	var opt = {
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		}
	};
	var buffList = EdiProcess.getReceiptFiles(_, protocolJson, seqFileJson, opt); // for unit test
	strictEqual(Object.keys(buffList).length === 2, true, " list file to read (nbreaded=[" + JSON.stringify(Object.keys(buffList)) + "] ok");
	start();
});
/*asyncTest("decode file API", function(_) {

    // store in mongodb all needed to perform the test
    var seqFileJson = JSON.parse(fs.readFile(_defDataDir + "context/seqFile.json", 'utf-8', _));
   // var messageMappingJson = fs.readFile(_defDataDir + "context/messageMapping.json", 'utf-8', _);
    var protocolJson = JSON.parse(fs.readFile(_defDataDir + "context/protocol.json", 'utf-8', _));
    var uuid = [];
    uuid.push(EdiEntity.createEdiCacheEntity(_,{
        jsons : seqFileJson,
        type : EdiType.SEQFILE,
        id : "test",
        etag : "etagBidon"
    }));

    uuid.push(EdiEntity.createEdiCacheEntity(_,{
        jsons : protocolJson,
        type : EdiType.PROTOCOL,
        id : "test",
        etag : "etagBidon"
    }));

    var option = {
        messageMapping : "test",
        sequentialFile : "test",
        protocol : "test"
    };

    EdiProcess.decodeFiles(_,"idProcess",option)

    EdiEntity.removeEdiCacheEntity(_,uuid);

    EdiEntity.dropAllEdiCacheEntity(_);

    start();
});*/
asyncTest("clean edi entity mongodb", 0, function(_) {
	EdiEntity.dropAllEdiCacheEntity(_, {
		db: db
	});
	EdiProcess.removeAllEdiProcess(_, {
		db: db
	});

	start();
});
asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});