"use strict";
/* jshint -W079 */
/* jshint unused: false */
/* global QUnit: false, asyncTest: false, test: false, strictEqual: false, ok: false, start: false, stop: false */

/*global QUnit, start, ok*/
var syracuse = require('syracuse-main/lib/syracuse');
var helpers = require('syracuse-core/lib/helpers');
var streams = require("streamline/lib/streams/streams");
var sys = require("util");
var config = require('config'); // must be first syracuse require
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var EdiProcess = require("syracuse-edi/lib/ediProcess");
var EdiEntity = require("syracuse-edi/lib/ediEntity");
var EdiType = require("syracuse-edi/lib/enumType").EdiType;
var fs = require("streamline-fs");
var globals = require('streamline/lib/globals');
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var mongodb = require('streamline-mongodb');
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var ediSadUnitConfig = config.edi && config.edi.unit && config.edi.unit.sadfsq || {};
var SadFsqClient = require('syracuse-x3/lib/clients/sadfsq/sadfsqClient').SadFsqClient;
var sa = require("syracuse-orm/lib/storageArea");
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");

var _defDataDir = require("path").join(__dirname, "../server/data/");
var dbName = "unit_test";

function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, dbName);
}



var endpointTest;
endpointTest = {
	dataset: function(_) {
		return "GX3APP";
	},
	getModel: function(_) {
		return {
			getEntity: function(_, nameEntity, facet) {
				return {
					name: nameEntity,
					getPrototype: function(_, name, facet) {
						return JSON.parse(fs.readFile(_defDataDir + "context/" + name + "_" + facet + ".json", 'utf-8', _));
					}
				};
			}
		};
	},
	x3server: function(_) {
		return {
			serverHost: function(_) {
				return "aws-x3-devx3";
			},
			serverPort: function(_) {
				return 2050;
			}
		};
	}
};
globals.context = globals.context || {};
globals.context.session = {
	id: helpers.uuid.generate(),
	getUserLogin: function(_) {
		return "guest";
	},
	getUserProfile: function(_) {

		return {
			user: function(_) {
				// getting the administration ORM
				var db = adminHelper.getCollaborationOrm(_);

				// the metamodel is associated to the orm
				var model = db.model;

				var entity = db.model.getEntity(_, "user");
				// fetchInstance(callback, entity, filter)
				return db.fetchInstance(_, entity, {
					jsonWhere: {
						login: "admin"
					}
				});

			},
			selectedLocale: function(_) {
				return adminHelper.getCollaborationOrm(_).fetchInstance(_, db.model.getEntity(_, "localePreference"), {
					sdataWhere: "code eq 'en-us'"
				});
			}
		};
	},
	getSecurityProfile: function(_) {
		return null;
	}
};
var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});
var endpoint, db;
var prototype_EDISIH1;
var prototype_EDISIH1SCOL;
var prototype_EDIS0H2;
var prototype_EDISIH1FACTURA;

function _initPrototypeCache(_, database) {
	EdiEntity.dropAllEdiCacheEntity(_, {
		db: database
	});
	EdiProcess.removeAllEdiProcess(_, {
		db: database
	});

	EdiEntity.createEdiCacheEntity(_, {
		json: prototype_EDISIH1,
		type: "GX3APP",
		id: "EDISIH1",
		etag: "etagBidon",
		db: database
	});
	EdiEntity.createEdiCacheEntity(_, {
		json: prototype_EDISIH1SCOL,
		type: "GX3APP",
		id: "EDISIH1SCOL",
		etag: "etagBidon",
		db: database
	});
	EdiEntity.createEdiCacheEntity(_, {
		json: prototype_EDIS0H2,
		type: "GX3APP",
		id: "EDISOH2",
		etag: "etagBidon",
		db: database
	});

	var entity = EdiEntity.createEdiCacheEntity(_, {
		json: prototype_EDISIH1FACTURA,
		type: "GX3APP",
		id: "FACTURE",
		etag: "etagBidon",
		db: database
	});
}
var uuidJSonSOH;

asyncTest("init test environment ", function(_) {
	endpoint = adminTestFixtures.modifyCollaborationEndpoint(dbName);
	db = dataModel.getOrm(_, _getModel(), endpoint.datasets[dbName]);
	prototype_EDISIH1 = JSON.parse(fs.readFile(_defDataDir + "context/EDISIH1_$details.json", 'utf-8', _));
	prototype_EDISIH1SCOL = JSON.parse(fs.readFile(_defDataDir + "context/EDISIH1SCOL_$details.json", 'utf-8', _));
	prototype_EDIS0H2 = JSON.parse(fs.readFile(_defDataDir + "context/EDISOH2_$details.json", 'utf-8', _));
	prototype_EDISIH1FACTURA = JSON.parse(fs.readFile(_defDataDir + "context/EDISIH1FACTURA_$details.json", 'utf-8', _));
	start();
});

asyncTest("API store json", function(_) {
	// test create instance
	_initPrototypeCache(_, db);
	var jsons2 = [{
		"json1": "test1"
	}];
	var uuids = EdiEntity.createEdiCacheEntity(_, {
		json: jsons2,
		type: "sas",
		id: "jsons2",
		db: db
	});
	strictEqual(uuids.length === 1, true, "create EdiCacheEntity with an array of 1 json " + JSON.stringify(uuids));

	var jsons1 = [{
		"json2": "test1"
	}, {
		"json4": "toto"
	}, {
		"json5": "tat"
	}];
	var uuids2 = EdiEntity.createEdiCacheEntity(_, {
		json: jsons1,
		type: "sas",
		id: "json1",
		db: db
	});
	strictEqual(uuids2.length === 3, true, "create EdiCacheEntity with an array of 3 json " + JSON.stringify(uuids2));
	// create the same entity --> must failed
	try {
		EdiEntity.createEdiCacheEntity(_, {
			json: jsons1,
			type: "sas",
			id: "json1",
			db: db
		});
		ok(false, "forbidden to create same entity failed ");
	} catch (e) {
		ok(true, "forbidden to create same entity failed ok");

	}

	var uuid = EdiEntity.createEdiCacheEntity(_, {
		json: {
			"json6": "test1"
		},
		type: "sas",
		id: "json6",
		db: db
	});
	strictEqual(uuids != null, true, "create EdiCacheEntity with an json object " + JSON.stringify(uuid));

	// test retrieve  instance
	try {
		var json1 = EdiEntity.getEdiCacheJson(_, {
			uuid: uuid,
			db: db
		});
		strictEqual(JSON.stringify(json1), '{"json6":"test1"}', "get EdiCacheEntity json from a uuid=[" + uuid + "] : " + JSON.stringify(json1));
	} catch (e) {
		ok(false, " get EdiCacheEntity json from a uuid " + e.stack);
	}

	// test with filter
	try {
		var jsonFilter = EdiEntity.getEdiCacheJson(_, {
			filter: {
				jsonWhere: {
					id: "json6",
					type: "sas"
				}
			},
			db: db
		});
		strictEqual(JSON.stringify(jsonFilter), '{"json6":"test1"}', "get EdiCacheEntity with filter json from a uuid=[" + uuid + "] : " + JSON.stringify(jsonFilter));
	} catch (e) {
		ok(false, " get EdiCacheEntity json from a uuid " + e.stack);
	}

	try {
		json1 = EdiEntity.getEdiCacheJson(_, {
			uuid: uuids2,
			db: db
		});
		strictEqual(json1.length === jsons1.length, true, "get EdiCacheEntity json from a uuid=[" + JSON.stringify(uuids2) + "]");
		for (var i = 0; i < json1.length; i++) {
			strictEqual(JSON.stringify(json1[i][uuids2[i]]), JSON.stringify(jsons1[i]), "get EdiCacheEntity json from a uuid=[" + JSON.stringify(json1[i]) + "]");
		}
	} catch (e) {
		ok(false, " get EdiCacheEntity json from a uuid " + e.stack);
	}

	try {
		json1 = EdiEntity.getEdiCacheJson(_, {
			uuid: uuids,
			db: db
		});
		strictEqual(json1.length === jsons2.length, true, "get EdiCacheEntity json from a uuid=[" + JSON.stringify(uuids) + "]");
		for (var i = 0; i < json1.length; i++) {
			strictEqual(JSON.stringify(json1[i][uuids[i]]), JSON.stringify(jsons2[i]), "get EdiCacheEntity json from a uuid=[" + JSON.stringify(json1[i]) + "]");
		}
	} catch (e) {
		ok(false, " get EdiCacheEntity json from a uuid " + e.stack);
	}

	// test delete instance
	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuid,
		db: db
	});
	strictEqual(EdiEntity.getEdiCacheJson(_, {
		uuid: uuid,
		db: db
	}) === null, true, "remove EdiCacheEntity json from a uuid=[" + uuid + "] ok ");

	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuids2,
		db: db
	});
	try {
		EdiEntity.getEdiCacheJson(_, {
			uuid: uuids2,
			db: db
		});
		ok(false, "remove EdiCacheEntity json from a uuid=[" + JSON.stringify(uuids2) + "] ok ");
	} catch (e) {
		ok(true, "remove EdiCacheEntity json from a uuid=[" + JSON.stringify(uuids2) + "] ok ");

	}
	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuids,
		db: db
	});
	strictEqual(EdiEntity.getEdiCacheJson(_, {
		uuid: uuids[0],
		db: db
	}) === null, true, "remove EdiCacheEntity json from a uuid=[" + JSON.stringify(uuids) + "] ok ");

	// test get non exists data
	strictEqual(EdiEntity.getEdiCacheJson(_, {
		uuid: "test uuid bidon",
		db: db
	}) === null, true, "get EdiCacheEntity json from a uuid=[test uuid bidon] ok ");

	// test remove non exists data
	EdiEntity.removeEdiCacheEntity(_, {
		uuid: "test uuid bidon",
		db: db
	});

	// create a instance with a bad data
	try {
		uuids = EdiEntity.createEdiCacheEntity(_, {
			json: "test with bad data",
			type: "sas",
			id: "testBidon",
			db: db
		});
		ok(false, "test create edi instance with bad json data passe in a string ");
		EdiEntity.removeEdiCacheEntity(_, {
			uuid: uuids,
			db: db
		});

	} catch (e) {
		ok(true, "test create edi instance with bad json data passe in a string ");
	}


	// test create multiple instance
	uuids = EdiEntity.createEdiCacheEntity(_, {
		json: [{}, {
			"id": "test2"
		}, {
			"id": "test3"
		}],
		type: "sas",
		id: "testbidonArray",
		db: db
	});
	ok(uuids.length, 3, "test create edi instance with 3 json data ");
	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuids,
		db: db
	});

	try {
		uuids = EdiEntity.createEdiCacheEntity(_, {
			json: ["test with bad data", {
				"id": "test2"
			}, {
				"id": "test3"
			}],
			type: "sas",
			id: "testbidonArray",
			db: db
		});
		ok(false, "test create edi instance with bad json data passed in a string ");
		EdiEntity.removeEdiCacheEntity(_, {
			uuid: uuids,
			db: db
		});

	} catch (e) {
		ok(true, "test create edi instance with bad json data passe in an array ");
	}

	// test with etag like seqFile
	var uuidsSeqFile = EdiEntity.createEdiCacheEntity(_, {
		json: {
			test: "testSeqFile",
			test2: {
				test2: "testSeqFile2"
			}
		},
		type: "seqFile",
		etag: "AAAA",
		id: "testSeqFile",
		db: db
	});
	strictEqual(uuidsSeqFile != null, true, "create EdiCacheEntity seqFile  " + JSON.stringify(uuidsSeqFile));

	var seqFile = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuidsSeqFile,
		db: db
	});
	strictEqual(seqFile != null, true, "get EdiCacheEntity  from a uuid=[" + JSON.stringify(uuidsSeqFile) + "] ok ");
	strictEqual(seqFile.etag(_), "AAAA", " get EdiCacheEntity check etag ok");
	strictEqual(seqFile.id(_), "testSeqFile", " get EdiCacheEntity check id ok");
	strictEqual(seqFile.type(_), "seqFile", " get EdiCacheEntity check type ok");
	strictEqual(JSON.stringify(seqFile.json(_)), '{\"test\":\"testSeqFile\",\"test2\":{\"test2\":\"testSeqFile2\"}}', " get EdiCacheEntity check json ok");

	// test with filter
	var seqFile = EdiEntity.getEdiCacheEntity(_, {
		filter: {
			id: "testSeqFile",
			type: "seqFile"
		},
		db: db
	});
	strictEqual(seqFile != null, true, "get EdiCacheEntity  with filter from a uuid=[" + JSON.stringify(uuidsSeqFile) + "] ok ");
	strictEqual(seqFile.etag(_), "AAAA", " get EdiCacheEntity   with filter check etag ok");
	strictEqual(seqFile.id(_), "testSeqFile", " get EdiCacheEntity   with filter check id ok");
	strictEqual(seqFile.type(_), "seqFile", " get EdiCacheEntity   with filter check type ok");
	strictEqual(JSON.stringify(seqFile.json(_)), '{\"test\":\"testSeqFile\",\"test2\":{\"test2\":\"testSeqFile2\"}}', " get EdiCacheEntity  with filter check json ok");


	var uuidsSeqFile = EdiEntity.createEdiCacheEntity(_, {
		json: {
			test: "testSeqFile",
			test2: {
				test2: "testSeqFile2"
			}
		},
		type: "seqFile",
		etag: "AAAA",
		id: "testSeqFile2",
		db: db
	});

	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuidsSeqFile,
		db: db
	});

	var seqFile = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuidsSeqFile,
		db: db
	});
	strictEqual(seqFile == null, true, "drop all  EdiCacheEntity  ok ");

	// test get list of entity
	var uuidsMul = [];
	uuidsMul.push(EdiEntity.createEdiCacheEntity(_, {
		json: {},
		type: "test1",
		etag: "AAAA",
		id: "test1",
		db: db
	}));
	uuidsMul.push(EdiEntity.createEdiCacheEntity(_, {
		json: {},
		type: "test2",
		etag: "AAAA",
		id: "test2",
		db: db
	}));
	strictEqual(uuidsMul && uuidsMul.length === 2, true, "create 2 entity ");
	var test = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuidsMul,
		db: db
	});
	strictEqual(test && test.length == 2, true, "get multiple entity ok");

	// get multi with one non exists uuid
	uuidsMul.push("uuid-bidon");
	try {
		var test = EdiEntity.getEdiCacheEntity(_, {
			uuid: uuidsMul,
			db: db
		});
		ok(false, "get multiple entity with bad uuid ok");

	} catch (e) {
		ok(true, "get multiple entity with bad uuid ok");
	}


	start();
});
// t
asyncTest("test retrieve cache from a process ", function(_) {
	_initPrototypeCache(_, db);

	var uuid = [];

	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: {
			"messageMapping": {}
		},
		type: EdiType.MESSAGEMAPPING,
		id: "test",
		etag: "etagBidon",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: {
			"seqFile": {}
		},
		type: EdiType.SEQFILE,
		id: "test",
		etag: "etagBidon",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: {
			"protocol": {}
		},
		type: EdiType.PROTOCOL,
		id: "test",
		etag: "etagBidon",
		db: db
	}));

	strictEqual(uuid.length == 3, true, "create cache entity ok");
	var ediProcess = EdiProcess.createEdiProcess(_, {
		idProcess: "idProcessTest",
		messageMapping: uuid[0],
		sequentialFile: uuid[1],
		protocol: uuid[2],
		repName: "testClass",
		db: db
	});

	strictEqual(ediProcess != null, true, " ediProcess created ");

	strictEqual(JSON.stringify(ediProcess.sequentialFile(_)), "{\"seqFile\":{}}", " retrieve seqFile  ok  created ");
	strictEqual(JSON.stringify(ediProcess.messageMapping(_)), "{\"messageMapping\":{}}", " retrieve messageMapping ok  created ");
	strictEqual(JSON.stringify(ediProcess.protocol(_)), "{\"protocol\":{}}", " retrieve protocol ok  created ");


	//delete all entity
	EdiProcess.removeEdiProcess(_, {
		idProcess: "idProcessTest",
		db: db
	});
	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuid,
		db: db
	});

	start();
});
asyncTest("cache process id context identifier", function(_) {
	_initPrototypeCache(_, db);

	// store in mongodb all needed to perform the test
	var seqFileJson = JSON.parse(fs.readFile(_defDataDir + "context/seqFileSIH.json", 'utf-8', _));
	// var messageMappingJson = fs.readFile(_defDataDir + "context/messageMapping.json", 'utf-8', _);
	var protocolJson = JSON.parse(fs.readFile(_defDataDir + "context/protocol.json", 'utf-8', _));

	var uuids = [];
	uuids.push(EdiEntity.createEdiCacheEntity(_, {
		json: seqFileJson,
		type: EdiType.SEQFILE,
		id: "sf",
		etag: "etagBidon",
		db: db
	}));

	uuids.push(EdiEntity.createEdiCacheEntity(_, {
		json: protocolJson,
		type: EdiType.PROTOCOL,
		id: "protocol",
		etag: "etagBidon",
		db: db
	}));
	var cache = EdiProcess.createEdiProcess(_, {
		idProcess: "idProcessEdi1",
		messageMapping: "mm",
		sequentialFile: uuids[0],
		protocol: uuids[1],
		repName: "testClass",
		folder: "GX3APP",
		db: db
	});

	strictEqual(cache !== null, true, "create EdiProcess ok");

	strictEqual(cache.idProcess(_), "idProcessEdi1", "create EdiProcess  idProcess ok ");
	strictEqual(cache.idMessageMapping(_), "mm", "create EdiProcess  messageMapping ok ");
	strictEqual(cache.idSequentialFile(_) !== null, true, "create EdiProcess  sequentialFile ok , uuid seqFile " + cache.idSequentialFile(_));
	strictEqual(cache.idProtocol(_) !== null, true, "create EdiProcess  protocol ok uuid protocol " + cache.idProtocol(_));
	strictEqual(cache.folder(_), "GX3APP", "create EdiProcess  folder ok ");
	strictEqual(cache.endPoint(_) != null, true, "create EdiProcess :needs endPoint GX3APP in syracuse database ok ");

	cache = EdiProcess.getEdiProcess(_, {
		idProcess: "idProcessEdi1",
		db: db
	});
	strictEqual(cache != null, true, "get EdiProcess ok");

	strictEqual(cache.idProcess(_), "idProcessEdi1", "get EdiProcess  idProcess ok ");
	strictEqual(cache.idSequentialFile(_) !== null, true, "create EdiProcess  sequentialFile ok , uuid seqFile " + cache.idSequentialFile(_));
	strictEqual(cache.idProtocol(_) !== null, true, "create EdiProcess  protocol ok uuid protocol " + cache.idProtocol(_));

	cache = EdiProcess.removeEdiProcess(_, {
		idProcess: "idProcessEdi1",
		db: db
	});

	cache = EdiProcess.getEdiProcess(_, {
		idProcess: "idProcessEdi1",
		db: db
	});
	strictEqual(cache === null, true, "get EdiProcess ok");

	start();
});

asyncTest("read receipt file", function(_) {
	_initPrototypeCache(_, db);

	var recOptions = {
		recMode: ediSadUnitConfig.online ? "REC" : "PLAY",
		fileName: "read_receipt1.json",
		path: "node_modules/syracuse-edi/test/server/data/sadrec"
	};
	if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file

	// store in mongodb all needed to perform the test
	var seqFileJson = JSON.parse(fs.readFile(_defDataDir + "context/seqFileSIH.json", 'utf-8', _));
	// var messageMappingJson = fs.readFile(_defDataDir + "context/messageMapping.json", 'utf-8', _);
	var protocolJson = JSON.parse(fs.readFile(_defDataDir + "context/protocol.json", 'utf-8', _));

	var opt = {
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		}
	};
	var buffList = EdiProcess.getReceiptFiles(_, protocolJson, seqFileJson, null, opt); // for unit test
	strictEqual(Object.keys(buffList).length === 5, true, " list file to read (nbreaded=[" + JSON.stringify(Object.keys(buffList)) + "] ok");
	strictEqual(typeof buffList[Object.keys(buffList)[0]], "string", "all buffer has be decoded in string ok");

	start();
});

asyncTest("write issue file", function(_) {
	_initPrototypeCache(_, db);

	var recOptions = {
		recMode: ediSadUnitConfig.online ? "REC" : "PLAY",
		fileName: "write_issue1.json",
		path: "node_modules/syracuse-edi/test/server/data/sadrec"
	};
	if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file

	// store in mongodb all needed to perform the test
	// var messageMappingJson = fs.readFile(_defDataDir + "context/messageMapping.json", 'utf-8', _);
	var protocolJson = JSON.parse(fs.readFile(_defDataDir + "context/protocol.json", 'utf-8', _));
	var output = {
		"test.txt": "string to write "
	};
	var opt = {
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		encoding: "utf8"
	};



	EdiProcess.writeIssueFiles(_, protocolJson, null, null, output, opt); // for unit test
	recOptions.fileName = "write_check.json";
	var sadfs = new SadFsqClient(_, endpointTest.x3server(_).serverHost(_), endpointTest.x3server(_).serverPort(_), "apisu", "apisu", false, recOptions);

	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/test.txt"
	}, {
		flag: "r",
		encoding: "utf-8"
	});
	strictEqual(read != null, true, " write issue file ok  ");
	strictEqual(read, output["test.txt"], " check content of written file ok ");

	sadfs.unlink(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/test.txt"
	});
	try {
		recOptions.fileName = "write_checkunlink.json";

		var sadfs = new SadFsqClient(_, endpoint.x3server(_).serverHost(_), endpoint.x3server(_).serverPort(_), "apisu", "apisu", false, recOptions);

		var read = sadfs.readFile(_, {
			path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/test.txt"
		}, {
			flag: "r",
			encoding: "utf-8"
		});
		ok(false, "unlink file ok " + read);

	} catch (e) {
		ok(true, "unlink file ok");
	}

	start();
});

asyncTest("decode file API", function(_) {
	_initPrototypeCache(_, db);

	var recOptions = {
		recMode: ediSadUnitConfig.online ? "REC" : "PLAY",
		fileName: "decodeFile1.json",
		path: "node_modules/syracuse-edi/test/server/data/sadrec"
	};
	if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file

	// store in mongodb all needed to perform the test
	var seqFileJson = JSON.parse(fs.readFile(_defDataDir + "context/seqFileSIH.json", 'utf-8', _));
	// var messageMappingJson = fs.readFile(_defDataDir + "context/messageMapping.json", 'utf-8', _);
	var protocolJson = JSON.parse(fs.readFile(_defDataDir + "context/protocol.json", 'utf-8', _));
	var uuid = [];
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: seqFileJson,
		type: EdiType.SEQFILE,
		id: "test",
		etag: "etagBidon",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: {},
		type: EdiType.MESSAGEMAPPING,
		id: "test",
		etag: "etagBidon",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: protocolJson,
		type: EdiType.PROTOCOL,
		id: "test",
		etag: "etagBidon",
		db: db
	}));

	var option = {
		messageMapping: uuid[1],
		sequentialFile: uuid[0],
		protocol: uuid[2],
		prototype: prototype_EDISIH1,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		repName: "EDISIH1",
		folder: "GX3APP",
		db: db,

	};
	var uuidList = EdiProcess.decodeEdiFiles(_, "idProcess", option);

	strictEqual(uuidList != null, true, "decoded file ok and return a uuid = " + JSON.stringify(uuidList));
	// check if the json generate exists
	uuidList.forEach_(_, function(_, item) {
		var entityGen = EdiEntity.getEdiCacheEntity(_, {
			uuid: item.uuid,
			db: db
		});
		strictEqual(entityGen != null, true, "json generate exists in syracuse mongodb database identify by uuid = " + item.uuid);
		strictEqual(JSON.stringify(entityGen.json(_)), '{"NUM":"FCC11014VEN00000014","BPR":"ESP0001","CPY":"110","FCY":"C110","BPAPAY":"A01","CUR":"EUR","PTE":"CHEQ100COMPTANT","AMTATI":75880,"AMTNOT":66000,"SIVTYP":"FAC","ACCDAT":"2014-02-24","ESIH1SID":[{"NUM":"FCC11014VEN00000014","SIDLIN":1000,"ITMREF":"CDROM","ITMDES":"CD-ROM 16X","SAU":"Un","QTY":3,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":30000},{"NUM":"FCC11014VEN00000014","SIDLIN":2000,"ITMREF":"CDROM1","ITMDES":"CD-ROM1 16X","SAU":"Un","QTY":2,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":20000}]}', "json generate from files ok");

	});
	var option = {
		messageMapping: uuid[1],
		sequentialFile: uuid[0],
		protocol: uuid[2],
		prototype: prototype_EDISIH1,
		repName: "EDISIH1",
		folder: "GX3APP",
		db: db,

	};
	var uuidList = EdiProcess.decodeEdiFiles(_, "idProcessSad", option);



	strictEqual(uuidList != null, true, "decoded file ok and return a uuid = " + JSON.stringify(uuidList));
	// check if the json generate exists
	uuidList.forEach_(_, function(_, item) {
		var entityGen = EdiEntity.getEdiCacheEntity(_, {
			uuid: item.uuid,
			db: db
		});
		strictEqual(entityGen != null, true, "json generate exists in syracuse mongodb database identify by uuid = " + item.uuid);
		strictEqual(JSON.stringify(entityGen.json(_)), '{"NUM":"FCC11014VEN00000014","BPR":"ESP0001","CPY":"110","FCY":"C110","BPAPAY":"A01","CUR":"EUR","PTE":"CHEQ100COMPTANT","AMTATI":75880,"AMTNOT":66000,"SIVTYP":"FAC","ACCDAT":"2014-02-24","ESIH1SID":[{"NUM":"FCC11014VEN00000014","SIDLIN":1000,"ITMREF":"CDROM","ITMDES":"CD-ROM 16X","SAU":"Un","QTY":3,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":30000},{"NUM":"FCC11014VEN00000014","SIDLIN":2000,"ITMREF":"CDROM1","ITMDES":"CD-ROM1 16X","SAU":"Un","QTY":2,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":20000}]}', "json generate from files ok");

	});

	// decode file wihtout cache
	var option = {
		messageMapping: {},
		sequentialFile: seqFileJson,
		protocol: protocolJson,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		prototype: prototype_EDISIH1,
		repName: "EDISIH1",
		folder: "GX3APP",
		db: db,

	};
	var uuidList = EdiProcess.decodeEdiFiles(_, "idProcessWithoutCache", option);

	strictEqual(uuidList != null, true, "decoded file without cache ok and return a uuid = " + JSON.stringify(uuidList));
	// check if the json generate exists
	uuidList.forEach_(_, function(_, item) {
		var entityGen = EdiEntity.getEdiCacheEntity(_, {
			uuid: item.uuid,
			db: db
		});
		strictEqual(entityGen != null, true, "json generate without cache exists in syracuse mongodb database identify by uuid = " + item.uuid);
		strictEqual(JSON.stringify(entityGen.json(_)), '{"NUM":"FCC11014VEN00000014","BPR":"ESP0001","CPY":"110","FCY":"C110","BPAPAY":"A01","CUR":"EUR","PTE":"CHEQ100COMPTANT","AMTATI":75880,"AMTNOT":66000,"SIVTYP":"FAC","ACCDAT":"2014-02-24","ESIH1SID":[{"NUM":"FCC11014VEN00000014","SIDLIN":1000,"ITMREF":"CDROM","ITMDES":"CD-ROM 16X","SAU":"Un","QTY":3,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":30000},{"NUM":"FCC11014VEN00000014","SIDLIN":2000,"ITMREF":"CDROM1","ITMDES":"CD-ROM1 16X","SAU":"Un","QTY":2,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":20000}]}', "json generate without cache from files ok");


	});


	// case entity that doesn't exists
	option.repName = "NOTEXISTCLASS";
	option.prototype = {};
	try {
		var uuid = EdiProcess.decodeEdiFiles(_, "idProcessNonExist", option);
		ok(false, "decoded file with non exists file ok ");
	} catch (e) {
		ok(true, "decoded file with non exists file ok ");
	}

	// case entity that doesn't exists
	option.repName = "EDISIH1";
	option.prototype = prototype_EDISIH1;
	option.sequentialFile = {};
	try {
		var uuid = EdiProcess.decodeEdiFiles(_, "idProcessBadSeqFile", option);
		ok(false, "decoded file without correct sequentielFile  ok ");
	} catch (e) {
		ok(true, "decoded file without correct sequentielFile  ok ");
	}

	var option = {
		messageMapping: {},
		sequentialFile: seqFileJson,
		protocol: protocolJson,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		prototype: prototype_EDISIH1,
		repName: "EDISIH1",
		db: db,
	};

	var uuid = EdiProcess.decodeEdiFiles(_, "idProcessNoCustomFolder", option);
	strictEqual(uuidList != null, true, "decoded file without cache ok and return a uuid = " + JSON.stringify(uuidList));
	// check if the json generate exists
	uuidList.forEach_(_, function(_, item) {
		var entityGen = EdiEntity.getEdiCacheEntity(_, {
			uuid: item.uuid,
			db: db
		});
		strictEqual(entityGen != null, true, "json generate without cache exists in syracuse mongodb database identify by uuid = " + item.uuid);
		strictEqual(JSON.stringify(entityGen.json(_)), '{"NUM":"FCC11014VEN00000014","BPR":"ESP0001","CPY":"110","FCY":"C110","BPAPAY":"A01","CUR":"EUR","PTE":"CHEQ100COMPTANT","AMTATI":75880,"AMTNOT":66000,"SIVTYP":"FAC","ACCDAT":"2014-02-24","ESIH1SID":[{"NUM":"FCC11014VEN00000014","SIDLIN":1000,"ITMREF":"CDROM","ITMDES":"CD-ROM 16X","SAU":"Un","QTY":3,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":30000},{"NUM":"FCC11014VEN00000014","SIDLIN":2000,"ITMREF":"CDROM1","ITMDES":"CD-ROM1 16X","SAU":"Un","QTY":2,"GROPRI":1000000,"NETPRI":1000000,"AMTLIN":20000}]}', "json generate without cache from files ok");
	});


	start();
});

asyncTest("generate EDI file API", function(_) {
	_initPrototypeCache(_, db);

	var recOptions = {
		recMode: ediSadUnitConfig.online ? "REC" : "PLAY",
		fileName: "generateFile1.json",
		path: "node_modules/syracuse-edi/test/server/data/sadrec"
	};
	if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file

	// store in mongodb all needed to perform the test
	var seqFileJson = JSON.parse(fs.readFile(_defDataDir + "context/seqFileSIH.json", 'utf-8', _));

	var protocolJson = JSON.parse(fs.readFile(_defDataDir + "context/protocol.json", 'utf-8', _));
	var jsonSIH = {
		"ESIH1SID": [{
			"NUM": "FCC11014VEN00000014",
			"SIDLIN": 1000,
			"ITMREF": "CDROM",
			"ITMDES": "CD-ROM 16X",
			"SAU": "Un",
			"QTY": 3,
			"GROPRI": 1000000,
			"NETPRI": 1000000,
			"AMTLIN": 30000
		}, {
			"NUM": "FCC11014VEN00000014",
			"SIDLIN": 2000,
			"ITMREF": "CDROM1",
			"ITMDES": "CD-ROM1 16X",
			"SAU": "Un",
			"QTY": 2,
			"GROPRI": 1000000,
			"NETPRI": 1000000,
			"AMTLIN": 20000
		}],
		"NUM": "FCC11014VEN00000014",
		"BPR": "ESP0001",
		"CPY": "110",
		"FCY": "C110",
		"BPAPAY": "A01",
		"CUR": "EUR",
		"PTE": "CHEQ100COMPTANT",
		"AMTATI": 75880,
		"AMTNOT": 66000,
		"SIVTYP": "FAC",
		"ACCDAT": "2014-02-24"
	};
	var fileBuff = {};
	fileBuff["CABFAC"] = fs.readFile(_defDataDir + "ediFiles/CABFAC.txt", 'utf-8', _);
	fileBuff["LINFAC"] = fs.readFile(_defDataDir + "ediFiles/LINFAC.txt", 'utf-8', _);
	var uuidjson = EdiEntity.createEdiCacheEntity(_, {
		json: jsonSIH,
		id: "sas",
		etag: "etagBidon",
		db: db
	});
	var uuid = [];
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: {},
		type: EdiType.MESSAGEMAPPING,
		id: "test",
		etag: "etagBidon",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: seqFileJson,
		type: EdiType.SEQFILE,
		id: "test",
		etag: "etagBidon",
		db: db
	}));

	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: protocolJson,
		type: EdiType.PROTOCOL,
		id: "test",
		etag: "etagBidon",
		db: db
	}));

	// test edi file without valid option
	var option = {
		protocol: uuid[2],
		prototype: prototype_EDISIH1,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		repName: "EDISIH1",
		folder: "GX3APP",
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		db: db,
	};
	try {
		var result = EdiProcess.generateEdiFiles(_, "idProcess", option);
	} catch (e) {
		ok(true, "not valid option uuiid, sequentialFile and messageMapping not present ");
	}
	var option = {
		messageMapping: uuid[0],
		sequentialFile: uuid[1],
		protocol: uuid[2],
		prototype: prototype_EDISIH1,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		repName: "EDISIH1",
		folder: "GX3APP",
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		db: db,
	};
	try {
		var result = EdiProcess.generateEdiFiles(_, "idProcess", option);
	} catch (e) {
		ok(true, "not valid option uuid not present ");
	}

	var option = {
		messageMapping: uuid[0],
		sequentialFile: uuid[1],
		protocol: uuid[2],
		flow: "test bidon",
		prototype: prototype_EDISIH1,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		repName: "EDISIH1",
		folder: "GX3APP",
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		uuid: [uuidjson],
		db: db,
	};
	var result = EdiProcess.generateEdiFiles(_, "idProcess", option);

	strictEqual(result.length, 1, "result length ok ");
	strictEqual(result[0].fileNames.length, 2, "result fileNames ok ");
	strictEqual(result[0].uuid, uuidjson, "result uuid ok ");
	strictEqual(result[0].purgeCache, true, "result purge Cache  ok ");

	// check if the file generate exists and is ok
	var endpoint = endpointTest;
	recOptions.fileName = "checkGenerateEdi1.json";
	var sadfs = new SadFsqClient(_, endpoint.x3server(_).serverHost(_), endpoint.x3server(_).serverPort(_), "apisu", "apisu", false, recOptions);
	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/CABFAC"
	}, {
		flag: "r",
		encoding: "utf-8"
	});

	strictEqual(read, fileBuff["CABFAC"], "file  CABFAC generate ok");

	read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/LINFAC"
	}, {
		flag: "r",
		encoding: "utf-8"
	});

	strictEqual(read, fileBuff["LINFAC"], "file LINFAC generate ok");



	var option = {
		messageMapping: {},
		sequentialFile: seqFileJson,
		protocol: protocolJson,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		prototype: prototype_EDISIH1,
		repName: "EDISIH1",
		folder: "GX3APP",
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		uuid: [uuidjson],
		keepCache: true,
		db: db,
	};
	recOptions.fileName = "generateEdiJsonCache.json";

	result = EdiProcess.generateEdiFiles(_, "idProcessJsonCache", option);
	strictEqual(result.length, 1, "result length ok ");

	strictEqual(result[0].fileNames.length, 2, "result fileNames ok ");
	strictEqual(result[0].uuid, uuidjson, "result uuid ok ");
	strictEqual(!result[0].purgeCache, true, "result purge Cache false ok ");

	// check if the json cache was purge
	strictEqual(EdiEntity.getEdiCacheEntity(_, {
		uuid: uuidjson
	}) === null, true, "json correctly purged");


	// cehck with context passed in paraemeter instead of using the cache
	var option = {
		messageMapping: {},
		sequentialFile: seqFileJson,
		protocol: protocolJson,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		prototype: prototype_EDISIH1,
		repName: "EDISIH1",
		folder: "GX3APP",
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		uuid: [uuidjson],
		db: db,
	};
	recOptions.fileName = "generateEdi2.json";

	result = EdiProcess.generateEdiFiles(_, "idProcessWithoutCache", option);
	strictEqual(result.length, 1, "result length ok ");

	strictEqual(result[0].fileNames.length, 2, "result fileNames ok ");
	strictEqual(result[0].uuid, uuidjson, "result uuid ok ");
	strictEqual(result[0].purgeCache, true, "result purge Cache  ok ");

	// check if the file generate exists and is ok
	var endpoint = endpointTest;
	recOptions.fileName = "checkGenerateEdi2.json";
	var sadfs = new SadFsqClient(_, endpoint.x3server(_).serverHost(_), endpoint.x3server(_).serverPort(_), "apisu", "apisu", false, recOptions);

	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/CABFAC"
	}, {
		flag: "r",
		encoding: "utf-8"
	});
	strictEqual(read, fileBuff["CABFAC"], "file  CABFAC without cache generate ok");
	read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/LINFAC"
	}, {
		flag: "r",
		encoding: "utf-8"
	});
	strictEqual(read, fileBuff["LINFAC"], "file LINFAC without cache generate ok");


	var option = {
		messageMapping: {},
		sequentialFile: seqFileJson,
		protocol: protocolJson,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		prototype: prototype_EDISIH1,
		repName: "EDISIH1",
		folder: "GX3APP",
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		uuid: [uuidjson, uuidjson],
		db: db,
	};
	// generate multiple instance of rep in 1 seqFile
	recOptions.fileName = "generateEdi3.json";

	result = EdiProcess.generateEdiFiles(_, "idProcessWithoutCache2", option);
	strictEqual(result.length, 2, "result length ok ");
	strictEqual(result[0].fileNames.length, 2, "result fileNames ok ");
	strictEqual(result[0].uuid, uuidjson, "result uuid ok ");

	var endpoint = endpointTest;
	recOptions.fileName = "checkGenerateEdiCache2.json";
	var sadfs = new SadFsqClient(_, endpoint.x3server(_).serverHost(_), endpoint.x3server(_).serverPort(_), "apisu", "apisu", false, recOptions);

	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/CABFAC"
	}, {
		flag: "r",
		encoding: "utf-8"
	});

	strictEqual(read, fileBuff["CABFAC"] + "\r\n" + fileBuff["CABFAC"], "file  CABFAC without cache generate ok");
	read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/ISSUE/LINFAC"
	}, {
		flag: "r",
		encoding: "utf-8"
	});
	strictEqual(read, fileBuff["LINFAC"] + "\r\n" + fileBuff["LINFAC"], "file LINFAC without cache generate ok");


	start();
});

asyncTest("generate import file API", function(_) {
	_initPrototypeCache(_, db);

	var recOptions = {
		recMode: ediSadUnitConfig.online ? "REC" : "PLAY",
		fileName: "generateFile2.json",
		path: "node_modules/syracuse-edi/test/server/data/sadrec"
	};
	if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file

	// store in mongodb all needed to perform the test
	var messageMappingJson = JSON.parse(fs.readFile(_defDataDir + "context/messageMappingSOH.json", 'utf-8', _));

	var protocolJson = JSON.parse(fs.readFile(_defDataDir + "context/protocol.json", 'utf-8', _));
	var jsonSOH = JSON.parse(fs.readFile(_defDataDir + "context/jsonImport.json", 'utf-8', _));
	var fileBuff = fs.readFile(_defDataDir + "context/importSOH.csv", 'utf-8', _);

	var uuid = [];
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: messageMappingJson,
		type: EdiType.MESSAGEMAPPING,
		id: "test",
		etag: "etagBidon",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: {},
		type: EdiType.SEQFILE,
		id: "test",
		etag: "etagBidon",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: protocolJson,
		id: "test",
		etag: "etagBidon",
		type: EdiType.PROTOCOL,
		db: db
	}));
	var uuidjson = EdiEntity.createEdiCacheEntity(_, {
		json: jsonSOH,
		id: "sas",
		etag: "etagBidon",
		type: "sas",
		db: db
	});

	var option = {
		messageMapping: uuid[0],
		sequentialFile: uuid[1],
		protocol: uuid[2],
		prototype: prototype_EDIS0H2,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		repName: "EDISOH2",
		folder: "GX3APP",
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		uuid: [uuidjson],
		path: "/home1/adonix/GX3APP/TMP/TESTAP/import",
		db: db,
	};
	var result = EdiProcess.generateImportFiles(_, "idProcess", option);
	// check if the file generate exists and is ok
	var endpoint = endpointTest;
	recOptions.fileName = "checkGenerateImport.json";
	var sadfs = new SadFsqClient(_, endpoint.x3server(_).serverHost(_), endpoint.x3server(_).serverPort(_), "apisu", "apisu", false, recOptions);
	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/import/" + result[0].fileNames[0]
	}, {
		flag: "r",
		encoding: "utf-8"
	});

	strictEqual(read, fileBuff, "file import generate ok");
	sadfs.unlink(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/import/" + result[0].fileNames[0]
	});

	// with context directly in parameter instead of use cache
	var option = {
		messageMapping: messageMappingJson,
		sequentialFile: {},
		protocol: protocolJson,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		prototype: prototype_EDIS0H2,
		repName: "EDISOH2",
		folder: "GX3APP",
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		uuid: [uuidjson],
		path: "/home1/adonix/GX3APP/TMP/TESTAP/import",
		db: db,
	};
	recOptions.fileName = "generateImport2.json";

	var result = EdiProcess.generateImportFiles(_, "idProcessWithoutCache", option);
	// check if the file generate exists and is ok
	var endpoint = endpointTest;
	recOptions.fileName = "checkGenerateImport2.json";
	var sadfs = new SadFsqClient(_, endpoint.x3server(_).serverHost(_), endpoint.x3server(_).serverPort(_), "apisu", "apisu", false, recOptions);

	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/import/" + result[0].fileNames[0]
	}, {
		flag: "r",
		encoding: "utf-8"
	});

	strictEqual(read, fileBuff, "file import without cache generate ok");
	sadfs.unlink(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/import/" + result[0].fileNames[0]
	});


	start();
});

asyncTest("generate import file API with failure during pushed files", function(_) {
	_initPrototypeCache(_, db);

	var recOptions = {
		recMode: ediSadUnitConfig.online ? "REC" : "PLAY",
		fileName: "generateFileFailedWrite.json",
		path: "node_modules/syracuse-edi/test/server/data/sadrec"
	};
	if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file

	// store in mongodb all needed to perform the test
	var messageMappingJson = JSON.parse(fs.readFile(_defDataDir + "context/messageMappingSOH.json", 'utf-8', _));
	var protocolJsonOk = JSON.parse(fs.readFile(_defDataDir + "context/protocol.json", 'utf-8', _));

	var protocolJson = JSON.parse(fs.readFile(_defDataDir + "context/protocolWrongPath.json", 'utf-8', _));
	var jsonSOH = JSON.parse(fs.readFile(_defDataDir + "context/jsonImport.json", 'utf-8', _));
	var fileBuff = fs.readFile(_defDataDir + "context/importSOH.csv", 'utf-8', _);

	var uuid = [];
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: messageMappingJson,
		type: EdiType.MESSAGEMAPPING,
		id: "test",
		etag: "etagBidon",
		db: db
	}));
	uuid.push(EdiEntity.createEdiCacheEntity(_, {
		json: {},
		type: EdiType.SEQFILE,
		id: "test",
		etag: "etagBidon",
		db: db
	}));
	var uuidProtocol = EdiEntity.createEdiCacheEntity(_, {
		json: protocolJson,
		id: "test",
		etag: "etagBidon",
		type: EdiType.PROTOCOL,
		db: db
	});
	var uuidjson = EdiEntity.createEdiCacheEntity(_, {
		json: jsonSOH,
		id: "sas",
		etag: "etagBidon",
		type: "sas",
		db: db
	});

	var option = {
		messageMapping: uuid[0],
		sequentialFile: uuid[1],
		protocol: uuidProtocol,
		prototype: prototype_EDIS0H2,
		sadfsq: {
			recOptions: recOptions,
			user: "apisu",
			password: "apisu"
		},
		repName: "EDISOH2",
		folder: "GX3APP",
		endpoint: endpointTest, // add for unit in order to not use th standard endpoint and to work offline
		uuid: [uuidjson],
		path: "/home1/adonix/GX3APP/POUET/TMP/TESTAP/import",
		db: db,
	};
	try {
		EdiProcess.generateImportFiles(_, "idProcessFailed", option);

		ok(false, "generate not raised exception ");

	} catch (e) {
		ok(true, "generate raise exception " + e.message);
	}
	// check if document are store in storage Area
	var doc = sa.getDocumentInstance(_, {
		sdataWhere: "description eq idProcessFailed"
	}, "EDI");
	strictEqual(doc && doc.length != 0, true, "document saved in storage area");
	var docBuf = sa.readAll(_, {
		jsonWhere: {
			$uuid: doc.$uuid
		}
	}).toString('utf-8');

	strictEqual(docBuf, fileBuff, "document saved content ok");


	EdiEntity.removeEdiCacheEntity(_, {
		uuid: uuidProtocol
	});
	var uuidProt = EdiEntity.createEdiCacheEntity(_, {
		json: protocolJsonOk,
		id: "test2",
		etag: "etagBidon",
		type: EdiType.PROTOCOL,
		db: db
	});
	option.path = "/home1/adonix/GX3APP/TMP/TESTAP/import";
	option.protocol = uuidProt;
	recOptions.fileName = "generateFileFailedWriteOK.json";

	var result = EdiProcess.generateImportFiles(_, "idProcessFailed", option);

	strictEqual(result[0].uuid, uuidjson, "recall generate to write uuid ok");
	strictEqual(result[0].fileNames[0] != null, true, "recall generate to write file : " + result[0].fileNames[0] + " ");

	var doc = sa.getDocumentInstance(_, {
		sdataWhere: "description eq idProcessFailed"
	}, "EDI");
	strictEqual(doc === null, true, "document saved removed in storage area");

	// check if the file generate exists and is ok
	var endpoint = endpointTest;
	recOptions.fileName = "checkGenerateImportFailed.json";
	var sadfs = new SadFsqClient(_, endpoint.x3server(_).serverHost(_), endpoint.x3server(_).serverPort(_), "apisu", "apisu", false, recOptions);
	var read = sadfs.readFile(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/import/" + result[0].fileNames[0]
	}, {
		flag: "r",
		encoding: "utf-8"
	});

	strictEqual(read, fileBuff, "file import generate ok");
	sadfs.unlink(_, {
		path: "/home1/adonix/GX3APP/TMP/TESTAP/import/" + result[0].fileNames[0]
	});

	start();
});


asyncTest("test update edi entity ", function(_) {
	// clean
	EdiEntity.dropAllEdiCacheEntity(_, {
		db: db
	});
	EdiProcess.removeAllEdiProcess(_, {
		db: db
	});

	// create a sample entity

	var uuid = EdiEntity.createEdiCacheEntity(_, {
		json: {
			test: "test"
		},
		type: "test",
		id: "testUpdate",
		etag: "etagBidon",
		db: db
	});
	var uuid2 = EdiEntity.createEdiCacheEntity(_, {
		json: {
			test: "test2"
		},
		type: "test",
		id: "testUpdate2",
		etag: "etagBidon",
		db: db
	});

	strictEqual(uuid != null, true, "create of entity testUpdate ok");
	//check if it's create  and if value is correctly store
	var inst = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuid,
		db: db
	});
	strictEqual(inst != null, true, "instance exists in mongo (stored ok)");
	strictEqual(inst.$uuid, uuid, "uuid  " + inst.$uuid);
	strictEqual(inst.type(_), "test", "type  " + inst.type(_));
	strictEqual(inst.id(_), "testUpdate", "id  " + inst.id(_));
	strictEqual(inst.etag(_), "etagBidon", "etag " + inst.etag(_));
	strictEqual(JSON.stringify(inst.json(_)), '{"test":"test"}', "json  " + JSON.stringify(inst.json(_)));

	// update the value
	EdiEntity.updateEdiCacheEntity(_, {
		elems: [{
			uuid: uuid,
			json: {
				test: "testUpdate"
			}
		}],
		db: db
	});

	// check the change
	var inst = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuid,
		db: db
	});
	strictEqual(inst != null, true, "instance exists in mongo (updated ok)");
	strictEqual(inst.$uuid, uuid, "uuid  " + inst.$uuid);
	strictEqual(inst.type(_), "test", "type  " + inst.type(_));
	strictEqual(inst.id(_), "testUpdate", "id  " + inst.id(_));
	strictEqual(inst.etag(_), "etagBidon", "etag " + inst.etag(_));
	strictEqual(JSON.stringify(inst.json(_)), '{"test":"testUpdate"}', "json  " + JSON.stringify(inst.json(_)));

	// update the value
	EdiEntity.updateEdiCacheEntity(_, {
		elems: [{
			uuid: uuid,
			json: ""
		}],
		db: db
	});

	// check the change
	var inst = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuid,
		db: db
	});
	strictEqual(inst != null, true, "instance exists in mongo (updated ok)");
	strictEqual(inst.$uuid, uuid, "uuid  " + inst.$uuid);
	strictEqual(inst.type(_), "test", "type  " + inst.type(_));
	strictEqual(inst.id(_), "testUpdate", "id  " + inst.id(_));
	strictEqual(inst.etag(_), "etagBidon", "etag " + inst.etag(_));
	strictEqual(JSON.stringify(inst.json(_)), '\"\"', "json  " + JSON.stringify(inst.json(_)));

	// test update 2 entities
	EdiEntity.updateEdiCacheEntity(_, {
		elems: [{
			uuid: uuid,
			json: {
				test: "testUpdate2"
			}
		}, {
			uuid: uuid2,
			json: {
				test: "test2Update"
			}
		}],
		db: db
	});
	var inst = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuid,
		db: db
	});
	strictEqual(inst != null, true, "update 2 entity : instance exists in mongo (updated ok)");
	strictEqual(inst.$uuid, uuid, "update 2 entity : uuid  " + inst.$uuid);
	strictEqual(inst.type(_), "test", "update 2 entity : type  " + inst.type(_));
	strictEqual(inst.id(_), "testUpdate", "update 2 entity : id  " + inst.id(_));
	strictEqual(inst.etag(_), "etagBidon", "update 2 entity : etag " + inst.etag(_));
	strictEqual(JSON.stringify(inst.json(_)), '{"test":"testUpdate2"}', "update 2 entity : json  " + JSON.stringify(inst.json(_)));

	var inst = EdiEntity.getEdiCacheEntity(_, {
		uuid: uuid2,
		db: db
	});
	strictEqual(inst != null, true, "update 2 entity : instance exists in mongo (updated ok)");
	strictEqual(inst.$uuid, uuid2, "update 2 entity : uuid  " + inst.$uuid);
	strictEqual(inst.type(_), "test", "update 2 entity : type  " + inst.type(_));
	strictEqual(inst.id(_), "testUpdate2", "update 2 entity : id  " + inst.id(_));
	strictEqual(inst.etag(_), "etagBidon", "update 2 entity : etag " + inst.etag(_));
	strictEqual(JSON.stringify(inst.json(_)), '{"test":"test2Update"}', "update 2 entity : json  " + JSON.stringify(inst.json(_)));
	// test with non exists entity
	try {
		EdiEntity.updateEdiCacheEntity(_, {
			elems: [{
				uuid: "testBidon",
				json: {
					test: "testUpdate"
				}
			}],
			db: db
		});
		ok(false, "update non exists entity exception not raised ");
	} catch (e) {
		ok(true, "update non exists entity raise exception " + e.message);
	}

	try {

		EdiEntity.updateEdiCacheEntity(_, {
			elems: [{
				uuid: uuid,
				json: {
					test: "testUpdate2"
				}
			}, {
				uuid: "uuid-bidon",
				json: {
					test: "test2UpdateBidon"
				}
			}],
			db: db
		});
		ok(false, "update multiple instance with on non exists entity raise exception ");

	} catch (e) {
		ok(true, "update multiple instance with on non exists entity raise exception " + e.message);
	}

	start();
});

asyncTest("clean edi entity mongodb", 0, function(_) {

	EdiEntity.dropAllEdiCacheEntity(_, {
		db: db
	});
	EdiProcess.removeAllEdiProcess(_, {
		db: db
	});

	start();
});

asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});