"use strict";
var syracuse;
var url = require('url');
var config = require('config');
var globals = require("streamline/lib/globals");
var twitterAPI = require('./twitter');
var alchemy = require('./alchemy-transform');
var mongo = require('./mongo');
var ez = require('ez-streams');

var twitter;
var requestToken;
var requestTokenSecret;
var accessToken;
var accessTokenSecret;
var keywords;
var entity;
var key;
var since_id;
var count;

exports.dispatcher = function(config) {
	var routes = {
		query:function(_, request, response, qs) {
			console.log("twitter.dispatcher:query");
			keywords = qs.keywords || "sage";
			count    = qs.count || 100;
			since_id = qs.since_id;
			entity   = qs.entity || "entity";
			key      = qs.key || "key";

			twitter = new twitterAPI({
			    consumerKey: '9Nlj5l1ZlIpszvqN74xFEAaq1',
			    consumerSecret: 'yyuSwRa0dC3Gl2LOtE2RDeLJQIttyEZPJkN7Hrw2ZzO81O7GTw',
			    callback: 'http://127.0.0.1:8124/twitter/callback'
			});

			var results = twitter.getRequestToken([_]);
			requestToken       = results[0];
			requestTokenSecret = results[1];

			var location = "https://twitter.com/oauth/authenticate?oauth_token="+requestToken;
			console.log("redirect to "+location);
			var headers = {
				"content-type": "text/html; charset=utf8",
				"location": location,
			};
			response.writeHead(307, headers);
			response.end('<html><head><title>Redirecting...</title></head>' + //
				'<body><a href="' + location + '">click here to continue</a></body></html>', "utf8");			
			},
			callback:function(_, request, response, qs) {
				console.log("twitter.dispatcher:callback");
				function consoleWriter() {
					var id=0;
					return ez.devices.generic.writer(function(_, item) {
						item && console.log((++id)+" "+item.tweet.id+","+JSON.stringify(item.sentiment));
					});
				};

				try {
					console.log("getAccessToken:"+[requestToken,requestTokenSecret, qs.oauth_verifier].join(','));
					var results = twitter.getAccessToken(requestToken, requestTokenSecret, qs.oauth_verifier,[_]);
					accessToken       = results[0];
					accessTokenSecret = results[1];
					console.log("accessToken:"+accessToken);

					var params = {q:keywords};
					if(since_id) params.since_id = since_id;

					console.log("count:"+count);

					var src = function($params){
							var t=0;
							var tweets;
							var params = $params;

							console.log("search params:"+JSON.stringify(params));

							function nextTweet(_) {
								if(tweets && t < tweets.length) return  {tweet:tweets[t++],keywords:keywords,entity:entity,key:key};
								if(!params) return undefined;

								results = twitter.search(params, accessToken, accessTokenSecret, [_]);
								if(!results[0].statuses.length) return undefined;

								console.log("next:"+JSON.stringify(results[0].search_metadata));
								if(results[0].search_metadata.next_results === undefined) {
									params = undefined;	
								} else {
									var next = results[0].search_metadata.next_results.substring(1).split('&');
									params = next.reduce(function(r,elt) {
										var items = elt.split('=');
										r[items[0]] = items[1];
										return r
									},{});
									if($params.since_id) params.since_id=$params.since_id;
								}

								t=0;
								tweets = results[0].statuses;
								return {tweet:tweets[t++],keywords:keywords,entity:entity,key:key};
							}

							return ez.devices.generic.reader(function(_) {
								return nextTweet(_);
							});
					}(params);

					//var dst = consoleWriter();

					var dst = mongo.get_mongoWriter(_, {}, {}, "tweets");
					src.limit(count).transform(alchemy()).pipe(_, dst);

					response.writeHead(200, {});
					response.end();
				} catch(e) {
					response.writeHead(200, {
						"Content-Type": "application/json"
					});
					response.end('error:'+JSON.stringify(e), "\t");
				}
		},
		sentiment:function(_, request, response, qs) {
				console.log("twitter.dispatcher:sentiment");

				var httpWriter = function(response) {
					var sep;
					return ez.devices.generic.writer(function(_, resource) {
						if (resource === undefined) {
							if (!sep) {
								response.writeHead(200, {
									"content-type": "application/json"
								});
								response.write(_, '{"$resources":[');
							}
							response.end("]}");
						} else {
							if (!sep) {
								response.writeHead(200, {
									"content-type": "application/json"
								});
								response.write(_, '{"$resources":[');
							}
							response.write(_, (sep || '') + JSON.stringify(resource), "utf8");
						}
						sep = ',';
					});
				};
				var dst = httpWriter(response);
				var src = mongo.get_reader(_, {}, "tweets",qs);
				src.pipe(_, dst);
 		},
	};

	return function(_, request, response, qs) {
		console.log("twitter.dispatcher " + request.url);
		console.log("twitter.dispatcher " + request.url.split('/'));

		var parsed = url.parse(request.url, true);
		console.log("parsed.query:"+JSON.stringify(parsed.query));

		var route = routes[parsed.pathname.split('/')[2]];
		if (route) {
			return route(_, request, response, parsed.query);
		} else {
			response.writeHead(200, {
				"Content-Type": "application/json"
			});
			response.end('bad url', "\t");
		}
	};
};