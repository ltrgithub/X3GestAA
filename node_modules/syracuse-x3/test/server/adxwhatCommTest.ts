"use strict";

require('syracuse-main/lib/nodeconfig').config;
var AdxWhatComm = require('../../lib/clients/adxwhat/adxwhatComm').AdxWhatComm;

var done;
import { assert } from 'chai';
Object.keys(assert).forEach(key => {
	if (key !== 'isNaN') global[key] = assert[key];
});

describe(module.id, () => {

	var comm;
	it('Communicator class instaciation', function(_) {
		comm = new AdxWhatComm(_);
	});

	it('write buffer CONNECT (safev1): connect adxwhat client', function() {
		var buff = comm._writeBufConnectSafeV1({
			serviceId: 109,
			user: "tchambar",
			password: "CRYPT:tdosdoQo2tgrTqseugrpgr",
			secured: true,
		});
		var bytes = new Buffer([0x6D, 0x2F, 0x08, 0x74, 0x63, 0x68, 0x61, 0x6D, 0x62, 0x61, 0x72, 0x08, 0x74, 0x63, 0x68, 0x61, 0x6D, 0x62, 0x61, 0x72, 0x1C, 0x43, 0x52, 0x59, 0x50, 0x54, 0x3A, 0x74, 0x64, 0x6F, 0x73, 0x64, 0x6F, 0x51, 0x6F, 0x32, 0x74, 0x67, 0x72, 0x54, 0x71, 0x73, 0x65, 0x75, 0x67, 0x72, 0x70, 0x67, 0x72]);
		strictEqual(buff.toString('hex'), bytes.toString('hex'), "Connect");
	});

	it('write buffer CONNECT (safev2): connect adxwhat client', function() {
		var buff = comm._writeBufConnectSafeV2({
			serviceId: 109
		});
		var bytes = new Buffer([0x00, 0x6d, 0x03, 0x01]);
		strictEqual(buff.toString('hex'), bytes.toString('hex'), "Connect");
	});

	it('write buffer ASK : PATH', function() {

		var buff = comm._writeBufAsk("PATH");
		var bytes = new Buffer([0x05, 0x50, 0x41, 0x54, 0x48, 0x00]);
		strictEqual(buff.toString('hex'), bytes.toString('hex'), "WRITE PATH OK");

		var bufRead = new Buffer([0x00, 0x00, 0x01, 0xA2, 0x2F, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x69, 0x74, 0x73, 0x2F, 0x76, 0x31, 0x37, 0x30, 0x2F, 0x53, 0x4F, 0x4C, 0x53, 0x55, 0x50, 0x56, 0x37, 0x2F, 0x72, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x2F, 0x62, 0x69, 0x6E, 0x3A, 0x2F, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x69, 0x74, 0x73, 0x2F, 0x76, 0x31, 0x37, 0x30, 0x2F, 0x53, 0x4F, 0x4C, 0x53, 0x55, 0x50, 0x56, 0x37, 0x2F, 0x72, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x2F, 0x65, 0x62, 0x69, 0x6E, 0x3A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x69, 0x65, 0x6C, 0x73, 0x2F, 0x6F, 0x72, 0x61, 0x63, 0x6C, 0x65, 0x2F, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x63, 0x74, 0x2F, 0x31, 0x30, 0x2E, 0x32, 0x2E, 0x30, 0x2F, 0x62, 0x69, 0x6E, 0x3A, 0x2E, 0x3A, 0x2F, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x69, 0x74, 0x73, 0x2F, 0x76, 0x31, 0x36, 0x30, 0x2F, 0x53, 0x4F, 0x4C, 0x53, 0x55, 0x50, 0x56, 0x36, 0x2F, 0x72, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x2F, 0x62, 0x69, 0x6E, 0x3A, 0x2F, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x69, 0x74, 0x73, 0x2F, 0x76, 0x31, 0x36, 0x30, 0x2F, 0x53, 0x4F, 0x4C, 0x53, 0x55, 0x50, 0x56, 0x36, 0x2F, 0x72, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x2F, 0x65, 0x62, 0x69, 0x6E, 0x3A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x69, 0x65, 0x6C, 0x73, 0x2F, 0x6F, 0x72, 0x61, 0x63, 0x6C, 0x65, 0x2F, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x63, 0x74, 0x2F, 0x31, 0x30, 0x2E, 0x32, 0x2E, 0x30, 0x2F, 0x62, 0x69, 0x6E, 0x3A, 0x2E, 0x3A, 0x2F, 0x73, 0x68, 0x65, 0x6C, 0x6C, 0x73, 0x2F, 0x6C, 0x62, 0x69, 0x6E, 0x3A, 0x2F, 0x73, 0x68, 0x65, 0x6C, 0x6C, 0x73, 0x2F, 0x75, 0x73, 0x65, 0x72, 0x2F, 0x78, 0x33, 0x6F, 0x72, 0x61, 0x3A, 0x2F, 0x73, 0x68, 0x65, 0x6C, 0x6C, 0x73, 0x2F, 0x75, 0x73, 0x65, 0x72, 0x2F, 0x6F, 0x72, 0x61, 0x63, 0x6C, 0x65, 0x3A, 0x2F, 0x75, 0x73, 0x72, 0x2F, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x2F, 0x62, 0x69, 0x6E, 0x3A, 0x2F, 0x6F, 0x70, 0x74, 0x2F, 0x66, 0x72, 0x65, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2F, 0x73, 0x62, 0x69, 0x6E, 0x3A, 0x2F, 0x6F, 0x70, 0x74, 0x2F, 0x66, 0x72, 0x65, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2F, 0x62, 0x69, 0x6E, 0x3A, 0x2F, 0x75, 0x73, 0x72, 0x2F, 0x62, 0x69, 0x6E, 0x3A, 0x2F, 0x65, 0x74, 0x63, 0x3A, 0x2F, 0x75, 0x73, 0x72, 0x2F, 0x73, 0x62, 0x69, 0x6E, 0x3A, 0x2F, 0x75, 0x73, 0x72, 0x2F, 0x75, 0x63, 0x62, 0x3A, 0x2F, 0x75, 0x73, 0x72, 0x2F, 0x62, 0x69, 0x6E, 0x2F, 0x58, 0x31, 0x31, 0x3A, 0x2F, 0x73, 0x62, 0x69, 0x6E, 0x3A, 0x2F, 0x75, 0x73, 0x72, 0x2F, 0x6A, 0x61, 0x76, 0x61, 0x31, 0x34, 0x2F, 0x6A, 0x72, 0x65, 0x2F, 0x62, 0x69, 0x6E, 0x3A, 0x2F, 0x75, 0x73, 0x72, 0x2F, 0x6A, 0x61, 0x76, 0x61, 0x31, 0x34, 0x2F, 0x62, 0x69, 0x6E, 0x3A, 0x3A, 0x00]);
		var len = comm._readBufAsk(bufRead.slice(0, 4), 0); // size of buffer to read
		strictEqual(len, 418, "buffer size to read ok");
		var val = comm._readBufAsk(bufRead.slice(4), 1);
		strictEqual(val, "/produits/v170/SOLSUPV7/runtime/bin:/produits/v170/SOLSUPV7/runtime/ebin:/logiciels/oracle/product/10.2.0/bin:.:/produits/v160/SOLSUPV6/runtime/bin:/produits/v160/SOLSUPV6/runtime/ebin:/logiciels/oracle/product/10.2.0/bin:.:/shells/lbin:/shells/user/x3ora:/shells/user/oracle:/usr/local/bin:/opt/freeware/sbin:/opt/freeware/bin:/usr/bin:/etc:/usr/sbin:/usr/ucb:/usr/bin/X11:/sbin:/usr/java14/jre/bin:/usr/java14/bin::", "READ PATH ok");

		buff = comm._writeBufAsk("DBTYP");
		bytes = new Buffer([0x06, 0x44, 0x42, 0x54, 0x59, 0x50, 0x00]);
		strictEqual(buff.toString('hex'), bytes.toString('hex'), "WRITE DBTYP OK");

		bufRead = new Buffer([0x00, 0x00, 0x00, 0x07, 0x4F, 0x52, 0x41, 0x43, 0x4C, 0x45, 0x00]);
		len = comm._readBufAsk(bufRead.slice(0, 4), 0); // size of buffer to read
		strictEqual(len, 7, "buffer size to read ok");
		val = comm._readBufAsk(bufRead.slice(4), 1);
		strictEqual(val, "ORACLE", "READ DBTYP ok");

		buff = comm._writeBufAsk("ADXDIR");
		bytes = new Buffer([0x07, 0x41, 0x44, 0x58, 0x44, 0x49, 0x52, 0x00]);
		strictEqual(buff.toString('hex'), bytes.toString('hex'), "WRITE ADXDIR OK");

		bufRead = new Buffer([0x00, 0x00, 0x00, 0x20, 0x2F, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x69, 0x74, 0x73, 0x2F, 0x76, 0x31, 0x37, 0x30, 0x2F, 0x53, 0x4F, 0x4C, 0x53, 0x55, 0x50, 0x56, 0x37, 0x2F, 0x72, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x00]);
		len = comm._readBufAsk(bufRead.slice(0, 4), 0); // size of buffer to read
		strictEqual(len, 32, "buffer size to read ok");
		val = comm._readBufAsk(bufRead.slice(4), 1);
		strictEqual(val, "/produits/v170/SOLSUPV7/runtime", "READ ADXDIR ok");

		buff = comm._writeBufAsk("TMPDIR");
		bytes = new Buffer([0x07, 0x54, 0x4D, 0x50, 0x44, 0x49, 0x52, 0x00]);
		strictEqual(buff.toString('hex'), bytes.toString('hex'), "WRITE TMPDIR OK");

		bufRead = new Buffer([0x00, 0x00, 0x00, 0x24, 0x2F, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x69, 0x74, 0x73, 0x2F, 0x76, 0x31, 0x37, 0x30, 0x2F, 0x53, 0x4F, 0x4C, 0x53, 0x55, 0x50, 0x56, 0x37, 0x2F, 0x72, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x2F, 0x74, 0x6D, 0x70, 0x00]);
		len = comm._readBufAsk(bufRead.slice(0, 4), 0); // size of buffer to read
		strictEqual(len, 36, "buffer size to read ok");
		val = comm._readBufAsk(bufRead.slice(4), 1);
		strictEqual(val, "/produits/v170/SOLSUPV7/runtime/tmp", "READ TMPDIR ok");

		buff = comm._writeBufAsk("ADXTERM");
		bytes = new Buffer([0x08, 0x41, 0x44, 0x58, 0x54, 0x45, 0x52, 0x4D, 0x00]);
		strictEqual(buff.toString('hex'), bytes.toString('hex'), "WRITE ADXTERM OK");

		bufRead = new Buffer([0x00, 0x00, 0x00, 0x06, 0x78, 0x74, 0x65, 0x72, 0x6D, 0x00]);
		len = comm._readBufAsk(bufRead.slice(0, 4), 0); // size of buffer to read
		strictEqual(len, 6, "buffer size to read ok");
		val = comm._readBufAsk(bufRead.slice(4), 1);
		strictEqual(val, "xterm", "READ ADXTERM ok");

		buff = comm._writeBufAsk("ADXORAOPT");
		bytes = new Buffer([0x0A, 0x41, 0x44, 0x58, 0x4F, 0x52, 0x41, 0x4F, 0x50, 0x54, 0x00]);
		strictEqual(buff.toString('hex'), bytes.toString('hex'), "WRITE ADXORAOPT OK");

		bufRead = new Buffer([0x00, 0x00, 0x00, 0x02, 0x32, 0x00]);
		len = comm._readBufAsk(bufRead.slice(0, 4), 0); // size of buffer to read
		strictEqual(len, 2, "buffer size to read ok");
		val = comm._readBufAsk(bufRead.slice(4), 1);
		strictEqual(val, "2", "READ ADXORAOPT ok");

		buff = comm._writeBufAsk("ORACLE_HOME");
		bytes = new Buffer([0x0C, 0x4F, 0x52, 0x41, 0x43, 0x4C, 0x45, 0x5F, 0x48, 0x4F, 0x4D, 0x45, 0x00]);
		strictEqual(buff.toString('hex'), bytes.toString('hex'), "WRITE ORACLE_HOME OK");

		bufRead = new Buffer([0x00, 0x00, 0x00, 0x21, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x69, 0x65, 0x6C, 0x73, 0x2F, 0x6F, 0x72, 0x61, 0x63, 0x6C, 0x65, 0x2F, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x63, 0x74, 0x2F, 0x31, 0x30, 0x2E, 0x32, 0x2E, 0x30, 0x00]);
		len = comm._readBufAsk(bufRead.slice(0, 4), 0); // size of buffer to read
		strictEqual(len, 33, "buffer size to read ok");
		val = comm._readBufAsk(bufRead.slice(4), 1);
		strictEqual(val, "/logiciels/oracle/product/10.2.0", "READ ORACLE_HOME ok");

		buff = comm._writeBufAsk("ORACLE_SID");
		bytes = new Buffer([0x0B, 0x4F, 0x52, 0x41, 0x43, 0x4C, 0x45, 0x5F, 0x53, 0x49, 0x44, 0x00]);
		strictEqual(buff.toString('hex'), bytes.toString('hex'), "WRITE ORACLE_SID OK");

		bufRead = new Buffer([0x00, 0x00, 0x00, 0x07, 0x58, 0x33, 0x44, 0x56, 0x4C, 0x50, 0x00]);
		len = comm._readBufAsk(bufRead.slice(0, 4), 0); // size of buffer to read
		strictEqual(len, 7, "buffer size to read ok");
		val = comm._readBufAsk(bufRead.slice(4), 1);
		strictEqual(val, "X3DVLP", "READ ORACLE_SID ok");

		buff = comm._writeBufAsk("NLS_SORT");
		bytes = new Buffer([0x09, 0x4E, 0x4C, 0x53, 0x5F, 0x53, 0x4F, 0x52, 0x54, 0x00]);
		strictEqual(buff.toString('hex'), bytes.toString('hex'), "WRITE NLS_SORT OK");

		bufRead = new Buffer([0x00, 0x00, 0x00, 0x07, 0x42, 0x49, 0x4E, 0x41, 0x52, 0x59, 0x00]);
		len = comm._readBufAsk(bufRead.slice(0, 4), 0); // size of buffer to read
		strictEqual(len, 7, "buffer size to read ok");
		val = comm._readBufAsk(bufRead.slice(4), 1);
		strictEqual(val, "BINARY", "READ NLS_SORT ok");

	});

	it('kill', function() {
		done = true;
	});
});