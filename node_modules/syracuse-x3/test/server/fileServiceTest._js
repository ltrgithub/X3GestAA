"use strict";
/* jshint -W079 */
/* jshint unused: false */
/* global QUnit: false, ok: false, asyncTest: false, test: false, strictEqual: false, start: false */
var port = 3004;
var baseUrl = "http://localhost:" + port;

var uploadUrl = "/sdata/x3/erp/SUPERV/$service/upload";

var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;

var ez = require('ez-streams');
var requestCount = 0;

QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (requestCount === 4) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});

var cookie;

function getCookie(_) {
	var response = new ez.devices.http.client({
		url: baseUrl + "/sdata",
		user: "guest",
		password: "guest"
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	return response.headers["set-cookie"];
}

if ((config.unit_test || {}).x3endpoint) {
	(function test(_) {
		//start syracuse server
		asyncTest("initialize syracuse test server", function(_) {
			requestCount++;
			require('syracuse-main/lib/syracuse').startServers(_, port);
			ok(true, "server initialized");
			cookie = getCookie(_);
			ok(cookie, "cookie ok");
			start();
		});

		var data = "data data data data data data data data data data data data\ndata data data data data data data data data data data data";

		asyncTest("Upload", function(_) {
			var buf = new Buffer(data);
			var headers = {
				cookie: cookie,
				"accept": "application/json",
				"Accept-Encoding": "gzip,deflate,sdch",
				// "Accept-Language": "en-US,en;q=0.8,fr;q=0.6,fr-FR;q=0.4",
				// "Connection": "keep-alive",
				"Content-Length": buf.length,
				"content-type": "application/octet-stream",
			};

			var response;

			response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName=qunit_upload_test.dat",
				method: "PUT",
				headers: headers
			}).end(buf).response(_);
			strictEqual(response.statusCode, 204, "Upload using fileName parameter");

			response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName='qunit_upload_test.dat'",
				method: "PUT",
				headers: headers
			}).end(buf).response(_);
			strictEqual(response.statusCode, 204, "Upload using quoted fileName parameter");

			response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName='[TMP]/qunit_upload_test.dat'",
				method: "PUT",
				headers: headers
			}).end(buf).response(_);
			strictEqual(response.statusCode, 204, "Upload in [TMP] volume using fileName parameter");

			headers["x-file-name"] = "qunit_upload_test.dat";
			response = new ez.devices.http.client({
				url: baseUrl + uploadUrl,
				method: "PUT",
				headers: headers
			}).end(buf).response(_);
			strictEqual(response.statusCode, 204, "Upload using x-file-name header");

			response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName=../tra/qunit_upload_test.dat",
				method: "PUT",
				headers: headers
			}).end(buf).response(_);
			strictEqual(response.statusCode, 500, "Upload trying to hack dir ==> 500");

			response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName='[TMP]/../tra/qunit_upload_test.dat'",
				method: "PUT",
				headers: headers
			}).end(buf).response(_);
			strictEqual(response.statusCode, 500, "Upload in [TMP] volume but trying to hack dir ==> 500");

			requestCount++;
			start();
		});

		asyncTest("Download", function(_) {
			var headers = {
				cookie: cookie,
				"accept": "application/json;vnd.sage=syracuse",
			};

			var response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName='qunit_upload_test.dat'",
				method: "GET",
				headers: headers
			}).end().response(_);
			strictEqual(response.statusCode, 200, "ok");
			var content = response.readAll(_);
			strictEqual(content.toString("utf8"), data, "content match");

			response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName=../tra/qunit_upload_test.dat",
				method: "GET",
				headers: headers
			}).end().response(_);
			strictEqual(response.statusCode, 500, "Download trying to hack dir ==> 500");
			requestCount++;
			start();
		});

		asyncTest("DeleteFile", function(_) {
			var headers = {
				cookie: cookie,
				"accept": "application/json;vnd.sage=syracuse",
			};

			var response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName=../tra/qunit_upload_test.dat",
				method: "DELETE",
				headers: headers
			}).end().response(_);
			strictEqual(response.statusCode, 500, "Delete file trying to hack dir ==> 500");

			response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName=qunit_upload_test.dat",
				method: "DELETE",
				headers: headers
			}).end().response(_);
			strictEqual(response.statusCode, 204, "Delete file");

			requestCount++;
			start();
		});
	})(_);
}

test("end tests", function() {
	ok(true, "Test ended");
});