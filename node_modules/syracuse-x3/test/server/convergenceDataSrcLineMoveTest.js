"use strict";
var CvgLineMove = require('syracuse-x3/lib/convergence/model/CvgDataSrc').CvgLineMove;

QUnit.module(module.id);

test("test movement on dataSrc in convergence", function() {

	// test add insert only

	// test add insert 0 line
	var lineMove = new CvgLineMove();
	lineMove.addInsert(0, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " add insert 0 lines from index 0");

	lineMove = new CvgLineMove();
	lineMove.addInsert(0, 3);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " add insert 0 lines from index 3");

	lineMove = new CvgLineMove();
	lineMove.addInsert(1, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,1,1]]', " add insert 1 lines from index 0");

	lineMove = new CvgLineMove();
	lineMove.addInsert(1, 2);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,3,1]]', " add insert 1 lines from index 2");

	lineMove = new CvgLineMove();
	lineMove.addInsert(3, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,1,3]]', " add insert 3 lines from index 0");

	// test add delete
	var lineMove = new CvgLineMove();
	lineMove.addDelete(0, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " add delete 0 lines from index 0");

	lineMove = new CvgLineMove();
	lineMove.addDelete(0, 3);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " add delete 0 lines from index 3");

	lineMove = new CvgLineMove();
	lineMove.addDelete(1, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,1]]', " add delete 1 lines from index 0");

	lineMove = new CvgLineMove();
	lineMove.addDelete(1, 2);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,3,1]]', " add delete 1 lines from index 2");

	lineMove = new CvgLineMove();
	lineMove.addDelete(3, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,3]]', " add delete 3 lines from index 0");


	// test add insert and add delete
	lineMove = new CvgLineMove();
	lineMove.addDelete(3, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,3]]', " add delete 3 lines from index 0");

	// test add delete and add insert
	lineMove = new CvgLineMove();
	lineMove.addDelete(0, 0);
	lineMove.addInsert(0, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " add delete 0 lines from index 0 and insert 0 liunes from index 0");

	lineMove = new CvgLineMove();
	lineMove.addDelete(1, 0);
	lineMove.addInsert(1, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,1],[1,1,1]]', " add delete 1 lines from index 0 and insert 1 liunes from index 0");

	lineMove = new CvgLineMove();
	lineMove.addDelete(1, 0);
	lineMove.addInsert(2, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,1],[1,1,2]]', " add delete 1 lines from index 0 and insert 2 liunes from index 0");

	lineMove = new CvgLineMove();
	lineMove.addDelete(2, 0);
	lineMove.addInsert(1, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,2],[1,1,1]]', " add delete 2 lines from index 0 and insert 1 liunes from index 0");

	//
	lineMove = new CvgLineMove();
	lineMove.addDelete(0, 1);
	lineMove.addInsert(0, 1);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " add delete 0 lines from index 1 and insert 0 liunes from index 1");

	lineMove = new CvgLineMove();
	lineMove.addDelete(1, 1);
	lineMove.addInsert(1, 1);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,2,1],[1,2,1]]', " add delete 1 lines from index 1 and insert 1 liunes from index 1");

	lineMove = new CvgLineMove();
	lineMove.addDelete(1, 1);
	lineMove.addInsert(2, 1);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,2,1],[1,2,2]]', " add delete 1 lines from index 1 and insert 2 liunes from index 1");

	lineMove = new CvgLineMove();
	lineMove.addDelete(2, 1);
	lineMove.addInsert(1, 1);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,2,2],[1,2,1]]', " add delete 2 lines from index 1 and insert 1 liunes from index 1");

	//
	lineMove = new CvgLineMove();
	lineMove.addDelete(0, 2);
	lineMove.addInsert(0, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " add delete 0 lines from index 2 and insert 0 liunes from index 0");

	lineMove = new CvgLineMove();
	lineMove.addDelete(1, 2);
	lineMove.addInsert(1, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,3,1],[1,1,1]]', " add delete 1 lines from index 2 and insert 1 liunes from index 0");

	lineMove = new CvgLineMove();
	lineMove.addDelete(1, 2);
	lineMove.addInsert(2, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,3,1],[1,1,2]]', " add delete 1 lines from index 2 and insert 2 liunes from index 0");

	lineMove = new CvgLineMove();
	lineMove.addDelete(2, 2);
	lineMove.addInsert(1, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,3,2],[1,1,1]]', " add delete 2 lines from index 2 and insert 1 liunes from index 0");

	////
	lineMove = new CvgLineMove();
	lineMove.addDelete(3, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,3]]', " add delete 3 lines from index 0");

	// test add delete and add insert
	lineMove = new CvgLineMove();
	lineMove.addInsert(0, 0);
	lineMove.addDelete(0, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " add insert 0 lines from index 0 and delete 0 liunes from index 0");

	lineMove = new CvgLineMove();
	lineMove.addInsert(1, 0);
	lineMove.addDelete(1, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,1,1],[0,1,1]]', " add insert 1 lines from index 0 and delete 1 liunes from index 0");

	lineMove = new CvgLineMove();
	lineMove.addInsert(1, 0);
	lineMove.addDelete(2, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,1,1],[0,1,2]]', " add insert 1 lines from index 0 and delete 2 liunes from index 0");

	lineMove = new CvgLineMove();
	lineMove.addInsert(2, 0);
	lineMove.addDelete(1, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,1,2],[0,1,1]]', " add insert 2 lines from index 0 and delete 1 liunes from index 0");

	//
	lineMove = new CvgLineMove();
	lineMove.addInsert(0, 1);
	lineMove.addDelete(0, 1);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " add insert 0 lines from index 1 and delete 0 liunes from index 1");

	lineMove = new CvgLineMove();
	lineMove.addInsert(1, 1);
	lineMove.addDelete(1, 1);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,2,1],[0,2,1]]', " add insert 1 lines from index 1 and delete 1 liunes from index 1");

	lineMove = new CvgLineMove();
	lineMove.addInsert(1, 1);
	lineMove.addDelete(2, 1);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,2,1],[0,2,2]]', " add insert 1 lines from index 1 and delete 2 liunes from index 1");

	lineMove = new CvgLineMove();
	lineMove.addInsert(2, 1);
	lineMove.addDelete(1, 1);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,2,2],[0,2,1]]', " add insert 2 lines from index 1 and delete 1 liunes from index 1");

	//
	lineMove = new CvgLineMove();
	lineMove.addInsert(0, 2);
	lineMove.addDelete(0, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " add insert 0 lines from index 2 and delete 0 liunes from index 0");

	lineMove = new CvgLineMove();
	lineMove.addInsert(1, 2);
	lineMove.addDelete(1, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,3,1],[0,1,1]]', " add insert 1 lines from index 2 and delete 1 liunes from index 0");

	lineMove = new CvgLineMove();
	lineMove.addInsert(1, 2);
	lineMove.addDelete(2, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,3,1],[0,1,2]]', " add insert 1 lines from index 2 and delete 2 liunes from index 0");

	lineMove = new CvgLineMove();
	lineMove.addInsert(2, 2);
	lineMove.addDelete(1, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,3,2],[0,1,1]]', " add insert 2 lines from index 2 and delete 1 liunes from index 0");

	// test add insert multiple time
	lineMove = new CvgLineMove();
	lineMove.addInsert(1, 0);
	lineMove.addInsert(1, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,1,1],[1,1,1]]', " add insert 1 lines from index 0 and insert 1 liunes from index 0");

	lineMove = new CvgLineMove();
	lineMove.addInsert(1, 0);
	lineMove.addInsert(1, 1);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,1,2]]', " add insert 1 lines from index 0 and insert 1 liunes from index 1");

	lineMove = new CvgLineMove();
	lineMove.addInsert(1, 0);
	lineMove.addInsert(3, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,1,1],[1,1,3]]', " add insert 1 lines from index 0 and insert 3 liunes from index 0");

	lineMove = new CvgLineMove();
	lineMove.addInsert(1, 1);
	lineMove.addInsert(2, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,2,1],[1,1,2]]', " add insert 1 lines from index 1 and insert 2 liunes from index 0");

	// test add delete multiple time
	lineMove = new CvgLineMove();
	lineMove.addDelete(1, 0);
	lineMove.addDelete(1, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,2]]', " add delete 1 lines from index 0 and delete 1 liunes from index 0");

	lineMove = new CvgLineMove();
	lineMove.addDelete(1, 0);
	lineMove.addDelete(1, 1);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,1],[0,2,1]]', " add delete 1 lines from index 0 and delete 1 liunes from index 1");

	lineMove = new CvgLineMove();
	lineMove.addDelete(1, 0);
	lineMove.addDelete(3, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,4]]', " add delete 1 lines from index 0 and delete 3 liunes from index 0");

	lineMove = new CvgLineMove();
	lineMove.addDelete(1, 1);
	lineMove.addDelete(2, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,2,1],[0,1,2]]', " add delete 1 lines from index 1 and delete 2 liunes from index 0");

	// test add delete multiple time and add insert multiple time
	lineMove = new CvgLineMove();
	lineMove.addDelete(1, 1);
	lineMove.addDelete(2, 0);
	lineMove.addInsert(4, 3);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,2,1],[0,1,2],[1,4,4]]', " add delete 1 lines from index 1 and delete 2 liunes from index 0 and insert 4 lines from index 3");

	lineMove = new CvgLineMove();
	lineMove.addDelete(1, 1);
	lineMove.addInsert(4, 3);
	lineMove.addDelete(2, 0);
	lineMove.addInsert(4, 3);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,2,1],[1,4,4],[0,1,2],[1,4,4]]', " add delete 1 lines from index 1 and insert 4 lines from index 3 and delete 2 liunes from index 0 and insert 4 lines from index 3");

	lineMove = new CvgLineMove();
	lineMove.addInsert(4, 3);
	lineMove.addDelete(2, 0);
	lineMove.addInsert(4, 3);
	lineMove.addDelete(1, 1);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,4,4],[0,1,2],[1,4,4],[0,2,1]]', "insert 4 lines from index 3 and delete 2 liunes from index 0 and insert 4 lines from index 3 and add delete 1 lines from index 1 ");

	lineMove = new CvgLineMove();
	lineMove.addDelete(1, 1);
	lineMove.addDelete(2, 0);
	lineMove.addInsert(4, 3);
	lineMove.addInsert(4, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,2,1],[0,1,2],[1,4,4],[1,1,4]]', " add delete 1 lines from index 1 and delete 2 liunes from index 0 and insert 4 lines from index 3  and insert 4 lines from index 0");

	lineMove = new CvgLineMove();
	lineMove.addInsert(4, 3);
	lineMove.addInsert(4, 0);
	lineMove.addDelete(1, 1);
	lineMove.addDelete(2, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,4,4],[1,1,4],[0,2,1],[0,1,2]]', " insert 4 lines from index 3  and insert 4 lines from index 0 and add delete 1 lines from index 1 and delete 2 liunes from index 0 ");


	// test remove all
	lineMove = new CvgLineMove();
	lineMove.removeAllLines();
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0]]', "remove all ");

	lineMove = new CvgLineMove();
	lineMove.removeAllLines();
	lineMove.removeAllLines();
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0]]', "remove all and remove all");

	// test add insert and remove all
	lineMove = new CvgLineMove();
	lineMove.removeAllLines();
	lineMove.addInsert(2, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0],[1,1,2]]', "remove all and insert 2 lines from index 0");

	lineMove = new CvgLineMove();
	lineMove.addInsert(2, 0);
	lineMove.removeAllLines();
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0]]', "insert 2 lines from index 0 and remove all");

	lineMove = new CvgLineMove();
	lineMove.addInsert(2, 0);
	lineMove.removeAllLines();
	lineMove.addInsert(2, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0],[1,1,2]]', "insert 2 lines from index 0 and remove all and insert 2 lines from index 0 ");


	lineMove = new CvgLineMove();
	lineMove.addInsert(2, 0);
	lineMove.removeAllLines();
	lineMove.removeAllLines();
	lineMove.addInsert(2, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0],[1,1,2]]', "insert 2 lines from index 0 and remove all and remove all and insert 2 lines from index 0 ");

	lineMove = new CvgLineMove();
	lineMove.addInsert(2, 0);
	lineMove.removeAllLines();
	lineMove.addInsert(2, 0);
	lineMove.removeAllLines();
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0]]', "insert 2 lines from index 0 and remove all and insert 2 lines from index 0  and remove all");

	// test add delete and remove all
	lineMove = new CvgLineMove();
	lineMove.removeAllLines();
	lineMove.addDelete(2, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0],[0,1,2]]', "remove all and Delete 2 lines from index 0");

	lineMove = new CvgLineMove();
	lineMove.addDelete(2, 0);
	lineMove.removeAllLines();
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0]]', "Delete 2 lines from index 0 and remove all");

	lineMove = new CvgLineMove();
	lineMove.addDelete(2, 0);
	lineMove.removeAllLines();
	lineMove.addDelete(2, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0],[0,1,2]]', "Delete 2 lines from index 0 and remove all and Delete 2 lines from index 0 ");


	lineMove = new CvgLineMove();
	lineMove.addDelete(2, 0);
	lineMove.removeAllLines();
	lineMove.removeAllLines();
	lineMove.addDelete(2, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0],[0,1,2]]', "Delete 2 lines from index 0 and remove all and remove all and Delete 2 lines from index 0 ");

	lineMove = new CvgLineMove();
	lineMove.addDelete(2, 0);
	lineMove.removeAllLines();
	lineMove.addDelete(2, 0);
	lineMove.removeAllLines();
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0]]', "Delete 2 lines from index 0 and remove all and Delete 2 lines from index 0  and remove all");

	// test multiple add insert, add delete and remove all
	lineMove = new CvgLineMove();
	lineMove.addDelete(2, 0);
	lineMove.addInsert(2, 0);
	lineMove.removeAllLines();
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0]]', "Delete 2 lines from index 0  and Insert  2 lines from index 0  and remove all");

	lineMove = new CvgLineMove();
	lineMove.addInsert(2, 0);
	lineMove.addDelete(2, 0);
	lineMove.removeAllLines();
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0]]', "Insert 2 lines from index 0  and Delete  2 lines from index 0  and remove all");

	lineMove = new CvgLineMove();
	lineMove.addInsert(2, 0);
	lineMove.removeAllLines();
	lineMove.addDelete(2, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0],[0,1,2]]', "Insert 2 lines from index 0  and remove all  and Delete  2 lines from index 0 ");

	lineMove = new CvgLineMove();
	lineMove.addDelete(2, 0);
	lineMove.removeAllLines();
	lineMove.addInsert(2, 0);
	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0],[1,1,2]]', "Delete 2 lines from index 0  and remove all  and Insert  2 lines from index 0 ");

	lineMove = new CvgLineMove();
	lineMove.addDelete(2, 0);
	lineMove.removeAllLines();
	lineMove.addDelete(2, 0);
	lineMove.addInsert(2, 0);

	strictEqual(JSON.stringify(lineMove.toJSON()), '[[0],[0,1,2],[1,1,2]]', "Delete 2 lines from index 0  and remove all and Delete 2 lines from index 0 and Insert  2 lines from index 0 ");


});