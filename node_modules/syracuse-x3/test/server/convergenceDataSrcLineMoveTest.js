"use strict";
var CvgLineMove = require('syracuse-x3/lib/convergence/model/CvgDataSrc').CvgLineMove;

describe(module.id, () => {

	it('test movement on dataSrc in convergence', function() {


		// test add insert 0 line
		var lineMove = new CvgLineMove();
		lineMove.addInsert(0, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " \nadd insert 0 lines from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(0, 3);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " \nadd insert 0 lines from index 3 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(1, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,1,1]]', " \nadd insert 1 lines from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(1, 2);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,3,1]]', " \nadd insert 1 lines from index 2 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(3, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,1,3]]', " \nadd insert 3 lines from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		// test add delete
		var lineMove = new CvgLineMove();
		lineMove.addDelete(0, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " \nadd delete 0 lines from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(0, 3);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " \nadd delete 0 lines from index 3 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(1, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,1]]', " \nadd delete 1 lines from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(1, 2);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,3,1]]', " \nadd delete 1 lines from index 2 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(3, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,3]]', " \nadd delete 3 lines from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));


		// test add insert \n add delete
		lineMove = new CvgLineMove();
		lineMove.addDelete(3, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,3]]', " \nadd delete 3 lines from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		// test add delete \n add insert
		lineMove = new CvgLineMove();
		lineMove.addDelete(0, 0);
		lineMove.addInsert(0, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " \nadd delete 0 lines from index 0 \n insert 0 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(1, 0);
		lineMove.addInsert(1, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,1],[1,1,1]]', " \nadd delete 1 lines from index 0 \n insert 1 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(1, 0);
		lineMove.addInsert(2, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,1],[1,1,2]]', " \nadd delete 1 lines from index 0 \n insert 2 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(2, 0);
		lineMove.addInsert(1, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,2],[1,1,1]]', " \nadd delete 2 lines from index 0 \n insert 1 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		//
		lineMove = new CvgLineMove();
		lineMove.addDelete(0, 1);
		lineMove.addInsert(0, 1);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " \nadd delete 0 lines from index 1 \n insert 0 liunes from index 1 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(1, 1);
		lineMove.addInsert(1, 1);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,2,1],[1,2,1]]', " \nadd delete 1 lines from index 1 \n insert 1 liunes from index 1 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(1, 1);
		lineMove.addInsert(2, 1);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,2,1],[1,2,2]]', " \nadd delete 1 lines from index 1 \n insert 2 liunes from index 1 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(2, 1);
		lineMove.addInsert(1, 1);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,2,2],[1,2,1]]', " \nadd delete 2 lines from index 1 \n insert 1 liunes from index 1 \n result : " + JSON.stringify(lineMove.toJSON()));

		//
		lineMove = new CvgLineMove();
		lineMove.addDelete(0, 2);
		lineMove.addInsert(0, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " \nadd delete 0 lines from index 2 \n insert 0 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(1, 2);
		lineMove.addInsert(1, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,3,1],[1,1,1]]', " \nadd delete 1 lines from index 2 \n insert 1 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(1, 2);
		lineMove.addInsert(2, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,3,1],[1,1,2]]', " \nadd delete 1 lines from index 2 \n insert 2 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(2, 2);
		lineMove.addInsert(1, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,3,2],[1,1,1]]', " \nadd delete 2 lines from index 2 \n insert 1 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		////
		lineMove = new CvgLineMove();
		lineMove.addDelete(3, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,3]]', " \nadd delete 3 lines from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		// test add delete \n add insert
		lineMove = new CvgLineMove();
		lineMove.addInsert(0, 0);
		lineMove.addDelete(0, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " \nadd insert 0 lines from index 0 \n delete 0 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(1, 0);
		lineMove.addDelete(1, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,1,1],[0,1,1]]', " \nadd insert 1 lines from index 0 \n delete 1 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(1, 0);
		lineMove.addDelete(2, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,1,1],[0,1,2]]', " \nadd insert 1 lines from index 0 \n delete 2 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(2, 0);
		lineMove.addDelete(1, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,1,2],[0,1,1]]', " \nadd insert 2 lines from index 0 \n delete 1 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		//
		lineMove = new CvgLineMove();
		lineMove.addInsert(0, 1);
		lineMove.addDelete(0, 1);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " \nadd insert 0 lines from index 1 \n delete 0 liunes from index 1 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(1, 1);
		lineMove.addDelete(1, 1);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,2,1],[0,2,1]]', " \nadd insert 1 lines from index 1 \n delete 1 liunes from index 1 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(1, 1);
		lineMove.addDelete(2, 1);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,2,1],[0,2,2]]', " \nadd insert 1 lines from index 1 \n delete 2 liunes from index 1 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(2, 1);
		lineMove.addDelete(1, 1);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,2,2],[0,2,1]]', " \nadd insert 2 lines from index 1 \n delete 1 liunes from index 1 \n result : " + JSON.stringify(lineMove.toJSON()));

		//
		lineMove = new CvgLineMove();
		lineMove.addInsert(0, 2);
		lineMove.addDelete(0, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[]', " \nadd insert 0 lines from index 2 \n delete 0 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(1, 2);
		lineMove.addDelete(1, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,3,1],[0,1,1]]', " \nadd insert 1 lines from index 2 \n delete 1 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(1, 2);
		lineMove.addDelete(2, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,3,1],[0,1,2]]', " \nadd insert 1 lines from index 2 \n delete 2 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(2, 2);
		lineMove.addDelete(1, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,3,2],[0,1,1]]', " \nadd insert 2 lines from index 2 \n delete 1 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		// test add insert multiple time
		lineMove = new CvgLineMove();
		lineMove.addInsert(1, 0);
		lineMove.addInsert(1, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,1,1],[1,1,1]]', " \nadd insert 1 lines from index 0 \n insert 1 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(1, 0);
		lineMove.addInsert(1, 1);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,1,2]]', " \nadd insert 1 lines from index 0 \n insert 1 liunes from index 1 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(1, 0);
		lineMove.addInsert(3, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,1,1],[1,1,3]]', " \nadd insert 1 lines from index 0 \n insert 3 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(1, 1);
		lineMove.addInsert(2, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,2,1],[1,1,2]]', " \nadd insert 1 lines from index 1 \n insert 2 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		// test add delete multiple time
		lineMove = new CvgLineMove();
		lineMove.addDelete(1, 0);
		lineMove.addDelete(1, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,2]]', " \nadd delete 1 lines from index 0 \n delete 1 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(1, 0);
		lineMove.addDelete(1, 1);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,1],[0,2,1]]', " \nadd delete 1 lines from index 0 \n delete 1 liunes from index 1 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(1, 0);
		lineMove.addDelete(3, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,1,4]]', " \nadd delete 1 lines from index 0 \n delete 3 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(1, 1);
		lineMove.addDelete(2, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,2,1],[0,1,2]]', " \nadd delete 1 lines from index 1 \n delete 2 liunes from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		// test add delete multiple time \n add insert multiple time
		lineMove = new CvgLineMove();
		lineMove.addDelete(1, 1);
		lineMove.addDelete(2, 0);
		lineMove.addInsert(4, 3);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,2,1],[0,1,2],[1,4,4]]', " \nadd delete 1 lines from index 1 \n delete 2 liunes from index 0 \n insert 4 lines from index 3 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(1, 1);
		lineMove.addInsert(4, 3);
		lineMove.addDelete(2, 0);
		lineMove.addInsert(4, 3);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,2,1],[1,4,4],[0,1,2],[1,4,4]]', " \nadd delete 1 lines from index 1 \n insert 4 lines from index 3 \n delete 2 liunes from index 0 \n insert 4 lines from index 3 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(4, 3);
		lineMove.addDelete(2, 0);
		lineMove.addInsert(4, 3);
		lineMove.addDelete(1, 1);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,4,4],[0,1,2],[1,4,4],[0,2,1]]', "\ninsert 4 lines from index 3 \n delete 2 liunes from index 0 \n insert 4 lines from index 3 \n add delete 1 lines from index 1  \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(1, 1);
		lineMove.addDelete(2, 0);
		lineMove.addInsert(4, 3);
		lineMove.addInsert(4, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0,2,1],[0,1,2],[1,4,4],[1,1,4]]', " \nadd delete 1 lines from index 1 \n delete 2 liunes from index 0 \n insert 4 lines from index 3  \n insert 4 lines from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(4, 3);
		lineMove.addInsert(4, 0);
		lineMove.addDelete(1, 1);
		lineMove.addDelete(2, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[1,4,4],[1,1,4],[0,2,1],[0,1,2]]', " \ninsert 4 lines from index 3  \n insert 4 lines from index 0 \n add delete 1 lines from index 1 \n delete 2 liunes from index 0  \n result : " + JSON.stringify(lineMove.toJSON()));


		// test remove all
		lineMove = new CvgLineMove();
		lineMove.removeAllLines();
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0]]', "\nremove all  \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.removeAllLines();
		lineMove.removeAllLines();
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0]]', "\nremove all \n remove all \n result : " + JSON.stringify(lineMove.toJSON()));

		// test add insert \n remove all
		lineMove = new CvgLineMove();
		lineMove.removeAllLines();
		lineMove.addInsert(2, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0],[1,1,2]]', "\nremove all \n insert 2 lines from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(2, 0);
		lineMove.removeAllLines();
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0]]', "\ninsert 2 lines from index 0 \n remove all \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(2, 0);
		lineMove.removeAllLines();
		lineMove.addInsert(2, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0],[1,1,2]]', "\ninsert 2 lines from index 0 \n remove all \n insert 2 lines from index 0  \n result : " + JSON.stringify(lineMove.toJSON()));


		lineMove = new CvgLineMove();
		lineMove.addInsert(2, 0);
		lineMove.removeAllLines();
		lineMove.removeAllLines();
		lineMove.addInsert(2, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0],[1,1,2]]', "\ninsert 2 lines from index 0 \n remove all \n remove all \n insert 2 lines from index 0  \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(2, 0);
		lineMove.removeAllLines();
		lineMove.addInsert(2, 0);
		lineMove.removeAllLines();
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0]]', "\ninsert 2 lines from index 0 \n remove all \n insert 2 lines from index 0  \n remove all \n result : " + JSON.stringify(lineMove.toJSON()));

		// test add delete \n remove all
		lineMove = new CvgLineMove();
		lineMove.removeAllLines();
		lineMove.addDelete(2, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0],[0,1,2]]', "\nremove all \n Delete 2 lines from index 0 \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(2, 0);
		lineMove.removeAllLines();
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0]]', "\nDelete 2 lines from index 0 \n remove all \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(2, 0);
		lineMove.removeAllLines();
		lineMove.addDelete(2, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0],[0,1,2]]', "\nDelete 2 lines from index 0 \n remove all \n Delete 2 lines from index 0  \n result : " + JSON.stringify(lineMove.toJSON()));


		lineMove = new CvgLineMove();
		lineMove.addDelete(2, 0);
		lineMove.removeAllLines();
		lineMove.removeAllLines();
		lineMove.addDelete(2, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0],[0,1,2]]', "\nDelete 2 lines from index 0 \n remove all \n remove all \n Delete 2 lines from index 0  \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(2, 0);
		lineMove.removeAllLines();
		lineMove.addDelete(2, 0);
		lineMove.removeAllLines();
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0]]', "\nDelete 2 lines from index 0 \n remove all \n Delete 2 lines from index 0  \n remove all \n result : " + JSON.stringify(lineMove.toJSON()));

		// test multiple add insert, add delete \n remove all
		lineMove = new CvgLineMove();
		lineMove.addDelete(2, 0);
		lineMove.addInsert(2, 0);
		lineMove.removeAllLines();
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0]]', "\nDelete 2 lines from index 0  \n Insert  2 lines from index 0  \n remove all \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(2, 0);
		lineMove.addDelete(2, 0);
		lineMove.removeAllLines();
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0]]', "\nInsert 2 lines from index 0  \n Delete  2 lines from index 0  \n remove all \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addInsert(2, 0);
		lineMove.removeAllLines();
		lineMove.addDelete(2, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0],[0,1,2]]', "\nInsert 2 lines from index 0  \n remove all  \n Delete  2 lines from index 0  \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(2, 0);
		lineMove.removeAllLines();
		lineMove.addInsert(2, 0);
		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0],[1,1,2]]', "\nDelete 2 lines from index 0  \n remove all  \n Insert  2 lines from index 0  \n result : " + JSON.stringify(lineMove.toJSON()));

		lineMove = new CvgLineMove();
		lineMove.addDelete(2, 0);
		lineMove.removeAllLines();
		lineMove.addDelete(2, 0);
		lineMove.addInsert(2, 0);

		strictEqual(JSON.stringify(lineMove.toJSON()), '[[0],[0,1,2],[1,1,2]]', "\nDelete 2 lines from index 0  \n remove all \n Delete 2 lines from index 0 \n Insert  2 lines from index 0  \n result : " + JSON.stringify(lineMove.toJSON()));
	});
});