"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require('syracuse-core/lib/locale');
var module = QUnit.module;
var util = require('util');
var nodeconfig = require('syracuse-main/lib/nodeconfig');

var PrintClient = require('syracuse-x3/lib/print/client/PrintClient').PrintClient;

var config = nodeconfig.config && nodeconfig.config.x3print;

var hostname = config && config.server && config.server.hostname || "ecvmdev2003x64";
var port = config && config.server && config.server.port || 1890;

var jobData1 = {
  "_FormatExport": "29",
  "__REPORT": "TABCOUNTRY.rpt",
  "__DESTINATION": "3",
  "__TYPDBA": "1",
  "__DBDATABASE": "X3DVLP",
  "__DBUSER": "SUPERV",
  "__DBPASSWORD": "tiger",
  "__WSTATION": "ecchambard-001.sagefr.adinternal.com",
  "__CDUSER": "TC",
  "__ADXSOL": "SOLSUPV6",
  "__APPLICATION": "SUPERV;sodaix02;17000",
  "__APPRPT": "SUPERV;sodaix02;17000",
  "__RPTLAN": "FRA",
  "X3DOS": "SUPERV;sodaix02;17000;150;FRA",
  "__JOBLINKED": "",
  "__REQUETE": "25561900",
  "_Orientation": "0",
  "_PaperSize": "44",
  "X3CLI": "Superviseur 140",
  "X3EDT": "Etat Sage X3 Entreprise Copyright Sage",
  "X3ETA": "TABCOUNTRY",
  "X3TIT": "Pays",
  "X3OPE": "Teddy Chambard",
  "X3USR": "TC",
  "X3LAN": "FRA",
  "X3SIT1": "*",
  "X3SIT2": "z",
  "X3PRF": "ADMIN",
  "X3FCT": "",
  "X3SIT": "",
  "paysdeb": " ",
  "paysfin": "zzzzzzzzzz",
  "impselections": "0",
  "año": ""
}

function writeReportFile(_, jobId, data) {
	var f = __dirname + "/../../lib/print/data/REPORT_"+jobId+".pdf";
	require('fs').writeFile(f, data, "binary", _);
}

var done;
module("X3 - Print Client Tests", {
	setup: function(_) {},
	teardown: function(_) {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500)
		}
	}
});

asyncTest("Connection", 5, function(_) {
	var cli = new PrintClient(_, hostname, port);
	strictEqual(cli.pid != null && cli.pid >= 0 , true, "pid: "+cli.pid);
	strictEqual(cli.srvTechnoVers && cli.srvTechnoVers.UIAction, "SetTechnoVers", "UIAction: "+cli.srvTechnoVers.UIAction);
	strictEqual(cli.srvTechnoVers && cli.srvTechnoVers.Id, "3", "Id: "+cli.srvTechnoVers.Id);
	strictEqual(cli.srvTechnoVers && cli.srvTechnoVers.Version, "15i.012", "Version: "+cli.srvTechnoVers.Version);
	strictEqual(cli.srvTechnoVers && cli.srvTechnoVers.Protocol, "15000B", "Protocol: "+cli.srvTechnoVers.Protocol);
	cli.disconnect(_);
	start();
});

asyncTest("List imprimantes",  function(_) {
	var cli = new PrintClient(_, hostname, port);
	strictEqual(cli.pid != null && cli.pid >= 0 , true, "pid: "+cli.pid);
	stop();
	var props = cli.listPrinters(_);
	var nbPrinters = (Object.keys(props).length - 1);
	strictEqual(nbPrinters, props._NbPrinters, "Nb Printers defined: "+nbPrinters);
	for (var i = 1; i < nbPrinters + 1; i++) {
		var key = Object.keys(props)[i];
		strictEqual(props[key] !== null, true, key+": "+props[key]);
	} 
	cli.disconnect(_);
	start();
});

asyncTest("Get State and Result on unknow Job", 4, function(_) {
	var cli = new PrintClient(_, hostname, port);
	var result = cli.getState(_, "UnknowJob");
	strictEqual(result && result.state, 99, "State: "+result.state);
	strictEqual(result && result.message, "Job 0 - ERR 258 en provenance du serveur d'édition : Impossible de récupèrer une référence sur la demande d'impression.\nUnknowJob - ", "Message: "+result.message);
	var result = cli.getReport(_, "UnknowJob");
	strictEqual(result && result.length, 0, "Length: "+result.length);
	strictEqual(result && result.binary, "", "Binary: "+result.binary);
	cli.disconnect(_);
	start();
});

asyncTest("OuvImp; GetState; GetReport", function(_) {
	
	var cli = new PrintClient(_, hostname, port);
	var jobId = helpers.uuid.generate();
	jobData1.__wJobID = jobId;
	
	stop();
	var seqId = cli.launchReport(_, jobData1);
	strictEqual(seqId != null && seqId > 0, true, "OuvImp OK");
	var count = 0;
	var intervalId = setInterval(function(_) {
		var result = cli.getState(_, jobId);
		if (result.state === 5) {
			strictEqual(result && result.state, 5, "State: "+result.state);
			var result2 = cli.getReport(_, jobId);
			strictEqual(result2 && result2.length, result2 && result2.binary.length, "Binary OK");
			// uncomment to write pdf file in data directory
			//writeReportFile(_, jobId, result2.binary);
			cli.disconnect(_);
			clearInterval(intervalId);
			start();
		}else if (count <= 4){
			count++;
			strictEqual(result && result.state, 0, "State: "+result.state);
		}

	}, 500);
});

asyncTest("Cancel Report", function(_) {
	
	var cli = new PrintClient(_, hostname, port);
	var jobId = helpers.uuid.generate();
	jobData1.__wJobID = jobId;
	stop();
	var seqId = cli.launchReport(_, jobData1);
	strictEqual(seqId != null && seqId > 0, true, "OuvImp OK");
	var result = cli.getState(_, jobId);
	strictEqual(result && result.state, 0, "State: "+result.state);
	cli.cancelReport(_, seqId);
	var result2 = cli.getState(_, jobId);
	strictEqual(result2 && result2.state, 99, "Deleted state: "+result2.state);
	cli.disconnect(_);
	start();		
});

asyncTest("AllPrinter", function(_) {
	var cli = new PrintClient(_, hostname, port);
	strictEqual(cli.pid != null && cli.pid >= 0 , true, "pid: "+cli.pid);
	stop();
	var result = cli.getAllPrinters(_);
	for (var i = 0; i < result.length; i++) {
		var keys = Object.keys(result[i]);
		for (var j = 0; j < keys.length; j++) {
			var key = keys[j];
			strictEqual(result[i][key] !== null, true, key+": "+result[i][key]);
		} 
	} 
	cli.disconnect(_);
	start();
});


asyncTest("MorePrinter", function(_) {
	var cli = new PrintClient(_, hostname, port);
	strictEqual(cli.pid != null && cli.pid >= 0 , true, "pid: "+cli.pid);
	stop();
	var result = cli.getAdvancedParameters(_,"\\\\172.28.8.4\\HP3390-grenoble","172.28.8.151","HP Universal Printing PCL 5");
	for (var i = 0; i < result.paperSize.length; i++) {
		strictEqual(result.paperSize[i] != null ,true,"paperSize["+i+"] "+JSON.stringify(result.paperSize[i]));
	} 
	for (var i = 0; i < result.bac.length; i++) {
		strictEqual(result.bac[i] != null ,true,"back["+i+"] "+JSON.stringify(result.bac[i]));
	} 
	cli.disconnect(_);
	start();
});

asyncTest("ExtraPrinter", function(_) {
	var cli = new PrintClient(_, hostname, port);
	strictEqual(cli.pid != null && cli.pid >= 0 , true, "pid: "+cli.pid);
	stop();
	var result = cli.getExtraParameters(_,"\\\\172.28.8.4\\HP3390-grenoble", "172.28.8.151", "HP Universal Printing PCL 5", 9);
	strictEqual(result.$width, 2100, "A4 Paper size width: "+result.$width);
	strictEqual(result.$length, 2970, "A4 Paper size length: "+result.$length);
	cli.disconnect(_);
	start();
});




test("kill", function() {
	done = true;
	start();
});
