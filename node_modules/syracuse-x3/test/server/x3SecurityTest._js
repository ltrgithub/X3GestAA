"use strict";

var mongodb = require('streamline-mongodb');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
//var adminUtil = require("syracuse-collaboration/lib/util");
var x3client = require("syracuse-x3/lib/client");
var sys = require("util");
var net = require("net");
var crypto = require("crypto");
var fs = require('streamline-fs');
var fsp = require("path");
var x3Mock = require("../fixtures/x3Mock");
var trace = null; // console.log

var port = 3004;
var streams = require('streamline/lib/streams/streams');
var challenge = "01234567899876543210012345678956";

//
var pub_key;
var priv_key;
//
var x3MockServer;

var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
//			x3MockServer.close();
			setTimeout(function() {
				process.kill(process.pid);
			}, 100)
		}
	}
});

asyncTest("Sign algorithm test", 2, function(_) {
	pub_key = fs.readFile(fsp.join(__dirname, "../../",config.sdata.pubkeyName+".pem"), "ascii", _);
	priv_key = fs.readFile(fsp.join(__dirname, "../../key.pem"), "ascii", _);
	// create challenge signature
	trace && trace("sign algo: "+config.sdata.signAlgorithm);
	var signer = crypto.createSign(config.sdata.signAlgorithm);
	signer.update(challenge);
//	signer.update("AP"+"\0"+"12345678912345678912345678912345");
	var signature = signer.sign(priv_key, "base64");
	console.log("signature test: "+signature);
	//
	var verifier = crypto.createVerify(config.sdata.signAlgorithm);
	verifier.update(challenge);
	ok(verifier.verify(pub_key , signature, "base64"), "Sign algo ok");
	//
	var verifier = crypto.createVerify(config.sdata.signAlgorithm);
	verifier.update(challenge+"AAA");
	ok(!verifier.verify(pub_key , signature, "base64"), "Sign algo altered signature ok");
	//	
	start(_);
});

asyncTest("create server", 1, function(_) {
	trace && trace("creating server");
	x3MockServer = x3Mock.create(_, port);
	ok(true, "server created");
	start();
});

asyncTest("x3 connect", 5, function(_) {
	//trace = console.error
	trace && trace("creating client");
	var client = x3client.create({port:port, address: "localhost", tracer: trace});
	client.connect(_, {});
	// connection failure throws Error
	ok(true, "Client connected");
	// create session - small user name
	client.createSession(_, {userName: "lessthan15"});
	// session create failure throws Error
	ok(true, "Session created");
	//
	x3MockServer.close();
	//
	var client = x3client.create({port:port, address: "localhost", tracer: trace});
	client.connect(_, {});
	// connection failure throws Error
	ok(true, "Client connected (2)");
	// create session - big user name
	client.createSession(_, {userName: "____morethan15____"});
	// session create failure throws Error
	ok(true, "Session created(2)");
	//
	x3MockServer.close();
	trace && trace("client test");
	ok(true, "connection sequence passed")
	start();
});


asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});