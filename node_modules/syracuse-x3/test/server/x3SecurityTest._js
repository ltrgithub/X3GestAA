"use strict";

var mongodb = require('mongodb');
var config = require('config'); // must be first syracuse require
//var adminUtil = require("syracuse-collaboration/lib/util");
var x3client = require("syracuse-x3/lib/client");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var sys = require("util");
var net = require("net");
var crypto = require("crypto");
var fs = require('streamline-fs');
var fsp = require("path");
var x3Mock = require("../fixtures/x3Mock");
var trace = null; // console.log

var port = (config.unit_test && config.unit_test.serverPort) || 3004;
var challenge = "01234567899876543210012345678956";

//
var pub_key;
var priv_key;
//
var x3MockServer;

const assert = require('chai').assert;
Object.keys(assert).forEach(key => {
	if (key !== 'isNaN') global[key] = assert[key];
});

describe(module.id, () => {

	it('Sign algorithm test', function(_) {
		pub_key = fs.readFile(fsp.join(__dirname, "../../", config.sdata.pubkeyName + ".pem"), "ascii", _);
		priv_key = fs.readFile(fsp.join(__dirname, "../../key.pem"), "ascii", _);
		// create challenge signature
		trace && trace("sign algo: " + config.sdata.signAlgorithm);
		var signer = crypto.createSign(config.sdata.signAlgorithm);
		signer.update(challenge);
		//	signer.update("AP"+"\0"+"12345678912345678912345678912345");
		var signature = signer.sign(priv_key, "base64");
		trace && trace("signature test: " + signature);
		//
		var verifier = crypto.createVerify(config.sdata.signAlgorithm);
		verifier.update(challenge);
		ok(verifier.verify(pub_key, signature, "base64"), "Sign algo ok");
		//
		var verifier = crypto.createVerify(config.sdata.signAlgorithm);
		verifier.update(challenge + "AAA");
		ok(!verifier.verify(pub_key, signature, "base64"), "Sign algo altered signature ok");
		//	
	});

	it('create server', function(_) {
		trace && trace("creating server");
		x3MockServer = x3Mock.create(_, port);
		ok(true, "server created");
	});


	it('x3 connect', function(_) {
		var x3solution = {
			selectX3Server: function(_) {
				return {
					serverHost: function(_) {
						return "localhost";
					},
					serverPort: function(_) {
						return port;
					},
					bannish: function(_) {
						return false;
					}
				};
			}
		};
		trace && trace("creating client");
		var client = x3client.create({
			x3solution: x3solution,
			tracer: trace
		});
		client.connect(_, {});
		// connection failure throws Error
		ok(true, "Client connected");
		// create session - small user name
		client.createSession(_, {
			userName: "lessthan15"
		});
		// session create failure throws Error
		ok(true, "Session created");
		//
		x3MockServer.close();
		//
		var client = x3client.create({
			x3solution: x3solution,
			tracer: trace
		});
		console.error("BBB: " + JSON.stringify(client.x3server, null, 2));
		client.connect(_, {});
		// connection failure throws Error
		ok(true, "Client connected (2)");
		// create session - big user name
		client.createSession(_, {
			userName: "____morethan15____"
		});
		// session create failure throws Error
		ok(true, "Session created(2)");
		//
		x3MockServer.close();
		trace && trace("client test");
		ok(true, "connection sequence passed");
	});
});