"use strict";
var locale = require('streamline-locale');
var CvgClient = require('syracuse-x3/lib/convergence/client/CvgClient').CvgClient;
var CvgSession = require('syracuse-x3/lib/cvgSession');
var mongodb = require('mongodb');
var CvgIst = require('syracuse-x3/lib/convergence/types/CvgIst').CvgIst;
var x3helpers = require('syracuse-x3/lib/helpers');
var helpers = require('@sage/syracuse-core').helpers;
var Session = require("syracuse-session/lib/session").Session;
var sessionManager = require("syracuse-session/lib/sessionManager").sessionManager;
var x3writer = require("syracuse-x3/lib/convergence/automata/x3writer");
var config = require('config'); // must be first syracuse require
var jsonImport = require("syracuse-import/lib/jsonImport");


var testAdmin = require('@sage/syracuse-core').apis.get('test-admin');
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var jsonImport = require("syracuse-import/lib/jsonImport");
var globals = require('streamline-runtime').globals;

var flows = require('streamline-runtime').flows;
var localConfig = x3helpers.config("x3fusion", null, {});

sessionManager.setup(config.session, "8124");

QUnit.module(module.id, {
	setup: function() {}
});
var context = {
	request: {
		session: {
			id: ""
		}
	},
	endpoint: {
		dataset: function(_) {
			return "SUPERV";
		},
		x3ServerFolder: function(_) {
			return "SUPERV";
		},
		x3solution: function(_) {
			return {
				serverHost: function(_) {
					return "host";
				},
				solutionName: function(_) {
					return "SUPDVLP";
				},
				selectX3Server: function(_) {

					return {
						serverHost: function(_) {
							return "host";
						},
						serverPort: function(_) {
							return "port";
						},
						bannish: function(_) {
							return false;
						}
					};
				},
				proxy: function(_) {
					return false;
				}
			};
		}
	},
	httpSession: {
		getUserProfile: function(_) {
			return {
				user: function(_) {
					return {
						getEndpointLogin: function(_, id) {
							return "";
						}
					};
				},
				selectedEndpoint: function(_) {
					return {
						applicationRef: function(_) {
							return {
								application: function(_) {
									return "x3";
								},
								contract: function(_) {
									return "erp";
								}

							};
						}
					};
				}
			};
		}
	}
};

//necessary since x3server is set on X3 client
function simulateX3Client() {
	return {
		x3server: {
			serverHost: function(_) {
				return "host";
			},
			serverPort: function(_) {
				return "port";
			},
			bannish: function(_) {
				return false;
			}
		}
	};
}

var streamTest = helpers.defineClass(function() {
	this.readed;
	this.offset = 0;
	this.writed;
}, null, {
	setToRead: function(buffer) {
		this.offset = 0;
		this.readed = buffer;
	},
	read: function(_, size) {
		while (!this.readed || this.offset >= this.readed.length) {
			flows.sleep(_, 100); // wait 1s before try again
		}
		if (size == null) size = this.readed.length - this.offset;
		var res = this.readed.slice(this.offset, this.offset + size);
		this.offset += size;
		return res;
	},
	write: function(_, buf) {
		console.log("write");
		this.writed = buf;
	},
	destroy: function() {

	},
	end: function() {}
});
var endPoint = testAdmin.modifyCollaborationEndpoint("mongodb_convdemo");

var requestCount = 0;
var MAX_REQUESTS = 11;

var port = (config.unit_test && config.unit_test.serverPort) || 3004;
var baseUrl = "http://localhost:" + port;
var contractUrl = "/sdata/syracuse/collaboration/mongodb_demo/";
var acceptLanguage = "fr,fr-fr";

var cookie = "";
var x3sId;
var applicationId;
var adminEp;



var binaryNode = {
	"callui-revert": new Buffer([0x00, 0x00, 0x02, 0x12, 0x0c, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x55, 0x49, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x01, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3d, 0x01, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x0a, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3d, 0x01, 0x61, 0x79, 0x74, 0x72, 0x61, 0x64, 0x2e, 0x73, 0x61, 0x67, 0x65, 0x66, 0x72, 0x2e, 0x61, 0x64, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x31, 0x38, 0x39, 0x30, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x3d, 0x01, 0x54, 0x41, 0x42, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x3d, 0x01, 0x54, 0x41, 0x42, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x23, 0x46, 0x52, 0x41, 0x23, 0x4d, 0x42, 0x58, 0x23, 0x53, 0x55, 0x50, 0x44, 0x56, 0x4c, 0x50, 0x23, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x0a, 0x4c, 0x61, 0x6e, 0x67, 0x3d, 0x01, 0x46, 0x52, 0x41, 0x0a, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x01, 0x53, 0x55, 0x50, 0x44, 0x56, 0x4c, 0x50, 0x0a, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x3d, 0x01, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00]),
	"callui-checkout": new Buffer("000002120c00000000c15549416374696f6e3d015265706f72744465760a53746174656d656e743d01636865636b6f75740a5072696e745365727665723d016179747261642e7361676566722e6164696e7465726e616c2e636f6d3a313839300a5265706f72743d01544142434f554e5452590a5265706f727449443d01544142434f554e54525923465241234d42582353555044564c50235355504552560a4c616e673d014652410a536f6c7574696f6e3d0153555044564c500a466f6c6465723d015355504552560a0000000000", "hex"),
	"callui-commit": new Buffer("000002120c00000000bf5549416374696f6e3d015265706f72744465760a53746174656d656e743d01636f6d6d69740a5072696e745365727665723d016179747261642e7361676566722e6164696e7465726e616c2e636f6d3a313839300a5265706f72743d01544142434f554e5452590a5265706f727449443d01544142434f554e54525923465241234d42582353555044564c50235355504552560a4c616e673d014652410a536f6c7574696f6e3d0153555044564c500a466f6c6465723d015355504552560a0000000000", "hex"),
	"ND_IHM_gantt_delete": new Buffer([0x00, 0x00, 0x02, 0x12, 0x09, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x49, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x01, 0x33, 0x0a, 0x49, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x3d, 0x01, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5c, 0x76, 0x36, 0x5c, 0x78, 0x33, 0x69, 0x6c, 0x6f, 0x67, 0x2e, 0x64, 0x6c, 0x6c, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00]),
	"ND_IHM_gantt_update": new Buffer([0x00, 0x00, 0x02, 0x12, 0x09, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x49, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x01, 0x32, 0x0a, 0x49, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x3d, 0x01, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5c, 0x76, 0x36, 0x5c, 0x78, 0x33, 0x69, 0x6c, 0x6f, 0x67, 0x2e, 0x64, 0x6c, 0x6c, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00]),
	"ND_IHM_gantt_new": new Buffer([0x00, 0x00, 0x02, 0x12, 0x09, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x49, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x01, 0x31, 0x0a, 0x49, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x3d, 0x01, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5c, 0x76, 0x36, 0x5c, 0x78, 0x33, 0x69, 0x6c, 0x6f, 0x67, 0x2e, 0x64, 0x6c, 0x6c, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00]),
	"ND_GIST": new Buffer([0x01, 0x00, 0x08, 0x0e, 0x1e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00]),
	"NDOBOXI": new Buffer([0x00, 0x00, 0x1c, 0x0e, 0x01, 0x08, 0x0e, 0x01, 0x00, 0x10, 0x00, 0x0e, 0x39, 0x39, 0x30, 0x3d, 0x01, 0x4e, 0x01, 0x58, 0x31, 0x35, 0x58, 0x32, 0x46, 0x0a, 0x00, 0x02, 0x00, 0x00, 0x00]),
	"ND_SLF_DOWNLOAD": new Buffer([0x00, 0x00, 0x02, 0x12, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x6b, 0x55, 0x49, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x01, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x0a, 0x55, 0x49, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x72, 0x3d, 0x01, 0x54, 0x65, 0x6d, 0x70, 0x0a, 0x55, 0x49, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x3d, 0x01, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x5f, 0x31, 0x2e, 0x74, 0x78, 0x74, 0x0a, 0x55, 0x49, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x3d, 0x01, 0x54, 0x52, 0x54, 0x2f, 0x5a, 0x5a, 0x49, 0x4c, 0x4f, 0x47, 0x2e, 0x73, 0x72, 0x63, 0x0a, 0x55, 0x49, 0x44, 0x6f, 0x77, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x3d, 0x01, 0x49, 0x4c, 0x4f, 0x47, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00]),
	"NDEXECI_UPLOAD": new Buffer([0x00, 0x00, 0x1f, 0x11, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x0f, 0x58, 0x44, 0x54, 0x5f, 0x49, 0x4c, 0x4f, 0x47, 0x3a, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x08, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x01, 0x7c, 0x00, 0x01, 0x00, 0x01, 0x00, 0xff, 0x01, 0x7a, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x02, 0x7c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x11, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x5f, 0x00, 0x75, 0x00, 0x70, 0x00, 0x6c, 0x00, 0x6f, 0x00, 0x61, 0x00, 0x64, 0x00, 0x5f, 0x00, 0x31, 0x00, 0x2e, 0x00, 0x74, 0x00, 0x78, 0x00, 0x74, 0x00, 0x00]),

};

function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_convdemo");
}

function getPlugin(_, cookie, suburl, sessionId, statusCode, fullResponse, noStatusCheck) {
	var res = testAdmin.get(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$plugin('" + sessionId + "')/" + suburl, statusCode, fullResponse, null, noStatusCheck);
	if (!noStatusCheck) {
		return res;
	}
	if (statusCode === res.statusCode) {
		strictEqual(res.statusCode, statusCode, "status code  " + statusCode);
		return res.body;
	} else if (res.statusCode === 202) {
		// status code is 202 still waiting and recalling the get a max number of time
		var nb = 0;
		do {
			res = testAdmin.get(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$plugin('" + sessionId + "')/" + suburl, statusCode, fullResponse, null, noStatusCheck);
			ok(true, "polling - status code " + res.statusCode + " nbtry " + nb);
			flows.sleep(_, 100);
			nb++;
		} while (res.statusCode !== statusCode && nb < 10);
		strictEqual(res.statusCode, statusCode, " status code " + res.statusCode);
		return res.body;
	} else {
		strictEqual(res.statusCode, statusCode, "status code  " + res.statusCode);
		return res.body;
	}
}

function get(_, cookie, suburl, sessionId, statusCode, fullResponse, noStatusCheck) {
	var res = testAdmin.get(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$sessions('" + sessionId + "')/" + suburl, statusCode, fullResponse, null, noStatusCheck);
	if (!noStatusCheck) {
		return res;
	}
	if (statusCode === res.statusCode) {
		strictEqual(res.statusCode, statusCode, "status code  " + statusCode);
		return res.body;
	} else if (res.statusCode === 202) {
		// status code is 202 still waiting and recalling the get a max number of time
		var nb = 0;
		do {
			res = testAdmin.get(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$sessions('" + sessionId + "')/" + suburl, statusCode, fullResponse, null, noStatusCheck);
			ok(true, "polling - status code " + res.statusCode + " nbtry " + nb);
			flows.sleep(_, 100);

			nb++;
		} while (res.statusCode !== statusCode && nb < 10);
		strictEqual(res.statusCode, statusCode, " status code " + res.statusCode);
		return res.body;
	} else {
		strictEqual(res.statusCode, statusCode, "status code  " + res.statusCode);
		return res.body;
	}
}

function post(_, cookie, suburl, sessionId, data, statusCode, fullResponse, noStatusCheck) {
	var res = testAdmin.post(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$sessions('" + sessionId + "')/" + suburl, data, statusCode, fullResponse, noStatusCheck);
	if (!noStatusCheck) {
		return res;
	}
	if (statusCode === res.statusCode) {
		strictEqual(res.statusCode, statusCode, "status code  " + statusCode);
		return res.body;
	} else if (res.statusCode === 202) {
		// status code is 202 still waiting and recalling the get a max number of time
		var nb = 0;
		do {
			res = testAdmin.post(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$sessions('" + sessionId + "')/" + suburl, data, statusCode, fullResponse, noStatusCheck);
			nb++;
		} while (res.statusCode !== statusCode && nb < 10);
		strictEqual(res.statusCode, statusCode, " status code " + res.statusCode);
		return res.body;
	} else {
		strictEqual(res.statusCode, statusCode, "status code  " + res.statusCode);
		return res.body;
	}
}

function postPlugin(_, cookie, suburl, sessionId, data, statusCode, fullResponse, noStatusCheck) {

	var res = testAdmin.post(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$plugin('" + sessionId + "')/" + suburl, data, statusCode, fullResponse, noStatusCheck);
	if (!noStatusCheck) {
		return res;
	}
	if (statusCode === res.statusCode) {
		strictEqual(res.statusCode, statusCode, "status code  " + statusCode);
		return res.body;
	} else if (res.statusCode === 202) {
		// status code is 202 still waiting and recalling the get a max number of time
		var nb = 0;
		do {
			res = testAdmin.post(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$plugin('" + sessionId + "')/" + suburl, data, statusCode, fullResponse, noStatusCheck);
			nb++;
		} while (res.statusCode !== statusCode && nb < 10);
		strictEqual(res.statusCode, statusCode, " status code " + res.statusCode);
		return res.body;
	} else {
		strictEqual(res.statusCode, statusCode, "status code  " + res.statusCode);
		return res.body;
	}
}

function putPlugin(_, cookie, suburl, sessionId, data, statusCode, fullResponse, noStatusCheck) {
	var res = testAdmin.put(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$plugin('" + sessionId + "')/" + suburl, data, statusCode, fullResponse, noStatusCheck);
	if (!noStatusCheck) {
		return res;
	}
	if (statusCode === res.statusCode) {
		strictEqual(res.statusCode, statusCode, "status code  " + statusCode);
		return res.body;
	} else if (res.statusCode === 202) {
		// status code is 202 still waiting and recalling the get a max number of time
		var nb = 0;
		do {
			res = testAdmin.put(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$plugin('" + sessionId + "')/" + suburl, data, statusCode, fullResponse, noStatusCheck);
			nb++;
		} while (res.statusCode !== statusCode && nb < 10);
		strictEqual(res.statusCode, statusCode, " status code " + res.statusCode);
		return res.body;
	} else {
		strictEqual(res.statusCode, statusCode, "status code  " + res.statusCode);
		return res.body;
	}
}

function put(_, cookie, suburl, sessionId, data, statusCode, fullResponse, noStatusCheck) {
	var res = testAdmin.put(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$sessions('" + sessionId + "')/" + suburl, data, statusCode, fullResponse, noStatusCheck);
	if (!noStatusCheck) {
		return res;
	}
	if (statusCode === res.statusCode) {
		strictEqual(res.statusCode, statusCode, "status code  " + statusCode);
		return res.body;
	} else if (res.statusCode === 202) {
		// status code is 202 still waiting and recalling the get a max number of time
		var nb = 0;
		do {
			res = testAdmin.put(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$sessions('" + sessionId + "')/" + suburl, data, statusCode, fullResponse, noStatusCheck);
			nb++;
		} while (res.statusCode !== statusCode && nb < 10);
		strictEqual(res.statusCode, statusCode, " status code " + res.statusCode);
		return res.body;
	} else {
		strictEqual(res.statusCode, statusCode, "status code  " + res.statusCode);
		return res.body;
	}
}

function del(_, cookie, suburl, sessionId, statusCode, fullResponse, noStatusCheck) {
	var res = testAdmin.del(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$sessions('" + sessionId + "')/" + suburl, statusCode, fullResponse, noStatusCheck);
	if (!noStatusCheck) {
		return res;
	}
	if (statusCode === res.statusCode) {
		strictEqual(res.statusCode, statusCode, "status code  " + statusCode);
		return res.body;
	} else if (res.statusCode === 202) {
		// status code is 202 still waiting and recalling the get a max number of time
		var nb = 0;
		do {
			res = testAdmin.del(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$sessions('" + sessionId + "')/" + suburl, statusCode, fullResponse, noStatusCheck);
			nb++;
		} while (res.statusCode !== statusCode && nb < 10);
		strictEqual(res.statusCode, statusCode, " status code " + res.statusCode);
		return res.body;
	} else {
		strictEqual(res.statusCode, statusCode, "status code  " + res.statusCode);
		return res.body;
	}
}


it('init database', function(_) {
	var server = new mongodb.Server(endPoint.datasets["mongodb_convdemo"].hostname, endPoint.datasets["mongodb_convdemo"].port, {});
	var db = testAdmin.newMongoDb(endPoint.datasets["mongodb_convdemo"].database, server, {});
	db = db.open(_);
	db.dropDatabase(_);


	ok(true, "mongodb initialized");
});

var db;
//start syracuse server
it('initialize syracuse test server', function(_) {
	require('syracuse-main/lib/syracuse').startServers(_, port);
	ok(true, "server initialized");
	db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_convdemo);
	jsonImport.jsonImport(_, db, "syracuse-admin-demo.json", {});
});

var cvgClient;

it('initialize data demo', function(_) {
	var opt = {
		$diagnoses: []
	};
	jsonImport.jsonImport(_, db, "syracuse-admin-demo.json", opt);
	//	tracer && tracer("import demo db diags (134): "+sys.inspect(diag));
	ok(testAdmin.onlyInfo(opt.$diagnoses), "Demo database import ok");
});

it('listenNode -  callilog - test with http request', function(_) {
	var id = "id";
	var clientId = "clientId";
	var session = new Session(null, id, clientId);
	var cookie = testAdmin.getCookie(_, baseUrl, "admin", "admin").join(" ");
	var sessionId = cookie.substring(cookie.indexOf("=") + 1, cookie.indexOf(";"));
	var session = sessionManager.sessionById(sessionId);
	var cvgSession = CvgSession.newSession(_, "test1");
	session.client = simulateX3Client();
	var stream2 = new streamTest();


	session.updateCvgSession(cvgSession);

	// intiialization
	localConfig.plugin = localConfig.plugin || {};

	cvgClient = new CvgClient().init(_, session, stream2, {}, null, context);
	cvgClient.killPluginTimoeut = 10000;
	cvgSession._cvgClient = cvgClient;
	cvgClient.cdlang = "FRA";
	cvgClient.generateResponse(_, false, false);


	ok(true, "new CvgClient - send fake next field request - orchestration works case");

	// NEW GANTT ok
	stream2.setToRead(binaryNode.ND_IHM_gantt_new);

	ok(true, "send  session client 200 - ND_IHM new gantt");
	var res = JSON.stringify(put(_, cookie, "requestSvc?act=1025&trackngId=1", cvgSession.sid, {
		act: 1025,
		fld: {
			fmtKind: "EDIT",
			ist: {
				win: "B",
				xid: "AA1",
				nl: 0
			}
		}
	}, 200, false, true));

	strictEqual(res, '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"new","methodId":1,"cookieSess":null}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1025,"rqtdist":null,"connect":1,"server":""}}}', "generate reply to the client ND_IHM new ");
	stream2.writed = null;

	// reply client
	ok(true, "send reply session client 202 - ilog launch ok");
	res = JSON.stringify(put(_, cookie, "requestSvc?act=522&trackngId=2", cvgSession.sid, {
		act: 522,
		param: {
			method: "new",
			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}, 202, false, true));
	// check not reply send to the runtime
	strictEqual(!stream2.writed, true, "not reply sent to runtime - wait notif plugin");

	// plugin register
	ok(true, "send register  plugin 202");
	res = JSON.stringify(putPlugin(_, cookie, "requestSvc?act=523&trackngId=1", cvgSession.sid, {
		act: 523,
		param: {
			plugin: {
				id: 1,
				return: {
					property: {
						name: "001",
						value: 'F'
					}
				}
			}
		}
	}, 202));
	// doesn't matter to analyse the result.
	strictEqual(stream2.writed && stream2.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "write client reply , notif plugin and client ok");

	// no reply 200 so get again a polling
	ok(true, "get tracker session 202");
	get(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 202, false);

	ok(true, "get tracker plugin 202");
	getPlugin(_, cookie, "requestSvc?$trackers=1", cvgSession.sid, 202);

	stream2.setToRead(binaryNode.ND_IHM_gantt_update);

	ok(true, "get tracker plugin 200 - IHM update gantt");
	res = JSON.stringify(getPlugin(_, cookie, "requestSvc?$trackers=1", cvgSession.sid, 200, false, true));
	strictEqual(res, '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"update","methodId":2,"id":1}}}}', "get update ND_IHM for the plugin client");

	ok(true, "get tracker session 202");
	get(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 202, false);

	ok(true, "get tracker session 202");
	ok(true, "send plugin acknowlegdement ");

	get(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 202, false);


	// send plugin response
	ok(true, "send plugin acknowlegdement - 202");

	res = JSON.stringify(putPlugin(_, cookie, "requestSvc?act=524&trackngId=2", cvgSession.sid, {
		act: 524,
		param: {
			method: "new",
			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}, 202));
	stream2.setToRead(binaryNode.NDOBOXI);
	ok(true, "get tracker on session 200");
	var res = JSON.stringify(get(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 200, false, true));

	strictEqual(res, '{"sap":{"target":{"type":"box","box":{"type":0,"def":1,"tit":"","li":["990=\\u0001N\\u0001X15X2F\\n"],"to":0}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1025,"rqtdist":null,"connect":1,"server":""}}}', "info box to the client");

	ok(true, "get tracker on plugin 202");
	getPlugin(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 202);

	ok(true, "send srv_next_filed in response of info box");
	put(_, cookie, "requestSvc?act=1025&trackngId=3", cvgSession.sid, {
		act: 1025,
		fld: {
			fmtKind: "EDIT",
			ist: {
				win: "B",
				xid: "AA1",
				nl: 0
			}
		}
	}, 202, false);


	stream2.setToRead(binaryNode.ND_IHM_gantt_delete);

	ok(true, "get tracker plugin - ND_IHM delete ok 200");
	res = JSON.stringify(getPlugin(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 200, false, true));
	strictEqual(res, '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"delete","methodId":3,"id":1}}}}', "check target delete nd_ihm gantt");
	ok(true, "get tracker client - ND_IHM delete ok 200");
	res = JSON.stringify(get(_, cookie, "requestSvc?$trackers=3", cvgSession.sid, 200, false, true));
	strictEqual(res, '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"delete","methodId":3,"id":1}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1025,"rqtdist":null,"connect":1,"server":""}}}', "check target delete nd_ihm gantt");

	// delete plugin
	JSON.stringify(putPlugin(_, cookie, "requestSvc?act=525&trackngId=3", cvgSession.sid, {
		act: 525,
		param: {
			method: "new",
			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}, 200, false, true));

	// send delete
	res = JSON.stringify(put(_, cookie, "requestSvc?act=527&trackngId=4", cvgSession.sid, {
		act: 527,
		param: {
			method: "new",
			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}, 202));
	// check existance of plugin
	strictEqual(!cvgClient.cvgPlugin["ilog-" + 1], true, "no plugin in client after delete ");

});

it('listenNode -  callilog - test with http request with callui Download', function(_) {
	var id = "id";
	var clientId = "clientId";
	var session = new Session(null, id, clientId);
	var cookie = testAdmin.getCookie(_, baseUrl, "admin", "admin").join(" ");
	var sessionId = cookie.substring(cookie.indexOf("=") + 1, cookie.indexOf(";"));
	var session = sessionManager.sessionById(sessionId);
	var cvgSession = CvgSession.newSession(_, "test1");
	session.client = simulateX3Client();
	var stream2 = new streamTest();


	session.updateCvgSession(cvgSession);

	// intiialization
	localConfig.plugin = localConfig.plugin || {};

	cvgClient = new CvgClient().init(_, session, stream2, {}, null, context);
	cvgClient.killPluginTimoeut = 10000;
	cvgSession._cvgClient = cvgClient;
	cvgClient.cdlang = "FRA";

	cvgClient.generateResponse(_, false, false);


	ok(true, "new CvgClient - send fake next field request - orchestration works case");

	// new ilog


	// NEW GANTT ok

	stream2.setToRead(Buffer.concat([binaryNode.ND_SLF_DOWNLOAD, binaryNode.ND_IHM_gantt_new]));

	ok(true, "send  session client 200 - ND_IHM new gantt");
	var res = JSON.stringify(put(_, cookie, "requestSvc?act=1025&trackngId=1", cvgSession.sid, {
		act: 1025,
		fld: {
			fmtKind: "EDIT",
			ist: {
				win: "B",
				xid: "AA1",
				nl: 0
			}
		}
	}, 200, false, true));

	strictEqual(res, '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"new","methodId":1,"cookieSess":null}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1025,"rqtdist":null,"connect":1,"server":""}}}', "generate reply to the client ND_IHM new ");
	stream2.writed = null;



	// reply client
	ok(true, "send reply session client 202 - ilog launch ok");
	res = JSON.stringify(put(_, cookie, "requestSvc?act=522&trackngId=2", cvgSession.sid, {
		act: 522,
		param: {
			method: "new",
			plugin: {
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}, 202, false));

	// check not reply send to the runtime
	strictEqual(!stream2.writed, true, "not reply sent to runtime - wait notif plugin");

	// plugin register
	ok(true, "send register  plugin 202");
	res = putPlugin(_, cookie, "requestSvc?act=523&trackngId=1", cvgSession.sid, {
		act: 523,
		param: {
			plugin: {
				id: 1,
				return: {
					property: {
						name: "001",
						value: 'F'
					}
				}
			}
		}
	}, 202);
	// check if download if present
	strictEqual(JSON.stringify(res.reply), '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"new","methodId":1,"cookieSess":null,"download":[{"UIAction":"GetFile","UILocalDir":"Temp","UILocalFile":"test_d_1.txt","UIRemoteFile":"TRT/ZZILOG.src","UIDownLoad":"ILOG"}]}}}}', "validate download is present in reply ");

	// no reply 200 so get again a polling
	ok(true, "get tracker session 202");
	get(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 202, false);

	ok(true, "get tracker plugin 202");
	res = getPlugin(_, cookie, "requestSvc?$trackers=1", cvgSession.sid, 202);
	strictEqual(JSON.stringify(res.reply), '{"sap":{}}', "validate no download  is present in reply (already sent) ");

	stream2.setToRead(binaryNode.ND_IHM_gantt_update);

	ok(true, "get tracker plugin 200 - IHM update gantt");
	res = JSON.stringify(getPlugin(_, cookie, "requestSvc?$trackers=1", cvgSession.sid, 200, false, true));
	strictEqual(res, '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"update","methodId":2,"id":1}}}}', "get update ND_IHM for the plugin client");
	ok(true, "get tracker session 202");
	get(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 202, false);


	ok(true, "get tracker session 202");
	ok(true, "send plugin acknowlegdement ");

	get(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 202, false);


	// send plugin response
	ok(true, "send plugin acknowlegdement - 202");

	res = JSON.stringify(putPlugin(_, cookie, "requestSvc?act=524&trackngId=2", cvgSession.sid, {
		act: 524,
		param: {
			method: "new",
			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}, 202));
	stream2.setToRead(binaryNode.ND_SLF_DOWNLOAD);
	flows.sleep(_, 100);
	// test downlod between 2 update
	res = getPlugin(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 202);
	strictEqual(JSON.stringify(res.reply), '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"update","methodId":2,"id":1,"download":[{"UIAction":"GetFile","UILocalDir":"Temp","UILocalFile":"test_d_1.txt","UIRemoteFile":"TRT/ZZILOG.src","UIDownLoad":"ILOG"}]}}}}', "validate no download  is present in reply (already sent) ");
	stream2.setToRead(Buffer.concat([binaryNode.ND_SLF_DOWNLOAD, binaryNode.ND_SLF_DOWNLOAD]));
	flows.sleep(_, 100);



	res = getPlugin(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 202);
	strictEqual(JSON.stringify(res.reply), '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"update","methodId":2,"id":1,"download":[{"UIAction":"GetFile","UILocalDir":"Temp","UILocalFile":"test_d_1.txt","UIRemoteFile":"TRT/ZZILOG.src","UIDownLoad":"ILOG"},{"UIAction":"GetFile","UILocalDir":"Temp","UILocalFile":"test_d_1.txt","UIRemoteFile":"TRT/ZZILOG.src","UIDownLoad":"ILOG"}]}}}}', "validate 2 download  is present in reply ");

	stream2.setToRead(binaryNode.ND_SLF_DOWNLOAD);
	flows.sleep(_, 100);

	res = getPlugin(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 202);
	strictEqual(JSON.stringify(res.reply), '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"update","methodId":2,"id":1,"download":[{"UIAction":"GetFile","UILocalDir":"Temp","UILocalFile":"test_d_1.txt","UIRemoteFile":"TRT/ZZILOG.src","UIDownLoad":"ILOG"}]}}}}', "validate 1 download  is present in reply ");

	stream2.setToRead(binaryNode.ND_IHM_gantt_update);

	res = getPlugin(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 200, false, true);
	strictEqual(JSON.stringify(res), '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"update","methodId":2,"id":1}}}}', "validate no download  is present in reply (already sent)");
	// notig
	res = JSON.stringify(putPlugin(_, cookie, "requestSvc?act=524&trackngId=3", cvgSession.sid, {
		act: 524,
		param: {
			method: "new",
			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}, 202));

	stream2.setToRead(binaryNode.NDOBOXI);
	ok(true, "get tracker on session 200");
	var res = JSON.stringify(get(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 200, false, true));
	strictEqual(res, '{"sap":{"target":{"type":"box","box":{"type":0,"def":1,"tit":"","li":["990=\\u0001N\\u0001X15X2F\\n"],"to":0}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1025,"rqtdist":null,"connect":1,"server":""}}}', "info box to the client");

	ok(true, "get tracker on plugin 202");
	getPlugin(_, cookie, "requestSvc?$trackers=3", cvgSession.sid, 202);

	ok(true, "send srv_next_filed in response of info box");
	put(_, cookie, "requestSvc?act=1025&trackngId=3", cvgSession.sid, {
		act: 1025,
		fld: {
			fmtKind: "EDIT",
			ist: {
				win: "B",
				xid: "AA1",
				nl: 0
			}
		}
	}, 202, false);


	stream2.setToRead(binaryNode.ND_IHM_gantt_delete);

	ok(true, "get tracker plugin - ND_IHM delete ok 200");
	res = JSON.stringify(getPlugin(_, cookie, "requestSvc?$trackers=3", cvgSession.sid, 200, false, true));
	strictEqual(res, '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"delete","methodId":3,"id":1}}}}', "check target delete nd_ihm gantt");
	ok(true, "get tracker client - ND_IHM delete ok 200");
	res = JSON.stringify(get(_, cookie, "requestSvc?$trackers=3", cvgSession.sid, 200, false, true));
	strictEqual(res, '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"delete","methodId":3,"id":1}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1025,"rqtdist":null,"connect":1,"server":""}}}', "check target delete nd_ihm gantt");


	// delete plugin
	JSON.stringify(putPlugin(_, cookie, "requestSvc?act=525&trackngId=4", cvgSession.sid, {
		act: 525,
		param: {
			method: "new",
			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}, 200, false, true));

	//strictEqual(JSON.stringify(cvgClient.cvgPlugin), "{}", "no plugin in client after delete ");
});

it('listenNode -  http - new gantt  launch plugin with delete ', function(_) {
	var id = "id";
	var clientId = "clientId";
	var session = new Session(null, id, clientId);
	var cookie = testAdmin.getCookie(_, baseUrl, "admin", "admin").join(" ");
	var sessionId = cookie.substring(cookie.indexOf("=") + 1, cookie.indexOf(";"));
	var session = sessionManager.sessionById(sessionId);
	var cvgSession = CvgSession.newSession(_, "test1");
	session.client = simulateX3Client();
	var stream2 = new streamTest();

	session.updateCvgSession(cvgSession);

	// intiialization
	localConfig.plugin = localConfig.plugin || {};

	cvgClient = new CvgClient().init(_, session, stream2, {}, null, context);
	cvgClient.killPluginTimoeut = 10000;
	cvgSession._cvgClient = cvgClient;
	cvgClient.cdlang = "FRA";

	cvgClient.generateResponse(_, false, false);



	ok(true, "new CvgClient - send fake next field request - orchestration works case");

	// NEW GANTT ok
	stream2.setToRead(binaryNode.ND_IHM_gantt_new);

	ok(true, "send  session client 200 - ND_IHM new gantt");
	var res = JSON.stringify(put(_, cookie, "requestSvc?act=1025&trackngId=1", cvgSession.sid, {
		act: 1025,
		fld: {
			fmtKind: "EDIT",
			ist: {
				win: "B",
				xid: "AA1",
				nl: 0
			}
		}
	}, 200, false, true));
	strictEqual(res, '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"new","methodId":1,"cookieSess":null}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1025,"rqtdist":null,"connect":1,"server":""}}}', "generate reply to the client ND_IHM new ");
	stream2.writed = null;

	// reply client
	ok(true, "send reply session client 202 - ilog launch ok");
	res = JSON.stringify(put(_, cookie, "requestSvc?act=522&trackngId=2", cvgSession.sid, {
		act: 522,
		id: 1,
		param: {
			method: "new",
			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}, 202, false));
	// check not reply send to the runtime
	strictEqual(!stream2.writed, true, "not reply sent to runtime - wait notif plugin");

	// plugin register
	ok(true, "send register  plugin 202");
	res = JSON.stringify(putPlugin(_, cookie, "requestSvc?act=523&trackngId=1", cvgSession.sid, {
		act: 523,
		id: 1,
		param: {
			plugin: {
				id: 1,
				return: {
					property: {
						name: "001",
						value: 'F'
					}
				}
			}
		}
	}, 202));

	// doesn't matter to analyse the result.
	strictEqual(stream2.writed && stream2.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "write client reply , notif plugin and client ok");

	// no reply 200 so get again a polling
	ok(true, "get tracker session 202");
	get(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 202, false);

	ok(true, "get tracker plugin 202");
	getPlugin(_, cookie, "requestSvc?$trackers=1", cvgSession.sid, 202);

	stream2.setToRead(binaryNode.ND_IHM_gantt_update);

	ok(true, "get tracker plugin 200 - IHM update gantt");
	res = JSON.stringify(getPlugin(_, cookie, "requestSvc?$trackers=1", cvgSession.sid, 200, false, true));
	strictEqual(res, '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"update","methodId":2,"id":1}}}}', "get update ND_IHM for the plugin client");

	ok(true, "get tracker session 202");
	get(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 202, false);

	ok(true, "get tracker session 202");
	ok(true, "send plugin acknowlegdement ");

	get(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 202, false);


	// send plugin response
	ok(true, "send plugin delete - 200");

	res = JSON.stringify(putPlugin(_, cookie, "requestSvc?act=525&trackngId=2", cvgSession.sid, {
		act: 525,
		param: {
			method: "new",
			plugin: {
				id: 1,

				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}, 200, false, true));
	// check existance plugin
	res = JSON.stringify(get(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 200, false));
	strictEqual(res, '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"delete","methodId":3,"id":1}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1025,"rqtdist":null,"connect":1,"server":""}}}', "delete sent by server after sending a delete ");

	JSON.stringify(put(_, cookie, "requestSvc?act=527&trackngId=3", cvgSession.sid, {
		act: 527,
		param: {
			method: "new",
			id: 1,
			plugin: {
				id: 1,

				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}, 202));
	strictEqual(!cvgClient.cvgPlugin["ilog-" + 1], true, "no plugin in client after delete ");


});


it('listenNode -  http - new gantt  launch plugin with download/upload ', function(_) {
	var id = "id";
	var clientId = "clientId";
	var session = new Session(null, id, clientId);
	var cookie = testAdmin.getCookie(_, baseUrl, "admin", "admin").join(" ");
	var sessionId = cookie.substring(cookie.indexOf("=") + 1, cookie.indexOf(";"));
	var session = sessionManager.sessionById(sessionId);
	var cvgSession = CvgSession.newSession(_, "test1");
	session.client = simulateX3Client();
	var stream2 = new streamTest();

	session.updateCvgSession(cvgSession);

	// intiialization
	localConfig.plugin = localConfig.plugin || {};

	cvgClient = new CvgClient().init(_, session, stream2, {}, null, context);
	cvgClient.killPluginTimoeut = 10000;
	cvgSession._cvgClient = cvgClient;
	cvgClient.cdlang = "FRA";

	cvgClient.generateResponse(_, false, false);


	ok(true, "new CvgClient - send fake next field request - orchestration works case");

	// NEW GANTT ok
	stream2.setToRead(binaryNode.ND_IHM_gantt_new);

	ok(true, "send  session client 200 - ND_IHM new gantt");
	var res = JSON.stringify(put(_, cookie, "requestSvc?act=1025&trackngId=1", cvgSession.sid, {
		act: 1025,
		fld: {
			fmtKind: "EDIT",
			ist: {
				win: "B",
				xid: "AA1",
				nl: 0
			}
		}
	}, 200, false, true));
	strictEqual(res, '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"new","methodId":1,"cookieSess":null}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1025,"rqtdist":null,"connect":1,"server":""}}}', "generate reply to the client ND_IHM new ");
	stream2.writed = null;

	// reply client
	ok(true, "send reply session client 202 - ilog launch ok");
	res = JSON.stringify(put(_, cookie, "requestSvc?act=522&trackngId=2", cvgSession.sid, {
		act: 522,
		param: {
			method: "new",

			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}, 202, false));
	// check not reply send to the runtime
	strictEqual(!stream2.writed, true, "not reply sent to runtime - wait notif plugin");


	// plugin register
	ok(true, "send register  plugin 202");
	res = JSON.stringify(putPlugin(_, cookie, "requestSvc?act=523&trackngId=1", cvgSession.sid, {
		act: 523,
		param: {

			plugin: {
				id: 1,

				"return": {
					property: {
						name: "001",
						value: 'F'
					}
				}
			}
		}
	}, 202));

	// doesn't matter to analyse the result.
	strictEqual(stream2.writed && stream2.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "write client reply , notif plugin and client ok");

	// no reply 200 so get again a polling
	ok(true, "get tracker session 202");
	get(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 202, false);

	ok(true, "get tracker plugin 202");
	getPlugin(_, cookie, "requestSvc?$trackers=1", cvgSession.sid, 202);

	stream2.setToRead(binaryNode.ND_IHM_gantt_update);

	ok(true, "get tracker plugin 200 - IHM update gantt");
	res = JSON.stringify(getPlugin(_, cookie, "requestSvc?$trackers=1", cvgSession.sid, 200, false, true));

	strictEqual(res, '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"update","methodId":2,"id":1}}}}', "get update ND_IHM for the plugin client");

	res = JSON.stringify(putPlugin(_, cookie, "requestSvc?act=524&trackngId=2", cvgSession.sid, {
		act: 524,
		param: {
			plugin: {
				id: 1,
				"return": {
					property: {
						name: "001",
						value: 'F'
					}
				}
			}
		}
	}, 202));
	// emulate receive of NDEXECI :
	stream2.setToRead(binaryNode.NDEXECI_UPLOAD);

	ok(true, "get plugin tracker , upload expected 200");
	res = getPlugin(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 200, false, true);
	//strictEqual(JSON.stringify(res), '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"update","methodId":2,"id":1,"upload":"test_upload_1.txt"}}}}', "check response with upload");
	ok(true, "get tracker session 202");

	// test call plugin on upload

	putPlugin(_, cookie, "blobSvc?trackngId=3", cvgSession.sid, "12345", 202);
	getPlugin(_, cookie, "blobSvc?$trackers=3", cvgSession.sid, 202, false);

	ok(true, "get tracker session 202");
	ok(true, "send plugin acknowlegdement ");

	getPlugin(_, cookie, "blobSvc?$trackers=3", cvgSession.sid, 202, false);

	stream2.setToRead(binaryNode.NDEXECI_UPLOAD);

	ok(true, "get tracker plugin 200 - IHM update gantt");
	res = JSON.stringify(getPlugin(_, cookie, "blobSvc?$trackers=3", cvgSession.sid, 200, false, true));
	//strictEqual(res, '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"update","methodId":2,"id":1,"upload":"test_upload_1.txt"}}}}', "check response with upload");
	//console.log(res);

	putPlugin(_, cookie, "blobSvc?trackngId=5", cvgSession.sid, "", 202);
	getPlugin(_, cookie, "blobSvc?$trackers=5", cvgSession.sid, 202, false);

	ok(true, "get tracker session 202");
	ok(true, "send plugin acknowlegdement ");

	getPlugin(_, cookie, "blobSvc?$trackers=5", cvgSession.sid, 202, false);

	stream2.setToRead(binaryNode.NDEXECI_UPLOAD);

	ok(true, "get tracker plugin 200 - IHM update gantt");
	res = JSON.stringify(getPlugin(_, cookie, "blobSvc?$trackers=5", cvgSession.sid, 200, false, true));
	//strictEqual(res, '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"update","methodId":2,"id":1,"upload":"test_upload_1.txt"}}}}', "check response with upload");

	postPlugin(_, cookie, "blobSvc?trackngId=4", cvgSession.sid, null, 202);
	getPlugin(_, cookie, "blobSvc?$trackers=4", cvgSession.sid, 202, false);

	ok(true, "get tracker session 202");
	ok(true, "send plugin acknowlegdement ");

	getPlugin(_, cookie, "blobSvc?$trackers=4", cvgSession.sid, 202, false);

	stream2.setToRead(binaryNode.ND_IHM_gantt_update);

	ok(true, "get tracker plugin 200 - IHM update gantt");
	res = JSON.stringify(getPlugin(_, cookie, "blobSvc?$trackers=4", cvgSession.sid, 200, false, true));
	// send plugin response
	ok(true, "send plugin delete - 200");

	res = JSON.stringify(putPlugin(_, cookie, "requestSvc?act=525&trackngId=3", cvgSession.sid, {
		act: 525,
		param: {
			method: "new",
			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}, 200, false, true));
	// check existance plugin
	//strictEqual(JSON.stringify(cvgClient.cvgPlugin), "{}", "no more plugin in the current session ok");
	res = JSON.stringify(get(_, cookie, "requestSvc?$trackers=2", cvgSession.sid, 200, false));
	strictEqual(res, '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"delete","methodId":3,"id":1}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1081,"rqtdist":null,"connect":1,"server":""}}}', "receive delete after sent action 525 (delete) from plugin");

	JSON.stringify(put(_, cookie, "requestSvc?act=527&trackngId=3", cvgSession.sid, {
		act: 527,
		param: {
			method: "new",
			plugin: {
				id: 1,

				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}, 202));
	// receive inf box

	stream2.setToRead(binaryNode.NDOBOXI);

	res = JSON.stringify(get(_, cookie, "requestSvc?$trackers=3", cvgSession.sid, 200, false, true));
	strictEqual(res, '{"sap":{"target":{"type":"box","box":{"type":0,"def":1,"tit":"","li":["990=\\u0001N\\u0001X15X2F\\n"],"to":0}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1081,"rqtdist":null,"connect":1,"server":""}}}', "box for the client ok");

});

it('listenNode -  http - new gantt failed launch plugin', function(_) {
	var id = "id";
	var clientId = "clientId";
	var session = new Session(null, id, clientId);
	var cookie = testAdmin.getCookie(_, baseUrl, "admin", "admin").join(" ");
	var sessionId = cookie.substring(cookie.indexOf("=") + 1, cookie.indexOf(";"));
	var session = sessionManager.sessionById(sessionId);
	var cvgSession = CvgSession.newSession(_, "test1");
	session.client = simulateX3Client();
	var stream2 = new streamTest();

	session.updateCvgSession(cvgSession);

	// intiialization
	localConfig.plugin = localConfig.plugin || {};
	localConfig.plugin.killTimeoutOnCreate = 1000;

	cvgClient = new CvgClient().init(_, session, stream2, {}, null, context);
	cvgSession._cvgClient = cvgClient;
	cvgClient.cdlang = "FRA";

	cvgClient.generateResponse(_, false, false);



	ok(true, "new CvgClient - send fake next field request - orchestration works case");

	// NEW GANTT ok
	stream2.setToRead(binaryNode.ND_IHM_gantt_new);

	ok(true, "send  session client 200 - ND_IHM new gantt");
	var res = JSON.stringify(put(_, cookie, "requestSvc?act=1025&trackngId=1", cvgSession.sid, {
		act: 1025,
		fld: {
			fmtKind: "EDIT",
			ist: {
				win: "B",
				xid: "AA1",
				nl: 0
			}
		}
	}, 200));
	strictEqual(res, '{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"Scheduling\\\\v6\\\\x3ilog.dll","method":"new","methodId":1,"cookieSess":null}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1025,"rqtdist":null,"connect":1,"server":""}}}', "generate reply to the client ND_IHM new ");
	stream2.writed = null;

	// reply client
	ok(true, "send reply session client 202 - ilog launch ok");
	res = JSON.stringify(put(_, cookie, "requestSvc?act=522&trackngId=2", cvgSession.sid, {
		act: 522,
		param: {
			method: "new",

			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}, 202, false));

	flows.sleep(_, 2000);
	strictEqual(stream2.writed && stream2.writed.toString("hex"), "00000000353939303d014e0158756e646566696e656458313546005b6f626a656374204f626a6563745d74696d656f757420657870697265640a0000000000", "write client reply , notif plugin and client ok");


});

it('listenNode -  callilog - new gantt/scale', function(_) {
	var session = CvgSession.newSession(_, "test1");
	session.client = simulateX3Client();
	var stream = new streamTest();

	stream.readed = binaryNode.ND_GIST;


	// change plugin timeout
	localConfig.plugin = localConfig.plugin || {};
	localConfig.plugin.killTimeoutOnCreate = 2000;

	cvgClient = new CvgClient().init(_, session, stream, {}, null, context);

	cvgClient.cdlang = "FRA";
	ok(true, "new CvgClient ");

	ok(true, "CASE receive ack from client and plugin in time < killtimeout");
	// receive callilog and check generation to the client
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "1",
		IModule: "unitTest"
	});
	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"unitTest","method":"new","methodId":1,"cookieSess":null}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new gantt client reply ok");
	strictEqual(!stream.writed, true, "no data write to x3 runtime"); //

	cvgClient.cvgPlugin["ilog-default"].processRequest(_, context, JSON.stringify({
		act: 522,
		param: {
			method: "new",

			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}));
	strictEqual(!stream.writed, true, "data write after receive client reply ack");

	cvgClient.cvgPlugin["ilog-default"].processRequest(_, context, JSON.stringify({
		act: 523,
		param: {
			method: "new",
			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}));
	// send register to validate the plugin is ok
	strictEqual(stream.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "data write after receive client ack and plugin ack");
	stream.writed = null;
	//strictEqual(stream.writed,"","data write with client send response immediatly ok ");


	ok(true, "CASE receive ack from client in time < killtimeout but plugin ack too late");

	cvgClient = new CvgClient().init(_, session, stream, {}, null, context);

	stream.offset = 0;

	cvgClient.cdlang = "FRA";
	ok(true, "new CvgClient ");
	// receive callilog and check generation to the client
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "1",
		IModule: "unitTest"
	});
	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"unitTest","method":"new","methodId":1,"cookieSess":null}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new gantt client reply ok");
	strictEqual(!stream.writed, true, "no data write to x3 runtime"); //

	cvgClient.cvgPlugin["ilog-default"].processRequest(_, context, JSON.stringify({
		act: 522,
		param: {
			method: "new",

			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}));
	strictEqual(!stream.writed, true, "data write after receive client reply ack");
	flows.sleep(_, 3000);
	strictEqual(stream.writed.toString("hex"), "00000000353939303d014e0158756e646566696e656458313546005b6f626a656374204f626a6563745d74696d656f757420657870697265640a0000000000", "data write after receive client ack and timeout apply before receive plugin ack");
	stream.writed = null;

	stream.setToRead(binaryNode.ND_GIST);
	cvgClient.cvgPlugin["ilog-default"].processRequest(_, context, JSON.stringify({
		act: 523,
		param: {
			method: "new",

			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}));
	// send register to validate the plugin is ok
	strictEqual(!stream.writed, true, "nothin written after receive plugin ack too late ");


	ok(true, "CASE receive ack from plugin in time < killtimeout but client ack too late");

	cvgClient = new CvgClient().init(_, session, stream, {}, null, context);

	stream.offset = 0;

	cvgClient.cdlang = "FRA";
	ok(true, "new CvgClient ");
	// receive callilog and check generation to the client
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "1",
		IModule: "unitTest"
	});
	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"unitTest","method":"new","methodId":1,"cookieSess":null}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new gantt client reply ok");
	strictEqual(!stream.writed, true, "no data write to x3 runtime"); //
	stream.setToRead(binaryNode.ND_GIST);

	cvgClient.cvgPlugin["ilog-default"].processRequest(_, context, JSON.stringify({
		act: 523,
		param: {
			method: "new",

			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}));

	strictEqual(!stream.writed, true, "data write after receive plugin reply ack");
	strictEqual(!stream.writed, true, "data write after receive plugin ack and timeout apply before receive client ack");
	stream.writed = null;

	stream.setToRead(binaryNode.ND_GIST);

	cvgClient.cvgPlugin["ilog-default"].processRequest(_, context, JSON.stringify({
		act: 522,
		param: {
			method: "new",

			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}));
	// send register to validate the plugin is ok
	strictEqual(stream.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "data write after receive plugin ack and timeout apply and after receive client ack");
	stream.writed = null;


	ok(true, "CASE nothin receive from the client and the plugin in time ");

	cvgClient = new CvgClient().init(_, session, stream, {}, null, context);

	stream.offset = 0;

	cvgClient.cdlang = "FRA";
	ok(true, "new CvgClient ");
	// receive callilog and check generation to the client
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "1",
		IModule: "unitTest"
	});
	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"unitTest","method":"new","methodId":1,"cookieSess":null}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new gantt client reply ok");


	stream.writed = null;

	stream.setToRead(binaryNode.ND_GIST);

	cvgClient.cvgPlugin["ilog-default"].processRequest(_, context, JSON.stringify({
		act: 523,
		param: {
			method: "new",

			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}));
	strictEqual(!stream.writed, true, "data write after receive plugin ack and timeout apply before receive client ack");
	stream.setToRead(binaryNode.ND_GIST);
	flows.sleep(_, 3000);

	cvgClient.cvgPlugin["ilog-default"].processRequest(_, context, JSON.stringify({
		act: 522,
		param: {
			method: "new",

			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}));

	// send register to validate the plugin is ok
	strictEqual(stream.writed !== null, true, "data write after receive client ack and timeout apply after receive client ack");

	cvgClient.cvgPlugin["ilog-" + 1] && cvgClient.cvgPlugin["ilog-" + 1].timeout && clearTimeout(cvgClient.cvgPlugin["ilog-" + 1].timeout);

});


it('listenNode -  callilog - update gantt/scale', function(_) {
	var session = CvgSession.newSession(_, "test1");
	session.client = simulateX3Client();
	var stream = new streamTest();

	stream.readed = binaryNode.ND_GIST;

	// change plugin timeout
	localConfig.plugin = localConfig.plugin || {};
	localConfig.plugin.killTimeoutOnCreate = 100;

	cvgClient = new CvgClient().init(_, session, stream, {}, null, context);

	cvgClient.cdlang = "FRA";
	ok(true, "new CvgClient ");


	ok(true, "NEW SCALE");
	// new scale
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "6",
		INumber: 12,
		IModule: "unitTest"
	});

	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"scale","type":"asynchronous","module":"unitTest","method":"new","methodId":6,"cookieSess":null}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new scale");
	cvgClient.razModification();
	stream.writed = null;

	ok(true, "NEW gantt");
	// new gantt
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "1",
		IModule: "unitTest"
	});
	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"unitTest","method":"new","methodId":1,"cookieSess":null}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new gantt");
	cvgClient.razModification();
	stream.writed = null;

	ok(true, "UPDATE gantt");
	//update gantt
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "2",
		INumber: 12,
		IModule: "unitTest"
	});

	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM update gantt, no target plugin serialized in response to classic page client");


	cvgClient.cvgPlugin["ilog-default"].generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.cvgPlugin["ilog-default"].response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"unitTest","method":"update","methodId":2,"id":12}}}}}', "ND_IHM update gantt, target plugin serialized in response to plugin client");
	// check write response to x3 after call plugin controler
	cvgClient.razModification();
	stream.setToRead(binaryNode.ND_GIST);

	cvgClient.cvgPlugin["ilog-default"].processRequest(_, context, JSON.stringify({
		act: 524,
		param: {
			method: "update",

			plugin: {
				id: 12,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}));
	strictEqual(stream.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "check write of ND_IHM to runtime after received property from update "); //
	stream.writed = null;



	ok(true, "UPDATE scale");
	//update scale
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "7",
		INumber: 12,
		IModule: "unitTest"
	});


	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"portal"}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM update gantt, no target plugin serialized in response to classic page client");


	cvgClient.cvgPlugin["ilog-default"].generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.cvgPlugin["ilog-default"].response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"scale","type":"asynchronous","module":"unitTest","method":"update","methodId":7,"id":12}}}}}', "ND_IHM update gantt, target plugin serialized in response to plugin client");


	cvgClient.razModification();
	stream.setToRead(binaryNode.ND_GIST);

	cvgClient.cvgPlugin["ilog-default"].processRequest(_, context, JSON.stringify({
		act: 524,
		param: {
			method: "update",
			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}));
	strictEqual(stream.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "check write of ND_IHM to runtime after received property from update "); //
	stream.writed = null;

	ok(true, "DELETE gantt");
	// gantt delete
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "3",
		INumber: 12,
		IModule: "unitTest"
	});

	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"unitTest","method":"delete","methodId":3,"id":12}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM update gantt, no target plugin serialized in response to classic page client");


	cvgClient.cvgPlugin["ilog-default"].generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.cvgPlugin["ilog-default"].response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","module":"unitTest","method":"delete","methodId":3,"id":12}}}}}', "ND_IHM update gantt, target plugin serialized in response to plugin client");


	// check write response to x3 after call plugin controler
	stream.setToRead(binaryNode.ND_GIST);

	cvgClient.cvgPlugin["ilog-default"].processRequest(_, context, JSON.stringify({
		act: 524,
		param: {
			method: "delete",

			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}));
	strictEqual(stream.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "check write of ND_IHM to runtime after received property from delete "); //
	cvgClient.razModification();
	stream.writed = null;

	ok(true, "DELETE scale");
	// scale delete
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "8",
		INumber: 12,
		IModule: "unitTest"
	});

	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"scale","type":"asynchronous","module":"unitTest","method":"delete","methodId":8,"id":12}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM update gantt, no target plugin serialized in response to classic page client");

	cvgClient.cvgPlugin["ilog-default"].generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.cvgPlugin["ilog-default"].response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"scale","type":"asynchronous","module":"unitTest","method":"delete","methodId":8,"id":12}}}}}', "ND_IHM update gantt, target plugin serialized in response to plugin client");


	// check write response to x3 after call plugin controler
	stream.setToRead(binaryNode.ND_GIST);

	cvgClient.cvgPlugin["ilog-default"].processRequest(_, context, JSON.stringify({
		act: 524,
		param: {
			method: "delete",

			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}));
	strictEqual(stream.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "check write of ND_IHM to runtime after received property from delete "); //
	cvgClient.razModification();
	stream.writed = null;

	cvgClient.cvgPlugin["ilog-default"] && cvgClient.cvgPlugin["ilog-default"].timeout && clearTimeout(cvgClient.cvgPlugin["ilog-default"].timeout);

});

it('listenNode -  callui CR Developper - test with http request and simulation buffer', function(_) {
	var id = "id";
	var clientId = "clientId";
	var session = new Session(null, id, clientId);
	var cookie = testAdmin.getCookie(_, baseUrl, "admin", "admin").join(" ");
	var sessionId = cookie.substring(cookie.indexOf("=") + 1, cookie.indexOf(";"));
	var session = sessionManager.sessionById(sessionId);
	var cvgSession = CvgSession.newSession(_, "test1");
	session.client = simulateX3Client();

	var stream2 = new streamTest();
	var syraCookie = cookie.split('client.id')[0];
	session.updateCvgSession(cvgSession);

	// intiialization
	localConfig.plugin = localConfig.plugin || {};
	localConfig.plugin.killTimeoutOnCreate = 10000;

	cvgClient = new CvgClient().init(_, session, stream2, {}, null, context);

	cvgSession._cvgClient = cvgClient;
	cvgClient.cdlang = "FRA";
	cvgClient.syraSessionCookie = syraCookie;
	cvgClient.generateResponse(_, false, false);
	stream2.setToRead(binaryNode["callui-revert"]);
	var res = JSON.stringify(put(_, cookie, "requestSvc?act=1025&trackngId=1", cvgSession.sid, {
		act: 1025,
		fld: {
			fmtKind: "EDIT",
			ist: {
				win: "B",
				xid: "AA1",
				nl: 0
			}
		}
	}, 200));
	stream2.writed = null;
	var resp = {
		"sap": {
			"target": {
				"type": "plugin",
				"plugin": {
					"class": "CrystalReport",
					"name": "development",
					"type": "asynchronous",
					"method": "new",
					"cookieSess": syraCookie,
					"Statement": "revert",
					"PrintServer": "aytrad.sagefr.adinternal.com:1890",
					"Report": "TABCOUNTRY",
					"ReportID": "TABCOUNTRY#FRA#MBX#SUPDVLP#SUPERV",
					"Lang": "FRA",
					"Solution": "SUPDVLP",
					"Folder": "SUPERV",
					"EndpointProxy": "/sdata/x3/erp/SUPERV/"
				}
			}
		},
		"session": {
			"settings": {
				"mnu": [],
				"datePivot": 1957,
				"dateOrder": 0,
				"dateSep": "/",
				"thousandSep": "," +
					"",
				"decimalSep": "." +
					"",
				"timeSep": ":"
			}
		},
		"srvop": {
			"request": {
				"id": 0,
				"v": 1025,
				"rqtdist": null,
				"connect": 1,
				"server": ""
			}
		}
	};
	strictEqual(res, JSON.stringify(resp), "generate reply to the client DevReport ");

	res = put(_, cookie, "requestSvc?act=532&trackngId=2", cvgSession.sid, {
		act: 532,
		param: {
			method: "new",
			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}, 202, false);

	strictEqual(stream2.writed && stream2.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "write client reply  ok");
	stream2.setToRead(binaryNode.ND_GIST);

	get(_, cookie, "requestSvc?act=532&$trackers=2", cvgSession.sid, 200, false, true);


	strictEqual(cvgClient.cvgPlugin && Object.keys(cvgClient.cvgPlugin).length, 0, " plugin deleted ok ");

});

it('error case send cr request without plugin instanciate ', function(_) {
	var id = "id";
	var clientId = "clientId";
	var session = new Session(null, id, clientId);
	var cookie = testAdmin.getCookie(_, baseUrl, "admin", "admin").join(" ");
	var sessionId = cookie.substring(cookie.indexOf("=") + 1, cookie.indexOf(";"));
	var session = sessionManager.sessionById(sessionId);
	var cvgSession = CvgSession.newSession(_, "test1");
	var stream2 = new streamTest();
	var syraCookie = cookie.split('client.id')[0];
	session.updateCvgSession(cvgSession);
	session.client = simulateX3Client();

	// intiialization
	localConfig.plugin = localConfig.plugin || {};
	localConfig.plugin.killTimeoutOnCreate = 10000;

	cvgClient = new CvgClient().init(_, session, stream2, {}, null, context);

	cvgSession._cvgClient = cvgClient;
	cvgClient.cdlang = "FRA";
	cvgClient.syraSessionCookie = syraCookie;
	cvgClient.generateResponse(_, false, false);


	var res = put(_, cookie, "requestSvc?act=532&trackngId=2", cvgSession.sid, {
		act: 532,
		param: {
			method: "new",
			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}, 500, false);



});