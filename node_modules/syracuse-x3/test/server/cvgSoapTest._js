"use strict";
var locale = require('syracuse-core/lib/locale');
var CvgClient = require('syracuse-x3/lib/convergence/client/CvgClient').CvgClient;
var CvgSession = require('syracuse-x3/lib/cvgSession');
var syracuse = require('syracuse-main/lib/syracuse');

var mongodb = require('streamline-mongodb');
var CvgIst = require('syracuse-x3/lib/convergence/types/CvgIst').CvgIst;
var x3helpers = require('syracuse-x3/lib/helpers');
var helpers = require('syracuse-core/lib/helpers');
var x3writer = require("syracuse-x3/lib/convergence/automata/x3writer");
var config = require('config'); // must be first syracuse require
var CvgClientWS = require("syracuse-x3/lib/clients/soap/CvgClientWS").CvgClientWS;
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;

var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var jsonImport = require("syracuse-import/lib/jsonImport");
var globals = require('streamline/lib/globals');

var flows = require("streamline/lib/util/flows");
var localConfig = x3helpers.config("x3fusion", null, {});
var done;

QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});
var context = {
	endpoint: function(_) {
		return {
			x3server: function(_) {
				return {
					serverHost: function(_) {
						return "aws-x3-devx3";
					},
					serverPort: function(_) {
						return 2050;
					},
					serverName: function(_) {
						return "aws-x3-devx3";
					}
				};
			},
			getWebServerBaseUrl: function(_) {
				return "";
			},
			x3ServerFolder: function(_) {
				return "GX3APP";
			},
			x3SolutionName: function(_) {
				return "X3DVLP";
			}
		};
		/*return adminHelper.getEndpoint(_, {
			jsonWhere: {
				dataset: "SUPERV"
			}
		});*/
	},
	endpointSUPERV: function(_) {
		return {
			x3server: function(_) {
				return {
					serverHost: function(_) {
						return "aws-x3-devsup";
					},
					serverPort: function(_) {
						return 17000;
					},
					serverName: function(_) {
						return "aws-x3-devsup";
					}
				};
			},
			getWebServerBaseUrl: function(_) {
				return "";
			},
			x3ServerFolder: function(_) {
				return "SUPERV";
			},
			x3SolutionName: function(_) {
				return "SUPDVLP";
			}
		};
		/*return adminHelper.getEndpoint(_, {
		 jsonWhere: {
		 dataset: "SUPERV"
		 }
		 });*/
	},
	endpointBidon: function(_) {
		return {
			x3server: function(_) {
				return {
					serverHost: function(_) {
						return "bidon";
					},
					serverPort: function(_) {
						return 2050;
					},
					serverName: function(_) {
						return "bidon";
					}
				};
			},
			getWebServerBaseUrl: function(_) {
				return "";
			},
			x3ServerFolder: function(_) {
				return "GX3APP";
			},
			x3SolutionName: function(_) {
				return "X3DVLP";
			}
		};
		/*return adminHelper.getEndpoint(_, {
		 jsonWhere: {
		 dataset: "SUPERV"
		 }
		 });*/
	},
	user: function(_) {
		return {
			getEndpointLogin: function(_, uuid) {
				return "AP";
			},
			infov6: function(_) {
				return false;
			}
		};
	},
	userBidon: function(_) {
		return {
			getEndpointLogin: function(_, uuid) {
				return "BIDON";
			},
			infov6: function(_) {
				return false;
			}
		};
	},
	request: {
		session: {
			host: "http://localhost:8124"
		}
	},
	httpSession: {
		getData: function(param) {
			return {};
		}
	},
	baseUrl: "http://localhost:8124"
};

var frfr = null;
var enus = null;
asyncTest("locale Pref", function(_) {
	var db = adminHelper.getCollaborationOrm(_);
	frfr = db.fetchInstances(_, db.model.getEntity(_, "localePreference"), {
		jsonWhere: {
			code: "fr-FR"
		}
	})[0];
	enus = db.fetchInstances(_, db.model.getEntity(_, "localePreference"), {
		jsonWhere: {
			code: "en-US"
		}
	})[0];
	start();
});

/*asyncTest("Ws Classic Soap Client -  connect / disconnect ", function(_) {

	//work connection Fr-FR

	var cli = new CvgClientWS(_, context.endpoint(_), context.user(_), frfr, context);
	strictEqual(cli.stream !== null, true, "client connected ok");

	strictEqual(cli._x3SessionSettings.ADXLangIso, "fr-FR", "client langue ISO fr FR ok");
	strictEqual(cli._x3SessionSettings.cdLang, "FRA", "client langue FRA ok ");
	strictEqual(cli._x3SessionSettings.Userconnect, "true", "user connected ok");
	strictEqual(cli._x3SessionSettings.usrProfile, "ADMIN", "user profile used ADMIN ok");

	cli.disconnectClient(_, {}, "normal close");
	strictEqual(cli.stream !== null, false, "client disconnected ok");

	//work connection en-US
	var cli = new CvgClientWS(_, context.endpoint(_), context.user(_), enus, context);
	strictEqual(cli.stream !== null, true, "client connected ok");

	strictEqual(cli._x3SessionSettings.ADXLangIso, "en-US", "client langue ISO en US ok");
	strictEqual(cli._x3SessionSettings.cdLang, "ENG", "client langue ENG ok");
	strictEqual(cli._x3SessionSettings.Userconnect, "true", "user connected ok");
	strictEqual(cli._x3SessionSettings.usrProfile, "ADMIN", "user profile used ADMIN ok");

	cli.disconnectClient(_, {}, "normal close");
	strictEqual(cli.stream !== null, false, "client disconnected ok");

	// failed bad endpoint
	try {
		cli = new CvgClientWS(_, context.endpointBidon(_), context.user(_), enus, context);
		ok(false, "bad endpoint client must raise an error");
	} catch (e) {
		ok(true, "bad endpoint client raised an error ok");

		strictEqual(cli.stream !== null, false, "bad endpoint client not connected ok");
	}

	// failed bad user
	cli = new CvgClientWS(_, context.endpoint(_), context.userBidon(_), enus, context);
	strictEqual(cli.stream !== null, false, "bad user client not connected ok");

	//

	start();
});

asyncTest("Ws Classic Soap Client -  call sub program", function(_) {
	var cli = new CvgClientWS(_, context.endpointSUPERV(_), context.user(_), enus, context);

	var reply = cli.execAckCall(_, "QLFWSADD:ADDDECIMAL", 0, [{
		"dim": 1,
		"nb": 1,
		"size": 1,
		"typ": "DCB",
		"resu": 3.0
	}, {
		"dim": 1,
		"nb": 1,
		"size": 1,
		"typ": "DCB",
		"resu": 2.0
	}, {
		"dim": 1,
		"nb": 0,
		"size": 1,
		"typ": "DCB",
	}]);

	strictEqual(JSON.stringify(reply), '{"json":{"result":{"errp":"","errm":"","errn":0,"errt":0,"errl":0},"debugInfos":{"exceptiondetail":"","totalduration":0,"execduration":0,"trace":""},"return":{"typ":"NULL","resu":null},"params":[{"num":2,"poste":0,"typ":"DCB","resu":"5"}]}}', " reply QLFWSADD:ADDECIMAL ok");
	var reply = cli.execAckCall(_, "QLFWSSLP:DOSLEEP", 0, [{
		"dim": 1,
		"nb": 1,
		"size": 1,
		"typ": "INT",
		"resu": 2
	}, {
		"dim": 1,
		"nb": 0,
		"size": 1,
		"typ": "INT",
	}]);

	strictEqual(JSON.stringify(reply), '{"json":{"result":{"errp":"","errm":"","errn":0,"errt":0,"errl":0},"debugInfos":{"exceptiondetail":"","totalduration":0,"execduration":0,"trace":""},"return":{"typ":"NULL","resu":null},"params":[{"num":1,"poste":0,"typ":"INT","resu":1}]}}', " reply QLFWSSLP:DOSLEEP ok");

	cli.disconnectClient(_, {}, "normal close");
	start();
});*/

asyncTest("Ws Classic Soap Client -  call technical sub program", function(_) {
	var cli = new CvgClientWS(_, context.endpointSUPERV(_), context.user(_), enus, context);

	var param = [{
		"descr": "WW_OK",
		"dim": 1,
		"nb": 1,
		"size": 0,
		"typ": "INT",
		"resu": -1
	}, {
		"descr": "WW_ZONE",
		"dim": 1,
		"nb": 0,
		"size": 30,
		"typ": "STRU"
	}, {
		"descr": "WW_STAT",
		"dim": 1,
		"nb": 0,
		"size": 0,
		"typ": "INT"
	}, {
		"descr": "WW_GRAVE",
		"dim": 50,
		"nb": 0,
		"size": 0,
		"typ": "INT"
	}, {
		"descr": "WW_MESS",
		"dim": 50,
		"nb": 0,
		"size": 250,
		"typ": "STRU"
	}, {
		"descr": "WW_ACTION",
		"dim": 1,
		"nb": 1,
		"size": 4,
		"typ": "STRU",
		"resu": "EXEC"
	}, {
		"descr": "WW_IDENT",
		"dim": 1,
		"nb": 0,
		"size": 250,
		"typ": "STRU"
	}, {
		"descr": "WW_NB",
		"dim": 1,
		"nb": 0,
		"size": 0,
		"typ": "INT",
		"resu": 0
	}, {
		"descr": "WW_HORDAT",
		"dim": 1,
		"nb": 1,
		"size": 14,
		"typ": "STRU",
		"resu": "20111107154523"
	}, {
		"descr": "WW_TAB",
		"dim": 1,
		"nb": 0,
		"size": 20,
		"typ": "STRU"
	}, {
		"descr": "WW_PAR",
		"dim": 1,
		"nb": 0,
		"size": 80,
		"typ": "STRU",
	}, {
		"descr": "WW_TRACE",
		"dim": 1,
		"nb": 1,
		"size": 8,
		"typ": "CLOB",
		"resu": ""
	}, {
		"descr": "A",
		"dim": 1,
		"nb": 1,
		"size": 0,
		"typ": "DCB",
		"resu": 0.22
	}, {
		"descr": "B",
		"dim": 1,
		"nb": 1,
		"size": 0,
		"typ": "DCB",
		"resu": 0.33
	}, {
		"descr": "R",
		"dim": 1,
		"nb": 1,
		"size": 0,
		"typ": "DCB",
		"resu": 0
	}];
	var reply = cli.execAckCall(_, "WSQLFWSADD:ADDDECIMAL", 0, param);
	console.log("reply " + JSON.stringify(reply, null, 2));

	cli.disconnectClient(_, {}, "normal close");

	start();
});


asyncTest("Ws Classic Soap Client -  call sub program and manage error", function(_) {

	start();
});


test("kill", function() {
	done = true;
	start();
});