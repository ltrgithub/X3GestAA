"use strict";

require('syracuse-main/lib/syracuse');
var config = require('config');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var CvgClientWS = require('syracuse-x3/lib/clients/soap/CvgClientWS').CvgClientWS;
var CvgWSCall = require('syracuse-x3/lib/clients/soap/CvgWSCall').CvgWSCall;
var CvgWsException = require("syracuse-x3/lib/clients/soap/CvgWsException").CvgWsException;
var crypto = require('crypto');

var TechInfo = require('syracuse-soap/lib/generic/techInfo').TechInfo;
var jsxml = require('jsxml');
var done;
var clientWsUnit = config && config.qunit && config.qunit.soap && config.qunit.soap.generic || {};
var ufs = require('fs');
var path = process.mainModule.filename.substring(0, process.mainModule.filename.indexOf("node_modules")) + "node_modules/syracuse-x3/test/server/";

QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});

var endpoints = {
	endpoint: function(_) {
		return {
			x3server: function(_) {
				return {
					serverHost: function(_) {
						return "aws-x3-devx3";
					},
					serverPort: function(_) {
						return 2050;
					},
					serverName: function(_) {
						return "aws-x3-devx3";
					}
				};
			},
			getWebServerBaseUrl: function(_) {
				return "http://aws-x3-devx3/Adonix_X3DVLP";
			},
			x3ServerFolder: function(_) {
				return "GX3APP";
			},
			dataset: function(_) {
				return "GX3APP";
			},
			x3SolutionName: function(_) {
				return "X3DVLP";
			}
		};
		/*return adminHelper.getEndpoint(_, {
		 jsonWhere: {
		 dataset: "SUPERV"
		 }
		 });*/
	},
	endpointSUPERV: function(_) {
		return {
			dataset: function(_) {
				return "SUPERV";
			},
			x3server: function(_) {
				return {
					serverHost: function(_) {
						return "aws-x3-devsup";
					},
					serverPort: function(_) {
						return 17000;
					},
					serverName: function(_) {
						return "aws-x3-devsup";
					}
				};
			},
			getWebServerBaseUrl: function(_) {
				return "http://aws-x3-devsup/Adonix_SUPDVLP";
			},
			x3ServerFolder: function(_) {
				return "SUPERV";
			},
			x3SolutionName: function(_) {
				return "SUPDVLP";
			}
		};
		/*return adminHelper.getEndpoint(_, {
		 jsonWhere: {
		 dataset: "SUPERV"
		 }
		 });*/
	},
	endpointBidon: function(_) {
		return {
			dataset: function(_) {
				return "BIDON";
			},
			x3server: function(_) {
				return {
					serverHost: function(_) {
						return "bidon";
					},
					serverPort: function(_) {
						return 2050;
					},
					serverName: function(_) {
						return "bidon";
					}
				};
			},
			getWebServerBaseUrl: function(_) {
				return "";
			},
			x3ServerFolder: function(_) {
				return "GX3APP";
			},
			x3SolutionName: function(_) {
				return "X3DVLP";
			}
		};
		/*return adminHelper.getEndpoint(_, {
		 jsonWhere: {
		 dataset: "SUPERV"
		 }
		 });*/
	},

};

var users = {
	user: function(_) {
		return {
			getEndpointLogin: function(_, uuid) {
				return "AP";
			},
			infov6: function(_) {
				return false;
			}
		};
	},
	user2: function(_) {
		return {
			getEndpointLogin: function(_, uuid) {
				return "TCA";
			},
			infov6: function(_) {
				return false;
			}
		};
	},
	userBidon: function(_) {
		return {
			getEndpointLogin: function(_, uuid) {
				return "BIDON";
			},
			infov6: function(_) {
				return false;
			}
		};
	},
};

var localePrefs = {};

var context = {
	session: {
		genericWsCtx: {}
	},
	request: {
		session: {
			host: "http:localhost:8124"
		}
	},
	httpSession: {
		getData: function(param) {
			return {};
		}
	},
	baseUrl: "http:localhost:8124"
};
var context2 = {
	session: {
		genericWsCtx: {}
	},
	request: {
		session: {
			host: "http:localhost:8124"
		}
	},
	httpSession: {
		getData: function(param) {
			return {};
		}
	},
	baseUrl: "http:localhost:8124"
};

asyncTest("locale Pref", function(_) {
	var db = adminHelper.getCollaborationOrm(_);
	localePrefs["fr-FR"] = db.fetchInstances(_, db.model.getEntity(_, "localePreference"), {
		jsonWhere: {
			code: "fr-FR"
		}
	})[0];
	localePrefs["en-US"] = db.fetchInstances(_, db.model.getEntity(_, "localePreference"), {
		jsonWhere: {
			code: "en-US"
		}
	})[0];
	start();
});

function computeHash(data) {
	if (data) {
		var shasum = crypto.createHash('sha1');
		shasum.update(data, "utf8");
		data = shasum.digest('hex');
	}
}
var recOptions = {
	recMode: clientWsUnit.online ? "REC" : "PLAY",
	path: "node_modules/syracuse-x3/lib/clients/soap/data"
};
asyncTest("Ws Classic Soap Client -  connect / disconnect ", function(_) {

	if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file
	//work connection fr-FR
	context.httpSession.genericWsCtx = {
		endpoint: endpoints.endpoint(_),
		user: users.user(_),
		localePref: localePrefs["fr-FR"]
	};
	recOptions.fileName = "cvgClientWS_connectdisconnect_1_.json";

	var cli = new CvgClientWS().init(_, context, recOptions);
	strictEqual(cli.stream !== null, true, "client connected ok");

	strictEqual(cli._x3SessionSettings.Userconnect, "true", "user connected ok");
	strictEqual(cli._x3SessionSettings.usrProfile, "ADMIN", "user profile used ADMIN ok");

	cli.disconnectClient(_);
	strictEqual(cli.stream !== null, false, "client disconnected ok");

	//work connection en-US
	context.httpSession.genericWsCtx.localePref = localePrefs["en-US"];
	recOptions.fileName = "cvgClientWS_connectdisconnect_2_.json";
	cli = new CvgClientWS().init(_, context, recOptions);
	strictEqual(cli.stream !== null, true, "client connected ok");

	strictEqual(cli._x3SessionSettings.Userconnect, "true", "user connected ok");
	strictEqual(cli._x3SessionSettings.usrProfile, "ADMIN", "user profile used ADMIN ok");

	cli.disconnectClient(_);
	strictEqual(cli.stream !== null, false, "client disconnected ok");

	// failed bad endpoint
	try {
		context.httpSession.genericWsCtx.endpoint = endpoints.endpointBidon(_);
		cli = new CvgClientWS().init(_, context);
		ok(false, "bad endpoint client must raise an error");
	} catch (e) {
		ok(true, "bad endpoint client raised an error ok");
		strictEqual(e.message, "Cannot connect to server bidon:2050; Error getaddrinfo ENOTFOUND", "excpetion raised ok");
		cli.disconnectClient(_);
		strictEqual(cli.stream !== null, false, "bad endpoint client not connected ok");
	}

	// failed bad user
	context.httpSession.genericWsCtx.endpoint = endpoints.endpoint(_);
	context.httpSession.genericWsCtx.user = users.userBidon(_);
	recOptions.fileName = "cvgClientWS_connectdisconnect_4_.json";

	cli = new CvgClientWS().init(_, context, recOptions);
	cli.disconnectClient(_);
	strictEqual(cli.stream !== null, false, "bad user client not connected ok");


	start();
});

asyncTest("Ws Classic Soap Client -  call sub program", function(_) {
	context.httpSession.genericWsCtx.endpoint = endpoints.endpointSUPERV(_);
	context.httpSession.genericWsCtx.user = users.user(_);
	recOptions.fileName = "cvgClientWS_callsubprog_1_.json";

	var cli = new CvgClientWS().init(_, context, recOptions);

	var reply = cli.execAckCall(_, "QLFWSADD:ADDDECIMAL", 0, [{
		"dim": 1,
		"nb": 1,
		"size": 1,
		"typ": "DCB",
		"resu": 3.0
	}, {
		"dim": 1,
		"nb": 1,
		"size": 1,
		"typ": "DCB",
		"resu": 2.0
	}, {
		"dim": 1,
		"nb": 0,
		"size": 1,
		"typ": "DCB",
	}], new TechInfo());

	strictEqual(JSON.stringify(reply), '{"json":{"result":{"errp":"","errm":"","errn":0,"errt":0,"errl":0},"debugInfos":{"exceptiondetail":"","totalduration":0,"execduration":0,"trace":""},"return":{"typ":"NULL","resu":null},"params":[{"num":2,"poste":0,"typ":"DCB","resu":"5"}]}}', " reply QLFWSADD:ADDECIMAL ok");
	reply = cli.execAckCall(_, "QLFWSSLP:DOSLEEP", 0, [{
		"dim": 1,
		"nb": 1,
		"size": 1,
		"typ": "INT",
		"resu": 2
	}, {
		"dim": 1,
		"nb": 0,
		"size": 1,
		"typ": "INT",
	}], new TechInfo());

	strictEqual(JSON.stringify(reply), '{"json":{"result":{"errp":"","errm":"","errn":0,"errt":0,"errl":0},"debugInfos":{"exceptiondetail":"","totalduration":0,"execduration":0,"trace":""},"return":{"typ":"NULL","resu":null},"params":[{"num":1,"poste":0,"typ":"INT","resu":1}]}}', " reply QLFWSSLP:DOSLEEP ok");

	cli.disconnectClient(_);
	start();
});

asyncTest("Ws Classic Soap Client -  technical Subprogram", function(_) {
	context.httpSession.genericWsCtx = {
		endpoint: endpoints.endpointSUPERV(_),
		user: users.user(_),
		localePref: localePrefs["fr-FR"]
	};
	recOptions.fileName = "cvgClientWS_techsubprogs.json";
	var res;
	var cli = new CvgClientWS().init(_, context, recOptions);
	var techInfo = new TechInfo();
	var wsCall = new CvgWSCall(techInfo, "FRA", {
		name: "QLFWSADD"
	});
	res = cli._flush(_, wsCall);
	strictEqual(res, true, "result flush ok");

	// change context with good value language
	//cli = new CvgClientWS().init(_, context, recOptions);
	wsCall.techInfo = new TechInfo();

	res = cli._changeLogin(_, "AP", "ENG", wsCall);
	strictEqual(res, 1, "result change language ok");


	// change context with good user and good language
	//cli = new CvgClientWS().init(_, context, recOptions);
	wsCall.techInfo = new TechInfo();

	res = cli._changeLogin(_, "TCA", "ENG", wsCall);
	strictEqual(res, 1, "result change login and language ok");

	// change context with bad language
	//cli = new CvgClientWS().init(_, context, recOptions);
	wsCall.techInfo = new TechInfo();
	res = cli._changeLogin(_, "AP", "FRI", wsCall);
	strictEqual(res, 0, "result change bad language ");

	// change context with bad user
	//cli = new CvgClientWS().init(_, context, recOptions);
	res = cli._changeLogin(_, "BIDON", "FRA", new TechInfo());
	strictEqual(res, 0, "result change bad user ");


	// get hdat with good stamp
	//cli = new CvgClientWS().init(_, context, recOptions);
	techInfo = new TechInfo();
	wsCall = new CvgWSCall(techInfo, "FRA", {
		name: "QLFWSADD"
	});

	var decription = cli._getDescription(_, null, wsCall);

	var stamp = decription.$.TIM;
	try {
		res = cli._recupHDAT(_, wsCall, stamp, techInfo);
		ok(true, "result recuphdat ");
	} catch (e) {
		ok(false, "result recuphdat exception " + e.stack);
	}

	// get hdat with bad stamp
	//cli = new CvgClientWS().init(_, context, recOptions);
	wsCall = new CvgWSCall(techInfo, "FRA", {
		name: "QLFWSADD"
	});
	var techinfo = new TechInfo();
	try {
		cli._recupHDAT(_, wsCall, "33333333333333", techinfo);
	} catch (e) {
		if (e instanceof CvgWsException) {
			strictEqual(e.message, "Timestamp out of phase (9)");
		}
	}

	strictEqual(techinfo.reloadWebs, true, "techinfo reload webs ok");
	cli.disconnectClient(_);

	// get hdat and not a timestamp that match the one in the description
	//cli = new CvgClientWS().init(_, context, recOptions);
	wsCall = new CvgWSCall(techInfo, "FRA", {
		name: "QLFWSADD"
	});
	// override _getDescirption in order to simulate a bad timstamp
	cli._getDescription = function(_, context, wsCall, ignoreCache) {
		techInfo.loadWebsDuration.start();
		var res = '<?xml version="1.0" encoding="UTF-8" ?><ADXDOC TIM="11111111111111"></ADXDOC>';
		techInfo.loadWebsDuration.stop();
		return res;
	};

	try {
		cli._recupHDAT(_, wsCall, "44444444444444", techinfo);
	} catch (e) {
		if (e instanceof CvgWsException) {
			strictEqual(e.message, "Timestamp out of phase (9)");
		}
	}
	strictEqual(techinfo.reloadWebs, true, "techinfo reload webs ok");


	cli.disconnectClient(_);


	start();
});
asyncTest("Ws Classic Soap Client -  execWs", function(_) {
	context.httpSession.genericWsCtx = {
		endpoint: endpoints.endpointSUPERV(_),
		user: users.user(_),
		localePref: localePrefs["fr-FR"]
	};
	recOptions.fileName = "cvgClientWS_execWs_1_.json";

	var cli = new CvgClientWS().init(_, context, recOptions);

	var techInfo = new TechInfo();
	var reply, xml;
	reply = cli.execWs(_, context, {
		name: "QLFWSADD",
		flow: '<?xml version="1.0" encoding="UTF-8"?><PARAM><GRP ID="G1" ><FLD NAME="A" >2.112</FLD><FLD NAME="B" >97.887</FLD><FLD NAME="R" >0</FLD></GRP></PARAM>', // ...xml
		action: "EXEC",
		trace: "",
		wkeys: "",
		nb: 0,
		debugInfo: 0,
		tab: "",
		par: "",
	}, techInfo);

	strictEqual(JSON.stringify(jsxml.parse(reply.result)), '{"RESULT":{"GRP":{"$":{"ID":"G1"},"FLD":[{"$":{"NAME":"A","TYPE":"Decimal"},"$value":"2.112"},{"$":{"NAME":"B","TYPE":"Decimal"},"$value":"97.887"},{"$":{"NAME":"R","TYPE":"Decimal"},"$value":"99.999"}]}}}', "result ok");
	strictEqual(techInfo.changeLanguage, false, " no change language  ok ");
	strictEqual(techInfo.changeUserId, false, " no change  user ok ");


	context2.httpSession.genericWsCtx = {
		endpoint: endpoints.endpointSUPERV(_),
		user: users.user(_),
		localePref: localePrefs["en-US"]
	};

	techInfo = new TechInfo();



	// test change contet with onluy language
	reply = cli.execWs(_, context2, {
		name: "QLFWSADD",
		flow: '<?xml version="1.0" encoding="UTF-8"?><PARAM><GRP ID="G1" ><FLD NAME="A" >2.112</FLD><FLD NAME="B" >97.887</FLD><FLD NAME="R" >0</FLD></GRP></PARAM>', // ...xml
		action: "EXEC",
		trace: "",
		wkeys: "",
		nb: 0,
		debugInfo: 0,
		tab: "",
		par: "",
	}, techInfo);

	strictEqual(JSON.stringify(jsxml.parse(reply.result)), '{"RESULT":{"GRP":{"$":{"ID":"G1"},"FLD":[{"$":{"NAME":"A","TYPE":"Decimal"},"$value":"2.112"},{"$":{"NAME":"B","TYPE":"Decimal"},"$value":"97.887"},{"$":{"NAME":"R","TYPE":"Decimal"},"$value":"99.999"}]}}}', "result ok");
	strictEqual(techInfo.changeLanguage, true, "  change language  ok ");
	strictEqual(techInfo.changeUserId, false, " no change  user ok ");

	context.httpSession.genericWsCtx = {
		endpoint: endpoints.endpointSUPERV(_),
		user: users.user2(_),
		localePref: localePrefs["fr-FR"]
	};
	techInfo = new TechInfo();

	// test change contet with login and language
	reply = cli.execWs(_, context, {
		name: "QLFWSADD",
		flow: '<?xml version="1.0" encoding="UTF-8"?><PARAM><GRP ID="G1" ><FLD NAME="A" >2.112</FLD><FLD NAME="B" >97.887</FLD><FLD NAME="R" >0</FLD></GRP></PARAM>', // ...xml
		action: "EXEC",
		trace: "",
		wkeys: "",
		nb: 0,
		debugInfo: 0,
		tab: "",
		par: "",
	}, techInfo);

	strictEqual(JSON.stringify(jsxml.parse(reply.result)), '{"RESULT":{"GRP":{"$":{"ID":"G1"},"FLD":[{"$":{"NAME":"A","TYPE":"Decimal"},"$value":"2.112"},{"$":{"NAME":"B","TYPE":"Decimal"},"$value":"97.887"},{"$":{"NAME":"R","TYPE":"Decimal"},"$value":"99.999"}]}}}', "result ok");
	strictEqual(techInfo.changeLanguage, true, "  change language  ok ");
	strictEqual(techInfo.changeUserId, true, "  change  user ok ");


	techInfo = new TechInfo();

	// test change contet with login and language
	reply = cli.execWs(_, context, {
		name: "OAUS",
		flow: '', // ...xml
		action: "READ",
		trace: "",
		wkeys: [{
			key: "USR",
			value: "AP"
		}, {
			key: "LOGIN",
			value: "AP"
		}],
		nb: 0,
		debugInfo: 0,
		tab: "",
		par: "",
	}, techInfo);

	xml = ufs.readFileSync(path + "data/soap/soapReadOaus.xml", 'utf8') || "";
	strictEqual(computeHash(reply.result), computeHash(xml), "reply read OAUS ok");
	strictEqual(techInfo.changeLanguage, false, " no change language  ok ");
	strictEqual(techInfo.changeUserId, false, " no change  user ok ");

	reply = cli.execWs(_, context, {
		name: "OAUS",
		flow: '', // ...xml
		action: "LIST",
		trace: "",
		wkeys: [],
		nb: 10,
		debugInfo: 0,
		tab: "",
		par: "",
	}, techInfo);

	xml = ufs.readFileSync(path + "data/soap/soapListOaus.xml", 'utf8').trim() || "";

	strictEqual(computeHash(reply.result), computeHash(xml), "reply list OAUS ok");
	strictEqual(techInfo.changeLanguage, false, " no change language  ok ");
	strictEqual(techInfo.changeUserId, false, " no change  user ok ");

	reply = cli.execWs(_, context, {
		name: "OAUS",
		flow: '<?xml version="1.0" encoding="utf-8"?><PARAM><GRP ID="AUS1_0"><FLD NAME="INTUSR" >Aurelien</FLD></GRP></PARAM>', // ...xml
		action: "MODIFY",
		trace: "",
		wkeys: [{
			"key": "USR",
			"value": "AP"
		}],
		nb: 10,
		debugInfo: 0,
		tab: "",
		par: "",
	}, techInfo);

	xml = ufs.readFileSync(path + "data/soap/soapUpdateOaus.xml", 'utf8').trim() || "";

	strictEqual(computeHash(reply.result), computeHash(xml), "reply update OAUS ok");
	strictEqual(techInfo.changeLanguage, false, " no change language  ok ");
	strictEqual(techInfo.changeUserId, false, " no change  user ok ");

	//	// launch again to reset the old value
	//	reply = cli.execWs(_, context, {
	//		name: "OAUS",
	//		flow: '<?xml version="1.0" encoding="utf-8"?><PARAM><GRP ID="AUS1_0"><FLD NAME="INTUSR" >Aurelien Pisu </FLD></GRP></PARAM>', // ...xml
	//		action: "MODIFY",
	//		trace: "",
	//		wkeys: [],
	//		nb: 10,
	//		debugInfo: 0,
	//		tab: "",
	//		par: "",
	//	}, techInfo);
	//
	//	xml = ufs.readFileSync(path + "data/soap/soapReadOaus.xml", 'utf8').trim() || "";
	//
	//	//console.log("REPLY: " + reply.result);
	//
	//	strictEqual(computeHash(reply.result), computeHash(xml), "reply reset old value - update OAUS ok");
	//	strictEqual(techInfo.changeLanguage, false, " no change language  ok ");
	//	strictEqual(techInfo.changeUserId, false, " no change  user ok ");

	cli.disconnectClient(_);

	start();
});


test("kill", function() {
	done = true;
	start();
});