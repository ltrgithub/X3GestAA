"use strict";

require('syracuse-main/lib/syracuse');
var config = require('config');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var jsxml = require('jsxml');
var CvgClientWS = require('syracuse-x3/lib/clients/soap/CvgClientWS').CvgClientWS;
var WsCall = require('syracuse-soap/lib/generic/wsCall').WsCall;
var CvgWsException = require("syracuse-x3/lib/clients/soap/CvgWsException").CvgWsException;
var crypto = require('crypto');
var done;
var descriptor = require("syracuse-x3/lib/convergence/automata/x3Descriptors");

var clientWsUnit = config && config.qunit && config.qunit.soap && config.qunit.soap.generic || {};

QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});

function simulateX3solution(_, host, port) {
	return function(_) {
		return {
			serverHost: function(_) {
				return host;
			},
			selectX3Server: function(_) {

				return {
					serverHost: function(_) {
						return host;
					},
					serverPort: function(_) {
						return port;
					},
					bannish: function(_) {
						return false;
					}
				};
			},
			proxy: function(_) {
				return false;
			}
		};
	};
}

var endpoints = {
	endpoint: function(_) {
		return {
			x3solution: simulateX3solution(_, "aws-x3-devx3", 2050),
			getWebServerBaseUrl: function(_) {
				return "http://aws-x3-devx3/Adonix_X3DVLP";
			},
			x3ServerFolder: function(_) {
				return "GX3APP";
			},
			dataset: function(_) {
				return "GX3APP";
			},
			getSolutionName: function(_) {
				return "X3DVLP";
			}
		};
		/*return adminHelper.getEndpoint(_, {
		 jsonWhere: {
		 dataset: "SUPERV"
		 }
		 });*/
	},
	endpointSUPERV: function(_) {
		return {
			dataset: function(_) {
				return "SUPERV";
			},
			x3solution: simulateX3solution(_, "aws-x3-devsup", 17000),
			getWebServerBaseUrl: function(_) {
				return "http://aws-x3-devsup/Adonix_SUPDVLP";
			},
			x3ServerFolder: function(_) {
				return "SUPERV";
			},
			getSolutionName: function(_) {
				return "SUPDVLP";
			}
		};
		/*return adminHelper.getEndpoint(_, {
		 jsonWhere: {
		 dataset: "SUPERV"
		 }
		 });*/
	},
	endpointDummy: function(_) {
		return {
			dataset: function(_) {
				return "DUMMY";
			},
			x3solution: simulateX3solution(_, "dummy", 2050),
			getWebServerBaseUrl: function(_) {
				return "";
			},
			x3ServerFolder: function(_) {
				return "GX3APP";
			},
			getSolutionName: function(_) {
				return "X3DVLP";
			}
		};
		/*return adminHelper.getEndpoint(_, {
		 jsonWhere: {
		 dataset: "SUPERV"
		 }
		 });*/
	},

};

var users = {
	user: function(_) {
		return {
			getEndpointLogin: function(_, uuid) {
				return "AP";
			},
			infov6: function(_) {
				return false;
			}
		};
	},
	user2: function(_) {
		return {
			getEndpointLogin: function(_, uuid) {
				return "TCA";
			},
			infov6: function(_) {
				return false;
			}
		};
	},
	userDummy: function(_) {
		return {
			getEndpointLogin: function(_, uuid) {
				return "DUMMY";
			},
			infov6: function(_) {
				return false;
			}
		};
	},
};

var localePrefs = {};

var context = {
	request: {
		session: {
			host: "http:localhost:8124"
		}
	},
	httpSession: {
		getData: function(param) {
			return {};
		}
	},
	baseUrl: "http:localhost:8124"
};
var context2 = {
	request: {
		session: {
			host: "http:localhost:8124"
		}
	},
	httpSession: {
		getData: function(param) {
			return {};
		}
	},
	baseUrl: "http:localhost:8124"
};

asyncTest("locale Pref", function(_) {
	var db = adminHelper.getCollaborationOrm(_);
	localePrefs["fr-FR"] = db.fetchInstances(_, db.model.getEntity(_, "localePreference"), {
		jsonWhere: {
			code: "fr-FR"
		}
	})[0];
	localePrefs["en-US"] = db.fetchInstances(_, db.model.getEntity(_, "localePreference"), {
		jsonWhere: {
			code: "en-US"
		}
	})[0];
	start();
});

function computeHash(data) {
	if (data) {
		var shasum = crypto.createHash('sha1');
		shasum.update(data, "utf8");
		data = shasum.digest('hex');
	}
	return data;
}
var recOptions = {
	recMode: clientWsUnit.online ? "REC" : "PLAY",
	path: "node_modules/syracuse-x3/lib/clients/soap/data"
};


function testBigVolume(_, nbval) {

	asyncTest("Ws Classic Soap Client -  call sub program bigvolume ", function(_) {
		recOptions.fileName = "cvgClientWS_callsubprog_bigVolume_1_.json";
		var wsCall = new WsCall().init({});
		wsCall.context = {
			endpoint: endpoints.endpointSUPERV(_),
			user: users.user(_),
			localePref: localePrefs["fr-FR"]
		};
		var cli = new CvgClientWS("150069").init(_, context, wsCall.context, recOptions);
		var reply = cli.execAckCall(_, "ZZAPTESTACK:TESTACKCALLARRAY", [{
			"dim": 1,
			"nb": 1,
			"size": 1,
			"typ": "INT",
			"resu": nbval
		}, {
			"dim": nbval,
			"nb": 0,
			"size": 0,
			"typ": "INT",
		}, {
			"dim": nbval,
			"nb": 0,
			"size": 0,
			"typ": "INT",
		}, {
			"dim": nbval,
			"nb": 0,
			"size": 0,
			"typ": "INT",
		}, {
			"dim": nbval,
			"nb": 0,
			"size": 0,
			"typ": "INT",
		}, {
			"dim": nbval,
			"nb": 0,
			"size": 0,
			"typ": "INT",
		}, {
			"dim": nbval,
			"nb": 0,
			"size": 0,
			"typ": "INT",
		}, {
			"dim": nbval,
			"nb": 0,
			"size": 0,
			"typ": "INT",
		}, {
			"dim": nbval,
			"nb": 0,
			"size": 0,
			"typ": "INT",
		}, {
			"dim": nbval,
			"nb": 0,
			"size": 0,
			"typ": "INT",
		}, {
			"dim": nbval,
			"nb": 0,
			"size": 0,
			"typ": "INT",
		}, {
			"dim": nbval,
			"nb": 0,
			"size": 0,
			"typ": "INT",
		}, {
			"dim": nbval,
			"nb": 0,
			"size": 0,
			"typ": "INT",
		}], wsCall);

		console.log("reply ", reply);
		strictEqual(reply.json.params.length, (nbval - 1) * 12, " reply test ackcall array " + ((nbval - 1) * 12) + " value ok");

		cli.disconnectClient(_);
		start();
	});
}

function completeTest(_, protocol) {
	// set protocol versikon
	asyncTest("Ws Classic Soap Client -  connect / disconnect " + protocol, function(_) {

		if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file
		recOptions.fileName = "cvgClientWS_connectdisconnect_1_" + protocol + ".json";
		var wsCall = new WsCall().init({});
		//work connection fr-FR
		wsCall.context = {
			endpoint: endpoints.endpoint(_),
			user: users.user(_),
			localePref: localePrefs["fr-FR"]
		};
		var cli = new CvgClientWS(protocol).init(_, context, wsCall.context, recOptions);
		strictEqual(cli.stream !== null, true, "client connected ok");

		strictEqual(cli._x3SessionSettings.Userconnect, "true", "user connected ok");
		strictEqual(cli._x3SessionSettings.usrProfile, "ADMIN", "user profile used ADMIN ok");

		cli.disconnectClient(_);
		strictEqual(cli.stream !== null, false, "client disconnected ok");

		//work connection en-US
		wsCall.context.localePref = localePrefs["en-US"];
		recOptions.fileName = "cvgClientWS_connectdisconnect_2_" + protocol + ".json";
		cli = new CvgClientWS(protocol).init(_, context, wsCall.context, recOptions);
		strictEqual(cli.stream !== null, true, "client connected ok");

		strictEqual(cli._x3SessionSettings.Userconnect, "true", "user connected ok");
		strictEqual(cli._x3SessionSettings.usrProfile, "ADMIN", "user profile used ADMIN ok");

		cli.disconnectClient(_);
		strictEqual(cli.stream !== null, false, "client disconnected ok");

		// failed bad endpoint
		try {
			wsCall.context.endpoint = endpoints.endpointDummy(_);
			cli = new CvgClientWS(protocol).init(_, context, wsCall.context);
			ok(false, "bad endpoint client must raise an error");
		} catch (e) {
			ok(true, "bad endpoint client raised an error ok");
			ok(/Error getaddrinfo ENOTFOUND/.test(e.message), "exception raised ok");
			cli.disconnectClient(_);
			strictEqual(cli.stream !== null, false, "bad endpoint client not connected ok");
		}

		// failed bad user
		wsCall.context.endpoint = endpoints.endpoint(_);
		wsCall.context.user = users.userDummy(_);
		recOptions.fileName = "cvgClientWS_connectdisconnect_4_" + protocol + ".json";

		try {
			cli = new CvgClientWS(protocol).init(_, context, wsCall.context, recOptions);
			ok(false, "bad user must raise an error");
		} catch (e) {
			cli.disconnectClient(_);
			strictEqual(cli.stream !== null, false, "bad user client not connected (" + e.message + ") ok");
		}




		start();
	});

	asyncTest("Ws Classic Soap Client -  call sub program " + protocol, function(_) {
		recOptions.fileName = "cvgClientWS_callsubprog_1_" + protocol + ".json";
		var wsCall = new WsCall().init({});
		wsCall.context = {
			endpoint: endpoints.endpointSUPERV(_),
			user: users.user(_),
			localePref: localePrefs["fr-FR"]
		};
		var cli = new CvgClientWS(protocol).init(_, context, wsCall.context, recOptions);

		var reply = cli.execAckCall(_, "QLFWSADD:ADDDECIMAL", [{
			"dim": 1,
			"nb": 1,
			"size": 1,
			"typ": "DCB",
			"resu": 3.0
		}, {
			"dim": 1,
			"nb": 1,
			"size": 1,
			"typ": "DCB",
			"resu": 2.0
		}, {
			"dim": 1,
			"nb": 0,
			"size": 1,
			"typ": "DCB",
		}], wsCall);

		strictEqual(JSON.stringify(reply), '{"json":{"result":{"errp":"","errm":"","errn":0,"errt":0,"errl":0},"debugInfos":{"exceptiondetail":"","totalduration":0,"execduration":0,"trace":""},"return":{"typ":"NULL","resu":null},"params":[{"num":2,"poste":0,"typ":"DCB","resu":"5"}]}}', " reply QLFWSADD:ADDECIMAL ok");
		reply = cli.execAckCall(_, "QLFWSSLP:DOSLEEP", [{
			"dim": 1,
			"nb": 1,
			"size": 1,
			"typ": "INT",
			"resu": 2
		}, {
			"dim": 1,
			"nb": 0,
			"size": 1,
			"typ": "INT",
		}], wsCall);

		strictEqual(JSON.stringify(reply), '{"json":{"result":{"errp":"","errm":"","errn":0,"errt":0,"errl":0},"debugInfos":{"exceptiondetail":"","totalduration":0,"execduration":0,"trace":""},"return":{"typ":"NULL","resu":null},"params":[{"num":1,"poste":0,"typ":"INT","resu":1}]}}', " reply QLFWSSLP:DOSLEEP ok");

		cli.disconnectClient(_);
		start();
	});


	asyncTest("Ws Classic Soap Client -  technical Subprogram " + protocol, function(_) {
		recOptions.fileName = "cvgClientWS_techsubprogs_1_" + protocol + ".json";
		var res;
		var wsCall = new WsCall().init({
			name: "QLFWSADD"
		});
		var ctx = wsCall.context = {
			endpoint: endpoints.endpointSUPERV(_),
			user: users.user(_),
			localePref: localePrefs["fr-FR"]
		};
		var cli = new CvgClientWS(protocol).init(_, context, wsCall.context, recOptions);

		res = cli._flush(_, wsCall);
		strictEqual(res, true, "result flush ok");

		// change context with good value language
		recOptions.fileName = "cvgClientWS_techsubprogs_2_" + protocol + ".json";
		cli = new CvgClientWS(protocol).init(_, context, wsCall.context, recOptions);

		res = cli._changeLogin(_, "AP", "ENG", wsCall);
		strictEqual(res, 1, "result change language ok");


		// change context with good user and good language
		recOptions.fileName = "cvgClientWS_techsubprogs_3_" + protocol + ".json";
		cli = new CvgClientWS(protocol).init(_, context, wsCall.context, recOptions);

		res = cli._changeLogin(_, "TCA", "ENG", wsCall);
		strictEqual(res, 1, "result change login and language ok");

		// change context with bad language
		recOptions.fileName = "cvgClientWS_techsubprogs_4_" + protocol + ".json";
		cli = new CvgClientWS(protocol).init(_, context, wsCall.context, recOptions);
		try {
			res = cli._changeLogin(_, "AP", "FRI", wsCall);
			ok(false, "bad lang client must raise an error");
		} catch (e) {
			ok(true, "result change bad lang ");
		}

		// change context with bad user
		recOptions.fileName = "cvgClientWS_techsubprogs_5_" + protocol + ".json";
		cli = new CvgClientWS(protocol).init(_, context, wsCall.context, recOptions);
		try {
			res = cli._changeLogin(_, "DUMMY", "FRA", wsCall);
			ok(false, "bad user client must raise an error");
		} catch (e) {
			ok(true, "result change bad user ");
		}

		// get hdat with good stamp
		recOptions.fileName = "cvgClientWS_techsubprogs_6_" + protocol + ".json";
		cli = new CvgClientWS(protocol).init(_, context, wsCall.context, recOptions);
		wsCall = new WsCall().init({
			name: "QLFWSADD"
		});
		wsCall.context = ctx;

		var decription = cli._getDescription(_, null, wsCall);
		var adxdoc = jsxml.parse(decription).ADXDOC;
		var stamp = adxdoc.$.TIM;
		try {
			res = cli._recupHDAT(_, wsCall, stamp);
			ok(true, "result recuphdat ");
		} catch (e) {
			ok(false, "result recuphdat exception " + e.stack);
		}


		// get hdat with bad stamp
		recOptions.fileName = "cvgClientWS_techsubprogs_7_" + protocol + ".json";
		wsCall = new WsCall().init({
			name: "QLFWSADD"
		});
		wsCall.context = ctx;
		cli = new CvgClientWS(protocol).init(_, context, wsCall.context, recOptions);

		try {
			cli._recupHDAT(_, wsCall, "33333333333333");
		} catch (e) {
			if (e instanceof CvgWsException) {
				strictEqual(e.message, "Timestamp out of phase (9)");
			}
		}

		strictEqual(wsCall.techInfo.reloadWebs, true, "techinfo reload webs ok");
		cli.disconnectClient(_);

		// get hdat and not a timestamp that match the one in the description
		recOptions.fileName = "cvgClientWS_techsubprogs_8_" + protocol + ".json";
		cli = new CvgClientWS(protocol).init(_, context, wsCall.context, recOptions);
		wsCall = new WsCall().init({
			name: "QLFWSADD"
		});
		wsCall.context = ctx;
		// override _getDescirption in order to simulate a bad timstamp
		cli._getDescription = function(_, context, wsCall, ignoreCache) {
			wsCall.techInfo.loadWebsDuration.start();
			var res = '<?xml version="1.0" encoding="UTF-8" ?><ADXDOC TIM="11111111111111"></ADXDOC>';
			wsCall.techInfo.loadWebsDuration.stop();
			return res;
		};

		try {
			cli._recupHDAT(_, wsCall, "44444444444444");
		} catch (e) {
			if (e instanceof CvgWsException) {
				strictEqual(e.message, "Timestamp out of phase (9)");
			}
		}
		strictEqual(wsCall.techInfo.reloadWebs, true, "techinfo reload webs ok");


		cli.disconnectClient(_);


		start();
	});
};



function allTest(_) {
	["150067", "150068", "150069"].forEach_(_, function(_, protocol) {
		console.log("curret protocol tested " + protocol);
		completeTest(_, protocol);

	});


	testBigVolume(_, 10000);

	asyncTest("kill", function(_) {
		done = true;
		start();
	});
}

allTest(_ >> function(err) {
	if (err) throw err;
});