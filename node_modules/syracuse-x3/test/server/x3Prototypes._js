"use strict";
// JavaScript Document
var module 	  	= QUnit.module;
var assert 	  	= require("assert" );
var config      = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel 	= require("syracuse-orm/lib/dataModel");
var x3Helper   	= require("syracuse-x3/test/fixtures/x3Helper");

var tracer = console.log;
var doStop = false;

module("x3PrototypesTest", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100)
		}
	}
});


asyncTest("start", function(_) {
	ok(x3Helper.initDatabase(_),"syracuse mongodb database initialized");

	x3Helper.initialize(_,function(_) {
		ok(x3Helper.createObjects(_),"createObjects");
		start();
	});
});

var cookie=null;
function _getCookie(_) {
  cookie = cookie || x3Helper.getCookie(_);
  return cookie;
}
//******************************************************************************
function _checkPrototype(_,_representation,_facet){
  var urlKeys  = [];
  var proNames = [];
  
  
  var test = {done:0,ok:0,nok:0,success:false};
  
  function _ok( value, message ) {
    test.done++;
      
    try {
      assert.ok( value ); 
      test.ok++;
    } catch (err) {
      test.nok++;
      test.message = test.message || message;
      console.log("_ok NOK :'"+test.message+"'");
    }
    test.success = (test.done == test.ok);
  }; 
  
  function _strictEqual( actual, expected, message ) {
    test.done++;
             
    try {
      assert.strictEqual( actual, expected );
      test.ok++;
    } catch( err ) {
      test.nok++;
      test.message = test.message || (message+" ("+actual+"<>"+expected+")");
      console.log("_strictEqual NOK :'"+test.message);
    }
    test.success = (test.done == test.ok);
  };  

  function _checkUrl(_url) {
    console.log("*** $url :",_url);
    var urlpart = _url.match(/('.+')/g);
    if(urlpart) {
      for(var i in urlpart){
        var keys = urlpart[i].match(/\{\w+}/g);
        for(var j in keys) {
          urlKeys.push(keys[j].substring(1,keys[j].length-1));
        }
      }
    }
  }
  
  function _checkLink(_link) {
    _ok("$title"  in _link ,"link.$title");
    _ok("$type"   in _link ,"link.$type");
    _ok("$url"    in _link ,"link.$url");
    _checkUrl(_link.$url);
  }
  
  function _checkLinks(_node) {
    if("$links" in _node) {
      for(var link in _node.$links) {
        _checkLink(_node.$links[link])
      }
    }
  }
  
  function _checkProperties(_properties) {
    for(var p in _properties) {
      proNames.push(p);
      
      _checkLinks(_properties[p]);
      _ok("$type"  in _properties[p],p+".$type");
      
      if(_properties[p].$type == "application/x-reference"){
        _ok("$item"        in _properties[p]        ,p+".$item");
        _ok("$value"   in _properties[p].$item      ,p+".$value");
        _ok(_properties[p].$item.$value.length > 0  ,p+".$value");
        _checkLinks(_properties[p].$item);
        
/*
TODO : retirer les commentaires suivant
*/        
        _ok("$url"         in _properties[p].$item  ,p+".$item.$url");
        _ok("$value"       in _properties[p].$item  ,p+".$item.$value");
        _ok("$key"         in _properties[p].$item  ,p+".$item.$key");
        _ok("$properties"  in _properties[p].$item  ,p+".$item.$properties");
        for(var pr in _properties[p].$item.$properties) {
         _ok("$type"  in _properties[p].$item.$properties[pr],p+"."+pr+".$type");
         _ok(pr in _properties[p].$item,p+".$item."+pr);
        }
      }
      else if(_properties[p].$type == "application/x-choice"){
        _ok("$value"   in _properties[p]        ,p+".$value");
        _ok("$type"    in _properties[p].$value ,p+".$value.$type");
        _ok("$enum"    in _properties[p].$value ,p+".$value.$enum");
        _ok(toString.call(_properties[p].$value.$enum) == '[object Array]',p+".$value.$enum is an array");
        for(var e in _properties[p].$value.$enum) {
         _ok("$value"   in _properties[p].$value.$enum[e] ,p+".$value.$enum("+e+").$value");
         _ok("$title"   in _properties[p].$value.$enum[e] ,p+".$value.$enum("+e+").$title");
        } 
      }
      else if(_properties[p].$type == "application/x-array"){
        _ok("$item"        in _properties[p]             ,p+".$item");
        _ok("$type"        in _properties[p].$item       ,p+".$item.$type");
        
        if(_properties[p].$item.$type == "application/json"){
          _ok("$properties"  in _properties[p].$item ,p+".$item.$properties");
          _checkProperties(_properties[p].$item.$properties);
        }
        else if(_properties[p].$item.$type == "application/x-reference"){
         _checkLinks(_properties[p].$item.$item);
         _ok("$value"   in _properties[p].$item.$item      ,p+".$value");
         if("$value"   in _properties[p].$item.$item) {
          proNames.push(_properties[p].$item.$item.$value.substring(1,_properties[p].$item.$item.$value.length-1));
         }         
        }
      }
    }
  }
  function _getBinds(_node) {
    var binds=[];
    for(var n in _node) {
      if(n == "$bind") {
        console.log("push $bind:",_node[n])
        binds.push(_node[n]);
      }
      if(n == "$layout") {
        binds =  binds.concat(_getBinds(_node.$layout));
      }
      if(n == "$items") {
        for (var item in _node.$items) {
         binds =  binds.concat(_getBinds(_node.$items[item]));
       }   
      }
    }
    return binds;
  }

 
  var name = _representation + ".$" + _facet;
  try {
  	var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('"+_representation+".$"+_facet+"')"), 200);
    console.log("prototype=",prototype);
    _strictEqual(true,true,"The JSON is well formed");
   } catch (e) {
    //console.log(e);
    _strictEqual(true,false,"The JSON isn't well formed");
    return test;
  }   
    
  _strictEqual(prototype.$baseUrl,"/sdata/x3/erp/"+config.QLF.dataset,"$baseUrl");
  _strictEqual(prototype.$baseType,"application/json;vnd.sage=syracuse;vnd.sage.syracuse.representation=x3.erp."+config.QLF.folder,"$baseType");
  if(_facet in {"details":"","edit":"","summary":""}) {
    _strictEqual(prototype.$url,"{$baseUrl}/"+_representation+"('{$key}')?representation="+_representation+".$"+_facet,"$url");
    } else {
    _strictEqual(prototype.$url,"{$baseUrl}/"+_representation+"?representation="+_representation+".$"+_facet,"$url");
  }
  _strictEqual(prototype.$prototype,"{$baseUrl}/$prototype('{$representation}.$thumb')","$prototype");
  _strictEqual(prototype.$representation,_representation,"$representation");
  _ok(prototype.$title,"$title");
  _strictEqual(prototype.$type,"{$baseType}."+_representation+".$"+_facet,"$type");
  _ok("$properties"   in prototype,"$properties");
  var properties;    
  properties  = prototype.$properties

  if(_facet in {"query":"","lookup":""}) {
    _ok("$itemsPerPage" in prototype,"$itemsPerPage");
    _ok("$resources"  in properties           ,"QUERY $resources");
    _ok("$type"       in properties.$resources,"QUERY $resources.$type");
    _strictEqual(properties.$resources.$type,"application/x-array","QUERY $resources.$type");
    _ok("$item"       in properties.$resources,"QUERY $resources.$item");
    _strictEqual(properties.$resources.$item.$url ,"{$baseUrl}/" +_representation+"('{$key}')?representation="+_representation+".$queryItem","QUERY $resources.$url");
    _strictEqual(properties.$resources.$item.$type,"{$baseType}."+_representation+".$queryItem","QUERY $resources.$type");
    _ok("$key"       in properties.$resources.$item,"QUERY $resources.$item.$key");
    _ok("$value"     in properties.$resources.$item,"QUERY $resources.$item.$value");
     
    _ok("$properties"   in properties.$resources.$item,"QUERY $resources.$item.$properties");
    properties  = properties.$resources.$item.$properties
  }
 
  _checkProperties(properties);  
  _checkLinks(prototype);

  if("$article" in prototype) {
    var binds = _getBinds(prototype.$article);
    //console.log(binds.join(",")); 
    for(var b in binds){
      console.log("?bind:",binds[b]); 
      _ok(proNames.indexOf(binds[b]) != -1,"bind:{"+binds[b]+"}");
    }
  }
  _ok("$localization" in prototype,"$localization");
  
  console.log("*** keys:",urlKeys);
  console.log("*** properties",proNames);
  for(var k in urlKeys) {
    _ok(proNames.indexOf(urlKeys[k]) != -1,"key:{"+urlKeys[k]+"}");
  }
  return test;
}

function _checkPrototypes(_,_representation){
  var facets=["query","details","lookup","edit","summary"]; 
  
  for (var i in facets) {
     var test = _checkPrototype(_,_representation,facets[i]);
     ok(test.success,_representation + ".$" + facets[i] + " : " + (test.message || "OK"));
  }
}

function _checkJSON(_,_representation,_facet){
 var name = _representation + ".$" + _facet;
  try {
  	var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('"+_representation+".$"+_facet+"')"), 200);
    console.log("prototype=",prototype);
    strictEqual(true,true,"The JSON of "+ _representation + ".$" + _facet + " is well formed");
   } catch (e) {
    strictEqual(true,false,"The JSON of "+ _representation + ".$" + _facet + " isn't well formed"+e);
    return test;
  }   
}



function _checkJSONs(_,_representation){
  var facets=["query","details","lookup","edit","summary","bulk"]; 
  var facets=["details"]; 
  var facets=["summary"]; 
  
  for (var i in facets) {
     _checkJSON(_,_representation,facets[i]);
  }
}

function _compareJSON(_,_representation,_facet){
  var name = _representation + ".$" + _facet;

  function _compareObjects(o1, o2){
    var test = {success:true};   
  
    function _compare(o1,o2,path,message){
      console.log("_compare(o1, o2)");
      for(var p in o1) {
         console.log("_compare:",p,toString.call(o1[p]))
         if(["$baseUrl","$localization","$title","$shortTitle","capabilities"].indexOf(p) < 0){
          console.log("_compare:",p,toString.call(o1[p]),toString.call(o2[p]))
          if(toString.call(o2[p]).indexOf("Undefined")>=0) {
            test.success = false;
            test.message = path+" : "+p + " "+ message;
            console.log("type undefined",test.message);
            return test;
          }
          try {
            console.log(toString.call(o1[p])," ? ",toString.call(o2[p]));
            assert.strictEqual(toString.call(o1[p]),toString.call(o2[p]));
            console.log("JSON type OK",toString.call(o1[p]));
          } catch( err ) {
            test.success = false;
            test.message = path+" : "+p + " "+ toString.call(o1[p])+" <> "+toString.call(o2[p]);
            console.log("not equal type",test.message);
            return test;
          }
          console.log("indexOf",toString.call(o1[p]).indexOf("Object"));
                
          if((toString.call(o1[p]).indexOf("Object")>=0) || (toString.call(o1[p]).indexOf("Array")>=0)) {
            test = _compare(o1[p],o2[p],path+(path?".":"")+p,message);
            if (!test.success) return test;
          } else {
            try {
              assert.strictEqual(o1[p],o2[p]);
              console.log("JSON value OK",o1[p]);
            } catch( err ) {
              test.success = false;
              test.message = path+" : "+p + " "+ o1[p]+" <> "+o2[p];
              console.log("not equal value",test.message);
              return test;
            }
        	}
        }
      } 
      return test;
    }
    test = _compare(o1,o2,"","should be present");
    if(! test.success) return test; 
    test = _compare(o2,o1,"","should not be present");
  	return test;
  }  
  
  var p1  = {};
  try {
    p1  = require("syracuse-x3/test/fixtures/"+_representation.toLowerCase()+"_"+_facet);
   } catch (e) {
    ok(false,"require failed with error "+e);
    return test;
  }
	var p2 = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('"+_representation+".$"+_facet+"')"), 200);
  var test  = _compareObjects(p1, p2);
  ok(test.success,_representation + ".$" + _facet + " : " + (test.message || "OK"));
     
}


function _compareJSONs(_,_representation){
  var facets=["query","details","lookup","edit","summary"]; 
  
  for (var i in facets) {
     _compareJSON(_,_representation,facets[i]);
  }
}

/*
TODO :
- utiliser le compareJson
*/
function testParse(_) {
  asyncTest("ACLAIDX     parse", function(_) {_checkJSONs(_,"ACLAIDX") ;  start(); });
  asyncTest("AFCTIDX     parse", function(_) {_checkJSONs(_,"AFCTIDX") ;  start(); });
  asyncTest("AOBJET      parse", function(_) {_checkJSONs(_,"AOBJET") ;  start(); });
  asyncTest("APLCOM      parse", function(_) {_checkJSONs(_,"AOBJET") ;  start(); });
  asyncTest("APSADX      parse", function(_) {_checkJSONs(_,"APSADX") ;  start(); });
  asyncTest("AREPIDX     parse", function(_) {_checkJSONs(_,"AREPIDX") ;  start(); });
  asyncTest("ATABDIV     parse", function(_) {_checkJSONs(_,"ATABDIV") ;  start(); });
  asyncTest("ATABLE      parse", function(_) {_checkJSONs(_,"ATABLE") ;  start();});
  asyncTest("ATRACE      parse", function(_) {_checkJSONs(_,"ATRACE") ;  start(); });
  asyncTest("ATYPE       parse", function(_) {_checkJSONs(_,"ATYPE") ;  start(); });
  asyncTest("AUTILIS     parse", function(_) {_checkJSONs(_,"AUTILIS") ;  start();}); 
  asyncTest("AVOLUME     parse", function(_) {_checkJSONs(_,"AVOLUME") ;  start();});
  asyncTest("FACILITY    parse", function(_) {_checkJSONs(_,"FACILITY") ;  start(); });
  asyncTest("POSCOD      parse", function(_) {_checkJSONs(_,"POSCOD") ;  start(); });
  asyncTest("TABCOUNTRY  parse", function(_) {_checkJSONs(_,"TABCOUNTRY") ; start();});
  asyncTest("TABLAN      parse", function(_) {_checkJSONs(_,"TABLAN") ;   start(); });
  asyncTest("TABUNIT     parse", function(_) {_checkJSONs(_,"TABUNIT") ;  start(); });
  asyncTest("AQCPROC01   parse", function(_) {_checkJSONs(_,"AQCPROC01") ;  start(); });
  asyncTest("AQCPROC02   parse", function(_) {_checkJSONs(_,"AQCPROC02") ;  start(); });
  asyncTest("AQCPROC03   parse", function(_) {_checkJSONs(_,"AQCPROC03") ;  start(); });
  asyncTest("AQCPROC04   parse", function(_) {_checkJSONs(_,"AQCPROC04") ;  start(); });
  asyncTest("AQCPROC05   parse", function(_) {_checkJSONs(_,"AQCPROC05") ;  start(); });
  asyncTest("AQCPROC06   parse", function(_) {_checkJSONs(_,"AQCPROC06") ;  start(); });
  asyncTest("AQCPROC07   parse", function(_) {_checkJSONs(_,"AQCPROC07") ;  start(); });
} 

function testPrototype() {                  
  asyncTest("ACLAIDX    prototype", function(_) {_checkPrototypes(_,"ACLAIDX") ;  start(); });
  asyncTest("AFCTIDX    prototype", function(_) {_checkPrototypes(_,"AFCTIDX") ;  start(); });
  asyncTest("AOBJET     prototype", function(_) {_checkPrototypes(_,"AOBJET") ;  start(); });
  asyncTest("APLCOM     prototype", function(_) {_checkPrototypes(_,"AOBJET") ;  start(); });
  asyncTest("APSADX     prototype", function(_) {_checkPrototypes(_,"APSADX") ;  start(); });
  asyncTest("AREPIDX    prototype", function(_) {_checkPrototypes(_,"AREPIDX") ;  start(); });
  asyncTest("ATABDIV    prototype", function(_) {_checkPrototypes(_,"ATABDIV") ;  start(); });
  asyncTest("ATABDIVH   prototype", function(_) {_checkPrototypes(_,"ATABDIVH") ;  start(); });
  asyncTest("ATABLE     prototype", function(_) {_checkPrototypes(_,"ATABLE") ;  start();});
  asyncTest("ATRACE     prototype", function(_) {_checkPrototypes(_,"ATRACE") ;  start(); });
  asyncTest("ATYPE      prototype", function(_) {_checkPrototypes(_,"ATYPE") ;  start(); });
  asyncTest("AUTILIS    prototype", function(_) {_checkPrototypes(_,"AUTILIS") ;  start();}); 
  asyncTest("AVOLUME    prototype", function(_) {_checkPrototypes(_,"AVOLUME") ;  start();});
  asyncTest("FACILITY   prototype", function(_) {_checkPrototypes(_,"FACILITY") ;  start(); });
  asyncTest("POSCOD     prototype", function(_) {_checkPrototypes(_,"POSCOD") ;  start(); });
  asyncTest("TABCOUNTRY prototype", function(_) {_checkPrototypes(_,"TABCOUNTRY") ; start();});
  asyncTest("TABLAN     prototype", function(_) {_checkPrototypes(_,"TABLAN") ;   start(); });
  asyncTest("TABUNIT    prototype", function(_) {_checkPrototypes(_,"TABUNIT") ;  start(); });
  
  asyncTest("AQCPROC01  prototype", function(_) {_checkPrototypes(_,"AQCPROC01") ;  start(); });
  asyncTest("AQCPROC02  prototype", function(_) {_checkPrototypes(_,"AQCPROC02") ;  start(); });
  asyncTest("AQCPROC03  prototype", function(_) {_checkPrototypes(_,"AQCPROC03") ;  start(); });
  asyncTest("AQCPROC04  prototype", function(_) {_checkPrototypes(_,"AQCPROC04") ;  start(); });
  asyncTest("AQCPROC05  prototype", function(_) {_checkPrototypes(_,"AQCPROC05") ;  start(); });
  asyncTest("AQCPROC06  prototype", function(_) {_checkPrototypes(_,"AQCPROC06") ;  start(); });
  asyncTest("AQCPROC07  prototype", function(_) {_checkPrototypes(_,"AQCPROC07") ;  start(); });
}

function testCompare() {
  asyncTest("ACLAIDX    compare",10, function(_) {_compareJSONs(_,"ACLAIDX") ;  start(); });
  asyncTest("AFCTIDX    compare",10, function(_) {_compareJSONs(_,"AFCTIDX") ;  start(); });
  asyncTest("AOBJET     compare",10, function(_) {_compareJSONs(_,"AOBJET") ;  start(); });
  asyncTest("APSADX     compare",10, function(_) {_compareJSONs(_,"APSADX") ;  start(); });
  asyncTest("AREPIDX    compare",10, function(_) {_compareJSONs(_,"AREPIDX") ;  start(); });
  asyncTest("ATABDIV    compare",10, function(_) {_compareJSONs(_,"ATABDIV") ;  start(); });
  asyncTest("ATABLE     compare",10, function(_) {_compareJSONs(_,"ATABLE") ;  start();});
  asyncTest("ATRACE     compare",10, function(_) {_compareJSONs(_,"ATRACE") ;  start(); });
  asyncTest("AUTILIS    compare",10, function(_) {_compareJSONs(_,"AUTILIS") ;  start();}); 
  asyncTest("AVOLUME    compare",10, function(_) {_compareJSONs(_,"AVOLUME") ;  start();});
  asyncTest("COMPANY    compare",10, function(_) {_compareJSONs(_,"COMPANY") ;  start();});
  asyncTest("FACILITY   compare",10, function(_) {_compareJSONs(_,"FACILITY") ;  start(); });
  asyncTest("POSCOD     compare",10, function(_) {_compareJSONs(_,"POSCOD") ;  start(); });
  asyncTest("TABCOUNTRY compare",10, function(_) {_compareJSONs(_,"TABCOUNTRY") ; start();});
  asyncTest("TABLAN     compare",10, function(_) {_compareJSONs(_,"TABLAN") ;   start(); });
  asyncTest("TABUNIT    compare",10, function(_) {_compareJSONs(_,"TABUNIT") ;  start(); });
  asyncTest("ZQREQH     compare",10, function(_) {_compareJSONs(_,"ZQREQH") ;  start();});
  asyncTest("ZTESTSUITE compare",10, function(_) {_compareJSONs(_,"ZTESTSUITE") ;  start(); });
  asyncTest("ZZSERVICE  compare",10, function(_) {_compareJSONs(_,"ZZSERVICE") ;  start(); });
}

function testLinks() {
  asyncTest("AQCPROC06"+x3Helper.gitHubIssue(1309), function(_) {
    var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC06.$details')"), 200);

    strictEqual(prototype.$properties.C06P02_REF.$item.$links.$details.$url,
                "{$baseUrl}/AQCPROR02('{C06P02}~{C06P03}')?representation=AQCPROR02.$details",
                "{$baseUrl}/AQCPROR02('{C06P02}~{C06P03}')?representation=AQCPROR02.$details");

    start(); 
  });

  asyncTest("AQCPROC09"+x3Helper.gitHubIssue(1309), function(_) {
    var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC09.$details')"), 200);

    strictEqual(prototype.$properties.AQCP09COL.$item.$properties.C09P02_REF.$item.$links.$details.$url,
                "{$baseUrl}/AQCPROR02('{C09P02}~{C09P03}')?representation=AQCPROR02.$details",
                "{$baseUrl}/AQCPROR02('{C09P02}~{C09P03}')?representation=AQCPROR02.$details");
    strictEqual(prototype.$properties.AQCP09COL.$item.$properties.C09P02_REF.$item.$links.$summary.$url,
                "{$baseUrl}/AQCPROR02('{C09P02}~{C09P03}')?representation=AQCPROR02.$summary",
                "{$baseUrl}/AQCPROR02('{C09P02}~{C09P03}')?representation=AQCPROR02.$summary");
    start(); 
  });
}


testParse();
testPrototype();
//! obsolete testCompare();
testLinks();



//******************************************************************************

asyncTest("stop server", 0, function(_) {
	x3Helper.stopServer();
	start();
});
asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});
