"use strict";

var module = QUnit.module;
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;
var forEachKey = helpers.object.forEachKey;
var types = require('syracuse-core/lib/types/allTypes');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require("mongodb");
var streams = require('streamline/lib/streams/streams');
var sys = require("util");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
//
var tracer = console.log;
//var tracer = null;
//
//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
helpers.pageFileStorage = false;

var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_admin_test");

var requestCount = 0;
var MAX_REQUESTS = 11;

config.QLF = config.QLF || {
    dataset    : "x3_unit_test",
    user       : "qlf",
    folder     : "SUPERV",
    serverHost : "sodaix02",
    serverPort : 17001
  };

var port           = 3004;
var baseUrl        = "http://localhost:" + port
var contractUrl    = "/sdata/syracuse/collaboration/mongodb_admin_test/";
var acceptLanguage = "fr,fr-fr";

function getCookie(_, login, pass) {
	var response = new streams.httpRequest({
		url: baseUrl + "/syracuse-main/html/main.html",
		user: login || "admin",
		password: pass || "admin",
		headers: {
			"accept-language": "fr,fr-fr",
		}
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	tracer && tracer("Get cookie headers (46): "+sys.inspect(response.headers));
	acceptLanguage = response.headers["content-language"] || acceptLanguage;
	return response.headers["set-cookie"];
}

function post(_, cookie, url, data, statusCode, returnFullResponse) {
	var response = streams.httpRequest({
		method: "post",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			"Accept-Language": acceptLanguage,
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 201, "status verified");
	if(returnFullResponse)
		return {headers: response.headers, body: JSON.parse(response.readAll(_))};
	else
		return JSON.parse(response.readAll(_));
}

function put(_, cookie, url, data, statusCode, returnFullResponse) {
	var response = streams.httpRequest({
		method: "put",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			"Accept-Language": acceptLanguage,
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	if(returnFullResponse)
		return {headers: response.headers, body: JSON.parse(response.readAll(_))};
	else
		return JSON.parse(response.readAll(_));
}

function get(_, cookie, url, statusCode, facet) {
	var type = facet || "generic.$details";
	var response = streams.httpRequest({
		method: "get",
		url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/" + url,
		headers: {
			cookie: cookie,
			"Accept-Language": acceptLanguage,
			accept: "application/json;vnd.sage=syracuse"
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

function del(_, cookie, url, statusCode) {
	var response = streams.httpRequest({
		method: "delete",
		url: baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/" + url,
		headers: {
			cookie: cookie
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_admin_test");
}

function _createDataContext() {
	return new DataContext(_getModel(), true);
}

var doStop = false;
module("x3PrototypesTest", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100)
		}
	}
});

var franceID = "";
var usID = "";

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets["mongodb_admin_test"].hostname, endPoint.datasets["mongodb_admin_test"].port, {});
	var db = new mongodb.Db(config.collaboration.dataset, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	//
	ok(true, "mongodb initialized");

	start();
});

//start syracuse server
var syracuse;
// wait server initialization
asyncTest("initialize syracuse test server", 1, function(_) {
	syracuse = require('syracuse-main/lib/syracuse');
	syracuse.initializerStatus.on("initialized", function() {
		ok(true, "server initialized");
		syracuse.server.listen(null, port);
		start();
	});
});


function onlyInfo(diags) {
	return diags.every(function(diag) {
		return diag.severity == "info";
	});
}

function hasErrors(body) {
	var hasErr = body.$diagnoses && body.$diagnoses.some(function(diag) {
		return diag.severity == "error";
	});
	if(!hasErr) {
		for(var key in body) {
			if(typeof body[key] === "object")
				hasErr = hasErr || hasErrors(body[key]);
		};
	}
	//
	return hasErr;
}

var _data = {};
var _session = {
	setData: function(name, value) {
		var old = _data[name];
		if (old == value) return;

		if (old && old.onDestroy) {
			old.onDestroy();
		}
		if (typeof value == "undefined") delete _data[name];
		else _data[name] = value;
	},
	getData: function(name) {
		return _data[name];
	},
	_reset: function() {
		_data = {};
	}
}

function _resetSession() {
	_data = {};
}

function _createRequest(method, url, data, set) {
	var baseUrl = "http://localhost/sdata/syracuse/collaboration/mongodb_admin_test"
	return {
		session: _session,
		method: method,
		url: (set ? url : (baseUrl + url)).replace(/'/g, "%27"),
		context: {
			parseBody: function(_) {
				return data;
			}
		},
		headers: {
			cookie: "fake cookie"
		}
	}
}

function _checkStatus(response, statusCode, message) {
	strictEqual(response.statusCode, statusCode, message);
	if (response.statusCode != statusCode) {
		console.log(response);
		doStop = true;
		throw new Error("aborting test");
	}
}

var cookie = "";
var applicationId;
var applicationX3Id;

asyncTest("create objects", 18, function(_) {
	requestCount++;
	var body;
	console.log("get cookie; server started: "+syracuse.server.serverStarted);
	cookie = getCookie(_);
	// check init script
	var userNames = get(_, cookie, "users").$resources.map(function(item) {
		return item.login;
	});
	ok(userNames.indexOf("admin" ) >= 0, "Admin ok");
	ok(userNames.indexOf("guest")  >= 0, "Guest ok");
	ok(userNames.indexOf("import") >= 0, "Import ok");
	ok(userNames.length == 3, "Users count ok");
	
	// get main application
	var app = adminHelper.getApplication(_, "syracuse", "collaboration");
	ok(app != null, "Application fetch ok");
	applicationId = app.$uuid;
	var app = adminHelper.getApplication(_, "x3", "erp");
	ok(app != null, "Application X3 fetch ok");
	applicationX3Id = app.$uuid;
	// create an x3 endpoint, by step like in edit form
	// x3server    ("serverHost": "172.28.16.106",)
	body = post(_, cookie, "x3servers", {
		"description": "X3 Unit Test Server",
		"serverHost": config.QLF.serverHost,
		"serverPort": config.QLF.serverPort,
		"serverTimeout": 60000,
		$actions: {$save: {$isRequested:true}}
	}, 201);
	var srvrId = body.$uuid;
  // get super admin groups
  body = get(_, cookie, "groups(description eq 'Super administrators')?representation=group.$details", 200);
  var grpId = body.$uuid;
  strictEqual(body.description, "Super administrators", "Got group Super ok");
	body = post(_, cookie, "endPoints", {
    description: "X3 Unit Test Endpoint",
    applicationRef: { $uuid: applicationX3Id },
    dataset: config.QLF.dataset,
    x3server: { $uuid: srvrId },
    x3ServerFolder: config.QLF.folder,
    groups: [{ $uuid: grpId }]
  }, 201);
	ok(!hasErrors(body), "No errors ok");
	// should be able to save now
	console.log("create x3 endpoint body"+sys.inspect(body, null, 4));
	var epId = body.$uuid;
	// try to get it
	body = get(_, cookie, "endPoints('"+body.$uuid+"')",200);
	strictEqual(body.$uuid, epId, "Saved endPoint get ok");

  // put a X3 login for user
  body = put(_, cookie, "users(login eq 'admin')?representation=user.$edit", {
    endpoints: [{
      $index: 0,
      login: config.QLF.user,
      endpoint: { $uuid: epId }
    }]
  }, 200);	
  body = get(_, cookie, "users(login eq 'admin')?representation=user.$details", 200);
	console.log("user return body"+sys.inspect(body, null, 4));
  strictEqual(body.endpoints[0].login, config.QLF.user, "Endpoint added to user");

	start();
});

function _findUuid(coll, searchProp, searchVal) {
	var uuid = null;
	coll.forEach(function(item) {
		if (item[searchProp] == searchVal) {
			console.log("found: " + sys.inspect(item));
			uuid = item.$uuid;
		}
	});
	return uuid;
}

//******************************************************************************
function _checkLink(_link) {
  ok("$title"  in _link ,"link.$title");
  ok("$type"   in _link ,"link.$type");
  ok("$url"    in _link ,"link.$url");
}

function _checkLinks(_node) {
  if("$links" in _node) {
    for(var link in _node.$links) {
      _checkLink(_node.$links[link])
    }
  }
}

function _checkProperties(_properties) {
  for(var p in _properties) {
    _checkLinks(_properties[p]);
    ok("$type"  in _properties[p],p+".$type");
    
    if(_properties[p].$type == "application/x-reference"){
      ok("$item"        in _properties[p]        ,p+".$item");
      ok("$url"         in _properties[p].$item  ,p+".$item.$url");
      ok("$value"       in _properties[p].$item  ,p+".$item.$value");
      ok("$key"         in _properties[p].$item  ,p+".$item.$key");
      ok("$properties"  in _properties[p].$item  ,p+".$item.$properties");
      for(var pr in _properties[p].$item.$properties) {
       ok("$type"  in _properties[p].$item.$properties[pr],p+"."+pr+".$type");
       ok(pr in _properties[p].$item,p+".$item."+pr);
      }
    }
    else if(_properties[p].$type == "application/x-choice"){
      ok("$value"   in _properties[p]        ,p+".$value");
      ok("$type"    in _properties[p].$value ,p+".$value.$type");
      ok("$enum"    in _properties[p].$value ,p+".$value.$enum");
      ok(toString.call(_properties[p].$value.$enum) == '[object Array]',p+".$value.$enum is an array");
      for(var e in _properties[p].$value.$enum) {
       ok("$value"   in _properties[p].$value.$enum[e] ,p+".$value.$enum("+e+").$value");
       ok("$title"   in _properties[p].$value.$enum[e] ,p+".$value.$enum("+e+").$title");
      } 
    }
    else if(_properties[p].$type == "application/x-array"){
      ok("$item"        in _properties[p]             ,p+".$item");
      ok("$type"        in _properties[p].$item       ,p+".$item.$type");
      
      if(_properties[p].$item.$type == "application/json"){
        ok("$properties"  in _properties[p].$item ,p+".$item.$properties");
        _checkProperties(_properties[p].$item.$properties);
      }
    }
  }
}

function _checkPrototype(_,_cookie,_representation,_facet){
 var name = _representation + ".$" + _facet;
  try {
  	var prototype = get(_, _cookie, baseUrl + "/sdata/x3/erp/"+config.QLF.dataset+"/$prototypes('"+_representation+".$"+_facet+"')", 200);
    console.log("prototype=",prototype);
    ok(true,"The JSON of " + name + " is well formed ********************");
   } catch (e) {
    //console.log(e);
    ok(false,"The JSON of " + name + " isn't well formed");
    return;
  }   
    
  strictEqual(prototype.$baseUrl,"/sdata/x3/erp/"+config.QLF.dataset,"$baseUrl");
  strictEqual(prototype.$baseType,"application/json;vnd.sage=syracuse;vnd.sage.syracuse.representation=x3.erp.SUPERV","$baseType");
  if(_facet in {"details":"","edit":"","summary":""}) {
    strictEqual(prototype.$url,"{$baseUrl}/"+_representation+"('{$key}')?representation="+_representation+".$"+_facet,"$url");
    } else {
    strictEqual(prototype.$url,"{$baseUrl}/"+_representation+"?representation="+_representation+".$"+_facet,"$url");
  }
  strictEqual(prototype.$prototype,"{$baseUrl}/$prototype('{$representation}.$thumb')","$prototype");
  strictEqual(prototype.$representation,_representation,"$representation");
  ok(prototype.$title,"$title");
  strictEqual(prototype.$type,"{$baseType}."+_representation+".$"+_facet,"$type");
  ok("$properties"   in prototype,"$properties");
  var properties;    
  properties  = prototype.$properties

  if(_facet in {"query":"","lookup":""}) {
    ok("$itemsPerPage" in prototype,"$itemsPerPage");
    ok("$resources"  in properties           ,"QUERY $resources");
    ok("$type"       in properties.$resources,"QUERY $resources.$type");
    strictEqual(properties.$resources.$type,"application/x-array","QUERY $resources.$type");
    ok("$item"       in properties.$resources,"QUERY $resources.$item");
    strictEqual(properties.$resources.$item.$url ,"{$baseUrl}/" +_representation+"('{$key}')?representation="+_representation+".$queryItem","QUERY $resources.$url");
    strictEqual(properties.$resources.$item.$type,"{$baseType}."+_representation+".$queryItem","QUERY $resources.$type");
    ok("$key"       in properties.$resources.$item,"QUERY $resources.$item.$key");
    ok("$value"     in properties.$resources.$item,"QUERY $resources.$item.$value");
     
    ok("$properties"   in properties.$resources.$item,"QUERY $resources.$item.$properties");
    properties  = properties.$resources.$item.$properties
  }
 
  _checkProperties(properties);

  
  ok("$localization" in prototype,"$localization");
  

}

function _checkPrototypes(_,_representation){
	cookie = getCookie(_, "admin", "admin");
  var facets=["query","details","lookup","edit","summary"]; 
  
  for (var i in facets) {
    _checkPrototype(_,cookie,_representation,facets[i]);
  }
}

asyncTest("ZQREQH prototypes", function(_) {
  _checkPrototypes(_,"ZQREQH") ;
  start();
});

asyncTest("ATABLE prototypes", function(_) {
  _checkPrototypes(_,"ATABLE") ;
  start();
});

asyncTest("AUTILIS prototypes", function(_) {
  _checkPrototypes(_,"AUTILIS") ;
  start();
});

asyncTest("AVOLUME prototypes", function(_) {
  _checkPrototypes(_,"AVOLUME") ;
  start();
});

asyncTest("COMPANY prototypes", function(_) {
  _checkPrototypes(_,"COMPANY") ;
  start();
});

asyncTest("TABCOUNTRY prototypes", function(_) {
  _checkPrototypes(_,"TABCOUNTRY") ;
  start();
});

asyncTest("TABLAN prototypes", function(_) {
  _checkPrototypes(_,"TABLAN") ;
  start();
});

asyncTest("TABUNIT prototypes", function(_) {
  _checkPrototypes(_,"TABUNIT") ;
  start();
});
//******************************************************************************

asyncTest("stop server", 0, function(_) {
	syracuse.server.close();
	start();
});
asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});
