"use strict";
// JavaScript Document
var module = QUnit.module;
var assert = require("assert");
var config = require('config'); // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var x3Helper = require("syracuse-x3/test/fixtures/x3Helper");

var tracer; // = console.log;
var doStop = false;

module(config.unit_test.x3endpoint.folder + ".x3Prototypes");

//if (!config.unit_test || !config.unit_test.x3endpoint || !config.unit_test.run || !config.unit_test.run.x3Prototypes) {
if (!config.unit_test || !config.unit_test.x3endpoint) {
	return test('X3 PROTOTYPES UNIT TESTS DISABLED FOR NOW', 1, function() {
		ok(true, "work in progress");
	});
}

asyncTest("start", function(_) {
	if (config.unit_test.x3endpoint.serverPort != config.unit_test.x3endpoint.localPort) {
		ok(x3Helper.initDatabase(_), "syracuse mongodb database initialized");
		x3Helper.initialize(_);
		ok(x3Helper.createObjects(_), "createObjects");
	} else {
		ok(true, "start");
	}
	start();
});

var cookie = null;

function _getCookie(_) {
	cookie = cookie || x3Helper.getCookie(_);
	return cookie;
}
//******************************************************************************

function _checkPrototype(_, _representation, _facet, _statusCode) {
	var urlKeys = [];
	var proNames = [];


	var test = {
		done: 0,
		ok: 0,
		nok: 0,
		success: false,
		messages: [],
	}; /*dbg*/
	//ok(true, "_checkPrototype:"+_representation+"."+_facet);

	function _ok(value, message) {
		test.done++;

		try {
			assert.ok(value);
			test.ok++;
		} catch (err) {
			test.nok++;
			test.messages.push("NOK: " + message);
			tracer && tracer("_ok NOK: " + message);
		}
		test.success = (test.done == test.ok);
	};

	function _strictEqual(actual, expected, message) {
		test.done++;

		try {
			assert.strictEqual(actual, expected);
			test.ok++;
		} catch (err) {
			test.nok++;
			test.messages.push("NEQ: " + message + ", expected='" + expected + "', got='" + actual + "'");
			tracer && tracer("_strictEqual NOK: " + message);
		}
		test.success = (test.done == test.ok);
	};

	function _checkUrl(_url) {
		tracer && tracer("*** $url :", _url);
		var urlpart = _url.match(/('.+')/g);
		if (urlpart) {
			for (var i in urlpart) {
				var keys = urlpart[i].match(/\{\w+}/g);
				for (var j in keys) {
					urlKeys.push(keys[j].substring(1, keys[j].length - 1));
				}
			}
		}
	}

	function _checkLink(link, _link) {
		try {
			_ok("$title" in _link, "link.$title");
			_ok("$type" in _link, "link.$type");
			_ok("$url" in _link, "link.$url");
			_checkUrl(_link.$url);
		} catch (err) {
			test.messages.push("Link:" + link + " error=" + err);
			tracer && tracer("_checkLink NOK: " + "Link:" + link + " error=" + err);
		}
	}

	function _checkLinks(_node) {
		if ("$links" in _node) {
			for (var link in _node.$links) {
				_checkLink(link, _node.$links[link]);
			}
		}
	}

	function _checkProperties(_properties) {
		for (var p in _properties) {
			proNames.push(p);

			_checkLinks(_properties[p]);
			_ok("$type" in _properties[p], p + ".$type");

			if (_properties[p].$type == "application/x-reference") {
				_ok("$item" in _properties[p], p + ".$item");
				_ok("$value" in _properties[p].$item, p + ".$value");
				_ok(_properties[p].$item.$value.length > 0, p + ".$value");
				_checkLinks(_properties[p].$item);

				/*
TODO : retirer les commentaires suivant
*/
				_ok("$url" in _properties[p].$item, p + ".$item.$url");
				_ok("$value" in _properties[p].$item, p + ".$item.$value");
				_ok("$key" in _properties[p].$item, p + ".$item.$key");
				_ok("$properties" in _properties[p].$item, p + ".$item.$properties");
				var symbol;
				if ("$symbol" in _properties[p].$item) {
					symbol = _properties[p].$item.$symbol.substring(1, _properties[p].$item.$symbol.length - 1);
				}
				for (var pr in _properties[p].$item.$properties) {
					_ok("$type" in _properties[p].$item.$properties[pr], p + "." + pr + ".$type");
					if (pr != symbol) {
						_ok(pr in _properties[p].$item, p + ".$item." + pr);
					}
				}
			} else if (_properties[p].$type == "application/x-choice") {
				_ok("$value" in _properties[p], p + ".$value");
				_ok("$type" in _properties[p].$value, p + ".$value.$type");
				_ok("$enum" in _properties[p].$value, p + ".$value.$enum");
				_ok(toString.call(_properties[p].$value.$enum) == '[object Array]', p + ".$value.$enum is an array");
				for (var e in _properties[p].$value.$enum) {
					_ok("$value" in _properties[p].$value.$enum[e], p + ".$value.$enum(" + e + ").$value");
					_ok("$title" in _properties[p].$value.$enum[e], p + ".$value.$enum(" + e + ").$title");
				}
			} else if (_properties[p].$type == "application/x-array") {
				_ok("$item" in _properties[p], p + ".$item");
				_ok("$type" in _properties[p].$item, p + ".$item.$type");

				if (_properties[p].$item.$type == "application/json") {
					_ok("$properties" in _properties[p].$item, p + ".$item.$properties");
					_checkProperties(_properties[p].$item.$properties);
				} else if (_properties[p].$item.$type == "application/x-reference") {
					_checkLinks(_properties[p].$item.$item);
					_ok("$value" in _properties[p].$item.$item, p + ".$value");
					if ("$value" in _properties[p].$item.$item) {
						proNames.push(_properties[p].$item.$item.$value.substring(1, _properties[p].$item.$item.$value.length - 1));
					}
				}
			}
		}
	}

	function _getBinds(_node) {
		var binds = [];
		for (var n in _node) {
			if (n == "$bind") {
				tracer && tracer("push $bind:", _node[n]);
				binds.push(_node[n]);
			}
			if (n == "$layout") {
				binds = binds.concat(_getBinds(_node.$layout));
			}
			if (n == "$items") {
				for (var item in _node.$items) {
					binds = binds.concat(_getBinds(_node.$items[item]));
				}
			}
		}
		return binds;
	}

	var name = _representation + ".$" + _facet;
	try {
		var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('" + _representation + ".$" + _facet + "')"), _statusCode);
		// TEMPORARY HACK TO CAPTURE PROTOS
		//console.log(__dirname + "/../../../../results/x3/" +  _representation + "-$" + _facet + ".json")
		//require('streamline-fs').writeFile(__dirname + "/../../../../results/x3/" +  _representation + "-$" + _facet + ".json", JSON.stringify(prototype, null, 2), "utf8");
		//require('streamline-fs').writeFile(__dirname + "/../fixtures/" +  _representation.toLowerCase() + "_" + _facet + ".json", JSON.stringify(prototype, null, 2), "utf8");
		tracer && tracer("prototype=", JSON.stringify(prototype, null, 2));
		_strictEqual(true, true, "The JSON is well formed");
	} catch (e) {
		//tracer && tracer(e);
		if (_statusCode == 200) {
			_strictEqual(true, false, "The JSON isn't well formed");
		}
		return test;
	}
	if (_statusCode != 200) {
		return test;
	}

	function cutBaseUrl(s) {
		return (s) ? s.substring(s.indexOf('/sdata')) : "";
	}
	_strictEqual(cutBaseUrl(prototype.$baseUrl), "/sdata/x3/erp/" + config.unit_test.x3endpoint.dataset, "$baseUrl");
	_strictEqual(prototype.$baseType, "application/json;vnd.sage=syracuse;vnd.sage.syracuse.representation=x3.erp." + config.unit_test.x3endpoint.folder, "$baseType");
	if (_facet in {
		"details": "",
		"edit": "",
		"summary": ""
	}) {
		_strictEqual(prototype.$url, "{$baseUrl}/" + _representation + "('{$key}')?representation=" + _representation + ".$" + _facet, "$url");
	} else {
		_strictEqual(prototype.$url, "{$baseUrl}/" + _representation + "?representation=" + _representation + ".$" + _facet, "$url");
	}
	_strictEqual(prototype.$prototype, "{$baseUrl}/$prototype('{$representation}.$thumb')", "$prototype");
	_strictEqual(prototype.$representation, _representation, "$representation");
	_ok(prototype.$title, "$title");
	_strictEqual(prototype.$type, "{$baseType}." + _representation + ".$" + _facet, "$type");
	_ok("$properties" in prototype, "$properties");
	var properties;
	properties = prototype.$properties;

	if (_facet in {
		"query": "",
		"lookup": ""
	}) {
		_ok("$itemsPerPage" in prototype, "$itemsPerPage");
		_ok("$resources" in properties, "QUERY $resources");
		_ok("$type" in properties.$resources, "QUERY $resources.$type");
		_strictEqual(properties.$resources.$type, "application/x-array", "QUERY $resources.$type");
		_ok("$item" in properties.$resources, "QUERY $resources.$item");
		_strictEqual(properties.$resources.$item.$url, "{$baseUrl}/" + _representation + "('{$key}')?representation=" + _representation + ".$queryItem", "QUERY $resources.$url");
		_strictEqual(properties.$resources.$item.$type, "application/json;vnd.sage=syracuse", "QUERY $resources.$type");
		_ok("$key" in properties.$resources.$item, "QUERY $resources.$item.$key");
		_ok("$value" in properties.$resources.$item, "QUERY $resources.$item.$value");

		_ok("$properties" in properties.$resources.$item, "QUERY $resources.$item.$properties");
		properties = properties.$resources.$item.$properties;
	}

	_checkProperties(properties);
	_checkLinks(prototype);

	if ("$article" in prototype) {
		var binds = _getBinds(prototype.$article);
		//tracer && tracer(binds.join(",")); 
		for (var b in binds) {
			tracer && tracer("?bind:", binds[b]);
			_ok(proNames.indexOf(binds[b]) != -1, "bind:{" + binds[b] + "}");
		}
	}
	if (config.unit_test.x3endpoint.dataset !== 'etnaOracle') _ok("$localization" in prototype, "$localization");

	tracer && tracer("*** keys:", urlKeys);
	tracer && tracer("*** properties", proNames);
	for (var k in urlKeys) {
		_ok(proNames.indexOf(urlKeys[k]) != -1, "key:{" + urlKeys[k] + "}");
	}
	strictEqual(test.nok, 0, (test.nok ? test.nok + "/" + test.done + " assertions failed:" : test.ok + " assertions ok") + '\n' + test.messages.join('\n'));
	return test;
}


function _compareJSON(_, _representation, _facet) {
	var name = _representation + ".$" + _facet;
	var exceptions = ["AQCLNK01/query/Type/$properties.$resources.$item.$properties/REP_CREUSR_REF", // Not a reference on query facet
		"AQCLNK01/query/Type/$properties.$resources.$item.$properties.REP_CREUSR/$isReadOnly",
		"AQCLNK01/query/Type/$properties.$resources.$item.$properties.REP_CREUSR/$capabilities",
		"ATABLE/details/Type/$properties.ATBATZ.$item.$properties.LIEN/$isExcluded", // Not a reference on details facet
		"ATABLE/details/Type/$properties.ATBATZ.$item.$properties.LIEN/$links",
		"ATABLE/details/Type/$properties.ATBATZ.$item.$properties/LIEN_REF",
		"ATABLE/details/Type/$article.$layout.$items.1.$layout.$items.0.$layout.$items/1", //ATBATZAMP not in Bind (not useful)
		"ATABLE/edit/Type/$article.$layout.$items.1.$layout.$items.0.$layout.$items/1", //ATBATZAMP not in Bind (not useful)
	];
	var wEndPoint1 = "";
	var wEndPoint2 = "";
	var wCollab1 = "/sdata/syracuse/collaboration/syracuse";
	var wCollab2 = "{$collaborationUrl}";

	function _compareObjects(o1, o2) {
		var test = {
			success: true,
			messages: []
		};

		function _compare(o1, o2, path, message) {
			tracer && tracer("_compare(o1, o2)");
			for (var p in o1) {
				tracer && tracer("_compare:", p, toString.call(o1[p]));
				var exception = false;
				if (p === "$baseUrl") {
					wEndPoint1 = o1[p].split('/')[4];
					wEndPoint2 = o2[p].split('/')[4];
				}
				//if (["$baseUrl", "$localization", "$title", "$shortTitle", "capabilities"].indexOf(p) < 0) {
				if (["$x3Format", "$baseUrl", "$collaborationUrl", "$localization", "$title", "$shortTitle", "$actxLan", "$actxLanDef", "$actxLanIso", "$actxUser", "$actxLogin", "$actxLegCur", "$actxNbLeg", "$actxFolder", "$actxSolution"].indexOf(p) < 0) {
					tracer && tracer("_compare:", p, toString.call(o1[p]), toString.call(o2[p]));
					if (toString.call(o2[p]).indexOf("Undefined") >= 0) {
						if (p === "$capabilities" && /^\$properties.*$/.test(path) && ["details", "edit", "summary"].indexOf(_facet) >= 0) {
							exception = true;
						} else if (exceptions.indexOf(_representation + "/" + _facet + "/" + "Type/" + path + "/" + p) >= 0) {
							exception = true;
						} else {
							test.success = false;
							test.messages.push("Type " + path + ": " + p + " " + message);
							tracer && tracer("type undefined ", test.messages[test.messages.length - 1]);
							return test;
						}
					}

					if (exception === false) {
						try {
							tracer && tracer(toString.call(o1[p]), " ? ", toString.call(o2[p]));
							assert.strictEqual(toString.call(o1[p]), toString.call(o2[p]));
							tracer && tracer("JSON type OK ", toString.call(o1[p]));
						} catch (err) {
							test.success = false;
							test.messages.push(path + ": " + p + " " + toString.call(o1[p]) + " <> " + toString.call(o2[p]));
							tracer && tracer("not equal type ", test.messages[test.messages.length - 1]);
							return test;
						}
						tracer && tracer("indexOf", toString.call(o1[p]).indexOf("Object"));
						if ((toString.call(o1[p]).indexOf("Object") >= 0) || (toString.call(o1[p]).indexOf("Array") >= 0)) {
							test = _compare(o1[p], o2[p], path + (path ? "." : "") + p, message);
							if (!test.success) return test;
						} else {
							try {
								if (["$properties.$resources.$item.$links.$delete.$confirm", "$links.$delete.$confirm", "$properties.$resources.$item.$key",
									"$properties.$resources.$item.$value", "$key", "$value"
								].indexOf((path + (path ? "." : "") + p)) < 0 && ["$where"].indexOf(p) < 0) {
									if (p === "$url") {
										o1[p] = o1[p].replace(wEndPoint1, wEndPoint2);
										o1[p] = o1[p].replace(wCollab1, wCollab2);
										o2[p] = o2[p].replace(wEndPoint1, wEndPoint2);
										o2[p] = o2[p].replace(wCollab1, wCollab2);
									}
									assert.strictEqual(o1[p], o2[p]);
									tracer && tracer("JSON value OK ", o1[p]);
								}
							} catch (err) {
								if (exceptions.indexOf(_representation + "/" + _facet + "/" + "Value/" + path + "/" + p) < 0) {
									test.success = false;
									test.messages.push("Value " + path + ": " + p + " " + o1[p] + " <> " + o2[p]);
									tracer && tracer("not equal value ", test.messages[test.messages.length - 1]);
									return test;
								}
							}
						}
					}
				}
			}
			return test;
		}

		test = _compare(o1, o2, "", "should be present");
		if (!test.success) {
			test.messages.push("\nComparison : fixtures <> " + _representation + ".$" + _facet);
			return test;
		}
		test = _compare(o2, o1, "", "should not be present");
		if (!test.success) {
			test.messages.push("\nComparison : " + _representation + ".$" + _facet + " <> fixtures ");
			return test;
		}
		return test;
	}

	var p1 = {};
	try {
		p1 = require("syracuse-x3/test/fixtures/" + _representation.toLowerCase() + "_" + _facet);
	} catch (e) {
		ok(false, "require failed with error " + e);
		return test;
	}
	var p2 = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('" + _representation + ".$" + _facet + "')"), 200);
	var test = _compareObjects(p1, p2);
	ok(test.success, _representation + ".$" + _facet + " : " + (test.messages.join('\n') || "OK"));

}

function _compareJSONs(_, _representation, Detail, Edit, Query, Lookup, Summary) {
	var facets = [];
	if (Detail === true) facets.push("details");
	if (Edit === true) facets.push("edit");
	if (Query === true) facets.push("query");
	if (Lookup === true) facets.push("lookup");
	if (Summary === true) facets.push("summary");

	for (var i in facets) {
		_compareJSON(_, _representation, facets[i]);
	}
}

/*
TODO :
- utiliser le compareJson
*/

function testPrototypes() {
	asyncTest("ACLAIDX     prototype", function(_) {
		_checkPrototype(_, "ACLAIDX", "query", 200);
		_checkPrototype(_, "ACLAIDX", "details", 406);
		_checkPrototype(_, "ACLAIDX", "lookup", 200);
		_checkPrototype(_, "ACLAIDX", "edit", 406);
		_checkPrototype(_, "ACLAIDX", "summary", 406);
		_checkPrototype(_, "ACLAIDX", "bulk", 200);
		start();
	});
	asyncTest("AFCTIDX     prototype", function(_) {
		_checkPrototype(_, "AFCTIDX", "query", 200);
		_checkPrototype(_, "AFCTIDX", "details", 406);
		_checkPrototype(_, "AFCTIDX", "lookup", 200);
		_checkPrototype(_, "AFCTIDX", "edit", 406);
		_checkPrototype(_, "AFCTIDX", "summary", 406);
		_checkPrototype(_, "AFCTIDX", "bulk", 200);
		start();
	});
	asyncTest("APLCOM      prototype", function(_) {
		_checkPrototype(_, "APLCOM", "query", 200);
		_checkPrototype(_, "APLCOM", "details", 200);
		_checkPrototype(_, "APLCOM", "lookup", 200);
		_checkPrototype(_, "APLCOM", "edit", 200);
		_checkPrototype(_, "APLCOM", "summary", 200);
		_checkPrototype(_, "APLCOM", "bulk", 200);
		start();
	});
	asyncTest("APSADX      prototype", function(_) {
		_checkPrototype(_, "APSADX", "query", 200);
		_checkPrototype(_, "APSADX", "details", 200);
		_checkPrototype(_, "APSADX", "lookup", 406);
		_checkPrototype(_, "APSADX", "edit", 406);
		_checkPrototype(_, "APSADX", "summary", 406);
		_checkPrototype(_, "APSADX", "bulk", 200);
		start();
	});
	asyncTest("AREPIDX     prototype", function(_) {
		_checkPrototype(_, "AREPIDX", "query", 200);
		_checkPrototype(_, "AREPIDX", "details", 406);
		_checkPrototype(_, "AREPIDX", "lookup", 200);
		_checkPrototype(_, "AREPIDX", "edit", 406);
		_checkPrototype(_, "AREPIDX", "summary", 406);
		_checkPrototype(_, "AREPIDX", "bulk", 200);
		start();
	});
	asyncTest("ATABDIV     prototype", function(_) {
		_checkPrototype(_, "ATABDIV", "query", 200);
		_checkPrototype(_, "ATABDIV", "details", 200);
		_checkPrototype(_, "ATABDIV", "lookup", 200);
		_checkPrototype(_, "ATABDIV", "edit", 200);
		//_checkPrototype(_, "ATABDIV", "summary", 200);
		_checkPrototype(_, "ATABDIV", "bulk", 200);
		start();
	});
	asyncTest("ATABLE      prototype", function(_) {
		_checkPrototype(_, "ATABLE", "query", 200);
		_checkPrototype(_, "ATABLE", "details", 200);
		_checkPrototype(_, "ATABLE", "lookup", 200);
		_checkPrototype(_, "ATABLE", "edit", 200);
		_checkPrototype(_, "ATABLE", "summary", 200);
		_checkPrototype(_, "ATABLE", "bulk", 200);
		start();
	});
	asyncTest("ATRACE      prototype", function(_) {
		_checkPrototype(_, "ATRACE", "query", 200);
		_checkPrototype(_, "ATRACE", "details", 200);
		_checkPrototype(_, "ATRACE", "lookup", 406);
		_checkPrototype(_, "ATRACE", "edit", 406);
		_checkPrototype(_, "ATRACE", "summary", 406);
		_checkPrototype(_, "ATRACE", "bulk", 200);
		start();
	});
	asyncTest("ATYPE       prototype", function(_) {
		_checkPrototype(_, "ATYPE", "query", 200);
		_checkPrototype(_, "ATYPE", "details", 200);
		_checkPrototype(_, "ATYPE", "lookup", 200);
		_checkPrototype(_, "ATYPE", "edit", 200);
		_checkPrototype(_, "ATYPE", "summary", 200);
		_checkPrototype(_, "ATYPE", "bulk", 200);
		start();
	});
	asyncTest("AVOLUME     prototype", function(_) {
		_checkPrototype(_, "AVOLUME", "query", 200);
		_checkPrototype(_, "AVOLUME", "details", 200);
		_checkPrototype(_, "AVOLUME", "lookup", 200);
		_checkPrototype(_, "AVOLUME", "edit", 200);
		_checkPrototype(_, "AVOLUME", "summary", 406);
		_checkPrototype(_, "AVOLUME", "bulk", 200);
		start();
	});
	asyncTest("POSCOD      prototype", function(_) {
		_checkPrototype(_, "POSCOD", "query", 200);
		_checkPrototype(_, "POSCOD", "details", 200);
		_checkPrototype(_, "POSCOD", "lookup", 200);
		_checkPrototype(_, "POSCOD", "edit", 200);
		_checkPrototype(_, "POSCOD", "summary", 200);
		_checkPrototype(_, "POSCOD", "bulk", 200);
		start();
	});
	asyncTest("TABLAN      prototype", function(_) {
		_checkPrototype(_, "TABLAN", "query", 200);
		_checkPrototype(_, "TABLAN", "details", 200);
		_checkPrototype(_, "TABLAN", "lookup", 200);
		_checkPrototype(_, "TABLAN", "edit", 200);
		_checkPrototype(_, "TABLAN", "summary", 200);
		_checkPrototype(_, "TABLAN", "bulk", 200);
		start();
	});
	asyncTest("TABUNIT     prototype", function(_) {
		_checkPrototype(_, "TABUNIT", "query", 200);
		_checkPrototype(_, "TABUNIT", "details", 200);
		_checkPrototype(_, "TABUNIT", "lookup", 200);
		_checkPrototype(_, "TABUNIT", "edit", 200);
		_checkPrototype(_, "TABUNIT", "summary", 200);
		_checkPrototype(_, "TABUNIT", "bulk", 200);
		start();
	});
	asyncTest("AQCPROC01   prototype", function(_) {
		_checkPrototype(_, "AQCPROC01", "query", 200);
		_checkPrototype(_, "AQCPROC01", "details", 200);
		_checkPrototype(_, "AQCPROC01", "lookup", 200);
		_checkPrototype(_, "AQCPROC01", "edit", 200);
		_checkPrototype(_, "AQCPROC01", "summary", 200);
		_checkPrototype(_, "AQCPROC01", "bulk", 200);
		start();
	});
	asyncTest("AQCPROC02   prototype", function(_) {
		_checkPrototype(_, "AQCPROC02", "query", 200);
		_checkPrototype(_, "AQCPROC02", "details", 200);
		_checkPrototype(_, "AQCPROC02", "lookup", 200);
		_checkPrototype(_, "AQCPROC02", "edit", 200);
		_checkPrototype(_, "AQCPROC02", "summary", 200);
		_checkPrototype(_, "AQCPROC02", "bulk", 200);
		start();
	});
	asyncTest("AQCPROC03   prototype", function(_) {
		_checkPrototype(_, "AQCPROC03", "query", 200);
		_checkPrototype(_, "AQCPROC03", "details", 200);
		_checkPrototype(_, "AQCPROC03", "lookup", 200);
		_checkPrototype(_, "AQCPROC03", "edit", 200);
		_checkPrototype(_, "AQCPROC03", "summary", 200);
		_checkPrototype(_, "AQCPROC03", "bulk", 200);
		start();
	});
	asyncTest("AQCPROC04   prototype", function(_) {
		_checkPrototype(_, "AQCPROC04", "query", 200);
		_checkPrototype(_, "AQCPROC04", "details", 200);
		_checkPrototype(_, "AQCPROC04", "lookup", 200);
		_checkPrototype(_, "AQCPROC04", "edit", 200);
		_checkPrototype(_, "AQCPROC04", "summary", 200);
		_checkPrototype(_, "AQCPROC04", "bulk", 200);
		start();
	});
	asyncTest("AQCPROC05   prototype", function(_) {
		_checkPrototype(_, "AQCPROC05", "query", 200);
		_checkPrototype(_, "AQCPROC05", "details", 200);
		_checkPrototype(_, "AQCPROC05", "lookup", 200);
		_checkPrototype(_, "AQCPROC05", "edit", 200);
		_checkPrototype(_, "AQCPROC05", "summary", 200);
		_checkPrototype(_, "AQCPROC05", "bulk", 200);
		start();
	});
	asyncTest("AQCPROC06   prototype", function(_) {
		_checkPrototype(_, "AQCPROC06", "query", 200);
		_checkPrototype(_, "AQCPROC06", "details", 200);
		_checkPrototype(_, "AQCPROC06", "lookup", 200);
		_checkPrototype(_, "AQCPROC06", "edit", 200);
		_checkPrototype(_, "AQCPROC06", "summary", 200);
		_checkPrototype(_, "AQCPROC06", "bulk", 200);
		start();
	});
	asyncTest("AQCPROC07   prototype", function(_) {
		_checkPrototype(_, "AQCPROC07", "query", 200);
		_checkPrototype(_, "AQCPROC07", "details", 200);
		_checkPrototype(_, "AQCPROC07", "lookup", 200);
		_checkPrototype(_, "AQCPROC07", "edit", 200);
		_checkPrototype(_, "AQCPROC07", "summary", 200);
		_checkPrototype(_, "AQCPROC07", "bulk", 200);
		start();
	});
	asyncTest("AQCPROC08   prototype", function(_) {
		_checkPrototype(_, "AQCPROC08", "query", 200);
		_checkPrototype(_, "AQCPROC08", "details", 200);
		_checkPrototype(_, "AQCPROC08", "lookup", 200);
		_checkPrototype(_, "AQCPROC08", "edit", 200);
		_checkPrototype(_, "AQCPROC08", "summary", 200);
		_checkPrototype(_, "AQCPROC08", "bulk", 200);
		start();
	});
	asyncTest("AQCPROC09   prototype", function(_) {
		_checkPrototype(_, "AQCPROC09", "query", 200);
		_checkPrototype(_, "AQCPROC09", "details", 200);
		_checkPrototype(_, "AQCPROC09", "lookup", 200);
		_checkPrototype(_, "AQCPROC09", "edit", 200);
		_checkPrototype(_, "AQCPROC09", "summary", 200);
		_checkPrototype(_, "AQCPROC09", "bulk", 200);
		start();
	});
	asyncTest("AQCPROC10   prototype", function(_) {
		_checkPrototype(_, "AQCPROC10", "query", 200);
		_checkPrototype(_, "AQCPROC10", "details", 200);
		_checkPrototype(_, "AQCPROC10", "lookup", 200);
		_checkPrototype(_, "AQCPROC10", "edit", 406);
		_checkPrototype(_, "AQCPROC10", "summary", 200);
		_checkPrototype(_, "AQCPROC10", "bulk", 200);
		start();
	});
	asyncTest("AQCPROC11   prototype", function(_) {
		_checkPrototype(_, "AQCPROC11", "query", 200);
		_checkPrototype(_, "AQCPROC11", "details", 200);
		_checkPrototype(_, "AQCPROC11", "lookup", 200);
		_checkPrototype(_, "AQCPROC11", "edit", 200);
		_checkPrototype(_, "AQCPROC11", "summary", 200);
		_checkPrototype(_, "AQCPROC11", "bulk", 200);
		start();
	});
	asyncTest("AQCPROC12   prototype", function(_) {
		_checkPrototype(_, "AQCPROC12", "query", 200);
		_checkPrototype(_, "AQCPROC12", "details", 200);
		_checkPrototype(_, "AQCPROC12", "lookup", 200);
		_checkPrototype(_, "AQCPROC12", "edit", 200);
		_checkPrototype(_, "AQCPROC12", "summary", 406);
		_checkPrototype(_, "AQCPROC12", "bulk", 200);
		start();
	});
	asyncTest("AQCLNK01   prototype", function(_) {
		_checkPrototype(_, "AQCLNK01", "query", 200);
		_checkPrototype(_, "AQCLNK01", "details", 200);
		_checkPrototype(_, "AQCLNK01", "lookup", 200);
		_checkPrototype(_, "AQCLNK01", "edit", 200);
		_checkPrototype(_, "AQCLNK01", "summary", 200);
		_checkPrototype(_, "AQCLNK01", "bulk", 200);
		start();
	});
	// asyncTest("AQCPROT1   prototype", function(_) {
	// 	_checkPrototype(_, "AQCPROT1", "query", 200);
	// 	//_checkPrototype(_, "AQCPROT1", "details", 200);
	// 	_checkPrototype(_, "AQCPROT1", "lookup", 200);
	// 	//_checkPrototype(_, "AQCPROT1", "edit", 200);
	// 	_checkPrototype(_, "AQCPROT1", "summary", 200);
	// 	_checkPrototype(_, "AQCPROT1", "bulk", 200);
	// 	start();
	// });
}

function testCompare() {
	/*Detail,Edit,Query,Lookup,Summary*/
	var Detail = true;
	var Edit = true;
	var Query = true;
	var Lookup = true;
	var Summary = true;
	asyncTest("ACLAIDX    compare", 4, function(_) {
		_compareJSONs(_, "ACLAIDX", false, false, Query, Lookup, false);
		start();
	});
	asyncTest("AFCTIDX    compare", 4, function(_) {
		_compareJSONs(_, "AFCTIDX", false, false, Query, Lookup, false);
		start();
	});
	/* not ok now
	 * *APSADX.$details : Type $properties.TYP.$value.$enum: 7 should be present
	asyncTest("APSADX     compare", 4, function(_) {
		_compareJSONs(_, "APSADX",Detail,false,Query,false,false);
		start();
	});
	*/
	asyncTest("AREPIDX    compare", 4, function(_) {
		_compareJSONs(_, "AREPIDX", false, false, Query, Lookup, false);
		start();
	});
	asyncTest("ATABLE     compare", 10, function(_) {
		_compareJSONs(_, "ATABLE", Detail, Edit, Query, Lookup, Summary);
		start();
	});
	/* not ok now
	asyncTest("ATABDIV    compare", 10, function(_) {
		_compareJSONs(_, "ATABDIV",Detail,Edit,Query,Lookup,Summary);
		start();
	});
	asyncTest("ATRACE     compare", 10, function(_) {
		_compareJSONs(_, "ATRACE",Detail,Edit,Query,Lookup,Summary);
		start();
	});
	asyncTest("AVOLUME    compare", 10, function(_) {
		_compareJSONs(_, "AVOLUME",Detail,Edit,Query,Lookup,Summary);
		start();
	});
	asyncTest("COMPANY    compare", 10, function(_) {
		_compareJSONs(_, "COMPANY",Detail,Edit,Query,Lookup,Summary);
		start();
	});
	asyncTest("POSCOD     compare", 10, function(_) {
		_compareJSONs(_, "POSCOD",Detail,Edit,Query,Lookup,Summary);
		start();
	});
	asyncTest("TABLAN     compare", 10, function(_) {
		_compareJSONs(_, "TABLAN",Detail,Edit,Query,Lookup,Summary);
		start();
	});
	asyncTest("TABUNIT    compare", 10, function(_) {
		_compareJSONs(_, "TABUNIT",Detail,Edit,Query,Lookup,Summary);
		start();
	});
	asyncTest("ZQREQH     compare", 10, function(_) {
		_compareJSONs(_, "ZQREQH",Detail,Edit,Query,Lookup,Summary);
		start();
	});
	asyncTest("ZTESTSUITE compare", 10, function(_) {
		_compareJSONs(_, "ZTESTSUITE",Detail,Edit,Query,Lookup,Summary);
		start();
	});
	asyncTest("ZZSERVICE  compare", 10, function(_) {
		_compareJSONs(_, "ZZSERVICE",Detail,Edit,Query,Lookup,Summary);
		start();
	});
	asyncTest("AQCPROT1  compare", 10, function(_) {		
		_compareJSONs(_, "AQCPROT1", Detail, Edit, Query, Lookup, Summary);				  
		start();
	});  ////// Failing at 402 EDIT, so add all EDITS to Detail properties.
	*/
	asyncTest("ATABCUR    compare", 8, function(_) {
		_compareJSONs(_, "ATABCUR", Detail, Edit, Query, Lookup, false);
		start();
	});
	asyncTest("TABCOUNTRY compare", 10, function(_) {
		_compareJSONs(_, "TABCOUNTRY", Detail, Edit, Query, Lookup, Summary);
		start();
	});
	// TODO ? asyncTest("AQCLNK01  compare", 10, function(_) {
	// 	_compareJSONs(_, "AQCLNK01", Detail, Edit, Query, Lookup, Summary);
	// 	start();
	// });
}

function testLinks() {
	asyncTest("AQCPROC06" + x3Helper.gitHubIssue(1309), function(_) {
		var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC06.$details')"), 200);

		strictEqual(prototype.$properties.C06P02_REF.$item.$links.$details.$url, "{$baseUrl}/AQCPROR02('{C06P02}~{C06P03}')?representation=AQCPROR02.$details", "{$baseUrl}/AQCPROR02('{C06P02}~{C06P03}')?representation=AQCPROR02.$details");

		start();
	});

	asyncTest("AQCPROC09" + x3Helper.gitHubIssue(1309), function(_) {
		var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC09.$details')"), 200);

		strictEqual(prototype.$properties.AQCP09COL.$item.$properties.C09P02_REF.$item.$links.$details.$url, "{$baseUrl}/AQCPROR02('{C09P02}~{C09P03}')?representation=AQCPROR02.$details", "{$baseUrl}/AQCPROR02('{C09P02}~{C09P03}')?representation=AQCPROR02.$details");
		strictEqual(prototype.$properties.AQCP09COL.$item.$properties.C09P02_REF.$item.$links.$summary.$url, "{$baseUrl}/AQCPROR02('{C09P02}~{C09P03}')?representation=AQCPROR02.$summary", "{$baseUrl}/AQCPROR02('{C09P02}~{C09P03}')?representation=AQCPROR02.$summary");
		start();
	});
}

function testUS89048() {
	asyncTest("User story 89048/1", function(_) {
		var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01.$query')"), 200);
		ok(true, JSON.stringify(prototype));

		ok("FILTERA" in prototype.$filters, "FILTERA=" + JSON.stringify(prototype.$filters.FILTERA));
		//!strictEqual(prototype.$filters.FILTERA.$title,"{@28478}","FILTERA.$title="+prototype.$filters.FILTERA.$title);
		strictEqual(prototype.$filters.FILTERA.$where, "(left(C01P01, 1) eq \"Q\")", "FILTERA.$where=" + prototype.$filters.FILTERA.$where);

		ok("FILTERB" in prototype.$filters, "FILTERB=" + JSON.stringify(prototype.$filters.FILTERB));
		//!strictEqual(prototype.$filters.FILTERB.$title,"{@28479}","FILTERB.$title="+prototype.$filters.FILTERB.$title);
		strictEqual(prototype.$filters.FILTERB.$where, "(left(C01P01, 1) eq \"Q\")", "FILTERB.$where=" + prototype.$filters.FILTERB.$where);

		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROT1.$query')"), 200);

		ok("C" in prototype.$filters, "C=" + JSON.stringify(prototype.$filters.C));
		strictEqual(prototype.$filters.C.$where, "(left(FCY, 4) eq \"ZUSA\")", "C.$where=" + prototype.$filters.C.$where);
		strictEqual(prototype.$filters.E.$isDefault, true); ///
		ok("A" in prototype.$filters, "A=" + JSON.stringify(prototype.$filters.A));


		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCQRY01.$query')"), 200);
		ok("FILTERC" in prototype.$filters, "FILTERC=" + JSON.stringify(prototype.$filters.FILTERC));
		if (config.unit_test.x3endpoint.dataset !== 'etnaOracle')
			strictEqual(prototype.$filters.FILTERC.$where, "(((((((((left(FIELD01, 1) eq \"A\") or (left(FIELD01, 1) eq \"B\")) or (left(FIELD01, 1) eq \"C\")) or (left(FIELD01, 1) eq \"D\")) or (left(FIELD01, 1) eq \"E\")) or (left(FIELD01, 1) eq \"F\")) or (left(FIELD01, 1) eq \"G\")) or (left(FIELD01, 1) eq \"H\")) or (left(FIELD01, 1) eq \"I\"))", "FILTERC.$where=" + prototype.$filters.FILTERC.$where);
		else
			strictEqual(prototype.$filters.FILTERC.$where, "((left(FIELD01, 1) eq \"A\") or ((left(FIELD01, 1) eq \"B\") or ((left(FIELD01, 1) eq \"C\") or ((left(FIELD01, 1) eq \"D\") or ((left(FIELD01, 1) eq \"E\") or ((left(FIELD01, 1) eq \"F\") or ((left(FIELD01, 1) eq \"G\") or ((left(FIELD01, 1) eq \"H\") or (left(FIELD01, 1) eq \"I\")))))))))", "FILTERC.$where=" + prototype.$filters.FILTERC.$where);
		start();
	});

}

function testFilter() {
	asyncTest("AQCPROT1 - default filter" + x3Helper.gitHubIssue(6044), function(_) {
		var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROT1.$query')"), 200);
		ok("C" in prototype.$filters, "C=" + JSON.stringify(prototype.$filters.C));
		strictEqual(prototype.$filters.C.$where, "(left(FCY, 4) eq \"ZUSA\")", "C.$where=" + prototype.$filters.C.$where);
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCQRY01.$query')"), 200);
		ok("FILTERC" in prototype.$filters, "FILTERC=" + JSON.stringify(prototype.$filters.FILTERC));
		if (config.unit_test.x3endpoint.dataset !== 'etnaOracle')
			strictEqual(prototype.$filters.FILTERC.$where, "(((((((((left(FIELD01, 1) eq \"A\") or (left(FIELD01, 1) eq \"B\")) or (left(FIELD01, 1) eq \"C\")) or (left(FIELD01, 1) eq \"D\")) or (left(FIELD01, 1) eq \"E\")) or (left(FIELD01, 1) eq \"F\")) or (left(FIELD01, 1) eq \"G\")) or (left(FIELD01, 1) eq \"H\")) or (left(FIELD01, 1) eq \"I\"))", "FILTERC.$where=" + prototype.$filters.FILTERC.$where);
		else
			strictEqual(prototype.$filters.FILTERC.$where, "((left(FIELD01, 1) eq \"A\") or ((left(FIELD01, 1) eq \"B\") or ((left(FIELD01, 1) eq \"C\") or ((left(FIELD01, 1) eq \"D\") or ((left(FIELD01, 1) eq \"E\") or ((left(FIELD01, 1) eq \"F\") or ((left(FIELD01, 1) eq \"G\") or ((left(FIELD01, 1) eq \"H\") or (left(FIELD01, 1) eq \"I\")))))))))", "FILTERC.$where=" + prototype.$filters.FILTERC.$where);
		start();
	});

}

function testLNK01() {
	asyncTest("testLNK01", function(_) {
		var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCLNK01.$query')"), 200);
		//ok(true, JSON.stringify(prototype));
		strictEqual(prototype.$properties.$resources.$item.$properties.REP_FIELD01.$capabilities, "sort,filter,filter_upper");
		strictEqual(prototype.$properties.$resources.$item.$properties.REP_FIELD02.$capabilities, "sort,filter,filter_upper");
		strictEqual(prototype.$properties.$resources.$item.$properties.REP_FIELD3.$isExcluded, true);
		strictEqual(prototype.$properties.$resources.$item.$properties.REP_FIELD3_REF.$capabilities, "sort,filter,filter_upper");
		strictEqual(prototype.$properties.$resources.$item.$properties.REP_FIELD4.$capabilities, "sort,filter,filter_upper");
		strictEqual(prototype.$properties.$resources.$item.$properties.REP_FIELD5.$isExcluded, true);
		strictEqual(prototype.$properties.$resources.$item.$properties.REP_FIELD5_REF.$capabilities, "sort,filter,filter_upper");
		strictEqual(prototype.$properties.$resources.$item.$properties.REP_FIELD6.$isExcluded, true);
		strictEqual(prototype.$properties.$resources.$item.$properties.REP_FIELD6_REF.$capabilities, "sort,filter,filter_upper");
		strictEqual(prototype.$properties.$resources.$item.$properties.REP_CALC.$isReadOnly, true);
		strictEqual(prototype.$properties.$resources.$item.$properties.REP_REFCALC.$isExcluded, true);
		strictEqual(prototype.$properties.$resources.$item.$properties.REP_REFCALC_REF.$isReadOnly, true);

		start();
	});

}

function testDevice() {
	asyncTest("Device test on AQCPROC01", function(_) {
		var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01.$query')?device=desktop"), 200);
		//ok(true,JSON.stringify(prototype));
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01.$query')?device=phone"), 406);
		//ok(true,JSON.stringify(prototype));
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01.$query')?device=mobile"), 415);
		//ok(true,JSON.stringify(prototype));
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01.$query')?device=tablet"), 406);
		//ok(true,JSON.stringify(prototype));
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01.$query')?device=unknown"), 415);
		//ok(true,JSON.stringify(prototype));
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01.$query')"), 200);

		start();
	});

	asyncTest("Device test on AQCPROC01M" + x3Helper.gitHubIssue(1621), function(_) {
		var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01M.$query')?device=desktop"), 200);
		//ok(true,JSON.stringify(prototype));
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01M.$query')?device=phone"), 200);
		//ok(true,JSON.stringify(prototype));
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01M.$query')?device=tablet"), 200);
		//ok(true,JSON.stringify(prototype));
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01M.$query')"), 200);

		start();
	});

	asyncTest("Device test on AQCPROC01T", function(_) {
		var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01T.$query')?device=desktop"), 406);
		//ok(true,JSON.stringify(prototype));
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01T.$query')?device=phone"), 406);
		//ok(true,JSON.stringify(prototype));
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01T.$query')?device=tablet"), 200);
		//ok(true,JSON.stringify(prototype));
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01T.$query')"), 200);

		start();
	});

	asyncTest("Device test on AQCPROC10", function(_) {
		var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC10.$query')?device=desktop"), 200);
		//ok(true,JSON.stringify(prototype));
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC10.$query')?device=phone"), 406);
		//ok(true,JSON.stringify(prototype));
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC10.$query')?device=tablet"), 406);
		//ok(true,JSON.stringify(prototype));
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC10.$query')"), 200);

		start();
	});
}

function testStatus() {
	asyncTest("HTTP Status", function(_) {
		var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01.$unknown')"), 400);
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01')"), 400);
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01.$details')"), 200);
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('UNKNOWN.$details')"), 404);
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('UNKNOWN.$edit')"), 404);
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('UNKNOWN.$query')"), 404);
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('UNKNOWN.$lookup')"), 404);
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('UNKNOWN.$summary')"), 404);
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('UNKNOWN.$bulk')"), 404);
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('UNKNOWN.$search')"), 404);
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('STATS~UNKNOWN.$cube')"), 404);
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('QUERY~UNKNOWN~1.$query')"), 404);
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('QUERY~UNKNOWN~1.$bulk')"), 404);
		prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('PROCESS~UNKNOWN.$details')"), 200);
		start();
	});
}

function testIssue5013() {
	asyncTest("AQCPROC01" + x3Helper.gitHubIssue(5013), function(_) {
		var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01.$query')"), 200);
		ok(true, "prototype.$links.$excel={$baseUrl}/AQCPROC01?representation=AQCPROC01.$query&role={$role}&where={$where}&filter={$filter}&excelReportMode={excelReportMode}&doc_uuid={document}");
		var excel = prototype.$links.$excel;

		strictEqual(excel.$url,
			"{$baseUrl}/AQCPROC01?representation=AQCPROC01.$query&role={$role}&where={$where}&filter={$filter}&excelReportMode={excelReportMode}&doc_uuid={document}");
		start();
	});

}

function testIssue5014() {
	asyncTest("AQCPROC01" + x3Helper.gitHubIssue(5013), function(_) {
		var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01.$query')"), 200);

		strictEqual(prototype.$properties.$resources.$item.$properties.C01P01.$capabilities, "sort,filter,filter_upper");

		start();
	});

}

function testIssue4971() {
	asyncTest("AQCPROC01" + x3Helper.gitHubIssue(4971), function(_) {
		var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('AQCPROC01.$query')"), 200);

		strictEqual(prototype.$properties.$resources.$capabilities, "quickedit");
		ok(true, "LK_EMB.$target=\"embedded\"");
		strictEqual(prototype.$links.LK_EMB.$target, "embedded");
		ok(true, "LK_NEW.$target=\"blank\"");
		strictEqual(prototype.$links.LK_NEW.$target, "blank");
		ok(true, "create.$target=\"\"");
		strictEqual(prototype.$links.$create.$target, "");

		start();
	});

}

/*
 * issue - #5554 SAM 101237 : Queries' prototypes
 */
function _checkQueryPrototype(_, query, facet) {
	facet = facet || "$query";
	var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('QUERY~" + query + "~1." + facet + "')"), 200);

	ok(prototype.$baseUrl, "$baseUrl");
	ok(prototype.$title, "$title");
	ok(prototype.$methods, "$methods");
	ok(prototype.codeRequest, "codeRequest");
	ok(prototype.$links, "$links");
	ok(prototype.$properties, "$properties");
	if (prototype.$properties) {
		ok(prototype.$properties.$resources, "$properties.$resources");
		if (prototype.$properties.$resources) {
			var resources = prototype.$properties.$resources;
			ok(resources.$item, "$properties.$resources.$item");
		}
	}
}

function testIssue5554() {
	asyncTest("QUERIES" + x3Helper.gitHubIssue(5554), function(_) {
		_checkQueryPrototype(_, "ATABLE");
		_checkQueryPrototype(_, "AMSK");
		_checkQueryPrototype(_, "DOC");
		_checkQueryPrototype(_, "AIDES");
		start();
	});
}

testPrototypes();
testCompare();
testLinks();
testUS89048();
testDevice();
testStatus();
testIssue5013();
testIssue5014();
testIssue4971();
testIssue5554();
testLNK01();
testFilter();

//******************************************************************************
asyncTest("stop server", 0, function(_) {
	if (config.unit_test.x3endpoint.serverPort != config.unit_test.x3endpoint.localPort) {
		x3Helper.stopServer();
	}
	start();
});
asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});