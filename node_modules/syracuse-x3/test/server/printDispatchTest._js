"use strict";
/* jshint -W079 */
/* jshint unused: false */
/* global QUnit: false, asyncTest: false, test: false, ok: false, strictEqual: false, start: false, stop: false */
var util = require("util");
var baseUrl = "http://localhost:3004";
var port = 3004;
var helpers = require('syracuse-core/lib/helpers');
var config = require('config'); // must be first syracuse require
var PrintClient = require('syracuse-x3/lib/clients/print/PrintClient');
var mongodb = require('streamline-mongodb');
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var httpClient = require('syracuse-httpclient/lib/httpClient');
var flows = require('streamline/lib/util/flows');
var forEachKey = helpers.object.forEachKey;

var printHostname = config && config.x3print && config.x3print.server && config.x3print.server.hostname || "ecvmdev2008x64";
var printPort = config && config.x3print && config.x3print.server && config.x3print.server.port || 10000;
var done;
QUnit.module(module.id, {
	setup: function() {}
});

// skip the test if not enabled by config
if (config.unit_test.suppress.x3print) {
	test('TESTS SKIPPED: module is suppressed in nodelocal.js', function() {
		ok(true, "dummy test");
	})
} else {

var recOptions = {
	recMode: config && config.x3print && config.x3print.qunit && config.x3print.qunit.online ? "REC" : "PLAY",
	path: "node_modules/syracuse-x3/lib/clients/print/data/dispatch",
	fileName: "printDispatchTest_UNIT.json"
};
if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file


var application, contract, dataset;
var tracer; // = console.error

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;

var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_admin_test");

var testData = require('syracuse-sdata/test/fixtures/testDB');
var testEndPoint = testData.endpoint;

testEndPoint.datasets = {
	test: {
		driver: "mongodb",
		database: "test",
		hostname: "localhost",
		port: config.collaboration.port || 27017
	}
};

config.sdata.endpoints.push(testEndPoint);

var cookie;

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(testEndPoint.datasets.test.hostname, testEndPoint.datasets.test.port, {});
	var db = adminTestFixtures.newMongoDb("mongodb_admin_test", server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");

	start();
});

//start syracuse server
asyncTest("initialize syracuse test server", 1, function(_) {
	require('syracuse-main/lib/syracuse').startServers(_, port);
	ok(true, "server initialized");
	start();
});

var jobData1 = {
	"_FormatExport": "29",
	"+X3IMP": "aytrad.sagefr.adinternal.com:1890",
	"__wJobID": "SUPERV-1476659-20150311175644-37",
	"+STATE": "LAUNCHED",
	"+OUT": "DISPLAY",
	"__wJobRank": "16",
	"__REPORT": "TABCOUNTRY.rpt",
	"__DESTINATION": "3",
	"__TYPDBA": "1",
	"__DBDATABASE": "SUPDVLP",
	"__DBUSER": "SUPERV",
	"__DBPASSWORD": "tiger",
	"__WSTATION": "ecchambard-001.sagefr.adinternal.com",
	"__CDUSER": "AP",
	"__ADXSOL": "SUPDVLP",
	"__APPLICATION": "SUPERV;aws-x3-devsup;2050",
	"__APPRPT": "SUPERV;aws-x3-devsup;2050",
	"__RPTLAN": "FRA",
	"X3DOS": "SUPERV;aws-x3-devsup;17000;150;FRA",
	"__JOBLINKED": "",
	"__REQUETE": "25561900",
	"_Orientation": "0",
	"_PaperSize": "44",
	"X3CLI": "Superviseur 140",
	"X3EDT": "Etat Sage X3 Entreprise Copyright Sage",
	"X3ETA": "TABCOUNTRY",
	"X3TIT": "Pays",
	"X3OPE": "Teddy Chambard",
	"X3USR": "AP",
	"X3LAN": "FRA",
	"X3SIT1": "*",
	"X3SIT2": "z",
	"X3PRF": "ADMIN",
	"X3FCT": "",
	"X3SIT": "",
	"paysdeb": " ",
	"paysfin": "zzzzzzzzzz",
	"impselections": "0",
	"año": ""
};

function getCookie(_, otherBaseUrl, login, pass) {

	var response = httpClient.httpRequest(_, {
		url: otherBaseUrl != null ? otherBaseUrl + "/syracuse-main/html/main.html" : baseUrl + "/syracuse-main/html/main.html",
		user: login || "guest",
		password: pass || "guest"
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	return response.headers["set-cookie"];
}

var statusCode, headers, body;
var cookie;
var id = 0;

function httpRequest(_, method, url, heads, buffer, norecord) {
	cookie = getCookie(_, baseUrl);
	var head = {
		cookie: cookie,
	};
	if (!norecord) {
		head["unittest"] = recOptions.recMode;
	}
	heads && forEachKey(heads, function(key, value) {
		head[key] = value;
	});
	if (buffer) {
		head['content-length'] = buffer.length;

	}
	url = url.indexOf("http") === 0 ? url : baseUrl + url;
	var req = httpClient.httpRequest(_, {
		method: method,
		url: url,
		headers: head
	});

	if (buffer) {
		req.write(_, buffer);
	}

	var response = req.end().response(_);

	statusCode = response.statusCode;
	headers = response.headers;
	body = response.readAll(_);
	if (head.accept === "application/json") body = JSON.parse(body);

	console.log("============== Request on url: " + url + " ==============");
	console.log("request.headers " + JSON.stringify(head, null, 2));
	console.log("StatusCode: " + statusCode);

	console.log("response.Headers: " + JSON.stringify(headers, null, 2));
	console.log("response.Body: " + JSON.stringify(body, null, 2));
}

var jobId, seqId;
var location;
asyncTest("Launch report using API", function(_) {

	var cli = PrintClient.getClient(_, printHostname, printPort, "UNIT_TEST", recOptions);
	jobId = "LAUNCH_REPORT_ID1";
	jobData1.__wJobID = jobId;

	stop();
	seqId = cli.launchReport(_, jobData1);
	strictEqual(seqId != null && seqId > 0, true, "Launch report OK");
	start();
});

asyncTest("Wait report", function(_) {

	httpRequest(_, "GET", "/print/" + printHostname + ":" + printPort + "/$getState('" + jobId + "')", {
		"accept": "application/json"
	});

	var pollingMillis = body.pollingMillis;
	strictEqual(statusCode, 202, "Status code OK: " + statusCode);
	if (statusCode === 202) {
		var i = 1;
		var intervalId = flows.setInterval(function(_) {
			httpRequest(_, "GET", headers.location, {
				"accept": "application/json"
			});
			if (statusCode === 202) {
				location = headers.location;
				strictEqual(true, true, "=============== Response N°: " + i + " ================");
				strictEqual(statusCode, 202, "Status code OK: " + statusCode);
				strictEqual(location != null, true, "Location OK: " + location);
				strictEqual(body.phase != null, true, "Phase : " + body.phase);
				strictEqual(body.pollingMillis != null, true, "PollingMillis : " + body.pollingMillis);
			} else if (statusCode === 201) {
				location = headers.location;
				strictEqual(true, true, "=============== Response N°: " + i + " ================");
				strictEqual(statusCode, 201, "Status code OK: " + statusCode);
				strictEqual(location != null, true, "Location OK: " + location);
				strictEqual(body.phase != null, true, "Phase : " + body.phase);
				clearInterval(intervalId);
				start();
			} else {
				strictEqual(statusCode != null, false, "Status code not ok : " + statusCode);
				if (body && body.$diagnoses && body.$diagnoses.length !== 0 && body.$diagnoses[0] != null) {
					strictEqual(body.$diagnoses[0].$severity != null, true, "Severity : " + body.$diagnoses[0].$severity);
					strictEqual(body.$diagnoses[0].$message != null, true, "Message : " + body.$diagnoses[0].$message);
				}
				clearInterval(intervalId);
				start();
			}
			i++;
		}, pollingMillis);
	} else {
		if (body && body.$diagnoses && body.$diagnoses.length !== 0 && body.$diagnoses[0] != null) {
			strictEqual(body.$diagnoses[0].$severity != null, true, "Severity : " + body.$diagnoses[0].$severity);
			strictEqual(body.$diagnoses[0].$message != null, true, "Message : " + body.$diagnoses[0].$message);
		}
		start();
	}
});

asyncTest("Get report", function(_) {
	var location_bak = location;
	httpRequest(_, "GET", location, {
		"accept": "application/json"
	});
	strictEqual(statusCode, 201, "Status code OK: " + statusCode);
	strictEqual(location != null, true, "Location OK: " + location);
	if (statusCode === 201) {
		location = headers.location;
		httpRequest(_, "GET", location);
		strictEqual(statusCode, 200, "Status code OK: " + statusCode);
		strictEqual(location != null, true, "Location OK: " + location);
		strictEqual(headers["content-type"], "application/pdf", "Content-Type OK: " + headers["content-type"]);
		strictEqual(headers["content-disposition"], 'attachment; filename="' + jobData1.X3ETA + '.pdf"', "Content-Disposition OK: " + headers["content-disposition"]);
	} else {
		if (body && body.$diagnoses && body.$diagnoses.length !== 0 && body.$diagnoses[0] != null) {
			strictEqual(body.$diagnoses[0].$severity != null, true, "Severity : " + body.$diagnoses[0].$severity);
			strictEqual(body.$diagnoses[0].$message != null, true, "Message : " + body.$diagnoses[0].$message);
		}
	}
	httpRequest(_, "GET", location_bak, {
		"accept": "application/json"
	});
	strictEqual(statusCode, 500, "Status code OK: " + statusCode);
	if (body && body.$diagnoses && body.$diagnoses.length !== 0 && body.$diagnoses[0] != null) {
		strictEqual(body.$diagnoses[0].$severity != null, true, "Severity : " + body.$diagnoses[0].$severity);
		strictEqual(body.$diagnoses[0].$message != null, true, "Message : " + body.$diagnoses[0].$message);
	}
	start();
});

asyncTest("Delete report", function(_) {
	httpRequest(_, "DELETE", location);
	strictEqual(statusCode, 204, "Status code OK: " + statusCode);

	if (statusCode === 204) {
		httpRequest(_, "GET", location, {
			"accept": "application/json"
		});
		strictEqual(statusCode, 404, "Status code OK: " + statusCode);
		if (statusCode === 404) {
			if (body && body.$diagnoses && body.$diagnoses.length !== 0 && body.$diagnoses[0] != null) {
				strictEqual(body.$diagnoses[0].$severity != null, true, "Severity : " + body.$diagnoses[0].$severity);
				strictEqual(body.$diagnoses[0].$message != null, true, "Message : " + body.$diagnoses[0].message);
			}
		} else {
			strictEqual(statusCode != null, false, "Status code not ok : " + statusCode);
			if (body && body.$diagnoses && body.$diagnoses.length !== 0 && body.$diagnoses[0] != null) {
				strictEqual(body.$diagnoses[0].$severity != null, true, "Severity : " + body.$diagnoses[0].$severity);
				strictEqual(body.$diagnoses[0].$message != null, true, "Message : " + body.$diagnoses[0].$message);
			}
		}
	} else {
		strictEqual(statusCode != null, false, "Status code not ok : " + statusCode);
		if (body && body.$diagnoses && body.$diagnoses.length !== 0 && body.$diagnoses[0] != null) {
			strictEqual(body.$diagnoses[0].$severity != null, true, "Severity : " + body.$diagnoses[0].$severity);
			strictEqual(body.$diagnoses[0].$message != null, true, "Message : " + body.$diagnoses[0].$message);
		}
	}
	start();
});

asyncTest("Launch report using API - second attempt", function(_) {
	var cli = PrintClient.getClient(_, printHostname, printPort, "UNIT_TEST", recOptions);
	jobId = "LAUNCH_REPORT_ID2";
	jobData1.__wJobID = jobId;
	stop();
	seqId = cli.launchReport(_, jobData1);
	strictEqual(seqId != null && seqId > 0, true, "Launch report OK");
	id++;
	start();
});

asyncTest("Cancel report", function(_) {

	httpRequest(_, "GET", "/print/" + printHostname + ":" + printPort + "/$cancel('" + seqId + "')", {
		"accept": "application/json"
	});
	strictEqual(statusCode, 200, "Status code on cancel OK: " + statusCode);
	if (body && body.$diagnoses && body.$diagnoses.length !== 0 && body.$diagnoses[0] != null) {
		strictEqual(body.$diagnoses[0].$severity != null, true, "Severity : " + body.$diagnoses[0].$severity);
		strictEqual(body.$diagnoses[0].$message != null, true, "Message : " + body.$diagnoses[0].$message);
	}
	httpRequest(_, "GET", "/print/" + printHostname + ":" + printPort + "/$f('" + jobId + "')", {
		"accept": "application/json"
	});
	strictEqual(statusCode, 500, "Status code on getState OK: " + statusCode);

	if (body && body.$diagnoses && body.$diagnoses.length !== 0 && body.$diagnoses[0] != null) {
		strictEqual(body.$diagnoses[0].$severity != null, true, "Severity : " + body.$diagnoses[0].$severity);
		strictEqual(body.$diagnoses[0].$message != null, true, "Message : " + body.$diagnoses[0].$message);
	}
	start();
});

// test automatic deletion of print document 
asyncTest("Launch report using API", function(_) {
	config.x3print = {};
	config.x3print.expiration = 1000;
	var cli = PrintClient.getClient(_, printHostname, printPort, "UNIT_TEST", recOptions);
	jobId = "LAUNCH_REPORT_ID3";
	jobData1.__wJobID = jobId;

	stop();
	seqId = cli.launchReport(_, jobData1);
	strictEqual(seqId != null && seqId > 0, true, "Launch report OK");
	id++;
	start();
});

asyncTest("Wait report", function(_) {
	httpRequest(_, "GET", "/print/" + printHostname + ":" + printPort + "/$getState('" + jobId + "')", {
		"accept": "application/json"
	});

	var pollingMillis = body.pollingMillis;

	strictEqual(statusCode, 202, "Status code OK: " + statusCode);
	if (statusCode === 202) {
		var i = 1;
		var intervalId = flows.setInterval(function(_) {
			httpRequest(_, "GET", headers.location, {
				"accept": "application/json"
			});
			if (statusCode === 202) {
				location = headers.location;
				strictEqual(true, true, "=============== Response N°: " + i + " ================");
				strictEqual(statusCode, 202, "Status code OK: " + statusCode);
				strictEqual(location != null, true, "Location OK: " + location);
				strictEqual(body.phase != null, true, "Phase : " + body.phase);
				strictEqual(body.pollingMillis != null, true, "PollingMillis : " + body.pollingMillis);
			} else if (statusCode === 201) {
				location = headers.location;
				strictEqual(true, true, "=============== Response N°: " + i + " ================");
				strictEqual(statusCode, 201, "Status code OK: " + statusCode);
				strictEqual(location != null, true, "Location OK: " + location);
				strictEqual(body.phase != null, true, "Phase : " + body.phase);
				clearInterval(intervalId);
				start();
			} else {
				strictEqual(statusCode != null, false, "Status code not ok : " + statusCode);
				if (body && body.$diagnoses && body.$diagnoses.length !== 0 && body.$diagnoses[0] != null) {
					strictEqual(body.$diagnoses[0].$severity != null, true, "Severity : " + body.$diagnoses[0].$severity);
					strictEqual(body.$diagnoses[0].$message != null, true, "Message : " + body.$diagnoses[0].$message);
				}
				clearInterval(intervalId);
				start();
			}
			i++;
		}, pollingMillis);
	} else {
		if (body && body.$diagnoses && body.$diagnoses.length !== 0 && body.$diagnoses[0] != null) {
			strictEqual(body.$diagnoses[0].$severity != null, true, "Severity : " + body.$diagnoses[0].$severity);
			strictEqual(body.$diagnoses[0].$message != null, true, "Message : " + body.$diagnoses[0].$message);
		}
		start();
	}
});

asyncTest("Get report", function(_) {
	var location_bak = location;
	httpRequest(_, "GET", location, {
		"accept": "application/json"
	});
	strictEqual(statusCode, 201, "Status code OK: " + statusCode);
	strictEqual(location != null, true, "Location OK: " + location);
	if (statusCode === 201) {
		location = headers.location;
		httpRequest(_, "GET", location);
		strictEqual(statusCode, 200, "Status code OK: " + statusCode);
		strictEqual(location != null, true, "Location OK: " + location);
		strictEqual(headers["content-type"], "application/pdf", "Content-Type OK: " + headers["content-type"]);
		strictEqual(headers["content-disposition"], 'attachment; filename="' + jobData1.X3ETA + '.pdf"', "Content-Disposition OK: " + headers["content-disposition"]);
	} else {
		if (body && body.$diagnoses && body.$diagnoses.length !== 0 && body.$diagnoses[0] != null) {
			strictEqual(body.$diagnoses[0].$severity != null, true, "Severity : " + body.$diagnoses[0].$severity);
			strictEqual(body.$diagnoses[0].$message != null, true, "Message : " + body.$diagnoses[0].$message);
		}
	}
	httpRequest(_, "GET", location_bak, {
		"accept": "application/json"
	});
	strictEqual(statusCode, 500, "Status code OK: " + statusCode);
	if (body && body.$diagnoses && body.$diagnoses.length !== 0 && body.$diagnoses[0] != null) {
		strictEqual(body.$diagnoses[0].$severity != null, true, "Severity : " + body.$diagnoses[0].$severity);
		strictEqual(body.$diagnoses[0].$message != null, true, "Message : " + body.$diagnoses[0].$message);
	}
	start();
});

asyncTest("check report removed", function(_) {
	setTimeout(~_, 1000);

	var location_bak = location;
	httpRequest(_, "GET", location, {
		"accept": "application/json"
	});
	strictEqual(statusCode, 404, "Status code OK: " + statusCode);
	config.x3print.expiration = 20;

	start();
});

asyncTest("filePut / fileDelete  operation", function(_) {
	var filesLoc = ["sandbox", "GX3APP@SUPDVLP$FRA!10"];

	var location_bak = location;

	var bufferStr = (new Buffer("unit test dispatcher upload", "utf8")).toString('hex');

	httpRequest(_, "PUT", "/print/" + printHostname + ":" + printPort + "/$fileSvc('test')?fileName=qunit-test-dispatcher.txt&location=" + filesLoc[0], {
		"accept": "application/json",
		"content-type": "application/json"
	}, bufferStr);
	strictEqual(statusCode, 204, "Status code OK: " + statusCode);

	httpRequest(_, "PUT", "/print/" + printHostname + ":" + printPort + "/$fileSvc('test')?fileName=qunit-test-dispatcher.txt&location=bid", {
		"accept": "application/json",
		"content-type": "application/json"
	}, new Buffer("unit test dispatcher upload", "utf8"));
	strictEqual(statusCode, 500, "Status code OK: " + statusCode);
	strictEqual(body.$diagnoses !== null, true, "error raise ok");
	strictEqual(body.$diagnoses && body.$diagnoses[0].$severity, "error", "error message ok");
	strictEqual(body.$diagnoses && body.$diagnoses[0].$message, "PrintEngine error : invalid directory", "error message ok");

	httpRequest(_, "PUT", "/print/" + printHostname + ":" + printPort + "/$fileSvc('test')?fileName=qunit-test-dispatcher.txt&location=..\\bid", {
		"accept": "application/json",
		"content-type": "application/json"
	}, bufferStr);
	strictEqual(statusCode, 500, "Status code OK: " + statusCode);
	strictEqual(body.$diagnoses !== null, true, "error raise ok");
	strictEqual(body.$diagnoses && body.$diagnoses[0].$severity, "error", "error message ok");
	strictEqual(body.$diagnoses && body.$diagnoses[0].$message, "bad location", "error message ok" + body.$diagnoses[0].$message);


	httpRequest(_, "PUT", "/print/" + printHostname + ":" + printPort + "/$fileSvc('test')?fileName=\\..\\qunit-test-dispatcher.txt&location=bid", {
		"accept": "application/json",
		"content-type": "application/json"
	}, bufferStr);
	strictEqual(statusCode, 500, "Status code OK: " + statusCode);
	strictEqual(body.$diagnoses !== null, true, "error raise ok");
	strictEqual(body.$diagnoses && body.$diagnoses[0].$severity, "error", "error message ok");
	strictEqual(body.$diagnoses && body.$diagnoses[0].$message, "bad fileName", "error message ok " + body.$diagnoses[0].$message);


	httpRequest(_, "DELETE", "/print/" + printHostname + ":" + printPort + "/$fileSvc('test')?fileName=qunit-test-dispatcher.txt&location=" + filesLoc[0], {
		"accept": "application/json",
		"content-type": "application/json"
	}, bufferStr);
	strictEqual(statusCode, 204, "Status code OK: " + statusCode);

	httpRequest(_, "DELETE", "/print/" + printHostname + ":" + printPort + "/$fileSvc('UNIT_TEST')?fileName=qunit-test-dispatcher.txt&location=bid", {
		"accept": "application/json",
		"content-type": "application/json"
	}, bufferStr);
	strictEqual(statusCode, 500, "Status code OK: " + statusCode);
	strictEqual(body.$diagnoses !== null, true, "error raise ok");
	strictEqual(body.$diagnoses && body.$diagnoses[0].$severity, "error", "error message ok");
	strictEqual(body.$diagnoses && body.$diagnoses[0].$message, "PrintEngine error : invalid directory", "error message ok");

	httpRequest(_, "DELETE", "/print/" + printHostname + ":" + printPort + "/$fileSvc('test')?fileName=qunit-test-dispatcher.txt&location=..\\bid", {
		"accept": "application/json",
		"content-type": "application/json"
	}, bufferStr);
	strictEqual(statusCode, 500, "Status code OK: " + statusCode);
	strictEqual(body.$diagnoses !== null, true, "error raise ok");
	strictEqual(body.$diagnoses && body.$diagnoses[0].$severity, "error", "error message ok");
	strictEqual(body.$diagnoses && body.$diagnoses[0].$message, "bad location", "error message ok" + body.$diagnoses[0].$message);


	httpRequest(_, "DELETE", "/print/" + printHostname + ":" + printPort + "/$fileSvc('test')?fileName=\\..\\qunit-test-dispatcher.txt&location=bid", {
		"accept": "application/json",
		"content-type": "application/json"
	}, bufferStr);
	strictEqual(statusCode, 500, "Status code OK: " + statusCode);
	strictEqual(body.$diagnoses !== null, true, "error raise ok");
	strictEqual(body.$diagnoses && body.$diagnoses[0].$severity, "error", "error message ok");
	strictEqual(body.$diagnoses && body.$diagnoses[0].$message, "bad fileName", "error message ok " + body.$diagnoses[0].$message);

	start();

});



test("kill", function() {
	done = true;
	start();
});
}