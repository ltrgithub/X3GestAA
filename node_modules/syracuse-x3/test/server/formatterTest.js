"use strict";
var locale = require('syracuse-core/lib/locale');
var CvgFormatter = require('syracuse-x3/lib/convergence/types/CvgFormatter').CvgFormatter;
var CvgFormat = require('syracuse-x3/lib/convergence/model/CvgFormat').CvgFormat;
var Cvg = require('syracuse-x3/lib/convergence/model/Cvg').Cvg;

QUnit.module('X3 - Formatter tests');

var SETTINGS = {
	fr: {
		decimalChar: ',',
	},
	en: {
		decimalChar: '.',
	}
}

function testBasic(lang, fmt, raw, value, expected) {
	testOptions(fmt, raw, value, expected, SETTINGS[lang]);
}

function testOptions(fmt, raw, value, expected, opts) {
	var options={ decimalChar: ',', thousandChar: ' ', vOn: true, zOn: false, dateOrder: 'DMY', dateSep: '/', datePivot: 1957 };
	if (opts){
		for (var p in opts){
			options[p]=opts[p];
		}
	}
	if (options && options.dateOrder) {
		if (options.dateOrder === "MDY"){
			options.dateOrder = Cvg.FTM_X3DATE_MDY;
		}else if (options.dateOrder === "DMY"){
			options.dateOrder = Cvg.FTM_X3DATE_DMY;
		}else if (options.dateOrder === "YMD"){
			options.dateOrder = Cvg.FTM_X3DATE_YMD;
		}else{
			throw new Error("Date order not supported: "+options.dateOrder);
		}
	}
	var formatter = new CvgFormatter(options);
	var format = new CvgFormat(fmt)
	var got;
	try {
		got = formatter.formatField(format, value, raw);
	} catch (ex) {
		console.error(ex);
		got = ex.message;
	}
	strictEqual(got, expected, format + " (raw: '" + raw + "'): format: '" + value + "' -> '" + got + "'");
	var parsed = formatter.unformatField(format, got);
	
	var again = formatter.formatField(format, parsed, true);
	strictEqual(again, expected, format + " (again, parsed= " + parsed + ") : '" + value + "' -> '" + got + "'");
}

function testSimple(fmt, raw, value, expected) {
	testOptions(fmt, raw, value, expected, { strict: true });
}

function testParse(lang, format, raw, value, expected) {
	// see later
}

asyncTest("init", 1, function() {
	locale.setCurrent(function(err) {
		ok(err == null);
		start();
	}, "fr");
});

test("basic formatting", 44, function() {
	testBasic('fr', "Nz:11F", true, "123456789.12", "123456789,12");
	testBasic('fr', "Nz:11F", true, "0.00987654321", "0,0098765432");
	testBasic('fr', "Nz:11F", true, "12345678900", "12345678900");
	testBasic('fr', "Nz:11F", true, "12345.123456", "12345,123456");
	testBasic('fr', "K:5b", false, "MAJUSCULE", "majus");
	false && testBasic('fr', "K:5Xc", false, "006", "Unexpected format character [c] - Position[5] - Format='K:5Xc'");
	testBasic('fr', "K:4X[-]4X[-]4X[-]4X[-]", false, "Cocodd", "Coco-dd  -    -    -");
	testBasic('fr', "K:4X[-]4X[-]4X[-]4X[-]", false, "Cocodd", "Coco-dd  -    -    -");
	testParse('fr', "K:4X[-]4X[-]4X[-]4X[-]", true, "Coco -     -     -     -", "unFormatField - Bad character[ ] - Pos[5] - Input[Coco -     -     -     -] - Format='K:4X[-]4X[-]4X[-]4X[-]' - isX3Data[true] - Input[Coco -     -     -     -] - Format='K:4X[-]4X[-]4X[-]4X[-]'");
	testBasic('fr', "K:4X[-]4X[-]4X[-]4X[-]", false, "Coco    ", "Coco-    -    -    -");
	testBasic('fr', "K:#[ ]##[ ]##[ ]#B[ ]###[ ]###", false, "2500613564564", "2 50 06 13 564 564");
	testBasic('fr', "K:#[ ]##[ ]##[ ]#B[ ]###[ ]###", true, "2500613564564", "2 50 06 13 564 564");
	testBasic('fr', "K:#[ ]##[ ]##[ ]#B[ ]###[ ]###[ ]##", false, "2500613564564", "2 50 06 13 564 564");
	testBasic('fr', "K:#[ ]##[ ]##[ ]#B[ ]###[ ]###[ ]##", true, "2500613564564", "2 50 06 13 564 564");
	testParse('fr', "K:#[ ]##[ ]##[ ]#B[ ]###[ ]###[ ]##", true, "2 50 06 13 564 564", "2500613564564");
	testBasic('fr', "DZ:DD[/]MM[/]YY", true, "20080221", "21/02/08");
	testBasic('fr', "DZ:DD[/]MM[/]YY", true, "20080221", "21/02/08");
	testBasic('fr', "DZ:DD[/]MM[/]YY", false, "21/02/08", "21/02/08");
	false && testBasic('fr', "DZ:DD[/]MM[/]YY", false, "21/02", "FormatField - Bad input date [Year is missing] - Class='CJFmtCtrlDateYear' - isX3Data[false] - Input[21/02] - DateSens[DMY] - DateSep[/] - DatePivot[1957] - ZOn[false] - Format='DZ:DD[/]MM[/]YY'");
	testBasic('fr', "DZ:DD[/]MM[/]YY", true, "21/02", "21/02/13");
	testParse('fr', "DZ:DD[/]MM[/]YY", true, "21/02/08", "20080221");
	testParse('fr', "DZ:DD[/]MM[/]YY", true, "21/02", "20130221");
	testBasic('fr', "DZ:DDMMYYYY", true, "20090506", "06052009");
	testBasic('fr', "DZ:DD[/]MM[/]YY", false, "27/12/07", "27/12/07");
	testBasic('fr', "DZ:DD[/]MM[/]YY", true, "20090506", "06/05/09");
	testBasic('fr', "DzZ:DD[/]MM[/]YY", true, "20090506", "06/05/09");
	testBasic('fr', "Dz:DD[/]MM[/]YY", true, "20090506", "06/05/09");
	testBasic('fr', "Dz:DD[ ]MMMMMMMMMM[ ]YYYY", true, "20080102", "02 Janvier    2008");
});

test("date basic", 40, function() {
	testOptions('Dz:DD[ ]MMMMMMMMMM[ ]YYYY', true, '20080102', '02 Janvier    2008', null);
	testOptions('D:DD[/]MM[/]YYYY', false, '01102', '01/10/2002', null);
	testOptions('D:DD[/]MM[/]YYYY', true, '01102', '02/10/2001', null);
	testOptions('D:DD[/]MM[/]YY', false, '01/02/08', '01/02/08', null);
	testOptions('D:DD[/]MM[/]YY', true, '01/02/08', '08/02/01', null);
	testOptions('D:DD[/]MM[/]YY', true, '31/04/04', '04/04/31', null);
	testOptions('D:DD[/]MM[/]YY', true, '42/04/04', '04/04/42', null);
	testOptions('D:DD[/]MM[/]YYYY', false, '01011601', '01/01/1601', null);
	testOptions('D:DD[/]MM[/]YYYY', true, '631001', '01/10/1963', null);
	testOptions('D:DD[/]MM[/]YYYY', false, '011001', '01/10/2001', null);
	testOptions('D:DD[/]MM[/]YYYY', true, '011001', '01/10/2001', null);
	testOptions('D:DD[/]MM[/]YYYY', false, '011000002', '01/10/2002', null);
	testOptions('D:DD[/]MM[/]YYYY', false, '020306', '02/03/2006', null);
	testOptions('D:DD[/]MM[/]YYYY', true, '020306', '06/03/2002', null);
	testOptions('D:DD[/]MM[/]YY', false, '02/2/06', '02/02/06', null);
	testOptions('D:DD[/]MM[/]YY', true, '02/2/06', '06/02/02', null);
	testOptions('D:DD[/]MM[/]YY', false, '281001', '28/10/01', null);
	testOptions('D:DD[/]MM[/]YY', true, '281001', '01/10/28', null);
	testOptions('D:DD[/]MM[/]YY', true, '20001201', '01/12/00', null);
	testOptions('D:DD[/]MM[/]YY', true, '20/02', '20/02/13', null);
});

test("date Z", 8, function() {
	testOptions('DZ:DD[/]MM[/]YY', true, '15991231', '  /  /  ', { decimalChar: ',', thousandChar: ' ', vOn: true, zOn: false, dateOrder: 'DMY', dateSep: '/', datePivot: 1957 });
	testOptions('DZ:DD[/]MM[/]YY', false, '', '  /  /  ', { decimalChar: ',', thousandChar: ' ', vOn: true, zOn: false, dateOrder: 'DMY', dateSep: '/', datePivot: 1957 });
	testOptions('DZ:DD[/]MM[/]YY', true, '', '  /  /  ', { decimalChar: ',', thousandChar: ' ', vOn: true, zOn: false, dateOrder: 'DMY', dateSep: '/', datePivot: 1957 });
	testOptions('DZ:DD[/]MM[/]YY', true, '15991231', '  /  /  ', { decimalChar: ',', thousandChar: ' ', vOn: true, zOn: false, dateOrder: 'DMY', dateSep: '/', datePivot: 1957 });
});

test("date with text", 32, function() {
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', false, '16/03/63', 'debut16.03.63fin', null);
	testOptions('D:[debut]DD[.]MM[.]YYYY[fin]', false, '16/03/63', 'debut16.03.1963fin', null);
	testOptions('D:[debut]DD[.]MM[.]YYYY[fin]', false, '16/03/45', 'debut16.03.2045fin', null);
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', false, '160306', 'debut16.03.06fin', null);
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', true, '160306', 'debut06.03.16fin', null);
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', false, '16032006', 'debut16.03.06fin', null);
	testOptions('D:[debut]DD[.]MMM[.]YYYY[fin]', false, '16032006', 'debut16.MAR.2006fin', null);
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', false, '16/03/63', 'debut16.03.63fin', null);
	testOptions('D:[debut]DD[.]MM[.]YYYY[fin]', false, '16/03/63', 'debut16.03.1963fin', null);
	testOptions('D:[debut]DD[.]MM[.]YYYY[fin]', false, '16/03/45', 'debut16.03.2045fin', null);
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', false, '160306', 'debut16.03.06fin', null);
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', true, '160306', 'debut06.03.16fin', null);
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', false, '16032006', 'debut16.03.06fin', null);
	testOptions('D:[debut]DD[.]MMM[.]YYYY[fin]', false, '16032006', 'debut16.MAR.2006fin', null);
	testOptions('D:[A Grenoble, le ]DD[ ]9M[ ]YYYY', false, '14032013', "A Grenoble, le 14 Mars      2013", null);
	testOptions('D:[Le ]DD[ du mois de ]MMMMMMMM', false, '12092013', "Le 12 du mois de Septembr", null);
});

test("date with missing components", 60, function() {
	testOptions('DZ:YYYY', true, '2017', '2017', null);
	var opt={ datePivot: 1950 };
	testOptions('DZ:DD[/]MM[/]YY', false, '', '  /  /  ', opt);
	testOptions('DZ:DD[/]MM[/]YY', true, '', '  /  /  ', opt);
	testOptions('DZ:DD[/]MMM[/]YY', false, '', '  /   /  ', opt);
	testOptions('DZ:DD[/]MMM[/]YY', true, '', '  /   /  ', opt);
	testOptions('DZ:DD[/]MMMMM[/]YYYY', false, '', '  /     /    ', opt);
	testOptions('DZ:DD[/]MMMMM[/]YYYY', true, '', '  /     /    ', opt);
	testOptions('DZ:DD[/]MM', false, '', '  /  ', opt);
	testOptions('DZ:DD[/]MM', true, '', '  /  ', opt);
	testOptions('DZ:DD[/]MM[/]YY', true, '15991231', '  /  /  ', opt);
	testOptions('DZ:DD[/]MM', true, '15991231', '  /  ', opt);
	testOptions('DZ:MMM[-]YYYY', false, '0506', 'MAY-2006', opt);
	opt={ dateSep: '-', dateOrder:'YMD'};
	testOptions('DZ:YY[-]MM[-]DD', false, '', '  -  -  ', opt);
	testOptions('DZ:YY[-]MM[-]DD', true, '', '  -  -  ', opt);
	testOptions('DZ:YY[-]MM', false, '', '  -  ', opt);
	testOptions('DZ:YY[-]MM', true, '', '  -  ', opt);
	testOptions('DZ:MM[-]DD', false, '', '  -  ', opt);
	testOptions('DZ:MM[-]DD', true, '', '  -  ', opt);
	testOptions('DZ:YY[-]MM[-]DD', true, '15991231', '  -  -  ', opt);
	testOptions('DZ:YY[-]MM', false, '0605', '06-05', opt);
	opt={ dateSep: '_', dateOrder:'MDY'};
	testOptions('DZ:DD[_]MM[_]YY', false, '', '  _  _  ', opt);
	testOptions('DZ:DD[_]MM[_]YY', true, '', '  _  _  ', opt);
	testOptions('DZ:DD[_]MM', false, '', '  _  ', opt);
	testOptions('DZ:DD[_]MM', true, '', '  _  ', opt);
	testOptions('DZ:MM[_]YY', false, '', '  _  ', opt);
	testOptions('DZ:MM[_]YY', true, '', '  _  ', opt);
	testOptions('DZ:MM[_]DD[_]YY', true, '15991231', '  _  _  ', opt);
	testOptions('DZ:MM[-]DD[-]YYYY', false, '05/17/2006', '05-17-2006', opt);
	testOptions('DZ:MMM', false, '05/17/2006', 'MAY', opt);
	testOptions('DZ:MMM[-]YYYY', false, '0506', 'MAY-2006', opt);
});

test("number basic", 48, function() {
	testOptions('N:9.4#', false, '53,1336', '53,1336', null);
	testOptions('NPzc:9.2#', false, '5,4', '5,40', null);
	testOptions('NPzc:9.2#', false, '5,456789', '5,45', null);
	testOptions('NPzc:9.2#', false, '5.4', '5,40', null);
	testOptions('NPzc:9.2#', true, '5.4', '5,40', null);
	testOptions('NPzc:9.2#', false, '5.456789', '5,45', null);
	testOptions('NPzc:9.2#', true, '5.456789', '5,45', null);
	testOptions('NPzc:9.2#', false, '4349,012945123455656560000000000000000000000000000000', '4349,01', null);
	testOptions('NPzc:9.2#', false, '4349,250000000000000000000000000000000', '4349,25', null);
	testOptions('NPzc:9.2#', false, '33.333333333333333333333333333333', '33,33', null);
	testOptions('NPzc:9.2#', true, '33.333333333333333333333333333333', '33,33', null);
	testOptions('NPzc:9.2#', false, '33.33333', '33,33', null);
	testOptions('NPzc:9.2#', true, '33.33333', '33,33', null);
	testOptions('NPzc:9.2#', false, '33.333333333333333333333333333333', '33,33', null);
	testOptions('NPzc:9.2#', true, '33.333333333333333333333333333333', '33,33', null);
	testOptions('NPzc:9.2#', false, '33.33333', '33,33', null);
	testOptions('NPzc:9.2#', true, '33.33333', '33,33', null);
	testOptions('NPzc:9.2#', false, '4,053293300806905610808782135485', '4,05', null);
	testOptions('NPzc:9.2#', false, '4.053293300806905610808782135485', '4,05', null);
	testOptions('NPzc:9.2#', true, '4.053293300806905610808782135485', '4,05', null);
	testOptions('N+z:12.5', false, '123456789016,005', '123456789016,00500', null);
	testOptions('N+z:12.5', false, '123456789016,00565056', '123456789016,00565', null);
	testOptions('NZ:11.2', false, '150', '150,00', null);
	testOptions('NZ:11.2', true, '150', '150,00', null);
});

test("number F", 24, function() {
	testOptions('N+z3:11F', false, '0,7', '0,7', null);
	testOptions('N+z3:11F', false, '0.7', '0,7', null);
	testOptions('N+z3:11F', true, '0.7', '0,7', null);
	testOptions('Nv+z3:11F', false, '0,7', '0,7', null);
	testOptions('Nv+z3:11F', false, '0.7', '0,7', null);
	testOptions('Nv+z3:11F', true, '0.7', '0,7', null);
	testOptions('N+z3:11F', false, '0,256', '0,256', null);
	testOptions('N+z3:11F', false, '0.256', '0,256', null);
	testOptions('N+z3:11F', true, '0.256', '0,256', null);
	testOptions('Nv+z3:11F', false, '0,256', '0,256', null);
	testOptions('Nv+z3:11F', false, '0.256', '0,256', null);
	testOptions('Nv+z3:11F', true, '0.256', '0,256', null);
});

test("number z3 (thousands sep)", 16, function() {
	testOptions('N+z3:5.2#', false, '13', '13,00', null);
	testOptions('N+z3:5.2#', true, '13', '13,00', null);
	testOptions('Nv+z3:5.2#', false, '13,00', '13,00', null);
	testOptions('N+z3:15.5#', false, '12345678911,03205', '12 345 678 911,03205', null);
	testOptions('N+z3:11.2#', false, '345678911,88', '345 678 911,88', null);
	testOptions('N+z3:11.2#', false, '1234567911,88', '1 234 567 911,88', null);
	testOptions('N3:9.2#', false, '+1234567,30', '1 234 567,30', null);
	testOptions('N+z3:11.2#', false, '1234567911,88', '1 234 567 911,88', null);
});

test("number - (leading sign)", 12, function() {
	testOptions('N:5.2#', false, '10,5', '10,50', null);
	testOptions('N-D0:3#', false, '+150', '150+', null);
	testOptions('N-D0:3#', true, '+150', '150+', null);
	testOptions('N-:4.1#', false, '+150,3', '+150,3', null);
	testOptions('N-:4#', false, '+150', '+150', null);
	testOptions('N-:4#', true, '+150', '+150', null);
});

test("number * (filler)", 4, function() {
	testOptions('N+D*:####2.##3#', false, '+150.23', '***150,23000', null);
	testOptions('N+D*:####2.##3#', true, '+150.23', '***150,23000', null);
});

test("number N alone", 18, function() {
	testOptions('N:7.2#', false, '', '0,00', null);
	testOptions('N:7.2#', true, '', '0,00', null);
	testOptions('N:7.2#', false, '85', '85,00', null);
	testOptions('N:7.2#', true, '85', '85,00', null);
	testOptions('N:6.2#', false, '+23345,3', '23345,30', null);
	testOptions('N:7.2#', false, '-23345.3', '-23345,30', null);
	testOptions('N:7.2#', true, '-23345.3', '-23345,30', null);
	testOptions('N:7.2#', false, '-23345.3', '-23345,30', null);
	testOptions('N:7.2#', true, '-23345.3', '-23345,30', null);
});

test("number z and v with . input", 28, function() {
	testOptions('Nz:7.6#', false, '.', '0,000000', null);
	testOptions('Nz:7.6#', true, '.', '0,000000', null);
	testOptions('Nz0:7.6#', false, '.', '0000000,000000', null);
	testOptions('Nz0:7.6#', true, '.', '0000000,000000', null);
	testOptions('Nzv:7.6#', false, '.', '0,000000', null);
	testOptions('Nzv:7.6#', true, '.', '0,000000', null);
	testOptions('Nz0v:7.6#', false, '.', '0000000,000000', null);
	testOptions('Nz0v:7.6#', true, '.', '0000000,000000', null);
	testOptions('Nzv1:7.6#', false, '.', '0,000000', null);
	testOptions('Nzv1:7.6#', true, '.', '0,000000', null);
	testOptions('Nzv2:7.6#', false, '.', '0,000000', null);
	testOptions('Nzv2:7.6#', true, '.', '0,000000', null);
	testOptions('N:7.6#', false, '.', '0,000000', null);
	testOptions('N:7.6#', true, '.', '0,000000', null);
});

test("number z and v with 0 inputs", 40, function() {
	testOptions('Nz:7.6#', false, '+0', '0,000000', null);
	testOptions('Nz:7.6#', true, '+0', '0,000000', null);
	testOptions('N:7.6#', false, '+0', '0,000000', null);
	testOptions('N:7.6#', true, '+0', '0,000000', null);
	testOptions('Nz:7.6#', false, '0.0', '0,000000', null);
	testOptions('Nz:7.6#', true, '0.0', '0,000000', null);
	testOptions('N:7.6#', false, '0.0', '0,000000', null);
	testOptions('N:7.6#', true, '0.0', '0,000000', null);
	testOptions('Nz:7.6#', false, '0', '', null);
	testOptions('Nz:7.6#', true, '0', '', null);
	testOptions('N:7.6#', false, '0', '0,000000', null);
	testOptions('N:7.6#', true, '0', '0,000000', null);
	testOptions('Nv2z:7.6#', false, '0', '', null);
	testOptions('Nv2z:7.6#', true, '0', '', null);
	testOptions('Nv2:7.6#', false, '0', '0,000000', null);
	testOptions('Nv2:7.6#', true, '0', '0,000000', null);
	testOptions('Nz:7F', false, '0', '', null);
	testOptions('Nz:7F', true, '0', '', null);
	testOptions('N:7F', false, '0', '0', null);
	testOptions('N:7F', true, '0', '0', null);
});

test("number z and v with spaces input", 48, function() {
	testOptions('N0v2z:7.6#', false, '              ', '', null);
	testOptions('N0v2z:7.6#', true, '              ', '', null);
	testOptions('N0v2:7.6#', false, '              ', '0000000,000000', null);
	testOptions('N0v2:7.6#', true, '              ', '0000000,000000', null);
	testOptions('Nv2z:7.6#', false, '              ', '', null);
	testOptions('Nv2z:7.6#', true, '              ', '', null);
	testOptions('Nv2:7.6#', false, '              ', '0,000000', null);
	testOptions('Nv2:7.6#', true, '              ', '0,000000', null);
	testOptions('Nz0:7.6#', false, '              ', '', null);
	testOptions('Nz0:7.6#', true, '              ', '', null);
	testOptions('N0:7.6#', false, '              ', '0000000,000000', null);
	testOptions('N0:7.6#', true, '              ', '0000000,000000', null);
	testOptions('Nz:7.6#', false, '              ', '', null);
	testOptions('Nz:7.6#', true, '              ', '', null);
	testOptions('N:7.6#', false, '              ', '0,000000', null);
	testOptions('N:7.6#', true, '              ', '0,000000', null);
	testOptions('Nv2z:7.6#', false, '  ', '', null);
	testOptions('Nv2z:7.6#', true, '  ', '', null);
	testOptions('Nv2:7.6#', false, '  ', '0,000000', null);
	testOptions('Nv2:7.6#', true, '  ', '0,000000', null);
	testOptions('Nz:7.6#', false, '  ', '', null);
	testOptions('Nz:7.6#', true, '  ', '', null);
	testOptions('N:7.6#', false, '  ', '0,000000', null);
	testOptions('N:7.6#', true, '  ', '0,000000', null);
});

test("number z and v with empty input", 40, function() {
	testOptions('Nv2z:7.6#', false, '', '', null);
	testOptions('Nv2z:7.6#', true, '', '', null);
	testOptions('Nv2:7.6#', false, '', '0,000000', null);
	testOptions('Nv2:7.6#', true, '', '0,000000', null);
	testOptions('Nz:7.6#', false, '', '', null);
	testOptions('Nz:7.6#', true, '', '', null);
	testOptions('N:7.6#', false, '', '0,000000', null);
	testOptions('N:7.6#', true, '', '0,000000', null);
	testOptions('Nv2z:7F', false, '', '', null);
	testOptions('Nv2z:7F', true, '', '', null);
	testOptions('Nv2:7F', false, '', '0', null);
	testOptions('Nv2:7F', true, '', '0', null);
	testOptions('N:7.6#', false, '', '0,000000', {zOn: true});
	testOptions('N:7.6#', true, '', '0,000000', {zOn: true});
	testOptions('Nz:7.6#', false, '', '', {zOn: true});
	testOptions('Nz:7.6#', true, '', '', {zOn: true});
	testOptions('N:7.6#', false, '', '0,000000', null);
	testOptions('N:7.6#', true, '', '0,000000', null);
	testOptions('Nz:7.6#', false, '', '', null);
	testOptions('Nz:7.6#', true, '', '', null);
});

test("number z and v with lots of zeros in input", 8, function() {
	testOptions('Nv2z0:7.6#', false, '0000000.000000', '0000000,000000', null);
	testOptions('Nv2z0:7.6#', true, '0000000.000000', '0000000,000000', null);
	testOptions('N0v2:7.6#', false, '0000000.000000', '0000000,000000', null);
	testOptions('N0v2:7.6#', true, '0000000.000000', '0000000,000000', null);
});

test("string > tests", 20, function() {
	testOptions('KT:35X>25X', false, '((1-(C6/(C5+(C5=0))))*100)/(C7+(C7=0))', '((1-(C6/(C5+(C5=0))))*100)/(C7+(C7=0))', null);
	testOptions('KT:35X>25X', true, '((1-(C6/(C5+(C5=0))))*100)/(C7+(C7=0))', '((1-(C6/(C5+(C5=0))))*100)/(C7+(C7=0))', null);
	testOptions('KTv1:35X>25X', false, '((1-(C6/(C5+(C5=0))))*100)/(C7+(C7=0))', '((1-(C6/(C5+(C5=0))))*100)/(C7+(C7=0))', null);
	testOptions('KTv1:35X>25X', true, '((1-(C6/(C5+(C5=0))))*100)/(C7+(C7=0))', '((1-(C6/(C5+(C5=0))))*100)/(C7+(C7=0))', null);
	testOptions('K:10X>30X', false, 'abcdefghijklmnopqrst12345~~', 'abcdefghijklmnopqrst12345~~', null);
	testOptions('K:10X>30X', true, 'abcdefghijklmnopqrst12345~~', 'abcdefghijklmnopqrst12345~~', null);
	testOptions('K:>10X', false, 'abcdefghijklmnopqrst12345~~', 'abcdefghij', null);
	testOptions('K:>10X', true, 'abcdefghijklmnopqrst12345~~', 'abcdefghij', null);
	testOptions('K:[Debut]10X[Milieu]>20X[Fin]', false, 'abcdefghijklmnopqrst12345~~', 'DebutabcdefghijMilieuklmnopqrst12345~~   Fin', null);
	testOptions('K:[Debut]10X[Milieu]>20X[Fin]', true, 'abcdefghijklmnopqrst12345~~', 'DebutabcdefghijMilieuklmnopqrst12345~~   Fin', null);
});

test("string padding tests", 36, function() {
	testOptions('K:2#[.az]2#[.zeaaz]2#[.zae]2#[.eaz]2#[ zaez]', false, '115566', '11.az55.zeaaz66.zae  .eaz   zaez', null);
	testOptions('K:2#[.az]2#[.zeaaz]2#[.zae]2#[.eaz]2#[ zaez]', true, '115566', '11.az55.zeaaz66.zae  .eaz   zaez', null);
	testOptions('K:11X', false, ' A ', ' A', null);
	testOptions('K:11X', true, ' A ', ' A', null);
	testOptions('Kv1:11X', false, ' A ', ' A', null);
	testOptions('Kv1:11X', true, ' A ', ' A', null);
	testOptions('K:2#[.]2#[.]2#[.]2#[.]2#[ ]', false, '115566', '11.55.66.  .', null);
	testOptions('K:2#[.]2#[.]2#[.]2#[.]2#[ ]', true, '115566', '11.55.66.  .', null);
	testOptions('Kv2:10X', false, '', '', null);
	var options= {  vOn: false };
	testOptions('K:10X', false, '', '          ', {  vOn: false });
	testOptions('K:10X', false, 'abcde', 'abcde     ', {  vOn: false });
	testOptions('K:10X', false, ' abcde ', ' abcde    ', {  vOn: false });
	testOptions('Kv2:10X', false, 'abcde', 'abcde', null);
	testOptions('Kv2:10X', false, ' rr rr  ', 'rr rr', null);
	testOptions('Kv2:10X', false, '          ', '', null);
	testOptions('Kv2:10X', false, ' abcde ', 'abcde', null);
	testOptions('Kv2:[    ]10X[    ]', false, ' abcde ', 'abcde', null);
	testOptions('K:[    ]10X[    ]', false, ' abcde ', '     abcde', null);
});

test("string case conversions", 58, function() {
	var options= {  vOn: false };
	testOptions('K:3A', false, 'ABC', 'ABC', {  vOn: false });
	testOptions('K:3A', false, 'ABC', 'ABC', null);
	testOptions('K:3A', false, 'ABz', 'ABZ', null);
	testOptions('KTD:20X', false, 'if0 if1 if2 if3', 'if0 if1 if2 if3', null);
	testOptions('K:10X', false, '', '', null);
	testOptions('Kz:10X', false, '', '', null);
	testOptions('K:10A', false, '', '', null);
	testOptions('Kz:10A', false, '', '', null);
	testOptions('K:10A', false, '  ', '', null);
	testOptions('Kz:10A', false, '  ', '', null);
	testOptions('K:2B', false, 'abc', 'AB', null);
	testOptions('K:2B', true, 'abc', 'AB', null);
	testOptions('K:2B', false, 'aB', 'AB', null);
	testOptions('K:2B', true, 'aB', 'AB', null);
	testOptions('K:2B', false, 'AB', 'AB', null);
	testOptions('K:2B', true, 'AB', 'AB', null);
	testOptions('KA:2B', false, 'AB', 'AB', null);
	testOptions('KA:2B', true, 'AB', 'AB', null);
	testOptions('KAv2:10X', false, '   a  ', 'a', null);
	testOptions('KAv2:10X', true, '   a  ', 'a', null);
	testOptions('KAv2:10X', false, '     ', '', null);
	testOptions('KAv2:10X', true, '     ', '', null);
	testOptions('KA:10X', false, 'A', 'A', null);
	testOptions('KA:10X', true, 'A', 'A', null);
	testOptions('K:2B', false, 'abc', 'AB', null);
	testOptions('K:2B', true, 'abc', 'AB', null);
	testOptions('K:5X', false, 'abcdefghijk', 'abcde', null);
	testOptions('K:5X', true, 'abcdefghijk', 'abcde', null);
	testOptions('KTD:A11u', true, 'BONJOUR', 'BONJOUR', null);

});

test("string L option", 12, function() {
	testOptions('KL:[debut]2B[.]2#[.]3A[.]3#[.]4a[fin]', false, 'a612bCd345eFgH', 'debutA6.12.BCD.345.efghfin', null);
	testOptions('KL:[debut]2B[.]2#[.]3A[.]3#[.]4a[fin]', true, 'a612bCd345eFgH', 'debutA6.12.BCD.345.efghfin', null);
	var opt= { dateSep: '_', datePivot: 1950 };
	testOptions('KL:[debut]2B[.]2#[.]3A[.]3#[.]4a[fin]', false, 'a612bCd345eFgH', 'debutA6.12.BCD.345.efghfin', opt);
	testOptions('KL:[debut]2B[.]2#[.]3A[.]3#[.]4a[fin]', true, 'a612bCd345eFgH', 'debutA6.12.BCD.345.efghfin', opt);
	testOptions('KL:[debut]2B[.]2#[.]3A[.]3#[.]4a[.\'d\']2d[fin]', false, 'a612bCd345eFgH/$', 'debutA6.12.BCD.345.efgh.\'d\'/$fin', opt);
	testOptions('KL:[debut]2B[.]2#[.]3A[.]3#[.]4a[.\'d\']2d[fin]', true, 'a612bCd345eFgH/$', 'debutA6.12.BCD.345.efgh.\'d\'/$fin', opt);
});

test("string c directive", 4, function() {
	var opt= { dateSep: '_', datePivot: 1950 };
	testOptions('K:[c=\']3c[\' - d=\']3d[\' - e=\']3e[\'- f=\']4f[\' - u=\']3u[\' - v=\']3v[\']', false, 'A2/3-?3P_*_~Z2E__Z-', 'c=\'A2/\' - d=\'3-?\' - e=\'3P_\'- f=\'*_~Z\' - u=\'2E_\' - v=\'_Z-\'', opt);
	testOptions('K:[c=\']3c[\' - d=\']3d[\' - e=\']3e[\'- f=\']4f[\' - u=\']3u[\' - v=\']3v[\']', true, 'A2/3-?3P_*_~Z2E__Z-', 'c=\'A2/\' - d=\'3-?\' - e=\'3P_\'- f=\'*_~Z\' - u=\'2E_\' - v=\'_Z-\'', opt);
});

test("dynamic formats", 2, function() {
	testOptions('K:4p2q', false, 'ab-cDef', 'AB-Cde', { dynFormats: { 
		p: { subType: 'B', complement: '_-'}, 
		q: { subType: 'b', complement: '' }}});
});

false && test("date series 2", 174, function() {
	testSimple('Dz:DD[ ]MMMMMMMMMM[ ]YYYY', false, '20080102', null);
	testSimple('D:DD[/]MM[/]YY', false, '', null);
	testSimple('D:DD[/]MM[/]YY', true, '', null);
	testSimple('D:DD[/]MM[/]YY', false, '31/04/04', null);
	testSimple('D:DD[/]MM[/]YY', false, '42/04/04', null);
	testSimple('D:DD[/]MM[/]YYYY', true, '01011601', null);
	testSimple('D:DD[/]MM[/]YYYY', false, '01251601', null);
	testSimple('D:DD[/]MM[/]YYYY', true, '01251601', null);
	testSimple('D:DD[/]MM[/]YYYY', false, '631001', null);
	testSimple('D:DD[/]MM[/]YYYY', true, '011000002', null);
	testSimple('D:DD[/]MM[/]YY', false, '', null);
	testSimple('D:DD[/]MM[/]YY', true, '', null);
	testSimple('Nz:7.3#', false, '123456789', null);
	testSimple('Nz:7.3#', true, '123456789', null);
	testSimple('D:DD[/]MM[/]YY', false, '2/3/6', '02/03/06');
	testSimple('D:DD[/]MM[/]YY', true, '2/3/6', '06/03/02');
	testSimple('D:DD[/]MM[/]YY', false, '', null);
	testSimple('D:DD[/]MM[/]YY', true, '', null);
	testSimple('DZ:DD[/]MM[/]YY', false, '15991231', null);
	testSimple('D:DD[/]MM[/]YY', false, '15991231', null);
	testSimple('D:DD[/]MM[/]YY', true, '15991231', null);
	testSimple('D:DD[/]MM[/]YY', false, '', null);
	testSimple('D:DD[/]MM[/]YY', true, '', null);
	testSimple('D:DD[/]MM[/]YY', false, '281000', '28/10/00');
	testSimple('D:DD[/]MM[/]YY', true, '281000', null);
	testSimple('D:DD[/]MM[/]YY', false, '20001201', null);
	testSimple('DZ:DD[/]MM[/]YY', false, '15991231', null);
	testSimple('DzZ:DD[/]MM[/]YY', false, '15991231', null);
	testSimple('DzZ:DD[/]MM[/]YY', true, '15991231', '');
	testSimple('Dz:DD[/]MM[/]YY', false, '15991231', null);
	testSimple('Dz:DD[/]MM[/]YY', true, '15991231', null);
	testSimple('D:DD[/]MM[/]YY', false, '15991231', null);
	testSimple('D:DD[/]MM[/]YY', true, '15991231', null);
	testSimple('D:DD[/]MM[/]YY', false, '20/1', null);
	testSimple('D:DD[/]MM[/]YY', true, '20/1', null);
	testSimple('D:DD[/]MM[/]YY', false, '20/02', null);
	testSimple('D:DD[/]MM[/]YY', false, '//04', null);
	testSimple('D:DD[/]MM[/]YY', true, '//04', null);
	testSimple('D:[debut]DD[.]MMMMMMMMM[.]YYYY[fin]', false, '20060509', null);
	testSimple('D:[debut]DD[.]MMMMMMMMM[.]YYYY[fin]', true, '20060509', 'debut09.Mai      .2006fin');
	testSimple('D:[debut]YYYY[SepYear]MM[SepMonth]DD[fin]', false, '4261', null);
	testSimple('D:[debut]YYYY[SepYear]MM[SepMonth]DD[fin]', true, '4261', null);
	testSimple('D:[debut]DD[.]MM[.]YY[fin]', false, '14120', 'debut14.12.00fin');
	testSimple('D:[debut]DD[.]MM[.]YY[fin]', true, '14120', null);
	testSimple('D:[debut]DD[.]MM[.]YY[fin]', false, '16/03', null);
	testSimple('D:[debut]DD[.]MM[.]YY[fin]', true, '16/03', null);
	testSimple('D:[debut]DD[.]MM[.]YY[fin]', true, '16/03/63', null);
	testSimple('D:[debut]DD[.]MM[.]YYYY[fin]', true, '16/03/63', null);
	testSimple('D:[debut]DD[.]MM[.]YYYY[fin]', true, '16/03/45', null);
	testSimple('D:[debut]DD[.]MM[.]YY[fin]', true, '16032006', null);
	testSimple('D:[debut]DD[.]MMM[.]YYYY[fin]', true, '16032006', null);
	testSimple('D:[debut]DD[.]MMMM[.]YYYY[fin]', false, '16032006', 'debut16.Mars.2006fin');
	testSimple('D:[debut]DD[.]MMMM[.]YYYY[fin]', true, '16032006', null);
	testSimple('D:[debut]DD[.]MMMMMMMMM[.]YYYY[fin]', false, '16032006', 'debut16.Mars     .2006fin');
	testSimple('D:[debut]DD[.]MMMMMMMMM[.]YYYY[fin]', true, '16032006', null);
	testSimple('D:[debut]DD[.]MMMMMMMMM[.]YYYY[fin]', false, '20060509', null);
	testSimple('D:[debut]DD[.]MMMMMMMMM[.]YYYY[fin]', true, '20060509', 'debut09.Mai      .2006fin');
	testSimple('D:DD[/]MMMMMMMMMM[/]YY', true, '19620517', '17/Mai       /62');
	testSimple('D:DD[/]MMMMMMMMMM[/]YY', false, '17051962', '17/Mai       /62');
	testSimple('D:DD[/]MMMMMMMMMM[/]YYYY', false, '170562', '17/Mai       /1962');
	testSimple('D:DD[/]MMMMMMMMMM[/]YYYY', false, '17562', null);
	testSimple('D:DD[/]MMMMMMMMMM[/]YYYY', false, '1751962', null);
	testSimple('D:[debut]YYYY[SepYear]MM[SepMonth]DD[fin]', false, '4261', null);
	testSimple('D:[debut]YYYY[SepYear]MM[SepMonth]DD[fin]', true, '4261', null);
	testSimple('D:[debut]DD[.]MM[.]YY[fin]', false, '14120', 'debut14.12.00fin');
	testSimple('D:[debut]DD[.]MM[.]YY[fin]', true, '14120', null);
	testSimple('D:[debut]DD[.]MM[.]YY[fin]', false, '16/03', null);
	testSimple('D:[debut]DD[.]MM[.]YY[fin]', true, '16/03', null);
	testSimple('D:[debut]DD[.]MM[.]YY[fin]', true, '16/03/63', null);
	testSimple('D:[debut]DD[.]MM[.]YYYY[fin]', true, '16/03/63', null);
	testSimple('D:[debut]DD[.]MM[.]YYYY[fin]', true, '16/03/45', null);
	testSimple('D:[debut]DD[.]MM[.]YY[fin]', true, '16032006', null);
	testSimple('D:[debut]DD[.]MMM[.]YYYY[fin]', true, '16032006', null);
	testSimple('D:[debut]DD[.]MMMM[.]YYYY[fin]', false, '16032006', 'debut16.Mars.2006fin');
	testSimple('D:[debut]DD[.]MMMM[.]YYYY[fin]', true, '16032006', null);
	testSimple('D:[debut]DD[.]MMMMMMMMM[.]YYYY[fin]', false, '16032006', 'debut16.Mars     .2006fin');
	testSimple('D:[debut]DD[.]MMMMMMMMM[.]YYYY[fin]', true, '16032006', null);
	testSimple('D:[debut]DD[.]MMMMMMMMM[.]YYYY[fin]', false, '20060509', null);
	testSimple('D:[debut]DD[.]MMMMMMMMM[.]YYYY[fin]', true, '20060509', 'debut09.Mai      .2006fin');
	testSimple('D:DD[/]MMMMMMMMMM[/]YY', true, '19620517', '17/Mai       /62');
	testSimple('D:DD[/]MMMMMMMMMM[/]YY', false, '17051962', '17/Mai       /62');
	testSimple('D:DD[/]MMMMMMMMMM[/]YYYY', false, '170562', '17/Mai       /1962');
	testSimple('D:DD[/]MMMMMMMMMM[/]YYYY', false, '17562', null);
	testSimple('D:DD[/]MMMMMMMMMM[/]YYYY', false, '1751962', null);
	testSimple('DZ:DD[/]MM[/]YYYY', false, '1754', null);
	testSimple('DZ:DD[/]MM[/]YYYY', false, '444', null);
	testSimple('DZ:MM[-]DD', false, '51', null);
	testSimple('DZ:DD[/]MM', true, '1705', null);
	testSimple('DZ:MM[/]DD', false, '1705', '05/17');
	testSimple('DZ:DD[/]YYYY', false, '1706', null);
	testSimple('DZ:YYYY', false, '61', '1961');
	testSimple('DZ:YYYY', true, '61', null);
	testSimple('DZ:YYYY', false, '19610505', '1961');
	testSimple('DZ:YYYY', true, '19610505', '1961');
	testSimple('DZ:YYYY', false, '17', '2017');
	testSimple('DZ:YYYY', true, '17', null);
	testSimple('DZ:YYYY', false, '2017', '2017');
	testSimple('Dz:DD[/]MM[/]YY', false, '', null);
	testSimple('D:DD[/]MM[/]YY', false, '', null);
	testSimple('D:DD[/]MM[/]YY', true, '', null);
	testSimple('Dz:DD[/]MM[/]YY', false, '', null);
	testSimple('Dz:DD[/]MM[/]YY', true, '', null);
	testSimple('DZz:DD[/]MM[/]YY', false, '', '');
	testSimple('DZz:DD[/]MM[/]YY', true, '', '');
	testSimple('DZz:DD[/]MMM[/]YY', false, '', '');
	testSimple('DZz:DD[/]MMM[/]YY', true, '', '');
	testSimple('DZz:DD[/]MMMMM[/]YYYY', false, '', '');
	testSimple('DZz:DD[/]MMMMM[/]YYYY', true, '', '');
	testSimple('DZz:DD[/]MM', false, '', '');
	testSimple('DZz:DD[/]MM', true, '', '');
	testSimple('DZz:DD[/]MM[/]YY', true, '15991231', '');
	testSimple('DZz:DD[/]MMM[/]YY', true, '15991231', '');
	testSimple('DZz:DD[/]MM', true, '15991231', '');
	testSimple('DZ:MM[-]DD[-]YYYY', false, '17/05/2006', '05-17-2006');
	testSimple('DZ:MMM[-]YYYY[-]DD', false, '17/05/2006', 'MAY-2006-17');
	testSimple('DZ:MMM', false, '17/05/2006', null);
	testSimple('DZ:MMM', false, '05', 'MAY');
	testSimple('DZ:MMM', false, '5', 'MAY');
	testSimple('DZ:YYYY', false, '2006', '2006');
	testSimple('DZ:YYYY', false, '6', '2006');
	testSimple('DZ:YY[-]MM', false, '052006', '06-05');
	testSimple('DZ:MMM[-]YYYY', false, '052006', 'MAY-2006');
	testSimple('DZ:MMM[-]YYYY', true, '052006', null);
	testSimple('DZ:YY[-]MM', false, '0506', '06-05');
	testSimple('DZz:YY[-]MM[-]DD', false, '', '');
	testSimple('DZz:YY[-]MM[-]DD', true, '', '');
	testSimple('DZz:YY[-]MM', false, '', '');
	testSimple('DZz:YY[-]MM', true, '', '');
	testSimple('DZz:MM[-]DD', false, '', '');
	testSimple('DZz:MM[-]DD', true, '', '');
	testSimple('DZz:YY[-]MM[-]DD', true, '15991231', '');
	testSimple('DZ:MM[-]DD[-]YYYY', false, '2006/05/17', '05-17-2006');
	testSimple('DZ:MMM[-]YYYY[-]DD', false, '2006/05/17', 'MAY-2006-17');
	testSimple('DZ:MMM', false, '2006/05/17', null);
	testSimple('DZ:MMM', false, '05', 'MAY');
	testSimple('DZ:MMM', false, '5', 'MAY');
	testSimple('DZ:YYYY', false, '2006', '2006');
	testSimple('DZ:YYYY', false, '6', '2006');
	testSimple('DZ:YY[-]MM', false, '200605', '06-05');
	testSimple('DZ:MMM[-]YYYY', false, '200605', 'MAY-2006');
	testSimple('DZ:MMM[-]YYYY', false, '0605', 'MAY-2006');
	testSimple('DZz:DD[_]MM[_]YY', false, '', '');
	testSimple('DZz:DD[_]MM[_]YY', true, '', '');
	testSimple('DZ:DD[_]MM', false, '1705', null);
	testSimple('DZ:DD[_]MM', true, '1705', null);
	testSimple('DZ:DD[_]MM', false, '0517', '17_05');
	testSimple('DZ:DD[_]MM', true, '0517', null);
	testSimple('DZ:DD[_]MM', false, '06/13/11', '13_06');
	testSimple('DZ:DD[_]MM', true, '06/13/11', null);
	testSimple('DZ:DD[_]MM[_]YYYY', false, '06/13/11', '13_06_2011');
	testSimple('DZ:DD[_]MM[_]YYYY', true, '06/13/11', null);
	testSimple('DZz:DD[_]MM', false, '', '');
	testSimple('DZz:DD[_]MM', true, '', '');
	testSimple('DZz:MM[_]YY', false, '', '');
	testSimple('DZz:MM[_]YY', true, '', '');
	testSimple('DZz:MM[_]DD[_]YY', true, '15991231', '');
	testSimple('DZ:MMM[-]YYYY[-]DD', false, '05/17/2006', 'MAY-2006-17');
	testSimple('DZ:MMM', false, '05', 'MAY');
	testSimple('DZ:MMM', false, '5', 'MAY');
	testSimple('DZ:YYYY', false, '2006', '2006');
	testSimple('DZ:YYYY', false, '6', '2006');
	testSimple('DZ:YY[-]MM', false, '052006', '06-05');
	testSimple('DZ:MMM[-]YYYY', false, '052006', 'MAY-2006');
	testSimple('DZ:YY[-]MM', false, '0506', '06-05');
	testSimple('DZ:DD[-]MM[-]YYYY', false, '050649', '06-05-2049');
	testSimple('DZ:DD[-]MM[-]YYYY', false, '050650', '06-05-2050');
	testSimple('DZ:DD[-]MM[-]YYYY', false, '050651', '06-05-1951');
	testSimple('DZ:DD[-]MM[-]YYYY', false, '490506', '06-05-2049');
	testSimple('DZ:DD[-]MM[-]YYYY', false, '500506', '06-05-2050');
	testSimple('DZ:DD[-]MM[-]YYYY', false, '510506', '06-05-1951');
	testSimple('DZ:DD[-]MM[-]YYYY', false, '51056', '06-05-1951');
	testSimple('DZ:DD[-]MM[-]YYYY', false, '060549', '06-05-2049');
	testSimple('DZ:DD[-]MM[-]YYYY', false, '060550', '06-05-2050');
	testSimple('DZ:DD[-]MM[-]YYYY', false, '060551', '06-05-1951');

});

false && test("number series 2", 69, function() {
	testSimple('N:9.4#', true, '53,1336', null);
	testSimple('NPzc:9.2#', true, '5,4', null);
	testSimple('NPzc:9.2#', true, '5,456789', null);
	testSimple('NPzc:9.2#', true, '4349,012945123455656560000000000000000000000000000000', null);
	testSimple('NPzc:9.2#', true, '4349,250000000000000000000000000000000', null);
	testSimple('NPzc:9.2#', true, '4,053293300806905610808782135485', null);
	testSimple('N3*:7.3#', false, '5,4', '* *** **5,400');
	testSimple('N3*:7.3#', true, '5,4', null);
	testSimple('N+z:11F', false, '000123456789016,005', null);
	testSimple('N+z:11F', true, '000123456789016,005', null);
	testSimple('N+z:11F', false, '00012345678,005', '12345678,005');
	testSimple('N+z:11F', true, '00012345678,005', null);
	testSimple('N+z:12.5', true, '123456789016,005', null);
	testSimple('N+z:12.5', true, '123456789016,00565056', null);
	testSimple('N:[Debut]3[abc].2#[Fin]', false, '150', 'Debut150abc,00Fin');
	testSimple('N:[Debut]3[abc].2#[Fin]', true, '150', 'Debut150abc,00Fin');
	testSimple('N+z3:11F', true, '0,7', null);
	testSimple('Nv+z3:11F', true, '0,7', null);
	testSimple('N+z3:11F', true, '0,256', null);
	testSimple('Nv+z3:11F', true, '0,256', null);
	testSimple('Nv+z3:5.2#', true, '13,00', null);
	testSimple('N3z:14#', false, '14 322', '14 322');
	testSimple('N3z:14#', true, '14 322', null);
	testSimple('N+3zv*:14.0#', false, '14322', '** *** *** *14 322');
	testSimple('N+3zv*:14.0#', true, '14322', '** *** *** *14 322');
	testSimple('N-3z:14.0#', false, '14322', '+14 322');
	testSimple('N-3z:14.0#', true, '14322', '+14 322');
	testSimple('N-3zv1:14.0#', false, '14322', '+14 322');
	testSimple('N-3zv1:14.0#', true, '14322', '+14 322');
	testSimple('N3z:14.0#', false, '14322', '14 322');
	testSimple('N3z:14.0#', true, '14322', '14 322');
	testSimple('N3zv1:14.0#', false, '14322', '14 322');
	testSimple('N3zv1:14.0#', true, '14322', '14 322');
	testSimple('N+z3:11.2#', true, '345678911,88', null);
	testSimple('N-D0:[debut]####8.[Fin]##5#[Fin]', false, '+21150,213', 'debut000000021150,Fin2130000+Fin');
	testSimple('N-D0:[debut]####8.[Fin]##5#[Fin]', true, '+21150,213', null);
	testSimple('N-D0:3.0#', false, '+150', '150+');
	testSimple('N-D0:3.0#', true, '+150', '150+');
	testSimple('N-D0:0.6#', false, '+150,123', ',123000+');
	testSimple('N-D0:0.6#', true, '+150,123', null);
	testSimple('N-0:0.6#', false, '+150,123', '+,123000');
	testSimple('N-0:0.6#', true, '+150,123', null);
	testSimple('N-:4.1#', true, '+150,3', null);
	testSimple('N-:4.0#', false, '+150', '+150');
	testSimple('N-:4.0#', true, '+150', '+150');
	testSimple('N-D0:[debut]####2.[Fin]##3#[Fin]', false, '+150,23', 'debut000150,Fin23000+Fin');
	testSimple('N-D0:[debut]####2.[Fin]##3#[Fin]', true, '+150,23', null);
	testSimple('N-:[debut]####2.[Fin]##3#[Fin]', false, '+150,23', 'debut+150,Fin23000Fin');
	testSimple('N-:[debut]####2.[Fin]##3#[Fin]', true, '+150,23', null);
	testSimple('N3:9.2#', true, '+1234567,30', null);
	testSimple('N:6.2#', true, '+23345,3', null);
	testSimple('N+-AD0z53:5.2#', false, '-23345.3', null);
	testSimple('N+-AD0z53:5.2#', true, '-23345.3', null);
	testSimple('N+z3:11.2#', true, '1234567911,88', null);
	testSimple('N+z3*:11.2#', false, '150,88', '** *** *** 150,88');
	testSimple('N+z3*:11.2#', true, '150,88', null);
	testSimple('N+z3*:4.2#', false, '150,88', '* 150,88');
	testSimple('N+z3*:4.2#', true, '150,88', null);
	testSimple('N+z30:11.2#', false, '150,88', '00 000 000 150,88');
	testSimple('N+z30:11.2#', true, '150,88', null);
	testSimple('N+z30:4.2#', false, '150,88', '0 150,88');
	testSimple('N+z30:4.2#', true, '150,88', null);
	testSimple('Nz:7.6#', false, '  - 3,2', '-3,200000');
	testSimple('Nz:7.6#', true, '  - 3,2', null);
	testSimple('N+z3:11.2#', true, '1234567911,88', null);
	testSimple('N+z3*:11.2#', false, '150,88', '** *** *** 150,88');
	testSimple('N+z3*:11.2#', true, '150,88', null);
	testSimple('N+z3*:4.2#', false, '150,88', '* 150,88');
	testSimple('N+z3*:4.2#', true, '150,88', null);
});

false && test("string series 2", 23, function() {
	testSimple('K:>10X>30X', false, 'abcdefghijklmnopqrst12345~~', null);
	testSimple('K:>10X>30X', true, 'abcdefghijklmnopqrst12345~~', null);
	testSimple('K:3A', false, 'AB ', null);
	testSimple('K:3A', false, 'AB2', null);
	testSimple('K:3c', false, 'AB ', null);
	testSimple('K:3c', false, 'AA ', null);
	testSimple('K:3c', false, 'AB2', null);
	testSimple('K:3A', false, 'AB ', null);
	testSimple('K:3A', false, 'AB2', null);
	testSimple('K:3c', false, 'AB ', null);
	testSimple('K:3c', false, 'AA ', null);
	testSimple('KTD:20X', false, 'if if1 if2 if3', null);
	testSimple('KTD:20X', false, 'if0 if if2 if3', null);
	testSimple('KT:[if minuscule]15X[IF majuscule]100X[if minuscule]', false, 'if if if if', 'If minusculeif If If If    If majuscule                                                                                                    If minuscule');
	testSimple('KT:100X', false, '\nif vIrEBlC(wstr)=\'\' then\nerrbox("")\nelse\nFoRmat$(\'\',\'\',\'\')\n', '\nIf vireblc(wstr)=\'\' Then\nErrbox("")\nElse\nformat$(\'\',\'\',\'\')\n');
	testSimple('KA:2B', false, 'abc', null);
	testSimple('KA:2B', true, 'abc', null);
	testSimple('KA:2B', false, 'aB', null);
	testSimple('KA:2B', true, 'aB', null);
	testSimple('KA:10a', false, 'A', null);
	testSimple('KA:10a', true, 'A', null);
	testSimple('KL:[debut]2B[.]2#[.]3A[.]3#[.]4a[fin]', false, 'a612bCd345eFgH', 'debutA6.12.CvgDecimal.345.efghfin');
	testSimple('KL:[debut]2B[.]2#[.]3A[.]3#[.]4a[fin]', true, 'a612bCd345eFgH', 'debutA6.12.CvgDecimal.345.efghfin');
});

false && test("misc series", 136, function() {
	testSimple('', false, '012345678901234567890123456789', null);
	testSimple('', true, '012345678901234567890123456789', null);
});

