"use strict";
var locale = require('syracuse-core/lib/locale');
var CvgFormatter = require('syracuse-x3/lib/convergence/types/CvgFormatter').CvgFormatter;
var CvgFormat = require('syracuse-x3/lib/convergence/model/CvgFormat').CvgFormat;
var Cvg = require('syracuse-x3/lib/convergence/model/Cvg').Cvg;

QUnit.module('X3 - Formatter tests');

var SETTINGS = {
	fr: {
		decimalSep: ',',
		dateOrder: 'DMY',
		thousandSep:' ',
		dateSep: '/',
		datePivot: 1957,
		vOn: true, 
		zOn: true,
		skipBadFormat:false
	},
	en: {
		decimalSep: '.',
		dateOrder: 'MDY',
		thousandSep:','	,
		dateSep: '/',
		datePivot: 1957,
		vOn: true, 
		zOn: true,
		skipBadFormat:false
	}
}


function testBasic(lang, fmt, raw, value, expected) {
	testOptions(fmt, raw, value, expected, SETTINGS[lang]);
}

function newFormatter(opts,lang) {
	if (!lang) lang='fr';
	var options={};
	for (var p in SETTINGS[lang]){
		options[p]= SETTINGS[lang][p];
	}
	if (opts){
		for (var p in opts){
			options[p]= opts[p];
		}
	}
	var typeDate = options.dateOrder;
	if (typeDate === "MDY"){
		options.dateOrder = Cvg.FTM_X3DATE_MDY;
	}else if (typeDate === "DMY"){
		options.dateOrder = Cvg.FTM_X3DATE_DMY;
	}else if (typeDate === "YMD"){
		options.dateOrder = Cvg.FTM_X3DATE_YMD;
	}else{
		throw new Error("Date order not supported: "+typeDate);
	}	
	return new CvgFormatter(options);
}
	
function testOptions(fmt, raw, value, expected, opts) {
	var formatter = newFormatter(opts);
	var format = new CvgFormat(fmt)
	var got;
	// Country format D:DD1/DD2/DD3/DD4
	// DD1 : format$("DD1",[1/1/1994])      -> "01/01"
	// DD2 : format$("DD2",[1/1/1994])      -> "01/01/94"
	// DD3 : format$("DD3",[1/1/1994])      -> "01 Janvier 1994 14:38"
	// DD4 : format$("DD4",[1/1/1994])      -> "01 Janvier 1994 14:38:21"
	var isCountryDate=fmt.search(/D:DD[1-4]$/)==0;
	// Add actual format
	if (isCountryDate) fmt+="{" + formatter.getRealFormat(format).format + "}";
	var removeTime=null;
	if(isCountryDate && (fmt[4]=='3' || fmt[4]=='4')){
		// Remove time added at the end before compare 
		removeTime=function (val){
			if (val){
				var p=val.search(/\s[0-9]+:[0-9]+/);
				if (p!=-1){
					val=val.substring(0,p);
				}
			}
			return val;
		}
	}
	try{		
		try {
			got = formatter.formatField(format, value, raw);
			var res=removeTime ? removeTime(got) : got;
			strictEqual(res, expected, fmt + " (raw: '" + raw + "'): '" + value + "' -> '" + got + "'");
			try {
				var parsed = formatter.unformatField(format, res);		
				try {
					var again = formatter.formatField(format, parsed, true);
					again=removeTime ? removeTime(again) : again;
					strictEqual(again, expected, fmt + " (again, parsed= " + parsed + "): '" + value + "' -> '" + got + "'");
				} catch (ex) {
					ok( false,"Ko : formatField Error : fmt:" + fmt + " : value:'" + value + "' :" + ex.message +  " : expected:'" + expected + "'");
				}
			} catch (ex) {
				ok( false,"Ko : unformatField Error : fmt:" + fmt + " : value:'" + value + "' :"+  ex.message +  " : expected:'" + expected + "'");
			}
		} catch (ex) {
			ok( false,"Ko : formatField Error : fmt:" + fmt + " : value:'" + value + "' :" + ex.message +  " : expected:'" + expected + "'");
		}		
	}catch(e){
		console.log(e.stack);
		throw e;
	}
}

function testEditToDisplay(lang, fmt, value, expected, opts, srvVal) {
	var formatter = newFormatter(opts,lang);
	var cmt= fmt[0]=='D' ? " - dateOrder: " + formatter.typeDate() : '';
	try{
		var got=formatter.formatEditToDisplay(new CvgFormat(fmt), value, srvVal);
		strictEqual(got, expected, fmt + " : Edit: " + formatter.getFormatEdit(fmt) +": '" + value + "' -> '" + got + "'" + cmt);
	} catch (ex) {
		ok( false,"Ko : formatEditToDisplay Error : fmt:" + fmt + " : value:'" + value + "' :" + ex.message +  " : expected:'" + expected + "'" + cmt);
	}	
}

function testBadEditToDisplay(lang, fmt, value, message, opts, srvVal) {
	var formatter =newFormatter(opts,lang);
	var cmt= fmt[0]=='D' ? " - dateOrder: " + formatter.typeDate() : '';
	try{
		var got=formatter.formatEditToDisplay(new CvgFormat(fmt), value, srvVal);
		ok( false, fmt + " : Edit: " + formatter.getFormatEdit(fmt) + " : '" + value  + "'->'" + got + "' : formatEditToDisplay Ok : Unexpected valid operation : " + message  + "'" + cmt);
	} catch (ex) {
		ok( true,  fmt + " : Edit: " + formatter.getFormatEdit(fmt) + " : '"  + value + "' : formatEditToDisplay Ko : Error expected : "  + message + " - errMsg: " + ex.message + "'" + cmt);
	}	
}

function testEditFormat(fmt, expected, opts) {
	var editFmt=newFormatter(opts).getFormatEdit(fmt);
	strictEqual(editFmt, expected, fmt + " : Edit: " + editFmt);
}

function testX3ToEditToDisp (lang, fmt, x3Val, dispVal, editVal, opts) {
	var formatter =newFormatter(opts,lang);
	var format = new CvgFormat(fmt)
	var got1,error=false;
	try {
		got1=formatter.formatEdit(format, x3Val, true);
	} catch (ex) {
		console.error(ex);
		got1 = ex.message;
		error=true;
	}	
	strictEqual(got1, editVal, fmt + " : formatEdit - '" + x3Val + "' -> '" + got1 + "'");
	if (error) return;
	var got2;
	try {
		got2=formatter.formatEditToDisplay(format, got1, x3Val);
	} catch (ex) {
		console.error(ex);
		got2 = ex.message;
		error=true;
	}	
	strictEqual(got2, dispVal, fmt + " - formatEditToDisplay - EditFmt[" + formatter.getFormatEdit(fmt) + "] - '" + got1 + "' -> '" + got2 + "'");
	if (error) return;
	var got3;
	try {
		got3=formatter.unformatField(format, got2);
	} catch (ex) {
		console.error(ex);
		got3 = ex.message;
		error=true;
	}	
	strictEqual(got3, x3Val, fmt + " unformatField - '" + got2 + "' -> '" + got3 + "'");
	if (error) return;
}

function testFormatErr(lang, fmt, x3Val, message, strict, opts){
	try {
		var got =newFormatter(opts,lang).formatField( new CvgFormat(fmt), x3Val, true, strict);
		ok( false, fmt + " : '" + x3Val + "'->'" + got + "' : formatField Ok : Unexpected valid operation : " + message);
	}
	catch (e) {
		ok( true, fmt + " : " + x3Val + " : formatField Ko : Error expected : "  + message + " - errMsg: " + e.message);
	}
}

function testUnformatErr(lang, fmt, formatVal, message, strict, opts){
	try {
		var got=newFormatter(opts,lang).unformatField(new CvgFormat(fmt), formatVal, true);
		ok( false, fmt + " : '" + formatVal + "'->'" + got + "' : unformatField ok : Unexpected valid operation : " + message);
	}
	catch (e) {
		ok( true, fmt + " : " + formatVal + " : unformatField Ko : Error expected : "  + message + " - errMsg: " + e.message);
	}
}

function testUnformat(lang,fmt, value, expected, strict, opts) {
	try {
		var got = newFormatter(opts,lang).unformatField(new CvgFormat(fmt), value, strict);
		strictEqual(got, expected, fmt + " : '" + value + "' -> '" + got + "'");
	} catch (ex) {
		ok( false, "Ko : " + fmt + " : " + value + " - unformatField Error : " + ex.message);
	}		
}

function testFormat(lang, fmt, value, expected, raw, strict, opts) {
	try {
		var got = newFormatter(opts,lang).formatField(new CvgFormat(fmt), value, raw, strict);
		strictEqual(got, expected, fmt + " : '" + value + "' -> '" + got + "'");
	} catch (ex) {
		ok( false, "Ko : " + fmt + " : " + value + " - formatField Error : " + ex.message);
	}		
}

asyncTest("init", 1, function() {
	locale.setCurrent(function(err) {
		ok(err == null);
		start();
	}, "fr");
});

test("basic formatting", 64 , function() {	
	testBasic('fr', "K:5X", true, "A", "A");
	// Trim if no comment at end
	testBasic('fr', "K:[x]5X", true, "A", "xA");
	testBasic('fr', "K:[x]5#", true, "1", "x1");
	// fill with whitespaces between 2 comments
	testBasic('fr', "K:[x]5X[y]", true, "A", "xA    y");
	testBasic('fr', "K:[x]5#[y]", true, "22", "x22   y");
	testBasic('fr', "K:5B", true, "ABCDEFGH", "ABCDE");
	testBasic('fr', "Nz:11F", true, "123456789.12", "123456789,12");
	testBasic('fr', "Nz:11F", true, "0.00987654321", "0,0098765432");
	testBasic('fr', "Nz:11F", true, "12345678900", "12345678900");
	testBasic('fr', "Nz:11F", true, "12345.123456", "12345,123456");
	testBasic('fr', "K:5b", false, "MAJUSCULE", "majus");
	testBasic('fr', "K:4X[-]4X[-]4X[-]4X[-]", false, "Cocodd", "Coco-dd  -    -    -");
	testBasic('fr', "K:4X[-]4X[-]4X[-]4X[-]", false, "Cocodd", "Coco-dd  -    -    -");
	testBasic('fr', "K:4X[-]4X[-]4X[-]4X[-]", false, "Coco    ", "Coco-    -    -    -");
	testBasic('fr', "K:#[ ]##[ ]##[ ]#B[ ]###[ ]###", false, "2500613564564", "2 50 06 13 564 564");
	testBasic('fr', "K:#[ ]##[ ]##[ ]#B[ ]###[ ]###", true, "2500613564564", "2 50 06 13 564 564");
	testBasic('fr', "K:#[ ]##[ ]##[ ]#B[ ]###[ ]###[ ]##", false, "2500613564564", "2 50 06 13 564 564");
	testBasic('fr', "K:#[ ]##[ ]##[ ]#B[ ]###[ ]###[ ]##", true, "2500613564564", "2 50 06 13 564 564");
	testUnformat('fr', "K:#[ ]##[ ]##[ ]#B[ ]###[ ]###[ ]##", "2 50 06 13 564 564", "2500613564564");
	testUnformat('fr', "Kz:##[:]##[:]##","15:12:28","151228");
	testBasic('fr', "DZ:DD[/]MM[/]YY", true, "20080221", "21/02/08");
	testBasic('fr', "DZ:DD[/]MM[/]YY", true, "20080221", "21/02/08");
	testBasic('fr', "DZ:DD[/]MM[/]YY", false, "21/02/08", "21/02/08");
	testBasic('fr', "D:YYYY[_]MM[_]DD", true, "20121128", "2012_11_28");
	testBasic('fr', "D:YYYY[_]MM[_]DD", false,"2012_11_28","2012_11_28");
	testBasic('fr', "DZ:DD[/]MM[/]YY", false, "21/02", "21/02/13");
	testUnformat('fr',"DZ:DD[/]MM[/]YY", "21/02/08", "20080221");
	testUnformat('fr',"DZ:DD[/]MM[/]YY", "21/02", "20130221");
	testBasic('fr', "DZ:DDMMYYYY", true, "20090506", "06052009");
	testBasic('fr', "DZ:DD[/]MM[/]YY", false, "27/12/07", "27/12/07");
	testBasic('fr', "DZ:DD[/]MM[/]YY", true, "20090506", "06/05/09");
	testBasic('fr', "DzZ:DD[/]MM[/]YY", true, "20090506", "06/05/09");
	testBasic('fr', "Dz:DD[/]MM[/]YY", true, "20090506", "06/05/09");
	testBasic('fr', "Dz:DD[ ]MMMMMMMMMM[ ]YYYY", true, "20080102", "02 Janvier    2008");
});

test("date basic", 24 , function() {
	testOptions('D:DD[/]MM[/]YYYY', false, '01102', '01/10/2002');
	testOptions('D:DD[/]MM[/]YY', false, '01/02/08', '01/02/08');
	testOptions('D:DD[/]MM[/]YYYY', false, '01011601', '01/01/1601');
	testOptions('D:DD[/]MM[/]YYYY', false, '011001', '01/10/2001');
	testOptions('D:DD[/]MM[/]YYYY', true, '011001', '01/10/2001');
	testOptions('D:DD[/]MM[/]YYYY', false, '011000002', '01/10/2002');
	testOptions('D:DD[/]MM[/]YYYY', false, '020306', '02/03/2006');
	testOptions('D:DD[/]MM[/]YYYY', true, '020306', '06/03/2002');
	testOptions('D:DD[/]MM[/]YY', false, '02/2/06', '02/02/06');
	testOptions('D:DD[/]MM[/]YY', false, '281001', '28/10/01');
	testOptions('D:DD[/]MM[/]YY', true, '281001', '01/10/28');
	testOptions('D:DD[/]MM[/]YY', true, '20001201', '01/12/00');
});

test("date with country format", 18, function() {
	// DD1=MM/DD
	testBasic('fr', "D:DD1",false,"2/1/1994","02/01");
	testBasic('fr', "D:DD2",false,"2/1/1994","02/01/94");
	testBasic('fr', "D:DD3",false,"2/1/1994","02 Janvier 1994");
	testBasic('fr', "D:DD4",false,"2/1/1994","02 Janvier 1994");
	testBasic('fr', "D:DD4",false,"2/12/1994","02 Décembre 1994");
	testBasic('en', "D:DD1",false,"2/1/1994","02/01");
	testBasic('en', "D:DD2",false,"2/1/1994","02/01/94");
	testBasic('en', "D:DD3",false,"2/1/1994","Février 01 1994");
	testBasic('en', "D:DD4",false,"2/1/1994","Février 01 1994");
});

test("date Z", 12, function() {
	testOptions('DZ:DD[/]MM[/]YY', true, '15991231', '  /  /  ');
	testOptions('DZ:DD[/]MM[/]YY', false, '', '  /  /  ');
	testOptions('DZ:DD[/]MM[/]YY', true, '', '  /  /  ');
	testOptions('DZ:DD[/]MM[/]YY', true, '15991231', '  /  /  ');
	testUnformat('fr','DZ:DD[/]MM[/]YY', '', '15991231');
	testUnformat('fr','DZ:DD[/]MM[/]YYYY', '', '15991231');
	testUnformat('fr','DZ:DD[/]MM[/]YY', '   ', '15991231');
	testUnformat('fr','DZ:DD[/]MM[/]YYYY', '  ', '15991231');
});

test("date with text", 32, function() {
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', false, '16/03/63', 'debut16.03.63fin');
	testOptions('D:[debut]DD[.]MM[.]YYYY[fin]', false, '16/03/63', 'debut16.03.1963fin');
	testOptions('D:[debut]DD[.]MM[.]YYYY[fin]', false, '16/03/45', 'debut16.03.2045fin');
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', false, '160306', 'debut16.03.06fin');
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', true, '160306', 'debut06.03.16fin');
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', false, '16032006', 'debut16.03.06fin');
	testOptions('D:[debut]DD[.]MMM[.]YYYY[fin]', false, '16032006', 'debut16.MAR.2006fin');
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', false, '16/03/63', 'debut16.03.63fin');
	testOptions('D:[debut]DD[.]MM[.]YYYY[fin]', false, '16/03/63', 'debut16.03.1963fin');
	testOptions('D:[debut]DD[.]MM[.]YYYY[fin]', false, '16/03/45', 'debut16.03.2045fin');
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', false, '160306', 'debut16.03.06fin');
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', true, '160306', 'debut06.03.16fin');
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', false, '16032006', 'debut16.03.06fin');
	testOptions('D:[debut]DD[.]MMM[.]YYYY[fin]', false, '16032006', 'debut16.MAR.2006fin');
	testOptions('D:[A Grenoble, le ]DD[ ]9M[ ]YYYY', false, '14032013', "A Grenoble, le 14 Mars      2013");
	testOptions('D:[Le ]DD[ du mois de ]MMMMMMMM', false, '12092013', "Le 12 du mois de Septembr");
});

test("date with missing components", 70, function() {
	testOptions('DZ:YYYY', false, '2017', '2017');
	var opt={ datePivot: 1950 };
	testOptions('DZ:DD[/]MM[/]YY', false, '', '  /  /  ', opt);
	testOptions('DZ:DD[/]MM[/]YY', true, '', '  /  /  ', opt);
	testOptions('DZ:DD[/]MMM[/]YY', false, '', '  /   /  ', opt);
	testOptions('DZ:DD[/]MMM[/]YY', true, '', '  /   /  ', opt);
	testOptions('DZ:DD[/]MMMMM[/]YYYY', false, '', '  /     /    ', opt);
	testOptions('DZ:DD[/]MMMMM[/]YYYY', true, '', '  /     /    ', opt);
	testOptions('DZ:DD[/]MM', false, '', '  /  ', opt);
	testOptions('DZ:DD[/]MM', true, '', '  /  ', opt);
	testOptions('DZ:DD[/]MM[/]YY', true, '15991231', '  /  /  ', opt);
	testOptions('DZ:DD[/]MM', true, '15991231', '  /  ', opt);
	testOptions('DZ:MMM[-]YYYY', false, '0506', 'MAY-2006', opt);
    testOptions('D:DD[-]MMM' , true, '20121105', '05-NOV');
    testOptions('D:DD[-]MMM' , false, '5-11-12', '05-NOV');
    testOptions('D:DD[-]MMM' , false, '5/11/12', '05-NOV');
    testOptions('D:DD[-]MMM' , false, '5/11', '05-NOV');
    testOptions('D:DD[-]MMM' , false, '12-11', '12-NOV');
	opt={ dateSep: '-', dateOrder:'YMD'};
	testOptions('DZ:YY[-]MM[-]DD', false, '', '  -  -  ', opt);
	testOptions('DZ:YY[-]MM[-]DD', true, '', '  -  -  ', opt);
	testOptions('DZ:YY[-]MM', false, '', '  -  ', opt);
	testOptions('DZ:YY[-]MM', true, '', '  -  ', opt);
	testOptions('DZ:MM[-]DD', false, '', '  -  ', opt);
	testOptions('DZ:MM[-]DD', true, '', '  -  ', opt);
	testOptions('DZ:YY[-]MM[-]DD', true, '15991231', '  -  -  ', opt);
	testOptions('DZ:YY[-]MM', false, '0605', '06-05', opt);
	opt={ dateSep: '_', dateOrder:'MDY'};
	testOptions('DZ:DD[_]MM[_]YY', false, '', '  _  _  ', opt);
	testOptions('DZ:DD[_]MM[_]YY', true, '', '  _  _  ', opt);
	testOptions('DZ:DD[_]MM', false, '', '  _  ', opt);
	testOptions('DZ:DD[_]MM', true, '', '  _  ', opt);
	testOptions('DZ:MM[_]YY', false, '', '  _  ', opt);
	testOptions('DZ:MM[_]YY', true, '', '  _  ', opt);
	testOptions('DZ:MM[_]DD[_]YY', true, '15991231', '  _  _  ', opt);
	testOptions('DZ:MM[-]DD[-]YYYY', false, '05/17/2006', '05-17-2006', opt);
	testOptions('DZ:MMM', false, '05/17/2006', 'MAY', opt);
	testOptions('DZ:MMM[-]YYYY', false, '0506', 'MAY-2006', opt);
});

test("number basic", 80, function() {
	testOptions('N:9.4#', false, '53,1336', '53,1336');
	testOptions('N3:12.2',false,'123567589,2525','123 567 589,25');
	testOptions('NPzc:9#.2#', false, '54,567', '54,56');
	testOptions('NPzc:9.2', false, '54,567', '54,56');
	testOptions('NPzc:9.2', false, '54,00', '54,00');
	testOptions('NPzc:9.2#', false, '54,00', '54,00');
	testOptions('NPzc:9.[$]2#', false, '54,3', '54,$30');
	testOptions('NPzc:9.2#', false, '5,4', '5,40');
	testOptions('NPzc:9.2#', false, '5,456789', '5,45');
	testOptions('NPzc:9.2#', false, '5.4', '5,40');
	testOptions('NPzc:9.2#', true, '5.4', '5,40');
	testOptions('NPzc:9.2#', false, '5.456789', '5,45');
	testOptions('NPzc:9.2#', true, '5.456789', '5,45');
	testOptions('NPzc:9.2#', false, '4349,012945123455656560000000000000000000000000000000', '4349,01');
	testOptions('NPzc:9.2#', false, '4349,250000000000000000000000000000000', '4349,25');
	testOptions('NPzc:9.2#', false, '33.333333333333333333333333333333', '33,33');
	testOptions('NPzc:9.2#', true, '33.333333333333333333333333333333', '33,33');
	testOptions('NPzc:9.2#', false, '33.33333', '33,33');
	testOptions('NPzc:9.2#', true, '33.33333', '33,33');
	testOptions('NPzc:9.2#', false, '33.333333333333333333333333333333', '33,33');
	testOptions('NPzc:9.2#', true, '33.333333333333333333333333333333', '33,33');
	testOptions('NPzc:9.2#', false, '33.33333', '33,33');
	testOptions('NPzc:9.2#', true, '33.33333', '33,33');
	testOptions('NPzc:9.2#', false, '4,053293300806905610808782135485', '4,05');
	testOptions('NPzc:9.2#', false, '4.053293300806905610808782135485', '4,05');
	testOptions('NPzc:9.2#', true, '4.053293300806905610808782135485', '4,05');
	testOptions('N+z:12.5', false, '123456789016,005', '123456789016,00500');
	testOptions('N+z:12.5', false, '123456789016,00565056', '123456789016,00565');
	//Z option always enabled
	testOptions('NZ:11###.2#####', false, '150,00', '150,000000');
	testOptions('NZ:11.2#####', false, '150,00', '150,000000');
	testOptions('NZ:11.2#####', false, '150', '150,000000');
	testOptions('N:11.2', true, '150', '150,00');
	testOptions("N-3z:14.0#",   true, "14322", "+14 322");
	testOptions("N-3zv1:14.0#", true, "14322", "+14 322");
	testOptions("N3z:14.0#",    true, "14322",  "14 322");
	testOptions("N3zv1:14.0#",  true, "14322",  "14 322");	
	testOptions('N+z:3.2#', true, '', '');
	testOptions('N+:3.2#', true, '', '0,00');
	testOptions('N+z:3.2#', true, '.', '0,00');
	testOptions('N+:3.2#', true, '.', '0,00');
});

test("number F", 58, function() {
	testOptions('N+z3:11F', false, '0,7', '0,7');
	testOptions('N+z3:11F', false, '0.7', '0,7');
	testOptions('N+z3:11F', true, '0.7', '0,7');
	testOptions('Nv+z3:11F', false, '0,7', '0,7');
	testOptions('Nv+z3:11F', false, '0.7', '0,7');
	testOptions('Nv+z3:11F', true, '0.7', '0,7');
	testOptions('N+z3:11F', false, '0,256', '0,256');
	testOptions('N+z3:11F', false, '0.256', '0,256');
	testOptions('N+z3:11F', true, '0.256', '0,256');
	testOptions('Nv+z3:11F', false, '0,256', '0,256');
	testOptions('Nv+z3:11F', false, '0.256', '0,256');
	testOptions('Nv+z3:11F', true, '0.256', '0,256');
	testOptions('N+z:5F', true, '12.345', '12,345');
	testOptions('N+z:5F', false, '12,345', '12,345');
	testOptions('N+z:5F', false, '.12345', ',12345');
	testOptions('N+z:5F', false, '0.12345', '0,1234');
	testOptions('N+z:5F', false, '000.12345', '0,1234');
	testOptions('N+z:5F', false, '', '');
	testOptions('N+:5F', false, '', '0');
	// Test just formatField in that case
	testFormat('fr', 'N+z:5F', '.', '0', true, true, null) 
	testOptions('N+:5F', false, '.', '0');
	testOptions('N+:5F', false, '00000.0000', '0');
	testOptions('N+z3:15F', true, '123456789.012345768', '123 456 789,012345');
	testOptions('N+z3:15F', false, '+123456789,012345768', '123 456 789,012345');
	testOptions('N-z3:15F', false, '123456789,012345768', '+123 456 789,012345');
	testFormatErr('fr', 'N+z:5F', '12.3456', "Bad decimal part", true, null);
	testFormatErr('fr', 'N+z:5F', '123456,5', "Number of digits overflow", true, null);
	testFormatErr('fr', 'N-3z:5F', '123456', "Number of digits overflow", true, null);
	testFormatErr('fr', 'N-3z:5F', '.123456', "Bad decimal part", true, null);
	// No fillChar for F format
	testOptions('N+z*:15F', false, '0.12345', '0,12345');
	testUnformatErr('fr', 'N+z:3.2#', '3456,3456', "Size overflow", true, null);
	testUnformatErr('fr', 'N+z:3.2#', '12,3456', "Size overflow", true, null);
	testUnformatErr('fr', 'N+z:5F', '12,3456', "Size overflow", true, null);	
});

test("number z3 (thousands sep)", 18, function() {
	testOptions('N+z3:5.2#', false, '13', '13,00');
	testOptions('N+z3:5.2#', true, '13', '13,00');
	testOptions('Nv+z3:5.2#', false, '13,00', '13,00');
	testOptions('N+z3:15.5#', false, '12345678911,03205', '12 345 678 911,03205');
	testOptions('N+z3:11.2#', false, '345678911,88', '345 678 911,88');
	testOptions('N+z3:11.2#', false, '1234567911,88', '1 234 567 911,88');
	testOptions('N3:9.2#', false, '+1234567,30', '1 234 567,30');
	testOptions('N+z3:11.2#', false, '1234567911,88', '1 234 567 911,88');
	testOptions('N-z3:9.6#', false, '123456789,012345768', '+123 456 789,012345');
});

test("number - (leading sign)", 12, function() {
	testOptions('N:5.2#', false, '10,5', '10,50');
	testOptions('N-D0:3#', false, '+150', '150+');
	testOptions('N-D0:3#', true, '+150', '150+');
	testOptions('N-:4.1#', false, '+150,3', '+150,3');
	testOptions('N-:4#', false, '+150', '+150');
	testOptions('N-:4#', true, '+150', '+150');
});

test("number */0 (filler)", 32, function() {
	testUnformat('fr',"N-3zv*:14.2", '+*** *14 322,3', '14322.3');
	testUnformat('fr',"N-3zv0:14.2", '+000 014 322,3', '14322.3');
	testOptions('N+D*:####2.##3#', false, '+150.23', '***150,23000');
	testOptions('N+D0:####2.##3#', false, '+150.23', '000150,23000');
	testOptions('N+D*:####2.##3#', true, '+150.23', '***150,23000');
	testOptions('N+D0:####2.##3#', true, '+150.23', '000150,23000');
	testOptions('N-D*3:####2.##3#', true, '+150.23', '*** 150,23000+');
	testOptions('N-D03:####2.##3#', true, '+150.23', '000 150,23000+');
	testOptions('ND*3:5.2', true, '150.23', '** 150,23');
	testOptions('ND03:5.2', true, '150.23', '00 150,23');
	testOptions("N3zv*:14.#", true, "14322,34", "** *** *** *14 322,3");
	testOptions("N3zv0:14.#", true, "14322,34", "00 000 000 014 322,3");
	testOptions("N-3zv*:14.#", true, "14322,34", "+** *** *** *14 322,3");
	testOptions("N-3zv0:14.#", true, "14322,34", "+00 000 000 014 322,3");
	testOptions("N-3zv*:##########.###", true, "14322.234", "+* *** *14 322,234");
	testOptions("N-3zv0:##########.###", true, "14322.234", "+0 000 014 322,234");
	testOptions("N-3zv0:10.6", true, "14322.234", "+0 000 014 322,234000");
});

test("number N alone", 20, function() {
	// strict=false by default -> decimal part is truncated
	testOptions('N:4.2', true, '5856,1254', '5856,12');
	testOptions('N:7.2#', false, '', '0,00');
	testOptions('N:7.2#', true, '', '0,00');
	testOptions('N:7.2#', false, '85', '85,00');
	testOptions('N:7.2#', true, '85', '85,00');
	testOptions('N:6.2#', false, '+23345,3', '23345,30');
	testOptions('N:7.2#', false, '-23345.3', '-23345,30');
	testOptions('N:7.2#', true, '-23345.3', '-23345,30');
	testOptions('N:7.2#', false, '-23345.3', '-23345,30');
	testOptions('N:7.2#', true, '-23345.3', '-23345,30');
});

test("number z and v with . input", 30, function() {
	testOptions('Nz:7.6#', false, '.', '0,000000');
	testOptions('Nz:7.6#', true, '.', '0,000000');
	testOptions('Nz0:7.6#', true, '.0000000', '0000000,000000');
	testOptions('Nz0:7.6#', false, '.', '0000000,000000');
	testOptions('Nz0:7.6#', true, '.', '0000000,000000');
	testOptions('Nzv:7.6#', false, '.', '0,000000');
	testOptions('Nzv:7.6#', true, '.', '0,000000');
	testOptions('Nz0v:7.6#', false, '.', '0000000,000000');
	testOptions('Nz0v:7.6#', true, '.', '0000000,000000');
	testOptions('Nzv1:7.6#', false, '.', '0,000000');
	testOptions('Nzv1:7.6#', true, '.', '0,000000');
	testOptions('Nzv2:7.6#', false, '.', '0,000000');
	testOptions('Nzv2:7.6#', true, '.', '0,000000');
	testOptions('N:7.6#', false, '.', '0,000000');
	testOptions('N:7.6#', true, '.', '0,000000');
});

test("number z and v with 0 inputs", 40, function() {
	testOptions('Nz:7.6#', false, '+0', '0,000000');
	testOptions('Nz:7.6#', true, '+0', '0,000000');
	testOptions('N:7.6#', false, '+0', '0,000000');
	testOptions('N:7.6#', true, '+0', '0,000000');
	testOptions('Nz:7.6#', false, '0.0', '0,000000');
	testOptions('Nz:7.6#', true, '0.0', '0,000000');
	testOptions('N:7.6#', false, '0.0', '0,000000');
	testOptions('N:7.6#', true, '0.0', '0,000000');
	testOptions('Nz:7.6#', false, '0', '');
	testOptions('Nz:7.6#', true, '0', '');
	testOptions('N:7.6#', false, '0', '0,000000');
	testOptions('N:7.6#', true, '0', '0,000000');
	testOptions('Nv2z:7.6#', false, '0', '');
	testOptions('Nv2z:7.6#', true, '0', '');
	testOptions('Nv2:7.6#', false, '0', '0,000000');
	testOptions('Nv2:7.6#', true, '0', '0,000000');
	testOptions('Nz:7F', false, '0', '');
	testOptions('Nz:7F', true, '0', '');
	testOptions('N:7F', false, '0', '0');
	testOptions('N:7F', true, '0', '0');
});

test("number z and v with spaces input", 48, function() {
	testOptions('N0v2z:7.6#', false, '              ', '');
	testOptions('N0v2z:7.6#', true, '              ', '');
	testOptions('N0v2:7.6#', false, '              ', '0000000,000000');
	testOptions('N0v2:7.6#', true, '              ', '0000000,000000');
	testOptions('Nv2z:7.6#', false, '              ', '');
	testOptions('Nv2z:7.6#', true, '              ', '');
	testOptions('Nv2:7.6#', false, '              ', '0,000000');
	testOptions('Nv2:7.6#', true, '              ', '0,000000');
	testOptions('Nz0:7.6#', false, '              ', '');
	testOptions('Nz0:7.6#', true, '              ', '');
	testOptions('N0:7.6#', false, '              ', '0000000,000000');
	testOptions('N0:7.6#', true, '              ', '0000000,000000');
	testOptions('Nz:7.6#', false, '              ', '');
	testOptions('Nz:7.6#', true, '              ', '');
	testOptions('N:7.6#', false, '              ', '0,000000');
	testOptions('N:7.6#', true, '              ', '0,000000');
	testOptions('Nv2z:7.6#', false, '  ', '');
	testOptions('Nv2z:7.6#', true, '  ', '');
	testOptions('Nv2:7.6#', false, '  ', '0,000000');
	testOptions('Nv2:7.6#', true, '  ', '0,000000');
	testOptions('Nz:7.6#', false, '  ', '');
	testOptions('Nz:7.6#', true, '  ', '');
	testOptions('N:7.6#', false, '  ', '0,000000');
	testOptions('N:7.6#', true, '  ', '0,000000');
});

test("number z and v with empty input", 40, function() {
	testOptions('Nv2z:7.6#', false, '', '');
	testOptions('Nv2z:7.6#', true, '', '');
	testOptions('Nv2:7.6#', false, '', '0,000000');
	testOptions('Nv2:7.6#', true, '', '0,000000');
	testOptions('Nz:7.6#', false, '', '');
	testOptions('Nz:7.6#', true, '', '');
	testOptions('N:7.6#', false, '', '0,000000');
	testOptions('N:7.6#', true, '', '0,000000');
	testOptions('Nv2z:7F', false, '', '');
	testOptions('Nv2z:7F', true, '', '');
	testOptions('Nv2:7F', false, '', '0');
	testOptions('Nv2:7F', true, '', '0');
	testOptions('N:7.6#', false, '', '0,000000', {zOn: true});
	testOptions('N:7.6#', true, '', '0,000000', {zOn: true});
	testOptions('Nz:7.6#', false, '', '', {zOn: true});
	testOptions('Nz:7.6#', true, '', '', {zOn: true});
	testOptions('N:7.6#', false, '', '0,000000');
	testOptions('N:7.6#', true, '', '0,000000');
	testOptions('Nz:7.6#', false, '', '');
	testOptions('Nz:7.6#', true, '', '');			
});

test("number z and v with lots of zeros in input", 8, function() {
	testOptions('Nv2z0:7.6#', false, '0000000.000000', '0000000,000000');
	testOptions('Nv2z0:7.6#', true, '0000000.000000', '0000000,000000');
	testOptions('N0v2:7.6#', false, '0000000.000000', '0000000,000000');
	testOptions('N0v2:7.6#', true, '0000000.000000', '0000000,000000');
});

test("string > tests", 20, function() {
	testOptions('KT:35X>25X', false, '((1-(C6/(C5+(C5=0))))*100)/(C7+(C7=0))', '((1-(C6/(C5+(C5=0))))*100)/(C7+(C7=0))');
	testOptions('KT:35X>25X', true, '((1-(C6/(C5+(C5=0))))*100)/(C7+(C7=0))', '((1-(C6/(C5+(C5=0))))*100)/(C7+(C7=0))');
	testOptions('KTv1:35X>25X', false, '((1-(C6/(C5+(C5=0))))*100)/(C7+(C7=0))', '((1-(C6/(C5+(C5=0))))*100)/(C7+(C7=0))');
	testOptions('KTv1:35X>25X', true, '((1-(C6/(C5+(C5=0))))*100)/(C7+(C7=0))', '((1-(C6/(C5+(C5=0))))*100)/(C7+(C7=0))');
	testOptions('K:10X>30X', false, 'abcdefghijklmnopqrst12345~~', 'abcdefghijklmnopqrst12345~~');
	testOptions('K:10X>30X', true, 'abcdefghijklmnopqrst12345~~', 'abcdefghijklmnopqrst12345~~');
	testOptions('K:>10X', false, 'abcdefghijklmnopqrst12345~~', 'abcdefghij');
	testOptions('K:>10X', true, 'abcdefghijklmnopqrst12345~~', 'abcdefghij');
	testOptions('K:[Debut]10X[Milieu]>20X[Fin]', false, 'abcdefghijklmnopqrst12345~~', 'DebutabcdefghijMilieuklmnopqrst12345~~   Fin');
	testOptions('K:[Debut]10X[Milieu]>20X[Fin]', true, 'abcdefghijklmnopqrst12345~~', 'DebutabcdefghijMilieuklmnopqrst12345~~   Fin');		
});

test("string padding tests", 36, function() {
	testOptions('K:2#[.az]2#[.zeaaz]2#[.zae]2#[.eaz]2#[ zaez]', false, '115566', '11.az55.zeaaz66.zae  .eaz   zaez');
	testOptions('K:2#[.az]2#[.zeaaz]2#[.zae]2#[.eaz]2#[ zaez]', true, '115566', '11.az55.zeaaz66.zae  .eaz   zaez');
	testOptions('K:11X', false, ' A ', ' A');
	testOptions('K:11X', true, ' A ', ' A');
	testOptions('Kv1:11X', false, ' A ', ' A');
	testOptions('Kv1:11X', true, ' A ', ' A');
	testOptions('K:2#[.]2#[.]2#[.]2#[.]2#[ ]', false, '115566', '11.55.66.  .');
	testOptions('K:2#[.]2#[.]2#[.]2#[.]2#[ ]', true, '115566', '11.55.66.  .');
	testOptions('Kv2:10X', false, '', '');
	testOptions('K:10X', false, '', '          ', {vOn: false});
	testOptions('K:10X', false, 'abcde', 'abcde     ', {vOn: false});
	testOptions('K:10X', false, ' abcde ', ' abcde    ', {vOn: false});
	testOptions('Kv2:10X', false, 'abcde', 'abcde');
	testOptions('Kv2:10X', false, ' rr rr  ', 'rr rr');
	testOptions('Kv2:10X', false, '          ', '');
	testOptions('Kv2:10X', false, ' abcde ', 'abcde');
	testOptions('Kv2:[    ]10X[    ]', false, ' abcde ', 'abcde');
	testOptions('K:[    ]10X[    ]', false, ' abcde ', '     abcde');
});

test("string case conversions", 60, function() {
	testOptions('K:3A', false, 'ABC', 'ABC', {vOn: false});
	testOptions('K:3A', false, 'ABC', 'ABC');
	testOptions('K:3A', false, 'ABz', 'ABZ');
	testOptions('KTD:20X', false, 'if0 if1 if2 if3', 'if0 if1 if2 if3');
	testOptions('K:10X', false, '', '');
	testOptions('Kz:10X', false, '', '');
	testOptions('K:10A', false, '', '');
	testOptions('Kz:10A', false, '', '');
	testOptions('K:10A', false, '  ', '');
	testOptions('Kz:10A', false, '  ', '');
	testOptions('K:2B', false, 'abc', 'AB');
	testOptions('K:2B', true, 'abc', 'AB');
	testOptions('K:2B', false, 'aB', 'AB');
	testOptions('K:2B', true, 'aB', 'AB');
	testOptions('K:2B', false, 'AB', 'AB');
	testOptions('K:2B', true, 'AB', 'AB');
	testOptions('KA:2B', false, 'AB', 'AB');
	testOptions('KA:2B', true, 'AB', 'AB');
	testOptions('KAv2:10X', false, '   a  ', 'a');
	testOptions('KAv2:10X', true, '   a  ', 'a');
	testOptions('KAv2:10X', false, '     ', '');
	testOptions('KAv2:10X', true, '     ', '');
	testOptions('KA:10X', false, 'A', 'A');
	testOptions('KA:10X', true, 'A', 'A');
	testOptions('K:2B', false, 'abc', 'AB');
	testOptions('K:2B', true, 'abc', 'AB');
	testOptions('K:5X', false, 'abcdefghijk', 'abcde');
	testOptions('K:5X', true, 'abcdefghijk', 'abcde');
	testOptions('KTD:A11B', true, 'BONJOUR', 'BONJOUR', opt);
	var opt={	dynFormats:{
			u: { subType:"B",complement:""}
		}
	}
	testOptions('KTD:A11u', true, 'BONJOUR', 'BONJOUR', opt);

});

test("string L option", 12, function() {
	var opt={	dynFormats:{
			a: { subType:"b",complement:""},
			d: { subType:"",complement:"/$"}
		}
	}
	testOptions('KL:[debut]2B[.]2#[.]3A[.]3#[.]4a[fin]', false, 'a612bCd345eFgH', 'debutA6.12.BCD.345.efghfin');
	testOptions('KL:[debut]2B[.]2#[.]3A[.]3#[.]4a[fin]', true, 'a612bCd345eFgH', 'debutA6.12.BCD.345.efghfin');
	opt.dateSep= '_';
	opt.datePivot= 1950;
	testOptions('KL:[debut]2B[.]2#[.]3A[.]3#[.]4a[fin]', false, 'a612bCd345eFgH', 'debutA6.12.BCD.345.efghfin', opt);
	testOptions('KL:[debut]2B[.]2#[.]3A[.]3#[.]4a[fin]', true, 'a612bCd345eFgH', 'debutA6.12.BCD.345.efghfin', opt);
	testOptions('KL:[debut]2B[.]2#[.]3A[.]3#[.]4a[.\'d\']2d[fin]', false, 'a612bCd345eFgH/$', 'debutA6.12.BCD.345.efgh.\'d\'/$fin', opt);
	testOptions('KL:[debut]2B[.]2#[.]3A[.]3#[.]4a[.\'d\']2d[fin]', true, 'a612bCd345eFgH/$', 'debutA6.12.BCD.345.efgh.\'d\'/$fin', opt);
});

test("string c directive", 24, function() {
	var opt= { 	
		dateSep: '_', 
		datePivot: 1950,
		dynFormats:{
			c: { subType:"A#",complement:"-/_"},
			d: { subType:"c",complement:"*$?%"},
			e: { subType:"c",complement:"_"},
			f: { subType:"d",complement:"~"},
			u: { subType:"B",complement:"_"},
			v: { subType:"u",complement:"-"}
		}
	};
	testEditToDisplay('fr', 'K:3c', "ddd", "DDD", opt);
	testOptions('K:3c', false, 'ddd', 'DDD', opt);
	testOptions('K:3c', false, 'abc', 'ABC', opt);
	testOptions('K:4c', false, '2-bc', '2-BC', opt);
	testOptions('K:3c', false, 'A-bC2', 'A-B', opt);
	testOptions('K:3c', false, 'A-BC2', 'A-B', opt);
	testOptions('K:3c', false, '2/_', '2/_', opt);
	testOptions('K:3c', false, '222', '222', opt);
	// Parameter opt is missing -> c dynFormat is not declared
	testFormatErr('fr', 'K:3c', '222', 'Test Unexpected format char \'c\'');
	testOptions('K:3c', false, '222', '222', opt);
	testOptions('K:3c', false, '2Z2', '2Z2', opt);
	testOptions('K:3c', false, '2-2', '2-2', opt);

	testOptions('K:[c=\']3c[\' - d=\']3d[\' - e=\']3e[\'- f=\']4f[\' - u=\']3u[\' - v=\']3v[\']', false, 'A2/3-?3P_*_~Z2E__Z-', 'c=\'A2/\' - d=\'3-?\' - e=\'3P_\'- f=\'*_~Z\' - u=\'2E_\' - v=\'_Z-\'', opt);
});

test("dynamic formats", 21, function() {
	var opt={
			dynFormats:{
				c: { subType:"A#",complement:"-/_"},
				d: { subType:"c",complement:"*$?%"},
				e: { subType:"c",complement:"_"},
				g: { subType:"AX",complement:""},
				// test infinite recursion
				u: { subType:"uv",complement:"_"},
				v: { subType:"uA#p",complement:"-"},
				z: { subType:"B",complement:"_-()+"},
				r: { subType:"c",complement:"-"},
				p: { subType: 'B', complement: '_-'}, 
				q: { subType: 'u', complement: '' },
			}
	}

	testOptions('K:3c',  false, 'ae_', 'AE_', opt);
	testUnformatErr('fr', "K:3c", "AE&", "Unexpected character", true, opt);
	testOptions('K:4B>2B',  false, 'abcDef', 'ABCDEF', opt);
	testOptions('K:4p>2p', false, 'abc--Defdh', 'ABC--D', opt);
	// test chaines dynFormats with infinite recursion
	testOptions('K:4u>2u', false, 'abc--Defdh', 'ABC--D', opt);
	testOptions('K:4q>2q', false, 'abc--Defdh', 'ABC--D', opt);
	testOptions('K:4p2q',  false, 'ab-cDef', 'AB-CDE', opt);
	testOptions('K:4c',  false, 'A', 'A', opt);
	testOptions('K:4c',  false, '2', '2', opt);
	testOptions('K:4c',  false, '2A2', '2A2', opt);
	testOptions('K:6c',  false, '2/A_2-', '2/A_2-', opt);
});

test("date series 2", 41 , function() {
	testOptions("D:DD[/]MM", false, "311205", "31/12", null)
	testOptions('Dz:DD[ ]MMMMMMMMMM[ ]YYYY', false, '20080102', "20 Août       0102");
	testOptions('D:[debut]DD[.]MMMMMMMMM[.]YYYY[fin]', true, '20060509', 'debut09.Mai      .2006fin');
	testUnformatErr('fr', 'D:DD[/]MM[/]YY', '  /  /  ', 'Test missing Z option');
	// Same with Z option
	testOptions('DZ:DD[/]MM[/]YY', true, '', '  /  /  ');
	testOptions('D:DD[/]MM[/]YY', false, '2/3/6', '02/03/06');
	testOptions('DZ:DD[/]MM[/]YY', true, '15991231', '  /  /  ');
	testOptions('D:DD[/]MM[/]YY', false, '281000', '28/10/00');
	testOptions('D:[debut]DD[.]MMMMMMMMM[.]YYYY[fin]', false, '20062009', 'debut20.Juin     .2009fin');
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', false, '16/03', "debut16.03.13fin");
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', false, '16/03/63', "debut16.03.63fin");
	testOptions('D:[debut]DD[.]MM[.]YYYY[fin]', false, '16/03/63', "debut16.03.1963fin");
	testOptions('D:DD[/]MMMMMMMMMM[/]YY', true, '19620517', '17/Mai       /62');
	testOptions('D:DD[/]MMMMMMMMMM[/]YY', false, '17051962', '17/Mai       /62');
	testOptions('D:DD[/]MMMMMMMMMM[/]YYYY', false, '170562', '17/Mai       /1962');
	testOptions('D:[debut]DD[.]MM[.]YY[fin]', false, '14120', 'debut14.12.00fin');
	testOptions('D:[debut]DD[.]MMMM[.]YYYY[fin]', false, '16032006', 'debut16.Mars.2006fin');
	testOptions('D:[debut]DD[.]MMMMMMMMM[.]YYYY[fin]', true, '20060509', 'debut09.Mai      .2006fin');
	testOptions('D:DD[/]MMMMMMMMMM[/]YY', true, '19620517', '17/Mai       /62');
	testOptions('D:DD[/]MMMMMMMMMM[/]YY', false, '17051962', '17/Mai       /62');
	testOptions('D:DD[/]MMMMMMMMMM[/]YYYY', false, '170562', '17/Mai       /1962');
	/*
	 TODO - option z
	testOptions('DZz:DD[/]MM[/]YY', false, '', '');
	testOptions('DZz:DD[/]MM[/]YY', true, '', '');
	testOptions('DZz:DD[/]MMM[/]YY', false, '', '');
	testOptions('DZz:DD[/]MMM[/]YY', true, '', '');
	testOptions('DZz:DD[/]MMMMM[/]YYYY', false, '', '');
	testOptions('DZz:DD[/]MMMMM[/]YYYY', true, '', '');
	testOptions('DZz:DD[/]MM', false, '', '');
	testOptions('DZz:DD[/]MM', true, '', '');
	testOptions('DZz:DD[/]MM[/]YY', true, '15991231', '');
	testOptions('DZz:DD[/]MMM[/]YY', true, '15991231', '');
	testOptions('DZz:DD[/]MM', true, '15991231', '');
	testOptions('DZ:MM[-]DD[-]YYYY', false, '17/05/2006', '05-17-2006');
	testOptions('DZ:MMM[-]YYYY[-]DD', false, '17/05/2006', 'MAY-2006-17');
	testOptions('DZ:MMM', false, '17/05/2006', null);
	testOptions('DZ:MMM', false, '05', 'MAY');
	testOptions('DZ:MMM', false, '5', 'MAY');
	testOptions('DZ:YYYY', false, '2006', '2006');
	testOptions('DZ:YYYY', false, '6', '2006');
	testOptions('DZ:YY[-]MM', false, '052006', '06-05');
	testOptions('DZ:MMM[-]YYYY', false, '052006', 'MAY-2006');
	testOptions('DZ:MMM[-]YYYY', true, '052006', null);
	testOptions('DZ:YY[-]MM', false, '0506', '06-05');
	testOptions('DZz:YY[-]MM[-]DD', false, '', '');
	testOptions('DZz:YY[-]MM[-]DD', true, '', '');
	testOptions('DZz:YY[-]MM', false, '', '');
	testOptions('DZz:YY[-]MM', true, '', '');
	testOptions('DZz:MM[-]DD', false, '', '');
	testOptions('DZz:MM[-]DD', true, '', '');
	testOptions('DZz:YY[-]MM[-]DD', true, '15991231', '');
	testOptions('DZ:MM[-]DD[-]YYYY', false, '2006/05/17', '05-17-2006');
	testOptions('DZ:MMM[-]YYYY[-]DD', false, '2006/05/17', 'MAY-2006-17');
	testOptions('DZ:MMM', false, '2006/05/17', null);
	testOptions('DZ:MMM', false, '05', 'MAY');
	testOptions('DZ:MMM', false, '5', 'MAY');
	testOptions('DZ:YYYY', false, '2006', '2006');
	testOptions('DZ:YYYY', false, '6', '2006');
	testOptions('DZ:YY[-]MM', false, '200605', '06-05');
	testOptions('DZ:MMM[-]YYYY', false, '200605', 'MAY-2006');
	testOptions('DZ:MMM[-]YYYY', false, '0605', 'MAY-2006');
	testOptions('DZz:DD[_]MM[_]YY', false, '', '');
	testOptions('DZz:DD[_]MM[_]YY', true, '', '');
	testOptions('DZ:DD[_]MM', false, '1705', null);
	testOptions('DZ:DD[_]MM', true, '1705', null);
	testOptions('DZ:DD[_]MM', false, '0517', '17_05');
	testOptions('DZ:DD[_]MM', true, '0517', null);
	testOptions('DZ:DD[_]MM', false, '06/13/11', '13_06');
	testOptions('DZ:DD[_]MM', true, '06/13/11', null);
	testOptions('DZ:DD[_]MM[_]YYYY', false, '06/13/11', '13_06_2011');
	testOptions('DZ:DD[_]MM[_]YYYY', true, '06/13/11', null);
	testOptions('DZz:DD[_]MM', false, '', '');
	testOptions('DZz:DD[_]MM', true, '', '');
	testOptions('DZz:MM[_]YY', false, '', '');
	testOptions('DZz:MM[_]YY', true, '', '');
	testOptions('DZz:MM[_]DD[_]YY', true, '15991231', '');
	testOptions('DZ:MMM[-]YYYY[-]DD', false, '05/17/2006', 'MAY-2006-17');
	testOptions('DZ:MMM', false, '05', 'MAY');
	testOptions('DZ:MMM', false, '5', 'MAY');
	testOptions('DZ:YYYY', false, '2006', '2006');
	testOptions('DZ:YYYY', false, '6', '2006');
	testOptions('DZ:YY[-]MM', false, '052006', '06-05');
	testOptions('DZ:MMM[-]YYYY', false, '052006', 'MAY-2006');
	testOptions('DZ:YY[-]MM', false, '0506', '06-05');
	testOptions('DZ:DD[-]MM[-]YYYY', false, '050649', '06-05-2049');
	testOptions('DZ:DD[-]MM[-]YYYY', false, '050650', '06-05-2050');
	testOptions('DZ:DD[-]MM[-]YYYY', false, '050651', '06-05-1951');
	testOptions('DZ:DD[-]MM[-]YYYY', false, '490506', '06-05-2049');
	testOptions('DZ:DD[-]MM[-]YYYY', false, '500506', '06-05-2050');
	testOptions('DZ:DD[-]MM[-]YYYY', false, '510506', '06-05-1951');
	testOptions('DZ:DD[-]MM[-]YYYY', false, '51056', '06-05-1951');
	testOptions('DZ:DD[-]MM[-]YYYY', false, '060549', '06-05-2049');
	testOptions('DZ:DD[-]MM[-]YYYY', false, '060550', '06-05-2050');
	testOptions('DZ:DD[-]MM[-]YYYY', false, '060551', '06-05-1951');
	*/

});

false && test("number series 2", 69, function() {
	testOptions('N:9.4#', true, '53,1336', null);
	testOptions('NPzc:9.2#', true, '5,4', null);
	testOptions('NPzc:9.2#', true, '5,456789', null);
	testOptions('NPzc:9.2#', true, '4349,012945123455656560000000000000000000000000000000', null);
	testOptions('NPzc:9.2#', true, '4349,250000000000000000000000000000000', null);
	testOptions('NPzc:9.2#', true, '4,053293300806905610808782135485', null);
	testOptions('N3*:7.3#', false, '5,4', '* *** **5,400');
	testOptions('N3*:7.3#', true, '5,4', null);
	testOptions('N+z:11F', false, '000123456789016,005', null);
	testOptions('N+z:11F', true, '000123456789016,005', null);
	testOptions('N+z:11F', false, '00012345678,005', '12345678,005');
	testOptions('N+z:11F', true, '00012345678,005', null);
	testOptions('N+z:12.5', true, '123456789016,005', null);
	testOptions('N+z:12.5', true, '123456789016,00565056', null);
	testOptions('N:[Debut]3[abc].2#[Fin]', false, '150', 'Debut150abc,00Fin');
	testOptions('N:[Debut]3[abc].2#[Fin]', true, '150', 'Debut150abc,00Fin');
	testOptions('N+z3:11F', true, '0,7', null);
	testOptions('Nv+z3:11F', true, '0,7', null);
	testOptions('N+z3:11F', true, '0,256', null);
	testOptions('Nv+z3:11F', true, '0,256', null);
	testOptions('Nv+z3:5.2#', true, '13,00', null);
	testOptions('N3z:14#', false, '14 322', '14 322');
	testOptions('N3z:14#', true, '14 322', null);
	testOptions('N+3zv*:14.0#', false, '14322', '** *** *** *14 322');
	testOptions('N+3zv*:14.0#', true, '14322', '** *** *** *14 322');
	testOptions('N-3z:14.0#', false, '14322', '+14 322');
	testOptions('N-3z:14.0#', true, '14322', '+14 322');
	testOptions('N-3zv1:14.0#', false, '14322', '+14 322');
	testOptions('N-3zv1:14.0#', true, '14322', '+14 322');
	testOptions('N3z:14.0#', false, '14322', '14 322');
	testOptions('N3z:14.0#', true, '14322', '14 322');
	testOptions('N3zv1:14.0#', false, '14322', '14 322');
	testOptions('N3zv1:14.0#', true, '14322', '14 322');
	testOptions('N+z3:11.2#', true, '345678911,88', null);
	testOptions('N-D0:[debut]####8.[Fin]##5#[Fin]', false, '+21150,213', 'debut000000021150,Fin2130000+Fin');
	testOptions('N-D0:[debut]####8.[Fin]##5#[Fin]', true, '+21150,213', null);
	testOptions('N-D0:3.0#', false, '+150', '150+');
	testOptions('N-D0:3.0#', true, '+150', '150+');
	testOptions('N-D0:0.6#', false, '+150,123', ',123000+');
	testOptions('N-D0:0.6#', true, '+150,123', null);
	testOptions('N-0:0.6#', false, '+150,123', '+,123000');
	testOptions('N-0:0.6#', true, '+150,123', null);
	testOptions('N-:4.1#', true, '+150,3', null);
	testOptions('N-:4.0#', false, '+150', '+150');
	testOptions('N-:4.0#', true, '+150', '+150');
	testOptions('N-D0:[debut]####2.[Fin]##3#[Fin]', false, '+150,23', 'debut000150,Fin23000+Fin');
	testOptions('N-D0:[debut]####2.[Fin]##3#[Fin]', true, '+150,23', null);
	testOptions('N-:[debut]####2.[Fin]##3#[Fin]', false, '+150,23', 'debut+150,Fin23000Fin');
	testOptions('N-:[debut]####2.[Fin]##3#[Fin]', true, '+150,23', null);
	testOptions('N3:9.2#', true, '+1234567,30', null);
	testOptions('N:6.2#', true, '+23345,3', null);
	testOptions('N+-AD0z53:5.2#', false, '-23345.3', null);
	testOptions('N+-AD0z53:5.2#', true, '-23345.3', null);
	testOptions('N+z3:11.2#', true, '1234567911,88', null);
	testOptions('N+z3*:11.2#', false, '150,88', '** *** *** 150,88');
	testOptions('N+z3*:11.2#', true, '150,88', null);
	testOptions('N+z3*:4.2#', false, '150,88', '* 150,88');
	testOptions('N+z3*:4.2#', true, '150,88', null);
	testOptions('N+z30:11.2#', false, '150,88', '00 000 000 150,88');
	testOptions('N+z30:11.2#', true, '150,88', null);
	testOptions('N+z30:4.2#', false, '150,88', '0 150,88');
	testOptions('N+z30:4.2#', true, '150,88', null);
	testOptions('Nz:7.6#', false, '  - 3,2', '-3,200000');
	testOptions('Nz:7.6#', true, '  - 3,2', null);
	testOptions('N+z3:11.2#', true, '1234567911,88', null);
	testOptions('N+z3*:11.2#', false, '150,88', '** *** *** 150,88');
	testOptions('N+z3*:11.2#', true, '150,88', null);
	testOptions('N+z3*:4.2#', false, '150,88', '* 150,88');
	testOptions('N+z3*:4.2#', true, '150,88', null);
	
});

test("string series 2", 2, function() {
	testOptions('K:5X>5X', false, 'abcdefgh~~ijklmnopq', 'abcdefgh~~');
	/*
	testOptions('K:3A', false, 'AB ', null);
	testOptions('K:3A', false, 'AB2', null);
	testOptions('K:3c', false, 'AB ', null);
	testOptions('K:3c', false, 'AA ', null);
	testOptions('K:3c', false, 'AB2', null);
	testOptions('K:3A', false, 'AB ', null);
	testOptions('K:3A', false, 'AB2', null);
	testOptions('K:3c', false, 'AB ', null);
	testOptions('K:3c', false, 'AA ', null);
	testOptions('KTD:20X', false, 'if if1 if2 if3', null);
	testOptions('KTD:20X', false, 'if0 if if2 if3', null);
	testOptions('KT:[if minuscule]15X[IF majuscule]100X[if minuscule]', false, 'if if if if', 'If minusculeif If If If    If majuscule                                                                                                    If minuscule');
	testOptions('KT:100X', false, '\nif vIrEBlC(wstr)=\'\' then\nerrbox("")\nelse\nFoRmat$(\'\',\'\',\'\')\n', '\nIf vireblc(wstr)=\'\' Then\nErrbox("")\nElse\nformat$(\'\',\'\',\'\')\n');
	testOptions('KA:2B', false, 'abc', null);
	testOptions('KA:2B', true, 'abc', null);
	testOptions('KA:2B', false, 'aB', null);
	testOptions('KA:2B', true, 'aB', null);
	testOptions('KA:10a', false, 'A', null);
	testOptions('KA:10a', true, 'A', null);
	testOptions('KL:[debut]2B[.]2#[.]3A[.]3#[.]4a[fin]', false, 'a612bCd345eFgH', 'debutA6.12.CvgDecimal.345.efghfin');
	testOptions('KL:[debut]2B[.]2#[.]3A[.]3#[.]4a[fin]', true, 'a612bCd345eFgH', 'debutA6.12.CvgDecimal.345.efghfin');*/
});


test("Edit Format",11 , function() {
	testEditFormat("D:[debut]DD[.]MM[.]YY[fin]","Dz:DD[/]MM[/]YY");
	testEditFormat("D:YYYY[_]MM","Dz:MM[/]YYYY");
	testEditFormat("D:YY[_]MM","Dz:MM[/]YY");
	testEditFormat("D:MM[_]DD","Dz:DD[/]MM");
	testEditFormat("D:MM","Dz:MM");
	testEditFormat("Kz:##[:]##","Kz:####");
	testEditFormat("Kz:##[:]##[:]##","Kz:######");
	// Numeric Edit Format - No thousand sep - No filling char   
	testEditFormat("N3zv*:14.#","Nz:14.#");
	testEditFormat("N3zv0:14.#", "Nz:14.#");
	testEditFormat("N-3zv*:14.#","Nz:14.#");
	testEditFormat("N-3zv0:14.#", "Nz:14.#");
});


test("X3 -> Edit -> Display Format", 24, function() {
	testX3ToEditToDisp('fr', "K:##[.]##[.]##[.]##[.]##", "0123456789", "01.23.45.67.89","0123456789");	
	testX3ToEditToDisp("fr",  'N+z3:15.5#', '12345678911.03205', '12 345 678 911,03205', '12345678911,03205');
	testX3ToEditToDisp("fr",  "D:[debut]DD[.]MM[.]YY[fin]", '20090301', 'debut01.03.09fin', '01/03/09');
	testX3ToEditToDisp ("fr", "D:DD[-]MM[-]YY", "20090301", "01-03-09", "01/03/09");
	testX3ToEditToDisp ("en", "D:DD[-]MM[-]YY", "20090301", "01-03-09", "03/01/09");
	testX3ToEditToDisp("fr",  "N-3zv*:10.3", "1254.256", "+* *** **1 254,256", "1254,256"); 
	// TODO Formatter.unformat must preserve the year 2009 - we have to pass dateRef (20090301) as parameter in format/unformat
	// If year/month are missing we must choose the year/month of dateRef
	// TODO testX3ToEditToDisp ("fr", "D:DD[-]MM", "20090301", "01-03", "01/03");
	// TODO testX3ToEditToDisp ("en", "D:DD[-]MM", "20090301", "01-03", "03/01");
	// These cases are working because year=2013 (current year)
	testX3ToEditToDisp ("fr", "D:DD[-]MM", "20130301", "01-03", "01/03");
	testX3ToEditToDisp ("en", "D:DD[-]MM", "20130301", "01-03", "03/01");
});

test("Parse user input value ", 81 , function() {
	// full date input with out separators
	testEditToDisplay('fr', "D:DD[/]MM[/]YY", "281112", "28/11/12");
	testEditToDisplay('en', "D:MM[/]DD[/]YY", "112812", "11/28/12");
	testEditToDisplay('fr', "D:DD[/]MM[/]YY", "28112012", "28/11/12");
	testEditToDisplay('en', "D:MM[/]DD[/]YY", "11282012", "11/28/12");
	testEditToDisplay('fr', "D:DD[/]MM[/]YY", "021112", "02/11/12");
	testEditToDisplay('en', "D:MM[/]DD[/]YY", "11282012", "11/28/12");	
	// Special cases
	testEditToDisplay('fr', "D:DD[/]MM[/]YYYY", "11113", "11/11/2003",{dateOrder:'DMY'});
	testEditToDisplay('fr', "D:DD[/]MM[/]YYYY", "11113", "11/11/2003",{dateOrder:'MDY'});
	testEditToDisplay('fr', "D:DD[/]MM[/]YYYY", "11113", "03/11/2011",{dateOrder:'YMD'});	
	// Test 4 digit date input with 2 digits in format
	testEditToDisplay('fr', "D:DD[/]MM[/]YY",   "2011113", "03/11/11",{dateOrder:'YMD'});	
	testBadEditToDisplay('fr', "D:DD[/]MM[/]YYYY", "02213", "Bad month 21",{dateOrder:'DMY'});
	testEditToDisplay('fr', "D:DD[/]MM[/]YYYY", "02213", "21/02/2003",{dateOrder:'MDY'});
	testBadEditToDisplay('fr', "D:DD[/]MM[/]YYYY", "02213", "Bad month 21",{dateOrder:'YMD'});	
	testBadEditToDisplay('fr', "D:DD[/]MM[/]YYYY", "20213", "Bad month 21",{dateOrder:'DMY'});
	testBadEditToDisplay('fr', "D:DD[/]MM[/]YYYY", "20213", "Bad month 20",{dateOrder:'MDY'});
	testBadEditToDisplay('fr', "D:DD[/]MM[/]YYYY", "20213", "Bad month 21",{dateOrder:'YMD'});
	testBadEditToDisplay('fr', 'D:DD[/]MM[/]YYYY', '1012', "Test year expected");
	testBadEditToDisplay('fr', 'D:DD[/]MM[/]YYYY', '10', "Test month expected");
	testBadEditToDisplay('fr', "D:DD[/]MM[/]YY", "412/08/12", "Bad day number");
	testBadEditToDisplay('fr', "D:DD[/]MM[/]YY", "12/858/12", "Bad month number");
	testBadEditToDisplay('fr', "D:DD[/]MM[/]YY", "31/02/12", "Bad date");
	// full date input with separators
	testEditToDisplay('fr', "D:DD[/]MM[/]YY", "28/11/12", "28/11/12");
	testEditToDisplay('en', "D:MM[/]DD[/]YY", "11/28/12", "11/28/12");
	testEditToDisplay('fr', "D:DD[/]MM[/]YY", "28/11/2012", "28/11/12");
	testEditToDisplay('en', "D:MM[/]DD[/]YY", "11/28/2012", "11/28/12");
	// Date with undefined values - take into account serverValue to fill udefined values (year) instead of current year
	testEditToDisplay('fr', "D:DD[/]MM[/]YY", "2811", "28/11/99",null, "19990502");
	testEditToDisplay('fr', "D:DD[/]MM[/]YY", "28/11", "28/11/99",null, "19990502");
	testEditToDisplay('en', "D:MM[/]DD[/]YY", "1128", "11/28/99",null, "19990502");
	testEditToDisplay('en', "D:MM[/]DD[/]YY", "11/28", "11/28/99",null, "19990502");
	// Dates
	testEditToDisplay('fr', "D:MM[/]YYYY", "1205", "12/2005");
	testEditToDisplay('en', "D:MM[/]YYYY", "1205", "12/2005");
	testEditToDisplay('fr', "D:MM[/]YY", "125", "12/05");
	testEditToDisplay('en', "D:MM[/]YY", "125", "12/05");
	testEditToDisplay('fr', "D:MM[/]DD[/]YYYY", "13/02/2012", "02/13/2012");
	testBadEditToDisplay('en', "D:MM[/]DD[/]YYYY", "13/02/2012", "Date is not valid");

	testBadEditToDisplay('fr', "D:DD[/]MM[/]YY", "021112fqsfqsf", "Bad input data");
	testBadEditToDisplay('fr', "Dz:DD[/]MM[/]YY", "30/06/12dd", "Bad input data");
	testEditToDisplay('fr', "D:DD[/]MM", "0211122574", "02/11");
	testEditToDisplay('fr', "D:DD[/]MM[/]YY", "1/2/3", "01/02/03");
	testEditToDisplay('fr', "D:DD[/]MM[/]YY", "1\\2\\3", "01/02/03");
	testEditToDisplay('fr', "D:DD[/]MM[/]YY", "1 2 3", "01/02/03");
	testEditToDisplay('fr', "D:DD[/]MM[/]YY", "1  2  3", "01/02/03");
	testEditToDisplay('fr', "D:DD[/]MM[/]YY", "1 - 2 - 3", "01/02/03");
	testBadEditToDisplay('fr', "D:DD[/]MM[/]YY", "1 - 2 - 3 - r", "Bad input data");
	testBadEditToDisplay('fr', "D:DD[/]MM", "1 - 2 - 3 - r", "Bad input data");
	testEditToDisplay('fr', "D:DD[/]MM", "1 - 2 - 3 -", "01/02");
	testBadEditToDisplay('fr', "D:DD[/]MM", "1 - 2 - r", "Bad input data");
	testEditToDisplay('fr', "D:DD[/]MM", "1 . 2 . 5", "01/02");
	
	// Use case with displayed dateOrder different from edit dateOrder (country format)
	// Date displayed in english/french but input with french/english dateOrder
	testEditToDisplay('fr', "D:MM[/]DD[/]YYYY", "31/12/05", "12/31/2005");
	testEditToDisplay('en', "D:DD[/]MM[/]YYYY", "12/31/05", "31/12/2005");
	testEditToDisplay('fr', "D:MM[/]DD", "311205", "12/31");
	testEditToDisplay('en', "D:DD[/]MM", "123105", "31/12");
	// Hours
	testEditToDisplay('fr', "K:##[:]##", "12:15", "12:15");
	testEditToDisplay('fr', "K:##[:]##", "1215", "12:15");
	// Phone numbers
	testEditToDisplay('fr', "K:##[.]##[.]##[.]##[.]##", "0123456789", "01.23.45.67.89");
	testEditToDisplay('fr', "K:##[.]##[.]##[.]##[.]##", "01.23.45.67.89", "01.23.45.67.89");
	// Bad date value
	testUnformatErr('fr', 'D:DD[/]MM[/]YYYY', '29/2/2011', "Test date is not valid");
	testUnformatErr('fr', 'D:DD[/]MM[/]YYYY', '31/04/2011', "Test date is not valid");
	testUnformatErr('fr', 'D:DD[/]MM[/]YYYY', '32/04/2011', "Test bad day number");
	testUnformatErr('fr', 'D:DD[/]MM[/]YYYY', '-1/04/2011', "Test bad day number");
	testUnformatErr('fr', 'D:DD[/]MM[/]YYYY', '0/15/2011', "Test bad month number");
	testUnformatErr('fr', 'D:DD[/]MM[/]YYYY', '32/15/2011', "Test bad month number");
	//Size overflow and other errors
	testBadEditToDisplay('fr', "K:>10X", "ABCDEFGHIJK", "Size overflow 11");
	testBadEditToDisplay('fr', 'N:4.2', '5856,1254', "Bad decimal part");
	testBadEditToDisplay('fr', 'K:##[.]##[.]##[.]##[.]##', '01.23.45...67', "value does not match format");
	testBadEditToDisplay('fr', "K:##[.]##[.]##[.]##[.]##", "01234567890", "Size overflow");	
	// Numeric
	testBadEditToDisplay('fr', "Nz3:15#", "321,45", "No decimal part expected");	
	testBadEditToDisplay('fr', "Nz3:15.1#", "678,91", "Bad decimal part");	
	// Issue #1077 - Fix issue and improve number format/unformat
	testUnformat('fr', "N:3#", "+123", "123");		
	testUnformatErr('fr', "N:3#", "+123", "Unexpected positive sign", true);
	testOptions("N+-03z:8.2#", false,  "+12", "+00 000 012,00", null);	
	testOptions("N:3#", false,  "+123", "123", null);	
	testFormatErr('fr', "N+z:12#",  "-12", "Positive number expected", true);	
	testEditToDisplay('fr', 'N:3#', '123', '123');
	testEditToDisplay('fr', 'N:3#', '-123', '-123');
	testEditToDisplay('fr', 'N:3#', '+123', '123');
	testEditToDisplay('fr', 'N:3.1#', '123,4', '123,4');
	testEditToDisplay('fr', 'N:3.1#', '-123,4', '-123,4');
	testEditToDisplay('fr', 'N:3.1#', '+123.4', '123,4');
});

test("Strict mode", 14, function() {
	// Check integer part in any cases 
	testFormatErr('fr', 'N:4', '58562', "Test integer part overflow - 5 digits - Expected 4");
	testFormatErr('fr', 'N:####', '58562', "Test integer part overflow - 5 digits - Expected 4");
	testFormatErr('fr', 'N:##2', '58562', "Test integer part overflow - 5 digits - Expected 4");
	// strict=true -> Check decimal part length
	testFormatErr('fr', 'N:4.2', '5856.1254', "Test strict option - Bad decimal part - 4 digits - Expected 2", true);
	testFormatErr('fr', 'N:####.##', '5856.1254', "Test strict option - Bad decimal part - 4 digits - Expected 2", true);
	testFormatErr('fr', 'N:####.1#', '5856.1254', "Test strict option - Bad decimal part - 4 digits - Expected 2", true);
	// No decimal in X3 format
	// -> Format - Strict error
	testFormatErr('fr', "Nz3:15#",  "321.45", "No decimal part expected", true);	
	// -> Format - !Strict value is truncated
	testOptions("Nz3:15#", true, "321.45", "321", null);
	// -> unFormat - Strict error
	testUnformatErr('fr', "Nz3:15#", "321,45", "No decimal part expected", true);
	// -> unFormat - !Strict value is truncated
	testUnformat('fr', "Nz3:15#", "321,45", "321");		
	// Check input length control - strict mode 
	testFormatErr('fr', 'K:10X', 'ABCDEFGHIJK', "Size overflow - 11 chars - Expected 10", true);
	testFormatErr('fr', 'K:>10X', 'ABCDEFGHIJK', "Size overflow - 11 chars - Expected 10", true);
	testFormatErr('fr', 'K:10X>15X', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', "Size overflow - 26 chars - Expected 25", true);
	
});