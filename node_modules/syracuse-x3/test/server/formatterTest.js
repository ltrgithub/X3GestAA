"use strict";
var CFormatterJS = require('syracuse-x3/lib/fusion/client/CAdapiClient').CFormatterJS;
var CAdapiFormat = require('syracuse-x3/lib/fusion/CAdapiFormat').CAdapiFormat;

QUnit.module('X3 Formatter tests');

var SETTINGS = {
	fr: {
		decimalChar: ',',
	},
	en: {
		decimalChar: '.',
	}
}

function testFormat(lang, fmt, raw, value, expected) {
	var formatter = new CFormatterJS(SETTINGS[lang]);
	var format = new CAdapiFormat(fmt)
	var got;
	try {
		got = formatter.formatField(format, value, raw);
	} catch (ex) {
		console.error(ex);
		got = ex.message;
	}
	strictEqual(got, expected, lang + ": " + format + ": '" + value + "' -> '" + got + "'");
}

function testParse(lang, format, raw, value, expected) {
	// see later
}

test("basic formatting", 24, function() {
	testFormat('fr', "Nz:11F", true, "123456789.12", "123456789,12");
	testFormat('fr', "Nz:11F", true, "0.00987654321", "0,0098765432");
	testFormat('fr', "Nz:11F", true, "12345678900", "12345678900");
	testFormat('fr', "Nz:11F", true, "12345.123456", "12345,123456");
	testFormat('fr', "K:5b", false, "MAJUSCULE", "majus");
	testFormat('fr', "K:5Xc", false, "006", "Unexpected format character [c] - Position[5] - Format='K:5Xc'");
	testFormat('fr', "K:4X[-]4X[-]4X[-]4X[-]", false, "Cocodd", "Coco-dd  -    -    -");
	testFormat('fr', "K:4X[-]4X[-]4X[-]4X[-]", false, "Cocodd", "Coco-dd  -    -    -");
	testParse('fr', "K:4X[-]4X[-]4X[-]4X[-]", true, "Coco -     -     -     -", "unFormatField - Bad character[ ] - Pos[5] - Input[Coco -     -     -     -] - Format='K:4X[-]4X[-]4X[-]4X[-]' - isX3Data[true] - Input[Coco -     -     -     -] - Format='K:4X[-]4X[-]4X[-]4X[-]'");
	testFormat('fr', "K:4X[-]4X[-]4X[-]4X[-]", false, "Coco    ", "Coco-    -    -    -");
	testFormat('fr', "K:#[ ]##[ ]##[ ]#B[ ]###[ ]###", false, "2500613564564", "2 50 06 13 564 564");
	testFormat('fr', "K:#[ ]##[ ]##[ ]#B[ ]###[ ]###", true, "2500613564564", "2 50 06 13 564 564");
	testFormat('fr', "K:#[ ]##[ ]##[ ]#B[ ]###[ ]###[ ]##", false, "2500613564564", "2 50 06 13 564 564");
	testFormat('fr', "K:#[ ]##[ ]##[ ]#B[ ]###[ ]###[ ]##", true, "2500613564564", "2 50 06 13 564 564");
	testParse('fr', "K:#[ ]##[ ]##[ ]#B[ ]###[ ]###[ ]##", true, "2 50 06 13 564 564", "2500613564564");
	testFormat('fr', "DZ:DD[/]MM[/]YY", true, "20080221", "21/02/08");
	testFormat('fr', "DZ:DD[/]MM[/]YY", true, "20080221", "21/02/08");
	testFormat('fr', "DZ:DD[/]MM[/]YY", false, "21/02/08", "21/02/08");
	testFormat('fr', "DZ:DD[/]MM[/]YY", false, "21/02", "FormatField - Bad input date [Year is missing] - Class='CJFmtCtrlDateYear' - isX3Data[false] - Input[21/02] - DateSens[DMY] - DateSep[/] - DatePivot[1957] - ZOn[false] - Format='DZ:DD[/]MM[/]YY'");
	testFormat('fr', "DZ:DD[/]MM[/]YY", true, "21/02", "21/02/13");
	testParse('fr', "DZ:DD[/]MM[/]YY", true, "21/02/08", "20080221");
	testParse('fr', "DZ:DD[/]MM[/]YY", true, "21/02", "20130221");
	testFormat('fr', "DZ:DDMMYYYY", true, "20090506", "06052009");
	testFormat('fr', "DZ:DD[/]MM[/]YY", false, "27/12/07", "27/12/07");
	testFormat('fr', "DZ:DD[/]MM[/]YY", true, "20090506", "06/05/09");
	testFormat('fr', "DzZ:DD[/]MM[/]YY", true, "20090506", "06/05/09");
	testFormat('fr', "Dz:DD[/]MM[/]YY", true, "20090506", "06/05/09");
	testFormat('fr', "Dz:DD[ ]MMMMMMMMMM[ ]YYYY", true, "20080102", "02 Janvier    2008");
});