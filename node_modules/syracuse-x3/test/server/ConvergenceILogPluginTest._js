"use strict";
var locale = require('syracuse-core/lib/locale');
var CvgClient = require('syracuse-x3/lib/convergence/client/CvgClient').CvgClient;
var CvgSession = require('syracuse-x3/lib/cvgSession');
var mongodb = require('streamline-mongodb');
var CvgIst = require('syracuse-x3/lib/convergence/types/CvgIst').CvgIst;
var x3helpers = require('syracuse-x3/lib/helpers');
var helpers = require('syracuse-core/lib/helpers');
var Session = require("syracuse-session/lib/session").Session;
var sessionManager = require("syracuse-session/lib/sessionManager").sessionManager;

var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var jsonImport = require("syracuse-import/lib/jsonImport");
var globals = require('streamline/lib/globals');

var flows = require("streamline/lib/util/flows");
var localConfig = x3helpers.config("x3fusion", null, {});

var done;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});
var context = {
	request: {
		session: {
			id: ""
		}
	},
	endpoint: {
		x3server: function(_) {
			return {
				serverHost: function(_) {
					return 'test';
				},
				serverPort: function(_) {
					return 'test';
				},
				serverName: function(_) {
					return 'test';
				},
			};
		}
	},
	httpSession: {
		getUserProfile: function(_) {
			return null;
		}
	}
};
var streamTest = helpers.defineClass(function() {
	this.readed;
	this.offset = 0;
	this.writed;
}, null, {
	read: function(_, size) {

		var res = this.readed.slice(this.offset, this.offset + size);
		this.offset += size;
		return res;
	},
	write: function(_, buf) {
		this.writed = buf;


	},
	destroy: function() {

	},
	end: function() {}
});
var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_convdemo");

var requestCount = 0;
var MAX_REQUESTS = 11;

var baseUrl = "http://localhost:3004";
var contractUrl = "/sdata/syracuse/collaboration/mongodb_demo/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";
var streams = require('streamline/lib/streams/streams');

var cookie = "";
var x3sId;
var applicationId;
var adminEp;

function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_convdemo");
}

function get(_, cookie, suburl, sessionId, statusCode, fullResponse) {
	return adminTestFixtures.get(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$sessions('" + sessionId + "')/" + suburl, statusCode, fullResponse);
}

function post(_, cookie, suburl, sessionId, data, statusCode, fullResponse) {
	return adminTestFixtures.post(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$sessions('" + sessionId + "')/" + suburl, data, statusCode, fullResponse);
}

function put(_, cookie, suburl, sessionId, data, statusCode, fullResponse) {
	return adminTestFixtures.put(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$sessions('" + sessionId + "')/" + suburl, data, statusCode, fullResponse);
}

function del(_, cookie, suburl, sessionId, statusCode, fullResponse) {
	return adminTestFixtures.del(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$sessions('" + sessionId + "')/" + suburl, statusCode, fullResponse);
}


asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets["mongodb_convdemo"].hostname, endPoint.datasets["mongodb_convdemo"].port, {});
	var db = adminTestFixtures.newMongoDb(endPoint.datasets["mongodb_convdemo"].database, server, {});
	db = db.open(_);
	db.dropDatabase(_);


	ok(true, "mongodb initialized");
	start();
});

//start syracuse server
asyncTest("initialize syracuse test server", 1, function(_) {
	require('syracuse-main/lib/syracuse').startServers(_, port);
	ok(true, "server initialized");
	var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_convdemo);
	jsonImport.jsonImport(_, db, "syracuse-admin-demo.json", {});
	start();
});

var cvgClient;
var stream;
asyncTest("listenNode -  callilog - new gantt/scale", function(_) {
	var session = CvgSession.newSession(_, "test1");

	stream = new streamTest();
	stream.readed = new Buffer([0x01, 0x00, 0x08, 0x0e, 0x1e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00]); // NDGIST binary

	// change plugin timeout
	localConfig.plugin = localConfig.plugin || {};
	var killTimeout = localConfig.plugin.killTimeoutOnCreate = 2000; // more than plugin execution
	cvgClient = new CvgClient(_, session, stream, {}, null, context);

	cvgClient.cdlang = "FRA";
	ok(true, "new CvgClient ");

	ok(true, "CASE receive ack from client and plugin in time < killtimeout");
	// receive callilog and check generation to the client
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "1",
		IModule: "unitTest"
	});
	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","id":null,"module":"unitTest","method":"new","methodId":1}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new gantt client reply ok");
	strictEqual(!stream.writed, true, "no data write to x3 runtime"); //

	cvgClient.processSpecialAction(_, {
		act: 522,
		param: {
			method: "new",
			plugin: {
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	});
	strictEqual(!stream.writed, true, "data write after receive client reply ack");
	cvgClient.processSpecialAction(_, {
		act: 523,
		param: {

		}
	});
	// send register to validate the plugin is ok
	strictEqual(stream.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "data write after receive client ack and plugin ack");
	stream.writed = null;
	//strictEqual(stream.writed,"","data write with client send response immediatly ok ");


	ok(true, "CASE receive ack from client in time < killtimeout but plugin ack too late");
	cvgClient = new CvgClient(_, session, stream, {}, null, context);
	stream.offset = 0;

	cvgClient.cdlang = "FRA";
	ok(true, "new CvgClient ");
	// receive callilog and check generation to the client
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "1",
		IModule: "unitTest"
	});
	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","id":null,"module":"unitTest","method":"new","methodId":1}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new gantt client reply ok");
	strictEqual(!stream.writed, true, "no data write to x3 runtime"); //

	cvgClient.processSpecialAction(_, {
		act: 522,
		param: {
			method: "new",
			plugin: {
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	});
	strictEqual(!stream.writed, true, "data write after receive client reply ack");
	flows.sleep(_, 3000);
	strictEqual(stream.writed.toString("hex"), "00000000203939303d014e015831355832460074696d656f757420657870697265642d310a0000000000", "data write after receive client ack and timeout apply before receive plugin ack");
	stream.writed = null;

	cvgClient.processSpecialAction(_, {
		act: 523,
		param: {}
	});
	// send register to validate the plugin is ok
	strictEqual(!stream.writed, true, "nothin written after receive plugin ack too late ");


	ok(true, "CASE receive ack from plugin in time < killtimeout but client ack too late");
	cvgClient = new CvgClient(_, session, stream, {}, null, context);
	stream.offset = 0;

	cvgClient.cdlang = "FRA";
	ok(true, "new CvgClient ");
	// receive callilog and check generation to the client
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "1",
		IModule: "unitTest"
	});
	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","id":null,"module":"unitTest","method":"new","methodId":1}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new gantt client reply ok");
	strictEqual(!stream.writed, true, "no data write to x3 runtime"); //
	cvgClient.processSpecialAction(_, {
		act: 523,
		param: {}
	});

	strictEqual(!stream.writed, true, "data write after receive plugin reply ack");
	flows.sleep(_, 3000);
	strictEqual(!stream.writed, true, "data write after receive plugin ack and timeout apply before receive client ack");
	stream.writed = null;


	cvgClient.processSpecialAction(_, {
		act: 522,
		param: {
			method: "new",
			plugin: {
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	});
	// send register to validate the plugin is ok
	strictEqual(stream.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "data write after receive plugin ack and timeout apply and after receive client ack");
	stream.writed = null;


	ok(true, "CASE nothin receive from the client and the plugin in time ");
	cvgClient = new CvgClient(_, session, stream, {}, null, context);
	stream.offset = 0;

	cvgClient.cdlang = "FRA";
	ok(true, "new CvgClient ");
	// receive callilog and check generation to the client
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "1",
		IModule: "unitTest"
	});
	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","id":null,"module":"unitTest","method":"new","methodId":1}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new gantt client reply ok");

	strictEqual(!stream.writed, true, "no data write to x3 runtime"); //
	flows.sleep(_, 3000);

	strictEqual(stream.writed.toString("hex"), "00000000203939303d014e015831355832460074696d656f757420657870697265642d310a0000000000", "data write after receive plugin ack and timeout apply and after receive client ack");
	stream.writed = null;


	cvgClient.processSpecialAction(_, {
		act: 523,
		param: {}
	});
	strictEqual(!stream.writed, true, "data write after receive plugin ack and timeout apply before receive client ack");

	cvgClient.processSpecialAction(_, {
		act: 522,
		param: {
			method: "new",
			plugin: {
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	});
	// send register to validate the plugin is ok
	strictEqual(!stream.writed, true, "data write after receive client ack and timeout apply after receive client ack");


	start();
});

asyncTest("listenNode -  callilog - update gantt/scale", function(_) {
	var session = CvgSession.newSession(_, "test1");

	stream = new streamTest();
	stream.readed = new Buffer([0x01, 0x00, 0x08, 0x0e, 0x1e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00]); // NDGIST binary

	// change plugin timeout
	localConfig.plugin = localConfig.plugin || {};
	var killTimeout = localConfig.plugin.killTimeoutOnCreate = 100; // more than plugin execution
	cvgClient = new CvgClient(_, session, stream, {}, null, context);

	cvgClient.cdlang = "FRA";
	ok(true, "new CvgClient ");


	ok(true, "NEW SCALE");
	// new scale
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "6",
		INumber: 12,
		IModule: "unitTest"
	});

	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"scale","type":"asynchronous","id":12,"module":"unitTest","method":"new","methodId":6}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new scale");
	cvgClient.razModification();
	stream.writed = null;

	ok(true, "NEW gantt");
	// new gantt
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "1",
		IModule: "unitTest"
	});
	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","id":null,"module":"unitTest","method":"new","methodId":1}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new gantt");
	cvgClient.razModification();
	stream.writed = null;

	ok(true, "UPDATE gantt");
	//update gantt
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "2",
		INumber: 12,
		IModule: "unitTest"
	});

	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM update gantt, no target plugin serialized in response to classic page client");


	cvgClient.cvgPlugin.ND_IHM["ilog"].generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.cvgPlugin.ND_IHM["ilog"].response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","id":12,"module":"unitTest","method":"update","methodId":2}}}}}', "ND_IHM update gantt, target plugin serialized in response to plugin client");
	// check write response to x3 after call plugin controler
	cvgClient.razModification();

	cvgClient.processSpecialAction(_, {
		act: 524,
		param: {
			method: "update",
			plugin: {
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	});
	strictEqual(stream.writed.toString("hex"), "00000000256e616d653d013030310a76616c75653d0176616c752066697220756e69742074657374200a0000000000", "check write of ND_IHM to runtime after received property from update "); //
	stream.writed = null;



	ok(true, "UPDATE scale");
	//update scale
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "7",
		INumber: 12,
		IModule: "unitTest"
	});


	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM update gantt, no target plugin serialized in response to classic page client");


	cvgClient.cvgPlugin.ND_IHM["ilog"].generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.cvgPlugin.ND_IHM["ilog"].response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"scale","type":"asynchronous","id":12,"module":"unitTest","method":"update","methodId":7}}}}}', "ND_IHM update gantt, target plugin serialized in response to plugin client");


	cvgClient.razModification();
	cvgClient.processSpecialAction(_, {
		act: 524,
		param: {
			method: "update",
			plugin: {
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	});
	strictEqual(stream.writed.toString("hex"), "00000000256e616d653d013030310a76616c75653d0176616c752066697220756e69742074657374200a0000000000", "check write of ND_IHM to runtime after received property from update "); //
	stream.writed = null;

	ok(true, "DELETE gantt");
	// gantt delete
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "3",
		INumber: 12,
		IModule: "unitTest"
	});

	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","id":12,"module":"unitTest","method":"delete","methodId":3}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM update gantt, no target plugin serialized in response to classic page client");


	cvgClient.cvgPlugin.ND_IHM["ilog"].generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.cvgPlugin.ND_IHM["ilog"].response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","id":12,"module":"unitTest","method":"delete","methodId":3}}}}}', "ND_IHM update gantt, target plugin serialized in response to plugin client");


	// check write response to x3 after call plugin controler
	cvgClient.processSpecialAction(_, {
		act: 524,
		param: {
			method: "delete",
			plugin: {
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	});
	strictEqual(stream.writed.toString("hex"), "00000000256e616d653d013030310a76616c75653d0176616c752066697220756e69742074657374200a0000000000", "check write of ND_IHM to runtime after received property from delete "); //
	cvgClient.razModification();
	stream.writed = null;

	ok(true, "DELETE scale");
	// scale delete
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "8",
		INumber: 12,
		IModule: "unitTest"
	});

	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"scale","type":"asynchronous","id":12,"module":"unitTest","method":"delete","methodId":8}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM update gantt, no target plugin serialized in response to classic page client");

	cvgClient.cvgPlugin.ND_IHM["ilog"].generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.cvgPlugin.ND_IHM["ilog"].response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"scale","type":"asynchronous","id":12,"module":"unitTest","method":"delete","methodId":8}}}}}', "ND_IHM update gantt, target plugin serialized in response to plugin client");


	// check write response to x3 after call plugin controler
	cvgClient.processSpecialAction(_, {
		act: 524,
		param: {
			method: "delete",
			plugin: {
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	});
	strictEqual(stream.writed.toString("hex"), "00000000256e616d653d013030310a76616c75653d0176616c752066697220756e69742074657374200a0000000000", "check write of ND_IHM to runtime after received property from delete "); //
	cvgClient.razModification();
	stream.writed = null;

	start();
});

asyncTest("listenNode -  callilog - test with http request", function(_) {
	var id = "id";
	var clientId = "clientId";
	var session = new Session(null, id, clientId);
	var cookie = adminTestFixtures.getCookie(_, baseUrl, "admin", "admin").join(" ");
	var sessionId = cookie.substring(cookie.indexOf("=") + 1, cookie.indexOf(";"));
	var session = sessionManager.sessionById(sessionId);
	var cvgSession = CvgSession.newSession(_, "test1");

	session.updateCvgSession(cvgSession);

	stream = new streamTest();
	stream.readed = new Buffer([0x01, 0x00, 0x08, 0x0e, 0x1e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00]); // NDGIST binary

	// intiialization
	localConfig.plugin = localConfig.plugin || {};
	var killTimeout = localConfig.plugin.killTimeoutOnCreate = 100; // more than plugin execution
	cvgClient = new CvgClient(_, session, stream, {}, null, context);
	cvgSession._cvgClient = cvgClient;
	cvgClient.cdlang = "FRA";

	cvgClient.generateResponse(_, false, false);


	ok(true, "new CvgClient - send fake next field request");

	/*   console.log("test");
    console.log(JSON.stringify(put(_, cookie, "requestSvc?act=1025&trackngId=1", cvgSession.sid, {
		act: 1025,
		fld: {
			fmtKind: "EDIT",
			ist: {
				win: "B",
				xid: "AA1",
				nl: 0
			}
		}
	}, 200)));
    // new gantt
    cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
        IAction: "1",
        IModule: "unitTest"
    });


    console.log(JSON.stringify(put(_, cookie, "requestSvc?act=522&trackngId=2", cvgSession.sid, {
		act: 522,
		param: {
			method: "new",
			plugin: {
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	})));*/

	start();

});



test("kill", function() {
	done = true;
	start();
});