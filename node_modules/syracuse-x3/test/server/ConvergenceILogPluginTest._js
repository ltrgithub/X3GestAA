"use strict";

var locale = require('syracuse-core/lib/locale');
var CvgClient = require('syracuse-x3/lib/convergence/client/CvgClient').CvgClient;
var CvgSession = require('syracuse-x3/lib/cvgSession');
var CvgIst = require('syracuse-x3/lib/convergence/types/CvgIst').CvgIst;
var x3helpers = require('syracuse-x3/lib/helpers');
var helpers = require('syracuse-core/lib/helpers');

var flows = require("streamline/lib/util/flows");
var localConfig = x3helpers.config("x3fusion", null, {});

var done;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});
var context = {
	request: {
		session: {
			id: ""
		}
	},
	endpoint: {
		x3server: function(_) {
			return {
				serverHost: function(_) {
					return 'test';
				},
				serverPort: function(_) {
					return 'test';
				},
				serverName: function(_) {
					return 'test';
				},
			};
		}
	},
	httpSession: {
		getUserProfile: function(_) {
			return null;
		}
	}
};
var streamTest = helpers.defineClass(function() {
	this.readed;
	this.offset = 0;
	this.writed;
}, null, {
	read: function(_, size) {
		var res = this.readed.slice(this.offset, this.offset + size + 1);
		this.offset += size;

		return res;
	},
	write: function(_, buf) {
		this.writed = buf;
	},
	destroy: function() {

	},
	end: function() {}
});

var cvgClient;
var stream;
asyncTest("listenNode -  callilog - new gantt/scale", function(_) {
	var session = CvgSession.newSession(_, "test1");

	stream = new streamTest();
	stream.readed = new Buffer([0x01, 0x00, 0x08, 0x0e, 0x1e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00]); // NDGIST binary

	// change plugin timeout
	localConfig.plugin = localConfig.plugin || {};
	var killTimeout = localConfig.plugin.killTimeoutOnCreate = 10000; // more than plugin execution
	cvgClient = new CvgClient(_, session, stream, {}, null, context);

	cvgClient.cdlang = "FRA";
	ok(true, "new CvgClient ");

	// receive callilog and check generation to the client
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "1",
		IModule: "unitTest"
	});
	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","id":null,"module":"unitTest","method":"new","methodId":1}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new gantt killtimeout > response tim of plugin controler ok");
	strictEqual(!stream.writed, true, "no data write before client send reply"); //

	cvgClient._replyPlugin(_, {
		act: 522,
		param: {
			method: "new",
			plugin: {
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	});
	strictEqual(!stream.writed, true, "data write with client send response  not send ok");
	flows.sleep(_, 5000);
	strictEqual(stream.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "data write with client send response and write after process plugin 5m ok not send ok");
	stream.writed = null;
	//strictEqual(stream.writed,"","data write with client send response immediatly ok ");

	// new callilog but with client response that arrive after killTimeut > plugin notif response (normally same behavior)

	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "1",
		IModule: "unitTest"
	});

	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","id":null,"module":"unitTest","method":"new","methodId":1}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new gantt killtimeout > response tim of plugin controler ok");
	flows.sleep(_, killTimeout + 1000); // wait killtimeout devided by 2 to be sure it receive a response before killing response
	strictEqual(stream.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "write error killTemout expire ok"); //
	cvgClient._replyPlugin(_, {
		act: 522,
		param: {
			method: "new",
			plugin: {
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	});
	strictEqual(stream.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "data write with client send response after killtimeout + 1s ok ");
	stream.writed = null;


	killTimeout = localConfig.plugin.killTimeoutOnCreate = 3000; // less than plugin execution

	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "1",
		IModule: "unitTest"
	});

	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","id":null,"module":"unitTest","method":"new","methodId":1}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new gantt killtimeout > response tim of plugin controler ok");
	strictEqual(!stream.writed, true, "no data write before client send reply"); //

	cvgClient._replyPlugin(_, {
		act: 522,
		param: {
			method: "new",
			plugin: {
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	});
	strictEqual(stream.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "data write with client send response immediatly ok -> error send ok"); //
	stream.writed = null;


	killTimeout = localConfig.plugin.killTimeoutOnCreate = 5000; // less than plugin execution

	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "1",
		IModule: "unitTest"
	});

	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","id":null,"module":"unitTest","method":"new","methodId":1}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new gantt killtimeout > response tim of plugin controler ok");
	flows.sleep(_, killTimeout + 1000); // wait killtimeout devided by 2 to be sure it receive a response before killing response
	strictEqual(stream.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "data write after killTimeout + 1s "); //
	stream.writed = null;


	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "6",
		IModule: "unitTest"
	});

	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"scale","type":"asynchronous","id":null,"module":"unitTest","method":"new","methodId":6}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new scale");

	start();
});

asyncTest("listenNode -  callilog - update gantt/scale", function(_) {


	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "6",
		INumber: 12,
		IModule: "unitTest"
	});

	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"scale","type":"asynchronous","id":12,"module":"unitTest","method":"new","methodId":6}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new scale");
	cvgClient.razModification();
	stream.writed = null;

	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "1",
		IModule: "unitTest"
	});
	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","id":null,"module":"unitTest","method":"new","methodId":1}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new gantt");
	cvgClient.razModification();
	stream.writed = null;

	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "2",
		INumber: 12,
		IModule: "unitTest"
	});

	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM update gantt, no target plugin serialized in response ");
	// check write response to x3 after call plugin controler
	strictEqual(stream.writed.toString("hex"), "000000000c746573743d0174657374320a0000000000", "check write of ND_IHM to runtime after received property from update "); //


	cvgClient.razModification();
	stream.writed = null;


	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "7",
		INumber: 12,
		IModule: "unitTest"
	});

	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM new scale, no target plugin serialized in response ");
	cvgClient.razModification();
	stream.writed = null;

	// gantt delete
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "3",
		INumber: 12,
		IModule: "unitTest"
	});

	cvgClient.generateResponse(_, false, false);
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"gantt","type":"asynchronous","id":12,"module":"unitTest","method":"delete","methodId":3}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM update gantt, no target plugin serialized in response ");
	// check write response to x3 after call plugin controler
	cvgClient._replyPlugin(_, {
		act: 522,
		param: {
			method: "delete",
			plugin: {
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	});
	strictEqual(stream.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "check write of ND_IHM to runtime after received property from delete "); //
	cvgClient.razModification();
	stream.writed = null;


	// scale delete
	cvgClient.activeRequest.listenNodeND_IHM(_, {}, {}, {
		IAction: "8",
		INumber: 12,
		IModule: "unitTest"
	});

	cvgClient.generateResponse(_, false, false);
	console.log(JSON.stringify(cvgClient.response));
	strictEqual(JSON.stringify(cvgClient.response), '{"head":{"statusCode":200},"body":{"sap":{"target":{"type":"plugin","plugin":{"class":"ILOG","name":"scale","type":"asynchronous","id":12,"module":"unitTest","method":"delete","methodId":8}}},"session":{"settings":{"mnu":[],"datePivot":1957,"dateOrder":0,"dateSep":"/","thousandSep":",","decimalSep":".","timeSep":":"}},"srvop":{"request":{"id":0,"v":1,"connect":1,"server":""}}}}', "ND_IHM update scale, no target plugin serialized in response ");
	// check write response to x3 after call plugin controler
	cvgClient._replyPlugin(_, {
		act: 522,
		param: {
			method: "delete",
			plugin: {
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	});
	strictEqual(stream.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "check write of ND_IHM to runtime after received property from delete "); //
	cvgClient.razModification();
	stream.writed = null;

});


test("kill", function() {
	done = true;
	start();
});