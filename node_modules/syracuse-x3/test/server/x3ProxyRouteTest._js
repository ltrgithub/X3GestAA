"use strict";

var mongodb = require('mongodb');
var config = require('config'); // must be first syracuse require
//var adminUtil = require("syracuse-collaboration/lib/util");
var x3pool = require("syracuse-x3/lib/pool");
var x3Mock = require("../fixtures/x3Mock");
var sys = require("util");
var helpers = require("syracuse-core/lib/helpers");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;

var tracer; // = console.error;

var x3MockServer;
var x3port = (config.unit_test && config.unit_test.x3mockPort) || 3005;

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;
// change default admin dataset
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var endPoint = adminTestFixtures.modifyCollaborationEndpoint("collaboration_test");
// ensure there is no local pool configuration
if (config.x3pool) delete config.x3pool;

var requestCount = 0;
var MAX_REQUESTS = 11;

var contractUrl = "/sdata/syracuse/collaboration/collaboration_test/";
var port = (config.unit_test && config.unit_test.serverPort) || 3004;
var baseUrl = "http://localhost:" + port;
var ez = require('ez-streams');

function getCookie(_, login, pass) {
	var response = new ez.devices.http.client({
		url: baseUrl + "/syracuse-main/html/main.html",
		user: login || "guest",
		password: pass || "guest"
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	return response.headers["set-cookie"];
}

function get(_, cookie, url, statusCode, facet) {
	var type = facet || "generic.$details";
	var response = ez.devices.http.client({
		method: "get",
		url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/collaboration_test/" + url,
		headers: {
			cookie: cookie,
			accept: "application/json;vnd.sage=syracuse"
		}
	}).end().response(_);
	statusCode && strictEqual(response.statusCode, statusCode || 200, "status verified");
	var resp = response.readAll(_);
	try {
		return JSON.parse(resp);
	} catch (e) {
		tracer && tracer("GET JSON error; response was: " + resp);
		throw e;
	}
}

function post(_, cookie, url, data, statusCode) {
	var response = ez.devices.http.client({
		method: "post",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 201, "status verified");
	return JSON.parse(response.readAll(_));
}

function put(_, cookie, url, data, statusCode) {
	var response = ez.devices.http.client({
		method: "put",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			x3MockServer.close();
		}
	}
});

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets["collaboration_test"].hostname, endPoint.datasets["collaboration_test"].port, {});
	var db = adminTestFixtures.newMongoDb(endPoint.datasets["collaboration_test"].database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	//
	ok(true, "mongodb initialized");
	start();
});

//start syracuse server
asyncTest("initialize syracuse test server", 1, function(_) {
	require('syracuse-main/lib/syracuse').startServers(_, port);
	ok(true, "server initialized");
	start();
});

asyncTest("create server", 1, function(_) {
	//tracer && tracer("creating server");
	x3MockServer = x3Mock.create(_, x3port);
	ok(true, "server created");
	start();
});

function onlyInfo(diags) {
	return adminTestFixtures.onlyInfo(diags);
}

var cookie;
var epId;
var appId;
var x3solutionId;

asyncTest("x3 endpoint route", 3, function(_) {
	requestCount++;
	var body;
	cookie = getCookie(_);
	var app = adminHelper.getApplication(_, "x3", "erp");
	tracer && tracer("getting x3/erp application");
	if (app) appId = app.$uuid;
	/*	else {
		// create application
		body = post(_, cookie, "applications", {
			description: "X3 Superv",
			application: "x3",
			contract: "erp",
			protocol: "x3"
		}, 201);
		appId = body.$uuid;
	}
	*/
	tracer && tracer("getting x3/erp application=" + appId);
	// create x3 server
	body = post(_, cookie, "x3solutions", {
		code: "X3 stub server",
		description: "X3 stub server",
		solutionName: "SOLSUPV6",
		serverHost: "localhost",
		serverPort: x3port,
		proxy: false,
		application: {
			$uuid: appId
		},
		serverTimeout: 60000
	}, 201);
	x3solutionId = body.$uuid;
	// create endpoint
	//tracer && tracer("x3 endpoint route creating ep");
	body = post(_, cookie, "endPoints", {
		description: "X3 superv",
		applicationRef: {
			$uuid: appId
		},
		dataset: "superv",
		enableSearch: false,
		protocol: "x3",
		x3solution: {
			$uuid: x3solutionId
		},
		x3ServerFolder: "SUPERV"
	}, 201);
	tracer && tracer("x3 endpoint route creating ep body(182)" + sys.inspect(body, null, 4));
	epId = body.$uuid;
	var sessionReq = x3MockServer.onSessionRequest;
	x3MockServer.onSessionRequest = function(request) {
		// make sure we pass here
		ok(true, "X3 client route ok");
		return sessionReq(request);
	};
	// Don't care about the GET result, it's not what the test is about
	body = get(_, cookie, baseUrl + "/sdata/x3/erp/superv/TABCOUNTRY?representation=$query");
	x3MockServer.onSessionRequest = sessionReq;
	//
	x3MockServer.close();
	start();
});

asyncTest("x3 user code", 7, function(_) {
	requestCount++;
	cookie = getCookie(_);
	var body;
	// check the user code passed to the server
	var sessionReq = x3MockServer.onSessionRequest;
	x3MockServer.onSessionRequest = function(request) {
		strictEqual(request.body.auth.user, "guest", "Default login ok");
		return sessionReq(request);
	};
	body = get(_, cookie, baseUrl + "/sdata/x3/erp/superv/TABCOUNTRY?representation=$query");
	x3MockServer.onSessionRequest = sessionReq;
	x3MockServer.close();
	cookie = getCookie(_);
	//
	//tracer && tracer("add endpoints test");
	body = get(_, cookie, "users?where=" + encodeURIComponent("(login eq \"guest\")"), 200);
	//tracer && tracer("body: "+sys.inspect(body));
	var userId = body.$resources[0].$uuid;
	strictEqual(body.$resources[0].login, "guest", "User guest found ok");
	// create endpoint
	var body = post(_, cookie, "endPoints", {
		description: "Dummy EP",
		applicationRef: {
			$uuid: appId
		},
		dataset: "dummy",
		enableSearch: false,
		x3solution: {
			$uuid: x3solutionId
		},
		x3ServerFolder: "SUPERV"
	}, 201);
	var ep2Id = body.$uuid;
	// add eps to user
	body = put(_, cookie, "users('" + userId + "')", {
		endpoints: [{
			$uuid: helpers.uuid.generate(),
			endpoint: {
				$uuid: ep2Id
			},
			login: "endpoint2"
		}, {
			$uuid: helpers.uuid.generate(),
			endpoint: {
				$uuid: epId
			},
			login: "endpoint1"
		}],
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	});
	// reconnect to refresh user profile
	cookie = getCookie(_);
	//tracer && tracer("login/endpoint test");
	x3MockServer.onSessionRequest = function(request) {
		strictEqual(request.body.auth.user, "endpoint1", "Endpoint1 login ok");
		return sessionReq(request);
	};
	// login test
	body = get(_, cookie, baseUrl + "/sdata/x3/erp/superv/TABCOUNTRY?representation=$query");
	x3MockServer.onSessionRequest = sessionReq;
	//
	x3MockServer.close();
	start();
});

asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});