"use strict";
var locale = require('syracuse-core/lib/locale');
var CvgClient = require('syracuse-x3/lib/convergence/client/CvgClient').CvgClient;
var CvgSession = require('syracuse-x3/lib/cvgSession');
var mongodb = require('streamline-mongodb');
var CvgIst = require('syracuse-x3/lib/convergence/types/CvgIst').CvgIst;
var x3helpers = require('syracuse-x3/lib/helpers');
var helpers = require('syracuse-core/lib/helpers');
var Session = require("syracuse-session/lib/session").Session;
var sessionManager = require("syracuse-session/lib/sessionManager").sessionManager;
var x3writer = require("syracuse-x3/lib/convergence/automata/x3writer");
var config = require('config'); // must be first syracuse require


var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var jsonImport = require("syracuse-import/lib/jsonImport");
var globals = require('streamline/lib/globals');

var flows = require("streamline/lib/util/flows");
var localConfig = x3helpers.config("x3fusion", null, {});
var done;

sessionManager.setup(config.session, "8124");

QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});
var context = {
	request: {
		session: {
			id: ""
		}
	},
	endpoint: {
		x3server: function(_) {
			return {
				serverHost: function(_) {
					return 'test';
				},
				serverPort: function(_) {
					return 'test';
				},
				serverName: function(_) {
					return 'test';
				},
			};
		}
	},
	httpSession: {
		getUserProfile: function(_) {
			return null;
		}
	}
};
var streamTest = helpers.defineClass(function() {
	this.readed;
	this.offset = 0;
	this.writed;
}, null, {
	setToRead: function(buffer) {
		this.offset = 0;
		this.readed = buffer;
	},
	read: function(_, size) {
		if (!this.readed) {
			return null;
		}
		while (this.offset > this.readed.length) {
			flows.sleep(_, 100); // wait 1s before try again
		}
		var res = this.readed.slice(this.offset, this.offset + size);
		this.offset += size;
		return res;
	},
	write: function(_, buf) {
		this.writed = buf;
	},
	destroy: function() {

	},
	end: function() {}
});
var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_convdemo");

var requestCount = 0;
var MAX_REQUESTS = 11;

var baseUrl = "http://localhost:3004";
var contractUrl = "/sdata/syracuse/collaboration/mongodb_demo/";
var port = 3004;
var acceptLanguage = "fr,fr-fr";

var cookie = "";
var x3sId;
var applicationId;
var adminEp;




function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_convdemo");
}

function get(_, cookie, suburl, sessionId, statusCode, fullResponse) {
	return adminTestFixtures.get(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$sessions('" + sessionId + "')/" + suburl, statusCode, fullResponse);
}

function put(_, cookie, suburl, sessionId, data, statusCode, fullResponse) {
	return adminTestFixtures.put(_, cookie, baseUrl + "/trans/x3/erp/SUPERV/$sessions('" + sessionId + "')/" + suburl, data, statusCode, fullResponse);
}

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets["mongodb_convdemo"].hostname, endPoint.datasets["mongodb_convdemo"].port, {});
	var db = adminTestFixtures.newMongoDb(endPoint.datasets["mongodb_convdemo"].database, server, {});
	db = db.open(_);
	db.dropDatabase(_);


	ok(true, "mongodb initialized");
	start();
});

//start syracuse server
asyncTest("initialize syracuse test server", 1, function(_) {
	require('syracuse-main/lib/syracuse').startServers(_, port);
	ok(true, "server initialized");
	var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_convdemo);
	jsonImport.jsonImport(_, db, "syracuse-admin-demo.json", {});
	start();
});

var cvgClient;


asyncTest("listenNode -  callui CR Developper - test with http request", function(_) {
	var id = "id";
	var clientId = "clientId";
	var session = new Session(null, id, clientId);
	var cookie = adminTestFixtures.getCookie(_, baseUrl, "admin", "admin").join(" ");
	var sessionId = cookie.substring(cookie.indexOf("=") + 1, cookie.indexOf(";"));
	var session = sessionManager.sessionById(sessionId);
	var cvgSession = CvgSession.newSession(_, "test1");
	var stream2 = new streamTest();

	session.updateCvgSession(cvgSession);

	// intiialization
	localConfig.plugin = localConfig.plugin || {};

	cvgClient = new CvgClient().init(_, session, stream2, {}, null, context);
	cvgClient.killPluginTimoeut = 10000;
	cvgSession._cvgClient = cvgClient;
	cvgClient.cdlang = "FRA";
	cvgClient.syraSessionCookie = sessionId;

	cvgClient.qunit = true;
	cvgClient.generateResponse(_, false, false);


	ok(true, "new CvgClient - send fake next field request - orchestration works case");

	cvgClient.execCallUi(_, {
		UIAction: "ReportDev",
		blind1: "blind1",
		blind2: "blind2",
		blind3: "blind3",
		blind4: "blind4",

	});

	var res = JSON.stringify(put(_, cookie, "requestSvc?act=1025&trackngId=1", cvgSession.sid, {
		act: 1025,
		fld: {
			fmtKind: "EDIT",
			ist: {
				win: "B",
				xid: "AA1",
				nl: 0
			}
		}
	}, 200));

	var resp = {
		"sap": {
			"target": {
				"type": "plugin",
				"plugin": {
					"class": "CrystalReport",
					"name": "development",
					"type": "asynchronous",
					"method": "new",
					"cookieSess": sessionId,
					"blind1": "blind1",
					"blind2": "blind2",
					"blind3": "blind3",
					"blind4": "blind4",
				}
			}
		},
		"session": {
			"settings": {
				"mnu": [],
				"datePivot": 1957,
				"dateOrder": 0,
				"dateSep": "/",
				"thousandSep": "," +
					"",
				"decimalSep": "." +
					"",
				"timeSep": ":"
			}
		},
		"srvop": {
			"request": {
				"id": 0,
				"v": 1025,
				"rqtdist": null,
				"connect": 1,
				"server": ""
			}
		}
	};

	strictEqual(res, JSON.stringify(resp), "generate reply to the client DevReport ");
	res = put(_, cookie, "requestSvc?act=532&trackngId=2", cvgSession.sid, {
		act: 532,
		param: {
			method: "new",
			plugin: {
				id: 1,
				result: {
					errm: "",
					errn: 0,
					errl: 0,
					errt: 0
				},
				"return": {
					"property": {
						name: "001",
						value: "valu fir unit test "
					}
				}
			}
		}
	}, 200, false);

	strictEqual(stream2.writed && stream2.writed.toString("hex"), "00000000193030313d0176616c752066697220756e69742074657374200a0000000000", "write client reply  ok");


	start();
});


test("kill", function() {
	done = true;
	start();
});