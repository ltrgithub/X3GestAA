"use strict";
// JavaScript Document
var module = QUnit.module;
var assert = require("assert");
var dataModel = require("syracuse-orm/lib/dataModel");
var x3Helper = require("syracuse-x3/test/fixtures/x3Helper");
var helpers = require("syracuse-core/lib/helpers");
var config = require('config'); // must be first syracuse require

var tracer; // = console.log;
var doStop = false;

module(config.unit_test.x3endpoint.folder + ".x3Query");

if (!config.unit_test || !config.unit_test.x3endpoint) {
	return test('X3 UNIT TESTS DISABLED FOR NOW', 1, function() {
		ok(true, "work in progress");
	});
}

var cookie = null;
var language = "";

function _getCookie(_, isolanguage) {
	var lang = isolanguage || language;
	cookie = (language === lang ? cookie : undefined) || x3Helper.getCookie(_, undefined, undefined, isolanguage);
	if (isolanguage) language = lang;
	return cookie;
}

var Representation = function(_class, _repName) {
	this.className = _class;
	this.repName = (typeof _repName == "undefined") ? _class : _repName;

	this.uuid = helpers.uuid.generate();

	this.setup = function(_, isolanguage) {
		var url = x3Helper.x3Url(this.className + "(%27%27)/$services/SETUP?representation=" + this.repName + ".$query&trackingId=" + this.uuid);
		var response = x3Helper.post(_, _getCookie(_, isolanguage || "fr-fr"), url, {}, 200);
		//dbg:ok(true, "response:" + JSON.stringify(response));
	};
	this.query = function(_, _param) {
		//!ok(true,"DBG _param:"+typeof(_param));
		if (typeof(_param) == 'undefined') {
			var data = x3Helper.get(_, _getCookie(_), x3Helper.x3Url(this.className + "?representation=" + this.repName + ".$query"), 200);
		} else if (typeof(_param) == 'string') {
			var data = x3Helper.get(_, _getCookie(_), x3Helper.x3Url(this.className + "?representation=" + this.repName + ".$query" + _param), 200);
		} else if (typeof(_param) == 'number') {
			var data = x3Helper.get(_, _getCookie(_), x3Helper.x3Url(this.className + "?representation=" + this.repName + ".$query"), _param);
		}
		//dbg:ok(true, "DBG query:" + JSON.stringify(data));
		return data;
	};
};

var key;

function getkey(url) {
	ok(true, "url:" + url);
	return url.substring(url.indexOf('&key'));
}


function testAQCQRY01(_) {
	asyncTest("AQCQRY01 - setup", function(_) {
		var representation = new Representation("AQCQRY01");
		representation.setup(_);
		start();
	});

	asyncTest("AQCQRY01(FIELD01 asc) - first page", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_);
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 'F1_001', "first");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_020', "last");
		key = getkey(query.$links.$next.$url);
		//!ok(true,"key=>"+key);

		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=gt.F1_020&orderBy=FIELD01', query.$links.$next.$url);
		strictEqual(false, ("$previous" in query.$links), "$previous");
		start();
	});

	asyncTest("AQCQRY01(asc) - second page", function(_) {
		var representation = new Representation("AQCQRY01");
		//!ok(true,"key:"+key);

		var query = representation.query(_, key); //&key=gt.F1_020&orderBy=FIELD01
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 'F1_021', "first");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_040', "last");
		strictEqual(query.$links.$previous.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=lt.F1_021&orderBy=FIELD01', "$previous");
		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=gt.F1_040&orderBy=FIELD01', "$next");
		strictEqual(query.$links.$first.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=gt&orderBy=FIELD01', "$first");
		strictEqual(query.$links.$last.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=lt&orderBy=FIELD01', "$last");
		key = getkey(query.$links.$previous.$url);

		start();
	});
	asyncTest("AQCQRY01(FIELD01 asc) - back to the first page", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, key); //'&key=lt.F1_021&orderBy=FIELD01');
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 'F1_001', "first");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_020', "last");
		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=gt.F1_020&orderBy=FIELD01', query.$links.$next.$url);
		strictEqual(false, ("$previous" in query.$links), "$previous");

		start();
	});

	asyncTest("AQCQRY01(FIELD01 asc) - last page", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, '&key=lt&orderBy=FIELD01');
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 'F1_081', "first");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_100', "last");
		strictEqual(query.$links.$previous.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=lt.F1_081&orderBy=FIELD01', "$previous");
		strictEqual(false, ("$next" in query.$links), "$next");
		strictEqual(query.$links.$first.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=gt&orderBy=FIELD01', "$first");
		strictEqual(query.$links.$last.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=lt&orderBy=FIELD01', "$last");
		key = getkey(query.$links.$previous.$url);

		start();
	});
	asyncTest("AQCQRY01(FIELD01 asc) - penultimate page", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, key); //!'&key=lt.F1_081&orderBy=FIELD01');
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 'F1_061', "first");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_080', "last");
		strictEqual(query.$links.$previous.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=lt.F1_061&orderBy=FIELD01', query.$links.$previous.$url);
		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=gt.F1_080&orderBy=FIELD01', query.$links.$next.$url);
		key = getkey(query.$links.$next.$url);

		start();
	});

	asyncTest("AQCQRY01(FIELD01 asc) - back to the last page", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, key); //'&key=gt.F1_080&orderBy=FIELD01');
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 'F1_081', "first");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_100', "last");
		strictEqual(query.$links.$previous.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=lt.F1_081&orderBy=FIELD01', query.$links.$previous.$url);
		strictEqual(false, ("$next" in query.$links), "$previous");

		start();
	});

	asyncTest("AQCQRY01(FIELD01 desc) - first page", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, '&orderBy=FIELD01%20desc');
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 'F1_100', "first");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_081', "last");
		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=lt.F1_081&orderBy=FIELD01 desc', query.$links.$next.$url);
		strictEqual(false, ("$previous" in query.$links), "$previous");
		key = getkey(query.$links.$next.$url);

		start();
	});

	asyncTest("AQCQRY01(FIELD01 desc) - second page", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, key); //'&key=lt.F1_081&orderBy=FIELD01%20desc');
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 'F1_080', "first");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_061', "last");
		strictEqual(query.$links.$previous.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=gt.F1_080&orderBy=FIELD01 desc', query.$links.$previous.$url);
		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=lt.F1_061&orderBy=FIELD01 desc', query.$links.$next.$url);
		key = getkey(query.$links.$previous.$url);
		start();
	});

	asyncTest("AQCQRY01(FIELD01 desc) - back to the first page", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, key); //'&key=lt.F1_021&orderBy=FIELD01%20desc');
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 'F1_100', "first");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_081', "last");
		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=lt.F1_081&orderBy=FIELD01 desc', query.$links.$next.$url);
		strictEqual(false, ("$previous" in query.$links), "$previous");

		start();
	});

	asyncTest("AQCQRY01(FIELD01 desc) - last page", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, '&key=gt&orderBy=FIELD01%20desc');
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 'F1_020', "first");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_001', "last");
		strictEqual(query.$links.$previous.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=gt.F1_020&orderBy=FIELD01 desc', query.$links.$previous.$url);
		strictEqual(false, ("$next" in query.$links), "$previous");
		key = getkey(query.$links.$previous.$url);

		start();
	});
	asyncTest("AQCQRY01(FIELD01 desc) - penultimate page", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, key); //'&key=gt.F1_020&orderBy=FIELD01%20desc');
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 'F1_040', "first");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_021', "last");
		strictEqual(query.$links.$previous.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=gt.F1_040&orderBy=FIELD01 desc', query.$links.$previous.$url);
		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=lt.F1_021&orderBy=FIELD01 desc', query.$links.$next.$url);
		key = getkey(query.$links.$next.$url);

		start();
	});

	asyncTest("AQCQRY01(FIELD01 desc) - back to the last page", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, key); //'&key=lt.F1_021&orderBy=FIELD01%20desc');
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 'F1_020', "first");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_001', "last");
		strictEqual(query.$links.$previous.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY01.$query&key=gt.F1_020&orderBy=FIELD01 desc', query.$links.$previous.$url);
		strictEqual(false, ("$next" in query.$links), "$previous");

		start();
	});
	asyncTest("AQCQRY01(FIELD02 asc) - first page", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, '&orderBy=FIELD02%20asc');
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 'F1_001', "FIELD01.1");
		strictEqual(query.$resources[0].FIELD02, 'F2_001', "FIELD02.1");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_092', "FIELD01." + count);
		strictEqual(query.$resources[count - 1].FIELD02, 'F2_002', "FIELD02." + count);
		key = getkey(query.$links.$next.$url);
		start();
	});

	asyncTest("AQCQRY01(FIELD02 asc) - second page", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, key);
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 'F1_003', "FIELD01.1");
		strictEqual(query.$resources[0].FIELD02, 'F2_003', "FIELD02.1");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_094', "FIELD01." + count);
		strictEqual(query.$resources[count - 1].FIELD02, 'F2_004', "FIELD02." + count);
		key = getkey(query.$links.$previous.$url);
		start();
	});

	asyncTest("AQCQRY01(FIELD02 asc) - back to first page", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, key);
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 'F1_001', "FIELD01.1");
		strictEqual(query.$resources[0].FIELD02, 'F2_001', "FIELD02.1");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_092', "FIELD01." + count);
		strictEqual(query.$resources[count - 1].FIELD02, 'F2_002', "FIELD02." + count);
		key = getkey(query.$links.$next.$url);
		start();
	});

	asyncTest("AQCQRY01(FIELD02 desc) - first page", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, '&orderBy=FIELD02%20desc');
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 'F1_100', "FIELD01.1");
		strictEqual(query.$resources[0].FIELD02, 'F2_010', "FIELD02.1");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_009', "FIELD01." + count);
		strictEqual(query.$resources[count - 1].FIELD02, 'F2_009', "FIELD02." + count);
		key = getkey(query.$links.$next.$url);
		start();
	});

	asyncTest("AQCQRY01(FIELD02 asc) - second page", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, key);
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 'F1_098', "FIELD01.1");
		strictEqual(query.$resources[0].FIELD02, 'F2_008', "FIELD02.1");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_007', "FIELD01." + count);
		strictEqual(query.$resources[count - 1].FIELD02, 'F2_007', "FIELD02." + count);
		key = getkey(query.$links.$previous.$url);
		start();
	});

	asyncTest("AQCQRY01(FIELD02 asc) - back to first page", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, key);
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 'F1_100', "FIELD01.1");
		strictEqual(query.$resources[0].FIELD02, 'F2_010', "FIELD02.1");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_009', "FIELD01." + count);
		strictEqual(query.$resources[count - 1].FIELD02, 'F2_009', "FIELD02." + count);
		key = getkey(query.$links.$next.$url);
		start();
	});

	asyncTest("AQCQRY01 - (FIELD01 like 'F1_01%')", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, "&where=(FIELD01%20like%20%27F1_01%25%27)");
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 'F1_010', "FIELD01.1");
		strictEqual(query.$resources[9].FIELD01, 'F1_019', "FIELD01.9");
		//!strictEqual(false, ("$links" in query), "$links");
		start();
	});

	asyncTest("AQCQRY01 - (upper(FIELD01) like 'F1_01%')", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, "&where=(upper(FIELD01)%20like%20%27F1_01%25%27)");
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 'F1_010', "FIELD01.1");
		strictEqual(query.$resources[9].FIELD01, 'F1_019', "FIELD01.9");
		//!strictEqual(false, ("$links" in query), "$links");
		start();
	});

	asyncTest("AQCQRY01 - (FIELD01 between 'F1_020' and 'F1_035')", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, "&where=(FIELD01%20between%20%27F1_020%27%20and%20%27F1_035%27)");

		strictEqual(query.$resources[0].FIELD01, 'F1_020', "FIELD01.1");
		strictEqual(query.$resources[15].FIELD01, 'F1_035', "FIELD01.15");
		//!strictEqual(false, ("$links" in query), "$links");
		start();
	});

	asyncTest("AQCQRY01 - $filer(FILTERA)=left$(FIELD01,5) = 'F1_01'", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, "&filter=FILTERA");
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 'F1_010', "FIELD01.1");
		strictEqual(query.$resources[9].FIELD01, 'F1_019', "FIELD01.9");
		//!strictEqual(false, ("$links" in query), "$links");
		start();
	});

	asyncTest("AQCQRY01 - $filer(FILTERB)=FIELD01 >= 'F1_020' and  FIELD01 <='F1_035'", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, "&filter=FILTERB");

		strictEqual(query.$resources[0].FIELD01, 'F1_020', "FIELD01.1");
		strictEqual(query.$resources[15].FIELD01, 'F1_035', "FIELD01.15");
		//!strictEqual(false, ("$links" in query), "$links");
		start();
	});

	asyncTest("AQCQRY01 - (FIELD01 like 'F%')", function(_) {
		var representation = new Representation("AQCQRY01");
		var query = representation.query(_, '&where=(FIELD01%20like%20%27F%25%27)');
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 'F1_001', "first");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_020', "last");
		strictEqual(true, ("$links" in query), "$links");
		start();
	});
}

function testAQCQRY02(_) {
	asyncTest("AQCQRY02 - setup", function(_) {
		var representation = new Representation("AQCQRY02");
		representation.setup(_);
		start();
	});

	asyncTest("AQCQRY02(FIELD01 asc) - first page", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_);
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 1, "first");
		strictEqual(query.$resources[count - 1].FIELD01, 20, "last");
		key = getkey(query.$links.$next.$url);

		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY02?representation=AQCQRY02.$query&key=gt.20&orderBy=FIELD01', query.$links.$next.$url);
		strictEqual(false, ("$previous" in query.$links), "$previous");
		start();
	});

	asyncTest("AQCQRY02(asc) - second page", function(_) {
		var representation = new Representation("AQCQRY02");
		//!ok(true,"key:"+key);

		var query = representation.query(_, key);
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 21, "first");
		strictEqual(query.$resources[count - 1].FIELD01, 40, "last");
		strictEqual(query.$links.$previous.$url, x3Helper.url() + 'AQCQRY02?representation=AQCQRY02.$query&key=lt.21&orderBy=FIELD01', query.$links.$previous.$url);
		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY02?representation=AQCQRY02.$query&key=gt.40&orderBy=FIELD01', query.$links.$next.$url);
		key = getkey(query.$links.$previous.$url);

		start();
	});
	asyncTest("AQCQRY02(FIELD01 asc) - back to the first page", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, key);
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 1, "first");
		strictEqual(query.$resources[count - 1].FIELD01, 20, "last");
		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY02?representation=AQCQRY02.$query&key=gt.20&orderBy=FIELD01', query.$links.$next.$url);
		strictEqual(false, ("$previous" in query.$links), "$previous");

		start();
	});

	asyncTest("AQCQRY02(FIELD01 asc) - last page", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, '&key=lt&orderBy=FIELD01');
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 81, "first");
		strictEqual(query.$resources[count - 1].FIELD01, 100, "last");
		strictEqual(query.$links.$previous.$url, x3Helper.url() + 'AQCQRY02?representation=AQCQRY02.$query&key=lt.81&orderBy=FIELD01', query.$links.$previous.$url);
		strictEqual(false, ("$next" in query.$links), "$previous");
		key = getkey(query.$links.$previous.$url);

		start();
	});
	asyncTest("AQCQRY02(FIELD01 asc) - penultimate page", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, key);
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 61, "first");
		strictEqual(query.$resources[count - 1].FIELD01, 80, "last");
		strictEqual(query.$links.$previous.$url, x3Helper.url() + 'AQCQRY02?representation=AQCQRY02.$query&key=lt.61&orderBy=FIELD01', query.$links.$previous.$url);
		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY02?representation=AQCQRY02.$query&key=gt.80&orderBy=FIELD01', query.$links.$next.$url);
		key = getkey(query.$links.$next.$url);

		start();
	});

	asyncTest("AQCQRY02(FIELD01 asc) - back to the last page", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, key); //'&key=gt.F1_080&orderBy=FIELD01');
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 81, "first");
		strictEqual(query.$resources[count - 1].FIELD01, 100, "last");
		strictEqual(query.$links.$previous.$url, x3Helper.url() + 'AQCQRY02?representation=AQCQRY02.$query&key=lt.81&orderBy=FIELD01', query.$links.$previous.$url);
		strictEqual(false, ("$next" in query.$links), "$previous");

		start();
	});

	asyncTest("AQCQRY02(FIELD01 desc) - first page", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, '&orderBy=FIELD01%20desc');
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 100, "first");
		strictEqual(query.$resources[count - 1].FIELD01, 81, "last");
		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY02?representation=AQCQRY02.$query&key=lt.81&orderBy=FIELD01 desc', query.$links.$next.$url);
		strictEqual(false, ("$previous" in query.$links), "$previous");
		key = getkey(query.$links.$next.$url);

		start();
	});

	asyncTest("AQCQRY02(FIELD01 desc) - second page", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, key); //'&key=lt.F1_081&orderBy=FIELD01%20desc');
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 80, "first");
		strictEqual(query.$resources[count - 1].FIELD01, 61, "last");
		strictEqual(query.$links.$previous.$url, x3Helper.url() + 'AQCQRY02?representation=AQCQRY02.$query&key=gt.80&orderBy=FIELD01 desc', query.$links.$previous.$url);
		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY02?representation=AQCQRY02.$query&key=lt.61&orderBy=FIELD01 desc', query.$links.$next.$url);
		key = getkey(query.$links.$previous.$url);
		start();
	});

	asyncTest("AQCQRY02(FIELD01 desc) - back to the first page", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, key); //'&key=lt.F1_021&orderBy=FIELD01%20desc');
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 100, "first");
		strictEqual(query.$resources[count - 1].FIELD01, 81, "last");
		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY02?representation=AQCQRY02.$query&key=lt.81&orderBy=FIELD01 desc', query.$links.$next.$url);
		strictEqual(false, ("$previous" in query.$links), "$previous");

		start();
	});

	asyncTest("AQCQRY02(FIELD01 desc) - last page", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, '&key=gt&orderBy=FIELD01%20desc');
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 20, "first");
		strictEqual(query.$resources[count - 1].FIELD01, 1, "last");
		strictEqual(query.$links.$previous.$url, x3Helper.url() + 'AQCQRY02?representation=AQCQRY02.$query&key=gt.20&orderBy=FIELD01 desc', query.$links.$previous.$url);
		strictEqual(false, ("$next" in query.$links), "$previous");
		key = getkey(query.$links.$previous.$url);

		start();
	});
	asyncTest("AQCQRY02(FIELD01 desc) - penultimate page", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, key); //'&key=gt.F1_020&orderBy=FIELD01%20desc');
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 40, "first");
		strictEqual(query.$resources[count - 1].FIELD01, 21, "last");
		strictEqual(query.$links.$previous.$url, x3Helper.url() + 'AQCQRY02?representation=AQCQRY02.$query&key=gt.40&orderBy=FIELD01 desc', query.$links.$previous.$url);
		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY02?representation=AQCQRY02.$query&key=lt.21&orderBy=FIELD01 desc', query.$links.$next.$url);
		key = getkey(query.$links.$next.$url);

		start();
	});

	asyncTest("AQCQRY02(FIELD01 desc) - back to the last page", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, key); //'&key=lt.F1_021&orderBy=FIELD01%20desc');
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 20, "first");
		strictEqual(query.$resources[count - 1].FIELD01, 1, "last");
		strictEqual(query.$links.$previous.$url, x3Helper.url() + 'AQCQRY02?representation=AQCQRY02.$query&key=gt.20&orderBy=FIELD01 desc', query.$links.$previous.$url);
		strictEqual(false, ("$next" in query.$links), "$previous");

		start();
	});
	asyncTest("AQCQRY02(FIELD02 asc) - first page", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, '&orderBy=FIELD02%20asc');
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 1, "FIELD01.1");
		strictEqual(query.$resources[0].FIELD02, 1, "FIELD02.1");
		strictEqual(query.$resources[count - 1].FIELD01, 92, "FIELD01." + count);
		strictEqual(query.$resources[count - 1].FIELD02, 2, "FIELD02." + count);
		key = getkey(query.$links.$next.$url);
		start();
	});

	asyncTest("AQCQRY02(FIELD02 asc) - second page", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, key);
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 3, "FIELD01.1");
		strictEqual(query.$resources[0].FIELD02, 3, "FIELD02.1");
		strictEqual(query.$resources[count - 1].FIELD01, 94, "FIELD01." + count);
		strictEqual(query.$resources[count - 1].FIELD02, 4, "FIELD02." + count);
		key = getkey(query.$links.$previous.$url);
		start();
	});

	asyncTest("AQCQRY02(FIELD02 asc) - back to first page", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, key);
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 1, "FIELD01.1");
		strictEqual(query.$resources[0].FIELD02, 1, "FIELD02.1");
		strictEqual(query.$resources[count - 1].FIELD01, 92, "FIELD01." + count);
		strictEqual(query.$resources[count - 1].FIELD02, 2, "FIELD02." + count);
		key = getkey(query.$links.$next.$url);
		start();
	});

	asyncTest("AQCQRY02(FIELD02 desc) - first page", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, '&orderBy=FIELD02%20desc');
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 100, "FIELD01.1");
		strictEqual(query.$resources[0].FIELD02, 10, "FIELD02.1");
		strictEqual(query.$resources[count - 1].FIELD01, 9, "FIELD01." + count);
		strictEqual(query.$resources[count - 1].FIELD02, 9, "FIELD02." + count);
		key = getkey(query.$links.$next.$url);
		start();
	});

	asyncTest("AQCQRY02(FIELD02 asc) - second page", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, key);
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 98, "FIELD01.1");
		strictEqual(query.$resources[0].FIELD02, 8, "FIELD02.1");
		strictEqual(query.$resources[count - 1].FIELD01, 7, "FIELD01." + count);
		strictEqual(query.$resources[count - 1].FIELD02, 7, "FIELD02." + count);
		key = getkey(query.$links.$previous.$url);
		start();
	});

	asyncTest("AQCQRY02(FIELD02 asc) - back to first page", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, key);
		var count = 20;

		strictEqual(query.$resources[0].FIELD01, 100, "FIELD01.1");
		strictEqual(query.$resources[0].FIELD02, 10, "FIELD02.1");
		strictEqual(query.$resources[count - 1].FIELD01, 9, "FIELD01." + count);
		strictEqual(query.$resources[count - 1].FIELD02, 9, "FIELD02." + count);
		key = getkey(query.$links.$next.$url);
		start();
	});

	asyncTest("AQCQRY02 - (FIELD01 between 20 and 35)", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, "&where=(FIELD01%20between%2020%20and%2035)");

		strictEqual(query.$resources[0].FIELD01, 20, "FIELD01.1");
		strictEqual(query.$resources[15].FIELD01, 35, "FIELD01.15");
		//!//!strictEqual(false, ("$links" in query), "$links");
		start();
	});


	asyncTest("AQCQRY02 - (FIELD01 eq 10 and FIELD02 eq 1 0)", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, "&where=(FIELD01%20eq%2010)%20and%20(FIELD02%20eq%2010)");

		strictEqual(query.$resources.length, 1, "1 item");
		strictEqual(query.$resources[0].FIELD01, 10, "FIELD01.0");
		strictEqual(query.$resources[0].FIELD02, 10, "FIELD02.0");
		//!//!strictEqual(false, ("$links" in query), "$links");
		start();
	});

	asyncTest("AQCQRY02 - $filer(FILTERA)=FIELD01 between 20 and 35", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, "&filter=FILTERA");

		strictEqual(query.$resources[0].FIELD01, 20, "FIELD01.1");
		strictEqual(query.$resources[15].FIELD01, 35, "FIELD01.15");
		//!//!strictEqual(false, ("$links" in query), "$links");
		start();
	});

	asyncTest("AQCQRY02 - FIELD02 eq 1", function(_) {
		var representation = new Representation("AQCQRY02");
		var query = representation.query(_, "&where=FIELD02%20eq%201");

		strictEqual(query.$resources.length, 10, "length");
		for (var i = 0; i < 10; i++) {
			strictEqual(query.$resources[i].FIELD01, 1 + (10 * i), "FIELD01." + i);
		}
		start();
	});
}


function testAQCQRY03(_) {
	asyncTest("AQCQRY03 - setup", function(_) {
		var representation = new Representation("AQCQRY03");
		representation.setup(_);
		start();
	});

	asyncTest("AQCQRY03 (FIELD01 asc) - first page", function(_) {
		var representation = new Representation("AQCQRY03");
		var count = 20;

		var today = new Date();
		var query = representation.query(_);
		key = getkey(query.$links.$next.$url);

		for (var i = 0; i < count; i++) {
			strictEqual(query.$resources[i].FIELD01, i + 1, "FIELD01." + i + "=" + query.$resources[i].FIELD01);
			var date = new Date(Date.parse(query.$resources[i].FIELD02));
			var expectedDate = new Date();
			expectedDate.setDate(today.getDate() - (i % 10));
			strictEqual(date.toDateString(), expectedDate.toDateString(), date.toDateString());
		}
		start();
	});

	asyncTest("AQCQRY03 (FIELD01 asc) - second page", function(_) {
		var representation = new Representation("AQCQRY03");
		var count = 20;

		var today = new Date();
		var query = representation.query(_, key);
		key = getkey(query.$links.$previous.$url);
		for (var i = 0; i < count; i++) {
			strictEqual(query.$resources[i].FIELD01, i + count + 1, "FIELD01." + i + "=" + query.$resources[i].FIELD01);
			var date = new Date(Date.parse(query.$resources[i].FIELD02));
			var expectedDate = new Date();
			expectedDate.setDate(today.getDate() - (i % 10));
			strictEqual(date.toDateString(), expectedDate.toDateString(), date.toDateString());
		}
		start();
	});

	asyncTest("AQCQRY03 (FIELD01 asc) - back to the first page", function(_) {
		var representation = new Representation("AQCQRY03");
		var count = 20;

		var today = new Date();
		var query = representation.query(_, key);

		for (var i = 0; i < count; i++) {
			strictEqual(query.$resources[i].FIELD01, i + 1, "FIELD01." + i + "=" + query.$resources[i].FIELD01);
			var date = new Date(Date.parse(query.$resources[i].FIELD02));
			var expectedDate = new Date();
			expectedDate.setDate(today.getDate() - (i % 10));
			strictEqual(date.toDateString(), expectedDate.toDateString(), date.toDateString());
		}
		start();
	});

	asyncTest("AQCQRY03 (FIELD02 desc) - first page", function(_) {
		var count = 20;
		var today = new Date();

		var representation = new Representation("AQCQRY03");
		var query = representation.query(_, '&orderBy=FIELD02%20desc') //&where=FIELD02%20lt%20'+date.toISOString());
		key = getkey(query.$links.$next.$url);

		for (var i = 0; i < count; i++) {
			var date = new Date(Date.parse(query.$resources[i].FIELD02));
			var expectedDate = new Date();
			expectedDate.setDate(today.getDate() - Math.floor(i / 10));
			strictEqual(date.toDateString(), expectedDate.toDateString(), date.toDateString());
		}
		start();
	});

	asyncTest("AQCQRY03 (FIELD02 desc) - second page", function(_) {
		var count = 20;
		var today = new Date();

		var representation = new Representation("AQCQRY03");
		var query = representation.query(_, key) //&where=FIELD02%20lt%20'+date.toISOString());
		key = getkey(query.$links.$previous.$url);

		for (var i = 0; i < count; i++) {
			var date = new Date(Date.parse(query.$resources[i].FIELD02));
			var expectedDate = new Date();
			expectedDate.setDate(today.getDate() - Math.floor((count + i) / 10));
			strictEqual(date.toDateString(), expectedDate.toDateString(), date.toDateString());
		}
		start();
	});

	asyncTest("AQCQRY03 (FIELD02 desc) - back to the first page", function(_) {
		var count = 20;
		var today = new Date();

		var representation = new Representation("AQCQRY03");
		var query = representation.query(_, key) //&where=FIELD02%20lt%20'+date.toISOString());
		key = getkey(query.$links.$next.$url);

		for (var i = 0; i < count; i++) {
			var date = new Date(Date.parse(query.$resources[i].FIELD02));
			var expectedDate = new Date();
			expectedDate.setDate(today.getDate() - Math.floor(i / 10));
			strictEqual(date.toDateString(), expectedDate.toDateString(), date.toDateString());
		}
		start();
	});

}

function testAQCQRY04(_) {

	asyncTest("AQCQRY04 - setup", function(_) {
		var representation = new Representation("AQCQRY04");
		representation.setup(_);
		start();
	});

	asyncTest("AQCQRY04 (FIELD01 asc) - first page", function(_) {
		var representation = new Representation("AQCQRY04");
		var count = 20;

		var today = new Date();
		var query = representation.query(_);
		key = getkey(query.$links.$next.$url);

		for (var i = 0; i < count; i++) {
			strictEqual(query.$resources[i].FIELD01, i + 1, "FIELD01." + i + "=" + query.$resources[i].FIELD01);
			var date = new Date(Date.parse(query.$resources[i].FIELD02));
			var expectedDate = new Date();
			expectedDate.setDate(today.getDate() - ((i + 1) % 10));
			strictEqual(date.toDateString(), expectedDate.toDateString(), date.toDateString());
		}
		start();
	});

	asyncTest("AQCQRY04 (FIELD02 desc) - second page", function(_) {
		var count = 20;
		var today = new Date();

		var representation = new Representation("AQCQRY04");
		var query = representation.query(_, key);
		key = getkey(query.$links.$previous.$url);

		for (var i = 0; i < count; i++) {
			var date = new Date(Date.parse(query.$resources[i].FIELD02));
			var expectedDate = new Date();
			expectedDate.setDate(today.getDate() - ((i + 1) % 10));
			strictEqual(date.toDateString(), expectedDate.toDateString(), date.toDateString());
		}
		start();
	});

	asyncTest("AQCQRY04 (FIELD02 desc) - back to the first page", function(_) {
		var count = 20;
		var today = new Date();

		var representation = new Representation("AQCQRY04");
		var query = representation.query(_, key);
		key = getkey(query.$links.$next.$url);

		for (var i = 0; i < count; i++) {
			strictEqual(query.$resources[i].FIELD01, i + 1, "FIELD01." + i + "=" + query.$resources[i].FIELD01);
			var date = new Date(Date.parse(query.$resources[i].FIELD02));
			var expectedDate = new Date();
			expectedDate.setDate(today.getDate() - ((i + 1) % 10));
			strictEqual(date.toDateString(), expectedDate.toDateString(), date.toDateString());
		}
		start();
	});

	asyncTest("AQCQRY04 - $filer(FILTERA) FIELD02 = today", function(_) {
		var representation = new Representation("AQCQRY04");
		var count = 20;

		var today = new Date();
		var query = representation.query(_, "&filter=FILTERA");

		for (var i = 0; i < query.$resources[i].length; i++) {
			var date = new Date(Date.parse(query.$resources[i].FIELD02));
			strictEqual(date.toDateString(), today.toDateString(), date.toDateString());
		}
		start();
	});

	asyncTest("AQCQRY04 - $filer(FILTERA) FIELD02 = yesterday", function(_) {
		var representation = new Representation("AQCQRY04");
		var count = 20;

		var today = new Date();
		var yesterday = new Date();
		yesterday.setDate(today.getDate() - 1);

		var query = representation.query(_, "&filter=FILTERB");

		for (var i = 0; i < query.$resources[i].length; i++) {
			var date = new Date(Date.parse(query.$resources[i].FIELD02));
			strictEqual(date.toDateString(), yesterday.toDateString(), date.toDateString());
		}
		start();
	});

	asyncTest("AQCQRY04 (FIELD02 desc) - first page", function(_) {
		var representation = new Representation("AQCQRY04");
		var count = 20;

		var today = new Date();
		var query = representation.query(_, '&orderBy=FIELD02%20desc');
		key = getkey(query.$links.$next.$url);

		for (var i = 0; i < 10; i++) {
			var date = new Date(Date.parse(query.$resources[i].FIELD02));
			strictEqual(date.toDateString(), today.toDateString(), date.toDateString());
		}
		start();
	});

	asyncTest("AQCQRY04 (FIELD02 desc) - second page", function(_) {
		var representation = new Representation("AQCQRY04");
		var count = 20;

		var today = new Date();
		var query = representation.query(_, key);
		key = getkey(query.$links.$previous.$url);

		for (var i = 0; i < 10; i++) {
			var date = new Date(Date.parse(query.$resources[i].FIELD02));
			var expectedDate = new Date();
			expectedDate.setDate(today.getDate() - 2);
			strictEqual(date.toDateString(), expectedDate.toDateString(), date.toDateString());
		}
		start();
	});

	asyncTest("AQCQRY04 (FIELD02 desc) - back to the first page", function(_) {
		var count = 20;
		var today = new Date();

		var representation = new Representation("AQCQRY04");
		var query = representation.query(_, key);

		for (var i = 0; i < 10; i++) {
			var date = new Date(Date.parse(query.$resources[i].FIELD02));
			strictEqual(date.toDateString(), today.toDateString(), date.toDateString());
		}
		start();
	});
}

function testAQCQRY05(_) {

	asyncTest("AQCQRY05 - setup", function(_) {
		var representation = new Representation("AQCQRY05");
		representation.setup(_);
		start();
	});

	asyncTest("AQCQRY05 - $filer(FILTERA) FIELD02 = Date", function(_) {
		var representation = new Representation("AQCQRY05");
		var count = 20;

		var today = new Date();
		var query = representation.query(_, "&filter=FILTERA");

		for (var i = 0; i < query.$resources[i].length; i++) {
			strictEqual(query.$resources[i].FIELD02, 8, "FIELD02." + i + "=" + query.$resources[i].FIELD02);
		}
		start();
	});
}

function testIssue1465(_) {
	asyncTest("Issue #1465 " + x3Helper.gitHubIssue(1465), function(_) {
		var representation = new Representation("ZZZ");
		representation.query(_, 404);
		start();
	});
}

/*
Unit tests for US 91235/2
*/

function testAQCQRY11(_) {

	asyncTest("AQCQRY11 - setup", function(_) {
		var representation = new Representation("AQCQRY01", "AQCQRY11");
		representation.setup(_);
		start();
	});

	asyncTest("AQCQRY11 - first page", function(_) {
		var representation = new Representation("AQCQRY01", "AQCQRY11");
		var query = representation.query(_);
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 'F1_100', "first");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_081', "last");
		key = getkey(query.$links.$next.$url);
		//!ok(true,"key=>"+key);

		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY11.$query&key=lt.F1_081&orderBy=FIELD01 desc', query.$links.$next.$url);
		strictEqual(false, ("$previous" in query.$links), "$previous");
		start();
	});

	asyncTest("AQCQRY11 - second page", function(_) {
		var representation = new Representation("AQCQRY01", "AQCQRY11");
		var query = representation.query(_, key);
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 'F1_080', "first");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_061', "last");
		key = getkey(query.$links.$next.$url);
		//!ok(true,"key=>"+key);

		strictEqual(query.$links.$previous.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY11.$query&key=gt.F1_080&orderBy=FIELD01 desc', query.$links.$previous.$url);
		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY11.$query&key=lt.F1_061&orderBy=FIELD01 desc', query.$links.$next.$url);
		key = getkey(query.$links.$previous.$url);
		strictEqual(true, ("$previous" in query.$links), "$previous");
		start();
	});


	asyncTest("AQCQRY11 - back to the first page", function(_) {
		var representation = new Representation("AQCQRY01", "AQCQRY11");
		var query = representation.query(_, key);
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 'F1_100', "first");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_081', "last");
		key = getkey(query.$links.$next.$url);

		strictEqual(query.$links.$next.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY11.$query&key=lt.F1_081&orderBy=FIELD01 desc', query.$links.$next.$url);

		start();
	});

	asyncTest("AQCQRY11 - last page", function(_) {
		var representation = new Representation("AQCQRY01", "AQCQRY11");
		var query = representation.query(_, '&key=gt');
		var count = 20;

		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].FIELD01, 'F1_020', "first");
		strictEqual(query.$resources[count - 1].FIELD01, 'F1_001', "last");

		strictEqual(query.$links.$previous.$url, x3Helper.url() + 'AQCQRY01?representation=AQCQRY11.$query&key=gt.F1_020&orderBy=FIELD01 desc', query.$links.$previous.$url);
		strictEqual(false, ("$next" in query.$links), "$next");

		start();
	});

}

function testMISC(_) {
	asyncTest("AQCPROC01", function(_) {
		var representation = new Representation("AQCPROC01");
		var query = representation.query(_);
		var count = 20;
		ok(query.$resources.length != 0, "resources length");
		start();
	});

}

function testAQCPROC01(_) {
	asyncTest("AQCPROC01-QUNIT filter", function(_) {
		var representation = new Representation("AQCPROC01"); // calls function from above. Both Rep and class name the same so only 1 param ??
		var query = representation.query(_, "&filter=QUNIT"); // sets query to URL built from this.query of representation var above plus filter statement.
		// the underscore instigates the Streamline approach somehow ....
		//  ** The system executes the URL, calls the ETNA server,gets the JSON and gives you the results of the HTTP query. 
		ok(true, "DBG query:" + JSON.stringify(query)); // truthy test actually just a string statment since true=true
		var count = 20;
		ok(query.$resources.length != 0, "resources length"); // truthy statement  ... check length of the resources array in the payload.
		query.$resources.forEach(function(resource) { // ***** the forEach is a callback function. 
			if (resource.C01P01 === "QUNIT_001") {
				strictEqual(resource.C01P02, "R01P01_02", "resource.C01P02"); // value, expected[,message]
				ok(resource.C01P02_REF !== undefined, true, "resource.C01P02_REF"); //  truthy test  
				strictEqual(resource.C01P02_REF.$title, "INTSHO 2", "resource.C01P02_REF $title"); //  from class AQCPROR01 on data type AQCPR1 ???? no 2 ?
				strictEqual(resource.C01P02_REF.$description, "INTDES 2", "resource.C01P02_REF $description"); //  from class AQCPROR01 on data type AQCPR1 ???? no 2 ?
			} // OR AXXX data type on class AQCPROC01 ???
		});
		var representation = new Representation("AQCPROC02"); // calls function from above. Both Rep and class name the same so only 1 param ??
		var query = representation.query(_, "&filter=QUNIT");
		ok(true, "DBG query - embedded page link to AQCPROC02:" + JSON.stringify(query));
		query.$resources.forEach(function(resource) { // ***** the forEach is a callback function. 
			if (resource.C02P01 === "QUNIT_001") {
				strictEqual(resource.C02P02, "R01P01_03", "resource.C02P02"); // value, expected[,message]
				ok(resource.C02P02_REF !== undefined, true, "resource.C02P02_REF"); //  truthy test  
				strictEqual(resource.C02P02_REF.$title, "INTSHO 3", "resource.C02P02_REF $title"); //  from class AQCPROR01 on data type AQCPR1 ???? no 2 ?
				strictEqual(resource.C02P02_REF.$description, "INTDES 3", "resource.C02P02_REF $description"); //  from class AQCPROR01 on data type AQCPR1 ???? no 2 ?
			} // OR AXXX data type on class AQCPROC01 ???
		});
		start();
	});
	asyncTest("AQCPROC01 - no filter", function(_) {
		var representation = new Representation("AQCPROC01");
		var query = representation.query(_, "&filter=noFilters");
		strictEqual(query.$resources.length, 9, "9 items");
		ok(true, "DBG query - embedded page link to AQCPROC02:" + JSON.stringify(query));
		query.$resources.forEach(function(resource) {
			//ok(resource.C01P02_REF.$title !== undefined, true, "C01P02_REF.title");  //  truthy test    // GH 5639
		});
		start();
	});

}

function testABANK(_) {
	asyncTest("ABANK - setup", function(_) {
		var representation = new Representation("ABANK");
		representation.setup(_);
		start();
	});

	asyncTest("ABANK - first page", function(_) {
		var representation = new Representation("ABANK");
		var query = representation.query(_);
		ok(true, "DBG query:" + JSON.stringify(query));
		for (var i = 0; i < 19; i++) {
			ok(query.$resources[i].CRY_REF.$title !== undefined, true, "$Title available for all");
		}
		strictEqual(query.$itemsPerPage, 20, "$itemsPerPage    20");
		strictEqual(query.$resources[0].CRY, "FR", "CRY ");
		strictEqual(query.$resources[0].CRY_REF.$title, "France", "CRY $title");
		strictEqual(query.$resources[0].CRY_REF.$description, "France", "CRY_REF $description");
		strictEqual(query.$resources[0].BAN, "TS123", "BAN");
		strictEqual(query.$resources[0].PAB, "", "PAB ");
		ok(query.$resources[0].CRY_REF !== undefined, true, "resource.CRY_REF"); // available through CRY data-type from REP CRY  	
		//strictEqual(false, ("$next" in query.$links), "$next");  I
		key = getkey(query.$links.$next.$url);
		start();
	});
	asyncTest("ABANK - last page", function(_) {
		var representation = new Representation("ABANK");
		var query = representation.query(_, key);
		ok(true, "DBG query:" + JSON.stringify(query));
		strictEqual(query.$itemsPerPage, 20, "$itemsPerPage    20");
		strictEqual(query.$resources[0].BAN, "3000203257", "BAN");
		start();
	});
}

function testAQCLNK01(_) {
	asyncTest("AQCLNK01 - setup", function(_) {
		var representation = new Representation("AQCLNK01");
		representation.setup(_);
		start();
	});

	asyncTest("AQCLNK01 First page", function(_) {
		var representation = new Representation("AQCLNK01"); // calls function from above. Both Rep and class name the same so only 1 param ??
		var query = representation.query(_);
		ok(true, "DBG query:" + JSON.stringify(query)); // truthy test actually just a tring statment since true=true        
		var count = 50;
		ok(query.$resources.length != 0, "resources length" + " " + query.$resources.length); // truthy statement  ... check length of the resources array in the payload.        		 
		start();
	});
	asyncTest("AQCLNK01 = F1_079", function(_) {
		var representation = new Representation("AQCLNK01");
		var query = representation.query(_, "&where=REP_FIELD01%20eq%20'F1_079'"); // GH 5624     	     	   	     	
		var count = 50;
		ok(query.$resources.length != 0, "resources length" + " " + query.$resources.length);
		ok(true, "DBG query:" + JSON.stringify(query));
		strictEqual(query.$resources[0].CCALC, query.$resources[0].REP_FIELD01 + " " + query.$resources[0].REP_FIELD02, "resource.CCALC"); /// Blank display CSTD
		strictEqual(query.$resources[0].CCALC2, query.$resources[0].REP_FIELD01 + " " + query.$resources[0].REP_FIELD02, "resource.CCALC2"); /// Blank display CSTD		 	  				 	  		
		strictEqual(query.$resources[0].REP_FIELD3, "R01P01_04", "resource.REP_FIELD3");
		strictEqual(query.$resources[0].REP_FIELD4, "R01P01_04", "resource.REP_FIELD4");
		strictEqual(query.$resources[0].REP_FIELD5, "R01P01_04", "resource.REP_FIELD5");
		strictEqual(query.$resources[0].REP_FIELD6, "R01P01_04", "resource.REP_FIELD6");
		strictEqual(query.$resources[0].REP_CALC, "R01P01_04", "resource.REP_CALC");
		strictEqual(query.$resources[0].REP_REFCALC, "R01P01_04", "resource.REP_REFCALC");
		ok(query.$resources[0].REP_ACCESS !== undefined, true, "resource.REP_ACCESS available");
		ok(query.$resources[0].REP_CREDATTIM !== undefined, true, "resource.REP_CREDATTIM available");
		ok(query.$resources[0].REP_CREUSR !== undefined, true, "resource.REP_CREUSR available");
		ok(query.$resources[0].REP_UPDUSR !== undefined, true, "resource.REP_UPDUSR available");
		ok(query.$resources[0].REP_UPDDATTIM !== undefined, true, "resource.REP_UPDDATTIM available");
		ok(query.$resources[0].REP_AUUID !== undefined, true, "resource.REP_AUUID available");
		strictEqual(query.$resources[0].PAYS, "CA", "resource.PAYS"); /////////// Blank display  RSTD  
		ok(query.$resources[0].PAYS_REF !== undefined, true, "resource.PAYS_REF"); // available through CRY data-type from REP CRY Key & Lookup check mark.    GH 5667      		 		                                                                                               		 
		start();
	});

	asyncTest("AQCLNK01 - ACCESS Test", function(_) {
		var representation = new Representation("AQCLNK01");
		var query = representation.query(_);
		var count = 50;
		ok(query.$resources.length != 0, "resources length" + " " + query.$resources.length);
		ok(true, "DBG query:" + JSON.stringify(query));
		query.$resources.forEach(function(resource) {
			if (resource.REP_ACCESS === "AQCACS1") {
				strictEqual(query.$resources[0].REP_ACCESS, "AQCACS1", "resource.REP_ACCESS");
			}
		});
		start();
	});

	asyncTest("AQCLNK01 - (upper(REP_FIELD02) like 'F2_00%')", function(_) {
		var representation = new Representation("AQCLNK01");
		var query = representation.query(_, "&where=(upper(REP_FIELD02)%20like%20%27F2_00%25%27)"); // GH 5624
		var count = 50;
		query.$resources.forEach(function(resource) {
			strictEqual(query.$resources[0].REP_FIELD02.substring(0, 5), "F2_00", "resource.REP_FIELD02");
		});
		start();
	});
	asyncTest("AQCLNK01 - $filter(FILTERA)=left$([F:AQL01]FIELD01,5) = 'F1_01'", function(_) {
		var representation = new Representation("AQCLNK01");
		var query = representation.query(_, "&filter=FILTERA"); // GH  5631	
		strictEqual(query.$resources.length, 10, "10 items");
		strictEqual(query.$resources[0].REP_FIELD02, 'F2_010', "First record");
		strictEqual(query.$resources[9].REP_FIELD02, 'F2_009', "Last record");
		ok(query.$resources[9].REP_FIELD02 !== undefined, false, "resource.REP_FIELD02 unavailable");
		start();
	});
	asyncTest("AQCLNK01 - REP_FIELD01 >= 'F1_014'", function(_) {
		var representation = new Representation("AQCLNK01");
		var query = representation.query(_, "&where=upper(REP_FIELD01)%20ge%20'F1_014'"); // GH 5631			
		strictEqual(query.$resources.length, 20, "20 length");
		strictEqual(query.$resources[0].REP_FIELD02, 'F2_004', "First record");
		strictEqual(query.$resources[9].REP_FIELD02, 'F2_003', "Last record");
		strictEqual(true, ("$next" in query.$links), "$next");
		start();
	});
	asyncTest("AQCLNK01 - $filter(NO FILTER)'", function(_) {
		var representation = new Representation("AQCLNK01");
		var query = representation.query(_, "&filter=noFilters"); // GH 5631		 
		strictEqual(query.$resources.length, 20, "20 items");
		strictEqual(query.$resources[0].REP_FIELD02, 'F2_001', "First record");
		strictEqual(query.$resources[9].REP_FIELD02, 'F2_010', "Last record");
		start();
	});

}


function testTABCOUNTRY(_) {
	asyncTest("TABCOUNTRY - setup", function(_) {
		var representation = new Representation("TABCOUNTRY");
		representation.setup(_);
		start();
	});

	asyncTest("TABCOUNTRY First page", function(_) {
		var representation = new Representation("TABCOUNTRY");
		var query = representation.query(_);
		ok(true, "DBG query:" + JSON.stringify(query));
		key = getkey(query.$links.$next.$url);
		var count = 50;
		ok(query.$resources.length === 20, "resources length" + " " + query.$resources.length);
		strictEqual(query.$resources[0].CRY, 'AAB', "Country");
		strictEqual(query.$resources[0].CRYDES, 'Test', "Country description"); //French // GH 5661        
		ok(query.$resources[0].EECFLG === true, true, "EECFLAG = true");
		strictEqual(query.$resources[0].EECDAT, '0000-00-00', "EEU Date"); // D data type should resolve 1599-12-30  // GH 5661 
		strictEqual(query.$resources[0].CUR, 'EUR', "Currency");
		strictEqual(query.$resources[0].CUR_REF.$title, 'Euro', "Currency title");
		strictEqual(query.$resources[0].CUR_REF.$description, 'EURO euro', "Currency description"); //French // EURO eur   works, though FF Payload says just EURO // GH 5661 
		strictEqual(query.$resources[0].CUR_REF.$symbol, '€', "Currency symbol");
		strictEqual(query.$resources[0].CUR_REF.$precision, 11, "Currency precision");
		strictEqual(query.$resources[0].CUR_REF.$scale, 2, "Currency scale");
		strictEqual(query.$resources[0].LAN, 'FRA', "Language");
		strictEqual(query.$resources[0].LAN_REF.$title, 'Français', "Language title");
		strictEqual(query.$resources[0].LAN_REF.$description, 'Français', "Languge description");
		start();
	});
	asyncTest("TABCOUNTRY Second page", function(_) {
		var representation = new Representation("TABCOUNTRY");
		var query = representation.query(_, key);
		ok(true, "DBG query:" + JSON.stringify(query));
		strictEqual(query.$itemsPerPage, 20, "$itemsPerPage"); // truly 50
		strictEqual(query.$resources[2].CRY, 'BY', "Country"); //DZ
		strictEqual(query.$resources[2].CRYDES, 'Biélorussie', "Country description"); //French // returning Biélorussie. FF payload and dispaly are both ' '. // GH 5661 
		ok(query.$resources[1].EECFLG === false, true, "EECFLAG = true");
		strictEqual(query.$resources[2].EECDAT, '0000-00-00', "EEU Date"); // D data type should resolve 1599-12-30 // GH 5661 
		strictEqual(query.$resources[2].CUR, 'BYB', "Currency");
		strictEqual(query.$resources[2].CUR_REF.$title, "Rouble biélo", "Currency title"); //French // Rouble biélo returned in payload though not displayed.  // GH 5661 
		strictEqual(query.$resources[2].CUR_REF.$description, "Rouble Biélorusse", "Currency description"); //French // Rouble Biélorusse returned in payload though not displayed.  // GH 5661 
		strictEqual(query.$resources[2].CUR_REF.$symbol, null, "Currency symbol");
		strictEqual(query.$resources[2].CUR_REF.$precision, 11, "Currency precision");
		strictEqual(query.$resources[2].CUR_REF.$scale, 2, "Currency scale");
		strictEqual(query.$resources[2].LAN, 'BEL', "Language"); // FRA
		strictEqual(query.$resources[2].LAN_REF.$title, 'Biélorusse', "Language title"); // French
		strictEqual(query.$resources[2].LAN_REF.$description, 'Biélorusse', "Languge description"); // French  
		start();
	});
}

function testTABCOUNTRYUS(_) {
	asyncTest("TABCOUNTRYUS - setup", function(_) {
		var representation = new Representation("TABCOUNTRY");
		representation.setup(_, "en-US");
		start();
	});

	asyncTest("TABCOUNTRYUS First page", function(_) {
		var representation = new Representation("TABCOUNTRY");
		var query = representation.query(_);
		ok(true, "DBG query:" + JSON.stringify(query));
		key = getkey(query.$links.$next.$url);
		var count = 50;
		ok(query.$resources.length === 20, "resources length" + " " + query.$resources.length);
		strictEqual(query.$resources[0].CRY, 'AAB', "Country");
		strictEqual(query.$resources[0].CRYDES, 'ZZZZZZddd', "Country description"); //English  // GH 5661        
		ok(query.$resources[0].EECFLG === true, true, "EECFLAG = true");
		strictEqual(query.$resources[0].EECDAT, '0000-00-00', "EEU Date"); // D data type should resolve 1599-12-30  // GH 5661 
		strictEqual(query.$resources[0].CUR, 'EUR', "Currency");
		strictEqual(query.$resources[0].CUR_REF.$title, 'Euro', "Currency title");
		strictEqual(query.$resources[0].CUR_REF.$description, 'EURO', "Currency description"); //English // EURO eur   works, though FF Payload says just EURO // GH 5661 
		strictEqual(query.$resources[0].CUR_REF.$symbol, '€', "Currency symbol");
		strictEqual(query.$resources[0].CUR_REF.$precision, 11, "Currency precision");
		strictEqual(query.$resources[0].CUR_REF.$scale, 2, "Currency scale");
		strictEqual(query.$resources[0].LAN, 'FRA', "Language");
		strictEqual(query.$resources[0].LAN_REF.$title, 'French', "Language title"); //English 
		strictEqual(query.$resources[0].LAN_REF.$description, 'French', "Languge description"); //English 
		start();
	});
	asyncTest("TABCOUNTRYUS Second page", function(_) {
		var representation = new Representation("TABCOUNTRY");
		var query = representation.query(_, key);
		ok(true, "DBG query:" + JSON.stringify(query));
		strictEqual(query.$itemsPerPage, 20, "$itemsPerPage"); // truly 50
		strictEqual(query.$resources[2].CRY, 'BY', "Country"); //DZ
		strictEqual(query.$resources[2].CRYDES, '', "Country description"); //English  // returning Biélorussie. FF payload and dispaly are both ' '. // GH 5661 
		ok(query.$resources[2].EECFLG === false, true, "EECFLAG = true");
		strictEqual(query.$resources[2].EECDAT, '0000-00-00', "EEU Date"); // D data type should resolve 1599-12-30 // GH 5661 
		strictEqual(query.$resources[2].CUR, 'BYB', "Currency");
		strictEqual(query.$resources[2].CUR_REF.$title, '', "Currency title"); //English  // Rouble biélo returned in payload though not displayed.  // GH 5661 
		//strictEqual(query.$resources[1].CUR_REF.$description, '', "Currency description"); //English  // Rouble Biélorusse returned in payload though not displayed.  // GH 5661 
		strictEqual(query.$resources[1].CUR_REF.$symbol, null, "Currency symbol");
		strictEqual(query.$resources[1].CUR_REF.$precision, 11, "Currency precision");
		strictEqual(query.$resources[1].CUR_REF.$scale, 2, "Currency scale");
		strictEqual(query.$resources[2].LAN, 'BEL', "Language"); // FRA
		strictEqual(query.$resources[2].LAN_REF.$title, 'Biélorusse', "Language title"); //English 
		strictEqual(query.$resources[2].LAN_REF.$description, 'Biélorusse', "Languge description"); //English  
		start();
	});
}

function testPOSCOD(_) {
	asyncTest("POSCOD - setup", function(_) {
		var representation = new Representation("POSCOD");
		representation.setup(_);
		start();
	});

	asyncTest("POSCOD First page", function(_) {
		var representation = new Representation("POSCOD");
		var query = representation.query(_);
		ok(true, "DBG query:" + JSON.stringify(query));
		key = getkey(query.$links.$next.$url);
		var count = 50;
		ok(query.$resources.length != 0, "resources length" + " " + query.$resources.length);
		start();
	});
	asyncTest("POSCOD - US country filter", function(_) {
		var representation = new Representation("POSCOD");
		var query = representation.query(_, "&where=CRY%20eq%20'US'");
		var count = 50;
		query.$resources.forEach(function(resource) {
			if (resource.POSCOD === "15222") {
				ok(true, "DBG query:" + JSON.stringify(query));
				strictEqual(query.$resources.length, 12, "length");
				strictEqual(resource.POSCTY, "Wexford", "resource.POSCTY");
				strictEqual(resource.CRY, "US", "resource.CRY");
				strictEqual(resource.SATCOD, "CA", "resource.SATCOD");
				ok(resource.CRY_REF !== undefined, true, "resource.CRY_REF available");
				strictEqual(resource.CRY_REF.$description, "Etats-Unis", "resource.CRY_REF $Description: Etats-Unis");
				strictEqual(resource.CRY_REF.$title, "Etats-Unis", "resource.CRY_REF $title: Etats-Unis");
				ok(resource.POSCOD_REF !== undefined, true, "resource.POSCOD_REF available");
				strictEqual(resource.POSCOD_REF.$description, "Wexford", "resource.POSCOD_REF $Description: Wexford");
				ok(resource.SATCOD_REF !== undefined, true, "resource.SATCOD_REF available");
				strictEqual(resource.SATCOD_REF.$description, "California", "resource.SATCOD_REF $Description: California");
				strictEqual(resource.SATCOD_REF.$title, "California", "resource.SATCOD_REF $title: California");
				ok(resource.POSCTY_REF !== undefined, true, "resource.POSCTY_REF available");
				strictEqual(resource.POSCTY_REF.$title, "", "resource.POSCTY_REF $title: ' '");
			}
		});

		start();
	});
	asyncTest("POSCOD - FR country filter", function(_) {
		var representation = new Representation("POSCOD");
		var query = representation.query(_, "&where=CRY%20eq%20'FR'");
		var count = 50;
		query.$resources.forEach(function(resource) {
			if (resource.POSCOD === "01110" & resource.POSCTY === 'HOSTIAS') {
				ok(true, "DBG query:" + JSON.stringify(query));
				strictEqual(query.$resources.length, 20, "length=20");
				strictEqual(resource.POSCTY, "HOSTIAS", "resource.POSCTY");
				strictEqual(resource.CRY, "FR", "resource.CRY");
				strictEqual(resource.SATCOD, "", "resource.SATCOD");
				ok(resource.CRY_REF !== undefined, true, "resource.CRY_REF available");
				strictEqual(resource.CRY_REF.$description, "France", "resource.CRY_REF $Description: France");
				strictEqual(resource.CRY_REF.$title, "France", "resource.CRY_REF $title: France");
				ok(resource.POSCOD_REF !== undefined, true, "resource.POSCOD_REF available");
				strictEqual(resource.POSCOD_REF.$description, "HOSTIAS", "resource.POSCOD_REF $Description: HOSTIAS");
				//ok(resource.POSCOD_REF.$title !== undefined, true, "resource.POSCOD_REF.$title available");   #5639 Github
				ok(resource.SATCOD_REF !== undefined, true, "resource.SATCOD_REF available");
				ok(resource.POSCTY_REF !== undefined, true, "resource.POSCTY_REF available");
				strictEqual(resource.POSCTY_REF.$title, "", "resource.POSCTY_REF $title: ' '");
			}
		});

		start();
	});
}

function testAQCBPR(_) {
	asyncTest("AQCBPR - setup", function(_) {
		var representation = new Representation("AQCBPR");
		representation.setup(_);
		start();
	});
	asyncTest("AQCBPR - Field lengths", function(_) {
		var representation = new Representation("AQCBPR");
		//var query = representation.query(_, "&where=FCY%20eq%20'ZUSA'");
		var query = representation.query(_);
		var count = 20;

		ok(query.$resources.length === 20, "resources length" + " " + query.$resources.length);
		strictEqual(query.$resources.length, 20, "length=20");
		strictEqual(query.$itemsPerPage, count, "$itemsPerPage=20");
		query.$resources.forEach(function(resource) {
			if (resource.BPR === 'BPR0706') {
				strictEqual(resource.BPRNAM0, "Sun Microsystems3456789012345678901", "BPRNAM0 (NAM) 35 length");
			}
		});
		start();
	});
}

function testAQCPROC06(_) {

	asyncTest("AQCPROC06 - setup", function(_) {
		var representation = new Representation("AQCPROC06");
		representation.setup(_);
		start();
	});

	asyncTest("AQCPROC06 - first page", function(_) {
		var representation = new Representation("AQCPROC06");
		var query = representation.query(_);
		var count = 20;
		ok(true, "DBG query:" + JSON.stringify(query));
		for (var i = 0; i < 3; i++) {
			ok(query.$resources[i].C06P02_REF !== undefined, true, "resource.C06P02_REF"); //  truthy test  on  KEY of C06P02 for D-T  AQCPR2		  
		}
		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].C06P01, 'QUNIT-002', "first");
		strictEqual(query.$resources[count - 18].C06P01, 'QUNIT_004', "last");
		strictEqual(query.$resources[0].C06P02, 'R02P01_02', "first");
		strictEqual(query.$resources[1].C06P02, 'R02P01_01', "second");
		strictEqual(query.$resources[0].C06P02_REF.$title, 'INTSHO 2', "$title");
		strictEqual(query.$resources[0].C06P02_REF.$description, 'INTDES 2', "$description");
		strictEqual(query.$resources[2].C06P02_REF.$title, 'INTSHO 2', "$title");
		strictEqual(query.$resources[2].C06P02_REF.$description, 'INTDES 2', "$description");
		start();
	});
}

function testAQCPROC07(_) {

	asyncTest("AQCPROC07 - setup", function(_) {
		var representation = new Representation("AQCPROC07");
		representation.setup(_);
		start();
	});

	asyncTest("AQCPROC07 - first page", function(_) {
		var representation = new Representation("AQCPROC07");
		var query = representation.query(_);
		var count = 20;
		ok(true, "DBG query:" + JSON.stringify(query));
		strictEqual(query.$itemsPerPage, count, "$itemsPerPage");
		strictEqual(query.$resources[0].TBL2COL1, 'QUNIT_001', "TBL2COL1");
		strictEqual(query.$resources[0].TBL2COL2, 'QUNIT_001T2C2', "TBL2COL2");
		strictEqual(query.$resources[0].TBL1COL1, 'QUNIT_001', "TBL1COL1");
		strictEqual(query.$resources[0].TBL1COL2, 'QUNIT_001T1C1', "TBL1COL2");
		strictEqual(query.$resources[0].DESCRIPTION, 'Description', "Description");
		strictEqual(query.$resources[0].INTSHO, 'Test', "Short description");
		start();
	});
}

function testAQCPROT1(_) {
	asyncTest("AQCPROT1 - setup", function(_) {
		var representation = new Representation("AQCPROT1");
		representation.setup(_);
		start();
	});
	asyncTest("AQCPROT1 - Site filter default", function(_) { // Filter C 
		var representation = new Representation("AQCPROT1");
		var query = representation.query(_);
		var count = 20;

		ok(query.$resources.length === 13, "resources length" + " " + query.$resources.length);
		strictEqual(query.$resources.length, 13, "length=13");
		strictEqual(query.$itemsPerPage, count, "$itemsPerPage=20");
		ok(true, "DBG query:" + JSON.stringify(query));
		query.$resources.forEach(function(resource) {
			strictEqual(resource.FCY, "ZUSA", "resource.FCY=ZUSA");
			strictEqual(resource.REPCRY, "US", "resource.REPCRY");
		});
		asyncTest("AQCPROT1 - Decimal formats" + x3Helper.gitHubIssue(5923), function(_) {
			var representation = new Representation("AQCPROT1");
			var query = representation.query(_, "&filter=noFilters");
			query.$resources.forEach(function(resource) {

				strictEqual(resource.VAL2, "123456789012345", "MD0 format");
				if (resource.FCY === 'ZUSA') {
					strictEqual(resource.VAL1, "123456.789", "MD1 format");
				} else {
					strictEqual(resource.VAL1, "1234567890123.12", "MD1 format");
				}
				strictEqual(resource.QTY1, "123456789012345", "QTY format");
				strictEqual(resource.COE1, "12345.123456", "COE format");
				strictEqual(resource.MD2, "123456.12", "MD2 format");
				strictEqual(resource.MD3, "1234567890123.12", "MD3 format");
				strictEqual(resource.MD4, "123456789.12", "MD4 format");
				strictEqual(resource.MD5, "12345678901.1234", "MD5 format");
				strictEqual(resource.RCU, "123456789012345", "RCU format");
			});
		});

		start();
	});
}

asyncTest("start", function(_) {
	if (config.unit_test.x3endpoint.serverPort != config.unit_test.x3endpoint.localPort) {
		ok(x3Helper.initDatabase(_), "syracuse mongodb database initialized");
		x3Helper.initialize(_);
		ok(x3Helper.createObjects(_), "createObjects");
	} else {
		ok(true, "start");
	}
	start();
});

testABANK(_);
testAQCQRY01(_);
testAQCQRY02(_);
testAQCQRY03(_);
testAQCQRY04(_);
testAQCQRY05(_);
testIssue1465(_);


testAQCQRY11(_);
testMISC(_);
testAQCPROC01(_);
testTABCOUNTRY(_);
testTABCOUNTRYUS(_);
testPOSCOD(_);
testAQCLNK01(_);
testAQCPROC06(_);
testAQCPROC07(_);
testAQCPROT1(_);
testAQCBPR(_);


asyncTest("stop server", 0, function(_) {
	if (config.unit_test.x3endpoint.serverPort != config.unit_test.x3endpoint.localPort) {
		x3Helper.stopServer();
	}
	start();
});