"use strict";

var nodeconfig = require('syracuse-main/lib/nodeconfig').config;
var adxwhat = require('syracuse-x3/lib/clients/adxwhat/adxwhatClient');
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");

var done;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 500);
		}
	}
});

var traces = false;

var requests = {
	"PATH": "/produits/v170/SOLSUPV7/runtime/bin:/produits/v170/SOLSUPV7/runtime/ebin:/logiciels/oracle/product/10.2.0/bin:.:/produits/v160/SOLSUPV6/runtime/bin:/produits/v160/SOLSUPV6/runtime/ebin:/logiciels/oracle/product/10.2.0/bin:.:/shells/lbin:/shells/user/x3ora:/shells/user/oracle:/usr/local/bin:/opt/freeware/sbin:/opt/freeware/bin:/usr/bin:/etc:/usr/sbin:/usr/ucb:/usr/bin/X11:/sbin:/usr/java14/jre/bin:/usr/java14/bin::/usr/local/nmh/bin:/adx/x3dos:",
	"DBTYP": "ORACLE",
	"ADXDIR": "/produits/v170/SOLSUPV7/runtime",
	"TMPDIR": "/produits/v170/SOLSUPV7/runtime/tmp",
	"ADXTERM": "xterm",
	"ADXORAOPT": "2",
	"ORACLE_HOME": "/logiciels/oracle/product/10.2.0",
	"ORACLE_SID": "X3DVLP",
	"NLS_SORT": "BINARY"
};
var whatUnitConfig = nodeconfig.x3adxwhat && nodeconfig.x3adxwhat.qunit || {};
var connCtx = {
	hostname: whatUnitConfig.server ? whatUnitConfig.server : "sodaix02",
	port: whatUnitConfig.port ? whatUnitConfig.port : 17000,
	user: whatUnitConfig.user ? whatUnitConfig.user : "apisu",
	password: whatUnitConfig.pass ? whatUnitConfig.pass : "CRYPT:xkvvaTccvr",
	secured: whatUnitConfig.secure ? whatUnitConfig.secure : true
};
//console.log("connCtx: " + JSON.stringify(connCtx, null, 2));
var recOptions = {
	recMode: whatUnitConfig.online ? "REC" : "PLAY",
	fileName: "apiTest.json",
	path: "node_modules/syracuse-x3/lib/clients/adxwhat/data"
};
if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file

asyncTest("Get environment variables", function(_) {
	//activate traces
	if (traces) {
		adminTestFixtures.setTracesOn(_, "x3Comm.adxwhat");
	}
	var keys = Object.keys(requests);
	for (var i in keys) {
		recOptions.fileName = "adxwhatApiTest_" + keys[i] + ".json";
		strictEqual(adxwhat.env(_, connCtx, keys[i], recOptions), requests[keys[i]], keys[i] + " OK");
	}
	start();
});

test("kill", function() {
	done = true;
	start();
});