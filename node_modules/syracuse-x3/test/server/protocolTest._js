"use strict";

var x3Client = require('syracuse-x3/lib/client');
QUnit.module(module.id);
test('X3 PROTOCOL TEST DISABLED FOR NOW', 1, function() {
	ok(true, "work in progress")
});

return;

var baseUrl = "http://localhost:8124/sdata/x3/erp/SUPERV";
var baseType = "application/json;vnd.sage.syracuse.representation=x3.erp.SUPERV";
var config = {
	address: "172.28.16.106",
	port: 17000,
	timeout: 60000,
	tracer: trace,
	server: ""
};

var client = x3Client.create(config);
var locale = "fr-FR";
var folder = "SUPERV";
var done;

function _verify(got, exp, p) {
	Object.keys(exp).forEach(function(key) {
		var path = p ? p + "." + key : key;
		var gotVal = got[key];
		var expVal = exp[key];
		if (expVal === null || typeof expVal === "string" || typeof expVal === "boolean" || typeof expVal === "number") {
			strictEqual(gotVal, expVal, path + " ok");
		} else if (typeof expVal === "function") {
			expVal(gotVal, path);
		} else if (Array.isArray(expVal)) {
			ok(gotVal != null, path + " exists");
			strictEqual(gotVal.length, expVal.length, path + " same length");
			for (var i = 0; i < expVal.length; i++)
			_verify(gotVal[i], expVal[i], path + "[" + i + "]");
		} else {
			ok(gotVal != null, path + " exists");
			_verify(gotVal, expVal, path);
		}
	})
}

function verify(got, name) {
	_verify(got, require("../fixtures/" + name).response);
}

QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (done) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 0)
		}
	}
});

function trace(message) {
	//console.log(JSON.stringify({ module: "X3 Client", name: "trace", message: message }));
}

asyncTest("connect", 1, function(_) {
	client.connect(_, {
		server: config.server,
		folder: folder,
		locale: locale
	});
	client.createSession(_, {
		sessionType: "primary",
		locale: locale
	});
	ok(true, "connected");
	start();
})

var ATABLE_PROTO = {}
asyncTest("$query prototype", function(_) {
	var request = {
		method: "GET",
		url: baseUrl + "/$prototypes('ATABLE.$query')",
		headers: {
			"accept": "application/json"
		}
	};
	var response = client.sendRequest(_, request);
	//strictEqual(response.headers["content-type"], "application/json");
	verify(response, "ATABLE_$query_prototype");
	start();
})
asyncTest("$query feed", function(_) {
	var request = {
		method: "GET",
		url: baseUrl + "/ATABLE?count=2",
		headers: {
			"accept": "application/json;vnd.sage.syracuse.representation=x3.erp.SUPERV.ATABLE.$query"
		}
	};
	var response = client.sendRequest(_, request);
	//strictEqual(response.headers["content-type"], "application/json");
	verify(response, "ATABLE_$query_count2");
	start();
})
asyncTest("kill", 0, function(_) {
	done = true;
	start();
});