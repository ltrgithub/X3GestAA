"use strict";

var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var port = (config.unit_test && config.unit_test.serverPort) || 3004;
var baseUrl = "http://localhost:" + port;

var uploadUrl = "/sdata/x3/erp/SUPERV/$service/upload";

var AdminHelper = require('@sage/syracuse-lib/src/collaboration/helpers').AdminHelper;
//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;
var online = config.fileService && config.fileService.qunit && config.fileService.qunit.online;
var ez = require('ez-streams');
var requestCount = 0;

var done;
import { assert } from 'chai';
Object.keys(assert).forEach(key => {
	if (key !== 'isNaN') global[key] = assert[key];
});

describe(module.id, () => {
	var cookie;

	function getCookie(_) {

		var db = AdminHelper.getCollaborationOrm(_);
		var entity = db.fetchInstances(_, db.model.getEntity(_, "user"), {
			jsonWhere: {
				login: 'admin'
			}
		});

		var response = new ez.devices.http.client({
			url: baseUrl + "/sdata",
			user: entity ? "admin" : 'guest',
			password: entity ? "admin" : 'guest'

		}).end().response(_);
		response.readAll(_);
		strictEqual(response.statusCode, 200, "user authenticated");
		return response.headers["set-cookie"];
	}

	if ((config.unit_test || {}).x3endpoint) {
		//start syracuse server
		it('initialize syracuse test server', function(_) {
			requestCount++;
			require('syracuse-main/lib/syracuse').startServers(_, port);
			ok(true, "server initialized");
			cookie = getCookie(_);
			ok(cookie, "cookie ok");
		});

		var data = "data data data data data data data data data data data data\ndata data data data data data data data data data data data";

		it('Upload', function(_) {
			var buf = new Buffer(data);
			var headers = {
				cookie: cookie,
				"accept": "application/json",
				"Accept-Encoding": "gzip,deflate,sdch",
				// "Accept-Language": "en-US,en;q=0.8,fr;q=0.6,fr-FR;q=0.4",
				// "Connection": "keep-alive",
				"Content-Length": buf.length,
				"content-type": "application/octet-stream",
				"recordpath": "node_modules/syracuse-x3/lib/clients/sadfsq/data",
				"record": online ? "REC" : "PLAY"
			};



			var response;
			headers["recordfile"] = "fileServiceTest1.json";

			var req = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName=qunit_upload_test.dat",
				method: "PUT",
				headers: headers
			});
			req.write(_, buf);
			response = req.end().response(_);
			strictEqual(response.statusCode, 204, "Upload using fileName parameter");

			response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName='qunit_upload_test.dat'",
				method: "PUT",
				headers: headers
			}).end(buf).response(_);
			strictEqual(response.statusCode, 204, "Upload using quoted fileName parameter");

			response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName='[TMP]/qunit_upload_test.dat'",
				method: "PUT",
				headers: headers
			}).end(buf).response(_);
			strictEqual(response.statusCode, 204, "Upload in [TMP] volume using fileName parameter");

			headers["x-file-name"] = "qunit_upload_test.dat";
			response = new ez.devices.http.client({
				url: baseUrl + uploadUrl,
				method: "PUT",
				headers: headers
			}).end(buf).response(_);
			strictEqual(response.statusCode, 204, "Upload using x-file-name header");

			response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName=../tra/qunit_upload_test.dat",
				method: "PUT",
				headers: headers
			}).end(buf).response(_);
			strictEqual(response.statusCode, 500, "Upload trying to hack dir ==> 500");

			response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName='[TMP]/../tra/qunit_upload_test.dat'",
				method: "PUT",
				headers: headers
			}).end(buf).response(_);
			strictEqual(response.statusCode, 500, "Upload in [TMP] volume but trying to hack dir ==> 500");


			var response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName='[ZZAP]/testuploadgx3app.txt'",
				method: "PUT",
				headers: headers
			}).end(buf).response(_);
			strictEqual(response.statusCode, 204, "Upload with a root path that contains '/' ");

			var response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName='[ZZAP]/test/testuploadgx3app.txt'",
				method: "PUT",
				headers: headers
			}).end(buf).response(_);
			strictEqual(response.statusCode, 204, "upload with a root path that contains '/' and a subdirectory ");

			requestCount++;
		});

		it('Download', function(_) {
			var headers = {
				cookie: cookie,
				"accept": "application/json;vnd.sage=syracuse",
				"record": online ? "REC" : "PLAY",
				"recordPath": "node_modules/syracuse-x3/lib/clients/sadfsq/data"
			};
			headers["recordfile"] = "fileServiceTest1.json";

			var response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName='qunit_upload_test.dat'",
				method: "GET",
				headers: headers
			}).end().response(_);
			strictEqual(response.statusCode, 200, "ok");
			var content = response.readAll(_);
			strictEqual(content.toString("utf8"), data, "content match");

			var response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName='[ZZAP]/testuploadgx3app.txt'",
				method: "GET",
				headers: headers
			}).end().response(_);
			strictEqual(response.statusCode, 200, "ok");
			var content = response.readAll(_);
			strictEqual(content.toString("utf8"), data, "content match");

			var response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName='[ZZAP]/test/testuploadgx3app.txt'",
				method: "GET",
				headers: headers
			}).end().response(_);
			strictEqual(response.statusCode, 200, "ok");
			var content = response.readAll(_);
			strictEqual(content.toString("utf8"), data, "content match");

			response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName=../tra/qunit_upload_test.dat",
				method: "GET",
				headers: headers
			}).end().response(_);
			strictEqual(response.statusCode, 500, "Download trying to hack dir ==> 500");
			requestCount++;
		});

		it('DeleteFile', function(_) {
			var headers = {
				cookie: cookie,
				"accept": "application/json;vnd.sage=syracuse",
				"record": online ? "REC" : "PLAY",
				"recordPath": "node_modules/syracuse-x3/lib/clients/sadfsq/data"
			};
			headers["recordfile"] = "fileServiceTest1.json";

			var response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName=../tra/qunit_upload_test.dat",
				method: "DELETE",
				headers: headers
			}).end().response(_);
			strictEqual(response.statusCode, 500, "Delete file trying to hack dir ==> 500");


			response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName=qunit_upload_test.dat",
				method: "DELETE",
				headers: headers
			}).end().response(_);
			strictEqual(response.statusCode, 204, "Delete file");

			var response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName='[ZZAP]/testuploadgx3app.txt'",
				method: "DELETE",
				headers: headers
			}).end().response(_);
			strictEqual(response.statusCode, 204, "ok");

			var response = new ez.devices.http.client({
				url: baseUrl + uploadUrl + "?fileName='[ZZAP]/test/testuploadgx3app.txt'",
				method: "DELETE",
				headers: headers
			}).end().response(_);
			strictEqual(response.statusCode, 204, "ok");
			requestCount++;
		});
	}

	it('kill', function() {
		done = true;
	});
});