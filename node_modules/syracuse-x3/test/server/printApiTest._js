"use strict";

var config = require('config');
var pconfig = config.x3print || {};
var flows = require('streamline-runtime').flows;

var PrintClient = require('syracuse-x3/lib/clients/print/PrintClient');

var hostname = pconfig && pconfig.server && pconfig.server.qunit && pconfig.server.qunit.hostname || "ecvmdev2003x64";
var port = pconfig && pconfig.server && pconfig.server.qunit && pconfig.server.qunit.port || 1890;

var jobData1 = {
	"_FormatExport": "29",
	"__REPORT": "TABCOUNTRY.rpt",
	"__DESTINATION": "3",
	"__TYPDBA": "1",
	"__DBDATABASE": "X3DVLP",
	"__DBUSER": "SUPERV",
	"__DBPASSWORD": "tiger",
	"__WSTATION": "pc101954.sagefr.adinternal.com",
	"__CDUSER": "TC",
	"__ADXSOL": "SUPDVLP",
	"__APPLICATION": "SUPERV;aws-x3-devsup;17000",
	"__APPRPT": "SUPERV;aws-x3-devsup;17000",
	"__RPTLAN": "FRA",
	"X3DOS": "SUPERV;aws-x3-devsup;17000;150;FRA",
	"__JOBLINKED": "",
	"__REQUETE": "25561900",
	"_Orientation": "0",
	"_PaperSize": "44",
	"X3CLI": "Superviseur 140",
	"X3EDT": "Etat Sage X3 Entreprise Copyright Sage",
	"X3ETA": "TABCOUNTRY",
	"X3TIT": "Pays",
	"X3OPE": "Teddy Chambard",
	"X3USR": "TC",
	"X3LAN": "FRA",
	"X3SIT1": "*",
	"X3SIT2": "z",
	"X3PRF": "ADMIN",
	"X3FCT": "",
	"X3SIT": "",
	"paysdeb": " ",
	"paysfin": "zzzzzzzzzz",
	"impselections": "0",
	"año": ""
};

function writeReportFile(_, jobId, data) {
	var f = __dirname + "/../data/REPORT_" + jobId + ".pdf";
	require('streamline-fs').writeFile(f, data, "binary", _);
}

var done;
QUnit.module(module.id, {
	setup: function() {}
});

// skip the test if not enabled by config
if (config.unit_test && config.unit_test.suppress && config.unit_test.suppress.x3print) {
	test('TESTS SKIPPED: module is suppressed in nodelocal.js', function() {
		ok(true, "dummy test");
	});
} else {

	var recOptions = {
		recMode: pconfig.qunit && pconfig.qunit.online ? "REC" : "PLAY",
		path: "node_modules/syracuse-x3/lib/clients/print/data/api/"
	};
	if (recOptions.recMode === "REC") recOptions.overwrite = true; // always override file

	asyncTest("Connection", 5, function(_) {
		recOptions.fileName = "printApiTest_CONNECT.json";
		var cli = PrintClient.getClient(_, hostname, port, "CONNECT", recOptions);
		strictEqual(cli.pid != null && cli.pid >= 0, true, "pid: " + cli.pid);
		strictEqual(cli.srvTechnoVers && cli.srvTechnoVers.UIAction, "SetTechnoVers", "UIAction: " + cli.srvTechnoVers.UIAction);
		strictEqual(cli.srvTechnoVers && cli.srvTechnoVers.Id, "3", "Id: " + cli.srvTechnoVers.Id);
		strictEqual(cli.srvTechnoVers && cli.srvTechnoVers.Version, "15i.012", "Version: " + cli.srvTechnoVers.Version);
		strictEqual(cli.srvTechnoVers && cli.srvTechnoVers.Protocol, "15000B", "Protocol: " + cli.srvTechnoVers.Protocol);
		start();
	});
	asyncTest("ChangePriority and ListJobs", function(_) {
		recOptions.fileName = "printApiTest_PRIORITY.json";
		var cli = PrintClient.getClient(_, hostname, port, "PRIORITY", recOptions);
		strictEqual(cli.pid != null && cli.pid >= 0, true, "pid: " + cli.pid);
		stop();

		var seqMap = [];
		for (var i = 0; i < 10; i++) {
			var jobId = "b3edbfdf-9924-4e5c-9969-a689fd28e35" + i;
			jobData1.__wJobID = jobId;
			var seqId = cli.launchReport(_, jobData1);
			seqMap.push(seqId);
			strictEqual(seqId != null && seqId > 0, true, "launchReport OK: seqId=" + seqId);
		}
		var jobs = cli.listJobs(_);
		var res;
		res = cli.changePriority(_, seqMap[2], '+');
		strictEqual(res && res.ChangeOrderRptJob, "1", "Change priority OK for rank " + seqMap[2] + " and order '+'");
		res = cli.changePriority(_, seqMap[5], '-');
		strictEqual(res && res.ChangeOrderRptJob, "1", "Change priority OK for rank " + seqMap[5] + " and order '-'");
		res = cli.changePriority(_, seqMap[9], 'MAX');
		strictEqual(res && res.ChangeOrderRptJob, "1", "Change priority OK for rank " + seqMap[9] + " and order 'MAX'");
		res = cli.changePriority(_, seqMap[0], 'MIN');
		strictEqual(res && res.ChangeOrderRptJob, "1", "Change priority OK for rank " + seqMap[0] + " and order 'MIN'");

		try {
			res = cli.changePriority(_, seqMap[1], '?');
		} catch (e) {
			strictEqual(e.message, "The order '?' is not valid. Accepted order are: 'MIN;MAX;+;-'", "Error on change priority OK for bad order '?'");
		}

		var jobsL = cli.listJobs(_);
		jobs = jobsL.slice(jobsL.length - 10);

		for (var j = 0; j < jobs.length; j++) {
			var job = jobs[j];
			strictEqual(job.report, jobData1.__REPORT, "Report name OK: " + job.report);
			strictEqual(job.workstation, jobData1.__WSTATION, "Workstation OK: " + job.workstation);
			strictEqual(job.user, jobData1.X3USR, "User OK: " + job.user);
			if (j === 2) strictEqual(job.order, (jobsL.length - 10) + 2, "Check priority OK for rank " + job.rank + " and order '+'");
			if (j === 5) strictEqual(job.order, (jobsL.length - 10) + 7, "Check priority OK for rank " + job.rank + " and order '-'");
			if (j === 9) strictEqual(job.order, 1, "Check priority OK for rank " + job.rank + " and order 'MAX'");
			if (j === 0) strictEqual(job.order, (jobsL.length - 10) + 10, "Check priority OK for rank " + job.rank + " and order 'MIN'");
			cli.cancelReport(_, job.rank);
		}
		start();
	});
	asyncTest("List imprimantes", function(_) {
		recOptions.fileName = "printApiTest_LIST.json";
		var cli = PrintClient.getClient(_, hostname, port, "LIST", recOptions);
		strictEqual(cli.pid != null && cli.pid >= 0, true, "pid: " + cli.pid);
		stop();
		var props = cli.listPrinters(_);
		var nbPrinters = (Object.keys(props).length - 1);
		strictEqual(nbPrinters, props._NbPrinters, "Nb Printers defined: " + nbPrinters);
		for (var i = 1; i < nbPrinters + 1; i++) {
			var key = Object.keys(props)[i];
			strictEqual(props[key] !== null, true, key + ": " + props[key]);
		}
		start();
	});

	asyncTest("Get State and Result on unknow Job", function(_) {
		recOptions.fileName = "printApiTest_STATE_1.json";
		var cli = PrintClient.getClient(_, hostname, port, "STATE_1", recOptions);
		var result = cli.getState(_, "UnknowJob");
		strictEqual(result && result.code, 99, "Code: " + result.code);
		strictEqual(result && result.message, "Job 0 - ERR 258 en provenance du serveur d'édition : Impossible de récupèrer une référence sur la demande d'impression.\nUnknowJob - ", "Message: " + result.message);
		start();
	});

	asyncTest("OuvImp; GetState; GetReport", function(_) {
		recOptions.fileName = "printApiTest_STATE_2.json";
		var cli = PrintClient.getClient(_, hostname, port, "STATE_2", recOptions);
		var jobId = "b3edbfdf-9924-4e5c-9969-a689fd28e350";
		jobData1.__wJobID = jobId;

		stop();
		var seqId = cli.launchReport(_, jobData1);
		strictEqual(seqId != null && seqId > 0, true, "OuvImp OK");
		var count = 0;
		//var intervalId = setInterval(function(_) {
		//flows.sleep(_,1000);
		var intervalId = flows.setInterval(function(_) {


			var result = cli.getState(_, jobId);
			if (result.code === 5) {
				strictEqual(result && result.code, 5, "Code: " + result.code);
				var result2 = cli.getReport(_, jobId);
				strictEqual(result2 && result2.length, result2 && result2.binary.length, "Binary OK");
				// uncomment to write pdf file in data directory
				//writeReportFile(_, jobId, result2.binary);
				clearInterval(intervalId);
				start();
			} else if (count <= 4) {

				count++;
				strictEqual(result && result.code, 0, "Code: " + result.code);
			} else {
				clearInterval(intervalId);
				start();
			}

		}, 500);
	});

	asyncTest("Cancel Report", function(_) {
		recOptions.fileName = "printApiTest_CANCEL.json";
		var cli = PrintClient.getClient(_, hostname, port, "CANCEL", recOptions);
		var jobId = "b3edbfdf-9924-4e5c-9969-a689fd28e367";
		jobData1.__wJobID = jobId;
		stop();
		var seqId = cli.launchReport(_, jobData1);
		strictEqual(seqId != null && seqId > 0, true, "OuvImp OK");
		var result = cli.getState(_, jobId);
		strictEqual(result && result.code, 0, "Code: " + result.code);
		cli.cancelReport(_, seqId);
		var result2 = cli.getState(_, jobId);
		strictEqual(result2 && result2.code, 99, "Deleted code: " + result2.code);
		start();
	});

	asyncTest("AllPrinter", function(_) {
		recOptions.fileName = "printApiTest_ALL.json";
		var cli = PrintClient.getClient(_, hostname, port, "ALL", recOptions);
		strictEqual(cli.pid != null && cli.pid >= 0, true, "pid: " + cli.pid);
		stop();
		var result = cli.getAllPrinters(_);
		for (var i = 0; i < result.length; i++) {
			var keys = Object.keys(result[i]);
			for (var j = 0; j < keys.length; j++) {
				var key = keys[j];
				strictEqual(result[i][key] !== null, true, key + ": " + result[i][key]);
			}
		}
		start();
	});

	asyncTest("MorePrinter", function(_) {
		recOptions.fileName = "printApiTest_MORE.json";
		var cli = PrintClient.getClient(_, hostname, port, "MORE", recOptions);
		strictEqual(cli.pid != null && cli.pid >= 0, true, "pid: " + cli.pid);
		stop();
		var result = cli.getAdvancedParameters(_, "\\\\172.28.8.4\\HP3390-grenoble", "172.28.8.151", "HP Universal Printing PCL 5");
		for (var i = 0; i < result.paperSize.length; i++) {
			strictEqual(result.paperSize[i] != null, true, "paperSize[" + i + "] " + JSON.stringify(result.paperSize[i]));
		}
		for (var j = 0; j < result.bac.length; j++) {
			strictEqual(result.bac[j] != null, true, "back[" + j + "] " + JSON.stringify(result.bac[j]));
		}
		start();
	});

	asyncTest("ExtraPrinter", function(_) {
		recOptions.fileName = "printApiTest_EXTRA.json";
		var cli = PrintClient.getClient(_, hostname, port, "EXTRA", recOptions);
		strictEqual(cli.pid != null && cli.pid >= 0, true, "pid: " + cli.pid);
		stop();
		var result = cli.getExtraParameters(_, "\\\\172.28.8.4\\HP3390-grenoble", "172.28.8.151", "HP Universal Printing PCL 5", 9);
		strictEqual(result.$width, 2100, "A4 Paper size width: " + result.$width);
		strictEqual(result.$height, 2970, "A4 Paper size height: " + result.$height);
		start();
	});


	var filesName = ["test1.txt", "test2.txt", "\\..\\test3.txt"],
		filesLoc = ["sandbox", "SUPERV@SUPDVLP$FRA!10", "..\\"];
	var cnxId = "FILE_OPE";
	asyncTest("putFile - sandbox", function(_) {
		recOptions.fileName = "printApiTest_FILE-1.json";

		var cli = PrintClient.getClient(_, hostname, port, cnxId, recOptions);
		strictEqual(cli.pid != null && cli.pid >= 0, true, "pid: " + cli.pid);
		stop();
		var buf = new Buffer("test1 upload \n. end", "utf8");
		var result = cli.filePut(_, filesName[0], filesLoc[0], null, buf, buf.length);
		strictEqual(result.code, 0, "File '" + filesName[0] + "#" + filesLoc[0] + "' successfully uploaded.");
		start();
	});
	asyncTest("putFile - bad directory name ", function(_) {
		var cli = PrintClient.getClient(_, hostname, port, cnxId, recOptions);
		strictEqual(cli.pid != null && cli.pid >= 0, true, "pid: " + cli.pid);
		stop();
		var buf = new Buffer("test2 upload \n. end", "utf8");
		var result = cli.filePut(_, filesName[0], "bid", null, buf, buf.length);
		strictEqual(result.code, 41, "Directory error exception catched properly for '" + filesName[0] + "#" + "bid" + "'.");
		start();
	});
	asyncTest("putFile - upload runtime folder ", function(_) {
		var cli = PrintClient.getClient(_, hostname, port, cnxId, recOptions);
		strictEqual(cli.pid != null && cli.pid >= 0, true, "pid: " + cli.pid);
		stop();
		var buf = new Buffer("test upload \n. end", "utf8");
		var result = cli.filePut(_, filesName[1], filesLoc[1], null, buf, buf.length);
		strictEqual(result.code, 0, "File '" + filesName[1] + "#" + filesLoc[1] + "' successfully uploaded.");
		start();
	});
	asyncTest("putFile - bad location", function(_) {
		var cli = PrintClient.getClient(_, hostname, port, cnxId, recOptions);
		strictEqual(cli.pid != null && cli.pid >= 0, true, "pid: " + cli.pid);
		stop();
		var buf = new Buffer("test upload \n. end", "utf8");
		try {
			var result = cli.filePut(_, filesName[1], filesLoc[2], null, buf, buf.length);
			ok(false, "Error raise bad location ko");
		} catch (e) {
			ok(true, "Error raise bad location " + e.message);
			strictEqual(e.message, "bad location", "message error ok");
		}
		try {
			var result = cli.filePut(_, filesName[2], filesLoc[1], null, buf, buf.length);
			ok(false, "Error raise bad location ko");
		} catch (e) {
			ok(true, "Error raise bad location " + e.message);
			strictEqual(e.message, "bad fileName", "message error ok");
		}

		start();
	});
	asyncTest("deleteFile", function(_) {
		var cli = PrintClient.getClient(_, hostname, port, cnxId, recOptions);
		strictEqual(cli.pid != null && cli.pid >= 0, true, "pid: " + cli.pid);
		stop();
		var result = cli.fileDelete(_, filesName[0], filesLoc[0], null);
		strictEqual(result.code, 0, "File '" + filesName[0] + "#" + filesLoc[0] + "' successfully deleted.");
		start();
	});
	asyncTest("deleteFile", function(_) {
		var cli = PrintClient.getClient(_, hostname, port, cnxId, recOptions);
		strictEqual(cli.pid != null && cli.pid >= 0, true, "pid: " + cli.pid);
		stop();
		var result = cli.fileDelete(_, filesName[1], filesLoc[1], null);
		strictEqual(result.code, 0, "File '" + filesName[1] + "#" + filesLoc[1] + "' successfully deleted.");
		start();
	});
	asyncTest("deleteFile - bad location", function(_) {
		var cli = PrintClient.getClient(_, hostname, port, cnxId, recOptions);
		strictEqual(cli.pid != null && cli.pid >= 0, true, "pid: " + cli.pid);
		stop();
		try {
			var result = cli.fileDelete(_, filesName[1], filesLoc[2]);
			ok(false, "Error raise bad location ko");
		} catch (e) {
			ok(true, "Error raise bad location " + e.message);
			strictEqual(e.message, "bad location", "message error ok");
		}
		try {
			var result = cli.fileDelete(_, filesName[2], filesLoc[1]);
			ok(false, "Error raise bad location ko");
		} catch (e) {
			ok(true, "Error raise bad location " + e.message);
			strictEqual(e.message, "bad fileName", "message error ok");
		}

		start();
	});
	test("kill", function() {
		done = true;
		start();
	});
}