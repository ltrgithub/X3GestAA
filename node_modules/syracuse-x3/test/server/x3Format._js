"use strict";
var module = QUnit.module;
var assert = require("assert");
var config = require('config'); // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var x3Helper = require("syracuse-x3/test/fixtures/x3Helper");
var helpers = require('syracuse-core').helpers;

var tracer; // = console.log;
var doStop = false;

module(config.unit_test.QLF.folder + ".x3Format", {
	setup: function() {}
});

if ((config.unit_test || {}).x3endpoint) {
	(function test(_) {
		asyncTest("start", function(_) {
			ok(x3Helper.initDatabase(_), "syracuse mongodb database initialized");
			x3Helper.initialize(_);
			ok(x3Helper.createObjects(_), "createObjects");
			start();
		});

		var cookie = null;

		function _getCookie(_) {
			cookie = cookie || x3Helper.getCookie(_);
			//!ok("cookie"   ,"cookie"   +JSON.stringify(cookie));
			return cookie;
		}

		var Representation = function(_repName) {
			this.repName = _repName;
			this.uuid = helpers.uuid.generate();

			tracer && tracer("new Representation", this.repName);

			this.delete = function(_, _key, _status) {
				/*dbg*/
				//tracer && tracer("this.delete:",_key);
				var url = x3Helper.x3Url(this.repName + "(%27" + _key + "%27)?representation=" + this.repName + ".$query&trackingId=" + this.uuid);
				var response = x3Helper.delete(_, _getCookie(_), url, {}, _status);
				//tracer && tracer(response);
			};

			this.create = function(_) {
				// Get the $edit prototype :
				this.proEdit = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('" + this.repName + ".$edit')"), 200);

				//Create a new working copy:
				this.trackingId = helpers.uuid.generate();
				var url = x3Helper.x3Url(this.repName + "/$workingCopies?representation=" + this.repName + ".$edit&trackingId=" + this.trackingId);
				this.workingCopy = x3Helper.post(_, _getCookie(_), url, {}, 200);
				return this.workingCopy;
			};

			this.update = function(_, _key, _delta) {
				// Get the $edit prototype :
				this.proEdit = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('" + this.repName + ".$edit')"), 200);

				//Create a new working copy:
				var url;
				/*dbg*/
				//ok("update","typeof(_delta):"+typeof(_delta));
				if (typeof(_delta) == 'undefined') {
					this.trackingId = helpers.uuid.generate();
					url = x3Helper.x3Url(this.repName + "(%27" + _key + "%27)/$workingCopies?representation=" + this.repName + ".$edit&trackingId=" + this.trackingId);
					this.workingCopy = x3Helper.post(_, _getCookie(_), url, {}, 200);
				} else {
					// Reuse the previous trackingId : 
					_delta.$trackingId = this.trackingId;
					ok(true, "DBG update FULL DELTA:" + JSON.stringify(_delta));

					url = x3Helper.x3Url(this.repName + "(%27" + _key + "%27)/$workingCopies?representation=" + this.repName + ".$edit");
					this.workingCopy = x3Helper.post(_, _getCookie(_), url, _delta, 200);
					ok(true, "DBG this.workingCopy:" + JSON.stringify(this.workingCopy));
				}
				if ("$diagnoses" in this.workingCopy) {
					ok(false, this.workingCopy.$diagnoses[0].message);
				}
				return this.workingCopy;
			};

			this.edit = function(_, _key) {
				// Get the $edit prototype :
				this.proEdit = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('" + this.repName + ".$edit')"), 200);

				//Create a new working copy:
				var url = x3Helper.x3Url(this.repName + "(%27" + _key + "%27)/$workingCopies?representation=" + this.repName + ".$edit");
				var data = x3Helper.post(_, _getCookie(_), url, {}, 200);
				ok(true, "DBG data:" + JSON.stringify(data));
				if ("$diagnoses" in this.workingCopy) {
					ok(false, data.$diagnoses[0].message);
				}
				return data;
			};

			this.setProperties = function(_, _delta, _isDisabled, _status) {
				/*dbg*/
				//tracer && tracer("*** setProperties:",_delta);

				var url = this.workingCopy.$url.substring("{$baseUrl}/".length);
				_delta.$etag = this.workingCopy.$etag;
				_delta.$uuid = this.workingCopy.$uuid;
				_delta.$url = x3Helper.x3Url(url);

				/*dbg*/
				//tracer && tracer("*** _delta.$url:",_delta.$url);
				/*dbg*/
				//ok("setProperties",JSON.stringify(_delta));
				var response;
				response = x3Helper.put(_, _getCookie(_), _delta.$url, _delta, _status);
				/*dbg*/
				//ok(true,"DBG setProperties:"+JSON.stringify(response));   
				if ((typeof(_isDisabled) != 'undefined') && (_isDisabled != null)) {
					/*dbg*/
					ok("setProperties", JSON.stringify(response));
					//!ok("_isDisabled","_isDisabled="+_isDisabled);
					//!ok("$isDisabled","$isDisabled="+response.$actions.$save.$isDisabled);
					strictEqual(response.$actions.$save.$isDisabled, _isDisabled, "$isDisabled:" + _isDisabled);
				}
				return response;
			};

			this.save = function(_, _property, _status) {
				var url = x3Helper.x3Url("$workingCopies(%27" + this.trackingId + "%27)?representation=" + this.repName + ".$edit");
				var response = this.setProperties(_, {
					"$actions": {
						"$save": {
							"$isRequested": true
						}
					}
				});
				/*dbg*/
				ok(true, "DBG save:" + JSON.stringify(response));
				if (_property == null) {
					_status = _status || "success";
					if (_status == "success") {
						strictEqual(response.$actions.$save.$diagnoses[0].$severity, _status, response.$actions.$save.$diagnoses[0].$message);
					} else {
						strictEqual(response.$diagnoses[0].$severity, _status, response.$diagnoses[0].$message);
					}
				} else {
					_status = _status || "error";
					strictEqual(response.$properties[_property].$diagnoses[0].$severity, _status, response.$properties[_property].$diagnoses[0].$message);
				}
				return response;
			};

			this.read = function(_, _key) {
				// Get the $details prototype :
				this.proDetails = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('" + this.repName + ".$details')"), 200);
				/*dbg*/
				//ok(true,this.repName+".$details prototype");

				var data = x3Helper.get(_, _getCookie(_), x3Helper.x3Url(this.repName + "(%27" + _key + "%27)?representation=" + this.repName + ".$details"), 200);
				/*dbg*/
				//ok(true,this.repName+".$details data"); 
				/*dbg*/
				//tracer && tracer("*** data:",data);
				/*dbg*/
				//ok(true,"DBG read:"+JSON.stringify(data));
				return data;
			};

			this.query = function(_, _query) {
				// Get the $details prototype :
				this.proQuery = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('" + this.repName + ".$query')"), 200);
				/*dbg*/
				//ok(true,this.repName+".$details prototype");

				var data = x3Helper.get(_, _getCookie(_), x3Helper.x3Url(this.repName + "?representation=" + this.repName + ".$query" + _query), 200);
				/*dbg*/
				//ok("query","query:"+JSON.stringify(data));
				return data;
			};
		};

		/*******************************************************************************
         AQCQRY02 :  
        *******************************************************************************/

		function testAQCQRY02() {
			asyncTest("AQCQRY02 - CRUD 0K", function(_) {
				var FIELD01 = 1000;
				var FIELD02 = 100;
				var representation = new Representation("AQCQRY02");
				representation.delete(_, FIELD01);
				representation.create(_);

				representation.setProperties(_, {
					"FIELD01": FIELD01
				});
				representation.setProperties(_, {
					"FIELD02": FIELD02
				});
				var response = representation.save(_);

				var data = representation.read(_, FIELD01);
				//Check the object:
				strictEqual(data.FIELD01, FIELD01, "FIELD01:" + FIELD01);
				strictEqual(data.FIELD02, FIELD02, "FIELD02:" + FIELD02);

				representation.update(_, FIELD01);
				var FIELD02 = 200;
				representation.setProperties(_, {
					"FIELD02": FIELD02
				});
				var response = representation.save(_);

				var data = representation.read(_, FIELD01);
				//Check the object:
				strictEqual(data.FIELD01, FIELD01, "FIELD01:" + FIELD01);
				strictEqual(data.FIELD02, FIELD02, "FIELD02:" + FIELD02);
				start();
			});

			asyncTest("AQCQRY02 - Create NOK (integer <> decimal)", function(_) {
				var FIELD01 = 1001;
				var FIELD02 = 101.01;
				var representation = new Representation("AQCQRY02");
				representation.delete(_, FIELD01);
				representation.create(_);

				representation.setProperties(_, {
					"FIELD01": FIELD01
				});
				representation.setProperties(_, {
					"FIELD02": FIELD02
				});
				var response = representation.save(_);

				var data = representation.read(_, FIELD01);
				//Check the object:
				strictEqual(data.FIELD01, FIELD01, "FIELD01:" + FIELD01);
				strictEqual(data.FIELD02, Math.round(FIELD02), "FIELD02:" + data.FIELD02);

				start();
			});

			asyncTest("AQCQRY02 - Create NOK (integer <> alphanumeric)", function(_) {
				var FIELD01 = 1002;
				var FIELD02 = "102";
				var representation = new Representation("AQCQRY02");
				representation.delete(_, FIELD01);
				representation.create(_);

				representation.setProperties(_, {
					"FIELD01": FIELD01
				});
				representation.setProperties(_, {
					"FIELD02": FIELD02
				});
				var response = representation.save(_);

				var data = representation.read(_, FIELD01);
				//Check the object:
				strictEqual(data.FIELD01, FIELD01, "FIELD01:" + FIELD01);
				strictEqual(data.FIELD02, 102, "FIELD02:" + data.FIELD02);

				start();
			});

			asyncTest("AQCQRY02 - Create NOK (integer <> alphanumeric)", function(_) {
				var FIELD01 = 1003;
				var FIELD02 = "103.01";
				var representation = new Representation("AQCQRY02");
				representation.delete(_, FIELD01);
				representation.create(_);

				representation.setProperties(_, {
					"FIELD01": FIELD01
				});
				representation.setProperties(_, {
					"FIELD02": FIELD02
				});
				var response = representation.save(_);

				var data = representation.read(_, FIELD01);
				//Check the object:
				strictEqual(data.FIELD01, FIELD01, "FIELD01:" + FIELD01);
				strictEqual(data.FIELD02, 103, "FIELD02:" + data.FIELD02);

				start();
			});
		}

		testAQCQRY02();

		//******************************************************************************

		asyncTest("stop server", 0, function(_) {
			x3Helper.stopServer();
			start();
		});
	})(_);
}

asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});
// JavaScript Document