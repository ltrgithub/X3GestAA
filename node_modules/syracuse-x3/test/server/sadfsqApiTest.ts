"use strict";

var config = require('config');
var SadFsqClient = require('../../lib/clients/sadfsq/sadfsqClient').SadFsqClient;
var helpers = require('@sage/syracuse-core').helpers;

var tests = [{
	str: "test buffer quite simple: AZERTY                                      ",
	fileOptions: {
		folder: "SUPERV",
		path: "tmp",
		name: "test_1",
		extension: "tst"
	}
}, {
	str: "test buffer more complex: <>-*/+.!?:;,                                ",
	fileOptions: {
		folder: "SUPERV",
		path: "tmp",
		name: "test_2",
		extension: "tst"
	}
}, {
	str: "test buffer really more complex: &é'([-|è_ç@à$£¤µ%§°}{]#~`² ",
	fileOptions: {
		canonical: "@SUPERV.tmp/test_3$tst"
	}
}];

var done;
import { assert } from 'chai';
Object.keys(assert).forEach(key => {
	if (key !== 'isNaN') global[key] = assert[key];
});

describe(module.id, () => {

	var sadfs, sadfs2, sadfs3, sadfs4;
	var sadUnitConfig = config.x3sadfsq && config.x3sadfsq.qunit || {};
	var connCtx = {
		server: sadUnitConfig.server !== undefined ? sadUnitConfig.server : "aws-x3-devsup",
		port: sadUnitConfig.port !== undefined ? sadUnitConfig.port : 17000,
		user: null,
		pass: null,
		secure: null
	};
	var connCtx2 = {
		server: sadUnitConfig.server !== undefined ? sadUnitConfig.server : "aws-x3-devsup",
		port: sadUnitConfig.port !== undefined ? sadUnitConfig.port : 17000,
		user: sadUnitConfig.user2 !== undefined ? sadUnitConfig.user2 : "tchambar",
		pass: sadUnitConfig.pass2 !== undefined ? sadUnitConfig.pass2 : "CRYPT:tdosdoQo2tgrTqseugrpgr",
		secure: sadUnitConfig.secure !== undefined ? sadUnitConfig.secure : true
	};

	function completeTest(param, i, _) {

		var bufStr = new Buffer(param.str, "utf-8");
		var fileOptions = param.fileOptions;

		it('client class instanciation', function(_) {
			//console.log("connCtx: " + JSON.stringify(connCtx, null, 2));
			var recOptionsTemplate = {
				recMode: sadUnitConfig.online ? "REC" : "PLAY",
				path: "node_modules/syracuse-x3/lib/clients/sadfsq/data"
			};
			if (recOptionsTemplate.recMode === "REC") recOptionsTemplate.overwrite = true; // always override file

			var recOpt1 = helpers.object.clone(recOptionsTemplate);
			recOpt1.fileName = "apiTest_1_" + i + ".json";
			sadfs = new SadFsqClient(_, {
				host: connCtx.server,
				port: connCtx.port
			}, connCtx.user, connCtx.pass, connCtx.secure, {
				timeout: 10000
			}, recOpt1);

			var recOpt2 = helpers.object.clone(recOptionsTemplate);
			recOpt2.fileName = "apiTest_2_" + i + ".json";
			sadfs2 = new SadFsqClient(_, {
				host: connCtx2.server,
				port: connCtx2.port
			}, connCtx2.user, connCtx2.pass, connCtx2.secure, {
				timeout: 10000
			}, recOpt2);

			var recOpt3 = helpers.object.clone(recOptionsTemplate);
			recOpt3.fileName = "apiTest_3_" + i + ".json";
			sadfs3 = new SadFsqClient(_, {
				host: "aws-yysyb-w2k8.sagefr.adinternal.com",
				port: 1818
			}, "SAGEFR\\apisu", "", false, {
				timeout: 10000
			}, recOpt3);

			var recOpt4 = helpers.object.clone(recOptionsTemplate);
			recOpt4.fileName = "apiTest_4_" + i + ".json";
			sadfs4 = new SadFsqClient(_, {
				x3solution: function(_) {
					return {
						serverHost: function(_) {
							return connCtx.server;
						},
						serverPort: function(_) {
							return connCtx.port;
						}
					};
				}
			}, connCtx.user, connCtx.pass, connCtx.secure, {
				timeout: 10000
			}, recOpt4);

			strictEqual(sadfs.stream != null, true, "Stream is opened");
			strictEqual(sadfs2.stream != null, true, "Stream2 is opened");
			strictEqual(sadfs3.stream != null, true, "Stream3 is opened");

		});

		it('path', function(_) {
			var path = sadfs.path(_, fileOptions);
			strictEqual(path != null, true, "get path " + path);

		});

		//	it('automatic retry open failed open and close new file', function(_) {
		//		sadfs.stream.end();
		//		var fd = sadfs.open(_, fileOptions, "w");
		//		sadfs.close(_, fd);
		//		ok(true, "open and close file ok");
		//	});

		it('open and close new file', function(_) {
			var fd = sadfs.open(_, fileOptions, "w");
			sadfs.close(_, fd);
			ok(true, "open and close file ok");
		});

		it('rename file', function(_) {
			var fileOptionsBis = {
				canonical: "@SUPERV.tmp/test_4$tst"
			};
			strictEqual(false, sadfs.exists(_, fileOptionsBis), "new file not exists ");
			strictEqual(true, sadfs.exists(_, fileOptions), "old file exists");
			sadfs.rename(_, fileOptions, fileOptionsBis);


			strictEqual(true, sadfs.exists(_, fileOptionsBis) && !sadfs.exists(_, fileOptions), "old file correctly renamed");

			sadfs.rename(_, fileOptionsBis, fileOptions);

			strictEqual(true, sadfs.exists(_, fileOptions) && !sadfs.exists(_, fileOptionsBis), "new file correctly renamed");

		});

		// DOES NOT WORK !!!
		//	it('open and close new file in system mode', function(_) {
		//		var fd = sadfs._openSys(_, fileOptions, sadMod.O_APPEND | sadMod.O_WRONLY | sadMod.O_CREAT, 0x1c0);
		//		sadfs.close(_, fd);
		//		ok(true, "open and close file ok");
		//	});

		it('writeFile', function(_) {
			sadfs.writeFile(_, fileOptions, bufStr, {
				flag: "w"
			});
			strictEqual(true, true, "write ok "); // just to display that the write is ok. if it's not it raise an exception
		});

		it('writeFile with lock', function(_) {
			sadfs.writeFile(_, fileOptions, bufStr, {
				flag: "w",
				lock: true
			});
			strictEqual(true, true, "write ok "); // just to display that the write is ok. if it's not it raise an exception
		});

		it('readFile', function(_) {
			var res = sadfs.readFile(_, fileOptions, {
				flag: "r",
				encoding: "utf-8"
			});
			strictEqual(res, param.str, "content ok: " + res);
		});

		it('path', function(_) {
			var path = sadfs.path(_, fileOptions);
			strictEqual(path != null, true, "get path " + path);

		});

		it('info', function(_) {
			var res = sadfs.stat(_, fileOptions);
			var keys = Object.keys(res);
			for (var i in keys) {
				strictEqual(res[keys[i]] != null, true, keys[i] + ": " + res[keys[i]] + " OK");
			}
			var res2 = sadfs.stat(_, fileOptions, ["size"]);
			strictEqual(res2.size, res.size, "size: " + res2.size + " OK");
		});

		/*it('test check exist OEF', function(_) {
		 var fd = sadfs.open(_, fileOptions, "r");
		 sadfs.seek(_, fd, 2, 0, false);
		 //console.log("seek " + sadfs.getPosition(_, fd));
		 strictEqual(true, sadfs.feof(_, fd), "check ok");
		 sadfs.close(_, fd);
		 });*/

		it('read', function(_) {
			var fd = sadfs.open(_, fileOptions, "r");
			var buffer = new Buffer(80);

			var len = sadfs.read(_, fd, buffer, 0, 8);
			strictEqual(len, 8, "Size read 1 ok: " + len);
			strictEqual(buffer.slice(0, 8).toString('hex'), bufStr.slice(0, 8).toString('hex'), "Buffer content 1 ok");

			len = sadfs.read(_, fd, buffer, 8, 8);
			strictEqual(len, 8, "Size read 2 ok: " + len);
			strictEqual(buffer.slice(8, 16).toString('hex'), bufStr.slice(8, 16).toString('hex'), "Buffer content 2 ok");

			var position = sadfs.getPosition(_, fd);
			strictEqual(position, 16, "Position ok");

			len = sadfs.read(_, fd, buffer, 16, 0);
			strictEqual(len, 0, "Size read 3 ok: " + len);

			len = sadfs.read(_, fd, buffer, 16, 64);
			strictEqual(len, bufStr.length - 16, "Size read 4 ok: " + len);
			strictEqual(buffer.slice(16, bufStr.length).toString('hex'), bufStr.slice(16).toString('hex'), "Buffer content 4 ok");

			position = sadfs.getPosition(_, fd);
			strictEqual(position, bufStr.length, "Position ok");

			len = sadfs.read(_, fd, buffer, 8, 10, 8);
			strictEqual(len, 10, "Size read 5 ok: " + len);
			strictEqual(buffer.slice(8, 18).toString('hex'), bufStr.slice(8, 18).toString('hex'), "Buffer content 5 (with defined position) ok");

			sadfs.close(_, fd);
			strictEqual(param.str, buffer.slice(0, bufStr.length).toString('utf-8'), "Content ok: " + param.str);
		});

		it('seek and get position', function(_) {
			var len = new Buffer(param.str, "utf-8").length;
			var fd = sadfs.open(_, fileOptions, "r");
			var position = sadfs.getPosition(_, fd);
			strictEqual(position, 0, "Init Position: " + position);
			// pos = 0

			sadfs.seek(_, fd, 0, len);
			position = sadfs.getPosition(_, fd);
			strictEqual(position, len, "Seek BOF positive: " + position);
			// pos = len

			try {
				sadfs.seek(_, fd, 0, -8, false);
			} catch (e) {
				ok(true, "Seek BOF negative failed: " + e.message);
			}

			try {
				sadfs.seek(_, fd, 0, len + 1);
			} catch (e) {
				ok(true, "Seek BOF just too big (STRICT): " + e.message);
			}

			try {
				sadfs.seek(_, fd, 0, len + 100);
			} catch (e) {
				ok(true, "Seek BOF very too big (STRICT): " + e.message);
			}

			sadfs.seek(_, fd, 1, -len);
			position = sadfs.getPosition(_, fd);
			strictEqual(position, 0, "Seek CUR negative: " + position);
			// pos = 0

			sadfs.seek(_, fd, 1, len);
			position = sadfs.getPosition(_, fd);
			strictEqual(position, len, "Seek CUR positive: " + position);
			// pos = len

			sadfs.seek(_, fd, 1, 2, false);
			position = sadfs.getPosition(_, fd);
			strictEqual(position, len + 2, "Seek CUR positive too big: " + position);
			// pos = len + 2

			sadfs.seek(_, fd, 1, -len, false);
			position = sadfs.getPosition(_, fd);
			strictEqual(position, 2, "Seek CUR normal: " + position);
			// pos = 2

			try {
				sadfs.seek(_, fd, 1, len);
			} catch (e) {
				ok(true, "Seek CUR positive too big (STRICT): " + e.message);
			}

			try {
				sadfs.seek(_, fd, 1, -3);
			} catch (e) {
				ok(true, "Seek CUR negative too big: " + e.message);
			}

			sadfs.seek(_, fd, 2, -len + 2);
			position = sadfs.getPosition(_, fd);
			strictEqual(position, 2, "Seek EOF negative: " + position);
			// pos = 2

			sadfs.seek(_, fd, 2, 8, false);
			position = sadfs.getPosition(_, fd);
			strictEqual(position, len + 8, "Seek EOF positive: " + position);
			// pos = len + 8

			try {
				sadfs.seek(_, fd, 2, 8);
			} catch (e) {
				ok(true, "Seek EOF positive (STRICT): " + e.message);
			}

			try {
				sadfs.seek(_, fd, 2, -len - 9, false);
			} catch (e) {
				ok(true, "Seek EOF too big failed: " + e.message);
			}

			sadfs.close(_, fd);
		});
		it('exists', function(_) {
			strictEqual(true, sadfs.exists(_, fileOptions), "File exists");
		});

		it('process test', function(_) {
			var rep = sadfs.exec(_, "ls");

			strictEqual(rep != null, true, "process stdout : " + rep);

		});
		it('mkdir ', function(_) {
			var options = {
				path: "C:\\APTEST",
			};
			var rep = sadfs3.mkdir(_, options);

			strictEqual(rep != null, true, "process stdout : " + rep);

			rep = sadfs3.rmdir(_, options);
			strictEqual(rep != null, true, "process stdout : " + rep);

		});
		it('readdir ', function(_) {
			var options = {
				folder: "X3_PUB",
				path: "SUPERV/X_TEND"
			};
			var rep = sadfs.readdir(_, options);

			strictEqual(rep != null, true, "process stdout : " + JSON.stringify(rep, null, 2));

		});


		/*it('process kill', function(_) {
		 var rep = sadfs.exec(_, "vi");

		 strictEqual(rep.pid != null, true, "create process ok pid=[ " + rep.pid + " ]");
		 strictEqual(rep.stdout == null, true, "process stdout : ");
		 sadfs.kill(_, rep.pid, 9);

		 });*/



		it('lock', function(_) {
			var fd = sadfs.open(_, fileOptions, "r+");
			var fd2 = sadfs2.open(_, fileOptions, "r+");
			strictEqual(1, sadfs.lock(_, fd, 2, 6, 0), "lock ok");
			strictEqual(0, sadfs2.lock(_, fd2, 2, 5, 1), "byte lock ok");

			strictEqual(1, sadfs.lock(_, fd, 0, 6, 0), "lock ok");


		});

		it('append', function(_) {
			sadfs.appendFile(_, fileOptions, " append added", {
				encoding: 'utf-8'
			});
			strictEqual(param.str + " append added", sadfs.readFile(_, fileOptions).toString('utf-8'), "append file  ok");
		});

		it('truncate file', function(_) {
			var fd = sadfs.open(_, fileOptions, "w+");
			var buffer = new Buffer("test1234", 'utf-8');
			sadfs.write(_, fd, buffer, 0, buffer.length, 0);
			sadfs.close(_, fd);
			fd = sadfs.open(_, fileOptions, "r+");
			// try truncate an opened file
			sadfs.ftruncate(_, fd, 4);
			sadfs.close(_, fd);
			var truncData = sadfs.readFile(_, fileOptions, {
				encoding: "utf-8"
			});
			strictEqual("1234", truncData, "file truncate ok " + truncData);
		});

		it('truncate without an opened file', function(_) {
			var fd = sadfs.open(_, fileOptions, "w+");
			var buffer = new Buffer("test1234", 'utf-8');
			sadfs.write(_, fd, buffer, 0, buffer.length, 0);
			sadfs.close(_, fd);
			// try truncate an opened file
			sadfs.truncate(_, fileOptions, 4);
			var truncData = sadfs.readFile(_, fileOptions, {
				encoding: "utf-8"
			});
			strictEqual("1234", truncData, "file truncate ok " + truncData);
		});


		it('write and flush', function(_) {
			var buffer = new Buffer(param.str, "utf-8");

			var fd = sadfs.open(_, fileOptions, "w");
			sadfs.write(_, fd, buffer, 0, buffer.length, 0);
			ok(true, "Write...");
			var size = sadfs.stat(_, fileOptions, ["size"]).size;
			//strictEqual(size, 0, "Size before flush: " + size);
			ok(true, "Flush...");
			sadfs.flush(_, fd);
			size = sadfs.stat(_, fileOptions, ["size"]).size;
			strictEqual(size, buffer.length, "Size after flush: " + size);
			sadfs.close(_, fd);

			var buffer2 = new Buffer("test", "utf-8");
			var buffer3 = new Buffer("buff", "utf-8");
			fd = sadfs.open(_, fileOptions, "r+");
			sadfs.write(_, fd, buffer2, 0, buffer2.length, 5);
			var buffer4 = new Buffer(4);
			sadfs.read(_, fd, buffer4, 0, 4, 5);
			strictEqual(buffer4.toString("utf-8"), "test", "Write at the middle of the file OK");

			sadfs.write(_, fd, buffer3, 0, buffer3.length, 5);
			sadfs.read(_, fd, buffer4, 0, 4, 5);
			strictEqual(buffer4.toString("utf-8"), "buff", "Revert modification OK");

			sadfs.close(_, fd);
			sadfs.unlink(_, fileOptions);
			ok(true, "Close");
		});

		it('write with lock and flush', function(_) {
			var buffer = new Buffer(param.str, "utf-8");
			var fd = sadfs4.open(_, fileOptions, "w");
			sadfs4.write(_, fd, buffer, 0, buffer.length, 0, true);
			ok(true, "Write...");
			var size = sadfs4.stat(_, fileOptions, ["size"]).size;
			//strictEqual(size, 0, "Size before flush: " + size);
			ok(true, "Flush...");
			sadfs4.flush(_, fd);
			size = sadfs4.stat(_, fileOptions, ["size"]).size;
			strictEqual(size, buffer.length, "Size after flush: " + size);
			sadfs4.close(_, fd);

			var buffer2 = new Buffer("test", "utf-8");
			var buffer3 = new Buffer("buff", "utf-8");
			fd = sadfs4.open(_, fileOptions, "r+");
			sadfs4.write(_, fd, buffer2, 0, buffer2.length, 5, true);
			var buffer4 = new Buffer(4);
			sadfs4.read(_, fd, buffer4, 0, 4, 5);
			//console.log("buffer readed " + buffer4.toString('utf-8'));
			strictEqual(buffer4.toString("utf-8"), "test", "Write at the middle of the file OK");
			sadfs4.close(_, fd);

			fd = sadfs4.open(_, fileOptions, "r+");
			sadfs4.write(_, fd, buffer3, 0, buffer3.length, 5, true);
			sadfs4.read(_, fd, buffer4, 0, 4, 5);
			strictEqual(buffer4.toString("utf-8"), "buff", "Revert modification OK");

			sadfs4.close(_, fd);
			ok(true, "Close");

		});

		it('unlink', function(_) {
			sadfs.unlink(_, fileOptions);
			ok(true, "File removed");
		});

		it('not exists', function(_) {
			strictEqual(false, sadfs.exists(_, fileOptions), "File not exists");
		});


		it('client disconnect', function(_) {
			sadfs.disconnect(_);
			sadfs2.disconnect(_);
			sadfs3.disconnect(_);
			sadfs4.disconnect(_);
			strictEqual(sadfs.stream == null, true, "Stream is closed");
			strictEqual(sadfs2.stream == null, true, "Stream is closed");
			strictEqual(sadfs3.stream == null, true, "Stream is closed");
		});

	}


	function allTest(_) {
		for (var i = 0; i < tests.length; i++) {
			completeTest(tests[i], i, _);
		}

		it('kill', function(_) {
			done = true;
		});
	}

	allTest(_ >> function(err) {
		if (err) throw err;
	});
});