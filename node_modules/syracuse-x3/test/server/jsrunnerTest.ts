"use strict";

var config = require('config');
var jsrunner = require('../../lib/jsRunner');
var util = require('util');


exports.$exported = true;

exports.test1 = function(a) {
	if (!a) throw new Error("Test error 1");
	return "1" + a;
};

exports.test2 = function(_, a) {
	if (!a) throw new Error("Test error 2");
	return "2" + a;
};


exports.abcd = 5;

function stringify(obj) {
	// sort keys!
	if (typeof obj === 'object' && !Array.isArray(obj)) {
		var prefix = '"';
		var keys = Object.keys(obj).sort();
		var result = '{';
		keys.forEach(function(key) {
			result += (prefix + key + '"=' + stringify(obj[key]));
			prefix = ',"';
		});
		return result + '}';
	}
	return JSON.stringify(obj);
}


var done;
import { assert } from 'chai';
Object.keys(assert).forEach(key => {
	if (key !== 'isNaN') global[key] = assert[key];
});

describe(module.id, () => {

	it('Jsrunner test', function(_) {
		strictEqual(stringify(jsrunner.execute(_, "bla", {
			args: [1],
			encodings: []
		})), '{"body"="","header"={"exception"=undefined,"message"="Body elements \'args\' and \'encodings\' must have same length.","statusCode"="500"}}', "Different count of args and encodings");
		strictEqual(stringify(jsrunner.execute(_, "bla", {
			args: ["1"],
			encodings: [2]
		})), '{"body"="","header"={"exception"=undefined,"message"="Specified encodings can be 0 for \'non binary\' or 1 for \'binary\'","statusCode"="500"}}', "Invalid value of encoding");
		strictEqual(stringify(jsrunner.execute(_, "bla", {
			args: ["1"],
			encodings: [0]
		})), '{"body"="","header"={"exception"=undefined,"message"="Cannot find module \'bla\'","statusCode"="404"}}', "Module not found");
		strictEqual(stringify(jsrunner.execute(_, "syracuse-x3/test/server/jsrunnerTest", {
			function: "test1",
			args: ["1"],
			encodings: [0],
			mode: "bla"
		})), '{"body"="","header"={"exception"=undefined,"message"="Invalid mode: Allowed modes are \'sync\', \'wait\' or \'future\'.","statusCode"="500"}}', "Invalid mode");
		strictEqual(stringify(jsrunner.execute(_, "syracuse-x3/test/fixtures/module_without_exported", {
			args: ["1"],
			encodings: [0],
			mode: "sync",
			function: "bla"
		})), '{"body"="","header"={"exception"=undefined,"message"="The module \'syracuse-x3/test/fixtures/module_without_exported\' is not authorized to be called from X3","statusCode"="403"}}', "Module which cannot be called");
		strictEqual(stringify(jsrunner.execute(_, "syracuse-x3/test/server/jsrunnerTest", {
			args: ["1"],
			encodings: [0],
			mode: "sync",
			function: "bla"
		})), '{"body"="","header"={"exception"=undefined,"message"="The sync method \'bla\' doesn\'t exist.","statusCode"="404"}}', "Function not found in module");
		strictEqual(stringify(jsrunner.execute(_, "syracuse-x3/test/server/jsrunnerTest", {
			args: ["1"],
			encodings: [0],
			mode: "wait",
			function: "bla"
		})), '{"body"="","header"={"exception"=undefined,"message"="The wait method \'bla\' doesn\'t exist.","statusCode"="404"}}', "async Function not found in module");
		strictEqual(stringify(jsrunner.execute(_, "syracuse-x3/test/server/jsrunnerTest", {
			args: ["1"],
			encodings: [0],
			mode: "future",
			function: "bla"
		})), '{"body"="","header"={"exception"=undefined,"message"="The future method \'bla\' doesn\'t exist.","statusCode"="404"}}', "future Function not found in module");
		strictEqual(stringify(jsrunner.execute(_, "syracuse-x3/test/server/jsrunnerTest", {
			args: ["1"],
			encodings: [0],
			mode: "sync",
			function: "abcd"
		})), '{"body"="","header"={"exception"=undefined,"message"="The property \'abcd\' is not a (sync) function.","statusCode"="404"}}', "Invocation of non-function");
		strictEqual(stringify(jsrunner.execute(_, "syracuse-x3/test/server/jsrunnerTest", {
			args: ["abc"],
			encodings: [0],
			mode: "sync",
			function: "test1"
		})), '{"body"="1abc","header"={"content-length"="4","content-type"="application/json","message"="OK","statusCode"="200"}}', "Synchronous function");
		strictEqual(stringify(jsrunner.execute(_, "syracuse-x3/test/server/jsrunnerTest", {
			args: ["YWJj"],
			encodings: [1],
			mode: "sync",
			function: "test1"
		})), '{"body"="1abc","header"={"content-length"="4","content-type"="application/json","message"="OK","statusCode"="200"}}', "Synchronous function with base64 parameter");
		strictEqual(stringify(jsrunner.execute(_, "syracuse-x3/test/server/jsrunnerTest", {
			args: ["abc"],
			encodings: [0],
			mode: "wait",
			function: "test2",
			callbackIndex: 0
		})), '{"body"="2abc","header"={"content-length"="4","content-type"="application/json","message"="OK","statusCode"="200"}}', "Asynchronous function");
		var res = jsrunner.execute(_, "syracuse-x3/test/server/jsrunnerTest", {
			args: [""],
			encodings: [0],
			mode: "sync",
			function: "test1"
		});
		delete res.header.exception;
		strictEqual(stringify(res), '{"body"="","header"={"message"="Test error 1","statusCode"="500"}}', "Sync method invocation with internal error");
		var res = jsrunner.execute(_, "syracuse-x3/test/server/jsrunnerTest", {
			args: [""],
			encodings: [0],
			mode: "wait",
			function: "test2",
			callbackIndex: 0
		});
		delete res.header.exception;
		strictEqual(stringify(res), '{"body"="","header"={"message"="Test error 2","statusCode"="500"}}', "async method invocation with internal error");
		var fut = jsrunner.execute(_, "syracuse-x3/test/server/jsrunnerTest", {
			args: ["abc"],
			encodings: [0],
			mode: "future",
			function: "test2",
			callbackIndex: 0
		});
		strictEqual(stringify(fut.header), '{"content-length"="36","content-type"="application/json","message"="OK","statusCode"="200"}', "Future");
		strictEqual(stringify(jsrunner.getResult(_, "abc")), '{"body"="","header"={"exception"="no stack","message"="The \'future\' corresponding to uuid \'abc\' doesn\'t exist","statusCode"="500"}}', "Future getResult with invalid uuid");
		strictEqual(stringify(jsrunner.getResult(_, fut.body)), '{"body"="2abc","header"={"content-length"="4","content-type"="application/json","message"="OK","statusCode"="200"}}', "Correct future result");
		var fut = jsrunner.execute(_, "syracuse-x3/test/server/jsrunnerTest", {
			args: [""],
			encodings: [0],
			mode: "future",
			function: "test2",
			callbackIndex: 0
		});
		var res = jsrunner.getResult(_, fut.body);
		delete res.header.exception;
		strictEqual(stringify(res), '{"body"="","header"={"message"="Test error 2","statusCode"="500"}}', "future method invocation with internal error");
	});




	it('explorePackage test', function(_) {
		strictEqual(jsrunner.explorePackage(_, __dirname + "/../fixtures/jsrunner_packageExplore/test1/test0"), true, "OK - same directory");
		strictEqual(jsrunner.explorePackage(_, __dirname + "/../fixtures/jsrunner_packageExplore/test2/lib/a1/a2/test0"), true, "OK - different directory");
		strictEqual(jsrunner.explorePackage(_, __dirname + "/../fixtures/jsrunner_packageExplore/test3/test0"), false, "not OK - file not found");
		strictEqual(jsrunner.explorePackage(_, __dirname + "/../fixtures/jsrunner_packageExplore/test4/test0"), false, "not OK - 4gl apis is not an array");
		strictEqual(jsrunner.explorePackage(_, __dirname + "/../fixtures/jsrunner_packageExplore/test5/test0"), false, "not OK empty array");
		strictEqual(jsrunner.explorePackage(_, __dirname + "/../fixtures/jsrunner_packageExplore/test6/test0"), false, "not OK - no 4gl-apis element");
		//comment it because we have to test with bad json but precommit rulle prevent that 
		//strictEqual(jsrunner.explorePackage(_, __dirname + "/../fixtures/jsrunner_packageExplore/test7/test0"), false, "not OK - invalid JSON");
		strictEqual(jsrunner.explorePackage(_, __dirname + "/../fixtures/jsrunner_packageExplore/test8/lib/test0"), false, "not OK - incorrect path in inner package.json");
	});
});