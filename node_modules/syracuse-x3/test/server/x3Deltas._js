"use strict";
var module 	  	= QUnit.module;
var assert 	  	= require("assert" );
var config      = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel 	= require("syracuse-orm/lib/dataModel");
var x3Helper   	= require("syracuse-x3/test/fixtures/x3Helper");
var helpers     = require("syracuse-core/lib/helpers");

var tracer = console.log;
var doStop = false;

module("x3DeltasTest", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100)
		}
	}
});


asyncTest("start", function(_) {
	ok(x3Helper.initDatabase(_),"syracuse mongodb database initialized");

	x3Helper.initialize(_,function(_) {
		ok(x3Helper.createObjects(_),"createObjects");
		start();
	});
});

var cookie=null;
function _getCookie(_) {
  cookie = cookie || x3Helper.getCookie(_);
  return cookie;
}

function countProperties(_node) {
  var count=0;
  for(var n in _node) {
    if(n.substring(0,1) != '$') {
      count += 1;
    }
  }
  return count;
}

function putDelta(_,_prototype,_workingCopy,_delta,_expected) {
  var url = _workingCopy.$url.substring("{$baseUrl}/".length);
  _delta.$etag = _workingCopy.$etag
  _delta.$uuid = _workingCopy.$uuid
  _delta.$url  = x3Helper.x3Url(url);
  
  //!console.log("*** url:",url);
 
  
  //!console.log("*** _delta.$url:",_delta.$url);
  
  var deltaCount = countProperties(_delta);
  
  console.log("*** _delta:",_delta);
	var deltaResponse = x3Helper.put(_, _getCookie(_),_delta.$url,_delta,200);
  //!ok(_delta.$etag != deltaResponse.$etag  ,"deltaResponse.$etag="+deltaResponse.$etag);
  //!ok(countProperties(deltaResponse)>=deltaCount ,"number of properties sent in the delta="+deltaCount);
  //!console.log("*** deltaResponse:",deltaResponse);
  
  var expected = _expected || _delta;
  
  function compareObjects(_expected,_delta,_prototype) {
    //!console.log("*** _expected:",_expected);
    for(var property in _expected) {
      //!console.log("*** compareObjects var property:"+property);
      if(property.substring(0,1) != '$') {
        ok(property in _delta,"delta."+property);
        if(property in _delta,"delta."+property) {
          if(toString.call(_expected[property]).indexOf("Object")>=0)  {
            //!console.log("*** compareObjects("+property+")");
            compareObjects(_expected[property],_delta[property],_prototype);
          } else {
            //!console.log("***",_prototype.$properties[property]);
            var expect =_expected[property];
            if ("$maxLength" in _prototype.$properties[property]) {
              expect = expect.substring(0,_prototype.$properties[property].$maxLength);
            }
            strictEqual(expect,_delta[property],"delta."+property+"="+_delta[property]); 
          }
         } 
      } 
    } 
  } 

  //!compareObjects(_expected || _delta,deltaResponse,_prototype);

  return deltaResponse;
}

//******************************************************************************
asyncTest("ZQLFPROC01", function(_) {
  //Delete the "unit test data" if it exists :
  var representation = "ZQLFPROC01";
  var id             = "C01P01_05";
  
  var uuid = helpers.uuid.generate();
  var url  = x3Helper.x3Url(representation+"(%27"+id+"%27)?representation="+representation+".$query&trackingId="+uuid);
  var response = x3Helper.delete(_, _getCookie(_),url,{},200);
  //!console.log(response); 
  
  // Get the $edit prototype :
  var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('"+representation+".$edit')"), 200);
  //!ok(true,representation+".$edit prototype");
  
  //Create a new working copy:
  var trackingId = helpers.uuid.generate();
  url  = x3Helper.x3Url(representation+"/$workingCopies?representation="+representation+".$edit&trackingId="+trackingId);
  var workingCopy = x3Helper.post(_, _getCookie(_),url,{},200); 

  //set the instance key :
  putDelta(_,prototype,workingCopy,{"C01P01":id}); 

  //set the reference :
  var refId = "R01P01_01";
  putDelta(_,prototype,workingCopy,{"C01P02": refId,"C01P02_REF":{"INTDES": "","INTSHO": ""}}); 
  
  //Save the instance
  url  = x3Helper.x3Url("$workingCopies(%27"+trackingId+"%27)?representation="+representation+".$edit");
  putDelta(_,prototype,workingCopy,{"$actions": {"$save":{"$isRequested": true} }}); 
  
  // Get the $details prototype :
  var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('"+representation+".$details')"), 200);
  //!ok(true,representation+".$details prototype");
  
  var data = x3Helper.get(_, _getCookie(_), x3Helper.x3Url(representation+"(%27"+id+"%27)?representation="+representation+".$details"), 200);
  //!ok(true,representation+".$details data"); 
  //!console.log("*** data:",data)
  strictEqual(data.C01P01         ,id     ,"C01P01="+id);
  strictEqual(data.C01P02         ,refId  ,"C01P02="+refId);

  start(); 
});

//******************************************************************************

asyncTest("stop server", 0, function(_) {
	x3Helper.stopServer();
	start();
});
asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});
// JavaScript Document
