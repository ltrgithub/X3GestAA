"use strict";
var module 	  	= QUnit.module;
var assert 	  	= require("assert" );
var dataModel 	= require("syracuse-orm/lib/dataModel");
var x3Helper   	= require("syracuse-x3/test/fixtures/x3Helper");
var helpers     = require("syracuse-core/lib/helpers");

var tracer = console.log;
var doStop = false;

module("x3DeltasTest", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100)
		}
	}
});


asyncTest("start", function(_) {
	ok(x3Helper.initDatabase(_),"syracuse mongodb database initialized");

	x3Helper.initialize(_,function(_) {
		ok(x3Helper.createObjects(_),"createObjects");
		start();
	});
});

var cookie=null;
function _getCookie(_) {
  cookie = cookie || x3Helper.getCookie(_);
  return cookie;
}

function countProperties(_node) {
  var count=0;
  for(var n in _node) {
    if(n.substring(0,1) != '$') {
      count += 1;
    }
  }
  return count;
}

function putDelta(_,_prototype,_workingCopy,_delta) {
  var url = _workingCopy.$url.substring("{$baseUrl}/".length);
  _delta.$etag = _workingCopy.$etag
  _delta.$uuid = _workingCopy.$uuid
  _delta.$url  = x3Helper.x3Url(url);
  
  //!console.log("*** url:",url);
 
  
  //!console.log("*** _delta.$url:",_delta.$url);
  
  var deltaCount = countProperties(_delta);
  
  console.log("*** _delta:",_delta);
	var deltaResponse = x3Helper.put(_, _getCookie(_),_delta.$url,_delta,200);
  ok(_delta.$etag != deltaResponse.$etag  ,"deltaResponse.$etag="+deltaResponse.$etag);
  ok(countProperties(deltaResponse)>=deltaCount ,"number of properties sent in the delta="+deltaCount);
  
  for(var property in _delta) {
    if(property.substring(0,1) != '$') {
      ok(property in deltaResponse,"delta."+property);
      //!console.log("***",_prototype.$properties[property]);
      var expect =_delta[property];
      if ("$maxLength" in _prototype.$properties[property]) {
        expect = expect.substring(0,_prototype.$properties[property].$maxLength);
      }
      strictEqual(expect,deltaResponse[property],"delta."+property+"="+_delta[property]); 
    }
  }

  return deltaResponse;
}

//******************************************************************************
asyncTest("ZQAB", function(_) {
 	var prototype = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('ZQAB.$edit')"), 200);
  //!console.log(prototype);
 
  var uuid = helpers.uuid.generate();
 
  var url  = x3Helper.x3Url("ZQAB(%27AAA~%27)/$workingCopies?representation=ZQAB.$edit&trackingId="+uuid);
	var workingCopy = x3Helper.post(_, _getCookie(_),url,{},200);
  
  //1 characters string (for 10 max):
  var deltaResponse = putDelta(_,prototype,workingCopy,{"SHO":"A"});
  //20 characters string (for 10 max):
  var deltaResponse = putDelta(_,prototype,workingCopy,{"SHO":"ABCDEFGHIJ"});
  //21 characters string (for 10 max):
  var deltaResponse = putDelta(_,prototype,workingCopy,{"SHO":"ABCDEFGHIJK"});

  //modify a boolean property:
  var deltaResponse = putDelta(_,prototype,workingCopy,{"FLG":false});

  //modify a choice :
  var deltaResponse = putDelta(_,prototype,workingCopy,{"MNL":1});
  strictEqual(deltaResponse["ENDDAT"],"2012-11-01","delta.ENDDAT="+deltaResponse["ENDDAT"]);
  
  //modify a reference:
  var deltaResponse = putDelta(_,prototype,workingCopy,{
        "CPY": "AAA",
        "CPY_REF": {
            "$title": "Test ZQAB",
            "CPYSHO": "TEST",
            "LEG": "",
            "$serverIndex": 1,
            "$isSelected": true
          } 
        });

 
  start(); 
});

//******************************************************************************

asyncTest("stop server", 0, function(_) {
	x3Helper.stopServer();
	start();
});
asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});
// JavaScript Document
