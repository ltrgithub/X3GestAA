"use strict";
var module 	  	= QUnit.module;
var assert 	  	= require("assert" );
var config      = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel 	= require("syracuse-orm/lib/dataModel");
var x3Helper   	= require("syracuse-x3/test/fixtures/x3Helper");
var helpers     = require("syracuse-core/lib/helpers");

var tracer = console.log;
var doStop = false;

module("x3DeltasTest", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100)
		}
	}
});


asyncTest("start", function(_) {
	ok(x3Helper.initDatabase(_),"syracuse mongodb database initialized");

	x3Helper.initialize(_,function(_) {
		ok(x3Helper.createObjects(_),"createObjects");
		start();
	});
});

var cookie=null;
function _getCookie(_) {
  cookie = cookie || x3Helper.getCookie(_);
  return cookie;
}

function countProperties(_node) {
  var count=0;
  for(var n in _node) {
    if(n.substring(0,1) != '$') {
      count += 1;
    }
  }
  return count;
}

function putDelta(_,_prototype,_workingCopy,_delta,_expected) {
  var url = _workingCopy.$url.substring("{$baseUrl}/".length);
  _delta.$etag = _workingCopy.$etag
  _delta.$uuid = _workingCopy.$uuid
  _delta.$url  = x3Helper.x3Url(url);
  
  //!console.log("*** url:",url);
 
  
  //!console.log("*** _delta.$url:",_delta.$url);
  
  var deltaCount = countProperties(_delta);
  
  console.log("*** _delta:",_delta);
	var deltaResponse = x3Helper.put(_, _getCookie(_),_delta.$url,_delta,200);
  //!ok(_delta.$etag != deltaResponse.$etag  ,"deltaResponse.$etag="+deltaResponse.$etag);
  //!ok(countProperties(deltaResponse)>=deltaCount ,"number of properties sent in the delta="+deltaCount);
  //!console.log("*** deltaResponse:",deltaResponse);
  
  var expected = _expected || _delta;
  
  function compareObjects(_expected,_delta,_prototype) {
    //!console.log("*** _expected:",_expected);
    for(var property in _expected) {
      //!console.log("*** compareObjects var property:"+property);
      if(property.substring(0,1) != '$') {
        ok(property in _delta,"delta."+property);
        if(property in _delta,"delta."+property) {
          if(toString.call(_expected[property]).indexOf("Object")>=0)  {
            //!console.log("*** compareObjects("+property+")");
            compareObjects(_expected[property],_delta[property],_prototype);
          } else {
            //!console.log("***",_prototype.$properties[property]);
            var expect =_expected[property];
            if ("$maxLength" in _prototype.$properties[property]) {
              expect = expect.substring(0,_prototype.$properties[property].$maxLength);
            }
            strictEqual(expect,_delta[property],"delta."+property+"="+_delta[property]); 
          }
         } 
      } 
    } 
  } 

  //!compareObjects(_expected || _delta,deltaResponse,_prototype);

  return deltaResponse;
}

var Representation = function(_repName) {
  this.repName = _repName;
  this.uuid    = helpers.uuid.generate();  
  
  console.log("new Representation",this.repName); 
  
  this.delete = function(_,_key) {
    /*dbg*///console.log("this.delete:",_key); 
    var url  = x3Helper.x3Url(this.repName+"(%27"+_key+"%27)?representation="+this.repName+".$query&trackingId="+this.uuid);
    var response = x3Helper.delete(_, _getCookie(_),url,{},200);
    console.log(response); 
  }
  
  this.create = function(_) {
    // Get the $edit prototype :
    this.proEdit = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('"+this.repName+".$edit')"), 200);

    //Create a new working copy:
    this.trackingId = helpers.uuid.generate();
    var url  = x3Helper.x3Url(this.repName+"/$workingCopies?representation="+this.repName+".$edit&trackingId="+this.trackingId);
    this.workingCopy = x3Helper.post(_, _getCookie(_),url,{},200); 
    return this.workingCopy;
  }

  this.update = function(_,_key) {
    // Get the $edit prototype :
    this.proEdit = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('"+this.repName+".$edit')"), 200);

    //Create a new working copy:
    this.trackingId = helpers.uuid.generate();
    var url  = x3Helper.x3Url(this.repName+"(%27"+_key+"%27)/$workingCopies?representation="+this.repName+".$edit&trackingId="+this.trackingId);
    this.workingCopy = x3Helper.post(_, _getCookie(_),url,{},200); 
    return this.workingCopy;
  }
    
  this.setProperties = function(_,_delta) {
    /*dbg*///console.log("*** setProperties:",_delta);
    
     var url = this.workingCopy.$url.substring("{$baseUrl}/".length);
    _delta.$etag = this.workingCopy.$etag
    _delta.$uuid = this.workingCopy.$uuid
    _delta.$url  = x3Helper.x3Url(url);
    
    /*dbg*///console.log("*** _delta.$url:",_delta.$url);
    /*dbg*///ok("setProperties",JSON.stringify(_delta));
  	var response = x3Helper.put(_, _getCookie(_),_delta.$url,_delta,200);
    /*dbg*///ok("setProperties",JSON.stringify(response));
    return response;
  }
  
  this.save = function(_,_property,_status) {
    var url  = x3Helper.x3Url("$workingCopies(%27"+this.trackingId+"%27)?representation="+this.repName+".$edit");
    var response = this.setProperties(_,{"$actions": {"$save":{"$isRequested": true} }});
    /*dbg*///ok("save",JSON.stringify(response));    
    if(_property == null) {
      _status = _status || "success"
      if(_status == "success"){  
        strictEqual(response.$actions.$save.$diagnoses[0].severity,_status,response.$actions.$save.$diagnoses[0].message);  
      } else {
        strictEqual(response.$diagnoses[0].severity,_status,response.$diagnoses[0].message);  
      } 
    } else {
      _status = _status || "error"
      strictEqual(response.$properties[_property].$diagnoses[0].severity,_status,response.$properties[_property].$diagnoses[0].message);
    }
    return response;
  }
  
  this.read = function(_,_key) {
    // Get the $details prototype :
    this.proDetails = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('"+this.repName+".$details')"), 200);
    /*dbg*///ok(true,this.repName+".$details prototype");
    
    var data = x3Helper.get(_, _getCookie(_), x3Helper.x3Url(this.repName+"(%27"+_key+"%27)?representation="+this.repName+".$details"), 200);
    /*dbg*///ok(true,this.repName+".$details data"); 
    /*dbg*///console.log("*** data:",data);
    /*dbg*///ok("save",JSON.stringify(data));
    return data;
  }
}

/*******************************************************************************
 ZQLFPROC01
*******************************************************************************/ 
function testZQLFPROC01(_) {
  asyncTest("ZQLFPROC01 - CRUD OK", function(_) {
    var id             = "QUNIT_001";
   
    var representation = new  Representation("ZQLFPROC01");
    //delete QUNIT_001
    representation.delete(_,id);
    //Create a working copy:
    representation.create(_);
    //set the instance key :
    representation.setProperties(_,{"C01P01":id}); 
    //set the reference :
    var refId = "R01P01_01";
    representation.setProperties(_,{"C01P02": refId,"C01P02_REF":{"INTDES": "","INTSHO": ""}}); 
    //Save the instance
    var response = representation.save(_);
    
    //Read the newly created object :
    var data = representation.read(_,id);
    //Check the object:
    strictEqual(data.C01P01         ,id     ,"C01P01="+id);
    strictEqual(data.C01P02         ,refId  ,"C01P02="+refId);
    
    //Create a working copy:
    representation.update(_,id);
    //Modify the reference
    refId = "R01P01_02";
    representation.setProperties(_,{"C01P02": refId,"C01P02_REF":{"INTDES": "","INTSHO": ""}}); 
    //Save the instance
    response = representation.save(_);
    //Read the object :
    data = representation.read(_,id);
    //Check the object:
    strictEqual(data.C01P01         ,id     ,"C01P01="+id);
    strictEqual(data.C01P02         ,refId  ,"C01P02="+refId);
  
    start(); 
  });
  
  asyncTest("ZQLFPROC01 - Create NOK (existing object)", function(_) {
    var id    = "QUNIT_001";
    var refId = "R01P01_01";
   
    var representation = new  Representation("ZQLFPROC01");
    representation.create(_);
    representation.setProperties(_,{"C01P01":id}); 
    representation.setProperties(_,{"C01P02": refId,"C01P02_REF":{"INTDES": "","INTSHO": ""}}); 
    // QUNIT_001 already exists :
    var response = representation.save(_,null,"error");
    start(); 
  });
  
  asyncTest("ZQLFPROC01 - Create NOK (mandatory field)", function(_) {
    var id    = "QUNIT_003";
    var refId = "R01P01_01";
   
    var representation = new  Representation("ZQLFPROC01");
    representation.create(_);
    var response = representation.save(_,"C01P01");
    start(); 
  });
  
  asyncTest("ZQLFPROC01 - Create NOK (invalid reference)", function(_) {
    var id    = "QUNIT_004";
    var refId = "R01P01_05";
   
    var representation = new  Representation("ZQLFPROC01");
    representation.delete(_,id);
    representation.create(_);
    representation.setProperties(_,{"C01P01":id}); 
    representation.setProperties(_,{"C01P02": refId,"C01P02_REF":{"INTDES": "","INTSHO": ""}}); 
    var response = representation.save(_,"C01P02");
    start(); 
  });
}
/*******************************************************************************
 ZQLFPROC02
*******************************************************************************/ 
function testZQLFPROC02(_) {
  asyncTest("ZQLFPROC02 - CRUD OK", function(_) {
    var id     = "QUNIT_001";
    var refId1 = "R01P01_01";
    var refId2 = "R01P01_02";
   
    var representation = new  Representation("ZQLFPROC02");
    representation.delete(_,id);
    representation.create(_);
    representation.setProperties(_,{"C02P01":id}); 
    representation.setProperties(_,{"C02P02": refId1,"C02P02_REF":{"INTDES": "","INTSHO": ""}}); 
    representation.setProperties(_,{"C02P03": refId2,"C02P02_REF":{"INTDES": "","INTSHO": ""}}); 
    var response = representation.save(_);
    
    var data = representation.read(_,id);
    strictEqual(data.C02P01         ,id      ,"C02P01="+id);
    strictEqual(data.C02P02         ,refId1  ,"C02P02="+refId1);
    strictEqual(data.C02P03         ,refId2  ,"C02P03="+refId2);
    
    var representation2 = new  Representation("ZQLFPROC02");
    representation2.update(_,id);
    refId1 = "R01P01_03";
    refId2 = "R01P01_04";
    representation2.setProperties(_,{"C02P02": refId1,"C02P02_REF":{"INTDES": "","INTSHO": ""}}); 
    representation2.setProperties(_,{"C02P03": refId2,"C02P02_REF":{"INTDES": "","INTSHO": ""}}); 
    response = representation2.save(_);
    data = representation2.read(_,id);
    strictEqual(data.C02P01         ,id      ,"C02P01="+id);
    strictEqual(data.C02P02         ,refId1  ,"C02P02="+refId1);
    strictEqual(data.C02P03         ,refId2  ,"C02P03="+refId2);
  
    start(); 
  });
  
  asyncTest("ZQLFPROC02 - Create NOK (existing object)", function(_) {
    var id     = "QUNIT_001";
    var refId1 = "R01P01_01";
    var refId2 = "R01P01_02";
   
    var representation = new  Representation("ZQLFPROC02");
    representation.create(_);
    representation.setProperties(_,{"C02P01":id}); 
    representation.setProperties(_,{"C02P02": refId1,"C02P02_REF":{"INTDES": "","INTSHO": ""}}); 
    representation.setProperties(_,{"C02P03": refId2,"C02P02_REF":{"INTDES": "","INTSHO": ""}}); 
    var response = representation.save(_,null,"error");
    start(); 
  });
  
  asyncTest("ZQLFPROC02 - Create NOK (mandatory field 1)", function(_) {
    var id    = "QUNIT_002";
    var refId1 = "R01P01_01";
    var refId2 = "R01P01_02";
   
    var representation = new  Representation("ZQLFPROC02");
    representation.delete(_,id);
    representation.create(_);
    var response = representation.save(_,"C02P01");
    start(); 
  })
  
  asyncTest("ZQLFPROC02 - Create NOK (mandatory field 2)", function(_) {
    var id    = "QUNIT_002";
    var refId1 = "R01P01_01";
    var refId2 = "R01P01_02";
   
    var representation = new  Representation("ZQLFPROC02");
    representation.delete(_,id);
    representation.create(_);
    representation.setProperties(_,{"C02P01":id}); 
    var response = representation.save(_,"C02P02");
    start(); 
  });
  
  asyncTest("ZQLFPROC02 - Create NOK (mandatory field 3)", function(_) {
    var id    = "QUNIT_002";
    var refId1 = "R01P01_01";
    var refId2 = "R01P01_02";
   
    var representation = new  Representation("ZQLFPROC02");
    representation.delete(_,id);
    representation.create(_);
    representation.setProperties(_,{"C02P01":id}); 
    representation.setProperties(_,{"C02P02": refId1,"C02P02_REF":{"INTDES": "","INTSHO": ""}}); 
    var response = representation.save(_,"C02P03");
    start(); 
  });
  
  asyncTest("ZQLFPROC02 - Create NOK (invalid reference 1)", function(_) {
    var id    = "QUNIT_003";
    var refId1 = "R01P01_05";
    var refId2 = "R01P01_02";
   
    var representation = new  Representation("ZQLFPROC02");
    representation.delete(_,id);
    representation.create(_);
    representation.setProperties(_,{"C02P01":id}); 
    representation.setProperties(_,{"C02P02": refId1,"C02P02_REF":{"INTDES": "","INTSHO": ""}}); 
    representation.setProperties(_,{"C02P03": refId2,"C02P02_REF":{"INTDES": "","INTSHO": ""}}); 
    var response = representation.save(_,"C02P02");
    start(); 
  });
  
  asyncTest("ZQLFPROC02 - Create NOK (invalid reference 2", function(_) {
    var id    = "QUNIT_003";
    var refId1 = "R01P01_01";
    var refId2 = "R01P01_05";
   
    var representation = new  Representation("ZQLFPROC02");
    representation.delete(_,id);
    representation.create(_);
    representation.setProperties(_,{"C02P01":id}); 
    representation.setProperties(_,{"C02P02": refId1,"C02P02_REF":{"INTDES": "","INTSHO": ""}}); 
    representation.setProperties(_,{"C02P03": refId2,"C02P02_REF":{"INTDES": "","INTSHO": ""}}); 
    var response = representation.save(_,"C02P03");
    start(); 
  });
} 

/*******************************************************************************
 ZQLFPROC03
*******************************************************************************/ 
function testZQLFPROC03(_) {
  asyncTest("ZQLFPROC03 - Create OK (1 line)", function(_) {
    var id     = "QUNIT_001";
    var refId  = "R01P01_01";
    var lineId = 101;
    var uuid   = helpers.uuid.generate();  
    var data;
   
    var representation = new  Representation("ZQLFPROC03");
    representation.delete(_,id);
    data = representation.create(_);
    /*dbg*///!ok("create",JSON.stringify(data));
    representation.setProperties(_,{"C03P01":id}); 
    representation.setProperties(_,{"ZQPC03COL":[{"$index":0,"$uuid": uuid}]}); 
    representation.setProperties(_,{"ZQPC03COL":[{"$index":0,"$uuid": uuid,"C03P02": lineId}]}); 
    representation.setProperties(_,{"ZQPC03COL":[{"$index":0,"$uuid": uuid,"C03P03": refId,"C03P03_REF": {"INTDES":"","INTSHO":""}}]}); 
     var response = representation.save(_);
    
    data = representation.read(_,id);
    /*dbg*///ok("save",JSON.stringify(data));
     
    strictEqual(data.ZQPC03COL.length,1,"ZQPC03COL length=1");
    strictEqual(data.ZQPC03COL[0].C03P02  ,lineId  ,"ZQPC03COL[0].C03P02="+ lineId);
    strictEqual(data.ZQPC03COL[0].C03P03  ,refId   ,"ZQPC03COL[0].C03P03=" + refId);
    start(); 
  });
  
  asyncTest("ZQLFPROC03 - Create OK (2 lines)", function(_) {
    var id     = "QUNIT_002";
    var data;
   
    var representation = new  Representation("ZQLFPROC03");
    representation.delete(_,id);
    data = representation.create(_);
    /*dbg*///!ok("create",JSON.stringify(data));
    representation.setProperties(_,{"C03P01":id}); 

    //First line : 
    var lineId = 101;
    var refId  = "R01P01_01";
    var uuid   = helpers.uuid.generate(); 
    representation.setProperties(_,{"ZQPC03COL":[{"$index":0,"$uuid": uuid}]}); 
    representation.setProperties(_,{"ZQPC03COL":[{"$index":0,"$uuid": uuid,"C03P02": lineId}]}); 
    representation.setProperties(_,{"ZQPC03COL":[{"$index":0,"$uuid": uuid,"C03P03": refId,"C03P03_REF": {"INTDES":"","INTSHO":""}}]}); 
    //Second line : 
    lineId = 102;
    refId  = "R01P01_02";
    uuid   = helpers.uuid.generate(); 
    representation.setProperties(_,{"ZQPC03COL":[{"$index":1,"$uuid": uuid}]}); 
    representation.setProperties(_,{"ZQPC03COL":[{"$index":1,"$uuid": uuid,"C03P02": lineId}]}); 
    representation.setProperties(_,{"ZQPC03COL":[{"$index":1,"$uuid": uuid,"C03P03": refId,"C03P03_REF": {"INTDES":"","INTSHO":""}}]}); 
    var response = representation.save(_);
    
    data = representation.read(_,id);
    /*dbg*/ok("save",JSON.stringify(data));
     
    strictEqual(data.ZQPC03COL.length,2,"ZQPC03COL length=2");
    lineId = 101;
    refId  = "R01P01_01";
    strictEqual(data.ZQPC03COL[0].C03P02  ,lineId  ,"ZQPC03COL[0].C03P02="+ lineId);
    strictEqual(data.ZQPC03COL[0].C03P03  ,refId   ,"ZQPC03COL[0].C03P03=" + refId);
    lineId = 102;
    refId  = "R01P01_02";
    strictEqual(data.ZQPC03COL[1].C03P02  ,lineId  ,"ZQPC03COL[1].C03P02="+ lineId);
    strictEqual(data.ZQPC03COL[1].C03P03  ,refId   ,"ZQPC03COL[1].C03P03=" + refId);
    start(); 
  });  
  
  asyncTest("ZQLFPROC03 - CRUD OK (1 line)", function(_) {
    var id     = "QUNIT_003";
    var refId  = "R01P01_01";
    var lineId = 101;
    var uuid   = helpers.uuid.generate();  
    var data;
   
    var representation = new  Representation("ZQLFPROC03");
    representation.delete(_,id);
    data = representation.create(_);
    /*dbg*///!ok("create",JSON.stringify(data));
    representation.setProperties(_,{"C03P01":id}); 
    representation.setProperties(_,{"ZQPC03COL":[{"$index":0,"$uuid": uuid}]}); 
    representation.setProperties(_,{"ZQPC03COL":[{"$index":0,"$uuid": uuid,"C03P02": lineId}]}); 
    representation.setProperties(_,{"ZQPC03COL":[{"$index":0,"$uuid": uuid,"C03P03": refId,"C03P03_REF": {"INTDES":"","INTSHO":""}}]}); 
     var response = representation.save(_);
    
    data = representation.read(_,id);
    /*dbg*///ok("save",JSON.stringify(data));
    strictEqual(data.ZQPC03COL.length,1,"ZQPC03COL length=1");
    strictEqual(data.ZQPC03COL[0].C03P02  ,lineId  ,"ZQPC03COL[0].C03P02="+ lineId);
    strictEqual(data.ZQPC03COL[0].C03P03  ,refId   ,"ZQPC03COL[0].C03P03="+ refId);
  
    var representation2 = new  Representation("ZQLFPROC03");
    response = representation2.update(_,id);
    /*dbg*/ok("update",JSON.stringify(response)); 
    lineId = 102;
    refId = "R01P01_02";
    representation2.setProperties(_,{"ZQPC03COL":[{"$index":0,"$uuid": response.ZQPC03COL[0].$uuid,"C03P02": lineId,"C03P03": refId,"C03P03_REF": {"INTDES":"","INTSHO":""}}]}); 
    response = representation2.save(_);
    data = representation2.read(_,id);
    /*dbg*///ok("save",JSON.stringify(data)); 
    strictEqual(data.ZQPC03COL.length,1,"ZQPC03COL length=1");
    strictEqual(data.C03P01               ,id      ,"C03P01="+id);
    strictEqual(data.ZQPC03COL[0].C03P02  ,lineId  ,"ZQPC03COL[0].C03P02="+ lineId);
    strictEqual(data.ZQPC03COL[0].C03P03  ,refId   ,"ZQPC03COL[0].C03P03=" + refId);
  
    start(); 
  });  
  
  asyncTest("ZQLFPROC03 - CRUD OK (2 lines)", function(_) {
    var id     = "QUNIT_004";
    var data;
   
    var representation = new  Representation("ZQLFPROC03");
    representation.delete(_,id);
    data = representation.create(_);
    /*dbg*///!ok("create",JSON.stringify(data));
    representation.setProperties(_,{"C03P01":id}); 

    // First line
    var lineId = 101;
    var refId  = "R01P01_01";
    var uuid   = helpers.uuid.generate();  
    representation.setProperties(_,{"ZQPC03COL":[{"$index":0,"$uuid": uuid}]}); 
    representation.setProperties(_,{"ZQPC03COL":[{"$index":0,"$uuid": uuid,"C03P02": lineId}]}); 
    representation.setProperties(_,{"ZQPC03COL":[{"$index":0,"$uuid": uuid,"C03P03": refId,"C03P03_REF": {"INTDES":"","INTSHO":""}}]}); 
    // Second line
    lineId = 102;
    refId  = "R01P01_02";
    uuid   = helpers.uuid.generate();  
    representation.setProperties(_,{"ZQPC03COL":[{"$index":1,"$uuid": uuid}]}); 
    representation.setProperties(_,{"ZQPC03COL":[{"$index":1,"$uuid": uuid,"C03P02": lineId}]}); 
    representation.setProperties(_,{"ZQPC03COL":[{"$index":1,"$uuid": uuid,"C03P03": refId,"C03P03_REF": {"INTDES":"","INTSHO":""}}]}); 
    var response = representation.save(_);
    
    data = representation.read(_,id);
    /*dbg*///ok("save",JSON.stringify(data));
    strictEqual(data.ZQPC03COL.length,2,"ZQPC03COL length=2");
    // Check the first line
    lineId = 101;
    refId  = "R01P01_01";   
    strictEqual(data.ZQPC03COL[0].C03P02  ,lineId  ,"ZQPC03COL[0].C03P02="+ lineId);
    strictEqual(data.ZQPC03COL[0].C03P03  ,refId   ,"ZQPC03COL[0].C03P03="+ refId);
    // Check the second line
    lineId = 102;
    refId  = "R01P01_02";   
    strictEqual(data.ZQPC03COL[1].C03P02  ,lineId  ,"ZQPC03COL[1].C03P02="+ lineId);
    strictEqual(data.ZQPC03COL[1].C03P03  ,refId   ,"ZQPC03COL[1].C03P03="+ refId);
  
    var representation2 = new  Representation("ZQLFPROC03");
    response = representation2.update(_,id);
    /*dbg*/ok("update",JSON.stringify(response)); 
    //Modify the first line
    lineId = 103;
    refId = "R01P01_03";
    representation2.setProperties(_,{"ZQPC03COL":[{"$index":0,"$uuid": response.ZQPC03COL[0].$uuid,"C03P02": lineId,"C03P03": refId,"C03P03_REF": {"INTDES":"","INTSHO":""}}]}); 
    //Modify the second line
    lineId = 104;
    refId = "R01P01_04";
    representation2.setProperties(_,{"ZQPC03COL":[{"$index":1,"$uuid": response.ZQPC03COL[1].$uuid,"C03P02": lineId,"C03P03": refId,"C03P03_REF": {"INTDES":"","INTSHO":""}}]}); 
    response = representation2.save(_);
    
    data = representation2.read(_,id);
    /*dbg*///ok("save",JSON.stringify(data)); 
    // Check the first line
    strictEqual(data.ZQPC03COL.length,2,"ZQPC03COL length=2");
    lineId = 103;
    refId  = "R01P01_03";   
    strictEqual(data.ZQPC03COL[0].C03P02  ,lineId  ,"ZQPC03COL[0].C03P02="+ lineId);
    strictEqual(data.ZQPC03COL[0].C03P03  ,refId   ,"ZQPC03COL[0].C03P03="+ refId);
    // Check the second line
    lineId = 104;
    refId  = "R01P01_04";   
    strictEqual(data.ZQPC03COL[1].C03P02  ,lineId  ,"ZQPC03COL[1].C03P02="+ lineId);
    strictEqual(data.ZQPC03COL[1].C03P03  ,refId   ,"ZQPC03COL[1].C03P03="+ refId);
  
    start(); 
  });    
}

/*******************************************************************************
 ZQLFPROC04
*******************************************************************************/ 
function testZQLFPROC04(_) {
  asyncTest("ZQLFPROC04 - Create OK (1 line)", function(_) {
    var id     = "QUNIT_001";
    var uuid   = helpers.uuid.generate();  
    var data;
   
    var representation = new  Representation("ZQLFPROC04");
    representation.delete(_,id);
    data = representation.create(_);
    /*dbg*///!ok("create",JSON.stringify(data));
    representation.setProperties(_,{"C04P01":id}); 
    var refId  = "R01P01_01";
    representation.setProperties(_,{"ZQPC04COL":[{"R01P01": refId}]}); 
    var response = representation.save(_);
    
    data = representation.read(_,id);
    /*dbg*///ok("save",JSON.stringify(data));
    strictEqual(data.ZQPC04COL.length,1,"ZQPC04COL length=1");
    strictEqual(data.ZQPC04COL[0].R01P01  ,refId   ,"ZQPC04COL[0].R01P01=" + refId);
    start(); 
  });
  
  asyncTest("ZQLFPROC04 - Create OK (2 lines)", function(_) {
    var id     = "QUNIT_002";
    var uuid   = helpers.uuid.generate();  
    var data;
   
    var representation = new  Representation("ZQLFPROC04");
    representation.delete(_,id);
    data = representation.create(_);
    /*dbg*///!ok("create",JSON.stringify(data));
    representation.setProperties(_,{"C04P01":id}); 
    var refId1  = "R01P01_01";
    var refId2  = "R01P01_02";
    representation.setProperties(_,{"ZQPC04COL":[{"R01P01": refId1},{"R01P01": refId2}]}); 
    var response = representation.save(_);
    
    data = representation.read(_,id);
    /*dbg*///ok("save",JSON.stringify(data));
    strictEqual(data.ZQPC04COL.length,2,"ZQPC04COL length=2");
    strictEqual(data.ZQPC04COL[0].R01P01  ,refId1   ,"ZQPC04COL[0].R01P01=" + refId1);
    strictEqual(data.ZQPC04COL[1].R01P01  ,refId2   ,"ZQPC04COL[1].R01P01=" + refId2);
    start(); 
  }); 
  
 asyncTest("ZQLFPROC04 - CRUD OK (1 line)", function(_) {
    var id     = "QUNIT_003";
    var uuid   = helpers.uuid.generate();  
    var data;
   
    var representation = new  Representation("ZQLFPROC04");
    representation.delete(_,id);
    data = representation.create(_);
    /*dbg*///!ok("create",JSON.stringify(data));
    representation.setProperties(_,{"C04P01":id}); 
    var refId  = "R01P01_01";
    representation.setProperties(_,{"ZQPC04COL":[{"R01P01": refId}]}); 
    var response = representation.save(_);
    
    data = representation.read(_,id);
    /*dbg*///ok("save",JSON.stringify(data));
    strictEqual(data.ZQPC04COL.length,1,"ZQPC04COL length=1");
    strictEqual(data.ZQPC04COL[0].R01P01  ,refId   ,"ZQPC04COL[0].R01P01=" + refId);  
    
    var representation2 = new  Representation("ZQLFPROC04");
    response = representation2.update(_,id);
    refId  = "R01P01_02";
    representation2.setProperties(_,{"ZQPC04COL":[{"R01P01": refId}]}); 
    var response = representation2.save(_);
    
    data = representation2.read(_,id);
    /*dbg*///ok("save",JSON.stringify(data));
    strictEqual(data.ZQPC04COL.length,1,"ZQPC04COL length=1");
    strictEqual(data.ZQPC04COL[0].R01P01  ,refId   ,"ZQPC04COL[0].R01P01=" + refId);  
     
    start(); 
  });
  
  asyncTest("ZQLFPROC04 - CRUD OK (2 lines)", function(_) {
    var id     = "QUNIT_004";
    var uuid   = helpers.uuid.generate();  
    var data;
   
    var representation = new  Representation("ZQLFPROC04");
    representation.delete(_,id);
    data = representation.create(_);
    /*dbg*///!ok("create",JSON.stringify(data));
    representation.setProperties(_,{"C04P01":id}); 
    var refId1  = "R01P01_01";
    var refId2  = "R01P01_02";
    representation.setProperties(_,{"ZQPC04COL":[{"R01P01": refId1},{"R01P01": refId2}]}); 
    var response = representation.save(_);
    
    data = representation.read(_,id);
    /*dbg*///ok("save",JSON.stringify(data));
    strictEqual(data.ZQPC04COL.length,2,"ZQPC04COL length=2");
    strictEqual(data.ZQPC04COL[0].R01P01  ,refId1   ,"ZQPC04COL[0].R01P01=" + refId1);
    strictEqual(data.ZQPC04COL[1].R01P01  ,refId2   ,"ZQPC04COL[1].R01P01=" + refId2);
    
    var representation2 = new  Representation("ZQLFPROC04");
    response = representation2.update(_,id);
    refId1  = "R01P01_03";
    refId2  = "R01P01_04";
    representation2.setProperties(_,{"ZQPC04COL":[{"R01P01": refId1},{"R01P01": refId2}]}); 
    var response = representation2.save(_);
    
    data = representation2.read(_,id);
    /*dbg*///ok("save",JSON.stringify(data));
    strictEqual(data.ZQPC04COL.length,2,"ZQPC04COL length=2");
    strictEqual(data.ZQPC04COL[0].R01P01  ,refId1   ,"ZQPC04COL[0].R01P01=" + refId1);
    strictEqual(data.ZQPC04COL[1].R01P01  ,refId2   ,"ZQPC04COL[1].R01P01=" + refId2);
    start(); 
  });    
}

/*******************************************************************************
 ZQLFPROC05
*******************************************************************************/ 
function testZQLFPROC05(_) {
  asyncTest("ZQLFPROC05 - Create OK (1 line)", function(_) {
    var id     = "QUNIT_001";
    var refId  = "R01P01_01";
    var uuid   = helpers.uuid.generate();  
    var data;
   
    var representation = new  Representation("ZQLFPROC05");
    representation.delete(_,id);
    data = representation.create(_);
    /*dbg*///!ok("create",JSON.stringify(data));
    representation.setProperties(_,{"C05P01":id}); 
    representation.setProperties(_,{"ZQPC05COL":[{"$index":0,"$uuid": uuid}]}); 
    representation.setProperties(_,{"ZQPC05COL":[{"$index":0,"$uuid": uuid,"C05P03": refId,"C05P03_REF": {"INTDES":"","INTSHO":""}}]}); 
     var response = representation.save(_);
    
    data = representation.read(_,id);
    /*dbg*///ok("save",JSON.stringify(data));
     
    strictEqual(data.ZQPC05COL.length,1,"ZQPC05COL length=1");
    strictEqual(data.ZQPC05COL[0].C05P03  ,refId   ,"ZQPC05COL[0].C05P03=" + refId);
    start(); 
  });
  
  asyncTest("ZQLFPROC05 - Create OK (2 lines)", function(_) {
    var id     = "QUNIT_002";
    var data;
   
    var representation = new  Representation("ZQLFPROC05");
    representation.delete(_,id);
    data = representation.create(_);
    /*dbg*///!ok("create",JSON.stringify(data));
    representation.setProperties(_,{"C05P01":id}); 

    //First line : 
    var refId  = "R01P01_01";
    var uuid   = helpers.uuid.generate(); 
    representation.setProperties(_,{"ZQPC05COL":[{"$index":0,"$uuid": uuid}]}); 
    representation.setProperties(_,{"ZQPC05COL":[{"$index":0,"$uuid": uuid,"C05P03": refId,"C05P03_REF": {"INTDES":"","INTSHO":""}}]}); 
    //Second line : 
    refId  = "R01P01_02";
    uuid   = helpers.uuid.generate(); 
    representation.setProperties(_,{"ZQPC05COL":[{"$index":1,"$uuid": uuid}]}); 
    representation.setProperties(_,{"ZQPC05COL":[{"$index":1,"$uuid": uuid,"C05P03": refId,"C05P03_REF": {"INTDES":"","INTSHO":""}}]}); 
    var response = representation.save(_);
    
    data = representation.read(_,id);
    /*dbg*/ok("save",JSON.stringify(data));
     
    strictEqual(data.ZQPC05COL.length,3,"ZQPC05COL length=2");
    refId  = "R01P01_01";
    strictEqual(data.ZQPC05COL[0].C05P03  ,refId   ,"ZQPC05COL[0].C05P03=" + refId);
    refId  = "R01P01_02";
    strictEqual(data.ZQPC05COL[1].C05P03  ,refId   ,"ZQPC05COL[1].C05P03=" + refId);
    start(); 
  });  
  
  asyncTest("ZQLFPROC05 - CRUD OK (1 line)", function(_) {
    var id     = "QUNIT_003";
    var refId  = "R01P01_01";
    var uuid   = helpers.uuid.generate();  
    var data;
   
    var representation = new  Representation("ZQLFPROC05");
    representation.delete(_,id);
    data = representation.create(_);
    /*dbg*///!ok("create",JSON.stringify(data));
    representation.setProperties(_,{"C05P01":id}); 
    representation.setProperties(_,{"ZQPC05COL":[{"$index":0,"$uuid": uuid}]}); 
    representation.setProperties(_,{"ZQPC05COL":[{"$index":0,"$uuid": uuid,"C05P03": refId,"C05P03_REF": {"INTDES":"","INTSHO":""}}]}); 
     var response = representation.save(_);
    
    data = representation.read(_,id);
    /*dbg*///ok("save",JSON.stringify(data));
    strictEqual(data.ZQPC05COL.length,1,"ZQPC05COL length=1");
    strictEqual(data.ZQPC05COL[0].C05P03  ,refId   ,"ZQPC05COL[0].C05P03="+ refId);
  
    var representation2 = new  Representation("ZQLFPROC05");
    response = representation2.update(_,id);
    /*dbg*/ok("update",JSON.stringify(response)); 
    refId = "R01P01_02";
    representation2.setProperties(_,{"ZQPC05COL":[{"$index":0,"$uuid": response.ZQPC05COL[0].$uuid,"C05P03": refId,"C05P03_REF": {"INTDES":"","INTSHO":""}}]}); 
    response = representation2.save(_);
    data = representation2.read(_,id);
    /*dbg*///ok("save",JSON.stringify(data)); 
    strictEqual(data.ZQPC05COL.length,1,"ZQPC05COL length=1");
    strictEqual(data.C05P01               ,id      ,"C05P01="+id);
    strictEqual(data.ZQPC05COL[0].C05P03  ,refId   ,"ZQPC05COL[0].C05P03=" + refId);
  
    start(); 
  });  
  
  asyncTest("ZQLFPROC05 - CRUD OK (2 lines)", function(_) {
    var id     = "QUNIT_004";
    var data;
   
    var representation = new  Representation("ZQLFPROC05");
    representation.delete(_,id);
    data = representation.create(_);
    /*dbg*///!ok("create",JSON.stringify(data));
    representation.setProperties(_,{"C05P01":id}); 

    // First line
    var refId  = "R01P01_01";
    var uuid   = helpers.uuid.generate();  
    representation.setProperties(_,{"ZQPC05COL":[{"$index":0,"$uuid": uuid}]}); 
    representation.setProperties(_,{"ZQPC05COL":[{"$index":0,"$uuid": uuid,"C05P03": refId,"C05P03_REF": {"INTDES":"","INTSHO":""}}]}); 
    // Second line
    refId  = "R01P01_02";
    uuid   = helpers.uuid.generate();  
    representation.setProperties(_,{"ZQPC05COL":[{"$index":1,"$uuid": uuid}]}); 
    representation.setProperties(_,{"ZQPC05COL":[{"$index":1,"$uuid": uuid,"C05P03": refId,"C05P03_REF": {"INTDES":"","INTSHO":""}}]}); 
    var response = representation.save(_);
    
    data = representation.read(_,id);
    /*dbg*///ok("save",JSON.stringify(data));
    strictEqual(data.ZQPC05COL.length,2,"ZQPC05COL length=2");
    // Check the first line
    refId  = "R01P01_01";   
    strictEqual(data.ZQPC05COL[0].C05P03  ,refId   ,"ZQPC05COL[0].C05P03="+ refId);
    // Check the second line
    refId  = "R01P01_02";   
    strictEqual(data.ZQPC05COL[1].C05P03  ,refId   ,"ZQPC05COL[1].C05P03="+ refId);
  
    var representation2 = new  Representation("ZQLFPROC05");
    response = representation2.update(_,id);
    /*dbg*/ok("update",JSON.stringify(response)); 
    //Modify the first line
    refId = "R01P01_03";
    representation2.setProperties(_,{"ZQPC05COL":[{"$index":0,"$uuid": response.ZQPC05COL[0].$uuid,"C05P03": refId,"C05P03_REF": {"INTDES":"","INTSHO":""}}]}); 
    //Modify the second line
    refId = "R01P01_04";
    representation2.setProperties(_,{"ZQPC05COL":[{"$index":1,"$uuid": response.ZQPC05COL[1].$uuid,"C05P03": refId,"C05P03_REF": {"INTDES":"","INTSHO":""}}]}); 
    response = representation2.save(_);
    
    data = representation2.read(_,id);
    /*dbg*///ok("save",JSON.stringify(data)); 
    // Check the first line
    strictEqual(data.ZQPC05COL.length,2,"ZQPC05COL length=2");
    refId  = "R01P01_03";   
    strictEqual(data.ZQPC05COL[0].C05P03  ,refId   ,"ZQPC05COL[0].C05P03="+ refId);
    // Check the second line
    refId  = "R01P01_04";   
    strictEqual(data.ZQPC05COL[1].C05P03  ,refId   ,"ZQPC05COL[1].C05P03="+ refId);
  
    start(); 
  });    
}

/*******************************************************************************
 ZQLFPROC06
*******************************************************************************/ 
function testZQLFPROC06(_) {
  asyncTest("ZQLFPROC06 - Create OK", function(_) {
    var id      = "QUNIT_001";
    var refIdP1 = "R02P01_01";
    var refIdP2 = 1;
   
    var representation = new  Representation("ZQLFPROC06");
    representation.delete(_,id);
    representation.create(_);
    representation.setProperties(_,{"C06P01":id}); 
    representation.setProperties(_,{"C06P02": refIdP1,"C06P02_REF":{"INTDES": "","INTSHO": ""},"C06P03": refIdP2}); 
    var response = representation.save(_);
    
    //Read the newly created object :
    var data = representation.read(_,id);
    //Check the object:
    strictEqual(data.C06P01         ,id       ,"C06P01="+id);
    strictEqual(data.C06P02         ,refIdP1  ,"C06P02="+refIdP1);
    strictEqual(data.C06P03         ,refIdP2  ,"C06P03="+refIdP2);
    start(); 
  });
  
  asyncTest("ZQLFPROC06 - Create NOK(invalid reference 1)", function(_) {
    var id      = "QUNIT_002";
    var refIdP1 = "R02P01_xx";
    var refIdP2 = 1;
   
    var representation = new  Representation("ZQLFPROC06");
    representation.delete(_,id);
    representation.create(_);
    representation.setProperties(_,{"C06P01":id}); 
    representation.setProperties(_,{"C06P02": refIdP1,"C06P02_REF":{"INTDES": "","INTSHO": ""},"C06P03": refIdP2}); 
    var response = representation.save(_,"C06P02","error");
    
    //Read the newly created object :
    var data = representation.read(_,id);
    //Check the object:
    strictEqual(data.C06P01         ,id       ,"C06P01="+id);
    strictEqual(data.C06P02         ,refIdP1  ,"C06P02="+refIdP1);
    strictEqual(data.C06P03         ,refIdP2  ,"C06P03="+refIdP2);
    start(); 
  });
  
  asyncTest("ZQLFPROC06 - Create NOK(invalid reference 2)", function(_) {
    var id      = "QUNIT_001";
    var refIdP1 = "R02P01_01";
    var refIdP2 = 1000;
   
    var representation = new  Representation("ZQLFPROC06");
    representation.delete(_,id);
    representation.create(_);
    representation.setProperties(_,{"C06P01":id}); 
    representation.setProperties(_,{"C06P02": refIdP1,"C06P02_REF":{"INTDES": "","INTSHO": ""},"C06P03": refIdP2}); 
    var response = representation.save(_,"C06P03","error");
    
    //Read the newly created object :
    var data = representation.read(_,id);
    //Check the object:
    strictEqual(data.C06P01         ,id       ,"C06P01="+id);
    strictEqual(data.C06P02         ,refIdP1  ,"C06P02="+refIdP1);
    strictEqual(data.C06P03         ,refIdP2  ,"C06P03="+refIdP2);
    start(); 
  });  
  
  asyncTest("ZQLFPROC06 - CRUD OK", function(_) {
    var id      = "QUNIT_003";
    var refIdP1 = "R02P01_01";
    var refIdP2 = 1;
   
    var representation = new  Representation("ZQLFPROC06");
    representation.delete(_,id);
    representation.create(_);
    representation.setProperties(_,{"C06P01":id}); 
    representation.setProperties(_,{"C06P02": refIdP1,"C06P02_REF":{"INTDES": "","INTSHO": ""},"C06P03": refIdP2}); 
    var response = representation.save(_);
    
    //Read the newly created object :
    var data = representation.read(_,id);
    //Check the object:
    strictEqual(data.C06P01         ,id       ,"C06P01="+id);
    strictEqual(data.C06P02         ,refIdP1  ,"C06P02="+refIdP1);
    strictEqual(data.C06P03         ,refIdP2  ,"C06P03="+refIdP2);
    
    var representation2 = new  Representation("ZQLFPROC06");
    representation2.update(_,id);
    refIdP1 = "R02P01_02";
    refIdP2 = 2;
    representation2.setProperties(_,{"C06P02": refIdP1,"C06P02_REF":{"INTDES": "","INTSHO": ""},"C06P03": refIdP2}); 
    var response = representation2.save(_);
    //Read the object :
    data = representation2.read(_,id);
    //Check the object:
    strictEqual(data.C06P01         ,id       ,"C06P01="+id);
    strictEqual(data.C06P02         ,refIdP1  ,"C06P02="+refIdP1);
    strictEqual(data.C06P03         ,refIdP2  ,"C06P03="+refIdP2);
  
    start(); 
  });
  
  
}

testZQLFPROC01(_);
testZQLFPROC02(_);
testZQLFPROC03(_);
testZQLFPROC04(_);
testZQLFPROC05(_);
testZQLFPROC06(_);

//******************************************************************************

asyncTest("stop server", 0, function(_) {
	x3Helper.stopServer();
	start();
});
asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});
// JavaScript Document
