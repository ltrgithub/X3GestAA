"use strict";
var module = QUnit.module;
var assert = require("assert");
var config = require('config'); // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var x3Helper = require("syracuse-x3/test/fixtures/x3Helper");
var helpers = require("syracuse-core/lib/helpers");

var tracer; // = console.log;
var doStop = false;

module(config.unit_test.x3endpoint.folder + ".x3Deltas");

if (!config.unit_test || !config.unit_test.x3endpoint || !config.unit_test.run || !config.unit_test.run.x3Batch) {
	return test('X3 DELTAS UNIT TESTS DISABLED FOR NOW', 1, function() {
		ok(true, "work in progress");
	});
}

asyncTest("start", function(_) {
	ok(x3Helper.initDatabase(_), "syracuse mongodb database initialized");
	x3Helper.initialize(_);
	ok(x3Helper.createObjects(_), "createObjects");
	start();
});

var cookie = null;

function _getCookie(_) {
	cookie = cookie || x3Helper.getCookie(_);
	//!ok("cookie"   ,"cookie"   +JSON.stringify(cookie));
	return cookie;
}

function countProperties(_node) {
	var count = 0;
	for (var n in _node) {
		if (n.substring(0, 1) != '$') {
			count += 1;
		}
	}
	return count;
}

function putDelta(_, _prototype, _workingCopy, _delta, _expected) {
	var url = _workingCopy.$url.substring("{$baseUrl}/".length);
	_delta.$etag = _workingCopy.$etag;
	_delta.$uuid = _workingCopy.$uuid;
	_delta.$url = x3Helper.x3Url(url);

	//!tracer && tracer("*** url:",url);

	//!tracer && tracer("*** _delta.$url:",_delta.$url);

	var deltaCount = countProperties(_delta);

	tracer && tracer("*** _delta:", _delta);
	var deltaResponse = x3Helper.put(_, _getCookie(_), _delta.$url, _delta, 200);
	//!ok(_delta.$etag != deltaResponse.$etag  ,"deltaResponse.$etag="+deltaResponse.$etag);
	//!ok(countProperties(deltaResponse)>=deltaCount ,"number of properties sent in the delta="+deltaCount);
	//!tracer && tracer("*** deltaResponse:",deltaResponse);

	var expected = _expected || _delta;

	function compareObjects(_expected, _delta, _prototype) {
		//!tracer && tracer("*** _expected:",_expected);
		for (var property in _expected) {
			//!tracer && tracer("*** compareObjects var property:"+property);
			if (property.substring(0, 1) != '$') {
				ok(property in _delta, "delta." + property);
				if (property in _delta, "delta." + property) {;
					if (toString.call(_expected[property]).indexOf("Object") >= 0) {
						//!tracer && tracer("*** compareObjects("+property+")");
						compareObjects(_expected[property], _delta[property], _prototype);
					} else {
						//!tracer && tracer("***",_prototype.$properties[property]);
						var expect = _expected[property];
						if ("$maxLength" in _prototype.$properties[property]) {
							expect = expect.substring(0, _prototype.$properties[property].$maxLength);
						}
						strictEqual(expect, _delta[property], "delta." + property + "=" + _delta[property]);
					}
				}
			}
		}
	}

	//!compareObjects(_expected || _delta,deltaResponse,_prototype);

	return deltaResponse;
}

var Representation = function(_repName) {
	this.repName = _repName;
	this.uuid = helpers.uuid.generate();

	tracer && tracer("new Representation", this.repName);

	this.delete = function(_, _key, _status) {
		var url = x3Helper.x3Url(this.repName + "(%27" + _key + "%27)?representation=" + this.repName + ".$query&trackingId=" + this.uuid);
		/*dbg*/
		ok(true, "DBG delete:" + url);
		var response = x3Helper.delete(_, _getCookie(_), url, {}, _status);
		/*dbg*/ //ok(true,"DBG delete:" + JSON.stringify(response));
	};

	this.create = function(_) {
		// Get the $edit prototype :
		this.proEdit = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('" + this.repName + ".$edit')"), 200);

		//Create a new working copy:
		this.trackingId = helpers.uuid.generate();
		var url = x3Helper.x3Url(this.repName + "/$workingCopies?representation=" + this.repName + ".$edit&trackingId=" + this.trackingId);
		/*dbg*/
		ok(true, "DBG create:" + url);
		this.workingCopy = x3Helper.post(_, _getCookie(_), url, {}, 200);
		this.location = url;
		return this.workingCopy;
	};

	this.update = function(_, _key, _delta) {
		// Get the $edit prototype :
		this.proEdit = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('" + this.repName + ".$edit')"), 200);

		//Create a new working copy:
		var url;
		//! ok("update", "typeof(_delta):" + typeof(_delta));
		if (typeof(_delta) == 'undefined') {
			this.trackingId = helpers.uuid.generate();
			url = x3Helper.x3Url(this.repName + "(%27" + _key + "%27)/$workingCopies?representation=" + this.repName + ".$edit&trackingId=" + this.trackingId);
			this.workingCopy = x3Helper.post(_, _getCookie(_), url, {}, 200);
		} else {
			// Reuse the previous trackingId : 
			_delta.$trackingId = this.trackingId;
			url = x3Helper.x3Url(this.repName + "(%27" + _key + "%27)/$workingCopies?representation=" + this.repName + ".$edit");
			/*dbg*/ //ok(true, "DBG update url:" + url);
			/*dbg*/ //ok(true, "DBG update delta:" + JSON.stringify(_delta));
			this.workingCopy = x3Helper.post(_, _getCookie(_), url, _delta, 200);
			/*dbg*/ //ok(true, "DBG this.workingCopy:" + JSON.stringify(this.workingCopy));
		}
		if ("$diagnoses" in this.workingCopy) {
			for (var i = 0; i < this.workingCopy.$diagnoses.length; i++) {
				if (this.workingCopy.$diagnoses[i].$severity === "error") {
					/*dbg*/ //ok(true, "DBG update:" + JSON.stringify(this.workingCopy));
					ok(false, this.workingCopy.$diagnoses[i].message);
				}
			}
		}
		this.location = url;
		return this.workingCopy;
	};

	this.edit = function(_, _key) {
		// Get the $edit prototype :
		this.proEdit = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('" + this.repName + ".$edit')"), 200);

		//Create a new working copy:
		var url = x3Helper.x3Url(this.repName + "(%27" + _key + "%27)/$workingCopies?representation=" + this.repName + ".$edit");
		var data = x3Helper.post(_, _getCookie(_), url, {}, 200);
		/*dbg*/
		ok(true, "DBG data:" + JSON.stringify(data));
		if ("$diagnoses" in data) {
			for (var i = 0; i < data.$diagnoses.length; i++) {
				if (data.$diagnoses[i].$severity === "error") {
					/*dbg*/ //ok(true, "DBG update:" + JSON.stringify(this.workingCopy));
					ok(false, data.$diagnoses[i].message);
				}
			}
		}
		this.location = url;
		return data;
	};

	this.setProperties = function(_, _delta, _isDisabled, _status) {
		/*dbg*/
		//tracer && tracer("*** setProperties:",_delta);

		var url = this.workingCopy.$url.substring("{$baseUrl}/".length);
		_delta.$etag = this.workingCopy.$etag;
		_delta.$uuid = this.workingCopy.$uuid;
		_delta.$url = x3Helper.x3Url(url);

		/*dbg*/
		ok(true, "DBG setProperties.PUT:" + JSON.stringify(_delta));
		var response;
		/*dbg*/ //ok(true, "DBG setProperties url:" + _delta.$url);
		response = x3Helper.put(_, _getCookie(_), _delta.$url, _delta);
		/*dbg*/
		/*dbg*/
		ok(true, "DBG setProperties.REP:" + JSON.stringify(response));
		if ((typeof(_isDisabled) != 'undefined') && (_isDisabled != null)) {
			/*dbg*/
			//ok("setProperties",JSON.stringify(response));
			//!ok("_isDisabled","_isDisabled="+_isDisabled);
			//!ok("$isDisabled","$isDisabled="+response.$actions.$save.$isDisabled);
			strictEqual(response.$actions.$save.$isDisabled, _isDisabled, "$isDisabled:" + _isDisabled);
		}
		return response;
	};

	this.save = function(_, _property, _status, _test) {
		var test = _test || false;

		var response = this.setProperties(_, {
			"$actions": {
				"$save": {
					"$isRequested": true
				}
			}
		});
		/*dbg*/
		ok(true, "DBG save response:" + JSON.stringify(response));
		if (test) {
			if (_property == null) {
				_status = _status || "success";
				if (_status == "success") {
					var success = false;
					for (var i = 0; i < response.$actions.$save.$diagnoses.length; i++) {
						if (response.$actions.$save.$diagnoses[i].$severity === "success") {
							success = true;
							break;
						}
					}
					ok(success, "save " + _status);
				} else {
					//strictEqual(response.$diagnoses[0].$severity, _status, response.$diagnoses[0].$message);
					var success = false;
					for (var i = 0; i < response.$diagnoses.length; i++) {
						if (response.$diagnoses[i].$severity === _status) {
							success = true;
							break;
						}
					}
					ok(success, "save " + _status);
				}
			} else {
				_status = _status || "error";

				var success = false;
				if (response.$properties !== undefined && response.$properties[_property] !== undefined && response.$properties[_property].$diagnoses !== undefined) {
					for (var i = 0; i < response.$properties[_property].$diagnoses.length; i++) {
						if (response.$properties[_property].$diagnoses[i].$severity === _status) {
							success = true;
							break;
						}
					}
				}
				ok(success, "save " + _property + ":" + _status);
			}
		}
		/*dbg*/
		ok(true, "DBG delete url:" + this.location);
		var rdelete = x3Helper.delete(_, _getCookie(_), this.location, {});
		/*dbg*/ //ok(true, "DBG delete response:" + JSON.stringify(rdelete));

		return response;
	};

	this.read = function(_, _key) {
		// Get the $details prototype :
		/*dbg*/ //ok(true, "DBG read :" + this.repName + ".$details prototype");
		this.proDetails = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes(%27" + this.repName + ".$details%27)"), 200);
		/*dbg*/ //ok(true, "DBG prototype:" + JSON.stringify(this.proDetails));

		/*dbg*/ //ok(true, "DBG read " + this.repName + ".$details");
		var data = x3Helper.get(_, _getCookie(_), x3Helper.x3Url(this.repName + "(%27" + _key + "%27)?representation=" + this.repName + ".$details"), 200);

		/*dbg*/ //ok(true, "read:" + JSON.stringify(data));
		return data;
	};

	this.summary = function(_, _key) {
		// Get the $summary prototype :
		this.proDetails = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes(%27" + this.repName + ".$summary%27)"), 200);
		var data = x3Helper.get(_, _getCookie(_), x3Helper.x3Url(this.repName + "(%27" + _key + "%27)?representation=" + this.repName + ".$summary"), 200);
		return data;
	};

	this.query = function(_, _query) {
		// Get the $details prototype :
		this.proQuery = x3Helper.get(_, _getCookie(_), x3Helper.x3Url("$prototypes('" + this.repName + ".$query')"), 200);
		/*dbg*/
		//ok(true,this.repName+".$details prototype");

		var data = x3Helper.get(_, _getCookie(_), x3Helper.x3Url(this.repName + "?representation=" + this.repName + ".$query" + _query), 200);
		/*dbg*/
		//ok("query","query:"+JSON.stringify(data));
		return data;
	};
};

/*******************************************************************************
testIssue2208
*******************************************************************************/

function testIssue2208() {
	asyncTest("Issue 2208" + x3Helper.gitHubIssue(2208), function(_) {
		function create(_, i) {
			var id = "2208_" + i;
			var representation = new Representation("AQCPROR01");
			representation.delete(_, id);
			representation.create(_);
			representation.setProperties(_, {
				"REP_R01P01": id
			});
			representation.setProperties(_, {
				"INTDES": "INTDES " + i
			});
			representation.setProperties(_, {
				"INTSHO": "INTSHO " + i
			});
			var response = representation.save(_);
		}
		create(_, 1);
		create(_, 2);
		create(_, 3);
		create(_, 4);
		create(_, 5);
		create(_, 6);
		create(_, 7);
		create(_, 8);
		create(_, 9);
		create(_, 10);
		start();
	});
}
/*******************************************************************************
 AQCPROR01
*******************************************************************************/

function testAQCPROR01() {
	asyncTest("AQCPROR01 - Create OK", function(_) {
		function create(_, id1, num) {
			var id = id1;
			var representation = new Representation("AQCPROR01");
			representation.delete(_, id);
			representation.create(_);
			representation.setProperties(_, {
				"REP_R01P01": id1
			});
			representation.setProperties(_, {
				"INTDES": "INTDES " + num
			});
			representation.setProperties(_, {
				"INTSHO": "INTSHO " + num
			});
			var response = representation.save(_);
		}

		function read(_, id1, num) {
			var id = id1;
			var representation = new Representation("AQCPROR01");
			var data = representation.read(_, id);
			strictEqual(data.REP_R01P01, id1, "R01P01=" + id1);
			strictEqual(data.INTDES, "INTDES " + num, "INTDES=" + num);
			strictEqual(data.INTSHO, "INTSHO " + num, "INTSHO=" + num);
		}

		create(_, "R01P01_01", 1);
		create(_, "R01P01_02", 2);
		create(_, "R01P01_03", 3);
		create(_, "R01P01_04", 4);

		read(_, "R01P01_01", 1);
		read(_, "R01P01_02", 2);
		read(_, "R01P01_03", 3);
		read(_, "R01P01_04", 4);
		start();
	});
}

/*******************************************************************************
 AQCPROC01
*******************************************************************************/

function testAQCPROC01() {
	asyncTest("AQCPROC01 - CRUD OK", function(_) {
		var id = "QUNIT_001";

		var representation = new Representation("AQCPROC01");
		//delete QUNIT_001
		representation.delete(_, id);
		//Create a working copy:
		representation.create(_);
		//set the instance key :
		representation.setProperties(_, {
			"C01P01": id
		});
		//set the reference :
		var refId = "R01P01_01";
		representation.setProperties(_, {
			"C01P02": refId,
			"C01P02_REF": {}
		});
		//Save the instance
		var response = representation.save(_);

		//Read the newly created object :
		var data = representation.read(_, id);
		//Check the object:
		strictEqual(data.C01P01, id, "C01P01=" + id);
		strictEqual(data.C01P02, refId, "C01P02=" + refId);
		//!strictEqual(data.C01P02.$properties.C01P01, true, "$properties.C01P02=" + data.C01P02.$properties.C01P01);

		//Create a working copy:
		representation.update(_, id);
		//Modify the reference
		refId = "R01P01_02";
		representation.setProperties(_, {
			"C01P02": refId,
			"C01P02_REF": {}
		});
		var urlLoc = x3Helper.x3Url("$workingCopies(%27" + representation.trackingId + "%27)/AQCP01/DESCRIPTION/$localize");
		/*dbg*/ //ok(true, "urlLoc: " + urlLoc);
		var localize = x3Helper.get(_, _getCookie(_), urlLoc, 200);
		for (var value in localize.$values) {
			localize.$values[value].$value = localize.$values[value].$code + " " + id;
		}
		/*dbg*/
		ok(true, "localize:" + JSON.stringify(localize));
		x3Helper.put(_, _getCookie(_), urlLoc, localize);

		//Save the instance
		response = representation.save(_);
		//Read the object :
		data = representation.read(_, id);
		//Check the object:
		strictEqual(data.C01P01, id, "C01P01=" + id);
		strictEqual(data.C01P02, refId, "C01P02=" + refId);

		//re-read the entity and check translations :
		representation.update(_, id);
		// The tracking changed !
		urlLoc = x3Helper.x3Url("$workingCopies(%27" + representation.trackingId + "%27)/AQCP01/DESCRIPTION/$localize");
		localize = x3Helper.get(_, _getCookie(_), urlLoc, 200);
		for (var value in localize.$values) {
			strictEqual(localize.$values[value].$value, localize.$values[value].$code + " " + id, localize.$values[value].$code);
		}

		start();
	});


	asyncTest("AQCPROC01 - SAM 89053 (Unexpected end of session while editing an entity) :", function(_) {
		var id = "QUNIT_005";
		var property = "BEFORE";

		var representation = new Representation("AQCPROC01");
		representation.delete(_, id);
		representation.create(_);
		representation.setProperties(_, {
			"C01P01": id
		});
		representation.setProperties(_, {
			"PROPERTY": property
		});
		//set the reference :
		var refId = "R01P01_01";
		representation.setProperties(_, {
			"C01P02": refId,
			"C01P02_REF": {}
		});
		//Save the instance
		var response = representation.save(_);

		//Read the newly created object :
		var data = representation.read(_, id);
		//Check the object:
		strictEqual(data.C01P01, id, "C01P01=" + id);
		strictEqual(data.C01P02, refId, "C01P02=" + refId);
		strictEqual(data.PROPERTY, property, "PROPERTY=" + property);

		//Create a working copy:
		data = representation.update(_, id);

		var apsadx = new Representation("APSADX");
		var users = apsadx.query(_, "&where=(DOSSIER%20eq%20%27SUPERV%27)%20and%20(USER%20eq%20%27" + config.unit_test.QLF.user + "%27)&count=100");
		ok("$resources", "$resources" + JSON.stringify(users));
		ok("user", "CLIENT:" + users.$resources[0].CLIENT + " USER:" + users.$resources[0].USER + " LOGIN:" + users.$resources[0].LOGIN + " ID:" + users.$resources[0].ID);
		//Delete the session
		apsadx.delete(_, users.$resources[0].ID);

		property = "AFTER";
		representation.setProperties(_, {
			"PROPERTY": property
		}, null, 404);
		// 404 = working copy not found :
		// => send the full delta
		data.PROPERTY = property;
		ok(true, "data.PROPERTY after:" + data.PROPERTY);
		representation.update(_, id, data);

		//Save the instance
		response = representation.save(_);
		//Read the object :
		data = representation.read(_, id);
		//Check the object:
		strictEqual(data.C01P01, id, "C01P01=" + id);
		strictEqual(data.C01P02, refId, "C01P02=" + refId);
		strictEqual(data.PROPERTY, property, "PROPERTY=" + property);

		start();
	});

	asyncTest("AQCPROC01 - Create NOK (existing object)", function(_) {
		var id = "QUNIT_001";
		var refId = "R01P01_01";

		var representation = new Representation("AQCPROC01");
		representation.create(_);
		representation.setProperties(_, {
			"C01P01": id
		});
		representation.setProperties(_, {
			"C01P02": refId,
			"C01P02_REF": {}
		});
		// QUNIT_001 already exists :
		var response = representation.save(_, null, "error");
		start();
	});

	asyncTest("AQCPROC01 - Create NOK (mandatory field)", function(_) {
		var id = "QUNIT_003";
		var refId = "R01P01_01";

		var representation = new Representation("AQCPROC01");
		representation.create(_);
		var response = representation.save(_, null, "error");
		start();
	});

	asyncTest("AQCPROC01 - Create NOK (invalid reference)", function(_) {
		var id = "QUNIT_004";
		var refId = "R01P01_05";

		var representation = new Representation("AQCPROC01");
		representation.delete(_, id);
		representation.create(_);
		representation.setProperties(_, {
			"C01P01": id
		});
		representation.setProperties(_, {
			"C01P02": refId,
			"C01P02_REF": {}
		});
		var response = representation.save(_, "C01P02", "error");
		start();
	});

	asyncTest("AQCPROC01 - MOBILE $edit " + x3Helper.gitHubIssue(1440), function(_) {
		var id = "QUNIT_005";
		var refId = "R01P01_01";

		var representation = new Representation("AQCPROC01");
		representation.delete(_, id);
		representation.create(_);
		representation.setProperties(_, {
			"C01P01": id
		});
		representation.setProperties(_, {
			"C01P02": refId,
			"C01P02_REF": {}
		});
		var response = representation.save(_);

		var data = representation.edit(_, id);
		//Check the object:
		strictEqual(data.C01P01, id, "C01P01=" + id);
		strictEqual(data.C01P02, refId, "C01P02=" + refId);
		start();
	});

	asyncTest("AQCPROC01 - SAM 90758 " + x3Helper.gitHubIssue(1841), function(_) {
		var id = "SAM_90758";

		var representation = new Representation("AQCPROC01");
		//First create the record if it doesn't exist
		representation.create(_);
		representation.setProperties(_, {
			"C01P01": id,
			"C01P02": "R01P01_01",
			"C01P02_REF": {}
		});
		var response = representation.save(_, null, null, false);

		//Second : try to delete the record
		representation.delete(_, id);

		//re-read the object :
		/*dbg*/ //ok(true, "read " + id);
		var data = representation.read(_, id);
		//it exist!
		strictEqual(data.C01P01, id, "C01P01=" + id);
		start();
	});

}
/*******************************************************************************
 AQCPROC02
*******************************************************************************/

function testAQCPROC02() {
	asyncTest("AQCPROC02 - CRUD OK", function(_) {
		var id = "QUNIT_001";
		var refId1 = "R01P01_01";
		var refId2 = "R01P01_02";

		var representation = new Representation("AQCPROC02");
		representation.delete(_, id);
		representation.create(_);
		representation.setProperties(_, {
			"C02P01": id
		});
		representation.setProperties(_, {
			"C02P02": refId1,
			"C02P02_REF": {}
		});
		representation.setProperties(_, {
			"C02P03": refId2,
			"C02P02_REF": {}
		});
		var response = representation.save(_);

		var data = representation.read(_, id);
		strictEqual(data.C02P01, id, "C02P01=" + id);
		strictEqual(data.C02P02, refId1, "C02P02=" + refId1);
		strictEqual(data.C02P03, refId2, "C02P03=" + refId2);

		var representation2 = new Representation("AQCPROC02");
		representation2.update(_, id);
		refId1 = "R01P01_03";
		refId2 = "R01P01_04";
		representation2.setProperties(_, {
			"C02P02": refId1,
			"C02P02_REF": {}
		});
		representation2.setProperties(_, {
			"C02P03": refId2,
			"C02P02_REF": {}
		});
		response = representation2.save(_);
		data = representation2.read(_, id);
		strictEqual(data.C02P01, id, "C02P01=" + id);
		strictEqual(data.C02P02, refId1, "C02P02=" + refId1);
		strictEqual(data.C02P03, refId2, "C02P03=" + refId2);

		start();
	});

	asyncTest("AQCPROC02 - Create NOK (existing object)", function(_) {
		var id = "QUNIT_001";
		var refId1 = "R01P01_01";
		var refId2 = "R01P01_02";

		var representation = new Representation("AQCPROC02");
		representation.create(_);
		representation.setProperties(_, {
			"C02P01": id
		});
		representation.setProperties(_, {
			"C02P02": refId1,
			"C02P02_REF": {}
		});
		representation.setProperties(_, {
			"C02P03": refId2,
			"C02P02_REF": {}
		});
		var response = representation.save(_, null, "error");
		start();
	});

	asyncTest("AQCPROC02 - Create NOK (mandatory field 1)", function(_) {
		var id = "QUNIT_002";
		var refId1 = "R01P01_01";
		var refId2 = "R01P01_02";

		var representation = new Representation("AQCPROC02");
		representation.delete(_, id);
		representation.create(_);
		var response = representation.save(_, "C02P01");
		start();
	});

	asyncTest("AQCPROC02 - Create NOK (mandatory field 2)", function(_) {
		var id = "QUNIT_002";
		var refId1 = "R01P01_01";
		var refId2 = "R01P01_02";

		var representation = new Representation("AQCPROC02");
		representation.delete(_, id);
		representation.create(_);
		representation.setProperties(_, {
			"C02P01": id
		});
		var response = representation.save(_, "C02P02");
		start();
	});

	asyncTest("AQCPROC02 - Create NOK (invalid reference 1)", function(_) {
		var id = "QUNIT_003";
		var refId1 = "R01P01_05";
		var refId2 = "R01P01_02";

		var representation = new Representation("AQCPROC02");
		representation.delete(_, id);
		representation.create(_);
		representation.setProperties(_, {
			"C02P01": id
		});
		representation.setProperties(_, {
			"C02P02": refId1,
			"C02P02_REF": {}
		});
		representation.setProperties(_, {
			"C02P03": refId2,
			"C02P02_REF": {}
		});
		var response = representation.save(_, "C02P02");
		start();
	});

	asyncTest("AQCPROC02 - Create NOK (invalid reference 2", function(_) {
		var id = "QUNIT_003";
		var refId1 = "R01P01_01";
		var refId2 = "R01P01_05";

		var representation = new Representation("AQCPROC02");
		representation.delete(_, id);
		representation.create(_);
		representation.setProperties(_, {
			"C02P01": id
		});
		representation.setProperties(_, {
			"C02P02": refId1,
			"C02P02_REF": {}
		});
		representation.setProperties(_, {
			"C02P03": refId2,
			"C02P02_REF": {}
		});
		var response = representation.save(_, "C02P03");
		start();
	});
}

/*******************************************************************************
 AQCPROC03
*******************************************************************************/

function testAQCPROC03() {
	asyncTest("AQCPROC03 - Create OK (1 line)", function(_) {
		var id = "QUNIT_001";
		var refId = "R01P01_01";
		var lineId = 101;
		var uuid = helpers.uuid.generate();
		var data;

		var representation = new Representation("AQCPROC03");
		representation.delete(_, id);
		data = representation.create(_);
		/*dbg*/ //ok("create",JSON.stringify(data));
		representation.setProperties(_, {
			"C03P01": id
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 0,
				"$uuid": uuid
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 0,
				"$uuid": uuid,
				"C03P02": lineId
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 0,
				"$uuid": uuid,
				"C03P03": refId,
				"C03P03_REF": {
					"INTDES": "",
					"INTSHO": ""
				}
			}]
		});
		var response = representation.save(_);
		/*dbg*/
		//ok("save",JSON.stringify(data));

		data = representation.read(_, id);
		/*dbg*/
		//ok("save",JSON.stringify(data));

		strictEqual(data.AQCP03COL.length, 1, "AQCP03COL length=1");
		strictEqual(data.AQCP03COL[0].C03P02, lineId, "AQCP03COL[0].C03P02=" + lineId);
		strictEqual(data.AQCP03COL[0].C03P03, refId, "AQCP03COL[0].C03P03=" + refId);
		start();
	});

	asyncTest("AQCPROC03 - Create OK (2 lines)", function(_) {
		var id = "QUNIT_002";
		var data;

		var representation = new Representation("AQCPROC03");
		representation.delete(_, id);
		data = representation.create(_);
		/*dbg*/
		//!ok("create",JSON.stringify(data));
		representation.setProperties(_, {
			"C03P01": id
		});

		//First line : 
		var lineId = 101;
		var refId = "R01P01_01";
		var uuid = helpers.uuid.generate();
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 0,
				"$uuid": uuid
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 0,
				"$uuid": uuid,
				"C03P02": lineId
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 0,
				"$uuid": uuid,
				"C03P03": refId,
				"C03P03_REF": {
					"INTDES": "",
					"INTSHO": ""
				}
			}]
		});
		//Second line : 
		lineId = 102;
		refId = "R01P01_02";
		uuid = helpers.uuid.generate();
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 1,
				"$uuid": uuid
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 1,
				"$uuid": uuid,
				"C03P02": lineId
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 1,
				"$uuid": uuid,
				"C03P03": refId,
				"C03P03_REF": {
					"INTDES": "",
					"INTSHO": ""
				}
			}]
		});
		var response = representation.save(_);

		data = representation.read(_, id);
		/*dbg*/
		ok("save", JSON.stringify(data));

		strictEqual(data.AQCP03COL.length, 2, "AQCP03COL length=2");
		lineId = 101;
		refId = "R01P01_01";
		strictEqual(data.AQCP03COL[0].C03P02, lineId, "AQCP03COL[0].C03P02=" + lineId);
		strictEqual(data.AQCP03COL[0].C03P03, refId, "AQCP03COL[0].C03P03=" + refId);
		lineId = 102;
		refId = "R01P01_02";
		strictEqual(data.AQCP03COL[1].C03P02, lineId, "AQCP03COL[1].C03P02=" + lineId);
		strictEqual(data.AQCP03COL[1].C03P03, refId, "AQCP03COL[1].C03P03=" + refId);
		start();
	});

	asyncTest("AQCPROC03 - Create OK (4 lines)" + x3Helper.gitHubIssue(1350), function(_) {
		var id = "QUNIT_006";
		var data;

		var representation = new Representation("AQCPROC03");
		representation.delete(_, id);
		data = representation.create(_);
		representation.setProperties(_, {
			"C03P01": id
		});

		var col = [{
			"C03P02": 101,
			"C03P03": "R01P01_01",
			"$uuid": helpers.uuid.generate()
		}, {
			"C03P02": 102,
			"C03P03": "R01P01_02",
			"$uuid": helpers.uuid.generate()
		}, {
			"C03P02": 103,
			"C03P03": "R01P01_03",
			"$uuid": helpers.uuid.generate()
		}, {
			"C03P02": 104,
			"C03P03": "R01P01_04",
			"$uuid": helpers.uuid.generate()
		}];

		var i = 0;
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": i,
				"$uuid": col[i].$uuid,
				"C03P02": col[i].C03P02,
				"C03P03": col[i].C03P03,
				"C03P03_REF": {}
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": ++i,
				"$uuid": col[i].$uuid,
				"C03P02": col[i].C03P02,
				"C03P03": col[i].C03P03,
				"C03P03_REF": {}
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": ++i,
				"$uuid": col[i].$uuid,
				"C03P02": col[i].C03P02,
				"C03P03": col[i].C03P03,
				"C03P03_REF": {}
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": ++i,
				"$uuid": col[i].$uuid,
				"C03P02": col[i].C03P02,
				"C03P03": col[i].C03P03,
				"C03P03_REF": {}
			}]
		});

		var response = representation.save(_);

		data = representation.read(_, id);
		/*dbg*/
		ok("save", JSON.stringify(data));

		strictEqual(data.AQCP03COL.length, 4, "AQCP03COL length=4");
		i = 0;
		strictEqual(data.AQCP03COL[i].C03P02, col[i].C03P02, "AQCP03COL[" + i + "].C03P02=" + col[i].C03P02);
		strictEqual(data.AQCP03COL[i].C03P03, col[i].C03P03, "AQCP03COL[" + i + "].C03P03=" + col[i].C03P03);
		strictEqual(data.AQCP03COL[++i].C03P02, col[i].C03P02, "AQCP03COL[" + i + "].C03P02=" + col[i].C03P02);
		strictEqual(data.AQCP03COL[i].C03P03, col[i].C03P03, "AQCP03COL[" + i + "].C03P03=" + col[i].C03P03);
		strictEqual(data.AQCP03COL[++i].C03P02, col[i].C03P02, "AQCP03COL[" + i + "].C03P02=" + col[i].C03P02);
		strictEqual(data.AQCP03COL[i].C03P03, col[i].C03P03, "AQCP03COL[" + i + "].C03P03=" + col[i].C03P03);
		strictEqual(data.AQCP03COL[++i].C03P02, col[i].C03P02, "AQCP03COL[" + i + "].C03P02=" + col[i].C03P02);
		strictEqual(data.AQCP03COL[i].C03P03, col[i].C03P03, "AQCP03COL[" + i + "].C03P03=" + col[i].C03P03);
		start();
	});

	asyncTest("AQCPROC03 - CRUD OK (1 line)", function(_) {
		var id = "QUNIT_003";
		var refId = "R01P01_01";
		var lineId = 101;
		var uuid = helpers.uuid.generate();
		var data;

		var representation = new Representation("AQCPROC03");
		representation.delete(_, id);
		data = representation.create(_);
		/*dbg*/
		//!ok("create",JSON.stringify(data));
		representation.setProperties(_, {
			"C03P01": id
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 0,
				"$uuid": uuid
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 0,
				"$uuid": uuid,
				"C03P02": lineId
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 0,
				"$uuid": uuid,
				"C03P03": refId,
				"C03P03_REF": {}
			}]
		});
		var response = representation.save(_);

		data = representation.read(_, id);
		/*dbg*/
		ok("save", JSON.stringify(data));
		strictEqual(data.AQCP03COL.length, 1, "AQCP03COL length=1");
		strictEqual(data.AQCP03COL[0].C03P02, lineId, "AQCP03COL[0].C03P02=" + lineId);
		strictEqual(data.AQCP03COL[0].C03P03, refId, "AQCP03COL[0].C03P03=" + refId);

		var representation2 = new Representation("AQCPROC03");
		response = representation2.update(_, id);
		/*dbg*/
		ok("update", JSON.stringify(response));
		lineId = 102;
		refId = "R01P01_02";
		representation2.setProperties(_, {
			"AQCP03COL": [{
				"$index": 0,
				"$uuid": response.AQCP03COL[0].$uuid,
				"C03P02": lineId,
				"C03P03": refId,
				"C03P03_REF": {
					"INTDES": "",
					"INTSHO": ""
				}
			}]
		});
		response = representation2.save(_);
		/*dbg*/
		ok("save", JSON.stringify(response));
		data = representation2.read(_, id);
		/*dbg*/
		ok("data", JSON.stringify(data));
		strictEqual(data.AQCP03COL.length, 1, "AQCP03COL length=1");
		strictEqual(data.C03P01, id, "C03P01=" + id);
		strictEqual(data.AQCP03COL[0].C03P02, lineId, "AQCP03COL[0].C03P02=" + lineId);
		strictEqual(data.AQCP03COL[0].C03P03, refId, "AQCP03COL[0].C03P03=" + refId);

		start();
	});

	asyncTest("AQCPROC03 - CRUD OK (2 lines)", function(_) {
		var id = "QUNIT_004";
		var data;

		var representation = new Representation("AQCPROC03");
		representation.delete(_, id);
		data = representation.create(_);
		/*dbg*/
		//!ok("create",JSON.stringify(data));
		representation.setProperties(_, {
			"C03P01": id
		});

		// First line
		var lineId = 101;
		var refId = "R01P01_01";
		var uuid = helpers.uuid.generate();
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 0,
				"$uuid": uuid
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 0,
				"$uuid": uuid,
				"C03P02": lineId
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 0,
				"$uuid": uuid,
				"C03P03": refId,
				"C03P03_REF": {
					"INTDES": "",
					"INTSHO": ""
				}
			}]
		});
		// Second line
		lineId = 102;
		refId = "R01P01_02";
		uuid = helpers.uuid.generate();
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 1,
				"$uuid": uuid
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 1,
				"$uuid": uuid,
				"C03P02": lineId
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 1,
				"$uuid": uuid,
				"C03P03": refId,
				"C03P03_REF": {
					"INTDES": "",
					"INTSHO": ""
				}
			}]
		});
		var response = representation.save(_);

		data = representation.read(_, id);
		/*dbg*/
		//ok("save",JSON.stringify(data));
		strictEqual(data.AQCP03COL.length, 2, "AQCP03COL length=2");
		// Check the first line
		lineId = 101;
		refId = "R01P01_01";
		strictEqual(data.AQCP03COL[0].C03P02, lineId, "AQCP03COL[0].C03P02=" + lineId);
		strictEqual(data.AQCP03COL[0].C03P03, refId, "AQCP03COL[0].C03P03=" + refId);
		// Check the second line
		lineId = 102;
		refId = "R01P01_02";
		strictEqual(data.AQCP03COL[1].C03P02, lineId, "AQCP03COL[1].C03P02=" + lineId);
		strictEqual(data.AQCP03COL[1].C03P03, refId, "AQCP03COL[1].C03P03=" + refId);

		var representation2 = new Representation("AQCPROC03");
		response = representation2.update(_, id);
		/*dbg*/
		ok("update", JSON.stringify(response));
		//Modify the first line
		lineId = 103;
		refId = "R01P01_03";
		representation2.setProperties(_, {
			"AQCP03COL": [{
				"$index": 0,
				"$uuid": response.AQCP03COL[0].$uuid,
				"C03P02": lineId,
				"C03P03": refId,
				"C03P03_REF": {
					"INTDES": "",
					"INTSHO": ""
				}
			}]
		});
		//Modify the second line
		lineId = 104;
		refId = "R01P01_04";
		representation2.setProperties(_, {
			"AQCP03COL": [{
				"$index": 1,
				"$uuid": response.AQCP03COL[1].$uuid,
				"C03P02": lineId,
				"C03P03": refId,
				"C03P03_REF": {
					"INTDES": "",
					"INTSHO": ""
				}
			}]
		});
		response = representation2.save(_);

		data = representation2.read(_, id);
		/*dbg*/
		//ok("save",JSON.stringify(data)); 
		// Check the first line
		strictEqual(data.AQCP03COL.length, 2, "AQCP03COL length=2");
		lineId = 103;
		refId = "R01P01_03";
		strictEqual(data.AQCP03COL[0].C03P02, lineId, "AQCP03COL[0].C03P02=" + lineId);
		strictEqual(data.AQCP03COL[0].C03P03, refId, "AQCP03COL[0].C03P03=" + refId);
		// Check the second line
		lineId = 104;
		refId = "R01P01_04";
		strictEqual(data.AQCP03COL[1].C03P02, lineId, "AQCP03COL[1].C03P02=" + lineId);
		strictEqual(data.AQCP03COL[1].C03P03, refId, "AQCP03COL[1].C03P03=" + refId);

		start();
	});

	asyncTest("AQCPROC03 - DelLine OK  (2 lines)", function(_) {
		var id = "QUNIT_005";
		var data;

		var representation = new Representation("AQCPROC03");
		/*dbg*/
		//ok(true,"delete:"+id);
		representation.delete(_, id);
		data = representation.create(_);
		/*dbg*/
		//ok(true,"create:"+JSON.stringify(data));
		representation.setProperties(_, {
			"C03P01": id
		});

		// First line
		var lineId = 101;
		var refId = "R01P01_01";
		var uuid = helpers.uuid.generate();
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 0,
				"$uuid": uuid
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 0,
				"$uuid": uuid,
				"C03P02": lineId
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 0,
				"$uuid": uuid,
				"C03P03": refId,
				"C03P03_REF": {}
			}]
		});
		// Second line
		lineId = 102;
		refId = "R01P01_02";
		uuid = helpers.uuid.generate();
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 1,
				"$uuid": uuid
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 1,
				"$uuid": uuid,
				"C03P02": lineId
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 1,
				"$uuid": uuid,
				"C03P03": refId,
				"C03P03_REF": {}
			}]
		});
		// Third line
		lineId = 103;
		refId = "R01P01_03";
		uuid = helpers.uuid.generate();
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 2,
				"$uuid": uuid
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 2,
				"$uuid": uuid,
				"C03P02": lineId
			}]
		});
		representation.setProperties(_, {
			"AQCP03COL": [{
				"$index": 2,
				"$uuid": uuid,
				"C03P03": refId,
				"C03P03_REF": {}
			}]
		});
		var response = representation.save(_);

		data = representation.read(_, id);
		/*dbg*/
		//ok("save",JSON.stringify(data));
		strictEqual(data.AQCP03COL.length, 3, "AQCP03COL length=3");

		// Check the first line
		lineId = 101;
		refId = "R01P01_01";
		strictEqual(data.AQCP03COL[0].C03P02, lineId, "AQCP03COL[0].C03P02=" + lineId);
		strictEqual(data.AQCP03COL[0].C03P03, refId, "AQCP03COL[0].C03P03=" + refId);
		// Check the second line
		lineId = 102;
		refId = "R01P01_02";
		strictEqual(data.AQCP03COL[1].C03P02, lineId, "AQCP03COL[1].C03P02=" + lineId);
		strictEqual(data.AQCP03COL[1].C03P03, refId, "AQCP03COL[1].C03P03=" + refId);
		// Check the third line
		lineId = 103;
		refId = "R01P01_03";
		strictEqual(data.AQCP03COL[2].C03P02, lineId, "AQCP03COL[1].C03P02=" + lineId);
		strictEqual(data.AQCP03COL[2].C03P03, refId, "AQCP03COL[1].C03P03=" + refId);

		var representation2 = new Representation("AQCPROC03");
		response = representation2.update(_, id);
		/*dbg*/
		ok("update", JSON.stringify(response));
		//Modify the first line
		// Delete the seconde line
		representation2.setProperties(_, {
			"AQCP03COL": [{
				"$index": 1,
				"$isDeleted": true,
				"$uuid": response.AQCP03COL[1].$uuid
			}]
		});
		response = representation2.save(_);

		data = representation2.read(_, id);
		strictEqual(data.AQCP03COL.length, 2, "AQCP03COL length=2");
		/*dbg*/
		//ok("save",JSON.stringify(data)); 
		// Check the first line
		lineId = 101;
		refId = "R01P01_01";
		strictEqual(data.AQCP03COL[0].C03P02, lineId, "AQCP03COL[0].C03P02=" + lineId);
		strictEqual(data.AQCP03COL[0].C03P03, refId, "AQCP03COL[0].C03P03=" + refId);
		// Check the second line
		lineId = 103;
		refId = "R01P01_03";
		strictEqual(data.AQCP03COL[1].C03P02, lineId, "AQCP03COL[1].C03P02=" + lineId);
		strictEqual(data.AQCP03COL[1].C03P03, refId, "AQCP03COL[1].C03P03=" + refId);

		start();
	});
}

/*******************************************************************************
 AQCPROC04
*******************************************************************************/

function testAQCPROC04() {
	asyncTest("AQCPROC04 - Create OK (1 line)", function(_) {
		var id = "QUNIT_001";
		var uuid = helpers.uuid.generate();
		var data;

		var representation = new Representation("AQCPROC04");
		representation.delete(_, id);
		data = representation.create(_);
		/*dbg*/
		//!ok("create",JSON.stringify(data));
		representation.setProperties(_, {
			"C04P01": id
		});
		var refId = "R01P01_01";
		representation.setProperties(_, {
			"AQCP04COL": [{
				"REP_R01P01": refId
			}]
		});
		var response = representation.save(_);

		data = representation.read(_, id);
		/*dbg*/
		ok("save", JSON.stringify(data));
		strictEqual(data.AQCP04COL.length, 1, "AQCP04COL length=1");
		strictEqual(data.AQCP04COL[0].REP_R01P01, refId, "AQCP04COL[0].REP_R01P01=" + refId);
		start();
	});

	asyncTest("AQCPROC04 - Create OK (2 lines)", function(_) {
		var id = "QUNIT_002";
		var uuid = helpers.uuid.generate();
		var data;

		var representation = new Representation("AQCPROC04");
		representation.delete(_, id);
		data = representation.create(_);
		/*dbg*/
		//!ok("create",JSON.stringify(data));
		representation.setProperties(_, {
			"C04P01": id
		});
		var refId1 = "R01P01_01";
		var refId2 = "R01P01_02";
		representation.setProperties(_, {
			"AQCP04COL": [{
				"REP_R01P01": refId1
			}, {
				"REP_R01P01": refId2
			}]
		});
		var response = representation.save(_);

		data = representation.read(_, id);
		/*dbg*/
		//ok("save",JSON.stringify(data));
		strictEqual(data.AQCP04COL.length, 2, "AQCP04COL length=2");
		strictEqual(data.AQCP04COL[0].REP_R01P01, refId1, "AQCP04COL[0].REP_R01P01=" + refId1);
		strictEqual(data.AQCP04COL[1].REP_R01P01, refId2, "AQCP04COL[1].REP_R01P01=" + refId2);
		start();
	});

	asyncTest("AQCPROC04 - CRUD OK (1 line)", function(_) {
		var id = "QUNIT_003";
		var uuid = helpers.uuid.generate();
		var data;

		var representation = new Representation("AQCPROC04");
		representation.delete(_, id);
		data = representation.create(_);
		/*dbg*/
		//!ok("create",JSON.stringify(data));
		representation.setProperties(_, {
			"C04P01": id
		});
		var refId = "R01P01_01";
		representation.setProperties(_, {
			"AQCP04COL": [{
				"REP_R01P01": refId
			}]
		});
		var response = representation.save(_);

		data = representation.read(_, id);
		/*dbg*/
		//ok("save",JSON.stringify(data));
		strictEqual(data.AQCP04COL.length, 1, "AQCP04COL length=1");
		strictEqual(data.AQCP04COL[0].REP_R01P01, refId, "AQCP04COL[0].REP_R01P01=" + refId);

		var representation2 = new Representation("AQCPROC04");
		response = representation2.update(_, id);
		ok(true, JSON.stringify(response));

		refId = "R01P01_02";
		representation2.setProperties(_, {
			"AQCP04COL": [{
				"$uuid": response.AQCP04COL[0].$uuid,
				"REP_R01P01": refId
			}]
		});
		var response = representation2.save(_);

		data = representation2.read(_, id);
		/*dbg*/
		strictEqual(data.AQCP04COL.length, 1, "AQCP04COL length=1");
		strictEqual(data.AQCP04COL[0].REP_R01P01, refId, "AQCP04COL[0].REP_R01P01=" + refId);

		start();
	});

	asyncTest("AQCPROC04 - CRUD OK (2 lines)", function(_) {
		var id = "QUNIT_004";
		var uuid = helpers.uuid.generate();
		var data;

		var representation = new Representation("AQCPROC04");
		representation.delete(_, id);
		data = representation.create(_);
		/*dbg*/
		//!ok("create",JSON.stringify(data));
		representation.setProperties(_, {
			"C04P01": id
		});
		var refId1 = "R01P01_01";
		var refId2 = "R01P01_02";
		representation.setProperties(_, {
			"AQCP04COL": [{
				"REP_R01P01": refId1
			}, {
				"REP_R01P01": refId2
			}]
		});
		var response = representation.save(_);

		data = representation.read(_, id);
		/*dbg*/
		//ok("save",JSON.stringify(data));
		strictEqual(data.AQCP04COL.length, 2, "AQCP04COL length=2");
		strictEqual(data.AQCP04COL[0].REP_R01P01, refId1, "AQCP04COL[0].REP_R01P01=" + refId1);
		strictEqual(data.AQCP04COL[1].REP_R01P01, refId2, "AQCP04COL[1].REP_R01P01=" + refId2);

		var representation2 = new Representation("AQCPROC04");
		response = representation2.update(_, id);
		refId1 = "R01P01_03";
		refId2 = "R01P01_04";
		representation2.setProperties(_, {
			"AQCP04COL": [{
				"REP_R01P01": refId1
			}, {
				"REP_R01P01": refId2
			}]
		});
		var response = representation2.save(_);

		data = representation2.read(_, id);
		/*dbg*/
		//ok("save",JSON.stringify(data));
		strictEqual(data.AQCP04COL.length, 2, "AQCP04COL length=2");
		strictEqual(data.AQCP04COL[0].REP_R01P01, refId1, "AQCP04COL[0].REP_R01P01=" + refId1);
		strictEqual(data.AQCP04COL[1].REP_R01P01, refId2, "AQCP04COL[1].REP_R01P01=" + refId2);
		start();
	});
}

/*******************************************************************************
 AQCPROC05
*******************************************************************************/

function testAQCPROC05() {
	asyncTest("AQCPROC05 - Create OK (1 line)", function(_) {
		var id = "QUNIT_001";
		var refId = "R01P01_01";
		var uuid = helpers.uuid.generate();
		var data;

		var representation = new Representation("AQCPROC05");
		representation.delete(_, id);
		data = representation.create(_);
		/*dbg*/
		//!ok("create",JSON.stringify(data));
		representation.setProperties(_, {
			"C05P01": id
		});
		representation.setProperties(_, {
			"AQCP05COL": [{
				"$index": 0,
				"$uuid": uuid
			}]
		});
		representation.setProperties(_, {
			"AQCP05COL": [{
				"$index": 0,
				"$uuid": uuid,
				"C05P03": refId,
				"C05P03_REF": {}
			}]
		});
		var response = representation.save(_);

		data = representation.read(_, id);
		/*dbg*/
		//ok("save",JSON.stringify(data));

		strictEqual(data.AQCP05COL.length, 1, "AQCP05COL length=1");
		strictEqual(data.AQCP05COL[0].C05P03, refId, "AQCP05COL[0].C05P03=" + refId);
		start();
	});

	asyncTest("AQCPROC05 - Create OK (2 lines)", function(_) {
		var id = "QUNIT_002";
		var data;

		var representation = new Representation("AQCPROC05");
		representation.delete(_, id);
		data = representation.create(_);
		/*dbg*/
		//!ok("create",JSON.stringify(data));
		representation.setProperties(_, {
			"C05P01": id
		});

		//First line : 
		var refId = "R01P01_01";
		var uuid = helpers.uuid.generate();
		representation.setProperties(_, {
			"AQCP05COL": [{
				"$index": 0,
				"$uuid": uuid
			}]
		});
		representation.setProperties(_, {
			"AQCP05COL": [{
				"$index": 0,
				"$uuid": uuid,
				"C05P03": refId,
				"C05P03_REF": {}
			}]
		});
		//Second line : 
		refId = "R01P01_02";
		uuid = helpers.uuid.generate();
		representation.setProperties(_, {
			"AQCP05COL": [{
				"$index": 1,
				"$uuid": uuid
			}]
		});
		representation.setProperties(_, {
			"AQCP05COL": [{
				"$index": 1,
				"$uuid": uuid,
				"C05P03": refId,
				"C05P03_REF": {}
			}]
		});
		var response = representation.save(_);

		data = representation.read(_, id);
		/*dbg*/
		ok("save", JSON.stringify(data));

		strictEqual(data.AQCP05COL.length, 2, "AQCP05COL length=2");
		refId = "R01P01_01";
		strictEqual(data.AQCP05COL[0].C05P03, refId, "AQCP05COL[0].C05P03=" + refId);
		refId = "R01P01_02";
		strictEqual(data.AQCP05COL[1].C05P03, refId, "AQCP05COL[1].C05P03=" + refId);
		start();
	});

	asyncTest("AQCPROC05 - CRUD OK (1 line)", function(_) {
		var id = "QUNIT_003";
		var refId = "R01P01_01";
		var uuid = helpers.uuid.generate();
		var data;

		var representation = new Representation("AQCPROC05");
		representation.delete(_, id);
		data = representation.create(_);
		/*dbg*/
		//!ok("create",JSON.stringify(data));
		representation.setProperties(_, {
			"C05P01": id
		});
		representation.setProperties(_, {
			"AQCP05COL": [{
				"$index": 0,
				"$uuid": uuid
			}]
		});
		representation.setProperties(_, {
			"AQCP05COL": [{
				"$index": 0,
				"$uuid": uuid,
				"C05P03": refId,
				"C05P03_REF": {}
			}]
		});
		var response = representation.save(_);

		data = representation.read(_, id);
		/*dbg*/
		//ok("save",JSON.stringify(data));
		strictEqual(data.AQCP05COL.length, 1, "AQCP05COL length=1");
		strictEqual(data.AQCP05COL[0].C05P03, refId, "AQCP05COL[0].C05P03=" + refId);

		var representation2 = new Representation("AQCPROC05");
		response = representation2.update(_, id);
		/*dbg*/
		ok("update", JSON.stringify(response));
		refId = "R01P01_02";
		representation2.setProperties(_, {
			"AQCP05COL": [{
				"$index": 0,
				"$uuid": response.AQCP05COL[0].$uuid,
				"C05P03": refId,
				"C05P03_REF": {}
			}]
		});
		response = representation2.save(_);
		data = representation2.read(_, id);
		/*dbg*/
		//ok("save",JSON.stringify(data)); 
		strictEqual(data.AQCP05COL.length, 1, "AQCP05COL length=1");
		strictEqual(data.C05P01, id, "C05P01=" + id);
		strictEqual(data.AQCP05COL[0].C05P03, refId, "AQCP05COL[0].C05P03=" + refId);

		start();
	});

	asyncTest("AQCPROC05 - CRUD OK (2 lines)", function(_) {
		var id = "QUNIT_004";
		var data;

		var representation = new Representation("AQCPROC05");
		representation.delete(_, id);
		data = representation.create(_);
		/*dbg*/
		//!ok("create",JSON.stringify(data));
		representation.setProperties(_, {
			"C05P01": id
		});

		// First line
		var refId = "R01P01_01";
		var uuid = helpers.uuid.generate();
		representation.setProperties(_, {
			"AQCP05COL": [{
				"$index": 0,
				"$uuid": uuid
			}]
		});
		representation.setProperties(_, {
			"AQCP05COL": [{
				"$index": 0,
				"$uuid": uuid,
				"C05P03": refId,
				"C05P03_REF": {}
			}]
		});
		// Second line
		refId = "R01P01_02";
		uuid = helpers.uuid.generate();
		representation.setProperties(_, {
			"AQCP05COL": [{
				"$index": 1,
				"$uuid": uuid
			}]
		});
		representation.setProperties(_, {
			"AQCP05COL": [{
				"$index": 1,
				"$uuid": uuid,
				"C05P03": refId,
				"C05P03_REF": {}
			}]
		});
		var response = representation.save(_);

		data = representation.read(_, id);
		/*dbg*/
		//ok("save",JSON.stringify(data));
		strictEqual(data.AQCP05COL.length, 2, "AQCP05COL length=2");
		// Check the first line
		refId = "R01P01_01";
		strictEqual(data.AQCP05COL[0].C05P03, refId, "AQCP05COL[0].C05P03=" + refId);
		// Check the second line
		refId = "R01P01_02";
		strictEqual(data.AQCP05COL[1].C05P03, refId, "AQCP05COL[1].C05P03=" + refId);

		var representation2 = new Representation("AQCPROC05");
		response = representation2.update(_, id);
		/*dbg*/
		ok("update", JSON.stringify(response));
		//Modify the first line
		refId = "R01P01_03";
		representation2.setProperties(_, {
			"AQCP05COL": [{
				"$index": 0,
				"$uuid": response.AQCP05COL[0].$uuid,
				"C05P03": refId,
				"C05P03_REF": {}
			}]
		});
		//Modify the second line
		refId = "R01P01_04";
		representation2.setProperties(_, {
			"AQCP05COL": [{
				"$index": 1,
				"$uuid": response.AQCP05COL[1].$uuid,
				"C05P03": refId,
				"C05P03_REF": {}
			}]
		});
		response = representation2.save(_);

		data = representation2.read(_, id);
		/*dbg*/
		//ok("save",JSON.stringify(data)); 
		// Check the first line
		strictEqual(data.AQCP05COL.length, 2, "AQCP05COL length=2");
		refId = "R01P01_03";
		strictEqual(data.AQCP05COL[0].C05P03, refId, "AQCP05COL[0].C05P03=" + refId);
		// Check the second line
		refId = "R01P01_04";
		strictEqual(data.AQCP05COL[1].C05P03, refId, "AQCP05COL[1].C05P03=" + refId);

		start();
	});
}

/*******************************************************************************
 AQCPROR02
*******************************************************************************/

function testAQCPROR02() {
	asyncTest("AQCPROR02 - Create OK", function(_) {
		function create(_, id1, id2) {
			var id = id1 + "~" + id2;
			var representation = new Representation("AQCPROR02");
			representation.delete(_, id);
			representation.create(_);
			representation.setProperties(_, {
				"R02P01": id1
			});
			representation.setProperties(_, {
				"R02P02": id2
			});
			representation.setProperties(_, {
				"INTDES": "INTDES " + id2
			});
			representation.setProperties(_, {
				"INTSHO": "INTSHO " + id2
			});
			var response = representation.save(_);
		}

		function read(_, id1, id2) {
			var id = id1 + "~" + id2;
			var representation = new Representation("AQCPROR02");
			var data = representation.read(_, id);
			strictEqual(data.R02P01, id1, "R02P01=" + id1);
			strictEqual(data.R02P02, id2, "R02P02=" + id2);
			strictEqual(data.INTDES, "INTDES " + id2, "INTDES=" + id2);
			strictEqual(data.INTSHO, "INTSHO " + id2, "INTSHO=" + id2);
		}

		create(_, "R02P01_01", 1);
		create(_, "R02P01_02", 2);
		create(_, "R02P01_03", 3);
		create(_, "R02P01_04", 4);

		read(_, "R02P01_01", 1);
		read(_, "R02P01_02", 2);
		read(_, "R02P01_03", 3);
		read(_, "R02P01_04", 4);
		start();
	});
}

/*******************************************************************************
 AQCPROC06
*******************************************************************************/

function testAQCPROC06() {
	asyncTest("AQCPROC06 - Create OK" + x3Helper.gitHubIssue(1093), function(_) {
		var id = "QUNIT_001";
		var refIdP1 = "R02P01_01";
		var refIdP2 = 1;

		var representation = new Representation("AQCPROC06");
		representation.delete(_, id);
		representation.create(_);
		representation.setProperties(_, {
			"C06P01": id
		});
		representation.setProperties(_, {
			"C06P02": refIdP1,
			"C06P02_REF": {},
			"C06P03": refIdP2
		});
		var response = representation.save(_);

		//Read the newly created object :
		var data = representation.read(_, id);
		//Check the object:
		strictEqual(data.C06P01, id, "C06P01=" + id);
		strictEqual(data.C06P02, refIdP1, "C06P02=" + refIdP1);
		strictEqual(data.C06P03, refIdP2, "C06P03=" + refIdP2);
		//Issue #1093 ($title & $description)
		strictEqual(data.C06P02_REF.$title, "INTSHO " + refIdP2, "$title=" + "INTSHO " + refIdP2);
		strictEqual(data.C06P02_REF.$description, "INTDES " + refIdP2, "$description=" + "INTDES " + refIdP2);

		start();
	});

	asyncTest("AQCPROC06 - Create NOK (invalid reference 1)", function(_) {
		var id = "QUNIT_002";
		var refIdP1 = "R02P01_xx";
		var refIdP2 = 1;

		var representation = new Representation("AQCPROC06");
		representation.delete(_, id);
		representation.create(_);
		representation.setProperties(_, {
			"C06P01": id
		});
		representation.setProperties(_, {
			"C06P02": refIdP1,
			"C06P02_REF": {},
			"C06P03": refIdP2
		});
		var response = representation.save(_, "C06P02", "error");
		start();
	});

	asyncTest("AQCPROC06 - Create NOK (invalid reference 2)", function(_) {
		var id = "QUNIT_003";
		var refIdP1 = "R02P01_01";
		var refIdP2 = 1000;

		var representation = new Representation("AQCPROC06");
		representation.delete(_, id);
		representation.create(_);
		representation.setProperties(_, {
			"C06P01": id
		});
		representation.setProperties(_, {
			"C06P02": refIdP1,
			"C06P02_REF": {},
			"C06P03": refIdP2
		});
		var response = representation.save(_, "C06P02", "error");
		start();
	});

	asyncTest("AQCPROC06 - CRUD OK", function(_) {
		var id = "QUNIT_004";
		var refIdP1 = "R02P01_01";
		var refIdP2 = 1;

		var representation = new Representation("AQCPROC06");
		representation.delete(_, id);
		representation.create(_);
		representation.setProperties(_, {
			"C06P01": id
		});
		representation.setProperties(_, {
			"C06P02": refIdP1,
			"C06P02_REF": {},
			"C06P03": refIdP2
		});
		var response = representation.save(_);

		//Read the newly created object :
		var data = representation.read(_, id);
		//Check the object:
		strictEqual(data.C06P01, id, "C06P01=" + id);
		strictEqual(data.C06P02, refIdP1, "C06P02=" + refIdP1);
		strictEqual(data.C06P03, refIdP2, "C06P03=" + refIdP2);

		var representation2 = new Representation("AQCPROC06");
		representation2.update(_, id);
		refIdP1 = "R02P01_02";
		refIdP2 = 2;
		representation2.setProperties(_, {
			"C06P02": refIdP1,
			"C06P02_REF": {},
			"C06P03": refIdP2
		});
		var response = representation2.save(_);
		//Read the object :
		data = representation2.read(_, id);
		//Check the object:
		strictEqual(data.C06P01, id, "C06P01=" + id);
		strictEqual(data.C06P02, refIdP1, "C06P02=" + refIdP1);
		strictEqual(data.C06P03, refIdP2, "C06P03=" + refIdP2);
		//Issue #1093 ($title & $description)
		strictEqual(data.C06P02_REF.$title, "INTSHO " + refIdP2, "$title=" + "INTSHO " + refIdP2);
		strictEqual(data.C06P02_REF.$description, "INTDES " + refIdP2, "$title=" + "INTDES " + refIdP2);

		start();
	});
}
/*******************************************************************************
 AQCPROC07 : 1x1 Classe
*******************************************************************************/

function testAQCPROC07() {
	asyncTest("AQCPROC07 - Create OK", function(_) {
		var id = "QUNIT_001";
		var id2 = id + "T1C1";
		var id3 = id + "T2C2";

		var representation = new Representation("AQCPROC07");
		representation.delete(_, id);
		representation.create(_);
		representation.setProperties(_, {
			"TBL1COL1": id
		});
		representation.setProperties(_, {
			"TBL1COL2": id2
		});
		//! link managed by X3 : representation.setProperties(_,{"TBL2COL1":id}); 
		representation.setProperties(_, {
			"TBL2COL2": id3
		});
		var response = representation.save(_);

		//Read the newly created object :
		var data = representation.read(_, id);

		//Check the object:
		strictEqual(data.TBL1COL1, id, "TBL1COL1=" + id);
		strictEqual(data.TBL1COL2, id2, "TBL1COL2=" + id2);
		strictEqual(data.TBL2COL2, id3, "TBL2COL2=" + id3);

		start();
	});

	/* test � supprimer lorsque Christophe aura mis en place la gestion des cl�s :
	 */
	asyncTest("AQCPROC07 - Create OK (! with link 1x1 managed!)", function(_) {
		var id = "QUNIT_x01";
		var id2 = id + "T1C1";
		var id3 = id + "T2C2";

		var representation = new Representation("AQCPROC07");
		representation.delete(_, id);
		representation.create(_);
		representation.setProperties(_, {
			"TBL1COL1": id
		});
		representation.setProperties(_, {
			"TBL1COL2": id2
		});
		representation.setProperties(_, {
			"TBL2COL1": id
		});
		representation.setProperties(_, {
			"TBL2COL2": id3
		});
		var response = representation.save(_);

		//Read the newly created object :
		var data = representation.read(_, id);

		//Check the object:
		strictEqual(data.TBL1COL1, id, "TBL1COL1=" + id);
		strictEqual(data.TBL1COL2, id2, "TBL1COL2=" + id2);
		strictEqual(data.TBL2COL2, id3, "TBL2COL2=" + id3);

		start();
	});

	/* test � supprimer lorsque Christophe aura mis en place la gestion des cl�s :
	 */
	asyncTest("AQCPROC07 - CRUD OK (! with link 1x1 managed!)", function(_) {
		var id = "QUNIT_x02";
		var id2 = id + "T1C1";
		var id3 = id + "T2C2";

		var representation = new Representation("AQCPROC07");
		representation.delete(_, id);
		representation.create(_);
		representation.setProperties(_, {
			"TBL1COL1": id
		});
		representation.setProperties(_, {
			"TBL1COL2": id2
		});
		representation.setProperties(_, {
			"TBL2COL1": id
		});
		representation.setProperties(_, {
			"TBL2COL2": id3
		});
		var response = representation.save(_);

		//Read the newly created object :
		var data = representation.read(_, id);

		//Check the object:
		strictEqual(data.TBL1COL1, id, "TBL1COL1=" + id);
		strictEqual(data.TBL1COL2, id2, "TBL1COL2=" + id2);
		strictEqual(data.TBL2COL2, id3, "TBL2COL2=" + id3);

		var representation2 = new Representation("AQCPROC07");
		representation2.update(_, id);
		id2 = id + "T1C1u";
		id3 = id + "T2C2u";
		representation2.setProperties(_, {
			"TBL1COL1": id
		});
		representation2.setProperties(_, {
			"TBL1COL2": id2
		});
		representation2.setProperties(_, {
			"TBL2COL1": id
		});
		representation2.setProperties(_, {
			"TBL2COL2": id3
		});
		response = representation2.save(_);

		data = representation2.read(_, id);
		//Check the object:
		strictEqual(data.TBL1COL1, id, "TBL1COL1=" + id);
		strictEqual(data.TBL1COL2, id2, "TBL1COL2=" + id2);
		strictEqual(data.TBL2COL2, id3, "TBL2COL2=" + id3);

		id = "QUNIT_x01";
		id2 = id + "T1C1";
		id3 = id + "T2C2";

		data = representation2.read(_, id);
		//Check the object:
		strictEqual(data.TBL1COL1, id, "TBL1COL1=" + id);
		strictEqual(data.TBL1COL2, id2, "TBL1COL2=" + id2);
		strictEqual(data.TBL2COL2, id3, "TBL2COL2=" + id3);

		id = "QUNIT_x01";
		id2 = id + "T1C1";
		id3 = id + "T2C2";

		start();
	});
}

/*******************************************************************************
 AQCPROC08 : Controls in collections
*******************************************************************************/

function testAQCPROC08() {
	asyncTest("AQCPROC08 - Create OK", function(_) {
		var id = "QUNIT_001";

		var representation = new Representation("AQCPROC08");
		representation.delete(_, id);
		representation.create(_);
		var col = [{
			"C08P02": "0",
			"$uuid": helpers.uuid.generate()
		}, {
			"C08P02": "01234",
			"$uuid": helpers.uuid.generate()
		}, {
			"C08P02": "0123456789",
			"$uuid": helpers.uuid.generate()
		}];

		representation.setProperties(_, {
			"C08P01": id
		});
		representation.setProperties(_, {
			"AQCP08COL": [{
				"$index": 0,
				"$uuid": col[0].$uuid,
				"C08P02": col[0].C08P02
			}, {
				"$index": 1,
				"$uuid": col[1].$uuid,
				"C08P02": col[1].C08P02
			}, {
				"$index": 2,
				"$uuid": col[2].$uuid,
				"C08P02": col[2].C08P02
			}]
		});
		var response = representation.save(_);

		//Read the newly created object :
		var data = representation.read(_, id);

		//Check the object:
		strictEqual(data.AQCP08COL.length, 3, "AQCP08COL length=3");
		strictEqual(data.AQCP08COL[0], col[0].C08P02, "AQCP08COL[0].C08P02=" + col[0].C08P02);
		strictEqual(data.AQCP08COL[1], col[1].C08P02, "AQCP08COL[1].C08P02=" + col[1].C08P02);
		strictEqual(data.AQCP08COL[2], col[2].C08P02, "AQCP08COL[2].C08P02=" + col[2].C08P02);

		start();
	});

	asyncTest("AQCPROC08 - Create NOK" + x3Helper.gitHubIssue(1309), function(_) {
		var id = "QUNIT_002";

		var representation = new Representation("AQCPROC08");
		representation.delete(_, id);
		representation.create(_);
		var col = [{
			"C08P02": "01234567890123456789",
			"$uuid": helpers.uuid.generate()
		}];

		representation.setProperties(_, {
			"C08P01": id
		});
		representation.setProperties(_, {
			"AQCP08COL": [{
				"$index": 0,
				"$uuid": col[0].$uuid,
				"C08P02": col[0].C08P02
			}]
		});
		var data = representation.save(_);

		//Check the object:
		strictEqual(data.AQCP08COL.length, 1, "AQCP08COL length=1");
		strictEqual(data.AQCP08COL[0], "", "AQCP08COL[0].C08P02=''");
		start();
	});
}

/*******************************************************************************
 AQCPROC09 : Representation containing a collection of references which key is 
 base on 2 properties
*******************************************************************************/

function testAQCPROC09() {
	asyncTest("AQCPROC09 - Create OK", function(_) {
		var id = "QUNIT_001";
		var refIdP1 = "R02P01_01";
		var refIdP2 = 1;

		var representation = new Representation("AQCPROC09");
		representation.delete(_, id);
		representation.create(_);
		representation.setProperties(_, {
			"C09P01": id
		});
		representation.setProperties(_, {
			"AQCP09COL": [{
				"$index": 0,
				"$uuid": helpers.uuid.generate(),
				"C09P02": refIdP1,
				"C09P03": refIdP2
			}]
		});
		var response = representation.save(_);

		//Read the newly created object :
		var data = representation.read(_, id);

		//Check the object:
		strictEqual(data.C09P01, id, "C09P01");
		strictEqual(data.AQCP09COL.length, 1, "AQCP09COL length=1");
		strictEqual(data.AQCP09COL[0].C09P02, refIdP1, "AQCP09COL[0].C09P02=" + refIdP1);
		strictEqual(data.AQCP09COL[0].C09P03, refIdP2, "AQCP09COL[0].C09P03=" + refIdP2);

		start();
	});
}

/*******************************************************************************
 AQCPROR03
*******************************************************************************/

function testAQCPROR03() {
	asyncTest("AQCPROR03 - Create OK", function(_) {
		function create(_, id1, num) {
			var id = id1;
			var representation = new Representation("AQCPROR03");
			representation.delete(_, id);
			representation.create(_);
			representation.setProperties(_, {
				"R03P01": id1
			});
			representation.setProperties(_, {
				"INTDES": "INTDES " + num
			});
			representation.setProperties(_, {
				"INTSHO": "INTSHO " + num
			});
			representation.setProperties(_, {
				"SYMBOL": "S" + num
			});
			var response = representation.save(_);
		}

		function read(_, id1, num) {
			var id = id1;
			var representation = new Representation("AQCPROR03");
			var data = representation.read(_, id);
			strictEqual(data.R03P01, id1, "R03P01=" + id1);
			strictEqual(data.INTDES, "INTDES " + num, "INTDES=" + num);
			strictEqual(data.INTSHO, "INTSHO " + num, "INTSHO=" + num);
			strictEqual(data.SYMBOL, "S" + num, "SYMBOL=" + num);
		}

		create(_, "R03P01_01", 1);
		create(_, "R03P01_02", 2);
		create(_, "R03P01_03", 3);
		create(_, "R03P01_04", 4);

		read(_, "R03P01_01", 1);
		read(_, "R03P01_02", 2);
		read(_, "R03P01_03", 3);
		read(_, "R03P01_04", 4);
		start();
	});
}

/*******************************************************************************
 AQCPROR04
*******************************************************************************/

function testAQCPROR04() {
	asyncTest("AQCPROR04 - setup", function(_) {
		function setId(r, num) {
			r.p1 = "QUNIT_1" + num;
			r.p2 = "QUNIT_2" + num;;
			r.id = r.p1 + "~" + r.p2;
		}

		function create(_, num) {
			var representation = new Representation("AQCPROR04");
			setId(representation, num);
			representation.delete(_, representation.id);
			representation.create(_);
			representation.setProperties(_, {
				"R04P01": representation.p1
			});
			representation.setProperties(_, {
				"R04P02": representation.p2
			});
			representation.setProperties(_, {
				"INTDES": "INTDES " + num
			});
			representation.setProperties(_, {
				"INTSHO": "INTSHO " + num
			});
			var response = representation.save(_);
		}

		function read(_, num) {
			var representation = new Representation("AQCPROR04");
			setId(representation, num);
			var data = representation.read(_, representation.id);
			strictEqual(data.R04P01, representation.p1, "R04P01=" + representation.p1);
			strictEqual(data.R04P02, representation.p2, "R04P02=" + representation.p2);
			strictEqual(data.INTDES, "INTDES " + num, "INTDES=" + num);
			strictEqual(data.INTSHO, "INTSHO " + num, "INTSHO=" + num);
		}

		create(_, 1);
		create(_, 2);
		create(_, 3);
		create(_, 4);

		read(_, 1);
		read(_, 2);
		read(_, 3);
		read(_, 4);
		start();
	});
}

/*******************************************************************************
 AQCPROC11 : 
*******************************************************************************/

function testAQCPROC11() {
	asyncTest("AQCPROC11 - Create OK " + x3Helper.gitHubIssue(1541), function(_) {
		var refIdP1 = "QUNIT_11";
		var refIdP2 = "QUNIT_21";
		var id = refIdP1 + "~" + refIdP2;

		var representation = new Representation("AQCPROC11");
		representation.delete(_, id);
		representation.create(_);
		representation.setProperties(_, {
			"C11P01": refIdP1,
			"C11P02": refIdP2,
			"C11P01_REF": {}
		});

		var response = representation.save(_);

		//Read the newly created object :
		var data = representation.read(_, id);

		//Check the object:
		strictEqual(data.C11P01, refIdP1, "C11P01");
		strictEqual(data.C11P02, refIdP2, "C11P02");
		start();
	});
}

/*******************************************************************************
 AQCPROC12 :  User story 87071/2
*******************************************************************************/

function testAQCPROC12() {

	asyncTest("AQCPROC12 (US 87071/2) - Create OK", function(_) {
		function setId(r, num) {
			r.id = "QUNIT_" + num;
		}

		function create(_, num) {
			var C12P02 = "R03P01_0" + num;
			var C12P03 = num * (100.1);
			var C12P02_SYMBOL = "S" + num;
			var representation = new Representation("AQCPROC12");
			setId(representation, num);
			representation.delete(_, representation.id);
			representation.create(_);

			representation.setProperties(_, {
				"C12P01": representation.id,
				"C12P02": C12P02,
				"C12P02_REF": {},
				"C12P03": C12P03
			});
			var response = representation.save(_);

			var data = representation.read(_, representation.id);
			//Check the object:
			strictEqual(data.C12P01, representation.id, "C11P01:" + representation.id);
			strictEqual(data.C12P02, C12P02, "C12P02:" + C12P02);
			strictEqual(data.C12P02_REF.$symbol, C12P02_SYMBOL, "$symbol:" + C12P02_SYMBOL);
			strictEqual(Math.round(100 * data.C12P03), Math.round(100 * C12P03), "C12P03:" + C12P03);
		}

		create(_, 1);
		create(_, 2);
		create(_, 3);
		create(_, 4);

		start();
	});

	asyncTest("AQCPROC12 - CRUD OK", function(_) {
		var id = "QUNIT_5";
		var C12P02 = "R03P01_01";
		var C12P03 = 100.1;
		var C12P02_SYMBOL = "S1";
		var representation = new Representation("AQCPROC12");
		representation.delete(_, id);
		representation.create(_);

		representation.setProperties(_, {
			"C12P01": id,
			"C12P02": C12P02,
			"C12P02_REF": {},
			"C12P03": C12P03
		});
		var response = representation.save(_);

		var data = representation.read(_, id);
		//Check the object:
		strictEqual(data.C12P01, id, "C11P01:" + id);
		strictEqual(data.C12P02, C12P02, "C12P02:" + C12P02);
		strictEqual(data.C12P02_REF.$symbol, C12P02_SYMBOL, "$symbol:" + C12P02_SYMBOL);
		strictEqual(Math.round(100 * data.C12P03), Math.round(100 * C12P03), "C12P03:" + C12P03);

		representation.update(_, id);
		C12P02 = "R03P01_02";
		C12P02_SYMBOL = "S2";
		representation.setProperties(_, {
			"C12P02": C12P02,
			"C12P02_REF": {}
		});
		var response = representation.save(_);

		var data = representation.read(_, id);
		//Check the object:
		strictEqual(data.C12P02, C12P02, "C12P02:" + C12P02);
		strictEqual(data.C12P02_REF.$symbol, C12P02_SYMBOL, "$symbol:" + C12P02_SYMBOL);
		strictEqual(Math.round(100 * data.C12P03), Math.round(100 * C12P03), "C12P03:" + C12P03);
		start();
	});

	asyncTest("AQCPROC12 - CRUD OK (empty symbol)", function(_) {
		var num = 5;
		var idRef = "R03P01_0" + num;
		var representation = new Representation("AQCPROR03");
		representation.delete(_, idRef);
		representation.create(_);
		representation.setProperties(_, {
			"R03P01": idRef
		});
		representation.setProperties(_, {
			"INTDES": "INTDES " + num
		});
		representation.setProperties(_, {
			"INTSHO": "INTSHO " + num
		});
		representation.setProperties(_, {
			"SYMBOL": ""
		});
		var response = representation.save(_);

		var id = "QUNIT_6";
		var C12P03 = 100.1;
		var representation2 = new Representation("AQCPROC12");
		representation2.delete(_, id);
		representation2.create(_);

		representation2.setProperties(_, {
			"C12P01": id,
			"C12P02": idRef,
			"C12P02_REF": {},
			"C12P03": C12P03
		});
		var response = representation2.save(_);

		var data = representation2.read(_, id);
		//Check the object:
		strictEqual(data.C12P01, id, "C11P01:" + id);
		strictEqual(data.C12P02, idRef, "C12P02:" + idRef);
		strictEqual(data.C12P02_REF.$symbol, "", "$symbol:");
		strictEqual(Math.round(100 * data.C12P03), Math.round(100 * C12P03), "C12P03:" + C12P03);
		start();
	});
}

/*******************************************************************************
 AQCPROC14 : 1x1 Classe
*******************************************************************************/

function testAQCPROC14() {
	asyncTest("AQCPROC14 - Create OK with 1 detail", function(_) {
		var id = "QUNIT_001_";
		var delta = {
			"TBL1COL1": id + "T1C1",
			"TBL1COL2": id + "T1C2",
			"AQCP14ATBL2": [{
				"$index": 0,
				"$uuid": helpers.uuid.generate(),
				"TBL2COL2": id + "T2C2",
				"TBL2COL3": id + "T2C3"
			}]
		};
		var representation = new Representation("AQCPROC14");
		representation.delete(_, delta.TBL1COL1);
		representation.create(_);
		representation.setProperties(_, delta);
		var response = representation.save(_);

		//Read the newly created object :
		var data = representation.read(_, delta.TBL1COL1);
		strictEqual(data.TBL1COL1, delta.TBL1COL1, "TBL1COL1");
		strictEqual(data.TBL1COL2, delta.TBL1COL2, "TBL1COL2");
		strictEqual(data.AQCP14ATBL2.length, 1, "AQCP14ATBL2 length=1");
		strictEqual(data.AQCP14ATBL2[0].TBL2COL2, delta.AQCP14ATBL2[0].TBL2COL2, "TBL2COL2");
		strictEqual(data.AQCP14ATBL2[0].TBL2COL3, delta.AQCP14ATBL2[0].TBL2COL3, "TBL2COL3");
		start();
	});

	asyncTest("AQCPROC14 - Create OK with 0 detail", function(_) {
		var id = "QUNIT_002_";
		var delta = {
			"TBL1COL1": id + "T1C1",
			"TBL1COL2": id + "T1C2"
		};

		var representation = new Representation("AQCPROC14");
		representation.delete(_, delta.TBL1COL1);
		representation.create(_);
		representation.setProperties(_, delta);
		var response = representation.save(_);

		//Read the newly created object :
		var data = representation.read(_, delta.TBL1COL1);
		strictEqual(data.TBL1COL1, delta.TBL1COL1, "TBL1COL1");
		strictEqual(data.TBL1COL2, delta.TBL1COL2, "TBL1COL2");
		ok(!("AQCP14ATBL2" in data), "AQCP14ATBL2 undefined");

		start();
	});
}

function testSAM95076() {
	asyncTest("AQCPROC01 - SAM 95076 " + x3Helper.gitHubIssue(1841), function(_) {
		var id = "SAM_90758";

		var representation = new Representation("AQCPROC01");
		//First create the record if it doesn't exist
		representation.create(_);
		representation.setProperties(_, {
			"C01P021": id,
			"C01P02": "R01P01_01",
			"C01P02_REF": {}
		});
		var response = representation.save(_, "C01P01");

		//re-read the object :
		var data = representation.summary(_, id);
		//it exist!
		strictEqual(data.C01P01, id, "C01P01=" + id);
		start();
	});
}


testAQCPROR01();
testAQCPROC01();
testAQCPROC02();
testAQCPROC03();
testAQCPROC04();
testAQCPROC05();
testAQCPROR02();
testAQCPROC06();
testAQCPROC07();
testAQCPROC08();
testAQCPROC09();
testAQCPROR03();
testAQCPROC12();
testAQCPROR04();
testAQCPROC11();
testAQCPROC14();
testSAM95076();


//******************************************************************************

asyncTest("stop server", 0, function(_) {
	x3Helper.stopServer();
	start();
});
asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});
// JavaScript Document