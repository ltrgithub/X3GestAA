"use strict";

var sys = require("util");
var ez = require('ez-streams');
var helpers = require('syracuse-core/lib/helpers');
var types = require('syracuse-core/lib/types/allTypes');
var mongodb = require('streamline-mongodb');

var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_admin_test");

var dataModel = require("syracuse-orm/lib/dataModel");

var cookie = "";
var applicationId;
var applicationX3Id;
var requestCount = 0;

helpers.pageFileStorage = false;

//
var config = require('config'); // must be first syracuse require
//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;
config.unit_test = config.unit_test || {};
config.unit_test.QLF = config.unit_test.QLF || {
	dataset: "x3_unit_test",
	user: "QLF",
	folder: "SUPERV",
	serverHost: "AWS-X3-DEVSUP",
	x3SolutionName: "SOLSUPV6",
	serverPort: 17000,
};

var port = 3004;
var baseUrl = "http://localhost:" + port;
var contractUrl = "/sdata/syracuse/collaboration/mongodb_admin_test/";
var acceptLanguage = "fr-fr";

var tracer; // = console.log;

var _data = {};
var _session = {
	setData: function(name, value) {
		var old = _data[name];
		if (old == value) return;

		if (old && old.onDestroy) {
			old.onDestroy();
		}
		if (typeof value == "undefined") delete _data[name];
		else _data[name] = value;
	},
	getData: function(name) {
		return _data[name];
	},
	_reset: function() {
		_data = {};
	}
};

function hasErrors(body) {
	var hasErr = body.$diagnoses && body.$diagnoses.some(function(diag) {
		return diag.severity == "error";
	});
	if (!hasErr) {
		for (var key in body) {
			if (typeof body[key] === "object") hasErr = hasErr || hasErrors(body[key]);
		};
	}
	//
	return hasErr;
}

function onlyInfo(diags) {
	return adminTestFixtures.onlyInfo(diags);
}

function _createRequest(method, url, data, set) {
	var baseUrl = "http://localhost/sdata/syracuse/collaboration/mongodb_admin_test";
	return {
		session: _session,
		method: method,
		url: (set ? url : (baseUrl + url)).replace(/'/g, "%27"),
		context: {
			parseBody: function(_) {
				return data;
			}
		},
		headers: {
			cookie: "fake cookie"
		}
	};
}

function _resetSession() {
	_data = {};
}

exports.x3Url = function(url) {
	var x3Url = baseUrl + "/sdata/x3/erp/" + config.unit_test.QLF.dataset + "/" + (url || "");
	return x3Url;
};

exports.gitHubIssue = function(issue) {
	return ' (<a href="https://github.com/Sage-ERP-X3/Syracuse/issues/' + issue + '">Issue #' + issue + ' </a>)';
};

exports.get = function(_, cookie, url, statusCode, facet) {
	var type = facet || "generic.$details";
	var response = ez.devices.http.client({
		method: "get",
		url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/" + url,
		headers: {
			cookie: cookie,
			"accept-language": acceptLanguage,
			accept: "application/json;vnd.sage=syracuse"
		}
	}).end().response(_);
	if (typeof(statusCode) != 'undefined') {
		strictEqual(response.statusCode, statusCode, "GET:" + url);
	}
	var resources = JSON.parse(response.readAll(_));

	if (1) { //config.unit_test.QLF && config.unit_test.QLF.logPath)
		var logpath = config.unit_test.QLF.logPath;
		var now = new Date();
		//var logname = logpath + "\\x3Helper-GET.log";
		//var logname = "C:\\_syracuse\\syracuse\\log\\x3Helper-GET.log";
		var logname = "x3Helper-GET.log";
		var buffer = null;
		var fs = require('fs');
		var stream = fs.createWriteStream(logname, {
			flags: 'a'
		});
		stream.write(JSON.stringify({
			url: url,
			resources: resources
		}, null, "\t"));
		stream.write(",\n");
	}
	return resources;
};

exports.post = function(_, cookie, url, data, statusCode, returnFullResponse) {
	var response = ez.devices.http.client({
		method: "post",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"Accept": "application/json;vnd.sage=syracuse",
			"content-type": "application/json",
			"accept-language": acceptLanguage,
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	if (typeof(statusCode) != 'undefined') {
		strictEqual(response.statusCode, statusCode, "POST:" + url);
	}
	if (returnFullResponse) return {
		headers: response.headers,
		body: JSON.parse(response.readAll(_))
	};
	else return JSON.parse(response.readAll(_));
};

exports.delete = function(_, cookie, url, data, statusCode, returnFullResponse) {
	var response = ez.devices.http.client({
		method: "post",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"Accept": "application/json;vnd.sage=syracuse",
			"content-type": "application/json",
			"accept-language": acceptLanguage,
			"X-HTTP-Method-Override": "DELETE",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	if (typeof(statusCode) != 'undefined') {
		strictEqual(response.statusCode, statusCode, "DELETE:" + url);
	}
	if (returnFullResponse) return {
		headers: response.headers,
		body: JSON.parse(response.readAll(_))
	};
	else return JSON.parse(response.readAll(_));
};

exports.put = function(_, cookie, url, data, statusCode, returnFullResponse) {
	var response = ez.devices.http.client({
		method: "put",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"referer": url,
			"Accept": "application/json;vnd.sage=syracuse",
			"content-type": "application/json",
			"accept-language": acceptLanguage,
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	if (typeof(statusCode) != 'undefined') {
		/*dbg*/
		//ok(true, "DBG received statusCode:" + response.statusCode);
		/*dbg*/
		//ok(true, "DBG expected statusCode:" + statusCode);
		strictEqual(response.statusCode, statusCode, "PUT:" + url);
	}
	if (returnFullResponse) return {
		headers: response.headers,
		body: JSON.parse(response.readAll(_))
	};
	else {
		try {
			var body = response.readAll(_);
			return JSON.parse(body);
		} catch (e) {
			ok(false, "PUT " + url + " :\ndata:\n" + JSON.stringify(data) + "\nparse failed on:" + body);
		}
	}
};

exports.del = function(_, cookie, url, statusCode) {
	var response = ez.devices.http.client({
		method: "delete",
		url: baseUrl + "/sdata/syracuse/collaboration/mongodb_admin_test/" + url,
		headers: {
			cookie: cookie
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "delete OK");
	return JSON.parse(response.readAll(_));
};

exports.getCookie = function(_, login, pass) {
	var response = new ez.devices.http.client({
		url: baseUrl + "/sdata",
		user: login || "admin",
		password: pass || "admin",
		headers: {
			"accept-language": "fr-fr",
			"accept": "application/json"
		}
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	tracer && tracer("Get cookie headers (46): " + sys.inspect(response.headers));
	acceptLanguage = response.headers["content-language"] || acceptLanguage;
	return response.headers["set-cookie"];
};

function _initDatabase(_) {
	var server = new mongodb.Server(endPoint.datasets["mongodb_admin_test"].hostname, endPoint.datasets["mongodb_admin_test"].port, {});
	var db = adminTestFixtures.newMongoDb(config.collaboration.dataset, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	return true;
}
exports.initDatabase = _initDatabase;

function _initialize(_) {
	require('syracuse-main/lib/syracuse').startServers(_, port);
};
exports.initialize = _initialize;

function _createObjects(_) {
	requestCount++;
	var body;
	cookie = this.getCookie(_);
	// check init script
	var userNames = this.get(_, cookie, "users").$resources.map(function(item) {
		return item.login;
	});
	ok(userNames.indexOf("admin") >= 0, "Admin ok");
	ok(userNames.indexOf("guest") >= 0, "Guest ok");
	ok(userNames.indexOf("import") >= 0, "Import ok");
	ok(userNames.length == 3, "Users count ok");

	// get main application
	var app = adminHelper.getApplication(_, "syracuse", "collaboration");
	ok(app != null, "Application fetch ok");
	applicationId = app.$uuid;
	var app = adminHelper.getApplication(_, "x3", "erp");
	ok(app != null, "Application X3 fetch ok");
	applicationX3Id = app.$uuid;
	// create an x3 endpoint, by step like in edit form
	// x3server    ("serverHost": "172.28.16.106",)
	body = this.post(_, cookie, "x3servers", {
		description: "X3 Unit Test Server",
		serverHost: config.unit_test.QLF.serverHost,
		serverPort: config.unit_test.QLF.serverPort,
		serverTimeout: 60000,
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	}, 201);
	var srvrId = body.$uuid;
	// get super admin groups
	body = this.get(_, cookie, "groups(description eq 'Super administrators')?representation=group.$details", 200);
	var grpId = body.$uuid;
	strictEqual(body.description, "Super administrators", "Got group Super ok");
	body = this.post(_, cookie, "endPoints", {
		description: "X3 Unit Test Endpoint",
		applicationRef: {
			$uuid: applicationX3Id
		},
		dataset: config.unit_test.QLF.dataset,
		enableSearch: false,
		protocol: "syracuse",
		databaseDriver: "mongodb",
		databaseHost: "localhost",
		databasePort: config.collaboration.port || 27017,
		x3SolutionName: config.unit_test.QLF.x3SolutionName,
		x3server: {
			$uuid: srvrId
		},
		x3ServerFolder: config.unit_test.QLF.folder,
		groups: [{
			$uuid: grpId
		}]
	}, 201);
	//!ok(!hasErrors(body), "No errors ok");
	// should be able to save now
	tracer && tracer("create x3 endpoint body" + sys.inspect(body, null, 4));
	var epId = body.$uuid;
	// try to get it
	body = this.get(_, cookie, "endPoints('" + body.$uuid + "')", 200);
	strictEqual(body.$uuid, epId, "Saved endPoint get ok");

	// put a X3 login for user
	body = this.put(_, cookie, "users(login eq 'admin')?representation=user.$edit", {
		endpoints: [{
			$index: 0,
			login: config.unit_test.QLF.user,
			endpoint: {
				$uuid: epId
			}
		}]
	}, 200);
	body = this.get(_, cookie, "users(login eq 'admin')?representation=user.$details", 200);
	tracer && tracer("user return body" + sys.inspect(body, null, 4));
	strictEqual(body.endpoints[0].login, config.unit_test.QLF.user, "Endpoint added to user");

	return true;
}
exports.createObjects = _createObjects;

exports.startServer = function(_) {
	ok(_initDatabase(_), "syracuse mongodb database initialized");

	_initialize(_, function(_) {
		ok(true, "initialized");
		ok(_createObjects(_), "createObjects");
	});
	return true;
};

exports.stopServer = function() {
	require('syracuse-main/lib/syracuse').server.close();

};

exports._getModel = function() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_admin_test");
};

exports._createDataContext = function() {
	return new DataContext(_getModel(), true);
};