"use strict";

var helpers = require('syracuse-core/lib/helpers');
var httpClient = require("syracuse-httpclient/lib/httpClient");
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var locale = require("syracuse-core/lib/locale");

var MapCookies = {};

function findCookies(cookies, key) {
	var cook = cookies.split(';');
	for (var i = 0; i < cook.length; i++) {
		var idx = cook[i].indexOf(key + "=");
		if (idx !== -1) {
			return cook[i].substring(key.length + 1 + idx);
		}
	}
	return;
}

exports.proxy = function(_, context, boServerPath, config) {
	function manageCookie(headers) {
		var cookies = headers['set-cookie'];
		if (cookies) {
			if (Array.isArray(cookies)) {
				cookies = cookies.join(';');
			}
			MapCookies[syrSessionId] = MapCookies[syrSessionId] ? MapCookies[syrSessionId] + "; " + cookies : cookies;
		}
	}


	var boServer = context.endpoint.x3server(_).boServer(_);
	if (boServer) {
		var baseUrl = boServer.getBoServerBaseUrl(_, false);
		var request = context.request;

		var reqCookies = request.headers && request.headers.cookie;

		var syrSessionId;
		if (reqCookies) {
			syrSessionId = findCookies(reqCookies, "syracuse.sid");
		}
		if (!MapCookies[syrSessionId]) {
			if (Array.isArray(reqCookies)) {
				reqCookies = reqCookies.join(';');
			}
			MapCookies[syrSessionId] = reqCookies;
		}

		if (MapCookies[syrSessionId]) {
			request.headers.cookie = MapCookies[syrSessionId];
		}

		var options = {
			url: baseUrl + boServerPath + (context.rawQuery ? ("?" + context.rawQuery) : ""),
			method: context.method,
			headers: request.headers
		};
		var clientReq = httpClient.httpRequest(_, options);
		var buf;
		while (buf = request.read(_)) clientReq.write(_, buf, "binary");
		var response = clientReq.end().response(_);
		response.setEncoding("binary");

		manageCookie(response.headers);

		context.response.writeHead(response.statusCode, response.headers);
		while (buf = response.read(_)) context.response.write(_, buf, "binary");
		context.response.end();
	}
};

exports.boRestClient = helpers.defineClass(function(_, profile, context) {
	this.context = context;
	this.profile = profile;
	this.x3server = this.context.endpoint.x3server(_);


	this.token = null;
	this.fail = null;
	this.variable = null; // variable associate to bo
	this.lastLogonWithAdmin = null;
}, null, {


	/*
	 * return null if login has failed else the token value
	 */
	logon: function(_, withAdmin) {

		this.boServer = getBoServer(_, this.x3server);
		this.bohost = this.boServer.host(_);
		this.boport = this.boServer.portRest(_);

		if (withAdmin && this.lastLogonWithAdmin === false) {
			if (this.token)
				this.logoff(_);
			this.lastLogonWithAdmin = true;
		} else if (!withAdmin && this.lastLogonWithAdmin === true) {
			if (this.token)
				this.logoff(_);
			this.lastLogonWithAdmin = false;
		}

		if (!withAdmin && !this.profile) {
			this.profile = getBoProfile(_, this.x3server, this.context);
		}

		if (withAdmin) {
			this.bosec = "secEnterprise";
			this.bouser = "administrator";
			var passwd = this.boServer.adminPassword(_);
			if (passwd == null) {
				return "";
			}
			this.bopwd = passwd;
		} else {
			this.bosec = this.profile.security(_);
			this.bouser = this.profile.user(_);
			this.bopwd = this.profile.password(_);

		}

		this.syracuseSession = findCookies(this.context.request.headers.cookie, "syracuse.sid");


		if (!this.token) {
			var header = {
				"Content-Type": "application/json",
				"Accept": "application/json"
			};
			var body = {
				"userName": this.bouser,
				"password": this.bopwd,
				"auth": this.bosec
			};
			var opt = {
				method: "POST",
				url: "http://" + this.bohost + ":" + this.boport + "/biprws/logon/long",
				headers: header
			};
			var request = httpClient.httpRequest(_, opt);
			var response = request.end(JSON.stringify(body)).response(_);
			if (response.statusCode === 200) {
				this.token = response.headers["x-sap-logontoken"].replace("\"", "").replace("\"", "");

			} else {
				this.fail = response.statusCode + ": (url:" + opt.url + ") body " + response.readAll(_);

				this.token = null;
			}

		}
		if (!this.token) {
			throw new Error("logon failed " + (this.fail ? "(" + this.fail + ")" : ""));
		}
		return this.token;
	},
	/*
	 * return true if logoff is successful else false
	 */
	logoff: function(_) {
		var header = {
			"Accept": "application/json",
			"x-sap-logontoken": this.token
		};
		var opt = {
			method: "POST",
			url: "http://" + this.bohost + ":" + this.boport + "/biprws/logoff",
			headers: header
		};

		try {
			if (this.syracuseSession && MapCookies[this.syracuseSession]) delete MapCookies[this.syracuseSession];
			if (this.token) {
				var request = httpClient.httpRequest(_, opt);
				var response = request.end().response(_);
				if (response.statusCode === 200) {
					this.token = null;
					this.variable = null;
					return true;
				} else {
					this.token = null;
					this.variable = null;
					return false;
				}
			}
		} catch (e) {
			console.log("error logoff");
			throw new Error("can't logoff on bo server " + e.stack);
		}
	}

});

var getBoServer = function(_, x3server) {
	var boserver = x3server.boServer(_);

	return boserver;
};

var getBoProfile = function(_, x3server, context) {

	var profile;

	var boserver = getBoServer(_, x3server);

	var roleUuid = context.getSelectedRoleId(_);
	if (!roleUuid) throw new Error(locale.format(module, "noRole"));

	var db = adminHelper.getCollaborationOrm(_);
	var entity = db.getEntity(_, "role");
	var role = db.fetchInstance(_, entity, {
		sdataWhere: "$uuid eq '" + roleUuid + "'"
	});

	var profiles = role.boProfiles(_).toArray(_);
	for (var i in profiles) {
		var inst = profiles[i];
		if (inst.boServer(_).$uuid === boserver.$uuid) {
			profile = inst.profile(_);
		}
	}
	if (!profile) throw new Error(locale.format(module, "noBoProfile", role.description(_), x3server.description(_)));
	return profile;
};