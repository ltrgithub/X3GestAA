"use strict";

var helpers = require('syracuse-core/lib/helpers');
var httpClient = require("syracuse-httpclient/lib/httpClient");
var proxy = require('syracuse-main/lib/proxy');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var locale = require("syracuse-core/lib/locale");
var nodeconfig = require('syracuse-main/lib/nodeconfig');
var util = require('util');
var trace = nodeconfig.config && nodeconfig.config.bo && nodeconfig.config.bo.proxy && nodeconfig.config.bo.proxy.trace;

var proxies = {};

exports.forward = function(_, context, path) {
	var sid = proxy.getCookie(context.request.headers.cookie, "syracuse.sid");
	var p = proxies[sid];
	return p.forward(_, context, path);
};

exports.boRestClient = helpers.defineClass(function(_, profile, server, context) {
	this.context = context;
	this.profile = profile;
	this.boServer = server;

	this.token = null;
	this.fail = null;
	this.variable = null; // variable associate to bo
	this.lastLogonWithAdmin = null;

	this.syracuseSession = this.context.request.session.id;

}, null, {
	init: function(_) {
		// CvgClient case
		if (!this.boServer && !this.profile) {
			this.x3server = this.x3server || this.context.endpoint.x3server(_);
			this.boServer = this.boServer || getBoServer(_, this.x3server);
		}

		// Profile test case
		if (!this.boServer)
			this.boServer = this.profile.boServer(_);

		this.bohost = this.bohost || this.boServer.host(_);
		this.boport = this.boport || this.boServer.portRest(_);

		var baseUrl = this.boServer.getBoServerBaseUrl(_, false);
		this.proxy = new proxy.Proxy(_, baseUrl, trace);
		proxies[this.syracuseSession] = this.proxy;
	},
	/*
	 * return null if login has failed else the token value
	 */
	logon: function(_, withAdmin) {
		this.init(_);

		if (withAdmin && this.lastLogonWithAdmin === false) {
			if (this.token)
				this.logoff(_);
			this.lastLogonWithAdmin = true;
		} else if (!withAdmin && this.lastLogonWithAdmin === true) {
			if (this.token)
				this.logoff(_);
			this.lastLogonWithAdmin = false;
		}

		if (!withAdmin && !this.profile) {
			this.profile = getBoProfile(_, this.x3server, this.context);
		}

		if (withAdmin) {
			this.bosec = "secEnterprise";
			this.bouser = "administrator";
			var passwd = this.boServer.adminPassword(_);
			if (passwd == null) {
				return "";
			}
			this.bopwd = passwd;
		} else {
			this.bosec = this.profile.security(_);
			this.bouser = this.profile.user(_);
			this.bopwd = this.profile.password(_);

		}

		if (!this.token) {
			var header = {
				"Content-Type": "application/json",
				"Accept": "application/json"
			};
			var body = {
				"userName": this.bouser,
				"password": this.bopwd || "",
				"auth": this.bosec
			};
			var opt = {
				method: "POST",
				url: "http://" + this.bohost + ":" + this.boport + "/biprws/logon/long",
				headers: header
			};
			var request = httpClient.httpRequest(_, opt);
			var response = request.end(JSON.stringify(body)).response(_);
			if (response.statusCode === 200) {
				this.token = response.headers["x-sap-logontoken"].replace("\"", "").replace("\"", "");

			} else {
				this.fail = response.statusCode + ": (url:" + opt.url + ") body " + response.readAll(_);

				this.token = null;
			}

		}
		if (!this.token) {
			throw new Error("Logon failed " + (this.fail ? "(" + this.fail + ")" : ""));
		}
		return this.token;
	},
	/*
	 * return true if logoff is successful else false
	 */
	logoff: function(_) {
		this.init(_);
		var header = {
			"Accept": "application/json",
			"x-sap-logontoken": this.token
		};
		var opt = {
			method: "POST",
			url: "http://" + this.bohost + ":" + this.boport + "/biprws/logoff",
			headers: header
		};

		try {
			//if (this.syracuseSession && MapCookies[this.syracuseSession]) delete MapCookies[this.syracuseSession];
			if (this.token) {
				var request = httpClient.httpRequest(_, opt);
				var response = request.end().response(_);
				if (response.statusCode === 200) {
					this.token = null;
					this.variable = null;
					return true;
				} else {
					this.token = null;
					this.variable = null;
					return false;
				}
			}
		} catch (e) {
			throw new Error("Can't logoff on bo server.\n" + e.stack);
		}
	}

});

var getBoServer = function(_, x3server) {
	var boserver = x3server.boServer(_);
	if (!boserver) throw new Error(locale.format(module, "noBoServer", x3server.description(_)));
	return boserver;
};

var getBoProfile = function(_, x3server, context) {

	var profile;

	var boserver = getBoServer(_, x3server);

	var roleUuid = context.getSelectedRoleId(_);
	if (!roleUuid) throw new Error(locale.format(module, "noRole"));

	var db = adminHelper.getCollaborationOrm(_);
	var entity = db.getEntity(_, "role");
	var role = db.fetchInstance(_, entity, {
		sdataWhere: "$uuid eq '" + roleUuid + "'"
	});

	var profiles = role.boProfiles(_).toArray(_);
	for (var i in profiles) {
		var inst = profiles[i];
		if (inst.boServer(_).$uuid === boserver.$uuid) {
			profile = inst.profile(_);
		}
	}
	if (!profile) throw new Error(locale.format(module, "noBoProfile", role.description(_), x3server.description(_)));
	return profile;
};