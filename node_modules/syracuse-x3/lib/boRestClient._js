"use strict";

var helpers = require('@sage/syracuse-core').helpers;
var httpClient = require("@sage/syracuse-lib/src/http-client/httpClient");
var proxy = require('syracuse-main/lib/proxy');
var adminHelper = require("@sage/syracuse-lib/src/collaboration/helpers").AdminHelper;
var locale = require('streamline-locale');
var globals = require('streamline-runtime').globals;

var tracer = require('@sage/syracuse-core').getTracer("businessObjects");
var proxies = {};

exports.forward = function(_, context, path) {
	var sid = proxy.getCookie(context.request.headers.cookie, "syracuse.sid." + context.request.connection.localPort);
	if (!sid) throw new Error("No Syracuse session context found !");
	var p = proxies[sid];
	if (!p) {
		var baseUrl = getBoBaseUrl(_, context);
		p = proxies[sid] = new proxy.Proxy(_, baseUrl, {
			trace: tracer
		});
	}
	var addRespHeaders = {
		"x-frame-options": "SAMEORIGIN"
	};
	return p.forward(_, context, path, addRespHeaders);
};

exports.BoRestClient = helpers.defineClass(function(_, profile, server) {
	this.profile = profile;
	this.boServer = server;

	this.token = null;
	this.fail = null;
	this.variable = null; // variable associate to bo
	this.lastLogonWithAdmin = null;

}, null, {
	init: function(_) {
		this.syracuseSession = globals.context.request.session.id;
		this.userProfile = globals.context.session.getUserProfile(_);
		// CvgClient case
		if (!this.boServer) {
			if (!this.x3solution) {
				var selEp = this.userProfile.selectedEndpoint(_);
				if (selEp) {
					this.x3solution = selEp.x3solution(_);
				} else {
					throw new Error("Can't determine X3 solution with selected endpoint");
				}
			}
			this.boServer = this.boServer || getBoServer(_, this.x3solution);
		}

		// Profile test case
		if (!this.boServer)
			this.boServer = this.profile.boServer(_);

		this.ldapDirect = this.boServer.ldapDirect(_);
		this.bohost = this.bohost || this.boServer.host(_);
		this.boport = this.boport || this.boServer.portRest(_);

		var baseUrl = this.boServer.getBoServerBaseUrl(_, false);
		this.proxy = new proxy.Proxy(_, baseUrl, {
			trace: tracer
		});
		proxies[this.syracuseSession] = this.proxy;
	},
	/*
	 * return null if login has failed else the token value
	 */
	logon: function(_, withAdmin, forcedProfile) {
		this.init(_);

		if (withAdmin && this.lastLogonWithAdmin === false) {
			if (this.token)
				this.logoff(_);
			this.lastLogonWithAdmin = true;
		} else if (!withAdmin && this.lastLogonWithAdmin === true) {
			if (this.token)
				this.logoff(_);
			this.lastLogonWithAdmin = false;
		}

		// force connection with administrator and secEnterprise
		if (withAdmin) {
			tracer.info && tracer.info("authenticate with admin account");
			this.bosec = "secEnterprise";
			this.bouser = "administrator";
			var passwd = this.boServer.adminPassword(_) || "";
			this.bopwd = passwd;
		}
		// else if secLdap is prefered and user is authenticated with LDAP
		else if (this.ldapDirect && globals.context.session.getData("authType") === "ldap") {
			tracer.info && tracer.info("authenticate directly with LDAP connection");
			this.bosec = "secLdap";
			this.bouser = this.userProfile.user(_).authenticationName(_);
			var b64 = globals.context.session.authData.authorization.split(' ')[1];
			this.bopwd = new Buffer(b64, 'base64').toString('utf8').split(':')[1];
		}
		// else we have to use configured boProfile
		else {
			tracer.info && tracer.info("authenticate with boProfile");
			this.profile = forcedProfile || getBoProfile(_, this.x3solution, this.userProfile);
			this.bosec = this.profile.security(_);
			this.bouser = this.profile.user(_);
			this.bopwd = this.profile.password(_) || "";
		}

		if (!this.token) {
			var header = {
				"Content-Type": "application/json",
				"Accept": "application/json"
			};
			var body = {
				"userName": this.bouser,
				"password": this.bopwd || "",
				"auth": this.bosec
			};
			tracer.info && tracer.info("user :'" + this.bouser + "',security: '" + this.bosec + "'");
			//console.log("Auth payload: "+JSON.stringify(body,null,2));
			var opt = {
				method: "POST",
				url: "http://" + this.bohost + ":" + this.boport + "/biprws/logon/long",
				headers: header
			};

			var request = httpClient.httpRequest(_, opt);
			var response = request.end(JSON.stringify(body)).response(_);
			var res = response.readAll(_); // really important !!!
			//console.log("Auth res: "+JSON.stringify(res,null,2));
			if (response.statusCode === 200) {
				this.token = response.headers["x-sap-logontoken"].replace("\"", "").replace("\"", "");
				tracer.info && tracer.info("Authentication successful");
			} else {
				this.fail = response.statusCode + ": (url:" + opt.url + ") body " + res;
				tracer.error && tracer.error("Authentication failed: " + this.fail);
				this.token = null;
			}
		}
		if (!this.token) {
			tracer.error && tracer.error("BO logon failed on " + this.bohost + ":" + this.boport);
			throw new Error("Logon failed " + (this.fail ? "(" + this.fail + ")" : ""));
		}
		return this.token;
	},
	/*
	 * return true if logoff is successful else false
	 */
	logoff: function(_) {
		this.init(_);
		var header = {
			"Accept": "application/json",
			"x-sap-logontoken": this.token
		};
		var opt = {
			method: "POST",
			url: "http://" + this.bohost + ":" + this.boport + "/biprws/logoff",
			headers: header
		};

		try {
			var res;
			if (this.token) {
				var request = httpClient.httpRequest(_, opt);
				var response = request.end().response(_);
				response.readAll(_); // Really important !!!
				if (response.statusCode === 200) {
					this.token = null;
					this.variable = null;
					res = true;
				} else {
					this.token = null;
					this.variable = null;
					res = false;
				}
			}
			if (proxies[this.syracuseSession])
				delete proxies[this.syracuseSession];
			return res;
		} catch (e) {
			throw new Error("Can't logoff on bo server.\n" + e.safeStack);
		}
	}

});

var getBoBaseUrl = function(_, context) {
	var x3solution = context.endpoint.x3solution(_);
	var boServer = getBoServer(_, x3solution);
	return boServer.getBoServerBaseUrl(_, false);
};

var getBoServer = function(_, x3solution) {
	var boserver = x3solution.boServer(_);
	if (!boserver) throw new Error(locale.format(module, "noBoServer", x3solution.solutionName(_)));
	return boserver;
};

var getBoProfile = function(_, x3solution, userProfile) {

	var profiles, profile;

	var boserver = getBoServer(_, x3solution);


	// select boProfile firstly in user instance
	var user = userProfile.user(_);
	profiles = user.boProfiles(_).toArray(_);
	for (var i in profiles) {
		var inst = profiles[i];
		if (inst.boServer(_).$uuid === boserver.$uuid) {
			profile = inst;
			tracer.info && tracer.info("BO profile found on user");
			break;
		}
	}
	// if not found in user, search into role
	if (!profile) {
		var role = userProfile.selectedRole(_);
		if (!role) throw new Error(locale.format(module, "noRole"));

		profiles = role.boProfiles(_).toArray(_);
		for (var j in profiles) {
			var roleProfile = profiles[j];
			if (roleProfile.boServer(_).$uuid === boserver.$uuid) {
				profile = roleProfile.profile(_);
				tracer.info && tracer.info("BO profile found on role");
				break;
			}
		}
		if (!profile) throw new Error(locale.format(module, "noBoProfile", role.description(_), x3solution.solutionName(_)));

	}
	return profile;
};