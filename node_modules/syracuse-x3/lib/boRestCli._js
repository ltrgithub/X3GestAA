"use strict";

var helpers = require('syracuse-core/lib/helpers');
var httpClient = require("syracuse-httpclient/lib/httpClient");
var httpProxy = require("http-proxy/lib/node-http-proxy");
var streams = require("streamline/lib/streams/streams");
var http = require("http");


var MapProxys = {};


exports.proxy = function(_, context, boServerPath, config) {
	var baseUrl = context.endpoint.getBoServerBaseUrl(_, false);
	console.log("basrUrl " + baseUrl);
	var request = context.request;
	var params = Object.keys(context.parameters).map(function(key) {
		return key + "=" + encodeURIComponent(context.parameters[key]);
	}).join("&");
	var options = {
		url: baseUrl + "/" + boServerPath + (params ? ("?" + params) : ""),
		method: context.method,
		headers: request.headers
	};
	console.log(JSON.stringify(options));
	var clientReq = streams.httpRequest(options);
	var buf;
	while (buf = request.read(_)) clientReq.write(_, buf, "binary");
	var response = clientReq.end().response(_);
	response.setEncoding("binary");
	//
	context.response.writeHead(response.statusCode, response.headers);
	while (buf = response.read(_)) context.response.write(_, buf, "binary");
	context.response.end();


};


var boRestCli = exports.boRestCli = helpers.defineClass(function(server) {
	this.bosec = "secEnterprise";
	this.bouser = "administrator";
	this.bopwd = "Azerty1234!";
	this.boserv = "soexalid01";
	this.boport = "6405";
	this.solution = server;


	//
	// Create a regular http server and proxy its handler
	//
	/*console.log("x3server "+this.solution);
	var rout = {};
	rout["/"+this.solution] = "soexalid01:6405";

	var option = {
		pathnameOnly:true,
		router : rout
	};
	httpProxy.createServer(option).listen(6405);
	/*
	http.createServer(function (req, res) {
		res.writeHead(200, { 'Content-Type': 'text/plain' });
		res.write('request successfully proxied: ' + req.url +'\n' + JSON.stringify(req.headers, true, 2));
		res.end();
	}).listen(9000);*/

	this.token = null;
	this.fail = null;
	this.variable = null; // variable associate to bo
}, null, {
	/*
	 * return null if login has failed else the token value
	 */
	logon: function(_) {
		if (!this.token) {
			var header = {
				"Content-Type": "application/json",
				"Accept": "application/json"
			};
			var body = {
				"userName": this.bouser,
				"password": this.bopwd,
				"auth": this.bosec
			};
			var opt = {
				method: "POST",
				url: this.boserv + "/biprws/logon/long",
				headers: header
			};
			try {
				var request = httpClient.httpRequest(_, opt);
				request.write(_, JSON.stringify(body));
				var response = request.end().response(_);
				if (response.statusCode === 200) {
					this.token = response.headers["x-sap-logontoken"];
				} else {
					this.fail = response.statusCode + ": (url:" + opt.url + ") body " + response.readAll(_);
					this.token = null;
				}
			} catch (e) {
				throw new Error("can't logon on bo server " + e.stack);
			}
		}
		return this.token;
	},
	/*
	 * return true if logoff is successful else false
	 */
	logoff: function(_) {
		console.log("boClient logoff");
		var header = {
			"Accept": "application/json",
			"x-sap-logontoken": this.token
		};
		var opt = {
			method: "POST",
			url: this.boserv + "/biprws/logoff",
			headers: header
		};

		try {
			var request = httpClient.httpRequest(_, opt);
			var response = request.end().response(_);
			if (response.statusCode === 200) {
				this.token = null;
				this.variable = null;
				return true;
			} else {
				this.token = null;
				this.variable = null;
				return false;
			}
		} catch (e) {
			throw new Error("can't logoff on bo server " + e.stack);
		}
	}

});