"use strict";

var helpers = require('syracuse-core/lib/helpers');
var httpClient = require("syracuse-httpclient/lib/httpClient");

var MapCookies = {};

function findCookies(cookies, key) {
	var cook = cookies.split(';');
	for (var i = 0; i < cook.length; i++) {
		var idx = cook[i].indexOf(key + "=");
		if (idx !== -1) {
			return cook[i].substring(key.length + 1 + idx);
		}
	}
	return;
}


exports.proxy = function(_, context, boServerPath, config) {
	function manageCookie(headers) {
		var cookies = headers['set-cookie'];
		if (cookies) {
			if (Array.isArray(cookies)) {
				cookies = cookies.join(';');
			}
			MapCookies[syrSessionId] = MapCookies[syrSessionId] ? MapCookies[syrSessionId] + "; " + cookies : cookies;
		}
	}


	var baseUrl = context.endpoint.getBoServerBaseUrl(_, false);
	var request = context.request;

	var reqCookies = request.headers && request.headers.cookie;

	var syrSessionId;
	if (reqCookies) {
		syrSessionId = findCookies(reqCookies, "syracuse.sid");
	}
	if (!MapCookies[syrSessionId]) {
		if (Array.isArray(reqCookies)) {
			reqCookies = reqCookies.join(';');
		}
		MapCookies[syrSessionId] = reqCookies;
	}

	if (MapCookies[syrSessionId]) {
		request.headers.cookie = MapCookies[syrSessionId];
	}

	var options = {
		url: baseUrl + boServerPath + (context.rawQuery ? ("?" + context.rawQuery) : ""),
		method: context.method,
		headers: request.headers
	};
	var clientReq = httpClient.httpRequest(_, options);
	var buf;
	while (buf = request.read(_)) clientReq.write(_, buf, "binary");
	var response = clientReq.end().response(_);
	response.setEncoding("binary");

	manageCookie(response.headers);

	context.response.writeHead(response.statusCode, response.headers);
	while (buf = response.read(_)) context.response.write(_, buf, "binary");
	context.response.end();


};


exports.boRestCli = helpers.defineClass(function(_, context) {
	var endpoint = context.endpoint;
	this.bosec = "secEnterprise"; // default
	this.bouser = "Administrator"; // have to get this by user
	this.bopwd = "Azerty1234!"; // have to get this  by user 
	this.boserv = endpoint.getBoServer(_);
	this.boport = endpoint.getBoServerRestPort(_);

	console.log(JSON.stringify(context.request.headers.cookie, null, 2));
	this.syracuseSession = findCookies(context.request.headers.cookie, "syracuse.sid");

	this.token = null;
	this.fail = null;
	this.variable = null; // variable associate to bo
}, null, {
	/*
	 * return null if login has failed else the token value
	 */
	logon: function(_) {
		if (!this.token) {
			var header = {
				"Content-Type": "application/json",
				"Accept": "application/json"
			};
			var body = {
				"userName": this.bouser,
				"password": this.bopwd,
				"auth": this.bosec
			};
			var opt = {
				method: "POST",
				url: "http://" + this.boserv + ":" + this.boport + "/biprws/logon/long",
				headers: header
			};
			try {
				var request = httpClient.httpRequest(_, opt);
				var response = request.end(JSON.stringify(body)).response(_);
				if (response.statusCode === 200) {
					this.token = response.headers["x-sap-logontoken"].replace("\"", "").replace("\"", "");

				} else {
					this.fail = response.statusCode + ": (url:" + opt.url + ") body " + response.readAll(_);

					this.token = null;
				}
			} catch (e) {
				throw new Error("can't logon on bo server " + e.stack);
			}
		}
		return this.token;
	},
	/*
	 * return true if logoff is successful else false
	 */
	logoff: function(_) {
		console.log("boClient logoff");
		var header = {
			"Accept": "application/json",
			"x-sap-logontoken": this.token
		};
		var opt = {
			method: "POST",
			url: "http://" + this.boserv + ":" + this.boport + "/biprws/logoff",
			headers: header
		};

		try {
			var request = httpClient.httpRequest(_, opt);
			var response = request.end().response(_);
			if (this.syracuseSession && MapCookies[this.syracuseSession]) delete MapCookies[this.syracuseSession];
			if (response.statusCode === 200) {
				this.token = null;
				this.variable = null;
				return true;
			} else {
				this.token = null;
				this.variable = null;
				return false;
			}
		} catch (e) {
			throw new Error("can't logoff on bo server " + e.stack);
		}
	}

});