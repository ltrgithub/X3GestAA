var MAP = require("./x3Protocol").MAP;

var HANDLERS = {};

function parseKeyValues(str) {
	return str.split('\n').reduce(function(result, line) {
		if (line) {
			var pair = line.split('=\u0001');
			console.log(pair);
			result[pair[0]] = pair[1];
		}
		return result;
	}, {});
}

function formatKeyValues(result) {
	return [Object.keys(result).map(function(key) {
		return key + '=\u0001' + result[key] + '\n';
	})];
}

function parseKey(str) {
	var keys = str.split('\n');
	if (keys.length !== 2 || keys[1]) throw new Error("bad key: " + str);
	return keys[0];
}

function checkLen(list, len) {
	if (list.length !== len) throw new Error("bad list length: " + list.length);
}

var UIActions = {
	SetTechnoVers: function(_, ctx, values) {
		// bad values, but they keep our replay test happy 
		values.Id = "2";
		values.Version = "null.null"; // for now
		return values;
	},
	SessionSettings: function(_, ctx, values) {
		return {
			UIAction: "SessionSettings"
		};
	},
	SetWindFeatures: function(_, ctx, values) {
		// strange!
		return {
			UIAction: "SessionSettings"
		};
	},
	Sethangup: function(_, ctx, values) {
		return {
			Sethangup: 1
		};
	},
}

HANDLERS.ND_SLF = function(_, ctx, req, node, actions) {
	checkLen(actions, 1);
	var values = parseKeyValues(actions[0]);
	var fn = UIActions[values.UIAction];
	if (!fn) throw new Error("bad UI action: " + values.UIAction);
	var result = fn(_, ctx, values);
	return formatKeyValues(result);
};

var GfdValues = {
	X3FileVersion: "null.null",
	SDate: "/",
	IDate: "0",
	SDecimal: ".",
	SThousand: " ",
};

HANDLERS.ND_GFD = function(_, ctx, req, node, actions) {
	checkLen(actions, 1);
	var key = parseKey(actions[0]);
	var result = {}
	result[key] = GfdValues[key];
	if (result[key] === undefined) result[key] = key + " : unsupported param";
	return formatKeyValues(result);
}

exports.newContext = function(stream) {
	return {
		stream: stream,
		handlers: HANDLERS
	};
}