"use strict";

function firstProp(elt) {
	return elt.$properties[Object.keys(elt.$properties)[0]];
}

var _normalizerMap = {
	$X3Name: function(key, prop) {
		if (!prop.$X3Name && (key[0] === "b")) prop.$X3Name = "LeftList_" + key;
	},
	$xid: function(key, prop) {
		// do nothing, $xid should be there
	}
};

function fixPrototype(from, to) {
	return function(proto, $article) {
		var map = {};

		function fillMap(elt) {
			Object.keys(elt.$properties).forEach(function(key) {
				if (key.charAt(0) == "b") {
					return;
				}
				var prop = elt.$properties[key];
				_normalizerMap[from] && _normalizerMap[from](key, prop);
				if (prop[from]) {
					map[key] = prop[from];
				} else if (prop.$item && prop.$type === "application/x-array") {
					throw new Error("prototype conversion failed: missing " + key + "." + from);
					//var prop0 = firstProp(prop.$item);
					//if (prop0[from]) map[key] = "ARR_" + prop0[from];
					//else console.error("NO NAME 1 FOR " + key);
				} else {
					//console.log("NO NAME 2 FOR " + key);
				}
				prop[from] = undefined;
				if (prop.$item) fillMap(prop.$item);
			});
		}

		function fixProperties(elt) {
			elt.$properties = Object.keys(elt.$properties).reduce(function(result, key) {
				var prop = elt.$properties[key];
				var name = map[key];
				if (!name) {
					name = key;
				}
				result[name] = prop;
				if (name !== key) prop[to] = key;
				if (prop.$item) fixProperties(prop.$item);
				return result;
			}, {});
		}

		function fixArticle(art) {
			if (!art) return;
			if (Array.isArray(art)) art.forEach(fixArticle);
			else if (typeof art === 'object') {
				if (art.$bind != null) {
					if (map[art.$bind]) art.$bind = map[art.$bind];
					else return;
//					else throw new Error("name missing for  " + art.$bind);
				}
				Object.keys(art).forEach(function(key) {
					if (key === '$fusionBar' || key === '$menus') return;
					fixArticle(art[key]);
				});
			}
		}
		if (proto.$properties /* && firstProp(proto)[from]*/ ) {
			fillMap(proto);
			fixProperties(proto);
			fixArticle($article || proto.$article);
		}
	};
}

/// converts a prototype to the persistent form that we save in mongodb
exports.makePersistent = fixPrototype('$X3Name', '$xid');
/// converts a prototype to the volatile form that we use in the client
exports.makeVolatile = fixPrototype('$xid', '$X3Name');