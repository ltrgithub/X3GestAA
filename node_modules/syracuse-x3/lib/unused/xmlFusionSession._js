"use strict";

var locale = require("syracuse-core/lib/locale");
var helpers = require("syracuse-core/lib/helpers");
var streams = require("streamline/lib/streams/streams");
var fs = require("fs");
var dateObj = require("syracuse-core/lib/types/date");
var util = require("util");
var jsxml = require("./xmlToJsReply");

//var tracer = console.log;
var tracer = null;

function _makeRequest37(_, context, requestId) {
	function _makeDate() {
		return dateObj.today().toString("yyyyMMdd");
	}
	function _makeActionNode(_) {
		var param = {
				I: "37",
				a: "lv", // user
				b: "",  // password
				c: (locale.isoLanguageMap[locale.current.toLowerCase()] || "FRA"),
				d: _makeDate(),
				e: context.endpoint.getApplicationServerName(_),
				f: x3server.serverPort(_),
				g: context.endpoint.x3ServerFolder(_),
				T: "0",
				h: "ASK_",
				i: "ASK_",
				j: "HTML",
				k: "FENW",
				SUP: "15v.002",
				"adonix.wkf": context.parameters.f
			};
		return "<A " + Object.keys(param).map(function(prop) { return prop+"=\""+param[prop]+"\""; }).join(" ") + ">lv</A>";
	}
	var x3server = context.endpoint.x3server(_);
	var userProfile = context.httpSession.getUserProfile(_);
	var localePrefs = userProfile && userProfile.selectedLocale(_);
//	console.log("Action node: "+_makeActionNode(_));
	return 	'<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>'+
		'<RQ ID="' + (requestId || 0) + '">'+
//		'<RQ ID="0">'+
			_makeActionNode(_)+
			'<CF>'+
	             '<date>'+
	                    '<format>11</format>'+ // ???
	                    '<pivot>' + (((localePrefs && localePrefs.twoDigitYearMax(_)) || 2063) - 100) + '</pivot>'+
	             '</date>'+
	             '<num>'+
	                    '<symbol>'+
	                           '<decimal>' + (localePrefs && localePrefs.numberDecimalSeparator(_)) + '</decimal>'+
	                           '<thousand>' + (localePrefs && ((localePrefs.numberGroupSeparator(_)===" ")?"space":localePrefs.numberGroupSeparator(_))) + '</thousand>'+
	                    '</symbol>'+
	            '</num>'+
	             '<adonix>'+
	                    '<wkf>' + context.parameters.f + '</wkf>'+
	             '</adonix>'+
	             '<url>'+
	                    '<server>'+
	                           '<request>' + context.endpoint.getFusionDataServerBaseUrl(_) + '</request>'+
	                    '</server>'+
	             '</url>'+
	       '</CF>'+
	       '<BR>'+
	             '<browser/>'+
	       '</BR>'+
		'</RQ>';
}

function _makeRequest42(_, context, requestId) {
	return '<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>'+
		'<RQ ID="' + (requestId || 0) + '" C="1"><A I="42"/></RQ>';
}

function _makeRequestClose(requestId) {
	return '<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>'+
		'<RQ ID="' + (requestId || 0) + '" C="1"><A I="39"/></RQ>';
}

function FusionSession(fsid) {
	this.sid = fsid;
	this.requestId = 0;
	this.sessionUrl = "";
	this.isXmlSessionFormat = true;
}	

var sessionProto = FusionSession.prototype;
//
sessionProto.connect = function(_, context) {
	var baseUrl = context.endpoint.getFusionDataServerBaseUrl(_);
	this.sessionUrl = baseUrl;
	//
	if(!context.parameters || !context.parameters.f)
		throw new Error(locale.format(module, "parFunctionExpected"));
	// requete 37
	var reqStr = _makeRequest37(_, context, this.requestId++);
	tracer && tracer("fusionSession.connect request 37: "+reqStr);
	var options = {
		url: baseUrl + "?x3.act=37&x3.hsid="+this.sid,
		method: "POST",
		headers: {
			"Content-Type": "text/xml",
			"Content-Length": reqStr.length 
		}	
	}
	//
	var request = streams.httpRequest(options);
	request.write(_, reqStr, "utf8");
	// response
	var resp = request.end().response(_);
	// TODO: resp.statusCode
	var respStr = resp.readAll(_).toString("utf8");
//	console.log("37 response: "+respStr);

	// requete 42
	reqStr = _makeRequest42(_, context, this.requestId++);
	options = {
		url: baseUrl + "?C=1&x3.act=42&x3.hsid="+this.sid,
		method: "POST",
		headers: {
			"Content-Type": "text/xml",
			"Content-Length": reqStr.length 
		}
	}
	//
	request = streams.httpRequest(options);
	request.write(_, reqStr, "utf8");
	resp = request.end().response(_);
//	console.log("42 headers: "+resp.statusCode+"; "+util.inspect(resp.headers));
	var resp42Str = resp.readAll(_).toString("utf8");
//	console.log("42 response: "+resp42Str);
	//
	return jsxml.parse(resp42Str);
}

sessionProto.proxy = function(_, context) {
	var baseUrl = context.endpoint.getFusionDataServerBaseUrl(_);
	var request = context.request;
	var params = Object.keys(context.parameters).map(function(key) {return key + "=" + encodeURIComponent(context.parameters[key]); }).join("&");
	var options = {
			url: baseUrl + (params ? ("?" + params) : ""),
			method: context.method,
			headers: request.headers
		}
	var clientReq = streams.httpRequest(options);
	var buf;
	while(buf = request.read(_)) clientReq.write(_, buf, "utf8");
	var response = clientReq.end().response(_);
	//
	context.response.writeHead(response.statusCode, response.headers);
	while(buf = response.read(_)) context.response.write(_, buf, "utf8");
	context.response.end();
}

sessionProto.close = function(_) {
	//
	var reqStr = _makeRequestClose(this.requestId++);
	var options = {
			url: this.sessionUrl + "?x3.act=39&x3.hsid="+this.sid,
			method: "POST",
			headers: {
				"Content-Type": "text/xml",
				"Content-Length": reqStr.length 
			}
		}
	var request = streams.httpRequest(options);
	request.write(_, reqStr, "utf8");
	var respStr = request.end().response(_).readAll(_).toString("utf8");
	// TODO: decode response ?
}

exports.getFusionSession = function(_, fsid) {
	return new FusionSession(fsid);
}

exports.closeSession = function(_, fsid, sessionUrl) {
	// TODO: json
	var	reqStr = '<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>'+
		'<RQ ID="0" C="1"><A I="39"/></RQ>';
	var options = {
			url: sessionUrl + "?x3.act=39&x3.hsid="+fsid,
			method: "POST",
			headers: {
				"Content-Type": "text/xml",
				"Content-Length": reqStr.length 
			}
		}
	var request = streams.httpRequest(options);
	request.write(_, reqStr, "utf8");
	var respStr = request.end();
//	respStr = request.end().response(_).readAll(_).toString("utf8");
	// TODO: decode response ?
}



/*
Attributs du nœud A requête 37:
	I="37"       : Code action
	a="lv"       : User X3
	b=""         : Password X3
	c="FRA"      : Code langue
	d="20120215" : Date
	e="sodaix02.sagefr.adinternal.com" : host (adonix)
	f="17000"    : Port adonix
	g="SUPERV"   : Dossier X3
	T="0"        : ???
	h="ASK_"     : ???
	i="ASK_"     : ???
	j="HTML"     : Je pense que ça ne sert à rien (ancienne version)
	k="FENW"     : Je pense que ça ne sert à rien (ancienne version)
	SUP="15v.002"       : Version superviseur (je ne suis pas certain que ça serve)
	adonix.wkf="GESAMK/2//M/ABF0" : La séquence permettant l’ouverture de la fonction :
	·         GESAMK : La fonction
	·         2 : Le client ne sera pas fermé à la fermeture de la fonction
	·         M : Modification autorisée
	·         ABF0 : La clé
*/