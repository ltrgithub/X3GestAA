"use strict";

var locale = require("syracuse-core/lib/locale");
var helpers = require("syracuse-core/lib/helpers");
var xmlSessionFactory = require("./xmlFusionSession");
var jsonSessionFactory = require("./fusionSession");
var httpHelper = require("syracuse-sdata/lib/httpHelper");
var util = require("util");
var streams = require("streamline/lib/streams/streams");

exports.connect = function(_, context) {
	//
	var fsid = helpers.uuid.generate();
	var request = context.request;
	if (!request.session) throw new Error(locale.format(module, "noSession"));
	//
//	var session = context.endpoint.fusionJsonMode(_) ? jsonSessionFactory.getFusionSession(_, fsid) : xmlSessionFactory.getFusionSession(_, fsid);
	var session = jsonSessionFactory.getFusionSession(_, fsid);
	var result = {
		statusCode: 201,
		headers: {
			// after connect only
			//			location: context.baseUrl + "/$sessions('" + fsid + "')"
		},
		body: session.connect(_, context)
	}
//	result.headers.location = context.baseUrl +  "/$sessions('" + fsid + "')";
	result.headers.location = context.baseUrl +  "/$sessions('" + session.sid + "')";
	//
	request.session.updateFusionSession(session);
	//
	return result;
}

exports.proxy = function(_, context) {
	// bypass
	var request = context.request;
	if (!request.session) throw new Error(locale.format(module, "noSession"));
	//
	var session = request.session.getFusionSession(context.fusionSessionId);
	if(!session) {
		var error = new Error(locale.format(module, "sessionNotFound", context.fusionSessionId));
		error.statusCode = httpHelper.HttpStatus.NotFound;
		throw error;
	}
	session.proxy(_, context);
	request.session.updateFusionSession(session);
}

exports.closeSession = function(_, fsid, sessionUrl, xmlFormat) {
	return xmlFormat ? xmlSessionFactory.closeSession(_, fsid, sessionUrl) : jsonSessionFactory.closeSession(_, fsid, sessionUrl);
}

exports.webProxy = function(_, context, webServerPath) {
	var baseUrl = context.endpoint.getWebServerBaseUrl(_, false);
	var request = context.request;
	var params = Object.keys(context.parameters).map(function(key) {return key + "=" + encodeURIComponent(context.parameters[key]); }).join("&");
	var options = {
			url: baseUrl + "/" + webServerPath + (params ? ("?" + params) : ""),
			method: context.method,
			headers: request.headers
		}
	console.log("fusionPool.proxy options: "+util.inspect(options));
	var clientReq = streams.httpRequest(options);
	var buf;
	while(buf = request.read(_)) clientReq.write(_, buf, "utf8");
	var response = clientReq.end().response(_);
	//
	context.response.writeHead(response.statusCode, response.headers);
	while(buf = response.read(_)) context.response.write(_, buf, "utf8");
	context.response.end();
}