"use strict";

var helpers = require('syracuse-core/lib/helpers');
var PrintComm = require('syracuse-x3/lib/clients/print/PrintComm').PrintComm;
var config = require('config');
var mime = require('streamline-static/lib/utils').mime;
var commonClient = require('syracuse-x3/lib/clients/common/commonClient');
var flows = require('streamline/lib/util/flows');

var stack = {};

function getStackedJobs(server) {
	return stack[server].reduce(function(job, desc, index) {
		job[desc.jobId] = {
			seqId: index,
			exportFormat: desc.exportFormat,
			report: desc.report
		};
		return job;
	}, {});
}

var typesMap = [
	undefined, //0
	".rpt", //1  Report Crystal report (*.rpt)  
	undefined, //2  ?inactiv en V5 - Data interchange format  
	".doc", //3  Microsoft Word (*.doc)  
	undefined, //4  ?inactiv en V5 - Columns of values  
	".rtf", //5  Format RTF (*.rtf)  
	undefined, //6  ?inactiv in V5 - Values separated by comma (CSV)  
	undefined, //7  ?inactiv in V5 - Values separated by TAB  
	undefined, //8  ?inactiv in V5 - Values separated by one caracter  
	".txt", //9  Text ASCII  
	".txt", //10  Text ASCII paginated  
	undefined, //11  ?inactiv en V5 - Text ASCII separated by TAB  
	undefined, //12  ?inactiv since version 136  
	undefined, //13  ?inactiv since version 136  
	undefined, //14  ?inactiv since version 136  
	undefined, //15  ?inactiv since version 136  
	undefined, //16  ?inactiv since version 136  
	undefined, //17  ?inactiv since version 136  
	undefined, //18  ?inactiv since version 136  
	undefined, //19  ?inactiv since version 136  
	undefined, //20  ?inactiv 140 ODBC  
	undefined, //21  ?inactiv 140 HTML 3.2  
	undefined, //22  ?inactiv since version 136  
	undefined, //23  ?inactiv since version 136  
	undefined, //24  ?HTML 4 not supported by Crystal XI  
	undefined, //25  ?inactiv since version 136  
	undefined, //26  ?inactiv since version 136  
	".xls", //27  Microsoft Excel 97-2000 (*.xls)  
	".xls", //28  Microsoft Excel 97-2000 data only (*.xls)  
	".pdf", //29  Adobe Acrobat (*.pdf) 
	undefined, // 30? inactiv
	".xlsx"
];

/// !doc
/// 
/// # PrintClient
/// PrintClient provide functions that allow to retrieve informations and send requests to print server.  
/// The module is using print protocol layer implemented in [PrintComm](./PrintComm.md).  
/// To use this module do require('syracuse-x3/lib/clients/print/PrintClient').  
/// And then, call the `getClient` function asynchronously to get an available client from a pool.  
/// 
/// ```javascript
/// PrintClient = require('syracuse-x3/lib/clients/print/PrintClient');  
/// ```
/// 
/// ## getMimeFromExport  
/// ```javascript
/// var mimeType = PrintClient.getMimeFromExport(exportFormat);  
/// ```
/// 
var getMimeFromExport = exports.getMimeFromExport = function(exportFormat) {
	var ext = typesMap[exportFormat];
	if (!ext) throw new Error("The export format [" + exportFormat + "] is not supported.");
	return mime.types[ext];
};

var clients = {};
/// ## getClient
/// ```
/// var printClient = PrintClient.getClient(_, hostname, port, id);
/// ```
/// Retrieve or instanciate print server client and initialize connection.  
/// 
/// * The `hostname` parameter is the print server hostname.  
/// * The `port` parameter is the print server port.  
/// * The `id` parameter is used to identify different clients on the same server.  
/// 
exports.getClient = function(_, hostname, port, id, recOptions) {
	var client, cltId = hostname + ":" + port + "@" + (id || "default");
	if ((client = clients[cltId])) {
		client.__setSocketTimeout(_, true);
		//		console.log("Reusing print client [" + cltId + "]");
	} else {
		client = new PrintClient(_, hostname, port, cltId, recOptions);
		clients[cltId] = client;
		//		console.log("Created print client with id [" + cltId + "]");

	}
	return client;
};

var PrintClient = exports.PrintClient = helpers.defineClass(function(_, hostname, port, id, recOptions) {
	this.hostname = hostname;
	this.port = port;
	this._id = id;
	this.printServer = this.hostname + ":" + this.port;
	stack[this.printServer] = stack[this.printServer] || [];
	this.technoVers = {
		UIAction: 'SetTechnoVers',
		Version: '100.001',
		Id: '2',
		Protocol: '150067'
	};
	this.srvTechnoVers = null;
	var options = {
		clientDescr: "PrintClient",
		CommClass: PrintComm,
		recOptions: recOptions,
		config: config.x3print
	};
	commonClient.CommonClient.call(this, _, options, hostname, port, null, null, null);
}, commonClient.CommonClient, {

	/// 
	/// -------------
	/// ## getAllPrinters :
	/// ``` javascript
	/// var printers = printClient.getAllPrinters(_);  
	/// ```
	/// Retrieve all printers informations and capabilities defined on print server.  
	/// 
	/// Returns an array :  
	/// ``` javascript
	/// 	[  
	/// 	  {  
	/// 	    "printerName": "\\\\172.28.8.4\\HP3390-grenoble",  
	/// 	    "printerPort": "172.28.8.151",  
	/// 	    "driverName": "HP Universal Printing PCL 5",  
	/// 	    "comment": "",  
	/// 	    "location": "",  
	/// 	    "collate": true,  
	/// 	    "copies": true,  
	/// 	    "orientation": true,  
	/// 	    "duplex": true  
	/// 	  },  
	/// 	  {  
	/// 		"printerName": "\\\\172.28.8.4\\KONICA Grenoble",  
	/// 		"printerPort": "172.28.8.152",  
	/// 		"driverName": "KONICA MINOLTA 423SeriesPCL",  
	/// 		"comment": "",  
	/// 		"location": "",  
	/// 		"collate": true,  
	/// 		"copies": true,  
	/// 		"orientation": true,  
	/// 		"duplex": true  
	/// 		  }  
	/// 	]  
	/// ```
	/// 
	getAllPrinters: function(_) {
		return this.communicator.send_ND_GET_ALLPRINTERS(_);
	},

	/// -------------
	/// ## getAdvancedParameters :
	/// ``` javascript
	/// var infos = printClient.getAdvancedParameters(_, '\\172.28.8.4\HP3390-grenoble', '172.28.8.151', 'HP Universal Printing PCL 5');  
	/// ```
	/// Retrieve the list of printers defined on print server.  
	/// 
	/// * String : The `printerName` parameter is the name of the printer.  
	///    eg: '\\172.28.8.4\HP3390-grenoble'  
	/// * String : The `printerPort` parameter is the port definition of the printer. (optional)  
	///    eg: '172.28.8.151'  
	/// * String : The `printerDriver` parameter is the driver reference. (optional)  
	///    eg: 'HP Universal Printing PCL 5'  
	/// 
	/// Returns an object that contains paperSize and tray informations :  
	/// ``` javascript
	/// {  
	///   "paperSize": [  
	///     {  
	///       "$value": 1,  
	///       "$title": "Letter"  
	///     },  
	///     {  
	///       "$value": 8,  
	///       "$title": "A3"  
	///     },  
	///     {  
	///       "$value": 9,  
	///       "$title": "A4"  
	///     },  
	///     ...  
	///   ],  
	///   "bac": [  
	///     {  
	///       "$value": 15,  
	///       "$title": " SÃ©lection automatique"  
	///     },  
	///     {  
	///       "$value": 257,  
	///       "$title": " Printer auto select"  
	///     },  
	///     ...  
	///   ]  
	/// }  
	/// ```
	/// 
	getAdvancedParameters: function(_, printerName, printerPort, printerDriver) {
		return this.communicator.send_ND_MORE_PRINTER(_, printerName, printerPort, printerDriver);
	},

	/// -------------
	/// ## getExtraParameters :
	/// ``` javascript
	/// var extra = printClient.getExtraParameters(_, '\\172.28.8.4\HP3390-grenoble', '172.28.8.151', 'HP Universal Printing PCL 5', 9);  
	/// ```
	/// Retrieve a paper size.  
	/// 
	/// * String : The `printerName` parameter is the name of the printer.  
	///    eg: '\\172.28.8.4\HP3390-grenoble'  
	/// * String : The `printerPort` parameter is the port definition of the printer. (optional)  
	///    eg: '172.28.8.151'  
	/// * String : The `printerDriver` parameter is the driver reference. (optional)  
	///    eg: 'HP Universal Printing PCL 5'  
	/// * Number : The `printerPaperSize` parameter is the id of paperSize.  
	///            This id could be retrieve with 'getExtraParameters' function.  
	///    eg: '9' for A4 paper  
	/// 
	/// Returns an object that contains width and length of selected paper :  
	/// ``` javascript
	/// 	{  
	/// 	  "$width": 2100,  
	/// 	  "$length": 2970  
	/// 	}  
	/// ```
	/// 
	getExtraParameters: function(_, printerName, printerPort, printerDriver, printerPaperSize) {
		return this.communicator.send_ND_EXTRA_PRINTER(_, printerName, printerPort, printerDriver, printerPaperSize);
	},

	/// -------------
	/// ## listPrinters :
	/// ``` javascript
	/// var list = printClient.listPrinters(_);  
	/// ```
	/// Retrieve the list of printers defined on print server.  
	/// 
	/// Returns a javascript object :  
	/// ``` javascript
	/// {  
	///   "_NbPrinters": 3,  
	///   "_PrinterName000": "\\\\172.28.8.4\\HP3390-grenoble",  
	///   "_PrinterName001": "Microsoft XPS Document Writer",  
	///   "_PrinterName002": "\\\\172.28.8.4\\KONICA Grenoble"  
	/// }  
	/// ```
	/// 
	listPrinters: function(_) {
		return this.communicator.send_ND_LIM(_);
	},

	/// -------------
	/// ## launchReport :
	/// ``` javascript
	/// var seqId = printClient.launchReport(_, properties);  
	/// ```
	/// Launch a report.  
	/// 
	/// * Object : The `properties` parameter is a JSON object that contains severals report informations.
	///            '__wJobID' property is the id that will be used by 'getState' and 'getReport' functions.  
	/// 
	/// ``` javascript
	/// {  
	///   "_FormatExport": "29",  
	///   "__REPORT": "TABCOUNTRY.rpt",  
	///   "__DESTINATION": "3",  
	///   "__TYPDBA": "1",  
	///   "__DBDATABASE": "X3DVLP",  
	///   "__DBUSER": "SUPERV",  
	///   "__DBPASSWORD": "password",  
	///   "__WSTATION": "host.sagefr.adinternal.com",  
	///   "__CDUSER": "USR",  
	///   "__ADXSOL": "SOLSUPV6",  
	///   "__APPLICATION": "SUPERV;sodaix02;17000",  
	///   "__APPRPT": "SUPERV;sodaix02;17000",  
	///   "__RPTLAN": "FRA",  
	///   "X3DOS": "SUPERV;sodaix02;17000;150;FRA",  
	///   "__JOBLINKED": "",  
	///   "__REQUETE": "25561900",  
	///   "_Orientation": "0",  
	///   "_PaperSize": "44",  
	///   "X3CLI": "Superviseur 140",  
	///   "X3EDT": "Etat Sage X3 Entreprise Copyright Sage",  
	///   "X3ETA": "TABCOUNTRY",  
	///   "X3TIT": "Pays",  
	///   "X3OPE": "User",  
	///   "X3USR": "USR",  
	///   "X3LAN": "FRA",  
	///   "X3SIT1": "*",  
	///   "X3SIT2": "z",  
	///   "X3PRF": "ADMIN",  
	///   "X3FCT": "",  
	///   "X3SIT": "",  
	///   "paysdeb": " ",  
	///   "paysfin": "zzzzzzzzzz",  
	///   "impselections": "0",  
	///   "aÃ±o": "",  
	///   "__wJobID": "d22e7432-aa04-4a67-8b5f-352bc9bca209"  
	/// }  
	/// ```
	/// 
	/// * Integer : The `alreadyLaunched` parameter allows to define if the report was launched by the back office.
	///				If `alreadyLaunched` is defined and superior than 0, this value match seqId
	///
	/// Returns a Number that represents the sequence id on print server :  
	/// 
	launchReport: function(_, properties, alreadyLaunched) {
		var seqId = !alreadyLaunched ? this.communicator.send_ND_NDOUVIMP(_, properties) : alreadyLaunched;
		var ef = parseInt(properties._FormatExport, 10),
			fn = (properties.__REPORT || "???").split(".");
		stack[this.printServer][seqId] = {
			jobId: properties.__wJobID,
			exportFormat: ef,
			report: {
				filename: (fn[0] || "???") + typesMap[ef],
				title: properties.X3TIT || "",
				lang: properties.X3LAN || ""
			}
		};
		return seqId;
	},

	/// -------------
	/// ## cancelReport :
	/// ``` javascript
	/// printClient.cancelReport(_, seqId);  
	/// ```
	/// Cancel a launched report.  
	/// 
	/// * Number : The `seqId` parameter is the sequence id on print server that is corresponding to the stacked report.  
	/// 
	/// Returns nothing.  
	/// 
	cancelReport: function(_, seqId) {
		delete stack[this.printServer][seqId];
		this.communicator.send_ND_DELETEREPORT(_, seqId);
	},

	/// -------------
	/// ## getState :
	/// ``` javascript
	/// var status = printClient.getState(_, jobId);  
	/// ```
	/// Get report status.  
	/// 
	/// * Number : The `jobId` parameter is the id on print server that is corresponding to the report.  
	/// 
	/// List of status codes :  
	/// ```
	/// 	99 : unexpected error  
	/// 	98 : unknow job  
	/// 	97 : internal error  
	/// 	0 : job started  
	/// 	1 : read DB pending  
	/// 	2 : read finished  
	/// 	3 : read canceled  
	/// 	4 : job stacked  
	/// 	5 : job finished  
	/// 	6 : job failed  
	/// 	7 : job canceled 
	/// ```
	/// 
	/// Returns a javascript object that contains a status code and a message : 
	/// ``` javascript
	/// 	{  
	/// 	  "code": 5,  
	/// 	  "message": ""  
	/// 	}  
	/// ```
	/// 
	getState: function(_, jobId) {
		return this.communicator.send_ND_GETSTATEREPORT(_, jobId);
	},

	/// -------------
	/// ## getReport :
	/// ``` javascript
	/// var report = printClient.getReport(_, jobId);  
	/// ```
	/// Get report content.  
	/// 
	/// * Number : The `jobId` parameter is the id on print server that is corresponding to the report.  
	/// 
	/// Returns a javascript object : 
	/// ``` javascript
	/// 	{
	/// 	  "length": 47463,
	/// 	  "binary": "%PDF-1.7 ..."
	/// 	}
	/// ```
	/// 
	getReport: function(_, jobId) {
		var jobs = getStackedJobs(this.printServer);
		var job = jobs[jobId];
		if (!job) throw new Error("Job [" + jobId + "] was not found on stack");
		if (job.report && !job.report.binary) {
			var result = this.communicator.send_ND_GETRESULTREPORT(_, jobId);
			job.report.binary = result.binary;
			result.binary = undefined;
			job.report.length = result.length;
			job.report.mimeType = getMimeFromExport(job.exportFormat);
		}
		delete stack[this.printServer][job.seqId];
		return job.report;
	},

	/// -------------
	/// ## listJobs :
	/// ``` javascript
	/// var jobs = printClient.listJobs(_);  
	/// ```
	/// Get stacked jobs informations.  
	/// 
	/// Returns a javascript array : 
	/// ``` javascript
	/// [
	///   {
	///     "order": 1,
	///     "rank": 1,
	///     "processId": 0,
	///     "serverDuration": 598,
	///     "processDuration": 597,
	///     "status": "OK",
	///     "phase": "Printing is completed.",
	///     "destination": "File",
	///     "report": "TABCOUNTRY.rpt",
	///     "application": {
	///       "folder": "SUPERV",
	///       "host": "sodaix02",
	///       "port": "17001"
	///     },
	///     "user": "TC",
	///     "workstation": "host.sagefr.adinternal.com",
	///     "linked": null
	///   },...
	/// ]
	/// ```
	/// 
	listJobs: function(_) {
		return this.communicator.send_ND_DISPLAYREPORT(_);
	},

	/// -------------
	/// ## checkPrinterPaper :
	/// ``` javascript
	/// var paperMeta = printClient.checkPrinterPaper(_, pName, pPort, pDriver, ppSizeId, ppSourceId);  
	/// ```
	/// Check printer paper size and source.  
	/// 
	/// * String : The `pName` parameter is the printer name.   
	/// * String : The `pPort` parameter is the printer port.  
	/// * String : The `pDriver` parameter is the printer Driver.  
	/// * Integer : The `ppSizeId` parameter is the paper size id.  
	/// * Integer : The `ppSourceId` parameter is the paper source id.  
	/// 
	/// Returns a javascript object : 
	/// ``` javascript
	/// {
	///   "paperSize": { "id": 7, "width" : 2100, "height": 2500},
	///	  "paperSource": {"id": 85}
	/// }
	/// ```
	/// 
	checkPrinterPaper: function(_, pName, pPort, pDriver, ppSizeId, ppSourceId) {
		var ret = {}, pParams, nbElem, ii, extra;
		var size = ppSizeId && typeof ppSizeId === "string" ? parseInt(ppSizeId, 10) : ppSizeId;
		var source = ppSourceId && typeof ppSourceId === "string" ? parseInt(ppSourceId, 10) : ppSourceId;
		try {
			pParams = this.getAdvancedParameters(_, pName, pPort, pDriver);
			if (pParams) {
				if (pParams.bac && (nbElem = pParams.bac.length) > 0 && source) {
					for (ii = 0; ii < nbElem; ii++) {
						if (pParams.bac[ii].$value === source) {
							break;
						}
					}
					ret.paperSource = {
						"id": ii < nbElem ? source : pParams.bac[0].$value
					};
				}
				if (pParams.paperSize && (nbElem = pParams.paperSize.length) > 0 && size) {
					for (ii = 0; ii < nbElem; ii++) {
						if (pParams.paperSize[ii].$value === size) {
							break;
						}
					}
					ret.paperSize = {
						"id": ii < nbElem ? size : pParams.paperSize[0].$value
					};
					try {
						if ((extra = this.getExtraParameters(_, pName, pPort, pDriver, ret.paperSize.id))) {
							if (extra.$height) ret.paperSize.height = extra.$height;
							if (extra.$width) ret.paperSize.width = extra.$width;
						}
					} catch (e) {
						ret.paperSize = null;
					}
				}
			}
		} catch (e) {
			ret = null;
		}
		return ret;
	},

	/// -------------
	/// ## changePriority :
	/// ``` javascript
	/// var jobs = printClient.changePriority(_, seqId, order);  
	/// ```
	/// Change job's priority.  
	/// 
	/// * Number : The `seqId` parameter is the sequence id on print server that is corresponding to the stacked report.   
	/// * String : The `order` parameter the priority action to apply on job. It can be 'MIN', 'MAX', '+' or '-'.  
	/// 
	/// Returns a javascript object : 
	/// ``` javascript
	/// {
	///   "ChangeOrderRptJob": "1"
	/// }
	/// ```
	/// ChangeOrderRptJob = "1" if all goes well or "0" if an error occurs
	/// 
	changePriority: function(_, seqId, order) {
		return this.communicator.send_ND_PRIORITYREPORT(_, seqId, order);
	},


	__panicRelease: function(_) {
		var dis = false;
		try {
			this.recorder && this.recorder.close();
			this.communicator && this.communicator.disconnect(_);
			dis = true;
			this.stream && this.stream.end();
		} catch (e) {
			try {
				if (!dis && this.stream) {
					this.stream.end();
				}
			} catch (e) {}
		} finally {
			this.stream = null;
			delete clients[this._id];
			//console.log("Print client [" + this._id + "] destroyed cause panicRelease");
		}
	},

	__setSocketTimeout: function(_, prevent) {
		if (this.socketTimeout && prevent) {
			clearTimeout(this.socketTimeout);
		}
		var self = this;
		this.socketTimeout = flows.setTimeout(function(_) {
			try {
				if (self.stream && self.communicator) {
					self.communicator.disconnect(_);
					self.stream = null;
				}
			} catch (e) {
				console.log("SrvImp disconnection error: " + e.stack);
				self.stream.end();
				self.stream = null;
				throw e;
			} finally {
				this.stream = null;
				delete clients[self._id];
				//console.log("Print client [" + self._id + "] destroyed cause Timeout");
			}
		}, (config.x3print && config.x3print.timeout) || 150000);
	}
});