"use strict";

var util = require('util');
var helpers = require('syracuse-core/lib/helpers');
var CvgClientAbs = require("syracuse-x3/lib/clients/common/cvg/CvgClientAbs").CvgClientAbs;
var CvgRequestWS = require("syracuse-x3/lib/clients/soap/CvgRequestWS").CvgRequestWS;

var x3client = require('syracuse-x3/lib/client');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var tracerSession = require("syracuse-trace/lib/helper").getTracer("classic.session");
var jsxml = require('jsxml');
var CvgCacheManager = require('syracuse-x3/lib/cvgCacheManager').CvgCacheManager;
var CvgWSCall = require('syracuse-x3/lib/clients/soap/CvgWSCall').CvgWSCall;
var cacheMgr = new CvgCacheManager();

exports.CvgClientWS = helpers.defineClass(function(_, endpoint, user, localPref, context) {
	// connect to the x3 server
	this.adxtype = 25; // TODO change by the WS type
	this.sid = null;

	this.isFree = false;
	this.isConnected = false;

	var cliCfg = this._getContextConfig(_, endpoint, user, localPref, context);
	var cli = this._connect(_, cliCfg, context);
	CvgClientAbs.call(this, cli.getStream(), cliCfg, null, context);
	this.connectStart(_, context);
}, CvgClientAbs, {
	_getContextConfig: function(_, endpoint, user, localPref, context) { // TODO refactor to set that method in super class

		return {
			x3User: user.getEndpointLogin(_, endpoint.$uuid),
			x3Host: endpoint.x3server(_).serverHost(_),
			x3Port: endpoint.x3server(_).serverPort(_),
			x3Lang: localPref.code(_),
			x3HttpPub: endpoint.getWebServerBaseUrl(_),
			x3Folder: endpoint.x3ServerFolder(_),
			x3Solution: endpoint.x3SolutionName(_),
			appHost: endpoint.x3server(_).serverName(_),
			user: user,
			endpoint: endpoint,
			localePreference: localPref
		};
	},

	_connect: function(_, cliCfg, context) { // TODO refactor to set that method in super class

		// TODO : runtime config must be set somewhere.
		var runtimeConfig = (context.httpSession && context.httpSession.x3SessionConfig && context.httpSession.x3SessionConfig.runtime) || {};
		var adminEP = adminHelper.getCollaborationEndpoint(_);

		var client = x3client.create({
			port: cliCfg.x3Port,
			address: cliCfg.x3Host,
			tracer: tracerSession
		});

		var _x3 = client.connect(_, {
			server: cliCfg.appHost,
			folder: cliCfg.x3Folder,
			fusion: true,
			locale: cliCfg.x3Lang,
			runtimeLog: !runtimeConfig.dataset || cliCfg.endpoint.dataset(_) === runtimeConfig.dataset ? runtimeConfig.logFlag : "",
			runtimeLogDir: !runtimeConfig.dataset || cliCfg.endpoint.dataset(_) === runtimeConfig.dataset ? runtimeConfig.logDir : ""

		});
		cliCfg.x3Pid = "" + _x3.pid;
		cliCfg.x3SessionUrl = _x3.sessionUrl;
		cliCfg.x3SessionId = _x3.sessionId;

		var sysAuthToken;
		if (cliCfg.user && cliCfg.user.infov6(_)) {
			sysAuthToken = new Buffer(cliCfg.user.userv6(_) + ":" + cliCfg.user.passwordv6(_), "utf8").toString("base64");
		}

		this.sid = client.createSession(_, {
			locale: cliCfg.x3Lang,
			userName: cliCfg.x3User,
			adxtyp: this.adxtype,
			sysAuthToken: sysAuthToken,
			fusionTech: {
				protocol: "150067",
			},
			localePreferences: cliCfg.localePreference,
			baseUrl: context.baseUrl,
			collaborationBaseUrl: adminEP ? context.request.session.host + adminHelper.getCollaborationEndpoint(_).getBaseUrl(_) : "",
			peerAddress: (context.httpSession.getData("requestInfo") || {}).peerAddress
		});
		this.isFree = true;
		this.isConnected = true;
		return client;
	},
	_checkContext: function(_, ctx) {
		// TODO
		return true;
	},
	execWS: function(_, ctx, options) {
		try {
			this.isFree = false;
			if (!this._checkContext(_, ctx)) {
				this._changeLogin(_, ctx.user, ctx.lang);
			}

			var wsCall = new CvgWSCall(options);

			var description = jsxml.parse(this._getDescription(_, wsCall.name, true)).ADXDOC;

			// try to simulate bad TIM to identify the error to catch before retry
			//description.$.TIM = "20111107154510";

			// add technical parameter for web-service
			var params = [{
				"descr": "WW_OK",
				"dim": 1,
				"nb": 0,
				"size": 0,
				"typ": "INT",
			}, {
				"descr": "WW_ZONE",
				"dim": 1,
				"nb": 0,
				"size": 30,
				"typ": "STRU",
			}, {
				"descr": "WW_STAT",
				"dim": 1,
				"nb": 0,
				"size": 0,
				"typ": "INT",
			}, {
				"descr": "WW_GRAVE",
				"dim": 50,
				"nb": 0,
				"size": 250,
				"typ": "STRU",
			}, {
				"descr": "WW_MESS",
				"dim": 50,
				"nb": 0,
				"size": 250,
				"typ": "STRU",
			}, {
				"descr": "WW_ACTION",
				"dim": 1,
				"nb": 1,
				"size": wsCall.action.length,
				"typ": "STRU",
				"resu": wsCall.action
			}, {
				"descr": "WW_IDENT",
				"dim": 1,
				"nb": wsCall.wkeys ? 1 : 0,
				"size": 250,
				"typ": "STRU",
				"resu": wsCall.wkeys && wsCall.wkeys.join('~')
			}, {
				"descr": "WW_NB",
				"dim": 1,
				"nb": 1,
				"size": 1,
				"typ": "INT",
				"resu": wsCall.nb
			}, {
				"descr": "WW_HORDAT",
				"dim": 1,
				"nb": 1,
				"size": description.$.TIM.length,
				"typ": "STRU",
				"resu": description.$.TIM
			}, {
				"descr": "WW_TAB",
				"dim": 1,
				"nb": wsCall.tab ? 1 : 0,
				"size": 14,
				"typ": "STRU",
				"resu": wsCall.tab
			}, {
				"descr": "WW_PAR",
				"dim": 10,
				"nb": wsCall.par && wsCall.par.length,
				"size": 14,
				"typ": "STRU",
				"resu": wsCall.par
			}, {
				"descr": "WW_TRACE",
				"dim": 1,
				"nb": 1,
				"size": 14,
				"typ": "STRU",
				"resu": wsCall.wtrace
			}];


			// add functional parameter
			var paramsCall = wsCall.getAckCallParams(description);
			paramsCall && paramsCall.forEach(function(param) {
				params.push(param);
			});

			console.log("ackcall_param " + JSON.stringify(params, null, 2));
			var reply = CvgClientAbs.prototype.execAckCall.call(this, _, description.$.WRP + ":" + description.$.SPG, wsCall.debugInfo, params);
			// analyse reply for a web-service we have the status
			var result = reply && reply.json && reply.json.result;
			if (result && !result.errn && !result.errm) {
				//no major error, analyse parameter receive from the supervisor to check the ws call work or if we have to do something (refresh cache)

			} else {
				// an error occurs raise an error
				throw new Error(result ? ("X3 Error:" + result.errp + ", message:" + result.errm + ", line :" + result.errl + ", type:" + result.errt) : "can't get result from X3");
			}
		} catch (e) {
			this.disconnectClient(_, {}, "failed :" + e.message + "\n" + e.stack);
			this.isConnected = true;
			throw e;
		} finally {
			this.isFree = true;

		}

	},
	_getDescription: function(_, wsName, forceCache) {
		var x3HttpPub = this.clientConfig.getParam("x3HttpPub");
		var x3Folder = this.clientConfig.getParam("x3Folder");
		return cacheMgr.getResource(_, x3HttpPub + "/" + x3Folder + "/GEN/ALL/WEBS/" + wsName + ".xml", null, forceCache);
	},
	_recupHDAT: function(_, wsName, debugInfo, params) {
		//TODO
	},

	_changeLogin: function(_, user, lang) {
		//TODO
	},

	_flush: function(_) {

	},

	newRequest: function(reply, sendContext) {
		return new CvgRequestWS(this, reply, sendContext);
	}



});