"use strict";

var syracuse = require('syracuse-main/lib/syracuse');
var helpers = require('syracuse-core/lib/helpers');
var CvgClientAbs = require("syracuse-x3/lib/clients/common/cvg/CvgClientAbs").CvgClientAbs;
var CvgRequestWS = require("syracuse-x3/lib/clients/soap/CvgRequestWS").CvgRequestWS;

var x3client = require('syracuse-x3/lib/client');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var tracerSession = require("syracuse-trace/lib/helper").getTracer("classic.session");
var tracerStd = require("syracuse-trace/lib/helper").getTracer("classic.std");
var tracerAction = require("syracuse-trace/lib/helper").getTracer("classic.action");
var tracerProtocol = require("syracuse-trace/lib/helper").getTracer("classic.protocol");
//var tracerSession = require("syracuse-trace/lib/helper").getTracer("classic.session");
var CvgReply = require('syracuse-x3/lib/convergence/client/CvgReply').CvgReply;
var perfmon = require('syracuse-perfmon');
var automata = require("syracuse-x3/lib/convergence/automata/x3Automata");
//





exports.CvgClientWS = helpers.defineClass(function(_, endpoint, login, lang, context) {
	// connect to the x3 server
	this.adxtype = 25; // TODO change by the WS type
	this.sid = null;
	var db = adminHelper.getCollaborationOrm(_);
	var user = db.fetchInstances(_, db.model.getEntity(_, "user"), {
		jsonWhere: {
			login: login
		}
	})[0];
	// get the locale pref corresponds to the lang
	var localPref = db.fetchInstances(_, db.model.getEntity(_, "localePreference"), {
		jsonWhere: {
			code: lang
		}
	})[0];
	var cliCfg = this._getContextConfig(_, endpoint, user, lang, localPref, context);
	var cli = this._connect(_, cliCfg, context);
	CvgClientAbs.call(this, cli.getStream(), endpoint.x3server(_), cliCfg, null, context);

}, CvgClientAbs, {
	_getContextConfig: function(_, endpoint, user, langue, localPref, context) { // TODO refactor to set that method in super class

		return {
			x3User: user.getEndpointLogin(_, endpoint.$uuid),
			x3Host: endpoint.x3server(_).serverHost(_),
			x3Port: endpoint.x3server(_).serverPort(_),
			x3Lang: langue,
			x3HttpPub: endpoint.getWebServerBaseUrl(_),
			x3Folder: endpoint.x3ServerFolder(_),
			x3Solution: endpoint.x3SolutionName(_),
			appHost: endpoint.x3server(_).serverName(_),
			user: user,
			endpoint: endpoint,
			localePreference: localPref
		};
	},

	_connect: function(_, cliCfg, context) { // TODO refactor to set that method in super class
		var runtimeConfig = (context.httpSession && context.httpSession.x3SessionConfig && context.httpSession.x3SessionConfig.runtime) || {};
		var adminEP = adminHelper.getCollaborationEndpoint(_);

		var client = x3client.create({
			port: cliCfg.x3Port,
			address: cliCfg.x3Host,
			//tracer: tracerSession
		});

		var _x3 = client.connect(_, {
			server: cliCfg.appHost,
			folder: cliCfg.x3Folder,
			fusion: true,
			locale: cliCfg.x3Lang,
			runtimeLog: !runtimeConfig.dataset || cliCfg.endpoint.dataset(_) === runtimeConfig.dataset ? runtimeConfig.logFlag : "",
			runtimeLogDir: !runtimeConfig.dataset || cliCfg.endpoint.dataset(_) === runtimeConfig.dataset ? runtimeConfig.logDir : ""

		});
		cliCfg.x3Pid = "" + _x3.pid;
		cliCfg.x3SessionUrl = _x3.sessionUrl;
		cliCfg.x3SessionId = _x3.sessionId;

		var sysAuthToken;
		if (cliCfg.user && cliCfg.user.infov6(_)) {
			sysAuthToken = new Buffer(cliCfg.user.userv6(_) + ":" + cliCfg.user.passwordv6(_), "utf8").toString("base64");
		}

		this.sid = client.createSession(_, {
			locale: cliCfg.x3Lang,
			userName: cliCfg.x3User,
			adxtyp: this.adxtype,
			sysAuthToken: sysAuthToken,
			fusionTech: {
				protocol: "150067",
			},
			localePreferences: cliCfg.localePreference,
			baseUrl: context.baseUrl,
			collaborationBaseUrl: adminEP ? context.request.session.host + adminHelper.getCollaborationEndpoint(_).getBaseUrl(_) : "",
			peerAddress: (context.httpSession.getData("requestInfo") || {}).peerAddress
		});
		return client;
	},
	// TODO override some method and implement specific method for soap ws client using convergnece protocol
	execAckCall: function(_, subprogName, deugInfo, paramDef, paramVal) {
		// TODO return a ND result as a reply
		var body = null; // TOOD create body

		this.processAction(_, body, false);
		return JSON.parse(JSON.stringify(this._trackLists.RPC[0]));

	},
	newRequest: function(reply, sendContext) {
		return new CvgRequestWS(this, reply, sendContext);
	}



});