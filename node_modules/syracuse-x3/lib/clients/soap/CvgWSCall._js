"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require("syracuse-core/lib/locale");
var flows = require('streamline/lib/util/flows');
var jsxml = require('jsxml');

var x3helpers = require('syracuse-x3/lib/helpers');


var mapTypeToResu = {
	Decimal: "DCB",
	Char: "STU",
	Integer: "INT",
	// TOOD add other type

};


exports.CvgWSCall = helpers.defineClass(function(opt) {
	this.name = opt.name;

	this.flow = opt.flow && jsxml.parse(opt.flow).PARAM; // ...xml
	this.action = opt.action;
	this.wtrace = opt.trace;
	// for objecg or list
	this.wkeys = opt.keys; // for CRUD and list, criteria or keys elements
	this.nb = opt.nb; // for list action , number of elements

	this.debugInfo = opt.debugInfo;
	// for action inslig or suplig
	this.tab = opt.tab; //blocKey
	this.par = opt.par || []; // lineKey

	this.reply = null // reply of the ack_call;

}, null, {
	getAckCallParams: function(description) {

		console.log("description " + JSON.stringify(description, null, 2));

		function findDescrGroup(id) {
			if (description.ADXDATA) {
				var grps = Array.isArray(description.ADXDATA.GRP) ? description.ADXDATA.GRP : [description.ADXDATA.GRP];
				var found = null;
				for (var i = 0; i < grps.length && !found; i++) {
					found = grps[i].$.NAM === id ? grps[i] : null;
					if (!found)
						found = grps[i].$.NAME === id ? grps[i] : null;

				}
				return found;
			}
			return null;
		}

		function findDescrfield(id, jsonDescrGrp) {
			if (jsonDescrGrp) {
				var flds = Array.isArray(jsonDescrGrp.FLD) ? jsonDescrGrp.FLD : [jsonDescrGrp.FLD];
				var found = null;
				for (var i = 0; i < flds.length && !found; i++) {
					found = flds[i].$.NAM === id ? flds[i] : null;
					if (!found)
						found = flds[i].$.NAME === id ? flds[i] : null;

				}
				return found;
			}
			return null;
		}

		//TODO
		var params = null;
		//console.log("Description: " + JSON.stringify(description, null, 2));

		if (this.flow) {
			params = [];
			var grps = Array.isArray(this.flow.GRP) ? this.flow.GRP : [this.flow.GRP];
			// check if the group exists in the descirption and analyse all field to create a param
			grps.forEach(function(grp) { // check if the group exists in the
				var descrGrp = findDescrGroup(grp.$.ID);
				// check field in flow and association with field in group in order to create parameter
				grp.FLD && grp.FLD.forEach(function(fld) { // TODO manage the order of field regarding description
					var descrFld = findDescrfield(fld.$.NAM || fld.$.NAME, descrGrp);

					if (descrFld) {
						params.push({
							"descr": fld.$.NAM || fld.$.NAME,
							"dim": descrGrp.$.DIM,
							"nb": 1, // TODO manage number of field properly
							"size": mapTypeToResu[descrFld.$.TYP] === "STRU" || mapTypeToResu[descrFld.$.TYP] === 'CLOB' ? fld.$value.length : 1,
							"typ": mapTypeToResu[descrFld.$.TYP],
							"resu": fld.$value
						});
					}
				});
			});
			console.log("params " + JSON.stringify(params, null, 2));
			return params;

		} else {
			throw new Error("#badParam$");
		}


		return null;
	},
	getSubprogName: function() {
		// TODO
	},

	getResult: function() {

	},
	toJSON: function() {
		return {
			name: this.name,
			flow: this.flow,
			action: this.action,
			wtrace: this.wtrace,
			// for objecg or list
			wkeys: this.wkeys,
			nb: this.nb,
			debugInfo: this.debugInfo,
			// for action inslig or suplig
			tab: this.tab,
			par: this.par
		};
	}



});