"use strict";

var helpers = require('syracuse-core/lib/helpers');
var PrintComm = require('syracuse-x3/lib/print/client/PrintComm').printComm;
var streams = require('streamline/lib/streams/streams');

/// !doc
/// 
/// # PrintClient
/// ```javascript
/// var printClient = new PrintClient(_, hostname, port);
/// ```
/// Instanciate print server client and initialize connection.  
/// 
/// * The `hostname` parameter is the print server hostname.  
/// * The `port` parameter is the print server port.  
/// 
var PrintClient = exports.PrintClient = helpers.defineClass(function(_, hostname, port) {
	this.hostname = hostname;
	this.port = port;
	
	this.technoVers = {
			UIAction: 'SetTechnoVers',
			Version: '100.001',
			Id: '2',
			Protocol: '150067',
	};
	this.srvTechnoVers = null;
	
	// Connection
	try{
		this.stream = streams.tcpClient(this.port, this.hostname).connect(_);
		this.communicator = new PrintComm(_, this);
		this.pid = this.communicator.connect(_);
	}catch(e) {
		console.error("SrvImp connection error: "+e.stack);
		this.disconnect(_);
		throw e;
	}
}, null, {

	/// -------------
	/// ## getAllPrinters :
	/// ``` javascript
	/// var printers = printClient.getAllPrinters(_);  
	/// ```
	/// Retrieve all printers informations and capabilities defined on print server.  
	/// 
	/// Returns an array :  
	/// ``` javascript
	/// 	[  
	/// 	  {  
	/// 	    "printerName": "\\\\172.28.8.4\\HP3390-grenoble",  
	/// 	    "printerPort": "172.28.8.151",  
	/// 	    "driverName": "HP Universal Printing PCL 5",  
	/// 	    "comment": "",  
	/// 	    "location": "",  
	/// 	    "collate": true,  
	/// 	    "copies": true,  
	/// 	    "orientation": true,  
	/// 	    "duplex": true  
	/// 	  },  
	/// 	  {  
	/// 		"printerName": "\\\\172.28.8.4\\KONICA Grenoble",  
	/// 		"printerPort": "172.28.8.152",  
	/// 		"driverName": "KONICA MINOLTA 423SeriesPCL",  
	/// 		"comment": "",  
	/// 		"location": "",  
	/// 		"collate": true,  
	/// 		"copies": true,  
	/// 		"orientation": true,  
	/// 		"duplex": true  
	/// 		  }  
	/// 	]  
	/// ```
	/// 
	getAllPrinters: function(_) {
		return this.communicator.send_ND_GET_ALLPRINTERS(_);
	},

	/// -------------
	/// ## getAdvancedParameters :
	/// ``` javascript
	/// var infos = printClient.getAdvancedParameters(_, '\\172.28.8.4\HP3390-grenoble', '172.28.8.151', 'HP Universal Printing PCL 5');  
	/// ```
	/// Retrieve the list of printers defined on print server.  
	/// 
	/// * String : The `printerName` parameter is the name of the printer.  
	///    eg: '\\172.28.8.4\HP3390-grenoble'  
	/// * String : The `printerPort` parameter is the port definition of the printer. (optional)  
	///    eg: '172.28.8.151'  
	/// * String : The `printerDriver` parameter is the driver reference. (optional)  
	///    eg: 'HP Universal Printing PCL 5'  
	/// 
	/// Returns an object that contains paperSize and tray informations :  
	/// ``` javascript
	/// {  
	///   "paperSize": [  
	///     {  
	///       "id": 1,  
	///       "name": "Letter"  
	///     },  
	///     {  
	///       "id": 8,  
	///       "name": "A3"  
	///     },  
	///     {  
	///       "id": 9,  
	///       "name": "A4"  
	///     },  
	///     ...  
	///   ],  
	///   "bac": [  
	///     {  
	///       "id": 15,  
	///       "name": " Sélection automatique"  
	///     },  
	///     {  
	///       "id": 257,  
	///       "name": " Printer auto select"  
	///     },  
	///     ...  
	///   ]  
	/// }  
	/// ```
	/// 
	getAdvancedParameters: function(_, printerName, printerPort, printerDriver) {
		return this.communicator.send_ND_MORE_PRINTER(_, printerName, printerPort, printerDriver);
	},
	
	/// -------------
	/// ## getExtraParameters :
	/// ``` javascript
	/// var extra = printClient.getExtraParameters(_, '\\172.28.8.4\HP3390-grenoble', '172.28.8.151', 'HP Universal Printing PCL 5', 9);  
	/// ```
	/// Retrieve a paper size.  
	/// 
	/// * String : The `printerName` parameter is the name of the printer.  
	///    eg: '\\172.28.8.4\HP3390-grenoble'  
	/// * String : The `printerPort` parameter is the port definition of the printer. (optional)  
	///    eg: '172.28.8.151'  
	/// * String : The `printerDriver` parameter is the driver reference. (optional)  
	///    eg: 'HP Universal Printing PCL 5'  
	/// * Number : The `printerPaperSize` parameter is the id of paperSize.  
	///            This id could be retrieve with 'getExtraParameters' function.  
	///    eg: '9' for A4 paper  
	/// 
	/// Returns an object that contains width and length of selected paper :  
	/// ``` javascript
	/// 	{  
	/// 	  "$width": 2100,  
	/// 	  "$length": 2970  
	/// 	}  
	/// ```
	/// 
	getExtraParameters: function(_, printerName, printerPort, printerDriver, printerPaperSize) {
		return this.communicator.send_ND_EXTRA_PRINTER(_, printerName, printerPort, printerDriver, printerPaperSize);
	},
	
	/// -------------
	/// ## listPrinters :
	/// ``` javascript
	/// var list = printClient.listPrinters(_);  
	/// ```
	/// Retrieve the list of printers defined on print server.  
	/// 
	/// Returns a javascript object :  
	/// ``` javascript
	/// {  
	///   "_NbPrinters": 3,  
	///   "_PrinterName000": "\\\\172.28.8.4\\HP3390-grenoble",  
	///   "_PrinterName001": "Microsoft XPS Document Writer",  
	///   "_PrinterName002": "\\\\172.28.8.4\\KONICA Grenoble"  
	/// }  
	/// ```
	/// 
	listPrinters: function(_) {
		return this.communicator.send_ND_LIM(_);
	},
	
	/// -------------
	/// ## launchReport :
	/// ``` javascript
	/// var seqId = printClient.launchReport(_, properties);  
	/// ```
	/// Launch a report.  
	/// 
	/// * Object : The `properties` parameter is a JSON object that contains severals report informations.
	///            '__wJobID' property is the id that will be used by 'getState' and 'getReport' functions.  
	/// 
	/// ``` javascript
	/// {  
	///   "_FormatExport": "29",  
	///   "__REPORT": "TABCOUNTRY.rpt",  
	///   "__DESTINATION": "3",  
	///   "__TYPDBA": "1",  
	///   "__DBDATABASE": "X3DVLP",  
	///   "__DBUSER": "SUPERV",  
	///   "__DBPASSWORD": "password",  
	///   "__WSTATION": "host.sagefr.adinternal.com",  
	///   "__CDUSER": "USR",  
	///   "__ADXSOL": "SOLSUPV6",  
	///   "__APPLICATION": "SUPERV;sodaix02;17000",  
	///   "__APPRPT": "SUPERV;sodaix02;17000",  
	///   "__RPTLAN": "FRA",  
	///   "X3DOS": "SUPERV;sodaix02;17000;150;FRA",  
	///   "__JOBLINKED": "",  
	///   "__REQUETE": "25561900",  
	///   "_Orientation": "0",  
	///   "_PaperSize": "44",  
	///   "X3CLI": "Superviseur 140",  
	///   "X3EDT": "Etat Sage X3 Entreprise Copyright Sage",  
	///   "X3ETA": "TABCOUNTRY",  
	///   "X3TIT": "Pays",  
	///   "X3OPE": "User",  
	///   "X3USR": "USR",  
	///   "X3LAN": "FRA",  
	///   "X3SIT1": "*",  
	///   "X3SIT2": "z",  
	///   "X3PRF": "ADMIN",  
	///   "X3FCT": "",  
	///   "X3SIT": "",  
	///   "paysdeb": " ",  
	///   "paysfin": "zzzzzzzzzz",  
	///   "impselections": "0",  
	///   "año": "",  
	///   "__wJobID": "d22e7432-aa04-4a67-8b5f-352bc9bca209"  
	/// }  
	/// ```
	/// 
	/// Returns a Number that represents the sequence id on print server :  
	/// 
	launchReport: function(_, properties) {
		return this.communicator.send_ND_NDOUVIMP(_, properties);
	},
	
	/// -------------
	/// ## cancelReport :
	/// ``` javascript
	/// printClient.cancelReport(_, seqId);  
	/// ```
	/// Cancel a launched report.  
	/// 
	/// * Number : The `seqId` parameter is the sequence id on print server that is corresponding to the stacked report.  
	/// 
	/// Returns nothing.  
	/// 
	cancelReport: function(_, seqId) {
		return this.communicator.send_ND_DELETEREPORT(_, seqId);
	},
	
	/// -------------
	/// ## getState :
	/// ``` javascript
	/// var status = printClient.getState(_, jobId);  
	/// ```
	/// Get report status.  
	/// 
	/// * Number : The `jobId` parameter is the id on print server that is corresponding to the report.  
	/// 
	/// List of status codes :  
	/// ```
	/// 	99 : unexpected error  
	/// 	98 : unknow job  
	/// 	97 : internal error  
	/// 	0 : job started  
	/// 	1 : read DB pending  
	/// 	2 : read finished  
	/// 	3 : read canceled  
	/// 	4 : job stacked  
	/// 	5 : job finished  
	/// 	6 : job failed  
	/// 	7 : job canceled 
	/// ```
	/// 
	/// Returns a javascript object that contains a status code and a message : 
	/// ``` javascript
	/// 	{  
	/// 	  "code": 5,  
	/// 	  "message": ""  
	/// 	}  
	/// ```
	/// 
	getState: function(_, jobId) {
		return this.communicator.send_ND_GETSTATEREPORT(_, jobId);
	},
	
	/// -------------
	/// ## getReport :
	/// ``` javascript
	/// var report = printClient.getReport(_, jobId);  
	/// ```
	/// Get report content.  
	/// 
	/// * Number : The `jobId` parameter is the id on print server that is corresponding to the report.  
	/// 
	/// Returns a javascript object : 
	/// ``` javascript
	/// 	{
	/// 	  "length": 47463,
	/// 	  "binary": "%PDF-1.7 ..."
	/// 	}
	/// ```
	/// 
	getReport: function(_, jobId) {
		return this.communicator.send_ND_GETRESULTREPORT(_, jobId);
	},
	
	/// -------------
	/// ## disconnect :
	/// ``` javascript
	/// printClient.disconnect(_);  
	/// ```
	/// Close socket with print server.  
	/// This function MUST be called at the end of a process.
	/// 
	/// Returns nothing  
	/// 
	disconnect: function(_){
		try {
			if (this.stream && this.communicator) {
				this.communicator.disconnect(_);
				this.stream = null;
			}
		}catch(e) {
			this.stream.end();
			this.stream = null;
			console.error("SrvImp disconnection error: "+e.stack);
			throw e;
		}
	},
});
