"use strict";
var helpers = require('syracuse-core/lib/helpers');
var PrintComm = require('syracuse-x3/lib/print/client/PrintComm').printComm;
var streams = require('streamline/lib/streams/streams');


var PrintClient = exports.PrintClient = helpers.defineClass(function(_, hostname, port) {
	this.hostname = hostname;
	this.port = port;
	this.pid = this._connect(_);
}, null, {

	getAllPrinters: function(_) {
		return this.communicator.send_ND_ALL_PRINTER(_);
	},
	
	getAdvancedParameters: function(_, printerName, printerPort, printerDriver) {
		return this.communicator.send_ND_MORE_PRINTER(_, printerName, printerPort, printerDriver);
	},
	
	getExtraParameters: function(_, printerName, printerPort, printerDriver, printerPaperSize) {
		return this.communicator.send_ND_EXTRA_PRINTER(_, printerName, printerPort, printerDriver, printerPaperSize);
	},
	
	launchPrint: function(_, properties) {
		return this.communicator.send_ND_NDOUVIMP(_, properties);
	},
	
	cancelPrint: function() {
		
	},
	
	getState: function(_) {
		
	},
	
	getReport: function() {
		
	},
	
	
	// TODO : Manage connection errors
	_connect: function(_){
		try{
			this.stream = streams.tcpClient(this.port, this.hostname).connect(_);
			this.communicator = new PrintComm(_, this.stream);
			return this.communicator.connect(_);
		}catch(e) {
			console.error("Error connect: "+e.stack);
			this._disconnect(_);
			throw e;
		}
	},
	
	_disconnect: function(_){
		try {
			if (this.stream && this.communicator) {
				this.communicator.disconnect(_);
			}
			if (this.stream) {
				this.stream.end();
				this.stream = null;
			}
		}catch(e) {
			console.error("Error disconnect: "+e.stack);
			throw e;
		}
	},
	
	_Request: function(_){
		
	},

	
});
