"use strict";
var helpers = require('syracuse-core/lib/helpers');
var PrintComm = require('syracuse-x3/lib/print/client/PrintComm').printComm;
var streams = require('streamline/lib/streams/streams');


var PrintClient = exports.PrintClient = helpers.defineClass(function(_, hostname, port) {
	this.hostname = hostname;
	this.port = port;
	
	this.technoVers = {
			UIAction: 'SetTechnoVers',
			Version: '100.001',
			Id: '2',
			Protocol: '150067',
	};
	this.srvTechnoVers = null;
	
	// Connection
	try{
		this.stream = streams.tcpClient(this.port, this.hostname).connect(_);
		this.communicator = new PrintComm(_, this);
		this.pid = this.communicator.connect(_);
	}catch(e) {
		console.error("SrvImp connection error: "+e.stack);
		this._disconnect(_);
		throw e;
	}
}, null, {

	getAllPrinters: function(_) {
		return this.communicator.send_ND_ALL_PRINTER(_);
	},
	
	getAdvancedParameters: function(_, printerName, printerPort, printerDriver) {
		return this.communicator.send_ND_MORE_PRINTER(_, printerName, printerPort, printerDriver);
	},
	
	getExtraParameters: function(_, printerName, printerPort, printerDriver, printerPaperSize) {
		return this.communicator.send_ND_EXTRA_PRINTER(_, printerName, printerPort, printerDriver, printerPaperSize);
	},
	
	listPrinters: function(_) {
		return this.communicator.send_ND_LISTPRINTER(_);
	},
	
	launchReport: function(_, properties) {
		return this.communicator.send_ND_NDOUVIMP(_, properties);
	},
	
	cancelReport: function(_, seqId) {
		return this.communicator.send_ND_DELETEREPORT(_, seqId);
	},
	
	getState: function(_, jobId) {
		return this.communicator.send_ND_GETSTATEREPORT(_, jobId);
	},
	
	getReport: function(_, jobId) {
		return this.communicator.send_ND_GETRESULTREPORT(_, jobId);
	},
	
	disconnect: function(_){
		try {
			if (this.stream && this.communicator) {
				this.communicator.disconnect(_);
				this.stream = null;
			}
		}catch(e) {
			this.stream.end();
			this.stream = null;
			console.error("SrvImp disconnection error: "+e.stack);
			throw e;
		}
	},
});
