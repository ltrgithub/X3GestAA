var helpers = require("syracuse-core/lib/helpers");

function contains(list, key, val) {
	return list.some(function(elt) {
		return elt[key] === val;
	});
}

var Entity = exports.Entity = helpers.defineClass(function(ctx, id, entityIndexBaseOne, entityType) {
	this.ctx = ctx;
	this.id = id;
	this.entityIndexBaseOne = entityIndexBaseOne;
	this.entityType = entityType;
	return; // SEE LATER
	forceServerValueModification(false);
	// AlphaNum
	var wSB = new StringBuilder(16);
	var w26E1 = pEntityIndexBaseOne / 26;
	if (w26E1 > 0) {
		wSB.append((char)('@' + w26E1));
		wSB.append((char)('@' + pEntityIndexBaseOne % 26));
	} else {
		wSB.append((char)('@' + pEntityIndexBaseOne));
	}
	pEntityIdxAlpha = wSB.toString();
	// force change, this method perform update if typeJson is sepcified else we need to forceChange again
	forceChange();
}, null, {

});

var StackedWindow = exports.StackedWindow = helpers.defineClass(function(ctx, windowId, functionId, stamp, entityIndexBaseOne) {
	Entity.call(this, ctx, windowId, entityIndexBaseOne, "WINDOW");
	this.ctx = ctx;
	this.functionId = functionId;
	this.stamp = stamp;
	this.localIndexBaseZero = entityIndexBaseOne - 1;
	this.localMenus = [];
	this.screens = [];
	this.dataSrcs = [];
	this.leftLists = [];
	return; // SEE LATER
	if (windowId !== "&ROOT") {
		loadDesrDom(aWindowId, false);
	}
	if (hasDescrDom()) {
		var timestamp = pDescrDom.getDocumentElement().getAttribute("TIM");
		if (timestamp == null || timestamp !== aStamp) {
			//reload description
			loadDesrDom(aWindowId, true);
			aStamp = pDescrDom.getDocumentElement().getAttribute("TIM");
		}
		pAdapiWindow = instanciate(pDescrDom);
		initLocalMenus();
		initAdapiScreens();
		initLeftLists();
	}
}, Entity, {

});

var MenuWin = exports.MenuWin = helpers.defineClass(function(ctx, actionId, flag, label, menuId, rank, adxId, acc, sessMenu) {
	this.ctx = ctx;
	this.actId = actionId;
	this.flag = flag;
	this.label = label;
	this.menuId = menuId;
	this.rank = rank;
	this.adxId = adxId;
	this.rank = rank;
	this.keyboardAcc = acc;
	// 3 types - 0 : container - 1: élément - 2: Séparateur
	this.type = !label ? 2 : (flag & 0x08) >> 3;
	// Notification uniquement pour menus sessions
	// Les menus fenêtre sont rattachsé à la fenêtre puis sérialisés dans le toJson de la fenêtre
	// En dernier
	if (sessMenu) {
		this.typeJsonNode = "SESSIONMNU";
	}
}, null, {

});

var X3Reply = exports.X3Reply = helpers.defineClass(function(ctx) {
	this.ctx = ctx;
	this.pushedWindows = [];
	this.popedWindows = [];
	this.winMenus = [];
}, null, {
	addMenuWin: function(flag, actionId, label, menuId, rank, adxId, accelerateur) {
		var winMenu = menuId == 307 || contains(this.winMenus, "menuId", menuId);
		var menu = new MenuWin(this.ctx, actionId, flag, label, menuId, rank, adxId, accelerateur, !winMenu);
		if (winMenu) {
			this.winMenus.push(menu);
		}
	}
});

var Context = exports.Context = helpers.defineClass(function(stream, handlers) {
	this.stream = stream;
	this.handlers = handlers;
	this.windows = [];
	this.reply = new X3Reply(this);
}, null, {})
