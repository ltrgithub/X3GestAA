"use strict";
var helpers = require('syracuse-core/lib/helpers');
var httpClient = require("syracuse-httpclient/lib/httpClient");
var x3helpers = require('syracuse-x3/lib/helpers');

var localConfig = x3helpers.config("x3fusion", null, {});
var trace = x3helpers.config("cache.trace", localConfig);

var CvgCacheManager = exports.CvgCacheManager = helpers.defineClass(function(_) {
	this.cache = {};
}, null, {


	getResource: function(_, url, stamp, headers) {

		var cacheCtrl, maxAge, lastmodified;
		if (stamp) {
			lastmodified = new Date(stamp.substr(0, 4), parseInt(stamp.substr(4, 2), 10) - 1, stamp.substr(6, 2), stamp.substr(8, 2), stamp.substr(10, 2), stamp.substr(12, 2));
			maxAge = (new Date()).getTime() - (lastmodified.getTime() + 1000 * 60 * 60 * 24);
			maxAge = maxAge <= 0 ? 0 : Math.round(maxAge / 1000);
			cacheCtrl = "max-age=" + maxAge + ", s-max-age=" + maxAge + ", must-revalidate, proxy-revalidate";
			trace && trace("\n---------------------------------------");
			trace && trace("\nResource not modified since " + lastmodified.toGMTString() + ".\nCache-Control: " + cacheCtrl);
			trace && trace("\n---------------------------------------");
		}

		headers = headers || {};
		if (cacheCtrl) {
			headers["Cache-Control"] = cacheCtrl;
		}
		if (this.cache && this.cache[url]) {
			headers["If-None-Match"] = this.cache[url].etag;
			headers["Accept-Encoding"] = "utf-8";
		}
		var opt = {
			method: "GET",
			url: url,
			headers: headers
		};

		var request = httpClient.httpRequest(_, opt);
		var response = request.end().response(_);
		response.setEncoding('utf8');
		var etag = response._response.headers.etag;
		var body = response.readAll(_);
		trace && trace("HTTP response for '" + url + "':\nStatus Code:" + response.statusCode + "\nHeaders: " + JSON.stringify(response.headers, null, 2) + (body ? "\nBody : " + body.substr(0, 150) + " [...]" : ""));
		trace && trace("\n---------------------------------------\n");
		if (response.statusCode === 200 && body) {
			this.cache[url] = {
				descr: body,
				etag: etag
			};
			return body;
		} else if (response.statusCode === 304) {
			return this.cache[url].descr;
		} else {
			throw new Error(response.statusCode + ": (url:" + url + ") " + body);
		}

	}


});