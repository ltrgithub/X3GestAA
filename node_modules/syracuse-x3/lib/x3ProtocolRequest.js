function Request(wnd, len, data) {
	this.wnd = wnd;
	this.len = len;
	this.pos = 0;
	this.data = data;
}

Request.prototype.peek = function() {
	return this.pos < this.len ? this.data[this.pos] : -1;
}
Request.prototype.nextByte = function() {
	return this.pos < this.len ? this.data[this.pos++] : 0;
}
Request.prototype.nextShort = function() {
	return this.pos < this.len - 1 ? (this.data[this.pos++] << 8) | this.data[this.pos++] : 0;
}
Request.prototype.nextLong = function() {
	return this.pos < this.len - 3 ? (this.data[this.pos++] << 24) | (this.data[this.pos++] << 16) //
	| (this.data[this.pos++] << 8) | this.data[this.pos++] : 0;
}

Request.prototype.peekShort = function() {
	var pos = this.pos,
		val = this.nextShort();
	this.pos = pos;
	return val;
}

Request.prototype.nextLongLong = function() {
	return this.pos < this.len - 7 ? (this.nextLong() << 32) | this.nextLong() : 0;
}
Request.prototype.nextIst = function() {
	return this.pos < this.len - 5 ? (this.nextLong() << 32) | this.nextShort() : 0;
}
Request.prototype.nextString = function() {
	var len = this.nextShort() - 2; // next short is included in byte count!
	var nchars = this.nextShort();
	var str = this.data.slice(this.pos, this.pos + len).toString('utf8');
	this.pos += len;
	if (str.length < nchars) throw new Error("bad string: expected " + nchars + ", got " + str.length);
	if (str.length > nchars) {
		console.log("string too long: " + (str.length - nchars) + " extra, ignoring: '" + str.substring(nchars) + "'");
		str = str.substring(0, nchars);
	}
	return str;
}
Request.prototype.nextBuf = function() {
	var len = this.nextShort();
	//console.log("nextBuf len=" + len + ", pos=" + this.pos + ", data.len=" + this.data.length);
	//console.log(this.data.slice(this.pos));
	var buf = this.data.slice(this.pos, this.pos + len);
	this.pos += len;
	return buf;
}
Request.prototype.nextClob = function() {
	if (this.pos !== 0) throw new Error("invalid call: pos=" + this.pos);
	var str = this.data.toString('utf8');
	this.pos = this.len;
	return str;
}
Request.prototype.ensure = function(_, ctx, len) {
	var missing = this.pos + len - this.data.length
	if (missing > 0) this.data = Buffer.concat([this.data, ctx.stream.read(_, missing)]);
}

exports.Request = Request;