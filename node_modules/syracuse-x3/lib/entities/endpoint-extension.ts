"use strict";
var locale = require('streamline-locale');
var IndexHelper = require("syracuse-search/lib/elasticIndex").IndexHelper;
var elasticVersion = require("syracuse-search/lib/elasticVersion");
var cvgCacheManager = require('syracuse-x3/lib/cvgCacheManager');

module.exports = {
	$extends: "user",
	$properties: {},
	$relations: {},
	$functions: {
		getFusionPrototype: function(_, options) {
			var url = this.getFusionPrototypeUrl(_, options);
			var respData;
			try {
				var cacheMgr = cvgCacheManager.getCacheManager();
				respData = cacheMgr.getResource(_, url, {
					"accept-charset": "utf-8"
				}, {
					force: true, // force memory cache usage as NDOWIN already got the resource
					ignoreProxy: !this.x3solution(_).proxy(_)
				});
				var pp = this.tryParsePrototype(_, respData.toString("utf8"));
				// TODO: need to change this to use the new base URL
				pp.$baseHelpUrl = [this.getBaseUrl(_, "help/" + locale.current), "{$category}", "{$keyword}"].join("/");
				return pp;
			} catch (e) {
				e.httpStatus = 500;
				e.message = locale.format(module, "prototypeServerError", options.prototypeId, e.message);
				throw e;
			}
		},
		getFusionPrototypeCacheInfos: function(_, options) {
			var url = this.getFusionPrototypeUrl(_, options);
			return cvgCacheManager.getCacheManager().getInfos(url);
		},

	},
	$services: {
		initSearchIndex: {
			$method: "POST",
			$title: "Init search index",
			$isMethod: true,
			$isHidden: true,
			$invocationMode: "async",
			$capabilities: "abort",
			$isDisabled: function(_, instance) {
				return !instance.$uuid;
			},
			$execute: function(_, context, instance) {
				elasticVersion.checkVersion(_, _getUrlSearchEngine(_));

				// launch first on syracuse administration endpoint
				var endpoint = instance._db.fetchInstance(_, instance._db.getEntity(_, "endPoint"), {
					jsonWhere: {
						description: "Syracuse administration"
					}
				});

				function _update(_, ep) {
					var helper = new IndexHelper(ep);

					// data
					var result = helper.updateIndex(_);
					// function
					result = result.continu && helper.updateFunctionIndex(_);
				}

				// launch update for syracuse endpoint
				_update(_, endpoint);

				// endpoint choice
				if (instance.dataset(_) !== "syracuse")
					_update(_, instance);
			}
		},		
	},
};