"use strict";

var globals = require('streamline/lib/globals');

var sadFsq = require('syracuse-x3/lib/clients/sadfsq/sadfsqClient');
var SadFsqClient = sadFsq.SadFsqClient;
var flamegraph = require('streamline-flamegraph/lib/flamegraph');
var x3Transform = require('syracuse-flamegraph/lib/x3Transform');
var ez = require("ez-streams");
var uuid = require("syracuse-core/lib/helpers").uuid;
var pool = require("syracuse-x3/lib/pool");


exports.activate = function(_, context) {
	if (!context.httpSession.x3SessionConfig || !context.httpSession.x3SessionConfig.runtime) {
		context.httpSession.x3SessionConfig = context.httpSession.x3SessionConfig || {};
		var runtimeCfg = context.httpSession.x3SessionConfig.runtime = (context.httpSession.x3SessionConfig.runtime || {});
		runtimeCfg.runtimeLog = true;
		runtimeCfg.logFlag = 5;
		runtimeCfg.dataset = null;
		runtimeCfg.logDir = "TRA";
	}
};

exports.deactivate = function(_, context) {
	if (context.httpSession.x3SessionConfig && context.httpSession.x3SessionConfig.runtime) {
		context.httpSession.x3SessionConfig = {};
	}
};

function generateSvg(_, log) {
	var rlog = ez.devices.buffer.reader(log);
	var data = x3Transform.convert(_, rlog);

	var options = {
		href: "https://github.com/Sage-ERP-X3/Syracuse/tree/master/{0}#L{1}",
		target: "_blank",
		codes: data.codes,
		frames: data.frames,
		frameformat: "{2} ({0}:{1})",
		palette: {
			"io": "rgb(0,255,255)"
		},
		hash: 2
	};
	return flamegraph.makesvg(data.res, options);
};



exports.LogStore = function(_, contentType, userName, processId) {
	this.userName = userName;
	this.login = ("" + this.userName).toLowerCase();
	// this.login = "unknonwn";

	this.contentType = contentType;
	this.uuid = uuid.generate();
	this.buffer = undefined;
	this._processId = processId;
};


var logStore = exports.LogStore.prototype;

logStore.endpoint = function(_) {
	var up = globals.context.session && globals.context.session.getUserProfile(_);
	if (up) return up.selectedEndpoint(_);
};

logStore.processId = function(_) {
	if (!this._processId) {
		try {
			this._processId = pool.getClient(_, globals.context.session, this.endpoint(_)).getProcessId();
		} catch (e) {}
	}
	return this._processId;
};

logStore.sadfs = function(_) {
	if (!this._sadfs) {
		var x3server = this.endpoint(_).x3server(_);
		this._sadfs = new SadFsqClient(_, x3server.serverHost(_), x3server.serverPort(_), null, null, false);
	}
	return this._sadfs;
};

logStore.fileName = function(_) {
	var fileName = "";
	var processId = this.processId(_);
	if (processId) {
		for (var i = 0; i < 100; i++) {
			var options = {
				folder: this.endpoint(_).x3ServerFolder(_),
				path: "TRA",
				name: ["x3diary", this.login, processId, i].join('_'),
				extension: "tra"
			};
			if (this.sadfs(_).exists(_, options)) {
				fileName = options.name;
			} else {
				break;
			}
		}
	}
	return fileName;
};

logStore.fileExists = function(_) {
	return !!(globals.context.session.x3SessionConfig && globals.context.session.x3SessionConfig.runtime && this.fileName(_));
};

logStore.readLog = function(_) {
	var fileName = this.fileName(_);

	if (fileName) {
		var log = this.sadfs(_).readFile(_, {
			folder: this.endpoint(_).x3ServerFolder(_),
			path: "TRA",
			name: fileName,
			extension: "tra"
		}, {
			flag: "r",
			encoding: "utf-8"
		});
		if (log && log.length) {
			return log;
		}
	}
};

logStore.getProperties = function(_) {
	var properties = {
		length: 0,
		contentType: this.contentType,
		fileName: "proxy"
	};

	if (this.buffer == undefined) {
		var log = this.readLog(_);
		if (log) {
			this.buffer = log;
			properties.length = log.length;
			if (this.contentType === "image/svg+xml") {
				var svg = generateSvg(_, log);
				if (svg) {
					this.buffer = svg;
					properties.length = svg.length;
				}
			}
		}
	}
	return properties;
};

logStore.createReadableStream = function(_) {
	return ez.devices.buffer.reader(this.buffer || "");
};
logStore.setFile = function(_, fileName) {};
logStore.read = function(_, len) {};
logStore.write = function(_, buffer, options) {};
logStore.deleteFile = function(_) {};
logStore.close = function(_) {};
logStore.getUuid = function() {
	return this.uuid;
};