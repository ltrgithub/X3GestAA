"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgVariable = require('syracuse-x3/lib/convergence/model/CvgVariable').CvgVariable;
var integer = require('syracuse-core/lib/types/integer');

var MAX_DECIMAL_WHEN_UNKNONW = 10;
var UNKNOWN_DECIMAL = -1;
var X3_DECIMAL_SYMBOL = '.';
var X3_NUMERIQ_MOINS = '-';
var X3_NUMERIQ_PLUS = '+';

var CvgVariableNum = exports.CvgVariableNum = helpers.defineClass(function(srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState) {
	CvgVariable.call(this, srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState);
	this.symbolDecimal = X3_DECIMAL_SYMBOL;
	this.symbolThousand = ' ';
	this.whithSymbolThousand = false;
	this.withoutZero = false;
	this.adjustFormatInfos();
}, CvgVariable, {
	adjustFormatInfos: function() {
		var wFormat = this.format;
		if (this.mustBeFormatted) {
			this.withoutZero = wFormat.isWithoutZero();
			this.whithSymbolThousand = wFormat.isWhithSymbolThousand();
			this.setDecimal(wFormat.nbDecimal);
			var wConfig = this.srcLine.client.clientConfig;
			if (this.whithSymbolThousand) {
				this.symbolThousand = wConfig.getCharParam(CAdonixConfig.NUM_SYMBOL_THOUSAND_KEY);
			}
			if (this.isWithDecimal()) {
				this.symbolDecimal = wConfig.getCharParam(CAdonixConfig.NUM_SYMBOL_DECIMAL_KEY);
			}
		}
	},
	clone: function() {
		var wVariable = new CvgVariableNum(this.srcLine, this.entityIndexBaseOne, this.name, this.id, this.dataType, this.format, this.state);
		wVariable.mustBeFormatted = this.mustBeFormatted;
		wVariable.withoutZero = this.withoutZero;
		wVariable.whithSymbolThousand = this.whithSymbolThousand;
		wVariable.symbolThousand = this.symbolThousand;
		wVariable.symbolDecimal = this.symbolDecimal;
		this.cloneValues(wVariable);
		return wVariable;
	},
	formatDecimals: function(aDecimal, aNbDec) {
		var wResult = null;
		var wLen = 0;
		if (aNbDec == UNKNOWN_DECIMAL) {
			wLen = aDecimal.length;
			if (wLen < MAX_DECIMAL_WHEN_UNKNONW) {
				wResult = aDecimal;
			} else {
				wResult = (aDecimal + new Array(MAX_DECIMAL_WHEN_UNKNONW - aDecimal.toString().length + 1).join('0')).slice(-MAX_DECIMAL_WHEN_UNKNONW);
			}
		} else if (aDecimal == null) {
			wResult = new Array(aNbDec + 1).join('0')
		} else {
			wLen = aDecimal.length;
			if (wLen == aNbDec) {
				wResult = aDecimal;
			} else {
				wResult = (aDecimal + new Array(aNbDec - aDecimal.toString().length + 1).join('0')).slice(-aNbDec);
			}
		}
		return wResult;
	},
	formatHimself: function(aValue) {
		if (!this.mustBeFormatted) {
			return aValue;
		}
		if (this.withoutZero) {
			try {
				var wFloat = parseFloat(aValue);
				if (wFloat == 0) {
					return "";
				}
			} catch (e) {
				return aValue;
			}
		}
		var wInt = null;
		var wDecimals = null;
		var wPos = aValue.indexOf('.');
		if (wPos == -1) {
			wInt = aValue;
		} else {
			wInt = aValue.substring(0, wPos);
			wDecimals = aValue.substring(wPos + 1);
		}
		var wHasDecimal = this.isWithDecimal() && wDecimals != null && wDecimals.length != 0;
		if (wHasDecimal) {
			wDecimals = this.formatDecimals(wDecimals, this.decimals);
		}
		if (this.whithSymbolThousand) {
			wInt = this.formatThousand(wInt, this.symbolThousand);
		}
		var wLen = wInt.length;
		if (wHasDecimal) {
			wLen += 1 + wDecimals.length;
		}
		var wSB = "";
		wSB += wInt;
		if (wHasDecimal) {
			wSB += this.symbolDecimal + wDecimals;
		}
		return wSB;
	},
	formatThousand: function(aInt, aSymbolThousand) {
		var wResult = null;
		if (aInt.length > 3) {
			wResult = integer.format(aInt, "#,###")
		} else {
			wResult = aInt;
		}
		return wResult;
	},
	formatX3ToDisplay: function(aData) {
		if (aData.isNum()) {
			return CvgVariable.prototype.formatX3ToDisplay.call(this, aData);
		} else {
			if (!aData.isNull()) {
				var wMess = getRsrcMess('ERROR_RESU_NOT_NUMERIC', this.id, CvgResu.x3typeToString(aData.resuTyp), this.format.format);
				this.client.addLogicalErrorMess(this, "formatData", this.getAdxId(), wMess);
			}
			return aData.value;
		}
	},
	setServerFormat: function(aFormat) {
		var wInferredState = CvgVariable.prototype.setServerFormat.call(this, aFormat);
		if (this.mustBeFormatted) {
			this.withoutZero = aFormat.isWithoutZero();
			this.whithSymbolThousand = aFormat.isWhithSymbolThousand();
			var wConfig = this.srcLine.client.clientConfig;
			if (this.whithSymbolThousand) {
				this.symbolThousand = wConfig.params['num.symbol.thousand'] || ' ';
			}
			if (this.isWithDecimal()) {
				this.symbolDecimal = wConfig.params['num.symbol.decimal'] || ',';
			}
		}
		return wInferredState;
	},
	unFormatData: function(aValue) {
		if (!this.mustBeFormatted) {
			return aValue;
		}
		if (aValue == null) {
			return null;
		}
		if (aValue.length == 0) {
			return aValue;
		}
		return this.callUnFormater(aValue);
	},
	unformatHimself: function(aValue) {
		var wLen = aValue.length;
		var wSB = "";
		var wCurChar;
		for (wI = 0; wI < wLen; wI++) {
			wCurChar = aValue.charAt(wI);
			if (CvgVariable.isDigit(wCurChar)) {
				wSB += wCurChar;
			} else if (wCurChar == this.symbolDecimal) {
				wSB += this.symbolDecimal;
			} else if (wCurChar == this.symbolThousand) {
				// on le nï¿½glige
			} else if (wCurChar == X3_NUMERIQ_MOINS) {
				wSB += wCurChar;
			} else if (wCurChar == X3_NUMERIQ_PLUS) {
				wSB += wCurChar;
			} else {}
		}
		return wSB;
	}
});