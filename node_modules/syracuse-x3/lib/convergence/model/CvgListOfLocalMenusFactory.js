"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require("syracuse-core/lib/locale");
var Hashtable = Object; //require('syracuse-x3/lib/convergence/Hashtable').Hashtable;
var CvgException = require('syracuse-x3/lib/convergence/model/CvgException').CvgException;


var CvgListOfLocalMenus = exports.CvgListOfLocalMenus = helpers.defineClass(function() {
	Hashtable.call(this);
}, Hashtable, {
	addLocalMenu: function(aLocalMenu) {
		this[aLocalMenu.numId] = aLocalMenu;
	}
});

var CvgLocalMenu = exports.CvgLocalMenu = helpers.defineClass(function(aNumId, aId, aChoices) {
	this.numId = aNumId;
	this.id = aId;
	this.choices = aChoices;
}, null, {
	getLib: function(aChoice) {
		if (aChoice < 1 || aChoice > this.choices.length) {
			var wMess = locale.format("unknown choice={0} : menu [{1}] has [{2}] items", aChoice.toString(), this.id, this.choices.length.toString());
			throw new Error(wMess);
		}
		return this.choices[aChoice - 1]; // base 0 !
	},
});

function extractIntLocalMenuId(aLocalMenuId) {
	aLocalMenuId = aLocalMenuId.substring(1); //pour enlever "M"
	return parseInt(aLocalMenuId, 10);
}

var CvgListOfLocalMenusFactory = exports.CvgListOfLocalMenusFactory = {

	instanciateLocalMenus: function(aRequesterWindow, aWindowDescription, aLocalMenus) {
		var wLocalMenusNodes = aWindowDescription.MENLOC.MENL;
		var wMax = Array.isArray(wLocalMenusNodes) ? wLocalMenusNodes.length : 1;
		if (wLocalMenusNodes && wMax > 0) {
			var wI = 0;
			var wLocalMenuId;
			var wLocalMenuNode;
			var wNbChoices;
			while (wI < wMax) {
				wLocalMenuNode = wMax === 1 ? wLocalMenusNodes : wLocalMenusNodes[wI];
				wLocalMenuId = wLocalMenuNode.$.NAM;
				wNbChoices = parseInt(wLocalMenuNode.$.NBZ, 10);
				var wNumId = extractIntLocalMenuId(wLocalMenuId);
				if (aLocalMenus[wNumId] != null) {
					throw new CvgException(aRequesterWindow.client, null, "CANT_ADD_LOCALMENU - AlreadyExist");
				}
				aLocalMenus.addLocalMenu(this.instanciateLocalMenu(aRequesterWindow.client, wNumId, wLocalMenuId, wNbChoices, wLocalMenuNode));
				wI++;
			}
		}
	}
}

CvgListOfLocalMenusFactory.instanciateLocalMenu = function(aClient, aId, aLocalMenuID, aNbChoices, aLocalMenuNode) {
	var wLocalMenu;
	var wChoicesNodes = aLocalMenuNode.V;
	var wChoiceNode;
	var wMax = Array.isArray(wChoicesNodes) ? wChoicesNodes.length : 1;
	var wChoices = [];
	var wI = 0;
	while (wI < wMax) {
		wChoiceNode = wMax === 1 ? wChoicesNodes : wChoicesNodes[wI];
		wChoices[wI] = wChoiceNode;
		wI++;
	}
	wLocalMenu = new CvgLocalMenu(aId, aLocalMenuID, wChoices);
	return wLocalMenu;
}