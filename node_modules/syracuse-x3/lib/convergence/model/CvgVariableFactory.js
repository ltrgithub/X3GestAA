"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgFormat = require('syracuse-x3/lib/convergence/model/CvgFormat').CvgFormat;
var CvgVariableNum = require('syracuse-x3/lib/convergence/model/CvgVariableNum').CvgVariableNum;
var CvgVariableCheck = require('syracuse-x3/lib/convergence/model/CvgVariableCheck').CvgVariableCheck;
var CvgVariableRadio = require('syracuse-x3/lib/convergence/model/CvgVariableRadio').CvgVariableRadio;
var CvgVariableCombo = require('syracuse-x3/lib/convergence/model/CvgVariableCombo').CvgVariableCombo;
var CvgVariableRTF = require('syracuse-x3/lib/convergence/model/CvgVariableRTF').CvgVariableRTF;
var CvgVariableIMG = require('syracuse-x3/lib/convergence/model/CvgVariableIMG').CvgVariableIMG;
var CvgVariableBlob = require('syracuse-x3/lib/convergence/model/CvgVariableBlob').CvgVariableBlob;
var CvgVariablePass = require('syracuse-x3/lib/convergence/model/CvgVariablePass').CvgVariablePass;
var CvgVariableIcone = require('syracuse-x3/lib/convergence/model/CvgVariableIcone').CvgVariableIcone;
var CvgVariableAlpha = require('syracuse-x3/lib/convergence/model/CvgVariableAlpha').CvgVariableAlpha;
var CvgVariablePeriod = require('syracuse-x3/lib/convergence/model/CvgVariablePeriod').CvgVariablePeriod;
var CvgVariableDate = require('syracuse-x3/lib/convergence/model/CvgVariableDate').CvgVariableDate;
var CvgEntity = require('syracuse-x3/lib/convergence/model/CvgEntity').CvgEntity;
var CvgResu = require('syracuse-x3/lib/convergence/types/CvgResu').CvgResu;
var CvgResuTdo = require('syracuse-x3/lib/convergence/types/CvgResu').TDO;


var VAR_TYPE_CHECK = 11;
var VAR_TYPE_ICONE = 29;
var VAR_TYPE_IMAGE = 17;
var VAR_TYPE_OFFICE = 33;
var VAR_TYPE_PASSWORD = 30;
var VAR_TYPE_RADIOGROUP = 9;
var VAR_TYPE_RICHEDIT = 8;

function extractType(aValue) {
	var typ = parseInt(aValue.substring(0, aValue.indexOf(',')), 10);
	return isNaN(typ) ? -1 : typ;
}

function extractNbDecimalsFromSZ(aSZ) {
	var wPos = aSZ.indexOf('.');
	if (wPos > -1) {
		return parseInt(aSZ.substring(wPos + 1), 10);
	} else {
		return 0;
	}
}

function extractNbIntsFromSZ(aSZ) {
	var wPos = aSZ.indexOf('.');
	if (wPos > -1) {
		return parseInt(aSZ.substring(0, wPos), 10);
	} else {
		return parseInt(aSZ, 10);
	}
}


exports.CvgVariableFactory = {
	instanciateLeftListColumn: function(aRequester, srcLine, aEntityIndexBaseOne, aVarId) {
		var wEF = CvgFormat.newEmptyFormat();

		var wVariable = new CvgVariableAlpha(srcLine, aEntityIndexBaseOne, aVarId, aVarId, CvgResuTdo["STRU"], wEF, CvgEntity.x3AffModeToEntityState(CvgEntity.X3VAR_MAF_SAISI));

		return wVariable;
	},

	instanciateVariable: function(aRequester, srcLine, aEntityIndexBaseOne, aId, aVariableNode, aForcedTDO) {
		var client = aRequester.client;
		var wVarId = aVariableNode.$.ID;
		var wVarName = aVariableNode.$.NAM;
		var wInputType = extractType(aVariableNode.$.TYP);
		var wDataType = aForcedTDO !== 0 ? aForcedTDO : extractType(aVariableNode.$.TDO);
		var wSZ = aVariableNode.$.SZ;
		var wInts = extractNbIntsFromSZ(wSZ);
		var wDecimals = extractNbDecimalsFromSZ(wSZ);
		var wVarSize = aForcedTDO !== 0 ? 99 : wInts + wDecimals;
		var wFormatDef = aForcedTDO !== 0 ? "" : aVariableNode.$.FMT;
		var wFormat = new CvgFormat(wFormatDef);
		var wEntityState = CvgEntity.x3AffModeToEntityState(extractType(aVariableNode.$.MAF));
		var wX3LocalMenu = null;
		var wConfig = client.clientConfig;
		var wVariable = null;
		switch (wDataType) {
			case CvgResuTdo["SHORT"]:
			case CvgResuTdo["INT"]:
			case CvgResuTdo["DCB"]:
				wVariable = new CvgVariableNum(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState);
				wVariable.setDecimal(wDecimals);
				break;
			case CvgResuTdo["LIB"]:
				var wLocalMenuId = parseInt(aVariableNode.$.MNU, 10);
				wX3LocalMenu = aRequester.finLocalMenu(wLocalMenuId);
				if (wInputType === VAR_TYPE_CHECK) {
					wVariable = new CvgVariableCheck(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState, wX3LocalMenu);
				} else if (wInputType === VAR_TYPE_RADIOGROUP) {
					wVariable = new CvgVariableRadio(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState, wX3LocalMenu);
				} else {
					wVariable = new CvgVariableCombo(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState, wX3LocalMenu);
				}
				break;
			case CvgResuTdo["STRU"]:
				if (wInputType === VAR_TYPE_RICHEDIT) {
					wVariable = new CvgVariableRTF(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState);
				} else if (wInputType === VAR_TYPE_IMAGE) {
					wVariable = new CvgVariableIMG(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wVarSize, wFormat, wEntityState);
				} else if (wInputType === VAR_TYPE_PASSWORD) {
					wVariable = new CvgVariablePass(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState);
				} else if (wInputType === VAR_TYPE_ICONE) {
					wVariable = new CvgVariableIcone(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState);
				} else {
					wVariable = new CvgVariableAlpha(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState);
				}
				break;
			case CvgResuTdo["DATE"]:
				var wLocalformat = wConfig.dateFormat;
				var wDatePivot = wConfig.datePivot;
				wFormat = this.valiDateFormat(client, wConfig, wFormat);
				if (aVariableNode.$.DAI != null) {
					wVariable = new CvgVariablePeriod(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState, wLocalformat, wDatePivot);
				} else {

					wVariable = new CvgVariableDate(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState, wLocalformat, wDatePivot);
				}
				break;
			case CvgResuTdo["CLOB"]:
				wVariable = new CvgVariableRTF(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState);
				break;
			case CvgResuTdo["BLOB"]:
				if (wInputType === VAR_TYPE_OFFICE) {
					console.log("Office blob are ignored in fusion client");
					wVariable = new CvgVariableBlob(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wVarSize, wFormat, wEntityState);
				} else {
					wVariable = new CvgVariableIMG(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wVarSize, wFormat, wEntityState);
				}
				break;
			default:
				wVariable = new CvgVariableAlpha(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState);
				break;
		}
		wVariable.mustBeFormatted = wConfig.isInteractiveSession && aForcedTDO === 0;
		if (aVariableNode.$.STX != null) {
			wVariable.setStyleFromDescr(aVariableNode.$.STX);
		}
		return wVariable;
	},

	valiDateFormat: function(aClient, aConfig, aFormat) {
		if (!aFormat.isValid()) {
			aFormat = new CvgFormat(this.valiServerDateFormatDef(aConfig.serverDateFormat));
		} else if (!aFormat.hasFormatChars()) {
			aFormat.setFormatChars(aConfig.serverDateFormat);
		}
		return aFormat;
	},

	valiServerDateFormatDef: function(aFormatDef) {
		if (aFormatDef == null) {
			aFormatDef = "";
		} else if (aFormatDef.indexOf(':') < 0) {
			aFormatDef = "DZz:" + aFormatDef;
		}
		return aFormatDef;
	}
}