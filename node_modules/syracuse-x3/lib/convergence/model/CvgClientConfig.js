"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgVariableBlob = require('syracuse-x3/lib/convergence/model/CvgVariableBlob').CvgVariableBlob;
var CvgDiagnose = require('syracuse-x3/lib/convergence/model/CvgDiagnose').CvgDiagnose;


var _checkCtx=["x3User","x3Host","x3Port","x3Lang","x3HttpPub","x3Solution","x3Folder"];
var _PE_AVAILABLE = "PEAvailable";
var _DEV_RPT_MODE = "DevRptMode";
var _APP_HOSTNAME = "AppHostName";

var CvgClientConfig = exports.CvgClientConfig = helpers.defineClass(function(client, params) {
	this.client=client;
	this._params = params || {};
	this._syraPrefs = params && params.syraPrefs || {};
	this._addMissingPrefs(this._syraPrefs, true);
	this._initDefCfg();
	this.fmtLocalCtrl=this._params.clientSettings.format.localCtrl;
	this.fmtLocalFormat=this._params.clientSettings.format.localFormat;
	this.modePLAY = "PLAY" == this._params.recMode;
}, null, {
	getParam:function(key){
		return this._params[key];
	},
	_addMissingPrefs: function(target, initParams) {
		var self = this;
		function fusionPrefAdd(syraId, cfgId, def) {
			var s = target[syraId];
			if (!s) s = def.toString();
			if ("dateOrder" === syraId) {
				// 0	Month-Day-Year - 1	Day-Month-Year - 2	Year-Month-Day
				s.toLowerCase();
				if (s.charAt(0) === 'd') {
					s = "1";
				} else if (s.charAt(0) === 'm') {
					s = "0";
				} else if (s.charAt(0) === 'y') {
					s = "2";
				} else {
					s = "0";
				}
			}
			target[syraId] = s;
			if (initParams && self._params[cfgId] == undefined) self._params[cfgId] = target[syraId];
		}
		fusionPrefAdd("dateOrder", "IDate", "mdy"); // Month-Day-Year
		fusionPrefAdd("dateSep", "SDate", "/");
		fusionPrefAdd("decimalSep", "SDecimal", ".");
		fusionPrefAdd("thousandsSep", "SThousand", " ");
		fusionPrefAdd("timeSep", "STime", ":");
	},
	isSameContext: function(context, traceSessions){	// check context for reuse session
		traceSessions && traceSessions("CvgClientConfig.isSameContext\n\t" + JSON.stringify(context));
		if (!context.syraPrefs) context.syraPrefs={};
		this._addMissingPrefs(context.syraPrefs);
		for (var i in _checkCtx) {
			var x=_checkCtx[i];
			if (!context[x]  || context[x] !== this._params[x]) {
				traceSessions && traceSessions("\tContext do not match - param[" + x + "] - contextValue[" + context[x] + "] - configValue[" + this._params[x] + "]");
				return false;
			}
		}
		for (var i in context.syraPrefs) {
			if (context.syraPrefs[i] !== this._syraPrefs[i]) {
				traceSessions && traceSessions("\tSyra Preference: [" + i + "] is not the same : ["+context.syraPrefs[i]+"] !== ["+this._syraPrefs[i]+"]");
				return false;
			}
		}
		traceSessions && traceSessions("\tTrue");
		return true;
	},
	_initDefCfg: function() {
		this._params[_DEV_RPT_MODE] = this._params[_DEV_RPT_MODE] || "OFF";
		this._params[_PE_AVAILABLE] = this._params[_PE_AVAILABLE] || "0";
		this._params[_APP_HOSTNAME] = this._params[_APP_HOSTNAME] || this._params.server;
	},
	formaterConfig: function(){
		//pivotDate is set by sessionSettings
		var self=this;
		return {
			dateOrder : parseInt(this._params.IDate,10),
			dateSep : this._params.SDate,
			decimalSep : this._params.SDecimal,
			thousandSep : this._params.SThousand,
			vOn : true,
			zOn:true,
			tracer:function(txt){
				// log skipped format errors
				new CvgDiagnose(self.client, 'WARNING', 99, txt, null, null, "Formatter" , null, true);	
			}
		}		
	},
	toString: function() {
		return "";
	},
});