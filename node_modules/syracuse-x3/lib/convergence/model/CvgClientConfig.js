"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgVariableBlob = require('syracuse-x3/lib/convergence/model/CvgVariableBlob').CvgVariableBlob;
/**
 * Collection de param�tres de configuration d'un client Cvg.
 * <p>
 * Cette collection est constitu� avant l'ouverture. Certain des param�tres
 * contenus sont mis � jour pendant la dur�e de vie du client.
 * </p>
 * <p>
 * Evolution majeur en 140: la classe "CvgConfig" devient une d�riv�e de la
 * classe "CAdonixConfig".
 *
 * @author Adonix Grenoble
 * @version 140_003
 */
var CONNECTNUM_KEY = "connection.number";
var DATE_FORMAT_SERVER_KEY = "date.format.server";
var SESSION_WEIGHT_KEY = "session.weight";
var FORMATER_VON_KEY = "formater.von";
var PARAM_xCONNECTNUM = "xCONNECTNUM";
var SERV_PORT_KEY = "adapi.server.port";
var URL_SERVER_BASE_KEY = "url.server.base";
var URL_SERVER_BOB_KEY = "url.server.blob";
var URL_SERVER_REQUEST_KEY = "url.server.request";
var USERHOMEVIRTUALPATH = "webserver.virtualpath.userhome";
var VIRTUALPATHPAGES = "webserver.virtualpath.pages";
var X3SERVER_LEVEL_KEY = "x3server.level";
var X3SERVER_VERSION_KEY = "adonix.version";
var SYRA_PREFS_THOUSANDSEP = "thousandsSep";
var SYRA_PREFS_DECIMALSEP = "decimalSep";
var SYRA_PREFS_DATEORDER = "dateOrder";
var SYRA_PREFS_DATESEP = "dateSep";
var SYRA_PREFS_TIMESEP = "timeSep";
var UI_1_STIME = "STime";

var CvgClientConfig = exports.CvgClientConfig = helpers.defineClass(function(params) {
	this.params = params || {};
	this.serverDebugActive = false;
	this.serverLongWorkActive = false;
	this.syraPreferences = params && params.syraPreferences || {};
	this.fusionSetFormaterPrefs();
	//this.initDefaultConfig();
}, null, {

	fusionPrefAdd: function(syraId, cfgId, def) {
		if (this.syraPreferences[syraId] == undefined) {
			this.syraPreferences[syraId] = def.toString();
		}
	},
	fusionSetFormaterPrefs: function() {
		this.fusionPrefAdd("dateOrder", "IDate", "0"); // Month-Day-Year
		this.fusionPrefAdd("dateSep", "SDate", "/");
		this.fusionPrefAdd("decimalSep", "SDecimal", ".");
		this.fusionPrefAdd("thousandsSep", "SThousand", " ");
		this.fusionPrefAdd("timeSep", "STime", ":");
		this.params[FORMATER_VON_KEY] = "false";
	},
	getFormaterVon: function() {
		return this.params[FORMATER_VON_KEY];
	},
	getRequestServerUrl: function() {
		return this.params[URL_SERVER_REQUEST_KEY];
	},
	getServerDateFormat: function() {
		var wFormat = this.params[DATE_FORMAT_SERVER_KEY];

		return wFormat != null ? wFormat : "";
	},


	getUrlServerBase: function(aSvcId) {

		function _getUrlServerBase() {
			var wUrl = self.params[URL_SERVER_BASE_KEY];
			if (wUrl == null) {
				wUrl = self.getRequestServerUrl();
				if (wUrl != null) {
					var wPos = wUrl.lastIndexOf('/');
					if (wPos > -1) {
						wUrl = wUrl.substring(0, wPos);
					}
				} else {
					wUrl = "";
				}
				self.params[URL_SERVER_BASE_KEY] = wUrl;
			}
			return wUrl;
		}

		var self = this;
		var wSB = "";

		wSB += _getUrlServerBase();
		wSB += '/';
		wSB += aSvcId;
		wSB += '?';
		wSB += PARAM_xCONNECTNUM;
		wSB += '=';
		wSB += this.params[CONNECTNUM_KEY];

		return wSB.toString();
	},
	isInteractiveSession: function() {
		return true;
	},
	getUrlServerBlob: function() {
		var wUrl = this.params[URL_SERVER_BOB_KEY];
		if (wUrl == null) {
			wUrl = this.getUrlServerBase(CvgVariableBlob.SVC_BLOB_ID);
			this.params[URL_SERVER_BOB_KEY] = wUrl == null ? "" : wUrl;
			if (wUrl == null) {
				wUrl = "";
			}
			this.params[URL_SERVER_BOB_KEY] = wUrl;
		}
		return wUrl;
	},
	initDefaultConfig: function() {
		TODO_SUPER.initDefaultConfig();
		if (!this.params[SESSION_WEIGHT_KEY]) {
			this.params[SESSION_WEIGHT_KEY] = "11"; // SESSION NATIVE PRIMARY
		}
		setX3ServerLevel("140_xxx");
	},
	setServerDateFormat: function(aFormat) {
		return this.params[DATE_FORMAT_SERVER_KEY] = aFormat.toString();
	},
	setX3ServerLevel: function(aLevel) {
		this.params[X3SERVER_LEVEL_KEY] = aLevel.toString();
	},
	toString: function() {
		var wSB = "";
//		wSB += CAdonixConfig.prototype.toStringDescr.call(this);
//		CStringFacilities.addInStringDescr(wSB, "ConfigHashCode", hashCode());
		return wSB;
	},
});