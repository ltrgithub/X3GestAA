"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgVariableBlob = require('syracuse-x3/lib/convergence/model/CvgVariableBlob').CvgVariableBlob;
var PE_AVAILABLE = "PEAvailable";
var DEV_RPT_MODE = "DevRptMode";
var APP_HOSTNAME = "AppHostName";

var CvgClientConfig = exports.CvgClientConfig = helpers.defineClass(function(params) {
	this.params = params || {};
	this.printSrv = params.printSrv;	
	this.syraPreferences = params && params.syraPreferences || {};
	this.addPrefsIfMissing(this.syraPreferences, true);
	this.initDefaultConfig();
}, null, {
	addPrefsIfMissing: function(target, initParams) {
		function fusionPrefAdd(syraId, cfgId, def) {
			var s = target[syraId];
			if (!s) {
				s = def.toString();
			}
			if ("dateOrder" === syraId) {
				// 0	Month-Day-Year - 1	Day-Month-Year - 2	Year-Month-Day
				s.toLowerCase();
				if (s.charAt(0) === 'd') {
					s = "1";
				} else if (s.charAt(0) === 'm') {
					s = "0";
				} else if (s.charAt(0) === 'y') {
					s = "2";
				} else {
					s = "0";
				}
			}

			target[syraId] = s;
			if (initParams && self.params[cfgId] == undefined)
				self.params[cfgId] = target[syraId];

		}
		var self = this;
		fusionPrefAdd("dateOrder", "IDate", "mdy"); // Month-Day-Year
		fusionPrefAdd("dateSep", "SDate", "/");
		fusionPrefAdd("decimalSep", "SDecimal", ".");
		fusionPrefAdd("thousandsSep", "SThousand", " ");
		fusionPrefAdd("timeSep", "STime", ":");
	},
	isSameContext: function(context, traceSessions){	// check context for reuse session
		this.addPrefsIfMissing(context.syraPreferences);
		if (!context.user  || context.user !== this.params.user) {
			traceSessions && traceSessions("Username is not the same : ["+context.user+"] !== ["+this.params.user+"]");
			return false;
		}
		if (!context.server || context.server !== this.params.server) {
			traceSessions && traceSessions("Server host is not the same : ["+context.server+"] !== ["+this.params.server+"]");
			return false;
		}
		if (!context.port || context.port !== this.params.port) {
			traceSessions && traceSessions("Server port is not the same : ["+context.port+"] !== ["+this.params.port+"]");
			return false;
		}
		if (context.codeLangIso !== this.params.codeLangIso) {
			traceSessions && traceSessions("Code lang ISO is not the same : ["+context.codeLangIso+"] !== ["+this.params.codeLangIso+"]");
			return false;
		}
		for (var i in context.syraPreferences) {
			if (context.syraPreferences[i] !== this.syraPreferences[i]) {
				traceSessions && traceSessions("Preference: ["+i+"] is not the same : ["+context.syraPreferences[i]+"] !== ["+this.syraPreferences[i]+"]");
				return false;
			}
		}
		return true;

	},
	initDefaultConfig: function() {
		this.params[DEV_RPT_MODE] = this.params[DEV_RPT_MODE] || "OFF";
		this.params[PE_AVAILABLE] = this.params[PE_AVAILABLE] || "0";
		this.params[APP_HOSTNAME] = this.params[APP_HOSTNAME] || this.params.server;
	},
	formaterConfig: function(){
		//pivotDate is set by sessionSettings
		return {
			dateOrder : parseInt(this.params.IDate,10),
			dateSep : this.params.SDate,
			decimalSep : this.params.SDecimal,
			thousandSep : this.params.SThousand,
			vOn : true,
			zOn:true
		}		
	},
	toString: function() {
		return "";
	},
});