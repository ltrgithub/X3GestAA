"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgVariableBlob = require('syracuse-x3/lib/convergence/model/CvgVariableBlob').CvgVariableBlob;
var CvgDiagnose = require('syracuse-x3/lib/convergence/model/CvgDiagnose').CvgDiagnose;

var _checkCtx = ["x3User", "x3Host", "x3Port", "x3Lang", "x3HttpPub", "x3Solution", "x3Folder", "SDate", "IDate", "SThousand", "SDecimal"];
var _PE_AVAILABLE = "PEAvailable";
var _DEV_RPT_MODE = "DevRptMode";
var _APP_HOSTNAME = "AppHostName";

var CvgClientConfig = exports.CvgClientConfig = helpers.defineClass(function(client, params) {
	this.client = client;
	this._initParams(params);
	this.modePLAY = "PLAY" == this._params.recmode;
	this.datePivot = 1957;
}, null, {
	getParam: function(key) {
		return this._params[key];
	},
	isSameContext: function(context, traceSessions) { // check context for reuse session
		traceSessions && traceSessions("CvgClientConfig.isSameContext\n\t" + JSON.stringify(context));
		for (var i in _checkCtx) {
			var x = _checkCtx[i];
			if (!context[x] || context[x] !== this._params[x]) {
				traceSessions && traceSessions("\tContext do not match - param[" + x + "] - contextValue[" + context[x] + "] - configValue[" + this._params[x] + "]");
				return false;
			}
		}
		traceSessions && traceSessions("\tTrue");
		return true;
	},
	_initParams: function(params) {
		this._params = params || {};
		this._params[_DEV_RPT_MODE] = this._params[_DEV_RPT_MODE] || "OFF";
		this._params[_PE_AVAILABLE] = this._params[_PE_AVAILABLE] || "0";
		this._params[_APP_HOSTNAME] = this._params[_APP_HOSTNAME] || this._params.server;
	},
	setDatePivot: function(v) {
		var v = parseInt(v, 10);
		if (!isNaN(v)) this.datePivot = v;
	},
	// Add settings for client
	addUiCliSettings: function(settings) {
		if (!settings) return;
		// datePivot
		settings.datePivot = this.datePivot;
		// dateOrder
		var x = parseInt(this._params.IDate, 10);
		if (isNaN(x)) x = 0;
		settings.dateOrder = x;
		// dateSep
		x = this._params.SDate;
		settings.dateSep = x && x.length == 1 ? x : '/';
		// thousandSep
		x = this._params.SThousand;
		settings.thousandSep = x && x.length == 1 ? x : ',';
		// decimalSep
		x = this._params.SDecimal;
		settings.decimalSep = x && x.length == 1 ? x : '.';
		// timeSep
		x = this._params.STime;
		settings.timeSep = x && x.length == 1 ? x : ':';
	},
	toString: function() {
		return "";
	},
});