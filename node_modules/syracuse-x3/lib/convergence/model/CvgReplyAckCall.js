"use strict";
var helpers = require('syracuse-core').helpers;
var CvgObservable = require('syracuse-x3/lib/convergence/model/CvgObservable').CvgObservable;
var CvgResuTdoLib = require('syracuse-x3/lib/convergence/types/CvgResu').TDO_LIB;

var CvgReplyAckCAll = helpers.defineClass(function(client, errn, errl, errp, errt, errm, resu, arrayOfParam, arrayOfResu) {
	CvgObservable.call(this, client);
	this.errn = errn;
	this.errl = errl;
	this.errp = errp;
	this.errt = errt;
	this.errm = errm;
	this.resu = resu;
	this.arrayOfParam = arrayOfParam;
	this.arrayOfResu = arrayOfResu;

	// En dernier
	this.setJsonType('RPC');

}, CvgObservable, {

	toJSON: function() {

		var result = {};
		if (this.resu != null) {
			result.typ = CvgResuTdoLib[this.resu.type.toString()];
			result.resu = this.resu.value;
		}

		var params = [];
		for (var i in this.arrayOfParam) {
			var param = {};
			if (this.arrayOfParam[i].num != null) param.num = this.arrayOfParam[i].num;

			if (this.arrayOfParam[i].poste != null) param.poste = this.arrayOfParam[i].poste;

			if (this.arrayOfParam[i].resu != null) {
				param.typ = CvgResuTdoLib[this.arrayOfParam[i].resu.type.toString()];
				param.resu = this.arrayOfParam[i].resu.value;
			}

			params.push(param);
		}

		return {
			json: {
				result: {
					errp: this.errp || "",
					errm: this.errm || "",
					errn: this.errn || 0,
					errt: this.errt || 0,
					errl: this.errl || 0
				},
				debugInfos: {
					exceptiondetail: this.arrayOfResu && this.arrayOfResu[0] ? this.arrayOfResu[0].value || '' : '',
					totalduration: this.arrayOfResu && this.arrayOfResu[1] ? this.arrayOfResu[1].value || 0 : 0,
					execduration: this.arrayOfResu && this.arrayOfResu[2] ? this.arrayOfResu[2].value || 0 : 0,
					trace: this.arrayOfResu && this.arrayOfResu[3] ? this.arrayOfResu[3].value || '' : ''
				},
				"return": result,
				params: params
			}
		};

	},

});

// Factory pattern avoids jslint/jshint complaining about using "new" for side effects
exports.create = function(client, errn, errl, errp, errt, errm, resu, arrayOfParam, arrayOfResu) {
	return new CvgReplyAckCAll(client, errn, errl, errp, errt, errm, resu, arrayOfParam, arrayOfResu);
};