"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgObservable = require('syracuse-x3/lib/convergence/model/CvgObservable').CvgObservable;

var CvgImpConfig = helpers.defineClass(function(client, datasource, meta, cvgDiagnoses) {
	CvgObservable.call(this, client);
	this.datasource = datasource;
	this.setJsonType('TARGET');
	this.cvgDiagnoses = cvgDiagnoses;
}, CvgObservable, {
	toJSON: function() {
		var arrayKeys, leni, i, lenj, j, dsCvg = {}, curr;
		if (this.cvgDiagnoses) {
			return {
				"type": "selpr",
				"selpr": {
					"$facet": "configPrinter",
					"$diagnoses": this.cvgDiagnoses.toJSON()
				}
			};
		} else if (this.datasource) {
			arrayKeys = Object.keys(this.datasource);
			for (i = 0, leni = arrayKeys.length; i < leni; i++) {
				dsCvg[arrayKeys[i]] = {};
				if (typeof(curr = this.datasource[arrayKeys[i]]) === 'object' && Array.isArray(curr)) {
					lenj = curr.length;
					dsCvg[arrayKeys[i]].$mvt = [
						[1, 1, lenj]
					];
					dsCvg[arrayKeys[i]].$rcd = [];
					for (j = 0; j < lenj; j++) {
						curr[j].$uuid = j;
						dsCvg[arrayKeys[i]].$rcd.push(curr[j]);
					}
				} else {
					dsCvg[arrayKeys[i]].v = curr;
				}
			}
		}
		return {
			type: "selpr",
			selpr: {
				$facet: "configPrinter",
				$data: dsCvg
			}
		};
	}
});

// Factory pattern avoids jslint/jshint complaining about using "new" for side effects
exports.config = function(client, datasource, meta, cvgDiagnoses) {
	return new CvgImpConfig(client, datasource, meta, cvgDiagnoses);
};

var CvgImpMore = helpers.defineClass(function(client, infos, cvgDiagnoses) {
	CvgObservable.call(this, client);
	if (infos) {
		this.bac = infos.bac;
		this.paperSize = infos.paperSize;
	}
	this.setJsonType('TARGET');
	this.cvgDiagnoses = cvgDiagnoses;
}, CvgObservable, {

	toJSON: function() {
		if (this.cvgDiagnoses) {
			return {
				"type": "selpr",
				"selpr": {
					"$facet": "morePrinter",
					"$diagnoses": this.cvgDiagnoses.toJSON()
				}
			};
		} else {
			return {
				type: "selpr",
				selpr: {
					$facet: "morePrinter",
					$data: {
						paperSource: {
							"setch": this.bac
						},
						paperSize: {
							"setch": this.paperSize
						}
					}
				}
			};
		}
	}
});

// Factory pattern avoids jslint/jshint complaining about using "new" for side effects
exports.more = function(client, infos, cvgDiagnoses) {
	return new CvgImpMore(client, infos, cvgDiagnoses);
};