"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgObservable = require('syracuse-x3/lib/convergence/model/CvgObservable').CvgObservable;

var CvgImpConfig = exports.CvgImpConfig = helpers.defineClass(function(client, datasource, meta) {
	CvgObservable.call(this, client);
	this.datasource = datasource;
	this.setJsonType('TARGET');
}, CvgObservable, {
	toJSON: function() {
		var arrayKeys, leni, i, lenj, j, dsCvg = {}, curr;
		if(this.datasource) {
			arrayKeys = Object.keys(this.datasource);
			for (i = 0, leni = arrayKeys.length; i < leni; i++) {
				dsCvg[arrayKeys[i]] = {};
				if(typeof (curr = this.datasource[arrayKeys[i]]) === 'object' && Array.isArray(curr)) {
					lenj = curr.length;
					dsCvg[arrayKeys[i]].$mvt = [[1, 1, lenj]];
					dsCvg[arrayKeys[i]].$rcd = [];
					for (j = 0; j < lenj; j++) {
						curr[j].$uuid = j;
						dsCvg[arrayKeys[i]].$rcd.push(curr[j]);
					}
				}
				else  {
					dsCvg[arrayKeys[i]].v = curr;
				}
			}
		}
		return {
				type: "selpr",
				selpr: {
					$facet: "configPrinter",
					$data: dsCvg
				}
		};
	},
});

var CvgImpMore = exports.CvgImpMore = helpers.defineClass(function(client, infos) {
	CvgObservable.call(this, client);
	this.bac = infos.bac;
	this.paperSize = infos.paperSize;
	this.setJsonType('TARGET');
}, CvgObservable, {

	toJSON: function() {
		return {
			type: "selpr",
			selpr: {
				$facet: "morePrinter",
				bac: this.bac,
				paperSize: this.paperSize
			}
		};
	},

});