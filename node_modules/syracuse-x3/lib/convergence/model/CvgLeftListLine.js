"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgDataSrcLine = require('syracuse-x3/lib/convergence/model/CvgDataSrcLine').CvgDataSrcLine;
var CvgFormat = require('syracuse-x3/lib/convergence/model/CvgFormat').CvgFormat;
var CvgVariableDate = require('syracuse-x3/lib/convergence/model/CvgVariableDate').CvgVariableDate;
var CvgVariableFactory = require('syracuse-x3/lib/convergence/model/CvgVariableFactory').CvgVariableFactory;

var CvgLeftListLine = exports.CvgLeftListLine = helpers.defineClass(function(aStackedWindow, aLeftList, aId, aNbVariables, localIdx) {
	CvgDataSrcLine.call(this, aStackedWindow, aLeftList, aId, aNbVariables, localIdx);
	var realListelem = null;
	this.cle = null;
	this.isLeftListLine = true;
}, CvgDataSrcLine, {
	clone: function() {
		var localIdx = this.dataSrc.lines.length;
		var wClone = new CvgLeftListLine(this.requester, this.dataSrc, this.id, this.vars.length, localIdx);
		this.cloneVars(wClone);
		return wClone;
	},
	setZeroBaseIdx: function(zeroBaseIdx) {
		this.zeroBaseLineIdx = zeroBaseIdx; // set only idx

	},
	// Voir instanciateLeftListEntry - True si liste plate
	isFlatLeftList: function() {
		var adp = this.dataSrc;
		return adp != null && !adp.isHierarchic() && !adp.isRecursive();
	},
	checkServerModification: function(item) {
		return item.hasServerValueModification();
	},
	isSameCle: function(cle) {
		var bool = true;
		if (this.cle && this.cle.length === cle.length) {
			for (var i = 0; bool & i < cle.length; i++) {
				bool = cle[i].type === this.cle[i].type && cle[i].value === this.cle[i].value;
			}
		}
		return bool;
	},
	setCle: function(aClf) {
		this.cle = aClf;
	},
	setColumns: function(aIdx, aVal, aClf) {
		this.setZeroBaseIdx(aIdx);
		this.setCle(aClf);
		var wI = 0;
		var lastVar = null;
		while (wI < aVal.length && wI < this.vars.length) {
			var resu = aVal[wI];
			var v = this.getVar(wI);
			lastVar = v;
			if (resu.isDate() && !(v instanceof CvgVariableDate)) {
				var newVar = new CvgVariableDate(this, v.entityIndexBaseOne, v.name, v.id, v.dataType, null, v.state, this.win);
				this.setVar(wI, newVar);
				newVar.mustBeFormatted = true;
				newVar.setServerValue(aVal[wI]);
			} else {
				v.setUnModifiableServerValue(aVal[wI]);
			}
			if (wI < aVal.length && this.dataSrc.entrySup.vars[wI] && this.dataSrc.entrySup.vars[wI].dataType !== aVal[wI].type) {

				this.dataSrc.entrySup.vars[wI].dataType = aVal[wI].type;
			}
			wI++;
		}
	},
	setColumnsFormats: function(aFormats) {
		var wI = 0;
		while (wI < this.vars.length && wI < aFormats.length) {
			var wFormatDef = aFormats[wI];
			if (wFormatDef != null && !wFormatDef.isNull()) {
				var wFormat = new CvgFormat(wFormatDef.value);
				if (wFormat.isValid()) {
					var v = this.getVar(wI);
					if (v != null) {
						v.setServerFormat(wFormat);
						v.mustBeFormatted = !wFormat.isLocalMenu();
					}
				}

			}
			wI++;
		}
	},
	setColumnsTitles: function(aTitles) {
		var wI = 0;
		while (wI < this.vars.length && wI < aTitles.length) {
			var wTitre = aTitles[wI];
			if (wTitre != null && !wTitre.isNull()) {
				var v = this.getVar(wI);
				if (v != null) {
					v.setServerTitle(wTitre.value);
				}
			}
			wI++;
		}
	},
	toJSON: function() {
		var object = {};
		// serialize table of resu in a string type-val~
		var mykey = "";
		var i;
		for (i = 0; this.cle && i < this.cle.length; i++) {
			if (i > 0) {
				mykey += "^";
			}
			mykey += this.cle[i].type + "~" + this.cle[i].value;
		}
		object.$uuid = this.zeroBaseLineIdx;
		object.$key = mykey;
		// line number
		var j = 0;
		for (i = 0; i < this.vars.length; i++) {
			var item = this.vars[i];
			if (item.hasServerValueModification()) {
				object[item.getJsonKey()] = item.getValueForJson();
				j++;
			}
		}
		for (i = 0; this.realListelem && i < this.realListelem.length; i++) {
			object['extends' + i] = this.realListelem[i].value;
		}
		if (j <= 0) return null;

		return object;
	}
});

var CvgLeftListLineLevel = exports.CvgLeftListLineLevel = helpers.defineClass(function(aStackedWindow, aLeftList, aId, aNbVariables, localIdx) {
	CvgLeftListLine.call(this, aStackedWindow, aLeftList, aId, aNbVariables, localIdx);
}, CvgLeftListLine, {

	clone: function() {
		var idx = this.dataSrc.lines.length;
		var wClone = new CvgLeftListLineLevel(this.requester, this.dataSrc, this.id, this.vars.length, idx);
		this.cloneVars(wClone);
		return wClone;
	}
});