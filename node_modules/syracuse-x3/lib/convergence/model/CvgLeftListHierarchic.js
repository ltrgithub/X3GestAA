"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgLeftList = require('syracuse-x3/lib/convergence/model/CvgLeftList').CvgLeftList;
var CvgDataSrc = require('syracuse-x3/lib/convergence/model/CvgDataSrc').CvgDataSrc;
var CvgResu = require('syracuse-x3/lib/convergence/types/CvgResu').CvgResu;
var CvgResuTag = require('syracuse-x3/lib/convergence/types/CvgResu').TAG;

var _customCols=[	
    {bind: "$id", 		ttl: "Key", 	typ: "application/x-string"},
    {bind: "$parent", 	ttl: "Parent", 	typ: "application/x-string"}, 
    {bind: "$icon",		ttl: "Image",	typ: "image"},
    {bind: "$title",	ttl: "Title",	typ: "application/x-string"},
    {bind: "$open",		ttl: "Open",	typ: "application/x-boolean"}
];

var CvgLeftListHierarchic = exports.CvgLeftListHierarchic = helpers.defineClass(function(win, screen, idxb1, id, lstFmt, nbCols, x3Descr) {
	CvgLeftList.call(this, win, screen, idxb1, id, lstFmt, 5);
	this._workingVal = [];
}, CvgLeftList, {
	appendLeftListLine: function(idx, branch, txt, val, key, keyParent) {
		console.log(JSON.stringify({
			idx:idx, branch:branch, txt:txt, val:val, key:key, keyParent:keyParent
		}));
		var wIsBanch = branch === 1;
		this._workingVal[key.length - 1] = new CvgResu(CvgResuTag["STRU"], txt);		
		var  line = this.entrySup.clone();
		var vars=[];
		var id=null,parent=null;
		for (var i in key){
			var k=key[i];
			id=id==null ? "" : id + "~";
			id+= k.type + "-" + k.value;
		}		
		for (var i in keyParent){
			var k=keyParent[i];
			parent=parent==null ? "" : parent + "~";
			parent+=parent.type + "-" + parent.value;
		}
		vars.push(new CvgResu(CvgResuTag["STRU"], id));
		vars.push(new CvgResu(CvgResuTag["STRU"], parent));
		vars.push(new CvgResu(CvgResuTag["STRU"], ""));
		vars.push(new CvgResu(CvgResuTag["STRU"], txt));
		vars.push(new CvgResu(CvgResuTag["STRU"], "1"));
		line.setColumns(idx - 1, vars, id);
		CvgDataSrc.prototype.appendLeftListLine.call(this, line);
		
		/*if (!wIsBanch) {
			line = this.entrySup.clone();
			line.setColumns(idx - 1, this._workingVal, key);
			line.forceServerValueModification(true);
			CvgDataSrc.prototype.appendLeftListLine.call(this, line);
		}*/
		return line;
	},	
	overrideProto:function(){
		if (this._proto) return this._proto;
		var pref=this.getJsonKey();
		this._proto= {
			"$type": "application/x-array",
			"$item": {
				"$properties": {},
			},
			"$treeview": {
				"$mode": "parentKey",
				"$bindings": {}
			}
		};
		var itm = this._proto["$item"]["$properties"];
		var bind = this._proto["$treeview"]["$bindings"];
		for (var i in _customCols){
			var col=_customCols[i];
			var nam=""+(pref+i);
			itm[nam]={
				"$title":col.ttl,
				"$type":col.typ
			}
			bind[col.bind] = nam;
		}
		return this._proto;
	},
	setServerSelectLine: function(selected, aCle) {
		if (this.isListFormat(CvgLeftList.FMT_PICKING_HIERARCHIC)) {
			var wSelectedIdx = this.findLineIdx(aCle);
			var wFound = wSelectedIdx > -1;
			if (wFound) {
				this.getLine(wSelectedIdx).setLeftListLineSelected(selected, true);
			}
			return wFound;
		} else {
			return CvgLeftList.prototype.setServerSelectLine.call(this, selected, aCle);
		}
	},
	getCustomColDescr:function(x3Descr){
		var pref=this.getJsonKey();
		var res= {
		  "$": x3Descr["$"],
		  "FLD": []
		}
		for (var i in _customCols){
			var col=_customCols[i];
			res.FLD.push({
		      "$": {
		        "ID": pref + i,
		        "NAM": col.bind,
		        "FMT": "K:20X",
		        "LIB": col.ttl,
		        "SZ": "20",
		        "TYP": "6,edit",
		        "TDO": "7,alpha",
		        "MAF": "1,saisi"
		      }
			});
		}
		return res;
	}
});