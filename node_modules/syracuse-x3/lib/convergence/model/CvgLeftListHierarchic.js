"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgLeftList = require('syracuse-x3/lib/convergence/model/CvgLeftList').CvgLeftList;
var CvgDataSrc = require('syracuse-x3/lib/convergence/model/CvgDataSrc').CvgDataSrc;
var CvgResu = require('syracuse-x3/lib/convergence/types/CvgResu').CvgResu;
var CvgResuTag = require('syracuse-x3/lib/convergence/types/CvgResu').TAG;

var _customCols=[	
    {bind: "$id", 		ttl: "Key", 	typ: "application/x-string", typX3:"STRU"},
    {bind: "$parent", 	ttl: "Parent", 	typ: "application/x-string", typX3:"STRU"}, 
    {bind: "$icon",		ttl: "Image",	typ: "image", typX3:"STRU"},
    {bind: "$description",	ttl: "Title",	typ: "application/x-string", typX3:"STRU"},
    {bind: "$open",		ttl: "Open",	typ: "application/x-boolean", typX3:"STRU"}
];

function _equalsKey(k1, k2){
	if (k1==null || k2==null) return false;
}
var CvgLeftListHierarchic = exports.CvgLeftListHierarchic = helpers.defineClass(function(win, screen, idxb1, id, lstFmt, nbCols, x3Descr) {
	CvgLeftList.call(this, win, screen, idxb1, id, lstFmt, 5);
	this._Keys = [];
}, CvgLeftList, {
	appendLeftListLine: function(idx, branch, txt, val, key, keyParent) {
		if (key==null || key.length==0) return null;
		if (false && this.size()<20) console.log(JSON.stringify({idx:idx, branch:branch, txt:txt, val:val, key:key, keyParent:keyParent}));
		var isLeaf = branch == 0;	
		// Calculate node key by concatenating all values
		var myKey="", myParentKey=null;		
		for (var i= 0; i< key.length;i++){
			if (myKey.length!=0) myKey += "~";
			myKey+= key[i].value;
		}
		// Calculate parent node key by concatenating length-1 first values 
		if (key.length>1) myParentKey=myKey.substring(0, myKey.lastIndexOf("~"));		
		var cells={
			"$id": myKey,
			"$parent":myParentKey,
			// TODO - manage icons
			"$icon":isLeaf ? "ico.gif" : "Folder.gif",
			"$description":txt,
			// 1 for closed - 2 for open
			"$open":1
		}
		var vars=[];
		for (var i in _customCols){
			var col=_customCols[i];
			vars.push(new CvgResu(CvgResuTag[col.typX3], cells[col.bind]));
		}
		// Create new line
		var  line = this.entrySup.clone();
		line.setColumns(idx - 1, vars, myKey);
		CvgDataSrc.prototype.appendLeftListLine.call(this, line);		
		return line;
	},	
	// Override generated prototype
	// return Syracuse representation for treeviews
	overrideProto:function(){
		if (this._proto) return this._proto;
		var pref=this.getJsonKey();
		this._proto= {
			"$type": "application/x-array",
			"$item": {
				"$properties": {},
			},
			"$treeview": {
				"$mode": "parentKey",
				"$bindings": {}
			}
		};
		var itm = this._proto["$item"]["$properties"];
		var bind = this._proto["$treeview"]["$bindings"];
		for (var i in _customCols){
			var col=_customCols[i];
			var nam=""+(pref+i);
			itm[nam]={
				"$title":col.ttl,
				"$type":col.typ,
				"$capabilities":"",
				"$maxLength":10
			}
			bind[col.bind] = nam;
		}
		return this._proto;
	},
	// TODO - manage selection
	setServerSelectLine: function(selected, aCle) {
		if (this.isListFormat(CvgLeftList.FMT_PICKING_HIERARCHIC)) {
			var sel = this.findLine(aCle);
			if (sel) sel.line.setLeftListLineSelected(selected);
			return sel!=null;
		} else {
			return CvgLeftList.prototype.setServerSelectLine.call(this, selected, aCle);
		}
	},
	// Override list description 
	getCustomColDescr:function(x3Descr){
		var pref=this.getJsonKey();
		var res= {
		  "$": x3Descr["$"],
		  "FLD": []
		}
		for (var i in _customCols){
			var col=_customCols[i];
			res.FLD.push({
		      "$": {
		        "ID": pref + i,
		        "NAM": col.bind,
		        "FMT": "K:20X",
		        "LIB": col.ttl,
		        "SZ": "20",
		        "TYP": "6,edit",
		        "TDO": "7,alpha",
		        "MAF": "1,saisi"
		      }
			});
		}
		return res;
	}
});