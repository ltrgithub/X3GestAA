"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgLeftList = require('syracuse-x3/lib/convergence/model/CvgLeftList').CvgLeftList;
var CvgDataSrc = require('syracuse-x3/lib/convergence/model/CvgDataSrc').CvgDataSrc;
var CvgResu = require('syracuse-x3/lib/convergence/types/CvgResu').CvgResu;
var CvgResuTag = require('syracuse-x3/lib/convergence/types/CvgResu').TAG;

var CvgLeftListHierarchic = exports.CvgLeftListHierarchic = helpers.defineClass(function(win, screen, idxb1, id, lstFmt, nbCols, nbKeyParts) {
	CvgLeftList.call(this, win, screen, idxb1, id, lstFmt, nbCols);
	this.nbKeyParts = nbKeyParts;
	this.workingVal = null;
}, CvgLeftList, {
	appendLeftListLine: function(idx, branch, txt, val, key, keyParent) {

	/*	console.log(util.inspect({
			idx:idx, branch:branch, txt:txt, val:val, key:key, keyParent:keyParent
		}));
		*/
		var wIsBanch = branch === 1;
		var wIdxResuToSetInWorkingVal = key.length - 1;
		this.setTextInWorkingVal(txt, wIdxResuToSetInWorkingVal);
		var wLeftListLine = null;
		if (!wIsBanch) {
			wLeftListLine = this.entrySup.clone();
			wLeftListLine.setColumns(idx - 1, this.workingVal, key);
			wLeftListLine.forceServerValueModification(true);
			CvgDataSrc.prototype.appendLeftListLine.call(this, wLeftListLine);
		}
		return wLeftListLine;
	},
	initWorkingVal: function() {
		this.workingVal = [];
	},
	setServerSelectLine: function(selected, aCle) {
		if (this.isListFormat(CvgLeftList.FMT_PICKING_HIERARCHIC)) {
			var wSelectedIdx = this.findLineIdx(aCle);
			var wFound = wSelectedIdx > -1;
			if (wFound) {
				this.getLine(wSelectedIdx).setLeftListLineSelected(selected, true);
			}
			return wFound;
		} else {
			return CvgLeftList.prototype.setServerSelectLine.call(this, selected, aCle);
		}
	},
	setTextInWorkingVal: function(txt, aIdxResuToSetInWorkingVal) {
		if (this.workingVal == null) {
			this.initWorkingVal();
		}
		this.workingVal[aIdxResuToSetInWorkingVal] = new CvgResu(CvgResuTag["STRU"], txt);

	}
});