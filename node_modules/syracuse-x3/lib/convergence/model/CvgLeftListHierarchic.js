"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgLeftList = require('syracuse-x3/lib/convergence/model/CvgLeftList').CvgLeftList;
var CvgDataSrc = require('syracuse-x3/lib/convergence/model/CvgDataSrc').CvgDataSrc;
var CvgResu = require('syracuse-x3/lib/convergence/types/CvgResu').CvgResu;
var CvgResuTag = require('syracuse-x3/lib/convergence/types/CvgResu').TAG;

var CvgLeftListHierarchic = exports.CvgLeftListHierarchic = helpers.defineClass(function(aStackedWindow, aScreen, aEntityIndexBaseOne, aId, aListFormat, aNbColumns, aNbKeyParts) {
	CvgLeftList.call(this, aStackedWindow, aScreen, aEntityIndexBaseOne, aId, aListFormat, aNbColumns);
	this.nbKeyParts = aNbKeyParts;
	this.workingVal = null;
}, CvgLeftList, {
	appendLeftListLine: function(aIdx, aBranche, aTxt, aVal, aClf, aClp) {

		var wIsBanch = aBranche === 1;
		var wIdxResuToSetInWorkingVal = aClf.length - 1;
		this.setTextInWorkingVal(aTxt, wIdxResuToSetInWorkingVal);
		var wLeftListLine = null;
		if (!wIsBanch) {
			wLeftListLine = this.entrySup.clone();
			wLeftListLine.setColumns(aIdx - 1, this.workingVal, aClf);
			wLeftListLine.forceServerValueModification(true);
			CvgDataSrc.prototype.appendLeftListLine.call(this, wLeftListLine);
		}
		return wLeftListLine;
	},
	initWorkingVal: function() {
		this.workingVal = [];
	},
	setServerSelectLine: function(selected, aCle) {
		if (this.isListFormat(CvgLeftList.FMT_PICKING_HIERARCHIC)) {
			var wSelectedIdx = this.findLineIdx(aCle);
			var wFound = wSelectedIdx > -1;
			if (wFound) {
				this.getLine(wSelectedIdx).setLeftListLineSelected(selected, true);
			}
			return wFound;
		} else {
			return CvgLeftList.prototype.setServerSelectLine.call(this, selected, aCle);
		}
	},
	setTextInWorkingVal: function(aTxt, aIdxResuToSetInWorkingVal) {
		if (this.workingVal == null) {
			this.initWorkingVal();
		}
		this.workingVal[aIdxResuToSetInWorkingVal] = new CvgResu(CvgResuTag["STRU"], aTxt);

	}
});