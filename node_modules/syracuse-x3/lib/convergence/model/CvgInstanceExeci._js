"use strict";
var helpers = require('syracuse-core/lib/helpers');
var x3helpers = require('syracuse-x3/lib/helpers');
var CvgObservable = require('syracuse-x3/lib/convergence/model/CvgObservable').CvgObservable;
var CvgResu = require('syracuse-x3/lib/convergence/types/CvgResu').CvgResu;
var CvgIst = require('syracuse-x3/lib/convergence/types/CvgIst').CvgIst;
var CvgResu = require('syracuse-x3/lib/convergence/types/CvgResu').CvgResu;
var CvgResuTdo = require('syracuse-x3/lib/convergence/types/CvgResu').TDO;
var CvgResuTagLib = require('syracuse-x3/lib/convergence/types/CvgResu').TAG_LIB;
var CvgActions = require('syracuse-x3/lib/convergence/client/CvgAction').Actions;
var CvgExcelExport = require('syracuse-x3/lib/convergence/model/CvgExcelExport');
var jsRunner = require('syracuse-x3/lib/jsRunner');
var globals = require('streamline/lib/globals');




var CvgInstanceExeci = helpers.defineClass(function(_, ist, spgm, dbgflag, paramDefs, paramVal, client, serverUrl) {
	CvgObservable.call(this, client);
	this.instance = ist;
	this.spgm = spgm;
	this.exceptionDet = dbgflag & 0x01;
	this.totalDuration = dbgflag & 0x02 >> 1;
	this.execDuration = dbgflag & 0x03 >> 2;
	this.trace = dbgflag & 0x04 >> 3;
	this.defs = paramDefs;
	this.values = paramVal;
	this.serverUrl = serverUrl;
	// En dernier
	this.process(_);
}, CvgObservable, {

	processProxyDispatch: function(_) {
		var result, errl = 0,
			errm = "",
			errn = 0,
			errp = "",
			errt = 0;
		try {
			// exec js 
			var header, body;
			try {
				header = JSON.parse(this.values[0].value);
			} catch (e) {
				throw new Error("Bad Header JSON: " + e.message + ": " + this.values[0].value);
			}
			try {
				body = JSON.parse(this.values[1].value);
			} catch (e) {
				throw new Error("Bad Body JSON: " + e.message + ": " + this.values[1].value);
			}

			// Syracuse function execution
			if (header.url.indexOf('js:') === 0) {
				globals.context.endpointDataset = this.client.endpointDataset;
				result = jsRunner.execute(_, header.url.substring(3), body);
			}
			// Future retrieve
			if (header.url.indexOf('future:') === 0) {
				result = jsRunner.getResult(_, header.url.substring(7));
			}
			// Http Request
			else {
				if (header.method != null) {
					if (header.url.indexOf('http://') === 0 || header.url.indexOf('https://') === 0) {
						result = jsRunner.httpRequest(_, header, body);
					} else {
						throw new Error("Invalid protocol");
					}
				}
			}
		} catch (e) {
			console.error(e.stack);
			//TODO Catch every error's elements
			errl = 1;
			errn = 1;
			errt = 1;
			errp = "CvgInstanceExeci._js";
			errm = e.message;
			result = {
				header: {
					"statusCode": "500",
					"message": e.message,
					"exception": e.stack
				},
				body: ''
			};
		}

		return this.genExeciNode(_, {
			typ: "CLOB",
			resu: JSON.stringify(result)
		}, errl, errm, errn, errp, errt);
	},
	process: function(_) {
		// Javascript call
		if (this.spgm === "PROXY_DISPATCH") {
			return this.processProxyDispatch(_);
		} else {

			// construction of JSON
			// id 
			this.json = {
				spgm: this.spgm,
				debugFlags: {
					execduration: this.execDuration,
					exceptiondetail: this.exceptionDet,
					totalduration: this.totalDuration,
					trace: this.trace
				},
				params: []
			};
			// params 
			var j = 0;
			var i = 0;

			while (i < this.defs.length) {
				// read the first 4 short define 1 paramDef
				var dim = this.defs[i++];
				var nb = this.defs[i++];
				var size = this.defs[i++];
				var type = CvgResuTagLib[this.defs[i++] - 256];
				var item = {
					dim: dim,
					nb: nb,
					size: size,
					typ: type,
					resu: []
				};
				// treat current defs of parameter
				if (nb !== 0) { // if there is some resu
					var offsetresu = j;
					while (j < offsetresu + nb && j < this.values.length) {
						var val = this.values[j++];
						item.resu.push(val.value);
					}
					// Excel export
					//					if (this.spgm === "setDataTableExtractToExcel") {
					//						try {
					//							if (item.resu.length !== 1) {
					//								throw new Error("Only one resu can be accepted by Excel export.");
					//							}
					//							if (nbParam === 0) {
					//								var exporter = new CvgExcelExport(_, this.client, this.instance, item.resu[0], this.serverUrl);
					//								item.resu[0] = exporter.generateXlsx(_);
					//							} else {
					//								item.resu[0] = errorXls;
					//							}
					//						} catch (e) {
					//							console.error(e.stack);
					//							errorXls = e.message;
					//						}
					//					}
				}

				this.json.params.push(item);
			}
			if (this.spgm === "setDataTableExtractToExcel") {
				this.json.params = CvgExcelExport.setDataTableExtractToExcel(_, this.client, this.instance, this.serverUrl, this.json.params);
			}
			this.setJsonType('TARGET'); // send to client because track
		}
	},
	genExeciNode: function(_, resu, errl, errm, errn, errp, errt, error) {
		var body = {
			act: CvgActions.SRV_EXECI_RESPONSE,
			fld: {
				ist: this.instance
			},
			param: {
				target: {
					type: "ist",
					ist: this.instance
				},
				reply: {
					json: {
						result: {
							errp: errp,
							errm: errm,
							errn: errn,
							errt: errt,
							errl: errl
						},
						debugInfos: {
							exceptiondetail: (error && error.message) || "",
							totalduration: 0,
							execduration: 0,
							trace: (error && error.safeStack) || ""
						},
						"return": resu,
						params: []
					}
				}
			}
		};
		this.client.processAsyncAction(_, body, false, true, true);
	},
	format: {
		get: function() {
			return this.instance == null ? "" : this.instance.format;
		}
	},
	getNl: function() {
		return 0;
	},
	getXid: function() {
		return this.instance == null ? "" : (this.instance.ist.blocAlphaId + this.instance.ist.fieldId);
	},
	hasFormat: function() {
		return this.instance == null ? false : this.instance.hasFormat();
	},
	setInstance: function(instance) {
		this.instance = instance;
	},
	setXml: function(xml) {
		this.xml = xml;
	},
	toJSON: function() {
		var object = {};
		object.type = 'rpc';
		var rpc = {};
		rpc.json = this.json;
		object.rpc = rpc;
		var st = this.instance.toString().split(",");
		if (st.length > 0) {
			rpc.ist = {
				win: st[0],
				xid: st[1] + st[2],
				nl: 0
			};
		} else {
			rpc.ist = {
				win: "A",
				xid: 0,
				nl: 0
			};
		}
		return object;
	}

});

// Factory pattern avoids jslint/jshint complaining about using "new" for side effects
exports.create = function(_, ist, spgm, dbgflag, paramDefs, paramVal, client, serverUrl) {
	return new CvgInstanceExeci(_, ist, spgm, dbgflag, paramDefs, paramVal, client, serverUrl);
};