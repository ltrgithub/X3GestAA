"use strict";
var helpers = require('syracuse-core/lib/helpers');
var officeXls = require('msoffice/lib/excel/xlsx');
var jsxml = require('jsxml');
var events = require('events');
var locale = require("syracuse-core/lib/locale");

var config = require('syracuse-main/lib/nodeconfig').config;

var trace = config.xlsExport && config.xlsExport.trace;

function BufferWritableStream(callback) {
	this.buffer = new Buffer([]);
	this.writable = true;
	this.write = function(data) {
		this.buffer = Buffer.concat([this.buffer, new Buffer(data)]);
		return true;
	};
	this.end = function(data) {
		Buffer.concat([this.buffer, new Buffer(data)]);
		return callback(null);
	};
}
BufferWritableStream.prototype = new events.EventEmitter();

var CvgExcelExport = helpers.defineClass(function(_, client, ist, serverUrl, params) {
	this.client = client;
	this.ist = ist;
	this.serverUrl = serverUrl;
	this.params = params;
}, null, {
	generateXlsx: function(_) {

		var uuid = this.ist.toString().split(',').join('');
		trace && trace("XML: " + this.params);
		var json = jsxml.parse(this.params);
		trace && trace("JSON: " + JSON.stringify(json, null, 2));
		var $proto = [];
		// proto
		var titles = json.X3TAB.GTAB.HTAB.TITLE;
		var columns = json.X3TAB.GTAB.LCOL.COL;
		for (var i = 0; i < titles.length; i++) {
			var def = {
				"_name": titles[i].$.NAM,
				"_orgName": titles[i].$.NAM,
				"_title": titles[i].$value,
				"_type": columns[i].$.TYP
			};
			if (columns[i].$.TYP === "application/x-decimal") {
				var scale = (columns[i].$.FMT.split('.')[1].match(/0/g) || []).length;
				if (scale > 0) def._scale = scale;
			}
			$proto.push(def);
		}

		var $data = [];
		// Data
		var lines = json.X3TAB.GTAB.DATA.LIG;

		var processLine = function(col) {
			for (var j = 0; j < col.length; j++) {
				if ((columns[j].$.TYP) === "application/x-date") {
					if (col[j] === "00/00/0000" || col[j] === "01/10/1600") {
						col[j] = "";
					} else {
						var parts = col[j].split('/');
						var m = parts[0];
						var d = parts[1];
						var y = parts[2];
						col[j] = y + "-" + m + "-" + d;
					}
				}
			}
			$data.push(col);
		};
		var col;
		if (Array.isArray(lines)) {
			for (var k = 0; k < lines.length; k++) {
				col = lines[k].COL;
				processLine(col);
			}
		} else if (lines != null) {
			col = lines.COL;
			processLine(col);
		} else {
			throw new Error(locale.format(module, "noData"));
		}

		var result = {
			proto: JSON.stringify($proto),
			data: JSON.stringify($data)
		};
		trace && trace("Data sent to excel addin: " + JSON.stringify(result, null, 2));

		var stream = new BufferWritableStream();
		officeXls.render(_, stream, {
			data: result,
			serverUrl: this.serverUrl
		});

		this.client.services.blobSvc.register(uuid, stream.buffer, null, {
			filename: "x3_excel_export.xlsx",
			mimeType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
		});
		return uuid;
	},
});



exports.setDataTableExtractToExcel = function setDataTableExtractToExcel(_, client, instance, serverUrl, params) {
	try {
		var exporter = new CvgExcelExport(_, client, instance, serverUrl, params[0].resu[0]);
		params[0].resu[0] = exporter.generateXlsx(_);
	} catch (e) {
		console.error(e.stack);
		params[1].resu[0] = e.message;
	}
	return params;
};