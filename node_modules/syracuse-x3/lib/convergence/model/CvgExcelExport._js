"use strict";
var helpers = require('syracuse-core/lib/helpers');
var x3helpers = require('syracuse-x3/lib/helpers');
var officeXls = require('msoffice/lib/excel/xlsx');
var jsxml = require('jsxml');
var events = require('events');
var config = require('syracuse-main/lib/nodeconfig').config;

var trace = config.xlsExport && config.xlsExport.trace;

function BufferWritableStream(callback) {
	this.buffer = new Buffer([]);
	this.writable = true;
	this.write = function(data) { this.buffer = Buffer.concat([this.buffer, new Buffer(data)]); return true; }
	this.end = function(data) { Buffer.concat([this.buffer, new Buffer(data)]); return callback(null); }
}
BufferWritableStream.prototype = new events.EventEmitter();

var CvgExcelExport = exports.CvgExcelExport = helpers.defineClass(function(_, client, ist, params) {
	this.client = client;
	this.ist = ist;
	this.params = params;
}, null, {
	generateXlsx: function(_) {
		
		var uuid = this.ist.toString().split(',').join('');
		trace && trace("XML: "+this.params);
		var json = jsxml.parse(this.params);
		trace && trace("JSON: "+JSON.stringify(json,null,2));
		var $proto = [];
		// proto
		var titles = json.X3TAB.GTAB.HTAB.TITLE;
		var columns = json.X3TAB.GTAB.LCOL.COL;
		for (var i = 0 ; i < titles.length ; i++) {
			$proto.push({
				"_name" : titles[i].$.NAM,
				"_orgName" : titles[i].$.NAM,
				"_title" : titles[i].$value,
				"_type" : columns[i].$.TYP
			});
		}
		
		var $data = [];
		// Data
		var lines = json.X3TAB.GTAB.DATA.LIG;
		for (var i = 0 ; i < lines.length ; i++) {
			var col = lines[i].COL;
			for (var j = 0 ; j < col.length ; j++) {
				if ((columns[j].$.TYP) === "application/x-date") {
					var parts = col[j].split('/');
					var m = parts[0];
					var d = parts[1];
					var y = parts[2];
					col[j] = y + "-" + m + "-" + d;
				}
			}
			$data.push(col);
		}

		var result = {
			proto: JSON.stringify($proto),
			data: JSON.stringify($data)
		};
		trace && trace("Data sent to excel addin: "+JSON.stringify(result,null,2));

		var stream = new BufferWritableStream();
		officeXls.render(_, stream, {data: result});
		
		this.client.services.blobSvc.register(uuid, stream.buffer, null, {
			filename: "x3_excel_export.xls",
			mimeType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
		});
		return uuid;
	},
});