"use strict";
var helpers = require('syracuse-core/lib/helpers');
var officeXls = require('msoffice/lib/excel/xlsx');
var jsxml = require('jsxml');
var events = require('events');
var locale = require("syracuse-core/lib/locale");

var config = require('syracuse-main/lib/nodeconfig').config;

var trace = config.xlsExport && config.xlsExport.trace;

var WritableBufferStream = helpers.defineClass(function() {
	var self = this;
	this.buffers = [];
	this.buffer = new Buffer([]);
	this.writable = true;
}, events.EventEmitter, {
	write: function(data, encoding) {
		// data == null means end
		if (data != null) {
			if (!this.writable) {
				throw new Error('Stream is not writable.');
			}
			if (Buffer.isBuffer(data)) {
				// Do nothing
			} else if (typeof data == 'string') {
				data = new Buffer(data, encoding || 'utf8');
			} else {
				throw new Error('First argument must be a buffer or a string.');
			}
			// if data is empty do nothing but it's not to be interpreted as end
			if (!data.length) return true;
			this.buffers.push(data);
		} else {
			this.end(data, enconding);
		}
		return true;
	},
	end: function(data, encoding) {
		if (data) {
			this.write(data, encoding);
		}
		this.buffer = Buffer.concat(this.buffers);
		this.writable = false;
		this.emit('close');
	},
	getBuffer: function() {
		if (this.buffer) return this.buffer;
		if (this.buffers.length !== 0) return Buffer.concat(this.buffers);
		return new Buffer(0);
	},
	toString: function() {
		return this.getBuffer().toString();
	}
});

var CvgExcelExport = helpers.defineClass(function(_, client, ist, serverUrl, params) {
	this.client = client;
	this.ist = ist;
	this.serverUrl = serverUrl;
	this.params = params;
}, null, {
	generateXlsx: function(_) {

		var uuid = this.ist.toString().split(',').join('');
		trace && trace("XML: " + this.params);
		var json = jsxml.parse(this.params);
		trace && trace("JSON: " + JSON.stringify(json, null, 2));
		var $proto = [];
		var fileTitle = json.X3TAB.TITLE.$value;
		// proto
		var titles = json.X3TAB.GTAB.HTAB.TITLE;
		var columns = json.X3TAB.GTAB.LCOL.COL;


		var processTitle = function(tit, col) {
			var def = {
				"_name": tit.$.NAM,
				"_orgName": tit.$.NAM,
				"_title": tit.$value,
				"_type": col.$.TYP
			};
			if (col && col.$ && col.$.TYP === "application/x-decimal") {
				var scale = (col.$.FMT.split('.')[1].match(/0/g) || []).length;
				if (scale > 0) def._scale = scale;
			}
			$proto.push(def);
		};

		if (Array.isArray(titles) && Array.isArray(columns)) {
			for (var i = 0; i < titles.length; i++) {
				processTitle(titles[i], columns[i]);
			}
		} else if (!Array.isArray(titles) && !Array.isArray(columns)) {
			processTitle(titles, columns);
		} else {
			throw new Error("The count of titles is not equals to the count of columns.");
		}

		var $data = [];
		// Data
		var lines = json.X3TAB.GTAB.DATA.LIG;

		var processLine = function(cols, idx) {


			var handleSpecialType = function(val, col) {
				if ((col && col.$ && col.$.TYP) === "application/x-date") {
					if (val === "00/00/0000" || val === "01/10/1600") {
						val = "";
					} else {
						var parts = val.split('/');
						var m = parts[0];
						var d = parts[1];
						var y = parts[2];
						val = y + "-" + m + "-" + d;
					}
				}
				return val;
			};

			if (Array.isArray(cols) && Array.isArray(columns)) {
				for (var j = 0; j < cols.length; j++) {
					cols[j] = handleSpecialType(cols[j], columns[j]);
				}
				$data.push(cols);
			} else if (!Array.isArray(cols) && !Array.isArray(columns)) {
				cols = handleSpecialType(cols, columns);
				$data.push([cols]);
			} else {
				throw new Error("The count of values found in line '" + idx + "' is not equals to the count of columns.");
			}
		};


		var col;
		if (Array.isArray(lines)) {
			for (var k = 0; k < lines.length; k++) {
				col = lines[k].COL;
				processLine(col, k + 1);
			}
		} else if (lines != null) {
			col = lines.COL;
			processLine(col, 1);
		} else {
			throw new Error(locale.format(module, "noData"));
		}

		var result = {
			proto: JSON.stringify($proto),
			data: JSON.stringify($data)
		};
		trace && trace("Data sent to excel addin: " + JSON.stringify(result, null, 2));

		var stream = new WritableBufferStream();
		officeXls.xlsx_direct_export(_, {
			response: stream
		}, {
			data: result,
			serverUrl: this.serverUrl
		});

		this.client.services.blobSvc.register(uuid, stream.buffer, null, {
			filename: fileTitle + ".xlsx",
			mimeType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
		});
		return uuid;
	},
});



exports.setDataTableExtractToExcel = function setDataTableExtractToExcel(_, client, instance, serverUrl, params) {
	try {
		var exporter = new CvgExcelExport(_, client, instance, serverUrl, params[0].resu[0]);
		params[0].resu[0] = exporter.generateXlsx(_);
	} catch (e) {
		console.error(e.stack);
		params[1].resu[0] = e.message;
	}
	return params;
};