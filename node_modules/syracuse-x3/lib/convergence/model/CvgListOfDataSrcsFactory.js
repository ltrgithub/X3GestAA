"use strict";
var helpers = require('@sage/syracuse-core').helpers;
var CvgDataSrc = require('syracuse-x3/lib/convergence/model/CvgDataSrc').CvgDataSrc;
var CvgDataSrcLine = require('syracuse-x3/lib/convergence/model/CvgDataSrcLine').CvgDataSrcLine;
var CvgVariableFactory = require('syracuse-x3/lib/convergence/model/CvgVariableFactory').CvgVariableFactory;

var CvgListOfDataSrcsFactory = exports.CvgListOfDataSrcsFactory = {

	newEmptyDataSrc: function(aStackedWindow, aScreen, aEntityIndexBaseOne, aId, aDataSourceNode) {

		var wDim = parseInt(aDataSourceNode.$.DIM, 10);
		var wNbField = parseInt(aDataSourceNode.$.NBZ, 10);
		var wBasPagName = aDataSourceNode.$.NBP;
		var dataSrc = new CvgDataSrc(aStackedWindow, aScreen, aEntityIndexBaseOne, aId, wDim, wNbField, wBasPagName);
		var srcLine = this.newEmptyDataSrcLine(aStackedWindow, dataSrc, aId, aDataSourceNode);
		if (dataSrc.isBlocTableau()) {
			var wLineEntrySup = srcLine.clone();
			wLineEntrySup.cloneVars(srcLine);
			dataSrc.setEntrySup(wLineEntrySup);
			/*
			 * GLUTE: gestion des formats dans les colonnes des tableaux
			 *
			 * pour associer chacune des variables de la ligne a sa
			 * correspondante dans la ligne "wLineEntrySup" Note: sert ala
			 * propagation du format courant a chaque modification de valeur
			 */
			srcLine.setFormaterEntity(wLineEntrySup);
		}

		dataSrc.appendFirstBlankLine(srcLine);
		return dataSrc;
	},
	newEmptyDataSrcLine: function(aStackedWindow, aDataSrc, aId, aDataSourceNode) {
		var wNbField = parseInt(aDataSourceNode.$.NBZ, 10);
		var wDataSrcLine = new CvgDataSrcLine(aStackedWindow, aDataSrc, aId, wNbField);
		var wListOfX3Variables = aDataSourceNode.FLD;
		var wMax = wListOfX3Variables != null ? (Array.isArray(wListOfX3Variables) ? wListOfX3Variables.length : 1) : 0;
		if (wListOfX3Variables && wMax > 0) {
			var wVariable;
			var wVariableNode;
			var wI = 0;
			while (wI < wMax) {
				wVariableNode = wMax === 1 ? wListOfX3Variables : wListOfX3Variables[wI];
				wVariable = CvgVariableFactory.instanciateVariable(aStackedWindow, wDataSrcLine, wI + 1, aId, wVariableNode, 0);
				wDataSrcLine.addOneVar(wVariable);
				wI++;
			}
		}
		return wDataSrcLine;
	},
	newScreenDataSrcs: function(aStackedWindow, aScreenNode, aScreen, aDataSrcs) {
		var wDataSourcesNodes = aScreenNode.DS;
		var wMax = wDataSourcesNodes != null ? (Array.isArray(wDataSourcesNodes) ? wDataSourcesNodes.length : 1) : 0;
		var wDataSourceNode;
		var wDataSrc;
		var wDataSourceID;
		var wI = 0;
		while (wI < wMax) {
			wDataSourceNode = wMax === 1 ? wDataSourcesNodes : wDataSourcesNodes[wI];
			wDataSourceID = wDataSourceNode.$.NAM;
			wDataSrc = this.newEmptyDataSrc(aStackedWindow, aScreen, wI + 1, wDataSourceID, wDataSourceNode);
			aScreen.pushDataSrc(wDataSourceID, wDataSrc);
			aDataSrcs.pushEntity(wDataSourceID, wDataSrc);
			wI++;
		}
	}
};