"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgObservable = require('syracuse-x3/lib/convergence/model/CvgObservable').CvgObservable;
var CvgEntity = require('syracuse-x3/lib/convergence/model/CvgEntity').CvgEntity;
var CvgScreenDummy = require('syracuse-x3/lib/convergence/model/CvgListOfScreens').CvgScreenDummy;
var CvgVariable = require('syracuse-x3/lib/convergence/model/CvgVariable').CvgVariable;
var CvgException = require('syracuse-x3/lib/convergence/model/CvgException').CvgException;
var CvgIst = require('syracuse-x3/lib/convergence/types/CvgIst').CvgIst;
var InstanceKind = {
	TARGET: 0,
	PREVIOUS: 1
};

var CvgInstance = exports.CvgInstance = helpers.defineClass(function(cli, aKind, aIst, format, aValue, modCmd) {
	CvgObservable.call(this, cli);
	this.nl = -1;
	this.exception = null;
	if (cli == null) {
		throw new Error("Unexpected null FusionClient");
	}
	this.ist = aIst;
	this.kind = aKind;
	this.rawValue = null;
	this.modeCommande = modCmd;
	this.format = format == null || format === "" ? null : format;
	this.value = aValue;
	this.client = cli;
	var modifiable = cli.findModifiable(aIst);
	if (modifiable != null && modifiable instanceof CvgEntity) {
		this.entity = modifiable;
	}
	if (this.entity == null) {
		throw new Error("Entity " + aIst.toString() + " not found\nPlease check/update X3 Window description");
	}
	// !! En dernier car update du client et this.entity doit être valorisee
	if (aKind == InstanceKind.PREVIOUS) {
		this.setJsonType('PREVIOUS');
	} else {
		this.setJsonType('TARGET');
	}
}, CvgObservable, {
	getNl: function() {
		if (this.nl !== -1) {
			return this.nl;
		} else {
			var v = this.entity instanceof CvgVariable ? this.entity : null;
			if (v != null && !v.isDisposed()) {
				var line = v.srcLine;
				if (line != null && line.dataSrc.isBlocGrid()) {
					return line.zeroBaseLineIdx + 1;
				}
			}
		}
		return -1;
	},
	getXid: function() {
		var fullId = this.ist.screenAlphaIdFusion;
		if (!this.entity.isDisposed() && !(this.entity instanceof CvgScreenDummy)) {
			fullId += this.ist.blocAlphaId;
			if (this.entity.entityTyp === 'FIELD') {
				fullId += this.ist.field;
			}
		}
		return fullId;
	},
	hasException: function() {
		return this.exception != null;
	},
	hasFormat: function() {
		return this.format != null;
	},
	toJSON: function() {
		var object = {};
		if (this.ist.ist === CvgIst.levelZeroStructIst.ist) {
			// target portal
			object.type = 'portal';
		} else {
			object.type = 'ist';
			var ist = {};
			ist.xid = this.getXid();
			if (this.getNl() != -1) {
				ist.nl = this.getNl();

			}
			if (this.format != null) {
				ist.fmt = this.format;
			}
			ist.win = this.ist.winAlphaId;
			ist.edit = !this.modeCommande;
			// Valeur pour champ en mode edit - TODO Vérifier si ok
			if (!this.modeCommande && this.value != null) {
				ist.v = this.value;
				if (this.rawValue != null) ist.raw = this.rawValue;
			}
			object.ist = ist;
			ist.ctrlFailed = this.hasException();
			if (this.hasException()) {
				var e = new CvgException(this.client, this.exception, this.exception.message);
				ist.$diagnoses = e.diagnose;
			}
		}
		return object;
	}
});
CvgInstance.newprevious = function(aClient, aIst, aFormatString, aValue, modCommande) {
	return new CvgInstance(aClient, InstanceKind.PREVIOUS, aIst, aFormatString, aValue, modCommande);
}

CvgInstance.newtarget = function(aClient, aIst, aFormatString, aValue, modCommande) {
	return new CvgInstance(aClient, InstanceKind.TARGET, aIst, aFormatString, aValue, modCommande);
}