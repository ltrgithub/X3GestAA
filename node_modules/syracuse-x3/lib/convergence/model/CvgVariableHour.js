"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgVariable = require('syracuse-x3/lib/convergence/model/CvgVariable').CvgVariable;

var SYMBOL_MINUTE = ':';

var CvgVariableHour = exports.CvgVariableHour = helpers.defineClass(function(srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState, aHourSymbolMinute) {
	CvgVariable.call(this, srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState);
	this.hourSymbolMinute = aHourSymbolMinute !== undefined ? aHourSymbolMinute : SYMBOL_MINUTE;
}, CvgVariable, {
	clone: function() {
		var wVariable = new CvgVariableHour(this.srcLine, this.entityIndexBaseOne, this.name, this.id, this.dataType, this.format, this.state, this.hourSymbolMinute);
		wVariable.mustBeFormatted = this.mustBeFormatted;
		wVariable.hourSymbolMinute = this.hourSymbolMinute;
		this.cloneValues(wVariable);
		return wVariable;
	},
	formatHimself: function(aValue) {
		var wHour = aValue.substring(0, 2);
		var wMin = aValue.substring(2, 4);
		var wSB = "";
		wSB += wHour + this.hourSymbolMinute + wMin;
		return wSB;
	},
	formatX3ToDisplay: function(aData) {
		var wValue = aData.value;
		if (!this.mustBeFormatted) {
			return wValue;
		}
		if (wValue == null) {
			return null;
		}
		if (wValue.length === 0) {
			return wValue;
		}
		if (wValue.length !== 4) {
			return wValue + "???";
		}
		return this.callFormater(wValue);
	},
	unFormatData: function(aValue) {
		if (!this.mustBeFormatted) {
			return aValue;
		}
		if (aValue == null) {
			return null;
		}
		if (aValue.length === 0) {
			return aValue;
		}
		if (aValue.length !== 5) {
			return aValue + "???";
		}
		return this.callUnFormater(aValue);
	},
	unformatHimself: function(aValue) {
		var wHour = aValue.substring(0, 2);
		var wMin = aValue.substring(3, 5);
		var wSB = "";
		wSB += wHour + wMin;
		return wSB;
	}
});