"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgObservable = require('syracuse-x3/lib/convergence/model/CvgObservable').CvgObservable;
var CvgResu = require('syracuse-x3/lib/convergence/types/CvgResu').CvgResu;
var CvgIst = require('syracuse-x3/lib/convergence/types/CvgIst').CvgIst;

var CvgInstanceExeci = exports.CvgInstanceExeci = helpers.defineClass(function(ist,spgm,dbgflag,paramDefs,paramVal, client) {
	CvgObservable.call(this, client);
	this.instance = client.currentField.ist;
	this.spgm = spgm;
	this.exceptionDet = dbgflag & 0x01;
	this.totalDuration = dbgflag & 0x02 >> 1 ;
	this.execDuration = dbgflag &0x03 >> 2;
	this.trace = dbgflag & 0x04 >> 3;
	this.defs = paramDefs;
	this.values = paramVal

	// construction of XML 
	// id 
	this.xml = "<execi id=\""+this.spgm+"\" ist=\""+ist+"\" exceptiondetail=\""+this.exceptionDet+"\" totalduration=\""+this.totalDuration+"\" execduration=\""+this.execDuration+"\" trace=\""+this.trace+"\"> ";
	// params 
	var j =0;
	var i = 0;
	while(i<this.defs.length){
		// read the first 4 short define 1 paramDef
		var dim  = this.defs[i++];
		var nb = this.defs[i++];
		var size = this.defs[i++];
		console.log("type "+this.defs[i]);
		var type = CvgResu.x3TypeToString(this.defs[i++]-256)
		this.xml+="<param dim=\""+dim+"\" nb=\""+nb+"\" size=\""+size+"\" typ=\""+type+"\" >";
		// treat current defs of parameter
		if( nb != 0 ){ // if there is some resu
			var offsetresu = j;
			while(j<offsetresu+nb && j<this.values.length){
				var val = this.values[j++]
				if( type == "STRU" ){
					this.xml+="<resu typ=\""+type+"\" size=\""+0+"\">\"<![CDATA["+val.value+"]]>\"</resu>";
				}else{
					this.xml+="<resu typ=\""+type+"\" size=\""+0+"\">\""+val.value+"\"</resu>";
				}
			}
		}
		this.xml+="</param>";
	}
	this.xml+="</execi>";
	// En dernier
	this.setJsonType('TARGET');
}, CvgObservable, {
	format: {
		get: function() {
			return this.instance == null ? "" : this.instance.format;
		}
	},
	getNl: function() {
		return 0;
	},
	getXid: function() {
		return this.instance == null ? "" : (this.instance.ist.blocAlphaId + this.instance.ist.fieldId);
	},
	hasFormat: function() {
		return this.instance == null ? false : this.instance.hasFormat();
	},
	setInstance: function(instance) {
		this.instance = instance;
	},
	setXml: function(xml) {
		this.xml = xml;
	},
	toJSON: function() {
		var object = {};
		object.type = 'rpc';
		var rpc = {};
		rpc.xml = this.xml;
		object['rpc'] = rpc;
		rpc.ist = this.instance;
		return object;
	}
});
