"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgVariableDate = require('syracuse-x3/lib/convergence/model/CvgVariableDate').CvgVariableDate;

var CvgVariablePeriod = exports.CvgVariablePeriod = helpers.defineClass(function(srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState, aLocalFormat, aPivotDate) {
	CvgVariableDate.call(this, srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState, aLocalFormat, aPivotDate);
}, CvgVariableDate, {
	callUnFormater: function(aValue) {
		var wReceivedCenturyAndYear = "";
		var wRawDate = "";
		var wEditDate = CvgVariableDate.prototype.callUnFormater.call(this,aValue);
		try {
			var val = this.getServerValStr();
			if (val != null && val.length >= 4) {
				wReceivedCenturyAndYear = val.substring(0, 4);
				wRawDate = wReceivedCenturyAndYear + wEditDate.substring(4);
			} else {
				wRawDate = wEditDate;
			}
		} catch (e1) {
			var wE2 = new CvgException(this.client, e1, "cant unformat value", true);
			wE2.addComplement(" Value=[" + aValue + "]");
			wE2.addComplement(" ReceivedCenturyAndYea=[r", wReceivedCenturyAndYear + "]");
			wE2.addComplement(" RawDate=[" + wRawDate + "]");
			wE2.addComplement(" Id=[" + this.id + "]");
			throw wE2;
		}
		return wRawDate;
	},
	clone: function() {
		var wLocalFormatAndSep = this.localFormatAndSep;
		var wPivotDate = this.pivotDate;
		var wVariable = new CvgVariablePeriod(this.srcLine, this.entityIndexBaseOne, this.name, this.id, this.dataType, this.format, this.state, wLocalFormatAndSep, wPivotDate);
		wVariable.mustBeFormatted = this.mustBeFormatted;
		this.cloneValues(wVariable);
		return wVariable;
	}
});
