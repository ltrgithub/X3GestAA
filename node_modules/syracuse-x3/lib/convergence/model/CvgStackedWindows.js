"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgEntity = require('syracuse-x3/lib/convergence/model/CvgEntity').CvgEntity;
var CTraverser = Object; //require('syracuse-x3/lib/convergence/CTraverser').CTraverser;
var ArrayList = Array; //require('syracuse-x3/lib/convergence/ArrayList').ArrayList;
var CModificationsErazor = exports.CModificationsErazor = helpers.defineClass(function() {}, CTraverser, {
	doWhenTraverse: function(aValue, aIdx, aWhen) {
		if (aValue instanceof CvgEntity) {
			aValue.razModification();
		}
		if (typeof aValue.traverseChilds === 'function') {
			return aValue.traverseChilds(this);
		} else {
			return false; //pour ne pas arrï¿½ter de "traverser" les "Values"
		}
	}
});

var CvgStackedWindows = exports.CvgStackedWindows = helpers.defineClass(function() {
	Array.call(this);
}, Array, {
	findWin: function(aWinId) {
		var wStackedWindow;
		var wMax = this.length;
		var wI = wMax - 1;
		while (wI > -1) {
			wStackedWindow = this[wI];
			if (wStackedWindow.entityIndexBaseOne == aWinId) {
				return wStackedWindow;
			}
			wI--;
		}
		return null;
	},
	popStackedWindow: function() {
		return this.pop();
	},
	pushStackedWindow: function(aStackedWindow) {
		this.push(aStackedWindow);
	},
	razModifications: function() {
		this.traverseChilds(new CModificationsErazor());
	},
	traverseAll: function(aTraverser) {
		var wStackedWindow;
		var wMax = this.length;
		var wI = wMax - 1;
		while (wI > -1) {
			wStackedWindow = this[wI];
			if (aTraverser.doWhenTraverse(wStackedWindow, wI) == true) {
				return true;
			}
			if (wStackedWindow.traverseAll(aTraverser) == true) {
				return true;
			}
			wI--;
		}
		return false;
	},
	traverseChilds: function(aTraverser) {
		var wMax = this.length;
		var wEntry;
		var wI = 0;
		while (wI < wMax) {
			wEntry = this[wI];

			if (aTraverser.doWhenTraverse(wEntry, wI) == true) {
				return true;
			}
			wI++;
		}
		return false;
	},
	traverseSettable: function(aStructIst, aSetter) {
		var wRequesterWindow = this.findWin(aStructIst.win);
		if (wRequesterWindow == null) {
			return false;
		}
		if (!aStructIst.isWindowIst()) {
			return wRequesterWindow.traverseSettable(aStructIst, aSetter);
		} else {
			return aSetter.setModifiable(aStructIst, wRequesterWindow);
		}
	}
});