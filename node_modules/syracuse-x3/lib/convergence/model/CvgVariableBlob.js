"use strict";
var helpers = require('@sage/syracuse-core').helpers;
var CvgVariable = require('syracuse-x3/lib/convergence/model/CvgVariable').CvgVariable;
var CvgResu = require('syracuse-x3/lib/convergence/types/CvgResu').CvgResu;
var CvgResuTdo = require('syracuse-x3/lib/convergence/types/CvgResu').TDO;
var CvgResuTag = require('syracuse-x3/lib/convergence/types/CvgResu').TAG;

var CvgVariableBlob = exports.CvgVariableBlob = helpers.defineClass(function(srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aSize, aFormat, aEntityState, blobSvc, window) {
	CvgVariable.call(this, srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState, window);
	this.indirection = null;
	this.size = aSize;
	this.uuid = null;
}, CvgVariable, {
	clone: function(line) {
		return null;
	},
	controlBlobSize: function(aBlob) {
		var wMaxSize = 1024 * Math.pow(2, this.size) - 4;
		if (aBlob.length > wMaxSize) {
			throw new Error(this.client.getMessage('ERROR_UPLOAD_BLOB', aBlob.length.toString(), this.id, wMaxSize.toString(), this.size.toString()));
		}
	},
	hasValueBlob: function() {
		return this.serverValue != null && this.serverValue.hasBlobValue();
	},
	setBrowserUnformattedValue: function(resu) {
		this.controlBlobSize(resu.value);
		//this.client.services.blobSvc.unregister(this.uuid);
		CvgVariable.prototype.setBrowserUnformattedValue.call(this, resu);
	},
	getValueForJson: function() {
		return this.uuid;
	},
	setIndirection: function(i) {
		this.indirection = i;
	},
	setServerValue: function(aResu) {
		var uuid = this.srcLine.dataSrc.screen.requesterWindow.entityIdxAlpha + this.srcLine.dataSrc.screen.entityIdxAlpha + this.id;
		if (aResu.value) {
			this.uuid = uuid;
			this.client.services.blobSvc.register(this.uuid, new Buffer(aResu.value, 'binary'));
		} else {
			this.uuid = "";
			this.client.services.blobSvc.unregister(uuid);
		}
		CvgVariable.prototype.setServerValue.call(this, aResu);
	}
});