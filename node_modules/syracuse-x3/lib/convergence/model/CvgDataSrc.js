"use strict";
var CvgVariable = require('syracuse-x3/lib/convergence/model/CvgVariable').CvgVariable;
var CvgDataSrcLine = require('syracuse-x3/lib/convergence/model/CvgDataSrcLine').CvgDataSrcLine;
var helpers = require('syracuse-core/lib/helpers');
var CvgEntity = require('syracuse-x3/lib/convergence/model/CvgEntity').CvgEntity;
var perfmon = require('syracuse-perfmon');
var x3helpers = require('syracuse-x3/lib/helpers');
var localConfig = x3helpers.config("x3fusion", null, {});
var perfmonEnabled = x3helpers.config("perfmon.activate", localConfig);
var perfmonDetail = x3helpers.config("perfmon.detail", localConfig);
var tracerStd = require("syracuse-trace/lib/helper").getTracer("classic.std");

var ACT_INS = 1;
var ACT_DEL = 0;
var IDX_ACT = 0;
var IDX_IDX = 1;
var IDX_NBLINE = 2;

var CvgLineMove = exports.CvgLineMove = helpers.defineClass(function() {
	this.mvts = [];
	this.removeAll = false;
	this.reset();
}, null, {
	addDelete: function(nbLines, idx) {
		if (nbLines > 0) {
			// Idx Ok
			idx = idx + 1;
			this.mvts.push([ACT_DEL, idx, nbLines]);
		}
	},
	// $mvt[i][0] intege Operation code. 0 : delete - 1 : insert
	// $mvt[i][1] integer The one-based location in the array from which to
	// start apply operation
	// $mvt[i][2] string The number of lines involved in the operation
	addInsert: function(nbLines, idx) {
		if (nbLines > 0) {
			// idx +1 car X3 0 based
			this.mvts.push([ACT_INS, idx + 1, nbLines]);
		}
	},
	removeAllLines: function() {
		this.removeAll = true;
		this.mvts = [
			[ACT_DEL]
		];
	},
	reset: function() {
		this.removeAll = false;
		this.mvts = [];
	},
	toJSON: function() {

		var result = [];

		var size = this.mvts.length;
		// clone -> prev is momdified
		if (size > 0) {
			var prev = this.mvts[0].slice(0),
				cur = null;
			var curAct, prevAct, curIdx, prevIdx, curNb, prevNb;
			var i, cumul;
			for (i = 1; i < size; i++) {
				cumul = false;
				cur = this.mvts[i];
				curAct = cur[IDX_ACT]; // action current move
				prevAct = prev[IDX_ACT]; // action previous move
				if (curAct === prevAct) {
					curIdx = cur[IDX_IDX];
					prevIdx = prev.length === 3 ? prev[IDX_IDX] : 0;
					curNb = cur[IDX_NBLINE];
					prevNb = prev.length === 3 ? prev[IDX_NBLINE] : 0;
					if (curAct === 0 && curIdx === prevIdx || curAct === 1 && curIdx === prevIdx + prevNb) {
						// Mvts:[[1,4,1],[1,5,3],[1,6,2],[1,7,1],[1,8,1]] -> [1,4,8]
						// Mvts:[[0,4,1],[1,4,3],[1,4,2],[1,4,1],[1,4,1]] -> [0,4,8]
						prev[IDX_NBLINE] += curNb;
						cumul = true;
					}
				}
				if (!cumul) {
					result.push(prev);
					// clone -> prev is momdified
					prev = cur.slice(0);
				}
			}
			result.push(prev);

		}
		return result;

	},
	toJsonX3Mvts: function() {
		var result = {};
		result.mvts = this.mvts;
		result.removeAll = this.removeAll;
		return result;
	}
});

function emptyJson(o) {
	if (o == null) {
		return true;
	}
	if (Array.isArray(o)) {
		return o.length === 0;
	}
	return Object.keys(o).length === 0; // TODO: find faster test
}

var CvgDataSrc = exports.CvgDataSrc = helpers.defineClass(function(aRequester, aScreen, aEntityIndexBaseOne, aDataSourceID, aDim, aNbField, aVarBasPage, dataSrcType) {
	dataSrcType = dataSrcType !== undefined ? dataSrcType : CvgDataSrc.TYPE_SCREEN;
	CvgEntity.call(this, aRequester && aRequester.client, aDataSourceID, aEntityIndexBaseOne, 'BLOC');
	// Record "suplementaire" pour gerer la ligne a cloner
	this.entrySup = null;
	this.win = aRequester;
	this.dataSrcType = dataSrcType;
	this.listEventLine = new CvgLineMove();
	// Vecteur des lignes de la DataSource
	this.lines = [];
	this.stackedWindow = aRequester;
	this.screen = aScreen;
	// Dimension de la datasource ex:250 pour un tableau
	this.dim = aDim < 1 ? 1 : aDim;
	// Nombre de colonne de la datasource
	this.nbColumns = aNbField;
	// Id de la variable de bas de page
	this.varBasPage = aVarBasPage;
	// initialize metadata scope
	this.initMetaScope();
	// En dernier
	this.setJsonType('ENTITY');
}, CvgEntity, {
	initMetaScope: function() {
		this.metaScope = {
			full: false,
			lines: {},
		};
	},
	appendFirstBlankLine: function(srcLine) {
		this.lines.push(srcLine);
		srcLine.setZeroBaseIdx(0);
		this.fusionMvtsInsert(1, 0);
	},
	appendLeftListLine: function(l) {
		this.lines.push(l);
		this.fusionMvtsInsert(1, this.lines.length - 1); // index 0 base and not 1
	},
	blocFicheGetChilds: function() {
		var l = this.getFirstLine();
		if (l == null || l.vars == null) {
			throw new Error("List bloc - Unexpected null first line");
		}
		return l.vars;
	},
	buildMessErrorTraverse: function(aStructIst, aSetter, aKeyOfMessSuffix) {
		var wMess = this.client.getMessage('ERROR_TRAVERSE_SETTABLE', aStructIst.toString(), this.getAdxId(), module.id);
		// TODO TCA
		// aStructIst.toString() doesn't return correct value
		// this.getAdxId() doesn't return correct value
		// module.id isn't corresponding to aSetter.class
		//wMess = locale.format(wMess, aStructIst.toString(), this.getAdxId(), CStringFacilities.getClasseName(aSetter.class));
		return wMess + this.client.getMessage(aKeyOfMessSuffix);
	},
	fusionMvtsDelete: function(nbLines, idx) {
		//console.log(this.id + " - Mvt delete - nbLines[" + nbLines + "] - idx[" + idx + "]");
		this.listEventLine.addDelete(nbLines, idx);
		// Notifie datasrc to genarate JSON
		this.forceChange();
	},
	fusionMvtsInsert: function(nbLines, idx) {
		//console.log(this.id + " - Mvt insert - nbLines[" + nbLines + "] - idx[" + idx + "]");
		this.listEventLine.addInsert(nbLines, idx);
	},
	fusionMvtsRemoveAll: function() {
		this.listEventLine.removeAllLines();
		// Notifie datasrc to genarate JSON
		this.forceChange();
	},
	fusionMvtsReset: function() {
		this.listEventLine.reset();
	},
	getAdxId: function() {
		return this.screen == null ? null : "" + this.screen.getAdxId() + ',' + this.entityIdxAlpha;
	},
	getFirstLine: function() {
		return this.lines.length > 0 ? this.lines[0] : null;

	},
	getJsonMetadata: function(map, metadata) {
		var CvgDataSrcLine = require('syracuse-x3/lib/convergence/model/CvgDataSrcLine').CvgDataSrcLine;
		var CvgVariable = require('syracuse-x3/lib/convergence/model/CvgVariable').CvgVariable;
		var keys = Object.keys(map).sort(function(a, b) {
			return a - b;
		});
		var meta = [];
		var i, itemJs = null;
		for (i in keys) {
			var key = keys[i];
			itemJs = [];
			var item = map[key];
			var obsId;
			if (item instanceof CvgDataSrcLine || item instanceof CvgDataSrc) {
				obsId = this.getObservableId();
			} else {
				obsId = item.getObservableId();
			}
			// remove win id from fullid
			obsId = obsId.substring(1);
			itemJs.push(obsId); // id instance
			if (item instanceof CvgVariable) {
				if (item.srcLine === this.entrySup) {
					// it's a colomn
					itemJs.push(0);
				} else {
					// it's a cell  retrinve line number
					var lineNumber = -1;
					if (item.srcLine instanceof CvgDataSrcLine) {
						lineNumber = item.srcLine.zeroBaseLineIdx + 1;
					}
					itemJs.push(lineNumber);
				}
			} else if (item instanceof CvgDataSrcLine) {
				// it's a line
				itemJs.push(item.zeroBaseLineIdx + 1);
			} else if (item instanceof CvgDataSrc) {
				// it's a line
				itemJs.push(0);
			}
			// indice colomn, cellule
			var added = false;
			switch (metadata) {
				case 'PCOL':
					if (!item.style) {
						itemJs.push("$pcolor_" + item.pColor); // style
						added = true;
					}
					break;
				case 'STY':
					itemJs.push(item.style); // style
					added = true;
					break;
				case 'STT':
					itemJs.push(item.state); // style
					itemJs.push(item.getReadableState());
					added = true;
					break;
				case 'FMT':
					if (item.formatStr) {
						itemJs.push(item.formatStr); // style
						added = true;
					}
					break;
				case 'TIT':
					if (item.title != null) {
						itemJs.push(item.title); // style
						added = true;
					}
					break;
			}
			if (added) {
				meta.push(itemJs);
			}
		}
		return meta;
	},
	getLastLine: function() {
		return this.lines.length > 0 ? this.lines[this.lines.length - 1] : null;

	},
	getLine: function(idx) {
		return this.lines[idx];
	},
	// return true if this data source admit column
	hasColumn: function() {
		return this.hasEntrySup();
	},
	// Retourne vrai si la dimension est depassee !
	hasDimOverFlow: function() {
		return this.lines.length > this.dim;
	},
	// return true if EntrySup is not null ( admit entry
	hasEntrySup: function() {
		return this.entrySup != null;
	},
	//retourne si un variable "baspag" est associee a la DataSource
	hasVarBasPage: function() {
		return this.varBasPage != null && this.varBasPage.length > 0;
	},
	isBlocFiche: function() {
		return this.dataSrcType === CvgDataSrc.TYPE_SCREEN && this.dim === 1 && !this.hasVarBasPage();
	},
	isBlocGrid: function() {
		return this.isLeftList() || this.isBlocTableau();
	},
	isBlocTableau: function() {
		return this.dataSrcType === CvgDataSrc.TYPE_SCREEN && this.hasVarBasPage(); // this.dim>1;
	},
	isLeftList: function() {
		return this.dataSrcType === CvgDataSrc.TYPE_LEFTLIST;
	},
	manageMeta: function(mapMeta, line, lastLine) {
		var stampLine = {
			"PCOL": {},
			"STY": {},
			"ACT": {
				hasValue: true
			},
			"SEL": {
				hasValue: true
			},
			"VIS": {
				hasValue: true
			},
			"FMT": {},
			"STT": {},
			"TIT": {}
		};
		var key, metaKey, colEntity, colDiff;


		//PCOL
		var keys = Object.keys(line.pColorList);
		if (keys.length === 1 && Object.keys(line.pColorList[keys[0]]).length > line.vars.length) {
			stampLine.PCOL.stamp = Date.now() * 1000;
			line.pColor = keys[0];
			stampLine.PCOL.hasValue = true;
		}
		//STY
		stampLine.STY.stamp = line.lastStampModSty;
		stampLine.STY.hasValue = line.style != null;
		//ACT
		stampLine.ACT.stamp = line.lastStampModActzo;
		stampLine.ACT.hasValue = line.lastStampModActzo !== -1;

		//'SEL':
		stampLine.SEL.stamp = line.lastStampModSelected;
		stampLine.SEL.hasValue = line.lastStampModSelected !== -1;

		//'VIS':
		stampLine.VIS.stamp = line.lastStampModVisible;
		stampLine.VIS.hasValue = line.lastStampModVisible !== -1;

		//'FMT':
		stampLine.FMT.stamp = line.lastStampModFmt;
		stampLine.FMT.hasValue = line.formatStr != null;
		//'TIT':
		stampLine.TIT.stamp = line.lastStampModTit;
		stampLine.TIT.hasValue = line.title != null;


		// check if a colomn has apply a style before
		this.entrySup && this.entrySup.getListEntityOlderThanMeta(mapMeta, stampLine, true);

		Object.keys(stampLine).forEach(function(metaKey) {
			if (stampLine[metaKey].hasValue && stampLine[metaKey].stamp !== -1) {
				mapMeta[metaKey][stampLine[metaKey].stamp] = line;
			}
		});
		// check if an item of the line has a different value
		// for metadata and if the colomn has not the same status we add him
		// analyse list of variable on current line even no change has been done
		// on current line
		line.getListEntityDifferentValueMeta(mapMeta);

		if (lastLine) {
			this.entrySup && this.entrySup.getListEntityOlderThanMeta(mapMeta, stampLine, false);
			line.getListEntityDifferentValueMeta(mapMeta);
		}

	},
	manageMetadata: function(map, line, metadata, lastLine) {
		// check if we need to add change metadata about
		var stampLine = -1;
		var hasValue = false;
		var key, colEntity, colDiff;
		switch (metadata) {
			case 'PCOL':
				var keys = Object.keys(line.pColorList);
				if (keys.length === 1 && Object.keys(line.pColorList[keys[0]]).length > line.vars.length) {
					stampLine = Date.now() * 1000;
					line.pColor = keys[0];
					hasValue = true;
				}
				break;
			case 'STY':
				stampLine = line.lastStampModSty;
				hasValue = line.style != null;
				break;
			case 'ACT':
				stampLine = line.lastStampModActzo;
				hasValue = stampLine !== -1;
				break;
			case 'SEL':
				stampLine = line.lastStampModSelected;
				hasValue = stampLine !== -1;
				break;
			case 'VIS':
				stampLine = line.lastStampModVisible;
				hasValue = stampLine !== -1;
				break;
			case 'FMT':
				stampLine = line.lastStampModFmt;
				hasValue = line.formatStr != null;
				break;
			case 'TIT':
				stampLine = line.lastStampModTit;
				hasValue = line.title != null;
				break;
		}

		// check if a colomn has apply a style before
		if (this.entrySup != null) {
			colEntity = this.entrySup.getListEntityOlderThan(metadata, stampLine, true);
			for (key in colEntity) {
				map[key] = colEntity[key];
			}
		}
		if (hasValue && stampLine !== -1) {
			map[stampLine] = line;
		}
		// check if an item of the line has a different value
		// for metadata and if the colomn has not the same status we add him
		// analyse list of variable on current line even no change has been done
		// on current line
		colDiff = line.getListEntityDifferentValue(metadata);
		for (key in colDiff) {
			map[key] = colDiff[key];
		}

		if (lastLine) {
			// generate style for all column that are younger that the last line
			if (this.entrySup != null) {
				colEntity = this.entrySup.getListEntityOlderThan(metadata, stampLine, false);

				for (key in colEntity) {
					map[key] = colEntity[key];
				}
			}
			colDiff = line.getListEntityDifferentValue(metadata);
			for (key in colDiff) {
				map[key] = colDiff[key];
			}
		}
	},
	manageTableMetadata: function(map, metadata) {

		var hasValue = false;
		var stamp = -1;
		var meta = metadata.length > 3 ? metadata.substring(0, 4) : metadata;
		switch (metadata) {
			case 'PCOL':
				stamp = this.lastStampModPCol;
				hasValue = this.pColor !== -1;
				break;
			case 'STY':
				stamp = this.lastStampModSty;
				hasValue = this.style != null;
				break;
			case 'ACT':
				stamp = this.lastStampModActzo;
				hasValue = stamp !== -1;
				break;
			case 'VIS':
				stamp = this.lastStampModVisible;
				hasValue = stamp !== -1;
				break;
			case 'SEL':
				stamp = this.lastStampModSelected;
				hasValue = stamp !== -1;
				break;
			case 'TIT':
				stamp = this.lastStampModTit;
				hasValue = stamp !== -1;
				break;
		}

		if (hasValue && stamp !== -1) {
			var item;
			for (item in map) {
				if (item < stamp) {
					delete map[item];
				} else {
					if (metadata === 'STY') {
						if (map[item].style !== this.style) {
							if (!(map[item] instanceof CvgDataSrcLine) && !map[item].isEntrySup && (map[item].style === map[item].srcLine.style || map[item].style == this.entrySup.hVars[map[item].id]).style) {
								delete map[item];
							}
						}
					}
				}
			}
			map[stamp] = this;
		}
	},
	optimizeMetaStt: function(map) {
		var i, mapStt = [];
		this.calculateState();
		for (i = 0; i < map.length; i++) {
			// optimisation on stt 
			var stamp = map[i].calculateState();
			var state = map[i].state; // current state of entity
			if (map[i] instanceof CvgDataSrc) { // if it's data source we need to add 
				mapStt[stamp] = map[i];
			} else if (this.state !== state) { // if the state of item is differnt of table 
				if (map[i] instanceof CvgDataSrcLine ||  (map[i].isEntrySup)) { // if it's column or line we add only 
					mapStt[stamp] = map[i];
				} else { // if state is the same as column or lines 
					if (i < this.entrySup.vars.length && state !== this.entrySup.vars[i].state || state !== map[i].srcLine.state) {
						mapStt[stamp] = map[i];
					}
				}
			}
		}
		return mapStt;
	},
	razModification: function() {
		var line;
		for (line in this.lines) {
			this.lines[line].razModification();
		}
		if (this.entrySup != null) {}
		// Reset des modification des mouvements fusion en fin de request client
		this.fusionMvtsReset();
		CvgEntity.prototype.razModification.call(this);
	},
	// insert "apres" aTargetLine
	serverInsertLines: function(zeroBasedIdx, nbLines) {
		var timing = perfmonEnabled && perfmon.start(module, "cvgDataSrc.serverInsertLines");
		var i, setFormat = false;
		for (i = 0; i < nbLines; i++) {
			// CvgDataSrcLine constructor Notify oberver that a new line has been created
			var srcLine = this.entrySup.clone();
			// GLUTE : gestion des formats dans les colonnes des tableaux pour associer chacune des variables de la nouvelle ligne a sa correspondante dans la ligne "this.entrySup"
			// Note: sert a la propagation du format courant a chaque modification de valeur
			srcLine.setFormaterEntity(this.entrySup);
			setFormat = true;
			this.lines.splice(zeroBasedIdx + i, 0, srcLine);
		}
		this.updateIdx(zeroBasedIdx);
		this.fusionMvtsInsert(nbLines, zeroBasedIdx);
		perfmonEnabled && timing.end();
	},
	// Supprime toutes les lignes de la dataSource
	serverRemoveAllLines: function() {
		this.lines = [];
		this.fusionMvtsRemoveAll();

	},
	serverRemoveLines: function(startX3Idx, nbLines) {
		var self = this;

		function manageFormat(stop) {
			var currentLine = self.lines[stop];
			var nextLine = stop + 1 < self.lines.length && self.lines[stop + 1];
			if (nextLine) { // SAM 106669 - manage case of line that handle format is removed and next lines has been create before receiving format
				var fstop = false;
				for (var i = stop; i < nextLine.vars.length; i++) {
					var v = nextLine.vars[i];
					var cv = currentLine.vars[i];
					if (v.formatStr === "" && v.lastStampModFmt === -1 && cv.formatStr && cv.lastStampModFmt !== -1) {
						v.formatStr = cv.formatStr;
						v.lastStampModFmt = cv.lastStampModFmt;
					}
				};
			}
		}

		if (startX3Idx === 0) {
			// do nothin startX3Ix must be > 1
			tracerStd.info && tracerStd.info((new Date().toISOString()) + " startX3Idx is not > 0 - do nothin");
		} else {

			var stop = startX3Idx - 1;
			var start = Math.min(stop + nbLines, this.lines.length);
			// check for format if the current line entity has format define and set format to the next line if nothin has been assign
			manageFormat(stop);
			// remove metaScope line if they exist
			for (var i = start; i < stop; i++) {
				if (this.lines[i] && this.metaScope.lines[this.lines[i].uuid]) {
					delete this.metaScope.lines[this.lines[i].uuid];
				}
			}
			this.lines.splice(stop, start - stop);
			this.fusionMvtsDelete(nbLines, stop);
			this.updateIdx(stop);
		}
	},
	//  Met en place une Entry suplementaire pour les datasources qui ont une
	setEntrySup: function(aDataSrcEntry) {
		this.entrySup = aDataSrcEntry;
		var i;
		for (i = 0; i < this.entrySup.vars.length; i++) {
			this.entrySup.vars[i].isEntrySup = true;
		}
	},
	setServerStyle: function(aStyle, applyOn) {
		if ('CHILDS' === applyOn && this.isBlocFiche()) {
			var v, children = this.blocFicheGetChilds();
			for (v in children) {
				children[v].setServerStyle(aStyle, 'ENTITY');
			}
		} else {
			CvgEntity.prototype.setServerStyle.call(this, aStyle, applyOn);
		}
	},
	size: function() {
		return this.lines.length;
	},
	toJSON: function() {
		var object = {};
		if (this.isBlocGrid()) {
			// construct metadata json object
			var mapMeta = {
				"STY": {},
				"PCOL": {},
				"SEL": {},
				"VIS": {},
				"ACT": {},
				"FMT": {},
				"TIT": {}
			};
			var mapSty = mapMeta["STY"];
			var mapPCol = mapMeta["PCOL"];
			var mapFmt = mapMeta["FMT"];
			var mapVis = mapMeta["VIS"];
			var mapSel = mapMeta["SEL"];
			var mapAct = mapMeta["ACT"];
			var mapStt = mapMeta["STT"];
			var mapTit = mapMeta["TIT"];
			var mapDch = null;
			// $rcd
			var i, records = [];

			for (i = 0; i < this.lines.length; i++) {

				var line = this.lines[i];
				if (line != null && !line.isDisposed()) {
					this.toJsonAddRCD(line, records);
					// treatement of metadata style - !! a optimiser
					var lastLine = i === this.lines.length - 1;
					if (this.metaScope && (this.metaScope.full || this.metaScope.lines && this.metaScope.lines[line.uuid])) {
						this.manageMeta(mapMeta, line, lastLine);
					}
					// DCH - cell by cell
					if (line.comboDchModifhas()) {
						if (mapDch == null) {
							mapDch = [];
						}
						line.comboDchAddJSON(mapDch);
					}
				}

			}

			this.manageTableMetadata(mapPCol, 'PCOL');
			this.manageTableMetadata(mapSty, 'STY');
			this.manageTableMetadata(mapVis, 'VIS');
			this.manageTableMetadata(mapAct, 'ACT');
			this.manageTableMetadata(mapSel, 'SEL');
			this.manageTableMetadata(mapTit, 'TIT');

			// get list of all entity first for metat state
			var item, metaEntity = [];
			for (item in mapVis) {
				metaEntity.push(mapVis[item]);
			}
			for (item in mapAct) {
				metaEntity.push(mapAct[item]);
			}
			for (item in mapSel) {
				metaEntity.push(mapSel[item]);
			}
			// create map of entity state 
			mapStt = this.optimizeMetaStt(metaEntity);

			if (!emptyJson(records)) {
				object.$rcd = records; // add record table that represent
			}
			var metadata = {};
			object.$mvt = this.listEventLine.toJSON();
			if (mapDch != null) {
				metadata.dch = mapDch;
			}
			var sty = this.getJsonMetadata(mapSty, 'STY');
			if (!emptyJson(sty)) {
				metadata.sty = sty;
			}
			var stypCol = this.getJsonMetadata(mapPCol, 'PCOL');
			// optimize stypcol 
			//
			if (!emptyJson(stypCol)) { // add all pCol as style
				if (!metadata.sty) {
					metadata.sty = stypCol;
				}
			}

			var fmt = this.getJsonMetadata(mapFmt, 'FMT');
			if (!emptyJson(fmt)) {
				metadata.fmt = fmt;
			}
			var stt = this.getJsonMetadata(mapStt, 'STT');
			if (!emptyJson(stt)) {
				metadata.stt = stt;
			}
			var tit = this.getJsonMetadata(mapTit, 'TIT');
			if (!emptyJson(tit)) {
				metadata.tit = tit;
			}
			if (!emptyJson(metadata)) {
				object.$meta = metadata;
			}
		} else if (this.isBlocFiche()) {
			// #1039 - FDB - Only titles are implemented on client side
			if (this.hasModifTitle()) {
				object.tit = this.title;
				if (this.titleStyle != null) {
					object.stytit = this.titleStyle;
				}
			}
			// TODO on client side
			if (this.hasModifStyle() && this.style != null) {
				object.sty = this.style;
			}
			if (this.hasModifState()) {
				object.stt = this.state;
			}
		}
		// reinit metadata scope
		this.initMetaScope();
		return object;
	},

	// Pour surcharge par liste recursive
	toJsonAddRCD: function(line, record) {
		var lineJSon = line.toJSON();
		if (lineJSon != null) {
			record.push(lineJSon);
		}
		return lineJSon;
	},
	traverseAll: function(aTraverser) {
		var wMax = this.lines.length;
		var wDataSrcLine;
		var wI = 0;
		while (wI < wMax) {
			wDataSrcLine = this.getLine(wI);
			if (aTraverser.doWhenTraverse(wDataSrcLine, wI) === true) {
				return true;
			}
			if (wDataSrcLine.traverseAll(aTraverser) === true) {
				return true;
			}
			wI++;
		}
		return false;
	},
	traverseChilds: function(aTraverser) {
		var wTraversingState = false;
		var wMax = this.lines.length;
		if (this.hasEntrySup()) {
			wTraversingState = aTraverser.doWhenTraverse(this.entrySup, -1);
			if (wTraversingState === true) {
				return true;
			}
		}
		var wI = 0;
		while (wI < wMax) {
			wTraversingState = aTraverser.doWhenTraverse(this.getLine(wI), wI);
			if (wTraversingState === true) {
				return true;
			}
			wI++;
		}
		return wTraversingState;
	},

	/**
	 * 14w_005 - bug 30654 - mise en place mode "envoi pour rebind"
	 * <p>
	 * Propagation du changement d'etat sur toutes les lignes existante de la
	 * datasource
	 *
	 * 14w_006 - Bug 31739 - gestion tableau
	 * <p>
	 * Application des regles de propagations des changements d'etat
	 * fonctionnant dans le client X3
	 * <li>si sAdxidTarget.nAdxid est de type GRID et sAdxidTarget.nNumLine ==
	 * -1 : on applique le cState a toutes les cellules du tableau
	 * <li>si sAdxidTarget.nAdxid est de type GRID et sAdxidTarget.nNumLine > 0
	 * : on applique le cState a toutes les cellules de la ligne
	 * <li>si sAdxidTarget.nAdxid correspond a une colonne et
	 * sAdxidTarget.nNumLine === -1 : on applique le cState a toutes les cellules
	 * de la colonne
	 * <li>si sAdxidTarget.nAdxid correspond a une colonne et
	 * sAdxidTarget.nNumLine > 0 : on applique le cState a la cellule
	 * colonne/ligne
	 *
	 * @param aStructIst
	 * @param aSetter
	 * @return
	 */
	traverseSettable: function(aStructIst, aSetter) {
		var CActiveStateSetter = require('syracuse-x3/lib/convergence/client/CvgRequest').CActiveStateSetter;
		var wContinue;
		try {
			// Si la porte est une colonne ou toutes les lignes d'une colonne
			// ATTENTION : il
			// faut tester "this.dim>1 && isColumnIst()" avant "isFieldIst()" car si
			// this.dim>1 on a
			// egalite entre "isColumnIst()" et "isFieldIst()"
			// 16w_115 - gestion des tableau de dimension 1 // on execute
			// traverseSettable si on admet des colonnes
			if (this.hasColumn() && aStructIst.isColumnIst() || aStructIst.isAllLinesOfColumnIst()) {
				this.metaScope.full = true;
				// Application sur la ligne suplementaire EntrySup
				wContinue = this.entrySup.traverseSettable(aStructIst, aSetter);
				// si c'est un changement d'etat: application sur toutes les
				// lignes (pour une colonne)
				if (wContinue && aSetter instanceof CActiveStateSetter) {
					wContinue = this.traverseSettableLines(aStructIst, aSetter);
				}
				return wContinue;
			}
			// Si la porte est le champ ou la ligne: application sur l'entite
			// inferieure designee
			else if (aStructIst.isFieldIst() || aStructIst.isLineIst()) {

				var wI = this.dim > 1 ? aStructIst.idxZeroBase : 0;

				// si numero de ligne incorrect
				if (wI < 0 || wI >= this.lines.length) {
					var wMess = this.client.getMessage('ERROR_LINE_UNKNOWN', wI, this.lines.length, this.getAdxId());
					aSetter.setLogicalErrMess(wMess);
					return false;
				}
				var wDataSrcLine = this.getLine(wI);
				// it's better to add the reference of the line instead of the idx. because it will change regarding deletion or insertion
				if (aSetter.applyMeta && !this.metaScope.lines[wDataSrcLine.uuid]) {
					this.metaScope.lines[wDataSrcLine.uuid] = wDataSrcLine;
				}
				return wDataSrcLine == null ? false : wDataSrcLine.traverseSettable(aStructIst, aSetter);
			}
			// Si la porte est le bloc ou toutes les lignes du bloc :
			// application sur le bloc.
			else if (aStructIst.isBlocIst() || aStructIst.isAllLinesOfBlocIst()) {
				this.metaScope.full = true;
				// Application sur le bloc
				wContinue = aSetter.setModifiable(aStructIst, this);
				// si c'est un changement d'etat :
				if (wContinue && aSetter instanceof CActiveStateSetter) {
					// 16w_104 - Fiche 51885 - RH V5 : zone non saisissable en
					// Web
					// Application sur la ligne suplementaire EntrySup
					if (this.entrySup) { // if there an entry sup so isBlocTableau and dim > 1 otherwise no entrySup and fail
						wContinue = this.entrySup.traverseSettable(aStructIst, aSetter);
					}
					if (wContinue) {
						// application sur toutes les lignes (pour toutesles
						// colonnes)
						wContinue = this.traverseSettableLines(aStructIst, aSetter);
					}
				}
				return wContinue;
			} else {
				aSetter.setLogicalErrMess(this.buildMessErrorTraverse(aStructIst, aSetter, 'ERROR_TRAVERSE_SETTABLE_CASE'));
				return true;
			}
		} catch (e) {
			var wMess = this.buildMessErrorTraverse(aStructIst, aSetter, 'ERROR_TRAVERSE_SETTABLE_EXCEPT');
			aSetter.setLogicalErrMess(wMess + ' ' + e);
			throw e;
		}
	},
	traverseSettableLines: function(aStructIst, aSetter) {
		var wContinue = true;
		var wI = 0;
		var wMax = this.lines.length;
		var wDataSrcLine;
		while (wI < wMax && wContinue) {
			wDataSrcLine = this.getLine(wI);
			wContinue = wDataSrcLine.traverseSettable(aStructIst, aSetter);
			wI++;
		}
		return wContinue;
	},
	updateIdx: function(startIdx) {
		var i, l;
		for (i = startIdx, l = this.lines.length; i < l; i++) {
			this.lines[i] && this.lines[i].setZeroBaseIdx(i);
		}

	}
});

CvgDataSrc.TYPE_LEFTLIST = 'Q';
CvgDataSrc.TYPE_SCREEN = 'E';