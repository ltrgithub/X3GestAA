"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgObservable = require('syracuse-x3/lib/convergence/model/CvgObservable').CvgObservable;

var CvgReportSubmitted = helpers.defineClass(function(client, properties, error) {
	CvgObservable.call(this, client);

	this.host = properties.host;
	this.trackId = properties.trackId;
	this.title = properties.title;
	this.rank = properties.rank;
	this.mime = properties.mime;
	this.error = error;
	this.report = properties.report;

	this.kind = "submitted";
	this.setJsonType('REPORT');
}, CvgObservable, {

	toJSON: function() {
		var res = {
			uuid: this.trackId,
			title: this.title,
			report: this.report,
			$location: "/print/{$host}/{$service}('{$uuid}')",
			startDate: (new Date()).getTime(),
			services: {
				getState: {
					$service: "$getState",
					$uuid: this.trackId,
					$host: this.host
				},
				cancel: {
					$service: "$cancel",
					$uuid: this.rank,
					$host: this.host
				},
			},
			facet: "$viewer"
		};
		if (this.mime) {
			res.mime = this.mime;
		}
		if (this.error) {
			res.$diagnoses = [{
				$severity: "error",
				$message: this.error.message,
				$stackTrace: this.error.safeStack
			}];
		} else {
			res.$diagnoses = [{
				$severity: "info",
				$message: "Request considered"
			}];
			if (!res.mime) {
				res.$diagnoses.push({
					$severity: "info",
					$message: "Unknow format"
				});
			}
		}
		return res;
	},

});

// Factory pattern avoids jslint/jshint complaining about using "new" for side effects
exports.submitted = function(client, properties, error) {
	return new CvgReportSubmitted(client, properties, error);
};

var CvgReportPending = helpers.defineClass(function(client) {
	CvgObservable.call(this, client);
	this.kind = "pending";
	this.setJsonType('REPORT');
}, CvgObservable, {

	toJSON: function() {

	},

});

// Factory pattern avoids jslint/jshint complaining about using "new" for side effects
exports.pending = function(client) {
	return new CvgReportPending(client);
};

var CvgReportDone = helpers.defineClass(function(client) {
	CvgObservable.call(this, client);
	this.kind = "done";
	this.setJsonType('REPORT');
}, CvgObservable, {

	toJSON: function() {

	},

});

// Factory pattern avoids jslint/jshint complaining about using "new" for side effects
exports.done = function(client) {
	return new CvgReportDone(client);
};