"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require("syracuse-core/lib/locale");
var CvgEntity = require('syracuse-x3/lib/convergence/model/CvgEntity').CvgEntity;
var CvgFormatException = require('syracuse-x3/lib/convergence/model/CvgException').CvgFormatException;
var CvgResuTdoLib = require('syracuse-x3/lib/convergence/types/CvgResu').TDO_LIB;
var CvgResuTag = require('syracuse-x3/lib/convergence/types/CvgResu').TAG;
var CvgDiagnose = require('syracuse-x3/lib/convergence/model/CvgDiagnose').CvgDiagnose;

function _postDiag(variable, msg, detail){
	new CvgDiagnose(variable.client, 'ERROR', 500, msg, detail, null, "Formatter" , null, true);			
}

var CvgVariable = exports.CvgVariable = helpers.defineClass(function(srcLine, aEntityIndexBaseOne, aVariableName, aVariableId, aDataType, aFormat, aEntityState) {
	CvgEntity.call(this, srcLine && srcLine.client, aVariableId, aEntityIndexBaseOne, 'FIELD');
	this.srcLine = null;
	this.browserValue = null;
	this.mustBeFormatted = false;
	this.name = aVariableName;
	this.srcLine = srcLine;
	this.setStateFromDescr(aEntityState);
	this.dataType = aDataType;
	this.resuType = this.dataType ? CvgResuTag[CvgResuTdoLib[this.dataType.toString()]] : -1;
	this.format = aFormat;
	this.isEntrySup = false;
	// En dernier
	this.setJsonType('ENTITY');
}, CvgEntity, {
	acceptEditFormat: function() {
		return true;
	},
	fmtExcepMsg: function(aMessKey, aWhatFormatKey, value, e) {
		var what = this.client.getMessage(aWhatFormatKey);
		return this.client.getMessage(aMessKey, what, this.id, e.message);
	},
	_callFormater: function(aValue) {
		if (this.client.formater && this.hasValidFormat()) {
			try {
				return this.client.formater.formatField(this.format, aValue, true);
			} catch (e) {
				_postDiag(this,this.fmtExcepMsg('ERROR_FORMAT_EXCEPTION', 'FORMAT_RTOS', aValue, e), "_callFormater" +  this.getAdxId());
			}
		}
		return aValue;
	},
	_callUnFormater: function(aValue) {		
		if (this.client.formater && this.hasValidFormat()) {
			try {
				return this.client.formater.unformatField(this.format, aValue, true);				
			} catch (e) {
				throw new CvgFormatException(this.client, null, this.fmtExcepMsg('ERROR_UNFORMAT_EXCEPTION', 'UNFORMAT_STOR', aValue, e));
			}
		}
		return aValue;
	},
	cloneValues: function(v) {
		CvgEntity.prototype.cloneValues.call(this, v);
		v.browserValue = this.browserValue;
	},
	forceChange: function() {
		if (this.srcLine != null) {
			var dataSrc = this.srcLine.dataSrc;
			if (dataSrc.isBlocGrid()) {
				// Sur modification de valeur on notifie le parent seuelemnt si bloc tableau ou liste gauche
				this.srcLine.cellHasBeenModified();
				return;
			}
		}
		CvgEntity.prototype.forceChange.call(this);
	},
	formatEditToDisplay: function(aValue) {		
		if (this.acceptEditFormat() && this.client.formater && this.hasValidFormat()) {
			return this.client.formater.formatEditToDisplay(this.format, aValue, this.serverValue != null ? this.serverValue.value : null);
		} else {
			return aValue;
		}
	},
	formatX3ToDisplay: function(aData) {
		if (this.mustBeFormatted && aData.value != null) return this._callFormater(aData.value);
		return aData.value;
	},
	formatX3ToEdit: function() {
		var val = this.serverValue != null ? this.serverValue.value : null;
		if (this.acceptEditFormat() && this.mustBeFormatted && val != null && this.hasValidFormat() && this.client.formater) {
			try {
				return this.client.formater.formatEdit(this.format, val, true);
			} catch (e) {
				_postDiag(this,this.fmtExcepMsg('ERROR_UNFORMAT_EXCEPTION', 'UNFORMAT_STOE', val, e), "formatEdit" +  this.id);
			}
		}
		return val;
	},
	getAdxId: function() {
		if (this.srcLine == null) return null;
		return this.srcLine.getDataSrcAdxId() + this.getIdxInBloc() + ',' + this.srcLine.nodeId;

	},
	getDisplayValue: function() {
		var res = this.serverValue != null ? this.formatX3ToDisplay(this.serverValue) : "";
		return res == null ? "" : res;
	},
	// retoune l'index de la variable dans le bloc en extrayant la partie
	// numerique de l'id qui est de la forme "AH12"
	getIdxInBloc: function() {
		var wIdx = this.id;
		var wPos = 0;
		while (!CvgVariable.isDigit(wIdx.charAt(wPos))) {
			wPos++;
		}
		return wIdx.substring(wPos);
	},
	// vrai si une modification de couleur, etat, titre, style ou choix
	// contextuel a ete envoyee par le serveur sur l'entite.
	hasGuiModModifications: function() {
		return this.hasModifState() || this.hasModifTitle() || this.hasModifStyle();
	},
	razModification: function() {
		this.storeBrowserValue(this.serverValue);
		CvgEntity.prototype.razModification.call(this);
	},

	/**
	 * Valorise la variable avec une chaine representant une valeur non
	 * formatee. Cette methode est utilisee pour stocker la valeur saisie par
	 * l'utilisateur lors des envois des actions vers le serveur.
	 */
	setBrowserUnformattedValue: function(aBrowserValue) {
		this.setServerResu(aBrowserValue);
		this.storeBrowserValue(aBrowserValue);
	},
	setServerFormat: function(aFormat) {
		var wIndferredState = CvgEntity.prototype.setServerFormat.call(this, aFormat);
		this.mustBeFormatted = this.hasValidFormat();
		return wIndferredState;
	},
	/**
	 * Modification de la variable e patir d'un noeud "NDCHVL" reeu du serveur.
	 * La valiable est modifiee seulement si le resu est different de la valeur
	 * initiale Apres cette valorisation, la variable est consideree comme
	 * modifiee
	 */
	setServerValue: function(aResu) {
		if (this.browserValue == null || !this.browserValue.equals(aResu)) {
			if (!this.hasServerValueModification() || !this.isServerValueEquals(aResu)) {
				CvgEntity.prototype.setServerValue.call(this, aResu);
			} else {
				this.forceServerValueModification(true);
			}
		} else if (this.mustBeFormatted) {
			CvgEntity.prototype.setServerValue.call(this, aResu);
			this.resetServerModified();

		} else if (this.hasServerValueModification()) {
			CvgEntity.prototype.setServerValue.call(this, this.browserValue);
			this.resetServerModified();
		}
	},
	setUnModifiableServerValue: function(aResu) {
		this.storeBrowserValue(null);
		return CvgEntity.prototype.setUnModifiableServerValue.call(this, aResu);
	},
	storeBrowserValue: function(aBrowserValue) {
		this.browserValue = aBrowserValue;
	},
	toJSON: function() {
		this.calculateState();
		if (!this.hasServerValueModification() && !this.hasGuiModModifications() && this.state <=0) {
			return null;
		}
		var object = {};
		if( this.state > 0 )
			object.stt = this.state; 
			object.readable = this.getReadableState(); 
		if (this.hasModifStyle() && this.style != null) {
			object.sty = this.style; // style presentation
		}
		if (this.hasModifTitle()) {
			object.tit = this.title;
			if (this.titleStyle != null) {
				object.stytit = this.titleStyle;
			}
		}
		if (this.hasServerValueModification()) {
			var value = this.getValueForJson();
			if (value != null) {
				object.v = value;
			} else {
				object.v = "";
			}
		}
		return object;
	},
	unFormatData: function(aValue) {
		return aValue;
	},
	getValueForJson: function() {
		// no format if data are formatted by client format
		if (this.client.clientConfig.fmtLocalFormat) return  this.serverValue == null || this.serverValue.value == null ? "": this.serverValue.value;
		return this.getDisplayValue();
	}
});

CvgVariable.isDigit = function(ch) {
	return ch >= '0' && ch <= '9';
}
