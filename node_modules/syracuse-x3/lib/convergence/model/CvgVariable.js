"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require("syracuse-core/lib/locale");
var CvgEntity = require('syracuse-x3/lib/convergence/model/CvgEntity').CvgEntity;
var httpClient = require("syracuse-httpclient/lib/httpClient");
var CvgResuTdoLib = require('syracuse-x3/lib/convergence/types/CvgResu').TDO_LIB;
var CvgResuTag = require('syracuse-x3/lib/convergence/types/CvgResu').TAG;
var CvgDiagnose = require('syracuse-x3/lib/convergence/model/CvgDiagnose');
var querystring = require('querystring');

function _postDiag(variable, msg, detail) {
	CvgDiagnose.create(variable.client, 'ERROR', 500, msg, detail, null, "Formatter", null, true);
}

var CvgVariable = exports.CvgVariable = helpers.defineClass(function(srcLine, idx1, name, id, type, fmt, state) {
	CvgEntity.call(this, srcLine && srcLine.client, id, idx1, 'FIELD');
	this.isBo = false;
	this.mustBeFormatted = false;
	this.name = name;
	this.srcLine = srcLine;
	if (this.srcLine && this.srcLine.dataSrc && this.srcLine.dataSrc.alternativeId) {
		this.alternativeId = this.srcLine.dataSrc.alternativeId;
	}
	this.setStateFromDescr(state);
	this.dataType = type;
	this.resuType = this.dataType ? CvgResuTag[CvgResuTdoLib[this.dataType.toString()]] : -1;
	this.format = fmt;
	this.isEntrySup = false;
	// En dernier
	this.setJsonType('ENTITY');
}, CvgEntity, {
	cloneValues: function(v) {
		CvgEntity.prototype.cloneValues.call(this, v);
	},
	forceChange: function() {
		if (this.srcLine != null) {
			var dataSrc = this.srcLine && this.srcLine.dataSrc;
			if (dataSrc && dataSrc.isBlocGrid()) {
				// Sur modification de valeur on notifie le parent seuelemnt si bloc tableau ou liste gauche
				this.srcLine.cellHasBeenModified();
				return;
			}
		}
		CvgEntity.prototype.forceChange.call(this);
	},
	getAdxId: function() {
		if (this.srcLine == null) return null;
		return this.srcLine.getDataSrcAdxId() + this.getIdxInBloc() + ',' + this.srcLine.nodeId;

	},
	_addInMapIst: function(ist) {
		//console.log("id track "+ist);
		var val = ist.toString();
		if (this.srcLine && this.srcLine.dataSrc && this.srcLine.dataSrc.isBlocGrid()) {
			val += "," + (this.srcLine.zeroBaseLineIdx + 1);
		}
		this.client.mapIst[val] = this;
	},
	// retoune l'index de la variable dans le bloc en extrayant la partie numerique de l'id qui est de la forme "AH12"
	getIdxInBloc: function() {
		var wIdx = this.id;
		var wPos = 0;
		while (!CvgVariable.isDigit(wIdx.charAt(wPos))) {
			wPos++;
		}
		return wIdx.substring(wPos);
	},
	isOptimChvl: function() {
		return this.columnFormater.optimChvl !== -1 && this.columnFormater.optimChvl <= this.srcLine.zeroBaseLineIdx;

	},
	setOptimChvl: function() {
		this.columnFormater.optimChvl = this.srcLine.zeroBaseLineIdx;
	},
	// vrai si une modification de couleur, etat, titre, style ou choix contextuel a ete envoyee par le serveur sur l'entite.
	hasGuiModModifications: function() {
		return this.hasModifState() || this.hasModifTitle() || this.hasModifStyle();
	},
	razModification: function() {
		this.storeBrowserValue(this.serverValue);
		CvgEntity.prototype.razModification.call(this);
	},

	/**
	 * Valorise la variable avec une chaine representant une valeur non formatee.
	 * Cette methode est utilisee pour stocker la valeur saisie par l'utilisateur lors des envois des actions vers le serveur.
	 */
	setBrowserUnformattedValue: function(aBrowserValue) {
		this.setServerResu(aBrowserValue);
		this.storeBrowserValue(aBrowserValue);
	},
	setServerFormat: function(aFormat, fmt) {
		var wIndferredState = CvgEntity.prototype.setServerFormat.call(this, aFormat, fmt);
		this.mustBeFormatted = this.format != null && this.format.isValid();
		return wIndferredState;
	},
	/**
	 * Modification de la variable a patir d'un noeud "NDCHVL" recu du serveur.
	 * La valiable est modifiee seulement si le resu est different de la valeur initiale
	 * Apres cette valorisation, la variable est consideree comme
	 * modifiee
	 */
	/*setServerValue: function(aResu) {
		if (this.browserValue == null || !this.browserValue.equals(aResu)) {
			if (!this.client.optimChvl || !this.hasServerValueModification() || !this.isServerValueEquals(aResu)) {
				CvgEntity.prototype.setServerValue.call(this, aResu);
			} else {
				this.forceServerValueModification(true);
			}
		} else if (this.mustBeFormatted) {
			CvgEntity.prototype.setServerValue.call(this, aResu);
			this.resetServerModified();

		} else if (this.hasServerValueModification()) {
			CvgEntity.prototype.setServerValue.call(this, this.browserValue);
			this.resetServerModified();
		}
	},*/
	setUnModifiableServerValue: function(aResu) {
		this.storeBrowserValue(null);
		return CvgEntity.prototype.setUnModifiableServerValue.call(this, aResu);
	},
	storeBrowserValue: function(aBrowserValue) {
		this.browserValue = aBrowserValue;
	},
	setPColor: function(color) {
		CvgEntity.prototype.setPColor.call(this, color);
		if (this.srcLine) {
			if (!this.srcLine.pColorList[color]) {
				this.srcLine.pColorList[color] = {};
			}
			this.srcLine.pColorList[color][this.getObservableId()] = 1;
		}
		if (this.columnFormater) {
			if (!this.columnFormater.pColorList[color]) {
				this.columnFormater.pColorList[color] = {};
			}
			this.columnFormater.pColorList[color][this.getObservableId()] = 1;

		}
	},

	toJSON: function() {
		this.calculateState();
		if (!this.hasServerValueModification() && !this.hasGuiModModifications() && this.state <= 0) {
			return null;
		}
		var object = {};
		if (this.state > 0) object.stt = this.state;
		if (this.getReadableState() !== "") object.readable = this.getReadableState();
		if (this.hasModifStyle() && this.style != null) {
			object.sty = this.style; // style presentation
		} else if (this.style && this.stylePColorModified && this.stylePColor) {
			object.sty = this.stylePColor;
		}

		if (this.hasModifTitle()) {
			object.tit = this.title;
			if (this.titleStyle != null) {
				object.stytit = this.titleStyle;
			}
		}
		if (this.formatStr != null && this.formatStr !== "" && this.formatModified) object.fmt = this.formatStr;

		if (this.hasServerValueModification()) {
			// add manage of bo variable 
			var value = this.getValueForJson();
			if (this.isBo) {
				if (!this.client.boClient.token) {
					value = "";
				} else {
					// manage token
					var loc = locale.current;
					var lang = loc.split('-')[0];
					var encodedToken = encodeURIComponent(this.client.boClient.token);
					// manage query string
					var uriLen = value.indexOf('?');
					var uri = value.substring(0, uriLen);
					var args = querystring.parse(value.substring(uriLen + 1));
					var argsKeys = Object.keys(args);
					var encodedArgs = "";
					for (var i = 0; i < argsKeys.length; i++) {
						encodedArgs += encodeURIComponent(argsKeys[i]) + "=" + encodeURIComponent(args[argsKeys[i]]);
						if (i < argsKeys.length - 1) encodedArgs += "&";
					}
					value = this.client.baseUrl.replace('trans', 'bo') + "/$proxy-bo" + uri + "?" + encodedArgs + "&pvl=" + loc + "&lang=" + lang + "&sViewer=html&token=" + encodedToken;
				}
			}
			if (value != null) {
				object.v = value;
			} else {
				object.v = "";
			}
		}
		return object;
	},
	getValueForJson: function() {
		return this.serverValue == null || this.serverValue.value == null ? "" : this.serverValue.value;
	}
});

CvgVariable.isDigit = function(ch) {
	return ch >= '0' && ch <= '9';
};