"use strict";
var helpers = require('syracuse-core/lib/helpers');
var locale = require("syracuse-core/lib/locale");
var CvgEntity = require('syracuse-x3/lib/convergence/model/CvgEntity').CvgEntity;
var CvgException = require('syracuse-x3/lib/convergence/model/CvgException').CvgException;

var CvgVariable = exports.CvgVariable = helpers.defineClass(function(srcLine, aEntityIndexBaseOne, aVariableName, aVariableId, aDataType, aFormat, aEntityState) {
	CvgEntity.call(this, srcLine && srcLine.client, aVariableId, aEntityIndexBaseOne, 'FIELD');
	this.srcLine = null;
	this.browserValue = null;
	this.decimals = 0;
	this.mustBeFormatted = false;
	this.withDecimal = false;

	this.name = aVariableName;
	this.srcLine = srcLine;
	this.setStateFromDescr(aEntityState);
	this.dataType = aDataType;
	// TODO
	//this.resuType = CvgResu.tdoNumToResuTyp(this.dataType);
	this.format = aFormat;
	// En dernier
	this.setJsonType('ENTITY');
}, CvgEntity, {
	acceptEditFormat: function() {
		return true;
	},
	buildMsgFormatterException: function(aMessKey, aWhatFormatKey, aValue, e) {
		console.error(e.stack);
		return e.message;
		// next line triggers infinite recursion!!!
		return this.buildMsgFormatterException(aMessKey, aWhatFormatKey, aValue, e);
	},
	/* TODO overload
	buildMsgFormatterException: function(aMessKey, aWhatFormatKey, aValue, aErrDescr) {
		return locale.format(getRsrcMess(aMessKey), getRsrcMess(aWhatFormatKey), this.id, aErrDescr);
	},*/
	callFormater: function(aValue) {
		try {
			if (this.client.hasValidFormater() && this.hasValidFormat()) {
				// "formater" ET format valide
				return this.client.formater.formatField(this.format, aValue, true);
			} else if (aValue != null && aValue.length > 0) {
				// pas de "formater" ou si le format n'est pas valide
				return this.formatHimself(aValue);
			}
		} catch (e) {
			this.client.addLogicalErrorMess(this, "callFormater", this.getAdxId(), this.buildMsgFormatterException('ERROR_FORMAT_EXCEPTION', 'FORMAT_RTOS', aValue, e));
		}
		return aValue; // retourne la donnee brute
	},
	callUnFormater: function(aValue) {
		if (this.client.hasValidFormater() && this.hasValidFormat()) {
			try {
				var fmt = this.client.formater;
				// Format la valeur - 1/2/3 -> 01/02/03
				try {
					aValue = fmt.formatField(this.format, aValue, false);
				} catch (e) {
					throw e; // BRJOU TEMP, should ignore
					// aValue peut etre une valeur formatee au format X3 --> On
					// tente le unformate
				}
				// Déformate - 01/02/03 -> 20030201
				return fmt.unformatField(this.format, aValue, true);
			} catch (e) {
				throw new CvgException(this.client, e, this.buildMsgFormatterException('ERROR_UNFORMAT_EXCEPTION', 'UNFORMAT_STOR', aValue, e), true);
			}
		}
		// No format
		return this.unformatHimself(aValue);
	},

	//clone: function();
	cloneValues: function(v) {
		CvgEntity.prototype.cloneValues.call(this, v);
		v.browserValue = this.browserValue;
	},
	forceChange: function() {
		if (this.srcLine != null) {
			var dataSrc = this.srcLine.dataSrc;
			if (dataSrc.isBlocGrid()) {
				// Sur modification de valeur on notifie le parent seuelemnt si bloc tableau ou liste gauche
				this.srcLine.cellHasBeenModified();
				return;
			}
		}
		CvgEntity.prototype.forceChange.call(this);
	},
	formatEditToDisplay: function(aValue) {
		if (!this.acceptEditFormat()) {
			return aValue;
		}
		if (this.client.hasValidFormater() && this.hasValidFormat()) {
			try {
				var res = this.client.formater.inputGetFocusOutValue(this.format, aValue, true);
			} catch (e) {
				console.error(e.stack);
				try {
					// ON essaie pour voir si la valeur saisie est une valeur
					// formatée X3 (Display)
					res = this.client.formater.unformatField(this.format, aValue);
					res = this.client.formater.formatField(this.format, aValue, true, true);
				} catch (e2) {
					throw new CvgException(this.client, e, this.buildMsgFormatterException('ERROR_FORMAT_EXCEPTION', 'FORMAT_ETOS', aValue, e), true);
				}
			}
			return res;
		} else {
			return aValue;
		}
	},
	// Valeur renvoyée si pas de formateur ou pas de format - Surchargée par
	// type de variable
	formatHimself: function(aValue) {
		return aValue;
	},
	formatX3ToDisplay: function(aData) {
		var x3Value = aData.value;
		// formatage uniquement si session interractive
		var wMustCallFormater = true;
		if (!this.mustBeFormatted) {
			wMustCallFormater = false;
		}
		if (wMustCallFormater && x3Value == null) {
			wMustCallFormater = false;
		}
		var res;
		if (wMustCallFormater) {
			res = this.callFormater(x3Value);
		} else {
			res = x3Value;
		}
		return res;
	},
	formatX3ToEdit: function() {
		var val = this.serverValue != null ? this.serverValue.value : null;
		var res = val;
		if (this.acceptEditFormat() && this.mustBeFormatted && val != null) {
			if (this.hasValidFormat() && this.client.hasValidFormater()) {
				try {
					res = this.client.formater.inputGetFocusInValue(this.format, val, true);
				} catch (e) {
					this.client.addLogicalErrorMess(this, "callUnformaterToEdit", this.id, this.buildMsgFormatterException('ERROR_UNFORMAT_EXCEPTION', 'UNFORMAT_STOE', val, e));
				}
			}
		}
		return res;
	},
	getAdxId: function() {
		if (this.srcLine == null) {
			return null;
		}
		var sb = "";
		sb += this.srcLine.getDataSrcAdxId() + this.getIdxInBloc() + ',' + this.srcLine.nodeId;
		return sb;

	},

	// Retourne la valeur courante suivant le codage ou la conversion lie au
	// type de de donnee
	getDisplayValue: function() {
		var res = this.serverValue != null ? this.formatX3ToDisplay(this.serverValue) : "";
		// formatX3ToDisplay peut renvoyer null
		return res == null ? "" : res;
	},

	// retoune l'index de la variable dans le bloc en extrayant la partie
	// numerique de l'id qui est de la forme "AH12"
	getIdxInBloc: function() {
		var wIdx = this.id;
		var wPos = 0;
		while (!CvgVariable.isDigit(wIdx.charAt(wPos))) {
			wPos++;
		}
		return wIdx.substring(wPos);
	},

	// vrai si une modification de couleur, etat, titre, style ou choix
	// contextuel a ete envoyee par le serveur sur l'entite.
	hasGuiModModifications: function() {
		return this.hasModifState() || this.hasModifTitle() || this.hasModifStyle();
	},
	isWithDecimal: function() {
		return this.withDecimal;
	},
	razModification: function() {
		this.storeBrowserValue(this.serverValue);
		CvgEntity.prototype.razModification.call(this);
	},

	/**
	 * Valorise la variable avec une chaine representant une valeur non
	 * formatee. Cette methode est utilisee pour stocker la valeur saisie par
	 * l'utilisateur lors des envois des actions vers le serveur.
	 */
	setBrowserUnformattedValue: function(aBrowserValue) {
		this.setServerResu(aBrowserValue);
		this.storeBrowserValue(aBrowserValue);
	},
	setDecimal: function(aDecimal) {
		this.decimals = aDecimal;
		this.withDecimal = this.decimals > 0 || this.decimals === -1;
	},
	setServerFormat: function(aFormat) {
		var wIndferredState = CvgEntity.prototype.setServerFormat.call(this, aFormat);
		this.mustBeFormatted = this.hasValidFormat();
		return wIndferredState;
	},

	/**
	 * Modification de la variable e patir d'un noeud "NDCHVL" reeu du serveur.
	 * La valiable est modifiee seulement si le resu est different de la valeur
	 * initiale Apres cette valorisation, la variable est consideree comme
	 * modifiee
	 */
	setServerValue: function(aResu) {
		if (this.browserValue == null || !this.browserValue.equals(aResu)) {
			if (!this.hasServerValueModification() || !this.isServerValueEquals(aResu)) {
				CvgEntity.prototype.setServerValue.call(this, aResu);
			} else {
				this.forceServerValueModification(true);
			}
		} else if (this.mustBeFormatted) {
			CvgEntity.prototype.setServerValue.call(this, aResu);
			this.resetServerModified();

		} else if (this.hasServerValueModification()) {
			CvgEntity.prototype.setServerValue.call(this, this.browserValue);
			this.resetServerModified();
		}
	},
	setUnModifiableServerValue: function(aResu) {
		this.storeBrowserValue(null);
		return CvgEntity.prototype.setUnModifiableServerValue.call(this, aResu);
	},
	storeBrowserValue: function(aBrowserValue) {
		this.browserValue = aBrowserValue;
	},
	toJSON: function() {
		if (!this.hasServerValueModification() && !this.hasGuiModModifications()) {
			return null;
		}
		var object = {};
		if (this.hasModifState()) {
			object.stt = this.state;
		}
		if (this.hasModifStyle() && this.style != null && this.style.length !== 0) {
			object.sty = this.style; // style presentation
		}
		if (this.hasModifTitle()) {
			object.tit = this.title;
			if (this.titleStyle != null) {
				object.stytit = this.titleStyle;
			}
		}
		if (this.hasServerValueModification()) {
			var value = this.getValueForJson();
			if (value != null) {
				object.v = value;
			} else {
				object.v = "";
			}
		}
		return object;
	},
	unFormatData: function(aValue) {
		return aValue;
	},

	// Valeur renvoyée si pas de formateur ou pas de format - Surchargée par
	// type de variable
	unformatHimself: function(aValue) {
		return aValue;
	},
	getValueForJson: function() {
		return this.getDisplayValue();
	}
});

CvgVariable.isDigit = function(ch) {
	return ch >= '0' && ch <= '9';
}