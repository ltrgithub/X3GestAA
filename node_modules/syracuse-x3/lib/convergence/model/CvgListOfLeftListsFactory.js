"use strict";
var helpers = require('@sage/syracuse-core').helpers;
var CvgResu = require('syracuse-x3/lib/convergence/types/CvgResu').CvgResu;
var CvgResuTdo = require('syracuse-x3/lib/convergence/types/CvgResu').TDO;
var CvgScreen = require('syracuse-x3/lib/convergence/model/CvgScreen').CvgScreen;
var CvgLeftList = require('syracuse-x3/lib/convergence/model/CvgLeftList').CvgLeftList;
var CvgLeftListLine = require('syracuse-x3/lib/convergence/model/CvgLeftListLine').CvgLeftListLine;
var CvgLeftListLineLevel = require('syracuse-x3/lib/convergence/model/CvgLeftListLine').CvgLeftListLineLevel;
var CvgVariableFactory = require('syracuse-x3/lib/convergence/model/CvgVariableFactory').CvgVariableFactory;
var CvgLeftListRecursiv = require('syracuse-x3/lib/convergence/model/CvgLeftListRecursiv').CvgLeftListRecursiv;
var CvgLeftListHierarchic = require('syracuse-x3/lib/convergence/model/CvgLeftListHierarchic').CvgLeftListHierarchic;
var CvgLeftListLineNode = require('syracuse-x3/lib/convergence/model/CvgLeftListLineNode').CvgLeftListLineNode;
var CvgException = require('syracuse-x3/lib/convergence/model/CvgException').CvgException;

var CvgScreenLeftList = exports.CvgScreenLeftList = helpers.defineClass(function(aRequesterWindow, llList) {
	CvgScreen.call(this, aRequesterWindow, CvgScreen.SCREEN_LEFTLIST_NUM_ZERO_BASED + 1, "_SCRNLEFT", llList);
}, CvgScreen, {});

function _extactType(aValue) {
	var wPos = aValue.indexOf(',');
	return parseInt(aValue.substring(0, wPos), 10);
}

function _newLeftListEntry(win, leftLst, aId, colsDescr) {
	if (leftLst.isRecursive()) {
		return _newLeftListLineNode(win, leftLst, aId, colsDescr);
	} else if (leftLst.isHierarchic()) {
		return _newLeftListLineFlat(win, leftLst, aId, colsDescr);
	} else {
		return _newLeftListLineFlat(win, leftLst, aId, colsDescr);
	}
}

/* DUPLICATE!
function _newLeftListLineFlat(win, leftLst, aId, colsDescr) {
	var nbFlds = parseInt(colsDescr.$.NBZ, 10);
	var line = new CvgLeftListLine(win, leftLst, aId, nbFlds, leftLst.lines.length);
	var colFields = colsDescr.FLD;
	var wForcedTDO = 0;
	_newLeftListLineVars(win, line, aId, colFields, wForcedTDO);
	return line;
}
*/

function _newLeftListLineFlat(win, leftLst, aId, colsDescr) {
	var nbFlds = parseInt(colsDescr.$.NBZ, 10);
	var line = new CvgLeftListLineLevel(win, leftLst, aId, nbFlds, leftLst.lines.length);
	var colFields = colsDescr.FLD;
	var wForcedTDO = CvgResuTdo.STRU;
	if (colFields)
		_newLeftListLineVars(win, line, aId, colFields, wForcedTDO);
	return line;
}

function _newLeftListLineNode(win, leftLst, aId, colsDescr) {
	var node = new CvgLeftListLineNode(win, leftLst, aId, 1, leftLst.lines.length);
	var prefId = leftLst.id;
	prefId = prefId.substring(prefId.length - 1);
	var col = CvgVariableFactory.instanciateLeftListColumn(win, node, 1, prefId + "1");
	node.addOneVar(col);
	return node;
}

function _newLeftListLineVars(win, line, aId, colFields, aForcedTDO) {
	var wMax = Array.isArray(colFields) ? colFields.length : 1;
	if (wMax === 0) {
		var wMess = win.client.getMessage('ERROR_NO_COLUMS', aId);
		throw new CvgException(win.client, null, wMess);
	}
	for (var i = 0; i < wMax; i++) {
		var colNode = wMax === 1 ? colFields : colFields[i];
		var col = CvgVariableFactory.instanciateVariable(win, line, i + 1, aId, colNode, aForcedTDO);
		line.addOneVar(col);
	}
}

var CvgListOfLeftListsFactory = exports.CvgListOfLeftListsFactory = {
	addLeftLists: function(win, aScreens, winDescr, llList) {
		var nodes = winDescr.LEFTLIST.LST;
		var wMax = Array.isArray(nodes) ? nodes.length : 1;
		if (nodes && wMax > 0) {
			var wScreen = new CvgScreenLeftList(win, llList);
			aScreens.pushScreenLeftList(wScreen);
			llList.setScreen(wScreen);
			for (var i = 0; i < wMax; i++) {
				var node = wMax === 1 ? nodes : nodes[i];
				llList.pushEntity(node.$.ID, this._newLeftList(win, wScreen, i + 1, node.$.ID, node));
			}
		}
	},

	newListEntrySup: function(win, leftLst, aNbField) {
		var line = new CvgLeftListLine(win, leftLst, leftLst.id, aNbField, leftLst.lines.length);
		var prefId = leftLst.id;
		prefId = prefId.substring(prefId.length - 1);
		for (var i = 0; i < aNbField; i++) {
			var col = CvgVariableFactory.instanciateLeftListColumn(win, line, i + 1, prefId + (i + 1).toString());
			line.addOneVar(col);
		}
		return line;
	},

	_newLeftList: function(win, screen, idxBase1, aId, colsDescr) {
		var fmt = _extactType(colsDescr.$.TYL);
		var nbFlds = parseInt(colsDescr.$.NBZ, 10);
		var alternativeId = colsDescr.$.ALTID;
		var leftLst = null;
		if (CvgLeftList.isHierarchicFormat(fmt)) {
			// console.log("CvgLeftListHierarchic " + aId);
			// console.log("\tX3\n"+ JSON.stringify(colsDescr,null,2));
			leftLst = new CvgLeftListHierarchic(win, screen, idxBase1, aId, fmt, nbFlds);
			colsDescr = leftLst.getCustomColDescr(colsDescr);
			// console.log("\tCUSTOM\n"+ JSON.stringify(colsDescr,null,2));
		} else if (CvgLeftList.isRecursiveFormat(fmt)) {
			leftLst = new CvgLeftListRecursiv(win, screen, idxBase1, aId, fmt, nbFlds);
		} else {
			leftLst = new CvgLeftList(win, screen, idxBase1, aId, fmt, nbFlds);
		}
		var line = _newLeftListEntry(win, leftLst, aId, colsDescr);
		leftLst.alternativeId = alternativeId;
		leftLst.setEntrySup(line);
		return leftLst;
	}
};