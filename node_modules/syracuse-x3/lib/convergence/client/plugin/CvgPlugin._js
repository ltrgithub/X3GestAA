"use strict";
var helpers = require('@sage/syracuse-core').helpers;
var CvgPluginTarget = require('syracuse-x3/lib/convergence/model/CvgPluginTarget').CvgPluginTarget;
var flows = require('streamline-runtime').flows;
var CvgObserver = require("syracuse-x3/lib/convergence/client/CvgObserver").CvgObserver;
var CvgSpecialAction = require('syracuse-x3/lib/convergence/client/CvgAction').SpecialActions;
var automata = require("syracuse-x3/lib/convergence/automata/x3Automata");
var CvgServices = require('syracuse-x3/lib/convergence/client/CvgPluginServices');
var CvgResu = require("syracuse-x3/lib/convergence/types/CvgResu").TDO;
var CvgResuTdo = require("syracuse-x3/lib/convergence/types/CvgResu").CvgResu;
var CvgIst = require('syracuse-x3/lib/convergence/types/CvgIst').CvgIst;
var globals = require('streamline-runtime').globals;


// abstract
exports.CvgPlugin = helpers.defineClass(function(client, id) {
	CvgObserver.call(this);

	this.client = client;
	this._cvgSession = client._cvgSession;
	this.type = "asynchronous",

		this.isPlugin = true;
	this.context = null;
	this.services = CvgServices.create(this);
	this.id = id;
	this._trackLists = this.newTrackLists();
	this.response = {
		head: {
			statusCode: 200
		},
		body: {}
	};



}, CvgObserver, {
	razModification: function() {
		this.response = {
			head: {
				statusCode: 200
			},
			body: {}
		};
		this._trackLists = this.newTrackLists();
		this.target && this.target.razModification();

	},
	toJSONPlugin: function() {
		return {};
	},
	toJSON: function() {
		var cookies, elbCookie, elbName = "AWSELB";
		var plug = {
			"class": this.class,
			name: this.name,
			type: this.type,
			module: this.module,
			method: this.method.toLowerCase(),
			methodId: this.methodid
		};

		plug.cookieSess = this.client.syraSessionCookie;
		if (plug.cookieSess && (cookies = helpers.http.parseCookie(globals.context.request.headers.cookie))) {
			if ((elbCookie = cookies[elbName])) {
				plug.cookieSess += ("; " + elbName + "=" + elbCookie);
			}
		}

		return {
			type: "plugin",
			plugin: plug
		};
	},
	getPluginTarget: function() {
		if (!this.target) {
			this.target = CvgPluginTarget.create(this, this);
		}
		return this.target;
	},

	// process request sent by the ilog client, return true if acknowledgement of delete  else false
	processRequest: function(_, context, bodyStr, tracker) {
		// initialize mandatory for stop tracker ending node
		this.currentTracker = tracker; // set current tracker
		this.context = context;

		var body = JSON.parse(bodyStr);

		var specialAction = CvgSpecialAction[body.act];
		if (!specialAction) {
			throw new Error("Bad special action [" + body.act + "]");
		}
		this.id = body && body.param && body.param.plugin.id || this.id;
		// call special action
		return this["specialAction" + body.act].apply_(_, this, [context, body, tracker], 0);
	},
	writeAckReply: function(_, plugin) {
		if (plugin && plugin.return && plugin.return.property) {
			var prop = {};
			prop[plugin.return.property.name] = plugin.return.property.value;
			this.client.serialize(_, prop);
		}
	},
	getTarget: function() {
		var lists = this._trackLists;
		return lists.TARGET[lists.TARGET.length - 1].toJSON();
	},

	generateResponse: function(_, connect, isTrack) {

		var lists = this._trackLists;
		//console.log("generate "+ this.id);
		this.getPluginTarget().plugin = this;
		var response = {
			sap: {}
		};
		var sap = response.sap;
		if (lists.TARGET.length !== 0) {
			var target = this.getTarget();
			if (!isTrack) {
				sap.target = target;
			} else if (sap.target) {
				delete sap.target;
			}
		}
		// serialized NDEXECI
		this.response.body = response;

	}
}); // Dummy comment to clean up rollout repository #6948