"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgPluginTarget = require('syracuse-x3/lib/convergence/model/CvgPluginTarget').CvgPluginTarget;
var flows = require("streamline/lib/util/flows");
var CvgObserver = require("syracuse-x3/lib/convergence/client/CvgObserver").CvgObserver;
var CvgSpecialAction = require('syracuse-x3/lib/convergence/client/CvgAction').SpecialActions;
var automata = require("syracuse-x3/lib/convergence/automata/x3Automata");
var CvgServices = require('syracuse-x3/lib/convergence/client/CvgPluginServices');
var CvgResu = require("syracuse-x3/lib/convergence/types/CvgResu").TDO;
var CvgResuTdo = require("syracuse-x3/lib/convergence/types/CvgResu").CvgResu;
var CvgIst = require('syracuse-x3/lib/convergence/types/CvgIst').CvgIst;
var CvgPlugin = require("syracuse-x3/lib/convergence/client/plugin/CvgPlugin").CvgPlugin;
var NAME_GANT = "gantt";
var NAME_SCALE = "scale";
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;


//
var notBlindProp = ["UIAction"];
exports.CvgPluginCR = helpers.defineClass(function(client, id) {
	CvgPlugin.call(this, client, id);
	this.class = "CrystalReport";
	this.method = "new";
	this.name = "development";
	this.blindProperties = {};
	CvgPluginTarget.create(client, this);

	this.Folder = null;
	this.Solution = null;
}, CvgPlugin, {

	addBlindProperties: function(_, values) {
		var self = this;
		Object.keys(values).forEach(function(key) {
			if (notBlindProp.indexOf(key) === -1) {
				self.blindProperties[key] = values[key];
				if (key === 'Folder' || key === 'Solution') {
					self[key] = values[key];
				}
			}
		});
		// deduce endpoint and add endpointproxy url in property
		var db = adminHelper.getCollaborationOrm(_);
		var solution = db.fetchInstance(_, db.getEntity(_, "x3solution"), {
			jsonWhere: {
				solutionName: this.Solution
			}
		});
		if (!solution) throw new Error("No solution found with name [" + this.Solution + "]");
		var endpoints = solution.endpoints(_).toArray(_).filter_(_, function(_, ep) {
			return ep.x3ServerFolder(_) === self.Folder;
		});
		var endpoint = endpoints.length > 0 && endpoints[0] ? endpoints[0] : null;
		if (!endpoint) throw new Error("No endpoint found for solution [" + this.Solution + "] and folder [" + this.Folder + "]");

		this.endpointProxy = "/sdata/" + endpoint.application(_) + "/" + endpoint.contract(_) + "/" + endpoint.dataset(_) + "/";
	},

	toJSON: function() {
		var self = this;
		var res = CvgPlugin.prototype.toJSON.call(this);
		Object.keys(this.blindProperties).forEach(function(key) {
			res.plugin[key] = self.blindProperties[key];
		});
		// add endpointProxy
		res.plugin.EndpointProxy = this.endpointProxy;
		return res;
	},

	specialAction532: function(_, context, body, tracker) {
		// no orchestration we have to wai the end of current processAction by call the funnalAction.
		this.writeAckReply(_, body && body.param && body.param.plugin);
		// delete plugin from plugin list in client
		this.client.clientCrDeletePlugin();
		this.client.funnelAction(_, function() {
			//do nothin just wait the end of current action
		});
	}

});