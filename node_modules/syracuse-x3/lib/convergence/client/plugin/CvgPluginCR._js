"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgPluginTarget = require('syracuse-x3/lib/convergence/model/CvgPluginTarget').CvgPluginTarget;
var x3writer = require("syracuse-x3/lib/convergence/automata/x3writer");
var flows = require("streamline/lib/util/flows");
var CvgObserver = require("syracuse-x3/lib/convergence/client/CvgObserver").CvgObserver;
var CvgSpecialAction = require('syracuse-x3/lib/convergence/client/CvgAction').SpecialActions;
var automata = require("syracuse-x3/lib/convergence/automata/x3Automata");
var CvgServices = require('syracuse-x3/lib/convergence/client/CvgPluginServices');
var CvgResu = require("syracuse-x3/lib/convergence/types/CvgResu").TDO;
var CvgResuTdo = require("syracuse-x3/lib/convergence/types/CvgResu").CvgResu;
var CvgActions = require('syracuse-x3/lib/convergence/client/CvgAction').Actions;
var CvgIst = require('syracuse-x3/lib/convergence/types/CvgIst').CvgIst;
var CvgPlugin = require("syracuse-x3/lib/convergence/client/plugin/CvgPlugin").CvgPlugin;
var NAME_GANT = "gantt";
var NAME_SCALE = "scale";


//
var notBlindProp = ["UIAction"];
exports.CvgPluginCR = helpers.defineClass(function(client, id) {
	CvgPlugin.call(this, client, id);
	this.class = "CrystalReport";
	this.method = "new";
	this.name = "development";
	this.blindProperties = {};
	CvgPluginTarget.create(client, this);

}, CvgPlugin, {

	addBlindProperties: function(values) {
		var self = this;
		Object.keys(values).forEach(function(key) {
			if (notBlindProp.indexOf(key) === -1) {
				self.blindProperties[key] = values[key];

			}
		});

	},
	toJSON: function() {
		var self = this;
		var res = CvgPlugin.prototype.toJSON.call(this);
		Object.keys(this.blindProperties).forEach(function(key) {
			res.plugin[key] = self.blindProperties[key];
		});

		return res;
	},

	specialAction532: function(_, context, body, tracker) {
		this.writeAckReply(_, body && body.param && body.param.plugin);
		// delete plugin from plugin list in client
		this.client.clientCrDeletePlugin();
		// reprocess automata for the client
		automata.process(_, this.client, this.client.activeRequest, {
			title: "special",
			detail: "REPLY_CALLUI"
		});
	}


});