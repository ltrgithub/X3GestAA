"use strict";
var helpers = require('syracuse-core/lib/helpers');
var x3helpers = require("syracuse-x3/lib/helpers");
var CvgException = require('syracuse-x3/lib/convergence/model/CvgException').CvgException;
var uuid = helpers.uuid;

var CvgBlobSvc = exports.CvgBlobSvc = helpers.defineClass(function(_, client) {
	this.client = client;
	this.blobs = {}
}, null, {
	register: function(mimeType, binary) {
		var $uuid = uuid.generate();
		this.blobs[$uuid] = {mimeType: mimeType, binary: binary};
		return $uuid;
	},
	processRequest: function(_, context) {
		try {
			switch(context.method) {
			case 'get':
				var id = context.parameters.id;
				//console.log("context.parameters : "+JSON.stringify(context.parameters,null,2));
				var blob = this.blobs[id];
				var header = {};
				if (blob && blob.mimeType) header["content-type"] = blob.mimeType;
				context.response.writeHead(!blob ? 404 : 200, header);
				if (blob && blob.mimeType && blob.binary) context.response.write(_, blob.binary, 'binary');
				context.response.end();
				break;
			case 'put':
			default:
				throw new Error("bad method: " + context.method);
			}

		} catch (ex) {
			// remove console.log later
			console.log(ex.stack);
			throw new CvgException(this.client, ex, client.getMessage('FORMAT_BLOB_ERROR'));
		}
	}
});


		
		
var CvgFormatSvc = exports.CvgBlobSvc = helpers.defineClass(function(_, client) {
	this.client = client;
	
	
}, null, {
	processRequest: function(_, context) {
		try {
			if (context.method !== 'put') throw new Error("bad method: " + context.method);
			var act = context.parameters.act;
			var post = JSON.parse(context.request.readAll(_));
			
			//console.log("FORMATTER SVC POST : "+JSON.stringify(post,null,2));
			

			var act = context.parameters.svc;
			var val = post.value;
			var fmt = {format: post.fmt};
			var typ = post.typ;
			
			var result, error;
			
			if (!val) {
				result = "";
			} else if (fmt == null || fmt.length < 2) {
				result = val;
			} else {
				try{
					switch(act) {
					case 'toRaw':
						// la valeur en entree correspond a du ‘Edit ou du ‘Display
						// , renvoyer la valeur au format interne x3 (YYYYMMDD)
						result = this.formatRaw(val, fmt);
						break;
					case 'toDisp':
						// la valeur en entree correspond a du ‘Edit ou du ‘Display
						// , renvoyer la valeur mise en forme selon le format «
						// Display »
						result = this.formatDisp(val, fmt, false);
						break;
					case 'toEdit':
						// la valeur en entree correspond a du ‘Edit ou du ‘Display
						// , renvoyer la valeur mise en forme selon le format « Edit
						// »
						result = this.formatEdit(val, fmt, typ, false);
						break;
					case 'rawToEdit':
						// a partir d’une valeur au format interne x3 (YYYYMMDD),
						// renvoyer la valeur mise en forme selon le format « Edit »
						result = this.formatEdit(val, fmt, typ, true);
						break;
					case 'rawToDisp':
						// a partir d’une valeur au format interne x3 (YYYYMMDD),
						// renvoyer la valeur mise en forme selon le format «
						// Display »
						result = this.formatDisp(val, fmt, true);
						break;
					default:
						throw new Error("Unknow action [" + act + "]");
					}
				} catch(e) {
					console.error("Formatter error: "+e.stack);
					error = e.message;
					result = null
				}

			}

			var response = {
				result: result
			};
			
			context.response.writeHead((error || !result) ? 500 : 200, {
				"content-type": "application/json",
			});
			context.response.write(_, JSON.stringify(response), 'utf8');
			context.response.end();
		} catch (ex) {
			// remove console.log later
			console.log(ex.stack);
			throw new CvgException(this.client, ex, client.getMessage('FORMAT_SVC_ERROR'));
		}
	},
	
	// --------------------------------------------------------------------
	// Disp ou Edit-> Disp
	formatDisp: function(val, fmt, raw) {
		var strict = true;
		if (!raw) {
			try {
				// Si val est un valeur formatee X3 alors le unformat renvoie la
				// valeur X3
				r = this.client.formater.unformatField(fmt, val, true);
				return this.client.formater.formatField(fmt, r, true, strict);
			} catch (e) {
			}
			// val n'est pas une valeur au format x3 - Valeur saisie par
			// l'utilisateur
			return this.client.formater.formatField(fmt, val, false, strict);
		} else {
			return this.client.formater.formatField(fmt, val, true, strict);
		}

	},

	// --------------------------------------------------------------------
	// Disp ou Edit-> Edit
	formatEdit: function(val, fmtStr, typ, raw) {
		return this.client.formater.inputGetFocusInValue(fmtStr, val, raw);
	},
	
	// --------------------------------------------------------------------
	// Disp ou Edit-> Raw
	formatRaw: function(val, fmt) {
		try {
			// Si val est un valeur formatee X3 alors le unformat renvoie la
			// valeur X3
			// Sinon erreur
			return this.client.formater.unformatField(fmt, val, true);
		} catch (e) {
		}
		// val n'est pas une valeur au format x3 - Valeur saisie par
		// l'utilisateur
		// On formate puis deformate
		val = this.client.formater.formatField(fmt, val, false);
		return this.client.formater.unformatField(fmt, val, true);
	},

});



exports.create = function(_, client) {
	return {
		blobSvc: new CvgBlobSvc(_, client),
		formatSvc: new CvgFormatSvc(_, client),
	}
}
