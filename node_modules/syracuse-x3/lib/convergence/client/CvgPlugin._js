"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgPluginTarget = require('syracuse-x3/lib/convergence/model/CvgPluginTarget').CvgPluginTarget;
var x3writer = require("syracuse-x3/lib/convergence/automata/x3writer");


var NAME_GANT = "gantt";
var NAME_SCALE = "scale";

exports.CvgPlugin = helpers.defineClass(function(_, client) {
	this.pluginControler;
	this.client = client;
}, null, {
	call: function(_, nodeName, property) {
		// TODO
		var fcContext = this["_readPlugin" + nodeName];

		var ilog = fcContext && fcContext.apply_(_, this, [property], 0); // construct context depending the plugin to call
		if (!ilog)
			throw new Error("Can't read context to call plugin (node " + nodeName + ")");

		var fc = this["callPlugin" + ilog.class + ilog.method]; //  method of plugin to plugin
		var res = fc.apply_(_, this, [ilog], 0);
		if (ilog.method !== "Update") // if not update serialize to the classic page client
			CvgPluginTarget.create(this.client, ilog);
	},

	callPluginIlogNew: function(_, opt) {
		// TODO call plugin controler to instanciate new plug controler and get id
		return {
			id: "TODO"
		};
	},
	callPluginIlogUpdate: function(_, opt) {
		// TODO
		// notify plugin controler

		// send response to X3
		x3writer.props1Serializer.write(_, this.cvgClient, {});
	},
	callPluginIlogDelete: function(_, opt) {
		//TODO
		return {
			id: "TODO"
		};
	},
	_readPluginND_OCX: function(_, property) {
		return null;
	},
	_readPluginND_IHM: function(_, property) {
		var name, method;
		switch (property.IAction) {
			case '1':
				name = NAME_GANT;
				method = "New";
				break;
			case '2':
				name = NAME_GANT;
				method = "Update";
				break;
			case '3':
				name = NAME_GANT;
				method = "Delete";
				break;
			case '6':
				name = NAME_SCALE;
				method = "New";
				break;
			case '7':
				name = NAME_SCALE;
				method = "Update";
				break;
			case '8':
				name = NAME_SCALE;
				method = "Delete";
				break;
		}
		return {
			name: name,
			method: method,
			id: property.INumber || null,
			type: "asynchronous",
			module: property.IModule,
			"class": "Ilog",
			methodid: parseInt(property.IAction, 10)
		};
	}
});