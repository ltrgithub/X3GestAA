"use strict";
require('streamline').register({
	cache: true
});
var helpers = require('syracuse-core/lib/helpers');

var Stream = helpers.defineClass(function() {
	this.items = [];
	this.mode = "";
}, null, {
	add: function(data, mode) {
		//console.log("adding " + mode)
		var item = this.items[this.items.length - 1];
		if (!item || item.mode !== mode) {
			this.items.push({
				mode: mode,
				data: data,
				pos: 0
			});
		} else {
			if (mode !== "read" && mode !== "write") throw new Error("unexpected repeat mode: " + mode);
			item.data = Buffer.concat([item.data, data]);
		}
	},
	finish: function() {
		this.add(null, "request");
		this.item = this.items.slice(0, 1);
	},
	flush: function(mode) {
		if (this.item && this.item.mode !== mode) {
			switch (this.item.mode) {
				case 'read':
					if (this.item.pos !== this.item.data.length) throw new Error("read stopped before end");
					break;
				case 'write':
					if (this.item.data.length > 0) console.log("write mismatch");
					break;
			}
			this.item = this.items.splice(0, 1)[0];
			if (!this.item || this.item.mode !== mode) throw new Error("synchro lost: expected " + mode + ", got " + (this.item && this.item.mode));
		}
		return this.item;
	},
	read: function(_, len) {
		//console.log("READING: " + len);
		var item = this.flush('read');
		if (len === undefined) len = item.data.length - item.pos;
		if (item.pos + len > item.data.length) throw new Error("reached end of test data: " + len);
		var data = item.data.slice(item.pos, item.pos + len);
		this.item.pos += len;
		return data;
	},
	write: function(_, data) {
		//console.log("WRITING: " + data.length);
		var item = this.flush('write');
		if (data.length > item.data.length) return console.error("write length mismatch: expected " + data.length + ", got " + item.data.length);
		var d = item.data.slice(0, data.length);
		if (d.toString('hex') !== data.toString('hex')) return console.error("write mismatch: expected " + d.toString('hex') + ", got " + data.toString('hex'));
		item.data = item.data.slice(data.length);
	},
	reply: function(response) {
		var item = this.flush('response');
		fix(response);
		fix(item.data);
		var count = compare(response, item.data, "response");
		console.log(count + " differences detected.");
	},
	request: function() {
		var item = this.flush('request');
		return item.data;
	}
});

var stream = new Stream();

function WRITE(vals) {
	stream.add(new Buffer(vals), "write");
}

function READ(vals) {
	stream.add(new Buffer(vals), "read");
}

function RESPONSE(obj) {
	stream.add(obj, "response");
}

function REQUEST(obj) {
	stream.add(obj, "request");
}

eval(require('streamline-fs').readFileSync(__dirname + "/data/" + (process.argv[2] || "dump_0") + ".js", "utf8"));
stream.finish();

function dump(key, vals) {
	console.log("*** " + key + " ***");
	console.log(vals.map(function(val) {
		return ("00" + val.toString(16)).slice(-2);
	}).toString());
	console.log(new Buffer(vals).toString("ascii"));
	console.log("");
}

var CvgClient = require("syracuse-x3/lib/convergence/client/CvgClient").CvgClient;

function compare(a, b, path) {
	var count = 0;
	if (a === b) return count;
	if (a == null || b == null || typeof a !== 'object' || typeof b !== 'object') {
		// ignore difference in toJsonTime
		if (path === "response.toJsonTime" && typeof a === "number" && typeof b === "number") return count;
		console.log(path + ': expected ' + JSON.stringify(b) + ', got ' + JSON.stringify(a));
		return count + 1;
	}
	var keys = Object.keys(a);
	keys.forEach(function(k) {
		count += compare(a[k], b[k], path + "." + k);
	});
	Object.keys(b).forEach(function(k) {
		if (a[k] === undefined) {
			console.error(path + "." + k + ': missing ' + JSON.stringify(b[k]));
			count++;
		}
	});
	return count;
}

var SETTINGS = {
	"SDate": "/",
	"STime": ":",
	"SDecimal": ".",
	"SThousand": " ",
	"IDate": "1",

	//	"BOSEC": "SecEnterprise",
	//	"BOSERV": "sodged02.sagefr.adinternal.com:6400",
	//	"BOUSR": "CRYPT:udosdoQfsgrUgr",
	//	"BOPWD": "CRYPT:udorw3RgrskUksvaxvascc",
	"ADXAppHost": "172.28.20.117",
	"ADXFolder": "SYDEV",
	"ADXPort": "16667",
	"ADXTrtHost": "172.28.20.117",

	"usrProfile": "ADMIN",
	"formater.von": "on",
	"user": "apisu",
};

function fix(obj) {
	if (obj.sap.acts) {
		obj.sap.acts = obj.sap.acts.sort(function(a, b) {
			return +a.id - +b.id;
		});
	}
	return obj;
}

try {
	var client = new CvgClient(null, stream, {
		adxHttpPub: "http://172.28.20.117/Adonix_SYDVLP",
		adxFolder: "SYDEV",
	}, {
		dateSep: "/",
		dateOrder: "dmy",
		decimalSep: ".",
		thousandsSep: " ",
		timeSep: ":"
	});
	var response = client.start(_);
	while (true) {
		console.log("SUCCESS!");
		stream.reply(JSON.parse(JSON.stringify(response)));
		var req = stream.request();
		if (!req) break;
		response = client.processRequest(_, req);
	}
} catch (ex) {
	console.error(ex.stack);
}