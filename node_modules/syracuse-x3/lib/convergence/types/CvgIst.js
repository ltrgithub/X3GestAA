"use strict";
var helpers = require('syracuse-core/lib/helpers');

/**
 * "Instance" contenue dans un argument d'un neoud ou Action
 * <p>
 * Une Ist (AdxId) est composé de:
 * <ul>
 * <li>un index de fenêtre (byte),</li>
 * <li>un index d'écran (byte),</li>
 * <li>un index de bloc (byte),</li>
 * <li>un index de champ (byte),</li>
 * <li>un index dans la dimension (short);</li>
 * </ul>
 *
 * @author Adonix Grenoble
 * @version 140_000
 */

function make(win, screen, bloc, field) {
	return (((win || 0) & 0xff) << 24) | (((screen || 0) & 0xff) << 16) //
	|
	(((bloc || 0) & 0xff) << 8) | ((field || 0) & 0xff);
}

var AT = '@'.charCodeAt(0);

function parse(self, str, ix) {
	var comps = str.split(',');
	var win = comps[0].charCodeAt(0) - AT;
	var screen = comps.length < 2 ? 0 : comps[1].length > 1 //
	?
	(comps[1].charCodeAt(0) - AT) * 26 + (comps[1].charCodeAt(1) - AT) //
	:
	(comps[1].charCodeAt(0) - AT);
	var bloc = comps.length < 3 ? 0 : comps[2].charCodeAt(0) - AT;
	var field = comps.length < 4 || comps[2].length < 2 ? 0 : parseInt(comps[2].substring(1), 10);
	var idx = comps[3] ? parseInt(comps[3], 10) : 0;
	self.ist = make(win, screen, bloc, field);
	self.idx = idx || ix || 0;
}

var LEFTLIST_NUM = 34;

var CvgIst = exports.CvgIst = helpers.defineClass(function(ist, idx) {
	if (arguments.length > 2) {
		this.ist = make(arguments[0], arguments[1], arguments[2], arguments[3]);
		this.idx = arguments[4] || 0;
	} else if (typeof ist === 'string') {
		parse(this, ist, idx)
	} else {
		this.ist = ist;
		this.idx = idx || 0;
	}
}, null, {
	win: {
		get: function() {
			return (this.ist >> 24) & 0xff;
		},
		set: function(val) {
			this.ist = this.ist & 0xff000000 | (val << 24);
		}
	},
	screen: {
		get: function() {
			return (this.ist >> 16) & 0xff;
		},
		set: function(val) {
			this.ist = this.ist & 0xff000000 | (val << 16);
		}
	},
	bloc: {
		get: function() {
			return (this.ist >> 8) & 0xff;
		},
		set: function(val) {
			this.ist = this.ist & 0xff000000 | (val << 8);
		}
	},
	field: {
		get: function() {
			return this.ist & 0xff;
		}
	},
	winAlphaId: {
		get: function() {
			return String.fromCharCode(AT + this.win);
		}
	},
	screenAlphaIdFusion: {
		get: function() {
			return String.fromCharCode(AT + this.screen);
		}
	},
	screenAlphaId: {
		get: function() {
			if (this.screen >= 26) return String.fromCharCode(AT + Math.floor(this.screen / 26)) + String.fromCharCode(AT + (this.screen % 26));
			return String.fromCharCode(AT + this.screen);
		}
	},
	blocAlphaId: {
		get: function() {
			return String.fromCharCode(AT + this.bloc);
		}
	},
	toString: function() {
		var s = this.winAlphaId + "," + this.screenAlphaId + "," + this.blocAlphaId;
		if (this.field > 0) s += this.field;
		if (this.idx > 0) s += "," + this.idx;
		return s;
	},
	toJSON: function() { // to ease debugging
		return this.toString();
	},
	winZeroBase: {
		get: function() {
			return this.win - 2;
		}
	},
	screenZeroBase: {
		get: function() {
			return this.screen - 1;
		}
	},
	blocZeroBase: {
		get: function() {
			return this.bloc - 1;
		}
	},
	fieldZeroBase: {
		get: function() {
			return this.field - 1;
		}
	},
	idxZeroBase: {
		get: function() {
			return this.idx - 1;
		}
	},
	isAllLinesOfBlocIst: function() {
		return this.win !== 0 && this.screen !== 0 && this.bloc !== 0 && this.field === 0 && this.idx === -1;
	},
	isAllLinesOfColumnIst: function() {
		return this.isBaseFieldIst() && this.idx === -1;
	},
	isBaseFieldIst: function() {
		return this.win !== 0 && this.screen !== 0 && this.bloc !== 0 && this.field !== 0;
	},
	isBlocIst: function() {
		return this.win !== 0 && this.screen !== 0 && this.bloc !== 0 && this.field === 0 && this.idx === 0;
	},
	isCellIst: function() {
		return this.isFieldIst() && this.idx > 0;
	},
	isColumnIst: function() {
		return this.isBaseFieldIst() && this.idx === 0;
	},
	isFieldIst: function() {
		return this.isBaseFieldIst() && this.idx > -1;
	},
	isLeftListColumnIst: function() {
		return this.isColumnIst() && this.isScreenLeftList();
	},
	isLeftListIst: function() {
		return this.isBlocIst() && this.isScreenLeftList();
	},
	isLineIst: function() {
		return this.win !== 0 && this.screen !== 0 && this.bloc !== 0 && this.field === 0 && this.idx > 0;
	},
	isRecordIst: function() {
		return this.isBlocIst() && this.idx !== 0;
	},
	isScreenIst: function() {
		return this.win !== 0 && this.screen !== 0 && this.bloc === 0 && this.field === 0;
	},
	isScreenLeftList: function() {
		return this.screen === LEFTLIST_NUM;
	},
	isWindowIst: function() {
		return this.win !== 0 && this.screen === 0 && this.bloc === 0 && this.field === 0;
	},
	getBytes: function() {
		var buf = new Buffer(6);
		buf.writeInt32BE(this.ist, 0);
		buf.writeInt16BE(this.idx, 4);
		return buf;
	}
});

CvgIst.IST_WIN_ZERO = new CvgIst("A,@,@0");
CvgIst.levelZeroStructIst = new CvgIst(1, 0, 0, 0, 0);

CvgIst.fromAction = function(param) {
	var win = param.win.charCodeAt(0) - AT;
	var screen = param.xid.charCodeAt(0) - AT;
	var bloc = param.xid.charCodeAt(1) - AT;
	var field = parseInt(param.xid.substring(2), 10);
	return new CvgIst(make(win, screen, bloc, field), param.nl);
}