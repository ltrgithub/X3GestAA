"use strict";
var helpers = require('syracuse-core/lib/helpers');
var util = require('util');
var ufs =require('fs');
var ubuf =require('buffer');
var datetime = require("syracuse-core/lib/types/datetime");

exports.recorder = helpers.defineClass(function(_, stream, file, opts, config) {
	var self = this;
	self._file = file;	
	self._config = config;	
	self._nbLines=0;
	if (stream){
		var read = stream.read;
		stream.read = function(_, len) {
			var data = read.call(stream, _, len);
			if (data) self.dumpBytes(_, "READ", data);
			return data;
		};
		var write = stream.write;
		stream.write = function(_, data) {
			if (data) self.dumpBytes(_, "WRITE", data);
			write.call(stream, _, data);
		}
	}
	self.dumpComment(_, "Date : " + datetime.now().toString());
	if (opts && opts.x3func) self.dumpComment(_, "X3 function : " + opts.x3func);
}, null, {
	dumpBytes: function(_, action, data) {
		var line = {
			type:action,
			data:  data.toString('hex') //Serialized as hexa string	to be instantiated as a buffer in the player			
		}
		this._dumpLine(_,line);
	},
	dumpComment: function(_, txt) {
		var line = {
				type:"COMMENT",
				data: txt  				
			}
		this._dumpLine(_,line);
	},
	dumpHttpReq: function(_, context) {
		var line = {
				type:"HTTPREQ",
				data:{
					url: context.url,
					query: context.query ? JSON.stringify(context.query) : {},
					method: context.method,
					data: context.request.readAll(_) || "" ,
					headers: context.request.headers ? JSON.stringify(context.request.headers) : {}
				}
			}
		this._dumpLine(_,line);
	},
	dumpHttpResp: function(_, string) {
		var line = {
				type:"HTTPRESP",
				data: string || ""
		}
		this._dumpLine(_, line);
	},
	dumpWinDescr: function(_, string) {
		var line = {
				type:"WINDESCR",
				data: string || ""
		}
		this._dumpLine(_, line);
	},
	_dumpLine: function (_, line){
		var record = this._nbLines > 0 ? ",\n"  : "";
		record += JSON.stringify(line);
		ufs.appendFile(this._file, record, 'utf8', _);
		this._nbLines++;
	},
	_log:function(txt){
		if (this._config.trace) this._config.trace(txt);
	},
	logerr:function(e, txt) {
		this._log(txt);	
		this._log(e.stack ? e.stack : e.message ? e.message : e);
	}
});
