"use strict";

var helpers = require("syracuse-core/lib/helpers");
var TrackerResponse = require("syracuse-sdata/lib/sdataAsync").TrackerResponse;
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var util = require('util');


var convTracker = helpers.defineClass(function(context, trackngId, dispatch) {
	this.trackngId = trackngId;
    	
    this.response = context.response;
    this.status = 202;
    this.done = false;
	this.location ;
	this.convStep;
	this.maxtry ;
	this.nbtry ;

    this.context = context;
	this.phase = "Starting";
	this.phaseDetail = null;
	this.progress = null;
	this.elapsedSeconds = null;
	this.remainingSeconds = null;
    this.pollingMillis = 1000;
    this.startTime = new Date().getTime();
	this.dispatch =dispatch;

   }, null, {
    reply: function(_, response) {
		if (!this.done ) {
			if( this.maxtry && this.nbtry < this.maxtry ) {
				this.nbtry ++;
				var self = this;
				setTimeout(function(_){
					self.reply(_,response);
				},this.convStep);
			}else{
				var currentTime = new Date().getTime();
				this.elapsedSeconds = currentTime - this.startTime;
				var headers = {
					"content-type": "application/json",
					location: this.location,
				}
				response.writeHead(this.status, headers);
				var body = {
					phase: this.phase,
					phaseDetail: this.phaseDetail,
					progress: this.progress,
					elapsedSeconds: this.elapsedSeconds,
					remainingSeconds: this.remainingSeconds,
					pollingMillis: this.pollingMillis,
				};
				response.write(_, JSON.stringify(body), "utf8");
				
				response.end();
			}
		} else {
			this.response.flush(_, response);
			deleteTracker(this.trackngId);
		}
    },
	start: function(_){
		var self = this;
		this.dispatch(function(err) {
			self.done = true;
			self.phase = "Completed";
			self.response.finish(err);
		}, this.context);

		this.reply(_, this.originResponse);
	}
});


var trackers = exports.trackers = {};

exports.track = function(_, context, id) {
	switch(context.request.method.toLowerCase()) {
		case 'get':
			var tracker = trackers[id]; 
			if (!tracker) return context.reply(_, 404, "tracker not found: " + id); 
			tracker.reply(_, context.response);
			break;
		case 'delete':
			delete trackers[id];
			context.reply(_, 204);
			break;
		default:
			throw new Error("Bad method: "+context.request.method);
	}

}

exports.create = function(context, dispatch) {    
    var trackngId = context.parameters.trackngId;
    var response = context.response;
    var tracker = trackers[trackngId];
    if (tracker) {
    	throw new Error("Tracker already exists.");
    }
    context.response = new TrackerResponse();
	for(var i in trackers){
		if( trackers[i].done ){
			delete trackers[i];
		}
	}
    trackers[trackngId] = tracker = new convTracker(context, trackngId, dispatch);
	tracker.originResponse = response;
    context.tracker = tracker;
	return tracker;
}
