"use strict";
var helpers = require('syracuse-core/lib/helpers');

var VAR_TYPE_CHECK = 11;
var VAR_TYPE_ICONE = 29;
var VAR_TYPE_IMAGE = 17;
var VAR_TYPE_OFFICE = 33;
var VAR_TYPE_PASSWORD = 30;
var VAR_TYPE_RADIOGROUP = 9;
var VAR_TYPE_RICHEDIT = 8;
var ATT_FMT = "FMT";
var ATT_ID = "ID";
var ATT_MAF = "MAF";
var ATT_MNU = "MNU";
var ATT_NAM = "NAM";
var ATT_PERIODE = "DAI";
var ATT_SIZE = "SZ";
var ATT_STX = "STX";
var ATT_TDO = "TDO";
var ATT_TYP = "TYP";

function extactType(aValue) {
	try {
		return Integer.parseInt(aValue.substring(0, aValue.indexOf(',')));
	} catch (e) {
		return -1;
	}
}

function extractNbDecimalsFromSZ(aSZ) {
	var wPos = aSZ.indexOf('.');
	if (wPos > -1) {
		return Integer.parseInt(aSZ.substring(wPos + 1));
	} else {
		return 0;
	}
}

function extractNbEntiersFromSZ(aSZ) {
	var wPos = aSZ.indexOf('.');
	if (wPos > -1) {
		return Integer.parseInt(aSZ.substring(0, wPos));
	} else {
		return Integer.parseInt(aSZ);
	}
}


var CAdapiVariableFactory = {
	instanciateLeftListColumn: function(aAdapiRequester, srcLine, aEntityIndexBaseOne, aVarId) {
		var wEF = CAdapiFormat.newEmptyFormat();

		var wVariable = new CAdapiVariableAlpha(srcLine, aEntityIndexBaseOne, aVarId, aVarId, CStructResu.TDO_ALPHA, wEF, CAdapiEntity.x3AffModeToEntityState(CAdapiEntity.X3VAR_MAF_SAISI));

		return wVariable;
	},

	instanciateVariable: function(aAdapiRequester, srcLine, aEntityIndexBaseOne, aId, aVariableNode, aForcedTDO) {
		var adapiClient = aAdapiRequester.adapiClient;
		var wVarId = CDomFacilities.getAttributValue(aVariableNode, ATT_ID);
		var wVarName = CDomFacilities.getAttributValue(aVariableNode, ATT_NAM);
		var wInputType = extactType(CDomFacilities.getAttributValue(aVariableNode, ATT_TYP));
		var wDataType = aForcedTDO != 0 ? aForcedTDO : extactType(CDomFacilities.getAttributValue(aVariableNode, ATT_TDO));
		var wSZ = CDomFacilities.getAttributValue(aVariableNode, ATT_SIZE);
		var wEntiers = extractNbEntiersFromSZ(wSZ);
		var wDecimals = extractNbDecimalsFromSZ(wSZ);
		var wVarSize = aForcedTDO != 0 ? 99 : wEntiers + wDecimals;
		var wFormatDef = aForcedTDO != 0 ? CAdapiEntity.EMPTY : CDomFacilities.getAttributValue(aVariableNode, ATT_FMT);
		var wFormat = new CAdapiFormat(wFormatDef);
		var wEntityState = CAdapiEntity.x3AffModeToEntityState(extactType(CDomFacilities.getAttributValue(aVariableNode, ATT_MAF)));
		var wX3LocalMenu = null;
		var wConfig = adapiClient.adapiClientConfig;
		var wVariable = null;
		switch (wDataType) {
		case CStructResu.TDO_SHORT:
		case CStructResu.TDO_INT:
		case CStructResu.TDO_DCB:
			{
				wVariable = new CAdapiVariableNum(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState);
				wVariable.setDecimal(wDecimals);
				break;
			}
		case CStructResu.TDO_MENLOC:
			{
				var wLocalMenuId = CDomFacilities.getAttributValueInt(aVariableNode, ATT_MNU);
				wX3LocalMenu = aAdapiRequester.finLocalMenu(wLocalMenuId);
				if (wInputType == VAR_TYPE_CHECK) {
					wVariable = new CAdapiVariableCheck(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState, wX3LocalMenu);
				} else if (wInputType == VAR_TYPE_RADIOGROUP) {
					wVariable = new CAdapiVariableRadio(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState, wX3LocalMenu);
				} else {
					wVariable = new CAdapiVariableCombo(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState, wX3LocalMenu);
				}
				break;
			}
		case CStructResu.TDO_ALPHA:
			{
				if (wInputType == VAR_TYPE_RICHEDIT) {
					wVariable = new CAdapiVariableRTF(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState);
				} else if (wInputType == VAR_TYPE_IMAGE) {
					wVariable = new CAdapiVariableIMG(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wVarSize, wFormat, wEntityState);
				} else if (wInputType == VAR_TYPE_PASSWORD) {
					wVariable = new CAdapiVariablePass(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState);
				} else if (wInputType == VAR_TYPE_ICONE) {
					wVariable = new CAdapiVariableIcone(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState);
				} else {
					wVariable = new CAdapiVariableAlpha(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState);
				}
				break;
			}
		case CStructResu.TDO_DATE:
			{
				var wLocalformat = wConfig.getIntParam(CAdonixConfig.DATE_FORMAT_KEY);
				var wDatePivot = wConfig.getIntParam(CAdonixConfig.DATE_PIVOT_KEY);
				wFormat = valiDateFormat(adapiClient, wConfig, wFormat);
				if (CDomFacilities.hasAttributValue(aVariableNode, ATT_PERIODE)) {
					wVariable = new CAdapiVariablePeriod(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState, wLocalformat, wDatePivot);
				} else {

					wVariable = new CAdapiVariableDate(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState, wLocalformat, wDatePivot);
				}
				break;
			}
		case CStructResu.TDO_CLOB:
			{
				wVariable = new CAdapiVariableRTF(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState);
				break;
			}
		case CStructResu.TDO_BLOB:
			{
				if (wInputType == VAR_TYPE_OFFICE) {
					Utils.toConsole("Office blob are ignored in fusion client");
				} else {
					wVariable = new CAdapiVariableIMG(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wVarSize, wFormat, wEntityState);
				}
				break;
			}
		default:
			{
				wVariable = new CAdapiVariableAlpha(srcLine, aEntityIndexBaseOne, wVarName, wVarId, wDataType, wFormat, wEntityState);
				break;
			}
		}
		wVariable.setMustBeFormated(wConfig.isInteractiveSession() && aForcedTDO == 0);
		if (CDomFacilities.hasAttribut(aVariableNode, ATT_STX)) {
			wVariable.setStyleFromDescr(CDomFacilities.getAttributValue(aVariableNode, ATT_STX));
		}
		return wVariable;
	},

	valiDateFormat: function(aAdapiClient, aConfig, aFormat) {
		if (!aFormat.isValid()) {
			aFormat = new CAdapiFormat(aAdapiClient.tracer, valiServerDateFormatDef(aConfig.serverDateFormat));
		} else if (!aFormat.hasFormatChars()) {
			aFormat.setFormatChars(aConfig.serverDateFormat);
		}
		return aFormat;
	},

	valiServerDateFormatDef: function(aFormatDef) {
		if (aFormatDef == null) {
			aFormatDef = "";
		} else if (aFormatDef.indexOf(':') < 0) {
			aFormatDef = "DZz:" + aFormatDef;
		}
		return aFormatDef;
	}
}