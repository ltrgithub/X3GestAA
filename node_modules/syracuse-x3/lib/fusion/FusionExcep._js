"use strict"; var helpers = require('syracuse-core/lib/helpers');

	var SDataEntryExcep = helpers.defineClass(function() {}, CSDataEntryNoPayload, {
		private FusionExcep this.exep;

		private SDataEntryExcep(schema, t) {
			TODO_SUPER(schema);
			this.exep = t;
		}, getContentType: function() {
			return CAtomDefs.EntryContentTypeJSON;
		}, getHttpStatus: function() {
			return this.exep.getHttpStatus();
		}, toJSON: function() {
				return this.exep.toJSon();
		}

	}

var FusionExcep = helpers.defineClass(function() {}, RuntimeException, {

	private static final long serialVersionUID = 1L;

	public static CDiagnoses err2Diagnoses(t, cause) {
		var diags = new CDiagnoses();
		var cur = t;
		//	while (cur != null) {
		var diag = cur instanceof CAdapiException ? ((CAdapiException) cur).getDiagnose() : null;
		if (diag == null) {
			diag = new CDiagnosis();
			diag.setMessage(cur.getMessage());
			diag.setStackTrace(cur);
			diag.setStatusCode(500);
			diag.setSeverity(ESeverity.ERROR.toString());
			diag.setCode(ESDataErrorCode.ApplicationDiagnosis);
		}
		diags.addDiagnosis(diag);
		//	cur = !cause || cur.getCause() == cur ? null : cur.getCause();
		//	}
		return diags;
	}

	public static IContent excep2IContent(req, info, t) {
		if (t == null) {
			throw new RuntimeException("Unexpected null exception");
		}
		if (req == null || req.getAdapter() == null || req.getAdapter().getSchema() == null) {
			throw new RuntimeException("Bad IRequest - No schema");
		}
		if (!(t instanceof FusionExcep)) {
			t = new FusionExcep(info != null ? info : FusionClientInfo.JAVA, t.getMessage(), EHttpStatus.INTERSERVERROR, t);
		}
		var x = new SDataEntryExcep(req.getAdapter().getSchema(), (FusionExcep) t);
		try {
			Utils.toConsole("FUSION EXCEPTION\n" + x.toJSON().toString(3));
		} catch (e) {
			throw new RuntimeException("excep2IContent error",e);
		}
		return x;
	}

	public static void throwAdapiExcep(reason, i, t) {
		throw new FusionExcep(i == null ? FusionClientInfo.X3COM : i, reason, EHttpStatus.INTERSERVERROR, t);
	}

	public static void throwBadUrl(reason) {
		throw new FusionExcep(FusionClientInfo.BADURL, reason, EHttpStatus.NOTACCEPTABLE, null);
	}

	public static void throwConfigExcep(reason, t) {
		throw new FusionExcep(FusionClientInfo.CONFIG, reason, EHttpStatus.INTERSERVERROR, t);
	}

	public static void throwCreateCnx(reason, s) {
		throw new FusionExcep(FusionClientInfo.CREATECNX, reason, s, null);
	}

	public static void throwCreateSess(reason, s, t) {
		throw new FusionExcep(FusionClientInfo.CREATESESS, reason, s, t);
	}

	public static void throwSessBusy(reason) {
		throw new FusionExcep(FusionClientInfo.SESSBUSY, reason, EHttpStatus.NOTACCEPTABLE, null);
	}

	public static void throwSessNotFound(reason) {
		throw new FusionExcep(FusionClientInfo.SESSNOTFOUND, reason, EHttpStatus.NOTFOUND, null);
	}

	private FusionClientInfo this.clientInfo;

	private CDiagnoses this.diag;
	private EHttpStatus this.httpStatus;

	private String this.reason;

	public FusionExcep(info, reason, s, e) {
		this.clientInfo = info == null ? FusionClientInfo.NOCATCH : info;
		this.diag = null;
		this.httpStatus = s;
		this.reason = CDiagnosis.excepCheckMsg(reason);
		if (e != null) {
			if (e instanceof CXSDataException) {
				this.diag = new CDiagnoses();
				var se = (CXSDataException) e;
				if (se.getListDiagnosis() != null) {
					for (d : se.getListDiagnosis()) {
						this.diag.addDiagnosis(d);
					}
				}
			} else {
				this.diag = err2Diagnoses(e, true);
			}
		}
	}, getHttpStatus: function() {
		return this.httpStatus == null ? EHttpStatus.INTERSERVERROR.getStatus() : this.httpStatus.getStatus();
	}, getMessage: function() {
		var s = new StringBuilder();
		if (this.clientInfo != null) {
			s.append(this.clientInfo.getMessDef());
		}
		if (this.reason != null) {
			if (s.length() > 0) {
				s.append("\n");
			}
			s.append(this.reason);
		}
		if (s.length() == 0) {
			s.append(FusionClientInfo.NOCATCH.getMessDef());
		}
		return s.toString();
	}, toJSon: function() {
			var r = new JSONObject();
			this.clientInfo.apendToJSon(r, this.reason);
			if (this.reason != null && !this.reason.isEmpty()) {
				r.put(JSON_ERRMSG, this.reason);
			}
			if (this.diag != null) {
				r.put(JSON_DIAGNOSES, this.diag.toJSONArray());
			}
			return r;
	}

}
