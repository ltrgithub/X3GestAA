"use strict";
var helpers = require('syracuse-core/lib/helpers');
var AdapiObservable = require('syracuse-x3/lib/fusion/AdapiObservable').AdapiObservable;
var CAdonixMessage = Object; //require('syracuse-x3/lib/fusion/CAdonixMessage').CAdonixMessage;

var AdapiMessageObersable = exports.AdapiMessageObersable = helpers.defineClass(function(message, client) {
	AdapiObservable.call(this, client);
	this.message = message;
	forceChange();
	this.jsonType = 'TARGET'; // mess superviseur/X3
}, AdapiObservable, {
	toJSON: function() {
		var target = {};
		target.type = "box";
		var box = {};

		box.type = this.message.typ;
		box.def = this.message.defBtn;
		// box.put("to",get());
		box.tit = this.message.title;
		var li = [];
		li.push(this.message.mess);
		box.li = li;
		box.to = this.message.userMaxSleep;
		target.box = box;
		return target;
	}

});

var SEPARATOR = "^";

var CAdapiMessage = exports.CAdapiMessage = helpers.defineClass(function(aType, clientObs, aMessage, notify) {
	CAdonixMessage.call(this, aType, aMessage);
	this.action = -1;
	this.webServerLogicalMess = null;
	this.clientObj = null;
	if (clientObs != null && notify) {
		new AdapiMessageObersable(this, clientObs);
	}
}, CAdonixMessage, {
	// TODO - Non utilisé - private AdapiMessageObersable observableMessage = null;
	// TODO - Non utilisé - private String this.lib = null;
	// TODO - Non utilisé - private String this.progressMax = null;
	// TODO - Non utilisé - private String this.progressValue = null;
	// TODO - Non utilisé - private String this.vLC_LibNum = null;
	// TODO - Non utilisé - private String this.vLC_LibSuite = null;
	// TODO - Non utilisé - private String this.vLC_LibText = null;
	// TODO - Non utilisé - private String this.vLC_ValNum = null;
	// TODO - Non utilisé - private String this.vLC_ValText = null;
/* TODO overload
	public CAdapiMessage(aType, aAction, aMessage, aTitre, aDefBtn, aSleep, aChx, clientObs) {
		CAdonixMessage.call(this, aType, aMessage, aTitre, aDefBtn, aSleep, aChx);
		this.action = aAction;
		if (aType == CAdapi.AFF_SYNCHRONE_TYPE_VALIDCAR && this.action == CAdapi.AFF_SYNCHRONE_ACTION_OPEN) {
			setVlcLibs(aMessage, aTitre);
		} else if (aType == CAdapi.AFF_SYNCHRONE_TYPE_VALIDCAR && this.action == CAdapi.AFF_SYNCHRONE_ACTION_MODIFY) {
			setVlcValues(aMessage, aTitre);
		} else if (aType == CAdapi.AFF_SYNCHRONE_TYPE_PROGRESS && this.action == CAdapi.AFF_SYNCHRONE_ACTION_OPEN) {
			setProgressLibs(aTitre);
		} else if (aType == CAdapi.AFF_SYNCHRONE_TYPE_PROGRESS && this.action == CAdapi.AFF_SYNCHRONE_ACTION_MODIFY) {
			setProgressValues(aMessage);
		}
		if (clientObs != null) {
			new AdapiMessageObersable(this, clientObs);
		}
	}*/

	addWebServerLogicalMess: function(aListOfLogicalMess) {
		if (aListOfLogicalMess != null) {
			if (this.webServerLogicalMess == null) {
				this.webServerLogicalMess = [];
			}
			this.webServerLogicalMess.push(aListOfLogicalMess);
		}
	},
	/* TODO overload
	addWebServerLogicalMess: function(aLogicalMess) {
		if (aLogicalMess != null) {
			if (this.webServerLogicalMess == null) {
				this.webServerLogicalMess = [];
			}
			this.webServerLogicalMess.push(aLogicalMess);
		}
	},*/
	clone: function() {
		return new CAdapiMessage(this.typ, this.action, this.mess, this.title, this.btn, this.sleep, this.chx, this.clientObs);
	},
	isAffSynchroneDebug: function() {
		return this.typ == CAdapi.AFF_SYNCHRONE_TYPE_DEBUGON || this.typ == CAdapi.AFF_SYNCHRONE_TYPE_DEBUGOFF;
	},
	isErrorMessage: function() {
		return this.typ == CAdonix.MSG_ERROR;
	},
	isStrongMess: function() {
		// Syracuse TODO : 
		var wTypMess = TODO_SUPER.typ;
		return wTypMess == CAdonix.MSG_ERROR || wTypMess == CAdonix.MSG_WARNING;
	},
	setProgressLibs: function(aTitre) {
		this.title = aTitre;
	},
	setProgressValues: function(aMessage) {
		var wST = new StringTokenizer(aMessage, SEPARATOR);
		if (wST.countTokens() >= 2) {
			// TODO - Non utilisé - this.progressMax = wST.nextToken();
			// TODO - Non utilisé - this.progressValue = wST.nextToken();
			if (wST.hasMoreTokens()) {
				// TODO - Non utilisé - this.lib = wST.nextToken();
			} else {
				// TODO - Non utilisé - this.lib = EMPTY;
			}
		} else {
			// TODO - Non utilisé - this.lib = 'ERR_NOWMAX';
		}
	},
	setVlcLibs: function(aMessage, aTitre) {
		var wST = new StringTokenizer(aTitre, SEPARATOR);
		if (wST.countTokens() == 3) {
			this.title = wST.nextToken();
			// TODO - Non utilisé - this.lib = wST.nextToken();
			// TODO - Non utilisé - this.vLC_LibSuite = wST.nextToken();
		}

		wST = new StringTokenizer(aMessage, SEPARATOR);
		if (wST.countTokens() == 2) {
			// TODO - Non utilisé - this.vLC_LibText = wST.nextToken();
			// TODO - Non utilisé - this.vLC_LibNum = wST.nextToken();
		}

	},
	setVlcValues: function(aMessage, aTitre) {
		var wST = new StringTokenizer(aMessage, SEPARATOR);
		if (wST.countTokens() == 2) {
			// TODO - Non utilisé - this.vLC_ValText = wST.nextToken();
			// TODO - Non utilisé - this.vLC_ValNum = wST.nextToken();
		}
	},
	traverseChilds: function(aTraverser) {
		var wTraversingState = false;
		var wLogicalMessage;
		var wMax = this.webServerLogicalMess != null ? this.webServerLogicalMess.length : 0;
		var wI = 0;
		while (wI < wMax) {
			wLogicalMessage = this.webServerLogicalMess[wI];
			wTraversingState = aTraverser.doWhenTraverse(wLogicalMessage, wI);
			if (wTraversingState == true) {
				return wTraversingState;
			}
			wI++;
		}
		return wTraversingState;
	}
});