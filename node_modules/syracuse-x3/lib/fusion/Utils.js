"use strict";
var helpers = require('syracuse-core/lib/helpers');

var Utils = {

	VAL_TRUE: "true",
	VAL_YES: "yes",
	VAL_ON: "on",

	emptyJson: function(o) {
		if (o == null) {
			return true;
		}
		if (o instanceof JSONArray) {
			return o.length == 0;
		}
		if (o instanceof JSONObject) {
			return o.length == 0;
		}
		return true;
	},

	isTrue: function(val) {
		if (val == null) {
			return false;
		}
		val = val.toLowerCase();
		return val === VAL_TRUE || val === VAL_YES || val === VAL_ON;
	},

	json2Bool: function(o, key) {
		if (o == null || o.isNull(key)) {
			return false;
		}
		return o.optBoolean(key);
	},

	json2Int: function(o, key, def) {
		if (o == null || o.isNull(key)) {
			return def;
		}
		return o.optInt(key, def);
	},
	json2Object: function(o, key) {
		if (o == null || o.isNull(key)) {
			return null;
		}
		return o.opt(key);
	},

	json2Str: function(o, key, def) {
		if (o == null || o.isNull(key)) {
			return def;
		}
		return o.optString(key);
	},

	jsonParse: function(s) {
		if (s == null) {
			return null;
		}
		s = CXStringUtils.strFullTrim(s);
		if (s.isEmpty()) {
			return null;
		}
		if (s.charAt(0) == '{') {
			return JSON.parse(s);
		}
		if (s.charAt(0) == '[') {
			return JSON.parse(s);
		}
		return null;
	},

	nanoS2ms: function(nano, nbDec) {
		return roundSup(nano / 1000000, nbDec);
	},

	roundInf: function(v, nbDec) {
		var e = Math.pow(10, nbDec);
		return Math.floor(v * e) / e;
	},

	roundSup: function(v, nbDec) {
		var e = Math.pow(10, nbDec);
		return Math.rint(v * e) / e;
	},

	str2Int: function(aStr, def) {
		try {
			return parseInt(aStr, 10);
		} catch (e) {
			return def;
		}
	}
}