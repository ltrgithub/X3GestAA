"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CAdapiVariable = require('syracuse-x3/lib/fusion/CAdapiVariable').CAdapiVariable;

var SVC_BLOB_ID = "Blob.svc";

var CAdapiVariableBlob = exports.CAdapiVariableBlob = helpers.defineClass(function(srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aSize, aFormat, aEntityState, aUrl) {
	CAdapiVariable.call(this, srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState);
	this.indirection = null;
	this.size = aSize;
	// TODO - Non utilisÃ© - this.url = aUrl;
}, CAdapiVariable, {

	// Pas de format
	acceptEditFormat: function() {
		return false;
	},
	clone: function() {
		return null;
	},
	controlBlobSize: function(aBlob) {
		var wMaxSize = 1024 * Math.pow(2, this.size) - 4;
		if (aBlob.size() > wMaxSize) {
			throw CAdapiException.newFmtException(this.adapiClient, null, this.adapiClient.adapiResources.getMessage(CAdapiResources.KEYMESS_ERROR_UPLOAD_BLOB, aBlob.size().toString(), this.id, wMaxSize.toString(), this.size.toString()));
		}
	},
	getDisplayValue: function() {
		return "/Fusion/Blob/TODO"; // buildFullUrl();
	},
	hasValueBlob: function() {
		return this.getServerValue() != null && this.getServerValue().hasBlobValue();
	},
	setBrowserUnformatedValue: function(aBuffer) {
		this.setBrowserUnformatedValue(new CStructResu(CStructResu.X3TYP_BLOB, aBuffer));
	},
	/* TODO overload
	setBrowserUnformatedValue: function(aBrowserValue) {
		controlBlobSize(aBrowserValue.geBlobValue());
		CAdapiVariable.prototype.setBrowserUnformatedValue.call(this,aBrowserValue);
	},
	*/
	setIndirection: function(i) {
		this.indirection = i;
	}
});