"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CAdapiLeftListLine = function() {};
var CAdapiDataSrcLine = function() {};

var CAdapiLeftListLineLevel = helpers.defineClass(function(aStackedWindow, aLeftList, aId, aNbVariables, localIdx) {
	TODO_SUPER(aStackedWindow, aLeftList, aId, aNbVariables, localIdx);
}, CAdapiLeftListLine, {

	clone: function() {
		var idx = this.dataSrc.size();
		var wClone = new CAdapiLeftListLineLevel(this.adapiRequester, this.dataSrc, this.id, this.vars.length, idx);
		cloneVars(wClone);
		return wClone;
	}
});

var CAdapiLeftListLine = helpers.defineClass(function(aStackedWindow, aLeftList, aId, aNbVariables, localIdx) {
	TODO_SUPER(aStackedWindow, aLeftList, aId, aNbVariables, localIdx);
	this.cle = null;
}, CAdapiDataSrcLine, {
	clone: function() {
		var localIdx = this.dataSrc.size();
		var wClone = new CAdapiLeftListLine(this.adapiRequester, this.dataSrc, this.id, this.vars.length, localIdx);
		cloneVars(wClone);
		return wClone;
	},
	// Voir instanciateLeftListEntry - True si liste plate
	isFlatLeftList: function() {
		var adp = this.dataSrc;
		return adp != null && !adp.isHierarchic() && !adp.isRecursive();
	},
	setCle: function(aClf) {
		this.cle = aClf;

	},
	setColumns: function(aIdx, aVal, aClf) {
		setZeroBaseIdx(aIdx);
		setCle(aClf);
		var wNbResu = aVal.size();
		var wI = 0,
			nbVar = this.vars.length;
		while (wI < nbVar && wI < wNbResu) {
			var resu = aVal.getResu(wI);

			var v = getVar(wI);
			if (resu.isDate() && !(v instanceof CAdapiVariableDate)) {
				var vv = v;
				var client = this.adapiClient;
				var wConfig = client.adapiClientConfig;

				var wFormat = new CAdapiFormat(CAdapiEntity.EMPTY);
				var wLocalformat = wConfig.getIntParam(CAdonixConfig.DATE_FORMAT_KEY);
				var wDatePivot = wConfig.getIntParam(CAdonixConfig.DATE_PIVOT_KEY);
				wFormat = CAdapiVariableFactory.valiDateFormat(client, wConfig, wFormat);
				var newVar = new CAdapiVariableDate(this, vv.entityIndexBaseOne, vv.name, vv.id, vv.dataType, wFormat, vv.state, wLocalformat, wDatePivot);
				setVar(wI, newVar);
				newVar.setMustBeFormated(true);
				newVar.setServerValue(aVal.getResu(wI));

			} else {
				v.setUnModifiableServerValue(aVal.getResu(wI));
			}

			wI++;
		}
	},
	setColumnsFormats: function(aFormats) {
		var wNbResu = aFormats.size();
		var wI = 0,
			nbVar = this.vars.length;
		while (wI < nbVar && wI < wNbResu) {
			var wFormatDef = aFormats.getResu(wI);
			if (wFormatDef != null && wFormatDef.isNotNullResu()) {
				var wFormat = new CAdapiFormat(wFormatDef.value);
				if (wFormat.isValid()) {
					var v = getVar(wI);
					if (v != null) {
						v.setServerFormat(wFormat);
						v.setMustBeFormated(!wFormat.isLocalMenu());
					}
				}

			}
			wI++;
		}
	},
	setColumnsTitles: function(aTitles) {
		var wTitre;
		var wNbResu = aTitles.size();
		var wI = 0,
			nbVar = this.vars.length;
		while (wI < nbVar && wI < wNbResu) {
			wTitre = aTitles.getResu(wI);
			if (wTitre != null && wTitre.isNotNullResu()) {
				var v = getVar(wI);
				if (v != null) {
					v.setServerTitle(wTitre.value);
				}
			}
			wI++;
		}
	},
	toJson: function() {
		var object = new JSONObject();
		object.put('$uuid', this.zeroBaseLineIdx);
		// line number
		var i = 0;
		for (var item in this.vars) {
			if (item.hasServerValueModification()) {
				object.put(item.getJsonKey(), item.getDisplayValue());
				i++;
			}
		}
		if (i <= 0) {
			return null;
		}

		return object;
	}
});