"use strict"; var helpers = require('syracuse-core/lib/helpers');

	var CAdapiScreenLeftList = helpers.defineClass(function() {}, CAdapiScreen, {
		CAdapiScreenLeftList(aAdapiRequesterWindow, aListOfLeftLists) {
			TODO_SUPER(aAdapiRequesterWindow, SCREEN_LEFTLIST_NUM_ZERO_BASED + 1, SCREEN_ID_LEFTLIST, aListOfLeftLists);
		}

	}

var CAdapiListOfLeftListsFactory = helpers.defineClass(function() {}, null, {

	private static String ATT_ID = "ID";

	private static String ATT_NBK = "NBK";
	private static String ATT_NBZ = "NBZ";
	private static String ATT_TYL = "TYL";
	private static String TAG_FLD = "FLD";
	private static String TAG_LST = "LST";

	private static int extactType(aValue) {
			var wPos = aValue.indexOf(',');
			return Integer.parseInt(aValue.substring(0, wPos));
	}

	private static CAdapiLeftListLine instanciateLeftListEntry(aStackedWindow, aAdapiLeftList, aId, aLeftListNode) {
		if (aAdapiLeftList.isRecursive()) {
			return instanciateLeftListLineNode(aStackedWindow, (CAdapiLeftListRecursiv) aAdapiLeftList, aId, aLeftListNode);
		} else if (aAdapiLeftList.isHierarchic()) {
			return instanciateLeftListLineLevel(aStackedWindow, (CAdapiLeftListHierarchic) aAdapiLeftList, aId, aLeftListNode);
		} else {
			return instanciateLeftListLineFlat(aStackedWindow, aAdapiLeftList, aId, aLeftListNode);
		}
	}

	private static CAdapiLeftListLine instanciateLeftListLineFlat(aStackedWindow, aAdapiLeftList, aId, aLeftListNode) {
		var wNbField = CDomFacilities.getAttributValueInt(aLeftListNode, ATT_NBZ);
		var wLeftListLine = new CAdapiLeftListLine(aStackedWindow, aAdapiLeftList, aId, wNbField, aAdapiLeftList.size());
		var wListOfX3Variables = aLeftListNode.getElementsByTagName(TAG_FLD);
		var wForcedTDO = 0;
		instanciateVarsOfLeftListLine(aStackedWindow, wLeftListLine, aId, wListOfX3Variables, wForcedTDO);
		return wLeftListLine;
	}

	private static CAdapiLeftListLine instanciateLeftListLineLevel(aStackedWindow, aAdapiLeftList, aId, aLeftListNode) {
		var wNbField = CDomFacilities.getAttributValueInt(aLeftListNode, ATT_NBZ);
		var wLeftListLine = new CAdapiLeftListLineLevel(aStackedWindow, aAdapiLeftList, aId, wNbField, aAdapiLeftList.size());
		var wListOfX3Variables = aLeftListNode.getElementsByTagName(TAG_FLD);
		var wForcedTDO = CStructResu.TDO_ALPHA;
		instanciateVarsOfLeftListLine(aStackedWindow, wLeftListLine, aId, wListOfX3Variables, wForcedTDO);
		return wLeftListLine;
	}

	private static CAdapiLeftListLineNode instanciateLeftListLineNode(aStackedWindow, aAdapiLeftList, aId, aLeftListNode) {
		var wLeftListNode = new CAdapiLeftListLineNode(aStackedWindow, aAdapiLeftList, aId, 1, aAdapiLeftList.size());
		var wPrefixId = aAdapiLeftList.getId();
		wPrefixId = wPrefixId.substring(wPrefixId.length() - 1);
		var wVariable = CAdapiVariableFactory.instanciateLeftListColumn(aStackedWindow, wLeftListNode, 1, wPrefixId + "1");
		wLeftListNode.addOneVar(wVariable);
		return wLeftListNode;
	}

	protected static void instanciateLeftLists(aStackedWindow, aAdapiScreens, aWindowDescription, aListOfLeftLists) {
		var wLeftListNodes = aWindowDescription.getElementsByTagName(TAG_LST);
		var wMax = wLeftListNodes.getLength();
		if (wMax > 0) {
			var wAdapiScreen = new CAdapiScreenLeftList(aStackedWindow, aListOfLeftLists);
			aAdapiScreens.pushScreenLeftList(wAdapiScreen);
			aListOfLeftLists.setAdapiScreen(wAdapiScreen);
			var wLeftListNode;
			var wAdapiLeftList;
			var wAdapiLeftListId;
			var wI = 0;
			while (wI < wMax) {
				wLeftListNode = (Element) wLeftListNodes.item(wI);
				wAdapiLeftListId = CDomFacilities.getAttributValue(wLeftListNode, ATT_ID);
				wAdapiLeftList = instanciateOneLeftList(aStackedWindow, wAdapiScreen, wI + 1, wAdapiLeftListId, wLeftListNode);
				aListOfLeftLists.push(wAdapiLeftListId, wAdapiLeftList);
				wI++;
			}
		}
	}

	protected static CAdapiLeftListLine instanciateNewLeftListEntrySup(aStackedWindow, aAdapiLeftList, aNbField) {

		var wLeftListLine = new CAdapiLeftListLine(aStackedWindow, aAdapiLeftList, aAdapiLeftList.getId(), aNbField, aAdapiLeftList.size());
		var wVariable;
		var wPrefixId = aAdapiLeftList.getId();
		wPrefixId = wPrefixId.substring(wPrefixId.length() - 1);
		var wI = 0;
		while (wI < aNbField) {
			wVariable = CAdapiVariableFactory.instanciateLeftListColumn(aStackedWindow, wLeftListLine, wI + 1, wPrefixId + String.valueOf(wI + 1));
			wLeftListLine.addOneVar(wVariable);
			wI++;
		}
		return wLeftListLine;
	}

	protected static CAdapiLeftList instanciateOneLeftList(aStackedWindow, aAdapiScreen, aEntityIndexBaseOne, aId, aLeftListNode) {
		var wListFormat = extactType(CDomFacilities.getAttributValue(aLeftListNode, ATT_TYL));
		var wNbField = CDomFacilities.getAttributValueInt(aLeftListNode, ATT_NBZ);
		var wAdapiLeftList;

		if (CAdapiLeftList.isHierarchicFormat(wListFormat)) {
			var wNbKeyParts = CDomFacilities.getAttributValueInt(aLeftListNode, ATT_NBK);
			wAdapiLeftList = new CAdapiLeftListHierarchic(aStackedWindow, aAdapiScreen, aEntityIndexBaseOne, aId, wListFormat, wNbField, wNbKeyParts);
		} else if (CAdapiLeftList.isRecursiveFormat(wListFormat)) {
			wAdapiLeftList = new CAdapiLeftListRecursiv(aStackedWindow, aAdapiScreen, aEntityIndexBaseOne, aId, wListFormat, wNbField);
		} else {
			wAdapiLeftList = new CAdapiLeftList(aStackedWindow, aAdapiScreen, aEntityIndexBaseOne, aId, wListFormat, wNbField);
		}
		var wLeftListLine = instanciateLeftListEntry(aStackedWindow, wAdapiLeftList, aId, aLeftListNode);
		wAdapiLeftList.setEntrySup(wLeftListLine);
		return wAdapiLeftList;
	}

	private static void instanciateVarsOfLeftListLine(aStackedWindow, aLeftListLine, aId, aListOfX3Variables, aForcedTDO) {
		var wVariable;
		var wVariableNode;
		var wI = 0;
		var wMax = aListOfX3Variables.getLength();
		if (wMax == 0) {
			var wMess = aStackedWindow.getAdapiClient().getAdapiResources().getMessage(CAdapiResources.KEYMESS_ERROR_NO_COLUMS, aId);
			throw new CAdapiException(aStackedWindow.getAdapiClient(), wMess);
		}
		while (wI < wMax) {
			wVariableNode = (Element) aListOfX3Variables.item(wI);
			wVariable = CAdapiVariableFactory.instanciateVariable(aStackedWindow, aLeftListLine, wI + 1, aId, wVariableNode, aForcedTDO);
			aLeftListLine.addOneVar(wVariable);
			wI++;
		}
	}
}
