"use strict"; var helpers = require('syracuse-core/lib/helpers');

var CAdapiScreen = helpers.defineClass(function() {}, CAdapiEntity, {
	protected final static int SCREEN_BUTTONS_NUM_ZERO_BASED = 32;// index base "one" = 33
	protected final static String SCREEN_ID_BUTTONS = "_BUTTONS";
	protected final static String SCREEN_ID_LEFTLIST = "_SCRNLEFT";
	protected final static String SCREEN_ID_TABTITLES = "_TABTITLE";
	protected final static int SCREEN_LEFTLIST_NUM_ZERO_BASED = 33;// index base "one" =
	protected final static int SCREEN_TABTITLES_NUM_ZERO_BASED = 34;// index base "one" =

	protected static String screenZeroBaseIdxToWhatScreen(aIdx) {
		if (aIdx == CAdapiScreen.SCREEN_LEFTLIST_NUM_ZERO_BASED) {
			return "33|SCREEN_LEFTLIST(34,AH)";
		} else if (aIdx == CAdapiScreen.SCREEN_BUTTONS_NUM_ZERO_BASED) {
			return "32|SCREEN_BUTTONS(33,AG)";
		} else if (aIdx == CAdapiScreen.SCREEN_TABTITLES_NUM_ZERO_BASED) {
			return "34|SCREEN_TABTITLES(35,AI)";
		} else {
			return String.valueOf(aIdx);
		}
	}

	private CAdapiStackedWindow this.adapiRequesterWindow;
	private CAdapiListOfEntity this.listOfEntity;

	protected CAdapiScreen(requesterWindow, idxbaseOne, aScreenId) {
		this(requesterWindow, idxbaseOne, aScreenId, new CAdapiListOfDataSrcs(requesterWindow));
	}

	protected CAdapiScreen(requesterWindow, idxbaseOne, aScreenId, aListOfEntity) {
		TODO_SUPER(requesterWindow.getAdapiClient(), aScreenId, idxbaseOne, EntityType.SCREEN);
		this.adapiRequesterWindow = requesterWindow;
		this.listOfEntity = aListOfEntity;
		// En dernier
		setTypeJsonNode(ETypeJsonNode.ENTITY);
	}, getAdxId: function() {
		if (this.adapiRequesterWindow == null) {
			return null;
		}
		return new StringBuilder().append(this.adapiRequesterWindow.getAdxId()).append(',').append(getEntityIndexBaseOneInAlphanumFormat()).toString();
	}, getJsonKey: function() {
		return this.getAdapiObservableId().substring(1, 2);
	}, isScreenButtons: function() {
		return getEntityIndexBaseOne() == SCREEN_BUTTONS_NUM_ZERO_BASED + 1;
	}, isScreenLeftList: function() {
		return getEntityIndexBaseOne() == SCREEN_LEFTLIST_NUM_ZERO_BASED + 1;
	}, isScreenTabbed: function() {
		return getEntityIndexBaseOne() < SCREEN_BUTTONS_NUM_ZERO_BASED + 1;
	}, isScreenTabTitle: function() {
		return getEntityIndexBaseOne() == SCREEN_TABTITLES_NUM_ZERO_BASED + 1;
	}, pushDataSrc: function(aId, aDataSrc) {
		this.listOfEntity.push(aId, aDataSrc);
	}, toJson: function() {
			var object = new JSONObject();
			// Modif Sreen
			if (hasModifTitle()) {
				object.put(JSON_TIT, getTitle());
				if (getTitleSty() != null) {
					object.put(JSON_STYTIT, this.getTitleSty());
				}
			}
			if (hasModifStyle()) {
				object.put(JSON_STY, getStyle());
			}
			return object;
	}, traverseAll: function(aTraverser) {
		return this.listOfEntity.traverseAll(aTraverser);
	}, traverseChilds: function(aTraverser) {
		return this.listOfEntity.traverseChilds(aTraverser);
	}

	boolean traverseSettable(aStructIst, aAdapiSetter) {
		return this.listOfEntity.traverseSettable(aStructIst, aAdapiSetter);
	}
}
