"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CAdapiEntity = require('syracuse-x3/lib/fusion/CAdapiEntity').CAdapiEntity;

var CAdapiVariable = exports.CAdapiVariable = helpers.defineClass(function(srcLine, aEntityIndexBaseOne, aVariableName, aVariableId, aDataType, aFormat, aEntityState) {
	CAdapiEntity.call(this, srcLine && srcLine.adapiClient, aVariableId, aEntityIndexBaseOne, 'FIELD');
	this.srcLine = null;
	this.browserValue = null;
	this.decimals = 0;
	this.mustBeFormated = false;
	this.withDecimal = false;

	this.name = aVariableName;
	this.setSrcLine(srcLine);
	this.setStateFromDescr(aEntityState);
	this.dataType = aDataType;
	// TODO
	//this.resuType = CStructResu.tdoNumToResuTyp(this.dataType);
	this.setFormat(aFormat);
	// En dernier
	this.setJsonType('ENTITY');
}, CAdapiEntity, {
	acceptEditFormat: function() {
		return true;
	},
	buildMessFormterExcetion: function(aMessKey, aWhatFormatKey, aValue, e) {
		return this.buildMessFormterExcetion(aMessKey, aWhatFormatKey, aValue, CException.eClassAndMessInString(e));
	},
	/* TODO overload
	buildMessFormterExcetion: function(aMessKey, aWhatFormatKey, aValue, aErrDescr) {
		return CStringFacilities.sprintf(getRsrcMess(aMessKey), getRsrcMess(aWhatFormatKey), this.id, aErrDescr);
	},*/
	callFormater: function(aValue) {
		try {
			if (this.adapiClient.hasValidFormater() && hasValidFormat()) {
				// "formater" ET format valide
				return this.adapiClient.formater.formatField(this.format, aValue, true);
			} else if (aValue != null && aValue.length() > 0) {
				// pas de "formater" ou si le format n'est pas valide
				return formatHimself(aValue);
			}
		} catch (e) {
			this.adapiClient.addLogicalErrorMess(this, "callFormater", this.getAdxId(), buildMessFormterExcetion(CAdapiResources.KEYMESS_ERROR_FORMAT_EXCEPTION, CAdapiResources.KEYMESS_FORMAT_RTOS, aValue, e));
		}
		return aValue; // retourne la donnee brute
	},
	callUnFormater: function(aValue) {
		if (this.adapiClient.hasValidFormater() && hasValidFormat()) {
			try {
				var fmt = this.adapiClient.formater;
				// Format la valeur - 1/2/3 -> 01/02/03
				try {
					aValue = fmt.formatField(this.format, aValue, false);
				} catch (e) {
					// aValue peut etre une valeur formatee au format X3 --> On
					// tente le unformate
				}
				// Déformate - 01/02/03 -> 20030201
				return fmt.unformatField(this.format, aValue, true);
			} catch (e) {
				throw CAdapiException.newFmtException(this.adapiClient, e, buildMessFormterExcetion(CAdapiResources.KEYMESS_ERROR_UNFORMAT_EXCEPTION, CAdapiResources.KEYMESS_UNFORMAT_STOR, aValue, e));
			}
		}
		// No format
		return unformatHimself(aValue);
	},

	//clone: function();
	cloneValues: function(v) {
		TODO_SUPER.cloneValues(v);
		v.this.browserValue = this.browserValue;
	},
	dispose: function() {
		TODO_SUPER.dispose();
		this.srcLine = null;
		this.browserValue = null;
	},
	forceChange: function() {
		if (this.srcLine != null) {
			var dataSrc = this.srcLine.dataSrc;
			if (dataSrc.isBlocGrid()) {
				// Sur modification de valeur on notifie le parent seuelemnt si bloc tableau ou liste gauche
				this.srcLine.cellHasBeenModified();
				return;
			}
		}
		CAdapiEntity.prototype.forceChange.call(this);
	},
	formatEditToDisplay: function(aValue) {
		if (!acceptEditFormat()) {
			return aValue;
		}
		var res;
		var adp = this.adapiClient;
		if (adp.hasValidFormater() && hasValidFormat()) {
			try {
				res = adp.formater.inputGetFocusOutValue(this.format, aValue, true);
			} catch (e) {
				try {
					// ON essaie pour voir si la valeur saisie est une valeur
					// formatée X3 (Display)
					res = adp.formater.unformatField(this.format, aValue);
					res = adp.formater.formatField(this.format, aValue, true, true);
				} catch (e2) {
					throw CAdapiException.newFmtException(adp, e, buildMessFormterExcetion(CAdapiResources.KEYMESS_ERROR_FORMAT_EXCEPTION, CAdapiResources.KEYMESS_FORMAT_ETOS, aValue, e));
				}
			}
		} else {
			return aValue;
		}
		return res;
	}

	// Valeur renvoyée si pas de formateur ou pas de format - Surchargée par
	// type de variable
	,
	formatHimself: function(aValue) {
		return aValue;
	},
	formatX3ToDisplay: function(aData) {
		var x3Value = aData.value;
		// formatage uniquement si session interractive
		var wMustCallFormater = true;
		if (!this.mustBeFormated) {
			wMustCallFormater = false;
		}
		if (wMustCallFormater && x3Value == null) {
			wMustCallFormater = false;
		}
		var res;
		if (wMustCallFormater) {
			res = callFormater(x3Value);
		} else {
			res = x3Value;
		}
		return res;
	},
	formatX3ToEdit: function() {
		var val = this.getServerValue() != null ? this.getServerValue().value : null;
		var res = val;
		if (acceptEditFormat() && this.mustBeFormated && val != null) {
			if (hasValidFormat() && this.adapiClient.hasValidFormater()) {
				try {
					res = this.adapiClient.formater.inputGetFocusInValue(this.format, val, true);
				} catch (e) {
					this.adapiClient.addLogicalErrorMess(this, "callUnformaterToEdit", this.id, buildMessFormterExcetion(CAdapiResources.KEYMESS_ERROR_UNFORMAT_EXCEPTION, CAdapiResources.KEYMESS_UNFORMAT_STOE, val, e));
				}
			}
		}
		return res;
	},
	getAdxId: function() {
		if (this.srcLine == null) {
			return null;
		}
		var sb = new StringBuilder();
		sb.append(this.srcLine.getDataSrcAdxId()).append(this.getIdxInBloc()).append(',').append(String.valueOf(this.srcLine.nodeId));
		return sb.toString();

	},

	// Retourne la valeur courante suivant le codage ou la conversion lie au
	// type de de donnee
	getDisplayValue: function() {
		var res = this.getServerValue() != null ? formatX3ToDisplay(this.getServerValue()) : EMPTY;
		// formatX3ToDisplay peut renvoyer null
		return res == null ? EMPTY : res;
	},

	// retoune l'index de la variable dans le bloc en extrayant la partie
	// numerique de l'id qui est de la forme "AH12"
	getIdxInBloc: function() {
		var wIdx = this.id;
		var wPos = 0;
		while (!Character.isDigit(wIdx.charAt(wPos))) {
			wPos++;
		}
		return wIdx.substring(wPos);
	},

	// vrai si une modification de couleur, etat, titre, style ou choix
	// contextuel a ete envoyee par le serveur sur l'entite.
	hasGuiModModifications: function() {
		return hasModifState() || hasModifTitle() || hasModifStyle();
	},
	isWithDecimal: function() {
		return this.withDecimal;
	},
	mustBeFormated: function() {
		return this.mustBeFormated;
	},
	razModification: function() {
		storeBrowserValue(this.getServerValue());
		TODO_SUPER.razModification();
	}

	/**
	 * Valorise la variable avec une chaine representant une valeur non
	 * formatee. Cette methode est utilisee pour stocker la valeur saisie par
	 * l'utilisateur lors des envois des actions vers le serveur.
	 */
	,
	setBrowserUnformatedValue: function(aBrowserValue) {
		setServerResu(aBrowserValue);
		storeBrowserValue(aBrowserValue);
	},
	setDecimal: function(aDecimal) {
		this.decimals = aDecimal;
		this.withDecimal = this.decimals > 0 || this.decimals == -1;
	},
	setMustBeFormated: function(aMustBeFormated) {
		this.mustBeFormated = aMustBeFormated;
	},
	setServerFormat: function(aFormat) {
		var wIndferredState = TODO_SUPER.setServerFormat(aFormat);
		setMustBeFormated(hasValidFormat());
		return wIndferredState;
	}

	/**
	 * Modification de la variable e patir d'un noeud "NDCHVL" reeu du serveur.
	 * La valiable est modifiee seulement si le resu est different de la valeur
	 * initiale Apres cette valorisation, la variable est consideree comme
	 * modifiee
	 */
	,
	setServerValue: function(aResu) {

		if (this.browserValue == null || !this.browserValue.equals(aResu)) {
			if (!hasServerValueModification() || !isServerValueEquals(aResu)) {
				TODO_SUPER.setServerValue(aResu);
			} else {
				forceServerValueModification(true);
			}
		} else if (mustBeFormated()) {
			TODO_SUPER.setServerValue(aResu);
			resetServerModified();

		} else if (hasServerValueModification()) {
			TODO_SUPER.setServerValue(this.browserValue);
			resetServerModified();
		}
	},
	setSrcLine: function(srcLine) {
		this.srcLine = srcLine;
	},
	setUnModifiableServerValue: function(aResu) {
		storeBrowserValue(null);
		return TODO_SUPER.setUnModifiableServerValue(aResu);
	},
	storeBrowserValue: function(aBrowserValue) {
		this.browserValue = aBrowserValue;
	},
	toJson: function() {
		if (!hasServerValueModification() && !hasGuiModModifications()) {
			return null;
		}
		var object = {};
		if (hasModifState()) {
			object.stt = this.state;
		}
		if (hasModifStyle() && this.style != null && this.style.length() != 0) {
			object.sty = this.style; // style presentation
		}
		if (hasModifTitle()) {
			object.tit = this.title;
			if (this.titleStyle != null) {
				object.stytit = this.titleStyle;
			}
		}
		if (hasServerValueModification()) {
			var value = this.getDisplayValue();
			if (value != null) {
				object.v = value;
			} else {
				object.v = "";
			}
		}
		return object;
	},
	unFormatData: function(aValue) {
		return aValue;
	},

	// Valeur renvoyée si pas de formateur ou pas de format - Surchargée par
	// type de variable
	unformatHimself: function(aValue) {
		return aValue;
	}
});