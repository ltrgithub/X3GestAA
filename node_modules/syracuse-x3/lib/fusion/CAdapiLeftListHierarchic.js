"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CAdapiLeftList = require('syracuse-x3/lib/fusion/CAdapiLeftList').CAdapiLeftList;

var CAdapiLeftListHierarchic = exports.CAdapiLeftListHierarchic = helpers.defineClass(function(aStackedWindow, aScreen, aEntityIndexBaseOne, aId, aListFormat, aNbColumns, aNbKeyParts) {
	CAdapiLeftList.call(this, aStackedWindow, aScreen, aEntityIndexBaseOne, aId, aListFormat, aNbColumns);
	this.nbKeyParts = aNbKeyParts;
	this.workingVal = null;
}, CAdapiLeftList, {
	appendLeftListLine: function(aIdx, aBranche, aTxt, aVal, aClf, aClp) {

		var wIsBanch = aBranche == 1;
		var wIdxResuToSetInWorkingVal = aClf.size() - 1;
		this.setTextInWorkingVal(aTxt, wIdxResuToSetInWorkingVal);
		var wLeftListLine = null;
		if (!wIsBanch) {
			wLeftListLine = this.entrySup.clone();
			wLeftListLine.setColumns(aIdx - 1, this.workingVal, aClf);
			wLeftListLine.forceServerValueModification(true);
			CAdapiLeftList.prototype.appendLeftListLine.call(this, wLeftListLine);
		}
		return wLeftListLine;
	},
	initWorkingVal: function() {
		this.workingVal = new CNodeArgTblResu(this.entrySup.vars.length);
	},
	setServerSelectLine: function(selected, aCle) {
		if (this.isListFormat(FMT_PICKING_HIERARCHIC)) {
			var wSelectedIdx = this.findLineIdx(aCle);
			var wFound = wSelectedIdx > -1;
			if (wFound) {
				getLine(wSelectedIdx).setLeftListLineSelected(selected, true);
			}
			return wFound;
		} else {
			return CAdapiLeftList.prototype.setServerSelectLine.call(this, selected, aCle);
		}
	},
	setTextInWorkingVal: function(aTxt, aIdxResuToSetInWorkingVal) {
		if (this.workingVal == null) {
			this.initWorkingVal();
		}
		this.workingVal.setResu(aIdxResuToSetInWorkingVal, CStructResu.X3TYP_STRU, aTxt);

	}
});