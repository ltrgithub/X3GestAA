"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CAdapiDataSrc = function() {};

//private static int FMT_FLAT = 1;
var FMT_HIERARCHIC = 2;
var FMT_PICKING_FLAT = 5;
var FMT_PICKING_HIERARCHIC = 3;
var FMT_RECURSIVE = 4;

var CAdapiLeftList = helpers.defineClass(function(aStackedWindow, aAdapiScreen, aEntityIndexBaseOne, aId, aListFormat, aNbColumns) {
	TODO_SUPER(aStackedWindow, aAdapiScreen, aEntityIndexBaseOne, aId, 300, aNbColumns, null, CAdapiDataSrc.TYPE_LEFTLIST);
	this.listFormat = aListFormat;
	this.columnTitleModified = false;
	this.currentSelectedLine = -1;
	this.nbColumnModified = false;
	this.colomnFormatChange = false;
}, CAdapiDataSrc, {
	appendLeftListLine: function(aIdx, aBranche, aTxt, aVal, aClf, aClp) {
		var wLeftListLine = this.entrySup.clone();
		if (aIdx == -1) {
			aIdx = size();
		}
		wLeftListLine.setColumns(aIdx - 1, aVal, aClf);
		appendLeftListLine(wLeftListLine);
		return wLeftListLine;
	},
	changeColumnsFormats: function(aFormats) {
		var wLeftListLine;
		if (aFormats.size() > this.nbColumns) {
			wLeftListLine = CAdapiListOfLeftListsFactory.instanciateNewLeftListEntrySup(this.stackedWindow, this, aFormats.size());
			setEntrySup(wLeftListLine);
			this.nbColumnModified = true;
		} else {
			wLeftListLine = this.entrySup;
		}
		wLeftListLine.setColumnsFormats(aFormats);
		this.colomnFormatChange = true;
	},
	changeColumnsTitles: function(aTitles) {
		this.entrySup.setColumnsTitles(aTitles);
		this.columnTitleModified = true;
	},
	findLineIdx: function(aCle) {
		var wCle;
		var wMax = size();
		var wI = 0;
		while (wI < wMax) {
			wCle = getLine(wI).cle;
			if (wCle == null) {

			} else if (wCle.equals(aCle)) {
				return wI;
			}
			wI++;
		}
		return -999;
	},
	hasColumnTitleModified: function() {
		return this.columnTitleModified;
	},
	hasNbColumnModified: function() {
		return this.nbColumnModified;
	},
	isColomnFormatChange: function() {
		return this.colomnFormatChange;
	},
	isHierarchic: function() {
		return isHierarchicFormat(this.listFormat);
	},
	isListFormat: function(aListFormat) {
		return this.listFormat == aListFormat;
	},
	isRecursive: function() {
		return isRecursiveFormat(this.listFormat);
	},
	razModification: function() {
		this.nbColumnModified = false;
		this.columnTitleModified = false;

		TODO_SUPER.razModification();
	},
	setColomnFormatChange: function(colomnFormatChange) {
		this.colomnFormatChange = colomnFormatChange;
	},
	setServerSelectLine: function(selected, aCle) {
		var selIdx = findLineIdx(aCle);
		var found = selIdx > -1;
		if (isListFormat(FMT_PICKING_FLAT)) {
			if (found) {
				getLine(selIdx).setLeftListLineSelected(selected, true);
			}
		} else {
			if (selected && selIdx != this.currentSelectedLine) {
				if (selIdx > -1) {
					getLine(selIdx).setLeftListLineSelected(selected, true);
					if (this.currentSelectedLine > -1 && this.currentSelectedLine < size()) {
						getLine(this.currentSelectedLine).setLeftListLineSelected(false, false);
					}
				} else if (this.currentSelectedLine > -1 && this.currentSelectedLine < size()) {
					getLine(this.currentSelectedLine).setLeftListLineSelected(false, true);

				}
				this.currentSelectedLine = selIdx;

			} else {
				if (selIdx > -1) {
					getLine(selIdx).setLeftListLineSelected(selected, true);
				}
				this.currentSelectedLine = -1;
			}
		}
		return true;
	}

});

CAdapiLeftList.isHierarchicFormat = function(aFormat) {
	return aFormat == FMT_HIERARCHIC || aFormat == FMT_PICKING_HIERARCHIC;
}

CAdapiLeftList.isRecursiveFormat = function(aFormat) {
	return aFormat == FMT_RECURSIVE;
}