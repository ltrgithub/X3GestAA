"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CStructResu = require('syracuse-x3/lib/fusion/CStructResu').CStructResu;
var CAdapiScreen = require('syracuse-x3/lib/fusion/CAdapiScreen').CAdapiScreen;
var CAdapiLeftList = require('syracuse-x3/lib/fusion/CAdapiLeftList').CAdapiLeftList;
var CAdapiLeftListLine = require('syracuse-x3/lib/fusion/CAdapiLeftListLine').CAdapiLeftListLine;
var CAdapiLeftListLineLevel = require('syracuse-x3/lib/fusion/CAdapiLeftListLine').CAdapiLeftListLineLevel;
var CAdapiVariableFactory = require('syracuse-x3/lib/fusion/CAdapiVariableFactory').CAdapiVariableFactory;
var CAdapiLeftListRecursiv = require('syracuse-x3/lib/fusion/CAdapiLeftListRecursiv').CAdapiLeftListRecursiv;
var CAdapiLeftListHierarchic = require('syracuse-x3/lib/fusion/CAdapiLeftListHierarchic').CAdapiLeftListHierarchic;
var CAdapiLeftListLineNode = require('syracuse-x3/lib/fusion/CAdapiLeftListLineNode').CAdapiLeftListLineNode;



CAdapiLeftListLine

var CAdapiScreenLeftList = exports.CAdapiScreenLeftList = helpers.defineClass(function(aAdapiRequesterWindow, aListOfLeftLists) {
	CAdapiScreen.call(this, aAdapiRequesterWindow, CAdapiScreen.SCREEN_LEFTLIST_NUM_ZERO_BASED + 1, "_SCRNLEFT", aListOfLeftLists);
}, CAdapiScreen, {});

function extactType(aValue) {
	var wPos = aValue.indexOf(',');
	return parseInt(aValue.substring(0, wPos),10);
}

function instanciateLeftListEntry(aStackedWindow, aAdapiLeftList, aId, aLeftListNode) {
	if (aAdapiLeftList.isRecursive()) {
		return instanciateLeftListLineNode(aStackedWindow, aAdapiLeftList, aId, aLeftListNode);
	} else if (aAdapiLeftList.isHierarchic()) {
		return instanciateLeftListLineLevel(aStackedWindow, aAdapiLeftList, aId, aLeftListNode);
	} else {
		return instanciateLeftListLineFlat(aStackedWindow, aAdapiLeftList, aId, aLeftListNode);
	}
}

function instanciateLeftListLineFlat(aStackedWindow, aAdapiLeftList, aId, aLeftListNode) {
	var wNbField = aLeftListNode.$.NBZ;
	var wLeftListLine = new CAdapiLeftListLine(aStackedWindow, aAdapiLeftList, aId, wNbField, aAdapiLeftList.lines.length);
	var wListOfX3Variables = aLeftListNode.FLD;
	var wForcedTDO = 0;
	instanciateVarsOfLeftListLine(aStackedWindow, wLeftListLine, aId, wListOfX3Variables, wForcedTDO);
	return wLeftListLine;
}

function instanciateLeftListLineLevel(aStackedWindow, aAdapiLeftList, aId, aLeftListNode) {
	var wNbField = aLeftListNode.$.NBZ;
	var wLeftListLine = new CAdapiLeftListLineLevel(aStackedWindow, aAdapiLeftList, aId, wNbField, aAdapiLeftList.lines.length);
	var wListOfX3Variables = aLeftListNode.FLD;
	var wForcedTDO = CStructResu.TDO_ALPHA ;
	instanciateVarsOfLeftListLine(aStackedWindow, wLeftListLine, aId, wListOfX3Variables, wForcedTDO);
	return wLeftListLine;
}

function instanciateLeftListLineNode(aStackedWindow, aAdapiLeftList, aId, aLeftListNode) {
	var wLeftListNode = new CAdapiLeftListLineNode(aStackedWindow, aAdapiLeftList, aId, 1, aAdapiLeftList.lines.length);
	var wPrefixId = aAdapiLeftList.id;
	wPrefixId = wPrefixId.substring(wPrefixId.length - 1);
	var wVariable = CAdapiVariableFactory.instanciateLeftListColumn(aStackedWindow, wLeftListNode, 1, wPrefixId + "1");
	wLeftListNode.addOneVar(wVariable);
	return wLeftListNode;
}


function instanciateVarsOfLeftListLine(aStackedWindow, aLeftListLine, aId, aListOfX3Variables, aForcedTDO) {
	var wVariable;
	var wVariableNode;
	var wI = 0;
	var wMax = Array.isArray(aListOfX3Variables) ? aListOfX3Variables.length : 1;
	if (wMax == 0) {
		var wMess = aStackedWindow.adapiClient.adapiResources.getMessage(CAdapiResources.KEYMESS_ERROR_NO_COLUMS, aId);
		throw new CAdapiException(aStackedWindow.adapiClient, wMess);
	}
	while (wI < wMax) {
		wVariableNode = wMax === 1 ? aListOfX3Variables : aListOfX3Variables[wI];
		wVariable = CAdapiVariableFactory.instanciateVariable(aStackedWindow, aLeftListLine, wI + 1, aId, wVariableNode, aForcedTDO);
		aLeftListLine.addOneVar(wVariable);
		wI++;
	}
}

var CAdapiListOfLeftListsFactory = exports.CAdapiListOfLeftListsFactory = {
	instanciateLeftLists: function(aStackedWindow, aAdapiScreens, aWindowDescription, aListOfLeftLists) {
		var wLeftListNodes = aWindowDescription.LEFTLIST.LST;
		var wMax = Array.isArray(wLeftListNodes) ? wLeftListNodes.length : 1;
		if (wMax > 0) {
			var wAdapiScreen = new CAdapiScreenLeftList(aStackedWindow, aListOfLeftLists);
			aAdapiScreens.pushScreenLeftList(wAdapiScreen);
			aListOfLeftLists.setAdapiScreen(wAdapiScreen);
			var wLeftListNode;
			var wAdapiLeftList;
			var wAdapiLeftListId;
			var wI = 0;
			while (wI < wMax) {
				wLeftListNode = wMax === 1 ? wLeftListNodes : wLeftListNodes[wI];
				wAdapiLeftListId = wLeftListNode.$.ID;
				wAdapiLeftList = this.instanciateOneLeftList(aStackedWindow, wAdapiScreen, wI + 1, wAdapiLeftListId, wLeftListNode);
				aListOfLeftLists.push(wAdapiLeftListId, wAdapiLeftList);
				wI++;
			}
		}
	},

	instanciateNewLeftListEntrySup: function(aStackedWindow, aAdapiLeftList, aNbField) {

		var wLeftListLine = new CAdapiLeftListLine(aStackedWindow, aAdapiLeftList, aAdapiLeftList.id, aNbField, aAdapiLeftList.lines.length);
		var wVariable;
		var wPrefixId = aAdapiLeftList.id;
		wPrefixId = wPrefixId.substring(wPrefixId.length - 1);
		var wI = 0;
		while (wI < aNbField) {
			wVariable = CAdapiVariableFactory.instanciateLeftListColumn(aStackedWindow, wLeftListLine, wI + 1, wPrefixId + (wI + 1).toString());
			wLeftListLine.addOneVar(wVariable);
			wI++;
		}
		return wLeftListLine;
	},

	instanciateOneLeftList: function(aStackedWindow, aAdapiScreen, aEntityIndexBaseOne, aId, aLeftListNode) {
		var wListFormat = extactType(aLeftListNode.$.TYL);
		var wNbField = aLeftListNode.$.NBZ;
		var wAdapiLeftList;

		if (CAdapiLeftList.isHierarchicFormat(wListFormat)) {
			var wNbKeyParts = aLeftListNode.$.NBK;
			wAdapiLeftList = new CAdapiLeftListHierarchic(aStackedWindow, aAdapiScreen, aEntityIndexBaseOne, aId, wListFormat, wNbField, wNbKeyParts);
		} else if (CAdapiLeftList.isRecursiveFormat(wListFormat)) {
			wAdapiLeftList = new CAdapiLeftListRecursiv(aStackedWindow, aAdapiScreen, aEntityIndexBaseOne, aId, wListFormat, wNbField);
		} else {
			wAdapiLeftList = new CAdapiLeftList(aStackedWindow, aAdapiScreen, aEntityIndexBaseOne, aId, wListFormat, wNbField);
		}
		var wLeftListLine = instanciateLeftListEntry(aStackedWindow, wAdapiLeftList, aId, aLeftListNode);
		wAdapiLeftList.setEntrySup(wLeftListLine);
		return wAdapiLeftList;
	}
};