"use strict";
require('streamline').register({
	cache: true
});
var helpers = require('syracuse-core/lib/helpers');

var Stream = helpers.defineClass(function() {
	this.buffers = [];
	this.mode = "";
	this.buf;
	this.pos = -1;
	this.i = 0;
}, null, {
	add: function(vals, mode) {
		//console.log("adding " + mode)
		var b = new Buffer(vals);
		if (this.mode !== mode) this.buffers.push(this.buf = b);
		else this.buffers.push(this.buf = Buffer.concat([this.buffers.pop(), b]));
		this.mode = mode;
	},
	read: function(_, len) {
		//console.log("READING: " + len);
		if (this.mode !== 'read') {
			if (this.mode === 'write') {
				if (this.buf.length > 0) console.log("write mismatch");
			}
			this.mode = 'read';
			this.buf = this.buffers[++this.pos];
			this.i = 0;
		}
		if (len === undefined) len = this.buf.length - this.i;
		if (!this.buf || this.i + len > this.buf.length) throw new Error("reached end of test data: " + len);
		var data = this.buf.slice(this.i, this.i + len);
		this.i += len;
		return data;
	},
	write: function(_, data) {
		//console.log("WRITING: " + data.length);
		if (this.mode !== 'write') {
			if (this.mode === 'read') {
				if (this.i !== this.buf.length) console.log("read stopped before end");
			}
			this.mode = 'write';
			this.buf = this.buffers[++this.pos];
		}
		var d = this.buf.slice(0, data.length);
		if (d.toString('hex') !== data.toString('hex')) throw new Error("write mismatch: expected " + d.toString('hex') + ", got " + data.toString('hex'));
		this.buf = this.buf.slice(data.length);
	}
});

var stream = new Stream();

function WRITE(vals) {
	stream.add(vals, "w");
}

function READ(vals) {
	stream.add(vals, "r");
}

function RESPONSE(obj) {

}

function REQUEST(obj) {

}

eval(require("fs").readFileSync(__dirname + "/data/" + (process.argv[2] || "dump_0") + ".js", "utf8"));

function dump(key, vals) {
	console.log("*** " + key + " ***");
	console.log(vals.map(function(val) {
		return ("00" + val.toString(16)).slice(-2)
	}).toString());
	console.log(new Buffer(vals).toString("ascii"));
	console.log("");
}

var protocol = require("syracuse-x3/lib/automata/x3Protocol");
var CAdapiClient = require("syracuse-x3/lib/fusion/client/CAdapiClient").CAdapiClient;

function compare(a, b, path) {
	if (a === b) return;
	if (a == null || b == null || typeof a !== 'object' || typeof b !== 'object') {
		console.log(path + ': expected ' + JSON.stringify(b) + ', got ' + JSON.stringify(a));
		return;
	}
	var keys = Object.keys(a);
	keys.forEach(function(k) {
		compare(a[k], b[k], path + "." + k);
	});
	Object.keys(b).forEach(function(k) {
		if (a[k] === undefined) console.error(path + "." + k + ': missing ' + JSON.stringify(b[k]));
	});
}

var SETTINGS = {
	"SDate": "/",
	"STime": ":",
	"SDecimal": ".",
	"SThousand": " ",
	"IDate": "1",

	//	"BOSEC": "SecEnterprise",
	//	"BOSERV": "sodged02.sagefr.adinternal.com:6400",
	//	"BOUSR": "CRYPT:udosdoQfsgrUgr",
	//	"BOPWD": "CRYPT:udorw3RgrskUksvaxvascc",

	"ADXAppHost": "172.28.20.117",
	"ADXFolder": "SYDEV",
	"ADXPort": "16667",
	"ADXTrtHost": "172.28.20.117",

	"usrProfile": "ADMIN",
	"formater.von": "on",
	"user": "apisu"
};

function fix(obj) {
	if (obj.sap.acts) {
		obj.sap.acts = obj.sap.acts.sort(function(a, b) {
			return +a.id - +b.id;
		});
	}
	return obj;
}

try {
	var client = new CAdapiClient(stream, {
		isInteractiveSession: true,
		dateFormat: 1,
		datePivot: 2,
		serverDateFormat: "",
		sessionSettings: SETTINGS,
	});
	var node = null;
	//node = protocol.process(_, client);
	//if (node !== null) throw new Error("unexpected node: " + node);
	node = protocol.process(_, client);
	if (!node || node.name !== "NDGIST") throw new Error("bad node on loop exit: " + (node && node.name));
	console.log("SUCCESS!");
	var respObj = client.getResponse();
	var response = JSON.stringify(respObj);
	console.log("Response: " + JSON.stringify(respObj, null, 2));
	var expected = require('fs').readFile(__dirname + "/data/dump_client_210113.json", "utf8", _);
	expected = fix(JSON.parse(expected));
	response = fix(JSON.parse(response));
	compare(response, expected, "response");
} catch (ex) {
	console.error(ex.stack);
}