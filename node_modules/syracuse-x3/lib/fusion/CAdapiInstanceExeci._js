"use strict";
var helpers = require('syracuse-core/lib/helpers');
var AdapiObservable = function() {};

var CAdapiInstanceExeci = helpers.defineClass(function(xmlAck_call, client, ist) {
	TODO_SUPER(client);
	this.instance = ist;
	this.xml = xmlAck_call;
	// En dernier
	setTypeJsonNode('TARGET');
}, AdapiObservable, {
	getFormat: function() {
		return this.instance == null ? "" : this.instance.getFormat();
	},
	getModeEdit: function() {
		return false;
	},
	getNl: function() {
		return 0;
	},
	getValue: function() {
		return null;
	},
	getWin: function() {
		return null;
	},
	getXid: function() {
		return this.instance == null ? "" : this.instance.getIst().getBlocAlphaId().concat(this.instance.getIst().getFieldId());
	},
	getXml: function() {
		return this.xml;
	},
	hasFormat: function() {
		return this.instance == null ? false : this.instance.hasFormat();
	},
	setInstance: function(instance) {
		this.instance = instance;
	},
	setXml: function(xml) {
		this.xml = xml;
	},
	toJson: function() {
		var object = new JSONObject();
		object.put('type', 'rpc');
		var rpc = new JSONObject();
		rpc.put('xml', this.xml);
		object.put('rpc', rpc);
		var ist = new JSONObject();
		if (this.instance != null) {
			ist.put('xid', getXid());
			if (this.instance.hasFormat()) {
				ist.put('fmt', getFormat());
			}
			ist.put('win', this.instance.getIst().getWinAlphaId());
			ist.put('edit', true);
			rpc.put('ist', ist);
		}
		return object;
	}
});