"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CAdapiVariable = require('syracuse-x3/lib/fusion/CAdapiVariable').CAdapiVariable;
var CAdapiResources = require('syracuse-x3/lib/fusion/CAdapiResources').CAdapiResources;
var CStructResu = require('syracuse-x3/lib/fusion/CStructResu').CStructResu;

var FORMAT_JJMM = 5;
var FORMAT_JJMMAA = 1;
var FORMAT_JJMMSSAA = 2;
var FORMAT_LOCAL_JJMMSSAA = 1;
var FORMAT_LOCAL_MMJJSSAA = 2;
var FORMAT_LOCAL_SSAAMMJJ = 0;
var FORMAT_MMAA = 6;
var FORMAT_MMSSAA = 7;
var NO_FORMAT_LOCAL = -1;
var SEP_SLASH = '/';
var SEP_TIRET = '-';

var CAdapiVariableDate = exports.CAdapiVariableDate = helpers.defineClass(function(srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState, aLocalFormatAndSep, aPivotDate) {
	CAdapiVariable.call(this, srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState);
	this.formatDate = FORMAT_JJMMSSAA;
	this.localFormat = NO_FORMAT_LOCAL;
	this.localFormatAndSep;
	this.localSep = SEP_SLASH;
	this.pivotCentury = 19;
	this.pivotDate;
	this.pivotYear = 50;
	if (aLocalFormatAndSep !== undefined) this.initLocalFormatAndSep(aLocalFormatAndSep);
	if (aPivotDate !== undefined) this.initPivotDate(aPivotDate);
}, CAdapiVariable, {
	/**
	 * 1 = 15-03-01 = jj-mm-aa 2 = 15-03-2001 = jj-mm-ssaa 3 = 15 MAR 2001 = non
	 * trait� => format 2 4 = 15 Mars 2001 = non trait� => format 2 5 = 15-03 =
	 * jj-mm 6 = 03-01 = mm-aa 7 = 03-2001 = mm-ssaa
	 */

	clone: function() {
		var wVariable = new CAdapiVariableDate(this.srcLine, this.entityIndexBaseOne, this.name, this.id, this.dataType, this.format, this.state);
		wVariable.mustBeFormated = this.mustBeFormated;
		wVariable.localFormat = this.localFormat;
		wVariable.formatDate = this.formatDate;
		wVariable.pivotCentury = this.pivotCentury;
		wVariable.pivotYear = this.pivotYear;
		this.cloneValues(wVariable);
		return wVariable;
	},
	formatHimself: function(wValue) {
		var wCentury = wValue.substring(0, 2);
		var wYear = wValue.substring(2, 4);
		var wMonth = wValue.substring(4, 6);
		var wDay = wValue.substring(6);
		var wResult = "";
		if (this.formatDate == FORMAT_JJMMAA) {
			if (this.localFormat == FORMAT_LOCAL_JJMMSSAA) {
				wResult += wDay + this.localSep + wMonth + this.localSep + wYear;
			} else {
				wResult += wMonth + this.localSep + wDay + this.localSep + wYear;
			}
		} else if (this.formatDate == FORMAT_JJMMSSAA) {
			if (this.localFormat == FORMAT_LOCAL_JJMMSSAA) {
				wResult += wDay + this.localSep + wMonth + this.localSep + wCentury + wYear;
			} else {
				wResult += wMonth + this.localSep + wDay + this.localSep + wCentury + wYear;
			}
		} else if (this.formatDate == FORMAT_JJMM) {
			if (this.localFormat == FORMAT_LOCAL_JJMMSSAA) {
				wResult += wDay + this.localSep + wMonth;
			} else {
				wResult += wMonth + this.localSep + wDay;
			}
		} else if (this.formatDate == FORMAT_MMAA) {
			wResult += wMonth + this.localSep + wYear;
		} else if (this.formatDate == FORMAT_MMSSAA) {
			wResult += wMonth + this.localSep + wCentury + wYear;
		}
		if (wValue.length == 0) {
			wResult += wValue;
		}
		return wResult;
	},
	formatX3ToDisplay: function(aData) {
		var wValue = aData.value;
		if (!this.mustBeFormated) {
			return wValue;
		}
		if (this.serverValue.isDateNull()) {
			return "";
		}
		if (wValue == null) {
			return null;
		}
		if (wValue.length == 0) {
			return wValue;
		}
		if (wValue.length != 8) {
			var wMess = this.buildMessFormterExcetion(CAdapiResources.KEYMESS_ERROR_FORMAT_EXCEPTION, CAdapiResources.KEYMESS_FORMAT_RTOS, wValue, "NOT AN ADONIX_DATE AAAMMJJ");
			this.client.addLogicalErrorMess(this, "callFormater", this.getAdxId(), wMess);
			return wValue + " ???";
		}
		return this.callFormater(wValue);
	},
	initLocalFormatAndSep: function(aLocalFormatAndSep) {
		this.localFormatAndSep = aLocalFormatAndSep;
		if (aLocalFormatAndSep > 0) {
			var wKindFormat = aLocalFormatAndSep / 10;
			if (wKindFormat == 0) {
				this.localFormat = FORMAT_LOCAL_MMJJSSAA;
			} else if (wKindFormat == 1) {
				this.localFormat = FORMAT_LOCAL_JJMMSSAA;
			} else if (wKindFormat == 2) {
				this.localFormat = FORMAT_LOCAL_SSAAMMJJ;
			}
			var wKindSep = aLocalFormatAndSep % 10;
			if (wKindSep == 1) {
				this.localSep = SEP_SLASH;
			} else if (wKindSep == 2) {
				this.localSep = SEP_TIRET;
			}
		}
	},
	initPivotDate: function(aPivotDate) {
		this.pivotDate = aPivotDate;
		if (aPivotDate > 0) {
			this.pivotCentury = aPivotDate / 100;
			this.pivotYear = aPivotDate % 100;
		}
	},
	isYearLessPivotYear: function(aYear) {
		try {
			return parseInt(aYear, 10) < this.pivotYear;
		} catch (e) {
			return false;
		}
	},
	setServerResu: function(resu) {
		if (resu != null && CStructResu.DATE_ZERO === resu.value) {
			resu = null;
		}
		CAdapiVariable.prototype.setServerResu.call(this,resu);
	},
	unFormatData: function(aValue) {
		if (!this.mustBeFormated) {
			return aValue;
		}
		if (aValue == null) {
			return null;
		}
		if (aValue.length == 0) {
			return aValue;
		}
		aValue = this.callUnFormater(aValue);
		if (CStructResu.DATE_ZERO === aValue) {
			aValue = "";
		}
		return aValue;
	},
	unformatHimself: function(aValue) {
		var wCentury = "";
		var wYear = "";
		var wMonth = "";
		var wDay = "";
		var wValue = "";
		if (this.formatDate == FORMAT_JJMMAA) {
			// jj/mm/aa
			if (this.localFormat == FORMAT_LOCAL_JJMMSSAA) {
				wDay = aValue.substring(0, 2);
				wMonth = aValue.substring(3, 5);
				wYear = aValue.substring(6);
			} else {
				// mm/jj/aa
				wMonth = aValue.substring(0, 2);
				wDay = aValue.substring(3, 5);
				wYear = aValue.substring(6);
			}
		} else if (this.formatDate == FORMAT_JJMMSSAA) {
			// jj/mm/ssaa
			if (this.localFormat == FORMAT_LOCAL_JJMMSSAA) {
				wDay = aValue.substring(0, 2);
				wMonth = aValue.substring(3, 5);
				wCentury = aValue.substring(6, 8);
				wYear = aValue.substring(8);
			} else {
				// mm/jj/ssaa
				wMonth = aValue.substring(0, 2);
				wDay = aValue.substring(3, 5);
				wCentury = aValue.substring(6, 8);
				wYear = aValue.substring(8);
			}
		} else if (this.formatDate == FORMAT_JJMM) {
			if (this.localFormat == FORMAT_LOCAL_JJMMSSAA) {
				// jj/mm
				wDay = aValue.substring(0, 2);
				wMonth = aValue.substring(3, 5);
			} else {
				// mm/jj
				wMonth = aValue.substring(0, 2);
				wDay = aValue.substring(3, 5);
			}
		} else if (this.formatDate == FORMAT_MMAA) {
			wDay = "01";
			wMonth = aValue.substring(0, 2);
			wYear = aValue.substring(3, 5);
		} else if (this.formatDate == FORMAT_MMSSAA) {
			wDay = "01";
			wMonth = aValue.substring(0, 2);
			wCentury = aValue.substring(3, 5);
			wYear = aValue.substring(5);
		}
		if (wYear.length == 0) {
			if (this.browserValue.valueLength == 8) {
				var wInitialValue = this.browserValue.value;
				wCentury = wInitialValue.substring(0, 2);
				wYear = wInitialValue.substring(2, 4);
			} else {
				var wS = new Date().getFullYear().toString();
				wCentury = wS.substring(0, 2);
				wYear = wS.substring(2, 4);
			}
		}
		if (wCentury.length == 0) {
			if (isYearLessPivotYear(wYear)) {
				wCentury = (this.pivotCentury + 1).toString();
			} else {
				wCentury = this.pivotCentury.toString();
			}
		}
		wValue += wCentury + wYear + wMonth + wDay;
		if (wValue.length == 0) {
			wValue += aValue;
		}
		return wValue;
	}
});
