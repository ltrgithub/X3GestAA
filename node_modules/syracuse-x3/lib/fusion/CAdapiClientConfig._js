"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CAdonixConfig = function() {};

/**
 * Collection de param�tres de configuration d'un client Adapi.
 * <p>
 * Cette collection est constitu� avant l'ouverture. Certain des param�tres
 * contenus sont mis � jour pendant la dur�e de vie du client.
 * </p>
 * <p>
 * Evolution majeur en 140: la classe "CAdapiConfig" devient une d�riv�e de la
 * classe "CAdonixConfig".
 *
 * @author Adonix Grenoble
 * @version 140_003
 */
var CONNECTNUM_KEY = "connection.number";
var DATE_FORMAT_SERVER_KEY = "date.format.server";
var FORMATER_KIND_JAVA = "JAVA";
var FORMATER_VON_KEY = "formater.von";
var PARAM_xCONNECTNUM = "xCONNECTNUM";
var serialVersionUID = "3257003276233946417"; // too long for a JS number!
var SERV_PORT_KEY = "adapi.server.port";
var TRACE_CANAL_ADAPI_LEVEL_KEY = "trace.canal.adapi.level";
var TRACE_CANAL_ADAPI_NAME_KEY = "trace.canal.adapi.name";
var TRACE_CANAL_ADAPI_ON_KEY = "trace.canal.adapi.on";
var TRACE_MODULE_BUTTONS_KEY = "trace.module.buttons";
var TRACE_MODULE_FACTORY_KEY = "trace.module.factory";
var TRACE_MODULE_FORMAT_KEY = "trace.module.format";
var TRACE_MODULE_LEFTLIST_KEY = "trace.module.leftlist";
var TRACE_MODULE_MODIFIER_KEY = "trace.module.modifier";
var TRACE_MODULE_PROTOCOLE_KEY = "trace.module.protocol";
var TRACE_MODULE_RAZ_KEY = "trace.module.raz";
var URL_SERVER_BASE_KEY = "url.server.base";
var URL_SERVER_BOB_KEY = "url.server.blob";
var URL_SERVER_REQUEST_KEY = "url.server.request";
var USERHOMEVIRTUALPATH = "webserver.virtualpath.userhome";
var VIRTUALPATHPAGES = "webserver.virtualpath.pages";
var X3SERVER_LEVEL_KEY = "x3server.level";
var X3SERVER_VERSION_KEY = "adonix.version";
var SYRA_PREFS_THOUSANDSEP = "thousandsSep";
var SYRA_PREFS_DECIMALSEP = "decimalSep";
var SYRA_PREFS_DATEORDER = "dateOrder";
var SYRA_PREFS_DATESEP = "dateSep";
var SYRA_PREFS_TIMESEP = "timeSep";
var UI_1_STIME = "STime";
var LIB_METHOD_OPENTRACE = "openTrace";
var TRACER_MODULE_BUTTONS = "btn";
var TRACER_MODULE_FACTORY = "fac";
var TRACER_MODULE_FORMAT = "fmt";
var TRACER_MODULE_LEFTLIST = "lst";
var TRACER_MODULE_MODIFIER = "mod";
var TRACER_MODULE_RAZ = "raz";

var CAdapiClientConfig = helpers.defineClass(function() {
	CAdonixConfig.call(this, aTracer, aParams);
	this.serverDebugActive = false;
	this.serverLongWorkActive = false;
	this.syraPreferences = null;
	initDefaultConfig();
}, CAdonixConfig, {
	buildaAdxCtxParams: function() {
		var wSB = new StringBuilder(250);
		CStringFacilities.addInStringParams(wSB, extractSubKey(ADONIX_HOST_KEY), getStrParam(ADONIX_HOST_KEY));
		CStringFacilities.addInStringParams(wSB, extractSubKey(ADONIX_PORT_KEY), getStrParam(ADONIX_PORT_KEY));
		wSB.append(TODO_SUPER.buildaAdxCtxParams());
		return wSB.toString();
	},
	fusionGetPrefs: function() {
		return this.syraPreferences;
	},
	fusionIsSameCtx: function(syraPrefs) {
		var syraCfg = new CAdapiClientConfig(CTracerNull.instance, new CConfigBase());
		syraCfg.fusionSetFormaterPrefs(syraPrefs);

		if (!get(UI_1_STHOUSAND).equals(syraCfg.get(UI_1_STHOUSAND))) {
			return false;
		}
		if (!get(UI_1_SEPDECIMAL).equals(syraCfg.get(UI_1_SEPDECIMAL))) {
			return false;
		}
		if (!get(UI_1_SEPDATE).equals(syraCfg.get(UI_1_SEPDATE))) {
			return false;
		}
		if (!get(UI_IDATE).equals(syraCfg.get(UI_IDATE))) {
			return false;
		}
		return true;
	},
	fusionPrefAdd: function(syraPrefs, syraId, cfgId, def) {
		var s = syraPrefs.optString(syraId);
		if (s.isEmpty()) {
			s = def;
			syraPrefs.put(syraId, s);
		}
		if (SYRA_PREFS_DATEORDER.equals(syraId)) {
			// 0	Month-Day-Year - 1	Day-Month-Year - 2	Year-Month-Day
			s.toLowerCase();
			if (s.charAt(0) == 'd') {
				s = "1";
			} else if (s.charAt(0) == 'm') {
				s = "0";
			} else if (s.charAt(0) == 'y') {
				s = "2";
			} else {
				s = "0";
			}
		}
		setParam(cfgId, s);
	},
	fusionSetFormaterPrefs: function(syraPrefs) {
		this.syraPreferences = syraPrefs == null ? new JSONObject() : syraPrefs;
		fusionPrefAdd(syraPrefs, SYRA_PREFS_DATEORDER, UI_IDATE, "mdy");
		fusionPrefAdd(syraPrefs, SYRA_PREFS_DATESEP, UI_1_SEPDATE, "/");
		fusionPrefAdd(syraPrefs, SYRA_PREFS_DECIMALSEP, UI_1_SEPDECIMAL, ".");
		fusionPrefAdd(syraPrefs, SYRA_PREFS_THOUSANDSEP, UI_1_STHOUSAND, " ");
		fusionPrefAdd(syraPrefs, SYRA_PREFS_TIMESEP, UI_1_STIME, ":");
		setParam(FORMATER_VON_KEY, ON);
	},
	getFormaterKind: function() {
		return IFormater.LABEL_FORMATER_JAVA;

	},
	getFormaterVon: function() {
		return getBoolParam(FORMATER_VON_KEY);
	},
	getRequestServerUrl: function() {
		return getParam(URL_SERVER_REQUEST_KEY);
	},
	getRequestTimeOut: function() {
		var wTimeOut = this.getLongParam(CCommConfig.TIMEOUT_REPLY_KEY);
		if (isServerLongWorkActive()) {
			wTimeOut += 3600009; // 3 600 000; 1 heure
		}
		if (isServerDebugActive()) {
			wTimeOut += 3600000; // 3 600 000; 1 heure
		}
		return wTimeOut;
	},
	getSequenceTimeOut: function() {
		var wTimeOut = this.getLongParam(CCommConfig.TIMEOUT_SEQUENCE_KEY);
		if (isServerLongWorkActive()) {
			wTimeOut += 7200009; // 7 200 000; 2 heures
		}
		if (isServerDebugActive()) {
			wTimeOut += 7200000; // 7 200 000; 2 heures
		}
		return wTimeOut;
	},
	getServerDateFormat: function() {
		var wFormat = getStrParam(DATE_FORMAT_SERVER_KEY);

		return wFormat != null ? wFormat : CAdapiEntity.EMPTY;
	},
	getSolutionFamily: function() {
		return getStrParam(X3SERVER_VERSION_KEY);
	},
	getUrlServerBase: function() {
		var wUrl = getParam(URL_SERVER_BASE_KEY);
		if (wUrl == null) {
			wUrl = this.requestServerUrl;
			if (wUrl != null) {
				var wPos = wUrl.lastIndexOf('/');
				if (wPos > -1) {
					wUrl = wUrl.substring(0, wPos);
				}
			} else {
				wUrl = "";
			}
			this.setParam(URL_SERVER_BASE_KEY, wUrl);
		}
		return wUrl;
	},
	/* TODO: fix overload
	getUrlServerBase: function(aSvcId) {
		var wSB = new StringBuilder();

		wSB.append(this.urlServerBase);
		wSB.append('/');
		wSB.append(aSvcId);
		wSB.append('?');
		wSB.append(PARAM_xCONNECTNUM);
		wSB.append('=');
		wSB.append(getParam(CONNECTNUM_KEY));

		return wSB.toString();
	},
	*/
	getUrlServerBlob: function() {
		var wUrl = getParam(URL_SERVER_BOB_KEY);
		if (wUrl == null) {
			wUrl = this.getUrlServerBase(CAdapiVariableBlob.SVC_BLOB_ID);
			this.setParam(URL_SERVER_BOB_KEY, wUrl == null ? "" : wUrl);
			if (wUrl == null) {
				wUrl = "";
			}
			this.setParam(URL_SERVER_BOB_KEY, wUrl);
		}
		return wUrl;
	},
	getX3ServerLevel: function() {
		return getStrParam(X3SERVER_LEVEL_KEY);
	},
	initDefaultConfig: function() {
		TODO_SUPER.initDefaultConfig();
		if (!isParamExists(SESSION_WEIGHT_KEY)) {
			this.setParam(SESSION_WEIGHT_KEY, CAdonixClient.SESSION_NATIVE_PRIMARY);
		}
		setX3ServerLevel("140_xxx");
	},
	isFormaterJavaEnabled: function() {
		return FORMATER_KIND_JAVA.equalsIgnoreCase(getParam(this.formaterKind));
	},
	isParamBoolean: function(aParamKey) {
		return aParamKey.equals(DEBUG_ON) || aParamKey.equals(TRACE_CANAL_ADAPI_ON_KEY) || aParamKey.equals(ADONIX_VIA_INTERNET_ON);
	},
	isParamExists: function(aParamKey) {
		return containsKey(aParamKey);
	},
	isParamInteger: function(aParamKey) {
		return aParamKey.equals(SERV_PORT_KEY) || aParamKey.equals(ADONIX_PORT_KEY) || aParamKey.equals(TRACE_CANAL_ADAPI_LEVEL_KEY) || aParamKey.equals(SESSION_WEIGHT_KEY) || aParamKey.equals(DATE_FORMAT_KEY) || aParamKey.equals(DATE_PIVOT_KEY) || aParamKey.equals(SESSION_WEIGHT_KEY);
	},
	isParamLong: function(aParamKey) {
		return aParamKey.equals(TIMEOUT_REPLY_KEY) || aParamKey.equals(TIMEOUT_SEQUENCE_KEY);
	},
	isParamString: function(aParamKey) {
		return !isParamBoolean(aParamKey) && !isParamInteger(aParamKey) && !isParamLong(aParamKey);
	},
	isServerDebugActive: function() {
		return this.serverDebugActive;
	},
	isServerLongWorkActive: function() {
		return this.serverLongWorkActive;
	},
	openTrace: function(aTraceCli) {
		if (!getBoolParam(TRACE_CANAL_ADAPI_ON_KEY)) {
			return CTracerNull.instance;
		}
		var wCanalName = getStrParam(TRACE_CANAL_ADAPI_NAME_KEY);

		if (wCanalName == null) {
			wCanalName = "ADAPI";
		}
		aTraceCli.setModuleFilter(CConnClient.TRACER_MODULE_NODE, getBoolParam(TRACE_MODULE_PROTOCOLE_KEY));
		aTraceCli.setModuleFilter(TRACER_MODULE_BUTTONS, getBoolParam(TRACE_MODULE_BUTTONS_KEY));
		aTraceCli.setModuleFilter(TRACER_MODULE_FACTORY, getBoolParam(TRACE_MODULE_FACTORY_KEY));
		aTraceCli.setModuleFilter(TRACER_MODULE_FORMAT, getBoolParam(TRACE_MODULE_FORMAT_KEY));
		aTraceCli.setModuleFilter(TRACER_MODULE_LEFTLIST, getBoolParam(TRACE_MODULE_LEFTLIST_KEY));
		aTraceCli.setModuleFilter(TRACER_MODULE_RAZ, getBoolParam(TRACE_MODULE_RAZ_KEY));
		aTraceCli.setModuleFilter(TRACER_MODULE_MODIFIER, getBoolParam(TRACE_MODULE_MODIFIER_KEY));
		if (aTraceCli.traceLevelFilter(ITracer.LEVEL_CALLS)) {
			var wTB = aTraceCli.popTraceBuffer();
			wTB.appendMethodName(LIB_METHOD_OPENTRACE);
			wTB.appendDescr("ClientName", aTraceCli.clientName);
			wTB.appendDescr("wCanalName", wCanalName);
			wTB.appendDescr(TRACE_MODULE_PROTOCOLE_KEY, CConnClient.TRACER_MODULE_NODE, String.valueOf(aTraceCli.traceModuleFilter(CConnClient.TRACER_MODULE_NODE)));
			wTB.appendDescr(TRACE_MODULE_BUTTONS_KEY, TRACER_MODULE_BUTTONS, String.valueOf(aTraceCli.traceModuleFilter(TRACER_MODULE_BUTTONS)));
			wTB.appendDescr(TRACE_MODULE_FACTORY_KEY, TRACER_MODULE_FACTORY, String.valueOf(aTraceCli.traceModuleFilter(TRACER_MODULE_FACTORY)));
			wTB.appendDescr(TRACE_MODULE_FORMAT_KEY, TRACER_MODULE_FORMAT, String.valueOf(aTraceCli.traceModuleFilter(TRACER_MODULE_FORMAT)));
			wTB.appendDescr(TRACE_MODULE_LEFTLIST_KEY, TRACER_MODULE_LEFTLIST, String.valueOf(aTraceCli.traceModuleFilter(TRACER_MODULE_LEFTLIST)));
			wTB.appendDescr(TRACE_MODULE_RAZ_KEY, TRACER_MODULE_RAZ, String.valueOf(aTraceCli.traceModuleFilter(TRACER_MODULE_RAZ)));
			wTB.appendDescr(TRACE_MODULE_MODIFIER_KEY, TRACER_MODULE_MODIFIER, String.valueOf(aTraceCli.traceModuleFilter(TRACER_MODULE_MODIFIER)));
			aTraceCli.trace(CAdapiClient.class, ITracer.LEVEL_CALLS, wTB);
			aTraceCli.pushTraceBuffer(wTB);
		}
		var wNbChanels = aTraceCli.countChanels(wCanalName);
		if (wNbChanels > 0) {
			var wSuffix = wNbChanels + 1;
			wCanalName = CTraceCliChanel.buildCanalName(wCanalName, wSuffix);
		}
		var wTraceCanalOn = getStrParam(TRACE_CANAL_ADAPI_ON_KEY);
		var wTraceOn = wTraceCanalOn.equals(CTraceCli.TRACE_ON);
		var wLevel = getIntParam(TRACE_CANAL_ADAPI_LEVEL_KEY);
		if (aTraceCli.traceLevelFilter(ITracer.LEVEL_CALLS)) {
			var wTB = aTraceCli.popTraceBuffer();
			wTB.appendMethodName("openTrace");
			wTB.appendDescr("CanalName", wCanalName);
			wTB.appendDescr("TraceOn", wTraceOn);
			wTB.appendDescr("Level", wLevel);
			aTraceCli.trace(CAdapiClient.class, ITracer.LEVEL_CALLS, wTB);
			aTraceCli.pushTraceBuffer(wTB);
		}
		var wNewTracer = aTraceCli.newChanel(wTraceOn, wCanalName, wLevel);
		if (wNewTracer.traceLevelFilter(ITracer.LEVEL_CALLS)) {
			var wTB = wNewTracer.popTraceBuffer();
			wTB.appendMethodName("openTrace");
			wTB.appendDescr("TraceCli", aTraceCli);
			wNewTracer.trace(CAdapiClient.class, ITracer.LEVEL_CALLS, wTB);
			wNewTracer.pushTraceBuffer(wTB);
		}
		return wNewTracer;
	},
	setParam: function(aParamKey, aValue) {
		if (testParamInteger(aParamKey)) {
			return TODO_SUPER.setParam(aParamKey, aValue);
		} else {
			return null;
		}
	},
	setServerDateFormat: function(aFormat) {
		return this.setParam(DATE_FORMAT_SERVER_KEY, aFormat);
	},
	setX3ServerLevel: function(aLevel) {
		this.setParam(X3SERVER_LEVEL_KEY, aLevel);
	},
	switchTracer: function(aTracer) {
		setTracer(aTracer);
	},
	testParamBoolean: function(aParamKey) {
		var wTest = isParamBoolean(aParamKey);
		return wTest;
	},
	testParamInteger: function(aParamKey) {
		var wTest = isParamInteger(aParamKey);
		return wTest;
	},
	testParamLong: function(aParamKey) {
		var wTest = isParamLong(aParamKey);
		return wTest;
	},
	toString: function() {
		return toStringDescr();
	},
	toStringDescr: function() {
		var wSB = new StringBuilder(256);
		wSB.append(TODO_SUPER.toStringDescr());
		CStringFacilities.addInStringDescr(wSB, "ConfigHashCode", hashCode());
		return wSB.toString();
	}
});