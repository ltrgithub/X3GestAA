"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CAdapiEntity = require('syracuse-x3/lib/fusion/CAdapiEntity').CAdapiEntity;
var CAdapiLeftList = require('syracuse-x3/lib/fusion/CAdapiLeftList').CAdapiLeftList;
var CAdapiListOfLocalMenus = require('syracuse-x3/lib/fusion/CAdapiListOfLocalMenusFactory').CAdapiListOfLocalMenus;
var CAdapiListOfLocalMenusFactory = require('syracuse-x3/lib/fusion/CAdapiListOfLocalMenusFactory').CAdapiListOfLocalMenusFactory;
var CAdapiListOfScreens = require('syracuse-x3/lib/fusion/CAdapiListOfScreens').CAdapiListOfScreens;
var CAdapiListOfDataSrcs = require('syracuse-x3/lib/fusion/CAdapiListOfDataSrcs').CAdapiListOfDataSrcs;
var CAdapiListOfDataSrcsFactory = require('syracuse-x3/lib/fusion/CAdapiListOfDataSrcsFactory').CAdapiListOfDataSrcsFactory;
var CAdapiListOfLeftLists = require('syracuse-x3/lib/fusion/CAdapiListOfLeftLists').CAdapiListOfLeftLists;
var CAdapiWindow = require('syracuse-x3/lib/fusion/CAdapiWindow').CAdapiWindow;
var CAdapiScreen = require('syracuse-x3/lib/fusion/CAdapiScreen').CAdapiScreen;
var CAdapiStackedWindow = require('syracuse-x3/lib/fusion/CAdapiStackedWindow').CAdapiStackedWindow;
var CAdapiListOfLeftListsFactory = require('syracuse-x3/lib/fusion/CAdapiListOfLeftListsFactory').CAdapiListOfLeftListsFactory;

CAdapiListOfLeftListsFactory
function instanciate(windowDescription) {
	var windowNode = windowDescription;
	var windowType = windowNode.$.TYF;	// type de fenetre adonix : girl=1, own=2 (modal), comment=3 (fenetre sans bouton), dialogue=4
	var windowModel = windowNode.$.WTY;
	var nbLignes = windowNode.$.NLI;	// nombre de ligne du premier ecran
	var nbColonnes = windowNode.$.NCO;	// nombre de colonne du premier ecran
	return new CAdapiWindow(windowModel, windowType, nbLignes, nbColonnes);
}

var CAdapiStackedWindow = exports.CAdapiStackedWindow = helpers.defineClass(function(aAdapiClient, aWindowId, aFunctionId, aDescr, aStamp, aEnityIndexBaseOne) {
	CAdapiEntity.call(this, aAdapiClient, aWindowId, aEnityIndexBaseOne, 'WINDOW');
	this.adapiStatusBar = null;
	this.opened = false;
	this.adapiWindow = null;

	this.menuList = null;
	this.ndOWinComplementDescr = null;
	// Identifiant Serveur de la DataSource "Liste Gauche" standard
	this.primaryLeftListId = null;
	this.screenToShow = -1;
	this.timeStamp = "";
	this.stackLevel = -1;

	// nom de la fonction ayant ouvert la fen�tre
	this.functionId = aFunctionId;
	this.setStamp(aStamp);
	this.localIndex = aEnityIndexBaseOne - 1;
	// Table des menus locaux associees au requester
	this.localMenus = new CAdapiListOfLocalMenus();
	this.adapiScreens = new CAdapiListOfScreens(this);
	this.listOfDataSrcs = new CAdapiListOfDataSrcs(this);
	this.listOfLeftLists = new CAdapiListOfLeftLists(this);
	this.descrDom = aDescr;
	if (aWindowId != "&ROOT") {
		//this.loadDesrDom(aWindowId, false);
	}
	if (this.hasDescrDom()) {
		var timestamp = this.descrDom.$.TIM;
		if (timestamp == null || timestamp !== aStamp) {
			//reload description
			this.loadDesrDom(aWindowId, true);
			aStamp = this.descrDom.$.TIM;
		}
		this.adapiWindow = instanciate(this.descrDom);
		this.initLocalMenus();
		this.initAdapiScreens();
		this.initLeftLists();
	}
}, CAdapiEntity, {
	addStatusIconDef: function(instance, aNumText, aTxt, aImgId, aActionId) {
		if (this.adapiStatusBar == null) {
			this.adapiStatusBar = new AdapiStatusBar();
		}
		this.adapiStatusBar.addIconDef(aNumText, aTxt, aImgId, aActionId);
	},
	finLocalMenu: function(aLocalMenuId) {
		return this.localMenus[aLocalMenuId];
	},
	getAdapiObservableId: function() {
		return this.getAdxId();
	},
	getAdxId: function() {
		return this.entityIdxAlpha;
	},
	hasDescrDom: function() {
		return this.descrDom != null;
	},
	initAdapiScreens: function() {
		CAdapiStackedWindow.newScreens(this.adapiClient, this, this.descrDom, this.adapiScreens, this.listOfDataSrcs);
	},
	initLeftLists: function() {
		CAdapiListOfLeftListsFactory.instanciateLeftLists(this, this.adapiScreens, this.descrDom, this.listOfLeftLists);
	},
	initLocalMenus: function() {
		CAdapiListOfLocalMenusFactory.instanciateLocalMenus(this, this.descrDom, this.localMenus);
	},
	isOpened: function() {
		return this.opened;
	},
	listenException: function(e) {
		return false;
	},
	listenSegment: function(aSegment) {
		return false;
	},
	loadDesrDom: function(aWindowId, forced) {
		/* TODO BRJOU
		var connectionLang = this.adapiClient.adonixContext.language;
		var folder = this.adapiClient.adonixContext.x3Folder;
		var subPathFile = folder + "/GEN/" + connectionLang + "/FENS/" + aWindowId;
		this.descrDom = ServiceAdapi.resourceManager.getFullPathDom(subPathFile, ".xml", this.adapiClient.httpX3ServerUrl, forced, this.adapiClient.adonixContext.x3ServerCnxHostname);
*/
	},
	razModification: function() {
		CAdapiEntity.prototype.razModification.call(this);
	},
	setMenuList: function(menuList) {
		this.menuList = menuList;
	},
	setNDOWinComplementDescr: function(aComplementDescr) {
		this.ndOWinComplementDescr = aComplementDescr;
		if (this.adapiWindow != null && aComplementDescr.indexOf(';') > -1) {
			var wST = new StringTokenizer(aComplementDescr, ";");
			if (wST.countTokens() >= 3) {
				wST.nextToken(); // titre
				this.adapiWindow.setNbLignes(wST.nextToken()); // ligne
				this.adapiWindow.setNbColonnes(wST.nextToken()); // colonne
			}
		}
	},
	setOpened: function(opened) {
		this.opened = opened;
		// En dernier
		this.setJsonType('FUNC'); // catch close ou open fonction
	},
	setScreenToShow: function(aScreenToShow) {
		this.screenToShow = aScreenToShow;
	},
	setStackLevel: function(stackLevel) {
		this.stackLevel = stackLevel;

	},
	setStamp: function(aStamp) {
		try {
			this.timeStamp = CAdapi.timeStampFormats(aStamp, this.adapiClient.formater.dateOrder);
		} catch (e) {
			this.timeStamp = "";
		}
	},
	toJSON: function() {
		// dump only for open of close function, the dump of entity is done by payloadWin objects
		var winO = {};
		if (this.isOpened()) {
			winO.name = this.id;
			winO.scrnNum = this.screenToShow >= 1 ? this.screenToShow : 1;
			winO.stamp = this.timeStamp;
			winO.extend = this.ndOWinComplementDescr;
			winO.func = this.functionId;
			winO.type = this.adapiWindow.type;
			// check if the left list have change fmt and/or title to add appendModel
			var extModel = null;
			for (var item in this.listOfLeftLists) {
				if (item instanceof CAdapiLeftList) {
					var list = item;
					if (list.hasColumnTitleModified() || list.isColomnFormatChange()) {
						extModel = list;
					}
				}
			}
			if (extModel != null) {
				// Extension à apporter au modèle de données (càd au protototype généré). Utilisé notamment sur l'ouverture des fenêtres de type Choose,
				//  où la description des colonnes de la liste de sélection est fournie dynamiquement par le back-office.
				//  Le contenu de cet objet est donc variable; il doit simplement respecter la structure et la codification du modèle de données.
				// L'exemple ci-dessous illustre ce qui est attendu dans le cas de l'extention du modèle pour une fenêtre de type Choose.
				/**
				 * "bA": { "$item": { "$": { "bA1" : { "tit": "Devis",
				 * "fmt": "K:30X" }, "bA2" : { "tit": "Client", "fmt":
				 * "K:10X" } } }
				 */
				// create appendModel Node
				var appendModel = {};
				for (var item in extModel.entrySup.vars) {
					var itemJs = {};
					itemJs.tit = item.title;
					itemJs.fmt = item.format != null ? item.format.string : "";
					appendModel[item.getJsonKey()] = itemJs;
				}
				var dolaritem = {};
				dolaritem.$properties = appendModel;
				var leftListApp = {};
				leftListApp.$item = dolaritem;
				var leftListId = {};
				leftListId[extModel.getJsonKey()] = leftListApp;
				winO.appendModel = leftListId;
			}
			winO.mnu = this.menuList == null ? [] : this.menuList.toJSON();
		}
		return winO;
	},
	traverseAll: function(aTraverser) {
		return this.adapiScreens.traverseAll(aTraverser);
	},
	traverseChilds: function(aTraverser) {
		return this.adapiScreens.traverseChilds(aTraverser);
	},
	traverseSettable: function(aStructIst, aAdapiSetter) {
		return this.adapiScreens.traverseSettable(aStructIst, aAdapiSetter);
	},
});

CAdapiStackedWindow.newScreens = function(adapiClient, adapiRequesterWindow, windowDescription, adapiScreens, listOfDataSrcs) {
	var screensNodes = windowDescription.DATASOURCES.SCRN;
	var max = Array.isArray(screensNodes) ? screensNodes.length : 1;
	var screenNode;
	var adapiScreen;
	// String wValue;
	var i = 0;
	while (i < max) {
		screenNode = max === 1 ? screensNodes : screensNodes[i];
		var id = screenNode.$.NAM;
		adapiScreen = new CAdapiScreen(adapiRequesterWindow, i + 1, id);
		adapiScreens.pushEntity(id, adapiScreen);
		CAdapiListOfDataSrcsFactory.newScreenDataSrcs(adapiRequesterWindow, screenNode, adapiScreen, listOfDataSrcs);
		i++;
	}
}