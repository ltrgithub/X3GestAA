"use strict";
var helpers = require('syracuse-core/lib/helpers');
var AdapiObservable = function() {};
var CAdonixMessage = function() {};

var AdapiMessageObersable = helpers.defineClass(function(message, client) {
	TODO_SUPER(client);
	this.message = message;
	forceChange();
}, AdapiObservable, {
	getTypeJsonNode: function() {
		return ETypeJsonNode.TARGET; // mess superviseur/X3
	},
	toJson: function() {
		var target = new JSONObject();
		target.put("type", "box");
		var box = new JSONObject();

		box.put("type", this.message.getTyp());
		box.put("def", this.message.getDefBtn());
		// box.put("to",get());
		box.put("tit", this.message.getTitle());
		var li = new JSONArray();
		li.put(this.message.getMess());
		box.put("li", li);
		box.put("to", this.message.getUserMaxSleep());
		target.put("box", box);
		return target;
	}

});

var SEPARATOR = "^";

var CAdapiMessage = helpers.defineClass(function(aType, clientObs, aMessage, notify) {
	TODO_SUPER(clientObs.getTracer(), aType, aMessage);
	this.action = -1;
	this.webServerLocicalMess = null;
	this.clientObj = null;
	if (clientObs != null && notify) {
		new AdapiMessageObersable(this, clientObs);
	}
}, CAdonixMessage, {
	// TODO - Non utilisé - private AdapiMessageObersable observableMessage = null;
	// TODO - Non utilisé - private String this.lib = null;
	// TODO - Non utilisé - private String this.progressMax = null;
	// TODO - Non utilisé - private String this.progressValue = null;
	// TODO - Non utilisé - private String this.vLC_LibNum = null;
	// TODO - Non utilisé - private String this.vLC_LibSuite = null;
	// TODO - Non utilisé - private String this.vLC_LibText = null;
	// TODO - Non utilisé - private String this.vLC_ValNum = null;
	// TODO - Non utilisé - private String this.vLC_ValText = null;
/* TODO overload
	public CAdapiMessage(aType, aAction, aMessage, aTitre, aDefBtn, aSleep, aChx, clientObs) {
		TODO_SUPER(clientObs.getTracer(), aType, aMessage, aTitre, aDefBtn, aSleep, aChx);
		this.action = aAction;
		if (aType == CAdapi.AFF_SYNCHRONE_TYPE_VALIDCAR && this.action == CAdapi.AFF_SYNCHRONE_ACTION_OPEN) {
			setVlcLibs(aMessage, aTitre);
		} else if (aType == CAdapi.AFF_SYNCHRONE_TYPE_VALIDCAR && this.action == CAdapi.AFF_SYNCHRONE_ACTION_MODIFY) {
			setVlcValues(aMessage, aTitre);
		} else if (aType == CAdapi.AFF_SYNCHRONE_TYPE_PROGRESS && this.action == CAdapi.AFF_SYNCHRONE_ACTION_OPEN) {
			setProgressLibs(aTitre);
		} else if (aType == CAdapi.AFF_SYNCHRONE_TYPE_PROGRESS && this.action == CAdapi.AFF_SYNCHRONE_ACTION_MODIFY) {
			setProgressValues(aMessage);
		}
		if (clientObs != null) {
			new AdapiMessageObersable(this, clientObs);
		}
	}*/

	addWebServerLocicalMess: function(aListOfLocicalMess) {
		if (aListOfLocicalMess != null) {
			if (this.webServerLocicalMess == null) {
				this.webServerLocicalMess = new ArrayList();
			}
			this.webServerLocicalMess.addAll(aListOfLocicalMess);
		} else {
			this.tracer.trace(this, "addWebServerLocicalMess", new Exception("ERREUR LISTE DE MESSAGES LOGIQUES NULLE"));
		}
	},
	/* TODO overload
	addWebServerLocicalMess: function(aLocicalMess) {
		if (aLocicalMess != null) {
			if (this.webServerLocicalMess == null) {
				this.webServerLocicalMess = new ArrayList();
			}
			this.webServerLocicalMess.add(aLocicalMess);
		} else {
			this.tracer.trace(this, "addWebServerLocicalMess", new Exception("ERREUR MESSAGE LOGIQUE NUL"));
		}
	},*/
	clone: function() {
		return new CAdapiMessage(getTyp(), this.action, getMess(), this.title, this.btn, this.sleep, this.chx, this.clientObs);
	},
	getListOfWebServerLocicalMess: function() {
		return this.webServerLocicalMess;
	},
	getTypeInString: function() {
		var wLibType = CAdapi.affSynchroneTypeToString(getTyp());
		if (wLibType != null) {
			return wLibType;
		}
		return TODO_SUPER.getTypeInString();
	},
	isAffSynchroneDebug: function() {
		return getTyp() == CAdapi.AFF_SYNCHRONE_TYPE_DEBUGON || getTyp() == CAdapi.AFF_SYNCHRONE_TYPE_DEBUGOFF;
	},
	isErrorMessage: function() {
		return getTyp() == CAdonix.MSG_ERROR;
	},
	isStrongMess: function() {
		var wTypMess = TODO_SUPER.getTyp();
		return wTypMess == CAdonix.MSG_ERROR || wTypMess == CAdonix.MSG_WARNING;
	},
	setProgressLibs: function(aTitre) {
		this.title = aTitre;
	},
	setProgressValues: function(aMessage) {
		var wST = new StringTokenizer(aMessage, SEPARATOR);
		if (wST.countTokens() >= 2) {
			// TODO - Non utilisé - this.progressMax = wST.nextToken();
			// TODO - Non utilisé - this.progressValue = wST.nextToken();
			if (wST.hasMoreTokens()) {
				// TODO - Non utilisé - this.lib = wST.nextToken();
			} else {
				// TODO - Non utilisé - this.lib = EMPTY;
			}
		} else {
			// TODO - Non utilisé - this.lib = LABEL_ERR_NOWMAX;
		}
	},
	setVlcLibs: function(aMessage, aTitre) {
		var wST = new StringTokenizer(aTitre, SEPARATOR);
		if (wST.countTokens() == 3) {
			this.title = wST.nextToken();
			// TODO - Non utilisé - this.lib = wST.nextToken();
			// TODO - Non utilisé - this.vLC_LibSuite = wST.nextToken();
		}

		wST = new StringTokenizer(aMessage, SEPARATOR);
		if (wST.countTokens() == 2) {
			// TODO - Non utilisé - this.vLC_LibText = wST.nextToken();
			// TODO - Non utilisé - this.vLC_LibNum = wST.nextToken();
		}

	},
	setVlcValues: function(aMessage, aTitre) {
		var wST = new StringTokenizer(aMessage, SEPARATOR);
		if (wST.countTokens() == 2) {
			// TODO - Non utilisé - this.vLC_ValText = wST.nextToken();
			// TODO - Non utilisé - this.vLC_ValNum = wST.nextToken();
		}
	},
	traverseChilds: function(aTraverser) {
		var wTraversingState = ITraverser.CONTINUE_TRAVERSING;
		var wLogicalMessage;
		var wMax = this.webServerLocicalMess != null ? this.webServerLocicalMess.size() : 0;
		var wI = 0;
		while (wI < wMax) {
			wLogicalMessage = this.webServerLocicalMess.get(wI);
			wTraversingState = aTraverser.doWhenTraverse(wLogicalMessage, wI);
			if (wTraversingState == ITraverser.STOP_TRAVERSING) {
				return wTraversingState;
			}
			wI++;
		}
		return wTraversingState;
	}
});