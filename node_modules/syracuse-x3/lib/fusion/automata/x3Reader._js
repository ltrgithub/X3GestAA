"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgIst = require('syracuse-x3/lib/fusion/types/CvgIst').CvgIst;
var CvgResu = require('syracuse-x3/lib/fusion/types/CvgResu').CvgResu;
var CvgDecimal = require('syracuse-x3/lib/fusion/types/CvgDecimal').CvgDecimal;
var CvgDate = require('syracuse-x3/lib/fusion/types/CvgDate').CvgDate;

var X3Reader = exports.X3Reader = helpers.defineClass(function(ctx, wnd, data) {
	this.ctx = ctx;
	this.wnd = wnd;
	this.pos = 0;
	this.data = data;
}, null, {
	peek: function() {
		return this.pos < this.data.length ? this.data[this.pos] : -1;
	},
	nextByte: function(lenient) {
		if (!lenient && this.pos > this.data.length - 1) throw new Error("nextByte");
		return this.pos < this.data.length ? this.data[this.pos++] : 0;
	},
	nextShort: function() {
		if (this.pos > this.data.length - 2) throw new Error("nextShort");
		return this.pos < this.data.length - 1 ? (this.data[this.pos++] << 8) | this.data[this.pos++] : 0;
	},
	nextLong: function() {
		if (this.pos > this.data.length - 4) throw new Error("nextLong");
		return this.pos < this.data.length - 3 ? (this.data[this.pos++] << 24) | (this.data[this.pos++] << 16) | //
		(this.data[this.pos++] << 8) | this.data[this.pos++] : 0;
	},
	peekShort: function() {
		var pos = this.pos,
			val = this.nextShort();
		this.pos = pos;
		return val;
	},
	peekLong: function() {
		var pos = this.pos,
			val = this.nextLong();
		this.pos = pos;
		return val;
	},
	nextLongLong: function() {
		return this.pos < this.data.length - 7 ? (this.nextLong() << 32) | this.nextLong() : 0;
	},
	nextIst: function() {
		return this.pos < this.data.length - 5 ? new CvgIst(this.nextLong(), this.nextShort()) : null;
	},
	nextString: function() {
		var len = this.nextShort() - 2; // next short is included in byte count!
		var nchars = this.nextShort();
		var str = this.data.slice(this.pos, this.pos + len).toString('utf8');
		this.pos += len;
		if (str.length < nchars) throw new Error("bad string: expected " + nchars + ", got " + str.length);
		if (str.length > nchars) {
			console.log("!!!! string too long: " + (str.length - nchars) + " extra, ignoring: '" + str.substring(nchars) + "'");
			str = str.substring(0, nchars);
		}
		return str;
	},
	nextBuf: function() {
		var len = this.nextShort();
		//console.log("nextBuf len=" + len + ", pos=" + this.pos + ", data.len=" + this.data.length);
		//console.log(this.data.slice(this.pos));
		var buf = this.data.slice(this.pos, this.pos + len);
		this.pos += len;
		return buf;
	},
	nextLine: function() {
		if (this.pos !== 0) throw new Error("invalid call: pos=" + this.pos);
		var str = this.data.toString('utf8');
		this.pos = this.data.length;
		return str;
	},
	nextProperties: function() {
		var str = this.nextLine();
		return str.split('\n').reduce(function(result, line) {
			if (line) {
				var pair = line.split('=\u0001');
				result[pair[0]] = pair[1];
			}
			return result;
		}, {});
	},
	nextLines: function() {
		var str = this.nextLine();
		if (str[str.length - 1] !== '\n') throw new Error("missing newline");
		return str.substring(0, str.length - 1).split('\n');
	},
	nextExtend: function() {
		// ???
		var len = this.nextLong();
		var data = this.data.slice(this.pos, this.pos + len);
		this.pos += len;
		return data.toString('utf8');
	},
	nextDefs: function() {
		var buf = this.nextBuf();
		//console.log("DEFS: " + buf.toString("hex"));
		var sub = new X3Reader(this.ctx, this.wnd, buf);
		var n = sub.nextByte();
		var defs = [];
		for (var i = 0; i < n; i++) defs.push(sub.nextResu());
		return defs;
	},
	nextBytes: function(len) {
		var buf = this.data.slice(this.pos, this.pos + len);
		this.pos += len;
		return buf;
	},
	nextUnicode: function(len) {
		//console.log("len=" + len)
		// read trailing 0 (and ignore it)
		var bytes = this.nextBytes(2 * (len + 1));
		var s = "";
		for (var i = 0; i < len; i++) s += String.fromCharCode((bytes[2 * i] << 8) | bytes[2 * i + 1]);
		return s;
	},
	nextResu: function() {
		return CvgResu.read(this);
	},
	nextDate: function() {
		var days = (this.nextShort() << 8) + this.nextByte();
		return CvgDate.fromDays(days);
	},
	nextBcd: function() {
		var str = CvgDecimal.fromBytes(this.data, this.pos);
		this.pos += 17;
		return str;
	},
	nextBlob: function() {
		var len = this.nextLong();
		return this.nextBytes(len);
	},
	nextClob: function() {
		return this.nextBlob().toString('utf8');
	},
	ensure: function(_, ctx, len) {
		var missing = this.pos + len - this.data.length;
		if (missing > 0) this.data = Buffer.concat([this.data, ctx.stream.read(_, missing)]);
	},
});