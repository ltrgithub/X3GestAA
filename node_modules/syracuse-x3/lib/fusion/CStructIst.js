"use strict";
var helpers = require('syracuse-core/lib/helpers');

/**
 * "Instance" contenue dans un argument d'un neoud ou Action
 * <p>
 * Une Ist (AdxId) est composé de:
 * <ul>
 * <li>un index de fenêtre (byte),</li>
 * <li>un index d'écran (byte),</li>
 * <li>un index de bloc (byte),</li>
 * <li>un index de champ (byte),</li>
 * <li>un index dans la dimension (short);</li>
 * </ul>
 *
 * @author Adonix Grenoble
 * @version 140_000
 */

function make(aWin, aScreen, aBloc, aField) {
	return (((aWin || 0) & 0xff) << 24) | (((aScreen || 0) & 0xff) << 16) //
	| (((aBloc || 0) & 0xff) << 8) | ((aField || 0) & 0xff);
}

function parse(str) {
	return make(str.charCodeAt(0) - AT, str.charCodeAt(1) - AT, str.charCodeAt(2) - AT, parseInt(str.substring(3), 10));
}

var AT = '@'.charCodeAt(0);

var LEFTLIST_NUM = 34;

var CStructIst = exports.CStructIst = helpers.defineClass(function(ist, idx) {
	if (arguments.length > 2) {
		this.ist = make(arguments[0], arguments[1], arguments[2], arguments[3]);
		this.idx = arguments[4] || 0;
	} else {
		this.ist = typeof vals === 'string' ? parse(ist) : ist;
		this.idx = idx || 0;
	}
}, null, {
	win: {
		get: function() {
			return (this.ist >> 24) & 0xff;
		},
		set: function(val) {
			this.ist = this.ist & 0xff000000 | (val << 24);
		}
	},
	screen: {
		get: function() {
			return (this.ist >> 16) & 0xff;
		}
	},
	bloc: {
		get: function() {
			return (this.ist >> 8) & 0xff;
		}
	},
	field: {
		get: function() {
			return this.ist & 0xff;
		}
	},
	winAlphaId: {
		get: function() {
			return String.fromCharCode(AT + this.win);
		}
	},
	screenAlphaIdFusion: {
		get: function() {
			return String.fromCharCode(AT + this.screen);
		}
	},
	screenAlphaId: {
		get: function() {
			if (this.screen >= 26) return String.fromCharCode(AT + Math.floor(this.screen / 26)) + String.fromCharCode(AT + (this.screen % 26)); 
			return String.fromCharCode(AT + this.screen);
		}
	},
	blocAlphaId: {
		get: function() {
			return String.fromCharCode(AT + this.bloc);
		}
	},
	toString: function() {
		return this.winAlphaId + this.screenAlphaId + this.blocAlphaId + "," + this.idx;
	},
	toStringDescr: function() {
		return this.toString();
	},
	winZeroBase: {
		get: function() {
			return this.win - 2;
		}
	},
	screenZeroBase: {
		get: function() {
			return this.screen - 1;
		}
	},
	blocZeroBase: {
		get: function() {
			return this.bloc - 1;
		}
	},
	fieldZeroBase: {
		get: function() {
			return this.field - 1;
		}
	},
	idxZeroBase: {
		get: function() {
			return this.idx - 1;
		}
	},
	isAllLinesOfBlocIst: function() {
		return this.win != 0 && this.screen != 0 && this.bloc != 0 && this.field == 0 && this.idx == -1;
	},
	isAllLinesOfColumnIst: function() {
		return this.isBaseFieldIst() && this.idx == -1;
	},
	isBaseFieldIst: function() {
		return this.win != 0 && this.screen != 0 && this.bloc != 0 && this.field != 0;
	},
	isBlocIst: function() {
		return this.win != 0 && this.screen != 0 && this.bloc != 0 && this.field == 0 && this.idx == 0;
	},
	isCellIst: function() {
		return this.isFieldIst() && this.idx > 0;
	},
	isColumnIst: function() {
		return this.isBaseFieldIst() && this.idx == 0;
	},
	isFieldIst: function() {
		return this.isBaseFieldIst() && this.idx > -1;
	},
	isLeftListColumnIst: function() {
		return this.isColumnIst() && this.isScreenLeftList();
	},
	isLeftListIst: function() {
		return this.isBlocIst() && this.isScreenLeftList();
	},
	isLineIst: function() {
		return this.win != 0 && this.screen != 0 && this.bloc != 0 && this.field == 0 && this.idx > 0;
	},
	isRecordIst: function() {
		return this.isBlocIst() && this.idx != 0;
	},
	isScreenIst: function() {
		return this.win != 0 && this.screen != 0 && this.bloc == 0 && this.field == 0;
	},
	isScreenLeftList: function() {
		return this.getScreen() == LEFTLIST_NUM;
	},
	isWindowIst: function() {
		return this.win != 0 && this.screen == 0 && this.bloc == 0 && this.field == 0;
	},
});

CStructIst.IST_WIN_ZERO = new CStructIst("A,@,@0");
CStructIst.levelZeroStructIst = new CStructIst(1, 0, 0, 0, 0);