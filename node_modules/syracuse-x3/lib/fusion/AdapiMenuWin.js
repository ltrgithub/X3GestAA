"use strict";
var helpers = require('syracuse-core/lib/helpers');
var AdapiObservable = function() {};

var AdapiWinMenuList = helpers.defineClass(function() {}, null, {
	// Préserve l'ordre d'insertion
	addMenu: function(menu) {
		this.winMenus.put(new Integer(menu.getAdxId()), menu);
	},
	containsMenu: function(menuId) {
		return this.winMenus.containsKey(new Integer(menuId));
	},
	toJson: function() {
		var res = new JSONArray();
		// Dans l'ordre de réception du serveur X3
		for (var menu in this.winMenus.values()) {
			res.put(menu.toJson());
		}
		return res;
	}
});

var AdapiMenuWin = helpers.defineClass(function(client, actionId, flag, label, menuId, rank, adxId, acc, sessMenu) {
	AdapiObservable.call(this, client);
	this.actId = actionId;
	this.label = label;
	this.menuId = menuId;
	this.getAdxId() = adxId;
	this.rank = rank;
	this.keyboardAcc = acc;
	// 3 types - 0 : container - 1: élément - 2: Séparateur
	this.type = label == null || label.isEmpty() ? 2 : (flag & 0x08) >> 3;
	if (sessMenu) {
		// Notification uniquement pour menus sessions
		// Les menus fenêtre sont rattachsé à la fenêtre puis sérialisés dans le toJson de la fenêtre
		// En dernier
		setJsonType('SESSIONMNU');
	}
}, AdapiObservable, {
	toJson: function() {
		var object = new JSONObject();
		object.put('act', this.actId);
		object.put('typ', this.type);
		object.put('acl', this.keyboardAcc);
		if (this.label != null && !this.label.isEmpty()) {
			object.put('txt', this.label);
		}
		object.put('rnk', this.rank);
		object.put('id', this.getAdxId());
		object.put('fid', this.menuId);
		return object;
	},
	toString: function() {
		return toJson().toString();
	}
});