"use strict";
var helpers = require('syracuse-core/lib/helpers');
var AdapiObservable = require('syracuse-x3/lib/fusion/AdapiObservable').AdapiObservable;

var AdapiWinMenuList = exports.AdapiWinMenuList = helpers.defineClass(function() {
	this.winMenus = {};
}, null, {
	// Prefix key with M to preserve insertion order (V8 reorders numeric keys)
	addMenu: function(menu) {
		this.winMenus['M' + menu.adxId] = menu;
	},
	containsMenu: function(menuId) {
		return this.winMenus['M' + menuId] != null;
	},
	toJson: function() {
		var self = this;
		return Object.keys(self.winMenus).map(function(key) {
			return self.winMenus[key].toJson();
		});
	}
});

var AdapiMenuWin = exports.AdapiMenuWin = helpers.defineClass(function(client, actionId, flag, label, menuId, rank, adxId, acc, sessMenu) {
	AdapiObservable.call(this, client);
	this.actId = actionId;
	this.label = label;
	this.menuId = menuId;
	this.adxId = adxId;
	this.rank = rank;
	this.keyboardAcc = acc;
	// 3 types - 0 : container - 1: élément - 2: Séparateur
	this.type = !label ? 2 : (flag & 0x08) >> 3;
	if (sessMenu) {
		// Notification uniquement pour menus sessions
		// Les menus fenêtre sont rattachsé à la fenêtre puis sérialisés dans le toJson de la fenêtre
		// En dernier
		this.setJsonType('SESSIONMNU');
	}
}, AdapiObservable, {
	toJson: function() {
		var object = {};
		object.act = this.actId;
		object.typ = this.type;
		object.acl = this.keyboardAcc;
		if (this.label != null && this.label.length !== 0) {
			object.txt = this.label;
		}
		object.rnk = this.rank;
		object.id = this.adxId;
		object.fid = this.menuId;
		return object;
	},
	toString: function() {
		return JSON.stringify(this.toJson());
	}
});