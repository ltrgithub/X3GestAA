"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CAdapiEntity = function() {};

var ATT_NAM = "NAM";
var TAG_SCRN = "SCRN";
var ATT_NCO = "NCO"; // nombre de colonne du premier �cran
var ATT_NLI = "NLI"; // nombre de ligne du premier �cran
var ATT_TYF = "TYF"; // type de fen�tre adonix : girl=1, own=2 (modal), comment=3 (fen�tre sans bouton), dialogue=4
var ATT_WTY = "WTY";
var TAG_WIND = "WIND";

function instanciate(aWindowDescription) {
	var wWindowNode = CDomFacilities.getNodeByTagName(aWindowDescription, TAG_WIND);
	var wWindowType = CDomFacilities.getAttributValueInt(wWindowNode, ATT_TYF);
	var wWindowModel = CDomFacilities.getAttributValueInt(wWindowNode, ATT_WTY);
	var wNbLignes = CDomFacilities.getAttributValueInt(wWindowNode, ATT_NLI);
	var wNbColonnes = CDomFacilities.getAttributValueInt(wWindowNode, ATT_NCO);
	return new CAdapiWindow(wWindowModel, wWindowType, wNbLignes, wNbColonnes);
}

var CAdapiStackedWindow = helpers.defineClass(function(aAdapiClient, aWindowId, aFunctionId, aStamp, aEnityIndexBaseOne) {
	TODO_SUPER(aAdapiClient, aWindowId, aEnityIndexBaseOne, EntityType.WINDOW);
	this.adapiStatusBar = null;
	this.opened = false;
	this.adapiWindow = null;

	this.descrDom;
	this.menuList = null;
	this.ndOWinComplementDescr = null;
	// Identifiant Serveur de la DataSource "Liste Gauche" standard
	this.primaryLeftListId = null;
	this.screenToShow = -1;
	this.timeStamp = "";
	this.timeStampMilliSec = -1;
	this.stackLevel = -1;

	// nom de la fonction ayant ouvert la fen�tre
	this.functionId = aFunctionId;
	setStamp(aStamp);
	this.localIndexBaseZero = aEnityIndexBaseOne - 1;
	// Table des menus locaux associ�es au requester
	this.localMenus = new CAdapiListOfLocalMenus();
	this.adapiScreens = new CAdapiListOfScreens(this);
	this.listOfDataSrcs = new CAdapiListOfDataSrcs(this);
	this.listOfLeftLists = new CAdapiListOfLeftLists(this);
	if (!CAdapi.WIN_ROOT_ID.equals(aWindowId)) {
		loadDesrDom(aWindowId, false);
	}
	if (hasDescrDom()) {
		var timestamp = this.descrDom.getDocumentElement().getAttribute("TIM");
		if (timestamp == null || !timestamp.equals(aStamp)) {
			//reload description
			loadDesrDom(aWindowId, true);
			aStamp = this.descrDom.getDocumentElement().getAttribute("TIM");
		}
		this.adapiWindow = instanciate(this.descrDom);
		initLocalMenus();
		initAdapiScreens();
		initLeftLists();
	}
}, CAdapiEntity, {
	addStatusIconDef: function(instance, aNumText, aTxt, aImgId, aActionId) {
		if (this.adapiStatusBar == null) {
			this.adapiStatusBar = new AdapiStatusBar();
		}
		this.adapiStatusBar.addIconDef(aNumText, aTxt, aImgId, aActionId);
	},
	finLocalMenu: function(aLocalMenuId) {
		return this.localMenus.get(aLocalMenuId);
	},
	getAdapiObservableId: function() {
		return getAdxId();
	},
	getAdxId: function() {
		return getEntityIndexBaseOneInAlphanumFormat();
	},
	getFunctionId: function() {
		return this.functionId;
	},
	getLocalIndex: function() {
		return this.localIndexBaseZero;
	},
	getLocalIndexInString: function() {
		return String.valueOf(getLocalIndex());
	},
	getNdOWinComplementDescr: function() {
		return this.ndOWinComplementDescr;
	},
	getpAdapiStatusBar: function() {
		return this.adapiStatusBar;
	},
	getScreenToShow: function() {
		return this.screenToShow;
	},
	getStackLevel: function() {
		return this.stackLevel;
	},
	getTimeStampInString: function() {
		return this.timeStamp;
	},
	getTimeStampMilliSec: function() {
		return this.timeStampMilliSec != -1 ? this.timeStampMilliSec : 0;
	},
	getWindowModeleInString: function() {
		if (this.adapiWindow != null) {
			return String.valueOf(this.adapiWindow.getModele());
		} else {
			return "cant get model, this.adapiWindow == null";
		}
	},
	getWindowNbColonnesInString: function() {
		if (this.adapiWindow != null) {
			return String.valueOf(this.adapiWindow.getNbColonnes());
		} else {
			return "cant get NbColonnes, this.adapiWindow == null";
		}
	},
	getWindowNbLignesInString: function() {
		if (this.adapiWindow != null) {
			return String.valueOf(this.adapiWindow.getNbLignes());
		} else {
			return "cant get NbLignes, this.adapiWindow == null";
		}
	},
	getWindowTypeInString: function() {
		if (this.adapiWindow != null) {
			return String.valueOf(this.adapiWindow.getType());
		} else {
			return "cant get type, this.adapiWindow == null";
		}
	},
	hasDescrDom: function() {
		return this.descrDom != null;
	},
	initAdapiScreens: function() {
		newScreens(getTracer(), getAdapiClient(), this, this.descrDom, this.adapiScreens, this.listOfDataSrcs);
	},
	initLeftLists: function() {
		CAdapiListOfLeftListsFactory.instanciateLeftLists(this, this.adapiScreens, this.descrDom, this.listOfLeftLists);
	},
	initLocalMenus: function() {
		CAdapiListOfLocalMenusFactory.instanciateLocalMenus(this, this.descrDom, this.localMenus);
	},
	isOpened: function() {
		return this.opened;
	},
	listenException: function(e) {
		// /Trace
		if (getTracer().traceLevelFilter(ITracer.LEVEL_DEBUG)) {
			var wTB = getTracer().popTraceBuffer();
			wTB.appendMethodName("listenException");

			getTracer().trace(this, "listenException", e);
			getTracer().pushTraceBuffer(wTB);
		}
		// FTrace*/
		return false;
	},
	listenSegment: function(aSegment) {
		// /Trace
		if (getTracer().traceLevelFilter(ITracer.LEVEL_DEBUG)) {
			var wTB = getTracer().popTraceBuffer();
			wTB.appendMethodName("listenSegment");
			// 15w_016 - Fiche 44356 - Dissociation comportement et adxtyp
			aSegment.addDescrFullInTB(wTB, getTracer().getLevel());
			getTracer().trace(this, ITracer.LEVEL_DEBUG, wTB);
			getTracer().pushTraceBuffer(wTB);
		}
		// FTrace*/
		getTracer().trace(this, ITracer.LEVEL_DEBUG, ".doSegment\tbegin");
		return false;
	},
	loadDesrDom: function(aWindowId, forced) {
		var connectionLang = getAdapiClient().getAdonixContext().getLanguage();
		var folder = getAdapiClient().getAdonixContext().getX3Folder();
		var subPathFile = folder + "/GEN/" + connectionLang + "/FENS/" + aWindowId;
		this.descrDom = ServiceAdapi.resourceManager.getFullPathDom(subPathFile, ".xml", getAdapiClient().getHttpX3ServerUrl(), forced, getAdapiClient().getAdonixContext().getX3ServerCnxHostname());

	},
	razModification: function() {
		TODO_SUPER.razModification();
	},
	setMenuList: function(menuList) {
		this.menuList = menuList;
	},
	setNDOWinComplementDescr: function(aComplementDescr) {
		this.ndOWinComplementDescr = aComplementDescr;
		if (this.adapiWindow != null && aComplementDescr.indexOf(';') > -1) {
			var wST = new StringTokenizer(aComplementDescr, ";");
			if (wST.countTokens() >= 3) {
				wST.nextToken(); // titre
				this.adapiWindow.setNbLignes(wST.nextToken()); // ligne
				this.adapiWindow.setNbColonnes(wST.nextToken()); // colonne
			}
		}
	},
	setOpened: function(opened) {
		this.opened = opened;
		// En dernier
		setTypeJsonNode('FUNC'); // catch close ou open fonction
	},
	setScreenToShow: function(aScreenToShow) {
		this.screenToShow = aScreenToShow;
	},
	setStackLevel: function(stackLevel) {
		this.stackLevel = stackLevel;

	},
	setStamp: function(aStamp) {
		try {
			this.timeStampMilliSec = CAdapi.timeStampToMillisecs(Long.parseLong(aStamp));
			this.timeStamp = CAdapi.timeStampFormats(aStamp, getAdapiClient().getFormater().getDateOrder());
		} catch (e) {
			this.timeStamp = "";
			this.timeStampMilliSec = -1;
		}
	},
	toJson: function() {
		// dump only for open of close function, the dump of entity is done by payloadWin objects
		var winO = new JSONObject();
		if (isOpened()) {
			winO.put('name', getId());
			winO.put('scrnNum', this.screenToShow >= 1 ? this.screenToShow : 1);
			winO.put('stamp', getTimeStampInString());
			winO.put('extend', getNdOWinComplementDescr());
			winO.put('func', getFunctionId());
			winO.put('type', getWindowTypeInString());
			// check if the left list have change fmt and/or title to add appendModel
			var extModel = null;
			for (var item in this.listOfLeftLists) {
				if (item instanceof CAdapiLeftList) {
					var list = item;
					if (list.hasColumnTitleModified() || list.isColomnFormatChange()) {
						extModel = list;
					}
				}
			}
			if (extModel != null) {
				// Extension à apporter au modèle de données (càd au protototype généré). Utilisé notamment sur l'ouverture des fenêtres de type Choose,
				//  où la description des colonnes de la liste de sélection est fournie dynamiquement par le back-office.
				//  Le contenu de cet objet est donc variable; il doit simplement respecter la structure et la codification du modèle de données.
				// L'exemple ci-dessous illustre ce qui est attendu dans le cas de l'extention du modèle pour une fenêtre de type Choose.
				/**
				 * "bA": { "$item": { "$": { "bA1" : { "tit": "Devis",
				 * "fmt": "K:30X" }, "bA2" : { "tit": "Client", "fmt":
				 * "K:10X" } } }
				 */
				// create appendModel Node
				var appendModel = new JSONObject();
				for (var item in extModel.getEntrySup().getVars()) {
					var itemJs = new JSONObject();
					itemJs.put('tit', item.getTitle());
					itemJs.put('fmt', item.getFormat() != null ? item.getFormat().getString() : "");
					appendModel.put(item.getJsonKey(), itemJs);
				}
				var dolaritem = new JSONObject();
				dolaritem.put('$properties', appendModel);
				var leftListApp = new JSONObject();
				leftListApp.put('$item', dolaritem);
				var leftListId = new JSONObject();
				leftListId.put(extModel.getJsonKey(), leftListApp);
				winO.put('appendModel', leftListId);
			}
			winO.put('mnu', this.menuList == null ? new JSONArray() : this.menuList.toJson());
		}
		return winO;
	},
	traverseAll: function(aTraverser) {
		return this.adapiScreens.traverseAll(aTraverser);
	},
	traverseChilds: function(aTraverser) {
		return this.adapiScreens.traverseChilds(aTraverser);
	},
	traverseSettable: function(aStructIst, aAdapiSetter) {
		return this.adapiScreens.traverseSettable(aStructIst, aAdapiSetter);
	},
	whichListnerAmI: function() {
		return CStringFacilities.getClasseName(this.getClass());
	}
});

CAdapiStackedWindow.newScreens = function(aTracer, aAdapiClient, aAdapiRequesterWindow, aWindowDescription, aAdapiScreens, aListOfDataSrcs) {
	var wScreensNodes = aWindowDescription.getElementsByTagName(TAG_SCRN);
	var wMax = wScreensNodes.getLength();
	var wScreenNode;
	var wAdapiScreen;
	// String wValue;
	var wI = 0;
	while (wI < wMax) {
		wScreenNode = wScreensNodes.item(wI);
		var wId = CDomFacilities.getAttributValue(wScreenNode, ATT_NAM);
		wAdapiScreen = new CAdapiScreen(aAdapiRequesterWindow, wI + 1, wId);
		aAdapiScreens.push(wId, wAdapiScreen);
		CAdapiListOfDataSrcsFactory.newScreenDataSrcs(aAdapiRequesterWindow, wScreenNode, wAdapiScreen, aListOfDataSrcs);
		wI++;
	}
}