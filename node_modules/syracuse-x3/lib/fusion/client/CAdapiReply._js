"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CAdonixReply = Object; //require('syracuse-x3/lib/fusion/CAdonixReply').CAdonixReply;
var CAdapiMessage = require('syracuse-x3/lib/fusion/CAdapiMessage').CAdapiMessage;
var CAdapiInstance = require('syracuse-x3/lib/fusion/CAdapiInstance').CAdapiInstance;
var CAdapiInstances = require('syracuse-x3/lib/fusion/CAdapiInstances').CAdapiInstances;
var CAdapiEntity = require('syracuse-x3/lib/fusion/CAdapiEntity').CAdapiEntity;
var CAdapiMessages = require('syracuse-x3/lib/fusion/CAdapiMessages').CAdapiMessages;
var AdapiMenuWin = require('syracuse-x3/lib/fusion/AdapiMenuWin').AdapiMenuWin;
var AdapiWinMenuList = require('syracuse-x3/lib/fusion/AdapiMenuWin').AdapiWinMenuList;
var CAdapiStackedWindows = require('syracuse-x3/lib/fusion/CAdapiStackedWindows').CAdapiStackedWindows;
var CAdapiVariable = require('syracuse-x3/lib/fusion/CAdapiVariable').CAdapiVariable;
var CAdapiVariableDate = require('syracuse-x3/lib/fusion/CAdapiVariableDate').CAdapiVariableDate;


var util = require('util');

var WINDOW_NO_CHANGE = false;

/**
 * Structure publique de reponse a une requete fournie a l'application cliente.
 * */
var CAdapiReply = exports.CAdapiReply = helpers.defineClass(function(aClient, aOrderId, aSTAT, aReplyMessages) {
	aSTAT = aSTAT !== undefined ? aSTAT : 1;
	CAdonixReply.call(this, aOrderId, aSTAT, aReplyMessages);
	this.orderId = aOrderId;
	this.client = aClient;
	this.instances = null;
	this.targetEntity = null;
	this.targetIst = null;
	this.messages = [];
	this.callUiOpenFiles = null;
	this.changeWindow = new Boolean(WINDOW_NO_CHANGE);
	this.popedWindows = null;
	this.pusheddWindows = null;
	this.winMenus = null;
	this.stayInCommandMode = false;
}, CAdonixReply, {
	addInstance: function(aInstance) {
		if (this.instances == null) this.instances = new CAdapiInstances();
		this.instances.add(aInstance);
		if (aInstance.hasException()) {
			this.setTargetAdxId(aInstance.ist, aInstance.entity);
		}
		return aInstance;
	},
	addLogicalErrorMess: function(aObject, aMethod, aIst, aMessage) {
		//throw new Error(aMessage); // for now
		if (this.client.isWithLogicalErrDetails()) {
			var wMessage = this.messages.getFirstMessageOfTtyp(CAdapiReply.WEBSERVER);
			if (wMessage == null) {
				var wMess = this.client.getMessage('ERROR_LOGICAL');
				wMessage = new CAdapiMessage(CAdapiReply.WEBSERVER, this.client, wMess, false);
				this.messages.addMessage(wMessage);
			}
			wMessage.addWebServerLogicalMess(buildLogicalErrorMess(aObject, aMethod, aIst, aMessage));
		}
	},
	addMessage: function(aMessage) {
		this.messages.push(aMessage);
		return aMessage;
	},
	/* TODO overload
	addMessage: function(aType, aAction, aMessage, aTitre, aDefBtn, aSleep, aChx) {
		return this.addMessage(new CAdapiMessage(aType, aAction, aMessage, aTitre, aDefBtn, aSleep, aChx, this.client));
	},
	*/
	addTargetInstance: function() {
		var wFormatString = null;
		var wFormattedValue = null;
		var wServerValue = null;
		var wAdapiInstance;
		try {
			var wAdapiVariable = this.getTargetEntity();
			if (this.getTargetEntity() instanceof CAdapiVariable) {
				if (wAdapiVariable.acceptEditFormat()) {
					wFormatString = this.validTargetFormat(wAdapiVariable.format);
					wFormattedValue = wAdapiVariable.formatX3ToEdit();
					wServerValue = wAdapiVariable.getServerValStr();
				}
			}
			wAdapiInstance = CAdapiInstance.newtarget(this.client, this.targetIst, wFormatString, wFormattedValue, this.stayInCommandMode);
			if (wAdapiVariable instanceof CAdapiVariableDate) {
				wAdapiInstance.setRawValue(wAdapiVariable.getServerValStr());
			}
		} catch (e) {
			console.error(e);
			var wAdapiMessage = new CAdapiMessage(CAdapiReply.WEBSERVER, this.client, e.message, false);
			this.addMessage(wAdapiMessage);
			wAdapiInstance = CAdapiInstance.newtarget(this.client, this.targetIst, wFormatString, wServerValue, this.stayInCommandMode);
		}
		this.addInstance(wAdapiInstance);
		return wAdapiInstance;
	},
	findTargetEntity: function(aStructIst) {
		var wModifiable = this.client.findModifiable(aStructIst);

		if (wModifiable != null && wModifiable instanceof CAdapiEntity) {
			return wModifiable;
		} else {
			return null;
		}
	},
	getTargetEntity: function() {
		if (this.targetEntity == null) {
			var wTargetEntity = this.targetIst ? this.findTargetEntity(this.targetIst) : null;
			if (wTargetEntity == null) {
				var wMess = this.client.getMessage('ERROR_CURFORMAT_NOIST', this.targetIst == null ? "NULL" : this.targetIst.toString());
				this.client.addLogicalErrorMess(this, "getTargetFormat", this.targetIst == null ? "NULL" : this.targetIst.toString(), wMess);
			} else {
				setTargetEntity(wTargetEntity);
			}
		}
		return this.targetEntity;
	},
	hasTargetEntityField: function() {
		var wAdapiEntity = this.getTargetEntity();
		return wAdapiEntity != null && wAdapiEntity instanceof CAdapiVariable;
	},
	setOk: function(aStat) {
		this.status = aStat;
	},
	setStatusNOTOK: function(e) {
		this.status = 0;
		this.reason = this.reason || e;
		this.messages.splice(0, 0, new CAdapiMessage(CAdonix.MSG_ERROR, 0, wMess, "", 0, 0, 0));
	},
	setStatusOK: function(aInfoMessage) {
		this.status = 1;
		this.addMessage(CAdonix.MSG_INFORMATION, 0, aInfoMessage, "", 0, 0, 0);
	},
	setTargetAdxIdEntity: function(aTargetIst, aEntity) {
		this.targetIst = aTargetIst;
		this.setTargetEntity(aEntity);
	},
	setTargetAdxId: function(aTargetIst, request) {
		this.setTargetAdxIdEntity(aTargetIst, this.findTargetEntity(aTargetIst));
		var instance = this.addTargetInstance();
		if (aTargetIst.isLeftListIst() && request.lefListLineSelected != -1) {
			instance.setNl(request.lefListLineSelected + 1);
		}
		this.client.setCurrentField(instance);
	},
	setTargetEntity: function(aTargetEntity) {
		this.targetEntity = aTargetEntity;
	},
	traverseInstances: function(aTraverser) {
		if (this.instances != null) {
			this.instances.traverseChilds(aTraverser);
		}
	},
	validTargetFormat: function(aFormat) {
		if (aFormat == null || !aFormat.isValid()) {
			var wMess = this.client.getMessage('ERROR_CURFORMAT_NOFORMAT', this.targetIst.toString());
			this.client.addLogicalErrorMess(this, "getTargetFormat", this.targetIst.toString(), wMess);
			return wMess;
		} else {
			return aFormat.format;
		}
	},
	addAskOpenFile: function(aUrl) {
		if (this.callUiOpenFiles == null) {
			this.callUiOpenFiles = new CAdapiAskOpenFiles();
		}
		return this.callUiOpenFiles.addOneOpenFile(aUrl);
	},

	// AJOUT MENU FENETRE
	addMenuWin: function(flag, actionId, label, menuId, rank, adxId, accelerateur) {
		if (this.winMenus == null) {
			this.winMenus = new AdapiWinMenuList();
		}
		var winMenu = menuId == 307 || this.winMenus.containsMenu(menuId);
		var menu = new AdapiMenuWin(this.client, actionId, flag, label, menuId, rank, adxId, accelerateur, !winMenu);
		if (winMenu) {
			this.winMenus.addMenu(menu);
		}
	},
	addMessageAbort: function(e) {
		this.messages.addMessageAbort(e);
	},
	addPopedWindow: function(aRequesterWindow) {
		if (this.popedWindows == null) {
			this.popedWindows = new CAdapiStackedWindows();
		}
		this.popedWindows.push(aRequesterWindow);
		this.setChangeWindow();
	},
	addPushedWindow: function(aRequesterWindow) {
		if (this.pusheddWindows == null) {
			this.pusheddWindows = new CAdapiStackedWindows();
		}
		this.pusheddWindows.push(aRequesterWindow);
		aRequesterWindow.setMenuList(this.winMenus);
		this.winMenus = null;
	},
	getMess: function(aIdx) {
		return this.messages.getMess(aIdx);
	},
	getPopedWindowId: function(aIdx) {
		if (hasPopedWindow() && aIdx < this.popedWindows.length) {
			return this.popedWindows.get(aIdx).id;
		} else {
			return null;
		}
	},
	getPushedWindow: function(aIdx) {
		if (hasPushedWindow() && aIdx < this.pusheddWindows.length) {
			return this.pusheddWindows.get(aIdx);
		} else {
			return null;
		}
	},
	getPushedWindowId: function(aIdx) {
		var wAdapiRequesterWindow = getPushedWindow(aIdx);
		if (wAdapiRequesterWindow != null) {
			return wAdapiRequesterWindow.id;
		} else {
			return null;
		}
	},
	hasPopedWindow: function() {
		return this.popedWindows != null && this.popedWindows.length > 0;
	},
	hasPushedWindow: function() {
		return this.pusheddWindows != null && this.pusheddWindows.length > 0;
	},
	isWindowChanged: function() {
		return this.changeWindow.booleanValue();
	},
	setAskOpenHelpParam: function(aAskOpenHelpParam) {
		// TODO - Non utilisé  this.askOpenHelpParam = aAskOpenHelpParam;
	},
	setAskOpenSession: function(aOpenSessionParam) {
		// TODO - Non utilisé this.askOpenSessionParam = aOpenSessionParam;
	},
	setAskUiAction: function(aAskUiAction) {
		// TODO - Non utilisé this.askUiAction = aAskUiAction;
	},
	setChangeWindow: function() {
		this.changeWindow = new Boolean(true);
	},
	setStamp: function(aStamp) {
		// TODO - Non utilisé this.sTAMP = CAdapiReply.convReplyLong(aStamp);
	}
});

CAdapiReply.WEBSERVER = 98;

CAdapiReply.buildLogicalErrorMess = function(aObject, aMethod, aIst, aMessage) {
	var wSB = new StringBuilder();
	wSB.append(CStringFacilities.getClasseName(aObject.class));
	wSB.append('^');
	wSB.append(aMethod);
	wSB.append('^');
	wSB.append(aIst);
	wSB.append('^');
	wSB.append(aMessage);
	return wSB.toString();
}