package com.sage.x3.bundle.shared.adapi.client;

import com.adonix.util.reply.CReply;
import com.sage.x3.bundle.shared.adapi.AdapiMenuWin;
import com.sage.x3.bundle.shared.adapi.AdapiMenuWin.AdapiWinMenuList;
import com.sage.x3.bundle.shared.adapi.CAdapiAskOpenFiles;
import com.sage.x3.bundle.shared.adapi.CAdapiAskOpenFiles.CAdapiAskOpenFile;
import com.sage.x3.bundle.shared.adapi.CAdapiAskUiAction;
import com.sage.x3.bundle.shared.adapi.CAdapiMessages;
import com.sage.x3.bundle.shared.adapi.CAdapiStackedWindow;
import com.sage.x3.bundle.shared.adapi.CAdapiStackedWindows;

/**
 * Modelisation des reponses fournies au browser.
 */
var CX3Reply = helpers.defineClass(function() {}, CAdapiReply, {
	private static final boolean WINDOW_NO_CHANGE = false;

	// TODO - Non utilisé - private String this.askOpenHelpParam = null;
	// TODO - Non utilisé - private String this.askOpenSessionParam = null;
	// TODO - Non utilisé - private CAdapiAskUiAction this.askUiAction = null;
	// TODO - Non utilisé - private Long this.sTAMP = null;
	// TODO - Non utilisé - private Vector<String> this.leftUpdateTargets = null;
	// TODO - Non utilisé - private Integer this.eTAT = null;
	// TODO - Non utilisé - private String this.nEXT = null;
	// TODO - Non utilisé - private String this.replyId = null;
	// TODO - Non utilisé - private CStructIst this.targetIst = null;
	// TODO - Non utilisé - private ArrayList<CAdapiReport> this.reports = null;
	private CAdapiAskOpenFiles this.callUiOpenFiles = null;
	private Boolean this.changeWindow = new Boolean(WINDOW_NO_CHANGE);
	private CAdapiStackedWindows this.popedWindows = null;
	private CAdapiStackedWindows this.pusheddWindows = null;
	// Pour calcul des menu d'une fenêtre - Les noeud MDOMNBO sont reçus avant le noeud NDOWIN - Les menus fenêtre sont tous fils du menu 307
	private AdapiMenuWin.AdapiWinMenuList this.winMenus;

	public CX3Reply(aAdapiClient, aOrderId) {
		this(aAdapiClient, aOrderId, CReply.OK);
	}

	public CX3Reply(aAdapiClient, aOrderId, aStatus) {
		TODO_SUPER(aAdapiClient, aOrderId, aStatus, new CAdapiMessages(aAdapiClient));

	}

	public CX3Reply(aAdapiClient, aOrderId) {
		this(aAdapiClient, aOrderId.intValue(), CReply.OK);
	}, addAskOpenFile: function(aUrl) {
		if (this.callUiOpenFiles == null) {
			this.callUiOpenFiles = new CAdapiAskOpenFiles();
		}
		return this.callUiOpenFiles.addOneOpenFile(aUrl);
	}

	// AJOUT MENU FENETRE
	, addMenuWin: function(flag, actionId, label, menuId, rank, adxId, accelerateur) {
		if (this.winMenus == null) {
			this.winMenus = new AdapiWinMenuList();
		}
		var winMenu = menuId == 307 || this.winMenus.containsMenu(menuId);
		var menu = new AdapiMenuWin(this.getAdapiClient(), actionId, flag, label, menuId, rank, adxId, accelerateur, !winMenu);
		if (winMenu) {
			this.winMenus.addMenu(menu);
		}
	}, addMessageAbort: function(e) {
		getMessages().addMessageAbort(e);
	}, addPopedWindow: function(aAdapiRequesterWindow) {
		if (this.popedWindows == null) {
			this.popedWindows = new CAdapiStackedWindows();
		}
		this.popedWindows.add(aAdapiRequesterWindow);
		setChangeWindow();
	}, addPushedWindow: function(aAdapiRequesterWindow) {
		if (this.pusheddWindows == null) {
			this.pusheddWindows = new CAdapiStackedWindows();
		}
		this.pusheddWindows.add(aAdapiRequesterWindow);
		aAdapiRequesterWindow.setMenuList(this.winMenus);
		this.winMenus = null;
	}, getLastPopedWindowId: function() {
		return this.popedWindows != null ? getPopedWindowId(this.popedWindows.size() - 1) : null;
	}, getLastPushedWindowId: function() {
		return this.pusheddWindows != null ? getPushedWindowId(this.pusheddWindows.size() - 1) : null;
	}, getMess: function(aIdx) {
		return getMessages().getMess(aIdx);
	}, getNbPopedWindows: function() {
		return this.popedWindows != null ? this.popedWindows.size() : -1;
	}, getNbPushedWindows: function() {
		return this.pusheddWindows != null ? this.pusheddWindows.size() : -1;
	}, getPopedWindowId: function(aIdx) {
		if (hasPopedWindow() && aIdx < this.popedWindows.size()) {
			return this.popedWindows.get(aIdx).getId();
		} else {
			return null;
		}
	}, getPopedWindows: function() {
		return this.popedWindows;
	}, getPushedWindow: function(aIdx) {
		if (hasPushedWindow() && aIdx < this.pusheddWindows.size()) {
			return this.pusheddWindows.get(aIdx);
		} else {
			return null;
		}
	}, getPushedWindowId: function(aIdx) {
		var wAdapiRequesterWindow = getPushedWindow(aIdx);
		if (wAdapiRequesterWindow != null) {
			return wAdapiRequesterWindow.getId();
		} else {
			return null;
		}
	}, hasPopedWindow: function() {
		return this.popedWindows != null && this.popedWindows.size() > 0;
	}, hasPushedWindow: function() {
		return this.pusheddWindows != null && this.pusheddWindows.size() > 0;
	}, isWindowChanged: function() {
		return this.changeWindow.booleanValue();
	}, setAskOpenHelpParam: function(aAskOpenHelpParam) {
		// TODO - Non utilisé  this.askOpenHelpParam = aAskOpenHelpParam;
	}, setAskOpenSession: function(aOpenSessionParam) {
		// TODO - Non utilisé this.askOpenSessionParam = aOpenSessionParam;
	}, setAskUiAction: function(aAskUiAction) {
		// TODO - Non utilisé this.askUiAction = aAskUiAction;
	}, setChangeWindow: function() {
		this.changeWindow = new Boolean(true);
	}, setStamp: function(aStamp) {
		// TODO - Non utilisé this.sTAMP = CX3Reply.convReplyLong(aStamp);
	}
}
