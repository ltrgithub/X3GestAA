"use strict"; var helpers = require('syracuse-core/lib/helpers');

	var CDynFormat = helpers.defineClass(function() {}, null, {
		private String this.complement = null;
		private IFormater this.formater;
		private String this.subType = null;
		private String this.type;

		private CDynFormat(aType, aFormater) {
			this.type = aType;
			this.formater = aFormater;
		}, createInFormater: function() {
				this.formater.setNewDynamicFormat(this.type, this.subType, this.complement);
		}, getType: function() {
			return this.type;
		}, hasSubType: function() {
			return this.subType != null;
		}, setComplement: function(aComplement) {
			this.complement = aComplement;
		}, setSubType: function(aSubType) {
			this.subType = aSubType;
		}

		/*
		 * c": { "stdType": ["A", "#"], "chars": ["", "-", "/", "_", ","] },
		 */
		, toJSon: function() {
			var dynFmt = new JSONObject();
				if (this.complement != null) {
					var stdType = new JSONArray();

					for (i = 0; i < this.complement.length(); i++) {
						stdType.put(new Character(this.complement.charAt(i)).toString());
					}
					dynFmt.put("stdType", stdType);

				}
				if (this.subType != null) {
					var chars = new JSONArray();

					for (i = 0; i < this.subType.length(); i++) {
						chars.put(new Character(this.subType.charAt(i)).toString());
					}
					dynFmt.put("chars", chars);
				}

			return dynFmt;
		}
	}

	var CModifiableFinder = helpers.defineClass(function() {}, CAdapiModifier, {

		private IAdapiModifiable this.foundModifiable = null;

		private CModifiableFinder(aTracer) {
			TODO_SUPER(aTracer);
		}, getFoundModifiable: function() {
			return this.foundModifiable;
		}, setAdapiModifiable: function(aStructIst, aModifiable) {
			this.foundModifiable = aModifiable;
			this.done = true;
			return done();
		}
	}

	var CMotherWindow = helpers.defineClass(function() {}, CAdapiEntity, {

		private CMotherWindow(aAdapiClient) {
			TODO_SUPER(aAdapiClient, CAdapi.WIN_ROOT_ID, 1, EntityType.WINDOW);
		}, getAdxId: function() {
			return "mostherWindow - " + CAdapi.WIN_ROOT_ID;
		}, toJson: function() {
			throw new RuntimeException("Ba tojson MotherWin");
		}
	}

var CAdapiClient = helpers.defineClass(function() {}, CAdonixClient, {
	public static final String ID_CHG_VON = "VOn";

	public static final String ID_CHG_ZON = "ZOn";

	private static String HTTP_PREFIX = "http://";
	protected static final String ADXID_MOTHER = "A";
	private static String CALLUI_LOCALDIR_HTTP = "HTTP";
	private static String CALLUI_OPENFILE_LOCALDIR = "UILocalDir";
	private static String CALLUI_OPENFILE_LOCALFILE = "UILocalFile";
	public final static String CHG_DATE_FORMAT_SERVER = "DefaultDateFormat";
	public final static String CHG_MONTH_LIBS = "SetMonthList";
	public final static String CHG_PIVOT_DATE = "DefaultDatePivot";
	private static String CHG_URL_PORTAL = "PortalUrl";
	private static String LIB_ACTION_ID = "ActId";
	private static String LIB_FLAG = "Flag";
	private static String LIB_FORMAT_COMPLEMENT = "Complement";
	private static String LIB_FORMAT_SUBTYPE = "SubType";
	private static String LIB_FORMAT_TYPE = "Type";
	private static String LIB_IMG_ID = "ImgId";
	private static String LIB_IST = "ist";
	private static String LIB_LIB = "Lib";
	private static String LIB_METHOD_LISTEN_NDACTOP = "NDACTOP";
	private static String LIB_METHOD_LISTEN_NDCTSU = "NDCTSU";
	private static String LIB_METHOD_LISTEN_NDOMNCO = "NDOMNCO";
	private static String LIB_METHOD_LISTEN_NDOTXSC = "NDOTXSC";
	private static String LIB_NUM_TEXT = "NumText";
	private static String LIB_THROWABLE = "Throwable";
	private static String LIB_TYPE = "typ";
	private static String LIB_VIDAGE = "clean";
	private static String MESS_MALFORMED_URL = "Malformed url, not an AdxPubSubFile !";
	private static String UIADXPUBSUBFILE = "UIAdxPubSubFile";
	private static String URL_PORTAL_PARAM_DLGMODE = "DlgMode";
	private static String URL_PORTAL_PARAM_LANG = "LANG";
	private static String URL_PORTAL_ROOT = "/ADX_PORTAL";
	private static String URL_PORTAL_VALUE_DLGMODE = "WEB";

	public static CAdonixReply checkFailed(adxReply, info, reason) {
		if (adxReply == null || !adxReply.isOk()) {
			var t = adxReply != null ? adxReply.getThrowable() : null;
			// Format Exception - pas de throws Exception
			if (t != null && t instanceof CAdapiException && ((CAdapiException) t).isFormatException()) {
				return adxReply;
			}
			var diag = new CDiagnosis(ESDataErrorCode.ApplicationDiagnosis);
			diag.setApplicationCode(EApplicationCode.ERROR.toString());
			var msgs = new StringBuilder();
			if (adxReply != null) {
				if (adxReply.hasWhy()) {
					msgs.append("WHY[" + adxReply.getWhyString() + "]\n");
				}
				if (adxReply.hasMessages()) {
					for (msg : adxReply.getMessages()) {
						msgs.append(msg.getMess() + "\n");
					}
				}
			}
			msgs.append(t.getMessage()).append("\n");
			diag.setMessage(msgs.toString());
			diag.setStatusCode(500);
			diag.setSeverity(ESeverity.ERROR.toString());
			diag.setStackTrace(t);
			FusionExcep.throwAdapiExcep(reason, info, new CXSDataException(diag));
		}
		return adxReply;
	}

	public static CX3Reply checkFailed(adxReply, reason) {
		return (CX3Reply) checkFailed(adxReply, FusionClientInfo.X3COM, reason);
	}

	private IAdapiRequest this.activeRequest = null;
	private CAdapiClientConfig this.adapiConfig;
	private CAdapiResources this.adapiResources;
	private ArrayList<CAdapiPickedLine> this.adxIstsOfPickedLines = new ArrayList<CAdapiPickedLine>();
	private Vector<CAdapiMessage> this.affSynchroneMessages = new Vector<CAdapiMessage>();
	private String this.applicationID = null;
	private List<CDynFormat> this.sessDynFormat = new ArrayList<CDynFormat>();

	private CDynFormat this.currentDynFormat = null;
	private CFormaterJava this.formater;

	private CAdapiInstance currentField;

	private CAdapiMessage this.logicalErrorMessage = null;
	private CAdapiEntity this.motherWindow;
	private CAdapiStackedWindows this.stackedWindows;
	private CTraceCli this.traceCli = null;
	private boolean this.withLogicalErrDetails = false;
	private String uuid = null;

	// CAdapiClient
	public CAdapiClient(aTraceCli, aAdapiConfig, aType) {
		TODO_SUPER(aAdapiConfig.openTrace(aTraceCli), aAdapiConfig, aType);
		this.traceCli = aTraceCli;
		this.adapiConfig = aAdapiConfig;
		this.adapiConfig.switchTracer(getTracer());
		initFormater();
		this.motherWindow = new CMotherWindow(this);
		this.stackedWindows = new CAdapiStackedWindows();
		initAdapiResources(CResources.LANG_FRA);
		this.withLogicalErrDetails = getAdapiClientConfig().getBoolParam(CAdonixConfig.WITH_LOGICAL_ERR_DETAILS);
	}, addAdxIstOfPickedLines: function(aAdapiPickedLine) {
		this.adxIstsOfPickedLines.add(aAdapiPickedLine);
	}, addLogicalErrorMess: function(aObject, aMethod, aIst, aMessage) {
		if (hasActiveRequest()) {
			((CAdapiReply) getActiveRequest().getReply()).addLogicalErrorMess(aObject, aMethod, aIst, aMessage);
		} else {
			if (this.logicalErrorMessage == null) {
				var wMess = getAdapiResources().getMessage(CAdapiResources.KEYMESS_ERROR_LOGICAL);
				this.logicalErrorMessage = new CAdapiMessage(CReplyMessage.WEBSERVER, this, wMess,false);
			}
			this.logicalErrorMessage.addWebServerLocicalMess(CAdapiReply.buildLogicalErrorMess(aObject, aMethod, aIst, aMessage));
		}
	}, addStatusIconDef: function(instance, aNumText, aTxt, aImgId, aActionId) {
		var winFound = null;
		for (i = 0; i < this.stackedWindows.size() && winFound == null; i++) {
			var item = this.stackedWindows.get(i);
			if (item.getAdxIst().getWinAlphaId().equals(instance.getWinAlphaId())) {
				winFound = item;
			}
		}
		if (winFound != null) {
			winFound.addStatusIconDef(instance, aNumText, aTxt, aImgId, aActionId);
		}
	}, changePivotDate: function(prop) {
		try {
			this.formater.setUserDateFormat(this.adapiConfig.getUiParamIDATE(), this.adapiConfig.getUiParamSEPDATE(), Integer.parseInt(prop.getStrValue()));
		} catch (e) {
			throw new RuntimeException("Bad pivot date", e);
		}
		setOneSessionSetting(prop.getId(), prop.getStrValueNotNull());
	}, changeUserContext: function(aAguments) {
		TODO_SUPER.changeUserContext(aAguments);
		if (hasActiveRequest()) {
			var reply = getActiveRequest().getAdonixReply();
			if (reply.hasChangedAdonixLang()) {
				setCacheContext(reply.getChangedAdonixLang());
			}
		}
	}, clearAdxIstsOfPickedLines: function() {
		this.adxIstsOfPickedLines.clear();
	}

	// CLoseSocket
	, closeClient: function(fromSameThread, e,reason) {
		Utils.toConsole("CloseClient FusionAdapi Client\n\tReason["+reason+"]\n\tAlreadyClosed[" + (getConnClient() == null || !getConnClient().hasSocket()) + "] - Exception[" + (e == null ? "No" : e.getMessage()) + "]");
		TODO_SUPER.closeClient(fromSameThread, e, reason);
	}, closeTrace: function() {
		if (this.tracer instanceof CTraceCliChanel) {
			if (this.traceCli != null) {
				this.traceCli.destroyChanel((CTraceCliChanel) this.tracer);
			}
			this.tracer = null;
			this.traceCli = null;
		}
	}, configFormater: function() {
		try {
			/*
			 * 0 (mm/jj/aa) si DATE_FORMAT_KEY = 21 ou 22 1 (jj/mm/aa) si
			 * DATE_FORMAT_KEY = 11 ou 12
			 * 
			 * MDY=0, DMY=1, YMD=2 => (1, "/", 1950).
			 */
			var wDateOrder = this.adapiConfig.getUiParamIDATE();
			var wDateSep = this.adapiConfig.getUiParamSEPDATE();
			var wPivotDate = this.adapiConfig.getUiParamPIVOTDATE();
			this.formater.setUserDateFormat(wDateOrder, wDateSep, wPivotDate);
			this.formater.setUserDecimalSep(this.adapiConfig.getUiParamSEPDECIMAL());
			this.formater.setUserThousandSep(this.adapiConfig.getUiParamSEPTHOUSAND());
			// pour optilmiser le flux xml vers le browser: suprime les espaces de cadrage a droite pour les valeur alpha.
			this.formater.setVOn(this.adapiConfig.getFormaterVon());
			this.formater.setZOn(true);
		} catch (e) {
			throw new RuntimeException("configFormater", e);
		}
	}

	// retourne vrai si la liste de propri�t� contient la propriete
	, containsAdxPubSubFile: function(ArrayList<CStructProperty> aListOfProperties) {
		var wProperty;
		var wMax = aListOfProperties.size();
		var wI = 3; // pour demarer a la 4eme propriete !
		while (wI < wMax) {
			wProperty = aListOfProperties.get(wI);
			if (wProperty.hasId() && wProperty.getId().equalsIgnoreCase(UIADXPUBSUBFILE)) {
				return true;
			}
			wI++;
		}
		return false;
	}

	// Demande d'une déconnexion au serveur X3
	, deconnectClient: function(reason) {
		try {
			Utils.toConsole("Deconnect client\n\tReason[" + (reason == null ? "none" : reason) + "]\n\tAsk X3 server to close ");
			return checkFailed((CX3Reply) deconnect(new CX3Reply(this, CDefAction.SRV_FIN_APPL)), "X3 deconnexion failed");
		} finally {
			realeaseActiveRequest();
		}
	}	/*
	 * Demande au serveur UI d'ouvrir un fichier. si le paramere "UILocalDir"
	 * contient HTTP, c'est pour ouvrir un fichier via IE
	 * 
	 * Exemples : <ul> <li>0= id=[UIAction] value=[OpenFile]</li> <li>1=
	 * id=[UILocalDir] value=[HTTP]</li> <li>2= id=[UILocalFile]
	 * value=[172.16.12
	 * .41:80/x3webdata/GX3APP/TMP/F5963808_EDITRTWEB_53711.xml]</li> <li>3=
	 * id=[ADXPUB_SubFile] value=[1]</li> </ul>
	 * 
	 * Ce CallUi est employe pour ouvrir des exports xml ou excel
	 * 
	 * <pre> "UIAction="+chr$(1)+"OpenFile", "UILocalDir="+ chr$(1) +"HTTP",
	 * "UILocalFile="+ chr$(1) +"www.meteo.fr/"
	 * 
	 * "UIAction="+chr$(1)+"OpenFile", "UILocalDir="+ chr$(1) +"tmp",
	 * "UILocalFile="+ chr$(1) +"test.txt" </pre>
	 */
	, executeCallUiOpenFile: function(ArrayList<CStructProperty> aListOfProperties) {
		var wMax = aListOfProperties.size();
		if (wMax > 2) {
			var wLocalDir = aListOfProperties.get(1).getStrValue();
			var wLocalFile = aListOfProperties.get(2).getStrValue();

			var wUrl = new StringBuilder(128);
			/*
			 * si UILocalDir == "HTTP", alors UILocalFile contient un URL
			 */
			if (wLocalDir.equals(CALLUI_LOCALDIR_HTTP)) {
				wUrl.append(translateLocalFileUrl(wLocalFile, aListOfProperties));
			}
			/*
			 * sinon, et UILocalFile sont des chemins et un nom de
			 * fichier relatifs au dossier HOME de l'utilisateur
			 */
			else {
				wUrl.append(getAdapiClientConfig().getParam(CAdapiClientConfig.USERHOMEVIRTUALPATH));
				wUrl.append('/');
				wUrl.append(wLocalDir);
				wUrl.append('/');
				wUrl.append(wLocalFile);
			}
			var wReply = (CX3Reply) getActiveRequest().getAdonixReply();
			var wCallUiOpenFile = wReply.addAskOpenFile(wUrl.toString());
			var wProperty;
			var wPropertyId;
			var wI = 3;
			while (wI < wMax) {
				wProperty = aListOfProperties.get(wI);
				wPropertyId = wProperty.getId();
				if (!wPropertyId.equals(CALLUI_OPENFILE_LOCALDIR) && !wPropertyId.equals(CALLUI_OPENFILE_LOCALFILE)) {
					wCallUiOpenFile.addOneParam(wPropertyId.toLowerCase(), wProperty.getStrValue());
				}
				wI++;
			}
		}
		return CAdonixCallUiReply.OK;
	}

	/**
	 * valorisation de laliste des noms de mois dans l'instance du formateur
	 * Callui RETOUR=&quot;&quot; With
	 * &quot;UIAction=&quot;+chr$(1)+&quot;SessionSettings
	 * &quot;,&quot;FormatMonthList=&quot;+chr$(1)+ janvier;fevrier;mars;...
	 * Callui RETOUR=&quot;&quot; With
	 * &quot;UIAction=&quot;+chr$(1)+&quot;SessionSettings
	 * &quot;,&quot;DefaultDateFormat=&quot;+chr$(1)+ JJ[/]MM[/]AAAA Callui
	 * RETOUR=&quot;&quot; With
	 * &quot;UIAction=&quot;+chr$(1)+&quot;SessionSettings
	 * &quot;,&quot;DefaultDatePivot=&quot;+chr$(1)+ num$(adxdcs)
	 */
	, executeOneSessionSetting: function(aStructProperty, areply) {
		var wId = aStructProperty.getId();
		if (aStructProperty.getId().equalsIgnoreCase(CHG_MONTH_LIBS)) {
			setMonthList(aStructProperty);
			if (hasActiveRequest()) {
				var wAdonixReply = getActiveRequest().getAdonixReply();
				wAdonixReply.setChangedMonthLibs(aStructProperty.getStrValue());
			}
		} else if (isUrlPortalSessionSetting(aStructProperty.getId())) {
			storeUrlPortalSessionSetting(aStructProperty.getId(), aStructProperty.getStrValue());
		} else if (wId.equalsIgnoreCase(CHG_DATE_FORMAT_SERVER)) {
			getAdapiClientConfig().setServerDateFormat(aStructProperty.getStrValue());
			setOneSessionSetting(aStructProperty.getId(), aStructProperty.getStrValue());
		} else if (aStructProperty.getId().equalsIgnoreCase(CHG_PIVOT_DATE)) {
			changePivotDate(aStructProperty);
		} else {
			TODO_SUPER.executeOneSessionSetting(aStructProperty, areply);
		}
	}, findModifiable: function(aStructIst) {
		var wSettableFinder = new CModifiableFinder(this.tracer);
		traverseSettable(aStructIst, wSettableFinder);
		return wSettableFinder.getFoundModifiable();
	}, getActiveRequest: function() {
		synchronized (this) {
			return this.activeRequest;
		}
	}, getAdapiClientConfig: function() {
		return this.adapiConfig;
	}, getAdapiResources: function() {
		return this.adapiResources;
	}, getConnClientNode: function() {
		return TODO_SUPER.getConnClientNode();
	}, getCurrentField: function() {
		return currentField;
	}, getFormater: function() {
		return this.formater;
	}

	// retourne le nombre de message TEMPMESS retourne par le serveur
	, getNbServerTempMess: function() {
		return this.affSynchroneMessages.size();
	}, getNewStackedWindows: function(aWindowId, aFunctionId, aStamp, aWindowIdxBaseOne) {
		var window = new CAdapiStackedWindow(this, aWindowId, aFunctionId, aStamp, aWindowIdxBaseOne);
		window.addObserver(this);
		window.forceChange();// notify observer for create wins
		return window;
	}

	public List<CDynFormat> getSessDynFormat() {
		return this.sessDynFormat;
	}, getStackedWindows: function() {
		return this.stackedWindows;
	}, getTracer: function() {
		return this.tracer;
	}, getUuid: function() {
		return uuid;
	}, hasActiveRequest: function() {
		synchronized (this) {
			return this.activeRequest != null;
		}
	}, hasApplicationId: function() {
		return this.applicationID != null;
	}, hasValidFormater: function() {
		return this.formater != null && this.formater.isValid();
	}, initAdapiResources: function(aLanguage) {
		var wOldLang = this.adapiResources != null ? this.adapiResources.getAskedAdonxiLang() : null;
		var wMustReinit = wOldLang == null || !wOldLang.equals(aLanguage);
		if (wMustReinit) {
			this.adapiResources = new CAdapiResources(aLanguage);

		}
	}, initFormater: function() {
		this.formater = new CFormaterJava(this.tracer, this.tracer.traceModuleFilter(CAdapiClientConfig.TRACER_MODULE_FORMAT));
		configFormater();
	}, initSessionWeight: function(aAdonixContext, aSessionWeight) {
		aAdonixContext.setX3SessionWeight(aSessionWeight);
	}, isUrlPortalSessionSetting: function(aId) {
		return aId.toLowerCase().startsWith(CHG_URL_PORTAL.toLowerCase());
	}, isWithLogicalErrDetails: function() {
		return this.withLogicalErrDetails;
	}, listenException: function(e) {
		if (this.tracer.traceLevelFilter(ITracer.LEVEL_DEBUG)) {
			var wTB = this.tracer.popTraceBuffer();
			wTB.appendMethodName(LIB_METHOD_LISTEN_E);
			wTB.appendDescr(LIB_THROWABLE, e);
			this.tracer.trace(this, ITracer.LEVEL_DEBUG, wTB);
			this.tracer.pushTraceBuffer(wTB);
		}
		if (hasActiveRequest()) {
			getActiveRequest().getReply().setStatusNOTOK(e);
		}
		return true;
	}, listenLogicalErr: function(aObject, aMethode, aMessage) {
		if (isWithLogicalErrDetails()) {
			addLogicalErrorMess(aObject, aMethode, "", aMessage);
		}

	}

	/**
	 * NDACTOBJ (Adxcpl_displayWin) Affichage d'une fenetre Id=[NDACTOBJ]
	 * x3func=[Adxcpl_displayWin] NbArgs=[2] - ist =[ win=[2] srn=[0] blc=[0]
	 * fld=[0] idx=[0]] - opt=[.x04]
	 */
	, listenNodeNDACTOBJ: function(node) {
		final int WIN_NOHIDDEN = 4;
		var num = node.getNodeArgByte(1).getIntValue();
		if (num > WIN_NOHIDDEN) {
			var win = findModifiable(node.getNodeArgIst(0).getStructIst());
			if (win != null && win instanceof CAdapiStackedWindow) {
				((CAdapiStackedWindow) win).setScreenToShow(num - WIN_NOHIDDEN + 1);
			}
		} else {
			// TODO
		}
		return TODO_SUPER.listenNodeNDACTOBJ(node);
	}

	/**
	 * NDACTOP 0E4000 (Activation_Action) Activation d=[NDACTOP] level=[?]
	 * x3func=[Activation_Action] nb=[2] - ide=[2823] ID Action - typ=[.x01]
	 * Status
	 */
	, listenNodeNDACTOP: function(aSegmentNode) {
		var wActionId = aSegmentNode.getNodeArgInt(0).getIntValue();
		var wFlag = aSegmentNode.getNodeArgByte(1).getIntValue() != 0;
		// /Trace
		if (this.tracer.traceLevelFilter(ITracer.LEVEL_DEBUG) && this.tracer.traceModuleFilter(CAdapiClientConfig.TRACER_MODULE_BUTTONS)) {
			var wTB = this.tracer.popTraceBuffer();
			wTB.appendMethodName(LIB_METHOD_LISTEN_NDACTOP);
			wTB.appendDescr(LIB_ACTION_ID, wActionId);
			wTB.appendDescr(LIB_FLAG, wFlag);
			this.tracer.trace(this, ITracer.LEVEL_DEBUG, wTB);
			this.tracer.pushTraceBuffer(wTB);
		}
		// FTrace*/
		new AdapiMenuAct(this, wActionId, wFlag);
		return true;
	}

	/**
	 * Le serveur envoi 3 noeuds ndctsu pour d�crire un format dynamique. voir
	 * l'innerclasse "CDynFormat" Id=[NDCTSU] level=[C]
	 * x3func=[Control_DefineType] NbArgs=[3] - opt=[.x65] - su1 =[c] - su2 =[_]
	 */
	, listenNodeNDCTSU: function(aSegmentNode) {
		var wType = aSegmentNode.getNodeArgByte(0).getIntValue();
		var wSubType = aSegmentNode.getNodeArgString(1).getStringValue();
		var wComplement = aSegmentNode.getNodeArgString(2).getStringValue();
		// /Trace
		if (this.tracer.traceLevelFilter(ITracer.LEVEL_DEBUG)) {
			var wTB = this.tracer.popTraceBuffer();
			wTB.appendMethodName(LIB_METHOD_LISTEN_NDCTSU);
			wTB.appendDescr(LIB_FORMAT_TYPE, (char) wType);
			wTB.appendDescr(LIB_FORMAT_SUBTYPE, wSubType);
			wTB.appendDescr(LIB_FORMAT_COMPLEMENT, wComplement);
			this.tracer.trace(this, ITracer.LEVEL_DEBUG, wTB);
			this.tracer.pushTraceBuffer(wTB);
		}
		// FTrace*/
		/*
		 * Traite le premier noeud NDCTSU contenant le type. Exemple: Type=[g]
		 * SubType=[] Complement=[] Le noeud correspondant: Id=[NDCTSU]
		 * func=[Control_DefineType] NbArgs=[3] opt=[.x67] su1 =[] su2 =[])
		 */
		if (this.currentDynFormat == null) {
			this.currentDynFormat = new CDynFormat(String.valueOf((char) wType), this.formater);
			this.sessDynFormat.add(this.currentDynFormat);
		}
		/*
		 * Traite le deuxieme noeud NDCTSU contenant le SubType. Exemple:
		 * Type=[g] SubType=[AX] Complement=[] Le noeud correspondant:
		 * Id=[NDCTSU] func=[Control_DefineType] NbArgs=[3] opt=[.x67] su1 =[AX]
		 * su2 =[]
		 */
		else if (!this.currentDynFormat.hasSubType()) {
			this.currentDynFormat.setSubType(wSubType);
		}
		/*
		 * Traite le troisi�me noeud NDCTSU contenant le complement (ou non).
		 * Exemple: Type=[g] SubType=[AX] Complement=[] Le noeud correspondant:
		 * Id=[NDCTSU] func=[Control_DefineType] NbArgs=[3] opt=[.x67] su1 =[AX]
		 * su2 =[]
		 */
		else {
			/*
			 * mis en place du complement, creation du format dynamique dans le
			 * formater, et destroy du format dynamique
			 */
			this.currentDynFormat.setComplement(wComplement);
			this.currentDynFormat.createInFormater();
			this.currentDynFormat = null;
		}

		return true;
	}

	/**
	 * NDOMNCO 0E015E (MenuDyn_New) Id=[NDOMNCO] level=[R] x3func=[MenuDyn_New]
	 * NbArgs=[5] - flg=[.x58] - cod=[1026] - txt=[S�lection] - acc=[0] - hlp
	 * =[] parametre passes a la fonction "MenuDyn_New" du client X3 :
	 * 
	 * (*fnd)( (flg&0x40)>>6, fen, (flg&0x08)>>3, cod, txt, acc, (flg&0x7), 0,
	 * (flg&0x10)>>4, (flg&0x20)>>5, hlp ) ;
	 * 
	 * bFirst Premiere option (vide la liste) ((wByte & 0x40) >> 6) nRang Rang
	 * d'insertion de l'option (0 pas d'option) nType Type de l'option (flg &
	 * 0x08) >>3) nAction Action � renvoy�e au serveur pszText texte de l'option
	 * nAccel Acc�l�rateur nCateg Cat�gorie dans le type (flg&0x7) nImage Num�ro
	 * de l'image bValide Valide ou bien (flg&0x10)>>4 bSelect S�lectionn� ou
	 * bien (flg&0x20)>>5 pszhelp texte d'aide rapide
	 */
	, listenNodeNDOMNCO: function(aSegmentNode) {
		var wFlg = aSegmentNode.getNodeArgByte(0).getIntValue();
		var wActionId = aSegmentNode.getNodeArgShort(1).getIntValue();
		var wTxt = aSegmentNode.getNodeArgString(2).getStringValue();
		/*
		 * first node => flg=[.x58] others => flg=[.x18]
		 */
		var wVidage = (wFlg & 0x40) != 0;
		/*
		 * boolean wFlag = ((wByte & 0x40) >> 6) != 0; int wType = ((wByte &
		 * 0x08) >>3); wAcc >> 3
		 */
		var wType = (wFlg & 0x08) >> 3 == 0;
		// /Trace
		if (this.tracer.traceLevelFilter(ITracer.LEVEL_DEBUG) && this.tracer.traceModuleFilter(CAdapiClientConfig.TRACER_MODULE_BUTTONS)) {
			var wTB = this.tracer.popTraceBuffer();
			wTB.appendMethodName(LIB_METHOD_LISTEN_NDOMNCO);
			wTB.appendDescr(LIB_VIDAGE, wVidage);
			wTB.appendDescr(LIB_TYPE, wType); // ???
			wTB.appendDescr(LIB_ACTION_ID, wActionId);
			wTB.appendDescr(LIB_FLAG, true);
			wTB.appendDescr(LIB_LIB, wTxt);
			this.tracer.trace(this, ITracer.LEVEL_DEBUG, wTB);
			this.tracer.pushTraceBuffer(wTB);
		}
		// FTrace*/
		/*
		 * si ce n'est pas un enoeud de "vidage"
		 */
		if (!wType && wActionId > 0) // ???
		{
			/*
			 * si "vidage" de la liste
			 */
			if (wVidage) {
				removeCtxButtons();
			}
			new AdapiMenuCtx(this, wActionId, true, wTxt);
		}

		return true;
	}

	/**
	 * Changement element dans barre de statut Id=[NDOTXSC] level=[W]
	 * x3func=[Status_ChangeStatus] NbArgs=[6] - ist =[ win=[2] srn=[0] blc=[0]
	 * fld=[0] idx=[0]] - st[0]=[.x00] (byte) - st[1]=[132] (int) - buf[0] =[]
	 * (stru) - buf[1] =[] (stru) - st[2]=[3058] (int)
	 */
	, listenNodeNDOTXSC: function(aSegmentNode) {
		var wIst = aSegmentNode.getNodeArgIst(0).getStructIst();
		var wNumText = aSegmentNode.getNodeArgByte(1).getIntValue();
		var wImgId = aSegmentNode.getNodeArgShort(2).getIntValue();
		var wTxt = aSegmentNode.getNodeArgString(3).getStringValue();
		// String wTxt = aSegmentNode.getNodeArgString(4).getStringValue();
		var wActionId = aSegmentNode.getNodeArgShort(5).getIntValue();
		// /Trace
		if (this.tracer.traceLevelFilter(ITracer.LEVEL_DEBUG) && this.tracer.traceModuleFilter(CAdapiClientConfig.TRACER_MODULE_BUTTONS)) {
			var wTB = this.tracer.popTraceBuffer();
			wTB.appendMethodName(LIB_METHOD_LISTEN_NDOTXSC);
			wTB.appendDescr(LIB_NUM_TEXT, wNumText);
			wTB.appendDescr(LIB_LIB, wTxt);
			wTB.appendDescr(LIB_IMG_ID, wImgId);
			wTB.appendDescr(LIB_ACTION_ID, wActionId);
			wTB.appendDescr(LIB_IST, wIst);
			this.tracer.trace(this, ITracer.LEVEL_DEBUG, wTB);
			this.tracer.pushTraceBuffer(wTB);
		}
		// FTrace*/
		addStatusIconDef(wIst, wNumText, wTxt, wImgId, wActionId);
		return true;
	}

	/**
	 * Id=[NDPKAR] func=[LeftList_Picking] NbArgs=[1] - ist =[ win=[2] srn=[34]
	 * blc=[3] fld=[0] idx=[0]]
	 */
	, listenNodeNDPKAR: function(aSegmentNode) {
		var wSegReplyAction = null;
		if (this.adxIstsOfPickedLines.size() > 0) {
			var wPickedLine = this.adxIstsOfPickedLines.remove(0);
			ArrayList<Object> wActionArgs = new ArrayList<Object>();
			var wArgIst = wPickedLine.getIst();
			var wLeftListLine = (CAdapiLeftListLine) findModifiable(wArgIst);
			if (wLeftListLine != null) {
				// suppression du numero de ligne dans l'adxid de la lisgne pickee ajout de l'argument tdans la liste
				wArgIst.setLine(0);
				wActionArgs.add(wArgIst);
				// ajout de l'argument tableau de r�su qu'est la cle de la ligne  pickee
				wActionArgs.add(wLeftListLine.getCle());
			} else {
				wActionArgs.add(wArgIst);
				var wMess = getAdapiResources().getMessage(CAdapiResources.KEYMESS_ERROR_CANT_GET_PICKED_LINE_KEY);
				wMess = CStringFacilities.sprintf(wMess, String.valueOf(wArgIst.getIdx()));
				addLogicalErrorMess(this, "NDPKAR", wArgIst.getAlphanumCodage(), wMess);
			}
			wSegReplyAction = new CSegmentAction(this.tracer, getRemoteProtocolNum(), wPickedLine.getAction().intValue());
			// /Trace
			if (this.tracer.traceLevelFilter(ITracer.LEVEL_DEBUG)) {
				var wTB = this.tracer.popTraceBuffer();
				wTB.appendMethodName("NDPKAR");
				wTB.appendDescr("NbArgsToPutInSeg", wActionArgs.size());
				this.tracer.trace(this, ITracer.LEVEL_DEBUG, wTB);
				this.tracer.pushTraceBuffer(wTB);
			}
			// FTrace*/
			wSegReplyAction.setArgsValues(wActionArgs);

		} else {
			wSegReplyAction = new CSegmentAction(this.tracer, getRemoteProtocolNum(), CDefAction.SRV_ABANDON);
		}
		try {
			if (getTypeClient() == ETypeClient.JULIET) {
				getConnClientNode().writeSegment(wSegReplyAction);
			} else {
				writeSegment(wSegReplyAction, false);
			}
		} catch (e) {
			setServerNotConnected();
			throw new CCommException(CCommException.CANT_SEND, e, getAdonixResources().getMessCantSendAutomaticReply("NDPKAR"));
		}
		return true;
	}, listenSegment: function(aSegment) {
		var retour = false;
		retour = TODO_SUPER.listenSegment(aSegment);
		if (!retour && aSegment instanceof CSegmentNode) {
			var wSegmentNode = (CSegmentNode) aSegment;
			var wNodeId = wSegmentNode.getNodeId();
			switch (wNodeId) {
			case CDefNode.NDACTOP:
				retour = listenNodeNDACTOP(wSegmentNode);
				break;
			case CDefNode.NDOMNCO:
				retour = listenNodeNDOMNCO(wSegmentNode);
				break;
			case CDefNode.NDCTSU:
				retour = listenNodeNDCTSU(wSegmentNode);
				break;
			case CDefNode.NDOTXSC:
				retour = listenNodeNDOTXSC(wSegmentNode);
				break;
			case CDefNode.NDPKAR:
				retour = listenNodeNDPKAR(wSegmentNode);
				break;
			}
		}
		return retour;
	}, newActiveRequest: function(aAdonixReply, ArrayList<Object> aParams,Map<String,Object> sendContext) {
		synchronized (this) {
			razModifications();
			var wRequest = new CAdapiRequest(this, aAdonixReply, aParams,sendContext);
			this.activeRequest = wRequest;
		}
		return this.activeRequest;
	}, open: function(aAdonixContext) {
		try {
			initAdapiResources(aAdonixContext.getX3Language());
			if (isServerConnected()) {
				throw new RuntimeException("CANT_OPEN - one conn already opened !");
			}
			if (!hasApplicationId()) {
				throw new RuntimeException("CANT_OPEN - no ApplicationId set!");
			}
			initSessionWeight(aAdonixContext, this.adapiConfig.getSessionWeight());
			validAdonixContext(aAdonixContext);
			setCacheContext(aAdonixContext.getX3Language());
			/*
			 * creation de la requete de connexion sans segment action associe.
			 * Utilisation du constructeur de CAdonixRequest sans liste d'Args
			 * et avec une ActionId correspondant a une action locale.
			 */
			var aX3Reply = checkFailed((CX3Reply) connect(aAdonixContext, newActiveRequest(new CX3Reply(this, CDefAction.LOC_CONNECT), null,null)), "X3 Open Connexion failed");
			if (isServerConnected() && aX3Reply.isOk()) {
				((IConnClientNode) getConnClientNode()).setLogicalErrorListner(this);
			}
			aX3Reply = (CX3Reply) removeActiveRequest(aX3Reply);
			aX3Reply.setOneSessionSetting(ID_CHG_VON, this.formater.isVOn() ? "1" : "0");
			aX3Reply.setOneSessionSetting(ID_CHG_ZON, this.formater.isZOn() ? "1" : "0");
			return checkFailed(aX3Reply, "X3 Open Connexion failed");
		} finally {
			realeaseActiveRequest();
		}
	}, popRequesterWindow: function() {
		var window = this.stackedWindows.popStackedWindow();
		window.setOpened(false);
		return window;
	}, pushAffSynchroneMessage: function(aMessage) {
		this.affSynchroneMessages.addElement(aMessage);
	}, pushAffSynchroneMessTempOn: function(aMessage) {
		pushAffSynchroneMessage(new CAdapiMessage(CAdapi.AFF_SYNCHRONE_TYPE_TEMPON, this, aMessage,false));
	}, pushRequesterWindow: function(aWindowId, aFunctionId, aStamp, aWindowIdxBaseOne) {
		var wAdapiRequesterWindow = getNewStackedWindows(aWindowId, aFunctionId, aStamp, aWindowIdxBaseOne);
		this.stackedWindows.pushStackedWindow(wAdapiRequesterWindow);
		wAdapiRequesterWindow.setStackLevel(this.stackedWindows.size());
		wAdapiRequesterWindow.setOpened(true);
		return wAdapiRequesterWindow;

	}, razModifications: function() {
		this.stackedWindows.razModifications();
		this.formater.razModifications();
	}, realeaseActiveRequest: function() {
		var wActiveRequest;
		synchronized (this) {
			wActiveRequest = this.activeRequest;
			this.activeRequest = null;
		}
		if (wActiveRequest != null) {
			wActiveRequest.releaseRefs();
		}
	}

	private synchronized void releaseAllAffSynchroneMessages() {
		var wNbMess = getNbServerTempMess();
		if (wNbMess > 0) {
			this.affSynchroneMessages.removeAllElements();
		}
	}, releaseRefs: function() {
		this.formater.end();
		this.formater = null;
		this.motherWindow = null;
		this.stackedWindows.clear();
		this.stackedWindows = null;
		realeaseActiveRequest();
		this.adapiConfig = null;
		this.adapiResources = null;
		this.adxIstsOfPickedLines = null;
		releaseAllAffSynchroneMessages();
		this.affSynchroneMessages = null;
		this.applicationID = null;
		this.currentDynFormat = null;
		TODO_SUPER.releaseRefs();

	}, removeActiveRequest: function(aAdonixReply) {
		var wX3Reply = (CX3Reply) aAdonixReply;
		if (hasActiveRequest()) {
			wX3Reply = this.activeRequest.getX3Reply();
			realeaseActiveRequest();
		}
		return wX3Reply;
	}

	// Fusion
	abstract , removeCtxButtons: function();

	, sendActionCallRemote: function(ArrayList<Object> aX3ActionArgs) {
		var wX3Reply = new CX3Reply(this, CDefAction.SRV_CALLREMOTESPGM, CReply.OK);
		return TODO_SUPER.sendActionCallRemote(wX3Reply, aX3ActionArgs);
	}

	// Pour remontée des erreurs par exception
	, sendActionCallRemote: function(aSpgmElmt) {
		var reply = this.sendActionCallRemote(CStructIst.IST_WIN_ZERO, aSpgmElmt);
		if (reply.isOk()) {

		}
		return reply;
	}, sendX3Action: function(ArrayList<Object> args,Map<String,Object> sendContext) {
		try {
			var actionCode = args != null && !args.isEmpty() && args.get(0) instanceof Integer ? (Integer) args.get(0) : null;
			if (actionCode == null) {
				throw new RuntimeException("sendX3Action - Bad first argument - Integer expected");
			}
			return checkFailed((CX3Reply) sendAction(new CX3Reply(this, actionCode), args,sendContext), "X3 send action failed");
		} finally {
			releaseAllAffSynchroneMessages();
		}
	}, sendX3ActionAckCall: function(aAdxId, aSpgmElmtl) {
		ArrayList<Object> wX3ActionDatas = buildAckCallDatas(aAdxId, aSpgmElmtl);
		wX3ActionDatas.add(0, CStructIstDatas.getIstDatasNull(this.tracer));
		wX3ActionDatas.add(0, new Integer(CDefAction.SRV_CALLREMOTESPGM));
		return checkFailed(sendX3Action(wX3ActionDatas,null), "X3 send AckCall failed");

	}, sendX3ActionAckResi: function(aAdxId, aExecIstResultXml) {
		ArrayList<Object> wX3ActionDatas = buildActionAckResiDatas(aAdxId, aExecIstResultXml);
		wX3ActionDatas.add(0, CStructIstDatas.getIstDatasNull(this.tracer));
		wX3ActionDatas.add(0, new Integer(CDefAction.SRV_EXECI_RESPONSE));
		return sendX3Action(wX3ActionDatas,null);
	}, setActiveRequest: function(aRequest) {
		synchronized (this) {
			this.activeRequest = aRequest;
		}
		return this.activeRequest;
	}, setAdapiApplicationID: function(apId) {
		this.applicationID = apId;
	}, setCacheContext: function(aLang) {
		getAdonixContext().setLanguage(aLang);
	}, setCurrentDynFormat: function(this.currentDynFormat) {
		this.this.currentDynFormat = this.currentDynFormat;
	}, setCurrentField: function(currentField) {
		this.currentField = currentField;
	}, setMonthList: function(aStructProperty) {
		try {
			this.formater.setMonthList(aStructProperty.getStrValue());
		} catch (e) {
			throw new CCommException(CCommException.CANT_EXEC_NODE, e, "ND_SLF AskUi setMonthList");
		}
	}, setpTraceCli: function(this.traceCli) {
		this.this.traceCli = this.traceCli;
	}, storeUrlPortalSessionSetting: function(aId, aUrlPortal) {
		var wSB = new StringBuilder(128);
		var wPos = aUrlPortal.indexOf(URL_PORTAL_ROOT);
		if (wPos == -1) {
			wSB.append("error://le param�tre \"SessionSettings.PortalUrl\" contient un url erron� : absence de la racine du portail \"/ADX_PORTAL\". ");
			wSB.append(aUrlPortal);
		} else {
			/*
			 * par un url relatif au serveur de Web. exemple:
			 * "/x3webheaddata/[solution]
			 */
			wSB.append(getAdapiClientConfig().getParam(CAdapiClientConfig.VIRTUALPATHPAGES));
			// recuperation du nom de la solution dans l'url http
			var solName = getHttpX3ServerUrl().substring(getHttpX3ServerUrl().indexOf("_")); // prends pour hypothese que l'url est de la forme http://server:port/Adonix_SOL
			if (solName == null) {
				solName = getAdonixContext().getX3ServerAppliHostname();
			}
			wSB.append('/').append(solName);
			/*
			 * laisser la racine du portail "/ADX_PORTAL" comp�ter par la
			 * d�signation de la page de d�marrage. exemple :
			 * "/ADX_PORTAL/PortalStartCSF.htm"
			 */
			wSB.append(aUrlPortal.substring(wPos));
			/*
			 * on ajoute � l'URL les param�tres n�cessaires au fonctionnement du
			 * portail depuis le client Web : - DlgMode=WEB - LANG=xxx
			 */
			wSB.append('?').append(URL_PORTAL_PARAM_DLGMODE).append('=').append(URL_PORTAL_VALUE_DLGMODE);
			wSB.append('&').append(URL_PORTAL_PARAM_LANG).append('=').append(getAdonixContext().getLanguage());
		}
		setOneSessionSetting(aId, wSB.toString());
	}, toString: function() {
		return this.toStringDescr();
	}, toStringDescr: function() {
		return this.toStringDescr(null);
	}, toStringDescr: function(aSeparator) {
		var wSB = new StringBuilder(512);
		TODO_SUPER.addDescrInSB(wSB, aSeparator);
		if (this.tracer instanceof CTraceCliChanel) {
			if (aSeparator != null) {
				wSB.append(aSeparator);
			}
			CStringFacilities.addInStringDescr(wSB, "Canal", ((CTraceCliChanel) this.tracer).toString());
		}
		if (aSeparator != null) {
			wSB.append(aSeparator);
		}
		CStringFacilities.addInStringDescr(wSB, "NbParamConfig", this.adapiConfig.size());
		return wSB.toString();
	}

	/**
	 * construit l'Url utilis� par le browser en fonction de la pr�sence ou non
	 * du param�tre "UIAdxPubSubFile"
	 * 
	 * cas 1 <li>0= "UIAction="+chr$(1)+"OpenFile", <li>1= "UILocalDir="+
	 * chr$(1) +"HTTP", <li>2= "UILocalFile="+ chr$(1) +"www.meteo.fr/"
	 * 
	 * il faut seulelemnt ajouter le pr�fixe "http://" pour obtenir l'url absolu
	 * :
	 * 
	 * <pre>
	 * &quot;http://www.meteo.fr/&quot; Le browser utilise l'attribut &quot;url&quot; du noeud &quot;open_file&quot;
	 * </pre>
	 * 
	 * tel quel: <open_file url="http://www.meteo.fr/" " ></open_file>
	 * 
	 * cas 2 : <li>0= id=[UIAction] value=[OpenFile] <li>1= id=[UILocalDir]
	 * value=[HTTP] <li>2= id=[UILocalFile]
	 * value=[172.16.12.41:80/x3webdata/GX3APP/TMP/F5963808_EDITRTWEB_53711.xml]
	 * <li>3= id=[AdxPubSubFile] value=[1]
	 * 
	 * <p>
	 * Comme c'est un sous-fichier du dossier ADX_PUB du serveur d'application,
	 * celui ci doit etre atteind via le proxypass.
	 * <p>
	 * Il faut donc suprimer le pr�fixe de de la forme :
	 * "AdonixApplicationServerHostName:port/adxwedata/"
	 * <p>
	 * Le browser utilise l'attribut "url" du noeud "open_file" en ajoutant le
	 * prefixe "http://ServerWebHostName:port/AliasOfProxyPath/[solution]" :
	 * <open_file url="/GX3APP/TMP/F5963808_EDITRTWEB_53711.xml"
	 * uiadxpubsubfile="1" ></open_file>
	 */
	, translateLocalFileUrl: function(aUrlFile, ArrayList<CStructProperty> aListOfProperties) {
		var wSB = new StringBuilder(128);
		/*
		 * si ce n'est pas un "subfile" de ADX_PUB => on ajoute seulement
		 * "http://" devant "aUrlFile"
		 */
		if (!containsAdxPubSubFile(aListOfProperties)) {
			wSB.append(HTTP_PREFIX);
			wSB.append(aUrlFile);
		}
		/*
		 * sinon, si c'est un "subfile" de ADX_PUB, il faut suprimer le pr�fixe
		 * de de la forme "AdonixApplicationServerHostName:port/adxwedata/
		 */
		else {
			// 15w_016 - Fiche 44800 - Erreur d'URL sur export sur requeteur graphique
			aUrlFile = aUrlFile.replace('\\', '/');
			// recherche de la position du "slash" apr�s
			// "AdonixApplicationServerHostName:port"
			var wPos = aUrlFile.indexOf('/');
			// 15w_000 - Fiche 34938 - Protection contre les url malform�s dans les callui openfile
			if (wPos > -1 && wPos < aUrlFile.length() - 1) {
				// recherche de la position du "slash" apr�s l'alias du dossier ADX_PUB
				wPos = aUrlFile.indexOf('/', wPos + 1);
			}
			var wMalformedUrl = wPos == -1 || wPos > aUrlFile.length() - 1;
			if (wMalformedUrl) {
				var wMess = String.format(MESS_MALFORMED_URL, aUrlFile);
				var wException = new CCommException(CCommException.ERR_ARG_PROTOCOL, wMess);
				this.tracer.trace(this, "translateLocalFileUrl", wException);
				throw wException;
			}
			wSB.append(aUrlFile.substring(wPos));
		}
		return wSB.toString();
	}

	boolean traverseSettable(aStructIst, aAdapiModifier) {
		if (aStructIst.isWindowIst() && aStructIst.getWinZeroBase() == -1) {
			return aAdapiModifier.setAdapiModifiable(aStructIst, this.motherWindow);
		} else {
			return this.stackedWindows.traverseSettable(aStructIst, aAdapiModifier);
		}
	}

	// Obersver/Observable
	public , update: function(adapiObject, arg1);

	, validAdonixContext: function(aAdonixContext) {
		var wOsUserCrypted = null;
		var wX3PwdCrypted = null;
		try {
			// si userid OS re�u est crypt� "CRYPT:" : memorisation du userid OS crypte "CRYPT:" dans "wOsUserCrypted" et decryptage du userid OS dans "aOsUser"
			if (CCrypton.isCryptedPrefixedString(aAdonixContext.getOSUserId())) {
				wOsUserCrypted = aAdonixContext.getOSUserId();
				aAdonixContext.setOSUserId(CCrypton.X3DecryptPrefixedString(wOsUserCrypted));
			}
			// sinon, cryptage "CRYPT:" du userid OS dans "wOsUserCrypted"
			else {
				wOsUserCrypted = CCrypton.X3CryptPrefixedString(aAdonixContext.getOSUserId());
			}
			// si mot de passe OS re�u est crypte "CRYPT:" : memorisation du mot de passe OS crypte "CRYPT:" dans "wOsPwdCrypted" et decryptage du mot de passe OS dans "aOsPwd"
			if (CCrypton.isCryptedPrefixedString(aAdonixContext.getOSPassword())) {
				aAdonixContext.setOSPassword(CCrypton.X3DecryptPrefixedString(aAdonixContext.getOSPassword()));
			}
			// sinon, cryptage "CRYPT:" du mot de passe OS dans "wOsPwdCrypted"

			// si userid X3 est crypte "CRYPT:" : memorisation du userid X3 crypte "CRYPT:" dans "wX3UserCrypted" et decryptage du userid X3 dans "aX3User"
			if (CCrypton.isCryptedPrefixedString(aAdonixContext.getX3UserId())) {
				aAdonixContext.setX3UserId(CCrypton.X3DecryptPrefixedString(aAdonixContext.getX3UserId()));
			}
			// sinon, cryptage "CRYPT:" du userid X3 dans "wX3UserCrypted"
			// si mot de passe X3 est crypte "CRYPT:" decryptage du mot de passe X3 dans "aOsPwd", et cryptage "CRYX3:" du mot de passe X3 dans "wX3PwdCrypted"
			if (CCrypton.isCryptedPrefixedString(aAdonixContext.getX3Password())) {
				var wS = CCrypton.X3DecryptPrefixedString(aAdonixContext.getX3Password());
				if (wS.equalsIgnoreCase(CConfigBase.NO_PASSWORD)) {
					wS = ""; // si aX3Pwd = "none" => ""
				}
				aAdonixContext.setX3Password(wS);
			}
			var wX3password = aAdonixContext.getX3Password();
			// si mot de passe X3 est crypte "CRYX3:" : memorisation du mot de passe X3 crypt� "CRYX3:" dans "wX3PwdCrypted"
			if (CCrypton.isPassCryptedPrefixedString(wX3password)) {
				wX3PwdCrypted = wX3password;
			}
			// sinon, cryptage "CRYX3:" du mot de passe X3 dans "wX3UserCrypted"
			else {
				wX3PwdCrypted = CCrypton.X3CyptPass(wX3password);
			}
			aAdonixContext.setX3Password(wX3PwdCrypted);
		} catch (e) {
			var wMess = getAdapiResources().getMessage(CAdapiResources.KEYMESS_ERROR_CONTEXT_NOT_VALID, aAdonixContext.toStringDescr());
			throw new CAdapiException(this, e, "CANT_OPEN - " + wMess);
		}
	}

}
