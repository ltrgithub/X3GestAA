"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CAdapiModifier = require('syracuse-x3/lib/fusion/CAdapiModifier').CAdapiModifier;
var CAdapiEntity = require('syracuse-x3/lib/fusion/CAdapiEntity').CAdapiEntity;
var CAdonixClient = Object; //require('syracuse-x3/lib/fusion/CAdonixClient').CAdonixClient;
var CAdapiStackedWindows = require('syracuse-x3/lib/fusion/CAdapiStackedWindows').CAdapiStackedWindows;
var CAdapiStackedWindow = require('syracuse-x3/lib/fusion/CAdapiStackedWindow').CAdapiStackedWindow;
var CAdapiResources = require('syracuse-x3/lib/fusion/CAdapiResources').CAdapiResources;
var CX3Reply = require('syracuse-x3/lib/fusion/client/CX3Reply').CX3Reply;
var CAdapiRequest = require('syracuse-x3/lib/fusion/client/CAdapiRequest').CAdapiRequest;
var AdapiMenuAct = require('syracuse-x3/lib/fusion/AdapiMenuAct').AdapiMenuAct;

var CFormaterJava = exports.CFormaterJava = helpers.defineClass(function() {}, null, {
	razModifications: function() {},
	setNewDynamicFormat: function() {},
});

var CDynFormat = exports.CDynFormat = helpers.defineClass(function(aType, aFormater) {
	this.complement = null;
	this.subType = null;
	this.type = aType;
	this.formater = aFormater;
}, null, {
	createInFormater: function() {
		this.formater.setNewDynamicFormat(this.type, this.subType, this.complement);
	},
	hasSubType: function() {
		return this.subType != null;
	},
	setComplement: function(aComplement) {
		this.complement = aComplement;
	},
	setSubType: function(aSubType) {
		this.subType = aSubType;
	},

	/*
	 * c": { "stdType": ["A", "#"], "chars": ["", "-", "/", "_", ","] },
	 */
	toJSon: function() {
		var dynFmt = new JSONObject();
		if (this.complement != null) {
			var stdType = new JSONArray();

			for (i = 0; i < this.complement.length(); i++) {
				stdType.put(new Character(this.complement.charAt(i)).toString());
			}
			dynFmt.put("stdType", stdType);

		}
		if (this.subType != null) {
			var chars = new JSONArray();

			for (i = 0; i < this.subType.length(); i++) {
				chars.put(new Character(this.subType.charAt(i)).toString());
			}
			dynFmt.put("chars", chars);
		}

		return dynFmt;
	}
});

var CModifiableFinder = exports.CModifiableFinder = helpers.defineClass(function() {
	CAdapiModifier.call(this);
	this.foundModifiable = null;
}, CAdapiModifier, {
	setAdapiModifiable: function(aStructIst, aModifiable) {
		this.foundModifiable = aModifiable;
		this.done = true;
		return done();
	}
});

var CMotherWindow = exports.CMotherWindow = helpers.defineClass(function(aAdapiClient) {
	CAdapiEntity.call(this, aAdapiClient, "&ROOT", 1, 'WINDOW');
}, CAdapiEntity, {
	getAdxId: function() {
		return "mostherWindow - &ROOT";
	},
	toJson: function() {
		throw new RuntimeException("Ba tojson MotherWin");
	}
});

var ID_CHG_VON = "VOn";

var ID_CHG_ZON = "ZOn";

var HTTP_PREFIX = "http://";
var ADXID_MOTHER = "A";
var CALLUI_LOCALDIR_HTTP = "HTTP";
var CALLUI_OPENFILE_LOCALDIR = "UILocalDir";
var CALLUI_OPENFILE_LOCALFILE = "UILocalFile";
var CHG_DATE_FORMAT_SERVER = "DefaultDateFormat";
var CHG_MONTH_LIBS = "SetMonthList";
var CHG_PIVOT_DATE = "DefaultDatePivot";
var CHG_URL_PORTAL = "PortalUrl";
var LIB_ACTION_ID = "ActId";
var LIB_FLAG = "Flag";
var LIB_FORMAT_COMPLEMENT = "Complement";
var LIB_FORMAT_SUBTYPE = "SubType";
var LIB_FORMAT_TYPE = "Type";
var LIB_IMG_ID = "ImgId";
var LIB_IST = "ist";
var LIB_LIB = "Lib";
var LIB_NUM_TEXT = "NumText";
var LIB_THROWABLE = "Throwable";
var LIB_TYPE = "typ";
var LIB_VIDAGE = "clean";
var MESS_MALFORMED_URL = "Malformed url, not an AdxPubSubFile !";
var UIADXPUBSUBFILE = "UIAdxPubSubFile";
var URL_PORTAL_PARAM_DLGMODE = "DlgMode";
var URL_PORTAL_PARAM_LANG = "LANG";
var URL_PORTAL_ROOT = "/ADX_PORTAL";
var URL_PORTAL_VALUE_DLGMODE = "WEB";

var CDefAction = {
	LOC_CONNECT: 1,
}

var CAdapiClient = exports.CAdapiClient = helpers.defineClass(function(aAdapiConfig, aType) {
	CAdonixClient.call(this, aAdapiConfig, aType);
	this.adapiClientConfig = aAdapiConfig;
	
	this.activeRequest = null;
	this.adapiResources = null;
	this.adxIstsOfPickedLines = [];
	this.affSynchroneMessages = [];
	this.applicationID = null;
	this.sessDynFormat = [];

	this.currentDynFormat = null;
	this.formater = null;
	this.logicalErrorMessage = null;
	this.uuid = null;

	this.adapiConfig = aAdapiConfig;
	this.initFormater();
	this.motherWindow = new CMotherWindow(this);
	this.stackedWindows = new CAdapiStackedWindows();
	this.initAdapiResources("en-US");
	this.withLogicalErrDetails = false; //this.adapiClientConfig.getBoolParam(CAdonixConfig.WITH_LOGICAL_ERR_DETAILS);
	// added by BRJOU - open not called any more
	this.newActiveRequest(new CX3Reply(this, CDefAction.LOC_CONNECT), null, null);
}, CAdonixClient, {


	addAdxIstOfPickedLines: function(aAdapiPickedLine) {
		this.adxIstsOfPickedLines.add(aAdapiPickedLine);
	},
	addLogicalErrorMess: function(aObject, aMethod, aIst, aMessage) {
		if (hasActiveRequest()) {
			this.activeRequest.reply.addLogicalErrorMess(aObject, aMethod, aIst, aMessage);
		} else {
			if (this.logicalErrorMessage == null) {
				var wMess = this.adapiResources.getMessage(CAdapiResources.KEYMESS_ERROR_LOGICAL);
				this.logicalErrorMessage = new CAdapiMessage(CReplyMessage.WEBSERVER, this, wMess, false);
			}
			this.logicalErrorMessage.addWebServerLocicalMess(CAdapiReply.buildLogicalErrorMess(aObject, aMethod, aIst, aMessage));
		}
	},
	addStatusIconDef: function(instance, aNumText, aTxt, aImgId, aActionId) {
		var winFound = null;
		for (i = 0; i < this.stackedWindows.size() && winFound == null; i++) {
			var item = this.stackedWindows.get(i);
			if (item.getAdxIst().winAlphaId.equals(instance.winAlphaId)) {
				winFound = item;
			}
		}
		if (winFound != null) {
			winFound.addStatusIconDef(instance, aNumText, aTxt, aImgId, aActionId);
		}
	},
	changePivotDate: function(prop) {
		try {
			this.formater.setUserDateFormat(this.adapiConfig.uiParamIDATE, this.adapiConfig.uiParamSEPDATE, parseInt(prop.strValue));
		} catch (e) {
			throw new RuntimeException("Bad pivot date", e);
		}
		setOneSessionSetting(prop.id, prop.strValueNotNull);
	},
	changeUserContext: function(aAguments) {
		TODO_SUPER.changeUserContext(aAguments);
		if (hasActiveRequest()) {
			var reply = this.activeRequest.adonixReply;
			if (reply.hasChangedAdonixLang()) {
				setCacheContext(reply.changedAdonixLang);
			}
		}
	},
	clearAdxIstsOfPickedLines: function() {
		this.adxIstsOfPickedLines.clear();
	}

	// CLoseSocket
	,
	closeClient: function(fromSameThread, e, reason) {
		console.log("CloseClient FusionAdapi Client\n\tReason[" + reason + "]\n\tAlreadyClosed[" + (this.connClient == null || !this.connClient.hasSocket()) + "] - Exception[" + (e == null ? "No" : e.message) + "]");
		TODO_SUPER.closeClient(fromSameThread, e, reason);
	},
	configFormater: function() {
		console.log("FORMATTER NIY");
		return;
		/*
		 * 0 (mm/jj/aa) si DATE_FORMAT_KEY = 21 ou 22 1 (jj/mm/aa) si
		 * DATE_FORMAT_KEY = 11 ou 12
		 *
		 * MDY=0, DMY=1, YMD=2 => (1, "/", 1950).
		 */
		var wDateOrder = this.adapiConfig.uiParamIDATE;
		var wDateSep = this.adapiConfig.uiParamSEPDATE;
		var wPivotDate = this.adapiConfig.uiParamPIVOTDATE;
		this.formater.setUserDateFormat(wDateOrder, wDateSep, wPivotDate);
		this.formater.setUserDecimalSep(this.adapiConfig.uiParamSEPDECIMAL);
		this.formater.setUserThousandSep(this.adapiConfig.uiParamSEPTHOUSAND);
		// pour optilmiser le flux xml vers le browser: suprime les espaces de cadrage a droite pour les valeur alpha.
		this.formater.setVOn(this.adapiConfig.getFormaterVon());
		this.formater.setZOn(true);
	},

	// retourne vrai si la liste de propri�t� contient la propriete
	containsAdxPubSubFile: function(aListOfProperties) {
		var wProperty;
		var wMax = aListOfProperties.size();
		var wI = 3; // pour demarer a la 4eme propriete !
		while (wI < wMax) {
			wProperty = aListOfProperties.get(wI);
			if (wProperty.hasId() && wProperty.id.equalsIgnoreCase(UIADXPUBSUBFILE)) {
				return true;
			}
			wI++;
		}
		return false;
	}

	// Demande d'une déconnexion au serveur X3
	,
	deconnectClient: function(reason) {
		try {
			console.log("Deconnect client\n\tReason[" + (reason == null ? "none" : reason) + "]\n\tAsk X3 server to close ");
			return checkFailed(deconnect(new CX3Reply(this, CDefAction.SRV_FIN_APPL)), "X3 deconnexion failed");
		} finally {
			realeaseActiveRequest();
		}
	}
	/*
	 * Demande au serveur UI d'ouvrir un fichier. si le paramere "UILocalDir"
	 * contient HTTP, c'est pour ouvrir un fichier via IE
	 *
	 * Exemples : <ul> <li>0= id=[UIAction] value=[OpenFile]</li> <li>1=
	 * id=[UILocalDir] value=[HTTP]</li> <li>2= id=[UILocalFile]
	 * value=[172.16.12
	 * .41:80/x3webdata/GX3APP/TMP/F5963808_EDITRTWEB_53711.xml]</li> <li>3=
	 * id=[ADXPUB_SubFile] value=[1]</li> </ul>
	 *
	 * Ce CallUi est employe pour ouvrir des exports xml ou excel
	 *
	 * <pre> "UIAction="+chr$(1)+"OpenFile", "UILocalDir="+ chr$(1) +"HTTP",
	 * "UILocalFile="+ chr$(1) +"www.meteo.fr/"
	 *
	 * "UIAction="+chr$(1)+"OpenFile", "UILocalDir="+ chr$(1) +"tmp",
	 * "UILocalFile="+ chr$(1) +"test.txt" </pre>
	 */
	,
	executeCallUiOpenFile: function(aListOfProperties) {
		var wMax = aListOfProperties.size();
		if (wMax > 2) {
			var wLocalDir = aListOfProperties.get(1).strValue;
			var wLocalFile = aListOfProperties.get(2).strValue;

			var wUrl = new StringBuilder(128);
			/*
			 * si UILocalDir == "HTTP", alors UILocalFile contient un URL
			 */
			if (wLocalDir.equals(CALLUI_LOCALDIR_HTTP)) {
				wUrl.append(translateLocalFileUrl(wLocalFile, aListOfProperties));
			}
			/*
			 * sinon, et UILocalFile sont des chemins et un nom de
			 * fichier relatifs au dossier HOME de l'utilisateur
			 */
			else {
				wUrl.append(this.adapiClientConfig.getParam(CAdapiClientConfig.USERHOMEVIRTUALPATH));
				wUrl.append('/');
				wUrl.append(wLocalDir);
				wUrl.append('/');
				wUrl.append(wLocalFile);
			}
			var wReply = this.activeRequest.adonixReply;
			var wCallUiOpenFile = wReply.addAskOpenFile(wUrl.toString());
			var wProperty;
			var wPropertyId;
			var wI = 3;
			while (wI < wMax) {
				wProperty = aListOfProperties.get(wI);
				wPropertyId = wProperty.id;
				if (!wPropertyId.equals(CALLUI_OPENFILE_LOCALDIR) && !wPropertyId.equals(CALLUI_OPENFILE_LOCALFILE)) {
					wCallUiOpenFile.addOneParam(wPropertyId.toLowerCase(), wProperty.strValue);
				}
				wI++;
			}
		}
		return CAdonixCallUiReply.OK;
	}

	/**
	 * valorisation de laliste des noms de mois dans l'instance du formateur
	 * Callui RETOUR=&quot;&quot; With
	 * &quot;UIAction=&quot;+chr$(1)+&quot;SessionSettings
	 * &quot;,&quot;FormatMonthList=&quot;+chr$(1)+ janvier;fevrier;mars;...
	 * Callui RETOUR=&quot;&quot; With
	 * &quot;UIAction=&quot;+chr$(1)+&quot;SessionSettings
	 * &quot;,&quot;DefaultDateFormat=&quot;+chr$(1)+ JJ[/]MM[/]AAAA Callui
	 * RETOUR=&quot;&quot; With
	 * &quot;UIAction=&quot;+chr$(1)+&quot;SessionSettings
	 * &quot;,&quot;DefaultDatePivot=&quot;+chr$(1)+ num$(adxdcs)
	 */
	,
	executeOneSessionSetting: function(aStructProperty, areply) {
		var wId = aStructProperty.id;
		if (aStructProperty.id.equalsIgnoreCase(CHG_MONTH_LIBS)) {
			setMonthList(aStructProperty);
			if (hasActiveRequest()) {
				var wAdonixReply = this.activeRequest.adonixReply;
				wAdonixReply.setChangedMonthLibs(aStructProperty.strValue);
			}
		} else if (isUrlPortalSessionSetting(aStructProperty.id)) {
			storeUrlPortalSessionSetting(aStructProperty.id, aStructProperty.strValue);
		} else if (wId.equalsIgnoreCase(CHG_DATE_FORMAT_SERVER)) {
			this.adapiClientConfig.setServerDateFormat(aStructProperty.strValue);
			setOneSessionSetting(aStructProperty.id, aStructProperty.strValue);
		} else if (aStructProperty.id.equalsIgnoreCase(CHG_PIVOT_DATE)) {
			changePivotDate(aStructProperty);
		} else {
			TODO_SUPER.executeOneSessionSetting(aStructProperty, areply);
		}
	},
	findModifiable: function(aStructIst) {
		var wSettableFinder = new CModifiableFinder();
		traverseSettable(aStructIst, wSettableFinder);
		return wSettableFinder.foundModifiable;
	},
	getNewStackedWindows: function(aWindowId, aFunctionId, aDescr, aStamp, aWindowIdxBaseOne) {
		var window = new CAdapiStackedWindow(this, aWindowId, aFunctionId, aDescr, aStamp, aWindowIdxBaseOne);
		window.addObserver(this);
		window.forceChange(); // notify observer for create wins
		return window;
	},
	hasActiveRequest: function() {
		return this.activeRequest != null;
	},
	hasApplicationId: function() {
		return this.applicationID != null;
	},
	hasValidFormater: function() {
		return this.formater != null && this.formater.isValid();
	},
	initAdapiResources: function(aLanguage) {
		var wOldLang = this.adapiResources != null ? this.adapiResources.askedAdonxiLang : null;
		var wMustReinit = wOldLang == null || !wOldLang.equals(aLanguage);
		if (wMustReinit) {
			//this.adapiResources = new CAdapiResources(aLanguage);
		}
	},
	initFormater: function() {
		this.formater = new CFormaterJava();
		this.configFormater();
	},
	initSessionWeight: function(aAdonixContext, aSessionWeight) {
		aAdonixContext.setX3SessionWeight(aSessionWeight);
	},
	isUrlPortalSessionSetting: function(aId) {
		return aId.toLowerCase().startsWith(CHG_URL_PORTAL.toLowerCase());
	},
	isWithLogicalErrDetails: function() {
		return this.withLogicalErrDetails;
	},
	listenException: function(e) {
		if (hasActiveRequest()) {
			this.activeRequest.reply.setStatusNOTOK(e);
		}
		return true;
	},
	listenLogicalErr: function(aObject, aMethode, aMessage) {
		if (isWithLogicalErrDetails()) {
			this.addLogicalErrorMess(aObject, aMethode, "", aMessage);
		}

	},
	// Connection messages
	listenNodeNDCOPMENU: function(_, req, node, data) {
		//reply.setSplashInfos(data);
	},
	listenNodeNDDEB: function(_, req, node) {},

	/**
	 * NDACTOBJ (Adxcpl_displayWin) Affichage d'une fenetre Id=[NDACTOBJ]
	 * x3func=[Adxcpl_displayWin] NbArgs=[2] - ist =[ win=[2] srn=[0] blc=[0]
	 * fld=[0] idx=[0]] - opt=[.x04]
	 */
	listenNodeNDACTOBJ: function(_, req, node, ist, num) {
		var WIN_NOHIDDEN = 4;
		if (num > WIN_NOHIDDEN) {
			var win = findModifiable(ist);
			if (win != null && win instanceof CAdapiStackedWindow) {
				win.setScreenToShow(num - WIN_NOHIDDEN + 1);
			}
		} else {
			// TODO
		}
	},

	/**
	 * NDACTOP 0E4000 (Activation_Action) Activation d=[NDACTOP] level=[?]
	 * x3func=[Activation_Action] nb=[2] - ide=[2823] ID Action - typ=[.x01]
	 * Status
	 */
	listenNodeNDACTOP: function(_, req, node, wActionId, wFlag) {
		new AdapiMenuAct(this, wActionId, wFlag);
	},

	/**
	 * Le serveur envoi 3 noeuds ndctsu pour d�crire un format dynamique. voir
	 * l'innerclasse "CDynFormat" Id=[NDCTSU] level=[C]
	 * x3func=[Control_DefineType] NbArgs=[3] - opt=[.x65] - su1 =[c] - su2 =[_]
	 */
	listenNodeNDCTSU: function(_, req, node, wType, wSubType, wComplement) {
		/*
		 * Traite le premier noeud NDCTSU contenant le type. Exemple: Type=[g]
		 * SubType=[] Complement=[] Le noeud correspondant: Id=[NDCTSU]
		 * func=[Control_DefineType] NbArgs=[3] opt=[.x67] su1 =[] su2 =[])
		 */
		if (this.currentDynFormat == null) {
			this.currentDynFormat = new CDynFormat(String.valueOf(wType), this.formater);
			this.sessDynFormat.push(this.currentDynFormat);
		}
		/*
		 * Traite le deuxieme noeud NDCTSU contenant le SubType. Exemple:
		 * Type=[g] SubType=[AX] Complement=[] Le noeud correspondant:
		 * Id=[NDCTSU] func=[Control_DefineType] NbArgs=[3] opt=[.x67] su1 =[AX]
		 * su2 =[]
		 */
		else if (!this.currentDynFormat.hasSubType()) {
			this.currentDynFormat.setSubType(wSubType);
		}
		/*
		 * Traite le troisi�me noeud NDCTSU contenant le complement (ou non).
		 * Exemple: Type=[g] SubType=[AX] Complement=[] Le noeud correspondant:
		 * Id=[NDCTSU] func=[Control_DefineType] NbArgs=[3] opt=[.x67] su1 =[AX]
		 * su2 =[]
		 */
		else {
			/*
			 * mis en place du complement, creation du format dynamique dans le
			 * formater, et destroy du format dynamique
			 */
			this.currentDynFormat.setComplement(wComplement);
			this.currentDynFormat.createInFormater();
			this.currentDynFormat = null;
		}
	},

	/**
	 * NDOMNCO 0E015E (MenuDyn_New) Id=[NDOMNCO] level=[R] x3func=[MenuDyn_New]
	 * NbArgs=[5] - flg=[.x58] - cod=[1026] - txt=[S�lection] - acc=[0] - hlp
	 * =[] parametre passes a la fonction "MenuDyn_New" du client X3 :
	 *
	 * (*fnd)( (flg&0x40)>>6, fen, (flg&0x08)>>3, cod, txt, acc, (flg&0x7), 0,
	 * (flg&0x10)>>4, (flg&0x20)>>5, hlp ) ;
	 *
	 * bFirst Premiere option (vide la liste) ((wByte & 0x40) >> 6) nRang Rang
	 * d'insertion de l'option (0 pas d'option) nType Type de l'option (flg &
	 * 0x08) >>3) nAction Action � renvoy�e au serveur pszText texte de l'option
	 * nAccel Acc�l�rateur nCateg Cat�gorie dans le type (flg&0x7) nImage Num�ro
	 * de l'image bValide Valide ou bien (flg&0x10)>>4 bSelect S�lectionn� ou
	 * bien (flg&0x20)>>5 pszhelp texte d'aide rapide
	 */
	listenNodeNDOMNCO: function(_, req, node, wFlg, wActionId, wTxt) {
		/*
		 * first node => flg=[.x58] others => flg=[.x18]
		 */
		var wVidage = (wFlg & 0x40) != 0;
		/*
		 * boolean wFlag = ((wByte & 0x40) >> 6) != 0; int wType = ((wByte &
		 * 0x08) >>3); wAcc >> 3
		 */
		var wType = (wFlg & 0x08) >> 3 == 0;
		/*
		 * si ce n'est pas un enoeud de "vidage"
		 */
		if (!wType && wActionId > 0) // ???
		{
			/*
			 * si "vidage" de la liste
			 */
			if (wVidage) {
				removeCtxButtons();
			}
			new AdapiMenuCtx(this, wActionId, true, wTxt);
		}
	},

	/**
	 * Changement element dans barre de statut Id=[NDOTXSC] level=[W]
	 * x3func=[Status_ChangeStatus] NbArgs=[6] - ist =[ win=[2] srn=[0] blc=[0]
	 * fld=[0] idx=[0]] - st[0]=[.x00] (byte) - st[1]=[132] (int) - buf[0] =[]
	 * (stru) - buf[1] =[] (stru) - st[2]=[3058] (int)
	 */
	listenNodeNDOTXSC: function(_, req, node, wIst, wNumText, wImgId, wTxt, wTxtDummy, wActionId) {
		addStatusIconDef(wIst, wNumText, wTxt, wImgId, wActionId);
	},

	/**
	 * Id=[NDPKAR] func=[LeftList_Picking] NbArgs=[1] - ist =[ win=[2] srn=[34]
	 * blc=[3] fld=[0] idx=[0]]
	 */
	listenNodeNDPKAR: function(_, req, node) {
		var wSegReplyAction = null;
		if (this.adxIstsOfPickedLines.size() > 0) {
			var wPickedLine = this.adxIstsOfPickedLines.remove(0);
			var wActionArgs = new ArrayList();
			var wArgIst = wPickedLine.ist;
			var wLeftListLine = findModifiable(wArgIst);
			if (wLeftListLine != null) {
				// suppression du numero de ligne dans l'adxid de la lisgne pickee ajout de l'argument tdans la liste
				wArgIst.setLine(0);
				wActionArgs.add(wArgIst);
				// ajout de l'argument tableau de r�su qu'est la cle de la ligne  pickee
				wActionArgs.add(wLeftListLine.cle);
			} else {
				wActionArgs.add(wArgIst);
				var wMess = this.adapiResources.getMessage(CAdapiResources.KEYMESS_ERROR_CANT_GET_PICKED_LINE_KEY);
				wMess = CStringFacilities.sprintf(wMess, String.valueOf(wArgIst.idx));
				addLogicalErrorMess(this, "NDPKAR", wArgIst.alphanumCodage, wMess);
			}
			wSegReplyAction = new CSegmentAction(this.remoteProtocolNum, wPickedLine.action.intValue());
			wSegReplyAction.setArgsValues(wActionArgs);

		} else {
			wSegReplyAction = new CSegmentAction(this.remoteProtocolNum, CDefAction.SRV_ABANDON);
		}
		try {
			if (this.typeClient == ETypeClient.JULIET) {
				this.connClientNode.writeSegment(wSegReplyAction);
			} else {
				writeSegment(wSegReplyAction, false);
			}
		} catch (e) {
			setServerNotConnected();
			throw new CCommException(CCommException.CANT_SEND, e, this.adonixResources.getMessCantSendAutomaticReply("NDPKAR"));
		}
	},

	listenSegment: function(aSegment) {
		var retour = false;
		retour = TODO_SUPER.listenSegment(aSegment);
		if (!retour && aSegment instanceof CSegmentNode) {
			var wSegmentNode = aSegment;
			var wNodeId = wSegmentNode.nodeId;
			switch (wNodeId) {
			case CDefNode.NDACTOP:
				retour = listenNodeNDACTOP(wSegmentNode);
				break;
			case CDefNode.NDOMNCO:
				retour = listenNodeNDOMNCO(wSegmentNode);
				break;
			case CDefNode.NDCTSU:
				retour = listenNodeNDCTSU(wSegmentNode);
				break;
			case CDefNode.NDOTXSC:
				retour = listenNodeNDOTXSC(wSegmentNode);
				break;
			case CDefNode.NDPKAR:
				retour = listenNodeNDPKAR(wSegmentNode);
				break;
			}
		}
		return retour;
	},
	newActiveRequest: function(aAdonixReply, aParams, sendContext) {
		this.razModifications();
		var wRequest = new CAdapiRequest(this, aAdonixReply, aParams, sendContext);
		this.activeRequest = wRequest;
		return this.activeRequest;
	},
	open: function(aAdonixContext) {
		throw new Error("not used")
		try {
			initAdapiResources(aAdonixContext.x3Language);
			if (isServerConnected()) {
				throw new RuntimeException("CANT_OPEN - one conn already opened !");
			}
			if (!hasApplicationId()) {
				throw new RuntimeException("CANT_OPEN - no ApplicationId set!");
			}
			initSessionWeight(aAdonixContext, this.adapiConfig.sessionWeight);
			validAdonixContext(aAdonixContext);
			setCacheContext(aAdonixContext.x3Language);
			/*
			 * creation de la requete de connexion sans segment action associe.
			 * Utilisation du constructeur de CAdonixRequest sans liste d'Args
			 * et avec une ActionId correspondant a une action locale.
			 */
			var aX3Reply = checkFailed(connect(aAdonixContext, newActiveRequest(new CX3Reply(this, CDefAction.LOC_CONNECT), null, null)), "X3 Open Connexion failed");
			if (isServerConnected() && aX3Reply.isOk()) {
				this.connClientNode.setLogicalErrorListner(this);
			}
			aX3Reply = removeActiveRequest(aX3Reply);
			aX3Reply.setOneSessionSetting(ID_CHG_VON, this.formater.isVOn() ? "1" : "0");
			aX3Reply.setOneSessionSetting(ID_CHG_ZON, this.formater.isZOn() ? "1" : "0");
			return checkFailed(aX3Reply, "X3 Open Connexion failed");
		} finally {
			realeaseActiveRequest();
		}
	},
	popRequesterWindow: function() {
		var window = this.stackedWindows.popStackedWindow();
		window.setOpened(false);
		return window;
	},
	pushAffSynchroneMessage: function(aMessage) {
		this.affSynchroneMessages.addElement(aMessage);
	},
	pushAffSynchroneMessTempOn: function(aMessage) {
		pushAffSynchroneMessage(new CAdapiMessage(CAdapi.AFF_SYNCHRONE_TYPE_TEMPON, this, aMessage, false));
	},
	pushRequesterWindow: function(aWindowId, aFunctionId, aDescr, aStamp, aWindowIdxBaseOne) {
		var wAdapiRequesterWindow = this.getNewStackedWindows(aWindowId, aFunctionId, aDescr, aStamp, aWindowIdxBaseOne);
		this.stackedWindows.pushStackedWindow(wAdapiRequesterWindow);
		wAdapiRequesterWindow.setStackLevel(this.stackedWindows.length);
		wAdapiRequesterWindow.setOpened(true);
		return wAdapiRequesterWindow;
	},
	razModifications: function() {
		this.stackedWindows.razModifications();
		this.formater.razModifications();
	},
	realeaseActiveRequest: function() {
		var wActiveRequest;
		wActiveRequest = this.activeRequest;
		this.activeRequest = null;
		if (wActiveRequest != null) {
			wActiveRequest.releaseRefs();
		}
	},
	releaseAllAffSynchroneMessages: function() {
		var wNbMess = this.affSynchroneMessages.size();
		if (wNbMess > 0) {
			this.affSynchroneMessages.removeAllElements();
		}
	},
	releaseRefs: function() {
		this.formater.end();
		this.formater = null;
		this.motherWindow = null;
		this.stackedWindows.clear();
		this.stackedWindows = null;
		realeaseActiveRequest();
		this.adapiConfig = null;
		this.adapiResources = null;
		this.adxIstsOfPickedLines = null;
		releaseAllAffSynchroneMessages();
		this.affSynchroneMessages = null;
		this.applicationID = null;
		this.currentDynFormat = null;
		TODO_SUPER.releaseRefs();

	},
	removeActiveRequest: function(aAdonixReply) {
		var wX3Reply = aAdonixReply;
		if (hasActiveRequest()) {
			wX3Reply = this.activeRequest.reply;
			realeaseActiveRequest();
		}
		return wX3Reply;
	},

	// Fusion
	//abstract removeCtxButtons: function();
	sendActionCallRemote: function(aX3ActionArgs) {
		var wX3Reply = new CX3Reply(this, CDefAction.SRV_CALLREMOTESPGM, CReply.OK);
		return TODO_SUPER.sendActionCallRemote(wX3Reply, aX3ActionArgs);
	},

	// Pour remontée des erreurs par exception
/* TODO overload
	sendActionCallRemote: function(aSpgmElmt) {
		var reply = this.sendActionCallRemote(CStructIst.IST_WIN_ZERO, aSpgmElmt);
		if (reply.isOk()) {

		}
		return reply;
	},*/
	sendX3Action: function(args, sendContext) {
		try {
			var actionCode = args != null && !args.isEmpty() && args.get(0) instanceof Integer ? args.get(0) : null;
			if (actionCode == null) {
				throw new RuntimeException("sendX3Action - Bad first argument - Integer expected");
			}
			return checkFailed(sendAction(new CX3Reply(this, actionCode), args, sendContext), "X3 send action failed");
		} finally {
			releaseAllAffSynchroneMessages();
		}
	},
	sendX3ActionAckCall: function(aAdxId, aSpgmElmtl) {
		var wX3ActionDatas = buildAckCallDatas(aAdxId, aSpgmElmtl);
		wX3ActionDatas.add(0, CStructIstDatas.getIstDatasNull());
		wX3ActionDatas.add(0, new Integer(CDefAction.SRV_CALLREMOTESPGM));
		return checkFailed(sendX3Action(wX3ActionDatas, null), "X3 send AckCall failed");

	},
	sendX3ActionAckResi: function(aAdxId, aExecIstResultXml) {
		var wX3ActionDatas = buildActionAckResiDatas(aAdxId, aExecIstResultXml);
		wX3ActionDatas.add(0, CStructIstDatas.getIstDatasNull());
		wX3ActionDatas.add(0, new Integer(CDefAction.SRV_EXECI_RESPONSE));
		return sendX3Action(wX3ActionDatas, null);
	},
	setActiveRequest: function(aRequest) {
		this.activeRequest = aRequest;
		return this.activeRequest;
	},
	setAdapiApplicationID: function(apId) {
		this.applicationID = apId;
	},
	setCacheContext: function(aLang) {
		this.adonixContext.setLanguage(aLang);
	},
	setCurrentDynFormat: function(currentDynFormat) {
		this.currentDynFormat = currentDynFormat;
	},
	setCurrentField: function(currentField) {
		this.currentField = currentField;
	},
	setMonthList: function(aStructProperty) {
		try {
			this.formater.setMonthList(aStructProperty.strValue);
		} catch (e) {
			throw new CCommException(CCommException.CANT_EXEC_NODE, e, "ND_SLF AskUi setMonthList");
		}
	},
	storeUrlPortalSessionSetting: function(aId, aUrlPortal) {
		var wSB = new StringBuilder(128);
		var wPos = aUrlPortal.indexOf(URL_PORTAL_ROOT);
		if (wPos == -1) {
			wSB.append("error://le param�tre \"SessionSettings.PortalUrl\" contient un url erron� : absence de la racine du portail \"/ADX_PORTAL\". ");
			wSB.append(aUrlPortal);
		} else {
			/*
			 * par un url relatif au serveur de Web. exemple:
			 * "/x3webheaddata/[solution]
			 */
			wSB.append(this.adapiClientConfig.getParam(CAdapiClientConfig.VIRTUALPATHPAGES));
			// recuperation du nom de la solution dans l'url http
			var solName = this.httpX3ServerUrl.substring(this.httpX3ServerUrl.indexOf("_")); // prends pour hypothese que l'url est de la forme http://server:port/Adonix_SOL
			if (solName == null) {
				solName = this.adonixContext.x3ServerAppliHostname;
			}
			wSB.append('/').append(solName);
			/*
			 * laisser la racine du portail "/ADX_PORTAL" comp�ter par la
			 * d�signation de la page de d�marrage. exemple :
			 * "/ADX_PORTAL/PortalStartCSF.htm"
			 */
			wSB.append(aUrlPortal.substring(wPos));
			/*
			 * on ajoute � l'URL les param�tres n�cessaires au fonctionnement du
			 * portail depuis le client Web : - DlgMode=WEB - LANG=xxx
			 */
			wSB.append('?').append(URL_PORTAL_PARAM_DLGMODE).append('=').append(URL_PORTAL_VALUE_DLGMODE);
			wSB.append('&').append(URL_PORTAL_PARAM_LANG).append('=').append(this.adonixContext.language);
		}
		setOneSessionSetting(aId, wSB.toString());
	},
	toString: function() {
		return this.toStringDescr();
	},
	toStringDescr: function(aSeparator) {
		var wSB = new StringBuilder(512);
		TODO_SUPER.addDescrInSB(wSB, aSeparator);
		if (aSeparator != null) {
			wSB.append(aSeparator);
		}
		CStringFacilities.addInStringDescr(wSB, "NbParamConfig", this.adapiConfig.size());
		return wSB.toString();
	}

	/**
	 * construit l'Url utilis� par le browser en fonction de la pr�sence ou non
	 * du param�tre "UIAdxPubSubFile"
	 *
	 * cas 1 <li>0= "UIAction="+chr$(1)+"OpenFile", <li>1= "UILocalDir="+
	 * chr$(1) +"HTTP", <li>2= "UILocalFile="+ chr$(1) +"www.meteo.fr/"
	 *
	 * il faut seulelemnt ajouter le pr�fixe "http://" pour obtenir l'url absolu
	 * :
	 *
	 * <pre>
	 * &quot;http://www.meteo.fr/&quot; Le browser utilise l'attribut &quot;url&quot; du noeud &quot;open_file&quot;
	 * </pre>
	 *
	 * tel quel: <open_file url="http://www.meteo.fr/" " ></open_file>
	 *
	 * cas 2 : <li>0= id=[UIAction] value=[OpenFile] <li>1= id=[UILocalDir]
	 * value=[HTTP] <li>2= id=[UILocalFile]
	 * value=[172.16.12.41:80/x3webdata/GX3APP/TMP/F5963808_EDITRTWEB_53711.xml]
	 * <li>3= id=[AdxPubSubFile] value=[1]
	 *
	 * <p>
	 * Comme c'est un sous-fichier du dossier ADX_PUB du serveur d'application,
	 * celui ci doit etre atteind via le proxypass.
	 * <p>
	 * Il faut donc suprimer le pr�fixe de de la forme :
	 * "AdonixApplicationServerHostName:port/adxwedata/"
	 * <p>
	 * Le browser utilise l'attribut "url" du noeud "open_file" en ajoutant le
	 * prefixe "http://ServerWebHostName:port/AliasOfProxyPath/[solution]" :
	 * <open_file url="/GX3APP/TMP/F5963808_EDITRTWEB_53711.xml"
	 * uiadxpubsubfile="1" ></open_file>
	 */
	,
	translateLocalFileUrl: function(aUrlFile, aListOfProperties) {
		var wSB = new StringBuilder(128);
		/*
		 * si ce n'est pas un "subfile" de ADX_PUB => on ajoute seulement
		 * "http://" devant "aUrlFile"
		 */
		if (!containsAdxPubSubFile(aListOfProperties)) {
			wSB.append(HTTP_PREFIX);
			wSB.append(aUrlFile);
		}
		/*
		 * sinon, si c'est un "subfile" de ADX_PUB, il faut suprimer le pr�fixe
		 * de de la forme "AdonixApplicationServerHostName:port/adxwedata/
		 */
		else {
			// 15w_016 - Fiche 44800 - Erreur d'URL sur export sur requeteur graphique
			aUrlFile = aUrlFile.replace('\\', '/');
			// recherche de la position du "slash" apr�s
			// "AdonixApplicationServerHostName:port"
			var wPos = aUrlFile.indexOf('/');
			// 15w_000 - Fiche 34938 - Protection contre les url malform�s dans les callui openfile
			if (wPos > -1 && wPos < aUrlFile.length() - 1) {
				// recherche de la position du "slash" apr�s l'alias du dossier ADX_PUB
				wPos = aUrlFile.indexOf('/', wPos + 1);
			}
			var wMalformedUrl = wPos == -1 || wPos > aUrlFile.length() - 1;
			if (wMalformedUrl) {
				var wMess = String.format(MESS_MALFORMED_URL, aUrlFile);
				var wException = new CCommException(CCommException.ERR_ARG_PROTOCOL, wMess);
				throw wException;
			}
			wSB.append(aUrlFile.substring(wPos));
		}
		return wSB.toString();
	},
	traverseSettable: function(aStructIst, aAdapiModifier) {
		if (aStructIst.isWindowIst() && aStructIst.winZeroBase == -1) {
			return aAdapiModifier.setAdapiModifiable(aStructIst, this.motherWindow);
		} else {
			return this.stackedWindows.traverseSettable(aStructIst, aAdapiModifier);
		}
	},

	// Obersver/Observable
	// update: function(adapiObject, arg1);
	validAdonixContext: function(aAdonixContext) {
		var wOsUserCrypted = null;
		var wX3PwdCrypted = null;
		try {
			// si userid OS re�u est crypt� "CRYPT:" : memorisation du userid OS crypte "CRYPT:" dans "wOsUserCrypted" et decryptage du userid OS dans "aOsUser"
			if (CCrypton.isCryptedPrefixedString(aAdonixContext.oSUserId)) {
				wOsUserCrypted = aAdonixContext.oSUserId;
				aAdonixContext.setOSUserId(CCrypton.X3DecryptPrefixedString(wOsUserCrypted));
			}
			// sinon, cryptage "CRYPT:" du userid OS dans "wOsUserCrypted"
			else {
				wOsUserCrypted = CCrypton.X3CryptPrefixedString(aAdonixContext.oSUserId);
			}
			// si mot de passe OS re�u est crypte "CRYPT:" : memorisation du mot de passe OS crypte "CRYPT:" dans "wOsPwdCrypted" et decryptage du mot de passe OS dans "aOsPwd"
			if (CCrypton.isCryptedPrefixedString(aAdonixContext.oSPassword)) {
				aAdonixContext.setOSPassword(CCrypton.X3DecryptPrefixedString(aAdonixContext.oSPassword));
			}
			// sinon, cryptage "CRYPT:" du mot de passe OS dans "wOsPwdCrypted"
			// si userid X3 est crypte "CRYPT:" : memorisation du userid X3 crypte "CRYPT:" dans "wX3UserCrypted" et decryptage du userid X3 dans "aX3User"
			if (CCrypton.isCryptedPrefixedString(aAdonixContext.x3UserId)) {
				aAdonixContext.setX3UserId(CCrypton.X3DecryptPrefixedString(aAdonixContext.x3UserId));
			}
			// sinon, cryptage "CRYPT:" du userid X3 dans "wX3UserCrypted"
			// si mot de passe X3 est crypte "CRYPT:" decryptage du mot de passe X3 dans "aOsPwd", et cryptage "CRYX3:" du mot de passe X3 dans "wX3PwdCrypted"
			if (CCrypton.isCryptedPrefixedString(aAdonixContext.x3Password)) {
				var wS = CCrypton.X3DecryptPrefixedString(aAdonixContext.x3Password);
				if (wS.equalsIgnoreCase(CConfigBase.NO_PASSWORD)) {
					wS = ""; // si aX3Pwd = "none" => ""
				}
				aAdonixContext.setX3Password(wS);
			}
			var wX3password = aAdonixContext.x3Password;
			// si mot de passe X3 est crypte "CRYX3:" : memorisation du mot de passe X3 crypt� "CRYX3:" dans "wX3PwdCrypted"
			if (CCrypton.isPassCryptedPrefixedString(wX3password)) {
				wX3PwdCrypted = wX3password;
			}
			// sinon, cryptage "CRYX3:" du mot de passe X3 dans "wX3UserCrypted"
			else {
				wX3PwdCrypted = CCrypton.X3CyptPass(wX3password);
			}
			aAdonixContext.setX3Password(wX3PwdCrypted);
		} catch (e) {
			var wMess = this.adapiResources.getMessage(CAdapiResources.KEYMESS_ERROR_CONTEXT_NOT_VALID, aAdonixContext.toStringDescr());
			throw new CAdapiException(this, e, "CANT_OPEN - " + wMess);
		}
	}
});

CAdapiClient.checkFailed = function(adxReply, info, reason) {
	if (adxReply == null || !adxReply.isOk()) {
		var t = adxReply != null ? adxReply.throwable : null;
		// Format Exception - pas de throws Exception
		if (t != null && t instanceof CAdapiException && t.isFormatException()) {
			return adxReply;
		}
		var diag = new CDiagnosis(ESDataErrorCode.ApplicationDiagnosis);
		diag.setApplicationCode(EApplicationCode.ERROR.toString());
		var msgs = new StringBuilder();
		if (adxReply != null) {
			if (adxReply.hasWhy()) {
				msgs.append("WHY[" + adxReply.whyString + "]\n");
			}
			if (adxReply.hasMessages()) {
				for (var msg in adxReply.messages) {
					msgs.append(msg.mess + "\n");
				}
			}
		}
		msgs.append(t.message).append("\n");
		diag.setMessage(msgs.toString());
		diag.setStatusCode(500);
		diag.setSeverity(ESeverity.ERROR.toString());
		diag.setStackTrace(t);
		FusionExcep.throwAdapiExcep(reason, info, new CXSDataException(diag));
	}
	return adxReply;
}

CAdapiClient.checkFailed = function(adxReply, reason) {
	return checkFailed(adxReply, FusionClientInfo.X3COM, reason);
}