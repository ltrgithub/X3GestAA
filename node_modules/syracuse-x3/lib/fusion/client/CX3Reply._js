"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CAdapiReply = Object; //require('syracuse-x3/lib/fusion/CAdapiReply').CAdapiReply;

var WINDOW_NO_CHANGE = false;
/**
 * Modelisation des reponses fournies au browser.
 */
var CX3Reply = exports.CX3Reply = helpers.defineClass(function(aAdapiClient, aOrderId, aStatus) {
	aStatus = aStatus !== undefined ? aStatus : CReply.OK;
	CAdapiReply.call(this, aAdapiClient, aOrderId, aStatus, new CAdapiMessages(aAdapiClient));
	this.callUiOpenFiles = null;
	this.changeWindow = new Boolean(WINDOW_NO_CHANGE);
	this.popedWindows = null;
	this.pusheddWindows = null;
	this.winMenus = null;
	// Pour calcul des menu d'une fenêtre - Les noeud MDOMNBO sont reçus avant le noeud NDOWIN - Les menus fenêtre sont tous fils du menu 307
}, CAdapiReply, {
/* TODO overload
	public CX3Reply(aAdapiClient, aOrderId) {
		this(aAdapiClient, aOrderId.intValue(), CReply.OK);
	},*/
	addAskOpenFile: function(aUrl) {
		if (this.callUiOpenFiles == null) {
			this.callUiOpenFiles = new CAdapiAskOpenFiles();
		}
		return this.callUiOpenFiles.addOneOpenFile(aUrl);
	},

	// AJOUT MENU FENETRE
	addMenuWin: function(flag, actionId, label, menuId, rank, adxId, accelerateur) {
		if (this.winMenus == null) {
			this.winMenus = new AdapiWinMenuList();
		}
		var winMenu = menuId == 307 || this.winMenus.containsMenu(menuId);
		var menu = new AdapiMenuWin(this.adapiClient, actionId, flag, label, menuId, rank, adxId, accelerateur, !winMenu);
		if (winMenu) {
			this.winMenus.addMenu(menu);
		}
	},
	addMessageAbort: function(e) {
		this.messages.addMessageAbort(e);
	},
	addPopedWindow: function(aAdapiRequesterWindow) {
		if (this.popedWindows == null) {
			this.popedWindows = new CAdapiStackedWindows();
		}
		this.popedWindows.add(aAdapiRequesterWindow);
		setChangeWindow();
	},
	addPushedWindow: function(aAdapiRequesterWindow) {
		if (this.pusheddWindows == null) {
			this.pusheddWindows = new CAdapiStackedWindows();
		}
		this.pusheddWindows.add(aAdapiRequesterWindow);
		aAdapiRequesterWindow.setMenuList(this.winMenus);
		this.winMenus = null;
	},
	getMess: function(aIdx) {
		return this.messages.getMess(aIdx);
	},
	getPopedWindowId: function(aIdx) {
		if (hasPopedWindow() && aIdx < this.popedWindows.size()) {
			return this.popedWindows.get(aIdx).id;
		} else {
			return null;
		}
	},
	getPushedWindow: function(aIdx) {
		if (hasPushedWindow() && aIdx < this.pusheddWindows.size()) {
			return this.pusheddWindows.get(aIdx);
		} else {
			return null;
		}
	},
	getPushedWindowId: function(aIdx) {
		var wAdapiRequesterWindow = getPushedWindow(aIdx);
		if (wAdapiRequesterWindow != null) {
			return wAdapiRequesterWindow.id;
		} else {
			return null;
		}
	},
	hasPopedWindow: function() {
		return this.popedWindows != null && this.popedWindows.size() > 0;
	},
	hasPushedWindow: function() {
		return this.pusheddWindows != null && this.pusheddWindows.size() > 0;
	},
	isWindowChanged: function() {
		return this.changeWindow.booleanValue();
	},
	setAskOpenHelpParam: function(aAskOpenHelpParam) {
		// TODO - Non utilisé  this.askOpenHelpParam = aAskOpenHelpParam;
	},
	setAskOpenSession: function(aOpenSessionParam) {
		// TODO - Non utilisé this.askOpenSessionParam = aOpenSessionParam;
	},
	setAskUiAction: function(aAskUiAction) {
		// TODO - Non utilisé this.askUiAction = aAskUiAction;
	},
	setChangeWindow: function() {
		this.changeWindow = new Boolean(true);
	},
	setStamp: function(aStamp) {
		// TODO - Non utilisé this.sTAMP = CX3Reply.convReplyLong(aStamp);
	}
});