"use strict"; var helpers = require('syracuse-core/lib/helpers');

var CAdapi = helpers.defineClass(function() {}, CAdonix, {
	public final static int AFF_SYNCHRONE_ACTION_CLOSE = 3;
	public final static int AFF_SYNCHRONE_ACTION_MODIFY = 2;
	public final static int AFF_SYNCHRONE_ACTION_OPEN = 1;
	public final static String AFF_SYNCHRONE_LIB_ACTION_CLOSE = "CLO";
	public final static String AFF_SYNCHRONE_LIB_ACTION_MODIFY = "MOD";
	public final static String AFF_SYNCHRONE_LIB_ACTION_OPEN = "OPE";
	public final static String AFF_SYNCHRONE_LIB_TYPE_ACKREQUEST = "ACK_";
	public final static String AFF_SYNCHRONE_LIB_TYPE_DEBUG = "DBG_";
	public final static String AFF_SYNCHRONE_LIB_TYPE_PROGRESS = "PROG";
	public final static String AFF_SYNCHRONE_LIB_TYPE_SESSION = "SESS";
	public final static String AFF_SYNCHRONE_LIB_TYPE_TEMPON = "TEMP";
	public final static String AFF_SYNCHRONE_LIB_TYPE_VALIDCAR = "VLC_";
	public final static String AFF_SYNCHRONE_LIB_TYPE_VOICE = "VOIC";
	public final static int AFF_SYNCHRONE_TYPE_ACKREQUEST = 24;
	public final static int AFF_SYNCHRONE_TYPE_DEBUGOFF = 22;
	public final static int AFF_SYNCHRONE_TYPE_DEBUGON = 21;
	public final static int AFF_SYNCHRONE_TYPE_PROGRESS = 14;
	public final static int AFF_SYNCHRONE_TYPE_SESSION = 20;
	public final static int AFF_SYNCHRONE_PREFIX_LONG = 9;
	public final static int AFF_SYNCHRONE_TYPE_TEMPON = 12;
	public final static int AFF_SYNCHRONE_TYPE_VALIDCAR = 13;
	public final static int AFF_SYNCHRONE_TYPE_VOICE = 25;
	public final static int AFF_SYNCHRONE_TYPE_LONG = 4;
	public final static int AFF_SYNCHRONE_HEADER_LONG = 2;
	public final static int AFF_SYNCHRONE_ACTION_LONG = 3;
	public final static String AFF_SYNCHRONE_HEADER = "$$";
	protected final static int END = -1;
	protected final static int UNKNOWN = 0;

	public final static String WIN_ROOT_ID = "&ROOT";

	public static String affSynchroneActionToString(aAction) {
		switch (aAction) {
		case AFF_SYNCHRONE_ACTION_CLOSE:
			return AFF_SYNCHRONE_LIB_ACTION_CLOSE;

		case AFF_SYNCHRONE_ACTION_MODIFY:
			return AFF_SYNCHRONE_LIB_ACTION_MODIFY;

		case AFF_SYNCHRONE_ACTION_OPEN:
			return AFF_SYNCHRONE_LIB_ACTION_OPEN;

		default:
			return null;
		}
	}

	public static String affSynchroneTypeToString(aType) {
		switch (aType) {
		case CAdapi.AFF_SYNCHRONE_TYPE_ACKREQUEST:
			return AFF_SYNCHRONE_LIB_TYPE_ACKREQUEST;

		case AFF_SYNCHRONE_TYPE_VALIDCAR:
			return AFF_SYNCHRONE_LIB_TYPE_VALIDCAR;

		case AFF_SYNCHRONE_TYPE_PROGRESS:
			return AFF_SYNCHRONE_LIB_TYPE_PROGRESS;

		case CAdapi.AFF_SYNCHRONE_TYPE_TEMPON:
			return AFF_SYNCHRONE_LIB_TYPE_TEMPON;

		case CAdapi.AFF_SYNCHRONE_TYPE_SESSION:
			return AFF_SYNCHRONE_LIB_TYPE_SESSION;

		case CAdapi.AFF_SYNCHRONE_TYPE_DEBUGON:
		case CAdapi.AFF_SYNCHRONE_TYPE_DEBUGOFF:
			return AFF_SYNCHRONE_LIB_TYPE_DEBUG;

		case CAdapi.AFF_SYNCHRONE_TYPE_VOICE:
			return AFF_SYNCHRONE_LIB_TYPE_VOICE;

		default:
			return null;
		}
	}

	private static long puissance(aInteger, aPuissance) {
		if (aPuissance == 0) {
			return 1;
		} else {
			var wResult = aInteger;
			for (wI = 1; wI < aPuissance; wI++) {
				wResult *= aInteger;
			}
			return wResult;
		}
	}

	// 20121222113428 --> 2012/12/22 - 11:34:28
	public static String timeStampFormats(ts, dateOrder) {
		if (ts == null) {
			return "";
		}
		String y, m, d;
		if (ts.length() >= 4) {
			y = ts.substring(0, 4);
			ts = ts.substring(4);
			if (ts.length() >= 2) {
				m = ts.substring(0, 2);
				ts = ts.substring(2);
				if (ts.length() >= 2) {
					d = ts.substring(0, 2);
					ts = ts.substring(2);
					var sb = new StringBuilder();
					if (dateOrder == CJFmtObject.FTM_X3DATE_DMY) {
						sb.append(d).append('/').append(m).append('/').append(y);
					} else if (dateOrder == CJFmtObject.FTM_X3DATE_YMD) {
						sb.append(y).append('/').append(m).append('/').append(d);
					} else {
						sb.append(m).append('/').append(d).append('/').append(y);
					}
					if (ts.length() >= 2) {
						sb.append(" - ").append(ts.substring(0, 2));
						ts = ts.substring(2);
						if (ts.length() >= 2) {
							sb.append(':').append(ts.substring(0, 2));
							ts = ts.substring(2);
							if (ts.length() >= 2) {
								sb.append(':').append(ts.substring(0, 2));
								ts = ts.substring(2);
							}
							return sb.toString();
						}
					}
				}
			}
		}
		return ts;

	}

	public static long timeStampToMillisecs(aTimeStamp) {
		var wDiviseur = puissance(10, 10);
		var year = new Long(aTimeStamp / wDiviseur).intValue();

		aTimeStamp = aTimeStamp - year * wDiviseur;
		wDiviseur = puissance(10, 8);
		var month = new Long(aTimeStamp / wDiviseur).intValue();

		aTimeStamp = aTimeStamp - month * wDiviseur;
		wDiviseur = puissance(10, 6);
		var date = new Long(aTimeStamp / wDiviseur).intValue();

		aTimeStamp = aTimeStamp - date * wDiviseur;
		wDiviseur = puissance(10, 4);
		var hour = new Long(aTimeStamp / wDiviseur).intValue();

		aTimeStamp = aTimeStamp - hour * wDiviseur;
		wDiviseur = puissance(10, 2);
		var minute = new Long(aTimeStamp / wDiviseur).intValue();

		aTimeStamp = aTimeStamp - minute * wDiviseur;
		wDiviseur = puissance(10, 0);
		var second = new Long(aTimeStamp / wDiviseur).intValue();

		java.util.Calendar wCalendar = java.util.Calendar.getInstance();
		wCalendar.set(year, month - 1, date, hour, minute, second); // mois de 0
		// ï¿½ 11
		wCalendar.set(java.util.Calendar.MILLISECOND, 0);
		return wCalendar.getTime().getTime();
	}

}