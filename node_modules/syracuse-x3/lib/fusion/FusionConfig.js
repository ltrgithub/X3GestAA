"use strict";
var helpers = require('syracuse-core/lib/helpers');


var HANGUP_TEMP = "runtime_bundle.webclient.hangup.check.tompo";
var ACTIVE_FUSION = "runtime.bundle_fusion.active.on";
var SYRA_PUB_KEY = "runtime.bundle_fusion.public.key";
var SYRA_PRIV_KEY = "runtime.bundle_fusion.private.key";
var REUSE_MAX_TIME_IN_STACK = "runtime.bundle_fusion.timeout.free.reuse.session";
var REUSE_CHECK_INTERVAL = "runtime.bundle_fusion.reuse.stack.checkinterval";
var FUSION_ACTIVE_RECORD_EXCHANGE_FOLDER = "runtime.bundle_fusion.client.recording.folder";
var FUSION_ACTIVE_RECORD_EXCHANGE = "runtime.bundle_fusion.client.recording.on";
var RECORD_DIRPREF = "FusionClient_";
// TODO
//var TEMPDIR = CConstants.DIR_TEMP;
//var PUBLICDIR = CConstants.DIR_PUBLIC;
//var PUBLICDIR_SERVLETPATH = "/" + PUBLICDIR;
var HTTPDIR = "http";

var FusionConfig = {
	getBool: function(key) {
		try {
			var val = getProp(key, false);
			if (val == null) {
				val = "";
			}
			val = val.trim().toLowerCase();
			return "on" === val || "true" === val || "yes" === val;
		} catch (e) {}
		return false;
	},
	installDataPath: "installDataPath",
	installToolPath: "installToolPath",

	getInt: function(key, def) {
		var res = getPropInt(key, false);
		return res == null ? def : res.intValue();
	},

	getIntMandatory: function(key, def) {
		return getPropInt(key, true);
	},

	getJSONMainInfo: function() {
		var cfgCtx = {};
		cfgCtx.host = this.localHost;
		cfgCtx.tools = this.installToolPath;
		cfgCtx.data = this.installDataPath;
		cfgCtx.systemarch = getStr("all.control.systemarch", "");
		cfgCtx.systembits = getStr("all.control.systembits", "");
		cfgCtx.systemtype = getStr("all.control.systemtype", "");
		cfgCtx.sdataPort = getStr("runtime.bundle_sdata.http.port", "");
		cfgCtx.jettyPort = getStr("runtime.service.jetty.port", "");
		cfgCtx.installpatch = getStr("all.control.installpatch", "");
		cfgCtx.installvers = getStr("all.control.installvers", "");
		cfgCtx.installversname = getStr("all.control.installversname", "");
		cfgCtx.installversnum = getStr("all.control.installversnum", "");
		cfgCtx.installfix = getStr("all.control.installfix", "");
		cfgCtx.installminor = getStr("all.control.installminor", "");
		cfgCtx.installfix = getStr("all.control.installfix", "");
		cfgCtx.builddate = CContextCore.config.buildDate;
		return cfgCtx;
	},

	localHost: "localhost",

	getLong: function(key, def) {
		var res = getPropLong(key, false);
		return res == null ? def : res.longValue();
	},

	getLongMandatory: function(key, def) {
		return getPropLong(key, true);
	},

	getProp: function(key, mandatory) {
		try {
			var res = CContextCore.config.getProperty(key);
			if (mandatory && res != null) {
				res = res.trim();
			}
			if (mandatory && (res == null || res.isEmpty())) {
				throw new Error("Empty property");
			}
			return res;
		} catch (e) {
			if (mandatory) {
				FusionExcep.throwConfigExcep(e.message + " - Key[" + key + "]", e);
			}
		}
		return null;
	},
	getPropInt: function(key, mandatory) {
		try {
			return getProp(key, mandatory);
		} catch (e) {
			if (mandatory) {
				FusionExcep.throwConfigExcep("Bad int value - Key[" + key + "]", e);
			}
		}
		return null;
	},
	getPropLong: function(key, mandatory) {
		try {
			return new Long(getProp(key, mandatory));
		} catch (e) {
			if (mandatory) {
				FusionExcep.throwConfigExcep("Bad long value - Key[" + key + "]", e);
			}
		}
		return null;
	},
	getStr: function(key, def) {
		var r = getProp(key, false);
		return r == null ? def : r;
	},
	getStrMandatory: function(key) {
		return getProp(key, true);
	},
	isFusionActive: function() {
		return getBool(ACTIVE_FUSION);
	},
	recordGetServletAccessParent: function(customSubFolder, sessId) {
		return PUBLICDIR_SERVLETPATH + "/" + recordSubFolder(customSubFolder);
	},
	// Voir config jetty - File acces - /com.sage.x3.simulator/all/tool/TOOLS/jettyhome/contexts/fusion_record.xml
	recordGetServletAccessPath: function(customSubFolder, sessId, fileName) {
		return recordGetServletAccessParent(customSubFolder, sessId) + "/" + RECORD_DIRPREF + sessId + "/" + HTTPDIR + "/" + fileName;
	},
	recordSubFolder: function(customSubFolder) {
		if (customSubFolder == null || customSubFolder.trim().isEmpty()) {
			return getStr(FusionConfig.FUSION_ACTIVE_RECORD_EXCHANGE_FOLDER, "fusion_record");
		} else {
			return customSubFolder.trim();
		}
	}
}