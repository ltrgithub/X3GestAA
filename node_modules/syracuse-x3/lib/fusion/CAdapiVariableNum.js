"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CAdapiVariable = require('syracuse-x3/lib/fusion/CAdapiVariable').CAdapiVariable;

var MAX_DECIMAL_WHEN_UNKNONW = 10;
var UNKNOWN_DECIMAL = -1;
var X3_DECIMAL_SYMBOL = '.';
var X3_NUMERIQ_MOINS = '-';
var X3_NUMERIQ_PLUS = '+';

var CAdapiVariableNum = exports.CAdapiVariableNum = helpers.defineClass(function(srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState) {
	CAdapiVariable.call(this, srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState);
	this.symbolDecimal = X3_DECIMAL_SYMBOL;
	this.symbolThousand = ' ';
	this.whithSymbolThousand = false;
	this.withoutZero = false;
	this.adjustFormatInfos();
}, CAdapiVariable, {
	adjustFormatInfos: function() {
		var wFormat = this.format;
		if (this.mustBeFormated()) {
			this.withoutZero = wFormat.isWithoutZero();
			this.whithSymbolThousand = wFormat.isWhithSymbolThousand();
			this.setDecimal(wFormat.nbDecimal);
			var wConfig = this.srcLine.adapiClient.adapiClientConfig;
			if (this.whithSymbolThousand) {
				this.symbolThousand = wConfig.getCharParam(CAdonixConfig.NUM_SYMBOL_THOUSAND_KEY);
			}
			if (this.isWithDecimal()) {
				this.symbolDecimal = wConfig.getCharParam(CAdonixConfig.NUM_SYMBOL_DECIMAL_KEY);
			}
		}
	},
	clone: function() {
		var wVariable = new CAdapiVariableNum(this.srcLine, this.entityIndexBaseOne, this.name, this.id, this.dataType, this.format, this.state);
		wVariable.setMustBeFormated(this.mustBeFormated());
		wVariable.this.withoutZero = this.withoutZero;
		wVariable.this.whithSymbolThousand = this.whithSymbolThousand;
		wVariable.this.symbolThousand = this.symbolThousand;
		wVariable.this.symbolDecimal = this.symbolDecimal;
		this.cloneValues(wVariable);
		return wVariable;
	},
	formatDecimals: function(aDecimal, aNbDec) {
		var wResult = null;
		var wLen = 0;
		if (aNbDec == UNKNOWN_DECIMAL) {
			wLen = aDecimal.length();
			if (wLen < MAX_DECIMAL_WHEN_UNKNONW) {
				wResult = aDecimal;
			} else {
				wResult = CStringFacilities.padNum2StringLeft(aDecimal, MAX_DECIMAL_WHEN_UNKNONW);
			}
		} else if (aDecimal == null) {
			wResult = CStringFacilities.buildStringFromChar('0', aNbDec);
		} else {
			wLen = aDecimal.length();
			if (wLen == aNbDec) {
				wResult = aDecimal;
			} else {
				wResult = CStringFacilities.padNum2StringLeft(aDecimal, aNbDec);
			}
		}
		return wResult;
	},
	formatHimself: function(aValue) {
		if (!this.mustBeFormated()) {
			return aValue;
		}
		if (this.withoutZero) {
			try {
				var wFloat = java.lang.Float.valueOf(aValue);
				if (wFloat.floatValue() == 0) {
					return "";
				}
			} catch (e) {
				return aValue;
			}
		}
		var wEntier = null;
		var wDecimals = null;
		var wPos = aValue.indexOf('.');
		if (wPos == -1) {
			wEntier = aValue;
		} else {
			wEntier = aValue.substring(0, wPos);
			wDecimals = aValue.substring(wPos + 1);
		}
		var wHasDecimal = this.isWithDecimal() && wDecimals != null && wDecimals.length() != 0;
		if (wHasDecimal) {
			wDecimals = this.formatDecimals(wDecimals, this.decimals);
		}
		if (this.whithSymbolThousand) {
			wEntier = this.formatThousand(wEntier, this.symbolThousand);
		}
		var wLen = wEntier.length();
		if (wHasDecimal) {
			wLen += 1 + wDecimals.length();
		}
		var wSB = new StringBuilder(wLen);
		wSB.append(wEntier);
		if (wHasDecimal) {
			wSB.append(this.symbolDecimal).append(wDecimals);
		}
		return wSB.toString();
	},
	formatThousand: function(aEntier, aSymbolThousand) {
		var wResult = null;
		if (aEntier.length() > 3) {
			wResult = CStringFacilities.formatNumString(aEntier, aSymbolThousand);
		} else {
			wResult = aEntier;
		}
		return wResult;
	},
	formatX3ToDisplay: function(aData) {
		if (aData.isNum()) {
			return CAdapiVariable.prototype.formatX3ToDisplay.call(this,aData);
		} else {
			if (!aData.isNull()) {
				var wMess = getRsrcMess(CAdapiResources.KEYMESS_ERROR_RESU_NOT_NUMERIC);
				wMess = CStringFacilities.sprintf(wMess, this.id, CStructResu.x3typeToString(aData.resuTyp), this.format.string);
				this.adapiClient.addLogicalErrorMess(this, "formatData", this.getAdxId(), wMess);
			}
			return aData.value;
		}
	},
	setServerFormat: function(aFormat) {
		var wInferredState = CAdapiVariable.prototype.setServerFormat.call(this,aFormat);
		if (this.mustBeFormated()) {
			this.withoutZero = aFormat.isWithoutZero();
			this.whithSymbolThousand = aFormat.isWhithSymbolThousand();
			var wConfig = this.srcLine.adapiClient.adapiClientConfig;
			if (this.whithSymbolThousand) {
				this.symbolThousand = wConfig.getCharParam(CAdonixConfig.NUM_SYMBOL_THOUSAND_KEY);
			}
			if (this.isWithDecimal()) {
				this.symbolDecimal = wConfig.getCharParam(CAdonixConfig.NUM_SYMBOL_DECIMAL_KEY);
			}
		}
		return wInferredState;
	},
	unFormatData: function(aValue) {
		if (!this.mustBeFormated()) {
			return aValue;
		}
		if (aValue == null) {
			return null;
		}
		if (aValue.length() == 0) {
			return aValue;
		}
		return this.callUnFormater(aValue);
	},
	unformatHimself: function(aValue) {
		var wLen = aValue.length();
		var wSB = new StringBuilder(wLen);
		var wCurChar;
		for (wI = 0; wI < wLen; wI++) {
			wCurChar = aValue.charAt(wI);
			if (Character.isDigit(wCurChar)) {
				wSB.append(wCurChar);
			} else if (wCurChar == this.symbolDecimal) {
				wSB.append(this.symbolDecimal);
			} else if (wCurChar == this.symbolThousand) {
				// on le nï¿½glige
			} else if (wCurChar == X3_NUMERIQ_MOINS) {
				wSB.append(wCurChar);
			} else if (wCurChar == X3_NUMERIQ_PLUS) {
				wSB.append(wCurChar);
			} else {}
		}
		return wSB.toString();
	}
});