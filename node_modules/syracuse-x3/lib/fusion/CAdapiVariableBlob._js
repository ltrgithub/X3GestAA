"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CAdapiVariable = function() {};

var SVC_BLOB_ID = "Blob.svc";

var CAdapiVariableBlob = helpers.defineClass(function(srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aSize, aFormat, aEntityState, aUrl) {
	TODO_SUPER(srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState);
	this.indirection = null;
	this.size = aSize;
	// TODO - Non utilisÃ© - this.url = aUrl;
}, CAdapiVariable, {

	// Pas de format
	acceptEditFormat: function() {
		return false;
	},
	clone: function() {
		return null;
	},
	controlBlobSize: function(aBlob) {
		var wMaxSize = 1024 * Math.pow(2, this.size) - 4;
		if (aBlob.size() > wMaxSize) {
			throw CAdapiException.newFmtException(getAdapiClient(), null, getAdapiClient().getAdapiResources().getMessage(CAdapiResources.KEYMESS_ERROR_UPLOAD_BLOB, String.valueOf(aBlob.size()), getId(), String.valueOf(wMaxSize), String.valueOf(this.size)));
		}
	},
	//getBlob: function();
	getDisplayValue: function() {
		return "/Fusion/Blob/TODO"; // buildFullUrl();
	},
	getIndirection: function() {
		return this.indirection;
	},
	getSize: function() {
		return this.size;
	},
	hasValueBlob: function() {
		return getServerValResu() != null && getServerValResu().hasBlobValue();
	},
	setBrowserUnformatedValue: function(aBuffer) {
		this.setBrowserUnformatedValue(new CStructResu(getTracer(), CStructResu.X3TYP_BLOB, aBuffer));
	},
	/* TODO overload
	setBrowserUnformatedValue: function(aBrowserValue) {
		controlBlobSize(aBrowserValue.geBlobValue());
		TODO_SUPER.setBrowserUnformatedValue(aBrowserValue);
	},
	*/
	setIndirection: function(i) {
		this.indirection = i;
	}
});