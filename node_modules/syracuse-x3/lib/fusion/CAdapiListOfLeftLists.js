"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CAdapiListOfEntity = require('syracuse-x3/lib/fusion/CAdapiListOfEntity').CAdapiListOfEntity;
var util = require('util');

var CAdapiListOfLeftLists = exports.CAdapiListOfLeftLists = helpers.defineClass(function(aAdapiRequesterWindow, aAdapiScreen) {
	CAdapiListOfEntity.call(this, aAdapiRequesterWindow);
	this.adapiScreen = aAdapiScreen;
}, CAdapiListOfEntity, {
	setAdapiScreen: function(s) {
		this.adapiScreen = s;
	},
	traverseAll: function(aTraverser) {
		var wMax = this.size();
		var wAdapiLeftList;
		var wI = 0;
		while (wI < wMax) {
			wAdapiLeftList = this.get(wI);
			if (aTraverser.doWhenTraverse(wAdapiLeftList, wI) == true) {
				return true;
			}
			if (wAdapiLeftList.traverseAll(aTraverser) == true) {
				return true;
			}
			wI++;
		}
		return false;
	},
	traverseChilds: function(aTraverser) {
		var wMax = this.size();
		var wEntry;
		var wI = 0;
		while (wI < wMax) {
			wEntry = this.get(wI);
			if (aTraverser.doWhenTraverse(wEntry, wI) == true) {
				return true;
			}
			wI++;
		}
		return false;
	},
	traverseSettable: function(aStructIst, aAdapiSetter) {
		var wI = aStructIst.blocZeroBase;
		if (wI < 0 && wI >= this.size()) {
			var wMess = this.adapiClient.adapiResources.getMessage(CAdapiResources.KEYMESS_ERROR_LLIST_UNKNOWN, wI.toString(), this.size().toString(), this.adapiScreen != null ? this.adapiScreen.getAdxId() : "???");
			aAdapiSetter.setLogicalErrMess(wMess);
			return false;
		}
		var wAdapiLeftList = this.get(wI);
		if (!aStructIst.isBlocIst()) {
			return wAdapiLeftList.traverseSettable(aStructIst, aAdapiSetter);
		} else {
			aAdapiSetter.setAdapiModifiable(aStructIst, wAdapiLeftList);
			return true;
		}
	}
});