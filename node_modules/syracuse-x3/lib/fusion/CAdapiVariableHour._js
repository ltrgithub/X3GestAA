"use strict"; var helpers = require('syracuse-core/lib/helpers');

var CAdapiVariableHour = helpers.defineClass(function() {}, CAdapiVariable, {

	private static char SYMBOL_MINUTE = ':';
	private char this.hourSymbolMinute = SYMBOL_MINUTE;

	private CAdapiVariableHour(srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState) {
		TODO_SUPER(srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState);
	}

	protected CAdapiVariableHour(srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState, char aHourSymbolMinute) {
		this(srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState);
		this.hourSymbolMinute = aHourSymbolMinute;
	}, clone: function() {
		var wVariable = new CAdapiVariableHour(getSrcLine(), getEntityIndexBaseOne(), getName(), this.getId(), getDataType(), getFormat(), getState(), this.hourSymbolMinute);
		wVariable.setMustBeFormated(this.mustBeFormated());
		wVariable.this.hourSymbolMinute = this.hourSymbolMinute;
		this.cloneValues(wVariable);
		return wVariable;
	}, formatHimself: function(aValue) {
		var wHour = aValue.substring(0, 2);
		var wMin = aValue.substring(2, 4);
		var wSB = new StringBuilder(5);
		wSB.append(wHour).append(this.hourSymbolMinute).append(wMin);
		return wSB.toString();
	}, formatX3ToDisplay: function(aData) {
		var wValue = aData.getValue();
		if (!this.mustBeFormated()) {
			return wValue;
		}
		if (wValue == null) {
			return null;
		}
		if (wValue.length() == 0) {
			return wValue;
		}
		if (wValue.length() != 4) {
			return wValue.concat("???");
		}
		return this.callFormater(wValue);
	}, unFormatData: function(aValue) {
		if (!this.mustBeFormated()) {
			return aValue;
		}
		if (aValue == null) {
			return null;
		}
		if (aValue.length() == 0) {
			return aValue;
		}
		if (aValue.length() != 5) {
			return aValue.concat("???");
		}
		return this.callUnFormater(aValue);
	}, unformatHimself: function(aValue) {
		var wHour = aValue.substring(0, 2);
		var wMin = aValue.substring(3, 5);
		var wSB = new StringBuilder(4);
		wSB.append(wHour).append(wMin);
		return wSB.toString();
	}

}