"use strict";
var helpers = require('syracuse-core/lib/helpers');


var CAdapiFormat = exports.CAdapiFormat = helpers.defineClass(function(format) {
	//CFormatStub.call(this, 2, aFormat);
	this.format = this.validFormatDef(format);
}, null, {
	validFormatDef: function(formatDef) {
		return formatDef && formatDef.length === 1 && formatDef[0] === ':' ? "" : formatDef;
	},
	isValid: function() { 
		return this.format && this.format.length > 0; 
	},
	isVisible: function() { 
		return this.isValid() && this.format[0] !== '-' ;
	},
	isLocalMenu: function() { 
		return this.hasFormatOptions() ? this.getFormatOptions()[0] === 'L' : false; 
	},
	hasFormatChars: function() { 
		return this.getFormatChars() != null;
	},
	hasFormatOptions: function() {
		return this.getFormatOptions() != null;
	},
	setFormatChars: function() { 
		var wSB = "";

		var wOptions = this.getFormatOptions();
		if (wOptions != null)
			wSB += wOptions;

		wSB += ':';
		wSB += aFormatChars;

		this.format = wSB;
	},
	getFormatChars: function() {
		var wFormatChars = null;
		if (this.isValid()) {
			var wPos = this.format.indexOf(":");
			if (wPos > -1 && wPos < this.format.length - 1) {
				wFormatChars = this.format.substring(wPos + 1);
			}
		}
		return wFormatChars;
	},
	getFormatOptions: function () {
		var wFormatOptions = null;
		if (this.isValid()) {
			var wPos = this.format.indexOf(":");
			// si separator apres le 1er caractere
			if (wPos > 0) {
				wFormatOptions = this.format.substring(0, wPos);
			}
		}
		return wFormatOptions;
	}, 
	getNbDecimal: function() {
		var wPos = this.format.indexOf('.');
		if (wPos > -1)
			return CAdapiFormat.extractIntegerFromString(this.format.substring(wPos + 1));
		else
			return 0;
	},
	toString: function() { return "FORMAT: " + this.format; }

});

CAdapiFormat.extractIntegerFromString = function(aString) {
	var wMax = aString.length;
	var wOffset = 0;
	var wStart = 0;
	var wStop = 0;
	while (wOffset < wMax) {

		var cc = aString.charCodeAt(wOffset);
		
		if (wStart == 0) {
			if (((cc > 47) && (cc < 58))) {
				wStart = wOffset;
			}
		} else {
			if (!((cc > 47) && (cc < 58))) {
				wStop = wOffset;
				break;
			}
		}
		wOffset++;
	}
	try {
		return parseInt(aString.substring(wStart, wStop), 10);
	} catch (e) {
		return -1;
	}
}

CAdapiFormat.newEmptyFormat = function() {
	return new CAdapiFormat("");
}
