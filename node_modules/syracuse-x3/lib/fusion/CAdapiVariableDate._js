"use strict"; var helpers = require('syracuse-core/lib/helpers');

var CAdapiVariableDate = helpers.defineClass(function() {}, CAdapiVariable, {
	/**
	 * 1 = 15-03-01 = jj-mm-aa 2 = 15-03-2001 = jj-mm-ssaa 3 = 15 MAR 2001 = non
	 * trait� => format 2 4 = 15 Mars 2001 = non trait� => format 2 5 = 15-03 =
	 * jj-mm 6 = 03-01 = mm-aa 7 = 03-2001 = mm-ssaa
	 */
	private static int FORMAT_JJMM = 5;
	private static int FORMAT_JJMMAA = 1;
	private static int FORMAT_JJMMSSAA = 2;
	private static int FORMAT_LOCAL_JJMMSSAA = 1;
	private static int FORMAT_LOCAL_MMJJSSAA = 2;
	private static int FORMAT_LOCAL_SSAAMMJJ = 0;
	private static int FORMAT_MMAA = 6;
	private static int FORMAT_MMSSAA = 7;
	private static int NO_FORMAT_LOCAL = -1;
	private static int SEP_SLASH = '/';
	private static int SEP_TIRET = '-';
	private int this.formatDate = FORMAT_JJMMSSAA;
	private int this.localFormat = NO_FORMAT_LOCAL;
	private int this.localFormatAndSep;
	private char this.localSep = SEP_SLASH;
	private int this.pivotCentury = 19;
	private int this.pivotDate;
	private int this.pivotYear = 50;

	/**
	 */
	private CAdapiVariableDate(srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState) {
		TODO_SUPER(srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState);
	}

	public CAdapiVariableDate(srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState, aLocalFormatAndSep, aPivotDate) {
		this(srcLine, aEntityIndexBaseOne, aVarName, aID, aTdo, aFormat, aEntityState);
		initLocalFormatAndSep(aLocalFormatAndSep);
		initPivotDate(aPivotDate);
	}, clone: function() {
		var wVariable = new CAdapiVariableDate(getSrcLine(), getEntityIndexBaseOne(), getName(), getId(), getDataType(), getFormat(), getState());
		wVariable.setMustBeFormated(mustBeFormated());
		wVariable.this.localFormat = this.localFormat;
		wVariable.this.formatDate = this.formatDate;
		wVariable.this.pivotCentury = this.pivotCentury;
		wVariable.this.pivotYear = this.pivotYear;
		cloneValues(wVariable);
		return wVariable;
	}, formatHimself: function(wValue) {
		var wCentury = wValue.substring(0, 2);
		var wYear = wValue.substring(2, 4);
		var wMonth = wValue.substring(4, 6);
		var wDay = wValue.substring(6);
		var wResult = new StringBuilder(10);
		if (this.formatDate == FORMAT_JJMMAA) {
			if (this.localFormat == FORMAT_LOCAL_JJMMSSAA) {
				wResult.append(wDay).append(this.localSep).append(wMonth).append(this.localSep).append(wYear);
			} else {
				wResult.append(wMonth).append(this.localSep).append(wDay).append(this.localSep).append(wYear);
			}
		} else if (this.formatDate == FORMAT_JJMMSSAA) {
			if (this.localFormat == FORMAT_LOCAL_JJMMSSAA) {
				wResult.append(wDay).append(this.localSep).append(wMonth).append(this.localSep).append(wCentury).append(wYear);
			} else {
				wResult.append(wMonth).append(this.localSep).append(wDay).append(this.localSep).append(wCentury).append(wYear);
			}
		} else if (this.formatDate == FORMAT_JJMM) {
			if (this.localFormat == FORMAT_LOCAL_JJMMSSAA) {
				wResult.append(wDay).append(this.localSep).append(wMonth);
			} else {
				wResult.append(wMonth).append(this.localSep).append(wDay);
			}
		} else if (this.formatDate == FORMAT_MMAA) {
			wResult.append(wMonth).append(this.localSep).append(wYear);
		} else if (this.formatDate == FORMAT_MMSSAA) {
			wResult.append(wMonth).append(this.localSep).append(wCentury).append(wYear);
		}
		if (wValue.length() == 0) {
			wResult.append(wValue);
		}
		return wResult.toString();
	}, formatX3ToDisplay: function(aData) {
		var wValue = aData.getValue();
		if (!mustBeFormated()) {
			return wValue;
		}
		if (getServerValResu().isDateNull()) {
			return EMPTY;
		}
		if (wValue == null) {
			return null;
		}
		if (wValue.length() == 0) {
			return wValue;
		}
		if (wValue.length() != 8) {
			var wMess = this.buildMessFormterExcetion(CAdapiResources.KEYMESS_ERROR_FORMAT_EXCEPTION, CAdapiResources.KEYMESS_FORMAT_RTOS, wValue, "NOT AN ADONIX_DATE AAAMMJJ");
			getAdapiClient().addLogicalErrorMess(this, "callFormater", getAdxId(), wMess);
			return wValue.concat(" ???");
		}
		return callFormater(wValue);
	}, getLocalFormatAndSep: function() {
		return this.localFormatAndSep;
	}, getPivotDate: function() {
		return this.pivotDate;
	}, getValueForJson: function() {
		return getDisplayValue();
	}, initLocalFormatAndSep: function(aLocalFormatAndSep) {
		this.localFormatAndSep = aLocalFormatAndSep;
		if (aLocalFormatAndSep > 0) {
			var wKindFormat = aLocalFormatAndSep / 10;
			if (wKindFormat == 0) {
				this.localFormat = FORMAT_LOCAL_MMJJSSAA;
			} else if (wKindFormat == 1) {
				this.localFormat = FORMAT_LOCAL_JJMMSSAA;
			} else if (wKindFormat == 2) {
				this.localFormat = FORMAT_LOCAL_SSAAMMJJ;
			}
			var wKindSep = aLocalFormatAndSep % 10;
			if (wKindSep == 1) {
				this.localSep = SEP_SLASH;
			} else if (wKindSep == 2) {
				this.localSep = SEP_TIRET;
			}
		}
	}, initPivotDate: function(aPivotDate) {
		this.pivotDate = aPivotDate;
		if (aPivotDate > 0) {
			this.pivotCentury = aPivotDate / 100;
			this.pivotYear = aPivotDate % 100;
		}
	}, isYearLessPivotYear: function(aYear) {
		try {
			return Integer.parseInt(aYear) < this.pivotYear;
		} catch (e) {
			return false;
		}
	}, setServerResu: function(resu) {
		if (resu != null && CStructResu.DATE_ZERO.equals(resu.getValue())) {
			resu = null;
		}
		TODO_SUPER.setServerResu(resu);
	}, unFormatData: function(aValue) {
		if (!mustBeFormated()) {
			return aValue;
		}
		if (aValue == null) {
			return null;
		}
		if (aValue.length() == 0) {
			return aValue;
		}
		aValue = callUnFormater(aValue);
		if (CStructResu.DATE_ZERO.equals(aValue)) {
			aValue = EMPTY;
		}
		return aValue;
	}, unformatHimself: function(aValue) {
		var wCentury = "";
		var wYear = "";
		var wMonth = "";
		var wDay = "";
		var wValue = new StringBuilder(8);
		if (this.formatDate == FORMAT_JJMMAA) {
			// jj/mm/aa
			if (this.localFormat == FORMAT_LOCAL_JJMMSSAA) {
				wDay = aValue.substring(0, 2);
				wMonth = aValue.substring(3, 5);
				wYear = aValue.substring(6);
			} else {
				// mm/jj/aa
				wMonth = aValue.substring(0, 2);
				wDay = aValue.substring(3, 5);
				wYear = aValue.substring(6);
			}
		} else if (this.formatDate == FORMAT_JJMMSSAA) {
			// jj/mm/ssaa
			if (this.localFormat == FORMAT_LOCAL_JJMMSSAA) {
				wDay = aValue.substring(0, 2);
				wMonth = aValue.substring(3, 5);
				wCentury = aValue.substring(6, 8);
				wYear = aValue.substring(8);
			} else {
				// mm/jj/ssaa
				wMonth = aValue.substring(0, 2);
				wDay = aValue.substring(3, 5);
				wCentury = aValue.substring(6, 8);
				wYear = aValue.substring(8);
			}
		} else if (this.formatDate == FORMAT_JJMM) {
			if (this.localFormat == FORMAT_LOCAL_JJMMSSAA) {
				// jj/mm
				wDay = aValue.substring(0, 2);
				wMonth = aValue.substring(3, 5);
			} else {
				// mm/jj
				wMonth = aValue.substring(0, 2);
				wDay = aValue.substring(3, 5);
			}
		} else if (this.formatDate == FORMAT_MMAA) {
			wDay = "01";
			wMonth = aValue.substring(0, 2);
			wYear = aValue.substring(3, 5);
		} else if (this.formatDate == FORMAT_MMSSAA) {
			wDay = "01";
			wMonth = aValue.substring(0, 2);
			wCentury = aValue.substring(3, 5);
			wYear = aValue.substring(5);
		}
		if (wYear.length() == 0) {
			if (getBrowserValue().getValueLength() == 8) {
				var wInitialValue = getBrowserValue().getValue();
				wCentury = wInitialValue.substring(0, 2);
				wYear = wInitialValue.substring(2, 4);
			} else {
				var wRightNow = Calendar.getInstance();
				var wS = CStringFacilities.padNumString(wRightNow.get(Calendar.YEAR), 4);
				wCentury = wS.substring(0, 2);
				wYear = wS.substring(2, 4);
			}
		}
		if (wCentury.length() == 0) {
			if (isYearLessPivotYear(wYear)) {
				wCentury = String.valueOf(this.pivotCentury + 1);
			} else {
				wCentury = String.valueOf(this.pivotCentury);
			}
		}
		wValue.append(wCentury).append(wYear).append(wMonth).append(wDay);
		if (wValue.length() == 0) {
			wValue.append(aValue);
		}
		return wValue.toString();
	}
}