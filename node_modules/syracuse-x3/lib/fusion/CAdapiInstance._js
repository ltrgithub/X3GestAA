"use strict";
var helpers = require('syracuse-core/lib/helpers');
var AdapiObservable = function() {};

var EAdapiInstanceKind = {
	TARGET: 0,
	PREVIOUS: 1
};

var CAdapiInstance = helpers.defineClass(function(cli, aKind, aIst, format, aValue, modCmd) {
	TODO_SUPER(cli);
	this.nl = -1;
	this.exception = null;
	if (cli == null) {
		throw new RuntimeException("Unexpected null FusionClient");
	}
	this.ist = aIst;
	this.kind = aKind;
	this.roughValue = null;
	this.modCommande = modCmd;
	this.formatString = format == null || format.isEmpty() ? null : format;
	this.pvalue = aValue;
	var adapi = cli.findModifiable(aIst);
	if (adapi != null && adapi instanceof CAdapiEntity) {
		this.adapiEntity = adapi;
	}
	if (this.adapiEntity == null) {
		throw new RuntimeException("Entity " + aIst.toStringDescr() + " not found\nPlease check/update X3 Window description");
	}
	// !! En dernier car update du client et this.adapiEntity doit être valorisee
	if (aKind == EAdapiInstanceKind.PREVIOUS) {
		setTypeJsonNode('PREVIOUS');

	} else {
		setTypeJsonNode('TARGET');
	}
}, AdapiObservable, {
	getFormat: function() {
		return this.formatString;
	}

	// TODO - Voir si utilisé
	,
	getInstanceKind: function() {
		return this.kind;
	},
	getModeEdit: function() {
		return !this.modCommande;
	},
	getNl: function() {
		if (this.nl != -1) {
			return this.nl;
		} else {
			var v = this.adapiEntity instanceof CAdapiVariable ? this.adapiEntity : null;
			if (v != null && !v.isDisposed()) {
				var line = v.srcLine;
				if (line != null && line.dataSrc.isBlocGrid()) {
					return line.oneBaseLineIdx;
				}
			}
		}
		return -1;
	}

	// TODO - Voir si utilisé
	,
	getValue: function() {
		return this.pvalue;
	},
	getWin: function() {
		return this.ist.winAlphaId;
	},
	getXid: function() {
		var fullId = this.ist.screenAlphaIdFusion;
		if (!this.adapiEntity.isDisposed() && !(this.adapiEntity instanceof CAdapiScreenDummy)) {
			fullId += this.ist.blocAlphaId;
			if (this.adapiEntity.entityTyp == EntityType.FIELD) {
				fullId += this.ist.field;
			}
		}
		return fullId;
	},
	hasException: function() {
		return this.exception != null;
	},
	hasFormat: function() {
		return this.formatString != null;
	},
	setException: function(e) {
		this.exception = e;
	},
	setNl: function(nl) {
		this.nl = nl;
	},
	setRoughValue: function(aValue) {
		this.roughValue = aValue;
	},
	toJson: function() {
		var object = new JSONObject();
		if (this.ist.win == 1) {
			// target portal
			object.put('type', 'portal');
		} else {
			object.put('type', 'ist');
			var ist = new JSONObject();
			ist.put('xid', this.xid);
			if (this.nl != -1) {
				ist.put('nl', this.nl);

			}
			if (this.formatString != null) {
				ist.put('fmt', this.formatString);
			}
			ist.put('win', this.win);
			ist.put('edit', this.modeEdit);
			// Valeur pour champ en mode edit - TODO Vérifier si ok
			if (this.modeEdit && this.pvalue != null) {
				ist.put('v', this.pvalue);
				ist.put('raw', this.roughtValue);
			}
			object.put('ist', ist);
			ist.put('ctrlFailed', hasException());
			if (hasException()) {
				var diags = new CDiagnoses();
				var diag = new CDiagnosis();
				diag.setMessage(this.exception.message);
				diags.addDiagnosis(diag);
				ist.put('$diagnoses', diags.toJSONArray());
			}
		}
		return object;
	}
});
CAdapiInstance.newprevious = function(aClient, aIst, aFormatString, aValue, modCommande) {
	return new CAdapiInstance(aClient, EAdapiInstanceKind.PREVIOUS, aIst, aFormatString, aValue, modCommande);
}

CAdapiInstance.newtarget = function(aClient, aIst, aFormatString, aValue, modCommande) {
	return new CAdapiInstance(aClient, EAdapiInstanceKind.TARGET, aIst, aFormatString, aValue, modCommande);
}