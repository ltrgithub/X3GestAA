"use strict";
var helpers = require('syracuse-core/lib/helpers');


var HANGUP_TEMP = "runtime_bundle.webclient.hangup.check.tompo";
var EMPTY = "";
var ACTIVE_FUSION = "runtime.bundle_fusion.active.on";
var SYRA_PUB_KEY = "runtime.bundle_fusion.public.key";
var SYRA_PRIV_KEY = "runtime.bundle_fusion.private.key";
var REUSE_MAX_TIME_IN_STACK = "runtime.bundle_fusion.timeout.free.reuse.session";
var REUSE_CHECK_INTERVAL = "runtime.bundle_fusion.reuse.stack.checkinterval";
var FUSION_ACTIVE_RECORD_EXCHANGE_FOLDER = "runtime.bundle_fusion.client.recording.folder";
var FUSION_ACTIVE_RECORD_EXCHANGE = "runtime.bundle_fusion.client.recording.on";
var RECORD_DIRPREF = "FusionClient_";
// TODO
//var TEMPDIR = CConstants.DIR_TEMP;
//var PUBLICDIR = CConstants.DIR_PUBLIC;
//var PUBLICDIR_SERVLETPATH = "/" + PUBLICDIR;
var HTTPDIR = "http";

var FusionConfig = {
	getBool: function(key) {
		try {
			var val = getProp(key, false);
			if (val == null) {
				val = EMPTY;
			}
			val = val.trim().toLowerCase();
			return "on".equals(val) || "true".equals(val) || "yes".equals(val);
		} catch (e) {}
		return false;
	},
	getDataPublicDir: function() {
		return getDataSubDir(PUBLICDIR);

	},
	getDataSubDir: function(path) {
		var dir = new CXFileDir(this.installDataDir, path);
		if (!dir.exists()) {
			dir.createHierarchy();
		}
		return dir;
	},
	getDataTempDir: function() {
		return getDataSubDir(TEMPDIR);
	},
	getInstallDataDir: function() {
		var dir = new CXFileDir(this.installDataPath);
		if (!dir.exists()) {
			throw new Exception("Install data directory not found\n[" + this.installDataPath + "]");
		}
		return dir;
	},
	getInstallDataPath: function() {
		return CContextCore.config.installDataPath;
	},
	getInstallToolDir: function() {
		var dir = new CXFileDir(this.installToolPath);
		if (!dir.exists()) {
			throw new Exception("Install tool directory not found\n[" + this.installToolPath + "]");
		}
		return dir;
	},
	getInstallToolPath: function() {
		return CContextCore.config.installToolPath;
	},

	getInt: function(key, def) {
		var res = getPropInt(key, false);
		return res == null ? def : res.intValue();
	},

	getIntMandatory: function(key, def) {
		return getPropInt(key, true);
	},

	getJSONMainInfo: function() {
		var cfgCtx = new JSONObject().put("host", this.localHost).put("tools", this.installToolPath).put("data", this.installDataPath);
		cfgCtx.put("systemarch", getStr("all.control.systemarch", EMPTY));
		cfgCtx.put("systembits", getStr("all.control.systembits", EMPTY));
		cfgCtx.put("systemtype", getStr("all.control.systemtype", EMPTY));
		cfgCtx.put("sdataPort", getStr("runtime.bundle_sdata.http.port", EMPTY));
		cfgCtx.put("jettyPort", getStr("runtime.service.jetty.port", EMPTY));
		cfgCtx.put("installpatch", getStr("all.control.installpatch", EMPTY));
		cfgCtx.put("installvers", getStr("all.control.installvers", EMPTY));
		cfgCtx.put("installversname", getStr("all.control.installversname", EMPTY));
		cfgCtx.put("installversnum", getStr("all.control.installversnum", EMPTY));
		cfgCtx.put("installfix", getStr("all.control.installfix", EMPTY));
		cfgCtx.put("installminor", getStr("all.control.installminor", EMPTY));
		cfgCtx.put("installfix", getStr("all.control.installfix", EMPTY));
		cfgCtx.put("builddate", CContextCore.config.buildDate);
		return cfgCtx;
	},

	getKeyFileDir: function() {
		return CContextCore.config.toolKeystoreDir.absolutePath + File.separatorChar + "syracuse";
	},

	getLocalHost: function() {
		return CContextCore.config.localHost;
	},

	getLong: function(key, def) {
		var res = getPropLong(key, false);
		return res == null ? def : res.longValue();
	},

	getLongMandatory: function(key, def) {
		return getPropLong(key, true);
	},

	getPrivateKey: function() {
		var keyFile = getProp(SYRA_PRIV_KEY, true);
		try {
			var pubkey = CKeyPairSerializer.LoadPrivKey(this.keyFileDir, keyFile + ".pem", "RSA");
			return pubkey;
		} catch (e) {
			FusionExcep.throwConfigExcep("Bad private key file\n\tkeystorepath[" + this.keyFileDir + "]\n\tKey[" + keyFile + "]", e);
		}
		return null;
	},

	getProp: function(key, mandatory) {
		try {
			var res = CContextCore.config.getProperty(key);
			if (mandatory && res != null) {
				res = res.trim();
			}
			if (mandatory && (res == null || res.isEmpty())) {
				throw new Exception("Empty property");
			}
			return res;
		} catch (e) {
			if (mandatory) {
				FusionExcep.throwConfigExcep(e.message + " - Key[" + key + "]", e);
			}
		}
		return null;
	},
	getPropInt: function(key, mandatory) {
		try {
			return new Integer(getProp(key, mandatory));
		} catch (e) {
			if (mandatory) {
				FusionExcep.throwConfigExcep("Bad int value - Key[" + key + "]", e);
			}
		}
		return null;
	},
	getPropLong: function(key, mandatory) {
		try {
			return new Long(getProp(key, mandatory));
		} catch (e) {
			if (mandatory) {
				FusionExcep.throwConfigExcep("Bad long value - Key[" + key + "]", e);
			}
		}
		return null;
	},
	getPubKeyName: function() {
		return CContextCore.config.getProperty(SYRA_PUB_KEY);
	},
	getPublicKey: function(keyFile) {
		try {
			return CKeyPairSerializer.LoadPubKey(this.keyFileDir, keyFile + ".pem", "RSA", "file");
		} catch (e) {
			FusionExcep.throwConfigExcep("Bad public key file\n\tdir[" + this.keyFileDir + "]\n\tfile[" + keyFile + "]", e);
		}
		return null;
	},
	getSchemaNameSpace: function() {
		return "http://" + CContextCore.config.localHost + "/schema/2012";
	},
	getStr: function(key, def) {
		var r = getProp(key, false);
		return r == null ? def : r;
	},
	getStrMandatory: function(key) {
		return getProp(key, true);
	},
	isFusionActive: function() {
		return getBool(ACTIVE_FUSION);
	},
	recordDirHttp: function(customSubFolder, sessId, create) {
		var dir = null;
		try {
			var parent = recordDirParent(customSubFolder, sessId, create);
			dir = new CXFileDir(parent, HTTPDIR);
			if (create) {
				dir.createHierarchy();
			}
		} catch (e) {
			System.err.println("!! recordDirHttpInit failed");
			e.printStackTrace();
			dir = null;
		}
		return dir;
	},
	recordDirParent: function(customSubFolder, sessId, create) {
		var res = null;
		try {
			var tmp = this.dataPublicDir;
			if (tmp != null) {
				var parent = new CXFileDir(tmp, recordSubFolder(customSubFolder));
				if (create) {
					parent.createHierarchy();
				}
				res = new CXFileDir(parent, RECORD_DIRPREF + sessId);
				if (create) {
					res.createHierarchy();
				}

			}
		} catch (e) {
			System.err.println("!! recordDirFusionClient failed");
			e.printStackTrace();
			res = null;
		}
		return res;
	},
	recordGetServletAccessParent: function(customSubFolder, sessId) {
		return PUBLICDIR_SERVLETPATH + "/" + recordSubFolder(customSubFolder);
	},
	// Voir config jetty - File acces - /com.sage.x3.simulator/all/tool/TOOLS/jettyhome/contexts/fusion_record.xml
	recordGetServletAccessPath: function(customSubFolder, sessId, fileName) {
		return recordGetServletAccessParent(customSubFolder, sessId) + "/" + RECORD_DIRPREF + sessId + "/" + HTTPDIR + "/" + fileName;
	},
	recordSubFolder: function(customSubFolder) {
		if (customSubFolder == null || customSubFolder.trim().isEmpty()) {
			return getStr(FusionConfig.FUSION_ACTIVE_RECORD_EXCHANGE_FOLDER, "fusion_record");
		} else {
			return customSubFolder.trim();
		}
	}
}