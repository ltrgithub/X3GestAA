"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgResu = require('syracuse-x3/lib/fusion/types/CvgResu').CvgResu;
var CvgScreen = require('syracuse-x3/lib/fusion/model/CvgScreen').CvgScreen;
var CvgLeftList = require('syracuse-x3/lib/fusion/model/CvgLeftList').CvgLeftList;
var CvgLeftListLine = require('syracuse-x3/lib/fusion/model/CvgLeftListLine').CvgLeftListLine;
var CvgLeftListLineLevel = require('syracuse-x3/lib/fusion/model/CvgLeftListLine').CvgLeftListLineLevel;
var CvgVariableFactory = require('syracuse-x3/lib/fusion/model/CvgVariableFactory').CvgVariableFactory;
var CvgLeftListRecursiv = require('syracuse-x3/lib/fusion/model/CvgLeftListRecursiv').CvgLeftListRecursiv;
var CvgLeftListHierarchic = require('syracuse-x3/lib/fusion/model/CvgLeftListHierarchic').CvgLeftListHierarchic;
var CvgLeftListLineNode = require('syracuse-x3/lib/fusion/model/CvgLeftListLineNode').CvgLeftListLineNode;

var CvgScreenLeftList = exports.CvgScreenLeftList = helpers.defineClass(function(aRequesterWindow, aListOfLeftLists) {
	CvgScreen.call(this, aRequesterWindow, CvgScreen.SCREEN_LEFTLIST_NUM_ZERO_BASED + 1, "_SCRNLEFT", aListOfLeftLists);
}, CvgScreen, {});

function extactType(aValue) {
	var wPos = aValue.indexOf(',');
	return parseInt(aValue.substring(0, wPos), 10);
}

function instanciateLeftListEntry(aStackedWindow, aLeftList, aId, aLeftListNode) {
	if (aLeftList.isRecursive()) {
		return instanciateLeftListLineNode(aStackedWindow, aLeftList, aId, aLeftListNode);
	} else if (aLeftList.isHierarchic()) {
		return instanciateLeftListLineLevel(aStackedWindow, aLeftList, aId, aLeftListNode);
	} else {
		return instanciateLeftListLineFlat(aStackedWindow, aLeftList, aId, aLeftListNode);
	}
}

function instanciateLeftListLineFlat(aStackedWindow, aLeftList, aId, aLeftListNode) {
	var wNbField = aLeftListNode.$.NBZ;
	var wLeftListLine = new CvgLeftListLine(aStackedWindow, aLeftList, aId, wNbField, aLeftList.lines.length);
	var wListOfX3Variables = aLeftListNode.FLD;
	var wForcedTDO = 0;
	instanciateVarsOfLeftListLine(aStackedWindow, wLeftListLine, aId, wListOfX3Variables, wForcedTDO);
	return wLeftListLine;
}

function instanciateLeftListLineLevel(aStackedWindow, aLeftList, aId, aLeftListNode) {
	var wNbField = aLeftListNode.$.NBZ;
	var wLeftListLine = new CvgLeftListLineLevel(aStackedWindow, aLeftList, aId, wNbField, aLeftList.lines.length);
	var wListOfX3Variables = aLeftListNode.FLD;
	var wForcedTDO = CvgResu.TDO_ALPHA;
	instanciateVarsOfLeftListLine(aStackedWindow, wLeftListLine, aId, wListOfX3Variables, wForcedTDO);
	return wLeftListLine;
}

function instanciateLeftListLineNode(aStackedWindow, aLeftList, aId, aLeftListNode) {
	var wLeftListNode = new CvgLeftListLineNode(aStackedWindow, aLeftList, aId, 1, aLeftList.lines.length);
	var wPrefixId = aLeftList.id;
	wPrefixId = wPrefixId.substring(wPrefixId.length - 1);
	var wVariable = CvgVariableFactory.instanciateLeftListColumn(aStackedWindow, wLeftListNode, 1, wPrefixId + "1");
	wLeftListNode.addOneVar(wVariable);
	return wLeftListNode;
}


function instanciateVarsOfLeftListLine(aStackedWindow, aLeftListLine, aId, aListOfX3Variables, aForcedTDO) {
	var wVariable;
	var wVariableNode;
	var wI = 0;
	var wMax = Array.isArray(aListOfX3Variables) ? aListOfX3Variables.length : 1;
	if (wMax == 0) {
		var wMess = aStackedWindow.client.getMessage('ERROR_NO_COLUMS', aId);
		throw new CvgException(aStackedWindow.client, wMess);
	}
	while (wI < wMax) {
		wVariableNode = wMax === 1 ? aListOfX3Variables : aListOfX3Variables[wI];
		wVariable = CvgVariableFactory.instanciateVariable(aStackedWindow, aLeftListLine, wI + 1, aId, wVariableNode, aForcedTDO);
		aLeftListLine.addOneVar(wVariable);
		wI++;
	}
}

var CvgListOfLeftListsFactory = exports.CvgListOfLeftListsFactory = {
	instanciateLeftLists: function(aStackedWindow, aScreens, aWindowDescription, aListOfLeftLists) {
		var wLeftListNodes = aWindowDescription.LEFTLIST.LST;
		var wMax = Array.isArray(wLeftListNodes) ? wLeftListNodes.length : 1;
		if (wLeftListNodes && wMax > 0) {
			var wAdapiScreen = new CvgScreenLeftList(aStackedWindow, aListOfLeftLists);
			aScreens.pushScreenLeftList(wAdapiScreen);
			aListOfLeftLists.setScreen(wAdapiScreen);
			var wLeftListNode;
			var wAdapiLeftList;
			var wAdapiLeftListId;
			var wI = 0;
			while (wI < wMax) {
				wLeftListNode = wMax === 1 ? wLeftListNodes : wLeftListNodes[wI];
				wAdapiLeftListId = wLeftListNode.$.ID;
				wAdapiLeftList = this.instanciateOneLeftList(aStackedWindow, wAdapiScreen, wI + 1, wAdapiLeftListId, wLeftListNode);
				aListOfLeftLists.pushEntity(wAdapiLeftListId, wAdapiLeftList);
				wI++;
			}
		}
	},

	instanciateNewLeftListEntrySup: function(aStackedWindow, aLeftList, aNbField) {

		var wLeftListLine = new CvgLeftListLine(aStackedWindow, aLeftList, aLeftList.id, aNbField, aLeftList.lines.length);
		var wVariable;
		var wPrefixId = aLeftList.id;
		wPrefixId = wPrefixId.substring(wPrefixId.length - 1);
		var wI = 0;
		while (wI < aNbField) {
			wVariable = CvgVariableFactory.instanciateLeftListColumn(aStackedWindow, wLeftListLine, wI + 1, wPrefixId + (wI + 1).toString());
			wLeftListLine.addOneVar(wVariable);
			wI++;
		}
		return wLeftListLine;
	},

	instanciateOneLeftList: function(aStackedWindow, aScreen, aEntityIndexBaseOne, aId, aLeftListNode) {
		var wListFormat = extactType(aLeftListNode.$.TYL);
		var wNbField = aLeftListNode.$.NBZ;
		var wAdapiLeftList;

		if (CvgLeftList.isHierarchicFormat(wListFormat)) {
			var wNbKeyParts = aLeftListNode.$.NBK;
			wAdapiLeftList = new CvgLeftListHierarchic(aStackedWindow, aScreen, aEntityIndexBaseOne, aId, wListFormat, wNbField, wNbKeyParts);
		} else if (CvgLeftList.isRecursiveFormat(wListFormat)) {
			wAdapiLeftList = new CvgLeftListRecursiv(aStackedWindow, aScreen, aEntityIndexBaseOne, aId, wListFormat, wNbField);
		} else {
			wAdapiLeftList = new CvgLeftList(aStackedWindow, aScreen, aEntityIndexBaseOne, aId, wListFormat, wNbField);
		}
		var wLeftListLine = instanciateLeftListEntry(aStackedWindow, wAdapiLeftList, aId, aLeftListNode);
		wAdapiLeftList.setEntrySup(wLeftListLine);
		return wAdapiLeftList;
	}
};