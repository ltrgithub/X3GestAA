"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgListOfEntity = require('syracuse-x3/lib/fusion/model/CvgListOfEntity').CvgListOfEntity;
var util = require('util');

var CvgListOfLeftLists = exports.CvgListOfLeftLists = helpers.defineClass(function(aRequesterWindow, aScreen) {
	CvgListOfEntity.call(this, aRequesterWindow);
	this.screen = aScreen;
}, CvgListOfEntity, {
	setScreen: function(s) {
		this.screen = s;
	},
	traverseAll: function(aTraverser) {
		var wMax = this.length;
		var wAdapiLeftList;
		var wI = 0;
		while (wI < wMax) {
			wAdapiLeftList = this.get(wI);
			if (aTraverser.doWhenTraverse(wAdapiLeftList, wI) == true) {
				return true;
			}
			if (wAdapiLeftList.traverseAll(aTraverser) == true) {
				return true;
			}
			wI++;
		}
		return false;
	},
	traverseChilds: function(aTraverser) {
		var wMax = this.length;
		var wEntry;
		var wI = 0;
		while (wI < wMax) {
			wEntry = this.get(wI);
			if (aTraverser.doWhenTraverse(wEntry, wI) == true) {
				return true;
			}
			wI++;
		}
		return false;
	},
	traverseSettable: function(aStructIst, aSetter) {
		var wI = aStructIst.blocZeroBase;
		if (wI < 0 && wI >= this.length) {
			var wMess = this.client.getMessage('ERROR_LLIST_UNKNOWN', wI.toString(), this.length.toString(), this.screen != null ? this.screen.getAdxId() : "???");
			aSetter.setLogicalErrMess(wMess);
			return false;
		}
		var wAdapiLeftList = this.get(wI);
		if (!aStructIst.isBlocIst()) {
			return wAdapiLeftList.traverseSettable(aStructIst, aSetter);
		} else {
			aSetter.setModifiable(aStructIst, wAdapiLeftList);
			return true;
		}
	}
});