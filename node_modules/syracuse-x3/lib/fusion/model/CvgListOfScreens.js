"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgScreen = require('syracuse-x3/lib/fusion/model/CvgScreen').CvgScreen;
var CvgListOfEntity = require('syracuse-x3/lib/fusion/model/CvgListOfEntity').CvgListOfEntity;
var util = require('util');

var CvgScreenDummy = exports.CvgScreenDummy = helpers.defineClass(function(aRequesterWindow, aEntityIndexbaseOne, aScreenId) {
	CvgScreen.call(this, aRequesterWindow, aEntityIndexbaseOne, aScreenId, null);
}, CvgScreen, {

	traverseChilds: function(aTraverser) {
		return this.traverseChilds(aTraverser);
	},
	traverseSettable: function(aStructIst, aSetter) {
		return aSetter.setModifiable(aStructIst, this);
	}
});

var CvgListOfScreens = exports.CvgListOfScreens = helpers.defineClass(function(aRequesterWindow) {
	CvgListOfEntity.call(this, aRequesterWindow);
	this.screenLeftList = null;
	this.screenButtons = new CvgScreenDummy(aRequesterWindow, CvgScreen.SCREEN_BUTTONS_NUM_ZERO_BASED + 1, "_BUTTONS");
	this.screenTabTitles = new CvgScreenDummy(aRequesterWindow, CvgScreen.SCREEN_TABTITLES_NUM_ZERO_BASED + 1, "_TABTITLE");
}, CvgListOfEntity, {
	get: function(aIdx) {
		if (aIdx < CvgScreen.SCREEN_BUTTONS_NUM_ZERO_BASED && this.length > aIdx) {
			return CvgListOfEntity.prototype.get.call(this, aIdx);
		} else if (aIdx == CvgScreen.SCREEN_BUTTONS_NUM_ZERO_BASED) //32 => index base "one" = 33 => AG
		{
			return this.screenButtons;
		} else if (aIdx == CvgScreen.SCREEN_LEFTLIST_NUM_ZERO_BASED) //33 => index base "one" = 34 => AH
		{
			return this.screenLeftList;
		} else if (aIdx == CvgScreen.SCREEN_TABTITLES_NUM_ZERO_BASED) //34 => index base "one" = 35 => AI
		{
			return this.screenTabTitles;
		} else {
			return null;
		}
	},
	pushScreenLeftList: function(aScreen) {
		this.screenLeftList = aScreen;
		this.pushEntity(aScreen.id, aScreen);
	},
	traverseAll: function(aTraverser) {
		var wMax = this.length;
		var wScreen;
		var wI = 0;
		while (wI < wMax) {
			wScreen = this.get(wI);
			if (aTraverser.doWhenTraverse(wScreen, wI) == true) {
				return true;
			}
			if (wScreen.traverseAll(aTraverser) == true) {
				return true;
			}
			wI++;
		}
		return false;
	},
	traverseChilds: function(aTraverser) {
		var wMax = this.length;
		var wEntry;
		var wI = 0;
		while (wI < wMax) {
			wEntry = this.get(wI);
			if (aTraverser.doWhenTraverse(wEntry, wI) == true) {
				return true;
			}
			wI++;
		}
		return false;
	},
	traverseSettable: function(aStructIst, aSetter) {
		var wI = aStructIst.screenZeroBase;
		var wScreen = this.get(wI);
		if (wScreen == null) {
			var wMess = this.getClient().getMessage('ERROR_SCRN_UNKNOWN', CvgScreen.screenZeroBaseIdxToWhatScreen(wI), this.length.toString(), this.requesterWindow.id);
			aSetter.setLogicalErrMess(wMess);
			return false;
		}
		if (!aStructIst.isScreenIst()) {
			return wScreen.traverseSettable(aStructIst, aSetter);
		} else {
			return aSetter.setModifiable(aStructIst, wScreen);
		}
	}
});