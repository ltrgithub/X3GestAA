"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CvgDataSrcLine = require('syracuse-x3/lib/fusion/model/CvgDataSrcLine').CvgDataSrcLine;
var CvgFormat = require('syracuse-x3/lib/fusion/model/CvgFormat').CvgFormat;
var CvgVariableDate = require('syracuse-x3/lib/fusion/model/CvgVariableDate').CvgVariableDate;
var CvgVariableFactory = require('syracuse-x3/lib/fusion/model/CvgVariableFactory').CvgVariableFactory;
	
var CvgLeftListLine = exports.CvgLeftListLine = helpers.defineClass(function(aStackedWindow, aLeftList, aId, aNbVariables, localIdx) {
	CvgDataSrcLine.call(this, aStackedWindow, aLeftList, aId, aNbVariables, localIdx);
	this.cle = null;
}, CvgDataSrcLine, {
	clone: function() {
		var localIdx = this.dataSrc.lines.length;
		var wClone = new CvgLeftListLine(this.requester, this.dataSrc, this.id, this.vars.length, localIdx);
		this.cloneVars(wClone);
		return wClone;
	},
	// Voir instanciateLeftListEntry - True si liste plate
	isFlatLeftList: function() {
		var adp = this.dataSrc;
		return adp != null && !adp.isHierarchic() && !adp.isRecursive();
	},
	setCle: function(aClf) {
		this.cle = aClf;

	},
	setColumns: function(aIdx, aVal, aClf) {
		this.setZeroBaseIdx(aIdx);
		this.setCle(aClf);
		var wNbResu = aVal.length;
		var wI = 0,
			nbVar = this.vars.length;
		while (wI < nbVar && wI < wNbResu) {
			var resu = aVal[wI];

			var v = this.getVar(wI);
			if (resu.isDate() && !(v instanceof CvgVariableDate)) {
				var vv = v;
				var client = this.client;
				var wConfig = client.clientConfig;

				var wFormat = new CvgFormat("");
				var wLocalformat = wConfig.dateFormat;
				var wDatePivot = wConfig.datePivot;
				wFormat = CvgVariableFactory.valiDateFormat(client, wConfig, wFormat);
				var newVar = new CvgVariableDate(this, vv.entityIndexBaseOne, vv.name, vv.id, vv.dataType, wFormat, vv.state, wLocalformat, wDatePivot);
				this.setVar(wI, newVar);
				newVar.mustBeFormatted = true;
				newVar.setServerValue(aVal[wI]);

			} else {
				v.setUnModifiableServerValue(aVal[wI]);
			}

			wI++;
		}
	},
	setColumnsFormats: function(aFormats) {
		var wNbResu = aFormats.length;
		var wI = 0,
			nbVar = this.vars.length;
		while (wI < nbVar && wI < wNbResu) {
			var wFormatDef = aFormats[wI];
			if (wFormatDef != null && !wFormatDef.isNull()) {
				var wFormat = new CvgFormat(wFormatDef.value);
				if (wFormat.isValid()) {
					var v = this.getVar(wI);
					if (v != null) {
						v.setServerFormat(wFormat);
						v.mustBeFormatted = !wFormat.isLocalMenu();
					}
				}

			}
			wI++;
		}
	},
	setColumnsTitles: function(aTitles) {
		var wTitre;
		var wNbResu = aTitles.length;
		var wI = 0,
			nbVar = this.vars.length;
		while (wI < nbVar && wI < wNbResu) {
			wTitre = aTitles[wI];
			if (wTitre != null && !wTitre.isNull()) {
				var v = this.getVar(wI);
				if (v != null) {
					v.setServerTitle(wTitre.value);
				}
			}
			wI++;
		}
	},
	toJSON: function() {
		var object = {};
		object.$uuid = this.zeroBaseLineIdx;
		// line number
		var j = 0;
		for (var i = 0; i < this.vars.length; i++) {
			var item = this.vars[i];
			if (item.hasServerValueModification()) {
				object[item.getJsonKey()] = item.getValueForJson();
				j++;
			}
		}
		if (j <= 0) {
			return null;
		}

		return object;
	}
});

var CvgLeftListLineLevel = exports.CvgLeftListLineLevel = helpers.defineClass(function(aStackedWindow, aLeftList, aId, aNbVariables, localIdx) {
	CvgLeftListLine.call(this, aStackedWindow, aLeftList, aId, aNbVariables, localIdx);
}, CvgLeftListLine, {

	clone: function() {
		var idx = this.dataSrc.lines.length;
		var wClone = new CvgLeftListLineLevel(this.requester, this.dataSrc, this.id, this.vars.length, idx);
		this.cloneVars(wClone);
		return wClone;
	}
});