"use strict"; var helpers = require('syracuse-core/lib/helpers');

	var CModificationsErazor = helpers.defineClass(function() {}, CTraverser, {
		private CModificationsErazor() {
		}, doWhenTraverse: function(aValue, aIdx, ITraverser.When aWhen) {
			if (aValue instanceof CAdapiEntity) {
				((CAdapiEntity) aValue).razModification();
			}
			if (aValue instanceof ITraversable) {
				return ((ITraversable) aValue).traverseChilds(this);
			} else {
				return ITraverser.CONTINUE_TRAVERSING;//pour ne pas arrï¿½ter de "traverser" les "Values"
			}
		}
	}

var CAdapiStackedWindows = helpers.defineClass(function() {}, ArrayList<CAdapiStackedWindow>, {
	private static final long serialVersionUID = 152909804164526373L;

	public CAdapiStackedWindows() {
		TODO_SUPER();
	}, findWin: function(aWinId) {
		var wStackedWindow;
		var wMax = this.size();
		var wI = wMax - 1;
		while (wI > -1) {
			wStackedWindow = this.get(wI);
			if (wStackedWindow.getEntityIndexBaseOne() == aWinId) {
				return wStackedWindow;
			}
			wI--;
		}
		return null;
	}, getTopStackedWindow: function() {
		if (this.size() == 0) {
			return null;
		} else {
			return this.get(this.size() - 1);
		}
	}, popStackedWindow: function() {
		return this.remove(this.size() - 1);
	}, pushStackedWindow: function(aStackedWindow) {
		this.add(aStackedWindow);
	}, razModifications: function() {
		this.traverseChilds(new CModificationsErazor());
	}, traverseAll: function(aTraverser) {
		var wStackedWindow;
		var wMax = this.size();
		var wI = wMax - 1;
		while (wI > -1) {
			wStackedWindow = this.get(wI);
			if (aTraverser.doWhenTraverse(wStackedWindow, wI) == ITraverser.STOP_TRAVERSING) {
				return ITraverser.STOP_TRAVERSING;
			}
			if (wStackedWindow.traverseAll(aTraverser) == ITraverser.STOP_TRAVERSING) {
				return ITraverser.STOP_TRAVERSING;
			}
			wI--;
		}
		return ITraverser.CONTINUE_TRAVERSING;
	}, traverseChilds: function(aTraverser) {
		var wMax = this.size();
		var wEntry;
		var wI = 0;
		while (wI < wMax) {
			wEntry = this.get(wI);

			if (aTraverser.doWhenTraverse(wEntry, wI) == ITraverser.STOP_TRAVERSING) {
				return ITraverser.STOP_TRAVERSING;
			}
			wI++;
		}
		return ITraverser.CONTINUE_TRAVERSING;
	}, traverseSettable: function(aStructIst, aAdapiSetter) {
		var wAdapiRequesterWindow = this.findWin(aStructIst.getWin());
		if (wAdapiRequesterWindow == null) {
			return false;
		}
		if (!aStructIst.isWindowIst()) {
			return wAdapiRequesterWindow.traverseSettable(aStructIst, aAdapiSetter);
		} else {
			return aAdapiSetter.setAdapiModifiable(aStructIst, wAdapiRequesterWindow);
		}
	}
}
