"use strict";
var helpers = require('syracuse-core/lib/helpers');
var CTraverser = function() {};
var ArrayList = function() {};

var CModificationsErazor = helpers.defineClass(function() {}, CTraverser, {
	doWhenTraverse: function(aValue, aIdx, aWhen) {
		if (aValue instanceof CAdapiEntity) {
			aValue.razModification();
		}
		if (aValue instanceof ITraversable) {
			return aValue.traverseChilds(this);
		} else {
			return ITraverser.CONTINUE_TRAVERSING; //pour ne pas arrï¿½ter de "traverser" les "Values"
		}
	}
});

var serialVersionUID = "152909804164526373";

var CAdapiStackedWindows = helpers.defineClass(function() {
	TODO_SUPER();
}, ArrayList, {
	findWin: function(aWinId) {
		var wStackedWindow;
		var wMax = this.size();
		var wI = wMax - 1;
		while (wI > -1) {
			wStackedWindow = this.get(wI);
			if (wStackedWindow.entityIndexBaseOne == aWinId) {
				return wStackedWindow;
			}
			wI--;
		}
		return null;
	},
	getTopStackedWindow: function() {
		if (this.size() == 0) {
			return null;
		} else {
			return this.get(this.size() - 1);
		}
	},
	popStackedWindow: function() {
		return this.remove(this.size() - 1);
	},
	pushStackedWindow: function(aStackedWindow) {
		this.add(aStackedWindow);
	},
	razModifications: function() {
		this.traverseChilds(new CModificationsErazor());
	},
	traverseAll: function(aTraverser) {
		var wStackedWindow;
		var wMax = this.size();
		var wI = wMax - 1;
		while (wI > -1) {
			wStackedWindow = this.get(wI);
			if (aTraverser.doWhenTraverse(wStackedWindow, wI) == ITraverser.STOP_TRAVERSING) {
				return ITraverser.STOP_TRAVERSING;
			}
			if (wStackedWindow.traverseAll(aTraverser) == ITraverser.STOP_TRAVERSING) {
				return ITraverser.STOP_TRAVERSING;
			}
			wI--;
		}
		return ITraverser.CONTINUE_TRAVERSING;
	},
	traverseChilds: function(aTraverser) {
		var wMax = this.size();
		var wEntry;
		var wI = 0;
		while (wI < wMax) {
			wEntry = this.get(wI);

			if (aTraverser.doWhenTraverse(wEntry, wI) == ITraverser.STOP_TRAVERSING) {
				return ITraverser.STOP_TRAVERSING;
			}
			wI++;
		}
		return ITraverser.CONTINUE_TRAVERSING;
	},
	traverseSettable: function(aStructIst, aAdapiSetter) {
		var wAdapiRequesterWindow = this.findWin(aStructIst.win);
		if (wAdapiRequesterWindow == null) {
			return false;
		}
		if (!aStructIst.isWindowIst()) {
			return wAdapiRequesterWindow.traverseSettable(aStructIst, aAdapiSetter);
		} else {
			return aAdapiSetter.setAdapiModifiable(aStructIst, wAdapiRequesterWindow);
		}
	}
});