"use strict";

var helpers = require('syracuse-core/lib/helpers');
var forEachKey = helpers.object.forEachKey;

exports.entity = {
  $properties: {
    firstName: {
      $minLength: 3,
      $control: function(_, instance, val) {
        if (val && val.length && (val[0] === "$")) return instance.$addError("firstName cannot start with $");
      },
      $propagate: function(_, instance, val) {
    	  instance.propagatedProp(_, val);
      }
    },
    lastName: {
      $isMandatory: true
    },
    fullName: {
      $compute: function(_, instance) {
        return instance.firstName(_) + " " + instance.lastName(_);
      }
    },
    propagatedProp: {
    	
    }
  },
  $relations: {
    address: {
    	$type: "address",
      isChild: true,
//      owned: true,
      mandatory: true,
      before: "lastName"
    },
    userInfo: {
    	$type: "userInfo",
      isChild: true,
//      owned: true,
      mandatory: false
    },
    posts: {
      type: "posts",
      inv: "user",
      isChild: true,
//      owned: true,
      mandatory: false,
      defaultOrder: [
        ["postNum", true]
      ]
    },
    visitedCountries: {
    	type: "countries"
    }

  },
  $events: { //created: function(context, user, next) {
    //  user.lastName = user.lastName + "-" + new Date();
    //  next();
    //},
  },
  $rules: {
    afterCreateInstance: {
      $event: "created",
      $action: function(_, context, user) {
        if (!user.address) user.address = context.create(_, 'Address', null);
      }
    },
    sortPostsHack: {
      $event: "listChanged",
      $triggers: ["posts"],
      $action: function(_, context, user, list, startIndex) {
        if (list && context.interactive) {
          list.forEach(function(post, index) {
            post.postNum = index + 1;
          });
        }
      }
    },
    firstNameHack: {
      $event: "changed",
      $triggers: ["firstName"],
      $type: "propagation",
      $action: function(_, context, user) {}

    },
    fullNameHack: {
      $event: "changed",
      $triggers: ["firstName", "lastName"],
      $type: "propagation",
      $action: function(_, context, user) {
        if (context.interactive) {
          var sep = (user.lastName ? " " : "");
          user.fullName = (user.firstName || "") + sep + (user.lastName || "");
        }
      }
    }
  },
  $control: function(_, instance) {
    if (instance.lastName(_) === "Smithy") {
      return instance.$addError("last name cannot be Smithy");
    }
  },
  $services: {
    changeLastName: {
      $method: "PUT",
      $isMethod: true,
      $title: "Change last name",
      $execute: function(_, context, instance) {
        instance.lastName(_, "changedLastName");
      }
    }
  },
  $facets: {
    $query: ["firstName"]
  }
}