{
  "name": "xml-crypto",
  "version": "0.3.26",
  "description": "Xml digital signature and encryption library for Node.js",
  "engines": {
    "node": ">=0.4.0"
  },
  "author": {
    "name": "Yaron Naveh",
    "url": "yaronn01@gmail.com, http://webservices20.blogspot.com/"
  },
  "dependencies": {
    "xmldom": "=0.1.19",
    "xpath.js": ">=0.0.3"
  },
  "devDependencies": {
    "nodeunit": ">=0.6.4"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yaronn/xml-crypto.git"
  },
  "main": "./index.js",
  "directories": {
    "lib": "./lib"
  },
  "keywords": [
    "xml",
    "digital signature",
    "xml encryption",
    "x.509 certificate"
  ],
  "licenses": [
    {
      "type": "MIT License",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "scripts": {
    "test": "nodeunit ./test/canonicalization-unit-tests.js ./test/c14nWithComments-unit-tests.js ./test/signature-unit-tests.js ./test/saml-response-test.js ./test/signature-integration-tests.js"
  },
  "readme": "## xml-crypto\r\nAn xml digital signature library for node. Xml encryption is coming soon. Written in pure javascript!\r\n\r\nFor more information visit [my blog](http://webservices20.blogspot.com/) or [my twitter](https://twitter.com/YaronNaveh).\r\n\r\n## Install\r\nInstall with [npm](http://github.com/isaacs/npm):\r\n\r\n    npm install xml-crypto\r\n\r\nA pre requisite it to have [openssl](http://www.openssl.org/) installed and its /bin to be on the system path. I used version 1.0.1c but it should work on older versions too.\r\n\r\n## Signing Xml documents\r\nUse this code:\r\n\r\n`````javascript\r\n\tvar SignedXml = require('xml-crypto').SignedXml\t  \r\n\t  , fs = require('fs')\r\n\r\n\tvar xml = \"<library>\" +\r\n\t            \"<book>\" +\r\n\t              \"<name>Harry Potter</name>\" +\r\n\t            \"</book>\" +\r\n\t          \"</library>\"\r\n\r\n\tvar sig = new SignedXml()\r\n\tsig.addReference(\"//*[local-name(.)='book']\")    \r\n\tsig.signingKey = fs.readFileSync(\"client.pem\")\r\n\tsig.computeSignature(xml)\r\n\tfs.writeFileSync(\"signed.xml\", sig.getSignedXml())\r\n\r\n`````\r\n\r\nThe result will be:\r\n\r\n\r\n`````xml\r\n\t<library>\r\n\t  <book Id=\"_0\">\r\n\t    <name>Harry Potter</name>\r\n\t  </book>\r\n\t  <Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\">\r\n\t    <SignedInfo>\r\n\t      <CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />\r\n\t      <SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" />\r\n\t      <Reference URI=\"#_0\">\r\n\t        <Transforms>\r\n\t          <Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />\r\n\t        </Transforms>\r\n\t        <DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" />\r\n\t        <DigestValue>cdiS43aFDQMnb3X8yaIUej3+z9Q=</DigestValue>\r\n\t      </Reference>\r\n\t    </SignedInfo>\r\n\t    <SignatureValue>vhWzpQyIYuncHUZV9W...[long base64 removed]...</SignatureValue>\r\n\t  </Signature>\r\n\t</library>\r\n`````\r\n\r\n\r\nNotes:\r\n\r\nsig.getSignedXml() returns the original xml document with the signature pushed as the last child of the root node (as above). This assumes you are not signing the root node but only sub node(s) otherwise this is not valid. If you do sign the root node call sig.getSignatureXml() to get just the signature part and sig.getOriginalXmlWithIds() to get the original xml with Id attributes added on relevant elements (required for validation).\r\n\r\n## Verifying Xml documents\r\n\r\nYou can use any dom parser you want in your code (or none, depending on your usage). This sample uses [xmldom](https://github.com/jindw/xmldom) so you should install it first:\r\n\r\n    npm install xmldom    \r\n\r\nThen run:\r\n\r\n`````javascript\r\n\tvar select = require('xml-crypto').xpath\r\n\t  , dom = require('xmldom').DOMParser\r\n\t  , SignedXml = require('xml-crypto').SignedXml\r\n\t  , FileKeyInfo = require('xml-crypto').FileKeyInfo  \r\n\t  , fs = require('fs')\r\n\r\n\tvar xml = fs.readFileSync(\"signed.xml\").toString()\r\n\tvar doc = new dom().parseFromString(xml)    \r\n\r\n\tvar signature = select(doc, \"/*/*[local-name(.)='Signature' and namespace-uri(.)='http://www.w3.org/2000/09/xmldsig#']\")[0]\r\n\tvar sig = new SignedXml()\r\n\tsig.keyInfoProvider = new FileKeyInfo(\"client_public.pem\")\r\n\tsig.loadSignature(signature.toString())\r\n\tvar res = sig.checkSignature(xml)\r\n\tif (!res) console.log(sig.validationErrors)\r\n`````\r\n\r\nNote: \r\n\r\nThe xml-crypto api requires you to supply it separately the xml signature (\"&lt;Signature&gt;...&lt;/Signature&gt;\", in loadSignature) and the signed xml (in checkSignature). The signed xml may or may not contain the signature in it, but you are still required to supply the signature separately.\r\n\r\n## Supported Algorithms\r\nThe first release always uses the following algorithems:\r\n\r\n* Exclusive Canonicalization http://www.w3.org/2001/10/xml-exc-c14n#\r\n* SHA1 digests http://www.w3.org/2000/09/xmldsig#sha1\r\n* RSA-SHA1 signature algorithm http://www.w3.org/2000/09/xmldsig#rsa-sha1\r\n\r\nyou are able to extend xml-crypto with further algorithms.\r\n\r\n## Customizing Algorithms\r\nThe following sample shows how to sign a message using custom algorithms.\r\n\r\nFirst import some modules:\r\n\r\n`````javascript\r\n\tvar SignedXml = require('xml-crypto').SignedXml\r\n\t  , fs = require('fs')\r\n`````\r\n\r\n\r\nNow define the extension point you want to implement. You can choose one ore more.\r\n\r\nA key info provider is used to extract and construct the key and the KeyInfo xml section.\r\nImplement it if you want to create a signature with a KeyInfo section, or you want to read your key in a different way then the default file read option.\r\n`````javascript\r\n\t/**/\r\n\tfunction MyKeyInfo() {\r\n\t  this.getKeyInfo = function(key) {\r\n\t    return \"<X509Data></X509Data>\"\r\n\t  }\r\n\t  this.getKey = function(keyInfo) {\r\n\t    //you can use the keyInfo parameter to extract the key in any way you want      \r\n\t    return fs.readFileSync(\"key.pem\")\r\n\t  }\r\n\t}\r\n`````\r\n\r\nA custom hash algorithm is used to calculate digests. Implement it if you want a hash other than the default SHA1.\r\n\r\n`````javascript\r\n\tfunction MyDigest() {\r\n\r\n\r\n\t  this.getHash = function(xml) {    \r\n\t    return \"the base64 hash representation of the given xml string\"\r\n\t  }\r\n\r\n\t  this.getAlgorithmName = function() {\r\n\t    return \"http://myDigestAlgorithm\"\r\n\t  }\r\n\t}\r\n`````\r\n\r\nA custom signing algorithm. The default is RSA-SHA1\r\n`````javascript\t\r\n\tfunction MySignatureAlgorithm() {\r\n\r\n\t  /*sign the given SignedInfo using the key. return base64 signature value*/\r\n\t  this.getSignature = function(signedInfo, signingKey) {            \r\n\t    return \"signature of signedInfo as base64...\"\r\n\t  }\r\n\r\n\t  this.getAlgorithmName = function() {\r\n\t    return \"http://mySigningAlgorithm\"\r\n\t  }\r\n\r\n\t}\r\n`````\r\n\r\nCustom transformation algorithm. The default is exclusive canonicalization.\r\n\r\n`````javascript\t\r\n\tfunction MyTransformation() {\r\n\t  \r\n\t  /*given a node (from the xmldom module) return its canonical representation (as string)*/\r\n\t  this.process = function(node) {\t  \t\r\n\t  \t//you should apply your transformation before returning\r\n\t    return node.toString()\r\n\t  }\r\n\r\n\t  this.getAlgorithmName = function() {\r\n\t    return \"http://myTransformation\"\r\n\t  }\r\n\t}\r\n`````\r\nCustom canonicalization is actually the same as custom transformation. It is applied on the SignedInfo rather than on references.\r\n\r\n`````javascript\r\n\tfunction MyCanonicalization() {\r\n\r\n\t  /*given a node (from the xmldom module) return its canonical representation (as string)*/\r\n\t  this.process = function(node) {\r\n\t    //you should apply your transformation before returning\r\n\t    return \"< x/>\"\r\n\t  }\r\n\r\n\t   this.getAlgorithmName = function() {\r\n\t    return \"http://myCanonicalization\"\r\n\t  }\r\n\t}\r\n`````\r\n\r\nNow you need to register the new algorithms:\r\n\r\n`````javascript\r\n\t/*register all the custom algorithms*/\r\n\r\n\tSignedXml.CanonicalizationAlgorithms[\"http://MyTransformation\"] = MyTransformation\r\n\tSignedXml.CanonicalizationAlgorithms[\"http://MyCanonicalization\"] = MyCanonicalization\r\n\tSignedXml.HashAlgorithms[\"http://myDigestAlgorithm\"] = MyDigest\r\n\tSignedXml.SignatureAlgorithms[\"http://mySigningAlgorithm\"] = MySignatureAlgorithm\r\n`````\r\n\r\nNow do the signing. Note how we configure the signature to use the above algorithms:\r\n\r\n`````javascript\r\n\tfunction signXml(xml, xpath, key, dest)\r\n\t{\r\n\t  var sig = new SignedXml()\r\n\r\n\t  /*configure the signature object to use the custom algorithms*/\r\n\t  sig.signatureAlgorithm = \"http://mySignatureAlgorithm\"\r\n\t  sig.keyInfoProvider = new MyKeyInfo()\r\n\t  sig.canonicalizationAlgorithm = \"http://MyCanonicalization\"\r\n\t  sig.addReference(\"//*[local-name(.)='x']\", [\"http://MyTransformation\"], \"http://myDigestAlgorithm\")\r\n\r\n\t  sig.signingKey = fs.readFileSync(key)\r\n\t  sig.addReference(xpath)    \r\n\t  sig.computeSignature(xml)\r\n\t  fs.writeFileSync(dest, sig.getSignedXml())\r\n\t}\r\n\r\n\tvar xml = \"<library>\" +\r\n\t            \"<book>\" +\r\n\t              \"<name>Harry Potter</name>\" +\r\n\t            \"</book>\"\r\n\t          \"</library>\"\r\n\r\n\tsignXml(xml, \r\n\t  \"//*[local-name(.)='book']\", \r\n\t  \"client.pem\", \r\n\t  \"result.xml\")\r\n`````\r\n\r\nYou can always look at the actual code as a sample (or drop me a [mail](mailto:yaronn01@gmail.com)).\r\n\r\n\r\n## X.509 / Key formats\r\nXml-Crypto internally relies on node's crypto module. This means pem encoded certificates are supported. So to sign an xml use key.pem that looks like this (only the begining of the key content is shown):\r\n\r\n\t-----BEGIN PRIVATE KEY-----\r\n\tMIICdwIBADANBgkqhkiG9w0...\r\n\t-----END PRIVATE KEY-----\r\n\r\nAnd for verification use key_public.pem:\r\n\r\n\t-----BEGIN CERTIFICATE-----\r\n\tMIIBxDCCAW6gAwIBAgIQxUSX...\r\n\t-----END CERTIFICATE-----\r\n\r\n**Converting .pfx certificates to pem**\r\n\r\nIf you have .pfx certificates you can convert them to .pem using [openssl](http://www.openssl.org/):\r\n\r\n\topenssl pkcs12 -in c:\\certs\\yourcert.pfx -out c:\\certs\\cag.pem\r\n\r\nThen you could use the result as is for the purpose of signing. For the purpose of validation open the resulting .pem with a text editor and copy from -----BEGIN CERTIFICATE----- to  -----END CERTIFICATE----- (including) to a new text file and save it as .pem.\r\n\r\n## Development\r\nThe test framework is [nodeunit](https://github.com/caolan/nodeunit). To run tests use:\r\n\r\n    $> npm test\r\n\r\n## More information\r\nVisit my [blog](http://webservices20.blogspot.com/) or my [twitter](http://twitter.com/#!/YaronNaveh)\r\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/yaronn/xml-crypto/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/yaronn/xml-crypto/issues"
  },
  "homepage": "https://github.com/yaronn/xml-crypto",
  "_id": "xml-crypto@0.3.26",
  "dist": {
    "shasum": "f9ac9d69e1317db9d5fc71f8be1f28c6eb18a8be"
  },
  "_from": "xml-crypto@",
  "_resolved": "https://registry.npmjs.org/xml-crypto/-/xml-crypto-0.3.26.tgz"
}
