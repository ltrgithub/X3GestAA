"use strict";

const http = require("ez-streams").devices.http;
const querystring = require('querystring');
const helper = require('./helper');
const log = helper.log;

function GitHub(config) {
	var githubUrl = "https://api.github.com";
	// var accessToken = "access_token=" + config.github.token;

	function _submit(_, path, query, options) {
		var qo = {
			access_token: config.github.token
		};
		if (typeof(query) === "string") {
			query = querystring.parse(query);
		}
		var k;
		if (typeof(query) === "object") {
			for (k in query) {
				if (query[k]) {
					qo[k] = query[k];
				}
			}
		}
		options = options || {};
		var headers = {
			"User-Agent": config.github.username,
			"Accept-Language": "en-us",
		};
		if (options.headers) {
			for (k in options.headers) {
				headers[k] = options.headers[k];
			}
		}
		var ropt = {
			method: options.method || "get",
			url: path.indexOf("http") === 0 ? path : githubUrl + path + "?" + querystring.stringify(qo),
			headers: headers
		};
		var req = http.client(ropt);
		// log(ropt.method.toUpperCase() + " " + ropt.url);
		var response = req.end().response(_);
		var body = response.readAll(_);
		var data = JSON.parse(body);
		var links = (response.headers["link"] || "").split(",").reduce(function(r, link) {
			var m = /<(.*)>\s*;\s*rel="(\w+)"/.exec(link);
			if (m) {
				r[m[2]] = m[1];
			}
			return r;
		}, {});
		// log(response.statusCode + "\n" + body);
		return {
			status: response.statusCode,
			data: data,
			links: links,
			headers: response.headers
		};
	}

	function _orgs(opts) {
		opts = opts || {};
		return "/orgs/" + (opts.org || config.github.org);
	}

	this.get = function(_, path, query, options) {
		return _submit(_, path, query, options);
	};

	this.getUsers = function(data) {
		return data.map(function(e) {
			return {
				login: e.login,
				url: e.url
			};
		});
	};

	this.getMembers = function(_, opts) {
		opts = opts || {};
		var resp;
		var path = _orgs(opts) + "/members";
		var query = {};
		if (opts.filter)
			query.filter = opts.filter;

		resp = _submit(_, path, query);

		// resp = githubRequest(_, "https://api.github.com/users/JamesHarrisonZa?" + accessToken);
		// console.error(JSON.stringify(resp.data));
		// resp = githubRequest(_, "https://api.github.com/users/SeanSobey?" + accessToken);
		console.error(JSON.stringify(resp.data));
		// process.exit(0);

		var users = this.getUsers(resp.data);

		while (resp.links.next) {
			// console.log("\n" + resp.links.next);
			resp = _submit(_, resp.links.next);
			users = users.concat(this.getUsers(resp.data));
		}
		// console.error("users:", users);
		// console.log("count=" + users.length);
		return users;
	};

	this.getUser = function(_, username) {
		var resp;
		resp = _submit(_, "/users/" + username);

		// log(JSON.stringify(resp.data));
		return resp.data;
		// process.exit(0);
	};

	this.getRepos = function(_, type, opts) {
		opts = opts || {};
		return _submit(_, _orgs(opts) + "/repos", "type=" + type).data;
	};

	this.searchCode = function(_, what, repo) {
		var query = "q=" + what + "+in:file+repo:" + repo;
		return _submit(_, "/search/code", query, {
			headers: {
				"Accept": "application/vnd.github.v3.text-match+json"
			}
		}).data;
	};

	this.checkMembership = function(_, member, opts) {
		var resp = _submit(_, _orgs(opts) + "/members/" + member, null, {
			headers: {
				"Accept": "application/vnd.github.korra-preview"
			}
		});
		return {
			isMember: resp.status === 204,
			public: resp.status === 302 && resp.headers.location
		};
	};

	this.addMember = function(_, member, role, opts) {
		opts = opts || {};
		return _submit(_, _orgs(opts) + "/memberships/" + member, {
			role: opts.role
		}, {
			headers: {
				"Accept": "application/vnd.github.korra-preview"
			},
			method: "put"
		});
	};

	this.pendingInvitations = function(_, opts) {
		var resp = _submit(_, _orgs(opts) + "/invitations", null, {
			headers: {
				"Accept": "application/vnd.github.korra-preview"
			}
		});

		var invitations = resp.data;

		while (resp.links.next) {
			resp = _submit(_, resp.links.next);
			invitations = invitations.concat(resp.data);
		}

		return invitations;
	};

}

exports.GitHub = GitHub;

var child = require('child_process');

exports.GitCommander = function(path) {
	this.exec = function(cmd, args, cb, opt) {
		opt = opt || {};
		opt.cwd = opt.cwd || path;
		var gitargs = [cmd].concat(args || []);
		child.execFile("git", gitargs, opt, function(error, stdout, stderr) {
			cb(error, stdout, stderr);
		});
	};
};
