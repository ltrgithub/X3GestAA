"use strict"
/*
This tools transform a log generated by the V7 C engine in a csv file which
can be loaded in the flamegraph online application : http://thlorenz.github.io/flamegraph/web/
*/
var ez   = require('ez-streams');

function consoleWriter() {
	var id=0;
	return ez.devices.generic.writer(function(_, item) {
		console.log(item);
		});
};

var fileIn	    = process.argv[2];
var fileOut1	= fileIn.substring(0,fileIn.lastIndexOf('.'))+".txt";

console.log("fileIn:"+fileIn);
console.log("fileOut1:"+fileOut1);


var x3Log = {
	    $name: "X3LOG",
	    $type: "application/json",
	    $after: "\n",
	    $properties: {
	        channel: {
	            $type: "application/x-string",
	            $before:"<",
	            $after:">"
	        },
	        script: {
	            $type: "application/x-string",
	            $before:"/",
	            $after:"$"
	        },
	        line: {
	            $type: "application/x-number",
	            $before:"(",
	            $after:")"
	        },
	        expression: {
	            $type: "application/x-string",
	            $after:","
	        },
	        tick: {
	            $type: "application/x-number",
	            $before:"tick:"
	        },
	    }
	};


var dst1 = ez.devices.file.text.writer(fileOut1);

ez.devices.file.text.reader(fileIn).transform(ez.transforms.jedi.parser(x3Log))
.map(function() {
	var records = [];
	var previous;
	return function(_,record) {
		//dbg:console.log(JSON.stringify(record));
		record.level = 1;
		for(var i=0,len=record.expression.length;i<len;i++) {
			var c = record.expression.charAt(i);
			if(c !== ' ' && c !== '|') break;
			if(c === '|') record.level++;
		}
		record.expression = record.expression.substring(i);
		return record;
	};
}())
.transform(function(_, reader, writer) {
	var path = [];
	var level = 0;
	var previous;
	var record;
	
	while( (record = reader.read(_)) !== undefined) {
		if(previous) {
			var statement = "("+previous.script+"."+previous.expression + ")";
			if(previous.level == level) {
				path[path.length-1] = statement;
			} else if(previous.level > level) {
				path.push(statement);
			} else if(previous.level < level) {
				// Remove elements
				path = path.splice(0,previous.level-1);
				path.push(statement);
			}
			level = previous.level;
			var samples = record.tick-previous.tick; 
			writer.write(_,path.join('; ')+" "+samples+"\n");
		}
		previous = record;
	}

})
.pipe(_,dst1);
