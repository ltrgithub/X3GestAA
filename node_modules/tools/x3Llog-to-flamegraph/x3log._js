"use strict"
/*
This tools transform a log generated by the V7 C engine in a csv file which
can be loaded in the flamegraph online application : http://thlorenz.github.io/flamegraph/web/
*/
var ez   = require('ez-streams');

function consoleWriter() {
	var id=0;
	return ez.devices.generic.writer(function(_, item) {
		console.log(item);
		});
};

var fileIn	    = process.argv[2];
var fileOut1	= fileIn.substring(0,fileIn.lastIndexOf('.'))+".flg";
var fileOut2	= fileIn.substring(0,fileIn.lastIndexOf('.'))+".txt";

console.log("fileIn:"+fileIn);
console.log("fileOut1:"+fileOut1);
console.log("fileOut2:"+fileOut2);


var x3Log = {
	    $name: "X3LOG",
	    $type: "application/json",
	    $after: "\n",
	    $properties: {
	        channel: {
	            $type: "application/x-string",
	            $before:"<",
	            $after:">"
	        },
	        script: {
	            $type: "application/x-string",
	            $before:"/",
	            $after:"$"
	        },
	        line: {
	            $type: "application/x-number",
	            $before:"(",
	            $after:")"
	        },
	        expression: {
	            $type: "application/x-string",
	            $after:","
	        },
	        tick: {
	            $type: "application/x-number",
	            $before:"tick:"
	        },
	    }
	};

var src = ez.devices.file.text.reader(fileIn); 

var readers = src.transform(ez.transforms.jedi.parser(x3Log))
.map(function() {
	var records = [];
	var previous;
	return function(_,record) {
		//dbg:console.log(JSON.stringify(record));
		record.level = 1;
		for(var i=0,len=record.expression.length;i<len;i++) {
			var c = record.expression.charAt(i);
			if(c !== ' ' && c !== '|') break;
			if(c === '|') record.level++;
		}
		record.expression = record.expression.substring(i);
		record.self = 0;

		if(previous && record.level > previous.level) {
			previous.self = undefined;
		}

		if(previous && record.level <= previous.level) {
			//dbg:console.log("time => ")
			for(var i = previous.level;i>=record.level;i--) {
				records[i].time = record.tick - records[i].tick;
				if(records[i].self === undefined) records[i].Self = 1;
				else records[i].self =  records[i].time;
				//dbg:console.log("for "+i+":"+JSON.stringify(records[i]));
			}
		}

		previous = record;
		records[record.level] = record;
		return record;
	};
}())
.fork([
	// First fork for flamegraph
	function(source) { return source.transform(function(_, reader, writer) {
		var rs = reader.readAll(_);
		var totalTime = rs[rs.length-1].tick;
		console.log("totalTime:"+totalTime+" rs.length:"+rs.length+" rs:"+JSON.stringify(rs[rs.length-1]));

		for(var i=0;i<rs.length;i++) {
			if(rs[i].time === undefined) rs[i].time = totalTime - rs[i].tick;
		
			var ident = new Array(rs[i].level||0).join(' ');
			rs[i].time = rs[i].time || 0;
			var percent = 100*(rs[i].time/totalTime);
			var self = rs[i].self || 0;
			var record = {
				"Running Time":self.toFixed(1)+"ms   "+percent.toFixed(1) +"%",
				Self:0,
				"":" ",
				"Symbol Name":ident+rs[i].script+"."+rs[i].expression,
				level:rs[i].level,
				tick:rs[i].time
			};
			writer.write(_,record);
		}
	})},
	// Second fork for the summary
	function(source) { return source.transform(function(_, reader, writer) {
		var rs = reader.readAll(_);
		var summary = {};
		for(var i=0;i<rs.length;i++) {
			var key = rs[i].expression.replace(/\s+$/,'');
			summary[key] = summary[key] || {key:key,samples:0,time:0};
			summary[key].samples += 1;
			summary[key].time    += (rs[i].time || 0);
		}

		Object.keys(summary).forEach_(_,function(_,key) {
			writer.write(_,summary[key]);	
		});

	})}

]).readers;

var dst1 = ez.devices.file.text.writer(fileOut1);
var dst2 = ez.devices.file.text.writer(fileOut2);

var f1 = readers[0].transform(ez.transforms.csv.formatter()).pipe(!_,dst1);
var f2 = readers[1].transform(ez.transforms.csv.formatter()).pipe(!_,dst2);
f1(_);
f2(_);

// .transform(ez.transforms.csv.formatter())
// .pipe(_,dst);
