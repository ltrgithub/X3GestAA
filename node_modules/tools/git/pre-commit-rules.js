"use strict";
var fs = require('fs');
var beautify = require('js-beautify/beautify').js_beautify;
var JSHINT = require("jshint").JSHINT;
var beautifyCount = 0;
var asiCount = 0;
var errCount = 0;

function error(msg) {
	console.error("ERROR: " + msg);
	errCount++;
}

function info(msg) {
	console.log(msg);
}

function acceptFile(f) {
	var ext = f.substring(f.lastIndexOf('.'));
	if (ext !== '.js' && ext !== '._js') return false;
	if (f.indexOf('node_modules/tools/') >= 0) return false;
	if (f.indexOf('syracuse-') < 0 && f.indexOf('/node_modules/tools/') < 0) return false;
	var start = f.indexOf("node_modules/");
	if (f.indexOf('/deps/') > 0 || f.indexOf('/node_modules/', start + 1) > 0) return false;
	if (f.indexOf('/html/mobile/') > 0 && f.indexOf('/html/mobile/js/debug') < 0) return false;
	if (f.indexOf('syracuse-ui/themes/desktop/sage') >= 0) return false;
	return true;
}

exports.processFileSync = function(file) {
	if (!acceptFile(file)) return;
	if (!fs.existsSync(file)) return; // file deleted by commit
	var source = fs.readFileSync(file, 'utf8');
	if (!/^\uFEFF?\n?["']use strict["'];/.test(source.substring(0, source.indexOf('\n', 2)))) error(file + ': "use strict"; missing at top of file (must be first line)');
	if (/^[^\/\"\']*debugger/m.test(source)) error(file + ': contains active "debugger" statement');
	if (/^(<<<<<<<|=======|>>>>>>>)/m.test(source)) error(file + ': unresolved merge conflict (search for <<<<, ==== , >>>>)');
	if (/\bthrow\s+\(*\s*[\'\"]/m.test(source)) error(file + ': throw "..." detected - change it to throw new Error("...")');
	var modified = false;
	var beautified = beautify(source, {
		indent_char: '\t',
		indent_size: 1,
	});
	if (beautified !== source) {
		info(file + ": beautified");
		beautifyCount++;
		modified = true;
		source = beautified;
	}

	var asiFixed = false;
	if (!JSHINT(source, {
		es5: true,
		eqnull: true,
		expr: true,
	})) {
		var lines = source.split(/\r?\n/);
		JSHINT.data().errors.forEach(function(err) {
			if (!err) return;
			var line = lines[err.line - 1];
			if (/^Missing semicolon/.test(err.reason) && !/[;:\{]$/.test(line)) {
				lines[err.line - 1] += ';';
				asiFixed = true;
			}
		});
		if (asiFixed) {
			console.log(file + ": fixed semicolons");
			asiCount++;
			modified = true;
			source = lines.join('\n');
		}
		if (modified) fs.writeFileSync(file, source, 'utf8');
	}	
};

exports.finish = function() {
	if (beautifyCount > 0) console.error(beautifyCount + " files have been beautified. Please run commit again!");
	if (asiCount > 0) console.error(asiCount + " files had missing semicolons (fixed). Please run commit again!");
	if (errCount > 0) console.error(errCount + " errors detected by pre-commit hook. Aborting!");
	process.exit(errCount > 0 || beautifyCount > 0 || asiCount > 0);

};