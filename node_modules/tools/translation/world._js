"use strict";

function World(context) {
	this.context = context;

	this.submit = function(_, ep, params) {
		params = params || {};
		var session = context.session;
		return session.exec(_, params.head.url, params.body, params.head);
	};

	this.getLocales = function(_) {
		// return locales.readLocales(_); //adminDb.model.getEntity(_, "lookupLocale").$fetchInstances(_, context),
		var session = context.session;
		var resp = session.get(_, "/sdata/syracuse/collaboration/syracuse/lookupLocales?count=2000");
		return resp && resp.body && resp.body.$resources || [];
	};

	this.fetchInstances = function(_, ep, entityName, facet, opt) {
		var orm = ep.getOrm(_);
		var entity = orm.getEntity(_, entityName, facet);
		return orm.fetchInstances(_, entity, opt);
	};

	this.getEndpoint = function(endpoint) {
		return new EndpointMock(this, endpoint);
	};

	this.localizedText = function() {
		return Array.prototype.join.call(arguments, " ");
	};
}

module.exports = World;

function EndpointMock(world, endpoint) {
	this.datasetName = endpoint;
	this.baseUrl = "/sdata/x3/erp/" + endpoint + "/";
	var orm = new OrmMock(world, this);
	this.application = function(_) {
		return "x3";
	};
	this.contract = function(_) {
		return "erp";
	};
	this.dataset = function(_) {
		return this.datasetName;
	};
	this.getOrm = function(_) {
		return orm;
	};
	this.description = function(_) {
		return this.datasetName;
	};
}

function OrmMock(world, endpoint) {
	this.getEntity = function(_, name, facet) {
		return new EntityMock(name, facet);
	};

	this.fetchInstances = function(_, entity, opt) {
		var url = endpoint.baseUrl + entity.name + "?representation=" + entity.qualifiedName();
		if (opt.sdataWhere) url += "&where=" + opt.sdataWhere;
		if (opt.count) url += "&count=" + opt.count;

		var session = world.context.session;
		var resp = session.get(_, url);
		return wrapResources(resp && resp.body && resp.body.$resources);
	};
}

function EntityMock(name, facet) {
	this.name = name;
	this.facet = facet;

	this.qualifiedName = function() {
		return name + "." + facet;
	};
}

function wrapResources(res) {
	res = res || [];

	res.forEach(function(r) {
		Object.keys(r).forEach(function(k) {
			if (k[0] === "$")
				return;
			var v = r[k];
			r[k] = function(_) {
				return v;
			};
		});
	});

	return res;
}
