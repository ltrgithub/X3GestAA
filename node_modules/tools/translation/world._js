"use strict";
var sys = require('util');

function World(context) {
	this.context = context;

	var adminEp = new EndpointMock(this, "syracuse", "syracuse", "collaboration");

	this.submit = function(_, ep, params) {
		params = params || {};
		var session = context.session;
		return session.exec(_, params.head.url, params.body, params.head);
	};

	this.getLocales = function(_) {
		// return locales.readLocales(_); //adminDb.model.getEntity(_, "lookupLocale").$fetchInstances(_, context),
		var session = context.session;
		var resp = session.get(_, "/sdata/syracuse/collaboration/syracuse/lookupLocales?count=2000");
		return resp && resp.body && resp.body.$resources || [];
	};

	this.fetchInstances = function(_, ep, entityName, facet, opt) {
		var orm = ep.getOrm(_);
		var entity = orm.getEntity(_, entityName, facet);
		return orm.fetchInstances(_, entity, opt);
	};

	this.getEndpoint = function(endpoint) {
		return new EndpointMock(this, endpoint);
	};

	this.getCollaborationOrm = function(_) {
		return adminEp.getOrm(_);
	};

	this.simplifyItems = function(_, input, options) {
		var session = context.session;
		var resp = session.post(_, "/sdata/syracuse/collaboration/syracuse/importTools/$service/simplifyItems", input);
		var body = resp.body || {};
		if (body.$diagnoses && body.$diagnoses.length > 0) {
			var err = body.$diagnoses.reduce(function(r, d) {
				if (d.$severity === "error")
					r += d.$message + "\n";
				return r;
			}, "");
			if (err.length > 0)
				throw new Error(err);
		}
		return body.$items;
	}
}

module.exports = World;

function EndpointMock(world, dataset, app, contract) {
	app = app || "x3";
	contract = contract || "erp";
	this.datasetName = dataset;
	this.baseUrl = ["", "sdata", app, contract, dataset, ""].join("/");
	console.error("EndpointMock: baseUrl=" + this.baseUrl);
	var orm = new OrmMock(world, this);
	this.application = function(_) {
		return app;
	};
	this.contract = function(_) {
		return contract;
	};
	this.dataset = function(_) {
		return this.datasetName;
	};
	this.getOrm = function(_) {
		return orm;
	};
	this.description = function(_) {
		return this.datasetName;
	};
	this.x3ServerFolder = function(_) {
		return this.datasetName;
	};
}

function OrmMock(world, endpoint) {
	this.model = this;

	var cache = {};

	this.getEntity = function(_, name, facet) {
		var qname = name + "." + facet;
		var entity = cache[qname];
		if (entity == null) {
			cache[qname] = entity = new EntityMock(name, facet);
			var url = endpoint.baseUrl + "$prototypes('" + entity.qualifiedName() + "')";
			var session = world.context.session;
			var resp = session.get(_, url);
			entity.init(resp && resp.body);
			console.error("OrmMock.getEntity: entity=" + sys.inspect(entity));
		}

		return entity;
	};

	this.fetchInstances = function(_, entity, opt) {
		var url = endpoint.baseUrl + entity.name + "?representation=" + entity.qualifiedName();
		console.error("OrmMock.fetchInstances: url=" + url);

		if (opt.sdataWhere) url += "&where=" + opt.sdataWhere;
		if (opt.count) url += "&count=" + opt.count;

		var session = world.context.session;
		var resp = session.get(_, url);
		return wrapResources(resp && resp.body && resp.body.$resources);
	};
}

function EntityMock(name, facet) {
	this.name = name;
	this.facet = facet;

	this.qualifiedName = function() {
		return name + (facet ? "." + facet : "");
	};

	this.init = function(proto) {
		this.$properties = {};
		this.$relations = {};
		var properties = proto.$properties;
		var prop;
		for (var p in properties) {
			prop = properties[p];
			if (prop.$type === "application/x-array" || prop.$type === "application/x-reference") {
				this.$relations[p] = new Relation(p, prop);
			} else {
				this.$properties[p] = new Property(p, prop);
			}
			this[p] = properties[p];
		}
	};
}

function Property(key, prop) {
	this.key = key;
	this.prop = prop;
	this.mandatory = prop.$isMandatory;
	this.$isLocalized = (prop.$links || {}).$localize;
	if (this.$isLocalized) console.error("Localized Property: " + key);
}

Property.prototype = {
	isExternalStorage: function() {
		// console.log("Property.isExternalStorage: " + JSON.stringify(this.prop));
		return true;
	}
};

function Relation(key, prop) {
	Property.call(this, key, prop);
	this.isPlural = prop.$type === "application/x-array";
}

sys.inherits(Relation, Property);

Relation.prototype.getTargetEntity = function(varType) {
	return ((this.prop.$item || {}).$item || {}).$representation;
	console.log("Relation.getTargetEntity: " + this.key + " prop=" + JSON.stringify(this.prop, null, 2));
};


function wrapResources(res) {
	res = res || [];

	res.forEach(function(r) {
		Object.keys(r).forEach(function(k) {
			if (k[0] === "$")
				return;
			var v = r[k];
			r[k] = function(_) {
				return v;
			};
		});
	});

	return res;
}
