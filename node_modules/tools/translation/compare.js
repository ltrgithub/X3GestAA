"require strict";
// Find out differences in translations of resources
// invocation: node node_modules/tools/translation/compare [language1 [language2]]
// default is to compare "en" with "fr"
// it looks for typical Syracuse resource files in JSON format
// in these two languages, compares them and prints messages when
// - there is only a resource file for the first language
// - when an entry in the resource file for the first language does not occur in the resource file for the second language
//
// It does not report when an entry of the second language does not occur in the resource file for the first language

var fs = require('fs');
var lan1 = process.argv[2] || "en"
var lan2 = process.argv[3] || "fr"
console.log("Compare resources for "+lan1+" and "+lan2);

var lan1reg = new RegExp("-"+lan1+".json$");
var lan2rep = "-"+lan2+".json";

function investigate(dir)
{
    if (dir.indexOf('/cvgRecords/') >= 0 || dir.indexOf('node_modules/tools/') >= 0) return false;
    if (dir.indexOf('/.') >= 0) return false;
	var start = dir.indexOf("node_modules/");
	if (dir.indexOf('/deps/') > 0 || dir.indexOf('/node_modules/', start + 1) > 0) return false;
	if (dir.indexOf('/html/tests/') >0 || (dir.indexOf('/html/mobile/') > 0 && dir.indexOf('/html/mobile/js/debug') < 0)) return false;
	if (dir.indexOf('/syracuse-tablet/mockup') > 0) return false;
    var list = fs.readdirSync(dir);
    list.forEach(function(entry) {
    var path = dir+entry
    if (fs.statSync(path).isDirectory()) {
      investigate(path+"/");
    } else {
      if (lan1reg.test(entry))
      {
        var entry2 = entry.replace(lan1reg, lan2rep);
        if (list.indexOf(entry2) < 0) {
          console.log("Translation of "+path.substr(2)+" not available");
        } else {
          try {
            var j1 = JSON.parse(fs.readFileSync(path, "utf8"));
            var j2 = JSON.parse(fs.readFileSync(dir+"/"+entry2, "utf8"));
            var prefix = "Untranslated in "+path.substr(2)+":\n ";
            for (var k in j1)
            {
              if (!(k in j2)) {
                console.log(prefix+k);
                prefix = " ";
              }
            }
          } catch (e) {
            console.log("Error when processing "+path+": "+e);
          }
        }
      }
    }
  })
}

investigate("./");
