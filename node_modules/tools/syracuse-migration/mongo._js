"use strict";

var fs = require('streamline-fs');
var execFileSync = require('child_process').execFileSync;
var utils = require('./utils');
var helpers = require('syracuse-core').helpers;
var MongoClient = require('mongodb').MongoClient;

function exec(cmd, options, logFile) {
	var f = fs.openSync(logFile, 'w');
	var args = [];
	for (var prop in options) {
		if (prop === 'path') args.push(options[prop]);
		else if (options[prop] === true) args.push('--' + prop);
		else if (options[prop] !== false) args.push('--' + prop + '=' + options[prop]);
	}
	utils.log("Execute command:\n" + cmd + " " + args.join(' '));
	utils.log("Log file would be created: " + logFile);
	execFileSync(cmd, args,{ stdio: [0, f, f] });
}

exports.dump = function(mongodump, opts, logFile) {
	return exec(mongodump, opts, logFile);
};

exports.restore = function(mongorestore, opts, logFile) {
	return exec(mongorestore, opts, logFile);
};

exports.Client = helpers.defineClass(function(options) {
	this.url = 'mongodb://' + options.host + ':' + options.port + '/' + options.db;
	this.connectOptions = {
		db: {
            w: 1
        }
	};
	if (options.ssl) {
		this.connectOptions.server = {
        	ssl: true,
			sslCA: fs.readFileSync(options.sslCAFile),
			sslValidate: false,
			sslKey: fs.readFileSync(options.sslPEMKeyFile),
			sslCert: fs.readFileSync(options.sslPEMKeyFile),
			sslPass: options.sslPEMKeyPassword
		};
	}
}, null, {
	connect: function(_) {
		this.db = MongoClient.connect(this.url, this.connectOptions || {}, _);
		return this;
	},
	close: function() {
		this.db.close();
	},
	find: function(_, collection, filter) {
		filter = filter || {};
		collection = this.db.collection(collection);
		return collection.find(filter).toArray(_);
	},
	update: function(_, collection, filter, data) {
		collection = this.db.collection(collection);
		return collection.updateOne(filter, {
			$set : data
		}, _);
	},
	remove: function(_, collection, filter) {
		collection = this.db.collection(collection);
		return collection.remove(filter, _);
	}
});