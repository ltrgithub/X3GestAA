"use strict"
/*
This tools transform a log generated by the V7 C engine in a csv file which
can be loaded in the flamegraph online application : http://thlorenz.github.io/flamegraph/web/
*/
var ez   = require('ez-streams');

function consoleWriter() {
	var id=0;
	return ez.devices.generic.writer(function(_, item) {
		console.log(item);
		});
};

var fileIn	= process.argv[2];
var fileOut	= process.argv[3];
console.log("fileIn:"+fileIn);
console.log("fileOut:"+fileOut);


var x3Log = {
    $name: "X3LOG",
    $type: "application/json",
    $after: "\n",
    $properties: {
        channel: {
            $type: "application/x-string",
            $before:"<",
            $after:">",
            $optional:false
        },
        script: {
            $type: "application/x-string",
            $before:"/",
            $after:"$",
            $optional:false
        },
        line: {
            $type: "application/x-number",
            $before:"(",
            $after:")",
            $optional:false
        },
        expression: {
            $type: "application/x-string",
            $before:")",
            $after:",",
            $optional:false
        },
        tick: {
            $type: "application/x-number",
            $before:"tick:",
            $optional:false
        },
    }
};

//var dst = consoleWriter();
var dst = ez.devices.file.text.writer(fileOut);
var src = ez.devices.file.text.reader(fileIn); 

src.transform(ez.transforms.jedi.parser(x3Log))
.map(function() {
	var records = [];
	var previous;
	return function(_,record) {
		//dbg:console.log(JSON.stringify(record));
		record.level = 1;
		for(var i=0,len=record.expression.length;i<len;i++) {
			var c = record.expression.charAt(i);
			if(c !== ' ' && c !== '|') break;
			if(c === '|') record.level++;
		}
		record.expression = record.expression.substring(i);
		record.self = 0;

		if(previous && record.level > previous.level) {
			previous.self = undefined;
		}

		if(previous && record.level <= previous.level) {
			//dbg:console.log("time => ")
			for(var i = previous.level;i>=record.level;i--) {
				records[i].time = record.tick - records[i].tick;
				if(records[i].self === undefined) records[i].Self = 1;
				else records[i].self =  records[i].time;
				//dbg:console.log("for "+i+":"+JSON.stringify(records[i]));
			}
		}

		previous = record;
		records[record.level] = record;
		return record;
	};
}())
.transform(function(_, reader, writer) {
	var rs = reader.readAll(_);
	var totalTime = rs[rs.length-1].tick;

	for(var i=0;i<rs.length;i++) {
		if(rs[i].time === undefined) rs[i].time = totalTime - rs[i].tick;
	
		var ident = new Array(rs[i].level||0).join(' ');
		rs[i].time = rs[i].time || 0;
		var percent = 100*(rs[i].time/totalTime);
		var self = rs[i].self || 0;
		var record = {
			"Running Time":self.toFixed(1)+"ms   "+percent.toFixed(1) +"%",
			Self:0,
			"":" ",
			"Symbol Name":ident+rs[i].script+"."+rs[i].expression,
			level:rs[i].level,
			tick:rs[i].time
		};
		writer.write(_,record);
	}
})
.transform(ez.transforms.csv.formatter())
.pipe(_,dst);
