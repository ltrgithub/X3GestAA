"use strict";

var fs = require('streamline-fs');
var fsp = require('path');

var skipped = /^(\..*)$/;

function doDir(_, path, fn) {
	fs.readdir(path, _).forEach_(_, function(_, name) {
		if (skipped.test(name)) return;
		var p = fsp.join(path, name);
		var stat = fs.stat(p, _);
		if (stat.isDirectory()) doDir(_, p, fn);
		else if (/\.(js|_js|json|txt|json|css)$/.test(name)) {
			var text = fs.readFile(p, 'utf8', _);
			fn(_, path, text);
		}
	});
}

var root = fsp.join(__dirname, '../..');
var dirs = fs.readdir(root, _).filter_(_, function(_, s) {
	return !skipped.test(s) && fs.stat(fsp.join(root, s), _).isDirectory();
});
var RE = new RegExp('\\b(' + dirs.join('|') + ')\\b', 'g');

var dependencies = {};
dirs.forEach_(_, function(_, d) {
	if (skipped.test(d)) return;
	dependencies[d] = {};
	doDir(_, fsp.join(root, d), function(_, path, text) {
		text.replace(RE, function(s) {
			if (d !== s) dependencies[d][s] = (dependencies[d][s] || 0) + 1;
		});
	});
});

//console.log(dependencies);
var rev = {};
Object.keys(dependencies).forEach(function(k1) {
	Object.keys(dependencies[k1]).forEach(function(k2) {
		rev[k2] = rev[k2] || {};
		rev[k2][k1] = (rev[k2][k1] || 0) + dependencies[k1][k2];
	});
});

function reorder(obj) {
	if (!obj || typeof obj !== 'object') return obj;
	return Object.keys(obj).sort().reduce(function(r, k) {
		r[k] = reorder(obj[k]);
		return r;
	}, {})
}
dependencies = reorder(dependencies);
rev = reorder(rev);

var perec = require('perec');
console.log(perec.stringify({
	uses: dependencies,
	'used-by': rev
}));