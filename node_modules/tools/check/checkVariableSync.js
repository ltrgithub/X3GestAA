"use strict";
var fs = require('fs');
var util = require("util");
var uglify = require('uglify-js');

var nodeGlobals = {
	'Buffer': '',
	'require': '',
	'console': '',
	'process': '',
	'__dirname': '',
	'__filename': '',
	'module': '',
	'exports': '',
	'Error': '',
	'RangeError': '',
	'Array': '',
	'undefined': '',
	'JSON': '',
	'Object': '',
	'Math': '',
	'TypeError': '',
	'RegExp': '',
	'_': '',
	'NaN': '',
	'Infinity': "",
	'String': '',
	'Boolean': '',
	'Date': '',
	'Function': '',
	'Number': '',
	'eval': '',
	'isFinite': '',
	'isNaN': '',
	'parseInt': '',
	'parseFloat': '',
	'encodeURI': '',
	'decodeURI': '',
	'encodeURIComponent': '',
	'decodeURIComponent': '',
	'setTimeout': '',
	'setImmediate': '',
	'clearTimeout': '',
	'setInterval': '',
	'clearInterval': ''
};

var clientGlobals = {
	'$': '',
	'document': '',
	'alert': '',
	'syra_item':"",
	'syra_pageBuilder':"",
	'syra_locker':"",
	'syra_maximizer':"",
	'syra_url':"",
	'syra_trackers':"",
	'syra_menus':"",
	'md5':"",
	'syra_fields':"",
	'window': '',
	'jQuery': '',
	'syra_quality':"",
	'syra_layout':"",
	'syra_dataset':"",
	'syra_localizer':"",
	'syra_shortCuts':"",
	'external': "",
	'syra_site': "",
	'syra_dd': "",
	'repository': "",
	'syra_router': "",
	'html_sanitize':"",
	'syra_alert':"",
	'syra_over':"",
	'syra_dom':"",
	'syra_expression':"",
	'syra_local':"",
	'syra_form':"",
	'XMLHttpRequest': ""
};

var testGlobals = {
	'assert': '',
	'QUnit': '',
	'asyncTest': '',
	'start': '',
	'strictEqual': '',
	'ok': '',
	'equals': '',
	'equal': '',
	'deepEqual': '',
	'test': ''
};

// is this code only executed at the client?
function _isClientCode(path) {
	return path.indexOf('syracuse-ui') >= 0 || path.indexOf('/ui/') >= 0 || path.indexOf('/html/') >= 0 || path.indexOf('/client/') >= 0 || path.indexOf('/browser/') >= 0 || (path.indexOf('/msoffice/') >= 0 && path.indexOf('._js') < 0);
}

// is this code only executed in test cases?
function _isTestCode(path) {
	return (path.indexOf('test') >= 0);
}


// this function checks the code file for undeclared variables
// Parameters:
//  path: path of the file
//  source: content of the file (as string)
// Result: array of strings - one string for each undeclared variable (indicating position in code).
function checkFile(path, source) {
	if (/node_modules.*node_modules/.test(path) || path.indexOf('/deps/') > 0 || path.indexOf('/test/') > 0) return;
	// remove shebang
	source = source.replace(/^\#\!.*/, '');
	source = '(function(){\n' + source + '\n})';
	try {
		var top = uglify.parse(source);
		var clientCode = _isClientCode(path);
		var testCode = _isTestCode(path);
		top.figure_out_scope();
		var globals = top.globals;
		var header = path;
		var unknown = {};
		globals.each(function(a, name) {
			if (name !== 'arguments' && !(name in nodeGlobals) && !(clientCode && (name in clientGlobals)) && !(testCode && (name in testGlobals))) {
				unknown[name] = (unknown[name] || "") + a.orig.map(function(entry) {
					return "[" + (entry.start.line-1) + ":" + entry.start.col + "]";
				}).join();
			}
		});
		return Object.keys(unknown).sort().map(function(key) {
			return key + unknown[key];
		});
	} catch (e) {
		console.error("Parse error for " + path+" "+e);
		// console.log(path+": Parser error: "+e);
	}

}

exports.checkFile = checkFile;

