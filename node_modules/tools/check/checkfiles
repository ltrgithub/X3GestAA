#!/usr/bin/env _node

"use strict";
var fs = require("fs");
var JSHINT = require("jshint").JSHINT;

var binExts = [".png", ".ico", ".msi", ".exe", ".xlsx", ".mdp", ".as", ".dll", ".pdb", ".cache", //
".jpg", ".jpeg", ".swf", ".doc", ".dfont", ".gif", ".pdf", ".zip", ".ttc", ".ttf", ".db", //
".ds_store", ".o", ".node", ".eot", ".woff", ".otf", ".ppt", ".xls"];

var CR = '\r'.charCodeAt(0);
var LF = '\n'.charCodeAt(0);

function checkFile(_, path, buf) {
	var source = buf.toString("utf8");
    var buf1 = new Buffer(source, "utf8");
    if (buf1.length !== buf.length)
    	console.log(path + ": no UTF8");
	else    	
    for (var i = buf.length-1; i>= 0; i--) {
        if (buf[i] !== buf1[i]) {
        	console.log(path + ": No UTF8");
        	break;
        }
    }
	var bom = buf[0] === 0xEF && buf[1] == 0xBB && buf[2] === 0xBF;
	var line = 1;
	if (!bom) {
		// may enforce BOM later
		//console.log(path + ":" + line + ": BOM missing");
	}
	for (var i = 0, len = buf.length; i < len; i++) {
		var ch = buf[i];
		if (ch === CR) {
				console.log(path + ":" + line + ": CR");
			return;
		} else if (ch === LF) {
			line++;
		} 
	}
	if (/._?js$/.test(path)) {
		if (!JSHINT(source, {
			es5: true,
			eqnull: true,
			expr: true,
		})) {
			var modified = false;
			var remain = [];
			var lines = source.split(/\r?\n/);
			JSHINT.data().errors.forEach(function(err) {
				var line = lines[err.line - 1];
				if (/^Missing semicolon/.test(err.reason) && !/;$/.test(line)) {
					lines[err.line - 1] += ';';
					modified = true;
				}
			});
			if (modified) {
				console.log(path + ": fixed semicolons");
				fs.writeFile(path, lines.join('\n'), 'utf8', _);
			}
			remain = remain.map(function(err) {
				return '\t' + err.line + ':' + err.character + '\t' + err.reason;				
			});
			if (remain.length) console.log(path + ': does not pass jshint\n' + errors.join('\n'));
		}
	}
}

function scan(_, f) {
	if (f.indexOf('socket.io/support/expresso/deps/jscoverage/tests') >= 0 //
	|| f.indexOf('/JSCover/') >= 0 //
	|| f.indexOf('/dotnet/') >= 0 //
	|| f.indexOf('/junk/') >= 0) return;
	var stat = fs.lstat(f, _);
	if (stat.isDirectory()) {
		fs.readdir(f, _).forEach_(_, function(_, n) {
			if (n !== '.git' && n !== '.svn') scan(_, f + "/" + n);
		});
	} else if (!stat.isSymbolicLink()) {
		var ext = f.substring(f.lastIndexOf('.')).toLowerCase();
		if (binExts.indexOf(ext) < 0) {
			var data = fs.readFile(f, _);
			checkFile(_, f, data);
		}
	}
}

try {
	scan(_, process.argv[2] || '.');
} catch (ex) {
	console.error("ERROR: " + ex);
}