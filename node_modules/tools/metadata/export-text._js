"use strict";

var fs = require('streamline-fs');
var tableEntity = require("tools/metadata/entities/tables").entity;

exports.run = function(_, exporter, text) {
	var t0 = Date.now();
	var buildExecute = exporter.buildExecute,
		trace = exporter.trace;

	var mainColumns = exporter.getTableColumns(_, text.tableName);
	var mainKey = exporter.buildKey(text.distinctKey);

	trace && trace(text.title + ": loading list");
	var names = exporter.executeSql(_, "select distinct " + mainKey + " from " + text.tableName + " order by " + mainKey);
	if (text.tableName === "ATEXTRA") {
		names.filter(function(elt) {
			return elt.CODFIC && tableEntity.excludedInitials.indexOf(elt.CODFIC[0]) < 0;
		});
	}

	names.forEach_(_, exporter.config.parallel || 4, function(_, elt, i) {
		// trace && trace((i + 1) + "/" + names.length + ": exporting " + text.title + ": " + text.distinctKey.map(function(k) {
		// 	return (text.objectTypes && text.objectTypes[elt[k]] ? text.objectTypes[elt[k]] : elt[k]);
		// }).join(' '));

		var data = buildExecute(_, elt, mainColumns, text.tableName, text.distinctKey, text.orderBy);
		var res = {};

		switch (text.tableName) {
		case 'ATEXTRA':
			var meta = buildExecute(_, elt, 'MODULE_0,CODACT_0', 'ATABLE', 'CODFIC');
			if (!meta) return;
			res = {
				path: exporter.moduleNames[meta.MODULE] + "/TEXTS/",
				name: elt.CODFIC,
			};
			break;

		case 'ATEXTE':
			var entities = text.entities;
			// query all the resources for a given obj
			if (entities[elt.TYPOBJ] && fs.exists("./entities/" + entities[elt.TYPOBJ] + "._js")) {
				var entity = require("./entities/" + entities[elt.TYPOBJ]).entity;
				var meta = exporter.executeSql(_,"select " +
					(entities[elt.TYPOBJ] === "parameters" ? "CHAPITRE_0,CODACT_0" : "MODULE_0,CODACT_0") //
					+ " from " + entity.tableName + " where " + entity.primaryKey + "_0=:1", //
					[(elt.NOMOBJ ? elt.NOMOBJ.replace(/'/g, '') : '')])[0];
			}
			res = {
				path: (meta ? (exporter.moduleNames[meta.MODULE] || (meta.CHAPITRE ? "CHAPTERS/" + meta.CHAPITRE : "GLOBAL")) : "GLOBAL") //
				+ "/" + (elt.TYPOBJ ? text.objectTypes[elt.TYPOBJ] : "MISC") + "/",
				name: elt.NOMOBJ || "_ALL_",
			};
			break;

		case 'APLSTD':
			res = {
				path: "GLOBAL/MENUS/",
				name: elt.LANCHP,
			};
			break;
		}

		// group by language
		var bylan = data.reduce(function(r, d) {
			(r[d[text.lan]] = r[d[text.lan]] || []).push(d);
			return r;
		}, {});
		Object.keys(bylan).forEach_(_, function(_, lan) {
			exporter.writeResource(!_, {
				path: res.path + lan,
				name: res.name,
				data: bylan[lan]
			});
		});
	});
	trace && trace(text.title + ": " + names.length + " exported in " + Math.round((Date.now() - t0) / 1000) + " seconds");
}
