"use strict";

var fs = require('streamline-fs');
var tableEntity = require("tools/metadata/entities/tables").entity;

var buildKey = function(keys) {
	return keys.map(function(c) {
		return c + '_0';
	}).join(',')
}

// group by language
var byLan = function(data) { 
	return data.reduce(function(r, d) {
		(r[d.LAN] = r[d.LAN] || []).push(d);
		return r;
	}, {});
}

exports.run = function(_, exporter, text) {
	var t0 = Date.now();
	var getTableColumns = exporter.getTableColumns,
		executeSql = exporter.executeSql,
		trace = exporter.trace;

	var mainColumns = getTableColumns(_, text.tableName).filter(function(col) {
		return col !== 'CODFIC_0';
	});
	var mainKey = buildKey(text.distinctKey)

	trace && trace(text.title + ": loading list");

	var names = executeSql(_, "select distinct " + mainKey + " from " + text.tableName + " order by " + mainKey)
	if (text.tableName === "ATEXTRA") {
		names.filter(function(elt) {
			return elt.CODFIC && tableEntity.excludedInitials.indexOf(elt.CODFIC[0]) < 0;
		});
	}

	names.forEach_(_, exporter.config.parallel || 4, function(_, elt, i) {
		trace && trace((i + 1) + "/" + names.length + ": exporting " + text.title + ": " + text.name(elt));

		// var data = executeSql(_, "select " + mainColumns + " from " + text.tableName + " where " + mainKey + "_0=:1", //
		// 	[name || ''])[0];
		// Object.keys(text.children).forEach_(_, function(_, childName) {
		// 	var child = text.children[childName];
		// 	var parentKey = child.parentKey || mainKey;
		// 	data[childName] = executeSql(_, "select " + childrenCols[childName] + " from " + child.tableName //
		// 		+ " where " + parentKey + "_0=:1" + (child.orderBy ? " order by " + child.orderBy + "_0" : ""), [name || '']);
		// });
		// exporter.writeResource(!_, {
		// 	path: (exporter.moduleNames[data.MODULE] || (data.CHAPITRE ? ("CHAPTERS/" + data.CHAPITRE) : "GLOBAL")) //
		// 		+ "/" + text.subdir,
		// 	name: name,
		// 	data: data
		// });

		switch (text.tableName) {
		case 'ATEXTRA':
			var data = executeSql(_, "select CODFIC_0,MODULE_0,CODACT_0 from ATABLE where CODFIC_0=:1", [elt.CODFIC || ''])[0];
			if (!data) return;
			data.TEXTS = executeSql(_, "select " + mainColumns + " from ATEXTRA where CODFIC_0=:1 and" //
				+ " LANGUE_0=:2 order by ZONE_0,IDENT1_0,IDENT2_0", [elt.CODFIC || '', elt.LANGUE || '']);
			
			exporter.writeResource(!_, {
				path: exporter.moduleNames[data.MODULE] + "/TEXTS/" + elt.LANGUE,
				name: elt.CODFIC,
				data: data
			});
			break;

		case 'ATEXTE':
			var entities = text.entities,
				objectTypes = text.objectTypes;
			var meta = null;
			if (entities[elt.TYPOBJ] && fs.exists("../entities/" + entities[elt.TYPOBJ] + "._js")) {
				var entity = require("../entities/" + entities[elt.TYPOBJ]).entity;
				meta = executeSql(_,"select " +
					(entities[elt.TYPOBJ] === "parameters" ? "CHAPITRE_0,CODACT_0" : "MODULE_0,CODACT_0") //
					+ " from " + entity.tableName + " where " + entity.primaryKey + "_0=:1", //
					[(elt.NOMOBJ ? elt.NOMOBJ.replace(/'/g, '') : '')])[0];
			}
			// query all the resources for a given obj
			var data = executeSql(_, "select " + mainColumns + " from ATEXTE where TYPOBJ_0=:1 " //
			+ " and NOMOBJ_0=:2 order by LAN_0", [elt.TYPOBJ || 0, elt.NOMOBJ || '']);

			var bylan = byLan(data);
			Object.keys(bylan).forEach_(_, function(_, lan) {
				exporter.writeResource(!_, {
					path: (meta ? (moduleNames[meta.MODULE] || (meta.CHAPITRE ? "CHAPTERS/" //
						+ meta.CHAPITRE : "GLOBAL")) : "GLOBAL") //
						+ "/" + (elt.TYPOBJ ? objectTypes[elt.TYPOBJ] : "MISC") + "/" + lan,
					name: elt.NOMOBJ || "_ALL_",
					data: bylan[lan]
				});
			});
			break;

		case 'APLSTD':
			var data = executeSql(_, "select " + mainColumns + " from APLSTD where LANCHP_0=:1 order by LAN_0,LANNUM_0", //
		 	[elt.LANCHP || 0]);
			var bylan = byLan(data);
			Object.keys(bylan).forEach_(_, function(_, lan) {
				exporter.writeResource(!_, {
					path: "GLOBAL/MENUS/" + lan,
					name: elt.LANCHP,
					data: bylan[lan]
				});
			});
			break;
		}
	});
	trace && trace(text.title + ": " + names.length + " exported in " + Math.round((Date.now() - t0) / 1000) + " seconds");
}
