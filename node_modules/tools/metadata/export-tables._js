"use strict";

var fs = require('streamline-fs');
var flows = require('streamline/lib/util/flows');
var config = require('../../../nodelocal').config;

if (!config.metadata) throw new Error("config.metadata missing");

var db = config.metadata.db;
if (!db) throw new Error("config.metadata.db missing");
if (db.driver !== "oracle") throw new Error("unsupported db driver: " + db.driver);

var outdir = config.metadata.output || __dirname + "/../../../../x3meta";

var trace = config.metadata.trace;

var fsFunnel = flows.funnel(1);

function mkdir(_, s) {
	if (!fs.exists(s, _)) {
		fsFunnel(_, function(_) {
			if (!fs.exists(s, _)) fs.mkdir(s, _);
		});
	}
}

function rm(_, s) {
	if (!fs.exists(s, _)) return;
	var stat = fs.stat(s, _);
	if (stat.isDirectory()) {
		fs.readdir(s, _).forEach_(_, function(_, f) {
			rm(_, s + '/' + f);
		});
		fs.rmdir(s, _);
	} else {
		fs.unlink(s, _);
	}
}

var pool = [];

function withConnection(_, body) {
	var cnx = pool.pop();
	if (!cnx) {
		cnx = require(db.driver).connect(db, _);
		cnx.setPrefetchRowCount(1000);
	}
	try {
		return body(_, cnx);
	} finally {
		pool.push(cnx);
	}
}

function execute(_, stmt, args) {
	//trace && trace("SQL: " + stmt);
	return withConnection(_, function(_, cnx) {
		return cnx.execute(stmt, args || [], _);
	});
}

function run(_) {
	var t0 = Date.now();
	trace && trace("cleaning output");
	mkdir(_, outdir);
	fs.readdir(outdir, _).forEach_(_, function(_, name) {
		if (name !== '.git') rm(_, outdir + '/' + name);
	});

	trace && trace("connecting ...");

	function trim(obj) {
		return Object.keys(obj).reduce(function(o, k) {
			if (obj[k] && obj[k] !== ' ') o[k] = obj[k];
			return o;
		}, {});
	}

	function getTableColumns(_, tableName) {
		trace && trace("loading columns for " + tableName);
		return execute(_, "select CODZONE_0, DIME_0 from ATABZON where CODFIC_0='" + tableName + "' order by CODZONE_0").map(function(elt) {
			var arr = [];
			for (var i = 0; i < elt.DIME_0; i++) {
				var s = elt.CODZONE_0 + '_' + i;
				if (s === "AUUID_0") s = "CAST(AUUID_0 as varchar2(32))"; // hack to get around unsupported datatype in driver
				arr.push(s);
			}
			return arr.join(',')
		}).join(',')
	}

	function getFolderType(_) {
		trace && trace("getting folder type");
		return parseInt(execute(_, "select VALEUR_0 from ADOVAL where PARAM_0='TYPDOS'")[0].VALEUR_0, 10);
	}

	var isX3 = getFolderType(_) === 1;

	if (!config.metadata.force) throw new Error("Bad folder type: " + getFolderType(_));

	var moduleNames = ["UNKNOWN", "SUPERV", "FINANCE", "BP", "EXTERNAL", //
	"SALES", "PURCHASES", "STOCKS", "CAPM", "COMMON", //
	"DEV", "INTERNAL", "SUPPORT", "MARKETING", "FA", //
	"HR", "SPE1", "SPE2", "SPE3", "SPE4", //
	"TALENT"];

	var ATABLE_COLUMNS = getTableColumns(_, "ATABLE");
	var ATABZON_COLUMNS = getTableColumns(_, "ATABZON");
	var ATABIND_COLUMNS = getTableColumns(_, "ATABIND");

	trace && trace("loading list of tables")
	var TABLE_NAMES = execute(_, "select CODFIC_0 from ATABLE").map(function(elt) {
		return elt.CODFIC_0;
	});

	function writeTable(_, data) {
		var mod = moduleNames[data.MODULE_0];
		var d = outdir + "/" + mod;
		mkdir(_, d);
		mkdir(_, d = d + "/" + (data.CODACT_0 || "STD"));
		mkdir(_, d = d + "/TABLES");
		fs.writeFile(d + "/" + data.CODFIC_0 + ".json", JSON.stringify(data, null, '\t'), "utf8", _);
	}

	TABLE_NAMES.forEach_(_, config.metadata.parallel || 4, function(_, name, i) {
		trace && trace((i + 1) + "/" + TABLE_NAMES.length + ": exporting table definition " + name);
		var data = execute(_, "select " + ATABLE_COLUMNS + " from ATABLE where CODFIC_0='" + name + "'").map(trim)[0];
		data.COLUMNS = execute(_, "select " + ATABZON_COLUMNS.replace(/\bCODFIC_0,/, '') + //
		" from ATABZON where CODFIC_0='" + name + "' ORDER BY NUMLIG_0").map(trim);
		data.INDEXES = execute(_, "select " + ATABIND_COLUMNS.replace(/\bCODFIC_0,/, '') + //
		" from ATABIND where CODFIC_0='" + name + "' ORDER BY NUMLIG_0").map(trim);
		writeTable(!_, data);
	});
	trace && trace(TABLE_NAMES.length + " tables exported in " + Math.round((Date.now() - t0) / 1000) + " seconds");
}

run(_);