"use strict";

var fs = require('streamline-fs');

var config = require('../../../nodelocal').config;
if (!config.metadata) throw new Error("config.metadata missing");

var t0 = Date.now();
var trace = config.metadata.trace;
var tester, entities = [], texts = [];

function getRes(_, path, tester) {
	if (tester) {
		return fs.exists(__dirname + path + tester + "._js", _) ? [require("." + path + tester)] : [];
	} else {
		return fs.readdir(__dirname + path, _).map_(_, function(_, filename) {
			return /(.*)\.(_js)/.test(filename) ? require("." + path + filename) : null;
		}).filter(function(file) {
			return file != null;
		});
	}
}

function runExporter(_, tester) {
	var exporter = require("tools/metadata/exporter").newExporter(config.metadata);
	if (!tester) exporter.clean(_);
	exporter.init(_);

	var entityExporter = require("tools/metadata/export-entity");
	entities = getRes(_, "/entities/", tester);
	entities.forEach_(_, function(_, entityRes) {
		entityExporter.run(_, exporter, entityRes.entity);
	});
	texts = getRes(_, "/texts/", tester);
	texts.forEach_(_, function(_, textExporter) {
		textExporter.run(_, exporter);
	});
}

function runImporter(_) {
	var importer = require("tools/metadata/importer").newImporter(config.metadata);
	importer.init(_);
	if (!config.metadata.tester) importer.createTables(_);
	entities = getRes(_, "/entities/");
	entities.forEach_(_, function(_, entityFile) {
		importer.fillTables(_, entityFile.entity);
	});
}

var args = process.argv.splice(2);
if (!args) runExporter(_); // default
args.forEach_(_, function(_, val, index) {
	switch (val) {
		case '-i':
		case '--import':
			runImporter(_);
			break;
		case '-t':
		case '--test':
			runExporter(_, args[index+1]);
			break;
}});

trace && trace(entities.length + texts.length + " resource(s) processed in " + //
	Math.round((Date.now() - t0) / 1000) + " seconds");
