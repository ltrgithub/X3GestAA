"use strict";

var fs = require('streamline-fs');

var config = require('../../../nodelocal').config;
if (!config.metadata) throw new Error("config.metadata missing");

var t0 = Date.now();
var trace = config.metadata.trace;
var tester = {}, entities = [], texts = [];

function getResource(_, path) {
	if (tester.resource) {
		return fs.exists(__dirname + path + tester.resource + "._js", _) //
			? [require("." + path + tester.resource)] : [];
	} else {
		return fs.readdir(__dirname + path, _).map_(_, function(_, filename) {
			return /(.*)\.(_js)/.test(filename) ? require("." + path + filename) : null;
		}).filter(function(file) {
			return file != null;
		});
	}
}

function runExporter(_) {
	var exporter = require("tools/metadata/exporter").newExporter(config.metadata);
	if (!tester | tester.clean) exporter.clean(_);
	exporter.init(_);

	var entityExporter = require("tools/metadata/export-entity");
	entities = getResource(_, "/entities/");
	entities.forEach_(_, function(_, entityResource) {
		entityExporter.run(_, exporter, entityResource.entity);
	});
	texts = getResource(_, "/texts/");
	texts.forEach_(_, function(_, textExporter) {
		textExporter.run(_, exporter);
	});
}

function runImporter(_) {
	var importer = require("tools/metadata/importer").newImporter(config.metadata);
	var store = importer(_).open(_);
	if (!tester.resource) store.createTables(_);
	entities = getResource(_, "/entities/");
	entities.forEach_(_, function(_, entityResource) {
		store.fillTables(_, entityResource.entity);
	});
}

var args = process.argv.slice(2);
args.forEach_(_, function(_, val, index) {
	switch (val) {
	case '-c':
	case '--clean':
		tester.clean = true;
		break;
	case '-t':
	case '--test':
		tester.resource = args[index+1];
		break;
}});
(args.indexOf('-i') > -1 || args.indexOf('--import') > -1) ? runImporter(_) : runExporter(_);

trace && trace(entities.length + texts.length + " resource(s) processed in " + //
	Math.round((Date.now() - t0) / 1000) + " seconds");
