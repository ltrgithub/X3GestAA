"use strict";

var fs = require('streamline-fs'),
	program = require('commander');

var config = require('../../../nodelocal').config;
if (!config.metadata) throw new Error("config.metadata missing");
config.metadata.output = config.metadata.output || __dirname + "/../../../../x3meta";

var t0 = Date.now();
var trace = config.metadata.trace;
var entities = [], texts = [];

function getResource(_, path) {
	if (program.test) {
		return fs.exists(__dirname + path + program.test + "._js", _) //
			? [require("." + path + program.test)] : [];
	} else {
		return fs.readdir(__dirname + path, _).map_(_, function(_, filename) {
			return /(.*)\.(_js)/.test(filename) ? require("." + path + filename) : null;
		}).filter(function(file) {
			return file != null;
		});
	}
}

function runExporter(_) {
	var exporter = require("tools/metadata/exporter").newExporter(config.metadata);
	if (!program.test || program.clean) exporter.clean(_);
	exporter.init(_);

	var entityExporter = require("tools/metadata/export-entity");
	entities = getResource(_, "/entities/");
	entities.forEach_(_, function(_, entityResource) {
		entityExporter.run(_, exporter, entityResource.entity);
	});

	var textExporter = require("tools/metadata/export-text");
	texts = getResource(_, "/texts/");
	texts.forEach_(_, function(_, textResource) {
		textExporter.run(_, exporter, textResource.text);
	});
}

function runImporter(_) {
	var importer = require("tools/metadata/importer").newImporter(config.metadata);
	var store = importer(_).open(_);
	if (!program.test) store.createTables(_);
	entities = getResource(_, "/entities/");
	entities.forEach_(_, function(_, entityResource) {
		store.fillTables(_, entityResource.entity);
	});
	store.fillTexts(_);
}

// parse command line input via commander
program
	.version(require('../../../package').version, '-v, --version')
	.option('-i, --import', 'import into store')
	.option('-e, --export', 'export from database')
	.option('-c, --clean', 'clean output directory')
	.option('-t, --test <test>', 'test single entity or text')
	.option('-g, --git', 'git repo commit cmd wrapper')
	.option('-j, --jsgit', 'git repo commit via jsgit')
	.option('-n, --nodegit', 'git repo commit via nodegit')
	.parse(process.argv);

if (program.export) runExporter(_);
if (program.import) runImporter(_);

if (program.jsgit || program.nodegit) {
	var git = require("tools/metadata/" + (program.jsgit ? "jsgit" : "nodegit")).newGit(config.metadata);
	git.gitify(_);
} else {
	trace && trace(entities.length + texts.length + " resource(s) processed in " + //
		Math.round((Date.now() - t0) / 1000) + " seconds");
}
