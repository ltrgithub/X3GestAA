"use strict";
var fs = require("streamline-fs");

exports.newImporter = function(config) {
	config.output = config.output || __dirname + "/../../../../x3meta";
	var trace = config.trace;
	var jsondir = config.output;
	var store;

	function readFile(_, path) {
		return JSON.parse(fs.readFile(path, 'utf8', _));
	}

	return function init(_) {
		var files = { TEXTS: {}};
		fs.readdir(jsondir, _).forEach_(_, function(_, module) {
			var moduleDir = jsondir + "/" + module;
			if (fs.stat(moduleDir, _).isDirectory()) {
				fs.readdir(moduleDir, _).forEach_(_, function(_, act) {
					var actDir = moduleDir + "/" + act;
					if (fs.stat(actDir, _).isDirectory()) {
						fs.readdir(actDir, _).forEach_(_, function(_, type) {
							var typeDir = actDir + "/" + type;
							if (fs.stat(typeDir, _).isDirectory()) {
								var entries = fs.readdir(typeDir, _);
								entries.filter(function(name) {
									return /\.json$/.test(name);
								}).forEach_(_, function(_, name) {
									files[type] = files[type] || {};
									files[type][name.substring(0, name.length - 5)] = typeDir + "/" + name;
								});
								entries.filter(function(name) {
									return /^\w\w\w$/.test(name);
								}).forEach_(_, function(_, lan) {
									fs.readdir(typeDir + "/" + lan, _).filter(function(name) {
										return /\.json$/.test(name);
									}).forEach_(_, function(_, name) {
										files.TEXTS[name.substring(0, name.length - 5)] = typeDir + "/" + lan + "/" + name;
									});
								});
							}
						});
					}
				});
			}
		});
		return require("./store-" + (config.store || "oracle")).newStore(config, files, readFile);
	}
}
