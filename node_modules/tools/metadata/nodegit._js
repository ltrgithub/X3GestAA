"use strict";

var git = require('nodegit'),
  fs = require('streamline-fs'),
  pathJoin = require('path').join;

var defCommit = {
  author: { name: "Drew Fyock", email: "drew.fyock@sage.com" },
  committer: { name: "Drew Fyock", email: "drew.fyock@sage.com" },
  message: "test commit"
};

var mock = {
  filename: "README.md",
  contents: "# X3 metadata repo\n\nIt is automatically generated and updated with Syracuse\n"
}

exports.newGit = function(config) {
  var trace = config.trace;
  var path = pathJoin(config.output, '.git');

  return {
    gitify: function(_, commit) {
      commit = commit || defCommit;
      var author = git.Signature.now(commit.author.name, commit.author.email);
      var committer = git.Signature.now(commit.committer.name, commit.committer.email);

      var repo, init = false, parent = [];
      if (!fs.exists(path, _)) {
	repo = git.Repo.init(config.output, false, _);
	commit.message = "Initial commit";
	init = true;
      } else {
	repo = git.Repo.open(path, _);
      }
      trace && trace("NodeGit process start");

      // add the file to the index...
      var index = repo.openIndex(_);
      index.read(_);
      index.addByPath('README.md', _);
      index.write(_);

      var oid = index.writeTree(_);

      if (!init) {
	var head = git.Reference.oidForName(repo, 'HEAD', _);
	//get latest commit (will be the parent commit)
	parent = [repo.getCommit(head, _)];
      }

      //commit
      var commitId = repo.createCommit('HEAD', author, committer, commit.message, oid, parent, _);
      trace && trace("New Commit:", commitId.sha());

      trace && trace("Git process complete.");
    }
  }
};
