"use strict";

var git = require('nodegit'),
  fs = require('streamline-fs'),
  pathJoin = require('path').join;

var defCommit = {
  author: { name: "Drew Fyock", email: "drew.fyock@sage.com" },
  committer: { name: "Drew Fyock", email: "drew.fyock@sage.com" },
  message: "test commit"
};

exports.newGit = function(config) {
  var trace = config.trace;
  var path = pathJoin(config.output, '.git');

  return {
    gitify: function(_, commit) {
      commit = commit || defCommit;
      var author = git.Signature.now(commit.author.name, commit.author.email);
      var committer = git.Signature.now(commit.committer.name, commit.committer.email);

      var repo, init = false;
      if (!fs.exists(path, _)) {
        repo = git.Repo.init(config.output, false, _);
        commit.message = "Initial commit";
        init = true;
      } else {
        repo = git.Repo.open(path, _);
      }
      trace && trace("NodeGit process start");

      // add the file to the index...
      var index = repo.openIndex(_);
      index.read(_);
      if (init) {
        var walk = function (_, path, ipath) {
          fs.readdir(path, _).forEach_(_, function (_, file) {
            if (/^\..*/.test(file)) return;  // ignore .git, .*
            var newPath = pathJoin(path, file);
            var stat = fs.stat(newPath, _);
            if (ipath) file = pathJoin(ipath, file);
            if (stat.isDirectory()) {
              walk(_, newPath, file);
            }
            else if (stat.isFile()) {
              index.addByPath(file, _);
            }
          });
        };
        walk(_, config.output);
      } else {
        var diffList = repo.getMaster(_).getTree(_).diffWorkDir(repo, null, _);
        diffList.patches().forEach_(_, function (_, patch) {
          index.addByPath(patch.oldFile().path(), _);
          index.addByPath(patch.newFile().path(), _);
        });
        if (diffList.size() == 0) return;

        //get latest commit (will be the parent commit)
        var parent = [repo.getCommit(git.Reference.oidForName(repo, 'HEAD', _), _)];
      }
      index.write(_);
      var oid = index.writeTree(_);

      //commit
      var commitId = repo.createCommit('HEAD', author, committer, commit.message, oid, parent || [], _);
      trace && trace("New Commit:", commitId.sha());

      trace && trace("Git process complete.");
    }
  }
};
