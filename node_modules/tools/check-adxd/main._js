"use strict";

// Sample usage
// node node_modules/tools/check-adxd -s localhost -p 1804

var os = require('os');
var dns = require('dns');

var adxwhat = require('syracuse-x3/lib/clients/adxwhat/adxwhatClient');
var ez = require('ez-streams');

var program = require('commander');

function _log(s) {
	console.log(new Date().toISOString() + " - " + s);
}

function _logDetail(s) {
	console.log("==> " + s);
}

function _usage() {
	program.outputHelp();
	process.exit(1);
}

var checkNum = 0;

function _check(_, desc, fn) {
	var n = checkNum++;
	_log("CHECK " + n + ": " + desc);
	try {
		var res = fn(_);
		if (res && res.ok) {
			_log("CHECK " + n + ": [SUCCESS] " + res.detail);
		} else {
			_log("CHECK " + n + ": [FAILED] " + (res && res.detail));
		}
		return res && res.ok;
	} catch (e) {
		_log("CHECK " + n + ": [ERROR] " + e.message);
	}
}

program
	.version("0.1.0", '-v, --version')
	.option('-s, --server <serverName>', 'Adxd server name')
	.option('-p, --port <number>', 'port number of the adxd service')
	.option('-u, --user <userNames>', 'user name to connect')
	.option('-p, --password <password>', 'password')
	.parse(process.argv);

var connCtx = {
	hostname: program.server,
	port: program.port,
	user: program.user,
	password: program.password,
	secured: false
};
//console.log("connCtx: " + JSON.stringify(connCtx, null, 2));

if (!program.server) {
	_usage();
}
if (!program.port) {
	_usage();
}

function _result(ok, s) {
	return {
		ok: ok,
		detail: s
	};
}

var ok = true;

if (ok) {
	ok = _check(_, "IPv4 DNS lookup", function(_) {
		_logDetail("looking for IPv4 of " + program.server);
		var ip = dns.lookup(program.server, 4, _);
		return _result(true, ip);
	});

	_check(_, "IPv6 DNS lookup", function(_) {
		_logDetail("looking for IPv6 of " + program.server);
		var ip = dns.lookup(program.server, 6, _);
		return _result(true, ip);
	});
}

if (ok) {
	ok = _check(_, "Basic TCP connection", function(_) {
		_logDetail("Connecting to " + program.server + ":" + program.port);
		var stream = ez.devices.net.tcpClient(program.port, program.server).connect(_);
		var socket = stream._emitter;
		_logDetail("remoteAddress: " + socket.remoteAddress + ":" + socket.remotePort);
		_logDetail("localAddress: " + socket.localAddress + ":" + socket.localPort);
		_logDetail("Closing connection...");
		// stream.setNoDelay(true);

		// stream.write(_, data);
		stream.close(_);
		_logDetail("Connection closed");
		return _result(true, socket.remoteAddress + ":" + socket.remotePort);
	});
}

if (ok) {
	ok = _check(_, "adxwhat connection", function(_) {
		_logDetail("Getting ADXDIR of " + program.server + ":" + program.port);
		var value = adxwhat.env(_, connCtx, "ADXDIR");
		return _result(true, value);
	});
}

process.exit(ok ? 0 : 1);
