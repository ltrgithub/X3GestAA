"use strict";
var fs = require('streamline-fs');
var path = require('path');
var ghm = require('ghm');

try {
	var config = require('./config.json');
} catch (ex) {
	console.log("config.json not found: edit paths in config-template.json and save as config.json");
	config = {};
}

var vars = (function(arg) {
	var m = /^--(erp|hrm)$/.exec(arg);
	if (!m) throw new Error("--erp or --hrm command line option missing");
	return {
		erp: {
			PRODUCT: "Sage ERP X3",
			SAFE: "SAFE X3",
			STUDIO: "Safe X3 Studio",
			erp: "erp",
			ERP: "ERP",
		},
		hrm: {
			PRODUCT: "Sage HRM X3",
			SAFE: "SAFE X3",
			STUDIO: "Safe X3 Studio",
			erp: "hrm",
			ERP: "HRM",
		},
	}[m[1]];
})(process.argv[2]);

function publish(_) {
	var devDocRoot = config.devDocRoot || path.resolve(__dirname + "/../../../../dev-doc");
	var onlineDocRoot = config.onlineDocRoot || path.resolve(__dirname + "/../../../../online-doc");
	var dest = onlineDocRoot + "/en-US/V7DEV";
	var pubdir = onlineDocRoot + "/public";

	console.log("Writing to " + onlineDocRoot);

	function mkdir(_, s) {
		if (!fs.exists(s, _)) fs.mkdir(s, _);
	}

	function rm(_, s) {
		if (!fs.exists(s, _)) return;
		var stat = fs.stat(s, _);
		if (stat.isDirectory()) {
			fs.readdir(s, _).forEach_(_, function(_, f) {
				rm(_, s + '/' + f);
			});
			fs.rmdir(s, _);
		} else {
			fs.unlink(s, _);
		}
	}

	var all = [],
		pubs = [];
	rm(_, dest);
	mkdir(_, path.join(dest, '..'));
	mkdir(_, dest);
	mkdir(_, onlineDocRoot + '/css');
	mkdir(_, onlineDocRoot + '/images');
	mkdir(_, pubdir);
	fs.writeFile(onlineDocRoot + '/css/doc.css', fs.readFile(__dirname + '/doc.css', _), _);

	function fixName(s) {
		return s;
	}

	function transform(f, str, images, pub) {
		// pre-processing - encode # inside code blocks because ghm messes them up
		// also ghm kills first code line if there is no space in it (weird)
		var body = str.split("```").map(function(block, i) {
			return i % 2 ? '\nCODECODE CODE' + block.replace(/\#/g, "_ha$h_") : block;
		}).join('```');

		// remove private sections
		body = body.replace(/<!--\s*private\s*start\s*-->([\S\s]*?)<!--\s*private\s*end\s*-->/gi, "");

		// replace context variables (product name, etc.)
		body = body.replace(/\$\$(\w+)/g, function(all, key) {
			return vars[key] || all;
		});

		body = ghm.parse(body);
		// take care of <a href="wiki-page"> links
		body = body.replace(/<a href="\.\.\/([^\/"]+)\/([^"]+)">/g, function(a, sub, p) {
			p = p.split('#');
			var pp = /\.md$/.test(p[0]) ? p[0].substring(0, p[0].length - 3) + '.html' : p[0];
			return '<a href="' + sub + '_' + pp + (p[1] ? '#' + p[1] : '') + '">';
		});
		// collect images
		body = body.replace(/<img\s+src="(\.\.\/images\/)([^"]+)"/g, function(a, p1, p2) {
			images.push(p1 + p2);
			return '<img src="images_' + p2 + '"';
		});
		// decode # inside code blocks
		body = body.replace(/_ha\$h_/g, '#').replace(/CODECODE CODE\n/g, '');
		var title = f.replace(/-/g, ' ').replace(/\.md$/, '');
		title = title.substring(title.indexOf('_') + 1);

		function nav(tb) {
			return '<div class="nav ' + tb + '"><a href="index.html">Index</a>' + //
			'&nbsp;&nbsp;<a href="getting-started_home.html">Home</a></div>';
		}
		body = '<p class="title">' + title + '</p>\n' + body;
		return '<html><head>' + //
		'<title>' + title + '</title>' + //
		'<meta charset="utf-8">' + //
		'<meta name="description" content="' + title + '">' + //
		'<meta name="module" content="Platform">' + //
		'<link href="' + (pub ? '..' : '../..') + '/css/doc.css" rel="stylesheet" type="text/css"/>' + //
		'<script type="text/javascript">\nfunction onload(){' + //
		'\n\twindow.focus();' + //
		'\n\twindow[window.history.pushState ? "onpopstate" : "onhashchange"] = function(event){ windows.focus(); };' + //
		'\n}\n</script>' + //
		'</head><body onload="onload()">' + nav('top') + body + '<br/>' + nav('bottom') + '</body></html>';
	}

	function writePublic(_, file, html) {
		fs.writeFile(pubdir + '/' + file, html.replace(/<a href="getting-started_home.html">Home<\/a>/g, ""), 'utf8', _);
	}

	function doIt(_, s, f) {
		var stat = fs.stat(s, _);
		if (stat.isDirectory()) {
			fs.readdir(s, _).forEach_(_, function(_, ff) {
				if (!/^(tools|html)$/.test(ff)) doIt(_, s + '/' + ff, f ? f + '_' + ff : ff);
			});
		} else if (/\.md$/.test(f)) {
			var source = fs.readFile(s, 'utf8', _);
			// exclude private files
			if (/<!--\s*private\s*-->/i.test(source)) {
				console.log("exclude private file: " + f);
				return;
			}
			all.push(f);
			var pub = /<!--\s*public\s*-->/i.test(source);
			if (pub) pubs.push(f);
			var images = [];
			var transformed = transform(f, source, images, pub);
			fs.writeFile(dest + '/' + fixName(f).replace(/\.md$/, '.html'), transformed, 'utf8', _);
			if (pub) {
				writePublic(_, fixName(f).replace(/\.md$/, '.html'), transformed);
				images.forEach_(_, function(_, image) {
					fs.writeFile(pubdir + '/' + image, fs.readFile(path.dirname(s) + '/' + image, _), _);
				});
			}
		} else if (/\.(png|jpeg|jpg|gif)$/.test(s)) {
			fs.writeFile(dest + '/' + f, fs.readFile(s, _), _);
		} else {
			if (!/\.git/.test(s)) console.log(s + ': ignored');
		}
	}
	var images = [];
	doIt(_, devDocRoot);
	fs.writeFile(dest + '/index.html', transform('index.md', all.map(function(f) {
		var name = f.replace(/^[^_]*_(.*).md$/, '$1');
		f = f.replace(/\.md$/, '.html');
		return '* <a href="' + f + '">' + name + '</a>';
	}).join('\n')));
	writePublic(_, 'index.html', transform('index.md', pubs.map(function(f) {
		var name = f.replace(/^[^_]*_(.*).md$/, '$1');
		f = f.replace(/\.md$/, '.html');
		return '* <a href="' + f + '">' + name + '</a>';
	}).join('\n'), [], true));
}

publish(_);