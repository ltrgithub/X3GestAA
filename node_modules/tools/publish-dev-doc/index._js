var fs = require('streamline-fs');
var ghm = require('ghm');

function publish(_) {
	var root = __dirname + "/../../../../dev-doc.wiki";
	var dest = root + "/../dev-doc-html";

	function mkdir(_, s) {
		if (!fs.exists(s, _)) fs.mkdir(s, _);
	}
	var all = [];
	mkdir(_, dest);
	mkdir(_, dest + '/css');
	fs.writeFile(dest + '/css/doc.css', fs.readFile(__dirname + '/doc.css', _), _);

	function transform(f, str) {
		// pre-processing - encode # inside code blocks because ghm messes them up
		// also ghm kills first code line if there is no space in it (weird)
		var body = str.split("```").map(function(block, i) {
			return i % 2 ? '\nCODECODE CODE' + block.replace(/\#/g, "_ha$h_") : block;
		}).join('```');

		body = ghm.parse(body);
		// take care of <a href="wiki-page"> links
		body = body.replace(/<a href="([^#][^:."]+)">/g, function(a, p) {
			p = p.split('#');
			return '<a href="' + p[0] + '.html' + (p[1] ? '#' + p[1] : '') + '">';
		});
		// take care of [[wiki page]] links
		body = body.replace(/\[\[([^\]\|]*)\|?([^\]]*)]]/g, function(a, p1, p2) {
			var href = (p2 || p1).replace(/ /g, '-');
			pair = href.split('#');
			href = pair[0] + '.html' + (pair[1] ? '#' + pair[1] : '');
			return '<a href="' + href + '">' + p1 + '</a>';
		});
		// decode # inside code blocks
		body = body.replace(/_ha\$h_/g, '#').replace(/CODECODE CODE\n/g, '');
		var title = f.replace(/-/g, ' ').replace(/\.md$/, '');

		function nav(tb) {
			return '<div class="nav ' + tb + '"><a href="index.html">Index</a>' + //
			'&nbsp;&nbsp;<a href="home.html">Home</a></div>';
		}
		body = '<p class="title">' + title + '</p>\n' + body;
		return '<html><head>' + //
		'<title>' + title + '</title>' + //
		'<meta charset="utf-8">' + //
		'<link href="css/doc.css" rel="stylesheet" type="text/css"/>' + //
		'</head><body>' + nav('top') + body + '<br/>' + nav('bottom') + '</body></html>';
	}

	function doIt(_, s, f) {
		var stat = fs.stat(s, _);
		if (stat.isDirectory()) {
			fs.readdir(s, _).forEach_(_, function(_, f) {
				doIt(_, s + '/' + f, f);
			});
		} else if (/\.md$/.test(f)) {
			all.push(f);
			fs.writeFile(dest + '/' + f.replace(/\.md$/, '.html'), transform(f, fs.readFile(s, 'utf8', _)), 'utf8', _);
		} else if (/\.(png|jpeg|jpg)$/.test(s)) {
			fs.writeFile(dest + '/' + f, fs.readFile(s, _), _);
		} else {
			if (!/\.git/.test(s)) console.log(s + ': ignored');
		}
	}
	doIt(_, root);
	fs.writeFile(dest + '/index.html', transform('index.md', all.map(function(f) {
		return '* [[' + f.substring(0, f.length - 3).replace(/-/g, ' ') + ']]';
	}).join('\n')));
}

publish(_);