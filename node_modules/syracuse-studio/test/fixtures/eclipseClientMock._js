"use strict";
var crypto = require('crypto');
var helpers = require('syracuse-core/lib/helpers');
var datetime = require("syracuse-core/lib/types/datetime");
var uuid = require('syracuse-core/lib/uuid');
var jsxml = require("jsxml/lib/jsxml");
var ez = require('ez-streams');

var secret = (function() {
	var o = {
		k: "da85538b-c44c-4864-96aa-5ab5263fbf89"
	};
	var x = 0;
	return o.k.replace(/./g, function(c) {
		return String.fromCharCode(0x21 + ((x += c.charCodeAt(0)) & 0x3f));
	});

})();

function getToken(key) {
	var md5sum = crypto.createHash('md5'),
		token = {
			"key": key,
			"date": datetime.now().toString(),
			"once": helpers.uuid.generate()
		};
	md5sum.update(token.key + '/' + token.date + '/' + token.once + '/' + secret, "ascii");
	token.signature = md5sum.digest("hex");
	return new Buffer(JSON.stringify(token)).toString('base64');
}

exports.$uuid = "2ff5d26c-d231-4494-b462-77bc129b9756";

function EclipseClientMock(baseurl, login, pass) {
	// this.$uuid = uuid.generate();
	this.$uuid = exports.$uuid;
	this.$wsid = helpers.uuid.generate();
	this.baseurl = baseurl;
	this.user = login || "admin";
	this.password = pass || "admin";
	this.$sid = helpers.uuid.generate();
}

exports.EclipseClientMock = helpers.defineClass(EclipseClientMock, null, {
	register: function(_) {
		var data, response,
			headers = {
				"Accept": "application/json"
			},
			options = {
				method: "POST",
				headers: headers,
				url: this.baseurl + "/studio/$register"
			},
			body = {
				"$uuid": this.$uuid,
				"$wsid": this.$wsid,
				"$username": "test",
				"$clientName": "studio.mock",
				"$clientVersion": "2.0.1.mock"
			};

		if (this.cookie) {
			headers["cookie"] = this.cookie;
		} else {
			headers["Authorization"] = "Basic " + new Buffer(this.user + ":" + this.password).toString('base64');
		}

		response = ez.devices.http.client(options).end(JSON.stringify(body)).response(_);
		data = response.checkStatus(200).readAll(_);

		this.cookie = this.cookie || (this.cookie = response.headers["set-cookie"]);
		return JSON.parse(data);
	},

	post: function(_, url, data) {
		var response,
			headers = {
				"Accept": "application/json",
				"cookie": this.cookie
			},
			options = {
				method: "POST",
				headers: headers,
				url: this.baseurl + url
			};

		response = ez.devices.http.client(options).end(data && JSON.stringify(data)).response(_);
		return response.checkStatus(200).readAll(_);
	},

	connect: function(_) {
		var body = this.post(_, "/studio/$proxy/connect?sid=" + this.$sid, {
			"$sid": this.$sid,
			"$uuid": this.$uuid,
			"$wsid": this.$wsid,
			"$username": "test",
			"$clientName": "studio.mock",
			"$clientVersion": "2.0.1.mock"
		});
		return body && JSON.parse(body);
	},

	disconnect: function(_) {
		var body = this.post(_, "/studio/$proxy/disconnect?sid=" + this.$sid);
		return body && JSON.parse(body);
	},

	getProxyState: function(_) {
		var data, response,
			headers = {
				"Accept": "application/json",
				"cookie": this.cookie
			},
			options = {
				method: "GET",
				headers: headers,
				url: this.baseurl + "/studio/$proxy/state"
			};
		response = ez.devices.http.client(options).end().response(_);
		data = response.checkStatus(200).readAll(_);
		return JSON.parse(data);
	},

	_submitCommand: function(_, cmd, args) {
		var data, response,
			headers = {
				"Accept": "application/json",
				"cookie": this.cookie
			},
			options = {
				method: "POST",
				headers: headers,
				url: this.baseurl + "/studio/$proxy/session?sid=" + this.$sid
			};

		cmd = cmd.split(/\s+/).concat(args || []).join(" ");

		response = ez.devices.http.client(options).end(cmd).response(_);
		if (response.statusCode === 200) {
			return {
				$data: response.readAll(_)
			};
		}
		return JSON.parse(response.checkStatus(202).readAll(_));
	},

	track: function(_, tracker) {
		if (tracker.$data)
			return tracker.$data;

		var response,
			headers = {
				"Accept": "text/plain",
				"cookie": this.cookie
			},
			options = {
				method: "GET",
				headers: headers,
				url: this.baseurl + "/studio/$proxy/session?sid=" + this.$sid + "&trackingId=" + tracker.$trackingId
			};

		response = ez.devices.http.client(options).end().response(_);
		while (response && response.statusCode === 202) {
			// setTimeout(_, tracker.$pollingMillis || 500);
			response = ez.devices.http.client(options).end().response(_);
		}
		return response.checkStatus(200).readAll(_);
	},

	poll: function(_) {
		var tracker,
			response,
			headers = {
				"Accept": "text/plain",
				"cookie": this.cookie
			},
			options = {
				method: "GET",
				headers: headers,
				url: this.baseurl + "/studio/$proxy/session?sid=" + this.$sid
			};

		response = ez.devices.http.client(options).end().response(_);
		if (response && response.statusCode === 202) {
			tracker = JSON.parse(response.readAll(_));
			options.url += "&trackingId=" + tracker.$trackingId;
		}
		while (response && response.statusCode === 202) {
			tracker = JSON.parse(response.readAll(_));
			// setTimeout(_, tracker.$pollingMillis || 500);
			response = ez.devices.http.client(options).end().response(_);
		}
		return response.checkStatus(200).readAll(_);
	},

	sendCommand: function(_, cmd, args) {
		var tracker = this._submitCommand(_, cmd, args);
		return this.track(_, tracker);
	},

	proxyinit: function(_) {
		var tracker = this._submitCommand(_, "proxyinit", ["-k", getToken(this.$uuid), "-m", "1"]);
		return this.track(_, tracker);
	}

});