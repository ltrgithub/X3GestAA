"use strict";

var os = require('os');
var dns = require('dns');
var EclipseClientMock = require('../fixtures/eclipseClientMock').EclipseClientMock;
var X3ProcessMock = require('../fixtures/x3ProcessMock').X3ProcessMock;
var config = require('config'); // must be first syracuse require
var proxyManager = require('syracuse-studio/lib/dbgp/proxyManager');
var dbgpHelper = require('syracuse-studio/lib/pub/dbgpHelper');
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");

var dbgpConfig = (config.studio || {}).dbgp || {};

var doStop = false;
QUnit.module(module.id);

var port = (config.unit_test && config.unit_test.serverPort) || 3004;
var baseurl = "http://localhost:" + port;
var eclipse = new EclipseClientMock(baseurl, "admin", "admin");
var x3Process = new X3ProcessMock();

dbgpConfig.key = dbgpConfig.key || "da85538b-c44c-4864-96aa-5ab5263fbf89";
dbgpConfig.resolveIP = true;
dbgpConfig.resolveName = true;
dbgpConfig.reverseIP = false;

adminTestFixtures.modifyCollaborationEndpoint("mongodb_admin_test");

asyncTest("init database", 1, function(_) {
	adminTestFixtures.initializeTestEnvironnement(_);
	ok(true, "mongodb initialized");
	start();
});

asyncTest("initialize syracuse test server", 1, function(_) {
	require('syracuse-main/lib/syracuse').startServers(_, port);
	ok(true, "server initialized");
	start();
});

asyncTest('Get config', 13, function(_) {

	var hostname = os.hostname();
	var ip4 = dns.lookup(hostname, 4, _);
	var dbgpConfigHost = dbgpConfig.host;
	var dbgpHostname = dbgpConfig.host || "localhost";
	var dbgpPort = dbgpConfig.port || 9514;

	var proxyAddr = dbgpHelper.getDbgpProxyAddress(_);

	strictEqual(proxyAddr, ip4 + ":" + dbgpPort, "Proxy address");

	var cfg = proxyManager.getConfig(_);
	strictEqual(proxyAddr, ip4 + ":" + dbgpPort, "Proxy address default config");

	cfg = proxyManager.getConfig(_, {
		resolveIP: false,
		resolveName: false
	});
	strictEqual(cfg.hostname, dbgpHostname, "Hostname after getConfig without ip resolving");

	dbgpConfig.host = "";
	cfg = proxyManager.getConfig(_, {
		resolveIP: false,
		resolveName: false
	});
	strictEqual(cfg.hostname, "localhost", "getConfig with empty host");

	cfg = proxyManager.getConfig(_, {
		resolveIP: false,
		resolveName: true
	});
	strictEqual(cfg.hostname, hostname, "getConfig with empty host resolved");

	cfg = proxyManager.getConfig(_, {
		resolveIP: true,
		resolveName: false
	});
	strictEqual(cfg.hostname, dbgpHostname, "Hostname getConfig with empty host unresolved, ip resolved");
	strictEqual(cfg.ip, "127.0.0.1", "IP after getConfig with ip resolving");

	dbgpConfig.host = "localhost";
	cfg = proxyManager.getConfig(_, {
		resolveIP: false,
		resolveName: false
	});
	strictEqual(cfg.hostname, "localhost", "getConfig with localhost");

	cfg = proxyManager.getConfig(_, {
		resolveIP: false,
		resolveName: true
	});
	strictEqual(cfg.hostname, hostname, "getConfig with localhost resolved");

	cfg = proxyManager.getConfig(_, {
		resolveIP: true,
		resolveName: false
	});
	strictEqual(cfg.hostname, "localhost", "Hostname getConfig with empty localhost unresolved, ip resolved");
	strictEqual(cfg.ip, "127.0.0.1", "IP after getConfig with ip resolving");

	dbgpConfig.host = hostname;
	cfg = proxyManager.getConfig(_, {
		resolveIP: false,
		resolveName: false
	});
	strictEqual(cfg.hostname, hostname, "getConfig with actual host");

	cfg = proxyManager.getConfig(_, {
		resolveIP: false,
		resolveName: true
	});
	strictEqual(cfg.hostname, hostname, "getConfig with actual host resolved");

	dbgpConfig.host = dbgpConfigHost;
	start();
});

asyncTest('Eclipse registering', 6, function(_) {

	var data = eclipse.register(_);
	ok(data != null, "Registering Eclipse client");
	ok(/(already)?registered/i.exec(data.$status), "status ok");
	strictEqual(data.$uuid, eclipse.$uuid, "uuid matches");
	ok(data.$diagnoses == null, "No diagnoses");

	data = eclipse.register(_);
	ok(data != null, "Registering twice should be ok");
	ok(data.$diagnoses == null, "Still no diagnoses");

	start();
});

asyncTest('Eclipse get proxy state', 2, function(_) {
	var data = eclipse.getProxyState(_);
	ok(data != null, "Getting proxy state");
	ok(data.$diagnoses == null, "No diagnoses");

	start();
});

asyncTest('Eclipse send proxyinit', 3, function(_) {
	var data = eclipse.connect(_);
	console.error("eclipse.$sid=" + eclipse.$sid + ", data=" + JSON.stringify(data));
	strictEqual(eclipse.$sid, data.$sid, "same sid");
	var t = Date.now();
	data = eclipse.proxyinit(_);
	var elapse = Date.now() - t,
		m = /(\d+)\0(<proxyinit[^\0]+)\0/.exec(data);
	ok(m && m.length === 3, "proxyinit valid response format");
	ok(elapse < 100, "Response time < 100ms: " + elapse);

	start();
});

function log(s) {
	console.error("TEST: " + s.replace(/\0/g, "[NULL]"));
}

asyncTest('Start debug session', 6, function(_) {
	var res = poll(!_);
	var loop = x3Process.startDebug(!_);
	var data = res(_),
		m = /(\d+)\0(<init[^\0]+)\0/.exec(data),
		i = 1;
	ok(m && m.length === 3, "init valid response format: " + m);

	data = eclipse.sendCommand(_, "feature_set", ["-i", i++, "-n", "max_children", "-v", "32"]);
	m = /(\d+)\0(<response command="feature_set" [^\0]+)\0/.exec(data);
	ok(m && m.length === 3, "feature_set valid response format: " + m[1] + "[NULL]" + m[2]);
	strictEqual(~~m[1], Buffer.byteLength(m[2], 'utf8'), "feature_set valid length: " + m[1]);

	data = eclipse.sendCommand(_, "xcmd_x3_tables_get", ["-i", i++]);
	m = /(\d+)\0(<response command="xcmd_x3_tables_get" [^\0]+)\0/.exec(data);
	ok(m && m.length === 3, "xcmd_x3_tables_get valid response format: " + m[1] + "[NULL]" + m[2]);
	strictEqual(~~m[1], Buffer.byteLength(m[2], 'utf8'), "xcmd_x3_tables_get valid length: " + m[1]);

	ok(loop(_), "Debug end");

	x3Process.endDebug(_);

	start();
});

asyncTest("Stop", function(_) {
	doStop = true;

	start();
});

function poll(_) {
	return eclipse.poll(_);
}