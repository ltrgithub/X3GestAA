"use strict";
/* jshint -W079 */
/* global QUnit: false, ok: false, asyncTest: false, test: false, strictEqual: false, start: false */
var flows = require('streamline/lib/util/flows');
var EclipseClientMock = require('../fixtures/eclipseClientMock').EclipseClientMock;
var X3ProcessMock = require('../fixtures/x3ProcessMock').X3ProcessMock;

QUnit.module(module.id);
var baseurl = "http://localhost:8124";
var eclipse = new EclipseClientMock(baseurl, "erbou", "erbou");
var x3Process = new X3ProcessMock();

asyncTest('Eclipse registering', function(_) {

	var data = eclipse.register(_);
	ok(data != null, "Registering Eclipse client");
	strictEqual(data.$status, "registered", "status ok");
	strictEqual(data.$uuid, eclipse.$uuid, "uuid matches");
	ok(data.$diagnoses == null, "No diagnoses");

	data = eclipse.register(_);
	ok(data != null, "Registering twice should be ok");
	ok(data.$diagnoses == null, "Still no diagnoses");

	start();
});

asyncTest('Eclipse get proxy state', function(_) {

	var data = eclipse.getProxyState(_);
	ok(data != null, "Getting proxy state");
	ok(data.$diagnoses == null, "No diagnoses");

	start();
});

asyncTest('Eclipse send proxyinit', function(_) {

	var data = eclipse.connect(_);
	strictEqual(eclipse.$sid, ~~data.$sid, "same sid");
	var t = Date.now();
	data = eclipse.proxyinit(_);
	var elapse = Date.now() - t,
		m = /(\d+)\0(<proxyinit[^\0]+)\0/.exec(data);
	ok(m && m.length === 3, "proxyinit valid response format");
	ok(elapse < 100, "Response time < 100ms: " + elapse);

	start();
});

// function nnn() {
asyncTest('Start debug session', function(_) {
	var res = poll(!_);
	var loop = x3Process.startDebug(!_);
	var data = res(_),
		m = /(\d+)\0(<init[^\0]+)\0/.exec(data);
	ok(m && m.length === 3, "init valid response format: " + m);

	data = eclipse.sendCommand(_, "feature_set", ["-i", 1, "-n", "max_children", "-v", "32"]);
	m = /(\d+)\0(<feature_set[^\0]+)\0/.exec(data);
	ok(m && m.length === 3, "feature_set valid response format: " + m[1] + "[NULL]" + m[2]);

	ok(loop(_), "Debug end");
	// var data = eclipse.disconnect();
	// strictEqual(eclipse.$sid, ~~data.$sid, "same sid");

	x3Process.endDebug(_);

	setTimeout(~_, 100);
	start();
});

function poll(_) {
	return eclipse.poll(_);
}
// }