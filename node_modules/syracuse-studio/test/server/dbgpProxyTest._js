"use strict";
/* jshint -W079 */
/* global QUnit: false, ok: false, asyncTest: false, test: false, strictEqual: false, start: false */
var flows = require('streamline/lib/util/flows');
var EclipseClientMock = require('../fixtures/eclipseClientMock').EclipseClientMock;
var X3ProcessMock = require('../fixtures/x3ProcessMock').X3ProcessMock;

QUnit.module(module.id);
var baseurl = "http://localhost:8124";
var eclipse = new EclipseClientMock(baseurl, "erbou", "erbou");
var x3Process = new X3ProcessMock();

asyncTest('Eclipse registering', function(_) {

	var data = eclipse.register(_);
	ok(data != null, "Registering Eclipse client");
	strictEqual(data.$status, "registered", "status ok");
	strictEqual(data.$uuid, eclipse.$uuid, "uuid matches");
	ok(data.$diagnoses == null, "No diagnoses");

	data = eclipse.register(_);
	ok(data != null, "Registering twice should be ok");
	ok(data.$diagnoses == null, "Still no diagnoses");

	start();
});

asyncTest('Eclipse get proxy state', function(_) {

	var data = eclipse.getProxyState(_);
	ok(data != null, "Getting proxy state");
	ok(data.$diagnoses == null, "No diagnoses");

	start();
});

asyncTest('Eclipse send proxyinit', function(_) {

	var t = Date.now();
	var data = eclipse.proxyinit(_);
	var elapse = Date.now() - t,
		m = /(\d+)\0(<proxyinit[^\0]+)\0/.exec(data);
	ok(m && m.length === 3, "proxyinit valid response format");
	ok(elapse < 100, "Good response time: " + elapse);

	start();
});

asyncTest('Start debug session', function(_) {
	ok(x3Process.startDebug(_), "startDebug");
	start();
});