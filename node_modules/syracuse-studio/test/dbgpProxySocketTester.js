"use strict";
var net = require('net');
var config;
try {
	config = require("../../../nodelocal").config || {};
	config.streamline.fast = false;
} catch (ex) {
	console.log(ex);
}
var crypto = require('crypto');
var os = require('os');
var jsxml = require("jsxml/lib/jsxml");
var datetime = require("syracuse-core/lib/types/datetime");
var uuid = require('syracuse-core/lib/uuid');

var $uuid = "2ff5d26c-d231-4494-b462-77bc129b9756";

var secret = (function() {
	var o = {
		k: "da85538b-c44c-4864-96aa-5ab5263fbf89"
	};
	var x = 0;
	return o.k.replace(/./g, function(c) {
		return String.fromCharCode(0x21 + ((x += c.charCodeAt(0)) & 0x3f));
	});

})();

var dbgpConfig = (config.studio || {}).dbgp || {};

function getToken(key) {
	var md5sum = crypto.createHash('md5'),
		token = {
			"key": key,
			"date": datetime.now().toString(),
			"once": uuid.generate()
		};
	md5sum.update(token.key + '/' + token.date + '/' + token.once + '/' + secret, "ascii");
	token.signature = md5sum.digest("hex");
	return new Buffer(JSON.stringify(token)).toString('base64');
}

function log(s) {
	console.log(s.replace(/\0/g, "[NULL]"));
}

function IdeClient() {
	var tid = 0,
		commands = [
			["proxyinit", "-k", getToken($uuid), "-m", "1", "-t", "1"],
			["feature_set", "-i", tid++, "-n", "max_children", "-v", "32"],
			["feature_set", "-i", tid++, "-n", "max_depth", "-v", "2"],
			["feature_set", "-i", tid++, "-n", "max_data", "-v", "8192"],
			// ["xcmd_x3_set_debug_line_offset", "-i", tid++, "-o", "1"],
		];

	var debugClient = null;
	var socket = new net.Socket();
	socket.connect(dbgpConfig.port, dbgpConfig.host || os.hostname(), function() {
		socket.setEncoding("utf8");
		socket.setNoDelay();
		socket.on('data', function(data) {
			log("=== IDE-RECEIVE ===\n" + data);
			if (commands.length === 0) {
				socket.end();
				return process.exit(0);
			}
			if (!debugClient) {
				// Start the client after proxyinit response
				debugClient = new DebugClient();
			} else {
				// Continue after receiving init
				write(commands.shift());
			}
		});
		socket.on('error', function(e) {
			log("=== IDE-ERROR ===\n" + e.message);
		});
		socket.on('end', function() {
			log("=== IDE-END ===\n");
		});
		write(commands.shift());
	});

	function _write(data) {
		socket.write(data, function() {
			log("=== IDE-SEND ===\n" + data);
		});
	}

	function write(cmd, args) {
		if (Array.isArray(cmd)) {
			args = cmd.concat(args || []);
			cmd = args.shift();
		}
		_write((cmd || "").split(/\s+/).concat(args || []).join(" ").split(/\0/)[0] + "\0");
	}
}

function DebugClient() {
	var tid = 0,
		messages = [{
				init: {
					$: {
						idekey: $uuid,
						session: $uuid,
						fileuri: "",
						thread: 1234,
						parent: "/Sage/sagedev/SUPDVLP/runtime",
						server: "AWS-X3-DEVSUP.sagefr.adinternal.com:17000/SUPERV/erbou/101007375",
						language: "X3",
						protocol_version: "1.0"
					},
					engine: {
						$: {
							version: "17r.219"
						}
					},
					author: {
						$value: "Sage"
					},
					url: {
						$cdata: "http://www.sage.com"
					},
					copyright: {
						$cdata: "Copyright (c) 2000-2014 Sage"
					},
				}
			},
			feature_set("max_children"),
			feature_set("max_depth", 1),
			feature_set("max_data", 1),
		];

	function feature_set(f, r) {
		return {
			response: {
				$: {
					command: "feature_set",
					transaction_id: tid++,
					feature_name: f,
					success: r || 1
				}
			}
		};
	}

	var socket = new net.Socket();
	socket.connect(dbgpConfig.port, dbgpConfig.host || os.hostname(), function() {
		socket.setEncoding("utf8");
		socket.setNoDelay();
		socket.on('data', function(data) {
			log("=== DBG-RECEIVE ===\n" + data);
			if (messages.length === 0) {
				socket.end();
				return process.exit(0);
			}
			write(messages.shift());
		});
		socket.on('error', function(e) {
			log("=== DBG-ERROR ===\n" + e.message);
		});
		socket.on('end', function() {
			log("=== DBG-END ===");
		});
		write(messages.shift());
	});

	function _write(data) {
		socket.write(data, function() {
			log("=== DBG-SEND ===\n" + data);
		});
	}

	function write(data) {
		if (typeof(data) === "object")
			data = jsxml.stringify(data);
		data = [data.length, data, ""].join("\0");
		_write(data);
	}
}

var client = new IdeClient();