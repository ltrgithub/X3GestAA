"use strict";
var sys = require("util");
var os = require('os');
var crypto = require('crypto');
var net = require('net');
var dns = require('dns');
var child_proc = require('child_process');
var streams = require('streamline/lib/streams/streams');
var helpers = require('syracuse-core/lib/helpers');
var datetime = require("syracuse-core/lib/types/datetime");
var uuid = require('syracuse-core/lib/uuid');
var jsxml = require("jsxml/lib/jsxml");
var config = require('syracuse-main/lib/nodeconfig').config;
var proxyClient = require('syracuse-studio/lib/dbgp/proxyClient');

var studioConfig = config.studio || {};
var dbgpConfig = studioConfig.dbgp || {};
var uuid = helpers.uuid;
var tracer = studioConfig.trace;

var dbgpProxy;

var oky = dbgpConfig.key || (dbgpConfig.key = "da85538b-c44c-4864-96aa-5ab5263fbf89");

var secret = (function() {
	var o = {
		k: oky
	};
	var x = 0;
	return o.k.replace(/./g, function(c) {
		return String.fromCharCode(0x21 + ((x += c.charCodeAt(0)) & 0x3f));
	});

})();

function getToken(key) {
	var md5sum = crypto.createHash('md5'),
		token = {
			"key": key,
			"date": datetime.now().toString(),
			"once": uuid.generate()
		};
	md5sum.update(token.key + '/' + token.date + '/' + token.once + '/' + secret, "ascii");
	token.signature = md5sum.digest("hex");
	return new Buffer(JSON.stringify(token)).toString('base64');
}

exports.startDbgpProxy = function _startDbgpProxy(_) {
	if (dbgpProxy && dbgpProxy.connected) {
		return {
			info: {
				$: {
					pid: dbgpProxy.pid,
					status: "running"
				}
			}
		};
	} else {
		// try connecting is the server has been launched by another node process
		try {
			var dbgpClient = _createClient(_),
				proxyState = dbgpClient.parseXml(dbgpClient.getState(_));
			if (proxyState.info && proxyState.info.$ && proxyState.info.$.status === "running") {
				return proxyState.info.$;
			}
		} catch (e) {
			if (e.code != "ECONNREFUSED")
				throw e;
		}
		return _launchDbgpProxy(~_);
	}
};

function _launchDbgpProxy(cb) {
	dbgpProxy = child_proc.fork(
		__dirname + '/proxyLauncher.js', null, {
			env: process.env,
			// execArgv:["--debug-brk"]
		}
	);
	tracer && tracer('Start dbgp server: connected=', dbgpProxy.connected);
	dbgpProxy.on('error', function(err) {
		tracer && tracer('Syracuse server got error:', err);
		if (cb) cb(err);
		cb = null;
	});
	dbgpProxy.on('message', function(m) {
		tracer && tracer('Syracuse server got message:', JSON.stringify(m));
		if (cb) cb();
		cb = null;
	});
	dbgpProxy.send({
		$start: dbgpConfig
	});
	return {
		pid: dbgpProxy.pid,
		status: "running"
	};
}

function _createClient(_, port, host, token) {
	var config = _getConfig(_);
	return proxyClient.create(config.port, config.hostname, token || getToken(uuid.generate()));
}

var defaultPort = 9514;

function _getConfig(_, opt) {
	opt = opt || {};

	var hostname = dbgpConfig.host || "localhost",
		port = dbgpConfig.port || defaultPort,
		ip4;

	if (opt.resolveName) {
		hostname = (hostname).replace(/^(localhost|127\.0\.0\.1|\s*)$/i, os.hostname());
	}
	if (opt.resolveIP) {
		ip4 = dns.lookup(hostname, 4, ~_);
	}

	return {
		hostname: hostname,
		port: port,
		host: hostname + ":" + port,
		ip: ip4,
		ip4Host: ip4 && (ip4 + ":" + port)
	};
}

exports.createClient = _createClient;
exports.getConfig = _getConfig;