"use strict";
var os = require('os');
var dns = require('dns');
var child_proc = require('child_process');
var helpers = require('syracuse-core/lib/helpers');
var config = require('config');
var proxyClient = require('syracuse-studio/lib/dbgp/proxyClient');

var studioConfig = config.studio || {};
var dbgpConfig = studioConfig.dbgp || {};
var tracer = require("syracuse-trace/lib/helper").getTracer("studio.proxy");

var dbgpProxy;

dbgpConfig.logDir = dbgpConfig.logDir || (config.collaboration || {}).logpath;

exports.startDbgpProxy = function _startDbgpProxy(_) {
	if (studioConfig.disabled) {
		tracer.warn && tracer.warn("startDbgpProxy: studio is disabled");
		return {
			info: {
				$: {
					pid: 0,
					status: "disabled"
				}
			}
		};
	}
	if (dbgpProxy && dbgpProxy.connected) {
		return {
			info: {
				$: {
					pid: dbgpProxy.pid,
					status: "running"
				}
			}
		};
	} else {
		// try connecting is the server has been launched by another node process
		try {
			var dbgpClient = _createClient(_),
				proxyState = dbgpClient.parseXml(dbgpClient.getState(_));
			dbgpClient.close(_);
			if (proxyState.info && proxyState.info.$ && proxyState.info.$.status === "running") {
				return proxyState.info.$;
			}
		} catch (e) {
			if (e.code != "ECONNREFUSED")
				throw e;
		}
		return _launchDbgpProxy(~_);
	}
};

function _launchDbgpProxy(cb) {
	dbgpProxy = child_proc.fork(
		__dirname + '/proxyLauncher.js', null, {
			env: process.env,
			// execArgv:["--debug-brk"]
		}
	);
	tracer.info && tracer.info('Start dbgp server: connected=', dbgpProxy.connected);
	dbgpProxy.on('error', function(err) {
		tracer.error && tracer.error('Syracuse server got error:', err);
		if (cb) cb(err);
		cb = null;
	});
	dbgpProxy.on('message', function(m) {
		tracer.debug && tracer.debug('Syracuse server got message:', JSON.stringify(m));
		if (cb) cb();
		cb = null;
	});
	dbgpProxy.send({
		$start: dbgpConfig
	});
	return {
		pid: dbgpProxy.pid,
		status: "running"
	};
}

function _createClient(_, key, opt) {
	var config = _getConfig(_);
	opt = opt || {};
	return proxyClient.create(opt.port || config.port, opt.hostname || config.hostname, opt.key || key);
}

var defaultPort = 9514;

var _networkInterfaces = (function() {
	var interfaces;
	return function(argument) {
		if (interfaces == null) {
			interfaces = [];
			var ifaces = os.networkInterfaces();
			for (var dev in ifaces) {
				ifaces[dev].forEach(function(details) {
					if (details.family == 'IPv4' && !details.internal) {
						interfaces.push({
							name: dev,
							family: details.family,
							address: details.address
						});
					}
				});
			}
		}
		return interfaces;
	};
})();

function _getConfig(_, opt) {
	opt = opt || {};
	opt.resolveName = opt.resolveName !== false;
	opt.resolveIP = opt.resolveIP !== false;
	opt.reverseIP = opt.reverseIP === true;
	opt.netInterface = ~~ (opt.netInterface || dbgpConfig.netInterface);
	var hostname = dbgpConfig.host || "localhost",
		port = dbgpConfig.port || defaultPort,
		ip4;

	if (opt.resolveName) {
		hostname = (hostname).replace(/^(localhost|127\.0\.0\.1|\s*)$/i, os.hostname());
	}
	if (opt.resolveIP || opt.reverseIP) {
		if (hostname && /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/.test(hostname))
			ip4 = hostname;
		else if (opt.netInterface >= 0) {
			ip4 = (_networkInterfaces()[opt.netInterface] || {}).address;
		}
		if (!ip4) {
			ip4 = dns.lookup(hostname, 4, ~_);
		}
		if (opt.reverseIP) {
			hostname = dns.reverse(ip4, ~_)[0];
		}
	}

	return {
		hostname: hostname,
		port: port,
		host: hostname + ":" + port,
		ip: ip4,
		ip4Host: ip4 && (ip4 + ":" + port)
	};
}

exports.createClient = _createClient;
exports.getConfig = _getConfig;
exports.networkInterfaces = _networkInterfaces;