"use strict";
var net = require('net');
var config = require('config');
var proxyManager = require('syracuse-studio/lib/dbgp/proxyManager');
var studio = require('syracuse-studio/lib/studioSession');

var studioConfig = config.studio || {};
var dbgpConfig = studioConfig.dbgp || {};
var tracer = require('syracuse-core').getTracer("studio.helper");

exports.$exported = true;

// @deprecated: use getStudioDbgpProxyAddress instead
exports.getDbgpProxyAddress = function(_) {
	var reverseIP = !!dbgpConfig.reverseIP;
	var cfg = proxyManager.getConfig(_, {
		resolveName: dbgpConfig.resolveName, // true by default
		resolveIP: dbgpConfig.resolveIP, // true by default
		reverseIP: reverseIP // false by default
	});
	var proxy = (!reverseIP && cfg.ip4Host) || cfg.host || cfg.ip4Host;
	tracer.debug && tracer.debug("getDbgpProxyAddress: result=" + proxy);
	return proxy;
};

// This is the preferable function to get the proxy address
// It runs async calls to get the first address we can connect to
exports.getStudioDbgpProxyAddress = function(_, id) {
	var info = studio.getStudioSessionInfo(_, id),
		proxyAddresses = info && info.debugProxy(_) || "";

	var proxies = proxyAddresses.split(',').map(function(s) {
		var p = s.split(':');
		return {
			host: p[0],
			port: p[1]
		};
	});
	var pingAllWrapper = _(function(callback, proxies) {
		_pingAll(callback, proxies);
	}, 0);
	var proxy = pingAllWrapper(_, proxies);
	proxy = proxy.address || (proxy.host + ":" + proxy.port);
	tracer.debug && tracer.debug("getStudioDbgpProxyAddress: id=" + id + ", result=" + proxy + " among " + proxyAddresses);
	return proxy;
};

function _pingAll(cb, proxies) {
	var done;

	function callback(err, proxy) {
		if (done)
			return;
		proxy.done = true;
		if (err) {
			var pending = proxies.some(function(p) {
				return !p.done;
			});
			if (!pending) {
				cb(err, proxy);
			}
			return;
		}

		done = true;
		cb(null, proxy);
	}

	// console.error("_pingAll: ", proxies);
	proxies.forEach(function(p) {
		_ping(p, callback);
	});
}

function _ping(proxy, cb) {
	var c = net.connect({
		host: proxy.host,
		port: proxy.port
	}, function() {
		proxy.address = c.remoteAddress + ":" + c.remotePort;
		// console.error("Proxy connected to " + proxy.address);
		cb(null, proxy);
	});
	c.on('error', function(err) {
		// console.error("Proxy error: " + err);
		cb(err, proxy);
	});
}