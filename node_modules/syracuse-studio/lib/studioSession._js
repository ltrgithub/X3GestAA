"use strict";

/// !doc
/// 
/// # X3 Studio session
/// 
/// Manage the SAFE X3 Studio for Eclipse session
/// 
/// ``` javascript
/// var studio = require('syracuse-studio/lib/studioSession');
/// var session = studio.createStudioSession(_, context, data, id);
/// ```

var fsp = require("path");
var helpers = require("syracuse-core/lib/helpers");
var Context = require("syracuse-sdata/lib/sdataContext").Context;
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var config = require('syracuse-main/lib/nodeconfig').config;
var cvgServices = require('syracuse-x3/lib/cvgServices');
var SadFsqClient = require('syracuse-x3/lib/clients/sadfsq/sadfsqClient').SadFsqClient;
var sadMod = require('syracuse-x3/lib/clients/sadfsq/sadfsqClient').Mod;
var glob = require("streamline/lib/globals");
var studioConfig = (config || {}).studio || {};
var trace = studioConfig.trace;
var studioSessions = {};

/// ## Static functions
/// 
/// -------------
/// ### createStudioSession
/// ``` javascript
/// var session = studio.createStudioSession(_, context, data, id);
/// ```
/// Create a studio session or return a previously created the session if has already be assign to the current httpSession.
/// 
/// * `context` the context of the current request.
/// * `data` the data send with the request.
/// * `id` [optional] the id has sent in the requested service.
/// 
exports.createStudioSession = function(_, context, data, id) {
	trace && trace(">>> studio.createSession: (" + data.$uuid + ", " + id + ")");
	id = data.$uuid || id;
	var ses = studioSessions[id];
	var ctxSes = context.httpSession.studioSession;
	if (context.httpSession.studioSession && ses && ses.$uuid) {
		return {
			$status: "alreadyRegistered"
		};
	}
	ses = ses || (studioSessions[id] = new StudioSession(id));
	context.httpSession.studioSession = ses;
	// setTimeout(~_, 15000); // to test long reply
	return {
		$status: "registered"
	};
};

function precond(ses) {
	if (ses && !studioSessions[ses.$uuid])
		throw new Error("Studio session not registered");
	if (!glob.context.request)
		throw new Error("No current request");
	var context = glob.context.request.context;
	if (!context)
		throw new Error("No context");
	if (!context.httpSession.studioSession)
		throw new Error("No studio session attached to current context");
	if (context.httpSession.studioSession.$uuid !== ses.$uuid)
		throw new Error("Studio session mismatch");

	return context;
}

function StudioSession(id) {
	this.$uuid = id;
	this.sadfs = {};
}

/// ## Instance functions
/// 
exports.StudioSession = helpers.defineClass(StudioSession, null, {

	/// -------------
	/// ### getEngineVersion
	/// ``` javascript
	/// var ver = studioSession.getEngineVersion(_, endpoint);
	/// ```
	/// Return the engine version of the current context
	/// 
	/// * `endpoint` the endpoint on which the method applies.
	/// 
	getEngineVersion: function(_, endpoint) {
		var context = precond(this),
			sadfs = this._ensureSadfs(_, endpoint),
			folder = endpoint.x3ServerFolder(_);

		if (!folder)
			throw new Error("Endpoint not a valid");

		// adonix -v NOM_DE_DOSSIER
		// returns a string like "Version 17r.218 24/09/2014"
		var ver = sadfs.exec(_, "adonix -v " + folder);
		return {
			$result: ver
		};
	},

	/// -------------
	/// ### update
	/// ``` javascript
	/// studioSession.update(_, endpoint, data);
	/// ```
	/// Return a true if succesful or false otherwise.
	/// 
	/// * `endpoint` the endpoint on which the method applies.
	/// * `data` the data sent with the request.
	/// A typical data content is:
	/// ``` json
	/// { "folder": "SUPERV", "filename": "AXDTMAIN", "content": "...", $sign="..." }
	/// ```
	/// 
	update: function(_, endpoint, data) {
		// used by X3UpdateManager
		// data.folder, data.filename, data.content;
		var context = precond(this),
			sadfs = this._ensureSadfs(_, endpoint),
			folder = endpoint.x3ServerFolder(_);

		// First send file in "TRT" dir using "src" extention
		var filedesc = {
			folder: data.folder,
			path: "TRT",
			name: data.filename,
			extension: "src"
		};
		sadfs.writeFile(_, filedesc, data.content, {
			flag: "w"
		});

		// Then compile file
		var res = _compile(_, sadfs, folder, data.filename);
		trace && trace(">>> update: " + JSON.stringify(res));
		return res;
	},

	/// -------------
	/// ### getFileStamp
	/// ``` javascript
	/// studioSession.getFileStamp(_, endpoint, data);
	/// ```
	/// Return the file stamp
	/// 
	/// * `endpoint` the endpoint on which the method applies.
	/// * `data` the data sent with the request.
	/// A typical data content is:
	/// ``` json
	/// { "path": "xxx/yyy" }
	/// ```
	/// 
	getFileStamp: function(_, endpoint, data) {
		// used by X3UpdateManager
		var context = precond(this),
			sadfs = this._ensureSadfs(_, endpoint),
			folder = data.folder || endpoint.x3ServerFolder(_);

		var filedesc = _getFileDesc(data.path, folder),
			stamp = "",
			stats;
		if (sadfs.exists(_, filedesc)) {
			stats = sadfs.stat(_, filedesc, ["mtime"]);
			stamp = "" + Date.parse(stats.mtime);
		}
		return {
			$result: stamp
		};
	},

	/// -------------
	/// ### getFileSize
	/// ``` javascript
	/// studioSession.getFileSize(_, endpoint, data);
	/// ```
	/// Return the file stamp
	/// 
	/// * `endpoint` the endpoint on which the method applies.
	/// * `data` the data sent with the request.
	/// A typical data content is:
	/// ``` json
	/// { "path": "xxx/yyy" }
	/// ```
	/// 
	getFileSize: function(_, endpoint, data) {
		// used by X3UpdateManager
		var context = precond(this),
			sadfs = this._ensureSadfs(_, endpoint),
			folder = data.folder || endpoint.x3ServerFolder(_);

		var filedesc = _getFileDesc(data.path, folder),
			size = -1,
			stats;
		if (sadfs.exists(_, filedesc)) {
			stats = sadfs.stat(_, filedesc, ["size"]);
			size = stats.size;
		}
		return {
			$result: size
		};
	},

	/// -------------
	/// ### fileExist
	/// ``` javascript
	/// studioSession.fileExist(_, endpoint, data);
	/// ```
	/// Return if the file exists
	/// 
	/// * `endpoint` the endpoint on which the method applies.
	/// * `data` the data sent with the request.
	/// A typical data content is:
	/// ``` json
	/// { "path": "xxx/yyy", folder:"SUPERV" }
	/// ```
	/// 
	fileExist: function(_, endpoint, data) {
		// used by X3UpdateManager
		// replace also isFileOnServer used by XdtResourceHelper
		var context = precond(this),
			sadfs = this._ensureSadfs(_, endpoint),
			folder = data.folder || endpoint.x3ServerFolder(_);

		var filedesc = _getFileDesc(data.path, folder);
		return {
			$result: sadfs.exists(_, filedesc)
		};
	},

	_getFileInfo: function(_, endpoint, data, info, transform) {
		// used by X3UpdateManager
		var context = precond(this),
			sadfs = this._ensureSadfs(_, endpoint),
			folder = data.folder || endpoint.x3ServerFolder(_);

		var filedesc = _getFileDesc(data.path, folder),
			ret,
			stats;
		if (sadfs.exists(_, filedesc)) {
			stats = sadfs.stat(_, filedesc, [info]);
			ret = stats[info];
		}
		return {
			$result: transform && transform(info)
		};
	},

	/// -------------
	/// ### deleteFile
	/// ``` javascript
	/// studioSession.deleteFile(_, endpoint, data);
	/// ```
	/// 
	/// * `endpoint` the endpoint on which the method applies.
	/// * `data` the data sent with the request.
	/// A typical data content is:
	/// ``` json
	/// { "path": "dir/file.ext" }
	/// ```
	/// 
	deleteFile: function(_, endpoint, data) {
		// only used by X3UpdateManager for time marker
		// It would be better to specialize this function to only manage this time marker
		var context = precond(this),
			sadfs = this._ensureSadfs(_, endpoint),
			folder = data.folder || endpoint.x3ServerFolder(_);
		var dir = fsp.dirname(data.path);

		trace && trace(">>> StudioSession.deleteFile: path=" + data.path + ", dir=" + dir);
		// Only allow deletion of files into the tmp folder
		if (["tmp", "TRT"].indexOf(dir) === -1)
			throw new Error("Not supported");

		var filedesc = _getFileDesc(data.path, folder);
		sadfs.unlink(_, filedesc);
		return {
			$result: true
		};
	},

	/// -------------
	/// ### writeFile
	/// ``` javascript
	/// studioSession.writeFile(_, endpoint, data);
	/// ```
	/// 
	/// * `endpoint` the endpoint on which the method applies.
	/// * `data` the data sent with the request.
	/// A typical data content is:
	/// ``` json
	/// { "path": "dir/file.ext" , "content": "hello world..."}
	/// ```
	/// 
	writeFile: function(_, endpoint, data) {
		// Only used by X3UpdateManager for time marker
		// It would be better to specialize this function to only manage this time marker
		var context = precond(this),
			sadfs = this._ensureSadfs(_, endpoint),
			folder = data.folder || endpoint.x3ServerFolder(_);
		var dir = fsp.dirname(data.path);

		trace && trace(">>> StudioSession.writeFile: path=" + data.path + ", dir=" + dir);
		// Only allow deletion of files into the tmp folder
		if (["tmp", "TRT"].indexOf(dir) === -1)
			throw new Error("Not supported");

		var filedesc = _getFileDesc(data.path, folder);
		sadfs.writeFile(_, filedesc, data.content, {
			flag: "w"
		});

		return {
			$result: ""
		};
	},

	/// -------------
	/// ### getFileList
	/// ``` javascript
	/// studioSession.getFileList(_, endpoint, data);
	/// ```
	/// 
	/// * `endpoint` the endpoint on which the method applies.
	/// * `data` the data sent with the request.
	/// A typical data content is:
	/// ``` json
	/// { "folder": "SUPERV" , "directory": "TRT", "extension": "src"}
	/// ```
	/// 
	getFileList: function(_, endpoint, data) {
		// Used by X3FileManager
		var context = precond(this),
			sadfs = this._ensureSadfs(_, endpoint),
			folder = data.folder || endpoint.x3ServerFolder(_),
			options = data.options || "",
			cmd = ["lsadx", "-a", folder, options, data.directory, data.extension].join(" ");

		trace && trace(">>> StudioSession.getFileList: cmd=" + cmd);
		var output = sadfs.exec(_, cmd);
		trace && trace(">>>>>>                      output=" + output);
		return {
			$result: output && output.split("\n")
		};
	},

	// sadfsqGetFileContent(String x3Folder, String fileDir, String fileName, String fileExt) ==> String
	/// -------------
	/// ### readFile
	/// ``` javascript
	/// studioSession.readFile(_, endpoint, data);
	/// ```
	/// 
	/// * `endpoint` the endpoint on which the method applies.
	/// * `data` the data sent with the request.
	/// A typical data content is:
	/// ``` json
	/// { "folder": "SUPERV" , "directory": "TRT", "filename": "ZEBHELLO", "extension": "src" }
	/// ```
	/// 
	readFile: function(_, endpoint, data) {
		// Used by X3DebugTraceView.setTraceContent
		var context = precond(this),
			sadfs = this._ensureSadfs(_, endpoint),
			folder = data.folder || endpoint.x3ServerFolder(_),
			encoding = data.encoding || "utf8",
			filedesc = data.path && _getFileDesc(data.path, folder) || {
				folder: folder,
				path: data.directory,
				name: data.filename,
				extension: data.extension
			};
		return {
			$result: sadfs.readFile(_, filedesc, {
				flag: "r",
				encoding: encoding
			})
		};
	},

	_ensureSadfs: function(_, endpoint) {
		var x3server, dataset = endpoint.dataset(_),
			sadfs = this.sadfs[dataset];
		if (!sadfs) {
			x3server = endpoint.x3server(_);
			sadfs = this.sadfs[dataset] = new SadFsqClient(_, x3server.serverHost(_), x3server.serverPort(_), null, null, false);
		}
		return sadfs;
	}

});

function _compile(_, sadfs, folder, filename) {
	var filedesc = {
		folder: folder,
		path: "tmp",
		name: filename,
		extension: "out"
	};
	var outpath = sadfs.path(_, filedesc);
	trace && trace(">>> _compile: out file=" + outpath);
	sadfs.exec(_, ["valtrt", "-l", "ENG", folder, filename, ">", outpath, "2>&1"].join(" "));
	var output = sadfs.readFile(_, filedesc, {
		encoding: "ascii"
	});
	trace && trace(">>> _compile: out content=" + output);
	sadfs.unlink(_, filedesc);

	// Errors are formatted like:
	// Erreur no 5
	// ( Ligne 2, Colonne 7 )
	// Erreur de syntaxe : Caractère illégal
	// "Error No 5\n(Line 2, Column 10)\nSyntax Error : Illegal Character\n"
	var message = "success";
	var lines = output.split("\n");
	var diagnoses;
	if (lines[1]) {
		var m = /[^0-9]*([0-9]+)[^0-9]*,[^0-9]*([0-9]+)[^0-9]*/.exec(lines[1]);
		if (m) {
			// message = lines[0].replace(/\s+$/g, "") + " (" + m[1] + ":" + m[2] + ")";
			message = lines[0].replace(/\s+$/g, "");
			message += " ";
			message = lines[1].replace(/\s+$/g, "");
			message += " - ";
			message += (lines[2] || "").replace(/\s+$/g, "");
			diagnoses = [{
				$severity: "error",
				$message: message
			}];
		}
	}

	return {
		$result: diagnoses == null,
		$diagnoses: diagnoses
	};
}

function _getFileDesc(path, folder) {
	var ext = fsp.extname(path),
		desc = {
			folder: folder,
			path: fsp.dirname(path),
			name: fsp.basename(path, ext),
			extension: ext.substring(1)
		};
	trace && trace(">>> studioSession._getFileDesc: " + JSON.stringify(desc));
	return desc;
}