"use strict";

var ez = require('ez-streams');
var helpers = require('syracuse-core/lib/helpers');
var gaHttp = require('syracuse-analytics/lib/http');
var querystring = require("querystring");

var tracer = require("syracuse-trace/lib/helper").getTracer("analytics");

var hitsQueue;
var createHitsQueue = function() {
	tracer.info && tracer.info("Create GA Hits queue");
	var errCount = 0;
	var writer = gaHttp.writer();
	hitsQueue = ez.devices.queue({
		max: 10000,
	});
	hitsQueue.putErrCount = 0;
	hitsQueue.putErrTime = new Date().getTime();

	hitsQueue.reader.pipe(_ >> function(err) {
		if (err) {
			if (errCount++ < 3) tracer.error && tracer.error("Error in GA Hits queue: " + err.stack + "; Maybe due to an Internet connection problem.");
			setTimeout(function() {
				hitsQueue = null;
			}, 60000);
		}
	}, writer);
};


var Hit = helpers.defineClass(function(type, params, dim) {
	dim = dim || {};
	this.params = params || {};
	this.params.t = type;
	this.params.cd1 = dim.AppCustomer || "(not set)";
	this.params.cd2 = dim.AppName || "(not set)";
	this.params.cd3 = dim.AppInternal || "(not set)";
	this.params.cd4 = dim.AppUser || "(not set)";
	this.params.cd5 = dim.AppVersion || "(not set)";
	this.params.cd6 = dim.AppModule || "(not set)";
	this.params.cd7 = dim.AppPlatform || "(not set)";
	this.params.cd8 = dim.AppLinkTyp || "(not set)";
	this.params.cd9 = dim.AppCustomiz || "(not set)";
	this.params.cd10 = dim.AppFacet || "(not set)";
	this.params.cd11 = dim.AppOwner || "(not set)";
	this.params.cd12 = dim.AppHost || "(not set)";

	if (!hitsQueue) {
		createHitsQueue();
	}
}, null, {
	store: function() {
		tracer.debug && tracer.debug(this.params.t + " collected: " + JSON.stringify(this.params, null, 2));
		if (!hitsQueue.put(this.query())) {
			hitsQueue.putErrCount++;
			var t = new Date().getTime();
			if (t - hitsQueue.putErrTime > 60000) {
				tracer.error & tracer.error(hitsQueue.putErrCount + " hits have been lost");
				hitsQueue.putErrTime = t;
				hitsQueue.putErrCount = 0;
			}
		}
	},
	query: function() {
		return querystring.stringify(this.params);
	}
});

var Pageview = helpers.defineClass(function(params, dim) {
	Hit.call(this, "pageview", params, dim);
}, Hit, {});

var Event = helpers.defineClass(function(params, dim) {
	Hit.call(this, "event", params, dim);
}, Hit, {});

var Timing = helpers.defineClass(function(params, dim) {
	Hit.call(this, "timing", params, dim);
}, Hit, {});

var Collector = helpers.defineClass(function() {}, null, {
	pageview: function(params, customDim) {
		return new Pageview(params, customDim);
	},
	event: function(params, customDim) {
		return new Event(params, customDim);
	},
	timing: function(params, customDim) {
		return new Timing(params, customDim);
	},
});

exports.collect = new Collector();