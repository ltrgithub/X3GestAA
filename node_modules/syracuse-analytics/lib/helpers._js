"use strict";

var helpers = require('syracuse-core/lib/helpers');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var ga = require('syracuse-analytics');
var locale = require("syracuse-core/lib/locale");
var check = require("syracuse-license/lib/check");
var patchtools = require('syracuse-patch/lib/patchtools');

var tracer = require("syracuse-trace/lib/helper").getTracer("analytics");

var _CUSTOMER_ID;
var _VERSION;

function getCustomerId() {
	if (!_CUSTOMER_ID) {
		var licenses = check.validLicenses();
		if (licenses.length > 0) {
			_CUSTOMER_ID = licenses[0].licensedTo && ((licenses[0].licensedTo.registrationNumber ? licenses[0].licensedTo.registrationNumber + " - " : "") + licenses[0].licensedTo.name);
		}
	}
	return _CUSTOMER_ID;
}

function getVersion(_) {
	var version;
	if (!_VERSION) {
		version = patchtools.readVersionFile(patchtools.BASE_DIRECTORY, _);
		if (!version) return "Unknown";
		_VERSION = version.relNumber + "-" + version.patchNumber;
	}
	return _VERSION;
}

function getRequiredParams(context) {
	// Get session information
	var session = context && (context.httpSession || context.session);
	return {
		v: 1, // Protocol version
		tid: "UA-63873235-1", // Tracking ID - default is following ID of property pepx3-test
		cid: session && session.getData("userID"),
		ul: locale.current.toLowerCase(),
		ua: context.request.headers['user-agent'],
		uip: session && (session.getData("requestInfo") || {}).peerAddress,
	};
}

exports.hitPage = function(_, context, pageName, options) {
	options = options || {};

	if (!options.title && options.pageInfo && options.pageInfo.entity && options.pageInfo.$uuid) {
		var db = adminHelper.getCollaborationEndpoint(_).getOrm(_);
		var elt = db.fetchInstance(_, db.getEntity(_, options.pageInfo.entity), {
			jsonWhere: {
				$uuid: options.pageInfo.$uuid
			}
		});
		if (elt && elt._data && elt._data.title) {
			options.title = elt._data.title["en-us"] || elt._data.title["fr-fr"];
		}
	}

	// title and module are mandatory
	if (!options.force && (!options.title || !options.module)) {
		tracer.debug && tracer.debug("Do not send stats for page '" + pageName + "'");
		return;
	}

	var descrMap = options.selectedEp && options.selectedEp.applicationRef(_)._data.description;
	var appName = descrMap && (descrMap["en-us"] || descrMap["fr-fr"]);

	var pvParams = {
		dh: context.request.headers.host,
		dp: "/" + pageName,
		dt: options.title
	};
	helpers.object.merge(getRequiredParams(context), pvParams);
	// Prepare required values for hits
	var pv = ga.collect.pageview(pvParams, {
		AppCustomer: getCustomerId(),
		AppName: appName,
		AppInternal: helpers.uuid.generate('-'),
		AppUser: options.userId,
		AppVersion: getVersion(_),
		AppModule: options.module,
		AppPlatform: options.device,
		AppLinkTyp: options.type,
		AppCustomiz: options.variant,
		AppFacet: options.facet,
		AppOwner: options.factoryOwner
	});

	tracer.debug && tracer.debug("Page view parameters: " + JSON.stringify(pv.params, null, 2));
	ga.send(_, context, pv.query());
};