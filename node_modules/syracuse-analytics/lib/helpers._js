"use strict";

var config = require('config');
var helpers = require('syracuse-core/lib/helpers');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var ga = require('syracuse-analytics');
var locale = require("syracuse-core/lib/locale");
var ez = require('ez-streams');
var check = require("syracuse-license/lib/check");
var patchtools = require('syracuse-patch/lib/patchtools');

var tracer = require("syracuse-trace/lib/helper").getTracer("analytics");

var _TRACKING_ID = (config.ga && config.ga.tid) || "UA-63873235-1"; // default is following ID of property pepx3-test
var _CUSTOMER_ID;
var _SYRA_VERSION;
var _ADMIN_ID;
var _COUNTRY_CODE;
var _CITY_ID;

function getCustomerId() {
	if (!_CUSTOMER_ID) {
		var licenses = check.validLicenses();
		if (licenses.length > 0) {
			_CUSTOMER_ID = licenses[0].licensedTo && ((licenses[0].licensedTo.registrationNumber ? licenses[0].licensedTo.registrationNumber + " - " : "") + licenses[0].licensedTo.name);
		}
	}
	return _CUSTOMER_ID;
}

function getVersion(_) {
	var version;
	if (!_SYRA_VERSION) {
		version = patchtools.readVersionFile(patchtools.BASE_DIRECTORY, _);
		if (!version) return "Unknown";
		_SYRA_VERSION = version.relNumber + "-" + version.patchNumber;
	}
	return _SYRA_VERSION;
}

function getAdminId(_) {
	if (!_ADMIN_ID) {
		var db = adminHelper.getCollaborationEndpoint(_).getOrm(_);
		var adm = db.fetchInstance(_, db.getEntity(_, "user"), {
			jsonWhere: {
				login: "admin"
			}
		});
		if (adm) _ADMIN_ID = adm.$uuid;
	}
	return _ADMIN_ID;
}

function getGeoId(_) {
	var licenses = check.validLicenses();
	var lic;
	if (licenses.length > 0) {
		lic = licenses[0];
	}

	if (!lic) tracer.error && tracer.error("Can't find Geo ID because no license was found");

	var addr = lic.licensedTo && lic.licensedTo.address;
	var country = addr && addr.country;
	var city = addr && addr.city;

	if (country && !_COUNTRY_CODE) {
		var countryReader = ez.devices.file.text.reader('node_modules/syracuse-analytics/data/countries.csv').transform(ez.transforms.csv.parser())
			.filter(function(_, item) {
				return item.Name.toLowerCase() === country.toLowerCase();
			});
		var _country = countryReader.read(_);
		if (_country) {
			_COUNTRY_CODE = _country["Country Code"];
		}
		countryReader = null;
	}
	if (city && _COUNTRY_CODE && !_CITY_ID) {
		var cityReader = ez.devices.file.text.reader('node_modules/syracuse-analytics/data/cities.csv').transform(ez.transforms.csv.parser())
			.filter(function(_, item) {
				return item["Country Code"] === _COUNTRY_CODE;
			})
			.filter(function(_, item) {
				if (city.toLowerCase() === item.Name) return true;
				var shortName = city.substring(0, city.indexOf(' '));
				return shortName && shortName.toLowerCase() === item.Name.toLowerCase();
			});
		var _city = cityReader.read(_);
		if (_city) {
			_CITY_ID = _city["Criteria ID"];
		}
		cityReader = null;
	}
	return _CITY_ID || _COUNTRY_CODE;
}

function getClientParams(_, context) {
	// Get session information
	var session = context && (context.httpSession || context.session);
	return {
		v: 1, // Protocol version
		tid: _TRACKING_ID, // Tracking ID
		cid: session && session.getData("userID"), // Anonymous Client ID.
		ul: locale.current.toLowerCase(),
		ua: context.request.headers['user-agent'],
		uip: session && (session.getData("requestInfo") || {}).peerAddress,
		geoid: getGeoId(_), // Geographical Override
	};
}

function getServerParams(_) {
	return {
		v: 1, // Protocol version
		tid: _TRACKING_ID, // Tracking ID
		cid: getAdminId(_), // Anonymous Client ID.
		geoid: getGeoId(_), // Geographical Override
	};
}

exports.hitPage = function(_, context, pageName, options) {
	options = options || {};

	if (!options.title && options.pageInfo && options.pageInfo.entity && options.pageInfo.$uuid) {
		var db = adminHelper.getCollaborationEndpoint(_).getOrm(_);
		var elt = db.fetchInstance(_, db.getEntity(_, options.pageInfo.entity), {
			jsonWhere: {
				$uuid: options.pageInfo.$uuid
			}
		});
		if (elt && elt._data && elt._data.title) {
			options.title = elt._data.title["en-us"] || elt._data.title["fr-fr"];
		}
	}

	// title and module are mandatory
	if (!options.force && (!options.title || !options.module)) {
		tracer.debug && tracer.debug("Do not send stats for page '" + pageName + "'");
		return;
	}

	var descrMap = options.selectedEp && options.selectedEp.applicationRef(_)._data.description;
	var appName = descrMap && (descrMap["en-us"] || descrMap["fr-fr"]);

	var pvParams = {
		dh: context.request.headers.host, // Document hostname.
		dp: "/" + pageName, // Page
		dt: options.title // Title
	};
	helpers.object.merge(getClientParams(_, context), pvParams);
	// Prepare required values for hits
	ga.collect.pageview(pvParams, {
		AppCustomer: getCustomerId(),
		AppName: appName,
		AppInternal: helpers.uuid.generate('-'),
		AppUser: options.userId,
		AppVersion: getVersion(_),
		AppModule: options.module,
		AppPlatform: options.device,
		AppLinkTyp: options.type,
		AppCustomiz: options.variant,
		AppFacet: options.facet,
		AppOwner: options.factoryOwner
	}).store();
};

exports.hitEvent = function(_, category, action, label, value, options) {
	options = options || {};
	var evtParams = {
		ec: category, // Event Category. Required.
		ea: action, // Event Action. Required.
		el: label, // Event label.
		ev: value, // Event value.
	};
	helpers.object.merge(getServerParams(_), evtParams);
	// Prepare required values for hits
	ga.collect.event(evtParams, {
		AppCustomer: getCustomerId(),
		AppName: options.appName,
		AppInternal: helpers.uuid.generate('-'),
		AppVersion: getVersion(_),
		AppHost: options.host,
	}).store();
};

exports.hitTiming = function(_, context, category, variable, time, label, options) {
	options = options || {};
	var timParams = {
		utc: category, // Timing category.
		utv: variable, // Timing variable.
		utt: time, // Timing time.
		utl: label, // Timing label.
	};
	helpers.object.merge(context ? getClientParams(_, context) : getServerParams(_), timParams);
	// Prepare required values for hits
	ga.collect.timing(timParams, {
		AppCustomer: getCustomerId(),
		AppName: options.appName,
		AppInternal: helpers.uuid.generate('-'),
		AppVersion: getVersion(_),
		AppHost: options.host,
	}).store();
};