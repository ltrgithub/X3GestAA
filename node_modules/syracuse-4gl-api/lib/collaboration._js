"use strict";

var globals = require('streamline/lib/globals');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var scheduler = require("syracuse-event/lib/scheduler");

exports.$exported = true;

//application developments need user profile informations
exports.getUserProfile = function(_) {
	var up = globals.context && globals.context.session && globals.context.session.getUserProfile(_);
	return up.serializeInstance(_);
};

function _scheduleUserAction(_, users, actionName, notificationSuccess, notificationFail, triggerDateTime) {
	(users || []).forEach_(_, function(_, user) {
		scheduler.schedule(_, user, user.$uuid, triggerDateTime, {
			action: actionName,
			notification: {
				success: notificationSuccess,
				fail: notificationFail
			}
		}, "db");
	});
}

// schedule the execution of an event for all users that match the login, either for login / edpoint mapping, or for the direct login match
// actionName : parameter to be sent to user's "fire" method; supported actions="activate","deactivate"
// notificationEvent : code of optional event to trigger notifications
// triggerDateTime : unix date as in ms since ..., null to cancel notification and action 
exports.scheduleUserAction = function(_, login, actionName, notificationSuccess, notificationFail, triggerDateTime) {
	var adminDb = adminHelper.getCollaborationOrm(_);
	var ep = globals.context.sdataContext.endpoint;
	// find user by login and endpoint
	var count = 0;
	if (ep) {
		var users = adminDb.fetchInstances(_, adminDb.getEntity(_, "user"), {
			jsonWhere: {
				"userEndpoint.login": login,
				"userEndpoint.endpoint": ep.$uuid
			}
		});
		count += users.length;
		_scheduleUserAction(_, users, actionName, notificationEvent, time);
	}
	var users = adminDb.fetchInstances(_, adminDb.getEntity(_, "user"), {
		jsonWhere: {
			login: login
		}
	});
	count += users.lentgh;
	_scheduleUserAction(_, users, actionName, notificationSuccess, notificationFail, triggerDateTime);
	// TODO: notification for no user found
};