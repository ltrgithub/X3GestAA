"use strict";
const adminHelper = require("@sage/syracuse-lib/src/collaboration/helpers").AdminHelper;
const locale = require('@sage/syracuse-core').locale;

exports.$exported = true;

/// !doc
/// 
/// # Connected applications helper  
/// This API module allows to generate a JWT token or to generate formatted URL from the 4GL code.  
/// To use this module do `var connAppHelper = require('./connectedApp')`.  
/// All the methods are asynchronous.  
/// 

function findConnectedApp(_, clientId) {
	let db = adminHelper.getCollaborationOrm(_);
	let model = db.model;
	let entity = model.getEntity(_, "connectedApplication");
	let filter = {
		sdataWhere: "clientId eq '" + clientId + "'"
	};
	let instance = db.fetchInstance(_, entity, filter);
	if (!instance) throw new Error(locale.format(module, "connAppNotFound", clientId));
	return instance;
}
/// 
/// -------------
/// ## getConnectedAppToken :
/// ``` javascript
/// connAppHelper.getConnectedAppToken(_, client_id, params);  
/// ```
/// It allows to generate the JWT token.  
/// 
/// * **clientId** id of the connected application.  
/// * **params** a string containing a newline separated list of key/value pair key1: value1\nkey2: value2. (YAML like syntax). Typical keys are: auth, site, ...
/// 
exports.getConnectedAppToken = function(_, clientId, params) {
	let connApp = findConnectedApp(_, clientId);
	return connApp.generateToken(_, params);
};

/// 
/// -------------
/// ## formatConnectedAppUrl :
/// ``` javascript
/// connAppHelper.getConnectedAppToken(_, client_id, path, params);  
/// ```
/// It allows to generate the JWT token.  
/// 
/// * **clientId** id of the connected application.  
/// * **path** a string that will be combined with the url of the clientID and the generated token to build a full url.
/// * **params** a string containing a newline separated list of key/value pair key1: value1\nkey2: value2. (YAML like syntax). Typical keys are: auth, site, ...
/// 
exports.formatConnectedAppUrl = function(_, clientId, path, params) {
	let connApp = findConnectedApp(_, clientId);
	return connApp.generateFormattedUrl(_, path, params);
};