"use strict";

var util = require('util');
var tracer; // = console.log;
var globals = require('streamline-runtime').globals;
import { assert } from 'chai';
Object.keys(assert).forEach(key => {
	if (key !== 'isNaN') global[key] = assert[key];
});

describe(module.id, () => {
//	var dataModel = require("@sage/syracuse-lib/src/orm/dataModel");
//	var registry = require("@sage/syracuse-lib/src/sdata/sdataRegistry");

	var GenLogger = require('../../lib/genLogger').GenLogger;
	var methods = require('../../lib/genLogger').methods;
	var helper = require('../../lib/entities/traceRecord');
	var traceHelper = require('../../lib/helper');
	var adminTestFixtures = require("@sage/syracuse-lib/test/collaboration/fixtures/adminTestFixtures");

//	var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_demo");
	it('initialize', function(_) {
		adminTestFixtures.initializeTestEnvironnement(_);
	});

	it('find level', function() {
		console.log("Test message for console.log");
		console.error("Test message for console.error");

		strictEqual(traceHelper._findLevel({}, "hallo"), "error", "No config");
		strictEqual(traceHelper._findLevel({
			traces: {
				defLevel: "warn"
			}
		}, "hallo"), "warn", "Only default");
		strictEqual(traceHelper._findLevel({
			traces: {
				defLevel: "warn",
				levels: {
					"hallo": "info"
				}
			}
		}, "hallo"), "info", "special level");
		strictEqual(traceHelper._findLevel({
			traces: {
				defLevel: "warn",
				levels: {
					"hallo": "info"
				}
			}
		}, "hallo2"), "warn", "special level for other logger");
		strictEqual(traceHelper._findLevel({
			traces: {
				levels: {
					"hallo": "info"
				}
			}
		}, "hallo"), "info", "special level, no default");
		strictEqual(traceHelper._findLevel({
			traces: {
				levels: {
					"hallo2": {
						"t": "debug"
					}
				}
			}
		}, "hallo2.t"), "debug", "special level, no default, for submodule");
		strictEqual(traceHelper._findLevel({
			traces: {
				levels: {
					"hallo2": {
						"t": "debug"
					}
				}
			}
		}, "hallo2.t2"), "error", "general level");
		strictEqual(traceHelper._findLevel({
			traces: {
				defLevel: "warn",
				levels: {
					"hallo2": {
						"t": "debug"
					}
				}
			}
		}, "hallo2.t2"), "warn", "default for submodule (module availablbe)");
		strictEqual(traceHelper._findLevel({
			traces: {
				defLevel: "warn",
				levels: {
					"hallo2": {
						"t": "debug"
					}
				}
			}
		}, "hallo3.t1"), "warn", "default for submodule (module not available)");

	});


	it('addRecord/removeRecord', function() {
		var g_session = globals.context.session; // save session
		globals.context.session = {
			id: "1"
		}; //set pseudo session ID for tests

		try {
			var queue1 = [];
			queue1.put = queue1.push;

			var queue2 = [];
			queue2.put = queue2.push;

			var queue3 = [];
			queue3.put = queue3.push;

			var log = new GenLogger({
				name: "1"
			});

			log.addRecord("1", "warn", queue1);

			leveltest("addrecord warn", log, 2, 1);

			log.debug && log.debug("M1");

			strictEqual(queue1.length, 0, "M1 No message");

			log.warn && log.warn("M1a");

			strictEqual(queue1.length, 1, "M1a 1 message");

			log.error && log.error("M2");

			strictEqual(queue1.length, 2, "M2  2 messages");

			queue1.length = 0; // clear queue

			log.addRecord("2", "info", queue2);
			log.addRecord("3", "error", queue3);

			strictEqual(!log.warn, false, "warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, false, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			log.debug && log.debug("M3");

			strictEqual(queue1.length, 0, "M3 q1 No message");
			strictEqual(queue2.length, 0, "q2 No message");
			strictEqual(queue3.length, 0, "q3 No message");

			log.info && log.info("M4");

			strictEqual(queue1.length, 0, "M4 q1 No message");
			strictEqual(queue2.length, 1, "q2 1 message");
			strictEqual(queue3.length, 0, "q3 0 message");

			log.warn && log.warn("M5");

			strictEqual(queue1.length, 1, "M5 q1 1 message");
			strictEqual(queue2.length, 2, "q2 2 messages");
			strictEqual(queue3.length, 0, "q3 0 message");

			log.error && log.error("M6");

			strictEqual(queue1.length, 2, "M6 q1 2 messages");
			strictEqual(queue2.length, 3, "q2 3 messages");
			strictEqual(queue3.length, 1, "q3 1 message");

			// reset queues
			queue1.length = queue2.length = queue3.length = 0;

			log.deleteRecord("2");

			strictEqual(!log.warn, false, "remove info: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");
			log.deleteRecord("3");

			strictEqual(!log.warn, false, "remove error record: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			log.deleteRecord("1");

			strictEqual(!log.warn, true, "remove last record: warn prop");
			strictEqual(!log.error, true, "error prop");
			strictEqual(!log.fatal, true, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			// session dependent records

			log.addRecord("1", "error", queue1);
			log.addRecord("2", "warn", queue2, "1");

			strictEqual(!log.warn, false, "session dependent: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			globals.context.session.id = "2";

			strictEqual(!log.warn, true, "session dependent, change session ID: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			globals.context.session.id = "1";

			log.debug && log.debug("M11");

			strictEqual(queue1.length, 0, "error: M11 No message");
			strictEqual(queue2.length, 0, "warning: M11 No message");

			log.warn && log.warn("M11a");

			strictEqual(queue1.length, 0, "error: M11a 0 message");
			strictEqual(queue2.length, 1, "warning: M11a 1 message");

			log.error && log.error("M12");

			strictEqual(queue1.length, 1, "error: M12  1 message");
			strictEqual(queue2.length, 2, "warning: M12  2 messages");

			queue1.length = 0; // clear queue
			queue2.length = 0; // clear queue

			log.deleteRecord("1");

			strictEqual(!log.warn, false, "only session dependent: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			globals.context.session.id = "2";

			strictEqual(!log.warn, true, "only session dependent warning, wrong session: warn prop");
			strictEqual(!log.error, true, "error prop");
			strictEqual(!log.fatal, true, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			log.addRecord("1", "error", queue1);

			strictEqual(!log.warn, true, "error and session dependent warning, wrong session: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			log.addRecord("3", "info", queue3);

			strictEqual(!log.warn, false, "info and session dependent warning, wrong session: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, false, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			globals.context.session.id = "1";

			strictEqual(!log.warn, false, "info and session dependent warning, correct session: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, false, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			log.deleteRecord("3");
			log.addRecord("3", "warn", queue3);

			strictEqual(!log.warn, false, "warning and session dependent warning, correct session: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			globals.context.session.id = "2";

			strictEqual(!log.warn, false, "warning and session dependent warning, wrong session: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			log.deleteRecord("3");

			strictEqual(!log.warn, true, "error and session dependent warning, wrong session: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			log.addRecord("3", "info", queue3, "2");

			strictEqual(!log.warn, false, "error, session 1 warning session 2 info, in session 2: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, false, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			globals.context.session.id = "1";

			strictEqual(!log.warn, false, "error, session 1 warning session 2 info, in session 1: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			globals.context.session.id = "3";

			strictEqual(!log.warn, true, "error, session 1 warning session 2 info, in session 3: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			log.deleteRecord("3");

			strictEqual(!log.warn, true, "error, session 1 warning, in session 3: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			globals.context.session.id = "1";

			strictEqual(!log.warn, false, "error, session 1 warning, in session 1: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			globals.context.session.id = "2";

			strictEqual(!log.warn, true, "error, session 1 warning, in session 2: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			log.deleteRecord("2");
			globals.context.session.id = "1";

			strictEqual(!log.warn, true, "error, deleted session 1 warning, in session 1: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			log.deleteRecord("1");
			log.addRecord("2", "warn", queue2, "1");

			strictEqual(!log.warn, false, "only session 1 warning, in session 1: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			globals.context.session.id = "2";

			strictEqual(!log.warn, true, "only session 1 warning, in session 2: warn prop");
			strictEqual(!log.error, true, "error prop");
			strictEqual(!log.fatal, true, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			log.addRecord("3", "error", queue2, "1");
			strictEqual(!log.warn, true, "only session 1 warning and session 1 error, in session 2: warn prop");
			strictEqual(!log.error, true, "error prop");
			strictEqual(!log.fatal, true, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			globals.context.session.id = "1";

			strictEqual(!log.warn, false, "only session 1 warning and session 1 error, in session 1: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			log.deleteRecord("3");
			strictEqual(!log.warn, false, "only session 1 warning and deleted session 1 error, in session 1: warn prop");
			strictEqual(!log.error, false, "error prop");
			strictEqual(!log.fatal, false, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");

			log.deleteRecord("2");
			strictEqual(!log.warn, true, "removed session dependent loggers: warn prop");
			strictEqual(!log.error, true, "error prop");
			strictEqual(!log.fatal, true, "fatal prop");
			strictEqual(!log.info, true, "info prop");
			strictEqual(!log.debug, true, "debug prop");
			//	} catch (e) {
			//		console.error(" ---" + e.stack);
		} finally {
			globals.context.session = g_session;
		}
	});

	it('addRecord/removeRecord with tenants', function() {

		var g_session = globals.context.session; // save session
		globals.context.session = {
			id: "1"
		}; //set pseudo session ID for tests


		try {
			var queue1 = [];
			queue1.put = queue1.push;

			var queue2 = [];
			queue2.put = queue2.push;

			var queue3 = [];
			queue3.put = queue3.push;

			var log = new GenLogger({
				name: "1"
			});
			// session independent loggers
			log.addRecord("1", "warn", queue1, undefined, "T1");

			leveltest("addrecord warn for T1", log, 2, 1, "T1");

			leveltest("-addrecord warn for T1", log, 2, 1, "no");

			log.addRecord("2", "error", queue2, undefined, "T2");

			leveltest("addrecord error for T2", log, 2, 1, "T1");
			leveltest("-addrecord error for T2", log, 3, 1, "T2");
			leveltest("--addrecord error for T2", log, 3, 1, "no");

			log.addRecord("3", "info", queue3, undefined, "T2");
			leveltest("addrecord info for T2", log, 2, 1, "T1");
			leveltest("-addrecord info for T2", log, 1, 1, "T2");
			leveltest("--addrecord info for T2", log, 2, 1, "no");

			log.deleteRecord("3");
			leveltest("delete record 3", log, 2, 1, "T1");
			leveltest("-delete record 3", log, 3, 1, "T2");
			leveltest("--delete record 3", log, 3, 1, "no");

			log.addRecord("3", "info", queue3, undefined, "T2");

			leveltest("addrecord again info for T2", log, 2, 1, "T1");
			leveltest("-addrecord again info for T2", log, 1, 1, "T2");
			leveltest("--addrecord again info for T2", log, 2, 1, "no");

			log.deleteRecord("2");
			leveltest("delete record 2", log, 2, 1, "T1");
			leveltest("-delete record 2", log, 1, 1, "T2");
			leveltest("--delete record 2", log, 2, 1, "no");

			log.deleteRecord("1");
			leveltest("delete record 1", log, 1, 1, "T1");
			leveltest("-delete record 1", log, 1, 1, "T2");
			leveltest("--delete record 1", log, 1, 1, "no");

			// session dependent loggers together with session independent logger of other tenant

			log.addRecord("1", "warn", queue1, "S1", "T1");

			leveltest("addrecord T1 S1 warn", log, 2, "S1", "T1");
			leveltest("-addrecord T1 S1 warn", log, 5, "S2", "T1");
			leveltest("--addrecord T1 S1 warn", log, 1, 1, "T2");
			leveltest("---addrecord T1 S1 warn", log, 5, 1, "no");

			log.addRecord("2", "error", queue2, "S2", "T1");

			leveltest("addrecord T1 S2 error", log, 2, "S1", "T1");
			leveltest("-addrecord T1 S2 error", log, 3, "S2", "T1");
			leveltest("--addrecord T1 S2 error", log, 1, 1, "T2");
			leveltest("---addrecord T1 S2 error", log, 5, 1, "no");

			log.deleteRecord("1");

			leveltest("delete record T1 S1 warn", log, 5, "S1", "T1");
			leveltest("-delete record T1 S1 warn", log, 3, "S2", "T1");
			leveltest("--delete record T1 S1 warn", log, 1, 1, "T2");
			leveltest("---delete record T1 S1 warn", log, 5, 1, "no");

			log.deleteRecord("2");

			leveltest("delete record T1 S2 error", log, 1, "S1", "T1");
			leveltest("-delete record T1 S2 error", log, 1, "S2", "T1");
			leveltest("--delete record T1 S2 error", log, 1, 1, "T2");
			leveltest("---delete record T1 S2 error", log, 1, 1, "no");
			// add and delete in different ordering
			log.addRecord("2", "error", queue2, "S3", "T1");
			leveltest("addrecord T1 S3 error", log, 3, "S3", "T1");
			leveltest("-addrecord T1 S3 error", log, 5, "S4", "T1");
			leveltest("--addrecord T1 S3 error", log, 1, 1, "T2");
			leveltest("---addrecord T1 S3 error", log, 5, 1, "no");

			log.addRecord("1", "warn", queue1, "S4", "T1");

			leveltest("addrecord T1 S4 warn", log, 3, "S3", "T1");
			leveltest("-addrecord T1 S4 warn", log, 2, "S4", "T1");
			leveltest("--addrecord T1 S4 warn", log, 1, 1, "T2");
			leveltest("---addrecord T1 S4 warn", log, 5, 1, "no");

			log.deleteRecord("2");

			leveltest("delete record T1 S3 error", log, 5, "S3", "T1");
			leveltest("-delete record T1 S3 error", log, 2, "S4", "T1");
			leveltest("--delete record T1 S3 error", log, 1, 1, "T2");
			leveltest("---delete record T1 S3 error", log, 5, 1, "no");

			log.deleteRecord("1");

			leveltest("delete record T1 S4 warn", log, 1, "S3", "T1");
			leveltest("-delete record T1 S4 warn", log, 1, "S4", "T1");
			leveltest("--delete record T1 S4 warn", log, 1, 1, "T2");
			leveltest("---delete record T1 S4 warn", log, 1, 1, "no");

			// loggers for 1 tenant

			log.addRecord("1", "debug", queue1, "S1", "T2");
			leveltest("add record T2 S1 debug", log, 0, "S1", "T2");
			leveltest("-add record T2 S1 debug", log, 1, "S2", "T2");
			leveltest("--add record T2 S1 debug", log, 1, 1, "no");

			log.addRecord("2", "error", queue1, "S2", "T2");
			leveltest("add record T2 S2 error", log, 0, "S1", "T2");
			leveltest("-add record T2 S2 error", log, 1, "S2", "T2");
			leveltest("--add record T2 S2 error", log, 1, 1, "no");

			log.deleteRecord("1");
			leveltest("delete record T2 S1 debug", log, 1, "S1", "T2");
			leveltest("-delete record T2 S1 debug", log, 1, "S2", "T2");
			leveltest("--delete record T2 S1 debug", log, 1, 1, "no");

			log.deleteRecord("2");
			leveltest("delete record T2 S2 error", log, 1, "S1", "T2");
			leveltest("-delete record T2 S2 error", log, 1, "S2", "T2");
			leveltest("--delete record T2 S2 error", log, 1, 1, "no");

			log.addRecord("1", "info", queue1, "S5", "T2");
			leveltest("add record T2 S2 info", log, 1, "S2", "T2");
			leveltest("-add record T2 S2 info", log, 1, "S5", "T2");
			leveltest("--add record T2 S2 info", log, 1, 1, "no");

			log.addRecord("2", "warn", queue2, "S6", "T1");
			leveltest("add record S6 T1 warn", log, 1, "S2", "T2");
			leveltest("-add record S6 T1 warn", log, 5, "S2", "T1");
			leveltest("--add record S6 T1 warn", log, 2, "S6", "T1");
			leveltest("---add record S6 T1 warn", log, 5, 1, "no");

			log.deleteRecord("1");
			leveltest("delete record T2 S2 info", log, 1, "S2", "T2");
			leveltest("-delete record T2 S2 info", log, 5, "S2", "T1");
			leveltest("--delete record T2 S2 info", log, 2, "S6", "T1");
			leveltest("---delete record T2 S2 info", log, 5, 1, "no");

			log.addRecord("1", "error", queue1, null, "T1");
			leveltest("add new record T1 error", log, 1, "S2", "T2");
			leveltest("-add new record T1 error", log, 3, "S2", "T1");
			leveltest("--add new record T1 error", log, 2, "S6", "T1");
			leveltest("---add new record T1 error", log, 3, 1, "no");

			log.deleteRecord("2");
			leveltest("delete record S6 T1 warn", log, 1, "S2", "T2");
			leveltest("-delete record S6 T1 warn", log, 3, "S2", "T1");
			leveltest("--delete record S6 T1 warn", log, 3, "S6", "T1");
			leveltest("---delete record S6 T1 warn", log, 3, 1, "no");

			log.deleteRecord("1");
			log.deleteRecord("3");
			leveltest("empty", log, 5, 1, "T1");
			leveltest("empty", log, 5, 1, "T2");
			leveltest("empty", log, 5, 1, "no");

			// session dependent logger and in addition a session independent logger for same tenant

			log.addRecord("1", "warn", queue1, "S7", "T1");
			leveltest("add record S7 T1 warn", log, 2, "S7", "T1");
			leveltest("-add record S7 T1 warn", log, 5, 1, "T1");

			log.addRecord("2", "debug", queue2, null, "T1");
			leveltest("add record T1 debug", log, 0, "S7", "T1");
			leveltest("-add record T1 debug", log, 0, 1, "T1");
			leveltest("--add record T1 debug", log, 0, 1, "no");

			log.deleteRecord("2");
			leveltest("delete record T1 debug", log, 2, "S7", "T1");
			leveltest("-delete record T1 debug", log, 5, 1, "T1");

			log.addRecord("2", "error", queue2, null, "T1");
			leveltest("add new record T1 error", log, 2, "S7", "T1");
			leveltest("-add new record T1 error", log, 3, 1, "T1");
			leveltest("--add new record T1 error", log, 3, 1, "no");

			log.deleteRecord("2");
			leveltest("delete record T1 error", log, 2, "S7", "T1");
			leveltest("-delete record T1 error", log, 5, 1, "T1");

			log.addRecord("2", "warn", queue2, null, "T1");
			leveltest("add new record T1 warn", log, 2, "S7", "T1");
			leveltest("-add new record T1 warn", log, 2, 1, "T1");
			leveltest("--add new record T1 warn", log, 2, 1, "no");

			log.deleteRecord("2");
			leveltest("delete record T1 warn", log, 2, "S7", "T1");
			leveltest("-delete record T1 warn", log, 5, 1, "T1");

			// session dependent logger, then session independent logger for another tenant
			log.addRecord("2", "error", queue2, null, "T4");
			leveltest("add record T4 error", log, 2, "S7", "T1");
			leveltest("-add record T4 error", log, 5, "S8", "T1");
			leveltest("--add record T4 error", log, 3, "1", "T4");
			leveltest("---add record T4 error", log, 5, 1, "no");

			log.deleteRecord("2");
			leveltest("delete record T4 error", log, 2, "S7", "T1");
			leveltest("-delete record T4 error", log, 5, 1, "T1");

			log.addRecord("2", "debug", queue2, null, "T4");
			leveltest("add record T4 debug", log, 2, "S7", "T1");
			leveltest("-add record T4 debug", log, 5, "S8", "T1");
			leveltest("--add record T4 debug", log, 0, "1", "T4");
			leveltest("---add record T4 debug", log, 5, 1, "no");

			log.deleteRecord("2");
			leveltest("delete record T4 debug", log, 2, "S7", "T1");
			leveltest("-delete record T4 debug", log, 5, 1, "T1");

			log.addRecord("2", "warn", queue2, null, "T4");
			leveltest("add record T4 warn", log, 2, "S7", "T1");
			leveltest("-add record T4 warn", log, 5, "S8", "T1");
			leveltest("--add record T4 warn", log, 2, "1", "T4");
			leveltest("---add record T4 warn", log, 5, 1, "no");

			log.deleteRecord("2");
			leveltest("delete record T4 warn", log, 2, "S7", "T1");
			leveltest("-delete record T4 warn", log, 5, 1, "T1");
			/*	
			 */
			//	} catch (e) {
			//		console.error(" ---" + e.stack);
		} finally {
			globals.context.session = g_session;
		}
	});

	it('cleanup', function() {
		delete globals.context.tenantId;
	});


	// tests whether logger allows logging from log level ilevel for given sid and tenant
	function leveltest(text, log, ilevel, sid, tenant) {
		globals.context.session.id = (sid ? sid : 0);
		globals.context.tenantId = tenant;
		for (var i = 0; i < methods.length; i++) {
			strictEqual(!log[methods[i]], i < ilevel, text + ": Session " + sid + (tenant ? "Tenant " + tenant : "") + ", " + methods[i] + " prop");
		}
	}

	/* not interesting any more
	it('implicit exchange of trace records', function(_) {
		try {
			var queue1 = [];
			queue1.put = function(data) {
				queue1.push(data);
				return true;
			};
			// mock for traceRecord
			var instance = {
				_counter: 0,
				$uuid: "5",
				auto: function(_) {
					return true;
				},
				changeNeeded: function(data) {
					// change for each second invocation
					if (this._counter++ % 2) return true;
				},
				performChange: function(_, data) { // dummy change function which just waits for 1 second
					setTimeout(_, 1000);
					return this;
				},
				q: queue1
			};

			var log = new GenLogger({
				name: "1"
			});

			var queue2 = new traceRecord.AutoQueue(queue1, instance);
			log.addRecord("1", "warn", queue2);

			strictEqual(queue1.length, 0, "Initial");
			log.warn && log.warn("M1a");
			strictEqual(queue1.length, 1, "1 message");
			log.warn && log.warn("M1ab");
			strictEqual(queue1.length, 1, "paused: 1 message");
			setTimeout(_, 600);
			strictEqual(queue1.length, 1, "paused: still 1 message");
			log.warn && log.warn("M1ac");
			log.warn && log.warn("M1ad");
			strictEqual(queue1.length, 1, "paused: still 1 message");
			setTimeout(_, 1200);
			strictEqual(queue1.length, 3, "after new queue: 3 messages");
			setTimeout(_, 500);
			strictEqual(queue1.length, 4, "after second new queue: 4 messages");



		} catch (e) {
			console.error("Error " + e.stack);
		}
	});
	*/
	/*
	it('implicit exchange of trace records with error', function(_) {
		var oldConsoleError = console.error;
		try {
			var queue1 = [];
			queue1.put = function(data) {
				queue1.push(data);
				return true;
			};
			var errorQueue = [];
			console.error = function(str) {
				errorQueue.push(str);
				oldConsoleError(str);
			};
			// mock for traceRecord
			var instance = {
				_counter: 0,
				$uuid: "5",
				auto: function(_) {
					return true;
				},
				changeNeeded: function(data) {
					// change for each second invocation
					if (this._counter++ % 2) return true;
				},
				performChange: function(_, data) { // dummy change function which just waits for 1 second
					setTimeout(_, 1000);
					throw new Error("Test error");
				},
				q: queue1
			};

			var log = new GenLogger({
				name: "1"
			});

			var queue2 = helper._makeAutoQueue(instance, queue1);
			log.addRecord("1", "warn", queue2);

			strictEqual(queue1.length, 0, "Initial");
			log.warn && log.warn("M1a");
			strictEqual(queue1.length, 1, "1 message");
			log.warn && log.warn("M1ab");
			strictEqual(queue1.length, 1, "paused: 1 message");
			setTimeout(_, 600);
			strictEqual(queue1.length, 1, "paused: still 1 message");
			strictEqual(errorQueue.length, 0, "paused: no error message");
			log.warn && log.warn("M1ac");
			log.warn && log.warn("M1ad");
			strictEqual(queue1.length, 1, "paused: still 1 message");
			strictEqual(errorQueue.length, 0, "paused: no error message");
			setTimeout(_, 1000);
			strictEqual(queue1.length, 1, "after new queue: 1 message");
			console.log(errorQueue.join("---"));
			strictEqual(errorQueue.length, 5, "after new queue: 5 error messages (2 start messages and 3 real messages)");



		} catch (e) {
			console.error("Error " + e.stack);
		} finally {
			console.error = oldConsoleError;
		}
	});
	*/
});