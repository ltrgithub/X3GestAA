"use strict";

var helpers = require('@sage/syracuse-core').helpers;
var config = require('config'); // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require('mongodb');
var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
var globals = require('streamline-runtime').globals;
// Unit test traces

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
//no integration server
config.integrationServer = null;

helpers.pageFileStorage = false;

var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_demo");

var port = 3004;


function _getModel() {
	return dataModel.make(registry.applications.syracuse.contracts.collaboration, "mongodb_demo");
}

var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});
var db;
asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets.mongodb_demo.hostname, endPoint.datasets.mongodb_demo.port, {});
	db = adminTestFixtures.newMongoDb(endPoint.datasets.mongodb_demo.database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");
	start();
});

//start syracuse server
asyncTest("initialize syracuse test server", 1, function(_) {
	require('syracuse-main/lib/syracuse').startServers(_, port);
	ok(true, "server initialized");
	start();
});



asyncTest('test automatic trace in debug ', function(_) {
	db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_demo);
	globals.context.session = {
		data: {
			userLogin: 'AP'
		},
		getUserLogin: function(_) {
			return "AP";
		},
		getSecurityProfile: function(_) {
			return null;
		}
	};

	var inst = require('syracuse-main/lib/syracuse').debugTraceRecord(_, "test1");
	// checl existance
	// create new autorecord
	var recEntity = db.getEntity(_, "traceRecord");
	var inst = db.fetchInstance(_, recEntity, {
		jsonWhere: {
			name: "Record_AP_debug_session_test1"
		}
	});
	strictEqual(inst != null, true, "instance created ok ");
	inst.configs(_) && inst.configs(_).toArray(_).forEach_(_, function(_, item) {
		item.modules(_) && item.modules(_).toArray(_).forEach_(_, function(_, subItem) {
			if (subItem.name(_) !== "factory") strictEqual(subItem.level(_) === "debug", true, "level " + subItem.name(_) + " created ok ");
		});
		strictEqual(item.level(_) === "debug", true, "instance " + item.name(_) + "created ok ");
	});

	start();
});

test("stop  tests", 0, function() {
	doStop = true;
	start();
});