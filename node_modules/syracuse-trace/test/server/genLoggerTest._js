"use strict";

var util = require('util');
var tracer; // = console.log;
var globals = require("streamline/lib/globals");
QUnit.module(module.id);

var GenLogger = require('syracuse-trace/lib/genLogger').GenLogger;
var helper = require('syracuse-trace/lib/entities/traceRecord');



test('addRecord/removeRecord', 161, function() {
	var g_session = globals.context.session; // save session
	globals.context.session = {
		id: "1"
	}; //set pseudo session ID for tests

	try {
		var queue1 = [];
		queue1.put = queue1.push;

		var queue2 = [];
		queue2.put = queue2.push;

		var queue3 = [];
		queue3.put = queue3.push;

		var log = new GenLogger({
			name: "1"
		});

		log.addRecord("1", "warn", queue1);

		strictEqual(!log.warn, false, "warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		log.debug && log.debug("M1");

		strictEqual(queue1.length, 0, "M1 No message");

		log.warn && log.warn("M1a");

		strictEqual(queue1.length, 1, "M1a 1 message");

		log.error && log.error("M2");

		strictEqual(queue1.length, 2, "M2  2 messages");

		queue1.length = 0; // clear queue

		log.addRecord("2", "info", queue2);
		log.addRecord("3", "error", queue3);

		strictEqual(!log.warn, false, "warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, false, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		log.debug && log.debug("M3");

		strictEqual(queue1.length, 0, "M3 q1 No message");
		strictEqual(queue2.length, 0, "q2 No message");
		strictEqual(queue3.length, 0, "q3 No message");

		log.info && log.info("M4");

		strictEqual(queue1.length, 0, "M4 q1 No message");
		strictEqual(queue2.length, 1, "q2 1 message");
		strictEqual(queue3.length, 0, "q3 0 message");

		log.warn && log.warn("M5");

		strictEqual(queue1.length, 1, "M5 q1 1 message");
		strictEqual(queue2.length, 2, "q2 2 messages");
		strictEqual(queue3.length, 0, "q3 0 message");

		log.error && log.error("M6");

		strictEqual(queue1.length, 2, "M6 q1 2 messages");
		strictEqual(queue2.length, 3, "q2 3 messages");
		strictEqual(queue3.length, 1, "q3 1 message");

		// reset queues
		queue1.length = queue2.length = queue3.length = 0;

		log.deleteRecord("2");

		strictEqual(!log.warn, false, "remove info: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		log.deleteRecord("3");

		strictEqual(!log.warn, false, "remove error record: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		log.deleteRecord("1");

		strictEqual(!log.warn, true, "remove last record: warn prop");
		strictEqual(!log.error, true, "error prop");
		strictEqual(!log.fatal, true, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		// session dependent records

		log.addRecord("1", "error", queue1);
		log.addRecord("2", "warn", queue2, "1");

		strictEqual(!log.warn, false, "session dependent: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		globals.context.session.id = "2";

		strictEqual(!log.warn, true, "session dependent, change session ID: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		globals.context.session.id = "1";

		log.debug && log.debug("M11");

		strictEqual(queue1.length, 0, "error: M11 No message");
		strictEqual(queue2.length, 0, "warning: M11 No message");

		log.warn && log.warn("M11a");

		strictEqual(queue1.length, 0, "error: M11a 0 message");
		strictEqual(queue2.length, 1, "warning: M11a 1 message");

		log.error && log.error("M12");

		strictEqual(queue1.length, 1, "error: M12  1 message");
		strictEqual(queue2.length, 2, "warning: M12  2 messages");

		queue1.length = 0; // clear queue
		queue2.length = 0; // clear queue

		log.deleteRecord("1");

		strictEqual(!log.warn, false, "only session dependent: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		globals.context.session.id = "2";

		strictEqual(!log.warn, true, "only session dependent warning, wrong session: warn prop");
		strictEqual(!log.error, true, "error prop");
		strictEqual(!log.fatal, true, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		log.addRecord("1", "error", queue1);

		strictEqual(!log.warn, true, "error and session dependent warning, wrong session: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		log.addRecord("3", "info", queue3);

		strictEqual(!log.warn, false, "info and session dependent warning, wrong session: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, false, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		globals.context.session.id = "1";

		strictEqual(!log.warn, false, "info and session dependent warning, correct session: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, false, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		log.deleteRecord("3");
		log.addRecord("3", "warn", queue3);

		strictEqual(!log.warn, false, "warning and session dependent warning, correct session: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		globals.context.session.id = "2";

		strictEqual(!log.warn, false, "warning and session dependent warning, wrong session: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		log.deleteRecord("3");

		strictEqual(!log.warn, true, "error and session dependent warning, wrong session: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		log.addRecord("3", "info", queue3, "2");

		strictEqual(!log.warn, false, "error, session 1 warning session 2 info, in session 2: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, false, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		globals.context.session.id = "1";

		strictEqual(!log.warn, false, "error, session 1 warning session 2 info, in session 1: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		globals.context.session.id = "3";

		strictEqual(!log.warn, true, "error, session 1 warning session 2 info, in session 3: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		log.deleteRecord("3");

		strictEqual(!log.warn, true, "error, session 1 warning, in session 3: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		globals.context.session.id = "1";

		strictEqual(!log.warn, false, "error, session 1 warning, in session 1: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		globals.context.session.id = "2";

		strictEqual(!log.warn, true, "error, session 1 warning, in session 2: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		log.deleteRecord("2");
		globals.context.session.id = "1";

		strictEqual(!log.warn, true, "error, deleted session 1 warning, in session 1: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		log.deleteRecord("1");
		log.addRecord("2", "warn", queue2, "1");

		strictEqual(!log.warn, false, "only session 1 warning, in session 1: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		globals.context.session.id = "2";

		strictEqual(!log.warn, true, "only session 1 warning, in session 2: warn prop");
		strictEqual(!log.error, true, "error prop");
		strictEqual(!log.fatal, true, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		log.addRecord("3", "error", queue2, "1");
		strictEqual(!log.warn, true, "only session 1 warning and session 1 error, in session 2: warn prop");
		strictEqual(!log.error, true, "error prop");
		strictEqual(!log.fatal, true, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		globals.context.session.id = "1";

		strictEqual(!log.warn, false, "only session 1 warning and session 1 error, in session 1: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		log.deleteRecord("3");
		strictEqual(!log.warn, false, "only session 1 warning and deleted session 1 error, in session 1: warn prop");
		strictEqual(!log.error, false, "error prop");
		strictEqual(!log.fatal, false, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");

		log.deleteRecord("2");
		strictEqual(!log.warn, true, "removed session dependent loggers: warn prop");
		strictEqual(!log.error, true, "error prop");
		strictEqual(!log.fatal, true, "fatal prop");
		strictEqual(!log.info, true, "info prop");
		strictEqual(!log.debug, true, "debug prop");
	} catch (e) {
		console.error(" ---" + e);
	} finally {
		globals.context.session = g_session;
	}
});


asyncTest("implicit exchange of trace records", 7, function(_) {
	try {
		var queue1 = [];
		queue1.put = function(data) {
			queue1.push(data);
			return true;
		};
		// mock for traceRecord
		var instance = {
			_counter: 0,
			$uuid: "5",
			auto: function(_) {
				return true;
			},
			changeNeeded: function(data) {
				// change for each second invocation
				if (this._counter++ % 2) return true;
			},
			performChange: function(_, data) { // dummy change function which just waits for 1 second
				setTimeout(~_, 1000);
				return this;
			},
			q: queue1
		};

		var log = new GenLogger({
			name: "1"
		});

		var queue2 = helper._makeAutoQueue(instance, queue1);
		log.addRecord("1", "warn", queue2);

		strictEqual(queue1.length, 0, "Initial");
		log.warn && log.warn("M1a");
		strictEqual(queue1.length, 1, "1 message");
		log.warn && log.warn("M1ab");
		strictEqual(queue1.length, 1, "paused: 1 message");
		setTimeout(~_, 600);
		strictEqual(queue1.length, 1, "paused: still 1 message");
		log.warn && log.warn("M1ac");
		log.warn && log.warn("M1ad");
		strictEqual(queue1.length, 1, "paused: still 1 message");
		setTimeout(~_, 1200);
		strictEqual(queue1.length, 3, "after new queue: 3 messages");
		setTimeout(~_, 500);
		strictEqual(queue1.length, 4, "after second new queue: 4 messages");



	} catch (e) {
		console.error("Error " + e.stack);
	}
	start();
});

asyncTest("implicit exchange of trace records with error", 9, function(_) {
	var oldConsoleError = console.error;
	try {
		var queue1 = [];
		queue1.put = function(data) {
			queue1.push(data);
			return true;
		};
		var errorQueue = [];
		console.error = function(str) {
			errorQueue.push(str);
			oldConsoleError(str);
		};
		// mock for traceRecord
		var instance = {
			_counter: 0,
			$uuid: "5",
			auto: function(_) {
				return true;
			},
			changeNeeded: function(data) {
				// change for each second invocation
				if (this._counter++ % 2) return true;
			},
			performChange: function(_, data) { // dummy change function which just waits for 1 second
				setTimeout(~_, 1000);
				throw new Error("Test error");
			},
			q: queue1
		};

		var log = new GenLogger({
			name: "1"
		});

		var queue2 = helper._makeAutoQueue(instance, queue1);
		log.addRecord("1", "warn", queue2);

		strictEqual(queue1.length, 0, "Initial");
		log.warn && log.warn("M1a");
		strictEqual(queue1.length, 1, "1 message");
		log.warn && log.warn("M1ab");
		strictEqual(queue1.length, 1, "paused: 1 message");
		setTimeout(~_, 600);
		strictEqual(queue1.length, 1, "paused: still 1 message");
		strictEqual(errorQueue.length, 0, "paused: no error message");
		log.warn && log.warn("M1ac");
		log.warn && log.warn("M1ad");
		strictEqual(queue1.length, 1, "paused: still 1 message");
		strictEqual(errorQueue.length, 0, "paused: no error message");
		setTimeout(~_, 1000);
		strictEqual(queue1.length, 1, "after new queue: 1 message");
		console.log(errorQueue.join("---"));
		strictEqual(errorQueue.length, 5, "after new queue: 5 error messages (2 start messages and 3 real messages)");



	} catch (e) {
		console.error("Error " + e.stack);
	} finally {
		console.error = oldConsoleError;
	}
	start();
});