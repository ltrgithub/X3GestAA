"use strict";

var adminHelper = require('syracuse-collaboration/lib/helpers').AdminHelper;
var traceHelper = require('syracuse-trace/lib/helper');
var ez = require('ez-streams');
var jsurl = require("jsurl");
var zlib = require('zlib');
var consoleLog = require('ez-streams').devices.console.log;
var config = require('config');
var devMode = config.system.enableDevelopmentFeatures;
var util = require('util');
var defaultCollectionName = "Trace";
var tracer1 = require("syracuse-trace/lib/helper").getTracer("test.1");
var tracer2 = require("syracuse-trace/lib/helper").getTracer("test.2");

exports.entity = {
	$canCreate: false,
	$canDelete: false,
	//$helpPage: "Administration-reference-Traces-Settings",
	$properties: {
		code: {
			$title: "Code",
			$isDefined: false,
			$isReadOnly: true,
			$type: "string"
		},
		description: {
			$title: "Description",
			$isReadOnly: true,
			$type: "string"
		},
	},
	$titleTemplate: "Traces settings",
	$valueTemplate: "Traces settings",
	$descriptionTemplate: "Traces settings",
	$relations: {
		logger: {
			$title: "Logger I/O device",
			$type: "device",
			$isDefined: function(_, instance) {
				// only for developers
				return devMode;
			}
		},
		configs: {
			$title: "Traces configuration",
			$type: "traceConfigs",
			$isChild: true,
			$inv: "traceSettings"
		}
	},
	$services: {
		test: {
			$method: "POST",
			$title: "Test",
			$execute: function(_, context, instance) {
				tracer1.info && tracer1.info("trace 1...");
				tracer2.info && tracer2.info("trace 2...");

			}
		},
		exportTrace: {
			$title: "Export traces",
			$description: "Export traces",
			$method: "GET",
			$isMethod: true,
			$type: "application/x-export",
			$isDefined: function(_, instance) {
				// only for mongodb traces
				return !devMode || (instance.logger(_) && instance.logger(_).type(_) === "mongoCollection");
			},
			$parameters: {
				$url: "{$baseUrl}/traceExportSelects/$template/$workingCopies?representation=traceExportSelect.$edit",
				$method: "POST",
				$properties: {
					parameters: {
						$type: "application/x-string"
					}
				}
			},
			$invocationMode: "async",
			$execute: function(_, context, instance) {
				var opt = context.parameters.parameters && jsurl.parse(context.parameters.parameters);
				var t = context.tracker;
				t.$diagnoses = t.$diagnoses || [];
				opt.$diagnoses = t.$diagnoses;
				opt.tracker = t;

				t.replyLink = "$download";

				//
				var collName;
				if (devMode) {
					collName = defaultCollectionName;
				} else {
					var mColl = instance.logger(_).mongoCollection(_);
					collName = mColl.charAt(0).toUpperCase() + mColl.substring(1);
				}

				var db = adminHelper.getCollaborationOrm(_).db;

				var collection = db.collection(collName, _);

				var filter = {};
				if (opt.start) {
					filter.stamp = {
						$gte: new Date(opt.start)
					};
				}
				if (opt.end) {
					filter.stamp = filter.stamp || {};
					filter.stamp.$lte = new Date(opt.end);
				}

				var cursor = collection.find(filter);
				var reader = ez.devices.mongodb.reader(cursor);
				reader = reader.transform(ez.transforms.json.formatter());
				var writer = ez.devices.string.writer();
				reader.pipe(_, writer);

				t.$links = t.$links || {};
				t.$links.$download = {
					$title: "Download",
					$url: t.location + "?reply=true",
					$method: "GET",
					$type: opt.compress ? "application/x-gzip" : "application/json",
					$filename: opt.name + (opt.compress ? ".gz" : ".json")
				};
				return writer.toString();
			}
		}
	},
	$functions: {
		storeLogger: function(_) {
			var logger = this.logger(_);
			// if development feature is disabled, the traces are stored in syracuse mongodb.
			if (!devMode) {
				var db = adminHelper.getCollaborationOrm(_).db;
				var collection = db.collection(defaultCollectionName, _);
				traceHelper.writer = ez.devices.mongodb.writer(collection);
			}
			// else we take the device configured
			else if (logger) {
				if (logger && traceHelper.writer && traceHelper.writer !== logger.writer(_))
					traceHelper.writer.write(_); // close it by writing undefined
				traceHelper.writer = logger.writer(_);
			}
			// else all traces go to console
			else {
				traceHelper.writer = consoleLog;
			}
		}
	},
	$events: {
		$beforeSave: [

			function(_, instance) {
				instance.storeLogger(_);
			}
		],
	}
};