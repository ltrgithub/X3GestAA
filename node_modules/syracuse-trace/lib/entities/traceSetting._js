"use strict";

var helpers = require("syracuse-core/lib/helpers");
var globals = require('streamline/lib/globals');
var traceHelper = require('syracuse-trace/lib/helper');
var consoleLog = require('ez-streams').devices.console.log;

var tracer1 = require("syracuse-trace/lib/helper").getTracer("test.1");
var tracer2 = require("syracuse-trace/lib/helper").getTracer("test.2");

exports.entity = {
	$canCreate: false,
	$canDelete: false,
	//$helpPage: "Administration-reference-Traces-Settings",
	$properties: {

	},
	$titleTemplate: "Traces settings",
	$valueTemplate: "Traces settings",
	$descriptionTemplate: "Traces settings",
	$relations: {
		logger: {
			$title: "Logger I/O device",
			$type: "device",
			$isDefined: function(_, instance) {
				return ((globals.context.config || {}).system || {}).enableDevelopmentFeatures || helpers.enableDeveloppementFeatures;
			}
		},
		configs: {
			$title: "Traces configuration",
			$type: "traceConfigs",
			$isChild: true,
			$inv: "traceSettings"
		}
	},
	$services: {
		test: {
			$method: "POST",
			$title: "Test",
			$execute: function(_, context, instance) {
				tracer1.info && tracer1.info("trace 1...");
				tracer2.info && tracer2.info("trace 2...");

			}
		}
	},
	$functions: {
		storeLogger: function(_) {
			try {
				var logger = this.logger(_);
				if (logger) {
					if (logger && traceHelper.writer && traceHelper.writer !== logger.writer(_))
						traceHelper.writer.write(_); // close it by writing undefined
					traceHelper.writer = logger.writer(_) || consoleLog;
				}
			} catch (e) {
				console.error("storeLogger err : " + e.stack);
				throw e;
			}

		}
	},
	$events: {
		$beforeSave: [

			function(_, instance) {
				instance.storeLogger(_);
			}
		],
	}

};