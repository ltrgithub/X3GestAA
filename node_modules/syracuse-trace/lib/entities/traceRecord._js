"use strict";

var datetime = require('syracuse-core/lib/types/datetime');
var locale = require("syracuse-core/lib/locale");
var ez = require('ez-streams');
var adminHelper = require('syracuse-collaboration/lib/helpers').AdminHelper;
var traceHelper = require('syracuse-trace/lib/helper');
var config = require('config');
var zlib = require('zlib');
var tasks = {};

var t1 = traceHelper.getTracer('test.1');
var t2 = traceHelper.getTracer('test.2');

function setRecord(_, instance) {
	function _createRecord(level) {
		var rec = {
			queue: tasks[uuid].q,
			level: traceHelper.methods.indexOf(level)
		};
		return rec;
	}
	//
	var uuid = instance.$uuid;
	instance.configs(_).toArray(_).forEach_(_, function(_, inst) {
		var name = inst.name(_);
		var conf = inst.serializeInstance(_);
		if (conf.modules) {
			conf.modules.forEach_(_, function(_, mod) {
				traceHelper.getTracer(name + "." + mod.name).records[uuid] = _createRecord(mod.level);
			});
		} else {
			traceHelper.getTracer(name).records[uuid] = _createRecord(conf.level);
		}
	});
}

function unsetRecord(_, instance) {
	function _deleteRecord(_name, _instance) {
		var tracerRecords = traceHelper.getTracer(_name).records;
		if (tracerRecords[_instance.$uuid]) {
			delete tracerRecords[_instance.$uuid];
		}
	}
	//
	instance.configs(_).toArray(_).forEach_(_, function(_, inst) {
		var name = inst.name(_);
		var conf = inst.serializeInstance(_);
		if (conf.modules) {
			conf.modules.forEach_(_, function(_, mod) {
				_deleteRecord(name + "." + mod.name, instance);
			});
		} else {
			_deleteRecord(name, instance);
		}
	});
}

exports.entity = {
	$titleTemplate: "Traces recording",
	$valueTemplate: "{description}",
	$descriptionTemplate: "Recording from {stamp}",
	$capabilities: "mailTemplate",
	$properties: {
		name: {
			$title: "Name",
			$isUnique: true,
			$isMandatory: true,
			$linksToDetails: true,
			$isReadOnly: function(_, instance) {
				return instance.status(_) !== "created";
			},
		},
		stamp: {
			$title: "Timestamp",
			$type: "datetime",
			$isReadOnly: true,
			$isNullable: true,
		},
		auto: {
			$title: "Auto start",
			$type: "boolean",
			$default: false,
			$isHidden: true,
			$isDefined: false,
			$isReadOnly: true,
		},
		pid: {
			$title: "Process ID",
			$type: "integer",
			$isReadOnly: true,
			$isNullable: true,
			$default: process.pid,
		},
		status: {
			$title: "Status",
			$enum: [{
				$title: "created",
				$value: "created",
			}, {
				$title: "running",
				$value: "running",
			}, {
				$title: "paused",
				$value: "paused",
			}, {
				$title: "complete",
				$value: "complete",
			}, {
				$title: "error",
				$value: "error",
			}],
			$default: "created",
			$isReadOnly: true,
		},
		size: {
			$title: "Size",
			$type: "integer",
			$compute: function(_, instance) {
				var recording = instance.recording(_);
				return recording.fileExists(_) ? recording.getProperties(_).length : null;
			},
		},
		recording: {
			$title: "Recording",
			$type: "binary",
			$isDisabled: false,
			$isReadOnly: true,
			$storage: "db_file",
		},
		ticket: {
			$title: "Ticket number",
			$isDisabled: function(_, instance) {
				return instance.auto(_);
			},
		},
		transcript: {
			$title: "Transcript",
			$type: "text/plain",
			$isReadOnly: true,
			$default: "",
		}
	},
	$relations: {
		configs: {
			$title: "Configurations",
			$type: "traceConfigs",
			$isChild: true,
			$isReadOnly: function(_, instance) {
				return instance.status(_) !== "created";
			},
		}
	},
	$searchIndex: {
		$fields: ["name", "stamp"]
	},
	$functions: {
		// THIS DOES NOT WORK !!!
		$canDelete: function(_) {
			console.log("CAN DELETE?");
			var self = this;
			if (this.status(_) === "complete" || this.status(_) === "error") {
				self.deleteError = "Cannot delete active record";
				return false;
			} else return true;
		},
		log: function(_, message) {
			this.transcript(_, this.transcript(_) + '\n' + datetime.now() + ' ' + message);
		},
		removeQueue: function() {
			delete tasks[this.$uuid];
		},
		startRecording: function(_) {

			if (this.status(_) !== "created") throw new Error("bad status: " + this.status(_));
			var self = this;
			// create output stream
			var writer = this.recording(_).createWritableStream(_, {
				"contentType": "application/x-trace",
				"contentEncoding": "gzip",
				"fileName": this.name(_) + ".gz",
				"append": "w+"
			});

			writer = ez.helpers.binary.writer(writer, {
				bufSize: 64000,
			});
			//

			tasks[this.$uuid] = {
				len: 0,
				ended: false
			};
			var q = tasks[this.$uuid].q = ez.devices.queue({
				max: config.system.traceQueueMax || 100000,
			});

			// Put entity name
			q.put({
				entity: "trace"
			});
			// Put ticket number
			q.put({
				ticket: this.ticket(_) || ""
			});
			setRecord(_, this);
			q.reader = q.reader.transform(ez.transforms.json.formatter());
			q.reader = q.reader.map(ez.mappers.convert.bufferify());
			q.reader = q.reader.nodeTransform(zlib.createGzip());

			var isAuto = this.auto(_);
			//			var maxSize = (config && config.traces && config.traces.maxSize) || "100m";
			//			maxSize = computeSize(maxSize);
			var maxSize = 1024000; // TEMPORARY WAITING FOR computeSize METHOD
			if (isAuto) {
				q.reader = q.reader.map(function(_, r) {
					tasks[self.$uuid].len += r.length;
					if (tasks[self.$uuid].len > maxSize) {
						if (!tasks[self.$uuid].ended) {
							tasks[self.$uuid].ended = true;
							self.stopRecording(_);
						}
					}
					return r;
				});
			}
			//q.reader.pipe(!_, writer);
			q.reader.pipe(_ >> function(err) {
				if (err) {
					console.error(err.stack);
					q = null;
				}
				unsetRecord(function(err) {
					if (err) console.error(err.stack);
				}, self);
				self.removeQueue();
				q = null;
				if (isAuto) {
					// Launch another auto record
					traceHelper.launchAutoTraceRecord(function(err) {
						if (err) console.error(err.stack);
					});
				}
			}, writer);

			// update status and save
			this.status(_, "running");
			this.log(_, "recording started");
			this.save(_);
		},
		finishRecording: function(_, err) {
			err && console.error(err.stack);
			if (tasks[this.$uuid] && tasks[this.$uuid].q) {
				tasks[this.$uuid].q.write(_);

			} else {
				//TODO: MUST FIND A WAY TO REPAIR CHUNKS WITH INSERTING EOF				
			}

			this.status(_, err ? "error" : "complete");
			if (err) {
				this.log(_, locale.format(module, "recordFailed", err.message));
			} else {
				this.log(_, locale.format(module, "recordCompleted"));
			}
			this.save(_);
		},
		stopRecording: function(_, err) {
			try {

			} catch (e) {
				console.error("ERR: " + e.stack);
				err = e;
			}
			this.finishRecording(_, err);
		},
		pauseRecording: function(_) {
			if (this.status(_) !== "running") throw new Error("bad status: " + this.status(_));
			this.status(_, "paused");
			this.log(_, locale.format(module, "recordPaused"));
			this.save(_);
		},
		resumeRecording: function(_) {
			if (this.status(_) !== "paused") throw new Error("bad status: " + this.status(_));
			this.status(_, "running");
			this.log(_, locale.format(module, "recordResumed"));
			this.save(_);
		},
	},
	$services: {
		test: {
			$title: "Test",
			$description: "Test",
			$method: "POST",
			$isMethod: true,
			$execute: function(_, context, instance) {
				t1.info && t1.info("test 1 info");
				t1.debug && t1.debug("test 1 debug");
				t1.warn && t1.warn("test 1 warn");
				t1.error && t1.error("test 1 error");
				t2.info && t2.info("test 2 info");
				t2.debug && t2.debug("test 2 debug");
				t2.warn && t2.warn("test 2 warn");
				t2.error && t2.error("test 2 error");
			},
		},
		start: {
			$title: "Start",
			$description: "Start recording",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return instance.status(_) !== "created";
			},
			$execute: function(_, context, instance) {
				instance.startRecording(_);
			},
		},
		stop: {
			$title: "Stop",
			$description: "Stop recording",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return instance.status(_) !== "running";
			},
			$execute: function(_, context, instance) {
				instance.stopRecording(_);
			},
		},
		pause: {
			$title: "Pause",
			$description: "Pause recording",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return instance.status(_) !== "running";
			},
			$execute: function(_, context, instance) {
				instance.pauseRecording(_);
			},
		},
		resume: {
			$title: "Resume",
			$description: "Resume recording",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return instance.status(_) !== "paused";
			},
			$execute: function(_, context, instance) {
				instance.resumeRecording(_);
			},
		},
	},
	$init: function(_, instance) {
		// Every new instance will take default configuration from the only one traceSetting instance
		instance.stamp(_, datetime.now());
		var db = adminHelper.getCollaborationOrm(_);
		var settings = db.fetchInstances(_, db.model.getEntity(_, "traceSetting"))[0];
		var confs = settings && settings.configs(_);
		confs.toArray(_).forEach_(_, function(_, c) {
			instance.configs(_).set(_, c);
		});
	},
	$defaultOrder: [
		["stamp", false]
	]
};