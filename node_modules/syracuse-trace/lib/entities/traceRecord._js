"use strict";

var globals = require("streamline/lib/globals");
var datetime = require('syracuse-core/lib/types/datetime');
var locale = require("syracuse-core/lib/locale");
var coreHelpers = require('syracuse-core/lib/helpers');
var ez = require('ez-streams');
var adminHelper = require('syracuse-collaboration/lib/helpers').AdminHelper;
var traceHelper = require('syracuse-trace/lib/helper');
var config = require('config');
var mock = require('syracuse-load/lib/mock');
var zlib = require('zlib');
var queues = {};
var devMode = config && config.system && config.system.enableDevelopmentFeatures;
var t1 = traceHelper.getTracer('test.1');
var t2 = traceHelper.getTracer('test.2');
var util = require('util');
var hostname = require('os').hostname();

// fetch traceRecord instance by $uuid
function _fetchRecord(_, uuid) {
	var db = adminHelper.getCollaborationOrm(_);
	var instance = db.fetchInstance(_, db.model.getEntity(_, "traceRecord"), {
		jsonWhere: {
			$uuid: uuid
		}
	});
	return instance;
}

// change configuration of a tracer
function configChange(sequence, queue, newConfig) {
	var oldConfig = queue.levels;
	var messages = [];
	for (var key in oldConfig) {
		var oldLevel = oldConfig[key];
		var newLevel = newConfig[key];
		if (oldLevel !== newLevel) {
			var tracer0 = traceHelper.getTracer(key);
			tracer0.deleteRecord(sequence);
			if (newLevel) {
				tracer0.addRecord(sequence, newLevel, queue, queue.sid);
				try {
					oldLevel = locale.format(module, oldLevel);
					newLevel = locale.format(module, newLevel);
				} catch (e) {
					console.error("Error localizing log levels " + e);
				}
				messages.push(locale.format(module, "levelChange", key, oldLevel, newLevel));
			} else {
				messages.push(locale.format(module, "removeLogging", key));
			}
		}
	}
	for (var key in newConfig) {
		if (!(key in oldConfig)) {
			var newLevel = newConfig[key];
			traceHelper.getTracer(key).addRecord(sequence, newLevel, queue, queue.sid);
			try {
				newLevel = locale.format(module, newLevel);
			} catch (e) {
				console.error("Error localizing log levels " + e);
			}
			messages.push(locale.format(module, "addLogging", key, newLevel));
		}
	}
	queue.levels = newConfig;
	return messages;
}

// put all module names and log levels to a simple object
function _grabLogLevels(serialized) {
	var result = {};
	serialized.configs.forEach(function(conf) {
		var name = conf.name;
		if (conf.modularized) {
			conf.modules.forEach(function(mod) {
				result[name + "." + mod.name] = mod.level;
			});
		} else {
			result[name] = conf.level;
		}
	});
	return result;
}

//close session specific trace records
exports.removeSessionTracers = function(_, sid) {
	// console.error("SID "+sid)
	Object.keys(queues).forEach_(_, function(_, key) {
		var queue = queues[key];
		if (queue.sid === sid) {
			var uuid = queue.uuid;
			var instance = _fetchRecord(_, uuid);
			try {
				stopInternal(_, key, instance);
			} catch (e) {
				console.error("ERR " + e.stack);
			}
		}
	});
};

exports.entity = {
	$titleTemplate: "Traces recording",
	$valueTemplate: "{description}",
	$descriptionTemplate: "Recording from {stamp}",
	$capabilities: "mailTemplate",
	$uniqueConstraints: [
		["name", "host", "pid"]
	],

	$properties: {
		name: {
			$title: "Name",
			$isMandatory: true,
			$linksToDetails: true,
			$isReadOnly: function(_, instance) {
				return instance.status(_) !== "created";
			},
		},
		stamp: {
			$title: "Timestamp",
			$type: "datetime",
			$isReadOnly: true,
			$isNullable: true,
		},
		auto: {
			$title: "Auto start",
			$type: "boolean",
			$default: false,
			$isHidden: true,
			$isDefined: false,
			$isReadOnly: true,
		},
		sequence: {
			$title: "Sequence number",
			$isHidden: true,
			$isReadOnly: true
		},
		change: {
			$title: "Change",
			$type: "boolean",
			$compute: function(_, instance) {
				var status;
				return (instance.hostname(_) === hostname && instance.pid(_) === process.pid && (status = instance.status(_)) !== "complete" && status !== "error");
			}
		},
		hostname: {
			$title: "Host name",
			$isReadOnly: true,
			$default: hostname
		},
		pid: {
			$title: "Process ID",
			$type: "integer",
			$isReadOnly: true,
			$isNullable: true,
			$default: process.pid,
		},
		onlySid: {
			$title: "Only my session",
			$type: "boolean",
			$default: false,
			$isReadOnly: function(_, instance) {
				return !instance.$created;
			},
		},
		status: {
			$title: "Status",
			$enum: [{
				$title: "created",
				$value: "created",
			}, {
				$title: "running",
				$value: "running",
			}, {
				$title: "paused",
				$value: "paused",
			}, {
				$title: "complete",
				$value: "complete",
			}, {
				$title: "error",
				$value: "error",
			}],
			$default: "created",
			$isReadOnly: true,
		},
		ticket: {
			$title: "Ticket number",
			$isDisabled: function(_, instance) {
				return instance.auto(_);
			},
			$isReadOnly: function(_, instance) {
				return !instance.$created;
			},
		},
		transcript: {
			$title: "Transcript",
			$type: "text/plain",
			$isReadOnly: true,
			$default: "",
		}
	},
	$relations: {
		contents: {
			$title: "Binaries",
			$type: "traceContents",
			$isChild: true,
			$capabilities: "sort"
		},
		configs: {
			$title: "Configurations",
			$type: "traceConfigs",
			$isChild: true,
			$isReadOnly: function(_, instance) {
				return instance.auto(_);
			},
			$capabilities: "sort"
		}
	},
	$searchIndex: {
		$fields: ["name", "stamp"]
	},
	$functions: {
		// THIS DOES NOT WORK !!!
		$canDelete: function(_) {
			console.log("CAN DELETE?");
			var self = this;
			if (this.status(_) === "complete" || this.status(_) === "error") {
				self.deleteError = "Cannot delete active record";
				return false;
			} else return true;
		},
		log: function(_, message) {
			this.transcript(_, this.transcript(_) + '\n' + datetime.now() + ' ' + message);
		},
		// return a writer
		startNewContent: function(_, index, maxFiles) {
			var recs = this.contents(_);
			var child;
			if (!maxFiles) { // for initialisation
				index = 0;
				maxFiles = 2;
			}
			if (index < maxFiles) {
				// add a new child
				child = recs.add(_);
			} else {
				// re-use 
				child = recs.toArray(_)[index % maxFiles];
				child.recording(_).deleteFile(_);
			}
			if (index > 0) this.log(_, locale.format(module, "newContent", index));
			child.name(_, this.name(_));
			child.status(_, "created");
			var timestamp = datetime.now().toString();
			child.start(_, timestamp);
			// create output stream
			var writer = child.recording(_).createWritableStream(_, {
				"contentType": "application/x-trace",
				"contentEncoding": "gzip",
				"fileName": "Auto_record_content_" + timestamp + "_" + hostname + "-" + process.pid + ".gz",
				"append": "w+"
			});
			this.save(_);
			var diags = [];
			this.getAllDiagnoses(diags);
			return writer;
		},
		startRecording: function(_) {
			_startRecording(_, this, "mockServer" in config);
		},
		errorStopped: function(_, err) {
			this.status(_, "error");
			this.log(_, err);
			this.save(_);
		},
	},
	$services: {
		test: {
			$title: "Test",
			$description: "Test",
			$method: "POST",
			$isMethod: true,
			$isHidden: function(_, instance) {
				return !devMode;
			},
			$execute: function(_, context, instance) {
				testInternal(_, instance.sequence(_));
			},
		},
		testAll: {
			$title: "Test all",
			$description: "Test",
			$method: "POST",
			$isMethod: true,
			$isHidden: function(_, instance) {
				return !devMode;
			},
			$execute: function(_, context, instance) {
				testInternal(_, instance);
				if (!instance.onlySid(_)) console.log("test rec: " + _propagate(_, "POST", "test?seq=" + instance.sequence(_)));
			},
		},
		start: {
			$title: "Start",
			$description: "Start recording",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return !instance.change(_) || instance.$created || instance.status(_) !== "created";
			},
			$execute: function(_, context, instance) {
				instance.startRecording(_);
				// propagate changes only for session independent loggers
				if (!instance.onlySid(_)) console.log("start rec: " + _propagate(_, "POST", "start?uuid=" + instance.$uuid));
			},
		},
		stop: {
			$title: "Stop",
			$description: "Stop recording",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return !instance.change(_) || instance.status(_) === "created";
			},
			$execute: function(_, context, instance) {
				// propagate changes only for session independent loggers
				if (!instance.onlySid(_)) console.log("stop rec: " + _propagate(_, "POST", "stop?seq=" + instance.sequence(_))); // stop other instances first
				stopInternal(_, instance.sequence(_), instance);
			},
		},
		pause: {
			$title: "Pause",
			$description: "Pause recording",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return !instance.change(_) || instance.$created || instance.status(_) !== "running";
			},
			$execute: function(_, context, instance) {
				// propagate changes only for session independent loggers
				if (!instance.onlySid(_)) console.log("pause rec: " + _propagate(_, "POST", "pause?seq=" + instance.sequence(_))); // pause other instances first
				pauseInternal(_, instance.sequence(_), instance);
			},
		},
		resume: {
			$title: "Resume",
			$description: "Resume recording",
			$method: "POST",
			$isMethod: true,
			$isDisabled: function(_, instance) {
				return !instance.change(_) || instance.$created || instance.status(_) !== "paused";
			},
			$execute: function(_, context, instance) {
				resumeInternal(_, instance.sequence(_), instance);
				// propagate changes only for session independent loggers
				if (!instance.onlySid(_)) console.log("resume rec: " + _propagate(_, "POST", "resume?seq=" + instance.sequence(_)));
			},
		},
	},
	$init: function(_, instance) {
		// Every new instance will take default configuration from the only one traceSetting instance
		instance.stamp(_, datetime.now());
		initConfig(_, instance);
	},
	$defaultOrder: [
		["stamp", false]
	],
	$events: {
		$beforeSave: [

			function(_, instance) {
				var status = instance.status(_);
				if (status === "running" || status === "paused") {
					var queue = queues[instance.sequence(_)];
					if (!_updateInstance(_, queue, instance)) instance._noPropagate = true;
				}
			}
		],
		$afterSave: [

			function(_, instance) {
				var status = instance.status(_);
				if (!instance._noPropagate && (status === "running" || status === "paused") && !instance.onlySid(_)) {
					console.log("change rec: " + _propagate(_, "POST", "change?seq=" + instance.sequence(_) + "&uuid=" + instance.$uuid));
				}
			}
		]

	}
};


// update queue with new trace settings and log them in instance unless 'notLog' is set
function _updateInstance(_, queue, instance, notLog) {
	var serialized = instance.serializeInstance(_);
	var newConfig = _grabLogLevels(serialized);
	var sequence = instance.sequence(_);
	var changes = configChange(sequence, queues[sequence], newConfig);
	if (!notLog) {
		for (var i = 0; i < changes.length; i++)
			instance.log(_, changes[i]);
	}
	return changes.length;
}

// set configuration from global configuration (for auto logger)
function initConfig(_, instance) {
	var db = adminHelper.getCollaborationOrm(_);
	var settings = db.fetchInstances(_, db.model.getEntity(_, "traceSetting"))[0];
	var confs = settings && settings.configs(_);
	confs.toArray(_).forEach_(_, function(_, c) {
		instance.configs(_).set(_, c);
	});
}

// make and register a queue, notify the loggers 
function _startRecording(_, instance, cluster) {
	if (instance.status(_) !== "created") throw new Error("bad status: " + instance.status(_));

	// set a sequence number if it does not exist yet	
	var isAuto = instance.auto(_);
	var sequence = instance.sequence(_);
	if (!sequence) {
		sequence = isAuto ? "auto" : instance.$uuid;
		instance.sequence(_, sequence);
	}
	var serialized = instance.serializeInstance(_);
	var writer = instance.startNewContent(_);
	var queue = traceHelper.makeQueue(_, writer, instance.ticket(_));
	// wrap queue for autorecords to enable transparent change of underlying queue
	if (isAuto) queue = new AutoQueue(queue, serialized);
	else {
		queue = new NormalQueue(queue, serialized);
	}
	queues[sequence] = queue;
	// update status and save
	instance.status(_, "running");
	instance.log(_, locale.format(module, "recordStarted"));
	instance._noPropagate = true;
	instance.save(_);
	setRecord(sequence);
}

function setRecord(uuid) {
	var queue = queues[uuid];
	if (!queue) throw new Error("Invalid sequence number" + uuid + " " + Object.keys(queues).join(","));
	for (var key in queue.levels) {
		traceHelper.getTracer(key).addRecord(uuid, queue.levels[key], queue, queue.sid);
	}
	return queue;
}

function unsetRecord(uuid) {
	var queue = queues[uuid];
	if (!queue) throw new Error("Invalid sequence number");
	for (var key in queue.levels) {
		traceHelper.getTracer(key).deleteRecord(uuid);
	}
	return queue;
}


exports.Tracer = coreHelpers.defineClass(function(id, description, abrev) {
	this.config = {};
	this.id = id;
	this.description = description;
	this.abrev = abrev;
	this.traces = {};
	this.enabled = false;
}, null, {
	openTrace: function(_, type) {
		return this.traces[type];
	},
});

var NormalQueue = coreHelpers.defineClass(function(queue, serialized) {
	this.queue = queue;
	this.uuid = serialized.$uuid;
	this.levels = _grabLogLevels(serialized);
	this.sid = serialized.onlySid ? globals.context.session && globals.context.session.id : null;
}, null, {
	put: function(data) {
		return this.queue.put(data);
	},
	finish: function(_, instance) {
		var child = instance.contents(_).toArray(_)[0];
		try {
			this.queue.write(_);
			child.status(_, "complete");
		} catch (e) {
			console.error("Error during normal queue finish " + e);
			child.status(_, "error");
		}
		instance._noPropagate = true;
		instance.save(_);
	}
});


var AutoQueue = coreHelpers.defineClass(function(queue, serialized) {
	this.size = 0; // current size of binary output stream
	this.maxSize = (config && config.traces && config.traces.maxSize) || "100m";
	this.maxSize = traceHelper.computeSize(this.maxSize); // maximal size per binary output stream
	this.index = 0; // index of binary output stream.
	this.maxFiles = (config && config.traces && config.traces.maxFiles) || 10; // number of binary output streams
	this.currentDay = (new Date().toISOString()).substr(0, 10); // current date string (for date comparison)
	this.requestChange = false; // autorecord has been closed, so that new autorecord has to be started
	this.requestChangeCallback = []; // callbacks for this function
	this.temp = undefined; // temporary cache
	this.queue = queue; // current queue
	this.uuid = serialized.$uuid; // uuid of current traceRecord instance
	this.levels = _grabLogLevels(serialized);
	this.sequence = serialized.sequence;
	this.sid = serialized.onlySid ? globals.context.session && globals.context.session.id : null;
	this.errorOccurred = undefined; // change of queue failed: log to console.error
}, null, {
	// not complete implementation: just write to finish queue
	// instance: take this instance of traceRecord
	finish: function(_, instance) {
		var child = instance.contents(_).toArray(_)[this.index % this.maxFiles];
		try {
			this.queue.write(_);
			if (child) child.status(_, "complete");
		} catch (e) {
			if (child) child.status(_, "error");
			else console.error("Error during queue close " + e);
		}
		instance.save(_);
	},
	// change the child instance (when newDate is empty) or the trace record
	performChange: function(_, newDate, oldInstance) {
		var self = this;
		var newInstance;
		try {
			if (!oldInstance) {
				oldInstance = _fetchRecord(_, self.uuid);
			}
			if (newDate) {
				self.index = 0;
				var sequence = self.sequence;
				stopInternal(_, sequence, oldInstance, true) // last parameter "true" is very important here!!;
				var db = adminHelper.getCollaborationOrm(_);
				// create new autorecord
				var db = adminHelper.getCollaborationOrm(_);
				var recEntity = db.model.getEntity(_, "traceRecord");
				newInstance = recEntity.createInstance(_, db, null);

				var _name = "Auto_Record_" + newDate;

				newInstance.name(_, _name);
				newInstance.auto(_, true);
				newInstance.sequence(_, sequence);
				_updateInstance(_, self, newInstance, true); // change queue but 
				newInstance.log(_, locale.format(module, "recordStarted"));
				newInstance.status(_, "running");
				newInstance.save(_);
				self.uuid = newInstance.$uuid;
			} else {
				// change child
				self.finish(_, oldInstance); // finish current queue
				oldInstance.configs(_).reset(_);
				initConfig(_, oldInstance);
				_updateInstance(_, self, oldInstance);
				self.index++;
			}
			var writer = (newInstance || oldInstance).startNewContent(_, self.index, self.maxFiles);
			// replace the queue
			self.queue = traceHelper.makeQueue(_, writer, (newInstance || oldInstance).ticket(_));
			var temp1 = self.temp;
			this.temp = undefined;
			if (temp1.length) {
				var item = temp1.shift();
				if (!self.queue.put(item)) { // put first item directly into queue to avoid check for change of queue (and infinite loops...)
					console.error(JSON.stringify(item));
				}
				// put other items into queue via normal mechanism so that further changes can be triggered
				temp1.forEach(function(item) {
					if (!self.put(item)) {
						console.error(JSON.stringify(item));
					}
				});
			}
		} catch (e) {
			console.error("Error during change " + e.stack);
			// only log to console!
			self.errorOccurred = true;
			self.temp.forEach(function(item) {
				console.error(JSON.stringify(item));
			});
			self.temp = undefined;
			// mark old and new instance as error
			if (newInstance) {
				newInstance.status(_, "error");
				newInstance.log(_, locale.format(module, "errorChange", e));
				newInstance.save(_);
			} else {
				oldInstance.status(_, "error");
				oldInstance.log(_, locale.format(module, "errorChange", e));
				oldInstance.save(_);
			}
		} finally {
			self.requestChange = false; // request change has been finished
			// execute request change callback (from waitForChange) to inform about successful change
			while (self.requestChangeCallback.length) {
				var tempCallback = self.requestChangeCallback.shift();
				process.nextTick(function() {
					return tempCallback();
				});
			}
		}
	},
	// force a change of the underlying trace record
	notify: function(instance) {
		if (!this.temp && !this.errorOccurred) { // trigger a chance of the underlying trace queue unless it is already being changed or it has change error
			this.requestChange = true;
			this.temp = []; // start temporary cache at once
			this.performChange(!_, null, instance);
		}
	},
	// wait until the instance has been finished whose change has been forced by notify
	waitForChange: function(callback) {
		if (this.requestChange) {
			this.requestChangeCallback.push(callback);
		} else return callback();
	},
	// queue function
	put: function(data) {
		var self = this;
		if (self.temp) { // just put in temporary cache if there is already a cache
			self.temp.push(data);
			return true;
		}
		if (this.errorOccurred) {
			console.error(JSON.stringify(data));
			return true;
		}
		// new day?
		if (data && data.stamp && data.stamp.substr(0, 10) !== this.currentDay) {
			this.currentDay = data.stamp.substr(0, 10);
			if (!this.temp) this.temp = [data]; // start temporary cache at once
			this.performChange(!_, this.currentDay); // switch to new day
			return true;
		}
		// max size exceeded?
		this.size = +JSON.stringify(data).length;
		if (this.size > this.maxSize) {
			if (!this.temp) this.temp = [data]; // start temporary cache at once
			this.performChange(!_);
			return true;
		}
		// normal logging!
		return this.queue.put(data);
	}
});

//copy log configurations from 'instance' to 'copy'
function _copyConfig(_, copy, instance) {
	copy.configs(_).reset(_);
	instance.configs(_).toArray(_).forEach_(_, function(_, conf) {
		var confCopy = copy.configs(_).add(_);
		confCopy.name(_, conf.name(_));
		if (conf.modularized(_)) {
			confCopy.modularized(_, true);
			conf.modules(_).toArray(_).forEach_(_, function(_, mod) {
				var modCopy = confCopy.modules(_).add(_);
				modCopy.level(_, mod.level(_));
				modCopy.name(_, mod.name(_));
			});
		} else {
			confCopy.level(_, conf.level(_));
		}
	});
}


// functions for cluster
// special start function which duplicates the instance
function startInternal(_, uuid) {
	// obtain traceRecord
	var instance = _fetchRecord(_, uuid);
	if (!instance) throw new Error("Wrong uuid " + uuid);
	var db = adminHelper.getCollaborationOrm(_);
	var recEntity = db.model.getEntity(_, "traceRecord");
	var copy = recEntity.createInstance(_, db, null);
	// copy all configurations
	_copyConfig(_, copy, instance);
	copy.sequence(_, instance.sequence(_));
	copy.ticket(_, instance.ticket(_));
	copy.name(_, instance.name(_));
	_startRecording(_, copy, true);
}

function pauseInternal(_, sequence, instance) {
	var queue = unsetRecord(sequence);
	if (instance.status(_) !== "running") throw new Error("bad status: " + instance.status(_));
	instance.status(_, "paused");
	instance.log(_, locale.format(module, "recordPaused"));
	instance.save(_);
}

function resumeInternal(_, sequence, instance) {
	var queue = setRecord(sequence);
	if (instance.status(_) !== "paused") throw new Error("bad status: " + instance.status(_));
	instance.status(_, "running");
	instance.log(_, locale.format(module, "recordResumed"));
	instance.save(_);
}

function changeInternal(_, sequence, instance) {
	var queue = queues[sequence];
	if (!queue) throw new Error("Invalid sequence " + sequence);
	var copy = _fetchRecord(_, queue.uuid);
	_copyConfig(_, copy, instance);
	_updateInstance(_, queue, copy);
	copy._noPropagate = true;
	copy.save(_);
}


// stopping the logging
function stopInternal(_, sequence, instance, noUnset) {
	var queue = queues[sequence];
	if (!queue) return;
	// stop of autorecord reloads global configuration and starts a new child
	if (!noUnset && instance.auto(_)) {
		// must do the change of queues implicitly in order to avoid race conditions:
		// a new day or a new child may be started at the same time as the user stops the autorecord. 
		queue.notify(instance); // trigger change of internal queue
		queue.waitForChange(~_); // wait until autorecord has changed internally
		return;
	}

	var status = instance.status(_);
	if (status !== "error" && status !== "complete") {
		if (!noUnset) unsetRecord(sequence);
		try {
			queue.finish(_, instance); // finish the queue

			instance.status(_, "complete");
			instance.log(_, locale.format(module, "recordCompleted"));
		} catch (e) {
			instance.status(_, "error");
			instance.log(_, "Error " + e);
		}
		instance.save(_);
		var diags = [];
		instance.getAllDiagnoses(_, diags);
		if (!noUnset) delete queues[sequence];
	}
}


//this function will be executed on all nodes of a cluster when the traceRecord is resumed
function testInternal(_) {
	t1.info && t1.info("test 1 info");
	t1.debug && t1.debug("test 1 debug");
	t1.warn && t1.warn("test 1 warn");
	t1.error && t1.error("test 1 error", new Error("Error T1"));
	t2.info && t2.info("test 2 info");
	t2.debug && t2.debug("test 2 debug");
	t2.warn && t2.warn("test 2 warn");
	t2.error && t2.error("test 2 error", new Error("Error T2"));
};

var internals = {

	'test': testInternal,
	'pause': pauseInternal,
	'resume': resumeInternal,
	'stop': stopInternal,
	'start': startInternal,
	'change': changeInternal
};
// 
exports.handleChange = function(_, action, sequence, uuid) {
	var fun = internals[action];
	if (!fun) throw new Error("Invalid action");
	if (uuid) {
		var instance = _fetchRecord(_, uuid);
		if (!sequence) sequence = instance.sequence(_);
	} else {
		var queue = queues[sequence];
		if (!queue) throw new Error("Non existing queue " + sequence);
		var instance = _fetchRecord(_, queue.uuid);
	}
	if (!instance) throw new Error("No instance for uuid " + uuid);
	fun(_, sequence, instance);
};


function _propagate(_, method, path) { // propagation only when load balancer is available!
	if ("mockServer" in config) {
		var options = {
			path: "/nannyCommand/notifyAll/logging/" + path,
			method: method,
			hostname: "",
			port: 0,
			headers: {
				host: (globals.context.tenantId || "")
			}
		};
		options.headers[mock.BALANCER_HEADER] = config.port;
		try {
			return config.mockServer.mockClient.simpleRequest(options, "", _);
		} catch (e) {
			console.error("Error " + e.stack);
			return e.stack;
		}
	}
}