"use strict";

var traceHelper = require('syracuse-trace/lib/helper');
var adminHelper = require('syracuse-collaboration/lib/helpers').AdminHelper;
var genLogger = require('syracuse-trace/lib/genLogger').genLogger;

var sessionConfigs = {};

function genDefSessionConfig(sid, name) {
	var t = traceHelper.getTracer(name);
	var c = {
		name: name,
		sid: sid
	};
	if (t.modules) {
		c.modules = [];
		Object.keys(t.modules).forEach(function(mName) {
			c.modules.push({
				name: mName
			});
		});
	}
	return c;
}

var getSessionConfig = function(sid, name) {
	if (sessionConfigs[sid] && sessionConfigs[sid][name]) {
		return sessionConfigs[sid][name];
	}
	if (sid && !sessionConfigs[sid]) {
		getSessionConfigs(sid);
	}
	sessionConfigs[sid][name] = genDefSessionConfig(sid, name);
	return sessionConfigs[sid][name];
};

var getSessionConfigs = function(sid) {
	//
	if (sessionConfigs[sid]) return sessionConfigs[sid];
	sessionConfigs[sid] = {};
	Object.keys(traceHelper.tracers).forEach(function(tName) {
		sessionConfigs[sid][tName] = getSessionConfig(sid, tName);
	});
	return sessionConfigs[sid];
};


var loadSessionConfig = function(_, inst) {
	function loadSessionTracer(tName, mod) {
		var tracer = traceHelper.getTracer(tName + (mod ? "." + mod.name : ""));
		if (!tracer.sessions[sid]) {
			tracer.sessions[sid] = new genLogger({
				name: tName,
				sid: sid
			});
		}
		tracer.sessions[sid]._loadConfig(sessionConfigs[sid][name], mod);
	}
	//
	var sid = inst.sid(_);
	var name = inst.name(_);
	if (sessionConfigs[sid]) {
		sessionConfigs[sid][name] = inst.serializeInstance(_);
	}
	if (sessionConfigs[sid][name].modules) {
		sessionConfigs[sid][name].modules.forEach_(_, function(_, mod) {
			loadSessionTracer(name, mod);
		});
	} else {
		loadSessionTracer(name);
	}
};

function createInstance(_, c) {
	var db = adminHelper.getCollaborationOrm(_);
	var entity = db.model.getEntity(_, "traceSessionConfig");
	var modEntity = db.model.getEntity(_, "traceConfigModule");
	var inst = entity.createInstance(_, db, null);
	inst.name(_, c.name);
	inst.sid(_, c.sid);
	c.description && inst.description(_, c.description);
	c.enabled && inst.enabled(_, c.enabled);
	c.modularized && inst.modularized(_, c.modularized);
	c.level && inst.level(_, c.level);
	c.description && inst.description(_, c.description);

	if (c.modules) {
		c.modules.forEach_(_, function(_, m) {
			var mod = modEntity.createInstance(_, db, null);
			mod.name(_, m.name);
			m.description && mod.description(_, m.description);
			m.enabled && mod.enabled(_, m.enabled);
			m.level && mod.level(_, m.level);
			inst.modules(_).set(_, mod);
		});
	}
	return inst;
}

exports.entity = {
	$titleTemplate: "Session traces configuration for '{description}'",
	$descriptionTemplate: "Configure {name} session traces",
	$valueTemplate: "{name}",
	$isPersistent: false,
	$autoRecreateWorkingCopy: true,
	$canDelete: false,
	$canCreate: false,
	$key: "{name}",
	$properties: {
		name: {
			$isUnique: true,
			$linksToDetails: true,
			$title: "Name",
			$isReadOnly: true,
			$type: "string"
		},
		description: {
			$linksToDetails: false,
			$displayLength: 30,
			$title: "Description",
			$isReadOnly: true,
			$type: "string",
			$isLocalized: true
		},
		enabled: {
			$title: "Enabled",
			$type: "boolean",
			$default: false
		},
		modularized: {
			$type: "boolean",
			$default: false,
			$isDefined: function(_, instance) {
				return false;
			},
			$compute: function(_, instance) {
				return instance.modules(_).getLength() > 0;
			}
		},
		level: {
			$title: "Tracing level",
			$isDefined: function(_, instance) {
				return instance.enabled(_) && !instance.modularized(_);
			},
			$enum: [{
				$value: "error",
				$title: "Error"
			}, {
				$value: "warning",
				$title: "Warning"
			}, {
				$value: "info",
				$title: "Info"
			}, {
				$value: "debug",
				$title: "Debug"
			}],
			$default: "info"
		},
		sid: {
			$title: "Session id",
			$isReadOnly: true
		}
	},
	$relations: {
		modules: {
			$title: "Modules",
			$type: "traceConfigModules",
			$isReadOnly: true,
			$isChild: true,
			$inv: "traceConfigs",
			$isDefined: function(_, instance) {
				return instance.enabled(_) && instance.modularized(_);
			}
		}
	},
	$fetchInstances: function(_, context) {
		var list = [];
		var sid = context.httpSession.id;
		var configs = getSessionConfigs(sid);

		Object.keys(configs).forEach_(_, function(_, name) {
			var inst = createInstance(_, configs[name]);
			list.push(inst);
		});
		return list;
	},
	$functions: {
		$setId: function(_, context, id) {
			var sid = context.httpSession.id;
			var config = getSessionConfig(sid, id);
			var inst = createInstance(_, config);
			var self = this;
			this.name(_, inst.name(_));
			this.sid(_, inst.sid(_));
			this.description(_, inst.description(_));
			this.enabled(_, inst.enabled(_));
			this.modularized(_, inst.modularized(_));
			inst.modules(_).toArray(_).forEach_(_, function(_, m) {
				self.modules(_).set(_, m);
			});

		},
		$save: function(_) {
			loadSessionConfig(_, this);
		}
	},

};