"use strict";
/// !doc
///
/// # Storage area logging  
/// 
var locale = require("syracuse-core/lib/locale");
var helpers = require('syracuse-core/lib/helpers');
var sa = require('syracuse-orm/lib/storageArea');
var sys = require('util');
var datetime = require('syracuse-core/lib/types/datetime');
var defLogger = require('syracuse-trace/lib/defLogger').defLogger;

// Standard callback replace _ callback to be able to use this transport in not streamlined functions
var cb = function(err, result) {
	if (err) throw err;
	return result;
};

exports.saLogger = helpers.defineClass(function(name, expiry) {
	this.name = name;
	this.expiry = expiry || 120;
	this.log = null;
	this.properties = {
		description: " traces (" + this.name + ")",
		content: {
			contentType: "text/plain",
			append: true,
			fileName: ""
		}
	};
	this.filter = {
		jsonWhere: {
			fileName: ""
		}
	};
	this.type = "storagearea";
}, defLogger, {
	_getLogFileName: function() {
		var today = new Date();
		var yr = today.getYear();
		var mo = today.getMonth();
		var dy = today.getDay();
		var logFileName = "Trace_" + this.name + "_" + yr + "_" + mo + "_" + dy;
		return logFileName;
	},
	initialise: function() {
		if (!this.log) {
			var fName = this._getLogFileName();
			this.log = {};

			// The simple fact that the file name has altered will cause a new
			// entry to be created in the storage area.
			this.properties.content.fileName = fName;
			this.filter.jsonWhere.fileName = fName;
			this.log.dd = sa.open(cb, this.filter, null, "serverLog");
			if (!this.log.dd) {
				// console.log("Failed to open the serverLog file by fileName");
				this.log.dd = sa.open(cb, null, null, "serverLog");
			} else {
				console.log("Opened - " + this.log.dd);
			}
			if (!this.log.instance) {
				this.log.instance = sa.getDocumentInstanceByDD(cb, this.log.dd);
				this.log.instance.warnDiags(cb, [locale.format(module, "traceOpened")]);
			}

			sa.write(cb, this.log.dd, this.properties, "=== " + this.name + " Trace Initialised ===\n", true);
			// Expires according to the parameter
			// Need to change this so that we expire according to the number of
			// days in the cycle
			// var dateExpire = new Date((new Date()).getTime() + this.expiry * 60 * 1000);
			// this.log.properties.expiration = datetime.fromJsDate(dateExpire);
		}
		return this.log;
	},
	preprocess: function(data) {},
	_doTrace: function(t, data) {
		try {
			if (t.dd) {
				sa.write(cb, t.dd, this.properties, data.output + "\n", true);
			} else {
				console.log("Storage area still initialising");
				//console.log(data.output);
			}
		} catch (e) {
			console.error("Error in trace: " + e.stack);
			throw e;
		}
	},
	trace: function(data) {
		this._doTrace(this.initialise(), data);
	},
	close: function() {
		if (this.log) {
			this.log.instance.warnDiags(cb, []);
			this.log.instance.infoDiags(cb, [locale.format(module, "traceClosed")]);
			sa.close(cb, this.log.dd, true);
			this.log = null;
		}
	},
	toJSON: function() {
		return this.type;
	}
});