"use strict";
/// !doc
///
/// # Storage area logging  
/// 
var locale = require("syracuse-core/lib/locale");
var helpers = require('syracuse-core/lib/helpers');
var sa = require('syracuse-orm/lib/storageArea');
var datetime = require('syracuse-core/lib/types/datetime');
var defLogger = require('syracuse-trace/lib/defLogger').defLogger;

// Standard callback replace _ callback to be able to use this transport in not streamlined functions
var cb = function(err, result) {
	if (err) throw err;
	return result;
};

exports.saLogger = helpers.defineClass(function(name, expiry) {
	this.name = name;
	this.expiry = expiry || 120;
	this.log = null;
	this.type = "storagearea";
}, defLogger, {
	initialise: function() {
		var self = this;
		if (!self.log) {
			self.log = {};
			self.log.properties = {
				description: " traces (" + this.name + ")",
				content: {
					contentType: "text/plain",
					fileName: "Trace_" + this.name
				}
			};
			self.log.dd = sa.open(cb, null, null, "serverLog");
			if (!self.log.instance) {
				self.log.instance = sa.getDocumentInstanceByDD(cb, self.log.dd);
				self.log.instance.warnDiags(cb, [locale.format(module, "traceOpened")]);
			}
			// Expires according to the parameter
			var dateExpire = new Date((new Date()).getTime() + this.expiry * 60 * 1000);
			self.log.properties.expiration = datetime.fromJsDate(dateExpire);
		}
		return self.log;
	},
	preprocess: function(data) {},
	trace: function(data) {
		try {
			var self = this;
			var t = self.log;
			if (!t) {
				t = self.initialise();
			}
			if (t) {
				sa.write(cb, t.dd, t.properties, (new Date()).toISOString() + "\t" + data.output + "\n", true);
			}
		} catch (e) {
			console.error("e: " + e.stack);
			throw e;
		}
	},
	close: function() {
		var self = this;
		if (self.log) {
			self.log.instance.warnDiags(cb, []);
			self.log.instance.infoDiags(cb, [locale.format(module, "traceClosed")]);
			sa.close(cb, self.log.dd, true);
			delete this.log;
		}
	},
	toJSON: function() {
		return this.type;
	}
});