"use strict";

var locale = require("syracuse-core/lib/locale");
var helpers = require('syracuse-core/lib/helpers');
var sa = require('syracuse-orm/lib/storageArea');
var datetime = require('syracuse-core/lib/types/datetime');
var Console = require('syracuse-trace/lib/devices/console').Console;

// internal traces
var _tracer; // = console.log;



exports.Storagearea = helpers.defineClass(function(options) {
	this.name = options && options.name;

	this.filename = null;
	this.properties = {
		description: "Traces [" + this.name + "]",
		content: {
			contentType: "text/plain",
			append: true,
			fileName: ""
		}
	};
	this.filter = {
		jsonWhere: {
			fileName: ""
		}
	};
	this.type = "storagearea";
	this.dd = null;

	this.sid = options && options.sid;
	this.expiry = options && options.expiry;
}, Console, {
	_computeFileName: function() {

		var d = new Date();
		var date = d.getDate();
		var month = d.getMonth() + 1; //Months are zero based
		var year = d.getFullYear();
		this.fileName = "Trace_" + this.name + "_" + year + "-" + month + "-" + date;
		if (this.sid) {
			this.fileName += "_" + this.sid;
			this.properties.description = "Session " + this.properties.description;
		}

	},
	initialise: function(_) {
		this._computeFileName();
		if (this.dd && this.properties && this.properties.content && this.properties.content.fileName !== this.fileName) {
			this.close();
		}
		// Set file name
		this.properties.content.fileName = this.fileName;

		// for sessions
		if (this.sid) {
			this.properties.sid = this.sid;
		}
		if (this.expiry) {
			var dateExpire = new Date((new Date()).getTime() + this.expiry * 60 * 1000);
			this.properties.expiration = datetime.fromJsDate(dateExpire);
		}
		//

		this.dd = sa.open(_, {
			jsonWhere: {
				fileName: this.fileName
			}
		}, null, "serverLog");
		if (!this.dd) {
			_tracer && _tracer("File [ " + this.fileName + "] doesn't exists. So create a new one...");
			try {
				this.dd = sa.open(_, null, null, "serverLog");
			} catch (e) {
				console.error(e.stack);
				throw e;
			}
		} else {
			_tracer && _tracer("File [ " + this.fileName + "] found and reused : " + this.dd);
		}
		if (!this.instance) {
			this.instance = sa.getDocumentInstanceByDD(_, this.dd);
			this.instance.warnDiags(_, [locale.format(module, "traceOpened")]);
		}

		_tracer && _tracer("Initialised - " + this.dd);
		sa.write(_, this.dd, this.properties, "=== Trace Initialised ===\n", true);


		// Expires according to the parameter
		// Need to change this so that we expire according to the number of
		// days in the cycle
		// var dateExpire = new Date((new Date()).getTime() + this.expiry * 60 * 1000);
		// self.log.properties.expiration = datetime.fromJsDate(dateExpire);
	},
	write: function(_, data, withoutRetry) {
		try {
			if (!this.dd) {
				this.initialise();
			}
			sa.write(_, this.dd, this.properties, data.output + "\n", true);
		} catch (e) {
			console.error("Error in trace: " + e.stack);
			if (!withoutRetry) {
				this.initialise();
				this.write(_, data);
			}
		}
	},
	close: function(_) {
		_tracer && _tracer("Close sa transport");
		if (this.dd && this.instance) {
			sa.write(_, this.dd, this.properties, "=== Trace Closed ===\n", true);
			this.instance.warnDiags(_, []);
			this.instance.infoDiags(_, [locale.format(module, "traceClosed")]);
			sa.close(_, this.dd, true);
			this.dd = null;
			this.instance = null;
		}
	}
});