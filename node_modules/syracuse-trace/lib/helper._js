"use strict";

/// !doc
///
/// # Logging/tracing helper function  
///
/// Create a logger with default or existing configuration, making it simple for the applications to
/// specify the correct logger without having to know anything about
/// the options involved.

var adminHelper = require('syracuse-collaboration/lib/helpers').AdminHelper;
var genLogger = require('syracuse-trace/lib/genLogger').genLogger;

var tracers = {};

// called by each modules that use traces
var getTracer = exports.getTracer = function(name, description) {
	tracers[name] = tracers[name] || new genLogger({
		name: name,
		description: description
	});
	return tracers[name];
};

// called by syracuse module in initAsync function
exports.instanciateTracers = function(_) {
	Object.keys(tracers).forEach_(_, function(_, name) {
		var config = _getTracerConfig(_, tracers[name]);
		var tracerName, moduleName;
		if (name.indexOf('.') !== -1) {
			var parts = name.split('.');
			tracerName = parts[0];
			moduleName = parts[1];
		} else {
			tracerName = name;
		}
		loadTracerConfig(_, config, tracerName, moduleName);
	});
};

var loadTracerConfig = exports.loadTracerConfig = function(_, conf, name, mod) {
	var tracer = getTracer(name + (mod ? "." + mod : ""));
	if (tracer) {
		tracer._loadConfig(conf.serializeInstance(_), mod);
	}
};

var _getTracerConfig = function(_, tracer) {
	var config = _setConfig(_, tracer.logType, tracer.logTitle);
	return config;
};

function _getConfig(_, name) {
	var db = adminHelper.getCollaborationOrm(_);
	var inst = db.fetchInstance(_, db.model.getEntity(_, "traceConfig"), {
		sdataWhere: "name eq '" + name + "'"
	});
	return inst ? inst : null;
}

function _setConfig(_, name, description) {
	var db = adminHelper.getCollaborationOrm(_);
	var entity = db.model.getEntity(_, "traceConfig");
	var modEntity = db.model.getEntity(_, "traceConfigModule");

	var tracerName, moduleName, mustSave = false;
	if (name.indexOf('.') !== -1) {
		var parts = name.split('.');
		tracerName = parts[0];
		moduleName = parts[1];
	} else {
		tracerName = name;
	}
	var config = _getConfig(_, tracerName);

	// If no configuration exists, create a default one
	if (!config) {
		config = entity.createInstance(_, db, null);
		config.name(_, tracerName);
		config.description(_, description);
		mustSave = true;

	}
	if (moduleName) {
		if (!config.modules(_).toArray(_).some_(_, function(_, mod) {
			return mod.name(_) === moduleName;
		})) {
			var mod = modEntity.createInstance(_, db, null);
			mod.name(_, moduleName);
			config.modules(_).set(_, mod);
			mustSave = true;
		}
	}
	if (mustSave) config.save(_);
	return config;
}