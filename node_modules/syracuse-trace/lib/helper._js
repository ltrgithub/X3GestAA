"use strict";

/// !doc
///
/// # Logging/tracing helper function  
///
/// Create a logger with default or existing configuration, making it simple for the applications to
/// specify the correct logger without having to know anything about
/// the options involved.

var adminHelper = require('syracuse-collaboration/lib/helpers').AdminHelper;
var genLogger = require('syracuse-trace/lib/genLogger').genLogger;

var tracers = {};

// called by each modules that use traces
exports.getTracer = function(name, description) {
	tracers[name] = tracers[name] || {
		description: description
	};
	return tracers[name];
};

// called by syracuse module in initAsync function
exports.instanciateTracers = function(_) {
	Object.keys(tracers).forEach_(_, function(_, name) {
		tracers[name].trace = _getTracer(_, name, tracers[name].description || "");
	});
};

exports.getTracersConfig = function(_) {
	var filter = Object.keys(tracers).map(function(name) {
		return "'" + name + "'";
	}).join(',');
	var db = adminHelper.getCollaborationOrm(_);
	return db.fetchInstances(_, db.model.getEntity(_, "traceConfig"), {
		sdataWhere: "name in (" + filter + ")"
	});
};

var _getTracer = function(_, name, description) {
	try {
		var config = getConfig(_, name);
		// If no configuration exists, create a default one
		if (!config) {
			config = registerConfig(_, name, description);
		}
		return new genLogger(name, config.serializeInstance(_));
	} catch (e) {
		console.error(e.stack);
	}
};

function getConfig(_, name) {
	var db = adminHelper.getCollaborationOrm(_);
	var inst = db.fetchInstance(_, db.model.getEntity(_, "traceConfig"), {
		sdataWhere: "name eq '" + name + "'"
	});
	return inst ? inst : null;
}

function registerConfig(_, name, description) {
	var db = adminHelper.getCollaborationOrm(_);
	var entity = db.model.getEntity(_, "traceConfig");
	var inst = entity.createInstance(_, db, null);
	inst.name(_, name);
	inst.description(_, description);
	inst.save(_);
	return inst;
}