"use strict";
/// !doc
///
/// # Storage area logging  
/// 
var locale = require("syracuse-core/lib/locale");
var helpers = require('syracuse-core/lib/helpers');
var sa = require('syracuse-orm/lib/storageArea');
var datetime = require('syracuse-core/lib/types/datetime');
var defLogger = require('syracuse-trace/lib/defLogger').defLogger;


exports.saLogger = helpers.defineClass(function(logType, expiry) {
	this.logType = logType;
	this.expiry = expiry || 120;
	this.log = null;
}, defLogger, {
	initialise: function(_) {
		var self = this;
		if (!self.log) {
			self.log = {};
			self.log.properties = {
				description: " traces (" + this.logType + ")",
				content: {
					contentType: "text/plain",
					fileName: "Trace_" + this.logType
				}
			};
			self.log.dd = sa.open(_, null, null, "serverLog");
			if (!self.log.instance) {
				self.log.instance = sa.getDocumentInstanceByDD(_, self.log.dd);
				self.log.instance.warnDiags(_, [locale.format(module, "traceOpened")]);
			}
			// Expires according to the parameter
			var dateExpire = new Date((new Date()).getTime() + this.expiry * 60 * 1000);
			self.log.properties.expiration = datetime.fromJsDate(dateExpire);
		}
		return self.log;
	},
	preprocess: function(_, data) {},
	trace: function(_, data) {
		var self = this;
		var t = self.log;
		if (!t) {
			t = self.initialise(_);
		}
		if (t) {
			sa.write(_, t.dd, t.properties, (new Date()).toISOString() + "\t" + data.output + "\n", true);
		}
	},
	close: function(_) {
		var self = this;
		if (self.log) {
			self.log.instance.warnDiags(_, []);
			self.log.instance.infoDiags(_, [locale.format(module, "traceClosed")]);
			sa.close(_, self.log.dd, true);
			delete this.log;
		}
	}
});