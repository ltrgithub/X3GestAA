"use strict";

var util = require('util'),
	jsxml = require('jsxml'),
	streams = require('streamline/lib/streams/server/streams');




exports.create = function(_, options) {
	
	
	options = options != null ? options : {};
	
	var debug = options.debug != null ? options.debug : false;
	var debugType = options.debugType != null ? options.debugType : 'xml';
	var proxy = options.proxy;
	var auth = options.auth;
	var params = options.params;

	function log(prefix, value, type){
		if (debug){
			console.log("------------------------");
			if (type == 'xml'){
				console.log("- "+prefix+" = " + value);
			}else if (type == 'json'){
				var jsonValue = jsxml.parse(value);
				console.log("- "+prefix+" = " + JSON.stringify(jsonValue,null,2));
			}else{
				console.log("- "+prefix+" = " + util.inspect(value));
			}
		}
	}
	
	function genUrl(url){
		function genParams(){
			var x = '';
			if (params != null){
				if (url.indexOf('?') != -1){
					x += '&';
				} else {
					x += '?';
				}
				x += Object.keys(params).map(function(val, id){
					var res = '';
					if (id != 0){
						res += '&';
					}
					res += val + '=' + params[val];
					return res;
				}).join('');
			}
			return x;
		}
		
		if (url.indexOf('http') != 0){
			var protocol = options.protocol != null ? options.protocol + "://" : "http://";
			var host;
			if (options.host != null){
				host = options.host;
			}else{
				 throw new Error("request error: no host specified");
			}
			url = protocol + host + url + genParams();
		}else{
			url = url + genParams();
		}
		
		return url;
	}
	
	function execHttpRequest(_, method, url, data){
		
		function genEntry(payload){
			return '<?xml version="1.0" encoding="utf-8"?><entry xmlns:sdata="http://schemas.sage.com/sdata/2008/1">'+payload+'</entry>';
		}
		
		var opt = {
				method: method,
				url: genUrl(url) ,
				headers: {
					'Authorization': auth,
					'content-type': "application/atom+xml;type=entry"
				}
		}
		if (proxy != null){
			opt.proxy = proxy;
		}

		var request = streams.httpRequest(opt);
		if (method == 'POST' || method == 'PUT'){
			//console.log('data='+data);
			request.write(_,genEntry(data));
		}

		var resp = request.end().response(_);
		resp.setEncoding("utf8");
		var content = resp.readAll(_);
		
		log("Request method" , opt.method);
		log("Request url", opt.url);
		log("Request header", opt.headers);
		log("Status Code", resp.statusCode);
		log("Header", resp.headers);
		log("Content", content, debugType);

		return {
			statusCode: resp.statusCode,
			header: resp.headers,
			content: content
		}
	}

	function get(_, url){
		return execHttpRequest(_, 'GET', url);
	}
	
	function post(_, url, data){
		return execHttpRequest(_, 'POST', url, data);
	}
	
	function put(_, url, data){
		return execHttpRequest(_, 'PUT', url, data);
	}
	
	function del(_, url){
		return execHttpRequest(_, 'DELETE', url);
	}
	
	return {
		get: get,
		post: post,
		put: put,
		del: del
	}

}

