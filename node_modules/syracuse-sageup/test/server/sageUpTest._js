"use strict";

var fs = require('fs'),
	util = require('util'),
	pdfUtils = require('syracuse-pdf').utils,
	pdfReader = require('syracuse-pdf').reader,
	pdfWriter = require('syracuse-pdf').writer,
	sageup = require('syracuse-sageup').sageup,
	jsxml = require('jsxml'),
	qmodule = QUnit.module;

qmodule('syracuse-sageup');


// Retrieve UBL and change ID
function genInvoice(_){
	
	var ublFile = __dirname + '/../../data/attachments/facture.xml';

	// Dump UBL Invoice
	var oldData = fs.readFile(ublFile, _);
	
	// Parse XML to JSON
	var dataJS = jsxml.parse(oldData.toString('utf8'));

	// Set new ID
	var id = "syracuse-test-" + new Date().getTime().toString();
	dataJS.Invoice['cbc:ID'] = id;

	// Stringify JSON to XML
	var data = new Buffer("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"+jsxml.stringify(dataJS,'\t'),'utf8');
	
	return {
		id: id,
		name: "facture.xml",
		description: 'ubl embedded file '+pdfUtils.formatDate(new Date()),
		data: data
	}
}

function createInvoice(_){
	
	var pdfsRef = [
	               __dirname + '/../../data/pdfs/origin.pdf',
	               __dirname + '/../../data/pdfs/syracuseForSageup.pdf'
	               ];

	var certificate = __dirname + '/../../data/crypto/certinomis/certificate.pem',
		privateKey = __dirname + '/../../data/crypto/certinomis/private.pem',
		passphrase = '000000';


	
	try {
		// Copy origin file
		var origin = pdfsRef[0];
		var pdfFile = pdfsRef[1];
		util.pump(fs.createReadStream(origin),fs.createWriteStream(pdfFile),_);

		var ubl = genInvoice(_);

		// Create PDF Reader
		var reader = pdfReader.create(_, pdfFile);
		strictEqual(reader.checkObjectsIntegrity(_),true,"Integrity objects before modifications ok");
		
		// Create PDF Writer
		var writer = pdfWriter.create(_,reader);
	
		
		var resultObj = writer.attach(_, ubl.name, ubl.description, ubl.data);
	
		var streamObj = reader.getObjStream(_,resultObj.id);
		strictEqual(streamObj.length,ubl.data.length, "stream length on first attachment ok");
		strictEqual(new Buffer(streamObj, 'utf8').toString(),new Buffer(ubl.data, 'utf8').toString(), "stream content on first attachment ok");
	
	
		var signature = writer.sign(_, certificate, privateKey, passphrase);
		strictEqual(signature.valid, true, "Signature valid ok");
	
		
		strictEqual(reader.checkObjectsIntegrity(_),true,"Integrity objects after modifications ok");
	
		
		var bufPdf = fs.readFile(pdfFile, _);
	
		
		var code = "SageX3Premium",
			editor = "SAGE",
			version = "V1",
			onlyForArchive = "false",
			t_identifierType = "SIRET",
			t_identifierValue = "44403090200018",
			s_identifierType = "SIRET",
			s_identifierValue = "44403090200018",
			documentType = "Facture",
			dateDocument = "2012-05-16",
			format = "PdfUbl";
			
		var payloadInvoiceTest = '<sdata:payload>\
<eInvoice xmlns="http://schemas.sage.com/edi/commercial">\
<application>\
<code>'+code+'</code>\
<editor>'+editor+'</editor>\
<version>'+version+'</version>\
</application>\
<onlyForArchive>'+onlyForArchive+'</onlyForArchive>\
<transmitter>\
<identifierType>'+t_identifierType+'</identifierType>\
<identifierValue>'+t_identifierValue+'</identifierValue>\
</transmitter>\
<document>\
<supplier>\
<identifier>\
<identifierType>'+s_identifierType+'</identifierType>\
<identifierValue>'+s_identifierValue+'</identifierValue>\
</identifier>\
</supplier>\
<documentType>'+documentType+'</documentType>\
<dateDocument>'+dateDocument+'</dateDocument>\
<reference>'+ubl.id+'</reference>\
<format>'+format+'</format>\
<binary>'+bufPdf.toString('base64')+'</binary>\
</document>\
</eInvoice>\
</sdata:payload>';

		
		
		
		//Post invoice
		var resp = cli.post(_, "/sdata/edi/commercial/-/eInvoice", payloadInvoiceTest);
		
		strictEqual(resp.statusCode,201,"POST INVOICE Response status code 201 ok");
		
		
		
		return jsxml.parse(resp.content).entry.payload.eInvoice;

		
	}catch(e){
		console.error(e.stack);
		writer.rollback(_,true);
	} finally {
		writer.close(_);
	
	}
	
}

function getInvoiceById(_, id){
	var resp = cli.get(_, "/sdata/edi/commercial/-/eInvoice('"+id+"')");
	strictEqual(resp.statusCode,200,"GET INVOICE Response status code 200 ok");
	return jsxml.parse(resp.content).entry.payload.eInvoice;
}

function getInvoiceByUrl(_, url){
	var resp = cli.get(_, url);
	strictEqual(resp.statusCode,200,"GET INVOICE Response status code 200 ok");
	return jsxml.parse(resp.content).entry.payload.eInvoice;
}

function updateInvoice(_, url){
	
	
	try{

		var payloadInvoiceTest = '<sdata:payload>\
<eInvoice xmlns="http://schemas.sage.com/edi/commercial">\
<metaDatas>\
<metaData><name>'+metaName+'</name><value>'+metaValue+'</value></metaData>\
</metaDatas>\
</eInvoice>\
</sdata:payload>';

	
		//Put invoice
		var resp = cli.put(_, url, payloadInvoiceTest);
		
		strictEqual(resp.statusCode,200,"PUT INVOICE Response status code 200 ok");
		
		return jsxml.parse(resp.content).entry.payload.eInvoice;
	}catch(e){
		console.error(e.stack);
	}
}


// NON IMPLEMENTE EN V1
function deleteInvoice(_, id){
	//Delete invoice
	cli.del(_, "/sdata/edi/commercial/-/eInvoice('"+id+"')");
}

//Get invoices
function listInvoices(_){
	cli.get(_, "/sdata/edi/commercial/-/eInvoices");

}

//Get companies
function getCompanies(_){
	cli.get(_, "/sdata/edi/commercial/-/eCompanies");
}

//Get company 78973447
function getCompany(_, id){
	cli.get(_, "/sdata/edi/commercial/-/eCompany('"+id+"')");
}

//Get schema
function getSchema(_){
	cli.get(_, "/sdata/edi/commercial/-/$schema");
}




//-----------------------------------------------------------------
//BEGIN TEST
//-----------------------------------------------------------------
// SData Client Options
var proxyServerHost = "ecvmdevprod2";
var proxyServerPort = "80";
var host = "test-ediw.sage.fr";

var auth = sageup.getAuthentication("141795","testsagex3user1@sage.com","SIRET","44403090200018","supplier");
var options = {
		proxy: "http://"+proxyServerHost+":"+proxyServerPort,
		host: host,
		auth: auth,
		debug: false,
		debugType: "json",
		params: {
			returnDelta: true
		}
}

var cli,
	metaName = 'test',
	metaValue = 'HelloWorld';



asyncTest('invoices', 13, function(_){
	cli = sageup.create(_, options);
	var invoice = createInvoice(_);
	var key = invoice.$['sdata:key'];
	
	
	invoice = getInvoiceById(_,key)
	var url1 = invoice.$['sdata:url'];
	
	deepEqual(invoice.metaDatas,{},"Empty metadata ok");
	deepEqual(invoice.metaDatas,{},"Empty metadata ok");
	
	invoice = updateInvoice(_, url1);
	var url2 = invoice.$['sdata:url'];
	
	invoice = getInvoiceByUrl(_,url2);
	
	strictEqual(invoice.metaDatas.metaData.name,metaName,"Metadata name ok");
	strictEqual(invoice.metaDatas.metaData.value,metaValue,"Metadata value ok");

	start();
});



//-----------------------------------------------------------------
//END TEST
//-----------------------------------------------------------------




