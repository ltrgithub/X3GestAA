"use strict";


//var adminTestFixtures = require("syracuse-collaboration/test/fixtures/adminTestFixtures");
//var endPoint = adminTestFixtures.modifyCollaborationEndpoint("mongodb_admin_test");
//
//var syracuse = require('syracuse-main/lib/syracuse'),
//	fs = require('streamline-fs'),
//	util = require('util'),
//	streams = require("streamline/lib/streams/server/streams"),
//	sageup = require('syracuse-sageup').sageup,
//	sa = require('syracuse-orm/lib/storageArea'),
//	jsxml = require('jsxml'),
//	helpers = require('syracuse-core/lib/helpers'),
//	globals = require('streamline/lib/globals'),
//	adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
//	
//globals.context = globals.context || {};
//globals.context.session = {
//	id: helpers.uuid.generate(),
//	getUserLogin: function(_) { return "guest" },
//	getUserProfile: function(_) { 
//		
//		return {
//			user: function(_){
//				// getting the administration ORM
//				var db = adminHelper.getCollaborationOrm(_);
//				
//				// the metamodel is associated to the orm
//				var model = db.model;
//				
//				var entity = db.model.getEntity(_, "user");
//				// fetchInstance(callback, entity, filter)
//				return db.fetchInstance(_, entity, {jsonWhere:{login: "guest"}});
//				
//			}
//		}
//	},
//	getSecurityProfile : function(_) {
//		return null;
//	},
//	getData : function(code) {
//		return null;
//	}
//}


var doStop = false;
QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			//syracuse.server.close();
			setTimeout(function() {
				process.kill(process.pid);
			}, 100)
		}
	}
});

//Retrieve UBL and change ID
function genInvoice(_){
	
	var ublFile = __dirname + '/../../data/attachments/facture.xml';

	// Dump UBL Invoice
	var oldData = fs.readFile(ublFile, _);
	
	// Parse XML to JSON
	var dataJS = jsxml.parse(oldData.toString('utf8'));

	// Set new ID
	var id = "syracuse-test-" + new Date().getTime().toString();
	dataJS.Invoice['cbc:ID'] = id;

	// Stringify JSON to XML
	var data = new Buffer("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"+jsxml.stringify(dataJS,'\t'),'utf8');
	
	return {
		id: id,
		data: data
	}
	
}

function storePdfDocument(_, options, fname){
	var dd = sa.open(_, null);

	var astream = new streams.ReadableStream(fs.createReadStream(fname));
	
	var buf;
	while (buf = astream.read(_,10000)){
		sa.write(_, dd, options, buf);
	}
	var document = sa.close(_, dd);
	checkDocument(_, document, options);
	return document.$uuid;
}

function storeUblDocument(_, options, data){
	var document = sa.writeAll(_, options, data);
	checkDocument(_, document, options);
	return document.$uuid;
}

function checkDocument(_, document, options){
	var props = document.content(_).getProperties(_);
	strictEqual(document.$uuid != null, true,"uuid ok");
	strictEqual(options.description,document.description(_),"description ["+document.description(_)+"] ok");
	strictEqual(options.content.contentType,props.contentType,"contentType ["+props.contentType+"] ok");
	strictEqual(options.content.fileName,props.fileName,"fileName ["+props.fileName+"] ok");
	strictEqual(props.uploadDate != null,true,"uploadDate ["+props.uploadDate+"] ok");
	strictEqual(props.chunkSize != null,true,"chunkSize ["+props.chunkSize+"] ok");
}

function createInvoice(_){
	
	var pdfDoc = {
			file : __dirname + '/../../data/pdfs/origin.pdf',
			options : {
				description: "PDF for SageUp",
				content: {
					contentType: "application/pdf",
					fileName: "test.pdf",
				}
			}
	}
	var ublDoc = {
			options : {
				description: "UBL for SageUp",
				content: {
					contentType: "text/xml",
					fileName: "facture.xml",
				}
			}
	}

	//try {
		
		var ubl = genInvoice(_);

		var code = "SageX3Premium",
			editor = "SAGE",
			version = "V1",
			onlyForArchive = "false",
			t_identifierType = "SIRET",
			t_identifierValue = "44403090200018",
			s_identifierType = "SIRET",
			s_identifierValue = "44403090200018",
			documentType = "Facture",
			dateDocument = "2012-05-16",
			format = "PdfUbl";
			
		var payloadInvoiceTest = '<sdata:payload>\
<ns0:eInvoice xmlns="http://schemas.sage.com/edi/commercialsupplier" xmlns:ns0="http://schemas.sage.com/edi/shared/common1" xmlns:ns1="http://schemas.sage.com/edi/shared/common2">\
<ns0:application>\
<ns0:code>'+code+'</ns0:code>\
<ns0:editor>'+editor+'</ns0:editor>\
<ns0:version>'+version+'</ns0:version>\
</ns0:application>\
<ns0:onlyForArchive>'+onlyForArchive+'</ns0:onlyForArchive>\
<ns0:transmitter>\
<ns1:identifierType>'+t_identifierType+'</ns1:identifierType>\
<ns1:identifierValue>'+t_identifierValue+'</ns1:identifierValue>\
</ns0:transmitter>\
<ns0:document>\
<ns0:supplier>\
<ns1:identifier>\
<ns1:identifierType>'+s_identifierType+'</ns1:identifierType>\
<ns1:identifierValue>'+s_identifierValue+'</ns1:identifierValue>\
</ns1:identifier>\
</ns0:supplier>\
<ns0:documentType>'+documentType+'</ns0:documentType>\
<ns0:dateDocument>'+dateDocument+'</ns0:dateDocument>\
<ns0:reference>'+ubl.id+'</ns0:reference>\
<ns0:format>'+format+'</ns0:format>\
<ns0:binary></ns0:binary>\
</ns0:document>\
</ns0:eInvoice>\
</sdata:payload>';

		
		
		var options = {
				host : "test-ediw.sage.fr",
				url : "/sdata/edi/commercialsupplier/78973447/eInvoice",
				method : "POST",
				auth : {
						emailSso : "testsagex3user1@sage.com",
				},
				sdata : {
					format : "xml",
					payload : payloadInvoiceTest
				},
				binaries : {
					pdf : storePdfDocument(_, pdfDoc.options, pdfDoc.file),
					ubl : storeUblDocument(_, ublDoc.options, ubl.data)
				}
		}
		var resp = sageup.sendToEDI(_, options);
		strictEqual(resp.statusCode,201,"POST INVOICE Response status code 201 ok");
		return jsxml.parse(resp.body).entry.payload.eInvoice;
		
		
		
	//}catch(e){
	//	console.error(e.stack);
	//} 
	
}


function getInvoiceById(_, id){
	
	var options = {
			host : "test-ediw.sage.fr",
			url : "/sdata/edi/commercialsupplier/78973447/eInvoice('"+id+"')",
			method : "GET",
			auth : {
					emailSso : "testsagex3user1@sage.com",
			}
	}
	var resp = sageup.sendToEDI(_, options);
	strictEqual(resp.statusCode,200,"GET INVOICE Response status code 200 ok");
	return jsxml.parse(resp.body).entry.payload.eInvoice;
}

function getInvoiceByUrl(_, url){
	var options = {
			host : "test-ediw.sage.fr",
			url : url,
			method : "GET",
			auth : {
					emailSso : "testsagex3user1@sage.com",
			}
	}
	var resp = sageup.sendToEDI(_, options);
	strictEqual(resp.statusCode,200,"GET INVOICE Response status code 200 ok");
	return jsxml.parse(resp.body).entry.payload.eInvoice;
}

function updateInvoice(_, id){
	
	
	try{

		var payloadInvoiceTest = '<sdata:payload>\
<ns0:eInvoice xmlns="http://schemas.sage.com/edi/commercialsupplier" xmlns:ns0="http://schemas.sage.com/edi/shared/common1" xmlns:ns1="http://schemas.sage.com/edi/shared/common2">\
<ns0:metaDatas>\
<ns0:metaData><ns0:name>'+metaName+'</ns0:name><ns0:value>'+metaValue+'</ns0:value></ns0:metaData>\
</ns0:metaDatas>\
</ns0:eInvoice>\
</sdata:payload>';

	
		
		var options = {
				host : "test-ediw.sage.fr",
				url : "/sdata/edi/commercialsupplier/78973447/eInvoice('"+id+"')",
				method : "PUT",
				sdata : {
					format : "xml",
					payload : payloadInvoiceTest
				},
				auth : {
						emailSso : "testsagex3user1@sage.com",
				}
		}
		var resp = sageup.sendToEDI(_, options);
		strictEqual(resp.statusCode,200,"PUT INVOICE Response status code 200 ok");
		return jsxml.parse(resp.body).entry.payload.eInvoice;

	}catch(e){
		console.error(e.stack);
	}
}


// NON IMPLEMENTE EN V1
function deleteInvoice(_, id){
	//Delete invoice
	var options = {
			host : "test-ediw.sage.fr",
			url : "/sdata/edi/commercialsupplier/78973447/eInvoice('"+id+"')",
			method : "DELETE",
			auth : {
					emailSso : "testsagex3user1@sage.com",
			}
	}
	return sageup.sendToEDI(_, options);
}

//Get invoices
function listInvoices(_){
	var options = {
			host : "test-ediw.sage.fr",
			url : "/sdata/edi/commercialsupplier/78973447/eInvoices",
			method : "GET",
			auth : {
					emailSso : "testsagex3user1@sage.com",
			}
	}
	return sageup.sendToEDI(_, options);
}

//Get companies
function getCompanies(_){
	var options = {
			host : "test-ediw.sage.fr",
			url :  "/sdata/edi/commercialsupplier/78973447/eCompanies",
			method : "GET",
			auth : {
					emailSso : "testsagex3user1@sage.com",
			}
	}
	return sageup.sendToEDI(_, options);
}

//Get company 78973447
function getCompany(_, id){
	var options = {
			host : "test-ediw.sage.fr",
			url :  "/sdata/edi/commercialsupplier/78973447/eCompany('"+id+"')",
			method : "GET",
			auth : {
					emailSso : "testsagex3user1@sage.com",
			}
	}
	return sageup.sendToEDI(_, options);
}

//Get schema
function getSchema(_){
	var options = {
			host : "test-ediw.sage.fr",
			url :  "/sdata/edi/commercialsupplier/78973447/$schema",
			method : "GET",
			auth : {
					emailSso : "testsagex3user1@sage.com",
			}
	}
	return sageup.sendToEDI(_, options);
}


var metaName = 'test',
	metaValue = 'HelloWorld';


asyncTest('TEST DISABLED', function(_){
	strictEqual(true,true,"TEST DISABLED");
	start();
});
//asyncTest('invoices', 18, function(_){
//	
//	var invoice = createInvoice(_);
//	var key = invoice.$properties['sdata:key'];
//	
//	
//	invoice = getInvoiceById(_,key);
//	var key2 = invoice.$properties['sdata:key'];
//	
//	deepEqual(invoice.metaDatas,{},"Empty metadata ok");
//	deepEqual(invoice.metaDatas,{},"Empty metadata ok");
//	
//	invoice = updateInvoice(_, key);
//	var key3 = invoice.$properties['sdata:key'];
//	
//	invoice = getInvoiceById(_,key3);
////	console.log("metadatas="+JSON.stringify(invoice.metaDatas,null,2));
////	strictEqual(invoice.metaDatas.metaData.name,metaName,"Metadata name ok");
////	strictEqual(invoice.metaDatas.metaData.value,metaValue,"Metadata value ok");
//
//	start();
//});

asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});