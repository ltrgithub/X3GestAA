"use strict"

var globals = require('streamline/lib/globals');
var helpers = require("syracuse-core/lib/helpers");
var pool = require("syracuse-x3/lib/pool");
var filterHelpers = require("./filters");
var Factory = require("syracuse-orm/lib/factory");

var _entities = {};

function _makeEntity(_, handle, entityName, facet) {
	// fetch prototype
	var client = handle._client;
	var pr = client.jsonSend(_, {
		head: {
			headers: {}, // TODO
			method: "GET",
			url: handle._baseUrl + "/$prototypes('" + entityName + "." + (facet || "$details") + "')"
		},
		body: {}
	});
	if(!pr || !pr.body || !pr.body.$) return null;
	// convert to entity
	pr = pr.body.$;
	//
	var ent = {
		name: entityName,
		$properties: {

		},
		$relations: {

		}
	};
	ent.factory = new Factory(ent);
	Object.keys(pr).forEach(function(prop) {
		switch(prop.$type) {
			case "application/x-reference":
			case "application/x-collection":
				break;
			default:
				var p = ent.$properties[prop] = {
					$type: prop.$type.replace("application/x-", ""),
					$title: prop.$title,
				}
				p.type = p.$type;
				p.title = p.$title;
		}
	});
	//
	return _entities[entityName] = ent;
}

function _fetchQueryResources(_, handle, entity, params) {
	var sdataWhere = filterHelpers.jsonToSdata(params);
	var client = handle._client;
	var r = client.jsonSend(_, {
		head: {
			headers: {}, // TODO
			method: "GET",
			url: handle._baseUrl + "/" + entity.name + "?representation=" + entity.name + ".$query" + 
					(sdataWhere ? "&where=(" + encodeURIComponent(sdataWhere) + ")" : "") +
					(params.count ? "&count=" + params.count : "")
		},
		body: {}
	});
	if(!r || !r.body || !r.body.$resources) return null;
	// convert to entity
	return r.body.$resources;
}

function _fetchDetailResource(_, handle, entity, key) {
	var r = client.jsonSend(_, {
		head: {
			headers: {}, // TODO
			method: "GET",
			url: handle._baseUrl + "/" + entity.name + "('" + key + "')?representation=" + entity.name + ".$details"
		},
		body: {}
	});
	if(!r || !r.body || !r.body) return null;
	// convert to entity
	return r.body;
}

function X3Cursor(handle, entity, x3BulkReader) {
	this._cursor = cursor;
	this._entity = entity;
	this._db = handle;
	this._reader = x3BulkReader;
}

helpers.defineClass(X3Cursor, null, {
	next: function(_) {
		var r = this._reader.next(_);
		return r && this._entity.factory.createInstance(_, r, this._handle);
	}
});


function X3DbHandle(endpoint) {
	this._endpoint = endpoint;
}

helpers.defineClass(X3DbHandle, null, {
	connect: function(_) {
		this._client = pool.getClient(_, globals.context.session, this._endpoint);
		this._baseUrl = this._endpoint.getBaseUrl(_);
	},
	//
	/// -------------
	/// ## getEntity function :
	/// ``` javascript
	/// var entity = db.getEntity(_, entityName);
	/// ```
	/// Get the class metadata as an entity
	/// 
	/// 
	getEntity = function(_, entityName, facet) {
		return _entities[entityName] || _makeEntity(_, this, entityName, facet);
	},
	// fetch instance
	fetchInstance = function(_, entity, params) {
		// if params is string, then it's the object key, or a filter otherwise
		var r;
		if(typeof params === "object") {
			params.count = 1;
			r = _fetchQueryResources(_, handle, entity, params);
			r = (r || [])[0];
		} else
			r = _fetchDetailResource(_, handle, entity, params);
		//
		return entity.factory.createInstance(_, r, this);
	},
	//
	count = function(_, entity, params) {
		throw new Error("count(_): Unsupported for this driver");
	},
	//
	/// -------------
	/// ## createCursor function :
	/// ``` javascript
	/// var cursor = db.createCursor(_, entity, params, shallow);
	/// var data;
	/// while(data = cursor.next(_) {
	///   // do something with data witch is an object instance
	/// }
	/// ```
	/// Creates a cursor allowing to iterate over the objects in a collection
	/// function next(_) on the cursor returns the current instance. Returns null at the end of the cursor
	/// 
	/// ```javascript
	/// // parameters example
	/// params = {
	///   count: 20, // cursor fetch limit
	///   startIndex: 2, // skip parameter
	///   orderBy: [{binding:"name", descending: true}, {binding: title}],
	///   jsonWhere: {/* mongodb style json filter */} // or sdataWhere = sdataClause or where = parsed_expression_object
	/// }
	/// ```
	/// 
	createCursor = function(_, entity, params) {
		// create a bulk mode x3 cursor
		return new X3Cursor(this, entity, this._client.createBulkReader(_, {
			entityName: entity.name,
			where: filterHelpers.jsonToSdata(params)
		}));
	},
	// fetch all instances acording to parameters
	fetchInstances = function(_, entity, params) {
		var self = this;
		var r = _fetchQueryResources(_, handle, entity, params);
		return (r || []).map_(function(_, item) {
			return entity.factory.createInstance(_, item, self);
		});
	},
);

exports.create = function(_, endpoint) {
	var handle = new MongoDbHandle(endpoint);
	handle.connect(_);
	return handle;
}
