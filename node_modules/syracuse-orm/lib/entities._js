"use strict";

var helpers = require("syracuse-core/lib/helpers");
var locale = require("syracuse-core/lib/locale");
var sys = require("util");

function wrapProperties(constr, writable, props, getter, setter) {
	props.forEach(function(name) {
		var desc = {
			enumerable: true
		};
		desc.get = getter || function() {
			return this._meta[name];
		};
		if (writable) desc.set = setter || function(val) {
			this._meta[name] = val;
		};
		constr.prototype[name] === undefined && Object.defineProperty(constr.prototype, name, desc);
	});
}

function wrapMethods(constr, methods) {
	methods.forEach(function(name) {
		constr.prototype[name] = function() {
			return this._meta[name].apply(this._meta, arguments);
		};
	});
}


function BaseProperty(meta) {
	this._meta = meta;
};

var BasePropClass = helpers.defineClass(BaseProperty, null, {

});


function Relation(meta) {
	BaseProperty.call(this, meta);
};

exports.Relation = helpers.defineClass(Relation, BaseProperty, {

});

wrapProperties(Relation, false, ["name", "targetEntity", "$type", "relType", "title", "$title", "$description", "$isMandatory", "$serializeAll", //
	"$isDynamicType", "isComputed", "$isComputed", "inv", "$inv", "isPlural", "$isPlural", //
	"$canReorder", "canReorder", "defaultOrder", "$defaultOrder", "$isDisabled", "$isReadOnly", //
	"$lookup", "$select", "$lookupFilter", "$capabilities", "$isUnique", "$displayLength", "$isHidden", "$isExcluded", //
	"$variants", "$default", "defaultValue", "$propagate", "$compute", "$minLength", "$maxLength", "$isNullable", "$isDefined", //
	"$storage", "$links", "$format", "$salt", "$linksToDetails"
]);
wrapProperties(Relation, false, ["$isChild", "isChild"], function() {
	return this._meta.$isChild || this._meta.isChild;
});