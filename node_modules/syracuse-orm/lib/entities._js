"use strict";

var helpers = require("syracuse-core/lib/helpers");
var forEachKey = helpers.object.forEachKey;
var flows = require('streamline/lib/util/flows');
var pluralize = helpers.string.pluralize;
var capitalize = helpers.string.capitalize;
var locale = require("syracuse-core/lib/locale");
var sys = require("util");

var queryRepr = ["$query", "$lookup", "$search", "$select", "$bulk"]; // query like facets


function _getTranslatedString(stringResources, parts, combineParts) {
	if (!stringResources || !parts || !parts.length) return "";
	for (var i = 0; i < (combineParts ? parts.length : 1); i++) {
		var str = stringResources[parts.slice(i).join(".")];
		//console.log("resource for : "+parts.slice(i).join(".")+"="+str);
		if (str) return str;
	}
}

function _defineProperty(constr, writable, name, wrapProp, obsoleteMsg) {
	var desc = {
		enumerable: true
	};
	desc.get = function() {
		obsoleteMsg && console.error(obsoleteMsg);
		return this[wrapProp];
	};
	if (writable) desc.set = function(val) {
		obsoleteMsg && console.error(obsoleteMsg);
		this[wrapProp] = val;
	};
	constr.prototype[name] === undefined && Object.defineProperty(constr.prototype, name, desc);
}

function _copyConstraints(src, dst) {
	['$pattern', '$patternMessage', '$minLength', '$maxLength', '$minimum', '$maximum', '$maximumCanEqual', '$minimumCanEqual', //
		'$isUnique', '$isNullable', '$isMandatory', '$isDefined', //
		'$isReadOnly', '$isDisabled', '$scale', '$precision'
	].forEach(function(key) {
		if ((src[key] !== undefined) && (src[key] !== "function")) dst[key] = src[key];
	});
}

function _copyIfStatic(src, dest, name) {
	if (src[name] && (typeof src[name] !== "function")) dest[name] = src[name];
}

function _normalizeCapabilities(prop, facetName, isChild) {
	var cap = (prop.$capabilities && prop.$capabilities.split(",")) || [];
	var i_add = cap.indexOf("insert");
	var i_app = cap.indexOf("append");
	var i_del = cap.indexOf("delete");
	var i_reo = cap.indexOf("reorder");
	// ad standard caps only if the class caps is not defined
	if (prop.$capabilities == null) {
		if (cap.indexOf("sort") < 0) cap.push("sort");
		if (facetName === "$edit") {
			if (prop.$isArray || prop.isPlural) {
				// only allow insert if we can reorder, it's append only otherwise
				if (i_add < 0 && (cap.indexOf("reorder") >= 0)) cap.push("insert");
				if (i_add < 0) cap.push("append");
				if (i_del < 0) cap.push("delete");
			}
			// by default no reorder
			//			if(prop.isPlural)
			//				cap.push("reorder");
		}
		if (!isChild && (cap.indexOf("filter") < 0)) cap.push("filter");
	}
	if (facetName !== "$edit") {
		if (i_add >= 0) cap.splice(cap.indexOf("insert"), 1);
		if (i_app >= 0) cap.splice(cap.indexOf("append"), 1);
		if (i_del >= 0) cap.splice(cap.indexOf("delete"), 1);
		if (i_reo >= 0) cap.splice(cap.indexOf("reorder"), 1);
	}
	//console.log("(183): "+prop.name+"."+facetName+"; array: "+(prop.$isArray || prop.isPlural)+"; result="+cap.join(","));
	return cap.join(",");
}

var _decoratePropertyProtoMap = {
	graph: function(_, $p, entity, prop) {
		$p.$url = "{$baseUrl}/{$pluralType}('{$key}')/$graphs/" + prop.name;
		$p.$linkCategories = [];
		$p.$nodeCategories = [];
		//
		var maps = prop.getGraphRelationsMaps(_);
		//
		flows.eachKey(_, maps.nodes, function(_, nodeName, node) {
			$p.$nodeCategories.push(node);
		});
		flows.eachKey(_, maps.links, function(_, linkName, link) {
			$p.$linkCategories.push(link);
		});
	},
	"tag-cloud": function(_, $p, entity, prop) {
		$p.$url = "{$baseUrl}/{$pluralType}('{$key}')/$tagClouds/" + prop.name;
		$p.$nodeCategories = [];
		// TODO
		$p.$nodeCategories.push({
			$title: "Categ test",
			$prototype: {
				$properties: {
					$value: "Test"
				}
			}
		});
	},
	filter: function(_, $p, entity, prop) {
		if (prop.$filterRepresentation && (typeof prop.$filterRepresentation !== "function")) {
			$p.$links = $p.$links || {};
			var l = $p.$links.$prototype = {
				$url: "{$baseUrl}/$prototypes('" + prop.$filterRepresentation + ".$query')",
				$isHidden: true
			};
		}
	}
};

function _getLink(facetName, title, params, entityName) {
	var link = {
		$type: "application/json;vnd.sage=syracuse"
	};
	if (title) link.$title = title;
	var plural = (entityName && pluralize(entityName)) || "{$pluralType}";
	var singular = entityName || "{$representation}";
	//
	switch (facetName) {
		case "$details":
			link.$url = "{$baseUrl}/" + plural + "('{$key}')?representation=" + singular + "." + facetName + "&role={$role}" + (params ? "&" + params : "");
			break;
		case "$lookup":
		case "$select":
		case "$query":
			link.$url = "{$baseUrl}/" + plural + "?representation=" + singular + "." + facetName + "&role={$role}" + (params ? "&" + params : "");
			break;
		case "$edit":
			link.$url = "{$baseUrl}/" + plural + "('{$key}')/$workingCopies?representation=" + singular + "." + facetName + "&role={$role}" + (params ? "&" + params : "");
			link.$method = "POST";
			break;
		case "$create":
			// $create facet is in fact an $edit facet
			link.$url = "{$baseUrl}/" + plural + "/$template/$workingCopies?representation=" + singular + ".$edit&role={$role}" + (params ? "&" + params : "");
			link.$method = "POST";
			break;
	}
	return link;
}

function _fillProtoTemplates(result, e, stringRes) {
	result.$url = "{$baseUrl}/{$pluralType}('{$key}')";
	result.$value = (e.$valueTemplate && (_getTranslatedString(stringRes, [e.name, "$valueTemplate"]) || e.$valueTemplate.expression)) || "{$key}";
	// $title conflicts with the property title for reference thumb.
	//			result.$title = (e.$titleTemplate && e.$titleTemplate.expression) || (e.title + " {$key}");
	result.$description = (e.$descriptionTemplate && (_getTranslatedString(stringRes, [e.name, "$descriptionTemplate"]) || e.$descriptionTemplate.expression)) || _getTranslatedString(stringRes, [e.name, "$title"]) || result.$title;
	// extract all fields in templates
	result.$key = e.$key || "{$uuid}";
	result.$properties = {};
	var allFields = {};

	function addField(elem) {
		elem = elem.substring(1, elem.length - 1);
		if (!allFields[elem] && e.$properties[elem]) allFields[elem] = e.$properties[elem];
	}
	if (e.$valueTemplate && e.$valueTemplate.matches) e.$valueTemplate.matches.forEach(addField);
	if (e.$valueTitleTemplate && e.$valueTitleTemplate.matches) e.$valueTitleTemplate.matches.forEach(addField);
	if (e.$descriptionTemplate && e.$descriptionTemplate.matches) e.$descriptionTemplate.matches.forEach(addField);
	//
	forEachKey(allFields, function(field, value) {
		result.$properties[field] = {
			$type: value.getMimeType()
		};
	});
}

function _fillThumb($thumb, e, rel, prefix, facetName, stringRes) {
	_fillProtoTemplates($thumb, e, stringRes);
	$thumb.$url += "?representation={$representation}.$thumb";
	$thumb.$prototype = "{$baseUrl}/$prototypes('{$representation}.$thumb')";
	$thumb.$representation = e.name;
	$thumb.$title = (e.$valueTitleTemplate && (_getTranslatedString(stringRes, [e.name, "$valueTitleTemplate"]) || e.$valueTitleTemplate.expression));
	if (rel.$isDisabled && (typeof rel.$isDisabled !== "function")) $thumb.$isDisabled = rel.$isDisabled;
	if (rel.$isReadOnly && (typeof rel.$isReadOnly !== "function")) $thumb.$isReadOnly = rel.$isReadOnly;
	$thumb.$links = {
		$details: _getLink("$details", null, "", rel.$isDynamicType ? null : e.name)
	};
	//
	//var lookupLinkName = ((rel && rel.isPlural && rel.relType !== "children") ? "$select" : "$lookup");
	if ((facetName === "$edit") || (queryRepr.indexOf(facetName) >= 0)) {
		var lookupLinkName = "$lookup";
		var relLookupParams = (rel.$lookup && (rel.$lookup.parameters || rel.$lookup.$parameters)) || (rel.$select && (rel.$select.parameters || rel.$select.$parameters));
		$thumb.$links[lookupLinkName] = _getLink(lookupLinkName, locale.format(module, "createTableActionTitle"), "trackingId={$trackingId}" + ((rel && rel.name) ? "&binding=" + prefix : "") + (relLookupParams ? "&" + relLookupParams : ""), e.name);
	}
}


function BaseProperty(entity, meta) {
	//	this._meta = meta;
	var self = this;
	self._entity = entity;
	for (var ii in meta) {
		switch (ii) {
			case "isChild":
			case "$isChild":
				self._$isChild = meta.$isChild || meta.isChild;
				break;
			default:
				self[ii] = meta[ii];
		}
	}
};

var BasePropClass = helpers.defineClass(BaseProperty, null, {
	getPropertyPrototype: function(_, stringRes, facetName, isChild, childPrefix) {
		var self = this;
		var entity = self._entity;
		//
		var $r = {};
		//
		$r.$title = _getTranslatedString(stringRes, [entity.name, self.name, "$title"], true) || self.title;
		if (typeof self.$description !== "function") $r.$description = _getTranslatedString(stringRes, [entity.name, self.name, "$description"], true) || self.$description;
		$r.$displayLength = self.$displayLength;
		$r.$isUnique = self.$isUnique;

		["$isMandatory", "$isDisabled", "$isReadOnly", "$isHidden", "$isExcluded"].forEach(function(n) {
			_copyIfStatic(self, $r, n);
		});
		//
		$r.$capabilities = _normalizeCapabilities(self, facetName, isChild);
		//
		return $r;
	},
	getTitle: function() {
		var self = this;
		var entity = self._entity;
		//
		var stringRes = entity.contract.resources && entity.contract.resources();
		return _getTranslatedString(stringRes, [entity.name, self.name, "$title"], true) || self.$title;
	}
});

function Property(entity, meta) {
	BaseProperty.call(this, entity, meta);
};

exports.Property = helpers.defineClass(Property, BaseProperty, {
	getPropertyPrototype: function(_, stringRes, facetName, isChild, childPrefix) {
		var $r = BaseProperty.prototype.getPropertyPrototype.call(this, _, stringRes, facetName, isChild, childPrefix);
		var res = $r;
		var name = this.name;
		var prop = this;
		var entity = this._entity;

		res.$links = prop.$links;
		var $p;
		if (this.$isArray) {
			res.$type = "application/x-array";
			$p = res.$item = {};
		} else $p = res;
		if (prop["$enum"]) {
			$p.$type = "application/x-choice";
			var $value = $p.$value = {
				$type: prop.getMimeType(),
			};
			var protoEnum = $value.$enum = [];
			Array.isArray(prop["$enum"]) && prop["$enum"].forEach(function(e, idx) {
				protoEnum.push({
					$value: e.$value,
					$title: _getTranslatedString(stringRes, [entity.name, name, e.$value], true) || e.$title || e.$value
				});
			});
		} else {
			$p.$type = prop.getMimeType();
			if (prop.isExternalStorage())
				if (facetName === "$edit") $p.$url = "{$baseUrl}/$workingCopies('{$trackingId}')/" + name;
				else $p.$url = "{$baseUrl}/{$pluralType}('{$key}')/" + name;
		}
		$p.$format = prop.$format;
		_copyConstraints(prop, $p);
		//
		if (prop.$type === "password" && prop.$salt) {
			var c = ((require("syracuse-main/lib/nodeconfig").config || {}).session || {});
			$p.$salt = prop.$salt.replace("{$realm}", c.realm || "Syracuse");
		}
		//
		if (prop.isComputed || prop.$compute) $p.$isDisabled = true;
		// capabilities: use "res" variable for $capabilities as for the arrays we must be on prop level not on $item (as is $p)
//		res.$capabilities = _normalizeCapabilities(prop, facetName, isChild);
		if ((prop.type === "string") && (res.$capabilities.indexOf("alphaTab") < 0)) res.$capabilities = res.$capabilities + ",alphaTab";
		//
		// for now, move il later in dataModel.js ?
		if (prop.$linksToDetails && (facetName !== "$lookup" && facetName !== "$select")) {
			$p.$links = $p.$links || {};
			$p.$links.$details = _getLink("$details");
		}
		if (prop.$lookup) {
			$p.$links = $p.$links || {};
			if (typeof prop.$lookup !== 'function') {
				var lp = prop.$lookup && (prop.$lookup.parameters || prop.$lookup.$parameters);
				$p.$links.$lookup = _getLink("$lookup", null, "trackingId={$trackingId}&binding=" + prop.name + (lp ? "&" + lp : ""), prop.$lookup.entity);
				$p.$links.$lookup.$result = prop.$lookup.field;
			} else $p.$links.$lookup = {
				$isDisabled: true
			};
		}
		//
		_decoratePropertyProtoMap[prop.$type] && _decoratePropertyProtoMap[prop.$type](_, $p, entity, prop);
		//
		return res;
	},
	getMimeType: function() {
		switch (this.type) {
			case "image":
			case "text/html":
			case "text/rtf":
			case "text/plain":
				return this.type;
			default:
				return ("application/x-" + this.type);
		}
	},
	isExternalStorage: function() {
		return (this.hasOwnProperty("$storage"));
	},
	getAllConstraints: function() {
		var c = {};
		_copyConstraints(this, c);
		if (this.$isMandatory) c.$isMandatory = this.$isMandatory;
		if (this.$isDefined) c.$isDefined = this.$isDefined;
		return c;
	},
	getDefaultValue: function(_, instance) {
		var property = this;
		if (property.hasOwnProperty("defaultValue")) {
			if (typeof property.defaultValue === "function") return property.defaultValue(_, instance);
			else return property.defaultValue;
		} else return (types[(property.$type || "string")] || {}).defaultValue;
	},
	hasDefaultValue: function() {
		return this.hasOwnProperty("defaultValue");
	},
	getGraphRelationsMaps: function(_) {
		var prop = this;
		if (prop.$type !== "graph") return;
		//
		var entity = this._entity;
		var stringRes = entity.contract.resources && entity.contract.resources();

		function _addNodes(_, rel, relMap, walked) {
			var ent = rel.targetEntity;
			if (!nodesMap[ent.name]) nodesMap[ent.name] = {
				$name: ent.name,
				$title: _getTranslatedString(stringRes, [ent.name, "$pluralTitle"]) || ent.$pluralTitle,
				$selected: (relMap.$selected !== false),
				$prototype: {
					$properties: {
						$value: ent.$valueTemplate && ent.$valueTemplate.expression
					},
					$links: {
						$default: {
							$url: "{$baseUrl}/" + ent.plural + "('{$uuid}')?representation=" + ent.name + ".$details",
							$type: "json",
							//$target: "blank"
						}
					}
				}
			};
			if (!linksMap[walked]) linksMap[walked] = {
				$name: walked,
				$title: rel.$title
			};
		}

		function _walkRelation(_, ent, relName, relMap, walked) {
			if (relName[0] === "$") return;
			//
			var targetEntity = ent.$relations && ent.$relations[relName] && ent.$relations[relName].targetEntity;
			if (!targetEntity) throw new Error(locale.format(module, "relationEntityNotFound", relName));
			//
			_addNodes(_, ent.$relations[relName], relMap, walked);
			// continue recursion
			flows.eachKey(_, relMap, function(_, locRelName, locRelMap) {
				_walkRelation(_, targetEntity, locRelName, locRelMap, walked + "." + locRelName);
			});
		}
		var nodesMap = {};
		var linksMap = {};
		// add starting point
		nodesMap[entity.name] = {
			$name: entity.name,
			$title: _getTranslatedString(stringRes, [entity.name, "$pluralTitle"]) || entity.$pluralTitle,
			$selected: true,
			$prototype: {
				$properties: {
					$value: entity.$valueTemplate && entity.$valueTemplate.expression
				}
			}
		};
		//
		flows.eachKey(_, this.$relations, function(_, relName, relation) {
			_walkRelation(_, entity, relName, relation, relName);
		});
		//
		return {
			nodes: nodesMap,
			links: linksMap
		};
	}
});

function Relation(entity, meta) {
	BaseProperty.call(this, entity, meta);
};

exports.Relation = helpers.defineClass(Relation, BaseProperty, {
	getIsChild: function(typeName) {
		var self = this;
		if (self.$variants && typeName && self.$variants[typeName]) {
			return self.$variants[typeName].$isChild || self.$variants[typeName].isChild || self._$isChild;
		} else return self._$isChild;
	},
	getTargetEntity: function(typeName) {
		var self = this;
		if (self.$variants && typeName && self.$variants[typeName]) {
			return self.$variants[typeName].targetEntity;
		} else return self.targetEntity;
	},
	getPropertyPrototype: function(_, stringRes, facetName, isChild, childPrefix, visited) {
		function _updateChildRef(_, resource, rel, variant, facetName, isChild, childPrefix, isCollection) {
			if (visitedEntities && visitedEntities.indexOf(variant.targetEntity.name) >= 0) return;
			visitedEntities.push(variant.targetEntity.name);
			var $item = resource.$item = variant.targetEntity.getPrototype(_, variant.targetEntity.name, facetName, isChild, childPrefix, visitedEntities);
			$item.$representation = variant.targetEntity.name;
			if (facetName === "$edit") {
				if (isCollection) {
					resource.$actions = resource.$actions || {};
					if (variant.$select) {
						resource.$actions.$select = resource.$actions.$select || {
							$title: locale.format(module, "createTableActionTitle"),
							$method: "PUT"
						};
						var a = resource.$actions.$select;
						a.$parameters = a.$parameters || {};
						var selectEnt = entity.getModel().getEntity(_, variant.$select.$type); // assume same model for now ...
						a.$parameters.$actions = a.$parameters.$actions || {};
						var lp = variant.$select && (variant.$select.parameters || variant.$select.$parameters);
						a.$parameters.$actions.$select = {
							$title: variant.$select.$title,
							$type: "application/x-array",
							$item: selectEnt.getPrototype(_, selectEnt.name, "$select", true, childPrefix),
							$url: "{$baseUrl}/" + selectEnt.plural + "?representation=" + selectEnt.name + ".$select" + (lp ? "&" + lp : "") + "&trackingId={trackingId}" + (childPrefix ? "&binding=" + childPrefix : "")
						};
					} else {
						if (!rel.$capabilities || rel.$capabilities.indexOf("append") >= 0) resource.$actions.$create = resource.$actions.$create || {
							$title: locale.format(module, "createTableActionTitle"),
							$method: "PUT"
						};
					}
				} else {
					if (variant.$lookup) {
						var lookupLinkName = "$lookup";
						$item.$links = $item.$links || {};
						var lp = variant.$lookup && (variant.$lookup.parameters || variant.$lookup.$parameters);
						$item.$links[lookupLinkName] = _getLink(lookupLinkName, locale.format(module, "selectItemActionTitle"), "trackingId={$trackingId}" + ((rel && rel.name) ? "&binding=" + childPrefix : "") + (lp ? "&" + lp : ""), variant.targetEntity.name);
					}
					if ($item.$actions && $item.$actions.$delete) delete $item.$actions.$delete;
				}
			}
		}

		function _updateItem(_, res, item, ent, variant) {
			var isChild = (variant && variant.hasOwnProperty("_$isChild") ? variant._$isChild : (variant && variant.$isChild) || self._$isChild);
			if (isChild) {
				item.$type = "application/x-object";
				_updateChildRef(_, res, self, variant, facetName, true, thumbRelName, self.isPlural);
			} else {
				item.$type = "application/x-reference";
				item.$item = {};
				_fillThumb(item.$item, ent, self, thumbRelName, facetName, stringRes);
				if (self.isPlural && facetName === "$edit") {
					var lp = self.$select && (self.$select.parameters || self.$select.$parameters);
					(res.$links = res.$links || {}).$select = _getLink("$select", locale.format(module, "createTableActionTitle"), "trackingId={$trackingId}" + (self.name ? "&binding=" + thumbRelName : "") + (lp ? "&" + lp : ""), ent.name);
				}
			}
		}

		var $r = BaseProperty.prototype.getPropertyPrototype.call(this, _, stringRes, facetName, isChild, childPrefix);
		var result = $r;
		//
		var self = this;
		var entity = self._entity;
		var visitedEntities = visited || [];
		//
		// properly format binding for childrens
		var thumbRelName = self.name;
		if (childPrefix) thumbRelName = childPrefix.replace("uuid", "parent_uuid") + "('{$uuid}')/" + thumbRelName;
		//
		var $item = $r;
		if (self.isPlural) {
			$r.$type = "application/x-array";
			$item = $r.$item = {};
		}
		if (self.$variants) {
			$item.$type = "application/x-variant";
			$item.$variants = {};
			Object.keys(self.$variants).forEach_(_, function(_, vName) {
				var ent = self.$variants[vName].targetEntity;
				var variant = self.$variants[vName];
				var $v = $item.$variants[vName] = {};
				_updateItem(_, $v, $v, ent, variant);
			});
		} else _updateItem(_, $r, $item, self.targetEntity, self);
		//
		return result;
	},
	getLink: function(facetName, variantName) {
		var self = this;
		var ent = variantName && self.$variants && self.$variants[variantName] ? self.$variants[variantName].targetEntity : self.targetEntity;
		switch(facetName) {
			case "$select":
				var lp = self.$select && (self.$select.parameters || self.$select.$parameters);
				return _getLink("$select", locale.format(module, "createTableActionTitle"), "trackingId={$trackingId}" + (self.name ? "&binding=" + self.name : "") + (lp ? "&" + lp : ""), ent.name);
		}
	}
});

function _getStack() {
	var err = new Error("");
	return err.stack;
}

_defineProperty(Relation, false, "isChild", "_$isChild", locale.format(module, "obsolete", "isChild", "getIsChild()", _getStack()));
_defineProperty(Relation, false, "$isChild", "_$isChild", locale.format(module, "obsolete", "isChild", "getIsChild()", _getStack()));