"use strict";

var helpers = require("syracuse-core/lib/helpers");
var forEachKey = helpers.object.forEachKey;
var pluralize = helpers.string.pluralize;
var capitalize = helpers.string.capitalize;
var locale = require("syracuse-core/lib/locale");
var sys = require("util");

var queryRepr = ["$query", "$lookup", "$search", "$select", "$bulk"]; // query like facets


function _getTranslatedString(stringResources, parts, combineParts) {
	if (!stringResources || !parts || !parts.length) return "";
	for (var i = 0; i < (combineParts ? parts.length : 1); i++) {
		var str = stringResources[parts.slice(i).join(".")];
		//console.log("resource for : "+parts.slice(i).join(".")+"="+str);
		if (str) return str;
	}
}

function _defineProperty(constr, writable, name, wrapProp, obsoleteMsg) {
	var desc = {
		enumerable: true
	};
	desc.get = function() {
		obsoleteMsg && console.error(obsoleteMsg);
		return this[wrapProp];
	};
	if (writable) desc.set = function(val) {
		obsoleteMsg && console.error(obsoleteMsg);
		this[wrapProp] = val;
	};
	constr.prototype[name] === undefined && Object.defineProperty(constr.prototype, name, desc);
}

function _copyIfStatic(src, dest, name) {
	if (src[name] && (typeof src[name] !== "function")) dest[name] = src[name];
}

function _normalizeCapabilities(prop, facetName, isChild) {
	var cap = (prop.$capabilities && prop.$capabilities.split(",")) || [];
	var i_add = cap.indexOf("insert");
	var i_app = cap.indexOf("append");
	var i_del = cap.indexOf("delete");
	var i_reo = cap.indexOf("reorder");
	// ad standard caps only if the class caps is not defined
	if (prop.$capabilities == null) {
		if (cap.indexOf("sort") < 0) cap.push("sort");
		if (facetName === "$edit") {
			if (prop.$isArray || prop.isPlural) {
				// only allow insert if we can reorder, it's append only otherwise
				if (i_add < 0 && (cap.indexOf("reorder") >= 0)) cap.push("insert");
				if (i_add < 0) cap.push("append");
				if (i_del < 0) cap.push("delete");
			}
			// by default no reorder
			//			if(prop.isPlural)
			//				cap.push("reorder");
		}
		if (!isChild && (cap.indexOf("filter") < 0)) cap.push("filter");
	}
	if (facetName !== "$edit") {
		if (i_add >= 0) cap.splice(cap.indexOf("insert"), 1);
		if (i_app >= 0) cap.splice(cap.indexOf("append"), 1);
		if (i_del >= 0) cap.splice(cap.indexOf("delete"), 1);
		if (i_reo >= 0) cap.splice(cap.indexOf("reorder"), 1);
	}
	//console.log("(183): "+prop.name+"."+facetName+"; array: "+(prop.$isArray || prop.isPlural)+"; result="+cap.join(","));
	return cap.join(",");
}

function _getLink(facetName, title, params, entityName) {
	var link = {
		$type: "application/json;vnd.sage=syracuse"
	};
	if (title) link.$title = title;
	var plural = (entityName && pluralize(entityName)) || "{$pluralType}";
	var singular = entityName || "{$representation}";
	//
	switch (facetName) {
		case "$details":
			link.$url = "{$baseUrl}/" + plural + "('{$key}')?representation=" + singular + "." + facetName + "&role={$role}" + (params ? "&" + params : "");
			break;
		case "$lookup":
		case "$select":
		case "$query":
			link.$url = "{$baseUrl}/" + plural + "?representation=" + singular + "." + facetName + "&role={$role}" + (params ? "&" + params : "");
			break;
		case "$edit":
			link.$url = "{$baseUrl}/" + plural + "('{$key}')/$workingCopies?representation=" + singular + "." + facetName + "&role={$role}" + (params ? "&" + params : "");
			link.$method = "POST";
			break;
		case "$create":
			// $create facet is in fact an $edit facet
			link.$url = "{$baseUrl}/" + plural + "/$template/$workingCopies?representation=" + singular + ".$edit&role={$role}" + (params ? "&" + params : "");
			link.$method = "POST";
			break;
	}
	return link;
}

function _fillProtoTemplates(result, e, stringRes) {
	result.$url = "{$baseUrl}/{$pluralType}('{$key}')";
	result.$value = (e.$valueTemplate && (_getTranslatedString(stringRes, [e.name, "$valueTemplate"]) || e.$valueTemplate.expression)) || "{$key}";
	// $title conflicts with the property title for reference thumb.
	//			result.$title = (e.$titleTemplate && e.$titleTemplate.expression) || (e.title + " {$key}");
	result.$description = (e.$descriptionTemplate && (_getTranslatedString(stringRes, [e.name, "$descriptionTemplate"]) || e.$descriptionTemplate.expression)) || _getTranslatedString(stringRes, [e.name, "$title"]) || result.$title;
	// extract all fields in templates
	result.$key = e.$key || "{$uuid}";
	result.$properties = {};
	var allFields = {};

	function addField(elem) {
		elem = elem.substring(1, elem.length - 1);
		if (!allFields[elem] && e.$properties[elem]) allFields[elem] = e.$properties[elem];
	}
	if (e.$valueTemplate && e.$valueTemplate.matches) e.$valueTemplate.matches.forEach(addField);
	if (e.$valueTitleTemplate && e.$valueTitleTemplate.matches) e.$valueTitleTemplate.matches.forEach(addField);
	if (e.$descriptionTemplate && e.$descriptionTemplate.matches) e.$descriptionTemplate.matches.forEach(addField);
	//
	forEachKey(allFields, function(field, value) {
		result.$properties[field] = {
			$type: value.getMimeType()
		};
	});
}

function _fillThumb($thumb, e, rel, prefix, facetName, stringRes) {
	_fillProtoTemplates($thumb, e, stringRes);
	$thumb.$url += "?representation={$representation}.$thumb";
	$thumb.$prototype = "{$baseUrl}/$prototypes('{$representation}.$thumb')";
	$thumb.$representation = e.name;
	$thumb.$title = (e.$valueTitleTemplate && (_getTranslatedString(stringRes, [e.name, "$valueTitleTemplate"]) || e.$valueTitleTemplate.expression));
	if (rel.$isDisabled && (typeof rel.$isDisabled !== "function")) $thumb.$isDisabled = rel.$isDisabled;
	if (rel.$isReadOnly && (typeof rel.$isReadOnly !== "function")) $thumb.$isReadOnly = rel.$isReadOnly;
	$thumb.$links = {
		$details: _getLink("$details", null, "", rel.$isDynamicType ? null : e.name)
	};
	//
	//var lookupLinkName = ((rel && rel.isPlural && rel.relType !== "children") ? "$select" : "$lookup");
	if ((facetName === "$edit") || (queryRepr.indexOf(facetName) >= 0)) {
		var lookupLinkName = "$lookup";
		var relLookupParams = (rel.$lookup && (rel.$lookup.parameters || rel.$lookup.$parameters)) || (rel.$select && (rel.$select.parameters || rel.$select.$parameters));
		$thumb.$links[lookupLinkName] = _getLink(lookupLinkName, locale.format(module, "createTableActionTitle"), "trackingId={$trackingId}" + ((rel && rel.name) ? "&binding=" + prefix : "") + (relLookupParams ? "&" + relLookupParams : ""), e.name);
	}
}


function BaseProperty(entity, meta) {
	//	this._meta = meta;
	var self = this;
	self._entity = entity;
	for (var ii in meta) {
		switch (ii) {
			case "isChild":
			case "$isChild":
				self._$isChild = meta.$isChild || meta.isChild;
				break;
			default:
				self[ii] = meta[ii];
		}
	}
};

var BasePropClass = helpers.defineClass(BaseProperty, null, {
	getPropertyPrototype: function(_, stringRes, facetName, isChild, childPrefix) {
		var self = this;
		var entity = self._entity;
		//
		var $r = {};
		//
		$r.$title = _getTranslatedString(stringRes, [entity.name, self.name, "$title"], true) || self.title;
		if (typeof self.$description !== "function") $r.$description = _getTranslatedString(stringRes, [entity.name, self.name, "$description"], true) || self.$description;
		$r.$displayLength = self.$displayLength;
		$r.$isUnique = self.$isUnique;

		["$isMandatory", "$isDisabled", "$isReadOnly", "$isHidden", "$isExcluded"].forEach(function(n) {
			_copyIfStatic(self, $r, n);
		});
		//
		$r.$capabilities = _normalizeCapabilities(self, facetName, isChild);
		//
		return $r;
	},
	getTitle: function() {
		var self = this;
		var entity = self._entity;
		//
		var stringRes = entity.contract.resources && entity.contract.resources();
		return _getTranslatedString(stringRes, [entity.name, self.name, "$title"], true) || self.$title;
	}
});


function Relation(entity, meta) {
	BaseProperty.call(this, entity, meta);
};

exports.Relation = helpers.defineClass(Relation, BaseProperty, {
	getIsChild: function(typeName) {
		var self = this;
		if (self.$variants && typeName && self.$variants[typeName]) {
			return self.$variants[typeName].$isChild || self.$variants[typeName].isChild || self._$isChild;
		} else return self._$isChild;
	},
	getTargetEntity: function(typeName) {
		var self = this;
		if (self.$variants && typeName && self.$variants[typeName]) {
			return self.$variants[typeName].targetEntity;
		} else return self.targetEntity;
	},
	getPropertyPrototype: function(_, stringRes, facetName, isChild, childPrefix) {
		function _updateChildRef(_, resource, rel, variant, facetName, isChild, childPrefix, isCollection) {
			var $item = resource.$item = variant.targetEntity.getPrototype(_, variant.targetEntity.name, facetName, isChild, childPrefix);
			$item.$representation = variant.targetEntity.name;
			if (facetName === "$edit") {
				if (isCollection) {
					resource.$actions = resource.$actions || {};
					if (variant.$select) {
						resource.$actions.$select = resource.$actions.$select || {
							$title: locale.format(module, "createTableActionTitle"),
							$method: "PUT"
						};
						var a = resource.$actions.$select;
						a.$parameters = a.$parameters || {};
						var selectEnt = model.getEntity(_, variant.$select.$type);
						a.$parameters.$actions = a.$parameters.$actions || {};
						var lp = variant.$select && (variant.$select.parameters || variant.$select.$parameters);
						a.$parameters.$actions.$select = {
							$title: variant.$select.$title,
							$type: "application/x-array",
							$item: selectEnt.getPrototype(_, selectEnt.name, "$select", true, childPrefix),
							$url: "{$baseUrl}/" + selectEnt.plural + "?representation=" + selectEnt.name + ".$select" + (lp ? "&" + lp : "") + "&trackingId={trackingId}" + (childPrefix ? "&binding=" + childPrefix : "")
						};
					} else {
						if (!rel.$capabilities || rel.$capabilities.indexOf("append") >= 0) resource.$actions.$create = resource.$actions.$create || {
							$title: locale.format(module, "createTableActionTitle"),
							$method: "PUT"
						};
					}
				} else {
					if (variant.$lookup) {
						var lookupLinkName = "$lookup";
						$item.$links = $item.$links || {};
						var lp = variant.$lookup && (variant.$lookup.parameters || variant.$lookup.$parameters);
						$item.$links[lookupLinkName] = _getLink(lookupLinkName, locale.format(module, "selectItemActionTitle"), "trackingId={$trackingId}" + ((rel && rel.name) ? "&binding=" + childPrefix : "") + (lp ? "&" + lp : ""), variant.targetEntity.name);
					}
					if ($item.$actions && $item.$actions.$delete) delete $item.$actions.$delete;
				}
			}
		}

		function _updateItem(_, res, item, ent, variant) {
			var isChild = (variant && variant.hasOwnProperty("_$isChild") ? variant._$isChild : (variant && variant.$isChild) || self._$isChild);
			if (isChild) {
				item.$type = "application/x-object";
				_updateChildRef(_, res, self, variant, facetName, true, thumbRelName, self.isPlural);
			} else {
				item.$type = "application/x-reference";
				item.$item = {};
				_fillThumb(item.$item, ent, self, thumbRelName, facetName, stringRes);
				if (self.isPlural && facetName === "$edit") {
					var lp = self.$select && (self.$select.parameters || self.$select.$parameters);
					(res.$links = res.$links || {}).$select = _getLink("$select", locale.format(module, "createTableActionTitle"), "trackingId={$trackingId}" + (self.name ? "&binding=" + thumbRelName : "") + (lp ? "&" + lp : ""), ent.name);
				}
			}
		}

		var $r = BaseProperty.prototype.getPropertyPrototype.call(this, _, stringRes, facetName, isChild, childPrefix);
		var result = $r;
		//
		var self = this;
		var entity = self._entity;
		//
		// properly format binding for childrens
		var thumbRelName = self.name;
		if (childPrefix) thumbRelName = childPrefix.replace("uuid", "parent_uuid") + "('{$uuid}')/" + thumbRelName;
		//
		var $item = $r;
		if (self.isPlural) {
			$r.$type = "application/x-array";
			$item = $r.$item = {};
		}
		if (self.$variants) {
			$item.$type = "application/x-variant";
			$item.$variants = {};
			Object.keys(self.$variants).forEach_(_, function(_, vName) {
				var ent = self.$variants[vName].targetEntity;
				var variant = self.$variants[vName];
				var $v = $item.$variants[vName] = {};
				_updateItem(_, $v, $v, ent, variant);
			});
		} else _updateItem(_, $r, $item, self.targetEntity, self);
		//
		return result;
	}
});

function _getStack() {
	var err = new Error("");
	return err.stack;
}

_defineProperty(Relation, false, "isChild", "_$isChild", locale.format(module, "obsolete", "isChild", "getIsChild()", _getStack()));
_defineProperty(Relation, false, "$isChild", "_$isChild", locale.format(module, "obsolete", "isChild", "getIsChild()", _getStack()));