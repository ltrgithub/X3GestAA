"use strict";

var locale = require("syracuse-core/lib/locale");
var fs = require("fs");
var streams = require("streamline/lib/streams/streams");
var ReadableStream = streams.ReadableStream;
var WritableStream = streams.WritableStream;

var tracer = console.log;
var tracer = null;

function _exists(callback, path) {
	fs.exists(path, function(result) {
		return callback(null, result);
	});
}

// standard file store
function OsFileStore(fileName) {
	this.fileName = fileName;
}

var osFileProto = OsFileStore.prototype;
osFileProto.getProperties = function(_) {
	var stat = fs.stat(this.fileName, _);
	return {
		length: stat.size,
		contentType: "",
		fileName: this.fileName,
		uploadDate: stat.mtime,
		chunkSize: stat.blksize
	}
}
osFileProto.fileExists = function(_) {
	tracer && tracer("OsFileStore.fileExists enter: "+this.fileName);
	return _exists(_, this.fileName);
}
osFileProto.setFile = function(_, fileName) {
	this.fileName = fileName;
}
osFileProto.createReadableStream = function(_) {
	this.mode = "r";
	return new ReadableStream(fs.createReadStream(this.fileName));
}
osFileProto.createWritableStream = function(_) {
	this.mode = "w";
	this.stream = new WritableStream(fs.createWriteStream(this.fileName));
}
osFileProto.deleteFile = function(_) {
	this.fileName && fs.unlink(this.fileName, _);
}


//rest file store
function RestFileStore(fileName) {
	this.fileName = fileName;
}

var restFileProto = RestFileStore.prototype;
restFileProto.getProperties = function(_) {
}
restFileProto.fileExists = function(_) {
}
restFileProto.setFile = function(_, fileName) {
}
restFileProto.read = function(_, len) {
}
restFileProto.write = function(_, buffer, options) {
}
restFileProto.deleteFile = function(_) {
}
restFileProto.close = function(_) {
}



var _propertyStoreMap = {
	"db_file": function(instance, property) {
		// compat, change of storage type
		if(typeof instance._data[property.name] === "string")
			return instance._db.getFileStore(instance._data[property.name]);
		else
			return instance._db.getFileStore((instance._data[property.name] && instance._data[property.name].$uuid) || "");
	},
	"file": function(instance, property) {
		return new OsFileStore((instance._data[property.name] && instance._data[property.name].$uuid) || "");
	},
	"rest": function(instance, property) {
		return new RestFileStore((instance._data[property.name] && instance._data[property.name].$uuid) || "");
	}
}

exports.createFileStore = function(instance, property, storeType) {
	return _propertyStoreMap[storeType] && _propertyStoreMap[storeType](instance, property);
}