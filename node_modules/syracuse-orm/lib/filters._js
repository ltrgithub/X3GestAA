"use strict"

var sys = require("util");
var Parser = require("syracuse-sdata/lib/parser/parser").Parser;
var globals = require('streamline/lib/globals');
var config = {};

function _left(where) {
	var result = "";
	if (!where) return result;
	switch (where.type) {
	case "operator":
		switch (where.value.code) {
		case ".":
			result = _left(where.children[0]) + "." + _left(where.children[1]);
			break;
		default:
			throw new Error("_left : \"" + where.value.code + "\" not yet implemented");
		}
		break;
	default:
		result = where.value;
	}
	config.tracer && config.tracer("mongodb.filter.left: " + result);
	return result;
}

function _format(value) {
	return ((typeof value === "object") && value.toString())?value.toString():value;
}

function _createFilter(where) {
	// accept string sdata clause or parsed sdata clause
	if(where && (typeof where === "string"))
		where = Parser.parse(where);
	//
	config.tracer && config.tracer("mongodbDbHandle.create filter enter: " + sys.inspect(where));
	if (!where) return {};
	//
	var result = {};
	switch (where.type) {
	case "operator":
		switch (where.value.code) {
		case "and":
			if (where.children.length < 2) throw new Error("Invalid \"AND\" condition");
/*			result = _createFilter(where.children[0]);
			var right = _createFilter(where.children[1]);
			for (var p in right) {
				if (result.hasOwnProperty(p)) {
					if (typeof result[p] !== "object") throw Error("Cannot combine \"=\" operator for property: " + p);
					// concat filters for same property
					for (var r in right[p])
						result[p][r] = right[p][r];
				} else 
					result[p] = right[p];
			}*/
			result = {
				$and: [_createFilter(where.children[0]), _createFilter(where.children[1])]
			}
			break;
		case "or":
			if (where.children.length < 2) throw new Error("Invalid \"OR\" condition");
			result = {
				$or: [_createFilter(where.children[0]), _createFilter(where.children[1])]
			}
			break;
		default:
			if (where.value.code === "=") {
				result[_left(where.children[0])] = _format(where.children[1].value);
			} else {
				var oper = where.value.text;
				if(oper === "between") {
					result[where.children[0]] = {$gte:_format(where.children[1].value), $lte:_format(where.children[2].value)};
				} else {
					var options = null;
					var right = _format(where.children[1].value);
					// oper translation from sData to mongo
					switch (oper) {
					case "le":
						oper = "lte";
						break;
					case "ge":
						oper = "gte";
						break;
					case "like":
						oper = "regex";
						if(right.charAt(0) != "%")
							right = "^" + right;
						right = right.replace(/%/g, ".*");
						options = "i";
						break;
					}
					//
					oper = "$" + oper;
					//
					result[where.children[0]] = {};
					result[where.children[0]][oper] = right;
					if(options) result[where.children[0]].$options = options;
				}
			}
		}
		break;
	default:
		throw new Error(where.type + " not yet implemented");
	}
	config.tracer && config.tracer("create filter exit: " + sys.inspect(result));
	return result;
}

function _createSdataFilter(where) {
	var res = "";
	switch (where.type) {
	case "operator":
		switch (where.value.code) {
		case "and":
		case "or":
			if (where.children.length < 2) throw new Error("Invalid \"AND\" condition");
			res = _createSdataFilter(where.children[0]) + " " + where.value.code + " " + _createSdataFilter(where.children[1]);
			break;
		default:
			res = "(" + _left(where.children[0]) + " " + where.value.text + " \"" +  _format(where.children[1].value) + "\")"; 
		}
		break;
	default:
		throw new Error(where.type + " not yet implemented");
	}
	//
	return res;
}

function _createSdataFilterFromJson(jsonWhere) {
	// TODO: for now only manages "=" and base types
	return Object.keys(jsonWhere).map(function(k) {
		switch(typeof jsonWhere[k]) {
		case "number":
		case "boolean":
			return "(" + k + " eq " + jsonWhere[k] + ")";
		case "string":
			return "(" + k + " eq \"" + jsonWhere[k] + "\")";
		default:
			throw new Error("object filter NIY");
		}
	}).join(" and ");
}

exports.sdataFilterToJson = function(where, options) {
	config = options || {};
	return _createFilter(where);
}

exports.jsonToSdata = function(params) {
	var p = params || {};
	if(p.sdataWhere) return p.sdataWhere;
	if(p.where)
		return _createSdataFilter(p.where);
	if(p.jsonWhere)
		return _createSdataFilterFromJson(p.jsonWhere);
}

exports.addRights = function(_, entity, filter, options) {
	config = options || {};
	var sp = globals.context.session && globals.context.session.getSecurityProfile(_);
	if(sp) {
		config.tracer && config.tracer("filters.addRights found security profile: "+sp.code(_));
		var r = sp.canReadClass(_, entity.name);
		config.tracer && config.tracer("filters.addRights got condition: "+r);
		if(typeof r === "boolean") {
			if(r === false) {
				filter = filter || {};
				filter.$uuid = "none"; // TODO: better send null, debug this
			}
		} else {
			// filter is a sdata condition
			// replace some standard properties; TODO: better, more generic definition ?
			r = r.replace("{$user}", globals.context.session.getUserLogin(_));
			// 
			var f = exports.sdataFilterToJson(r);
			// append filter
			if(filter)
				filter = {
					$and: [filter, f]
				}
			else 
				filter = f;
		}
	}
	config.tracer && config.tracer("addRights filter exit: " + sys.inspect(filter));
	return filter;
}