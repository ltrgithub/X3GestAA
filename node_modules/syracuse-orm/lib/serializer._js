"use strict"

var helpers = require("syracuse-core/lib/helpers");
var flows = require("streamline/lib/util/flows");
var resourceHelpers = require("syracuse-core/lib/resource/util");
var sys = require("util");

var tracer = null;

function Serializer(snapshotType) {
	this._snapshotType = snapshotType;
}

helpers.defineClass(Serializer, null, {
	
});

function SaveSerializer(withDelta) {
	
}

// TODO: delta
exports.SaveSerializer = helpers.defineClass(SaveSerializer, Serializer, {
	serializeProperty: function(_, instance, property, resource) {
		// TODO: delta
		if(property.$compute) return;
		var key = property.name;
		var instVal = instance[key](_);
		var newVal = resourceHelpers.formatValue(property, (property.$isLocalized) ? instance._data[key] : instVal);
		if (property.isExternalStorage()) {
			if(instVal) {
				resource[key] = {
					$uuid: instance[key](_).getUuid()
				};
			}
		} else {
			if (instance._data.hasOwnProperty(key)) 
				resource[key] = newVal;
		}
	},
	serializePlural: function(_, instance, relation, resource) {
		// plural relations are always fully stored
		if(relation.isComputed) return;
		//
		var key = relation.name;
		var self = this;
		resource[key] = instance[key](_).toArray(_, true).map_(_, function(_, e) {
			var r;
			if(relation.$isDynamicType) {
				r = { $url: e.$url || e.computeUrl() }
			} else {
				r = relation.isChild ? _serialize(_, e, self) : { $uuid: e.$uuid };
			}
			return r;
		});
	},
	serializeReference: function(_, instance, relation, resource) {
		// TODO: delta
		var self = this;
		var key = relation.name;
		resource[key] = null;
		if(relation.isChild || relation.$inlineStore) {
			resource[key] = _serialize(_, instance[key](_), self);
		} else
			// avoid reference load
			if(instance._data[key] && instance._data[key].$uuid)
				resource[key] = {
					$uuid: instance._data[key].$uuid
				}
	}
});

function _serialize(_, instance, serializer, options, withMeta) {
	if(!instance) return null;
	if(options && options.tracer) tracer = options.tracer;
	tracer && tracer("serializer.serialize: "+instance.$uuid);
	//
	var meta = instance._meta;
	var resource = {};
	// properties
	flows.eachKey(_, meta.$properties, function(_, key, property) {
		serializer.serializeProperty(_, instance, property, resource);
	});
	// relations
	flows.eachKey(_, meta.$relations, function(_, key, relation){
		if (relation.isPlural) {
			serializer.serializePlural(_, instance, relation, resource);
		} else
			serializer.serializeReference(_, instance, relation, resource);
	});
	if(Object.keys(resource).length === 0)
		return null;
	else {
		resource.$uuid = instance.$uuid;
		if(withMeta) {
			resource.$creUser = instance.$creUser;
			resource.$creDate = instance.$creDate;
			resource.$updUser = instance.$updUser;
			resource.$updDate = instance.$updDate; 
			if(meta.$key)
				// TODO: make a "resolveInstance" function to template, to avoid use of _data
				resource.$key = (new Template(meta.$key)).resolve(instance._data);
		}
	}
	tracer && tracer("serializer.serialize exit : " + sys.inspect(resource, null, 4));
	return resource;
}

exports.serialize = function(_, instance, serializer, options) {
	return _serialize(_, instance, serializer, options, true);
}