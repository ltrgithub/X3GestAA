"use strict";

var syracuse = require('syracuse-main/lib/syracuse'),
	helpers = require('syracuse-core/lib/helpers'),
	globals = require('streamline/lib/globals'),
	adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper,
	streams = require("streamline/lib/streams/server/streams"),
	fs = require('fs'),
	util = require('util'),
	sa = require('syracuse-orm/lib/storageArea'),
	qmodule = QUnit.module;


globals.context = globals.context || {};
globals.context.session = {
	id: helpers.uuid.generate(),
	getUserLogin: function(_) { return "guest" },
	getUserProfile: function(_) { 
		
		return {
			user: function(_){
				// getting the administration ORM
				var db = adminHelper.getCollaborationOrm(_);
				
				// the metamodel is associated to the orm
				var model = db.model;
				
				var entity = db.model.getEntity("user");
				// fetchInstance(callback, entity, filter)
				return db.fetchInstance(_, entity, {jsonWhere:{login: "guest"}});
				
			}
		}
	},
    getSecurityProfile: function(_) {
 	   return null;
    },
}

var doStop = false;
qmodule("storage-area", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			//syracuse.server.close();
			setTimeout(function() {
				process.kill(process.pid);
			}, 100)
		}
	}
});

var uuidRef,
	fname =  __dirname + '/rsrc/documents/test.pdf',
	fnameRead =  __dirname + '/rsrc/documents/result.pdf',
	fnameUpd =  __dirname + '/rsrc/documents/test.xml',
	data1,data2,data3,
	options1 = {
		description: "UNIT_TEST_CREATE",
		content: {
			contentType: "application/pdf",
			fileName: "test1.pdf",
		}
	},
	options2 = {
		description: "UNIT_TEST_UPDATE",
		content: {
			contentType: "text/xml",
			fileName: "test2.xml",
		}
	}

function readAll(_,data){
	try{
		var filter = {jsonWhere:{$uuid: uuidRef}};
		var result = sa.readAll(_, filter);
		compareBuffers(data, result);
	} catch(e){
		console.error(e.stack);
	}
	start();
}

function checkDocument(_, document, options){
	var props = document.content(_).getProperties(_);
	strictEqual(uuidRef,document.$uuid,"uuid ["+uuidRef+"] ok");
	strictEqual(options.description,document.description(_),"description ["+document.description(_)+"] ok");
	strictEqual(options.content.contentType,props.contentType,"contentType ["+props.contentType+"] ok");
	strictEqual(options.content.fileName,props.fileName,"fileName ["+props.fileName+"] ok");
	strictEqual(props.uploadDate != null,true,"uploadDate ["+props.uploadDate+"] ok");
	strictEqual(props.chunkSize != null,true,"chunkSize ["+props.chunkSize+"] ok");
}

function compareBuffers(buffer1, buffer2) {
	//console.log("Buffer1: "+buffer1.toString());
	console.log("Buffer2: "+buffer2.toString());
	strictEqual(buffer1.length, buffer2.length, "Buffer sizes equal");
	var i;
	var ok = false;
	
	if (buffer1.length === buffer2.length)
	{
		ok = true;
		for (i = 0; i < buffer1.length; i++)
		{
			if (buffer1[i] !== buffer2[i])
			{
				ok = false;
				break;
			}
		}
	}
	
	strictEqual(true, ok, "Buffers match");
}

/*
 * BEGIN TESTS
 */
asyncTest('createDocument', 6, function(_){
	try{
		data1 = fs.readFile(fname,_);
		var document = sa.writeAll(_, options1, data1);
		uuidRef = document.$uuid;
		checkDocument(_, document, options1);
	} catch(e){
		console.error(e.stack);
	}
	start();
});

asyncTest('readDocumentAfterCreate', 2, function(_){
	readAll(_,data1);
});

asyncTest('updateDocument', 6, function(_){
	try{
		var filter = {jsonWhere:{$uuid: uuidRef}};
		data2 = fs.readFile(fnameUpd,_);
		var document = sa.writeAll(_, options2, data2, filter);
		checkDocument(_, document, options2);

	} catch(e){
		console.error(e.stack);
	} 	
	start();
});

asyncTest('readDocumentAfterUpdate', 2, function(_){
	readAll(_,data2);
});

asyncTest('removeDocument', 1, function(_){
	try{
		var filter = {jsonWhere:{$uuid: uuidRef}};
		var result = sa.remove(_, filter);
		strictEqual(result,1,"Remove ok");
	} catch(e){
		console.error(e.stack);
	}
	start();
});

asyncTest('readDocumentAfterRemove', 1, function(_){
	try{
		var filter = {jsonWhere:{$uuid: uuidRef}};
		var document = sa.readAll(_, filter);
	} catch(e){
		strictEqual(e.message.substring(0,18),"Document not found","read failed ok");
		//console.error(e.stack);
	}
	start();
});

asyncTest('createStreamDocument', 6, function(_){
	try{

		var dd = sa.open(_, null);
		
		var astream = new streams.ReadableStream(fs.createReadStream(fname));
		
		var buf;
		while (buf = astream.read(_,10000)){
			sa.write(_, dd, options1, buf);
		}
		var document = sa.close(_, dd, true);
		uuidRef = document.$uuid;
		checkDocument(_, document, options1);

	} catch(e){
		console.error(e.stack);
	} 	
	start();
});


asyncTest('readStreamDocument', 9, function(_){
	try{
		var filter = {jsonWhere:{$uuid: uuidRef}};
		var dd = sa.open(_, filter);

		var astream = new streams.WritableStream(fs.createWriteStream(fnameRead));

		
		var buf;
		while (buf = sa.read(_,dd)){
			astream.write(_, buf);
		}
		astream.end();
		var data3 = fs.readFile(fnameRead,_);

		var document = sa.close(_, dd);
		
		checkDocument(_, document, options1);
		compareBuffers(data1, data3);
		strictEqual(data1.length,data3.length,"Buffer Length ok");

	} catch(e){
		console.error(e.stack);
	} finally {
		// Remove document
		var filter = {jsonWhere:{$uuid: uuidRef}};
		var result = sa.remove(_, filter);
	}
	start();
});


asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});