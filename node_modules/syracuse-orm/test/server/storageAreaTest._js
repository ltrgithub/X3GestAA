"use strict";

var syracuse = require('syracuse-main/lib/syracuse'),
	helpers = require('syracuse-core/lib/helpers'),
	globals = require('streamline/lib/globals'),
	adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper,
	streams = require("streamline/lib/streams/server/streams");


var fs = require('fs'),
	util = require('util'),
	sa = require('syracuse-orm/lib/storageArea'),
	qmodule = QUnit.module;


globals.context = globals.context || {};
globals.context.session = {
	id: helpers.uuid.generate(),
	getUserLogin: function(_) { return "guest" },
	getUserProfile: function(_) { 
		
		return {
			user: function(_){
				// getting the administration ORM
				var db = adminHelper.getCollaborationOrm(_);
				
				// the metamodel is associated to the orm
				var model = db.model;
				
				var entity = db.model.getEntity("user");
				// fetchInstance(callback, entity, filter)
				return db.fetchInstance(_, entity, {jsonWhere:{login: "guest"}});
				
			}
		}
	}
}


var doStop = false;
qmodule("storage-area", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			//syracuse.server.close();
			setTimeout(function() {
				process.kill(process.pid);
			}, 100)
		}
	}
});

var uuidRef,
	fname =  __dirname + '/rsrc/documents/test.pdf',
	fnameUpd =  __dirname + '/rsrc/documents/test.xml',
	bufRef,
	optionsRefCre = {
		description: "UNIT_TEST_CREATE",
		content: {
			contentType: "application/pdf",
			fileName: "test1.pdf",
		}
	},
	optionsRefUpd = {
		description: "UNIT_TEST_UPDATE",
		content: {
			contentType: "text/xml",
			fileName: "test2.xml",
		}
	}


//asyncTest('createDocument', 6, function(_){
//	try{
//		bufRef = fs.readFile(fname,_);
//		var document = sa.createDocument(_, optionsRefCre, bufRef);
//		uuidRef = document.$uuid;
//		var props = document.content(_).getProperties(_);
//		strictEqual(uuidRef != null,true,"uuid ["+uuidRef+"] ok");
//		strictEqual(optionsRefCre.description,document.description(_),"description ["+document.description(_)+"] ok");
//		strictEqual(optionsRefCre.content.contentType,props.contentType,"contentType ["+props.contentType+"] ok");
//		strictEqual(optionsRefCre.content.fileName,props.fileName,"fileName ["+props.fileName+"] ok");
//		strictEqual(props.uploadDate != null,true,"uploadDate ["+props.uploadDate+"] ok");
//		strictEqual(props.chunkSize != null,true,"chunkSize ["+props.chunkSize+"] ok");
//	} catch(e){
//		console.error(e.stack);
//	} 	
//	start();
//});
//
//asyncTest('readDocumentAfterCreate', 6, function(_){
//	try{
//		var filter = {jsonWhere:{$uuid: uuidRef}};
//		var document = sa.readDocument(_, filter);
//		var props = document.content(_).getProperties(_);
//		strictEqual(uuidRef,document.$uuid,"uuid ["+uuidRef+"] ok");
//		strictEqual(optionsRefCre.description,document.description(_),"description ["+document.description(_)+"] ok");
//		strictEqual(optionsRefCre.content.contentType,props.contentType,"contentType ["+props.contentType+"] ok");
//		strictEqual(optionsRefCre.content.fileName,props.fileName,"fileName ["+props.fileName+"] ok");
//		strictEqual(props.uploadDate != null,true,"uploadDate ["+props.uploadDate+"] ok");
//		strictEqual(props.chunkSize != null,true,"chunkSize ["+props.chunkSize+"] ok");
//	} catch(e){
//		console.error(e.stack);
//	}
//	start();
//});
//
//asyncTest('updateDocument', 6, function(_){
//	try{
//		var filter = {jsonWhere:{$uuid: uuidRef}};
//		bufRef = fs.readFile(fnameUpd,_);
//		var document = sa.updateDocument(_, optionsRefUpd, bufRef, filter);
//		var props = document.content(_).getProperties(_);
//		strictEqual(document.$uuid,uuidRef,"uuid ["+document.$uuid+"] ok");
//		strictEqual(optionsRefUpd.description,document.description(_),"description ["+document.description(_)+"] ok");
//		strictEqual(optionsRefUpd.content.contentType,props.contentType,"contentType ["+props.contentType+"] ok");
//		strictEqual(optionsRefUpd.content.fileName,props.fileName,"fileName ["+props.fileName+"] ok");
//		strictEqual(props.uploadDate != null,true,"uploadDate ["+props.uploadDate+"] ok");
//		strictEqual(props.chunkSize != null,true,"chunkSize ["+props.chunkSize+"] ok");
//
//	} catch(e){
//		console.error(e.stack);
//	} 	
//	start();
//});
//
//asyncTest('readDocumentAfterUpdate', 6, function(_){
//	try{
//		var filter = {jsonWhere:{$uuid: uuidRef}};
//		var document = sa.readDocument(_, filter);
//		var props = document.content(_).getProperties(_);
//		strictEqual(uuidRef,document.$uuid,"uuid ["+uuidRef+"] ok");
//		strictEqual(optionsRefUpd.description,document.description(_),"description ["+document.description(_)+"] ok");
//		strictEqual(optionsRefUpd.content.contentType,props.contentType,"contentType ["+props.contentType+"] ok");
//		strictEqual(optionsRefUpd.content.fileName,props.fileName,"fileName ["+props.fileName+"] ok");
//		strictEqual(props.uploadDate != null,true,"uploadDate ["+props.uploadDate+"] ok");
//		strictEqual(props.chunkSize != null,true,"chunkSize ["+props.chunkSize+"] ok");
//	} catch(e){
//		console.error(e.stack);
//	}
//	start();
//});
//
//asyncTest('removeDocument', 1, function(_){
//	try{
//		var filter = {jsonWhere:{$uuid: uuidRef}};
//		var result = sa.removeDocument(_, filter);
//		strictEqual(result,1,"Remove ok");
//	} catch(e){
//		console.error(e.stack);
//	}
//	start();
//});
//
//asyncTest('readDocumentAfterRemove', 1, function(_){
//	try{
//
//		var filter = {jsonWhere:{$uuid: uuidRef}};
//		var document = sa.readDocument(_, filter);
//	} catch(e){
//		strictEqual(e.message,"Document not found","read failed ok");
//		//console.error(e.stack);
//	}
//	start();
//});
//
//
//
//
//
//



asyncTest('createStreamDocument', 1, function(_){
	try{

		var dd = sa.openDocument(_, null);

		
		var astream = new streams.ReadableStream(fs.createReadStream(fname));
		
		var buf;
		while (buf = astream.read(_,10000)){
			//console.log("READ STREAM");
			dd.write(_, optionsRefCre, buf);
		}
		var document = dd.close(_);


		strictEqual(true,true,"true ok");
	} catch(e){
		console.error(e.stack);
	} 	
	start();
});





asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});