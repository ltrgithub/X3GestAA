"use strict"

var module = QUnit.module;
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;
var forEachKey = helpers.object.forEachKey;
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var registry = require("syracuse-sdata/lib/sdataRegistry");
var mongodb = require("mongodb");
var sys = require("util");
var factory = require("syracuse-orm/lib/factory");
var parser = require('syracuse-sdata/lib/parser/parser');
//
var tracer = null;
var tracer = console.log;
//force basic auth
config.session = config.session || {};
config.session.auth = "basic";
config.session.ignoreStoreSession = true;

//add model
var endPoint = {
	contract: require("test-contract/lib/contract").contract,
	datasets: {
		mongodb_example: {
			driver: "mongodb",
			port: 27017
		}
	}
};
config.sdata.endpoints.push(endPoint);
endPoint.contract.datasets = endPoint.datasets;

var baseUrl = "http://localhost:3004"
var contractUrl = "/sdata/example/admin/mongodb_example/";
var port = 3004;
var syracuse = require('syracuse-main/lib/syracuse');
var streams = require('streamline/lib/streams/streams');
//
function _getModel() {
	return dataModel.make(endPoint.contract, "mongodb_example");
}
//
var doStop = false;
module("directFrameworkTest", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			//syracuse.server.close();
			setTimeout(function() {
				process.kill(process.pid);
			}, 100)
		}
	}
});

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets["mongodb_example"].hostname, endPoint.datasets["mongodb_example"].port, {});
	var db = new mongodb.Db(endPoint.datasets["mongodb_example"].database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");
	start();
});

asyncTest("list snapshot test", 5, function(_) {
	var db = dataModel.getOrm(_, _getModel(), endPoint.datasets.mongodb_example);
	// make a country
	var countryEntity = db.model.getEntity("country");
	var country = countryEntity.factory.createInstance(_, null, db);
	country.code(_, "FR");
	country.description(_, "France");
	country.save(_);
	// deep navigate conditions
	var addressEntity = db.model.getEntity("address");
	var address = addressEntity.factory.createInstance(_, null, db);
	address.country(_, country);
	var userEntity = db.model.getEntity("user");
	var user = userEntity.factory.createInstance(_, null, db);
	user.lastName(_, "TestUser");
	user.address(_, address);
	var postEntity = db.model.getEntity("post");
	var post1 = postEntity.factory.createInstance(_, null, db);
	post1.postNum(_, 1);
	user.posts(_).set(_, post1);
	user.save(_);
	var diag = [];
	user.getAllDiagnoses(_, diag);
	ok(diag.length == 0, "User saved ok");
	// reset user entity
	user = db.fetchInstance(_, userEntity, user.$uuid);
	ok(user != null, "User fetch ok");
	var post2 = postEntity.factory.createInstance(_, null, db);
	post2.postNum(_, 2);
	user.posts(_).set(_, post2);
	strictEqual(user.posts(_).getLength(), 2, "Posts count ok");
	strictEqual(user.$snapshot.posts(_).getLength(), 1, "Snapshot posts count ok");
	tracer && tracer("posts (99): "+sys.inspect(user.$snapshot.posts(_), null, 4));
	tracer && tracer("snapshot posts (100): "+sys.inspect(user.$snapshot.posts(_), null, 4));
	var snapList = user.$snapshot.posts(_).toArray(_);
	tracer && tracer("snapshot posts array (102): "+sys.inspect(snapList, null, 4));
	strictEqual(snapList[0].postNum(_), 1, "Got postnum ok");
	//
	start();
});

asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});
