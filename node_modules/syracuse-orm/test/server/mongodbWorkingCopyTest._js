"use strict";

var module = QUnit.module;
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;
var forEachKey = helpers.object.forEachKey;
var types = require('syracuse-core/lib/types/allTypes');
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var dataModel = require("syracuse-orm/lib/dataModel");
var DataContext = require("syracuse-orm/lib/dataContext").DataContext;
var registry = require("syracuse-sdata/lib/sdataRegistry");
var workingCopy = require("syracuse-sdata/lib/workingCopy");
var mongodb = require("mongodb");
var sys = require("util");

var tracer = null;
var tracer = console.log;

//force basic auth
config.session = config.session || {};
config.session.auth = "basic";

//add model
var endPoint = {
	contract: require("test-contract/lib/contract").contract,
	datasets: {
		example: {
			login: "root",
			password: config.sqlPassword || ""
		},
		mongodb_example: {
			driver: "mongodb",
			port: 27017
		}
	}
};
config.sdata.endpoints.push(endPoint);

var baseUrl = "http://localhost:3004"
var contractUrl = "/sdata/example/admin/mongodb_example/";
var port = 3004;
var syracuse = require('syracuse-main/lib/syracuse');
var streams = require('streamline/lib/streams/streams');
//
function getCookie(_) {
	var response = new streams.httpRequest({
		url: baseUrl + "/syracuse-main/html/main.html",
		user: "guest",
		password: "guest"
	}).end().response(_);
	response.readAll(_);
	strictEqual(response.statusCode, 200, "user authenticated");
	return response.headers["set-cookie"];
}

function post(_, cookie, url, data, statusCode) {
	var response = streams.httpRequest({
		method: "post",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 201, "status verified");
	return JSON.parse(response.readAll(_));
}

function put(_, cookie, url, data, statusCode) {
	var response = streams.httpRequest({
		method: "put",
		url: url.indexOf("http") == 0 ? url : baseUrl + contractUrl + url,
		headers: {
			"content-type": "application/json",
			cookie: cookie
		}
	}).end(JSON.stringify(data)).response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

function get(_, cookie, url, statusCode, facet) {
	var type = facet || "user.$details";
	var response = streams.httpRequest({
		method: "get",
		url: url.indexOf("http") == 0 ? url : baseUrl + "/sdata/example/admin/mongodb_example/" + url,
		headers: {
			cookie: cookie,
			// TODO : send class too ...
			accept: "application/json;vnd.sage.syracuse.representation=example.admin.mongodb_example." + type
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

function del(_, cookie, url, statusCode) {
	var response = streams.httpRequest({
		method: "delete",
		url: baseUrl + "/sdata/example/admin/mongodb_example/" + url,
		headers: {
			cookie: cookie
		}
	}).end().response(_);
	strictEqual(response.statusCode, statusCode || 200, "status verified");
	return JSON.parse(response.readAll(_));
}

function _getModel() {
	return dataModel.make(registry.applications.example.contracts.admin, "mongodb_example");
}

function _createDataContext() {
	return new DataContext(_getModel(), true);
}

var doStop = false;
module("basicWorkingCopyUsingMongodb", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			//syracuse.server.close();
			setTimeout(function() {
				process.kill(process.pid);
			}, 100)
		}
	}
});

var franceID = "";
var usID = "";

asyncTest("init database", 1, function(_) {
	var server = new mongodb.Server(endPoint.datasets["mongodb_example"].hostname, endPoint.datasets["mongodb_example"].port, {});
	var db = new mongodb.Db(endPoint.datasets["mongodb_example"].database, server, {});
	db = db.open(_);
	db.dropDatabase(_);
	ok(true, "mongodb initialized");
	start();
});

//start syracuse server ONLY AFTER init database
syracuse.server.listen(null, port);

function onlyInfo(diags) {
	return diags.every(function(diag) {
		return diag.severity == "info";
	});
}

function hasErrors(resource, includeWrn) {
	var result = false;
	if(resource.$diagnoses)
		result = resource.$diagnoses.some(function(diag) {
			return (diag.severity == "error") || (includeWrn && (diag.severity == "warning"));
		});
	if(!result) 
		result = resource.$properties && Object.keys(resource.$properties).some(function(prop) {
			return hasErrors(resource.$properties[prop], includeWrn);
		});
	if(!result)
		result = resource.$actions && Object.keys(resource.$actions).some(function(prop) {
			return hasErrors(resource.$actions[prop], includeWrn);
		});
	return result;
}

asyncTest("simple object creation", 21, function(_) {
	var cookie = getCookie(_);
	// Create FR
	var body = post(_, cookie, "countries/$template/$workingCopies?trackingId=" + uuid.generate(), {});
	franceID = body.$uuid;
	strictEqual(body.$etag, 1, "create etag test");
	ok(franceID, "import  countries OK");
	body = put(_, cookie, body.$url, {
		$key: franceID,
		$etag: body.$etag,
		code: "FR",
		description: "France",
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	});
	strictEqual(body.$etag, 2, "after save etag test");
	strictEqual(onlyInfo(body.$actions.$save.$diagnoses), true, "save diags ok");
	body = get(_, cookie, "countries('" + franceID + "')");
	strictEqual(body.code, "FR", "fetch FR test");
	//
	// Create US
	console.log("Create US start");
	body = post(_, cookie, "countries/$template/$workingCopies?trackingId=" + uuid.generate(), {});
	usID = body.$uuid;
	body = put(_, cookie, body.$url, {
		$key: usID,
		$etag: body.$etag,
		code: "US",
		description: "US",
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	});
	body = get(_, cookie, "countries('" + usID + "')");
	strictEqual(body.code, "US", "fetch US test");
	console.log("Create US end");
	// check count
	console.log("Check count start");
	body = get(_, cookie, "countries");
	console.log("Create count end :" + sys.inspect(body));
	strictEqual(body.$resources.length, 2, "Countries count test");
	// create duplicate country
	var body = post(_, cookie, "countries/$template/$workingCopies?trackingId=" + uuid.generate(), {}, 201);
	body = put(_, cookie, body.$url, {
		$key: body.$uuid,
		$etag: body.$etag,
		code: "FR",
		description: "France"
	}, 200);
	console.log("body(217): "+sys.inspect(body, null,4));
	strictEqual(body.$properties.code.$diagnoses[0].message, "country: the property(ies) value(s) (code) must be unique", "set code to existing one ok");
	// insist ;-)
	body = put(_, cookie, body.$url, {
		$key: body.$uuid,
		$etag: body.$etag,
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	}, 200);
	console.log("body(226): "+sys.inspect(body, null,4));
	strictEqual(body.$properties.code.$diagnoses[0].message, "country: the property(ies) value(s) (code) must be unique", "try to save existing code ok");
//	ok(!onlyInfo(body.$actions.$save.$diagnoses), true, "Save errors ok");
	ok(hasErrors(body), true, "Save errors ok");
	//
	start();
});

var _data = {};
var _session = {
	setData: function(name, value) {
		var old = _data[name];
		if (old == value) return;

		if (old && old.onDestroy) {
			old.onDestroy();
		}
		if (typeof value == "undefined") delete _data[name];
		else _data[name] = value;
	},
	getData: function(name) {
		return _data[name];
	},
	_reset: function() {
		_data = {};
	}
}

function _resetSession() {
	_data = {};
}

function _createRequest(method, url, data, set) {
	var baseUrl = "http://localhost/sdata/example/admin/mongodb_example"
	return {
		session: _session,
		method: method,
		url: (set ? url : (baseUrl + url)).replace(/'/g, "%27"),
		context: {
			parseBody: function(_) {
				return data;
			}
		},
		headers: {
			cookie: "fake cookie"
		}
	}
}

function _checkStatus(response, statusCode, message) {
	strictEqual(response.statusCode, statusCode, message);
	if (response.statusCode != statusCode) {
		console.log(response);
		doStop = true;
		throw new Error("aborting test");
	}
}

var createdUser = "";
asyncTest("create user test", 8, function(_) {
	var cookie = getCookie(_);
	// Create user
	var body = post(_, cookie, "users/$template/$workingCopies?trackingId=" + uuid.generate(), {});
	createdUser = body.$uuid;
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		firstName: "John",
		lastName: "Smith"
	});
	// add post
	console.log("add post ====");
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		posts: [{
			$uuid: uuid.generate(),
			text: "First Post",
			$index: 0,
			postNum: 1
		}]
	});
	console.log("body: " + sys.inspect(body, null, 4));
	// add a visited country, expects description in return
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		visitedCountries: [{
			$uuid: franceID,
			$index: 0
		}]
	});
	console.log("body(323): " + sys.inspect(body, null, 4));
	strictEqual(body.visitedCountries[0].description, "France", "Returned country description ok");
	// save
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	});
	ok(onlyInfo(body.$actions.$save.$diagnoses), "save diags ok");
	//
	start();
});

asyncTest("add/modify/delete childrens - user test", 18, function(_) {
	var cookie = getCookie(_);
	var body;
	// Fetch user WC
	//	console.log("add/modify/delete childrens=================================");
	body = post(_, cookie, "users('" + createdUser + "')/$workingCopies?trackingId=" + uuid.generate(), {});
	//	console.log("add/modify/delete childrens=================================");
	strictEqual(body.firstName, "John", "WC created in edit mode");
	strictEqual(body.posts[0].text, "First Post", "WC created in edit mode");
	strictEqual(body.posts[0].$index, 0, "First Post index ok");
	// modify and save first post
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		posts: [{
			$uuid: body.posts[0].$uuid,
			text: "Changed First Post",
			$index: 0
		}],
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	});
	ok(onlyInfo(body.$actions.$save.$diagnoses), "save diags ok");
	// Fetch user WC
	body = post(_, cookie, "users('" + createdUser + "')/$workingCopies?trackingId=" + uuid.generate(), {});
	strictEqual(body.posts[0].text, "Changed First Post", "Post modification");
	// add second post
	var willDeleteId = uuid.generate();
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		posts: [{
			$uuid: uuid.generate(),
			text: "Second Post",
			$index: 1,
			postNum: 2
		}, {
			$uuid: willDeleteId,
			text: "Will Delete",
			$index: 2
		}],
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	});
	ok(onlyInfo(body.$actions.$save.$diagnoses), "save diags ok");
	// check posts
	body = post(_, cookie, "users('" + createdUser + "')/$workingCopies?trackingId=" + uuid.generate(), {});
	strictEqual(body.posts.length, 3, "posts count");
	strictEqual(body.posts[0].text, "Changed First Post", "First Post");
	strictEqual(body.posts[1].text, "Second Post", "Second Post");
	// delete	
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		posts: [{
			$uuid: willDeleteId,
			$index: 2,
			$isDeleted: true
		}],
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	});
	// check posts
	body = post(_, cookie, "users('" + createdUser + "')/$workingCopies?trackingId=" + uuid.generate(), {});
	strictEqual(body.posts.length, 2, "posts count");

	start();
});

asyncTest("child adress test", 18, function(_) {
	var cookie = getCookie(_);
	var body;
	// Fetch user WC
	body = post(_, cookie, "users('" + createdUser + "')/$workingCopies?trackingId=" + uuid.generate(), {});
	//
	console.log("child adress test=================================");
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		address: {
			$uuid: uuid.generate(),
			country: {
				$uuid: usID
			},
			city: "New York",
			street: "66"
		},
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	});
	console.log("child adress test=================================");
	//	console.log("body:"+sys.inspect(body));
	ok(onlyInfo(body.$actions.$save.$diagnoses), "save diags ok");
	// address modify
	body = post(_, cookie, "users('" + createdUser + "')/$workingCopies?trackingId=" + uuid.generate(), {});
	strictEqual(body.address.city, "New York", "City check(1)");
	console.log("address test (434) city modify");
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		address: {
			city: "Detroit",
		},
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	});
	console.log("address test (446) body: "+sys.inspect(body, null, 4));
	ok(onlyInfo(body.$actions.$save.$diagnoses), "save diags ok");
	body = post(_, cookie, "users('" + createdUser + "')/$workingCopies?trackingId=" + uuid.generate(), {});
	strictEqual(body.address.city, "Detroit", "City check(2)");
	strictEqual(body.address.street, "66", "Street check(2)");
	// address country modify
	body = post(_, cookie, "users('" + createdUser + "')/$workingCopies?trackingId=" + uuid.generate(), {});
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		address: {
			country: { $uuid: franceID, $title: "France" },
		},
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	});
	console.log("address mod(450): "+sys.inspect(body, null, 4));
	strictEqual(body.address.country.$uuid, franceID, "Country modification uuid Ok");
	strictEqual(body.address.country.code, "FR", "Country modification code Ok");
	// are posts still there ?
	strictEqual(body.posts.length, 2, "posts count");
	strictEqual(body.posts[0].text, "Changed First Post", "First Post");
	strictEqual(body.posts[1].text, "Second Post", "Second Post");

	start();
});

asyncTest("Various controls et diagnoses", 29, function(_) {
	var cookie = getCookie(_);
	var body;
	// Fetch user WC
	body = post(_, cookie, "users('" + createdUser + "')/$workingCopies?trackingId=" + uuid.generate(), {});
	// computed full name test
	strictEqual(body.fullName, "John Smith", "Fullname checked");
	// put errorneous data
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		firstName: "Jo"
	}, 200);
	console.log("body(mod firstname):" + sys.inspect(body, null, 4));
	strictEqual(body.$properties.firstName.$diagnoses.length, 1, "Error count should be 1");
	strictEqual(body.$properties.firstName.$diagnoses[0].severity, "error", "Severity should be error (1)");
	// changed data should clear error condition
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		firstName: "Joe"
	});
	ok(!body.$properties.firstName || (body.$properties.firstName.$diagnoses.length==0), "Errors cleared");
	// $control test (dont accept first names starting with $)
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		firstName: "$Joe"
	}, 200);
	strictEqual(body.$properties.firstName.$diagnoses.length, 1, "Error count should be 1");
	strictEqual(body.$properties.firstName.$diagnoses[0].severity, "error", "Severity should be error");
	strictEqual(body.$properties.firstName.$diagnoses[0].message, "firstName cannot start with $", "Error message check");
	//	console.log("!!!!!!!!!!body:"+sys.inspect(body.$properties.firstName.$diagnoses));
	// mandatory lastName
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		firstName: "Joe",
		lastName: ""
	}, 200);
	strictEqual(body.$properties.lastName.$diagnoses.length, 1, "Error count should be 1");
	strictEqual(body.$properties.lastName.$diagnoses[0].severity, "error", "Severity should be error (2)");
	// clear error
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		lastName: "Smith"
	});
	ok(!body.$properties.lastName || (body.$properties.lastName.$diagnoses.length==0), "Errors cleared");
	// attempt to save errorneous data
	// Fetch user WC
	body = post(_, cookie, "users('" + createdUser + "')/$workingCopies?trackingId=" + uuid.generate(), {});
	// mandatory lastName
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		firstName: "Joe",
		lastName: ""
	}, 200);
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	}, 200);
	//	console.log("body(392): "+sys.inspect(body,null,4));
	ok(hasErrors(body), "Save error ok(1)");
	// global control error : 
	// Fetch user WC
	body = post(_, cookie, "users('" + createdUser + "')/$workingCopies?trackingId=" + uuid.generate(), {});
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		lastName: "Smithy",
		$actions: {
			$save: {
				$isRequested: true
			}
		}
	}, 200);
	ok(!onlyInfo(body.$diagnoses), "Save error ok(2)");
	//	console.log("body:"+sys.inspect(body));
	// test mandatory ref diagnoses on address
	body = post(_, cookie, "addresses/$template/$workingCopies", {}, 201);
	// modify 
	body = put(_, cookie, body.$url, {
		street: "Main Street",
		$etag: body.$etag
	}, 200);
	// might have diagnoses for country
	// set the country
	body = put(_, cookie, body.$url, {
		country: {$uuid: franceID},
		$etag: body.$etag
	}, 200);
	// country diags must be cleared, now we can save
	body = put(_, cookie, body.$url, {
		$actions: {
			$save: {
				$isRequested: true
			}
		},
		$etag: body.$etag
	}, 200);
	ok(onlyInfo(body.$actions.$save.$diagnoses), "save with required ok");
	//
	start();
});

asyncTest("$actions test", 9, function(_) {
	var cookie = getCookie(_);
	var body;
	// Fetch user WC
	body = post(_, cookie, "users('" + createdUser + "')/$workingCopies?trackingId=" + uuid.generate(), {});
	strictEqual(body.firstName, "John", "WC created in edit mode");
	//
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		posts: {
			$actions: {
				$create: {
					$isRequested: true
				}
			}
		}
	});
	strictEqual(body.posts.length, 3, "post created ok");

	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		$actions: {
			changeLastName: {
				$isRequested: true
			}
		}
	});
	strictEqual(body.lastName, "changedLastName", "service call ok");
	strictEqual(body.posts.length, 3, "posts length ok");
	// delete child service
	body.posts[2].$actions = {
		$delete: {
			$isRequested: true
		}
	};
	console.log("add/modify/delete childrens=================================");
	console.log("etag: " + body.$etag);
	body = put(_, cookie, body.$url, {
		$key: createdUser,
		$etag: body.$etag,
		posts: body.posts
	});
	console.log("body actions: " + sys.inspect(body, null, 4));

	start();
});

asyncTest("Plural references", 18, function(_) {
	var cookie = getCookie(_);
	var body;
	
	// create refA
	body = post(_, cookie, "refAs", {description: "RefA1"}, 201);
	var refA1 = body.$uuid;
	body = post(_, cookie, "refAs", {description: "RefA2"}, 201);
	var refA2 = body.$uuid;
	// create refB
	body = post(_, cookie, "refBs", {description: "RefB1"}, 201);
	var refB1 = body.$uuid;
	body = post(_, cookie, "refBs", {description: "RefB2"}, 201);
	var refB2 = body.$uuid;
	// make links
	tracer && tracer("648: associating");
	body = put(_, cookie, "refAs('"+refA1+"')", {
		refBList:[{$uuid: refB1}, {$uuid: refB2}]
	}, 200);
	tracer && tracer("648 associating body: "+sys.inspect(body, null, 4));
	body = put(_, cookie, "refBs('"+refB1+"')", {
		refAList:[{$uuid: refA2}]
	}, 200);
	tracer && tracer("658 associating body: "+sys.inspect(body, null, 4));
	// get refA1, should have 2 refBList
	body = get(_, cookie, "refAs('"+refA1+"')", 200);
	tracer && tracer("get refA1 body: "+sys.inspect(body, null, 4));
	strictEqual(body.refBList.length, 2, "refA1.refBList.length ok");
	// get refB1, should have 2 refAList
	body = get(_, cookie, "refBs('"+refB1+"')", 200);
	tracer && tracer("get refB1 body: "+sys.inspect(body, null, 4));
	strictEqual(body.refAList.length, 2, "refB1.refAList.length ok");
	// unassociate the 2 refBs
	tracer && tracer("688 unassociating");
	body = put(_, cookie, "refAs('"+refA1+"')", {
		refBList:[{$uuid: refB1, $isDeleted: true}, {$uuid: refB2, $isDeleted: true}]
	}, 200);
	tracer && tracer("end 688 unassociating");
	// A1.BList must be empty
	body = get(_, cookie, "refAs('"+refA1+"')", 200);
	ok(!body.refBList || !body.refBList.length, "refA1.refBList empty ok");
	// B1.RefAList must be of 1 element
	body = get(_, cookie, "refBs('"+refB1+"')", 200);
	strictEqual(body.refAList.length, 1, "refB1.refAList.length ok");
	// B1.RefAList must be empty
	body = get(_, cookie, "refBs('"+refB2+"')", 200);
	ok(!body.refAList || !body.refAList.length, "refB2.refAList empty ok");
		
	start();
});

asyncTest("OneToMany references", 17, function(_) {
	var cookie = getCookie(_);
	var body;
	
	// create refA
	body = post(_, cookie, "refAs", {description: "RefA"}, 201);
	var refA = body.$uuid;
	// create refCs
	body = post(_, cookie, "refCs", {description: "RefC1"}, 201);
	var refC1 = body.$uuid;
	body = post(_, cookie, "refCs", {description: "RefC2"}, 201);
	var refC2 = body.$uuid;
	body = post(_, cookie, "refCs", {description: "RefC3"}, 201);
	var refC3 = body.$uuid;
	// add refC, method 1
	body = put(_, cookie, "refCs('" + refC1 + "')", { refA: { $uuid: refA } }, 200);
	tracer && tracer("686 refC1 body: "+sys.inspect(body, null, 4));
	strictEqual(body.refA.$uuid, refA, "refA affected Ok");
	// add refC, method 2
	body = put(_, cookie, "refAs('" + refA + "')", { refCList: [{$uuid:refC2}, {$uuid:refC3}] }, 200);
	tracer && tracer("690 refA body: "+sys.inspect(body, null, 4));
	// check refA
	body = get(_, cookie, "refAs('"+refA+"')", 200);
	tracer && tracer("693 refA get body: "+sys.inspect(body, null, 4));
	strictEqual(body.refCList.length, 3, "refC2 added Ok");
	// delete refC1
	body = put(_, cookie, "refAs('" + refA + "')", { refCList: [{$uuid:refC1, $isDeleted:true}, {$uuid:refC3, $isDeleted:true}] }, 200);
	tracer && tracer("refA put body: "+sys.inspect(body, null, 4));
	body = get(_, cookie, "refAs('"+refA+"')", 200);
	tracer && tracer("697 refA get body: "+sys.inspect(body, null, 4));
	strictEqual(body.refCList.length, 1, "refC1 deleted Ok");
	// refC1 and refC3 shouldn't be associated anymore
	body = get(_, cookie, "refCs('"+refC1+"')", 200);
	ok(!body.refAList || body.refAList.length, "refC1 not associated Ok");
	body = get(_, cookie, "refCs('"+refC3+"')", 200);
	ok(!body.refAList || body.refAList.length, "refC3 not associated Ok");
	
	start();
});

// TODO: TEST : default relations order by
asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	start();
});