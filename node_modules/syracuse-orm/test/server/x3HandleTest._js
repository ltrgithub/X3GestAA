"use strict"

var module = QUnit.module;
var helpers = require('syracuse-core/lib/helpers');
var uuid = helpers.uuid;
var forEachKey = helpers.object.forEachKey;
var config = require('syracuse-main/lib/nodeconfig').config; // must be first syracuse require
var sys = require("util");
var factory = require("syracuse-orm/lib/factory");
var x3Handle = require("syracuse-orm/lib/dbHandles/x3");
var pool = require("./rsrc/x3HandlePoolStub");

var tracer = console.log;
//var tracer = null;

var doStop = false;
module("x3HandleTest", {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			//syracuse.server.close();
			setTimeout(function() {
				process.kill(process.pid);
			}, 100)
		}
	}
});

var handle;
asyncTest("Initialize", 1, function(_) {
	x3Handle.setup({
		x3driver: pool
	});
	var ep = {
		$uuid: helpers.uuid.generate(),
		getBaseUrl: function(_) {
			return "";
		},
		getModel: function(_) {
			return x3Handle.makeModel(_, this);
		}
	}
	// create with endpoint stub
	handle = x3Handle.create(_, ep);
	ok(true, "initialized");
	//
	start();
});

asyncTest("Entity creation test", 12, function(_) {
	var entity = handle.getEntity(_, "TestA");
	tracer && tracer("entity (47): " + sys.inspect(entity, null, 4));
	strictEqual(Object.keys(entity.$properties).length, 5, "Properties count ok");
	strictEqual(entity.$properties.CODFIC.$type, "string", "CODFIC type ok");
	strictEqual(entity.$properties.CODFIC.$title, "Code table", "CODFIC title ok");
	strictEqual(entity.$properties.MODULE.$type, "integer", "MODULE type ok");
	deepEqual(entity.$properties.MODULE.$enum, [{
		$value: 1,
		$title: "Tronc commun"
	},{
		$value: 2,
		$title: "Interne superviseur"
	},{
		$value: 3,
		$title: "Interface compta"
	}], "MODULE $enum ok");
	strictEqual(Object.keys(entity.$relations).length, 2, "Relations count ok");
	strictEqual(entity.$relations.CODACT_REF.targetEntity.name, "ACTIV", "CODACT_REF target entity type ok");
	ok(!entity.$relations.CODACT_REF.isPlural, "CODACT_REF not plural ok");
	strictEqual(entity.$relations.ATBCHAMPS.targetEntity.name, "ATBCHAMPS", "ATBCHAMPS target entity type ok");
	ok(entity.$relations.ATBCHAMPS.isPlural, "ATBCHAMPS plural ok");
	// get prototype test
	var detProto = entity.getPrototype(_, "$details");
	strictEqual(detProto.$properties.CODFIC.$title, "{@6}", "$details original proto ok");
	var detProto = entity.getPrototype(_, "$query");
	strictEqual(detProto.$properties.$resources.$item.$properties.CODFIC.$title, "{@6}", "$query original proto ok");
	//
	start();
});

asyncTest("Fetch test", 7, function(_) {
	var testAEntity = handle.getEntity(_, "TestA");
	var inst = handle.fetchInstance(_, testAEntity, "ABATCAL");
	tracer && tracer("instance (66): " + sys.inspect(inst._data, null, 4));
	//
	strictEqual(inst.CODFIC(_), "ABATCAL", "Read string ok");
	strictEqual(inst.MODULE(_), 1, "Read enum ok");
	strictEqual(inst.CODACT_REF(_).CODACT(_), "A1", "Read ref prop ok");
	strictEqual(inst.ATBCHAMPS(_).getLength(), 2, "Children count ok");
	strictEqual(inst.ATBCHAMPS(_).toArray(_)[0].CODZONE(_), "COD", "Child read ok");
	strictEqual(inst.ATBCHAMPS(_).toArray(_)[0].ACTZON_REF(_), null, "Child null ref ok");
	//
	var instArray = handle.fetchInstances(_, testAEntity, {});
	strictEqual(instArray.length, 2, "fetchInstances length ok");
	strictEqual(instArray[0].CODFIC(_), "AABREV", "First fetch ok");
});

asyncTest("stop  tests", 0, function(_) {
	doStop = true;
	//
	start();
});
