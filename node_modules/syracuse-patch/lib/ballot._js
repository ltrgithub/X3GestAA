"use strict";
var locale = require('streamline-locale');
var fs = require('streamline-fs');
var os = require('os');
var dbDriver = require('../../../src/load/dbDriver');
var directory = (process.argv[2] === "PATCH" ? __dirname + "/../../../" : __dirname + "/../../../temp/");
var tracer; // = console.log;

// time until a vote expires (10 minutes)
exports.EXPIRE_TIME = 600000;

// asynchronous wait function: waiting between voting and reading votes
exports.wait = function(time, callback) {
	setTimeout(callback, time);
};

// low level vote function: writes data in file, where all configuration data are in parameters

function _vote(time, data, dir, name, _) {
	data.time = time;
	var contents = JSON.stringify(data);
	delete data.time;
	var filename = dir + "XXX" + name + ".bbb";
	fs.writeFile(filename, contents, "utf8", _);
	// allow reading and writing for all users (votes may be done by different processes under different users)
	fs.chmod(filename, "666", _);
}

// low level function to read votes

function _readVotes(data, time, dir, _) {
	var files = fs.readdir(dir, _);
	var oldestTime = time;
	var firstServer = null;
	var i = files.length;
	LOOP: while (--i >= 0) {
			var file = files[i];
			var r = /^XXX(.*)\.bbb$/.exec(file);
			if (r) {
				try {
					var fileData = JSON.parse(fs.readFile(dir + file, "utf8", _));
					// data in file must fit
					for (var attr in data) {
						if (fileData[attr] !== data[attr]) continue LOOP;
					}
					// file must not be too old
					if (!(time - fileData.time < exports.EXPIRE_TIME)) continue LOOP;
					// search for the oldest database time
					tracer && tracer("Compare " + oldestTime + " " + fileData.time + " " + firstServer + " " + r[1]);
					if (oldestTime > fileData.time || (oldestTime === fileData.time && (!firstServer || r[1] < firstServer))) {
						oldestTime = fileData.time;
						firstServer = r[1];
					}
				} catch (e) {
					tracer && tracer("Exception during file read " + e);
				}
			}
		}
		// normally at least the vote of the own server should be found
	if (!firstServer) throw new Error(locale.format(module, "noWinner"));
	return firstServer;
}

// writes a file, using the given data object. The metadata attribute 'time' must not be set in the data object
// result: time from database
exports.writeVote = function(db, data, _) {
	var noDB;
	try {
		if (!db) {
			tracer && tracer("read database data");
			noDB = true;
			db = dbDriver.open(null, _);
		}
		var time = dbDriver.time(db, _);
		_vote(time, data, directory, os.hostname(), _);
		return time;
	} finally {
		if (noDB && db) db.close(_);
	}
};

exports.readVotes = function(data, time, _) {
	return _readVotes(data, time, directory, _);
};

//for unit tests
exports._vote = _vote;
exports._readVotes = _readVotes;