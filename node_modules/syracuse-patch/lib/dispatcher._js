"use strict";
var url = require('url');
var syracuse;
var mock = require('syracuse-load/lib/mock');


function notifyEnd(_) {
	config.shutDownMarker = true;
}
exports.notifyEnd = notifyEnd;

exports.dispatcher = function(config) {
	var routes = {
		integration: function(_, request, response) {
			var answer = "OK";
			var path = request.url.substr("/patch/integration".length); // remainder of the path
			request.setEncoding("utf8");
			console.log("patch integration");
			var patchdata = request.readAll(_);
			if (!patchdata) {
				response.writeHead(500, {
					"Content-Type": "text/plain"
				});
				response.end('No patch data');
				console.log("No patch data");
				return;
			}
			// batch integration
			if (path === "/batch") {
				try {
					var result = require('syracuse-collaboration/lib/entities/patch').batchIntegration(patchdata, _);
					answer = result;
				} catch (e) {
					response.writeHead(500, {
						"content-Type": "text/plain"
					});
					response.end("1;" + e);
				}
			} else if (path === "/unlock") {
				require('syracuse-collaboration/lib/entities/patch').setLock(_, false);
				answer = "Unlocked";
			} else {
				require('syracuse-patch/lib/integrate').clusterPatch(null, patchdata, {}, _);
				answer = "local patch integrated";
			}
			console.log("patch integrated");
			response.writeHead(200, {
				"Content-Type": "text/plain"
			});
			response.end(answer);
		},
		consistency: function(_, request, response) {
			var result = require('syracuse-patch/lib/patchtools').checkChecksumsAll(_);
			console.log("consistency test");
			response.writeHead(200, {
				"Content-Type": "text/plain"
			});
			response.end(JSON.stringify(result));
		},
		notifyEnd: function(_, request, response) {
			response.writeHead(200, {
				"Content-Type": "text/plain"
			});
			console.log("NOTIFY END");
			response.end('OK');
			notifyEnd(_); // function which manages end of sessions
			return;
		},

	};
	return function(_, request, response) {
		syracuse = syracuse || require('syracuse-main/lib/syracuse');
		if (syracuse.server instanceof mock.MockStreamServer && !request.fromNanny && !request._request.fromNanny) {
			response.writeHead("404", {});
			return response.end("Resource not found.");
		}
		var route = routes[request.url.split('/')[2]];
		if (!route) throw new Error("bad url: " + request.url);
		return route(_, request, response);
	};
};