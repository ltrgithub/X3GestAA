var fs = require('fs');
var util = require('util');


// file for version information at customer's site
exports.VERSION_FILE = "version.txt";
// file containing extra functions which should be executed before restarting the program
exports.EXTRA_FUNCTIONS = 'extra.fkt';

// writes content into file and creates directory if necessary
// parameters: content may be buffer or string. If it is a string, encoding 'utf8' will be assumed 

function writeFile(targetFile, content, _) {
	// console.log("WRITEFILE "+targetFile)
	try {
		fs.writeFile(targetFile, content, _);
	} catch (e) {
		if (e.code === 'ENOENT') { // maybe directory does not exist
			mkdirs(targetFile);
			fs.writeFile(targetFile, content, _);
		} else 
			throw e;
	}
}

exports.writeFile = writeFile;

function createWriteStream(targetFile, _) {
	try {
		return fs.createWriteStream(targetFile);
	} catch (e) {
		if (e.code === 'ENOENT') { // maybe directory does not exist
			mkdirs(targetFile);
			return fs.createWriteStream(targetFile);
		} else 
			throw e;
	}
}

exports.createWriteStream = createWriteStream 
	
function open(targetFile, _) {
	try {
		return fs.open(targetFile, "w", _);
	} catch (e) {
		if (e.code === 'ENOENT') { // maybe directory does not exist
			mkdirs(targetFile);
			return fs.open(targetFile, "w", _);
		} else 
			throw e;
	}
}



exports.open = open; 

function mkdirs(targetFile) {
	// console.log("Path   "+targetFile);
	var segs = targetFile.split('\/');
	var p = '';
	var i = 0;
	while (i < segs.length-1) {
		var seg = segs[i];
		p += (i ? '/' : '') + seg;
		if (!fs.existsSync(p))
			fs.mkdirSync(p);
		i++;
	}	
}

/// copyRec
/// copy start directory recursively into target directory
/// parameters: start: directory (must exist and be a directory)
///             target: target which should contain the contents of start in the end (except for excluded files). Will be created if necessary
///             exclude: object with file names (without paths) which should be regarded as non existing in the start directory (will be removed from target directory if they exist)
function copyRec(start, target, exclude, _) {
	if (!exists(target, _)) { // create target directory
		fs.mkdir(target, _);
	}
	if (!(fs.stat(target, _).isDirectory())) { // target exists and is no directory: delete it first
		fs.unlink(target, _);
		fs.mkdir(target, _);
	}	
	return copyContents(start, target, exclude, _); // copy contents of directory
}

exports.copyRec = copyRec;

/// copyContents
/// copy contents start directory recursively into target directory
/// parameters: start: directory (must exist and be a directory)
///             target: target which should contain the contents of start in the end (except for excluded files)
///             exclude: object with file names (without paths) which should be excluded from copy action
function copyContents(start, target, exclude, _) {
	var startFiles = fs.readdir(start, _);
	var targetFiles = fs.readdir(target, _);
	var targetFilesHash = {};
	var i = targetFiles.length;
	while (--i >= 0) {
		targetFilesHash[targetFiles[i]] = "";
	}
	targetFiles = [];
	i = startFiles.length;
	while (--i >= 0) {
		var filename = startFiles[i];
		if (exclude && filename in exclude)
			continue; // exclude this file
		var startFile = start+"/"+filename;
		var targetFile = target+"/"+filename;
		if (fs.stat(startFile, _).isDirectory()) { // start is directory: copy recursively
			copyRec(startFile, targetFile, null, _);
		} else { // start file is no directory
			if (filename in targetFilesHash && fs.stat(targetFile, _).isDirectory())
				rmdirRec(targetFile, _);
			// copy file
			var buffer = fs.readFile(startFile, _);
			fs.writeFile(targetFile, buffer, _);
			buffer = null;
		}
		// target file has been handled
		delete targetFilesHash[filename];
	}
	for (var file in targetFilesHash)
		targetFiles.push(file);
	i = targetFiles.length;
	while (--i >= 0) {
		var targetFile = target+"/"+targetFiles[i];
		if (fs.stat(targetFile, _).isDirectory())
			rmdirRec(targetFile, _);
		else
			fs.unlink(targetFile, _);
	}
}

// asynchronous file existence test
function exists(path, callback) {
	fs.exists(path, function(ex) { callback(null, ex)});
}

exports.exists = exists;

// delete directory recursively
function rmdirRec(path, _) {
    var files;
    try {
        files = fs.readdir(path, _);
        /* Loop through and delete everything in the sub-tree after checking it */
        for (var i = 0; i < files.length; i++) {
        	var currFile = fs.lstat(path + "/" + files[i], _);
        	
        	if(currFile.isDirectory()) // Recursive function back to the beginning
        		exports.rmdirRec(path + "/" + files[i], _);
        	else // Assume it's a file - perhaps a try/catch belongs here?
        		fs.unlink(path + "/" + files[i], _);
        }
    } catch (err) {}
    return fs.rmdir(path, _);
};

exports.rmdirRec = rmdirRec;
