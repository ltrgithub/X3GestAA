"use strict";
var patchtools = require('../../lib/patchtools');
var unit = require('../fixtures/unit');
var fs = require('streamline-fs');
var locale = require('streamline-locale');
// Test for recursive copy and checksum creation/checking.
// Warning: The unit tests are not independent of each other, the ordering is important. Changing one unit test may disturb others!

import { assert } from 'chai';
Object.keys(assert).forEach(key => {
	if (key !== 'isNaN') global[key] = assert[key];
});

describe(module.id, () => {

	it('start', function(_) {
		locale.setCurrent(_, "en-us");
		fs.mkdir("patchunittest", _);
	});

	it('target directory', function(_) {
		// create start directory
		fs.mkdir("patchunittest/src", _);
		fs.writeFile("patchunittest/src/b", "A", _);
		var hash = unit.makehash("patchunittest/src", _);
		patchtools.copyRec("patchunittest/src", "patchunittest/target", false, _);
		var errors = unit.testhash("patchunittest/target", hash, _);
		strictEqual(errors, "", "Target directory does not yet exist");
		patchtools.rmdirRec("patchunittest/target", _);
		strictEqual(patchtools.exists("patchunittest/target", _), false, "Target directory could be deleted");
		fs.writeFile("patchunittest/target", "AB", _);
		patchtools.copyRec("patchunittest/src", "patchunittest/target", false, _);
		hash = unit.makehash("patchunittest/src", _);
		errors = unit.testhash("patchunittest/target", hash, _);
		strictEqual(errors, "", "Target directory exists as a file");
		// copy with excluded subdirectory
		fs.mkdir("patchunittest/src/" + patchtools.TEMP_DIRECTORY, _);
		fs.mkdir("patchunittest/target/" + patchtools.RELEASE_DIRECTORY, _);
		patchtools.copyRec("patchunittest/src", "patchunittest/target", false, _);
		hash = unit.makehash("patchunittest/src", _);
		delete hash[patchtools.TEMP_DIRECTORY] // remove excluded file in list;
		errors = unit.testhash("patchunittest/target", hash, _);
		strictEqual(errors, "", "Copying with exclusions");

		// put more files
		// in source directory there should be files/directories b, sub/, sub/c, e

		fs.mkdir("patchunittest/src/sub", _);
		fs.writeFile("patchunittest/src/sub/c", "AC", _);
		fs.writeFile("patchunittest/src/e", "AC", _);
		// files in target directory before copying
		// e/, e/test, extra/, extra/test, extrafile
		fs.mkdir("patchunittest/target/e", _); // this directory must be deleted for copying
		fs.writeFile("patchunittest/target/e/test", "AC", _);

		fs.mkdir("patchunittest/target/extra", _); // this directory must be deleted because it is not in source
		fs.writeFile("patchunittest/target/extra/test", "AC", _);
		fs.writeFile("patchunittest/src/extrafile", "AC", _); // this file must be deleted

		patchtools.copyRec("patchunittest/src", "patchunittest/target", false, _);
		hash = unit.makehash("patchunittest/src", _);
		errors = unit.testhash("patchunittest/target", hash, _);
		strictEqual(errors, "", "Target directory exists as a file");

	});

	it('checksums init', function(_) {

		var sha1 = patchtools.makeChecksums("patchunittest", _);
		var errors = [];
		var sha2 = patchtools.checkChecksums("patchunittest", errors, null, _);
		strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
		strictEqual(errors.join(","), "", "No checksum errors");
	});

	it('checksums new', function(_) {
		fs.writeFile("patchunittest/src/aaa", "aa", _);
		var errors = [];
		var sha2 = patchtools.checkChecksums("patchunittest", errors, null, _);
		strictEqual(errors.length, 1, "Number of errors 1");
		strictEqual(errors[0], "Unexpected new file 'patchunittest/src/aaa'", "Correct message");
		var sha1 = patchtools.makeChecksums("patchunittest", _);
		var errors = [];
		var sha2 = patchtools.checkChecksums("patchunittest", errors, null, _);
		strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
		strictEqual(errors.join(","), "", "No checksum errors");
	});

	it('checksums change', function(_) {
		fs.appendFile("patchunittest/src/aaa", "aab", _);
		var errors = [];
		var sha2 = patchtools.checkChecksums("patchunittest", errors, null, _);
		strictEqual(errors.length, 1, "Number of errors 1");
		strictEqual(errors[0], "File 'patchunittest/src/aaa' has been changed", "Correct message");
		var sha1 = patchtools.makeChecksums("patchunittest", _);
		var errors = [];
		var sha2 = patchtools.checkChecksums("patchunittest", errors, null, _);
		strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
		strictEqual(errors.join(","), "", "No checksum errors");
	});

	it('checksums: deleted file', function(_) {
		fs.unlink("patchunittest/src/aaa", _);
		var errors = [];
		var sha2 = patchtools.checkChecksums("patchunittest", errors, null, _);
		strictEqual(errors.length, 1, "Number of errors 1");
		strictEqual(errors[0], "File 'patchunittest/src/aaa' does not exist any more", "Correct message");

		var sha1 = patchtools.makeChecksums("patchunittest", _);
		errors = [];
		var sha2 = patchtools.checkChecksums("patchunittest", errors, null, _);
		strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
		strictEqual(errors.join(","), "", "No checksum errors");
	});

	it('checksums: deleted checksum file', function(_) {
		fs.unlink("patchunittest/src/.checksums", _);
		var errors = [];
		var sha2 = patchtools.checkChecksums("patchunittest", errors, null, _);
		strictEqual(errors.length, 2, "Deleted src/.checksum file " + errors.join(","));
		var sha1 = patchtools.makeChecksums("patchunittest", _);
		errors = [];
		var sha2 = patchtools.checkChecksums("patchunittest", errors, null, _);
		strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
		strictEqual(errors.join(","), "", "No checksum errors");
	});

	it('checksums: corrupt checksum file', function(_) {
		fs.writeFile("patchunittest/src/.checksums", ">a=bc%<", _);
		var errors = [];
		var sha2 = patchtools.checkChecksums("patchunittest", errors, null, _);
		strictEqual(errors.length, 2, "Corrupt src/.checksum file " + errors.join(","));
		var sha1 = patchtools.makeChecksums("patchunittest", _);
		errors = [];
		var sha2 = patchtools.checkChecksums("patchunittest", errors, null, _);
		strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
		strictEqual(errors.join(","), "", "No checksum errors");
	});

	it('checksums: directory instead of file', function(_) {
		fs.writeFile("patchunittest/src/aaa", "aa", _);
		patchtools.makeChecksums("patchunittest", _);
		fs.unlink("patchunittest/src/aaa", _);
		fs.mkdir("patchunittest/src/aaa", _);
		fs.writeFile("patchunittest/src/aaa/t", "src", _);
		var errors = [];
		var sha2 = patchtools.checkChecksums("patchunittest", errors, null, _);
		strictEqual(errors.length, 1, "Number of errors 1");
		strictEqual(errors[0], "File 'patchunittest/src/aaa' was not expected to be a directory", "Correct message");
		var sha1 = patchtools.makeChecksums("patchunittest", _);
		errors = [];
		var sha2 = patchtools.checkChecksums("patchunittest", errors, null, _);
		strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
		strictEqual(errors.join(","), "", "No checksum errors");
	});

	it('checksums: file instead of directory', function(_) {
		patchtools.rmdirRec("patchunittest/src", _);
		fs.writeFile("patchunittest/src", "src", _);
		var errors = [];
		var sha2 = patchtools.checkChecksums("patchunittest", errors, null, _);
		strictEqual(errors.length, 1, "Number of errors 1");
		strictEqual(errors[0], "File 'patchunittest/src' was expected to be a directory", "Correct message");
		var sha1 = patchtools.makeChecksums("patchunittest", _);
		errors = [];
		var sha2 = patchtools.checkChecksums("patchunittest", errors, null, _);
		strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
		strictEqual(errors.join(","), "", "No checksum errors");
	});

	it('fast copy', function(_) {
		// create some data
		fs.mkdir("patchunittest/copy", _);
		fs.writeFile("patchunittest/copy/a.txt", "ab", _);
		fs.writeFile("patchunittest/copy/c.txt", "ab", _);
		fs.mkdir("patchunittest/copy/inner", _);
		fs.writeFile("patchunittest/copy/inner/a.txt", "abc", _);
		fs.mkdir("patchunittest/copy/inner2", _);
		fs.writeFile("patchunittest/copy/inner2/a.txt", "abc", _);
		fs.writeFile("patchunittest/copy/inner2/c.txt", "ab", _);
		fs.writeFile("patchunittest/copy/inner2/d.txt", "ab", _);
		patchtools.makeChecksums("patchunittest/copy", _);
		patchtools.copyRec("patchunittest/copy", "patchunittest/dest", true, _);
		var hash = unit.makehash("patchunittest/copy", _);
		// copy into empty directory
		var errors = unit.testhash("patchunittest/dest", hash, _);
		strictEqual(errors, "", "Fast copy new directory");
		unit.rmdirRec("patchunittest/dest", _);
		fs.writeFile("patchunittest/dest", "dest", _);
		patchtools.copyRec("patchunittest/copy", "patchunittest/dest", true, _);
		hash = unit.makehash("patchunittest/copy", _);
		errors = unit.testhash("patchunittest/dest", hash, _);
		strictEqual(errors, "", "Fast copy new directory instead of file");

		// some changes in source directory
		fs.writeFile("patchunittest/copy/b.txt", "ac", _);
		fs.appendFile("patchunittest/copy/a.txt", "ac", _);
		fs.unlink("patchunittest/copy/c.txt", _);
		fs.writeFile("patchunittest/copy/inner2/b.txt", "ac", _);
		fs.appendFile("patchunittest/copy/inner2/a.txt", "ac", _);
		fs.unlink("patchunittest/copy/inner2/c.txt", _);
		// some changes in dest directory which should be ignored by fast copy
		unit.rmdirRec("patchunittest/dest/inner", _);
		fs.unlink("patchunittest/dest/inner2/d.txt", _);

		patchtools.makeChecksums("patchunittest/copy", _);
		patchtools.copyRec("patchunittest/copy", "patchunittest/dest", true, _);
		strictEqual(patchtools.exists("patchunittest/dest/inner", _), false, "No fast copy of patchunittest/dest/inner") // fast copy should ignore that 'inner' directory does not exist;
		strictEqual(patchtools.exists("patchunittest/dest/c.txt", _), false, "No deletion of patchunittest/dest/c.txt in fast copy") // fast copy should have deleted file c because the checksums file does not contain it any more;
		strictEqual(patchtools.exists("patchunittest/dest/b.txt", _), true, "No creation of patchunittest/dest/b.txt in fast copy") // fast copy should have deleted file c because the checksums file does not contain it any more;
		var text = fs.readFile("patchunittest/dest/a.txt", "utf8", _);
		strictEqual(text, "abac", "Correct contents of file patchunittest/dest/a after fast copy");
		strictEqual(patchtools.exists("patchunittest/dest/inner2/d.txt", _), false, "No fast copy of patchunittest/dest/inner2/d.txt") // fast copy should ignore that file d does not exist;
		strictEqual(patchtools.exists("patchunittest/dest/inner2/c.txt", _), false, "No deletion of patchunittest/dest/inner2/c.txt in fast copy") // fast copy should have deleted file c because the checksums file does not contain it any more;
		strictEqual(patchtools.exists("patchunittest/dest/inner2/b.txt", _), true, "No creation of patchunittest/dest/inner2/b.txt in fast copy") // fast copy should have deleted file c because the checksums file does not contain it any more;
		text = fs.readFile("patchunittest/dest/inner2/a.txt", "utf8", _);
		strictEqual(text, "abcac", "Correct contents of file patchunittest/dest/inner2/a.txt after fast copy");

	});

	// exclude .bbb files in main directory from copying
	it('.bbb files', function(_) {
		fs.mkdir("patchunittest/d1", _);
		fs.mkdir("patchunittest/d2", _);
		fs.writeFile("patchunittest/d1/test1.bbb", "test11", _);
		fs.writeFile("patchunittest/d1/test2.bbb", "test12", _);
		fs.writeFile("patchunittest/d2/test2.bbb", "test22", _);
		fs.writeFile("patchunittest/d2/test3.bbb", "test23", _);
		patchtools.makeChecksums("patchunittest/d1", _);
		patchtools.makeChecksums("patchunittest/d2", _);
		patchtools.copyRec("patchunittest/d1", "patchunittest/d2", true, _);
		strictEqual(patchtools.exists("patchunittest/d2/test3.bbb", _), true, "No deletion of patchunittest/d2/test3.bbb");
		strictEqual(fs.readFile("patchunittest/d2/test3.bbb", "utf8", _), "test23", "Correct content of patchunittest/d2/test3.bbb");
		strictEqual(fs.readFile("patchunittest/d2/test2.bbb", "utf8", _), "test22", "Correct content of patchunittest/d2/test2.bbb");
		strictEqual(patchtools.exists("patchunittest/d2/test1.bbb", _), false, "No creation of patchunittest/d2/test1.bbb");
		patchtools.copyRec("patchunittest/d1", "patchunittest/d2", false, _);
		strictEqual(patchtools.exists("patchunittest/d2/test3.bbb", _), true, "No deletion of patchunittest/d2/test3.bbb");
		strictEqual(fs.readFile("patchunittest/d2/test3.bbb", "utf8", _), "test23", "Correct content of patchunittest/d2/test3.bbb");
		strictEqual(fs.readFile("patchunittest/d2/test2.bbb", "utf8", _), "test22", "Correct content of patchunittest/d2/test2.bbb");
		strictEqual(patchtools.exists("patchunittest/d2/test1.bbb", _), false, "No creation of patchunittest/d2/test1.bbb");
	});

	it('end', function(_) {
		unit.rmdirRec("patchunittest", _);
	});
});