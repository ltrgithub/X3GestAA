var module = QUnit.module;
var write = require("syracuse-patch/lib/write");
var unit = require("syracuse-patch/test/fixtures/unit");
var fs = require("fs");
// Test for recursive copy and checksum creation/checking.
// Warning: The unit tests are not independent of each other, the ordering is important. Changing one unit test may disturb others!

module("patch");

asyncTest("start", 0, function(_) { fs.mkdir("patchunittest", _); start(); })

asyncTest("target directory", 5, function(_) {
	// create start directory
	fs.mkdir("patchunittest/src", _);
	fs.writeFile("patchunittest/src/b", "A", _);
	var hash = unit.makehash("patchunittest/src", _);
	write.copyRec("patchunittest/src", "patchunittest/target", null, _);
	var errors = unit.testhash("patchunittest/target", hash, _);
	strictEqual(errors, "", "Target directory does not yet exist");
	write.rmdirRec("patchunittest/target", _);
	strictEqual(write.exists("patchunittest/target", _), false, "Target directory could be deleted");
	fs.writeFile("patchunittest/target", "AB", _);
	write.copyRec("patchunittest/src", "patchunittest/target", null, _);
	hash = unit.makehash("patchunittest/src", _);
	errors = unit.testhash("patchunittest/target", hash, _);
	strictEqual(errors, "", "Target directory exists as a file");
	// exclude a file
	write.copyRec("patchunittest/src", "patchunittest/target", ["b", "src", "x"], _);
	hash = unit.makehash("patchunittest/src", _);
	delete hash["b"] // remove excluded file in list
	errors = unit.testhash("patchunittest/target", hash, _);	
	strictEqual(errors, "", "Copying with exclusions");
	
	
	
	// put more files
	// in source directory there should be files/directories b, sub/, sub/c, e
	
	fs.mkdir("patchunittest/src/sub", _);
	fs.writeFile("patchunittest/src/sub/c", "AC", _);
	fs.writeFile("patchunittest/src/e", "AC", _);
	// files in target directory before copying
	// e/, e/test, extra/, extra/test, extrafile
	fs.mkdir("patchunittest/target/e", _); // this directory must be deleted for copying
	fs.writeFile("patchunittest/target/e/test", "AC", _);
	
	fs.mkdir("patchunittest/target/extra", _); // this directory must be deleted because it is not in source
	fs.writeFile("patchunittest/target/extra/test", "AC", _);
	fs.writeFile("patchunittest/src/extrafile", "AC", _); // this file must be deleted
	
	write.copyRec("patchunittest/src", "patchunittest/target", null, _);
	hash = unit.makehash("patchunittest/src", _);
	errors = unit.testhash("patchunittest/target", hash, _);	
	strictEqual(errors, "", "Target directory exists as a file");
	
	
	start();
});

asyncTest("checksums init", 2, function(_) {
	var sha1 = write.makeChecksums("patchunittest", _);
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, _);
	strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
	strictEqual(errors.join(","), "", "No checksum errors");
	start();
})

asyncTest("checksums new", 4, function(_) {
	fs.writeFile("patchunittest/src/aaa", "aa", _);
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, _);
	strictEqual(errors.length, 1, "Number of errors 1")
	strictEqual(errors[0], "New file: patchunittest/src/aaa", "Correct message")
	var sha1 = write.makeChecksums("patchunittest", _)
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, _);
	strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
	strictEqual(errors.join(","), "", "No checksum errors");
	start();
})

asyncTest("checksums change", 4, function(_) {
	fs.appendFile("patchunittest/src/aaa", "aab", _);
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, _);
	strictEqual(errors.length, 1, "Number of errors 1")
	strictEqual(errors[0], "Wrong checksum of patchunittest/src/aaa. Expected 7ec9a4b774e2472d8e38bc18a3aa1912bacf483e indeed 0259ecd0719fa9e2ccf3f0fad94ca50fdb38f7a0", "Correct message")
	var sha1 = write.makeChecksums("patchunittest", _)
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, _);
	strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
	strictEqual(errors.join(","), "", "No checksum errors");
	start();
})


asyncTest("checksums: deleted file", 4, function(_) {
	write.unlink("patchunittest/src/aaa", _);
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, _);
	strictEqual(errors.length, 1, "Number of errors 1")
	strictEqual(errors[0], "File has been deleted: patchunittest/src/aaa", "Correct message")

	var sha1 = write.makeChecksums("patchunittest", _)
	errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, _);
	strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
	strictEqual(errors.join(","), "", "No checksum errors");
	start();
})

asyncTest("checksums: deleted checksum file", 3, function(_) {
	write.unlink("patchunittest/src/.checksums", _);
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, _);
	strictEqual(errors.length, 2, "Deleted src/.checksum file "+errors.join(","))
	var sha1 = write.makeChecksums("patchunittest", _)
	errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, _);
	strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
	strictEqual(errors.join(","), "", "No checksum errors");
	start();
})


asyncTest("checksums: corrupt checksum file", 3, function(_) {
	fs.writeFile("patchunittest/src/.checksums", ">a=bc%<", _);
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, _);
	strictEqual(errors.length, 2, "Corrupt src/.checksum file "+errors.join(","))
	var sha1 = write.makeChecksums("patchunittest", _)
	errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, _);
	strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
	strictEqual(errors.join(","), "", "No checksum errors");
	start();
})

asyncTest("checksums: directory instead of file", 4, function(_) {
	fs.writeFile("patchunittest/src/aaa", "aa", _);
	write.makeChecksums("patchunittest", _)
	write.unlink("patchunittest/src/aaa", _)
	write.mkdir("patchunittest/src/aaa", _);
	fs.writeFile("patchunittest/src/aaa/t", "src", _);
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, _);
	strictEqual(errors.length, 1, "Number of errors 1")
	strictEqual(errors[0], "No directory expected at patchunittest/src/aaa", "Correct message")
	var sha1 = write.makeChecksums("patchunittest", _)
	errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, _);
	strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
	strictEqual(errors.join(","), "", "No checksum errors");
	start();
})

asyncTest("checksums: file instead of directory", 4, function(_) {
	write.rmdirRec("patchunittest/src", _);
	fs.writeFile("patchunittest/src", "src", _);
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, _);
	strictEqual(errors.length, 1, "Number of errors 1")
	strictEqual(errors[0], "Directory expected at patchunittest/src", "Correct message")
	var sha1 = write.makeChecksums("patchunittest", _)
	errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, _);
	strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
	strictEqual(errors.join(","), "", "No checksum errors");
	start();
})


asyncTest("end", 0, function(_) { unit.rmdirRec("patchunittest", _); start(); })
	

