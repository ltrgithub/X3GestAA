var module = QUnit.module;
var write = require("syracuse-patch/lib/write");
var unit = require("syracuse-patch/test/fixtures/unit");
var fs = require("fs");
// Test for recursive copy

module("patch");

asyncTest("start", 0, function(_) { fs.mkdir("patchunittest", _); start(); })

asyncTest("target directory", 5, function(_) {
	// create start directory
	fs.mkdir("patchunittest/src", _);
	fs.writeFile("patchunittest/src/b", "A", _);
	var hash = unit.makehash("patchunittest/src", _);
	write.copyRec("patchunittest/src", "patchunittest/target", null, _);
	var errors = unit.testhash("patchunittest/target", hash, _);
	strictEqual(errors, "", "Target directory does not yet exist");
	write.rmdirRec("patchunittest/target", _);
	strictEqual(write.exists("patchunittest/target", _), false, "Target directory could be deleted");
	fs.writeFile("patchunittest/target", "AB", _);
	write.copyRec("patchunittest/src", "patchunittest/target", null, _);
	hash = unit.makehash("patchunittest/src", _);
	errors = unit.testhash("patchunittest/target", hash, _);
	strictEqual(errors, "", "Target directory exists as a file");
	// exclude a file
	write.copyRec("patchunittest/src", "patchunittest/target", ["b", "src", "x"], _);
	hash = unit.makehash("patchunittest/src", _);
	delete hash["b"] // remove excluded file in list
	errors = unit.testhash("patchunittest/target", hash, _);	
	strictEqual(errors, "", "Copying with exclusions");
	
	
	
	// put more files
	// in source directory there should be files/directories b, sub/, sub/c, e
	
	fs.mkdir("patchunittest/src/sub", _);
	fs.writeFile("patchunittest/src/sub/c", "AC", _);
	fs.writeFile("patchunittest/src/e", "AC", _);
	// files in target directory before copying
	// e/, e/test, extra/, extra/test, extrafile
	fs.mkdir("patchunittest/target/e", _); // this directory must be deleted for copying
	fs.writeFile("patchunittest/target/e/test", "AC", _);
	
	fs.mkdir("patchunittest/target/extra", _); // this directory must be deleted because it is not in source
	fs.writeFile("patchunittest/target/extra/test", "AC", _);
	fs.writeFile("patchunittest/src/extrafile", "AC", _); // this file must be deleted
	
	write.copyRec("patchunittest/src", "patchunittest/target", null, _);
	hash = unit.makehash("patchunittest/src", _);
	errors = unit.testhash("patchunittest/target", hash, _);	
	strictEqual(errors, "", "Target directory exists as a file");
	
	
	start();
});


asyncTest("end", 0, function(_) { unit.rmdirRec("patchunittest", _); start(); })
	

