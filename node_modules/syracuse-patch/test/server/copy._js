var module = QUnit.module;
var write = require("syracuse-patch/lib/write");
var unit = require("syracuse-patch/test/fixtures/unit");
var fs = require("fs");
// Test for recursive copy and checksum creation/checking.
// Warning: The unit tests are not independent of each other, the ordering is important. Changing one unit test may disturb others!

module("patch");

asyncTest("start", 0, function(_) { fs.mkdir("patchunittest", _); start(); })

asyncTest("target directory", 5, function(_) {
	// create start directory
	fs.mkdir("patchunittest/src", _);
	fs.writeFile("patchunittest/src/b", "A", _);
	var hash = unit.makehash("patchunittest/src", _);
	write.copyRec("patchunittest/src", "patchunittest/target", false, _);
	var errors = unit.testhash("patchunittest/target", hash, _);
	strictEqual(errors, "", "Target directory does not yet exist");
	write.rmdirRec("patchunittest/target", _);
	strictEqual(write.exists("patchunittest/target", _), false, "Target directory could be deleted");
	fs.writeFile("patchunittest/target", "AB", _);
	write.copyRec("patchunittest/src", "patchunittest/target", false, _);
	hash = unit.makehash("patchunittest/src", _);
	errors = unit.testhash("patchunittest/target", hash, _);
	strictEqual(errors, "", "Target directory exists as a file");
	// copy with excluded subdirectory
	fs.mkdir("patchunittest/src/"+write.TEMP_DIRECTORY, _);
	fs.mkdir("patchunittest/target/"+write.RELEASE_DIRECTORY, _);
	write.copyRec("patchunittest/src", "patchunittest/target", false, _);
	hash = unit.makehash("patchunittest/src", _);
	delete hash[write.TEMP_DIRECTORY] // remove excluded file in list
	errors = unit.testhash("patchunittest/target", hash, _);	
	strictEqual(errors, "", "Copying with exclusions");
	
	// put more files
	// in source directory there should be files/directories b, sub/, sub/c, e
	
	fs.mkdir("patchunittest/src/sub", _);
	fs.writeFile("patchunittest/src/sub/c", "AC", _);
	fs.writeFile("patchunittest/src/e", "AC", _);
	// files in target directory before copying
	// e/, e/test, extra/, extra/test, extrafile
	fs.mkdir("patchunittest/target/e", _); // this directory must be deleted for copying
	fs.writeFile("patchunittest/target/e/test", "AC", _);
	
	fs.mkdir("patchunittest/target/extra", _); // this directory must be deleted because it is not in source
	fs.writeFile("patchunittest/target/extra/test", "AC", _);
	fs.writeFile("patchunittest/src/extrafile", "AC", _); // this file must be deleted
	
	write.copyRec("patchunittest/src", "patchunittest/target", false, _);
	hash = unit.makehash("patchunittest/src", _);
	errors = unit.testhash("patchunittest/target", hash, _);	
	strictEqual(errors, "", "Target directory exists as a file");
	
	
	start();
});

asyncTest("checksums init", 2, function(_) {
	
	var sha1 = write.makeChecksums("patchunittest", _);
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, null, _);
	strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
	strictEqual(errors.join(","), "", "No checksum errors");
	start();
})

asyncTest("checksums new", 4, function(_) {
	fs.writeFile("patchunittest/src/aaa", "aa", _);
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, null, _);
	strictEqual(errors.length, 1, "Number of errors 1")
	strictEqual(errors[0], "Unexpected new file 'patchunittest/src/aaa'", "Correct message")
	var sha1 = write.makeChecksums("patchunittest", _)
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, null, _);
	strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
	strictEqual(errors.join(","), "", "No checksum errors");
	start();
})

asyncTest("checksums change", 4, function(_) {
	fs.appendFile("patchunittest/src/aaa", "aab", _);
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, null, _);
	strictEqual(errors.length, 1, "Number of errors 1")
	strictEqual(errors[0], "File 'patchunittest/src/aaa' has been changed", "Correct message")
	var sha1 = write.makeChecksums("patchunittest", _)
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, null, _);
	strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
	strictEqual(errors.join(","), "", "No checksum errors");
	start();
})


asyncTest("checksums: deleted file", 4, function(_) {
	fs.unlink("patchunittest/src/aaa", _);
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, null, _);
	strictEqual(errors.length, 1, "Number of errors 1")
	strictEqual(errors[0], "File 'patchunittest/src/aaa' does not exist any more", "Correct message")

	var sha1 = write.makeChecksums("patchunittest", _)
	errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, null, _);
	strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
	strictEqual(errors.join(","), "", "No checksum errors");
	start();
})

asyncTest("checksums: deleted checksum file", 3, function(_) {
	fs.unlink("patchunittest/src/.checksums", _);
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, null, _);
	strictEqual(errors.length, 2, "Deleted src/.checksum file "+errors.join(","))
	var sha1 = write.makeChecksums("patchunittest", _)
	errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, null, _);
	strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
	strictEqual(errors.join(","), "", "No checksum errors");
	start();
})


asyncTest("checksums: corrupt checksum file", 3, function(_) {
	fs.writeFile("patchunittest/src/.checksums", ">a=bc%<", _);
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, null, _);
	strictEqual(errors.length, 2, "Corrupt src/.checksum file "+errors.join(","))
	var sha1 = write.makeChecksums("patchunittest", _)
	errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, null, _);
	strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
	strictEqual(errors.join(","), "", "No checksum errors");
	start();
})

asyncTest("checksums: directory instead of file", 4, function(_) {
	fs.writeFile("patchunittest/src/aaa", "aa", _);
	write.makeChecksums("patchunittest", _)
	fs.unlink("patchunittest/src/aaa", _)
	fs.mkdir("patchunittest/src/aaa", _);
	fs.writeFile("patchunittest/src/aaa/t", "src", _);
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, null, _);
	strictEqual(errors.length, 1, "Number of errors 1")
	strictEqual(errors[0], "File 'patchunittest/src/aaa' was not expected to be a directory", "Correct message")
	var sha1 = write.makeChecksums("patchunittest", _)
	errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, null, _);
	strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
	strictEqual(errors.join(","), "", "No checksum errors");
	start();
})

asyncTest("checksums: file instead of directory", 4, function(_) {
	write.rmdirRec("patchunittest/src", _);
	fs.writeFile("patchunittest/src", "src", _);
	var errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, null, _);
	strictEqual(errors.length, 1, "Number of errors 1")
	strictEqual(errors[0], "File 'patchunittest/src' was expected to be a directory", "Correct message")
	var sha1 = write.makeChecksums("patchunittest", _)
	errors = [];
	var sha2 = write.checkChecksums("patchunittest", errors, null, _);
	strictEqual(sha1, sha2, "Checksums of makeChecksums and checkChecksums are equal");
	strictEqual(errors.join(","), "", "No checksum errors");
	start();
})

asyncTest("fast copy", 10, function(_) {
	// create some data
	fs.mkdir("patchunittest/copy", _);
	fs.writeFile("patchunittest/copy/a.txt", "ab", _);
	fs.writeFile("patchunittest/copy/c.txt", "ab", _);
	fs.mkdir("patchunittest/copy/inner", _);
	fs.writeFile("patchunittest/copy/inner/a.txt", "abc", _);
	fs.mkdir("patchunittest/copy/inner2", _);
	fs.writeFile("patchunittest/copy/inner2/a.txt", "abc", _);
	fs.writeFile("patchunittest/copy/inner2/c.txt", "ab", _);
	fs.writeFile("patchunittest/copy/inner2/d.txt", "ab", _);
	write.makeChecksums("patchunittest/copy", _);
	write.copyRec("patchunittest/copy", "patchunittest/dest", true, _);
	hash = unit.makehash("patchunittest/copy", _);
	// copy into empty directory
	var errors = unit.testhash("patchunittest/dest", hash, _);
	strictEqual(errors, "", "Fast copy new directory");
	unit.rmdirRec("patchunittest/dest", _);
	fs.writeFile("patchunittest/dest", "dest", _);
	write.copyRec("patchunittest/copy", "patchunittest/dest", true, _);
	hash = unit.makehash("patchunittest/copy", _);
	errors = unit.testhash("patchunittest/dest", hash, _);
	strictEqual(errors, "", "Fast copy new directory instead of file");	
	
	// some changes in source directory
	fs.writeFile("patchunittest/copy/b.txt", "ac", _);
	fs.appendFile("patchunittest/copy/a.txt", "ac", _);
	fs.unlink("patchunittest/copy/c.txt", _);
	fs.writeFile("patchunittest/copy/inner2/b.txt", "ac", _);
	fs.appendFile("patchunittest/copy/inner2/a.txt", "ac", _);
	fs.unlink("patchunittest/copy/inner2/c.txt", _);
	// some changes in dest directory which should be ignored by fast copy
	unit.rmdirRec("patchunittest/dest/inner", _);
	fs.unlink("patchunittest/dest/inner2/d.txt", _);	
	
	write.makeChecksums("patchunittest/copy", _);
	write.copyRec("patchunittest/copy", "patchunittest/dest", true, _);
	strictEqual(write.exists("patchunittest/dest/inner", _), false, "No fast copy of patchunittest/dest/inner") // fast copy should ignore that 'inner' directory does not exist
	strictEqual(write.exists("patchunittest/dest/c.txt", _), false, "No deletion of patchunittest/dest/c.txt in fast copy") // fast copy should have deleted file c because the checksums file does not contain it any more
	strictEqual(write.exists("patchunittest/dest/b.txt", _), true, "No creation of patchunittest/dest/b.txt in fast copy") // fast copy should have deleted file c because the checksums file does not contain it any more
	var text = fs.readFile("patchunittest/dest/a.txt", "utf8", _);
	strictEqual(text, "abac", "Correct contents of file patchunittest/dest/a after fast copy");
	strictEqual(write.exists("patchunittest/dest/inner2/d.txt", _), false, "No fast copy of patchunittest/dest/inner2/d.txt") // fast copy should ignore that file d does not exist
	strictEqual(write.exists("patchunittest/dest/inner2/c.txt", _), false, "No deletion of patchunittest/dest/inner2/c.txt in fast copy") // fast copy should have deleted file c because the checksums file does not contain it any more
	strictEqual(write.exists("patchunittest/dest/inner2/b.txt", _), true, "No creation of patchunittest/dest/inner2/b.txt in fast copy") // fast copy should have deleted file c because the checksums file does not contain it any more
	text = fs.readFile("patchunittest/dest/inner2/a.txt", "utf8", _);
	strictEqual(text, "abcac", "Correct contents of file patchunittest/dest/inner2/a.txt after fast copy");
	start();
	
})


asyncTest("end", 0, function(_) { unit.rmdirRec("patchunittest", _); start(); })
	

