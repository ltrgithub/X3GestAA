"use strict";
var module = QUnit.module;
var ballot = require("syracuse-patch/lib/ballot");
var fs = require("fs");
var unit = require("syracuse-patch/test/fixtures/unit");
// Test for recursive copy and checksum creation/checking.
// Warning: The unit tests are not independent of each other, the ordering is important. Changing one unit test may disturb others!

module("ballot");

asyncTest("start", 0, function(_) { fs.mkdir("patchunittest", _); start(); })


asyncTest("ballot", 8, function(_) {
	
	var data = {start: 1, end: "2"};
	var data2 = {start: 3, end: "2"};
	ballot._vote(0, data, "patchunittest/", "a", _);
	// are file contents correct?
	var contents = JSON.parse(fs.readFile("patchunittest/XXXa.bbb", "utf8", _));
	strictEqual(contents.time, 0, "correct time");
	strictEqual(contents.start, 1, "correct start");
	strictEqual(contents.end, "2", "correct end");
	ballot._vote(1000, data, "patchunittest/", "b", _);
	ballot._vote(1000, data, "patchunittest/", "c", _);
	ballot._vote(500, data2, "patchunittest/", "d", _);
	fs.writeFile("patchunittest/XXXz.bbb", "nonsense", _);
	strictEqual(ballot._readVotes(data, 2000, "patchunittest/", _), "a", "everything in time");
	strictEqual(ballot._readVotes(data, 0, "patchunittest/", _), "a", "votes in the future");
	strictEqual(ballot._readVotes(data, ballot.EXPIRE_TIME-1, "patchunittest/", _), "a", "last possible timestamp when everything is in time");
	strictEqual(ballot._readVotes(data, ballot.EXPIRE_TIME, "patchunittest/", _), "b", "only latest entries");
	strictEqual(ballot._readVotes(data2, ballot.EXPIRE_TIME-1, "patchunittest/", _), "d", "ballot with other data");
	
	start();
});


asyncTest("end", 0, function(_) { unit.rmdirRec("patchunittest", _); start(); })
	

