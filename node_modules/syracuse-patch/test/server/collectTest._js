"use strict";
var integrate = require("syracuse-patch/lib/integrate");
var patchtools = require("syracuse-patch/lib/patchtools");
var fs = require('streamline-fs');
var unit = require("syracuse-patch/test/fixtures/unit");
// Test for recursive copy and checksum creation/checking.
// Warning: The unit tests are not independent of each other, the ordering is important. Changing one unit test may disturb others!

QUnit.module(module.id);

asyncTest("start", 0, function(_) { fs.mkdir("patchunittest", _); start(); })

// write a dummy patch file
// parameters: path path for file
// version1: start version (only patch number)
// version2: end version (only patch number)
// append: append to existing file
// frame: add X3 patch header/footer 
function writeDummyPatchFile(path, version1, version2, append, frame, _) {
	var contents = "syracuse patch 1 "+version1+" 2013-03-2"+version2+" 1 "+version2+" aaaaaaaaaa"+version1+" aaaaaaaaaa"+version2+"\n";
	contents += "syracuse patchcomment comment"+version2+"\n";
	contents += "blabla "+version2+"\n";
	if (frame) {
		contents = '2,"ASR","PATCH"\n'+contents+'7,"ASR","PATCH"\n';
	}
	if (append) fs.appendFile(path, contents, "utf8", _);
	else fs.writeFile(path, contents, "utf8", _);	
}


asyncTest("collect files", 10, function(_) {
	// write some patch files
	fs.mkdir("patchunittest/"+patchtools.TEMP_DIRECTORY);
	writeDummyPatchFile("patchunittest/patch1.dat", 0, 1, false, false, _);
	writeDummyPatchFile("patchunittest/patch2.dat", 1, 2, false, true, _);
	writeDummyPatchFile("patchunittest/patch3.dat", 3, 4, false, true, _);
	writeDummyPatchFile("patchunittest/patch3.dat", 2, 3, true, true, _);
	writeDummyPatchFile("patchunittest/patch5.dat", 6, 8, true, true, _);
	var error = true;
	try {
		integrate.collectFiles("patchunittest", "patchunittest/patch1.dat", "aaaaaaaaaa3", "aaaaaaaaaa2", _)
		error = false;
	} catch (e) {};
 	strictEqual(error, true, "patch file does not fit")
	strictEqual(integrate.collectFiles("patchunittest", "patchunittest/patch2.dat", "aaaaaaaaaa2", "aaaaaaaaaa1", _), "", "patch already integrated")
	strictEqual(integrate.collectFiles("patchunittest", "patchunittest/patch2.dat", "aaaaaaaaaa2", "aaaaaaaaaa0", _), "", "patch already integrated")
	strictEqual(integrate.collectFiles("patchunittest", "patchunittest/patch3.dat", "aaaaaaaaaa3", "aaaaaaaaaa2", _), "syracuse patch 1 3 2013-03-24 1 4 aaaaaaaaaa3 aaaaaaaaaa4\nsyracuse patchcomment comment4\nblabla 4\n", "new patch, both fit")
	// var resultingPatchFile = fs.readFile("patchunittest/"+patchtools.TEMP_DIRECTORY+"/lastpatch.bbb", "utf8", _);
	// strictEqual(resultingPatchFile, "syracuse patch 1 3 2013-03-24 1 4 aaaaaaaaaa3 aaaaaaaaaa4\nsyracuse patchcomment comment4\nblabla 4\n", "correct file contents")
	strictEqual(integrate.collectFiles("patchunittest", "patchunittest/patch3.dat", "aaaaaaaaaa0", "aaaaaaaaaa3", _), "syracuse patch 1 3 2013-03-24 1 4 aaaaaaaaaa3 aaaaaaaaaa4\nsyracuse patchcomment comment4\nblabla 4\n", "new patch, release fits")
	strictEqual(integrate.collectFiles("patchunittest", "patchunittest/patch3.dat", "aaaaaaaaaa3", "aaaaaaaaaa0", _), "syracuse patch 1 3 2013-03-24 1 4 aaaaaaaaaa3 aaaaaaaaaa4\nsyracuse patchcomment comment4\nblabla 4\n", "new patch, current version fits")
	strictEqual(integrate.collectFiles("patchunittest", "patchunittest/patch3.dat", "aaaaaaaaaa2", "aaaaaaaaaa0", _), "syracuse patch 1 2 2013-03-24 1 4 aaaaaaaaaa2 aaaaaaaaaa4\nsyracuse patchcomment comment4\nblabla 3\nblabla 4\n", "new patch, current version fits, integrate 2 patches")
	strictEqual(integrate.collectFiles("patchunittest", "patchunittest", "aaaaaaaaaa0", "aaaaaaaaaa7", _), "syracuse patch 1 0 2013-03-24 1 4 aaaaaaaaaa0 aaaaaaaaaa4\nsyracuse patchcomment comment4\nblabla 1\nblabla 2\nblabla 3\nblabla 4\n", "new patch, all files in directory")
	strictEqual(integrate.collectFiles("patchunittest", "patchunittest", "aaaaaaaaaa6", "aaaaaaaaaa7", _), "syracuse patch 1 6 2013-03-28 1 8 aaaaaaaaaa6 aaaaaaaaaa8\nsyracuse patchcomment comment8\nblabla 8\n", "new patch, all files in directory, last file")
	// test with given content
	var content = fs.readFile("patchunittest/patch3.dat", _).toString();
	strictEqual(integrate.collectFiles("patchunittest", null, "aaaaaaaaaa3", "aaaaaaaaaa2", _, content), "syracuse patch 1 3 2013-03-24 1 4 aaaaaaaaaa3 aaaaaaaaaa4\nsyracuse patchcomment comment4\nblabla 4\n", "patch contents not from file")
	
		
	start();
});


asyncTest("end", 0, function(_) { unit.rmdirRec("patchunittest", _); start(); })
	

