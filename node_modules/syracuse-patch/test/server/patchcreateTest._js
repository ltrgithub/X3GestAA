var module = QUnit.module;
var p = require("syracuse-patch/lib/patchcreate");
var fs = require("fs");
var util = require('util');
var writeFile = require('syracuse-patch/lib/write').writeFile;
module("patchcreate");

var actions = [];



// Test transformation rules
asyncTest("makeRule abc.txt", 3, function(_) {
	var rule;
	rule = p.makeRule("t", "abc.txt");
	strictEqual(rule[1], "t", "Correct rule name");
	strictEqual(rule[0].toString(), "/^abc\\.txt$/", "Correct constant pattern")
	strictEqual(rule[0].test("abc.txt"), true, "Correct constant pattern")
	start();
});
asyncTest("makeRule **/abc.txt", 3, function(_) {
	var rule = p.makeRule("t", "**/abc.txt");
	strictEqual(rule[0].test("abc.txt"), true, "Found abc.txt")
	strictEqual(rule[0].test("cd/xx/abc.txt"), true, "Found cd/xx/abc.txt")
	strictEqual(rule[0].test("abc.txt/abc.txt1"), false, "Not found abc.txt/abc.txt1")
	start();
});
asyncTest("makeRule */abc.txt", 4, function(_) {
	var rule = p.makeRule("t", "*/abc.txt");
	strictEqual(rule[0].test("abc.txt"), false, "Not Found abc.txt")
	strictEqual(rule[0].test("cd/xx/abc.txt"), false, "Not found cd/xx/abc.txt")
	strictEqual(rule[0].test("abc.tx/abc.txt"), true, "found abc.tx/abc.txt1")
	strictEqual(rule[0].test("x/abc.txt1"), false, "Not found x/abc.txt1")
	start();
});
asyncTest("makeRule ?a*t", 5, function(_) {
	var rule = p.makeRule("t", "?a*t");
	strictEqual(rule[0].test("5abc.txt"), true, " Found 5abc.txt")
	strictEqual(rule[0].test("abc.txt"), false, "Not found abc.txt")
	strictEqual(rule[0].test("aat"), true, "found aat")
	strictEqual(rule[0].test("xat/xat"), false, "Not found xat/xat")
	strictEqual(rule[0].test("aat1"), false, "not found aat1")
	start();
});

// Test 
asyncTest("executeDiff", 10, function(_) {
	var applyRule = 
		function applyRule(name, filename, mode, _) {
		console.log("ApPlY "+name+" "+filename+" "+mode);
		actions.push(name+" "+filename+" "+mode);
	}
	actions.length = 0;
	
	var rules = [p.makeRule("!extra", "**/ABC"), p.makeRule("!extra", "**/ABE"), p.makeRule("ignore", "**/ABC"), p.makeRule("copy", "**/AB?"), p.makeRule("_one", "**/A*"), p.makeRule("_two", "**/B*")];
	
	console.log("Rules "+util.format(rules));
	
	var input = "D node_modules/syracuse-patch/test/fixtures/ABC\n"+
				"M node_modules/syracuse-patch/test/fixtures/ABX\n"+
				"A node_modules/syracuse-patch/test/fixtures/ABE\n"+
				"D ABXX\n";
	
	var oneTime = p.executeDiff(input, applyRule, rules,  _);
	
	strictEqual(actions.length, 2, "number of actions")
	strictEqual(actions[0], "copy node_modules/syracuse-patch/test/fixtures/ABX M", "action name");
	strictEqual(actions[1], "copy node_modules/syracuse-patch/test/fixtures/ABE A", "action name");
	strictEqual("_one" in oneTime, true, "one time action _one");
	strictEqual("_two" in oneTime, false, "no one time action _two");
	strictEqual("extra" in oneTime, true, "one time action extra");
	strictEqual(oneTime.extra.length, 3, "one time action extra");
	strictEqual(oneTime.extra[0], "node_modules/syracuse-patch/test/fixtures/ABC patch3", "extra function");
	strictEqual(oneTime.extra[1], "node_modules/syracuse-patch/test/fixtures/ABC patch1", "extra function");
	strictEqual(oneTime.extra[2], "node_modules/syracuse-patch/test/fixtures/ABE patch11", "extra function");
	
	start();
});
