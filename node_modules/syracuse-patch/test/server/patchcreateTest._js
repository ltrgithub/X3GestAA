var module = QUnit.module;
var p = require("syracuse-patch/lib/patchcreate");
var fs = require("fs");
var path = require("path");
var util = require('util');
var writeFile = require('syracuse-patch/lib/write').writeFile;
module("patchcreate");

var actions = [];



// Test transformation rules
asyncTest("makeRule abc.txt", 3, function(_) {
	var rule;
	rule = p.makeRule("t", "abc.txt");
	strictEqual(rule[1], "t", "Correct rule name");
	strictEqual(rule[0].toString(), "/^abc\\.txt$/", "Correct constant pattern")
	strictEqual(rule[0].test("abc.txt"), true, "Correct constant pattern")
	start();
});

asyncTest("makeRule **/abc.txt", 3, function(_) {
	var rule = p.makeRule("t", "**/abc.txt");
	strictEqual(rule[0].test("abc.txt"), true, "Found abc.txt")
	strictEqual(rule[0].test("cd/xx/abc.txt"), true, "Found cd/xx/abc.txt")
	strictEqual(rule[0].test("abc.txt/abc.txt1"), false, "Not found abc.txt/abc.txt1")
	start();
});
asyncTest("makeRule */abc.txt", 4, function(_) {
	var rule = p.makeRule("t", "*/abc.txt");
	strictEqual(rule[0].test("abc.txt"), false, "Not Found abc.txt")
	strictEqual(rule[0].test("cd/xx/abc.txt"), false, "Not found cd/xx/abc.txt")
	strictEqual(rule[0].test("abc.tx/abc.txt"), true, "found abc.tx/abc.txt1")
	strictEqual(rule[0].test("x/abc.txt1"), false, "Not found x/abc.txt1")
	start();
});

asyncTest("makeRule ?a*t", 5, function(_) {
	var rule = p.makeRule("t", "?a*t");
	strictEqual(rule[0].test("5abc.txt"), true, " Found 5abc.txt")
	strictEqual(rule[0].test("abc.txt"), false, "Not found abc.txt")
	strictEqual(rule[0].test("aat"), true, "found aat")
	strictEqual(rule[0].test("xat/xat"), false, "Not found xat/xat")
	strictEqual(rule[0].test("aat1"), false, "not found aat1")
	start();
});

//Test 
asyncTest("executeDiff", 8, function(_) {
	
	var actions = [];
	var applyRule = 
		function applyRule(name, filename, mode, config, _) {
		console.log("ApPlY "+name+" "+filename+" "+mode);
		actions.push(name+" "+filename+" "+mode);
		return filename;
	}
	actions.length = 0;
	
	var rules = [p.makeRule("extra", "**/ABC"), p.makeRule("extra", "**/ABE"), p.makeRule("ignore", "**/ABC"), p.makeRule("copy", "**/AB?"), p.makeRule("_one", "**/A*"), p.makeRule("_two", "**/B*")];
	
	console.log("Rules "+util.format(rules));
	var input = "D node_modules/syracuse-patch/test/fixtures/ABC\n"+
				"M node_modules/syracuse-patch/test/fixtures/ABX\n"+
				"A node_modules/syracuse-patch/test/fixtures/ABE\n"+
				"D ABXX\n";
	
	var oneTime = p.executeDiff(input, applyRule, {transformationRules: rules},  _);
	console.log("----------------"+JSON.stringify(oneTime))
	strictEqual(actions.length, 2, "number of actions")
	strictEqual(actions[0], "copy node_modules/syracuse-patch/test/fixtures/ABX M", "action name");
	strictEqual(actions[1], "copy node_modules/syracuse-patch/test/fixtures/ABE A", "action name");
	strictEqual("_one" in oneTime, true, "one time action _one");
	strictEqual("_two" in oneTime, false, "no one time action _two");
	strictEqual("extra" in oneTime, true, "one time action extra");
	strictEqual(oneTime.extra.length, 1, "one time action extra");
	strictEqual(oneTime.extra[0], "node_modules/syracuse-patch/test/fixtures/ABE patch11", "extra function");
	start();
});

//Test for replacements
asyncTest("replacements: slash, $$, $R ", 1, function(_) {
	console.log("REPL");
	var result = p.replacements("$$ $$$R$$$/", "REPO");
	strictEqual(result, "$ $REPO$"+path.sep);
	start();
})

// Test for commitData

asyncTest("commitData", 13, function(_) {
	var result;
	result = p.commitData("9b91935655bc723b8b5f112b875c49201e4ae82c 2012-09-28 1 0 6c86f9b7ca62cc160f5e5410357f99a32f6aaed0 - Info 1", true);
	strictEqual(result.rollout, "9b91935655bc723b8b5f112b875c49201e4ae82c", "rollout hash")
	strictEqual(result.release, true, "is release")
	strictEqual(result.source, "6c86f9b7ca62cc160f5e5410357f99a32f6aaed0", "source hash")
	strictEqual(result.relNumber, "1", "rel number")
	strictEqual(result.comment, "Info 1", "comment")
	strictEqual(result.patchNumber, "0", "patch number");
	result = p.commitData("9b91935655bc723b8b5f112b875c49201e4ae82c 2012-09-28 1 1 6c86f9b7ca62cc160f5e5410357f99a32f6aaed0 - Info 1", true);
	strictEqual(result, null, "not found");
	result = p.commitData("9b91935655bc723b8b5f112b875c49201e4ae82c 2012-09-28 1 1 6c86f9b7ca62cc160f5e5410357f99a32f6aaed0 - Info 1", false);
	strictEqual(result.rollout, "9b91935655bc723b8b5f112b875c49201e4ae82c", "rollout hash")
	strictEqual(result.release, false, "is release")
	strictEqual(result.source, "6c86f9b7ca62cc160f5e5410357f99a32f6aaed0", "source hash")
	strictEqual(result.relNumber, "1", "rel number")
	strictEqual(result.comment, "Info 1", "comment");
	strictEqual(result.patchNumber, "1", "patch number");
	start();
})

// Test for relNumberCmp
asyncTest("relNumberCmp", 5, function(_) {
	strictEqual(p.relNumberCmp("2", "11") < 0, true, "Release number 2 smaller than 11");
	strictEqual(p.relNumberCmp("11.", "11") > 0, true, "Release number 11. bigger 11");
	strictEqual(p.relNumberCmp("2..1", "2.1") === 0, true, "Release number 2..1 equals 2.1");
	strictEqual(p.relNumberCmp("2.4.1", "3.0") < 0, true, "Release number 2.4.1 smaller than 3.0");
	strictEqual(p.relNumberCmp("2..4", "2.4.0") < 0, true, "Release number 2.4 smaller than 2.4.0");
	console.log("789789")
	start();
})
