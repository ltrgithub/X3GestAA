"use strict";
var p = require("syracuse-patch/lib/patchcreate");
var patchtools = require("syracuse-patch/lib/patchtools");
var fs = require('streamline-fs');
var path = require("path");
var util = require('util');
var writeFile = require('syracuse-patch/lib/patchtools').writeFile;
var unit = require("syracuse-patch/test/fixtures/unit");
var config = require('syracuse-main/lib/nodeconfig').config;

QUnit.module(module.id);

var actions = [];

function performTest(orig_module, transformed_module, parameter, consumer, text) {
	var stack_orig;
	try {
		console.error("ERGEBNIS" + orig_module.test(parameter));
	} catch (e) {
		console.log("XXXXXXXXXXXXXXXXXXXXXXX" + e + " " + e.stack);
		stack_orig = e.stack;
	}
	var stack_trans;
	try {
		console.error("ERGEBNIS" + transformed_module.test(parameter));
	} catch (e) {
		console.log("XXXXXXXXXXXXXXXXXXxxxxXXXXX" + e + " " + e.stack);
		stack_trans = e.stack;
	}
	var lines_orig = p._analyzeStack(stack_orig);
	var lines_trans = p._analyzeStack(stack_trans);
	for (var i = 0; i < lines_orig.length; i++) {
		var originalLine = lines_orig[i];
		if (originalLine.comp.indexOf("sourcemap") >= 0) {
			var transformedLine = lines_trans[i];
			p._translate(transformedLine, consumer);
			strictEqual(transformedLine.line, originalLine.line, "Line " + originalLine.line + " " + text);
			strictEqual(transformedLine.column, originalLine.column, "Column " + originalLine.column + " " + text);
		}
	}
}

asyncTest("analyze stack trace Firefox", 10, function(_) {
	var trace = "exports.EventListener<._bindFieldEvents/<@http://localhost:8124/streamline-require/lib/client/require.js:75\njQuery.event.dispatch@http://localhost:8124/syracuse-ui/deps/jquery/jquery-1.7.1.js:3128\n";
	var res = p._analyzeStack(trace, "node_modules/test/def/eventListener.js\nnode_modules/abc/def/eventListener.js\nnode_modules/abc/def/event.js\n");
	strictEqual(res.workdir, ".", "Work directory");
	strictEqual(res.length, 2, "2 entries");
	strictEqual(res[0].name, "._bindFieldEvents/", "entry 1: name");
	strictEqual(res[0].comp, "node_modules/abc/def/eventListener.js", "entry 1: component");
	strictEqual(res[0].line, 64, "entry 1: line");
	strictEqual(res[0].column, -1, "entry 1: column");
	strictEqual(res[1].name, "jQuery.event.dispatch", "entry 2: name");
	strictEqual(res[1].comp, "node_modules/syracuse-ui/deps/jquery/jquery-1.7.1.js", "entry 2: component");
	strictEqual(res[1].line, 3117, "entry 2: line");
	strictEqual(res[1].column, -1, "entry 2: column");
	console.log("ANAL " + util.format(res));
	start();
});

//test for analyze stack trace
asyncTest("analyze stack trace", 21, function(_) {
	var stack = "Error: Test\n    at c:\\workspace\\Syracuse2\\node_modules\\syracuse-main\\lib\\syracuse._js:3:7\n  at c:\\workspace\\Syracuse2\\node_modules\\streamline\\lib\\fibers-fast\\runtime.js:47:14";
	var res = p._analyzeStack(stack);
	strictEqual(res.length, 2, "Number of elements");
	strictEqual(res[0].line, 3, "Line");
	strictEqual(res[0].column, 7, "Column");
	strictEqual(res[0].comp, "c:/workspace/Syracuse2/node_modules/syracuse-main/lib/syracuse._js", "component");
	strictEqual(res[0].name, null, "function");
	strictEqual(res.errortext, "Error: Test", "Errortext");
	strictEqual(res.workdir, "c:/workspace/Syracuse2", "workdir");

	// extra "node_modules" in syracuse._js
	var stack = "Error: Hallo\n at disp (c:\\workspace\\Syracuse2\\node_modules\\bla\\node_modules\\syracuse-main\\lib\\syracuse._js:1114:3)\n at disp (c:\\workspace\\Syracuse2\\index.js:1114:3)";
	var res = p._analyzeStack(stack);
	strictEqual(res.length, 2, "Number of elements");
	strictEqual(res[0].line, 1114, "Line");
	strictEqual(res[0].column, 3, "Column");
	strictEqual(res[0].comp, "c:/workspace/Syracuse2/node_modules/bla/node_modules/syracuse-main/lib/syracuse._js", "component");
	strictEqual(res[0].name, "disp", "function");
	strictEqual(res.errortext, "Error: Hallo", "Errortext");
	strictEqual(res.workdir, "c:/workspace/Syracuse2", "workdir");

	// extra "node_modules" in syracuse._js
	var stack = "Error: Hallo\n at disp (c:\\workspace\\Syracuse2\\index.js:1114:3)\n at disp (c:\\workspace\\Syracuse2\\node_modules\\bla\\node_modules\\syracuse-main\\lib\\syracuse._js:1114:3)\n";
	var res = p._analyzeStack(stack);
	strictEqual(res.length, 2, "Number of elements");
	strictEqual(res[0].line, 1114, "Line");
	strictEqual(res[0].column, 3, "Column");
	strictEqual(res[0].comp, "c:/workspace/Syracuse2/index.js", "component");
	strictEqual(res[0].name, "disp", "function");
	strictEqual(res.errortext, "Error: Hallo", "Errortext");
	strictEqual(res.workdir, "c:/workspace/Syracuse2", "workdir");

	start();
});




// Test transformation rules
asyncTest("makeRule abc.txt", 3, function(_) {
	var rule;
	rule = p.makeRule("t", "abc.txt");
	strictEqual(rule[1], "t", "Correct rule name");
	strictEqual(rule[0].toString(), "/^abc\\.txt$/", "Correct constant pattern");
	strictEqual(rule[0].test("abc.txt"), true, "Correct constant pattern");
	start();
});

asyncTest("makeRule nocrypt abc.txt", 3, function(_) {
	var rule;
	rule = p.makeRule("hide", "abc.txt", 1);
	strictEqual(rule[1], "uglify", "Correct rule name");
	strictEqual(rule[0].toString(), "/^abc\\.txt$/", "Correct constant pattern");
	strictEqual(rule[0].test("abc.txt"), true, "Correct constant pattern");
	start();
});

asyncTest("makeRule nocrypt 2 abc.txt", 4, function(_) {
	var rule;
	rule = p.makeRule("hide", "abc.txt", 2);
	strictEqual(rule[1], "streamline", "Correct rule name");
	strictEqual(rule[0].toString(), "/^abc\\.txt$/", "Correct constant pattern");
	strictEqual(rule[0].test("abc.txt"), true, "Correct constant pattern");
	rule = p.makeRule("hidepretty", "abc.txt", 2);
	strictEqual(rule[1], "streamline", "Correct rule name");
	start();
});

asyncTest("makeRule nocrypt -1 abc.txt", 8, function(_) {
	var rule;
	rule = p.makeRule("hide", "abc.txt", -1);
	strictEqual(rule[1], "hidepretty", "Correct rule name");
	strictEqual(rule[0].toString(), "/^abc\\.txt$/", "Correct constant pattern");
	strictEqual(rule[0].test("abc.txt"), true, "Correct constant pattern");
	rule = p.makeRule("hidepretty", "abc.txt", -1);
	strictEqual(rule[1], "hidepretty", "Correct rule name");
	rule = p.makeRule("uglify", "abc.txt", -1);
	strictEqual(rule[1], "streamline", "Correct rule name");
	rule = p.makeRule("streamline", "abc.txt", -1);
	strictEqual(rule[1], "streamline", "Correct rule name");
	rule = p.makeRule("copy", "abc.txt", -1);
	strictEqual(rule[1], "copy", "Correct rule name");
	rule = p.makeRule("encrypt", "abc.txt", -1);
	strictEqual(rule[1], "encryptpretty", "Correct rule name");
	start();
});

asyncTest("makeRule hide abc.txt", 3, function(_) {
	var rule;
	rule = p.makeRule("hide", "abc.txt");
	strictEqual(rule[1], "hide", "Correct rule name");
	strictEqual(rule[0].toString(), "/^abc\\.txt$/", "Correct constant pattern");
	strictEqual(rule[0].test("abc.txt"), true, "Correct constant pattern");
	start();
});

asyncTest("makeRule **/abc.txt", 3, function(_) {
	var rule = p.makeRule("t", "**/abc.txt");
	strictEqual(rule[0].test("abc.txt"), true, "Found abc.txt");
	strictEqual(rule[0].test("cd/xx/abc.txt"), true, "Found cd/xx/abc.txt");
	strictEqual(rule[0].test("abc.txt/abc.txt1"), false, "Not found abc.txt/abc.txt1");
	start();
});
asyncTest("makeRule */abc.txt", 4, function(_) {
	var rule = p.makeRule("t", "*/abc.txt");
	strictEqual(rule[0].test("abc.txt"), false, "Not Found abc.txt");
	strictEqual(rule[0].test("cd/xx/abc.txt"), false, "Not found cd/xx/abc.txt");
	strictEqual(rule[0].test("abc.tx/abc.txt"), true, "found abc.tx/abc.txt1");
	strictEqual(rule[0].test("x/abc.txt1"), false, "Not found x/abc.txt1");
	start();
});

asyncTest("makeRule ?a*t", 5, function(_) {
	var rule = p.makeRule("t", "?a*t");
	strictEqual(rule[0].test("5abc.txt"), true, " Found 5abc.txt");
	strictEqual(rule[0].test("abc.txt"), false, "Not found abc.txt");
	strictEqual(rule[0].test("aat"), true, "found aat");
	strictEqual(rule[0].test("xat/xat"), false, "Not found xat/xat");
	strictEqual(rule[0].test("aat1"), false, "not found aat1");
	start();
});

//Test 
asyncTest("findRule", 30, function(_) {
		var rules = [p.makeRule("extra", "**/abc.js"), p.makeRule("extra", "**/enc*"), p.makeRule("ignore", "**/abc.js"), p.makeRule("streamline", "**/str*"), p.makeRule("encrypt", "**/enc*")];
		var config = {
			transformationRules: rules
		};
		var t = p.findRule("D node_modules/syracuse-patch/test/fixtures/abc.js", config, true);
		strictEqual(t.file, "node_modules/syracuse-patch/test/fixtures/abc.js", "filename node_modules/syracuse-patch/test/fixtures/abc.js");
		strictEqual(t.mode, "D", "mode");
		strictEqual(t.f, "node_modules/syracuse-patch/test/fixtures/abc.js", "original filename");
		strictEqual(t.rule, "ignore", "rulename");
		strictEqual(t.extra, true, "extra");
		t = p.findRule("D node_modules/syracuse-patch/test/fixtures/zzz.js", config, true);
		strictEqual(t.file, "node_modules/syracuse-patch/test/fixtures/zzz.js", "filename node_modules/syracuse-patch/test/fixtures/zzz.js");
		strictEqual(t.mode, "D", "mode");
		strictEqual(t.f, "node_modules/syracuse-patch/test/fixtures/zzz.js", "original filename");
		strictEqual(t.rule, "norule", "rulename");
		strictEqual(t.extra, undefined, "extra");
		t = p.findRule("A str._js", config, true);
		strictEqual(t.file, "str.js", "filename str._js");
		strictEqual(t.mode, "A", "mode");
		strictEqual(t.f, "str._js", "original filename");
		strictEqual(t.rule, "streamline", "rulename");
		strictEqual(t.extra, undefined, "extra");
		t = p.findRule("A str.txt", config, true);
		strictEqual(t.file, "str.txt", "filename str.txt");
		strictEqual(t.mode, "A", "mode");
		strictEqual(t.f, "str.txt", "original filename");
		strictEqual(t.rule, "copy", "rulename");
		strictEqual(t.extra, undefined, "extra");
		t = p.findRule("A str.js", config, true);
		strictEqual(t.file, "str.js", "filename str.js");
		strictEqual(t.mode, "A", "mode");
		strictEqual(t.f, "str.js", "original filename");
		strictEqual(t.rule, "copy", "rulename");
		strictEqual(t.extra, undefined, "extra");
		t = p.findRule("A enc._js", config, true);
		strictEqual(t.file, "enc.jsc", "filename enc._js");
		strictEqual(t.mode, "A", "mode");
		strictEqual(t.f, "enc._js", "original filename");
		strictEqual(t.rule, "encrypt", "rulename");
		strictEqual(t.extra, true, "extra");
		start();
	}

);

//Test for replacements
asyncTest("replacements: slash, $$, $R ", 1, function(_) {
	console.log("REPL");
	var result = p.replacements("$$ $$$R$$$/", "REPO");
	strictEqual(result, "$ $REPO$" + path.sep);
	start();
});

// Test for commitData

asyncTest("commitData", 13, function(_) {
	var result;
	result = p.commitData("9b91935655bc723b8b5f112b875c49201e4ae82c 2012-09-28 1 0 6c86f9b7ca62cc160f5e5410357f99a32f6aaed0 - Info 1", true);
	strictEqual(result.rollout, "9b91935655bc723b8b5f112b875c49201e4ae82c", "rollout hash");
	strictEqual(result.release, true, "is release");
	strictEqual(result.source, "6c86f9b7ca62cc160f5e5410357f99a32f6aaed0", "source hash");
	strictEqual(result.relNumber, "1", "rel number");
	strictEqual(result.comment, "Info 1", "comment");
	strictEqual(result.patchNumber, 0, "patch number");
	result = p.commitData("9b91935655bc723b8b5f112b875c49201e4ae82c 2012-09-28 1 1 6c86f9b7ca62cc160f5e5410357f99a32f6aaed0 - Info 1", true);
	strictEqual(result, null, "not found");
	result = p.commitData("9b91935655bc723b8b5f112b875c49201e4ae82c 2012-09-28 1 1 6c86f9b7ca62cc160f5e5410357f99a32f6aaed0 - Info 1", false);
	strictEqual(result.rollout, "9b91935655bc723b8b5f112b875c49201e4ae82c", "rollout hash");
	strictEqual(result.release, false, "is release");
	strictEqual(result.source, "6c86f9b7ca62cc160f5e5410357f99a32f6aaed0", "source hash");
	strictEqual(result.relNumber, "1", "rel number");
	strictEqual(result.comment, "Info 1", "comment");
	strictEqual(result.patchNumber, 1, "patch number");
	start();
});

// Test for splitargs
asyncTest("splitargs", 4, function(_) {
	var res = p.splitargs('a  b c "d e  f" g h ""');
	strictEqual(res.length, 7, "Correct number of arguments");
	strictEqual(res.join(","), "a,b,c,d e  f,g,h,", "Correct contents");
	res = p.splitargs('"" "a"  b c="d e  f" g');
	strictEqual(res.length, 5, "Correct number of arguments");
	strictEqual(res.join(","), ',a,b,c="d e  f",g', "Correct contents");
	start();
});



//test for source maps
asyncTest("source map with uglify", 6, function(_) {

	try {
		var tempdir = __dirname + "/tempfiles";
		fs.mkdir(tempdir, _);
		var filename = __dirname + "/../fixtures/sourcemap1.js";
		var orig = fs.readFile(filename, "utf8", _);
		orig = orig.replace(/\t/g, "    "); // replace tabulators because _transform also does this
		var filename = tempdir + "/sourcemap1.js";
		fs.writeFile(filename, orig, "utf8", _);
		var orig_module = require(filename);
		var result = p._transform(orig, filename, "uglify", null, true);
		var consumer = new p.consumer(result[1]);
		var tempfile = tempdir + "/s1.js";
		fs.writeFile(tempfile, result[0], _);
		try {
			var transformed_module = require(tempfile);
		} catch (e) {
			console.log("ZZZ " + e);
		}
		performTest(orig_module, transformed_module, 0, consumer, "parameter 0");
		performTest(orig_module, transformed_module, 1, consumer, "parameter 1");

	} finally {
		unit.rmdirRec(tempdir, _);
	}

	start();
});
// test for source maps
asyncTest("source map with streamline", 6, function(_) {

	var filename = __dirname + "/../fixtures/sourcemap2._js";
	var orig = fs.readFile(filename, _);
	var orig_module = require(filename);
	try {
		var tempdir = __dirname + "/tempfiles";
		fs.mkdir(tempdir, _);
		var result = p._transform(orig, filename, "streamline", config.streamline, true);
		var consumer;
		if (result[1]) consumer = new p.consumer(result[1]);
		var tempfile = tempdir + "/s2.js";
		fs.writeFile(tempfile, result[0], _);
		console.log("TRANSFORRM " + result[0]);
		try {
			var transformed_module = require(tempfile);
		} catch (e) {
			console.log("ZZZ " + e);
		}
		performTest(orig_module, transformed_module, 0, consumer, "parameter 0");
		performTest(orig_module, transformed_module, 1, consumer, "parameter 1");

	} finally {
		unit.rmdirRec(tempdir, _);
	}

	start();
});

//test for source maps
asyncTest("source map with streamline and uglify", 6, function(_) {

	var filename = __dirname + "/../fixtures/sourcemap2._js";
	var orig = fs.readFile(filename, _);
	var orig_module = require(filename);
	try {
		var tempdir = __dirname + "/tempfiles";
		fs.mkdir(tempdir, _);
		var result = p._transform(orig, filename, "streamline", config.streamline, true);
		var consumer;
		if (result[1]) consumer = new p.consumer(result[1]);
		var tempfile = tempdir + "/s3.js";
		fs.writeFile(tempfile, result[0], _);
		console.log("TRANSFORRM " + result[0]);
		try {
			var transformed_module = require(tempfile);
		} catch (e) {
			console.log("ZZZ " + e);
		}
		performTest(orig_module, transformed_module, 0, consumer, "parameter 0");
		performTest(orig_module, transformed_module, 1, consumer, "parameter 1");

	} finally {
		unit.rmdirRec(tempdir, _);
	}

	start();
});