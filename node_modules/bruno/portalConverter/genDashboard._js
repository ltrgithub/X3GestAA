"use strict";

var fs = require("fs");

var src = JSON.parse(fs.readFile(__dirname + "/adminportal.json", "utf8", _));

var dst = {
	$prototype: {
		$title: "X3 Administration",
		$properties: {},
	},
	$article: {
		$category: "dashboard",
		$layout: {
			$layoutType: "tabs",
			$items: []
		}
	}
};

var dashboards = {};
var sections = {};
var vignettes = {};
var lang = "fr-FR";

src.$items.forEach(function(item) {
	if (item.$type !== 'menuItem') return;
	var url;
	switch (item.linkType) {
	case '$function':
		url = "/trans/" + item.application.application + "/" + item.application.contract + //
		"/superv/$sessions?f=" + item.fusionFunction;
		break;
	case '$representation':
		url = "/sdata/" + item.application.application + "/" + item.application.contract + //
		"/SUPERV/" + item.representationRef.entity + "?representation=" + item.representationRef.representation;
		break;
	case '$dashboard':
		console.log("ignoring dashboard link: " + item.code);
		break;
	default:
		throw new Error("bad linkType: " + item.linkType);
	}
	if (url) dst.$prototype.$properties[item.code] = {
		$type: "application/x-link",
		$title: item.title[lang],
		$url: url
	};
});

src.$items.forEach(function(item) {
	if (item.$type !== 'portlet') return;
	vignettes[item.code] = item;
});

function rowLayout(i) {
	return {
		$layoutType: "row",
		$items: Array(i + 1).join('.').split('').map(function() {
			return {
				$layoutType: "stack",
				$items: []
			}
		})
	};
}

// slice(1) to ignore first (top level) dashboard.
src.$items.filter(function(item) {
	return item.$type === 'dashboardDef';
}).slice(1).forEach(function(item, i) {
	var variant = item.variants[0];
	var section = sections[item.dashboardName] = {
		$category: "section",
		$title: (variant.title || item.title)[lang],
		$layout: rowLayout(2)
	};
	dst.$article.$layout.$items.push(section);

	// we dispatch the blocks in two columns
	// blockCol is the column in which we added the last block
	// we switch it when its height exceeds the height of the other column
	var heights = [0, 0];
	var blockCol = 0;

	variant.vignettes.forEach(function(vign) {
		var vignette = vignettes[vign.portlet];
		if (vignette.type !== '$menu') {
			console.log("IGNORING VIGNETTE: " + vign.portlet);
			return;
		}
		var colsInBlock = 3;

		var block = {
			$category: "block",
			$title: vignette.title[lang],
			$layout: rowLayout(colsInBlock)
		}
		// count the number of rows because we want to fill column by column 
		// rather than row by row.
		var nRows = Math.floor((vignette.items.length + colsInBlock - 1) / colsInBlock);
		// append the menu items to the columns inside their block
		vignette.items.forEach(function(it, i) {
			block.$layout.$items[Math.floor(i / nRows)].$items.push({ $bind: it });
		});

		// switch column if current column is taller
		if (heights[blockCol] > heights[1 - blockCol]) blockCol = 1 - blockCol;
		// increase current column height (2 accounts for block title - a bit crude)
		heights[blockCol] += 2 + nRows;

		// add the block to the column
		section.$layout.$items[blockCol].$items.push(block);
	})
});

fs.writeFile(__dirname + "/../../syracuse-main/html/default/x3Admin-$dashboard.json", JSON.stringify(dst, null, 2), "utf8", _);