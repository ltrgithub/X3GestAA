"use strict";

var fs = require("fs");

var src = JSON.parse(fs.readFile(__dirname + "/adminportal.json", "utf8", _));

var allLinks = {};
var articles = {};
var vignettes = {};
var lang = "fr-FR";

src.$items.forEach(function(item) {
	if (item.$type !== 'menuItem') return;
	var url;
	switch (item.linkType) {
	case '$function':
		url = "/trans/" + item.application.application + "/" + item.application.contract + //
		"/superv/$sessions?f=" + item.fusionFunction;
		break;
	case '$representation':
		url = "/sdata/" + item.application.application + "/" + item.application.contract + //
		"/SUPERV/" + item.representationRef.entity + "?representation=" + item.representationRef.representation;
		break;
	case '$dashboard':
		console.log("ignoring dashboard link: " + item.code);
		break;
	default:
		throw new Error("bad linkType: " + item.linkType);
	}
	if (url) allLinks[item.code] = {
		$title: item.title[lang],
		$url: url
	};
});

src.$items.forEach(function(item) {
	if (item.$type !== 'portlet') return;
	vignettes[item.code] = item;
});

var dashboards = src.$items.filter(function(item) {
	return item.$type === 'dashboardDef';
}).slice(1);

function rowLayout(i) {
	return {
		$layoutType: "row",
		$items: Array(i + 1).join('.').split('').map(function() {
			return {
				$layoutType: "stack",
				$items: []
			}
		})
	};
}

// slice(1) to ignore first (top level) dashboard.
dashboards.forEach_(_, function(_, item, i) {
	var variant = item.variants[0];
	var article = articles[item.dashboardName] = {
		$category: "dashboard",
		$title: (variant.title || item.title)[lang],
		$layout: rowLayout(2)
	};
	var links = {};
	// add links to dashboards
	dashboards.forEach(function(d) {
		links[d.dashboardName] = {
			$title: (d.variants[0].title || d.title)[lang],
			$url: "?representation=" + d.dashboardName + ".$dashboard"
		}
	});

	// we dispatch the sections in two columns
	// sectionCol is the column in which we added the last section
	// we switch it when its height exceeds the height of the other column
	var heights = [0, 0];
	var sectionCol = 0;

	variant.vignettes.forEach(function(vign) {
		var vignette = vignettes[vign.portlet];
		if (vignette.type !== '$menu') {
			console.log("IGNORING VIGNETTE: " + vign.portlet);
			return;
		}
		var colsInBlock = 3;

		var section = {
			//$category: "menus",
			//$skin: "s-test-menus",
			$category: "section",
			$title: vignette.title[lang],
			$layout: {
				$items: [{
					$category: "menus",
					$layout: rowLayout(colsInBlock)
				}]
			}
		}
		// count the number of rows because we want to fill column by column 
		// rather than row by row.
		var nRows = Math.floor((vignette.items.length + colsInBlock - 1) / colsInBlock);
		// append the menu items to the columns inside their section
		vignette.items.forEach(function(it, i) {
			section.$layout.$items[0].$layout.$items[Math.floor(i / nRows)].$items.push({
				//$category: "link",
				$bind: it
			});
			links[it] = allLinks[it];
		});

		// switch column if current column is taller
		if (heights[sectionCol] > heights[1 - sectionCol]) sectionCol = 1 - sectionCol;
		// increase current column height (2 accounts for section title - a bit crude)
		heights[sectionCol] += 2 + nRows;

		// add the section to the column
		article.$layout.$items[sectionCol].$items.push(section);
	})
	var page = {
		$prototype: {
			$title: article.$title,
			$properties: {},
			$links: links,
		},
		$article: article
	};

	fs.writeFile(__dirname + "/../../syracuse-main/html/default/" + item.dashboardName + "-$dashboard.json", JSON.stringify(page, null, 2), "utf8", _);
});
