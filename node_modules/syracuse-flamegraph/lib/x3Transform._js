"use strict";

var ez = require('ez-streams');

exports.convert = function(_, reader) {
	var x3Log = {
		$name: "X3LOG",
		$type: "application/json",
		$after: "\n",
		$properties: {
			channel: {
				$type: "application/x-string",
				$before: "<",
				$after: ">"
			},
			code: {
				$type: "application/x-string",
				$before: "/",
				$after: "$"
			},
			line: {
				$type: "application/x-number",
				$before: "(",
				$after: ")"
			},
			expression: {
				$type: "application/x-string",
				$after: ","
			},
			tick: {
				$type: "application/x-number",
				$before: "tick:"
			},
		}
	};


	var log = reader.transform(ez.transforms.jedi.parser(x3Log))
		.map(function() {
			var records = [];
			var previous;
			return function(_, record) {
				//dbg:console.log("map:"+JSON.stringify(record));
				record.level = 1;
				if (record.expression) {
					for (var i = 0, len = record.expression.length; i < len; i++) {
						var c = record.expression.charAt(i);
						if (c !== ' ' && c !== '|') break;
						if (c === '|') record.level++;
					}
					record.expression = record.expression.substring(i);
				}
				return record;
			};
		}())
		.transform(function(_, reader, writer) {
			var data = {
				res: {},
				idFrames: [],
				frames: [],
				codes: []
			};
			var stack = [];
			var level = 0;
			var previous;
			var record;

			while ((record = reader.read(_)) !== undefined) {
				//dbg:console.log("tranform:"+JSON.stringify(record));
				if (previous) {
					var element = {
						code: previous.code,
						statement: previous.expression,
						line: previous.line
					};
					if (previous.level == level) {
						stack[stack.length - 1] = element;
					} else if (previous.level > level) {
						stack.push(element);
					} else if (previous.level < level) {
						// Remove elements
						stack = stack.splice(0, previous.level - 1);
						stack.push(element);
					}
					level = previous.level;

					// report stack elements in the frame
					var res = stack.reduce(function(r, e) {
						var idFrame = [e.code, e.statement, e.line].join('-');
						var posFrame = data.idFrames.indexOf(idFrame);
						if (posFrame < 0) {
							// Frame = code;line;expression;
							var posCode = data.codes.indexOf(e.code);
							if (posCode < 0) {
								data.codes.push(e.code);
								posCode = data.codes.length - 1;
							}

							data.frames.push([posCode, e.line, e.statement].join(';'));
							data.idFrames.push(idFrame);
							posFrame = data.idFrames.length - 1;
						}
						r.push(posFrame);

						return r;
					}, []);

					var idRes = res.join(';');

					var samples = (previous.expression !== "Call SYRRCV From  ASYRCOM") ? (record.tick - previous.tick) : 0;
					data.res[idRes] = (data.res[idRes] || 0) + samples;

				}
				previous = record;
			}
			writer.write(_, data);
		}).toArray(_)[0];

	var data = {
		frames: log.frames,
		codes: log.codes
	};

	data.res = Object.keys(log.res).map(function(key) {
		return key + "; " + log.res[key];
	});

	return data;
};