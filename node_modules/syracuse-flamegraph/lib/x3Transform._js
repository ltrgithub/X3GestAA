"use strict";

var ez = require('ez-streams');
var jedi = require('ez-jedi');

exports.convert = function(_, reader) {
	var x3Log = {
		$name: "X3LOG",
		$type: "application/x-variant",
		$after: "\n",
		$variants: {
			channel3: {
				$type: "application/json",
				$control: "^<channel 3>",
				$properties: {
					channel: {
						$type: "application/x-number",
						$before: "<channel ",
						$after: ">"
					},
					code: {
						$type: "application/x-string",
						$before: "/",
						$after: "$"
					},
					line: {
						$type: "application/x-number",
						$before: "(",
						$after: ")"
					},
					expression: {
						$type: "application/x-string",
						$after: ","
					},
					tick: {
						$type: "application/x-number",
						$before: "tick:"
					},
				}
			},
			channel4: {
				$type: "application/json",
				$control: "^<channel 4>",
				$properties: {
					channel: {
						$type: "application/x-number",
						$before: "<channel ",
						$after: ">"
					},
					expression: {
						$type: "application/x-string"
					}
				}
			}
		}
	};


	var log = reader.transform(jedi.parser(x3Log))
		.map(function() {
			var records = [];
			var previous;
			return function(_, record) {
				if (record.channel3) {
					record.channel3.level = 1;
					if (record.channel3.expression) {
						for (var i = 0, len = record.channel3.expression.length; i < len; i++) {
							var c = record.channel3.expression.charAt(i);
							if (c !== ' ' && c !== '|') break;
							if (c === '|') record.channel3.level++;
						}
						record.channel3.expression = record.channel3.expression.substring(i);
					}
				}
				return record;
			};
		}())
		.transform(function(_, reader, writer) {
			var data = {
				res: {},
				idFrames: ["io"],
				frames: ["io"],
				codes: []
			};
			var stack = [];
			var level = 0;
			var previous;
			var record;
			var io = false;
			var samplesIo = 0;
			var ioStart;

			while ((record = reader.read(_)) !== undefined) {
				if (record.channel3) {
					if (previous) {
						var element = {
							code: previous.channel3.code,
							statement: previous.channel3.expression,
							line: previous.channel3.line
						};
						if (previous.channel3.level == level) {
							stack[stack.length - 1] = element;
						} else if (previous.channel3.level > level) {
							stack.push(element);
						} else if (previous.channel3.level < level) {
							// Remove elements
							stack = stack.splice(0, previous.channel3.level - 1);
							stack.push(element);
						}
						level = previous.channel3.level;

						// report stack elements in the frame
						var res = stack.reduce(function(r, e) {
							var idFrame = [e.code, e.statement, e.line].join('-');
							var posFrame = data.idFrames.indexOf(idFrame);
							if (posFrame < 0) {
								var posCode = data.codes.indexOf(e.code);
								if (posCode < 0) {
									data.codes.push(e.code);
									posCode = data.codes.length - 1;
								}

								data.frames.push([posCode, e.line, e.statement].join(';'));
								data.idFrames.push(idFrame);
								posFrame = data.idFrames.length - 1;
							}
							r.push(posFrame);

							return r;
						}, []);

						var idRes = res.join(';');

						var samples = (previous.channel3.expression !== "Call SYRRCV From  ASYRCOM") ? (record.channel3.tick - previous.channel3.tick) : 0;
						data.res[idRes] = (data.res[idRes] || 0) + samples;
						if (samplesIo) {
							// Add IO
							res.push(0);
							var idRes2 = res.join(';');
							data.res[idRes2] = (data.res[idRes2] || 0) + samplesIo;
							data.res[idRes2] = Math.min(data.res[idRes2], data.res[idRes]);
							samplesIo = 0;
						}
					}
					previous = record;
				} else if (record.channel4) {
					if (/^Execution/.test(record.channel4.expression)) {
						ioStart = 0; //TODO
					} else if (/^Query end/.test(record.channel4.expression)) {
						samplesIo += 1 - ioStart; //TODO
					}
				}
			}
			writer.write(_, data);
		}).toArray(_)[0];

	var data = {
		frames: log.frames,
		codes: log.codes
	};

	data.res = Object.keys(log.res).map(function(key) {
		return key + "; " + log.res[key];
	});

	return data;
};