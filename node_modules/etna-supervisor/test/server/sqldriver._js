"use strict";

var syracuse = require('syracuse-main/lib/syracuse');
var helpers = require('syracuse-core/lib/helpers');
var globals = require('streamline/lib/globals');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var flows = require("streamline/lib/util/flows");
var ez = require('ez-streams');

var tracer; // = console.log;

var doStop = false;

var rdbms = ["Oracle","Sqlserver"];

var sqlDrivers={};

QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});

function _getSqlDriver(_,driver) {
	var dataset = "etna"+driver;
	if (sqlDrivers[dataset]) return sqlDrivers[dataset];

	var eps = adminHelper.getEndpoints(_, {});
	var epMatch;
	flows.some(_, eps, function(_, ep) {
		if ("x3" === ep.protocol(_) && dataset === ep.dataset(_)) {
			epMatch = ep;
			return true
		}
		return false;
	});
	var sqlConfig =  (epMatch && epMatch.getEtnaConfig(_).sql);
	strictEqual(epMatch != null, true, "Etna Config :" + JSON.stringify(sqlConfig));
	sqlDrivers[dataset] = require('etna-supervisor/lib/drivers/' + sqlConfig.driver)(sqlConfig);
	return sqlDrivers[dataset];
}

asyncTest("Connection", function(_) {
	rdbms.forEach_(_,function(_,driver) {
		try {
		    _getSqlDriver(_,driver).withConnection(_, function (_, cnx) {
	    		ok(true,driver + " connected");
		    });
		} catch (e) {
			ok(false,driver + " Connection failed");
		}
	});
	start();
});

asyncTest("select * from AQCQRY01 (1 row)", function(_) {
	rdbms.forEach_(_,function(_,driver) {
		try {
			var sqlDriver = _getSqlDriver(_,driver);
		    sqlDriver.withConnection(_, function (_, cnx) {
		    	try {
		    		var array = sqlDriver.reader(cnx, "select * from AQCQRY01", []).limit(1).toArray(_);
		    		strictEqual(array[0].FIELD01_0, "F1_001", "F1_001 ("+driver+")");
		    		strictEqual(array[0].FIELD02_0, "F2_001", "F2_001 ("+driver+")");
    			} catch(e)	{
    				ok(false,driver+": exception:"+e);
    			}
		    });
		} catch (e) {
			ok(false,driver + " Connection failed");
		}
	});
	start();
});


asyncTest("stop tests",  function(_) {
	doStop = true;
	start();
});