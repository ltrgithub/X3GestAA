"use strict";

var syracuse = require('syracuse-main/lib/syracuse');
var helpers = require('syracuse-core/lib/helpers');
var globals = require('streamline/lib/globals');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var flows = require("streamline/lib/util/flows");
var ez = require('ez-streams');

var tracer; // = console.log;

var doStop = false;

var rdbms = ["Oracle","Sqlserver"];
//var rdbms = ["Sqlserver"];

var sqlDrivers={};

QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});

function _getSqlDriver(_,driver) {
	var dataset = "etna"+driver;
	if (sqlDrivers[dataset]) return sqlDrivers[dataset];

	var eps = adminHelper.getEndpoints(_, {});
	var epMatch;
	flows.some(_, eps, function(_, ep) {
		if ("x3" === ep.protocol(_) && dataset === ep.dataset(_)) {
			epMatch = ep;
			return true
		}
		return false;
	});
	var sqlConfig =  (epMatch && epMatch.getEtnaConfig(_).sql);
	strictEqual(epMatch != null, true, "Etna Config :" + JSON.stringify(sqlConfig));

	if(driver == "Sqlserver") {
		sqlConfig.user = "X3";
		ok(false,"TODO : REMOVE THIS HACK")
	}
	
	sqlDrivers[dataset] = require('etna-supervisor/lib/drivers/' + sqlConfig.driver)(sqlConfig);
	return sqlDrivers[dataset];
}

asyncTest("Connection", function(_) {
	rdbms.forEach_(_,function(_,driver) {
		try {
		    _getSqlDriver(_,driver).withConnection(_, function (_, cnx) {
	    		ok(true,driver + " connected");
		    });
		} catch (e) {
			ok(false,driver + " Connection failed");
		}
	});
	start();
});

function checkIsUuid(uuid,message) {
	strictEqual(typeof uuid,"string",message + " uuid basic data type");

	var isUuid = /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/.test(uuid);
	ok(isUuid,message + " " + ((isUuid)? "is":"isn't") + " an UUID ("+uuid + ")");
	
}

function checkIsDatetime(value,message) {
	var isDatetime = false;
	try {
		var datetime = new Date(value);
		isDatetime=true;
	} catch(e) {
	}
	ok(isDatetime, message + " is"+ (isDatetime?"":"'nt")+" a datetime ("+value+")");
}

asyncTest("select * from AQCQRY01 (1 row)", function(_) {
	rdbms.forEach_(_,function(_,driver) {
		try {
			var sqlDriver = _getSqlDriver(_,driver);
		    sqlDriver.withConnection(_, function (_, cnx) {
		    	try {
		    		var array = sqlDriver.reader(cnx, "select * from AQCQRY01", []).limit(1).toArray(_);
		    		strictEqual(array[0].FIELD01_0, "F1_001", "F1_001 ("+driver+")");
		    		strictEqual(array[0].FIELD02_0, "F2_001", "F2_001 ("+driver+")");
		    		checkIsUuid(array[0].AUUID_0,"AUUID_0 ("+driver+")");
		    		checkIsDatetime(array[0].UPDDATTIM_0,"UPDDATTIM_0 ("+driver+")");
    			} catch(e)	{
    				ok(false,driver+": exception:"+e);
    			}
		    });
		} catch (e) {
			ok(false,driver + " Connection failed");
		}
	});
	start();
});


asyncTest("stop tests",  function(_) {
	doStop = true;
	start();
});