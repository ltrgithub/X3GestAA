"use strict";

var syracuse = require('syracuse-main/lib/syracuse');
var helpers = require('syracuse-core/lib/helpers');
var util = require("etna-supervisor/lib/util");
var globals = require('streamline/lib/globals');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var flows = require("streamline/lib/util/flows");
var ez = require('ez-streams');

var tracer; // = console.log;

var doStop = false;

var rdbms = ["Oracle"];
//var rdbms = ["Sqlserver"];
//var rdbms = ["Oracle","Sqlserver"];

var sqlDrivers={};

QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});

function _getSqlDriver(_,driver) {
	var dataset = "etna"+driver;
	if (sqlDrivers[dataset]) return sqlDrivers[dataset];

	var eps = adminHelper.getEndpoints(_, {});
	var epMatch;
	flows.some(_, eps, function(_, ep) {
		if ("x3" === ep.protocol(_) && dataset === ep.dataset(_)) {
			epMatch = ep;
			return true
		}
		return false;
	});
	var sqlConfig =  (epMatch && epMatch.getEtnaConfig(_).sql);
	strictEqual(epMatch != null, true, "Etna Config :" + JSON.stringify(sqlConfig));

	sqlConfig.trace = console.log;

	if(driver == "Sqlserver") {
		sqlConfig.user = "X3";
		ok(false,"TODO : REMOVE THIS HACK")
	}
	
	sqlDrivers[dataset] = require('etna-supervisor/lib/drivers/' + sqlConfig.driver)(sqlConfig);
	return sqlDrivers[dataset];
}

function sqlInsert(_,driver,cnx,table,value) {
	//console.log("sqlInsert "+JSON.stringify(value));


	// Add mandatory fields :
	value.CREDATTIM=new Date();
	value.UPDDATTIM=new Date();
	value.CREUSR="JUNIT";
	value.UPDUSR="JUNIT";
	value.AUUID =util.uuid('');
	
	var columns =  Object.keys(value).reduce(function(previousValue, currentValue, index, array) {
			previousValue.push(array[index]+"_0");
			return previousValue;
		}, []);

	//DBG:ok(true,"columns:"+JSON.stringify(columns));

	var sql = "insert into " + driver.escape(table)
		+ " ("+ columns.join(',') +") values ("
		+ Object.keys(columns).map(function(column) {
			return driver.param(parseInt(column));
		}).join(',') +  ")";
	//DBG:ok(true,"insert:"+sql);
	var values = Object.keys(value).reduce(function(previousValue, currentValue, index, array) {
			previousValue.push(value[array[index]]);
			return previousValue;
		}, []);
	//DBG:ok(true,"values:"+JSON.stringify(values));
	
	driver.execute(_, cnx, sql,values);

}

function checkIsUuid(uuid,message) {
	strictEqual(typeof uuid,"string",message + " uuid basic data type");

	//var isUuid = /^[0-9a-fA-F]{8}[0-9a-fA-F]{4}[0-9a-fA-F]{4}[0-9a-fA-F]{4}[0-9a-fA-F]{12}$/.test(uuid);
	var isUuid = /^[0-9a-fA-F]{8}[0-9a-fA-F]{4}[0-9a-fA-F]{4}[0-9a-fA-F]{4}[0-9a-fA-F]{12}$/.test(uuid);
	ok(isUuid,message + " " + ((isUuid)? "is":"isn't") + " an UUID ("+uuid + ")");
}

function checkIsDatetime(value,message) {
	var isDatetime = false;
	try {
		var datetime = new Date(value);
		isDatetime=true;
	} catch(e) {
	}
	ok(isDatetime, message + " is"+ (isDatetime?"":"'nt")+" a datetime ("+value+")");
}



rdbms.forEach_(_,function(_,driver) {

	function testConnect(_) {
		try {
		    _getSqlDriver(_,driver).withConnection(_, function (_, cnx) {
	    		ok(true,"Connected");
		    });
		} catch (e) {
			ok(false,"Connection failed:"+JSON.stringify(e));
		}
		start();
	}


	function testAQCQRY01(_) {
		try {
			var sqlDriver = _getSqlDriver(_,driver);
		    sqlDriver.withConnection(_, function (_, cnx) {
		    	try {
		    		sqlDriver.execute(_, cnx, "delete from AQCQRY01");

		    		var array = sqlDriver.reader(cnx, "select * from AQCQRY01", []).toArray(_);
		    		strictEqual(array.length,0, "array.length:"+array.length);

		    		var rows=0;
		    		var maxRows=100;
		    		for(var i=1;i<=maxRows;i++) {
		    			var j = (1+((i-1)%10));
		    			sqlInsert(_,sqlDriver,cnx,"AQCQRY01",{
		    				FIELD01:"F1_"+("00"+i).slice(-3),
		    				FIELD02:"F2_"+("00"+j).slice(-3),
		    				ACCESS:(j == 1 || j == 2)?"AQCACS"+j:" "
		    			});
		    			rows += 1;
		    		}
	    			strictEqual(rows,maxRows,"inserted rows:"+rows);

					array = sqlDriver.reader(cnx, "select * from AQCQRY01 order by FIELD01_0", []).toArray(_);
		    		//array = sqlDriver.reader(cnx, "select * from AQCQRY01", []).limit(10).toArray(_);

		    		strictEqual(array[0].FIELD01_0, "F1_001", "[0].F1_001");
		    		strictEqual(array[0].FIELD02_0, "F2_001", "[0].F2_001");
		    		strictEqual(array[14].FIELD01_0, "F1_015", "[14].F1_001");
		    		strictEqual(array[14].FIELD02_0, "F2_005", "[14].F2_001");

		    		checkIsUuid(array[0].AUUID_0,"AUUID_0");
		    		checkIsDatetime(array[0].UPDDATTIM_0,"UPDDATTIM_0");
    			} catch(e)	{
    				ok(false,"exception:"+e);
    			}
		    });
		} catch (e) {
			ok(false,"Connection failed:"+JSON.stringify(e));
		}
		start();
	};

	
	function testAQCQRY02(_) {
		try {
			var sqlDriver = _getSqlDriver(_,driver);
		    sqlDriver.withConnection(_, function (_, cnx) {
		    	try {
		    		sqlDriver.execute(_, cnx, "delete from AQCQRY02");

		    		var array = sqlDriver.reader(cnx, "select * from AQCQRY02", []).toArray(_);
		    		strictEqual(array.length,0, "array.length:"+array.length);

		    		var rows = 0;
		    		var maxRows=100;
		    		for(var i=1;i<=maxRows;i++) {
		    			sqlInsert(_,sqlDriver,cnx,"AQCQRY02",{
		    				FIELD01:i,
		    				FIELD02:(1+((i-1)%10))
		    			});
		    			rows += 1;
		    		}
	    			strictEqual(rows,maxRows,"inserted rows:"+rows);

		    		array = sqlDriver.reader(cnx, "select * from AQCQRY02 order by FIELD01_0", []).toArray(_);

		    		strictEqual(array[0].FIELD01_0, 1,  "[0].F1_001");
		    		strictEqual(array[0].FIELD02_0, 1,  "[0].F2_001");
		    		strictEqual(array[14].FIELD01_0,15, "[14].F1_001");
		    		strictEqual(array[14].FIELD02_0,5 , "[14].F2_001");

    			} catch(e)	{
    				ok(false,"Exception:"+e);
    			}
		    });
		} catch (e) {
			ok(false,"Connection failed:"+JSON.stringify(e));
		}
		start();
	};

	function testAQCQRY03(_) {
		try {
			var sqlDriver = _getSqlDriver(_,driver);
		    sqlDriver.withConnection(_, function (_, cnx) {
		    	try {
		    		sqlDriver.execute(_, cnx, "delete from AQCQRY03");

		    		var array = sqlDriver.reader(cnx, "select * from AQCQRY03", []).toArray(_);
		    		strictEqual(array.length,0, "array.length:"+array.length);

		    		var rows = 0;
		    		var maxRows=100;
		    		var now   = new Date();
		
		    		for(var i=1;i<=maxRows;i++) {
		    			var day   = new Date(now.getFullYear(), now.getMonth(), now.getDate());
		    			day.setDate(day.getDate() - ((i-1)%10));
		    			sqlInsert(_,sqlDriver,cnx,"AQCQRY03",{
		    				FIELD01:i,
		    				FIELD02:day
		    			});
		    			rows += 1;
		    		}
	    			strictEqual(rows,maxRows,"inserted rows:"+rows);

		    		array = sqlDriver.reader(cnx, "select * from AQCQRY03 order by FIELD01_0", []).toArray(_);

	    			
		    		strictEqual(array[0].FIELD01_0, 1,  "[0].F1_001");
		    		var day = new Date(now.getFullYear(), now.getMonth(), now.getDate());
		    		strictEqual(array[0].FIELD02_0, day.toString(),  "[0].F2_001");

		    		

    			} catch(e)	{
    				ok(false,"Exception:"+e);
    			}
		    });
		} catch (e) {
			ok(false,"Connection failed:"+JSON.stringify(e));
		}
		start();
	};
	asyncTest(driver + " : Connection "	,testConnect);
	asyncTest(driver + " : AQCQRY01 "	,testAQCQRY01);
	asyncTest(driver + " : AQCQRY02 "	,testAQCQRY02);
	asyncTest(driver + " : AQCQRY03 "	,testAQCQRY03);

});





asyncTest("stop tests",  function(_) {
	doStop = true;
	start();
});