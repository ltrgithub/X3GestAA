"use strict";

var syracuse = require('syracuse-main/lib/syracuse');
var helpers = require('syracuse-core/lib/helpers');
var util = require("etna-supervisor/lib/util");
var globals = require('streamline/lib/globals');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var flows = require("streamline/lib/util/flows");
var ez = require('ez-streams');
var bcd = require('etna-engine/lib/runtime/bcd') ;
var config = require("etna-util/lib/nodeconfig").config;

var tracer; // = console.log;

var doStop = false;

QUnit.module(module.id, {
	setup: function() {},
	teardown: function() {
		if (doStop) {
			setTimeout(function() {
				process.kill(process.pid);
			}, 100);
		}
	}
});



function sqlInsert(_,driver,cnx,table,value) {
	//console.log("sqlInsert "+JSON.stringify(value));

	// Add mandatory fields :
	value.CREDATTIM=new Date() ;
	value.UPDDATTIM=new Date() ;
	value.CREDATTIM.setMilliseconds(0) ; // bug tds ??? insertion error with milliseconds
	value.UPDDATTIM.setMilliseconds(0) ; // bug tds ??? insertion error with milliseconds

	value.CREUSR="JUNIT";
	value.UPDUSR="JUNIT";
	value.AUUID = driver.sqlUuid(util.uuid('')) ;
	
	var columns =  Object.keys(value).reduce(function(previousValue, currentValue, index, array) {
			previousValue.push(array[index]+"_0");
			return previousValue;
		}, []);

	//DBG:ok(true,"columns:"+JSON.stringify(columns));

	var sql = "insert into " + driver.escape(table)
		+ " ("+ columns.join(',') +") values ("
		+ Object.keys(columns).map(function(column) {
			return driver.param(parseInt(column));
		}).join(',') +  ")";
	//DBG:ok(true,"insert:"+sql);
	var values = Object.keys(value).reduce(function(previousValue, currentValue, index, array) {
			previousValue.push(value[array[index]]);
			return previousValue;
		}, []);
	//DBG:ok(true,"values:"+JSON.stringify(values));
	
	driver.execute(_, cnx, sql,values);

}

function checkIsUuid(uuid,message) {
	strictEqual(typeof uuid,"string",message + " uuid basic data type");

	//var isUuid = /^[0-9a-fA-F]{8}[0-9a-fA-F]{4}[0-9a-fA-F]{4}[0-9a-fA-F]{4}[0-9a-fA-F]{12}$/.test(uuid);
	var isUuid = /^[0-9a-fA-F]{8}[0-9a-fA-F]{4}[0-9a-fA-F]{4}[0-9a-fA-F]{4}[0-9a-fA-F]{12}$/.test(uuid);
	ok(isUuid,message + " " + ((isUuid)? "is":"isn't") + " an UUID ("+uuid + ")");
}

function checkIsDatetime(value,message) {
	var isDatetime = false;
	try {
		var datetime = new Date(value);
		isDatetime=true;
	} catch(e) {
	}
	ok(isDatetime, message + " is"+ (isDatetime?"":"'nt")+" a datetime ("+value+")");
}

function randomDCB(integer,decimals) {
	return ((Math.random() > 0.5)? 1: -1)*Math.floor((Math.pow(10,integer+decimals)-1)*Math.random())/Math.pow(10,decimals);
}


var sqlDriver;

function testConnect(_) {
	try {
		var epMatch = adminHelper.getEndpoint(_, {
			dataset: config.unit_test.etnaEndPoint
		});

		ok(true,"endPoint:"+config.unit_test.etnaEndPoint);
		
		var sqlConfig =  (epMatch && epMatch.getEtnaConfig(_).sql) || {};
		ok(true,"driver:"+ sqlConfig.driver);

		sqlDriver = require('etna-supervisor/lib/drivers/' + sqlConfig.driver)(sqlConfig);
	    sqlDriver.withConnection(_, function (_, cnx) {
    		ok(true,"Connected");
	    });
	} catch (e) {
		ok(false,"Connection failed:"+JSON.stringify(e));
	}
	start();
}

function testAQCDBTYPES(_) {
	try {
	    sqlDriver.withConnection(_, function (_, cnx) {
	    	try {
	    		sqlDriver.execute(_, cnx, "delete from AQCDBTYPES");

	    		var array = sqlDriver.reader(cnx, "select * from AQCDBTYPES", []).toArray(_);
	    		strictEqual(array.length,0, "array.length:"+array.length);

	    		var rows=0;
	    		var maxRows=100;
	    		var now   = new Date();
	    		var values = [];
	    		var a250="";
	    		for(var i=1;i<=246;i++) {
	    			a250 += String.fromCharCode(32+(i%94));	
	    		}
	    		a250 += "àçéè" ;

	    		for(var i=1;i<=maxRows;i++) {
	    			var day   = new Date(now.getFullYear(), now.getMonth(), now.getDate());
	    			day.setDate(day.getDate() - ((i-1)%10));

	    			var value = {
	    				IDX:i,
	    				C5:Math.floor(Math.pow(2,16)*Math.random())-Math.pow(2,15),// random value in the range [-32768, +32767]
    					A10:"A"+i,
    					A250:"A"+i,//TODO
    					DTM:day,
    					L8:Math.floor(Math.pow(2,32)*Math.random())-Math.pow(2,31),//random value in the range [-2^31, +2^31].
    					DCB9_2:""+randomDCB(9,2)
	    			};

	    			sqlInsert(_,sqlDriver,cnx,"AQCDBTYPES",value);
	    			values.push(value);
	    			rows += 1;
	    		}
    			strictEqual(rows,maxRows,"inserted rows:"+rows);

				array = sqlDriver.reader(cnx, "select IDX_0,C5_0,A10_0,A250_0,DTM_0,L8_0,"+sqlDriver.decimalCast("DCB9_2_0")+",CREDATTIM_0,UPDDATTIM_0,CREUSR_0,UPDUSR_0,"+ sqlDriver.uuidCast("AUUID_0")+ " from AQCDBTYPES order by IDX_0", []).toArray(_);

    			checkIsUuid(array[0].AUUID_0		,"AUUID_0");
	    		checkIsDatetime(array[0].UPDDATTIM_0,"UPDDATTIM_0");

	    		[0,maxRows-1].forEach(function(i){
		    		Object.keys(values[i]).filter(function(key){return key != "AUUID"}).forEach(function(key) {
		    			var dbkey = key+"_0";
			    		strictEqual(Object.prototype.toString.call(values[i][key]), Object.prototype.toString.call(array[i][dbkey]), "Type of  ["+i+"]."+key+"="+Object.prototype.toString.call(array[0][dbkey]));
						if (key === "DCB9_2")
							strictEqual(bcd.toString(bcd.fromString(values[i][key].valueOf())), bcd.toString(bcd.fromString(array[i][dbkey].valueOf())), "Value of ["+i+"]."+key+"="+array[0][dbkey]);
						else
			    			strictEqual(values[i][key].valueOf(), array[i][dbkey].valueOf(), "Value of ["+i+"]."+key+"="+array[0][dbkey]);
		    		});
	    		});


			} catch(e)	{
				ok(false,"exception:"+e);
			}
	    });
	} catch (e) {
		ok(false,"Connection failed:"+JSON.stringify(e));
	}
	start();
};


asyncTest("Connection "	,testConnect);
asyncTest("AQCDBTYPES "	,testAQCDBTYPES);

asyncTest("stop tests",  function(_) {
	ok(true,"stop");
	doStop = true;
	start();
});