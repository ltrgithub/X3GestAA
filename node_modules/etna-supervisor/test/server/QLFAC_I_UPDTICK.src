Local Clbfile TMP_CLBFILE(2)
TMP_CLBFILE= func TESTSUITE()
Call FERME_TRACE From LECFIC

GTRACE = "QLFAC_AQCPROC07_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

#**
#* Subprog SETUP called at the beginning of the unit test suite to clean then environment
#*!c
Subprog SETUP
Local Integer MY_STATUS
Local Instance INS Using C_AQCPROC07
INS = NewInstance C_AQCPROC07 AllocGroup null

# Create a simple instance
Callmet INS.AINIT()
[L]MY_STATUS = fmet INS.AREAD("AQC01")
If [L]MY_STATUS = [V]CST_AOK
 Callmet INS.ADELETE()
Endif
End

Subprog TEARDOWN
End


#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

Call TESTSUITE_START("AQCPROC07", "Test suite for Class AQCPROC07") From AXUNIT
Call ADD_TESTCASE("AQCPROC07_UPDTICK","AINSERT + AREAD + AUPDATE + ADELETE/CONCURENCY",30) From AXUNIT
Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("AQCPROC07", "SYRA_AQCPROC07")
End SUITE_RESULT


#**
#* AQCPROC07_UPDTICK
#*
#*!
Subprog AQCPROC07_UPDTICK()
Local Integer MY_STATUS
Local Instance INS Using C_AQCPROC07
INS = NewInstance C_AQCPROC07 AllocGroup null

# Create a simple instance
[L]MY_STATUS = fmet INS.AINIT()
INS.TBL1COL1 = "AQC01"
INS.TBL1COL2 = "AQC01_COL2"
INS.TBL2.TBL2COL1 = "AQC01"
INS.TBL2.TBL2COL2 = "AQC01.TBL2.COL2"

Call CHECK_EQUAL(INS.TBL1COL1 , "AQC01") From AXUNIT
Call CHECK_EQUAL(INS.TBL1COL2 , "AQC01_COL2") From AXUNIT
Call CHECK_EQUAL(INS.TBL2.TBL2COL1 , "AQC01") From AXUNIT
Call CHECK_EQUAL(INS.TBL2.TBL2COL2 , "AQC01.TBL2.COL2") From AXUNIT

Call CHECK_NOTEQUAL("AQCPROC07.AINSERT('AQC01')","") From AXUNIT
[L]MY_STATUS = fmet INS.AINSERT()

Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup INS

INS = NewInstance C_AQCPROC07 AllocGroup null
[L]MY_STATUS = fmet INS.AREAD("AQC01")

Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Call CHECK_EQUAL(INS.TBL1COL1 , "AQC01") From AXUNIT
Call CHECK_EQUAL(INS.TBL1COL2 , "AQC01_COL2") From AXUNIT

Call CHECK_EQUAL(INS.TBL2.TBL2COL1 , "AQC01") From AXUNIT
Call CHECK_EQUAL(INS.TBL2.TBL2COL2 , "AQC01.TBL2.COL2") From AXUNIT
Gosub WRITE_ERRORS

# concurrency ---------------------------
# another session modifing the readen records 
ExecSQL  From "3" Sql "Update SUPERV.AQCPROC07A set TBL1COL2_0 = 'Modified_COL2!' Where  TBL1COL1_0 = 'AQC01'"
ExecSQL  From "3" Sql "Update SUPERV.AQCPROC07B set TBL2COL2_0 = 'Modified_COL2!' Where  TBL2COL1_0 = 'AQC01'"
# ---------------------------------------

INS.TBL1COL2 = "AQC01_COL2_2"
INS.TBL2.TBL2COL2 = "AQC01.TBL2.COL2_2"
Call CHECK_NOTEQUAL("AQCPROC07.AUPDATE('AQC01')","") From AXUNIT
[L]MY_STATUS = fmet INS.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup INS

INS = NewInstance C_AQCPROC07 AllocGroup null
[L]MY_STATUS = fmet INS.AREAD("AQC01")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Call CHECK_EQUAL(INS.TBL1COL1 , "AQC01") From AXUNIT
Call CHECK_EQUAL(INS.TBL1COL2 , "Modified_COL2!") From AXUNIT
Call CHECK_EQUAL(INS.TBL2.TBL2COL1 , "AQC01") From AXUNIT
Call CHECK_EQUAL(INS.TBL2.TBL2COL2 , "Modified_COL2!") From AXUNIT
Gosub WRITE_ERRORS
Call CHECK_EQUAL(MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup INS

INS = NewInstance C_AQCPROC07 AllocGroup null
[L]MY_STATUS = fmet INS.AREAD("AQC01")
Call CHECK_EQUAL(MY_STATUS,[V]CST_AOK) From AXUNIT

# concurrency ---------------------------
# another session modifing the readen records 
ExecSQL  From "3" Sql "Update SUPERV.AQCPROC07A set TBL1COL2_0 = 'Modified_COL2!!' Where  TBL1COL1_0 = 'AQC01'"
ExecSQL  From "3" Sql "Update SUPERV.AQCPROC07B set TBL2COL2_0 = 'Modified_COL2!!' Where  TBL2COL1_0 = 'AQC01'"
# ---------------------------------------

Call CHECK_NOTEQUAL("AQCPROC07.ADELETE()","") From AXUNIT
[L]MY_STATUS = fmet INS.ADELETE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT

[L]MY_STATUS = fmet INS.AREAD("AQC01")
Call CHECK_EQUAL(MY_STATUS,[V]CST_AOK) From AXUNIT
Call CHECK_EQUAL(INS.TBL1COL1 , "AQC01") From AXUNIT
Call CHECK_EQUAL(INS.TBL1COL2 , "Modified_COL2!!") From AXUNIT
Call CHECK_EQUAL(INS.TBL2.TBL2COL1 , "AQC01") From AXUNIT
Call CHECK_EQUAL(INS.TBL2.TBL2COL2 , "Modified_COL2!!") From AXUNIT

# Last chance
# ------------------------------------
INS = NewInstance C_AQCPROC07 AllocGroup null
[L]MY_STATUS = fmet INS.AREAD("AQC01")
Call CHECK_EQUAL(MY_STATUS,[V]CST_AOK) From AXUNIT
Call CHECK_NOTEQUAL("AQCPROC07.ADELETE()","") From AXUNIT
Callmet INS.ADELETE()
[L]MY_STATUS = fmet INS.AREAD("AQC01")
Call CHECK_EQUAL(MY_STATUS,[V]CST_AERROR) From AXUNIT
End

#* Write errors to log
#*!
$WRITE_ERRORS
Local Integer I
For I=1 To maxtab(INS.AERROR)
 If  INS.AERROR(I)<>null & INS.AERROR(I).STA=[V]CST_AERROR & INS.AERROR(I).DEL<>2
   Call CHECK_NOTEQUAL(INS.AERROR(I).PRO-":"-INS.AERROR(I).MES, "") From AXUNIT
 Endif
Next I
Callmet INS.ADELETEERROR(CST_ALLERRORS)
Return
