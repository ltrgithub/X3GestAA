Local Integer MY_STATUS
Local Instance MY_LOG Using C_ALOG
MY_LOG = NewInstance C_ALOG AllocGroup null
[L]MY_STATUS = fmet MY_LOG.ASETNAME("QLFAC_TABSUBDIV"+GACTX.USER)
[L]MY_STATUS = fmet MY_LOG.ABEGINLOG("QLFAC_TABSUBDIV")

Local Clbfile RESULT
RESULT =  func TESTSUITE()
FreeGroup MY_LOG
End

#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!
Subprog SETUP
# Database cleaning
Local File TABSUBDIV [ATU]
#Trbegin [ATU]
#Delete [ATU] Where CRY="CF" : # and (COD="AA" | COD="PA")
#Commit
Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT
End

#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()


Call TESTSUITE_START("TABSUBDIV", "Test suite for Class TABSUBDIV") From AXUNIT

Call ADD_TESTCASE("TABSUBDIV_CREATION","Creation of Unit IL",6) From AXUNIT
Call ADD_TESTCASE("TABSUBDIV_READ","Read Unit IL",1) From AXUNIT
#Call ADD_TESTCASE("TABSUBDIV_UPDATE","Update Unit IL",1) From AXUNIT
# Call ADD_TESTCASE("TABSUBDIV_DELETE","Deletion of Unit IL",1) From AXUNIT

Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("TABSUBDIV", "SYRA_TABSUBDIV")

End SUITE_RESULT

#**
#* Create
#*!
Subprog TABSUBDIV_CREATION()
Local Integer MY_STATUS
Local Instance QLFATU Using C_TABSUBDIV
QLFATU = NewInstance C_TABSUBDIV AllocGroup null

# Initialize Instance
[L]MY_STATUS = fmet QLFATU.AINIT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

#**
#* This insert fails - has invalid type value

#*!
QLFATU.CRY = ""
QLFATU.TYP = 1

Local Integer ILINE
ILINE=1
Infbox "QLFATU.ASTALIN"-num$(QLFATU.ASTALIN)

Infbox "QLFATU.COLATU(ILINE).ASTALIN"-num$(QLFATU.COLATU(ILINE).ASTALIN)
Infbox "QLFATU.COLATU(ILINE).AORDER"-num$(QLFATU.COLATU(ILINE).AORDER)

QLFATU.COLATU(ILINE).COD = "AA"

QLFATU.COLATU(ILINE).INTIT="SAT descr"
#[L]MY_STATUS = fmet QLFATU.AINSERT()
Call CHECK_EQUAL("AINSERT"+num$([L]MY_STATUS),"AINSERT"+num$([V]CST_AERROR)) From AXUNIT

Local Integer I
For I=1 To maxtab(QLFATU.AERROR)
 If  QLFATU.AERROR(I).STA=[V]CST_AERROR & QLFATU.AERROR(I)<>null & QLFATU.AERROR(I).DEL<>2
   Call LOG_LINE(QLFATU.AERROR(I).PRO-":"-QLFATU.AERROR(I).MES) From AXUNIT
 Endif
Next I
FreeGroup QLFATU


# Test default subdivision default

QLFATU = NewInstance C_TABSUBDIV AllocGroup null

Local File TABCOUNTRY  [TCY]

Filter [TCY] Where  [TCY]ETATFLG=1 and [TCY]ETATFLG2=2
Read[TCY]Last
If !fstat
  # Initialize Instance
  [L]MY_STATUS = fmet QLFATU.AINIT()
  Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

  QLFATU.CRY = [TCY]CRY
  Call CHECK_EQUAL(QLFATU.TYP,3) From AXUNIT
Endif

FreeGroup QLFATU

QLFATU = NewInstance C_TABSUBDIV AllocGroup null

# Initialize Instance
[L]MY_STATUS = fmet QLFATU.AINIT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

#**
#* This insert succeeds
#*!
QLFATU.CRY = "CF"
QLFATU.TYP = 2

ILINE=1
QLFATU.COLATU(ILINE).COD = "AA"
QLFATU.COLATU(ILINE).CRY =  QLFATU.CRY
QLFATU.COLATU(ILINE).TYP = QLFATU.TYP
QLFATU.COLATU(ILINE).INTIT="SAT descr"
[L]MY_STATUS = fmet QLFATU.AINSERT()
Call CHECK_EQUAL("AINSERT"+num$([L]MY_STATUS),"AINSERT"+num$([V]CST_AOK)) From AXUNIT
FreeGroup QLFATU
End

#**
#* Read an unit
#*!
Subprog TABSUBDIV_READ()
Local Integer MY_STATUS
Local Instance QLFATU Using C_TABSUBDIV
QLFATU = NewInstance With C_TABSUBDIV

[L]MY_STATUS = fmet QLFATU.AREAD("CF",2)
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

FreeGroup QLFATU
End

#**
#* Update an unit
#*!
Subprog TABSUBDIV_UPDATE()
Local Integer MY_STATUS,ILINE
Local Instance QLFATU Using C_TABSUBDIV
QLFATU = NewInstance C_TABSUBDIV AllocGroup null

[L]MY_STATUS = fmet QLFATU.AREAD("CF",2)
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

[L]MY_STATUS = fmet QLFATU.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

FreeGroup QLFATU
End

#**
#* Delete an unit
#*!
Subprog TABSUBDIV_DELETE()
Local Integer MY_STATUS
Local Instance QLFATU Using C_TABSUBDIV
QLFATU = NewInstance C_TABSUBDIV AllocGroup null

[L]MY_STATUS = fmet QLFATU.AREAD("CF",2)
[L]MY_STATUS = fmet QLFATU.ADELETE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

FreeGroup QLFATU
End

Funprog GETERRMES(INS,PRO,ERRTYP)
Variable Instance INS Using OBJECT
Value Char    PRO
Value Integer ERRTYP
Local Char MES(250)
Local Integer I
For I=1 To maxtab(INS.AERROR)
 If  INS.AERROR(I).PRO=[L]PRO & INS.AERROR(I).STA=[L]ERRTYP & INS.AERROR(I)<>null & INS.AERROR(I).DEL<>2
   MES=INS.AERROR(I).MES : Break
 Endif
Next I
End MES
