##<AdxTL>@(#)2.0.0.0 $Revision$
#
Local Integer MY_STATUS
Local Instance MY_LOG Using C_ALOG
MY_LOG = NewInstance C_ALOG AllocGroup null

[L]MY_STATUS = fmet MY_LOG.ASETNAME("QLFAC_TABUNIT_"+GACTX.USER)
[L]MY_STATUS = fmet MY_LOG.ABEGINLOG("QLFAC_TABUNIT")
#
Local Clbfile RESULT
RESULT =  func TESTSUITE()
FreeGroup MY_LOG
End
#
##**
##* Subprog SETUP called at the beginning of the unit test suite
##*!
Subprog SETUP
## Database cleaning
Local File TABUNIT [TUN]
Trbegin [TUN]
Delete [TUN]TUN0 = "ZQ1"
Commit
Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT
End
#
##**
##* The main entry point of the unit test suite
##*
##*!
Funprog TESTSUITE()
#
#
Call TESTSUITE_START("TABUNIT", "Test suite for Class TABUNIT") From AXUNIT
#
Call ADD_TESTCASE("TABUNIT_CREATION","Creation of Unit ZQ1",2) From AXUNIT
Call ADD_TESTCASE("TABUNIT_READ","Read Unit ZQ1",1) From AXUNIT
Call ADD_TESTCASE("TABUNIT_UPDATE","Update Unit ZQ1",1) From AXUNIT
Call ADD_TESTCASE("TABUNIT_DELETE","Deletion of Unit ZQ1",1) From AXUNIT
#
Call ADD_TESTCASE("TABUNIT_CTRL_PROP_UOM","Control on properties UOM",1) From AXUNIT
Call ADD_TESTCASE("TABUNIT_CTRL_PROP_UOMDEC","Control on properties UOMDEC",1) From AXUNIT
#
Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("TABUNIT", "SYRA_TABUNIT")
#
End SUITE_RESULT
#
##**
##* Creation of an unit
##* Properties of Class TABUNIT
##* UOM [UOM]
##* DES [AX3]
##* DESSHO [AX1]
##* UOMDEC [C1]
##* UOMSYM [A5]
##* UOMTYP [M230]
##*!
Subprog TABUNIT_CREATION()
Local Integer MY_STATUS
Local Instance QLFTUN Using C_TABUNIT
QLFTUN = NewInstance C_TABUNIT AllocGroup null
#
#
##**
##* Mandatory Properties of Class TABUNIT
##* UOM [UOM]
##* DES [AX3]
##* UOMSYM [A5]
##*!
QLFTUN.UOM = ""
QLFTUN.DES = ""
QLFTUN.UOMSYM = ""
QLFTUN.DESSHO = "Des ZQ1"
QLFTUN.UOMDEC = 1
QLFTUN.UOMTYP = 1
#
[L]MY_STATUS = fmet QLFTUN.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AERROR) From AXUNIT
#
Local Integer I
For I=1 To maxtab(QLFTUN.AERROR)
 If  QLFTUN.AERROR(I).STA=[V]CST_AERROR & QLFTUN.AERROR(I)<>null & QLFTUN.AERROR(I).DEL<>2
   Call LOG_LINE(QLFTUN.AERROR(I).PRO-":"-QLFTUN.AERROR(I).MES) From AXUNIT
 Endif
Next I
#
QLFTUN.UOM = "ZQ1"
QLFTUN.DES = "Description ZQ1"
QLFTUN.UOMSYM = "$zq1"
[L]MY_STATUS = fmet QLFTUN.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
#
#
FreeGroup QLFTUN
End
#
#
##**
##* Read an unit
##*!
Subprog TABUNIT_READ()
Local Integer MY_STATUS
Local Instance QLFTUN Using C_TABUNIT
QLFTUN = NewInstance With C_TABUNIT

[L]MY_STATUS = fmet QLFTUN.AREAD("ZQ1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

FreeGroup QLFTUN
End
#
##**
##* Update an unit
##*!
Subprog TABUNIT_UPDATE()
Local Integer MY_STATUS
Local Instance QLFTUN Using C_TABUNIT
QLFTUN = NewInstance C_TABUNIT AllocGroup null

[L]MY_STATUS = fmet QLFTUN.AREAD("ZQ1")

QLFTUN.DES    = "Updated DES"
QLFTUN.DESSHO = "Updated DESHO"
QLFTUN.UOMDEC = 2
QLFTUN.UOMSYM = "%zq1"
QLFTUN.UOMTYP = 2

[L]MY_STATUS = fmet QLFTUN.AUPDATE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

FreeGroup QLFTUN
End
#
##**
##* Delete an unit
##*!
Subprog TABUNIT_DELETE()
Local Integer MY_STATUS
Local Instance QLFTUN Using C_TABUNIT
QLFTUN = NewInstance C_TABUNIT AllocGroup null

[L]MY_STATUS = fmet QLFTUN.AREAD("ZQ1")
[L]MY_STATUS = fmet QLFTUN.ADELETE()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

FreeGroup QLFTUN
End

#
##**
##* Controls on Properties of Class TABUNIT
##* UOM [UOM]
##*!
Subprog TABUNIT_CTRL_PROP_UOM()
Local Instance QLFTUN Using C_TABUNIT
QLFTUN = NewInstance C_TABUNIT AllocGroup null
#
##** !find(UOM,"0","1","2","3","4","5","6","7","8","9")
QLFTUN.UOM = "1"
Call CHECK_EQUAL(fmet QLFTUN.AGETMAXERROR("UOM"),[V]CST_AERROR) From AXUNIT
#
FreeGroup QLFTUN
End
#
#
##**
##* Controls on Properties of Class TABUNIT
##* UOMDEC [C1]
##*!
Subprog TABUNIT_CTRL_PROP_UOMDEC()
#
Local Instance QLFTUN Using C_TABUNIT
QLFTUN = NewInstance C_TABUNIT AllocGroup null
#
##** UOMDEC<=6
QLFTUN.UOMDEC = 7
Call CHECK_EQUAL(fmet QLFTUN.AGETMAXERROR("UOMDEC"),[V]CST_AERROR) From AXUNIT

FreeGroup QLFTUN
End
#
#
#Funprog GETERRMES(INS,PRO,ERRTYP)
#Variable Instance INS Using OBJECT
#Value Char    PRO
#Value Integer ERRTYP
#Local Char MES(250)
#Local Integer I
#For I=1 To maxtab(INS.AERROR)
# If  INS.AERROR(I).PRO=[L]PRO & INS.AERROR(I).STA=[L]ERRTYP & INS.AERROR(I)<>null & INS.AERROR(I).DEL<>2
#   MES=INS.AERROR(I).MES : Break
# Endif
#Next I
#End MES

