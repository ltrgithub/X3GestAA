# Qualification ASYRAUS

Local Integer MY_STATUS
Local Instance MY_LOG Using C_ALOG
MY_LOG = NewInstance C_ALOG AllocGroup null
[L]MY_STATUS = fmet MY_LOG.ASETNAME("QLFAC_ASYRAUS_"+GACTX.USER)
[L]MY_STATUS = fmet MY_LOG.ABEGINLOG("QLFAC_ASYRAUS")
Local Clbfile RESULT

RESULT =  func TESTSUITE()
FreeGroup MY_LOG
GTRACE = "QLFAC_ASYRAUS_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!c
Subprog SETUP
# Database cleaning
Local File AUTILIS   [AUS]
Local File ACCES     [ACC]
Local File ADOVALAUS [ADU]
Onerrgo ERROR_SETUP_NOTFOUND
Trbegin [AUS]
Delete [AUS] Where USR    = "ZAUS"
Delete [ACC] Where USR    = "ZAUS"
Delete [ADU] Where CODUSR = "ZAUS"
Delete [AUS] Where USR    = "ZAUS1"
Delete [ACC] Where USR    = "ZAUS1"
Delete [ADU] Where CODUSR = "ZAUS1"
Delete [AUS] Where USR    = "ZAUS2"
Delete [ACC] Where USR    = "ZAUS2"
Delete [ADU] Where CODUSR = "ZAUS2"
Commit
Onerrgo
Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT
End

$ERROR_SETUP_NOTFOUND
Resume

#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

Call TESTSUITE_START("ASYRAUS", "Test suite for Class ASYRAUS") From AXUNIT

Call ADD_TESTCASE("ASYRAUS_CREATION","Creation of ASYRAUS ZAUS",8) From AXUNIT
Call ADD_TESTCASE("ASYRAUS_CREATION_PROFIL","Creation of ASYRAUS ZAUSx using profil",2) From AXUNIT
Call ADD_TESTCASE("ASYRAUS_READ","Read ASYRAUS ZAUS",1) From AXUNIT
## No update or delete option on this class

Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("ASYRAUS", "SYRA_ASYRAUS")

End SUITE_RESULT

#**
#* Creation of a unit
#* Properties of Class ASYRAUS
#*
#*!
Subprog ASYRAUS_CREATION()
Local Char CODAME(4)
Local Integer MY_STATUS
Onerrgo
Local File AMETUTI [AME]
Local Instance QLFAUS Using C_ASYRAUS
QLFAUS = NewInstance C_ASYRAUS AllocGroup null

# First Insert - errors due to missing mandatory properties
[L]MY_STATUS = fmet QLFAUS.AINIT()
Call CHECK_EQUAL("Initialize"-num$([L]MY_STATUS),"Initialize"-num$([V]CST_AOK)) From AXUNIT

QLFAUS.USR = AVOID.ACHAR          # Invalid

[L]MY_STATUS = fmet QLFAUS.AINSERT()
Call CHECK_EQUAL("Insert error"-num$([L]MY_STATUS),"Insert error"-num$([V]CST_AERROR)) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup QLFAUS

# Second Insert - errors due to missing mandatory properties

#set CODNAME => PRFMEN and PRFFCT are not mandatory fields
 [L]CODAME="ACHE"

QLFAUS = NewInstance C_ASYRAUS AllocGroup null

# Initialize Instance
[L]MY_STATUS = fmet QLFAUS.AINIT()
Call CHECK_EQUAL("Initialize"-num$([L]MY_STATUS),"Initialize"-num$([V]CST_AOK)) From AXUNIT

# Load mandatory values
QLFAUS.USR     = "ZAUS"
QLFAUS.PRENAME = "Test"
QLFAUS.SURNAME = "Tester"
QLFAUS.CODMET  = [L]CODAME


Local Integer I
# Expect OK
[L]MY_STATUS = fmet QLFAUS.AINSERT()
Call CHECK_EQUAL("Insert valid"-num$([L]MY_STATUS),"Insert valid"-num$([V]CST_AOK)) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup QLFAUS
End


Subprog ASYRAUS_CREATION_PROFIL()
Local Char CODAME(4)
Local Integer MY_STATUS

Local Instance QLFAUS Using C_ASYRAUS
Onerrgo

QLFAUS = NewInstance C_ASYRAUS AllocGroup null
# Load mandatory values
QLFAUS.USR     = "ZAUS1"
QLFAUS.PRENAME = "Test"
QLFAUS.SURNAME = "Tester"
QLFAUS.PRFMEN  = "ADMIN"
QLFAUS.PRFFCT  = "ADMIN"

# Expect OK
[L]MY_STATUS = fmet QLFAUS.AINSERT()
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS
FreeGroup QLFAUS

Local File AFCTFCT [AFT]
For [AFT] Where [F:AFT]ALLACS<>2
  QLFAUS = NewInstance C_ASYRAUS AllocGroup null
  # Load mandatory values
  QLFAUS.USR     = "ZAUS2"
  QLFAUS.PRENAME = "Test"
  QLFAUS.SURNAME = "Tester"
  QLFAUS.PRFMEN  = "ADMIN"
  QLFAUS.PRFFCT  = [AFT]PRFCOD
  # Expect OK

  [L]MY_STATUS = fmet QLFAUS.AINSERT()
  Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS
  FreeGroup QLFAUS
  Break
Next
LogicClose File [AFT]


End



#**
#* Read a ASYRAUS
#*!
Subprog ASYRAUS_READ()
Local Integer MY_STATUS
Local Instance QLFAUS Using C_ASYRAUS
QLFAUS = NewInstance C_ASYRAUS AllocGroup null

[L]MY_STATUS = fmet QLFAUS.AREAD("ZAUS")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT
Gosub WRITE_ERRORS

FreeGroup QLFAUS
End

#**
#* Write errors to log
#*!
$WRITE_ERRORS
Local Integer I
For I=1 To maxtab(QLFAUS.AERROR)
 If  QLFAUS.AERROR(I)<>null & QLFAUS.AERROR(I).DEL<>2
   Call CHECK_EQUAL(QLFAUS.AERROR(I).PRO-":"-QLFAUS.AERROR(I).MES,QLFAUS.AERROR(I).PRO-":"-QLFAUS.AERROR(I).MES) From AXUNIT
 Endif
Next I
Return
