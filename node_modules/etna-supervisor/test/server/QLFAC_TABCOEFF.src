#<AdxTL>@(#)0.0.0.0 $Revision$

Local Integer ASTATUS
Local Instance MY_LOG Using C_ALOG
MY_LOG = NewInstance C_ALOG AllocGroup null
[L]ASTATUS = fmet MY_LOG.ASETNAME("QLFAC_TABCOEFF_"+GACTX.USER)
[L]ASTATUS = fmet MY_LOG.ABEGINLOG("QLFAC_TABCOEFF")

Local Clbfile RESULT
RESULT =  func TESTSUITE()
FreeGroup MY_LOG
End

#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!
Subprog SETUP
# Database cleaning
Local File TABUNIT [TUN]
Local File TABCOEFF [TCO]
Trbegin [TUN]
Delete [TUN]TUN0 = "ZQ1"
Delete [TUN]TUN0 = "ZQ2"
Delete [TCO]TCO0= "ZQ1";"ZQ2"
Commit
Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT
End

#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()


Call TESTSUITE_START("TABCOEFF", "Test suite for Class TABCOEFF") From AXUNIT

Call ADD_TESTCASE("TABUNIT_CREATION","Creation of Unit ZQ1 and ZQ2",2) From AXUNIT
Call ADD_TESTCASE("TABCOEFF_CREATION","Creation of conversions ZQ1 to ZQ2",1) From AXUNIT
Call ADD_TESTCASE("TABCOEFF_READ","Read Unit ZQ1",1) From AXUNIT
Call ADD_TESTCASE("TABCOEFF_UPDATE","Update Unit ZQ1",1) From AXUNIT
Call ADD_TESTCASE("TABCOEFF_DELETE","Deletion of Unit ZQ1",1) From AXUNIT

Local Clbfile SUITE_RESULT
SUITE_RESULT = func AXUNIT.RUN_TESTSUITE("TABCOEFF", "SYRA_TABCOEFF")

End SUITE_RESULT

#**
#* TABUNIT - create UOMs used in conversion test
#*!
Subprog TABUNIT_CREATION()
Local Integer ASTATUS
Local Instance QLFTUN Using C_TABUNIT
QLFTUN = NewInstance C_TABUNIT AllocGroup null
[L]ASTATUS = fmet QLFTUN.AINIT()
If [L]ASTATUS = [V]CST_AOK
  QLFTUN.UOM = "ZQ1"
  QLFTUN.DES = "Description ZQ1"
  QLFTUN.UOMSYM = "$zq1"
  QLFTUN.UOMDEC = 2
  [L]ASTATUS = fmet QLFTUN.AINSERT()
  If [L]ASTATUS = [V]CST_AOK
    FreeGroup QLFTUN
    QLFTUN = NewInstance C_TABUNIT AllocGroup null
    QLFTUN.UOM = "ZQ2"
    QLFTUN.DES = "Description ZQ2"
    QLFTUN.UOMSYM = "$zq2"
    QLFTUN.UOMDEC = 3
    [L]ASTATUS = fmet QLFTUN.AINSERT()
 Endif
Endif
Local Instance QLFTUN Using C_TABUNIT
QLFTUN = NewInstance With C_TABUNIT

[L]MY_STATUS = fmet QLFTUN.AREAD("ZQ1")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT

[L]MY_STATUS = fmet QLFTUN.AREAD("ZQ2")
Call CHECK_EQUAL([L]MY_STATUS,[V]CST_AOK) From AXUNIT


FreeGroup QLFTUN
End

#**
#* TABCOEFF - create conversion between UOMs
#*!
Subprog TABCOEFF_CREATION()
Local Integer ASTATUS

Local Instance QLFTCO Using C_TABCOEFF
QLFTCO = NewInstance C_TABCOEFF AllocGroup null

[L]ASTATUS = fmet QLFTCO.AINIT()

If [L]ASTATUS = [V]CST_AOK
  QLFTCO.UOM1 = "ZQ1"
  QLFTCO.UOM2 = "ZQ2"
  QLFTCO.COEUOM =15
  [L]ASTATUS = fmet QLFTCO.AINSERT()
Endif
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
End

#**
#* Read an unit
#*!
Subprog TABCOEFF_READ()
Local Integer ASTATUS
Local Instance QLFTCO Using C_TABCOEFF
QLFTCO = NewInstance C_TABCOEFF AllocGroup null

[L]ASTATUS = fmet QLFTCO.AREAD("ZQ1","ZQ2")
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT

FreeGroup QLFTCO
End

#**
#* Update an unit
#*!
Subprog TABCOEFF_UPDATE()
Local Integer ASTATUS
Local Instance QLFTCO Using C_TABCOEFF
QLFTCO = NewInstance C_TABCOEFF AllocGroup null

[L]ASTATUS = fmet QLFTCO.AREAD("ZQ1","ZQ2")

QLFTCO.COEUOM = 9

[L]ASTATUS = fmet QLFTCO.AUPDATE()
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT

FreeGroup QLFTCO
End

#**
#* Delete an unit
#*!
Subprog TABCOEFF_DELETE()
Local Integer ASTATUS
Local Instance QLFTCO Using C_TABCOEFF
QLFTCO = NewInstance C_TABCOEFF AllocGroup null

[L]ASTATUS = fmet QLFTCO.AREAD("ZQ1","ZQ2")
[L]ASTATUS = fmet QLFTCO.ADELETE()
Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT

FreeGroup QLFTCO
End


Funprog GETERRMES(INS,PRO,ERRTYP)
Variable Instance INS Using OBJECT
Value Char    PRO
Value Integer ERRTYP
Local Char MES(250)
Local Integer I
For I=1 To maxtab(INS.AERROR)
 If  INS.AERROR(I).PRO=[L]PRO & INS.AERROR(I).STA=[L]ERRTYP & INS.AERROR(I)<>null & INS.AERROR(I).DEL<>2
   MES=INS.AERROR(I).MES : Break
 Endif
Next I
End MES
