#<AdxTL>@(#)0.0.0.0 $Revision$
Local Clbfile RESULT
RESULT =  func TESTSUITE()
Call FERME_TRACE From LECFIC
GTRACE = "QLFAC_CACCE_"+GACTX.USER
Call LEC_TRACE From LECFIC
End

#Test from ZRONRUNTEST
#**
#* Subprog SETUP called at the beginning of the unit test suite
#*!
Subprog SETUP

  # Database cleaning
  Local File CACCE [CCE]

  Onerrgo ERROR_SETUP_NOTFOUND
  Trbegin [CCE]
  Delete [CCE]CCE0 = 1;"ZAXUNITTEST"
  Commit
  Onerrgo
  Call LOG_LINE("SETUP : Database cleaning (fstat="+num$(fstat)+")") From AXUNIT
End

$ERROR_SETUP_NOTFOUND
Resume


#**
#* The main entry point of the unit test suite
#*
#*!
Funprog TESTSUITE()

  # Start the test suite
  Call TESTSUITE_START("CACCE", "Analytical Dimensions test")                   From AXUNIT

  Call ADD_TESTCASE("CACCE_AINSERT","Creation of CACCE record ZAXUNITTEST",2)   From AXUNIT
  Call ADD_TESTCASE("CACCE_AREAD","Read CACCE record ZAXUNITTEST",7)            From AXUNIT
  Call ADD_TESTCASE("CACCE_AUPDATE","Update CACCE record ZAXUNITTEST",5)        From AXUNIT
  Call ADD_TESTCASE("CACCE_ADELETE","Delete CACCE record ZAXUNITTEST",2)        From AXUNIT

  # Run the test and return the result
  Local Clbfile RESULT_SUITE
  RESULT_SUITE=func AXUNIT.RUN_TESTSUITE("CACCE","CACCE test")

End RESULT_SUITE


Subprog CACCE_AINSERT()
  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_CACCE

  MYINSTANCE = NewInstance C_CACCE AllocGroup null

  #Try creating record where Valid start date is greater than end date.  Should generate error.
  MYINSTANCE.AXI = 1
  MYINSTANCE.CCE = "ZAXUNITTEST"
  MYINSTANCE.DES = "Insert Dimension Test"
  MYINSTANCE.VLYSTR = [31/12/2015]
  MYINSTANCE.VLYEND = [17/10/2013]
  [L]ASTATUS = fmet MYINSTANCE.AINSERT
  #
  Call LOG_LINE("Check the AINSERT method - should fail in this scenario") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AERROR) From AXUNIT
  Gosub WRITE_ERRORS
  #
  FreeGroup MYINSTANCE
  MYINSTANCE = NewInstance C_CACCE AllocGroup null

  #Add valid record
  MYINSTANCE.AXI = 1
  MYINSTANCE.CCE = "ZAXUNITTEST"
  MYINSTANCE.DES = "Insert Dimension Test"
  MYINSTANCE.DESSHO = "Ins Test"
  MYINSTANCE.ACS = "USA"
  MYINSTANCE.VLYSTR = [17/10/2013]
  MYINSTANCE.VLYEND = [31/12/2015]
  MYINSTANCE.FCY = "TOR"

  [L]ASTATUS = fmet MYINSTANCE.AINSERT()
  Call LOG_LINE("Check the AINSERT method for valid record") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  FreeGroup MYINSTANCE

End

Subprog CACCE_AREAD

  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_CACCE
  MYINSTANCE = NewInstance C_CACCE AllocGroup null


  [L]ASTATUS = fmet MYINSTANCE.AREAD(1,"ZAXUNITTEST")

  Call LOG_LINE("Check the AREAD method") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  Call LOG_LINE("Verify the values read") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.DES,"Insert Dimension Test") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.DESSHO,"Ins Test") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.ACS,"USA") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.VLYSTR,[17/10/2013]) From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.VLYEND,[31/12/2015]) From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.FCY,"TOR") From AXUNIT

  FreeGroup MYINSTANCE

End

Subprog CACCE_AUPDATE

  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_CACCE
  MYINSTANCE = NewInstance C_CACCE AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AREAD(1,"ZAXUNITTEST")

  Call LOG_LINE("Check the AREAD method") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  MYINSTANCE.DES = "Updated DES Value"
  MYINSTANCE.DESSHO = "Upd SHO"

  [L]ASTATUS = fmet MYINSTANCE.AUPDATE()
  Call LOG_LINE("Check the AUPDATE method") From AXUNIT
  Call CHECK_EQUAL("Check the AUPDATE method"-num$([L]ASTATUS),"Check the AUPDATE method"-num$([V]CST_AOK)) From AXUNIT
  Gosub WRITE_ERRORS

  #Re-read updated record to ensure fields were properly updated
  FreeGroup MYINSTANCE

  MYINSTANCE = NewInstance C_CACCE AllocGroup null
  [L]ASTATUS = fmet MYINSTANCE.AREAD(1,"ZAXUNITTEST")
  Call LOG_LINE("Check the AREAD method") From AXUNIT
  Call CHECK_EQUAL("Read after update"-num$([L]ASTATUS),"Read after update"-num$([V]CST_AOK)) From AXUNIT
  Gosub WRITE_ERRORS

  Call LOG_LINE("Verify the updated values") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.DES,"Updated DES Value") From AXUNIT
  Call CHECK_EQUAL(MYINSTANCE.DESSHO,"Upd SHO") From AXUNIT

  FreeGroup MYINSTANCE

End

Subprog CACCE_ADELETE

  Local Integer ASTATUS
  Local Instance MYINSTANCE Using C_CACCE
  MYINSTANCE = NewInstance C_CACCE AllocGroup null

  [L]ASTATUS = fmet MYINSTANCE.AREAD(1,"ZAXUNITTEST")

  Call LOG_LINE("Check the AREAD method from CACCE_ADELETE") From AXUNIT
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

  Call LOG_LINE("Check the ADELETE method") From AXUNIT
  [L]ASTATUS = fmet MYINSTANCE.ADELETE()
  Call CHECK_EQUAL([L]ASTATUS,[V]CST_AOK) From AXUNIT
  Gosub WRITE_ERRORS

End

#**
#* Write errors to log
#*!
$WRITE_ERRORS
Local Integer I
For I=1 To maxtab(MYINSTANCE.AERROR)
 If  MYINSTANCE.AERROR(I)<>null & MYINSTANCE.AERROR(I).DEL<>2
   Call LOG_LINE(MYINSTANCE.AERROR(I).PRO-":"-MYINSTANCE.AERROR(I).MES) From AXUNIT
 Endif
Next I
Return

