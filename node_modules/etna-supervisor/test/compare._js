var root = __dirname + "/../../../results";
var fs = require('streamline-fs');

var total = 0;

fs.readdir(root + "/x3", _).forEach_(_, function(_, f) {
	try {
		var expected = JSON.parse(fs.readFile(root + "/x3/" + f, "utf8", _));
		if (expected.$diagnoses && expected.$diagnoses[0] && expected.$diagnoses[0].$severity === "error") return; // ignore silently
		var got = JSON.parse(fs.readFile(root + "/etna/" + f, "utf8", _));
		var results = [];
		compare(f, expected, got, expected, "/", results);
		var outName = root + "/diff/" + f.replace(/.json$/, ".txt");
		if (results.length > 0) {
			total += results.length;
			console.log(f + ": " + results.length + " differences");
			fs.writeFile(outName, results.join('\n'), "utf8", _);
		}
		else if (fs.exists(outName, _))
			fs.unlink(outName, _);
	} catch (ex) {
		console.log(f + ": ERROR: " + ex.message);
	}
});

console.log("TOTAL: " + total + " differences");

function eq(s1, s2) {
	if (typeof s1 !== 'string' || typeof s2 !== 'string') return s1 === s2;
	if (/^TEXT_/.test(s1)) return true;
	if (s1.length !== s2.length) return false;
	for (var i = 0; i < s1.length; i++) {
		var ch1 = s1.charCodeAt(i);
		var ch2 = s2.charCodeAt(i);
		if (ch2 < 0x80 && ch1 !== ch2) return false;
	}
	return true;
}

function compare(f, full, o1, o2, path, results) {
	var got = {};
	if (o2.$scale) {
		// buggy in X3
		var tmp = o2.$scale;
		o2.$scale = o2.$precision || 0;
		o2.$precision = tmp + o2.$scale;
	}
	Object.keys(o1).forEach(function(k) {
		var v1 = o1[k],
			v2 = o2[k];
		got[k] = true;
		if (k === "$localization") return;
		if (v2 === undefined) {
			//if (/^\$(description|maxLength|scale|precision|style)$/.test(k)) return;
			return results.push(f + ": " + path + k + ": unexpected key ");
		}
		if (typeof v1 === "object" && typeof v2 === "object" && v1) return compare(f, full, v1, v2, path + k + "/", results);
		if (/^{@.*}$/.test(v2)) v2 = full.$localization[v2.substring(1, v2.length - 1)];
		if (k === '$baseUrl') return; // $baseUrl will be different anyway
		if (/^(Afficher-details|Sélection-select|Résumé-summary|Lister-select|Voulez-vous supprimer[^\-]*-Do you wish to delete[^\-]*)$/.test(v2 + "-" + v1)) return;
		if (!eq(v1, v2)) return results.push(f + ": " + path + k + ": expected " + v2 + ", got " + v1);
	});
	Object.keys(o2).forEach(function(k) {
		if (got[k]) return;
		if (/^\$(actx|repUrl|instanceUrl)/.test(k)) return; // ignore some keys for now
		if (k === "$target" && o2[k] === "") return; // ignore missing if expect empty target
		results.push(f + ": " + path + k + ": missing key ");
	});
}