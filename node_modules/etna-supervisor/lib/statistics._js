"use strict";

var glob = require('streamline/lib/globals');
var util = require("etna-supervisor/lib/util");
var bcd = require("etna-engine/lib/runtime/bcd");
var runtime = require("etna-engine/lib/runtime/runtime");
var ASYR = require("etna-supervisor/lib/builtins/ASYR");
var ASYRSND = require("etna-supervisor/lib/builtins/ASYRSND");

var tracerJs = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");

function loadScript(_, script) {
	try {
		return runtime.requireScript(_, "WMSTS" + script);
	} catch (e) {
		throw new HttpError(404, "statistic not found: " + script);
	}
}

exports.proto = function(_, superv, script, facet) {
	var mod = loadScript(_script);
	var psyr = new(ASYR.constructor)(superv);

	var args = {
		ACTX: {
			type: "AY",
			value: glob.context.x3session.actx
		},
		PSYR: {
			type: "AY",
			value: psyr
		},
		WCLOB: {
			type: "AT",
			value: ""
		},
		TIME_UPD: {
			type: "AN",
			value: bcd.fromDouble(0)
		},
		LEVEL_NUM: {
			type: "BS",
			value: 0
		},
		TYPE_REPRES: {
			type: "BS",
			value: "$query"
		}
	};
	//PROTO_JSON(ACTX,PSYR,WCLOB,TIME_UPD,LEVEL_NUM,TYPE_REPRES)
	runtime.executeProg(_, mod, "PROTO_JSON", args);
	return args.WCLOB.value;
};

exports.query = function(_, httpContext, script, query) {
	var mod = loadScript(_, script);
	var asnd = new(ASYRSND.constructor)(httpContext.superv);
	var args = {
		ASND: {
			type: "LY",
			value: asnd
		}
	};
	console.log(mod);
	runtime.executeProg(_, mod, "$GET", {});
	tracerJs.debug && tracerJs.debug(JSON.stringify(args.ASND.value));
	return args.ASND.value.DATA;
};