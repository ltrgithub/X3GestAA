"use strict";
var util = require("etna-supervisor/lib/util");
var utilDriver = require("etna-supervisor/lib/drivers/util");

var trace; // = console.log;
var HttpError = util.HttpError;

var trim = utilDriver.trim;

var X3Rights = util.defineClass(function(_, superv) {
	this.supervisor = superv;
	this._rigths = null;
	this._etag = null;
	return this;
}, null, {
	updEtag: function(_, etag) {
		var self = this;
		var updEtag = self.supervisor.executeSql(_, "update ADOVAL A SET A.VALEUR_0 = '" + etag +
			"' WHERE A.CMP_0=' ' and A.FCY_0=' ' and A.PARAM_0='RIGHTSETAG'");
		trace && trace("Update in base, etag : " + JSON.stringify(updEtag));
	},
	getEtagBase: function(_) {
		var self = this;
		var wetag = self.supervisor.executeSql(_, "Select A.VALEUR_0 From ADOVAL A where A.CMP_0=' ' and A.FCY_0=' ' and A.PARAM_0='RIGHTSETAG'");
		if (wetag[0] && wetag[0].VALEUR > "") {
			trace && trace("getEtagBase, etag : " + JSON.stringify(wetag));
			return wetag[0].VALEUR;
		}
	},
	getRigths: function(_, user) {
		var self = this;

		if (user === undefined) throw new HttpError(401, "user undefined");

		var currentEtag = new Date().toJSON();
		var baseEtag = self.getEtagBase(_);

		if (baseEtag === undefined) {
			var updEtag = self.supervisor.executeSql(_, "update ADOVAL A SET A.VALEUR_0 = '" + currentEtag +
				"' WHERE A.CMP_0=' ' and A.FCY_0=' ' and A.PARAM_0='RIGHTSETAG'");
			trace && trace("Update in base, etag : " + JSON.stringify(updEtag));
		}

		self._etag = (baseEtag || currentEtag);

		trace && trace("loadRigthsFromMongo " + user + "  " + self._etag);
		var data = {};
		data = self.loadRigthsFromMongo(_, user, self._etag);
		if (data) return self._rigths = data;

		trace && trace("loadRigthsFromBase " + user + "  " + self._etag);
		data = self.loadRigthsFromBase(_, user, self._etag);
		if (data) return self._rigths = data;
	},
	getJsonRigths: function(_, user) {
		var self = this;
		var res = self.getRigths(_, user);
		if (res === undefined) return {};
		if (res._accessCodes) res._accessCodes = res._accessCodes.join(",");
		if (res._disabledFunctions) res._disabledFunctions = res._disabledFunctions.join(",");
		if (res._authorizedFunctions) res._authorizedFunctions = res._authorizedFunctions.join(",");
		if (res._authorizedRepresentations) {
			Object.keys(res._authorizedRepresentations).forEach_(_, function(_, key) {
				if (res._authorizedRepresentations[key]._sites) res._authorizedRepresentations[key]._sites = res._authorizedRepresentations[key]._sites.join(",");
			});
		}
		return res;
	},
	loadRightsCache: function(_, filter) {
		return this.supervisor.mongoStore.collection('X3RightsCache', _).find(filter, _).toArray(_)[0];
	},
	updateRightsCache: function(_, user, wetag, userRights) {
		if (wetag !== undefined) {
			trace && trace("store in X3RightsCache in mongo ");
			var colX3Right = this.supervisor.mongoStore.createCollection('X3RightsCache', _);
			this.supervisor.mongoStore.collection('X3RightsCache', _).ensureIndex({
				endpoint: 1,
				user: 2
			}, {
				background: true
			}, _);

			var cache = {
				userRights: {}
			};
			cache.userRights = userRights;
			cache.user = user;
			cache.endpoint = this.supervisor.endpointName;
			cache.etag = wetag;
			var filter = {};
			filter["endpoint"] = this.supervisor.endpointName;
			filter["user"] = user;
			console.log("update X3RightsCache " + JSON.stringify(filter) + "  right " + JSON.stringify(userRights));
			var r = this.supervisor.mongoStore.collection("X3RightsCache", _).update(filter, cache, {
				upsert: true
			}, _);
		}
	},
	loadRigthsFromMongo: function(_, user, wetag) {
		var self = this;
		user = user.toUpperCase();
		var filter = {
			endpoint: self.supervisor.endpointName,
			user: user
		};
		var data = self.loadRightsCache(_, filter);
		if (data && data.etag === wetag) {
			trace && trace("find in mongo user " + user + "  " + wetag);
			return data.userRights;
		}
	},
	loadRigthsFromBase: function loadRights(_, user, wetag) {

		var self = this;
		var sqlDriver = self.supervisor.sqlDriver;

		user = user.toUpperCase();
		trace && trace("user " + user);

		var res = {
			_accessCodes: [],
			_authorizedFunctions: [],
			_disabledFunctions: [],
			_authorizedRepresentations: []
		};
		var param = sqlDriver.param;
		var result = sqlDriver.withConnection(_, function(_, cnx) {
			var params = [user];
			var userPrfCod = "";
			var wuser = sqlDriver.execute(_, cnx, "select U.PRFFCT_0,U.CODMET_0 from AUTILIS U Where U.USR_0=" + param(0), params).map(trim);
			if (wuser[0] === undefined) throw new HttpError(401, "Incorrect user / password");

			userPrfCod = wuser[0].PRFFCT;
			if (userPrfCod === "" && wuser[0]) {
				params = [wuser[0].CODMET];
				var profilMetier = sqlDriver.execute(_, cnx, "select M.PRFFCT_0 from AMETUTI M Where M.CODMET_0=" + param(0), params).map(trim);
				userPrfCod = profilMetier[0].PRFFCT;
			}
			trace && trace("userPrfCod : " + userPrfCod);

			var wdosx3 = sqlDriver.execute(_, cnx, "Select A.VALEUR_0 From ADOVAL A where A.CMP_0=' ' and A.FCY_0=' ' and A.PARAM_0='SUPDOS'").map(trim);
			var dosx3 = wdosx3[0].VALEUR;
			trace && trace("dosx3 " + dosx3);
			var wadonix = sqlDriver.execute(_, cnx, "Select A.VALEUR_0 From ADOVAL A where A.CMP_0=' ' and A.FCY_0=' ' and A.PARAM_0='ADONIX'").map(trim);
			var adonix = wadonix[0].VALEUR;

			// Create the list of access codes :
			params = [user, 2];
			res._accessCodes = sqlDriver.execute(_, cnx, "select A.CODACC_0 from ACCES A Where A.USR_0=" + param(0) +
				"and A.CONSUL_0=" + param(1) + " and A.CODACC_0<>' '", params).map(trim).reduce(function(wacs, acs) {
				wacs.push(acs.CODACC);
				return wacs;
			}, []);

			// Create the list of authorized functions
			params = [userPrfCod];
			var wafctfct = sqlDriver.execute(_, cnx, "select U.ALLFCT_0 from AFCTFCT U Where U.PRFCOD_0=" + param(0), params).map(trim);
			var allfct = wafctfct[0].ALLFCT;
			if (allfct === 2 && self.supervisor.folderName !== "SUPERV") {
				res._authorizedFunctions.push("*").join(",");
			} else {
				if (self.supervisor.folderName === dosx3) {
					var crit = "(1=1)";
					if (adonix !== "2") {
						crit = "(A.MODULE_0 in (1,9,10))";
					}
					trace && trace("adonix " + adonix + " " + crit);
					res._authorizedFunctions = sqlDriver.execute(_, cnx, "select A.CODINT_0 from AFONCTION A " +
						"Where " + crit + " order by A.CODINT_0").map(trim).reduce(function(wafc, afc) {
						wafc.push(afc.CODINT);
						return wafc;
					}, []);
				} else if (allfct === 2) {
					res._authorizedFunctions = sqlDriver.execute(_, cnx, "select A.CODINT_0 from AFONCTION A order by A.CODINT_0").map(trim).reduce(function(wafc, afc) {
						wafc.push(afc.CODINT);
						return wafc;
					}, []);
				} else {
					params = [userPrfCod];
					res._authorizedFunctions = sqlDriver.execute(_, cnx,
						"select AFC.CODINT_0 " +
						"from AFONCTION AFC ,AFCTFCY AFF , AFCTPRF AFP " +
						"where (AFF.FCY_0=' ' and AFF.PRFCOD_0=" + param(0) + " and AFF.FNC_0=AFC.CODINT_0 " +
						"and AFP.PRFCOD_0=" + param(0) + " and AFP.FNC_0=AFC.CODINT_0 and AFP.ACS_0=2) order by AFC.CODINT_0", param).map(trim).reduce(function(wafc, afc) {
						wafc.push(afc.CODINT);
						return wafc;
					}, []);
				}

			}
			//Create the list of disabled functions
			res._disabledFunctions = sqlDriver.execute(_, cnx,
				"select AFC.CODINT_0 " +
				"from AFONCTION AFC ,ACTIV ACV " +
				"where (AFC.CODACT_0=ACV.CODACT_0 and ACV.FLACT_0<>2) order by AFC.CODINT_0"
			).map(trim).reduce(function(wafc, afc) {
				wafc.push(afc.CODINT);
				return wafc;
			}, []);

			//Create lists of authorisez facilities by function
			var criteria = "(1=1)";
			if (self.supervisor.folderName === dosx3 && adonix !== "2") {
				criteria = "(ASW.MODULE_0 in (1,9,10))";
			}
			params = [user];
			var wokrole = sqlDriver.execute(_, cnx, "Select A.USR_0 From AUSRBPR A where A.USR_0=" + param(0), params).map(trim);
			var okrole;
			if (wokrole[0]) {
				okrole = wokrole[0].USR;
				trace && trace("okrole=" + wokrole[0].USR);

			}
			var listFctRep = [];

			var rsAsw = sqlDriver.execute(_, cnx, "select ASW.CODREP_0,ASW.AFCRIGHT_0,ASW.CODCLA_0 from ASHW ASW where " + criteria + " and (ASW.CODACT_0=' ' or " +
				"ASW.CODACT_0 in (select ACV.CODACT_0 from ACTIV ACV where ASW.CODACT_0=ACV.CODACT_0 and ACV.FLACT_0=2)) order by ASW.CODREP_0 desc").map(trim).reduce_(_, function(_, wasw, asw) {
				var indexFunction = res._authorizedFunctions.indexOf(asw.AFCRIGHT);
				if (indexFunction >= 0 || asw.AFCRIGHT === undefined) {
					listFctRep.push(asw.AFCRIGHT);
					if (asw.AFCRIGHT === "" || asw.AFCRIGHT === undefined || allfct === 2 || indexFunction >= 0) {
						wasw[asw.CODREP] = {
							codrep: asw.CODREP,
							codcla: asw.CODCLA,
							afcright: asw.AFCRIGHT || "",
							indexFunction: indexFunction
						};
					}
				}
				return wasw;
			}, {});
			params = [userPrfCod];
			var rsSites = sqlDriver.execute(_, cnx, "select A.FCY_0,A.FNC_0 from AFCTFCY A " +
				"where A.FCY_0<>' ' and A.PRFCOD_0= " + param(0) + " and A.FNC_0 in ('" + listFctRep.join("','") + "')", params).map(trim).reduce(function(waff, aff) {
				var fct = aff.FNC || "_";
				waff[fct] = waff[fct] || [];
				waff[fct].push(aff.FCY);
				return waff;
			}, {});

			var rsFct = sqlDriver.execute(_, cnx, "Select A.CODINT_0,A.VALPAR_0 From AFONCTION A where A.ACTION_0='GOBJET'").map(trim).reduce(function(wafc, afc) {
				wafc[afc.CODINT] = {
					codint: afc.CODINT,
					valpar: afc.VALPAR,
					objX3: ""
				};
				if (afc.VALPAR !== undefined && afc.VALPAR.indexOf('"') >= 0) {
					wafc[afc.CODINT].objX3 = afc.VALPAR.substring(afc.VALPAR.indexOf('"') + 1, afc.VALPAR.lastIndexOf('"'));
				}
				return wafc;
			}, {});

			var rsObj = sqlDriver.execute(_, cnx, "Select A.ABREV_0,A.NOMFIC_0 From AOBJET A").map(trim).reduce(function(waob, aob) {
				waob[aob.ABREV] = {
					abrev: aob.ABREV,
					nomfic: aob.NOMFIC,
				};
				return waob;
			}, {});
			params = [user];
			var rsArl = sqlDriver.execute(_, cnx, "Select ARL.OBJ_0,ARL.FLD_0,AUB.BPR_0,ARL.ROL_0 From AROLE ARL , AUSRBPR AUB where AUB.USR_0=" + param(0) + " " +
				"and AUB.ROL_0=ARL.ROL_0", params).map(trim).reduce(function(warl, arl) {
				if (warl[arl.OBJ] === undefined) {
					warl[arl.OBJ] = {
						obj: arl.OBJ,
						fld: arl.FLD,
						rol: [],
						key: []
					};
				}
				warl[arl.OBJ].rol.push(arl.ROL);
				warl[arl.OBJ].key.push(arl.BPR);
				return warl;
			}, {});
			var repAuth = {};
			Object.keys(rsAsw).forEach_(_, function(_, key) {
				repAuth[key] = {};
				if (rsAsw[key].afcright === "" || allfct === 2 || rsAsw[key].indexFunction >= 0) {
					if (rsAsw[key].codrep !== rsAsw[key].codcla) {
						repAuth[key]._entity = rsAsw[key].codcla;
					}
				}
				if (rsAsw[key].indexFunction >= 0 && rsSites[rsAsw[key].afcright] !== undefined) {
					//repAuth[key]._sites = rsSites[rsAsw[key].afcright].join(",");
					repAuth[key]._sites = rsSites[rsAsw[key].afcright];
				}
				if (rsFct[rsAsw[key].afcright] !== undefined && rsFct[rsAsw[key].afcright].valpar !== "" & okrole !== "") {
					var objX3 = rsFct[rsAsw[key].afcright].objX3;
					if (objX3 !== "") {
						var table = rsObj[objX3].nomfic;
						if (table !== "") {
							if (rsArl[objX3]) {
								var keys = rsArl[objX3].key;
								if (keys !== "") {
									repAuth[key]._conditions = [];
									var condition = {
										_type: "authorization",
										_where: ""
									};
									condition._where = "(" + rsArl[objX3].fld;
									if (keys.length > 1) {
										condition._where += " in ('" + keys.join("','") + "'))";
									} else {
										condition._where += " eq '" + keys.join("','") + "')";
									}
									repAuth[key]._conditions.push(condition);
								}
							}

						}

					}
				}
			});

			res._authorizedRepresentations = repAuth;
		});

		var update = self.updateRightsCache(_, user, wetag, res);
		return res;
	}
});

exports.X3Rights = X3Rights;