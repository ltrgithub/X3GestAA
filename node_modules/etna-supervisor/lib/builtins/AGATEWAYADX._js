"use strict";
var X3SON = require("etna-engine/lib/x3son");
var util = require("etna-supervisor/lib/util");
var variables = require('etna-engine/lib/runtime/variables');
var Clbfile = require('etna-engine/lib/runtime/tclbfile').Clbfile;

var constants = require("etna-supervisor/lib/constants");

exports.constructor = util.defineClass(function(superv, body) {
	this.supervisor = superv;
	this.$exported = true;
	this.parameters = {};
	this.body = body;
}, null, {
	init: function(_) {
		this.parameters = {};
		var strings = X3SON.parse(_, this.body);
		for (var i = 0; i < strings.length; i++) {
			var pro = strings[i].x3ToString();
			var value = X3SON.parse(_, strings[++i].x3ToString());
			this.parameters[pro] = value;
		}
		//dbg:console.log("this.parameters:",this.parameters);  
		return this;
	},
	get: function(_, name) {},
	xmet: function(name) {
		return /^ASET\w*$/.test(name) ? this.xmetSetParameter : this.xmetGetParameter;
	},
	stringify: function(_) {
		var self = this;
		var strings = Object.keys(this.parameters).reduce_(_, function(_, r, p) {
			r.push(new Clbfile(p));
			r.push(new Clbfile(X3SON.stringify(_, self.parameters[p])));
			return r;
		}, []);
		return X3SON.stringify(_, strings);
	},

	xmetGetParameter: function(_) {
		var args = (Array.prototype.slice.call(arguments).length > 0) ? Array.prototype.slice.call(arguments).slice(1) : [];
		var param = args[0](_);
		args[1](_, variables.vOperations.SET, this.parameters[param]);
		return constants.CST_AOK;
	},
	xmetSetParameter: function(_) {
		var args = (Array.prototype.slice.call(arguments).length > 0) ? Array.prototype.slice.call(arguments).slice(1) : [];
		var param = args[0](_);
		var value = args[1](_);
		this.parameters[param] = value;
		return constants.CST_AOK;
	},
});