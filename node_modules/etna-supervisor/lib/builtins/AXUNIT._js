"use strict";
exports.$exported = true;
var glob = require('streamline/lib/globals');

var date = require('syracuse-core/lib/types/date');
var errors = require('etna-engine/lib/runtime/errors');
var operators = require('etna-engine/lib/runtime/operators');
var flowControl = require('etna-engine/lib/runtime/flowControl');
var bcd = require('etna-engine/lib/runtime/bcd') ;
var integer = require('etna-engine/lib/runtime/integer') ;
var runtime = require('etna-engine/lib/runtime/runtime');
var testCases = [];
var isLast;

exports.TESTSUITE_START = function(_,suite_id, suite_description) {
	//added for AXUNIT comptability
};

exports.ADD_TESTCASE = function(_, name, title, count) {
	testCases.push({
		name: name,
		title: title,
		count: count,
	});
};

exports.RUN_TESTSUITE = function(_, title, description) {
	var frame = glob.context.x3frame;
	var moduleId = errors.moduleName(frame.prev.loc);
	QUnit.module(moduleId, {
		teardown: function() {
			// kill process in next tick so that test of assertion counts is not shortcircuited.
			// Be carefull though to for the stdout to be drained before exiting !
			if (isLast) setTimeout(function() {
				runtime.exit(0);
			},100);
		},
	});
	testCases.forEach(function(tc, i) {
		asyncTest(tc.title, tc.count, function(_) {
			isLast = (i === testCases.length - 1);
			try {
				var prog = frame.prog.module[tc.name];
				if (!prog) throw new Error("test case missing: " + tc.name);
				flowControl.callProg(_, prog, [], [], glob.context.x3frame.sub.loc);
				start();
			} catch (ex) {
				//console.error(ex);
				throw ex;
			}
		});
	});
	return true;
};

exports.CHECK_EQUAL = function(_, v1, v2, title) {
    var v11= (Array.isArray(v1)? (v1[2][0] === undefined ? v1[1] : v1[2][0]) : v1);
    var v22= (Array.isArray(v2)? (v2[2][0] === undefined ? v2[1] : v2[2][0]) : v2);

    if (bcd.isBCD(v11)) { 
    	console.log("AX BCD") ;
    	if (typeof v22 === "number") deepEqual(  bcd.toString(v11), ""+v22, title || v11) ;
    	else if (integer.isInteger(v22)) deepEqual( bcd.toString(v11), integer.toString(v22), title || v11) ;
    	else if (bcd.isBCD(v22)) deepEqual( bcd.toString(v11) , bcd.toString(v22), title || v11) ;
    	else deepEqual (1, 0, title || v11) ;
	} else if (typeof v11 === "number") {
		console.log("AX NUmber") ;
    	if (typeof v22 === "number") { console.log("versurs Number ") ;deepEqual(  v11, v22, title || v11) ;}
    	else if (integer.isInteger(v22)) { console.log("versurs Integer "+ v11 +" "+integer.toDouble(v22)) ; deepEqual( v11, integer.toDouble(v22), title || v11) ;}
    	else if (bcd.isBCD(v22)) { console.log("versurs BCD ") ;deepEqual( ""+v11 , bcd.toString(v22), title || v11) ;}
    	else deepEqual (1, 0, title || v11) ;		
	} else if (integer.isInteger(v11)) {
		console.log("AX Integer") ;
		if (typeof v22 === "number") deepEqual( integer.toDouble( v11), v22, title || v11);
		else if (bcd.isBCD(v22))  deepEqual(  integer.toString(v11), bcd.toString(v22), title || v11) ;
		else if (integer.isInteger(v22)) deepEqual(  integer.toString(v11), integer.toString(v22), title || v11) ;
		else deepEqual (1, 0, title || v11) ;
	} else if (date.isDate(v22) && date.isDate(v11)) {
		console.log("AX date") ;
		deepEqual(  v11.toString("yyyyMMdd"), v22.toString("yyyyMMdd"), title || v11) ;
	}
	else {
		console.log("Autre " + v11 + " "+typeof v22 ) ;
		deepEqual(v11, v22, title || v11) ;
	}
}

exports.CHECK_NOTEQUAL = function(_, v1, v2, title) {
	var v11= (Array.isArray(v1)? (v1[2][0] === undefined ? v1[1] : v1[2][0]) : v1);
    var v22= (Array.isArray(v2)? (v2[2][0] === undefined ? v2[1] : v2[2][0]) : v2);

    if (bcd.isBCD(v11)) {
    	
    	if (typeof v22 === "number") ok(  (bcd.compare(v11, bcd.fromInt32(v22))===0)?1:0, title || v11) ;
    	else if (integer.isInteger(v22)) ok(  (bcd.compare(v11, bcd.fromInteger(v22))===0)?1:0, title || v11) ;
    	else if (bcd.isBCD(v22)) ok(  (bcd.compare(v11, v22)===0)?1:0, title || v11) ;
    	else ok (false, title || v11) ;
	} else if ( integer.isInteger(v11)) {
		
		if (typeof v22 === "number") ok( integer.toDouble(v11) != v22, title || v11) ;
		else if (bcd.isBCD(v22)) ok(  (bcd.compare(bcd.fromInt32(v22), v11)===0)?1:0, title || v11) ;
		else ok (false, title || v11) ;
	} else if (date.isDate(v22) && date.isDate(v11)) {
		
		ok(  v11.toString("yyyyMMdd") != v22.toString("yyyyMMdd"), title || v11) ;
	}
	else
	{
		
		ok(v11 != v22, title || v11);
	}
}

exports.CHECK_TRUE = function(_, v) {
	ok(v);
}

exports.CHECK_FALSE = function(_, v) {
	ok(!v);
}

