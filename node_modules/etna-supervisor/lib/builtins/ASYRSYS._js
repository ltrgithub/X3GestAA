"use strict";
exports.$exported = true;
var glob = require('streamline/lib/globals');
var constants = require("etna-supervisor/lib/constants");
var fs = require('streamline-fs');
var traceSup = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");

module.exports = {
	// MACHINE(DOSSIER,MACHINE,APPLI)
	// GET_OS(ACTX,MACHINE,OS)

	// EXIST(CHAINE,EXIST)
	EXIST: {
		params: ['FILE', 'EXIST'],
		body: function(_) {
			var frame = glob.context.x3frame;
			frame.values.EXIST = fs.exists(frame.values.FILE, _);
		},
	},
	// EXISTE_STC("""",nomap,[L]CODCLA,[L]OK)"

	// EXISTE_ADX(MACHINE,APPLI,CODTRT,OKTRT)
	EXISTE_ADX: {
		params: ['MACHINE', 'APPLI', 'CODTRT', 'OKTRT'],
		body: function(_) {
			var frame = glob.context.x3frame;
			traceSup.debug && traceSup.debug("ASYRSYS.EXISTE_ADX:" + [
				frame.values.MACHINE,
				frame.values.APPLI,
				frame.values.CODTRT,
				frame.values.OKTRT
			].join(','));
			frame.values.OKTRT = 1;
			traceSup.debug && traceSup.debug("EXISTE_ADX return:", frame.values.OK);
		},
	},
	// _EFFACE(FICANU,STAT)
	// _GETFULLPATH(IN_REPERT)
	// _COPIE(FILE_FROM,FILE_TO,ERROR)
	// _MOVE(FICNEW,FICSRC,STAT)
	// COPYFILE(ILE_FROM,FILE_TO,MESSAGE)
	// DELETEFILE(FILE,MESSAGE)
	DELETEFILE: {
		params: ['FILE', 'MESSAGE'],
		body: function(_) {
			var frame = glob.context.x3frame;
			fs.unlink(frame.values.FILE, _);
			return constants.CST_AOK;
		},
	},
	// CHECK_SCRIPT(ACTX,SCRIPT)
	// _EFFACE_ADX(MACHINE,APPLI,PREFIX+COD+[L]EXTTRT,STAT)
	// _EFFACE_STC(MACHINE,APPLI,func SUBASW.PREFIX_REP+COD+[L]EXTSTC,STAT)
	// _ASYSTEME(MACHINE,WCMDE,"""",STAT)
	// SYSTEME(ACTX,adxmac(0),ORDSYS,"""",STAT)
	// SYSTEME2(this.ACTX,MACHINE,ORDSYS,'',[L]WNBFILES,[L]WFILES)	
};