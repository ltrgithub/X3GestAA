"use strict";
var util = require("etna-supervisor/lib/util");
var glob = require('streamline/lib/globals');
var ACTXCACHE = require("etna-supervisor/lib/builtins/ACTXCACHE");


exports.constructor = util.defineClass(function(superv) {
	this.supervisor = superv;
	this.$exported = true;
	this.class = {properties:{}};
	this.isContext = true;
}, null, {
	init: function(_) {		
		//this.ACACHE = new (ACTXCACHE.constructor)(this.supervisor).init(_);	
		return this;
	},
	set: function(_,name,val) {
		this[name] = val;
		// TODO : set readonly throw new Error("SET ACTX property " + name);
	},
	get: function(_,name){
		if (this.desactGet)             return  this[name];
		if (this[name])			return this[name];
        this.desactGet = name ;
		var recDb = this.supervisor.loadContextProp(_,name);
		if (!recDb) throw new Error("NIY ACTX property " + name);
		var wprop = {
				"FLDCLA": name,
	            "CODTYP" : recDb.CODTYP,
	            "TYPCLA": 99,
	            "LONG" : recDb.LNGTYP,
		};
		this.class.properties[name] =  this.supervisor.new(_, 'Property', this, wprop);
		var dime;
		if (recDb.FORDIM[0])  dime = recDb.FORDIM[0] ;
		
		if (dime){
			this[name] =  [1,  this.class.properties[name].type.defaultValue(), [],1,dime]; 
		} else {
			this[name] = this.class.properties[name].type.defaultValue();		
		}
		var trtini;
		if (recDb.TRTINI)			trtini = recDb.TRTINI;
		if (recDb.FORINI)			trtini = "this."+name+" = "+recDb.FORINI;		
		if (trtini){
			var wcript = "\n$METHODS \n";
			wcript	+= trtini + '\n';
			wcript  += "Return" ;
			//wcript = "$METHODS \n this.IRS(1) = 'TOTO' \n this.IRS(2) = 'TOTA' \n Return" ;
			//console.log("wcript " + wcript);
			this.script = this.supervisor.loadScriptBase(_,wcript,name);
			this.invokeScript(_, this);
		}
		switch (name) {
		case 'USER':
			if (typeof this.USER != 'undefined')	    this.USER    = ( process.env.USER || "user") ;
			break ;
		case 'AFOLDER':
			if (typeof this.AFOLDER != 'undefined')	this.AFOLDER = this.supervisor.folderName ;
			break ;
		case 'LAN':
			if (typeof this.LAN != 'undefined')	this.LAN = this.supervisor.LAN ;
			break ;
		}
		this.desactGet = null ;
		return this[name] ;
	},
	invokeScript: function(_, instance) {
		var astatus = 0;
			var handler = this.script.METHODS;

			if (!handler) return;
			var frame = glob.context.x3frame;

			var prev = frame;
			var cx = prev.context;
			glob.context.x3frame = frame = {
				values: {},
				types: {},
				context: cx,
				prev: prev,
				loopLevel: 0,
				loc: {
					file: module.id,
					line: 0
				}
			};
			// current sub is the prog itself
			frame.sub = frame;
			frame.dicts = [frame, cx.globals, cx.sys];
			try {
				util.declVar(frame,'THIS','LY', instance);
				handler(_) ;
			} finally {
				glob.context.x3frame = prev;
			}

		return ;
	},
});
