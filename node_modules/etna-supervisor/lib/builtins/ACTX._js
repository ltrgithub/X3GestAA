"use strict";
var glob = require('streamline/lib/globals') ;
var util = require("etna-supervisor/lib/util");
var InstanceProperty = require("etna-supervisor/lib/instanceProperty").InstanceProperty;
var attributes  = require("etna-supervisor/lib/attributes");
var glob = require('streamline/lib/globals');
var ACTXCACHE = require("etna-supervisor/lib/builtins/ACTXCACHE");
var variables 	= require('etna-engine/lib/runtime/variables');
var system 	= require('etna-engine/lib/runtime/system');

var locales = {
	' .':/^fr.*/i,
	',.':/^en.*/i
};


function _actxInvokeScript(_, ctx, instance) {
	var astatus = 0;
	var handler = ctx.script.METHODS;

	if (!handler) return;
	var frame = glob.context.x3frame;

	var prev = frame;
	var cx = prev.context;
	glob.context.x3frame = frame = {
		values: {},
		types: {},
		context: cx,
		prev: prev,
		loopLevel: 0,
		loc: {
			file: module.id,
			line: 0
		}
	};
	// current sub is the prog itself
	frame.sub = frame;
	frame.dicts = [frame, cx.globals, cx.sys];
	try {
		util.declVar(frame,'THIS','LY', instance);
		handler(_) ;
	} finally {
		glob.context.x3frame = prev;
	}
};

// Not exposed by ACTX : 
function _setProtectedProperty(object,property,value) {
	if(object[property] !== undefined) {
		object[property].$_isReadOnly = false;
		object[property].$isReadOnly  = false;
		object[property].value 	      = value;		
		object[property].$isReadOnly  = true;
		object[property].$_isReadOnly = true;
	}
}
function _actxLoadContextProp(_,ctx,name){
	ctx.desactGet = name;
	if(ctx.builtinProperties && ctx.builtinProperties[name]) {
		ctx[name] = new InstanceProperty(ctx,ctx.builtinProperties[name]());
	} else if(ctx.builtinChapters && ctx.builtinChapters[name]) {
		var chapter = new Chapter(ctx,ctx.builtinChapters[name]);
		ctx[name] = new InstanceProperty(ctx,chapter);
	} else {
		var recDb = ctx.supervisor.loadContextProp(_,name);
		if (!recDb) {
			recDb = ctx.supervisor.loadContextChapter(_,name);
			if (!recDb) throw new Error("NIY ACTX property " + name);
			
			ctx[name] = new InstanceProperty(ctx,chapter);
		}
		var wprop = {
				"FLDCLA": name,
		        "CODTYP" : recDb.CODTYP,
		        "TYPCLA": 99,
		        "LONG" : recDb.LNGTYP,
		};
		ctx.class.properties[name] =  ctx.supervisor.new(_, 'Property', ctx, wprop);
		var dime;
		if (recDb.FORDIM[0])  dime = recDb.FORDIM[0] ;

		if (dime){
			ctx[name] = new InstanceProperty(ctx,[1,  ctx.class.properties[name].type.engineType(), [],1,dime-1]); 
		} else {
			ctx[name] = new InstanceProperty(ctx,ctx.class.properties[name].type.defaultValue());		
		}
		var trtini;
		if (recDb.TRTINI)			trtini = recDb.TRTINI;
		if (recDb.FORINI)			trtini = "ctx."+name+" = "+recDb.FORINI;		
		if (trtini){
			var wcript = "\n$METHODS \n";
			wcript	+= trtini + '\n';
			wcript  += "Return" ;
			//wcript = "$METHODS \n ctx.IRS(1) = 'TOTO' \n ctx.IRS(2) = 'TOTA' \n Return" ;
			//console.log("wcript " + wcript);
			ctx.script = ctx.supervisor.loadScriptBase(_,wcript,name);
			_actxInvokeScript(_, ctx, ctx);
		}
	}
	// Protect the property :
	ctx[name].$isReadOnly  = true;
	ctx[name].$_isReadOnly = true;
	ctx.desactGet = null ;
	return ctx[name];
}

var Chapter =  util.defineClass(function(parent,builtinProperties) {
	this.parent 	= parent;
	this.$exported = true;
	this.class = {properties:{}};
	this.isContext = true;
	this.builtinProperties = builtinProperties;

}, null, {
	init: function(_) {		
		return this;
	},
	set: function(_,name,val) {
		this[name].value = val;
		// TODO : set readonly throw new Error("SET ACTX property " + name);
	},
	get: function(_,name){
		if (this.desactGet || this[name]) return this[name].value.getValue ? this[name].value.getValue() : this[name].value;
	
		this[name] = _actxLoadContextProp(_,this,name);
		return this[name].value.getValue ? this[name].value.getValue() : this[name].value;
	},
	setPropertyAttribute:function(_,property,attribut,value) {
		return variables.x3Val(this[property].setAttribute(attribut,value));
	},
	getPropertyAttribute:function(_,property,attribut,value) {
		return this[property].getAttribute(attribut);
	}
},
{hasAttributes:true});

exports.constructor = util.defineClass(function(superv) {
	this.supervisor = superv;
	this.$exported = true;
	this.class = {properties:{}};
	this.isContext = true;

	this.builtinProperties = {
		AFOLDER : function(){return superv.folderName;},
		LAN     : function(){return superv.LAN;},
		USER	: function(){
			return {
					getValue:function(){ return glob.context.x3frame.context.sys.values.ADXUSR;}
				}
			},
	};

	this.builtinChapters = {
		AFOLD : {
			AVERSION:function(){
				return {
					getValue:function(){ return system.functions.VER$.fn(0);},
				}
			}
		},
		AINTL : {
			TWODIGITYEAR:function(){ 
				return {
					getValue:function(){ return glob.context.x3frame.context.sys.values.ADXDCS;}
				}
			}
		}
	};

/*			SHORTDATE:function(){ return "";},
			LONGDATE:function(){ return "";},
			SHORTTIME:function(){ return "";},
			LONGTIME:function(){ return "";},
			SHORTDATETIM:function(){ return "";},
			LONGDATETIM:function(){ return "";},
			DECIMALSEP:function(){ return "";},
			THOUSANDSEP:function(){ return "";},
			FIRSTDAYWEEK:function(){ return "";},
			NBGROUPSEP:function(){ return "";},*/

}, null, {
	init: function(_) {		
		return this;
	},
	set: function(_,name,val) {
		this[name].value = val;
		// TODO : set readonly throw new Error("SET ACTX property " + name);
	},
	get: function(_,name){
		if (this.desactGet || this[name]) return this[name].value.getValue ? this[name].value.getValue() : this[name].value;
	
		this[name] = _actxLoadContextProp(_,this,name);
		return this[name].value.getValue ? this[name].value.getValue() : this[name].value;
	},
	setPropertyAttribute:function(_,property,attribut,value) {
		return variables.x3Val(this[property].setAttribute(attribut,value));
	},
	getPropertyAttribute:function(_,property,attribut,value) {
		return this[property].getAttribute(attribut);
	},
	ACTX_SET_LANISO:function(_,l) {
		if(this.LANISO === undefined) this.get(_,"LANISO");
		_setProtectedProperty(this,'LANISO',l);

		require('syracuse-core/lib/locale').setCurrent(_, l);
		(function($){
			Object.keys(locales).some(function(key) {
				if(locales[key].test(l)) {
					$.ADXSCA = $.ADXSCA.substring(0,2)+key+$.ADXSCA.substring(4);
					return;
				}
			});
		})(glob.context.x3frame.context.sys.values);

	},
	ASETATTRPROP :function(_,property,attribut,value) {
		try {
			return this.setPropertyAttribute(_,property,attribut,value);
		} catch(ex) {
			return this.supervisor.constants.CST_AERROR;
		}
	}
},
{hasAttributes:true});
