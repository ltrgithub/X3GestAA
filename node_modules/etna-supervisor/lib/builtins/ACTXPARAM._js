"use strict";
var date = require('etna-engine/lib/runtime/tdate');
var X3Error = require("etna-engine/lib/runtime/errors").X3Error;
var glob = require('streamline/lib/globals');

var utilDriver = require("etna-supervisor/lib/drivers/util");
var util = require("etna-supervisor/lib/util");

var trim = utilDriver.trim;
var HttpError = util.HttpError;



exports.constructor = util.defineClass(function(superv) {
	this.supervisor = superv;
	this.$exported = true;
	this.cache = {};
	this.tableg = [];
	this.tabcpy = [];
	this.tabfcy = [];
}, null, {
	init: function(_, className) {
		this.class = this.supervisor.load(_, 'Class', className);
		return this;
	},
	AGETVALNUM: function(_, levcod, code, parameter) {
		return parseInt(this.getParam(_, levcod, code, parameter, "NUM"));
	},
	AGETVALCHAR: function(_, levcod, code, parameter) {
		return this.getParam(_, levcod, code, parameter, "CHAR");
	},
	AGETVALDATE: function(_, levcod, code, parameter) {
		return this.getParam(_, levcod, code, parameter, "DATE");
	},
	AGETUSERVALNUM: function(_, param) {
		return 0; //"TODO";
	},
	_leg: function(_) {
		if (this.tableg.length > 0) return this.tableg;
		var self = this;
		var sqlDriver = self.supervisor.sqlDriver;
		var result = sqlDriver.withConnection(_, function(_, cnx) {
			var wadoval = sqlDriver.execute(_, cnx, "select A.VALEUR_0 from ADOVAL A Where A.CMP_0=' ' and A.FCY_0=' ' and A.PARAM_0='DOSLEG'").map(trim);
			if (wadoval[0] === undefined) throw new HttpError(401, "Incorrect param DOSLEG");
			self.tableg = wadoval[0].VALEUR.split("~");
		});
		return self.tableg;
	},
	_cpy: function(_) {
		if (this.tabcpy.length > 0) return this.tabcpy;
		var self = this;
		var sqlDriver = self.supervisor.sqlDriver;
		var result = sqlDriver.withConnection(_, function(_, cnx) {
			self.tabcpy = sqlDriver.execute(_, cnx, "select C.CPY_0 from COMPANY C").map(trim).reduce(function(wcpy, cpy) {
				wcpy.push(cpy.CPY);
				return wcpy;
			}, []);
		});
		return self.tabcpy;
	},
	_fcy: function(_) {
		if (this.tabfcy.length > 0) return this.tabfcy;
		var self = this;
		var sqlDriver = self.supervisor.sqlDriver;
		var result = sqlDriver.withConnection(_, function(_, cnx) {
			self.tabfcy = sqlDriver.execute(_, cnx, "select F.FCY_0 from FACILITY F").map(trim).reduce(function(wfcy, fcy) {
				wfcy.push(fcy.FCY);
				return wfcy;
			}, []);
		});
		return self.tabfcy;
	},
	AGETUSERVALDATE: function(_, PARAM) {
		return date.today(); //"TODO";
	},
	getLegFromCpy: function(_, folder, cpy) {
		var sqlDriver = this.supervisor.sqlDriver;
		var param = sqlDriver.param;
		var params;
		var value = "";
		var result = sqlDriver.withConnection(_, function(_, cnx) {
			params = [cpy];
			var wparam = sqlDriver.execute(_, cnx, "select A.LEG_0 from COMPANY A Where A.CPY_0=" + param(0), params).map(trim);
			if (wparam[0]) {
				value = wparam[0].LEG;
			}
		});
		return value;
	},
	getCpyFromSite: function(_, folder, site) {
		var sqlDriver = this.supervisor.sqlDriver;
		var param = sqlDriver.param;
		var params;
		var value = "";
		var result = sqlDriver.withConnection(_, function(_, cnx) {
			params = [site];
			var wparam = sqlDriver.execute(_, cnx, "select A.LEGCPY_0 from FACILITY A Where A.FCY_0=" + param(0), params).map(trim);
			if (wparam[0]) {
				value = wparam[0].LEGCPY;
			}
		});
		return value;
	},
	getLegFromSite: function(_, folder, site) {
		var cpy = "";
		var leg = "";
		cpy = this.getCpyFromSite(_, folder, site);
		if (cpy !== "") {
			leg = this.getLegFromCpy(_, folder, cpy);
		}
		return leg;
	},
	requestAdovalBase: function(_, levcod, code, parameter) {
		var sqlDriver = this.supervisor.sqlDriver;
		var param = sqlDriver.param;
		var params;
		var value;
		var result = sqlDriver.withConnection(_, function(_, cnx) {
			params = [levcod, code, parameter];
			var wparam = sqlDriver.execute(_, cnx, "select A.VALEUR_0 from ADOVAL A Where A.CMP_0=" + param(0) + " and A.FCY_0=" + param(1) + " and A.PARAM_0=" + param(3), params).map(trim);
			if (wparam[0]) {
				value = wparam[0].VALEUR;
			}
		});
		return value;
	},
	getParamBase: function(_, levcod, code, parameter) {
		var sqlDriver = this.supervisor.sqlDriver;
		var param = sqlDriver.param;
		var params;
		var value;
		var leg;
		var cpy;
		var actx = glob.context.x3session.actx;
		var self = this;
		var result = sqlDriver.withConnection(_, function(_, cnx) {

			// read param in ADOPAR to have the definiton
			params = [parameter];
			var wadopar = sqlDriver.execute(_, cnx, "select A.VALDEF_0,A.NIVDEF_0,A.PARAM_0,A.TYPVAL_0 from ADOPAR A Where A.PARAM_0=" + param(0), params).map(trim);
			if (wadopar[0] === undefined) throw new HttpError(401, "Incorrect param");

			switch (levcod) {
				case 1: //  looking for value at "Dossier" level
					value = self.requestAdovalBase(_, " ", " ", parameter);
					break;
				case 5: // looking for value at "L�gislation" level
					if (wadopar[0] === 1) { // case 1 : Parameter defined at "Dossier" level
						value = self.requestAdovalBase(_, " ", " ", parameter);
					} else { // Parameter defined at "Leg/Soc/Site/User" level
						value = self.requestAdovalBase(_, "*", code, parameter);
						if (value !== undefined) break;
						value = self.requestAdovalBase(_, " ", " ", parameter);
						break;
					}
					break;
				case 2: // looking for value at "Soci�t�" level
					if (wadopar[0] === 1) { // case 1 : Parameter defined at "Dossier" level
						value = self.requestAdovalBase(_, " ", " ", parameter);
						if (value !== undefined) break;
					} else if (wadopar[0] === 5) { //Parameter defined at "L�gislation" level						
						leg = self.getLegFromCpy(_, actx.$AFOLDER(_), code);
						if (leg !== "") {
							value = self.requestAdovalBase(_, "*", leg, parameter);
							if (value !== undefined) break;
							value = self.requestAdovalBase(_, " ", " ", parameter);
							if (value !== undefined) break;
						}
					} else { //case 3 : Parameter defined at "Soc/Site/User" level					
						value = self.requestAdovalBase(_, code, " ", parameter);
						if (value !== undefined) break;
						leg = self.getLegFromCpy(_, actx.$AFOLDER(_), code);
						value = self.requestAdovalBase(_, "*", leg, parameter);
						if (value !== undefined) break;
						value = self.requestAdovalBase(_, " ", " ", parameter);
						if (value !== undefined) break;
					}
					break;
				case 3: //looking for value at "Site" level
					if (wadopar[0] === 1) { // case 1 : Parameter defined at "Dossier" level
						value = self.requestAdovalBase(_, " ", " ", parameter);
						if (value !== undefined) break;
					} else if (wadopar[0] === 5) { // case 2Parameter defined at "L�gislation" level
						leg = self.getLegFromCpy(_, actx.$AFOLDER(_), code);
						if (leg !== "") {
							value = self.requestAdovalBase(_, "*", leg, parameter);
							if (value !== undefined) break;
							value = self.requestAdovalBase(_, " ", " ", parameter);
							if (value !== undefined) break;
						}
					} else if (wadopar[0] === 2) { // case 3 : Parameter defined at "Soci�t�" level
						cpy = self.getCpyFromSite(_, actx.$AFOLDER(_), code);
						if (cpy !== "") {
							value = self.requestAdovalBase(_, cpy, " ", parameter);
							if (value !== undefined) break;
							leg = self.getLegFromCpy(_, actx.$AFOLDER(_), cpy);
							if (leg !== "") {
								value = self.requestAdovalBase(_, "*", leg, parameter);
								if (value !== undefined) break;
							}
						}
						value = self.requestAdovalBase(_, " ", " ", parameter);
						if (value !== undefined) break;
					} else { // case 4 : Parameter defined at "Site/User" level
						value = self.requestAdovalBase(_, " ", code, parameter);
						if (value !== undefined) break;
						cpy = self.getCpyFromSite(_, actx.$AFOLDER(_), code);
						if (cpy !== "") {
							value = self.requestAdovalBase(_, cpy, " ", parameter);
							if (value !== undefined) break;
							leg = self.getLegFromCpy(_, actx.$AFOLDER(_), code);
							if (leg !== "") {
								value = self.requestAdovalBase(_, "*", leg, parameter);
								if (value !== undefined) break;
							}
						}
						value = self.requestAdovalBase(_, " ", " ", parameter);
						if (value !== undefined) break;
					}
					break;
			}
		});
		return value;
	},
	getParam: function(_, levcod, code, parameter, action) {
		if (!parameter) throw new HttpError(401, "Incorrect param");

		var actx = glob.context.x3session.actx;

		/*switch (levcod) {
			case 1 :
				if(code==="") code = actx.$AFOLDER(_);				
				if (code!==actx.$AFOLDER(_)) throw new HttpError(401, "this method can only be used to get parameter value for the current folder");
				break;
				
			case 0:
			case 2:
			case 3:
			case 5:
				if (code==="") throw  new HttpError(401, "Code can not be empty");
				break;
			default:
				throw  new HttpError(401, "Wrong level");
		}*/
		//TODO manage CACHE


		// not found in chache , search in database		
		var sqlDriver = this.supervisor.sqlDriver;
		var param = sqlDriver.param;
		var actx = glob.context.x3session.actx;
		var params;
		var value;
		var self = this;
		var result = sqlDriver.withConnection(_, function(_, cnx) {

			// read param in ADOPAR to have the definiton
			params = [parameter];
			var wadopar = sqlDriver.execute(_, cnx, "select A.VALDEF_0,A.NIVDEF_0,A.PARAM_0,A.TYPVAL_0 from ADOPAR A Where A.PARAM_0=" + param(0), params).map(trim);
			if (wadopar[0] === undefined) throw new HttpError(401, "Incorrect param");

			switch (action) {
				case "CHAR":
					if (wadopar[0].TYPVAL !== 1) throw new HttpError(401, parameter + " parameter is not of the right type : alpha");
					break;
				case "NUM":
					if (wadopar[0].TYPVAL !== 2 && wadopar[0].TYPVAL !== 4) throw new HttpError(401, parameter + " parameter is not of the right type : numeric");
					break;
				case "DATE":
					if (wadopar[0].TYPVAL !== 3) throw new HttpError(401, parameter + " parameter is not of the right type : date");
					break;
			}

			if (wadopar[0].NIVDEF === 4 && wadopar[0].VALDEF !== 2) throw new HttpError(401, parameter + " parameter can only be defined at User level");

			switch (levcod) {
				case 5: // looking for value at "L�gislation" level
					if (code !== "" && self._leg(_).indexOf(code) < 0) throw new HttpError(401, code + " Legislation code does not exist");
					break;
				case 2: // looking for value at "Soci�t�" level
					if (code !== "" && self._cpy(_).indexOf(code) < 0) throw new HttpError(401, code + " Company code does not exist");
					break;
				case 3: // looking for value at "Site" level
					if (code !== "" && self._fcy(_).indexOf(code) < 0) throw new HttpError(401, code + " Site code does not exist");
					break;
			}

		});
		console.log("pram " + levcod + "  " + code + "  " + parameter);
		return this.getParamBase(_, levcod, code, parameter);
	}
});