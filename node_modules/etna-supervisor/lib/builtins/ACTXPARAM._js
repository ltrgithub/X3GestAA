"use strict";
var date = require('etna-engine/lib/runtime/tdate');
var X3Error = require("etna-engine/lib/runtime/errors").X3Error;
var glob = require('streamline/lib/globals');

var utilDriver = require("etna-engine/lib/drivers/util");
var util = require("etna-supervisor/lib/util");
var traceSup = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");

var HttpError = util.HttpError;

exports.constructor = util.defineClass(function(superv) {
	this.supervisor = superv;
	this.$exported = true;
	this.cache = {
		levcod: {}
	};
	this.userCache = {
		parameter: {}
	};
	this.tableg = [];
	this.tabcpy = [];
	this.tabfcy = [];
}, null, {
	init: function(_) {
		this.class = null;
		return this;
	},
	AGETVALNUM: function(_, levcod, code, parameter) {
		return parseInt(this._getParam(_, levcod, code, parameter, "NUM"));
	},
	AGETVALCHAR: function(_, levcod, code, parameter) {
		return this._getParam(_, levcod, code, parameter, "CHAR");
	},
	AGETVALDATE: function(_, levcod, code, parameter) {
		return this._getParam(_, levcod, code, parameter, "DATE");
	},
	AGETUSERVALNUM: function(_, parameter) {
		return parseInt(this._getParamUser(_, parameter, "NUM"));
	},
	AGETUSERVALCHAR: function(_, parameter) {
		return this._getParamUser(_, parameter, "CHAR");
	},
	AGETUSERVALDATE: function(_, parameter) {
		console.log("AGETUSERVALDATE:" + parameter);
		return this._getParamUser(_, parameter, "DATE");
	},
	_addParamUserCache: function(parameter, value) {
		if (!this.userCache.parameter[parameter]) {
			this.userCache.parameter[parameter] = {
				value: value
			};
		}
		return value;
	},
	_addParamCache: function(levcod, code, parameter, value) {
		if (!this.cache.levcod[levcod]) {
			this.cache.levcod[levcod] = {
				code: {}
			};
		}
		if (!this.cache.levcod[levcod].code[code]) {
			this.cache.levcod[levcod].code[code] = {
				parameter: {}
			};
		}
		if (!this.cache.levcod[levcod].code[code].parameter[parameter]) {
			this.cache.levcod[levcod].code[code].parameter[parameter] = {
				value: value
			};
		}
		return value;
	},
	_leg: function(_) {
		if (this.tableg.length > 0) return this.tableg;
		var self = this;
		var sqlDriver = self.supervisor.sqlDriver;
		var wadoval = self.supervisor.sqlReader(_, "select A.VALEUR_0 from ADOVAL A Where A.CMP_0=' ' and A.FCY_0=' ' and A.PARAM_0='DOSLEG'").toArray(_);
		if (wadoval[0] === undefined) throw new HttpError(401, "Incorrect param DOSLEG");
		self.tableg = wadoval[0].VALEUR.split("~");
		return self.tableg;
	},
	_cpy: function(_) {
		if (this.tabcpy.length > 0) return this.tabcpy;
		var self = this;
		var sqlDriver = self.supervisor.sqlDriver;
		self.tabcpy = self.supervisor.sqlReader(_, "select C.CPY_0 from COMPANY C").toArray(_).reduce(function(wcpy, cpy) {
			wcpy.push(cpy.CPY);
			return wcpy;
		}, []);
		return self.tabcpy;
	},
	_fcy: function(_) {
		if (this.tabfcy.length > 0) return this.tabfcy;
		var self = this;
		var sqlDriver = self.supervisor.sqlDriver;
		self.tabfcy = self.supervisor.sqlReader(_, "select F.FCY_0 from FACILITY F").toArray(_).reduce(function(wfcy, fcy) {
			wfcy.push(fcy.FCY);
			return wfcy;
		}, []);
		return self.tabfcy;
	},
	_getLegFromCpy: function(_, folder, cpy) {
		var sqlDriver = this.supervisor.sqlDriver;
		var param = sqlDriver.param;
		var params;
		var value = "";
		var self = this;
		params = [cpy];
		var wparam = self.supervisor.sqlReader(_, "select A.LEG_0 from COMPANY A Where A.CPY_0=" + param(0), params).toArray(_);
		if (wparam[0]) {
			value = wparam[0].LEG;
		}
		return value;
	},
	_getCpyFromSite: function(_, folder, site) {
		var sqlDriver = this.supervisor.sqlDriver;
		var param = sqlDriver.param;
		var params;
		var value = "";
		var self = this;
		params = [site];
		var wparam = self.supervisor.sqlReader(_, "select A.LEGCPY_0 from FACILITY A Where A.FCY_0=" + param(0), params).toArray(_);
		if (wparam[0]) {
			value = wparam[0].LEGCPY;
		}
		return value;
	},
	_getLegFromSite: function(_, folder, site) {
		var cpy = "";
		var leg = "";
		cpy = this._getCpyFromSite(_, folder, site);
		if (cpy !== "") {
			leg = this._getLegFromCpy(_, folder, cpy);
		}
		return leg;
	},
	_requestAdovalBase: function(_, levcod, code, parameter) {
		var sqlDriver = this.supervisor.sqlDriver;
		var param = sqlDriver.param;
		var params;
		var value;
		var self = this;
		params = [levcod, code, parameter];
		var wparam = self.supervisor.sqlReader(_, "select A.VALEUR_0 from ADOVAL A Where A.CMP_0=" + param(0) + " and A.FCY_0=" + param(1) + " and A.PARAM_0=" + param(2), params).toArray(_);
		if (wparam[0]) {
			value = wparam[0].VALEUR;
		}
		return value;
	},
	_getParam: function(_, levcod, code, parameter, action) {
		if (!parameter) throw new HttpError(401, "Incorrect param");

		//manage CACHE
		if (this.cache.levcod[levcod] !== undefined && this.cache.levcod[levcod].code[code] !== undefined && this.cache.levcod[levcod].code[code].parameter[parameter] !== undefined) {
			return this.cache.levcod[levcod].code[code].parameter[parameter].value;
		}

		// not found in chache , search in database		
		var sqlDriver = this.supervisor.sqlDriver;
		var param = sqlDriver.param;
		var actx = glob.context.x3session.actx;
		var params;
		var value;
		var self = this;
		var leg;
		var cpy;


		// read param in ADOPAR to have the definiton
		params = [parameter];
		var wadopar = self.supervisor.sqlReader(_, "select A.VALDEF_0,A.NIVDEF_0,A.PARAM_0,A.TYPVAL_0 from ADOPAR A Where A.PARAM_0=" + param(0), params).toArray(_);
		if (wadopar[0] !== undefined) {
			if (action !== undefined) self.controlType(action, wadopar[0]);

			if (wadopar[0].NIVDEF === 4 && wadopar[0].VALDEF !== 2) throw new HttpError(401, parameter + " parameter can only be defined at User level");

			switch (levcod) {
				case 1: //  looking for value at "Dossier" level
					value = self._requestAdovalBase(_, " ", " ", parameter);
					break;
				case 5: // looking for value at "L�gislation" level
					if (code !== "" && self._leg(_).indexOf(code) < 0) throw new HttpError(401, code + " Legislation code does not exist");

					if (wadopar[0] === 1) { // case 1 : Parameter defined at "Dossier" level
						value = self._requestAdovalBase(_, " ", " ", parameter);
					} else { // Parameter defined at "Leg/Soc/Site/User" level
						value = self._requestAdovalBase(_, "*", code, parameter);
						if (value !== undefined) break;
						value = self._requestAdovalBase(_, " ", " ", parameter);
						break;
					}
					break;
				case 2: // looking for value at "Soci�t�" level
					if (code !== "" && self._cpy(_).indexOf(code) < 0) throw new HttpError(401, code + " Company code does not exist");

					if (wadopar[0].NIVDEF === 1) { // case 1 : Parameter defined at "Dossier" level
						value = self._requestAdovalBase(_, " ", " ", parameter);
						if (value !== undefined) break;
					} else if (wadopar[0].NIVDEF === 5) { //Parameter defined at "L�gislation" level						
						leg = self._getLegFromCpy(_, actx.$AFOLDER(_), code);
						if (leg !== "") {
							value = self._requestAdovalBase(_, "*", leg, parameter);
							if (value !== undefined) break;
							value = self._requestAdovalBase(_, " ", " ", parameter);
							if (value !== undefined) break;
						}
					} else { //case 3 : Parameter defined at "Soc/Site/User" level					
						value = self._requestAdovalBase(_, code, " ", parameter);
						if (value !== undefined) break;
						leg = self._getLegFromCpy(_, actx.$AFOLDER(_), code);
						value = self._requestAdovalBase(_, "*", leg, parameter);
						if (value !== undefined) break;
						value = self._requestAdovalBase(_, " ", " ", parameter);
						if (value !== undefined) break;
					}
					break;
				case 3: //looking for value at "Site" level
					if (code !== "" && self._fcy(_).indexOf(code) < 0) throw new HttpError(401, code + " Site code does not exist");

					if (wadopar[0].NIVDEF === 1) { // case 1 : Parameter defined at "Dossier" level
						value = self._requestAdovalBase(_, " ", " ", parameter);
						if (value !== undefined) break;
					} else if (wadopar[0] === 5) { // case 2Parameter defined at "L�gislation" level
						leg = self._getLegFromSite(_, actx.$AFOLDER(_), code);
						if (leg !== "") {
							value = self._requestAdovalBase(_, "*", leg, parameter);
							if (value !== undefined) break;
							value = self._requestAdovalBase(_, " ", " ", parameter);
							if (value !== undefined) break;
						}
					} else if (wadopar[0].NIVDEF === 2) { // case 3 : Parameter defined at "Soci�t�" level
						cpy = self._getCpyFromSite(_, actx.$AFOLDER(_), code);
						if (cpy !== "") {
							value = self._requestAdovalBase(_, cpy, " ", parameter);
							if (value !== undefined) break;
							leg = self._getLegFromCpy(_, actx.$AFOLDER(_), cpy);
							if (leg !== "") {
								value = self._requestAdovalBase(_, "*", leg, parameter);
								if (value !== undefined) break;
							}
						}
						value = self._requestAdovalBase(_, " ", " ", parameter);
						if (value !== undefined) break;
					} else { // case 4 : Parameter defined at "Site/User" level
						value = self._requestAdovalBase(_, " ", code, parameter);
						if (value !== undefined) break;
						cpy = self._getCpyFromSite(_, actx.$AFOLDER(_), code);
						if (cpy !== "") {
							value = self._requestAdovalBase(_, cpy, " ", parameter);
							if (value !== undefined) break;
							leg = self._getLegFromCpy(_, actx.$AFOLDER(_), code);
							if (leg !== "") {
								value = self._requestAdovalBase(_, "*", leg, parameter);
								if (value !== undefined) break;
							}
						}
						value = self._requestAdovalBase(_, " ", " ", parameter);
						if (value !== undefined) break;
					}
					break;
			}
		}
		if (value === undefined) {
			switch (action) {
				case "CHAR":
					value = "";
					break;
				case "NUM":
					value = 0;
					break;
				default:
					value = null;
					break;
			}
		}
		traceSup.debug && traceSup.debug([parameter, levcod, code].join(',') + "=" + value);
		return this._addParamCache(levcod, code, parameter, value);
	},
	controlType: function(action, record) {
		switch (action) {
			case "CHAR":
				if (record.TYPVAL !== 1) throw new HttpError(401, record.PARAM + " parameter is not of the right type : alpha");
				break;
			case "NUM":
				if (record.TYPVAL !== 2 && record.TYPVAL !== 4) throw new HttpError(401, record.PARAM + " parameter is not of the right type : numeric");
				break;
			case "DATE":
				if (record.TYPVAL !== 3) throw new HttpError(401, record.PARAM + " parameter is not of the right type : date");
				break;
		}
	},
	_getParamUser: function(_, parameter, action) {

		if (!parameter) throw new HttpError(401, "Incorrect param");

		//manage CACHE
		/*if (this.cache.levcod[levcod]!==undefined && this.cache.levcod[levcod].code[code]!==undefined && this.cache.levcod[levcod].code[code].parameter[parameter]!==undefined){
			return this.cache.levcod[levcod].code[code].parameter[parameter].value
		}*/

		// not found in chache , search in database		
		var sqlDriver = this.supervisor.sqlDriver;
		var param = sqlDriver.param;
		var actx = glob.context.x3session.actx;
		var params;
		var value;
		var self = this;
		// read param in ADOPAR to have the definiton
		params = [parameter];
		var wadopar = self.supervisor.sqlReader(_, "select A.CHAPITRE_0,A.VALDEF_0,A.NIVDEF_0,A.PARAM_0,A.TYPVAL_0 from ADOPAR A Where A.PARAM_0=" + param(0), params).toArray(_);
		if (wadopar[0] === undefined) throw new HttpError(401, "Incorrect param");

		if (wadopar[0].NIVDEF !== 4) throw new HttpError(401, parameter + " is not defined at User level");

		self.controlType(action, wadopar[0]);

		params = [actx.$USER(_), parameter];
		var wadovalaus = self.supervisor.sqlReader(_, "select A.CODUSR_0,A.PARAM_0,A.VALEUR_0 from ADOVALAUS A Where A.CODUSR_0=" + param(0) + " and A.PARAM_0=" + param(1), params);
		wadovalaus = wadovalaus.toArray(_);
		if (wadovalaus[0] !== undefined) {
			value = wadovalaus[0].VALEUR;
			this._addParamUserCache(parameter, value);
		}

		if (wadopar[0].VALDEF === 2) {
			var profil = "";
			params = [actx.$USER(_)];
			var waus = self.supervisor.sqlReader(_, "select A.CODMET_0,A.PRFFCT_0 from AUTILIS A Where A.USR_0=" + param(0), params).toArray(_);
			if (waus[0] === undefined) throw new HttpError(401, "Incorrect user");
			profil = waus[0].PRFFCT;
			if (profil === "") {
				params = [waus[0].CODMET];
				var wame = self.supervisor.sqlReader(_, "select A.PRFFCT_0 from AMETUTI A Where A.CODMET_0=" + param(0), params).toArray(_);
				if (wame[0] === undefined) throw new HttpError(401, "Incorrect profil");
			}
			if (profil) {
				var module = 0;
				params = [wadopar[0].CHAPITRE];
				var wadi = self.supervisor.sqlReader(_, "select A.N1_0 from ATABDIV A Where A.NUMTAB_0=901 and A.CODE_0=" + param(0), params).toArray(_);
				if (wadi[0] === undefined) throw new HttpError(401, "Incorrect module");

				params = [profil];
				if (wadi[0].N1 > 0 && wadi[0].N1 <= 20) {
					var nummdl = wadi[0].N1 - 1;

					params = [profil];
					var waft = self.supervisor.sqlReader(_, "select A.FCYDEF_" + nummdl + " from AFCTFCT A Where A.PRFCOD_0=" + param(0), params).toArray(_);
					if (waft[0] !== undefined) {
						value = self._getParam(_, 3, waft[0].FCYDEF, parameter, action);
						if (value !== undefined) this._addParamUserCache(parameter, value);
					}
					value = self._getParam(_, 1, "", parameter, action);
				}
			}

		}
		return this._addParamUserCache(parameter, value);
	},
});