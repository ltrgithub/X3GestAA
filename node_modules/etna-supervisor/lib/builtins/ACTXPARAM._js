"use strict";
var date = require('etna-engine/lib/runtime/tdate');
var X3Error = require("etna-engine/lib/runtime/errors").X3Error;

var utilDriver = require("etna-supervisor/lib/drivers/util");
var util = require("etna-supervisor/lib/util");

var trim = utilDriver.trim;
var HttpError = util.HttpError;

exports.constructor = util.defineClass(function(superv) {
	this.supervisor = superv;
	this.$exported = true;
	this.cache = {};
}, null, {
	init: function(_, className) {
		this.class = this.supervisor.load(_, 'Class', className);
		return this;
	},
	_getParam: function(_, levcod, code, parameter) {
		var sqlDriver = this.supervisor.sqlDriver;
		var param = sqlDriver.param;
		var value;
		var result = sqlDriver.withConnection(_, function(_, cnx) {
			var params = [parameter];
			var wparam = sqlDriver.execute(_, cnx, "select A.VALEUR_0 from ADOVAL A Where A.CMP_0=' ' and A.FCY_0=' ' and A.PARAM_0=" + param(0), params).map(trim);
			if (wparam[0] === undefined) throw new HttpError(401, "Incorrect param");
			value = wparam[0].VALEUR;
		});
		return value;
	},
	AGETVALNUM: function(_, levcod, code, parameter) {
		return parseInt(this._getParam(_, levcod, code, parameter));
	},
	AGETUSERVALNUM: function(_, param) {
		return 0; //"TODO";
	},
	AGETVALCHAR: function(_, levcod, code, param) {
		return this._getParam(_, levcod, code, param);
	},
	AGETUSERVALDATE: function(_, PARAM) {
		return date.today(); //"TODO";
	}
});