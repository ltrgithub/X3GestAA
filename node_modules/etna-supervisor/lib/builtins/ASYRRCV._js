"use strict";
var util = require("etna-supervisor/lib/util");

function Collection(name) {
	this.name = name;
	this.collection = true;
	this.values = [];
	this.add = function(value) {
		this.values.push(value);
	};
	this.index = function(_, offset) {
		if (offset > this.values.length) throw new X3Error(8, "Index incorrect ARCV." + name + ":" + JSON.stringify(this.values));
		return this.values[offset - 1];
	};
	this.x3Maxtab = function() {
		return this.values.length;
	};
}

exports.constructor = util.defineClass(function(superv, qs) {
	this.supervisor = superv;
	this.$exported = true;
	this.qs = qs;
	this.PARAMVAL = new Collection("PARAMVAL");
	this.PARAMCOD = new Collection("PARAMCOD");
	var self = this;
	Object.keys(qs).forEach(function(key) {
		self.PARAMCOD.add(key);
		self.PARAMVAL.add(qs[key]);
	});

}, null, {
	get: function(_, name) {
		switch (name) {
			case "PARAMVAL":
				return this.PARAMVAL;
			case "PARAMCOD":
				return this.PARAMCOD;
		}
	},
	paramval: function(_, paramcod) {
		for (var i = 0, max = this.PARAMCOD.x3Maxtab(); i < max; i++) {
			if (this.PARAMCOD.index(_, i) === paramcod) return this.PARAMVAL.index(_, i);
		}
		return "";
	}
});