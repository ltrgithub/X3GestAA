"use strict";
var X3Error = require("etna-engine/lib/runtime/errors").X3Error;
var tracerJs = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");

/*
Wraps diagnosis in order to exhibit diagnoses as a collection of AERROR instances
*/
function Error(diagnose) {
	this.class = true;
	this.diagnose = diagnose;
}

Object.defineProperty(Error.prototype, "get", {
	value: function(_, name) {
		console.log("error.get:" + name);
		switch (name) {
			case 'DEL':
				return 0;
			case 'MES':
				return this.diagnose.message;
		}
	},
	enumerable: false
});

Object.defineProperty(Error.prototype, "x3Compare", {
	value: function(_, b) {
		console.log("Error.x3Compare");
		return this === b;
	},
	enumerable: false
});



function Errors(parent) {
	this.collection = true;
	this.lines = parent.diagnoses.reduce(function(r, diagnose) {
		r.push(new Error(diagnose));
		return r;
	}, []);
}

Object.defineProperty(Errors.prototype, "x3Maxtab", {
	value: function() {
		console.log("DBG errors.x3Maxtab:" + this.lines.length);
		return this.lines.length;
	},
	enumerable: false
});

Object.defineProperty(Errors.prototype, "index", {
	value: function(_, position) {
		console.log("DBG errors.index:" + position);
		// AERROR starts at 1:
		if ((position - 1) >= this.lines.length) throw new X3Error(8, "collection index out of range :" + position);
		return this.lines[position - 1];
	},
	enumerable: false
});

exports.Errors = Errors;