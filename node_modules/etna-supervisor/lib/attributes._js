"use strict";
var X3Error = require("etna-engine/lib/runtime/errors").X3Error;
/*
TODO :
- Localizable properties (get$text)
- diff de 2 values with attributes
- une description par langue si demand√©e (voir asyrloc)
*/

// External attributes
var extAttributes = {
	$isReadonly:false,
	$isHidden:false,
	$isExcluded:false,
	$isDisabled:false,
	$isMandatory:false,
	$isRequested:false,
	$isEditMode:false,
	$isDelta:false,
	$isDeleted:false,
	$symbol:"",
	$x3Format:"",
	$contentType:"",
	$filename:"",
	$style:"",
	$label:"",
	$index:0,
	$scale:0,
	$precision:0
};

var inheritedAttributes = ["$isReadonly","$isHidden","$isExcluded","$isDisabled"];

// Internal attributes
var intAttributes = {
	$_isReadonly:false,
	$isLoaded:false,
	$isLobFound:false,
	$_rightAccess:false,
	$acceptedTypes:"",
	$namProParent:"", // ?
};

var resAttributes = {
	$title:"",
 	$description:"",
};

var attNames = {};

var position=0;

[extAttributes,intAttributes].forEach(function(attributes) {
	Object.keys(attributes).forEach(function(key) {
		attNames[position] = key;
		var mask = 1 << position; 
		var def  = attributes[key];
		if(typeof attributes[key] === "boolean") {
			attributes[key] = {
				position:position,
				get:(function (name,mask,def) {
						return function(data) {
							if(!(data._fUsed & mask)) {
								if(!def)   data._fAttributes &= ~mask; // clear the bit
								else       data._fAttributes |= mask;  // set the bit
							 	data._fUsed |= mask;  // bit used
					
							} 
							return !!(data._fAttributes & mask);
						}
					})(key,mask,def),
				set:(function (name,mask) {
						return function(data,value) {
							if(!value) data._fAttributes &= ~mask; // clear the bit
							else       data._fAttributes |= mask;  // set the bit
							data._fUsed |= mask;  // bit used
							return value;
						}
				})(key,mask),
			}
		} else {
			attributes[key] = {
				position:position,
				get:(function (name,mask,def) {
						return function(data) {
							if(!(data._fUsed & mask)) {
								data._attributes[name] = def;
								data._fUsed |= mask;  // bit used
							}
							return data._attributes[name];
						}
					})(key,mask,def),
				set:(function (name,mask) {
						return function(data,value) {
							data._attributes[name] = value;
							data._fUsed |= mask;  // bit used
							return value;
						}
				})(key,mask),
			}
		}
		position++;
	})

});

Object.keys(resAttributes).forEach(function(key) {
	attNames[position] = key;
	var mask = 1 << position; 
	var def  = resAttributes[key];
	resAttributes[key] = {
		position:position,
		get:(function (name,mask,def) {
				return function(_,data,lan) {
					if(!(data._fUsed & mask) || lan) { // reload if lan is defined
						data._attributes[name] = (data._resources && data._resources[name] && data._resources[name](_,lan)) || def;
						data._fUsed |= mask;  // bit used
					}
					return data._attributes[name];
				}
			})(key,mask,def),
		set:(function (name,mask) {
				return function(_,data,value,lan) {
					data._attributes[name] = value;
					data._fUsed |= mask;  // bit used
					return value;
				}
		})(key,mask),
	}
	position++;
})


function Attributes() {
    this._fUsed		  = 0;
    this._fAttributes = 0;
    this._attributes  = {};
    this._resources   = {};
    return this;
}


Object.defineProperty( Attributes.prototype, "setResources", {
  value: function(resources){
  	 this._resources = resources;
  },
  enumerable: false   
});


Object.defineProperty( Attributes.prototype, "setAttribute", {
  value :function(attribute,value) {
  	if(extAttributes[attribute]) {
  		if(attribute === "$isReadonly" && intAttributes.$_isReadonly.get(this) === true) {
			return extAttributes[attribute].get(this);
  		}
  		return extAttributes[attribute].set(this,value);
  	}
  	throw new X3Error(0,"unknown attribute "+attribute);
  },
  enumerable: false   
});

Object.defineProperty( Attributes.prototype, "getAttribute", {
  value :function(attribute) {
	if(extAttributes[attribute]) return extAttributes[attribute].get(this);
	
  },
  enumerable: false   
}) ;

Object.defineProperty( Attributes.prototype, "setIntAttribute", {
  value :function(attribute,value) {
  	if(intAttributes[attribute]) return intAttributes[attribute].set(this,value);
  },
  enumerable: false   
}) ;

Object.defineProperty( Attributes.prototype, "getIntAttribute", {
  value :function(attribute) {
  	if(intAttributes[attribute]) return intAttributes[attribute].get(this);
  },
  enumerable: false   
}) ;

Object.defineProperty( Attributes.prototype, "setResource", {
  value :function(_,resource,value,lan) {
  	if(resAttributes[resource]) return resAttributes[resource].set(_,this,value,lan);
  },
  enumerable: false   
}) ;

Object.defineProperty( Attributes.prototype, "getResource", {
  value :function(_,resource,lan) {
  	if(resAttributes[resource]) return resAttributes[resource].get(_,this,lan);
  },
  enumerable: false   
}) ;

Object.defineProperty( Attributes.prototype, "getAttributes", {
  value :function(_) {
  	var result = {};
  	var fUsed = this._fUsed;
  	var position=0;
  	while(fUsed) {
  		if(fUsed & 1) {
  			var name = attNames[position]; 
  			if(extAttributes[name]) result[name] = extAttributes[name].get(this);
  			else if(intAttributes[name]) result[name] = intAttributes[name].get(this);
  			else if(resAttributes[name]) result[name] = resAttributes[name].get(_,this);

  		}
  		fUsed = fUsed >> 1;
  		position++;
  	}
  	return result;
  },
  enumerable: false  
}) ;

function addIntAttributes(_prototype) {
	Object.defineProperty( _prototype, "$attributes", {
	  get:function() {
	  	this.$$attributes = this.$$attributes || new Attributes();
	  	return this.$$attributes;
	  },
	  enumerable: false   
	}) ;

	Object.defineProperty( _prototype, "$parent", {
	  value :null,
	  writable: true,
	  enumerable: false   
	});

	Object.defineProperty( _prototype, "bindAttributes", {
	  value :function(parent,resources) {
	  	this.$parent = parent;
	  	this.$attributes.setResources(resources);
	  },
	  enumerable: false   
	});

	Object.defineProperty(_prototype, "setAttribute", {
	  value :function(attribute,value) {
	  	return this.$attributes.setAttribute(attribute,value);
	  },
	  enumerable: false   
	}) ;


	Object.defineProperty(_prototype, "getAttribute", {
	  value :function(attribute,$name) {
	  	// Let's try the first level
	  	var value = this.$attributes.getAttribute(attribute);
	  	
	  	if(!value && (inheritedAttributes.indexOf(attribute) >= 0) ) {
		  	var name = $name || this.name;
		  	//!console.log("\tname:"+name);
		  	if(name && this.$colAttributes && this.$colAttributes[name] ) {
	  			//!console.log("\tgetAttribute "+attribute+" 2");
		  		value = this.$colAttributes[name].getAttribute(attribute);
	  		}
			if(!value && this.$parent ) {
				// Value can be equal to false!
				//!console.log("\tgetAttribute "+attribute+" 3 name:"+name);
				value = this.$parent.getAttribute(attribute,name);
			}
		}
	  	return value;
	  },
	  enumerable: false   
	}) ;


	Object.defineProperty(_prototype, "setResources", {
	  value :function(resources) {
	  	return this.$attributes.setResources(resources);
	  },
	  enumerable: false   
	}) ;



	Object.defineProperty( _prototype, "getAttributes", {
	  value :function() {
	  	return this.$attributes.getAttributes();
	  },
	  enumerable: false   
	}) ;

	Object.keys(intAttributes).forEach(function(attribute) {
		Object.defineProperty( _prototype, attribute, {
		  set:function(value) {
		  	this.$attributes.setIntAttribute(attribute,value);
		  },
		  get:function() {
		  	return this.$attributes.getIntAttribute(attribute);
		  },
		  enumerable: false   
		}) ;
	});
}

function addExtAttributes(_prototype) {
	Object.keys(extAttributes).forEach(function(attribute) {
		Object.defineProperty( _prototype, attribute, {
		  set:function(value) {
		  	return this.setAttribute(attribute,value);
		  },
		  get:function() {
		  	return this.getAttribute(attribute);
		  },
		  enumerable: false   
		}) ;
	});
}

function addResources(_prototype) {
	Object.keys(resAttributes).forEach(function(resource) {
		Object.defineProperty( _prototype, "set"+resource, {
		  value:function(_,value,lan) {
		  	this.$attributes.setResource(_,resource,value,lan);
		  },
		  enumerable: false   
		});
		Object.defineProperty( _prototype, "get"+resource, {
		  value:function(_,lan) {
		  	return this.$attributes.getResource(_,resource,lan);
		  },
		  enumerable: false   
		});		

	});
}

function addColAttributes(_prototype) {
	Object.defineProperty( _prototype, "$colAttributes", {
	  value:[],
	  enumerable: false   
	});

	Object.defineProperty( _prototype, "setColAttribute", {
	  value :function(column,attribute,value) {
	  	if(this.$colAttributes[column] === undefined) {
	  		this.$colAttributes[column] = new Attributes();
		}
		return this.$colAttributes[column].setAttribute(attribute,value);
	  },
	  enumerable: false   
	}) ;

	Object.defineProperty( _prototype, "getColAttribute", {
	  value :function(column,attribute) {
	  	if(this.$colAttributes[column] === undefined) {
	  		this.$colAttributes[column] = new Attributes();
		  	this.$colAttributes[column].bindAttributes(this.$attributes.parent);
		}
		return this.$colAttributes[column].getAttribute(attribute);
	  },
	  enumerable: false   
	}) ;
}

function addAttributes(_prototype) {
	addIntAttributes(_prototype);
	addExtAttributes(_prototype);
	addResources(_prototype );
};

exports.Attributes    	 = Attributes;
exports.addExtAttributes = addExtAttributes;
exports.addIntAttributes = addIntAttributes;
exports.addResources 	 = addResources;
exports.addColAttributes = addColAttributes;
exports.addAttributes    = addAttributes;
exports.extAttributes    = exports.extAttributes;
