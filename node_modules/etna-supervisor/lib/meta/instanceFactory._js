"use strict";

var util = require("etna-supervisor/lib/util");

exports.constructor = util.defineClass(function(superv, clas, group) {
	this.supervisor = superv;
	this.class = clas;
	this.group = group; // groupName - for denormalized columns
}, null, {
	init: function(_) {
		if (this.properties) return this;
		this.properties = {};
		this.collections = {};
		this.class.data.PROPERTIES.forEach_(_, function(_, propData) {
			if ((this.group || "") !== ((!propData.LNKCLA && propData.FLDGRP) || "")) return;
			var name = propData.FLDCLA;
			if (this.properties[name]) throw new Error("duplicate property " + name);
			this.properties[name] = this.supervisor.new(_, 'Property', this, propData);
		}, this);
		if (!this.group) this.class.data.COLLECTIONS.forEach_(_, function(_, colnData) {
			var name = colnData.CODCOL;
			var coln = this.class.collection(name);
			this.collections[name] = coln;
			var p = this.properties[name];
			if (!p) {
				p = this.properties[name] = this.supervisor.new(_, 'Property', this, name);
				p.collection = coln;
				coln.instanceFactory = this.supervisor.new(_, 'InstanceFactory', this.class, name);
			} else {
				p.collection = coln;
				var mapping = util.find(this.class.data.LINKS, 'REFLNK', name);
				var targetName;
				if (mapping) {
					coln.mappingData = mapping;
					targetName = mapping.CLALNK;
				} else {
					targetName =  p.data.LNKCLA;
				}
				if (!targetName) throw new Error("cannot find target name for collection " + name);
				var cla = this.supervisor.load(_, 'Class', targetName);
				if (!cla) throw new Error("target class missing for collection " + name);
				coln.instanceFactory = this.supervisor.new(_, 'InstanceFactory', cla);
			}
			coln.instanceFactory.init(_);
		}, this);
		return this;
	},
	createInstance: function(_, qs) {
		var now = new Date();
		var data = {
			AUUID: util.uuid(''),
			UPDDATTIM: now,
			CREDATTIM: now,
			ACTX: this.supervisor.currentContext(_),
			AERROR: util.emptyArray(),
		}
		return this.supervisor.new(_, 'Instance', this, data).afterCreate(_);
	},
	loadInstance: function(_, key, qs) {
		var table = this.class.table;
		var index = table.indexes[0];
		var instances = this.loadInstances(_, index, key.split('~'), 1);
		if (instances.length === 0) throw new util.HttpError(404, "instance not found: " + this.class.name + "('" + key + "')");
		return instances[0];
	},
	loadInstances: function(_, index, vals, max) {
		var table = this.class.table;
		return table.loadRecords(_, index, vals, max).map_(_, function(_, data) {
			return this.supervisor.new(_, 'Instance', this, data);
		}, this);
	},
	keyExpression: function(_) {
		var table = this.class.table;
		return table ? table.indexes[0].keyExpression(_) : "{" + this.class.data.KEYINT + "}";
	},
});