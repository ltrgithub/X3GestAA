"use strict";

var util = require("etna-supervisor/lib/util");
var glob = require('streamline/lib/globals');
var tuuid = require('etna-engine/lib/runtime/tuuid');
var X3Error = require('etna-engine/lib/runtime/errors').X3Error;
var variables = require('etna-engine/lib/runtime/variables');
var attributes = require("etna-supervisor/lib/attributes");

var InstanceProperty = require("etna-supervisor/lib/instanceProperty").InstanceProperty;
var InstanceCollection = require("etna-supervisor/lib/instanceCollection").InstanceCollection;

var Instance = exports.constructor = util.defineClass(function(superv, clas, parent, slots) {
	this.supervisor = superv;
	this.class = clas;
	this.parent = parent;
	this.slots = slots || {};
	this.diagnoses = [];

	this.record;
	this.colnIndex;
}, null, {
	init: function(_) {
		return this;
	},
	afterCreate: function(_) { // for $create action, not $edit
		return this;
	},
	// Lazy loading of slots:
	slot: function(_, name) {
		if (this.slots[name]) return this.slots[name];

		if (this.class.properties[name]) {
			this.slots[name] = this.class.properties[name].createInstance(this);
			if (this.record !== undefined) {
				this.slots[name].fromRecord(_, this.record, this.colnIndex);
			}
			return this.slots[name];
		}
		throw new Error("property not found: " + name);
	},
	get: function(_, name) {
		//console.log("get:"+name);
		// TODO: improve handling of system properties
		if (['AERROR', 'ACTX'].indexOf(name) >= 0) return this.slots[name];

		try {
			return this.slot(_, name).get(_);
		} catch (e) {
			//External attributes ?
			var valattr = this.getAttribute("$" + name);
			if (valattr !== undefined) return variables.x3Val(valattr);
			throw new Error("property not found: " + name);
		}
	},
	set: function(_, name, value, raw) {
		//console.log("instance.set "+name);
		this.snapshots();

		// Lazy loading of slots:
		try {
			return this.slot(_, name).set(_, value, raw);
		} catch (e) {
			//External attributes ?
			if (this.setAttribute("$" + name, value) !== null) return;

			throw new Error("Cannot set property :" + name);
		}
	},
	clone: function() {
		var from = this;
		var to = new Instance();
		to.supervisor = from.supervisor;
		to.class = from.class;
		to.parent = from.parent;

		to.slots = Object.keys(from.slots).reduce(function(r, name) {
			var p = from.slots[name];
			if (p.snapshots) {
				r[name] = p;
			} else {
				r[name] = (p.clone && p.clone(this)) || p;
			}
			return r;
		}, {});

		to.diagnoses = [];
		to.snapshotof = from;
		attributes.clone(from, to);
		return to;
	},
	getChildren: function() {
		return this.slots;
	},
	updateProperty: function(from, to) {
		var _this = this;
		Object.keys(_this.slots).some(function(property) {
			if (_this.slots[property] == from) {
				_this.slots[property] = to;
				return true;
			}
			return false;
		});
	},
	revertTo: function() {
		if (!this.snapshotof) return this;
		var to = this.snapshotof;
		var from = this;

		Object.keys(from.slots)
			.filter(function(property) {
				return !!from.slots[property] && from.slots[property].revertTo;
			})
			.forEach(function(property) {
				var fromChild = from.slots[property];
				var toChild = fromChild.revertTo();
				if (toChild) {
					// Release the snapshot :
					toChild.releaseSnapshot(fromChild);
				} else {
					from.slots[property] = undefined;
				}
			});
		attributes.revertTo(this, to);
		return to;
	},
	fromRecord: function(_, record, colnIndex) {
		this.afterCreate(_);
		// copy record instead of swapping record pointers to keep system vars.

		// For slot lazy loading : 
		this.record = record;
		this.colnIndex = colnIndex;
		Object.keys(this.slots).forEach_(_, function(_, p) {
			if (this.slots[p] && this.slots[p].fromRecord) this.slots[p].fromRecord(_, record, colnIndex);
		}, this);
		return this;
	},
	read: function(_, key) {
		return this.class.read(_, this, key);
	},
	toRecord: function() {
		var _this = this;
		return Object.keys(this.slots).reduce(function(record, name) {
			_this.slots[name] && _this.slots[name].toRecord(record);
			return record;
		}, {});
	},
	insert: function(_) {
		var table = this.class.table;
		table.insert(_, this.toRecord());
	},
	update: function(_) {
		var table = this.class.table;
		table.update(_, this.toRecord());
	},
	delete: function(_) {
		var table = this.class.table;
		table.delete(_, this.toRecord());
	},
	setPropertyAttribute: function(_, property, attribut, value) {
		this.snapshots();
		return this.slot(_, property).setAttribute(attribut, value);
	},
	ASETATTRPROP: function(_, property, attribut, value) {
		try {
			return this.setPropertyAttribute(_, property, attribut, value);
		} catch (ex) {
			return this.supervisor.constants.CST_AERROR;
		}
	},
	getPropertyAttribute: function(_, property, attribut) {
		return this.slot(_, property).getAttribute(attribut);
	},
	setColumnAttribute: function(_, collection, column, attribut, value) {
		var slot = this.slot(_, collection);
		if (slot && slot.setColumnAttribute) return slot.setColumnAttribute(column, attribut, value);
	},
	getColumnAttribute: function(_, collection, column, attribut) {
		var slot = this.slot(_, collection);
		if (slot && slot.getColAttribute) return slot.getColAttribute(column, attribut);
	},
	AGETATTRIBUTE: function(_, property, attribut) {
		return variables.x3Val(this.getPropertyAttribute(_, property, attribut));
	},
	ASETATTRIBUTE: function(_, property, attribut, value) {
		return variables.x3Val(this.setPropertyAttribute(_, property, attribut, value));
	},
	x3Compare: function(b) {
		return this === b;
	}
}, {
	hasAttributes: true,
	hasSnapshots: true
});