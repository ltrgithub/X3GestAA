"use strict";

var util 		= require("etna-supervisor/lib/util");
var glob 		= require('streamline/lib/globals');
var tuuid 		= require('etna-engine/lib/runtime/tuuid');
var X3Error 	= require('etna-engine/lib/runtime/errors').X3Error;
var variables 	= require('etna-engine/lib/runtime/variables');
var attributes  = require("etna-supervisor/lib/attributes");

var InstanceProperty   = require("etna-supervisor/lib/instanceProperty").InstanceProperty;
var InstanceCollection = require("etna-supervisor/lib/instanceCollection").InstanceCollection;

var Instance = exports.constructor = util.defineClass(function(superv, clas, parent, properties, children) {
	this.supervisor = superv;
	this.class 		= clas;
	this.parent     = parent;
	this.properties = properties  || {};
	this.children   = children || {};
	this.diagnoses 	= [];
}, null, {
	init: function(_) {
		return this;
	},
	afterCreate: function(_) { // for $create action, not $edit
		var properties = this.class.properties;
		Object.keys(properties).forEach_(_, function(_, name){
			var prop = properties[name];
			if(prop.collection){
				this.children[name] = prop.createInstance(this);
			} else {
				this.properties[name] = prop.createInstance(this);
			}
		}, this);
		
		return this;
	},
	get: function(_, name) {
		// TODO: improve handling of system properties
		if (['AERROR','ACTX'].indexOf(name) >= 0)	return this.properties[name];
		
		// Simple property ?
		if(this.properties[name]) return this.properties[name].get(_);

		// Collection ?
		if (this.children[name]) return this.children[name].get(_);

		//External attributes ?
		var valattr = this.getAttribute("$"+name);
		if(valattr !== undefined) return variables.x3Val(valattr);
		throw new Error("property not found: " + name);
	},
	set: function(_, name, value, raw) {
		//console.log("instance.set "+name);
		this.snapshots();

		// Simple property ?
		if(this.properties[name]) return this.properties[name].set(_,value,raw);

		//External attributes ?
        if(this.setAttribute("$"+name,value) !== null) return;

        throw new Error("Cannot set property :" + name);
	},
	clone: function() {
		var from = this;
		var to = new Instance();
		to.supervisor = from.supervisor;
		to.class 	  = from.class;
		to.parent     = from.parent;
		to.properties = Object.keys(from.properties).reduce(function(r, name) {
							var v = from.properties[name] ;
							r[name] = (v.clone && v.clone(this)) || v;
							return r;
						},{});

		to.children   = Object.keys(from.children).reduce(function(r, name) {
							r[name] = from.children[name];
							return r;
						},{});

		to.diagnoses  = [];
		to.snapshotof = from;
		attributes.clone(from,to);
		return to;
	},
	getChildren : function() {
		return this.children;
	},
	updateChild : function(from,to) {
		var _this = this;
		Object.keys(_this.children).some(function(property) {
		    if(_this.children[property] = from) {
		    	_this.children[property] = to;
		    	return true;	
		    }
		    return false;
		});
	},
	revertTo : function() {
	    if(!this.snapshotof) return this;
	    var to   = this.snapshotof;
		var from = this;

		Object.keys(from.properties)
			.filter(function(property){
				return !!from.properties[property] && from.properties[property].revertTo; })
			.forEach(function(property){
				from.properties[property].revertTo();
				// Release the snapshot :
				from.properties[property] = undefined;
		});	


		Object.keys(from.children)
			.filter(function(property){
					return !!from.children[property]; })
			.forEach(function(property) {
			var fromChild = from.children[property];
			var toChild = fromChild.revertTo();
			// Release the snapshot :
			toChild.releaseSnapshot(fromChild);
		});	
		attributes.revertTo(this,to);
		return to;		
	},
	fromRecord : function(_,record) {
		// copy record instead of swapping record pointers to keep system vars.
		Object.keys(record).forEach_(_,function(_,k) {
			if(this.properties[k]) this.properties[k].fromRecord(_,record);
		}, this);

		Object.keys(record).forEach_(_,function(_,k) {
			if(this.children[k]) this.children[k].fromRecord(_,record);
		}, this);		
	},
	read: function(_, key) {
		var table = this.class.table;
		var index = table.indexes[0];
				
		//console.log("index.columns " + index.columns[0].data.CODZONE);
		var param = {};		
		Object.keys(index.columns).forEach(function(k) {
			param[index.columns[k].data.CODZONE] = key[k] ;
		});
		this.properties.AUUID.value = tuuid.generate() ;
		this.class.invokeScripts(_, this, "AREAD_BEFORE","","",param);

		var record = table.loadRecords(_, index, key, 1)[0];
		if (!record) return false;
		this.fromRecord(_,record);


		this.class.invokeScripts(_, this, "AREAD_AFTER","","");
		return glob.context.x3frame.values.ASTATUS;
	},
	toRecord : function() {
		var _this = this;
		var record =  Object.keys(this.properties).reduce(function(record, name) {
			_this.properties[name].toRecord(record);
			return record;
		},{});
		
		Object.keys(this.children).reduce(function(record, name) {
			_this.children[name].toRecord(record);
			return record;
		},record);
		return record;
	},
	insert: function(_) {
		var table = this.class.table;
		table.insert(_, this.toRecord());		
	},
	update: function(_) {
		var table = this.class.table;
		table.update(_, this.toRecord());		
	},
	delete: function(_) {
		var table = this.class.table;
		table.delete(_, this.toRecord());		
	},
	setPropertyAttribute:function(_,property,attribut,value) {
		this.snapshots();

		if(this.properties[property]) return this.properties[property].setAttribute(attribut,value);
		else if(this.children[property]) return this.children[property].setAttribute(attribut,value);
	},
	ASETATTRPROP :function(_,property,attribut,value) {
		try {
			return this.setPropertyAttribute(_,property,attribut,value);
		} catch(ex) {
			return this.supervisor.constants.CST_AERROR;
		}
	},
	getPropertyAttribute:function(_,property,attribut) {
		if(this.properties[property]) return this.properties[property].getAttribute(attribut);
		else if(this.children[property]) return this.children[property].getAttribute(attribut);
	},
	setColumnAttribute:function(_,collection,column,attribut,value) {
		if(this.children[collection]) return this.children[collection].setColumnAttribute(column,attribut,value);
	},
	getColumnAttribute:function(_,collection,column,attribut) {
		if(this.children[collection]) return this.children[collection].getColAttribute(column,attribut);
	},
	AGETATTRIBUTE:function(_,property,attribut) {
		return variables.x3Val(this.getPropertyAttribute(_,property,attribut))
	},
	ASETATTRIBUTE:function(_,property,attribut,value) {
		return variables.x3Val(this.setPropertyAttribute(_,property,attribut,value));
	},
	x3Compare:function(b) {
		return this === b;
	}
},{hasAttributes:true,hasSnapshots:true});