"use strict";

var util = require("etna-supervisor/lib/util");
var glob = require('streamline/lib/globals');
var tuuid = require('etna-engine/lib/runtime/tuuid');
var X3Error = require('etna-engine/lib/runtime/errors').X3Error;
var variables = require('etna-engine/lib/runtime/variables');
var attributes = require("etna-supervisor/lib/attributes");
var tracerJs = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");

var baseInstance = require("etna-supervisor/lib/meta/baseInstance");

var InstanceProperty = require("etna-supervisor/lib/instanceProperty").InstanceProperty;
var InstanceCollection = require("etna-supervisor/lib/instanceCollection").InstanceCollection;

var Instance = exports.constructor = baseInstance.defineClass(function(superv, clas, parent, slots) {
	this.supervisor = superv;
	this.meta = this.class = clas;
	this.index = this.class ? this.class.index : {};
	this.properties = clas ? clas.properties : {};
	this.parent = parent;
	this.slots = slots || {};
	this.record;
	this.colnIndex;
}, null, {
	afterCreate: function(_) { // for $create action, not $edit
		var _this = this;
		Object.keys(this.class.stdMethods).forEach(function(stdMethod) {
			_this[stdMethod] = _this["$" + stdMethod];
		});
		return this;
	},
	clone: function() {
		var from = this;
		var to = new Instance();
		to.supervisor = from.supervisor;
		to.class = from.class;
		to.properties = from.properties;
		to.parent = from.parent;

		to.slots = Object.keys(from.slots).reduce(function(r, name) {
			var p = from.slots[name];
			if (p.snapshots) {
				r[name] = p;
			} else {
				r[name] = (p.clone && p.clone(this)) || p;
			}
			return r;
		}, {});

		to.diagnoses = [];
		to.snapshotof = from;
		attributes.clone(from, to);
		return to;
	},
	getChildren: function() {
		return this.slots;
	},
	updateProperty: function(from, to) {
		var _this = this;
		Object.keys(_this.slots).some(function(property) {
			if (_this.slots[property] == from) {
				_this.slots[property] = to;
				return true;
			}
			return false;
		});
	},
	revertTo: function() {
		if (!this.snapshotof) return this;
		var to = this.snapshotof;
		var from = this;

		Object.keys(from.slots)
			.filter(function(property) {
				return !!from.slots[property] && from.slots[property].revertTo;
			})
			.forEach(function(property) {
				var fromChild = from.slots[property];
				var toChild = fromChild.revertTo();
				if (toChild) {
					// Release the snapshot :
					toChild.releaseSnapshot(fromChild);
				} else {
					from.slots[property] = undefined;
				}
			});
		attributes.revertTo(this, to);
		return to;
	},
	fromRecord: function(_, record, colnIndex) {
		this.afterCreate(_);
		// copy record instead of swapping record pointers to keep system vars.

		// For slot lazy loading : 
		this.record = record;
		this.colnIndex = colnIndex;
		Object.keys(this.slots).forEach_(_, function(_, p) {
			if (this.slots[p] && this.slots[p].fromRecord) this.slots[p].fromRecord(_, record, colnIndex);
		}, this);
		return this;
	},
	read: function(_, key) {
		return this.class.read(_, this, key);
	},
	toRecord: function() {
		var _this = this;
		return Object.keys(this.slots).reduce(function(record, name) {
			_this.slots[name] && _this.slots[name].toRecord(record);
			return record;
		}, {});
	},
	insert: function(_) {
		var table = this.class.table;
		table.insert(_, this.toRecord());
	},
	update: function(_) {
		var table = this.class.table;
		table.update(_, this.toRecord());
	},
	delete: function(_) {
		var table = this.class.table;
		table.delete(_, this.toRecord());
	},
	setPropertyAttribute: function(_, property, attribut, value) {
		this.snapshots();
		return this.slot(_, property).setAttribute(attribut, value);
	},
	ASETATTRPROP: function(_, property, attribut, value) {
		try {
			return this.setPropertyAttribute(_, property, attribut, value);
		} catch (ex) {
			return this.supervisor.constants.CST_AERROR;
		}
	},
	getPropertyAttribute: function(_, property, attribut) {
		return this.slot(_, property).getAttribute(attribut);
	},
	setColumnAttribute: function(_, collection, column, attribut, value) {
		var slot = this.slot(_, collection);
		if (slot && slot.setColumnAttribute) return slot.setColumnAttribute(column, attribut, value);
	},
	getColumnAttribute: function(_, collection, column, attribut) {
		var slot = this.slot(_, collection);
		if (slot && slot.getColAttribute) return slot.getColAttribute(column, attribut);
	},
	AGETATTRIBUTE: function(_, property, attribut) {
		return variables.x3Val(this.getPropertyAttribute(_, property, attribut));
	},
	ASETATTRIBUTE: function(_, property, attribut, value) {
		return variables.x3Val(this.setPropertyAttribute(_, property, attribut, value));
	},
	x3Compare: function(b) {
		return this === b;
	},
	method: function(name) {
		return this.methods[name];
	},
	// _AINSERT: function(_) {
	// 	util.checkInstance(this);
	// 	this.insert(_);
	// 	return 0;
	// },
	$AREAD: function(_) {
		util.checkInstance(this);
		var key = Array.prototype.slice.call(arguments, 1);
		tracerJs.debug && tracerJs.debug("instance.AREAD(" + key + ")");
		return this.read(_, key);
	},
	// _AUPDATE: function(_) {
	// 	util.checkInstance(this);
	// 	this.update(_);
	// 	return 0;
	// },
	$ADELETE: function(_) {
		util.checkInstance(this);
		this.delete(_);
		return 0;
	},

	$x3Methods: function(_, action) {
		console.log("TODO instance.$x3Methods:" + action);
		return 0;
	},
	$x3Properties: function(_, action, property) {
		var args = this.getScriptArgs(_, action, property);
		var astatus = this.runScripts(_, "$PROPERTIES", args);
		if (astatus === this.supervisor.constants.CST_AOK && this.parent && this.parent.runScripts) {
			astatus = this.parent.runScripts(_, "$PROPERTIES", args);
		}
		return astatus;
	}
});