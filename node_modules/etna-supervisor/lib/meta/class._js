"use strict";

var util = require("etna-supervisor/lib/util");
var glob = require('streamline/lib/globals');

var stdMethods = {
	ASETERROR: function(_, path, msg, severity) {
		util.checkInstance(this);
		this.diagnoses.push(this.supervisor.new(_, 'Diagnosis', severity, path, msg));
		return 0;
	},
	AINIT: function(_) {
		util.checkInstance(this);
		return 0;
	},
	AREAD: function(_) {
		util.checkInstance(this);
		var key = Array.prototype.slice.call(arguments, 2);
		return this.read(_, key) ? 0 : 1; // see later about return code if not found
	},
	AINSERT: function(_) {
		util.checkInstance(this);
		this.insert(_);
		return 0;
	},
	AUPDATE: function(_) {
		util.checkInstance(this);
		this.update(_);
		return 0;
	},
	ADELETE: function(_) {
		util.checkInstance(this);
		this.delete(_);
		return 0;
	},
}

module.exports = {
	collectionName: 'ACLASSE',
	keyName: 'CODCLA',
	constructor: util.defineClass(function(superv, data) {
		this.supervisor = superv;
		this.data = data;
		this.collections = {};
		this.scripts = [];
		this.methods = {};
		this.keyItems = data.KEYINT ? data.KEYINT.split('+') : [];
	}, null, {
		init: function(_) {
			if (this.instanceFactory) return this;
			var tableCode = this.data.TABREF || this.data.CODCLA;
			if (this.data.TYPCLA !== 5) {
				this.table = this.table || this.supervisor.load(_, 'Table', tableCode);
				if (!this.table) throw new Error("table not found: " + tableCode);
			}
			this.collections = {};
			this.data.COLLECTIONS.forEach_(_, function(_, data) {
				this.collections[data.CODCOL] = this.supervisor.new(_, 'Collection', this, data);
			}, this);
			this.instanceFactory = this.supervisor.new(_, 'InstanceFactory', this);
			// Reenable when scripts are again up-to-date
			/*this.scripts = this.data.CODTRT.map_(_, function(_, codtrt) {
				return this.supervisor.loadScript(_, codtrt);
			}, this);*/
			return this;
		},
		name: {
			get: function() {
				return this.data.CODCLA;
			}
		},
		method: function(name) {
			return this.methods[name] || stdMethods[name];
		},
		collection: function(name) {
			var coln = this.collections[name];
			if (!coln) throw new Error("collection not found: " + name);
			return coln;
		},
		property: function(name) {
			var prop = this.instanceFactory.properties[name];
			if (!prop) throw new Error("prop not found: " + this.name + "." + name);
			return prop;
		},
		invokePropertyScripts: function(_, instance, action, name) {
			var astatus = 0;
			this.scripts.forEach_(_, function(_, script) {
				if (!script.PROPERTIES || astatus) return;
				var frame = glob.context.x3frame;
				frame.values.CURPRO = name;
				frame.values.ACTION = action;
				frame.values.THIS = instance;
				frame.values.ASTATUS = 0;
				script.PROPERTIES(_);
				astatus = frame.values.ASTATUS;
			}, this);
			return astatus;
		},
		keyExpression: function(_) {
			return this.instanceFactory.keyExpression(_);
		},
	}),
};