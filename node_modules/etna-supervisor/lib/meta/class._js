"use strict";

var util = require("etna-supervisor/lib/util");
var glob = require('streamline/lib/globals');
var utilRuntime     = require('etna-engine/lib/runtime/util') ;
var tuuid = require('etna-engine/lib/runtime/uuid');


var stdMethods = {
	ASETERROR: function(_, path, msg, severity) {
		util.checkInstance(this);
		this.diagnoses.push(this.supervisor.new(_, 'Diagnosis', severity, path, msg));
		return 0;
	},
	AINIT: function(_) {
		util.checkInstance(this);
		return 0;
	},
	AREAD: function(_) {
		util.checkInstance(this);
		var key = Array.prototype.slice.call(arguments, 1);
		return this.read(_, key) ; 
	},
	AINSERT: function(_) {
		util.checkInstance(this);
		this.insert(_);
		return 0;
	},
	AUPDATE: function(_) {
		util.checkInstance(this);
		this.update(_);
		return 0;
	},
	ADELETE: function(_) {
		util.checkInstance(this);
		this.delete(_);
		return 0;
	},
};

module.exports = {
	collectionName: 'ACLASSE',
	keyName: 'CODCLA',
	constructor: util.defineClass(function(superv, data, group) {
		this.supervisor = superv;
		this.data = data;
		this.collections = {};
		this.scripts = [];
		this.methods = {};
		this.keyItems = data.KEYINT ? data.KEYINT.split('+') : [];
		this.group = group;
	}, null, {
		init: function(_) {
			if (this.properties) return this;
			var tableCode = this.data.TABREF || this.data.CODCLA;
			if (this.data.TYPCLA !== 5 && this.data.TYPCLA !== 99 ) {
				this.table = this.table || this.supervisor.load(_, 'Table', tableCode);
				if (!this.table) throw new Error("table not found: " + tableCode);
			}
			this.properties = {};
			this.data.PROPERTIES.forEach_(_, function(_, propData) {
				if ((this.group || "") !== ((!propData.LNKCLA && propData.FLDGRP) || "")) return;
				var name = propData.FLDCLA;
				if (this.properties[name]) throw new Error("duplicate property " + name);
				this.properties[name] = this.supervisor.new(_, 'Property', this, propData);
			}, this);
		    this.addPropTech(_);
			this.collections = {};
			this.data.COLLECTIONS.forEach_(_, function(_, data) {
				var coln = this.collections[data.CODCOL] = this.supervisor.new(_, 'Collection', this, data);
				var name = data.CODCOL;
				var p = this.properties[name];
				if (!p) {
					p = this.properties[name] = this.supervisor.new(_, 'Property', this, name);
					p.collection = coln;
					// generate synthetic class for group of indexed properties
					coln.class = this.supervisor.new(_, "Class", {
						CODCLA: this.data.CODCLA + "." + name,
						TYPCLA: 5,
						PROPERTIES: this.data.PROPERTIES.filter(function(propData) {
							return propData.FLDGRP === name;
						}),
						COLLECTIONS: [],
					}, name);
				} else {
					p.collection = coln;
					var mapping = util.find(this.data.LINKS, 'REFLNK', name);
					var targetName;
					if (mapping) {
						coln.mappingData = mapping;
						targetName = mapping.CLALNK;
					} else {
						targetName =  p.data.LNKCLA;
					}
					if (!targetName) throw new Error("cannot find target name for collection " + name);
					coln.class = this.supervisor.load(_, 'Class', targetName);
					if (!coln.class) throw new Error("target class missing for collection " + name);
				}
			}, this);
			if (this.data.CODTRT) {
				this.scripts = this.data.CODTRT.map_(_, function(_, codtrt) {
					return this.supervisor.loadScript(_, codtrt);
				}, this);
			}
			return this;
		},
		name: {
			get: function() {
				return this.data.CODCLA;
			}
		},
		method: function(name) {
			return this.methods[name] || stdMethods[name];
		},
		collection: function(name) {
			var coln = this.collections[name];
			if (!coln) throw new Error("collection not found: " + name);
			return coln;
		},
		property: function(name) {
			var prop = this.properties[name];
			if (!prop) throw new Error("prop not found: " + this.name + "." + name);
			return prop;
		},
		addPropTech: function(_){
			var wprops = [{
		            "FLDCLA": "ASTALIN",
		            "CODTYP" : "C",
		            "LONG" : 4
				},{
					"FLDCLA": "_AFCRIGHT",
			        "CODTYP" : "A",
			        "LONG" : 30
				}
			];
			wprops.forEach_(_, function(_,wprop) {
				var name = wprop.FLDCLA;
				if (this.properties[name]) throw new Error("duplicate property " + name);
				this.properties[name] =  this.supervisor.new(_, 'Property', this, wprop);
			}, this);
		},
		invokeScripts: function(_, instance, action, curpro, curpth, values) {
			// , instance, action, name
			var astatus = 0;
			this.scripts.forEach_(_, function(_, script) {
				var handler = (curpro==="") ? script.METHODS : script.PROPERTIES ;

				if (!handler|| astatus) return;
				var frame = glob.context.x3frame;

				var prev = frame;
				var cx = prev.context;
				glob.context.x3frame = frame = {
					values: {},
					types: {},
					context: cx,
					prev: prev,
					loopLevel: 0,
					loc: {
						file: module.id,
						line: 0
					}
				};
				// current sub is the prog itself
				frame.sub = frame;
				frame.dicts = [frame, cx.globals, cx.sys];
				try {
					util.declVar(frame,'CURPRO','LS',curpro);
					util.declVar(frame,'CURPTH','LS', curpth);
					util.declVar(frame,'ACTION','LS', action);
					util.declVar(frame,'THIS','LY', instance);
					util.declVar(frame,'ASTATUS','LI', 0);
					if (values!== undefined) {
	                	Object.keys(values).forEach(function (key){
	                		var t;
	                		switch (typeof values[key]) {
	                		case 'string':
	                			t = 'LS'; break ;
	                		case 'number':
	                			t = 'LI'; break ;
	                		case 'object':
	                			if (utilRuntime.x3IsDate(values[key])){
									t = "LD"; break;
								}
								if (utilRuntime.x3IsDatetime(values[key])){
									t = "LE";  break ;
								}
								t = 'LY'; break ;
							default:
								t ="LS"; break ;
							}
							util.declVar(frame,key,t,values[key]);
						}) ;
					}
					handler(_) ;
					astatus = frame.values.ASTATUS;
				} finally {
					glob.context.x3frame = prev;
				}
			}, this);
			return astatus;
		},
		keyExpression: function(_) {
			var table = this.table;
			return table ? table.indexes[0].keyExpression(_) : "{" + this.data.KEYINT + "}";
		},
		createInstance: function(_, qs) {
			var now = new Date();
			var data = {
				AUUID: new tuuid.UUID(),
				UPDDATTIM: now,
				CREDATTIM: now,
				ACTX: this.supervisor.currentContext(_),
				AERROR: util.emptyArray(),
			};
			return this.supervisor.new(_, 'Instance', this, data).afterCreate(_);
		},
		loadInstance: function(_, key, qs) {
			var table = this.table;
			var index = table.indexes[0];
			var instances = this.loadInstances(_, index, key.split('~'), 1);
			if (instances.length === 0) throw new util.HttpError(404, "instance not found: " + this.name + "('" + key + "')");
			return instances[0];
		},
		loadInstances: function(_, index, vals, max) {
			var table = this.table;
			return table.loadRecords(_, index, vals, max).map_(_, function(_, data) {
				return this.supervisor.new(_, 'Instance', this, data);
			}, this);
		},
	}),
};