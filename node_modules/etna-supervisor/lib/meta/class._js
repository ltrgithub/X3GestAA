"use strict";

var ez = require("ez-streams");
var util = require("etna-supervisor/lib/util");
var glob = require('streamline/lib/globals');
var utilRuntime = require('etna-engine/lib/runtime/util');
var tuuid = require('etna-engine/lib/runtime/uuid');
var tdate = require('etna-engine/lib/runtime/tdate');
var tdatetime = require('etna-engine/lib/runtime/tdatetime');
var activ = require("etna-supervisor/lib/meta/activ");
var filterHelpers = require("syracuse-orm/lib/filters");
var utilDriver = require("etna-supervisor/lib/drivers/util");
var base = require("etna-supervisor/lib/meta/base");

var trim = utilDriver.trim;

var tracerJs = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");
var cacheMethods = require('etna-supervisor/lib/builtins/ACTXCACHE').cacheMethods;

function bulkWriter(httpContext) {
	var sep;
	return ez.devices.generic.writer(function(_, resource) {
		if (!sep) {
			httpContext.response.writeHead(200, {
				"content-type": "application/json"
			});
			httpContext.response.write(_, '[');
		}
		if (resource === undefined) {
			httpContext.response.end("]");
		} else {
			httpContext.response.write(_, (sep || '') + JSON.stringify(resource.dataNode(_)), "utf8");
		}
		sep = ',';
	});
};


module.exports = {
	collectionName: 'ACLASSE',
	keyName: 'CODCLA',
	constructor: base.defineClass(function(superv, data, group) {
		this.methods.AINIT = function(_) {
			util.checkInstance(this);
			return this.ainit(_);
		};
		this.collections = {};
		this.parent = null;
		this.keyItems = data.KEYINT ? data.KEYINT.split('+') : [];
		this.group = group;
		this.reader = this.sqlReader;
		this.cache = {};
		this.curpath = "";
		this.codclaPath = this.data.CODCLA;
	}, null, {
		init: function(_) {
			var _this = this;

			if (this.properties) return this;
			if (this.data.dataChildren) {
				if (this.data.dataChildren.ownMapping) {
					this.data["table"] = this.supervisor.load(_, 'Table', this.data.dataChildren.ownMapping.TABLNK);
					this.data["LINKS"] = this.data.dataChildren.destMapping;
				}
				this.data.codclaPath = this.data.dataChildren.codclaPath;
				this.parent = this.data.dataChildren.parent;
				this.curpath = this.data.dataChildren.curpath;
			}
			tracerJs.debug && tracerJs.debug("Init de  C_" + this.data.CODCLA + " " + this.curpath);
			if (this.parent) tracerJs.debug && tracerJs.debug(" parent = '" + this.parent.data.CODCLA + "'");
			var tableCode = this.data.TABREF || this.data.CODCLA;
			tracerJs.debug && tracerJs.debug("class this.data.TYPCLA:" + this.data.TYPCLA + "--" + this.data.CODCLA);
			var jsInterface;
			try {
				jsInterface = require("etna-supervisor/lib/builtins/" + this.data.CODCLA);
			} catch (e) {} finally {}

			if (jsInterface && jsInterface.AQUERY) {
				this.reader = this.jsReader;
				this.jsInterface = jsInterface;
			}
			if (this.data.TYPCLA === 2) { // 2 for persistent class
				this.table = this.table || this.supervisor.load(_, 'Table', tableCode);
				if (!this.table) throw new Error("table not found: " + tableCode);
			} else if (this.data.table) {
				this.table = this.data.table;
			}
			this.properties = {};

			this.data.PROPERTIES.forEach_(_, function(_, propData) {
				if ((this.group || "") !== ((!propData.LNKCLA && propData.FLDGRP) || "")) return;
				var name = propData.FLDCLA;
				if (this.properties[name]) throw new Error("duplicate property " + name);
				this.properties[name] = this.supervisor.new(_, 'Property', this, propData);


				if (this.properties[name].isReference(_)) {
					// Add a property :
					tracerJs.debug && tracerJs.debug(name + " is a reference");
					this.properties[name + '_REF'] = this.supervisor.new(_, 'Property', this, propData);
					this.properties[name + '_REF'].isReference(_, true);
					this.properties[name + '_REF'].getSql = undefined;
				}

			}, this);
			this.addPropTech(_);
			this.collections = {};
			this.data.COLLECTIONS.forEach_(_, function(_, data) {
				tracerJs.debug && tracerJs.debug("Class collection:" + data.CODCOL);
				var coln = this.collections[data.CODCOL] = this.supervisor.new(_, 'Collection', this, data);
				var name = data.CODCOL;
				var p = this.properties[name];
				if (!p) {
					p = this.properties[name] = this.supervisor.new(_, 'Property', this, {
						FLDCLA: name
					});

					p.collection = coln;
					// generate synthetic class for group of indexed properties
					coln.ofIndexedProperties = true;
					coln.class = this.supervisor.new(_, 'Class', {
						CODCLA: this.data.CODCLA + "." + name,
						TYPCLA: 1, //5,
						PROPERTIES: this.data.PROPERTIES.filter(function(propData) {
							return propData.FLDGRP === name;
						}),
						PARAM_FLDS: this.data.PARAM_FLDS,
						COLLECTIONS: [],
						table: this.table
					}, name);
					//Calculate count
					if (data.ACTGRP & data.ACTGRP !== "") {
						var activ = this.supervisor.load(_, 'Activ', data.ACTGRP);
						coln.count = activ.dimension;
					} else if (data.MAXCOL > 0) {
						coln.count = data.MAXCOL;
					}
					if (!coln.count) {
						coln.count = 1;
						coln.class.data.PROPERTIES.forEach_(_, function(_, propData) {
							var col = util.find(coln.class.table.data.COLUMNS, 'CODZONE', propData.FLDCLA);
							if (col) {
								var dime = 0;
								if (col.CODACT & col.CODACT !== "") {
									var activcol = this.supervisor.load(_, 'Activ', col.CODACT);
									dime = activcol.dimension;
								}
								dime = Math.max(dime, col.DIME);
								coln.count = Math.max(dime, coln.count);
							}
						});
					}
					//
					coln.class.parent = this;
					if (coln.class.data.PROPERTIES) {
						coln.class.data.PROPERTIES.forEach_(_, function(_, prop) {
							if (coln.class.data.PARAM_FLDS) {
								coln.class.data.PARAM_FLDS.forEach_(_, function(_, fld) {
									if (fld.FLDCLA === prop.FLDCLA && fld.VALEUR) {
										if (name + "." === fld.VALEUR.substring(0, name.length + 1)) {
											fld.VALEUR = fld.VALEUR.substring(name.length + 1);
										}
									}
								}, name, prop);
							}
						}, name);
					}
				} else {
					p.collection = coln;
					tracerJs.debug && tracerJs.debug("Collection name : " + name);
					var mapping = util.find(this.data.LINKS, 'REFLNK', name);
					tracerJs.debug && tracerJs.debug("mapping " + JSON.stringify(mapping));
					tracerJs.debug && tracerJs.debug("collection is a collection:" + JSON.stringify(this.data.LINKS));
					var mappingDest = [];
					if (this.data.LINKS) {
						Object.keys(this.data.LINKS).forEach_(_, function(_, p) {
							var t = "";
							t = this.data.LINKS[p].REFLNK;
							if (t.substring(0, name.length + 1) === name + ".") {
								this.data.LINKS[p].REFLNK = t.substring(name.length + 1);
								mappingDest.push(this.data.LINKS[p]);
							}
						}, this);
					}
					var targetName;
					var targetTable;
					if (mapping) {
						coln.mappingData = mapping;

						targetName = mapping.CLALNK;
					} else {
						targetName = p.data.LNKCLA;
					}

					if (!targetName) throw new Error("cannot find target name for collection " + name);
					tracerJs.debug && tracerJs.debug("coln.mappingData  " + JSON.stringify(coln.mappingData));
					tracerJs.debug && tracerJs.debug("mappingDest " + JSON.stringify(mappingDest));
					coln.class = this.supervisor.load(_, 'Class', this.data.codclaPath + "." + targetName, {
						ownMapping: coln.mappingData,
						destMapping: mappingDest,
						codclaPath: this.data.codclaPath + "." + targetName,
						curpath: name, //(this.curpath) ? this.curpath + "." + name : name
						parent: _this,
					});
					if (!coln.class) throw new Error("target class missing for collection " + name);
				}
			}, this);

			this.stdMethods = this.data.STD_METHODS ? this.data.STD_METHODS.reduce_(_, function(_, r, method) {
				if (method.ENAMETSTD === 2 && activ.getActiv(_, _this.supervisor, method.ACTMETSTD) > 0) {
					switch (method.CODMETSTD) {
						case 'C':
							r.AINSERT = _this._AINSERT;
							break;
						case 'R':
							r.AREAD = _this._AREAD;
							break;
						case 'U':
							r.AUPDATE = _this._AUPDATE;
							break;
						case 'D':
							r.ADELETE = _this._ADELETE;
							break;
					}
				}
				return r;
			}, {}) : {};

			return this;
		},
		isSearchable: {
			get: function() {
				return this.data && this.data.FLGSEARCH && (this.data.FLGSEARCH === 2);
			}
		},
		name: {
			get: function() {
				return this.data.CODCLA;
			}
		},
		method: function(name) {
			return this.methods[name] || this.stdMethods[name] || cacheMethods[name];
		},
		collection: function(name) {
			var coln = this.collections[name];
			if (!coln) throw new Error("collection not found: " + name);
			return coln;
		},
		property: function(name) {
			var prop = this.properties[name];
			if (!prop) throw new Error("prop not found: " + this.name + "." + name);
			return prop;
		},
		addPropTech: function(_) {
			var wprops = [{
				"FLDCLA": "ASTALIN",
				"CODTYP": "C",
				"LONG": 4
			}, {
				"FLDCLA": "AORDER",
				"CODTYP": "C",
				"LONG": 4
			}, {
				"FLDCLA": "_AFCRIGHT",
				"CODTYP": "A",
				"LONG": 30
			}];
			wprops.forEach_(_, function(_, wprop) {
				var name = wprop.FLDCLA;
				if (this.properties[name]) throw new Error("duplicate property " + name);
				this.properties[name] = this.supervisor.new(_, 'Property', this, wprop);
			}, this);
		},
		invokeScripts: function(_, action, instance, $curpro, $curpth, $values, record) {
			var values = $values || [];
			if (record !== undefined) {
				values = values.slice();
				// Add the record  
				var columns = this.table.columns;
				var value = Object.keys(columns).reduce(function(r, colName) {
					r.types[colName] = "F" + columns[colName].type.etnaType;
					if (columns[colName].data.DIME <= 1) {
						r.values[colName] = record[colName] || columns[colName].type.defaultValue;
					} else {
						r.values[colName] = [];
						for (var i = 0; i < columns[colName].data.DIME; i++) {
							r.values[colName][i] = (record[colName] && record[colName][i]) ? record[colName][i] : columns[colName].type.defaultValue;
						}
					}
					return r;
				}, {
					values: {},
					types: {}
				});

				values.push({
					name: "F:" + this.table.abbrev,
					letter: "F",
					abrev: this.table.abbrev,
					value: value
				});
			}
			var astatus = util.invokeScripts(_, this, action, instance, $curpro, $curpth, values);
			if (this.parent) {
				var pth = ($curpth) ? this.curpath + "." + $curpth : this.curpath;
				astatus += this.parent.invokeScripts(_, action, instance, $curpro, pth, values);
			}
			return astatus;
		},
		check: function(_, facet) {
			if (!this.isActivated(_))
				throw new util.HttpError(406, this.supervisor.loadMess(_, 140, 31) + ' ' + this.data.CODCLA + " (" + this.data.CODACT + ")");
			if (facet && /^\$(search|bulk|query|lookup|details|summary|edit)$/.test(facet)) {
				if (!this.stdMethods.AREAD) throw new util.HttpError(406, this.supervisor.loadMessParams(_, 149, 31, this.supervisor.loadMess(_, 7983, 7), this.data.CODCLA));
				if (facet === "$edit" && !this.stdMethods.AINSERT && !this.stdMethods.AUPDATE) {
					throw new util.HttpError(406, this.supervisor.loadMessParams(_, 149, 32, this.supervisor.loadMess(_, 7983, 1), this.supervisor.loadMess(_, 7983, 10), this.data.CODCLA));
				}
			}
		},
		keyExpression: function(_) {
			var table = this.table;
			return table ? table.indexes[0].keyExpression(_) : "{" + this.data.KEYINT + "}";
		},
		createInstance: function(_, qs) {
			var now = new Date();
			var properties = {
				//TODO : AUUID: new tuuid.UUID(),
				UPDDATTIM: now,
				CREDATTIM: now,
				ACTX: glob.context.x3session.actx,
				AERROR: util.emptyArray(),
			};
			properties = this.addSysProperties(properties);
			return this.supervisor.new(_, 'Instance', this, null, properties).afterCreate(_);
		},
		loadInstance: function(_, parent, key, qs) {
			var table = this.table;
			var index = table.indexes[0];
			var instances = this.loadInstances(_, parent, index, key.split('~'), 1, null);
			if (instances.length === 0) throw new util.HttpError(404, "instance not found: " + this.name + "('" + key + "')");
			return instances[0];
		},
		queryExpToSelect: function(_, exp, params, tableNames) {
			var _this = this;
			var map = {
				'$eq': '=',
				'$ne': '!=',
				'$gt': '>',
				'$gte': '>=',
				'$lt': '<',
				'$lte': '<=',
				'$regex': 'like'
			};
			var param = this.supervisor.sqlDriver.param;

			return Object.keys(exp).reduce_(_, function(_, r, prop) {
				var id = prop;
				var expColumn = function(column) {
					return column;
				};

				var match = id.match(/upper\((\w*)\)/);
				if (match) {
					id = match[1];
					expColumn = function(column) {
						return 'UPPER(' + column + ')';
					};
				}
				if (!_this.properties[id]) throw new Error("Property " + id + " missing for class " + _this.name);
				var column = _this.properties[id].column.sqlName();

				var propExp = exp[prop];

				var hasExp = (typeof propExp === 'object' && propExp !== null) && Object.keys(propExp).some(function(key) {
					return (key.charAt(0) === '$');
				}) || false;

				var operators = hasExp ? propExp : {
					$eq: propExp
				};

				r.push(Object.keys(operators).reduce(function(r, operator) {
					if (map[operator]) {
						var sqlOperator = map[operator];
						var value = operators[operator];
						var valueType = typeof value;

						if (value === null || (Array.isArray(value) && !value.length)) return r;

						if (valueType === 'boolean') {
							value = value ? 2 : 1;
						} else if (_this.properties[id].etnaType === 'D' && (valueType === 'string')) {
							var date = tdate.parse(value, "yyyy-MM-dd");
							value = new Date(date.year, date.month - 1, date.day);
						} else if (_this.properties[id].etnaType === 'E') {
							var dt = tdatetime.x3Parse(value).toJsDate();
							value = new Date(dt.getUTCFullYear(),
								dt.getUTCMonth(),
								dt.getUTCDate(),
								dt.getUTCHours(),
								dt.getUTCMinutes(),
								dt.getUTCSeconds());
						} else if (sqlOperator === 'like') {
							if (value.charAt(0) === '^') value = value.substring(1);
							else value = '%' + value;
							value = value.replace(/\.\*/g, '%');
						}
						params.push(value);
						r.push(expColumn(column) + ' ' + sqlOperator + ' ' + param(params.length - 1));
					}
					return r;
				}, []).join(" and "));
				return r;
			}, []).join(" and ");
		},
		queryToSelect: function(_, query, params) {
			var operator = (query.$or) ? "or" : (query.$and ? "and" : undefined);
			if (operator) {

				var _this = this;
				return query['$' + operator].reduce_(_, function(_, r, exp) {
					var select = _this.queryToSelect(_, exp, params);
					if (select.length) r.push('(' + select + ')');
					return r;
				}, []).join(' ' + operator + ' ');
			}
			return this.queryExpToSelect(_, query, params);
		},
		queryInstances: function(_, parent, select, max) {
			return this.reader(_, parent, select, max, null);
		},
		addSysProperties: function(prop) {
			var properties = {
				ACTX: glob.context.x3session.actx,
				AERROR: util.emptyArray()
			};
			if (prop) {
				Object.keys(prop).forEach(function(name) {
					var p = properties[name];
					if (!p) {
						properties[name] = prop[name];
					}
				});
			}
			return properties;
		},
		sqlReader: function(_, parent, select, max, $recordMapper) {
			tracerJs.debug && tracerJs.debug("class.sqlReader(" + max + "):" + JSON.stringify(select));
			tracerJs.debug && tracerJs.debug(this.table.name + "   " + "class.sqlReader(" + max + "):" + JSON.stringify(select));
			var _this = this;
			var recordMapper = $recordMapper || function() {
					return function(_, record) {
						var astatus;
						var instance = _this.supervisor.new(_, 'Instance', _this, parent, _this.addSysProperties());
						if (parent !== null)
							var astatus = _this.invokeScripts(_, "$AREAD_BEFORE", instance, "");
						instance.fromRecord(_, record);
						if (parent !== null)
							var astatus = _this.invokeScripts(_, "$AREAD_AFTER", instance, "", "", null, record);
						return instance;
					};
				}();

			var orderBy;
			var descs = [];
			var columnNames = [];
			var wheres = [];
			var params = [];
			var properties = this.properties;
			var param = this.supervisor.sqlDriver.param;
			tracerJs.debug && tracerJs.debug("this.table = " + JSON.stringify(this.table.name));
			var tableNames = [this.table.name + ' T'];

			// add link with ACCES if ACCSTR is filled.
			if (this.data.ACCSTR) {
				tracerJs.debug && tracerJs.debug("add ACCSTR " + this.data.ACCSTR);
				tableNames.push("ACCES ACC");

				params.push(glob.context.x3session.actx.$USER(_));
				wheres.push("ACC.USR_0 = " + param(params.length - 1));
				wheres.push("ACC.CODACC_0 = T." + this.data.ACCSTR + "_0");
				wheres.push("ACC.CONSUL_0 = 2");
			}

			// clear the cache
			var cache = {};

			Object.keys(properties).forEach_(_, function(_, name) {
				tracerJs.debug && tracerJs.debug("getSql:'" + name + "'");
				properties[name].getSql && properties[name].getSql(_, columnNames, tableNames, wheres, params, descs, cache);
			});

			this.cache = cache;
			var cacheRecord;

			if ((this.cache.texts && this.cache.texts.properties) || this.cache.references) {
				cacheRecord = function(cache, _max) {
					// Cache records in order to improve the performance of the cache of 
					// texts and references :
					var recordset = [];
					var max = _max || 100;

					function flush(_, _writer) {
						recordset.forEach_(_, function(_, record) {
							_writer.write(_, record);
						});
						recordset = [];
					}

					var fcts = [];
					//if (cache.cacheTextKey) fcts.push(cache.cacheTextKey);
					if (cache.texts) {
						Object.keys(cache.texts.properties).forEach(function(prop) {
							fcts.push(cache.texts.properties[prop].cacheTextKey);
						});
					}
					if (cache.references) {
						Object.keys(cache.references).forEach(function(ref) {
							fcts.push(cache.references[ref].cacheReference);
						});
					}
					return function(_, _reader, _writer) {
						var record;
						while (record = _reader.read(_)) {
							for (var i = 0; i < fcts.length; i++) {
								record = fcts[i](_, cache, record);
							}
							recordset.push(record);
							if (recordset.length > max) {
								flush(_, _writer);
							}
						}
						flush(_, _writer);
					};
				};
			}

			orderBy = [];
			if (select && select.$orderBy) {
				Object.keys(select.$orderBy).forEach_(_, function(_, name) {
					var column = properties[name].column.sqlName();
					orderBy.push(column + " " + ((select.$orderBy[name] === 1) ? "asc" : "desc"));
				});
			} else {
				var index = this.table.index(this.data.INDREF);
				index && index.sqlNames(_).forEach(function(column) {
					orderBy.push(column + " asc");
				});
			}
			if (select && (select.$query || (!select.$query && !select.$orderBy))) {
				var qsel = this.queryToSelect(_, select.$query || select, params);
				if (qsel !== "") wheres.push(qsel);
				tracerJs.debug && tracerJs.debug("wheres:" + wheres);
			}

			var i = 0;
			var sql = "select " + columnNames.join(',') + " from " + tableNames.join(',');

			if (wheres.length) sql += " where (" + wheres.join(') and (') + ')';
			if (orderBy.length) sql += " order by " + orderBy.join(',');

			tracerJs.debug && tracerJs.debug("sql:" + sql);
			tracerJs.debug && tracerJs.debug("params:" + params);

			return this.supervisor.sqlDriver.withConnection(_, function(_, cnx) {
				var reader = _this.supervisor.sqlReader(_, cnx, sql, params).limit(max);
				if (cacheRecord) reader = reader.transform(cacheRecord(_this.cache, max));
				reader = reader.map(recordMapper);
				return reader;
			});
		},
		jsReader: function(_, parent, select, max) {
			tracerJs.debug && tracerJs.debug("class.jsReader(" + max + "):" + JSON.stringify(select));
			var _this = this;
			var recordMapper = function() {
				return function(_, record) {
					return _this.supervisor.new(_, 'Instance', _this, null).fromRecord(_, record);
				};
			}();
			var reader = this.jsInterface.AQUERY(_, select);
			if (!reader.read) reader = this.rsReader(_, this.jsInterface.AQUERY(_, select), select);
			return reader.limit(max).map(recordMapper);
		},
		cleanFilter: function(filter) {
			var self = this;
			var keys = Object.keys(filter);
			if (!keys.length) return;

			return keys.reduce(function(r, k) {
				var match = k.match(/upper\((\w*)\)/);
				var p = match ? match[1] : k;
				r[p] = filter[k];
				if (Array.isArray(r[p])) {
					for (var i = 0; i < r[p].length; i++) {
						r[p][i] = self.cleanFilter(r[p][i]);
					}
				} else if (typeof r[p] === 'object') r[p] = self.cleanFilter(r[p]);
				return r;
			}, {});
		},
		rsReader: function(_, recordset, select) {
			if (select && select.$orderBy) {
				var sort = function(orderBy) {
					var fcts = Object.keys(orderBy).reduce(function(r, property) {
						r.push(function(ascDesc) {
							return function(a, b) {
								var A = a[property];
								var B = b[property];
								if (A > B) return ascDesc;
								if (A < B) return -1 * ascDesc;
								return 0;
							};
						}(orderBy[property]));
						return r;
					}, []);
					return function(o1, o2) {
						var cmp = 0;
						for (var i = 0; i < fcts.length; i++) {
							cmp = fcts[i](o1, o2);
							if (cmp) break;
						}
						return cmp;
					};
				}(select.$orderBy);
				recordset = recordset.sort(sort);
			}
			var reader = ez.devices.generic.empty.reader.transform(function(_, reader, writer) {
				recordset.forEach_(_, function(_, record) {
					writer.write(_, record);
				});
			});
			if (select && (select.$query || (!select.$query && !select.$orderBy))) {
				var filter = this.cleanFilter(select.$query || select);
				if (filter) reader = reader.filter(filter);
			}
			return reader;
		},
		loadInstances: function(_, parent, index, vals, max, select) {
			return this.reader(
				_,
				parent,
				Object.keys(vals).reduce(function(o, c) {
					if (index.columns[c]) {
						if (vals[c] !== undefined) {
							o[index.columns[c].name] = vals[c];
						} else {
							o[index.columns[c].name] = index.columns[c].type.defaultValue;
						}
					}
					return o;
				}, {}),
				max, select).toArray(_);
		},
		index: {
			get: function() {
				if (this._index === undefined) {
					if (this.table) {
						var index = this.table.indexes[0];
						this._index = [];
						var _this = this;
						Object.keys(index.columns).forEach(function(c) {
							_this._index.push(_this.properties[index.columns[c].name]);
						});
					} else {
						this._index = [];
						var descript = this.data.KEYINT;
						if (descript && descript.length) {
							var match = descript.match(/[-+]?\w+/g);
							if (match) {
								for (var i = 0; i < match.length; i++) {
									var name = match[i];
									switch (name.charAt(0)) {
										case '+':
											name = name.substring(1) + " asc";
											break;
										case '-':
											name = name.substring(1) + " desc";
											break;
									}
									this._index[i] = {
										name: name
									};
								}
							}
						}
					}
				}
				return this._index;
			}
		},
		fromRecordMapper: function(_, instance, params) {
			if (this.scripts(_).length) {
				return function(_, record) {
					if (!instance) instance = this.supervisor.new(_, 'Instance', this, null);
					tracerJs.debug && tracerJs.debug("record:" + JSON.stringify(record));
					this.invokeScripts(_, "AREAD_BEFORE", instance, "", "", params);
					instance.fromRecord(_, record);
					var astatus = this.invokeScripts(_, "AREAD_AFTER", instance, "", "", params, record);
					// TODO: check astatus
					return instance;
				}.bind(this);
			} else {
				return function(_, record) {
					if (!instance) instance = this.supervisor.new(_, 'Instance', this, null);
					tracerJs.debug && tracerJs.debug("record:" + JSON.stringify(record));
					return instance.fromRecord(_, record);
				}.bind(this);
			}
		},
		ainit: function(_, instance) {
			return this.invokeScripts(_, "$AINIT", instance);
		},

		read: function(_, instance, key) {
			var _this = this;
			var table = this.table;
			var index = table.indexes[0];

			var select = {};
			var params = [];
			Object.keys(_this.index).forEach(function(i) {
				select[_this.index[i].name] = key[i];
				params.push({
					name: _this.index[i].name,
					type: _this.index[i].etnaType,
					value: key[i]
				});
			});
			//TODO : instance.properties.AUUID.set(_,tuuid.generate(),true);
			var mapper = this.fromRecordMapper(_, instance, params);

			var instances = this.reader(_, instance.parent, select, 1, mapper).toArray(_);
			if (!instances || !instances.length) return instance.supervisor.constants.CST_AERROR;
			return instance.supervisor.constants.CST_AOK;
		},
		readBDOC: function(_, property, ident1, ident2, ident3) {
			tracerJs.debug && tracerJs.debug("class.readBDOC(" + [property, ident1, ident2, ident3].join(',') + ')');
			return this.properties[property].readBDOC(_, ident1, ident2, ident3);
		},
		searchResourceFactory: function(_) {
			return this.supervisor.new(_, 'SearchResourceFactory', this);
		},
		searchProto: function(_) {
			var factory = this.searchResourceFactory(_);
			return factory.searchProto(_);
		},
		search: function(_, httpContext, qs) {
			var factory = this.searchResourceFactory(_);
			var dst = bulkWriter(httpContext);
			var select;
			// where=((UPDDATTIM gt "2015-03-17T12:59:39.144Z"))
			if (qs.where) select = filterHelpers.sdataFilterToJson(qs.where);

			var fromInstanceToResource = function(_, instance) {
				return this.supervisor.new(_, 'Resource', factory, instance);
			}.bind(this);
			this.reader(_, null, select, Infinity).map(fromInstanceToResource).pipe(_, dst);
		},
		_AINSERT: function(_) {
			util.checkInstance(this);
			this.insert(_);
			return 0;
		},
		_AREAD: function(_) {
			util.checkInstance(this);
			var key = Array.prototype.slice.call(arguments, 1);
			return this.read(_, key);
		},
		_AUPDATE: function(_) {
			util.checkInstance(this);
			this.update(_);
			return 0;
		},
		_ADELETE: function(_) {
			util.checkInstance(this);
			this.delete(_);
			return 0;
		}
	}),
};