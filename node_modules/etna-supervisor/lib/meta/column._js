"use strict";

var util = require("etna-supervisor/lib/util");
var tracerJs = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");

exports.constructor = util.defineClass(function(superv, table, data) {
	this.supervisor = superv;
	this.table = table;
	this.data = data;
	util.checkDataProperty(this.data, "LONG");

}, null, {
	init: function(_) {
		this.type = this.supervisor.load(_, 'Type', this.data.CODTYP);
		if (!this.type) throw new Error('missing type: ' + this.data.CODTYP);

		var activ = this.data.CODACT ? this.supervisor.load(_, 'Activ', this.data.CODACT) : undefined;
		this.dim = activ ? activ.data.DIME : this.data.DIME;
		this.dim = this.dim || 1;
		return this;
	},
	name: {
		get: function() {
			return this.data.CODZONE;
		}
	},
	sqlNames: function(prefix, alias, sqlOpts) {
		prefix = prefix || '';
		var wrap = function(name) {
			return prefix + name + (alias ? " As " + alias + "$" + name : "");
		};
		var s = '';
		for (var i = 0, dim = this.dim; i < dim; i++) {
			var colName = this.data.CODZONE + '_' + i;
			s += (i > 0 ? ',' : '') + wrap(colName);
			if (sqlOpts && this.type.data.TYPTYP === 4) {
				sqlOpts.decimalColumns = sqlOpts.decimalColumns || [];
				sqlOpts.decimalColumns.push(alias ? alias + "$" + colName : colName);
			}
		}
		return s;
	},

	sqlNamesAssign: function() {
		var s = "";
		for (var i = 0, dim = this.dim; i < dim; i++) {
			var colName = this.data.CODZONE + '_' + i;
			s += (i > 0 ? ',' : '') + colName + " = @?";
		}
		return s;
	},

	sqlDescs: function(descs) {
		for (var i = 0, dim = this.dim; i < dim; i++) {
			if (!this.type.sqlType()) continue;
			descs.push({
				name: this.data.CODZONE,
				index: dim > 1 ? i : null,
				offset: descs.length,
				type: this.type,
			});
		}
	},
	sqlTypesMap: function(typesmap) {
		for (var i = 0, dim = this.dim; i < dim; i++) {
			if (!this.type.sqlType()) continue;
			typesmap.push(this.type.data.TYPTYP);
		}
	},
	sqlDef: function() {
		var typeStr = this.type.sqlType(this.data);
		if (!typeStr) return null;
		var s = "";
		var dim = this.dim; // TODO get dim from activity code if missing here
		for (var i = 0; i < dim; i++) s += (s ? "," : "") + this.data.CODZONE + "_" + i + " " + typeStr;
		return s;
	},
	getSql: function(_, colNames, tableNames, wheres, params, descs, raw, sqlOpts) {
		tracerJs.debug && tracerJs.debug("column.getSql:" + this.name);
		if (!this.type.sqlType()) return;
		if (this.type && this.type.data.TYPTYP === 9) {
			// see later colNames.push('cast(T.' + this.data.CODZONE + "_0 as VARCHAR2(4000))");
		} else {
			colNames.push(this.sqlNames(this.table.abrev + '.', '', sqlOpts));
			descs && this.sqlDescs(descs);
		}
	},
	sqlName: function() {
		return this.table.abrev + '.' + this.name + "_0";
	},
	convertIn: function(val) {
		return this.type ? this.type.convertIn(val) : val;
	},
});