"use strict";

var util = require("etna-supervisor/lib/util");

exports.constructor = util.defineClass(function(superv, table, data) {
	this.supervisor = superv;
	this.table = table;
	this.data = data;
}, null, {
	init: function(_) {
		this.type = this.supervisor.load(_, 'Type', this.data.CODTYP);
		if (!this.type) throw new Error('missing type: ' + this.data.CODTYP);
		return this;
	},
	name: {
		get: function() {
			return this.data.CODZONE;
		}
	},
	sqlNames: function(_, prefix, fn) {
		fn = fn || function(name) {
			return name;
		};

		prefix = prefix || '';
		var s = fn(prefix + this.data.CODZONE + '_0');
		for (var i = 1; i < this.data.DIME; i++) s += ',' + fn(prefix + this.data.CODZONE + '_' + i);
		return s;
	},
	sqlNamesSelect: function(_, prefix) {
		switch (this.type.TYPTYP) {
			case 4:
				return this.sqlNames(_, prefix, superv.sqlDriver.decimalCast);
			case 11:
				return this.sqlNames(_, prefix, superv.sqlDriver.uuidCast);
			default:
				return this.sqlNames(_, prefix);
		}
	},
	sqlDescs: function(descs) {
		for (var i = 0; i < (this.data.DIME || 1); i++) {
			if (!this.type.sqlType()) continue;
			descs.push({
				name: this.data.CODZONE,
				index: this.data.DIME > 1 ? i : null,
				offset: descs.length,
				type: this.type,
			});
		}
	},
	sqlDef: function() {
		var typeStr = this.type.sqlType(this.data);
		if (!typeStr) return null;
		var s = "";
		var dim = this.data.DIME || 1; // TODO get dim from activity code if missing here
		for (var i = 0; i < dim; i++) s += (s ? "," : "") + this.data.CODZONE + "_" + i + " " + typeStr;
		return s;
	},
	getSql: function(_, colNames, tableNames, wheres, params, descs, raw) {
		//dbg:console.log("column.getSql:"+this.name);
		if (!this.type.sqlType()) return;
		if (this.type && this.type.data.TYPTYP === 9) {
			// see later colNames.push('cast(T.' + this.data.CODZONE + "_0 as VARCHAR2(4000))");
		} else {
			colNames.push(this.sqlNames(_, this.table.abrev + '.'));
			descs && this.sqlDescs(descs);
		}
	},
	sqlName: function() {
		return this.table.abrev + '.' + this.name + "_0";
	},
	convertIn: function(val) {
		return this.type ? this.type.convertIn(val) : val;
	},
});