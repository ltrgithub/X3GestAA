"use strict";

var util = require("etna-supervisor/lib/util");
var glob = require('streamline/lib/globals');




exports.constructor = util.defineClass(function(superv, clas) {
	this.supervisor = superv;
	this.class = clas;
	this.properties = {}; // exposed properties only
}, null, {
	init: function(_) {
		var self = this;
		if (this.class.data.ACCSTR) {
			this.$access = function(property) {
				return function(_, instance) {
					return instance.get(_, property);
				};
			}(this.class.data.ACCSTR);
		}

		this.properties = Object.keys(this.class.properties)
			.filter(function(property) {
				return ((self.class.properties[property].isSearchable && !/.*_REF$/.test(property)) || self.class.properties[property].collection);
			})
			.reduce_(_, function(_, r, property) {
				r[property] = {
					resourceFactory: this,
					supervisor: self.supervisor,
					type: self.class.properties[property].type,
					tag: property,
					prototypeNode: self.class.properties[property].prototypeNode,
					data: util.clone(self.class.properties[property].data)
				};
				if (self.class.properties[property].collection) {
					var targetResourceFactory = self.class.properties[property].collection.class.searchResourceFactory(_);
					if (targetResourceFactory) {
						r[property].collection = self.class.properties[property].collection;
						r[property].targetResourceFactory = targetResourceFactory;
					}
				}
				return r;
			}, {});
		return this;
	},
	fillTypeNode: function(_, node) {
		node.$type = "application/x-array"; //this.collection.data.MAXCOL > 1 ? "application/x-array" : "application/x-object";
		node.$item = this.searchItemProto(_);
	},
	searchItemProto: function(_, facet) {
		var proto = {
			$title: this.supervisor.loadText(_, this.class.data.INTCLA) + " {$key}",
		};
		if (facet) {
			proto.$key = this.class.keyExpression(_);
			proto.$url = "{$baseUrl}/" + this.class.name + "('{$key}')?representation=" + this.class.name + ".searchItem";
		}
		proto.$properties = {};

		var self = this;
		Object.keys(self.properties).forEach_(_, function(_, name) {
			proto.$properties[name] = self.properties[name].prototypeNode(_);
		});
		return proto;
	},
	searchProto: function(_) {
		return {
			$baseUrl: "{$baseUrl}",
			$baseType: "application/json;vnd.sage=syracuse;vnd.sage.syracuse.representation=x3.erp.SUPERV",
			$classTitle: this.supervisor.loadText(_, this.class.data.INTCLA),
			$url: "{$baseUrl}/" + this.class.name + "?representation=" + this.class.name + ".$search",
			$prototype: "{$baseUrl}/$prototypes('{$representation}.$thumb')",
			$type: "{$baseType}." + this.class.name + ".$search",
			$properties: {
				$resources: {
					$type: "application/x-array",
					$item: this.searchItemProto(_, "$searchItem"),
				}
			},
			$links: {
				$search$details: {
					$title: "Detail",
					$default: true,
					$url: "{$baseUrl}/" + this.class.name + "('{$key}')?representation=" + this.class.name + ".$details",
					$devices: "desktop"
				}
			}
		};
	},


});