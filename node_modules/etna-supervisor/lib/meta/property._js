"use strict";

var util = require("etna-supervisor/lib/util");
var variables = require('etna-engine/lib/runtime/variables');
var InstanceProperty = require("etna-supervisor/lib/instanceProperty").InstanceProperty;
var InstanceCollection = require("etna-supervisor/lib/instanceCollection").InstanceCollection;

var Property = exports.constructor = util.defineClass(function(superv, clas, data, repr) {
	this.supervisor = superv;
	this.data = data;
	this.class = clas;
	this.representation = repr;
}, null, {
	init: function(_) {
		if (this.type) return this;
		if (this.data.CODTYP) {
			this.type = this.supervisor.load(_, 'Type', this.data.CODTYP);
			if (!this.type) throw new Error('type not found: ' + this.data.CODTYP);
		}
		return this;
	},
	name: {
		get: function() {
			return this.data.FLDCLA;
		}
	},
	etnaType: {
		get: function() {
			return this.type.etnaType;
		}
	},
	set: function(value) {
		this.set.key = this.set.key || "L" + this.etnaType + ((this.etnaType === 'S') ? (this.data.LONG || this.type.data.LNGTYP || 250) : '');
		//console.log("property.set " + this.name + " key:" + key + " value:" + value);
		return variables.types[this.etnaType].set(this.name, this.set.key, value);
	},
	createInstance: function(parent) {
		if (this.collection) return new InstanceCollection(parent, this.collection);
		return new InstanceProperty(parent, this);
	},
	clone: function(repr) {
		var p = new Property(this.supervisor, this.class, this.data, repr);
		p.type = this.type;
		p.collection = this.collection;
		return p;
	},
	targetClass: function(_) {
		if (!this.data.LNKCLA) return null;
		return this.supervisor.load(_, 'Class', this.data.LNKCLA);
	},
	prototypeNode: function(_) {
		var self = this;
		var node = {
			$title: this.supervisor.loadText(_, this.data.INTFLD),
			$shortTitle: this.supervisor.loadText(_, this.data.INTSHTFLD),
		};
		var keyParams = this.class.data.PARAM_FLDS.filter(function(paramData) {
			return paramData.FLDCLA === this.name && paramData.TYPKEY === 2;
		}, this);
		if (this.exportedProperty && this.exportedProperty.data.TYPAFFPRO !== 2) node.$isReadOnly = true;
		/* && keyParams.some(function(param) {
			return param.MODPAR !== 1;
		})*/
		if (this.data.OBLIG === 2) node.$isMandatory = true;
		if (this.targetResourceFactory) {
			this.targetResourceFactory.fillTypeNode(_, node);
			node.$maxItems = this.collection.data.MAXCOL;
		} else if (this.data.CODTYP != null) {
			if (this.type.data.TYPTYP === 7 || this.data.CODTYP === "ATX") {
				node.$capabilities = "sort,filter,filter_upper";
			} else {
				node.$capabilities = "sort,filter";
			}
			if (this.type && (this.type.data.TYPPROSYR === 'ATYPE3' || this.type.data.CODCLA === 'ATEXTRA') //
				&& this.resourceFactory.facet === '$edit') node.$capabilities += ",localize";
			this.supervisor.fillTypeNode(_, this.data, node);
		} else {
			return console.error("ignoring prototype property " + this.name), undefined;
		}
		if (this.resourceFactory.facet !== '$bulk' && this.links) {
			node.$links = {};
			Object.keys(this.links).forEach_(_, function(_, name) {
				node.$links[name] = self.links[name].prototypeNode(_);
			});
		}
		return node;
	},
	prototypeRefNode: function(_, simpleNode) {
		var node = {
			$title: simpleNode.$title,
			$shortTitle: simpleNode.$shortTitle,
			$type: "application/x-reference",
			$capabilities: simpleNode.$capabilities,
			//$links: simpleNode.$links,
			$item: {
				$properties: {},
				$links: {}
			},
		};
		delete simpleNode.$title;
		delete simpleNode.$shortTitle;
		delete simpleNode.$capabilities;
		delete simpleNode.$links;
		simpleNode.$isExcluded = true;

		//console.error("CREATING REF FOR: " + this.class.name + "." + this.name);
		var item = node.$item;
		var targetClass = this.type.targetClass(_);
		if (targetClass == null) throw new Error("target class missing for reference: " + this.name);
		var keyParams = this.class.data.PARAM_FLDS.filter(function(paramData) {
			return paramData.FLDCLA === this.name && paramData.TYPKEY === 2;
		}, this);
		var linkUrlBaseSingle = "{$baseUrl}/" + targetClass.name + "('" + keyParams.map(function(paramData) {
			var val = paramData.VALEUR; // strange: would be more logical to have CODPAR instead of VALEUR here
			val = val.substring(val.indexOf('.') + 1); // hack to keep unit tests happy (strip COL. prefix)
			return '{' + val + '}';
		}, this).join('~') + "')?representation=" + this.type.data.DEFREPDES;
		var linkUrlBaseMultiple = "{$baseUrl}/" + targetClass.name + "?representation=" + this.type.data.DEFREPDES;
		item.$url = linkUrlBaseSingle + ".$lookup";
		item.$key = targetClass.keyExpression(_);
		item.$value = keyParams.map(function(paramData) {
			return '{' + paramData.CODPAR + '}';
		}, this).join('~');
		keyParams.forEach_(_, function(_, paramData) {
			var targetProp = targetClass.property(paramData.CODPAR);
			item.$properties[paramData.CODPAR] = {};
			// TODO: next line could cause infinite recursion??
			this.supervisor.fillTypeNode(_, targetProp.data, item.$properties[paramData.CODPAR]);
			item[paramData.CODPAR] = '{' + paramData.VALEUR + '}';
		}, this);
		item.$links.$details = {
			$title: "details",
			// TODO 
			$target: "",
			$type: "application/json;vnd.sage=syracuse",
			$url: linkUrlBaseSingle + ".$details",
		};
		item.$links.$lookup = {
			$title: "select",
			// TODO 
			$type: "application/json;vnd.sage=syracuse",
			$url: linkUrlBaseMultiple + ".$lookup",
		};
		item.$links.$summary = {
			$title: "summary",
			// TODO 
			$target: "",
			$type: "application/json;vnd.sage=syracuse",
			$url: linkUrlBaseSingle + ".$summary",
		};
		item.$links.$query = {
			$title: "select",
			// TODO 
			$type: "application/json;vnd.sage=syracuse",
			$url: linkUrlBaseMultiple + ".$query",
		};

		return node;
		/* for info, typical result
		"C06P02_REF": {
			"$title": "{@28440}",
			"$shortTitle": "{@28440}",
			"$type": "application/x-reference",
			"$capabilities": "sort,filter",
			"$item": {
				"$url": "{$baseUrl}/AQCPROR02('{$key}')?representation=AQCPROR02.$lookup",
				"$value": "{R02P01}",
				"$key": "{R02P01}~{R02P02}",
				"$properties": {
					"R02P01": {
						"$type": "application/x-string"
					},
					"R02P02": {
						"$type": "application/x-integer"
					}
				},
				"R02P01": "{C06P02}",
				"R02P02": "{C06P03}",
				"$links": {
					"$details": {
						"$title": "{@28123}",
						"$target": "",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/AQCPROR02('{C06P02}~{C06P03}')?representation=AQCPROR02.$details"
					},
					"$lookup": {
						"$title": "{@6109}",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/AQCPROR02?representation=AQCPROR02.$lookup"
					},
					"$summary": {
						"$title": "{@25036}",
						"$target": "",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/AQCPROR02('{C06P02}~{C06P03}')?representation=AQCPROR02.$summary"
					},
					"$query": {
						"$title": "{@27982}",
						"$target": "",
						"$type": "application/json;vnd.sage=syracuse",
						"$url": "{$baseUrl}/AQCPROR02?representation=AQCPROR02.$query"
					}
				}
			}
		},*/
	},
	column: {
		get: function() {
			//!console.log("column ? "+(!!this.class.table));
			return (this.class.table && this.class.table.column(this.data.FLDCLA)) || undefined;
		}
	},
	getSql: function(_, colNames, tableNames, wheres, params, descs, raw) {
		/*dbg*/ //console.log("property.getSql");
		var column = this.column;
		if (column) {
			column.getSql(_, colNames, tableNames, wheres, params, descs, raw);
		} else if (this.collection && !this.collection.mappingData) {
			// it's a denormalized collection :
			this.collection.getSql(_, colNames, tableNames, wheres, params, descs, raw);
		} else if (/^AX[123X]/.test(this.data.CODTYP)) {
			if (raw || !tableNames) return;
			var param = this.supervisor.sqlDriver.param;
			var abbr = "AX" + wheres.length;

			var keyNames = this.class.table.indexes[0].sqlNames(_).slice(0, 2);
			colNames.push(abbr + ".TEXTE_0 AS " + this.name + '_0');
			tableNames[0] += " left outer join ATEXTRA " + abbr + " on " + keyNames.map(function(keyName, i) {
				return abbr + ".IDENT" + (i + 1) + '_0=T.' + keyName;
			}).join(' and ');

			params.push(this.class.table.name);
			wheres.push(abbr + ".CODFIC_0=" + param(params.length - 1));
			params.push(this.name);
			wheres.push(abbr + ".ZONE_0=" + param(params.length - 1));
			params.push(this.supervisor.LAN(_));
			wheres.push(abbr + ".LANGUE_0=" + param(params.length - 1));
		}
	}
});