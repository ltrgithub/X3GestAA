"use strict";

var util = require("etna-supervisor/lib/util");
var activ = require("etna-supervisor/lib/meta/activ");

exports.defineClass = function(constructor, parent, members) {
	// Add base members :

	members.scripts = function(_) {
		if (this._scripts === undefined) {
			this._scripts = this.supervisor.loadScripts(_, this) || null;
		}
		return this._scripts;
	};

	members.isActivated = function(_) {
		return (activ.getActiv(_, this.supervisor, this.data.CODACT) > 0);
	};

	members.ASETERROR = function(_, path, msg, severity) {
		console.log("baseClass ASETERROR " + [path, msg, severity].join(','));
		this.diagnoses.push(this.supervisor.new(_, 'Diagnosis', severity, path, msg));
		return severity;
	};

	members._$methods = function(_, action) {
		console.log("_$methods " + action);
		var args = {
			ASTATUS: {
				type: "LI",
				value: 0
			},
			THIS: {
				type: "LY",
				value: this
			},
			CURPRO: {
				type: "LS",
				value: ""
			},
			CURPTH: {
				type: "LS",
				value: ""
			},
			ACTION: {
				type: "LS",
				value: action
			}
		};
		return this.runScripts(_, "$METHODS", args);
	};

	return util.defineClass(function(superv, data, group) {
		this.supervisor = superv;
		this.data = data;
		this.diagnoses = [];

		// Call derived constructor :
		constructor.apply(this, arguments);
	}, parent, members);
};