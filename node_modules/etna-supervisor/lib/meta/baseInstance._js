"use strict";

var glob = require('streamline/lib/globals');
var util = require("etna-supervisor/lib/util");
var activ = require("etna-supervisor/lib/meta/activ");
var runtime = require('etna-engine/lib/runtime/runtime');

var tracerJs = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");

exports.defineClass = function(constructor, parent, members) {
	// Add base members :

	members.AINIT = function(_) {
		return this.$methods(_, "AINIT");
	};

	members.ASETERROR = function(_, path, msg, severity) {
		this.diagnoses.push(this.supervisor.new(_, 'Diagnosis', severity, path, msg));
		return severity;
	};

	members.init = function(_) {
		return this;
	};

	// Lazy loading of slots:
	members.slot = function(_, name) {
		if (this.slots[name]) return this.slots[name];
		if (this.properties[name]) {
			this.slots[name] = this.properties[name].createInstance(this);
			if (this.record !== undefined) {
				this.slots[name].fromRecord(_, this.record, this.colnIndex);
			}
			return this.slots[name];
		}
		throw new Error(" slot property not found: " + name);
	};
	members.get = function(_, name, raw) {
		tracerJs.debug && tracerJs.debug("instance get:" + name);
		try {
			if (name === 'AERROR') return util.emptyArray();
			else if (name === 'ACTX') return glob.context.x3session.actx;
			else if (name === 'APARENT') return this.parent;
			else if (this.clasName && name === this.clasName) return this.instance;
			var s = this.slot(_, name);
			return s.get(_, raw);
		} catch (e) {
			//External attributes ?
			tracerJs.debug && tracerJs.debug("exception:" + JSON.stringify(e));
			var valattr = this.getAttribute("$" + name);
			if (valattr !== undefined) return variables.x3Val(valattr);
			throw new Error(" get property not found: " + name + JSON.stringify(e));
		}
	};

	members.scripts = function(_) {
		return this.meta.scripts(_);
	};

	return util.defineClass(function(superv, data, group) {
		this.supervisor = superv;
		this.data = data;
		this.diagnoses = [];

		// Call derived constructor :
		constructor.apply(this, arguments);
	}, parent, members, {
		hasAttributes: true,
		hasSnapshots: true
	});
};