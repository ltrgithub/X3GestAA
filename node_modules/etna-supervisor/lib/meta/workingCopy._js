"use strict";

var util = require("etna-supervisor/lib/util");

var tracerJs = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");

exports.constructor = util.defineClass(function(superv, res, trackingId) {
	this.supervisor = superv;
	this.trackingId = trackingId;
	this.snapshot = res;
	this.save = res.key ? "update" : "insert";

	this.current = res.clone();
	this.representation = res.resourceFactory.representation.name;
	this.url = "{$baseUrl}/$workingCopies('" + this.trackingId + "')" + //
	"?representation=" + this.representation + '.$edit';
	this.etag = 1;
	this.ETag = 1;

	var clas = res.resourceFactory.representation.class.name;
	this.actions = {
		$save: {
			$isHidden: false,
			$isDisabled: false,
			$links: {
				$redirect: {
					$url: "{$baseUrl}/" + clas + "('{$key}')?representation=" + this.representation + ".$details",
					$isHidden: false
				}
			}
		}
	};

}, null, {
	init: function(_) {
		return this;
	},
	delta: function(_) {
		return {};
	},
	addAttributes: function(node) {
		node.$trackingId = this.trackingId;
		node.$baseUrl = this.supervisor.baseUrl;
		node.$prototype = "{$baseUrl}/$prototype('{$representation}.$thumb')";
		node.$representation = this.$representation;
		node.$url = this.url;
		node.$type = "application/json;vnd.sage=syracuse";
		node.$etag = this.etag;
		node.ETag = this.ETag;
		node.$actions = this.actions;
		return node;
	},
	dataNode: function(_) {
		var node = this.previous ? this.delta(_) : this.current.dataNode(_);
		return this.addAttributes(node);
	},
	update: function(_, delta) {
		tracerJs.debug && tracerJs.debug("updating working copy:", delta);
		this.actions.$save.$isDisabled = false;
		var node = this.current.applyDelta(_, delta);

		tracerJs.debug && tracerJs.debug("delta.$actions:" + JSON.stringify(delta.$actions));
		if (delta.$actions && delta.$actions.$save && delta.$actions.$save.$isRequested === true) {
			tracerJs.debug && tracerJs.debug("resource." + this.save);
			this.current[this.save](_);
			node.$diagnoses = [{
				$severity: "success",
				$message: "Enregistrements mis Ã  jour"
			}];
			this.actions.$save.$isDisabled = true;
			this.actions.$save.$isRequested = false;

			this.save = "update";
		}
		return this.addAttributes(node);
	}
});