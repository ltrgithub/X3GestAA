"use strict";

var util = require("etna-supervisor/lib/util");

function lastPath(path) {
	return path && path.substring(path.lastIndexOf('.') + 1);
}

exports.constructor = util.defineClass(function(superv, anchor, data) {
	this.supervisor = superv;
	this.anchor = anchor;
	this.data = data;
}, null, {
	init: function(_) {
		return this;
	},
	name: {
		get: function() {
			switch (this.data.CMPLNK) {
			case 1:
				return "$create";
			case 2:
				return "$details";
			case 3:
				return "$edit";
			case 4:
				return "$delete";
			case 5:
				return "$query";
			case 6:
				return "$duplicate";
			case 7:
				return "$excel";
			case 8:
				return "$excel";
			case 9:
				return "$lookup";
			case 10:
				return "$summary";
			case 11:
				return "$print";
			case 12:
				return "$print";
			case 13:
				return "$wordreport";
			case 14:
				return "$wordreport";
			case 15:
				return "$wordmailmerge";
			case 16:
				return "$wordmailmerge";
			case 17:
				return "$save";
			case 18:
				return "$abort";
			default:
				return this.data.CODLNK;
			}
		}
	},
	prototypeNode: function(_) {
		var node = {
			$title: this.supervisor.loadText(_, this.data.INTLNK),
		};
		switch (this.data.TYPLNK) {
		case 1:
			// representation
			node.$type = "application/json;vnd.sage=syracuse";
			switch (this.data.CMPLNK) {
			case 1:
				// create
				node.$method = "POST";
				node.$url = this.url(_, "$edit", false, true);
				break;
			case 2:
				// details
				node.$url = this.url(_, "$details", true, false);
				break;
			case 3:
				// edit
				node.$method = "POST";
				node.$url = this.url(_, "$edit", true, true);
				break;
			case 4:
				// delete - TODO fix confirm message
				node.$method = "DELETE"
				node.$url = this.url(_, "$query", true, false);
				node.$confirm = "Do you wish to delete the recording?";
				break;
			case 5:
				// view list
				node.$url = this.url(_, "$query", false, false);
				break;
			case 6:
				// duplicate - TODO: fix URL
				node.$method = "POST";
				node.$url = this.url(_, "$edit", true, true);
				break;
			case 7:
				// excel details
				node.$type = "application/syracuse-excel-worksheet";
				node.$url = this.url(_, "$details", true, false);
				break;
			case 8:
				// excel list
				node.$type = "application/syracuse-excel-worksheet";
				node.$url = this.url(_, "$query", false, false);
				break;
			case 9:
				// lookup
				node.$url = this.url(_, "$lookup", false, false);
				break;
			case 10:
				// summary
				node.$url = this.url(_, "$summary", true, false);
				break;
			case 11:
				// pdf details
				node.$type = "application/pdf";
				node.$url = this.url(_, "$details", true, false);
				break;
			case 12:
				// pdf list
				node.$type = "application/pdf";
				node.$url = this.url(_, "$query", false, false);
				break;
			case 13:
				// word details
				node.$type = "application/syracuse-word-report";
				node.$url = this.url(_, "$details", true, false);
				break;
			case 14:
				// word list
				node.$type = "application/syracuse-word-report";
				node.$url = this.url(_, "$query", false, false);
				break;
			case 15:
				// word mail merge
				node.$type = "application/syracuse-word-mailmerge";
				node.$url = this.url(_, "$details", true, false);
				break;
			case 16:
				// word mail merge
				node.$type = "application/syracuse-word-mailmerge";
				node.$url = this.url(_, "$query", false, false);
				break;
			case 17:
				// save -- TODO: fix URL
				node.$url = this.url(_, "$save", true, false);
				break;
			case 18:
				// cancel -- TODO: fix URL
				node.$url = this.url(_, "$cancel", true, false);
				break;
			default:
				node.$debug = this.data;
			}
			break;
		case 2:
			// method -- see later
			node.$debug = this.data;
			break;
		case 3:
			// operation -- see later
			// anchor must be page, parent is resourceFactory
			if (this.data.AFFLNK !== 4) throw new Error("bad anchor type for operation link: " + this.data.AFFLNK);
			// not sure about all this. should probably use this.data.CLAPTRLNK (ATB in ATABLE/AVALDIC)
			var repr = this.anchor.parent.representation;
			var clas = this.anchor.parent.representation.class;
			node.$type = "application/json;vnd.sage=syracuse";
			node.$method = "POST";
			node.$url = "{$baseUrl}/" + clas.name + "('" + clas.keyExpression(_) + "')/" + //
			"$services/" + this.data.CODOPELNK + "?representation=" + repr.name + "." + repr.facet;
			node.$parameters = {};
			//node.$debug = this.data;
			break;
		case 4:
			// convergence
			node.$method = "POST";
			node.$url = this.supervisor.transUrl + "/$sessions?f=" + this.data.CODFNCLNK;
			//node.$debug = this.data;
			break;
		case 5:
			switch (this.data.CMPLNK) {
			case 19:
				if (this.data.AFFLNK !== 1) throw new Error("bad anchor type for x-binary link: " + this.data.AFFLNK);
				node.$type = "application/x-binary";
				//console.log(this.anchor.parent);
				node.$url = "{$baseUrl}/TEXT('" + this.anchor.parent.name + "~" + this.anchor.name + "~" + this.anchor.parent.class.keyExpression(_) + "')";
				break;
			default:
				// free -- see later
				node.$debug = this.data;
			}
			break;
		default:
			node.$debug = this.data;
		}
		// ATTLNK:
		// 1: simple link
		// 2: details
		// 3: lookup
		// 4: summary
		return node;
	},
	keyExpression: function(_) {
		var s = lastPath(this.data.ANCLNK);
		if (s) return '{' + s + '}';
		if (this.anchor.keyExpression) return this.anchor.keyExpression(_);
		console.error("no key expression for link " + this.name);
		return "EXPRESSION_" + this.data.ANCLNK;
	},
	url: function(_, facet, withKey, withWorkingCopy) {
		// TODO: key handling is very simplistic for now
		var key = withKey ? "('" + this.keyExpression(_) + "')" : "";
		var workingCopy = withWorkingCopy ? "/$workingCopies" : "";
		var url = "{$baseUrl}/" + this.data.CLALNK + key + workingCopy + "?representation=" + this.data.REPLNK + "." + facet;
		return url;
	},


});