"use strict";

var util = require("etna-supervisor/lib/util");
var glob = require('streamline/lib/globals');
var Jmql = require("etna-engine/lib/jmqlgen");
var filterHelpers = require("syracuse-orm/lib/filters");

var constants = require("etna-supervisor/lib/constants");
var Cache = require("etna-supervisor/lib/cache").Cache;
var activ = require("etna-supervisor/lib/meta/activ"); // GH 6167

var ez = require("ez-streams");

var tracerJs = require('syracuse-core').getTracer("etna.supervisor");

function bulkWriter(httpContext) {
	var sep;
	return ez.devices.generic.writer(function(_, resource) {
		if (!sep) {
			httpContext.response.writeHead(200, {
				"content-type": "application/json"
			});
			httpContext.response.write(_, '{"$resources":[');
		}
		if (resource === undefined) {
			httpContext.response.end("]}");
		} else {
			httpContext.response.write(_, (sep || '') + JSON.stringify(resource.dataNode(_)), "utf8");
		}
		sep = ',';
	});
};


exports.constructor = util.defineClass(function(superv, repr, facet, path, clas) {
	this.supervisor = superv;
	this.representation = repr;
	this.facet = facet;
	this.path = path;
	this.class = clas;
	this.properties = {}; // exposed properties only
	this.links = {};
	this.page = {
		facet: facet,
		links: {},
		representation: repr,
		class: clas,
	};
}, null, {
	init: function(_) {
		return this;
	},
	fillTypeNode: function(_, node) {
		node.$type = "application/x-array"; //this.collection.data.MAXCOL > 1 ? "application/x-array" : "application/x-object";
		node.$item = this.itemProto(_, {});
	},
	itemProto: function(_, proto, facet) {

		var key = this.keyExpression(_);
		if (facet) {
			var repDotFacet = this.representation.name + "." + facet;
			proto.$url = "{$baseUrl}/" + this.representation.class.name + "('{$key}')?representation=" + repDotFacet;
			if (facet === "$queryItem") proto.$type = "application/json;vnd.sage=syracuse";
			else proto.$type = "{$baseType}." + repDotFacet;
			proto.$key = key;
			proto.$value = key;
			if (!proto.$title) {
				if (this.representation.class.table) {
					var title = this.representation.class.table.data.INTIT;
					proto.$description = proto.$title = title ? "{" + this.representation.class.table.data.INTIT + "}" : "";
				} else {
					proto.$description = proto.$title = "";
				}
			}
		} else {
			proto.$type = "application/json";
			proto.$value = key;
		}
		var self = this;
		var hasToBeSorted = false;
		proto.$properties = {};
		Object.keys(self.properties).filter(function(name) {
			return !self.properties[name].isExtraRef;
		}).forEach_(_, function(_, name) {
			var prop = self.properties[name];

			var prototypeNode = prop.prototypeNode(_);
			if (prop.isInstance) {
				// Collection 1-1 Merge properties
				var properties = prototypeNode.$item.$properties;
				proto.$properties = Object.keys(properties).reduce(function(r, p) {
					proto.$properties[p] = properties[p];
					return r;
				}, proto.$properties);
				hasToBeSorted = true;
			} else if (prop.isArray) {
				// Collection of property with only one property : Merge property with item
				var childProp;
				var childDest;
				var properties = Object.keys(prototypeNode.$item.$properties).reduce(function(r, name) {
					r.push(prototypeNode.$item.$properties[name]);
					if (!childProp) childProp = name;
					return r;
				}, []);
				//delete prototypeNode.$item;
				if (properties.length) {
					properties[properties.length - 1].$title = undefined;
					properties[properties.length - 1].$shortTitle = undefined;
				}
				if (childProp && properties[properties.length - 1].$item) {
					//Example : 
					//                  "$value": "{POSCOD}",
					//                  "POSCOD": "{POSCOD2}",
					//                  "$url": "{$baseUrl}/POSCOD('{CRY}~{POSCOD2}~{POSCTY}~{POSCTYCOD}')?representation=POSCOD.$details"
					//delete key POSCOD2 and replace POSCOD2 by POSCOD in all URL
					Object.keys(properties[properties.length - 1].$item).filter(function(name) {
						return !(/^\$(key|value|links|properties|url)$/.test(name));
					}).forEach(function(name) {
						if (properties[properties.length - 1].$item[name] === "{" + childProp + "}") {
							if (!childDest) childDest = name;
							delete properties[properties.length - 1].$item[name];
						}
					});
					if (childDest && properties[properties.length - 1].$item.$links) {
						Object.keys(properties[properties.length - 1].$item.$links).forEach(function(name) {
							var url = properties[properties.length - 1].$item.$links[name].$url;
							if (url) {
								url = url.replace(new RegExp("{" + childProp + "}", 'g'), "{" + childDest + "}");
								properties[properties.length - 1].$item.$links[name].$url = url;
							}
						});
					}
				}
				prototypeNode.$item = properties[properties.length - 1];
				proto.$properties[prop.tag || name] = prototypeNode;
			} else {
				var p = proto.$properties[prop.tag || name] = prototypeNode;
				if (p && prop._isReference) {
					//  || prop.type.data.OBJLIEN
					//if (p && prop.type && prop.type.data.CODCLA && (prop.type.data.TYPSELSYR === 2)) {
					// don't treat primary key of master factory as a reference.
					proto.$properties[prop.ref(prop.tag || name)] = prop.prototypeRefNode(_, p);
				}
			}

		}, this);
		if (hasToBeSorted) {
			//Happens after merging prototypeNodes TYPLNK=3
			proto.$properties = this.representation.exportedProperties.reduce(function(r, ep) {
				r[ep.tag] = proto.$properties[ep.tag];
				return r;
			}, {});
		}
		if (this.facet !== "$bulk") Object.keys(self.links).forEach_(_, function(_, name) {
			proto.$links = proto.$links || {};
			proto.$links[name] = self.links[name].prototypeNode(_);
		}, this);
		return proto;
	},
	pageProto: function(_) {
		var pageProto = {};
		var repDotFacet = this.representation.name + "." + this.facet;

		// context
		var actx = glob.context.x3session.actx;
		pageProto.$actxUser = actx.$USER(_);
		pageProto.$actxLogin = actx.$LOGIN(_);
		pageProto.$actxFolder = actx.$AFOLDER(_);
		pageProto.$actxSolution = actx.$ASOLUTION(_);
		pageProto.$actxLan = actx.$LAN(_);
		pageProto.$actxLanDef = actx.$LANDEF(_);
		pageProto.$actxLanIso = actx.$LANISO(_);
		pageProto.$actxLegCur = actx.get(_, "AFOLD").get(_, "ALEGCUR");
		pageProto.$actxNbLeg = "" + actx.get(_, "AFOLD").get(_, "ANBLEG");

		// $baseType needed for unit test but we could clean it up
		pageProto.$baseType = "application/json;vnd.sage=syracuse;vnd.sage.syracuse.representation=x3.erp.SUPERV";
		pageProto.$type = "{$baseType}." + repDotFacet;
		pageProto.$representation = this.representation.name;
		pageProto.$prototype = "{$baseUrl}/$prototype('{$representation}.$thumb')";
		pageProto.$device = this.representation.qdevice;
		pageProto.$title = this.representation.title(_);
		pageProto.$collaborationUrl = this.supervisor.collaborationUrl;
		pageProto.$baseUrl = this.supervisor.baseUrl;
		if (this.facet === "$edit") pageProto.$repUrl = "{$baseUrl}/$workingCopies('{$trackingId}')";
		else pageProto.$repUrl = "{$baseUrl}/" + this.representation.name;
		pageProto.$instanceUrl = "{$repUrl}/" + this.representation.data.ABRCLA;

		if (this.facet === "$edit") {
			var sysValues = glob.context.x3frame.context.sys.values;
			var adxtul = sysValues.ADXTUL ? sysValues.ADXTUL[2] : [];
			var adxtuc = sysValues.ADXTUC0 ? sysValues.ADXTUC0[2] : [];
			var adxtut = sysValues.ADXTUT0 ? sysValues.ADXTUT0[2] : [];

			pageProto.$x3FormatExt = adxtul.reduce(function(r, tul, i) {
				r[tul] = {
					stdType: adxtuc[i].split(''),
					chars: adxtut[i].split('')
				};
				return r;
			}, {});
		}

		if (/^\$(query|lookup|bulk)$/.test(this.facet)) {
			pageProto.$url = "{$baseUrl}/" + this.representation.class.name + "?representation=" + repDotFacet;
			pageProto.$itemsPerPage = 300;
			pageProto.$properties = {
				$resources: {
					$type: "application/x-array",
					$item: this.itemProto(_, {}, "$queryItem"),
					// unit test fails with: this.facet + "Item"),
				}
			};
			if (this.facet === "$query" && this.representation.isBehaviourEnabled(8) && this.representation.isFacetEnabled("$edit"))
				pageProto.$properties.$resources.$capabilities = "quickedit";
		} else {
			pageProto = this.itemProto(_, pageProto, this.facet);
		}

		if (this.facet !== '$bulk') {
			//links
			Object.keys(this.page.links).filter_(_, function(_, name) {
				var isLink = (~[1, 3, 4, 5].indexOf(this.page.links[name].data.TYPLNK)) && this.page.links[name].data.CMPLNK < 17;
				return isLink;
			}, this).forEach_(_, function(_, name) {
				pageProto.$links = pageProto.$links || {};
				pageProto.$links[name] = this.page.links[name].prototypeNode(_);
			}, this);
			//actions
			Object.keys(this.page.links).filter_(_, function(_, name) {
				var isLink = (~[1, 3, 4, 5].indexOf(this.page.links[name].data.TYPLNK)) && this.page.links[name].data.CMPLNK < 17;
				//#SAM 108421 no abort
				return isLink === false && this.page.links[name].data.CMPLNK !== 19 && this.page.links[name].data.CMPLNK !== 18;
			}, this).forEach_(_, function(_, name) {
				pageProto.$actions = pageProto.$actions || {};
				pageProto.$actions[name] = this.page.links[name].prototypeNode(_);
			}, this);
		}
		// unused pageProto.$localization = {};
		return pageProto;
	},
	loadResource: function(_, key, qs) {
		// TODO qs ?
		var key = key.split('~');
		var resource = this.supervisor.new(_, 'Resource', this, null);
		var status = resource.read(_, key);
		if (status === constants.CST_ARROR) {
			throw new util.HttpError(404, key + ":" + this.supervisor.loadMess(_, 100, 23));
		}

		return resource;
	},
	createResource: function(_, qs) {
		var instance = this.class.createInstance(_, qs);
		// Call AINIT in order to enable snapshots:
		var resource = this.supervisor.new(_, 'Resource', this, instance).bindInstance(instance);
		instance.AINIT(_);
		return resource;
	},
	deleteResource: function(_, httpContext, $key, qs) {
		var key = $key.split('~');
		var self = this;

		var resource = this.supervisor.new(_, 'Resource', this, null);
		var status = resource.read(_, key);
		if (status === constants.CST_AERROR) {
			throw new util.HttpError(404, key + ":" + this.supervisor.loadMess(_, 100, 23));
		}
		status = resource.delete(_);
		if (status === constants.CST_AERROR) {
			resource.addDiagnose(_, constants.CST_AOK, this.supervisor.loadMessParams(_, 149, 61, $key));
		}
		var reply = {
			$diagnoses: resource.instance.diagnoses.reduce(function(r, diag) {
				r.push(diag.dataNode());
				return r;
			}, [])
		};
		return httpContext.jsonReply(_, 200, reply);
	},
	tag2PropertyName: {
		get: function() {
			if (this._tag2PropertyName === undefined) {
				var self = this;
				this._tag2PropertyName = Object.keys(self.properties).reduce(function(r, property) {
					if (property !== self.properties[property].tag) {
						// Keep memory of tags whose name is different of the property :
						r[self.properties[property].tag] = property;
					}
					return r;
				}, {});
			}
			return this._tag2PropertyName;
		}
	},
	tag2Property: function(tag) {
		tracerJs.debug && tracerJs.debug("tag2Property:" + tag);
		var match = tag.match(/upper\((\w*)\)/);
		if (match) {
			return "upper(" + this.tag2Property(match[1]) + ")";
		}
		return this.tag2PropertyName[tag] || tag;
	},
	mapTags2Properties: function(o) {
		var _this = this;
		return Object.keys(o).reduce(function(r, tag) {
			var property = _this.tag2Property(tag);
			if (Array.isArray(o[tag])) {
				r[property] = o[tag].reduce(function(a, elt) {
					a.push(_this.mapTags2Properties(elt));
					return a;
				}, []);
			} else if (typeof o[tag] === 'object' && o[tag] != null) {
				r[property] = _this.mapTags2Properties(o[tag]);
			} else {
				r[property] = o[tag];
			}
			return r;
		}, {});
	},
	sdataFilterToJson: function(filter) {
		return this.mapTags2Properties(filterHelpers.sdataFilterToJson(filter));
	},
	filtersTabCor: function(_) {
		var self = this;
		var list = Object.keys(this.properties).reduce(function(r, property) {
			if (self.properties[property].tag && self.properties[property].data.FLDCLA && self.properties[property].class && self.properties[property].class.table) {
				r["[F:" + self.properties[property].class.table.data.ABRFIC + "]" + self.properties[property].data.FLDCLA] = self.properties[property].tag;
			}
			return r;
		}, {});
		var tabcor = list || {};
		var actx = glob.context.x3session.actx;
		tabcor["GACTX.USER"] = '"' + actx.$USER(_) + '"';
		tabcor["GACTX.LAN"] = '"' + actx.$LAN(_) + '"';
		tabcor["[V]CST_ANO"] = "false";
		tabcor["[V]CST_AYES"] = "true";
		return tabcor;
	},

	filterRep: function(_, name) {
		if (this.representation._filters === undefined || this.representation._filters[name] === undefined) {
			var filter;
			var option;
			var defaut;
			var setdefaut;
			var self = this; // GH 6167	
			this.representation._filters = {};
			this.representation.data.OPTIONS.forEach_(_, function(_, elt) { // GH 6167		
				if (elt.OPTCOD === name) option = elt;
				if (name == undefined) {
					if (elt.OPTDEF === 2) {
						if (elt.OPTACT !== undefined && activ.getActiv(_, self.supervisor, elt.OPTACT) <= 0) { // GH 6167																		
							setdefaut = 1; // GH 6167
						} // GH 6167
						else { // GH 6167						    
							defaut = elt;
							setdefaut = 2;
						}; // GH 6167
					};
				}
			});
			if (setdefaut == 2 ? option = defaut : option = option);
			if (option) {
				var tabcor = this.filtersTabCor(_);
				this.representation._filters[name] = Jmql.x3ToJmql(tabcor, option.OPTCND);
			}
		}
		return this.representation._filters[name] && this.representation._filters[name]();
	},

	loadResources: function(_, select, max) {
		var fromInstanceToResource = function(self) {
			return function(_, reader, writer) {
				var instance;
				var resource;
				var astatus;
				var cache = self.cache ? self.cache.clone() : undefined;

				self.representation.beforeQuery(_);
				while (instance = reader.read(_)) {
					resource = self.supervisor.new(_, 'Resource', self, instance).bindInstance(instance);
					cache && cache.register(_, resource);
					astatus = resource.afterQuery(_);
					if (astatus !== constants.CST_AERROR) {
						writer.write(_, resource);
					}
				}
				self.representation.afterQuery(_);
			}.bind(this);
		};
		return this.class.queryInstances(_, select, max).transform(fromInstanceToResource(this));
	},

	query: function(_, httpContext, qs) {
		tracerJs.debug && tracerJs.debug(this.facet + " " + JSON.stringify(qs));
		var itemsPerPage = qs.count ? parseInt(qs.count, 10) : 20;
		var _this = this;

		var firstPage = true;
		var orderBy;
		var qsOrderBy = [];
		var oAscDesc = ["", "desc", "asc"];
		var kAscDesc = ["", "lt", "gt"];
		var operators = ["eq", "gt", "lt"];

		// Decode the orderBy contained in the url:
		var qsOrderBy = qs.orderBy ? qs.orderBy.split(',') : [];

		// to which we add the representation index	
		var index = _this.representation.index;
		Object.keys(index).forEach(function(idx) {
			tracerJs.debug && tracerJs.debug("index[" + idx + "]=" + index[idx].name);
			qsOrderBy.push(index[idx].name);
		});

		var properties = [];
		var ascDescDefault;

		orderBy = qsOrderBy.reduce(function(r, item) {
			var items = item.split(' ');
			var property = _this.tag2Property(items[0]);
			if (properties.indexOf(property) < 0) {
				var ascDesc = (items.length > 1) ? items[1] : (ascDescDefault || 'asc');
				ascDescDefault = ascDescDefault || ascDesc;
				r.push({
					property: property,
					ascDesc: ascDesc
				});
				properties.push(property);
			}
			return r;
		}, []);

		var wheres = [];
		//if (qs.filter) {
		var filterRep = this.filterRep(_, qs.filter);
		if (filterRep) {
			var filter = this.mapTags2Properties(filterRep);
			if (filter) wheres.push(filter);
		}
		//}

		if (qs.where) wheres.push(this.sdataFilterToJson(qs.where));

		var actx = glob.context.x3session.actx;
		var rights = actx._x3Rights.getRights(_, actx.$LOGIN(_));

		if (rights._authorizedRepresentations[this.representation.data.CODREP] && rights._authorizedRepresentations[this.representation.data.CODREP]._conditions) {
			if (rights._authorizedRepresentations[this.representation.data.CODREP]._conditions._type = "authorization") {
				tracerJs.debug && tracerJs.debug("add rights where" + JSON.stringify(rights._authorizedRepresentations[this.representation.data.CODREP]._conditions[0]._where));
				wheres.push(this.sdataFilterToJson(rights._authorizedRepresentations[this.representation.data.CODREP]._conditions[0]._where));
			}
		}


		if (qs.key) {
			// Decode the orderBy contained in the url:
			var keyItems = [qs.key];
			var io = qs.key.indexOf('.');
			if (io >= 0) {
				keyItems[0] = qs.key.substring(0, io++);
				keyItems[1] = qs.key.substring(io);
			}
			operators = ["eq", keyItems[0], (keyItems[0] === 'lt') ? 'gt' : 'lt'];

			if (keyItems.length > 1) {
				firstPage = false;
				var keyParts = keyItems[1].split('~');
				var k = 0;

				var tags;
				if (qs.orderBy) {
					tags = qs.orderBy.split(',').reduce(function(r, item) {
						r.push(item.split(' ')[0]);
						return r;
					}, []);
				} else {
					// By default the client doesn't send the orderBy 
					tags = Object.keys(index).reduce(function(r, idx) {
						r.push(index[idx].name.split(' ')[0]);
						return r;
					}, []);
				}

				var args = tags.reduce(function(r, tag) {
					var property = _this.tag2Property(tag);
					r.push({
						property: property,
						value: keyParts[k++]
					});
					return r;
				}, []);

				var exps = [];
				for (var i = 0; i < args.length; i++) {
					var exp = {};
					for (var j = 0, maxJ = (args.length - i); j < maxJ; j++) {
						var k = 1 + (oAscDesc.indexOf(orderBy[0].ascDesc) + oAscDesc.indexOf(orderBy[j].ascDesc)) % 2;
						var operator = operators[Math.floor((j + 1) / maxJ) * k];
						if (operator === 'eq') {
							exp[args[j].property] = args[j].value;
						} else {
							exp[args[j].property] = exp[args[j].property] || {};
							exp[args[j].property]['$' + operator] = args[j].value;
						}
					}
					exps.push(exp);
				}
				wheres.push((exps.length === 1) ? exps[0] : {
					$or: exps
				});
			}
		} else {
			// operators depends on the order by :
			operators = (orderBy[0].ascDesc === 'asc') ? ["eq", "gt", "lt"] : ["eq", "lt", "gt"];
		}
		var ascend = (oAscDesc.indexOf(orderBy[0].ascDesc) + kAscDesc.indexOf(operators[1])) % 2;

		var select = {
			$orderBy: {}
		};
		orderBy.forEach(function(prop) {
			select.$orderBy[prop.property] = (ascend ? -1 : 1) * ((prop.ascDesc === 'asc') ? 1 : -1);
		});

		var self = this;
		select.$params = Object.keys(qs).reduce(function(r, tag) {
			var property = self.tag2PropertyName[tag] || (self.properties[tag] && self.properties[tag].tag);
			if (property) {
				r[property] = qs[tag];
			}
			return r;
		}, {});

		if (wheres.length) {
			select.$query = (wheres.length === 1) ? wheres[0] : {
				$and: wheres
			};
		}


		// (require itemsPerPage+1 items to manage next link 
		if (/^\$(query|lookup)$/.test(this.facet)) {
			var resources = this.loadResources(_, select, itemsPerPage + 1).toArray(_);

			var feed = {
				$itemsPerPage: itemsPerPage,
				$resources: resources.slice(0, itemsPerPage).map_(_, function(_, res) {
					return res.dataNode(_);
				}),
			};
			if (ascend) feed.$resources = feed.$resources.reverse();

			// Add navigation links :
			if (resources.length) {
				var keyFirst = (orderBy[0].ascDesc === 'asc') ? "gt" : "lt";
				var keyLast = (orderBy[0].ascDesc === 'asc') ? "lt" : "gt";
				var links = {
					$first: [keyFirst],
					$last: [keyLast]
				};

				var names = ["$previous", "$next"];
				var keyNext = operators[1];
				var keyPrevious = keyNext === "lt" ? "gt" : "lt";
				if (ascend) names = names.reverse();

				var linkOrderBy = orderBy.reduce_(_, function(_, r, property) {
					if (!firstPage) {
						links[names[0]] = links[names[0]] || [keyPrevious];
						links[names[0]].push(resources[0].instance.get(_, property.property));
					}
					if (resources.length > itemsPerPage) {
						links[names[1]] = links[names[1]] || [keyNext];
						links[names[1]].push(resources[resources.length - 2].instance.get(_, property.property));
					}
					var item = property.property;
					if (property.ascDesc && property.ascDesc === "desc") item += ' ' + property.ascDesc;
					r.push(item);
					return r;
				}, []);

				Object.keys(links).forEach(function(link) {
					feed.$links = feed.$links || {};
					feed.$links[link] = {
						$url: _this.supervisor.baseUrl + "/" + _this.class.name + "?representation=" + _this.representation.name + ".$query",
						$type: "application/json;vnd.sage=syracuse",
					};
					if (!(link === "$first" && links[link][0] === keyFirst)) {
						feed.$links[link].$url += "&key=" + links[link][0];
						if (links[link].length > 1) feed.$links[link].$url += '.' + links[link].slice(1).join('~');
					}

					feed.$links[link].$url += "&orderBy=" + linkOrderBy.join(',');

					if (qs.where) {
						feed.$links[link].$url += "&where=" + encodeURIComponent(qs.where);
					}
				});

			}
			return httpContext.jsonReply(_, 200, feed);
		} else if (this.facet === '$bulk') {
			var dst = bulkWriter(httpContext);
			this.loadResources(_, null, qs.count || Infinity).pipe(_, dst);
		}
	},
	keyExpression: function(_) {
		//return this.class.keyExpression(_);
		if (this.keyItems)
			return this.keyItems.map(function(keyitem) {
				return '{' + keyitem.alias + '}';
			}, this).join('~');
	},
});