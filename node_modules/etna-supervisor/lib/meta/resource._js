"use strict";

var util = require("etna-supervisor/lib/util");
var tuuid = require('etna-engine/lib/runtime/uuid');
var variables = require('etna-engine/lib/runtime/variables');
var tracerJs = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");

var constants = require("etna-supervisor/lib/constants");
var attributes = require("etna-supervisor/lib/attributes");
var baseInstance = require("etna-supervisor/lib/meta/baseInstance");

var InstanceProperty = require("etna-supervisor/lib/instanceProperty").InstanceProperty;
var InstanceCollection = require("etna-supervisor/lib/instanceCollection").InstanceCollection;

var Resource = exports.constructor = baseInstance.defineClass(function(superv, resourceFactory, instance, slots) {
	this.supervisor = superv;
	this.resourceFactory = resourceFactory;
	this.meta = this.resourceFactory.representation;

	if (this.meta) {
		this.clasName = this.meta.data.ABRCLA;
		this.index = this.resourceFactory.representation.class.index;
	}
	this.properties = this.resourceFactory.properties;
	if (instance) {
		this.instance = instance;
		this.instance.parent = this;
	}
	this.$exported = true;
	this.slots = slots || {};
}, null, {
	$$type: {
		get: function() {
			return "Resource";
		}
	},
	dataNode: function(_) {
		var result = {};
		if (this.instance.class.group == null) {
			if (this.instance.class.properties['UPDDATTIM']) {
				this.instance.get(_, 'UPDDATTIM') ? this.instance.get(_, 'UPDDATTIM').toString() : "0000-00-00T00:00:00Z";
			}
		}
		if (this.resourceFactory.$uuid) result.$uuid = this.resourceFactory.$uuid(_, this.instance);
		if (this.resourceFactory.$access) result.$access = this.resourceFactory.$access(_, this.instance);

		var self = this;
		Object.keys(this.properties).filter(function(name) {
			return !self.resourceFactory.properties[name].isExtraRef;
		}).forEach_(_, function(_, name) {
			var prop = this.properties[name];
			var instance = prop.isExtra ? this : this.instance;
			if (prop.collection) {
				if (prop.collection.mappingData && prop.collection.mappingData.TYPLNK === 3) {
					// Special treatment for 1x1 tables :
					var child = instance.get(_, name);
					var rChild = self.supervisor.new(_, 'Resource', prop.targetResourceFactory, child).dataNode(_);

					result = Object.keys(rChild).filter(function(p) {
						return p.charAt(0) !== '$';
					}).reduce(function(r, p) {
						r[p] = rChild[p];
						return r;
					}, result);

				} else {
					var rChild = instance.get(_, name).lines.filter(function(line) {
						return line !== null;
					})
						.map_(_, function(_, child) {
							return self.supervisor.new(_, 'Resource', prop.targetResourceFactory, child).dataNode(_);
						}, this);

					if (!prop.collection.mappingData && prop.collection.nbrPro === 1) {
						// Special treatment for collection with only 1 property :
						result[prop.tag] = Object.keys(rChild).reduce(function(r, p) {
							var childDest;
							var val = Object.keys(rChild[p]).reduce(function(v, name) {
								v.push(rChild[p][name]);
								if (!childDest) childDest = name;
								return v;
							}, []);
							if (val.length === 1)
								r[p] = val[0];
							else {
								r[p] = {};
								r[p][prop.targetResourceFactory.properties[childDest].destLookup] = val[0];
								r[p] = Object.keys(val[1]).reduce(function(o, name) {
									o[name] = val[1][name];
									return o;
								}, r[p]);
							}
							return r;
						}, []);
					} else {
						result[prop.tag] = rChild;
					}
				}
			} else {
				result[prop.tag] = prop.type.toJson(instance.get(_, name), prop.data);
				if (prop._isReference) {
					result[prop.tag + '_REF'] = instance.get(_, name + '_REF');
				} else if (prop.hasLookup) {
					result[prop.tag + '_REF'] = {
						$title: ""
					};
				}
			}
		}, this);
		this.instance.diagnoses.forEach(function(diag) {
			var path = diag.path.split('.');
			var r = result,
				name;
			for (var i = 0; i < path.length - 1; i++) {
				name = path[i];
				r = r[name];
				if (!r || typeof r !== 'object') throw new Error("invalid diagnosis path: " + path.slice(0, i + 1));
			}
			name = path[i];
			r.$properties = r.$properties || {};
			var desc = r.$properties[name] = r.$properties[name] || {};
			var diags = desc.$diagnoses = desc.$diagnoses || [];
			diags.push(diag.dataNode());
		});
		return result;
	},
	clone: function() {
		return new Resource(this.supervisor, this.resourceFactory, this.instance.clone());
	},
	getDelta: function(_, old) {
		var delta = {
			$uuid: this.instance.data.AUUID,
			$etag: this.instance.data.UPDDATTIM,
		};
		Object.keys(this.properties).forEach_(_, function(_, name) {
			var prop = this.properties[name];
			if (prop.collection) {
				// see later
			} else if (prop.isExtra) {
				// see later
			} else {
				var oldValue = old.instance.get(_, name);
				var newValue = this.instance.get(_, name);
				if (oldValue !== newValue) {
					delta[name] = newValue;
				}
			}
		}, this);
		tracerJs.debug && tracerJs.debug("new delta:" + delta);
		return delta;
	},
	applyDelta: function(_, delta) {
		// take snapshot before assigning
		//dbg:console.log("applyDelta to:");
		var self = this;
		var resourceFactory = this.resourceFactory;

		var before = this.clone();
		Object.keys(delta).forEach_(_, function(_, tag) {
			//dbg:console.log("applyDelta tag:" + tag);
			var name = self.resourceFactory.tag2Property(tag);
			//dbg:console.log("applyDelta name:" + name);
			var prop = self.properties[name];

			if (!prop) return console.log("ignoring " + tag + " from delta");
			var v = delta[tag];
			if (v === undefined) return;
			if (prop.collection) {
				// see later
			} else if (prop.isExtra) {
				// see later
			} else {
				//dbg:console.error(name+" set:"+v);
				this.instance.set(_, name, v);
			}
		}, this);
		return this.getDelta(_, before);
	},
	afterQuery: function(_) {
		// First call AQUERY_TRANS_AFTER on the class's instance
		return this.instance.afterQuery(_);
	},
	beforeControl: function(_, operation) {
		var status = this._actionBeforeControl(_, operation);
		return status || this.instance.beforeControl(_, operation);
	},
	afterControl: function(_, operation) {
		var status = this.instance.afterControl(_, operation);
		return status || this._actionAfterControl(_, operation);
	},
	insert: function(_) {
		return this.instance.$AINSERT(_);
	},
	update: function(_) {
		return this.instance.$AUPDATE(_);
	},
	read: function(_, key) {
		this.key = key;
		tracerJs.debug && tracerJs.debug("resource.load " + key);
		this.instance = this.supervisor.new(_, 'Instance', this.resourceFactory.representation.class, this);
		var status = this.instance.read(_, key);
		return status;
	},
	delete: function(_) {
		return this.instance.delete(_);
	}
});