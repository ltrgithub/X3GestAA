"use strict";

var util = require("etna-supervisor/lib/util");
var tuuid = require('etna-engine/lib/runtime/uuid');
var variables = require('etna-engine/lib/runtime/variables');
var tracerJs = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");
var attributes = require("etna-supervisor/lib/attributes");

var baseInstance = require("etna-supervisor/lib/meta/baseInstance");

var InstanceProperty = require("etna-supervisor/lib/instanceProperty").InstanceProperty;
var InstanceCollection = require("etna-supervisor/lib/instanceCollection").InstanceCollection;

var Resource = exports.constructor = baseInstance.defineClass(function(superv, resourceFactory, instance, slots) {
	this.supervisor = superv;
	this.resourceFactory = resourceFactory;
	this.instance = instance;
	this.$exported = true;
	this.slots = slots || {};
}, null, {
	init: function(_) {
		return this;
	},
	slot: function(_, name) {
		if (this.slots[name]) return this.slots[name];
		if (this.resourceFactory.properties[name]) {
			this.slots[name] = this.resourceFactory.properties[name].createInstance(this);
			return this.slots[name];
		}
		throw new Error(" slot property not found: " + name);
	},
	get: function(_, name, raw) {
		tracerJs.debug && tracerJs.debug("get " + name);
		if (name === this.resourceFactory.representation.data.ABRCLA) return this.instance;

		if (['AERROR', 'ACTX'].indexOf(name) >= 0) return this.slots[name];

		try {
			var s = this.slot(_, name);
			return s.get(_, raw);
		} catch (e) {
			//External attributes ?
			var valattr = this.getAttribute("$" + name);
			if (valattr !== undefined) return variables.x3Val(valattr);
			throw new Error(" get property not found: " + name + JSON.stringify(e));
		}
	},
	set: function(_, name, value, raw) {

		if (name === this.resourceFactory.representation.data.ABRCLA) throw new Error("invalid  path: " + name);
		try {
			return this.slot(_, name).set(_, value, raw);
		} catch (e) {
			//External attributes ?
			if (this.setAttribute("$" + name, value) !== null) return;
			console.log("erreur " + name);
			//throw new Error("Cannot set property :" +name+  JSON.stringify(e));

		}
	},
	dataNode: function(_) {
		var result = {};
		if (this.instance.class.group == null) {
			if (this.instance.class.properties['UPDDATTIM']) {
				this.instance.get(_, 'UPDDATTIM') ? this.instance.get(_, 'UPDDATTIM').toString() : "0000-00-00T00:00:00Z";
			}
		}
		if (this.resourceFactory.$uuid) result.$uuid = this.resourceFactory.$uuid(_, this.instance);
		if (this.resourceFactory.$access) result.$access = this.resourceFactory.$access(_, this.instance);

		var self = this;
		Object.keys(this.resourceFactory.properties).filter(function(name) {
			return !self.resourceFactory.properties[name].isExtraRef;
		}).forEach_(_, function(_, name) {
			var prop = this.resourceFactory.properties[name];
			if (prop.collection) {
				var rChild = this.instance.get(_, name).lines.map_(_, function(_, child) {
					return this.supervisor.new(_, 'Resource', prop.targetResourceFactory, child).dataNode(_);
				}, this);
				if (prop.collection.mappingData && prop.collection.mappingData.TYPLNK === 3) {
					// Special treatment for 1x1 tables :
					result = Object.keys(rChild[0]).filter(function(p) {
						return p.charAt(0) !== '$';
					})
						.reduce(function(r, p) {
							r[p] = rChild[0][p];
							return r;
						}, result);
				} else if (!prop.collection.mappingData && prop.collection.nbrPro === 1) {
					// Special treatment for collection with only 1 property :
					result[prop.tag] = Object.keys(rChild).reduce(function(r, p) {
						var childDest;
						var val = Object.keys(rChild[p]).reduce(function(v, name) {
							v.push(rChild[p][name]);
							if (!childDest) childDest = name;
							return v;
						}, []);
						if (val.length === 1)
							r[p] = val[0];
						else {
							r[p] = {};
							r[p][prop.targetResourceFactory.properties[childDest].destLookup] = val[0];
							r[p] = Object.keys(val[1]).reduce(function(o, name) {
								o[name] = val[1][name];
								return o;
							}, r[p]);
						}
						return r;
					}, []);
				} else {
					result[prop.tag] = rChild;
				}
			} else if (prop.isExtra) {
				// representation-level property			
				//result[prop.tag] = this.get(_, prop.data.CODFLD);	 GH 5897			
				result[prop.tag] = prop.type.toJson(this.get(_, prop.data.CODFLD), prop.data); // GH 5897
				if (prop._isReference) {
					result[prop.tag + '_REF'] = this.get(_, prop.data.CODFLD + '_REF');
				} else if (prop.hasLookup) {
					result[prop.tag + '_REF'] = {
						$title: ""
					};
				}
			} else {
				result[prop.tag] = prop.type.toJson(this.instance.get(_, name), prop.data);
				if (prop._isReference) {
					result[prop.tag + '_REF'] = this.instance.get(_, name + '_REF');
				} else if (prop.hasLookup) {
					result[prop.tag + '_REF'] = {
						$title: ""
					};
				}
			}
		}, this);
		this.instance.diagnoses.forEach(function(diag) {
			var path = diag.path.split('.');
			var r = result,
				name;
			for (var i = 0; i < path.length - 1; i++) {
				name = path[i];
				r = r[name];
				if (!r || typeof r !== 'object') throw new Error("invalid diagnosis path: " + path.slice(0, i + 1));
			}
			name = path[i];
			r.$properties = r.$properties || {};
			var desc = r.$properties[name] = r.$properties[name] || {};
			var diags = desc.$diagnoses = desc.$diagnoses || [];
			diags.push(diag.dataNode());
		});
		return result;
	},
	clone: function() {
		return new Resource(this.supervisor, this.resourceFactory, this.instance.clone());
	},
	getDelta: function(_, old) {
		var delta = {
			$uuid: this.instance.data.AUUID,
			$etag: this.instance.data.UPDDATTIM,
		};
		Object.keys(this.resourceFactory.properties).forEach_(_, function(_, name) {
			var prop = this.resourceFactory.properties[name];
			if (prop.collection) {
				// see later
			} else if (prop.isExtra) {
				// see later
			} else {
				var oldValue = old.instance.get(_, name);
				var newValue = this.instance.get(_, name);
				if (oldValue !== newValue) {
					delta[name] = newValue;
				}
			}
		}, this);
		console.log("GET DELTA RETURNS");
		console.log(delta);
		return delta;
	},
	applyDelta: function(_, delta) {
		// take snapshot before assigning
		var before = this.clone();
		Object.keys(delta).forEach_(_, function(_, name) {
			var prop = this.resourceFactory.properties[name];
			if (!prop) return console.log("ignoring " + name + " from delta");
			var v = delta[name];
			if (v === undefined) return;
			if (prop.collection) {
				// see later
			} else if (prop.isExtra) {
				// see later
			} else {
				this.instance.set(_, name, v);
			}
		}, this);
		return this.getDelta(_, before);
	},
	scripts: function(_) {
		return this.resourceFactory.representation.scripts(_);
	},
	$methods: function(_, action) {
		return this.instance.$methods(_, action);
	},
	$properties: function(_, action, property) {
		return this.instance.$properties(_, action, property);
	}
});