"use strict";

var util = require("etna-supervisor/lib/util");
var tuuid = require('etna-engine/lib/runtime/uuid');
var variables = require('etna-engine/lib/runtime/variables');
var tracerJs = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");

var constants = require("etna-supervisor/lib/constants");
var attributes = require("etna-supervisor/lib/attributes");
var baseInstance = require("etna-supervisor/lib/meta/baseInstance");

var InstanceProperty = require("etna-supervisor/lib/instanceProperty").InstanceProperty;
var InstanceCollection = require("etna-supervisor/lib/instanceCollection").InstanceCollection;

var Resource = exports.constructor = baseInstance.defineClass(function(superv, resourceFactory, instance, slots) {
	this.supervisor = superv;
	this.resourceFactory = resourceFactory;
	this.meta = this.resourceFactory.representation;

	if (this.meta) {
		this.clasName = this.meta.data.ABRCLA;
		this.index = this.resourceFactory.representation.class.index;
	}
	this.properties = this.resourceFactory.properties;
	if (instance) {
		this.instance = instance;
		this.instance.$parent = this;
	}
	this.$exported = true;
	this.slots = slots || {};
}, null, {
	$$type: {
		get: function() {
			return "Resource";
		}
	},
	dataNode: function(_, full) {
		full = (full !== undefined) ? full : true; // Default behavior = full generation
		var result = {};
		if (this.instance.class.group == null) {
			if (this.instance.class.properties['UPDDATTIM']) {
				this.instance.get(_, 'UPDDATTIM') ? this.instance.get(_, 'UPDDATTIM').toString() : "0000-00-00T00:00:00Z";
			}
		}
		//if (this.resourceFactory.$uuid) result.$uuid = this.resourceFactory.$uuid(_, this.instance);
		result.$uuid = (this.instance) ? this.instance.$uuid : this.$uuid;

		if (this.resourceFactory.$access) result.$access = this.resourceFactory.$access(_, this.instance);

		var self = this;
		Object.keys(this.properties).filter(function(name) {
			return !self.resourceFactory.properties[name].isExtraRef;
		}).forEach_(_, function(_, name) {
			var prop = this.properties[name];
			var instance = prop.isExtra ? this : this.instance;
			if (prop.collection) {
				if (prop.collection.mappingData && prop.collection.mappingData.TYPLNK === 3) {
					// Special treatment for 1x1 tables :
					var child = instance.get(_, name);
					var rChild = self.supervisor.new(_, 'Resource', prop.targetResourceFactory, child).dataNode(_, full);

					result = Object.keys(rChild).filter(function(p) {
						return p.charAt(0) !== '$';
					}).reduce(function(r, p) {
						r[p] = rChild[p];
						return r;
					}, result);

				} else {
					var lineIndex = 0;
					var rChild = instance.get(_, name).lines.filter(function(line) {
						return line !== null;
					})
						.map_(_, function(_, child) {
							var resLine = self.supervisor.new(_, 'Resource', prop.targetResourceFactory, child).dataNode(_, full);
							resLine.$index = lineIndex++;
							return resLine;
						}, this);

					if (!prop.collection.mappingData && prop.collection.nbrPro === 1) {
						// Special treatment for collection with only 1 property :
						result[prop.tag] = Object.keys(rChild).reduce(function(r, p) {
							var childDest;
							var val = Object.keys(rChild[p]).reduce(function(v, name) {
								v.push(rChild[p][name]);
								if (!childDest) childDest = name;
								return v;
							}, []);
							if (val.length === 1)
								r[p] = val[0];
							else {
								r[p] = {};
								r[p][prop.targetResourceFactory.properties[childDest].destLookup] = val[0];
								r[p] = Object.keys(val[1]).reduce(function(o, name) {
									o[name] = val[1][name];
									return o;
								}, r[p]);
							}
							return r;
						}, []);
					} else {
						result[prop.tag] = rChild;
					}
				}
			} else {
				var attributes;
				var slot = instance.slot(_, name);
				var value = slot._get(_, true);
				var diagnoses = slot.getDiagnoses(_);
				var snapshot = instance.$syssnapshot;

				if (!full && snapshot !== undefined) {
					// Compare value and old value :

					var oldValue = snapshot.get(_, name);
					value = (oldValue.x3Compare(value) !== 0) ? value : undefined;

					// Compare old and current attributes;
					attributes = slot.getDeltaAttributes(_, snapshot.slot(_, name));

					// Compare old and current diagnoses
					var snapSlot = snapshot.slot(_, name);
					var oldDiagnoses = snapSlot.getDiagnoses(_);
					// set diagnoses to null if diagnoses were deleted:
					diagnoses = (oldDiagnoses.length && !diagnoses.length) ? null : diagnoses;
				} else {
					// Get all attributes :
					attributes = slot.getAttributes(_);
				}
				// Manage the value
				if (value !== undefined) {
					// Compute the value to be stored in the JSON: 
					// can be undefined for CLOBs andd BLOBs 
					value = prop.type.toJson(value, prop.data);
					if (value !== undefined) {
						result[prop.tag] = value;
						if (prop._isReference) {
							result[prop.tag + '_REF'] = instance.get(_, name + '_REF');
						} else if (prop.hasLookup) {
							result[prop.tag + '_REF'] = {
								$title: ""
							};
						}
					}
				}
				// Manage attributes :
				if (Object.keys(attributes).length) {
					result.$properties = result.$properties || {};
					result.$properties[prop.tag] = {
						$attributes: attributes
					};
				}
				// Manage the errors :
				if (diagnoses === null || diagnoses.length) {
					result.$properties = result.$properties || {};
					var property = result.$properties[prop.tag] = result.$properties[prop.tag] || {};
					property.$diagnoses = (diagnoses === null) ? null :
						diagnoses.map(function(diagnose) {
							return diagnose.dataNode();
						});
				}
			}
		}, this);
		var diagnoses = this.diagnoses;
		if (this.instance) diagnoses = diagnoses.concat(this.instance.diagnoses);
		diagnoses.forEach(function(diag) {
			result.$diagnoses = result.$diagnoses || [];
			result.$diagnoses.push(diag.dataNode());
		});
		return result;
	},
	clone: function() {
		return new Resource(this.supervisor, this.resourceFactory, this.instance.clone());
	},
	getChildren: function() {
		return [this.instance];
	},
	applyDelta: function(_, context, delta, path) {
		// take snapshot before assigning
		this.snapshots();
		if (path !== undefined) {
			// Direct modification of a property( text for instance)
			var properties = path.split("/");
			var instance = this;
			for (var i = 1; i < properties.length; i++) { // Element 0 is empty
				if (i === (properties.length - 1)) {
					// Last part of the path : set it
					var slot = instance.set(_, properties[i], delta);
					if (slot.isClob) {
						// Set attributes :
						slot.$isLoaded = true;
						slot.$contentType = context.getHeaderField("content-type");
						slot.$filename = context.getHeaderField("x-file-name");
					}
				} else {
					// Get the next element :
					instance = instance.get(_, properties[i], true);
				}
			}
		} else {
			var resourceFactory = this.resourceFactory;
			var self = this;
			Object.keys(delta).forEach_(_, function(_, tag) {
				/*dbg*/
				console.log("applyDelta tag:" + tag);
				var name = self.resourceFactory.tag2Property(tag);
				/*dbg*/
				console.log("applyDelta name:" + name);
				var prop = self.properties[name];
				if (!prop) return; // console.log("ignoring " + tag + " from delta");

				var v = delta[tag];
				if (v === undefined) return;

				var instance = prop.isExtra ? this : this.instance;
				if (prop.collection) {
					// see later
					/*dbg*/
					console.log("applyDelta " + tag + " is a collection");
					var collection = instance.get(_, name);
					v.forEach_(_, function(_, deltaLine) {
						var uuid = deltaLine.$uuid.x3ToUuid();

						/*dbg*/
						console.log("applyDelta line uuid:" + uuid.x3ToString());
						var line = collection.find("$uuid", uuid);
						if (line === null) {
							/*dbg*/
							console.log("add Line");
							collection.add(_, deltaLine.$index ? (deltaLine.$index + 1) : constants.CST_ALASTPOS, uuid);
						} else {
							/*dbg*/
							console.log("applyDelta to Line " + line.$uuid);
							line.applyDelta(_, context, deltaLine);
						}

					});

				} else {
					/*dbg*/
					console.error("applyDelta " + prop.isExtra + " instance.set " + name + " v:" + v);
					instance.set(_, name, v);
				}
			}, this);
		}
	},
	afterQuery: function(_) {
		// First call AQUERY_TRANS_AFTER on the class's instance
		return this.instance.afterQuery(_);
	},
	beforeControl: function(_, operation) {
		var status = this._actionBeforeControl(_, operation);
		return status || this.instance.beforeControl(_, operation);
	},
	afterControl: function(_, operation) {
		var status = this.instance.afterControl(_, operation);
		return status || this._actionAfterControl(_, operation);
	},
	insert: function(_) {
		return this.instance.$AINSERT(_);
	},
	update: function(_) {
		return this.instance.$AUPDATE(_);
	},
	read: function(_, key) {
		this.key = key;
		tracerJs.debug && tracerJs.debug("resource.load " + key);
		this.instance = this.supervisor.new(_, 'Instance', this.resourceFactory.representation.class, this);
		var status = this.instance.read(_, key);
		return status;
	},
	delete: function(_) {
		return this.instance.delete(_);
	}
});