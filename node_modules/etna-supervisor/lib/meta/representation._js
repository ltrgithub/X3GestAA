"use strict";

var util = require("etna-supervisor/lib/util");
var Jmql = require("etna-engine/lib/jmqlgen");
var Sdata = require("etna-engine/lib/sdatagen");
var tuuid = require('etna-engine/lib/runtime/tuuid');
var activ = require("etna-supervisor/lib/meta/activ._js");
var glob = require('streamline/lib/globals');
var bcd = require('etna-engine/lib/runtime/bcd');

var tracerJs = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");

// order of keys matches ENAFAC values so that we can fill FacetIds
var FACETS = {
	$details: {
		id: 0,
		prefix: "DET",
		mainMenu: "$edit"
	},
	$edit: {
		id: 1,
		prefix: "EDI",
		mainMenu: "$save"
	},
	$query: {
		id: 2,
		prefix: "QRY",
		mainMenu: "$create"
	},
	$lookup: {
		id: 3,
		prefix: "LOK",
	},
	$summary: {
		id: 4,
		prefix: "SUM",
	},
	$bulk: { // for now, same as query
		id: 2,
		prefix: "QRY",
	},
};


var deviceCodes = {
	desktop: 1,
	phone: 2,
	tablet: 3,
};

module.exports = {
	collectionName: 'ASHW',
	keyName: 'CODREP',
	constructor: util.defineClass(function(superv, data) {
		this.supervisor = superv;
		data.PROPERTIES.forEach(function(prop) {
			if (prop.NUMFLD && typeof prop.NUMFLD === 'string') {
				if (!isNaN(prop.NUMFLD) && bcd.toDouble(bcd.fromString(prop.NUMFLD)) > 0) prop.NUMFLD = bcd.toDouble(bcd.fromString(prop.NUMFLD));
				else delete prop.NUMFLD;
			}
			if (prop.LONG && typeof prop.LONG === 'string') {
				if (!isNaN(prop.LONG) && bcd.toDouble(bcd.fromString(prop.LONG)) > 0) prop.LONG = bcd.toDouble(bcd.fromString(prop.LONG));
				else delete prop.LONG;
			}
		});
		this.data = data;
	}, null, {
		init: function(_) {
			if (this.resourceFactories) return;
			this.resourceFactories = {};
			this.class = this.class || this.supervisor.load(_, 'Class', this.data.CODCLA);
			if (!this.class) throw new Error("class not found: " + this.data.CODCLA);
			this.exportedProperties = this.data.EXPORTED_PROPERTIES.sort(function(ep1, ep2) {
				return ep1.ORDPRO - ep2.ORDPRO;
			}).map_(_, function(_, data) {
				return this.supervisor.new(_, 'ExportedProperty', this, data);
			}, this);
			if (!this.qdevice || this.qdevice === '') {
				switch (this.data.TYPMSKREP) {
					case 2:
						this.qdevice = 'phone';
						break;
					case 3:
						this.qdevice = 'tablet';
						break;
					default:
						this.qdevice = 'desktop';
						break;
				}
			}
			return this;
		},
		prepareLinks: function(_) {
			if (this._preparedLinks) return;
			var self = this;
			var comp = "44444444444444444444";
			// Get references of replacement links
			var LINKS_REM_REF = self.data.LINKS.filter(function(link) {
				return link.REMSTDLNK !== undefined && link.REMSTDLNK !== "" && link.ENALNK === 2 && link.FLGSTDLNK === 2;
			}).reduce(function(r, lk1) {
				var tab = self.data.LINKS.filter(function(lk2) {
					return lk2.CODLNK === lk1.REMSTDLNK && lk2.ANCLNK === lk1.ANCLNK && lk2.AFFLNK === lk1.AFFLNK && lk2.ENALNK === 2;
				});
				if (tab && tab[0]) r[lk1.AFFLNK + "/" + lk1.ANCLNK + "/" + lk1.REMSTDLNK] = tab[0];
				return r;
			}, {});
			var LINKS_OK = {};
			self.data.LINKS.filter(function(link) {
				//get all except LINKS_REM_REF
				return link.ENALNK === 2 && LINKS_REM_REF[link.AFFLNK + "/" + link.ANCLNK + "/" + link.CODLNK] === undefined;
			}).forEach_(_, function(_, lk1) {
				var link;
				if (lk1.REMSTDLNK > "") {
					var codRem = lk1.AFFLNK + "/" + lk1.ANCLNK + "/" + lk1.REMSTDLNK;
					if (LINKS_REM_REF[codRem]) link = util.clone(LINKS_REM_REF[codRem]);
					else return;
					if (lk1.ATTLNK > 1 && link.ATTLNK === 1)
						link.ATTLNK = lk1.ATTLNK;
					if (lk1.FLGSTDLNK === 2) link.FLGSTDLNK = 2;
					if (lk1.MENLNK) link.MENLNK = lk1.MENLNK;
					if (lk1.ORDLNK) link.ORDLNK = lk1.ORDLNK;
				} else {
					link = lk1;
				}
				if (link.ACVLNK && activ.getActiv(_, self.supervisor, link.ACVLNK) <= 0) return;
				if (link.ATTLNK > 1 && link.FLGSTDLNK === 2) {
					var tab = self.data.LINKS.filter(function(lk2) {
						return lk2.ATTLNK === link.ATTLNK && lk2.ENALNK === 2 && lk2.FLGSTDLNK === 1 && lk2.AFFLNK === link.AFFLNK && lk2.ANCLNK === link.ANCLNK && lk2.CODLNK !== link.CODLNK && lk2.CODLNK !== lk1.CODLNK;
					});
					if (tab && tab[0]) {
						link.ATTLNK = 1;
						link.FLGSTDLNK = 1;
					}
				}
				if (link.TYPLNK === 1) {
					var repr;
					if (link.REPLNK === self.name)
						repr = self;
					else
						repr = self.supervisor.load(_, 'Representation', link.REPLNK);
					if (!repr) return;
					if (repr.data.CODACT && activ.getActiv(_, repr.supervisor, repr.data.CODACT) <= 0) return;
					if (repr.class) {
						if (repr.class.data.CODACT && activ.getActiv(_, repr.supervisor, repr.class.data.CODACT) <= 0) return;
						switch (link.CMPLNK) {
							case 1: // Cr�er une fiche
								if (!repr.isFacetEnabled("$edit") || !repr.isBehaviourEnabled(1)) return;
								break;
							case 2: // Afficher d�tail
								if (!repr.isFacetEnabled("$details")) return;
								break;
							case 3: // Modifier une fiche
								if (!repr.isFacetEnabled("$edit") || (!repr.isBehaviourEnabled(1) && !repr.isBehaviourEnabled(2))) return;
								break;
							case 4: // Supprimer une fiche
								if (!repr.isBehaviourEnabled(3)) return;
								break;
							case 5: // Afficher liste
								if (!repr.isFacetEnabled("$query")) return;
								break;
							case 6: // Dupliquer une fiche
								if (!repr.isFacetEnabled("$edit") || !repr.isBehaviourEnabled(1)) return;
								break;
							case 7: // Afficher dans Excel
								if (!repr.isBehaviourEnabled(5)) return;
								break;
							case 8: // Lister dans Excel
								if (!repr.isBehaviourEnabled(5)) return;
								break;
							case 9: // S�lection
								if (!repr.isFacetEnabled("$lookup")) return;
								break;
							case 10: // Afficher r�sum�
								if (!repr.isFacetEnabled("$summary")) return;
								break;
							case 11: // Afficher en PDF
								if (!repr.isBehaviourEnabled(4)) return;
								break;
							case 12: // Lister en PDF
								if (!repr.isBehaviourEnabled(4)) return;
								break;
							case 13: // Afficher dans Word
								if (!repr.isBehaviourEnabled(6)) return;
								break;
							case 14: // Lister dans Word
								if (!repr.isBehaviourEnabled(6)) return;
								break;
							case 15: // Publiposter fiche
								if (!repr.isBehaviourEnabled(7)) return;
								break;
							case 16: // Publiposter liste
								if (!repr.isBehaviourEnabled(7)) return;
								break;
						}
					}
				}
				if (link.ATTLNK > 1) link.FLGSTDLNK = 2;
				link.oCODLNK = link.CODLNK;
				link.oAFFLNK = link.AFFLNK;
				link.CMPLNK = link.CMPLNK || 0;
				var codLnk = link.AFFLNK + "/" + link.ANCLNK + "/" + link.CODLNK;
				LINKS_OK[codLnk] = link;
				if (link.AFFLNK === 5 && (link.DETLNK === 2 || link.EDILNK === 2 || link.SUMLNK === 2)) {
					link = util.clone(LINKS_OK[codLnk]);
					LINKS_OK[codLnk].DETLNK = 1;
					LINKS_OK[codLnk].EDILNK = 1;
					LINKS_OK[codLnk].SUMLNK = 1;
					link.AFFLNK = 4;
					link.QRYLNK = 1;
					link.LOKLNK = 1;
					link.CODLNK = link.oCODLNK + "_LIG" + comp.substr(0, 12 - link.oCODLNK.length);
					//link.CODLNK = link.oCODLNK + "_LIG" + (new Array(12 - link.oCODLNK.length+1)).join("4");
					LINKS_OK[link.AFFLNK + "/" + link.ANCLNK + "/" + link.CODLNK] = link;
				}
			});
			self.data.LINKS = Object.keys(LINKS_OK).reduce(function(r, lk1) {
				r.push(LINKS_OK[lk1]);
				return r;
			}, []);
			self._preparedLinks = true;
		},
		name: {
			get: function() {
				return this.data.CODREP;
			}
		},
		title: function(_, lan) {
			return this.supervisor.loadText(_, this.data.INTREP, lan);
		},
		table: {
			get: function() {
				return this.class.table;
			}
		},
		index: {
			get: function() {
				if (this._index === undefined) {
					//By default:
					var descript = this.data.DESCRIPT;
					this._index = this.class.index;
					if (descript && descript.length) {
						var match = descript.match(/[-+]?\w+/g);
						if (match) {
							this._index = [];
							for (var i = 0; i < match.length; i++) {
								var name = match[i];
								switch (name.charAt(0)) {
									case '+':
										name = name.substring(1) + " asc";
										break;
									case '-':
										name = name.substring(1) + " desc";
										break;
								}
								this._index[i] = {
									name: name
								};
							}
						}
					}
				}
				return this._index;
			}
		},
		isFacetEnabled: function(facet) {
			return this.data.ENAFAC[FACETS[facet].id] === 2;
		},
		isBehaviourEnabled: function(no7968) {
			return this.data.ENACOM[no7968 - 1] === 2;
		},
		check: function(_, facet) {
			if (this.data.CODACT && activ.getActiv(_, this.supervisor, this.data.CODACT) <= 0)
				throw new util.HttpError(406, this.supervisor.loadMess(_, 140, 22) + ' ' + this.data.CODREP + " (" + this.data.CODACT + ")");
			if (facet) {
				if (!this.isFacetEnabled(facet))
					throw new util.HttpError(406, this.supervisor.loadMessParams(_, 149, 14, facet, this.data.CODREP));
			}
			this.class.check(_, facet);
		},
		checkDevice: function(device) {
			var code = deviceCodes[device];
			if (code != null) {
				if (this.data.TYPMSKREP === 2) return; // keep unit test happy (mobile representation always accepted?)
				if (code !== this.data.TYPMSKREP) throw new util.HttpError(406, "device mismatch: " + device);
			} else {
				if (device) throw new util.HttpError(415, "unknown device: " + device);
			}
		},
		scripts: function(_) {
			if (this._scripts) return this._scripts;
			if (this.data.CODTRT) {
				this._scripts = this.data.CODTRT.map_(_, function(_, codtrt) {
					return {
						name: codtrt,
						body: this.supervisor.loadScript(_, codtrt)
					};
				}, this);
			} else {
				this._scripts = [];
			}
			return this._scripts;
		},
		invokeScripts: function(_, instance, action, $curpro, $curpth, values) {
			util.invokeScripts(_, this, instance, action, $curpro, $curpth, values);
		},
		resourceFactory: function(_, facet) {
			var factory = this.resourceFactories[facet];
			if (factory) return factory;
			this.prepareLinks(_);
			var factory = this.supervisor.new(_, 'ResourceFactory', this, facet, [], this.class);
			this.resourceFactories[facet] = factory;
			this.resourceFactories[facet].keyItems = [];

			var facetFlagLNK = FACETS[facet].prefix + "LNK";
			var facetFlagPRO = FACETS[facet].prefix + "PRO";

			this.resourceFactories[facet].$uuid = function(_, instance) {
				return instance.class.properties['AUUID'] ? instance.get(_, 'AUUID') : tuuid.generate();
			};

			this.exportedProperties.filter(function(expprop) {
				return expprop.data[facetFlagPRO] === 2;
			}).forEach_(_, function(_, exppro) {
				var path = exppro.data.CODPRO.split('.');
				var container = this;
				var im = this.class;
				var f = factory,
					i = 0,
					prop;
				if (path[0] === this.data.ABRCLA) {
					container = this.class;
					i++;
				}
				for (; i < path.length - 1; i++) {
					var coln = container.collection(path[i]);
					if (!coln) throw new Error("path does not match collection: " + path.slice(0, i + 1));
					if (!(prop = f.properties[path[i]])) {
						prop = container.property(path[i]).clone(this);
						prop.resourceFactory = f;
						prop.collection = coln;
						prop.tag = path.slice(0, i + 1).join('');
						f.properties[path[i]] = prop;
					}
					im = coln.class;
					if (!im) return console.error("ignoring collection " + path.slice(0, i + 1));
					container = im;
					f = prop.targetResourceFactory || (prop.targetResourceFactory = this.supervisor.new(_, 'ResourceFactory', this, facet, path.slice(0, i + 1), im));
				}
				prop = im.properties[path[i]];
				if (prop) {
					prop = prop.clone(this);
					prop.resourceFactory = f;
				} else if (i === 0) {
					var propData = util.find(this.data.PROPERTIES, 'CODFLD', path[i]);
					if (!propData) throw new Error("representation property not found: " + path);
					prop = this.supervisor.new(_, 'Property', this, propData);
					prop.resourceFactory = factory;
					prop.isExtra = true;
				} else {
					throw new Error("property not found: " + path);
				}
				prop.exportedProperty = exppro;
				prop.tag = exppro.data.ALIAS;
				prop.belongsToKey = f.class.keyItems.indexOf(path[i]) >= 0;
				prop.isKey = (f.class.keyItems.length === 1 && prop.belongsToKey);
				if (prop.resourceFactory && prop.resourceFactory.keyItems && prop.belongsToKey === true) {
					prop.resourceFactory.keyItems.push({
						alias: prop.tag,
						prop: path[i]
					});
				}
				prop.hasLookup = !! (prop.type.data.INDREF);
				if (!prop.hasLookup) {
					// looking into current facet is too restrictive. We have to look into all.
					// so we cannot use prop.links because it is filtered by facet
					var self = this;
					prop.hasLookup = self.data.LINKS.some(function(linkData) {
						return linkData.ANCLNK === prop.exportedProperty.data.CODPRO && linkData.AFFLNK === 1 && linkData.ATTLNK === 3 && linkData[facetFlagLNK] === 2 && !(prop.isKey && linkData.REPLNK === self.name); // ignore if key property that points to current representation
						//		&& !(prop.isKey && linkData.REPLNK === self.name); // ignore if key property that points to current representation
					});
				}

				prop._isReference = prop.hasLookup && prop.isReference(_);

				tracerJs.debug && tracerJs.debug("representation." + prop.tag + " hasLookup  :" + prop.hasLookup);
				tracerJs.debug && tracerJs.debug("representation." + prop.tag + " isReference:" + prop._isReference + " (" + prop.tag + ")");



				f.properties[path[i]] = prop;
				exppro.tag = prop.tag;
			}, this);

			if (facet === "$edit") {
				var LINKS_SAVE = {};
				var LINKS_ABORT = {};
				this.data.LINKS.filter(function(link) {
					return link.ENALNK === 2 && link.FLGSTDLNK === 2 && link.TYPLNK === 1 && link.AFFLNK > 3;
				}).forEach_(_, function(_, link) {
					if (link.AFFLNK === 4 && link.TYPLNK === 1 && link.CMPLNK === 5) { //Query
						var l = this.supervisor.new(_, 'Link', factory, link);
						//prepare keys+params
						l.prepareKeyparams(this);
						LINKS_SAVE["$query"] = l;
						LINKS_ABORT["$query"] = l;
					} else if ((link.AFFLNK === 4 || link.AFFLNK === 5) && link.TYPLNK === 1 && link.CMPLNK === 2 && link.ATTLNK > 1) { //Detail
						var l = this.supervisor.new(_, 'Link', factory, link);
						//prepare keys+params
						l.prepareKeyparams(this);
						LINKS_SAVE["$details"] = l;
						LINKS_ABORT["$details"] = l;
					} else if ((link.AFFLNK === 4 || link.AFFLNK === 5) && link.TYPLNK === 1 && link.CMPLNK === 3) { //Edit
						var l = this.supervisor.new(_, 'Link', factory, link);
						//prepare keys+params
						l.prepareKeyparams(this);
						LINKS_SAVE["$edit"] = l;
					}
				}, this);
			}
			this.data.LINKS.filter(function(link) {
				return link.ENALNK === 2 && link[facetFlagLNK] === 2;
			}).forEach_(_, function(_, link) {
				var path = (link.ANCLNK || "").split('.');
				var f = factory;
				var p = null;
				if (path[0] === this.data.ABRCLA) {
					path.shift();
				}
				for (var i = 0; i < path.length - 1; i++) {
					p = f.properties[path[i]];
					if (!p) throw new Error("bad anchor path: " + path.slice(0, i + 1));
					f = p.targetResourceFactory;
					if (!f) throw new Error("bad anchor path: " + path.slice(0, i + 1));
				}
				var anchor;
				switch (link.AFFLNK) {
					case 1:
						// property
						anchor = f.properties[path[i]];
						// anchor is null on ATYPE/NOLIB: query facet contains link but does not contain property!!!
						//if (!anchor) return console.log("*** BAD LINK ANCHOR: " + path), console.log(link);
						if (!anchor) return;
						break;
					case 2:
						// collection element
						anchor = f;
						break;
					case 3:
						// collection -- ???
						anchor = p;
						break;
					case 4:
						// page
						anchor = factory.page;
						break;
					case 5:
						// query row
						anchor = factory;
						break;
				}
				if (!anchor) throw new Error("bad anchor path: " + path);
				anchor.links = anchor.links || {};
				var l = this.supervisor.new(_, 'Link', anchor, link);
				anchor.links[l.name] = l;
				//links for actions save and abort
				if (facet === "$edit" && link.FLGSTDLNK === 2) {
					if (link.AFFLNK === 4 && link.TYPLNK === 1 && link.CMPLNK === 17) { //Save
						l.links = LINKS_SAVE;
					} else if (link.AFFLNK === 4 && link.TYPLNK === 1 && link.CMPLNK === 18) { //Abort
						l.links = LINKS_ABORT;
					}
				}
				//prepare keys+params
				l.prepareKeyparams(this);
			}, this);
			return factory;
		},
		filtersProto: function(_, resourceFactory) {
			var list = Object.keys(resourceFactory.properties).reduce(function(r, property) {
				if (resourceFactory.properties[property].tag && resourceFactory.properties[property].data.FLDCLA && resourceFactory.properties[property].class && resourceFactory.properties[property].class.table) {
					r["[F:" + resourceFactory.properties[property].class.table.data.ABRFIC + "]" + resourceFactory.properties[property].data.FLDCLA] = resourceFactory.properties[property].tag;
				}
				return r;
			}, {});
			var tab = list || {};
			var actx = glob.context.x3session.actx;
			tab["GACTX.USER"] = '"' + actx.$USER(_) + '"';
			tab["GACTX.LAN"] = '"' + actx.$LAN(_) + '"';
			tab["[V]CST_ANO"] = "false";
			tab["[V]CST_AYES"] = "true";

			var self = this;
			var myopt = {};
			this.data.OPTIONS.forEach_(_, function(_, opt) {
				var cond = true;
				if (opt.OPTFLGCLA === 2) {
					var id = self.class.data.OPTIONS.indexOf(opt.OPTCOD);
					if (!id) cond = false;
					else {
						myopt[opt.OPTCOD] = {};
						myopt[opt.OPTCOD].$title = this.supervisor.loadText(_, self.class.data.OPTIONS.OPTLIB);
						var where = Sdata.x3ToSdata(tab, self.class.data.OPTIONS.OPTCND);
						myopt[opt.OPTCOD].$where = where();
					}
				} else {
					myopt[opt.OPTCOD] = {};
					myopt[opt.OPTCOD].$title = this.supervisor.loadText(_, opt.OPTLIB);
					var where = Sdata.x3ToSdata(tab, opt.OPTCND);
					myopt[opt.OPTCOD].$where = where();
				}
				if (cond === true) {
					if (opt.OPTDEF === 2) {
						myopt[opt.OPTCOD].$isDefault = true;
					}
					if (opt.OPTOBY === 2) {
						myopt[opt.OPTCOD].$isMandatory = true;
						myopt[opt.OPTCOD].$isHidden = true;
					}
				}
			}, this);
			return myopt;
		},
		articleLayout: function(_, facet) {
			return {
				$layout: {
					$items: this.data.SECTIONS.sort(function(s1, s2) {
						return s1.NIVSEC - s2.NIVSEC;
					}).map_(_, function(_, section) {
						return {
							$category: "section",
							$title: this.supervisor.loadText(_, section.INTSEC),
							$layout: {
								$items: this.data.BLOCKS.filter(function(block) {
									return block.SECBLC === section.CODSEC;
								}).sort(function(b1, b2) {
									return b1.NIVBLC - b2.NIVBLC;
								}).map_(_, function(_, block) {
									//
									function FindProp(prop, facet) {
										var condProp = false;
										if (prop.exportedProperty.data.BLCPRO === block.CODBLC) {
											condProp = (prop.exportedProperty.data[FACETS[facet].prefix + "PRO"] === 2 && prop.exportedProperty.data["STA" + FACETS[facet].prefix + "PRO"] !== 3);
											return {
												cond: condProp,
												ordre: prop.exportedProperty.data.ORDPRO
											};
										}
										return {
											cond: false,
											ordre: 0
										};
									}
									//
									function FindCol(targetResourceFactory, facet) {
										var condCol = {
											cond: false,
											ordre: 0
										};
										Object.keys(targetResourceFactory.properties).some(function(prop) {
											if (targetResourceFactory.properties[prop].exportedProperty) {
												condCol = FindProp(targetResourceFactory.properties[prop], facet);
												return condCol.cond === true;
											} else if (targetResourceFactory.properties[prop].targetResourceFactory) {
												condCol = FindCol(targetResourceFactory.properties[prop].targetResourceFactory, facet);
												return condCol.cond === true;
											}

										});
										return condCol;
									}
									//
									function GetCol(targetResourceFactory, facet, r) {
										var r = r || {};
										Object.keys(targetResourceFactory.properties).forEach(function(prop) {
											if (targetResourceFactory.properties[prop].exportedProperty) {
												var condBind = FindProp(targetResourceFactory.properties[prop], facet);
												if (condBind.cond === true) {
													if (targetResourceFactory.properties[prop]._isReference) {
														r[targetResourceFactory.properties[prop].tag + "_REF"] = condBind.ordre;
													} else {
														r[targetResourceFactory.properties[prop].tag] = condBind.ordre;
													}
												}
											} else if (targetResourceFactory.properties[prop].collection && targetResourceFactory.properties[prop].collection.mappingData && targetResourceFactory.properties[prop].collection.mappingData.TYPLNK === 3) {
												//1-1 collection
												r = GetCol(targetResourceFactory.properties[prop].targetResourceFactory, facet, r);
											} else if (targetResourceFactory.properties[prop].targetResourceFactory) {
												var condBind = FindCol(targetResourceFactory.properties[prop].targetResourceFactory, facet);
												if (condBind.cond === true) r[targetResourceFactory.properties[prop].tag] = condBind.ordre;
											}

										});
										return r;
									}

									//
									var resourceFactory = this.resourceFactory(_, facet);
									var items = GetCol(resourceFactory, facet);

									items = Object.keys(items).sort(function(item1, item2) {
										return items[item1] - items[item2];
									});

									items = Object.keys(items).map(function(no) {
										return {
											$bind: items[no],
										};
									});
									return {
										$category: "block",
										$title: this.supervisor.loadText(_, block.INTBLC),
										$layout: {
											$items: items,
										},
									};
								}, this, facet),
							},
						};
					}, this, facet),
				},
			};
		},
		article: function(_, facet, f) {
			var article = {};
			//Layout
			if (/^\$(details|edit|summary)$/.test(facet)) article = this.articleLayout(_, facet);

			function trimLayout(obj) {
				var hasElt = false;
				var hasBind = false;
				var new_items = [];
				if (obj.$layout.$items.length > 0) {
					obj.$layout.$items.forEach(function(item) {
						if (item.$bind) hasBind = true;
						else hasBind = trimLayout(item);
						if (hasBind === true) {
							hasElt = true;
							new_items.push(item);
						}
					});
				}
				obj.$layout.$items = new_items;
				return hasElt;
			}
			if (article.$layout)
				trimLayout(article);

			//Menu
			function fillMenu(facet, self, tabLinks, curMenu, items) {
				var hasElt = false;
				if (tabLinks) {
					Object.keys(tabLinks).filter(function(name) {
						tabLinks[name].data.MENLNK = tabLinks[name].data.MENLNK || "";
						return tabLinks[name].data.MENLNK === curMenu;
					}).forEach(function(name) {
						hasElt = true;
						var new_item = {
							$bind: name,
							$order: tabLinks[name].data.ORDTECLNK,
						};
						if (self.data.FONCTION !== undefined && facet === "$query") {
							if (name === "$edit") new_item.$style = "main";
						} else if (name === FACETS[facet].mainMenu) new_item.$style = "main";
						items.push(new_item);
					});
				}
				return hasElt;
			}

			function fillMenuMen(_, facet, self, tabMenus, curMenu, links1, links2, items) {
				var hasElt = false;
				var selfItems = items;
				if (tabMenus) {
					tabMenus.filter_(_, function(_, menu) {
						var okMenu = 1;
						menu.PARMENU = menu.PARMENU || "";
						if (menu.PARMENU !== curMenu) okMenu = 0;
						if (okMenu === 1 && menu.ACTMENU && activ.getActiv(_, self.supervisor, menu.ACTMENU) <= 0)
							okMenu = 0;
						return okMenu === 1;
					}).forEach_(_, function(_, menu) {
						var hasBind1 = false;
						var hasBind2 = false;
						var hasBind = false;
						var new_item = {
							$title: self.supervisor.loadText(_, menu.LIBMENU),
							$CODMENU: menu.CODMENU,
							$PARMENU: menu.PARMENU,
							$category: "menus",
							$isBoxCollapsable: true,
							$opened: false,
							$layout: {
								$items: []
							}
						};
						var items = new_item.$layout.$items;
						hasBind1 = fillMenu(facet, self, links1, menu.CODMENU, items);
						hasBind2 = fillMenu(facet, self, links2, menu.CODMENU, items);
						items = items.sort(function(item1, item2) {
							return item1.$order - item2.$order;
						});
						items.forEach(function(item) {
							delete item.$order;
						});
						if (hasBind1 === true || hasBind2 === true) {
							hasElt = true;
						}
						hasBind = fillMenuMen(_, facet, self, tabMenus, menu.CODMENU, links1, links2, items);
						if (hasBind1 === true || hasBind2 === true || hasBind === true) {
							selfItems.push(new_item);
						}
					});
					return hasElt;
				}
			}

			article.$menus = {
				$layout: {
					$items: []
				}
			};
			if (facet !== '$bulk') {
				var items = article.$menus.$layout.$items;
				if (["$query", "$lookup"].indexOf(facet) < 0) fillMenu(facet, this, f.links, "", items);
				fillMenu(facet, this, f.page && f.page.links, "", items);
				items = items.sort(function(item1, item2) {
					return item1.$order - item2.$order;
				});
				items.forEach(function(item) {
					delete item.$order;
				});
				//if (items.length) items[0].$style = "main";
				fillMenuMen(_, facet, this, this.data.MENUS, "", (["$query", "$lookup"].indexOf(facet) < 0 ? f.links : undefined), (f.page && f.page.links), items);
			}

			return article;
		},
		proto: function(_, facet) {
			var f = this.resourceFactory(_, facet);
			var proto = f.pageProto(_);
			if (/^\$(query|bulk|lookup)$/.test(facet)) proto.$filters = this.filtersProto(_, f);
			if (proto.$filters && Object.keys(proto.$filters).length === 0) delete proto.$filters;

			proto.$article = this.article(_, facet, f);

			return proto;
		},
		loadResource: function(_, key, facet, qs) {
			return this.resourceFactory(_, facet).loadResource(_, key, qs);
		},
		createResource: function(_, qs) {
			return this.resourceFactory(_, "$edit").createResource(_, qs);
		},
		query: function(_, httpContext, facet, qs) {
			return this.resourceFactory(_, facet).query(_, httpContext, qs);
		},
		filter: function(name) {
			if (this._filters === undefined || this._filters[name] === undefined) {
				var filter;
				var option;
				var defaut;
				this._filters = {};

				this.data.OPTIONS.forEach(function(elt) {
					if (elt.OPTCOD === name) option = elt;
					if (elt.OPTDEF === 2) defaut = elt;
				});
				option = option || defaut;
				if (option) {
					this._filters[name] = Jmql.x3ToJmql(option.OPTCND);
				}
			}
			return this._filters[name] && this._filters[name]();
		},
		service: function(_, keys, service) {
			var reply = {};
			reply.$baseUrl = this.supervisor.baseUrl;
			reply.$prototype = "{$baseUrl}/$prototype('{$representation}.$thumb')",
			reply.$representation = this.name;
			reply.$url = "{$baseUrl}/" + this.data.CODCLA + "('" + keys + "')";
			reply.$url += "?representation=" + this.name + ".$query";
			reply.$type = "application/json;vnd.sage=syracuse";
			reply.$etag = 1,
			reply.ETag = 0,
			reply.$uuid = tuuid.generate().x3ToString();
			reply.$actions = {};
			reply.$actions[service] = {
				$diagnoses: []
			};
			var status = this.class.invokeScripts(_, null, service);
			return reply;
		}
	}),
	FACETS: FACETS,
};