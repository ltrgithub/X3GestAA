"use strict";
var attributes = require("etna-supervisor/lib/attributes");
var X3Error = require("etna-engine/lib/runtime/errors").X3Error;

var tracerJs = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");


function InstanceReference(parent, property) {
	// care of the name if and only if the property belongs to 
	// an instance which which belongs to a collection : 
	if (property.type) {
		this.property = property;
	} else {
		this.property = {
			name: ""
		};
	}
	this.referenceName = property.name;
	this.reference = null;
	this._value = null;
	this.bindAttributes(parent);
}

Object.defineProperty(InstanceReference.prototype, "name", {
	get: function() {
		return this.property.name;
	},
	enumerable: false,
});

Object.defineProperty(InstanceReference.prototype, "column", {
	get: function() {
		return;
	},
	enumerable: false,
});

Object.defineProperty(InstanceReference.prototype, "value", {
	set: function(value) {
		throw new X3Error(147, (this.name ? this.name : '') + "is readonly");
	},
	get: function() {
		return this._value || {};
	},
	enumerable: false,
});

Object.defineProperty(InstanceReference.prototype, "get", {
	value: function(_) {

		tracerJs.debug && tracerJs.debug("InstanceReference.get:" + this.referenceName);

		var reference = this.$parent.get(_, this.referenceName);
		if (reference != this.reference) {
			// Load reference's attributes:
			this._value = this.$parent.class.properties[this.name].loadReference(_, this.$parent);
			if (this._value) {
				var _this = this;
				Object.keys(_this._value).forEach_(_, function(_, attribute) {
					var value = _this._value[attribute];
					if (/^\$(description|title|symbol)$/.test(attribute))
						_this.$attributes.setResource(_, attribute, value);
					else
						_this.setAttribute(attribute, value);
				});
			}
		}
		return this._value || {};
	},
	enumerable: false,
});

Object.defineProperty(InstanceReference.prototype, "set", {
	value: function(_, value, raw) {
		throw new X3Error(147, (this.name ? this.name : '') + "is readonly");
	},
	enumerable: false,
});

Object.defineProperty(InstanceReference.prototype, "fromRecord", {
	value: function(_, record, colnIndex) {},
	enumerable: false,
});

Object.defineProperty(InstanceReference.prototype, "toRecord", {
	value: function(record) {},
	enumerable: false,
});

Object.defineProperty(InstanceReference.prototype, "clone", {
	value: function(parent) {},
	enumerable: false,
});

Object.defineProperty(InstanceReference.prototype, "revertTo", {
	value: function() {},
	enumerable: false,
});

attributes.addAttributes(InstanceReference.prototype);
exports.InstanceReference = InstanceReference;