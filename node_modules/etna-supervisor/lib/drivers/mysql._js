"use strict";

var ez = require('ez-streams');
var mysql = require('mysql');

module.exports = function(config) {
	var connections = [];
	var trace = config.trace;
	var pool = mysql.createPool(config);

	pool.on('connection', function(connection) {
	  connection.query('use ' + config.database);
	});

	return {
		escape: function(name) {
			return '`' + name + '`';
		},
		param: function(i) {
			return '?';
		},
		withConnection: function(_, body) {
			var cnx = pool.getConnection(_);
			try {
				return body(_, cnx);
			} finally {
				cnx.release();
			}
		},
		execute: function(_, cnx, sql, args) {
			return cnx.query(sql, args, _);
		},
		reader: function(cnx, sql, args) {
			return ez.devices.mysql.reader(cnx, sql, args);
		},
		writer: function(cnx, sql) {
			return ez.devices.mysql.writer(cnx, sql);
		},
		dropIndexSql: function(indexName, tableName) {
			return "drop index `" + indexName + "` on `" + tableName + "`";
		},
		isIndexNotFound: function(ex) {
			return /^(ER_NO_SUCH_TABLE|ER_CANT_DROP_FIELD_OR_KEY):/.test(ex.message);
		},
		isTableNotFound: function(ex) {
			return /^ER_BAD_TABLE_ERROR:/.test(ex.message);
		},
		blobType: function() {
			return "TEXT";
		},
		blobType2: function() {
			return "VARCHAR(32)";
		},
		tinyIntType: function() {
			return "TINYINT";
		},
		shortIntType: function() {
			return "SMALLINT";
		},
		intType: function() {
			return "INT";
		},
		stringType: function(len) {
			return len < 256 ? "VARCHAR(" + len + ")" : "TEXT";
		},
		dateType: function() {
			return "DATE";
		},
		datetimeType: function() {
			return "DATE";
		},
		uuidType: function() {
			return "VARCHAR(32)";
		},
		decimalType: function() { // for now handle as char to keep full precision
			return "VARCHAR(32)";
		},
	};

};