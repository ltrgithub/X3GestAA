"use strict";

var helpers = require("syracuse-core/lib/helpers");
var attributes = require("etna-supervisor/lib/attributes");
var snapshots = require("etna-supervisor/lib/snapshots");

var tdate = require('etna-engine/lib/runtime/tdate');
var tuuid = require('etna-engine/lib/runtime/tuuid');
var tdatetime = require('etna-engine/lib/runtime/tdatetime');
var Blbfile = require('etna-engine/lib/runtime/tblbfile').Blbfile;

var util = require('etna-engine/lib/runtime/util');

var datetime = require("syracuse-core/lib/types/datetime");

exports.trim = function(obj) {
	//trace && trace("trim:"+JSON.stringify(obj));
	var result = Object.keys(obj).reduce(function(o, k) {
		var v = obj[k];


		var kk = (k == "ROWID") ? k : k.substring(0, k.lastIndexOf('_'));
		var isArray = (obj[kk + '_1'] !== undefined);
		if (isArray) {
			o[kk] = o[kk] || [];
			o[kk].push(v);
		} else {
			if (v && v !== ' ') o[kk] = v;
		}
		return o;
	}, {});
	Object.keys(result).forEach(function(k) {
		var v = result[k];
		if (Array.isArray(v)) {
			var len = v.length;
			while (len > 0 && !(v[len - 1] && v[len - 1] !== ' ')) len--;
			result[k] = v.slice(0, len);
		}
	});
	return result;
};


exports.fromSql = function(val, type, driver) {
	switch (type) {
		case 1:
		case 2:
		case 3:
			return (val !== null) ? val.x3ToInteger() : 0;
		case 4:
			return (val !== null) ? val.x3ToBCD() : bcd.fromDouble(0);
		case 7:
			return ((val !== null) && (val !== ' ')) ? val.x3ToString() : "";
		case 8:
			return (driver.isNullDate(val)) ? tdate.make(0, 0, 0) : tdate.fromJsDate(val);
		case 9:
			return (val !== null) ? new Blbfile(val) : new Blbfile(new Buffer(0));
		case 10:
			return (val !== null) ? val.x3ToString() : "";
		case 11:
			return (driver.isNullUuid(val)) ? tuuid.make() : val.x3ToUuid();
		case 12:
			return (driver.isNullDate(val)) ? new tdatetime.Datetime() : datetime.fromJsDate(val);
		default:
			return val;
	}
};

exports.toSql = function(params, driver) {
	return params.map(function(val) {
		var v = (val && val.x3ToSql && val.x3ToSql(driver)) || val;
		//console.log("value converted : "+v) ;
		return v;
	});
};

exports.maptrim = function(driver, typesmap, dispatch) {

	return function(obj) {
		//trace && trace("trim:"+JSON.stringify(obj));
		if (dispatch) {
			var result = Object.keys(obj).reduce(function(record, k, idx) {

				var fromSql = exports.fromSql;

				var v = fromSql(obj[k], typesmap[idx], driver);

				var pos = k.lastIndexOf('$');
				if (pos >= 0) {
					var abv = k.substring(0, pos);
					var rec = record[abv] || (record[abv] = {});
					var kk = k.substring(pos + 1);
				} else {
					abv = " ";
					var rec = record[abv] || (record[abv] = {});
					kk = k;
				}

				//console.log("val:"+v+" idx : "+idx+ " key: "+k);
				var kk = (kk == "ROWID") ? kk : kk.substring(0, kk.lastIndexOf('_'));
				var isArray = (obj[kk + '_1'] !== undefined);
				if (isArray) {
					rec[kk] = rec[kk] || [];
					rec[kk].push(v);
				} else {
					rec[kk] = v;
				}
				return record;
			}, []);

			Object.keys(result).forEach(function(k) {
				var row = result[k];
				Object.keys(row).forEach(function(ky) {
					var v = result[ky];
					if (Array.isArray(v)) {
						var len = v.length;
						while (len > 0 && !(v[len - 1] !== "")) len--;
						row[ky] = v.slice(0, len);
					}
				});
			});

		} else {
			var result = Object.keys(obj).reduce(function(o, k, idx) {

				var fromSql = exports.fromSql;

				var v = fromSql(obj[k], typesmap[idx], driver);
				//console.log("val:"+v+" idx : "+idx+ " key: "+k);
				var kk = (k == "ROWID") ? k : k.substring(0, k.lastIndexOf('_'));
				var isArray = (obj[kk + '_1'] !== undefined);
				if (isArray) {
					o[kk] = o[kk] || [];
					o[kk].push(v);
				} else {
					o[kk] = v;
				}
				return o;
			}, {});

			Object.keys(result).forEach(function(k) {
				var v = result[k];
				if (Array.isArray(v)) {
					var len = v.length;
					while (len > 0 && !(v[len - 1] !== "")) len--;
					result[k] = v.slice(0, len);
				}
			});
		}
		return result;
	};
};