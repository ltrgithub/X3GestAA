"use strict";

var ez = require('ez-streams');
var tds = require('tedious');

function tds_connect(cfg, callback) {
    var c;
    c = new tds.Connection(cfg);

    return c.on('connect', function (err) {
        if (err)
            return callback(err, null);

        cfg.trace && cfg.trace("connection callback ")
        return callback(null, c);
    });
}




function tds_query(cfg, cnx, sql, args, callback) {
    var records = [];

    var req = new tds.Request(sql, function (err, rowCount) {
        if (err)
            cfg.trace && cfg.trace("Request end error :" + err);
        else
            cfg.trace && cfg.trace("Request end rowcount :" + rowCount);

        return callback(err, records);
    });


    req.on("row", function (columns) {
        records.push(columnsToRow(columns));
    });

    cnx.execSql(req);
}

function tds_close(cnx, callback) {
    cnx.on("end", function () {
        callback(null, null)
    });
    cnx.close();
}

function columnsToRow(columns) {
    var col, exi, row, _i, _len;

    row = {};
    for (_i = 0, _len = columns.length; _i < _len; _i++) {
        col = columns[_i];
        /*col.value = valueCorrection(col.value, col.metadata) ;*/

        exi = row[col.metadata.colName];
        if (exi != null) {
            if (exi instanceof Array) {
                exi.push(col.value);
            } else {
                row[col.metadata.colName] = [exi, col.value];
            }
        } else {
            row[col.metadata.colName] = col.value;
        }
    }
    return row;
}

module.exports = function (config) {
    console.log("Create config...");
    var trace = config.trace;

    var srv = config.hostname.split("\\");
    console.log("Create " + srv[0] + ' ' + srv[1]);
    var cfg = {
        userName: config.user,
        password: config.password,
        server: srv[0],
        options: {
            database: config.database,
            instanceName: srv[1]
        },
        trace: config.trace
    };
    var connections = [];

    return {
        escape: function (name) {
            return '"' + name + '"';
        },
        param: function (i) {
            return ':' + (i+1);
        },



        withConnection: function (_, body) {
            var cnx = connections.pop();
            var result = [];

            function handleError(err) {
                console.log("handlerror")
            };

            if (!cnx) {
                /*
                var c = new tds.Connection(cfg);
                                               c.on('connect', function(err) {
                                                               (function(_) {
                                                                                              cfg.trace && cfg.trace( "connection callback ")
                                                                                              try {
                                                                                                              return body(_, c) ;
                                                                                              }
                                                                                              finally
                                                                                              {
                                                                                                              connections.push(cnx) ;                                             
                                                                                              }
                                                               } )( handleError ) ;
                                               });
                               }        
*/

                trace && trace("connecting on " + cfg.server + "...");
                trace && trace(cfg);

                cnx = tds_connect(cfg, ~_);
                trace && trace("connected");
            }

            try {
                trace && trace("state" + cnx.state.name);
                return body(_, cnx);;
            } finally {
                trace && trace("push connection");
                trace && trace("state" + cnx.state.name);
                connections.push(cnx);
            }

        },



        closeConnections: function (_) {
            connections.forEach_(_, function (_, cnx) {
                cnx && tds_close(cnx, _);
            })
        },


        execute: function (_, cnx, sql, args) {
            var result = tds_query(cfg, cnx, sql, args, ~_);
            return result;
        },


        reader: function (cnx, sql, args) {
            return ez.devices.sqlserver.reader(cnx, sql, args);
        },
        writer: function (cnx, sql) {
            return ez.devices.sqlserver.writer(cnx, sql);
        },

        dropIndexSql: function (indexName, tableName) {
            return 'drop index "' + indexName + '"';
        },
        isIndexNotFound: function (ex) {
            /*return /ORA-01418/.test(ex.message);*/
        },
        isTableNotFound: function (ex) {
            /*return /ORA-00942/.test(ex.message);*/
        },
        blobType: function () {
            return "varbinary(max)";
        },
        blobType2: function () {
            return "varbinary(max)";
        },
        tinyIntType: function () {
            return "tinyint";
        },
        shortIntType: function () {
            return "smallint";
        },
        intType: function () {
            return "int";
        },
        stringType: function (len) {
            return "nvarchar(" + len + ")";
        },
        dateType: function () {
            return "datetime";
        },
        datetimeType: function () {
            return "datetime";
        },
        uuidType: function () {
            return "binary(16)";
        },
        decimalType: function () { // for now handle as char to keep full precision
            return "numeric";
        }
    }
}