"use strict";

var ez = require('ez-streams');
var eztedious = require('ez-tedious');
var tds = require('tedious');
var dru = require('etna-util/lib/drivers-util');
//var sbuf = require('etna-supervisor/lib/drivers/sqlbuffer') ;
var tuuid = require('etna-engine/lib/runtime/tuuid');
var date = require("syracuse-core/lib/types/date");
var datetime = require("syracuse-core/lib/types/datetime");

function tds_connect(cfg, callback) {
	var c;
	c = new tds.Connection(cfg);

	return c.on('connect', function(err) {
		if (err)
			return callback(err, null);

		cfg.trace && cfg.trace("connection callback ");
		return callback(null, c);
	});
}

function tds_param(i) {
	return "@p" + i;
}

function tds_query(cfg, cnx, sql, args, callback) {
	cfg.trace && cfg.trace("tds_query:" + sql + (args ? " with " + JSON.stringify(args) : ""));

	var records = [];

	var req = new tds.Request(sql, function(err, rowCount) {
		if (err)
			cfg.trace && cfg.trace("Request end error :" + err);
		else
			cfg.trace && cfg.trace("Request end rowcount :" + rowCount);

		return callback(err, records);
	});

	dru.tdsAddParameters(req, args);

	req.on("row", function(columns) {
		records.push(dru.tdsColumnsToRow(columns));
	});

	cnx.execSql(req);
	return req;
}

function tds_close(cnx, callback) {
	cnx.on("end", function() {
		callback(null, null);
	});
	cnx.close();
}

function columnDescr() {
	return {

	};
}

module.exports = function(config) {

	console.log("Create config...");
	var cfg = {};
	if (config) {
		var trace = config.trace;

		var srv = config.hostname.split("\\");
		console.log("Create " + srv[0] + ' ' + srv[1]);
		cfg = {
			userName: config.user,
			password: config.password,
			server: srv[0],
			options: {
				database: config.database,
				instanceName: srv[1],
				decimalsAsString: true,
				requestTimeout: config.requestTimeout,
			},

			//trace: config.trace
		};

		var connections = [];
		console.log(cfg);
	}

	function popConnection(_) {
		var cnx = connections.pop();

		if (!cnx) {
			trace && trace("connecting on " + cfg.server + "...");
			trace && trace(cfg);

			cnx = tds_connect(cfg, ~_);
			trace && trace("connected");
		}
		return cnx;

	}

	function pushConnection(cnx) {
		connections.push(cnx);
	}

	return {
		subString: function(arg, deb, fin) {
			return "substring(" + arg + ", " + deb + ", " + fin + ")";
		},
		toSqlLob: function(val) {
			return val;
		},
		toSqlUuid: function(val) {
			return val;
		},

		nullDate: function() {
			return new datetime.Datetime(Date.UTC(1753, 1, 1));
		},

		isNullDate: function(val) {
			return val && (val.getFullYear() === 1753) && (val.getMonth() === 1) && (val.getDay() === 1);
		},

		isNullUuid: function(val) {
			for (var i = 0; i < 16; i++) {
				if (val[i] !== 0) return false;
			}
			return true;
		},

		toSqlDate: function(val) {
			var date;
			if ('string' === typeof(val))
				date = Date.parse(val);
			else {
				// Assume the val is a Date object
				date = val;
			}
			return "'" + date.toISOString() + "'";
		},

		escape: function(name) {
			return '"' + name + '"';
		},
		param: function(i) {
			return tds_param(i);
		},

		withConnection: function(_, body) {
			var cnx = popConnection(_);
			var result = [];

			try {
				trace && trace("state" + cnx.state.name);
				return body(_, cnx);
			} finally {
				trace && trace("push connection");
				trace && trace("state" + cnx.state.name);
				pushConnection(cnx);
				connections.push(cnx);
			}

		},

		closeConnections: function(_) {
			connections.forEach_(_, function(_, cnx) {
				cnx && tds_close(cnx, ~_);
			});
		},

		execute: function(_, cnx, sql, args) {
			var result = tds_query(cfg, cnx, sql, args, ~_);
			return result;
		},

		reader: function(_, cnx, sql, args) {
			return eztedious.reader(_, cnx, sql, args);
		},
		writer: function(_, cnx, sql) {
			return eztedious.writer(cnx, sql);
		},

		dropIndexSql: function(indexName, tableName) {
			return 'drop index "' + tableName + '"."' + indexName + '"';
		},
		isIndexNotFound: function(ex) {
			//return /ORA-01418/.test(ex.message);
		},
		isTableNotFound: function(ex) {
			if (/it does not exist/.test(ex.message))
				return true;
			if (/Invalid object name/.test(ex.message)) {
				// sth like 'Invalid object name 'xxxx'
				return true;
			}
			return false;
		},
		blobType: function() {
			return "varbinary(max)";
		},
		blobType2: function() {
			return "varbinary(max)";
		},
		tinyIntType: function() {
			return "tinyint";
		},
		shortIntType: function() {
			return "smallint";
		},
		intType: function() {
			return "int";
		},
		stringType: function(len) {
			return "nvarchar(" + len + ")";
		},
		dateType: function() {
			return "datetime";
		},
		datetimeType: function() {
			return "datetime";
		},
		uuidType: function() {
			return "binary(16)";
		},
		decimalType: function() { // for now handle as char to keep full precision
			return "numeric";
		},

		/// Returns the definition of a table from its name.
		getTableDef: function(_, tablename) {
			var tableDef = {
				name: tablename
			};
			this.readTableSchema(_, tableDef);
			return tableDef;
		},
		/// Enhance a table definition with its columns, indices, ...
		/// 'tableDef' is an object that have been created by readTables() / getTableDef()
		readTableSchema: function(_, tableDef) {
			var _this = this;
			// Read the columns of the table
			this.withConnection(_, function(_, cnx) {
				var sql = "SELECT c.object_id table_id, c.column_id col_id, c.name col_name, c.system_type_id col_type, c.max_length col_max_length, " +
					"c.is_nullable col_is_nullable, c.precision col_precision, c.scale col_scale, c.default_object_id col_default_object_id, " +
					"d.name def_name, d.definition def_definition " +
					"FROM sys.columns c " +
					"LEFT JOIN sys.objects o ON c.object_id = o.object_id " +
					"LEFT JOIN sys.default_constraints d ON d.object_id = c.default_object_id " +
					"WHERE o.name='" + tableDef.name + "'";
				var tableId;
				var columnsById = [];
				tableDef.columns = _this.reader(_, cnx, sql).toArray(_).map(function(sql) {
					if (!tableId) {
						// Note: all the rows have the same table_id
						tableId = sql.table_id;
					}
					var column = {
						name: sql.col_name,
						isNullable: sql.col_is_nullable
					};
					switch (sql.col_type) {
						case 48:
							column.type = "tinyint";
							break;
						case 52:
							column.type = "smallint";
							break;
						case 56:
							column.type = "int";
							break;
						case 61:
							column.type = "datetime";
							break;
						case 108: // numeric
							column.type = "decimal";
							column.decimalPrecision = sql.col_precision;
							column.decimalScale = sql.col_scale;
							break;
						case 165:
							column.type = "blob";
							break;
						case 167: // varchar(n)
							column.type = "varchar";
							column.maxLength = sql.col_max_length;
							break;
						case 173: // binary(n)
							if (sql.col_max_length == 16)
								column.type = "uuid";
							else {
								column.type = "binary";
								column.maxLength = sql.col_max_length;
							}
							break;
						case 231: // nvarchar(n)
							column.type = "nvarchar";
							// Note : sql.col_max_length <=> nvarchar(max)
							column.maxLength = sql.col_max_length / 2; // utf8 encoding, the size must be divided by 2.
							break;
						default:
							throw new Error('unknown column type ' + sql.col_xtype + ' for column ' + tableDef.name + '.' + sql.col_name);
					}
					if (sql.col_default_object_id) {
						var defVal = sql.def_definition;
						//while ((defVal[0] == '(') && (defVal[-1] = ')')) {}
						// The columns has a default value
						column.default = {
							name: sql.def_name,
							value: sql.def_definition
						};
					}
					columnsById[sql.col_id] = column;
					return column;
				});

				tableDef.getColumnById = function(id) {
					return columnsById[id];
				};


				var sql = "SELECT ic.index_id index_id, ic.index_column_id index_column_id, " +
					"i.is_unique index_unique, i.is_primary_key index_is_pk, " +
					"ic.column_id column_id, i.name index_name, ic.is_descending_key column_descending " +
					"FROM sys.index_columns ic " +
					"LEFT JOIN sys.indexes i ON i.index_id = ic.index_id AND i.object_id = ic.object_id " +
					"WHERE i.object_id = " + tableId + " AND i.type > 0 " +
					"ORDER BY ic.index_id, ic.index_column_id";
				var currentIndex;
				var currentIndexId;
				tableDef.indexes = [];
				_this.reader(_, cnx, sql).toArray(_).forEach(function(sql) {
					if (sql.index_id != currentIndexId) {
						// New index
						currentIndex = {
							name: sql.index_name,
							isPk: sql.index_is_pk,
							isUnique: sql.index_is_unique,
							columns: [],
						};
						tableDef.indexes.push(currentIndex);
					}
					var column = {
						columnId: sql.column_id,
						ascending: !sql.column_descending,
					};
					currentIndex.columns.push(column);
				});
			});
		},

		/// Returns the list of all the tables defined in the database / schema
		readTables: function(_) {
			var tables = [];
			var _this = this;
			this.withConnection(_, function(_, cnx) {
				var sql = "select name, id, xtype from sysobjects where xtype = 'U' order by name";
				var vals = _this.reader(_, cnx, sql).forEach(_, function(_, item) {
					var table = {
						name: item.name
					};
					tables.push(table);
				});
			});
			return tables;
		},

		/// Returns a reader that could be used to read all the records of the table
		/// 'tableDef' is an object that have been created by getTableDef() or readTables() and updated by readTableSchema()
		createTableReader: function(_, tableDef, filters) {
			if (!tableDef.columns)
				throw new Error('Must invoke readTableSchema() before.');
			var columnNames = tableDef.columns.map(function(column) {
				return "T." + column.name;
			});

			var sql = "SELECT " + columnNames.join(',') + " FROM " + tableDef.name + " T";

			if (filters) {
				// A list of 3-uplets {key, operator, value}
				var first = true;
				filters.forEach(function(filter) {
					if (first)
						sql += " WHERE ";
					else
						sql += " AND ";
					first = false;
					sql += "(T." + filter.key + " " + filter.operator + " " + filter.value + ")";
				});
			}

			var reader;
			var _this = this;
			this.withConnection(_, function(_, cnx) {
				reader = _this.reader(_, cnx, sql);
			});
			return reader;
		},

		createTableWriter: function(_, tableDef) {

			var columnNames = [];
			var paramNames = [];
			tableDef.columns.forEach(function(column, index) {
				if (column.name == "ROWID")
					return;
				columnNames.push(column.name);
				paramNames.push("@p" + index);
			});

			var sql = "INSERT INTO " + tableDef.name + " (" + columnNames.join(',') + ") VALUES (" + paramNames.join(',') + ")";
			var _this = this;
			var writer;
			this.withConnection(_, function(_, cnx) {
				writer = _this.writer(_, cnx, sql);
			});
			return writer;
		},

		clearTable: function(_, tableDef) {
			var _this = this;
			this.withConnection(_, function(_, cnx) {
				_this.execute(_, cnx, "DELETE FROM " + tableDef.name);
			});
		}
	};
};