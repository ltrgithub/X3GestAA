"use strict";

var ez = require('ez-streams');
var eztedious = require('ez-tedious');
var tds = require('tedious');
var dru = require('etna-util/lib/drivers-util');
//var sbuf = require('etna-supervisor/lib/drivers/sqlbuffer') ;
var tuuid = require('etna-engine/lib/runtime/tuuid');
var date = require("syracuse-core/lib/types/date");
var datetime = require("syracuse-core/lib/types/datetime");

function tds_connect(cfg, callback) {
	var c;
	c = new tds.Connection(cfg);

	return c.on('connect', function(err) {
		if (err)
			return callback(err, null);

		cfg.trace && cfg.trace("connection callback ");
		return callback(null, c);
	});
}

function tds_param(i) {
	return "@p" + i;
}

function tds_query(cfg, cnx, sql, args, callback) {
	cfg.trace && cfg.trace("tds_query:" + sql + (args ? " with " + JSON.stringify(args) : ""));

	var records = [];

	var req = new tds.Request(sql, function(err, rowCount) {
		if (err)
			cfg.trace && cfg.trace("Request end error :" + err);
		else
			cfg.trace && cfg.trace("Request end rowcount :" + rowCount);

		return callback(err, records);
	});

	dru.tdsAddParameters(req, args);

	req.on("row", function(columns) {
		records.push(dru.tdsColumnsToRow(columns));
	});

	cnx.execSql(req);
}

function tds_close(cnx, callback) {
	cnx.on("end", function() {
		callback(null, null);
	});
	cnx.close();
}

module.exports = function(config) {

	console.log("Create config...");
	var trace = config.trace;

	var srv = config.hostname.split("\\");
	console.log("Create " + srv[0] + ' ' + srv[1]);
	var cfg = {
		userName: config.user,
		password: config.password,
		server: srv[0],
		options: {
			database: config.database,
			instanceName: srv[1]
		},
		trace: config.trace
	};
	var connections = [];

	function popConnection(_) {
		var cnx = connections.pop();

		if (!cnx) {
			trace && trace("connecting on " + cfg.server + "...");
			trace && trace(cfg);

			cnx = tds_connect(cfg, ~_);
			trace && trace("connected");
		}
		return cnx;

	}

	function pushConnection(cnx) {
		connections.push(cnx);
	}

	return {

		decimalCast: function(name) {
			// select rtrim(replace(replace(rtrim(replace(cast(znum as char(11)),'0',' ')),' ','0') + ' ','. ','')) from ZETNA4
			return "convert( nvarchar(40), " + name + " ) As " + name;
		},

		uuidCast: function(name) {
			return name + " As U#" + name;
		},
		sqlUuid: function(val) {
			/*return new sbuf.SQLBUFFER( sbuf.uuidType, new Buffer( val, 'hex') ) ;*/
			return tuuid.x3ToUuid(val);
		},
		sqlDate: function(val) {
			return val;
		},
		fromSqlDate: function(val) {
			return this.isNullDate(val) ? date.fromJsDate(val) : null;
		},
		sqlDatetime: function(val) {
			return val;
		},
		fromSqlDatetime: function(val) {
			return this.isNullDate(val) ? datetime.fromJsDate(val) : null;
		},
		nullDate: function() {
			return new Datetime(1753, 1, 1, 0, 0, 0, 0);
		},
		isNullDate: function(val) {
			return val && (val.getFullYear() === 1753) && (val.getMonth() === 1) && (val.getDay() === 1);
		},
		isNullUuid: function(val) {
			return val === "00000000000000000000000000000000";
		},
		escape: function(name) {
			return '"' + name + '"';
		},
		param: function(i) {
			return tds_param(i);
		},

		withConnection: function(_, body) {
			var cnx = popConnection(_);
			var result = [];

			try {
				trace && trace("state" + cnx.state.name);
				return body(_, cnx);
			} finally {
				trace && trace("push connection");
				trace && trace("state" + cnx.state.name);
				pushConnection(cnx);
				connections.push(cnx);
			}

		},

		closeConnections: function(_) {
			connections.forEach_(_, function(_, cnx) {
				cnx && tds_close(cnx, ~_);
			});
		},

		execute: function(_, cnx, sql, args) {
			var result = tds_query(cfg, cnx, sql, args, ~_);
			return result;
		},

		reader: function(_, cnx, sql, args) {
			return eztedious.reader(cnx, sql, args);
		},
		writer: function(_, cnx, sql) {
			return eztedious.writer(cnx, sql);
		},

		dropIndexSql: function(indexName, tableName) {
			return 'drop index "' + indexName + '"';
		},
		isIndexNotFound: function(ex) {
			//return /ORA-01418/.test(ex.message);
		},
		isTableNotFound: function(ex) {
			//return /ORA-00942/.test(ex.message);
		},
		blobType: function() {
			return "varbinary(max)";
		},
		blobType2: function() {
			return "varbinary(max)";
		},
		tinyIntType: function() {
			return "tinyint";
		},
		shortIntType: function() {
			return "smallint";
		},
		intType: function() {
			return "int";
		},
		stringType: function(len) {
			return "nvarchar(" + len + ")";
		},
		dateType: function() {
			return "datetime";
		},
		datetimeType: function() {
			return "datetime";
		},
		uuidType: function() {
			return "binary(16)";
		},
		decimalType: function() { // for now handle as char to keep full precision
			return "numeric";
		},
		backupDatabase: function(_, dbName, filename) {
			var cnx = popConnection(_);

			try {
				trace && trace("state" + cnx.state.name);
				var sqlCmd = "BACKUP DATABASE [" + dbName + "] TO  DISK = N'" + filename + "' WITH FORMAT, INIT, SKIP";
				return tds_query(cfg, cnx, sqlCmd, [], ~_);
			} finally {
				trace && trace("push connection");
				trace && trace("state" + cnx.state.name);
				pushConnection(cnx);
			}
		},
		restoreDatabase: function(_, dbName, filename) {
			throw new Error("Not implemented !!!");
		}

	};
};