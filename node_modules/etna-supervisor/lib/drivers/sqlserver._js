"use strict";

var ez = require('ez-streams');
var sqlserver = require('msnodesql');

module.exports = function (config) {
    var trace = config.trace;
    var connections = [];

    return {
        escape: function (name) {
            return '"' + name + '"';
        },
        param: function (i) {
            return '?';
        },

        withConnection: function (_, body) {
            var cnx = connections.pop();
            if (!cnx) {
                trace && trace("connecting ...");
                var cnx = sqlserver.open("DRIVER=SQL Server Native Client 11.0;SERVER=sodsql2k12x64\\SAGE01;UID=X3;PWD=tiger;APP=Adonix;WSID=PC101321;DATABASE=sydevsql;AutoTranslate=no;QuotedId=no;AnsiNPW=no;", ~_);
            }
            try {
                return body(_, cnx);
            } finally {
                connections.push(cnx);
            }
        },

        execute: function (_, cnx, sql, args) {
            var result = cnx.query(sql, args || [], ~_) ;
            return result ;
        },


        reader: function (cnx, sql, args) {
            return ez.devices.sqlserver.reader(cnx, sql, args);
        },
        writer: function (cnx, sql) {
            return ez.devices.sqlserver.writer(cnx, sql);
        },

        dropIndexSql: function (indexName, tableName) {
            return 'drop index "' + indexName + '"';
        },
        isIndexNotFound: function (ex) {
            /*return /ORA-01418/.test(ex.message);*/
        },
        isTableNotFound: function (ex) {
            /*return /ORA-00942/.test(ex.message);*/
        },
        blobType: function () {
            return "varbinary(max)";
        },
        blobType2: function () {
            return "varbinary(max)";
        },
        tinyIntType: function () {
            return "tinyint";
        },
        shortIntType: function () {
            return "smallint";
        },
        intType: function () {
            return "int";
        },
        stringType: function (len) {
            return "nvarchar(" + len + ")";
        },
        dateType: function () {
            return "datetime";
        },
        datetimeType: function () {
            return "datetime";
        },
        uuidType: function () {
            return "binary(16)";
        },
        decimalType: function () { // for now handle as char to keep full precision
            return "numeric";
        }
    }
}