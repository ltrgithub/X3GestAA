"use strict";

var ez = require('ez-streams');
var ezoracle = require('ez-oracle');
var oracle = require('oracle');
var date = require("syracuse-core/lib/types/date");
var datetime = require("syracuse-core/lib/types/datetime");


var _months = ["JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"];

function _toHex(b) {
	b = b & 0xff;
	return b < 16 ? "0" + b.toString(16) : b.toString(16);
}

module.exports = function(config) {
	var trace = config.trace;
	var connections = [];

	return {
		toSqlLob: function(val) {
			var s = '';
			for (var i = 0; i < val.length; i++) {
				var b = val[i];
				s += _toHex(b);
			}
			return s;
		},
		toSqlUuid: function(val) {
			return val.x3ToSqlString();
		},
		isNullUuid: function(val) {
			return val === "00000000000000000000000000000000";
		},
		nullDate: function() {
			return new Date(Date.UTC(1599, 11, 31));
		},
		isNullDate: function(val) {
			return val && (val.getFullYear() === 1599) && (val.getMonth() === 11) && (val.getDate() === 31);
		},
		escape: function(name) {
			return '"' + name + '"';
		},
		param: function(i) {
			return ':' + (i + 1);
		},
		withConnection: function(_, body) {
			var cnx = connections.pop();
			if (!cnx) {
				trace && trace("connecting ...");
				var cnx = oracle.connect(config, ~_);
				cnx.setPrefetchRowCount(config.setPrefetchRowCount || 50);
				cnx.setNumberStringFormat("99999999999999999999.99999999999999999999");
			}
			try {
				return body(_, cnx);
			} finally {
				connections.push(cnx);
			}
		},
		execute: function(_, cnx, sql, args) {
			return cnx.execute(sql, args || [], ~_);
		},
		reader: function(_, cnx, sql, args) {
			return ezoracle.reader(cnx, sql, args);
		},
		writer: function(_, cnx, sql) {
			return ezoracle.writer(cnx, sql);
		},
		dropIndexSql: function(indexName, tableName) {
			return 'drop index "' + indexName + '"';
		},
		isIndexNotFound: function(ex) {
			return /ORA-01418/.test(ex.message);
		},
		isTableNotFound: function(ex) {
			return /ORA-00942/.test(ex.message);
		},
		blobType: function() {
			return "VARCHAR2(1020)";
		},
		blobType2: function() {
			return "VARCHAR2(32)";
		},
		tinyIntType: function() {
			return "NUMBER(3)";
		},
		shortIntType: function() {
			return "NUMBER(5)";
		},
		intType: function() {
			return "NUMBER(10)";
		},
		stringType: function(len) {
			return "VARCHAR2(" + len + ")";
		},
		dateType: function() {
			return "DATE";
		},
		datetimeType: function() {
			return "DATE";
		},
		uuidType: function() {
			return "VARCHAR2(32)";
		},
		decimalType: function() { // for now handle as char to keep full precision
			return "VARCHAR2(32)";
		},
		backupDatabase: function(_, dbName, filename) {
			throw new Error("Not implemented !!!");
		},
		restoreDatabase: function(_, dbName, filename) {
			throw new Error("Not implemented !!!");
		},

	};
};