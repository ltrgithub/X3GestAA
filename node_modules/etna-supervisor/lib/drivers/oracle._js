"use strict";

var ez = require('ez-streams');
var ezoracle = require('ez-oracle');
var oracle = require('oracle');
var date = require("syracuse-core/lib/types/date");
var datetime = require("syracuse-core/lib/types/datetime");
var tracerJs = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");


var _months = ["JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"];

function _toHex(b) {
	b = b & 0xff;
	return b < 16 ? "0" + b.toString(16) : b.toString(16);
}

module.exports = function(config) {
	var trace = config.trace;
	var connections = [];

	return {
		toSqlLob: function(val) {
			var s = '';
			for (var i = 0; i < val.length; i++) {
				var b = val[i];
				s += _toHex(b);
			}
			return s;
		},
		toSqlUuid: function(val) {
			return val.x3ToSqlString();
		},
		isNullUuid: function(val) {
			return val === "00000000000000000000000000000000";
		},
		nullDate: function() {
			return new Date(Date.UTC(1599, 11, 31));
		},
		isNullDate: function(val) {
			return val && (val.getFullYear() === 1599) && (val.getMonth() === 11) && (val.getDate() === 31);
		},
		escape: function(name) {
			return '"' + name + '"';
		},
		param: function(i) {
			return ':' + (i + 1);
		},
		withConnection: function(_, body) {
			var cnx = connections.pop();
			if (!cnx) {
				trace && trace("connecting ...");
				var cnx = oracle.connect(config, ~_);
				cnx.setPrefetchRowCount(config.setPrefetchRowCount || 50);
				cnx.setNumberStringFormat("99999999999999999999.99999999999999999999");
			}
			try {
				return body(_, cnx);
			} finally {
				connections.push(cnx);
			}
		},
		execute: function(_, cnx, sql, args) {
			tracerJs.debug && tracerJs.debug("SQL: " + sql + ", args=" + args);
			return cnx.execute(sql, args || [], ~_);
		},
		reader: function(_, cnx, sql, args) {
			return ezoracle.reader(cnx, sql, args || []);
		},
		writer: function(_, cnx, sql) {
			return ezoracle.writer(cnx, sql);
		},
		dropIndexSql: function(indexName, tableName) {
			return 'drop index "' + indexName + '"';
		},
		isIndexNotFound: function(ex) {
			return /ORA-01418/.test(ex.message);
		},
		isTableNotFound: function(ex) {
			return /ORA-00942/.test(ex.message);
		},
		isUniqueViolated: function(ex) {
			return /ORA-00001/.test(ex.message);
		},
		isLocked: function(ex) {
			return /ORA-00060/.test(ex.message);
		},
		isNoRecord: function(ex) {
			return /ORA-01403/.test(ex.message);
		},
		blobType: function() {
			return "VARCHAR2(1020)";
		},
		blobType2: function() {
			return "VARCHAR2(32)";
		},
		tinyIntType: function() {
			return "NUMBER(3)";
		},
		shortIntType: function() {
			return "NUMBER(5)";
		},
		intType: function() {
			return "NUMBER(10)";
		},
		stringType: function(len) {
			return "VARCHAR2(" + len + ")";
		},
		dateType: function() {
			return "DATE";
		},
		datetimeType: function() {
			return "DATE";
		},
		uuidType: function() {
			return "VARCHAR2(32)";
		},
		decimalType: function() { // for now handle as char to keep full precision
			return "VARCHAR2(32)";
		},
		backupDatabase: function(_, dbName, filename) {
			throw new Error("Not implemented !!!");
		},
		restoreDatabase: function(_, dbName, filename) {
			throw new Error("Not implemented !!!");
		},

		/// Returns the list of all the tables defined in the database / schema
		readTables: function(_) {
			var _this = this;
			return this.withConnection(_, function(_, cnx) {
				var sql = "select TABLE_NAME from USER_TABLES order by TABLE_NAME";
				return _this.reader(_, cnx, sql).map(function(_, item) {
					return {
						name: item.TABLE_NAME,
					};
				}).toArray(_);
			});
		},

		/// Returns the definition of a table from its name.
		getTableDef: function(_, tablename) {
			var tableDef = {
				name: tablename
			};
			this.readTableSchema(_, tableDef);
			return tableDef;
		},
		/// Enhance a table definition with its columns, indices, ...
		/// 'tableDef' is an object that have been created by readTables() / getTableDef()
		readTableSchema: function(_, tableDef) {
			var _this = this;
			// Read the columns of the table
			this.withConnection(_, function(_, cnx) {
				var sql = "SELECT COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE FROM user_tab_cols WHERE table_name = :1";
				tableDef.columns = _this.reader(_, cnx, sql, [tableDef.name]).toArray(_).map(function(sql) {
					var column = {
						name: sql.COLUMN_NAME,
						isNullable: sql.NULLABLE !== 'N',
					};
					switch (sql.DATA_TYPE) {
						case 'DATE':
						case 'TIMESTAMP(3)':
							column.type = "datetime";
							break;
						case 'NUMBER':
							column.type = "decimal";
							column.decimalPrecision = sql.DATA_PRECISION;
							column.decimalScale = sql.DATA_SCALE;
							break;
						case 'BLOB':
							column.type = "blob";
							break;
						case 'CLOB':
							column.type = "clob";
							break;
						case 'VARCHAR2':
							column.type = "varchar";
							column.maxLength = sql.DATA_LENGTH;
							break;
						case 'RAW':
							if (sql.length == 16)
								column.type = "uuid";
							else {
								column.type = "binary";
								column.maxLength = sql.DATA_LENGTH;
							}
							break;
						default:
							throw new Error('unknown column type ' + sql.DATA_TYPE + ' for column ' + tableDef.name + '.' + column.name);
					}
					return column;
				});
			});
		},
		/// Returns a reader that could be used to read all the records of the table
		/// 'tableDef' is an object that have been created by getTableDef() or readTables() and updated by readTableSchema()
		createTableReader: function(_, tableDef) {
			if (!tableDef.columns)
				throw new Error('Must invoke readTableSchema() before.');
			var columnNames = tableDef.columns.map(function(column) {
				return "T." + column.name;
			});

			var sql = "SELECT " + columnNames.join(',') + " FROM " + tableDef.name + " T";
			var _this = this;
			return this.withConnection(_, function(_, cnx) {
				return _this.reader(_, cnx, sql);
			});
		},

		createTableWriter: function(_, tableDef) {

			var columnNames = [];
			var paramNames = [];
			tableDef.columns.forEach(function(column, index) {
				if (column.name == "ROWID")
					return;
				columnNames.push(column.name);
				paramNames.push("@p" + index);
			});

			var sql = "INSERT INTO " + tableDef.name + " (" + columnNames.join(',') + ") VALUES (" + paramNames.join(',') + ")";
			var _this = this;
			return this.withConnection(_, function(_, cnx) {
				return _this.writer(_, cnx, sql);
			});
		},

		clearTable: function(_, tableDef) {
			var _this = this;
			this.withConnection(_, function(_, cnx) {
				_this.execute(_, cnx, "DELETE FROM " + tableDef.name);
			});
		}
	};
};