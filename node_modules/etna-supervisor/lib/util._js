"use strict";

var helpers = require("syracuse-core/lib/helpers");
var attributes = require("etna-supervisor/lib/attributes");
var snapshots = require("etna-supervisor/lib/snapshots");
var forEachKey = helpers.object.forEachKey;
var runtime = require('etna-engine/lib/runtime/runtime');

exports.defineClass = function(constructor, parent, members, options) {
	var construct = helpers.defineClass(constructor, parent, members);
	if (options) {
		if (options.hasAttributes) {
			attributes.addAttributes(construct.prototype);
		}
		if (options.hasSnapshots) {
			snapshots.addSnapshots(construct.prototype);
		}

	}
	construct.prototype.toJSON = construct.prototype.toJSON || function() {
		throw new Error("cannot serialize " + constructor);
	};
	return construct;
};

exports.HttpError = helpers.defineClass(function(statusCode, message) {
	var err = new Error(message);
	err.statusCode = statusCode;
	return err;
}, Error, {});

exports.find = function(arr, key, val) {
	for (var i = 0, len = arr.length; i < len; i++) {
		var elt = arr[i];
		if (elt[key] === val) return elt;
	}
	return null;
};

exports.declVar = function(dict, name, type, value) {
	dict.values[name] = value;
	dict.types[name] = type;
};

exports.uuid = helpers.uuid.generate;

exports.clone = function clone(obj, shallow) {
	return Object.keys(obj).reduce(function(r, name) {
		var v = obj[name];
		if (v && typeof v === "object") {
			if (Array.isArray(v)) {
				v = v.slice(0);
				if (!shallow) v = v.map(clone);
			} else {
				v = clone(v);
			}
		}
		r[name] = v;
		return r;
	}, {});
};

exports.isInstance = function(instance) {
	return !!(instance.class && instance.slots);
};

exports.checkInstance = function(instance) {
	if (!exports.isInstance(instance)) throw new Error("value is not an instance");
};

exports.emptyArray = function(base, def) {
	// array layout is [ndims, def, data, base1, size1, base2, size2, ...
	// variable arrays impose ndims = 1
	return [1, def === undefined ? def : null, [], base === undefined ? 1 : base, 32767];
};

//escape :
//$ by \u007F

exports.escapeArray = function(input) {
	return input.map(function(item) {
		switch (typeof item) {
			case "object":
				return exports.escapeJson(item);
			case "string":
				return (item[0] === "$") ? ("_" + item.substring(1)) : item;
			default:
				return item;
		}
	});
};

exports.escapeJson = function(input) {
	// must clone as original object might be used later unescaped
	if (Array.isArray(input)) return exports.escapeArray(input);
	//
	var out = {};
	forEachKey(input, function(key, value) {
		var escKey = key;
		var escVal = value;
		if (value !== null) {
			if (Array.isArray(value)) {
				escVal = exports.escapeArray(value);
			} else if (typeof value === "object") escVal = exports.escapeJson(value);

			if (key[0] === "$") {
				escKey = "_" + key.substring(1);
				//			escKey = "Ã©"+key.substring(1);
			}

		}
		out[escKey] = escVal;
	});
	//
	return out;
};
//unescape :
// _ by $

exports.unescapeJson = function(input) {
	forEachKey(input, function(key, value) {
		var escKey = key;
		var escVal = value;
		if (Array.isArray(value)) {
			escVal = [];
			value.forEach(function(item) {
				if (typeof item === "object") escVal.push(exports.unescapeJson(item));
				else if (typeof item === "string") escVal.push((item[0] === "_") ? ("$" + item.substring(1)) : item);
				else escVal.push(item);
			});
		} else if (typeof value === "object") escVal = exports.unescapeJson(value);

		if (key[0] === "_") {
			escKey = "$" + key.substring(1);
			delete input[key];
		}

		input[escKey] = escVal;
	});
	//	console.log("unescaped json: "+sys.inspect(input,null,4));
	return input;
};

exports.invokeScripts = function(_, self, instance, action, $curpro, $curpth, values) {
	//tracerJs.debug && tracerJs.debug("invokeScripts:" + action);
	var curpro = $curpro || "";
	var curpth = $curpth || "";

	var astatus = self.supervisor.constants.CST_AOK;

	self.scripts(_).forEach_(_, function(_, script) {
		//var handler = (curpro === "") ? script.body.METHODS : script.body.PROPERTIES;
		var handler = (curpro) ? "$PROPERTIES" : "$METHODS";
		if (!handler || astatus) return;

		var args = {
			CURPRO: {
				type: "LS",
				value: curpro
			},
			CURPTH: {
				type: "LS",
				value: curpth
			},
			ACTION: {
				type: "LS",
				value: action
			},
			ASTATUS: {
				type: "LI",
				value: 0
			}
		};
		if (instance !== null) {
			args["THIS"] = {
				type: "LY",
				value: instance
			};
		}
		for (var v = 0; values !== undefined && v < values.length; v++) {
			args[values[v].name] = {
				type: "'L' + values[v].name",
				value: values[v].value
			};
		}
		runtime.executeProg(_, script, handler, args);
		astatus = args.ASTATUS.value;
	}, self);
	return astatus;
};