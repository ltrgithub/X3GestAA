"use strict";

var helpers     = require("syracuse-core/lib/helpers");
var attributes  = require("etna-supervisor/lib/attributes");
var snapshots   = require("etna-supervisor/lib/snapshots");

exports.defineClass = function(constructor, parent, members, options) {
	var constuct =  helpers.defineClass(constructor, parent, members);
	if(options) {
		if(options.hasAttributes)  {
			attributes.addAttributes(constuct.prototype);
		}
		if(options.hasSnapshots)  {
			snapshots.addSnapshots(constuct.prototype);
		}

	}
	return constuct;
};

exports.HttpError = helpers.defineClass(function(statusCode, message) {
	var err = Error(message);
	err.statusCode = statusCode;
	return err;
}, Error, {});

exports.find = function(arr, key, val) {
	for (var i = 0, len = arr.length; i < len; i++) {
		var elt = arr[i];
		if (elt[key] === val) return elt;
	}
	return null;
};

exports.declVar = function (dict,name, type, value) {
	dict.values[name] = value;
	dict.types[name] = type;
};

exports.uuid = helpers.uuid.generate;

exports.clone = function clone(obj, shallow) {
	return Object.keys(obj).reduce(function(r, name) {
		var v = obj[name];
		if (v && typeof v === "object") {
			if (Array.isArray(v)) {
				v = v.slice(0);
				if (!shallow) v = v.map(clone);
			} else {
				v = clone(v);
			}
		}
		r[name] = v;
		return r;
	}, {});
}

exports.isInstance = function(instance) {
	return !!(instance.class && instance.properties);
}

exports.checkInstance = function(instance) {
	if (!exports.isInstance(instance)) throw new Error("value is not an instance");
}

exports.emptyArray = function(base, def) {
	// array layout is [ndims, def, data, base1, size1, base2, size2, ...
	// variable arrays impose ndims = 1
	return [1, def === undefined ? def : null, [], base === undefined ? 1 : base, 32767]; 
}