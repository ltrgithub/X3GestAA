"use strict";
var attributes  = require("etna-supervisor/lib/attributes");
var variables   = require('etna-engine/lib/runtime/variables');

function InstanceCollection(collection,parent) {
  this.collection  = collection;  
  this.lines 	     = [];
  this.isLoaded    = false;
  this.parent      = parent;
  this.bindAttributes(parent);
}

Object.defineProperty( InstanceCollection.prototype, "class", {
  get: function(){return this.collection.class;},
  enumerable: false   
});

Object.defineProperty( InstanceCollection.prototype, "load", {
  value: function(_,lines){
    this.lines    = lines;
    this.isLoaded = true;
  },
  enumerable: false   
});

Object.defineProperty( InstanceCollection.prototype, "add", {
  value: function(_,position){
    if(this.getAttribute("$isReadonly") || this.lines.length === this.collection.data.MAXCOL)  return -1;

    var instance = this.parent.supervisor.new(_, 'Instance', this.class,{}).afterCreate(_);
    instance.bindAttributes(this);

    if(position === variables.constants.CST_AFIRSTPOS) {
      this.lines.unshift(instance);
      return 0;
    } 
    this.lines.push(instance);
    return this.lines.length-1;
  },
  enumerable: false   
});

Object.defineProperty( InstanceCollection.prototype, "del", {
  value: function(_,position){
    if(this.getAttribute("$isReadonly") || !this.lines.length || position < 0 || position >= this.lines.length)  return -1;
    console.log("del before:"+this.lines.length+ "position:"+position);
    this.lines.splice(position,1);
    console.log("del after:"+this.lines.length);
    return this.lines.length-1;
  },
  enumerable: false   
});


Object.defineProperty( InstanceCollection.prototype, "index", {
  value: function(_,position){
    if(position >= this.lines.length) throw new X3Error(8, "collection index out of range :"+position);
    return this.lines[position];
  },
  enumerable: false   
});


attributes.addAttributes(InstanceCollection.prototype);
attributes.addColAttributes(InstanceCollection.prototype);
exports.InstanceCollection = InstanceCollection;