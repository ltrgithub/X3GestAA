"use strict";
var X3Error     = require("etna-engine/lib/runtime/errors").X3Error;
var attributes  = require("etna-supervisor/lib/attributes");
var snapshots   = require("etna-supervisor/lib/snapshots");
var variables   = require('etna-engine/lib/runtime/variables');

function InstanceCollection(parent,collection) {
  this.collection  = collection;  
  this.lines       = [];
  this.bindAttributes(parent);
}

Object.defineProperty( InstanceCollection.prototype, "class", {
  get: function(){
    return this.collection.class;
  },
  enumerable: false   
});

Object.defineProperty( InstanceCollection.prototype, "x3Maxtab", {
  value: function(){return this.lines.length;},
  enumerable: false   
});

Object.defineProperty( InstanceCollection.prototype, "get", {
  value :function(_) {
    if(this.$lazyLoading ) {
      //var targetClass = this.supervisor.load(_, 'Class', mapping.CLALNK);
      var childTable = this.supervisor.load(_, 'Table', this.collection.mappingData.TABLNK);
      var childIndex = childTable.indexes[0];
      var records = this.collection.class.loadInstances(_, childIndex, this.colKeys);  

      this.lines = [];
      for(var i=0;i< records.length;i++) {
        var instance = this.$parent.supervisor.new(_, 'Instance', this.collection.class,this);
        this.lines.push(instance.fromRecord(_,records[i]));       
      }
      this.$lazyLoading = false;
    }
    return this;
  },
  enumerable: false,   
});

Object.defineProperty( InstanceCollection.prototype, "fromRecord", {
  value :function(_,record) {
    if (this.collection.mappingData) {
      this.$lazyLoading = true;

      // Compute the collection keys for the lazy load :
      var exps = this.collection.mappingData.EXPLNK.split(';');
      this.colKeys = exps.map(function(exp) {
        // for now ignore [F:XXX] part - see later
        var p = exp.substring(exp.indexOf(']') + 1);
        return record[p];
      }, this);

    } else {
      // no mapping - denormalized
      //return console.error("cannot load children: " + this.collection.name), [];
      var procol = this.collection.data.PROCOL;
      if (procol === null) throw new Error(name + ": count column missing");
      
      var count = this.properties[procol];
      var children = [];
      
      if (!this.collection.class) return console.error("ignoring collection " + this.collection.name), [];

      for (var i = 0; i < count; i++) {
        var line = this.$parent.supervisor.new(_, 'Instance', this.collection.class,this);
        line.fromRecord(_,record,i);
        this.lines.push(line);
      }
      return children;
    }
  },
  enumerable: false,   
});

Object.defineProperty( InstanceCollection.prototype, "add", {
  value: function(_,position){
    if(this.getAttribute("$isReadOnly") || this.lines.length === this.collection.data.MAXCOL)  return -1;

    // Let's take snaps of the collection if necessary : 
    this.snapshots();

    var instance = this.$parent.supervisor.new(_, 'Instance', this.class, this).afterCreate(_);
    instance.bindAttributes(this);

    if(position === variables.constants.CST_AFIRSTPOS) {
      this.lines.unshift(instance);
      return 0;
    } 
    this.lines.push(instance);
    return this.lines.length-1;
  },
  enumerable: false   
});

Object.defineProperty( InstanceCollection.prototype, "del", {
  value: function(_,position){
    if(this.getAttribute("$isReadOnly") || !this.lines.length || position < 0 || position >= this.lines.length)  return -1;

    // Let's take snaps of the collection if necessary : 
    this.snapshots();
 
    this.lines.splice(position,1);
    return this.lines.length-1;
  },
  enumerable: false   
});


Object.defineProperty( InstanceCollection.prototype, "index", {
  value: function(_,position){
    if(position >= this.lines.length) throw new X3Error(8, "collection index out of range :"+position);
    return this.lines[position];
  },
  enumerable: false   
});


Object.defineProperty( InstanceCollection.prototype, "clone", {
  value: function(){
    var to =  new InstanceCollection(this.$parent,this.collection);
    to.lines = this.lines.slice(0);
    
    attributes.clone(this,to);
    to.snapshotof = this;
    return to;
  },
  enumerable: false   
});

Object.defineProperty( InstanceCollection.prototype, "revertTo", {
  value:function(to) {
    if(!this.snapshotof) return this;

    var to = this.snapshotof;  
    to.lines = [] ;
    for(var i=0,len=this.lines.length;i<len;i++) {
      var from = this.lines[i];
      to.lines[i] = from.revertTo();
      to.lines[i].releaseSnapshot(from);
    }
    attributes.revertTo(this,this.snapshotof);
    return to;
  },
  enumerable: false,   
});

Object.defineProperty( InstanceCollection.prototype, "getChildren", {
  value: function(){
    return this.lines;
  },
  enumerable: false   
});

Object.defineProperty( InstanceCollection.prototype, "updateChild", {
  value: function(from,to){
    for(var i=0, len=this.lines.length;i<len;i++) {
        if(this.lines[i] == from) {
          this.lines[i] = to;
          break;  
        }
    }
  },
  enumerable: false   
});


Object.defineProperty( InstanceCollection.prototype, "setColumnAttribute", {
  value: function(column,attribut,value) {
    this.snapshots();
    return this.setColAttribute(column,attribut,value);
  },
  enumerable: false   
});


attributes.addAttributes(InstanceCollection.prototype);
attributes.addColAttributes(InstanceCollection.prototype);
snapshots.addSnapshots(InstanceCollection.prototype);
exports.InstanceCollection = InstanceCollection;