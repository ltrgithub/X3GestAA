"use strict";
var X3Error = require("etna-engine/lib/runtime/errors").X3Error;
var attributes = require("etna-supervisor/lib/attributes");
var snapshots = require("etna-supervisor/lib/snapshots");
var variables = require('etna-engine/lib/runtime/variables');
var tracerJs = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");


function InstanceCollection(parent, collection) {
	this.supervisor = parent.supervisor;
	this.collection = collection;
	this.lines = [];
	this.bindAttributes(parent);
}

Object.defineProperty(InstanceCollection.prototype, "class", {
	get: function() {
		return this.collection.class;
	},
	enumerable: false
});

Object.defineProperty(InstanceCollection.prototype, "x3Maxtab", {
	value: function() {
		return this.lines.length;
	},
	enumerable: false
});

Object.defineProperty(InstanceCollection.prototype, "get", {
	value: function(_) {
		if (this.$lazyLoading) {
			tracerJs.debug && tracerJs.debug("this.collection.mappingData.TABLNK " + this.collection.mappingData.TABLNK);
			var childTable = this.supervisor.load(_, 'Table', this.collection.mappingData.TABLNK);
			var childIndex = childTable.indexes[0];
			this.lines = this.collection.class.loadInstances(_, childIndex, this.colKeys);
			this.$lazyLoading = false;
		}
		return this;
	},
	enumerable: false,
});

Object.defineProperty(InstanceCollection.prototype, "fromRecord", {

	value: function(_, record) {
		tracerJs.debug && tracerJs.debug("InstanceCollection.fromRecord:" + JSON.stringify(record));

		if (this.collection.mappingData) {
			this.$lazyLoading = true;
			tracerJs.debug && tracerJs.debug("this.collection.mappingData.EXPLNK " + this.collection.mappingData.EXPLNK);
			// Compute the collection keys for the lazy load :
			var exps = this.collection.mappingData.EXPLNK.split(';');
			this.colKeys = exps.map(function(exp) {
				// for now ignore [F:XXX] part - see later
				var p = exp.substring(exp.indexOf(']') + 1);
				return record[p];
			}, this);

		} else {
			// no mapping - denormalized
			var procol = this.collection.data.PROCOL;
			if (procol === null) throw new Error(name + ": count column missing");

			var count = record[procol];

			if (!this.collection.class) return console.error("ignoring collection " + this.collection.name), [];

			for (var i = 0; i < count; i++) {
				var line = this.$parent.supervisor.new(_, 'Instance', this.collection.class, this).afterCreate(_);
				line.fromRecord(_, record, i);
				this.lines.push(line);
			}
		}
	},
	enumerable: false,
});

Object.defineProperty(InstanceCollection.prototype, "add", {
	value: function(_, position) {
		if (this.getAttribute("$isReadOnly") || this.lines.length === this.collection.data.MAXCOL) return -1;

		// Let's take snaps of the collection if necessary : 
		this.snapshots();

		var instance = this.$parent.supervisor.new(_, 'Instance', this.class, this).afterCreate(_);
		instance.bindAttributes(this);

		if (position === variables.constants.CST_AFIRSTPOS) {
			this.lines.unshift(instance);
			return 0;
		}
		this.lines.push(instance);
		return this.lines.length - 1;
	},
	enumerable: false
});

Object.defineProperty(InstanceCollection.prototype, "del", {
	value: function(_, position) {
		if (this.getAttribute("$isReadOnly") || !this.lines.length || position < 0 || position >= this.lines.length) return -1;

		// Let's take snaps of the collection if necessary : 
		this.snapshots();

		this.lines.splice(position, 1);
		return this.lines.length - 1;
	},
	enumerable: false
});

Object.defineProperty(InstanceCollection.prototype, "index", {
	value: function(_, position) {
		if (position >= this.lines.length) throw new X3Error(8, "collection index out of range :" + position);
		return this.lines[position];
	},
	enumerable: false
});

Object.defineProperty(InstanceCollection.prototype, "clone", {
	value: function() {
		var to = new InstanceCollection(this.$parent, this.collection);
		to.lines = this.lines.slice(0);

		attributes.clone(this, to);
		to.snapshotof = this;
		return to;
	},
	enumerable: false
});

Object.defineProperty(InstanceCollection.prototype, "revertTo", {
	value: function(to) {
		if (!this.snapshotof) return this;

		var to = this.snapshotof;
		to.lines = [];
		for (var i = 0, len = this.lines.length; i < len; i++) {
			var from = this.lines[i];
			to.lines[i] = from.revertTo();
			to.lines[i].releaseSnapshot(from);
		}
		attributes.revertTo(this, this.snapshotof);
		return to;
	},
	enumerable: false,
});

Object.defineProperty(InstanceCollection.prototype, "getChildren", {
	value: function() {
		return this.lines;
	},
	enumerable: false
});

Object.defineProperty(InstanceCollection.prototype, "updateProperty", {
	value: function(from, to) {
		for (var i = 0, len = this.lines.length; i < len; i++) {
			if (this.lines[i] == from) {
				this.lines[i] = to;
				break;
			}
		}
	},
	enumerable: false
});

Object.defineProperty(InstanceCollection.prototype, "setColumnAttribute", {
	value: function(column, attribut, value) {
		this.snapshots();
		return this.setColAttribute(column, attribut, value);
	},
	enumerable: false
});

attributes.addAttributes(InstanceCollection.prototype);
attributes.addColAttributes(InstanceCollection.prototype);
snapshots.addSnapshots(InstanceCollection.prototype);
exports.InstanceCollection = InstanceCollection;