"use strict";
var X3Error     = require("etna-engine/lib/runtime/errors").X3Error;
var attributes  = require("etna-supervisor/lib/attributes");
var snapshots   = require("etna-supervisor/lib/snapshots");
var variables   = require('etna-engine/lib/runtime/variables');

function InstanceCollection(name,collection,parent,lines) {
  this.name        = name;
  this.collection  = collection;  
  this.lines 	     = lines || [];
  this.parent      = parent;
  this.bindAttributes(parent);
}

Object.defineProperty( InstanceCollection.prototype, "class", {
  get: function(){return this.collection.class;},
  enumerable: false   
});

Object.defineProperty( InstanceCollection.prototype, "x3Maxtab", {
  value: function(){return this.lines.length;},
  enumerable: false   
});


Object.defineProperty( InstanceCollection.prototype, "load", {
  value: function(_,lines){
    this.lines     = lines;
  },
  enumerable: false   
});

Object.defineProperty( InstanceCollection.prototype, "isLoaded", {
  get: function(){
    return  !!this.lines.length;
  },
  enumerable: false   
});

Object.defineProperty( InstanceCollection.prototype, "add", {
  value: function(_,position){
    if(this.getAttribute("$isReadonly") || this.lines.length === this.collection.data.MAXCOL)  return -1;

    // Let's take snaps of the collection if necessary : 
    this.snapshots();

    var instance = this.parent.supervisor.new(_, 'Instance', this.class, this).afterCreate(_);
    instance.bindAttributes(this);

    if(position === variables.constants.CST_AFIRSTPOS) {
      this.lines.unshift(instance);
      return 0;
    } 
    this.lines.push(instance);
    return this.lines.length-1;
  },
  enumerable: false   
});

Object.defineProperty( InstanceCollection.prototype, "del", {
  value: function(_,position){
    if(this.getAttribute("$isReadonly") || !this.lines.length || position < 0 || position >= this.lines.length)  return -1;

    // Let's take snaps of the collection if necessary : 
    this.snapshots();
 
    this.lines.splice(position,1);
    return this.lines.length-1;
  },
  enumerable: false   
});


Object.defineProperty( InstanceCollection.prototype, "index", {
  value: function(_,position){
    if(position >= this.lines.length) throw new X3Error(8, "collection index out of range :"+position);
    return this.lines[position];
  },
  enumerable: false   
});


Object.defineProperty( InstanceCollection.prototype, "clone", {
  value: function(){
    var to =  new InstanceCollection(
      this.name,
      this.collection,
      this.parent,
      this.lines.slice(0));
    
    attributes.clone(this,to);
    to.snapshotof = this;
    return to;
  },
  enumerable: false   
});

Object.defineProperty( InstanceCollection.prototype, "revertTo", {
  value:function(to) {
    if(!this.snapshotof) return this;

    var to = this.snapshotof;  
    to.lines = [] ;
    for(var i=0,len=this.lines.length;i<len;i++) {
      var from = this.lines[i];
      to.lines[i] = from.revertTo();
      to.lines[i].releaseSnapshot(from);
    }
    attributes.revertTo(this,this.snapshotof);
    return to;
  },
  enumerable: false,   
});

Object.defineProperty( InstanceCollection.prototype, "getChildren", {
  value: function(){
    return this.lines;
  },
  enumerable: false   
});

Object.defineProperty( InstanceCollection.prototype, "updateChild", {
  value: function(from,to){
    for(var i=0, len=this.lines.length;i<len;i++) {
        if(this.lines[i] == from) {
          this.lines[i] = to;
          break;  
        }
    }
  },
  enumerable: false   
});


Object.defineProperty( InstanceCollection.prototype, "setColumnAttribute", {
  value: function(column,attribut,value) {
    console.log("collection.setColumnAttribute column:"+column);
    this.snapshots();
    console.log("collection.setColumnAttribute =>setColAttribute column:"+column);
    return this.setColAttribute(column,attribut,value);
  },
  enumerable: false   
});


attributes.addAttributes(InstanceCollection.prototype);
attributes.addColAttributes(InstanceCollection.prototype);
snapshots.addSnapshots(InstanceCollection.prototype);
exports.InstanceCollection = InstanceCollection;