"use strict";

var glob = require('streamline/lib/globals');
var util = require("etna-supervisor/lib/util");
var bcd = require("etna-engine/lib/runtime/bcd");
var runtime = require("etna-engine/lib/runtime/runtime");
var datetime = require('etna-engine/lib/runtime/tdatetime');
var date = require('etna-engine/lib/runtime/tdate');
var ASYR = require("etna-supervisor/lib/builtins/ASYR");
var HttpError = util.HttpError;

var tracerJs = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");

function loadScript(_, script) {
	try {
		return runtime.requireScript(_, "WF" + script);
	} catch (e) {
		throw new HttpError(404, "query not found: " + script);
	}
}

exports.proto = function(_, superv, script, query, facet) {
	var mod = loadScript(_, script);
	var psyr = new(ASYR.constructor)(superv);

	var args = {
		ACTX: {
			type: "AY",
			value: glob.context.x3session.actx
		},
		PSYR: {
			type: "AY",
			value: psyr
		},
		WCLOB: {
			type: "AT",
			value: ""
		},
		TIME_UPD: {
			type: "AN",
			value: bcd.fromDouble(0)
		},
		LEVEL_NUM: {
			type: "BS",
			value: query
		},
		TYPE_REPRES: {
			type: "BS",
			value: facet
		}
	};
	runtime.executeProg(_, mod, "PROTO_JSON", args);
	return args.WCLOB.value;
};

/*
Frequency of computation : 1=always, 2=every hour, 3=every day, 4=every week, 5=every month, 6=never
execution_time is assigned as a time stamp numeric value (if 0, recomputation is not required)
*/
function getExecutionTime(frq, forced_exec) {
	var execution_time = 0;
	if (!frq) {
		forced_exec = true;
		return execution_time;
	}

	var now = datetime.now();
	switch (frq) {
		case 1:
			forced_exec = true;
			break;
		case 2, 3, 4, 6:
			execution_time = (frq !== 6) * now - (frq === 2) * (3600 * 1000) - (frq === 3) * 24 * 3600 * 1000 - (frq === 4) * 7 * 24 * 3600 * 1000;
			break;
		case 5:
			execution_time = 24 * 3600 * 1000 * (now.x3Nday(date.make(1700, 1, 1))) - 1;
			break;
		case 7:
			execution_time = now - (60 * 10000);
			break;
		case 8:
			execution_time = now - (60 * 1000);
			break;
		case 9:
			execution_time = now - (10 * 1000);
			break;
	}
	return execution_time;
}

exports.query = function(_, httpContext, script, query) {
	tracerJs.debug && tracerJs.debug("query " + script + " " + query);
	var qs = httpContext.qs;

	// Define the program and check if it exists
	var mod = loadScript(_, script);

	var actx = glob.context.x3session.actx;
	var psyr = new(ASYR.constructor)(httpContext.superv);

	// Local Char PARAM(15)(1..100),
	// Local  Libelle PARTYPE(1..100)
	// Local Char PROGNAME(20)
	// Local Char MSG(250)
	// Local Integer ERR,,MAXLEVEL,FIRSTLINE
	// Local Date COMPDATE : # Not yet used, returns the computation date
	// Local Integer OK, ,TBSIZE
	// Local Integer BATCHID
	// Local Integer STARTIND
	// Local Char PORTVIEW(20)
	// Local Date NOWDAT
	// Local Decimal EXECUTION_TIME,NOW
	// Local Integer J,FRQ
	// Local Char PAR_VAL(30)
	// Local Char REQUEST_CODE(30)

	// # Modification October 22,2014: handle the calendar presentation
	// Local Clbfile CALENDAR_PROTO(1)
	// Local Integer K1,K2
	// Local Char K1F(250),K2F(250)
	// Local Char FIELDS(20)(1..)
	// Local Integer NBFIELDS

	//   If clalev([APV]) : LogicClose File [APV] : Endif : Local File APTLVW [APV]
	//   If clalev([ACC]) : LogicClose File [ACC] : Endif : Local File ACCES [ACC]
	//   If clalev([ALH]) : LogicClose File [ALH] : Endif : Local File ALISTEH [ALH]
	//   If clalev([AUS]) : LogicClose File [AUS] : Endif : Local File AUTILIS [AUS]
	//   If clalev([AFT]) : LogicClose File [AFT] : Endif : Local File AFCTFCT [AFT]
	//   If clalev([AFP]) : LogicClose File [AFP] : Endif : Local File AFCTPRF [AFP]
	//   If clalev([AME]) : LogicClose File [AME] : Endif : Local File AMETUTI [AME]

	//   Forced request id (only for batch computations)
	var ifbulk;
	var uuireq = "";
	var nblig = [1, 0, [], 1, 20]; // NBLIG(1..20)
	var valbeg = [1, "", [], 1, 100]; // VALBEG(250)(1..100)
	var valend = [1, "", [], 1, 100]; // VALEND(250)(1..100)
	var strictbeg = [1, 0, [], 1, 100]; // STRICTBEG(1..100)
	var strictend = [1, 0, [], 1, 100]; // STRICTEND(1..100)

	// Let's analyze the parameters sent in the URL
	var limits = [1, 0, [], 1, 2]; // LIMITS(1..2)

	var args = {
		PARAM: {
			type: 'AS',
			value: [1, "", [], 1, null]
		},
		PARTYPE: {
			type: 'AI',
			value: [1, 0, [], 1, null]
		},
		MAXLEVEL: {
			type: 'AI',
			value: 0
		},
		IFSHARED: {
			type: 'AI',
			value: 0
		}
	};
	tracerJs.debug && tracerJs.debug("requester.GET_PARAMS args:" + JSON.stringify(args));
	runtime.executeProg(_, mod, "GET_PARAMS", args);
	tracerJs.debug && tracerJs.debug("requester.GET_PARAMS return:" + JSON.stringify(args));

	var param = args.PARAM.value;
	var partype = args.PARTYPE.value;
	var maxlevel = args.MAXLEVEL.value;
	var ifshared = args.IFSHARED.value;

	var forced_exec = (qs.forcedExecution.toLowerCase() === "true");
	var where = qs.Where || "";
	var level = qs.level || 0;
	limits[2][0] = qs.linesLimit || 0;
	limits[2][1] = qs.timeLimit || 0;
	var requid = qs.requestID || "";
	var firstline = Math.max([qs.startRecord || 0, qs.startIndex || 0, 1]);
	var startind = qs.startIndex || 0;
	var nblines = qs.count || qs.recordsPerPage || 0;
	if (!nblines) {
		if (httpContext.facet === "$bulk") {
			nblines = actx.APARAM.AGETUSERVALNUM(_, "NBRREQBLK")
			nblines = nblines || 200;
			ifbulk = true;
		} else {
			nblines = actx.APARAM.AGETUSERVALNUM(_, "NBRREQ")
			nblines = nblines || 20;
			ifbulk = false
		}
	}
	var portview = qs.portview;
	var frq = qs.frequency;
	var execution_time = getExecutionTime(frq, forced_exec);

	// Let's check the habilitations (added September 13, 2013)
	var superadmin = actx.APARAM.AGETVALCHAR(_, "ALEVFOLD", nomap, 'ADMUSR')
	var codmet = actx.$CODMET(_);
	//     If [AUS]CODMET<>""
	//        Read [AME]AME0=[AUS]CODMET
	//        If fstat<>0
	//         ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,mess(30,149,1))
	//          Return : # Error when accessing user rights data
	//        Endif
	//        Read [AFT]AFT0=[AME]PRFFCT
	//     Else
	//       Read [AFT]AFT0=[AUS]PRFFCT
	//     Endif

	//   If fstat
	//     ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,mess(30,149,1))
	//     Return : # Error when accessing user rights data
	//   Endif

	//   If [AFT]PRFCOD<>SUPERADMIN
	//     Read [ALH]ALH0=REQUEST_CODE
	//     If fstat
	//       REPRESENTATION=KEYVAL(1)
	//       ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,func ASYRFNC.MES1(mess(26,149,1),PSYR.CODREP))
	//       Return
	//     Elsif [ALH]ACS<>"" & [AFT]ALLACS<>2 & [ALH]ALLUSR<>2
	//       Read [ACC]CODACC = GACTX.USER;[F:ALH]ACS
	//       If fstat or [F:ACC]CONSUL<>2
	//         J=instr(1,REPRESENTATION,"~99") : If J : REPRESENTATION=left$(REPRESENTATION,J) : Endif
	//         ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_FORBIDDEN,func ASYRFNC.MES1(mess(29,149,1),PSYR.CODREP))
	//         Return : # Access denied
	//       Endif
	//     Endif
	//     # Access to the function : it must at least be available on a group
	//     If [ALH]FCTLNK<>"" & [ALH]ALLUSR<>2 & [AFT]ALLFCT<>2
	//       J=0
	//       For [AFP] Where PRFCOD=[AFT]PRFCOD and FNC=[ALH]FCTLNK and ACS=2
	//         J=1 : Break
	//       Next
	//       If J=0
	//         J=instr(1,REPRESENTATION,"~99") : If J : REPRESENTATION=left$(REPRESENTATION,J) : Endif
	//         ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_FORBIDDEN,func ASYRFNC.MES1(mess(29,149,1),PSYR.CODREP))
	//         Return : # Access denied
	//       Endif
	//     Endif
	//   Endif

	// # If a portal view set of parameters exists, we have to manage the execution time and the level
	//   If PORTVIEW<>""
	//     Read [APV]APV0=PORTVIEW
	//     If fstat=0
	//       For PAR_VAL='FRQ','INITLEVEL'
	//         J=find(PAR_VAL,[APV]SRCPARCOD(0..dim([APV]SRCPARCOD)-1))
	//         If J
	//           Case PAR_VAL
	//             When 'FRQ'
	//             # Frequency of computation : 1=always, 2=every hour, 3=every day, 4=every week, 5=every month, 6=never
	//             # EXECUTION_TIME is assigned as a time stamp numeric value (if 0, recomputation is not required)
	//               FRQ=val(func EVALCHAR([APV]SRCPARFOR(J-1)))
	//               Gosub FRQ_SET
	//             When "INITLEVEL" : # Modification done the 16th of September 2013 : level=99 added
	//               If LEVEL=0 or LEVEL=99 : LEVEL=val(func EVALCHAR([APV]SRCPARFOR(J-1))) : Endif
	//           Endcase
	//         Endif
	//       Next

	//       # Dom October 14, 2014
	//       # If a calendar is used:
	//       # - first, get the list of fields by calling a new subprogram (FIELDS) in the generated script
	//       # - second, create the JSON prototype complement that maps the fields with the calendar
	//       If find([APV]CMPCODTYP,"FCA","FCC")
	//         Call FIELDS(FIELDS,NBFIELDS) From=PROGNAME

	//         K1=find("FCDATEDEB",[APV]CMPPARCOD)
	//         K2=find("FCHEURDEB",[APV]CMPPARCOD)
	//         K1F=""
	//         K2F=""
	//         If K1<>0 : K1F=func FIELDS_LIST([APV]CMPPARFOR(K1-1),FIELDS,NBFIELDS):Endif
	//         If K2<>0 : K2F=func FIELDS_LIST([APV]CMPPARFOR(K2-1),FIELDS,NBFIELDS):Endif
	//         If K1F<>""
	//           CALENDAR_PROTO+=string$(CALENDAR_PROTO<>"",",")+'"start":['+K1F
	//           If K2F<>""
	//             CALENDAR_PROTO+=','+K2F
	//           Endif
	//           CALENDAR_PROTO+="]"
	//         Endif

	//         K2=find("FCHEURFIN",[APV]CMPPARCOD)
	//         K2F=""
	//         If K2<>0 : K2F=func FIELDS_LIST([APV]CMPPARFOR(K2-1),FIELDS,NBFIELDS):Endif
	//         If K1F<>""
	//           CALENDAR_PROTO+=string$(CALENDAR_PROTO<>"",",")+'"end":['+K1F
	//           If K2F<>""
	//             CALENDAR_PROTO+=','+K2F
	//           Endif
	//           CALENDAR_PROTO+="]"
	//         Endif

	//         K1=find("FCTITRE",[APV]CMPPARCOD)
	//         K1F=""
	//         If K1<>0 : K1F=func FIELDS_LIST([APV]CMPPARFOR(K1-1),FIELDS,NBFIELDS):Endif
	//         If K1F<>""
	//           CALENDAR_PROTO+=string$(CALENDAR_PROTO<>"",",")+'"summary":['+K1F+']'
	//         Endif

	//         K1=find("FCTEXTE",[APV]CMPPARCOD)
	//         K1F=""
	//         If K1<>0 : K1F=func FIELDS_LIST([APV]CMPPARFOR(K1-1),FIELDS,NBFIELDS):Endif
	//         If K1F<>""
	//           CALENDAR_PROTO+=string$(CALENDAR_PROTO<>"",",")+'"description":['+K1F+']'
	//         Endif

	//       Endif
	//     Endif
	//   Endif

	// Set some default values
	level = Math.max(Math.min([level, maxlevel]), 1);


	//  Analyze the where sentence
	//   Call PARSE_WHERE(QWHERE,PARAM,PARTYPE,VALBEG,STRICTBEG,VALEND,STRICTEND,ERR,MSG) From ASYRFNC
	//   If ERR
	//     Call TRACE(func AFNC.MES1(MESSAGE, MSG)) From ASYRCOM
	//     Call SPLIT(KEYS,PSYR.SELREP,"~") From ASYRSUB
	//     ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,func ASYRFNC.MES1(mess(27,149,1),KEYS(1)))
	//     Return
	//   Endif
	//   OK=0
	//   ERRNUM=0

	// # Let's analyse first_xxx and last_xxx parameters if QWHERE is empty
	//   If QWHERE=""
	//     Onerrgo NOTHING
	//     Call PARSE_PARAM(ARCV,VALBEG,VALEND,STRICTBEG,STRICTEND) From =PROGNAME
	//   Endif

	// Get the recomputation parameter
	var line_limit = actx.APARAM.AGETVALNUM(_, 1, "", "SELWARN") || 10000;

	// If unique id not set, and ( forced execution requested, or request type = recalculated), execute first
	if (requid === "" && (forced_exec || ifshared === 3)) {

		if (actx.APARAM.AGETVALNUM(_, 1, "", "TYPDBA") === 1) {
			//Call GET_NBREC_ORACLE(TBSIZE) From=PROGNAME
		} else {
			//Call GET_NBREC_SQL(TBSIZE) From=PROGNAME
		}
		if (tbsize > line_limit) {
			//Gosub RQTBATCH
		} else {
			var args = {
				ACTX: {
					type: "AY",
					value: actx
				},
				VALBEG: {
					type: "AS",
					value: valbeg
				},
				VALEND: {
					type: "AS",
					value: valend
				},
				STRICTBEG: {
					type: "AI",
					value: strictbeg
				},
				STRICTEND: {
					type: "AI",
					value: strictend
				},
				LIMITS: {
					type: 'BI',
					value: limits
				},
				NBLIG: {
					type: 'AI',
					value: nblig
				},
				REQUID: {
					type: 'AS',
					value: requid,
				},
				UUIREQ: {
					type: 'BS',
					value: uuireq
				}
			};
			Object.keys(args).filter(function(key) {
				return key !== 'ACTX';
			}).forEach(function(key) {
				tracerJs.debug && tracerJs.debug(">>requester.EXEC_RQT " + key + "=" + JSON.stringify(args[key]));
			});
			runtime.executeProg(_, mod, "EXEC_RQT", args);
			Object.keys(args).filter(function(key) {
				return key !== 'ACTX';
			}).forEach(function(key) {
				tracerJs.debug && tracerJs.debug("<<requester.EXEC_RQT " + key + "=" + JSON.stringify(args[key]));
			});

			//       Gosub GETRQT
			//     Endif
			// # Otherwise, try to read it first
			//   Else
			//     Gosub GETRQT

			//     # If the request was never executed, or if the parameter don't fit
			//     If find(OK,3,5)
			//       If fmet GACTX.APARAM.AGETVALNUM(1,"","TYPDBA")=1
			//         Call GET_NBREC_ORACLE(TBSIZE) From=PROGNAME
			//       Else
			//         Call GET_NBREC_SQL(TBSIZE) From=PROGNAME
			//       Endif
			//       If TBSIZE>LINE_LIMIT
			//         Gosub RQTBATCH
			//       Else
			//         OK=0
			//         # Added a reexecution Dec 10, 2012
			//         Call EXEC_RQT(GACTX,VALBEG,VALEND,STRICTBEG,STRICTEND,LIMITS,NBLIG,REQUID,UUIREQ) From =PROGNAME
			//         Gosub GETRQT
			//       Endif
			//     Endif
			//   Endif

			//   Case OK
			//     When 2 :
			//      Call SPLIT(KEYS,PSYR.SELREP,"~") From ASYRSUB
			//      ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,func ASYRFNC.MES1(mess(27,149,1),KEYS(1)))
			//     When 4 :
			//      # Access rights error
			//      ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_FORBIDDEN,func ASYRFNC.MES1(mess(29,149,1),PSYR.CODREP))
			//     When 6 :
			//      ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,func ASYRFNC.MES1(mess(28,149,1),PSYR.CODREP))
			//     When 7 :
			//       # TODO : error in transaction for posting the batch request
			//       ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,func ASYRFNC.MES1(mess(28,149,1),PSYR.CODREP))
			//   Endcase

			//   If OK=0
			//     ERRNUM=0
			//     ASND.STAT     = 200
			//     ASND.URL      = PSYR.PREFIX+'/'+REPRESENTATION
			//     ASND.CONTTYPE = PSYR.CNTPRE+"."+nomap+"."+REPRESENTATION+"."+httpContext.facet
			//   Elsif OK=1
			//     ERRNUM=0
			//     ASND.STAT     = 202
			//     ASND.URL      = PSYR.PREFIX+'/'+REPRESENTATION
			//     ASND.CONTTYPE = PSYR.CNTPRE+"."+nomap+"."+REPRESENTATION+"."+httpContext.facet
			//     ASND.DATA     = '{"headerMessage":"'+func AFNC.MES1(func AJSONLIB.M(glob.context.x3session.actx.LAN(_),146,24),num$(BATCHID)-UUIREQ)+'"}'
			//    Endif
			// Return
		}
	}
	return {};
}