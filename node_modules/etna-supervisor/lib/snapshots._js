"use strict";
var X3Error = require("etna-engine/lib/runtime/errors").X3Error;
var attributes = require("etna-supervisor/lib/attributes");

var snapshots = ["Snapshot", "Syssnapshot"];

function addSnapshots(_prototype) {

	snapshots.forEach(function(snapshot) {
		var lsnapshot = snapshot.toLowerCase();

		var property = "$" + lsnapshot;
		var attEnable = "$is" + snapshot + "Enabled";

		_prototype["enable" + snapshot] = function() {
			this.setIntAttribute(attEnable, true);
			//! console.log(attEnable + ":"+ this.getIntAttribute(attEnable));
		};

		_prototype["revertTo" + snapshot] = function() {
			this.setIntAttribute(attEnable, false);
			var from = this[property];
			var to = from.revertTo();
			// release the snapshot : 
			to[property] = undefined;
		};

		_prototype["disable" + snapshot] = function() {
			this.setIntAttribute(attEnable, false);
			//! console.log(attEnable + ":"+ this.getIntAttribute(attEnable));

			// Release the "$snapshot" property
			this[property] = undefined;

			// propagate disable to children : 
			var _this = this;
			var children = _this.getChildren();

			Object.keys(children).forEach(function(child) {
				if (children[child]["disable" + snapshot]) children[child]["disable" + snapshot]();
			});
		};

		_prototype[lsnapshot] = function() {
			//! console.log("snapshot.snapshot:"+lsnapshot);

			//! console.log(attEnable+" : "+this.getIntAttribute(attEnable));
			if (!this.getIntAttribute(attEnable)) return null;

			if (this.snapshotof) {
				// Cannot create a snapshot of a snapshot :
				throw new X3Error(155, "");
			}

			if (this.getIntAttribute(attEnable) && !this[property]) {
				// Let's create the snapshot by cloning 'this'
				//! console.log("snapshot.snapshot create");
				var clone = this.clone();
				this[property] = clone;
				if (this.$parent) {
					//! console.log("snapshot.snapshot create->parent");

					// Set the parent of the snapshot :
					// this.parent[snapshot]() create the parent's snapshot if necessary !
					var parent = this.$parent[lsnapshot]();
					clone.$parent = parent;
					// update parent with the newly created snapshot :
					(parent) && parent.updateProperty(this, clone);
				}
				clone.$_isReadOnly = true;
			}
			// Return the snapshot :
			//! console.log("< snapshot")
			return this[property];
		};
	});

	// Add a function 'snapshots' to the prototype :
	_prototype.snapshots = function() {
		var _this = this;
		//! console.log("snapshot.snapshots");
		snapshots.forEach(function(snapshot) {
			_this[snapshot.toLowerCase()]();
		});
	};

	// Add a function 'releaseSnapshot' to the prototype :
	_prototype.releaseSnapshot = function(instance) {
		var _this = this;
		//! console.log("snapshot.snapshots");
		snapshots.some(function(snapshot) {
			var property = "$" + snapshot.toLowerCase();
			if (_this[property] == instance) {
				_this[property] = undefined;
				return true;
			}
			return false;
		});
	};

}

exports.addSnapshots = addSnapshots;
exports.getIntAttributes = addSnapshots;