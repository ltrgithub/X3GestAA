"use strict";
var X3Error     = require("etna-engine/lib/runtime/errors").X3Error;
var attributes  = require("etna-supervisor/lib/attributes");

var snapshots = ["Snapshot","Syssnapshot"];

function addSnapshots(_prototype) {

  snapshots.forEach(function(snapshot) {
    var lsnapshot = snapshot.toLowerCase();

    var property  = "$"+lsnapshot;
    var attEnable = "$is"+snapshot+ "Enabled";

    // Add a property '$snapshot' to the prototype :
    Object.defineProperty( _prototype, property, {
      value :null,
      writable: true,
      enumerable: false   
    });

    Object.defineProperty( _prototype, "enable"+snapshot, {
      value: function(){
        this.setIntAttribute(attEnable,true);  
        //! console.log(attEnable + ":"+ this.getIntAttribute(attEnable));
      },
      enumerable: false   
    });

    Object.defineProperty( _prototype, "disable"+snapshot, {
      value: function(){
        this.setIntAttribute(attEnable,false);
        //! console.log(attEnable + ":"+ this.getIntAttribute(attEnable));

        // Release the "$snapshot" property
        this[property]  = undefined; 
        
        // propagate disable to children : 
        var _this    = this;
        var children = _this.getChildren();

        Object.keys(children).forEach(function(child) {
          children[child]["disable"+snapshot]();
        });
      },
      enumerable: false   
    });

    Object.defineProperty( _prototype, lsnapshot, {
      value: function() {
        //! console.log("snapshot.snapshot:"+lsnapshot);

        //! console.log(attEnable+" : "+this.getIntAttribute(attEnable));
        if(!this.getIntAttribute(attEnable)) return null;

        if(this.getIntAttribute("$isSnapshot")) {
          // Cannot create a snapshot of a snapshot :
          throw new X3Error(155, "") ;
        }

        if(this.getIntAttribute(attEnable) && !this[property]) {
          // Let's create the snapshot by cloning 'this'
          //! console.log("snapshot.snapshot create");
          var clone = this.clone();
          this[property] = clone;
          if(this.parent) {
            //! console.log("snapshot.snapshot create->parent");

            // Set the parent of the snapshot :
            // this.parent[snapshot]() create the parent's snapshot if necessary !
            var parent = this.parent[lsnapshot]();
            clone.parent = parent;
            // update parent with the newly created snapshot :
            parent.updateChild(this,clone);
          }
          // Protect the clone: 
          clone.setIntAttribute("$isSnapshot",true);
          clone.$_isReadonly  = true;
        }
        // Return the snapshot :
        //! console.log("< snapshot")
        return this[property];
       },
      enumerable: false   
    });
  });

  // Add a property '$snapshot' to the prototype :
  Object.defineProperty( _prototype, "snapshots", {
    value :function() {
      var _this = this;
      //! console.log("snapshot.snapshots");
      snapshots.forEach(function(snapshot) {
        _this[snapshot.toLowerCase()]();
      })
    },
    writable: true,
    enumerable: false   
  });  
}

exports.addSnapshots     = addSnapshots;
exports.getIntAttributes = addSnapshots;