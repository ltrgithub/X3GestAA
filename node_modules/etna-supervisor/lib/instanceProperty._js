"use strict";
var attributes  = require("etna-supervisor/lib/attributes");
var X3Error     = require("etna-engine/lib/runtime/errors").X3Error;

function InstanceProperty(value,parent,name,resources) {
	this._value 	   = value;
  // care of the name if and only if the property belongs to 
  // an instance which which belongs to a collection : 
	this.name 		   = name;
  this.bindAttributes(parent,resources);
 }

Object.defineProperty( InstanceProperty.prototype, "value", {
  set:function(value) {
    if(!this.getAttribute("$isReadonly"))  this._value   = value;
    else throw new X3Error(147,(this.name?this.name:'')+ "is readonly");
  },
  get :function() {
    return this._value;
  },
  enumerable: false,   
}) ;

Object.defineProperty( InstanceProperty.prototype, "clone", {
  value:function(parent) {
    var ip = new InstanceProperty(this.value,parent,this.name);
    attributes.cloneAttributes(this,ip);
    return ip;
  },
  enumerable: false,   
}) ;

attributes.addAttributes(InstanceProperty.prototype);
exports.InstanceProperty = InstanceProperty;