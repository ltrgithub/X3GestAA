"use strict";
var constants = require("etna-supervisor/lib/constants");

var attributes = require("etna-supervisor/lib/attributes");
var X3Error = require("etna-engine/lib/runtime/errors").X3Error;
var format = require('etna-engine/lib/runtime/format');
var util = require('etna-engine/lib/runtime/util');
var tracerJs = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");
var helpers = require("syracuse-core/lib/helpers");


var InstanceProperty = exports.InstanceProperty = helpers.defineClass(function(parent, property) {
	// care of the name if and only if the property belongs to 
	// an instance which which belongs to a collection : 
	if (property.type) {
		this.property = property;
		this._value = this.property.type.defaultValue;
	} else {
		this.property = {
			name: ""
		};
		this._value = property;
	}
	this.bindAttributes(parent);
	if (this.property.$x3Format) this.$x3Format = this.property.$x3Format;
}, null, {
	name: {
		get: function() {
			return this.property.name;
		},
		enumerable: false,
	},
	column: {
		get: function() {
			return (this.property.column) ? this.property.column.name : undefined;
		},
		enumerable: false,
	},
	value: {
		set: function(value) {
			if (!this.getAttribute("$isReadOnly")) this._value = value;
			else throw new X3Error(147, (this.name ? this.name : '') + "is readonly");
		},
		get: function() {
			return this._value;
		},
		enumerable: false,
	},
	isUndefined: {
		get: function() {
			return this._value === undefined || (this._value.x3IsUndefined && this._value.x3IsUndefined());
		},
		enumerable: false,
	},
	deleteDiagnoses: function(_) {
		this.diagnoses = undefined;
	},
	isAtextra: {
		get: function() {
			return this.property.isAtextra;
		},
		enumerable: false,
	},
	isText: {
		get: function() {
			return this.property.isText;
		},
		enumerable: false,
	},
	updateAtextra: function(_) {
		return this.property.updateAtextra(_, this.$parent, this._value);
	},
	deleteAtextra: function(_) {
		return this.property.deleteAtextra(_, this.$parent);
	},
	updateText: function(_) {
		if (typeof this._value === 'string') {
			this._value = this.$parent.supervisor.findText(_, this._value) || 0;
			//TODO this.$parent.supervisor.addText(_, this._value);
		}
	},
	getDiagnoses: function(_) {
		if (this.diagnoses) {
			var self = this;
			return this.diagnoses.map(function(d) {
				d.PRO = self.name;
				return d;
			});
		} else return [];
	},
	addDiagnose: function(_, severity, message, category) {
		this.diagnoses = this.diagnoses || [];
		this.diagnoses.push(this.$parent.supervisor.new(_, 'Diagnosis', severity, message, category));
		return severity;
	},

	controlFormat: function(_) {
		var isFormatInvalid = false;

		var fmt = this.$x3Format;
		if (fmt) {
			// string
			var formattedValue = format.format(fmt, this._get(_, true));
			var value = util.x3Trim(this._value, 2);
			formattedValue = util.x3Trim(formattedValue, 2);
			isFormatInvalid = value !== formattedValue;
		} else if (this.property.type.data.TYPTYP === 1 && this.property.data.NOLIB) {
			// local menu
			var menu = this.$parent.supervisor.loadEnum(_, this.property.data.NOLIB);
			isFormatInvalid = menu && menu.length && (this._value < menu[0].$value || this._value > menu[menu.length - 1].$value);
		}
		if (isFormatInvalid)
			return this.addDiagnose(_, constants.CST_AERROR, this.$parent.supervisor.loadMess(_, 100, 149));

		return constants.CST_AOK;
	},
	controlOthers: function(_) {
		if (false) // TODO
			this.addDiagnose(_,
				constants.CST_AERROR,
				this.$parent.supervisor.loadMess(_, 123, 83));
		return false;
	},
	_get: function(_, raw) {
		if (this.property && this.property.data) {
			if (this.property.isAtextra && this._value === undefined) {
				this._value = this.$parent.class.cache.texts.properties[this.name].loadText(_, this._textId);
			} else if (this.property.isText && typeof this._value !== 'string') {
				// The texte is cached by the supervisor:
				this._value = this.$parent.supervisor.loadText(_, this._value || 0) || "";
			}
		}
		// Call the GET accessor if and only if is set in the dictionary
		if (!raw && this.property.data && this.property.data.FLGACCGET === 2) {
			//  Add a _getCalls member if and only if the GET event has to be supported
			this._getCalls = (this._getCalls || 0) + 1;
			//dbg:console.error("DBG property " + this.name + " GET -> this._getCalls:" + this._getCalls);
			if (this._getCalls === 1) this.$parent.propertyGetValue(_, this.name);
			this._getCalls -= 1;
		}
		//dbg:console.error("DBG property " + this.name + " GET = " + this._value + " (" + typeof this._value + "):"+this._value);
		return this._value;
	},
	/*
	_get cannot be used for database operations because it returns a string instread of an id
	for text
	*/
	_getSql: function(_) {
		if (this.property.isText) {
			// Insert a number instead of a string in the database !
			return (typeof this._value === 'string') ? 0 : this._value;
		}
		return this._get(_, true);
	},
	_set: function(_, value, raw) {
		//dbg:console.error("property " + this.name + " SET -> " + value + " (type :"+ this.property.type.etnaType+ ")");
		if (this.getAttribute("$isReadOnly")) {
			throw new X3Error(147, (this.name ? this.name : '') + " is readonly");
		}
		// get the current value
		if (!raw) var oldValue = {
			type: "L" + this.property.type.etnaType,
			value: (this._value !== undefined) ? this._value : this.property.type.defaultValue
		};

		if (value === undefined) {
			// undefined = RAZ of the property !
			raw = true;
			value = this.property.type.defaultValue;
		} else if (this.isText && typeof value === 'string') {
			// replace the string by a number
			if (value !== this._get(_, true)) {
				// new text 
				var textId = this.$parent.supervisor.findText(_, value);
				if (textId === undefined) {
					// Text not found in mongodb => The new text will be managed in the insert
					return this._value = value;
				}
				value = textId; // New text id:
			}
		}
		this._value = this.property.set(value);

		if (!raw) {
			// Protect the set from infinite loops:  
			this._setCalls = (this._setCalls || 0) + 1;
			//dbg:console.error(this._setCalls+".property " + this.name + ">");
			if (this._setCalls === 1) {
				// Control the new value:
				this.deleteDiagnoses(_);
				var status = this.controlFormat(_);
				if (status !== constants.CST_AERROR) {
					status = this.controlOthers(_);
					if (status !== constants.CST_AERROR) {
						status = this.$parent.propertyControlValue(_, this.name, oldValue);
						if (status !== constants.CST_AERROR) {
							// Propagate the value : 
							this.propagateValue(_, oldValue);
						}
					}
				}
			}
			//dbg:console.error(this._setCalls+".property " + this.name + "<");
			this._setCalls -= 1;
		}
	},
	fromRecord: function(_, record, colnIndex) {
		//dbg:console.error("InstanceProperty.fromRecord ");// + JSON.stringify(record));
		if (this.property.isAtextra) {
			this._textId = record.$id;
			this._value = undefined;
		} else if (this.column) {
			if (record[this.column] !== undefined) {
				if (colnIndex !== undefined) this._value = record[this.column][colnIndex];
				else this._value = record[this.column];
				this._value = this._value ? this.property.type.fromSql(_, this._value) : this.property.type.defaultValue;
			} else {
				this._value = this.property.type.defaultValue;
			}
		} else {
			// interfaces :
			if (record[this.name]) this._value = record[this.name];
		}
	},
	clone: function(parent) {
		var to = new InstanceProperty(parent, this._value, this.name);
		to.$parent = this.$parent;
		attributes.clone(this, to);
		to.snapshotof = this;
		return to;
	},
	revertTo: function() {
		if (!this.snapshotof) return;
		this.snapshotof._value = this._value;
		attributes.revertTo(this, this.snapshotof);
	},
	propagateValue: function(_, oldValue) {
		//dbg:console.error(this.name + " propagate old:'"+oldValue.value+"' new:'"+this._value+"'");
		// 1. bonds ?
		if (this.property.proMaps) {
			var self = this;
			this.property.proMaps.forEach_(_, function(_, map) {
				var slot = self.$parent.slot(_, map.REFLNK);
				slot && slot.onMapChange(_, map.KEYMAP, self._value);
			});
		}
		// 2. Call scripts :
		//if(this.$parent.propertyPropagateValue && (oldValue.value === undefined || oldValue.value.x3Compare(this._value) !== 0)){
		if (this.$parent.propertyPropagateValue && oldValue.value.x3Compare(this._value) !== 0) {
			this.$parent.propertyPropagateValue(_, this.name, oldValue);
		}

	},
	setAsMandatory: function(_) {
		this.$isMandatory = true;
		if (this.property.type && this.property.type.data.TYPTYP === 1 && this.property.data.NOLIB) {
			// local menu => set a default value
			var menu = this.$parent.supervisor.loadEnum(_, this.property.data.NOLIB);
			if (menu && menu.length && (this._value < menu[0].$value || this._value > menu[menu.length - 1].$value)) {
				this._value = menu[0].$value;
			}
		}
	}
});

attributes.addAttributes(InstanceProperty.prototype);
exports.InstanceProperty = InstanceProperty;
exports.newInstanceProperty = function(property) {
	return function(_, parent) {
		return new InstanceProperty(parent, property);
	};
};