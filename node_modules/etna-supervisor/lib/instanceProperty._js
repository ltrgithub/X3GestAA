"use strict";
var attributes = require("etna-supervisor/lib/attributes");
var X3Error = require("etna-engine/lib/runtime/errors").X3Error;

function InstanceProperty(parent, property) {
	// care of the name if and only if the property belongs to 
	// an instance which which belongs to a collection : 
	if (property.type) {
		this.property = property;
		this._value = this.property.type.defaultValue;
	} else {
		this.property = {
			name: ""
		};
		this._value = property;
	}
	this.bindAttributes(parent);
}

Object.defineProperty(InstanceProperty.prototype, "name", {
	get: function() {
		return this.property.name;
	},
	enumerable: false,
});

Object.defineProperty(InstanceProperty.prototype, "column", {
	get: function() {
		return (this.property.column) ? this.property.column.name : undefined;
	},
	enumerable: false,
});

Object.defineProperty(InstanceProperty.prototype, "value", {
	set: function(value) {
		if (!this.getAttribute("$isReadOnly")) this._value = value;
		else throw new X3Error(147, (this.name ? this.name : '') + "is readonly");
	},
	get: function() {
		return this._value;
	},
	enumerable: false,
});

Object.defineProperty(InstanceProperty.prototype, "get", {
	value: function(_, raw) {
		if (this.property && this.property.data) {
			if (this.property.data.CODTYP === "ATX" && typeof this._value === 'number') {
				this._value = this.$parent.supervisor.loadText(_, parseInt(this._value, 10));
			} else if (/^AX[123X]/.test(this.property.data.CODTYP)) {
				if (this._value === undefined) {
					this._value = this.$parent.class.cache.texts.properties[this.name].loadText(_, this._textId);
				}
			}
		}
		// Call the GET accessor if and only if is set in the dictionary
		if (!raw && this.property.data && this.property.data.FLGACCGET === 2) {
			//  Add a _getCalls member if and only if the GET event has to be supported
			this._getCalls = (this._getCalls || 0) + 1;
			//dbg:console.error("DBG property " + this.name + " GET -> this._getCalls:" + this._getCalls);
			if (this._getCalls === 1) this.$parent.propertyGetValue(_, this.name);
			this._getCalls -= 1;
		}
		//dbg:console.error("property " + this.name + " GET -> " + this._value + " (" + typeof this._value + ")");
		return this._value;
	},
	enumerable: false,
});

Object.defineProperty(InstanceProperty.prototype, "set", {
	value: function(_, value, raw) {
		//dbg:console.error("property " + this.name + " SET -> " + value + " (type :"+ this.property.type.etnaType+ ")");
		if (this.getAttribute("$isReadOnly") || this.property.data.CODTYP === "ATX") {
			throw new X3Error(147, (this.name ? this.name : '') + " is readonly");
		}
		// First gets the current value
		if (!raw) var oldValue = {
			type: "L" + this.property.type.etnaType,
			value: this._value
		};

		// set the new value
		this._value = this.property.set(value);

		if (!raw) {
			// Protect the set from infinite loops:  
			this._setCalls = (this._setCalls || 0) + 1;
			//dbg:console.error(this._setCalls+".property " + this.name + ">");
			if (this._setCalls === 1) {
				// Control the new value:
				//dbg:console.error(this._setCalls+".property " + this.name + " control value "+value);
				if (!this.$parent.propertyControlValue(_, this.name, oldValue) && this.$parent.propertyPropagateValue && (oldValue.value !== undefined) && (oldValue.value.x3Compare(value) !== 0)) {
					//dbg:console.error(this._setCalls+".property " + this.name + " propagate old:'"+oldValue.value+"' new:'"+this._value+"'");
					// Propagate the change : 
					this.$parent.propertyPropagateValue(_, this.name, oldValue);
				}
			}
			//dbg:console.error(this._setCalls+".property " + this.name + "<");
			this._setCalls -= 1;
		}
	},
	enumerable: false,
});

Object.defineProperty(InstanceProperty.prototype, "fromRecord", {
	value: function(_, record, colnIndex) {
		//dbg:console.error("InstanceProperty.fromRecord ");// + JSON.stringify(record));
		if (/^AX[123X]/.test(this.property.data.CODTYP)) {
			this._textId = record.$id;
			this._value = undefined;
		} else if (this.column) {
			if (record[this.column] !== undefined) {
				if (colnIndex !== undefined) this._value = record[this.column][colnIndex];
				else this._value = record[this.column];
				this._value = this._value ? this.property.type.fromSql(this._value) : this.property.type.defaultValue;
			} else {
				this._value = this.property.type.defaultValue;
			}
		} else {
			// interfaces :
			if (record[this.name]) this._value = record[this.name];
		}
	},
	enumerable: false,
});

Object.defineProperty(InstanceProperty.prototype, "clone", {
	value: function(parent) {
		var to = new InstanceProperty(parent, this._value, this.name);
		to.$parent = this.$parent;
		attributes.clone(this, to);
		to.snapshotof = this;
		return to;
	},
	enumerable: false,
});

Object.defineProperty(InstanceProperty.prototype, "revertTo", {
	value: function() {
		if (!this.snapshotof) return;
		this.snapshotof._value = this._value;
		attributes.revertTo(this, this.snapshotof);
	},
	enumerable: false,
});

attributes.addAttributes(InstanceProperty.prototype);
exports.InstanceProperty = InstanceProperty;