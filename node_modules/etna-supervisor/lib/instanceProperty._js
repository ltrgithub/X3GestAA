"use strict";
var attributes  = require("etna-supervisor/lib/attributes");
var X3Error     = require("etna-engine/lib/runtime/errors").X3Error;

function InstanceProperty(parent,property) {
  // care of the name if and only if the property belongs to 
  // an instance which which belongs to a collection : 
  if(property.type) {
    this.property    = property;
    this._value      = this.property.type.defaultValue();
  } else {
    this.property    = {name:""};
    this._value      = property;
  }
  this.bindAttributes(parent);
}

Object.defineProperty( InstanceProperty.prototype, "name", {
  get :function() {
    return this.property.name;
  },
  enumerable: false,   
}) ;

Object.defineProperty( InstanceProperty.prototype, "column", {
  get :function() {
    return (this.property.column)? this.property.column.name:undefined;
  },
  enumerable: false,   
});

Object.defineProperty( InstanceProperty.prototype, "value", {
  set:function(value) {
    if(!this.getAttribute("$isReadOnly"))  this._value   = value;
    else throw new X3Error(147,(this.name?this.name:'')+ "is readonly");
  },
  get :function() {
    return this._value;
  },
  enumerable: false,   
}) ;

Object.defineProperty( InstanceProperty.prototype, "get", {
  value :function(_) {
    this.$parent.class.invokeScripts(_, this.$parent, "GET", this.name,"");

    //if (prop.data.CODTYP === "ATX") val = this.supervisor.loadText(_, parseInt(val, 10)); // do we need parseInt?
    console.log("property " + this.name + " GET -> " + this._value + " (" + typeof this._value + ")");
    return this._value;
  },
  enumerable: false,   
}) ;

Object.defineProperty( InstanceProperty.prototype, "set", {
  value :function(_,value,raw) {
    this.value = value;
    if (!raw) {
      if (this.$parent.class.invokeScripts(_, this.$parent, "CONTROL", this.name,"")) return;
      this.$parent.class.invokeScripts(_, this.$parent, "PROPAGATE", this.name,"");
    }    
  },
  enumerable: false,   
});

Object.defineProperty( InstanceProperty.prototype, "fromRecord", {
  value :function(_,record,colnIndex) {
    if(this.column) {
      if(colnIndex) this.value = record[this.column][colnIndex];
      else this.value = record[this.column];
    }
  },
  enumerable: false,   
});

Object.defineProperty( InstanceProperty.prototype, "toRecord", {
  value :function(record) {
    if(this.column) record[this.column] = this.value;
  },
  enumerable: false,   
});


Object.defineProperty( InstanceProperty.prototype, "clone", {
  value:function(parent) {
   var to = new InstanceProperty(parent,this.value,this.name);
    to.$parent = this.$parent;
    attributes.clone(this,to);
    to.snapshotof = this;
    return to;
  },
  enumerable: false,   
});

Object.defineProperty( InstanceProperty.prototype, "revertTo", {
  value:function() {
    if(!this.snapshotof) return ;
    this.snapshotof._value = this._value;
    attributes.revertTo(this,this.snapshotof);
  },
  enumerable: false,   
});


attributes.addAttributes(InstanceProperty.prototype);
exports.InstanceProperty = InstanceProperty;