"use strict";
var mongodb = require("streamline-mongodb");
var glob = require('streamline/lib/globals');

var connectionPool = require("etna-util/lib/connectionPool");
var util = require("etna-supervisor/lib/util");
var fs = require("streamline-fs");
var bcd = require('etna-engine/lib/runtime/bcd');
var variables = require('etna-engine/lib/runtime/variables');
var ez = require("ez-streams");
var utilDriver = require("etna-supervisor/lib/drivers/util");
var runtime = require("etna-engine/lib/runtime/runtime");

var tracerJs = require("syracuse-trace/lib/helper").getTracer("etna.supervisor");

var dbs = {};

var HttpError = util.HttpError;

function mongoConnect(_, config) {
	var mgConf = (config && config.mongo) || {};
	var dbName = mgConf.database || "etna";
	if (dbs[dbName]) return dbs[dbName];
	/*	var server = new mongodb.Server(mgConf.host || "localhost", mgConf.port || 27017, {});
	var db = new mongodb.Db(dbName, server, {
		w: 1 //"majority"
	});
	dbs[dbName] = db;
	db.open(_);*/
	var dbUrl = "mongodb://" + (mgConf.host || "localhost") + ":" + (mgConf.port || 27017) + "/" + dbName;
	var db = dbs[dbName] = mongodb.MongoClient.connect(dbUrl, mgConf.options || {
		db: {
			w: 1
		}
	}, _);

	fs.readdir(__dirname + "/meta", _).forEach_(_, function(_, name) {
		var sub = require(__dirname + "/meta/" + name);
		if (sub.keyName) {
			var index = {};
			index[sub.keyName] = 1;
			db.collection(sub.collectionName, _).ensureIndex(index, {
				background: true
			}, _);
		}
	});
	return db;
}

function loadErrorMessages(_, mongo, lan) {
	var found = {}; // we are getting duplicates - eliminate for now. Investigate later why.
	var mess = mongo.collection('APLSTD', _).find({
		LAN: lan,
		LANCHP: 9014
	}).sort({
		LANCHP: 1,
		LANNUM: 1
	}).toArray(_).filter(function(m) {
		var ok = m.LANNUM && !found[m.LANNUM];
		found[m.LANNUM] = true;
		return ok;
	}).map(function(m) {
		return m.LANMES;
	});
	mess.unshift("Message 0");
	return mess;
}


exports.create = function(_, config) {
	var mongoStore = mongoConnect(_, config);

	var sqlPool = connectionPool.create(config.sql);
	var cache = {
		LAN: {
			//ATEXTE: {},
			//APLSTD: {},
		},
		scripts: {},
	};
	var subModules = {};

	var trim = utilDriver.trim;

	function executeSql(_, sql, args, typesmap, dispatch) {
		tracerJs.debug && tracerJs.debug("SQL: " + sql + ", args=" + args);
		//if (!/^select /.test(sql) && !conf.etnaSqlStore.writable) throw new Error("cannot modify: SQL store is read-only");
		var sqlargs = utilDriver.toSql(args || [], sqlDriver);
		if (glob.context.x3session.dbConnection) {
			var result = sqlDriver.execute(_, glob.context.x3session.dbConnection, sql, sqlargs);
		} else {
			var result = sqlDriver.withConnection(_, function(_, cnx) {
				return sqlDriver.execute(_, cnx, sql, sqlargs);
			});
		}
		if (typesmap) {
			var maptrim = utilDriver.maptrim(sqlDriver, typesmap, dispatch);

			return Array.isArray(result) ? result.map(maptrim) : result;

		} else return Array.isArray(result) ? result.map(trim) : result;
	}

	function sqlReader(_, cnx, sql, args, typesmap, dispatch) {
		tracerJs.debug && tracerJs.debug("SQL: " + sql + ", args=" + args);
		//if (!/^select /.test(sql) && !conf.etnaSqlStore.writable) throw new Error("cannot modify: SQL store is read-only");
		var sqlargs = utilDriver.toSql(args || [], sqlDriver);

		return sqlDriver.reader(_, cnx, sql, args || []).map(function(_, record) {
			if (typesmap) {
				var maptrim = utilDriver.maptrim(sqlDriver, typesmap, dispatch);
				return maptrim(record);
			} else
				return trim(record);
		});
		//return Array.isArray(result) ? result.map(trim) : result;
	}

	function subModule(className) {
		return subModules[className] || (subModules[className] = require(__dirname + '/meta/' + className[0].toLowerCase() + className.slice(1)));
	}

	function compile(superv, source, name, filename) {
		var fn = new Function("module", "exports", "requireScript", "require", "'use strict';" + source);
		var module = {
			id: name,
			filename: filename,
			exports: {}
		};

		function req(_, name) {
			return superv.loadScript(_, name);
		}
		try {
			fn(module, module.exports, req, require);
		} catch (ex) {
			throw new Error(filename + ": module initialization failed: " + ex.stack.split('\n').slice(0, 2).join(': '));
		}
		return module.exports;
	}

	function _messSearch(chap, num) {
		var min = 0;
		var max = chap.length - 1;
		var cur;
		var cval;

		while (min <= max) {
			cur = ((min + max) >> 1);
			cval = chap[cur].$value;

			if (cval < num) {
				min = cur + 1;
			} else if (cval > num) {
				max = cur - 1;
			} else {
				return chap[cur].$title;
			}
		}
		return "";
	}

	var sqlDriver = require('etna-supervisor/lib/drivers/' + config.sql.driver)(config.sql);

	var superv = {
		// for now
		baseUrl: "/sdata/x3/erp/" + config.endpointName,
		transUrl: "/trans/x3/erp/" + config.endpointName,
		collaborationUrl: "/sdata/syracuse/collaboration/syracuse",
		solutionName: config.solutionName,
		solutionPath: config.solutionPath,
		endpointName: config.endpointName,
		folderName: config.folderName,
		sqlPool: sqlPool,
		sqlDriver: sqlDriver,
		executeSql: executeSql,
		sqlReader: sqlReader,
		engineErrMess: loadErrorMessages(_, mongoStore, "FRA"),
		mongoStore: mongoStore,
		constants: {
			CST_ADEL: 16,
			CST_AERROR: 4,
			CST_AFATAL: 5,
			CST_AFIRSTPOS: 0,
			CST_AINFO: 2,
			CST_ALASTPOS: -1,
			CST_ALL: 0,
			CST_ANEW: 2,
			CST_ANEWDEL: 1,
			CST_ANO: 1,
			CST_ANOTDEFINED: -1,
			CST_AOK: 0,
			CST_ASUCCESS: 1,
			CST_ATYPBLOB: 9,
			CST_ATYPCHAR: 7,
			CST_ATYPCLOB: 10,
			CST_ATYPDATE: 8,
			CST_ATYPDATETIME: 12,
			CST_ATYPDECIMAL: 4,
			CST_ATYPDOUBLE: 6,
			CST_ATYPFLOAT: 5,
			CST_ATYPINSTANCE: 13,
			CST_ATYPINTEGER: 3,
			CST_ATYPSHORTINT: 2,
			CST_ATYPTINYINT: 1,
			CST_ATYPUUID: 11,
			CST_AUPD: 4,
			CST_AWARNING: 3,
			CST_AYES: 2,
		},
		new: function(_, className) {
			var cl = subModule(className).constructor;
			var args = [cl, superv].concat(Array.prototype.slice.call(arguments, 2));
			return (new(cl.bind.apply(cl, args))).init(_);
		},
		load: function(_, className, keyValue, dataChildren) {
			var loader = subModule(className);
			var instances = (cache[loader.collectionName] = cache[loader.collectionName] || {});

			var instance = instances[keyValue];

			if (keyValue !== undefined) {
				var keys = keyValue.split(".");
				var filter = {};
				filter[loader.keyName] = keys[keys.length - 1];
				var data = mongoStore.collection(loader.collectionName, _).find(filter).toArray(_)[0];
			}

			if (instance && data && data._etag && instance._etag && data._etag === instance._etag) return instance;
			if (data) {
				data.dataChildren = dataChildren;
				instance = new loader.constructor(superv, data).init(_);
				instance._etag = data._etag;
			} else instance = null;
			return instances[keyValue] = instance;
		},
		reader: function(_, className, filter) {
			var loader = subModule(className);
			var coln = mongoStore.collection(loader.collectionName, _).find(filter || {});
			return ez.devices.generic.reader(function(_) {
				var data = coln.nextObject(_);
				return data ? new loader.constructor(superv, data).init(_) : undefined;
			});
		},
		loadText: function(_, num, lan) {
			lan = lan || glob.context.x3session.actx.$LAN(_);
			var s = (cache.LAN[lan] !== undefined ? cache.LAN[lan].ATEXTE[num] : undefined);
			if (s !== undefined) return s;
			var data = mongoStore.collection('ATEXTE', _).find({
				LAN: lan,
				NUMERO: num,
			}).toArray(_)[0];
			if (cache.LAN[lan] === undefined) cache.LAN[lan] = {
				ATEXTE: {},
				APLSTD: {}
			};
			return cache.LAN[lan].ATEXTE[num] = data ? data.TEXTE : "TEXT_" + num;
		},

		loadEnum: function(_, lib, lan) {
			var lan = lan || glob.context.x3session.actx.$LAN(_);
			var menu = (cache.LAN[lan] !== undefined ? cache.LAN[lan].APLSTD[lib] : undefined);
			if (menu !== undefined) return menu;
			var found = {}; // we are getting duplicates - eliminate for now. Investigate later why.
			var menu = mongoStore.collection('APLSTD', _).find({
				LAN: lan,
				LANCHP: lib,
			}).sort({
				LANCHP: 1,
				LANNUM: 1
			}).toArray(_).filter(function(m) {
				var ok = m.LANNUM && !found[m.LANNUM];
				found[m.LANNUM] = true;
				return ok;
			}).map(function(m) {
				return {
					$value: m.LANNUM,
					$title: m.LANMES,
				};
			});
			if (cache.LAN[lan] === undefined) cache.LAN[lan] = {
				ATEXTE: {},
				APLSTD: {}
			};
			return (cache.LAN[lan].APLSTD[lib] = menu);
		},
		loadMess: function(_, lib, num, lan) {
			var list = this.loadEnum(_, lib, lan);
			if (list !== undefined) return _messSearch(list, num);
			return "";
		},
		loadMessParams: function(_, lib, num) {
			var mess = this.loadMess(_, lib, num);
			if (mess !== "") {
				var args = Array.prototype.slice.call(arguments);
				mess = mess.replace(/\$[\w~]\$/g, function(str) {
					return args[parseInt(str.replace(/\$/g, '')) + 2];
				});

			}
			return mess;
		},
		fillTypeNode: function(_, data, node) {
			return subModule('Type').fillTypeNode(_, superv, data, node);
		},
		razCacheScripts: function() {
			runtime.razCacheScripts();
		},
		loadScript: function(_, name) {
			return runtime.requireScript(_, name);
		},
		loadScriptBase: function(_, wscript, name) {
			var parsed = new(require("etna-engine/lib/parser").Parser)(wscript, "").parse();
			var transformed = require("etna-engine/lib/jsgen").generate(parsed.node, "");
			//fs.writeFile("C:\\" + "name" + "sc.js", transformed, "utf8", _); // for debugging
			var script = compile(superv, transformed, name, "");
			//tracerJs.debug && tracerJs.debug(script); 
			return script;
		},
		createInstance: function(_, className) {
			return function(_, superv, className) {
				var cl = superv.load(_, 'Class', className);
				if (!cl) return;
				var instance = cl.createInstance(_);
				var AREAD = cl.method("AREAD");
				return {
					AREAD: function(_, arg) {
						return AREAD.apply_(_, instance, Array.prototype.slice.call(arguments, 1), 0);
					},
					get: function(_, property) {
						return instance.get(_, property);
					}
				};
			}(_, this, className);
		},
		about: function(_) {
			return {
				solutionName: config.solutionName,
				solutionHttpUrl: "TODO", //http://aws-x3-devsup.sagefr.adinternal.com:80/Adonix_SUPDVLP,
				processServer: "TODO", //AWS-X3-DEVSUP.sagefr.adinternal.com,
				applicationServer: "", //AWS-X3-DEVSUP.sagefr.adinternal.com,
				folder: config.folderName,
				port: "TODO",
				x3Version: "TODO",
				supervisorVersion: "TODO",
				runtimeVersion: "TODO",
				x3Release: "TODO",
				patchNumber: "TODO"
			};
		}
	};

	var types = mongoStore.collection('ATYPE', _).find({
		TYPTYP: 7
	}).toArray(_);
	for (var i = 0, len = types.length; i < len; i++) {
		if (types[i].LNGTYP && typeof types[i].LNGTYP === 'string') {
			if (!isNaN(types[i].LNGTYP) && bcd.toDouble(bcd.fromString(types[i].LNGTYP)) > 0) types[i].LNGTYP = bcd.toDouble(bcd.fromString(types[i].LNGTYP));
			else delete types[i].LNGTYP;
		}
		superv.constants["GLON" + types[i].CODTYP] = types[i].LNGTYP || 250;
	}

	return superv;
};