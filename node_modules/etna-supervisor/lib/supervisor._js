"use strict";
var mongodb = require("streamline-mongodb");
var glob = require('streamline/lib/globals');

var connectionPool = require("etna-util/lib/connectionPool");
var util = require("etna-supervisor/lib/util");
var fs = require("streamline-fs");
var variables = require('etna-engine/lib/runtime/variables');
var ez = require("ez-streams");

var trace = console.log;
var dbs = {};

var locales = {
	' .': /^fr.*/i,
	',.': /^en.*/i
};

var HttpError = util.HttpError;

function mongoConnect(_, config) {
	var mgConf = (config && config.mongo) || {};
	var dbName = mgConf.database || "etna";
	if (dbs[dbName]) return dbs[dbName];
	/*	var server = new mongodb.Server(mgConf.host || "localhost", mgConf.port || 27017, {});
	var db = new mongodb.Db(dbName, server, {
		w: 1 //"majority"
	});
	dbs[dbName] = db;
	db.open(_);*/
	var dbUrl = "mongodb://" + (mgConf.host || "localhost") + ":" + (mgConf.port || 27017) + "/" + dbName;
	var db = dbs[dbName] = mongodb.MongoClient.connect(dbUrl, mgConf.options || {
		db: {
			w: 1
		}
	}, _);

	fs.readdir(__dirname + "/meta", _).forEach_(_, function(_, name) {
		var sub = require(__dirname + "/meta/" + name);
		if (sub.keyName) {
			var index = {};
			index[sub.keyName] = 1;
			db.collection(sub.collectionName, _).ensureIndex(index, {
				background: true
			}, _);
		}
	});
	return db;
}

function loadErrorMessages(_, mongo, lan) {
	var found = {}; // we are getting duplicates - eliminate for now. Investigate later why.
	var mess = mongo.collection('APLSTD', _).find({
		LAN: lan,
		LANCHP: 9014
	}).sort({
		LANCHP: 1,
		LANNUM: 1
	}).toArray(_).filter(function(m) {
		var ok = m.LANNUM && !found[m.LANNUM];
		found[m.LANNUM] = true;
		return ok;
	}).map(function(m) {
		return m.LANMES;
	});
	mess.unshift("Message 0");
	return mess;
}


exports.create = function(_, config) {
	var mongoStore = mongoConnect(_, config);

	var sqlPool = connectionPool.create(config.sql);
	var cache = {
		ATEXTE: {},
		APLSTD: {},
		scripts: {},
	};
	var subModules = {};

	function trim(obj) {
		//trace && trace("trim:"+JSON.stringify(obj));

		var result = Object.keys(obj).reduce(function(o, k) {
			var v = obj[k];
			/*if (v instanceof Date) {
				v = v.toISOString();
				if (/T00\:00\:00\.000Z$/.test(v)) {
					v = v.substring(0, v.length - 14);
					if (v === '1599-12-31') v = null;
				}
			}*/
			if (/^CAST\(AUUID_0/.test(k)) k = "AUUID_0";
			var kk = k.substring(0, k.lastIndexOf('_'));
			var isArray = (obj[kk + '_1'] !== undefined);
			if (isArray) {
				o[kk] = o[kk] || [];
				o[kk].push(v);
			} else {
				if (v && v !== ' ') o[kk] = v;
			}
			return o;
		}, {});
		Object.keys(result).forEach(function(k) {
			var v = result[k];
			if (Array.isArray(v)) {
				var len = v.length;
				while (len > 0 && !(v[len - 1] && v[len - 1] !== ' ')) len--;
				result[k] = v.slice(0, len);
			}
		});
		return result;
	}

	function executeSql(_, sql, args) {
		trace && trace("SQL: " + sql + ", args=" + args);
		//if (!/^select /.test(sql) && !conf.etnaSqlStore.writable) throw new Error("cannot modify: SQL store is read-only");
		var result = sqlDriver.withConnection(_, function(_, cnx) {
			return sqlDriver.execute(_, cnx, sql, args);
		});
		return Array.isArray(result) ? result.map(trim) : result;
	}

	//TODO
	// getCyrrentX3rigthhs function
	// loadX3right function
	// modify server to read infisrt in mondb before in x3
	// split  loadRights in different parts

	function loadRights(_, user, wetag) {
		user = user.toUpperCase();
		trace && trace("user " + user);

		if (this.currentContext(_).builtinProperties.USER().getValue(_) === user && this.currentContext(_).x3Rights._etag === wetag) {
			trace && trace("find in supervisor context, user " + user);
			return this.currentContext(_).x3Rights._rights;
		}

		var filter = {};
		filter["endpoint"] = this.endpointName;
		filter["user"] = user;
		var data = mongoStore.collection('X3RightsCache', _).find(filter, _).toArray(_)[0];
		if (data && data.etag === wetag) {
			trace && trace("find in mongo user " + user);
			return data.userRights;
		}

		var res = {
			_accessCodes: [],
			_authorizedFunctions: [],
			_disabledFunctions: [],
			_authorizedRepresentations: []
		};
		var param = sqlDriver.param;
		var result = sqlDriver.withConnection(_, function(_, cnx) {
			var params = [user];
			var userPrfCod = "";
			var wuser = sqlDriver.execute(_, cnx, "select U.PRFFCT_0,U.CODMET_0 from AUTILIS U Where U.USR_0=" + param(0), params).map(trim);
			if (wuser[0] === undefined) throw new HttpError(401, "Incorrect user / password");

			userPrfCod = wuser[0].PRFFCT;
			if (userPrfCod === "" && wuser[0]) {
				params = [wuser[0].CODMET];
				var profilMetier = sqlDriver.execute(_, cnx, "select M.PRFFCT_0 from AMETUTI M Where M.CODMET_0=" + param(0), params).map(trim);
				userPrfCod = profilMetier[0].PRFFCT;
			}
			trace && trace("userPrfCod : " + userPrfCod);

			var wdosx3 = sqlDriver.execute(_, cnx, "Select A.VALEUR_0 From ADOVAL A where A.CMP_0=' ' and A.FCY_0=' ' and A.PARAM_0='SUPDOS'").map(trim);
			var dosx3 = wdosx3[0].VALEUR;
			trace && trace("dosx3 " + dosx3);
			var wadonix = sqlDriver.execute(_, cnx, "Select A.VALEUR_0 From ADOVAL A where A.CMP_0=' ' and A.FCY_0=' ' and A.PARAM_0='ADONIX'").map(trim);
			var adonix = wadonix[0].VALEUR;

			// Create the list of access codes :
			params = [user, 2];
			res._accessCodes = sqlDriver.execute(_, cnx, "select A.CODACC_0 from ACCES A Where A.USR_0=" + param(0) +
				"and A.CONSUL_0=" + param(1) + " and A.CODACC_0<>' '", params).map(trim).reduce(function(wacs, acs) {
				wacs.push(acs.CODACC);
				return wacs;
			}, []);

			// Create the list of authorized functions
			params = [userPrfCod];
			var wafctfct = sqlDriver.execute(_, cnx, "select U.ALLFCT_0 from AFCTFCT U Where U.PRFCOD_0=" + param(0), params).map(trim);
			var allfct = wafctfct[0].ALLFCT;
			if (allfct === 2 && config.folderName !== "SUPERV") {
				res._authorizedFunctions.push("*").join(",");
			} else {
				if (config.folderName === dosx3) {
					var crit = "(1=1)";
					if (adonix !== "2") {
						crit = "(A.MODULE_0 in (1,9,10))";
					}
					trace && trace("adonix " + adonix + " " + crit);
					res._authorizedFunctions = sqlDriver.execute(_, cnx, "select A.CODINT_0 from AFONCTION A " +
						"Where " + crit + " order by A.CODINT_0").map(trim).reduce(function(wafc, afc) {
						wafc.push(afc.CODINT);
						return wafc;
					}, []);
				} else if (allfct === 2) {
					res._authorizedFunctions = sqlDriver.execute(_, cnx, "select A.CODINT_0 from AFONCTION A order by A.CODINT_0").map(trim).reduce(function(wafc, afc) {
						wafc.push(afc.CODINT);
						return wafc;
					}, []);
				} else {
					params = [userPrfCod];
					res._authorizedFunctions = sqlDriver.execute(_, cnx,
						"select AFC.CODINT_0 " +
						"from AFONCTION AFC ,AFCTFCY AFF , AFCTPRF AFP " +
						"where (AFF.FCY_0=' ' and AFF.PRFCOD_0=" + param(0) + " and AFF.FNC_0=AFC.CODINT_0 " +
						"and AFP.PRFCOD_0=" + param(0) + " and AFP.FNC_0=AFC.CODINT_0 and AFP.ACS_0=2) order by AFC.CODINT_0", param).map(trim).reduce(function(wafc, afc) {
						wafc.push(afc.CODINT);
						return wafc;
					}, []);
				}

			}
			//Create the list of disabled functions
			res._disabledFunctions = sqlDriver.execute(_, cnx,
				"select AFC.CODINT_0 " +
				"from AFONCTION AFC ,ACTIV ACV " +
				"where (AFC.CODACT_0=ACV.CODACT_0 and ACV.FLACT_0<>2) order by AFC.CODINT_0"
			).map(trim).reduce(function(wafc, afc) {
				wafc.push(afc.CODINT);
				return wafc;
			}, []);

			//Create lists of authorisez facilities by function
			var criteria = "(1=1)";
			if (config.folderName === dosx3 && adonix !== "2") {
				criteria = "(ASW.MODULE_0 in (1,9,10))";
			}
			params = [user];
			var wokrole = sqlDriver.execute(_, cnx, "Select A.USR_0 From AUSRBPR A where A.USR_0=" + param(0), params).map(trim);
			var okrole;
			if (wokrole[0]) {
				okrole = wokrole[0].USR;
				trace && trace("okrole=" + wokrole[0].USR);

			}
			var listFctRep = [];

			var rsAsw = sqlDriver.execute(_, cnx, "select ASW.CODREP_0,ASW.AFCRIGHT_0,ASW.CODCLA_0 from ASHW ASW where " + criteria + " and (ASW.CODACT_0=' ' or " +
				"ASW.CODACT_0 in (select ACV.CODACT_0 from ACTIV ACV where ASW.CODACT_0=ACV.CODACT_0 and ACV.FLACT_0=2)) order by ASW.CODREP_0 desc").map(trim).reduce_(_, function(_, wasw, asw) {
				var indexFunction = res._authorizedFunctions.indexOf(asw.AFCRIGHT);
				if (indexFunction >= 0 || asw.AFCRIGHT === undefined) {
					listFctRep.push(asw.AFCRIGHT);
					if (asw.AFCRIGHT === "" || asw.AFCRIGHT === undefined || allfct === 2 || indexFunction >= 0) {
						wasw[asw.CODREP] = {
							codrep: asw.CODREP,
							codcla: asw.CODCLA,
							afcright: asw.AFCRIGHT || "",
							indexFunction: indexFunction
						};
					}
				}
				return wasw;
			}, {});
			params = [userPrfCod];
			var rsSites = sqlDriver.execute(_, cnx, "select A.FCY_0,A.FNC_0 from AFCTFCY A " +
				"where A.FCY_0<>' ' and A.PRFCOD_0= " + param(0) + " and A.FNC_0 in ('" + listFctRep.join("','") + "')", params).map(trim).reduce(function(waff, aff) {
				var fct = aff.FNC || "_";
				waff[fct] = waff[fct] || [];
				waff[fct].push(aff.FCY);
				return waff;
			}, {});

			var rsFct = sqlDriver.execute(_, cnx, "Select A.CODINT_0,A.VALPAR_0 From AFONCTION A where A.ACTION_0='GOBJET'").map(trim).reduce(function(wafc, afc) {
				wafc[afc.CODINT] = {
					codint: afc.CODINT,
					valpar: afc.VALPAR,
					objX3: ""
				};
				if (afc.VALPAR !== undefined && afc.VALPAR.indexOf('"') >= 0) {
					wafc[afc.CODINT].objX3 = afc.VALPAR.substring(afc.VALPAR.indexOf('"') + 1, afc.VALPAR.lastIndexOf('"'));
				}
				return wafc;
			}, {});

			var rsObj = sqlDriver.execute(_, cnx, "Select A.ABREV_0,A.NOMFIC_0 From AOBJET A").map(trim).reduce(function(waob, aob) {
				waob[aob.ABREV] = {
					abrev: aob.ABREV,
					nomfic: aob.NOMFIC,
				};
				return waob;
			}, {});
			params = [user];
			var rsArl = sqlDriver.execute(_, cnx, "Select ARL.OBJ_0,ARL.FLD_0,AUB.BPR_0,ARL.ROL_0 From AROLE ARL , AUSRBPR AUB where AUB.USR_0=" + param(0) + " " +
				"and AUB.ROL_0=ARL.ROL_0", params).map(trim).reduce(function(warl, arl) {
				if (warl[arl.OBJ] === undefined) {
					warl[arl.OBJ] = {
						obj: arl.OBJ,
						fld: arl.FLD,
						rol: [],
						key: []
					};
				}
				warl[arl.OBJ].rol.push(arl.ROL);
				warl[arl.OBJ].key.push(arl.BPR);
				return warl;
			}, {});
			var repAuth = {};
			Object.keys(rsAsw).forEach_(_, function(_, key) {
				repAuth[key] = {};
				if (rsAsw[key].afcright === "" || allfct === 2 || rsAsw[key].indexFunction >= 0) {
					if (rsAsw[key].codrep !== rsAsw[key].codcla) {
						repAuth[key]._entity = rsAsw[key].codcla;
					}
				}
				if (rsAsw[key].indexFunction >= 0 && rsSites[rsAsw[key].afcright] !== undefined) {
					//repAuth[key]._sites = rsSites[rsAsw[key].afcright].join(",");
					repAuth[key]._sites = rsSites[rsAsw[key].afcright];
				}
				if (rsFct[rsAsw[key].afcright] !== undefined && rsFct[rsAsw[key].afcright].valpar !== "" & okrole !== "") {
					var objX3 = rsFct[rsAsw[key].afcright].objX3;
					if (objX3 !== "") {
						var table = rsObj[objX3].nomfic;
						if (table !== "") {
							if (rsArl[objX3]) {
								var keys = rsArl[objX3].key;
								if (keys !== "") {
									repAuth[key]._conditions = [];
									var condition = {
										_type: "authorization",
										_where: ""
									};
									condition._where = "(" + rsArl[objX3].fld;
									if (keys.length > 1) {
										condition._where += " in ('" + keys.join("','") + "'))";
									} else {
										condition._where += " eq '" + keys.join("','") + "')";
									}
									repAuth[key]._conditions.push(condition);
								}
							}

						}

					}
				}
			});

			res._authorizedRepresentations = repAuth;
		});

		trace && trace("store in X3RightsCache in mongo ");
		var colX3Right = mongoStore.createCollection('X3RightsCache', _);

		mongoStore.collection('X3RightsCache', _).ensureIndex({
			endpoint: 1,
			user: 2
		}, {
			background: true
		}, _);

		if (wetag !== undefined) {
			var cache = {
				userRights: {}
			};
			cache.userRights = res;
			cache.user = user;
			cache.endpoint = this.endpointName;
			cache.etag = wetag ? wetag : new Date().toJSON();
			filter["endpoint"] = this.endpointName;
			filter["user"] = user;
			mongoStore.collection("X3RightsCache", _).update(filter, cache, _);
		}
		this.currentContext(_).x3Rights._etag = new Date().toJSON();
		this.currentContext(_).x3Rights._rights = res;

		return this.currentContext(_).x3Rights._rights;


	}

	function sqlReader(_, cnx, sql, args) {
		//trace && trace("SQL: " + sql + ", args=" + args);
		//if (!/^select /.test(sql) && !conf.etnaSqlStore.writable) throw new Error("cannot modify: SQL store is read-only");
		return sqlDriver.reader(_, cnx, sql, args || []).map(function(_, record) {
			return trim(record);
		});
		//return Array.isArray(result) ? result.map(trim) : result;
	}

	function subModule(className) {
		return subModules[className] || (subModules[className] = require(__dirname + '/meta/' + className[0].toLowerCase() + className.slice(1)));
	}

	function compile(superv, source, name, filename) {
		var fn = new Function("module", "exports", "requireScript", "require", "'use strict';" + source);
		var module = {
			id: name,
			filename: filename,
			exports: {}
		};

		function req(_, name) {
			return superv.loadScript(_, name);
		}
		try {
			fn(module, module.exports, req, require);
		} catch (ex) {
			throw new Error(filename + ": module initialization failed: " + ex.stack.split('\n').slice(0, 2).join(': '));
		}
		return module.exports;
	}

	function _messSearch(chap, num) {
		var min = 0;
		var max = chap.length - 1;
		var cur;
		var cval;

		while (min <= max) {
			cur = ((min + max) >> 1);
			cval = chap[cur].$value;

			if (cval < num) {
				min = cur + 1;
			} else if (cval > num) {
				max = cur - 1;
			} else {
				return chap[cur].$title;
			}
		}
		return "";
	}

	var sqlDriver = require('etna-supervisor/lib/drivers/' + config.sql.driver)(config.sql);

	var superv = {
		// for now
		baseUrl: "/sdata/x3/erp/" + config.endpointName,
		transUrl: "/trans/x3/erp/" + config.endpointName,
		collaborationUrl: "/sdata/syracuse/collaboration/syracuse",
		solutionName: config.solutionName,
		solutionPath: config.solutionPath,
		endpointName: config.endpointName,
		folderName: config.folderName,
		sqlPool: sqlPool,
		sqlDriver: sqlDriver,
		executeSql: executeSql,
		loadRights: loadRights,
		sqlReader: sqlReader,
		engineErrMess: loadErrorMessages(_, mongoStore, "FRA"),
		constants: {
			CST_ADEL: 16,
			CST_AERROR: 4,
			CST_AFATAL: 5,
			CST_AFIRSTPOS: 0,
			CST_AINFO: 2,
			CST_ALASTPOS: -1,
			CST_ALL: 0,
			CST_ANEW: 2,
			CST_ANEWDEL: 1,
			CST_ANO: 1,
			CST_ANOTDEFINED: -1,
			CST_AOK: 0,
			CST_ASUCCESS: 1,
			CST_ATYPBLOB: 9,
			CST_ATYPCHAR: 7,
			CST_ATYPCLOB: 10,
			CST_ATYPDATE: 8,
			CST_ATYPDATETIME: 12,
			CST_ATYPDECIMAL: 4,
			CST_ATYPDOUBLE: 6,
			CST_ATYPFLOAT: 5,
			CST_ATYPINSTANCE: 13,
			CST_ATYPINTEGER: 3,
			CST_ATYPSHORTINT: 2,
			CST_ATYPTINYINT: 1,
			CST_ATYPUUID: 11,
			CST_AUPD: 4,
			CST_AWARNING: 3,
			CST_AYES: 2,
		},
		new: function(_, className) {
			var cl = subModule(className).constructor;
			var args = [cl, superv].concat(Array.prototype.slice.call(arguments, 2));
			return (new(cl.bind.apply(cl, args))).init(_);
		},
		load: function(_, className, keyValue) {
			var loader = subModule(className);
			var instances = (cache[loader.collectionName] = cache[loader.collectionName] || {});
			var instance = instances[keyValue];
			if (instance !== undefined) return instance;
			var filter = {};
			filter[loader.keyName] = keyValue;
			var data = mongoStore.collection(loader.collectionName, _).find(filter, _).toArray(_)[0];
			return instances[keyValue] = data ? new loader.constructor(superv, data).init(_) : null;
		},
		reader: function(_, className, filter) {
			var loader = subModule(className);
			var coln = mongoStore.collection(loader.collectionName, _).find(filter || {}, _);
			return ez.devices.generic.reader(function(_) {
				var data = coln.nextObject(_);
				return data ? new loader.constructor(superv, data).init(_) : undefined;
			});
		},
		loadText: function(_, num, lan) {
			var s = cache.ATEXTE[num];
			if (s !== undefined) return s;
			var data = mongoStore.collection('ATEXTE', _).find({
				LAN: lan || superv.LAN(_),
				NUMERO: num,
			}).toArray(_)[0];
			return cache.ATEXTE[num] = data ? data.TEXTE : "TEXT_" + num;
		},

		loadEnum: function(_, lib) {
			var menu = cache.APLSTD[lib];
			if (menu !== undefined) return menu;
			var found = {}; // we are getting duplicates - eliminate for now. Investigate later why.
			var menu = mongoStore.collection('APLSTD', _).find({
				LAN: superv.LAN(_),
				LANCHP: lib,
			}).sort({
				LANCHP: 1,
				LANNUM: 1
			}).toArray(_).filter(function(m) {
				var ok = m.LANNUM && !found[m.LANNUM];
				found[m.LANNUM] = true;
				return ok;
			}).map(function(m) {
				return {
					$value: m.LANNUM,
					$title: m.LANMES,
				};
			});
			return (cache.APLSTD[lib] = menu);
		},
		loadMess: function(_, lib, num, lan) {
			lan = lan || superv.LAN(_);
			if (lan === superv.LAN(_)) {
				var rec = cache.APLSTD[lib];
				if (rec !== undefined) return _messSearch(rec, num);
			}

			var rec = mongoStore.collection('APLSTD', _).find({
				LAN: lan,
				LANCHP: lib,
				LANNUM: num
			}).toArray(_);

			return (rec.length !== 0) ? rec[0].LANMES : "";
		},
		fillTypeNode: function(_, data, node) {
			return subModule('Type').fillTypeNode(_, superv, data, node);
		},
		loadScript: function(_, name) {
			var script = cache.scripts[name];
			if (!script) {
				// give priority to builtins
				var path = __dirname + "/lib/builtins/" + name + "._js";
				if (!fs.exists(path, _)) path = config.solutionPath + "/" + config.folderName + "/TRT/" + name + ".src";
				console.log("Loading script: " + path);
				var source = fs.readFile(path, "utf8", _);
				var parsed = new(require("etna-engine/lib/parser").Parser)(source, path).parse();
				var transformed = require("etna-engine/lib/jsgen").generate(parsed.node, path);
				//fs.writeFile("C:\\"+name+"sc.js", transformed, "utf8", _); // for debugging
				script = cache.scripts[name] = compile(superv, transformed, name, path);
				//console.log(script);
			}
			return script;
		},
		loadScriptBase: function(_, wscript, name) {
			var parsed = new(require("etna-engine/lib/parser").Parser)(wscript, "").parse();
			var transformed = require("etna-engine/lib/jsgen").generate(parsed.node, "");
			//fs.writeFile("C:\\" + "name" + "sc.js", transformed, "utf8", _); // for debugging
			var script = compile(superv, transformed, name, "");
			//console.log(script); 
			return script;
		},
		loadContextProp: function(_, prop) {
			var filter = {};
			filter["CODCTX"] = prop;
			var data = mongoStore.collection('ACONTEXT', _).find(filter, _).toArray(_)[0];
			return data;
		},
		loadContextChapter: function(_, chap) {
			return mongoStore.collection('ACONTEXT', _).find({
				CHAPTER: chap
			}, _).toArray(_)[0];
		},
		currentContext: function(_) {
			// TODO: this is session stuff
			if (superv.context) return superv.context;

			(superv.context = (new(require('etna-supervisor/lib/builtins/ACTX').constructor)(superv)).init(_));
			//superv.context.x3Rights._etag = new Date().toJSON();
			//superv.context.x3Rights._rights = superv.loadRights(_, superv.context.builtinProperties.USER().getValue(_),superv.context.x3Rights._etag);

			return superv.context;

		},
		LAN: function(_, lan) {
			if (arguments.length > 1) {
				glob.context.x3frame.context.sys.values["MESSNAME"] = lan;
				return superv.LAN.value = lan;
			}
			superv.LAN.value = superv.LAN.value || "ENG" || superv.LANDEF(_);
			return superv.LAN.value;
		},
		LANDEF: function(_) {
			if (superv.LANDEF.value) return superv.LANDEF.value;
			var rAdossier = sqlDriver.withConnection(_, function(_, cnx) {
				return sqlReader(_,
					cnx, "select LANDEF_0 from ADOSSIER where (DOSSIER_0=:1)", [config.folderName]).limit(1).toArray(_);
			});
			return superv.LANDEF.value = rAdossier[0].LANDEF;
		},
		LANISO: function(_, laniso) {
			if (arguments.length === 1 || laniso === superv.LANISO.value) return superv.LANISO.value;

			superv.LANISO.value = laniso;

			var rTablan = sqlDriver.withConnection(_, function(_, cnx) {
				return sqlReader(_,
					cnx, "select LAN_0 from TABLAN where (LOWER(LANISO_0)=:1)", [superv.LANISO.value.toLowerCase()]).limit(1).toArray(_);

			});
			superv.LAN(_, rTablan.length ? rTablan[0].LAN : superv.LANDEF(_));

			require('syracuse-core/lib/locale').setCurrent(_, superv.LANISO.value);
			(function($) {
				Object.keys(locales).some(function(key) {
					if (locales[key].test(superv.LANISO.value)) {
						$.ADXSCA = $.ADXSCA.substring(0, 2) + key + $.ADXSCA.substring(4);
						return;
					}
				});
			})(glob.context.x3frame.context.sys.values);
			return superv.LANISO.value;
		},
		AFOLDER: function(_, afolder) {
			return superv.folderName;
		}
	};
	fs.readdir(__dirname + '/builtins', _).forEach(function(name) {
		if (/\._js$/.test(name)) {
			name = name.substring(0, name.length - 4);
			var script = require('etna-supervisor/lib/builtins/' + name);
			// set name on all entry points
			Object.keys(script).forEach(function(name) {
				script[name].name = name;
			});
			cache.scripts[name] = script;
		}
	});

	var types = mongoStore.collection('ATYPE', _).find({
		TYPTYP: 7
	}, _).toArray(_);
	for (var i = 0, len = types.length; i < len; i++) {
		superv.constants["GLON" + types[i].CODTYP] = types[i].LNGTYP || 250;
	}

	return superv;
};