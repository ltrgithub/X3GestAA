/* jshint -W079 */
/* jshint unused: false */
/* global QUnit: false, asyncTest: false, test: false, strictEqual: false, start: false, stop: false */ 
"use strict";

var fs = require('fs'),
	util = require('util'),
	pdfReader = require('syracuse-pdf').reader,
	pdfWriter = require('syracuse-pdf').writer,
	pdfUtils = require('syracuse-pdf').utils,
	pdfObject = require('syracuse-pdf').object,
	x509 = require("jsx509").x509,
	asn1 = require("jsx509").asn1,
	crypto = require('crypto'),
	streams = require('streamline/lib/streams/server/streams'),
	flows = require('streamline/lib/util/flows'),
	qmodule = QUnit.module;

qmodule('syracuse-pdf');

var pdfFiles = [{
		fname: __dirname + '/rsrc/pdfs/test.pdf'
	},{
		fname: __dirname + '/rsrc/pdfs/test2.pdf'
	},{
		fname: __dirname + '/rsrc/pdfs/test3.pdf'
	}];

var attRef = [{
	attachmentFile: __dirname + '/rsrc/attachments/attach.xml',
	attachmentName: "ubl.xml",
	attachmentDescr: 'xml embedded file '+pdfUtils.formatDate(new Date())
},{
	attachmentFile: __dirname + '/rsrc/attachments/attach.gif',
	attachmentName: "sage.gif",
	attachmentDescr: 'gif embedded file '+pdfUtils.formatDate(new Date())
},{
	attachmentFile: __dirname + '/rsrc/attachments/attach.doc',
	attachmentName: "charte.doc",
	attachmentDescr: 'doc embedded file '+pdfUtils.formatDate(new Date())
}];
var signRef = [{
	name: 'certinomis',
	certificate: __dirname + '/rsrc/crypto/certinomis/certificate.pem',
	privateKey: __dirname + '/rsrc/crypto/certinomis/private.pem',
	passphrase: '000000'
}];

asyncTest('attach', pdfFiles.length * 9, function(_){

	pdfFiles.forEach_(_, function(_, item) {
		var writer, pdfFile, originalSize;
		try{
			pdfFile = item.fname;
			originalSize = fs.stat(pdfFile, _).size;
			var reader = pdfReader.create(_, pdfFile);
			
			strictEqual(reader.checkObjectsIntegrity(_),true,"Integrity objects before modifications ["+reader.size+"] ok");

			writer = pdfWriter.create(_,reader);
		
			var data = fs.readFile(attRef[0].attachmentFile, _);
			var resultObj = writer.attach(_, attRef[0].attachmentName, attRef[0].attachmentDescr, data);
		
			var streamObj = reader.getObjStream(_,resultObj.id);
			strictEqual(streamObj.length,data.length, "stream length on first attachment ok");
			strictEqual(new Buffer(streamObj, 'utf8').toString(),new Buffer(data, 'utf8').toString(), "stream content on first attachment ok");
		
			var data2 = fs.readFile(attRef[1].attachmentFile, _);
			var resultObj2 = writer.attach(_, attRef[1].attachmentName, attRef[1].attachmentDescr, data2);
		
			var streamObj2 = reader.getObjStream(_,resultObj2.id);
			strictEqual(streamObj2.length,data2.length, "stream length on second attachment ok");
			strictEqual(new Buffer(streamObj2, 'utf8').toString(),new Buffer(data2, 'utf8').toString(), "stream content on second attachment ok");
			
			var writer2 = pdfWriter.create(_,reader);
			var data3 = fs.readFile(attRef[2].attachmentFile, _);
			var resultObj3 = writer2.attach(_, attRef[2].attachmentName, attRef[2].attachmentDescr, data3);
		
			var streamObj3 = reader.getObjStream(_,resultObj3.id);
			strictEqual(streamObj3.length,data3.length, "stream length on attachment with other writer ok");
			strictEqual(new Buffer(streamObj3, 'utf8').toString(),new Buffer(data3, 'utf8').toString(), "stream content on attachment with other writer ok");
			strictEqual(reader.checkObjectsIntegrity(_),true,"Integrity objects after modifications ["+reader.size+"] ok");

		}catch(e){
			console.error(e.stack);
		} finally {
			// Revert modifications
			writer.rollback(_,true);
			writer.close(_);
			var finalSize = fs.stat(pdfFile, _).size;
			strictEqual(finalSize, originalSize, "file size after rollback ok");
		}
	});

	start();
});

asyncTest('sign', pdfFiles.length * signRef.length * 4, function(_){
	signRef.forEach_(_, function(_, signer) {
		pdfFiles.forEach_(_, function(_, item) {
			var writer, pdfFile, originalSize;
			try{
				pdfFile = item.fname;
				var sigRef = '';
				if (signer.name === 'verysign'){
					sigRef = item.verysign;
				} else if (signer.name === 'certinomis'){
					sigRef = item.certinomis;
				}
				originalSize = fs.stat(pdfFile, _).size;
				var reader = pdfReader.create(_, pdfFile);
				
				strictEqual(reader.checkObjectsIntegrity(_),true,"Integrity objects before modifications ["+reader.size+"] ok");
		
				writer = pdfWriter.create(_,reader);
				
				var signature = writer.sign(_, signer.certificate, signer.privateKey, signer.passphrase);
				strictEqual(signature.valid, true, "Signature valid ok");
				strictEqual(reader.checkObjectsIntegrity(_),true,"Integrity objects after modifications ["+reader.size+"] ok");
			}catch(e){
				console.error(e.stack);
				writer.rollback(_,true);
			} finally {
				// Revert modifications
				writer.rollback(_,true);
				writer.close(_);
				var finalSize = fs.stat(pdfFile, _).size;
				strictEqual(finalSize, originalSize, "file size after rollback ok");
			}
		});
	});
	start();
});