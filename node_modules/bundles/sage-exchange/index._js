"use strict";
/// !doc
///
/// # Integration bundle for Sage Payment System (SPS)
///
/// `var sps = require('sage-exchange');`
///
exports.$exported = true;

var streams = require('streamline-streams');
var jsxml = require('jsxml');
var fs = require('streamline-fs');

/*
<Request_v1 xmlns="http://com.sage/usa/SPS/RQRP/protocol"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://com.sage/usa/SPS/RQRP/protocol ../schemas/SPS.xsd">
  <Application>
    <ApplicationID>SAGEERPX5X00000ERPLAAA5USEN</ApplicationID>
    <LanguageID>EN</LanguageID>
  </Application>
 <AccountQuery>
    <Merchant>
      <MerchantID>941457786836</MerchantID>
      <MerchantKey>F6K7Y7E7C7T7</MerchantKey>
    </Merchant>
  </AccountQuery>
</Request_v1>
*/

// convert string dot notation to objects
function objectify(arr, val) {
	var obj = {};
	obj[arr[0]] = (arr.length == 1) ? val : objectify(arr.slice(1), val);
	return obj;
}

// Recursively merge properties of two objects
function merge(d, s) {
	for (var p in s) {
		d[p] = !d.hasOwnProperty(p) ? s[p] : merge(d[p], s[p]);
	}
	return d;
}

// Parse dot notation style string into object
function parseValues(values) {
	return values.split(',').reduce(function(r, val) {
		val = "Request_v1." + val;
		var pair = val.split('=');
		merge(r, objectify(pair[0].split('.'), pair[1]));
		return r;
	}, {});
}

function jsonToDotNotaion(jsonobj, prefix) {
  var newobj = {};
  function recurse(o, p) {
    for (var f in o)
    {
      var pre = (p === undefined ? '' : p + ".");
      if (o[f] && typeof o[f] === "object"){
        newobj = recurse(o[f], pre + f);
      } else {
        newobj[pre + f] = o[f];
      }
    }
    return newobj;
  }
  return recurse(jsonobj, prefix);
};


exports.genericCall = function (_, values, responseProperty) {
	console.log("\n\n dot notation values from 4GL = "+values);
	var vals = parseValues(values);
	var req = '<?xml version="1.0" encoding="utf-8"?>\n' + jsxml.stringify(vals,'  ');
	console.log("\n\n X3 request = " + req);
	req = "request=" + encodeURIComponent(req);
	var request = streams.httpRequest({
		url: 'https://www.sageexchange.com/VirtualPaymentTerminal/frmPayment.aspx',
		method: 'POST',
		// proxy: "http://ecvmdevprod2:80",
		headers: {
			'content-type': 'application/x-www-form-urlencoded',
			'content-length': req.length,
		}
	});
	// request.proxyConnect(_).write(_, req, 'utf8');
	request.write(_, req, 'utf8');
	var resp = request.end().response(_);
	//console.log("status=" + resp.statusCode);
	if (resp.statusCode != 200) {
		console.log(resp.statusCode + ': ' + resp.readAll(_));
		console.log(resp.headers);
		return null;
	} else {
		//console.log(resp.headers);
		var xml = resp.readAll(_);
		console.log("\n\n xml=" + xml);
		var json = jsxml.parse(xml);
		console.log("\n\n Sage Exchange response (XML) = "+jsxml.stringify(json,'  '));
		console.log("\n\n Sage Exchange response (JSON) = "+JSON.stringify(json,'  '));
		//var returnVal = jsonToDotNotaion(json.Response_v1[responseProperty],'');
		var returnVal = json.Response_v1[responseProperty];
		console.log(returnVal);
		return returnVal;
	}
}


/// * `url = sps.vaultQuery(_, values);`
///   sends vaultQuery request to SPS. Returns the response.
///   `values` is a string containing the input values for the request.
exports.vaultQuery = function(_, values) {
	var response = genericCall(_, values, function(vals) {
		return {
			Request_v1: {
				Application: {
					ApplicationID: vals.ApplicationID,
					LanguageID: vals.LanguageID,
				},
				VaultStatusQuery: {
					Merchant: {
						MerchantID: vals.MerchantID,
						MerchantKey: vals.MerchantKey,
					},
					VaultID: vals.VaultID,
				}
			}
		};
	});
	if (!response) return '';
	return response.VaultStatusQueryResponse;
};

var redirections = [];

/// * `url = sps.getRedirectUrl(_, values, ttl);`
///   returns the URL of a page that will redirect the user to SPS.
///   `values` is a string containing the values that need to be embedded in the page.
///   `ttl` is a time to live for the URL in seconds. After this time the URL is invalid.
exports.getRedirectUrl = function(_, values, ttl) {
	var id = require('syracuse-core/lib/uuid').generate('');
	redirections.push({
		id: id,
		expires: Date.now() + ttl * 1000,
		values: values
	});
	// 4GL code will add the http(s)://hostname:port
	var url = '/bundles/sage-exchange/redirect?id=' + id;
	console.log('http://localhost:8124' + url);
	return url;
};

function redirect(_, request, response, redir) {
	var vals = parseValues(redir.values);
	var html = fs.readFile(__dirname + '/redir-template.html', 'utf8', _);
	html = html.replace(/\{(\w+)\}/g, function(all, key) {
		return vals[key];
	});
	response.writeHead(200, {
		'content-type': 'text/html; charset=utf-8'
	});
	response.end(html, 'utf8');
}

exports.httpDispatch = function(_, request, response) {
	var parsed = require('url').parse(request.url, true);
	var segs = parsed.pathname.split('/');
	if (segs[3] !== 'redirect') {
		response.writeHead(404, {});
		response.end('invalid URL: ' + request.url, 'utf8');
		return;
	}
	var id = parsed.query.id;
	var t = Date.now();
	var i = 0;
	while (i < redirections.length) {
		var redir = redirections[i];
		if (redir.expires < t) redirections.splice(i, 1); // remove it
		else if (redir.id == id) {
			redirections.splice(i, 1); // remove it
			return redirect(_, request, response, redir);
		}
		else i++;
	}
	// not found
	response.writeHead(404, {});
	response.end('redirection URL not found: ' + id, 'utf8');
};

/* TEST CODE

exports.getRedirectUrl(_ >> function(err, val) {
  if (err) throw err;
  console.log('http://localhost:8124' + val);
},
'ApplicationID=SAGEERPX5X00000ERPLAAA5USEN,' +
'LanguageID=EN,' +
'MerchantID=941457786836,' +
'MerchantKey=F6K7Y7E7C7T7,' +
'VaultID=0d6eb170-4ea7-46be-98ca-b875bc', 10);
*/
