"use strict";
/// !doc
///
/// # Integration bundle for Sage Payment Solutions (SPS)
///
/// `var sgex = require('sage-exchange');`
///
exports.$exported = true;

var http = require('ez-streams').devices.http,
	fs = require('streamline-fs'),
	url = require('url'),
	jsxml = require('jsxml'),
	context = require('streamline/lib/globals').context,
	dot = require('bundles/lib/dot');

function buildReq(values) {
	values = values.split('~,~').map(function(val) {
		return "Request_v1." + val;
	}).join('~,~');
	return '<?xml version="1.0" encoding="utf-8"?>\n' + jsxml.stringify(dot.parse(values), ' ');
}

// Send request to Sage Exchange and receive response.
exports.seRequest = function(_, values, responseProperty) {
	var req = buildReq(values);
	// console.log('\n\n ' + responseProperty + ' request = ' + req);
	req = "request=" + encodeURIComponent(req);
	var request = http.client({
		url: 'https://www.sageexchange.com/VirtualPaymentTerminal/frmPayment.aspx',
		method: 'POST',
		headers: {
			'content-type': 'application/x-www-form-urlencoded',
			'content-length': req.length,
		}
	});
	request.write(_, req, 'utf8');
	var resp = request.end().response(_);
	if (resp.statusCode != 200) {
		console.log(resp.statusCode + ': ' + resp.readAll(_));
		console.log(resp.headers);
		return null;
	} else {
		var xml = resp.readAll(_);
		// console.log('\n\n Sage Exchange ' + responseProperty + ' (XML) =' + xml.toString());
		var json = jsxml.parse(xml);
		// console.log('\n\n JSON response = ' + JSON.stringify(json,undefined,2));
		var returnVal = json.Response_v1[responseProperty];
		return returnVal;
	}
};

var redirections = [];

/// * `url = sps.getRedirectUrl(_, values, ttl);`
/// returns the URL of a page that will redirect the user to SPS.
/// `values` is a string containing the values that need to be embedded in the page.
/// `ttl` is a time to live for the URL in seconds. After this time the URL is invalid.
exports.getRedirectUrl = function(_, values, ttl) {
	var id = require('syracuse-core/lib/uuid').generate('');
	redirections.push({
		id: id,
		expires: Date.now() + ttl * 1000,
		values: values
	});

	var redirUrl = context.session.host + '/bundles/sage-exchange/redirect?id=' + id;
	console.log('\n redirURL = ' + redirUrl);
	return redirUrl;
};

function redirect(_, response, redir) {
	var html = fs.readFile(__dirname + '/redir-template.html', 'utf8', _).replace(/\{input\}/g, buildReq(redir.values));
	response.writeHead(200, {
		'content-type': 'text/html; charset=utf-8'
	});
	response.end(html, 'utf8');
}

exports.httpDispatch = function(_, request, response) {
	var parsed = url.parse(request.url, true);
	var segs = parsed.pathname.split('/');
	if (segs[3] !== 'redirect') {
		response.writeHead(404, {});
		response.end('invalid URL: ' + request.url, 'utf8');
		return;
	}
	var id = parsed.query.id;
	var t = Date.now();
	var i = 0;
	while (i < redirections.length) {
		var redir = redirections[i];
		if (redir.expires < t) redirections.splice(i, 1); // remove it
		else if (redir.id == id) {
			redirections.splice(i, 1); // remove it
			return redirect(_, response, redir);
		} else i++;
	}
	// not found
	response.writeHead(404, {});
	response.end('redirection URL not found: ' + id, 'utf8');
};
