"use strict";

var fs = require('fs');
var path = require('path');

var constants = require('./constants');
var security = require('./security');
var soap = require('syracuse-httpclient/lib/soapClient');


exports.envioDocumentoTransporte = function(_, context, data, options) {
	return _call(_, "envioDocumentoTransporte", context, data, options);
};

function _call(_, operation, context, data, options) {
	var url = path.resolve(__dirname, '../wsdl/documentosTransporte.wsdl');
	var client = soap.createClient(_, url, {
		"overrideRootElement": {
			"namespace": "ns2",
			"xmlnsAttributes": [{
			  "name": "xmlns:ns2",
			  "value": "https://servicos.portaldasfinancas.gov.pt/sgdtws/documentosTransporte/"
			}]
		}
	});
	
	if (options.debug) {
		options.debug && console.log("\n============== sage-pt-at call context ===============");
		options.debug && console.log("context: "+ JSON.stringify(context,null,2));
		options.debug && console.log("\n============== sage-pt-at call options ===============");
		options.debug && console.log("options: "+ JSON.stringify(options,null,2));
	}
	// override endpoint if necessary
	if (context.endpoint) {
		client.setEndpoint(context.endpoint);
	}
	
	// Set ssl connection
	client.setSecurity(new soap.ClientSSLSecurityPFX(
			fs.readFileSync(path.resolve(__dirname, "../certs/" + (context.certificateName || "Certificado.pfx"))),
			constants.PASSPHRASE // passphrase is actually hardcoded
	));
	
	// add security soap header
	var securityHeader = security.generateSecurityHeader(context.username, context.password, context.publicKeyName, context.publicKeyPassword);
	client.addSoapHeader(securityHeader.header);

	var resp = client[operation](data, _, options);
	resp.NonceAESKey = securityHeader.NonceAESKey.toString('base64');
	resp.createdDateTimeUTC = securityHeader.createdDateTimeUTC;
	return resp;
}