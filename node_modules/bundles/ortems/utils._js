"use strict";

var config = require('config');
var os = require("os");
var globals = require('streamline-runtime').globals;
var url = require('url');
var adminHelper = require("syracuse-collaboration/lib/helpers").AdminHelper;
var Context = require("../../../src/sdata/sdataContext").Context;

var TransportRepresentation = "JSNX3TRAN";
exports.$debug = true;

exports.parseRequestUrl = function(_, requestUrl) {
	return _parseRequestUrl(_, requestUrl);
};

exports.getFacet = function(_, representation) {
	return _getFacet(_, representation);
};

exports.getFacetShortName = function(_, facet) {
	return _getFacetShortName(_, facet);
};

exports.getTransportMapping = function(_, parsedUrl) {
	return _getTransportMapping(_, parsedUrl);
};

exports.getPrototype = function(_, parsedUrl) {
	return _getPrototype(_, parsedUrl);
};

exports.getRecord = function(_, endpoint, representationName, key) {
	return _getRecord(_, endpoint, representationName, key);
};

exports.getHost = function() {
	return config.session.ortemsHost || globals.context.session && globals.context.session.host || "http://" + os.hostname().toLowerCase() + ":" + config.port;
};

exports.setContext = function(_, parsedUrl, request, response) {
	return _setContext(_, parsedUrl, request, response);
};

function _parseRequestUrl(_, requestUrl) {
	var parsed = url.parse(requestUrl, true);
	var segs = parsed.pathname.split('/');
	var result = {};

	if (segs.length < 6) {
		result.errMsg = "url incomplete";
		return result;
	}

	result.application = segs[3];
	result.contract = segs[4];
	result.dataset = segs[5];
	result.syraClass = segs[6];
	result.syraClassName = _getClassName(result.syraClass);

	result.representation = parsed.query.representation;

	if (!result.representation) {
		result.errMsg = "no representation provided";
		return result;
	}

	result.representationName = _getRepresentationName(result.representation);

	result.facet = _getFacet(_, result.representation);

	result.trackingId = parsed.query.trackingId;

	if (['$details', '$edit'].indexOf(result.facet) > -1) {
		result.key = _getKey(result.syraClass);
	}

	result.endpoint = segs && segs.length > 5 && adminHelper.getEndpoint(_, {
		application: result.application,
		contract: result.contract,
		dataset: result.dataset
	});

	if (!result.endpoint) {
		result.errMsg = "invalid endpoint specified";
	}

	return result;
}

function _getKey(syraClass) {
	return syraClass.substring(syraClass.indexOf('(') + 2, syraClass.indexOf(')') - 1);
}

function _getClassName(syraClass) {
	return syraClass.substring(0, syraClass.indexOf('('));
}

function _getRepresentationName(representation) {
	return representation.split('.')[0];
}

function _getFacet(_, representation) {
	var facet = representation.substr(representation.lastIndexOf(".") + 1);
	return ['$details', '$query', '$bulk', '$edit'].indexOf(facet) < 0 ? '$query' : facet;
}

function _getFacetShortName(_, facet) {
	var facetShortName;
	switch (facet) {
		case '$details':
			facetShortName = 'DET';
			break;
		case '$edit':
			facetShortName = 'EDIT';
			break;
		default:
			facetShortName = 'QRY';
	}
	return facetShortName;
}

function _getTransportMapping(_, parsedUrl) {
	var representationOnly = parsedUrl.representation.substr(0, parsedUrl.representation.lastIndexOf(parsedUrl.facet) - 1);
	var transportKey = representationOnly + _getFacetShortName(_, parsedUrl.facet);
	return _fetchDetailResource(_, parsedUrl.endpoint, TransportRepresentation, transportKey);
}

function _getPrototype(_, parsedUrl) {
	var model = parsedUrl.endpoint.getModel(_);
	var entity = model.getEntity(_, parsedUrl.representationName);
	return entity && entity.getPrototype(_, parsedUrl.representationOnly, parsedUrl.facet);
}

function _getRecord(_, endpoint, representationName, key) {
	return _fetchDetailResource(_, endpoint, representationName, key);
}

function _fetchDetailResource(_, endpoint, representationName, key) {
	var db = endpoint.getOrm(_);
	var model = endpoint.getModel(_);
	var entity = model.getEntity(_, representationName);
	var data;

	try {
		var r = db.getClient(_).jsonSend(_, {
			head: {
				"accept": "application/json;vnd.sage=syracuse",
				"accept-language": "en-US",
				method: "GET",
				url: db._baseUrl + "/" + entity.name + "('" + key + "')?representation=" + entity.name + ".$details"
			},
			body: {}
		});

		data = r && r.body;
	} catch (e) {
		data = {
			"mess": "fetchDetailResource error: " + e.message + ((exports.$debug === true) ? "\n  at " + e.stack : ""),
			"sev": "error"
		};
	}
	return data;
}

function _setContext(_, parsedUrl, request, response) {
	var context = request.context = new Context(request, response);
	context.endpoint = parsedUrl.endpoint;
	context.db = parsedUrl.endpoint.getOrm(_);
	context.model = context.endpoint.getModel(_);

	if (['$query', '$bulk'].indexOf(parsedUrl.facet) >= 0) {
		context.entity = context.model.getEntity(_, parsedUrl.representationName);
		context.setMeta = function() {};
		if (context.entity) {
			context.entity.isCapableOf = context.entity.isCapableOf || function() {
				return false;
			};
		}
	}
	return context;
}