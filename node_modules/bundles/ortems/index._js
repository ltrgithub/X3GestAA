"use strict";

var comms = require('./comms');
var readTransform = require('./readTransform');
var writeTransform = require('./writeTransform');
var utils = require('./utils');
var httpHelpers = require('syracuse-core').http;
var tracer; // = console.log;

exports.$exported = true;

exports.httpDispatch = function(_, request, response) {

	var parsedUrl = utils.parseRequestUrl(_, request.url);

	if (parsedUrl.errMsg) {
		response.writeHead(200, {
			'content-type': 'text/plain; charset=utf-8'
		});

		response.end(parsedUrl.errMsg, 'utf8');
		return;
	}

	request.url = request.url.replace("/bundles/ortems", "/sdata");

	var context = utils.setContext(_, parsedUrl, request, response);

	try {
		switch (utils.getFacet(_, parsedUrl.representation)) {
			case "$edit":
				_processUpdateRequest(_, context, parsedUrl, request);
				break;
			case "$create":
				//_processCreateRequest(_, context, parsedUrl, request, response);
				break;
			case "$bulk":
			case "$query":
				_processQueryRequest(_, context, parsedUrl);
				break;
			case "$details":
			default:
				_processReadRequest(_, context, parsedUrl);
				break;
		}
	} catch (e) {
		tracer && tracer("Ortems bundle dispatcher error: " + e.safeStack);
		context.reply(_, e.$httpStatus || 500, e.message);
	}
};

function _processReadRequest(_, context, parsedUrl) {
	var commsObj = comms.getCommsSession(_, parsedUrl.trackingId, context, parsedUrl);
	if (!commsObj.sentToX3) {
		commsObj.retry = 0;
		commsObj.future = comms.sendToX3(!_, parsedUrl, commsObj);
		commsObj.trackingDelay = 4000;
		commsObj.timer = commsObj.timer || setTimeout(_commsTimer, 500, _, context.response, parsedUrl, commsObj);
	}
}

function _commsTimer (_, response, parsedUrl, commsObj) {
	if (commsObj.trackingDelay <= 0) {
		_replyWait(_, response, commsObj);
	} else {
		commsObj.future && commsObj.future(function() {}); // get from the future
		if (commsObj.data) {
			comms.addToBuffer(_, parsedUrl, commsObj);
			if (comms.moreToCome(_, commsObj)) {
				_replyPartial(_, response, commsObj);
			} else {
				_replyEnd(_, response, commsObj);
			}
		} else {
			commsObj.trackingDelay -= 500;
			commsObj.timer = setTimeout(_commsTimer, 500, _, response, parsedUrl, commsObj);
		}
	}
}

function _replyWait(_, response, commsObj) {
	tracer && tracer("_replyWait");
	commsObj.trackingDelay = 4000;
	commsObj.sentToX3 = false;
	commsObj.timer && clearTimeout(commsObj.timer);
	comms.replyToOrtems(_, response, commsObj, 202);
}

function _replyPartial(_, response, commsObj) {
	tracer && tracer("_replyPartial");
	comms.setNextChunkKey(_, commsObj);
	commsObj.sentToX3 = false;
	commsObj.timer && clearTimeout(commsObj.timer);
	comms.replyToOrtems(_, response, commsObj, 206); 
	delete commsObj.data;
}

function _replyEnd(_, response, commsObj) {
	tracer && tracer("_replyEnd");
	comms.replyToOrtems(_, response, commsObj, 200);
	comms.deleteCommsSession(_, commsObj.trackingId);
}

// function _processReadRequest(_, context, parsedUrl) {
// 	context.instanceId = writeTransform.transformKey(_, parsedUrl);
// 	factory.replyInstance(_, context, null, {
// 		transformObj: {
// 			//fn: readTransform.noTransform,
// 			fn: readTransform.transformData,
// 			tpl: parsedUrl
// 		}
// 	});
// }

function _processQueryRequest(_, context, parsedUrl) {
	var resources = [];
	var cursor = context.db.createCursor(_, context.entity);
	var data;
	while (data = cursor.next(_)) {
		resources.push(data.serializeInstance(_));
	}

	resources = readTransform.transformData(_, parsedUrl, {
		"$resources": resources
	});
	context.replyResources(_, httpHelpers.httpStatus.OK, resources);
}

function _processUpdateRequest(_, context, parsedUrl, request) {
	var db = parsedUrl.endpoint.getOrm(_);
	var model = parsedUrl.endpoint.getModel(_);
	var entity = model.getEntity(_, parsedUrl.representationName);

	var operation = {
		action: function(_) {
			return "$save";
		}
	};

	var sendData = writeTransform.transformData(_, parsedUrl, JSON.parse(request.readAll(_)));

	var options = {
		url: _buildClientPostUrl(_, parsedUrl),
		body: sendData || {}
	};

	var res = db.postAction(_, operation, entity, utils.getFacet(_, parsedUrl.representation), null, parsedUrl.representation, options);

	context.reply(_, 200, readTransform.noTransform(_, parsedUrl, res));
}

//function _processCreateRequest(_, parsedUrl, request, response) {
/*
 * No requirement to create instances at the moment. This may change
 */

// var db = parsedUrl.endpoint.getOrm(_);
// var model = parsedUrl.endpoint.getModel(_);
// var entity = model.getEntity(_, parsedUrl.representationName);

// var instance = entity && db.fetchInstance(_, entity, parsedUrl.key);
// var data;
// if (!instance) {
// 	data = {};
// } else {
// 	console.log("OK");
// 	instance.$addDiagnose("error", "createInstance error - instance '" + parsedUrl.key + "' already exists");
// }

// _sendResponse(_, response, data, 200, parsedUrl, readTransform.transformData);
//}

// function _sendResponse(_, response, data, statusCode, parsedUrl, transformFunc) {
// 	var recDataStr = JSON.stringify(transformFunc(_, parsedUrl, data)); 

// 	response.writeHead(statusCode, {
// 		"content-type": "application/json"
// 	});

// 	response.end(recDataStr, "utf8");
// }

function _buildClientPostUrl(_, parsedUrl) {
	var baseUrl = "/sdata/" + parsedUrl.application + "/" + parsedUrl.contract + "/" + parsedUrl.dataset;
	return baseUrl + "/" + parsedUrl.syraClassName + "('" + writeTransform.transformKey(_, parsedUrl) + "')/$workingCopies?representation=" + parsedUrl.representation;
}