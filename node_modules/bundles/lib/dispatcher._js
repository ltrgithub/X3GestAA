"use strict";
var url = require('url');
var bundles = {};

function getBundleContext(path) {
	var name = path.split('/')[2];
	if (bundles[name]) return bundles[name];
	var bundle = {
		name: name
	};
	try {
		bundle.module = require('bundles/' + name);
		bundle.dispatcher = bundle.module.httpDispatch;
		bundles[name] = bundle;
	} catch (e) {
		delete bundle.module;
		bundle.$error = e;
	}
	return bundle;
}

function getDispatchFunc(options) {
	options = options || {};
	var fn = function(_, request, response) {
		var parsed = url.parse(request.url);
		if (/\.md$/i.test(parsed.pathname)) return staticDispatcher(_, request, response);
		var bundleContext = getBundleContext(parsed.pathname);
		var bundle = bundleContext.module;
		var name = bundleContext.name;
		if (bundleContext.$error) {
			console.error(bundleContext.$error);
			response.writeHead(404, {
				"Content-Type": "text/plain"
			});
			return response.end('bad bundle: ' + name, 'utf8');
		}
		if (options.$nonAuth && !bundle.nonAuth) {
			response.writeHead(503, {
				"Content-Type": "text/plain"
			});
			return response.end('bundle must use authenticated route: ' + name, 'utf8');
		}
		if (!bundle.$exported || typeof bundle.httpDispatch !== 'function') {
			response.writeHead(404, {
				"Content-Type": "text/plain"
			});
			return response.end('unauthorized bundle: ' + name, 'utf8');
		}
		return bundle.httpDispatch(_, request, response);
	};

	fn.prepare = function(_, request) {
		var parsed = url.parse(request.url);
		var dispatcher = getBundleContext(parsed.pathname).dispatcher;
		if (dispatcher && dispatcher.prepare && typeof(dispatcher.prepare) === "function") {
			dispatcher.prepare(_, request);
		}
	};

	return fn;
}

exports.dispatcher = function(config, staticDispatcher) {
	return getDispatchFunc();
};

exports.dispatcherNonAuth = function(config, staticDispatcher) {
	return getDispatchFunc({
		nonAuth: true
	});
};