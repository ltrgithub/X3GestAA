"use strict";
var test_ = true;

exports.$exported = true;

var httpClient = require('syracuse-httpclient/lib/httpClient'),
	fs = require('streamline-fs'),
	url = require('url'),
	jsxml = require('jsxml'),
	globals = require('streamline/lib/globals'),
	dot = require('bundles/lib/dot');

function buildReq(values) {
	return Object.keys(values).map(function(key){ 
  		return encodeURIComponent(key) + '=' + encodeURIComponent(values[key]); 
	}).join('&');
}

exports.createTokenRequest = function(_, request, registrationOptions) {
	request.NotificationURL = getRedirectUrl(_, 1); // Look at this again!!!
	console.log(request);

	var req = buildReq(request);
  	var options = registrationOptions || {};
	options.url = options.url || 'https://live.sagepay.com/gateway/service/token.vsp';
	options.method = options.method || 'POST';
	options.headers = options.headers || {
	    'content-type': 'application/x-www-form-urlencoded',
	    'content-length': req.length,
	};

	var request = httpClient.httpRequest(_, registrationOptions);

	request.write(_, req, 'utf8');
	var resp = request.end().response(_);
	if (resp.statusCode != 200) {
		console.log(resp.statusCode + ': ' + resp.readAll(_));
		console.log(resp.headers);
		return null;
	} else {
		var respBody = resp.readAll(_);
		console.log (respBody);
		return JSON.stringify(respBody);
	}
};

/* 
 * callback from SPS on the notificationUrl...
 */
exports.sendSPSNotificationResponse = function(_, request, response) {
	var json = JSON.parse(request.body)

	console.log("sendSPSNotificationResponse " + JSON.stringify(json));

	// check md5 signature
	var status = "OK";	
	var postResponse = {
				"Status": status,
				"RedirectURL": getRedirectUrl(_, 1), // look at this again!
				"StatusDetail": "All OK"
			}

	// send postResponse back to SPS

	// callback to X3 with postResponse? 

	return postResponse;

};

exports.httpDispatch = function(_, request, response) {
	var parsed = url.parse(request.url, true);
	var segs = parsed.pathname.split('/');
	if (segs[3] !== 'redirect') {
		response.writeHead(404, {});
		response.end('invalid URL: ' + request.url, 'utf8');
		return;
	}
	var id = parsed.query.id;
	var t = Date.now();
	var i = 0;
	while (i < redirections.length) {
		var redir = redirections[i];
		if (redir.expires < t) redirections.splice(i, 1); // remove it
		else if (redir.id == id) {
			redirections.splice(i, 1); // remove it
			return redirect(_, response, redir);
		} else i++;
	}
	// not found
	response.writeHead(404, {});
	response.end('redirection URL not found: ' + id, 'utf8');
};

var redirections = [];
function getRedirectUrl(_, ttl) {
	var id = require('syracuse-core/lib/uuid').generate('');
	redirections.push({
		id: id,
		expires: Date.now() + ttl * 1000
		//values: values
	});

	var redirUrl;
	if (test_) {
		redirUrl = 'http://172.28.8.145:8080/bundles/sage-pay/redirect';
	} else {
		redirUrl = globals.context.session.host + '/bundles/sage-pay/redirect?id=' + id;
	}
	return redirUrl;
};
