"use strict";
var test_ = true;


var SPS_STATUS_OK = "OK"; 
var SPS_STATUS_ABORT = "ABORT";
var SPS_STATUS_REJECTED = "REJECTED";
var SPS_STATUS_ERROR = "ERROR"; 
var SPS_STATUS_INVALID = "INVALID"; 

exports.$exported = true;

var httpClient = require('syracuse-httpclient/lib/httpClient');
var	url = require('url');
var globals = require('streamline/lib/globals');

var securityCache = [];
var redirections = [{'id':'9999', 'expires': Date.now() + 1000 * 1000}];

function buildQueryReq(values) {
	return Object.keys(values).map(function(key){ 
  		return encodeURIComponent(key) + '=' + encodeURIComponent(values[key]); 
	}).join('&');
}

function buildSPSResponse(values) {
	return Object.keys(values).map(function(key){ 
  		return encodeURIComponent(key) + '=' + encodeURIComponent(values[key]); 
	}).join('\r\n');
}

exports.createTokenRequest = function(_, tokenReqJson, registrationOptions) {
	tokenReqJson.NotificationURL = getRedirectUrl(_, 1); // Look at this again!!!
	//console.log(tokenReqJson);

	var tokenReqQueryStr = buildQueryReq(tokenReqJson);
  	var options = registrationOptions || {};
	options.url = options.url || 'https://live.sagepay.com/gateway/service/token.vsp';
	options.method = options.method || 'POST';
	options.headers = options.headers || {
	    'content-type': 'application/x-www-form-urlencoded',
	    'content-length': tokenReqQueryStr.length,
	};

	var request = httpClient.httpRequest(_, options);
	request.write(_, tokenReqQueryStr, 'utf8');

	var response = request.end().response(_);
	if (response.statusCode != 200) {
		console.log(response.statusCode + ': ' + response.readAll(_));
		console.log(response.headers);
		return null;
	} else {
		/*
		 * Encoding is as Name=Value pairs separated by carriage return and linefeeds (CRLF).
		 * We'll pass it directly to X3 in this format.
		 * 
		 * Content is: 
		  		VPSProtocol
				Status
				StatusDetail
				VPSTxId
				SecurityKey
				NextURL
		 */

		var rawResponse = response.readAll(_);
		console.log (rawResponse);

		cacheSecurityData(_, rawResponse);

		return rawResponse;
	}
};


function cacheSecurityData(_, rawResponse) {
	var values = {};
	rawResponse.split('\r\n').map(function(element) {
		var nvp = element.split('=');
		values[nvp[0]] = nvp[1];
	});

	if (values.Status === SPS_STATUS_OK) {
		securiyCache.push(values);
	}
	console.log("Status = " + values.Status);
}


exports.httpDispatch = function(_, request, response) {
	var parsed = url.parse(request.url, true);
	var segs = parsed.pathname.split('/');
	if (segs[3] !== 'redirect') {
		response.writeHead(404, {});
		response.end('invalid URL: ' + request.url, 'utf8');
		return;
	}
	var id = parsed.query.id;
	var t = Date.now();
	var i = 0;
	while (i < redirections.length) {
		var redir = redirections[i];
		if (redir.expires < t) redirections.splice(i, 1); // remove it
		else if (redir.id == id) {
			//redirections.splice(i, 1); // remove redirection - might need to re-instate.
			return notificationResponse(_, request, response);
		} else i++;
	}
	// not found
	response.writeHead(404, {});
	response.end('redirection URL not found: ' + id, 'utf8');
};


function notificationResponse(_, request, response) {
	
 	var responseJson = sendSPSResponse(_, request, response);
 	// notifyX3(responseJson);
}

function sendSPSResponse(_, request, response) {
	/*
	 * get the content from the POST
	 */
	var reqJson = JSON.parse(request.readAll(_));
	var responseStatus;
	var responseStatusDetail;

 	if (reqJson && reqJson.Status) {
 		if ([SPS_STATUS_OK, SPS_STATUS_ABORT, SPS_STATUS_REJECTED, SPS_STATUS_ERROR].indexOf(reqJson.Status) >= 0) {
 			/*
 			 * We've received a recognised status.
 			 */
			if ([SPS_STATUS_OK, SPS_STATUS_ERROR].indexOf(reqJson.Status) >= 0) {
	 			responseStatus = reqJson.Status;
			} else {
				responseStatus = SPS_STATUS_ERROR;
			}
		
			responseStatusDetail = reqJson.StatusDetail;
		} else {
			responseStatus = SPS_STATUS_INVALID;
			responseStatusDetail = "Invalid notification status " + reqJson.Status + " received from Sage Pay";
 		}
 	} else {
			responseStatus = SPS_STATUS_ERROR;
			responseStatusDetail = "No notification status received from Sage Pay";
 	}

	var responseJson = {
		'Status': responseStatus,
		'RedirectURL': request.url,
		'StatusDetail': responseStatusDetail
	};
	
	/*
	 * Encoding must be as Name=Value fields separated by carriage-return line feeds (CRLF).
	 */
	response.writeHead(200, {
		'content-type': 'text/plain; charset=utf-8'
	});
	response.end(buildSPSResponse(responseJson), 'utf8');

	return responseJson;
}

function getRedirectUrl(_, ttl) {
	var id = require('syracuse-core/lib/uuid').generate('');
	redirections.push({
		id: id,
		expires: Date.now() + ttl * 1000
		//values: values
	});

	var redirUrl;
	if (test_) {
		redirUrl = 'http://54.148.78.219:8124/bundles/sage-pay/redirect'; //'http://172.28.8.145:8080/bundles/sage-pay/redirect';
	} else {
		redirUrl = globals.context.session.host + '/bundles/sage-pay/redirect?id=' + id;
	}
	return redirUrl;
}
