"use strict";
var test_ = true;

var SPS_STATUS_OK = "OK"; 
//var SPS_STATUS_OK_REPEATED = "OK REPEATED"; 
var SPS_STATUS_ERROR = "ERROR"; 
var SPS_STATUS_INVALID = "INVALID"; 

var SPS_WAIT_STATUS_OK = "OK";
var SPS_WAIT_STATUS_WAIT = "WAIT";
var SPS_WAIT_STATUS_INVALID = "INVALID";

var SPS_TIMEOUT_VALUE = 300000; // 5 minutes

exports.$exported = true;
exports.$nonAuth = true;

var httpClient = require('syracuse-httpclient/lib/httpClient');
var	url = require('url');
var globals = require('streamline/lib/globals');
var crypto = require('crypto');

var config = require('config');
var os = require("os");
var fs = require('streamline-fs');

var spsCache = [];
var redirections = [{'id':'9999', 'expires': Date.now() + 1000 * 1000}];

exports.httpDispatch = function(_, request, response) {
	var parsed = url.parse(request.url, true);
	var segs = parsed.pathname.split('/');

	if (segs[3] === 'close-sps.html') {
		var html = fs.readFile(__dirname + '/close-sps.html', 'utf8', _);
		response.writeHead(200, {
			'content-type': 'text/html; charset=utf-8',
			'content-length': html.length
		});
		response.end(html, 'utf8');
	    return;
	}

	if (segs[3] !== 'redirect') {
		response.writeHead(404, {});
		response.end('invalid URL: ' + request.url, 'utf8');
		return;
	}
	var id = parsed.query.id;
	var t = Date.now();
	var i = 0;
	while (i < redirections.length) {
		var redir = redirections[i];
		if (redir.expires < t) redirections.splice(i, 1); // remove it
		else if (redir.id == id) {
			//redirections.splice(i, 1); // remove redirection - might need to re-instate.
			return notificationResponse(_, request, response);
		} else i++;
	}
	// not found
	response.writeHead(404, {});
	response.end('redirection URL not found: ' + id, 'utf8');
};

exports.createTokenRequest = function(_, tokenReqJson, registrationOptions) {
	tokenReqJson.NotificationURL = getRedirectUrl(_, 1); // Look at this again!!!

	var tokenReqQueryStr = buildQueryReq(tokenReqJson);

	console.log(tokenReqQueryStr);

  	var options = registrationOptions || {};
	options.url = options.url || 'https://live.sagepay.com/gateway/service/token.vsp';
	options.method = options.method || 'POST';
	options.headers = options.headers || {
		'Authorization': 'Basic YWRtaW46YWRtaW4=',
	    'content-type': 'application/x-www-form-urlencoded',
	    'content-length': tokenReqQueryStr.length,
	};

	var request = httpClient.httpRequest(_, options);
	request.write(_, tokenReqQueryStr, 'utf8');

	var response = request.end().response(_);
	if (response.statusCode != 200) {
		console.log(response.statusCode + ': ' + response.readAll(_));
		console.log(response.headers);
		return null;
	} else {
		/*
		 * Encoding is as Name=Value pairs separated by carriage return and linefeeds (CRLF).
		 * We'll pass it directly to X3 in this format.
		 * 
		 * Content is: 
		  		VPSProtocol
				Status
				StatusDetail
				VPSTxId
				SecurityKey
				NextURL
		 */
		var rawResponse = response.readAll(_);
		console.log ("rawResponse: " + rawResponse);

		cacheSPSData(_, rawResponse);

		return rawResponse;
	}
};

exports.getSPSResponse = function(_, VPSTxId) {
	if (spsCache) {
		var spsData;
		for (var ii = 0, jj = spsCache.length; ii < jj; ii++) {
			if (spsCache[ii].VPSTxId == VPSTxId) {
				spsData = spsCache[ii];
				break;
			}
		}

		// if (spsData)
		// 	console.log(JSON.stringify(spsData));

		if (spsData && spsData.WaitStatus) {
			if (spsData.WaitStatus == SPS_WAIT_STATUS_OK) {
				var responseX3 = "WaitStatus=" + SPS_STATUS_OK + "&";
				responseX3 += "SecurityStatus=" + spsData.SecurityStatus + "&";
				responseX3 += spsData.notificationPostData;

				return responseX3;


			} else {
				return spsData.WaitStatus; // ...
			}
		} else {
			/*
			 * We've nothing cached for this VPSTxId, so return INVALID
			 */
			 return "WaitStatus=" + SPS_WAIT_STATUS_INVALID;
		}
	} else {
		return "WaitStatus=" + SPS_WAIT_STATUS_INVALID;
	}

	return;
};

function cacheSPSData(_, rawResponse) {
	var values = {};
	rawResponse.split('\r\n').map(function(element) {
		var nvp = element.split('=');
		values[nvp[0]] = nvp[1];
	});

	if (values.Status === SPS_STATUS_OK) {
		var VPSTxId = values.VPSTxId.replace(/{/g, '').replace(/}/g, '');// remove the outer {}
		var cacheValue = { 'VPSTxId': VPSTxId,
							'SecurityKey': values.SecurityKey || "", 
							'NextURL': values.NextURL || "",
							'WaitStatus': SPS_WAIT_STATUS_WAIT };

		cacheValue.timeout = function (VPSTxId) {
			/*
			 * Setup a timer that will clear the cache entry for this VPSTxID after the specified timeout
			 */
 	 		if (spsCache && VPSTxId) {
 				for (var ii = 0, jj = spsCache.length; ii < jj; ii++) {
					if (spsCache[ii].VPSTxId == VPSTxId) {
						spsCache.splice(ii, 1);
					}
				}
			}
		};

		setTimeout.call(cacheValue, cacheValue.timout, SPS_TIMEOUT_VALUE, VPSTxId);

		spsCache.push(cacheValue);

		console.log("cache: " + JSON.stringify(cacheValue));
	}
}

function notificationResponse(_, request, response) {
	var requestRaw = request.readAll(_).toString();
	var requestJson = {};
	requestRaw.split('&').map(function(element) {
		var nvp = element.split('=');
		requestJson[nvp[0]] = nvp[1];
	});

 	var spsResponseJson = replyToSPSResponse(_, request, requestJson, response);

 	/*
 	 * We've responded to SPS, so cache our notification POST request to the SPS cache.
 	 */
 	 if (spsCache && requestJson.VPSTxId) {
 		for (var ii = 0, jj = spsCache.length; ii < jj; ii++) {
			if (spsCache[ii].VPSTxId == requestJson.VPSTxId) {
				var spsData = spsCache[ii];
				//spsData.notificationPostJson = requestJson; // shouldn't neet this
				spsData.notificationPostData = requestRaw;

				if (spsResponseJson.Status == SPS_STATUS_OK) {
					spsData.WaitStatus = SPS_WAIT_STATUS_OK;
				} else {
					spsData.WaitStatus = SPS_WAIT_STATUS_INVALID;
				}

				/*
				 * Set the SecurityStatus status to reflect the MD5 check
				 */
				spsData.SecurityStatus = spsResponseJson.Status;
				break;
			}
		}
 	 }
}

function replyToSPSResponse(_, request, requestJson, response) {
	/*
	 * get the content from the POST
	 */
	//spsCache.SecurityKey = 'LZKWYHI74C'; // test only

	// var reqRaw = request.readAll(_).toString();

	// var reqJson = {};
	// reqRaw.split('&').map(function(element) {
	// 	var nvp = element.split('=');
	// 	reqJson[nvp[0]] = nvp[1];
	// });

	//var reqJson = buildJsonFromSPS(reqRaw);

	var postValidationJson = validateNotificationPost(_, requestJson);

	var host = globals.context.session && globals.context.session.host;
	if (!host) {
		if (test_)
			host = 'http://54.148.78.219';
		else
			host = "http://" + os.hostname().toLowerCase() + ":" + config.port;
	}

	var responseJson = {
		'Status': postValidationJson.Status,
		'RedirectURL': host + '/bundles-non-auth/sage-pay/close-sps.html',
		'StatusDetail': postValidationJson.StatusDetail
	};
	
	/*
	 * Encoding must be as Name=Value fields separated by carriage-return line feeds (CRLF).
	 */
	response.writeHead(200, {
		'content-type': 'text/plain; charset=utf-8'
	});
	response.end(buildSPSResponse(responseJson), 'utf8');

	return responseJson;
}

function validateNotificationPost(_, reqJson) {
	/*
	 * A response status of OK should be sent in ALL circumstances where NO ERRORS occur in validating the Notification POST.
	 * So even if Sage Pay sends a Status of ABORT or NOTAUTHED, you should reply with an OK Status and a RedirectURL 
	 * that points to a page informing the customer that the transaction did not complete.
	 */
	var validationJson = {};
 	if (reqJson && reqJson.Status) {
 		
 		var isValidMD5 = validateMD5(_, 
				reqJson.VPSSignature, 
				reqJson.VPSTxId, 
				reqJson.VendorTxCode, 
				reqJson.Status, 
				spsCache.VendorName || "sagetest2015",
				decodeURIComponent(reqJson.Token),
				spsCache.SecurityKey);

		if (isValidMD5) {
			validationJson.Status = SPS_STATUS_OK;
			validationJson.StatusDetail = "OK";
		} else {
			/*
			 * INVALID = Send this if the details received in the notification post were not consistent with expectations for this
			 * transaction. The RedirectURL must still be provided, and Sage Pay will still redirect the customer back to your
			 * site. This response status will cancel the transaction on SPS.
			 */
			validationJson.Status = SPS_STATUS_INVALID;
			validationJson.StatusDetail = "MD5 does not match VPSSignature";
		}
	} else {
		/*
		 * ERROR = An error has occurred during your Notification processing. The Sage Pay system will check for a
		 * RedirectURL, and if one is provided the customer will be redirected to your site. Only send this result if you
		 * want to cancel the transaction and report an ERROR to Sage Pay.
		 */
		 validationJson.Status = SPS_STATUS_ERROR;
		 validationJson.StatusDetail = "Notification Processing error - no status received";
	}

	return validationJson;
}

function validateMD5(_, VPSSignature, VPSTxId, VendorTxCode, Status, VendorName, Token, SecurityKey) {
	/*
	 * VPSSignature - MD5 signature of the concatenation of the values of: 
	 * VPSTxId + VendorTxCode + Status + VendorName + { Token} + SecurityKey
	 */
	 var rawConcatenation  = VPSTxId + VendorTxCode + Status + VendorName + Token + SecurityKey;
	 var hashMD5 = crypto.createHash('md5').update(rawConcatenation).digest('hex').toUpperCase();

	 //console.log("MD5 hash of " + rawConcatenation + " = " + hashMD5);

	 return hashMD5 === VPSSignature;
}

function getRedirectUrl(_, ttl) {
	var id = require('syracuse-core/lib/uuid').generate('');
	redirections.push({
		id: id,
		expires: Date.now() + ttl * 1000
		//values: values
	});

	var redirUrl;
	if (test_) {
		//redirUrl = 'http://54.148.78.219:8124/bundles-non-auth/sage-pay/redirect?id=9999'; //'http://172.28.8.145:8080/bundles/sage-pay/redirect';
		redirUrl = 'http://54.148.78.219/bundles-non-auth/sage-pay/redirect?id=9999'; //'http://172.28.8.145:8080/bundles/sage-pay/redirect';
	} else {
		redirUrl = globals.context.session.host + '/bundles-non-auth/sage-pay/redirect?id=' + id;
	}
	return redirUrl;
}

function buildQueryReq(values) {
	return Object.keys(values).map(function(key){ 
  		return encodeURIComponent(key) + '=' + encodeURIComponent(values[key]); 
	}).join('&');
}

function buildSPSResponse(values) {
	return Object.keys(values).map(function(key){ 
  		//return encodeURIComponent(key) + '=' + encodeURIComponent(values[key]); 
  		return key + '=' + values[key]; 
	}).join('\r\n');
}

// function buildJsonFromSPS(data) {
// 	var reqJson = {};
// 	data.split('&').map(function(element) {
// 		var nvp = element.split('=');
// 		reqJson[nvp[0]] = nvp[1];
// 	});
// 	return reqJson;
// }