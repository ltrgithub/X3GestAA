"use strict";

require('streamline').register();
var sagepay = require('bundles/sage-pay');

/*
 * Important! We will only support the following configurations
 * - SERVER integration
 * - Standalone token registration.
 */

var test_ = true;

var tokenRegistrationUrl;
var tokenPaymentUrl;
var tokenRemovalUrl;
var refundUrl;
var voidUrl;
var abortUrl;
var releaseUrl;

if (test_) {
	tokenRegistrationUrl = "https://test.sagepay.com/gateway/service/token.vsp";
	tokenPaymentUrl = "https://test.sagepay.com/gateway/service/vspserver-register.vsp";
	refundUrl = "https://test.sagepay.com/gateway/service/refund.vsp";
	voidUrl = "https://test.sagepay.com/gateway/service/void.vsp";
	abortUrl = "https://test.sagepay.com/gateway/service/abort.vsp";
	releaseUrl = "https://test.sagepay.com/gateway/service/release.vsp";
	tokenRemovalUrl = "https://test.sagepay.com/gateway/service/removetoken.vsp";
} else {
	tokenRegistrationUrl = "https://live.sagepay.com/gateway/service/token.vsp";
	tokenPaymentUrl = "https://live.sagepay.com/gateway/service/vspserver-register.vsp";
	refundUrl = "https://live.sagepay.com/gateway/service/refund.vsp";
	voidUrl = "https://live.sagepay.com/gateway/service/void.vsp";
	abortUrl = "https://live.sagepay.com/gateway/service/abort.vsp";
	releaseUrl = "https://live.sagepay.com/gateway/service/release.vsp";
	tokenRemovalUrl = "https://live.sagepay.com/gateway/service/removetoken.vsp";
}


var proxy = {
  "host": "ecvmdevprod2",
  "port": "80",
  "excludes": [
    "PO102055",
    "localhost",
    "127.0.0.1"
  ]};

/*
 * Other proxy examples:
 	PROXY CONF NTLM : 
	{
		"host": "proxysage",
		"port": "8080",
		"auth": "ntlm",
		"user": "a-domain-user",
		"password": "XXXXXX",
		"domain": "YOURDOMAIN",
		"proxyAuthenticator": require('syracuse-httpclient/lib/proxyAuthenticator')
	
		"Vendor": "sagetest2015",}

	NO PROXY : 
	{ 
		ignoreProxy : true
	}
	// NOTE, for no proxy, the json must be ignoreProxy: true, and not proxy: {ignoreProxy: true}
 */
 

// var registrationOptions = {
// 		url: tokenRegistrationUrl,
// 		//ignoreProxy: true 
// 		proxy: proxy
// };

exports.createPaymentRequest = function createPaymentRequest () {

	// mandatory only
	var request = {
		"VPSProtocol": "3.00", // version of protocol 
		"TxType": "PAYMENT",
		"Vendor": "sagetest2015",
		"VendorTxCode": require('syracuse-core/lib/uuid').generate(''),
		"Amount": 999.00,
		"Currency": "GBP", // ISO4217 currecy code, EUR, GBP...
		"Description": "A description of the goods and services",
		//NotificationURL - determined later
		"Token": "{7039FB9E-D3BC-2C7F-DD27-BD7EF753403A}",
		"BillingSurname": "Cameron",
		"BillingFirstnames": "David",
		"BillingAddress1": "10 Downing Street",
		"BillingAddress2": "Westminster",
		"BillingCity": "London",
		"BillingPostCode": "SW1A 2AA",
		"BillingCountry": "GB",
		//BillingState":
		//BillingPhone":
		"DeliverySurname": "Osborne",
		"DeliveryFirstnames": "George",
		"DeliveryAddress1": "11 Downing Street",
		//"DeliveryAddress2": ""
		"DeliveryCity": "London",
		"DeliveryPostCode": "SW1A 2AA",
		"DeliveryCountry": "GB",
		//"DeliveryState":
		//"DeliveryPhone":
		//"CustomerEMail":
		//"Basket":
		//"AllowGiftAid":
		//"ApplyAVSCV2":
		//"Apply3DSecure":
		//"Profile":
		//"BillingAgreement":
		//"AccountType":
		//"CreateToken": 0,
		//"StoreToken": 0,
		//"BasketXML":
		//"CustomerXML":
		//"SurchargeXML":
		//"VendorData":
		//"ReferrerID":
		//"Language":
		//"Website":
		//"FIRecipientAcctNumber":
		//"FIRecipientSurname":
		//"FIRecipientPostcode":
		//"FIRecipientDoB":
	};

	// if we don't specify a vendorTxCode, generate one - they must always be unique for transaction
	request.VendorTxCode = request.VendorTxCode || require('syracuse-core/lib/uuid').generate('');

	var obj = sagepay.createPaymentRequest(function(err) {
		if (err) 
			throw err;
	}, request, {	url: tokenPaymentUrl,
								//ignoreProxy: true 
								proxy: proxy});
	return obj;
};

exports.createReleaseRequest = function createReleaseRequest () {

	// mandatory only
	var request = {
		"VPSProtocol": "3.00",
		"TxType": "RELEASE",
		"Vendor": "sagetest2015",
		"VendorTxCode": "208dbc51-d496-47c5-8117-1006a189bf24", 
		"VPSTxId": "208dbc51-d496-47c5-8117-1006a189bf24",
		"SecurityKey": "A123456789", // The SecurityKey returned to us when the original transaction was registered
		"TxAuthNo": "9876543210", // The TxAuthNo returned to us when the original transaction was registered
		"ReleaseAmount": 999.99
	};

	// if we don't specify a vendorTxCode, generate one - they must always be unique for transaction
	request.VendorTxCode = request.VendorTxCode || require('syracuse-core/lib/uuid').generate('');

	var obj = sagepay.createReleaseRequest(function(err) {
		if (err) 
			throw err;
	}, request, {	url: releaseUrl,
								//ignoreProxy: true 
								proxy: proxy});
	return obj;
};

exports.createRefundRequest = function createRefundRequest () {

	// mandatory only
	var request = {
		"VPSProtocol": "3.00",
		"TxType": "REFUND",
		"Vendor": "sagetest2015",
		"VendorTxCode": "208dbc51-d496-47c5-8117-1006a189bf24", 
		"Amount": 999.99,
		"Currency": "GBP",
		"Description": "A refund...",
		"RelatedVPSTxId": "cf73373a-ed07-41a0-9679-83ad2db563b2", // the VPSTxID returned when the original transaction was registered
		"RelatedVendorTxCode": "d774fb0c-2a75-4996-8f03-df3e22f84e4f", //The unique VendorTxCode that we submitted when making the payment
		"RelatedSecurityKey": "A123456789", // The SecurityKey returned to us when the original transaction was registered
		"RelatedTxAuthNo": "9876543210" // The TxAuthNo returned to us when the original transaction was registered
	};

	// if we don't specify a vendorTxCode, generate one - they must always be unique for transaction
	request.VendorTxCode = request.VendorTxCode || require('syracuse-core/lib/uuid').generate('');

	var obj = sagepay.createRefundRequest(function(err) {
		if (err) 
			throw err;
	}, request, {	url: refundUrl,
								//ignoreProxy: true 
								proxy: proxy});
	return obj;
};

exports.createVoidRequest = function creatVoidRequest () {

	var request = {
		"VPSProtocol": "3.00",
		"TxType": "VOID",
		"Vendor": "sagetest2015",
		"VendorTxCode": "208dbc51-d496-47c5-8117-1006a189bf24", 
		"VPSTxId": "cf73373a-ed07-41a0-9679-83ad2db563b2", // The VPSTxId returned to you when the original transaction you’re voiding was registered.
		"SecurityKey": "A987654321", // The SecurityKey returned to us when the original transaction we’re voiding was registered.
		"TxAuthNo": "1234567890" // The TxAuthNo returned to you when the original transaction you’re voiding was authorised.	};
	};

	// if we don't specify a vendorTxCode, generate one - they must always be unique for transaction
	request.VendorTxCode = request.VendorTxCode || require('syracuse-core/lib/uuid').generate('');

	var obj = sagepay.createVoidRequest(function(err) {
		if (err) 
			throw err;
	}, request, {	url: voidUrl,
								//ignoreProxy: true 
								proxy: proxy});
	return obj;
};

exports.createAbortRequest = function createAbortRequest () {

	var request = {
		"VPSProtocol": "3.00",
		"TxType": "ABORT",
		"Vendor": "sagetest2015",
		"VendorTxCode": "208dbc51-d496-47c5-8117-1006a189bf24", 
		"VPSTxId": "cf73373a-ed07-41a0-9679-83ad2db563b2", // The VPSTxId returned to you when the original transaction you’re voiding was registered.
		"SecurityKey": "A987654321", // The SecurityKey returned to us when the original transaction we’re voiding was registered.
		"TxAuthNo": "1234567890" // The TxAuthNo returned to you when the original transaction you’re voiding was authorised.	};
	};

	// if we don't specify a vendorTxCode, generate one - they must always be unique for transaction
	request.VendorTxCode = request.VendorTxCode || require('syracuse-core/lib/uuid').generate('');

	var obj = sagepay.createAbortRequest(function(err) {
		if (err) 
			throw err;
	}, request, {	url: abortUrl,
								//ignoreProxy: true 
								proxy: proxy});
	return obj;
};

exports.createTokenRequest = function createTokenRequest () {

	var request = {
		"VPSProtocol": "3.00", // version of protocol 
		"TxType": "TOKEN",
		"Vendor": "sagetest2015",
		"VendorTxCode": require('syracuse-core/lib/uuid').generate(''),
		"Currency": "GBP", // ISO4217 currecy code, EUR, GBP...
		//"NotificationURL": "http%3A%2F%2F54.148.78.219%3A8124%2Fbundles%2Fsage-pay%2Fredirect",
		"Profile": "NORMAL", // NORMAL (default) or LOW for minimalist page
		"Language": "EN" // ISO639 - Currently supported languages in the Default templates are: French, German, Spanish, Portuguese, Dutch and English.
	};

	// if we don't specify a vendorTxCode, generate one - they must always be unique for transaction
	//request.VendorTxCode = request.VendorTxCode || require('syracuse-core/lib/uuid').generate('');

	var obj = sagepay.createTokenRequest(function(err) {
		if (err) 
			throw err;
	}, request, {	url: tokenRegistrationUrl,
								//ignoreProxy: true 
								proxy: proxy});
	return obj;
};

exports.removeTokenRequest = function createTokenRequest () {

	var request = {
		"VPSProtocol": "3.00", // version of protocol 
		"TxType": "REMOVETOKEN",
		"Vendor": "sagetest2015",
		"Token": "{7039FB9E-D3BC-2C7F-DD27-BD7EF753403A}"
	};

	// if we don't specify a vendorTxCode, generate one - they must always be unique for transaction
	//request.VendorTxCode = request.VendorTxCode || require('syracuse-core/lib/uuid').generate('');

	var obj = sagepay.removeTokenRequest(function(err) {
		if (err) 
			throw err;
	}, request, {	url: tokenRemovalUrl,
								//ignoreProxy: true 
								proxy: proxy});
	return obj;
};

exports.replyToSPSResponse = function replyToSPSResponse (request, response) {
	var obj = sagepay.replyToSPSResponse(function(err) {
		if (err) 
			throw err;
	}, request, response);

	return obj;
};

exports.getSPSResponse = function getSPSResponse (VPSTxId) {
	var obj = sagepay.getSPSResponse(function(err) {
		if (err) 
			throw err;
	}, VPSTxId);

	return obj;
};

// standalone test only!
//this.createTokenRequest();
//this.createPaymentRequest();
this.createReleaseRequest();
//this.creatRefundRequest();
//this.createVoidRequest();
//this.createAbortRequest();
//this.removeTokenRequest();
//this.replyToSPSResponse("VPSProtocol=3.00&TxType=TOKEN&VendorTxCode=bbf1b012c4cc484f9d9109cb4c4e5c41&VPSTxId=ECE309FB-F5B4-C6DD-2B9D-E283881848E3&Token=%7BE38CD136-9744-2C06-84DF-012D95E4A556%7D&Status=OK&StatusDetail=2016+%3A+The+Card+registration+has+been+successful+in+exchange+for+a+token.&CardType=VISA&Last4Digits=5559&ExpiryDate=0118&VPSSignature=21F6B212B75118862D1A8F841D8F7BE0");
//this.getSPSResponse('e');