"use strict";
/// !doc
///
/// # Integration bundle for Sage Sales Tax (SST)
///
///
exports.$exported = true;

var streams = require('streamline-streams');
var jsxml = require('jsxml');
var fs = require('streamline-fs');
var os = require('os');
var config = require('../../../nodelocal').config;
var dot = require('bundles/lib/dot');
var addrString = "";


var Base64 = {
 
    _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
 
    encode : function (input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;
 
        input = Base64._utf8_encode(input);
 
        while (i < input.length) {
 
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
 
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
 
            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }
 
            output = output +
            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
 
        }
 
        return output;
    },
 
    // private method for UTF-8 encoding
    _utf8_encode : function (string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";
 
        for (var n = 0; n < string.length; n++) {
 
            var c = string.charCodeAt(n);
 
            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
 
        }
 
        return utftext;
    }
 
}


function buildAddr(addrType, addrPiece){
	if (addrPiece !== "") {
		if (addrString === ""){
			addrString = addrType + "=" + addrPiece.split(" ").join("+")
		}
		else{
			addrString = addrString + "&" + addrType + "=" + addrPiece.split(" ").join("+");
		}
	}
}


// Send request to Sage Salestax and receive response.
exports.sstValidateAddr = function (_, auth, urlPath, line1, line2, line3, city, region, postalCode, country) {
	//Example;  Line1=6561+Irvine+Center+Drive&City=Irvine&Region=CA&PostalCode=92618
	addrString = "";
	buildAddr("Line1", line1);
	buildAddr("Line2", line2);
	buildAddr("Line3", line3);
	buildAddr("City", city);
	buildAddr("Region", region);
	buildAddr("PostalCode", postalCode);
	buildAddr("Country", country);
	console.log('\n\n  Address URL = ' + addrString)
	var authenticate = Base64.encode(auth);
	console.log('\n\n  Authenticate = ' + authenticate);
	var request = streams.httpRequest({
		url: urlPath + "?" + addrString,
		method: 'GET',
		headers: {
			'Authorization': 'Basic ' + authenticate,
			'content-type': 'text/json',
		},
	});
	var resp = request.end().response(_);
	console.log("status=" + resp.statusCode);
	var jsonResp = resp.readAll(_);
	if (resp.statusCode != 200) {
		console.log(resp.statusCode + ': ' + jsonResp.toString());
		console.log(resp.headers);
		console.log('\n\n Sage Salestax Response = ' + jsonResp.toString());
	} else {
		console.log('\n\n Sage Salestax Response = ' + jsonResp.toString());
	}
	return jsonResp;
}


// Send POST request to Sage Sage Sales Tax and receive response.
exports.sstPost = function (_, auth, urlPath, values) {
	console.log('\n\n  dot values = ' + values);
	var vals = dot.parse(values);
	var authenticate = Base64.encode(auth);
	var req = JSON.stringify(vals);
	console.log('\n\n  req = ' + req);
	var request = streams.httpRequest({
		url: urlPath,
		method: 'POST',
		headers: {
			'Authorization': 'Basic ' + authenticate,
			'content-type': 'text/json',
			'content-length': req.length,
		}
	});
	request.write(_, req, 'utf8');
	var resp = request.end().response(_);
	console.log("status=" + resp.statusCode);
	var jsonResp = resp.readAll(_);
	if (resp.statusCode != 200) {
		console.log(resp.statusCode + ': ' + jsonResp.toString());
		console.log(resp.headers);
	} else {
		console.log('\n\n Sage Salestax Response = ' + jsonResp.toString());
	}
	return jsonResp;
}




