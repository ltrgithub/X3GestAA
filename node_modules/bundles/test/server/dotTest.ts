"use strict";

import { assert } from 'chai';
Object.keys(assert).forEach(key => { if (key !== 'isNaN') global[key] = assert[key]; });

describe(module.id, () => {

var dot = require("bundles/lib/dot");
var dotValues, dotObj, parsed;

it('dot notation', function() {

	var dotValues = 'Application.ApplicationID~=~SAGEERPX5X00000ERPLAAA5USEN' +
		'~,~Application.LanguageID~=~EN' +
		'~,~AccountQuery.Merchant.MerchantID~=~941457786836' +
		'~,~AccountQuery.Merchant.MerchantKey~=~F6K7Y7E7C7T7';

	dotObj = {
		Application: {
			ApplicationID: "SAGEERPX5X00000ERPLAAA5USEN",
			LanguageID: "EN",
		},
		AccountQuery: {
			Merchant: {
				MerchantID: "941457786836",
				MerchantKey: "F6K7Y7E7C7T7",
			}
		}
	};

	parsed = dot.parse(dotValues);
	deepEqual(parsed, dotObj);
});

it('dot notation array', function() {

	dotValues = 'CustomerCode~=~NA003' +
		'~,~DocDate~=~2014-03-12' +
		'~,~CompanyCode~=~020_VM' +
		'~,~Committ~=~false' +
		'~,~DocCode~=~RONSDOCTEST0001' +
		'~,~DocType~=~SalesInvoice' +
		'~,~Lines[0].LineNo~=~1' +
		'~,~Lines[0].DestinationCode~=~1' +
		'~,~Lines[0].OriginCode~=~1' +
		'~,~Lines[0].Qty~=~2' +
		'~,~Lines[0].Amount~=~50' +
		'~,~Lines[1].LineNo~=~2' +
		'~,~Lines[1].DestinationCode~=~1' +
		'~,~Lines[1].OriginCode~=~1' +
		'~,~Lines[1].Qty~=~1' +
		'~,~Lines[1].Amount~=~75' +
		'~,~Addresses[0].AddressCode~=~1' +
		'~,~Addresses[0].Line1~=~6561 Irvine Center Drive' +
		'~,~Addresses[0].PostalCode~=~92618';

	dotObj = {
		"CustomerCode": "NA003",
		"DocDate": "2014-03-12",
		"CompanyCode": "020_VM",
		"Committ": "false",
		"DocCode": "RONSDOCTEST0001",
		"DocType": "SalesInvoice",
		"Lines": [{
			"LineNo": "1",
			"DestinationCode": "1",
			"OriginCode": "1",
			"Qty": "2",
			"Amount": "50"
		}, {
			"LineNo": "2",
			"DestinationCode": "1",
			"OriginCode": "1",
			"Qty": "1",
			"Amount": "75"
		}],
		"Addresses": [{
			"AddressCode": "1",
			"Line1": "6561 Irvine Center Drive",
			"PostalCode": "92618"
		}]
	};

	parsed = dot.parse(dotValues);
	deepEqual(parsed, dotObj);
});
});