// load the module being tested
var check = require("bundles/sage-pt-print"); 

const assert = require('chai').assert;
Object.keys(assert).forEach(key => { if (key !== 'isNaN') global[key] = assert[key]; });

describe('sage-pt-print', () => {

it('Check digital signature', function(_){

  var fs = require('fs');
  var fsp = require('path');
  
  var DataFileNOKPath = fsp.join(__dirname, '../fixtures/DataFileNOK.dat');
  var DataFileOKPath = fsp.join(__dirname, '../fixtures/DataFileOK.dat');
  var digSignNOKPath = fsp.join(__dirname, '../fixtures/digSignNOK.dat');
  var digSignOKPath = fsp.join(__dirname, '../fixtures/digSignOK.dat');

  var DataFileNOK = fs.readFileSync(DataFileNOKPath);
  var DataFileOK = fs.readFileSync(DataFileOKPath);
  var digSignNOK = fs.readFileSync(digSignNOKPath);
  var digSignOK = fs.readFileSync(digSignOKPath);
  
  var b64DataFileNOK = new Buffer(DataFileNOK).toString('base64');
  var b64DataFileOK = new Buffer(DataFileOK).toString('base64');
  var b64digSignNOK = new Buffer(digSignNOK).toString('base64');
  var b64digSignOK = new Buffer(digSignOK).toString('base64');
  
  var resp = check.verifyReport(_,b64DataFileOK, b64digSignOK);
  var jsonrep = JSON.parse(resp);
  deepEqual(jsonrep.value, "true", "Digital signature ok and Data ok = ok");

  resp = check.verifyReport(_,b64DataFileOK, b64digSignNOK);
  jsonrep = JSON.parse(resp);
  deepEqual(jsonrep.value, "false",  "Digital signature ok and Data nok = nok");
  
  resp = check.verifyReport(_,b64DataFileNOK, b64digSignOK);
  jsonrep = JSON.parse(resp);
  deepEqual(jsonrep.value, "false", "Digital signature nok and Data ok = nok");
  
  resp = check.verifyReport(_,b64DataFileNOK, b64digSignNOK);
  jsonrep = JSON.parse(resp);
  deepEqual(jsonrep.value, "false", "Digital signature nok and Data nok = nok");    
  
});
});