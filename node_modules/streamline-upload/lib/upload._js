"use strict";
// see http://www.componentix.com/blog/13
// to do refuse if size > 10000
var http = require("http");
var multipart = require("../deps/multipart/multipart");
var url = require('url');
var sdispatch = require('syracuse-sdata/lib/sdataDispatch').dispatch;
var helpers = require('syracuse-core/lib/helpers');

function parse_multipart(req) {
	var parser = multipart.parser();
	// Make parser use parsed request headers
	parser.headers = req.headers;

	// Add listeners to request, transfering data to parser
	req.addListener("data", function(chunk) {
		parser.write(chunk.toString('binary'));
	});
	req.addListener("end", function() {
		parser.close();
	});
	return parser;
}

function upload_dispatcher(callback, req, res) {
	var parsedURL = url.parse(req.url, true);
	var sdataProperty = (parsedURL.query ? parsedURL.query.data : "");
	if (!sdataProperty) {
		var ex = new Error("Invalid uri");
		helpers.log.exception(module, ex);
		upload_error(res, ex.message);
		return;
	}
	//req.setEncoding("binary");
	// Handle request as multipart
	var stream = parse_multipart(req);
	var buffer = null;

	// Set handler for a request part received
	stream.onPartBegin = function(part) {
		console.log("Started part, name = " + part.name + ", filename = " + part.filename);
	};
	stream.onError = function(ex) {
		helpers.log.exception(upload, ex);
		upload_error(res, ex.message);
		stream.error = null;
	}, // Set handler for a   part body chunk received
	stream.onData = function(chunk) {
		if (buffer) {
			var old = buffer;
			buffer = new Buffer(old.length + chunk.length, "binary");
			old.copy(buffer, 0, 0);
			buffer.write(chunk, old.length, "binary");
		} else {
			buffer = new Buffer(chunk, "binary");
		}
	};
	// Set handler for request completed
	stream.onEnd = function() {
		// execute sdata
		//TODO write bufer in db using sdataProperty
		var request = {
			method: "put",
			socket: req.socket,
			headers: req.headers,
			url: sdataProperty,
			session: req.session,
			body: buffer
		};
		sdispatch(callback, request, res);

		//upload_complete(res);
	};
};

function upload_complete(res) {
	// Render response
	res.writeHead(200, {
		"Content-Type": "text/plain"
	});
	res.end("OK");
}

function upload_error(res, message) {
	// Render response
	res.writeHead(500, {
		"Content-Type": "text/plain"
	});
	res.end(message);
}

exports.dispatcher = upload_dispatcher;