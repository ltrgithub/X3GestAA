"use strict";
/// !doc
/// ## Stream transform for line-oriented text streams
/// 
/// `var ez = require("ez-streams")`  
/// 
module.exports = {
	/// * `transform = ez.transforms.lines.parser(options)`  
	///   creates a parser transform.
	///   `options` is reserved for future use.
	escaper: function(options) {
		options = options || {}
		options.streaming = true;
		var process = require('./escape').escaper(options);
		var splitter = require('ez-streams').transforms.lines.parser({
			sep: '<',
		});
		return function(_, reader, writer) {
			reader.transform(splitter).map(function(_, frag) {
				return process(frag);
			}).filter(function(_, frag) {
				return frag.length > 0;
			}).pipe(_, writer);
		};
	},

	/// * `transform = ez.transforms.lines.formatter(options)`  
	///   creates a formatter transform.
	///   `options.eol` defines the line separator. It is set to `\n` by default.
	///   `options.extra` indicates if an extra line separator must be emitted or not at the end. It is false by default.
	unescaper: function(options) {
		options = options || {}
		options.streaming = true;
		var process = require('./unescape').unescaper(options);
		return function(_, reader, writer) {
			reader.transform(function(_, reader, writer) {
				do {
					var str = reader.read(_);
					// can skip '' but must process undefined at the end to get trailer
					if (str !== '') writer.write(_, process(str));
				} while (str !== undefined);
			}).pipe(_, writer);
		};
	},
};