"use strict";
QUnit.module(module.id);

var htmlEscape = require("html-escape");

var preserve = htmlEscape.escaper({ preserve: true, });
var skipAllowStyles = htmlEscape.escaper({ allowedTags: ['style'], allowedAttributes: ['style']});
var skipAllowStylesPreserve = htmlEscape.escaper({ preserve: true, allowedTags: ['style'], allowedAttributes: ['style']});
var skip = htmlEscape.escaper();
var unescape = htmlEscape.unescaper();
var svgEscaper = htmlEscape.escaper({ preserve: false, profile: 'svg' });

function skipTest(from, to) {
	equals(skip(from), to);
}
function keepTest(from, to) {
	equals(preserve(from), to);
}
function tripTest(from, to) {
	equals(preserve(from), to);
	equals(unescape(to), from);
}
function styleTest(from, to) {
	equals(skipAllowStyles(from), to);
	equals(skipAllowStylesPreserve(from), to);
}
function svgTest(from, to) {
	equals(svgEscaper(from), to);
}

test('comments', 6, function() {
	skipTest('abc<!--xyz-->def', 'abcdef');
	tripTest('abc<!--xyz-->def', 'abc<!-- xyz-->def');
	skipTest('abc<!--x<y>>z-->def', 'abcdef');
	tripTest('abc<!--x<y>>z-->def', 'abc<!-- x<y>>z-->def');
});
test('cdata', 6, function() {
	skipTest('abc<![CDATA[xyz]]>def', 'abcdef');
	tripTest('abc<![CDATA[xyz]]>def', 'abc<!--[CDATA[xyz]]-->def');
	skipTest('abc<![CDATA[x<y>>z]]>def', 'abcdef');
	tripTest('abc<![CDATA[x<y>>z]]>def', 'abc<!--[CDATA[x<y>>z]]-->def');
});
test('script', 6, function() {
	skipTest('abc<script>xyz</script>def', 'abcdef');
	tripTest('abc<script>xyz</script>def', 'abc<!--<script>xyz</script>-->def');
	skipTest('abc<script>x<y>>z</script>def', 'abcdef');
	tripTest('abc<script>x<y>>z</script>def', 'abc<!--<script>x<y>>z</script>-->def');
});
test('style', 9, function() {
	skipTest('abc<style>xyz</style>def', 'abcdef');
	tripTest('abc<style>xyz</style>def', 'abc<!--<style>xyz</style>-->def');
	skipTest('abc<style>x<y>>z</style>def', 'abcdef');
	tripTest('abc<style>x<y>>z</style>def', 'abc<!--<style>x<y>>z</style>-->def');
	skipTest('abc<style>xy-->z</style>def', 'abcdef');
	tripTest('abc<style>xy-->z</style>def', 'abc<!--<style>xy__>z</style>-->def');
});
test('elements', 7, function() {
	skipTest('abc<div>xyz</div>def', 'abc<div>xyz</div>def');
	tripTest('abc<div>xyz</div>def', 'abc<div>xyz</div>def');
	skipTest('abc<div>x<y>>z</div>def', 'abc<div>x&gt;z</div>def');
	// next ones do not roundtrip exactly because > becomes &gt;
	keepTest('abc<div>x<y>>z</div>def', 'abc<div>x<!--<y>-->&gt;z</div>def');
	skipTest('abc<div>xy-->z</div>def', 'abc<div>xy--&gt;z</div>def');
	keepTest('abc<div>xy-->z</div>def', 'abc<div>xy--&gt;z</div>def');
});
test('attributes: syntax variants', 6, function() {
	skipTest('abc<div class="jkl">xyz</div>def', 'abc<div class="jkl">xyz</div>def');
	skipTest("abc<div class='jkl'>xyz</div>def", "abc<div class='jkl'>xyz</div>def");
	skipTest('abc<div class="jk\'l">xyz</div>def', 'abc<div class="jk\'l">xyz</div>def');
	skipTest('abc<div class=\'jk"l\'>xyz</div>def', 'abc<div class=\'jk"l\'>xyz</div>def');
	skipTest('abc<div class=jkl>xyz</div>def', 'abc<div class="jkl">xyz</div>def');
	skipTest('abc<div class name>xyz</div>def', 'abc<div class name>xyz</div>def');
});
test('attributes: disabled', 3, function() {
	skipTest('abc<div class="jkl" foo="mno" name=\'pqr\'>xyz</div>def', 'abc<div class="jkl" name=\'pqr\'>xyz</div>def');
	tripTest('abc<div class="jkl" foo="mno" name=\'pqr\'>xyz</div>def', 'abc<div class="jkl" disabled-foo="mno" name=\'pqr\'>xyz</div>def');
});
test('attributes: bad syntax', 5, function() {
	skipTest('abc<div class="jkl" name:"mno">xyz</div>def', 'abc<div class="jkl" name>xyz</div>def');
	tripTest('abc<div class="jkl" name:"mno">xyz</div>def', 'abc<div class="jkl" name><!--@:"mno"-->xyz</div>def');
	skipTest('abc<div class="jkl" name="m-->no">xyz</div>def', 'abc<div class="jkl" name>no"&gt;xyz</div>def');
	// next one does not roundtrip because second > becomes &gt;
	keepTest('abc<div class="jkl" name="m-->no">xyz</div>def', 'abc<div class="jkl" name><!--@="m---->no"&gt;xyz</div>def');
});
test('attributes: schemes', 8, function() {
	skipTest('abc<a href="http://www.google.com">xyz</a>def', 'abc<a href="http://www.google.com">xyz</a>def');
	tripTest('abc<a href="http://www.google.com">xyz</a>def', 'abc<a href="http://www.google.com">xyz</a>def');
	skipTest('abc<a href="javascript:alert()">xyz</a>def', 'abc<a>xyz</a>def');
	tripTest('abc<a href="javascript:alert()">xyz</a>def', 'abc<a disabled-href="javascript:alert()">xyz</a>def');
	tripTest('abc<a href="noscheme">xyz</a>def', 'abc<a disabled-href="noscheme">xyz</a>def');
});
test('css', 8, function() {
	styleTest('abc<style>x {y: url("javascript:alert()");}</style>def', 'abc<style>x {y: disabled-url("disabled-javascript:alert()");}</style>def');
	styleTest('abc<div style=\'x {y: url("javascript:alert()");}\'>xyz</style>def', 'abc<div style=\'x {y: disabled-url("disabled-javascript:alert()");}\'>xyz</style>def');
	styleTest('abc<style>x {y: ex/*XSS*//*/*/pression(alert("XSS"))}</style>def', 'abc<style>x {y: disabled-expression(alert("XSS"))}</style>def');
	styleTest('abc<style>x {y: \\ja\\vasc\\ript(alert("XSS"))}</style>def', 'abc<style>x {y: disabled-\\ja\\vasc\\ript(alert("XSS"))}</style>def');
});
test('svg', 5, function() {
	// passthrough checks
	svgTest('<?xml version="1.0" encoding="UTF-8" standalone="no"?>', '<?xml version="1.0" encoding="UTF-8" standalone="no"?>');
	svgTest('<svg xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" x="0">', '<svg xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" x="0">');
	// xlink:href test
	svgTest('<use transform="translate(57.58983,0.496064)" xlink:href="#eye" />', '<use transform="translate(57.58983,0.496064)" xlink:href="#eye"/>'); // allow inner shortcut
	svgTest('<use transform="translate(57.58983,0.496064)" xlink:href="http://bad.com/some.svg" />', '<use transform="translate(57.58983,0.496064)"/>'); // filter reference
	// script filter
	svgTest('<svg><script type="text/ecmascript"><![CDATA[ alert(document.cookie); ]]> </script></svg>', '<svg></svg>');
});