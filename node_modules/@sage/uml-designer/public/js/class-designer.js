"use strict";
(function(exports) {
	exports.create = function(config) {
		config = config || {};
		config.div = $(config.div || '#uml-designer');
		var editable = config.editable;
		var dirty = false;
		var setDirty = function() {
			if (!dirty) config.setDirty();
			dirty = true;
		};
		var zoom = 1;

		var invalid;
		var deleteAll = false;

		function invalidate() {
			if (invalid) return;
			invalid = true;
			setTimeout(function() {
				plumbInstance.repaintEverything();
				invalid = false;
			}, 0);
		}

		//show or hide the ckeckbox container according to the situation
		function showCheckBox(value) {
			var checkbox = $(".checkBox-container");
			if (!value) {
				checkbox.hide();
			} else {
				checkbox.show();
			}
		}

		function initClassComponent(parent, data) {
			var $form = $('<div>').addClass('uml-form');
			if (editable) {
				$('<input>').attr('type', 'text').attr('data-prop-name', 'name').addClass('uml-field uml-title') //
				.val(data.name).change(setDirty).appendTo($form);
			} else {
				$('<div>').addClass('uml-value uml-title').text(data.name).appendTo($form);
			}

			function addListWidget(name) {
				$('<hr class="uml-sep"/>').appendTo($form);
				var $div = $('<div>').attr('data-prop-name', name).appendTo($form);
				var expanded = !! data[name + 'Expanded'];

				function addLine(text) {
					var $lineDiv = $('<div>').addClass('uml-line');
					if (editable) {
						$('<input>').attr('type', 'text').attr('data-prop-name', 'line').addClass('uml-field') //
						.val(text).change(setDirty).appendTo($lineDiv);
						$('<div>').addClass('uml-line-remove').click(function(ev) {
							setDirty();
							invalidate();
							expanded = true;
							// $lineDiv.remove();
							// fixExpand();

							// TOTO add code to handle multiple delete actions
							if (!deleteAll) {
								var dialog = $deleteDialog;
								showCheckBox(true);
								dialog.open(ev, "", function(result) {
									if (result.action === "delete") {
										$lineDiv.remove();
										fixExpand();
									} 
								});
							} else {
								showCheckBox(false);
								$lineDiv.remove();
								fixExpand();
							}


						}).appendTo($lineDiv);
						$('<div>').addClass('uml-line-move-down').click(function() {
							setDirty();
							if (!expanded) invalidate();
							expanded = true;
							$lineDiv.insertAfter($lineDiv.next());
							fixExpand();
						}).appendTo($lineDiv);
						$('<div>').addClass('uml-line-move-up').click(function() {
							setDirty();
							if (!expanded) invalidate();
							expanded = true;
							$lineDiv.insertBefore($lineDiv.prev());
							fixExpand();
						}).appendTo($lineDiv);
						$lineDiv.insertBefore($add);
					} else {
						$('<div>').addClass('uml-value').text(text).appendTo($lineDiv);
						$lineDiv.appendTo($div);
					}
				}

				function fixExpand() {
					var $lines = $div.find('.uml-line');
					$lines.show();
					var max = 3;
					$expand.toggleClass('uml-line-expanded', expanded);
					if ($lines.length <= max) {
						// empty text rather than hide to keep line height for add button
						if (editable) $expand.text(' ');
					} else {
						if (expanded) {
							$expand.text('<<< less');
						} else {
							$expand.text('>>> more');
							$lines.each(function(i, elt) {
								if (i >= max) $(elt).hide();
							});
						}
					}
				}
				if (editable) {
					var $add = $('<div>').addClass('uml-line-add').click(function() {
						setDirty();
						expanded = true;
						addLine('');
						invalidate();
						fixExpand();
					}).appendTo($div);
				}
				if (data[name]) data[name].forEach(addLine);
				var $expand = $('<span>').attr('data-expanded-name', name).addClass('uml-line-expand').click(function() {
					expanded = !expanded;
					fixExpand();
					invalidate();
				}).appendTo($div);
				fixExpand();
			}
			addListWidget('attributes');
			addListWidget('methods');
			$form.appendTo(parent);
		}

		function getListValue(div) {
			var values = [];
			div.find('[data-prop-name="line"]').each(function(i, input) {
				values.push($(input).val());
			});
			return values;
		}

		var $designer = config.div.addClass('uml-designer');
		var $messageDiv = $('<pre>').addClass('uml-message').appendTo($('<div>').appendTo($designer));
		var $actionsDiv = $('<div>').addClass('uml-actions').appendTo($designer);
		var $container = $('<div>').attr('id', 'uml-container').addClass('uml-container').appendTo($designer);

		var $workbench = $('<div>').attr('id', 'uml-workbench').addClass('uml-workbench').appendTo($container);

		jsPlumb.setContainer("uml-container");

		function message(msg) {
			$designer.find('.uml-message').css({
				color: 'green'
			}).text(msg);
		}

		function error(msg) {
			return alert(msg); // for now
			$designer.find('.uml-message').css({
				color: 'red'
			}).text(msg);
		}

		function serialize(code, title) {
			var graph = {
				code: code,
				title: title,
				classes: [],
				postits: [],
				connections: [],
			};
			$workbench.find('.uml-component-outer').each(function(i, elt) {
				var comp = $(elt);
				var pos = comp.position();
				var result = {
					id: comp.attr('data-class-id'),
					top: pos.top,
					left: pos.left,
					name: "" + comp.find('[data-prop-name="name"]').val(),
					attributes: getListValue(comp.find('[data-prop-name="attributes"]')),
					attributesExpanded: comp.find('[data-expanded-name="attributes"]').hasClass('uml-line-expanded'),
					methods: getListValue(comp.find('[data-prop-name="methods"]')),
					methodsExpanded: comp.find('[data-expanded-name="methods"]').hasClass('uml-line-expanded'),
				};
				graph.classes.push(result);
			});
			$workbench.find('.uml-postit-outer').each(function(i, elt) {
				var comp = $(elt);
				var pos = comp.position();
				var $textarea = comp.find('.uml-postit-textarea');
				var result = {
					classId: comp.attr('data-class-id'),
					text: $textarea.val(),
					top: pos.top,
					left: pos.left,
					width: comp.outerWidth(),
					height: comp.outerHeight(),
				};
				graph.postits.push(result);
			});
			plumbInstance.select().each(function(connection) {
				if (isPostitConnection(connection)) return;
				var conn = {
					source: $(connection.source).attr('data-class-id'),
					target: $(connection.target).attr('data-class-id'),
					type: connection.details.type,
				};
				conn.multiplicities = connection.details.multiplicities;
				conn.roles = connection.details.roles;
				conn.association = connection.details.association;
				graph.connections.push(conn);
			});
			return graph;
		}

		function save() {
			try {
				//maybe find another solution to manage the position issues when the workbench is scrolled.
				$workbench.scrollLeft(0);
				$workbench.scrollTop(0);
				return serialize();
			} catch (ex) {
				error("getValue failed: " + ex.stack || ex.toString());
			}
		}

		function clear() {
			plumbInstance.detachEveryConnection();
			$workbench.empty();
		}

		// transform JSON into a graphic chart

		function deserialize(graph) {
			if (!graph) return;
			clear();
			dirty = true;
			var comps = [];
			graph.postits = graph.postits || [];
			graph.classes.forEach(function(clas) {
				comps[clas.id] = addClassComponent(clas);
			});
			graph.postits.forEach(function(postit) {
				var p = Object.create(postit);
				p.parent = comps[postit.classId];
				addPostItComponent(p);
			});

			setTimeout(function() {
				plumbInstance.doWhileSuspended(function() {
					graph.connections.forEach(function(connection) {
						var conn = plumbInstance.connect({
							source: comps[connection.source],
							target: comps[connection.target],
							type: connection.type,
						});
						setOverlays(conn, connection);
					});
				});
				dirty = false;
			});
			jsPlumb.fire("jsPlumbDemoLoaded", plumbInstance);
		}

		function load(graph) {
			try {
				deserialize(graph);
			} catch (ex) {
				error("Load failed: " + ex.stack || ex.toString());
			}
		}

		function createClassComponent() {
			var source;

			setDirty();
			source = addClassComponent({
				connectivities: ["source"],
				// I used $container instead of $workbench since when zooming $workbench width become greater than $container,
				// thus left and top offset have negative values
				// top: $workbench.offset().top,
				// left: $workbench.offset().left,
				top: $container.offset().top,
				left: $container.offset().left * (zoom * 3)
			});
		}

		function createPostItComponent() {
			setDirty();

			addPostItComponent({
				text: '',
				classId: '',
				// I used $container instead of $workbench since when zooming $workbench width become greater than $container,
				// thus left and top offset have negative values
				top: $container.offset().top,
				left: $container.offset().left * (zoom * 3)
			});
		}

		function enterFullScreen() {
			$designer[0].className += " fullscreen";
			$("#uml-workbench").addClass("fullscreen");
			$(".fullscreen-exit").css("display", "block");
			$(".fullscreen-enter").css("display", "none");
		}

		function exitFullScreen() {
			$(".fullscreen").removeClass("fullscreen");
			$(".fullscreen-enter").css("display", "block");
			$(".fullscreen-exit").css("display", "none");
		}

		function connectionStyle(arrowFoldback, arrowFill) {
			var overlays = [];
			if (arrowFoldback > 0) {
				var paintStyle = {
					strokeStyle: "#9a9b9c",
				};
				if (arrowFill) paintStyle.fillStyle = arrowFill;
				overlays.push(["Arrow", {
					length: 16,
					width: 16,
					location: 1,
					foldback: arrowFoldback,
					paintStyle: paintStyle,
				}]);
			}
			if (arrowFoldback !== 1) { // not generalization
				overlays = overlays.concat([
					["Label", {
						id: "association-name",
						location: 0.5,
						cssClass: "uml-overlay-label"
					}],
					["Label", {
						id: "source-role",
						location: 0.2,
						cssClass: "uml-overlay-label"
					}],
					["Label", {
						id: "target-role",
						location: 0.8,
						cssClass: "uml-overlay-label"
					}],
					["Label", {
						id: "source-multiplicity",
						location: 0.2,
						cssClass: "uml-overlay-multiplicity"
					}],
					["Label", {
						id: "target-multiplicity",
						location: 0.8,
						cssClass: "uml-overlay-multiplicity"
					}],
				]);
			}
			var styles = {
				paintStyle: {
					strokeStyle: "#9a9b9c",
					lineWidth: 4
				},
				overlays: overlays,
			};
			if (editable) {
				styles.hoverPaintStyle = {
					strokeStyle: "#4d4f53",
				};
			}
			return styles;
		}

		var connectionStyles = {
			generalization: connectionStyle(1, "white"),
			association: connectionStyle(0),
			aggregation: connectionStyle(2, "white"),
			composition: connectionStyle(2),
			postit: {
				paintStyle: {
					dashstyle: "3 3 3 3",
					strokeStyle: "#9a9b9c",
					lineWidth: 1,
				},
				connector: "Straight",
				anchor: ["Perimeter", {
					shape: "Rectangle"
				}],
			},
		};

		var plumbInstance = window.plumbInstance = jsPlumb.getInstance({
			Connector: [
				["Flowchart"], {}
			],
			// Endpoints and Anchors defaults are necessary in non writable mode
			Endpoints: [
				["Blank", {}],
				["Blank", {}]
			],
			Anchors: ["Continuous", "Continuous"],
			Container: '#uml-workbench',
		});

		plumbInstance.registerConnectionTypes(connectionStyles);

		var lastId = 0;

		function addClassComponent(opts) {
			var id = ++lastId;
			var $compo = $('<div>').addClass('uml-component-outer').attr('data-class-id', id).appendTo($workbench);
			if (editable) $compo.addClass('uml-editable');
			var $compoInner = $('<div>').addClass('uml-component').appendTo($compo);

			if (editable) {
				$compoInner.click(setDirty);
				var $compoRemove = $('<div>').addClass('uml-remove') //
				.appendTo($compoInner).click(function(ev) {
					showCheckBox(false);
					//TODO confirm delete action
					$deleteDialog.open(ev, "", function(result) {
						if (result.action === "delete") {
							//Logic to delete the item
							setDirty();
							plumbInstance.detachAllConnections($compo);
							plumbInstance.removeAllEndpoints($compo);
							$compo.remove();
						} 
					});
				});
				var $addPostit = $('<div>').addClass('uml-add-postit') //
				.appendTo($compoInner).click(function() {
					var pos = $compo.position();
					addPostItComponent({
						parent: $compo,
						classId: id,
						text: '',
						top: Math.max(0, pos.top - 140),
						left: Math.max(0, pos.left - 120),
					});
				});
				$('<div>').addClass('uml-source').appendTo($compoInner);
			}

			initClassComponent($compoInner, opts);

			$compo.css({
				position: 'absolute',
				top: opts.top,
				left: opts.left
			});

			if (editable) {
				plumbInstance.draggable($compo);

				plumbInstance.makeSource($compo, {
					filter: ".uml-source",
					anchor: "Continuous",
					endpoint: "Blank",
				});

				plumbInstance.makeTarget($compo, {
					dropOptions: {
						hoverClass: "uml-target-hover"
					},
					anchor: "Continuous",
					endpoint: "Blank",
					allowLoopback: true
				});
			}

			plumbInstance.repaint($compo);

			return $compo;
		}

		function addPostItComponent(opts) {
			var $compo = $('<div>').addClass('uml-postit-outer').attr('data-class-id', opts.classId).appendTo($workbench);
			if (editable) $compo.addClass('uml-editable');

			if (editable) {
				var $compoRemove = $('<div>').addClass('uml-remove') //
				.appendTo($compo).click(function(ev) {
					showCheckBox(false);
					//TODO confirm delete action
					$deleteDialog.open(ev, "", function(result) {
						if (result.action === "delete") {
							//Logic to delete the item
						    setDirty();
							plumbInstance.detachAllConnections($compo);
							plumbInstance.removeAllEndpoints($compo);
							$compo.remove();
						} 
					});
				});
			}
			var $compoInner = $('<div>').addClass('uml-postit').appendTo($compo);
			$compoInner.click(setDirty);

			var $textarea = $('<textarea>').attr('cols', 5) /*.attr('rows', 3)*/ .addClass('uml-postit-textarea') //
			.val(opts.text).appendTo( /*$('<div>').appendTo(*/ $compoInner);
			if (editable) {
				$textarea.change(setDirty);
			} else {
				$textarea.prop('readonly', true).css({
					resize: 'none',
				});
			}

			$compo.css({
				position: 'absolute',
				top: opts.top,
				left: opts.left,
				width: opts.width || 100,
				height: opts.height || 120,
			});

			if (editable) {
				var moveEv;
				$compo.mousemove(function(ev) {
					moveEv = ev;
				});

				$compo.resizable({
					handles: 'se',
					resize: function(e, ui) {
						// repaint would be smarter but it does not work
						//plumbInstance.repaint(ui.helper);
						plumbInstance.repaintEverything();
					},
					stop: function(e, ui) {
						plumbInstance.repaintEverything();
						setDirty();
					},
				});

				plumbInstance.draggable($compo, {
					// drag interferes with resize so we only allow it in a narrow band at the top
					canDrag: function() {
						if (!moveEv) return true;
						var offset = $compo.offset();
						var relY;

						if (zoom > 1) {
							relY = moveEv.pageY - offset.top * zoom;
						} else {
							relY = moveEv.pageY - offset.top;
						}

						return relY < 16;
					}
				});
			}
			jsPlumb.ready(function() {
				plumbInstance.connect({
					source: opts.parent,
					target: $compo,
					type: "postit",
				});
				//plumbInstance.repaint($compo);
			});

			return $compo;
		}

		function createDialog(getCfg, ok) {
			var $dialog = $('<div>').addClass('uml-dialog').appendTo($container).hide();
			var $outer = $('<div>').addClass('uml-dialog-outer').appendTo($dialog);
			var $inner = $('<div>').addClass('uml-dialog-inner').appendTo($outer);
			var cfg = getCfg();
			cfg.contents.appendTo($inner);
			$dialog.click(function(ev) {
				$dialog.hide();
				callback = null;
			});
			$outer.click(function(ev) {
				ev.stopPropagation();
			});

			var callback;

			function open(ev, data, cb) {
				callback = cb;
				var r = $container[0].getBoundingClientRect();
				$dialog.css({
					'z-index': $designer.zIndex() + 100,
					position: 'absolute',
					top: $container[0].offsetTop,
					left: $container[0].offsetLeft,
					width: r.width,
					height: r.height,
					'background-color': 'transparent',
				});
				$outer.css({
					position: 'absolute',
					top: ev.clientY - r.top - 30,
					left: ev.clientX - r.left - 30,
					'background-color': 'white',
					opacity: 1,
				});
				cfg.fill(data);

				$dialog.show();
			}

			function close(result) {
				$dialog.hide();
				callback(result);
			}
			return {
				open: open,
				close: close,
			};
		}


		var $relationDialog = createDialog(function() {
			var $div = $('<div>').addClass('uml-dialog-relation');

			function fixForm() {
				var type = $('#uml-relation-type').val();
				$('.uml-multiplicity-div')[type !== 'generalization' ? 'show' : 'hide']();
				$('.uml-association-div')[type !== 'generalization' ? 'show' : 'hide']();
			}

			function addTypeSelect() {
				var $d = $('<div>').appendTo($div);
				$('<label>').addClass('uml-dialog-label').text("relation type").appendTo($d);
				var $select = $('<select id="uml-relation-type">').addClass('uml-dialog-field').change(fixForm).appendTo($d);
				['generalization', 'association', 'aggregation', 'composition'].forEach(function(type) {
					$('<option>').attr('value', type).text(type).appendTo($select);
				});
			}

			function addMultiplicitySelect(id, label) {
				var $d = $('<div>').addClass('uml-multiplicity-div').appendTo($div);
				$('<label>').addClass('uml-dialog-label').text(label).appendTo($d);
				var $select = $('<select>').attr('id', id).addClass('uml-dialog-field').appendTo($d);
				['0..1', '0..*', '1', '1..*'].forEach(function(mult) {
					$('<option>').attr('value', mult).text(mult).appendTo($select);
				});
			}

			function addAssociationField() {
				var $d = $('<div>').addClass('uml-association-div').appendTo($div);
				$('<label>').addClass('uml-dialog-label').text('association name').appendTo($d);
				$('<input id="uml-association-name" type="text">').addClass('uml-dialog-field').appendTo($d);
				$('<br>').appendTo($d);
				$('<label>').addClass('uml-dialog-label').text('source name').appendTo($d);
				$('<input id="uml-source-role" type="text">').addClass('uml-dialog-field').appendTo($d);
				$('<br>').appendTo($d);
				$('<label>').addClass('uml-dialog-label').text('target name').appendTo($d);
				$('<input id="uml-target-role" type="text">').addClass('uml-dialog-field').appendTo($d);
			}

			function addButtons() {
				var $d = $('<div>').appendTo($div);
				$('<hr>').appendTo($d);
				$('<span>').text('OK').addClass('uml-dialog-ok').click(function() {
					$relationDialog.close({
						action: 'submit',
						type: $('#uml-relation-type').val(),
						multiplicities: [$('#uml-source-multiplicity').val(), $('#uml-target-multiplicity').val()],
						roles: [$('#uml-source-role').val(), $('#uml-target-role').val()],
						association: $('#uml-association-name').val(),
					});
				}).appendTo($d);
				$('<hr>').appendTo($d);
				$('<span>').text('delete').addClass('uml-dialog-delete').click(function() {
					$relationDialog.close({
						action: 'delete',
					});
				}).appendTo($d);
			}
			addTypeSelect();
			addMultiplicitySelect('uml-source-multiplicity', 'source multiplicity');
			addMultiplicitySelect('uml-target-multiplicity', 'target multiplicity');
			addAssociationField();
			addButtons();

			function fill(data) {
				$('#uml-relation-type').val(data.type);
				$('#uml-source-multiplicity').val(data.multiplicities[0]);
				$('#uml-target-multiplicity').val(data.multiplicities[1]);
				$('#uml-source-role').val(data.roles[0]);
				$('#uml-target-role').val(data.roles[1]);
				$('#association-name').val(data.association);
				fixForm();
			}

			return {
				contents: $div,
				fill: fill,
			};
		});
		
		// This is a confirm box shown when the user perform a delete action 
		var $deleteDialog = createDialog(function() {
			var $div = $('<div>').addClass('uml-dialog-relation');

			function addMessage() {
				var $d = $('<div>').appendTo($div);
				$('<label>')
					.addClass('uml-dialog-label')
					.text("Are you sure you want to delete this element?")
					.appendTo($d);
			}

			function addButtons() {
				var $d = $('<div>').appendTo($div);
				$('<hr>').appendTo($d);
				$('<span>').text('OK').addClass('uml-dialog-ok').click(function() {
					$deleteDialog.close({
						action: 'delete'
					});
				}).appendTo($d);
				$('<hr>').appendTo($d);
				$('<span>').text('cancel').addClass('uml-dialog-delete').click(function() {
					$deleteDialog.close({
						action: 'submit',
					});
				}).appendTo($d);
			}

			function addCheckBox() {
				var $d = $('<div>').addClass("checkBox-container").appendTo($div);

				$('<input />', { type: 'checkbox', value: 'test', name: 'delete-check' })
					.addClass('uml-dialog-checkbox')
					.click(function () {
						deleteAll = $(this).is(':checked');
					}).appendTo($d);

				$('<label>')
					.addClass('uml-dialog-checkbox-label')
					.text("Don't ask me again for methods and properties")
					.appendTo($d);
			}

			addMessage();
			addCheckBox();
			addButtons();

			function fill(data) {
				//TODO: fill with message to show to the user
			}

			return {
				contents: $div,
				fill: fill,
			};
		});

		function isPostitConnection(connection) {
			return $(connection.target).hasClass('uml-postit-outer');
		}

		function setOverlays(connection, details) {
			function setOverlay(name, val) {
				var overlay = connection.getOverlay(name);
				if (overlay) overlay.setLabel(val || '');
			}
			connection.details = details;
			connection.setType(details.type);
			setOverlay('source-multiplicity', details.multiplicities[0]);
			setOverlay('target-multiplicity', details.multiplicities[1]);
			setOverlay('source-role', details.roles[0]);
			setOverlay('target-role', details.roles[1]);
			setOverlay('association-name', details.association);
		}
		if (editable) {
			plumbInstance.bind("connection", function(connection) {
				if (isPostitConnection(connection.connection)) return;
				setDirty();
				setOverlays(connection.connection, {
					type: 'composition',
					multiplicities: ['', ''],
					roles: ['', ''],
					association: '',
				});
			});
			plumbInstance.bind("click", function(connection, ev) {
				$relationDialog.open(ev, connection.details, function(result) {
					if (result.action === 'submit') {
						setOverlays(connection, result);
					} else if (result.action === 'delete') {
						showCheckBox(false);
						//confirm delete action
						$deleteDialog.open(ev, "", function(result) {
							if (result.action === "delete") {
								//Logic to delete the item
							    plumbInstance.detach(connection);
							} 
						});
					} else {
						throw new Error('bad action: ' + result.action);
					}
				});
			});

			var addButton = function(title, fn) {
				$('<div>').addClass('uml-button').text(title).click(function() {
					fn();
				}).appendTo($actionsDiv);
			};

			var addFullScreenButtons = function(title1, title2) {
				var $d = $('<div>').addClass('uml-button').appendTo($actionsDiv),
					enterBtn = $('<button>')
						.addClass('fullscreen-enter')
						.text(title1)
						.attr('title', 'Enter full screen mode')
						.click(function() {
							enterFullScreen();
					}),
					exitBtn = $('<button>')
						.addClass('fullscreen-exit')
						.text(title2)
						.attr('title', 'Exit full screen mode')
						.click(function() {
							exitFullScreen();
					});

				enterBtn.appendTo($d);
				exitBtn.appendTo($d);

			};

			addButton('Add Class', createClassComponent);
			addButton('Add Postit', createPostItComponent);
			addButton('Zoom out', setZoomOut);
			addButton('Zoom in', setZoomIn);
			addFullScreenButtons('', '');
		}

		function setZoomOut () {
			zoom += 0.05;
			setZoom(zoom, jsPlumb);
		}

		function setZoomIn () {
			zoom -= 0.05;
			setZoom(zoom, jsPlumb);
		}

		function setZoom (zoom, instance, transformOrigin, el) {
			transformOrigin = transformOrigin || [ 0.5, 0.5 ];
			instance = instance || jsPlumb;
			el = el || instance.getContainer() || $workbench;

			var p = [ "webkit", "moz", "ms", "o" ],
				s = "scale(" + zoom + "," + zoom + ")",
				oString = (transformOrigin[0] * 100) + "% " + (transformOrigin[1] * 100) + "%";

			for (var i = 0; i < p.length; i++) {
				el.css("-"+p[i] + "-transform", s);
				el.css("-"+p[i] + "-transform-origin", oString);
			}

			el.css("zoom", zoom);
			el.css("transform", s);
			el.css("transform-origin", oString);

			instance.setZoom(zoom);    
		}

		jsPlumb.fire("jsPlumbDemoLoaded", plumbInstance);

		return {
			getValue: save,
			setValue: load,
		};
	};
})(typeof exports !== "undefined" ? exports : registerModule('uml-designer/lib/designer'));