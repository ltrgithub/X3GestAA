"use strict";

module.exports = {
	$titleTemplate: "UML Class Diagram {name}",
	$valueTemplate: "{name}",
	$summaryTemplate: "UML Class Diagram {name}",
	$descriptionTemplate: "UML Class Diagram",
	$className: "UmlClassDiagram",
	$canCreate: true,
	$helpPage: "Workbench-UML-class-diagram",
	$uniqueConstraints: [
		['name', 'endpoint'],
	],
	$properties: {
		name: {
			$title: "Diagram name",
			$isMandatory: true,
			$linksToDetails: true
		},
		module: {
			$title: "Module",
			$type: "integer",
			$enum: [{
				$value: 0,
				$title: "N/A",
			}, {
				$value: 1,
				$title: "Supervisor",
			}, {
				$value: 1,
				$title: "Supervisor",
			}, {
				$value: 2,
				$title: "Financials",
			}, {
				$value: 3,
				$title: " A/P-A/R accounting",
			}, {
				$value: 4,
				$title: "External",
			}, {
				$value: 5,
				$title: "Sales",
			}, {
				$value: 6,
				$title: "Purchasing",
			}, {
				$value: 7,
				$title: "Stock",
			}, {
				$value: 8,
				$title: "Manufacturing",
			}, {
				$value: 9,
				$title: "Common Data",
			}, {
				$value: 10,
				$title: "Development",
			}, {
				$value: 11,
				$title: "Sage X3 Internals",
			}, {
				$value: 12,
				$title: "Help-Desk",
			}, {
				$value: 13,
				$title: "CRM activities",
			}, {
				$value: 14,
				$title: "Fixed Assets",
			}, {
				$value: 15,
				$title: "Human Resources administration",
			}, {
				$value: 16,
				$title: "Module Spe 1",
			}, {
				$value: 17,
				$title: "Module Spe 2",
			}, {
				$value: 18,
				$title: "Module Spe 3",
			}, {
				$value: 19,
				$title: "Module Spe 4",
			}, {
				$value: 20,
				$title: "Human Capital management",
			}],
			$default: 0,

		},
		data: {
			$title: "Data",
			$type: "uml-class-diagram",
			$facets: ["$edit"],
		},
	},
	$relations: {
		endpoint: {
			$title: "Endpoint",
			$type: "endPoint",
			$inv: "umlClassDiagrams",
			// TODO: lookup filter
		},
		linksTo: {
			$title: "Related Diagrams",
			$type: "umlClassDiagrams",
			$inv: "linkedFrom",
			$lookupFilter: {
				// only allow link to diagrams on the same endpoint
				endpoint: "{endpoint}",
			},

		},
		linkedFrom: {
			$title: "Referenced from",
			$type: "umlClassDiagrams",
			$isReadOnly: true,
			$isComputed: true,
			$inv: "linksTo",
		}
	},
	$services: {
		updateSyracuseDiagrams: {
			$method: "POST",
			$isMethod: false,
			$title: "Create/update Syracuse diagrams",
			$invocationMode: "async",
			$execute: function(_, context) {
				function _track(phase, detail, progress) {
					if (!context.tracker) return;
					context.tracker.phase = phase;
					context.tracker.phaseDetail = detail;
					context.tracker.progress = progress;
				}
				var t = context && context.tracker;

				var contract = require('@sage/syracuse-lib/src/collaboration/contract').contract;
				var model = require('@sage/syracuse-lib/src/orm/dataModel').make(contract);
				var keys = Object.keys(model.entities);
				keys.forEach_(_, function(_, key, i) {
					_track("generating diagram", key, 100 * i / keys.length);
					updateSyracuseDiagram(_, context, contract.entities[key]);
				});
				context.response.writeHead(200, {});
				context.response.write(_);
				_track("done", "", 100);
			},
		},
	},
	$searchIndex: {
		$fields: ["name"]
	},
	$defaultOrder: [
		["name", true]
	]
};

function syracuseDiagram(entity) {
	var classes = {};

	function makeClass(ent) {
		if (classes[ent.name]) return classes[ent.name];
		var clas = classes[ent.name] = {
			name: ent.name,
			attributes: Object.keys(ent.$properties),
			methods: Object.keys(ent.$functions),
			// for now use functions as methods
		};
		diagram.data.classes.push(clas);
		clas.id = diagram.data.classes.length;
		return clas;
	}

	var diagram = {
		name: "syracuse-" + entity.name,
		data: {
			classes: [],
			connections: [],
		}
	};
	var sourceClass = makeClass(entity);
	// expand only attributes, and only in source class
	sourceClass.attributesExpanded = true;
	//sourceClass.methodsExpanded = true;
	Object.keys(entity.$relations).forEach(function(name) {
		var rel = entity.$relations[name];

		function relType(rel) {
			if (rel.getIsChild()) return "composition";
			else return "association";
		}

		function multiplicity(rel) {
			if (!rel) return '';
			return rel.isPlural ? '0..*' : rel.$isMandatory === true ? '1' : '0..1';
		}

		function role(rel) {
			return rel && rel.name ? rel.name : '';
		}
		if (!rel.targetEntity) {
			console.error("No target entity for " + entity.name + "." + name);
			return;
		}
		var targetClass = makeClass(rel.targetEntity);
		var inv = rel.inv && rel.targetEntity && rel.targetEntity.$relations[rel.inv];
		// swap rel and inv if composition in the other direction.
		if (inv && inv.getIsChild()) {
			var tmp = inv;
			inv = rel;
			rel = tmp;
			tmp = targetClass;
			targetClass = sourceClass;
			sourceClass = tmp;
		}
		diagram.data.connections.push({
			source: sourceClass.id,
			target: targetClass.id,
			type: relType(rel),
			multiplicities: [multiplicity(rel), multiplicity(inv)],
			roles: [role(rel), role(inv)],
		});
	});
	return diagram;
}

function setCoordinates(classes) {
	var radX = 500,
		radY = 400,
		offX = 20,
		offY = 30,
		marX = 10,
		marY = 10;

	var clas = classes[0];
	clas.left = radX - offX;
	clas.top = radY - offY;

	var count = classes.length - 1;
	for (var i = 0; i < count; i++) {
		clas = classes[i + 1];
		clas.left = radX - offX + (radX - marX) * Math.cos(i * 2 * Math.PI / count);
		clas.top = radY - offY + (radY - marY) * Math.sin(i * 2 * Math.PI / count);
	}
}

function saveSyracuseDiagram(_, context, diagram) {
	var instance = context.db.fetchInstance(_, context.entity, {
		jsonWhere: {
			name: diagram.name,
		},
	});
	if (!instance) {
		instance = context.entity.factory.createInstance(_, null, context.db);
		instance.name(_, diagram.name);
	}
	instance.endpoint(_, require("@sage/syracuse-lib/src/collaboration/helpers").AdminHelper.getCollaborationEndpoint(_));
	instance.data(_, diagram.data);
	instance.save(_);

	instance.getAllDiagnoses(_, context.tracker.$diagnoses, {
		addEntityName: true,
		addPropName: true
	});
}

function updateSyracuseDiagram(_, context, entity) {
	var diagram = syracuseDiagram(entity);
	setCoordinates(diagram.data.classes);
	saveSyracuseDiagram(_, context, diagram);
}