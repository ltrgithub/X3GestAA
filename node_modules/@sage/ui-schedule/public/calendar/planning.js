"use strict";
var _ext = require('@sage/syracuse-ui/lib/extend/extendGateway');
var Calendar = require("@sage/ui-schedule/public/calendar/baseCalendar").Calendar;
var _globals = require('streamline-runtime').globals;
var _moment = require("@sage/ui-schedule/public/deps/calendar/moment");

require("@sage/ui-schedule/public/deps/calendar/planning");

exports.stylesheets = ["/@sage/ui-schedule/public/calendar/planning.css", "/@sage/ui-schedule/public/calendar/patternbolt.css"];
exports.create = function (context) {
    var cal = new Calendar();
    context.field.$useFullData = true;
    cal.setValue = function (dataRecordSet) {
        var self = this;
        var $bindings = self.context.prototype.$decorator.$bindings;
        self.usingPlanningCalendar = true;
        if (dataRecordSet && dataRecordSet.length) {
            self.planningSlotsPerCell = $bindings.SLOT.length;
            var renderedYear = self.calendarYear && self.calendarYear.slice(0, 4);
            if (dataRecordSet) {
                self._events = [];
                for (var ii = 0, jj = dataRecordSet.length; ii < jj; ii++) {
                    var record = dataRecordSet[ii];
                    var eventDate = record[$bindings.TECDAT].substring(0, 10);
                    var slots = $bindings.SLOT &&
                        $bindings.SLOT.map(function ($bind) {
                            return record[$bind];
                        }) ||
                        [];
                    for (var mm = 0, kk = slots.length; mm < kk; mm++) {
                        self._events.push({
                            title: '',
                            start: eventDate,
                            end: eventDate,
                            dayType: record[$bindings.TYPDAY],
                            slotType: slots[mm],
                            slot: mm
                        });
                    }
                }
                self.calendarYear = self._events[5].start;
            }
            self.planningDayTypes = [];
            var $events = self.context.prototype.$decorator.$events;
            if ($events) {
                for (var ii = 0, jj = $events.length; ii < jj; ii++) {
                    self.planningDayTypes.push(_ext.data.parseExpression(self.context, $events[ii]));
                }
            }

            if (self.calendar) {
                if (renderedYear && renderedYear !== self.calendarYear.slice(0, 4)) {
                    // We've changed calendar year, so regenerate the entire calendar - not just the events!
                    $(self.context.div).find("div[id*=cal]").remove();
                    self._draw();
                }
                else {
                    self._widget.planningFullCalendar('refetchEvents');
                }
            }
            else {
                var view = self.context.prototype.$decorator.$style;
                self.defaultView = (view == 'year') ? 'planningYear' : 'planningMonth';
            }
            self._createWidget();
        }
    };
    cal._createWidget = function () {
        var self = this;
        self.calendar = self._widget.planningFullCalendar({
            aspectRatio: self._ASPECT_RATIO,
            header: {
                left: 'prev,next',
                center: 'title',
                right: 'planningYear,planningMonth'
            },
            planningCalendar: true,
            planningSlotsPerCell: self.planningSlotsPerCell,
            planningDayTypes: self.planningDayTypes,
            defaultView: self.defaultView,
            defaultDate: self.calendarYear,
            buttonText: {
                year: self.locale.plcal_year,
                month: self.locale.plcal_month,
                week: self.locale.plcal_week,
                day: self.locale.plcal_day
            },
            monthNames: self.monthNames,
            monthNamesShort: self.monthNamesShort,
            dayNames: self.dayNames,
            dayNamesShort: self.dayNamesShort,
            firstDay: _globals.context.localePreferences.firstDayOfWeek === undefined ? 1 : _globals.context.localePreferences.firstDayOfWeek,
            selectable: false,
            selectHelper: false,
            select: function (start, end, allDay) {
            },
            editable: false,

            events: function (start, end, timezone, callback) {
                callback(self._events || []);
            },
            eventMouseover: function (event, jsEvent, view) {
                self._onPlanningEventHover(event, jsEvent);
                return false;
            },
            viewRender: function (planningView) {
                // set the default view to the new view name in order to maintain the view type when changing between years.
                self.defaultView = planningView.name;
            }
        });
    };
    cal._onPlanningEventHover = function (event, jsEvent) {
        var self = this;
        if (!event) {
            cal._eventPopup && cal._eventPopup.popup.close();
            cal._eventPopup = null;
        } else {
            if (cal._eventPopup) {
                var target = cal._eventPopup.target;
                self._onPlanningEventHover();
                if (target == jsEvent.target || target == jsEvent.target.parentNode)
                    return;
            }
            cal._eventPopup = {
                slot: _ext.dom.div("pfc-planning-tip"),
                target: jsEvent.target
            };

            var date = _ext.culture.datetime.parse(event.start._i, event.start.f).toString(_ext.culture.format.getDate());
            _ext.dom.text("pfc-planning-tip-date", date, cal._eventPopup.slot);

            _moment.locale(_globals.context.localePreferences.code);
            var weekNum = _moment(event.start._i).week();

            _ext.dom.text("pfc-planning-tip-week", this.locale.plcal_week + " " + weekNum, cal._eventPopup.slot);
            cal._eventPopup.popup = _ext.popup.open({
                slot: cal._eventPopup.slot,
                position: {
                    my: "left top",
                    at: "right top",
                    of: cal._eventPopup.target
                },
                close: function () {
                    cal._eventPopup.record && cal._eventPopup.record.dispose();
                    cal._eventPopup.record = null;
                }
            });
            _ext.dom.toggleClass( cal._eventPopup.slot, "s-popup-default", false);

        }

    };
    cal.load(context);
    return cal;
};
