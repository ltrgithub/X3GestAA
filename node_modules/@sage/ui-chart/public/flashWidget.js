"use strict";
var _ext = require('@sage/syracuse-ui/lib/extend/extendGateway');
var _chartMenu = require("./menu/chartMenu");
var _flashWrapper = require("./flash/flashWrapper");
var _util = require('@sage/syracuse-ui/lib/fusion/tools/util');

var debug = false;

function _debugSyraTrans(){
    document.syraTrans = document.syraTrans || {};
    document.syraTrans.logSwitches = {
        all: true
    };
}

var Widget = function(context){
    this.context = context;
    context.prototype.$properties = context.prototype.$item && context.prototype.$item.$properties;
    var id = context.id + "_flash";
    var $fusionController = _ext.classic.getController(context);
    this.wrapper = _flashWrapper.load({
        cont: $(context.div),
        id: id,
        swf: "/@sage/ui-chart/public/deps/flash/FLASH",
        base: ".",
        bgcolor: "#FFFFFF",
        width: "100%",
        height: "100%"
    }, {
        instance: this,
        id: id
    }, {
        dataBinding: context.design.$bind,
        legacyRequest: ($fusionController != null),
        legacyLinks: ($fusionController != null),
        userLang: $fusionController && $fusionController.getLang()
    });
    
    this.domItem = this.wrapper.$$elt[0];
    if (context.prototype.$type.indexOf("x-shockwave-flash") >= 0) {
        this.domItem.className += " s-field-flash";
        this._bindEvent(true);
    }
    _ext.registerFlashWidget(context);
    
};

Widget.prototype._bindEvent = function(bind){
    var self = this;
    if (self.context && self.context.div) {
        if (bind) {
            $(self.context.div).delegate("object.s-field-flash", "mousedown keydown", function(event){
                self.context.field.page.externalAdapter.onFieldEvent({
                    field: self.context.field,
                    event: event,
                    doEvent: function(){
                    }
                });
                event.stopPropagation();
            });
        }
    }
    else {
        $(self.context.div).undelegate();
    }
};

Widget.prototype.fxgetinitialdata = function(callback, myData){
    var type = syra_fusion.syraUtil.getFieldType(this.context.field.attachedField || this.context.field);
    callback(null, null, type == syra_fusion.syraUtil.dataTypes.flash ? null : this.context.prototype);
    this._protoUpToDate = true;
};

Widget.prototype.fxgetctxmenu = function(callback, myData, serieUuid, serieLineId){
    _ext.popup.closeAll();
    if (!this.context.field.attachedField.$isDisabled) {
        this.context.field.page.externalAdapter.onGraphClickPicker({
            field: this.context.field,
            rcdUuid: serieUuid,
            rcdLineId: serieLineId,
            pickerType: "menus",
            grapLevel: "measure",
            doEvent: function(err, menus){
                var errEx = null;
                if (!menus && !err) {
                    // TODO : default error
                    errEx = [{
                        "$message": "not yet implemented",
                        "$severity": "warning"
                    }];
                }
                callback(errEx || err, menus);
            }
        });
    }
};

Widget.prototype.fxexeclink = function(callback, myData, link, options){
    if (options && options.legacy) {
        debug && _debugSyraTrans();
        var args = link.linkCtx.split("=");
        // LINKVUE = SUBAPSMON:LINKVUE(FONCTION,OBJET,PARAM)
        _ext.classic.onBlockExRpc(this.context, "LINKVUE", [args[0].split(",")[0], args[1].substr(0, 3), args[2]]);
    }
    else {
        _chartMenu.execLink(this.context,this.context.field, link);
    }
};

Widget.prototype.fxexecdrill = function(callback, myData, drillParams){
    delete this._protoUpToDate;
    _ext.data.fetch(this.context, {
        jsonParams: {
            $axes: drillParams.$axes,
            $slicer: drillParams.$slicer
        }
    });
};

Widget.prototype.fxnamedsvccall = function(callback, myData, svcParams){
    alert("Hi, i'm \"" + myData.id + "\" and y should process named service \"" + svcParams.svcId + "\"");
    callback(null, null);
};

Widget.prototype.fxhelpflash = function(callback, myData, svcParams){
    var helpLegacy = true;
    if (helpLegacy) {
        var helpUrl, session = _ext.classic.getController(this.context);
        if (svcParams.key && session && (session = session.getSession())) {
            helpUrl = session.getFlashHelpUrl(svcParams.key);
            this.context.field.page && helpUrl && syra_help.open(this.context.field.page, null, helpUrl);
        }
    }
    else {
        var item, hlpParams = {
            "type": (svcParams && svcParams.type) || syra_fusion.sapUtil.helpHandler.vpd.cat
        };
        if (svcParams.key && (item = svcParams.key.lastIndexOf("/")) >= 0) {
            hlpParams.key = svcParams.key.substr(++item);
            this.fxhelp(null, myData, hlpParams);
        }
    }
    callback && callback(null, null);
};
Widget.prototype.fxhelp = function(callback, myData, svcParams){
    var hlpParams = {
        "tokens": []
    }, $fusionController = _ext.classic.getController(item.context);
    if ($fusionController && svcParams && svcParams.key && svcParams.type) {
        hlpParams.tokens[0] = svcParams.type == "xhfunc" ? syra_fusion.sapUtil.helpHandler.fct.cat : (svcParams.type == "xhfield" ? syra_fusion.sapUtil.helpHandler.fld.cat : svcParams.type);
        hlpParams.tokens[1] = (svcParams.key.split("."))[0];
        $fusionController.displayBusinessHelp(hlpParams);
    }
    if (callback) {
        callback(null, null);
    }
};


Widget.prototype.fxspro = function(callback, myData, request){
    var self = this;
    function _result(res){
        var err = !res ? {
            "$message": "error"
        } : res.$diagnoses || null;
        var reply = {};
        if (!err) {
            reply.data = self.wrapper.rawData;
            reply.result = {
                "data": res.argsModified[0],
                "$diagnoses": {
                    "$message": res.argsModified[1],
                    "$severity": res.argsModified[2]
                },
                "status": res.argsModified[3]
            };
        }
        callback(err, reply);
    }
    debug && _debugSyraTrans();
    //AINTERFL:AINTERFL(CLOBD,MESSAG,GRAV,OK)
    _ext.classic.onBlockExRpc(this.context, "AINTERFL", [request], {
        isErrorIgnore: true,
        callback: _result,
        onError: function(){
            _result({
                "argsModified": ["", [""], [""], 1]
            });
        }
    });
};
Widget.prototype.getFieldEvalTitle = function(){
    return this.context.field.page.externalAdapter.getFieldEvalTitle(this);
};


Widget.prototype.getValue = function(){
    return this.wrapper.getData();
};

Widget.prototype.getInputValue = function(){
    return this.wrapper.getData();
};

Widget.prototype.isDirty = function(){
    return this.wrapper.isDirty();
};

Widget.prototype.setInputFocus = function(){
    this.domItem.focus();
    return true;
};

Widget.prototype.getEnumeration = function(code){
    var $fusionController = _ext.classic.getController(this.context);
    var fusionSess = $fusionController ? $fusionController.getSession() : null;
    return fusionSess && code ? fusionSess.getMenloc(code) : null;
};

Widget.prototype.setValue = function(dataRecordSet, metaData){
    this.dataset = dataRecordSet;
    var valueEx = null, type;
    if (this.wrapper) {
        type = this.context.field.attachedField ? syra_fusion.syraUtil.getFieldType(this.context.field.attachedField) : null;
        if ((this.dataset && (this.dataset.length > 0 || this.wrapper.typeInfo.acceptEmptyData)) || !this._protoUpToDate || (metaData && !this._protoUpToDate)) {
            this.wrapper.setData(this.dataset, this._protoUpToDate ? null : this.context.prototype, metaData);
        }
        this._protoUpToDate = true;
    }
};

Widget.prototype.dispose = function(){
    this._bindEvent(false);
};

exports.create = function(context){
    return new Widget(context);
};
