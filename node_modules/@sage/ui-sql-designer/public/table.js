'use strict';

let _base = require('./base');
let Scrollbar = require('syracuse-ui/lib/scroll/scrollbar').Scrollbar;

class Table {
	constructor(table, parent, parent_class) {
		this.syra_id = table.$.Id;
		this.syra_parent_item = parent;
		this.syra_item = null;
		this.syra_parent_class = parent_class;
		this._isDirty = false;
		this.plumb = this.syra_parent_class.plumb;
		this.plumbInstance = this.syra_parent_class.plumbInstance;
		this.sortDirection = 1;
		this.sortColumnID = '';
		this.width;
		this.height;
		this.create(table);
		this.makeDraggable();
		this.makeResizable();
		this.setEvents();
	}
	create(data) {
		let th = null;
		this.minimized = false;
		this.tablename = data.$.Name;
		this.tablelabel = data.$.Lbl;
		this.syra_item = this.syra_item = _base.createElement('table', this.syra_parent_item, this.syra_id, 'sqltable');
		this.syra_item.style.minWidth = '200px';
		this.syra_item.style.minHeight = '60px';
		this.syra_item.style.top = `${data.$.Y}px`;
		this.syra_item.style.left = `${data.$.X}px`;
		this.syra_item.style.zIndex = 3;
		this.width = parseInt(data.$.W, 10) > parseInt(this.syra_item.style.minWidth, 10) ? parseInt(data.$.W, 10) : parseInt(this.syra_item.style.minWidth, 10);
		this.height = parseInt(data.$.H, 10) > parseInt(this.syra_item.style.minHeight, 10) ? parseInt(data.$.H, 10) : parseInt(this.syra_item.style.minHeight, 10);
		this.syra_item.style.width = `${this.width}px`;
		this.syra_item.style.height = `${this.height}px`;

		//toolbar
		this.toolbar = _base.createElement('div', null, null, 'sqltable-toolbar');
		let el = _base.createElement('a', this.toolbar, 'icon-toolbar-close', 'icon-toolbar-close sqltable-toolbar-btn');
		el.setAttribute('href', '#');
		//el.setAttribute('title', '@Close');
		el = _base.createElement('a', this.toolbar, 'icon-toolbar-maximize', 'hide icon-toolbar-maximize sqltable-toolbar-btn');
		el.setAttribute('href', '#');
		// el.setAttribute('title', '@Maximize');
		el = _base.createElement('a', this.toolbar, 'icon-toolbar-minimize', 'icon-toolbar-minimize sqltable-toolbar-btn');
		el.setAttribute('href', '#');
		// el.setAttribute('title', '@Minimize');

		//tableHeader
		this.tableHeader = _base.createElement('thead', this.syra_item, `head_${this.syra_id}`, null);
		this.tableHeader.style.top = '0px';
		this.tableHeader.style.left = '0px';
		this.tableHeader.style.height = '66px';
		this.tableHeaderRowList = [];
		this.tableHeaderRowList.push(_base.createElement('tr', this.tableHeader, null, 'sqltable-name'));
		this.tableHeaderRowList.push(_base.createElement('tr', this.tableHeader, null, 'sqltable-name'));
		this.dropTop = _base.createElement('tr', this.tableHeader, `droptop_${this.syra_id}`, 'source-target no-drop-top');
		this.tableHeaderRowList.push(this.dropTop);

		_base.createElement('th', this.tableHeaderRowList[0], 'heading', null, `${data.$.Name}`).setAttribute('colspan', '3');
		_base.createElement('th', this.tableHeaderRowList[0], null, 'sqltable-toolbar-slot').appendChild(this.toolbar);
		_base.createElement('th', this.tableHeaderRowList[1], 'heading2', null, `${data.$.Lbl}`).setAttribute('colspan', '3');

		th = _base.createElement('th', this.tableHeaderRowList[2], `key-header-${this.syra_id}`, 'key-header', this.syra_parent_class.locale.sqlDesigner_tableKey);
		el = _base.createElement('div', th, null, 'sort-icon');
		th = _base.createElement('th', this.tableHeaderRowList[2], `field-header-${this.syra_id}`, 'field-header', this.syra_parent_class.locale.sqlDesigner_tableCode);
		el = _base.createElement('div', th, null, 'sort-icon');
		th = _base.createElement('th', this.tableHeaderRowList[2], `description-header-${this.syra_id}`, 'description-header', this.syra_parent_class.locale.sqlDesigner_tableLabel);
		el = _base.createElement('div', th, null, 'sort-icon');
		_base.createElement('th', this.tableHeaderRowList[2], null, 'blank hide', '');

		//scrollContainer
		this.scrollContainer = _base.createElement('div', this.syra_item, `scrollContainer_${this.syra_id}`, 'scrollContainer');
		this.scrollContainer.style.borderWidth = '1px';
		this.scrollContainer.style.minWidth = '198px';
		//tableBody
		this.tableBody = _base.createElement('tbody', this.scrollContainer, `body_${this.syra_id}`);
		this.tableBody.style.borderWidth = this.scrollContainer.style.borderWidth;
		this.tableBody.style.minWidth = this.scrollContainer.style.minWidth;
		this.tableBodyRowList = [];

		if (data.Fields && data.Fields.Field) {
			if (!data.Fields.Field.length) {
				this.addField(data.Fields.Field, data);
			} else {
				for (let i = 0; i < data.Fields.Field.length; i++) {
					this.addField(data.Fields.Field[i], data);
				}
			}
		}
		this.scrollBar = new Scrollbar({
			container: this.scrollContainer,
			scrollview: this.tableBody
		});
		//tableFooter
		this.tableFooter = _base.createElement('tfoot', this.syra_item, `foot_${this.syra_id}`);
		this.tableFooter.style.bottom = '1px';
		this.tableFooter.style.left = '1px';
		this.tableFooter.style.height = '20px';
		this.tableFooterRowList = [];
		this.dropBottom = _base.createElement('tr', this.tableFooter, `dropBottom_${this.syra_id}`, 'source-target no-drop-bottom');
		this.tableFooterRowList.push(this.dropBottom);
		this.tableFooterRowList[0].style.height = '20px';

		this.onResizeStop();
		$(this.syra_item).disableSelection();
	}
	addField(f, data) {
		let iskey = false;
		let tr = null;
		let td = null;

		if (data.Indexes && data.Indexes.Field) {
			if (!data.Indexes.Field.length) {
				if (iskey === false && (`;${data.Indexes.Field.$.Def};`).indexOf(`${f.$.Id};`) >= 0)
					iskey = true;
			} else {
				for (let j = 0; j < data.Indexes.Field.length; j++) {
					if (iskey === false && (`;${data.Indexes.Field[j].$.Def};`).indexOf(`${f.$.Id};`) >= 0)
						iskey = true;
				}
			}
			tr = _base.createElement('tr', this.tableBody, `[${data.$.Id}]${f.$.Id}`, 'draggable-item source-target');
			this.makeTableRowDraggable(tr);
			this.makeTableRowDroppable(tr);
			td = _base.createElement('td', tr, null, 'key');
			if (iskey) {
				td.textContent = '1';
				td.className = `${td.className} is-key`;
			} else {
				td.textContent = '2';
			}
			td = _base.createElement('td', tr, null, 'field', f.$.Id);
			td = _base.createElement('td', tr, null, 'description', f.$.Lbl);
			this.tableBodyRowList.push(tr);
			iskey = false;
		}
	}
	makeDraggable() {
		let that = this;
		this.plumbInstance.draggable(that.syra_item, {
			handle: '#heading',
			grid: [20, 20],
			start: function() {
				that.syra_parent_class.bringTableToFront(that.syra_id);
				that.syra_item.classList.add('drag-shadow');
			},
			stop: function(event) {
				if (that.fixCordinates(event.el)) {
					that.plumbInstance.repaintEverything();
				}
				that.onDirtyChanged(true);
				that.syra_item.classList.remove('drag-shadow');
			}
		});
	}
	dragEnableChange(enable) {
		this.plumbInstance.setDraggable(this.syra_item, enable);
		for (let i = 0; i < this.tableBodyRowList.length; i++) {
			$(this.tableBodyRowList[i]).draggable({
				disabled: !enable
			});
		}
	}
	makeTableRowDraggable(tr) {
		let that = this;
		tr.addEventListener('mousedown', () => {
		}, false);
		tr.addEventListener('mouseup', () => {
		}, false);
		$(tr).draggable({
			helper: function(ev) {
				let dragitem = _base.createElement('li', that.syra_parent_class.syra_item, `li_${tr.getAttribute('id')}`, 'sqldropfieldlistitem sqldropfieldlistitem-drag');
				let dropfielditem = _base.createElement('div', dragitem, `dfi_${tr.getAttribute('id')}`, 'sqldropfielditem sqldropfielditem-drag');
				_base.createElement('div', dropfielditem, null, null, ev.currentTarget.getElementsByClassName('description')[0].textContent);
				_base.createElement('div', dropfielditem, null, null, that.tablename);
				_base.createElement('div', dropfielditem, null, null, that.tablelabel);
				return dragitem;
			},
			cursorAt: {
				right: -10,
				bottom: 25
			},
			cursor: 'move',
			distance: 10,
			delay: 100,
			scope: 'cart-item',
			revert: 'invalid',
			opacity: 0.8
		});
	}
	makeTableRowDroppable(tr) {
		let that = this;
		$(tr).droppable({
			tolerance: 'pointer',
			scope: 'cart-item',
			hoverClass: 'draghover',
			accept: function(el) {
				return !that.plumb.hasClass('no-drop-top') && !that.plumb.hasClass('no-drop-bottom') && el[0].nodeName === 'TR';
			},
			drop: function(event, ui) {
				if (that.isElementVisible(event.target).visible) {
					let req = `<INTERFL><TYPFL>fqd</TYPFL><TYPINTER>updateQuery</TYPINTER><LINES><ACT><AT>${_base.requestTypes.CREATELINK}</AT><SK>${ui.draggable[0].id}</SK><TK>${this.id}</TK><P1>${that.syra_parent_class.connectionCount++}</P1><P2>L</P2></ACT></LINES></INTERFL>`
					that.syra_parent_class.makeAjaxCall(_base.requestTypes.CREATELINK, null, {
						'that': that,
						's': ui.draggable[0].id,
						't': this.id
					}, req);
				}
			},
			over: function() {
			},
			out: function() {
			}
		});
	}
	makeResizable() {
		let that = this;
		$(this.syra_item).resizable({
			resize: function() {
				that.onResizeStart();
			},
			stop: function() {
				that.onResizeStop();
				that.onDirtyChanged(true);
			}
		});
	}
	removeResizable() {
		$(this.syra_item).resizable('destroy');
	}
	fixCordinates(element) {
		var ret = parseInt(element.style.top, 10) < 0 || parseInt(element.style.left, 10) < 0;
		element.style.top = parseInt(element.style.top, 10) < 0 ? '0px' : `${element.style.top}px `;
		element.style.left = parseInt(element.style.left, 10) < 0 ? '0px' : `${element.style.left}px `;
		return ret;
	}
	setEvents() {
		let that = this;
		this.syra_item.addEventListener('click', (ev) => {
			this.onClick(ev, that);
		}, false);
		this.tableBody.addEventListener('scroll', () => {
			that.checkConnections();
		}, false);
	}
	onClick(ev, that) {
		switch (ev.target.getAttribute('id')) {
			case 'icon-toolbar-close':
				that.syra_parent_class.removeTable(that);
				break;
			case 'icon-toolbar-maximize':
				this.onMinMax(that, ev, false);
				break;
			case 'icon-toolbar-minimize':
				this.onMinMax(that, ev, true);
				break;
			case `key-header-${that.syra_id}`:
			case `field-header-${that.syra_id}`:
			case `description-header-${that.syra_id}`:
				this.onSortTable(ev);
				break;
			default:
				that.syra_parent_class.bringTableToFront(that.syra_id);
		}
		ev.preventDefault();
		ev.stopPropagation();
	}
	onMinMax(that, ev, min) {
		this.minimized = min;
		min ? $(that.tableBody).hide() : $(that.tableBody).show();
		that.syra_item.getElementsByClassName('no-drop-top')[0].classList.toggle('hide');
		that.syra_item.getElementsByClassName('blank')[0].classList.toggle('hideon');
		ev.target.classList.toggle('hide');
		min ? that.syra_item.getElementsByClassName('icon-toolbar-maximize')[0].classList.toggle('hide') :
			that.syra_item.getElementsByClassName('icon-toolbar-minimize')[0].classList.toggle('hide');
		if (min) {
			that.holdWidth = that.syra_item.style.width;
			that.holdHeight = that.syra_item.style.height;
		}
		that.syra_item.style.width = min ? '200px' : that.holdWidth;
		that.syra_item.style.height = min ? '40px' : that.holdHeight;
		min ? that.removeResizable() : that.makeResizable();
		that.onResizeStop();
	}
	onSortTable(ev) {
		let that = this;
		this.sortDirection = this.sortColumnID === ev.target.getAttribute('id') ? this.sortDirection * -1 : 1;
		$($(this.tableHeader).find('.no-drop-top')[0]).find('th').each(function(i, td) {
			if (td.getElementsByClassName('sort-icon').length > 0) {
				td.getElementsByClassName('sort-icon')[0].classList.remove('icon-sort-ascending');
				td.getElementsByClassName('sort-icon')[0].classList.remove('icon-sort-descending');
			}
			if (ev.target == td)
				that.sortDirection === 1 ? td.getElementsByClassName('sort-icon')[0].classList.add('icon-sort-ascending') :
					td.getElementsByClassName('sort-icon')[0].classList.add('icon-sort-descending');
		});
		this.sortColumnID = ev.target.getAttribute('id');
		let columnNumber = $(ev.target).prevAll().length;
		this.sortTable(this.sortDirection, columnNumber);
	}
	sortTable(sortDirection, columnNumber) {
		let that = this;
		let rows = Array.prototype.slice.call(this.tableBody.getElementsByTagName('tr'));
		rows.sort(function(_tr1, _tr2) {
			let tr1 = getVal(_tr1);
			let tr2 = getVal(_tr2);
			if (tr1 < tr2) {
				return -1 * sortDirection;
			}
			if (tr1 > tr2) {
				return 1 * sortDirection;
			}
			return 0;
		});

		function getVal(el) {
			var v = $(el).children('td').eq(columnNumber).text().toUpperCase();
			if ($.isNumeric(v)) {
				v = parseInt(v, 10);
			}
			return v;
		}
		$.each(rows, (index, row) => {
			$(that.tableBody).append(row);
		});
		this.checkConnections();
	}
	removeTable() {
		let that = this;
		$(this.tableBody).find('.jsplumb-connected').each(function(i, tr) {

			that.plumbInstance.detachAllConnections(that.dropTop);
			that.plumbInstance.removeAllEndpoints(that.dropTop);
			that.plumbInstance.detachAllConnections(that.dropBottom);
			that.plumbInstance.removeAllEndpoints(that.dropBottom);
			that.plumbInstance.detachAllConnections(tr);
			that.plumbInstance.removeAllEndpoints(tr);
		});
		$(this.syra_item).remove();
	}
	onResizeStart() {
		this.tableBody.style.height = parseInt(this.syra_item.style.height, 10) - 80 + 'px';
		this.tableBody.style.width = parseInt(this.syra_item.style.width, 10) - 2 + 'px';
		this.scrollContainer.style.height = this.tableBody.style.height;
		this.scrollContainer.style.width = this.tableBody.style.width;
		this.tableFooter.style.width = this.tableBody.style.width;
		this.scrollBar.resize();
		this.checkConnections();
	}
	onResizeStop() {
		this.width = parseInt(this.syra_item.style.width, 10);
		this.height = parseInt(this.syra_item.style.height, 10);
		this.tableBody.style.height = `${parseInt(this.syra_item.style.height, 10) - parseInt(this.tableHeader.style.height, 10) - parseInt(this.tableFooter.style.height, 10)}px`;
		this.tableBody.style.width = `${this.width - 2}px`;
		this.scrollContainer.style.height = this.tableBody.style.height;
		this.scrollContainer.style.width = this.tableBody.style.width;
		this.tableFooter.style.width = this.tableBody.style.width;
		this.scrollBar.resize();
		this.checkConnections();
	}
	flash() {
		let timesRun = 0;
		let t = this;
		let backgroundInterval = setInterval(() => {
			t.syra_item.classList.toggle('flash');
			timesRun += 1;
			if (timesRun === 10) {
				clearInterval(backgroundInterval);
			}
		}, 100);
	}
	checkConnections() {
		let that = this;
		let connectionVisible = true;
		$(this.tableBody).find('.jsplumb-connected').each(function(i, tr) {
			var elementInfo = that.isElementVisible(tr);
			that.plumbInstance.select({
				source: tr.getAttribute('id')
			}).each(function(conn) {
				if (conn.source && !conn.getParameter('isShadow')) {
					conn.setParameter('source_visible', elementInfo.visible);
					connectionVisible = conn.getParameter('source_visible') && conn.getParameter('target_visible');
					conn.endpoints[0].setVisible(connectionVisible);
					if (!connectionVisible) {
						elementInfo['endpointType'] = 'source';
						that.createShadowConnection(conn, elementInfo);
					} else {
						if (conn.shadow) {
							that.plumbInstance.detach(conn.shadow);
							conn.shadow = null;
						}
					}
				}
			});
			that.plumbInstance.select({
				target: tr.getAttribute('id')
			}).each(function(conn) {
				if (conn.source && !conn.getParameter('isShadow')) {
					conn.setParameter('target_visible', elementInfo.visible);
					connectionVisible = conn.getParameter('source_visible') && conn.getParameter('target_visible');
					conn.endpoints[0].setVisible(connectionVisible);
					if (!connectionVisible) {
						elementInfo['endpointType'] = 'target';
						that.createShadowConnection(conn, elementInfo);
					} else {
						if (conn.shadow) {
							that.plumbInstance.detach(conn.shadow);
							conn.shadow = null;
						}
					}
				}
			});
		});
		this.plumbInstance.recalculateOffsets(this.syra_item);
		this.plumbInstance.repaintEverything();
	}
	createShadowConnection(conn, elementInfo) {
		let source;
		let target;
		let overlays = conn.getOverlay('arrow') ? [this.plumb.arrowOverlay, this.plumb.customDotSourceOverlay, this.plumb.customMenuOverlay] : [this.plumb.customDotTargetOverlay, this.plumb.customDotSourceOverlay, this.plumb.customMenuOverlay];
		let endpoint = elementInfo.scrolledTop ? this.syra_item.getElementsByClassName('no-drop-top')[0] : this.syra_item.getElementsByClassName('no-drop-bottom')[0];
		//cater for scrollbar
		let anchor = this.plumbInstance.Defaults.Anchor;
		if (elementInfo.endpointType === 'source') {
			source = conn.getParameter('source_visible') ? conn.source : endpoint;
			target = conn.shadow ? conn.shadow.target : conn.target;
		} else {
			target = conn.getParameter('target_visible') ? conn.target : endpoint;
			source = conn.shadow ? conn.shadow.source : conn.source;
		}
		if ((source.classList.contains('no-drop-top') || source.classList.contains('no-drop-bottom')) &&
			(target.classList.contains('no-drop-top') || target.classList.contains('no-drop-bottom'))) {
			anchor = ['Continuous', [
				[0, 0.5, -1, 0, -3, 0],
				[1, 0.5, 1, 0, 5, 0]
			]];
		}
		if (conn.shadow)
			this.plumbInstance.detach(conn.shadow);
		conn.shadow = this.plumbInstance.connect({
			source: source,
			target: target,
			type: conn.type,
			overlays: overlays,
			anchor: anchor,
			parameters: {
				'x3_id': 'shadow_' + conn.getParameter('x3_id'),
				'isShadow': true,
				'parentConnection': conn
			}
		});
		return conn.shadow;
	}
	isElementVisible(el) {
		if (!this.minimized) {
			let par = el.offsetParent;
			let scrolledBottom = true;
			let scrolledTop = false;
			if (par !== null) {
				let elRect = el.getBoundingClientRect();
				let parRect = par.getBoundingClientRect();
				scrolledTop = !(elRect.top + (elRect.height / 2) >= parRect.top);
				scrolledBottom = !(elRect.bottom - (elRect.height / 2) <= parRect.bottom);
			}
			return {
				'visible': !(scrolledTop || scrolledBottom),
				'scrolledTop': scrolledTop,
				'scrolledBottom': scrolledBottom
			};
		}
		else {
			return {
				'visible': false,
				'scrolledTop': false,
				'scrolledBottom': true
			};
		}
	}
	isDirty() {
		return this._isDirty;
	}
	onDirtyChanged(isDirty) {
		this._isDirty = isDirty;
	}
}

exports.Table = Table;